// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// Init ;
   8: CALL 44 0 0
// DebugMode ;
  12: CALL 253 0 0
// AnimateTrees ( true ) ;
  16: LD_INT 1
  18: PPUSH
  19: CALL_OW 573
// CreateNature ;
  23: CALL 1531 0 0
// PrepareRussians ;
  27: CALL 4541 0 0
// PrepareAmericans ;
  31: CALL 3411 0 0
// Action ;
  35: CALL 8421 0 0
// SaveForQuickRestart ;
  39: CALL_OW 22
// end ;
  43: END
// export debug ; export mission_prev_prefix , mission_prefix ; export buildings_counter , time_to_end , can_end , must_end , kill_counter ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// mission_prefix := 07c_ ;
  55: LD_ADDR_EXP 3
  59: PUSH
  60: LD_STRING 07c_
  62: ST_TO_ADDR
// mission_prev_prefix := 07_ ;
  63: LD_ADDR_EXP 2
  67: PUSH
  68: LD_STRING 07_
  70: ST_TO_ADDR
// buildings_counter := 0 ;
  71: LD_ADDR_EXP 4
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// time_to_end := [ [ 32 32$00 , 29 29$00 , 26 26$00 ] [ Difficulty ] , [ 38 38$00 , 35 35$00 , 32 32$00 ] [ Difficulty ] , [ 44 44$00 , 41 41$00 , 38 38$00 ] [ Difficulty ] ] ;
  79: LD_ADDR_EXP 5
  83: PUSH
  84: LD_INT 67200
  86: PUSH
  87: LD_INT 60900
  89: PUSH
  90: LD_INT 54600
  92: PUSH
  93: EMPTY
  94: LIST
  95: LIST
  96: LIST
  97: PUSH
  98: LD_OWVAR 67
 102: ARRAY
 103: PUSH
 104: LD_INT 79800
 106: PUSH
 107: LD_INT 73500
 109: PUSH
 110: LD_INT 67200
 112: PUSH
 113: EMPTY
 114: LIST
 115: LIST
 116: LIST
 117: PUSH
 118: LD_OWVAR 67
 122: ARRAY
 123: PUSH
 124: LD_INT 92400
 126: PUSH
 127: LD_INT 86100
 129: PUSH
 130: LD_INT 79800
 132: PUSH
 133: EMPTY
 134: LIST
 135: LIST
 136: LIST
 137: PUSH
 138: LD_OWVAR 67
 142: ARRAY
 143: PUSH
 144: EMPTY
 145: LIST
 146: LIST
 147: LIST
 148: ST_TO_ADDR
// can_end := false ;
 149: LD_ADDR_EXP 6
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// must_end := false ;
 157: LD_ADDR_EXP 7
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// kill_counter := 0 ;
 165: LD_ADDR_EXP 8
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// end ;
 173: LD_VAR 0 1
 177: RET
// every 0 0$01 trigger not debug do
 178: LD_EXP 1
 182: NOT
 183: IFFALSE 252
 185: GO 187
 187: DISABLE
// begin enable ;
 188: ENABLE
// if not must_end then
 189: LD_EXP 7
 193: NOT
 194: IFFALSE 215
// display_strings := [ #Am07-1 , tick ] else
 196: LD_ADDR_OWVAR 47
 200: PUSH
 201: LD_STRING #Am07-1
 203: PUSH
 204: LD_OWVAR 1
 208: PUSH
 209: EMPTY
 210: LIST
 211: LIST
 212: ST_TO_ADDR
 213: GO 252
// display_strings := [ #Am07-1 , tick , #Am07-2 , time_to_end [ 3 ] - tick ] ;
 215: LD_ADDR_OWVAR 47
 219: PUSH
 220: LD_STRING #Am07-1
 222: PUSH
 223: LD_OWVAR 1
 227: PUSH
 228: LD_STRING #Am07-2
 230: PUSH
 231: LD_EXP 5
 235: PUSH
 236: LD_INT 3
 238: ARRAY
 239: PUSH
 240: LD_OWVAR 1
 244: MINUS
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: LIST
 250: LIST
 251: ST_TO_ADDR
// end ;
 252: END
// function DebugMode ; var i ; begin
 253: LD_INT 0
 255: PPUSH
 256: PPUSH
// if not debug then
 257: LD_EXP 1
 261: NOT
 262: IFFALSE 266
// exit ;
 264: GO 273
// FogOff ( 1 ) ;
 266: LD_INT 1
 268: PPUSH
 269: CALL_OW 344
// end ;
 273: LD_VAR 0 1
 277: RET
// every 3 trigger debug do var i , filter ;
 278: LD_EXP 1
 282: IFFALSE 371
 284: GO 286
 286: DISABLE
 287: LD_INT 0
 289: PPUSH
 290: PPUSH
// begin enable ;
 291: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 500 ] ] ] ) ;
 292: LD_ADDR_VAR 0 2
 296: PUSH
 297: LD_INT 22
 299: PUSH
 300: LD_INT 1
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: PUSH
 307: LD_INT 3
 309: PUSH
 310: LD_INT 24
 312: PUSH
 313: LD_INT 500
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: PUSH
 320: EMPTY
 321: LIST
 322: LIST
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: PPUSH
 328: CALL_OW 69
 332: ST_TO_ADDR
// if not filter then
 333: LD_VAR 0 2
 337: NOT
 338: IFFALSE 342
// exit ;
 340: GO 371
// for i in filter do
 342: LD_ADDR_VAR 0 1
 346: PUSH
 347: LD_VAR 0 2
 351: PUSH
 352: FOR_IN
 353: IFFALSE 369
// SetLives ( i , 1000 ) ;
 355: LD_VAR 0 1
 359: PPUSH
 360: LD_INT 1000
 362: PPUSH
 363: CALL_OW 234
 367: GO 352
 369: POP
 370: POP
// end ;
 371: PPOPN 2
 373: END
// every 0 0$1 trigger kill_counter >= 20 do
 374: LD_EXP 8
 378: PUSH
 379: LD_INT 20
 381: GREATEREQUAL
 382: IFFALSE 394
 384: GO 386
 386: DISABLE
// SetAchievement ( ACH_HITMAN ) ;
 387: LD_STRING ACH_HITMAN
 389: PPUSH
 390: CALL_OW 543
 394: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) >= 3 do
 395: LD_INT 22
 397: PUSH
 398: LD_INT 1
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: PUSH
 405: LD_INT 23
 407: PUSH
 408: LD_INT 3
 410: PUSH
 411: EMPTY
 412: LIST
 413: LIST
 414: PUSH
 415: LD_INT 21
 417: PUSH
 418: LD_INT 2
 420: PUSH
 421: EMPTY
 422: LIST
 423: LIST
 424: PUSH
 425: EMPTY
 426: LIST
 427: LIST
 428: LIST
 429: PPUSH
 430: CALL_OW 69
 434: PUSH
 435: LD_INT 3
 437: GREATEREQUAL
 438: IFFALSE 450
 440: GO 442
 442: DISABLE
// SetAchievement ( ACH_TANKACE ) ;
 443: LD_STRING ACH_TANKACE
 445: PPUSH
 446: CALL_OW 543
 450: END
// every 0 0$1 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) = 0 do
 451: LD_INT 2
 453: PUSH
 454: LD_INT 30
 456: PUSH
 457: LD_INT 0
 459: PUSH
 460: EMPTY
 461: LIST
 462: LIST
 463: PUSH
 464: LD_INT 30
 466: PUSH
 467: LD_INT 1
 469: PUSH
 470: EMPTY
 471: LIST
 472: LIST
 473: PUSH
 474: EMPTY
 475: LIST
 476: LIST
 477: LIST
 478: PPUSH
 479: CALL_OW 69
 483: PUSH
 484: LD_INT 0
 486: EQUAL
 487: IFFALSE 499
 489: GO 491
 491: DISABLE
// SetAchievement ( ACH_COMMANDO ) ; end_of_file
 492: LD_STRING ACH_COMMANDO
 494: PPUSH
 495: CALL_OW 543
 499: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 500: LD_INT 0
 502: PPUSH
// uc_side := side ;
 503: LD_ADDR_OWVAR 20
 507: PUSH
 508: LD_VAR 0 1
 512: ST_TO_ADDR
// uc_nation := nation ;
 513: LD_ADDR_OWVAR 21
 517: PUSH
 518: LD_VAR 0 2
 522: ST_TO_ADDR
// vc_chassis := chassis ;
 523: LD_ADDR_OWVAR 37
 527: PUSH
 528: LD_VAR 0 3
 532: ST_TO_ADDR
// vc_engine := engine ;
 533: LD_ADDR_OWVAR 39
 537: PUSH
 538: LD_VAR 0 4
 542: ST_TO_ADDR
// vc_control := control ;
 543: LD_ADDR_OWVAR 38
 547: PUSH
 548: LD_VAR 0 5
 552: ST_TO_ADDR
// vc_weapon := weapon ;
 553: LD_ADDR_OWVAR 40
 557: PUSH
 558: LD_VAR 0 6
 562: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 563: LD_ADDR_OWVAR 41
 567: PUSH
 568: LD_VAR 0 7
 572: ST_TO_ADDR
// result := CreateVehicle ;
 573: LD_ADDR_VAR 0 8
 577: PUSH
 578: CALL_OW 45
 582: ST_TO_ADDR
// end ;
 583: LD_VAR 0 8
 587: RET
// export function GetRandom ( sex ) ; var i , filter ; begin
 588: LD_INT 0
 590: PPUSH
 591: PPUSH
 592: PPUSH
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] ;
 593: LD_ADDR_VAR 0 4
 597: PUSH
 598: LD_INT 22
 600: PUSH
 601: LD_INT 1
 603: PUSH
 604: EMPTY
 605: LIST
 606: LIST
 607: PUSH
 608: LD_INT 21
 610: PUSH
 611: LD_INT 1
 613: PUSH
 614: EMPTY
 615: LIST
 616: LIST
 617: PUSH
 618: LD_INT 50
 620: PUSH
 621: EMPTY
 622: LIST
 623: PUSH
 624: EMPTY
 625: LIST
 626: LIST
 627: LIST
 628: PPUSH
 629: CALL_OW 69
 633: PUSH
 634: LD_EXP 9
 638: PUSH
 639: LD_EXP 10
 643: PUSH
 644: LD_EXP 11
 648: PUSH
 649: LD_EXP 12
 653: PUSH
 654: LD_EXP 13
 658: PUSH
 659: LD_EXP 14
 663: PUSH
 664: LD_EXP 15
 668: PUSH
 669: LD_EXP 16
 673: PUSH
 674: LD_EXP 18
 678: PUSH
 679: LD_EXP 17
 683: PUSH
 684: EMPTY
 685: LIST
 686: LIST
 687: LIST
 688: LIST
 689: LIST
 690: LIST
 691: LIST
 692: LIST
 693: LIST
 694: LIST
 695: DIFF
 696: ST_TO_ADDR
// if not filter then
 697: LD_VAR 0 4
 701: NOT
 702: IFFALSE 706
// exit ;
 704: GO 733
// result := UnitFilter ( filter , [ f_sex , sex ] ) ;
 706: LD_ADDR_VAR 0 2
 710: PUSH
 711: LD_VAR 0 4
 715: PPUSH
 716: LD_INT 26
 718: PUSH
 719: LD_VAR 0 1
 723: PUSH
 724: EMPTY
 725: LIST
 726: LIST
 727: PPUSH
 728: CALL_OW 72
 732: ST_TO_ADDR
// end ;
 733: LD_VAR 0 2
 737: RET
// export function SayX ( units , ident ) ; var i ; begin
 738: LD_INT 0
 740: PPUSH
 741: PPUSH
// result := false ;
 742: LD_ADDR_VAR 0 3
 746: PUSH
 747: LD_INT 0
 749: ST_TO_ADDR
// if not units then
 750: LD_VAR 0 1
 754: NOT
 755: IFFALSE 759
// exit ;
 757: GO 813
// for i in units do
 759: LD_ADDR_VAR 0 4
 763: PUSH
 764: LD_VAR 0 1
 768: PUSH
 769: FOR_IN
 770: IFFALSE 811
// if IsOk ( i ) then
 772: LD_VAR 0 4
 776: PPUSH
 777: CALL_OW 302
 781: IFFALSE 809
// begin Say ( i , ident ) ;
 783: LD_VAR 0 4
 787: PPUSH
 788: LD_VAR 0 2
 792: PPUSH
 793: CALL_OW 88
// result := i ;
 797: LD_ADDR_VAR 0 3
 801: PUSH
 802: LD_VAR 0 4
 806: ST_TO_ADDR
// break ;
 807: GO 811
// end ;
 809: GO 769
 811: POP
 812: POP
// end ;
 813: LD_VAR 0 3
 817: RET
// export function GoToAnotherTower ( un , b , x , y ) ; var i , filter , barracks , side ; begin
 818: LD_INT 0
 820: PPUSH
 821: PPUSH
 822: PPUSH
 823: PPUSH
 824: PPUSH
// if not un or not IsOk ( un ) then
 825: LD_VAR 0 1
 829: NOT
 830: PUSH
 831: LD_VAR 0 1
 835: PPUSH
 836: CALL_OW 302
 840: NOT
 841: OR
 842: IFFALSE 846
// exit ;
 844: GO 1136
// side := GetSide ( un ) ;
 846: LD_ADDR_VAR 0 9
 850: PUSH
 851: LD_VAR 0 1
 855: PPUSH
 856: CALL_OW 255
 860: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_ok ] , [ f_empty ] ] ) diff b ;
 861: LD_ADDR_VAR 0 7
 865: PUSH
 866: LD_INT 22
 868: PUSH
 869: LD_VAR 0 9
 873: PUSH
 874: EMPTY
 875: LIST
 876: LIST
 877: PUSH
 878: LD_INT 30
 880: PUSH
 881: LD_INT 32
 883: PUSH
 884: EMPTY
 885: LIST
 886: LIST
 887: PUSH
 888: LD_INT 50
 890: PUSH
 891: EMPTY
 892: LIST
 893: PUSH
 894: LD_INT 58
 896: PUSH
 897: EMPTY
 898: LIST
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: LIST
 904: LIST
 905: PPUSH
 906: CALL_OW 69
 910: PUSH
 911: LD_VAR 0 2
 915: DIFF
 916: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_barracks ] ] ) ;
 917: LD_ADDR_VAR 0 8
 921: PUSH
 922: LD_INT 22
 924: PUSH
 925: LD_VAR 0 9
 929: PUSH
 930: EMPTY
 931: LIST
 932: LIST
 933: PUSH
 934: LD_INT 30
 936: PUSH
 937: LD_INT 5
 939: PUSH
 940: EMPTY
 941: LIST
 942: LIST
 943: PUSH
 944: EMPTY
 945: LIST
 946: LIST
 947: PPUSH
 948: CALL_OW 69
 952: ST_TO_ADDR
// if not filter then
 953: LD_VAR 0 7
 957: NOT
 958: IFFALSE 1048
// begin ComMoveXY ( un , x , y ) ;
 960: LD_VAR 0 1
 964: PPUSH
 965: LD_VAR 0 3
 969: PPUSH
 970: LD_VAR 0 4
 974: PPUSH
 975: CALL_OW 111
// if barracks then
 979: LD_VAR 0 8
 983: IFFALSE 1046
// for i in barracks do
 985: LD_ADDR_VAR 0 6
 989: PUSH
 990: LD_VAR 0 8
 994: PUSH
 995: FOR_IN
 996: IFFALSE 1044
// begin if UnitsInside ( i ) < 6 and IsOk ( i ) then
 998: LD_VAR 0 6
1002: PPUSH
1003: CALL_OW 313
1007: PUSH
1008: LD_INT 6
1010: LESS
1011: PUSH
1012: LD_VAR 0 6
1016: PPUSH
1017: CALL_OW 302
1021: AND
1022: IFFALSE 1042
// begin AddComEnterUnit ( un , i ) ;
1024: LD_VAR 0 1
1028: PPUSH
1029: LD_VAR 0 6
1033: PPUSH
1034: CALL_OW 180
// exit ;
1038: POP
1039: POP
1040: GO 1136
// end ; end ;
1042: GO 995
1044: POP
1045: POP
// end else
1046: GO 1136
// begin filter := SortByDistanceUnit ( un , filter , true , true ) ;
1048: LD_ADDR_VAR 0 7
1052: PUSH
1053: LD_VAR 0 1
1057: PPUSH
1058: LD_VAR 0 7
1062: PPUSH
1063: LD_INT 1
1065: PPUSH
1066: LD_INT 1
1068: PPUSH
1069: CALL 32418 0 4
1073: ST_TO_ADDR
// for i in filter do
1074: LD_ADDR_VAR 0 6
1078: PUSH
1079: LD_VAR 0 7
1083: PUSH
1084: FOR_IN
1085: IFFALSE 1134
// if GetTag ( i ) <> 7 then
1087: LD_VAR 0 6
1091: PPUSH
1092: CALL_OW 110
1096: PUSH
1097: LD_INT 7
1099: NONEQUAL
1100: IFFALSE 1132
// begin ComEnterUnit ( un , i ) ;
1102: LD_VAR 0 1
1106: PPUSH
1107: LD_VAR 0 6
1111: PPUSH
1112: CALL_OW 120
// SetTag ( i , 7 ) ;
1116: LD_VAR 0 6
1120: PPUSH
1121: LD_INT 7
1123: PPUSH
1124: CALL_OW 109
// exit ;
1128: POP
1129: POP
1130: GO 1136
// end ;
1132: GO 1084
1134: POP
1135: POP
// end ; end ;
1136: LD_VAR 0 5
1140: RET
// export function BaseNeedEnergy ( base ) ; var i , tmp ; begin
1141: LD_INT 0
1143: PPUSH
1144: PPUSH
1145: PPUSH
// if not base then
1146: LD_VAR 0 1
1150: NOT
1151: IFFALSE 1155
// exit ;
1153: GO 1213
// tmp := GetEnergy ( GetBase ( base ) ) ;
1155: LD_ADDR_VAR 0 4
1159: PUSH
1160: LD_VAR 0 1
1164: PPUSH
1165: CALL_OW 274
1169: PPUSH
1170: CALL_OW 278
1174: ST_TO_ADDR
// if tmp [ 1 ] > tmp [ 4 ] then
1175: LD_VAR 0 4
1179: PUSH
1180: LD_INT 1
1182: ARRAY
1183: PUSH
1184: LD_VAR 0 4
1188: PUSH
1189: LD_INT 4
1191: ARRAY
1192: GREATER
1193: IFFALSE 1205
// result := true else
1195: LD_ADDR_VAR 0 2
1199: PUSH
1200: LD_INT 1
1202: ST_TO_ADDR
1203: GO 1213
// result := false ;
1205: LD_ADDR_VAR 0 2
1209: PUSH
1210: LD_INT 0
1212: ST_TO_ADDR
// end ;
1213: LD_VAR 0 2
1217: RET
// export function FilterPeople ( side ) ; begin
1218: LD_INT 0
1220: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) ;
1221: LD_ADDR_VAR 0 2
1225: PUSH
1226: LD_INT 22
1228: PUSH
1229: LD_VAR 0 1
1233: PUSH
1234: EMPTY
1235: LIST
1236: LIST
1237: PUSH
1238: LD_INT 21
1240: PUSH
1241: LD_INT 1
1243: PUSH
1244: EMPTY
1245: LIST
1246: LIST
1247: PUSH
1248: EMPTY
1249: LIST
1250: LIST
1251: PPUSH
1252: CALL_OW 69
1256: ST_TO_ADDR
// end ;
1257: LD_VAR 0 2
1261: RET
// export function FilterDrivers ( side ) ; begin
1262: LD_INT 0
1264: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_outside ] ] ] ) ;
1265: LD_ADDR_VAR 0 2
1269: PUSH
1270: LD_INT 22
1272: PUSH
1273: LD_VAR 0 1
1277: PUSH
1278: EMPTY
1279: LIST
1280: LIST
1281: PUSH
1282: LD_INT 3
1284: PUSH
1285: LD_INT 56
1287: PUSH
1288: EMPTY
1289: LIST
1290: PUSH
1291: EMPTY
1292: LIST
1293: LIST
1294: PUSH
1295: EMPTY
1296: LIST
1297: LIST
1298: PPUSH
1299: CALL_OW 69
1303: ST_TO_ADDR
// end ;
1304: LD_VAR 0 2
1308: RET
// export function FilterPeopleArea ( side , area ) ; begin
1309: LD_INT 0
1311: PPUSH
// result := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
1312: LD_ADDR_VAR 0 3
1316: PUSH
1317: LD_VAR 0 2
1321: PPUSH
1322: LD_INT 22
1324: PUSH
1325: LD_INT 1
1327: PUSH
1328: EMPTY
1329: LIST
1330: LIST
1331: PUSH
1332: LD_INT 21
1334: PUSH
1335: LD_INT 1
1337: PUSH
1338: EMPTY
1339: LIST
1340: LIST
1341: PUSH
1342: EMPTY
1343: LIST
1344: LIST
1345: PPUSH
1346: CALL_OW 70
1350: ST_TO_ADDR
// end ;
1351: LD_VAR 0 3
1355: RET
// export function FilterDriversArea ( side , area ) ; var i , tmp ; begin
1356: LD_INT 0
1358: PPUSH
1359: PPUSH
1360: PPUSH
// tmp := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
1361: LD_ADDR_VAR 0 5
1365: PUSH
1366: LD_VAR 0 2
1370: PPUSH
1371: LD_INT 22
1373: PUSH
1374: LD_INT 1
1376: PUSH
1377: EMPTY
1378: LIST
1379: LIST
1380: PUSH
1381: LD_INT 21
1383: PUSH
1384: LD_INT 2
1386: PUSH
1387: EMPTY
1388: LIST
1389: LIST
1390: PUSH
1391: LD_INT 3
1393: PUSH
1394: LD_INT 58
1396: PUSH
1397: EMPTY
1398: LIST
1399: PUSH
1400: EMPTY
1401: LIST
1402: LIST
1403: PUSH
1404: EMPTY
1405: LIST
1406: LIST
1407: LIST
1408: PPUSH
1409: CALL_OW 70
1413: ST_TO_ADDR
// result := [ ] ;
1414: LD_ADDR_VAR 0 3
1418: PUSH
1419: EMPTY
1420: ST_TO_ADDR
// if not tmp then
1421: LD_VAR 0 5
1425: NOT
1426: IFFALSE 1430
// exit ;
1428: GO 1482
// for i in tmp do
1430: LD_ADDR_VAR 0 4
1434: PUSH
1435: LD_VAR 0 5
1439: PUSH
1440: FOR_IN
1441: IFFALSE 1466
// result := result union IsDrivenBy ( i ) ;
1443: LD_ADDR_VAR 0 3
1447: PUSH
1448: LD_VAR 0 3
1452: PUSH
1453: LD_VAR 0 4
1457: PPUSH
1458: CALL_OW 311
1462: UNION
1463: ST_TO_ADDR
1464: GO 1440
1466: POP
1467: POP
// result := result diff 0 ;
1468: LD_ADDR_VAR 0 3
1472: PUSH
1473: LD_VAR 0 3
1477: PUSH
1478: LD_INT 0
1480: DIFF
1481: ST_TO_ADDR
// end ;
1482: LD_VAR 0 3
1486: RET
// export function FilterBuildings ( side ) ; begin
1487: LD_INT 0
1489: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
1490: LD_ADDR_VAR 0 2
1494: PUSH
1495: LD_INT 22
1497: PUSH
1498: LD_VAR 0 1
1502: PUSH
1503: EMPTY
1504: LIST
1505: LIST
1506: PUSH
1507: LD_INT 21
1509: PUSH
1510: LD_INT 3
1512: PUSH
1513: EMPTY
1514: LIST
1515: LIST
1516: PUSH
1517: EMPTY
1518: LIST
1519: LIST
1520: PPUSH
1521: CALL_OW 69
1525: ST_TO_ADDR
// end ;
1526: LD_VAR 0 2
1530: RET
// export function CreateNature ; var i , animal , nat_area ; begin
1531: LD_INT 0
1533: PPUSH
1534: PPUSH
1535: PPUSH
1536: PPUSH
// uc_side = 0 ;
1537: LD_ADDR_OWVAR 20
1541: PUSH
1542: LD_INT 0
1544: ST_TO_ADDR
// uc_nation = 0 ;
1545: LD_ADDR_OWVAR 21
1549: PUSH
1550: LD_INT 0
1552: ST_TO_ADDR
// nat_area := wildArea ;
1553: LD_ADDR_VAR 0 4
1557: PUSH
1558: LD_INT 3
1560: ST_TO_ADDR
// InitHc ;
1561: CALL_OW 19
// for i = 1 to 4 do
1565: LD_ADDR_VAR 0 2
1569: PUSH
1570: DOUBLE
1571: LD_INT 1
1573: DEC
1574: ST_TO_ADDR
1575: LD_INT 4
1577: PUSH
1578: FOR_TO
1579: IFFALSE 1634
// begin hc_class = 18 ;
1581: LD_ADDR_OWVAR 28
1585: PUSH
1586: LD_INT 18
1588: ST_TO_ADDR
// hc_gallery =  ;
1589: LD_ADDR_OWVAR 33
1593: PUSH
1594: LD_STRING 
1596: ST_TO_ADDR
// hc_face_number = 1 ;
1597: LD_ADDR_OWVAR 34
1601: PUSH
1602: LD_INT 1
1604: ST_TO_ADDR
// animal := CreateHuman ;
1605: LD_ADDR_VAR 0 3
1609: PUSH
1610: CALL_OW 44
1614: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1615: LD_VAR 0 3
1619: PPUSH
1620: LD_VAR 0 4
1624: PPUSH
1625: LD_INT 0
1627: PPUSH
1628: CALL_OW 49
// end ;
1632: GO 1578
1634: POP
1635: POP
// for i = 1 to 6 do
1636: LD_ADDR_VAR 0 2
1640: PUSH
1641: DOUBLE
1642: LD_INT 1
1644: DEC
1645: ST_TO_ADDR
1646: LD_INT 6
1648: PUSH
1649: FOR_TO
1650: IFFALSE 1721
// begin hc_class = class_tiger ;
1652: LD_ADDR_OWVAR 28
1656: PUSH
1657: LD_INT 14
1659: ST_TO_ADDR
// hc_gallery =  ;
1660: LD_ADDR_OWVAR 33
1664: PUSH
1665: LD_STRING 
1667: ST_TO_ADDR
// hc_agressivity = Rand ( 0 , 10 ) ;
1668: LD_ADDR_OWVAR 35
1672: PUSH
1673: LD_INT 0
1675: PPUSH
1676: LD_INT 10
1678: PPUSH
1679: CALL_OW 12
1683: ST_TO_ADDR
// hc_face_number = 3 ;
1684: LD_ADDR_OWVAR 34
1688: PUSH
1689: LD_INT 3
1691: ST_TO_ADDR
// animal := CreateHuman ;
1692: LD_ADDR_VAR 0 3
1696: PUSH
1697: CALL_OW 44
1701: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1702: LD_VAR 0 3
1706: PPUSH
1707: LD_VAR 0 4
1711: PPUSH
1712: LD_INT 0
1714: PPUSH
1715: CALL_OW 49
// end ;
1719: GO 1649
1721: POP
1722: POP
// for i = 1 to 2 do
1723: LD_ADDR_VAR 0 2
1727: PUSH
1728: DOUBLE
1729: LD_INT 1
1731: DEC
1732: ST_TO_ADDR
1733: LD_INT 2
1735: PUSH
1736: FOR_TO
1737: IFFALSE 1800
// begin hc_class = 21 ;
1739: LD_ADDR_OWVAR 28
1743: PUSH
1744: LD_INT 21
1746: ST_TO_ADDR
// hc_gallery =  ;
1747: LD_ADDR_OWVAR 33
1751: PUSH
1752: LD_STRING 
1754: ST_TO_ADDR
// hc_agressivity = 0 ;
1755: LD_ADDR_OWVAR 35
1759: PUSH
1760: LD_INT 0
1762: ST_TO_ADDR
// hc_face_number = 5 ;
1763: LD_ADDR_OWVAR 34
1767: PUSH
1768: LD_INT 5
1770: ST_TO_ADDR
// animal := CreateHuman ;
1771: LD_ADDR_VAR 0 3
1775: PUSH
1776: CALL_OW 44
1780: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1781: LD_VAR 0 3
1785: PPUSH
1786: LD_VAR 0 4
1790: PPUSH
1791: LD_INT 0
1793: PPUSH
1794: CALL_OW 49
// end ;
1798: GO 1736
1800: POP
1801: POP
// for i = 1 to 6 do
1802: LD_ADDR_VAR 0 2
1806: PUSH
1807: DOUBLE
1808: LD_INT 1
1810: DEC
1811: ST_TO_ADDR
1812: LD_INT 6
1814: PUSH
1815: FOR_TO
1816: IFFALSE 1871
// begin hc_class = 13 ;
1818: LD_ADDR_OWVAR 28
1822: PUSH
1823: LD_INT 13
1825: ST_TO_ADDR
// hc_gallery =  ;
1826: LD_ADDR_OWVAR 33
1830: PUSH
1831: LD_STRING 
1833: ST_TO_ADDR
// hc_face_number = 4 ;
1834: LD_ADDR_OWVAR 34
1838: PUSH
1839: LD_INT 4
1841: ST_TO_ADDR
// animal := CreateHuman ;
1842: LD_ADDR_VAR 0 3
1846: PUSH
1847: CALL_OW 44
1851: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1852: LD_VAR 0 3
1856: PPUSH
1857: LD_VAR 0 4
1861: PPUSH
1862: LD_INT 0
1864: PPUSH
1865: CALL_OW 49
// end ;
1869: GO 1815
1871: POP
1872: POP
// for i = 1 to 2 do
1873: LD_ADDR_VAR 0 2
1877: PUSH
1878: DOUBLE
1879: LD_INT 1
1881: DEC
1882: ST_TO_ADDR
1883: LD_INT 2
1885: PUSH
1886: FOR_TO
1887: IFFALSE 1946
// begin hc_class = 20 ;
1889: LD_ADDR_OWVAR 28
1893: PUSH
1894: LD_INT 20
1896: ST_TO_ADDR
// hc_gallery =  ;
1897: LD_ADDR_OWVAR 33
1901: PUSH
1902: LD_STRING 
1904: ST_TO_ADDR
// hc_face_number = 2 ;
1905: LD_ADDR_OWVAR 34
1909: PUSH
1910: LD_INT 2
1912: ST_TO_ADDR
// animal := CreateHuman ;
1913: LD_ADDR_VAR 0 3
1917: PUSH
1918: CALL_OW 44
1922: ST_TO_ADDR
// PlaceUnitXYR ( animal , 101 , 37 , 3 , false ) ;
1923: LD_VAR 0 3
1927: PPUSH
1928: LD_INT 101
1930: PPUSH
1931: LD_INT 37
1933: PPUSH
1934: LD_INT 3
1936: PPUSH
1937: LD_INT 0
1939: PPUSH
1940: CALL_OW 50
// end ;
1944: GO 1886
1946: POP
1947: POP
// for i = 1 to 1 do
1948: LD_ADDR_VAR 0 2
1952: PUSH
1953: DOUBLE
1954: LD_INT 1
1956: DEC
1957: ST_TO_ADDR
1958: LD_INT 1
1960: PUSH
1961: FOR_TO
1962: IFFALSE 2009
// begin vc_chassis := 31 ;
1964: LD_ADDR_OWVAR 37
1968: PUSH
1969: LD_INT 31
1971: ST_TO_ADDR
// vc_control := control_rider ;
1972: LD_ADDR_OWVAR 38
1976: PUSH
1977: LD_INT 4
1979: ST_TO_ADDR
// animal := CreateVehicle ;
1980: LD_ADDR_VAR 0 3
1984: PUSH
1985: CALL_OW 45
1989: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1990: LD_VAR 0 3
1994: PPUSH
1995: LD_VAR 0 4
1999: PPUSH
2000: LD_INT 0
2002: PPUSH
2003: CALL_OW 49
// end ;
2007: GO 1961
2009: POP
2010: POP
// end ;
2011: LD_VAR 0 1
2015: RET
// export function NearbyTowerHasEnergy ( unit ) ; var i , tmp , energy ; begin
2016: LD_INT 0
2018: PPUSH
2019: PPUSH
2020: PPUSH
2021: PPUSH
// result := [ ] ;
2022: LD_ADDR_VAR 0 2
2026: PUSH
2027: EMPTY
2028: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_dist , unit , 15 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
2029: LD_ADDR_VAR 0 4
2033: PUSH
2034: LD_INT 81
2036: PUSH
2037: LD_VAR 0 1
2041: PPUSH
2042: CALL_OW 255
2046: PUSH
2047: EMPTY
2048: LIST
2049: LIST
2050: PUSH
2051: LD_INT 91
2053: PUSH
2054: LD_VAR 0 1
2058: PUSH
2059: LD_INT 15
2061: PUSH
2062: EMPTY
2063: LIST
2064: LIST
2065: LIST
2066: PUSH
2067: LD_INT 2
2069: PUSH
2070: LD_INT 30
2072: PUSH
2073: LD_INT 32
2075: PUSH
2076: EMPTY
2077: LIST
2078: LIST
2079: PUSH
2080: LD_INT 30
2082: PUSH
2083: LD_INT 33
2085: PUSH
2086: EMPTY
2087: LIST
2088: LIST
2089: PUSH
2090: EMPTY
2091: LIST
2092: LIST
2093: LIST
2094: PUSH
2095: EMPTY
2096: LIST
2097: LIST
2098: LIST
2099: PPUSH
2100: CALL_OW 69
2104: ST_TO_ADDR
// if not tmp then
2105: LD_VAR 0 4
2109: NOT
2110: IFFALSE 2114
// exit ;
2112: GO 2183
// for i in tmp do
2114: LD_ADDR_VAR 0 3
2118: PUSH
2119: LD_VAR 0 4
2123: PUSH
2124: FOR_IN
2125: IFFALSE 2181
// begin energy := GetEnergy ( GetBase ( i ) ) ;
2127: LD_ADDR_VAR 0 5
2131: PUSH
2132: LD_VAR 0 3
2136: PPUSH
2137: CALL_OW 274
2141: PPUSH
2142: CALL_OW 278
2146: ST_TO_ADDR
// if energy [ 4 ] > energy [ 1 ] then
2147: LD_VAR 0 5
2151: PUSH
2152: LD_INT 4
2154: ARRAY
2155: PUSH
2156: LD_VAR 0 5
2160: PUSH
2161: LD_INT 1
2163: ARRAY
2164: GREATER
2165: IFFALSE 2179
// begin result := i ;
2167: LD_ADDR_VAR 0 2
2171: PUSH
2172: LD_VAR 0 3
2176: ST_TO_ADDR
// break ;
2177: GO 2181
// end ; end ;
2179: GO 2124
2181: POP
2182: POP
// end ;
2183: LD_VAR 0 2
2187: RET
// export function GetTurretWeaponBase ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
2188: LD_INT 0
2190: PPUSH
2191: PPUSH
2192: PPUSH
2193: PPUSH
2194: PPUSH
2195: PPUSH
2196: PPUSH
2197: PPUSH
2198: PPUSH
2199: PPUSH
2200: PPUSH
2201: PPUSH
2202: PPUSH
2203: PPUSH
2204: PPUSH
2205: PPUSH
// result := false ;
2206: LD_ADDR_VAR 0 2
2210: PUSH
2211: LD_INT 0
2213: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
2214: LD_VAR 0 1
2218: NOT
2219: PUSH
2220: LD_VAR 0 1
2224: PPUSH
2225: CALL_OW 266
2229: PUSH
2230: LD_INT 32
2232: PUSH
2233: LD_INT 33
2235: PUSH
2236: EMPTY
2237: LIST
2238: LIST
2239: IN
2240: NOT
2241: OR
2242: IFFALSE 2246
// exit ;
2244: GO 3406
// nat := GetNation ( tower ) ;
2246: LD_ADDR_VAR 0 11
2250: PUSH
2251: LD_VAR 0 1
2255: PPUSH
2256: CALL_OW 248
2260: ST_TO_ADDR
// side := GetSide ( tower ) ;
2261: LD_ADDR_VAR 0 15
2265: PUSH
2266: LD_VAR 0 1
2270: PPUSH
2271: CALL_OW 255
2275: ST_TO_ADDR
// x := GetX ( tower ) ;
2276: LD_ADDR_VAR 0 9
2280: PUSH
2281: LD_VAR 0 1
2285: PPUSH
2286: CALL_OW 250
2290: ST_TO_ADDR
// y := GetY ( tower ) ;
2291: LD_ADDR_VAR 0 10
2295: PUSH
2296: LD_VAR 0 1
2300: PPUSH
2301: CALL_OW 251
2305: ST_TO_ADDR
// if not x or not y then
2306: LD_VAR 0 9
2310: NOT
2311: PUSH
2312: LD_VAR 0 10
2316: NOT
2317: OR
2318: IFFALSE 2322
// exit ;
2320: GO 3406
// weapon := 0 ;
2322: LD_ADDR_VAR 0 17
2326: PUSH
2327: LD_INT 0
2329: ST_TO_ADDR
// fac_list := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
2330: LD_ADDR_VAR 0 16
2334: PUSH
2335: LD_INT 42
2337: PUSH
2338: LD_INT 43
2340: PUSH
2341: LD_INT 44
2343: PUSH
2344: LD_INT 46
2346: PUSH
2347: EMPTY
2348: LIST
2349: LIST
2350: LIST
2351: LIST
2352: ST_TO_ADDR
// if not fac_list then
2353: LD_VAR 0 16
2357: NOT
2358: IFFALSE 2362
// exit ;
2360: GO 3406
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
2362: LD_ADDR_VAR 0 4
2366: PUSH
2367: LD_INT 4
2369: PUSH
2370: LD_INT 5
2372: PUSH
2373: LD_INT 9
2375: PUSH
2376: LD_INT 10
2378: PUSH
2379: LD_INT 6
2381: PUSH
2382: LD_INT 7
2384: PUSH
2385: LD_INT 11
2387: PUSH
2388: EMPTY
2389: LIST
2390: LIST
2391: LIST
2392: LIST
2393: LIST
2394: LIST
2395: LIST
2396: PUSH
2397: LD_INT 27
2399: PUSH
2400: LD_INT 28
2402: PUSH
2403: LD_INT 26
2405: PUSH
2406: LD_INT 30
2408: PUSH
2409: EMPTY
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: PUSH
2415: LD_INT 43
2417: PUSH
2418: LD_INT 44
2420: PUSH
2421: LD_INT 46
2423: PUSH
2424: LD_INT 45
2426: PUSH
2427: LD_INT 47
2429: PUSH
2430: LD_INT 49
2432: PUSH
2433: EMPTY
2434: LIST
2435: LIST
2436: LIST
2437: LIST
2438: LIST
2439: LIST
2440: PUSH
2441: EMPTY
2442: LIST
2443: LIST
2444: LIST
2445: PUSH
2446: LD_VAR 0 11
2450: ARRAY
2451: ST_TO_ADDR
// for i in list do
2452: LD_ADDR_VAR 0 7
2456: PUSH
2457: LD_VAR 0 4
2461: PUSH
2462: FOR_IN
2463: IFFALSE 2496
// if not i in fac_list then
2465: LD_VAR 0 7
2469: PUSH
2470: LD_VAR 0 16
2474: IN
2475: NOT
2476: IFFALSE 2494
// list := list diff i ;
2478: LD_ADDR_VAR 0 4
2482: PUSH
2483: LD_VAR 0 4
2487: PUSH
2488: LD_VAR 0 7
2492: DIFF
2493: ST_TO_ADDR
2494: GO 2462
2496: POP
2497: POP
// if not list then
2498: LD_VAR 0 4
2502: NOT
2503: IFFALSE 2507
// exit ;
2505: GO 3406
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
2507: LD_VAR 0 11
2511: PUSH
2512: LD_INT 3
2514: EQUAL
2515: PUSH
2516: LD_INT 49
2518: PUSH
2519: LD_VAR 0 4
2523: IN
2524: AND
2525: PUSH
2526: LD_INT 31
2528: PPUSH
2529: LD_VAR 0 15
2533: PPUSH
2534: CALL_OW 321
2538: PUSH
2539: LD_INT 2
2541: EQUAL
2542: AND
2543: IFFALSE 2603
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
2545: LD_INT 22
2547: PUSH
2548: LD_VAR 0 15
2552: PUSH
2553: EMPTY
2554: LIST
2555: LIST
2556: PUSH
2557: LD_INT 35
2559: PUSH
2560: LD_INT 49
2562: PUSH
2563: EMPTY
2564: LIST
2565: LIST
2566: PUSH
2567: LD_INT 91
2569: PUSH
2570: LD_VAR 0 1
2574: PUSH
2575: LD_INT 10
2577: PUSH
2578: EMPTY
2579: LIST
2580: LIST
2581: LIST
2582: PUSH
2583: EMPTY
2584: LIST
2585: LIST
2586: LIST
2587: PPUSH
2588: CALL_OW 69
2592: NOT
2593: IFFALSE 2603
// weapon := ru_time_lapser ;
2595: LD_ADDR_VAR 0 17
2599: PUSH
2600: LD_INT 49
2602: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
2603: LD_VAR 0 11
2607: PUSH
2608: LD_INT 1
2610: PUSH
2611: LD_INT 2
2613: PUSH
2614: EMPTY
2615: LIST
2616: LIST
2617: IN
2618: PUSH
2619: LD_INT 11
2621: PUSH
2622: LD_VAR 0 4
2626: IN
2627: PUSH
2628: LD_INT 30
2630: PUSH
2631: LD_VAR 0 4
2635: IN
2636: OR
2637: AND
2638: PUSH
2639: LD_INT 6
2641: PPUSH
2642: LD_VAR 0 15
2646: PPUSH
2647: CALL_OW 321
2651: PUSH
2652: LD_INT 2
2654: EQUAL
2655: AND
2656: IFFALSE 2821
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
2658: LD_INT 22
2660: PUSH
2661: LD_VAR 0 15
2665: PUSH
2666: EMPTY
2667: LIST
2668: LIST
2669: PUSH
2670: LD_INT 2
2672: PUSH
2673: LD_INT 35
2675: PUSH
2676: LD_INT 11
2678: PUSH
2679: EMPTY
2680: LIST
2681: LIST
2682: PUSH
2683: LD_INT 35
2685: PUSH
2686: LD_INT 30
2688: PUSH
2689: EMPTY
2690: LIST
2691: LIST
2692: PUSH
2693: EMPTY
2694: LIST
2695: LIST
2696: LIST
2697: PUSH
2698: LD_INT 91
2700: PUSH
2701: LD_VAR 0 1
2705: PUSH
2706: LD_INT 18
2708: PUSH
2709: EMPTY
2710: LIST
2711: LIST
2712: LIST
2713: PUSH
2714: EMPTY
2715: LIST
2716: LIST
2717: LIST
2718: PPUSH
2719: CALL_OW 69
2723: NOT
2724: PUSH
2725: LD_INT 22
2727: PUSH
2728: LD_VAR 0 15
2732: PUSH
2733: EMPTY
2734: LIST
2735: LIST
2736: PUSH
2737: LD_INT 2
2739: PUSH
2740: LD_INT 30
2742: PUSH
2743: LD_INT 32
2745: PUSH
2746: EMPTY
2747: LIST
2748: LIST
2749: PUSH
2750: LD_INT 30
2752: PUSH
2753: LD_INT 33
2755: PUSH
2756: EMPTY
2757: LIST
2758: LIST
2759: PUSH
2760: EMPTY
2761: LIST
2762: LIST
2763: LIST
2764: PUSH
2765: LD_INT 91
2767: PUSH
2768: LD_VAR 0 1
2772: PUSH
2773: LD_INT 12
2775: PUSH
2776: EMPTY
2777: LIST
2778: LIST
2779: LIST
2780: PUSH
2781: EMPTY
2782: LIST
2783: LIST
2784: LIST
2785: PUSH
2786: EMPTY
2787: LIST
2788: PPUSH
2789: CALL_OW 69
2793: PUSH
2794: LD_INT 2
2796: GREATER
2797: AND
2798: IFFALSE 2821
// weapon := [ us_radar , ar_radar ] [ nat ] ;
2800: LD_ADDR_VAR 0 17
2804: PUSH
2805: LD_INT 11
2807: PUSH
2808: LD_INT 30
2810: PUSH
2811: EMPTY
2812: LIST
2813: LIST
2814: PUSH
2815: LD_VAR 0 11
2819: ARRAY
2820: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
2821: LD_VAR 0 17
2825: NOT
2826: PUSH
2827: LD_INT 40
2829: PPUSH
2830: LD_VAR 0 15
2834: PPUSH
2835: CALL_OW 321
2839: PUSH
2840: LD_INT 2
2842: EQUAL
2843: AND
2844: PUSH
2845: LD_INT 7
2847: PUSH
2848: LD_VAR 0 4
2852: IN
2853: PUSH
2854: LD_INT 28
2856: PUSH
2857: LD_VAR 0 4
2861: IN
2862: OR
2863: PUSH
2864: LD_INT 45
2866: PUSH
2867: LD_VAR 0 4
2871: IN
2872: OR
2873: AND
2874: IFFALSE 3128
// begin hex := GetHexInfo ( x , y ) ;
2876: LD_ADDR_VAR 0 3
2880: PUSH
2881: LD_VAR 0 9
2885: PPUSH
2886: LD_VAR 0 10
2890: PPUSH
2891: CALL_OW 546
2895: ST_TO_ADDR
// if hex [ 1 ] then
2896: LD_VAR 0 3
2900: PUSH
2901: LD_INT 1
2903: ARRAY
2904: IFFALSE 2908
// exit ;
2906: GO 3406
// height := hex [ 2 ] ;
2908: LD_ADDR_VAR 0 14
2912: PUSH
2913: LD_VAR 0 3
2917: PUSH
2918: LD_INT 2
2920: ARRAY
2921: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
2922: LD_ADDR_VAR 0 13
2926: PUSH
2927: LD_INT 0
2929: PUSH
2930: LD_INT 2
2932: PUSH
2933: LD_INT 3
2935: PUSH
2936: LD_INT 5
2938: PUSH
2939: EMPTY
2940: LIST
2941: LIST
2942: LIST
2943: LIST
2944: ST_TO_ADDR
// for i in tmp do
2945: LD_ADDR_VAR 0 7
2949: PUSH
2950: LD_VAR 0 13
2954: PUSH
2955: FOR_IN
2956: IFFALSE 3126
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
2958: LD_ADDR_VAR 0 8
2962: PUSH
2963: LD_VAR 0 9
2967: PPUSH
2968: LD_VAR 0 7
2972: PPUSH
2973: LD_INT 5
2975: PPUSH
2976: CALL_OW 272
2980: PUSH
2981: LD_VAR 0 10
2985: PPUSH
2986: LD_VAR 0 7
2990: PPUSH
2991: LD_INT 5
2993: PPUSH
2994: CALL_OW 273
2998: PUSH
2999: EMPTY
3000: LIST
3001: LIST
3002: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
3003: LD_VAR 0 8
3007: PUSH
3008: LD_INT 1
3010: ARRAY
3011: PPUSH
3012: LD_VAR 0 8
3016: PUSH
3017: LD_INT 2
3019: ARRAY
3020: PPUSH
3021: CALL_OW 488
3025: IFFALSE 3124
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
3027: LD_ADDR_VAR 0 3
3031: PUSH
3032: LD_VAR 0 8
3036: PUSH
3037: LD_INT 1
3039: ARRAY
3040: PPUSH
3041: LD_VAR 0 8
3045: PUSH
3046: LD_INT 2
3048: ARRAY
3049: PPUSH
3050: CALL_OW 546
3054: ST_TO_ADDR
// if hex [ 1 ] then
3055: LD_VAR 0 3
3059: PUSH
3060: LD_INT 1
3062: ARRAY
3063: IFFALSE 3067
// continue ;
3065: GO 2955
// h := hex [ 2 ] ;
3067: LD_ADDR_VAR 0 12
3071: PUSH
3072: LD_VAR 0 3
3076: PUSH
3077: LD_INT 2
3079: ARRAY
3080: ST_TO_ADDR
// if h + 7 < height then
3081: LD_VAR 0 12
3085: PUSH
3086: LD_INT 7
3088: PLUS
3089: PUSH
3090: LD_VAR 0 14
3094: LESS
3095: IFFALSE 3124
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
3097: LD_ADDR_VAR 0 17
3101: PUSH
3102: LD_INT 7
3104: PUSH
3105: LD_INT 28
3107: PUSH
3108: LD_INT 45
3110: PUSH
3111: EMPTY
3112: LIST
3113: LIST
3114: LIST
3115: PUSH
3116: LD_VAR 0 11
3120: ARRAY
3121: ST_TO_ADDR
// break ;
3122: GO 3126
// end ; end ; end ;
3124: GO 2955
3126: POP
3127: POP
// end ; if not weapon then
3128: LD_VAR 0 17
3132: NOT
3133: IFFALSE 3288
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
3135: LD_ADDR_VAR 0 4
3139: PUSH
3140: LD_VAR 0 4
3144: PUSH
3145: LD_INT 11
3147: PUSH
3148: LD_INT 30
3150: PUSH
3151: LD_INT 49
3153: PUSH
3154: EMPTY
3155: LIST
3156: LIST
3157: LIST
3158: DIFF
3159: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , tower , 6 ] , [ f_not , [ f_bweapon , 0 ] ] ] ) ;
3160: LD_ADDR_VAR 0 13
3164: PUSH
3165: LD_INT 22
3167: PUSH
3168: LD_VAR 0 15
3172: PUSH
3173: EMPTY
3174: LIST
3175: LIST
3176: PUSH
3177: LD_INT 91
3179: PUSH
3180: LD_VAR 0 1
3184: PUSH
3185: LD_INT 6
3187: PUSH
3188: EMPTY
3189: LIST
3190: LIST
3191: LIST
3192: PUSH
3193: LD_INT 3
3195: PUSH
3196: LD_INT 35
3198: PUSH
3199: LD_INT 0
3201: PUSH
3202: EMPTY
3203: LIST
3204: LIST
3205: PUSH
3206: EMPTY
3207: LIST
3208: LIST
3209: PUSH
3210: EMPTY
3211: LIST
3212: LIST
3213: LIST
3214: PPUSH
3215: CALL_OW 69
3219: ST_TO_ADDR
// for i in tmp do
3220: LD_ADDR_VAR 0 7
3224: PUSH
3225: LD_VAR 0 13
3229: PUSH
3230: FOR_IN
3231: IFFALSE 3256
// list := list diff GetBWeapon ( i ) ;
3233: LD_ADDR_VAR 0 4
3237: PUSH
3238: LD_VAR 0 4
3242: PUSH
3243: LD_VAR 0 7
3247: PPUSH
3248: CALL_OW 269
3252: DIFF
3253: ST_TO_ADDR
3254: GO 3230
3256: POP
3257: POP
// if list then
3258: LD_VAR 0 4
3262: IFFALSE 3288
// weapon := list [ rand ( 1 , list ) ] ;
3264: LD_ADDR_VAR 0 17
3268: PUSH
3269: LD_VAR 0 4
3273: PUSH
3274: LD_INT 1
3276: PPUSH
3277: LD_VAR 0 4
3281: PPUSH
3282: CALL_OW 12
3286: ARRAY
3287: ST_TO_ADDR
// end ; if weapon then
3288: LD_VAR 0 17
3292: IFFALSE 3406
// begin tmp := CostOfWeapon ( weapon ) ;
3294: LD_ADDR_VAR 0 13
3298: PUSH
3299: LD_VAR 0 17
3303: PPUSH
3304: CALL_OW 451
3308: ST_TO_ADDR
// j := GetBase ( tower ) ;
3309: LD_ADDR_VAR 0 8
3313: PUSH
3314: LD_VAR 0 1
3318: PPUSH
3319: CALL_OW 274
3323: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
3324: LD_VAR 0 8
3328: PPUSH
3329: LD_INT 1
3331: PPUSH
3332: CALL_OW 275
3336: PUSH
3337: LD_VAR 0 13
3341: PUSH
3342: LD_INT 1
3344: ARRAY
3345: GREATEREQUAL
3346: PUSH
3347: LD_VAR 0 8
3351: PPUSH
3352: LD_INT 2
3354: PPUSH
3355: CALL_OW 275
3359: PUSH
3360: LD_VAR 0 13
3364: PUSH
3365: LD_INT 2
3367: ARRAY
3368: GREATEREQUAL
3369: AND
3370: PUSH
3371: LD_VAR 0 8
3375: PPUSH
3376: LD_INT 3
3378: PPUSH
3379: CALL_OW 275
3383: PUSH
3384: LD_VAR 0 13
3388: PUSH
3389: LD_INT 3
3391: ARRAY
3392: GREATEREQUAL
3393: AND
3394: IFFALSE 3406
// result := weapon ;
3396: LD_ADDR_VAR 0 2
3400: PUSH
3401: LD_VAR 0 17
3405: ST_TO_ADDR
// end ; end ; end_of_file
3406: LD_VAR 0 2
3410: RET
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Khatam , Kikuchi , Harisson ; export function PrepareAmericans ; var i , team , others , veh , m ; begin
3411: LD_INT 0
3413: PPUSH
3414: PPUSH
3415: PPUSH
3416: PPUSH
3417: PPUSH
3418: PPUSH
// uc_side := 1 ;
3419: LD_ADDR_OWVAR 20
3423: PUSH
3424: LD_INT 1
3426: ST_TO_ADDR
// uc_nation := 1 ;
3427: LD_ADDR_OWVAR 21
3431: PUSH
3432: LD_INT 1
3434: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prev_prefix ) ;
3435: LD_ADDR_EXP 9
3439: PUSH
3440: LD_STRING JMM
3442: PPUSH
3443: LD_EXP 1
3447: NOT
3448: PPUSH
3449: LD_EXP 2
3453: PPUSH
3454: CALL 27037 0 3
3458: ST_TO_ADDR
// team := [ JMM ] ;
3459: LD_ADDR_VAR 0 3
3463: PUSH
3464: LD_EXP 9
3468: PUSH
3469: EMPTY
3470: LIST
3471: ST_TO_ADDR
// if LoadVariable ( BrownIn07 , debug ) then
3472: LD_STRING BrownIn07
3474: PPUSH
3475: LD_EXP 1
3479: PPUSH
3480: CALL_OW 30
3484: IFFALSE 3510
// Brown := PrepareUnit ( Brown , ( not debug ) , mission_prev_prefix ) ;
3486: LD_ADDR_EXP 10
3490: PUSH
3491: LD_STRING Brown
3493: PPUSH
3494: LD_EXP 1
3498: NOT
3499: PPUSH
3500: LD_EXP 2
3504: PPUSH
3505: CALL 27037 0 3
3509: ST_TO_ADDR
// if Brown then
3510: LD_EXP 10
3514: IFFALSE 3532
// team := team ^ Brown ;
3516: LD_ADDR_VAR 0 3
3520: PUSH
3521: LD_VAR 0 3
3525: PUSH
3526: LD_EXP 10
3530: ADD
3531: ST_TO_ADDR
// if LoadVariable ( DonaldsonIn07 , debug ) then
3532: LD_STRING DonaldsonIn07
3534: PPUSH
3535: LD_EXP 1
3539: PPUSH
3540: CALL_OW 30
3544: IFFALSE 3570
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prev_prefix ) ;
3546: LD_ADDR_EXP 11
3550: PUSH
3551: LD_STRING Donaldson
3553: PPUSH
3554: LD_EXP 1
3558: NOT
3559: PPUSH
3560: LD_EXP 2
3564: PPUSH
3565: CALL 27037 0 3
3569: ST_TO_ADDR
// if Donaldson then
3570: LD_EXP 11
3574: IFFALSE 3592
// team := team ^ Donaldson ;
3576: LD_ADDR_VAR 0 3
3580: PUSH
3581: LD_VAR 0 3
3585: PUSH
3586: LD_EXP 11
3590: ADD
3591: ST_TO_ADDR
// if LoadVariable ( BobbyIn07 , debug ) then
3592: LD_STRING BobbyIn07
3594: PPUSH
3595: LD_EXP 1
3599: PPUSH
3600: CALL_OW 30
3604: IFFALSE 3630
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prev_prefix ) ;
3606: LD_ADDR_EXP 12
3610: PUSH
3611: LD_STRING Bobby
3613: PPUSH
3614: LD_EXP 1
3618: NOT
3619: PPUSH
3620: LD_EXP 2
3624: PPUSH
3625: CALL 27037 0 3
3629: ST_TO_ADDR
// if Bobby then
3630: LD_EXP 12
3634: IFFALSE 3652
// team := team ^ Bobby ;
3636: LD_ADDR_VAR 0 3
3640: PUSH
3641: LD_VAR 0 3
3645: PUSH
3646: LD_EXP 12
3650: ADD
3651: ST_TO_ADDR
// if LoadVariable ( CyrusIn07 , debug ) then
3652: LD_STRING CyrusIn07
3654: PPUSH
3655: LD_EXP 1
3659: PPUSH
3660: CALL_OW 30
3664: IFFALSE 3690
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prev_prefix ) ;
3666: LD_ADDR_EXP 13
3670: PUSH
3671: LD_STRING Cyrus
3673: PPUSH
3674: LD_EXP 1
3678: NOT
3679: PPUSH
3680: LD_EXP 2
3684: PPUSH
3685: CALL 27037 0 3
3689: ST_TO_ADDR
// if Cyrus then
3690: LD_EXP 13
3694: IFFALSE 3712
// team := team ^ Cyrus ;
3696: LD_ADDR_VAR 0 3
3700: PUSH
3701: LD_VAR 0 3
3705: PUSH
3706: LD_EXP 13
3710: ADD
3711: ST_TO_ADDR
// if LoadVariable ( LisaIn07 , debug ) then
3712: LD_STRING LisaIn07
3714: PPUSH
3715: LD_EXP 1
3719: PPUSH
3720: CALL_OW 30
3724: IFFALSE 3750
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prev_prefix ) ;
3726: LD_ADDR_EXP 14
3730: PUSH
3731: LD_STRING Lisa
3733: PPUSH
3734: LD_EXP 1
3738: NOT
3739: PPUSH
3740: LD_EXP 2
3744: PPUSH
3745: CALL 27037 0 3
3749: ST_TO_ADDR
// if Lisa then
3750: LD_EXP 14
3754: IFFALSE 3772
// team := team ^ Lisa ;
3756: LD_ADDR_VAR 0 3
3760: PUSH
3761: LD_VAR 0 3
3765: PUSH
3766: LD_EXP 14
3770: ADD
3771: ST_TO_ADDR
// if LoadVariable ( GladstoneIn07 , debug ) then
3772: LD_STRING GladstoneIn07
3774: PPUSH
3775: LD_EXP 1
3779: PPUSH
3780: CALL_OW 30
3784: IFFALSE 3810
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , mission_prev_prefix ) ;
3786: LD_ADDR_EXP 16
3790: PUSH
3791: LD_STRING Gladstone
3793: PPUSH
3794: LD_EXP 1
3798: NOT
3799: PPUSH
3800: LD_EXP 2
3804: PPUSH
3805: CALL 27037 0 3
3809: ST_TO_ADDR
// if Gladstone then
3810: LD_EXP 16
3814: IFFALSE 3832
// team := team ^ Gladstone ;
3816: LD_ADDR_VAR 0 3
3820: PUSH
3821: LD_VAR 0 3
3825: PUSH
3826: LD_EXP 16
3830: ADD
3831: ST_TO_ADDR
// if LoadVariable ( KhatamIn07 , debug ) then
3832: LD_STRING KhatamIn07
3834: PPUSH
3835: LD_EXP 1
3839: PPUSH
3840: CALL_OW 30
3844: IFFALSE 3870
// Khatam := PrepareUnit ( Khatam , ( not debug ) , mission_prev_prefix ) ;
3846: LD_ADDR_EXP 17
3850: PUSH
3851: LD_STRING Khatam
3853: PPUSH
3854: LD_EXP 1
3858: NOT
3859: PPUSH
3860: LD_EXP 2
3864: PPUSH
3865: CALL 27037 0 3
3869: ST_TO_ADDR
// if Khatam then
3870: LD_EXP 17
3874: IFFALSE 3892
// team := team ^ Khatam ;
3876: LD_ADDR_VAR 0 3
3880: PUSH
3881: LD_VAR 0 3
3885: PUSH
3886: LD_EXP 17
3890: ADD
3891: ST_TO_ADDR
// others := CreateCharacterSet ( 07_others ) ;
3892: LD_ADDR_VAR 0 4
3896: PUSH
3897: LD_STRING 07_others
3899: PPUSH
3900: CALL_OW 31
3904: ST_TO_ADDR
// if others then
3905: LD_VAR 0 4
3909: IFFALSE 3927
// team := team ^ others ;
3911: LD_ADDR_VAR 0 3
3915: PUSH
3916: LD_VAR 0 3
3920: PUSH
3921: LD_VAR 0 4
3925: ADD
3926: ST_TO_ADDR
// if debug then
3927: LD_EXP 1
3931: IFFALSE 4005
// begin InitHc ;
3933: CALL_OW 19
// for i = 1 to 4 do
3937: LD_ADDR_VAR 0 2
3941: PUSH
3942: DOUBLE
3943: LD_INT 1
3945: DEC
3946: ST_TO_ADDR
3947: LD_INT 4
3949: PUSH
3950: FOR_TO
3951: IFFALSE 4003
// begin PrepareHuman ( false , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , 4 ) ;
3953: LD_INT 0
3955: PPUSH
3956: LD_INT 1
3958: PUSH
3959: LD_INT 3
3961: PUSH
3962: EMPTY
3963: LIST
3964: LIST
3965: PUSH
3966: LD_INT 1
3968: PPUSH
3969: LD_INT 2
3971: PPUSH
3972: CALL_OW 12
3976: ARRAY
3977: PPUSH
3978: LD_INT 4
3980: PPUSH
3981: CALL_OW 380
// team := team ^ CreateHuman ;
3985: LD_ADDR_VAR 0 3
3989: PUSH
3990: LD_VAR 0 3
3994: PUSH
3995: CALL_OW 44
3999: ADD
4000: ST_TO_ADDR
// end ;
4001: GO 3950
4003: POP
4004: POP
// end ; m := 0 ;
4005: LD_ADDR_VAR 0 6
4009: PUSH
4010: LD_INT 0
4012: ST_TO_ADDR
// for i in team do
4013: LD_ADDR_VAR 0 2
4017: PUSH
4018: LD_VAR 0 3
4022: PUSH
4023: FOR_IN
4024: IFFALSE 4231
// if GetClass ( i ) = 3 then
4026: LD_VAR 0 2
4030: PPUSH
4031: CALL_OW 257
4035: PUSH
4036: LD_INT 3
4038: EQUAL
4039: IFFALSE 4187
// begin m := m + 1 ;
4041: LD_ADDR_VAR 0 6
4045: PUSH
4046: LD_VAR 0 6
4050: PUSH
4051: LD_INT 1
4053: PLUS
4054: ST_TO_ADDR
// veh := PrepareTank ( 1 , 1 , [ us_medium_wheeled , us_medium_tracked , us_medium_wheeled , us_light_wheeled ] [ m mod 4 + 1 ] , engine_solar , control_manual , [ us_gatling_gun , us_double_gun , us_light_gun , us_radar ] [ m mod 4 + 1 ] , 60 ) ;
4055: LD_ADDR_VAR 0 5
4059: PUSH
4060: LD_INT 1
4062: PPUSH
4063: LD_INT 1
4065: PPUSH
4066: LD_INT 2
4068: PUSH
4069: LD_INT 3
4071: PUSH
4072: LD_INT 2
4074: PUSH
4075: LD_INT 1
4077: PUSH
4078: EMPTY
4079: LIST
4080: LIST
4081: LIST
4082: LIST
4083: PUSH
4084: LD_VAR 0 6
4088: PUSH
4089: LD_INT 4
4091: MOD
4092: PUSH
4093: LD_INT 1
4095: PLUS
4096: ARRAY
4097: PPUSH
4098: LD_INT 2
4100: PPUSH
4101: LD_INT 1
4103: PPUSH
4104: LD_INT 4
4106: PUSH
4107: LD_INT 5
4109: PUSH
4110: LD_INT 3
4112: PUSH
4113: LD_INT 11
4115: PUSH
4116: EMPTY
4117: LIST
4118: LIST
4119: LIST
4120: LIST
4121: PUSH
4122: LD_VAR 0 6
4126: PUSH
4127: LD_INT 4
4129: MOD
4130: PUSH
4131: LD_INT 1
4133: PLUS
4134: ARRAY
4135: PPUSH
4136: LD_INT 60
4138: PPUSH
4139: CALL 500 0 7
4143: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
4144: LD_VAR 0 5
4148: PPUSH
4149: LD_INT 2
4151: PPUSH
4152: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
4156: LD_VAR 0 5
4160: PPUSH
4161: LD_INT 1
4163: PPUSH
4164: LD_INT 0
4166: PPUSH
4167: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
4171: LD_VAR 0 2
4175: PPUSH
4176: LD_VAR 0 5
4180: PPUSH
4181: CALL_OW 52
// end else
4185: GO 4229
// begin if GetClass ( i ) = 2 then
4187: LD_VAR 0 2
4191: PPUSH
4192: CALL_OW 257
4196: PUSH
4197: LD_INT 2
4199: EQUAL
4200: IFFALSE 4214
// SetClass ( i , 1 ) ;
4202: LD_VAR 0 2
4206: PPUSH
4207: LD_INT 1
4209: PPUSH
4210: CALL_OW 336
// PlaceUnitArea ( i , startArea , false ) ;
4214: LD_VAR 0 2
4218: PPUSH
4219: LD_INT 1
4221: PPUSH
4222: LD_INT 0
4224: PPUSH
4225: CALL_OW 49
// end ;
4229: GO 4023
4231: POP
4232: POP
// uc_side := 4 ;
4233: LD_ADDR_OWVAR 20
4237: PUSH
4238: LD_INT 4
4240: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
4241: LD_ADDR_EXP 19
4245: PUSH
4246: LD_STRING Harisson
4248: PPUSH
4249: LD_INT 0
4251: PPUSH
4252: LD_STRING 
4254: PPUSH
4255: CALL 27037 0 3
4259: ST_TO_ADDR
// PrepareScout ;
4260: CALL 4269 0 0
// end ;
4264: LD_VAR 0 1
4268: RET
// function PrepareScout ; var ape ; begin
4269: LD_INT 0
4271: PPUSH
4272: PPUSH
// uc_side := 4 ;
4273: LD_ADDR_OWVAR 20
4277: PUSH
4278: LD_INT 4
4280: ST_TO_ADDR
// uc_nation := 1 ;
4281: LD_ADDR_OWVAR 21
4285: PUSH
4286: LD_INT 1
4288: ST_TO_ADDR
// if LoadVariable ( FrankIn06 , 0 ) then
4289: LD_STRING FrankIn06
4291: PPUSH
4292: LD_INT 0
4294: PPUSH
4295: CALL_OW 30
4299: IFFALSE 4316
// Frank := CreateCharacter ( 06c_Frank ) else
4301: LD_ADDR_EXP 15
4305: PUSH
4306: LD_STRING 06c_Frank
4308: PPUSH
4309: CALL_OW 34
4313: ST_TO_ADDR
4314: GO 4356
// if LoadVariable ( FrankInDelta , 0 ) then
4316: LD_STRING FrankInDelta
4318: PPUSH
4319: LD_INT 0
4321: PPUSH
4322: CALL_OW 30
4326: IFFALSE 4343
// Frank := CreateCharacter ( 05_Frank ) else
4328: LD_ADDR_EXP 15
4332: PUSH
4333: LD_STRING 05_Frank
4335: PPUSH
4336: CALL_OW 34
4340: ST_TO_ADDR
4341: GO 4356
// Frank := CreateCharacter ( 04_Frank ) ;
4343: LD_ADDR_EXP 15
4347: PUSH
4348: LD_STRING 04_Frank
4350: PPUSH
4351: CALL_OW 34
4355: ST_TO_ADDR
// if Frank then
4356: LD_EXP 15
4360: IFFALSE 4493
// begin PlaceUnitArea ( Frank , scoutArea , false ) ;
4362: LD_EXP 15
4366: PPUSH
4367: LD_INT 2
4369: PPUSH
4370: LD_INT 0
4372: PPUSH
4373: CALL_OW 49
// SetClass ( Frank , 1 ) ;
4377: LD_EXP 15
4381: PPUSH
4382: LD_INT 1
4384: PPUSH
4385: CALL_OW 336
// uc_side := 0 ;
4389: LD_ADDR_OWVAR 20
4393: PUSH
4394: LD_INT 0
4396: ST_TO_ADDR
// uc_nation := 0 ;
4397: LD_ADDR_OWVAR 21
4401: PUSH
4402: LD_INT 0
4404: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 0 ) ;
4405: LD_INT 0
4407: PPUSH
4408: LD_INT 12
4410: PPUSH
4411: LD_INT 0
4413: PPUSH
4414: CALL_OW 380
// ape := CreateHuman ;
4418: LD_ADDR_VAR 0 2
4422: PUSH
4423: CALL_OW 44
4427: ST_TO_ADDR
// PlaceUnitXYR ( ape , GetX ( Frank ) , GetY ( Frank ) , 5 , false ) ;
4428: LD_VAR 0 2
4432: PPUSH
4433: LD_EXP 15
4437: PPUSH
4438: CALL_OW 250
4442: PPUSH
4443: LD_EXP 15
4447: PPUSH
4448: CALL_OW 251
4452: PPUSH
4453: LD_INT 5
4455: PPUSH
4456: LD_INT 0
4458: PPUSH
4459: CALL_OW 50
// ComTurnUnit ( ape , Frank ) ;
4463: LD_VAR 0 2
4467: PPUSH
4468: LD_EXP 15
4472: PPUSH
4473: CALL_OW 119
// ComTurnUnit ( Frank , ape ) ;
4477: LD_EXP 15
4481: PPUSH
4482: LD_VAR 0 2
4486: PPUSH
4487: CALL_OW 119
// exit ;
4491: GO 4536
// end ; Kikuchi := PrepareUnit ( Yamoko , false ,  ) ;
4493: LD_ADDR_EXP 18
4497: PUSH
4498: LD_STRING Yamoko
4500: PPUSH
4501: LD_INT 0
4503: PPUSH
4504: LD_STRING 
4506: PPUSH
4507: CALL 27037 0 3
4511: ST_TO_ADDR
// PlaceUnitArea ( Kikuchi , scoutArea , false ) ;
4512: LD_EXP 18
4516: PPUSH
4517: LD_INT 2
4519: PPUSH
4520: LD_INT 0
4522: PPUSH
4523: CALL_OW 49
// ComHold ( Kikuchi ) ;
4527: LD_EXP 18
4531: PPUSH
4532: CALL_OW 140
// end ; end_of_file
4536: LD_VAR 0 1
4540: RET
// export ru_rebuild_list ; export function PrepareRussians ; var i , j , r , un , skill , filter , tmp , dep_list , lab_list , fac_list , breastworks_list , bunker_list , turret_list , weapons_list , personel_counter ; begin
4541: LD_INT 0
4543: PPUSH
4544: PPUSH
4545: PPUSH
4546: PPUSH
4547: PPUSH
4548: PPUSH
4549: PPUSH
4550: PPUSH
4551: PPUSH
4552: PPUSH
4553: PPUSH
4554: PPUSH
4555: PPUSH
4556: PPUSH
4557: PPUSH
4558: PPUSH
// ru_rebuild_list := [ ] ;
4559: LD_ADDR_EXP 20
4563: PUSH
4564: EMPTY
4565: ST_TO_ADDR
// uc_side := 3 ;
4566: LD_ADDR_OWVAR 20
4570: PUSH
4571: LD_INT 3
4573: ST_TO_ADDR
// uc_nation := 3 ;
4574: LD_ADDR_OWVAR 21
4578: PUSH
4579: LD_INT 3
4581: ST_TO_ADDR
// if Difficulty > 1 then
4582: LD_OWVAR 67
4586: PUSH
4587: LD_INT 1
4589: GREATER
4590: IFFALSE 4726
// begin bc_type := b_breastwork ;
4592: LD_ADDR_OWVAR 42
4596: PUSH
4597: LD_INT 31
4599: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 78 , 74 , 2 ) ;
4600: LD_INT 78
4602: PPUSH
4603: LD_INT 74
4605: PPUSH
4606: LD_INT 2
4608: PPUSH
4609: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 171 , 193 , 4 ) ;
4613: LD_INT 171
4615: PPUSH
4616: LD_INT 193
4618: PPUSH
4619: LD_INT 4
4621: PPUSH
4622: CALL_OW 47
// bc_type := b_turret ;
4626: LD_ADDR_OWVAR 42
4630: PUSH
4631: LD_INT 33
4633: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 129 , 96 , 3 ) ;
4634: LD_INT 129
4636: PPUSH
4637: LD_INT 96
4639: PPUSH
4640: LD_INT 3
4642: PPUSH
4643: CALL_OW 47
// if Difficulty > 2 then
4647: LD_OWVAR 67
4651: PUSH
4652: LD_INT 2
4654: GREATER
4655: IFFALSE 4726
// begin RemoveUnit ( HexInfo ( 83 , 141 ) ) ;
4657: LD_INT 83
4659: PPUSH
4660: LD_INT 141
4662: PPUSH
4663: CALL_OW 428
4667: PPUSH
4668: CALL_OW 64
// RemoveUnit ( HexInfo ( 78 , 133 ) ) ;
4672: LD_INT 78
4674: PPUSH
4675: LD_INT 133
4677: PPUSH
4678: CALL_OW 428
4682: PPUSH
4683: CALL_OW 64
// CreateAndPlaceBuildingXYD ( 83 , 141 , 2 ) ;
4687: LD_INT 83
4689: PPUSH
4690: LD_INT 141
4692: PPUSH
4693: LD_INT 2
4695: PPUSH
4696: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 78 , 133 , 2 ) ;
4700: LD_INT 78
4702: PPUSH
4703: LD_INT 133
4705: PPUSH
4706: LD_INT 2
4708: PPUSH
4709: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 145 , 112 , 3 ) ;
4713: LD_INT 145
4715: PPUSH
4716: LD_INT 112
4718: PPUSH
4719: LD_INT 3
4721: PPUSH
4722: CALL_OW 47
// end ; end ; dep_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
4726: LD_ADDR_VAR 0 9
4730: PUSH
4731: LD_INT 22
4733: PUSH
4734: LD_INT 3
4736: PUSH
4737: EMPTY
4738: LIST
4739: LIST
4740: PUSH
4741: LD_INT 2
4743: PUSH
4744: LD_INT 30
4746: PUSH
4747: LD_INT 0
4749: PUSH
4750: EMPTY
4751: LIST
4752: LIST
4753: PUSH
4754: LD_INT 30
4756: PUSH
4757: LD_INT 1
4759: PUSH
4760: EMPTY
4761: LIST
4762: LIST
4763: PUSH
4764: EMPTY
4765: LIST
4766: LIST
4767: LIST
4768: PUSH
4769: EMPTY
4770: LIST
4771: LIST
4772: PPUSH
4773: CALL_OW 69
4777: ST_TO_ADDR
// lab_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
4778: LD_ADDR_VAR 0 10
4782: PUSH
4783: LD_INT 22
4785: PUSH
4786: LD_INT 3
4788: PUSH
4789: EMPTY
4790: LIST
4791: LIST
4792: PUSH
4793: LD_INT 2
4795: PUSH
4796: LD_INT 30
4798: PUSH
4799: LD_INT 6
4801: PUSH
4802: EMPTY
4803: LIST
4804: LIST
4805: PUSH
4806: LD_INT 30
4808: PUSH
4809: LD_INT 7
4811: PUSH
4812: EMPTY
4813: LIST
4814: LIST
4815: PUSH
4816: LD_INT 30
4818: PUSH
4819: LD_INT 8
4821: PUSH
4822: EMPTY
4823: LIST
4824: LIST
4825: PUSH
4826: EMPTY
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: PPUSH
4836: CALL_OW 69
4840: ST_TO_ADDR
// fac_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
4841: LD_ADDR_VAR 0 11
4845: PUSH
4846: LD_INT 22
4848: PUSH
4849: LD_INT 3
4851: PUSH
4852: EMPTY
4853: LIST
4854: LIST
4855: PUSH
4856: LD_INT 30
4858: PUSH
4859: LD_INT 3
4861: PUSH
4862: EMPTY
4863: LIST
4864: LIST
4865: PUSH
4866: EMPTY
4867: LIST
4868: LIST
4869: PPUSH
4870: CALL_OW 69
4874: ST_TO_ADDR
// breastworks_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
4875: LD_ADDR_VAR 0 12
4879: PUSH
4880: LD_INT 22
4882: PUSH
4883: LD_INT 3
4885: PUSH
4886: EMPTY
4887: LIST
4888: LIST
4889: PUSH
4890: LD_INT 30
4892: PUSH
4893: LD_INT 31
4895: PUSH
4896: EMPTY
4897: LIST
4898: LIST
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: PPUSH
4904: CALL_OW 69
4908: ST_TO_ADDR
// bunker_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
4909: LD_ADDR_VAR 0 13
4913: PUSH
4914: LD_INT 22
4916: PUSH
4917: LD_INT 3
4919: PUSH
4920: EMPTY
4921: LIST
4922: LIST
4923: PUSH
4924: LD_INT 30
4926: PUSH
4927: LD_INT 32
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: PUSH
4934: EMPTY
4935: LIST
4936: LIST
4937: PPUSH
4938: CALL_OW 69
4942: ST_TO_ADDR
// turret_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
4943: LD_ADDR_VAR 0 14
4947: PUSH
4948: LD_INT 22
4950: PUSH
4951: LD_INT 3
4953: PUSH
4954: EMPTY
4955: LIST
4956: LIST
4957: PUSH
4958: LD_INT 30
4960: PUSH
4961: LD_INT 33
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: PUSH
4968: EMPTY
4969: LIST
4970: LIST
4971: PPUSH
4972: CALL_OW 69
4976: ST_TO_ADDR
// weapons_list := [ [ ru_heavy_machine_gun , 5 ] , [ ru_gatling_gun , 50 ] , [ ru_gun , 30 ] , [ ru_heavy_gun , 15 ] ] ;
4977: LD_ADDR_VAR 0 15
4981: PUSH
4982: LD_INT 42
4984: PUSH
4985: LD_INT 5
4987: PUSH
4988: EMPTY
4989: LIST
4990: LIST
4991: PUSH
4992: LD_INT 43
4994: PUSH
4995: LD_INT 50
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: PUSH
5002: LD_INT 44
5004: PUSH
5005: LD_INT 30
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: PUSH
5012: LD_INT 46
5014: PUSH
5015: LD_INT 15
5017: PUSH
5018: EMPTY
5019: LIST
5020: LIST
5021: PUSH
5022: EMPTY
5023: LIST
5024: LIST
5025: LIST
5026: LIST
5027: ST_TO_ADDR
// personel_counter := [ 0 , 4 , 6 , 3 ] ;
5028: LD_ADDR_VAR 0 16
5032: PUSH
5033: LD_INT 0
5035: PUSH
5036: LD_INT 4
5038: PUSH
5039: LD_INT 6
5041: PUSH
5042: LD_INT 3
5044: PUSH
5045: EMPTY
5046: LIST
5047: LIST
5048: LIST
5049: LIST
5050: ST_TO_ADDR
// skill := [ 4 , 5 , 6 ] [ Difficulty ] ;
5051: LD_ADDR_VAR 0 6
5055: PUSH
5056: LD_INT 4
5058: PUSH
5059: LD_INT 5
5061: PUSH
5062: LD_INT 6
5064: PUSH
5065: EMPTY
5066: LIST
5067: LIST
5068: LIST
5069: PUSH
5070: LD_OWVAR 67
5074: ARRAY
5075: ST_TO_ADDR
// SetBName ( ru_dep_main , am_tukh ) ;
5076: LD_INT 16
5078: PPUSH
5079: LD_STRING am_tukh
5081: PPUSH
5082: CALL_OW 500
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
5086: LD_ADDR_VAR 0 2
5090: PUSH
5091: LD_INT 21
5093: PUSH
5094: LD_INT 3
5096: PUSH
5097: EMPTY
5098: LIST
5099: LIST
5100: PPUSH
5101: CALL_OW 69
5105: PUSH
5106: FOR_IN
5107: IFFALSE 5140
// SetBLevel ( i , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
5109: LD_VAR 0 2
5113: PPUSH
5114: LD_INT 4
5116: PUSH
5117: LD_INT 5
5119: PUSH
5120: LD_INT 6
5122: PUSH
5123: EMPTY
5124: LIST
5125: LIST
5126: LIST
5127: PUSH
5128: LD_OWVAR 67
5132: ARRAY
5133: PPUSH
5134: CALL_OW 241
5138: GO 5106
5140: POP
5141: POP
// for i in dep_list do
5142: LD_ADDR_VAR 0 2
5146: PUSH
5147: LD_VAR 0 9
5151: PUSH
5152: FOR_IN
5153: IFFALSE 5197
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
5155: LD_VAR 0 2
5159: PPUSH
5160: CALL_OW 274
5164: PPUSH
5165: LD_INT 1
5167: PPUSH
5168: LD_INT 1000
5170: PPUSH
5171: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
5175: LD_VAR 0 2
5179: PPUSH
5180: CALL_OW 274
5184: PPUSH
5185: LD_INT 2
5187: PPUSH
5188: LD_INT 1000
5190: PPUSH
5191: CALL_OW 277
// end ;
5195: GO 5152
5197: POP
5198: POP
// InitHc ;
5199: CALL_OW 19
// tmp := bunker_list * [ 45 , 60 , 75 ] [ Difficulty ] div 100 ;
5203: LD_ADDR_VAR 0 8
5207: PUSH
5208: LD_VAR 0 13
5212: PUSH
5213: LD_INT 45
5215: PUSH
5216: LD_INT 60
5218: PUSH
5219: LD_INT 75
5221: PUSH
5222: EMPTY
5223: LIST
5224: LIST
5225: LIST
5226: PUSH
5227: LD_OWVAR 67
5231: ARRAY
5232: MUL
5233: PUSH
5234: LD_INT 100
5236: DIV
5237: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , tmp ) ;
5238: LD_ADDR_VAR 0 16
5242: PUSH
5243: LD_VAR 0 16
5247: PPUSH
5248: LD_INT 1
5250: PPUSH
5251: LD_VAR 0 8
5255: PPUSH
5256: CALL_OW 1
5260: ST_TO_ADDR
// tmp := [ ] ;
5261: LD_ADDR_VAR 0 8
5265: PUSH
5266: EMPTY
5267: ST_TO_ADDR
// for i in bunker_list do
5268: LD_ADDR_VAR 0 2
5272: PUSH
5273: LD_VAR 0 13
5277: PUSH
5278: FOR_IN
5279: IFFALSE 5375
// if i mod 10 + 1 < tmp then
5281: LD_VAR 0 2
5285: PUSH
5286: LD_INT 10
5288: MOD
5289: PUSH
5290: LD_INT 1
5292: PLUS
5293: PUSH
5294: LD_VAR 0 8
5298: LESS
5299: IFFALSE 5344
// tmp := Insert ( tmp , i mod rand ( 3 , 5 ) + 1 , i ) else
5301: LD_ADDR_VAR 0 8
5305: PUSH
5306: LD_VAR 0 8
5310: PPUSH
5311: LD_VAR 0 2
5315: PUSH
5316: LD_INT 3
5318: PPUSH
5319: LD_INT 5
5321: PPUSH
5322: CALL_OW 12
5326: MOD
5327: PUSH
5328: LD_INT 1
5330: PLUS
5331: PPUSH
5332: LD_VAR 0 2
5336: PPUSH
5337: CALL_OW 2
5341: ST_TO_ADDR
5342: GO 5373
// tmp := Insert ( tmp , tmp + 1 , i ) ;
5344: LD_ADDR_VAR 0 8
5348: PUSH
5349: LD_VAR 0 8
5353: PPUSH
5354: LD_VAR 0 8
5358: PUSH
5359: LD_INT 1
5361: PLUS
5362: PPUSH
5363: LD_VAR 0 2
5367: PPUSH
5368: CALL_OW 2
5372: ST_TO_ADDR
5373: GO 5278
5375: POP
5376: POP
// bunker_list := tmp ;
5377: LD_ADDR_VAR 0 13
5381: PUSH
5382: LD_VAR 0 8
5386: ST_TO_ADDR
// for i in bunker_list ^ turret_list do
5387: LD_ADDR_VAR 0 2
5391: PUSH
5392: LD_VAR 0 13
5396: PUSH
5397: LD_VAR 0 14
5401: ADD
5402: PUSH
5403: FOR_IN
5404: IFFALSE 5427
// PlaceWeaponTurret ( i , GetTurretWeaponBase ( i ) ) ;
5406: LD_VAR 0 2
5410: PPUSH
5411: LD_VAR 0 2
5415: PPUSH
5416: CALL 2188 0 1
5420: PPUSH
5421: CALL_OW 431
5425: GO 5403
5427: POP
5428: POP
// while ( personel_counter [ 1 ] ) do
5429: LD_VAR 0 16
5433: PUSH
5434: LD_INT 1
5436: ARRAY
5437: IFFALSE 5545
// begin i := rand ( 1 , bunker_list ) ;
5439: LD_ADDR_VAR 0 2
5443: PUSH
5444: LD_INT 1
5446: PPUSH
5447: LD_VAR 0 13
5451: PPUSH
5452: CALL_OW 12
5456: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5457: LD_INT 0
5459: PPUSH
5460: LD_INT 1
5462: PPUSH
5463: LD_VAR 0 6
5467: PPUSH
5468: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , bunker_list [ i ] ) ;
5472: CALL_OW 44
5476: PPUSH
5477: LD_VAR 0 13
5481: PUSH
5482: LD_VAR 0 2
5486: ARRAY
5487: PPUSH
5488: CALL_OW 52
// bunker_list := Delete ( bunker_list , i ) ;
5492: LD_ADDR_VAR 0 13
5496: PUSH
5497: LD_VAR 0 13
5501: PPUSH
5502: LD_VAR 0 2
5506: PPUSH
5507: CALL_OW 3
5511: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , personel_counter [ 1 ] - 1 ) ;
5512: LD_ADDR_VAR 0 16
5516: PUSH
5517: LD_VAR 0 16
5521: PPUSH
5522: LD_INT 1
5524: PPUSH
5525: LD_VAR 0 16
5529: PUSH
5530: LD_INT 1
5532: ARRAY
5533: PUSH
5534: LD_INT 1
5536: MINUS
5537: PPUSH
5538: CALL_OW 1
5542: ST_TO_ADDR
// end ;
5543: GO 5429
// for i = 1 to personel_counter [ 2 ] do
5545: LD_ADDR_VAR 0 2
5549: PUSH
5550: DOUBLE
5551: LD_INT 1
5553: DEC
5554: ST_TO_ADDR
5555: LD_VAR 0 16
5559: PUSH
5560: LD_INT 2
5562: ARRAY
5563: PUSH
5564: FOR_TO
5565: IFFALSE 5596
// begin PrepareHuman ( false , 2 , skill ) ;
5567: LD_INT 0
5569: PPUSH
5570: LD_INT 2
5572: PPUSH
5573: LD_VAR 0 6
5577: PPUSH
5578: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru_dep_main ) ;
5582: CALL_OW 44
5586: PPUSH
5587: LD_INT 16
5589: PPUSH
5590: CALL_OW 52
// end ;
5594: GO 5564
5596: POP
5597: POP
// for i = 1 to personel_counter [ 3 ] do
5598: LD_ADDR_VAR 0 2
5602: PUSH
5603: DOUBLE
5604: LD_INT 1
5606: DEC
5607: ST_TO_ADDR
5608: LD_VAR 0 16
5612: PUSH
5613: LD_INT 3
5615: ARRAY
5616: PUSH
5617: FOR_TO
5618: IFFALSE 5665
// begin PrepareHuman ( false , 3 , skill ) ;
5620: LD_INT 0
5622: PPUSH
5623: LD_INT 3
5625: PPUSH
5626: LD_VAR 0 6
5630: PPUSH
5631: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , fac_list [ i mod 2 + 1 ] ) ;
5635: CALL_OW 44
5639: PPUSH
5640: LD_VAR 0 11
5644: PUSH
5645: LD_VAR 0 2
5649: PUSH
5650: LD_INT 2
5652: MOD
5653: PUSH
5654: LD_INT 1
5656: PLUS
5657: ARRAY
5658: PPUSH
5659: CALL_OW 52
// end ;
5663: GO 5617
5665: POP
5666: POP
// for i = 1 to personel_counter [ 4 ] do
5667: LD_ADDR_VAR 0 2
5671: PUSH
5672: DOUBLE
5673: LD_INT 1
5675: DEC
5676: ST_TO_ADDR
5677: LD_VAR 0 16
5681: PUSH
5682: LD_INT 4
5684: ARRAY
5685: PUSH
5686: FOR_TO
5687: IFFALSE 5724
// begin PrepareHuman ( false , 4 , skill ) ;
5689: LD_INT 0
5691: PPUSH
5692: LD_INT 4
5694: PPUSH
5695: LD_VAR 0 6
5699: PPUSH
5700: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , lab_list [ 1 ] ) ;
5704: CALL_OW 44
5708: PPUSH
5709: LD_VAR 0 10
5713: PUSH
5714: LD_INT 1
5716: ARRAY
5717: PPUSH
5718: CALL_OW 52
// end ;
5722: GO 5686
5724: POP
5725: POP
// for i in breastworks_list do
5726: LD_ADDR_VAR 0 2
5730: PUSH
5731: LD_VAR 0 12
5735: PUSH
5736: FOR_IN
5737: IFFALSE 5849
// begin r := GetDir ( i ) ;
5739: LD_ADDR_VAR 0 4
5743: PUSH
5744: LD_VAR 0 2
5748: PPUSH
5749: CALL_OW 254
5753: ST_TO_ADDR
// if r > 3 then
5754: LD_VAR 0 4
5758: PUSH
5759: LD_INT 3
5761: GREATER
5762: IFFALSE 5780
// r := r - 3 else
5764: LD_ADDR_VAR 0 4
5768: PUSH
5769: LD_VAR 0 4
5773: PUSH
5774: LD_INT 3
5776: MINUS
5777: ST_TO_ADDR
5778: GO 5794
// r := r + 3 ;
5780: LD_ADDR_VAR 0 4
5784: PUSH
5785: LD_VAR 0 4
5789: PUSH
5790: LD_INT 3
5792: PLUS
5793: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5794: LD_INT 0
5796: PPUSH
5797: LD_INT 1
5799: PPUSH
5800: LD_VAR 0 6
5804: PPUSH
5805: CALL_OW 380
// un := CreateHuman ;
5809: LD_ADDR_VAR 0 5
5813: PUSH
5814: CALL_OW 44
5818: ST_TO_ADDR
// SetDir ( un , r ) ;
5819: LD_VAR 0 5
5823: PPUSH
5824: LD_VAR 0 4
5828: PPUSH
5829: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
5833: LD_VAR 0 5
5837: PPUSH
5838: LD_VAR 0 2
5842: PPUSH
5843: CALL_OW 52
// end ;
5847: GO 5736
5849: POP
5850: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) ;
5851: LD_ADDR_VAR 0 8
5855: PUSH
5856: LD_INT 22
5858: PUSH
5859: LD_INT 3
5861: PUSH
5862: EMPTY
5863: LIST
5864: LIST
5865: PUSH
5866: LD_INT 25
5868: PUSH
5869: LD_INT 3
5871: PUSH
5872: EMPTY
5873: LIST
5874: LIST
5875: PUSH
5876: EMPTY
5877: LIST
5878: LIST
5879: PPUSH
5880: CALL_OW 69
5884: ST_TO_ADDR
// r := [ 4 , 5 , 6 ] [ Difficulty ] ;
5885: LD_ADDR_VAR 0 4
5889: PUSH
5890: LD_INT 4
5892: PUSH
5893: LD_INT 5
5895: PUSH
5896: LD_INT 6
5898: PUSH
5899: EMPTY
5900: LIST
5901: LIST
5902: LIST
5903: PUSH
5904: LD_OWVAR 67
5908: ARRAY
5909: ST_TO_ADDR
// for i = 1 to r do
5910: LD_ADDR_VAR 0 2
5914: PUSH
5915: DOUBLE
5916: LD_INT 1
5918: DEC
5919: ST_TO_ADDR
5920: LD_VAR 0 4
5924: PUSH
5925: FOR_TO
5926: IFFALSE 6099
// begin un := PrepareTank ( 3 , 3 , [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked ] [ i mod 3 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
5928: LD_ADDR_VAR 0 5
5932: PUSH
5933: LD_INT 3
5935: PPUSH
5936: LD_INT 3
5938: PPUSH
5939: LD_INT 22
5941: PUSH
5942: LD_INT 22
5944: PUSH
5945: LD_INT 24
5947: PUSH
5948: EMPTY
5949: LIST
5950: LIST
5951: LIST
5952: PUSH
5953: LD_VAR 0 2
5957: PUSH
5958: LD_INT 3
5960: MOD
5961: PUSH
5962: LD_INT 1
5964: PLUS
5965: ARRAY
5966: PPUSH
5967: LD_INT 1
5969: PPUSH
5970: LD_INT 1
5972: PPUSH
5973: LD_INT 43
5975: PUSH
5976: LD_INT 44
5978: PUSH
5979: LD_INT 42
5981: PUSH
5982: EMPTY
5983: LIST
5984: LIST
5985: LIST
5986: PUSH
5987: LD_VAR 0 2
5991: PUSH
5992: LD_INT 3
5994: MOD
5995: PUSH
5996: LD_INT 1
5998: PLUS
5999: ARRAY
6000: PPUSH
6001: LD_INT 100
6003: PPUSH
6004: CALL 500 0 7
6008: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
6009: LD_VAR 0 5
6013: PPUSH
6014: LD_INT 0
6016: PPUSH
6017: LD_INT 5
6019: PPUSH
6020: CALL_OW 12
6024: PPUSH
6025: CALL_OW 233
// PlaceUnitArea ( un , parkingArea , false ) ;
6029: LD_VAR 0 5
6033: PPUSH
6034: LD_INT 5
6036: PPUSH
6037: LD_INT 0
6039: PPUSH
6040: CALL_OW 49
// if i > tmp - 2 then
6044: LD_VAR 0 2
6048: PUSH
6049: LD_VAR 0 8
6053: PUSH
6054: LD_INT 2
6056: MINUS
6057: GREATER
6058: IFFALSE 6062
// continue ;
6060: GO 5925
// ComExitBuilding ( tmp [ i ] ) ;
6062: LD_VAR 0 8
6066: PUSH
6067: LD_VAR 0 2
6071: ARRAY
6072: PPUSH
6073: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , un ) ;
6077: LD_VAR 0 8
6081: PUSH
6082: LD_VAR 0 2
6086: ARRAY
6087: PPUSH
6088: LD_VAR 0 5
6092: PPUSH
6093: CALL_OW 180
// end ;
6097: GO 5925
6099: POP
6100: POP
// end ;
6101: LD_VAR 0 1
6105: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) do var i , filter , tmp , engs , enemy ;
6106: LD_INT 22
6108: PUSH
6109: LD_INT 3
6111: PUSH
6112: EMPTY
6113: LIST
6114: LIST
6115: PUSH
6116: LD_INT 25
6118: PUSH
6119: LD_INT 2
6121: PUSH
6122: EMPTY
6123: LIST
6124: LIST
6125: PUSH
6126: EMPTY
6127: LIST
6128: LIST
6129: PPUSH
6130: CALL_OW 69
6134: IFFALSE 6866
6136: GO 6138
6138: DISABLE
6139: LD_INT 0
6141: PPUSH
6142: PPUSH
6143: PPUSH
6144: PPUSH
6145: PPUSH
// begin enable ;
6146: ENABLE
// filter := FilterUnitsInArea ( baseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
6147: LD_ADDR_VAR 0 2
6151: PUSH
6152: LD_INT 6
6154: PPUSH
6155: LD_INT 3
6157: PUSH
6158: LD_INT 24
6160: PUSH
6161: LD_INT 1000
6163: PUSH
6164: EMPTY
6165: LIST
6166: LIST
6167: PUSH
6168: EMPTY
6169: LIST
6170: LIST
6171: PUSH
6172: LD_INT 21
6174: PUSH
6175: LD_INT 3
6177: PUSH
6178: EMPTY
6179: LIST
6180: LIST
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: PPUSH
6186: CALL_OW 70
6190: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
6191: LD_ADDR_VAR 0 4
6195: PUSH
6196: LD_INT 22
6198: PUSH
6199: LD_INT 3
6201: PUSH
6202: EMPTY
6203: LIST
6204: LIST
6205: PUSH
6206: LD_INT 25
6208: PUSH
6209: LD_INT 2
6211: PUSH
6212: EMPTY
6213: LIST
6214: LIST
6215: PUSH
6216: EMPTY
6217: LIST
6218: LIST
6219: PPUSH
6220: CALL_OW 69
6224: ST_TO_ADDR
// if not filter and not ru_rebuild_list then
6225: LD_VAR 0 2
6229: NOT
6230: PUSH
6231: LD_EXP 20
6235: NOT
6236: AND
6237: IFFALSE 6307
// begin for i in engs do
6239: LD_ADDR_VAR 0 1
6243: PUSH
6244: LD_VAR 0 4
6248: PUSH
6249: FOR_IN
6250: IFFALSE 6305
// if GetLives ( i ) = 1000 and not HasTask ( i ) and not IsInUnit ( i ) then
6252: LD_VAR 0 1
6256: PPUSH
6257: CALL_OW 256
6261: PUSH
6262: LD_INT 1000
6264: EQUAL
6265: PUSH
6266: LD_VAR 0 1
6270: PPUSH
6271: CALL_OW 314
6275: NOT
6276: AND
6277: PUSH
6278: LD_VAR 0 1
6282: PPUSH
6283: CALL_OW 310
6287: NOT
6288: AND
6289: IFFALSE 6303
// ComEnterUnit ( i , ru_dep_main ) ;
6291: LD_VAR 0 1
6295: PPUSH
6296: LD_INT 16
6298: PPUSH
6299: CALL_OW 120
6303: GO 6249
6305: POP
6306: POP
// end ; if UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) then
6307: LD_VAR 0 4
6311: PPUSH
6312: LD_INT 3
6314: PUSH
6315: LD_INT 24
6317: PUSH
6318: LD_INT 650
6320: PUSH
6321: EMPTY
6322: LIST
6323: LIST
6324: PUSH
6325: EMPTY
6326: LIST
6327: LIST
6328: PPUSH
6329: CALL_OW 72
6333: IFFALSE 6426
// begin tmp := UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) ;
6335: LD_ADDR_VAR 0 3
6339: PUSH
6340: LD_VAR 0 4
6344: PPUSH
6345: LD_INT 3
6347: PUSH
6348: LD_INT 24
6350: PUSH
6351: LD_INT 650
6353: PUSH
6354: EMPTY
6355: LIST
6356: LIST
6357: PUSH
6358: EMPTY
6359: LIST
6360: LIST
6361: PPUSH
6362: CALL_OW 72
6366: ST_TO_ADDR
// for i in tmp do
6367: LD_ADDR_VAR 0 1
6371: PUSH
6372: LD_VAR 0 3
6376: PUSH
6377: FOR_IN
6378: IFFALSE 6424
// if not IsInArea ( i , mainBaseArea ) then
6380: LD_VAR 0 1
6384: PPUSH
6385: LD_INT 14
6387: PPUSH
6388: CALL_OW 308
6392: NOT
6393: IFFALSE 6422
// begin ComMoveXY ( i , 129 , 125 ) ;
6395: LD_VAR 0 1
6399: PPUSH
6400: LD_INT 129
6402: PPUSH
6403: LD_INT 125
6405: PPUSH
6406: CALL_OW 111
// AddComWait ( i , 0 0$30 ) ;
6410: LD_VAR 0 1
6414: PPUSH
6415: LD_INT 1050
6417: PPUSH
6418: CALL_OW 202
// end ;
6422: GO 6377
6424: POP
6425: POP
// end ; engs := UnitFilter ( engs , [ f_lives , 650 ] ) ;
6426: LD_ADDR_VAR 0 4
6430: PUSH
6431: LD_VAR 0 4
6435: PPUSH
6436: LD_INT 24
6438: PUSH
6439: LD_INT 650
6441: PUSH
6442: EMPTY
6443: LIST
6444: LIST
6445: PPUSH
6446: CALL_OW 72
6450: ST_TO_ADDR
// if not engs then
6451: LD_VAR 0 4
6455: NOT
6456: IFFALSE 6460
// exit ;
6458: GO 6866
// if filter then
6460: LD_VAR 0 2
6464: IFFALSE 6723
// begin for i in engs do
6466: LD_ADDR_VAR 0 1
6470: PUSH
6471: LD_VAR 0 4
6475: PUSH
6476: FOR_IN
6477: IFFALSE 6501
// if IsInUnit ( i ) then
6479: LD_VAR 0 1
6483: PPUSH
6484: CALL_OW 310
6488: IFFALSE 6499
// ComExitBuilding ( i ) ;
6490: LD_VAR 0 1
6494: PPUSH
6495: CALL_OW 122
6499: GO 6476
6501: POP
6502: POP
// wait ( 3 ) ;
6503: LD_INT 3
6505: PPUSH
6506: CALL_OW 67
// if filter >= 2 and engs >= 2 then
6510: LD_VAR 0 2
6514: PUSH
6515: LD_INT 2
6517: GREATEREQUAL
6518: PUSH
6519: LD_VAR 0 4
6523: PUSH
6524: LD_INT 2
6526: GREATEREQUAL
6527: AND
6528: IFFALSE 6676
// begin for i = 1 to engs / 2 do
6530: LD_ADDR_VAR 0 1
6534: PUSH
6535: DOUBLE
6536: LD_INT 1
6538: DEC
6539: ST_TO_ADDR
6540: LD_VAR 0 4
6544: PUSH
6545: LD_INT 2
6547: DIVREAL
6548: PUSH
6549: FOR_TO
6550: IFFALSE 6596
// if not HasTask ( engs [ i ] ) then
6552: LD_VAR 0 4
6556: PUSH
6557: LD_VAR 0 1
6561: ARRAY
6562: PPUSH
6563: CALL_OW 314
6567: NOT
6568: IFFALSE 6594
// ComRepairBuilding ( engs [ i ] , filter [ 1 ] ) ;
6570: LD_VAR 0 4
6574: PUSH
6575: LD_VAR 0 1
6579: ARRAY
6580: PPUSH
6581: LD_VAR 0 2
6585: PUSH
6586: LD_INT 1
6588: ARRAY
6589: PPUSH
6590: CALL_OW 130
6594: GO 6549
6596: POP
6597: POP
// for i = engs / 2 + 1 to engs do
6598: LD_ADDR_VAR 0 1
6602: PUSH
6603: DOUBLE
6604: LD_VAR 0 4
6608: PUSH
6609: LD_INT 2
6611: DIVREAL
6612: PUSH
6613: LD_INT 1
6615: PLUS
6616: DEC
6617: ST_TO_ADDR
6618: LD_VAR 0 4
6622: PUSH
6623: FOR_TO
6624: IFFALSE 6672
// if not HasTask ( engs [ i ] ) then
6626: LD_VAR 0 4
6630: PUSH
6631: LD_VAR 0 1
6635: ARRAY
6636: PPUSH
6637: CALL_OW 314
6641: NOT
6642: IFFALSE 6670
// ComRepairBuilding ( engs [ i ] , filter [ filter ] ) ;
6644: LD_VAR 0 4
6648: PUSH
6649: LD_VAR 0 1
6653: ARRAY
6654: PPUSH
6655: LD_VAR 0 2
6659: PUSH
6660: LD_VAR 0 2
6664: ARRAY
6665: PPUSH
6666: CALL_OW 130
6670: GO 6623
6672: POP
6673: POP
// end else
6674: GO 6723
// for i in engs do
6676: LD_ADDR_VAR 0 1
6680: PUSH
6681: LD_VAR 0 4
6685: PUSH
6686: FOR_IN
6687: IFFALSE 6721
// if not HasTask ( i ) then
6689: LD_VAR 0 1
6693: PPUSH
6694: CALL_OW 314
6698: NOT
6699: IFFALSE 6719
// ComRepairBuilding ( i , filter [ 1 ] ) ;
6701: LD_VAR 0 1
6705: PPUSH
6706: LD_VAR 0 2
6710: PUSH
6711: LD_INT 1
6713: ARRAY
6714: PPUSH
6715: CALL_OW 130
6719: GO 6686
6721: POP
6722: POP
// end ; enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
6723: LD_ADDR_VAR 0 5
6727: PUSH
6728: LD_INT 81
6730: PUSH
6731: LD_INT 3
6733: PUSH
6734: EMPTY
6735: LIST
6736: LIST
6737: PPUSH
6738: CALL_OW 69
6742: ST_TO_ADDR
// if ru_rebuild_list and not filter then
6743: LD_EXP 20
6747: PUSH
6748: LD_VAR 0 2
6752: NOT
6753: AND
6754: IFFALSE 6866
// begin ComExitBuilding ( engs ) ;
6756: LD_VAR 0 4
6760: PPUSH
6761: CALL_OW 122
// if GetDistUnitXY ( NearestUnitToXY ( enemy , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) > 10 then
6765: LD_VAR 0 5
6769: PPUSH
6770: LD_EXP 20
6774: PUSH
6775: LD_INT 2
6777: ARRAY
6778: PPUSH
6779: LD_EXP 20
6783: PUSH
6784: LD_INT 3
6786: ARRAY
6787: PPUSH
6788: CALL_OW 73
6792: PPUSH
6793: LD_EXP 20
6797: PUSH
6798: LD_INT 2
6800: ARRAY
6801: PPUSH
6802: LD_EXP 20
6806: PUSH
6807: LD_INT 3
6809: ARRAY
6810: PPUSH
6811: CALL_OW 297
6815: PUSH
6816: LD_INT 10
6818: GREATER
6819: IFFALSE 6866
// ComBuild ( engs , ru_rebuild_list [ 1 ] , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] , ru_rebuild_list [ 4 ] ) ;
6821: LD_VAR 0 4
6825: PPUSH
6826: LD_EXP 20
6830: PUSH
6831: LD_INT 1
6833: ARRAY
6834: PPUSH
6835: LD_EXP 20
6839: PUSH
6840: LD_INT 2
6842: ARRAY
6843: PPUSH
6844: LD_EXP 20
6848: PUSH
6849: LD_INT 3
6851: ARRAY
6852: PPUSH
6853: LD_EXP 20
6857: PUSH
6858: LD_INT 4
6860: ARRAY
6861: PPUSH
6862: CALL_OW 145
// end ; end ;
6866: PPOPN 5
6868: END
// every 0 0$1 trigger GetLives ( ru_dep_main ) < 250 do var i , tmp ;
6869: LD_INT 16
6871: PPUSH
6872: CALL_OW 256
6876: PUSH
6877: LD_INT 250
6879: LESS
6880: IFFALSE 7070
6882: GO 6884
6884: DISABLE
6885: LD_INT 0
6887: PPUSH
6888: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
6889: LD_ADDR_VAR 0 2
6893: PUSH
6894: LD_INT 22
6896: PUSH
6897: LD_INT 3
6899: PUSH
6900: EMPTY
6901: LIST
6902: LIST
6903: PUSH
6904: LD_INT 2
6906: PUSH
6907: LD_INT 25
6909: PUSH
6910: LD_INT 1
6912: PUSH
6913: EMPTY
6914: LIST
6915: LIST
6916: PUSH
6917: LD_INT 25
6919: PUSH
6920: LD_INT 3
6922: PUSH
6923: EMPTY
6924: LIST
6925: LIST
6926: PUSH
6927: LD_INT 25
6929: PUSH
6930: LD_INT 4
6932: PUSH
6933: EMPTY
6934: LIST
6935: LIST
6936: PUSH
6937: EMPTY
6938: LIST
6939: LIST
6940: LIST
6941: LIST
6942: PUSH
6943: EMPTY
6944: LIST
6945: LIST
6946: PPUSH
6947: CALL_OW 69
6951: ST_TO_ADDR
// ComExitBuilding ( tmp ) ;
6952: LD_VAR 0 2
6956: PPUSH
6957: CALL_OW 122
// wait ( 3 ) ;
6961: LD_INT 3
6963: PPUSH
6964: CALL_OW 67
// ComMoveXY ( tmp , 156 , 211 ) ;
6968: LD_VAR 0 2
6972: PPUSH
6973: LD_INT 156
6975: PPUSH
6976: LD_INT 211
6978: PPUSH
6979: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6983: LD_INT 35
6985: PPUSH
6986: CALL_OW 67
// for i in tmp do
6990: LD_ADDR_VAR 0 1
6994: PUSH
6995: LD_VAR 0 2
6999: PUSH
7000: FOR_IN
7001: IFFALSE 7061
// if IsInArea ( i , escapeArea ) then
7003: LD_VAR 0 1
7007: PPUSH
7008: LD_INT 15
7010: PPUSH
7011: CALL_OW 308
7015: IFFALSE 7044
// begin RemoveUnit ( i ) ;
7017: LD_VAR 0 1
7021: PPUSH
7022: CALL_OW 64
// tmp := tmp diff i ;
7026: LD_ADDR_VAR 0 2
7030: PUSH
7031: LD_VAR 0 2
7035: PUSH
7036: LD_VAR 0 1
7040: DIFF
7041: ST_TO_ADDR
// end else
7042: GO 7059
// ComMoveXY ( i , 156 , 211 ) ;
7044: LD_VAR 0 1
7048: PPUSH
7049: LD_INT 156
7051: PPUSH
7052: LD_INT 211
7054: PPUSH
7055: CALL_OW 111
7059: GO 7000
7061: POP
7062: POP
// until not tmp ;
7063: LD_VAR 0 2
7067: NOT
7068: IFFALSE 6983
// end ;
7070: PPOPN 2
7072: END
// every 0 0$01 trigger GetLives ( ru_dep_main ) > 250 and FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_outside ] ] ] ) do var i , tmp ;
7073: LD_INT 16
7075: PPUSH
7076: CALL_OW 256
7080: PUSH
7081: LD_INT 250
7083: GREATER
7084: PUSH
7085: LD_INT 22
7087: PUSH
7088: LD_INT 3
7090: PUSH
7091: EMPTY
7092: LIST
7093: LIST
7094: PUSH
7095: LD_INT 25
7097: PUSH
7098: LD_INT 1
7100: PUSH
7101: EMPTY
7102: LIST
7103: LIST
7104: PUSH
7105: LD_INT 56
7107: PUSH
7108: EMPTY
7109: LIST
7110: PUSH
7111: EMPTY
7112: LIST
7113: LIST
7114: LIST
7115: PUSH
7116: EMPTY
7117: LIST
7118: PPUSH
7119: CALL_OW 69
7123: AND
7124: IFFALSE 7236
7126: GO 7128
7128: DISABLE
7129: LD_INT 0
7131: PPUSH
7132: PPUSH
// begin enable ;
7133: ENABLE
// tmp := FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ] ) ;
7134: LD_ADDR_VAR 0 2
7138: PUSH
7139: LD_INT 22
7141: PUSH
7142: LD_INT 3
7144: PUSH
7145: EMPTY
7146: LIST
7147: LIST
7148: PUSH
7149: LD_INT 25
7151: PUSH
7152: LD_INT 1
7154: PUSH
7155: EMPTY
7156: LIST
7157: LIST
7158: PUSH
7159: LD_INT 56
7161: PUSH
7162: EMPTY
7163: LIST
7164: PUSH
7165: LD_INT 3
7167: PUSH
7168: LD_INT 60
7170: PUSH
7171: EMPTY
7172: LIST
7173: PUSH
7174: EMPTY
7175: LIST
7176: LIST
7177: PUSH
7178: EMPTY
7179: LIST
7180: LIST
7181: LIST
7182: LIST
7183: PUSH
7184: EMPTY
7185: LIST
7186: PPUSH
7187: CALL_OW 69
7191: ST_TO_ADDR
// if not tmp then
7192: LD_VAR 0 2
7196: NOT
7197: IFFALSE 7201
// exit ;
7199: GO 7236
// for i in tmp do
7201: LD_ADDR_VAR 0 1
7205: PUSH
7206: LD_VAR 0 2
7210: PUSH
7211: FOR_IN
7212: IFFALSE 7234
// GoToAnotherTower ( i , 0 , 143 , 143 ) ;
7214: LD_VAR 0 1
7218: PPUSH
7219: LD_INT 0
7221: PPUSH
7222: LD_INT 143
7224: PPUSH
7225: LD_INT 143
7227: PPUSH
7228: CALL 818 0 4
7232: GO 7211
7234: POP
7235: POP
// end ;
7236: PPOPN 2
7238: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do var i , tmp , doc ;
7239: LD_INT 22
7241: PUSH
7242: LD_INT 3
7244: PUSH
7245: EMPTY
7246: LIST
7247: LIST
7248: PUSH
7249: LD_INT 25
7251: PUSH
7252: LD_INT 4
7254: PUSH
7255: EMPTY
7256: LIST
7257: LIST
7258: PUSH
7259: EMPTY
7260: LIST
7261: LIST
7262: PPUSH
7263: CALL_OW 69
7267: IFFALSE 7521
7269: GO 7271
7271: DISABLE
7272: LD_INT 0
7274: PPUSH
7275: PPUSH
7276: PPUSH
// begin enable ;
7277: ENABLE
// tmp := FilterUnitsInArea ( mainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7278: LD_ADDR_VAR 0 2
7282: PUSH
7283: LD_INT 14
7285: PPUSH
7286: LD_INT 22
7288: PUSH
7289: LD_INT 3
7291: PUSH
7292: EMPTY
7293: LIST
7294: LIST
7295: PUSH
7296: LD_INT 21
7298: PUSH
7299: LD_INT 1
7301: PUSH
7302: EMPTY
7303: LIST
7304: LIST
7305: PUSH
7306: LD_INT 3
7308: PUSH
7309: LD_INT 24
7311: PUSH
7312: LD_INT 1000
7314: PUSH
7315: EMPTY
7316: LIST
7317: LIST
7318: PUSH
7319: EMPTY
7320: LIST
7321: LIST
7322: PUSH
7323: EMPTY
7324: LIST
7325: LIST
7326: LIST
7327: PPUSH
7328: CALL_OW 70
7332: ST_TO_ADDR
// doc := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
7333: LD_ADDR_VAR 0 3
7337: PUSH
7338: LD_INT 22
7340: PUSH
7341: LD_INT 3
7343: PUSH
7344: EMPTY
7345: LIST
7346: LIST
7347: PUSH
7348: LD_INT 25
7350: PUSH
7351: LD_INT 4
7353: PUSH
7354: EMPTY
7355: LIST
7356: LIST
7357: PUSH
7358: EMPTY
7359: LIST
7360: LIST
7361: PPUSH
7362: CALL_OW 69
7366: ST_TO_ADDR
// if not doc then
7367: LD_VAR 0 3
7371: NOT
7372: IFFALSE 7376
// exit ;
7374: GO 7521
// if not tmp then
7376: LD_VAR 0 2
7380: NOT
7381: IFFALSE 7472
// begin if not IsInUnit ( doc [ 1 ] ) then
7383: LD_VAR 0 3
7387: PUSH
7388: LD_INT 1
7390: ARRAY
7391: PPUSH
7392: CALL_OW 310
7396: NOT
7397: IFFALSE 7470
// ComEnterUnit ( doc , FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ) ;
7399: LD_VAR 0 3
7403: PPUSH
7404: LD_INT 22
7406: PUSH
7407: LD_INT 3
7409: PUSH
7410: EMPTY
7411: LIST
7412: LIST
7413: PUSH
7414: LD_INT 2
7416: PUSH
7417: LD_INT 30
7419: PUSH
7420: LD_INT 6
7422: PUSH
7423: EMPTY
7424: LIST
7425: LIST
7426: PUSH
7427: LD_INT 30
7429: PUSH
7430: LD_INT 7
7432: PUSH
7433: EMPTY
7434: LIST
7435: LIST
7436: PUSH
7437: LD_INT 30
7439: PUSH
7440: LD_INT 8
7442: PUSH
7443: EMPTY
7444: LIST
7445: LIST
7446: PUSH
7447: EMPTY
7448: LIST
7449: LIST
7450: LIST
7451: LIST
7452: PUSH
7453: EMPTY
7454: LIST
7455: LIST
7456: PPUSH
7457: CALL_OW 69
7461: PUSH
7462: LD_INT 1
7464: ARRAY
7465: PPUSH
7466: CALL_OW 120
// exit ;
7470: GO 7521
// end ; if IsInUnit ( doc [ 1 ] ) then
7472: LD_VAR 0 3
7476: PUSH
7477: LD_INT 1
7479: ARRAY
7480: PPUSH
7481: CALL_OW 310
7485: IFFALSE 7496
// ComExitBuilding ( doc ) ;
7487: LD_VAR 0 3
7491: PPUSH
7492: CALL_OW 122
// wait ( 3 ) ;
7496: LD_INT 3
7498: PPUSH
7499: CALL_OW 67
// ComHeal ( doc , tmp [ 1 ] ) ;
7503: LD_VAR 0 3
7507: PPUSH
7508: LD_VAR 0 2
7512: PUSH
7513: LD_INT 1
7515: ARRAY
7516: PPUSH
7517: CALL_OW 128
// end ;
7521: PPOPN 3
7523: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do var i , tmp , attacking , areas , area ;
7524: LD_INT 22
7526: PUSH
7527: LD_INT 3
7529: PUSH
7530: EMPTY
7531: LIST
7532: LIST
7533: PUSH
7534: LD_INT 25
7536: PUSH
7537: LD_INT 3
7539: PUSH
7540: EMPTY
7541: LIST
7542: LIST
7543: PUSH
7544: EMPTY
7545: LIST
7546: LIST
7547: PPUSH
7548: CALL_OW 69
7552: PUSH
7553: LD_INT 22
7555: PUSH
7556: LD_INT 3
7558: PUSH
7559: EMPTY
7560: LIST
7561: LIST
7562: PUSH
7563: LD_INT 21
7565: PUSH
7566: LD_INT 2
7568: PUSH
7569: EMPTY
7570: LIST
7571: LIST
7572: PUSH
7573: EMPTY
7574: LIST
7575: LIST
7576: PPUSH
7577: CALL_OW 69
7581: AND
7582: IFFALSE 7996
7584: GO 7586
7586: DISABLE
7587: LD_INT 0
7589: PPUSH
7590: PPUSH
7591: PPUSH
7592: PPUSH
7593: PPUSH
// begin enable ;
7594: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
7595: LD_ADDR_VAR 0 2
7599: PUSH
7600: LD_INT 22
7602: PUSH
7603: LD_INT 3
7605: PUSH
7606: EMPTY
7607: LIST
7608: LIST
7609: PUSH
7610: LD_INT 21
7612: PUSH
7613: LD_INT 2
7615: PUSH
7616: EMPTY
7617: LIST
7618: LIST
7619: PUSH
7620: LD_INT 3
7622: PUSH
7623: LD_INT 58
7625: PUSH
7626: EMPTY
7627: LIST
7628: PUSH
7629: EMPTY
7630: LIST
7631: LIST
7632: PUSH
7633: EMPTY
7634: LIST
7635: LIST
7636: LIST
7637: PPUSH
7638: CALL_OW 69
7642: ST_TO_ADDR
// areas := [ sectorAlpha , sectorBeta , sectorDelta , mainBaseArea ] ;
7643: LD_ADDR_VAR 0 4
7647: PUSH
7648: LD_INT 10
7650: PUSH
7651: LD_INT 11
7653: PUSH
7654: LD_INT 12
7656: PUSH
7657: LD_INT 14
7659: PUSH
7660: EMPTY
7661: LIST
7662: LIST
7663: LIST
7664: LIST
7665: ST_TO_ADDR
// area := 0 ;
7666: LD_ADDR_VAR 0 5
7670: PUSH
7671: LD_INT 0
7673: ST_TO_ADDR
// attacking := false ;
7674: LD_ADDR_VAR 0 3
7678: PUSH
7679: LD_INT 0
7681: ST_TO_ADDR
// for i in tmp do
7682: LD_ADDR_VAR 0 1
7686: PUSH
7687: LD_VAR 0 2
7691: PUSH
7692: FOR_IN
7693: IFFALSE 7779
// if GetDistUnits ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) < 10 then
7695: LD_VAR 0 1
7699: PPUSH
7700: LD_INT 22
7702: PUSH
7703: LD_INT 1
7705: PUSH
7706: EMPTY
7707: LIST
7708: LIST
7709: PPUSH
7710: CALL_OW 69
7714: PPUSH
7715: LD_VAR 0 1
7719: PPUSH
7720: CALL_OW 74
7724: PPUSH
7725: CALL_OW 296
7729: PUSH
7730: LD_INT 10
7732: LESS
7733: IFFALSE 7777
// begin ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
7735: LD_VAR 0 1
7739: PPUSH
7740: LD_INT 22
7742: PUSH
7743: LD_INT 1
7745: PUSH
7746: EMPTY
7747: LIST
7748: LIST
7749: PPUSH
7750: CALL_OW 69
7754: PPUSH
7755: LD_VAR 0 1
7759: PPUSH
7760: CALL_OW 74
7764: PPUSH
7765: CALL_OW 115
// attacking := true ;
7769: LD_ADDR_VAR 0 3
7773: PUSH
7774: LD_INT 1
7776: ST_TO_ADDR
// end ;
7777: GO 7692
7779: POP
7780: POP
// if attacking then
7781: LD_VAR 0 3
7785: IFFALSE 7789
// exit ;
7787: GO 7996
// for i in areas do
7789: LD_ADDR_VAR 0 1
7793: PUSH
7794: LD_VAR 0 4
7798: PUSH
7799: FOR_IN
7800: IFFALSE 7837
// if FilterUnitsInArea ( i , [ f_side , 1 ] ) then
7802: LD_VAR 0 1
7806: PPUSH
7807: LD_INT 22
7809: PUSH
7810: LD_INT 1
7812: PUSH
7813: EMPTY
7814: LIST
7815: LIST
7816: PPUSH
7817: CALL_OW 70
7821: IFFALSE 7835
// begin area := i ;
7823: LD_ADDR_VAR 0 5
7827: PUSH
7828: LD_VAR 0 1
7832: ST_TO_ADDR
// break ;
7833: GO 7837
// end ;
7835: GO 7799
7837: POP
7838: POP
// if area then
7839: LD_VAR 0 5
7843: IFFALSE 7996
// begin for i in tmp do
7845: LD_ADDR_VAR 0 1
7849: PUSH
7850: LD_VAR 0 2
7854: PUSH
7855: FOR_IN
7856: IFFALSE 7994
// begin if GetFuel ( i ) < 33 then
7858: LD_VAR 0 1
7862: PPUSH
7863: CALL_OW 261
7867: PUSH
7868: LD_INT 33
7870: LESS
7871: IFFALSE 7885
// SetFuel ( i , 33 ) ;
7873: LD_VAR 0 1
7877: PPUSH
7878: LD_INT 33
7880: PPUSH
7881: CALL_OW 240
// if GetDistUnits ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) < 10 then
7885: LD_VAR 0 1
7889: PPUSH
7890: LD_INT 22
7892: PUSH
7893: LD_INT 1
7895: PUSH
7896: EMPTY
7897: LIST
7898: LIST
7899: PPUSH
7900: CALL_OW 69
7904: PPUSH
7905: LD_VAR 0 1
7909: PPUSH
7910: CALL_OW 74
7914: PPUSH
7915: CALL_OW 296
7919: PUSH
7920: LD_INT 10
7922: LESS
7923: IFFALSE 7961
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) else
7925: LD_VAR 0 1
7929: PPUSH
7930: LD_INT 22
7932: PUSH
7933: LD_INT 1
7935: PUSH
7936: EMPTY
7937: LIST
7938: LIST
7939: PPUSH
7940: CALL_OW 69
7944: PPUSH
7945: LD_VAR 0 1
7949: PPUSH
7950: CALL_OW 74
7954: PPUSH
7955: CALL_OW 115
7959: GO 7992
// if not IsInArea ( i , area ) then
7961: LD_VAR 0 1
7965: PPUSH
7966: LD_VAR 0 5
7970: PPUSH
7971: CALL_OW 308
7975: NOT
7976: IFFALSE 7992
// ComMoveToArea ( i , area ) ;
7978: LD_VAR 0 1
7982: PPUSH
7983: LD_VAR 0 5
7987: PPUSH
7988: CALL_OW 113
// end ;
7992: GO 7855
7994: POP
7995: POP
// end ; end ;
7996: PPOPN 5
7998: END
// every 15 15$00 trigger Difficulty > 1 do var i , j , un , veh , time , count ;
7999: LD_OWVAR 67
8003: PUSH
8004: LD_INT 1
8006: GREATER
8007: IFFALSE 8284
8009: GO 8011
8011: DISABLE
8012: LD_INT 0
8014: PPUSH
8015: PPUSH
8016: PPUSH
8017: PPUSH
8018: PPUSH
8019: PPUSH
// begin uc_side := 3 ;
8020: LD_ADDR_OWVAR 20
8024: PUSH
8025: LD_INT 3
8027: ST_TO_ADDR
// uc_nation := 3 ;
8028: LD_ADDR_OWVAR 21
8032: PUSH
8033: LD_INT 3
8035: ST_TO_ADDR
// time := [ 9 9$00 , 7 7$00 , 6 6$00 ] [ Difficulty ] ;
8036: LD_ADDR_VAR 0 5
8040: PUSH
8041: LD_INT 18900
8043: PUSH
8044: LD_INT 14700
8046: PUSH
8047: LD_INT 12600
8049: PUSH
8050: EMPTY
8051: LIST
8052: LIST
8053: LIST
8054: PUSH
8055: LD_OWVAR 67
8059: ARRAY
8060: ST_TO_ADDR
// count := [ 2 , 2 , 3 ] [ Difficulty ] ;
8061: LD_ADDR_VAR 0 6
8065: PUSH
8066: LD_INT 2
8068: PUSH
8069: LD_INT 2
8071: PUSH
8072: LD_INT 3
8074: PUSH
8075: EMPTY
8076: LIST
8077: LIST
8078: LIST
8079: PUSH
8080: LD_OWVAR 67
8084: ARRAY
8085: ST_TO_ADDR
// for i = 1 to count do
8086: LD_ADDR_VAR 0 1
8090: PUSH
8091: DOUBLE
8092: LD_INT 1
8094: DEC
8095: ST_TO_ADDR
8096: LD_VAR 0 6
8100: PUSH
8101: FOR_TO
8102: IFFALSE 8282
// begin wait ( time ) ;
8104: LD_VAR 0 5
8108: PPUSH
8109: CALL_OW 67
// for j = 1 to rand ( 1 , Difficulty ) do
8113: LD_ADDR_VAR 0 2
8117: PUSH
8118: DOUBLE
8119: LD_INT 1
8121: DEC
8122: ST_TO_ADDR
8123: LD_INT 1
8125: PPUSH
8126: LD_OWVAR 67
8130: PPUSH
8131: CALL_OW 12
8135: PUSH
8136: FOR_TO
8137: IFFALSE 8278
// begin veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 80 ) ;
8139: LD_ADDR_VAR 0 4
8143: PUSH
8144: LD_INT 3
8146: PPUSH
8147: LD_INT 3
8149: PPUSH
8150: LD_INT 22
8152: PPUSH
8153: LD_INT 1
8155: PPUSH
8156: LD_INT 1
8158: PPUSH
8159: LD_INT 43
8161: PUSH
8162: LD_INT 44
8164: PUSH
8165: LD_INT 42
8167: PUSH
8168: EMPTY
8169: LIST
8170: LIST
8171: LIST
8172: PUSH
8173: LD_VAR 0 1
8177: PUSH
8178: LD_INT 3
8180: MOD
8181: PUSH
8182: LD_INT 1
8184: PLUS
8185: ARRAY
8186: PPUSH
8187: LD_INT 80
8189: PPUSH
8190: CALL 500 0 7
8194: ST_TO_ADDR
// PlaceUnitArea ( veh , southArea , false ) ;
8195: LD_VAR 0 4
8199: PPUSH
8200: LD_INT 13
8202: PPUSH
8203: LD_INT 0
8205: PPUSH
8206: CALL_OW 49
// PrepareHuman ( false , 3 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
8210: LD_INT 0
8212: PPUSH
8213: LD_INT 3
8215: PPUSH
8216: LD_INT 4
8218: PUSH
8219: LD_INT 5
8221: PUSH
8222: LD_INT 5
8224: PUSH
8225: EMPTY
8226: LIST
8227: LIST
8228: LIST
8229: PUSH
8230: LD_OWVAR 67
8234: ARRAY
8235: PPUSH
8236: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
8240: CALL_OW 44
8244: PPUSH
8245: LD_VAR 0 4
8249: PPUSH
8250: CALL_OW 52
// wait ( 0 0$01 ) ;
8254: LD_INT 35
8256: PPUSH
8257: CALL_OW 67
// ComMoveXY ( veh , 143 , 143 ) ;
8261: LD_VAR 0 4
8265: PPUSH
8266: LD_INT 143
8268: PPUSH
8269: LD_INT 143
8271: PPUSH
8272: CALL_OW 111
// end ;
8276: GO 8136
8278: POP
8279: POP
// end ;
8280: GO 8101
8282: POP
8283: POP
// end ;
8284: PPOPN 6
8286: END
// every 8 8$00 do var i , un , time ;
8287: GO 8289
8289: DISABLE
8290: LD_INT 0
8292: PPUSH
8293: PPUSH
8294: PPUSH
// begin time := [ 3 3$00 , 1 1$00 , 0 0$30 ] ;
8295: LD_ADDR_VAR 0 3
8299: PUSH
8300: LD_INT 6300
8302: PUSH
8303: LD_INT 2100
8305: PUSH
8306: LD_INT 1050
8308: PUSH
8309: EMPTY
8310: LIST
8311: LIST
8312: LIST
8313: ST_TO_ADDR
// wait ( time ) ;
8314: LD_VAR 0 3
8318: PPUSH
8319: CALL_OW 67
// uc_side := 3 ;
8323: LD_ADDR_OWVAR 20
8327: PUSH
8328: LD_INT 3
8330: ST_TO_ADDR
// uc_nation := 3 ;
8331: LD_ADDR_OWVAR 21
8335: PUSH
8336: LD_INT 3
8338: ST_TO_ADDR
// for i = 1 to 2 do
8339: LD_ADDR_VAR 0 1
8343: PUSH
8344: DOUBLE
8345: LD_INT 1
8347: DEC
8348: ST_TO_ADDR
8349: LD_INT 2
8351: PUSH
8352: FOR_TO
8353: IFFALSE 8416
// begin PrepareHuman ( false , 1 , 4 ) ;
8355: LD_INT 0
8357: PPUSH
8358: LD_INT 1
8360: PPUSH
8361: LD_INT 4
8363: PPUSH
8364: CALL_OW 380
// un := CreateHuman ;
8368: LD_ADDR_VAR 0 2
8372: PUSH
8373: CALL_OW 44
8377: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_dep_main ) ;
8378: LD_VAR 0 2
8382: PPUSH
8383: LD_INT 16
8385: PPUSH
8386: CALL_OW 52
// ComExitBuilding ( un ) ;
8390: LD_VAR 0 2
8394: PPUSH
8395: CALL_OW 122
// AddComAgressiveMove ( un , 41 , 76 ) ;
8399: LD_VAR 0 2
8403: PPUSH
8404: LD_INT 41
8406: PPUSH
8407: LD_INT 76
8409: PPUSH
8410: CALL_OW 174
// end ;
8414: GO 8352
8416: POP
8417: POP
// end ; end_of_file
8418: PPOPN 3
8420: END
// export function Action ; begin
8421: LD_INT 0
8423: PPUSH
// CenterNowOnXY ( 28 , 3 ) ;
8424: LD_INT 28
8426: PPUSH
8427: LD_INT 3
8429: PPUSH
8430: CALL_OW 86
// PlaceSeeing ( 41 , 76 , 1 , 10 ) ;
8434: LD_INT 41
8436: PPUSH
8437: LD_INT 76
8439: PPUSH
8440: LD_INT 1
8442: PPUSH
8443: LD_INT 10
8445: PPUSH
8446: CALL_OW 330
// RemoveSeeing ( 41 , 76 , 1 ) ;
8450: LD_INT 41
8452: PPUSH
8453: LD_INT 76
8455: PPUSH
8456: LD_INT 1
8458: PPUSH
8459: CALL_OW 331
// InGameOn ;
8463: CALL_OW 8
// SayRadio ( Harisson , D2-Har-1 ) ;
8467: LD_EXP 19
8471: PPUSH
8472: LD_STRING D2-Har-1
8474: PPUSH
8475: CALL_OW 94
// InGameOff ;
8479: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
8483: LD_STRING M1
8485: PPUSH
8486: CALL_OW 337
// end ;
8490: LD_VAR 0 1
8494: RET
// every 0 0$1 trigger buildings_counter > 1 do var un ;
8495: LD_EXP 4
8499: PUSH
8500: LD_INT 1
8502: GREATER
8503: IFFALSE 8594
8505: GO 8507
8507: DISABLE
8508: LD_INT 0
8510: PPUSH
// begin un := GetRandom ( sex_male ) [ 1 ] ;
8511: LD_ADDR_VAR 0 1
8515: PUSH
8516: LD_INT 1
8518: PPUSH
8519: CALL 588 0 1
8523: PUSH
8524: LD_INT 1
8526: ARRAY
8527: ST_TO_ADDR
// Say ( un , D2a-Sol1-1 ) ;
8528: LD_VAR 0 1
8532: PPUSH
8533: LD_STRING D2a-Sol1-1
8535: PPUSH
8536: CALL_OW 88
// if not un then
8540: LD_VAR 0 1
8544: NOT
8545: IFFALSE 8576
// begin un := GetRandom ( sex_female ) [ 1 ] ;
8547: LD_ADDR_VAR 0 1
8551: PUSH
8552: LD_INT 2
8554: PPUSH
8555: CALL 588 0 1
8559: PUSH
8560: LD_INT 1
8562: ARRAY
8563: ST_TO_ADDR
// Say ( un , D2a-FSol1-1 ) ;
8564: LD_VAR 0 1
8568: PPUSH
8569: LD_STRING D2a-FSol1-1
8571: PPUSH
8572: CALL_OW 88
// end ; if Khatam then
8576: LD_EXP 17
8580: IFFALSE 8594
// Say ( Khatam , D3b-Khat-3 ) ;
8582: LD_EXP 17
8586: PPUSH
8587: LD_STRING D3b-Khat-3
8589: PPUSH
8590: CALL_OW 88
// end ;
8594: PPOPN 1
8596: END
// every 0 0$1 trigger Frank and not Kikuchi and FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , GetX ( Frank ) , GetY ( Frank ) , 7 ] ] ) and not InBattle ( 1 ) and not InBattle ( 4 ) do var i , ape ;
8597: LD_EXP 15
8601: PUSH
8602: LD_EXP 18
8606: NOT
8607: AND
8608: PUSH
8609: LD_INT 22
8611: PUSH
8612: LD_INT 1
8614: PUSH
8615: EMPTY
8616: LIST
8617: LIST
8618: PUSH
8619: LD_INT 92
8621: PUSH
8622: LD_EXP 15
8626: PPUSH
8627: CALL_OW 250
8631: PUSH
8632: LD_EXP 15
8636: PPUSH
8637: CALL_OW 251
8641: PUSH
8642: LD_INT 7
8644: PUSH
8645: EMPTY
8646: LIST
8647: LIST
8648: LIST
8649: LIST
8650: PUSH
8651: EMPTY
8652: LIST
8653: LIST
8654: PPUSH
8655: CALL_OW 69
8659: AND
8660: PUSH
8661: LD_INT 1
8663: PPUSH
8664: CALL_OW 463
8668: NOT
8669: AND
8670: PUSH
8671: LD_INT 4
8673: PPUSH
8674: CALL_OW 463
8678: NOT
8679: AND
8680: IFFALSE 9267
8682: GO 8684
8684: DISABLE
8685: LD_INT 0
8687: PPUSH
8688: PPUSH
// begin InGameOn ;
8689: CALL_OW 8
// ape := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
8693: LD_ADDR_VAR 0 2
8697: PUSH
8698: LD_INT 22
8700: PUSH
8701: LD_INT 0
8703: PUSH
8704: EMPTY
8705: LIST
8706: LIST
8707: PUSH
8708: LD_INT 25
8710: PUSH
8711: LD_INT 12
8713: PUSH
8714: EMPTY
8715: LIST
8716: LIST
8717: PUSH
8718: EMPTY
8719: LIST
8720: LIST
8721: PPUSH
8722: CALL_OW 69
8726: ST_TO_ADDR
// ape := NearestUnitToUnit ( ape , Frank ) ;
8727: LD_ADDR_VAR 0 2
8731: PUSH
8732: LD_VAR 0 2
8736: PPUSH
8737: LD_EXP 15
8741: PPUSH
8742: CALL_OW 74
8746: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , Frank , 20 ] ] ) do
8747: LD_ADDR_VAR 0 1
8751: PUSH
8752: LD_INT 22
8754: PUSH
8755: LD_INT 1
8757: PUSH
8758: EMPTY
8759: LIST
8760: LIST
8761: PUSH
8762: LD_INT 21
8764: PUSH
8765: LD_INT 1
8767: PUSH
8768: EMPTY
8769: LIST
8770: LIST
8771: PUSH
8772: LD_INT 91
8774: PUSH
8775: LD_EXP 15
8779: PUSH
8780: LD_INT 20
8782: PUSH
8783: EMPTY
8784: LIST
8785: LIST
8786: LIST
8787: PUSH
8788: EMPTY
8789: LIST
8790: LIST
8791: LIST
8792: PPUSH
8793: CALL_OW 69
8797: PUSH
8798: FOR_IN
8799: IFFALSE 8817
// ComTurnUnit ( i , Frank ) ;
8801: LD_VAR 0 1
8805: PPUSH
8806: LD_EXP 15
8810: PPUSH
8811: CALL_OW 119
8815: GO 8798
8817: POP
8818: POP
// SetSide ( Frank , 1 ) ;
8819: LD_EXP 15
8823: PPUSH
8824: LD_INT 1
8826: PPUSH
8827: CALL_OW 235
// ComMoveUnit ( JMM , Frank ) ;
8831: LD_EXP 9
8835: PPUSH
8836: LD_EXP 15
8840: PPUSH
8841: CALL_OW 112
// AddComTurnUnit ( JMM , Frank ) ;
8845: LD_EXP 9
8849: PPUSH
8850: LD_EXP 15
8854: PPUSH
8855: CALL_OW 179
// CenterOnUnits ( Frank ) ;
8859: LD_EXP 15
8863: PPUSH
8864: CALL_OW 85
// Say ( Frank , D3a-Frank-1 ) ;
8868: LD_EXP 15
8872: PPUSH
8873: LD_STRING D3a-Frank-1
8875: PPUSH
8876: CALL_OW 88
// ComMoveXY ( ape , 42 , 78 ) ;
8880: LD_VAR 0 2
8884: PPUSH
8885: LD_INT 42
8887: PPUSH
8888: LD_INT 78
8890: PPUSH
8891: CALL_OW 111
// AddComTurnUnit ( ape , Frank ) ;
8895: LD_VAR 0 2
8899: PPUSH
8900: LD_EXP 15
8904: PPUSH
8905: CALL_OW 179
// if Lisa then
8909: LD_EXP 14
8913: IFFALSE 8927
// Say ( Lisa , D3a-Lisa-1 ) ;
8915: LD_EXP 14
8919: PPUSH
8920: LD_STRING D3a-Lisa-1
8922: PPUSH
8923: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
8927: LD_EXP 9
8931: PPUSH
8932: LD_STRING D3a-JMM-1
8934: PPUSH
8935: CALL_OW 88
// if Cyrus then
8939: LD_EXP 13
8943: IFFALSE 8957
// Say ( Cyrus , D3a-Cyrus-1 ) ;
8945: LD_EXP 13
8949: PPUSH
8950: LD_STRING D3a-Cyrus-1
8952: PPUSH
8953: CALL_OW 88
// if GetRandom ( sex_male ) then
8957: LD_INT 1
8959: PPUSH
8960: CALL 588 0 1
8964: IFFALSE 8985
// Say ( GetRandom ( sex_male ) [ 1 ] , D3a-Sol1-1 ) ;
8966: LD_INT 1
8968: PPUSH
8969: CALL 588 0 1
8973: PUSH
8974: LD_INT 1
8976: ARRAY
8977: PPUSH
8978: LD_STRING D3a-Sol1-1
8980: PPUSH
8981: CALL_OW 88
// if GetRandom ( sex_female ) then
8985: LD_INT 2
8987: PPUSH
8988: CALL 588 0 1
8992: IFFALSE 9013
// Say ( GetRandom ( sex_female ) [ 1 ] , D3a-FSol1-1 ) ;
8994: LD_INT 2
8996: PPUSH
8997: CALL 588 0 1
9001: PUSH
9002: LD_INT 1
9004: ARRAY
9005: PPUSH
9006: LD_STRING D3a-FSol1-1
9008: PPUSH
9009: CALL_OW 88
// if Gladstone then
9013: LD_EXP 16
9017: IFFALSE 9031
// Say ( Gladstone , D3a-Glad-1 ) ;
9019: LD_EXP 16
9023: PPUSH
9024: LD_STRING D3a-Glad-1
9026: PPUSH
9027: CALL_OW 88
// ComMoveXY ( ape , 60 , 113 ) ;
9031: LD_VAR 0 2
9035: PPUSH
9036: LD_INT 60
9038: PPUSH
9039: LD_INT 113
9041: PPUSH
9042: CALL_OW 111
// Say ( Frank , D3a-Frank-2 ) ;
9046: LD_EXP 15
9050: PPUSH
9051: LD_STRING D3a-Frank-2
9053: PPUSH
9054: CALL_OW 88
// ComTurnUnit ( Frank , JMM ) ;
9058: LD_EXP 15
9062: PPUSH
9063: LD_EXP 9
9067: PPUSH
9068: CALL_OW 119
// Say ( JMM , D3a-JMM-2 ) ;
9072: LD_EXP 9
9076: PPUSH
9077: LD_STRING D3a-JMM-2
9079: PPUSH
9080: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9084: LD_INT 1
9086: PPUSH
9087: LD_INT 4
9089: PPUSH
9090: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9094: LD_INT 85
9096: PPUSH
9097: LD_INT 134
9099: PPUSH
9100: CALL_OW 84
// Say ( Frank , D3a-Frank-3 ) ;
9104: LD_EXP 15
9108: PPUSH
9109: LD_STRING D3a-Frank-3
9111: PPUSH
9112: CALL_OW 88
// Wait ( 0 0$01 ) ;
9116: LD_INT 35
9118: PPUSH
9119: CALL_OW 67
// CenterOnXY ( 166 , 136 ) ;
9123: LD_INT 166
9125: PPUSH
9126: LD_INT 136
9128: PPUSH
9129: CALL_OW 84
// Say ( JMM , D3a-JMM-3 ) ;
9133: LD_EXP 9
9137: PPUSH
9138: LD_STRING D3a-JMM-3
9140: PPUSH
9141: CALL_OW 88
// Wait ( 0 0$01 ) ;
9145: LD_INT 35
9147: PPUSH
9148: CALL_OW 67
// CenterNowOnUnits ( Frank ) ;
9152: LD_EXP 15
9156: PPUSH
9157: CALL_OW 87
// Say ( Frank , D3a-Frank-4 ) ;
9161: LD_EXP 15
9165: PPUSH
9166: LD_STRING D3a-Frank-4
9168: PPUSH
9169: CALL_OW 88
// if Lisa then
9173: LD_EXP 14
9177: IFFALSE 9191
// Say ( Lisa , D3a-Lisa-4 ) ;
9179: LD_EXP 14
9183: PPUSH
9184: LD_STRING D3a-Lisa-4
9186: PPUSH
9187: CALL_OW 88
// Say ( JMM , D3a-JMM-4 ) ;
9191: LD_EXP 9
9195: PPUSH
9196: LD_STRING D3a-JMM-4
9198: PPUSH
9199: CALL_OW 88
// Say ( Frank , D3a-Frank-5 ) ;
9203: LD_EXP 15
9207: PPUSH
9208: LD_STRING D3a-Frank-5
9210: PPUSH
9211: CALL_OW 88
// Say ( JMM , D3a-JMM-5 ) ;
9215: LD_EXP 9
9219: PPUSH
9220: LD_STRING D3a-JMM-5
9222: PPUSH
9223: CALL_OW 88
// Say ( Frank , D3a-Frank-6 ) ;
9227: LD_EXP 15
9231: PPUSH
9232: LD_STRING D3a-Frank-6
9234: PPUSH
9235: CALL_OW 88
// Say ( JMM , D3a-JMM-6 ) ;
9239: LD_EXP 9
9243: PPUSH
9244: LD_STRING D3a-JMM-6
9246: PPUSH
9247: CALL_OW 88
// Say ( Frank , D3a-Frank-7 ) ;
9251: LD_EXP 15
9255: PPUSH
9256: LD_STRING D3a-Frank-7
9258: PPUSH
9259: CALL_OW 88
// InGameOff ;
9263: CALL_OW 9
// end ;
9267: PPOPN 2
9269: END
// every 0 0$1 trigger Kikuchi and not Frank and FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , GetX ( Kikuchi ) , GetY ( Kikuchi ) , 7 ] ] ) and not InBattle ( 1 ) and not InBattle ( 4 ) do
9270: LD_EXP 18
9274: PUSH
9275: LD_EXP 15
9279: NOT
9280: AND
9281: PUSH
9282: LD_INT 22
9284: PUSH
9285: LD_INT 1
9287: PUSH
9288: EMPTY
9289: LIST
9290: LIST
9291: PUSH
9292: LD_INT 92
9294: PUSH
9295: LD_EXP 18
9299: PPUSH
9300: CALL_OW 250
9304: PUSH
9305: LD_EXP 18
9309: PPUSH
9310: CALL_OW 251
9314: PUSH
9315: LD_INT 7
9317: PUSH
9318: EMPTY
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: PUSH
9324: EMPTY
9325: LIST
9326: LIST
9327: PPUSH
9328: CALL_OW 69
9332: AND
9333: PUSH
9334: LD_INT 1
9336: PPUSH
9337: CALL_OW 463
9341: NOT
9342: AND
9343: PUSH
9344: LD_INT 4
9346: PPUSH
9347: CALL_OW 463
9351: NOT
9352: AND
9353: IFFALSE 9533
9355: GO 9357
9357: DISABLE
// begin InGameOn ;
9358: CALL_OW 8
// ComTurnUnit ( JMM , Kikuchi ) ;
9362: LD_EXP 9
9366: PPUSH
9367: LD_EXP 18
9371: PPUSH
9372: CALL_OW 119
// ComTurnUnit ( Kikuchi , JMM ) ;
9376: LD_EXP 18
9380: PPUSH
9381: LD_EXP 9
9385: PPUSH
9386: CALL_OW 119
// CenterOnUnits ( Kikuchi ) ;
9390: LD_EXP 18
9394: PPUSH
9395: CALL_OW 85
// Say ( Kikuchi , D3b-Yam-1 ) ;
9399: LD_EXP 18
9403: PPUSH
9404: LD_STRING D3b-Yam-1
9406: PPUSH
9407: CALL_OW 88
// Say ( JMM , D3b-JMM-1 ) ;
9411: LD_EXP 9
9415: PPUSH
9416: LD_STRING D3b-JMM-1
9418: PPUSH
9419: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9423: LD_INT 1
9425: PPUSH
9426: LD_INT 4
9428: PPUSH
9429: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9433: LD_INT 85
9435: PPUSH
9436: LD_INT 134
9438: PPUSH
9439: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-2 ) ;
9443: LD_EXP 18
9447: PPUSH
9448: LD_STRING D3b-Yam-2
9450: PPUSH
9451: CALL_OW 88
// Wait ( 0 0$01 ) ;
9455: LD_INT 35
9457: PPUSH
9458: CALL_OW 67
// Say ( JMM , D3b-JMM-2 ) ;
9462: LD_EXP 9
9466: PPUSH
9467: LD_STRING D3b-JMM-2
9469: PPUSH
9470: CALL_OW 88
// CenterOnXY ( 166 , 136 ) ;
9474: LD_INT 166
9476: PPUSH
9477: LD_INT 136
9479: PPUSH
9480: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-3 ) ;
9484: LD_EXP 18
9488: PPUSH
9489: LD_STRING D3b-Yam-3
9491: PPUSH
9492: CALL_OW 88
// CenterNowOnUnits ( JMM ) ;
9496: LD_EXP 9
9500: PPUSH
9501: CALL_OW 87
// Say ( JMM , D3b-JMM-3a ) ;
9505: LD_EXP 9
9509: PPUSH
9510: LD_STRING D3b-JMM-3a
9512: PPUSH
9513: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
9517: LD_EXP 18
9521: PPUSH
9522: LD_INT 1
9524: PPUSH
9525: CALL_OW 235
// InGameOff ;
9529: CALL_OW 9
// end ;
9533: END
// every 0 0$1 trigger FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var un , x , tw , i ;
9534: LD_INT 7
9536: PPUSH
9537: LD_INT 22
9539: PUSH
9540: LD_INT 1
9542: PUSH
9543: EMPTY
9544: LIST
9545: LIST
9546: PUSH
9547: LD_INT 3
9549: PUSH
9550: LD_INT 24
9552: PUSH
9553: LD_INT 1000
9555: PUSH
9556: EMPTY
9557: LIST
9558: LIST
9559: PUSH
9560: EMPTY
9561: LIST
9562: LIST
9563: PUSH
9564: EMPTY
9565: LIST
9566: LIST
9567: PPUSH
9568: CALL_OW 70
9572: IFFALSE 10028
9574: GO 9576
9576: DISABLE
9577: LD_INT 0
9579: PPUSH
9580: PPUSH
9581: PPUSH
9582: PPUSH
// begin repeat wait ( 0 0$1 ) ;
9583: LD_INT 35
9585: PPUSH
9586: CALL_OW 67
// un := FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
9590: LD_ADDR_VAR 0 1
9594: PUSH
9595: LD_INT 7
9597: PPUSH
9598: LD_INT 22
9600: PUSH
9601: LD_INT 1
9603: PUSH
9604: EMPTY
9605: LIST
9606: LIST
9607: PUSH
9608: LD_INT 3
9610: PUSH
9611: LD_INT 24
9613: PUSH
9614: LD_INT 1000
9616: PUSH
9617: EMPTY
9618: LIST
9619: LIST
9620: PUSH
9621: EMPTY
9622: LIST
9623: LIST
9624: PUSH
9625: EMPTY
9626: LIST
9627: LIST
9628: PPUSH
9629: CALL_OW 70
9633: ST_TO_ADDR
// if not un then
9634: LD_VAR 0 1
9638: NOT
9639: IFFALSE 9643
// continue ;
9641: GO 9583
// tw := NearbyTowerHasEnergy ( un [ 1 ] ) ;
9643: LD_ADDR_VAR 0 3
9647: PUSH
9648: LD_VAR 0 1
9652: PUSH
9653: LD_INT 1
9655: ARRAY
9656: PPUSH
9657: CALL 2016 0 1
9661: ST_TO_ADDR
// until tw ;
9662: LD_VAR 0 3
9666: IFFALSE 9583
// DialogueOn ;
9668: CALL_OW 6
// CenterNowOnUnits ( tw ) ;
9672: LD_VAR 0 3
9676: PPUSH
9677: CALL_OW 87
// if Lisa then
9681: LD_EXP 14
9685: IFFALSE 9713
// begin Say ( Lisa , D5-Lisa-1 ) ;
9687: LD_EXP 14
9691: PPUSH
9692: LD_STRING D5-Lisa-1
9694: PPUSH
9695: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
9699: LD_EXP 9
9703: PPUSH
9704: LD_STRING D5-JMM-1a
9706: PPUSH
9707: CALL_OW 88
// end else
9711: GO 9725
// Say ( JMM , D5-JMM-1 ) ;
9713: LD_EXP 9
9717: PPUSH
9718: LD_STRING D5-JMM-1
9720: PPUSH
9721: CALL_OW 88
// DialogueOff ;
9725: CALL_OW 7
// while ( true ) do
9729: LD_INT 1
9731: IFFALSE 9787
// begin wait ( 0 0$01 ) ;
9733: LD_INT 35
9735: PPUSH
9736: CALL_OW 67
// x := FilterUnitsExceptArea ( northElectro , [ [ f_btype , b_oil_power ] , [ f_see , 1 ] ] ) ;
9740: LD_ADDR_VAR 0 2
9744: PUSH
9745: LD_INT 8
9747: PPUSH
9748: LD_INT 30
9750: PUSH
9751: LD_INT 26
9753: PUSH
9754: EMPTY
9755: LIST
9756: LIST
9757: PUSH
9758: LD_INT 101
9760: PUSH
9761: LD_INT 1
9763: PUSH
9764: EMPTY
9765: LIST
9766: LIST
9767: PUSH
9768: EMPTY
9769: LIST
9770: LIST
9771: PPUSH
9772: CALL_OW 71
9776: ST_TO_ADDR
// if x then
9777: LD_VAR 0 2
9781: IFFALSE 9785
// break ;
9783: GO 9787
// end ;
9785: GO 9729
// CenterOnUnits ( x [ 1 ] ) ;
9787: LD_VAR 0 2
9791: PUSH
9792: LD_INT 1
9794: ARRAY
9795: PPUSH
9796: CALL_OW 85
// if Frank and GetSide ( Frank ) = 1 then
9800: LD_EXP 15
9804: PUSH
9805: LD_EXP 15
9809: PPUSH
9810: CALL_OW 255
9814: PUSH
9815: LD_INT 1
9817: EQUAL
9818: AND
9819: IFFALSE 9835
// Say ( Frank , D5a-Frank-1 ) else
9821: LD_EXP 15
9825: PPUSH
9826: LD_STRING D5a-Frank-1
9828: PPUSH
9829: CALL_OW 88
9833: GO 9889
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
9835: LD_EXP 18
9839: PUSH
9840: LD_EXP 18
9844: PPUSH
9845: CALL_OW 255
9849: PUSH
9850: LD_INT 1
9852: EQUAL
9853: AND
9854: IFFALSE 9870
// Say ( Kikuchi , D5a-Yam-1 ) else
9856: LD_EXP 18
9860: PPUSH
9861: LD_STRING D5a-Yam-1
9863: PPUSH
9864: CALL_OW 88
9868: GO 9889
// Say ( GetRandom ( sex_male ) [ 1 ] , D5a-Sol1-1 ) ;
9870: LD_INT 1
9872: PPUSH
9873: CALL 588 0 1
9877: PUSH
9878: LD_INT 1
9880: ARRAY
9881: PPUSH
9882: LD_STRING D5a-Sol1-1
9884: PPUSH
9885: CALL_OW 88
// Say ( JMM , D5a-JMM-1 ) ;
9889: LD_EXP 9
9893: PPUSH
9894: LD_STRING D5a-JMM-1
9896: PPUSH
9897: CALL_OW 88
// if Cyrus then
9901: LD_EXP 13
9905: IFFALSE 9919
// Say ( Cyrus , D5a-Cyrus-1 ) ;
9907: LD_EXP 13
9911: PPUSH
9912: LD_STRING D5a-Cyrus-1
9914: PPUSH
9915: CALL_OW 88
// x := false ;
9919: LD_ADDR_VAR 0 2
9923: PUSH
9924: LD_INT 0
9926: ST_TO_ADDR
// while ( true ) do
9927: LD_INT 1
9929: IFFALSE 10016
// begin wait ( 0 0$01 ) ;
9931: LD_INT 35
9933: PPUSH
9934: CALL_OW 67
// for i in FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) diff ru_dep_west do
9938: LD_ADDR_VAR 0 4
9942: PUSH
9943: LD_INT 2
9945: PUSH
9946: LD_INT 30
9948: PUSH
9949: LD_INT 0
9951: PUSH
9952: EMPTY
9953: LIST
9954: LIST
9955: PUSH
9956: LD_INT 30
9958: PUSH
9959: LD_INT 1
9961: PUSH
9962: EMPTY
9963: LIST
9964: LIST
9965: PUSH
9966: EMPTY
9967: LIST
9968: LIST
9969: LIST
9970: PPUSH
9971: CALL_OW 69
9975: PUSH
9976: LD_INT 1
9978: DIFF
9979: PUSH
9980: FOR_IN
9981: IFFALSE 10004
// if BaseNeedEnergy ( i ) then
9983: LD_VAR 0 4
9987: PPUSH
9988: CALL 1141 0 1
9992: IFFALSE 10002
// x := true ;
9994: LD_ADDR_VAR 0 2
9998: PUSH
9999: LD_INT 1
10001: ST_TO_ADDR
10002: GO 9980
10004: POP
10005: POP
// if x then
10006: LD_VAR 0 2
10010: IFFALSE 10014
// break ;
10012: GO 10016
// end ;
10014: GO 9927
// Say ( JMM , D5b-JMM-1 ) ;
10016: LD_EXP 9
10020: PPUSH
10021: LD_STRING D5b-JMM-1
10023: PPUSH
10024: CALL_OW 88
// end ;
10028: PPOPN 4
10030: END
// every 0 0$1 trigger time_to_end [ 1 ] < tick do
10031: LD_EXP 5
10035: PUSH
10036: LD_INT 1
10038: ARRAY
10039: PUSH
10040: LD_OWVAR 1
10044: LESS
10045: IFFALSE 10245
10047: GO 10049
10049: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10050: LD_INT 16
10052: PPUSH
10053: CALL_OW 301
10057: NOT
10058: IFFALSE 10081
// begin SayRadio ( Harisson , D3b-Har-3 ) ;
10060: LD_EXP 19
10064: PPUSH
10065: LD_STRING D3b-Har-3
10067: PPUSH
10068: CALL_OW 94
// ChangeMissionObjectives ( M2a ) ;
10072: LD_STRING M2a
10074: PPUSH
10075: CALL_OW 337
// end else
10079: GO 10100
// begin SayRadio ( Harisson , D3b-Har-3a ) ;
10081: LD_EXP 19
10085: PPUSH
10086: LD_STRING D3b-Har-3a
10088: PPUSH
10089: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
10093: LD_STRING M2
10095: PPUSH
10096: CALL_OW 337
// end ; can_end := true ;
10100: LD_ADDR_EXP 6
10104: PUSH
10105: LD_INT 1
10107: ST_TO_ADDR
// SetAreaMapShow ( endArea , 1 ) ;
10108: LD_INT 9
10110: PPUSH
10111: LD_INT 1
10113: PPUSH
10114: CALL_OW 424
// Wait ( 0 0$02 ) ;
10118: LD_INT 70
10120: PPUSH
10121: CALL_OW 67
// if Lisa then
10125: LD_EXP 14
10129: IFFALSE 10143
// Say ( Lisa , D3b-Lisa ) ;
10131: LD_EXP 14
10135: PPUSH
10136: LD_STRING D3b-Lisa
10138: PPUSH
10139: CALL_OW 88
// if Bobby then
10143: LD_EXP 12
10147: IFFALSE 10161
// Say ( Bobby , D3b-Bobby-3 ) ;
10149: LD_EXP 12
10153: PPUSH
10154: LD_STRING D3b-Bobby-3
10156: PPUSH
10157: CALL_OW 88
// if Cyrus then
10161: LD_EXP 13
10165: IFFALSE 10179
// Say ( Cyrus , D3b-Cyrus-3 ) ;
10167: LD_EXP 13
10171: PPUSH
10172: LD_STRING D3b-Cyrus-3
10174: PPUSH
10175: CALL_OW 88
// if Frank and GetSide ( Frank ) = 1 then
10179: LD_EXP 15
10183: PUSH
10184: LD_EXP 15
10188: PPUSH
10189: CALL_OW 255
10193: PUSH
10194: LD_INT 1
10196: EQUAL
10197: AND
10198: IFFALSE 10212
// Say ( Frank , D3b-Frank-3 ) ;
10200: LD_EXP 15
10204: PPUSH
10205: LD_STRING D3b-Frank-3
10207: PPUSH
10208: CALL_OW 88
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
10212: LD_EXP 18
10216: PUSH
10217: LD_EXP 18
10221: PPUSH
10222: CALL_OW 255
10226: PUSH
10227: LD_INT 1
10229: EQUAL
10230: AND
10231: IFFALSE 10245
// Say ( Kikuchi , D3b-Yam-4 ) ;
10233: LD_EXP 18
10237: PPUSH
10238: LD_STRING D3b-Yam-4
10240: PPUSH
10241: CALL_OW 88
// end ;
10245: END
// every 0 0$1 trigger time_to_end [ 2 ] < tick do
10246: LD_EXP 5
10250: PUSH
10251: LD_INT 2
10253: ARRAY
10254: PUSH
10255: LD_OWVAR 1
10259: LESS
10260: IFFALSE 10292
10262: GO 10264
10264: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
10265: LD_EXP 19
10269: PPUSH
10270: LD_STRING D4-Har-1
10272: PPUSH
10273: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
10277: LD_STRING M3
10279: PPUSH
10280: CALL_OW 337
// must_end := true ;
10284: LD_ADDR_EXP 7
10288: PUSH
10289: LD_INT 1
10291: ST_TO_ADDR
// end ;
10292: END
// every 0 0$01 trigger time_to_end [ 3 ] < tick do
10293: LD_EXP 5
10297: PUSH
10298: LD_INT 3
10300: ARRAY
10301: PUSH
10302: LD_OWVAR 1
10306: LESS
10307: IFFALSE 10338
10309: GO 10311
10311: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10312: LD_INT 16
10314: PPUSH
10315: CALL_OW 301
10319: NOT
10320: IFFALSE 10331
// YouLost ( TimeOut1 ) else
10322: LD_STRING TimeOut1
10324: PPUSH
10325: CALL_OW 104
10329: GO 10338
// YouLost ( TimeOut2 ) ;
10331: LD_STRING TimeOut2
10333: PPUSH
10334: CALL_OW 104
// end ;
10338: END
// every 0 0$1 trigger IsInArea ( JMM , endArea ) and can_end do var wait_on , i , tmp , m1 , m2 , m3 ;
10339: LD_EXP 9
10343: PPUSH
10344: LD_INT 9
10346: PPUSH
10347: CALL_OW 308
10351: PUSH
10352: LD_EXP 6
10356: AND
10357: IFFALSE 11457
10359: GO 10361
10361: DISABLE
10362: LD_INT 0
10364: PPUSH
10365: PPUSH
10366: PPUSH
10367: PPUSH
10368: PPUSH
10369: PPUSH
// begin wait_on := false ;
10370: LD_ADDR_VAR 0 1
10374: PUSH
10375: LD_INT 0
10377: ST_TO_ADDR
// if FilterPeople ( 1 ) + 0 > ( FilterPeopleArea ( 1 , endArea ) ^ FilterDriversArea ( 1 , endArea ) ) + 0 then
10378: LD_INT 1
10380: PPUSH
10381: CALL 1218 0 1
10385: PUSH
10386: LD_INT 0
10388: PLUS
10389: PUSH
10390: LD_INT 1
10392: PPUSH
10393: LD_INT 9
10395: PPUSH
10396: CALL 1309 0 2
10400: PUSH
10401: LD_INT 1
10403: PPUSH
10404: LD_INT 9
10406: PPUSH
10407: CALL 1356 0 2
10411: ADD
10412: PUSH
10413: LD_INT 0
10415: PLUS
10416: GREATER
10417: IFFALSE 10466
// case Query ( Q1 ) of 1 :
10419: LD_STRING Q1
10421: PPUSH
10422: CALL_OW 97
10426: PUSH
10427: LD_INT 1
10429: DOUBLE
10430: EQUAL
10431: IFTRUE 10435
10433: GO 10446
10435: POP
// wait_on := true ; 2 :
10436: LD_ADDR_VAR 0 1
10440: PUSH
10441: LD_INT 1
10443: ST_TO_ADDR
10444: GO 10466
10446: LD_INT 2
10448: DOUBLE
10449: EQUAL
10450: IFTRUE 10454
10452: GO 10465
10454: POP
// wait_on := false ; end ;
10455: LD_ADDR_VAR 0 1
10459: PUSH
10460: LD_INT 0
10462: ST_TO_ADDR
10463: GO 10466
10465: POP
// repeat wait ( 0 0$01 ) ;
10466: LD_INT 35
10468: PPUSH
10469: CALL_OW 67
// until ( not wait_on ) or ( FilterPeople ( 1 ) + 0 ) = ( FilterPeopleArea ( 1 , endArea ) ^ FilterDriversArea ( 1 , endArea ) ) + 0 ;
10473: LD_VAR 0 1
10477: NOT
10478: PUSH
10479: LD_INT 1
10481: PPUSH
10482: CALL 1218 0 1
10486: PUSH
10487: LD_INT 0
10489: PLUS
10490: PUSH
10491: LD_INT 1
10493: PPUSH
10494: LD_INT 9
10496: PPUSH
10497: CALL 1309 0 2
10501: PUSH
10502: LD_INT 1
10504: PPUSH
10505: LD_INT 9
10507: PPUSH
10508: CALL 1356 0 2
10512: ADD
10513: PUSH
10514: LD_INT 0
10516: PLUS
10517: EQUAL
10518: OR
10519: IFFALSE 10466
// DialogueOn ;
10521: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
10525: LD_EXP 9
10529: PPUSH
10530: CALL_OW 87
// Say ( JMM , D6-JMM-1 ) ;
10534: LD_EXP 9
10538: PPUSH
10539: LD_STRING D6-JMM-1
10541: PPUSH
10542: CALL_OW 88
// SayRadio ( Harisson , D6-Har-1 ) ;
10546: LD_EXP 19
10550: PPUSH
10551: LD_STRING D6-Har-1
10553: PPUSH
10554: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
10558: LD_EXP 9
10562: PPUSH
10563: LD_STRING D6-JMM-2
10565: PPUSH
10566: CALL_OW 88
// SayRadio ( Harisson , D6-Har-2 ) ;
10570: LD_EXP 19
10574: PPUSH
10575: LD_STRING D6-Har-2
10577: PPUSH
10578: CALL_OW 94
// Say ( JMM , D6-JMM-3 ) ;
10582: LD_EXP 9
10586: PPUSH
10587: LD_STRING D6-JMM-3
10589: PPUSH
10590: CALL_OW 88
// SayRadio ( Harisson , D6-Har-3 ) ;
10594: LD_EXP 19
10598: PPUSH
10599: LD_STRING D6-Har-3
10601: PPUSH
10602: CALL_OW 94
// Say ( JMM , D6-JMM-4 ) ;
10606: LD_EXP 9
10610: PPUSH
10611: LD_STRING D6-JMM-4
10613: PPUSH
10614: CALL_OW 88
// SayRadio ( Harisson , D6-Har-4 ) ;
10618: LD_EXP 19
10622: PPUSH
10623: LD_STRING D6-Har-4
10625: PPUSH
10626: CALL_OW 94
// Say ( JMM , D6-JMM-5 ) ;
10630: LD_EXP 9
10634: PPUSH
10635: LD_STRING D6-JMM-5
10637: PPUSH
10638: CALL_OW 88
// DialogueOff ;
10642: CALL_OW 7
// m1 := false ;
10646: LD_ADDR_VAR 0 4
10650: PUSH
10651: LD_INT 0
10653: ST_TO_ADDR
// m2 := false ;
10654: LD_ADDR_VAR 0 5
10658: PUSH
10659: LD_INT 0
10661: ST_TO_ADDR
// m3 := false ;
10662: LD_ADDR_VAR 0 6
10666: PUSH
10667: LD_INT 0
10669: ST_TO_ADDR
// tmp := FilterBuildings ( 3 ) ;
10670: LD_ADDR_VAR 0 3
10674: PUSH
10675: LD_INT 3
10677: PPUSH
10678: CALL 1487 0 1
10682: ST_TO_ADDR
// if tmp >= 35 then
10683: LD_VAR 0 3
10687: PUSH
10688: LD_INT 35
10690: GREATEREQUAL
10691: IFFALSE 10728
// begin AddMedal ( Destroy1 , - 1 ) ;
10693: LD_STRING Destroy1
10695: PPUSH
10696: LD_INT 1
10698: NEG
10699: PPUSH
10700: CALL_OW 101
// AddMedal ( Destroy2 , - 1 ) ;
10704: LD_STRING Destroy2
10706: PPUSH
10707: LD_INT 1
10709: NEG
10710: PPUSH
10711: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
10715: LD_STRING Destroy3
10717: PPUSH
10718: LD_INT 1
10720: NEG
10721: PPUSH
10722: CALL_OW 101
// end else
10726: GO 10839
// begin AddMedal ( Destroy1 , 1 ) ;
10728: LD_STRING Destroy1
10730: PPUSH
10731: LD_INT 1
10733: PPUSH
10734: CALL_OW 101
// m1 := true ;
10738: LD_ADDR_VAR 0 4
10742: PUSH
10743: LD_INT 1
10745: ST_TO_ADDR
// if tmp >= 25 then
10746: LD_VAR 0 3
10750: PUSH
10751: LD_INT 25
10753: GREATEREQUAL
10754: IFFALSE 10780
// begin AddMedal ( Destroy2 , - 1 ) ;
10756: LD_STRING Destroy2
10758: PPUSH
10759: LD_INT 1
10761: NEG
10762: PPUSH
10763: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
10767: LD_STRING Destroy3
10769: PPUSH
10770: LD_INT 1
10772: NEG
10773: PPUSH
10774: CALL_OW 101
// end else
10778: GO 10839
// begin AddMedal ( Destroy2 , 1 ) ;
10780: LD_STRING Destroy2
10782: PPUSH
10783: LD_INT 1
10785: PPUSH
10786: CALL_OW 101
// m2 := true ;
10790: LD_ADDR_VAR 0 5
10794: PUSH
10795: LD_INT 1
10797: ST_TO_ADDR
// if tmp >= 15 then
10798: LD_VAR 0 3
10802: PUSH
10803: LD_INT 15
10805: GREATEREQUAL
10806: IFFALSE 10821
// AddMedal ( Destroy3 , - 1 ) else
10808: LD_STRING Destroy3
10810: PPUSH
10811: LD_INT 1
10813: NEG
10814: PPUSH
10815: CALL_OW 101
10819: GO 10839
// begin AddMedal ( Destroy3 , 1 ) ;
10821: LD_STRING Destroy3
10823: PPUSH
10824: LD_INT 1
10826: PPUSH
10827: CALL_OW 101
// m3 := true ;
10831: LD_ADDR_VAR 0 6
10835: PUSH
10836: LD_INT 1
10838: ST_TO_ADDR
// end ; end ; end ; if tick <= 32 32$00 then
10839: LD_OWVAR 1
10843: PUSH
10844: LD_INT 67200
10846: LESSEQUAL
10847: IFFALSE 10856
// SetAchievement ( ACH_ASPEED_7 ) ;
10849: LD_STRING ACH_ASPEED_7
10851: PPUSH
10852: CALL_OW 543
// if m1 and m2 and m3 and Difficulty = 3 then
10856: LD_VAR 0 4
10860: PUSH
10861: LD_VAR 0 5
10865: AND
10866: PUSH
10867: LD_VAR 0 6
10871: AND
10872: PUSH
10873: LD_OWVAR 67
10877: PUSH
10878: LD_INT 3
10880: EQUAL
10881: AND
10882: IFFALSE 10894
// SetAchievementEX ( ACH_AMER , 7 ) ;
10884: LD_STRING ACH_AMER
10886: PPUSH
10887: LD_INT 7
10889: PPUSH
10890: CALL_OW 564
// GiveMedals ( MAIN ) ;
10894: LD_STRING MAIN
10896: PPUSH
10897: CALL_OW 102
// tmp := FilterPeopleArea ( 1 , endArea ) union FilterDriversArea ( 1 , endArea ) ;
10901: LD_ADDR_VAR 0 3
10905: PUSH
10906: LD_INT 1
10908: PPUSH
10909: LD_INT 9
10911: PPUSH
10912: CALL 1309 0 2
10916: PUSH
10917: LD_INT 1
10919: PPUSH
10920: LD_INT 9
10922: PPUSH
10923: CALL 1356 0 2
10927: UNION
10928: ST_TO_ADDR
// RewardPeople ( tmp ) ;
10929: LD_VAR 0 3
10933: PPUSH
10934: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
10938: LD_EXP 9
10942: PPUSH
10943: LD_EXP 3
10947: PUSH
10948: LD_STRING JMM
10950: STR
10951: PPUSH
10952: CALL_OW 38
// if Brown in tmp then
10956: LD_EXP 10
10960: PUSH
10961: LD_VAR 0 3
10965: IN
10966: IFFALSE 10986
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
10968: LD_EXP 10
10972: PPUSH
10973: LD_EXP 3
10977: PUSH
10978: LD_STRING Brown
10980: STR
10981: PPUSH
10982: CALL_OW 38
// if Donaldson in tmp then
10986: LD_EXP 11
10990: PUSH
10991: LD_VAR 0 3
10995: IN
10996: IFFALSE 11016
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
10998: LD_EXP 11
11002: PPUSH
11003: LD_EXP 3
11007: PUSH
11008: LD_STRING Donaldson
11010: STR
11011: PPUSH
11012: CALL_OW 38
// if Bobby in tmp then
11016: LD_EXP 12
11020: PUSH
11021: LD_VAR 0 3
11025: IN
11026: IFFALSE 11046
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
11028: LD_EXP 12
11032: PPUSH
11033: LD_EXP 3
11037: PUSH
11038: LD_STRING Bobby
11040: STR
11041: PPUSH
11042: CALL_OW 38
// if Cyrus in tmp then
11046: LD_EXP 13
11050: PUSH
11051: LD_VAR 0 3
11055: IN
11056: IFFALSE 11076
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
11058: LD_EXP 13
11062: PPUSH
11063: LD_EXP 3
11067: PUSH
11068: LD_STRING Cyrus
11070: STR
11071: PPUSH
11072: CALL_OW 38
// if Lisa in tmp then
11076: LD_EXP 14
11080: PUSH
11081: LD_VAR 0 3
11085: IN
11086: IFFALSE 11106
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
11088: LD_EXP 14
11092: PPUSH
11093: LD_EXP 3
11097: PUSH
11098: LD_STRING Lisa
11100: STR
11101: PPUSH
11102: CALL_OW 38
// if Frank in tmp then
11106: LD_EXP 15
11110: PUSH
11111: LD_VAR 0 3
11115: IN
11116: IFFALSE 11136
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
11118: LD_EXP 15
11122: PPUSH
11123: LD_EXP 3
11127: PUSH
11128: LD_STRING Frank
11130: STR
11131: PPUSH
11132: CALL_OW 38
// if Gladstone in tmp then
11136: LD_EXP 16
11140: PUSH
11141: LD_VAR 0 3
11145: IN
11146: IFFALSE 11166
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
11148: LD_EXP 16
11152: PPUSH
11153: LD_EXP 3
11157: PUSH
11158: LD_STRING Gladstone
11160: STR
11161: PPUSH
11162: CALL_OW 38
// if Khatam in tmp then
11166: LD_EXP 17
11170: PUSH
11171: LD_VAR 0 3
11175: IN
11176: IFFALSE 11196
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
11178: LD_EXP 17
11182: PPUSH
11183: LD_EXP 3
11187: PUSH
11188: LD_STRING Khatam
11190: STR
11191: PPUSH
11192: CALL_OW 38
// if Kikuchi in tmp then
11196: LD_EXP 18
11200: PUSH
11201: LD_VAR 0 3
11205: IN
11206: IFFALSE 11226
// SaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
11208: LD_EXP 18
11212: PPUSH
11213: LD_EXP 3
11217: PUSH
11218: LD_STRING Kikuchi
11220: STR
11221: PPUSH
11222: CALL_OW 38
// SaveCharacters ( tmp diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] , mission_prefix & others ) ;
11226: LD_VAR 0 3
11230: PUSH
11231: LD_EXP 9
11235: PUSH
11236: LD_EXP 10
11240: PUSH
11241: LD_EXP 11
11245: PUSH
11246: LD_EXP 12
11250: PUSH
11251: LD_EXP 13
11255: PUSH
11256: LD_EXP 14
11260: PUSH
11261: LD_EXP 15
11265: PUSH
11266: LD_EXP 16
11270: PUSH
11271: LD_EXP 18
11275: PUSH
11276: LD_EXP 17
11280: PUSH
11281: EMPTY
11282: LIST
11283: LIST
11284: LIST
11285: LIST
11286: LIST
11287: LIST
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: DIFF
11293: PPUSH
11294: LD_EXP 3
11298: PUSH
11299: LD_STRING others
11301: STR
11302: PPUSH
11303: CALL_OW 38
// SaveVariable ( tick , 07_time ) ;
11307: LD_OWVAR 1
11311: PPUSH
11312: LD_STRING 07_time
11314: PPUSH
11315: CALL_OW 39
// tmp := [ ] ;
11319: LD_ADDR_VAR 0 3
11323: PUSH
11324: EMPTY
11325: ST_TO_ADDR
// for i in FilterUnitsInArea ( endArea , [ [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] ] ] ) do
11326: LD_ADDR_VAR 0 2
11330: PUSH
11331: LD_INT 9
11333: PPUSH
11334: LD_INT 22
11336: PUSH
11337: LD_INT 1
11339: PUSH
11340: EMPTY
11341: LIST
11342: LIST
11343: PUSH
11344: LD_INT 23
11346: PUSH
11347: LD_INT 1
11349: PUSH
11350: EMPTY
11351: LIST
11352: LIST
11353: PUSH
11354: LD_INT 21
11356: PUSH
11357: LD_INT 2
11359: PUSH
11360: EMPTY
11361: LIST
11362: LIST
11363: PUSH
11364: EMPTY
11365: LIST
11366: LIST
11367: LIST
11368: PUSH
11369: EMPTY
11370: LIST
11371: PPUSH
11372: CALL_OW 70
11376: PUSH
11377: FOR_IN
11378: IFFALSE 11439
// tmp := tmp ^ [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ;
11380: LD_ADDR_VAR 0 3
11384: PUSH
11385: LD_VAR 0 3
11389: PUSH
11390: LD_VAR 0 2
11394: PPUSH
11395: CALL_OW 265
11399: PUSH
11400: LD_VAR 0 2
11404: PPUSH
11405: CALL_OW 262
11409: PUSH
11410: LD_VAR 0 2
11414: PPUSH
11415: CALL_OW 263
11419: PUSH
11420: LD_VAR 0 2
11424: PPUSH
11425: CALL_OW 264
11429: PUSH
11430: EMPTY
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: ADD
11436: ST_TO_ADDR
11437: GO 11377
11439: POP
11440: POP
// SaveVariable ( tmp , 07_vehicles ) ;
11441: LD_VAR 0 3
11445: PPUSH
11446: LD_STRING 07_vehicles
11448: PPUSH
11449: CALL_OW 39
// YouWin ;
11453: CALL_OW 103
// end ; end_of_file
11457: PPOPN 6
11459: END
// on UnitDestroyed ( un ) do begin if un = JMM then
11460: LD_VAR 0 1
11464: PUSH
11465: LD_EXP 9
11469: EQUAL
11470: IFFALSE 11479
// YouLost ( JMM ) ;
11472: LD_STRING JMM
11474: PPUSH
11475: CALL_OW 104
// if GetType ( un ) = unit_building then
11479: LD_VAR 0 1
11483: PPUSH
11484: CALL_OW 247
11488: PUSH
11489: LD_INT 3
11491: EQUAL
11492: IFFALSE 11508
// buildings_counter := buildings_counter + 1 ;
11494: LD_ADDR_EXP 4
11498: PUSH
11499: LD_EXP 4
11503: PUSH
11504: LD_INT 1
11506: PLUS
11507: ST_TO_ADDR
// if un in FilterUnitsInArea ( baseArea , [ f_or , [ f_btype , b_turret ] , [ f_btype , b_bunker ] ] ) then
11508: LD_VAR 0 1
11512: PUSH
11513: LD_INT 6
11515: PPUSH
11516: LD_INT 2
11518: PUSH
11519: LD_INT 30
11521: PUSH
11522: LD_INT 33
11524: PUSH
11525: EMPTY
11526: LIST
11527: LIST
11528: PUSH
11529: LD_INT 30
11531: PUSH
11532: LD_INT 32
11534: PUSH
11535: EMPTY
11536: LIST
11537: LIST
11538: PUSH
11539: EMPTY
11540: LIST
11541: LIST
11542: LIST
11543: PPUSH
11544: CALL_OW 70
11548: IN
11549: IFFALSE 11608
// ru_rebuild_list := ru_rebuild_list ^ [ GetBType ( un ) , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ;
11551: LD_ADDR_EXP 20
11555: PUSH
11556: LD_EXP 20
11560: PUSH
11561: LD_VAR 0 1
11565: PPUSH
11566: CALL_OW 266
11570: PUSH
11571: LD_VAR 0 1
11575: PPUSH
11576: CALL_OW 250
11580: PUSH
11581: LD_VAR 0 1
11585: PPUSH
11586: CALL_OW 251
11590: PUSH
11591: LD_VAR 0 1
11595: PPUSH
11596: CALL_OW 254
11600: PUSH
11601: EMPTY
11602: LIST
11603: LIST
11604: LIST
11605: LIST
11606: ADD
11607: ST_TO_ADDR
// if un = ru_dep_main then
11608: LD_VAR 0 1
11612: PUSH
11613: LD_INT 16
11615: EQUAL
11616: IFFALSE 11625
// ChangeMissionObjectives ( M1a ) ;
11618: LD_STRING M1a
11620: PPUSH
11621: CALL_OW 337
// if GetType ( un ) = unit_human and GetSide ( un ) = 3 then
11625: LD_VAR 0 1
11629: PPUSH
11630: CALL_OW 247
11634: PUSH
11635: LD_INT 1
11637: EQUAL
11638: PUSH
11639: LD_VAR 0 1
11643: PPUSH
11644: CALL_OW 255
11648: PUSH
11649: LD_INT 3
11651: EQUAL
11652: AND
11653: IFFALSE 11669
// kill_counter := kill_counter + 1 ;
11655: LD_ADDR_EXP 8
11659: PUSH
11660: LD_EXP 8
11664: PUSH
11665: LD_INT 1
11667: PLUS
11668: ST_TO_ADDR
// end ;
11669: PPOPN 1
11671: END
// on UnitGoesToRed ( un ) do begin if GetBType ( un ) = b_bunker and GetTag ( un ) = 7 then
11672: LD_VAR 0 1
11676: PPUSH
11677: CALL_OW 266
11681: PUSH
11682: LD_INT 32
11684: EQUAL
11685: PUSH
11686: LD_VAR 0 1
11690: PPUSH
11691: CALL_OW 110
11695: PUSH
11696: LD_INT 7
11698: EQUAL
11699: AND
11700: IFFALSE 11714
// SetTag ( un , 0 ) ;
11702: LD_VAR 0 1
11706: PPUSH
11707: LD_INT 0
11709: PPUSH
11710: CALL_OW 109
// end ;
11714: PPOPN 1
11716: END
// on BuildingStarted ( b , builder ) do var i ;
11717: LD_INT 0
11719: PPUSH
// begin if GetSide ( b ) = 3 then
11720: LD_VAR 0 1
11724: PPUSH
11725: CALL_OW 255
11729: PUSH
11730: LD_INT 3
11732: EQUAL
11733: IFFALSE 11773
// for i = 1 to 4 do
11735: LD_ADDR_VAR 0 3
11739: PUSH
11740: DOUBLE
11741: LD_INT 1
11743: DEC
11744: ST_TO_ADDR
11745: LD_INT 4
11747: PUSH
11748: FOR_TO
11749: IFFALSE 11771
// ru_rebuild_list := Delete ( ru_rebuild_list , 1 ) ;
11751: LD_ADDR_EXP 20
11755: PUSH
11756: LD_EXP 20
11760: PPUSH
11761: LD_INT 1
11763: PPUSH
11764: CALL_OW 3
11768: ST_TO_ADDR
11769: GO 11748
11771: POP
11772: POP
// end ;
11773: PPOPN 3
11775: END
// on BuildingComplete ( b ) do if GetBType ( b ) in [ b_bunker , b_turret ] then
11776: LD_VAR 0 1
11780: PPUSH
11781: CALL_OW 266
11785: PUSH
11786: LD_INT 32
11788: PUSH
11789: LD_INT 33
11791: PUSH
11792: EMPTY
11793: LIST
11794: LIST
11795: IN
11796: IFFALSE 11810
// ComPlaceWeapon ( b , ru_gatling_gun ) ;
11798: LD_VAR 0 1
11802: PPUSH
11803: LD_INT 43
11805: PPUSH
11806: CALL_OW 148
11810: PPOPN 1
11812: END
// on LeaveBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
11813: LD_VAR 0 1
11817: PUSH
11818: LD_INT 22
11820: PUSH
11821: LD_INT 3
11823: PUSH
11824: EMPTY
11825: LIST
11826: LIST
11827: PUSH
11828: LD_INT 2
11830: PUSH
11831: LD_INT 30
11833: PUSH
11834: LD_INT 31
11836: PUSH
11837: EMPTY
11838: LIST
11839: LIST
11840: PUSH
11841: LD_INT 30
11843: PUSH
11844: LD_INT 32
11846: PUSH
11847: EMPTY
11848: LIST
11849: LIST
11850: PUSH
11851: EMPTY
11852: LIST
11853: LIST
11854: LIST
11855: PUSH
11856: EMPTY
11857: LIST
11858: LIST
11859: PPUSH
11860: CALL_OW 69
11864: IN
11865: IFFALSE 11887
// GoToAnotherTower ( un , b , 143 , 143 ) ;
11867: LD_VAR 0 2
11871: PPUSH
11872: LD_VAR 0 1
11876: PPUSH
11877: LD_INT 143
11879: PPUSH
11880: LD_INT 143
11882: PPUSH
11883: CALL 818 0 4
// end ;
11887: PPOPN 2
11889: END
// on EnterBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) then
11890: LD_VAR 0 1
11894: PUSH
11895: LD_INT 22
11897: PUSH
11898: LD_INT 3
11900: PUSH
11901: EMPTY
11902: LIST
11903: LIST
11904: PUSH
11905: LD_INT 30
11907: PUSH
11908: LD_INT 32
11910: PUSH
11911: EMPTY
11912: LIST
11913: LIST
11914: PUSH
11915: EMPTY
11916: LIST
11917: LIST
11918: PPUSH
11919: CALL_OW 69
11923: IN
11924: IFFALSE 11938
// SetTag ( b , 0 ) ;
11926: LD_VAR 0 1
11930: PPUSH
11931: LD_INT 0
11933: PPUSH
11934: CALL_OW 109
// end ; end_of_file
11938: PPOPN 2
11940: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
11941: LD_INT 0
11943: PPUSH
// ar_crane := 88 ;
11944: LD_ADDR_EXP 27
11948: PUSH
11949: LD_INT 88
11951: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
11952: LD_ADDR_EXP 22
11956: PUSH
11957: LD_INT 89
11959: ST_TO_ADDR
// us_hack := 99 ;
11960: LD_ADDR_EXP 23
11964: PUSH
11965: LD_INT 99
11967: ST_TO_ADDR
// us_artillery := 97 ;
11968: LD_ADDR_EXP 24
11972: PUSH
11973: LD_INT 97
11975: ST_TO_ADDR
// ar_bio_bomb := 91 ;
11976: LD_ADDR_EXP 25
11980: PUSH
11981: LD_INT 91
11983: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
11984: LD_ADDR_EXP 26
11988: PUSH
11989: LD_INT 92
11991: ST_TO_ADDR
// ru_radar := 98 ;
11992: LD_ADDR_EXP 21
11996: PUSH
11997: LD_INT 98
11999: ST_TO_ADDR
// tech_Artillery := 80 ;
12000: LD_ADDR_EXP 28
12004: PUSH
12005: LD_INT 80
12007: ST_TO_ADDR
// tech_RadMat := 81 ;
12008: LD_ADDR_EXP 29
12012: PUSH
12013: LD_INT 81
12015: ST_TO_ADDR
// tech_BasicTools := 82 ;
12016: LD_ADDR_EXP 30
12020: PUSH
12021: LD_INT 82
12023: ST_TO_ADDR
// tech_Cargo := 83 ;
12024: LD_ADDR_EXP 31
12028: PUSH
12029: LD_INT 83
12031: ST_TO_ADDR
// tech_Track := 84 ;
12032: LD_ADDR_EXP 32
12036: PUSH
12037: LD_INT 84
12039: ST_TO_ADDR
// tech_Crane := 85 ;
12040: LD_ADDR_EXP 33
12044: PUSH
12045: LD_INT 85
12047: ST_TO_ADDR
// tech_Bulldozer := 86 ;
12048: LD_ADDR_EXP 34
12052: PUSH
12053: LD_INT 86
12055: ST_TO_ADDR
// tech_Hovercraft := 87 ;
12056: LD_ADDR_EXP 35
12060: PUSH
12061: LD_INT 87
12063: ST_TO_ADDR
// end ;
12064: LD_VAR 0 1
12068: RET
// every 1 do
12069: GO 12071
12071: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
12072: CALL 11941 0 0
12076: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
12077: LD_VAR 0 2
12081: PUSH
12082: LD_INT 100
12084: EQUAL
12085: IFFALSE 13034
// begin if not StreamModeActive then
12087: LD_EXP 36
12091: NOT
12092: IFFALSE 12102
// StreamModeActive := true ;
12094: LD_ADDR_EXP 36
12098: PUSH
12099: LD_INT 1
12101: ST_TO_ADDR
// if p3 = 0 then
12102: LD_VAR 0 3
12106: PUSH
12107: LD_INT 0
12109: EQUAL
12110: IFFALSE 12116
// InitStreamMode ;
12112: CALL 13192 0 0
// if p3 = 1 then
12116: LD_VAR 0 3
12120: PUSH
12121: LD_INT 1
12123: EQUAL
12124: IFFALSE 12134
// sRocket := true ;
12126: LD_ADDR_EXP 41
12130: PUSH
12131: LD_INT 1
12133: ST_TO_ADDR
// if p3 = 2 then
12134: LD_VAR 0 3
12138: PUSH
12139: LD_INT 2
12141: EQUAL
12142: IFFALSE 12152
// sSpeed := true ;
12144: LD_ADDR_EXP 40
12148: PUSH
12149: LD_INT 1
12151: ST_TO_ADDR
// if p3 = 3 then
12152: LD_VAR 0 3
12156: PUSH
12157: LD_INT 3
12159: EQUAL
12160: IFFALSE 12170
// sEngine := true ;
12162: LD_ADDR_EXP 42
12166: PUSH
12167: LD_INT 1
12169: ST_TO_ADDR
// if p3 = 4 then
12170: LD_VAR 0 3
12174: PUSH
12175: LD_INT 4
12177: EQUAL
12178: IFFALSE 12188
// sSpec := true ;
12180: LD_ADDR_EXP 39
12184: PUSH
12185: LD_INT 1
12187: ST_TO_ADDR
// if p3 = 5 then
12188: LD_VAR 0 3
12192: PUSH
12193: LD_INT 5
12195: EQUAL
12196: IFFALSE 12206
// sLevel := true ;
12198: LD_ADDR_EXP 43
12202: PUSH
12203: LD_INT 1
12205: ST_TO_ADDR
// if p3 = 6 then
12206: LD_VAR 0 3
12210: PUSH
12211: LD_INT 6
12213: EQUAL
12214: IFFALSE 12224
// sArmoury := true ;
12216: LD_ADDR_EXP 44
12220: PUSH
12221: LD_INT 1
12223: ST_TO_ADDR
// if p3 = 7 then
12224: LD_VAR 0 3
12228: PUSH
12229: LD_INT 7
12231: EQUAL
12232: IFFALSE 12242
// sRadar := true ;
12234: LD_ADDR_EXP 45
12238: PUSH
12239: LD_INT 1
12241: ST_TO_ADDR
// if p3 = 8 then
12242: LD_VAR 0 3
12246: PUSH
12247: LD_INT 8
12249: EQUAL
12250: IFFALSE 12260
// sBunker := true ;
12252: LD_ADDR_EXP 46
12256: PUSH
12257: LD_INT 1
12259: ST_TO_ADDR
// if p3 = 9 then
12260: LD_VAR 0 3
12264: PUSH
12265: LD_INT 9
12267: EQUAL
12268: IFFALSE 12278
// sHack := true ;
12270: LD_ADDR_EXP 47
12274: PUSH
12275: LD_INT 1
12277: ST_TO_ADDR
// if p3 = 10 then
12278: LD_VAR 0 3
12282: PUSH
12283: LD_INT 10
12285: EQUAL
12286: IFFALSE 12296
// sFire := true ;
12288: LD_ADDR_EXP 48
12292: PUSH
12293: LD_INT 1
12295: ST_TO_ADDR
// if p3 = 11 then
12296: LD_VAR 0 3
12300: PUSH
12301: LD_INT 11
12303: EQUAL
12304: IFFALSE 12314
// sRefresh := true ;
12306: LD_ADDR_EXP 49
12310: PUSH
12311: LD_INT 1
12313: ST_TO_ADDR
// if p3 = 12 then
12314: LD_VAR 0 3
12318: PUSH
12319: LD_INT 12
12321: EQUAL
12322: IFFALSE 12332
// sExp := true ;
12324: LD_ADDR_EXP 50
12328: PUSH
12329: LD_INT 1
12331: ST_TO_ADDR
// if p3 = 13 then
12332: LD_VAR 0 3
12336: PUSH
12337: LD_INT 13
12339: EQUAL
12340: IFFALSE 12350
// sDepot := true ;
12342: LD_ADDR_EXP 51
12346: PUSH
12347: LD_INT 1
12349: ST_TO_ADDR
// if p3 = 14 then
12350: LD_VAR 0 3
12354: PUSH
12355: LD_INT 14
12357: EQUAL
12358: IFFALSE 12368
// sFlag := true ;
12360: LD_ADDR_EXP 52
12364: PUSH
12365: LD_INT 1
12367: ST_TO_ADDR
// if p3 = 15 then
12368: LD_VAR 0 3
12372: PUSH
12373: LD_INT 15
12375: EQUAL
12376: IFFALSE 12386
// sKamikadze := true ;
12378: LD_ADDR_EXP 60
12382: PUSH
12383: LD_INT 1
12385: ST_TO_ADDR
// if p3 = 16 then
12386: LD_VAR 0 3
12390: PUSH
12391: LD_INT 16
12393: EQUAL
12394: IFFALSE 12404
// sTroll := true ;
12396: LD_ADDR_EXP 61
12400: PUSH
12401: LD_INT 1
12403: ST_TO_ADDR
// if p3 = 17 then
12404: LD_VAR 0 3
12408: PUSH
12409: LD_INT 17
12411: EQUAL
12412: IFFALSE 12422
// sSlow := true ;
12414: LD_ADDR_EXP 62
12418: PUSH
12419: LD_INT 1
12421: ST_TO_ADDR
// if p3 = 18 then
12422: LD_VAR 0 3
12426: PUSH
12427: LD_INT 18
12429: EQUAL
12430: IFFALSE 12440
// sLack := true ;
12432: LD_ADDR_EXP 63
12436: PUSH
12437: LD_INT 1
12439: ST_TO_ADDR
// if p3 = 19 then
12440: LD_VAR 0 3
12444: PUSH
12445: LD_INT 19
12447: EQUAL
12448: IFFALSE 12458
// sTank := true ;
12450: LD_ADDR_EXP 65
12454: PUSH
12455: LD_INT 1
12457: ST_TO_ADDR
// if p3 = 20 then
12458: LD_VAR 0 3
12462: PUSH
12463: LD_INT 20
12465: EQUAL
12466: IFFALSE 12476
// sRemote := true ;
12468: LD_ADDR_EXP 66
12472: PUSH
12473: LD_INT 1
12475: ST_TO_ADDR
// if p3 = 21 then
12476: LD_VAR 0 3
12480: PUSH
12481: LD_INT 21
12483: EQUAL
12484: IFFALSE 12494
// sPowell := true ;
12486: LD_ADDR_EXP 67
12490: PUSH
12491: LD_INT 1
12493: ST_TO_ADDR
// if p3 = 22 then
12494: LD_VAR 0 3
12498: PUSH
12499: LD_INT 22
12501: EQUAL
12502: IFFALSE 12512
// sTeleport := true ;
12504: LD_ADDR_EXP 70
12508: PUSH
12509: LD_INT 1
12511: ST_TO_ADDR
// if p3 = 23 then
12512: LD_VAR 0 3
12516: PUSH
12517: LD_INT 23
12519: EQUAL
12520: IFFALSE 12530
// sOilTower := true ;
12522: LD_ADDR_EXP 72
12526: PUSH
12527: LD_INT 1
12529: ST_TO_ADDR
// if p3 = 24 then
12530: LD_VAR 0 3
12534: PUSH
12535: LD_INT 24
12537: EQUAL
12538: IFFALSE 12548
// sShovel := true ;
12540: LD_ADDR_EXP 73
12544: PUSH
12545: LD_INT 1
12547: ST_TO_ADDR
// if p3 = 25 then
12548: LD_VAR 0 3
12552: PUSH
12553: LD_INT 25
12555: EQUAL
12556: IFFALSE 12566
// sSheik := true ;
12558: LD_ADDR_EXP 74
12562: PUSH
12563: LD_INT 1
12565: ST_TO_ADDR
// if p3 = 26 then
12566: LD_VAR 0 3
12570: PUSH
12571: LD_INT 26
12573: EQUAL
12574: IFFALSE 12584
// sEarthquake := true ;
12576: LD_ADDR_EXP 76
12580: PUSH
12581: LD_INT 1
12583: ST_TO_ADDR
// if p3 = 27 then
12584: LD_VAR 0 3
12588: PUSH
12589: LD_INT 27
12591: EQUAL
12592: IFFALSE 12602
// sAI := true ;
12594: LD_ADDR_EXP 77
12598: PUSH
12599: LD_INT 1
12601: ST_TO_ADDR
// if p3 = 28 then
12602: LD_VAR 0 3
12606: PUSH
12607: LD_INT 28
12609: EQUAL
12610: IFFALSE 12620
// sCargo := true ;
12612: LD_ADDR_EXP 80
12616: PUSH
12617: LD_INT 1
12619: ST_TO_ADDR
// if p3 = 29 then
12620: LD_VAR 0 3
12624: PUSH
12625: LD_INT 29
12627: EQUAL
12628: IFFALSE 12638
// sDLaser := true ;
12630: LD_ADDR_EXP 81
12634: PUSH
12635: LD_INT 1
12637: ST_TO_ADDR
// if p3 = 30 then
12638: LD_VAR 0 3
12642: PUSH
12643: LD_INT 30
12645: EQUAL
12646: IFFALSE 12656
// sExchange := true ;
12648: LD_ADDR_EXP 82
12652: PUSH
12653: LD_INT 1
12655: ST_TO_ADDR
// if p3 = 31 then
12656: LD_VAR 0 3
12660: PUSH
12661: LD_INT 31
12663: EQUAL
12664: IFFALSE 12674
// sFac := true ;
12666: LD_ADDR_EXP 83
12670: PUSH
12671: LD_INT 1
12673: ST_TO_ADDR
// if p3 = 32 then
12674: LD_VAR 0 3
12678: PUSH
12679: LD_INT 32
12681: EQUAL
12682: IFFALSE 12692
// sPower := true ;
12684: LD_ADDR_EXP 84
12688: PUSH
12689: LD_INT 1
12691: ST_TO_ADDR
// if p3 = 33 then
12692: LD_VAR 0 3
12696: PUSH
12697: LD_INT 33
12699: EQUAL
12700: IFFALSE 12710
// sRandom := true ;
12702: LD_ADDR_EXP 85
12706: PUSH
12707: LD_INT 1
12709: ST_TO_ADDR
// if p3 = 34 then
12710: LD_VAR 0 3
12714: PUSH
12715: LD_INT 34
12717: EQUAL
12718: IFFALSE 12728
// sShield := true ;
12720: LD_ADDR_EXP 86
12724: PUSH
12725: LD_INT 1
12727: ST_TO_ADDR
// if p3 = 35 then
12728: LD_VAR 0 3
12732: PUSH
12733: LD_INT 35
12735: EQUAL
12736: IFFALSE 12746
// sTime := true ;
12738: LD_ADDR_EXP 87
12742: PUSH
12743: LD_INT 1
12745: ST_TO_ADDR
// if p3 = 36 then
12746: LD_VAR 0 3
12750: PUSH
12751: LD_INT 36
12753: EQUAL
12754: IFFALSE 12764
// sTools := true ;
12756: LD_ADDR_EXP 88
12760: PUSH
12761: LD_INT 1
12763: ST_TO_ADDR
// if p3 = 101 then
12764: LD_VAR 0 3
12768: PUSH
12769: LD_INT 101
12771: EQUAL
12772: IFFALSE 12782
// sSold := true ;
12774: LD_ADDR_EXP 53
12778: PUSH
12779: LD_INT 1
12781: ST_TO_ADDR
// if p3 = 102 then
12782: LD_VAR 0 3
12786: PUSH
12787: LD_INT 102
12789: EQUAL
12790: IFFALSE 12800
// sDiff := true ;
12792: LD_ADDR_EXP 54
12796: PUSH
12797: LD_INT 1
12799: ST_TO_ADDR
// if p3 = 103 then
12800: LD_VAR 0 3
12804: PUSH
12805: LD_INT 103
12807: EQUAL
12808: IFFALSE 12818
// sFog := true ;
12810: LD_ADDR_EXP 57
12814: PUSH
12815: LD_INT 1
12817: ST_TO_ADDR
// if p3 = 104 then
12818: LD_VAR 0 3
12822: PUSH
12823: LD_INT 104
12825: EQUAL
12826: IFFALSE 12836
// sReset := true ;
12828: LD_ADDR_EXP 58
12832: PUSH
12833: LD_INT 1
12835: ST_TO_ADDR
// if p3 = 105 then
12836: LD_VAR 0 3
12840: PUSH
12841: LD_INT 105
12843: EQUAL
12844: IFFALSE 12854
// sSun := true ;
12846: LD_ADDR_EXP 59
12850: PUSH
12851: LD_INT 1
12853: ST_TO_ADDR
// if p3 = 106 then
12854: LD_VAR 0 3
12858: PUSH
12859: LD_INT 106
12861: EQUAL
12862: IFFALSE 12872
// sTiger := true ;
12864: LD_ADDR_EXP 55
12868: PUSH
12869: LD_INT 1
12871: ST_TO_ADDR
// if p3 = 107 then
12872: LD_VAR 0 3
12876: PUSH
12877: LD_INT 107
12879: EQUAL
12880: IFFALSE 12890
// sBomb := true ;
12882: LD_ADDR_EXP 56
12886: PUSH
12887: LD_INT 1
12889: ST_TO_ADDR
// if p3 = 108 then
12890: LD_VAR 0 3
12894: PUSH
12895: LD_INT 108
12897: EQUAL
12898: IFFALSE 12908
// sWound := true ;
12900: LD_ADDR_EXP 64
12904: PUSH
12905: LD_INT 1
12907: ST_TO_ADDR
// if p3 = 109 then
12908: LD_VAR 0 3
12912: PUSH
12913: LD_INT 109
12915: EQUAL
12916: IFFALSE 12926
// sBetray := true ;
12918: LD_ADDR_EXP 68
12922: PUSH
12923: LD_INT 1
12925: ST_TO_ADDR
// if p3 = 110 then
12926: LD_VAR 0 3
12930: PUSH
12931: LD_INT 110
12933: EQUAL
12934: IFFALSE 12944
// sContamin := true ;
12936: LD_ADDR_EXP 69
12940: PUSH
12941: LD_INT 1
12943: ST_TO_ADDR
// if p3 = 111 then
12944: LD_VAR 0 3
12948: PUSH
12949: LD_INT 111
12951: EQUAL
12952: IFFALSE 12962
// sOil := true ;
12954: LD_ADDR_EXP 71
12958: PUSH
12959: LD_INT 1
12961: ST_TO_ADDR
// if p3 = 112 then
12962: LD_VAR 0 3
12966: PUSH
12967: LD_INT 112
12969: EQUAL
12970: IFFALSE 12980
// sStu := true ;
12972: LD_ADDR_EXP 75
12976: PUSH
12977: LD_INT 1
12979: ST_TO_ADDR
// if p3 = 113 then
12980: LD_VAR 0 3
12984: PUSH
12985: LD_INT 113
12987: EQUAL
12988: IFFALSE 12998
// sBazooka := true ;
12990: LD_ADDR_EXP 78
12994: PUSH
12995: LD_INT 1
12997: ST_TO_ADDR
// if p3 = 114 then
12998: LD_VAR 0 3
13002: PUSH
13003: LD_INT 114
13005: EQUAL
13006: IFFALSE 13016
// sMortar := true ;
13008: LD_ADDR_EXP 79
13012: PUSH
13013: LD_INT 1
13015: ST_TO_ADDR
// if p3 = 115 then
13016: LD_VAR 0 3
13020: PUSH
13021: LD_INT 115
13023: EQUAL
13024: IFFALSE 13034
// sRanger := true ;
13026: LD_ADDR_EXP 89
13030: PUSH
13031: LD_INT 1
13033: ST_TO_ADDR
// end ; if p2 = 101 then
13034: LD_VAR 0 2
13038: PUSH
13039: LD_INT 101
13041: EQUAL
13042: IFFALSE 13170
// begin case p3 of 1 :
13044: LD_VAR 0 3
13048: PUSH
13049: LD_INT 1
13051: DOUBLE
13052: EQUAL
13053: IFTRUE 13057
13055: GO 13064
13057: POP
// hHackUnlimitedResources ; 2 :
13058: CALL 24205 0 0
13062: GO 13170
13064: LD_INT 2
13066: DOUBLE
13067: EQUAL
13068: IFTRUE 13072
13070: GO 13079
13072: POP
// hHackSetLevel10 ; 3 :
13073: CALL 24338 0 0
13077: GO 13170
13079: LD_INT 3
13081: DOUBLE
13082: EQUAL
13083: IFTRUE 13087
13085: GO 13094
13087: POP
// hHackSetLevel10YourUnits ; 4 :
13088: CALL 24423 0 0
13092: GO 13170
13094: LD_INT 4
13096: DOUBLE
13097: EQUAL
13098: IFTRUE 13102
13100: GO 13109
13102: POP
// hHackInvincible ; 5 :
13103: CALL 24871 0 0
13107: GO 13170
13109: LD_INT 5
13111: DOUBLE
13112: EQUAL
13113: IFTRUE 13117
13115: GO 13124
13117: POP
// hHackInvisible ; 6 :
13118: CALL 24982 0 0
13122: GO 13170
13124: LD_INT 6
13126: DOUBLE
13127: EQUAL
13128: IFTRUE 13132
13130: GO 13139
13132: POP
// hHackChangeYourSide ; 7 :
13133: CALL 25039 0 0
13137: GO 13170
13139: LD_INT 7
13141: DOUBLE
13142: EQUAL
13143: IFTRUE 13147
13145: GO 13154
13147: POP
// hHackChangeUnitSide ; 8 :
13148: CALL 25081 0 0
13152: GO 13170
13154: LD_INT 8
13156: DOUBLE
13157: EQUAL
13158: IFTRUE 13162
13160: GO 13169
13162: POP
// hHackFog ; end ;
13163: CALL 25182 0 0
13167: GO 13170
13169: POP
// end ; end ;
13170: PPOPN 6
13172: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
13173: GO 13175
13175: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
13176: LD_STRING initStreamRollete();
13178: PPUSH
13179: CALL_OW 559
// InitStreamMode ;
13183: CALL 13192 0 0
// DefineStreamItems ( ) ;
13187: CALL 13632 0 0
// end ;
13191: END
// function InitStreamMode ; begin
13192: LD_INT 0
13194: PPUSH
// streamModeActive := false ;
13195: LD_ADDR_EXP 36
13199: PUSH
13200: LD_INT 0
13202: ST_TO_ADDR
// normalCounter := 36 ;
13203: LD_ADDR_EXP 37
13207: PUSH
13208: LD_INT 36
13210: ST_TO_ADDR
// hardcoreCounter := 16 ;
13211: LD_ADDR_EXP 38
13215: PUSH
13216: LD_INT 16
13218: ST_TO_ADDR
// sRocket := false ;
13219: LD_ADDR_EXP 41
13223: PUSH
13224: LD_INT 0
13226: ST_TO_ADDR
// sSpeed := false ;
13227: LD_ADDR_EXP 40
13231: PUSH
13232: LD_INT 0
13234: ST_TO_ADDR
// sEngine := false ;
13235: LD_ADDR_EXP 42
13239: PUSH
13240: LD_INT 0
13242: ST_TO_ADDR
// sSpec := false ;
13243: LD_ADDR_EXP 39
13247: PUSH
13248: LD_INT 0
13250: ST_TO_ADDR
// sLevel := false ;
13251: LD_ADDR_EXP 43
13255: PUSH
13256: LD_INT 0
13258: ST_TO_ADDR
// sArmoury := false ;
13259: LD_ADDR_EXP 44
13263: PUSH
13264: LD_INT 0
13266: ST_TO_ADDR
// sRadar := false ;
13267: LD_ADDR_EXP 45
13271: PUSH
13272: LD_INT 0
13274: ST_TO_ADDR
// sBunker := false ;
13275: LD_ADDR_EXP 46
13279: PUSH
13280: LD_INT 0
13282: ST_TO_ADDR
// sHack := false ;
13283: LD_ADDR_EXP 47
13287: PUSH
13288: LD_INT 0
13290: ST_TO_ADDR
// sFire := false ;
13291: LD_ADDR_EXP 48
13295: PUSH
13296: LD_INT 0
13298: ST_TO_ADDR
// sRefresh := false ;
13299: LD_ADDR_EXP 49
13303: PUSH
13304: LD_INT 0
13306: ST_TO_ADDR
// sExp := false ;
13307: LD_ADDR_EXP 50
13311: PUSH
13312: LD_INT 0
13314: ST_TO_ADDR
// sDepot := false ;
13315: LD_ADDR_EXP 51
13319: PUSH
13320: LD_INT 0
13322: ST_TO_ADDR
// sFlag := false ;
13323: LD_ADDR_EXP 52
13327: PUSH
13328: LD_INT 0
13330: ST_TO_ADDR
// sKamikadze := false ;
13331: LD_ADDR_EXP 60
13335: PUSH
13336: LD_INT 0
13338: ST_TO_ADDR
// sTroll := false ;
13339: LD_ADDR_EXP 61
13343: PUSH
13344: LD_INT 0
13346: ST_TO_ADDR
// sSlow := false ;
13347: LD_ADDR_EXP 62
13351: PUSH
13352: LD_INT 0
13354: ST_TO_ADDR
// sLack := false ;
13355: LD_ADDR_EXP 63
13359: PUSH
13360: LD_INT 0
13362: ST_TO_ADDR
// sTank := false ;
13363: LD_ADDR_EXP 65
13367: PUSH
13368: LD_INT 0
13370: ST_TO_ADDR
// sRemote := false ;
13371: LD_ADDR_EXP 66
13375: PUSH
13376: LD_INT 0
13378: ST_TO_ADDR
// sPowell := false ;
13379: LD_ADDR_EXP 67
13383: PUSH
13384: LD_INT 0
13386: ST_TO_ADDR
// sTeleport := false ;
13387: LD_ADDR_EXP 70
13391: PUSH
13392: LD_INT 0
13394: ST_TO_ADDR
// sOilTower := false ;
13395: LD_ADDR_EXP 72
13399: PUSH
13400: LD_INT 0
13402: ST_TO_ADDR
// sShovel := false ;
13403: LD_ADDR_EXP 73
13407: PUSH
13408: LD_INT 0
13410: ST_TO_ADDR
// sSheik := false ;
13411: LD_ADDR_EXP 74
13415: PUSH
13416: LD_INT 0
13418: ST_TO_ADDR
// sEarthquake := false ;
13419: LD_ADDR_EXP 76
13423: PUSH
13424: LD_INT 0
13426: ST_TO_ADDR
// sAI := false ;
13427: LD_ADDR_EXP 77
13431: PUSH
13432: LD_INT 0
13434: ST_TO_ADDR
// sCargo := false ;
13435: LD_ADDR_EXP 80
13439: PUSH
13440: LD_INT 0
13442: ST_TO_ADDR
// sDLaser := false ;
13443: LD_ADDR_EXP 81
13447: PUSH
13448: LD_INT 0
13450: ST_TO_ADDR
// sExchange := false ;
13451: LD_ADDR_EXP 82
13455: PUSH
13456: LD_INT 0
13458: ST_TO_ADDR
// sFac := false ;
13459: LD_ADDR_EXP 83
13463: PUSH
13464: LD_INT 0
13466: ST_TO_ADDR
// sPower := false ;
13467: LD_ADDR_EXP 84
13471: PUSH
13472: LD_INT 0
13474: ST_TO_ADDR
// sRandom := false ;
13475: LD_ADDR_EXP 85
13479: PUSH
13480: LD_INT 0
13482: ST_TO_ADDR
// sShield := false ;
13483: LD_ADDR_EXP 86
13487: PUSH
13488: LD_INT 0
13490: ST_TO_ADDR
// sTime := false ;
13491: LD_ADDR_EXP 87
13495: PUSH
13496: LD_INT 0
13498: ST_TO_ADDR
// sTools := false ;
13499: LD_ADDR_EXP 88
13503: PUSH
13504: LD_INT 0
13506: ST_TO_ADDR
// sSold := false ;
13507: LD_ADDR_EXP 53
13511: PUSH
13512: LD_INT 0
13514: ST_TO_ADDR
// sDiff := false ;
13515: LD_ADDR_EXP 54
13519: PUSH
13520: LD_INT 0
13522: ST_TO_ADDR
// sFog := false ;
13523: LD_ADDR_EXP 57
13527: PUSH
13528: LD_INT 0
13530: ST_TO_ADDR
// sReset := false ;
13531: LD_ADDR_EXP 58
13535: PUSH
13536: LD_INT 0
13538: ST_TO_ADDR
// sSun := false ;
13539: LD_ADDR_EXP 59
13543: PUSH
13544: LD_INT 0
13546: ST_TO_ADDR
// sTiger := false ;
13547: LD_ADDR_EXP 55
13551: PUSH
13552: LD_INT 0
13554: ST_TO_ADDR
// sBomb := false ;
13555: LD_ADDR_EXP 56
13559: PUSH
13560: LD_INT 0
13562: ST_TO_ADDR
// sWound := false ;
13563: LD_ADDR_EXP 64
13567: PUSH
13568: LD_INT 0
13570: ST_TO_ADDR
// sBetray := false ;
13571: LD_ADDR_EXP 68
13575: PUSH
13576: LD_INT 0
13578: ST_TO_ADDR
// sContamin := false ;
13579: LD_ADDR_EXP 69
13583: PUSH
13584: LD_INT 0
13586: ST_TO_ADDR
// sOil := false ;
13587: LD_ADDR_EXP 71
13591: PUSH
13592: LD_INT 0
13594: ST_TO_ADDR
// sStu := false ;
13595: LD_ADDR_EXP 75
13599: PUSH
13600: LD_INT 0
13602: ST_TO_ADDR
// sBazooka := false ;
13603: LD_ADDR_EXP 78
13607: PUSH
13608: LD_INT 0
13610: ST_TO_ADDR
// sMortar := false ;
13611: LD_ADDR_EXP 79
13615: PUSH
13616: LD_INT 0
13618: ST_TO_ADDR
// sRanger := false ;
13619: LD_ADDR_EXP 89
13623: PUSH
13624: LD_INT 0
13626: ST_TO_ADDR
// end ;
13627: LD_VAR 0 1
13631: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
13632: LD_INT 0
13634: PPUSH
13635: PPUSH
13636: PPUSH
13637: PPUSH
13638: PPUSH
// result := [ ] ;
13639: LD_ADDR_VAR 0 1
13643: PUSH
13644: EMPTY
13645: ST_TO_ADDR
// if campaign_id = 1 then
13646: LD_OWVAR 69
13650: PUSH
13651: LD_INT 1
13653: EQUAL
13654: IFFALSE 16592
// begin case mission_number of 1 :
13656: LD_OWVAR 70
13660: PUSH
13661: LD_INT 1
13663: DOUBLE
13664: EQUAL
13665: IFTRUE 13669
13667: GO 13733
13669: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
13670: LD_ADDR_VAR 0 1
13674: PUSH
13675: LD_INT 2
13677: PUSH
13678: LD_INT 4
13680: PUSH
13681: LD_INT 11
13683: PUSH
13684: LD_INT 12
13686: PUSH
13687: LD_INT 15
13689: PUSH
13690: LD_INT 16
13692: PUSH
13693: LD_INT 22
13695: PUSH
13696: LD_INT 23
13698: PUSH
13699: LD_INT 26
13701: PUSH
13702: EMPTY
13703: LIST
13704: LIST
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: PUSH
13713: LD_INT 101
13715: PUSH
13716: LD_INT 102
13718: PUSH
13719: LD_INT 106
13721: PUSH
13722: EMPTY
13723: LIST
13724: LIST
13725: LIST
13726: PUSH
13727: EMPTY
13728: LIST
13729: LIST
13730: ST_TO_ADDR
13731: GO 16590
13733: LD_INT 2
13735: DOUBLE
13736: EQUAL
13737: IFTRUE 13741
13739: GO 13813
13741: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
13742: LD_ADDR_VAR 0 1
13746: PUSH
13747: LD_INT 2
13749: PUSH
13750: LD_INT 4
13752: PUSH
13753: LD_INT 11
13755: PUSH
13756: LD_INT 12
13758: PUSH
13759: LD_INT 15
13761: PUSH
13762: LD_INT 16
13764: PUSH
13765: LD_INT 22
13767: PUSH
13768: LD_INT 23
13770: PUSH
13771: LD_INT 26
13773: PUSH
13774: EMPTY
13775: LIST
13776: LIST
13777: LIST
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: PUSH
13785: LD_INT 101
13787: PUSH
13788: LD_INT 102
13790: PUSH
13791: LD_INT 105
13793: PUSH
13794: LD_INT 106
13796: PUSH
13797: LD_INT 108
13799: PUSH
13800: EMPTY
13801: LIST
13802: LIST
13803: LIST
13804: LIST
13805: LIST
13806: PUSH
13807: EMPTY
13808: LIST
13809: LIST
13810: ST_TO_ADDR
13811: GO 16590
13813: LD_INT 3
13815: DOUBLE
13816: EQUAL
13817: IFTRUE 13821
13819: GO 13897
13821: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
13822: LD_ADDR_VAR 0 1
13826: PUSH
13827: LD_INT 2
13829: PUSH
13830: LD_INT 4
13832: PUSH
13833: LD_INT 5
13835: PUSH
13836: LD_INT 11
13838: PUSH
13839: LD_INT 12
13841: PUSH
13842: LD_INT 15
13844: PUSH
13845: LD_INT 16
13847: PUSH
13848: LD_INT 22
13850: PUSH
13851: LD_INT 26
13853: PUSH
13854: LD_INT 36
13856: PUSH
13857: EMPTY
13858: LIST
13859: LIST
13860: LIST
13861: LIST
13862: LIST
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: LIST
13868: PUSH
13869: LD_INT 101
13871: PUSH
13872: LD_INT 102
13874: PUSH
13875: LD_INT 105
13877: PUSH
13878: LD_INT 106
13880: PUSH
13881: LD_INT 108
13883: PUSH
13884: EMPTY
13885: LIST
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: PUSH
13891: EMPTY
13892: LIST
13893: LIST
13894: ST_TO_ADDR
13895: GO 16590
13897: LD_INT 4
13899: DOUBLE
13900: EQUAL
13901: IFTRUE 13905
13903: GO 13989
13905: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
13906: LD_ADDR_VAR 0 1
13910: PUSH
13911: LD_INT 2
13913: PUSH
13914: LD_INT 4
13916: PUSH
13917: LD_INT 5
13919: PUSH
13920: LD_INT 8
13922: PUSH
13923: LD_INT 11
13925: PUSH
13926: LD_INT 12
13928: PUSH
13929: LD_INT 15
13931: PUSH
13932: LD_INT 16
13934: PUSH
13935: LD_INT 22
13937: PUSH
13938: LD_INT 23
13940: PUSH
13941: LD_INT 26
13943: PUSH
13944: LD_INT 36
13946: PUSH
13947: EMPTY
13948: LIST
13949: LIST
13950: LIST
13951: LIST
13952: LIST
13953: LIST
13954: LIST
13955: LIST
13956: LIST
13957: LIST
13958: LIST
13959: LIST
13960: PUSH
13961: LD_INT 101
13963: PUSH
13964: LD_INT 102
13966: PUSH
13967: LD_INT 105
13969: PUSH
13970: LD_INT 106
13972: PUSH
13973: LD_INT 108
13975: PUSH
13976: EMPTY
13977: LIST
13978: LIST
13979: LIST
13980: LIST
13981: LIST
13982: PUSH
13983: EMPTY
13984: LIST
13985: LIST
13986: ST_TO_ADDR
13987: GO 16590
13989: LD_INT 5
13991: DOUBLE
13992: EQUAL
13993: IFTRUE 13997
13995: GO 14097
13997: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
13998: LD_ADDR_VAR 0 1
14002: PUSH
14003: LD_INT 2
14005: PUSH
14006: LD_INT 4
14008: PUSH
14009: LD_INT 5
14011: PUSH
14012: LD_INT 6
14014: PUSH
14015: LD_INT 8
14017: PUSH
14018: LD_INT 11
14020: PUSH
14021: LD_INT 12
14023: PUSH
14024: LD_INT 15
14026: PUSH
14027: LD_INT 16
14029: PUSH
14030: LD_INT 22
14032: PUSH
14033: LD_INT 23
14035: PUSH
14036: LD_INT 25
14038: PUSH
14039: LD_INT 26
14041: PUSH
14042: LD_INT 36
14044: PUSH
14045: EMPTY
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: PUSH
14061: LD_INT 101
14063: PUSH
14064: LD_INT 102
14066: PUSH
14067: LD_INT 105
14069: PUSH
14070: LD_INT 106
14072: PUSH
14073: LD_INT 108
14075: PUSH
14076: LD_INT 109
14078: PUSH
14079: LD_INT 112
14081: PUSH
14082: EMPTY
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: LIST
14090: PUSH
14091: EMPTY
14092: LIST
14093: LIST
14094: ST_TO_ADDR
14095: GO 16590
14097: LD_INT 6
14099: DOUBLE
14100: EQUAL
14101: IFTRUE 14105
14103: GO 14225
14105: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
14106: LD_ADDR_VAR 0 1
14110: PUSH
14111: LD_INT 2
14113: PUSH
14114: LD_INT 4
14116: PUSH
14117: LD_INT 5
14119: PUSH
14120: LD_INT 6
14122: PUSH
14123: LD_INT 8
14125: PUSH
14126: LD_INT 11
14128: PUSH
14129: LD_INT 12
14131: PUSH
14132: LD_INT 15
14134: PUSH
14135: LD_INT 16
14137: PUSH
14138: LD_INT 20
14140: PUSH
14141: LD_INT 21
14143: PUSH
14144: LD_INT 22
14146: PUSH
14147: LD_INT 23
14149: PUSH
14150: LD_INT 25
14152: PUSH
14153: LD_INT 26
14155: PUSH
14156: LD_INT 30
14158: PUSH
14159: LD_INT 31
14161: PUSH
14162: LD_INT 32
14164: PUSH
14165: LD_INT 36
14167: PUSH
14168: EMPTY
14169: LIST
14170: LIST
14171: LIST
14172: LIST
14173: LIST
14174: LIST
14175: LIST
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: LIST
14182: LIST
14183: LIST
14184: LIST
14185: LIST
14186: LIST
14187: LIST
14188: PUSH
14189: LD_INT 101
14191: PUSH
14192: LD_INT 102
14194: PUSH
14195: LD_INT 105
14197: PUSH
14198: LD_INT 106
14200: PUSH
14201: LD_INT 108
14203: PUSH
14204: LD_INT 109
14206: PUSH
14207: LD_INT 112
14209: PUSH
14210: EMPTY
14211: LIST
14212: LIST
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: LIST
14218: PUSH
14219: EMPTY
14220: LIST
14221: LIST
14222: ST_TO_ADDR
14223: GO 16590
14225: LD_INT 7
14227: DOUBLE
14228: EQUAL
14229: IFTRUE 14233
14231: GO 14333
14233: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
14234: LD_ADDR_VAR 0 1
14238: PUSH
14239: LD_INT 2
14241: PUSH
14242: LD_INT 4
14244: PUSH
14245: LD_INT 5
14247: PUSH
14248: LD_INT 7
14250: PUSH
14251: LD_INT 11
14253: PUSH
14254: LD_INT 12
14256: PUSH
14257: LD_INT 15
14259: PUSH
14260: LD_INT 16
14262: PUSH
14263: LD_INT 20
14265: PUSH
14266: LD_INT 21
14268: PUSH
14269: LD_INT 22
14271: PUSH
14272: LD_INT 23
14274: PUSH
14275: LD_INT 25
14277: PUSH
14278: LD_INT 26
14280: PUSH
14281: EMPTY
14282: LIST
14283: LIST
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: LIST
14291: LIST
14292: LIST
14293: LIST
14294: LIST
14295: LIST
14296: PUSH
14297: LD_INT 101
14299: PUSH
14300: LD_INT 102
14302: PUSH
14303: LD_INT 103
14305: PUSH
14306: LD_INT 105
14308: PUSH
14309: LD_INT 106
14311: PUSH
14312: LD_INT 108
14314: PUSH
14315: LD_INT 112
14317: PUSH
14318: EMPTY
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: PUSH
14327: EMPTY
14328: LIST
14329: LIST
14330: ST_TO_ADDR
14331: GO 16590
14333: LD_INT 8
14335: DOUBLE
14336: EQUAL
14337: IFTRUE 14341
14339: GO 14469
14341: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
14342: LD_ADDR_VAR 0 1
14346: PUSH
14347: LD_INT 2
14349: PUSH
14350: LD_INT 4
14352: PUSH
14353: LD_INT 5
14355: PUSH
14356: LD_INT 6
14358: PUSH
14359: LD_INT 7
14361: PUSH
14362: LD_INT 8
14364: PUSH
14365: LD_INT 11
14367: PUSH
14368: LD_INT 12
14370: PUSH
14371: LD_INT 15
14373: PUSH
14374: LD_INT 16
14376: PUSH
14377: LD_INT 20
14379: PUSH
14380: LD_INT 21
14382: PUSH
14383: LD_INT 22
14385: PUSH
14386: LD_INT 23
14388: PUSH
14389: LD_INT 25
14391: PUSH
14392: LD_INT 26
14394: PUSH
14395: LD_INT 30
14397: PUSH
14398: LD_INT 31
14400: PUSH
14401: LD_INT 32
14403: PUSH
14404: LD_INT 36
14406: PUSH
14407: EMPTY
14408: LIST
14409: LIST
14410: LIST
14411: LIST
14412: LIST
14413: LIST
14414: LIST
14415: LIST
14416: LIST
14417: LIST
14418: LIST
14419: LIST
14420: LIST
14421: LIST
14422: LIST
14423: LIST
14424: LIST
14425: LIST
14426: LIST
14427: LIST
14428: PUSH
14429: LD_INT 101
14431: PUSH
14432: LD_INT 102
14434: PUSH
14435: LD_INT 103
14437: PUSH
14438: LD_INT 105
14440: PUSH
14441: LD_INT 106
14443: PUSH
14444: LD_INT 108
14446: PUSH
14447: LD_INT 109
14449: PUSH
14450: LD_INT 112
14452: PUSH
14453: EMPTY
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: PUSH
14463: EMPTY
14464: LIST
14465: LIST
14466: ST_TO_ADDR
14467: GO 16590
14469: LD_INT 9
14471: DOUBLE
14472: EQUAL
14473: IFTRUE 14477
14475: GO 14613
14477: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
14478: LD_ADDR_VAR 0 1
14482: PUSH
14483: LD_INT 2
14485: PUSH
14486: LD_INT 4
14488: PUSH
14489: LD_INT 5
14491: PUSH
14492: LD_INT 6
14494: PUSH
14495: LD_INT 7
14497: PUSH
14498: LD_INT 8
14500: PUSH
14501: LD_INT 11
14503: PUSH
14504: LD_INT 12
14506: PUSH
14507: LD_INT 15
14509: PUSH
14510: LD_INT 16
14512: PUSH
14513: LD_INT 20
14515: PUSH
14516: LD_INT 21
14518: PUSH
14519: LD_INT 22
14521: PUSH
14522: LD_INT 23
14524: PUSH
14525: LD_INT 25
14527: PUSH
14528: LD_INT 26
14530: PUSH
14531: LD_INT 28
14533: PUSH
14534: LD_INT 30
14536: PUSH
14537: LD_INT 31
14539: PUSH
14540: LD_INT 32
14542: PUSH
14543: LD_INT 36
14545: PUSH
14546: EMPTY
14547: LIST
14548: LIST
14549: LIST
14550: LIST
14551: LIST
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: LIST
14568: PUSH
14569: LD_INT 101
14571: PUSH
14572: LD_INT 102
14574: PUSH
14575: LD_INT 103
14577: PUSH
14578: LD_INT 105
14580: PUSH
14581: LD_INT 106
14583: PUSH
14584: LD_INT 108
14586: PUSH
14587: LD_INT 109
14589: PUSH
14590: LD_INT 112
14592: PUSH
14593: LD_INT 114
14595: PUSH
14596: EMPTY
14597: LIST
14598: LIST
14599: LIST
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: LIST
14606: PUSH
14607: EMPTY
14608: LIST
14609: LIST
14610: ST_TO_ADDR
14611: GO 16590
14613: LD_INT 10
14615: DOUBLE
14616: EQUAL
14617: IFTRUE 14621
14619: GO 14805
14621: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
14622: LD_ADDR_VAR 0 1
14626: PUSH
14627: LD_INT 2
14629: PUSH
14630: LD_INT 4
14632: PUSH
14633: LD_INT 5
14635: PUSH
14636: LD_INT 6
14638: PUSH
14639: LD_INT 7
14641: PUSH
14642: LD_INT 8
14644: PUSH
14645: LD_INT 9
14647: PUSH
14648: LD_INT 10
14650: PUSH
14651: LD_INT 11
14653: PUSH
14654: LD_INT 12
14656: PUSH
14657: LD_INT 13
14659: PUSH
14660: LD_INT 14
14662: PUSH
14663: LD_INT 15
14665: PUSH
14666: LD_INT 16
14668: PUSH
14669: LD_INT 17
14671: PUSH
14672: LD_INT 18
14674: PUSH
14675: LD_INT 19
14677: PUSH
14678: LD_INT 20
14680: PUSH
14681: LD_INT 21
14683: PUSH
14684: LD_INT 22
14686: PUSH
14687: LD_INT 23
14689: PUSH
14690: LD_INT 24
14692: PUSH
14693: LD_INT 25
14695: PUSH
14696: LD_INT 26
14698: PUSH
14699: LD_INT 28
14701: PUSH
14702: LD_INT 30
14704: PUSH
14705: LD_INT 31
14707: PUSH
14708: LD_INT 32
14710: PUSH
14711: LD_INT 36
14713: PUSH
14714: EMPTY
14715: LIST
14716: LIST
14717: LIST
14718: LIST
14719: LIST
14720: LIST
14721: LIST
14722: LIST
14723: LIST
14724: LIST
14725: LIST
14726: LIST
14727: LIST
14728: LIST
14729: LIST
14730: LIST
14731: LIST
14732: LIST
14733: LIST
14734: LIST
14735: LIST
14736: LIST
14737: LIST
14738: LIST
14739: LIST
14740: LIST
14741: LIST
14742: LIST
14743: LIST
14744: PUSH
14745: LD_INT 101
14747: PUSH
14748: LD_INT 102
14750: PUSH
14751: LD_INT 103
14753: PUSH
14754: LD_INT 104
14756: PUSH
14757: LD_INT 105
14759: PUSH
14760: LD_INT 106
14762: PUSH
14763: LD_INT 107
14765: PUSH
14766: LD_INT 108
14768: PUSH
14769: LD_INT 109
14771: PUSH
14772: LD_INT 110
14774: PUSH
14775: LD_INT 111
14777: PUSH
14778: LD_INT 112
14780: PUSH
14781: LD_INT 114
14783: PUSH
14784: EMPTY
14785: LIST
14786: LIST
14787: LIST
14788: LIST
14789: LIST
14790: LIST
14791: LIST
14792: LIST
14793: LIST
14794: LIST
14795: LIST
14796: LIST
14797: LIST
14798: PUSH
14799: EMPTY
14800: LIST
14801: LIST
14802: ST_TO_ADDR
14803: GO 16590
14805: LD_INT 11
14807: DOUBLE
14808: EQUAL
14809: IFTRUE 14813
14811: GO 15005
14813: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
14814: LD_ADDR_VAR 0 1
14818: PUSH
14819: LD_INT 2
14821: PUSH
14822: LD_INT 3
14824: PUSH
14825: LD_INT 4
14827: PUSH
14828: LD_INT 5
14830: PUSH
14831: LD_INT 6
14833: PUSH
14834: LD_INT 7
14836: PUSH
14837: LD_INT 8
14839: PUSH
14840: LD_INT 9
14842: PUSH
14843: LD_INT 10
14845: PUSH
14846: LD_INT 11
14848: PUSH
14849: LD_INT 12
14851: PUSH
14852: LD_INT 13
14854: PUSH
14855: LD_INT 14
14857: PUSH
14858: LD_INT 15
14860: PUSH
14861: LD_INT 16
14863: PUSH
14864: LD_INT 17
14866: PUSH
14867: LD_INT 18
14869: PUSH
14870: LD_INT 19
14872: PUSH
14873: LD_INT 20
14875: PUSH
14876: LD_INT 21
14878: PUSH
14879: LD_INT 22
14881: PUSH
14882: LD_INT 23
14884: PUSH
14885: LD_INT 24
14887: PUSH
14888: LD_INT 25
14890: PUSH
14891: LD_INT 26
14893: PUSH
14894: LD_INT 28
14896: PUSH
14897: LD_INT 30
14899: PUSH
14900: LD_INT 31
14902: PUSH
14903: LD_INT 32
14905: PUSH
14906: LD_INT 34
14908: PUSH
14909: LD_INT 36
14911: PUSH
14912: EMPTY
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: LIST
14935: LIST
14936: LIST
14937: LIST
14938: LIST
14939: LIST
14940: LIST
14941: LIST
14942: LIST
14943: LIST
14944: PUSH
14945: LD_INT 101
14947: PUSH
14948: LD_INT 102
14950: PUSH
14951: LD_INT 103
14953: PUSH
14954: LD_INT 104
14956: PUSH
14957: LD_INT 105
14959: PUSH
14960: LD_INT 106
14962: PUSH
14963: LD_INT 107
14965: PUSH
14966: LD_INT 108
14968: PUSH
14969: LD_INT 109
14971: PUSH
14972: LD_INT 110
14974: PUSH
14975: LD_INT 111
14977: PUSH
14978: LD_INT 112
14980: PUSH
14981: LD_INT 114
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: LIST
14988: LIST
14989: LIST
14990: LIST
14991: LIST
14992: LIST
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: LIST
14998: PUSH
14999: EMPTY
15000: LIST
15001: LIST
15002: ST_TO_ADDR
15003: GO 16590
15005: LD_INT 12
15007: DOUBLE
15008: EQUAL
15009: IFTRUE 15013
15011: GO 15221
15013: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
15014: LD_ADDR_VAR 0 1
15018: PUSH
15019: LD_INT 1
15021: PUSH
15022: LD_INT 2
15024: PUSH
15025: LD_INT 3
15027: PUSH
15028: LD_INT 4
15030: PUSH
15031: LD_INT 5
15033: PUSH
15034: LD_INT 6
15036: PUSH
15037: LD_INT 7
15039: PUSH
15040: LD_INT 8
15042: PUSH
15043: LD_INT 9
15045: PUSH
15046: LD_INT 10
15048: PUSH
15049: LD_INT 11
15051: PUSH
15052: LD_INT 12
15054: PUSH
15055: LD_INT 13
15057: PUSH
15058: LD_INT 14
15060: PUSH
15061: LD_INT 15
15063: PUSH
15064: LD_INT 16
15066: PUSH
15067: LD_INT 17
15069: PUSH
15070: LD_INT 18
15072: PUSH
15073: LD_INT 19
15075: PUSH
15076: LD_INT 20
15078: PUSH
15079: LD_INT 21
15081: PUSH
15082: LD_INT 22
15084: PUSH
15085: LD_INT 23
15087: PUSH
15088: LD_INT 24
15090: PUSH
15091: LD_INT 25
15093: PUSH
15094: LD_INT 26
15096: PUSH
15097: LD_INT 27
15099: PUSH
15100: LD_INT 28
15102: PUSH
15103: LD_INT 30
15105: PUSH
15106: LD_INT 31
15108: PUSH
15109: LD_INT 32
15111: PUSH
15112: LD_INT 33
15114: PUSH
15115: LD_INT 34
15117: PUSH
15118: LD_INT 36
15120: PUSH
15121: EMPTY
15122: LIST
15123: LIST
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: LIST
15130: LIST
15131: LIST
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: LIST
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: LIST
15149: LIST
15150: LIST
15151: LIST
15152: LIST
15153: LIST
15154: LIST
15155: LIST
15156: PUSH
15157: LD_INT 101
15159: PUSH
15160: LD_INT 102
15162: PUSH
15163: LD_INT 103
15165: PUSH
15166: LD_INT 104
15168: PUSH
15169: LD_INT 105
15171: PUSH
15172: LD_INT 106
15174: PUSH
15175: LD_INT 107
15177: PUSH
15178: LD_INT 108
15180: PUSH
15181: LD_INT 109
15183: PUSH
15184: LD_INT 110
15186: PUSH
15187: LD_INT 111
15189: PUSH
15190: LD_INT 112
15192: PUSH
15193: LD_INT 113
15195: PUSH
15196: LD_INT 114
15198: PUSH
15199: EMPTY
15200: LIST
15201: LIST
15202: LIST
15203: LIST
15204: LIST
15205: LIST
15206: LIST
15207: LIST
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: LIST
15213: LIST
15214: PUSH
15215: EMPTY
15216: LIST
15217: LIST
15218: ST_TO_ADDR
15219: GO 16590
15221: LD_INT 13
15223: DOUBLE
15224: EQUAL
15225: IFTRUE 15229
15227: GO 15425
15229: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
15230: LD_ADDR_VAR 0 1
15234: PUSH
15235: LD_INT 1
15237: PUSH
15238: LD_INT 2
15240: PUSH
15241: LD_INT 3
15243: PUSH
15244: LD_INT 4
15246: PUSH
15247: LD_INT 5
15249: PUSH
15250: LD_INT 8
15252: PUSH
15253: LD_INT 9
15255: PUSH
15256: LD_INT 10
15258: PUSH
15259: LD_INT 11
15261: PUSH
15262: LD_INT 12
15264: PUSH
15265: LD_INT 14
15267: PUSH
15268: LD_INT 15
15270: PUSH
15271: LD_INT 16
15273: PUSH
15274: LD_INT 17
15276: PUSH
15277: LD_INT 18
15279: PUSH
15280: LD_INT 19
15282: PUSH
15283: LD_INT 20
15285: PUSH
15286: LD_INT 21
15288: PUSH
15289: LD_INT 22
15291: PUSH
15292: LD_INT 23
15294: PUSH
15295: LD_INT 24
15297: PUSH
15298: LD_INT 25
15300: PUSH
15301: LD_INT 26
15303: PUSH
15304: LD_INT 27
15306: PUSH
15307: LD_INT 28
15309: PUSH
15310: LD_INT 30
15312: PUSH
15313: LD_INT 31
15315: PUSH
15316: LD_INT 32
15318: PUSH
15319: LD_INT 33
15321: PUSH
15322: LD_INT 34
15324: PUSH
15325: LD_INT 36
15327: PUSH
15328: EMPTY
15329: LIST
15330: LIST
15331: LIST
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: LIST
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: PUSH
15361: LD_INT 101
15363: PUSH
15364: LD_INT 102
15366: PUSH
15367: LD_INT 103
15369: PUSH
15370: LD_INT 104
15372: PUSH
15373: LD_INT 105
15375: PUSH
15376: LD_INT 106
15378: PUSH
15379: LD_INT 107
15381: PUSH
15382: LD_INT 108
15384: PUSH
15385: LD_INT 109
15387: PUSH
15388: LD_INT 110
15390: PUSH
15391: LD_INT 111
15393: PUSH
15394: LD_INT 112
15396: PUSH
15397: LD_INT 113
15399: PUSH
15400: LD_INT 114
15402: PUSH
15403: EMPTY
15404: LIST
15405: LIST
15406: LIST
15407: LIST
15408: LIST
15409: LIST
15410: LIST
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: LIST
15417: LIST
15418: PUSH
15419: EMPTY
15420: LIST
15421: LIST
15422: ST_TO_ADDR
15423: GO 16590
15425: LD_INT 14
15427: DOUBLE
15428: EQUAL
15429: IFTRUE 15433
15431: GO 15645
15433: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
15434: LD_ADDR_VAR 0 1
15438: PUSH
15439: LD_INT 1
15441: PUSH
15442: LD_INT 2
15444: PUSH
15445: LD_INT 3
15447: PUSH
15448: LD_INT 4
15450: PUSH
15451: LD_INT 5
15453: PUSH
15454: LD_INT 6
15456: PUSH
15457: LD_INT 7
15459: PUSH
15460: LD_INT 8
15462: PUSH
15463: LD_INT 9
15465: PUSH
15466: LD_INT 10
15468: PUSH
15469: LD_INT 11
15471: PUSH
15472: LD_INT 12
15474: PUSH
15475: LD_INT 13
15477: PUSH
15478: LD_INT 14
15480: PUSH
15481: LD_INT 15
15483: PUSH
15484: LD_INT 16
15486: PUSH
15487: LD_INT 17
15489: PUSH
15490: LD_INT 18
15492: PUSH
15493: LD_INT 19
15495: PUSH
15496: LD_INT 20
15498: PUSH
15499: LD_INT 21
15501: PUSH
15502: LD_INT 22
15504: PUSH
15505: LD_INT 23
15507: PUSH
15508: LD_INT 24
15510: PUSH
15511: LD_INT 25
15513: PUSH
15514: LD_INT 26
15516: PUSH
15517: LD_INT 27
15519: PUSH
15520: LD_INT 28
15522: PUSH
15523: LD_INT 29
15525: PUSH
15526: LD_INT 30
15528: PUSH
15529: LD_INT 31
15531: PUSH
15532: LD_INT 32
15534: PUSH
15535: LD_INT 33
15537: PUSH
15538: LD_INT 34
15540: PUSH
15541: LD_INT 36
15543: PUSH
15544: EMPTY
15545: LIST
15546: LIST
15547: LIST
15548: LIST
15549: LIST
15550: LIST
15551: LIST
15552: LIST
15553: LIST
15554: LIST
15555: LIST
15556: LIST
15557: LIST
15558: LIST
15559: LIST
15560: LIST
15561: LIST
15562: LIST
15563: LIST
15564: LIST
15565: LIST
15566: LIST
15567: LIST
15568: LIST
15569: LIST
15570: LIST
15571: LIST
15572: LIST
15573: LIST
15574: LIST
15575: LIST
15576: LIST
15577: LIST
15578: LIST
15579: LIST
15580: PUSH
15581: LD_INT 101
15583: PUSH
15584: LD_INT 102
15586: PUSH
15587: LD_INT 103
15589: PUSH
15590: LD_INT 104
15592: PUSH
15593: LD_INT 105
15595: PUSH
15596: LD_INT 106
15598: PUSH
15599: LD_INT 107
15601: PUSH
15602: LD_INT 108
15604: PUSH
15605: LD_INT 109
15607: PUSH
15608: LD_INT 110
15610: PUSH
15611: LD_INT 111
15613: PUSH
15614: LD_INT 112
15616: PUSH
15617: LD_INT 113
15619: PUSH
15620: LD_INT 114
15622: PUSH
15623: EMPTY
15624: LIST
15625: LIST
15626: LIST
15627: LIST
15628: LIST
15629: LIST
15630: LIST
15631: LIST
15632: LIST
15633: LIST
15634: LIST
15635: LIST
15636: LIST
15637: LIST
15638: PUSH
15639: EMPTY
15640: LIST
15641: LIST
15642: ST_TO_ADDR
15643: GO 16590
15645: LD_INT 15
15647: DOUBLE
15648: EQUAL
15649: IFTRUE 15653
15651: GO 15865
15653: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
15654: LD_ADDR_VAR 0 1
15658: PUSH
15659: LD_INT 1
15661: PUSH
15662: LD_INT 2
15664: PUSH
15665: LD_INT 3
15667: PUSH
15668: LD_INT 4
15670: PUSH
15671: LD_INT 5
15673: PUSH
15674: LD_INT 6
15676: PUSH
15677: LD_INT 7
15679: PUSH
15680: LD_INT 8
15682: PUSH
15683: LD_INT 9
15685: PUSH
15686: LD_INT 10
15688: PUSH
15689: LD_INT 11
15691: PUSH
15692: LD_INT 12
15694: PUSH
15695: LD_INT 13
15697: PUSH
15698: LD_INT 14
15700: PUSH
15701: LD_INT 15
15703: PUSH
15704: LD_INT 16
15706: PUSH
15707: LD_INT 17
15709: PUSH
15710: LD_INT 18
15712: PUSH
15713: LD_INT 19
15715: PUSH
15716: LD_INT 20
15718: PUSH
15719: LD_INT 21
15721: PUSH
15722: LD_INT 22
15724: PUSH
15725: LD_INT 23
15727: PUSH
15728: LD_INT 24
15730: PUSH
15731: LD_INT 25
15733: PUSH
15734: LD_INT 26
15736: PUSH
15737: LD_INT 27
15739: PUSH
15740: LD_INT 28
15742: PUSH
15743: LD_INT 29
15745: PUSH
15746: LD_INT 30
15748: PUSH
15749: LD_INT 31
15751: PUSH
15752: LD_INT 32
15754: PUSH
15755: LD_INT 33
15757: PUSH
15758: LD_INT 34
15760: PUSH
15761: LD_INT 36
15763: PUSH
15764: EMPTY
15765: LIST
15766: LIST
15767: LIST
15768: LIST
15769: LIST
15770: LIST
15771: LIST
15772: LIST
15773: LIST
15774: LIST
15775: LIST
15776: LIST
15777: LIST
15778: LIST
15779: LIST
15780: LIST
15781: LIST
15782: LIST
15783: LIST
15784: LIST
15785: LIST
15786: LIST
15787: LIST
15788: LIST
15789: LIST
15790: LIST
15791: LIST
15792: LIST
15793: LIST
15794: LIST
15795: LIST
15796: LIST
15797: LIST
15798: LIST
15799: LIST
15800: PUSH
15801: LD_INT 101
15803: PUSH
15804: LD_INT 102
15806: PUSH
15807: LD_INT 103
15809: PUSH
15810: LD_INT 104
15812: PUSH
15813: LD_INT 105
15815: PUSH
15816: LD_INT 106
15818: PUSH
15819: LD_INT 107
15821: PUSH
15822: LD_INT 108
15824: PUSH
15825: LD_INT 109
15827: PUSH
15828: LD_INT 110
15830: PUSH
15831: LD_INT 111
15833: PUSH
15834: LD_INT 112
15836: PUSH
15837: LD_INT 113
15839: PUSH
15840: LD_INT 114
15842: PUSH
15843: EMPTY
15844: LIST
15845: LIST
15846: LIST
15847: LIST
15848: LIST
15849: LIST
15850: LIST
15851: LIST
15852: LIST
15853: LIST
15854: LIST
15855: LIST
15856: LIST
15857: LIST
15858: PUSH
15859: EMPTY
15860: LIST
15861: LIST
15862: ST_TO_ADDR
15863: GO 16590
15865: LD_INT 16
15867: DOUBLE
15868: EQUAL
15869: IFTRUE 15873
15871: GO 15997
15873: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
15874: LD_ADDR_VAR 0 1
15878: PUSH
15879: LD_INT 2
15881: PUSH
15882: LD_INT 4
15884: PUSH
15885: LD_INT 5
15887: PUSH
15888: LD_INT 7
15890: PUSH
15891: LD_INT 11
15893: PUSH
15894: LD_INT 12
15896: PUSH
15897: LD_INT 15
15899: PUSH
15900: LD_INT 16
15902: PUSH
15903: LD_INT 20
15905: PUSH
15906: LD_INT 21
15908: PUSH
15909: LD_INT 22
15911: PUSH
15912: LD_INT 23
15914: PUSH
15915: LD_INT 25
15917: PUSH
15918: LD_INT 26
15920: PUSH
15921: LD_INT 30
15923: PUSH
15924: LD_INT 31
15926: PUSH
15927: LD_INT 32
15929: PUSH
15930: LD_INT 33
15932: PUSH
15933: LD_INT 34
15935: PUSH
15936: EMPTY
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: PUSH
15957: LD_INT 101
15959: PUSH
15960: LD_INT 102
15962: PUSH
15963: LD_INT 103
15965: PUSH
15966: LD_INT 106
15968: PUSH
15969: LD_INT 108
15971: PUSH
15972: LD_INT 112
15974: PUSH
15975: LD_INT 113
15977: PUSH
15978: LD_INT 114
15980: PUSH
15981: EMPTY
15982: LIST
15983: LIST
15984: LIST
15985: LIST
15986: LIST
15987: LIST
15988: LIST
15989: LIST
15990: PUSH
15991: EMPTY
15992: LIST
15993: LIST
15994: ST_TO_ADDR
15995: GO 16590
15997: LD_INT 17
15999: DOUBLE
16000: EQUAL
16001: IFTRUE 16005
16003: GO 16217
16005: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
16006: LD_ADDR_VAR 0 1
16010: PUSH
16011: LD_INT 1
16013: PUSH
16014: LD_INT 2
16016: PUSH
16017: LD_INT 3
16019: PUSH
16020: LD_INT 4
16022: PUSH
16023: LD_INT 5
16025: PUSH
16026: LD_INT 6
16028: PUSH
16029: LD_INT 7
16031: PUSH
16032: LD_INT 8
16034: PUSH
16035: LD_INT 9
16037: PUSH
16038: LD_INT 10
16040: PUSH
16041: LD_INT 11
16043: PUSH
16044: LD_INT 12
16046: PUSH
16047: LD_INT 13
16049: PUSH
16050: LD_INT 14
16052: PUSH
16053: LD_INT 15
16055: PUSH
16056: LD_INT 16
16058: PUSH
16059: LD_INT 17
16061: PUSH
16062: LD_INT 18
16064: PUSH
16065: LD_INT 19
16067: PUSH
16068: LD_INT 20
16070: PUSH
16071: LD_INT 21
16073: PUSH
16074: LD_INT 22
16076: PUSH
16077: LD_INT 23
16079: PUSH
16080: LD_INT 24
16082: PUSH
16083: LD_INT 25
16085: PUSH
16086: LD_INT 26
16088: PUSH
16089: LD_INT 27
16091: PUSH
16092: LD_INT 28
16094: PUSH
16095: LD_INT 29
16097: PUSH
16098: LD_INT 30
16100: PUSH
16101: LD_INT 31
16103: PUSH
16104: LD_INT 32
16106: PUSH
16107: LD_INT 33
16109: PUSH
16110: LD_INT 34
16112: PUSH
16113: LD_INT 36
16115: PUSH
16116: EMPTY
16117: LIST
16118: LIST
16119: LIST
16120: LIST
16121: LIST
16122: LIST
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: LIST
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: LIST
16143: LIST
16144: LIST
16145: LIST
16146: LIST
16147: LIST
16148: LIST
16149: LIST
16150: LIST
16151: LIST
16152: PUSH
16153: LD_INT 101
16155: PUSH
16156: LD_INT 102
16158: PUSH
16159: LD_INT 103
16161: PUSH
16162: LD_INT 104
16164: PUSH
16165: LD_INT 105
16167: PUSH
16168: LD_INT 106
16170: PUSH
16171: LD_INT 107
16173: PUSH
16174: LD_INT 108
16176: PUSH
16177: LD_INT 109
16179: PUSH
16180: LD_INT 110
16182: PUSH
16183: LD_INT 111
16185: PUSH
16186: LD_INT 112
16188: PUSH
16189: LD_INT 113
16191: PUSH
16192: LD_INT 114
16194: PUSH
16195: EMPTY
16196: LIST
16197: LIST
16198: LIST
16199: LIST
16200: LIST
16201: LIST
16202: LIST
16203: LIST
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: PUSH
16211: EMPTY
16212: LIST
16213: LIST
16214: ST_TO_ADDR
16215: GO 16590
16217: LD_INT 18
16219: DOUBLE
16220: EQUAL
16221: IFTRUE 16225
16223: GO 16361
16225: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
16226: LD_ADDR_VAR 0 1
16230: PUSH
16231: LD_INT 2
16233: PUSH
16234: LD_INT 4
16236: PUSH
16237: LD_INT 5
16239: PUSH
16240: LD_INT 7
16242: PUSH
16243: LD_INT 11
16245: PUSH
16246: LD_INT 12
16248: PUSH
16249: LD_INT 15
16251: PUSH
16252: LD_INT 16
16254: PUSH
16255: LD_INT 20
16257: PUSH
16258: LD_INT 21
16260: PUSH
16261: LD_INT 22
16263: PUSH
16264: LD_INT 23
16266: PUSH
16267: LD_INT 25
16269: PUSH
16270: LD_INT 26
16272: PUSH
16273: LD_INT 30
16275: PUSH
16276: LD_INT 31
16278: PUSH
16279: LD_INT 32
16281: PUSH
16282: LD_INT 33
16284: PUSH
16285: LD_INT 34
16287: PUSH
16288: LD_INT 35
16290: PUSH
16291: LD_INT 36
16293: PUSH
16294: EMPTY
16295: LIST
16296: LIST
16297: LIST
16298: LIST
16299: LIST
16300: LIST
16301: LIST
16302: LIST
16303: LIST
16304: LIST
16305: LIST
16306: LIST
16307: LIST
16308: LIST
16309: LIST
16310: LIST
16311: LIST
16312: LIST
16313: LIST
16314: LIST
16315: LIST
16316: PUSH
16317: LD_INT 101
16319: PUSH
16320: LD_INT 102
16322: PUSH
16323: LD_INT 103
16325: PUSH
16326: LD_INT 106
16328: PUSH
16329: LD_INT 108
16331: PUSH
16332: LD_INT 112
16334: PUSH
16335: LD_INT 113
16337: PUSH
16338: LD_INT 114
16340: PUSH
16341: LD_INT 115
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: LIST
16348: LIST
16349: LIST
16350: LIST
16351: LIST
16352: LIST
16353: LIST
16354: PUSH
16355: EMPTY
16356: LIST
16357: LIST
16358: ST_TO_ADDR
16359: GO 16590
16361: LD_INT 19
16363: DOUBLE
16364: EQUAL
16365: IFTRUE 16369
16367: GO 16589
16369: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
16370: LD_ADDR_VAR 0 1
16374: PUSH
16375: LD_INT 1
16377: PUSH
16378: LD_INT 2
16380: PUSH
16381: LD_INT 3
16383: PUSH
16384: LD_INT 4
16386: PUSH
16387: LD_INT 5
16389: PUSH
16390: LD_INT 6
16392: PUSH
16393: LD_INT 7
16395: PUSH
16396: LD_INT 8
16398: PUSH
16399: LD_INT 9
16401: PUSH
16402: LD_INT 10
16404: PUSH
16405: LD_INT 11
16407: PUSH
16408: LD_INT 12
16410: PUSH
16411: LD_INT 13
16413: PUSH
16414: LD_INT 14
16416: PUSH
16417: LD_INT 15
16419: PUSH
16420: LD_INT 16
16422: PUSH
16423: LD_INT 17
16425: PUSH
16426: LD_INT 18
16428: PUSH
16429: LD_INT 19
16431: PUSH
16432: LD_INT 20
16434: PUSH
16435: LD_INT 21
16437: PUSH
16438: LD_INT 22
16440: PUSH
16441: LD_INT 23
16443: PUSH
16444: LD_INT 24
16446: PUSH
16447: LD_INT 25
16449: PUSH
16450: LD_INT 26
16452: PUSH
16453: LD_INT 27
16455: PUSH
16456: LD_INT 28
16458: PUSH
16459: LD_INT 29
16461: PUSH
16462: LD_INT 30
16464: PUSH
16465: LD_INT 31
16467: PUSH
16468: LD_INT 32
16470: PUSH
16471: LD_INT 33
16473: PUSH
16474: LD_INT 34
16476: PUSH
16477: LD_INT 35
16479: PUSH
16480: LD_INT 36
16482: PUSH
16483: EMPTY
16484: LIST
16485: LIST
16486: LIST
16487: LIST
16488: LIST
16489: LIST
16490: LIST
16491: LIST
16492: LIST
16493: LIST
16494: LIST
16495: LIST
16496: LIST
16497: LIST
16498: LIST
16499: LIST
16500: LIST
16501: LIST
16502: LIST
16503: LIST
16504: LIST
16505: LIST
16506: LIST
16507: LIST
16508: LIST
16509: LIST
16510: LIST
16511: LIST
16512: LIST
16513: LIST
16514: LIST
16515: LIST
16516: LIST
16517: LIST
16518: LIST
16519: LIST
16520: PUSH
16521: LD_INT 101
16523: PUSH
16524: LD_INT 102
16526: PUSH
16527: LD_INT 103
16529: PUSH
16530: LD_INT 104
16532: PUSH
16533: LD_INT 105
16535: PUSH
16536: LD_INT 106
16538: PUSH
16539: LD_INT 107
16541: PUSH
16542: LD_INT 108
16544: PUSH
16545: LD_INT 109
16547: PUSH
16548: LD_INT 110
16550: PUSH
16551: LD_INT 111
16553: PUSH
16554: LD_INT 112
16556: PUSH
16557: LD_INT 113
16559: PUSH
16560: LD_INT 114
16562: PUSH
16563: LD_INT 115
16565: PUSH
16566: EMPTY
16567: LIST
16568: LIST
16569: LIST
16570: LIST
16571: LIST
16572: LIST
16573: LIST
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: LIST
16582: PUSH
16583: EMPTY
16584: LIST
16585: LIST
16586: ST_TO_ADDR
16587: GO 16590
16589: POP
// end else
16590: GO 16809
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
16592: LD_ADDR_VAR 0 1
16596: PUSH
16597: LD_INT 1
16599: PUSH
16600: LD_INT 2
16602: PUSH
16603: LD_INT 3
16605: PUSH
16606: LD_INT 4
16608: PUSH
16609: LD_INT 5
16611: PUSH
16612: LD_INT 6
16614: PUSH
16615: LD_INT 7
16617: PUSH
16618: LD_INT 8
16620: PUSH
16621: LD_INT 9
16623: PUSH
16624: LD_INT 10
16626: PUSH
16627: LD_INT 11
16629: PUSH
16630: LD_INT 12
16632: PUSH
16633: LD_INT 13
16635: PUSH
16636: LD_INT 14
16638: PUSH
16639: LD_INT 15
16641: PUSH
16642: LD_INT 16
16644: PUSH
16645: LD_INT 17
16647: PUSH
16648: LD_INT 18
16650: PUSH
16651: LD_INT 19
16653: PUSH
16654: LD_INT 20
16656: PUSH
16657: LD_INT 21
16659: PUSH
16660: LD_INT 22
16662: PUSH
16663: LD_INT 23
16665: PUSH
16666: LD_INT 24
16668: PUSH
16669: LD_INT 25
16671: PUSH
16672: LD_INT 26
16674: PUSH
16675: LD_INT 27
16677: PUSH
16678: LD_INT 28
16680: PUSH
16681: LD_INT 29
16683: PUSH
16684: LD_INT 30
16686: PUSH
16687: LD_INT 31
16689: PUSH
16690: LD_INT 32
16692: PUSH
16693: LD_INT 33
16695: PUSH
16696: LD_INT 34
16698: PUSH
16699: LD_INT 35
16701: PUSH
16702: LD_INT 36
16704: PUSH
16705: EMPTY
16706: LIST
16707: LIST
16708: LIST
16709: LIST
16710: LIST
16711: LIST
16712: LIST
16713: LIST
16714: LIST
16715: LIST
16716: LIST
16717: LIST
16718: LIST
16719: LIST
16720: LIST
16721: LIST
16722: LIST
16723: LIST
16724: LIST
16725: LIST
16726: LIST
16727: LIST
16728: LIST
16729: LIST
16730: LIST
16731: LIST
16732: LIST
16733: LIST
16734: LIST
16735: LIST
16736: LIST
16737: LIST
16738: LIST
16739: LIST
16740: LIST
16741: LIST
16742: PUSH
16743: LD_INT 101
16745: PUSH
16746: LD_INT 102
16748: PUSH
16749: LD_INT 103
16751: PUSH
16752: LD_INT 104
16754: PUSH
16755: LD_INT 105
16757: PUSH
16758: LD_INT 106
16760: PUSH
16761: LD_INT 107
16763: PUSH
16764: LD_INT 108
16766: PUSH
16767: LD_INT 109
16769: PUSH
16770: LD_INT 110
16772: PUSH
16773: LD_INT 111
16775: PUSH
16776: LD_INT 112
16778: PUSH
16779: LD_INT 113
16781: PUSH
16782: LD_INT 114
16784: PUSH
16785: LD_INT 115
16787: PUSH
16788: EMPTY
16789: LIST
16790: LIST
16791: LIST
16792: LIST
16793: LIST
16794: LIST
16795: LIST
16796: LIST
16797: LIST
16798: LIST
16799: LIST
16800: LIST
16801: LIST
16802: LIST
16803: LIST
16804: PUSH
16805: EMPTY
16806: LIST
16807: LIST
16808: ST_TO_ADDR
// if result then
16809: LD_VAR 0 1
16813: IFFALSE 17102
// begin normal :=  ;
16815: LD_ADDR_VAR 0 3
16819: PUSH
16820: LD_STRING 
16822: ST_TO_ADDR
// hardcore :=  ;
16823: LD_ADDR_VAR 0 4
16827: PUSH
16828: LD_STRING 
16830: ST_TO_ADDR
// for i = 1 to normalCounter do
16831: LD_ADDR_VAR 0 5
16835: PUSH
16836: DOUBLE
16837: LD_INT 1
16839: DEC
16840: ST_TO_ADDR
16841: LD_EXP 37
16845: PUSH
16846: FOR_TO
16847: IFFALSE 16948
// begin tmp := 0 ;
16849: LD_ADDR_VAR 0 2
16853: PUSH
16854: LD_STRING 0
16856: ST_TO_ADDR
// if result [ 1 ] then
16857: LD_VAR 0 1
16861: PUSH
16862: LD_INT 1
16864: ARRAY
16865: IFFALSE 16930
// if result [ 1 ] [ 1 ] = i then
16867: LD_VAR 0 1
16871: PUSH
16872: LD_INT 1
16874: ARRAY
16875: PUSH
16876: LD_INT 1
16878: ARRAY
16879: PUSH
16880: LD_VAR 0 5
16884: EQUAL
16885: IFFALSE 16930
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
16887: LD_ADDR_VAR 0 1
16891: PUSH
16892: LD_VAR 0 1
16896: PPUSH
16897: LD_INT 1
16899: PPUSH
16900: LD_VAR 0 1
16904: PUSH
16905: LD_INT 1
16907: ARRAY
16908: PPUSH
16909: LD_INT 1
16911: PPUSH
16912: CALL_OW 3
16916: PPUSH
16917: CALL_OW 1
16921: ST_TO_ADDR
// tmp := 1 ;
16922: LD_ADDR_VAR 0 2
16926: PUSH
16927: LD_STRING 1
16929: ST_TO_ADDR
// end ; normal := normal & tmp ;
16930: LD_ADDR_VAR 0 3
16934: PUSH
16935: LD_VAR 0 3
16939: PUSH
16940: LD_VAR 0 2
16944: STR
16945: ST_TO_ADDR
// end ;
16946: GO 16846
16948: POP
16949: POP
// for i = 1 to hardcoreCounter do
16950: LD_ADDR_VAR 0 5
16954: PUSH
16955: DOUBLE
16956: LD_INT 1
16958: DEC
16959: ST_TO_ADDR
16960: LD_EXP 38
16964: PUSH
16965: FOR_TO
16966: IFFALSE 17071
// begin tmp := 0 ;
16968: LD_ADDR_VAR 0 2
16972: PUSH
16973: LD_STRING 0
16975: ST_TO_ADDR
// if result [ 2 ] then
16976: LD_VAR 0 1
16980: PUSH
16981: LD_INT 2
16983: ARRAY
16984: IFFALSE 17053
// if result [ 2 ] [ 1 ] = 100 + i then
16986: LD_VAR 0 1
16990: PUSH
16991: LD_INT 2
16993: ARRAY
16994: PUSH
16995: LD_INT 1
16997: ARRAY
16998: PUSH
16999: LD_INT 100
17001: PUSH
17002: LD_VAR 0 5
17006: PLUS
17007: EQUAL
17008: IFFALSE 17053
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
17010: LD_ADDR_VAR 0 1
17014: PUSH
17015: LD_VAR 0 1
17019: PPUSH
17020: LD_INT 2
17022: PPUSH
17023: LD_VAR 0 1
17027: PUSH
17028: LD_INT 2
17030: ARRAY
17031: PPUSH
17032: LD_INT 1
17034: PPUSH
17035: CALL_OW 3
17039: PPUSH
17040: CALL_OW 1
17044: ST_TO_ADDR
// tmp := 1 ;
17045: LD_ADDR_VAR 0 2
17049: PUSH
17050: LD_STRING 1
17052: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
17053: LD_ADDR_VAR 0 4
17057: PUSH
17058: LD_VAR 0 4
17062: PUSH
17063: LD_VAR 0 2
17067: STR
17068: ST_TO_ADDR
// end ;
17069: GO 16965
17071: POP
17072: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
17073: LD_STRING getStreamItemsFromMission("
17075: PUSH
17076: LD_VAR 0 3
17080: STR
17081: PUSH
17082: LD_STRING ","
17084: STR
17085: PUSH
17086: LD_VAR 0 4
17090: STR
17091: PUSH
17092: LD_STRING ")
17094: STR
17095: PPUSH
17096: CALL_OW 559
// end else
17100: GO 17109
// ToLua ( getStreamItemsFromMission("","") ) ;
17102: LD_STRING getStreamItemsFromMission("","")
17104: PPUSH
17105: CALL_OW 559
// end ;
17109: LD_VAR 0 1
17113: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17114: LD_EXP 36
17118: PUSH
17119: LD_EXP 41
17123: AND
17124: IFFALSE 17248
17126: GO 17128
17128: DISABLE
17129: LD_INT 0
17131: PPUSH
17132: PPUSH
// begin enable ;
17133: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17134: LD_ADDR_VAR 0 2
17138: PUSH
17139: LD_INT 22
17141: PUSH
17142: LD_OWVAR 2
17146: PUSH
17147: EMPTY
17148: LIST
17149: LIST
17150: PUSH
17151: LD_INT 2
17153: PUSH
17154: LD_INT 34
17156: PUSH
17157: LD_INT 7
17159: PUSH
17160: EMPTY
17161: LIST
17162: LIST
17163: PUSH
17164: LD_INT 34
17166: PUSH
17167: LD_INT 45
17169: PUSH
17170: EMPTY
17171: LIST
17172: LIST
17173: PUSH
17174: LD_INT 34
17176: PUSH
17177: LD_INT 28
17179: PUSH
17180: EMPTY
17181: LIST
17182: LIST
17183: PUSH
17184: LD_INT 34
17186: PUSH
17187: LD_INT 47
17189: PUSH
17190: EMPTY
17191: LIST
17192: LIST
17193: PUSH
17194: EMPTY
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: PUSH
17201: EMPTY
17202: LIST
17203: LIST
17204: PPUSH
17205: CALL_OW 69
17209: ST_TO_ADDR
// if not tmp then
17210: LD_VAR 0 2
17214: NOT
17215: IFFALSE 17219
// exit ;
17217: GO 17248
// for i in tmp do
17219: LD_ADDR_VAR 0 1
17223: PUSH
17224: LD_VAR 0 2
17228: PUSH
17229: FOR_IN
17230: IFFALSE 17246
// begin SetLives ( i , 0 ) ;
17232: LD_VAR 0 1
17236: PPUSH
17237: LD_INT 0
17239: PPUSH
17240: CALL_OW 234
// end ;
17244: GO 17229
17246: POP
17247: POP
// end ;
17248: PPOPN 2
17250: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17251: LD_EXP 36
17255: PUSH
17256: LD_EXP 42
17260: AND
17261: IFFALSE 17345
17263: GO 17265
17265: DISABLE
17266: LD_INT 0
17268: PPUSH
17269: PPUSH
// begin enable ;
17270: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17271: LD_ADDR_VAR 0 2
17275: PUSH
17276: LD_INT 22
17278: PUSH
17279: LD_OWVAR 2
17283: PUSH
17284: EMPTY
17285: LIST
17286: LIST
17287: PUSH
17288: LD_INT 32
17290: PUSH
17291: LD_INT 3
17293: PUSH
17294: EMPTY
17295: LIST
17296: LIST
17297: PUSH
17298: EMPTY
17299: LIST
17300: LIST
17301: PPUSH
17302: CALL_OW 69
17306: ST_TO_ADDR
// if not tmp then
17307: LD_VAR 0 2
17311: NOT
17312: IFFALSE 17316
// exit ;
17314: GO 17345
// for i in tmp do
17316: LD_ADDR_VAR 0 1
17320: PUSH
17321: LD_VAR 0 2
17325: PUSH
17326: FOR_IN
17327: IFFALSE 17343
// begin SetLives ( i , 0 ) ;
17329: LD_VAR 0 1
17333: PPUSH
17334: LD_INT 0
17336: PPUSH
17337: CALL_OW 234
// end ;
17341: GO 17326
17343: POP
17344: POP
// end ;
17345: PPOPN 2
17347: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17348: LD_EXP 36
17352: PUSH
17353: LD_EXP 39
17357: AND
17358: IFFALSE 17451
17360: GO 17362
17362: DISABLE
17363: LD_INT 0
17365: PPUSH
// begin enable ;
17366: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17367: LD_ADDR_VAR 0 1
17371: PUSH
17372: LD_INT 22
17374: PUSH
17375: LD_OWVAR 2
17379: PUSH
17380: EMPTY
17381: LIST
17382: LIST
17383: PUSH
17384: LD_INT 2
17386: PUSH
17387: LD_INT 25
17389: PUSH
17390: LD_INT 5
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: PUSH
17397: LD_INT 25
17399: PUSH
17400: LD_INT 9
17402: PUSH
17403: EMPTY
17404: LIST
17405: LIST
17406: PUSH
17407: LD_INT 25
17409: PUSH
17410: LD_INT 8
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: PUSH
17417: EMPTY
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: PUSH
17423: EMPTY
17424: LIST
17425: LIST
17426: PPUSH
17427: CALL_OW 69
17431: PUSH
17432: FOR_IN
17433: IFFALSE 17449
// begin SetClass ( i , 1 ) ;
17435: LD_VAR 0 1
17439: PPUSH
17440: LD_INT 1
17442: PPUSH
17443: CALL_OW 336
// end ;
17447: GO 17432
17449: POP
17450: POP
// end ;
17451: PPOPN 1
17453: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17454: LD_EXP 36
17458: PUSH
17459: LD_EXP 40
17463: AND
17464: PUSH
17465: LD_OWVAR 65
17469: PUSH
17470: LD_INT 7
17472: LESS
17473: AND
17474: IFFALSE 17488
17476: GO 17478
17478: DISABLE
// begin enable ;
17479: ENABLE
// game_speed := 7 ;
17480: LD_ADDR_OWVAR 65
17484: PUSH
17485: LD_INT 7
17487: ST_TO_ADDR
// end ;
17488: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17489: LD_EXP 36
17493: PUSH
17494: LD_EXP 43
17498: AND
17499: IFFALSE 17701
17501: GO 17503
17503: DISABLE
17504: LD_INT 0
17506: PPUSH
17507: PPUSH
17508: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17509: LD_ADDR_VAR 0 3
17513: PUSH
17514: LD_INT 81
17516: PUSH
17517: LD_OWVAR 2
17521: PUSH
17522: EMPTY
17523: LIST
17524: LIST
17525: PUSH
17526: LD_INT 21
17528: PUSH
17529: LD_INT 1
17531: PUSH
17532: EMPTY
17533: LIST
17534: LIST
17535: PUSH
17536: EMPTY
17537: LIST
17538: LIST
17539: PPUSH
17540: CALL_OW 69
17544: ST_TO_ADDR
// if not tmp then
17545: LD_VAR 0 3
17549: NOT
17550: IFFALSE 17554
// exit ;
17552: GO 17701
// if tmp > 5 then
17554: LD_VAR 0 3
17558: PUSH
17559: LD_INT 5
17561: GREATER
17562: IFFALSE 17574
// k := 5 else
17564: LD_ADDR_VAR 0 2
17568: PUSH
17569: LD_INT 5
17571: ST_TO_ADDR
17572: GO 17584
// k := tmp ;
17574: LD_ADDR_VAR 0 2
17578: PUSH
17579: LD_VAR 0 3
17583: ST_TO_ADDR
// for i := 1 to k do
17584: LD_ADDR_VAR 0 1
17588: PUSH
17589: DOUBLE
17590: LD_INT 1
17592: DEC
17593: ST_TO_ADDR
17594: LD_VAR 0 2
17598: PUSH
17599: FOR_TO
17600: IFFALSE 17699
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17602: LD_VAR 0 3
17606: PUSH
17607: LD_VAR 0 1
17611: ARRAY
17612: PPUSH
17613: LD_VAR 0 1
17617: PUSH
17618: LD_INT 4
17620: MOD
17621: PUSH
17622: LD_INT 1
17624: PLUS
17625: PPUSH
17626: CALL_OW 259
17630: PUSH
17631: LD_INT 10
17633: LESS
17634: IFFALSE 17697
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17636: LD_VAR 0 3
17640: PUSH
17641: LD_VAR 0 1
17645: ARRAY
17646: PPUSH
17647: LD_VAR 0 1
17651: PUSH
17652: LD_INT 4
17654: MOD
17655: PUSH
17656: LD_INT 1
17658: PLUS
17659: PPUSH
17660: LD_VAR 0 3
17664: PUSH
17665: LD_VAR 0 1
17669: ARRAY
17670: PPUSH
17671: LD_VAR 0 1
17675: PUSH
17676: LD_INT 4
17678: MOD
17679: PUSH
17680: LD_INT 1
17682: PLUS
17683: PPUSH
17684: CALL_OW 259
17688: PUSH
17689: LD_INT 1
17691: PLUS
17692: PPUSH
17693: CALL_OW 237
17697: GO 17599
17699: POP
17700: POP
// end ;
17701: PPOPN 3
17703: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17704: LD_EXP 36
17708: PUSH
17709: LD_EXP 44
17713: AND
17714: IFFALSE 17734
17716: GO 17718
17718: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17719: LD_INT 4
17721: PPUSH
17722: LD_OWVAR 2
17726: PPUSH
17727: LD_INT 0
17729: PPUSH
17730: CALL_OW 324
17734: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17735: LD_EXP 36
17739: PUSH
17740: LD_EXP 73
17744: AND
17745: IFFALSE 17765
17747: GO 17749
17749: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17750: LD_INT 19
17752: PPUSH
17753: LD_OWVAR 2
17757: PPUSH
17758: LD_INT 0
17760: PPUSH
17761: CALL_OW 324
17765: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17766: LD_EXP 36
17770: PUSH
17771: LD_EXP 45
17775: AND
17776: IFFALSE 17878
17778: GO 17780
17780: DISABLE
17781: LD_INT 0
17783: PPUSH
17784: PPUSH
// begin enable ;
17785: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17786: LD_ADDR_VAR 0 2
17790: PUSH
17791: LD_INT 22
17793: PUSH
17794: LD_OWVAR 2
17798: PUSH
17799: EMPTY
17800: LIST
17801: LIST
17802: PUSH
17803: LD_INT 2
17805: PUSH
17806: LD_INT 34
17808: PUSH
17809: LD_INT 11
17811: PUSH
17812: EMPTY
17813: LIST
17814: LIST
17815: PUSH
17816: LD_INT 34
17818: PUSH
17819: LD_INT 30
17821: PUSH
17822: EMPTY
17823: LIST
17824: LIST
17825: PUSH
17826: EMPTY
17827: LIST
17828: LIST
17829: LIST
17830: PUSH
17831: EMPTY
17832: LIST
17833: LIST
17834: PPUSH
17835: CALL_OW 69
17839: ST_TO_ADDR
// if not tmp then
17840: LD_VAR 0 2
17844: NOT
17845: IFFALSE 17849
// exit ;
17847: GO 17878
// for i in tmp do
17849: LD_ADDR_VAR 0 1
17853: PUSH
17854: LD_VAR 0 2
17858: PUSH
17859: FOR_IN
17860: IFFALSE 17876
// begin SetLives ( i , 0 ) ;
17862: LD_VAR 0 1
17866: PPUSH
17867: LD_INT 0
17869: PPUSH
17870: CALL_OW 234
// end ;
17874: GO 17859
17876: POP
17877: POP
// end ;
17878: PPOPN 2
17880: END
// every 0 0$1 trigger StreamModeActive and sBunker do
17881: LD_EXP 36
17885: PUSH
17886: LD_EXP 46
17890: AND
17891: IFFALSE 17911
17893: GO 17895
17895: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
17896: LD_INT 32
17898: PPUSH
17899: LD_OWVAR 2
17903: PPUSH
17904: LD_INT 0
17906: PPUSH
17907: CALL_OW 324
17911: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
17912: LD_EXP 36
17916: PUSH
17917: LD_EXP 47
17921: AND
17922: IFFALSE 18103
17924: GO 17926
17926: DISABLE
17927: LD_INT 0
17929: PPUSH
17930: PPUSH
17931: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
17932: LD_ADDR_VAR 0 2
17936: PUSH
17937: LD_INT 22
17939: PUSH
17940: LD_OWVAR 2
17944: PUSH
17945: EMPTY
17946: LIST
17947: LIST
17948: PUSH
17949: LD_INT 33
17951: PUSH
17952: LD_INT 3
17954: PUSH
17955: EMPTY
17956: LIST
17957: LIST
17958: PUSH
17959: EMPTY
17960: LIST
17961: LIST
17962: PPUSH
17963: CALL_OW 69
17967: ST_TO_ADDR
// if not tmp then
17968: LD_VAR 0 2
17972: NOT
17973: IFFALSE 17977
// exit ;
17975: GO 18103
// side := 0 ;
17977: LD_ADDR_VAR 0 3
17981: PUSH
17982: LD_INT 0
17984: ST_TO_ADDR
// for i := 1 to 8 do
17985: LD_ADDR_VAR 0 1
17989: PUSH
17990: DOUBLE
17991: LD_INT 1
17993: DEC
17994: ST_TO_ADDR
17995: LD_INT 8
17997: PUSH
17998: FOR_TO
17999: IFFALSE 18047
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18001: LD_OWVAR 2
18005: PUSH
18006: LD_VAR 0 1
18010: NONEQUAL
18011: PUSH
18012: LD_OWVAR 2
18016: PPUSH
18017: LD_VAR 0 1
18021: PPUSH
18022: CALL_OW 81
18026: PUSH
18027: LD_INT 2
18029: EQUAL
18030: AND
18031: IFFALSE 18045
// begin side := i ;
18033: LD_ADDR_VAR 0 3
18037: PUSH
18038: LD_VAR 0 1
18042: ST_TO_ADDR
// break ;
18043: GO 18047
// end ;
18045: GO 17998
18047: POP
18048: POP
// if not side then
18049: LD_VAR 0 3
18053: NOT
18054: IFFALSE 18058
// exit ;
18056: GO 18103
// for i := 1 to tmp do
18058: LD_ADDR_VAR 0 1
18062: PUSH
18063: DOUBLE
18064: LD_INT 1
18066: DEC
18067: ST_TO_ADDR
18068: LD_VAR 0 2
18072: PUSH
18073: FOR_TO
18074: IFFALSE 18101
// if Prob ( 60 ) then
18076: LD_INT 60
18078: PPUSH
18079: CALL_OW 13
18083: IFFALSE 18099
// SetSide ( i , side ) ;
18085: LD_VAR 0 1
18089: PPUSH
18090: LD_VAR 0 3
18094: PPUSH
18095: CALL_OW 235
18099: GO 18073
18101: POP
18102: POP
// end ;
18103: PPOPN 3
18105: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18106: LD_EXP 36
18110: PUSH
18111: LD_EXP 49
18115: AND
18116: IFFALSE 18235
18118: GO 18120
18120: DISABLE
18121: LD_INT 0
18123: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18124: LD_ADDR_VAR 0 1
18128: PUSH
18129: LD_INT 22
18131: PUSH
18132: LD_OWVAR 2
18136: PUSH
18137: EMPTY
18138: LIST
18139: LIST
18140: PUSH
18141: LD_INT 21
18143: PUSH
18144: LD_INT 1
18146: PUSH
18147: EMPTY
18148: LIST
18149: LIST
18150: PUSH
18151: LD_INT 3
18153: PUSH
18154: LD_INT 23
18156: PUSH
18157: LD_INT 0
18159: PUSH
18160: EMPTY
18161: LIST
18162: LIST
18163: PUSH
18164: EMPTY
18165: LIST
18166: LIST
18167: PUSH
18168: EMPTY
18169: LIST
18170: LIST
18171: LIST
18172: PPUSH
18173: CALL_OW 69
18177: PUSH
18178: FOR_IN
18179: IFFALSE 18233
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18181: LD_VAR 0 1
18185: PPUSH
18186: CALL_OW 257
18190: PUSH
18191: LD_INT 1
18193: PUSH
18194: LD_INT 2
18196: PUSH
18197: LD_INT 3
18199: PUSH
18200: LD_INT 4
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: LIST
18207: LIST
18208: IN
18209: IFFALSE 18231
// SetClass ( un , rand ( 1 , 4 ) ) ;
18211: LD_VAR 0 1
18215: PPUSH
18216: LD_INT 1
18218: PPUSH
18219: LD_INT 4
18221: PPUSH
18222: CALL_OW 12
18226: PPUSH
18227: CALL_OW 336
18231: GO 18178
18233: POP
18234: POP
// end ;
18235: PPOPN 1
18237: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18238: LD_EXP 36
18242: PUSH
18243: LD_EXP 48
18247: AND
18248: IFFALSE 18327
18250: GO 18252
18252: DISABLE
18253: LD_INT 0
18255: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18256: LD_ADDR_VAR 0 1
18260: PUSH
18261: LD_INT 22
18263: PUSH
18264: LD_OWVAR 2
18268: PUSH
18269: EMPTY
18270: LIST
18271: LIST
18272: PUSH
18273: LD_INT 21
18275: PUSH
18276: LD_INT 3
18278: PUSH
18279: EMPTY
18280: LIST
18281: LIST
18282: PUSH
18283: EMPTY
18284: LIST
18285: LIST
18286: PPUSH
18287: CALL_OW 69
18291: ST_TO_ADDR
// if not tmp then
18292: LD_VAR 0 1
18296: NOT
18297: IFFALSE 18301
// exit ;
18299: GO 18327
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18301: LD_VAR 0 1
18305: PUSH
18306: LD_INT 1
18308: PPUSH
18309: LD_VAR 0 1
18313: PPUSH
18314: CALL_OW 12
18318: ARRAY
18319: PPUSH
18320: LD_INT 100
18322: PPUSH
18323: CALL_OW 234
// end ;
18327: PPOPN 1
18329: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18330: LD_EXP 36
18334: PUSH
18335: LD_EXP 50
18339: AND
18340: IFFALSE 18438
18342: GO 18344
18344: DISABLE
18345: LD_INT 0
18347: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18348: LD_ADDR_VAR 0 1
18352: PUSH
18353: LD_INT 22
18355: PUSH
18356: LD_OWVAR 2
18360: PUSH
18361: EMPTY
18362: LIST
18363: LIST
18364: PUSH
18365: LD_INT 21
18367: PUSH
18368: LD_INT 1
18370: PUSH
18371: EMPTY
18372: LIST
18373: LIST
18374: PUSH
18375: EMPTY
18376: LIST
18377: LIST
18378: PPUSH
18379: CALL_OW 69
18383: ST_TO_ADDR
// if not tmp then
18384: LD_VAR 0 1
18388: NOT
18389: IFFALSE 18393
// exit ;
18391: GO 18438
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18393: LD_VAR 0 1
18397: PUSH
18398: LD_INT 1
18400: PPUSH
18401: LD_VAR 0 1
18405: PPUSH
18406: CALL_OW 12
18410: ARRAY
18411: PPUSH
18412: LD_INT 1
18414: PPUSH
18415: LD_INT 4
18417: PPUSH
18418: CALL_OW 12
18422: PPUSH
18423: LD_INT 3000
18425: PPUSH
18426: LD_INT 9000
18428: PPUSH
18429: CALL_OW 12
18433: PPUSH
18434: CALL_OW 492
// end ;
18438: PPOPN 1
18440: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18441: LD_EXP 36
18445: PUSH
18446: LD_EXP 51
18450: AND
18451: IFFALSE 18471
18453: GO 18455
18455: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18456: LD_INT 1
18458: PPUSH
18459: LD_OWVAR 2
18463: PPUSH
18464: LD_INT 0
18466: PPUSH
18467: CALL_OW 324
18471: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18472: LD_EXP 36
18476: PUSH
18477: LD_EXP 52
18481: AND
18482: IFFALSE 18565
18484: GO 18486
18486: DISABLE
18487: LD_INT 0
18489: PPUSH
18490: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18491: LD_ADDR_VAR 0 2
18495: PUSH
18496: LD_INT 22
18498: PUSH
18499: LD_OWVAR 2
18503: PUSH
18504: EMPTY
18505: LIST
18506: LIST
18507: PUSH
18508: LD_INT 21
18510: PUSH
18511: LD_INT 3
18513: PUSH
18514: EMPTY
18515: LIST
18516: LIST
18517: PUSH
18518: EMPTY
18519: LIST
18520: LIST
18521: PPUSH
18522: CALL_OW 69
18526: ST_TO_ADDR
// if not tmp then
18527: LD_VAR 0 2
18531: NOT
18532: IFFALSE 18536
// exit ;
18534: GO 18565
// for i in tmp do
18536: LD_ADDR_VAR 0 1
18540: PUSH
18541: LD_VAR 0 2
18545: PUSH
18546: FOR_IN
18547: IFFALSE 18563
// SetBLevel ( i , 10 ) ;
18549: LD_VAR 0 1
18553: PPUSH
18554: LD_INT 10
18556: PPUSH
18557: CALL_OW 241
18561: GO 18546
18563: POP
18564: POP
// end ;
18565: PPOPN 2
18567: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18568: LD_EXP 36
18572: PUSH
18573: LD_EXP 53
18577: AND
18578: IFFALSE 18689
18580: GO 18582
18582: DISABLE
18583: LD_INT 0
18585: PPUSH
18586: PPUSH
18587: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18588: LD_ADDR_VAR 0 3
18592: PUSH
18593: LD_INT 22
18595: PUSH
18596: LD_OWVAR 2
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: PUSH
18605: LD_INT 25
18607: PUSH
18608: LD_INT 1
18610: PUSH
18611: EMPTY
18612: LIST
18613: LIST
18614: PUSH
18615: EMPTY
18616: LIST
18617: LIST
18618: PPUSH
18619: CALL_OW 69
18623: ST_TO_ADDR
// if not tmp then
18624: LD_VAR 0 3
18628: NOT
18629: IFFALSE 18633
// exit ;
18631: GO 18689
// un := tmp [ rand ( 1 , tmp ) ] ;
18633: LD_ADDR_VAR 0 2
18637: PUSH
18638: LD_VAR 0 3
18642: PUSH
18643: LD_INT 1
18645: PPUSH
18646: LD_VAR 0 3
18650: PPUSH
18651: CALL_OW 12
18655: ARRAY
18656: ST_TO_ADDR
// if Crawls ( un ) then
18657: LD_VAR 0 2
18661: PPUSH
18662: CALL_OW 318
18666: IFFALSE 18677
// ComWalk ( un ) ;
18668: LD_VAR 0 2
18672: PPUSH
18673: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18677: LD_VAR 0 2
18681: PPUSH
18682: LD_INT 5
18684: PPUSH
18685: CALL_OW 336
// end ;
18689: PPOPN 3
18691: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
18692: LD_EXP 36
18696: PUSH
18697: LD_EXP 54
18701: AND
18702: PUSH
18703: LD_OWVAR 67
18707: PUSH
18708: LD_INT 3
18710: LESS
18711: AND
18712: IFFALSE 18731
18714: GO 18716
18716: DISABLE
// Difficulty := Difficulty + 1 ;
18717: LD_ADDR_OWVAR 67
18721: PUSH
18722: LD_OWVAR 67
18726: PUSH
18727: LD_INT 1
18729: PLUS
18730: ST_TO_ADDR
18731: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18732: LD_EXP 36
18736: PUSH
18737: LD_EXP 55
18741: AND
18742: IFFALSE 18845
18744: GO 18746
18746: DISABLE
18747: LD_INT 0
18749: PPUSH
// begin for i := 1 to 5 do
18750: LD_ADDR_VAR 0 1
18754: PUSH
18755: DOUBLE
18756: LD_INT 1
18758: DEC
18759: ST_TO_ADDR
18760: LD_INT 5
18762: PUSH
18763: FOR_TO
18764: IFFALSE 18843
// begin uc_nation := nation_nature ;
18766: LD_ADDR_OWVAR 21
18770: PUSH
18771: LD_INT 0
18773: ST_TO_ADDR
// uc_side := 0 ;
18774: LD_ADDR_OWVAR 20
18778: PUSH
18779: LD_INT 0
18781: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18782: LD_ADDR_OWVAR 29
18786: PUSH
18787: LD_INT 12
18789: PUSH
18790: LD_INT 12
18792: PUSH
18793: EMPTY
18794: LIST
18795: LIST
18796: ST_TO_ADDR
// hc_agressivity := 20 ;
18797: LD_ADDR_OWVAR 35
18801: PUSH
18802: LD_INT 20
18804: ST_TO_ADDR
// hc_class := class_tiger ;
18805: LD_ADDR_OWVAR 28
18809: PUSH
18810: LD_INT 14
18812: ST_TO_ADDR
// hc_gallery :=  ;
18813: LD_ADDR_OWVAR 33
18817: PUSH
18818: LD_STRING 
18820: ST_TO_ADDR
// hc_name :=  ;
18821: LD_ADDR_OWVAR 26
18825: PUSH
18826: LD_STRING 
18828: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
18829: CALL_OW 44
18833: PPUSH
18834: LD_INT 0
18836: PPUSH
18837: CALL_OW 51
// end ;
18841: GO 18763
18843: POP
18844: POP
// end ;
18845: PPOPN 1
18847: END
// every 0 0$1 trigger StreamModeActive and sBomb do
18848: LD_EXP 36
18852: PUSH
18853: LD_EXP 56
18857: AND
18858: IFFALSE 18867
18860: GO 18862
18862: DISABLE
// StreamSibBomb ;
18863: CALL 18868 0 0
18867: END
// export function StreamSibBomb ; var i , x , y ; begin
18868: LD_INT 0
18870: PPUSH
18871: PPUSH
18872: PPUSH
18873: PPUSH
// result := false ;
18874: LD_ADDR_VAR 0 1
18878: PUSH
18879: LD_INT 0
18881: ST_TO_ADDR
// for i := 1 to 16 do
18882: LD_ADDR_VAR 0 2
18886: PUSH
18887: DOUBLE
18888: LD_INT 1
18890: DEC
18891: ST_TO_ADDR
18892: LD_INT 16
18894: PUSH
18895: FOR_TO
18896: IFFALSE 19095
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18898: LD_ADDR_VAR 0 3
18902: PUSH
18903: LD_INT 10
18905: PUSH
18906: LD_INT 20
18908: PUSH
18909: LD_INT 30
18911: PUSH
18912: LD_INT 40
18914: PUSH
18915: LD_INT 50
18917: PUSH
18918: LD_INT 60
18920: PUSH
18921: LD_INT 70
18923: PUSH
18924: LD_INT 80
18926: PUSH
18927: LD_INT 90
18929: PUSH
18930: LD_INT 100
18932: PUSH
18933: LD_INT 110
18935: PUSH
18936: LD_INT 120
18938: PUSH
18939: LD_INT 130
18941: PUSH
18942: LD_INT 140
18944: PUSH
18945: LD_INT 150
18947: PUSH
18948: EMPTY
18949: LIST
18950: LIST
18951: LIST
18952: LIST
18953: LIST
18954: LIST
18955: LIST
18956: LIST
18957: LIST
18958: LIST
18959: LIST
18960: LIST
18961: LIST
18962: LIST
18963: LIST
18964: PUSH
18965: LD_INT 1
18967: PPUSH
18968: LD_INT 15
18970: PPUSH
18971: CALL_OW 12
18975: ARRAY
18976: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
18977: LD_ADDR_VAR 0 4
18981: PUSH
18982: LD_INT 10
18984: PUSH
18985: LD_INT 20
18987: PUSH
18988: LD_INT 30
18990: PUSH
18991: LD_INT 40
18993: PUSH
18994: LD_INT 50
18996: PUSH
18997: LD_INT 60
18999: PUSH
19000: LD_INT 70
19002: PUSH
19003: LD_INT 80
19005: PUSH
19006: LD_INT 90
19008: PUSH
19009: LD_INT 100
19011: PUSH
19012: LD_INT 110
19014: PUSH
19015: LD_INT 120
19017: PUSH
19018: LD_INT 130
19020: PUSH
19021: LD_INT 140
19023: PUSH
19024: LD_INT 150
19026: PUSH
19027: EMPTY
19028: LIST
19029: LIST
19030: LIST
19031: LIST
19032: LIST
19033: LIST
19034: LIST
19035: LIST
19036: LIST
19037: LIST
19038: LIST
19039: LIST
19040: LIST
19041: LIST
19042: LIST
19043: PUSH
19044: LD_INT 1
19046: PPUSH
19047: LD_INT 15
19049: PPUSH
19050: CALL_OW 12
19054: ARRAY
19055: ST_TO_ADDR
// if ValidHex ( x , y ) then
19056: LD_VAR 0 3
19060: PPUSH
19061: LD_VAR 0 4
19065: PPUSH
19066: CALL_OW 488
19070: IFFALSE 19093
// begin result := [ x , y ] ;
19072: LD_ADDR_VAR 0 1
19076: PUSH
19077: LD_VAR 0 3
19081: PUSH
19082: LD_VAR 0 4
19086: PUSH
19087: EMPTY
19088: LIST
19089: LIST
19090: ST_TO_ADDR
// break ;
19091: GO 19095
// end ; end ;
19093: GO 18895
19095: POP
19096: POP
// if result then
19097: LD_VAR 0 1
19101: IFFALSE 19161
// begin ToLua ( playSibBomb() ) ;
19103: LD_STRING playSibBomb()
19105: PPUSH
19106: CALL_OW 559
// wait ( 0 0$14 ) ;
19110: LD_INT 490
19112: PPUSH
19113: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19117: LD_VAR 0 1
19121: PUSH
19122: LD_INT 1
19124: ARRAY
19125: PPUSH
19126: LD_VAR 0 1
19130: PUSH
19131: LD_INT 2
19133: ARRAY
19134: PPUSH
19135: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19139: LD_VAR 0 1
19143: PUSH
19144: LD_INT 1
19146: ARRAY
19147: PPUSH
19148: LD_VAR 0 1
19152: PUSH
19153: LD_INT 2
19155: ARRAY
19156: PPUSH
19157: CALL_OW 429
// end ; end ;
19161: LD_VAR 0 1
19165: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19166: LD_EXP 36
19170: PUSH
19171: LD_EXP 58
19175: AND
19176: IFFALSE 19188
19178: GO 19180
19180: DISABLE
// YouLost (  ) ;
19181: LD_STRING 
19183: PPUSH
19184: CALL_OW 104
19188: END
// every 0 0$1 trigger StreamModeActive and sFog do
19189: LD_EXP 36
19193: PUSH
19194: LD_EXP 57
19198: AND
19199: IFFALSE 19213
19201: GO 19203
19203: DISABLE
// FogOff ( your_side ) ;
19204: LD_OWVAR 2
19208: PPUSH
19209: CALL_OW 344
19213: END
// every 0 0$1 trigger StreamModeActive and sSun do
19214: LD_EXP 36
19218: PUSH
19219: LD_EXP 59
19223: AND
19224: IFFALSE 19252
19226: GO 19228
19228: DISABLE
// begin solar_recharge_percent := 0 ;
19229: LD_ADDR_OWVAR 79
19233: PUSH
19234: LD_INT 0
19236: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19237: LD_INT 10500
19239: PPUSH
19240: CALL_OW 67
// solar_recharge_percent := 100 ;
19244: LD_ADDR_OWVAR 79
19248: PUSH
19249: LD_INT 100
19251: ST_TO_ADDR
// end ;
19252: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19253: LD_EXP 36
19257: PUSH
19258: LD_EXP 60
19262: AND
19263: IFFALSE 19502
19265: GO 19267
19267: DISABLE
19268: LD_INT 0
19270: PPUSH
19271: PPUSH
19272: PPUSH
// begin tmp := [ ] ;
19273: LD_ADDR_VAR 0 3
19277: PUSH
19278: EMPTY
19279: ST_TO_ADDR
// for i := 1 to 6 do
19280: LD_ADDR_VAR 0 1
19284: PUSH
19285: DOUBLE
19286: LD_INT 1
19288: DEC
19289: ST_TO_ADDR
19290: LD_INT 6
19292: PUSH
19293: FOR_TO
19294: IFFALSE 19399
// begin uc_nation := nation_nature ;
19296: LD_ADDR_OWVAR 21
19300: PUSH
19301: LD_INT 0
19303: ST_TO_ADDR
// uc_side := 0 ;
19304: LD_ADDR_OWVAR 20
19308: PUSH
19309: LD_INT 0
19311: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19312: LD_ADDR_OWVAR 29
19316: PUSH
19317: LD_INT 12
19319: PUSH
19320: LD_INT 12
19322: PUSH
19323: EMPTY
19324: LIST
19325: LIST
19326: ST_TO_ADDR
// hc_agressivity := 20 ;
19327: LD_ADDR_OWVAR 35
19331: PUSH
19332: LD_INT 20
19334: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19335: LD_ADDR_OWVAR 28
19339: PUSH
19340: LD_INT 17
19342: ST_TO_ADDR
// hc_gallery :=  ;
19343: LD_ADDR_OWVAR 33
19347: PUSH
19348: LD_STRING 
19350: ST_TO_ADDR
// hc_name :=  ;
19351: LD_ADDR_OWVAR 26
19355: PUSH
19356: LD_STRING 
19358: ST_TO_ADDR
// un := CreateHuman ;
19359: LD_ADDR_VAR 0 2
19363: PUSH
19364: CALL_OW 44
19368: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19369: LD_VAR 0 2
19373: PPUSH
19374: LD_INT 1
19376: PPUSH
19377: CALL_OW 51
// tmp := tmp ^ un ;
19381: LD_ADDR_VAR 0 3
19385: PUSH
19386: LD_VAR 0 3
19390: PUSH
19391: LD_VAR 0 2
19395: ADD
19396: ST_TO_ADDR
// end ;
19397: GO 19293
19399: POP
19400: POP
// repeat wait ( 0 0$1 ) ;
19401: LD_INT 35
19403: PPUSH
19404: CALL_OW 67
// for un in tmp do
19408: LD_ADDR_VAR 0 2
19412: PUSH
19413: LD_VAR 0 3
19417: PUSH
19418: FOR_IN
19419: IFFALSE 19493
// begin if IsDead ( un ) then
19421: LD_VAR 0 2
19425: PPUSH
19426: CALL_OW 301
19430: IFFALSE 19450
// begin tmp := tmp diff un ;
19432: LD_ADDR_VAR 0 3
19436: PUSH
19437: LD_VAR 0 3
19441: PUSH
19442: LD_VAR 0 2
19446: DIFF
19447: ST_TO_ADDR
// continue ;
19448: GO 19418
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19450: LD_VAR 0 2
19454: PPUSH
19455: LD_INT 3
19457: PUSH
19458: LD_INT 22
19460: PUSH
19461: LD_INT 0
19463: PUSH
19464: EMPTY
19465: LIST
19466: LIST
19467: PUSH
19468: EMPTY
19469: LIST
19470: LIST
19471: PPUSH
19472: CALL_OW 69
19476: PPUSH
19477: LD_VAR 0 2
19481: PPUSH
19482: CALL_OW 74
19486: PPUSH
19487: CALL_OW 115
// end ;
19491: GO 19418
19493: POP
19494: POP
// until not tmp ;
19495: LD_VAR 0 3
19499: NOT
19500: IFFALSE 19401
// end ;
19502: PPOPN 3
19504: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19505: LD_EXP 36
19509: PUSH
19510: LD_EXP 61
19514: AND
19515: IFFALSE 19569
19517: GO 19519
19519: DISABLE
// begin ToLua ( displayTroll(); ) ;
19520: LD_STRING displayTroll();
19522: PPUSH
19523: CALL_OW 559
// wait ( 3 3$00 ) ;
19527: LD_INT 6300
19529: PPUSH
19530: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19534: LD_STRING hideTroll();
19536: PPUSH
19537: CALL_OW 559
// wait ( 1 1$00 ) ;
19541: LD_INT 2100
19543: PPUSH
19544: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19548: LD_STRING displayTroll();
19550: PPUSH
19551: CALL_OW 559
// wait ( 1 1$00 ) ;
19555: LD_INT 2100
19557: PPUSH
19558: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19562: LD_STRING hideTroll();
19564: PPUSH
19565: CALL_OW 559
// end ;
19569: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19570: LD_EXP 36
19574: PUSH
19575: LD_EXP 62
19579: AND
19580: IFFALSE 19643
19582: GO 19584
19584: DISABLE
19585: LD_INT 0
19587: PPUSH
// begin p := 0 ;
19588: LD_ADDR_VAR 0 1
19592: PUSH
19593: LD_INT 0
19595: ST_TO_ADDR
// repeat game_speed := 1 ;
19596: LD_ADDR_OWVAR 65
19600: PUSH
19601: LD_INT 1
19603: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19604: LD_INT 35
19606: PPUSH
19607: CALL_OW 67
// p := p + 1 ;
19611: LD_ADDR_VAR 0 1
19615: PUSH
19616: LD_VAR 0 1
19620: PUSH
19621: LD_INT 1
19623: PLUS
19624: ST_TO_ADDR
// until p >= 60 ;
19625: LD_VAR 0 1
19629: PUSH
19630: LD_INT 60
19632: GREATEREQUAL
19633: IFFALSE 19596
// game_speed := 4 ;
19635: LD_ADDR_OWVAR 65
19639: PUSH
19640: LD_INT 4
19642: ST_TO_ADDR
// end ;
19643: PPOPN 1
19645: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19646: LD_EXP 36
19650: PUSH
19651: LD_EXP 63
19655: AND
19656: IFFALSE 19802
19658: GO 19660
19660: DISABLE
19661: LD_INT 0
19663: PPUSH
19664: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19665: LD_ADDR_VAR 0 1
19669: PUSH
19670: LD_INT 22
19672: PUSH
19673: LD_OWVAR 2
19677: PUSH
19678: EMPTY
19679: LIST
19680: LIST
19681: PUSH
19682: LD_INT 2
19684: PUSH
19685: LD_INT 30
19687: PUSH
19688: LD_INT 0
19690: PUSH
19691: EMPTY
19692: LIST
19693: LIST
19694: PUSH
19695: LD_INT 30
19697: PUSH
19698: LD_INT 1
19700: PUSH
19701: EMPTY
19702: LIST
19703: LIST
19704: PUSH
19705: EMPTY
19706: LIST
19707: LIST
19708: LIST
19709: PUSH
19710: EMPTY
19711: LIST
19712: LIST
19713: PPUSH
19714: CALL_OW 69
19718: ST_TO_ADDR
// if not depot then
19719: LD_VAR 0 1
19723: NOT
19724: IFFALSE 19728
// exit ;
19726: GO 19802
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19728: LD_ADDR_VAR 0 2
19732: PUSH
19733: LD_VAR 0 1
19737: PUSH
19738: LD_INT 1
19740: PPUSH
19741: LD_VAR 0 1
19745: PPUSH
19746: CALL_OW 12
19750: ARRAY
19751: PPUSH
19752: CALL_OW 274
19756: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19757: LD_VAR 0 2
19761: PPUSH
19762: LD_INT 1
19764: PPUSH
19765: LD_INT 0
19767: PPUSH
19768: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19772: LD_VAR 0 2
19776: PPUSH
19777: LD_INT 2
19779: PPUSH
19780: LD_INT 0
19782: PPUSH
19783: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19787: LD_VAR 0 2
19791: PPUSH
19792: LD_INT 3
19794: PPUSH
19795: LD_INT 0
19797: PPUSH
19798: CALL_OW 277
// end ;
19802: PPOPN 2
19804: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19805: LD_EXP 36
19809: PUSH
19810: LD_EXP 64
19814: AND
19815: IFFALSE 19912
19817: GO 19819
19819: DISABLE
19820: LD_INT 0
19822: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19823: LD_ADDR_VAR 0 1
19827: PUSH
19828: LD_INT 22
19830: PUSH
19831: LD_OWVAR 2
19835: PUSH
19836: EMPTY
19837: LIST
19838: LIST
19839: PUSH
19840: LD_INT 21
19842: PUSH
19843: LD_INT 1
19845: PUSH
19846: EMPTY
19847: LIST
19848: LIST
19849: PUSH
19850: LD_INT 3
19852: PUSH
19853: LD_INT 23
19855: PUSH
19856: LD_INT 0
19858: PUSH
19859: EMPTY
19860: LIST
19861: LIST
19862: PUSH
19863: EMPTY
19864: LIST
19865: LIST
19866: PUSH
19867: EMPTY
19868: LIST
19869: LIST
19870: LIST
19871: PPUSH
19872: CALL_OW 69
19876: ST_TO_ADDR
// if not tmp then
19877: LD_VAR 0 1
19881: NOT
19882: IFFALSE 19886
// exit ;
19884: GO 19912
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
19886: LD_VAR 0 1
19890: PUSH
19891: LD_INT 1
19893: PPUSH
19894: LD_VAR 0 1
19898: PPUSH
19899: CALL_OW 12
19903: ARRAY
19904: PPUSH
19905: LD_INT 200
19907: PPUSH
19908: CALL_OW 234
// end ;
19912: PPOPN 1
19914: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
19915: LD_EXP 36
19919: PUSH
19920: LD_EXP 65
19924: AND
19925: IFFALSE 20004
19927: GO 19929
19929: DISABLE
19930: LD_INT 0
19932: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
19933: LD_ADDR_VAR 0 1
19937: PUSH
19938: LD_INT 22
19940: PUSH
19941: LD_OWVAR 2
19945: PUSH
19946: EMPTY
19947: LIST
19948: LIST
19949: PUSH
19950: LD_INT 21
19952: PUSH
19953: LD_INT 2
19955: PUSH
19956: EMPTY
19957: LIST
19958: LIST
19959: PUSH
19960: EMPTY
19961: LIST
19962: LIST
19963: PPUSH
19964: CALL_OW 69
19968: ST_TO_ADDR
// if not tmp then
19969: LD_VAR 0 1
19973: NOT
19974: IFFALSE 19978
// exit ;
19976: GO 20004
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
19978: LD_VAR 0 1
19982: PUSH
19983: LD_INT 1
19985: PPUSH
19986: LD_VAR 0 1
19990: PPUSH
19991: CALL_OW 12
19995: ARRAY
19996: PPUSH
19997: LD_INT 60
19999: PPUSH
20000: CALL_OW 234
// end ;
20004: PPOPN 1
20006: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20007: LD_EXP 36
20011: PUSH
20012: LD_EXP 66
20016: AND
20017: IFFALSE 20116
20019: GO 20021
20021: DISABLE
20022: LD_INT 0
20024: PPUSH
20025: PPUSH
// begin enable ;
20026: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20027: LD_ADDR_VAR 0 1
20031: PUSH
20032: LD_INT 22
20034: PUSH
20035: LD_OWVAR 2
20039: PUSH
20040: EMPTY
20041: LIST
20042: LIST
20043: PUSH
20044: LD_INT 61
20046: PUSH
20047: EMPTY
20048: LIST
20049: PUSH
20050: LD_INT 33
20052: PUSH
20053: LD_INT 2
20055: PUSH
20056: EMPTY
20057: LIST
20058: LIST
20059: PUSH
20060: EMPTY
20061: LIST
20062: LIST
20063: LIST
20064: PPUSH
20065: CALL_OW 69
20069: ST_TO_ADDR
// if not tmp then
20070: LD_VAR 0 1
20074: NOT
20075: IFFALSE 20079
// exit ;
20077: GO 20116
// for i in tmp do
20079: LD_ADDR_VAR 0 2
20083: PUSH
20084: LD_VAR 0 1
20088: PUSH
20089: FOR_IN
20090: IFFALSE 20114
// if IsControledBy ( i ) then
20092: LD_VAR 0 2
20096: PPUSH
20097: CALL_OW 312
20101: IFFALSE 20112
// ComUnlink ( i ) ;
20103: LD_VAR 0 2
20107: PPUSH
20108: CALL_OW 136
20112: GO 20089
20114: POP
20115: POP
// end ;
20116: PPOPN 2
20118: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20119: LD_EXP 36
20123: PUSH
20124: LD_EXP 67
20128: AND
20129: IFFALSE 20269
20131: GO 20133
20133: DISABLE
20134: LD_INT 0
20136: PPUSH
20137: PPUSH
// begin ToLua ( displayPowell(); ) ;
20138: LD_STRING displayPowell();
20140: PPUSH
20141: CALL_OW 559
// uc_side := 0 ;
20145: LD_ADDR_OWVAR 20
20149: PUSH
20150: LD_INT 0
20152: ST_TO_ADDR
// uc_nation := 2 ;
20153: LD_ADDR_OWVAR 21
20157: PUSH
20158: LD_INT 2
20160: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20161: LD_ADDR_OWVAR 37
20165: PUSH
20166: LD_INT 14
20168: ST_TO_ADDR
// vc_engine := engine_siberite ;
20169: LD_ADDR_OWVAR 39
20173: PUSH
20174: LD_INT 3
20176: ST_TO_ADDR
// vc_control := control_apeman ;
20177: LD_ADDR_OWVAR 38
20181: PUSH
20182: LD_INT 5
20184: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20185: LD_ADDR_OWVAR 40
20189: PUSH
20190: LD_INT 29
20192: ST_TO_ADDR
// un := CreateVehicle ;
20193: LD_ADDR_VAR 0 2
20197: PUSH
20198: CALL_OW 45
20202: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20203: LD_VAR 0 2
20207: PPUSH
20208: LD_INT 1
20210: PPUSH
20211: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20215: LD_INT 35
20217: PPUSH
20218: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20222: LD_VAR 0 2
20226: PPUSH
20227: LD_INT 22
20229: PUSH
20230: LD_OWVAR 2
20234: PUSH
20235: EMPTY
20236: LIST
20237: LIST
20238: PPUSH
20239: CALL_OW 69
20243: PPUSH
20244: LD_VAR 0 2
20248: PPUSH
20249: CALL_OW 74
20253: PPUSH
20254: CALL_OW 115
// until IsDead ( un ) ;
20258: LD_VAR 0 2
20262: PPUSH
20263: CALL_OW 301
20267: IFFALSE 20215
// end ;
20269: PPOPN 2
20271: END
// every 0 0$1 trigger StreamModeActive and sStu do
20272: LD_EXP 36
20276: PUSH
20277: LD_EXP 75
20281: AND
20282: IFFALSE 20298
20284: GO 20286
20286: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20287: LD_STRING displayStucuk();
20289: PPUSH
20290: CALL_OW 559
// ResetFog ;
20294: CALL_OW 335
// end ;
20298: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20299: LD_EXP 36
20303: PUSH
20304: LD_EXP 68
20308: AND
20309: IFFALSE 20450
20311: GO 20313
20313: DISABLE
20314: LD_INT 0
20316: PPUSH
20317: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20318: LD_ADDR_VAR 0 2
20322: PUSH
20323: LD_INT 22
20325: PUSH
20326: LD_OWVAR 2
20330: PUSH
20331: EMPTY
20332: LIST
20333: LIST
20334: PUSH
20335: LD_INT 21
20337: PUSH
20338: LD_INT 1
20340: PUSH
20341: EMPTY
20342: LIST
20343: LIST
20344: PUSH
20345: EMPTY
20346: LIST
20347: LIST
20348: PPUSH
20349: CALL_OW 69
20353: ST_TO_ADDR
// if not tmp then
20354: LD_VAR 0 2
20358: NOT
20359: IFFALSE 20363
// exit ;
20361: GO 20450
// un := tmp [ rand ( 1 , tmp ) ] ;
20363: LD_ADDR_VAR 0 1
20367: PUSH
20368: LD_VAR 0 2
20372: PUSH
20373: LD_INT 1
20375: PPUSH
20376: LD_VAR 0 2
20380: PPUSH
20381: CALL_OW 12
20385: ARRAY
20386: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20387: LD_VAR 0 1
20391: PPUSH
20392: LD_INT 0
20394: PPUSH
20395: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20399: LD_VAR 0 1
20403: PPUSH
20404: LD_OWVAR 3
20408: PUSH
20409: LD_VAR 0 1
20413: DIFF
20414: PPUSH
20415: LD_VAR 0 1
20419: PPUSH
20420: CALL_OW 74
20424: PPUSH
20425: CALL_OW 115
// wait ( 0 0$20 ) ;
20429: LD_INT 700
20431: PPUSH
20432: CALL_OW 67
// SetSide ( un , your_side ) ;
20436: LD_VAR 0 1
20440: PPUSH
20441: LD_OWVAR 2
20445: PPUSH
20446: CALL_OW 235
// end ;
20450: PPOPN 2
20452: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20453: LD_EXP 36
20457: PUSH
20458: LD_EXP 69
20462: AND
20463: IFFALSE 20569
20465: GO 20467
20467: DISABLE
20468: LD_INT 0
20470: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20471: LD_ADDR_VAR 0 1
20475: PUSH
20476: LD_INT 22
20478: PUSH
20479: LD_OWVAR 2
20483: PUSH
20484: EMPTY
20485: LIST
20486: LIST
20487: PUSH
20488: LD_INT 2
20490: PUSH
20491: LD_INT 30
20493: PUSH
20494: LD_INT 0
20496: PUSH
20497: EMPTY
20498: LIST
20499: LIST
20500: PUSH
20501: LD_INT 30
20503: PUSH
20504: LD_INT 1
20506: PUSH
20507: EMPTY
20508: LIST
20509: LIST
20510: PUSH
20511: EMPTY
20512: LIST
20513: LIST
20514: LIST
20515: PUSH
20516: EMPTY
20517: LIST
20518: LIST
20519: PPUSH
20520: CALL_OW 69
20524: ST_TO_ADDR
// if not depot then
20525: LD_VAR 0 1
20529: NOT
20530: IFFALSE 20534
// exit ;
20532: GO 20569
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20534: LD_VAR 0 1
20538: PUSH
20539: LD_INT 1
20541: ARRAY
20542: PPUSH
20543: CALL_OW 250
20547: PPUSH
20548: LD_VAR 0 1
20552: PUSH
20553: LD_INT 1
20555: ARRAY
20556: PPUSH
20557: CALL_OW 251
20561: PPUSH
20562: LD_INT 70
20564: PPUSH
20565: CALL_OW 495
// end ;
20569: PPOPN 1
20571: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20572: LD_EXP 36
20576: PUSH
20577: LD_EXP 70
20581: AND
20582: IFFALSE 20793
20584: GO 20586
20586: DISABLE
20587: LD_INT 0
20589: PPUSH
20590: PPUSH
20591: PPUSH
20592: PPUSH
20593: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20594: LD_ADDR_VAR 0 5
20598: PUSH
20599: LD_INT 22
20601: PUSH
20602: LD_OWVAR 2
20606: PUSH
20607: EMPTY
20608: LIST
20609: LIST
20610: PUSH
20611: LD_INT 21
20613: PUSH
20614: LD_INT 1
20616: PUSH
20617: EMPTY
20618: LIST
20619: LIST
20620: PUSH
20621: EMPTY
20622: LIST
20623: LIST
20624: PPUSH
20625: CALL_OW 69
20629: ST_TO_ADDR
// if not tmp then
20630: LD_VAR 0 5
20634: NOT
20635: IFFALSE 20639
// exit ;
20637: GO 20793
// for i in tmp do
20639: LD_ADDR_VAR 0 1
20643: PUSH
20644: LD_VAR 0 5
20648: PUSH
20649: FOR_IN
20650: IFFALSE 20791
// begin d := rand ( 0 , 5 ) ;
20652: LD_ADDR_VAR 0 4
20656: PUSH
20657: LD_INT 0
20659: PPUSH
20660: LD_INT 5
20662: PPUSH
20663: CALL_OW 12
20667: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20668: LD_ADDR_VAR 0 2
20672: PUSH
20673: LD_VAR 0 1
20677: PPUSH
20678: CALL_OW 250
20682: PPUSH
20683: LD_VAR 0 4
20687: PPUSH
20688: LD_INT 3
20690: PPUSH
20691: LD_INT 12
20693: PPUSH
20694: CALL_OW 12
20698: PPUSH
20699: CALL_OW 272
20703: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20704: LD_ADDR_VAR 0 3
20708: PUSH
20709: LD_VAR 0 1
20713: PPUSH
20714: CALL_OW 251
20718: PPUSH
20719: LD_VAR 0 4
20723: PPUSH
20724: LD_INT 3
20726: PPUSH
20727: LD_INT 12
20729: PPUSH
20730: CALL_OW 12
20734: PPUSH
20735: CALL_OW 273
20739: ST_TO_ADDR
// if ValidHex ( x , y ) then
20740: LD_VAR 0 2
20744: PPUSH
20745: LD_VAR 0 3
20749: PPUSH
20750: CALL_OW 488
20754: IFFALSE 20789
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20756: LD_VAR 0 1
20760: PPUSH
20761: LD_VAR 0 2
20765: PPUSH
20766: LD_VAR 0 3
20770: PPUSH
20771: LD_INT 3
20773: PPUSH
20774: LD_INT 6
20776: PPUSH
20777: CALL_OW 12
20781: PPUSH
20782: LD_INT 1
20784: PPUSH
20785: CALL_OW 483
// end ;
20789: GO 20649
20791: POP
20792: POP
// end ;
20793: PPOPN 5
20795: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20796: LD_EXP 36
20800: PUSH
20801: LD_EXP 71
20805: AND
20806: IFFALSE 20900
20808: GO 20810
20810: DISABLE
20811: LD_INT 0
20813: PPUSH
20814: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
20815: LD_ADDR_VAR 0 2
20819: PUSH
20820: LD_INT 22
20822: PUSH
20823: LD_OWVAR 2
20827: PUSH
20828: EMPTY
20829: LIST
20830: LIST
20831: PUSH
20832: LD_INT 32
20834: PUSH
20835: LD_INT 1
20837: PUSH
20838: EMPTY
20839: LIST
20840: LIST
20841: PUSH
20842: LD_INT 21
20844: PUSH
20845: LD_INT 2
20847: PUSH
20848: EMPTY
20849: LIST
20850: LIST
20851: PUSH
20852: EMPTY
20853: LIST
20854: LIST
20855: LIST
20856: PPUSH
20857: CALL_OW 69
20861: ST_TO_ADDR
// if not tmp then
20862: LD_VAR 0 2
20866: NOT
20867: IFFALSE 20871
// exit ;
20869: GO 20900
// for i in tmp do
20871: LD_ADDR_VAR 0 1
20875: PUSH
20876: LD_VAR 0 2
20880: PUSH
20881: FOR_IN
20882: IFFALSE 20898
// SetFuel ( i , 0 ) ;
20884: LD_VAR 0 1
20888: PPUSH
20889: LD_INT 0
20891: PPUSH
20892: CALL_OW 240
20896: GO 20881
20898: POP
20899: POP
// end ;
20900: PPOPN 2
20902: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
20903: LD_EXP 36
20907: PUSH
20908: LD_EXP 72
20912: AND
20913: IFFALSE 20979
20915: GO 20917
20917: DISABLE
20918: LD_INT 0
20920: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
20921: LD_ADDR_VAR 0 1
20925: PUSH
20926: LD_INT 22
20928: PUSH
20929: LD_OWVAR 2
20933: PUSH
20934: EMPTY
20935: LIST
20936: LIST
20937: PUSH
20938: LD_INT 30
20940: PUSH
20941: LD_INT 29
20943: PUSH
20944: EMPTY
20945: LIST
20946: LIST
20947: PUSH
20948: EMPTY
20949: LIST
20950: LIST
20951: PPUSH
20952: CALL_OW 69
20956: ST_TO_ADDR
// if not tmp then
20957: LD_VAR 0 1
20961: NOT
20962: IFFALSE 20966
// exit ;
20964: GO 20979
// DestroyUnit ( tmp [ 1 ] ) ;
20966: LD_VAR 0 1
20970: PUSH
20971: LD_INT 1
20973: ARRAY
20974: PPUSH
20975: CALL_OW 65
// end ;
20979: PPOPN 1
20981: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
20982: LD_EXP 36
20986: PUSH
20987: LD_EXP 74
20991: AND
20992: IFFALSE 21121
20994: GO 20996
20996: DISABLE
20997: LD_INT 0
20999: PPUSH
// begin uc_side := 0 ;
21000: LD_ADDR_OWVAR 20
21004: PUSH
21005: LD_INT 0
21007: ST_TO_ADDR
// uc_nation := nation_arabian ;
21008: LD_ADDR_OWVAR 21
21012: PUSH
21013: LD_INT 2
21015: ST_TO_ADDR
// hc_gallery :=  ;
21016: LD_ADDR_OWVAR 33
21020: PUSH
21021: LD_STRING 
21023: ST_TO_ADDR
// hc_name :=  ;
21024: LD_ADDR_OWVAR 26
21028: PUSH
21029: LD_STRING 
21031: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21032: LD_INT 1
21034: PPUSH
21035: LD_INT 11
21037: PPUSH
21038: LD_INT 10
21040: PPUSH
21041: CALL_OW 380
// un := CreateHuman ;
21045: LD_ADDR_VAR 0 1
21049: PUSH
21050: CALL_OW 44
21054: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21055: LD_VAR 0 1
21059: PPUSH
21060: LD_INT 1
21062: PPUSH
21063: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21067: LD_INT 35
21069: PPUSH
21070: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21074: LD_VAR 0 1
21078: PPUSH
21079: LD_INT 22
21081: PUSH
21082: LD_OWVAR 2
21086: PUSH
21087: EMPTY
21088: LIST
21089: LIST
21090: PPUSH
21091: CALL_OW 69
21095: PPUSH
21096: LD_VAR 0 1
21100: PPUSH
21101: CALL_OW 74
21105: PPUSH
21106: CALL_OW 115
// until IsDead ( un ) ;
21110: LD_VAR 0 1
21114: PPUSH
21115: CALL_OW 301
21119: IFFALSE 21067
// end ;
21121: PPOPN 1
21123: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21124: LD_EXP 36
21128: PUSH
21129: LD_EXP 76
21133: AND
21134: IFFALSE 21146
21136: GO 21138
21138: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21139: LD_STRING earthquake(getX(game), 0, 32)
21141: PPUSH
21142: CALL_OW 559
21146: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21147: LD_EXP 36
21151: PUSH
21152: LD_EXP 77
21156: AND
21157: IFFALSE 21248
21159: GO 21161
21161: DISABLE
21162: LD_INT 0
21164: PPUSH
// begin enable ;
21165: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21166: LD_ADDR_VAR 0 1
21170: PUSH
21171: LD_INT 22
21173: PUSH
21174: LD_OWVAR 2
21178: PUSH
21179: EMPTY
21180: LIST
21181: LIST
21182: PUSH
21183: LD_INT 21
21185: PUSH
21186: LD_INT 2
21188: PUSH
21189: EMPTY
21190: LIST
21191: LIST
21192: PUSH
21193: LD_INT 33
21195: PUSH
21196: LD_INT 3
21198: PUSH
21199: EMPTY
21200: LIST
21201: LIST
21202: PUSH
21203: EMPTY
21204: LIST
21205: LIST
21206: LIST
21207: PPUSH
21208: CALL_OW 69
21212: ST_TO_ADDR
// if not tmp then
21213: LD_VAR 0 1
21217: NOT
21218: IFFALSE 21222
// exit ;
21220: GO 21248
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21222: LD_VAR 0 1
21226: PUSH
21227: LD_INT 1
21229: PPUSH
21230: LD_VAR 0 1
21234: PPUSH
21235: CALL_OW 12
21239: ARRAY
21240: PPUSH
21241: LD_INT 1
21243: PPUSH
21244: CALL_OW 234
// end ;
21248: PPOPN 1
21250: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21251: LD_EXP 36
21255: PUSH
21256: LD_EXP 78
21260: AND
21261: IFFALSE 21402
21263: GO 21265
21265: DISABLE
21266: LD_INT 0
21268: PPUSH
21269: PPUSH
21270: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21271: LD_ADDR_VAR 0 3
21275: PUSH
21276: LD_INT 22
21278: PUSH
21279: LD_OWVAR 2
21283: PUSH
21284: EMPTY
21285: LIST
21286: LIST
21287: PUSH
21288: LD_INT 25
21290: PUSH
21291: LD_INT 1
21293: PUSH
21294: EMPTY
21295: LIST
21296: LIST
21297: PUSH
21298: EMPTY
21299: LIST
21300: LIST
21301: PPUSH
21302: CALL_OW 69
21306: ST_TO_ADDR
// if not tmp then
21307: LD_VAR 0 3
21311: NOT
21312: IFFALSE 21316
// exit ;
21314: GO 21402
// un := tmp [ rand ( 1 , tmp ) ] ;
21316: LD_ADDR_VAR 0 2
21320: PUSH
21321: LD_VAR 0 3
21325: PUSH
21326: LD_INT 1
21328: PPUSH
21329: LD_VAR 0 3
21333: PPUSH
21334: CALL_OW 12
21338: ARRAY
21339: ST_TO_ADDR
// if Crawls ( un ) then
21340: LD_VAR 0 2
21344: PPUSH
21345: CALL_OW 318
21349: IFFALSE 21360
// ComWalk ( un ) ;
21351: LD_VAR 0 2
21355: PPUSH
21356: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21360: LD_VAR 0 2
21364: PPUSH
21365: LD_INT 9
21367: PPUSH
21368: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21372: LD_INT 28
21374: PPUSH
21375: LD_OWVAR 2
21379: PPUSH
21380: LD_INT 2
21382: PPUSH
21383: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21387: LD_INT 29
21389: PPUSH
21390: LD_OWVAR 2
21394: PPUSH
21395: LD_INT 2
21397: PPUSH
21398: CALL_OW 322
// end ;
21402: PPOPN 3
21404: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21405: LD_EXP 36
21409: PUSH
21410: LD_EXP 79
21414: AND
21415: IFFALSE 21526
21417: GO 21419
21419: DISABLE
21420: LD_INT 0
21422: PPUSH
21423: PPUSH
21424: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21425: LD_ADDR_VAR 0 3
21429: PUSH
21430: LD_INT 22
21432: PUSH
21433: LD_OWVAR 2
21437: PUSH
21438: EMPTY
21439: LIST
21440: LIST
21441: PUSH
21442: LD_INT 25
21444: PUSH
21445: LD_INT 1
21447: PUSH
21448: EMPTY
21449: LIST
21450: LIST
21451: PUSH
21452: EMPTY
21453: LIST
21454: LIST
21455: PPUSH
21456: CALL_OW 69
21460: ST_TO_ADDR
// if not tmp then
21461: LD_VAR 0 3
21465: NOT
21466: IFFALSE 21470
// exit ;
21468: GO 21526
// un := tmp [ rand ( 1 , tmp ) ] ;
21470: LD_ADDR_VAR 0 2
21474: PUSH
21475: LD_VAR 0 3
21479: PUSH
21480: LD_INT 1
21482: PPUSH
21483: LD_VAR 0 3
21487: PPUSH
21488: CALL_OW 12
21492: ARRAY
21493: ST_TO_ADDR
// if Crawls ( un ) then
21494: LD_VAR 0 2
21498: PPUSH
21499: CALL_OW 318
21503: IFFALSE 21514
// ComWalk ( un ) ;
21505: LD_VAR 0 2
21509: PPUSH
21510: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21514: LD_VAR 0 2
21518: PPUSH
21519: LD_INT 8
21521: PPUSH
21522: CALL_OW 336
// end ;
21526: PPOPN 3
21528: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21529: LD_EXP 36
21533: PUSH
21534: LD_EXP 80
21538: AND
21539: IFFALSE 21683
21541: GO 21543
21543: DISABLE
21544: LD_INT 0
21546: PPUSH
21547: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21548: LD_ADDR_VAR 0 2
21552: PUSH
21553: LD_INT 22
21555: PUSH
21556: LD_OWVAR 2
21560: PUSH
21561: EMPTY
21562: LIST
21563: LIST
21564: PUSH
21565: LD_INT 21
21567: PUSH
21568: LD_INT 2
21570: PUSH
21571: EMPTY
21572: LIST
21573: LIST
21574: PUSH
21575: LD_INT 2
21577: PUSH
21578: LD_INT 34
21580: PUSH
21581: LD_INT 12
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: PUSH
21588: LD_INT 34
21590: PUSH
21591: LD_INT 51
21593: PUSH
21594: EMPTY
21595: LIST
21596: LIST
21597: PUSH
21598: LD_INT 34
21600: PUSH
21601: LD_INT 32
21603: PUSH
21604: EMPTY
21605: LIST
21606: LIST
21607: PUSH
21608: EMPTY
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: PUSH
21614: EMPTY
21615: LIST
21616: LIST
21617: LIST
21618: PPUSH
21619: CALL_OW 69
21623: ST_TO_ADDR
// if not tmp then
21624: LD_VAR 0 2
21628: NOT
21629: IFFALSE 21633
// exit ;
21631: GO 21683
// for i in tmp do
21633: LD_ADDR_VAR 0 1
21637: PUSH
21638: LD_VAR 0 2
21642: PUSH
21643: FOR_IN
21644: IFFALSE 21681
// if GetCargo ( i , mat_artifact ) = 0 then
21646: LD_VAR 0 1
21650: PPUSH
21651: LD_INT 4
21653: PPUSH
21654: CALL_OW 289
21658: PUSH
21659: LD_INT 0
21661: EQUAL
21662: IFFALSE 21679
// SetCargo ( i , mat_siberit , 100 ) ;
21664: LD_VAR 0 1
21668: PPUSH
21669: LD_INT 3
21671: PPUSH
21672: LD_INT 100
21674: PPUSH
21675: CALL_OW 290
21679: GO 21643
21681: POP
21682: POP
// end ;
21683: PPOPN 2
21685: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21686: LD_EXP 36
21690: PUSH
21691: LD_EXP 81
21695: AND
21696: IFFALSE 21879
21698: GO 21700
21700: DISABLE
21701: LD_INT 0
21703: PPUSH
21704: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21705: LD_ADDR_VAR 0 2
21709: PUSH
21710: LD_INT 22
21712: PUSH
21713: LD_OWVAR 2
21717: PUSH
21718: EMPTY
21719: LIST
21720: LIST
21721: PPUSH
21722: CALL_OW 69
21726: ST_TO_ADDR
// if not tmp then
21727: LD_VAR 0 2
21731: NOT
21732: IFFALSE 21736
// exit ;
21734: GO 21879
// for i := 1 to 2 do
21736: LD_ADDR_VAR 0 1
21740: PUSH
21741: DOUBLE
21742: LD_INT 1
21744: DEC
21745: ST_TO_ADDR
21746: LD_INT 2
21748: PUSH
21749: FOR_TO
21750: IFFALSE 21877
// begin uc_side := your_side ;
21752: LD_ADDR_OWVAR 20
21756: PUSH
21757: LD_OWVAR 2
21761: ST_TO_ADDR
// uc_nation := nation_american ;
21762: LD_ADDR_OWVAR 21
21766: PUSH
21767: LD_INT 1
21769: ST_TO_ADDR
// vc_chassis := us_morphling ;
21770: LD_ADDR_OWVAR 37
21774: PUSH
21775: LD_INT 5
21777: ST_TO_ADDR
// vc_engine := engine_siberite ;
21778: LD_ADDR_OWVAR 39
21782: PUSH
21783: LD_INT 3
21785: ST_TO_ADDR
// vc_control := control_computer ;
21786: LD_ADDR_OWVAR 38
21790: PUSH
21791: LD_INT 3
21793: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21794: LD_ADDR_OWVAR 40
21798: PUSH
21799: LD_INT 10
21801: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21802: LD_VAR 0 2
21806: PUSH
21807: LD_INT 1
21809: ARRAY
21810: PPUSH
21811: CALL_OW 310
21815: NOT
21816: IFFALSE 21863
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
21818: CALL_OW 45
21822: PPUSH
21823: LD_VAR 0 2
21827: PUSH
21828: LD_INT 1
21830: ARRAY
21831: PPUSH
21832: CALL_OW 250
21836: PPUSH
21837: LD_VAR 0 2
21841: PUSH
21842: LD_INT 1
21844: ARRAY
21845: PPUSH
21846: CALL_OW 251
21850: PPUSH
21851: LD_INT 12
21853: PPUSH
21854: LD_INT 1
21856: PPUSH
21857: CALL_OW 50
21861: GO 21875
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
21863: CALL_OW 45
21867: PPUSH
21868: LD_INT 1
21870: PPUSH
21871: CALL_OW 51
// end ;
21875: GO 21749
21877: POP
21878: POP
// end ;
21879: PPOPN 2
21881: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
21882: LD_EXP 36
21886: PUSH
21887: LD_EXP 82
21891: AND
21892: IFFALSE 22114
21894: GO 21896
21896: DISABLE
21897: LD_INT 0
21899: PPUSH
21900: PPUSH
21901: PPUSH
21902: PPUSH
21903: PPUSH
21904: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21905: LD_ADDR_VAR 0 6
21909: PUSH
21910: LD_INT 22
21912: PUSH
21913: LD_OWVAR 2
21917: PUSH
21918: EMPTY
21919: LIST
21920: LIST
21921: PUSH
21922: LD_INT 21
21924: PUSH
21925: LD_INT 1
21927: PUSH
21928: EMPTY
21929: LIST
21930: LIST
21931: PUSH
21932: LD_INT 3
21934: PUSH
21935: LD_INT 23
21937: PUSH
21938: LD_INT 0
21940: PUSH
21941: EMPTY
21942: LIST
21943: LIST
21944: PUSH
21945: EMPTY
21946: LIST
21947: LIST
21948: PUSH
21949: EMPTY
21950: LIST
21951: LIST
21952: LIST
21953: PPUSH
21954: CALL_OW 69
21958: ST_TO_ADDR
// if not tmp then
21959: LD_VAR 0 6
21963: NOT
21964: IFFALSE 21968
// exit ;
21966: GO 22114
// s1 := rand ( 1 , 4 ) ;
21968: LD_ADDR_VAR 0 2
21972: PUSH
21973: LD_INT 1
21975: PPUSH
21976: LD_INT 4
21978: PPUSH
21979: CALL_OW 12
21983: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
21984: LD_ADDR_VAR 0 4
21988: PUSH
21989: LD_VAR 0 6
21993: PUSH
21994: LD_INT 1
21996: ARRAY
21997: PPUSH
21998: LD_VAR 0 2
22002: PPUSH
22003: CALL_OW 259
22007: ST_TO_ADDR
// if s1 = 1 then
22008: LD_VAR 0 2
22012: PUSH
22013: LD_INT 1
22015: EQUAL
22016: IFFALSE 22036
// s2 := rand ( 2 , 4 ) else
22018: LD_ADDR_VAR 0 3
22022: PUSH
22023: LD_INT 2
22025: PPUSH
22026: LD_INT 4
22028: PPUSH
22029: CALL_OW 12
22033: ST_TO_ADDR
22034: GO 22044
// s2 := 1 ;
22036: LD_ADDR_VAR 0 3
22040: PUSH
22041: LD_INT 1
22043: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22044: LD_ADDR_VAR 0 5
22048: PUSH
22049: LD_VAR 0 6
22053: PUSH
22054: LD_INT 1
22056: ARRAY
22057: PPUSH
22058: LD_VAR 0 3
22062: PPUSH
22063: CALL_OW 259
22067: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22068: LD_VAR 0 6
22072: PUSH
22073: LD_INT 1
22075: ARRAY
22076: PPUSH
22077: LD_VAR 0 2
22081: PPUSH
22082: LD_VAR 0 5
22086: PPUSH
22087: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22091: LD_VAR 0 6
22095: PUSH
22096: LD_INT 1
22098: ARRAY
22099: PPUSH
22100: LD_VAR 0 3
22104: PPUSH
22105: LD_VAR 0 4
22109: PPUSH
22110: CALL_OW 237
// end ;
22114: PPOPN 6
22116: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22117: LD_EXP 36
22121: PUSH
22122: LD_EXP 83
22126: AND
22127: IFFALSE 22206
22129: GO 22131
22131: DISABLE
22132: LD_INT 0
22134: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22135: LD_ADDR_VAR 0 1
22139: PUSH
22140: LD_INT 22
22142: PUSH
22143: LD_OWVAR 2
22147: PUSH
22148: EMPTY
22149: LIST
22150: LIST
22151: PUSH
22152: LD_INT 30
22154: PUSH
22155: LD_INT 3
22157: PUSH
22158: EMPTY
22159: LIST
22160: LIST
22161: PUSH
22162: EMPTY
22163: LIST
22164: LIST
22165: PPUSH
22166: CALL_OW 69
22170: ST_TO_ADDR
// if not tmp then
22171: LD_VAR 0 1
22175: NOT
22176: IFFALSE 22180
// exit ;
22178: GO 22206
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22180: LD_VAR 0 1
22184: PUSH
22185: LD_INT 1
22187: PPUSH
22188: LD_VAR 0 1
22192: PPUSH
22193: CALL_OW 12
22197: ARRAY
22198: PPUSH
22199: LD_INT 1
22201: PPUSH
22202: CALL_OW 234
// end ;
22206: PPOPN 1
22208: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22209: LD_EXP 36
22213: PUSH
22214: LD_EXP 84
22218: AND
22219: IFFALSE 22331
22221: GO 22223
22223: DISABLE
22224: LD_INT 0
22226: PPUSH
22227: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22228: LD_ADDR_VAR 0 2
22232: PUSH
22233: LD_INT 22
22235: PUSH
22236: LD_OWVAR 2
22240: PUSH
22241: EMPTY
22242: LIST
22243: LIST
22244: PUSH
22245: LD_INT 2
22247: PUSH
22248: LD_INT 30
22250: PUSH
22251: LD_INT 27
22253: PUSH
22254: EMPTY
22255: LIST
22256: LIST
22257: PUSH
22258: LD_INT 30
22260: PUSH
22261: LD_INT 26
22263: PUSH
22264: EMPTY
22265: LIST
22266: LIST
22267: PUSH
22268: LD_INT 30
22270: PUSH
22271: LD_INT 28
22273: PUSH
22274: EMPTY
22275: LIST
22276: LIST
22277: PUSH
22278: EMPTY
22279: LIST
22280: LIST
22281: LIST
22282: LIST
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: PPUSH
22288: CALL_OW 69
22292: ST_TO_ADDR
// if not tmp then
22293: LD_VAR 0 2
22297: NOT
22298: IFFALSE 22302
// exit ;
22300: GO 22331
// for i in tmp do
22302: LD_ADDR_VAR 0 1
22306: PUSH
22307: LD_VAR 0 2
22311: PUSH
22312: FOR_IN
22313: IFFALSE 22329
// SetLives ( i , 1 ) ;
22315: LD_VAR 0 1
22319: PPUSH
22320: LD_INT 1
22322: PPUSH
22323: CALL_OW 234
22327: GO 22312
22329: POP
22330: POP
// end ;
22331: PPOPN 2
22333: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22334: LD_EXP 36
22338: PUSH
22339: LD_EXP 85
22343: AND
22344: IFFALSE 22618
22346: GO 22348
22348: DISABLE
22349: LD_INT 0
22351: PPUSH
22352: PPUSH
22353: PPUSH
// begin i := rand ( 1 , 7 ) ;
22354: LD_ADDR_VAR 0 1
22358: PUSH
22359: LD_INT 1
22361: PPUSH
22362: LD_INT 7
22364: PPUSH
22365: CALL_OW 12
22369: ST_TO_ADDR
// case i of 1 :
22370: LD_VAR 0 1
22374: PUSH
22375: LD_INT 1
22377: DOUBLE
22378: EQUAL
22379: IFTRUE 22383
22381: GO 22393
22383: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22384: LD_STRING earthquake(getX(game), 0, 32)
22386: PPUSH
22387: CALL_OW 559
22391: GO 22618
22393: LD_INT 2
22395: DOUBLE
22396: EQUAL
22397: IFTRUE 22401
22399: GO 22415
22401: POP
// begin ToLua ( displayStucuk(); ) ;
22402: LD_STRING displayStucuk();
22404: PPUSH
22405: CALL_OW 559
// ResetFog ;
22409: CALL_OW 335
// end ; 3 :
22413: GO 22618
22415: LD_INT 3
22417: DOUBLE
22418: EQUAL
22419: IFTRUE 22423
22421: GO 22527
22423: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22424: LD_ADDR_VAR 0 2
22428: PUSH
22429: LD_INT 22
22431: PUSH
22432: LD_OWVAR 2
22436: PUSH
22437: EMPTY
22438: LIST
22439: LIST
22440: PUSH
22441: LD_INT 25
22443: PUSH
22444: LD_INT 1
22446: PUSH
22447: EMPTY
22448: LIST
22449: LIST
22450: PUSH
22451: EMPTY
22452: LIST
22453: LIST
22454: PPUSH
22455: CALL_OW 69
22459: ST_TO_ADDR
// if not tmp then
22460: LD_VAR 0 2
22464: NOT
22465: IFFALSE 22469
// exit ;
22467: GO 22618
// un := tmp [ rand ( 1 , tmp ) ] ;
22469: LD_ADDR_VAR 0 3
22473: PUSH
22474: LD_VAR 0 2
22478: PUSH
22479: LD_INT 1
22481: PPUSH
22482: LD_VAR 0 2
22486: PPUSH
22487: CALL_OW 12
22491: ARRAY
22492: ST_TO_ADDR
// if Crawls ( un ) then
22493: LD_VAR 0 3
22497: PPUSH
22498: CALL_OW 318
22502: IFFALSE 22513
// ComWalk ( un ) ;
22504: LD_VAR 0 3
22508: PPUSH
22509: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22513: LD_VAR 0 3
22517: PPUSH
22518: LD_INT 8
22520: PPUSH
22521: CALL_OW 336
// end ; 4 :
22525: GO 22618
22527: LD_INT 4
22529: DOUBLE
22530: EQUAL
22531: IFTRUE 22535
22533: GO 22596
22535: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22536: LD_ADDR_VAR 0 2
22540: PUSH
22541: LD_INT 22
22543: PUSH
22544: LD_OWVAR 2
22548: PUSH
22549: EMPTY
22550: LIST
22551: LIST
22552: PUSH
22553: LD_INT 30
22555: PUSH
22556: LD_INT 29
22558: PUSH
22559: EMPTY
22560: LIST
22561: LIST
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: PPUSH
22567: CALL_OW 69
22571: ST_TO_ADDR
// if not tmp then
22572: LD_VAR 0 2
22576: NOT
22577: IFFALSE 22581
// exit ;
22579: GO 22618
// DestroyUnit ( tmp [ 1 ] ) ;
22581: LD_VAR 0 2
22585: PUSH
22586: LD_INT 1
22588: ARRAY
22589: PPUSH
22590: CALL_OW 65
// end ; 5 .. 7 :
22594: GO 22618
22596: LD_INT 5
22598: DOUBLE
22599: GREATEREQUAL
22600: IFFALSE 22608
22602: LD_INT 7
22604: DOUBLE
22605: LESSEQUAL
22606: IFTRUE 22610
22608: GO 22617
22610: POP
// StreamSibBomb ; end ;
22611: CALL 18868 0 0
22615: GO 22618
22617: POP
// end ;
22618: PPOPN 3
22620: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22621: LD_EXP 36
22625: PUSH
22626: LD_EXP 86
22630: AND
22631: IFFALSE 22787
22633: GO 22635
22635: DISABLE
22636: LD_INT 0
22638: PPUSH
22639: PPUSH
22640: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22641: LD_ADDR_VAR 0 2
22645: PUSH
22646: LD_INT 81
22648: PUSH
22649: LD_OWVAR 2
22653: PUSH
22654: EMPTY
22655: LIST
22656: LIST
22657: PUSH
22658: LD_INT 2
22660: PUSH
22661: LD_INT 21
22663: PUSH
22664: LD_INT 1
22666: PUSH
22667: EMPTY
22668: LIST
22669: LIST
22670: PUSH
22671: LD_INT 21
22673: PUSH
22674: LD_INT 2
22676: PUSH
22677: EMPTY
22678: LIST
22679: LIST
22680: PUSH
22681: EMPTY
22682: LIST
22683: LIST
22684: LIST
22685: PUSH
22686: EMPTY
22687: LIST
22688: LIST
22689: PPUSH
22690: CALL_OW 69
22694: ST_TO_ADDR
// if not tmp then
22695: LD_VAR 0 2
22699: NOT
22700: IFFALSE 22704
// exit ;
22702: GO 22787
// p := 0 ;
22704: LD_ADDR_VAR 0 3
22708: PUSH
22709: LD_INT 0
22711: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22712: LD_INT 35
22714: PPUSH
22715: CALL_OW 67
// p := p + 1 ;
22719: LD_ADDR_VAR 0 3
22723: PUSH
22724: LD_VAR 0 3
22728: PUSH
22729: LD_INT 1
22731: PLUS
22732: ST_TO_ADDR
// for i in tmp do
22733: LD_ADDR_VAR 0 1
22737: PUSH
22738: LD_VAR 0 2
22742: PUSH
22743: FOR_IN
22744: IFFALSE 22775
// if GetLives ( i ) < 1000 then
22746: LD_VAR 0 1
22750: PPUSH
22751: CALL_OW 256
22755: PUSH
22756: LD_INT 1000
22758: LESS
22759: IFFALSE 22773
// SetLives ( i , 1000 ) ;
22761: LD_VAR 0 1
22765: PPUSH
22766: LD_INT 1000
22768: PPUSH
22769: CALL_OW 234
22773: GO 22743
22775: POP
22776: POP
// until p > 20 ;
22777: LD_VAR 0 3
22781: PUSH
22782: LD_INT 20
22784: GREATER
22785: IFFALSE 22712
// end ;
22787: PPOPN 3
22789: END
// every 0 0$1 trigger StreamModeActive and sTime do
22790: LD_EXP 36
22794: PUSH
22795: LD_EXP 87
22799: AND
22800: IFFALSE 22835
22802: GO 22804
22804: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22805: LD_INT 28
22807: PPUSH
22808: LD_OWVAR 2
22812: PPUSH
22813: LD_INT 2
22815: PPUSH
22816: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
22820: LD_INT 30
22822: PPUSH
22823: LD_OWVAR 2
22827: PPUSH
22828: LD_INT 2
22830: PPUSH
22831: CALL_OW 322
// end ;
22835: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
22836: LD_EXP 36
22840: PUSH
22841: LD_EXP 88
22845: AND
22846: IFFALSE 22967
22848: GO 22850
22850: DISABLE
22851: LD_INT 0
22853: PPUSH
22854: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22855: LD_ADDR_VAR 0 2
22859: PUSH
22860: LD_INT 22
22862: PUSH
22863: LD_OWVAR 2
22867: PUSH
22868: EMPTY
22869: LIST
22870: LIST
22871: PUSH
22872: LD_INT 21
22874: PUSH
22875: LD_INT 1
22877: PUSH
22878: EMPTY
22879: LIST
22880: LIST
22881: PUSH
22882: LD_INT 3
22884: PUSH
22885: LD_INT 23
22887: PUSH
22888: LD_INT 0
22890: PUSH
22891: EMPTY
22892: LIST
22893: LIST
22894: PUSH
22895: EMPTY
22896: LIST
22897: LIST
22898: PUSH
22899: EMPTY
22900: LIST
22901: LIST
22902: LIST
22903: PPUSH
22904: CALL_OW 69
22908: ST_TO_ADDR
// if not tmp then
22909: LD_VAR 0 2
22913: NOT
22914: IFFALSE 22918
// exit ;
22916: GO 22967
// for i in tmp do
22918: LD_ADDR_VAR 0 1
22922: PUSH
22923: LD_VAR 0 2
22927: PUSH
22928: FOR_IN
22929: IFFALSE 22965
// begin if Crawls ( i ) then
22931: LD_VAR 0 1
22935: PPUSH
22936: CALL_OW 318
22940: IFFALSE 22951
// ComWalk ( i ) ;
22942: LD_VAR 0 1
22946: PPUSH
22947: CALL_OW 138
// SetClass ( i , 2 ) ;
22951: LD_VAR 0 1
22955: PPUSH
22956: LD_INT 2
22958: PPUSH
22959: CALL_OW 336
// end ;
22963: GO 22928
22965: POP
22966: POP
// end ;
22967: PPOPN 2
22969: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
22970: LD_EXP 36
22974: PUSH
22975: LD_EXP 89
22979: AND
22980: IFFALSE 23261
22982: GO 22984
22984: DISABLE
22985: LD_INT 0
22987: PPUSH
22988: PPUSH
22989: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
22990: LD_OWVAR 2
22994: PPUSH
22995: LD_INT 9
22997: PPUSH
22998: LD_INT 1
23000: PPUSH
23001: LD_INT 1
23003: PPUSH
23004: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23008: LD_INT 9
23010: PPUSH
23011: LD_OWVAR 2
23015: PPUSH
23016: CALL_OW 343
// uc_side := 9 ;
23020: LD_ADDR_OWVAR 20
23024: PUSH
23025: LD_INT 9
23027: ST_TO_ADDR
// uc_nation := 2 ;
23028: LD_ADDR_OWVAR 21
23032: PUSH
23033: LD_INT 2
23035: ST_TO_ADDR
// hc_name := Dark Warrior ;
23036: LD_ADDR_OWVAR 26
23040: PUSH
23041: LD_STRING Dark Warrior
23043: ST_TO_ADDR
// hc_gallery :=  ;
23044: LD_ADDR_OWVAR 33
23048: PUSH
23049: LD_STRING 
23051: ST_TO_ADDR
// hc_noskilllimit := true ;
23052: LD_ADDR_OWVAR 76
23056: PUSH
23057: LD_INT 1
23059: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23060: LD_ADDR_OWVAR 31
23064: PUSH
23065: LD_INT 30
23067: PUSH
23068: LD_INT 30
23070: PUSH
23071: LD_INT 30
23073: PUSH
23074: LD_INT 30
23076: PUSH
23077: EMPTY
23078: LIST
23079: LIST
23080: LIST
23081: LIST
23082: ST_TO_ADDR
// un := CreateHuman ;
23083: LD_ADDR_VAR 0 3
23087: PUSH
23088: CALL_OW 44
23092: ST_TO_ADDR
// hc_noskilllimit := false ;
23093: LD_ADDR_OWVAR 76
23097: PUSH
23098: LD_INT 0
23100: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23101: LD_VAR 0 3
23105: PPUSH
23106: LD_INT 1
23108: PPUSH
23109: CALL_OW 51
// p := 0 ;
23113: LD_ADDR_VAR 0 2
23117: PUSH
23118: LD_INT 0
23120: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23121: LD_INT 35
23123: PPUSH
23124: CALL_OW 67
// p := p + 1 ;
23128: LD_ADDR_VAR 0 2
23132: PUSH
23133: LD_VAR 0 2
23137: PUSH
23138: LD_INT 1
23140: PLUS
23141: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23142: LD_VAR 0 3
23146: PPUSH
23147: CALL_OW 256
23151: PUSH
23152: LD_INT 1000
23154: LESS
23155: IFFALSE 23169
// SetLives ( un , 1000 ) ;
23157: LD_VAR 0 3
23161: PPUSH
23162: LD_INT 1000
23164: PPUSH
23165: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23169: LD_VAR 0 3
23173: PPUSH
23174: LD_INT 81
23176: PUSH
23177: LD_OWVAR 2
23181: PUSH
23182: EMPTY
23183: LIST
23184: LIST
23185: PUSH
23186: LD_INT 91
23188: PUSH
23189: LD_VAR 0 3
23193: PUSH
23194: LD_INT 30
23196: PUSH
23197: EMPTY
23198: LIST
23199: LIST
23200: LIST
23201: PUSH
23202: EMPTY
23203: LIST
23204: LIST
23205: PPUSH
23206: CALL_OW 69
23210: PPUSH
23211: LD_VAR 0 3
23215: PPUSH
23216: CALL_OW 74
23220: PPUSH
23221: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
23225: LD_VAR 0 2
23229: PUSH
23230: LD_INT 60
23232: GREATER
23233: PUSH
23234: LD_VAR 0 3
23238: PPUSH
23239: CALL_OW 301
23243: OR
23244: IFFALSE 23121
// if un then
23246: LD_VAR 0 3
23250: IFFALSE 23261
// RemoveUnit ( un ) ;
23252: LD_VAR 0 3
23256: PPUSH
23257: CALL_OW 64
// end ;
23261: PPOPN 3
23263: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23264: LD_INT 0
23266: PPUSH
// case cmd of 301 :
23267: LD_VAR 0 1
23271: PUSH
23272: LD_INT 301
23274: DOUBLE
23275: EQUAL
23276: IFTRUE 23280
23278: GO 23312
23280: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23281: LD_VAR 0 6
23285: PPUSH
23286: LD_VAR 0 7
23290: PPUSH
23291: LD_VAR 0 8
23295: PPUSH
23296: LD_VAR 0 4
23300: PPUSH
23301: LD_VAR 0 5
23305: PPUSH
23306: CALL 24513 0 5
23310: GO 23433
23312: LD_INT 302
23314: DOUBLE
23315: EQUAL
23316: IFTRUE 23320
23318: GO 23357
23320: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
23321: LD_VAR 0 6
23325: PPUSH
23326: LD_VAR 0 7
23330: PPUSH
23331: LD_VAR 0 8
23335: PPUSH
23336: LD_VAR 0 9
23340: PPUSH
23341: LD_VAR 0 4
23345: PPUSH
23346: LD_VAR 0 5
23350: PPUSH
23351: CALL 24604 0 6
23355: GO 23433
23357: LD_INT 303
23359: DOUBLE
23360: EQUAL
23361: IFTRUE 23365
23363: GO 23402
23365: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
23366: LD_VAR 0 6
23370: PPUSH
23371: LD_VAR 0 7
23375: PPUSH
23376: LD_VAR 0 8
23380: PPUSH
23381: LD_VAR 0 9
23385: PPUSH
23386: LD_VAR 0 4
23390: PPUSH
23391: LD_VAR 0 5
23395: PPUSH
23396: CALL 23438 0 6
23400: GO 23433
23402: LD_INT 304
23404: DOUBLE
23405: EQUAL
23406: IFTRUE 23410
23408: GO 23432
23410: POP
// hHackTeleport ( unit , x , y ) ; end ;
23411: LD_VAR 0 2
23415: PPUSH
23416: LD_VAR 0 4
23420: PPUSH
23421: LD_VAR 0 5
23425: PPUSH
23426: CALL 25197 0 3
23430: GO 23433
23432: POP
// end ;
23433: LD_VAR 0 12
23437: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
23438: LD_INT 0
23440: PPUSH
23441: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
23442: LD_VAR 0 1
23446: PUSH
23447: LD_INT 1
23449: LESS
23450: PUSH
23451: LD_VAR 0 1
23455: PUSH
23456: LD_INT 3
23458: GREATER
23459: OR
23460: PUSH
23461: LD_VAR 0 5
23465: PPUSH
23466: LD_VAR 0 6
23470: PPUSH
23471: CALL_OW 428
23475: OR
23476: IFFALSE 23480
// exit ;
23478: GO 24200
// uc_side := your_side ;
23480: LD_ADDR_OWVAR 20
23484: PUSH
23485: LD_OWVAR 2
23489: ST_TO_ADDR
// uc_nation := nation ;
23490: LD_ADDR_OWVAR 21
23494: PUSH
23495: LD_VAR 0 1
23499: ST_TO_ADDR
// bc_level = 1 ;
23500: LD_ADDR_OWVAR 43
23504: PUSH
23505: LD_INT 1
23507: ST_TO_ADDR
// case btype of 1 :
23508: LD_VAR 0 2
23512: PUSH
23513: LD_INT 1
23515: DOUBLE
23516: EQUAL
23517: IFTRUE 23521
23519: GO 23532
23521: POP
// bc_type := b_depot ; 2 :
23522: LD_ADDR_OWVAR 42
23526: PUSH
23527: LD_INT 0
23529: ST_TO_ADDR
23530: GO 24144
23532: LD_INT 2
23534: DOUBLE
23535: EQUAL
23536: IFTRUE 23540
23538: GO 23551
23540: POP
// bc_type := b_warehouse ; 3 :
23541: LD_ADDR_OWVAR 42
23545: PUSH
23546: LD_INT 1
23548: ST_TO_ADDR
23549: GO 24144
23551: LD_INT 3
23553: DOUBLE
23554: EQUAL
23555: IFTRUE 23559
23557: GO 23570
23559: POP
// bc_type := b_lab ; 4 .. 9 :
23560: LD_ADDR_OWVAR 42
23564: PUSH
23565: LD_INT 6
23567: ST_TO_ADDR
23568: GO 24144
23570: LD_INT 4
23572: DOUBLE
23573: GREATEREQUAL
23574: IFFALSE 23582
23576: LD_INT 9
23578: DOUBLE
23579: LESSEQUAL
23580: IFTRUE 23584
23582: GO 23636
23584: POP
// begin bc_type := b_lab_half ;
23585: LD_ADDR_OWVAR 42
23589: PUSH
23590: LD_INT 7
23592: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
23593: LD_ADDR_OWVAR 44
23597: PUSH
23598: LD_INT 10
23600: PUSH
23601: LD_INT 11
23603: PUSH
23604: LD_INT 12
23606: PUSH
23607: LD_INT 15
23609: PUSH
23610: LD_INT 14
23612: PUSH
23613: LD_INT 13
23615: PUSH
23616: EMPTY
23617: LIST
23618: LIST
23619: LIST
23620: LIST
23621: LIST
23622: LIST
23623: PUSH
23624: LD_VAR 0 2
23628: PUSH
23629: LD_INT 3
23631: MINUS
23632: ARRAY
23633: ST_TO_ADDR
// end ; 10 .. 13 :
23634: GO 24144
23636: LD_INT 10
23638: DOUBLE
23639: GREATEREQUAL
23640: IFFALSE 23648
23642: LD_INT 13
23644: DOUBLE
23645: LESSEQUAL
23646: IFTRUE 23650
23648: GO 23727
23650: POP
// begin bc_type := b_lab_full ;
23651: LD_ADDR_OWVAR 42
23655: PUSH
23656: LD_INT 8
23658: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
23659: LD_ADDR_OWVAR 44
23663: PUSH
23664: LD_INT 10
23666: PUSH
23667: LD_INT 12
23669: PUSH
23670: LD_INT 14
23672: PUSH
23673: LD_INT 13
23675: PUSH
23676: EMPTY
23677: LIST
23678: LIST
23679: LIST
23680: LIST
23681: PUSH
23682: LD_VAR 0 2
23686: PUSH
23687: LD_INT 9
23689: MINUS
23690: ARRAY
23691: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
23692: LD_ADDR_OWVAR 45
23696: PUSH
23697: LD_INT 11
23699: PUSH
23700: LD_INT 15
23702: PUSH
23703: LD_INT 12
23705: PUSH
23706: LD_INT 15
23708: PUSH
23709: EMPTY
23710: LIST
23711: LIST
23712: LIST
23713: LIST
23714: PUSH
23715: LD_VAR 0 2
23719: PUSH
23720: LD_INT 9
23722: MINUS
23723: ARRAY
23724: ST_TO_ADDR
// end ; 14 :
23725: GO 24144
23727: LD_INT 14
23729: DOUBLE
23730: EQUAL
23731: IFTRUE 23735
23733: GO 23746
23735: POP
// bc_type := b_workshop ; 15 :
23736: LD_ADDR_OWVAR 42
23740: PUSH
23741: LD_INT 2
23743: ST_TO_ADDR
23744: GO 24144
23746: LD_INT 15
23748: DOUBLE
23749: EQUAL
23750: IFTRUE 23754
23752: GO 23765
23754: POP
// bc_type := b_factory ; 16 :
23755: LD_ADDR_OWVAR 42
23759: PUSH
23760: LD_INT 3
23762: ST_TO_ADDR
23763: GO 24144
23765: LD_INT 16
23767: DOUBLE
23768: EQUAL
23769: IFTRUE 23773
23771: GO 23784
23773: POP
// bc_type := b_ext_gun ; 17 :
23774: LD_ADDR_OWVAR 42
23778: PUSH
23779: LD_INT 17
23781: ST_TO_ADDR
23782: GO 24144
23784: LD_INT 17
23786: DOUBLE
23787: EQUAL
23788: IFTRUE 23792
23790: GO 23820
23792: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
23793: LD_ADDR_OWVAR 42
23797: PUSH
23798: LD_INT 19
23800: PUSH
23801: LD_INT 23
23803: PUSH
23804: LD_INT 19
23806: PUSH
23807: EMPTY
23808: LIST
23809: LIST
23810: LIST
23811: PUSH
23812: LD_VAR 0 1
23816: ARRAY
23817: ST_TO_ADDR
23818: GO 24144
23820: LD_INT 18
23822: DOUBLE
23823: EQUAL
23824: IFTRUE 23828
23826: GO 23839
23828: POP
// bc_type := b_ext_radar ; 19 :
23829: LD_ADDR_OWVAR 42
23833: PUSH
23834: LD_INT 20
23836: ST_TO_ADDR
23837: GO 24144
23839: LD_INT 19
23841: DOUBLE
23842: EQUAL
23843: IFTRUE 23847
23845: GO 23858
23847: POP
// bc_type := b_ext_radio ; 20 :
23848: LD_ADDR_OWVAR 42
23852: PUSH
23853: LD_INT 22
23855: ST_TO_ADDR
23856: GO 24144
23858: LD_INT 20
23860: DOUBLE
23861: EQUAL
23862: IFTRUE 23866
23864: GO 23877
23866: POP
// bc_type := b_ext_siberium ; 21 :
23867: LD_ADDR_OWVAR 42
23871: PUSH
23872: LD_INT 21
23874: ST_TO_ADDR
23875: GO 24144
23877: LD_INT 21
23879: DOUBLE
23880: EQUAL
23881: IFTRUE 23885
23883: GO 23896
23885: POP
// bc_type := b_ext_computer ; 22 :
23886: LD_ADDR_OWVAR 42
23890: PUSH
23891: LD_INT 24
23893: ST_TO_ADDR
23894: GO 24144
23896: LD_INT 22
23898: DOUBLE
23899: EQUAL
23900: IFTRUE 23904
23902: GO 23915
23904: POP
// bc_type := b_ext_track ; 23 :
23905: LD_ADDR_OWVAR 42
23909: PUSH
23910: LD_INT 16
23912: ST_TO_ADDR
23913: GO 24144
23915: LD_INT 23
23917: DOUBLE
23918: EQUAL
23919: IFTRUE 23923
23921: GO 23934
23923: POP
// bc_type := b_ext_laser ; 24 :
23924: LD_ADDR_OWVAR 42
23928: PUSH
23929: LD_INT 25
23931: ST_TO_ADDR
23932: GO 24144
23934: LD_INT 24
23936: DOUBLE
23937: EQUAL
23938: IFTRUE 23942
23940: GO 23953
23942: POP
// bc_type := b_control_tower ; 25 :
23943: LD_ADDR_OWVAR 42
23947: PUSH
23948: LD_INT 36
23950: ST_TO_ADDR
23951: GO 24144
23953: LD_INT 25
23955: DOUBLE
23956: EQUAL
23957: IFTRUE 23961
23959: GO 23972
23961: POP
// bc_type := b_breastwork ; 26 :
23962: LD_ADDR_OWVAR 42
23966: PUSH
23967: LD_INT 31
23969: ST_TO_ADDR
23970: GO 24144
23972: LD_INT 26
23974: DOUBLE
23975: EQUAL
23976: IFTRUE 23980
23978: GO 23991
23980: POP
// bc_type := b_bunker ; 27 :
23981: LD_ADDR_OWVAR 42
23985: PUSH
23986: LD_INT 32
23988: ST_TO_ADDR
23989: GO 24144
23991: LD_INT 27
23993: DOUBLE
23994: EQUAL
23995: IFTRUE 23999
23997: GO 24010
23999: POP
// bc_type := b_turret ; 28 :
24000: LD_ADDR_OWVAR 42
24004: PUSH
24005: LD_INT 33
24007: ST_TO_ADDR
24008: GO 24144
24010: LD_INT 28
24012: DOUBLE
24013: EQUAL
24014: IFTRUE 24018
24016: GO 24029
24018: POP
// bc_type := b_armoury ; 29 :
24019: LD_ADDR_OWVAR 42
24023: PUSH
24024: LD_INT 4
24026: ST_TO_ADDR
24027: GO 24144
24029: LD_INT 29
24031: DOUBLE
24032: EQUAL
24033: IFTRUE 24037
24035: GO 24048
24037: POP
// bc_type := b_barracks ; 30 :
24038: LD_ADDR_OWVAR 42
24042: PUSH
24043: LD_INT 5
24045: ST_TO_ADDR
24046: GO 24144
24048: LD_INT 30
24050: DOUBLE
24051: EQUAL
24052: IFTRUE 24056
24054: GO 24067
24056: POP
// bc_type := b_solar_power ; 31 :
24057: LD_ADDR_OWVAR 42
24061: PUSH
24062: LD_INT 27
24064: ST_TO_ADDR
24065: GO 24144
24067: LD_INT 31
24069: DOUBLE
24070: EQUAL
24071: IFTRUE 24075
24073: GO 24086
24075: POP
// bc_type := b_oil_power ; 32 :
24076: LD_ADDR_OWVAR 42
24080: PUSH
24081: LD_INT 26
24083: ST_TO_ADDR
24084: GO 24144
24086: LD_INT 32
24088: DOUBLE
24089: EQUAL
24090: IFTRUE 24094
24092: GO 24105
24094: POP
// bc_type := b_siberite_power ; 33 :
24095: LD_ADDR_OWVAR 42
24099: PUSH
24100: LD_INT 28
24102: ST_TO_ADDR
24103: GO 24144
24105: LD_INT 33
24107: DOUBLE
24108: EQUAL
24109: IFTRUE 24113
24111: GO 24124
24113: POP
// bc_type := b_oil_mine ; 34 :
24114: LD_ADDR_OWVAR 42
24118: PUSH
24119: LD_INT 29
24121: ST_TO_ADDR
24122: GO 24144
24124: LD_INT 34
24126: DOUBLE
24127: EQUAL
24128: IFTRUE 24132
24130: GO 24143
24132: POP
// bc_type := b_siberite_mine ; end ;
24133: LD_ADDR_OWVAR 42
24137: PUSH
24138: LD_INT 30
24140: ST_TO_ADDR
24141: GO 24144
24143: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24144: LD_ADDR_VAR 0 8
24148: PUSH
24149: LD_VAR 0 5
24153: PPUSH
24154: LD_VAR 0 6
24158: PPUSH
24159: LD_VAR 0 3
24163: PPUSH
24164: CALL_OW 47
24168: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24169: LD_OWVAR 42
24173: PUSH
24174: LD_INT 32
24176: PUSH
24177: LD_INT 33
24179: PUSH
24180: EMPTY
24181: LIST
24182: LIST
24183: IN
24184: IFFALSE 24200
// PlaceWeaponTurret ( b , weapon ) ;
24186: LD_VAR 0 8
24190: PPUSH
24191: LD_VAR 0 4
24195: PPUSH
24196: CALL_OW 431
// end ;
24200: LD_VAR 0 7
24204: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24205: LD_INT 0
24207: PPUSH
24208: PPUSH
24209: PPUSH
24210: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24211: LD_ADDR_VAR 0 4
24215: PUSH
24216: LD_INT 22
24218: PUSH
24219: LD_OWVAR 2
24223: PUSH
24224: EMPTY
24225: LIST
24226: LIST
24227: PUSH
24228: LD_INT 2
24230: PUSH
24231: LD_INT 30
24233: PUSH
24234: LD_INT 0
24236: PUSH
24237: EMPTY
24238: LIST
24239: LIST
24240: PUSH
24241: LD_INT 30
24243: PUSH
24244: LD_INT 1
24246: PUSH
24247: EMPTY
24248: LIST
24249: LIST
24250: PUSH
24251: EMPTY
24252: LIST
24253: LIST
24254: LIST
24255: PUSH
24256: EMPTY
24257: LIST
24258: LIST
24259: PPUSH
24260: CALL_OW 69
24264: ST_TO_ADDR
// if not tmp then
24265: LD_VAR 0 4
24269: NOT
24270: IFFALSE 24274
// exit ;
24272: GO 24333
// for i in tmp do
24274: LD_ADDR_VAR 0 2
24278: PUSH
24279: LD_VAR 0 4
24283: PUSH
24284: FOR_IN
24285: IFFALSE 24331
// for j = 1 to 3 do
24287: LD_ADDR_VAR 0 3
24291: PUSH
24292: DOUBLE
24293: LD_INT 1
24295: DEC
24296: ST_TO_ADDR
24297: LD_INT 3
24299: PUSH
24300: FOR_TO
24301: IFFALSE 24327
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24303: LD_VAR 0 2
24307: PPUSH
24308: CALL_OW 274
24312: PPUSH
24313: LD_VAR 0 3
24317: PPUSH
24318: LD_INT 99999
24320: PPUSH
24321: CALL_OW 277
24325: GO 24300
24327: POP
24328: POP
24329: GO 24284
24331: POP
24332: POP
// end ;
24333: LD_VAR 0 1
24337: RET
// export function hHackSetLevel10 ; var i , j ; begin
24338: LD_INT 0
24340: PPUSH
24341: PPUSH
24342: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24343: LD_ADDR_VAR 0 2
24347: PUSH
24348: LD_INT 21
24350: PUSH
24351: LD_INT 1
24353: PUSH
24354: EMPTY
24355: LIST
24356: LIST
24357: PPUSH
24358: CALL_OW 69
24362: PUSH
24363: FOR_IN
24364: IFFALSE 24416
// if IsSelected ( i ) then
24366: LD_VAR 0 2
24370: PPUSH
24371: CALL_OW 306
24375: IFFALSE 24414
// begin for j := 1 to 4 do
24377: LD_ADDR_VAR 0 3
24381: PUSH
24382: DOUBLE
24383: LD_INT 1
24385: DEC
24386: ST_TO_ADDR
24387: LD_INT 4
24389: PUSH
24390: FOR_TO
24391: IFFALSE 24412
// SetSkill ( i , j , 10 ) ;
24393: LD_VAR 0 2
24397: PPUSH
24398: LD_VAR 0 3
24402: PPUSH
24403: LD_INT 10
24405: PPUSH
24406: CALL_OW 237
24410: GO 24390
24412: POP
24413: POP
// end ;
24414: GO 24363
24416: POP
24417: POP
// end ;
24418: LD_VAR 0 1
24422: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
24423: LD_INT 0
24425: PPUSH
24426: PPUSH
24427: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
24428: LD_ADDR_VAR 0 2
24432: PUSH
24433: LD_INT 22
24435: PUSH
24436: LD_OWVAR 2
24440: PUSH
24441: EMPTY
24442: LIST
24443: LIST
24444: PUSH
24445: LD_INT 21
24447: PUSH
24448: LD_INT 1
24450: PUSH
24451: EMPTY
24452: LIST
24453: LIST
24454: PUSH
24455: EMPTY
24456: LIST
24457: LIST
24458: PPUSH
24459: CALL_OW 69
24463: PUSH
24464: FOR_IN
24465: IFFALSE 24506
// begin for j := 1 to 4 do
24467: LD_ADDR_VAR 0 3
24471: PUSH
24472: DOUBLE
24473: LD_INT 1
24475: DEC
24476: ST_TO_ADDR
24477: LD_INT 4
24479: PUSH
24480: FOR_TO
24481: IFFALSE 24502
// SetSkill ( i , j , 10 ) ;
24483: LD_VAR 0 2
24487: PPUSH
24488: LD_VAR 0 3
24492: PPUSH
24493: LD_INT 10
24495: PPUSH
24496: CALL_OW 237
24500: GO 24480
24502: POP
24503: POP
// end ;
24504: GO 24464
24506: POP
24507: POP
// end ;
24508: LD_VAR 0 1
24512: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
24513: LD_INT 0
24515: PPUSH
// uc_side := your_side ;
24516: LD_ADDR_OWVAR 20
24520: PUSH
24521: LD_OWVAR 2
24525: ST_TO_ADDR
// uc_nation := nation ;
24526: LD_ADDR_OWVAR 21
24530: PUSH
24531: LD_VAR 0 1
24535: ST_TO_ADDR
// InitHc ;
24536: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
24540: LD_INT 0
24542: PPUSH
24543: LD_VAR 0 2
24547: PPUSH
24548: LD_VAR 0 3
24552: PPUSH
24553: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
24557: LD_VAR 0 4
24561: PPUSH
24562: LD_VAR 0 5
24566: PPUSH
24567: CALL_OW 428
24571: PUSH
24572: LD_INT 0
24574: EQUAL
24575: IFFALSE 24599
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
24577: CALL_OW 44
24581: PPUSH
24582: LD_VAR 0 4
24586: PPUSH
24587: LD_VAR 0 5
24591: PPUSH
24592: LD_INT 1
24594: PPUSH
24595: CALL_OW 48
// end ;
24599: LD_VAR 0 6
24603: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
24604: LD_INT 0
24606: PPUSH
24607: PPUSH
// uc_side := your_side ;
24608: LD_ADDR_OWVAR 20
24612: PUSH
24613: LD_OWVAR 2
24617: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
24618: LD_VAR 0 1
24622: PUSH
24623: LD_INT 1
24625: PUSH
24626: LD_INT 2
24628: PUSH
24629: LD_INT 3
24631: PUSH
24632: LD_INT 4
24634: PUSH
24635: LD_INT 5
24637: PUSH
24638: EMPTY
24639: LIST
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: IN
24645: IFFALSE 24657
// uc_nation := nation_american else
24647: LD_ADDR_OWVAR 21
24651: PUSH
24652: LD_INT 1
24654: ST_TO_ADDR
24655: GO 24700
// if chassis in [ 11 , 12 , 13 , 14 ] then
24657: LD_VAR 0 1
24661: PUSH
24662: LD_INT 11
24664: PUSH
24665: LD_INT 12
24667: PUSH
24668: LD_INT 13
24670: PUSH
24671: LD_INT 14
24673: PUSH
24674: EMPTY
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: IN
24680: IFFALSE 24692
// uc_nation := nation_arabian else
24682: LD_ADDR_OWVAR 21
24686: PUSH
24687: LD_INT 2
24689: ST_TO_ADDR
24690: GO 24700
// uc_nation := nation_russian ;
24692: LD_ADDR_OWVAR 21
24696: PUSH
24697: LD_INT 3
24699: ST_TO_ADDR
// vc_chassis := chassis ;
24700: LD_ADDR_OWVAR 37
24704: PUSH
24705: LD_VAR 0 1
24709: ST_TO_ADDR
// vc_engine := engine ;
24710: LD_ADDR_OWVAR 39
24714: PUSH
24715: LD_VAR 0 2
24719: ST_TO_ADDR
// vc_control := control ;
24720: LD_ADDR_OWVAR 38
24724: PUSH
24725: LD_VAR 0 3
24729: ST_TO_ADDR
// vc_weapon := weapon ;
24730: LD_ADDR_OWVAR 40
24734: PUSH
24735: LD_VAR 0 4
24739: ST_TO_ADDR
// un := CreateVehicle ;
24740: LD_ADDR_VAR 0 8
24744: PUSH
24745: CALL_OW 45
24749: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
24750: LD_VAR 0 8
24754: PPUSH
24755: LD_INT 0
24757: PPUSH
24758: LD_INT 5
24760: PPUSH
24761: CALL_OW 12
24765: PPUSH
24766: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
24770: LD_VAR 0 8
24774: PPUSH
24775: LD_VAR 0 5
24779: PPUSH
24780: LD_VAR 0 6
24784: PPUSH
24785: LD_INT 1
24787: PPUSH
24788: CALL_OW 48
// end ;
24792: LD_VAR 0 7
24796: RET
// export hInvincible ; every 1 do
24797: GO 24799
24799: DISABLE
// hInvincible := [ ] ;
24800: LD_ADDR_EXP 90
24804: PUSH
24805: EMPTY
24806: ST_TO_ADDR
24807: END
// every 10 do var i ;
24808: GO 24810
24810: DISABLE
24811: LD_INT 0
24813: PPUSH
// begin enable ;
24814: ENABLE
// if not hInvincible then
24815: LD_EXP 90
24819: NOT
24820: IFFALSE 24824
// exit ;
24822: GO 24868
// for i in hInvincible do
24824: LD_ADDR_VAR 0 1
24828: PUSH
24829: LD_EXP 90
24833: PUSH
24834: FOR_IN
24835: IFFALSE 24866
// if GetLives ( i ) < 1000 then
24837: LD_VAR 0 1
24841: PPUSH
24842: CALL_OW 256
24846: PUSH
24847: LD_INT 1000
24849: LESS
24850: IFFALSE 24864
// SetLives ( i , 1000 ) ;
24852: LD_VAR 0 1
24856: PPUSH
24857: LD_INT 1000
24859: PPUSH
24860: CALL_OW 234
24864: GO 24834
24866: POP
24867: POP
// end ;
24868: PPOPN 1
24870: END
// export function hHackInvincible ; var i ; begin
24871: LD_INT 0
24873: PPUSH
24874: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
24875: LD_ADDR_VAR 0 2
24879: PUSH
24880: LD_INT 2
24882: PUSH
24883: LD_INT 21
24885: PUSH
24886: LD_INT 1
24888: PUSH
24889: EMPTY
24890: LIST
24891: LIST
24892: PUSH
24893: LD_INT 21
24895: PUSH
24896: LD_INT 2
24898: PUSH
24899: EMPTY
24900: LIST
24901: LIST
24902: PUSH
24903: EMPTY
24904: LIST
24905: LIST
24906: LIST
24907: PPUSH
24908: CALL_OW 69
24912: PUSH
24913: FOR_IN
24914: IFFALSE 24975
// if IsSelected ( i ) then
24916: LD_VAR 0 2
24920: PPUSH
24921: CALL_OW 306
24925: IFFALSE 24973
// begin if i in hInvincible then
24927: LD_VAR 0 2
24931: PUSH
24932: LD_EXP 90
24936: IN
24937: IFFALSE 24957
// hInvincible := hInvincible diff i else
24939: LD_ADDR_EXP 90
24943: PUSH
24944: LD_EXP 90
24948: PUSH
24949: LD_VAR 0 2
24953: DIFF
24954: ST_TO_ADDR
24955: GO 24973
// hInvincible := hInvincible union i ;
24957: LD_ADDR_EXP 90
24961: PUSH
24962: LD_EXP 90
24966: PUSH
24967: LD_VAR 0 2
24971: UNION
24972: ST_TO_ADDR
// end ;
24973: GO 24913
24975: POP
24976: POP
// end ;
24977: LD_VAR 0 1
24981: RET
// export function hHackInvisible ; var i , j ; begin
24982: LD_INT 0
24984: PPUSH
24985: PPUSH
24986: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24987: LD_ADDR_VAR 0 2
24991: PUSH
24992: LD_INT 21
24994: PUSH
24995: LD_INT 1
24997: PUSH
24998: EMPTY
24999: LIST
25000: LIST
25001: PPUSH
25002: CALL_OW 69
25006: PUSH
25007: FOR_IN
25008: IFFALSE 25032
// if IsSelected ( i ) then
25010: LD_VAR 0 2
25014: PPUSH
25015: CALL_OW 306
25019: IFFALSE 25030
// ComForceInvisible ( i ) ;
25021: LD_VAR 0 2
25025: PPUSH
25026: CALL_OW 496
25030: GO 25007
25032: POP
25033: POP
// end ;
25034: LD_VAR 0 1
25038: RET
// export function hHackChangeYourSide ; begin
25039: LD_INT 0
25041: PPUSH
// if your_side = 8 then
25042: LD_OWVAR 2
25046: PUSH
25047: LD_INT 8
25049: EQUAL
25050: IFFALSE 25062
// your_side := 0 else
25052: LD_ADDR_OWVAR 2
25056: PUSH
25057: LD_INT 0
25059: ST_TO_ADDR
25060: GO 25076
// your_side := your_side + 1 ;
25062: LD_ADDR_OWVAR 2
25066: PUSH
25067: LD_OWVAR 2
25071: PUSH
25072: LD_INT 1
25074: PLUS
25075: ST_TO_ADDR
// end ;
25076: LD_VAR 0 1
25080: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25081: LD_INT 0
25083: PPUSH
25084: PPUSH
25085: PPUSH
// for i in all_units do
25086: LD_ADDR_VAR 0 2
25090: PUSH
25091: LD_OWVAR 3
25095: PUSH
25096: FOR_IN
25097: IFFALSE 25175
// if IsSelected ( i ) then
25099: LD_VAR 0 2
25103: PPUSH
25104: CALL_OW 306
25108: IFFALSE 25173
// begin j := GetSide ( i ) ;
25110: LD_ADDR_VAR 0 3
25114: PUSH
25115: LD_VAR 0 2
25119: PPUSH
25120: CALL_OW 255
25124: ST_TO_ADDR
// if j = 8 then
25125: LD_VAR 0 3
25129: PUSH
25130: LD_INT 8
25132: EQUAL
25133: IFFALSE 25145
// j := 0 else
25135: LD_ADDR_VAR 0 3
25139: PUSH
25140: LD_INT 0
25142: ST_TO_ADDR
25143: GO 25159
// j := j + 1 ;
25145: LD_ADDR_VAR 0 3
25149: PUSH
25150: LD_VAR 0 3
25154: PUSH
25155: LD_INT 1
25157: PLUS
25158: ST_TO_ADDR
// SetSide ( i , j ) ;
25159: LD_VAR 0 2
25163: PPUSH
25164: LD_VAR 0 3
25168: PPUSH
25169: CALL_OW 235
// end ;
25173: GO 25096
25175: POP
25176: POP
// end ;
25177: LD_VAR 0 1
25181: RET
// export function hHackFog ; begin
25182: LD_INT 0
25184: PPUSH
// FogOff ( true ) ;
25185: LD_INT 1
25187: PPUSH
25188: CALL_OW 344
// end ;
25192: LD_VAR 0 1
25196: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25197: LD_INT 0
25199: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25200: LD_VAR 0 1
25204: PPUSH
25205: LD_VAR 0 2
25209: PPUSH
25210: LD_VAR 0 3
25214: PPUSH
25215: LD_INT 1
25217: PPUSH
25218: LD_INT 1
25220: PPUSH
25221: CALL_OW 483
// CenterOnXY ( x , y ) ;
25225: LD_VAR 0 2
25229: PPUSH
25230: LD_VAR 0 3
25234: PPUSH
25235: CALL_OW 84
// end ; end_of_file
25239: LD_VAR 0 4
25243: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
25244: LD_INT 0
25246: PPUSH
25247: PPUSH
25248: PPUSH
25249: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
25250: LD_VAR 0 1
25254: PPUSH
25255: CALL_OW 264
25259: PUSH
25260: LD_EXP 25
25264: EQUAL
25265: IFFALSE 25337
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
25267: LD_INT 68
25269: PPUSH
25270: LD_VAR 0 1
25274: PPUSH
25275: CALL_OW 255
25279: PPUSH
25280: CALL_OW 321
25284: PUSH
25285: LD_INT 2
25287: EQUAL
25288: IFFALSE 25300
// eff := 70 else
25290: LD_ADDR_VAR 0 4
25294: PUSH
25295: LD_INT 70
25297: ST_TO_ADDR
25298: GO 25308
// eff := 30 ;
25300: LD_ADDR_VAR 0 4
25304: PUSH
25305: LD_INT 30
25307: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
25308: LD_VAR 0 1
25312: PPUSH
25313: CALL_OW 250
25317: PPUSH
25318: LD_VAR 0 1
25322: PPUSH
25323: CALL_OW 251
25327: PPUSH
25328: LD_VAR 0 4
25332: PPUSH
25333: CALL_OW 495
// end ; end ;
25337: LD_VAR 0 2
25341: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
25342: LD_INT 0
25344: PPUSH
// end ;
25345: LD_VAR 0 4
25349: RET
// export function SOS_Command ( cmd ) ; begin
25350: LD_INT 0
25352: PPUSH
// end ;
25353: LD_VAR 0 2
25357: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
25358: LD_INT 0
25360: PPUSH
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
25361: LD_VAR 0 1
25365: PUSH
25366: LD_INT 254
25368: EQUAL
25369: PUSH
25370: LD_VAR 0 2
25374: PPUSH
25375: CALL_OW 264
25379: PUSH
25380: LD_EXP 23
25384: EQUAL
25385: AND
25386: PUSH
25387: LD_VAR 0 3
25391: PPUSH
25392: CALL_OW 263
25396: PUSH
25397: LD_INT 3
25399: EQUAL
25400: AND
25401: IFFALSE 25417
// HackDestroyVehicle ( unit , selectedUnit ) ;
25403: LD_VAR 0 2
25407: PPUSH
25408: LD_VAR 0 3
25412: PPUSH
25413: CALL 26926 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
25417: LD_VAR 0 1
25421: PUSH
25422: LD_INT 255
25424: EQUAL
25425: PUSH
25426: LD_VAR 0 2
25430: PPUSH
25431: CALL_OW 264
25435: PUSH
25436: LD_INT 14
25438: PUSH
25439: LD_INT 53
25441: PUSH
25442: EMPTY
25443: LIST
25444: LIST
25445: IN
25446: AND
25447: PUSH
25448: LD_VAR 0 4
25452: PPUSH
25453: LD_VAR 0 5
25457: PPUSH
25458: CALL_OW 488
25462: AND
25463: IFFALSE 25487
// CutTreeXYR ( unit , x , y , 12 ) ;
25465: LD_VAR 0 2
25469: PPUSH
25470: LD_VAR 0 4
25474: PPUSH
25475: LD_VAR 0 5
25479: PPUSH
25480: LD_INT 12
25482: PPUSH
25483: CALL 25492 0 4
// end ;
25487: LD_VAR 0 6
25491: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
25492: LD_INT 0
25494: PPUSH
25495: PPUSH
25496: PPUSH
25497: PPUSH
25498: PPUSH
25499: PPUSH
25500: PPUSH
25501: PPUSH
25502: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
25503: LD_VAR 0 1
25507: NOT
25508: PUSH
25509: LD_VAR 0 2
25513: PPUSH
25514: LD_VAR 0 3
25518: PPUSH
25519: CALL_OW 488
25523: NOT
25524: OR
25525: PUSH
25526: LD_VAR 0 4
25530: NOT
25531: OR
25532: IFFALSE 25536
// exit ;
25534: GO 25876
// list := [ ] ;
25536: LD_ADDR_VAR 0 13
25540: PUSH
25541: EMPTY
25542: ST_TO_ADDR
// if x - r < 0 then
25543: LD_VAR 0 2
25547: PUSH
25548: LD_VAR 0 4
25552: MINUS
25553: PUSH
25554: LD_INT 0
25556: LESS
25557: IFFALSE 25569
// min_x := 0 else
25559: LD_ADDR_VAR 0 7
25563: PUSH
25564: LD_INT 0
25566: ST_TO_ADDR
25567: GO 25585
// min_x := x - r ;
25569: LD_ADDR_VAR 0 7
25573: PUSH
25574: LD_VAR 0 2
25578: PUSH
25579: LD_VAR 0 4
25583: MINUS
25584: ST_TO_ADDR
// if y - r < 0 then
25585: LD_VAR 0 3
25589: PUSH
25590: LD_VAR 0 4
25594: MINUS
25595: PUSH
25596: LD_INT 0
25598: LESS
25599: IFFALSE 25611
// min_y := 0 else
25601: LD_ADDR_VAR 0 8
25605: PUSH
25606: LD_INT 0
25608: ST_TO_ADDR
25609: GO 25627
// min_y := y - r ;
25611: LD_ADDR_VAR 0 8
25615: PUSH
25616: LD_VAR 0 3
25620: PUSH
25621: LD_VAR 0 4
25625: MINUS
25626: ST_TO_ADDR
// max_x := x + r ;
25627: LD_ADDR_VAR 0 9
25631: PUSH
25632: LD_VAR 0 2
25636: PUSH
25637: LD_VAR 0 4
25641: PLUS
25642: ST_TO_ADDR
// max_y := y + r ;
25643: LD_ADDR_VAR 0 10
25647: PUSH
25648: LD_VAR 0 3
25652: PUSH
25653: LD_VAR 0 4
25657: PLUS
25658: ST_TO_ADDR
// for _x = min_x to max_x do
25659: LD_ADDR_VAR 0 11
25663: PUSH
25664: DOUBLE
25665: LD_VAR 0 7
25669: DEC
25670: ST_TO_ADDR
25671: LD_VAR 0 9
25675: PUSH
25676: FOR_TO
25677: IFFALSE 25794
// for _y = min_y to max_y do
25679: LD_ADDR_VAR 0 12
25683: PUSH
25684: DOUBLE
25685: LD_VAR 0 8
25689: DEC
25690: ST_TO_ADDR
25691: LD_VAR 0 10
25695: PUSH
25696: FOR_TO
25697: IFFALSE 25790
// begin if not ValidHex ( _x , _y ) then
25699: LD_VAR 0 11
25703: PPUSH
25704: LD_VAR 0 12
25708: PPUSH
25709: CALL_OW 488
25713: NOT
25714: IFFALSE 25718
// continue ;
25716: GO 25696
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25718: LD_VAR 0 11
25722: PPUSH
25723: LD_VAR 0 12
25727: PPUSH
25728: CALL_OW 351
25732: PUSH
25733: LD_VAR 0 11
25737: PPUSH
25738: LD_VAR 0 12
25742: PPUSH
25743: CALL_OW 554
25747: AND
25748: IFFALSE 25788
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25750: LD_ADDR_VAR 0 13
25754: PUSH
25755: LD_VAR 0 13
25759: PPUSH
25760: LD_VAR 0 13
25764: PUSH
25765: LD_INT 1
25767: PLUS
25768: PPUSH
25769: LD_VAR 0 11
25773: PUSH
25774: LD_VAR 0 12
25778: PUSH
25779: EMPTY
25780: LIST
25781: LIST
25782: PPUSH
25783: CALL_OW 2
25787: ST_TO_ADDR
// end ;
25788: GO 25696
25790: POP
25791: POP
25792: GO 25676
25794: POP
25795: POP
// if not list then
25796: LD_VAR 0 13
25800: NOT
25801: IFFALSE 25805
// exit ;
25803: GO 25876
// for i in list do
25805: LD_ADDR_VAR 0 6
25809: PUSH
25810: LD_VAR 0 13
25814: PUSH
25815: FOR_IN
25816: IFFALSE 25874
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
25818: LD_VAR 0 1
25822: PPUSH
25823: LD_STRING M
25825: PUSH
25826: LD_VAR 0 6
25830: PUSH
25831: LD_INT 1
25833: ARRAY
25834: PUSH
25835: LD_VAR 0 6
25839: PUSH
25840: LD_INT 2
25842: ARRAY
25843: PUSH
25844: LD_INT 0
25846: PUSH
25847: LD_INT 0
25849: PUSH
25850: LD_INT 0
25852: PUSH
25853: LD_INT 0
25855: PUSH
25856: EMPTY
25857: LIST
25858: LIST
25859: LIST
25860: LIST
25861: LIST
25862: LIST
25863: LIST
25864: PUSH
25865: EMPTY
25866: LIST
25867: PPUSH
25868: CALL_OW 447
25872: GO 25815
25874: POP
25875: POP
// end ;
25876: LD_VAR 0 5
25880: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
25881: LD_EXP 91
25885: NOT
25886: IFFALSE 25936
25888: GO 25890
25890: DISABLE
// begin initHack := true ;
25891: LD_ADDR_EXP 91
25895: PUSH
25896: LD_INT 1
25898: ST_TO_ADDR
// hackTanks := [ ] ;
25899: LD_ADDR_EXP 92
25903: PUSH
25904: EMPTY
25905: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
25906: LD_ADDR_EXP 93
25910: PUSH
25911: EMPTY
25912: ST_TO_ADDR
// hackLimit := 3 ;
25913: LD_ADDR_EXP 94
25917: PUSH
25918: LD_INT 3
25920: ST_TO_ADDR
// hackDist := 12 ;
25921: LD_ADDR_EXP 95
25925: PUSH
25926: LD_INT 12
25928: ST_TO_ADDR
// hackCounter := [ ] ;
25929: LD_ADDR_EXP 96
25933: PUSH
25934: EMPTY
25935: ST_TO_ADDR
// end ;
25936: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
25937: LD_EXP 91
25941: PUSH
25942: LD_INT 34
25944: PUSH
25945: LD_EXP 23
25949: PUSH
25950: EMPTY
25951: LIST
25952: LIST
25953: PPUSH
25954: CALL_OW 69
25958: AND
25959: IFFALSE 26214
25961: GO 25963
25963: DISABLE
25964: LD_INT 0
25966: PPUSH
25967: PPUSH
// begin enable ;
25968: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
25969: LD_ADDR_VAR 0 1
25973: PUSH
25974: LD_INT 34
25976: PUSH
25977: LD_EXP 23
25981: PUSH
25982: EMPTY
25983: LIST
25984: LIST
25985: PPUSH
25986: CALL_OW 69
25990: PUSH
25991: FOR_IN
25992: IFFALSE 26212
// begin if not i in hackTanks then
25994: LD_VAR 0 1
25998: PUSH
25999: LD_EXP 92
26003: IN
26004: NOT
26005: IFFALSE 26088
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
26007: LD_ADDR_EXP 92
26011: PUSH
26012: LD_EXP 92
26016: PPUSH
26017: LD_EXP 92
26021: PUSH
26022: LD_INT 1
26024: PLUS
26025: PPUSH
26026: LD_VAR 0 1
26030: PPUSH
26031: CALL_OW 1
26035: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
26036: LD_ADDR_EXP 93
26040: PUSH
26041: LD_EXP 93
26045: PPUSH
26046: LD_EXP 93
26050: PUSH
26051: LD_INT 1
26053: PLUS
26054: PPUSH
26055: EMPTY
26056: PPUSH
26057: CALL_OW 1
26061: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
26062: LD_ADDR_EXP 96
26066: PUSH
26067: LD_EXP 96
26071: PPUSH
26072: LD_EXP 96
26076: PUSH
26077: LD_INT 1
26079: PLUS
26080: PPUSH
26081: EMPTY
26082: PPUSH
26083: CALL_OW 1
26087: ST_TO_ADDR
// end ; if not IsOk ( i ) then
26088: LD_VAR 0 1
26092: PPUSH
26093: CALL_OW 302
26097: NOT
26098: IFFALSE 26111
// begin HackUnlinkAll ( i ) ;
26100: LD_VAR 0 1
26104: PPUSH
26105: CALL 26217 0 1
// continue ;
26109: GO 25991
// end ; HackCheckCapturedStatus ( i ) ;
26111: LD_VAR 0 1
26115: PPUSH
26116: CALL 26660 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
26120: LD_ADDR_VAR 0 2
26124: PUSH
26125: LD_INT 81
26127: PUSH
26128: LD_VAR 0 1
26132: PPUSH
26133: CALL_OW 255
26137: PUSH
26138: EMPTY
26139: LIST
26140: LIST
26141: PUSH
26142: LD_INT 33
26144: PUSH
26145: LD_INT 3
26147: PUSH
26148: EMPTY
26149: LIST
26150: LIST
26151: PUSH
26152: LD_INT 91
26154: PUSH
26155: LD_VAR 0 1
26159: PUSH
26160: LD_EXP 95
26164: PUSH
26165: EMPTY
26166: LIST
26167: LIST
26168: LIST
26169: PUSH
26170: LD_INT 50
26172: PUSH
26173: EMPTY
26174: LIST
26175: PUSH
26176: EMPTY
26177: LIST
26178: LIST
26179: LIST
26180: LIST
26181: PPUSH
26182: CALL_OW 69
26186: ST_TO_ADDR
// if not tmp then
26187: LD_VAR 0 2
26191: NOT
26192: IFFALSE 26196
// continue ;
26194: GO 25991
// HackLink ( i , tmp ) ;
26196: LD_VAR 0 1
26200: PPUSH
26201: LD_VAR 0 2
26205: PPUSH
26206: CALL 26353 0 2
// end ;
26210: GO 25991
26212: POP
26213: POP
// end ;
26214: PPOPN 2
26216: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
26217: LD_INT 0
26219: PPUSH
26220: PPUSH
26221: PPUSH
// if not hack in hackTanks then
26222: LD_VAR 0 1
26226: PUSH
26227: LD_EXP 92
26231: IN
26232: NOT
26233: IFFALSE 26237
// exit ;
26235: GO 26348
// index := GetElementIndex ( hackTanks , hack ) ;
26237: LD_ADDR_VAR 0 4
26241: PUSH
26242: LD_EXP 92
26246: PPUSH
26247: LD_VAR 0 1
26251: PPUSH
26252: CALL 31768 0 2
26256: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
26257: LD_EXP 93
26261: PUSH
26262: LD_VAR 0 4
26266: ARRAY
26267: IFFALSE 26348
// begin for i in hackTanksCaptured [ index ] do
26269: LD_ADDR_VAR 0 3
26273: PUSH
26274: LD_EXP 93
26278: PUSH
26279: LD_VAR 0 4
26283: ARRAY
26284: PUSH
26285: FOR_IN
26286: IFFALSE 26312
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
26288: LD_VAR 0 3
26292: PUSH
26293: LD_INT 1
26295: ARRAY
26296: PPUSH
26297: LD_VAR 0 3
26301: PUSH
26302: LD_INT 2
26304: ARRAY
26305: PPUSH
26306: CALL_OW 235
26310: GO 26285
26312: POP
26313: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
26314: LD_ADDR_EXP 93
26318: PUSH
26319: LD_EXP 93
26323: PPUSH
26324: LD_VAR 0 4
26328: PPUSH
26329: EMPTY
26330: PPUSH
26331: CALL_OW 1
26335: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
26336: LD_VAR 0 1
26340: PPUSH
26341: LD_INT 0
26343: PPUSH
26344: CALL_OW 505
// end ; end ;
26348: LD_VAR 0 2
26352: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
26353: LD_INT 0
26355: PPUSH
26356: PPUSH
26357: PPUSH
// if not hack in hackTanks or not vehicles then
26358: LD_VAR 0 1
26362: PUSH
26363: LD_EXP 92
26367: IN
26368: NOT
26369: PUSH
26370: LD_VAR 0 2
26374: NOT
26375: OR
26376: IFFALSE 26380
// exit ;
26378: GO 26655
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
26380: LD_ADDR_VAR 0 2
26384: PUSH
26385: LD_VAR 0 1
26389: PPUSH
26390: LD_VAR 0 2
26394: PPUSH
26395: LD_INT 1
26397: PPUSH
26398: LD_INT 1
26400: PPUSH
26401: CALL 32418 0 4
26405: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
26406: LD_ADDR_VAR 0 5
26410: PUSH
26411: LD_EXP 92
26415: PPUSH
26416: LD_VAR 0 1
26420: PPUSH
26421: CALL 31768 0 2
26425: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
26426: LD_EXP 93
26430: PUSH
26431: LD_VAR 0 5
26435: ARRAY
26436: PUSH
26437: LD_EXP 94
26441: LESS
26442: IFFALSE 26631
// begin for i := 1 to vehicles do
26444: LD_ADDR_VAR 0 4
26448: PUSH
26449: DOUBLE
26450: LD_INT 1
26452: DEC
26453: ST_TO_ADDR
26454: LD_VAR 0 2
26458: PUSH
26459: FOR_TO
26460: IFFALSE 26629
// begin if hackTanksCaptured [ index ] = hackLimit then
26462: LD_EXP 93
26466: PUSH
26467: LD_VAR 0 5
26471: ARRAY
26472: PUSH
26473: LD_EXP 94
26477: EQUAL
26478: IFFALSE 26482
// break ;
26480: GO 26629
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
26482: LD_ADDR_EXP 96
26486: PUSH
26487: LD_EXP 96
26491: PPUSH
26492: LD_VAR 0 5
26496: PPUSH
26497: LD_EXP 96
26501: PUSH
26502: LD_VAR 0 5
26506: ARRAY
26507: PUSH
26508: LD_INT 1
26510: PLUS
26511: PPUSH
26512: CALL_OW 1
26516: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
26517: LD_ADDR_EXP 93
26521: PUSH
26522: LD_EXP 93
26526: PPUSH
26527: LD_VAR 0 5
26531: PUSH
26532: LD_EXP 93
26536: PUSH
26537: LD_VAR 0 5
26541: ARRAY
26542: PUSH
26543: LD_INT 1
26545: PLUS
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: PPUSH
26551: LD_VAR 0 2
26555: PUSH
26556: LD_VAR 0 4
26560: ARRAY
26561: PUSH
26562: LD_VAR 0 2
26566: PUSH
26567: LD_VAR 0 4
26571: ARRAY
26572: PPUSH
26573: CALL_OW 255
26577: PUSH
26578: EMPTY
26579: LIST
26580: LIST
26581: PPUSH
26582: CALL 31983 0 3
26586: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
26587: LD_VAR 0 2
26591: PUSH
26592: LD_VAR 0 4
26596: ARRAY
26597: PPUSH
26598: LD_VAR 0 1
26602: PPUSH
26603: CALL_OW 255
26607: PPUSH
26608: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
26612: LD_VAR 0 2
26616: PUSH
26617: LD_VAR 0 4
26621: ARRAY
26622: PPUSH
26623: CALL_OW 141
// end ;
26627: GO 26459
26629: POP
26630: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26631: LD_VAR 0 1
26635: PPUSH
26636: LD_EXP 93
26640: PUSH
26641: LD_VAR 0 5
26645: ARRAY
26646: PUSH
26647: LD_INT 0
26649: PLUS
26650: PPUSH
26651: CALL_OW 505
// end ;
26655: LD_VAR 0 3
26659: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
26660: LD_INT 0
26662: PPUSH
26663: PPUSH
26664: PPUSH
26665: PPUSH
// if not hack in hackTanks then
26666: LD_VAR 0 1
26670: PUSH
26671: LD_EXP 92
26675: IN
26676: NOT
26677: IFFALSE 26681
// exit ;
26679: GO 26921
// index := GetElementIndex ( hackTanks , hack ) ;
26681: LD_ADDR_VAR 0 4
26685: PUSH
26686: LD_EXP 92
26690: PPUSH
26691: LD_VAR 0 1
26695: PPUSH
26696: CALL 31768 0 2
26700: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
26701: LD_ADDR_VAR 0 3
26705: PUSH
26706: DOUBLE
26707: LD_EXP 93
26711: PUSH
26712: LD_VAR 0 4
26716: ARRAY
26717: INC
26718: ST_TO_ADDR
26719: LD_INT 1
26721: PUSH
26722: FOR_DOWNTO
26723: IFFALSE 26895
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
26725: LD_ADDR_VAR 0 5
26729: PUSH
26730: LD_EXP 93
26734: PUSH
26735: LD_VAR 0 4
26739: ARRAY
26740: PUSH
26741: LD_VAR 0 3
26745: ARRAY
26746: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
26747: LD_VAR 0 5
26751: PUSH
26752: LD_INT 1
26754: ARRAY
26755: PPUSH
26756: CALL_OW 302
26760: NOT
26761: PUSH
26762: LD_VAR 0 5
26766: PUSH
26767: LD_INT 1
26769: ARRAY
26770: PPUSH
26771: CALL_OW 255
26775: PUSH
26776: LD_VAR 0 1
26780: PPUSH
26781: CALL_OW 255
26785: NONEQUAL
26786: OR
26787: IFFALSE 26893
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
26789: LD_VAR 0 5
26793: PUSH
26794: LD_INT 1
26796: ARRAY
26797: PPUSH
26798: CALL_OW 305
26802: PUSH
26803: LD_VAR 0 5
26807: PUSH
26808: LD_INT 1
26810: ARRAY
26811: PPUSH
26812: CALL_OW 255
26816: PUSH
26817: LD_VAR 0 1
26821: PPUSH
26822: CALL_OW 255
26826: EQUAL
26827: AND
26828: IFFALSE 26852
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
26830: LD_VAR 0 5
26834: PUSH
26835: LD_INT 1
26837: ARRAY
26838: PPUSH
26839: LD_VAR 0 5
26843: PUSH
26844: LD_INT 2
26846: ARRAY
26847: PPUSH
26848: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
26852: LD_ADDR_EXP 93
26856: PUSH
26857: LD_EXP 93
26861: PPUSH
26862: LD_VAR 0 4
26866: PPUSH
26867: LD_EXP 93
26871: PUSH
26872: LD_VAR 0 4
26876: ARRAY
26877: PPUSH
26878: LD_VAR 0 3
26882: PPUSH
26883: CALL_OW 3
26887: PPUSH
26888: CALL_OW 1
26892: ST_TO_ADDR
// end ; end ;
26893: GO 26722
26895: POP
26896: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26897: LD_VAR 0 1
26901: PPUSH
26902: LD_EXP 93
26906: PUSH
26907: LD_VAR 0 4
26911: ARRAY
26912: PUSH
26913: LD_INT 0
26915: PLUS
26916: PPUSH
26917: CALL_OW 505
// end ;
26921: LD_VAR 0 2
26925: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
26926: LD_INT 0
26928: PPUSH
26929: PPUSH
26930: PPUSH
26931: PPUSH
// if not hack in hackTanks then
26932: LD_VAR 0 1
26936: PUSH
26937: LD_EXP 92
26941: IN
26942: NOT
26943: IFFALSE 26947
// exit ;
26945: GO 27032
// index := GetElementIndex ( hackTanks , hack ) ;
26947: LD_ADDR_VAR 0 5
26951: PUSH
26952: LD_EXP 92
26956: PPUSH
26957: LD_VAR 0 1
26961: PPUSH
26962: CALL 31768 0 2
26966: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
26967: LD_ADDR_VAR 0 4
26971: PUSH
26972: DOUBLE
26973: LD_INT 1
26975: DEC
26976: ST_TO_ADDR
26977: LD_EXP 93
26981: PUSH
26982: LD_VAR 0 5
26986: ARRAY
26987: PUSH
26988: FOR_TO
26989: IFFALSE 27030
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
26991: LD_EXP 93
26995: PUSH
26996: LD_VAR 0 5
27000: ARRAY
27001: PUSH
27002: LD_VAR 0 4
27006: ARRAY
27007: PUSH
27008: LD_INT 1
27010: ARRAY
27011: PUSH
27012: LD_VAR 0 2
27016: EQUAL
27017: IFFALSE 27028
// KillUnit ( vehicle ) ;
27019: LD_VAR 0 2
27023: PPUSH
27024: CALL_OW 66
27028: GO 26988
27030: POP
27031: POP
// end ; end_of_file
27032: LD_VAR 0 3
27036: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
27037: LD_INT 0
27039: PPUSH
27040: PPUSH
// if exist_mode then
27041: LD_VAR 0 2
27045: IFFALSE 27070
// unit := CreateCharacter ( prefix & ident ) else
27047: LD_ADDR_VAR 0 5
27051: PUSH
27052: LD_VAR 0 3
27056: PUSH
27057: LD_VAR 0 1
27061: STR
27062: PPUSH
27063: CALL_OW 34
27067: ST_TO_ADDR
27068: GO 27085
// unit := NewCharacter ( ident ) ;
27070: LD_ADDR_VAR 0 5
27074: PUSH
27075: LD_VAR 0 1
27079: PPUSH
27080: CALL_OW 25
27084: ST_TO_ADDR
// result := unit ;
27085: LD_ADDR_VAR 0 4
27089: PUSH
27090: LD_VAR 0 5
27094: ST_TO_ADDR
// end ;
27095: LD_VAR 0 4
27099: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
27100: LD_INT 0
27102: PPUSH
27103: PPUSH
// if not side or not nation then
27104: LD_VAR 0 1
27108: NOT
27109: PUSH
27110: LD_VAR 0 2
27114: NOT
27115: OR
27116: IFFALSE 27120
// exit ;
27118: GO 27884
// case nation of nation_american :
27120: LD_VAR 0 2
27124: PUSH
27125: LD_INT 1
27127: DOUBLE
27128: EQUAL
27129: IFTRUE 27133
27131: GO 27347
27133: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
27134: LD_ADDR_VAR 0 4
27138: PUSH
27139: LD_INT 35
27141: PUSH
27142: LD_INT 45
27144: PUSH
27145: LD_INT 46
27147: PUSH
27148: LD_INT 47
27150: PUSH
27151: LD_INT 82
27153: PUSH
27154: LD_INT 83
27156: PUSH
27157: LD_INT 84
27159: PUSH
27160: LD_INT 85
27162: PUSH
27163: LD_INT 86
27165: PUSH
27166: LD_INT 1
27168: PUSH
27169: LD_INT 2
27171: PUSH
27172: LD_INT 6
27174: PUSH
27175: LD_INT 15
27177: PUSH
27178: LD_INT 16
27180: PUSH
27181: LD_INT 7
27183: PUSH
27184: LD_INT 12
27186: PUSH
27187: LD_INT 13
27189: PUSH
27190: LD_INT 10
27192: PUSH
27193: LD_INT 14
27195: PUSH
27196: LD_INT 20
27198: PUSH
27199: LD_INT 21
27201: PUSH
27202: LD_INT 22
27204: PUSH
27205: LD_INT 25
27207: PUSH
27208: LD_INT 32
27210: PUSH
27211: LD_INT 27
27213: PUSH
27214: LD_INT 36
27216: PUSH
27217: LD_INT 69
27219: PUSH
27220: LD_INT 39
27222: PUSH
27223: LD_INT 34
27225: PUSH
27226: LD_INT 40
27228: PUSH
27229: LD_INT 48
27231: PUSH
27232: LD_INT 49
27234: PUSH
27235: LD_INT 50
27237: PUSH
27238: LD_INT 51
27240: PUSH
27241: LD_INT 52
27243: PUSH
27244: LD_INT 53
27246: PUSH
27247: LD_INT 54
27249: PUSH
27250: LD_INT 55
27252: PUSH
27253: LD_INT 56
27255: PUSH
27256: LD_INT 57
27258: PUSH
27259: LD_INT 58
27261: PUSH
27262: LD_INT 59
27264: PUSH
27265: LD_INT 60
27267: PUSH
27268: LD_INT 61
27270: PUSH
27271: LD_INT 62
27273: PUSH
27274: LD_INT 80
27276: PUSH
27277: LD_INT 82
27279: PUSH
27280: LD_INT 83
27282: PUSH
27283: LD_INT 84
27285: PUSH
27286: LD_INT 85
27288: PUSH
27289: LD_INT 86
27291: PUSH
27292: EMPTY
27293: LIST
27294: LIST
27295: LIST
27296: LIST
27297: LIST
27298: LIST
27299: LIST
27300: LIST
27301: LIST
27302: LIST
27303: LIST
27304: LIST
27305: LIST
27306: LIST
27307: LIST
27308: LIST
27309: LIST
27310: LIST
27311: LIST
27312: LIST
27313: LIST
27314: LIST
27315: LIST
27316: LIST
27317: LIST
27318: LIST
27319: LIST
27320: LIST
27321: LIST
27322: LIST
27323: LIST
27324: LIST
27325: LIST
27326: LIST
27327: LIST
27328: LIST
27329: LIST
27330: LIST
27331: LIST
27332: LIST
27333: LIST
27334: LIST
27335: LIST
27336: LIST
27337: LIST
27338: LIST
27339: LIST
27340: LIST
27341: LIST
27342: LIST
27343: LIST
27344: ST_TO_ADDR
27345: GO 27808
27347: LD_INT 2
27349: DOUBLE
27350: EQUAL
27351: IFTRUE 27355
27353: GO 27577
27355: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
27356: LD_ADDR_VAR 0 4
27360: PUSH
27361: LD_INT 35
27363: PUSH
27364: LD_INT 45
27366: PUSH
27367: LD_INT 46
27369: PUSH
27370: LD_INT 47
27372: PUSH
27373: LD_INT 82
27375: PUSH
27376: LD_INT 83
27378: PUSH
27379: LD_INT 84
27381: PUSH
27382: LD_INT 85
27384: PUSH
27385: LD_INT 87
27387: PUSH
27388: LD_INT 70
27390: PUSH
27391: LD_INT 1
27393: PUSH
27394: LD_INT 11
27396: PUSH
27397: LD_INT 3
27399: PUSH
27400: LD_INT 4
27402: PUSH
27403: LD_INT 5
27405: PUSH
27406: LD_INT 6
27408: PUSH
27409: LD_INT 15
27411: PUSH
27412: LD_INT 18
27414: PUSH
27415: LD_INT 7
27417: PUSH
27418: LD_INT 17
27420: PUSH
27421: LD_INT 8
27423: PUSH
27424: LD_INT 20
27426: PUSH
27427: LD_INT 21
27429: PUSH
27430: LD_INT 22
27432: PUSH
27433: LD_INT 72
27435: PUSH
27436: LD_INT 26
27438: PUSH
27439: LD_INT 69
27441: PUSH
27442: LD_INT 39
27444: PUSH
27445: LD_INT 40
27447: PUSH
27448: LD_INT 41
27450: PUSH
27451: LD_INT 42
27453: PUSH
27454: LD_INT 43
27456: PUSH
27457: LD_INT 48
27459: PUSH
27460: LD_INT 49
27462: PUSH
27463: LD_INT 50
27465: PUSH
27466: LD_INT 51
27468: PUSH
27469: LD_INT 52
27471: PUSH
27472: LD_INT 53
27474: PUSH
27475: LD_INT 54
27477: PUSH
27478: LD_INT 55
27480: PUSH
27481: LD_INT 56
27483: PUSH
27484: LD_INT 60
27486: PUSH
27487: LD_INT 61
27489: PUSH
27490: LD_INT 62
27492: PUSH
27493: LD_INT 66
27495: PUSH
27496: LD_INT 67
27498: PUSH
27499: LD_INT 68
27501: PUSH
27502: LD_INT 81
27504: PUSH
27505: LD_INT 82
27507: PUSH
27508: LD_INT 83
27510: PUSH
27511: LD_INT 84
27513: PUSH
27514: LD_INT 85
27516: PUSH
27517: LD_INT 87
27519: PUSH
27520: EMPTY
27521: LIST
27522: LIST
27523: LIST
27524: LIST
27525: LIST
27526: LIST
27527: LIST
27528: LIST
27529: LIST
27530: LIST
27531: LIST
27532: LIST
27533: LIST
27534: LIST
27535: LIST
27536: LIST
27537: LIST
27538: LIST
27539: LIST
27540: LIST
27541: LIST
27542: LIST
27543: LIST
27544: LIST
27545: LIST
27546: LIST
27547: LIST
27548: LIST
27549: LIST
27550: LIST
27551: LIST
27552: LIST
27553: LIST
27554: LIST
27555: LIST
27556: LIST
27557: LIST
27558: LIST
27559: LIST
27560: LIST
27561: LIST
27562: LIST
27563: LIST
27564: LIST
27565: LIST
27566: LIST
27567: LIST
27568: LIST
27569: LIST
27570: LIST
27571: LIST
27572: LIST
27573: LIST
27574: ST_TO_ADDR
27575: GO 27808
27577: LD_INT 3
27579: DOUBLE
27580: EQUAL
27581: IFTRUE 27585
27583: GO 27807
27585: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27586: LD_ADDR_VAR 0 4
27590: PUSH
27591: LD_INT 46
27593: PUSH
27594: LD_INT 47
27596: PUSH
27597: LD_INT 1
27599: PUSH
27600: LD_INT 2
27602: PUSH
27603: LD_INT 82
27605: PUSH
27606: LD_INT 83
27608: PUSH
27609: LD_INT 84
27611: PUSH
27612: LD_INT 85
27614: PUSH
27615: LD_INT 86
27617: PUSH
27618: LD_INT 11
27620: PUSH
27621: LD_INT 9
27623: PUSH
27624: LD_INT 20
27626: PUSH
27627: LD_INT 19
27629: PUSH
27630: LD_INT 21
27632: PUSH
27633: LD_INT 24
27635: PUSH
27636: LD_INT 22
27638: PUSH
27639: LD_INT 25
27641: PUSH
27642: LD_INT 28
27644: PUSH
27645: LD_INT 29
27647: PUSH
27648: LD_INT 30
27650: PUSH
27651: LD_INT 31
27653: PUSH
27654: LD_INT 37
27656: PUSH
27657: LD_INT 38
27659: PUSH
27660: LD_INT 32
27662: PUSH
27663: LD_INT 27
27665: PUSH
27666: LD_INT 33
27668: PUSH
27669: LD_INT 69
27671: PUSH
27672: LD_INT 39
27674: PUSH
27675: LD_INT 34
27677: PUSH
27678: LD_INT 40
27680: PUSH
27681: LD_INT 71
27683: PUSH
27684: LD_INT 23
27686: PUSH
27687: LD_INT 44
27689: PUSH
27690: LD_INT 48
27692: PUSH
27693: LD_INT 49
27695: PUSH
27696: LD_INT 50
27698: PUSH
27699: LD_INT 51
27701: PUSH
27702: LD_INT 52
27704: PUSH
27705: LD_INT 53
27707: PUSH
27708: LD_INT 54
27710: PUSH
27711: LD_INT 55
27713: PUSH
27714: LD_INT 56
27716: PUSH
27717: LD_INT 57
27719: PUSH
27720: LD_INT 58
27722: PUSH
27723: LD_INT 59
27725: PUSH
27726: LD_INT 63
27728: PUSH
27729: LD_INT 64
27731: PUSH
27732: LD_INT 65
27734: PUSH
27735: LD_INT 82
27737: PUSH
27738: LD_INT 83
27740: PUSH
27741: LD_INT 84
27743: PUSH
27744: LD_INT 85
27746: PUSH
27747: LD_INT 86
27749: PUSH
27750: EMPTY
27751: LIST
27752: LIST
27753: LIST
27754: LIST
27755: LIST
27756: LIST
27757: LIST
27758: LIST
27759: LIST
27760: LIST
27761: LIST
27762: LIST
27763: LIST
27764: LIST
27765: LIST
27766: LIST
27767: LIST
27768: LIST
27769: LIST
27770: LIST
27771: LIST
27772: LIST
27773: LIST
27774: LIST
27775: LIST
27776: LIST
27777: LIST
27778: LIST
27779: LIST
27780: LIST
27781: LIST
27782: LIST
27783: LIST
27784: LIST
27785: LIST
27786: LIST
27787: LIST
27788: LIST
27789: LIST
27790: LIST
27791: LIST
27792: LIST
27793: LIST
27794: LIST
27795: LIST
27796: LIST
27797: LIST
27798: LIST
27799: LIST
27800: LIST
27801: LIST
27802: LIST
27803: LIST
27804: ST_TO_ADDR
27805: GO 27808
27807: POP
// if state > - 1 and state < 3 then
27808: LD_VAR 0 3
27812: PUSH
27813: LD_INT 1
27815: NEG
27816: GREATER
27817: PUSH
27818: LD_VAR 0 3
27822: PUSH
27823: LD_INT 3
27825: LESS
27826: AND
27827: IFFALSE 27884
// for i in result do
27829: LD_ADDR_VAR 0 5
27833: PUSH
27834: LD_VAR 0 4
27838: PUSH
27839: FOR_IN
27840: IFFALSE 27882
// if GetTech ( i , side ) <> state then
27842: LD_VAR 0 5
27846: PPUSH
27847: LD_VAR 0 1
27851: PPUSH
27852: CALL_OW 321
27856: PUSH
27857: LD_VAR 0 3
27861: NONEQUAL
27862: IFFALSE 27880
// result := result diff i ;
27864: LD_ADDR_VAR 0 4
27868: PUSH
27869: LD_VAR 0 4
27873: PUSH
27874: LD_VAR 0 5
27878: DIFF
27879: ST_TO_ADDR
27880: GO 27839
27882: POP
27883: POP
// end ;
27884: LD_VAR 0 4
27888: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
27889: LD_INT 0
27891: PPUSH
27892: PPUSH
27893: PPUSH
// result := true ;
27894: LD_ADDR_VAR 0 3
27898: PUSH
27899: LD_INT 1
27901: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
27902: LD_ADDR_VAR 0 5
27906: PUSH
27907: LD_VAR 0 2
27911: PPUSH
27912: CALL_OW 480
27916: ST_TO_ADDR
// if not tmp then
27917: LD_VAR 0 5
27921: NOT
27922: IFFALSE 27926
// exit ;
27924: GO 27975
// for i in tmp do
27926: LD_ADDR_VAR 0 4
27930: PUSH
27931: LD_VAR 0 5
27935: PUSH
27936: FOR_IN
27937: IFFALSE 27973
// if GetTech ( i , side ) <> state_researched then
27939: LD_VAR 0 4
27943: PPUSH
27944: LD_VAR 0 1
27948: PPUSH
27949: CALL_OW 321
27953: PUSH
27954: LD_INT 2
27956: NONEQUAL
27957: IFFALSE 27971
// begin result := false ;
27959: LD_ADDR_VAR 0 3
27963: PUSH
27964: LD_INT 0
27966: ST_TO_ADDR
// exit ;
27967: POP
27968: POP
27969: GO 27975
// end ;
27971: GO 27936
27973: POP
27974: POP
// end ;
27975: LD_VAR 0 3
27979: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
27980: LD_INT 0
27982: PPUSH
27983: PPUSH
27984: PPUSH
27985: PPUSH
27986: PPUSH
27987: PPUSH
27988: PPUSH
27989: PPUSH
27990: PPUSH
27991: PPUSH
27992: PPUSH
27993: PPUSH
27994: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
27995: LD_VAR 0 1
27999: NOT
28000: PUSH
28001: LD_VAR 0 1
28005: PPUSH
28006: CALL_OW 257
28010: PUSH
28011: LD_INT 9
28013: NONEQUAL
28014: OR
28015: IFFALSE 28019
// exit ;
28017: GO 28592
// side := GetSide ( unit ) ;
28019: LD_ADDR_VAR 0 9
28023: PUSH
28024: LD_VAR 0 1
28028: PPUSH
28029: CALL_OW 255
28033: ST_TO_ADDR
// tech_space := tech_spacanom ;
28034: LD_ADDR_VAR 0 12
28038: PUSH
28039: LD_INT 29
28041: ST_TO_ADDR
// tech_time := tech_taurad ;
28042: LD_ADDR_VAR 0 13
28046: PUSH
28047: LD_INT 28
28049: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
28050: LD_ADDR_VAR 0 11
28054: PUSH
28055: LD_VAR 0 1
28059: PPUSH
28060: CALL_OW 310
28064: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
28065: LD_VAR 0 11
28069: PPUSH
28070: CALL_OW 247
28074: PUSH
28075: LD_INT 2
28077: EQUAL
28078: IFFALSE 28082
// exit ;
28080: GO 28592
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28082: LD_ADDR_VAR 0 8
28086: PUSH
28087: LD_INT 81
28089: PUSH
28090: LD_VAR 0 9
28094: PUSH
28095: EMPTY
28096: LIST
28097: LIST
28098: PUSH
28099: LD_INT 3
28101: PUSH
28102: LD_INT 21
28104: PUSH
28105: LD_INT 3
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: PUSH
28112: EMPTY
28113: LIST
28114: LIST
28115: PUSH
28116: EMPTY
28117: LIST
28118: LIST
28119: PPUSH
28120: CALL_OW 69
28124: ST_TO_ADDR
// if not tmp then
28125: LD_VAR 0 8
28129: NOT
28130: IFFALSE 28134
// exit ;
28132: GO 28592
// if in_unit then
28134: LD_VAR 0 11
28138: IFFALSE 28162
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
28140: LD_ADDR_VAR 0 10
28144: PUSH
28145: LD_VAR 0 8
28149: PPUSH
28150: LD_VAR 0 11
28154: PPUSH
28155: CALL_OW 74
28159: ST_TO_ADDR
28160: GO 28182
// enemy := NearestUnitToUnit ( tmp , unit ) ;
28162: LD_ADDR_VAR 0 10
28166: PUSH
28167: LD_VAR 0 8
28171: PPUSH
28172: LD_VAR 0 1
28176: PPUSH
28177: CALL_OW 74
28181: ST_TO_ADDR
// if not enemy then
28182: LD_VAR 0 10
28186: NOT
28187: IFFALSE 28191
// exit ;
28189: GO 28592
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
28191: LD_VAR 0 11
28195: PUSH
28196: LD_VAR 0 11
28200: PPUSH
28201: LD_VAR 0 10
28205: PPUSH
28206: CALL_OW 296
28210: PUSH
28211: LD_INT 13
28213: GREATER
28214: AND
28215: PUSH
28216: LD_VAR 0 1
28220: PPUSH
28221: LD_VAR 0 10
28225: PPUSH
28226: CALL_OW 296
28230: PUSH
28231: LD_INT 12
28233: GREATER
28234: OR
28235: IFFALSE 28239
// exit ;
28237: GO 28592
// missile := [ 1 ] ;
28239: LD_ADDR_VAR 0 14
28243: PUSH
28244: LD_INT 1
28246: PUSH
28247: EMPTY
28248: LIST
28249: ST_TO_ADDR
// if Researched ( side , tech_space ) then
28250: LD_VAR 0 9
28254: PPUSH
28255: LD_VAR 0 12
28259: PPUSH
28260: CALL_OW 325
28264: IFFALSE 28293
// missile := Insert ( missile , missile + 1 , 2 ) ;
28266: LD_ADDR_VAR 0 14
28270: PUSH
28271: LD_VAR 0 14
28275: PPUSH
28276: LD_VAR 0 14
28280: PUSH
28281: LD_INT 1
28283: PLUS
28284: PPUSH
28285: LD_INT 2
28287: PPUSH
28288: CALL_OW 2
28292: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
28293: LD_VAR 0 9
28297: PPUSH
28298: LD_VAR 0 13
28302: PPUSH
28303: CALL_OW 325
28307: PUSH
28308: LD_VAR 0 10
28312: PPUSH
28313: CALL_OW 255
28317: PPUSH
28318: LD_VAR 0 13
28322: PPUSH
28323: CALL_OW 325
28327: NOT
28328: AND
28329: IFFALSE 28358
// missile := Insert ( missile , missile + 1 , 3 ) ;
28331: LD_ADDR_VAR 0 14
28335: PUSH
28336: LD_VAR 0 14
28340: PPUSH
28341: LD_VAR 0 14
28345: PUSH
28346: LD_INT 1
28348: PLUS
28349: PPUSH
28350: LD_INT 3
28352: PPUSH
28353: CALL_OW 2
28357: ST_TO_ADDR
// if missile < 2 then
28358: LD_VAR 0 14
28362: PUSH
28363: LD_INT 2
28365: LESS
28366: IFFALSE 28370
// exit ;
28368: GO 28592
// x := GetX ( enemy ) ;
28370: LD_ADDR_VAR 0 4
28374: PUSH
28375: LD_VAR 0 10
28379: PPUSH
28380: CALL_OW 250
28384: ST_TO_ADDR
// y := GetY ( enemy ) ;
28385: LD_ADDR_VAR 0 5
28389: PUSH
28390: LD_VAR 0 10
28394: PPUSH
28395: CALL_OW 251
28399: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28400: LD_ADDR_VAR 0 6
28404: PUSH
28405: LD_VAR 0 4
28409: PUSH
28410: LD_INT 1
28412: NEG
28413: PPUSH
28414: LD_INT 1
28416: PPUSH
28417: CALL_OW 12
28421: PLUS
28422: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28423: LD_ADDR_VAR 0 7
28427: PUSH
28428: LD_VAR 0 5
28432: PUSH
28433: LD_INT 1
28435: NEG
28436: PPUSH
28437: LD_INT 1
28439: PPUSH
28440: CALL_OW 12
28444: PLUS
28445: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28446: LD_VAR 0 6
28450: PPUSH
28451: LD_VAR 0 7
28455: PPUSH
28456: CALL_OW 488
28460: NOT
28461: IFFALSE 28483
// begin _x := x ;
28463: LD_ADDR_VAR 0 6
28467: PUSH
28468: LD_VAR 0 4
28472: ST_TO_ADDR
// _y := y ;
28473: LD_ADDR_VAR 0 7
28477: PUSH
28478: LD_VAR 0 5
28482: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28483: LD_ADDR_VAR 0 3
28487: PUSH
28488: LD_INT 1
28490: PPUSH
28491: LD_VAR 0 14
28495: PPUSH
28496: CALL_OW 12
28500: ST_TO_ADDR
// case i of 1 :
28501: LD_VAR 0 3
28505: PUSH
28506: LD_INT 1
28508: DOUBLE
28509: EQUAL
28510: IFTRUE 28514
28512: GO 28531
28514: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28515: LD_VAR 0 1
28519: PPUSH
28520: LD_VAR 0 10
28524: PPUSH
28525: CALL_OW 115
28529: GO 28592
28531: LD_INT 2
28533: DOUBLE
28534: EQUAL
28535: IFTRUE 28539
28537: GO 28561
28539: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28540: LD_VAR 0 1
28544: PPUSH
28545: LD_VAR 0 6
28549: PPUSH
28550: LD_VAR 0 7
28554: PPUSH
28555: CALL_OW 153
28559: GO 28592
28561: LD_INT 3
28563: DOUBLE
28564: EQUAL
28565: IFTRUE 28569
28567: GO 28591
28569: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28570: LD_VAR 0 1
28574: PPUSH
28575: LD_VAR 0 6
28579: PPUSH
28580: LD_VAR 0 7
28584: PPUSH
28585: CALL_OW 154
28589: GO 28592
28591: POP
// end ;
28592: LD_VAR 0 2
28596: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28597: LD_INT 0
28599: PPUSH
28600: PPUSH
28601: PPUSH
28602: PPUSH
28603: PPUSH
28604: PPUSH
// if not unit or not building then
28605: LD_VAR 0 1
28609: NOT
28610: PUSH
28611: LD_VAR 0 2
28615: NOT
28616: OR
28617: IFFALSE 28621
// exit ;
28619: GO 28779
// x := GetX ( building ) ;
28621: LD_ADDR_VAR 0 5
28625: PUSH
28626: LD_VAR 0 2
28630: PPUSH
28631: CALL_OW 250
28635: ST_TO_ADDR
// y := GetY ( building ) ;
28636: LD_ADDR_VAR 0 6
28640: PUSH
28641: LD_VAR 0 2
28645: PPUSH
28646: CALL_OW 251
28650: ST_TO_ADDR
// for i = 0 to 5 do
28651: LD_ADDR_VAR 0 4
28655: PUSH
28656: DOUBLE
28657: LD_INT 0
28659: DEC
28660: ST_TO_ADDR
28661: LD_INT 5
28663: PUSH
28664: FOR_TO
28665: IFFALSE 28777
// begin _x := ShiftX ( x , i , 3 ) ;
28667: LD_ADDR_VAR 0 7
28671: PUSH
28672: LD_VAR 0 5
28676: PPUSH
28677: LD_VAR 0 4
28681: PPUSH
28682: LD_INT 3
28684: PPUSH
28685: CALL_OW 272
28689: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28690: LD_ADDR_VAR 0 8
28694: PUSH
28695: LD_VAR 0 6
28699: PPUSH
28700: LD_VAR 0 4
28704: PPUSH
28705: LD_INT 3
28707: PPUSH
28708: CALL_OW 273
28712: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28713: LD_VAR 0 7
28717: PPUSH
28718: LD_VAR 0 8
28722: PPUSH
28723: CALL_OW 488
28727: NOT
28728: IFFALSE 28732
// continue ;
28730: GO 28664
// if HexInfo ( _x , _y ) = 0 then
28732: LD_VAR 0 7
28736: PPUSH
28737: LD_VAR 0 8
28741: PPUSH
28742: CALL_OW 428
28746: PUSH
28747: LD_INT 0
28749: EQUAL
28750: IFFALSE 28775
// begin ComMoveXY ( unit , _x , _y ) ;
28752: LD_VAR 0 1
28756: PPUSH
28757: LD_VAR 0 7
28761: PPUSH
28762: LD_VAR 0 8
28766: PPUSH
28767: CALL_OW 111
// exit ;
28771: POP
28772: POP
28773: GO 28779
// end ; end ;
28775: GO 28664
28777: POP
28778: POP
// end ;
28779: LD_VAR 0 3
28783: RET
// export function ScanBase ( side , base_area ) ; begin
28784: LD_INT 0
28786: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28787: LD_ADDR_VAR 0 3
28791: PUSH
28792: LD_VAR 0 2
28796: PPUSH
28797: LD_INT 81
28799: PUSH
28800: LD_VAR 0 1
28804: PUSH
28805: EMPTY
28806: LIST
28807: LIST
28808: PPUSH
28809: CALL_OW 70
28813: ST_TO_ADDR
// end ;
28814: LD_VAR 0 3
28818: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
28819: LD_INT 0
28821: PPUSH
28822: PPUSH
28823: PPUSH
28824: PPUSH
// result := false ;
28825: LD_ADDR_VAR 0 2
28829: PUSH
28830: LD_INT 0
28832: ST_TO_ADDR
// side := GetSide ( unit ) ;
28833: LD_ADDR_VAR 0 3
28837: PUSH
28838: LD_VAR 0 1
28842: PPUSH
28843: CALL_OW 255
28847: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28848: LD_ADDR_VAR 0 4
28852: PUSH
28853: LD_VAR 0 1
28857: PPUSH
28858: CALL_OW 248
28862: ST_TO_ADDR
// case nat of 1 :
28863: LD_VAR 0 4
28867: PUSH
28868: LD_INT 1
28870: DOUBLE
28871: EQUAL
28872: IFTRUE 28876
28874: GO 28887
28876: POP
// tech := tech_lassight ; 2 :
28877: LD_ADDR_VAR 0 5
28881: PUSH
28882: LD_INT 12
28884: ST_TO_ADDR
28885: GO 28926
28887: LD_INT 2
28889: DOUBLE
28890: EQUAL
28891: IFTRUE 28895
28893: GO 28906
28895: POP
// tech := tech_mortar ; 3 :
28896: LD_ADDR_VAR 0 5
28900: PUSH
28901: LD_INT 41
28903: ST_TO_ADDR
28904: GO 28926
28906: LD_INT 3
28908: DOUBLE
28909: EQUAL
28910: IFTRUE 28914
28912: GO 28925
28914: POP
// tech := tech_bazooka ; end ;
28915: LD_ADDR_VAR 0 5
28919: PUSH
28920: LD_INT 44
28922: ST_TO_ADDR
28923: GO 28926
28925: POP
// if Researched ( side , tech ) then
28926: LD_VAR 0 3
28930: PPUSH
28931: LD_VAR 0 5
28935: PPUSH
28936: CALL_OW 325
28940: IFFALSE 28967
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
28942: LD_ADDR_VAR 0 2
28946: PUSH
28947: LD_INT 5
28949: PUSH
28950: LD_INT 8
28952: PUSH
28953: LD_INT 9
28955: PUSH
28956: EMPTY
28957: LIST
28958: LIST
28959: LIST
28960: PUSH
28961: LD_VAR 0 4
28965: ARRAY
28966: ST_TO_ADDR
// end ;
28967: LD_VAR 0 2
28971: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
28972: LD_INT 0
28974: PPUSH
28975: PPUSH
28976: PPUSH
// if not mines then
28977: LD_VAR 0 2
28981: NOT
28982: IFFALSE 28986
// exit ;
28984: GO 29130
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28986: LD_ADDR_VAR 0 5
28990: PUSH
28991: LD_INT 81
28993: PUSH
28994: LD_VAR 0 1
28998: PUSH
28999: EMPTY
29000: LIST
29001: LIST
29002: PUSH
29003: LD_INT 3
29005: PUSH
29006: LD_INT 21
29008: PUSH
29009: LD_INT 3
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: PUSH
29016: EMPTY
29017: LIST
29018: LIST
29019: PUSH
29020: EMPTY
29021: LIST
29022: LIST
29023: PPUSH
29024: CALL_OW 69
29028: ST_TO_ADDR
// for i in mines do
29029: LD_ADDR_VAR 0 4
29033: PUSH
29034: LD_VAR 0 2
29038: PUSH
29039: FOR_IN
29040: IFFALSE 29128
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
29042: LD_VAR 0 4
29046: PUSH
29047: LD_INT 1
29049: ARRAY
29050: PPUSH
29051: LD_VAR 0 4
29055: PUSH
29056: LD_INT 2
29058: ARRAY
29059: PPUSH
29060: CALL_OW 458
29064: NOT
29065: IFFALSE 29069
// continue ;
29067: GO 29039
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
29069: LD_VAR 0 4
29073: PUSH
29074: LD_INT 1
29076: ARRAY
29077: PPUSH
29078: LD_VAR 0 4
29082: PUSH
29083: LD_INT 2
29085: ARRAY
29086: PPUSH
29087: CALL_OW 428
29091: PUSH
29092: LD_VAR 0 5
29096: IN
29097: IFFALSE 29126
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
29099: LD_VAR 0 4
29103: PUSH
29104: LD_INT 1
29106: ARRAY
29107: PPUSH
29108: LD_VAR 0 4
29112: PUSH
29113: LD_INT 2
29115: ARRAY
29116: PPUSH
29117: LD_VAR 0 1
29121: PPUSH
29122: CALL_OW 456
// end ;
29126: GO 29039
29128: POP
29129: POP
// end ;
29130: LD_VAR 0 3
29134: RET
// export function Count ( array ) ; var i ; begin
29135: LD_INT 0
29137: PPUSH
29138: PPUSH
// result := 0 ;
29139: LD_ADDR_VAR 0 2
29143: PUSH
29144: LD_INT 0
29146: ST_TO_ADDR
// for i in array do
29147: LD_ADDR_VAR 0 3
29151: PUSH
29152: LD_VAR 0 1
29156: PUSH
29157: FOR_IN
29158: IFFALSE 29182
// if i then
29160: LD_VAR 0 3
29164: IFFALSE 29180
// result := result + 1 ;
29166: LD_ADDR_VAR 0 2
29170: PUSH
29171: LD_VAR 0 2
29175: PUSH
29176: LD_INT 1
29178: PLUS
29179: ST_TO_ADDR
29180: GO 29157
29182: POP
29183: POP
// end ;
29184: LD_VAR 0 2
29188: RET
// export function IsEmpty ( building ) ; begin
29189: LD_INT 0
29191: PPUSH
// if not building then
29192: LD_VAR 0 1
29196: NOT
29197: IFFALSE 29201
// exit ;
29199: GO 29244
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
29201: LD_ADDR_VAR 0 2
29205: PUSH
29206: LD_VAR 0 1
29210: PUSH
29211: LD_INT 22
29213: PUSH
29214: LD_VAR 0 1
29218: PPUSH
29219: CALL_OW 255
29223: PUSH
29224: EMPTY
29225: LIST
29226: LIST
29227: PUSH
29228: LD_INT 58
29230: PUSH
29231: EMPTY
29232: LIST
29233: PUSH
29234: EMPTY
29235: LIST
29236: LIST
29237: PPUSH
29238: CALL_OW 69
29242: IN
29243: ST_TO_ADDR
// end ;
29244: LD_VAR 0 2
29248: RET
// export function IsNotFull ( building ) ; begin
29249: LD_INT 0
29251: PPUSH
// if not building then
29252: LD_VAR 0 1
29256: NOT
29257: IFFALSE 29261
// exit ;
29259: GO 29280
// result := UnitsInside ( building ) < 6 ;
29261: LD_ADDR_VAR 0 2
29265: PUSH
29266: LD_VAR 0 1
29270: PPUSH
29271: CALL_OW 313
29275: PUSH
29276: LD_INT 6
29278: LESS
29279: ST_TO_ADDR
// end ;
29280: LD_VAR 0 2
29284: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
29285: LD_INT 0
29287: PPUSH
29288: PPUSH
29289: PPUSH
29290: PPUSH
// tmp := [ ] ;
29291: LD_ADDR_VAR 0 3
29295: PUSH
29296: EMPTY
29297: ST_TO_ADDR
// list := [ ] ;
29298: LD_ADDR_VAR 0 5
29302: PUSH
29303: EMPTY
29304: ST_TO_ADDR
// for i = 16 to 25 do
29305: LD_ADDR_VAR 0 4
29309: PUSH
29310: DOUBLE
29311: LD_INT 16
29313: DEC
29314: ST_TO_ADDR
29315: LD_INT 25
29317: PUSH
29318: FOR_TO
29319: IFFALSE 29392
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
29321: LD_ADDR_VAR 0 3
29325: PUSH
29326: LD_VAR 0 3
29330: PUSH
29331: LD_INT 22
29333: PUSH
29334: LD_VAR 0 1
29338: PPUSH
29339: CALL_OW 255
29343: PUSH
29344: EMPTY
29345: LIST
29346: LIST
29347: PUSH
29348: LD_INT 91
29350: PUSH
29351: LD_VAR 0 1
29355: PUSH
29356: LD_INT 6
29358: PUSH
29359: EMPTY
29360: LIST
29361: LIST
29362: LIST
29363: PUSH
29364: LD_INT 30
29366: PUSH
29367: LD_VAR 0 4
29371: PUSH
29372: EMPTY
29373: LIST
29374: LIST
29375: PUSH
29376: EMPTY
29377: LIST
29378: LIST
29379: LIST
29380: PUSH
29381: EMPTY
29382: LIST
29383: PPUSH
29384: CALL_OW 69
29388: ADD
29389: ST_TO_ADDR
29390: GO 29318
29392: POP
29393: POP
// for i = 1 to tmp do
29394: LD_ADDR_VAR 0 4
29398: PUSH
29399: DOUBLE
29400: LD_INT 1
29402: DEC
29403: ST_TO_ADDR
29404: LD_VAR 0 3
29408: PUSH
29409: FOR_TO
29410: IFFALSE 29498
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29412: LD_ADDR_VAR 0 5
29416: PUSH
29417: LD_VAR 0 5
29421: PUSH
29422: LD_VAR 0 3
29426: PUSH
29427: LD_VAR 0 4
29431: ARRAY
29432: PPUSH
29433: CALL_OW 266
29437: PUSH
29438: LD_VAR 0 3
29442: PUSH
29443: LD_VAR 0 4
29447: ARRAY
29448: PPUSH
29449: CALL_OW 250
29453: PUSH
29454: LD_VAR 0 3
29458: PUSH
29459: LD_VAR 0 4
29463: ARRAY
29464: PPUSH
29465: CALL_OW 251
29469: PUSH
29470: LD_VAR 0 3
29474: PUSH
29475: LD_VAR 0 4
29479: ARRAY
29480: PPUSH
29481: CALL_OW 254
29485: PUSH
29486: EMPTY
29487: LIST
29488: LIST
29489: LIST
29490: LIST
29491: PUSH
29492: EMPTY
29493: LIST
29494: ADD
29495: ST_TO_ADDR
29496: GO 29409
29498: POP
29499: POP
// result := list ;
29500: LD_ADDR_VAR 0 2
29504: PUSH
29505: LD_VAR 0 5
29509: ST_TO_ADDR
// end ;
29510: LD_VAR 0 2
29514: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29515: LD_INT 0
29517: PPUSH
29518: PPUSH
29519: PPUSH
29520: PPUSH
29521: PPUSH
29522: PPUSH
29523: PPUSH
// if not factory then
29524: LD_VAR 0 1
29528: NOT
29529: IFFALSE 29533
// exit ;
29531: GO 30126
// if control = control_apeman then
29533: LD_VAR 0 4
29537: PUSH
29538: LD_INT 5
29540: EQUAL
29541: IFFALSE 29650
// begin tmp := UnitsInside ( factory ) ;
29543: LD_ADDR_VAR 0 8
29547: PUSH
29548: LD_VAR 0 1
29552: PPUSH
29553: CALL_OW 313
29557: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29558: LD_VAR 0 8
29562: PPUSH
29563: LD_INT 25
29565: PUSH
29566: LD_INT 12
29568: PUSH
29569: EMPTY
29570: LIST
29571: LIST
29572: PPUSH
29573: CALL_OW 72
29577: NOT
29578: IFFALSE 29588
// control := control_manual ;
29580: LD_ADDR_VAR 0 4
29584: PUSH
29585: LD_INT 1
29587: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29588: LD_ADDR_VAR 0 8
29592: PUSH
29593: LD_VAR 0 1
29597: PPUSH
29598: CALL 29285 0 1
29602: ST_TO_ADDR
// if tmp then
29603: LD_VAR 0 8
29607: IFFALSE 29650
// begin for i in tmp do
29609: LD_ADDR_VAR 0 7
29613: PUSH
29614: LD_VAR 0 8
29618: PUSH
29619: FOR_IN
29620: IFFALSE 29648
// if i [ 1 ] = b_ext_radio then
29622: LD_VAR 0 7
29626: PUSH
29627: LD_INT 1
29629: ARRAY
29630: PUSH
29631: LD_INT 22
29633: EQUAL
29634: IFFALSE 29646
// begin control := control_remote ;
29636: LD_ADDR_VAR 0 4
29640: PUSH
29641: LD_INT 2
29643: ST_TO_ADDR
// break ;
29644: GO 29648
// end ;
29646: GO 29619
29648: POP
29649: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29650: LD_VAR 0 1
29654: PPUSH
29655: LD_VAR 0 2
29659: PPUSH
29660: LD_VAR 0 3
29664: PPUSH
29665: LD_VAR 0 4
29669: PPUSH
29670: LD_VAR 0 5
29674: PPUSH
29675: CALL_OW 448
29679: IFFALSE 29714
// begin result := [ chassis , engine , control , weapon ] ;
29681: LD_ADDR_VAR 0 6
29685: PUSH
29686: LD_VAR 0 2
29690: PUSH
29691: LD_VAR 0 3
29695: PUSH
29696: LD_VAR 0 4
29700: PUSH
29701: LD_VAR 0 5
29705: PUSH
29706: EMPTY
29707: LIST
29708: LIST
29709: LIST
29710: LIST
29711: ST_TO_ADDR
// exit ;
29712: GO 30126
// end ; _chassis := AvailableChassisList ( factory ) ;
29714: LD_ADDR_VAR 0 9
29718: PUSH
29719: LD_VAR 0 1
29723: PPUSH
29724: CALL_OW 475
29728: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29729: LD_ADDR_VAR 0 11
29733: PUSH
29734: LD_VAR 0 1
29738: PPUSH
29739: CALL_OW 476
29743: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
29744: LD_ADDR_VAR 0 12
29748: PUSH
29749: LD_VAR 0 1
29753: PPUSH
29754: CALL_OW 477
29758: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
29759: LD_ADDR_VAR 0 10
29763: PUSH
29764: LD_VAR 0 1
29768: PPUSH
29769: CALL_OW 478
29773: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
29774: LD_VAR 0 9
29778: NOT
29779: PUSH
29780: LD_VAR 0 11
29784: NOT
29785: OR
29786: PUSH
29787: LD_VAR 0 12
29791: NOT
29792: OR
29793: PUSH
29794: LD_VAR 0 10
29798: NOT
29799: OR
29800: IFFALSE 29835
// begin result := [ chassis , engine , control , weapon ] ;
29802: LD_ADDR_VAR 0 6
29806: PUSH
29807: LD_VAR 0 2
29811: PUSH
29812: LD_VAR 0 3
29816: PUSH
29817: LD_VAR 0 4
29821: PUSH
29822: LD_VAR 0 5
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: LIST
29831: LIST
29832: ST_TO_ADDR
// exit ;
29833: GO 30126
// end ; if not chassis in _chassis then
29835: LD_VAR 0 2
29839: PUSH
29840: LD_VAR 0 9
29844: IN
29845: NOT
29846: IFFALSE 29872
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
29848: LD_ADDR_VAR 0 2
29852: PUSH
29853: LD_VAR 0 9
29857: PUSH
29858: LD_INT 1
29860: PPUSH
29861: LD_VAR 0 9
29865: PPUSH
29866: CALL_OW 12
29870: ARRAY
29871: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
29872: LD_VAR 0 2
29876: PPUSH
29877: LD_VAR 0 3
29881: PPUSH
29882: CALL 30131 0 2
29886: NOT
29887: IFFALSE 29946
// repeat engine := _engine [ 1 ] ;
29889: LD_ADDR_VAR 0 3
29893: PUSH
29894: LD_VAR 0 11
29898: PUSH
29899: LD_INT 1
29901: ARRAY
29902: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
29903: LD_ADDR_VAR 0 11
29907: PUSH
29908: LD_VAR 0 11
29912: PPUSH
29913: LD_INT 1
29915: PPUSH
29916: CALL_OW 3
29920: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
29921: LD_VAR 0 2
29925: PPUSH
29926: LD_VAR 0 3
29930: PPUSH
29931: CALL 30131 0 2
29935: PUSH
29936: LD_VAR 0 11
29940: PUSH
29941: EMPTY
29942: EQUAL
29943: OR
29944: IFFALSE 29889
// if not control in _control then
29946: LD_VAR 0 4
29950: PUSH
29951: LD_VAR 0 12
29955: IN
29956: NOT
29957: IFFALSE 29983
// control := _control [ rand ( 1 , _control ) ] ;
29959: LD_ADDR_VAR 0 4
29963: PUSH
29964: LD_VAR 0 12
29968: PUSH
29969: LD_INT 1
29971: PPUSH
29972: LD_VAR 0 12
29976: PPUSH
29977: CALL_OW 12
29981: ARRAY
29982: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
29983: LD_VAR 0 2
29987: PPUSH
29988: LD_VAR 0 5
29992: PPUSH
29993: CALL 30351 0 2
29997: NOT
29998: IFFALSE 30057
// repeat weapon := _weapon [ 1 ] ;
30000: LD_ADDR_VAR 0 5
30004: PUSH
30005: LD_VAR 0 10
30009: PUSH
30010: LD_INT 1
30012: ARRAY
30013: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
30014: LD_ADDR_VAR 0 10
30018: PUSH
30019: LD_VAR 0 10
30023: PPUSH
30024: LD_INT 1
30026: PPUSH
30027: CALL_OW 3
30031: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
30032: LD_VAR 0 2
30036: PPUSH
30037: LD_VAR 0 5
30041: PPUSH
30042: CALL 30351 0 2
30046: PUSH
30047: LD_VAR 0 10
30051: PUSH
30052: EMPTY
30053: EQUAL
30054: OR
30055: IFFALSE 30000
// result := [ ] ;
30057: LD_ADDR_VAR 0 6
30061: PUSH
30062: EMPTY
30063: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
30064: LD_VAR 0 1
30068: PPUSH
30069: LD_VAR 0 2
30073: PPUSH
30074: LD_VAR 0 3
30078: PPUSH
30079: LD_VAR 0 4
30083: PPUSH
30084: LD_VAR 0 5
30088: PPUSH
30089: CALL_OW 448
30093: IFFALSE 30126
// result := [ chassis , engine , control , weapon ] ;
30095: LD_ADDR_VAR 0 6
30099: PUSH
30100: LD_VAR 0 2
30104: PUSH
30105: LD_VAR 0 3
30109: PUSH
30110: LD_VAR 0 4
30114: PUSH
30115: LD_VAR 0 5
30119: PUSH
30120: EMPTY
30121: LIST
30122: LIST
30123: LIST
30124: LIST
30125: ST_TO_ADDR
// end ;
30126: LD_VAR 0 6
30130: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
30131: LD_INT 0
30133: PPUSH
// if not chassis or not engine then
30134: LD_VAR 0 1
30138: NOT
30139: PUSH
30140: LD_VAR 0 2
30144: NOT
30145: OR
30146: IFFALSE 30150
// exit ;
30148: GO 30346
// case engine of engine_solar :
30150: LD_VAR 0 2
30154: PUSH
30155: LD_INT 2
30157: DOUBLE
30158: EQUAL
30159: IFTRUE 30163
30161: GO 30201
30163: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
30164: LD_ADDR_VAR 0 3
30168: PUSH
30169: LD_INT 11
30171: PUSH
30172: LD_INT 12
30174: PUSH
30175: LD_INT 13
30177: PUSH
30178: LD_INT 14
30180: PUSH
30181: LD_INT 1
30183: PUSH
30184: LD_INT 2
30186: PUSH
30187: LD_INT 3
30189: PUSH
30190: EMPTY
30191: LIST
30192: LIST
30193: LIST
30194: LIST
30195: LIST
30196: LIST
30197: LIST
30198: ST_TO_ADDR
30199: GO 30330
30201: LD_INT 1
30203: DOUBLE
30204: EQUAL
30205: IFTRUE 30209
30207: GO 30271
30209: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
30210: LD_ADDR_VAR 0 3
30214: PUSH
30215: LD_INT 11
30217: PUSH
30218: LD_INT 12
30220: PUSH
30221: LD_INT 13
30223: PUSH
30224: LD_INT 14
30226: PUSH
30227: LD_INT 1
30229: PUSH
30230: LD_INT 2
30232: PUSH
30233: LD_INT 3
30235: PUSH
30236: LD_INT 4
30238: PUSH
30239: LD_INT 5
30241: PUSH
30242: LD_INT 21
30244: PUSH
30245: LD_INT 23
30247: PUSH
30248: LD_INT 22
30250: PUSH
30251: LD_INT 24
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: LIST
30258: LIST
30259: LIST
30260: LIST
30261: LIST
30262: LIST
30263: LIST
30264: LIST
30265: LIST
30266: LIST
30267: LIST
30268: ST_TO_ADDR
30269: GO 30330
30271: LD_INT 3
30273: DOUBLE
30274: EQUAL
30275: IFTRUE 30279
30277: GO 30329
30279: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30280: LD_ADDR_VAR 0 3
30284: PUSH
30285: LD_INT 13
30287: PUSH
30288: LD_INT 14
30290: PUSH
30291: LD_INT 2
30293: PUSH
30294: LD_INT 3
30296: PUSH
30297: LD_INT 4
30299: PUSH
30300: LD_INT 5
30302: PUSH
30303: LD_INT 21
30305: PUSH
30306: LD_INT 22
30308: PUSH
30309: LD_INT 23
30311: PUSH
30312: LD_INT 24
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: LIST
30319: LIST
30320: LIST
30321: LIST
30322: LIST
30323: LIST
30324: LIST
30325: LIST
30326: ST_TO_ADDR
30327: GO 30330
30329: POP
// result := ( chassis in result ) ;
30330: LD_ADDR_VAR 0 3
30334: PUSH
30335: LD_VAR 0 1
30339: PUSH
30340: LD_VAR 0 3
30344: IN
30345: ST_TO_ADDR
// end ;
30346: LD_VAR 0 3
30350: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30351: LD_INT 0
30353: PPUSH
// if not chassis or not weapon then
30354: LD_VAR 0 1
30358: NOT
30359: PUSH
30360: LD_VAR 0 2
30364: NOT
30365: OR
30366: IFFALSE 30370
// exit ;
30368: GO 31396
// case weapon of us_machine_gun :
30370: LD_VAR 0 2
30374: PUSH
30375: LD_INT 2
30377: DOUBLE
30378: EQUAL
30379: IFTRUE 30383
30381: GO 30413
30383: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30384: LD_ADDR_VAR 0 3
30388: PUSH
30389: LD_INT 1
30391: PUSH
30392: LD_INT 2
30394: PUSH
30395: LD_INT 3
30397: PUSH
30398: LD_INT 4
30400: PUSH
30401: LD_INT 5
30403: PUSH
30404: EMPTY
30405: LIST
30406: LIST
30407: LIST
30408: LIST
30409: LIST
30410: ST_TO_ADDR
30411: GO 31380
30413: LD_INT 3
30415: DOUBLE
30416: EQUAL
30417: IFTRUE 30421
30419: GO 30451
30421: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30422: LD_ADDR_VAR 0 3
30426: PUSH
30427: LD_INT 1
30429: PUSH
30430: LD_INT 2
30432: PUSH
30433: LD_INT 3
30435: PUSH
30436: LD_INT 4
30438: PUSH
30439: LD_INT 5
30441: PUSH
30442: EMPTY
30443: LIST
30444: LIST
30445: LIST
30446: LIST
30447: LIST
30448: ST_TO_ADDR
30449: GO 31380
30451: LD_INT 11
30453: DOUBLE
30454: EQUAL
30455: IFTRUE 30459
30457: GO 30489
30459: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30460: LD_ADDR_VAR 0 3
30464: PUSH
30465: LD_INT 1
30467: PUSH
30468: LD_INT 2
30470: PUSH
30471: LD_INT 3
30473: PUSH
30474: LD_INT 4
30476: PUSH
30477: LD_INT 5
30479: PUSH
30480: EMPTY
30481: LIST
30482: LIST
30483: LIST
30484: LIST
30485: LIST
30486: ST_TO_ADDR
30487: GO 31380
30489: LD_INT 4
30491: DOUBLE
30492: EQUAL
30493: IFTRUE 30497
30495: GO 30523
30497: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30498: LD_ADDR_VAR 0 3
30502: PUSH
30503: LD_INT 2
30505: PUSH
30506: LD_INT 3
30508: PUSH
30509: LD_INT 4
30511: PUSH
30512: LD_INT 5
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: ST_TO_ADDR
30521: GO 31380
30523: LD_INT 5
30525: DOUBLE
30526: EQUAL
30527: IFTRUE 30531
30529: GO 30557
30531: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30532: LD_ADDR_VAR 0 3
30536: PUSH
30537: LD_INT 2
30539: PUSH
30540: LD_INT 3
30542: PUSH
30543: LD_INT 4
30545: PUSH
30546: LD_INT 5
30548: PUSH
30549: EMPTY
30550: LIST
30551: LIST
30552: LIST
30553: LIST
30554: ST_TO_ADDR
30555: GO 31380
30557: LD_INT 9
30559: DOUBLE
30560: EQUAL
30561: IFTRUE 30565
30563: GO 30591
30565: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30566: LD_ADDR_VAR 0 3
30570: PUSH
30571: LD_INT 2
30573: PUSH
30574: LD_INT 3
30576: PUSH
30577: LD_INT 4
30579: PUSH
30580: LD_INT 5
30582: PUSH
30583: EMPTY
30584: LIST
30585: LIST
30586: LIST
30587: LIST
30588: ST_TO_ADDR
30589: GO 31380
30591: LD_INT 7
30593: DOUBLE
30594: EQUAL
30595: IFTRUE 30599
30597: GO 30625
30599: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30600: LD_ADDR_VAR 0 3
30604: PUSH
30605: LD_INT 2
30607: PUSH
30608: LD_INT 3
30610: PUSH
30611: LD_INT 4
30613: PUSH
30614: LD_INT 5
30616: PUSH
30617: EMPTY
30618: LIST
30619: LIST
30620: LIST
30621: LIST
30622: ST_TO_ADDR
30623: GO 31380
30625: LD_INT 12
30627: DOUBLE
30628: EQUAL
30629: IFTRUE 30633
30631: GO 30659
30633: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30634: LD_ADDR_VAR 0 3
30638: PUSH
30639: LD_INT 2
30641: PUSH
30642: LD_INT 3
30644: PUSH
30645: LD_INT 4
30647: PUSH
30648: LD_INT 5
30650: PUSH
30651: EMPTY
30652: LIST
30653: LIST
30654: LIST
30655: LIST
30656: ST_TO_ADDR
30657: GO 31380
30659: LD_INT 13
30661: DOUBLE
30662: EQUAL
30663: IFTRUE 30667
30665: GO 30693
30667: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30668: LD_ADDR_VAR 0 3
30672: PUSH
30673: LD_INT 2
30675: PUSH
30676: LD_INT 3
30678: PUSH
30679: LD_INT 4
30681: PUSH
30682: LD_INT 5
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: LIST
30689: LIST
30690: ST_TO_ADDR
30691: GO 31380
30693: LD_INT 14
30695: DOUBLE
30696: EQUAL
30697: IFTRUE 30701
30699: GO 30719
30701: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30702: LD_ADDR_VAR 0 3
30706: PUSH
30707: LD_INT 4
30709: PUSH
30710: LD_INT 5
30712: PUSH
30713: EMPTY
30714: LIST
30715: LIST
30716: ST_TO_ADDR
30717: GO 31380
30719: LD_INT 6
30721: DOUBLE
30722: EQUAL
30723: IFTRUE 30727
30725: GO 30745
30727: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30728: LD_ADDR_VAR 0 3
30732: PUSH
30733: LD_INT 4
30735: PUSH
30736: LD_INT 5
30738: PUSH
30739: EMPTY
30740: LIST
30741: LIST
30742: ST_TO_ADDR
30743: GO 31380
30745: LD_INT 10
30747: DOUBLE
30748: EQUAL
30749: IFTRUE 30753
30751: GO 30771
30753: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
30754: LD_ADDR_VAR 0 3
30758: PUSH
30759: LD_INT 4
30761: PUSH
30762: LD_INT 5
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: ST_TO_ADDR
30769: GO 31380
30771: LD_INT 22
30773: DOUBLE
30774: EQUAL
30775: IFTRUE 30779
30777: GO 30805
30779: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
30780: LD_ADDR_VAR 0 3
30784: PUSH
30785: LD_INT 11
30787: PUSH
30788: LD_INT 12
30790: PUSH
30791: LD_INT 13
30793: PUSH
30794: LD_INT 14
30796: PUSH
30797: EMPTY
30798: LIST
30799: LIST
30800: LIST
30801: LIST
30802: ST_TO_ADDR
30803: GO 31380
30805: LD_INT 23
30807: DOUBLE
30808: EQUAL
30809: IFTRUE 30813
30811: GO 30839
30813: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
30814: LD_ADDR_VAR 0 3
30818: PUSH
30819: LD_INT 11
30821: PUSH
30822: LD_INT 12
30824: PUSH
30825: LD_INT 13
30827: PUSH
30828: LD_INT 14
30830: PUSH
30831: EMPTY
30832: LIST
30833: LIST
30834: LIST
30835: LIST
30836: ST_TO_ADDR
30837: GO 31380
30839: LD_INT 24
30841: DOUBLE
30842: EQUAL
30843: IFTRUE 30847
30845: GO 30873
30847: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
30848: LD_ADDR_VAR 0 3
30852: PUSH
30853: LD_INT 11
30855: PUSH
30856: LD_INT 12
30858: PUSH
30859: LD_INT 13
30861: PUSH
30862: LD_INT 14
30864: PUSH
30865: EMPTY
30866: LIST
30867: LIST
30868: LIST
30869: LIST
30870: ST_TO_ADDR
30871: GO 31380
30873: LD_INT 30
30875: DOUBLE
30876: EQUAL
30877: IFTRUE 30881
30879: GO 30907
30881: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
30882: LD_ADDR_VAR 0 3
30886: PUSH
30887: LD_INT 11
30889: PUSH
30890: LD_INT 12
30892: PUSH
30893: LD_INT 13
30895: PUSH
30896: LD_INT 14
30898: PUSH
30899: EMPTY
30900: LIST
30901: LIST
30902: LIST
30903: LIST
30904: ST_TO_ADDR
30905: GO 31380
30907: LD_INT 25
30909: DOUBLE
30910: EQUAL
30911: IFTRUE 30915
30913: GO 30933
30915: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
30916: LD_ADDR_VAR 0 3
30920: PUSH
30921: LD_INT 13
30923: PUSH
30924: LD_INT 14
30926: PUSH
30927: EMPTY
30928: LIST
30929: LIST
30930: ST_TO_ADDR
30931: GO 31380
30933: LD_INT 27
30935: DOUBLE
30936: EQUAL
30937: IFTRUE 30941
30939: GO 30959
30941: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
30942: LD_ADDR_VAR 0 3
30946: PUSH
30947: LD_INT 13
30949: PUSH
30950: LD_INT 14
30952: PUSH
30953: EMPTY
30954: LIST
30955: LIST
30956: ST_TO_ADDR
30957: GO 31380
30959: LD_INT 28
30961: DOUBLE
30962: EQUAL
30963: IFTRUE 30967
30965: GO 30985
30967: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
30968: LD_ADDR_VAR 0 3
30972: PUSH
30973: LD_INT 13
30975: PUSH
30976: LD_INT 14
30978: PUSH
30979: EMPTY
30980: LIST
30981: LIST
30982: ST_TO_ADDR
30983: GO 31380
30985: LD_INT 29
30987: DOUBLE
30988: EQUAL
30989: IFTRUE 30993
30991: GO 31011
30993: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
30994: LD_ADDR_VAR 0 3
30998: PUSH
30999: LD_INT 13
31001: PUSH
31002: LD_INT 14
31004: PUSH
31005: EMPTY
31006: LIST
31007: LIST
31008: ST_TO_ADDR
31009: GO 31380
31011: LD_INT 31
31013: DOUBLE
31014: EQUAL
31015: IFTRUE 31019
31017: GO 31037
31019: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
31020: LD_ADDR_VAR 0 3
31024: PUSH
31025: LD_INT 13
31027: PUSH
31028: LD_INT 14
31030: PUSH
31031: EMPTY
31032: LIST
31033: LIST
31034: ST_TO_ADDR
31035: GO 31380
31037: LD_INT 26
31039: DOUBLE
31040: EQUAL
31041: IFTRUE 31045
31043: GO 31063
31045: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
31046: LD_ADDR_VAR 0 3
31050: PUSH
31051: LD_INT 13
31053: PUSH
31054: LD_INT 14
31056: PUSH
31057: EMPTY
31058: LIST
31059: LIST
31060: ST_TO_ADDR
31061: GO 31380
31063: LD_INT 42
31065: DOUBLE
31066: EQUAL
31067: IFTRUE 31071
31069: GO 31097
31071: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
31072: LD_ADDR_VAR 0 3
31076: PUSH
31077: LD_INT 21
31079: PUSH
31080: LD_INT 22
31082: PUSH
31083: LD_INT 23
31085: PUSH
31086: LD_INT 24
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: LIST
31093: LIST
31094: ST_TO_ADDR
31095: GO 31380
31097: LD_INT 43
31099: DOUBLE
31100: EQUAL
31101: IFTRUE 31105
31103: GO 31131
31105: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
31106: LD_ADDR_VAR 0 3
31110: PUSH
31111: LD_INT 21
31113: PUSH
31114: LD_INT 22
31116: PUSH
31117: LD_INT 23
31119: PUSH
31120: LD_INT 24
31122: PUSH
31123: EMPTY
31124: LIST
31125: LIST
31126: LIST
31127: LIST
31128: ST_TO_ADDR
31129: GO 31380
31131: LD_INT 44
31133: DOUBLE
31134: EQUAL
31135: IFTRUE 31139
31137: GO 31165
31139: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
31140: LD_ADDR_VAR 0 3
31144: PUSH
31145: LD_INT 21
31147: PUSH
31148: LD_INT 22
31150: PUSH
31151: LD_INT 23
31153: PUSH
31154: LD_INT 24
31156: PUSH
31157: EMPTY
31158: LIST
31159: LIST
31160: LIST
31161: LIST
31162: ST_TO_ADDR
31163: GO 31380
31165: LD_INT 45
31167: DOUBLE
31168: EQUAL
31169: IFTRUE 31173
31171: GO 31199
31173: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
31174: LD_ADDR_VAR 0 3
31178: PUSH
31179: LD_INT 21
31181: PUSH
31182: LD_INT 22
31184: PUSH
31185: LD_INT 23
31187: PUSH
31188: LD_INT 24
31190: PUSH
31191: EMPTY
31192: LIST
31193: LIST
31194: LIST
31195: LIST
31196: ST_TO_ADDR
31197: GO 31380
31199: LD_INT 49
31201: DOUBLE
31202: EQUAL
31203: IFTRUE 31207
31205: GO 31233
31207: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
31208: LD_ADDR_VAR 0 3
31212: PUSH
31213: LD_INT 21
31215: PUSH
31216: LD_INT 22
31218: PUSH
31219: LD_INT 23
31221: PUSH
31222: LD_INT 24
31224: PUSH
31225: EMPTY
31226: LIST
31227: LIST
31228: LIST
31229: LIST
31230: ST_TO_ADDR
31231: GO 31380
31233: LD_INT 51
31235: DOUBLE
31236: EQUAL
31237: IFTRUE 31241
31239: GO 31267
31241: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
31242: LD_ADDR_VAR 0 3
31246: PUSH
31247: LD_INT 21
31249: PUSH
31250: LD_INT 22
31252: PUSH
31253: LD_INT 23
31255: PUSH
31256: LD_INT 24
31258: PUSH
31259: EMPTY
31260: LIST
31261: LIST
31262: LIST
31263: LIST
31264: ST_TO_ADDR
31265: GO 31380
31267: LD_INT 52
31269: DOUBLE
31270: EQUAL
31271: IFTRUE 31275
31273: GO 31301
31275: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
31276: LD_ADDR_VAR 0 3
31280: PUSH
31281: LD_INT 21
31283: PUSH
31284: LD_INT 22
31286: PUSH
31287: LD_INT 23
31289: PUSH
31290: LD_INT 24
31292: PUSH
31293: EMPTY
31294: LIST
31295: LIST
31296: LIST
31297: LIST
31298: ST_TO_ADDR
31299: GO 31380
31301: LD_INT 53
31303: DOUBLE
31304: EQUAL
31305: IFTRUE 31309
31307: GO 31327
31309: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31310: LD_ADDR_VAR 0 3
31314: PUSH
31315: LD_INT 23
31317: PUSH
31318: LD_INT 24
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: ST_TO_ADDR
31325: GO 31380
31327: LD_INT 46
31329: DOUBLE
31330: EQUAL
31331: IFTRUE 31335
31333: GO 31353
31335: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31336: LD_ADDR_VAR 0 3
31340: PUSH
31341: LD_INT 23
31343: PUSH
31344: LD_INT 24
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: ST_TO_ADDR
31351: GO 31380
31353: LD_INT 47
31355: DOUBLE
31356: EQUAL
31357: IFTRUE 31361
31359: GO 31379
31361: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31362: LD_ADDR_VAR 0 3
31366: PUSH
31367: LD_INT 23
31369: PUSH
31370: LD_INT 24
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: ST_TO_ADDR
31377: GO 31380
31379: POP
// result := ( chassis in result ) ;
31380: LD_ADDR_VAR 0 3
31384: PUSH
31385: LD_VAR 0 1
31389: PUSH
31390: LD_VAR 0 3
31394: IN
31395: ST_TO_ADDR
// end ;
31396: LD_VAR 0 3
31400: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31401: LD_INT 0
31403: PPUSH
31404: PPUSH
31405: PPUSH
31406: PPUSH
31407: PPUSH
31408: PPUSH
31409: PPUSH
// result := array ;
31410: LD_ADDR_VAR 0 5
31414: PUSH
31415: LD_VAR 0 1
31419: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31420: LD_VAR 0 1
31424: NOT
31425: PUSH
31426: LD_VAR 0 2
31430: NOT
31431: OR
31432: PUSH
31433: LD_VAR 0 3
31437: NOT
31438: OR
31439: PUSH
31440: LD_VAR 0 2
31444: PUSH
31445: LD_VAR 0 1
31449: GREATER
31450: OR
31451: PUSH
31452: LD_VAR 0 3
31456: PUSH
31457: LD_VAR 0 1
31461: GREATER
31462: OR
31463: IFFALSE 31467
// exit ;
31465: GO 31763
// if direction then
31467: LD_VAR 0 4
31471: IFFALSE 31535
// begin d := 1 ;
31473: LD_ADDR_VAR 0 9
31477: PUSH
31478: LD_INT 1
31480: ST_TO_ADDR
// if i_from > i_to then
31481: LD_VAR 0 2
31485: PUSH
31486: LD_VAR 0 3
31490: GREATER
31491: IFFALSE 31517
// length := ( array - i_from ) + i_to else
31493: LD_ADDR_VAR 0 11
31497: PUSH
31498: LD_VAR 0 1
31502: PUSH
31503: LD_VAR 0 2
31507: MINUS
31508: PUSH
31509: LD_VAR 0 3
31513: PLUS
31514: ST_TO_ADDR
31515: GO 31533
// length := i_to - i_from ;
31517: LD_ADDR_VAR 0 11
31521: PUSH
31522: LD_VAR 0 3
31526: PUSH
31527: LD_VAR 0 2
31531: MINUS
31532: ST_TO_ADDR
// end else
31533: GO 31596
// begin d := - 1 ;
31535: LD_ADDR_VAR 0 9
31539: PUSH
31540: LD_INT 1
31542: NEG
31543: ST_TO_ADDR
// if i_from > i_to then
31544: LD_VAR 0 2
31548: PUSH
31549: LD_VAR 0 3
31553: GREATER
31554: IFFALSE 31574
// length := i_from - i_to else
31556: LD_ADDR_VAR 0 11
31560: PUSH
31561: LD_VAR 0 2
31565: PUSH
31566: LD_VAR 0 3
31570: MINUS
31571: ST_TO_ADDR
31572: GO 31596
// length := ( array - i_to ) + i_from ;
31574: LD_ADDR_VAR 0 11
31578: PUSH
31579: LD_VAR 0 1
31583: PUSH
31584: LD_VAR 0 3
31588: MINUS
31589: PUSH
31590: LD_VAR 0 2
31594: PLUS
31595: ST_TO_ADDR
// end ; if not length then
31596: LD_VAR 0 11
31600: NOT
31601: IFFALSE 31605
// exit ;
31603: GO 31763
// tmp := array ;
31605: LD_ADDR_VAR 0 10
31609: PUSH
31610: LD_VAR 0 1
31614: ST_TO_ADDR
// for i = 1 to length do
31615: LD_ADDR_VAR 0 6
31619: PUSH
31620: DOUBLE
31621: LD_INT 1
31623: DEC
31624: ST_TO_ADDR
31625: LD_VAR 0 11
31629: PUSH
31630: FOR_TO
31631: IFFALSE 31751
// begin for j = 1 to array do
31633: LD_ADDR_VAR 0 7
31637: PUSH
31638: DOUBLE
31639: LD_INT 1
31641: DEC
31642: ST_TO_ADDR
31643: LD_VAR 0 1
31647: PUSH
31648: FOR_TO
31649: IFFALSE 31737
// begin k := j + d ;
31651: LD_ADDR_VAR 0 8
31655: PUSH
31656: LD_VAR 0 7
31660: PUSH
31661: LD_VAR 0 9
31665: PLUS
31666: ST_TO_ADDR
// if k > array then
31667: LD_VAR 0 8
31671: PUSH
31672: LD_VAR 0 1
31676: GREATER
31677: IFFALSE 31687
// k := 1 ;
31679: LD_ADDR_VAR 0 8
31683: PUSH
31684: LD_INT 1
31686: ST_TO_ADDR
// if not k then
31687: LD_VAR 0 8
31691: NOT
31692: IFFALSE 31704
// k := array ;
31694: LD_ADDR_VAR 0 8
31698: PUSH
31699: LD_VAR 0 1
31703: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31704: LD_ADDR_VAR 0 10
31708: PUSH
31709: LD_VAR 0 10
31713: PPUSH
31714: LD_VAR 0 8
31718: PPUSH
31719: LD_VAR 0 1
31723: PUSH
31724: LD_VAR 0 7
31728: ARRAY
31729: PPUSH
31730: CALL_OW 1
31734: ST_TO_ADDR
// end ;
31735: GO 31648
31737: POP
31738: POP
// array := tmp ;
31739: LD_ADDR_VAR 0 1
31743: PUSH
31744: LD_VAR 0 10
31748: ST_TO_ADDR
// end ;
31749: GO 31630
31751: POP
31752: POP
// result := array ;
31753: LD_ADDR_VAR 0 5
31757: PUSH
31758: LD_VAR 0 1
31762: ST_TO_ADDR
// end ;
31763: LD_VAR 0 5
31767: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
31768: LD_INT 0
31770: PPUSH
31771: PPUSH
// result := 0 ;
31772: LD_ADDR_VAR 0 3
31776: PUSH
31777: LD_INT 0
31779: ST_TO_ADDR
// if not array or not value in array then
31780: LD_VAR 0 1
31784: NOT
31785: PUSH
31786: LD_VAR 0 2
31790: PUSH
31791: LD_VAR 0 1
31795: IN
31796: NOT
31797: OR
31798: IFFALSE 31802
// exit ;
31800: GO 31856
// for i = 1 to array do
31802: LD_ADDR_VAR 0 4
31806: PUSH
31807: DOUBLE
31808: LD_INT 1
31810: DEC
31811: ST_TO_ADDR
31812: LD_VAR 0 1
31816: PUSH
31817: FOR_TO
31818: IFFALSE 31854
// if value = array [ i ] then
31820: LD_VAR 0 2
31824: PUSH
31825: LD_VAR 0 1
31829: PUSH
31830: LD_VAR 0 4
31834: ARRAY
31835: EQUAL
31836: IFFALSE 31852
// begin result := i ;
31838: LD_ADDR_VAR 0 3
31842: PUSH
31843: LD_VAR 0 4
31847: ST_TO_ADDR
// exit ;
31848: POP
31849: POP
31850: GO 31856
// end ;
31852: GO 31817
31854: POP
31855: POP
// end ;
31856: LD_VAR 0 3
31860: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
31861: LD_INT 0
31863: PPUSH
// vc_chassis := chassis ;
31864: LD_ADDR_OWVAR 37
31868: PUSH
31869: LD_VAR 0 1
31873: ST_TO_ADDR
// vc_engine := engine ;
31874: LD_ADDR_OWVAR 39
31878: PUSH
31879: LD_VAR 0 2
31883: ST_TO_ADDR
// vc_control := control ;
31884: LD_ADDR_OWVAR 38
31888: PUSH
31889: LD_VAR 0 3
31893: ST_TO_ADDR
// vc_weapon := weapon ;
31894: LD_ADDR_OWVAR 40
31898: PUSH
31899: LD_VAR 0 4
31903: ST_TO_ADDR
// vc_fuel_battery := fuel ;
31904: LD_ADDR_OWVAR 41
31908: PUSH
31909: LD_VAR 0 5
31913: ST_TO_ADDR
// end ;
31914: LD_VAR 0 6
31918: RET
// export function WantPlant ( unit ) ; var task ; begin
31919: LD_INT 0
31921: PPUSH
31922: PPUSH
// result := false ;
31923: LD_ADDR_VAR 0 2
31927: PUSH
31928: LD_INT 0
31930: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
31931: LD_ADDR_VAR 0 3
31935: PUSH
31936: LD_VAR 0 1
31940: PPUSH
31941: CALL_OW 437
31945: ST_TO_ADDR
// if task then
31946: LD_VAR 0 3
31950: IFFALSE 31978
// if task [ 1 ] [ 1 ] = p then
31952: LD_VAR 0 3
31956: PUSH
31957: LD_INT 1
31959: ARRAY
31960: PUSH
31961: LD_INT 1
31963: ARRAY
31964: PUSH
31965: LD_STRING p
31967: EQUAL
31968: IFFALSE 31978
// result := true ;
31970: LD_ADDR_VAR 0 2
31974: PUSH
31975: LD_INT 1
31977: ST_TO_ADDR
// end ;
31978: LD_VAR 0 2
31982: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
31983: LD_INT 0
31985: PPUSH
31986: PPUSH
31987: PPUSH
31988: PPUSH
// if pos < 1 then
31989: LD_VAR 0 2
31993: PUSH
31994: LD_INT 1
31996: LESS
31997: IFFALSE 32001
// exit ;
31999: GO 32304
// if pos = 1 then
32001: LD_VAR 0 2
32005: PUSH
32006: LD_INT 1
32008: EQUAL
32009: IFFALSE 32042
// result := Replace ( arr , pos [ 1 ] , value ) else
32011: LD_ADDR_VAR 0 4
32015: PUSH
32016: LD_VAR 0 1
32020: PPUSH
32021: LD_VAR 0 2
32025: PUSH
32026: LD_INT 1
32028: ARRAY
32029: PPUSH
32030: LD_VAR 0 3
32034: PPUSH
32035: CALL_OW 1
32039: ST_TO_ADDR
32040: GO 32304
// begin tmp := arr ;
32042: LD_ADDR_VAR 0 6
32046: PUSH
32047: LD_VAR 0 1
32051: ST_TO_ADDR
// s_arr := [ tmp ] ;
32052: LD_ADDR_VAR 0 7
32056: PUSH
32057: LD_VAR 0 6
32061: PUSH
32062: EMPTY
32063: LIST
32064: ST_TO_ADDR
// for i = 1 to pos - 1 do
32065: LD_ADDR_VAR 0 5
32069: PUSH
32070: DOUBLE
32071: LD_INT 1
32073: DEC
32074: ST_TO_ADDR
32075: LD_VAR 0 2
32079: PUSH
32080: LD_INT 1
32082: MINUS
32083: PUSH
32084: FOR_TO
32085: IFFALSE 32130
// begin tmp := tmp [ pos [ i ] ] ;
32087: LD_ADDR_VAR 0 6
32091: PUSH
32092: LD_VAR 0 6
32096: PUSH
32097: LD_VAR 0 2
32101: PUSH
32102: LD_VAR 0 5
32106: ARRAY
32107: ARRAY
32108: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
32109: LD_ADDR_VAR 0 7
32113: PUSH
32114: LD_VAR 0 7
32118: PUSH
32119: LD_VAR 0 6
32123: PUSH
32124: EMPTY
32125: LIST
32126: ADD
32127: ST_TO_ADDR
// end ;
32128: GO 32084
32130: POP
32131: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
32132: LD_ADDR_VAR 0 6
32136: PUSH
32137: LD_VAR 0 6
32141: PPUSH
32142: LD_VAR 0 2
32146: PUSH
32147: LD_VAR 0 2
32151: ARRAY
32152: PPUSH
32153: LD_VAR 0 3
32157: PPUSH
32158: CALL_OW 1
32162: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
32163: LD_ADDR_VAR 0 7
32167: PUSH
32168: LD_VAR 0 7
32172: PPUSH
32173: LD_VAR 0 7
32177: PPUSH
32178: LD_VAR 0 6
32182: PPUSH
32183: CALL_OW 1
32187: ST_TO_ADDR
// for i = s_arr downto 2 do
32188: LD_ADDR_VAR 0 5
32192: PUSH
32193: DOUBLE
32194: LD_VAR 0 7
32198: INC
32199: ST_TO_ADDR
32200: LD_INT 2
32202: PUSH
32203: FOR_DOWNTO
32204: IFFALSE 32288
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
32206: LD_ADDR_VAR 0 6
32210: PUSH
32211: LD_VAR 0 7
32215: PUSH
32216: LD_VAR 0 5
32220: PUSH
32221: LD_INT 1
32223: MINUS
32224: ARRAY
32225: PPUSH
32226: LD_VAR 0 2
32230: PUSH
32231: LD_VAR 0 5
32235: PUSH
32236: LD_INT 1
32238: MINUS
32239: ARRAY
32240: PPUSH
32241: LD_VAR 0 7
32245: PUSH
32246: LD_VAR 0 5
32250: ARRAY
32251: PPUSH
32252: CALL_OW 1
32256: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
32257: LD_ADDR_VAR 0 7
32261: PUSH
32262: LD_VAR 0 7
32266: PPUSH
32267: LD_VAR 0 5
32271: PUSH
32272: LD_INT 1
32274: MINUS
32275: PPUSH
32276: LD_VAR 0 6
32280: PPUSH
32281: CALL_OW 1
32285: ST_TO_ADDR
// end ;
32286: GO 32203
32288: POP
32289: POP
// result := s_arr [ 1 ] ;
32290: LD_ADDR_VAR 0 4
32294: PUSH
32295: LD_VAR 0 7
32299: PUSH
32300: LD_INT 1
32302: ARRAY
32303: ST_TO_ADDR
// end ; end ;
32304: LD_VAR 0 4
32308: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32309: LD_INT 0
32311: PPUSH
32312: PPUSH
// if not list then
32313: LD_VAR 0 1
32317: NOT
32318: IFFALSE 32322
// exit ;
32320: GO 32413
// i := list [ pos1 ] ;
32322: LD_ADDR_VAR 0 5
32326: PUSH
32327: LD_VAR 0 1
32331: PUSH
32332: LD_VAR 0 2
32336: ARRAY
32337: ST_TO_ADDR
// if not i then
32338: LD_VAR 0 5
32342: NOT
32343: IFFALSE 32347
// exit ;
32345: GO 32413
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32347: LD_ADDR_VAR 0 1
32351: PUSH
32352: LD_VAR 0 1
32356: PPUSH
32357: LD_VAR 0 2
32361: PPUSH
32362: LD_VAR 0 1
32366: PUSH
32367: LD_VAR 0 3
32371: ARRAY
32372: PPUSH
32373: CALL_OW 1
32377: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32378: LD_ADDR_VAR 0 1
32382: PUSH
32383: LD_VAR 0 1
32387: PPUSH
32388: LD_VAR 0 3
32392: PPUSH
32393: LD_VAR 0 5
32397: PPUSH
32398: CALL_OW 1
32402: ST_TO_ADDR
// result := list ;
32403: LD_ADDR_VAR 0 4
32407: PUSH
32408: LD_VAR 0 1
32412: ST_TO_ADDR
// end ;
32413: LD_VAR 0 4
32417: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32418: LD_INT 0
32420: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32421: LD_ADDR_VAR 0 5
32425: PUSH
32426: LD_VAR 0 1
32430: PPUSH
32431: CALL_OW 250
32435: PPUSH
32436: LD_VAR 0 1
32440: PPUSH
32441: CALL_OW 251
32445: PPUSH
32446: LD_VAR 0 2
32450: PPUSH
32451: LD_VAR 0 3
32455: PPUSH
32456: LD_VAR 0 4
32460: PPUSH
32461: CALL 32471 0 5
32465: ST_TO_ADDR
// end ;
32466: LD_VAR 0 5
32470: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32471: LD_INT 0
32473: PPUSH
32474: PPUSH
32475: PPUSH
32476: PPUSH
// if not list then
32477: LD_VAR 0 3
32481: NOT
32482: IFFALSE 32486
// exit ;
32484: GO 32874
// result := [ ] ;
32486: LD_ADDR_VAR 0 6
32490: PUSH
32491: EMPTY
32492: ST_TO_ADDR
// for i in list do
32493: LD_ADDR_VAR 0 7
32497: PUSH
32498: LD_VAR 0 3
32502: PUSH
32503: FOR_IN
32504: IFFALSE 32706
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32506: LD_ADDR_VAR 0 9
32510: PUSH
32511: LD_VAR 0 7
32515: PPUSH
32516: LD_VAR 0 1
32520: PPUSH
32521: LD_VAR 0 2
32525: PPUSH
32526: CALL_OW 297
32530: ST_TO_ADDR
// if not result then
32531: LD_VAR 0 6
32535: NOT
32536: IFFALSE 32562
// result := [ [ i , tmp ] ] else
32538: LD_ADDR_VAR 0 6
32542: PUSH
32543: LD_VAR 0 7
32547: PUSH
32548: LD_VAR 0 9
32552: PUSH
32553: EMPTY
32554: LIST
32555: LIST
32556: PUSH
32557: EMPTY
32558: LIST
32559: ST_TO_ADDR
32560: GO 32704
// begin if result [ result ] [ 2 ] < tmp then
32562: LD_VAR 0 6
32566: PUSH
32567: LD_VAR 0 6
32571: ARRAY
32572: PUSH
32573: LD_INT 2
32575: ARRAY
32576: PUSH
32577: LD_VAR 0 9
32581: LESS
32582: IFFALSE 32624
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32584: LD_ADDR_VAR 0 6
32588: PUSH
32589: LD_VAR 0 6
32593: PPUSH
32594: LD_VAR 0 6
32598: PUSH
32599: LD_INT 1
32601: PLUS
32602: PPUSH
32603: LD_VAR 0 7
32607: PUSH
32608: LD_VAR 0 9
32612: PUSH
32613: EMPTY
32614: LIST
32615: LIST
32616: PPUSH
32617: CALL_OW 2
32621: ST_TO_ADDR
32622: GO 32704
// for j = 1 to result do
32624: LD_ADDR_VAR 0 8
32628: PUSH
32629: DOUBLE
32630: LD_INT 1
32632: DEC
32633: ST_TO_ADDR
32634: LD_VAR 0 6
32638: PUSH
32639: FOR_TO
32640: IFFALSE 32702
// begin if tmp < result [ j ] [ 2 ] then
32642: LD_VAR 0 9
32646: PUSH
32647: LD_VAR 0 6
32651: PUSH
32652: LD_VAR 0 8
32656: ARRAY
32657: PUSH
32658: LD_INT 2
32660: ARRAY
32661: LESS
32662: IFFALSE 32700
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32664: LD_ADDR_VAR 0 6
32668: PUSH
32669: LD_VAR 0 6
32673: PPUSH
32674: LD_VAR 0 8
32678: PPUSH
32679: LD_VAR 0 7
32683: PUSH
32684: LD_VAR 0 9
32688: PUSH
32689: EMPTY
32690: LIST
32691: LIST
32692: PPUSH
32693: CALL_OW 2
32697: ST_TO_ADDR
// break ;
32698: GO 32702
// end ; end ;
32700: GO 32639
32702: POP
32703: POP
// end ; end ;
32704: GO 32503
32706: POP
32707: POP
// if result and not asc then
32708: LD_VAR 0 6
32712: PUSH
32713: LD_VAR 0 4
32717: NOT
32718: AND
32719: IFFALSE 32794
// begin tmp := result ;
32721: LD_ADDR_VAR 0 9
32725: PUSH
32726: LD_VAR 0 6
32730: ST_TO_ADDR
// for i = tmp downto 1 do
32731: LD_ADDR_VAR 0 7
32735: PUSH
32736: DOUBLE
32737: LD_VAR 0 9
32741: INC
32742: ST_TO_ADDR
32743: LD_INT 1
32745: PUSH
32746: FOR_DOWNTO
32747: IFFALSE 32792
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
32749: LD_ADDR_VAR 0 6
32753: PUSH
32754: LD_VAR 0 6
32758: PPUSH
32759: LD_VAR 0 9
32763: PUSH
32764: LD_VAR 0 7
32768: MINUS
32769: PUSH
32770: LD_INT 1
32772: PLUS
32773: PPUSH
32774: LD_VAR 0 9
32778: PUSH
32779: LD_VAR 0 7
32783: ARRAY
32784: PPUSH
32785: CALL_OW 1
32789: ST_TO_ADDR
32790: GO 32746
32792: POP
32793: POP
// end ; tmp := [ ] ;
32794: LD_ADDR_VAR 0 9
32798: PUSH
32799: EMPTY
32800: ST_TO_ADDR
// if mode then
32801: LD_VAR 0 5
32805: IFFALSE 32874
// begin for i = 1 to result do
32807: LD_ADDR_VAR 0 7
32811: PUSH
32812: DOUBLE
32813: LD_INT 1
32815: DEC
32816: ST_TO_ADDR
32817: LD_VAR 0 6
32821: PUSH
32822: FOR_TO
32823: IFFALSE 32862
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
32825: LD_ADDR_VAR 0 9
32829: PUSH
32830: LD_VAR 0 9
32834: PPUSH
32835: LD_VAR 0 7
32839: PPUSH
32840: LD_VAR 0 6
32844: PUSH
32845: LD_VAR 0 7
32849: ARRAY
32850: PUSH
32851: LD_INT 1
32853: ARRAY
32854: PPUSH
32855: CALL_OW 1
32859: ST_TO_ADDR
32860: GO 32822
32862: POP
32863: POP
// result := tmp ;
32864: LD_ADDR_VAR 0 6
32868: PUSH
32869: LD_VAR 0 9
32873: ST_TO_ADDR
// end ; end ;
32874: LD_VAR 0 6
32878: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
32879: LD_INT 0
32881: PPUSH
32882: PPUSH
32883: PPUSH
32884: PPUSH
32885: PPUSH
32886: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
32887: LD_ADDR_VAR 0 5
32891: PUSH
32892: LD_INT 0
32894: PUSH
32895: LD_INT 0
32897: PUSH
32898: LD_INT 0
32900: PUSH
32901: EMPTY
32902: PUSH
32903: EMPTY
32904: LIST
32905: LIST
32906: LIST
32907: LIST
32908: ST_TO_ADDR
// if not x or not y then
32909: LD_VAR 0 2
32913: NOT
32914: PUSH
32915: LD_VAR 0 3
32919: NOT
32920: OR
32921: IFFALSE 32925
// exit ;
32923: GO 34571
// if not range then
32925: LD_VAR 0 4
32929: NOT
32930: IFFALSE 32940
// range := 10 ;
32932: LD_ADDR_VAR 0 4
32936: PUSH
32937: LD_INT 10
32939: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32940: LD_ADDR_VAR 0 8
32944: PUSH
32945: LD_INT 81
32947: PUSH
32948: LD_VAR 0 1
32952: PUSH
32953: EMPTY
32954: LIST
32955: LIST
32956: PUSH
32957: LD_INT 92
32959: PUSH
32960: LD_VAR 0 2
32964: PUSH
32965: LD_VAR 0 3
32969: PUSH
32970: LD_VAR 0 4
32974: PUSH
32975: EMPTY
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: PUSH
32981: LD_INT 3
32983: PUSH
32984: LD_INT 21
32986: PUSH
32987: LD_INT 3
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: PUSH
32994: EMPTY
32995: LIST
32996: LIST
32997: PUSH
32998: EMPTY
32999: LIST
33000: LIST
33001: LIST
33002: PPUSH
33003: CALL_OW 69
33007: ST_TO_ADDR
// if not tmp then
33008: LD_VAR 0 8
33012: NOT
33013: IFFALSE 33017
// exit ;
33015: GO 34571
// for i in tmp do
33017: LD_ADDR_VAR 0 6
33021: PUSH
33022: LD_VAR 0 8
33026: PUSH
33027: FOR_IN
33028: IFFALSE 34546
// begin points := [ 0 , 0 , 0 ] ;
33030: LD_ADDR_VAR 0 9
33034: PUSH
33035: LD_INT 0
33037: PUSH
33038: LD_INT 0
33040: PUSH
33041: LD_INT 0
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: LIST
33048: ST_TO_ADDR
// bpoints := 1 ;
33049: LD_ADDR_VAR 0 10
33053: PUSH
33054: LD_INT 1
33056: ST_TO_ADDR
// case GetType ( i ) of unit_human :
33057: LD_VAR 0 6
33061: PPUSH
33062: CALL_OW 247
33066: PUSH
33067: LD_INT 1
33069: DOUBLE
33070: EQUAL
33071: IFTRUE 33075
33073: GO 33653
33075: POP
// begin if GetClass ( i ) = 1 then
33076: LD_VAR 0 6
33080: PPUSH
33081: CALL_OW 257
33085: PUSH
33086: LD_INT 1
33088: EQUAL
33089: IFFALSE 33110
// points := [ 10 , 5 , 3 ] ;
33091: LD_ADDR_VAR 0 9
33095: PUSH
33096: LD_INT 10
33098: PUSH
33099: LD_INT 5
33101: PUSH
33102: LD_INT 3
33104: PUSH
33105: EMPTY
33106: LIST
33107: LIST
33108: LIST
33109: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
33110: LD_VAR 0 6
33114: PPUSH
33115: CALL_OW 257
33119: PUSH
33120: LD_INT 2
33122: PUSH
33123: LD_INT 3
33125: PUSH
33126: LD_INT 4
33128: PUSH
33129: EMPTY
33130: LIST
33131: LIST
33132: LIST
33133: IN
33134: IFFALSE 33155
// points := [ 3 , 2 , 1 ] ;
33136: LD_ADDR_VAR 0 9
33140: PUSH
33141: LD_INT 3
33143: PUSH
33144: LD_INT 2
33146: PUSH
33147: LD_INT 1
33149: PUSH
33150: EMPTY
33151: LIST
33152: LIST
33153: LIST
33154: ST_TO_ADDR
// if GetClass ( i ) = 5 then
33155: LD_VAR 0 6
33159: PPUSH
33160: CALL_OW 257
33164: PUSH
33165: LD_INT 5
33167: EQUAL
33168: IFFALSE 33189
// points := [ 130 , 5 , 2 ] ;
33170: LD_ADDR_VAR 0 9
33174: PUSH
33175: LD_INT 130
33177: PUSH
33178: LD_INT 5
33180: PUSH
33181: LD_INT 2
33183: PUSH
33184: EMPTY
33185: LIST
33186: LIST
33187: LIST
33188: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33189: LD_VAR 0 6
33193: PPUSH
33194: CALL_OW 257
33198: PUSH
33199: LD_INT 8
33201: EQUAL
33202: IFFALSE 33223
// points := [ 35 , 35 , 30 ] ;
33204: LD_ADDR_VAR 0 9
33208: PUSH
33209: LD_INT 35
33211: PUSH
33212: LD_INT 35
33214: PUSH
33215: LD_INT 30
33217: PUSH
33218: EMPTY
33219: LIST
33220: LIST
33221: LIST
33222: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33223: LD_VAR 0 6
33227: PPUSH
33228: CALL_OW 257
33232: PUSH
33233: LD_INT 9
33235: EQUAL
33236: IFFALSE 33257
// points := [ 20 , 55 , 40 ] ;
33238: LD_ADDR_VAR 0 9
33242: PUSH
33243: LD_INT 20
33245: PUSH
33246: LD_INT 55
33248: PUSH
33249: LD_INT 40
33251: PUSH
33252: EMPTY
33253: LIST
33254: LIST
33255: LIST
33256: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33257: LD_VAR 0 6
33261: PPUSH
33262: CALL_OW 257
33266: PUSH
33267: LD_INT 12
33269: PUSH
33270: LD_INT 16
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: IN
33277: IFFALSE 33298
// points := [ 5 , 3 , 2 ] ;
33279: LD_ADDR_VAR 0 9
33283: PUSH
33284: LD_INT 5
33286: PUSH
33287: LD_INT 3
33289: PUSH
33290: LD_INT 2
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: LIST
33297: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33298: LD_VAR 0 6
33302: PPUSH
33303: CALL_OW 257
33307: PUSH
33308: LD_INT 17
33310: EQUAL
33311: IFFALSE 33332
// points := [ 100 , 50 , 75 ] ;
33313: LD_ADDR_VAR 0 9
33317: PUSH
33318: LD_INT 100
33320: PUSH
33321: LD_INT 50
33323: PUSH
33324: LD_INT 75
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: LIST
33331: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33332: LD_VAR 0 6
33336: PPUSH
33337: CALL_OW 257
33341: PUSH
33342: LD_INT 15
33344: EQUAL
33345: IFFALSE 33366
// points := [ 10 , 5 , 3 ] ;
33347: LD_ADDR_VAR 0 9
33351: PUSH
33352: LD_INT 10
33354: PUSH
33355: LD_INT 5
33357: PUSH
33358: LD_INT 3
33360: PUSH
33361: EMPTY
33362: LIST
33363: LIST
33364: LIST
33365: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33366: LD_VAR 0 6
33370: PPUSH
33371: CALL_OW 257
33375: PUSH
33376: LD_INT 14
33378: EQUAL
33379: IFFALSE 33400
// points := [ 10 , 0 , 0 ] ;
33381: LD_ADDR_VAR 0 9
33385: PUSH
33386: LD_INT 10
33388: PUSH
33389: LD_INT 0
33391: PUSH
33392: LD_INT 0
33394: PUSH
33395: EMPTY
33396: LIST
33397: LIST
33398: LIST
33399: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33400: LD_VAR 0 6
33404: PPUSH
33405: CALL_OW 257
33409: PUSH
33410: LD_INT 11
33412: EQUAL
33413: IFFALSE 33434
// points := [ 30 , 10 , 5 ] ;
33415: LD_ADDR_VAR 0 9
33419: PUSH
33420: LD_INT 30
33422: PUSH
33423: LD_INT 10
33425: PUSH
33426: LD_INT 5
33428: PUSH
33429: EMPTY
33430: LIST
33431: LIST
33432: LIST
33433: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33434: LD_VAR 0 1
33438: PPUSH
33439: LD_INT 5
33441: PPUSH
33442: CALL_OW 321
33446: PUSH
33447: LD_INT 2
33449: EQUAL
33450: IFFALSE 33467
// bpoints := bpoints * 1.8 ;
33452: LD_ADDR_VAR 0 10
33456: PUSH
33457: LD_VAR 0 10
33461: PUSH
33462: LD_REAL  1.80000000000000E+0000
33465: MUL
33466: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33467: LD_VAR 0 6
33471: PPUSH
33472: CALL_OW 257
33476: PUSH
33477: LD_INT 1
33479: PUSH
33480: LD_INT 2
33482: PUSH
33483: LD_INT 3
33485: PUSH
33486: LD_INT 4
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: LIST
33493: LIST
33494: IN
33495: PUSH
33496: LD_VAR 0 1
33500: PPUSH
33501: LD_INT 51
33503: PPUSH
33504: CALL_OW 321
33508: PUSH
33509: LD_INT 2
33511: EQUAL
33512: AND
33513: IFFALSE 33530
// bpoints := bpoints * 1.2 ;
33515: LD_ADDR_VAR 0 10
33519: PUSH
33520: LD_VAR 0 10
33524: PUSH
33525: LD_REAL  1.20000000000000E+0000
33528: MUL
33529: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33530: LD_VAR 0 6
33534: PPUSH
33535: CALL_OW 257
33539: PUSH
33540: LD_INT 5
33542: PUSH
33543: LD_INT 7
33545: PUSH
33546: LD_INT 9
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: LIST
33553: IN
33554: PUSH
33555: LD_VAR 0 1
33559: PPUSH
33560: LD_INT 52
33562: PPUSH
33563: CALL_OW 321
33567: PUSH
33568: LD_INT 2
33570: EQUAL
33571: AND
33572: IFFALSE 33589
// bpoints := bpoints * 1.5 ;
33574: LD_ADDR_VAR 0 10
33578: PUSH
33579: LD_VAR 0 10
33583: PUSH
33584: LD_REAL  1.50000000000000E+0000
33587: MUL
33588: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33589: LD_VAR 0 1
33593: PPUSH
33594: LD_INT 66
33596: PPUSH
33597: CALL_OW 321
33601: PUSH
33602: LD_INT 2
33604: EQUAL
33605: IFFALSE 33622
// bpoints := bpoints * 1.1 ;
33607: LD_ADDR_VAR 0 10
33611: PUSH
33612: LD_VAR 0 10
33616: PUSH
33617: LD_REAL  1.10000000000000E+0000
33620: MUL
33621: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33622: LD_ADDR_VAR 0 10
33626: PUSH
33627: LD_VAR 0 10
33631: PUSH
33632: LD_VAR 0 6
33636: PPUSH
33637: LD_INT 1
33639: PPUSH
33640: CALL_OW 259
33644: PUSH
33645: LD_REAL  1.15000000000000E+0000
33648: MUL
33649: MUL
33650: ST_TO_ADDR
// end ; unit_vehicle :
33651: GO 34475
33653: LD_INT 2
33655: DOUBLE
33656: EQUAL
33657: IFTRUE 33661
33659: GO 34463
33661: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33662: LD_VAR 0 6
33666: PPUSH
33667: CALL_OW 264
33671: PUSH
33672: LD_INT 2
33674: PUSH
33675: LD_INT 42
33677: PUSH
33678: LD_INT 24
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: LIST
33685: IN
33686: IFFALSE 33707
// points := [ 25 , 5 , 3 ] ;
33688: LD_ADDR_VAR 0 9
33692: PUSH
33693: LD_INT 25
33695: PUSH
33696: LD_INT 5
33698: PUSH
33699: LD_INT 3
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: LIST
33706: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
33707: LD_VAR 0 6
33711: PPUSH
33712: CALL_OW 264
33716: PUSH
33717: LD_INT 4
33719: PUSH
33720: LD_INT 43
33722: PUSH
33723: LD_INT 25
33725: PUSH
33726: EMPTY
33727: LIST
33728: LIST
33729: LIST
33730: IN
33731: IFFALSE 33752
// points := [ 40 , 15 , 5 ] ;
33733: LD_ADDR_VAR 0 9
33737: PUSH
33738: LD_INT 40
33740: PUSH
33741: LD_INT 15
33743: PUSH
33744: LD_INT 5
33746: PUSH
33747: EMPTY
33748: LIST
33749: LIST
33750: LIST
33751: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
33752: LD_VAR 0 6
33756: PPUSH
33757: CALL_OW 264
33761: PUSH
33762: LD_INT 3
33764: PUSH
33765: LD_INT 23
33767: PUSH
33768: EMPTY
33769: LIST
33770: LIST
33771: IN
33772: IFFALSE 33793
// points := [ 7 , 25 , 8 ] ;
33774: LD_ADDR_VAR 0 9
33778: PUSH
33779: LD_INT 7
33781: PUSH
33782: LD_INT 25
33784: PUSH
33785: LD_INT 8
33787: PUSH
33788: EMPTY
33789: LIST
33790: LIST
33791: LIST
33792: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
33793: LD_VAR 0 6
33797: PPUSH
33798: CALL_OW 264
33802: PUSH
33803: LD_INT 5
33805: PUSH
33806: LD_INT 27
33808: PUSH
33809: LD_INT 44
33811: PUSH
33812: EMPTY
33813: LIST
33814: LIST
33815: LIST
33816: IN
33817: IFFALSE 33838
// points := [ 14 , 50 , 16 ] ;
33819: LD_ADDR_VAR 0 9
33823: PUSH
33824: LD_INT 14
33826: PUSH
33827: LD_INT 50
33829: PUSH
33830: LD_INT 16
33832: PUSH
33833: EMPTY
33834: LIST
33835: LIST
33836: LIST
33837: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
33838: LD_VAR 0 6
33842: PPUSH
33843: CALL_OW 264
33847: PUSH
33848: LD_INT 6
33850: PUSH
33851: LD_INT 46
33853: PUSH
33854: EMPTY
33855: LIST
33856: LIST
33857: IN
33858: IFFALSE 33879
// points := [ 32 , 120 , 70 ] ;
33860: LD_ADDR_VAR 0 9
33864: PUSH
33865: LD_INT 32
33867: PUSH
33868: LD_INT 120
33870: PUSH
33871: LD_INT 70
33873: PUSH
33874: EMPTY
33875: LIST
33876: LIST
33877: LIST
33878: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
33879: LD_VAR 0 6
33883: PPUSH
33884: CALL_OW 264
33888: PUSH
33889: LD_INT 7
33891: PUSH
33892: LD_INT 28
33894: PUSH
33895: LD_INT 45
33897: PUSH
33898: EMPTY
33899: LIST
33900: LIST
33901: LIST
33902: IN
33903: IFFALSE 33924
// points := [ 35 , 20 , 45 ] ;
33905: LD_ADDR_VAR 0 9
33909: PUSH
33910: LD_INT 35
33912: PUSH
33913: LD_INT 20
33915: PUSH
33916: LD_INT 45
33918: PUSH
33919: EMPTY
33920: LIST
33921: LIST
33922: LIST
33923: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
33924: LD_VAR 0 6
33928: PPUSH
33929: CALL_OW 264
33933: PUSH
33934: LD_INT 47
33936: PUSH
33937: EMPTY
33938: LIST
33939: IN
33940: IFFALSE 33961
// points := [ 67 , 45 , 75 ] ;
33942: LD_ADDR_VAR 0 9
33946: PUSH
33947: LD_INT 67
33949: PUSH
33950: LD_INT 45
33952: PUSH
33953: LD_INT 75
33955: PUSH
33956: EMPTY
33957: LIST
33958: LIST
33959: LIST
33960: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
33961: LD_VAR 0 6
33965: PPUSH
33966: CALL_OW 264
33970: PUSH
33971: LD_INT 26
33973: PUSH
33974: EMPTY
33975: LIST
33976: IN
33977: IFFALSE 33998
// points := [ 120 , 30 , 80 ] ;
33979: LD_ADDR_VAR 0 9
33983: PUSH
33984: LD_INT 120
33986: PUSH
33987: LD_INT 30
33989: PUSH
33990: LD_INT 80
33992: PUSH
33993: EMPTY
33994: LIST
33995: LIST
33996: LIST
33997: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
33998: LD_VAR 0 6
34002: PPUSH
34003: CALL_OW 264
34007: PUSH
34008: LD_INT 22
34010: PUSH
34011: EMPTY
34012: LIST
34013: IN
34014: IFFALSE 34035
// points := [ 40 , 1 , 1 ] ;
34016: LD_ADDR_VAR 0 9
34020: PUSH
34021: LD_INT 40
34023: PUSH
34024: LD_INT 1
34026: PUSH
34027: LD_INT 1
34029: PUSH
34030: EMPTY
34031: LIST
34032: LIST
34033: LIST
34034: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
34035: LD_VAR 0 6
34039: PPUSH
34040: CALL_OW 264
34044: PUSH
34045: LD_INT 29
34047: PUSH
34048: EMPTY
34049: LIST
34050: IN
34051: IFFALSE 34072
// points := [ 70 , 200 , 400 ] ;
34053: LD_ADDR_VAR 0 9
34057: PUSH
34058: LD_INT 70
34060: PUSH
34061: LD_INT 200
34063: PUSH
34064: LD_INT 400
34066: PUSH
34067: EMPTY
34068: LIST
34069: LIST
34070: LIST
34071: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
34072: LD_VAR 0 6
34076: PPUSH
34077: CALL_OW 264
34081: PUSH
34082: LD_INT 14
34084: PUSH
34085: LD_INT 53
34087: PUSH
34088: EMPTY
34089: LIST
34090: LIST
34091: IN
34092: IFFALSE 34113
// points := [ 40 , 10 , 20 ] ;
34094: LD_ADDR_VAR 0 9
34098: PUSH
34099: LD_INT 40
34101: PUSH
34102: LD_INT 10
34104: PUSH
34105: LD_INT 20
34107: PUSH
34108: EMPTY
34109: LIST
34110: LIST
34111: LIST
34112: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
34113: LD_VAR 0 6
34117: PPUSH
34118: CALL_OW 264
34122: PUSH
34123: LD_INT 9
34125: PUSH
34126: EMPTY
34127: LIST
34128: IN
34129: IFFALSE 34150
// points := [ 5 , 70 , 20 ] ;
34131: LD_ADDR_VAR 0 9
34135: PUSH
34136: LD_INT 5
34138: PUSH
34139: LD_INT 70
34141: PUSH
34142: LD_INT 20
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: LIST
34149: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
34150: LD_VAR 0 6
34154: PPUSH
34155: CALL_OW 264
34159: PUSH
34160: LD_INT 10
34162: PUSH
34163: EMPTY
34164: LIST
34165: IN
34166: IFFALSE 34187
// points := [ 35 , 110 , 70 ] ;
34168: LD_ADDR_VAR 0 9
34172: PUSH
34173: LD_INT 35
34175: PUSH
34176: LD_INT 110
34178: PUSH
34179: LD_INT 70
34181: PUSH
34182: EMPTY
34183: LIST
34184: LIST
34185: LIST
34186: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34187: LD_VAR 0 6
34191: PPUSH
34192: CALL_OW 265
34196: PUSH
34197: LD_INT 25
34199: EQUAL
34200: IFFALSE 34221
// points := [ 80 , 65 , 100 ] ;
34202: LD_ADDR_VAR 0 9
34206: PUSH
34207: LD_INT 80
34209: PUSH
34210: LD_INT 65
34212: PUSH
34213: LD_INT 100
34215: PUSH
34216: EMPTY
34217: LIST
34218: LIST
34219: LIST
34220: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34221: LD_VAR 0 6
34225: PPUSH
34226: CALL_OW 263
34230: PUSH
34231: LD_INT 1
34233: EQUAL
34234: IFFALSE 34269
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34236: LD_ADDR_VAR 0 10
34240: PUSH
34241: LD_VAR 0 10
34245: PUSH
34246: LD_VAR 0 6
34250: PPUSH
34251: CALL_OW 311
34255: PPUSH
34256: LD_INT 3
34258: PPUSH
34259: CALL_OW 259
34263: PUSH
34264: LD_INT 4
34266: MUL
34267: MUL
34268: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34269: LD_VAR 0 6
34273: PPUSH
34274: CALL_OW 263
34278: PUSH
34279: LD_INT 2
34281: EQUAL
34282: IFFALSE 34333
// begin j := IsControledBy ( i ) ;
34284: LD_ADDR_VAR 0 7
34288: PUSH
34289: LD_VAR 0 6
34293: PPUSH
34294: CALL_OW 312
34298: ST_TO_ADDR
// if j then
34299: LD_VAR 0 7
34303: IFFALSE 34333
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34305: LD_ADDR_VAR 0 10
34309: PUSH
34310: LD_VAR 0 10
34314: PUSH
34315: LD_VAR 0 7
34319: PPUSH
34320: LD_INT 3
34322: PPUSH
34323: CALL_OW 259
34327: PUSH
34328: LD_INT 3
34330: MUL
34331: MUL
34332: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34333: LD_VAR 0 6
34337: PPUSH
34338: CALL_OW 264
34342: PUSH
34343: LD_INT 5
34345: PUSH
34346: LD_INT 6
34348: PUSH
34349: LD_INT 46
34351: PUSH
34352: LD_INT 44
34354: PUSH
34355: LD_INT 47
34357: PUSH
34358: LD_INT 45
34360: PUSH
34361: LD_INT 28
34363: PUSH
34364: LD_INT 7
34366: PUSH
34367: LD_INT 27
34369: PUSH
34370: LD_INT 29
34372: PUSH
34373: EMPTY
34374: LIST
34375: LIST
34376: LIST
34377: LIST
34378: LIST
34379: LIST
34380: LIST
34381: LIST
34382: LIST
34383: LIST
34384: IN
34385: PUSH
34386: LD_VAR 0 1
34390: PPUSH
34391: LD_INT 52
34393: PPUSH
34394: CALL_OW 321
34398: PUSH
34399: LD_INT 2
34401: EQUAL
34402: AND
34403: IFFALSE 34420
// bpoints := bpoints * 1.2 ;
34405: LD_ADDR_VAR 0 10
34409: PUSH
34410: LD_VAR 0 10
34414: PUSH
34415: LD_REAL  1.20000000000000E+0000
34418: MUL
34419: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34420: LD_VAR 0 6
34424: PPUSH
34425: CALL_OW 264
34429: PUSH
34430: LD_INT 6
34432: PUSH
34433: LD_INT 46
34435: PUSH
34436: LD_INT 47
34438: PUSH
34439: EMPTY
34440: LIST
34441: LIST
34442: LIST
34443: IN
34444: IFFALSE 34461
// bpoints := bpoints * 1.2 ;
34446: LD_ADDR_VAR 0 10
34450: PUSH
34451: LD_VAR 0 10
34455: PUSH
34456: LD_REAL  1.20000000000000E+0000
34459: MUL
34460: ST_TO_ADDR
// end ; unit_building :
34461: GO 34475
34463: LD_INT 3
34465: DOUBLE
34466: EQUAL
34467: IFTRUE 34471
34469: GO 34474
34471: POP
// ; end ;
34472: GO 34475
34474: POP
// for j = 1 to 3 do
34475: LD_ADDR_VAR 0 7
34479: PUSH
34480: DOUBLE
34481: LD_INT 1
34483: DEC
34484: ST_TO_ADDR
34485: LD_INT 3
34487: PUSH
34488: FOR_TO
34489: IFFALSE 34542
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34491: LD_ADDR_VAR 0 5
34495: PUSH
34496: LD_VAR 0 5
34500: PPUSH
34501: LD_VAR 0 7
34505: PPUSH
34506: LD_VAR 0 5
34510: PUSH
34511: LD_VAR 0 7
34515: ARRAY
34516: PUSH
34517: LD_VAR 0 9
34521: PUSH
34522: LD_VAR 0 7
34526: ARRAY
34527: PUSH
34528: LD_VAR 0 10
34532: MUL
34533: PLUS
34534: PPUSH
34535: CALL_OW 1
34539: ST_TO_ADDR
34540: GO 34488
34542: POP
34543: POP
// end ;
34544: GO 33027
34546: POP
34547: POP
// result := Replace ( result , 4 , tmp ) ;
34548: LD_ADDR_VAR 0 5
34552: PUSH
34553: LD_VAR 0 5
34557: PPUSH
34558: LD_INT 4
34560: PPUSH
34561: LD_VAR 0 8
34565: PPUSH
34566: CALL_OW 1
34570: ST_TO_ADDR
// end ;
34571: LD_VAR 0 5
34575: RET
// export function DangerAtRange ( unit , range ) ; begin
34576: LD_INT 0
34578: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34579: LD_ADDR_VAR 0 3
34583: PUSH
34584: LD_VAR 0 1
34588: PPUSH
34589: CALL_OW 255
34593: PPUSH
34594: LD_VAR 0 1
34598: PPUSH
34599: CALL_OW 250
34603: PPUSH
34604: LD_VAR 0 1
34608: PPUSH
34609: CALL_OW 251
34613: PPUSH
34614: LD_VAR 0 2
34618: PPUSH
34619: CALL 32879 0 4
34623: ST_TO_ADDR
// end ;
34624: LD_VAR 0 3
34628: RET
// export function DangerInArea ( side , area ) ; begin
34629: LD_INT 0
34631: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34632: LD_ADDR_VAR 0 3
34636: PUSH
34637: LD_VAR 0 2
34641: PPUSH
34642: LD_INT 81
34644: PUSH
34645: LD_VAR 0 1
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: PPUSH
34654: CALL_OW 70
34658: ST_TO_ADDR
// end ;
34659: LD_VAR 0 3
34663: RET
// export function IsExtension ( b ) ; begin
34664: LD_INT 0
34666: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34667: LD_ADDR_VAR 0 2
34671: PUSH
34672: LD_VAR 0 1
34676: PUSH
34677: LD_INT 23
34679: PUSH
34680: LD_INT 20
34682: PUSH
34683: LD_INT 22
34685: PUSH
34686: LD_INT 17
34688: PUSH
34689: LD_INT 24
34691: PUSH
34692: LD_INT 21
34694: PUSH
34695: LD_INT 19
34697: PUSH
34698: LD_INT 16
34700: PUSH
34701: LD_INT 25
34703: PUSH
34704: LD_INT 18
34706: PUSH
34707: EMPTY
34708: LIST
34709: LIST
34710: LIST
34711: LIST
34712: LIST
34713: LIST
34714: LIST
34715: LIST
34716: LIST
34717: LIST
34718: IN
34719: ST_TO_ADDR
// end ;
34720: LD_VAR 0 2
34724: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
34725: LD_INT 0
34727: PPUSH
34728: PPUSH
34729: PPUSH
// result := [ ] ;
34730: LD_ADDR_VAR 0 3
34734: PUSH
34735: EMPTY
34736: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
34737: LD_ADDR_VAR 0 4
34741: PUSH
34742: LD_VAR 0 2
34746: PPUSH
34747: LD_INT 21
34749: PUSH
34750: LD_INT 3
34752: PUSH
34753: EMPTY
34754: LIST
34755: LIST
34756: PPUSH
34757: CALL_OW 70
34761: ST_TO_ADDR
// if not tmp then
34762: LD_VAR 0 4
34766: NOT
34767: IFFALSE 34771
// exit ;
34769: GO 34829
// for i in tmp do
34771: LD_ADDR_VAR 0 5
34775: PUSH
34776: LD_VAR 0 4
34780: PUSH
34781: FOR_IN
34782: IFFALSE 34817
// if GetBase ( i ) <> base then
34784: LD_VAR 0 5
34788: PPUSH
34789: CALL_OW 274
34793: PUSH
34794: LD_VAR 0 1
34798: NONEQUAL
34799: IFFALSE 34815
// ComLinkToBase ( base , i ) ;
34801: LD_VAR 0 1
34805: PPUSH
34806: LD_VAR 0 5
34810: PPUSH
34811: CALL_OW 169
34815: GO 34781
34817: POP
34818: POP
// result := tmp ;
34819: LD_ADDR_VAR 0 3
34823: PUSH
34824: LD_VAR 0 4
34828: ST_TO_ADDR
// end ;
34829: LD_VAR 0 3
34833: RET
// export function ComComplete ( unit , b ) ; var i ; begin
34834: LD_INT 0
34836: PPUSH
34837: PPUSH
// if BuildingStatus ( b ) = bs_build then
34838: LD_VAR 0 2
34842: PPUSH
34843: CALL_OW 461
34847: PUSH
34848: LD_INT 1
34850: EQUAL
34851: IFFALSE 34911
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
34853: LD_VAR 0 1
34857: PPUSH
34858: LD_STRING h
34860: PUSH
34861: LD_VAR 0 2
34865: PPUSH
34866: CALL_OW 250
34870: PUSH
34871: LD_VAR 0 2
34875: PPUSH
34876: CALL_OW 251
34880: PUSH
34881: LD_VAR 0 2
34885: PUSH
34886: LD_INT 0
34888: PUSH
34889: LD_INT 0
34891: PUSH
34892: LD_INT 0
34894: PUSH
34895: EMPTY
34896: LIST
34897: LIST
34898: LIST
34899: LIST
34900: LIST
34901: LIST
34902: LIST
34903: PUSH
34904: EMPTY
34905: LIST
34906: PPUSH
34907: CALL_OW 446
// end ;
34911: LD_VAR 0 3
34915: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
34916: LD_INT 0
34918: PPUSH
34919: PPUSH
34920: PPUSH
34921: PPUSH
34922: PPUSH
34923: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
34924: LD_VAR 0 1
34928: NOT
34929: PUSH
34930: LD_VAR 0 1
34934: PPUSH
34935: CALL_OW 263
34939: PUSH
34940: LD_INT 2
34942: EQUAL
34943: NOT
34944: OR
34945: IFFALSE 34949
// exit ;
34947: GO 35265
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
34949: LD_ADDR_VAR 0 6
34953: PUSH
34954: LD_INT 22
34956: PUSH
34957: LD_VAR 0 1
34961: PPUSH
34962: CALL_OW 255
34966: PUSH
34967: EMPTY
34968: LIST
34969: LIST
34970: PUSH
34971: LD_INT 2
34973: PUSH
34974: LD_INT 30
34976: PUSH
34977: LD_INT 36
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: PUSH
34984: LD_INT 34
34986: PUSH
34987: LD_INT 31
34989: PUSH
34990: EMPTY
34991: LIST
34992: LIST
34993: PUSH
34994: EMPTY
34995: LIST
34996: LIST
34997: LIST
34998: PUSH
34999: EMPTY
35000: LIST
35001: LIST
35002: PPUSH
35003: CALL_OW 69
35007: ST_TO_ADDR
// if not tmp then
35008: LD_VAR 0 6
35012: NOT
35013: IFFALSE 35017
// exit ;
35015: GO 35265
// result := [ ] ;
35017: LD_ADDR_VAR 0 2
35021: PUSH
35022: EMPTY
35023: ST_TO_ADDR
// for i in tmp do
35024: LD_ADDR_VAR 0 3
35028: PUSH
35029: LD_VAR 0 6
35033: PUSH
35034: FOR_IN
35035: IFFALSE 35106
// begin t := UnitsInside ( i ) ;
35037: LD_ADDR_VAR 0 4
35041: PUSH
35042: LD_VAR 0 3
35046: PPUSH
35047: CALL_OW 313
35051: ST_TO_ADDR
// if t then
35052: LD_VAR 0 4
35056: IFFALSE 35104
// for j in t do
35058: LD_ADDR_VAR 0 7
35062: PUSH
35063: LD_VAR 0 4
35067: PUSH
35068: FOR_IN
35069: IFFALSE 35102
// result := Insert ( result , result + 1 , j ) ;
35071: LD_ADDR_VAR 0 2
35075: PUSH
35076: LD_VAR 0 2
35080: PPUSH
35081: LD_VAR 0 2
35085: PUSH
35086: LD_INT 1
35088: PLUS
35089: PPUSH
35090: LD_VAR 0 7
35094: PPUSH
35095: CALL_OW 2
35099: ST_TO_ADDR
35100: GO 35068
35102: POP
35103: POP
// end ;
35104: GO 35034
35106: POP
35107: POP
// if not result then
35108: LD_VAR 0 2
35112: NOT
35113: IFFALSE 35117
// exit ;
35115: GO 35265
// mech := result [ 1 ] ;
35117: LD_ADDR_VAR 0 5
35121: PUSH
35122: LD_VAR 0 2
35126: PUSH
35127: LD_INT 1
35129: ARRAY
35130: ST_TO_ADDR
// if result > 1 then
35131: LD_VAR 0 2
35135: PUSH
35136: LD_INT 1
35138: GREATER
35139: IFFALSE 35251
// for i = 2 to result do
35141: LD_ADDR_VAR 0 3
35145: PUSH
35146: DOUBLE
35147: LD_INT 2
35149: DEC
35150: ST_TO_ADDR
35151: LD_VAR 0 2
35155: PUSH
35156: FOR_TO
35157: IFFALSE 35249
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35159: LD_ADDR_VAR 0 4
35163: PUSH
35164: LD_VAR 0 2
35168: PUSH
35169: LD_VAR 0 3
35173: ARRAY
35174: PPUSH
35175: LD_INT 3
35177: PPUSH
35178: CALL_OW 259
35182: PUSH
35183: LD_VAR 0 2
35187: PUSH
35188: LD_VAR 0 3
35192: ARRAY
35193: PPUSH
35194: CALL_OW 432
35198: MINUS
35199: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35200: LD_VAR 0 4
35204: PUSH
35205: LD_VAR 0 5
35209: PPUSH
35210: LD_INT 3
35212: PPUSH
35213: CALL_OW 259
35217: PUSH
35218: LD_VAR 0 5
35222: PPUSH
35223: CALL_OW 432
35227: MINUS
35228: GREATEREQUAL
35229: IFFALSE 35247
// mech := result [ i ] ;
35231: LD_ADDR_VAR 0 5
35235: PUSH
35236: LD_VAR 0 2
35240: PUSH
35241: LD_VAR 0 3
35245: ARRAY
35246: ST_TO_ADDR
// end ;
35247: GO 35156
35249: POP
35250: POP
// ComLinkTo ( vehicle , mech ) ;
35251: LD_VAR 0 1
35255: PPUSH
35256: LD_VAR 0 5
35260: PPUSH
35261: CALL_OW 135
// end ;
35265: LD_VAR 0 2
35269: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35270: LD_INT 0
35272: PPUSH
35273: PPUSH
35274: PPUSH
35275: PPUSH
35276: PPUSH
35277: PPUSH
35278: PPUSH
35279: PPUSH
35280: PPUSH
35281: PPUSH
35282: PPUSH
35283: PPUSH
35284: PPUSH
// result := [ ] ;
35285: LD_ADDR_VAR 0 7
35289: PUSH
35290: EMPTY
35291: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35292: LD_VAR 0 1
35296: PPUSH
35297: CALL_OW 266
35301: PUSH
35302: LD_INT 0
35304: PUSH
35305: LD_INT 1
35307: PUSH
35308: EMPTY
35309: LIST
35310: LIST
35311: IN
35312: NOT
35313: IFFALSE 35317
// exit ;
35315: GO 36948
// if name then
35317: LD_VAR 0 3
35321: IFFALSE 35337
// SetBName ( base_dep , name ) ;
35323: LD_VAR 0 1
35327: PPUSH
35328: LD_VAR 0 3
35332: PPUSH
35333: CALL_OW 500
// base := GetBase ( base_dep ) ;
35337: LD_ADDR_VAR 0 15
35341: PUSH
35342: LD_VAR 0 1
35346: PPUSH
35347: CALL_OW 274
35351: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35352: LD_ADDR_VAR 0 16
35356: PUSH
35357: LD_VAR 0 1
35361: PPUSH
35362: CALL_OW 255
35366: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35367: LD_ADDR_VAR 0 17
35371: PUSH
35372: LD_VAR 0 1
35376: PPUSH
35377: CALL_OW 248
35381: ST_TO_ADDR
// if sources then
35382: LD_VAR 0 5
35386: IFFALSE 35433
// for i = 1 to 3 do
35388: LD_ADDR_VAR 0 8
35392: PUSH
35393: DOUBLE
35394: LD_INT 1
35396: DEC
35397: ST_TO_ADDR
35398: LD_INT 3
35400: PUSH
35401: FOR_TO
35402: IFFALSE 35431
// AddResourceType ( base , i , sources [ i ] ) ;
35404: LD_VAR 0 15
35408: PPUSH
35409: LD_VAR 0 8
35413: PPUSH
35414: LD_VAR 0 5
35418: PUSH
35419: LD_VAR 0 8
35423: ARRAY
35424: PPUSH
35425: CALL_OW 276
35429: GO 35401
35431: POP
35432: POP
// buildings := GetBaseBuildings ( base , area ) ;
35433: LD_ADDR_VAR 0 18
35437: PUSH
35438: LD_VAR 0 15
35442: PPUSH
35443: LD_VAR 0 2
35447: PPUSH
35448: CALL 34725 0 2
35452: ST_TO_ADDR
// InitHc ;
35453: CALL_OW 19
// InitUc ;
35457: CALL_OW 18
// uc_side := side ;
35461: LD_ADDR_OWVAR 20
35465: PUSH
35466: LD_VAR 0 16
35470: ST_TO_ADDR
// uc_nation := nation ;
35471: LD_ADDR_OWVAR 21
35475: PUSH
35476: LD_VAR 0 17
35480: ST_TO_ADDR
// if buildings then
35481: LD_VAR 0 18
35485: IFFALSE 36807
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35487: LD_ADDR_VAR 0 19
35491: PUSH
35492: LD_VAR 0 18
35496: PPUSH
35497: LD_INT 2
35499: PUSH
35500: LD_INT 30
35502: PUSH
35503: LD_INT 29
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: PUSH
35510: LD_INT 30
35512: PUSH
35513: LD_INT 30
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: PUSH
35520: EMPTY
35521: LIST
35522: LIST
35523: LIST
35524: PPUSH
35525: CALL_OW 72
35529: ST_TO_ADDR
// if tmp then
35530: LD_VAR 0 19
35534: IFFALSE 35582
// for i in tmp do
35536: LD_ADDR_VAR 0 8
35540: PUSH
35541: LD_VAR 0 19
35545: PUSH
35546: FOR_IN
35547: IFFALSE 35580
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35549: LD_VAR 0 8
35553: PPUSH
35554: CALL_OW 250
35558: PPUSH
35559: LD_VAR 0 8
35563: PPUSH
35564: CALL_OW 251
35568: PPUSH
35569: LD_VAR 0 16
35573: PPUSH
35574: CALL_OW 441
35578: GO 35546
35580: POP
35581: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35582: LD_VAR 0 18
35586: PPUSH
35587: LD_INT 2
35589: PUSH
35590: LD_INT 30
35592: PUSH
35593: LD_INT 32
35595: PUSH
35596: EMPTY
35597: LIST
35598: LIST
35599: PUSH
35600: LD_INT 30
35602: PUSH
35603: LD_INT 33
35605: PUSH
35606: EMPTY
35607: LIST
35608: LIST
35609: PUSH
35610: EMPTY
35611: LIST
35612: LIST
35613: LIST
35614: PPUSH
35615: CALL_OW 72
35619: IFFALSE 35707
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35621: LD_ADDR_VAR 0 8
35625: PUSH
35626: LD_VAR 0 18
35630: PPUSH
35631: LD_INT 2
35633: PUSH
35634: LD_INT 30
35636: PUSH
35637: LD_INT 32
35639: PUSH
35640: EMPTY
35641: LIST
35642: LIST
35643: PUSH
35644: LD_INT 30
35646: PUSH
35647: LD_INT 33
35649: PUSH
35650: EMPTY
35651: LIST
35652: LIST
35653: PUSH
35654: EMPTY
35655: LIST
35656: LIST
35657: LIST
35658: PPUSH
35659: CALL_OW 72
35663: PUSH
35664: FOR_IN
35665: IFFALSE 35705
// begin if not GetBWeapon ( i ) then
35667: LD_VAR 0 8
35671: PPUSH
35672: CALL_OW 269
35676: NOT
35677: IFFALSE 35703
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
35679: LD_VAR 0 8
35683: PPUSH
35684: LD_VAR 0 8
35688: PPUSH
35689: LD_VAR 0 2
35693: PPUSH
35694: CALL 36953 0 2
35698: PPUSH
35699: CALL_OW 431
// end ;
35703: GO 35664
35705: POP
35706: POP
// end ; for i = 1 to personel do
35707: LD_ADDR_VAR 0 8
35711: PUSH
35712: DOUBLE
35713: LD_INT 1
35715: DEC
35716: ST_TO_ADDR
35717: LD_VAR 0 6
35721: PUSH
35722: FOR_TO
35723: IFFALSE 36787
// begin if i > 4 then
35725: LD_VAR 0 8
35729: PUSH
35730: LD_INT 4
35732: GREATER
35733: IFFALSE 35737
// break ;
35735: GO 36787
// case i of 1 :
35737: LD_VAR 0 8
35741: PUSH
35742: LD_INT 1
35744: DOUBLE
35745: EQUAL
35746: IFTRUE 35750
35748: GO 35830
35750: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
35751: LD_ADDR_VAR 0 12
35755: PUSH
35756: LD_VAR 0 18
35760: PPUSH
35761: LD_INT 22
35763: PUSH
35764: LD_VAR 0 16
35768: PUSH
35769: EMPTY
35770: LIST
35771: LIST
35772: PUSH
35773: LD_INT 58
35775: PUSH
35776: EMPTY
35777: LIST
35778: PUSH
35779: LD_INT 2
35781: PUSH
35782: LD_INT 30
35784: PUSH
35785: LD_INT 32
35787: PUSH
35788: EMPTY
35789: LIST
35790: LIST
35791: PUSH
35792: LD_INT 30
35794: PUSH
35795: LD_INT 4
35797: PUSH
35798: EMPTY
35799: LIST
35800: LIST
35801: PUSH
35802: LD_INT 30
35804: PUSH
35805: LD_INT 5
35807: PUSH
35808: EMPTY
35809: LIST
35810: LIST
35811: PUSH
35812: EMPTY
35813: LIST
35814: LIST
35815: LIST
35816: LIST
35817: PUSH
35818: EMPTY
35819: LIST
35820: LIST
35821: LIST
35822: PPUSH
35823: CALL_OW 72
35827: ST_TO_ADDR
35828: GO 36052
35830: LD_INT 2
35832: DOUBLE
35833: EQUAL
35834: IFTRUE 35838
35836: GO 35900
35838: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
35839: LD_ADDR_VAR 0 12
35843: PUSH
35844: LD_VAR 0 18
35848: PPUSH
35849: LD_INT 22
35851: PUSH
35852: LD_VAR 0 16
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: PUSH
35861: LD_INT 2
35863: PUSH
35864: LD_INT 30
35866: PUSH
35867: LD_INT 0
35869: PUSH
35870: EMPTY
35871: LIST
35872: LIST
35873: PUSH
35874: LD_INT 30
35876: PUSH
35877: LD_INT 1
35879: PUSH
35880: EMPTY
35881: LIST
35882: LIST
35883: PUSH
35884: EMPTY
35885: LIST
35886: LIST
35887: LIST
35888: PUSH
35889: EMPTY
35890: LIST
35891: LIST
35892: PPUSH
35893: CALL_OW 72
35897: ST_TO_ADDR
35898: GO 36052
35900: LD_INT 3
35902: DOUBLE
35903: EQUAL
35904: IFTRUE 35908
35906: GO 35970
35908: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
35909: LD_ADDR_VAR 0 12
35913: PUSH
35914: LD_VAR 0 18
35918: PPUSH
35919: LD_INT 22
35921: PUSH
35922: LD_VAR 0 16
35926: PUSH
35927: EMPTY
35928: LIST
35929: LIST
35930: PUSH
35931: LD_INT 2
35933: PUSH
35934: LD_INT 30
35936: PUSH
35937: LD_INT 2
35939: PUSH
35940: EMPTY
35941: LIST
35942: LIST
35943: PUSH
35944: LD_INT 30
35946: PUSH
35947: LD_INT 3
35949: PUSH
35950: EMPTY
35951: LIST
35952: LIST
35953: PUSH
35954: EMPTY
35955: LIST
35956: LIST
35957: LIST
35958: PUSH
35959: EMPTY
35960: LIST
35961: LIST
35962: PPUSH
35963: CALL_OW 72
35967: ST_TO_ADDR
35968: GO 36052
35970: LD_INT 4
35972: DOUBLE
35973: EQUAL
35974: IFTRUE 35978
35976: GO 36051
35978: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
35979: LD_ADDR_VAR 0 12
35983: PUSH
35984: LD_VAR 0 18
35988: PPUSH
35989: LD_INT 22
35991: PUSH
35992: LD_VAR 0 16
35996: PUSH
35997: EMPTY
35998: LIST
35999: LIST
36000: PUSH
36001: LD_INT 2
36003: PUSH
36004: LD_INT 30
36006: PUSH
36007: LD_INT 6
36009: PUSH
36010: EMPTY
36011: LIST
36012: LIST
36013: PUSH
36014: LD_INT 30
36016: PUSH
36017: LD_INT 7
36019: PUSH
36020: EMPTY
36021: LIST
36022: LIST
36023: PUSH
36024: LD_INT 30
36026: PUSH
36027: LD_INT 8
36029: PUSH
36030: EMPTY
36031: LIST
36032: LIST
36033: PUSH
36034: EMPTY
36035: LIST
36036: LIST
36037: LIST
36038: LIST
36039: PUSH
36040: EMPTY
36041: LIST
36042: LIST
36043: PPUSH
36044: CALL_OW 72
36048: ST_TO_ADDR
36049: GO 36052
36051: POP
// if i = 1 then
36052: LD_VAR 0 8
36056: PUSH
36057: LD_INT 1
36059: EQUAL
36060: IFFALSE 36171
// begin tmp := [ ] ;
36062: LD_ADDR_VAR 0 19
36066: PUSH
36067: EMPTY
36068: ST_TO_ADDR
// for j in f do
36069: LD_ADDR_VAR 0 9
36073: PUSH
36074: LD_VAR 0 12
36078: PUSH
36079: FOR_IN
36080: IFFALSE 36153
// if GetBType ( j ) = b_bunker then
36082: LD_VAR 0 9
36086: PPUSH
36087: CALL_OW 266
36091: PUSH
36092: LD_INT 32
36094: EQUAL
36095: IFFALSE 36122
// tmp := Insert ( tmp , 1 , j ) else
36097: LD_ADDR_VAR 0 19
36101: PUSH
36102: LD_VAR 0 19
36106: PPUSH
36107: LD_INT 1
36109: PPUSH
36110: LD_VAR 0 9
36114: PPUSH
36115: CALL_OW 2
36119: ST_TO_ADDR
36120: GO 36151
// tmp := Insert ( tmp , tmp + 1 , j ) ;
36122: LD_ADDR_VAR 0 19
36126: PUSH
36127: LD_VAR 0 19
36131: PPUSH
36132: LD_VAR 0 19
36136: PUSH
36137: LD_INT 1
36139: PLUS
36140: PPUSH
36141: LD_VAR 0 9
36145: PPUSH
36146: CALL_OW 2
36150: ST_TO_ADDR
36151: GO 36079
36153: POP
36154: POP
// if tmp then
36155: LD_VAR 0 19
36159: IFFALSE 36171
// f := tmp ;
36161: LD_ADDR_VAR 0 12
36165: PUSH
36166: LD_VAR 0 19
36170: ST_TO_ADDR
// end ; x := personel [ i ] ;
36171: LD_ADDR_VAR 0 13
36175: PUSH
36176: LD_VAR 0 6
36180: PUSH
36181: LD_VAR 0 8
36185: ARRAY
36186: ST_TO_ADDR
// if x = - 1 then
36187: LD_VAR 0 13
36191: PUSH
36192: LD_INT 1
36194: NEG
36195: EQUAL
36196: IFFALSE 36405
// begin for j in f do
36198: LD_ADDR_VAR 0 9
36202: PUSH
36203: LD_VAR 0 12
36207: PUSH
36208: FOR_IN
36209: IFFALSE 36401
// repeat InitHc ;
36211: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36215: LD_VAR 0 9
36219: PPUSH
36220: CALL_OW 266
36224: PUSH
36225: LD_INT 5
36227: EQUAL
36228: IFFALSE 36298
// begin if UnitsInside ( j ) < 3 then
36230: LD_VAR 0 9
36234: PPUSH
36235: CALL_OW 313
36239: PUSH
36240: LD_INT 3
36242: LESS
36243: IFFALSE 36279
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36245: LD_INT 0
36247: PPUSH
36248: LD_INT 5
36250: PUSH
36251: LD_INT 8
36253: PUSH
36254: LD_INT 9
36256: PUSH
36257: EMPTY
36258: LIST
36259: LIST
36260: LIST
36261: PUSH
36262: LD_VAR 0 17
36266: ARRAY
36267: PPUSH
36268: LD_VAR 0 4
36272: PPUSH
36273: CALL_OW 380
36277: GO 36296
// PrepareHuman ( false , i , skill ) ;
36279: LD_INT 0
36281: PPUSH
36282: LD_VAR 0 8
36286: PPUSH
36287: LD_VAR 0 4
36291: PPUSH
36292: CALL_OW 380
// end else
36296: GO 36315
// PrepareHuman ( false , i , skill ) ;
36298: LD_INT 0
36300: PPUSH
36301: LD_VAR 0 8
36305: PPUSH
36306: LD_VAR 0 4
36310: PPUSH
36311: CALL_OW 380
// un := CreateHuman ;
36315: LD_ADDR_VAR 0 14
36319: PUSH
36320: CALL_OW 44
36324: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36325: LD_ADDR_VAR 0 7
36329: PUSH
36330: LD_VAR 0 7
36334: PPUSH
36335: LD_INT 1
36337: PPUSH
36338: LD_VAR 0 14
36342: PPUSH
36343: CALL_OW 2
36347: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36348: LD_VAR 0 14
36352: PPUSH
36353: LD_VAR 0 9
36357: PPUSH
36358: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36362: LD_VAR 0 9
36366: PPUSH
36367: CALL_OW 313
36371: PUSH
36372: LD_INT 6
36374: EQUAL
36375: PUSH
36376: LD_VAR 0 9
36380: PPUSH
36381: CALL_OW 266
36385: PUSH
36386: LD_INT 32
36388: PUSH
36389: LD_INT 31
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: IN
36396: OR
36397: IFFALSE 36211
36399: GO 36208
36401: POP
36402: POP
// end else
36403: GO 36785
// for j = 1 to x do
36405: LD_ADDR_VAR 0 9
36409: PUSH
36410: DOUBLE
36411: LD_INT 1
36413: DEC
36414: ST_TO_ADDR
36415: LD_VAR 0 13
36419: PUSH
36420: FOR_TO
36421: IFFALSE 36783
// begin InitHc ;
36423: CALL_OW 19
// if not f then
36427: LD_VAR 0 12
36431: NOT
36432: IFFALSE 36521
// begin PrepareHuman ( false , i , skill ) ;
36434: LD_INT 0
36436: PPUSH
36437: LD_VAR 0 8
36441: PPUSH
36442: LD_VAR 0 4
36446: PPUSH
36447: CALL_OW 380
// un := CreateHuman ;
36451: LD_ADDR_VAR 0 14
36455: PUSH
36456: CALL_OW 44
36460: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36461: LD_ADDR_VAR 0 7
36465: PUSH
36466: LD_VAR 0 7
36470: PPUSH
36471: LD_INT 1
36473: PPUSH
36474: LD_VAR 0 14
36478: PPUSH
36479: CALL_OW 2
36483: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36484: LD_VAR 0 14
36488: PPUSH
36489: LD_VAR 0 1
36493: PPUSH
36494: CALL_OW 250
36498: PPUSH
36499: LD_VAR 0 1
36503: PPUSH
36504: CALL_OW 251
36508: PPUSH
36509: LD_INT 10
36511: PPUSH
36512: LD_INT 0
36514: PPUSH
36515: CALL_OW 50
// continue ;
36519: GO 36420
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36521: LD_VAR 0 12
36525: PUSH
36526: LD_INT 1
36528: ARRAY
36529: PPUSH
36530: CALL_OW 313
36534: PUSH
36535: LD_VAR 0 12
36539: PUSH
36540: LD_INT 1
36542: ARRAY
36543: PPUSH
36544: CALL_OW 266
36548: PUSH
36549: LD_INT 32
36551: PUSH
36552: LD_INT 31
36554: PUSH
36555: EMPTY
36556: LIST
36557: LIST
36558: IN
36559: AND
36560: PUSH
36561: LD_VAR 0 12
36565: PUSH
36566: LD_INT 1
36568: ARRAY
36569: PPUSH
36570: CALL_OW 313
36574: PUSH
36575: LD_INT 6
36577: EQUAL
36578: OR
36579: IFFALSE 36599
// f := Delete ( f , 1 ) ;
36581: LD_ADDR_VAR 0 12
36585: PUSH
36586: LD_VAR 0 12
36590: PPUSH
36591: LD_INT 1
36593: PPUSH
36594: CALL_OW 3
36598: ST_TO_ADDR
// if not f then
36599: LD_VAR 0 12
36603: NOT
36604: IFFALSE 36622
// begin x := x + 2 ;
36606: LD_ADDR_VAR 0 13
36610: PUSH
36611: LD_VAR 0 13
36615: PUSH
36616: LD_INT 2
36618: PLUS
36619: ST_TO_ADDR
// continue ;
36620: GO 36420
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36622: LD_VAR 0 12
36626: PUSH
36627: LD_INT 1
36629: ARRAY
36630: PPUSH
36631: CALL_OW 266
36635: PUSH
36636: LD_INT 5
36638: EQUAL
36639: IFFALSE 36713
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36641: LD_VAR 0 12
36645: PUSH
36646: LD_INT 1
36648: ARRAY
36649: PPUSH
36650: CALL_OW 313
36654: PUSH
36655: LD_INT 3
36657: LESS
36658: IFFALSE 36694
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36660: LD_INT 0
36662: PPUSH
36663: LD_INT 5
36665: PUSH
36666: LD_INT 8
36668: PUSH
36669: LD_INT 9
36671: PUSH
36672: EMPTY
36673: LIST
36674: LIST
36675: LIST
36676: PUSH
36677: LD_VAR 0 17
36681: ARRAY
36682: PPUSH
36683: LD_VAR 0 4
36687: PPUSH
36688: CALL_OW 380
36692: GO 36711
// PrepareHuman ( false , i , skill ) ;
36694: LD_INT 0
36696: PPUSH
36697: LD_VAR 0 8
36701: PPUSH
36702: LD_VAR 0 4
36706: PPUSH
36707: CALL_OW 380
// end else
36711: GO 36730
// PrepareHuman ( false , i , skill ) ;
36713: LD_INT 0
36715: PPUSH
36716: LD_VAR 0 8
36720: PPUSH
36721: LD_VAR 0 4
36725: PPUSH
36726: CALL_OW 380
// un := CreateHuman ;
36730: LD_ADDR_VAR 0 14
36734: PUSH
36735: CALL_OW 44
36739: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36740: LD_ADDR_VAR 0 7
36744: PUSH
36745: LD_VAR 0 7
36749: PPUSH
36750: LD_INT 1
36752: PPUSH
36753: LD_VAR 0 14
36757: PPUSH
36758: CALL_OW 2
36762: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
36763: LD_VAR 0 14
36767: PPUSH
36768: LD_VAR 0 12
36772: PUSH
36773: LD_INT 1
36775: ARRAY
36776: PPUSH
36777: CALL_OW 52
// end ;
36781: GO 36420
36783: POP
36784: POP
// end ;
36785: GO 35722
36787: POP
36788: POP
// result := result ^ buildings ;
36789: LD_ADDR_VAR 0 7
36793: PUSH
36794: LD_VAR 0 7
36798: PUSH
36799: LD_VAR 0 18
36803: ADD
36804: ST_TO_ADDR
// end else
36805: GO 36948
// begin for i = 1 to personel do
36807: LD_ADDR_VAR 0 8
36811: PUSH
36812: DOUBLE
36813: LD_INT 1
36815: DEC
36816: ST_TO_ADDR
36817: LD_VAR 0 6
36821: PUSH
36822: FOR_TO
36823: IFFALSE 36946
// begin if i > 4 then
36825: LD_VAR 0 8
36829: PUSH
36830: LD_INT 4
36832: GREATER
36833: IFFALSE 36837
// break ;
36835: GO 36946
// x := personel [ i ] ;
36837: LD_ADDR_VAR 0 13
36841: PUSH
36842: LD_VAR 0 6
36846: PUSH
36847: LD_VAR 0 8
36851: ARRAY
36852: ST_TO_ADDR
// if x = - 1 then
36853: LD_VAR 0 13
36857: PUSH
36858: LD_INT 1
36860: NEG
36861: EQUAL
36862: IFFALSE 36866
// continue ;
36864: GO 36822
// PrepareHuman ( false , i , skill ) ;
36866: LD_INT 0
36868: PPUSH
36869: LD_VAR 0 8
36873: PPUSH
36874: LD_VAR 0 4
36878: PPUSH
36879: CALL_OW 380
// un := CreateHuman ;
36883: LD_ADDR_VAR 0 14
36887: PUSH
36888: CALL_OW 44
36892: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36893: LD_VAR 0 14
36897: PPUSH
36898: LD_VAR 0 1
36902: PPUSH
36903: CALL_OW 250
36907: PPUSH
36908: LD_VAR 0 1
36912: PPUSH
36913: CALL_OW 251
36917: PPUSH
36918: LD_INT 10
36920: PPUSH
36921: LD_INT 0
36923: PPUSH
36924: CALL_OW 50
// result := result ^ un ;
36928: LD_ADDR_VAR 0 7
36932: PUSH
36933: LD_VAR 0 7
36937: PUSH
36938: LD_VAR 0 14
36942: ADD
36943: ST_TO_ADDR
// end ;
36944: GO 36822
36946: POP
36947: POP
// end ; end ;
36948: LD_VAR 0 7
36952: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
36953: LD_INT 0
36955: PPUSH
36956: PPUSH
36957: PPUSH
36958: PPUSH
36959: PPUSH
36960: PPUSH
36961: PPUSH
36962: PPUSH
36963: PPUSH
36964: PPUSH
36965: PPUSH
36966: PPUSH
36967: PPUSH
36968: PPUSH
36969: PPUSH
36970: PPUSH
// result := false ;
36971: LD_ADDR_VAR 0 3
36975: PUSH
36976: LD_INT 0
36978: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
36979: LD_VAR 0 1
36983: NOT
36984: PUSH
36985: LD_VAR 0 1
36989: PPUSH
36990: CALL_OW 266
36994: PUSH
36995: LD_INT 32
36997: PUSH
36998: LD_INT 33
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: IN
37005: NOT
37006: OR
37007: IFFALSE 37011
// exit ;
37009: GO 38147
// nat := GetNation ( tower ) ;
37011: LD_ADDR_VAR 0 12
37015: PUSH
37016: LD_VAR 0 1
37020: PPUSH
37021: CALL_OW 248
37025: ST_TO_ADDR
// side := GetSide ( tower ) ;
37026: LD_ADDR_VAR 0 16
37030: PUSH
37031: LD_VAR 0 1
37035: PPUSH
37036: CALL_OW 255
37040: ST_TO_ADDR
// x := GetX ( tower ) ;
37041: LD_ADDR_VAR 0 10
37045: PUSH
37046: LD_VAR 0 1
37050: PPUSH
37051: CALL_OW 250
37055: ST_TO_ADDR
// y := GetY ( tower ) ;
37056: LD_ADDR_VAR 0 11
37060: PUSH
37061: LD_VAR 0 1
37065: PPUSH
37066: CALL_OW 251
37070: ST_TO_ADDR
// if not x or not y then
37071: LD_VAR 0 10
37075: NOT
37076: PUSH
37077: LD_VAR 0 11
37081: NOT
37082: OR
37083: IFFALSE 37087
// exit ;
37085: GO 38147
// weapon := 0 ;
37087: LD_ADDR_VAR 0 18
37091: PUSH
37092: LD_INT 0
37094: ST_TO_ADDR
// fac_list := [ ] ;
37095: LD_ADDR_VAR 0 17
37099: PUSH
37100: EMPTY
37101: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
37102: LD_ADDR_VAR 0 6
37106: PUSH
37107: LD_VAR 0 1
37111: PPUSH
37112: CALL_OW 274
37116: PPUSH
37117: LD_VAR 0 2
37121: PPUSH
37122: CALL 34725 0 2
37126: PPUSH
37127: LD_INT 30
37129: PUSH
37130: LD_INT 3
37132: PUSH
37133: EMPTY
37134: LIST
37135: LIST
37136: PPUSH
37137: CALL_OW 72
37141: ST_TO_ADDR
// if not factories then
37142: LD_VAR 0 6
37146: NOT
37147: IFFALSE 37151
// exit ;
37149: GO 38147
// for i in factories do
37151: LD_ADDR_VAR 0 8
37155: PUSH
37156: LD_VAR 0 6
37160: PUSH
37161: FOR_IN
37162: IFFALSE 37187
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37164: LD_ADDR_VAR 0 17
37168: PUSH
37169: LD_VAR 0 17
37173: PUSH
37174: LD_VAR 0 8
37178: PPUSH
37179: CALL_OW 478
37183: UNION
37184: ST_TO_ADDR
37185: GO 37161
37187: POP
37188: POP
// if not fac_list then
37189: LD_VAR 0 17
37193: NOT
37194: IFFALSE 37198
// exit ;
37196: GO 38147
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37198: LD_ADDR_VAR 0 5
37202: PUSH
37203: LD_INT 4
37205: PUSH
37206: LD_INT 5
37208: PUSH
37209: LD_INT 9
37211: PUSH
37212: LD_INT 10
37214: PUSH
37215: LD_INT 6
37217: PUSH
37218: LD_INT 7
37220: PUSH
37221: LD_INT 11
37223: PUSH
37224: EMPTY
37225: LIST
37226: LIST
37227: LIST
37228: LIST
37229: LIST
37230: LIST
37231: LIST
37232: PUSH
37233: LD_INT 27
37235: PUSH
37236: LD_INT 28
37238: PUSH
37239: LD_INT 26
37241: PUSH
37242: LD_INT 30
37244: PUSH
37245: EMPTY
37246: LIST
37247: LIST
37248: LIST
37249: LIST
37250: PUSH
37251: LD_INT 43
37253: PUSH
37254: LD_INT 44
37256: PUSH
37257: LD_INT 46
37259: PUSH
37260: LD_INT 45
37262: PUSH
37263: LD_INT 47
37265: PUSH
37266: LD_INT 49
37268: PUSH
37269: EMPTY
37270: LIST
37271: LIST
37272: LIST
37273: LIST
37274: LIST
37275: LIST
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: LIST
37281: PUSH
37282: LD_VAR 0 12
37286: ARRAY
37287: ST_TO_ADDR
// for i in list do
37288: LD_ADDR_VAR 0 8
37292: PUSH
37293: LD_VAR 0 5
37297: PUSH
37298: FOR_IN
37299: IFFALSE 37332
// if not i in fac_list then
37301: LD_VAR 0 8
37305: PUSH
37306: LD_VAR 0 17
37310: IN
37311: NOT
37312: IFFALSE 37330
// list := list diff i ;
37314: LD_ADDR_VAR 0 5
37318: PUSH
37319: LD_VAR 0 5
37323: PUSH
37324: LD_VAR 0 8
37328: DIFF
37329: ST_TO_ADDR
37330: GO 37298
37332: POP
37333: POP
// if not list then
37334: LD_VAR 0 5
37338: NOT
37339: IFFALSE 37343
// exit ;
37341: GO 38147
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37343: LD_VAR 0 12
37347: PUSH
37348: LD_INT 3
37350: EQUAL
37351: PUSH
37352: LD_INT 49
37354: PUSH
37355: LD_VAR 0 5
37359: IN
37360: AND
37361: PUSH
37362: LD_INT 31
37364: PPUSH
37365: LD_VAR 0 16
37369: PPUSH
37370: CALL_OW 321
37374: PUSH
37375: LD_INT 2
37377: EQUAL
37378: AND
37379: IFFALSE 37439
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37381: LD_INT 22
37383: PUSH
37384: LD_VAR 0 16
37388: PUSH
37389: EMPTY
37390: LIST
37391: LIST
37392: PUSH
37393: LD_INT 35
37395: PUSH
37396: LD_INT 49
37398: PUSH
37399: EMPTY
37400: LIST
37401: LIST
37402: PUSH
37403: LD_INT 91
37405: PUSH
37406: LD_VAR 0 1
37410: PUSH
37411: LD_INT 10
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: LIST
37418: PUSH
37419: EMPTY
37420: LIST
37421: LIST
37422: LIST
37423: PPUSH
37424: CALL_OW 69
37428: NOT
37429: IFFALSE 37439
// weapon := ru_time_lapser ;
37431: LD_ADDR_VAR 0 18
37435: PUSH
37436: LD_INT 49
37438: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37439: LD_VAR 0 12
37443: PUSH
37444: LD_INT 1
37446: PUSH
37447: LD_INT 2
37449: PUSH
37450: EMPTY
37451: LIST
37452: LIST
37453: IN
37454: PUSH
37455: LD_INT 11
37457: PUSH
37458: LD_VAR 0 5
37462: IN
37463: PUSH
37464: LD_INT 30
37466: PUSH
37467: LD_VAR 0 5
37471: IN
37472: OR
37473: AND
37474: PUSH
37475: LD_INT 6
37477: PPUSH
37478: LD_VAR 0 16
37482: PPUSH
37483: CALL_OW 321
37487: PUSH
37488: LD_INT 2
37490: EQUAL
37491: AND
37492: IFFALSE 37657
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37494: LD_INT 22
37496: PUSH
37497: LD_VAR 0 16
37501: PUSH
37502: EMPTY
37503: LIST
37504: LIST
37505: PUSH
37506: LD_INT 2
37508: PUSH
37509: LD_INT 35
37511: PUSH
37512: LD_INT 11
37514: PUSH
37515: EMPTY
37516: LIST
37517: LIST
37518: PUSH
37519: LD_INT 35
37521: PUSH
37522: LD_INT 30
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: PUSH
37529: EMPTY
37530: LIST
37531: LIST
37532: LIST
37533: PUSH
37534: LD_INT 91
37536: PUSH
37537: LD_VAR 0 1
37541: PUSH
37542: LD_INT 18
37544: PUSH
37545: EMPTY
37546: LIST
37547: LIST
37548: LIST
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: LIST
37554: PPUSH
37555: CALL_OW 69
37559: NOT
37560: PUSH
37561: LD_INT 22
37563: PUSH
37564: LD_VAR 0 16
37568: PUSH
37569: EMPTY
37570: LIST
37571: LIST
37572: PUSH
37573: LD_INT 2
37575: PUSH
37576: LD_INT 30
37578: PUSH
37579: LD_INT 32
37581: PUSH
37582: EMPTY
37583: LIST
37584: LIST
37585: PUSH
37586: LD_INT 30
37588: PUSH
37589: LD_INT 33
37591: PUSH
37592: EMPTY
37593: LIST
37594: LIST
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: LIST
37600: PUSH
37601: LD_INT 91
37603: PUSH
37604: LD_VAR 0 1
37608: PUSH
37609: LD_INT 12
37611: PUSH
37612: EMPTY
37613: LIST
37614: LIST
37615: LIST
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: LIST
37621: PUSH
37622: EMPTY
37623: LIST
37624: PPUSH
37625: CALL_OW 69
37629: PUSH
37630: LD_INT 2
37632: GREATER
37633: AND
37634: IFFALSE 37657
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37636: LD_ADDR_VAR 0 18
37640: PUSH
37641: LD_INT 11
37643: PUSH
37644: LD_INT 30
37646: PUSH
37647: EMPTY
37648: LIST
37649: LIST
37650: PUSH
37651: LD_VAR 0 12
37655: ARRAY
37656: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37657: LD_VAR 0 18
37661: NOT
37662: PUSH
37663: LD_INT 40
37665: PPUSH
37666: LD_VAR 0 16
37670: PPUSH
37671: CALL_OW 321
37675: PUSH
37676: LD_INT 2
37678: EQUAL
37679: AND
37680: PUSH
37681: LD_INT 7
37683: PUSH
37684: LD_VAR 0 5
37688: IN
37689: PUSH
37690: LD_INT 28
37692: PUSH
37693: LD_VAR 0 5
37697: IN
37698: OR
37699: PUSH
37700: LD_INT 45
37702: PUSH
37703: LD_VAR 0 5
37707: IN
37708: OR
37709: AND
37710: IFFALSE 37964
// begin hex := GetHexInfo ( x , y ) ;
37712: LD_ADDR_VAR 0 4
37716: PUSH
37717: LD_VAR 0 10
37721: PPUSH
37722: LD_VAR 0 11
37726: PPUSH
37727: CALL_OW 546
37731: ST_TO_ADDR
// if hex [ 1 ] then
37732: LD_VAR 0 4
37736: PUSH
37737: LD_INT 1
37739: ARRAY
37740: IFFALSE 37744
// exit ;
37742: GO 38147
// height := hex [ 2 ] ;
37744: LD_ADDR_VAR 0 15
37748: PUSH
37749: LD_VAR 0 4
37753: PUSH
37754: LD_INT 2
37756: ARRAY
37757: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
37758: LD_ADDR_VAR 0 14
37762: PUSH
37763: LD_INT 0
37765: PUSH
37766: LD_INT 2
37768: PUSH
37769: LD_INT 3
37771: PUSH
37772: LD_INT 5
37774: PUSH
37775: EMPTY
37776: LIST
37777: LIST
37778: LIST
37779: LIST
37780: ST_TO_ADDR
// for i in tmp do
37781: LD_ADDR_VAR 0 8
37785: PUSH
37786: LD_VAR 0 14
37790: PUSH
37791: FOR_IN
37792: IFFALSE 37962
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
37794: LD_ADDR_VAR 0 9
37798: PUSH
37799: LD_VAR 0 10
37803: PPUSH
37804: LD_VAR 0 8
37808: PPUSH
37809: LD_INT 5
37811: PPUSH
37812: CALL_OW 272
37816: PUSH
37817: LD_VAR 0 11
37821: PPUSH
37822: LD_VAR 0 8
37826: PPUSH
37827: LD_INT 5
37829: PPUSH
37830: CALL_OW 273
37834: PUSH
37835: EMPTY
37836: LIST
37837: LIST
37838: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
37839: LD_VAR 0 9
37843: PUSH
37844: LD_INT 1
37846: ARRAY
37847: PPUSH
37848: LD_VAR 0 9
37852: PUSH
37853: LD_INT 2
37855: ARRAY
37856: PPUSH
37857: CALL_OW 488
37861: IFFALSE 37960
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
37863: LD_ADDR_VAR 0 4
37867: PUSH
37868: LD_VAR 0 9
37872: PUSH
37873: LD_INT 1
37875: ARRAY
37876: PPUSH
37877: LD_VAR 0 9
37881: PUSH
37882: LD_INT 2
37884: ARRAY
37885: PPUSH
37886: CALL_OW 546
37890: ST_TO_ADDR
// if hex [ 1 ] then
37891: LD_VAR 0 4
37895: PUSH
37896: LD_INT 1
37898: ARRAY
37899: IFFALSE 37903
// continue ;
37901: GO 37791
// h := hex [ 2 ] ;
37903: LD_ADDR_VAR 0 13
37907: PUSH
37908: LD_VAR 0 4
37912: PUSH
37913: LD_INT 2
37915: ARRAY
37916: ST_TO_ADDR
// if h + 7 < height then
37917: LD_VAR 0 13
37921: PUSH
37922: LD_INT 7
37924: PLUS
37925: PUSH
37926: LD_VAR 0 15
37930: LESS
37931: IFFALSE 37960
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
37933: LD_ADDR_VAR 0 18
37937: PUSH
37938: LD_INT 7
37940: PUSH
37941: LD_INT 28
37943: PUSH
37944: LD_INT 45
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: LIST
37951: PUSH
37952: LD_VAR 0 12
37956: ARRAY
37957: ST_TO_ADDR
// break ;
37958: GO 37962
// end ; end ; end ;
37960: GO 37791
37962: POP
37963: POP
// end ; if not weapon then
37964: LD_VAR 0 18
37968: NOT
37969: IFFALSE 38029
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
37971: LD_ADDR_VAR 0 5
37975: PUSH
37976: LD_VAR 0 5
37980: PUSH
37981: LD_INT 11
37983: PUSH
37984: LD_INT 30
37986: PUSH
37987: LD_INT 49
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: LIST
37994: DIFF
37995: ST_TO_ADDR
// if not list then
37996: LD_VAR 0 5
38000: NOT
38001: IFFALSE 38005
// exit ;
38003: GO 38147
// weapon := list [ rand ( 1 , list ) ] ;
38005: LD_ADDR_VAR 0 18
38009: PUSH
38010: LD_VAR 0 5
38014: PUSH
38015: LD_INT 1
38017: PPUSH
38018: LD_VAR 0 5
38022: PPUSH
38023: CALL_OW 12
38027: ARRAY
38028: ST_TO_ADDR
// end ; if weapon then
38029: LD_VAR 0 18
38033: IFFALSE 38147
// begin tmp := CostOfWeapon ( weapon ) ;
38035: LD_ADDR_VAR 0 14
38039: PUSH
38040: LD_VAR 0 18
38044: PPUSH
38045: CALL_OW 451
38049: ST_TO_ADDR
// j := GetBase ( tower ) ;
38050: LD_ADDR_VAR 0 9
38054: PUSH
38055: LD_VAR 0 1
38059: PPUSH
38060: CALL_OW 274
38064: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
38065: LD_VAR 0 9
38069: PPUSH
38070: LD_INT 1
38072: PPUSH
38073: CALL_OW 275
38077: PUSH
38078: LD_VAR 0 14
38082: PUSH
38083: LD_INT 1
38085: ARRAY
38086: GREATEREQUAL
38087: PUSH
38088: LD_VAR 0 9
38092: PPUSH
38093: LD_INT 2
38095: PPUSH
38096: CALL_OW 275
38100: PUSH
38101: LD_VAR 0 14
38105: PUSH
38106: LD_INT 2
38108: ARRAY
38109: GREATEREQUAL
38110: AND
38111: PUSH
38112: LD_VAR 0 9
38116: PPUSH
38117: LD_INT 3
38119: PPUSH
38120: CALL_OW 275
38124: PUSH
38125: LD_VAR 0 14
38129: PUSH
38130: LD_INT 3
38132: ARRAY
38133: GREATEREQUAL
38134: AND
38135: IFFALSE 38147
// result := weapon ;
38137: LD_ADDR_VAR 0 3
38141: PUSH
38142: LD_VAR 0 18
38146: ST_TO_ADDR
// end ; end ;
38147: LD_VAR 0 3
38151: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
38152: LD_INT 0
38154: PPUSH
38155: PPUSH
// result := true ;
38156: LD_ADDR_VAR 0 3
38160: PUSH
38161: LD_INT 1
38163: ST_TO_ADDR
// if array1 = array2 then
38164: LD_VAR 0 1
38168: PUSH
38169: LD_VAR 0 2
38173: EQUAL
38174: IFFALSE 38234
// begin for i = 1 to array1 do
38176: LD_ADDR_VAR 0 4
38180: PUSH
38181: DOUBLE
38182: LD_INT 1
38184: DEC
38185: ST_TO_ADDR
38186: LD_VAR 0 1
38190: PUSH
38191: FOR_TO
38192: IFFALSE 38230
// if array1 [ i ] <> array2 [ i ] then
38194: LD_VAR 0 1
38198: PUSH
38199: LD_VAR 0 4
38203: ARRAY
38204: PUSH
38205: LD_VAR 0 2
38209: PUSH
38210: LD_VAR 0 4
38214: ARRAY
38215: NONEQUAL
38216: IFFALSE 38228
// begin result := false ;
38218: LD_ADDR_VAR 0 3
38222: PUSH
38223: LD_INT 0
38225: ST_TO_ADDR
// break ;
38226: GO 38230
// end ;
38228: GO 38191
38230: POP
38231: POP
// end else
38232: GO 38242
// result := false ;
38234: LD_ADDR_VAR 0 3
38238: PUSH
38239: LD_INT 0
38241: ST_TO_ADDR
// end ;
38242: LD_VAR 0 3
38246: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38247: LD_INT 0
38249: PPUSH
38250: PPUSH
38251: PPUSH
// pom := GetBase ( fac ) ;
38252: LD_ADDR_VAR 0 5
38256: PUSH
38257: LD_VAR 0 1
38261: PPUSH
38262: CALL_OW 274
38266: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38267: LD_ADDR_VAR 0 4
38271: PUSH
38272: LD_VAR 0 2
38276: PUSH
38277: LD_INT 1
38279: ARRAY
38280: PPUSH
38281: LD_VAR 0 2
38285: PUSH
38286: LD_INT 2
38288: ARRAY
38289: PPUSH
38290: LD_VAR 0 2
38294: PUSH
38295: LD_INT 3
38297: ARRAY
38298: PPUSH
38299: LD_VAR 0 2
38303: PUSH
38304: LD_INT 4
38306: ARRAY
38307: PPUSH
38308: CALL_OW 449
38312: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38313: LD_ADDR_VAR 0 3
38317: PUSH
38318: LD_VAR 0 5
38322: PPUSH
38323: LD_INT 1
38325: PPUSH
38326: CALL_OW 275
38330: PUSH
38331: LD_VAR 0 4
38335: PUSH
38336: LD_INT 1
38338: ARRAY
38339: GREATEREQUAL
38340: PUSH
38341: LD_VAR 0 5
38345: PPUSH
38346: LD_INT 2
38348: PPUSH
38349: CALL_OW 275
38353: PUSH
38354: LD_VAR 0 4
38358: PUSH
38359: LD_INT 2
38361: ARRAY
38362: GREATEREQUAL
38363: AND
38364: PUSH
38365: LD_VAR 0 5
38369: PPUSH
38370: LD_INT 3
38372: PPUSH
38373: CALL_OW 275
38377: PUSH
38378: LD_VAR 0 4
38382: PUSH
38383: LD_INT 3
38385: ARRAY
38386: GREATEREQUAL
38387: AND
38388: ST_TO_ADDR
// end ;
38389: LD_VAR 0 3
38393: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38394: LD_INT 0
38396: PPUSH
38397: PPUSH
38398: PPUSH
38399: PPUSH
// pom := GetBase ( building ) ;
38400: LD_ADDR_VAR 0 3
38404: PUSH
38405: LD_VAR 0 1
38409: PPUSH
38410: CALL_OW 274
38414: ST_TO_ADDR
// if not pom then
38415: LD_VAR 0 3
38419: NOT
38420: IFFALSE 38424
// exit ;
38422: GO 38594
// btype := GetBType ( building ) ;
38424: LD_ADDR_VAR 0 5
38428: PUSH
38429: LD_VAR 0 1
38433: PPUSH
38434: CALL_OW 266
38438: ST_TO_ADDR
// if btype = b_armoury then
38439: LD_VAR 0 5
38443: PUSH
38444: LD_INT 4
38446: EQUAL
38447: IFFALSE 38457
// btype := b_barracks ;
38449: LD_ADDR_VAR 0 5
38453: PUSH
38454: LD_INT 5
38456: ST_TO_ADDR
// if btype = b_depot then
38457: LD_VAR 0 5
38461: PUSH
38462: LD_INT 0
38464: EQUAL
38465: IFFALSE 38475
// btype := b_warehouse ;
38467: LD_ADDR_VAR 0 5
38471: PUSH
38472: LD_INT 1
38474: ST_TO_ADDR
// if btype = b_workshop then
38475: LD_VAR 0 5
38479: PUSH
38480: LD_INT 2
38482: EQUAL
38483: IFFALSE 38493
// btype := b_factory ;
38485: LD_ADDR_VAR 0 5
38489: PUSH
38490: LD_INT 3
38492: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38493: LD_ADDR_VAR 0 4
38497: PUSH
38498: LD_VAR 0 5
38502: PPUSH
38503: LD_VAR 0 1
38507: PPUSH
38508: CALL_OW 248
38512: PPUSH
38513: CALL_OW 450
38517: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38518: LD_ADDR_VAR 0 2
38522: PUSH
38523: LD_VAR 0 3
38527: PPUSH
38528: LD_INT 1
38530: PPUSH
38531: CALL_OW 275
38535: PUSH
38536: LD_VAR 0 4
38540: PUSH
38541: LD_INT 1
38543: ARRAY
38544: GREATEREQUAL
38545: PUSH
38546: LD_VAR 0 3
38550: PPUSH
38551: LD_INT 2
38553: PPUSH
38554: CALL_OW 275
38558: PUSH
38559: LD_VAR 0 4
38563: PUSH
38564: LD_INT 2
38566: ARRAY
38567: GREATEREQUAL
38568: AND
38569: PUSH
38570: LD_VAR 0 3
38574: PPUSH
38575: LD_INT 3
38577: PPUSH
38578: CALL_OW 275
38582: PUSH
38583: LD_VAR 0 4
38587: PUSH
38588: LD_INT 3
38590: ARRAY
38591: GREATEREQUAL
38592: AND
38593: ST_TO_ADDR
// end ;
38594: LD_VAR 0 2
38598: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
38599: LD_INT 0
38601: PPUSH
38602: PPUSH
38603: PPUSH
// pom := GetBase ( building ) ;
38604: LD_ADDR_VAR 0 4
38608: PUSH
38609: LD_VAR 0 1
38613: PPUSH
38614: CALL_OW 274
38618: ST_TO_ADDR
// if not pom then
38619: LD_VAR 0 4
38623: NOT
38624: IFFALSE 38628
// exit ;
38626: GO 38729
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38628: LD_ADDR_VAR 0 5
38632: PUSH
38633: LD_VAR 0 2
38637: PPUSH
38638: LD_VAR 0 1
38642: PPUSH
38643: CALL_OW 248
38647: PPUSH
38648: CALL_OW 450
38652: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38653: LD_ADDR_VAR 0 3
38657: PUSH
38658: LD_VAR 0 4
38662: PPUSH
38663: LD_INT 1
38665: PPUSH
38666: CALL_OW 275
38670: PUSH
38671: LD_VAR 0 5
38675: PUSH
38676: LD_INT 1
38678: ARRAY
38679: GREATEREQUAL
38680: PUSH
38681: LD_VAR 0 4
38685: PPUSH
38686: LD_INT 2
38688: PPUSH
38689: CALL_OW 275
38693: PUSH
38694: LD_VAR 0 5
38698: PUSH
38699: LD_INT 2
38701: ARRAY
38702: GREATEREQUAL
38703: AND
38704: PUSH
38705: LD_VAR 0 4
38709: PPUSH
38710: LD_INT 3
38712: PPUSH
38713: CALL_OW 275
38717: PUSH
38718: LD_VAR 0 5
38722: PUSH
38723: LD_INT 3
38725: ARRAY
38726: GREATEREQUAL
38727: AND
38728: ST_TO_ADDR
// end ;
38729: LD_VAR 0 3
38733: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
38734: LD_INT 0
38736: PPUSH
38737: PPUSH
38738: PPUSH
38739: PPUSH
38740: PPUSH
38741: PPUSH
38742: PPUSH
38743: PPUSH
38744: PPUSH
38745: PPUSH
// result := false ;
38746: LD_ADDR_VAR 0 6
38750: PUSH
38751: LD_INT 0
38753: ST_TO_ADDR
// if not base or not btype or not x or not y then
38754: LD_VAR 0 1
38758: NOT
38759: PUSH
38760: LD_VAR 0 2
38764: NOT
38765: OR
38766: PUSH
38767: LD_VAR 0 3
38771: NOT
38772: OR
38773: PUSH
38774: LD_VAR 0 4
38778: NOT
38779: OR
38780: IFFALSE 38784
// exit ;
38782: GO 39393
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
38784: LD_ADDR_VAR 0 12
38788: PUSH
38789: LD_VAR 0 2
38793: PPUSH
38794: LD_VAR 0 3
38798: PPUSH
38799: LD_VAR 0 4
38803: PPUSH
38804: LD_VAR 0 5
38808: PPUSH
38809: LD_VAR 0 1
38813: PUSH
38814: LD_INT 1
38816: ARRAY
38817: PPUSH
38818: CALL_OW 248
38822: PPUSH
38823: LD_INT 0
38825: PPUSH
38826: CALL 40230 0 6
38830: ST_TO_ADDR
// if not hexes then
38831: LD_VAR 0 12
38835: NOT
38836: IFFALSE 38840
// exit ;
38838: GO 39393
// for i = 1 to hexes do
38840: LD_ADDR_VAR 0 7
38844: PUSH
38845: DOUBLE
38846: LD_INT 1
38848: DEC
38849: ST_TO_ADDR
38850: LD_VAR 0 12
38854: PUSH
38855: FOR_TO
38856: IFFALSE 39391
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38858: LD_ADDR_VAR 0 11
38862: PUSH
38863: LD_VAR 0 12
38867: PUSH
38868: LD_VAR 0 7
38872: ARRAY
38873: PUSH
38874: LD_INT 1
38876: ARRAY
38877: PPUSH
38878: LD_VAR 0 12
38882: PUSH
38883: LD_VAR 0 7
38887: ARRAY
38888: PUSH
38889: LD_INT 2
38891: ARRAY
38892: PPUSH
38893: CALL_OW 428
38897: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
38898: LD_VAR 0 12
38902: PUSH
38903: LD_VAR 0 7
38907: ARRAY
38908: PUSH
38909: LD_INT 1
38911: ARRAY
38912: PPUSH
38913: LD_VAR 0 12
38917: PUSH
38918: LD_VAR 0 7
38922: ARRAY
38923: PUSH
38924: LD_INT 2
38926: ARRAY
38927: PPUSH
38928: CALL_OW 351
38932: PUSH
38933: LD_VAR 0 12
38937: PUSH
38938: LD_VAR 0 7
38942: ARRAY
38943: PUSH
38944: LD_INT 1
38946: ARRAY
38947: PPUSH
38948: LD_VAR 0 12
38952: PUSH
38953: LD_VAR 0 7
38957: ARRAY
38958: PUSH
38959: LD_INT 2
38961: ARRAY
38962: PPUSH
38963: CALL_OW 488
38967: NOT
38968: OR
38969: PUSH
38970: LD_VAR 0 11
38974: PPUSH
38975: CALL_OW 247
38979: PUSH
38980: LD_INT 3
38982: EQUAL
38983: OR
38984: IFFALSE 38990
// exit ;
38986: POP
38987: POP
38988: GO 39393
// if not tmp or not tmp in base then
38990: LD_VAR 0 11
38994: NOT
38995: PUSH
38996: LD_VAR 0 11
39000: PUSH
39001: LD_VAR 0 1
39005: IN
39006: NOT
39007: OR
39008: IFFALSE 39012
// continue ;
39010: GO 38855
// result := true ;
39012: LD_ADDR_VAR 0 6
39016: PUSH
39017: LD_INT 1
39019: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39020: LD_ADDR_VAR 0 15
39024: PUSH
39025: LD_VAR 0 1
39029: PPUSH
39030: LD_INT 22
39032: PUSH
39033: LD_VAR 0 11
39037: PPUSH
39038: CALL_OW 255
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: PUSH
39047: LD_INT 2
39049: PUSH
39050: LD_INT 30
39052: PUSH
39053: LD_INT 0
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: PUSH
39060: LD_INT 30
39062: PUSH
39063: LD_INT 1
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PUSH
39070: EMPTY
39071: LIST
39072: LIST
39073: LIST
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: PPUSH
39079: CALL_OW 72
39083: ST_TO_ADDR
// if dep then
39084: LD_VAR 0 15
39088: IFFALSE 39224
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39090: LD_ADDR_VAR 0 14
39094: PUSH
39095: LD_VAR 0 15
39099: PUSH
39100: LD_INT 1
39102: ARRAY
39103: PPUSH
39104: CALL_OW 250
39108: PPUSH
39109: LD_VAR 0 15
39113: PUSH
39114: LD_INT 1
39116: ARRAY
39117: PPUSH
39118: CALL_OW 254
39122: PPUSH
39123: LD_INT 5
39125: PPUSH
39126: CALL_OW 272
39130: PUSH
39131: LD_VAR 0 15
39135: PUSH
39136: LD_INT 1
39138: ARRAY
39139: PPUSH
39140: CALL_OW 251
39144: PPUSH
39145: LD_VAR 0 15
39149: PUSH
39150: LD_INT 1
39152: ARRAY
39153: PPUSH
39154: CALL_OW 254
39158: PPUSH
39159: LD_INT 5
39161: PPUSH
39162: CALL_OW 273
39166: PUSH
39167: EMPTY
39168: LIST
39169: LIST
39170: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39171: LD_VAR 0 14
39175: PUSH
39176: LD_INT 1
39178: ARRAY
39179: PPUSH
39180: LD_VAR 0 14
39184: PUSH
39185: LD_INT 2
39187: ARRAY
39188: PPUSH
39189: CALL_OW 488
39193: IFFALSE 39224
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39195: LD_VAR 0 11
39199: PPUSH
39200: LD_VAR 0 14
39204: PUSH
39205: LD_INT 1
39207: ARRAY
39208: PPUSH
39209: LD_VAR 0 14
39213: PUSH
39214: LD_INT 2
39216: ARRAY
39217: PPUSH
39218: CALL_OW 111
// continue ;
39222: GO 38855
// end ; end ; r := GetDir ( tmp ) ;
39224: LD_ADDR_VAR 0 13
39228: PUSH
39229: LD_VAR 0 11
39233: PPUSH
39234: CALL_OW 254
39238: ST_TO_ADDR
// if r = 5 then
39239: LD_VAR 0 13
39243: PUSH
39244: LD_INT 5
39246: EQUAL
39247: IFFALSE 39257
// r := 0 ;
39249: LD_ADDR_VAR 0 13
39253: PUSH
39254: LD_INT 0
39256: ST_TO_ADDR
// for j = r to 5 do
39257: LD_ADDR_VAR 0 8
39261: PUSH
39262: DOUBLE
39263: LD_VAR 0 13
39267: DEC
39268: ST_TO_ADDR
39269: LD_INT 5
39271: PUSH
39272: FOR_TO
39273: IFFALSE 39387
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39275: LD_ADDR_VAR 0 9
39279: PUSH
39280: LD_VAR 0 11
39284: PPUSH
39285: CALL_OW 250
39289: PPUSH
39290: LD_VAR 0 8
39294: PPUSH
39295: LD_INT 2
39297: PPUSH
39298: CALL_OW 272
39302: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39303: LD_ADDR_VAR 0 10
39307: PUSH
39308: LD_VAR 0 11
39312: PPUSH
39313: CALL_OW 251
39317: PPUSH
39318: LD_VAR 0 8
39322: PPUSH
39323: LD_INT 2
39325: PPUSH
39326: CALL_OW 273
39330: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39331: LD_VAR 0 9
39335: PPUSH
39336: LD_VAR 0 10
39340: PPUSH
39341: CALL_OW 488
39345: PUSH
39346: LD_VAR 0 9
39350: PPUSH
39351: LD_VAR 0 10
39355: PPUSH
39356: CALL_OW 428
39360: NOT
39361: AND
39362: IFFALSE 39385
// begin ComMoveXY ( tmp , _x , _y ) ;
39364: LD_VAR 0 11
39368: PPUSH
39369: LD_VAR 0 9
39373: PPUSH
39374: LD_VAR 0 10
39378: PPUSH
39379: CALL_OW 111
// break ;
39383: GO 39387
// end ; end ;
39385: GO 39272
39387: POP
39388: POP
// end ;
39389: GO 38855
39391: POP
39392: POP
// end ;
39393: LD_VAR 0 6
39397: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
39398: LD_INT 0
39400: PPUSH
39401: PPUSH
39402: PPUSH
39403: PPUSH
39404: PPUSH
39405: PPUSH
39406: PPUSH
39407: PPUSH
39408: PPUSH
39409: PPUSH
// result := false ;
39410: LD_ADDR_VAR 0 6
39414: PUSH
39415: LD_INT 0
39417: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
39418: LD_VAR 0 1
39422: NOT
39423: PUSH
39424: LD_VAR 0 1
39428: PPUSH
39429: CALL_OW 266
39433: PUSH
39434: LD_INT 0
39436: PUSH
39437: LD_INT 1
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: IN
39444: NOT
39445: OR
39446: PUSH
39447: LD_VAR 0 2
39451: NOT
39452: OR
39453: PUSH
39454: LD_VAR 0 5
39458: PUSH
39459: LD_INT 0
39461: PUSH
39462: LD_INT 1
39464: PUSH
39465: LD_INT 2
39467: PUSH
39468: LD_INT 3
39470: PUSH
39471: LD_INT 4
39473: PUSH
39474: LD_INT 5
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: LIST
39481: LIST
39482: LIST
39483: LIST
39484: IN
39485: NOT
39486: OR
39487: PUSH
39488: LD_VAR 0 3
39492: PPUSH
39493: LD_VAR 0 4
39497: PPUSH
39498: CALL_OW 488
39502: NOT
39503: OR
39504: IFFALSE 39508
// exit ;
39506: GO 40225
// pom := GetBase ( depot ) ;
39508: LD_ADDR_VAR 0 10
39512: PUSH
39513: LD_VAR 0 1
39517: PPUSH
39518: CALL_OW 274
39522: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
39523: LD_ADDR_VAR 0 11
39527: PUSH
39528: LD_VAR 0 2
39532: PPUSH
39533: LD_VAR 0 1
39537: PPUSH
39538: CALL_OW 248
39542: PPUSH
39543: CALL_OW 450
39547: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
39548: LD_VAR 0 10
39552: PPUSH
39553: LD_INT 1
39555: PPUSH
39556: CALL_OW 275
39560: PUSH
39561: LD_VAR 0 11
39565: PUSH
39566: LD_INT 1
39568: ARRAY
39569: GREATEREQUAL
39570: PUSH
39571: LD_VAR 0 10
39575: PPUSH
39576: LD_INT 2
39578: PPUSH
39579: CALL_OW 275
39583: PUSH
39584: LD_VAR 0 11
39588: PUSH
39589: LD_INT 2
39591: ARRAY
39592: GREATEREQUAL
39593: AND
39594: PUSH
39595: LD_VAR 0 10
39599: PPUSH
39600: LD_INT 3
39602: PPUSH
39603: CALL_OW 275
39607: PUSH
39608: LD_VAR 0 11
39612: PUSH
39613: LD_INT 3
39615: ARRAY
39616: GREATEREQUAL
39617: AND
39618: NOT
39619: IFFALSE 39623
// exit ;
39621: GO 40225
// if GetBType ( depot ) = b_depot then
39623: LD_VAR 0 1
39627: PPUSH
39628: CALL_OW 266
39632: PUSH
39633: LD_INT 0
39635: EQUAL
39636: IFFALSE 39648
// dist := 28 else
39638: LD_ADDR_VAR 0 14
39642: PUSH
39643: LD_INT 28
39645: ST_TO_ADDR
39646: GO 39656
// dist := 36 ;
39648: LD_ADDR_VAR 0 14
39652: PUSH
39653: LD_INT 36
39655: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
39656: LD_VAR 0 1
39660: PPUSH
39661: LD_VAR 0 3
39665: PPUSH
39666: LD_VAR 0 4
39670: PPUSH
39671: CALL_OW 297
39675: PUSH
39676: LD_VAR 0 14
39680: GREATER
39681: IFFALSE 39685
// exit ;
39683: GO 40225
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
39685: LD_ADDR_VAR 0 12
39689: PUSH
39690: LD_VAR 0 2
39694: PPUSH
39695: LD_VAR 0 3
39699: PPUSH
39700: LD_VAR 0 4
39704: PPUSH
39705: LD_VAR 0 5
39709: PPUSH
39710: LD_VAR 0 1
39714: PPUSH
39715: CALL_OW 248
39719: PPUSH
39720: LD_INT 0
39722: PPUSH
39723: CALL 40230 0 6
39727: ST_TO_ADDR
// if not hexes then
39728: LD_VAR 0 12
39732: NOT
39733: IFFALSE 39737
// exit ;
39735: GO 40225
// hex := GetHexInfo ( x , y ) ;
39737: LD_ADDR_VAR 0 15
39741: PUSH
39742: LD_VAR 0 3
39746: PPUSH
39747: LD_VAR 0 4
39751: PPUSH
39752: CALL_OW 546
39756: ST_TO_ADDR
// if hex [ 1 ] then
39757: LD_VAR 0 15
39761: PUSH
39762: LD_INT 1
39764: ARRAY
39765: IFFALSE 39769
// exit ;
39767: GO 40225
// height := hex [ 2 ] ;
39769: LD_ADDR_VAR 0 13
39773: PUSH
39774: LD_VAR 0 15
39778: PUSH
39779: LD_INT 2
39781: ARRAY
39782: ST_TO_ADDR
// for i = 1 to hexes do
39783: LD_ADDR_VAR 0 7
39787: PUSH
39788: DOUBLE
39789: LD_INT 1
39791: DEC
39792: ST_TO_ADDR
39793: LD_VAR 0 12
39797: PUSH
39798: FOR_TO
39799: IFFALSE 40129
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
39801: LD_VAR 0 12
39805: PUSH
39806: LD_VAR 0 7
39810: ARRAY
39811: PUSH
39812: LD_INT 1
39814: ARRAY
39815: PPUSH
39816: LD_VAR 0 12
39820: PUSH
39821: LD_VAR 0 7
39825: ARRAY
39826: PUSH
39827: LD_INT 2
39829: ARRAY
39830: PPUSH
39831: CALL_OW 488
39835: NOT
39836: PUSH
39837: LD_VAR 0 12
39841: PUSH
39842: LD_VAR 0 7
39846: ARRAY
39847: PUSH
39848: LD_INT 1
39850: ARRAY
39851: PPUSH
39852: LD_VAR 0 12
39856: PUSH
39857: LD_VAR 0 7
39861: ARRAY
39862: PUSH
39863: LD_INT 2
39865: ARRAY
39866: PPUSH
39867: CALL_OW 428
39871: PUSH
39872: LD_INT 0
39874: GREATER
39875: OR
39876: PUSH
39877: LD_VAR 0 12
39881: PUSH
39882: LD_VAR 0 7
39886: ARRAY
39887: PUSH
39888: LD_INT 1
39890: ARRAY
39891: PPUSH
39892: LD_VAR 0 12
39896: PUSH
39897: LD_VAR 0 7
39901: ARRAY
39902: PUSH
39903: LD_INT 2
39905: ARRAY
39906: PPUSH
39907: CALL_OW 351
39911: OR
39912: IFFALSE 39918
// exit ;
39914: POP
39915: POP
39916: GO 40225
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39918: LD_ADDR_VAR 0 8
39922: PUSH
39923: LD_VAR 0 12
39927: PUSH
39928: LD_VAR 0 7
39932: ARRAY
39933: PUSH
39934: LD_INT 1
39936: ARRAY
39937: PPUSH
39938: LD_VAR 0 12
39942: PUSH
39943: LD_VAR 0 7
39947: ARRAY
39948: PUSH
39949: LD_INT 2
39951: ARRAY
39952: PPUSH
39953: CALL_OW 546
39957: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
39958: LD_VAR 0 8
39962: PUSH
39963: LD_INT 1
39965: ARRAY
39966: PUSH
39967: LD_VAR 0 8
39971: PUSH
39972: LD_INT 2
39974: ARRAY
39975: PUSH
39976: LD_VAR 0 13
39980: PUSH
39981: LD_INT 2
39983: PLUS
39984: GREATER
39985: OR
39986: PUSH
39987: LD_VAR 0 8
39991: PUSH
39992: LD_INT 2
39994: ARRAY
39995: PUSH
39996: LD_VAR 0 13
40000: PUSH
40001: LD_INT 2
40003: MINUS
40004: LESS
40005: OR
40006: PUSH
40007: LD_VAR 0 8
40011: PUSH
40012: LD_INT 3
40014: ARRAY
40015: PUSH
40016: LD_INT 0
40018: PUSH
40019: LD_INT 8
40021: PUSH
40022: LD_INT 9
40024: PUSH
40025: LD_INT 10
40027: PUSH
40028: LD_INT 11
40030: PUSH
40031: LD_INT 12
40033: PUSH
40034: LD_INT 13
40036: PUSH
40037: LD_INT 16
40039: PUSH
40040: LD_INT 17
40042: PUSH
40043: LD_INT 18
40045: PUSH
40046: LD_INT 19
40048: PUSH
40049: LD_INT 20
40051: PUSH
40052: LD_INT 21
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: LIST
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: IN
40070: NOT
40071: OR
40072: PUSH
40073: LD_VAR 0 8
40077: PUSH
40078: LD_INT 5
40080: ARRAY
40081: NOT
40082: OR
40083: PUSH
40084: LD_VAR 0 8
40088: PUSH
40089: LD_INT 6
40091: ARRAY
40092: PUSH
40093: LD_INT 1
40095: PUSH
40096: LD_INT 2
40098: PUSH
40099: LD_INT 7
40101: PUSH
40102: LD_INT 9
40104: PUSH
40105: LD_INT 10
40107: PUSH
40108: LD_INT 11
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: LIST
40115: LIST
40116: LIST
40117: LIST
40118: IN
40119: NOT
40120: OR
40121: IFFALSE 40127
// exit ;
40123: POP
40124: POP
40125: GO 40225
// end ;
40127: GO 39798
40129: POP
40130: POP
// side := GetSide ( depot ) ;
40131: LD_ADDR_VAR 0 9
40135: PUSH
40136: LD_VAR 0 1
40140: PPUSH
40141: CALL_OW 255
40145: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
40146: LD_VAR 0 9
40150: PPUSH
40151: LD_VAR 0 3
40155: PPUSH
40156: LD_VAR 0 4
40160: PPUSH
40161: LD_INT 20
40163: PPUSH
40164: CALL 32879 0 4
40168: PUSH
40169: LD_INT 4
40171: ARRAY
40172: IFFALSE 40176
// exit ;
40174: GO 40225
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
40176: LD_VAR 0 2
40180: PUSH
40181: LD_INT 29
40183: PUSH
40184: LD_INT 30
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: IN
40191: PUSH
40192: LD_VAR 0 3
40196: PPUSH
40197: LD_VAR 0 4
40201: PPUSH
40202: LD_VAR 0 9
40206: PPUSH
40207: CALL_OW 440
40211: NOT
40212: AND
40213: IFFALSE 40217
// exit ;
40215: GO 40225
// result := true ;
40217: LD_ADDR_VAR 0 6
40221: PUSH
40222: LD_INT 1
40224: ST_TO_ADDR
// end ;
40225: LD_VAR 0 6
40229: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
40230: LD_INT 0
40232: PPUSH
40233: PPUSH
40234: PPUSH
40235: PPUSH
40236: PPUSH
40237: PPUSH
40238: PPUSH
40239: PPUSH
40240: PPUSH
40241: PPUSH
40242: PPUSH
40243: PPUSH
40244: PPUSH
40245: PPUSH
40246: PPUSH
40247: PPUSH
40248: PPUSH
40249: PPUSH
40250: PPUSH
40251: PPUSH
40252: PPUSH
40253: PPUSH
40254: PPUSH
40255: PPUSH
40256: PPUSH
40257: PPUSH
40258: PPUSH
40259: PPUSH
40260: PPUSH
40261: PPUSH
40262: PPUSH
40263: PPUSH
40264: PPUSH
40265: PPUSH
40266: PPUSH
40267: PPUSH
40268: PPUSH
40269: PPUSH
40270: PPUSH
40271: PPUSH
40272: PPUSH
40273: PPUSH
40274: PPUSH
40275: PPUSH
40276: PPUSH
40277: PPUSH
40278: PPUSH
40279: PPUSH
40280: PPUSH
40281: PPUSH
40282: PPUSH
40283: PPUSH
40284: PPUSH
40285: PPUSH
40286: PPUSH
40287: PPUSH
40288: PPUSH
40289: PPUSH
// result = [ ] ;
40290: LD_ADDR_VAR 0 7
40294: PUSH
40295: EMPTY
40296: ST_TO_ADDR
// temp_list = [ ] ;
40297: LD_ADDR_VAR 0 9
40301: PUSH
40302: EMPTY
40303: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
40304: LD_VAR 0 4
40308: PUSH
40309: LD_INT 0
40311: PUSH
40312: LD_INT 1
40314: PUSH
40315: LD_INT 2
40317: PUSH
40318: LD_INT 3
40320: PUSH
40321: LD_INT 4
40323: PUSH
40324: LD_INT 5
40326: PUSH
40327: EMPTY
40328: LIST
40329: LIST
40330: LIST
40331: LIST
40332: LIST
40333: LIST
40334: IN
40335: NOT
40336: PUSH
40337: LD_VAR 0 1
40341: PUSH
40342: LD_INT 0
40344: PUSH
40345: LD_INT 1
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: IN
40352: PUSH
40353: LD_VAR 0 5
40357: PUSH
40358: LD_INT 1
40360: PUSH
40361: LD_INT 2
40363: PUSH
40364: LD_INT 3
40366: PUSH
40367: EMPTY
40368: LIST
40369: LIST
40370: LIST
40371: IN
40372: NOT
40373: AND
40374: OR
40375: IFFALSE 40379
// exit ;
40377: GO 58770
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
40379: LD_VAR 0 1
40383: PUSH
40384: LD_INT 6
40386: PUSH
40387: LD_INT 7
40389: PUSH
40390: LD_INT 8
40392: PUSH
40393: LD_INT 13
40395: PUSH
40396: LD_INT 12
40398: PUSH
40399: LD_INT 15
40401: PUSH
40402: LD_INT 11
40404: PUSH
40405: LD_INT 14
40407: PUSH
40408: LD_INT 10
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: LIST
40415: LIST
40416: LIST
40417: LIST
40418: LIST
40419: LIST
40420: LIST
40421: IN
40422: IFFALSE 40432
// btype = b_lab ;
40424: LD_ADDR_VAR 0 1
40428: PUSH
40429: LD_INT 6
40431: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
40432: LD_VAR 0 6
40436: PUSH
40437: LD_INT 0
40439: PUSH
40440: LD_INT 1
40442: PUSH
40443: LD_INT 2
40445: PUSH
40446: EMPTY
40447: LIST
40448: LIST
40449: LIST
40450: IN
40451: NOT
40452: PUSH
40453: LD_VAR 0 1
40457: PUSH
40458: LD_INT 0
40460: PUSH
40461: LD_INT 1
40463: PUSH
40464: LD_INT 2
40466: PUSH
40467: LD_INT 3
40469: PUSH
40470: LD_INT 6
40472: PUSH
40473: LD_INT 36
40475: PUSH
40476: LD_INT 4
40478: PUSH
40479: LD_INT 5
40481: PUSH
40482: LD_INT 31
40484: PUSH
40485: LD_INT 32
40487: PUSH
40488: LD_INT 33
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: LIST
40495: LIST
40496: LIST
40497: LIST
40498: LIST
40499: LIST
40500: LIST
40501: LIST
40502: LIST
40503: IN
40504: NOT
40505: PUSH
40506: LD_VAR 0 6
40510: PUSH
40511: LD_INT 1
40513: EQUAL
40514: AND
40515: OR
40516: PUSH
40517: LD_VAR 0 1
40521: PUSH
40522: LD_INT 2
40524: PUSH
40525: LD_INT 3
40527: PUSH
40528: EMPTY
40529: LIST
40530: LIST
40531: IN
40532: NOT
40533: PUSH
40534: LD_VAR 0 6
40538: PUSH
40539: LD_INT 2
40541: EQUAL
40542: AND
40543: OR
40544: IFFALSE 40554
// mode = 0 ;
40546: LD_ADDR_VAR 0 6
40550: PUSH
40551: LD_INT 0
40553: ST_TO_ADDR
// case mode of 0 :
40554: LD_VAR 0 6
40558: PUSH
40559: LD_INT 0
40561: DOUBLE
40562: EQUAL
40563: IFTRUE 40567
40565: GO 52020
40567: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40568: LD_ADDR_VAR 0 11
40572: PUSH
40573: LD_INT 0
40575: PUSH
40576: LD_INT 0
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: PUSH
40583: LD_INT 0
40585: PUSH
40586: LD_INT 1
40588: NEG
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: PUSH
40594: LD_INT 1
40596: PUSH
40597: LD_INT 0
40599: PUSH
40600: EMPTY
40601: LIST
40602: LIST
40603: PUSH
40604: LD_INT 1
40606: PUSH
40607: LD_INT 1
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: PUSH
40614: LD_INT 0
40616: PUSH
40617: LD_INT 1
40619: PUSH
40620: EMPTY
40621: LIST
40622: LIST
40623: PUSH
40624: LD_INT 1
40626: NEG
40627: PUSH
40628: LD_INT 0
40630: PUSH
40631: EMPTY
40632: LIST
40633: LIST
40634: PUSH
40635: LD_INT 1
40637: NEG
40638: PUSH
40639: LD_INT 1
40641: NEG
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: PUSH
40647: LD_INT 1
40649: NEG
40650: PUSH
40651: LD_INT 2
40653: NEG
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: PUSH
40659: LD_INT 0
40661: PUSH
40662: LD_INT 2
40664: NEG
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: PUSH
40670: LD_INT 1
40672: PUSH
40673: LD_INT 1
40675: NEG
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: PUSH
40681: LD_INT 1
40683: PUSH
40684: LD_INT 2
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: PUSH
40691: LD_INT 0
40693: PUSH
40694: LD_INT 2
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 1
40703: NEG
40704: PUSH
40705: LD_INT 1
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: PUSH
40712: LD_INT 1
40714: PUSH
40715: LD_INT 3
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: PUSH
40722: LD_INT 0
40724: PUSH
40725: LD_INT 3
40727: PUSH
40728: EMPTY
40729: LIST
40730: LIST
40731: PUSH
40732: LD_INT 1
40734: NEG
40735: PUSH
40736: LD_INT 2
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: PUSH
40743: EMPTY
40744: LIST
40745: LIST
40746: LIST
40747: LIST
40748: LIST
40749: LIST
40750: LIST
40751: LIST
40752: LIST
40753: LIST
40754: LIST
40755: LIST
40756: LIST
40757: LIST
40758: LIST
40759: LIST
40760: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40761: LD_ADDR_VAR 0 12
40765: PUSH
40766: LD_INT 0
40768: PUSH
40769: LD_INT 0
40771: PUSH
40772: EMPTY
40773: LIST
40774: LIST
40775: PUSH
40776: LD_INT 0
40778: PUSH
40779: LD_INT 1
40781: NEG
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: PUSH
40787: LD_INT 1
40789: PUSH
40790: LD_INT 0
40792: PUSH
40793: EMPTY
40794: LIST
40795: LIST
40796: PUSH
40797: LD_INT 1
40799: PUSH
40800: LD_INT 1
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: PUSH
40807: LD_INT 0
40809: PUSH
40810: LD_INT 1
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: PUSH
40817: LD_INT 1
40819: NEG
40820: PUSH
40821: LD_INT 0
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: PUSH
40828: LD_INT 1
40830: NEG
40831: PUSH
40832: LD_INT 1
40834: NEG
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PUSH
40840: LD_INT 1
40842: PUSH
40843: LD_INT 1
40845: NEG
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PUSH
40851: LD_INT 2
40853: PUSH
40854: LD_INT 0
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PUSH
40861: LD_INT 2
40863: PUSH
40864: LD_INT 1
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 1
40873: NEG
40874: PUSH
40875: LD_INT 1
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PUSH
40882: LD_INT 2
40884: NEG
40885: PUSH
40886: LD_INT 0
40888: PUSH
40889: EMPTY
40890: LIST
40891: LIST
40892: PUSH
40893: LD_INT 2
40895: NEG
40896: PUSH
40897: LD_INT 1
40899: NEG
40900: PUSH
40901: EMPTY
40902: LIST
40903: LIST
40904: PUSH
40905: LD_INT 2
40907: NEG
40908: PUSH
40909: LD_INT 1
40911: PUSH
40912: EMPTY
40913: LIST
40914: LIST
40915: PUSH
40916: LD_INT 3
40918: NEG
40919: PUSH
40920: LD_INT 0
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: PUSH
40927: LD_INT 3
40929: NEG
40930: PUSH
40931: LD_INT 1
40933: NEG
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: LIST
40943: LIST
40944: LIST
40945: LIST
40946: LIST
40947: LIST
40948: LIST
40949: LIST
40950: LIST
40951: LIST
40952: LIST
40953: LIST
40954: LIST
40955: LIST
40956: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40957: LD_ADDR_VAR 0 13
40961: PUSH
40962: LD_INT 0
40964: PUSH
40965: LD_INT 0
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: PUSH
40972: LD_INT 0
40974: PUSH
40975: LD_INT 1
40977: NEG
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: PUSH
40983: LD_INT 1
40985: PUSH
40986: LD_INT 0
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 1
40995: PUSH
40996: LD_INT 1
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: PUSH
41003: LD_INT 0
41005: PUSH
41006: LD_INT 1
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: PUSH
41013: LD_INT 1
41015: NEG
41016: PUSH
41017: LD_INT 0
41019: PUSH
41020: EMPTY
41021: LIST
41022: LIST
41023: PUSH
41024: LD_INT 1
41026: NEG
41027: PUSH
41028: LD_INT 1
41030: NEG
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: PUSH
41036: LD_INT 1
41038: NEG
41039: PUSH
41040: LD_INT 2
41042: NEG
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: PUSH
41048: LD_INT 2
41050: PUSH
41051: LD_INT 1
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: PUSH
41058: LD_INT 2
41060: PUSH
41061: LD_INT 2
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: PUSH
41068: LD_INT 1
41070: PUSH
41071: LD_INT 2
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: PUSH
41078: LD_INT 2
41080: NEG
41081: PUSH
41082: LD_INT 1
41084: NEG
41085: PUSH
41086: EMPTY
41087: LIST
41088: LIST
41089: PUSH
41090: LD_INT 2
41092: NEG
41093: PUSH
41094: LD_INT 2
41096: NEG
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: PUSH
41102: LD_INT 2
41104: NEG
41105: PUSH
41106: LD_INT 3
41108: NEG
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: PUSH
41114: LD_INT 3
41116: NEG
41117: PUSH
41118: LD_INT 2
41120: NEG
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: PUSH
41126: LD_INT 3
41128: NEG
41129: PUSH
41130: LD_INT 3
41132: NEG
41133: PUSH
41134: EMPTY
41135: LIST
41136: LIST
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: LIST
41142: LIST
41143: LIST
41144: LIST
41145: LIST
41146: LIST
41147: LIST
41148: LIST
41149: LIST
41150: LIST
41151: LIST
41152: LIST
41153: LIST
41154: LIST
41155: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41156: LD_ADDR_VAR 0 14
41160: PUSH
41161: LD_INT 0
41163: PUSH
41164: LD_INT 0
41166: PUSH
41167: EMPTY
41168: LIST
41169: LIST
41170: PUSH
41171: LD_INT 0
41173: PUSH
41174: LD_INT 1
41176: NEG
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: PUSH
41182: LD_INT 1
41184: PUSH
41185: LD_INT 0
41187: PUSH
41188: EMPTY
41189: LIST
41190: LIST
41191: PUSH
41192: LD_INT 1
41194: PUSH
41195: LD_INT 1
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: PUSH
41202: LD_INT 0
41204: PUSH
41205: LD_INT 1
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: PUSH
41212: LD_INT 1
41214: NEG
41215: PUSH
41216: LD_INT 0
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PUSH
41223: LD_INT 1
41225: NEG
41226: PUSH
41227: LD_INT 1
41229: NEG
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: PUSH
41235: LD_INT 1
41237: NEG
41238: PUSH
41239: LD_INT 2
41241: NEG
41242: PUSH
41243: EMPTY
41244: LIST
41245: LIST
41246: PUSH
41247: LD_INT 0
41249: PUSH
41250: LD_INT 2
41252: NEG
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: PUSH
41258: LD_INT 1
41260: PUSH
41261: LD_INT 1
41263: NEG
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: PUSH
41269: LD_INT 1
41271: PUSH
41272: LD_INT 2
41274: PUSH
41275: EMPTY
41276: LIST
41277: LIST
41278: PUSH
41279: LD_INT 0
41281: PUSH
41282: LD_INT 2
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: LD_INT 1
41291: NEG
41292: PUSH
41293: LD_INT 1
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: PUSH
41300: LD_INT 1
41302: NEG
41303: PUSH
41304: LD_INT 3
41306: NEG
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: PUSH
41312: LD_INT 0
41314: PUSH
41315: LD_INT 3
41317: NEG
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: PUSH
41323: LD_INT 1
41325: PUSH
41326: LD_INT 2
41328: NEG
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: LIST
41343: LIST
41344: LIST
41345: LIST
41346: LIST
41347: LIST
41348: LIST
41349: LIST
41350: LIST
41351: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41352: LD_ADDR_VAR 0 15
41356: PUSH
41357: LD_INT 0
41359: PUSH
41360: LD_INT 0
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: PUSH
41367: LD_INT 0
41369: PUSH
41370: LD_INT 1
41372: NEG
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: PUSH
41378: LD_INT 1
41380: PUSH
41381: LD_INT 0
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: PUSH
41388: LD_INT 1
41390: PUSH
41391: LD_INT 1
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PUSH
41398: LD_INT 0
41400: PUSH
41401: LD_INT 1
41403: PUSH
41404: EMPTY
41405: LIST
41406: LIST
41407: PUSH
41408: LD_INT 1
41410: NEG
41411: PUSH
41412: LD_INT 0
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PUSH
41419: LD_INT 1
41421: NEG
41422: PUSH
41423: LD_INT 1
41425: NEG
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: PUSH
41431: LD_INT 1
41433: PUSH
41434: LD_INT 1
41436: NEG
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: PUSH
41442: LD_INT 2
41444: PUSH
41445: LD_INT 0
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: PUSH
41452: LD_INT 2
41454: PUSH
41455: LD_INT 1
41457: PUSH
41458: EMPTY
41459: LIST
41460: LIST
41461: PUSH
41462: LD_INT 1
41464: NEG
41465: PUSH
41466: LD_INT 1
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: PUSH
41473: LD_INT 2
41475: NEG
41476: PUSH
41477: LD_INT 0
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: LD_INT 2
41486: NEG
41487: PUSH
41488: LD_INT 1
41490: NEG
41491: PUSH
41492: EMPTY
41493: LIST
41494: LIST
41495: PUSH
41496: LD_INT 2
41498: PUSH
41499: LD_INT 1
41501: NEG
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: PUSH
41507: LD_INT 3
41509: PUSH
41510: LD_INT 0
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: PUSH
41517: LD_INT 3
41519: PUSH
41520: LD_INT 1
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: PUSH
41527: EMPTY
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: LIST
41540: LIST
41541: LIST
41542: LIST
41543: LIST
41544: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41545: LD_ADDR_VAR 0 16
41549: PUSH
41550: LD_INT 0
41552: PUSH
41553: LD_INT 0
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: LD_INT 0
41562: PUSH
41563: LD_INT 1
41565: NEG
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: PUSH
41571: LD_INT 1
41573: PUSH
41574: LD_INT 0
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: LD_INT 1
41583: PUSH
41584: LD_INT 1
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 0
41593: PUSH
41594: LD_INT 1
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: PUSH
41601: LD_INT 1
41603: NEG
41604: PUSH
41605: LD_INT 0
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: LD_INT 1
41614: NEG
41615: PUSH
41616: LD_INT 1
41618: NEG
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: PUSH
41624: LD_INT 1
41626: NEG
41627: PUSH
41628: LD_INT 2
41630: NEG
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PUSH
41636: LD_INT 2
41638: PUSH
41639: LD_INT 1
41641: PUSH
41642: EMPTY
41643: LIST
41644: LIST
41645: PUSH
41646: LD_INT 2
41648: PUSH
41649: LD_INT 2
41651: PUSH
41652: EMPTY
41653: LIST
41654: LIST
41655: PUSH
41656: LD_INT 1
41658: PUSH
41659: LD_INT 2
41661: PUSH
41662: EMPTY
41663: LIST
41664: LIST
41665: PUSH
41666: LD_INT 2
41668: NEG
41669: PUSH
41670: LD_INT 1
41672: NEG
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PUSH
41678: LD_INT 2
41680: NEG
41681: PUSH
41682: LD_INT 2
41684: NEG
41685: PUSH
41686: EMPTY
41687: LIST
41688: LIST
41689: PUSH
41690: LD_INT 3
41692: PUSH
41693: LD_INT 2
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: LD_INT 3
41702: PUSH
41703: LD_INT 3
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: PUSH
41710: LD_INT 2
41712: PUSH
41713: LD_INT 3
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PUSH
41720: EMPTY
41721: LIST
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: LIST
41732: LIST
41733: LIST
41734: LIST
41735: LIST
41736: LIST
41737: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41738: LD_ADDR_VAR 0 17
41742: PUSH
41743: LD_INT 0
41745: PUSH
41746: LD_INT 0
41748: PUSH
41749: EMPTY
41750: LIST
41751: LIST
41752: PUSH
41753: LD_INT 0
41755: PUSH
41756: LD_INT 1
41758: NEG
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: PUSH
41764: LD_INT 1
41766: PUSH
41767: LD_INT 0
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: PUSH
41774: LD_INT 1
41776: PUSH
41777: LD_INT 1
41779: PUSH
41780: EMPTY
41781: LIST
41782: LIST
41783: PUSH
41784: LD_INT 0
41786: PUSH
41787: LD_INT 1
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: PUSH
41794: LD_INT 1
41796: NEG
41797: PUSH
41798: LD_INT 0
41800: PUSH
41801: EMPTY
41802: LIST
41803: LIST
41804: PUSH
41805: LD_INT 1
41807: NEG
41808: PUSH
41809: LD_INT 1
41811: NEG
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: PUSH
41817: LD_INT 1
41819: NEG
41820: PUSH
41821: LD_INT 2
41823: NEG
41824: PUSH
41825: EMPTY
41826: LIST
41827: LIST
41828: PUSH
41829: LD_INT 0
41831: PUSH
41832: LD_INT 2
41834: NEG
41835: PUSH
41836: EMPTY
41837: LIST
41838: LIST
41839: PUSH
41840: LD_INT 1
41842: PUSH
41843: LD_INT 1
41845: NEG
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: PUSH
41851: LD_INT 2
41853: PUSH
41854: LD_INT 0
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: LD_INT 2
41863: PUSH
41864: LD_INT 1
41866: PUSH
41867: EMPTY
41868: LIST
41869: LIST
41870: PUSH
41871: LD_INT 2
41873: PUSH
41874: LD_INT 2
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: LD_INT 1
41883: PUSH
41884: LD_INT 2
41886: PUSH
41887: EMPTY
41888: LIST
41889: LIST
41890: PUSH
41891: LD_INT 0
41893: PUSH
41894: LD_INT 2
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: PUSH
41901: LD_INT 1
41903: NEG
41904: PUSH
41905: LD_INT 1
41907: PUSH
41908: EMPTY
41909: LIST
41910: LIST
41911: PUSH
41912: LD_INT 2
41914: NEG
41915: PUSH
41916: LD_INT 0
41918: PUSH
41919: EMPTY
41920: LIST
41921: LIST
41922: PUSH
41923: LD_INT 2
41925: NEG
41926: PUSH
41927: LD_INT 1
41929: NEG
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: PUSH
41935: LD_INT 2
41937: NEG
41938: PUSH
41939: LD_INT 2
41941: NEG
41942: PUSH
41943: EMPTY
41944: LIST
41945: LIST
41946: PUSH
41947: EMPTY
41948: LIST
41949: LIST
41950: LIST
41951: LIST
41952: LIST
41953: LIST
41954: LIST
41955: LIST
41956: LIST
41957: LIST
41958: LIST
41959: LIST
41960: LIST
41961: LIST
41962: LIST
41963: LIST
41964: LIST
41965: LIST
41966: LIST
41967: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41968: LD_ADDR_VAR 0 18
41972: PUSH
41973: LD_INT 0
41975: PUSH
41976: LD_INT 0
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: PUSH
41983: LD_INT 0
41985: PUSH
41986: LD_INT 1
41988: NEG
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: PUSH
41994: LD_INT 1
41996: PUSH
41997: LD_INT 0
41999: PUSH
42000: EMPTY
42001: LIST
42002: LIST
42003: PUSH
42004: LD_INT 1
42006: PUSH
42007: LD_INT 1
42009: PUSH
42010: EMPTY
42011: LIST
42012: LIST
42013: PUSH
42014: LD_INT 0
42016: PUSH
42017: LD_INT 1
42019: PUSH
42020: EMPTY
42021: LIST
42022: LIST
42023: PUSH
42024: LD_INT 1
42026: NEG
42027: PUSH
42028: LD_INT 0
42030: PUSH
42031: EMPTY
42032: LIST
42033: LIST
42034: PUSH
42035: LD_INT 1
42037: NEG
42038: PUSH
42039: LD_INT 1
42041: NEG
42042: PUSH
42043: EMPTY
42044: LIST
42045: LIST
42046: PUSH
42047: LD_INT 1
42049: NEG
42050: PUSH
42051: LD_INT 2
42053: NEG
42054: PUSH
42055: EMPTY
42056: LIST
42057: LIST
42058: PUSH
42059: LD_INT 0
42061: PUSH
42062: LD_INT 2
42064: NEG
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: PUSH
42070: LD_INT 1
42072: PUSH
42073: LD_INT 1
42075: NEG
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: PUSH
42081: LD_INT 2
42083: PUSH
42084: LD_INT 0
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: PUSH
42091: LD_INT 2
42093: PUSH
42094: LD_INT 1
42096: PUSH
42097: EMPTY
42098: LIST
42099: LIST
42100: PUSH
42101: LD_INT 2
42103: PUSH
42104: LD_INT 2
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: PUSH
42111: LD_INT 1
42113: PUSH
42114: LD_INT 2
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: PUSH
42121: LD_INT 0
42123: PUSH
42124: LD_INT 2
42126: PUSH
42127: EMPTY
42128: LIST
42129: LIST
42130: PUSH
42131: LD_INT 1
42133: NEG
42134: PUSH
42135: LD_INT 1
42137: PUSH
42138: EMPTY
42139: LIST
42140: LIST
42141: PUSH
42142: LD_INT 2
42144: NEG
42145: PUSH
42146: LD_INT 0
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: PUSH
42153: LD_INT 2
42155: NEG
42156: PUSH
42157: LD_INT 1
42159: NEG
42160: PUSH
42161: EMPTY
42162: LIST
42163: LIST
42164: PUSH
42165: LD_INT 2
42167: NEG
42168: PUSH
42169: LD_INT 2
42171: NEG
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: LIST
42181: LIST
42182: LIST
42183: LIST
42184: LIST
42185: LIST
42186: LIST
42187: LIST
42188: LIST
42189: LIST
42190: LIST
42191: LIST
42192: LIST
42193: LIST
42194: LIST
42195: LIST
42196: LIST
42197: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42198: LD_ADDR_VAR 0 19
42202: PUSH
42203: LD_INT 0
42205: PUSH
42206: LD_INT 0
42208: PUSH
42209: EMPTY
42210: LIST
42211: LIST
42212: PUSH
42213: LD_INT 0
42215: PUSH
42216: LD_INT 1
42218: NEG
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: PUSH
42224: LD_INT 1
42226: PUSH
42227: LD_INT 0
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: PUSH
42234: LD_INT 1
42236: PUSH
42237: LD_INT 1
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 0
42246: PUSH
42247: LD_INT 1
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: PUSH
42254: LD_INT 1
42256: NEG
42257: PUSH
42258: LD_INT 0
42260: PUSH
42261: EMPTY
42262: LIST
42263: LIST
42264: PUSH
42265: LD_INT 1
42267: NEG
42268: PUSH
42269: LD_INT 1
42271: NEG
42272: PUSH
42273: EMPTY
42274: LIST
42275: LIST
42276: PUSH
42277: LD_INT 1
42279: NEG
42280: PUSH
42281: LD_INT 2
42283: NEG
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 0
42291: PUSH
42292: LD_INT 2
42294: NEG
42295: PUSH
42296: EMPTY
42297: LIST
42298: LIST
42299: PUSH
42300: LD_INT 1
42302: PUSH
42303: LD_INT 1
42305: NEG
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: PUSH
42311: LD_INT 2
42313: PUSH
42314: LD_INT 0
42316: PUSH
42317: EMPTY
42318: LIST
42319: LIST
42320: PUSH
42321: LD_INT 2
42323: PUSH
42324: LD_INT 1
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PUSH
42331: LD_INT 2
42333: PUSH
42334: LD_INT 2
42336: PUSH
42337: EMPTY
42338: LIST
42339: LIST
42340: PUSH
42341: LD_INT 1
42343: PUSH
42344: LD_INT 2
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: PUSH
42351: LD_INT 0
42353: PUSH
42354: LD_INT 2
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: PUSH
42361: LD_INT 1
42363: NEG
42364: PUSH
42365: LD_INT 1
42367: PUSH
42368: EMPTY
42369: LIST
42370: LIST
42371: PUSH
42372: LD_INT 2
42374: NEG
42375: PUSH
42376: LD_INT 0
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: LD_INT 2
42385: NEG
42386: PUSH
42387: LD_INT 1
42389: NEG
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: PUSH
42395: LD_INT 2
42397: NEG
42398: PUSH
42399: LD_INT 2
42401: NEG
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: LIST
42411: LIST
42412: LIST
42413: LIST
42414: LIST
42415: LIST
42416: LIST
42417: LIST
42418: LIST
42419: LIST
42420: LIST
42421: LIST
42422: LIST
42423: LIST
42424: LIST
42425: LIST
42426: LIST
42427: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42428: LD_ADDR_VAR 0 20
42432: PUSH
42433: LD_INT 0
42435: PUSH
42436: LD_INT 0
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: LD_INT 0
42445: PUSH
42446: LD_INT 1
42448: NEG
42449: PUSH
42450: EMPTY
42451: LIST
42452: LIST
42453: PUSH
42454: LD_INT 1
42456: PUSH
42457: LD_INT 0
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PUSH
42464: LD_INT 1
42466: PUSH
42467: LD_INT 1
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: PUSH
42474: LD_INT 0
42476: PUSH
42477: LD_INT 1
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: PUSH
42484: LD_INT 1
42486: NEG
42487: PUSH
42488: LD_INT 0
42490: PUSH
42491: EMPTY
42492: LIST
42493: LIST
42494: PUSH
42495: LD_INT 1
42497: NEG
42498: PUSH
42499: LD_INT 1
42501: NEG
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: PUSH
42507: LD_INT 1
42509: NEG
42510: PUSH
42511: LD_INT 2
42513: NEG
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: PUSH
42519: LD_INT 0
42521: PUSH
42522: LD_INT 2
42524: NEG
42525: PUSH
42526: EMPTY
42527: LIST
42528: LIST
42529: PUSH
42530: LD_INT 1
42532: PUSH
42533: LD_INT 1
42535: NEG
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: PUSH
42541: LD_INT 2
42543: PUSH
42544: LD_INT 0
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: PUSH
42551: LD_INT 2
42553: PUSH
42554: LD_INT 1
42556: PUSH
42557: EMPTY
42558: LIST
42559: LIST
42560: PUSH
42561: LD_INT 2
42563: PUSH
42564: LD_INT 2
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: PUSH
42571: LD_INT 1
42573: PUSH
42574: LD_INT 2
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: PUSH
42581: LD_INT 0
42583: PUSH
42584: LD_INT 2
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: PUSH
42591: LD_INT 1
42593: NEG
42594: PUSH
42595: LD_INT 1
42597: PUSH
42598: EMPTY
42599: LIST
42600: LIST
42601: PUSH
42602: LD_INT 2
42604: NEG
42605: PUSH
42606: LD_INT 0
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: LD_INT 2
42615: NEG
42616: PUSH
42617: LD_INT 1
42619: NEG
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: PUSH
42625: LD_INT 2
42627: NEG
42628: PUSH
42629: LD_INT 2
42631: NEG
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: LIST
42641: LIST
42642: LIST
42643: LIST
42644: LIST
42645: LIST
42646: LIST
42647: LIST
42648: LIST
42649: LIST
42650: LIST
42651: LIST
42652: LIST
42653: LIST
42654: LIST
42655: LIST
42656: LIST
42657: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42658: LD_ADDR_VAR 0 21
42662: PUSH
42663: LD_INT 0
42665: PUSH
42666: LD_INT 0
42668: PUSH
42669: EMPTY
42670: LIST
42671: LIST
42672: PUSH
42673: LD_INT 0
42675: PUSH
42676: LD_INT 1
42678: NEG
42679: PUSH
42680: EMPTY
42681: LIST
42682: LIST
42683: PUSH
42684: LD_INT 1
42686: PUSH
42687: LD_INT 0
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: PUSH
42694: LD_INT 1
42696: PUSH
42697: LD_INT 1
42699: PUSH
42700: EMPTY
42701: LIST
42702: LIST
42703: PUSH
42704: LD_INT 0
42706: PUSH
42707: LD_INT 1
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: PUSH
42714: LD_INT 1
42716: NEG
42717: PUSH
42718: LD_INT 0
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: PUSH
42725: LD_INT 1
42727: NEG
42728: PUSH
42729: LD_INT 1
42731: NEG
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 1
42739: NEG
42740: PUSH
42741: LD_INT 2
42743: NEG
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: PUSH
42749: LD_INT 0
42751: PUSH
42752: LD_INT 2
42754: NEG
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PUSH
42760: LD_INT 1
42762: PUSH
42763: LD_INT 1
42765: NEG
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: LD_INT 2
42773: PUSH
42774: LD_INT 0
42776: PUSH
42777: EMPTY
42778: LIST
42779: LIST
42780: PUSH
42781: LD_INT 2
42783: PUSH
42784: LD_INT 1
42786: PUSH
42787: EMPTY
42788: LIST
42789: LIST
42790: PUSH
42791: LD_INT 2
42793: PUSH
42794: LD_INT 2
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: PUSH
42801: LD_INT 1
42803: PUSH
42804: LD_INT 2
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: PUSH
42811: LD_INT 0
42813: PUSH
42814: LD_INT 2
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: LD_INT 1
42823: NEG
42824: PUSH
42825: LD_INT 1
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: PUSH
42832: LD_INT 2
42834: NEG
42835: PUSH
42836: LD_INT 0
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: PUSH
42843: LD_INT 2
42845: NEG
42846: PUSH
42847: LD_INT 1
42849: NEG
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: LD_INT 2
42857: NEG
42858: PUSH
42859: LD_INT 2
42861: NEG
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: LIST
42871: LIST
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: LIST
42880: LIST
42881: LIST
42882: LIST
42883: LIST
42884: LIST
42885: LIST
42886: LIST
42887: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42888: LD_ADDR_VAR 0 22
42892: PUSH
42893: LD_INT 0
42895: PUSH
42896: LD_INT 0
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: LD_INT 0
42905: PUSH
42906: LD_INT 1
42908: NEG
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: PUSH
42914: LD_INT 1
42916: PUSH
42917: LD_INT 0
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: PUSH
42924: LD_INT 1
42926: PUSH
42927: LD_INT 1
42929: PUSH
42930: EMPTY
42931: LIST
42932: LIST
42933: PUSH
42934: LD_INT 0
42936: PUSH
42937: LD_INT 1
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: PUSH
42944: LD_INT 1
42946: NEG
42947: PUSH
42948: LD_INT 0
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: PUSH
42955: LD_INT 1
42957: NEG
42958: PUSH
42959: LD_INT 1
42961: NEG
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: PUSH
42967: LD_INT 1
42969: NEG
42970: PUSH
42971: LD_INT 2
42973: NEG
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: PUSH
42979: LD_INT 0
42981: PUSH
42982: LD_INT 2
42984: NEG
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: PUSH
42990: LD_INT 1
42992: PUSH
42993: LD_INT 1
42995: NEG
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: PUSH
43001: LD_INT 2
43003: PUSH
43004: LD_INT 0
43006: PUSH
43007: EMPTY
43008: LIST
43009: LIST
43010: PUSH
43011: LD_INT 2
43013: PUSH
43014: LD_INT 1
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: PUSH
43021: LD_INT 2
43023: PUSH
43024: LD_INT 2
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: PUSH
43031: LD_INT 1
43033: PUSH
43034: LD_INT 2
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: PUSH
43041: LD_INT 0
43043: PUSH
43044: LD_INT 2
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: PUSH
43051: LD_INT 1
43053: NEG
43054: PUSH
43055: LD_INT 1
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: PUSH
43062: LD_INT 2
43064: NEG
43065: PUSH
43066: LD_INT 0
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 2
43075: NEG
43076: PUSH
43077: LD_INT 1
43079: NEG
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: PUSH
43085: LD_INT 2
43087: NEG
43088: PUSH
43089: LD_INT 2
43091: NEG
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43118: LD_ADDR_VAR 0 23
43122: PUSH
43123: LD_INT 0
43125: PUSH
43126: LD_INT 0
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 0
43135: PUSH
43136: LD_INT 1
43138: NEG
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PUSH
43144: LD_INT 1
43146: PUSH
43147: LD_INT 0
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 1
43156: PUSH
43157: LD_INT 1
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 0
43166: PUSH
43167: LD_INT 1
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 1
43176: NEG
43177: PUSH
43178: LD_INT 0
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 1
43187: NEG
43188: PUSH
43189: LD_INT 1
43191: NEG
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PUSH
43197: LD_INT 1
43199: NEG
43200: PUSH
43201: LD_INT 2
43203: NEG
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: PUSH
43209: LD_INT 0
43211: PUSH
43212: LD_INT 2
43214: NEG
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: LD_INT 1
43222: PUSH
43223: LD_INT 1
43225: NEG
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: PUSH
43231: LD_INT 2
43233: PUSH
43234: LD_INT 0
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: PUSH
43241: LD_INT 2
43243: PUSH
43244: LD_INT 1
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: LD_INT 2
43253: PUSH
43254: LD_INT 2
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: LD_INT 1
43263: PUSH
43264: LD_INT 2
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: LD_INT 0
43273: PUSH
43274: LD_INT 2
43276: PUSH
43277: EMPTY
43278: LIST
43279: LIST
43280: PUSH
43281: LD_INT 1
43283: NEG
43284: PUSH
43285: LD_INT 1
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: LD_INT 2
43294: NEG
43295: PUSH
43296: LD_INT 0
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 2
43305: NEG
43306: PUSH
43307: LD_INT 1
43309: NEG
43310: PUSH
43311: EMPTY
43312: LIST
43313: LIST
43314: PUSH
43315: LD_INT 2
43317: NEG
43318: PUSH
43319: LD_INT 2
43321: NEG
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: PUSH
43327: LD_INT 2
43329: NEG
43330: PUSH
43331: LD_INT 3
43333: NEG
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: PUSH
43339: LD_INT 1
43341: NEG
43342: PUSH
43343: LD_INT 3
43345: NEG
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 1
43353: PUSH
43354: LD_INT 2
43356: NEG
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: PUSH
43362: LD_INT 2
43364: PUSH
43365: LD_INT 1
43367: NEG
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: LIST
43377: LIST
43378: LIST
43379: LIST
43380: LIST
43381: LIST
43382: LIST
43383: LIST
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
43398: LD_ADDR_VAR 0 24
43402: PUSH
43403: LD_INT 0
43405: PUSH
43406: LD_INT 0
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PUSH
43413: LD_INT 0
43415: PUSH
43416: LD_INT 1
43418: NEG
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: PUSH
43424: LD_INT 1
43426: PUSH
43427: LD_INT 0
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: PUSH
43434: LD_INT 1
43436: PUSH
43437: LD_INT 1
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: LD_INT 0
43446: PUSH
43447: LD_INT 1
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: LD_INT 1
43456: NEG
43457: PUSH
43458: LD_INT 0
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PUSH
43465: LD_INT 1
43467: NEG
43468: PUSH
43469: LD_INT 1
43471: NEG
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: LD_INT 1
43479: NEG
43480: PUSH
43481: LD_INT 2
43483: NEG
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: LD_INT 0
43491: PUSH
43492: LD_INT 2
43494: NEG
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: PUSH
43500: LD_INT 1
43502: PUSH
43503: LD_INT 1
43505: NEG
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 2
43513: PUSH
43514: LD_INT 0
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: PUSH
43521: LD_INT 2
43523: PUSH
43524: LD_INT 1
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: PUSH
43531: LD_INT 2
43533: PUSH
43534: LD_INT 2
43536: PUSH
43537: EMPTY
43538: LIST
43539: LIST
43540: PUSH
43541: LD_INT 1
43543: PUSH
43544: LD_INT 2
43546: PUSH
43547: EMPTY
43548: LIST
43549: LIST
43550: PUSH
43551: LD_INT 0
43553: PUSH
43554: LD_INT 2
43556: PUSH
43557: EMPTY
43558: LIST
43559: LIST
43560: PUSH
43561: LD_INT 1
43563: NEG
43564: PUSH
43565: LD_INT 1
43567: PUSH
43568: EMPTY
43569: LIST
43570: LIST
43571: PUSH
43572: LD_INT 2
43574: NEG
43575: PUSH
43576: LD_INT 0
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: PUSH
43583: LD_INT 2
43585: NEG
43586: PUSH
43587: LD_INT 1
43589: NEG
43590: PUSH
43591: EMPTY
43592: LIST
43593: LIST
43594: PUSH
43595: LD_INT 2
43597: NEG
43598: PUSH
43599: LD_INT 2
43601: NEG
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: LD_INT 1
43609: PUSH
43610: LD_INT 2
43612: NEG
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: PUSH
43618: LD_INT 2
43620: PUSH
43621: LD_INT 1
43623: NEG
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: PUSH
43629: LD_INT 3
43631: PUSH
43632: LD_INT 1
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PUSH
43639: LD_INT 3
43641: PUSH
43642: LD_INT 2
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PUSH
43649: EMPTY
43650: LIST
43651: LIST
43652: LIST
43653: LIST
43654: LIST
43655: LIST
43656: LIST
43657: LIST
43658: LIST
43659: LIST
43660: LIST
43661: LIST
43662: LIST
43663: LIST
43664: LIST
43665: LIST
43666: LIST
43667: LIST
43668: LIST
43669: LIST
43670: LIST
43671: LIST
43672: LIST
43673: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
43674: LD_ADDR_VAR 0 25
43678: PUSH
43679: LD_INT 0
43681: PUSH
43682: LD_INT 0
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: PUSH
43689: LD_INT 0
43691: PUSH
43692: LD_INT 1
43694: NEG
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: PUSH
43700: LD_INT 1
43702: PUSH
43703: LD_INT 0
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 1
43712: PUSH
43713: LD_INT 1
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 0
43722: PUSH
43723: LD_INT 1
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 1
43732: NEG
43733: PUSH
43734: LD_INT 0
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: PUSH
43741: LD_INT 1
43743: NEG
43744: PUSH
43745: LD_INT 1
43747: NEG
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: PUSH
43753: LD_INT 1
43755: NEG
43756: PUSH
43757: LD_INT 2
43759: NEG
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: PUSH
43765: LD_INT 0
43767: PUSH
43768: LD_INT 2
43770: NEG
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: LD_INT 1
43778: PUSH
43779: LD_INT 1
43781: NEG
43782: PUSH
43783: EMPTY
43784: LIST
43785: LIST
43786: PUSH
43787: LD_INT 2
43789: PUSH
43790: LD_INT 0
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: LD_INT 2
43799: PUSH
43800: LD_INT 1
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: PUSH
43807: LD_INT 2
43809: PUSH
43810: LD_INT 2
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: LD_INT 1
43819: PUSH
43820: LD_INT 2
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: PUSH
43827: LD_INT 0
43829: PUSH
43830: LD_INT 2
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: PUSH
43837: LD_INT 1
43839: NEG
43840: PUSH
43841: LD_INT 1
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: PUSH
43848: LD_INT 2
43850: NEG
43851: PUSH
43852: LD_INT 0
43854: PUSH
43855: EMPTY
43856: LIST
43857: LIST
43858: PUSH
43859: LD_INT 2
43861: NEG
43862: PUSH
43863: LD_INT 1
43865: NEG
43866: PUSH
43867: EMPTY
43868: LIST
43869: LIST
43870: PUSH
43871: LD_INT 2
43873: NEG
43874: PUSH
43875: LD_INT 2
43877: NEG
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: PUSH
43883: LD_INT 3
43885: PUSH
43886: LD_INT 1
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: PUSH
43893: LD_INT 3
43895: PUSH
43896: LD_INT 2
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 2
43905: PUSH
43906: LD_INT 3
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 1
43915: PUSH
43916: LD_INT 3
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: LIST
43927: LIST
43928: LIST
43929: LIST
43930: LIST
43931: LIST
43932: LIST
43933: LIST
43934: LIST
43935: LIST
43936: LIST
43937: LIST
43938: LIST
43939: LIST
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43948: LD_ADDR_VAR 0 26
43952: PUSH
43953: LD_INT 0
43955: PUSH
43956: LD_INT 0
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: LD_INT 0
43965: PUSH
43966: LD_INT 1
43968: NEG
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: PUSH
43974: LD_INT 1
43976: PUSH
43977: LD_INT 0
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: PUSH
43984: LD_INT 1
43986: PUSH
43987: LD_INT 1
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: LD_INT 0
43996: PUSH
43997: LD_INT 1
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 1
44006: NEG
44007: PUSH
44008: LD_INT 0
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: LD_INT 1
44017: NEG
44018: PUSH
44019: LD_INT 1
44021: NEG
44022: PUSH
44023: EMPTY
44024: LIST
44025: LIST
44026: PUSH
44027: LD_INT 1
44029: NEG
44030: PUSH
44031: LD_INT 2
44033: NEG
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: PUSH
44039: LD_INT 0
44041: PUSH
44042: LD_INT 2
44044: NEG
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: PUSH
44050: LD_INT 1
44052: PUSH
44053: LD_INT 1
44055: NEG
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 2
44063: PUSH
44064: LD_INT 0
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: LD_INT 2
44073: PUSH
44074: LD_INT 1
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 2
44083: PUSH
44084: LD_INT 2
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: LD_INT 1
44093: PUSH
44094: LD_INT 2
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 0
44103: PUSH
44104: LD_INT 2
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: LD_INT 1
44113: NEG
44114: PUSH
44115: LD_INT 1
44117: PUSH
44118: EMPTY
44119: LIST
44120: LIST
44121: PUSH
44122: LD_INT 2
44124: NEG
44125: PUSH
44126: LD_INT 0
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: LD_INT 2
44135: NEG
44136: PUSH
44137: LD_INT 1
44139: NEG
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: PUSH
44145: LD_INT 2
44147: NEG
44148: PUSH
44149: LD_INT 2
44151: NEG
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: PUSH
44157: LD_INT 2
44159: PUSH
44160: LD_INT 3
44162: PUSH
44163: EMPTY
44164: LIST
44165: LIST
44166: PUSH
44167: LD_INT 1
44169: PUSH
44170: LD_INT 3
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: PUSH
44177: LD_INT 1
44179: NEG
44180: PUSH
44181: LD_INT 2
44183: PUSH
44184: EMPTY
44185: LIST
44186: LIST
44187: PUSH
44188: LD_INT 2
44190: NEG
44191: PUSH
44192: LD_INT 1
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: LIST
44203: LIST
44204: LIST
44205: LIST
44206: LIST
44207: LIST
44208: LIST
44209: LIST
44210: LIST
44211: LIST
44212: LIST
44213: LIST
44214: LIST
44215: LIST
44216: LIST
44217: LIST
44218: LIST
44219: LIST
44220: LIST
44221: LIST
44222: LIST
44223: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44224: LD_ADDR_VAR 0 27
44228: PUSH
44229: LD_INT 0
44231: PUSH
44232: LD_INT 0
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: PUSH
44239: LD_INT 0
44241: PUSH
44242: LD_INT 1
44244: NEG
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PUSH
44250: LD_INT 1
44252: PUSH
44253: LD_INT 0
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_INT 1
44262: PUSH
44263: LD_INT 1
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: PUSH
44270: LD_INT 0
44272: PUSH
44273: LD_INT 1
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 1
44282: NEG
44283: PUSH
44284: LD_INT 0
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: LD_INT 1
44293: NEG
44294: PUSH
44295: LD_INT 1
44297: NEG
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 1
44305: NEG
44306: PUSH
44307: LD_INT 2
44309: NEG
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: LD_INT 0
44317: PUSH
44318: LD_INT 2
44320: NEG
44321: PUSH
44322: EMPTY
44323: LIST
44324: LIST
44325: PUSH
44326: LD_INT 1
44328: PUSH
44329: LD_INT 1
44331: NEG
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PUSH
44337: LD_INT 2
44339: PUSH
44340: LD_INT 0
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: PUSH
44347: LD_INT 2
44349: PUSH
44350: LD_INT 1
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 2
44359: PUSH
44360: LD_INT 2
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: LD_INT 1
44369: PUSH
44370: LD_INT 2
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 0
44379: PUSH
44380: LD_INT 2
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: PUSH
44387: LD_INT 1
44389: NEG
44390: PUSH
44391: LD_INT 1
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: PUSH
44398: LD_INT 2
44400: NEG
44401: PUSH
44402: LD_INT 0
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: LD_INT 2
44411: NEG
44412: PUSH
44413: LD_INT 1
44415: NEG
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PUSH
44421: LD_INT 2
44423: NEG
44424: PUSH
44425: LD_INT 2
44427: NEG
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: LD_INT 1
44435: NEG
44436: PUSH
44437: LD_INT 2
44439: PUSH
44440: EMPTY
44441: LIST
44442: LIST
44443: PUSH
44444: LD_INT 2
44446: NEG
44447: PUSH
44448: LD_INT 1
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: PUSH
44455: LD_INT 3
44457: NEG
44458: PUSH
44459: LD_INT 1
44461: NEG
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: LD_INT 3
44469: NEG
44470: PUSH
44471: LD_INT 2
44473: NEG
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: EMPTY
44480: LIST
44481: LIST
44482: LIST
44483: LIST
44484: LIST
44485: LIST
44486: LIST
44487: LIST
44488: LIST
44489: LIST
44490: LIST
44491: LIST
44492: LIST
44493: LIST
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44504: LD_ADDR_VAR 0 28
44508: PUSH
44509: LD_INT 0
44511: PUSH
44512: LD_INT 0
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 0
44521: PUSH
44522: LD_INT 1
44524: NEG
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: PUSH
44530: LD_INT 1
44532: PUSH
44533: LD_INT 0
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 1
44542: PUSH
44543: LD_INT 1
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 0
44552: PUSH
44553: LD_INT 1
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 1
44562: NEG
44563: PUSH
44564: LD_INT 0
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 1
44573: NEG
44574: PUSH
44575: LD_INT 1
44577: NEG
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 1
44585: NEG
44586: PUSH
44587: LD_INT 2
44589: NEG
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: LD_INT 0
44597: PUSH
44598: LD_INT 2
44600: NEG
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: LD_INT 1
44608: PUSH
44609: LD_INT 1
44611: NEG
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: PUSH
44617: LD_INT 2
44619: PUSH
44620: LD_INT 0
44622: PUSH
44623: EMPTY
44624: LIST
44625: LIST
44626: PUSH
44627: LD_INT 2
44629: PUSH
44630: LD_INT 1
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: PUSH
44637: LD_INT 2
44639: PUSH
44640: LD_INT 2
44642: PUSH
44643: EMPTY
44644: LIST
44645: LIST
44646: PUSH
44647: LD_INT 1
44649: PUSH
44650: LD_INT 2
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: PUSH
44657: LD_INT 0
44659: PUSH
44660: LD_INT 2
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: LD_INT 1
44669: NEG
44670: PUSH
44671: LD_INT 1
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 2
44680: NEG
44681: PUSH
44682: LD_INT 0
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 2
44691: NEG
44692: PUSH
44693: LD_INT 1
44695: NEG
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: LD_INT 2
44703: NEG
44704: PUSH
44705: LD_INT 2
44707: NEG
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: PUSH
44713: LD_INT 2
44715: NEG
44716: PUSH
44717: LD_INT 3
44719: NEG
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PUSH
44725: LD_INT 1
44727: NEG
44728: PUSH
44729: LD_INT 3
44731: NEG
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: LD_INT 3
44739: NEG
44740: PUSH
44741: LD_INT 1
44743: NEG
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: PUSH
44749: LD_INT 3
44751: NEG
44752: PUSH
44753: LD_INT 2
44755: NEG
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44786: LD_ADDR_VAR 0 29
44790: PUSH
44791: LD_INT 0
44793: PUSH
44794: LD_INT 0
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: LD_INT 0
44803: PUSH
44804: LD_INT 1
44806: NEG
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: LD_INT 1
44814: PUSH
44815: LD_INT 0
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: LD_INT 1
44824: PUSH
44825: LD_INT 1
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 0
44834: PUSH
44835: LD_INT 1
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 1
44844: NEG
44845: PUSH
44846: LD_INT 0
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 1
44855: NEG
44856: PUSH
44857: LD_INT 1
44859: NEG
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 1
44867: NEG
44868: PUSH
44869: LD_INT 2
44871: NEG
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 0
44879: PUSH
44880: LD_INT 2
44882: NEG
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: PUSH
44888: LD_INT 1
44890: PUSH
44891: LD_INT 1
44893: NEG
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 2
44901: PUSH
44902: LD_INT 0
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: LD_INT 2
44911: PUSH
44912: LD_INT 1
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 1
44921: PUSH
44922: LD_INT 2
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: PUSH
44929: LD_INT 0
44931: PUSH
44932: LD_INT 2
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 1
44941: NEG
44942: PUSH
44943: LD_INT 1
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 2
44952: NEG
44953: PUSH
44954: LD_INT 1
44956: NEG
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: LD_INT 2
44964: NEG
44965: PUSH
44966: LD_INT 2
44968: NEG
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: PUSH
44974: LD_INT 2
44976: NEG
44977: PUSH
44978: LD_INT 3
44980: NEG
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 2
44988: PUSH
44989: LD_INT 1
44991: NEG
44992: PUSH
44993: EMPTY
44994: LIST
44995: LIST
44996: PUSH
44997: LD_INT 3
44999: PUSH
45000: LD_INT 1
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: LD_INT 1
45009: PUSH
45010: LD_INT 3
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: LD_INT 1
45019: NEG
45020: PUSH
45021: LD_INT 2
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: LD_INT 3
45030: NEG
45031: PUSH
45032: LD_INT 2
45034: NEG
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: LIST
45044: LIST
45045: LIST
45046: LIST
45047: LIST
45048: LIST
45049: LIST
45050: LIST
45051: LIST
45052: LIST
45053: LIST
45054: LIST
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45065: LD_ADDR_VAR 0 30
45069: PUSH
45070: LD_INT 0
45072: PUSH
45073: LD_INT 0
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: PUSH
45080: LD_INT 0
45082: PUSH
45083: LD_INT 1
45085: NEG
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: PUSH
45091: LD_INT 1
45093: PUSH
45094: LD_INT 0
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: PUSH
45101: LD_INT 1
45103: PUSH
45104: LD_INT 1
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 0
45113: PUSH
45114: LD_INT 1
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_INT 1
45123: NEG
45124: PUSH
45125: LD_INT 0
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: PUSH
45132: LD_INT 1
45134: NEG
45135: PUSH
45136: LD_INT 1
45138: NEG
45139: PUSH
45140: EMPTY
45141: LIST
45142: LIST
45143: PUSH
45144: LD_INT 1
45146: NEG
45147: PUSH
45148: LD_INT 2
45150: NEG
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: LD_INT 0
45158: PUSH
45159: LD_INT 2
45161: NEG
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: LD_INT 1
45169: PUSH
45170: LD_INT 1
45172: NEG
45173: PUSH
45174: EMPTY
45175: LIST
45176: LIST
45177: PUSH
45178: LD_INT 2
45180: PUSH
45181: LD_INT 0
45183: PUSH
45184: EMPTY
45185: LIST
45186: LIST
45187: PUSH
45188: LD_INT 2
45190: PUSH
45191: LD_INT 1
45193: PUSH
45194: EMPTY
45195: LIST
45196: LIST
45197: PUSH
45198: LD_INT 2
45200: PUSH
45201: LD_INT 2
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: PUSH
45208: LD_INT 1
45210: PUSH
45211: LD_INT 2
45213: PUSH
45214: EMPTY
45215: LIST
45216: LIST
45217: PUSH
45218: LD_INT 1
45220: NEG
45221: PUSH
45222: LD_INT 1
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: PUSH
45229: LD_INT 2
45231: NEG
45232: PUSH
45233: LD_INT 0
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: PUSH
45240: LD_INT 2
45242: NEG
45243: PUSH
45244: LD_INT 1
45246: NEG
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: PUSH
45252: LD_INT 1
45254: NEG
45255: PUSH
45256: LD_INT 3
45258: NEG
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: PUSH
45264: LD_INT 1
45266: PUSH
45267: LD_INT 2
45269: NEG
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: PUSH
45275: LD_INT 3
45277: PUSH
45278: LD_INT 2
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: PUSH
45285: LD_INT 2
45287: PUSH
45288: LD_INT 3
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: LD_INT 2
45297: NEG
45298: PUSH
45299: LD_INT 1
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: LD_INT 3
45308: NEG
45309: PUSH
45310: LD_INT 1
45312: NEG
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45343: LD_ADDR_VAR 0 31
45347: PUSH
45348: LD_INT 0
45350: PUSH
45351: LD_INT 0
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: LD_INT 0
45360: PUSH
45361: LD_INT 1
45363: NEG
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: PUSH
45369: LD_INT 1
45371: PUSH
45372: LD_INT 0
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 1
45381: PUSH
45382: LD_INT 1
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 0
45391: PUSH
45392: LD_INT 1
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 1
45401: NEG
45402: PUSH
45403: LD_INT 0
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 1
45412: NEG
45413: PUSH
45414: LD_INT 1
45416: NEG
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: PUSH
45422: LD_INT 1
45424: NEG
45425: PUSH
45426: LD_INT 2
45428: NEG
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: PUSH
45434: LD_INT 1
45436: PUSH
45437: LD_INT 1
45439: NEG
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PUSH
45445: LD_INT 2
45447: PUSH
45448: LD_INT 0
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 2
45457: PUSH
45458: LD_INT 1
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 2
45467: PUSH
45468: LD_INT 2
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: LD_INT 1
45477: PUSH
45478: LD_INT 2
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 0
45487: PUSH
45488: LD_INT 2
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 1
45497: NEG
45498: PUSH
45499: LD_INT 1
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 2
45508: NEG
45509: PUSH
45510: LD_INT 1
45512: NEG
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: LD_INT 2
45520: NEG
45521: PUSH
45522: LD_INT 2
45524: NEG
45525: PUSH
45526: EMPTY
45527: LIST
45528: LIST
45529: PUSH
45530: LD_INT 2
45532: NEG
45533: PUSH
45534: LD_INT 3
45536: NEG
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 2
45544: PUSH
45545: LD_INT 1
45547: NEG
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 3
45555: PUSH
45556: LD_INT 1
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 1
45565: PUSH
45566: LD_INT 3
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 1
45575: NEG
45576: PUSH
45577: LD_INT 2
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 3
45586: NEG
45587: PUSH
45588: LD_INT 2
45590: NEG
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: LIST
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45621: LD_ADDR_VAR 0 32
45625: PUSH
45626: LD_INT 0
45628: PUSH
45629: LD_INT 0
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 0
45638: PUSH
45639: LD_INT 1
45641: NEG
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: LD_INT 1
45649: PUSH
45650: LD_INT 0
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 1
45659: PUSH
45660: LD_INT 1
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: PUSH
45667: LD_INT 0
45669: PUSH
45670: LD_INT 1
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: PUSH
45677: LD_INT 1
45679: NEG
45680: PUSH
45681: LD_INT 0
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 1
45690: NEG
45691: PUSH
45692: LD_INT 1
45694: NEG
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: PUSH
45700: LD_INT 1
45702: NEG
45703: PUSH
45704: LD_INT 2
45706: NEG
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 0
45714: PUSH
45715: LD_INT 2
45717: NEG
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 1
45725: PUSH
45726: LD_INT 1
45728: NEG
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 2
45736: PUSH
45737: LD_INT 1
45739: PUSH
45740: EMPTY
45741: LIST
45742: LIST
45743: PUSH
45744: LD_INT 2
45746: PUSH
45747: LD_INT 2
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 1
45756: PUSH
45757: LD_INT 2
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PUSH
45764: LD_INT 0
45766: PUSH
45767: LD_INT 2
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: LD_INT 1
45776: NEG
45777: PUSH
45778: LD_INT 1
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: PUSH
45785: LD_INT 2
45787: NEG
45788: PUSH
45789: LD_INT 0
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 2
45798: NEG
45799: PUSH
45800: LD_INT 1
45802: NEG
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: PUSH
45808: LD_INT 1
45810: NEG
45811: PUSH
45812: LD_INT 3
45814: NEG
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 1
45822: PUSH
45823: LD_INT 2
45825: NEG
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: LD_INT 3
45833: PUSH
45834: LD_INT 2
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 2
45843: PUSH
45844: LD_INT 3
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: LD_INT 2
45853: NEG
45854: PUSH
45855: LD_INT 1
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: LD_INT 3
45864: NEG
45865: PUSH
45866: LD_INT 1
45868: NEG
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: EMPTY
45875: LIST
45876: LIST
45877: LIST
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45899: LD_ADDR_VAR 0 33
45903: PUSH
45904: LD_INT 0
45906: PUSH
45907: LD_INT 0
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: PUSH
45914: LD_INT 0
45916: PUSH
45917: LD_INT 1
45919: NEG
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 1
45927: PUSH
45928: LD_INT 0
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 1
45937: PUSH
45938: LD_INT 1
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 0
45947: PUSH
45948: LD_INT 1
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 1
45957: NEG
45958: PUSH
45959: LD_INT 0
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 1
45968: NEG
45969: PUSH
45970: LD_INT 1
45972: NEG
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 1
45980: NEG
45981: PUSH
45982: LD_INT 2
45984: NEG
45985: PUSH
45986: EMPTY
45987: LIST
45988: LIST
45989: PUSH
45990: LD_INT 1
45992: PUSH
45993: LD_INT 1
45995: NEG
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: LD_INT 2
46003: PUSH
46004: LD_INT 0
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: LD_INT 2
46013: PUSH
46014: LD_INT 1
46016: PUSH
46017: EMPTY
46018: LIST
46019: LIST
46020: PUSH
46021: LD_INT 1
46023: PUSH
46024: LD_INT 2
46026: PUSH
46027: EMPTY
46028: LIST
46029: LIST
46030: PUSH
46031: LD_INT 0
46033: PUSH
46034: LD_INT 2
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 1
46043: NEG
46044: PUSH
46045: LD_INT 1
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 2
46054: NEG
46055: PUSH
46056: LD_INT 0
46058: PUSH
46059: EMPTY
46060: LIST
46061: LIST
46062: PUSH
46063: LD_INT 2
46065: NEG
46066: PUSH
46067: LD_INT 1
46069: NEG
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PUSH
46075: LD_INT 2
46077: NEG
46078: PUSH
46079: LD_INT 2
46081: NEG
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: PUSH
46087: LD_INT 2
46089: NEG
46090: PUSH
46091: LD_INT 3
46093: NEG
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: LD_INT 2
46101: PUSH
46102: LD_INT 1
46104: NEG
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: PUSH
46110: LD_INT 3
46112: PUSH
46113: LD_INT 1
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 1
46122: PUSH
46123: LD_INT 3
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 1
46132: NEG
46133: PUSH
46134: LD_INT 2
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 3
46143: NEG
46144: PUSH
46145: LD_INT 2
46147: NEG
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: EMPTY
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46178: LD_ADDR_VAR 0 34
46182: PUSH
46183: LD_INT 0
46185: PUSH
46186: LD_INT 0
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 0
46195: PUSH
46196: LD_INT 1
46198: NEG
46199: PUSH
46200: EMPTY
46201: LIST
46202: LIST
46203: PUSH
46204: LD_INT 1
46206: PUSH
46207: LD_INT 0
46209: PUSH
46210: EMPTY
46211: LIST
46212: LIST
46213: PUSH
46214: LD_INT 1
46216: PUSH
46217: LD_INT 1
46219: PUSH
46220: EMPTY
46221: LIST
46222: LIST
46223: PUSH
46224: LD_INT 0
46226: PUSH
46227: LD_INT 1
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 1
46236: NEG
46237: PUSH
46238: LD_INT 0
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 1
46247: NEG
46248: PUSH
46249: LD_INT 1
46251: NEG
46252: PUSH
46253: EMPTY
46254: LIST
46255: LIST
46256: PUSH
46257: LD_INT 1
46259: NEG
46260: PUSH
46261: LD_INT 2
46263: NEG
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: LD_INT 0
46271: PUSH
46272: LD_INT 2
46274: NEG
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 1
46282: PUSH
46283: LD_INT 1
46285: NEG
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 2
46293: PUSH
46294: LD_INT 1
46296: PUSH
46297: EMPTY
46298: LIST
46299: LIST
46300: PUSH
46301: LD_INT 2
46303: PUSH
46304: LD_INT 2
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: LD_INT 1
46313: PUSH
46314: LD_INT 2
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 1
46323: NEG
46324: PUSH
46325: LD_INT 1
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 2
46334: NEG
46335: PUSH
46336: LD_INT 0
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: LD_INT 2
46345: NEG
46346: PUSH
46347: LD_INT 1
46349: NEG
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 2
46357: NEG
46358: PUSH
46359: LD_INT 2
46361: NEG
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: PUSH
46367: LD_INT 1
46369: NEG
46370: PUSH
46371: LD_INT 3
46373: NEG
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 1
46381: PUSH
46382: LD_INT 2
46384: NEG
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 3
46392: PUSH
46393: LD_INT 2
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 2
46402: PUSH
46403: LD_INT 3
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 2
46412: NEG
46413: PUSH
46414: LD_INT 1
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 3
46423: NEG
46424: PUSH
46425: LD_INT 1
46427: NEG
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46458: LD_ADDR_VAR 0 35
46462: PUSH
46463: LD_INT 0
46465: PUSH
46466: LD_INT 0
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 0
46475: PUSH
46476: LD_INT 1
46478: NEG
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 1
46486: PUSH
46487: LD_INT 0
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 1
46496: PUSH
46497: LD_INT 1
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 0
46506: PUSH
46507: LD_INT 1
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 1
46516: NEG
46517: PUSH
46518: LD_INT 0
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: LD_INT 1
46527: NEG
46528: PUSH
46529: LD_INT 1
46531: NEG
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 2
46539: PUSH
46540: LD_INT 1
46542: PUSH
46543: EMPTY
46544: LIST
46545: LIST
46546: PUSH
46547: LD_INT 2
46549: NEG
46550: PUSH
46551: LD_INT 1
46553: NEG
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: PUSH
46559: EMPTY
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: LIST
46569: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46570: LD_ADDR_VAR 0 36
46574: PUSH
46575: LD_INT 0
46577: PUSH
46578: LD_INT 0
46580: PUSH
46581: EMPTY
46582: LIST
46583: LIST
46584: PUSH
46585: LD_INT 0
46587: PUSH
46588: LD_INT 1
46590: NEG
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 1
46598: PUSH
46599: LD_INT 0
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 1
46608: PUSH
46609: LD_INT 1
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: LD_INT 0
46618: PUSH
46619: LD_INT 1
46621: PUSH
46622: EMPTY
46623: LIST
46624: LIST
46625: PUSH
46626: LD_INT 1
46628: NEG
46629: PUSH
46630: LD_INT 0
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 1
46639: NEG
46640: PUSH
46641: LD_INT 1
46643: NEG
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 1
46651: NEG
46652: PUSH
46653: LD_INT 2
46655: NEG
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 1
46663: PUSH
46664: LD_INT 2
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: LIST
46675: LIST
46676: LIST
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46682: LD_ADDR_VAR 0 37
46686: PUSH
46687: LD_INT 0
46689: PUSH
46690: LD_INT 0
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 0
46699: PUSH
46700: LD_INT 1
46702: NEG
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: LD_INT 1
46710: PUSH
46711: LD_INT 0
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: LD_INT 1
46720: PUSH
46721: LD_INT 1
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 0
46730: PUSH
46731: LD_INT 1
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 1
46740: NEG
46741: PUSH
46742: LD_INT 0
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: PUSH
46749: LD_INT 1
46751: NEG
46752: PUSH
46753: LD_INT 1
46755: NEG
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: PUSH
46761: LD_INT 1
46763: PUSH
46764: LD_INT 1
46766: NEG
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: PUSH
46772: LD_INT 1
46774: NEG
46775: PUSH
46776: LD_INT 1
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46794: LD_ADDR_VAR 0 38
46798: PUSH
46799: LD_INT 0
46801: PUSH
46802: LD_INT 0
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 0
46811: PUSH
46812: LD_INT 1
46814: NEG
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 1
46822: PUSH
46823: LD_INT 0
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 1
46832: PUSH
46833: LD_INT 1
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 0
46842: PUSH
46843: LD_INT 1
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 1
46852: NEG
46853: PUSH
46854: LD_INT 0
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 1
46863: NEG
46864: PUSH
46865: LD_INT 1
46867: NEG
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 2
46875: PUSH
46876: LD_INT 1
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 2
46885: NEG
46886: PUSH
46887: LD_INT 1
46889: NEG
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: LIST
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46906: LD_ADDR_VAR 0 39
46910: PUSH
46911: LD_INT 0
46913: PUSH
46914: LD_INT 0
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 0
46923: PUSH
46924: LD_INT 1
46926: NEG
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 1
46934: PUSH
46935: LD_INT 0
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 1
46944: PUSH
46945: LD_INT 1
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 0
46954: PUSH
46955: LD_INT 1
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 1
46964: NEG
46965: PUSH
46966: LD_INT 0
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 1
46975: NEG
46976: PUSH
46977: LD_INT 1
46979: NEG
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 1
46987: NEG
46988: PUSH
46989: LD_INT 2
46991: NEG
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 1
46999: PUSH
47000: LD_INT 2
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47018: LD_ADDR_VAR 0 40
47022: PUSH
47023: LD_INT 0
47025: PUSH
47026: LD_INT 0
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 0
47035: PUSH
47036: LD_INT 1
47038: NEG
47039: PUSH
47040: EMPTY
47041: LIST
47042: LIST
47043: PUSH
47044: LD_INT 1
47046: PUSH
47047: LD_INT 0
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 1
47056: PUSH
47057: LD_INT 1
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: PUSH
47064: LD_INT 0
47066: PUSH
47067: LD_INT 1
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 1
47076: NEG
47077: PUSH
47078: LD_INT 0
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: PUSH
47085: LD_INT 1
47087: NEG
47088: PUSH
47089: LD_INT 1
47091: NEG
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: PUSH
47097: LD_INT 1
47099: PUSH
47100: LD_INT 1
47102: NEG
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 1
47110: NEG
47111: PUSH
47112: LD_INT 1
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: LIST
47123: LIST
47124: LIST
47125: LIST
47126: LIST
47127: LIST
47128: LIST
47129: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47130: LD_ADDR_VAR 0 41
47134: PUSH
47135: LD_INT 0
47137: PUSH
47138: LD_INT 0
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 0
47147: PUSH
47148: LD_INT 1
47150: NEG
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 1
47158: PUSH
47159: LD_INT 0
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 1
47168: PUSH
47169: LD_INT 1
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 0
47178: PUSH
47179: LD_INT 1
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 1
47188: NEG
47189: PUSH
47190: LD_INT 0
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 1
47199: NEG
47200: PUSH
47201: LD_INT 1
47203: NEG
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 1
47211: NEG
47212: PUSH
47213: LD_INT 2
47215: NEG
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 1
47223: PUSH
47224: LD_INT 1
47226: NEG
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 2
47234: PUSH
47235: LD_INT 0
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 2
47244: PUSH
47245: LD_INT 1
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 2
47254: PUSH
47255: LD_INT 2
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 1
47264: PUSH
47265: LD_INT 2
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: LD_INT 1
47274: NEG
47275: PUSH
47276: LD_INT 1
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PUSH
47283: LD_INT 2
47285: NEG
47286: PUSH
47287: LD_INT 0
47289: PUSH
47290: EMPTY
47291: LIST
47292: LIST
47293: PUSH
47294: LD_INT 2
47296: NEG
47297: PUSH
47298: LD_INT 1
47300: NEG
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: PUSH
47306: LD_INT 2
47308: NEG
47309: PUSH
47310: LD_INT 2
47312: NEG
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 2
47320: NEG
47321: PUSH
47322: LD_INT 3
47324: NEG
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: PUSH
47330: LD_INT 2
47332: PUSH
47333: LD_INT 1
47335: NEG
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: PUSH
47341: LD_INT 3
47343: PUSH
47344: LD_INT 0
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: LD_INT 3
47353: PUSH
47354: LD_INT 1
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 3
47363: PUSH
47364: LD_INT 2
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: LD_INT 3
47373: PUSH
47374: LD_INT 3
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 2
47383: PUSH
47384: LD_INT 3
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 2
47393: NEG
47394: PUSH
47395: LD_INT 1
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 3
47404: NEG
47405: PUSH
47406: LD_INT 0
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: PUSH
47413: LD_INT 3
47415: NEG
47416: PUSH
47417: LD_INT 1
47419: NEG
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 3
47427: NEG
47428: PUSH
47429: LD_INT 2
47431: NEG
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: LD_INT 3
47439: NEG
47440: PUSH
47441: LD_INT 3
47443: NEG
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47480: LD_ADDR_VAR 0 42
47484: PUSH
47485: LD_INT 0
47487: PUSH
47488: LD_INT 0
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: LD_INT 0
47497: PUSH
47498: LD_INT 1
47500: NEG
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 1
47508: PUSH
47509: LD_INT 0
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 1
47518: PUSH
47519: LD_INT 1
47521: PUSH
47522: EMPTY
47523: LIST
47524: LIST
47525: PUSH
47526: LD_INT 0
47528: PUSH
47529: LD_INT 1
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 1
47538: NEG
47539: PUSH
47540: LD_INT 0
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: PUSH
47547: LD_INT 1
47549: NEG
47550: PUSH
47551: LD_INT 1
47553: NEG
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: PUSH
47559: LD_INT 1
47561: NEG
47562: PUSH
47563: LD_INT 2
47565: NEG
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 0
47573: PUSH
47574: LD_INT 2
47576: NEG
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 1
47584: PUSH
47585: LD_INT 1
47587: NEG
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 2
47595: PUSH
47596: LD_INT 1
47598: PUSH
47599: EMPTY
47600: LIST
47601: LIST
47602: PUSH
47603: LD_INT 2
47605: PUSH
47606: LD_INT 2
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 1
47615: PUSH
47616: LD_INT 2
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: LD_INT 0
47625: PUSH
47626: LD_INT 2
47628: PUSH
47629: EMPTY
47630: LIST
47631: LIST
47632: PUSH
47633: LD_INT 1
47635: NEG
47636: PUSH
47637: LD_INT 1
47639: PUSH
47640: EMPTY
47641: LIST
47642: LIST
47643: PUSH
47644: LD_INT 2
47646: NEG
47647: PUSH
47648: LD_INT 1
47650: NEG
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 2
47658: NEG
47659: PUSH
47660: LD_INT 2
47662: NEG
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 2
47670: NEG
47671: PUSH
47672: LD_INT 3
47674: NEG
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 1
47682: NEG
47683: PUSH
47684: LD_INT 3
47686: NEG
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 0
47694: PUSH
47695: LD_INT 3
47697: NEG
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 1
47705: PUSH
47706: LD_INT 2
47708: NEG
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 3
47716: PUSH
47717: LD_INT 2
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: LD_INT 3
47726: PUSH
47727: LD_INT 3
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 2
47736: PUSH
47737: LD_INT 3
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 1
47746: PUSH
47747: LD_INT 3
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 0
47756: PUSH
47757: LD_INT 3
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: LD_INT 1
47766: NEG
47767: PUSH
47768: LD_INT 2
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 3
47777: NEG
47778: PUSH
47779: LD_INT 2
47781: NEG
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: LD_INT 3
47789: NEG
47790: PUSH
47791: LD_INT 3
47793: NEG
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: LIST
47803: LIST
47804: LIST
47805: LIST
47806: LIST
47807: LIST
47808: LIST
47809: LIST
47810: LIST
47811: LIST
47812: LIST
47813: LIST
47814: LIST
47815: LIST
47816: LIST
47817: LIST
47818: LIST
47819: LIST
47820: LIST
47821: LIST
47822: LIST
47823: LIST
47824: LIST
47825: LIST
47826: LIST
47827: LIST
47828: LIST
47829: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47830: LD_ADDR_VAR 0 43
47834: PUSH
47835: LD_INT 0
47837: PUSH
47838: LD_INT 0
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PUSH
47845: LD_INT 0
47847: PUSH
47848: LD_INT 1
47850: NEG
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: LD_INT 1
47858: PUSH
47859: LD_INT 0
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: LD_INT 1
47868: PUSH
47869: LD_INT 1
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: PUSH
47876: LD_INT 0
47878: PUSH
47879: LD_INT 1
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 1
47888: NEG
47889: PUSH
47890: LD_INT 0
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 1
47899: NEG
47900: PUSH
47901: LD_INT 1
47903: NEG
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 1
47911: NEG
47912: PUSH
47913: LD_INT 2
47915: NEG
47916: PUSH
47917: EMPTY
47918: LIST
47919: LIST
47920: PUSH
47921: LD_INT 0
47923: PUSH
47924: LD_INT 2
47926: NEG
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 1
47934: PUSH
47935: LD_INT 1
47937: NEG
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: LD_INT 2
47945: PUSH
47946: LD_INT 0
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 2
47955: PUSH
47956: LD_INT 1
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 1
47965: PUSH
47966: LD_INT 2
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 0
47975: PUSH
47976: LD_INT 2
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: PUSH
47983: LD_INT 1
47985: NEG
47986: PUSH
47987: LD_INT 1
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 2
47996: NEG
47997: PUSH
47998: LD_INT 0
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 2
48007: NEG
48008: PUSH
48009: LD_INT 1
48011: NEG
48012: PUSH
48013: EMPTY
48014: LIST
48015: LIST
48016: PUSH
48017: LD_INT 1
48019: NEG
48020: PUSH
48021: LD_INT 3
48023: NEG
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: LD_INT 0
48031: PUSH
48032: LD_INT 3
48034: NEG
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 1
48042: PUSH
48043: LD_INT 2
48045: NEG
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: PUSH
48051: LD_INT 2
48053: PUSH
48054: LD_INT 1
48056: NEG
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 3
48064: PUSH
48065: LD_INT 0
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: LD_INT 3
48074: PUSH
48075: LD_INT 1
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 1
48084: PUSH
48085: LD_INT 3
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 0
48094: PUSH
48095: LD_INT 3
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 1
48104: NEG
48105: PUSH
48106: LD_INT 2
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 2
48115: NEG
48116: PUSH
48117: LD_INT 1
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: LD_INT 3
48126: NEG
48127: PUSH
48128: LD_INT 0
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: PUSH
48135: LD_INT 3
48137: NEG
48138: PUSH
48139: LD_INT 1
48141: NEG
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: LIST
48168: LIST
48169: LIST
48170: LIST
48171: LIST
48172: LIST
48173: LIST
48174: LIST
48175: LIST
48176: LIST
48177: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48178: LD_ADDR_VAR 0 44
48182: PUSH
48183: LD_INT 0
48185: PUSH
48186: LD_INT 0
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 0
48195: PUSH
48196: LD_INT 1
48198: NEG
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 1
48206: PUSH
48207: LD_INT 0
48209: PUSH
48210: EMPTY
48211: LIST
48212: LIST
48213: PUSH
48214: LD_INT 1
48216: PUSH
48217: LD_INT 1
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 0
48226: PUSH
48227: LD_INT 1
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 1
48236: NEG
48237: PUSH
48238: LD_INT 0
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 1
48247: NEG
48248: PUSH
48249: LD_INT 1
48251: NEG
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: LD_INT 1
48259: NEG
48260: PUSH
48261: LD_INT 2
48263: NEG
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 1
48271: PUSH
48272: LD_INT 1
48274: NEG
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 2
48282: PUSH
48283: LD_INT 0
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 2
48292: PUSH
48293: LD_INT 1
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 2
48302: PUSH
48303: LD_INT 2
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 1
48312: PUSH
48313: LD_INT 2
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 1
48322: NEG
48323: PUSH
48324: LD_INT 1
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 2
48333: NEG
48334: PUSH
48335: LD_INT 0
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 2
48344: NEG
48345: PUSH
48346: LD_INT 1
48348: NEG
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 2
48356: NEG
48357: PUSH
48358: LD_INT 2
48360: NEG
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 2
48368: NEG
48369: PUSH
48370: LD_INT 3
48372: NEG
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 2
48380: PUSH
48381: LD_INT 1
48383: NEG
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: LD_INT 3
48391: PUSH
48392: LD_INT 0
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 3
48401: PUSH
48402: LD_INT 1
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_INT 3
48411: PUSH
48412: LD_INT 2
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 3
48421: PUSH
48422: LD_INT 3
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: PUSH
48429: LD_INT 2
48431: PUSH
48432: LD_INT 3
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 2
48441: NEG
48442: PUSH
48443: LD_INT 1
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 3
48452: NEG
48453: PUSH
48454: LD_INT 0
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 3
48463: NEG
48464: PUSH
48465: LD_INT 1
48467: NEG
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 3
48475: NEG
48476: PUSH
48477: LD_INT 2
48479: NEG
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 3
48487: NEG
48488: PUSH
48489: LD_INT 3
48491: NEG
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: LIST
48501: LIST
48502: LIST
48503: LIST
48504: LIST
48505: LIST
48506: LIST
48507: LIST
48508: LIST
48509: LIST
48510: LIST
48511: LIST
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: LIST
48519: LIST
48520: LIST
48521: LIST
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48528: LD_ADDR_VAR 0 45
48532: PUSH
48533: LD_INT 0
48535: PUSH
48536: LD_INT 0
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 0
48545: PUSH
48546: LD_INT 1
48548: NEG
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 1
48556: PUSH
48557: LD_INT 0
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 1
48566: PUSH
48567: LD_INT 1
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 0
48576: PUSH
48577: LD_INT 1
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 1
48586: NEG
48587: PUSH
48588: LD_INT 0
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: LD_INT 1
48597: NEG
48598: PUSH
48599: LD_INT 1
48601: NEG
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: PUSH
48607: LD_INT 1
48609: NEG
48610: PUSH
48611: LD_INT 2
48613: NEG
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 0
48621: PUSH
48622: LD_INT 2
48624: NEG
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 1
48632: PUSH
48633: LD_INT 1
48635: NEG
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 2
48643: PUSH
48644: LD_INT 1
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: PUSH
48651: LD_INT 2
48653: PUSH
48654: LD_INT 2
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: PUSH
48661: LD_INT 1
48663: PUSH
48664: LD_INT 2
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 0
48673: PUSH
48674: LD_INT 2
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 1
48683: NEG
48684: PUSH
48685: LD_INT 1
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 2
48694: NEG
48695: PUSH
48696: LD_INT 1
48698: NEG
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: LD_INT 2
48706: NEG
48707: PUSH
48708: LD_INT 2
48710: NEG
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 2
48718: NEG
48719: PUSH
48720: LD_INT 3
48722: NEG
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 1
48730: NEG
48731: PUSH
48732: LD_INT 3
48734: NEG
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 0
48742: PUSH
48743: LD_INT 3
48745: NEG
48746: PUSH
48747: EMPTY
48748: LIST
48749: LIST
48750: PUSH
48751: LD_INT 1
48753: PUSH
48754: LD_INT 2
48756: NEG
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: PUSH
48762: LD_INT 3
48764: PUSH
48765: LD_INT 2
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 3
48774: PUSH
48775: LD_INT 3
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 2
48784: PUSH
48785: LD_INT 3
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 1
48794: PUSH
48795: LD_INT 3
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 0
48804: PUSH
48805: LD_INT 3
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: LD_INT 1
48814: NEG
48815: PUSH
48816: LD_INT 2
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 3
48825: NEG
48826: PUSH
48827: LD_INT 2
48829: NEG
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 3
48837: NEG
48838: PUSH
48839: LD_INT 3
48841: NEG
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PUSH
48847: EMPTY
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: LIST
48860: LIST
48861: LIST
48862: LIST
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: LIST
48868: LIST
48869: LIST
48870: LIST
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48878: LD_ADDR_VAR 0 46
48882: PUSH
48883: LD_INT 0
48885: PUSH
48886: LD_INT 0
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 0
48895: PUSH
48896: LD_INT 1
48898: NEG
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 1
48906: PUSH
48907: LD_INT 0
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 1
48916: PUSH
48917: LD_INT 1
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: LD_INT 0
48926: PUSH
48927: LD_INT 1
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: LD_INT 1
48936: NEG
48937: PUSH
48938: LD_INT 0
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: LD_INT 1
48947: NEG
48948: PUSH
48949: LD_INT 1
48951: NEG
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 1
48959: NEG
48960: PUSH
48961: LD_INT 2
48963: NEG
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 0
48971: PUSH
48972: LD_INT 2
48974: NEG
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: LD_INT 1
48982: PUSH
48983: LD_INT 1
48985: NEG
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: LD_INT 2
48993: PUSH
48994: LD_INT 0
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: LD_INT 2
49003: PUSH
49004: LD_INT 1
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 1
49013: PUSH
49014: LD_INT 2
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 0
49023: PUSH
49024: LD_INT 2
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: PUSH
49031: LD_INT 1
49033: NEG
49034: PUSH
49035: LD_INT 1
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 2
49044: NEG
49045: PUSH
49046: LD_INT 0
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 2
49055: NEG
49056: PUSH
49057: LD_INT 1
49059: NEG
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: LD_INT 1
49067: NEG
49068: PUSH
49069: LD_INT 3
49071: NEG
49072: PUSH
49073: EMPTY
49074: LIST
49075: LIST
49076: PUSH
49077: LD_INT 0
49079: PUSH
49080: LD_INT 3
49082: NEG
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 1
49090: PUSH
49091: LD_INT 2
49093: NEG
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 2
49101: PUSH
49102: LD_INT 1
49104: NEG
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: PUSH
49110: LD_INT 3
49112: PUSH
49113: LD_INT 0
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: LD_INT 3
49122: PUSH
49123: LD_INT 1
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: PUSH
49130: LD_INT 1
49132: PUSH
49133: LD_INT 3
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 0
49142: PUSH
49143: LD_INT 3
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 1
49152: NEG
49153: PUSH
49154: LD_INT 2
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 2
49163: NEG
49164: PUSH
49165: LD_INT 1
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 3
49174: NEG
49175: PUSH
49176: LD_INT 0
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 3
49185: NEG
49186: PUSH
49187: LD_INT 1
49189: NEG
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: LIST
49199: LIST
49200: LIST
49201: LIST
49202: LIST
49203: LIST
49204: LIST
49205: LIST
49206: LIST
49207: LIST
49208: LIST
49209: LIST
49210: LIST
49211: LIST
49212: LIST
49213: LIST
49214: LIST
49215: LIST
49216: LIST
49217: LIST
49218: LIST
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49226: LD_ADDR_VAR 0 47
49230: PUSH
49231: LD_INT 0
49233: PUSH
49234: LD_INT 0
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 0
49243: PUSH
49244: LD_INT 1
49246: NEG
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 1
49254: PUSH
49255: LD_INT 0
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 1
49264: PUSH
49265: LD_INT 1
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 0
49274: PUSH
49275: LD_INT 1
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 1
49284: NEG
49285: PUSH
49286: LD_INT 0
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 1
49295: NEG
49296: PUSH
49297: LD_INT 1
49299: NEG
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 1
49307: NEG
49308: PUSH
49309: LD_INT 2
49311: NEG
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: LD_INT 0
49319: PUSH
49320: LD_INT 2
49322: NEG
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 1
49330: PUSH
49331: LD_INT 1
49333: NEG
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 2
49341: NEG
49342: PUSH
49343: LD_INT 1
49345: NEG
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: LD_INT 2
49353: NEG
49354: PUSH
49355: LD_INT 2
49357: NEG
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: LIST
49376: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49377: LD_ADDR_VAR 0 48
49381: PUSH
49382: LD_INT 0
49384: PUSH
49385: LD_INT 0
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: PUSH
49392: LD_INT 0
49394: PUSH
49395: LD_INT 1
49397: NEG
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: LD_INT 1
49405: PUSH
49406: LD_INT 0
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 1
49415: PUSH
49416: LD_INT 1
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 0
49425: PUSH
49426: LD_INT 1
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 1
49435: NEG
49436: PUSH
49437: LD_INT 0
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: LD_INT 1
49446: NEG
49447: PUSH
49448: LD_INT 1
49450: NEG
49451: PUSH
49452: EMPTY
49453: LIST
49454: LIST
49455: PUSH
49456: LD_INT 1
49458: NEG
49459: PUSH
49460: LD_INT 2
49462: NEG
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 0
49470: PUSH
49471: LD_INT 2
49473: NEG
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 1
49481: PUSH
49482: LD_INT 1
49484: NEG
49485: PUSH
49486: EMPTY
49487: LIST
49488: LIST
49489: PUSH
49490: LD_INT 2
49492: PUSH
49493: LD_INT 0
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 2
49502: PUSH
49503: LD_INT 1
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: LIST
49523: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49524: LD_ADDR_VAR 0 49
49528: PUSH
49529: LD_INT 0
49531: PUSH
49532: LD_INT 0
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 0
49541: PUSH
49542: LD_INT 1
49544: NEG
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: LD_INT 1
49552: PUSH
49553: LD_INT 0
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 1
49562: PUSH
49563: LD_INT 1
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 0
49572: PUSH
49573: LD_INT 1
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 1
49582: NEG
49583: PUSH
49584: LD_INT 0
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 1
49593: NEG
49594: PUSH
49595: LD_INT 1
49597: NEG
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: LD_INT 1
49605: PUSH
49606: LD_INT 1
49608: NEG
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 2
49616: PUSH
49617: LD_INT 0
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 2
49626: PUSH
49627: LD_INT 1
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 2
49636: PUSH
49637: LD_INT 2
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_INT 1
49646: PUSH
49647: LD_INT 2
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49668: LD_ADDR_VAR 0 50
49672: PUSH
49673: LD_INT 0
49675: PUSH
49676: LD_INT 0
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 0
49685: PUSH
49686: LD_INT 1
49688: NEG
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 1
49696: PUSH
49697: LD_INT 0
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 1
49706: PUSH
49707: LD_INT 1
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PUSH
49714: LD_INT 0
49716: PUSH
49717: LD_INT 1
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: PUSH
49724: LD_INT 1
49726: NEG
49727: PUSH
49728: LD_INT 0
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: PUSH
49735: LD_INT 1
49737: NEG
49738: PUSH
49739: LD_INT 1
49741: NEG
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: PUSH
49747: LD_INT 2
49749: PUSH
49750: LD_INT 1
49752: PUSH
49753: EMPTY
49754: LIST
49755: LIST
49756: PUSH
49757: LD_INT 2
49759: PUSH
49760: LD_INT 2
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 1
49769: PUSH
49770: LD_INT 2
49772: PUSH
49773: EMPTY
49774: LIST
49775: LIST
49776: PUSH
49777: LD_INT 0
49779: PUSH
49780: LD_INT 2
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 1
49789: NEG
49790: PUSH
49791: LD_INT 1
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: LIST
49807: LIST
49808: LIST
49809: LIST
49810: LIST
49811: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49812: LD_ADDR_VAR 0 51
49816: PUSH
49817: LD_INT 0
49819: PUSH
49820: LD_INT 0
49822: PUSH
49823: EMPTY
49824: LIST
49825: LIST
49826: PUSH
49827: LD_INT 0
49829: PUSH
49830: LD_INT 1
49832: NEG
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 1
49840: PUSH
49841: LD_INT 0
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 1
49850: PUSH
49851: LD_INT 1
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 0
49860: PUSH
49861: LD_INT 1
49863: PUSH
49864: EMPTY
49865: LIST
49866: LIST
49867: PUSH
49868: LD_INT 1
49870: NEG
49871: PUSH
49872: LD_INT 0
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 1
49881: NEG
49882: PUSH
49883: LD_INT 1
49885: NEG
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 1
49893: PUSH
49894: LD_INT 2
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 0
49903: PUSH
49904: LD_INT 2
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 1
49913: NEG
49914: PUSH
49915: LD_INT 1
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: PUSH
49922: LD_INT 2
49924: NEG
49925: PUSH
49926: LD_INT 0
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 2
49935: NEG
49936: PUSH
49937: LD_INT 1
49939: NEG
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49959: LD_ADDR_VAR 0 52
49963: PUSH
49964: LD_INT 0
49966: PUSH
49967: LD_INT 0
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: LD_INT 0
49976: PUSH
49977: LD_INT 1
49979: NEG
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: PUSH
49985: LD_INT 1
49987: PUSH
49988: LD_INT 0
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 1
49997: PUSH
49998: LD_INT 1
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: PUSH
50005: LD_INT 0
50007: PUSH
50008: LD_INT 1
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: PUSH
50015: LD_INT 1
50017: NEG
50018: PUSH
50019: LD_INT 0
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: LD_INT 1
50028: NEG
50029: PUSH
50030: LD_INT 1
50032: NEG
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 1
50040: NEG
50041: PUSH
50042: LD_INT 2
50044: NEG
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 1
50052: NEG
50053: PUSH
50054: LD_INT 1
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 2
50063: NEG
50064: PUSH
50065: LD_INT 0
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 2
50074: NEG
50075: PUSH
50076: LD_INT 1
50078: NEG
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 2
50086: NEG
50087: PUSH
50088: LD_INT 2
50090: NEG
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: LIST
50100: LIST
50101: LIST
50102: LIST
50103: LIST
50104: LIST
50105: LIST
50106: LIST
50107: LIST
50108: LIST
50109: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50110: LD_ADDR_VAR 0 53
50114: PUSH
50115: LD_INT 0
50117: PUSH
50118: LD_INT 0
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: PUSH
50125: LD_INT 0
50127: PUSH
50128: LD_INT 1
50130: NEG
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 1
50138: PUSH
50139: LD_INT 0
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 1
50148: PUSH
50149: LD_INT 1
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 0
50158: PUSH
50159: LD_INT 1
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 1
50168: NEG
50169: PUSH
50170: LD_INT 0
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 1
50179: NEG
50180: PUSH
50181: LD_INT 1
50183: NEG
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 1
50191: NEG
50192: PUSH
50193: LD_INT 2
50195: NEG
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 0
50203: PUSH
50204: LD_INT 2
50206: NEG
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 1
50214: PUSH
50215: LD_INT 1
50217: NEG
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 2
50225: PUSH
50226: LD_INT 0
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 2
50235: PUSH
50236: LD_INT 1
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 2
50245: PUSH
50246: LD_INT 2
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 1
50255: PUSH
50256: LD_INT 2
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_INT 0
50265: PUSH
50266: LD_INT 2
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: LD_INT 1
50275: NEG
50276: PUSH
50277: LD_INT 1
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 2
50286: NEG
50287: PUSH
50288: LD_INT 0
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 2
50297: NEG
50298: PUSH
50299: LD_INT 1
50301: NEG
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 2
50309: NEG
50310: PUSH
50311: LD_INT 2
50313: NEG
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50340: LD_ADDR_VAR 0 54
50344: PUSH
50345: LD_INT 0
50347: PUSH
50348: LD_INT 0
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 0
50357: PUSH
50358: LD_INT 1
50360: NEG
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: LD_INT 1
50368: PUSH
50369: LD_INT 0
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 1
50378: PUSH
50379: LD_INT 1
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 0
50388: PUSH
50389: LD_INT 1
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 1
50398: NEG
50399: PUSH
50400: LD_INT 0
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 1
50409: NEG
50410: PUSH
50411: LD_INT 1
50413: NEG
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 1
50421: NEG
50422: PUSH
50423: LD_INT 2
50425: NEG
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 0
50433: PUSH
50434: LD_INT 2
50436: NEG
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 1
50444: PUSH
50445: LD_INT 1
50447: NEG
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 2
50455: PUSH
50456: LD_INT 0
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 2
50465: PUSH
50466: LD_INT 1
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 2
50475: PUSH
50476: LD_INT 2
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: LD_INT 1
50485: PUSH
50486: LD_INT 2
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 0
50495: PUSH
50496: LD_INT 2
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 1
50505: NEG
50506: PUSH
50507: LD_INT 1
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: LD_INT 2
50516: NEG
50517: PUSH
50518: LD_INT 0
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 2
50527: NEG
50528: PUSH
50529: LD_INT 1
50531: NEG
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 2
50539: NEG
50540: PUSH
50541: LD_INT 2
50543: NEG
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50570: LD_ADDR_VAR 0 55
50574: PUSH
50575: LD_INT 0
50577: PUSH
50578: LD_INT 0
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 0
50587: PUSH
50588: LD_INT 1
50590: NEG
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 1
50598: PUSH
50599: LD_INT 0
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 1
50608: PUSH
50609: LD_INT 1
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 0
50618: PUSH
50619: LD_INT 1
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 1
50628: NEG
50629: PUSH
50630: LD_INT 0
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: LD_INT 1
50639: NEG
50640: PUSH
50641: LD_INT 1
50643: NEG
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 1
50651: NEG
50652: PUSH
50653: LD_INT 2
50655: NEG
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 0
50663: PUSH
50664: LD_INT 2
50666: NEG
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 1
50674: PUSH
50675: LD_INT 1
50677: NEG
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 2
50685: PUSH
50686: LD_INT 0
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: LD_INT 2
50695: PUSH
50696: LD_INT 1
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 2
50705: PUSH
50706: LD_INT 2
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 1
50715: PUSH
50716: LD_INT 2
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 0
50725: PUSH
50726: LD_INT 2
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 1
50735: NEG
50736: PUSH
50737: LD_INT 1
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 2
50746: NEG
50747: PUSH
50748: LD_INT 0
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 2
50757: NEG
50758: PUSH
50759: LD_INT 1
50761: NEG
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 2
50769: NEG
50770: PUSH
50771: LD_INT 2
50773: NEG
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50800: LD_ADDR_VAR 0 56
50804: PUSH
50805: LD_INT 0
50807: PUSH
50808: LD_INT 0
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 0
50817: PUSH
50818: LD_INT 1
50820: NEG
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 1
50828: PUSH
50829: LD_INT 0
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 1
50838: PUSH
50839: LD_INT 1
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 0
50848: PUSH
50849: LD_INT 1
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 1
50858: NEG
50859: PUSH
50860: LD_INT 0
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 1
50869: NEG
50870: PUSH
50871: LD_INT 1
50873: NEG
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: LD_INT 1
50881: NEG
50882: PUSH
50883: LD_INT 2
50885: NEG
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 0
50893: PUSH
50894: LD_INT 2
50896: NEG
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 1
50904: PUSH
50905: LD_INT 1
50907: NEG
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: LD_INT 2
50915: PUSH
50916: LD_INT 0
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: LD_INT 2
50925: PUSH
50926: LD_INT 1
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 2
50935: PUSH
50936: LD_INT 2
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: LD_INT 1
50945: PUSH
50946: LD_INT 2
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 0
50955: PUSH
50956: LD_INT 2
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 1
50965: NEG
50966: PUSH
50967: LD_INT 1
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 2
50976: NEG
50977: PUSH
50978: LD_INT 0
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 2
50987: NEG
50988: PUSH
50989: LD_INT 1
50991: NEG
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: LD_INT 2
50999: NEG
51000: PUSH
51001: LD_INT 2
51003: NEG
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51030: LD_ADDR_VAR 0 57
51034: PUSH
51035: LD_INT 0
51037: PUSH
51038: LD_INT 0
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 0
51047: PUSH
51048: LD_INT 1
51050: NEG
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 1
51058: PUSH
51059: LD_INT 0
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 1
51068: PUSH
51069: LD_INT 1
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 0
51078: PUSH
51079: LD_INT 1
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 1
51088: NEG
51089: PUSH
51090: LD_INT 0
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 1
51099: NEG
51100: PUSH
51101: LD_INT 1
51103: NEG
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 1
51111: NEG
51112: PUSH
51113: LD_INT 2
51115: NEG
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 0
51123: PUSH
51124: LD_INT 2
51126: NEG
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 1
51134: PUSH
51135: LD_INT 1
51137: NEG
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 2
51145: PUSH
51146: LD_INT 0
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: PUSH
51153: LD_INT 2
51155: PUSH
51156: LD_INT 1
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 2
51165: PUSH
51166: LD_INT 2
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 1
51175: PUSH
51176: LD_INT 2
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 0
51185: PUSH
51186: LD_INT 2
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 1
51195: NEG
51196: PUSH
51197: LD_INT 1
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 2
51206: NEG
51207: PUSH
51208: LD_INT 0
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 2
51217: NEG
51218: PUSH
51219: LD_INT 1
51221: NEG
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 2
51229: NEG
51230: PUSH
51231: LD_INT 2
51233: NEG
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: LIST
51246: LIST
51247: LIST
51248: LIST
51249: LIST
51250: LIST
51251: LIST
51252: LIST
51253: LIST
51254: LIST
51255: LIST
51256: LIST
51257: LIST
51258: LIST
51259: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51260: LD_ADDR_VAR 0 58
51264: PUSH
51265: LD_INT 0
51267: PUSH
51268: LD_INT 0
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 0
51277: PUSH
51278: LD_INT 1
51280: NEG
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PUSH
51286: LD_INT 1
51288: PUSH
51289: LD_INT 0
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: LD_INT 1
51298: PUSH
51299: LD_INT 1
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 0
51308: PUSH
51309: LD_INT 1
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: LD_INT 1
51318: NEG
51319: PUSH
51320: LD_INT 0
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 1
51329: NEG
51330: PUSH
51331: LD_INT 1
51333: NEG
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: LD_INT 1
51341: NEG
51342: PUSH
51343: LD_INT 2
51345: NEG
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: PUSH
51351: LD_INT 0
51353: PUSH
51354: LD_INT 2
51356: NEG
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 1
51364: PUSH
51365: LD_INT 1
51367: NEG
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: LD_INT 2
51375: PUSH
51376: LD_INT 0
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 2
51385: PUSH
51386: LD_INT 1
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 2
51395: PUSH
51396: LD_INT 2
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: LD_INT 1
51405: PUSH
51406: LD_INT 2
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 0
51415: PUSH
51416: LD_INT 2
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 1
51425: NEG
51426: PUSH
51427: LD_INT 1
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 2
51436: NEG
51437: PUSH
51438: LD_INT 0
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 2
51447: NEG
51448: PUSH
51449: LD_INT 1
51451: NEG
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 2
51459: NEG
51460: PUSH
51461: LD_INT 2
51463: NEG
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51490: LD_ADDR_VAR 0 59
51494: PUSH
51495: LD_INT 0
51497: PUSH
51498: LD_INT 0
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 0
51507: PUSH
51508: LD_INT 1
51510: NEG
51511: PUSH
51512: EMPTY
51513: LIST
51514: LIST
51515: PUSH
51516: LD_INT 1
51518: PUSH
51519: LD_INT 0
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 1
51528: PUSH
51529: LD_INT 1
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 0
51538: PUSH
51539: LD_INT 1
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 1
51548: NEG
51549: PUSH
51550: LD_INT 0
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_INT 1
51559: NEG
51560: PUSH
51561: LD_INT 1
51563: NEG
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51578: LD_ADDR_VAR 0 60
51582: PUSH
51583: LD_INT 0
51585: PUSH
51586: LD_INT 0
51588: PUSH
51589: EMPTY
51590: LIST
51591: LIST
51592: PUSH
51593: LD_INT 0
51595: PUSH
51596: LD_INT 1
51598: NEG
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: LD_INT 1
51606: PUSH
51607: LD_INT 0
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: LD_INT 1
51616: PUSH
51617: LD_INT 1
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 0
51626: PUSH
51627: LD_INT 1
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 1
51636: NEG
51637: PUSH
51638: LD_INT 0
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PUSH
51645: LD_INT 1
51647: NEG
51648: PUSH
51649: LD_INT 1
51651: NEG
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51666: LD_ADDR_VAR 0 61
51670: PUSH
51671: LD_INT 0
51673: PUSH
51674: LD_INT 0
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 0
51683: PUSH
51684: LD_INT 1
51686: NEG
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 1
51694: PUSH
51695: LD_INT 0
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: PUSH
51702: LD_INT 1
51704: PUSH
51705: LD_INT 1
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 0
51714: PUSH
51715: LD_INT 1
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: LD_INT 1
51724: NEG
51725: PUSH
51726: LD_INT 0
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 1
51735: NEG
51736: PUSH
51737: LD_INT 1
51739: NEG
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51754: LD_ADDR_VAR 0 62
51758: PUSH
51759: LD_INT 0
51761: PUSH
51762: LD_INT 0
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 0
51771: PUSH
51772: LD_INT 1
51774: NEG
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 1
51782: PUSH
51783: LD_INT 0
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: PUSH
51790: LD_INT 1
51792: PUSH
51793: LD_INT 1
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 0
51802: PUSH
51803: LD_INT 1
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 1
51812: NEG
51813: PUSH
51814: LD_INT 0
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: LD_INT 1
51823: NEG
51824: PUSH
51825: LD_INT 1
51827: NEG
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51842: LD_ADDR_VAR 0 63
51846: PUSH
51847: LD_INT 0
51849: PUSH
51850: LD_INT 0
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 0
51859: PUSH
51860: LD_INT 1
51862: NEG
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: LD_INT 1
51870: PUSH
51871: LD_INT 0
51873: PUSH
51874: EMPTY
51875: LIST
51876: LIST
51877: PUSH
51878: LD_INT 1
51880: PUSH
51881: LD_INT 1
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: LD_INT 0
51890: PUSH
51891: LD_INT 1
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 1
51900: NEG
51901: PUSH
51902: LD_INT 0
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 1
51911: NEG
51912: PUSH
51913: LD_INT 1
51915: NEG
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: LIST
51929: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51930: LD_ADDR_VAR 0 64
51934: PUSH
51935: LD_INT 0
51937: PUSH
51938: LD_INT 0
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 0
51947: PUSH
51948: LD_INT 1
51950: NEG
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 1
51958: PUSH
51959: LD_INT 0
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: LD_INT 1
51968: PUSH
51969: LD_INT 1
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 0
51978: PUSH
51979: LD_INT 1
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 1
51988: NEG
51989: PUSH
51990: LD_INT 0
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PUSH
51997: LD_INT 1
51999: NEG
52000: PUSH
52001: LD_INT 1
52003: NEG
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: ST_TO_ADDR
// end ; 1 :
52018: GO 57915
52020: LD_INT 1
52022: DOUBLE
52023: EQUAL
52024: IFTRUE 52028
52026: GO 54651
52028: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52029: LD_ADDR_VAR 0 11
52033: PUSH
52034: LD_INT 1
52036: NEG
52037: PUSH
52038: LD_INT 3
52040: NEG
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 0
52048: PUSH
52049: LD_INT 3
52051: NEG
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: LD_INT 1
52059: PUSH
52060: LD_INT 2
52062: NEG
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: LIST
52072: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52073: LD_ADDR_VAR 0 12
52077: PUSH
52078: LD_INT 2
52080: PUSH
52081: LD_INT 1
52083: NEG
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 3
52091: PUSH
52092: LD_INT 0
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 3
52101: PUSH
52102: LD_INT 1
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: EMPTY
52110: LIST
52111: LIST
52112: LIST
52113: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52114: LD_ADDR_VAR 0 13
52118: PUSH
52119: LD_INT 3
52121: PUSH
52122: LD_INT 2
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: LD_INT 3
52131: PUSH
52132: LD_INT 3
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 2
52141: PUSH
52142: LD_INT 3
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: LIST
52153: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52154: LD_ADDR_VAR 0 14
52158: PUSH
52159: LD_INT 1
52161: PUSH
52162: LD_INT 3
52164: PUSH
52165: EMPTY
52166: LIST
52167: LIST
52168: PUSH
52169: LD_INT 0
52171: PUSH
52172: LD_INT 3
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 1
52181: NEG
52182: PUSH
52183: LD_INT 2
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: LIST
52194: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52195: LD_ADDR_VAR 0 15
52199: PUSH
52200: LD_INT 2
52202: NEG
52203: PUSH
52204: LD_INT 1
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 3
52213: NEG
52214: PUSH
52215: LD_INT 0
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 3
52224: NEG
52225: PUSH
52226: LD_INT 1
52228: NEG
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: LIST
52238: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52239: LD_ADDR_VAR 0 16
52243: PUSH
52244: LD_INT 2
52246: NEG
52247: PUSH
52248: LD_INT 3
52250: NEG
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 3
52258: NEG
52259: PUSH
52260: LD_INT 2
52262: NEG
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 3
52270: NEG
52271: PUSH
52272: LD_INT 3
52274: NEG
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: LIST
52284: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52285: LD_ADDR_VAR 0 17
52289: PUSH
52290: LD_INT 1
52292: NEG
52293: PUSH
52294: LD_INT 3
52296: NEG
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 0
52304: PUSH
52305: LD_INT 3
52307: NEG
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 1
52315: PUSH
52316: LD_INT 2
52318: NEG
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: LIST
52328: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52329: LD_ADDR_VAR 0 18
52333: PUSH
52334: LD_INT 2
52336: PUSH
52337: LD_INT 1
52339: NEG
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 3
52347: PUSH
52348: LD_INT 0
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 3
52357: PUSH
52358: LD_INT 1
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: LIST
52369: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52370: LD_ADDR_VAR 0 19
52374: PUSH
52375: LD_INT 3
52377: PUSH
52378: LD_INT 2
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 3
52387: PUSH
52388: LD_INT 3
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: LD_INT 2
52397: PUSH
52398: LD_INT 3
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: LIST
52409: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52410: LD_ADDR_VAR 0 20
52414: PUSH
52415: LD_INT 1
52417: PUSH
52418: LD_INT 3
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 0
52427: PUSH
52428: LD_INT 3
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 1
52437: NEG
52438: PUSH
52439: LD_INT 2
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: LIST
52450: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52451: LD_ADDR_VAR 0 21
52455: PUSH
52456: LD_INT 2
52458: NEG
52459: PUSH
52460: LD_INT 1
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 3
52469: NEG
52470: PUSH
52471: LD_INT 0
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 3
52480: NEG
52481: PUSH
52482: LD_INT 1
52484: NEG
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: LIST
52494: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52495: LD_ADDR_VAR 0 22
52499: PUSH
52500: LD_INT 2
52502: NEG
52503: PUSH
52504: LD_INT 3
52506: NEG
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 3
52514: NEG
52515: PUSH
52516: LD_INT 2
52518: NEG
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 3
52526: NEG
52527: PUSH
52528: LD_INT 3
52530: NEG
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: LIST
52540: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
52541: LD_ADDR_VAR 0 23
52545: PUSH
52546: LD_INT 0
52548: PUSH
52549: LD_INT 3
52551: NEG
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 1
52559: NEG
52560: PUSH
52561: LD_INT 4
52563: NEG
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 1
52571: PUSH
52572: LD_INT 3
52574: NEG
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: LIST
52584: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
52585: LD_ADDR_VAR 0 24
52589: PUSH
52590: LD_INT 3
52592: PUSH
52593: LD_INT 0
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 3
52602: PUSH
52603: LD_INT 1
52605: NEG
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: LD_INT 4
52613: PUSH
52614: LD_INT 1
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: LIST
52625: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
52626: LD_ADDR_VAR 0 25
52630: PUSH
52631: LD_INT 3
52633: PUSH
52634: LD_INT 3
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 4
52643: PUSH
52644: LD_INT 3
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 3
52653: PUSH
52654: LD_INT 4
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: LIST
52665: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
52666: LD_ADDR_VAR 0 26
52670: PUSH
52671: LD_INT 0
52673: PUSH
52674: LD_INT 3
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 1
52683: PUSH
52684: LD_INT 4
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 1
52693: NEG
52694: PUSH
52695: LD_INT 3
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: LIST
52706: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
52707: LD_ADDR_VAR 0 27
52711: PUSH
52712: LD_INT 3
52714: NEG
52715: PUSH
52716: LD_INT 0
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 3
52725: NEG
52726: PUSH
52727: LD_INT 1
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 4
52736: NEG
52737: PUSH
52738: LD_INT 1
52740: NEG
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: LIST
52750: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
52751: LD_ADDR_VAR 0 28
52755: PUSH
52756: LD_INT 3
52758: NEG
52759: PUSH
52760: LD_INT 3
52762: NEG
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 3
52770: NEG
52771: PUSH
52772: LD_INT 4
52774: NEG
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 4
52782: NEG
52783: PUSH
52784: LD_INT 3
52786: NEG
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: LIST
52796: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
52797: LD_ADDR_VAR 0 29
52801: PUSH
52802: LD_INT 1
52804: NEG
52805: PUSH
52806: LD_INT 3
52808: NEG
52809: PUSH
52810: EMPTY
52811: LIST
52812: LIST
52813: PUSH
52814: LD_INT 0
52816: PUSH
52817: LD_INT 3
52819: NEG
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: PUSH
52825: LD_INT 1
52827: PUSH
52828: LD_INT 2
52830: NEG
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 1
52838: NEG
52839: PUSH
52840: LD_INT 4
52842: NEG
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 0
52850: PUSH
52851: LD_INT 4
52853: NEG
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 1
52861: PUSH
52862: LD_INT 3
52864: NEG
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 1
52872: NEG
52873: PUSH
52874: LD_INT 5
52876: NEG
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 0
52884: PUSH
52885: LD_INT 5
52887: NEG
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 1
52895: PUSH
52896: LD_INT 4
52898: NEG
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 1
52906: NEG
52907: PUSH
52908: LD_INT 6
52910: NEG
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: PUSH
52916: LD_INT 0
52918: PUSH
52919: LD_INT 6
52921: NEG
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 1
52929: PUSH
52930: LD_INT 5
52932: NEG
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
52952: LD_ADDR_VAR 0 30
52956: PUSH
52957: LD_INT 2
52959: PUSH
52960: LD_INT 1
52962: NEG
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: LD_INT 3
52970: PUSH
52971: LD_INT 0
52973: PUSH
52974: EMPTY
52975: LIST
52976: LIST
52977: PUSH
52978: LD_INT 3
52980: PUSH
52981: LD_INT 1
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_INT 3
52990: PUSH
52991: LD_INT 1
52993: NEG
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: LD_INT 4
53001: PUSH
53002: LD_INT 0
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: LD_INT 4
53011: PUSH
53012: LD_INT 1
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 4
53021: PUSH
53022: LD_INT 1
53024: NEG
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 5
53032: PUSH
53033: LD_INT 0
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 5
53042: PUSH
53043: LD_INT 1
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 5
53052: PUSH
53053: LD_INT 1
53055: NEG
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: LD_INT 6
53063: PUSH
53064: LD_INT 0
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: PUSH
53071: LD_INT 6
53073: PUSH
53074: LD_INT 1
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: LIST
53093: LIST
53094: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
53095: LD_ADDR_VAR 0 31
53099: PUSH
53100: LD_INT 3
53102: PUSH
53103: LD_INT 2
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: LD_INT 3
53112: PUSH
53113: LD_INT 3
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 2
53122: PUSH
53123: LD_INT 3
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: LD_INT 4
53132: PUSH
53133: LD_INT 3
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: LD_INT 4
53142: PUSH
53143: LD_INT 4
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: LD_INT 3
53152: PUSH
53153: LD_INT 4
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: PUSH
53160: LD_INT 5
53162: PUSH
53163: LD_INT 4
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: LD_INT 5
53172: PUSH
53173: LD_INT 5
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: LD_INT 4
53182: PUSH
53183: LD_INT 5
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 6
53192: PUSH
53193: LD_INT 5
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 6
53202: PUSH
53203: LD_INT 6
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 5
53212: PUSH
53213: LD_INT 6
53215: PUSH
53216: EMPTY
53217: LIST
53218: LIST
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
53234: LD_ADDR_VAR 0 32
53238: PUSH
53239: LD_INT 1
53241: PUSH
53242: LD_INT 3
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 0
53251: PUSH
53252: LD_INT 3
53254: PUSH
53255: EMPTY
53256: LIST
53257: LIST
53258: PUSH
53259: LD_INT 1
53261: NEG
53262: PUSH
53263: LD_INT 2
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 1
53272: PUSH
53273: LD_INT 4
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 0
53282: PUSH
53283: LD_INT 4
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 1
53292: NEG
53293: PUSH
53294: LD_INT 3
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 1
53303: PUSH
53304: LD_INT 5
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 0
53313: PUSH
53314: LD_INT 5
53316: PUSH
53317: EMPTY
53318: LIST
53319: LIST
53320: PUSH
53321: LD_INT 1
53323: NEG
53324: PUSH
53325: LD_INT 4
53327: PUSH
53328: EMPTY
53329: LIST
53330: LIST
53331: PUSH
53332: LD_INT 1
53334: PUSH
53335: LD_INT 6
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 0
53344: PUSH
53345: LD_INT 6
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 1
53354: NEG
53355: PUSH
53356: LD_INT 5
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: EMPTY
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: LIST
53375: LIST
53376: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
53377: LD_ADDR_VAR 0 33
53381: PUSH
53382: LD_INT 2
53384: NEG
53385: PUSH
53386: LD_INT 1
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 3
53395: NEG
53396: PUSH
53397: LD_INT 0
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 3
53406: NEG
53407: PUSH
53408: LD_INT 1
53410: NEG
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: LD_INT 3
53418: NEG
53419: PUSH
53420: LD_INT 1
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: PUSH
53427: LD_INT 4
53429: NEG
53430: PUSH
53431: LD_INT 0
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 4
53440: NEG
53441: PUSH
53442: LD_INT 1
53444: NEG
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 4
53452: NEG
53453: PUSH
53454: LD_INT 1
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: LD_INT 5
53463: NEG
53464: PUSH
53465: LD_INT 0
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 5
53474: NEG
53475: PUSH
53476: LD_INT 1
53478: NEG
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 5
53486: NEG
53487: PUSH
53488: LD_INT 1
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: PUSH
53495: LD_INT 6
53497: NEG
53498: PUSH
53499: LD_INT 0
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 6
53508: NEG
53509: PUSH
53510: LD_INT 1
53512: NEG
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: EMPTY
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
53532: LD_ADDR_VAR 0 34
53536: PUSH
53537: LD_INT 2
53539: NEG
53540: PUSH
53541: LD_INT 3
53543: NEG
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: LD_INT 3
53551: NEG
53552: PUSH
53553: LD_INT 2
53555: NEG
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 3
53563: NEG
53564: PUSH
53565: LD_INT 3
53567: NEG
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 3
53575: NEG
53576: PUSH
53577: LD_INT 4
53579: NEG
53580: PUSH
53581: EMPTY
53582: LIST
53583: LIST
53584: PUSH
53585: LD_INT 4
53587: NEG
53588: PUSH
53589: LD_INT 3
53591: NEG
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 4
53599: NEG
53600: PUSH
53601: LD_INT 4
53603: NEG
53604: PUSH
53605: EMPTY
53606: LIST
53607: LIST
53608: PUSH
53609: LD_INT 4
53611: NEG
53612: PUSH
53613: LD_INT 5
53615: NEG
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: LD_INT 5
53623: NEG
53624: PUSH
53625: LD_INT 4
53627: NEG
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 5
53635: NEG
53636: PUSH
53637: LD_INT 5
53639: NEG
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 5
53647: NEG
53648: PUSH
53649: LD_INT 6
53651: NEG
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 6
53659: NEG
53660: PUSH
53661: LD_INT 5
53663: NEG
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 6
53671: NEG
53672: PUSH
53673: LD_INT 6
53675: NEG
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
53695: LD_ADDR_VAR 0 41
53699: PUSH
53700: LD_INT 0
53702: PUSH
53703: LD_INT 2
53705: NEG
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 1
53713: NEG
53714: PUSH
53715: LD_INT 3
53717: NEG
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 1
53725: PUSH
53726: LD_INT 2
53728: NEG
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: LIST
53738: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
53739: LD_ADDR_VAR 0 42
53743: PUSH
53744: LD_INT 2
53746: PUSH
53747: LD_INT 0
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PUSH
53754: LD_INT 2
53756: PUSH
53757: LD_INT 1
53759: NEG
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 3
53767: PUSH
53768: LD_INT 1
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: LIST
53779: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
53780: LD_ADDR_VAR 0 43
53784: PUSH
53785: LD_INT 2
53787: PUSH
53788: LD_INT 2
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 3
53797: PUSH
53798: LD_INT 2
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 2
53807: PUSH
53808: LD_INT 3
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: LIST
53819: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
53820: LD_ADDR_VAR 0 44
53824: PUSH
53825: LD_INT 0
53827: PUSH
53828: LD_INT 2
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 1
53837: PUSH
53838: LD_INT 3
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 1
53847: NEG
53848: PUSH
53849: LD_INT 2
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: LIST
53860: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53861: LD_ADDR_VAR 0 45
53865: PUSH
53866: LD_INT 2
53868: NEG
53869: PUSH
53870: LD_INT 0
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 2
53879: NEG
53880: PUSH
53881: LD_INT 1
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 3
53890: NEG
53891: PUSH
53892: LD_INT 1
53894: NEG
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: LIST
53904: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
53905: LD_ADDR_VAR 0 46
53909: PUSH
53910: LD_INT 2
53912: NEG
53913: PUSH
53914: LD_INT 2
53916: NEG
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 2
53924: NEG
53925: PUSH
53926: LD_INT 3
53928: NEG
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: LD_INT 3
53936: NEG
53937: PUSH
53938: LD_INT 2
53940: NEG
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: LIST
53950: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
53951: LD_ADDR_VAR 0 47
53955: PUSH
53956: LD_INT 2
53958: NEG
53959: PUSH
53960: LD_INT 3
53962: NEG
53963: PUSH
53964: EMPTY
53965: LIST
53966: LIST
53967: PUSH
53968: LD_INT 1
53970: NEG
53971: PUSH
53972: LD_INT 3
53974: NEG
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53984: LD_ADDR_VAR 0 48
53988: PUSH
53989: LD_INT 1
53991: PUSH
53992: LD_INT 2
53994: NEG
53995: PUSH
53996: EMPTY
53997: LIST
53998: LIST
53999: PUSH
54000: LD_INT 2
54002: PUSH
54003: LD_INT 1
54005: NEG
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
54015: LD_ADDR_VAR 0 49
54019: PUSH
54020: LD_INT 3
54022: PUSH
54023: LD_INT 1
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 3
54032: PUSH
54033: LD_INT 2
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
54044: LD_ADDR_VAR 0 50
54048: PUSH
54049: LD_INT 2
54051: PUSH
54052: LD_INT 3
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 1
54061: PUSH
54062: LD_INT 3
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
54073: LD_ADDR_VAR 0 51
54077: PUSH
54078: LD_INT 1
54080: NEG
54081: PUSH
54082: LD_INT 2
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 2
54091: NEG
54092: PUSH
54093: LD_INT 1
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
54104: LD_ADDR_VAR 0 52
54108: PUSH
54109: LD_INT 3
54111: NEG
54112: PUSH
54113: LD_INT 1
54115: NEG
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 3
54123: NEG
54124: PUSH
54125: LD_INT 2
54127: NEG
54128: PUSH
54129: EMPTY
54130: LIST
54131: LIST
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
54137: LD_ADDR_VAR 0 53
54141: PUSH
54142: LD_INT 1
54144: NEG
54145: PUSH
54146: LD_INT 3
54148: NEG
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 0
54156: PUSH
54157: LD_INT 3
54159: NEG
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 1
54167: PUSH
54168: LD_INT 2
54170: NEG
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: LIST
54180: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
54181: LD_ADDR_VAR 0 54
54185: PUSH
54186: LD_INT 2
54188: PUSH
54189: LD_INT 1
54191: NEG
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 3
54199: PUSH
54200: LD_INT 0
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 3
54209: PUSH
54210: LD_INT 1
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: EMPTY
54218: LIST
54219: LIST
54220: LIST
54221: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
54222: LD_ADDR_VAR 0 55
54226: PUSH
54227: LD_INT 3
54229: PUSH
54230: LD_INT 2
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 3
54239: PUSH
54240: LD_INT 3
54242: PUSH
54243: EMPTY
54244: LIST
54245: LIST
54246: PUSH
54247: LD_INT 2
54249: PUSH
54250: LD_INT 3
54252: PUSH
54253: EMPTY
54254: LIST
54255: LIST
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: LIST
54261: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
54262: LD_ADDR_VAR 0 56
54266: PUSH
54267: LD_INT 1
54269: PUSH
54270: LD_INT 3
54272: PUSH
54273: EMPTY
54274: LIST
54275: LIST
54276: PUSH
54277: LD_INT 0
54279: PUSH
54280: LD_INT 3
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: LD_INT 1
54289: NEG
54290: PUSH
54291: LD_INT 2
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: LIST
54302: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54303: LD_ADDR_VAR 0 57
54307: PUSH
54308: LD_INT 2
54310: NEG
54311: PUSH
54312: LD_INT 1
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: LD_INT 3
54321: NEG
54322: PUSH
54323: LD_INT 0
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: PUSH
54330: LD_INT 3
54332: NEG
54333: PUSH
54334: LD_INT 1
54336: NEG
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: LIST
54346: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54347: LD_ADDR_VAR 0 58
54351: PUSH
54352: LD_INT 2
54354: NEG
54355: PUSH
54356: LD_INT 3
54358: NEG
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 3
54366: NEG
54367: PUSH
54368: LD_INT 2
54370: NEG
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PUSH
54376: LD_INT 3
54378: NEG
54379: PUSH
54380: LD_INT 3
54382: NEG
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: LIST
54392: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
54393: LD_ADDR_VAR 0 59
54397: PUSH
54398: LD_INT 1
54400: NEG
54401: PUSH
54402: LD_INT 2
54404: NEG
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 0
54412: PUSH
54413: LD_INT 2
54415: NEG
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 1
54423: PUSH
54424: LD_INT 1
54426: NEG
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: LIST
54436: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54437: LD_ADDR_VAR 0 60
54441: PUSH
54442: LD_INT 1
54444: PUSH
54445: LD_INT 1
54447: NEG
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 2
54455: PUSH
54456: LD_INT 0
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 2
54465: PUSH
54466: LD_INT 1
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: LIST
54477: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54478: LD_ADDR_VAR 0 61
54482: PUSH
54483: LD_INT 2
54485: PUSH
54486: LD_INT 1
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 2
54495: PUSH
54496: LD_INT 2
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 1
54505: PUSH
54506: LD_INT 2
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: LIST
54517: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54518: LD_ADDR_VAR 0 62
54522: PUSH
54523: LD_INT 1
54525: PUSH
54526: LD_INT 2
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 0
54535: PUSH
54536: LD_INT 2
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 1
54545: NEG
54546: PUSH
54547: LD_INT 1
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: LIST
54558: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54559: LD_ADDR_VAR 0 63
54563: PUSH
54564: LD_INT 1
54566: NEG
54567: PUSH
54568: LD_INT 1
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 2
54577: NEG
54578: PUSH
54579: LD_INT 0
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 2
54588: NEG
54589: PUSH
54590: LD_INT 1
54592: NEG
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: LIST
54602: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54603: LD_ADDR_VAR 0 64
54607: PUSH
54608: LD_INT 1
54610: NEG
54611: PUSH
54612: LD_INT 2
54614: NEG
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 2
54622: NEG
54623: PUSH
54624: LD_INT 1
54626: NEG
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 2
54634: NEG
54635: PUSH
54636: LD_INT 2
54638: NEG
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: LIST
54648: ST_TO_ADDR
// end ; 2 :
54649: GO 57915
54651: LD_INT 2
54653: DOUBLE
54654: EQUAL
54655: IFTRUE 54659
54657: GO 57914
54659: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
54660: LD_ADDR_VAR 0 29
54664: PUSH
54665: LD_INT 4
54667: PUSH
54668: LD_INT 0
54670: PUSH
54671: EMPTY
54672: LIST
54673: LIST
54674: PUSH
54675: LD_INT 4
54677: PUSH
54678: LD_INT 1
54680: NEG
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 5
54688: PUSH
54689: LD_INT 0
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 5
54698: PUSH
54699: LD_INT 1
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: LD_INT 4
54708: PUSH
54709: LD_INT 1
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 3
54718: PUSH
54719: LD_INT 0
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: PUSH
54726: LD_INT 3
54728: PUSH
54729: LD_INT 1
54731: NEG
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 3
54739: PUSH
54740: LD_INT 2
54742: NEG
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 5
54750: PUSH
54751: LD_INT 2
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 3
54760: PUSH
54761: LD_INT 3
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: LD_INT 3
54770: PUSH
54771: LD_INT 2
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 4
54780: PUSH
54781: LD_INT 3
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 4
54790: PUSH
54791: LD_INT 4
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: LD_INT 3
54800: PUSH
54801: LD_INT 4
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: LD_INT 2
54810: PUSH
54811: LD_INT 3
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: PUSH
54818: LD_INT 2
54820: PUSH
54821: LD_INT 2
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 4
54830: PUSH
54831: LD_INT 2
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 2
54840: PUSH
54841: LD_INT 4
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 0
54850: PUSH
54851: LD_INT 4
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 0
54860: PUSH
54861: LD_INT 3
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: PUSH
54868: LD_INT 1
54870: PUSH
54871: LD_INT 4
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 1
54880: PUSH
54881: LD_INT 5
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: LD_INT 0
54890: PUSH
54891: LD_INT 5
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: LD_INT 1
54900: NEG
54901: PUSH
54902: LD_INT 4
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 1
54911: NEG
54912: PUSH
54913: LD_INT 3
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 2
54922: PUSH
54923: LD_INT 5
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 2
54932: NEG
54933: PUSH
54934: LD_INT 3
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: LD_INT 3
54943: NEG
54944: PUSH
54945: LD_INT 0
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 3
54954: NEG
54955: PUSH
54956: LD_INT 1
54958: NEG
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PUSH
54964: LD_INT 2
54966: NEG
54967: PUSH
54968: LD_INT 0
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 2
54977: NEG
54978: PUSH
54979: LD_INT 1
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 3
54988: NEG
54989: PUSH
54990: LD_INT 1
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: LD_INT 4
54999: NEG
55000: PUSH
55001: LD_INT 0
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: LD_INT 4
55010: NEG
55011: PUSH
55012: LD_INT 1
55014: NEG
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 4
55022: NEG
55023: PUSH
55024: LD_INT 2
55026: NEG
55027: PUSH
55028: EMPTY
55029: LIST
55030: LIST
55031: PUSH
55032: LD_INT 2
55034: NEG
55035: PUSH
55036: LD_INT 2
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: LD_INT 4
55045: NEG
55046: PUSH
55047: LD_INT 4
55049: NEG
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 4
55057: NEG
55058: PUSH
55059: LD_INT 5
55061: NEG
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: LD_INT 3
55069: NEG
55070: PUSH
55071: LD_INT 4
55073: NEG
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: LD_INT 3
55081: NEG
55082: PUSH
55083: LD_INT 3
55085: NEG
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 4
55093: NEG
55094: PUSH
55095: LD_INT 3
55097: NEG
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 5
55105: NEG
55106: PUSH
55107: LD_INT 4
55109: NEG
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: LD_INT 5
55117: NEG
55118: PUSH
55119: LD_INT 5
55121: NEG
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 3
55129: NEG
55130: PUSH
55131: LD_INT 5
55133: NEG
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: PUSH
55139: LD_INT 5
55141: NEG
55142: PUSH
55143: LD_INT 3
55145: NEG
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: LIST
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: LIST
55170: LIST
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
55198: LD_ADDR_VAR 0 30
55202: PUSH
55203: LD_INT 4
55205: PUSH
55206: LD_INT 4
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: LD_INT 4
55215: PUSH
55216: LD_INT 3
55218: PUSH
55219: EMPTY
55220: LIST
55221: LIST
55222: PUSH
55223: LD_INT 5
55225: PUSH
55226: LD_INT 4
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: LD_INT 5
55235: PUSH
55236: LD_INT 5
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: LD_INT 4
55245: PUSH
55246: LD_INT 5
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 3
55255: PUSH
55256: LD_INT 4
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 3
55265: PUSH
55266: LD_INT 3
55268: PUSH
55269: EMPTY
55270: LIST
55271: LIST
55272: PUSH
55273: LD_INT 5
55275: PUSH
55276: LD_INT 3
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 3
55285: PUSH
55286: LD_INT 5
55288: PUSH
55289: EMPTY
55290: LIST
55291: LIST
55292: PUSH
55293: LD_INT 0
55295: PUSH
55296: LD_INT 3
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 0
55305: PUSH
55306: LD_INT 2
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 1
55315: PUSH
55316: LD_INT 3
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 1
55325: PUSH
55326: LD_INT 4
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: LD_INT 0
55335: PUSH
55336: LD_INT 4
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 1
55345: NEG
55346: PUSH
55347: LD_INT 3
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PUSH
55354: LD_INT 1
55356: NEG
55357: PUSH
55358: LD_INT 2
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 2
55367: PUSH
55368: LD_INT 4
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 2
55377: NEG
55378: PUSH
55379: LD_INT 2
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 4
55388: NEG
55389: PUSH
55390: LD_INT 0
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 4
55399: NEG
55400: PUSH
55401: LD_INT 1
55403: NEG
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 3
55411: NEG
55412: PUSH
55413: LD_INT 0
55415: PUSH
55416: EMPTY
55417: LIST
55418: LIST
55419: PUSH
55420: LD_INT 3
55422: NEG
55423: PUSH
55424: LD_INT 1
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 4
55433: NEG
55434: PUSH
55435: LD_INT 1
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 5
55444: NEG
55445: PUSH
55446: LD_INT 0
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 5
55455: NEG
55456: PUSH
55457: LD_INT 1
55459: NEG
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 5
55467: NEG
55468: PUSH
55469: LD_INT 2
55471: NEG
55472: PUSH
55473: EMPTY
55474: LIST
55475: LIST
55476: PUSH
55477: LD_INT 3
55479: NEG
55480: PUSH
55481: LD_INT 2
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 3
55490: NEG
55491: PUSH
55492: LD_INT 3
55494: NEG
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 3
55502: NEG
55503: PUSH
55504: LD_INT 4
55506: NEG
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 2
55514: NEG
55515: PUSH
55516: LD_INT 3
55518: NEG
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 2
55526: NEG
55527: PUSH
55528: LD_INT 2
55530: NEG
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 3
55538: NEG
55539: PUSH
55540: LD_INT 2
55542: NEG
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: LD_INT 4
55550: NEG
55551: PUSH
55552: LD_INT 3
55554: NEG
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: PUSH
55560: LD_INT 4
55562: NEG
55563: PUSH
55564: LD_INT 4
55566: NEG
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 2
55574: NEG
55575: PUSH
55576: LD_INT 4
55578: NEG
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 4
55586: NEG
55587: PUSH
55588: LD_INT 2
55590: NEG
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: PUSH
55596: LD_INT 0
55598: PUSH
55599: LD_INT 4
55601: NEG
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 0
55609: PUSH
55610: LD_INT 5
55612: NEG
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: PUSH
55618: LD_INT 1
55620: PUSH
55621: LD_INT 4
55623: NEG
55624: PUSH
55625: EMPTY
55626: LIST
55627: LIST
55628: PUSH
55629: LD_INT 1
55631: PUSH
55632: LD_INT 3
55634: NEG
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 0
55642: PUSH
55643: LD_INT 3
55645: NEG
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: LD_INT 1
55653: NEG
55654: PUSH
55655: LD_INT 4
55657: NEG
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: PUSH
55663: LD_INT 1
55665: NEG
55666: PUSH
55667: LD_INT 5
55669: NEG
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 2
55677: PUSH
55678: LD_INT 3
55680: NEG
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 2
55688: NEG
55689: PUSH
55690: LD_INT 5
55692: NEG
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: LIST
55723: LIST
55724: LIST
55725: LIST
55726: LIST
55727: LIST
55728: LIST
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: LIST
55742: LIST
55743: LIST
55744: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
55745: LD_ADDR_VAR 0 31
55749: PUSH
55750: LD_INT 0
55752: PUSH
55753: LD_INT 4
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 0
55762: PUSH
55763: LD_INT 3
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 1
55772: PUSH
55773: LD_INT 4
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 1
55782: PUSH
55783: LD_INT 5
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 0
55792: PUSH
55793: LD_INT 5
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 1
55802: NEG
55803: PUSH
55804: LD_INT 4
55806: PUSH
55807: EMPTY
55808: LIST
55809: LIST
55810: PUSH
55811: LD_INT 1
55813: NEG
55814: PUSH
55815: LD_INT 3
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 2
55824: PUSH
55825: LD_INT 5
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 2
55834: NEG
55835: PUSH
55836: LD_INT 3
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: LD_INT 3
55845: NEG
55846: PUSH
55847: LD_INT 0
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 3
55856: NEG
55857: PUSH
55858: LD_INT 1
55860: NEG
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 2
55868: NEG
55869: PUSH
55870: LD_INT 0
55872: PUSH
55873: EMPTY
55874: LIST
55875: LIST
55876: PUSH
55877: LD_INT 2
55879: NEG
55880: PUSH
55881: LD_INT 1
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 3
55890: NEG
55891: PUSH
55892: LD_INT 1
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 4
55901: NEG
55902: PUSH
55903: LD_INT 0
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 4
55912: NEG
55913: PUSH
55914: LD_INT 1
55916: NEG
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 4
55924: NEG
55925: PUSH
55926: LD_INT 2
55928: NEG
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 2
55936: NEG
55937: PUSH
55938: LD_INT 2
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 4
55947: NEG
55948: PUSH
55949: LD_INT 4
55951: NEG
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 4
55959: NEG
55960: PUSH
55961: LD_INT 5
55963: NEG
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 3
55971: NEG
55972: PUSH
55973: LD_INT 4
55975: NEG
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 3
55983: NEG
55984: PUSH
55985: LD_INT 3
55987: NEG
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 4
55995: NEG
55996: PUSH
55997: LD_INT 3
55999: NEG
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 5
56007: NEG
56008: PUSH
56009: LD_INT 4
56011: NEG
56012: PUSH
56013: EMPTY
56014: LIST
56015: LIST
56016: PUSH
56017: LD_INT 5
56019: NEG
56020: PUSH
56021: LD_INT 5
56023: NEG
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 3
56031: NEG
56032: PUSH
56033: LD_INT 5
56035: NEG
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 5
56043: NEG
56044: PUSH
56045: LD_INT 3
56047: NEG
56048: PUSH
56049: EMPTY
56050: LIST
56051: LIST
56052: PUSH
56053: LD_INT 0
56055: PUSH
56056: LD_INT 3
56058: NEG
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: LD_INT 0
56066: PUSH
56067: LD_INT 4
56069: NEG
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: LD_INT 1
56077: PUSH
56078: LD_INT 3
56080: NEG
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: LD_INT 1
56088: PUSH
56089: LD_INT 2
56091: NEG
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 0
56099: PUSH
56100: LD_INT 2
56102: NEG
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: LD_INT 1
56110: NEG
56111: PUSH
56112: LD_INT 3
56114: NEG
56115: PUSH
56116: EMPTY
56117: LIST
56118: LIST
56119: PUSH
56120: LD_INT 1
56122: NEG
56123: PUSH
56124: LD_INT 4
56126: NEG
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 2
56134: PUSH
56135: LD_INT 2
56137: NEG
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 2
56145: NEG
56146: PUSH
56147: LD_INT 4
56149: NEG
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 4
56157: PUSH
56158: LD_INT 0
56160: PUSH
56161: EMPTY
56162: LIST
56163: LIST
56164: PUSH
56165: LD_INT 4
56167: PUSH
56168: LD_INT 1
56170: NEG
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 5
56178: PUSH
56179: LD_INT 0
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: LD_INT 5
56188: PUSH
56189: LD_INT 1
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 4
56198: PUSH
56199: LD_INT 1
56201: PUSH
56202: EMPTY
56203: LIST
56204: LIST
56205: PUSH
56206: LD_INT 3
56208: PUSH
56209: LD_INT 0
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 3
56218: PUSH
56219: LD_INT 1
56221: NEG
56222: PUSH
56223: EMPTY
56224: LIST
56225: LIST
56226: PUSH
56227: LD_INT 3
56229: PUSH
56230: LD_INT 2
56232: NEG
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: PUSH
56238: LD_INT 5
56240: PUSH
56241: LD_INT 2
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: LIST
56254: LIST
56255: LIST
56256: LIST
56257: LIST
56258: LIST
56259: LIST
56260: LIST
56261: LIST
56262: LIST
56263: LIST
56264: LIST
56265: LIST
56266: LIST
56267: LIST
56268: LIST
56269: LIST
56270: LIST
56271: LIST
56272: LIST
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
56295: LD_ADDR_VAR 0 32
56299: PUSH
56300: LD_INT 4
56302: NEG
56303: PUSH
56304: LD_INT 0
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 4
56313: NEG
56314: PUSH
56315: LD_INT 1
56317: NEG
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 3
56325: NEG
56326: PUSH
56327: LD_INT 0
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: PUSH
56334: LD_INT 3
56336: NEG
56337: PUSH
56338: LD_INT 1
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 4
56347: NEG
56348: PUSH
56349: LD_INT 1
56351: PUSH
56352: EMPTY
56353: LIST
56354: LIST
56355: PUSH
56356: LD_INT 5
56358: NEG
56359: PUSH
56360: LD_INT 0
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: PUSH
56367: LD_INT 5
56369: NEG
56370: PUSH
56371: LD_INT 1
56373: NEG
56374: PUSH
56375: EMPTY
56376: LIST
56377: LIST
56378: PUSH
56379: LD_INT 5
56381: NEG
56382: PUSH
56383: LD_INT 2
56385: NEG
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PUSH
56391: LD_INT 3
56393: NEG
56394: PUSH
56395: LD_INT 2
56397: PUSH
56398: EMPTY
56399: LIST
56400: LIST
56401: PUSH
56402: LD_INT 3
56404: NEG
56405: PUSH
56406: LD_INT 3
56408: NEG
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 3
56416: NEG
56417: PUSH
56418: LD_INT 4
56420: NEG
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 2
56428: NEG
56429: PUSH
56430: LD_INT 3
56432: NEG
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 2
56440: NEG
56441: PUSH
56442: LD_INT 2
56444: NEG
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 3
56452: NEG
56453: PUSH
56454: LD_INT 2
56456: NEG
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 4
56464: NEG
56465: PUSH
56466: LD_INT 3
56468: NEG
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 4
56476: NEG
56477: PUSH
56478: LD_INT 4
56480: NEG
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 2
56488: NEG
56489: PUSH
56490: LD_INT 4
56492: NEG
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 4
56500: NEG
56501: PUSH
56502: LD_INT 2
56504: NEG
56505: PUSH
56506: EMPTY
56507: LIST
56508: LIST
56509: PUSH
56510: LD_INT 0
56512: PUSH
56513: LD_INT 4
56515: NEG
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 0
56523: PUSH
56524: LD_INT 5
56526: NEG
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 1
56534: PUSH
56535: LD_INT 4
56537: NEG
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 1
56545: PUSH
56546: LD_INT 3
56548: NEG
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 0
56556: PUSH
56557: LD_INT 3
56559: NEG
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 1
56567: NEG
56568: PUSH
56569: LD_INT 4
56571: NEG
56572: PUSH
56573: EMPTY
56574: LIST
56575: LIST
56576: PUSH
56577: LD_INT 1
56579: NEG
56580: PUSH
56581: LD_INT 5
56583: NEG
56584: PUSH
56585: EMPTY
56586: LIST
56587: LIST
56588: PUSH
56589: LD_INT 2
56591: PUSH
56592: LD_INT 3
56594: NEG
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: LD_INT 2
56602: NEG
56603: PUSH
56604: LD_INT 5
56606: NEG
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 3
56614: PUSH
56615: LD_INT 0
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 3
56624: PUSH
56625: LD_INT 1
56627: NEG
56628: PUSH
56629: EMPTY
56630: LIST
56631: LIST
56632: PUSH
56633: LD_INT 4
56635: PUSH
56636: LD_INT 0
56638: PUSH
56639: EMPTY
56640: LIST
56641: LIST
56642: PUSH
56643: LD_INT 4
56645: PUSH
56646: LD_INT 1
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: PUSH
56653: LD_INT 3
56655: PUSH
56656: LD_INT 1
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: PUSH
56663: LD_INT 2
56665: PUSH
56666: LD_INT 0
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: PUSH
56673: LD_INT 2
56675: PUSH
56676: LD_INT 1
56678: NEG
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: LD_INT 2
56686: PUSH
56687: LD_INT 2
56689: NEG
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 4
56697: PUSH
56698: LD_INT 2
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: LD_INT 4
56707: PUSH
56708: LD_INT 4
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 4
56717: PUSH
56718: LD_INT 3
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 5
56727: PUSH
56728: LD_INT 4
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: LD_INT 5
56737: PUSH
56738: LD_INT 5
56740: PUSH
56741: EMPTY
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 4
56747: PUSH
56748: LD_INT 5
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: PUSH
56755: LD_INT 3
56757: PUSH
56758: LD_INT 4
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 3
56767: PUSH
56768: LD_INT 3
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 5
56777: PUSH
56778: LD_INT 3
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 3
56787: PUSH
56788: LD_INT 5
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: LIST
56835: LIST
56836: LIST
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
56842: LD_ADDR_VAR 0 33
56846: PUSH
56847: LD_INT 4
56849: NEG
56850: PUSH
56851: LD_INT 4
56853: NEG
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 4
56861: NEG
56862: PUSH
56863: LD_INT 5
56865: NEG
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 3
56873: NEG
56874: PUSH
56875: LD_INT 4
56877: NEG
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 3
56885: NEG
56886: PUSH
56887: LD_INT 3
56889: NEG
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 4
56897: NEG
56898: PUSH
56899: LD_INT 3
56901: NEG
56902: PUSH
56903: EMPTY
56904: LIST
56905: LIST
56906: PUSH
56907: LD_INT 5
56909: NEG
56910: PUSH
56911: LD_INT 4
56913: NEG
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 5
56921: NEG
56922: PUSH
56923: LD_INT 5
56925: NEG
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 3
56933: NEG
56934: PUSH
56935: LD_INT 5
56937: NEG
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: PUSH
56943: LD_INT 5
56945: NEG
56946: PUSH
56947: LD_INT 3
56949: NEG
56950: PUSH
56951: EMPTY
56952: LIST
56953: LIST
56954: PUSH
56955: LD_INT 0
56957: PUSH
56958: LD_INT 3
56960: NEG
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 0
56968: PUSH
56969: LD_INT 4
56971: NEG
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: LD_INT 1
56979: PUSH
56980: LD_INT 3
56982: NEG
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 1
56990: PUSH
56991: LD_INT 2
56993: NEG
56994: PUSH
56995: EMPTY
56996: LIST
56997: LIST
56998: PUSH
56999: LD_INT 0
57001: PUSH
57002: LD_INT 2
57004: NEG
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: PUSH
57010: LD_INT 1
57012: NEG
57013: PUSH
57014: LD_INT 3
57016: NEG
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 1
57024: NEG
57025: PUSH
57026: LD_INT 4
57028: NEG
57029: PUSH
57030: EMPTY
57031: LIST
57032: LIST
57033: PUSH
57034: LD_INT 2
57036: PUSH
57037: LD_INT 2
57039: NEG
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: LD_INT 2
57047: NEG
57048: PUSH
57049: LD_INT 4
57051: NEG
57052: PUSH
57053: EMPTY
57054: LIST
57055: LIST
57056: PUSH
57057: LD_INT 4
57059: PUSH
57060: LD_INT 0
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: PUSH
57067: LD_INT 4
57069: PUSH
57070: LD_INT 1
57072: NEG
57073: PUSH
57074: EMPTY
57075: LIST
57076: LIST
57077: PUSH
57078: LD_INT 5
57080: PUSH
57081: LD_INT 0
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: LD_INT 5
57090: PUSH
57091: LD_INT 1
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: LD_INT 4
57100: PUSH
57101: LD_INT 1
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: PUSH
57108: LD_INT 3
57110: PUSH
57111: LD_INT 0
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 3
57120: PUSH
57121: LD_INT 1
57123: NEG
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 3
57131: PUSH
57132: LD_INT 2
57134: NEG
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 5
57142: PUSH
57143: LD_INT 2
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: LD_INT 3
57152: PUSH
57153: LD_INT 3
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PUSH
57160: LD_INT 3
57162: PUSH
57163: LD_INT 2
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: LD_INT 4
57172: PUSH
57173: LD_INT 3
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 4
57182: PUSH
57183: LD_INT 4
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: LD_INT 3
57192: PUSH
57193: LD_INT 4
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: LD_INT 2
57202: PUSH
57203: LD_INT 3
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 2
57212: PUSH
57213: LD_INT 2
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 4
57222: PUSH
57223: LD_INT 2
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: LD_INT 2
57232: PUSH
57233: LD_INT 4
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: PUSH
57240: LD_INT 0
57242: PUSH
57243: LD_INT 4
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 0
57252: PUSH
57253: LD_INT 3
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 1
57262: PUSH
57263: LD_INT 4
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 1
57272: PUSH
57273: LD_INT 5
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: PUSH
57280: LD_INT 0
57282: PUSH
57283: LD_INT 5
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 1
57292: NEG
57293: PUSH
57294: LD_INT 4
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: PUSH
57301: LD_INT 1
57303: NEG
57304: PUSH
57305: LD_INT 3
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: LD_INT 2
57314: PUSH
57315: LD_INT 5
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 2
57324: NEG
57325: PUSH
57326: LD_INT 3
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: LIST
57342: LIST
57343: LIST
57344: LIST
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: LIST
57357: LIST
57358: LIST
57359: LIST
57360: LIST
57361: LIST
57362: LIST
57363: LIST
57364: LIST
57365: LIST
57366: LIST
57367: LIST
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: LIST
57374: LIST
57375: LIST
57376: LIST
57377: LIST
57378: LIST
57379: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
57380: LD_ADDR_VAR 0 34
57384: PUSH
57385: LD_INT 0
57387: PUSH
57388: LD_INT 4
57390: NEG
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: LD_INT 0
57398: PUSH
57399: LD_INT 5
57401: NEG
57402: PUSH
57403: EMPTY
57404: LIST
57405: LIST
57406: PUSH
57407: LD_INT 1
57409: PUSH
57410: LD_INT 4
57412: NEG
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 1
57420: PUSH
57421: LD_INT 3
57423: NEG
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 0
57431: PUSH
57432: LD_INT 3
57434: NEG
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 1
57442: NEG
57443: PUSH
57444: LD_INT 4
57446: NEG
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: LD_INT 1
57454: NEG
57455: PUSH
57456: LD_INT 5
57458: NEG
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: LD_INT 2
57466: PUSH
57467: LD_INT 3
57469: NEG
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 2
57477: NEG
57478: PUSH
57479: LD_INT 5
57481: NEG
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: LD_INT 3
57489: PUSH
57490: LD_INT 0
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: PUSH
57497: LD_INT 3
57499: PUSH
57500: LD_INT 1
57502: NEG
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: PUSH
57508: LD_INT 4
57510: PUSH
57511: LD_INT 0
57513: PUSH
57514: EMPTY
57515: LIST
57516: LIST
57517: PUSH
57518: LD_INT 4
57520: PUSH
57521: LD_INT 1
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 3
57530: PUSH
57531: LD_INT 1
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 2
57540: PUSH
57541: LD_INT 0
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 2
57550: PUSH
57551: LD_INT 1
57553: NEG
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: LD_INT 2
57561: PUSH
57562: LD_INT 2
57564: NEG
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: PUSH
57570: LD_INT 4
57572: PUSH
57573: LD_INT 2
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: LD_INT 4
57582: PUSH
57583: LD_INT 4
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: PUSH
57590: LD_INT 4
57592: PUSH
57593: LD_INT 3
57595: PUSH
57596: EMPTY
57597: LIST
57598: LIST
57599: PUSH
57600: LD_INT 5
57602: PUSH
57603: LD_INT 4
57605: PUSH
57606: EMPTY
57607: LIST
57608: LIST
57609: PUSH
57610: LD_INT 5
57612: PUSH
57613: LD_INT 5
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: LD_INT 4
57622: PUSH
57623: LD_INT 5
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: PUSH
57630: LD_INT 3
57632: PUSH
57633: LD_INT 4
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 3
57642: PUSH
57643: LD_INT 3
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 5
57652: PUSH
57653: LD_INT 3
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: LD_INT 3
57662: PUSH
57663: LD_INT 5
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: PUSH
57670: LD_INT 0
57672: PUSH
57673: LD_INT 3
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 0
57682: PUSH
57683: LD_INT 2
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 1
57692: PUSH
57693: LD_INT 3
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 1
57702: PUSH
57703: LD_INT 4
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 0
57712: PUSH
57713: LD_INT 4
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 1
57722: NEG
57723: PUSH
57724: LD_INT 3
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 1
57733: NEG
57734: PUSH
57735: LD_INT 2
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 2
57744: PUSH
57745: LD_INT 4
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: LD_INT 2
57754: NEG
57755: PUSH
57756: LD_INT 2
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: LD_INT 4
57765: NEG
57766: PUSH
57767: LD_INT 0
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 4
57776: NEG
57777: PUSH
57778: LD_INT 1
57780: NEG
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: PUSH
57786: LD_INT 3
57788: NEG
57789: PUSH
57790: LD_INT 0
57792: PUSH
57793: EMPTY
57794: LIST
57795: LIST
57796: PUSH
57797: LD_INT 3
57799: NEG
57800: PUSH
57801: LD_INT 1
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 4
57810: NEG
57811: PUSH
57812: LD_INT 1
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 5
57821: NEG
57822: PUSH
57823: LD_INT 0
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: LD_INT 5
57832: NEG
57833: PUSH
57834: LD_INT 1
57836: NEG
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: LD_INT 5
57844: NEG
57845: PUSH
57846: LD_INT 2
57848: NEG
57849: PUSH
57850: EMPTY
57851: LIST
57852: LIST
57853: PUSH
57854: LD_INT 3
57856: NEG
57857: PUSH
57858: LD_INT 2
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: LIST
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: LIST
57891: LIST
57892: LIST
57893: LIST
57894: LIST
57895: LIST
57896: LIST
57897: LIST
57898: LIST
57899: LIST
57900: LIST
57901: LIST
57902: LIST
57903: LIST
57904: LIST
57905: LIST
57906: LIST
57907: LIST
57908: LIST
57909: LIST
57910: LIST
57911: ST_TO_ADDR
// end ; end ;
57912: GO 57915
57914: POP
// case btype of b_depot , b_warehouse :
57915: LD_VAR 0 1
57919: PUSH
57920: LD_INT 0
57922: DOUBLE
57923: EQUAL
57924: IFTRUE 57934
57926: LD_INT 1
57928: DOUBLE
57929: EQUAL
57930: IFTRUE 57934
57932: GO 58135
57934: POP
// case nation of nation_american :
57935: LD_VAR 0 5
57939: PUSH
57940: LD_INT 1
57942: DOUBLE
57943: EQUAL
57944: IFTRUE 57948
57946: GO 58004
57948: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
57949: LD_ADDR_VAR 0 9
57953: PUSH
57954: LD_VAR 0 11
57958: PUSH
57959: LD_VAR 0 12
57963: PUSH
57964: LD_VAR 0 13
57968: PUSH
57969: LD_VAR 0 14
57973: PUSH
57974: LD_VAR 0 15
57978: PUSH
57979: LD_VAR 0 16
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: PUSH
57992: LD_VAR 0 4
57996: PUSH
57997: LD_INT 1
57999: PLUS
58000: ARRAY
58001: ST_TO_ADDR
58002: GO 58133
58004: LD_INT 2
58006: DOUBLE
58007: EQUAL
58008: IFTRUE 58012
58010: GO 58068
58012: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
58013: LD_ADDR_VAR 0 9
58017: PUSH
58018: LD_VAR 0 17
58022: PUSH
58023: LD_VAR 0 18
58027: PUSH
58028: LD_VAR 0 19
58032: PUSH
58033: LD_VAR 0 20
58037: PUSH
58038: LD_VAR 0 21
58042: PUSH
58043: LD_VAR 0 22
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: LIST
58052: LIST
58053: LIST
58054: LIST
58055: PUSH
58056: LD_VAR 0 4
58060: PUSH
58061: LD_INT 1
58063: PLUS
58064: ARRAY
58065: ST_TO_ADDR
58066: GO 58133
58068: LD_INT 3
58070: DOUBLE
58071: EQUAL
58072: IFTRUE 58076
58074: GO 58132
58076: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
58077: LD_ADDR_VAR 0 9
58081: PUSH
58082: LD_VAR 0 23
58086: PUSH
58087: LD_VAR 0 24
58091: PUSH
58092: LD_VAR 0 25
58096: PUSH
58097: LD_VAR 0 26
58101: PUSH
58102: LD_VAR 0 27
58106: PUSH
58107: LD_VAR 0 28
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: LIST
58116: LIST
58117: LIST
58118: LIST
58119: PUSH
58120: LD_VAR 0 4
58124: PUSH
58125: LD_INT 1
58127: PLUS
58128: ARRAY
58129: ST_TO_ADDR
58130: GO 58133
58132: POP
58133: GO 58688
58135: LD_INT 2
58137: DOUBLE
58138: EQUAL
58139: IFTRUE 58149
58141: LD_INT 3
58143: DOUBLE
58144: EQUAL
58145: IFTRUE 58149
58147: GO 58205
58149: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
58150: LD_ADDR_VAR 0 9
58154: PUSH
58155: LD_VAR 0 29
58159: PUSH
58160: LD_VAR 0 30
58164: PUSH
58165: LD_VAR 0 31
58169: PUSH
58170: LD_VAR 0 32
58174: PUSH
58175: LD_VAR 0 33
58179: PUSH
58180: LD_VAR 0 34
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: PUSH
58193: LD_VAR 0 4
58197: PUSH
58198: LD_INT 1
58200: PLUS
58201: ARRAY
58202: ST_TO_ADDR
58203: GO 58688
58205: LD_INT 16
58207: DOUBLE
58208: EQUAL
58209: IFTRUE 58267
58211: LD_INT 17
58213: DOUBLE
58214: EQUAL
58215: IFTRUE 58267
58217: LD_INT 18
58219: DOUBLE
58220: EQUAL
58221: IFTRUE 58267
58223: LD_INT 19
58225: DOUBLE
58226: EQUAL
58227: IFTRUE 58267
58229: LD_INT 22
58231: DOUBLE
58232: EQUAL
58233: IFTRUE 58267
58235: LD_INT 20
58237: DOUBLE
58238: EQUAL
58239: IFTRUE 58267
58241: LD_INT 21
58243: DOUBLE
58244: EQUAL
58245: IFTRUE 58267
58247: LD_INT 23
58249: DOUBLE
58250: EQUAL
58251: IFTRUE 58267
58253: LD_INT 24
58255: DOUBLE
58256: EQUAL
58257: IFTRUE 58267
58259: LD_INT 25
58261: DOUBLE
58262: EQUAL
58263: IFTRUE 58267
58265: GO 58323
58267: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
58268: LD_ADDR_VAR 0 9
58272: PUSH
58273: LD_VAR 0 35
58277: PUSH
58278: LD_VAR 0 36
58282: PUSH
58283: LD_VAR 0 37
58287: PUSH
58288: LD_VAR 0 38
58292: PUSH
58293: LD_VAR 0 39
58297: PUSH
58298: LD_VAR 0 40
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: PUSH
58311: LD_VAR 0 4
58315: PUSH
58316: LD_INT 1
58318: PLUS
58319: ARRAY
58320: ST_TO_ADDR
58321: GO 58688
58323: LD_INT 6
58325: DOUBLE
58326: EQUAL
58327: IFTRUE 58379
58329: LD_INT 7
58331: DOUBLE
58332: EQUAL
58333: IFTRUE 58379
58335: LD_INT 8
58337: DOUBLE
58338: EQUAL
58339: IFTRUE 58379
58341: LD_INT 13
58343: DOUBLE
58344: EQUAL
58345: IFTRUE 58379
58347: LD_INT 12
58349: DOUBLE
58350: EQUAL
58351: IFTRUE 58379
58353: LD_INT 15
58355: DOUBLE
58356: EQUAL
58357: IFTRUE 58379
58359: LD_INT 11
58361: DOUBLE
58362: EQUAL
58363: IFTRUE 58379
58365: LD_INT 14
58367: DOUBLE
58368: EQUAL
58369: IFTRUE 58379
58371: LD_INT 10
58373: DOUBLE
58374: EQUAL
58375: IFTRUE 58379
58377: GO 58435
58379: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
58380: LD_ADDR_VAR 0 9
58384: PUSH
58385: LD_VAR 0 41
58389: PUSH
58390: LD_VAR 0 42
58394: PUSH
58395: LD_VAR 0 43
58399: PUSH
58400: LD_VAR 0 44
58404: PUSH
58405: LD_VAR 0 45
58409: PUSH
58410: LD_VAR 0 46
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: PUSH
58423: LD_VAR 0 4
58427: PUSH
58428: LD_INT 1
58430: PLUS
58431: ARRAY
58432: ST_TO_ADDR
58433: GO 58688
58435: LD_INT 36
58437: DOUBLE
58438: EQUAL
58439: IFTRUE 58443
58441: GO 58499
58443: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
58444: LD_ADDR_VAR 0 9
58448: PUSH
58449: LD_VAR 0 47
58453: PUSH
58454: LD_VAR 0 48
58458: PUSH
58459: LD_VAR 0 49
58463: PUSH
58464: LD_VAR 0 50
58468: PUSH
58469: LD_VAR 0 51
58473: PUSH
58474: LD_VAR 0 52
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: LIST
58483: LIST
58484: LIST
58485: LIST
58486: PUSH
58487: LD_VAR 0 4
58491: PUSH
58492: LD_INT 1
58494: PLUS
58495: ARRAY
58496: ST_TO_ADDR
58497: GO 58688
58499: LD_INT 4
58501: DOUBLE
58502: EQUAL
58503: IFTRUE 58525
58505: LD_INT 5
58507: DOUBLE
58508: EQUAL
58509: IFTRUE 58525
58511: LD_INT 34
58513: DOUBLE
58514: EQUAL
58515: IFTRUE 58525
58517: LD_INT 37
58519: DOUBLE
58520: EQUAL
58521: IFTRUE 58525
58523: GO 58581
58525: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
58526: LD_ADDR_VAR 0 9
58530: PUSH
58531: LD_VAR 0 53
58535: PUSH
58536: LD_VAR 0 54
58540: PUSH
58541: LD_VAR 0 55
58545: PUSH
58546: LD_VAR 0 56
58550: PUSH
58551: LD_VAR 0 57
58555: PUSH
58556: LD_VAR 0 58
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: PUSH
58569: LD_VAR 0 4
58573: PUSH
58574: LD_INT 1
58576: PLUS
58577: ARRAY
58578: ST_TO_ADDR
58579: GO 58688
58581: LD_INT 31
58583: DOUBLE
58584: EQUAL
58585: IFTRUE 58631
58587: LD_INT 32
58589: DOUBLE
58590: EQUAL
58591: IFTRUE 58631
58593: LD_INT 33
58595: DOUBLE
58596: EQUAL
58597: IFTRUE 58631
58599: LD_INT 27
58601: DOUBLE
58602: EQUAL
58603: IFTRUE 58631
58605: LD_INT 26
58607: DOUBLE
58608: EQUAL
58609: IFTRUE 58631
58611: LD_INT 28
58613: DOUBLE
58614: EQUAL
58615: IFTRUE 58631
58617: LD_INT 29
58619: DOUBLE
58620: EQUAL
58621: IFTRUE 58631
58623: LD_INT 30
58625: DOUBLE
58626: EQUAL
58627: IFTRUE 58631
58629: GO 58687
58631: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
58632: LD_ADDR_VAR 0 9
58636: PUSH
58637: LD_VAR 0 59
58641: PUSH
58642: LD_VAR 0 60
58646: PUSH
58647: LD_VAR 0 61
58651: PUSH
58652: LD_VAR 0 62
58656: PUSH
58657: LD_VAR 0 63
58661: PUSH
58662: LD_VAR 0 64
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: LIST
58671: LIST
58672: LIST
58673: LIST
58674: PUSH
58675: LD_VAR 0 4
58679: PUSH
58680: LD_INT 1
58682: PLUS
58683: ARRAY
58684: ST_TO_ADDR
58685: GO 58688
58687: POP
// temp_list2 = [ ] ;
58688: LD_ADDR_VAR 0 10
58692: PUSH
58693: EMPTY
58694: ST_TO_ADDR
// for i in temp_list do
58695: LD_ADDR_VAR 0 8
58699: PUSH
58700: LD_VAR 0 9
58704: PUSH
58705: FOR_IN
58706: IFFALSE 58758
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
58708: LD_ADDR_VAR 0 10
58712: PUSH
58713: LD_VAR 0 10
58717: PUSH
58718: LD_VAR 0 8
58722: PUSH
58723: LD_INT 1
58725: ARRAY
58726: PUSH
58727: LD_VAR 0 2
58731: PLUS
58732: PUSH
58733: LD_VAR 0 8
58737: PUSH
58738: LD_INT 2
58740: ARRAY
58741: PUSH
58742: LD_VAR 0 3
58746: PLUS
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: EMPTY
58753: LIST
58754: ADD
58755: ST_TO_ADDR
58756: GO 58705
58758: POP
58759: POP
// result = temp_list2 ;
58760: LD_ADDR_VAR 0 7
58764: PUSH
58765: LD_VAR 0 10
58769: ST_TO_ADDR
// end ;
58770: LD_VAR 0 7
58774: RET
// export function EnemyInRange ( unit , dist ) ; begin
58775: LD_INT 0
58777: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
58778: LD_ADDR_VAR 0 3
58782: PUSH
58783: LD_VAR 0 1
58787: PPUSH
58788: CALL_OW 255
58792: PPUSH
58793: LD_VAR 0 1
58797: PPUSH
58798: CALL_OW 250
58802: PPUSH
58803: LD_VAR 0 1
58807: PPUSH
58808: CALL_OW 251
58812: PPUSH
58813: LD_VAR 0 2
58817: PPUSH
58818: CALL 32879 0 4
58822: PUSH
58823: LD_INT 4
58825: ARRAY
58826: ST_TO_ADDR
// end ;
58827: LD_VAR 0 3
58831: RET
// export function PlayerSeeMe ( unit ) ; begin
58832: LD_INT 0
58834: PPUSH
// result := See ( your_side , unit ) ;
58835: LD_ADDR_VAR 0 2
58839: PUSH
58840: LD_OWVAR 2
58844: PPUSH
58845: LD_VAR 0 1
58849: PPUSH
58850: CALL_OW 292
58854: ST_TO_ADDR
// end ;
58855: LD_VAR 0 2
58859: RET
// export function ReverseDir ( unit ) ; begin
58860: LD_INT 0
58862: PPUSH
// if not unit then
58863: LD_VAR 0 1
58867: NOT
58868: IFFALSE 58872
// exit ;
58870: GO 58895
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
58872: LD_ADDR_VAR 0 2
58876: PUSH
58877: LD_VAR 0 1
58881: PPUSH
58882: CALL_OW 254
58886: PUSH
58887: LD_INT 3
58889: PLUS
58890: PUSH
58891: LD_INT 6
58893: MOD
58894: ST_TO_ADDR
// end ;
58895: LD_VAR 0 2
58899: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
58900: LD_INT 0
58902: PPUSH
58903: PPUSH
58904: PPUSH
58905: PPUSH
58906: PPUSH
// if not hexes then
58907: LD_VAR 0 2
58911: NOT
58912: IFFALSE 58916
// exit ;
58914: GO 59064
// dist := 9999 ;
58916: LD_ADDR_VAR 0 5
58920: PUSH
58921: LD_INT 9999
58923: ST_TO_ADDR
// for i = 1 to hexes do
58924: LD_ADDR_VAR 0 4
58928: PUSH
58929: DOUBLE
58930: LD_INT 1
58932: DEC
58933: ST_TO_ADDR
58934: LD_VAR 0 2
58938: PUSH
58939: FOR_TO
58940: IFFALSE 59052
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
58942: LD_VAR 0 1
58946: PPUSH
58947: LD_VAR 0 2
58951: PUSH
58952: LD_VAR 0 4
58956: ARRAY
58957: PUSH
58958: LD_INT 1
58960: ARRAY
58961: PPUSH
58962: LD_VAR 0 2
58966: PUSH
58967: LD_VAR 0 4
58971: ARRAY
58972: PUSH
58973: LD_INT 2
58975: ARRAY
58976: PPUSH
58977: CALL_OW 297
58981: PUSH
58982: LD_VAR 0 5
58986: LESS
58987: IFFALSE 59050
// begin hex := hexes [ i ] ;
58989: LD_ADDR_VAR 0 7
58993: PUSH
58994: LD_VAR 0 2
58998: PUSH
58999: LD_VAR 0 4
59003: ARRAY
59004: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59005: LD_ADDR_VAR 0 5
59009: PUSH
59010: LD_VAR 0 1
59014: PPUSH
59015: LD_VAR 0 2
59019: PUSH
59020: LD_VAR 0 4
59024: ARRAY
59025: PUSH
59026: LD_INT 1
59028: ARRAY
59029: PPUSH
59030: LD_VAR 0 2
59034: PUSH
59035: LD_VAR 0 4
59039: ARRAY
59040: PUSH
59041: LD_INT 2
59043: ARRAY
59044: PPUSH
59045: CALL_OW 297
59049: ST_TO_ADDR
// end ; end ;
59050: GO 58939
59052: POP
59053: POP
// result := hex ;
59054: LD_ADDR_VAR 0 3
59058: PUSH
59059: LD_VAR 0 7
59063: ST_TO_ADDR
// end ;
59064: LD_VAR 0 3
59068: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
59069: LD_INT 0
59071: PPUSH
59072: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
59073: LD_VAR 0 1
59077: NOT
59078: PUSH
59079: LD_VAR 0 1
59083: PUSH
59084: LD_INT 21
59086: PUSH
59087: LD_INT 2
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: PUSH
59094: LD_INT 23
59096: PUSH
59097: LD_INT 2
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PPUSH
59108: CALL_OW 69
59112: IN
59113: NOT
59114: OR
59115: IFFALSE 59119
// exit ;
59117: GO 59166
// for i = 1 to 3 do
59119: LD_ADDR_VAR 0 3
59123: PUSH
59124: DOUBLE
59125: LD_INT 1
59127: DEC
59128: ST_TO_ADDR
59129: LD_INT 3
59131: PUSH
59132: FOR_TO
59133: IFFALSE 59164
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
59135: LD_VAR 0 1
59139: PPUSH
59140: CALL_OW 250
59144: PPUSH
59145: LD_VAR 0 1
59149: PPUSH
59150: CALL_OW 251
59154: PPUSH
59155: LD_INT 1
59157: PPUSH
59158: CALL_OW 453
59162: GO 59132
59164: POP
59165: POP
// end ;
59166: LD_VAR 0 2
59170: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
59171: LD_INT 0
59173: PPUSH
59174: PPUSH
59175: PPUSH
59176: PPUSH
59177: PPUSH
59178: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
59179: LD_VAR 0 1
59183: NOT
59184: PUSH
59185: LD_VAR 0 2
59189: NOT
59190: OR
59191: PUSH
59192: LD_VAR 0 1
59196: PPUSH
59197: CALL_OW 314
59201: OR
59202: IFFALSE 59206
// exit ;
59204: GO 59647
// x := GetX ( enemy_unit ) ;
59206: LD_ADDR_VAR 0 7
59210: PUSH
59211: LD_VAR 0 2
59215: PPUSH
59216: CALL_OW 250
59220: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
59221: LD_ADDR_VAR 0 8
59225: PUSH
59226: LD_VAR 0 2
59230: PPUSH
59231: CALL_OW 251
59235: ST_TO_ADDR
// if not x or not y then
59236: LD_VAR 0 7
59240: NOT
59241: PUSH
59242: LD_VAR 0 8
59246: NOT
59247: OR
59248: IFFALSE 59252
// exit ;
59250: GO 59647
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
59252: LD_ADDR_VAR 0 6
59256: PUSH
59257: LD_VAR 0 7
59261: PPUSH
59262: LD_INT 0
59264: PPUSH
59265: LD_INT 4
59267: PPUSH
59268: CALL_OW 272
59272: PUSH
59273: LD_VAR 0 8
59277: PPUSH
59278: LD_INT 0
59280: PPUSH
59281: LD_INT 4
59283: PPUSH
59284: CALL_OW 273
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: LD_VAR 0 7
59297: PPUSH
59298: LD_INT 1
59300: PPUSH
59301: LD_INT 4
59303: PPUSH
59304: CALL_OW 272
59308: PUSH
59309: LD_VAR 0 8
59313: PPUSH
59314: LD_INT 1
59316: PPUSH
59317: LD_INT 4
59319: PPUSH
59320: CALL_OW 273
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_VAR 0 7
59333: PPUSH
59334: LD_INT 2
59336: PPUSH
59337: LD_INT 4
59339: PPUSH
59340: CALL_OW 272
59344: PUSH
59345: LD_VAR 0 8
59349: PPUSH
59350: LD_INT 2
59352: PPUSH
59353: LD_INT 4
59355: PPUSH
59356: CALL_OW 273
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: LD_VAR 0 7
59369: PPUSH
59370: LD_INT 3
59372: PPUSH
59373: LD_INT 4
59375: PPUSH
59376: CALL_OW 272
59380: PUSH
59381: LD_VAR 0 8
59385: PPUSH
59386: LD_INT 3
59388: PPUSH
59389: LD_INT 4
59391: PPUSH
59392: CALL_OW 273
59396: PUSH
59397: EMPTY
59398: LIST
59399: LIST
59400: PUSH
59401: LD_VAR 0 7
59405: PPUSH
59406: LD_INT 4
59408: PPUSH
59409: LD_INT 4
59411: PPUSH
59412: CALL_OW 272
59416: PUSH
59417: LD_VAR 0 8
59421: PPUSH
59422: LD_INT 4
59424: PPUSH
59425: LD_INT 4
59427: PPUSH
59428: CALL_OW 273
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: LD_VAR 0 7
59441: PPUSH
59442: LD_INT 5
59444: PPUSH
59445: LD_INT 4
59447: PPUSH
59448: CALL_OW 272
59452: PUSH
59453: LD_VAR 0 8
59457: PPUSH
59458: LD_INT 5
59460: PPUSH
59461: LD_INT 4
59463: PPUSH
59464: CALL_OW 273
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: LIST
59477: LIST
59478: LIST
59479: LIST
59480: ST_TO_ADDR
// for i = tmp downto 1 do
59481: LD_ADDR_VAR 0 4
59485: PUSH
59486: DOUBLE
59487: LD_VAR 0 6
59491: INC
59492: ST_TO_ADDR
59493: LD_INT 1
59495: PUSH
59496: FOR_DOWNTO
59497: IFFALSE 59598
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
59499: LD_VAR 0 6
59503: PUSH
59504: LD_VAR 0 4
59508: ARRAY
59509: PUSH
59510: LD_INT 1
59512: ARRAY
59513: PPUSH
59514: LD_VAR 0 6
59518: PUSH
59519: LD_VAR 0 4
59523: ARRAY
59524: PUSH
59525: LD_INT 2
59527: ARRAY
59528: PPUSH
59529: CALL_OW 488
59533: NOT
59534: PUSH
59535: LD_VAR 0 6
59539: PUSH
59540: LD_VAR 0 4
59544: ARRAY
59545: PUSH
59546: LD_INT 1
59548: ARRAY
59549: PPUSH
59550: LD_VAR 0 6
59554: PUSH
59555: LD_VAR 0 4
59559: ARRAY
59560: PUSH
59561: LD_INT 2
59563: ARRAY
59564: PPUSH
59565: CALL_OW 428
59569: PUSH
59570: LD_INT 0
59572: NONEQUAL
59573: OR
59574: IFFALSE 59596
// tmp := Delete ( tmp , i ) ;
59576: LD_ADDR_VAR 0 6
59580: PUSH
59581: LD_VAR 0 6
59585: PPUSH
59586: LD_VAR 0 4
59590: PPUSH
59591: CALL_OW 3
59595: ST_TO_ADDR
59596: GO 59496
59598: POP
59599: POP
// j := GetClosestHex ( unit , tmp ) ;
59600: LD_ADDR_VAR 0 5
59604: PUSH
59605: LD_VAR 0 1
59609: PPUSH
59610: LD_VAR 0 6
59614: PPUSH
59615: CALL 58900 0 2
59619: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
59620: LD_VAR 0 1
59624: PPUSH
59625: LD_VAR 0 5
59629: PUSH
59630: LD_INT 1
59632: ARRAY
59633: PPUSH
59634: LD_VAR 0 5
59638: PUSH
59639: LD_INT 2
59641: ARRAY
59642: PPUSH
59643: CALL_OW 111
// end ;
59647: LD_VAR 0 3
59651: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
59652: LD_INT 0
59654: PPUSH
59655: PPUSH
59656: PPUSH
// uc_side = 0 ;
59657: LD_ADDR_OWVAR 20
59661: PUSH
59662: LD_INT 0
59664: ST_TO_ADDR
// uc_nation = 0 ;
59665: LD_ADDR_OWVAR 21
59669: PUSH
59670: LD_INT 0
59672: ST_TO_ADDR
// InitHc ;
59673: CALL_OW 19
// InitVc ;
59677: CALL_OW 20
// if mastodonts then
59681: LD_VAR 0 6
59685: IFFALSE 59752
// for i = 1 to mastodonts do
59687: LD_ADDR_VAR 0 11
59691: PUSH
59692: DOUBLE
59693: LD_INT 1
59695: DEC
59696: ST_TO_ADDR
59697: LD_VAR 0 6
59701: PUSH
59702: FOR_TO
59703: IFFALSE 59750
// begin vc_chassis := 31 ;
59705: LD_ADDR_OWVAR 37
59709: PUSH
59710: LD_INT 31
59712: ST_TO_ADDR
// vc_control := control_rider ;
59713: LD_ADDR_OWVAR 38
59717: PUSH
59718: LD_INT 4
59720: ST_TO_ADDR
// animal := CreateVehicle ;
59721: LD_ADDR_VAR 0 12
59725: PUSH
59726: CALL_OW 45
59730: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59731: LD_VAR 0 12
59735: PPUSH
59736: LD_VAR 0 8
59740: PPUSH
59741: LD_INT 0
59743: PPUSH
59744: CALL 61821 0 3
// end ;
59748: GO 59702
59750: POP
59751: POP
// if horses then
59752: LD_VAR 0 5
59756: IFFALSE 59823
// for i = 1 to horses do
59758: LD_ADDR_VAR 0 11
59762: PUSH
59763: DOUBLE
59764: LD_INT 1
59766: DEC
59767: ST_TO_ADDR
59768: LD_VAR 0 5
59772: PUSH
59773: FOR_TO
59774: IFFALSE 59821
// begin hc_class := 21 ;
59776: LD_ADDR_OWVAR 28
59780: PUSH
59781: LD_INT 21
59783: ST_TO_ADDR
// hc_gallery :=  ;
59784: LD_ADDR_OWVAR 33
59788: PUSH
59789: LD_STRING 
59791: ST_TO_ADDR
// animal := CreateHuman ;
59792: LD_ADDR_VAR 0 12
59796: PUSH
59797: CALL_OW 44
59801: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59802: LD_VAR 0 12
59806: PPUSH
59807: LD_VAR 0 8
59811: PPUSH
59812: LD_INT 0
59814: PPUSH
59815: CALL 61821 0 3
// end ;
59819: GO 59773
59821: POP
59822: POP
// if birds then
59823: LD_VAR 0 1
59827: IFFALSE 59894
// for i = 1 to birds do
59829: LD_ADDR_VAR 0 11
59833: PUSH
59834: DOUBLE
59835: LD_INT 1
59837: DEC
59838: ST_TO_ADDR
59839: LD_VAR 0 1
59843: PUSH
59844: FOR_TO
59845: IFFALSE 59892
// begin hc_class = 18 ;
59847: LD_ADDR_OWVAR 28
59851: PUSH
59852: LD_INT 18
59854: ST_TO_ADDR
// hc_gallery =  ;
59855: LD_ADDR_OWVAR 33
59859: PUSH
59860: LD_STRING 
59862: ST_TO_ADDR
// animal := CreateHuman ;
59863: LD_ADDR_VAR 0 12
59867: PUSH
59868: CALL_OW 44
59872: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59873: LD_VAR 0 12
59877: PPUSH
59878: LD_VAR 0 8
59882: PPUSH
59883: LD_INT 0
59885: PPUSH
59886: CALL 61821 0 3
// end ;
59890: GO 59844
59892: POP
59893: POP
// if tigers then
59894: LD_VAR 0 2
59898: IFFALSE 59982
// for i = 1 to tigers do
59900: LD_ADDR_VAR 0 11
59904: PUSH
59905: DOUBLE
59906: LD_INT 1
59908: DEC
59909: ST_TO_ADDR
59910: LD_VAR 0 2
59914: PUSH
59915: FOR_TO
59916: IFFALSE 59980
// begin hc_class = class_tiger ;
59918: LD_ADDR_OWVAR 28
59922: PUSH
59923: LD_INT 14
59925: ST_TO_ADDR
// hc_gallery =  ;
59926: LD_ADDR_OWVAR 33
59930: PUSH
59931: LD_STRING 
59933: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
59934: LD_ADDR_OWVAR 35
59938: PUSH
59939: LD_INT 7
59941: NEG
59942: PPUSH
59943: LD_INT 7
59945: PPUSH
59946: CALL_OW 12
59950: ST_TO_ADDR
// animal := CreateHuman ;
59951: LD_ADDR_VAR 0 12
59955: PUSH
59956: CALL_OW 44
59960: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59961: LD_VAR 0 12
59965: PPUSH
59966: LD_VAR 0 8
59970: PPUSH
59971: LD_INT 0
59973: PPUSH
59974: CALL 61821 0 3
// end ;
59978: GO 59915
59980: POP
59981: POP
// if apemans then
59982: LD_VAR 0 3
59986: IFFALSE 60109
// for i = 1 to apemans do
59988: LD_ADDR_VAR 0 11
59992: PUSH
59993: DOUBLE
59994: LD_INT 1
59996: DEC
59997: ST_TO_ADDR
59998: LD_VAR 0 3
60002: PUSH
60003: FOR_TO
60004: IFFALSE 60107
// begin hc_class = class_apeman ;
60006: LD_ADDR_OWVAR 28
60010: PUSH
60011: LD_INT 12
60013: ST_TO_ADDR
// hc_gallery =  ;
60014: LD_ADDR_OWVAR 33
60018: PUSH
60019: LD_STRING 
60021: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
60022: LD_ADDR_OWVAR 35
60026: PUSH
60027: LD_INT 5
60029: NEG
60030: PPUSH
60031: LD_INT 5
60033: PPUSH
60034: CALL_OW 12
60038: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
60039: LD_ADDR_OWVAR 31
60043: PUSH
60044: LD_INT 1
60046: PPUSH
60047: LD_INT 3
60049: PPUSH
60050: CALL_OW 12
60054: PUSH
60055: LD_INT 1
60057: PPUSH
60058: LD_INT 3
60060: PPUSH
60061: CALL_OW 12
60065: PUSH
60066: LD_INT 0
60068: PUSH
60069: LD_INT 0
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: LIST
60076: LIST
60077: ST_TO_ADDR
// animal := CreateHuman ;
60078: LD_ADDR_VAR 0 12
60082: PUSH
60083: CALL_OW 44
60087: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60088: LD_VAR 0 12
60092: PPUSH
60093: LD_VAR 0 8
60097: PPUSH
60098: LD_INT 0
60100: PPUSH
60101: CALL 61821 0 3
// end ;
60105: GO 60003
60107: POP
60108: POP
// if enchidnas then
60109: LD_VAR 0 4
60113: IFFALSE 60180
// for i = 1 to enchidnas do
60115: LD_ADDR_VAR 0 11
60119: PUSH
60120: DOUBLE
60121: LD_INT 1
60123: DEC
60124: ST_TO_ADDR
60125: LD_VAR 0 4
60129: PUSH
60130: FOR_TO
60131: IFFALSE 60178
// begin hc_class = 13 ;
60133: LD_ADDR_OWVAR 28
60137: PUSH
60138: LD_INT 13
60140: ST_TO_ADDR
// hc_gallery =  ;
60141: LD_ADDR_OWVAR 33
60145: PUSH
60146: LD_STRING 
60148: ST_TO_ADDR
// animal := CreateHuman ;
60149: LD_ADDR_VAR 0 12
60153: PUSH
60154: CALL_OW 44
60158: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
60159: LD_VAR 0 12
60163: PPUSH
60164: LD_VAR 0 8
60168: PPUSH
60169: LD_INT 0
60171: PPUSH
60172: CALL 61821 0 3
// end ;
60176: GO 60130
60178: POP
60179: POP
// if fishes then
60180: LD_VAR 0 7
60184: IFFALSE 60251
// for i = 1 to fishes do
60186: LD_ADDR_VAR 0 11
60190: PUSH
60191: DOUBLE
60192: LD_INT 1
60194: DEC
60195: ST_TO_ADDR
60196: LD_VAR 0 7
60200: PUSH
60201: FOR_TO
60202: IFFALSE 60249
// begin hc_class = 20 ;
60204: LD_ADDR_OWVAR 28
60208: PUSH
60209: LD_INT 20
60211: ST_TO_ADDR
// hc_gallery =  ;
60212: LD_ADDR_OWVAR 33
60216: PUSH
60217: LD_STRING 
60219: ST_TO_ADDR
// animal := CreateHuman ;
60220: LD_ADDR_VAR 0 12
60224: PUSH
60225: CALL_OW 44
60229: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
60230: LD_VAR 0 12
60234: PPUSH
60235: LD_VAR 0 9
60239: PPUSH
60240: LD_INT 0
60242: PPUSH
60243: CALL 61821 0 3
// end ;
60247: GO 60201
60249: POP
60250: POP
// end ;
60251: LD_VAR 0 10
60255: RET
// export function WantHeal ( sci , unit ) ; begin
60256: LD_INT 0
60258: PPUSH
// if GetTaskList ( sci ) > 0 then
60259: LD_VAR 0 1
60263: PPUSH
60264: CALL_OW 437
60268: PUSH
60269: LD_INT 0
60271: GREATER
60272: IFFALSE 60342
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
60274: LD_VAR 0 1
60278: PPUSH
60279: CALL_OW 437
60283: PUSH
60284: LD_INT 1
60286: ARRAY
60287: PUSH
60288: LD_INT 1
60290: ARRAY
60291: PUSH
60292: LD_STRING l
60294: EQUAL
60295: PUSH
60296: LD_VAR 0 1
60300: PPUSH
60301: CALL_OW 437
60305: PUSH
60306: LD_INT 1
60308: ARRAY
60309: PUSH
60310: LD_INT 4
60312: ARRAY
60313: PUSH
60314: LD_VAR 0 2
60318: EQUAL
60319: AND
60320: IFFALSE 60332
// result := true else
60322: LD_ADDR_VAR 0 3
60326: PUSH
60327: LD_INT 1
60329: ST_TO_ADDR
60330: GO 60340
// result := false ;
60332: LD_ADDR_VAR 0 3
60336: PUSH
60337: LD_INT 0
60339: ST_TO_ADDR
// end else
60340: GO 60350
// result := false ;
60342: LD_ADDR_VAR 0 3
60346: PUSH
60347: LD_INT 0
60349: ST_TO_ADDR
// end ;
60350: LD_VAR 0 3
60354: RET
// export function HealTarget ( sci ) ; begin
60355: LD_INT 0
60357: PPUSH
// if not sci then
60358: LD_VAR 0 1
60362: NOT
60363: IFFALSE 60367
// exit ;
60365: GO 60432
// result := 0 ;
60367: LD_ADDR_VAR 0 2
60371: PUSH
60372: LD_INT 0
60374: ST_TO_ADDR
// if GetTaskList ( sci ) then
60375: LD_VAR 0 1
60379: PPUSH
60380: CALL_OW 437
60384: IFFALSE 60432
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
60386: LD_VAR 0 1
60390: PPUSH
60391: CALL_OW 437
60395: PUSH
60396: LD_INT 1
60398: ARRAY
60399: PUSH
60400: LD_INT 1
60402: ARRAY
60403: PUSH
60404: LD_STRING l
60406: EQUAL
60407: IFFALSE 60432
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
60409: LD_ADDR_VAR 0 2
60413: PUSH
60414: LD_VAR 0 1
60418: PPUSH
60419: CALL_OW 437
60423: PUSH
60424: LD_INT 1
60426: ARRAY
60427: PUSH
60428: LD_INT 4
60430: ARRAY
60431: ST_TO_ADDR
// end ;
60432: LD_VAR 0 2
60436: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
60437: LD_INT 0
60439: PPUSH
60440: PPUSH
60441: PPUSH
60442: PPUSH
// if not base_units then
60443: LD_VAR 0 1
60447: NOT
60448: IFFALSE 60452
// exit ;
60450: GO 60539
// result := false ;
60452: LD_ADDR_VAR 0 2
60456: PUSH
60457: LD_INT 0
60459: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
60460: LD_ADDR_VAR 0 5
60464: PUSH
60465: LD_VAR 0 1
60469: PPUSH
60470: LD_INT 21
60472: PUSH
60473: LD_INT 3
60475: PUSH
60476: EMPTY
60477: LIST
60478: LIST
60479: PPUSH
60480: CALL_OW 72
60484: ST_TO_ADDR
// if not tmp then
60485: LD_VAR 0 5
60489: NOT
60490: IFFALSE 60494
// exit ;
60492: GO 60539
// for i in tmp do
60494: LD_ADDR_VAR 0 3
60498: PUSH
60499: LD_VAR 0 5
60503: PUSH
60504: FOR_IN
60505: IFFALSE 60537
// begin result := EnemyInRange ( i , 22 ) ;
60507: LD_ADDR_VAR 0 2
60511: PUSH
60512: LD_VAR 0 3
60516: PPUSH
60517: LD_INT 22
60519: PPUSH
60520: CALL 58775 0 2
60524: ST_TO_ADDR
// if result then
60525: LD_VAR 0 2
60529: IFFALSE 60535
// exit ;
60531: POP
60532: POP
60533: GO 60539
// end ;
60535: GO 60504
60537: POP
60538: POP
// end ;
60539: LD_VAR 0 2
60543: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
60544: LD_INT 0
60546: PPUSH
60547: PPUSH
// if not units then
60548: LD_VAR 0 1
60552: NOT
60553: IFFALSE 60557
// exit ;
60555: GO 60627
// result := [ ] ;
60557: LD_ADDR_VAR 0 3
60561: PUSH
60562: EMPTY
60563: ST_TO_ADDR
// for i in units do
60564: LD_ADDR_VAR 0 4
60568: PUSH
60569: LD_VAR 0 1
60573: PUSH
60574: FOR_IN
60575: IFFALSE 60625
// if GetTag ( i ) = tag then
60577: LD_VAR 0 4
60581: PPUSH
60582: CALL_OW 110
60586: PUSH
60587: LD_VAR 0 2
60591: EQUAL
60592: IFFALSE 60623
// result := Insert ( result , result + 1 , i ) ;
60594: LD_ADDR_VAR 0 3
60598: PUSH
60599: LD_VAR 0 3
60603: PPUSH
60604: LD_VAR 0 3
60608: PUSH
60609: LD_INT 1
60611: PLUS
60612: PPUSH
60613: LD_VAR 0 4
60617: PPUSH
60618: CALL_OW 2
60622: ST_TO_ADDR
60623: GO 60574
60625: POP
60626: POP
// end ;
60627: LD_VAR 0 3
60631: RET
// export function IsDriver ( un ) ; begin
60632: LD_INT 0
60634: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
60635: LD_ADDR_VAR 0 2
60639: PUSH
60640: LD_VAR 0 1
60644: PUSH
60645: LD_INT 55
60647: PUSH
60648: EMPTY
60649: LIST
60650: PPUSH
60651: CALL_OW 69
60655: IN
60656: ST_TO_ADDR
// end ;
60657: LD_VAR 0 2
60661: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
60662: LD_INT 0
60664: PPUSH
60665: PPUSH
// list := [ ] ;
60666: LD_ADDR_VAR 0 5
60670: PUSH
60671: EMPTY
60672: ST_TO_ADDR
// case d of 0 :
60673: LD_VAR 0 3
60677: PUSH
60678: LD_INT 0
60680: DOUBLE
60681: EQUAL
60682: IFTRUE 60686
60684: GO 60819
60686: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60687: LD_ADDR_VAR 0 5
60691: PUSH
60692: LD_VAR 0 1
60696: PUSH
60697: LD_INT 4
60699: MINUS
60700: PUSH
60701: LD_VAR 0 2
60705: PUSH
60706: LD_INT 4
60708: MINUS
60709: PUSH
60710: LD_INT 2
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: LIST
60717: PUSH
60718: LD_VAR 0 1
60722: PUSH
60723: LD_INT 3
60725: MINUS
60726: PUSH
60727: LD_VAR 0 2
60731: PUSH
60732: LD_INT 1
60734: PUSH
60735: EMPTY
60736: LIST
60737: LIST
60738: LIST
60739: PUSH
60740: LD_VAR 0 1
60744: PUSH
60745: LD_INT 4
60747: PLUS
60748: PUSH
60749: LD_VAR 0 2
60753: PUSH
60754: LD_INT 4
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: LIST
60761: PUSH
60762: LD_VAR 0 1
60766: PUSH
60767: LD_INT 3
60769: PLUS
60770: PUSH
60771: LD_VAR 0 2
60775: PUSH
60776: LD_INT 3
60778: PLUS
60779: PUSH
60780: LD_INT 5
60782: PUSH
60783: EMPTY
60784: LIST
60785: LIST
60786: LIST
60787: PUSH
60788: LD_VAR 0 1
60792: PUSH
60793: LD_VAR 0 2
60797: PUSH
60798: LD_INT 4
60800: PLUS
60801: PUSH
60802: LD_INT 0
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: LIST
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: LIST
60814: LIST
60815: LIST
60816: ST_TO_ADDR
// end ; 1 :
60817: GO 61517
60819: LD_INT 1
60821: DOUBLE
60822: EQUAL
60823: IFTRUE 60827
60825: GO 60960
60827: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
60828: LD_ADDR_VAR 0 5
60832: PUSH
60833: LD_VAR 0 1
60837: PUSH
60838: LD_VAR 0 2
60842: PUSH
60843: LD_INT 4
60845: MINUS
60846: PUSH
60847: LD_INT 3
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: LIST
60854: PUSH
60855: LD_VAR 0 1
60859: PUSH
60860: LD_INT 3
60862: MINUS
60863: PUSH
60864: LD_VAR 0 2
60868: PUSH
60869: LD_INT 3
60871: MINUS
60872: PUSH
60873: LD_INT 2
60875: PUSH
60876: EMPTY
60877: LIST
60878: LIST
60879: LIST
60880: PUSH
60881: LD_VAR 0 1
60885: PUSH
60886: LD_INT 4
60888: MINUS
60889: PUSH
60890: LD_VAR 0 2
60894: PUSH
60895: LD_INT 1
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: LIST
60902: PUSH
60903: LD_VAR 0 1
60907: PUSH
60908: LD_VAR 0 2
60912: PUSH
60913: LD_INT 3
60915: PLUS
60916: PUSH
60917: LD_INT 0
60919: PUSH
60920: EMPTY
60921: LIST
60922: LIST
60923: LIST
60924: PUSH
60925: LD_VAR 0 1
60929: PUSH
60930: LD_INT 4
60932: PLUS
60933: PUSH
60934: LD_VAR 0 2
60938: PUSH
60939: LD_INT 4
60941: PLUS
60942: PUSH
60943: LD_INT 5
60945: PUSH
60946: EMPTY
60947: LIST
60948: LIST
60949: LIST
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: LIST
60955: LIST
60956: LIST
60957: ST_TO_ADDR
// end ; 2 :
60958: GO 61517
60960: LD_INT 2
60962: DOUBLE
60963: EQUAL
60964: IFTRUE 60968
60966: GO 61097
60968: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
60969: LD_ADDR_VAR 0 5
60973: PUSH
60974: LD_VAR 0 1
60978: PUSH
60979: LD_VAR 0 2
60983: PUSH
60984: LD_INT 3
60986: MINUS
60987: PUSH
60988: LD_INT 3
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: LIST
60995: PUSH
60996: LD_VAR 0 1
61000: PUSH
61001: LD_INT 4
61003: PLUS
61004: PUSH
61005: LD_VAR 0 2
61009: PUSH
61010: LD_INT 4
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: LIST
61017: PUSH
61018: LD_VAR 0 1
61022: PUSH
61023: LD_VAR 0 2
61027: PUSH
61028: LD_INT 4
61030: PLUS
61031: PUSH
61032: LD_INT 0
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: LIST
61039: PUSH
61040: LD_VAR 0 1
61044: PUSH
61045: LD_INT 3
61047: MINUS
61048: PUSH
61049: LD_VAR 0 2
61053: PUSH
61054: LD_INT 1
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: LIST
61061: PUSH
61062: LD_VAR 0 1
61066: PUSH
61067: LD_INT 4
61069: MINUS
61070: PUSH
61071: LD_VAR 0 2
61075: PUSH
61076: LD_INT 4
61078: MINUS
61079: PUSH
61080: LD_INT 2
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: LIST
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: LIST
61092: LIST
61093: LIST
61094: ST_TO_ADDR
// end ; 3 :
61095: GO 61517
61097: LD_INT 3
61099: DOUBLE
61100: EQUAL
61101: IFTRUE 61105
61103: GO 61238
61105: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
61106: LD_ADDR_VAR 0 5
61110: PUSH
61111: LD_VAR 0 1
61115: PUSH
61116: LD_INT 3
61118: PLUS
61119: PUSH
61120: LD_VAR 0 2
61124: PUSH
61125: LD_INT 4
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: LIST
61132: PUSH
61133: LD_VAR 0 1
61137: PUSH
61138: LD_INT 4
61140: PLUS
61141: PUSH
61142: LD_VAR 0 2
61146: PUSH
61147: LD_INT 4
61149: PLUS
61150: PUSH
61151: LD_INT 5
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: LIST
61158: PUSH
61159: LD_VAR 0 1
61163: PUSH
61164: LD_INT 4
61166: MINUS
61167: PUSH
61168: LD_VAR 0 2
61172: PUSH
61173: LD_INT 1
61175: PUSH
61176: EMPTY
61177: LIST
61178: LIST
61179: LIST
61180: PUSH
61181: LD_VAR 0 1
61185: PUSH
61186: LD_VAR 0 2
61190: PUSH
61191: LD_INT 4
61193: MINUS
61194: PUSH
61195: LD_INT 3
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: LIST
61202: PUSH
61203: LD_VAR 0 1
61207: PUSH
61208: LD_INT 3
61210: MINUS
61211: PUSH
61212: LD_VAR 0 2
61216: PUSH
61217: LD_INT 3
61219: MINUS
61220: PUSH
61221: LD_INT 2
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: LIST
61228: PUSH
61229: EMPTY
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: LIST
61235: ST_TO_ADDR
// end ; 4 :
61236: GO 61517
61238: LD_INT 4
61240: DOUBLE
61241: EQUAL
61242: IFTRUE 61246
61244: GO 61379
61246: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
61247: LD_ADDR_VAR 0 5
61251: PUSH
61252: LD_VAR 0 1
61256: PUSH
61257: LD_VAR 0 2
61261: PUSH
61262: LD_INT 4
61264: PLUS
61265: PUSH
61266: LD_INT 0
61268: PUSH
61269: EMPTY
61270: LIST
61271: LIST
61272: LIST
61273: PUSH
61274: LD_VAR 0 1
61278: PUSH
61279: LD_INT 3
61281: PLUS
61282: PUSH
61283: LD_VAR 0 2
61287: PUSH
61288: LD_INT 3
61290: PLUS
61291: PUSH
61292: LD_INT 5
61294: PUSH
61295: EMPTY
61296: LIST
61297: LIST
61298: LIST
61299: PUSH
61300: LD_VAR 0 1
61304: PUSH
61305: LD_INT 4
61307: PLUS
61308: PUSH
61309: LD_VAR 0 2
61313: PUSH
61314: LD_INT 4
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: LIST
61321: PUSH
61322: LD_VAR 0 1
61326: PUSH
61327: LD_VAR 0 2
61331: PUSH
61332: LD_INT 3
61334: MINUS
61335: PUSH
61336: LD_INT 3
61338: PUSH
61339: EMPTY
61340: LIST
61341: LIST
61342: LIST
61343: PUSH
61344: LD_VAR 0 1
61348: PUSH
61349: LD_INT 4
61351: MINUS
61352: PUSH
61353: LD_VAR 0 2
61357: PUSH
61358: LD_INT 4
61360: MINUS
61361: PUSH
61362: LD_INT 2
61364: PUSH
61365: EMPTY
61366: LIST
61367: LIST
61368: LIST
61369: PUSH
61370: EMPTY
61371: LIST
61372: LIST
61373: LIST
61374: LIST
61375: LIST
61376: ST_TO_ADDR
// end ; 5 :
61377: GO 61517
61379: LD_INT 5
61381: DOUBLE
61382: EQUAL
61383: IFTRUE 61387
61385: GO 61516
61387: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
61388: LD_ADDR_VAR 0 5
61392: PUSH
61393: LD_VAR 0 1
61397: PUSH
61398: LD_INT 4
61400: MINUS
61401: PUSH
61402: LD_VAR 0 2
61406: PUSH
61407: LD_INT 1
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: LIST
61414: PUSH
61415: LD_VAR 0 1
61419: PUSH
61420: LD_VAR 0 2
61424: PUSH
61425: LD_INT 4
61427: MINUS
61428: PUSH
61429: LD_INT 3
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: LIST
61436: PUSH
61437: LD_VAR 0 1
61441: PUSH
61442: LD_INT 4
61444: PLUS
61445: PUSH
61446: LD_VAR 0 2
61450: PUSH
61451: LD_INT 4
61453: PLUS
61454: PUSH
61455: LD_INT 5
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: LIST
61462: PUSH
61463: LD_VAR 0 1
61467: PUSH
61468: LD_INT 3
61470: PLUS
61471: PUSH
61472: LD_VAR 0 2
61476: PUSH
61477: LD_INT 4
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: LIST
61484: PUSH
61485: LD_VAR 0 1
61489: PUSH
61490: LD_VAR 0 2
61494: PUSH
61495: LD_INT 3
61497: PLUS
61498: PUSH
61499: LD_INT 0
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: LIST
61506: PUSH
61507: EMPTY
61508: LIST
61509: LIST
61510: LIST
61511: LIST
61512: LIST
61513: ST_TO_ADDR
// end ; end ;
61514: GO 61517
61516: POP
// result := list ;
61517: LD_ADDR_VAR 0 4
61521: PUSH
61522: LD_VAR 0 5
61526: ST_TO_ADDR
// end ;
61527: LD_VAR 0 4
61531: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
61532: LD_INT 0
61534: PPUSH
61535: PPUSH
61536: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
61537: LD_VAR 0 1
61541: NOT
61542: PUSH
61543: LD_VAR 0 2
61547: PUSH
61548: LD_INT 1
61550: PUSH
61551: LD_INT 2
61553: PUSH
61554: LD_INT 3
61556: PUSH
61557: LD_INT 4
61559: PUSH
61560: EMPTY
61561: LIST
61562: LIST
61563: LIST
61564: LIST
61565: IN
61566: NOT
61567: OR
61568: IFFALSE 61572
// exit ;
61570: GO 61664
// tmp := [ ] ;
61572: LD_ADDR_VAR 0 5
61576: PUSH
61577: EMPTY
61578: ST_TO_ADDR
// for i in units do
61579: LD_ADDR_VAR 0 4
61583: PUSH
61584: LD_VAR 0 1
61588: PUSH
61589: FOR_IN
61590: IFFALSE 61633
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
61592: LD_ADDR_VAR 0 5
61596: PUSH
61597: LD_VAR 0 5
61601: PPUSH
61602: LD_VAR 0 5
61606: PUSH
61607: LD_INT 1
61609: PLUS
61610: PPUSH
61611: LD_VAR 0 4
61615: PPUSH
61616: LD_VAR 0 2
61620: PPUSH
61621: CALL_OW 259
61625: PPUSH
61626: CALL_OW 2
61630: ST_TO_ADDR
61631: GO 61589
61633: POP
61634: POP
// if not tmp then
61635: LD_VAR 0 5
61639: NOT
61640: IFFALSE 61644
// exit ;
61642: GO 61664
// result := SortListByListDesc ( units , tmp ) ;
61644: LD_ADDR_VAR 0 3
61648: PUSH
61649: LD_VAR 0 1
61653: PPUSH
61654: LD_VAR 0 5
61658: PPUSH
61659: CALL_OW 77
61663: ST_TO_ADDR
// end ;
61664: LD_VAR 0 3
61668: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
61669: LD_INT 0
61671: PPUSH
61672: PPUSH
61673: PPUSH
// x := GetX ( building ) ;
61674: LD_ADDR_VAR 0 4
61678: PUSH
61679: LD_VAR 0 2
61683: PPUSH
61684: CALL_OW 250
61688: ST_TO_ADDR
// y := GetY ( building ) ;
61689: LD_ADDR_VAR 0 5
61693: PUSH
61694: LD_VAR 0 2
61698: PPUSH
61699: CALL_OW 251
61703: ST_TO_ADDR
// if GetTaskList ( unit ) then
61704: LD_VAR 0 1
61708: PPUSH
61709: CALL_OW 437
61713: IFFALSE 61808
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61715: LD_STRING e
61717: PUSH
61718: LD_VAR 0 1
61722: PPUSH
61723: CALL_OW 437
61727: PUSH
61728: LD_INT 1
61730: ARRAY
61731: PUSH
61732: LD_INT 1
61734: ARRAY
61735: EQUAL
61736: PUSH
61737: LD_VAR 0 4
61741: PUSH
61742: LD_VAR 0 1
61746: PPUSH
61747: CALL_OW 437
61751: PUSH
61752: LD_INT 1
61754: ARRAY
61755: PUSH
61756: LD_INT 2
61758: ARRAY
61759: EQUAL
61760: AND
61761: PUSH
61762: LD_VAR 0 5
61766: PUSH
61767: LD_VAR 0 1
61771: PPUSH
61772: CALL_OW 437
61776: PUSH
61777: LD_INT 1
61779: ARRAY
61780: PUSH
61781: LD_INT 3
61783: ARRAY
61784: EQUAL
61785: AND
61786: IFFALSE 61798
// result := true else
61788: LD_ADDR_VAR 0 3
61792: PUSH
61793: LD_INT 1
61795: ST_TO_ADDR
61796: GO 61806
// result := false ;
61798: LD_ADDR_VAR 0 3
61802: PUSH
61803: LD_INT 0
61805: ST_TO_ADDR
// end else
61806: GO 61816
// result := false ;
61808: LD_ADDR_VAR 0 3
61812: PUSH
61813: LD_INT 0
61815: ST_TO_ADDR
// end ;
61816: LD_VAR 0 3
61820: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
61821: LD_INT 0
61823: PPUSH
61824: PPUSH
61825: PPUSH
61826: PPUSH
// if not unit or not area then
61827: LD_VAR 0 1
61831: NOT
61832: PUSH
61833: LD_VAR 0 2
61837: NOT
61838: OR
61839: IFFALSE 61843
// exit ;
61841: GO 62007
// tmp := AreaToList ( area , i ) ;
61843: LD_ADDR_VAR 0 6
61847: PUSH
61848: LD_VAR 0 2
61852: PPUSH
61853: LD_VAR 0 5
61857: PPUSH
61858: CALL_OW 517
61862: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
61863: LD_ADDR_VAR 0 5
61867: PUSH
61868: DOUBLE
61869: LD_INT 1
61871: DEC
61872: ST_TO_ADDR
61873: LD_VAR 0 6
61877: PUSH
61878: LD_INT 1
61880: ARRAY
61881: PUSH
61882: FOR_TO
61883: IFFALSE 62005
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
61885: LD_ADDR_VAR 0 7
61889: PUSH
61890: LD_VAR 0 6
61894: PUSH
61895: LD_INT 1
61897: ARRAY
61898: PUSH
61899: LD_VAR 0 5
61903: ARRAY
61904: PUSH
61905: LD_VAR 0 6
61909: PUSH
61910: LD_INT 2
61912: ARRAY
61913: PUSH
61914: LD_VAR 0 5
61918: ARRAY
61919: PUSH
61920: EMPTY
61921: LIST
61922: LIST
61923: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
61924: LD_VAR 0 7
61928: PUSH
61929: LD_INT 1
61931: ARRAY
61932: PPUSH
61933: LD_VAR 0 7
61937: PUSH
61938: LD_INT 2
61940: ARRAY
61941: PPUSH
61942: CALL_OW 428
61946: PUSH
61947: LD_INT 0
61949: EQUAL
61950: IFFALSE 62003
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
61952: LD_VAR 0 1
61956: PPUSH
61957: LD_VAR 0 7
61961: PUSH
61962: LD_INT 1
61964: ARRAY
61965: PPUSH
61966: LD_VAR 0 7
61970: PUSH
61971: LD_INT 2
61973: ARRAY
61974: PPUSH
61975: LD_VAR 0 3
61979: PPUSH
61980: CALL_OW 48
// result := IsPlaced ( unit ) ;
61984: LD_ADDR_VAR 0 4
61988: PUSH
61989: LD_VAR 0 1
61993: PPUSH
61994: CALL_OW 305
61998: ST_TO_ADDR
// exit ;
61999: POP
62000: POP
62001: GO 62007
// end ; end ;
62003: GO 61882
62005: POP
62006: POP
// end ;
62007: LD_VAR 0 4
62011: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
62012: LD_INT 0
62014: PPUSH
62015: PPUSH
62016: PPUSH
// if not side or side > 8 then
62017: LD_VAR 0 1
62021: NOT
62022: PUSH
62023: LD_VAR 0 1
62027: PUSH
62028: LD_INT 8
62030: GREATER
62031: OR
62032: IFFALSE 62036
// exit ;
62034: GO 62223
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
62036: LD_ADDR_VAR 0 4
62040: PUSH
62041: LD_INT 22
62043: PUSH
62044: LD_VAR 0 1
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: PUSH
62053: LD_INT 21
62055: PUSH
62056: LD_INT 3
62058: PUSH
62059: EMPTY
62060: LIST
62061: LIST
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PPUSH
62067: CALL_OW 69
62071: ST_TO_ADDR
// if not tmp then
62072: LD_VAR 0 4
62076: NOT
62077: IFFALSE 62081
// exit ;
62079: GO 62223
// enable_addtolog := true ;
62081: LD_ADDR_OWVAR 81
62085: PUSH
62086: LD_INT 1
62088: ST_TO_ADDR
// AddToLog ( [ ) ;
62089: LD_STRING [
62091: PPUSH
62092: CALL_OW 561
// for i in tmp do
62096: LD_ADDR_VAR 0 3
62100: PUSH
62101: LD_VAR 0 4
62105: PUSH
62106: FOR_IN
62107: IFFALSE 62214
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
62109: LD_STRING [
62111: PUSH
62112: LD_VAR 0 3
62116: PPUSH
62117: CALL_OW 266
62121: STR
62122: PUSH
62123: LD_STRING , 
62125: STR
62126: PUSH
62127: LD_VAR 0 3
62131: PPUSH
62132: CALL_OW 250
62136: STR
62137: PUSH
62138: LD_STRING , 
62140: STR
62141: PUSH
62142: LD_VAR 0 3
62146: PPUSH
62147: CALL_OW 251
62151: STR
62152: PUSH
62153: LD_STRING , 
62155: STR
62156: PUSH
62157: LD_VAR 0 3
62161: PPUSH
62162: CALL_OW 254
62166: STR
62167: PUSH
62168: LD_STRING , 
62170: STR
62171: PUSH
62172: LD_VAR 0 3
62176: PPUSH
62177: LD_INT 1
62179: PPUSH
62180: CALL_OW 268
62184: STR
62185: PUSH
62186: LD_STRING , 
62188: STR
62189: PUSH
62190: LD_VAR 0 3
62194: PPUSH
62195: LD_INT 2
62197: PPUSH
62198: CALL_OW 268
62202: STR
62203: PUSH
62204: LD_STRING ],
62206: STR
62207: PPUSH
62208: CALL_OW 561
// end ;
62212: GO 62106
62214: POP
62215: POP
// AddToLog ( ]; ) ;
62216: LD_STRING ];
62218: PPUSH
62219: CALL_OW 561
// end ;
62223: LD_VAR 0 2
62227: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
62228: LD_INT 0
62230: PPUSH
62231: PPUSH
62232: PPUSH
62233: PPUSH
62234: PPUSH
// if not area or not rate or not max then
62235: LD_VAR 0 1
62239: NOT
62240: PUSH
62241: LD_VAR 0 2
62245: NOT
62246: OR
62247: PUSH
62248: LD_VAR 0 4
62252: NOT
62253: OR
62254: IFFALSE 62258
// exit ;
62256: GO 62450
// while 1 do
62258: LD_INT 1
62260: IFFALSE 62450
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
62262: LD_ADDR_VAR 0 9
62266: PUSH
62267: LD_VAR 0 1
62271: PPUSH
62272: LD_INT 1
62274: PPUSH
62275: CALL_OW 287
62279: PUSH
62280: LD_INT 10
62282: MUL
62283: ST_TO_ADDR
// r := rate / 10 ;
62284: LD_ADDR_VAR 0 7
62288: PUSH
62289: LD_VAR 0 2
62293: PUSH
62294: LD_INT 10
62296: DIVREAL
62297: ST_TO_ADDR
// time := 1 1$00 ;
62298: LD_ADDR_VAR 0 8
62302: PUSH
62303: LD_INT 2100
62305: ST_TO_ADDR
// if amount < min then
62306: LD_VAR 0 9
62310: PUSH
62311: LD_VAR 0 3
62315: LESS
62316: IFFALSE 62334
// r := r * 2 else
62318: LD_ADDR_VAR 0 7
62322: PUSH
62323: LD_VAR 0 7
62327: PUSH
62328: LD_INT 2
62330: MUL
62331: ST_TO_ADDR
62332: GO 62360
// if amount > max then
62334: LD_VAR 0 9
62338: PUSH
62339: LD_VAR 0 4
62343: GREATER
62344: IFFALSE 62360
// r := r / 2 ;
62346: LD_ADDR_VAR 0 7
62350: PUSH
62351: LD_VAR 0 7
62355: PUSH
62356: LD_INT 2
62358: DIVREAL
62359: ST_TO_ADDR
// time := time / r ;
62360: LD_ADDR_VAR 0 8
62364: PUSH
62365: LD_VAR 0 8
62369: PUSH
62370: LD_VAR 0 7
62374: DIVREAL
62375: ST_TO_ADDR
// if time < 0 then
62376: LD_VAR 0 8
62380: PUSH
62381: LD_INT 0
62383: LESS
62384: IFFALSE 62401
// time := time * - 1 ;
62386: LD_ADDR_VAR 0 8
62390: PUSH
62391: LD_VAR 0 8
62395: PUSH
62396: LD_INT 1
62398: NEG
62399: MUL
62400: ST_TO_ADDR
// wait ( time ) ;
62401: LD_VAR 0 8
62405: PPUSH
62406: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
62410: LD_INT 35
62412: PPUSH
62413: LD_INT 875
62415: PPUSH
62416: CALL_OW 12
62420: PPUSH
62421: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
62425: LD_INT 1
62427: PPUSH
62428: LD_INT 5
62430: PPUSH
62431: CALL_OW 12
62435: PPUSH
62436: LD_VAR 0 1
62440: PPUSH
62441: LD_INT 1
62443: PPUSH
62444: CALL_OW 55
// end ;
62448: GO 62258
// end ;
62450: LD_VAR 0 5
62454: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
62455: LD_INT 0
62457: PPUSH
62458: PPUSH
62459: PPUSH
62460: PPUSH
62461: PPUSH
62462: PPUSH
62463: PPUSH
62464: PPUSH
// if not turrets or not factories then
62465: LD_VAR 0 1
62469: NOT
62470: PUSH
62471: LD_VAR 0 2
62475: NOT
62476: OR
62477: IFFALSE 62481
// exit ;
62479: GO 62788
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
62481: LD_ADDR_VAR 0 10
62485: PUSH
62486: LD_INT 5
62488: PUSH
62489: LD_INT 6
62491: PUSH
62492: EMPTY
62493: LIST
62494: LIST
62495: PUSH
62496: LD_INT 2
62498: PUSH
62499: LD_INT 4
62501: PUSH
62502: EMPTY
62503: LIST
62504: LIST
62505: PUSH
62506: LD_INT 3
62508: PUSH
62509: LD_INT 5
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: PUSH
62516: EMPTY
62517: LIST
62518: LIST
62519: LIST
62520: PUSH
62521: LD_INT 24
62523: PUSH
62524: LD_INT 25
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: PUSH
62531: LD_INT 23
62533: PUSH
62534: LD_INT 27
62536: PUSH
62537: EMPTY
62538: LIST
62539: LIST
62540: PUSH
62541: EMPTY
62542: LIST
62543: LIST
62544: PUSH
62545: LD_INT 42
62547: PUSH
62548: LD_INT 43
62550: PUSH
62551: EMPTY
62552: LIST
62553: LIST
62554: PUSH
62555: LD_INT 44
62557: PUSH
62558: LD_INT 46
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: PUSH
62565: LD_INT 45
62567: PUSH
62568: LD_INT 47
62570: PUSH
62571: EMPTY
62572: LIST
62573: LIST
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: LIST
62579: PUSH
62580: EMPTY
62581: LIST
62582: LIST
62583: LIST
62584: ST_TO_ADDR
// result := [ ] ;
62585: LD_ADDR_VAR 0 3
62589: PUSH
62590: EMPTY
62591: ST_TO_ADDR
// for i in turrets do
62592: LD_ADDR_VAR 0 4
62596: PUSH
62597: LD_VAR 0 1
62601: PUSH
62602: FOR_IN
62603: IFFALSE 62786
// begin nat := GetNation ( i ) ;
62605: LD_ADDR_VAR 0 7
62609: PUSH
62610: LD_VAR 0 4
62614: PPUSH
62615: CALL_OW 248
62619: ST_TO_ADDR
// weapon := 0 ;
62620: LD_ADDR_VAR 0 8
62624: PUSH
62625: LD_INT 0
62627: ST_TO_ADDR
// if not nat then
62628: LD_VAR 0 7
62632: NOT
62633: IFFALSE 62637
// continue ;
62635: GO 62602
// for j in list [ nat ] do
62637: LD_ADDR_VAR 0 5
62641: PUSH
62642: LD_VAR 0 10
62646: PUSH
62647: LD_VAR 0 7
62651: ARRAY
62652: PUSH
62653: FOR_IN
62654: IFFALSE 62695
// if GetBWeapon ( i ) = j [ 1 ] then
62656: LD_VAR 0 4
62660: PPUSH
62661: CALL_OW 269
62665: PUSH
62666: LD_VAR 0 5
62670: PUSH
62671: LD_INT 1
62673: ARRAY
62674: EQUAL
62675: IFFALSE 62693
// begin weapon := j [ 2 ] ;
62677: LD_ADDR_VAR 0 8
62681: PUSH
62682: LD_VAR 0 5
62686: PUSH
62687: LD_INT 2
62689: ARRAY
62690: ST_TO_ADDR
// break ;
62691: GO 62695
// end ;
62693: GO 62653
62695: POP
62696: POP
// if not weapon then
62697: LD_VAR 0 8
62701: NOT
62702: IFFALSE 62706
// continue ;
62704: GO 62602
// for k in factories do
62706: LD_ADDR_VAR 0 6
62710: PUSH
62711: LD_VAR 0 2
62715: PUSH
62716: FOR_IN
62717: IFFALSE 62782
// begin weapons := AvailableWeaponList ( k ) ;
62719: LD_ADDR_VAR 0 9
62723: PUSH
62724: LD_VAR 0 6
62728: PPUSH
62729: CALL_OW 478
62733: ST_TO_ADDR
// if not weapons then
62734: LD_VAR 0 9
62738: NOT
62739: IFFALSE 62743
// continue ;
62741: GO 62716
// if weapon in weapons then
62743: LD_VAR 0 8
62747: PUSH
62748: LD_VAR 0 9
62752: IN
62753: IFFALSE 62780
// begin result := [ i , weapon ] ;
62755: LD_ADDR_VAR 0 3
62759: PUSH
62760: LD_VAR 0 4
62764: PUSH
62765: LD_VAR 0 8
62769: PUSH
62770: EMPTY
62771: LIST
62772: LIST
62773: ST_TO_ADDR
// exit ;
62774: POP
62775: POP
62776: POP
62777: POP
62778: GO 62788
// end ; end ;
62780: GO 62716
62782: POP
62783: POP
// end ;
62784: GO 62602
62786: POP
62787: POP
// end ;
62788: LD_VAR 0 3
62792: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
62793: LD_INT 0
62795: PPUSH
// if not side or side > 8 then
62796: LD_VAR 0 3
62800: NOT
62801: PUSH
62802: LD_VAR 0 3
62806: PUSH
62807: LD_INT 8
62809: GREATER
62810: OR
62811: IFFALSE 62815
// exit ;
62813: GO 62874
// if not range then
62815: LD_VAR 0 4
62819: NOT
62820: IFFALSE 62831
// range := - 12 ;
62822: LD_ADDR_VAR 0 4
62826: PUSH
62827: LD_INT 12
62829: NEG
62830: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
62831: LD_VAR 0 1
62835: PPUSH
62836: LD_VAR 0 2
62840: PPUSH
62841: LD_VAR 0 3
62845: PPUSH
62846: LD_VAR 0 4
62850: PPUSH
62851: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
62855: LD_VAR 0 1
62859: PPUSH
62860: LD_VAR 0 2
62864: PPUSH
62865: LD_VAR 0 3
62869: PPUSH
62870: CALL_OW 331
// end ;
62874: LD_VAR 0 5
62878: RET
// export function Video ( mode ) ; begin
62879: LD_INT 0
62881: PPUSH
// ingame_video = mode ;
62882: LD_ADDR_OWVAR 52
62886: PUSH
62887: LD_VAR 0 1
62891: ST_TO_ADDR
// interface_hidden = mode ;
62892: LD_ADDR_OWVAR 54
62896: PUSH
62897: LD_VAR 0 1
62901: ST_TO_ADDR
// end ;
62902: LD_VAR 0 2
62906: RET
// export function Join ( array , element ) ; begin
62907: LD_INT 0
62909: PPUSH
// result := Replace ( array , array + 1 , element ) ;
62910: LD_ADDR_VAR 0 3
62914: PUSH
62915: LD_VAR 0 1
62919: PPUSH
62920: LD_VAR 0 1
62924: PUSH
62925: LD_INT 1
62927: PLUS
62928: PPUSH
62929: LD_VAR 0 2
62933: PPUSH
62934: CALL_OW 1
62938: ST_TO_ADDR
// end ;
62939: LD_VAR 0 3
62943: RET
// export function JoinUnion ( array , element ) ; begin
62944: LD_INT 0
62946: PPUSH
// result := array union element ;
62947: LD_ADDR_VAR 0 3
62951: PUSH
62952: LD_VAR 0 1
62956: PUSH
62957: LD_VAR 0 2
62961: UNION
62962: ST_TO_ADDR
// end ;
62963: LD_VAR 0 3
62967: RET
// export function GetBehemoths ( side ) ; begin
62968: LD_INT 0
62970: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
62971: LD_ADDR_VAR 0 2
62975: PUSH
62976: LD_INT 22
62978: PUSH
62979: LD_VAR 0 1
62983: PUSH
62984: EMPTY
62985: LIST
62986: LIST
62987: PUSH
62988: LD_INT 31
62990: PUSH
62991: LD_INT 25
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: PUSH
62998: EMPTY
62999: LIST
63000: LIST
63001: PPUSH
63002: CALL_OW 69
63006: ST_TO_ADDR
// end ;
63007: LD_VAR 0 2
63011: RET
// export function Shuffle ( array ) ; var i , index ; begin
63012: LD_INT 0
63014: PPUSH
63015: PPUSH
63016: PPUSH
// result := [ ] ;
63017: LD_ADDR_VAR 0 2
63021: PUSH
63022: EMPTY
63023: ST_TO_ADDR
// if not array then
63024: LD_VAR 0 1
63028: NOT
63029: IFFALSE 63033
// exit ;
63031: GO 63132
// Randomize ;
63033: CALL_OW 10
// for i = array downto 1 do
63037: LD_ADDR_VAR 0 3
63041: PUSH
63042: DOUBLE
63043: LD_VAR 0 1
63047: INC
63048: ST_TO_ADDR
63049: LD_INT 1
63051: PUSH
63052: FOR_DOWNTO
63053: IFFALSE 63130
// begin index := rand ( 1 , array ) ;
63055: LD_ADDR_VAR 0 4
63059: PUSH
63060: LD_INT 1
63062: PPUSH
63063: LD_VAR 0 1
63067: PPUSH
63068: CALL_OW 12
63072: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
63073: LD_ADDR_VAR 0 2
63077: PUSH
63078: LD_VAR 0 2
63082: PPUSH
63083: LD_VAR 0 2
63087: PUSH
63088: LD_INT 1
63090: PLUS
63091: PPUSH
63092: LD_VAR 0 1
63096: PUSH
63097: LD_VAR 0 4
63101: ARRAY
63102: PPUSH
63103: CALL_OW 2
63107: ST_TO_ADDR
// array := Delete ( array , index ) ;
63108: LD_ADDR_VAR 0 1
63112: PUSH
63113: LD_VAR 0 1
63117: PPUSH
63118: LD_VAR 0 4
63122: PPUSH
63123: CALL_OW 3
63127: ST_TO_ADDR
// end ;
63128: GO 63052
63130: POP
63131: POP
// end ;
63132: LD_VAR 0 2
63136: RET
// export function GetBaseMaterials ( base ) ; begin
63137: LD_INT 0
63139: PPUSH
// result := [ 0 , 0 , 0 ] ;
63140: LD_ADDR_VAR 0 2
63144: PUSH
63145: LD_INT 0
63147: PUSH
63148: LD_INT 0
63150: PUSH
63151: LD_INT 0
63153: PUSH
63154: EMPTY
63155: LIST
63156: LIST
63157: LIST
63158: ST_TO_ADDR
// if not base then
63159: LD_VAR 0 1
63163: NOT
63164: IFFALSE 63168
// exit ;
63166: GO 63217
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
63168: LD_ADDR_VAR 0 2
63172: PUSH
63173: LD_VAR 0 1
63177: PPUSH
63178: LD_INT 1
63180: PPUSH
63181: CALL_OW 275
63185: PUSH
63186: LD_VAR 0 1
63190: PPUSH
63191: LD_INT 2
63193: PPUSH
63194: CALL_OW 275
63198: PUSH
63199: LD_VAR 0 1
63203: PPUSH
63204: LD_INT 3
63206: PPUSH
63207: CALL_OW 275
63211: PUSH
63212: EMPTY
63213: LIST
63214: LIST
63215: LIST
63216: ST_TO_ADDR
// end ;
63217: LD_VAR 0 2
63221: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
63222: LD_INT 0
63224: PPUSH
63225: PPUSH
// result := array ;
63226: LD_ADDR_VAR 0 3
63230: PUSH
63231: LD_VAR 0 1
63235: ST_TO_ADDR
// if size > 0 then
63236: LD_VAR 0 2
63240: PUSH
63241: LD_INT 0
63243: GREATER
63244: IFFALSE 63290
// for i := array downto size do
63246: LD_ADDR_VAR 0 4
63250: PUSH
63251: DOUBLE
63252: LD_VAR 0 1
63256: INC
63257: ST_TO_ADDR
63258: LD_VAR 0 2
63262: PUSH
63263: FOR_DOWNTO
63264: IFFALSE 63288
// result := Delete ( result , result ) ;
63266: LD_ADDR_VAR 0 3
63270: PUSH
63271: LD_VAR 0 3
63275: PPUSH
63276: LD_VAR 0 3
63280: PPUSH
63281: CALL_OW 3
63285: ST_TO_ADDR
63286: GO 63263
63288: POP
63289: POP
// end ;
63290: LD_VAR 0 3
63294: RET
// export function ComExit ( unit ) ; var tmp ; begin
63295: LD_INT 0
63297: PPUSH
63298: PPUSH
// if not IsInUnit ( unit ) then
63299: LD_VAR 0 1
63303: PPUSH
63304: CALL_OW 310
63308: NOT
63309: IFFALSE 63313
// exit ;
63311: GO 63373
// tmp := IsInUnit ( unit ) ;
63313: LD_ADDR_VAR 0 3
63317: PUSH
63318: LD_VAR 0 1
63322: PPUSH
63323: CALL_OW 310
63327: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
63328: LD_VAR 0 3
63332: PPUSH
63333: CALL_OW 247
63337: PUSH
63338: LD_INT 2
63340: EQUAL
63341: IFFALSE 63354
// ComExitVehicle ( unit ) else
63343: LD_VAR 0 1
63347: PPUSH
63348: CALL_OW 121
63352: GO 63363
// ComExitBuilding ( unit ) ;
63354: LD_VAR 0 1
63358: PPUSH
63359: CALL_OW 122
// result := tmp ;
63363: LD_ADDR_VAR 0 2
63367: PUSH
63368: LD_VAR 0 3
63372: ST_TO_ADDR
// end ;
63373: LD_VAR 0 2
63377: RET
// export function ResetHc ; begin
63378: LD_INT 0
63380: PPUSH
// InitHc ;
63381: CALL_OW 19
// hc_importance := 0 ;
63385: LD_ADDR_OWVAR 32
63389: PUSH
63390: LD_INT 0
63392: ST_TO_ADDR
// end ;
63393: LD_VAR 0 1
63397: RET
