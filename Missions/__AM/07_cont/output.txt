// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// Init ;
   8: CALL 44 0 0
// DebugMode ;
  12: CALL 265 0 0
// AnimateTrees ( true ) ;
  16: LD_INT 1
  18: PPUSH
  19: CALL_OW 573
// CreateNature ;
  23: CALL 1568 0 0
// PrepareRussians ;
  27: CALL 4559 0 0
// PrepareAmericans ;
  31: CALL 3448 0 0
// Action ;
  35: CALL 8677 0 0
// SaveForQuickRestart ;
  39: CALL_OW 22
// end ;
  43: END
// export debug ; export mission_prev_prefix , mission_prefix ; export buildings_counter , time_to_end , can_end , must_end , kill_counter ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// mission_prefix := 07c_ ;
  55: LD_ADDR_EXP 3
  59: PUSH
  60: LD_STRING 07c_
  62: ST_TO_ADDR
// mission_prev_prefix := 07_ ;
  63: LD_ADDR_EXP 2
  67: PUSH
  68: LD_STRING 07_
  70: ST_TO_ADDR
// buildings_counter := 0 ;
  71: LD_ADDR_EXP 4
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// time_to_end := [ [ 32 32$00 , 29 29$00 , 26 26$00 , 23 23$00 ] [ Difficulty ] , [ 38 38$00 , 36 36$00 , 34 34$00 , 32 32$00 ] [ Difficulty ] , [ 43 43$00 , 41 41$00 , 39 39$00 , 37 37$00 ] [ Difficulty ] ] ;
  79: LD_ADDR_EXP 5
  83: PUSH
  84: LD_INT 67200
  86: PUSH
  87: LD_INT 60900
  89: PUSH
  90: LD_INT 54600
  92: PUSH
  93: LD_INT 48300
  95: PUSH
  96: EMPTY
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: PUSH
 102: LD_OWVAR 67
 106: ARRAY
 107: PUSH
 108: LD_INT 79800
 110: PUSH
 111: LD_INT 75600
 113: PUSH
 114: LD_INT 71400
 116: PUSH
 117: LD_INT 67200
 119: PUSH
 120: EMPTY
 121: LIST
 122: LIST
 123: LIST
 124: LIST
 125: PUSH
 126: LD_OWVAR 67
 130: ARRAY
 131: PUSH
 132: LD_INT 90300
 134: PUSH
 135: LD_INT 86100
 137: PUSH
 138: LD_INT 81900
 140: PUSH
 141: LD_INT 77700
 143: PUSH
 144: EMPTY
 145: LIST
 146: LIST
 147: LIST
 148: LIST
 149: PUSH
 150: LD_OWVAR 67
 154: ARRAY
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: ST_TO_ADDR
// can_end := false ;
 161: LD_ADDR_EXP 6
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// must_end := false ;
 169: LD_ADDR_EXP 7
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// kill_counter := 0 ;
 177: LD_ADDR_EXP 8
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// end ;
 185: LD_VAR 0 1
 189: RET
// every 0 0$01 trigger not debug do
 190: LD_EXP 1
 194: NOT
 195: IFFALSE 264
 197: GO 199
 199: DISABLE
// begin enable ;
 200: ENABLE
// if not must_end then
 201: LD_EXP 7
 205: NOT
 206: IFFALSE 227
// display_strings := [ #Am07-1 , tick ] else
 208: LD_ADDR_OWVAR 47
 212: PUSH
 213: LD_STRING #Am07-1
 215: PUSH
 216: LD_OWVAR 1
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: ST_TO_ADDR
 225: GO 264
// display_strings := [ #Am07-1 , tick , #Am07-2 , time_to_end [ 3 ] - tick ] ;
 227: LD_ADDR_OWVAR 47
 231: PUSH
 232: LD_STRING #Am07-1
 234: PUSH
 235: LD_OWVAR 1
 239: PUSH
 240: LD_STRING #Am07-2
 242: PUSH
 243: LD_EXP 5
 247: PUSH
 248: LD_INT 3
 250: ARRAY
 251: PUSH
 252: LD_OWVAR 1
 256: MINUS
 257: PUSH
 258: EMPTY
 259: LIST
 260: LIST
 261: LIST
 262: LIST
 263: ST_TO_ADDR
// end ;
 264: END
// function DebugMode ; var i ; begin
 265: LD_INT 0
 267: PPUSH
 268: PPUSH
// if not debug then
 269: LD_EXP 1
 273: NOT
 274: IFFALSE 278
// exit ;
 276: GO 293
// Difficulty := 4 ;
 278: LD_ADDR_OWVAR 67
 282: PUSH
 283: LD_INT 4
 285: ST_TO_ADDR
// FogOff ( 1 ) ;
 286: LD_INT 1
 288: PPUSH
 289: CALL_OW 344
// end ;
 293: LD_VAR 0 1
 297: RET
// every 3 trigger debug do var i , filter ;
 298: LD_EXP 1
 302: IFFALSE 391
 304: GO 306
 306: DISABLE
 307: LD_INT 0
 309: PPUSH
 310: PPUSH
// begin enable ;
 311: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 500 ] ] ] ) ;
 312: LD_ADDR_VAR 0 2
 316: PUSH
 317: LD_INT 22
 319: PUSH
 320: LD_INT 1
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PUSH
 327: LD_INT 3
 329: PUSH
 330: LD_INT 24
 332: PUSH
 333: LD_INT 500
 335: PUSH
 336: EMPTY
 337: LIST
 338: LIST
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: PPUSH
 348: CALL_OW 69
 352: ST_TO_ADDR
// if not filter then
 353: LD_VAR 0 2
 357: NOT
 358: IFFALSE 362
// exit ;
 360: GO 391
// for i in filter do
 362: LD_ADDR_VAR 0 1
 366: PUSH
 367: LD_VAR 0 2
 371: PUSH
 372: FOR_IN
 373: IFFALSE 389
// SetLives ( i , 1000 ) ;
 375: LD_VAR 0 1
 379: PPUSH
 380: LD_INT 1000
 382: PPUSH
 383: CALL_OW 234
 387: GO 372
 389: POP
 390: POP
// end ;
 391: PPOPN 2
 393: END
// every 0 0$1 trigger kill_counter >= 20 do
 394: LD_EXP 8
 398: PUSH
 399: LD_INT 20
 401: GREATEREQUAL
 402: IFFALSE 414
 404: GO 406
 406: DISABLE
// SetAchievement ( ACH_HITMAN ) ;
 407: LD_STRING ACH_HITMAN
 409: PPUSH
 410: CALL_OW 543
 414: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) >= 3 do
 415: LD_INT 22
 417: PUSH
 418: LD_INT 1
 420: PUSH
 421: EMPTY
 422: LIST
 423: LIST
 424: PUSH
 425: LD_INT 23
 427: PUSH
 428: LD_INT 3
 430: PUSH
 431: EMPTY
 432: LIST
 433: LIST
 434: PUSH
 435: LD_INT 21
 437: PUSH
 438: LD_INT 2
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: LIST
 449: PPUSH
 450: CALL_OW 69
 454: PUSH
 455: LD_INT 3
 457: GREATEREQUAL
 458: IFFALSE 470
 460: GO 462
 462: DISABLE
// SetAchievement ( ACH_TANKACE ) ;
 463: LD_STRING ACH_TANKACE
 465: PPUSH
 466: CALL_OW 543
 470: END
// every 0 0$1 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) = 0 do
 471: LD_INT 2
 473: PUSH
 474: LD_INT 30
 476: PUSH
 477: LD_INT 0
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PUSH
 484: LD_INT 30
 486: PUSH
 487: LD_INT 1
 489: PUSH
 490: EMPTY
 491: LIST
 492: LIST
 493: PUSH
 494: EMPTY
 495: LIST
 496: LIST
 497: LIST
 498: PPUSH
 499: CALL_OW 69
 503: PUSH
 504: LD_INT 0
 506: EQUAL
 507: IFFALSE 519
 509: GO 511
 511: DISABLE
// SetAchievement ( ACH_COMMANDO ) ; end_of_file
 512: LD_STRING ACH_COMMANDO
 514: PPUSH
 515: CALL_OW 543
 519: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 520: LD_INT 0
 522: PPUSH
// uc_side := side ;
 523: LD_ADDR_OWVAR 20
 527: PUSH
 528: LD_VAR 0 1
 532: ST_TO_ADDR
// uc_nation := nation ;
 533: LD_ADDR_OWVAR 21
 537: PUSH
 538: LD_VAR 0 2
 542: ST_TO_ADDR
// vc_chassis := chassis ;
 543: LD_ADDR_OWVAR 37
 547: PUSH
 548: LD_VAR 0 3
 552: ST_TO_ADDR
// vc_engine := engine ;
 553: LD_ADDR_OWVAR 39
 557: PUSH
 558: LD_VAR 0 4
 562: ST_TO_ADDR
// vc_control := control ;
 563: LD_ADDR_OWVAR 38
 567: PUSH
 568: LD_VAR 0 5
 572: ST_TO_ADDR
// vc_weapon := weapon ;
 573: LD_ADDR_OWVAR 40
 577: PUSH
 578: LD_VAR 0 6
 582: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 583: LD_ADDR_OWVAR 41
 587: PUSH
 588: LD_VAR 0 7
 592: ST_TO_ADDR
// result := CreateVehicle ;
 593: LD_ADDR_VAR 0 8
 597: PUSH
 598: CALL_OW 45
 602: ST_TO_ADDR
// end ;
 603: LD_VAR 0 8
 607: RET
// export function GetRandom ( sex ) ; var i , filter ; begin
 608: LD_INT 0
 610: PPUSH
 611: PPUSH
 612: PPUSH
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] ;
 613: LD_ADDR_VAR 0 4
 617: PUSH
 618: LD_INT 22
 620: PUSH
 621: LD_INT 1
 623: PUSH
 624: EMPTY
 625: LIST
 626: LIST
 627: PUSH
 628: LD_INT 21
 630: PUSH
 631: LD_INT 1
 633: PUSH
 634: EMPTY
 635: LIST
 636: LIST
 637: PUSH
 638: LD_INT 50
 640: PUSH
 641: EMPTY
 642: LIST
 643: PUSH
 644: EMPTY
 645: LIST
 646: LIST
 647: LIST
 648: PPUSH
 649: CALL_OW 69
 653: PUSH
 654: LD_EXP 9
 658: PUSH
 659: LD_EXP 10
 663: PUSH
 664: LD_EXP 11
 668: PUSH
 669: LD_EXP 12
 673: PUSH
 674: LD_EXP 13
 678: PUSH
 679: LD_EXP 14
 683: PUSH
 684: LD_EXP 15
 688: PUSH
 689: LD_EXP 16
 693: PUSH
 694: LD_EXP 18
 698: PUSH
 699: LD_EXP 17
 703: PUSH
 704: EMPTY
 705: LIST
 706: LIST
 707: LIST
 708: LIST
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: DIFF
 716: ST_TO_ADDR
// if not filter then
 717: LD_VAR 0 4
 721: NOT
 722: IFFALSE 726
// exit ;
 724: GO 753
// result := UnitFilter ( filter , [ f_sex , sex ] ) ;
 726: LD_ADDR_VAR 0 2
 730: PUSH
 731: LD_VAR 0 4
 735: PPUSH
 736: LD_INT 26
 738: PUSH
 739: LD_VAR 0 1
 743: PUSH
 744: EMPTY
 745: LIST
 746: LIST
 747: PPUSH
 748: CALL_OW 72
 752: ST_TO_ADDR
// end ;
 753: LD_VAR 0 2
 757: RET
// export function SayX ( units , ident ) ; var i ; begin
 758: LD_INT 0
 760: PPUSH
 761: PPUSH
// result := false ;
 762: LD_ADDR_VAR 0 3
 766: PUSH
 767: LD_INT 0
 769: ST_TO_ADDR
// if not units then
 770: LD_VAR 0 1
 774: NOT
 775: IFFALSE 779
// exit ;
 777: GO 833
// for i in units do
 779: LD_ADDR_VAR 0 4
 783: PUSH
 784: LD_VAR 0 1
 788: PUSH
 789: FOR_IN
 790: IFFALSE 831
// if IsOk ( i ) then
 792: LD_VAR 0 4
 796: PPUSH
 797: CALL_OW 302
 801: IFFALSE 829
// begin Say ( i , ident ) ;
 803: LD_VAR 0 4
 807: PPUSH
 808: LD_VAR 0 2
 812: PPUSH
 813: CALL_OW 88
// result := i ;
 817: LD_ADDR_VAR 0 3
 821: PUSH
 822: LD_VAR 0 4
 826: ST_TO_ADDR
// break ;
 827: GO 831
// end ;
 829: GO 789
 831: POP
 832: POP
// end ;
 833: LD_VAR 0 3
 837: RET
// export function GoToAnotherTower ( un , b , x , y ) ; var i , filter , barracks , side ; begin
 838: LD_INT 0
 840: PPUSH
 841: PPUSH
 842: PPUSH
 843: PPUSH
 844: PPUSH
// if not un or not IsOk ( un ) then
 845: LD_VAR 0 1
 849: NOT
 850: PUSH
 851: LD_VAR 0 1
 855: PPUSH
 856: CALL_OW 302
 860: NOT
 861: OR
 862: IFFALSE 866
// exit ;
 864: GO 1173
// side := GetSide ( un ) ;
 866: LD_ADDR_VAR 0 9
 870: PUSH
 871: LD_VAR 0 1
 875: PPUSH
 876: CALL_OW 255
 880: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_not , [ f_tag , 7 ] ] , [ f_ok ] , [ f_empty ] ] ) diff b ;
 881: LD_ADDR_VAR 0 7
 885: PUSH
 886: LD_INT 22
 888: PUSH
 889: LD_VAR 0 9
 893: PUSH
 894: EMPTY
 895: LIST
 896: LIST
 897: PUSH
 898: LD_INT 30
 900: PUSH
 901: LD_INT 32
 903: PUSH
 904: EMPTY
 905: LIST
 906: LIST
 907: PUSH
 908: LD_INT 3
 910: PUSH
 911: LD_INT 120
 913: PUSH
 914: LD_INT 7
 916: PUSH
 917: EMPTY
 918: LIST
 919: LIST
 920: PUSH
 921: EMPTY
 922: LIST
 923: LIST
 924: PUSH
 925: LD_INT 50
 927: PUSH
 928: EMPTY
 929: LIST
 930: PUSH
 931: LD_INT 58
 933: PUSH
 934: EMPTY
 935: LIST
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: LIST
 941: LIST
 942: LIST
 943: PPUSH
 944: CALL_OW 69
 948: PUSH
 949: LD_VAR 0 2
 953: DIFF
 954: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_barracks ] ] ) ;
 955: LD_ADDR_VAR 0 8
 959: PUSH
 960: LD_INT 22
 962: PUSH
 963: LD_VAR 0 9
 967: PUSH
 968: EMPTY
 969: LIST
 970: LIST
 971: PUSH
 972: LD_INT 30
 974: PUSH
 975: LD_INT 5
 977: PUSH
 978: EMPTY
 979: LIST
 980: LIST
 981: PUSH
 982: EMPTY
 983: LIST
 984: LIST
 985: PPUSH
 986: CALL_OW 69
 990: ST_TO_ADDR
// if not filter then
 991: LD_VAR 0 7
 995: NOT
 996: IFFALSE 1086
// begin if barracks then
 998: LD_VAR 0 8
1002: IFFALSE 1065
// for i in barracks do
1004: LD_ADDR_VAR 0 6
1008: PUSH
1009: LD_VAR 0 8
1013: PUSH
1014: FOR_IN
1015: IFFALSE 1063
// begin if UnitsInside ( i ) < 6 and IsOk ( i ) then
1017: LD_VAR 0 6
1021: PPUSH
1022: CALL_OW 313
1026: PUSH
1027: LD_INT 6
1029: LESS
1030: PUSH
1031: LD_VAR 0 6
1035: PPUSH
1036: CALL_OW 302
1040: AND
1041: IFFALSE 1061
// begin ComEnterUnit ( un , i ) ;
1043: LD_VAR 0 1
1047: PPUSH
1048: LD_VAR 0 6
1052: PPUSH
1053: CALL_OW 120
// exit ;
1057: POP
1058: POP
1059: GO 1173
// end ; end ;
1061: GO 1014
1063: POP
1064: POP
// ComMoveXY ( un , x , y ) ;
1065: LD_VAR 0 1
1069: PPUSH
1070: LD_VAR 0 3
1074: PPUSH
1075: LD_VAR 0 4
1079: PPUSH
1080: CALL_OW 111
// end else
1084: GO 1173
// begin filter := SortByDistanceUnit ( un , filter , true , true ) ;
1086: LD_ADDR_VAR 0 7
1090: PUSH
1091: LD_VAR 0 1
1095: PPUSH
1096: LD_VAR 0 7
1100: PPUSH
1101: LD_INT 1
1103: PPUSH
1104: LD_INT 1
1106: PPUSH
1107: CALL 39100 0 4
1111: ST_TO_ADDR
// if filter then
1112: LD_VAR 0 7
1116: IFFALSE 1154
// begin SetTag ( filter [ 1 ] , 7 ) ;
1118: LD_VAR 0 7
1122: PUSH
1123: LD_INT 1
1125: ARRAY
1126: PPUSH
1127: LD_INT 7
1129: PPUSH
1130: CALL_OW 109
// ComEnterUnit ( un , filter [ 1 ] ) ;
1134: LD_VAR 0 1
1138: PPUSH
1139: LD_VAR 0 7
1143: PUSH
1144: LD_INT 1
1146: ARRAY
1147: PPUSH
1148: CALL_OW 120
// end else
1152: GO 1173
// ComMoveXY ( un , x , y ) ;
1154: LD_VAR 0 1
1158: PPUSH
1159: LD_VAR 0 3
1163: PPUSH
1164: LD_VAR 0 4
1168: PPUSH
1169: CALL_OW 111
// end ; end ;
1173: LD_VAR 0 5
1177: RET
// export function BaseNeedEnergy ( base ) ; var i , tmp ; begin
1178: LD_INT 0
1180: PPUSH
1181: PPUSH
1182: PPUSH
// if not base then
1183: LD_VAR 0 1
1187: NOT
1188: IFFALSE 1192
// exit ;
1190: GO 1250
// tmp := GetEnergy ( GetBase ( base ) ) ;
1192: LD_ADDR_VAR 0 4
1196: PUSH
1197: LD_VAR 0 1
1201: PPUSH
1202: CALL_OW 274
1206: PPUSH
1207: CALL_OW 278
1211: ST_TO_ADDR
// if tmp [ 1 ] > tmp [ 4 ] then
1212: LD_VAR 0 4
1216: PUSH
1217: LD_INT 1
1219: ARRAY
1220: PUSH
1221: LD_VAR 0 4
1225: PUSH
1226: LD_INT 4
1228: ARRAY
1229: GREATER
1230: IFFALSE 1242
// result := true else
1232: LD_ADDR_VAR 0 2
1236: PUSH
1237: LD_INT 1
1239: ST_TO_ADDR
1240: GO 1250
// result := false ;
1242: LD_ADDR_VAR 0 2
1246: PUSH
1247: LD_INT 0
1249: ST_TO_ADDR
// end ;
1250: LD_VAR 0 2
1254: RET
// export function FilterPeople ( side ) ; begin
1255: LD_INT 0
1257: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) ;
1258: LD_ADDR_VAR 0 2
1262: PUSH
1263: LD_INT 22
1265: PUSH
1266: LD_VAR 0 1
1270: PUSH
1271: EMPTY
1272: LIST
1273: LIST
1274: PUSH
1275: LD_INT 21
1277: PUSH
1278: LD_INT 1
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: PPUSH
1289: CALL_OW 69
1293: ST_TO_ADDR
// end ;
1294: LD_VAR 0 2
1298: RET
// export function FilterDrivers ( side ) ; begin
1299: LD_INT 0
1301: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_outside ] ] ] ) ;
1302: LD_ADDR_VAR 0 2
1306: PUSH
1307: LD_INT 22
1309: PUSH
1310: LD_VAR 0 1
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: PUSH
1319: LD_INT 3
1321: PUSH
1322: LD_INT 56
1324: PUSH
1325: EMPTY
1326: LIST
1327: PUSH
1328: EMPTY
1329: LIST
1330: LIST
1331: PUSH
1332: EMPTY
1333: LIST
1334: LIST
1335: PPUSH
1336: CALL_OW 69
1340: ST_TO_ADDR
// end ;
1341: LD_VAR 0 2
1345: RET
// export function FilterPeopleArea ( side , area ) ; begin
1346: LD_INT 0
1348: PPUSH
// result := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
1349: LD_ADDR_VAR 0 3
1353: PUSH
1354: LD_VAR 0 2
1358: PPUSH
1359: LD_INT 22
1361: PUSH
1362: LD_INT 1
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: PUSH
1369: LD_INT 21
1371: PUSH
1372: LD_INT 1
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: PUSH
1379: EMPTY
1380: LIST
1381: LIST
1382: PPUSH
1383: CALL_OW 70
1387: ST_TO_ADDR
// end ;
1388: LD_VAR 0 3
1392: RET
// export function FilterDriversArea ( side , area ) ; var i , tmp ; begin
1393: LD_INT 0
1395: PPUSH
1396: PPUSH
1397: PPUSH
// tmp := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
1398: LD_ADDR_VAR 0 5
1402: PUSH
1403: LD_VAR 0 2
1407: PPUSH
1408: LD_INT 22
1410: PUSH
1411: LD_INT 1
1413: PUSH
1414: EMPTY
1415: LIST
1416: LIST
1417: PUSH
1418: LD_INT 21
1420: PUSH
1421: LD_INT 2
1423: PUSH
1424: EMPTY
1425: LIST
1426: LIST
1427: PUSH
1428: LD_INT 3
1430: PUSH
1431: LD_INT 58
1433: PUSH
1434: EMPTY
1435: LIST
1436: PUSH
1437: EMPTY
1438: LIST
1439: LIST
1440: PUSH
1441: EMPTY
1442: LIST
1443: LIST
1444: LIST
1445: PPUSH
1446: CALL_OW 70
1450: ST_TO_ADDR
// result := [ ] ;
1451: LD_ADDR_VAR 0 3
1455: PUSH
1456: EMPTY
1457: ST_TO_ADDR
// if not tmp then
1458: LD_VAR 0 5
1462: NOT
1463: IFFALSE 1467
// exit ;
1465: GO 1519
// for i in tmp do
1467: LD_ADDR_VAR 0 4
1471: PUSH
1472: LD_VAR 0 5
1476: PUSH
1477: FOR_IN
1478: IFFALSE 1503
// result := result union IsDrivenBy ( i ) ;
1480: LD_ADDR_VAR 0 3
1484: PUSH
1485: LD_VAR 0 3
1489: PUSH
1490: LD_VAR 0 4
1494: PPUSH
1495: CALL_OW 311
1499: UNION
1500: ST_TO_ADDR
1501: GO 1477
1503: POP
1504: POP
// result := result diff 0 ;
1505: LD_ADDR_VAR 0 3
1509: PUSH
1510: LD_VAR 0 3
1514: PUSH
1515: LD_INT 0
1517: DIFF
1518: ST_TO_ADDR
// end ;
1519: LD_VAR 0 3
1523: RET
// export function FilterBuildings ( side ) ; begin
1524: LD_INT 0
1526: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
1527: LD_ADDR_VAR 0 2
1531: PUSH
1532: LD_INT 22
1534: PUSH
1535: LD_VAR 0 1
1539: PUSH
1540: EMPTY
1541: LIST
1542: LIST
1543: PUSH
1544: LD_INT 21
1546: PUSH
1547: LD_INT 3
1549: PUSH
1550: EMPTY
1551: LIST
1552: LIST
1553: PUSH
1554: EMPTY
1555: LIST
1556: LIST
1557: PPUSH
1558: CALL_OW 69
1562: ST_TO_ADDR
// end ;
1563: LD_VAR 0 2
1567: RET
// export function CreateNature ; var i , animal , nat_area ; begin
1568: LD_INT 0
1570: PPUSH
1571: PPUSH
1572: PPUSH
1573: PPUSH
// uc_side = 0 ;
1574: LD_ADDR_OWVAR 20
1578: PUSH
1579: LD_INT 0
1581: ST_TO_ADDR
// uc_nation = 0 ;
1582: LD_ADDR_OWVAR 21
1586: PUSH
1587: LD_INT 0
1589: ST_TO_ADDR
// nat_area := wildArea ;
1590: LD_ADDR_VAR 0 4
1594: PUSH
1595: LD_INT 3
1597: ST_TO_ADDR
// InitHc ;
1598: CALL_OW 19
// for i = 1 to 4 do
1602: LD_ADDR_VAR 0 2
1606: PUSH
1607: DOUBLE
1608: LD_INT 1
1610: DEC
1611: ST_TO_ADDR
1612: LD_INT 4
1614: PUSH
1615: FOR_TO
1616: IFFALSE 1671
// begin hc_class = 18 ;
1618: LD_ADDR_OWVAR 28
1622: PUSH
1623: LD_INT 18
1625: ST_TO_ADDR
// hc_gallery =  ;
1626: LD_ADDR_OWVAR 33
1630: PUSH
1631: LD_STRING 
1633: ST_TO_ADDR
// hc_face_number = 1 ;
1634: LD_ADDR_OWVAR 34
1638: PUSH
1639: LD_INT 1
1641: ST_TO_ADDR
// animal := CreateHuman ;
1642: LD_ADDR_VAR 0 3
1646: PUSH
1647: CALL_OW 44
1651: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1652: LD_VAR 0 3
1656: PPUSH
1657: LD_VAR 0 4
1661: PPUSH
1662: LD_INT 0
1664: PPUSH
1665: CALL_OW 49
// end ;
1669: GO 1615
1671: POP
1672: POP
// for i = 1 to 6 do
1673: LD_ADDR_VAR 0 2
1677: PUSH
1678: DOUBLE
1679: LD_INT 1
1681: DEC
1682: ST_TO_ADDR
1683: LD_INT 6
1685: PUSH
1686: FOR_TO
1687: IFFALSE 1758
// begin hc_class = class_tiger ;
1689: LD_ADDR_OWVAR 28
1693: PUSH
1694: LD_INT 14
1696: ST_TO_ADDR
// hc_gallery =  ;
1697: LD_ADDR_OWVAR 33
1701: PUSH
1702: LD_STRING 
1704: ST_TO_ADDR
// hc_agressivity = Rand ( 0 , 10 ) ;
1705: LD_ADDR_OWVAR 35
1709: PUSH
1710: LD_INT 0
1712: PPUSH
1713: LD_INT 10
1715: PPUSH
1716: CALL_OW 12
1720: ST_TO_ADDR
// hc_face_number = 3 ;
1721: LD_ADDR_OWVAR 34
1725: PUSH
1726: LD_INT 3
1728: ST_TO_ADDR
// animal := CreateHuman ;
1729: LD_ADDR_VAR 0 3
1733: PUSH
1734: CALL_OW 44
1738: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1739: LD_VAR 0 3
1743: PPUSH
1744: LD_VAR 0 4
1748: PPUSH
1749: LD_INT 0
1751: PPUSH
1752: CALL_OW 49
// end ;
1756: GO 1686
1758: POP
1759: POP
// for i = 1 to 2 do
1760: LD_ADDR_VAR 0 2
1764: PUSH
1765: DOUBLE
1766: LD_INT 1
1768: DEC
1769: ST_TO_ADDR
1770: LD_INT 2
1772: PUSH
1773: FOR_TO
1774: IFFALSE 1837
// begin hc_class = 21 ;
1776: LD_ADDR_OWVAR 28
1780: PUSH
1781: LD_INT 21
1783: ST_TO_ADDR
// hc_gallery =  ;
1784: LD_ADDR_OWVAR 33
1788: PUSH
1789: LD_STRING 
1791: ST_TO_ADDR
// hc_agressivity = 0 ;
1792: LD_ADDR_OWVAR 35
1796: PUSH
1797: LD_INT 0
1799: ST_TO_ADDR
// hc_face_number = 5 ;
1800: LD_ADDR_OWVAR 34
1804: PUSH
1805: LD_INT 5
1807: ST_TO_ADDR
// animal := CreateHuman ;
1808: LD_ADDR_VAR 0 3
1812: PUSH
1813: CALL_OW 44
1817: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1818: LD_VAR 0 3
1822: PPUSH
1823: LD_VAR 0 4
1827: PPUSH
1828: LD_INT 0
1830: PPUSH
1831: CALL_OW 49
// end ;
1835: GO 1773
1837: POP
1838: POP
// for i = 1 to 6 do
1839: LD_ADDR_VAR 0 2
1843: PUSH
1844: DOUBLE
1845: LD_INT 1
1847: DEC
1848: ST_TO_ADDR
1849: LD_INT 6
1851: PUSH
1852: FOR_TO
1853: IFFALSE 1908
// begin hc_class = 13 ;
1855: LD_ADDR_OWVAR 28
1859: PUSH
1860: LD_INT 13
1862: ST_TO_ADDR
// hc_gallery =  ;
1863: LD_ADDR_OWVAR 33
1867: PUSH
1868: LD_STRING 
1870: ST_TO_ADDR
// hc_face_number = 4 ;
1871: LD_ADDR_OWVAR 34
1875: PUSH
1876: LD_INT 4
1878: ST_TO_ADDR
// animal := CreateHuman ;
1879: LD_ADDR_VAR 0 3
1883: PUSH
1884: CALL_OW 44
1888: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1889: LD_VAR 0 3
1893: PPUSH
1894: LD_VAR 0 4
1898: PPUSH
1899: LD_INT 0
1901: PPUSH
1902: CALL_OW 49
// end ;
1906: GO 1852
1908: POP
1909: POP
// for i = 1 to 2 do
1910: LD_ADDR_VAR 0 2
1914: PUSH
1915: DOUBLE
1916: LD_INT 1
1918: DEC
1919: ST_TO_ADDR
1920: LD_INT 2
1922: PUSH
1923: FOR_TO
1924: IFFALSE 1983
// begin hc_class = 20 ;
1926: LD_ADDR_OWVAR 28
1930: PUSH
1931: LD_INT 20
1933: ST_TO_ADDR
// hc_gallery =  ;
1934: LD_ADDR_OWVAR 33
1938: PUSH
1939: LD_STRING 
1941: ST_TO_ADDR
// hc_face_number = 2 ;
1942: LD_ADDR_OWVAR 34
1946: PUSH
1947: LD_INT 2
1949: ST_TO_ADDR
// animal := CreateHuman ;
1950: LD_ADDR_VAR 0 3
1954: PUSH
1955: CALL_OW 44
1959: ST_TO_ADDR
// PlaceUnitXYR ( animal , 101 , 37 , 3 , false ) ;
1960: LD_VAR 0 3
1964: PPUSH
1965: LD_INT 101
1967: PPUSH
1968: LD_INT 37
1970: PPUSH
1971: LD_INT 3
1973: PPUSH
1974: LD_INT 0
1976: PPUSH
1977: CALL_OW 50
// end ;
1981: GO 1923
1983: POP
1984: POP
// for i = 1 to 1 do
1985: LD_ADDR_VAR 0 2
1989: PUSH
1990: DOUBLE
1991: LD_INT 1
1993: DEC
1994: ST_TO_ADDR
1995: LD_INT 1
1997: PUSH
1998: FOR_TO
1999: IFFALSE 2046
// begin vc_chassis := 31 ;
2001: LD_ADDR_OWVAR 37
2005: PUSH
2006: LD_INT 31
2008: ST_TO_ADDR
// vc_control := control_rider ;
2009: LD_ADDR_OWVAR 38
2013: PUSH
2014: LD_INT 4
2016: ST_TO_ADDR
// animal := CreateVehicle ;
2017: LD_ADDR_VAR 0 3
2021: PUSH
2022: CALL_OW 45
2026: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
2027: LD_VAR 0 3
2031: PPUSH
2032: LD_VAR 0 4
2036: PPUSH
2037: LD_INT 0
2039: PPUSH
2040: CALL_OW 49
// end ;
2044: GO 1998
2046: POP
2047: POP
// end ;
2048: LD_VAR 0 1
2052: RET
// export function NearbyTowerHasEnergy ( unit ) ; var i , tmp , energy ; begin
2053: LD_INT 0
2055: PPUSH
2056: PPUSH
2057: PPUSH
2058: PPUSH
// result := [ ] ;
2059: LD_ADDR_VAR 0 2
2063: PUSH
2064: EMPTY
2065: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_dist , unit , 15 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
2066: LD_ADDR_VAR 0 4
2070: PUSH
2071: LD_INT 81
2073: PUSH
2074: LD_VAR 0 1
2078: PPUSH
2079: CALL_OW 255
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: PUSH
2088: LD_INT 91
2090: PUSH
2091: LD_VAR 0 1
2095: PUSH
2096: LD_INT 15
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: LIST
2103: PUSH
2104: LD_INT 2
2106: PUSH
2107: LD_INT 30
2109: PUSH
2110: LD_INT 32
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: PUSH
2117: LD_INT 30
2119: PUSH
2120: LD_INT 33
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: PUSH
2127: EMPTY
2128: LIST
2129: LIST
2130: LIST
2131: PUSH
2132: EMPTY
2133: LIST
2134: LIST
2135: LIST
2136: PPUSH
2137: CALL_OW 69
2141: ST_TO_ADDR
// if not tmp then
2142: LD_VAR 0 4
2146: NOT
2147: IFFALSE 2151
// exit ;
2149: GO 2220
// for i in tmp do
2151: LD_ADDR_VAR 0 3
2155: PUSH
2156: LD_VAR 0 4
2160: PUSH
2161: FOR_IN
2162: IFFALSE 2218
// begin energy := GetEnergy ( GetBase ( i ) ) ;
2164: LD_ADDR_VAR 0 5
2168: PUSH
2169: LD_VAR 0 3
2173: PPUSH
2174: CALL_OW 274
2178: PPUSH
2179: CALL_OW 278
2183: ST_TO_ADDR
// if energy [ 4 ] > energy [ 1 ] then
2184: LD_VAR 0 5
2188: PUSH
2189: LD_INT 4
2191: ARRAY
2192: PUSH
2193: LD_VAR 0 5
2197: PUSH
2198: LD_INT 1
2200: ARRAY
2201: GREATER
2202: IFFALSE 2216
// begin result := i ;
2204: LD_ADDR_VAR 0 2
2208: PUSH
2209: LD_VAR 0 3
2213: ST_TO_ADDR
// break ;
2214: GO 2218
// end ; end ;
2216: GO 2161
2218: POP
2219: POP
// end ;
2220: LD_VAR 0 2
2224: RET
// export function GetTurretWeaponBase ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
2225: LD_INT 0
2227: PPUSH
2228: PPUSH
2229: PPUSH
2230: PPUSH
2231: PPUSH
2232: PPUSH
2233: PPUSH
2234: PPUSH
2235: PPUSH
2236: PPUSH
2237: PPUSH
2238: PPUSH
2239: PPUSH
2240: PPUSH
2241: PPUSH
2242: PPUSH
// result := false ;
2243: LD_ADDR_VAR 0 2
2247: PUSH
2248: LD_INT 0
2250: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
2251: LD_VAR 0 1
2255: NOT
2256: PUSH
2257: LD_VAR 0 1
2261: PPUSH
2262: CALL_OW 266
2266: PUSH
2267: LD_INT 32
2269: PUSH
2270: LD_INT 33
2272: PUSH
2273: EMPTY
2274: LIST
2275: LIST
2276: IN
2277: NOT
2278: OR
2279: IFFALSE 2283
// exit ;
2281: GO 3443
// nat := GetNation ( tower ) ;
2283: LD_ADDR_VAR 0 11
2287: PUSH
2288: LD_VAR 0 1
2292: PPUSH
2293: CALL_OW 248
2297: ST_TO_ADDR
// side := GetSide ( tower ) ;
2298: LD_ADDR_VAR 0 15
2302: PUSH
2303: LD_VAR 0 1
2307: PPUSH
2308: CALL_OW 255
2312: ST_TO_ADDR
// x := GetX ( tower ) ;
2313: LD_ADDR_VAR 0 9
2317: PUSH
2318: LD_VAR 0 1
2322: PPUSH
2323: CALL_OW 250
2327: ST_TO_ADDR
// y := GetY ( tower ) ;
2328: LD_ADDR_VAR 0 10
2332: PUSH
2333: LD_VAR 0 1
2337: PPUSH
2338: CALL_OW 251
2342: ST_TO_ADDR
// if not x or not y then
2343: LD_VAR 0 9
2347: NOT
2348: PUSH
2349: LD_VAR 0 10
2353: NOT
2354: OR
2355: IFFALSE 2359
// exit ;
2357: GO 3443
// weapon := 0 ;
2359: LD_ADDR_VAR 0 17
2363: PUSH
2364: LD_INT 0
2366: ST_TO_ADDR
// fac_list := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
2367: LD_ADDR_VAR 0 16
2371: PUSH
2372: LD_INT 42
2374: PUSH
2375: LD_INT 43
2377: PUSH
2378: LD_INT 44
2380: PUSH
2381: LD_INT 46
2383: PUSH
2384: EMPTY
2385: LIST
2386: LIST
2387: LIST
2388: LIST
2389: ST_TO_ADDR
// if not fac_list then
2390: LD_VAR 0 16
2394: NOT
2395: IFFALSE 2399
// exit ;
2397: GO 3443
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
2399: LD_ADDR_VAR 0 4
2403: PUSH
2404: LD_INT 4
2406: PUSH
2407: LD_INT 5
2409: PUSH
2410: LD_INT 9
2412: PUSH
2413: LD_INT 10
2415: PUSH
2416: LD_INT 6
2418: PUSH
2419: LD_INT 7
2421: PUSH
2422: LD_INT 11
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: LIST
2429: LIST
2430: LIST
2431: LIST
2432: LIST
2433: PUSH
2434: LD_INT 27
2436: PUSH
2437: LD_INT 28
2439: PUSH
2440: LD_INT 26
2442: PUSH
2443: LD_INT 30
2445: PUSH
2446: EMPTY
2447: LIST
2448: LIST
2449: LIST
2450: LIST
2451: PUSH
2452: LD_INT 43
2454: PUSH
2455: LD_INT 44
2457: PUSH
2458: LD_INT 46
2460: PUSH
2461: LD_INT 45
2463: PUSH
2464: LD_INT 47
2466: PUSH
2467: LD_INT 49
2469: PUSH
2470: EMPTY
2471: LIST
2472: LIST
2473: LIST
2474: LIST
2475: LIST
2476: LIST
2477: PUSH
2478: EMPTY
2479: LIST
2480: LIST
2481: LIST
2482: PUSH
2483: LD_VAR 0 11
2487: ARRAY
2488: ST_TO_ADDR
// for i in list do
2489: LD_ADDR_VAR 0 7
2493: PUSH
2494: LD_VAR 0 4
2498: PUSH
2499: FOR_IN
2500: IFFALSE 2533
// if not i in fac_list then
2502: LD_VAR 0 7
2506: PUSH
2507: LD_VAR 0 16
2511: IN
2512: NOT
2513: IFFALSE 2531
// list := list diff i ;
2515: LD_ADDR_VAR 0 4
2519: PUSH
2520: LD_VAR 0 4
2524: PUSH
2525: LD_VAR 0 7
2529: DIFF
2530: ST_TO_ADDR
2531: GO 2499
2533: POP
2534: POP
// if not list then
2535: LD_VAR 0 4
2539: NOT
2540: IFFALSE 2544
// exit ;
2542: GO 3443
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
2544: LD_VAR 0 11
2548: PUSH
2549: LD_INT 3
2551: EQUAL
2552: PUSH
2553: LD_INT 49
2555: PUSH
2556: LD_VAR 0 4
2560: IN
2561: AND
2562: PUSH
2563: LD_INT 31
2565: PPUSH
2566: LD_VAR 0 15
2570: PPUSH
2571: CALL_OW 321
2575: PUSH
2576: LD_INT 2
2578: EQUAL
2579: AND
2580: IFFALSE 2640
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
2582: LD_INT 22
2584: PUSH
2585: LD_VAR 0 15
2589: PUSH
2590: EMPTY
2591: LIST
2592: LIST
2593: PUSH
2594: LD_INT 35
2596: PUSH
2597: LD_INT 49
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: PUSH
2604: LD_INT 91
2606: PUSH
2607: LD_VAR 0 1
2611: PUSH
2612: LD_INT 10
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: LIST
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: LIST
2624: PPUSH
2625: CALL_OW 69
2629: NOT
2630: IFFALSE 2640
// weapon := ru_time_lapser ;
2632: LD_ADDR_VAR 0 17
2636: PUSH
2637: LD_INT 49
2639: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
2640: LD_VAR 0 11
2644: PUSH
2645: LD_INT 1
2647: PUSH
2648: LD_INT 2
2650: PUSH
2651: EMPTY
2652: LIST
2653: LIST
2654: IN
2655: PUSH
2656: LD_INT 11
2658: PUSH
2659: LD_VAR 0 4
2663: IN
2664: PUSH
2665: LD_INT 30
2667: PUSH
2668: LD_VAR 0 4
2672: IN
2673: OR
2674: AND
2675: PUSH
2676: LD_INT 6
2678: PPUSH
2679: LD_VAR 0 15
2683: PPUSH
2684: CALL_OW 321
2688: PUSH
2689: LD_INT 2
2691: EQUAL
2692: AND
2693: IFFALSE 2858
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
2695: LD_INT 22
2697: PUSH
2698: LD_VAR 0 15
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: PUSH
2707: LD_INT 2
2709: PUSH
2710: LD_INT 35
2712: PUSH
2713: LD_INT 11
2715: PUSH
2716: EMPTY
2717: LIST
2718: LIST
2719: PUSH
2720: LD_INT 35
2722: PUSH
2723: LD_INT 30
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: LIST
2734: PUSH
2735: LD_INT 91
2737: PUSH
2738: LD_VAR 0 1
2742: PUSH
2743: LD_INT 18
2745: PUSH
2746: EMPTY
2747: LIST
2748: LIST
2749: LIST
2750: PUSH
2751: EMPTY
2752: LIST
2753: LIST
2754: LIST
2755: PPUSH
2756: CALL_OW 69
2760: NOT
2761: PUSH
2762: LD_INT 22
2764: PUSH
2765: LD_VAR 0 15
2769: PUSH
2770: EMPTY
2771: LIST
2772: LIST
2773: PUSH
2774: LD_INT 2
2776: PUSH
2777: LD_INT 30
2779: PUSH
2780: LD_INT 32
2782: PUSH
2783: EMPTY
2784: LIST
2785: LIST
2786: PUSH
2787: LD_INT 30
2789: PUSH
2790: LD_INT 33
2792: PUSH
2793: EMPTY
2794: LIST
2795: LIST
2796: PUSH
2797: EMPTY
2798: LIST
2799: LIST
2800: LIST
2801: PUSH
2802: LD_INT 91
2804: PUSH
2805: LD_VAR 0 1
2809: PUSH
2810: LD_INT 12
2812: PUSH
2813: EMPTY
2814: LIST
2815: LIST
2816: LIST
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: LIST
2822: PUSH
2823: EMPTY
2824: LIST
2825: PPUSH
2826: CALL_OW 69
2830: PUSH
2831: LD_INT 2
2833: GREATER
2834: AND
2835: IFFALSE 2858
// weapon := [ us_radar , ar_radar ] [ nat ] ;
2837: LD_ADDR_VAR 0 17
2841: PUSH
2842: LD_INT 11
2844: PUSH
2845: LD_INT 30
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: PUSH
2852: LD_VAR 0 11
2856: ARRAY
2857: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
2858: LD_VAR 0 17
2862: NOT
2863: PUSH
2864: LD_INT 40
2866: PPUSH
2867: LD_VAR 0 15
2871: PPUSH
2872: CALL_OW 321
2876: PUSH
2877: LD_INT 2
2879: EQUAL
2880: AND
2881: PUSH
2882: LD_INT 7
2884: PUSH
2885: LD_VAR 0 4
2889: IN
2890: PUSH
2891: LD_INT 28
2893: PUSH
2894: LD_VAR 0 4
2898: IN
2899: OR
2900: PUSH
2901: LD_INT 45
2903: PUSH
2904: LD_VAR 0 4
2908: IN
2909: OR
2910: AND
2911: IFFALSE 3165
// begin hex := GetHexInfo ( x , y ) ;
2913: LD_ADDR_VAR 0 3
2917: PUSH
2918: LD_VAR 0 9
2922: PPUSH
2923: LD_VAR 0 10
2927: PPUSH
2928: CALL_OW 546
2932: ST_TO_ADDR
// if hex [ 1 ] then
2933: LD_VAR 0 3
2937: PUSH
2938: LD_INT 1
2940: ARRAY
2941: IFFALSE 2945
// exit ;
2943: GO 3443
// height := hex [ 2 ] ;
2945: LD_ADDR_VAR 0 14
2949: PUSH
2950: LD_VAR 0 3
2954: PUSH
2955: LD_INT 2
2957: ARRAY
2958: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
2959: LD_ADDR_VAR 0 13
2963: PUSH
2964: LD_INT 0
2966: PUSH
2967: LD_INT 2
2969: PUSH
2970: LD_INT 3
2972: PUSH
2973: LD_INT 5
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: LIST
2980: LIST
2981: ST_TO_ADDR
// for i in tmp do
2982: LD_ADDR_VAR 0 7
2986: PUSH
2987: LD_VAR 0 13
2991: PUSH
2992: FOR_IN
2993: IFFALSE 3163
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
2995: LD_ADDR_VAR 0 8
2999: PUSH
3000: LD_VAR 0 9
3004: PPUSH
3005: LD_VAR 0 7
3009: PPUSH
3010: LD_INT 5
3012: PPUSH
3013: CALL_OW 272
3017: PUSH
3018: LD_VAR 0 10
3022: PPUSH
3023: LD_VAR 0 7
3027: PPUSH
3028: LD_INT 5
3030: PPUSH
3031: CALL_OW 273
3035: PUSH
3036: EMPTY
3037: LIST
3038: LIST
3039: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
3040: LD_VAR 0 8
3044: PUSH
3045: LD_INT 1
3047: ARRAY
3048: PPUSH
3049: LD_VAR 0 8
3053: PUSH
3054: LD_INT 2
3056: ARRAY
3057: PPUSH
3058: CALL_OW 488
3062: IFFALSE 3161
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
3064: LD_ADDR_VAR 0 3
3068: PUSH
3069: LD_VAR 0 8
3073: PUSH
3074: LD_INT 1
3076: ARRAY
3077: PPUSH
3078: LD_VAR 0 8
3082: PUSH
3083: LD_INT 2
3085: ARRAY
3086: PPUSH
3087: CALL_OW 546
3091: ST_TO_ADDR
// if hex [ 1 ] then
3092: LD_VAR 0 3
3096: PUSH
3097: LD_INT 1
3099: ARRAY
3100: IFFALSE 3104
// continue ;
3102: GO 2992
// h := hex [ 2 ] ;
3104: LD_ADDR_VAR 0 12
3108: PUSH
3109: LD_VAR 0 3
3113: PUSH
3114: LD_INT 2
3116: ARRAY
3117: ST_TO_ADDR
// if h + 7 < height then
3118: LD_VAR 0 12
3122: PUSH
3123: LD_INT 7
3125: PLUS
3126: PUSH
3127: LD_VAR 0 14
3131: LESS
3132: IFFALSE 3161
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
3134: LD_ADDR_VAR 0 17
3138: PUSH
3139: LD_INT 7
3141: PUSH
3142: LD_INT 28
3144: PUSH
3145: LD_INT 45
3147: PUSH
3148: EMPTY
3149: LIST
3150: LIST
3151: LIST
3152: PUSH
3153: LD_VAR 0 11
3157: ARRAY
3158: ST_TO_ADDR
// break ;
3159: GO 3163
// end ; end ; end ;
3161: GO 2992
3163: POP
3164: POP
// end ; if not weapon then
3165: LD_VAR 0 17
3169: NOT
3170: IFFALSE 3325
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
3172: LD_ADDR_VAR 0 4
3176: PUSH
3177: LD_VAR 0 4
3181: PUSH
3182: LD_INT 11
3184: PUSH
3185: LD_INT 30
3187: PUSH
3188: LD_INT 49
3190: PUSH
3191: EMPTY
3192: LIST
3193: LIST
3194: LIST
3195: DIFF
3196: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , tower , 6 ] , [ f_not , [ f_bweapon , 0 ] ] ] ) ;
3197: LD_ADDR_VAR 0 13
3201: PUSH
3202: LD_INT 22
3204: PUSH
3205: LD_VAR 0 15
3209: PUSH
3210: EMPTY
3211: LIST
3212: LIST
3213: PUSH
3214: LD_INT 91
3216: PUSH
3217: LD_VAR 0 1
3221: PUSH
3222: LD_INT 6
3224: PUSH
3225: EMPTY
3226: LIST
3227: LIST
3228: LIST
3229: PUSH
3230: LD_INT 3
3232: PUSH
3233: LD_INT 35
3235: PUSH
3236: LD_INT 0
3238: PUSH
3239: EMPTY
3240: LIST
3241: LIST
3242: PUSH
3243: EMPTY
3244: LIST
3245: LIST
3246: PUSH
3247: EMPTY
3248: LIST
3249: LIST
3250: LIST
3251: PPUSH
3252: CALL_OW 69
3256: ST_TO_ADDR
// for i in tmp do
3257: LD_ADDR_VAR 0 7
3261: PUSH
3262: LD_VAR 0 13
3266: PUSH
3267: FOR_IN
3268: IFFALSE 3293
// list := list diff GetBWeapon ( i ) ;
3270: LD_ADDR_VAR 0 4
3274: PUSH
3275: LD_VAR 0 4
3279: PUSH
3280: LD_VAR 0 7
3284: PPUSH
3285: CALL_OW 269
3289: DIFF
3290: ST_TO_ADDR
3291: GO 3267
3293: POP
3294: POP
// if list then
3295: LD_VAR 0 4
3299: IFFALSE 3325
// weapon := list [ rand ( 1 , list ) ] ;
3301: LD_ADDR_VAR 0 17
3305: PUSH
3306: LD_VAR 0 4
3310: PUSH
3311: LD_INT 1
3313: PPUSH
3314: LD_VAR 0 4
3318: PPUSH
3319: CALL_OW 12
3323: ARRAY
3324: ST_TO_ADDR
// end ; if weapon then
3325: LD_VAR 0 17
3329: IFFALSE 3443
// begin tmp := CostOfWeapon ( weapon ) ;
3331: LD_ADDR_VAR 0 13
3335: PUSH
3336: LD_VAR 0 17
3340: PPUSH
3341: CALL_OW 451
3345: ST_TO_ADDR
// j := GetBase ( tower ) ;
3346: LD_ADDR_VAR 0 8
3350: PUSH
3351: LD_VAR 0 1
3355: PPUSH
3356: CALL_OW 274
3360: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
3361: LD_VAR 0 8
3365: PPUSH
3366: LD_INT 1
3368: PPUSH
3369: CALL_OW 275
3373: PUSH
3374: LD_VAR 0 13
3378: PUSH
3379: LD_INT 1
3381: ARRAY
3382: GREATEREQUAL
3383: PUSH
3384: LD_VAR 0 8
3388: PPUSH
3389: LD_INT 2
3391: PPUSH
3392: CALL_OW 275
3396: PUSH
3397: LD_VAR 0 13
3401: PUSH
3402: LD_INT 2
3404: ARRAY
3405: GREATEREQUAL
3406: AND
3407: PUSH
3408: LD_VAR 0 8
3412: PPUSH
3413: LD_INT 3
3415: PPUSH
3416: CALL_OW 275
3420: PUSH
3421: LD_VAR 0 13
3425: PUSH
3426: LD_INT 3
3428: ARRAY
3429: GREATEREQUAL
3430: AND
3431: IFFALSE 3443
// result := weapon ;
3433: LD_ADDR_VAR 0 2
3437: PUSH
3438: LD_VAR 0 17
3442: ST_TO_ADDR
// end ; end ; end_of_file
3443: LD_VAR 0 2
3447: RET
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Khatam , Kikuchi , Harisson ; export function PrepareAmericans ; var i , team , others , veh , m ; begin
3448: LD_INT 0
3450: PPUSH
3451: PPUSH
3452: PPUSH
3453: PPUSH
3454: PPUSH
3455: PPUSH
// uc_side := 1 ;
3456: LD_ADDR_OWVAR 20
3460: PUSH
3461: LD_INT 1
3463: ST_TO_ADDR
// uc_nation := 1 ;
3464: LD_ADDR_OWVAR 21
3468: PUSH
3469: LD_INT 1
3471: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prev_prefix ) ;
3472: LD_ADDR_EXP 9
3476: PUSH
3477: LD_STRING JMM
3479: PPUSH
3480: LD_EXP 1
3484: NOT
3485: PPUSH
3486: LD_EXP 2
3490: PPUSH
3491: CALL 33619 0 3
3495: ST_TO_ADDR
// team := [ JMM ] ;
3496: LD_ADDR_VAR 0 3
3500: PUSH
3501: LD_EXP 9
3505: PUSH
3506: EMPTY
3507: LIST
3508: ST_TO_ADDR
// if LoadVariable ( BrownIn07 , debug ) then
3509: LD_STRING BrownIn07
3511: PPUSH
3512: LD_EXP 1
3516: PPUSH
3517: CALL_OW 30
3521: IFFALSE 3547
// Brown := PrepareUnit ( Brown , ( not debug ) , mission_prev_prefix ) ;
3523: LD_ADDR_EXP 10
3527: PUSH
3528: LD_STRING Brown
3530: PPUSH
3531: LD_EXP 1
3535: NOT
3536: PPUSH
3537: LD_EXP 2
3541: PPUSH
3542: CALL 33619 0 3
3546: ST_TO_ADDR
// if Brown then
3547: LD_EXP 10
3551: IFFALSE 3569
// team := team ^ Brown ;
3553: LD_ADDR_VAR 0 3
3557: PUSH
3558: LD_VAR 0 3
3562: PUSH
3563: LD_EXP 10
3567: ADD
3568: ST_TO_ADDR
// if LoadVariable ( DonaldsonIn07 , debug ) then
3569: LD_STRING DonaldsonIn07
3571: PPUSH
3572: LD_EXP 1
3576: PPUSH
3577: CALL_OW 30
3581: IFFALSE 3607
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prev_prefix ) ;
3583: LD_ADDR_EXP 11
3587: PUSH
3588: LD_STRING Donaldson
3590: PPUSH
3591: LD_EXP 1
3595: NOT
3596: PPUSH
3597: LD_EXP 2
3601: PPUSH
3602: CALL 33619 0 3
3606: ST_TO_ADDR
// if Donaldson then
3607: LD_EXP 11
3611: IFFALSE 3629
// team := team ^ Donaldson ;
3613: LD_ADDR_VAR 0 3
3617: PUSH
3618: LD_VAR 0 3
3622: PUSH
3623: LD_EXP 11
3627: ADD
3628: ST_TO_ADDR
// if LoadVariable ( BobbyIn07 , debug ) then
3629: LD_STRING BobbyIn07
3631: PPUSH
3632: LD_EXP 1
3636: PPUSH
3637: CALL_OW 30
3641: IFFALSE 3667
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prev_prefix ) ;
3643: LD_ADDR_EXP 12
3647: PUSH
3648: LD_STRING Bobby
3650: PPUSH
3651: LD_EXP 1
3655: NOT
3656: PPUSH
3657: LD_EXP 2
3661: PPUSH
3662: CALL 33619 0 3
3666: ST_TO_ADDR
// if Bobby then
3667: LD_EXP 12
3671: IFFALSE 3689
// team := team ^ Bobby ;
3673: LD_ADDR_VAR 0 3
3677: PUSH
3678: LD_VAR 0 3
3682: PUSH
3683: LD_EXP 12
3687: ADD
3688: ST_TO_ADDR
// if LoadVariable ( CyrusIn07 , debug ) then
3689: LD_STRING CyrusIn07
3691: PPUSH
3692: LD_EXP 1
3696: PPUSH
3697: CALL_OW 30
3701: IFFALSE 3727
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prev_prefix ) ;
3703: LD_ADDR_EXP 13
3707: PUSH
3708: LD_STRING Cyrus
3710: PPUSH
3711: LD_EXP 1
3715: NOT
3716: PPUSH
3717: LD_EXP 2
3721: PPUSH
3722: CALL 33619 0 3
3726: ST_TO_ADDR
// if Cyrus then
3727: LD_EXP 13
3731: IFFALSE 3749
// team := team ^ Cyrus ;
3733: LD_ADDR_VAR 0 3
3737: PUSH
3738: LD_VAR 0 3
3742: PUSH
3743: LD_EXP 13
3747: ADD
3748: ST_TO_ADDR
// if LoadVariable ( LisaIn07 , debug ) then
3749: LD_STRING LisaIn07
3751: PPUSH
3752: LD_EXP 1
3756: PPUSH
3757: CALL_OW 30
3761: IFFALSE 3787
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prev_prefix ) ;
3763: LD_ADDR_EXP 14
3767: PUSH
3768: LD_STRING Lisa
3770: PPUSH
3771: LD_EXP 1
3775: NOT
3776: PPUSH
3777: LD_EXP 2
3781: PPUSH
3782: CALL 33619 0 3
3786: ST_TO_ADDR
// if Lisa then
3787: LD_EXP 14
3791: IFFALSE 3809
// team := team ^ Lisa ;
3793: LD_ADDR_VAR 0 3
3797: PUSH
3798: LD_VAR 0 3
3802: PUSH
3803: LD_EXP 14
3807: ADD
3808: ST_TO_ADDR
// if LoadVariable ( GladstoneIn07 , debug ) then
3809: LD_STRING GladstoneIn07
3811: PPUSH
3812: LD_EXP 1
3816: PPUSH
3817: CALL_OW 30
3821: IFFALSE 3847
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , mission_prev_prefix ) ;
3823: LD_ADDR_EXP 16
3827: PUSH
3828: LD_STRING Gladstone
3830: PPUSH
3831: LD_EXP 1
3835: NOT
3836: PPUSH
3837: LD_EXP 2
3841: PPUSH
3842: CALL 33619 0 3
3846: ST_TO_ADDR
// if Gladstone then
3847: LD_EXP 16
3851: IFFALSE 3869
// team := team ^ Gladstone ;
3853: LD_ADDR_VAR 0 3
3857: PUSH
3858: LD_VAR 0 3
3862: PUSH
3863: LD_EXP 16
3867: ADD
3868: ST_TO_ADDR
// if LoadVariable ( KhatamIn07 , debug ) then
3869: LD_STRING KhatamIn07
3871: PPUSH
3872: LD_EXP 1
3876: PPUSH
3877: CALL_OW 30
3881: IFFALSE 3907
// Khatam := PrepareUnit ( Khatam , ( not debug ) , mission_prev_prefix ) ;
3883: LD_ADDR_EXP 17
3887: PUSH
3888: LD_STRING Khatam
3890: PPUSH
3891: LD_EXP 1
3895: NOT
3896: PPUSH
3897: LD_EXP 2
3901: PPUSH
3902: CALL 33619 0 3
3906: ST_TO_ADDR
// if Khatam then
3907: LD_EXP 17
3911: IFFALSE 3929
// team := team ^ Khatam ;
3913: LD_ADDR_VAR 0 3
3917: PUSH
3918: LD_VAR 0 3
3922: PUSH
3923: LD_EXP 17
3927: ADD
3928: ST_TO_ADDR
// others := CreateCharacterSet ( 07_others ) ;
3929: LD_ADDR_VAR 0 4
3933: PUSH
3934: LD_STRING 07_others
3936: PPUSH
3937: CALL_OW 31
3941: ST_TO_ADDR
// if others then
3942: LD_VAR 0 4
3946: IFFALSE 3964
// team := team ^ others ;
3948: LD_ADDR_VAR 0 3
3952: PUSH
3953: LD_VAR 0 3
3957: PUSH
3958: LD_VAR 0 4
3962: ADD
3963: ST_TO_ADDR
// if debug then
3964: LD_EXP 1
3968: IFFALSE 4023
// begin InitHc ;
3970: CALL_OW 19
// for i = 1 to 4 do
3974: LD_ADDR_VAR 0 2
3978: PUSH
3979: DOUBLE
3980: LD_INT 1
3982: DEC
3983: ST_TO_ADDR
3984: LD_INT 4
3986: PUSH
3987: FOR_TO
3988: IFFALSE 4021
// begin PrepareHuman ( false , class_mechanic , 4 ) ;
3990: LD_INT 0
3992: PPUSH
3993: LD_INT 3
3995: PPUSH
3996: LD_INT 4
3998: PPUSH
3999: CALL_OW 380
// team := team ^ CreateHuman ;
4003: LD_ADDR_VAR 0 3
4007: PUSH
4008: LD_VAR 0 3
4012: PUSH
4013: CALL_OW 44
4017: ADD
4018: ST_TO_ADDR
// end ;
4019: GO 3987
4021: POP
4022: POP
// end ; m := 0 ;
4023: LD_ADDR_VAR 0 6
4027: PUSH
4028: LD_INT 0
4030: ST_TO_ADDR
// for i in team do
4031: LD_ADDR_VAR 0 2
4035: PUSH
4036: LD_VAR 0 3
4040: PUSH
4041: FOR_IN
4042: IFFALSE 4249
// if GetClass ( i ) = 3 then
4044: LD_VAR 0 2
4048: PPUSH
4049: CALL_OW 257
4053: PUSH
4054: LD_INT 3
4056: EQUAL
4057: IFFALSE 4205
// begin m := m + 1 ;
4059: LD_ADDR_VAR 0 6
4063: PUSH
4064: LD_VAR 0 6
4068: PUSH
4069: LD_INT 1
4071: PLUS
4072: ST_TO_ADDR
// veh := PrepareTank ( 1 , 1 , [ us_medium_wheeled , us_medium_tracked , us_medium_wheeled , us_light_wheeled ] [ m mod 4 + 1 ] , engine_solar , control_manual , [ us_gatling_gun , us_double_gun , us_light_gun , us_radar ] [ m mod 4 + 1 ] , 60 ) ;
4073: LD_ADDR_VAR 0 5
4077: PUSH
4078: LD_INT 1
4080: PPUSH
4081: LD_INT 1
4083: PPUSH
4084: LD_INT 2
4086: PUSH
4087: LD_INT 3
4089: PUSH
4090: LD_INT 2
4092: PUSH
4093: LD_INT 1
4095: PUSH
4096: EMPTY
4097: LIST
4098: LIST
4099: LIST
4100: LIST
4101: PUSH
4102: LD_VAR 0 6
4106: PUSH
4107: LD_INT 4
4109: MOD
4110: PUSH
4111: LD_INT 1
4113: PLUS
4114: ARRAY
4115: PPUSH
4116: LD_INT 2
4118: PPUSH
4119: LD_INT 1
4121: PPUSH
4122: LD_INT 4
4124: PUSH
4125: LD_INT 5
4127: PUSH
4128: LD_INT 3
4130: PUSH
4131: LD_INT 11
4133: PUSH
4134: EMPTY
4135: LIST
4136: LIST
4137: LIST
4138: LIST
4139: PUSH
4140: LD_VAR 0 6
4144: PUSH
4145: LD_INT 4
4147: MOD
4148: PUSH
4149: LD_INT 1
4151: PLUS
4152: ARRAY
4153: PPUSH
4154: LD_INT 60
4156: PPUSH
4157: CALL 520 0 7
4161: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
4162: LD_VAR 0 5
4166: PPUSH
4167: LD_INT 2
4169: PPUSH
4170: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
4174: LD_VAR 0 5
4178: PPUSH
4179: LD_INT 1
4181: PPUSH
4182: LD_INT 0
4184: PPUSH
4185: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
4189: LD_VAR 0 2
4193: PPUSH
4194: LD_VAR 0 5
4198: PPUSH
4199: CALL_OW 52
// end else
4203: GO 4247
// begin if GetClass ( i ) = 2 then
4205: LD_VAR 0 2
4209: PPUSH
4210: CALL_OW 257
4214: PUSH
4215: LD_INT 2
4217: EQUAL
4218: IFFALSE 4232
// SetClass ( i , 1 ) ;
4220: LD_VAR 0 2
4224: PPUSH
4225: LD_INT 1
4227: PPUSH
4228: CALL_OW 336
// PlaceUnitArea ( i , startArea , false ) ;
4232: LD_VAR 0 2
4236: PPUSH
4237: LD_INT 1
4239: PPUSH
4240: LD_INT 0
4242: PPUSH
4243: CALL_OW 49
// end ;
4247: GO 4041
4249: POP
4250: POP
// uc_side := 4 ;
4251: LD_ADDR_OWVAR 20
4255: PUSH
4256: LD_INT 4
4258: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
4259: LD_ADDR_EXP 19
4263: PUSH
4264: LD_STRING Harisson
4266: PPUSH
4267: LD_INT 0
4269: PPUSH
4270: LD_STRING 
4272: PPUSH
4273: CALL 33619 0 3
4277: ST_TO_ADDR
// PrepareScout ;
4278: CALL 4287 0 0
// end ;
4282: LD_VAR 0 1
4286: RET
// function PrepareScout ; var ape ; begin
4287: LD_INT 0
4289: PPUSH
4290: PPUSH
// uc_side := 4 ;
4291: LD_ADDR_OWVAR 20
4295: PUSH
4296: LD_INT 4
4298: ST_TO_ADDR
// uc_nation := 1 ;
4299: LD_ADDR_OWVAR 21
4303: PUSH
4304: LD_INT 1
4306: ST_TO_ADDR
// if LoadVariable ( FrankIn06 , 0 ) then
4307: LD_STRING FrankIn06
4309: PPUSH
4310: LD_INT 0
4312: PPUSH
4313: CALL_OW 30
4317: IFFALSE 4334
// Frank := CreateCharacter ( 06c_Frank ) else
4319: LD_ADDR_EXP 15
4323: PUSH
4324: LD_STRING 06c_Frank
4326: PPUSH
4327: CALL_OW 34
4331: ST_TO_ADDR
4332: GO 4374
// if LoadVariable ( FrankInDelta , 0 ) then
4334: LD_STRING FrankInDelta
4336: PPUSH
4337: LD_INT 0
4339: PPUSH
4340: CALL_OW 30
4344: IFFALSE 4361
// Frank := CreateCharacter ( 05_Frank ) else
4346: LD_ADDR_EXP 15
4350: PUSH
4351: LD_STRING 05_Frank
4353: PPUSH
4354: CALL_OW 34
4358: ST_TO_ADDR
4359: GO 4374
// Frank := CreateCharacter ( 04_Frank ) ;
4361: LD_ADDR_EXP 15
4365: PUSH
4366: LD_STRING 04_Frank
4368: PPUSH
4369: CALL_OW 34
4373: ST_TO_ADDR
// if Frank then
4374: LD_EXP 15
4378: IFFALSE 4511
// begin PlaceUnitArea ( Frank , scoutArea , false ) ;
4380: LD_EXP 15
4384: PPUSH
4385: LD_INT 2
4387: PPUSH
4388: LD_INT 0
4390: PPUSH
4391: CALL_OW 49
// SetClass ( Frank , 1 ) ;
4395: LD_EXP 15
4399: PPUSH
4400: LD_INT 1
4402: PPUSH
4403: CALL_OW 336
// uc_side := 0 ;
4407: LD_ADDR_OWVAR 20
4411: PUSH
4412: LD_INT 0
4414: ST_TO_ADDR
// uc_nation := 0 ;
4415: LD_ADDR_OWVAR 21
4419: PUSH
4420: LD_INT 0
4422: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 0 ) ;
4423: LD_INT 0
4425: PPUSH
4426: LD_INT 12
4428: PPUSH
4429: LD_INT 0
4431: PPUSH
4432: CALL_OW 380
// ape := CreateHuman ;
4436: LD_ADDR_VAR 0 2
4440: PUSH
4441: CALL_OW 44
4445: ST_TO_ADDR
// PlaceUnitXYR ( ape , GetX ( Frank ) , GetY ( Frank ) , 5 , false ) ;
4446: LD_VAR 0 2
4450: PPUSH
4451: LD_EXP 15
4455: PPUSH
4456: CALL_OW 250
4460: PPUSH
4461: LD_EXP 15
4465: PPUSH
4466: CALL_OW 251
4470: PPUSH
4471: LD_INT 5
4473: PPUSH
4474: LD_INT 0
4476: PPUSH
4477: CALL_OW 50
// ComTurnUnit ( ape , Frank ) ;
4481: LD_VAR 0 2
4485: PPUSH
4486: LD_EXP 15
4490: PPUSH
4491: CALL_OW 119
// ComTurnUnit ( Frank , ape ) ;
4495: LD_EXP 15
4499: PPUSH
4500: LD_VAR 0 2
4504: PPUSH
4505: CALL_OW 119
// exit ;
4509: GO 4554
// end ; Kikuchi := PrepareUnit ( Yamoko , false ,  ) ;
4511: LD_ADDR_EXP 18
4515: PUSH
4516: LD_STRING Yamoko
4518: PPUSH
4519: LD_INT 0
4521: PPUSH
4522: LD_STRING 
4524: PPUSH
4525: CALL 33619 0 3
4529: ST_TO_ADDR
// PlaceUnitArea ( Kikuchi , scoutArea , false ) ;
4530: LD_EXP 18
4534: PPUSH
4535: LD_INT 2
4537: PPUSH
4538: LD_INT 0
4540: PPUSH
4541: CALL_OW 49
// ComHold ( Kikuchi ) ;
4545: LD_EXP 18
4549: PPUSH
4550: CALL_OW 140
// end ; end_of_file
4554: LD_VAR 0 1
4558: RET
// export ru_rebuild_list ; export function PrepareRussians ; var i , j , r , un , skill , filter , tmp , dep_list , lab_list , fac_list , breastworks_list , bunker_list , turret_list , weapons_list , personel_counter ; begin
4559: LD_INT 0
4561: PPUSH
4562: PPUSH
4563: PPUSH
4564: PPUSH
4565: PPUSH
4566: PPUSH
4567: PPUSH
4568: PPUSH
4569: PPUSH
4570: PPUSH
4571: PPUSH
4572: PPUSH
4573: PPUSH
4574: PPUSH
4575: PPUSH
4576: PPUSH
// ru_rebuild_list := [ ] ;
4577: LD_ADDR_EXP 20
4581: PUSH
4582: EMPTY
4583: ST_TO_ADDR
// uc_side := 3 ;
4584: LD_ADDR_OWVAR 20
4588: PUSH
4589: LD_INT 3
4591: ST_TO_ADDR
// uc_nation := 3 ;
4592: LD_ADDR_OWVAR 21
4596: PUSH
4597: LD_INT 3
4599: ST_TO_ADDR
// if Difficulty > 1 then
4600: LD_OWVAR 67
4604: PUSH
4605: LD_INT 1
4607: GREATER
4608: IFFALSE 4775
// begin bc_type := b_breastwork ;
4610: LD_ADDR_OWVAR 42
4614: PUSH
4615: LD_INT 31
4617: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 78 , 74 , 2 ) ;
4618: LD_INT 78
4620: PPUSH
4621: LD_INT 74
4623: PPUSH
4624: LD_INT 2
4626: PPUSH
4627: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 171 , 193 , 4 ) ;
4631: LD_INT 171
4633: PPUSH
4634: LD_INT 193
4636: PPUSH
4637: LD_INT 4
4639: PPUSH
4640: CALL_OW 47
// bc_type := b_turret ;
4644: LD_ADDR_OWVAR 42
4648: PUSH
4649: LD_INT 33
4651: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 129 , 96 , 3 ) ;
4652: LD_INT 129
4654: PPUSH
4655: LD_INT 96
4657: PPUSH
4658: LD_INT 3
4660: PPUSH
4661: CALL_OW 47
// if Difficulty > 2 then
4665: LD_OWVAR 67
4669: PUSH
4670: LD_INT 2
4672: GREATER
4673: IFFALSE 4744
// begin RemoveUnit ( HexInfo ( 83 , 141 ) ) ;
4675: LD_INT 83
4677: PPUSH
4678: LD_INT 141
4680: PPUSH
4681: CALL_OW 428
4685: PPUSH
4686: CALL_OW 64
// RemoveUnit ( HexInfo ( 78 , 133 ) ) ;
4690: LD_INT 78
4692: PPUSH
4693: LD_INT 133
4695: PPUSH
4696: CALL_OW 428
4700: PPUSH
4701: CALL_OW 64
// CreateAndPlaceBuildingXYD ( 83 , 141 , 2 ) ;
4705: LD_INT 83
4707: PPUSH
4708: LD_INT 141
4710: PPUSH
4711: LD_INT 2
4713: PPUSH
4714: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 78 , 133 , 2 ) ;
4718: LD_INT 78
4720: PPUSH
4721: LD_INT 133
4723: PPUSH
4724: LD_INT 2
4726: PPUSH
4727: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 145 , 112 , 3 ) ;
4731: LD_INT 145
4733: PPUSH
4734: LD_INT 112
4736: PPUSH
4737: LD_INT 3
4739: PPUSH
4740: CALL_OW 47
// end ; if Difficulty > 3 then
4744: LD_OWVAR 67
4748: PUSH
4749: LD_INT 3
4751: GREATER
4752: IFFALSE 4775
// begin bc_type := b_bunker ;
4754: LD_ADDR_OWVAR 42
4758: PUSH
4759: LD_INT 32
4761: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 44 , 50 , 4 ) ;
4762: LD_INT 44
4764: PPUSH
4765: LD_INT 50
4767: PPUSH
4768: LD_INT 4
4770: PPUSH
4771: CALL_OW 47
// end ; end ; dep_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
4775: LD_ADDR_VAR 0 9
4779: PUSH
4780: LD_INT 22
4782: PUSH
4783: LD_INT 3
4785: PUSH
4786: EMPTY
4787: LIST
4788: LIST
4789: PUSH
4790: LD_INT 2
4792: PUSH
4793: LD_INT 30
4795: PUSH
4796: LD_INT 0
4798: PUSH
4799: EMPTY
4800: LIST
4801: LIST
4802: PUSH
4803: LD_INT 30
4805: PUSH
4806: LD_INT 1
4808: PUSH
4809: EMPTY
4810: LIST
4811: LIST
4812: PUSH
4813: EMPTY
4814: LIST
4815: LIST
4816: LIST
4817: PUSH
4818: EMPTY
4819: LIST
4820: LIST
4821: PPUSH
4822: CALL_OW 69
4826: ST_TO_ADDR
// lab_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
4827: LD_ADDR_VAR 0 10
4831: PUSH
4832: LD_INT 22
4834: PUSH
4835: LD_INT 3
4837: PUSH
4838: EMPTY
4839: LIST
4840: LIST
4841: PUSH
4842: LD_INT 2
4844: PUSH
4845: LD_INT 30
4847: PUSH
4848: LD_INT 6
4850: PUSH
4851: EMPTY
4852: LIST
4853: LIST
4854: PUSH
4855: LD_INT 30
4857: PUSH
4858: LD_INT 7
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: PUSH
4865: LD_INT 30
4867: PUSH
4868: LD_INT 8
4870: PUSH
4871: EMPTY
4872: LIST
4873: LIST
4874: PUSH
4875: EMPTY
4876: LIST
4877: LIST
4878: LIST
4879: LIST
4880: PUSH
4881: EMPTY
4882: LIST
4883: LIST
4884: PPUSH
4885: CALL_OW 69
4889: ST_TO_ADDR
// fac_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
4890: LD_ADDR_VAR 0 11
4894: PUSH
4895: LD_INT 22
4897: PUSH
4898: LD_INT 3
4900: PUSH
4901: EMPTY
4902: LIST
4903: LIST
4904: PUSH
4905: LD_INT 30
4907: PUSH
4908: LD_INT 3
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: PUSH
4915: EMPTY
4916: LIST
4917: LIST
4918: PPUSH
4919: CALL_OW 69
4923: ST_TO_ADDR
// breastworks_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
4924: LD_ADDR_VAR 0 12
4928: PUSH
4929: LD_INT 22
4931: PUSH
4932: LD_INT 3
4934: PUSH
4935: EMPTY
4936: LIST
4937: LIST
4938: PUSH
4939: LD_INT 30
4941: PUSH
4942: LD_INT 31
4944: PUSH
4945: EMPTY
4946: LIST
4947: LIST
4948: PUSH
4949: EMPTY
4950: LIST
4951: LIST
4952: PPUSH
4953: CALL_OW 69
4957: ST_TO_ADDR
// bunker_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
4958: LD_ADDR_VAR 0 13
4962: PUSH
4963: LD_INT 22
4965: PUSH
4966: LD_INT 3
4968: PUSH
4969: EMPTY
4970: LIST
4971: LIST
4972: PUSH
4973: LD_INT 30
4975: PUSH
4976: LD_INT 32
4978: PUSH
4979: EMPTY
4980: LIST
4981: LIST
4982: PUSH
4983: EMPTY
4984: LIST
4985: LIST
4986: PPUSH
4987: CALL_OW 69
4991: ST_TO_ADDR
// turret_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
4992: LD_ADDR_VAR 0 14
4996: PUSH
4997: LD_INT 22
4999: PUSH
5000: LD_INT 3
5002: PUSH
5003: EMPTY
5004: LIST
5005: LIST
5006: PUSH
5007: LD_INT 30
5009: PUSH
5010: LD_INT 33
5012: PUSH
5013: EMPTY
5014: LIST
5015: LIST
5016: PUSH
5017: EMPTY
5018: LIST
5019: LIST
5020: PPUSH
5021: CALL_OW 69
5025: ST_TO_ADDR
// weapons_list := [ [ ru_heavy_machine_gun , 5 ] , [ ru_gatling_gun , 50 ] , [ ru_gun , 30 ] , [ ru_heavy_gun , 15 ] ] ;
5026: LD_ADDR_VAR 0 15
5030: PUSH
5031: LD_INT 42
5033: PUSH
5034: LD_INT 5
5036: PUSH
5037: EMPTY
5038: LIST
5039: LIST
5040: PUSH
5041: LD_INT 43
5043: PUSH
5044: LD_INT 50
5046: PUSH
5047: EMPTY
5048: LIST
5049: LIST
5050: PUSH
5051: LD_INT 44
5053: PUSH
5054: LD_INT 30
5056: PUSH
5057: EMPTY
5058: LIST
5059: LIST
5060: PUSH
5061: LD_INT 46
5063: PUSH
5064: LD_INT 15
5066: PUSH
5067: EMPTY
5068: LIST
5069: LIST
5070: PUSH
5071: EMPTY
5072: LIST
5073: LIST
5074: LIST
5075: LIST
5076: ST_TO_ADDR
// personel_counter := [ 0 , 4 , 6 , 3 ] ;
5077: LD_ADDR_VAR 0 16
5081: PUSH
5082: LD_INT 0
5084: PUSH
5085: LD_INT 4
5087: PUSH
5088: LD_INT 6
5090: PUSH
5091: LD_INT 3
5093: PUSH
5094: EMPTY
5095: LIST
5096: LIST
5097: LIST
5098: LIST
5099: ST_TO_ADDR
// skill := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
5100: LD_ADDR_VAR 0 6
5104: PUSH
5105: LD_INT 4
5107: PUSH
5108: LD_INT 5
5110: PUSH
5111: LD_INT 6
5113: PUSH
5114: LD_INT 7
5116: PUSH
5117: EMPTY
5118: LIST
5119: LIST
5120: LIST
5121: LIST
5122: PUSH
5123: LD_OWVAR 67
5127: ARRAY
5128: ST_TO_ADDR
// SetBName ( ru_dep_main , am_tukh ) ;
5129: LD_INT 16
5131: PPUSH
5132: LD_STRING am_tukh
5134: PPUSH
5135: CALL_OW 500
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
5139: LD_ADDR_VAR 0 2
5143: PUSH
5144: LD_INT 21
5146: PUSH
5147: LD_INT 3
5149: PUSH
5150: EMPTY
5151: LIST
5152: LIST
5153: PPUSH
5154: CALL_OW 69
5158: PUSH
5159: FOR_IN
5160: IFFALSE 5197
// SetBLevel ( i , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5162: LD_VAR 0 2
5166: PPUSH
5167: LD_INT 4
5169: PUSH
5170: LD_INT 5
5172: PUSH
5173: LD_INT 6
5175: PUSH
5176: LD_INT 7
5178: PUSH
5179: EMPTY
5180: LIST
5181: LIST
5182: LIST
5183: LIST
5184: PUSH
5185: LD_OWVAR 67
5189: ARRAY
5190: PPUSH
5191: CALL_OW 241
5195: GO 5159
5197: POP
5198: POP
// for i in dep_list do
5199: LD_ADDR_VAR 0 2
5203: PUSH
5204: LD_VAR 0 9
5208: PUSH
5209: FOR_IN
5210: IFFALSE 5254
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
5212: LD_VAR 0 2
5216: PPUSH
5217: CALL_OW 274
5221: PPUSH
5222: LD_INT 1
5224: PPUSH
5225: LD_INT 1000
5227: PPUSH
5228: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
5232: LD_VAR 0 2
5236: PPUSH
5237: CALL_OW 274
5241: PPUSH
5242: LD_INT 2
5244: PPUSH
5245: LD_INT 1000
5247: PPUSH
5248: CALL_OW 277
// end ;
5252: GO 5209
5254: POP
5255: POP
// InitHc ;
5256: CALL_OW 19
// tmp := bunker_list * [ 45 , 60 , 70 , 80 ] [ Difficulty ] div 100 ;
5260: LD_ADDR_VAR 0 8
5264: PUSH
5265: LD_VAR 0 13
5269: PUSH
5270: LD_INT 45
5272: PUSH
5273: LD_INT 60
5275: PUSH
5276: LD_INT 70
5278: PUSH
5279: LD_INT 80
5281: PUSH
5282: EMPTY
5283: LIST
5284: LIST
5285: LIST
5286: LIST
5287: PUSH
5288: LD_OWVAR 67
5292: ARRAY
5293: MUL
5294: PUSH
5295: LD_INT 100
5297: DIV
5298: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , tmp ) ;
5299: LD_ADDR_VAR 0 16
5303: PUSH
5304: LD_VAR 0 16
5308: PPUSH
5309: LD_INT 1
5311: PPUSH
5312: LD_VAR 0 8
5316: PPUSH
5317: CALL_OW 1
5321: ST_TO_ADDR
// tmp := [ ] ;
5322: LD_ADDR_VAR 0 8
5326: PUSH
5327: EMPTY
5328: ST_TO_ADDR
// for i in bunker_list do
5329: LD_ADDR_VAR 0 2
5333: PUSH
5334: LD_VAR 0 13
5338: PUSH
5339: FOR_IN
5340: IFFALSE 5436
// if i mod 10 + 1 < tmp then
5342: LD_VAR 0 2
5346: PUSH
5347: LD_INT 10
5349: MOD
5350: PUSH
5351: LD_INT 1
5353: PLUS
5354: PUSH
5355: LD_VAR 0 8
5359: LESS
5360: IFFALSE 5405
// tmp := Insert ( tmp , i mod rand ( 3 , 5 ) + 1 , i ) else
5362: LD_ADDR_VAR 0 8
5366: PUSH
5367: LD_VAR 0 8
5371: PPUSH
5372: LD_VAR 0 2
5376: PUSH
5377: LD_INT 3
5379: PPUSH
5380: LD_INT 5
5382: PPUSH
5383: CALL_OW 12
5387: MOD
5388: PUSH
5389: LD_INT 1
5391: PLUS
5392: PPUSH
5393: LD_VAR 0 2
5397: PPUSH
5398: CALL_OW 2
5402: ST_TO_ADDR
5403: GO 5434
// tmp := Insert ( tmp , tmp + 1 , i ) ;
5405: LD_ADDR_VAR 0 8
5409: PUSH
5410: LD_VAR 0 8
5414: PPUSH
5415: LD_VAR 0 8
5419: PUSH
5420: LD_INT 1
5422: PLUS
5423: PPUSH
5424: LD_VAR 0 2
5428: PPUSH
5429: CALL_OW 2
5433: ST_TO_ADDR
5434: GO 5339
5436: POP
5437: POP
// bunker_list := tmp ;
5438: LD_ADDR_VAR 0 13
5442: PUSH
5443: LD_VAR 0 8
5447: ST_TO_ADDR
// for i in bunker_list ^ turret_list do
5448: LD_ADDR_VAR 0 2
5452: PUSH
5453: LD_VAR 0 13
5457: PUSH
5458: LD_VAR 0 14
5462: ADD
5463: PUSH
5464: FOR_IN
5465: IFFALSE 5488
// PlaceWeaponTurret ( i , GetTurretWeaponBase ( i ) ) ;
5467: LD_VAR 0 2
5471: PPUSH
5472: LD_VAR 0 2
5476: PPUSH
5477: CALL 2225 0 1
5481: PPUSH
5482: CALL_OW 431
5486: GO 5464
5488: POP
5489: POP
// while ( personel_counter [ 1 ] ) do
5490: LD_VAR 0 16
5494: PUSH
5495: LD_INT 1
5497: ARRAY
5498: IFFALSE 5606
// begin i := rand ( 1 , bunker_list ) ;
5500: LD_ADDR_VAR 0 2
5504: PUSH
5505: LD_INT 1
5507: PPUSH
5508: LD_VAR 0 13
5512: PPUSH
5513: CALL_OW 12
5517: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5518: LD_INT 0
5520: PPUSH
5521: LD_INT 1
5523: PPUSH
5524: LD_VAR 0 6
5528: PPUSH
5529: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , bunker_list [ i ] ) ;
5533: CALL_OW 44
5537: PPUSH
5538: LD_VAR 0 13
5542: PUSH
5543: LD_VAR 0 2
5547: ARRAY
5548: PPUSH
5549: CALL_OW 52
// bunker_list := Delete ( bunker_list , i ) ;
5553: LD_ADDR_VAR 0 13
5557: PUSH
5558: LD_VAR 0 13
5562: PPUSH
5563: LD_VAR 0 2
5567: PPUSH
5568: CALL_OW 3
5572: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , personel_counter [ 1 ] - 1 ) ;
5573: LD_ADDR_VAR 0 16
5577: PUSH
5578: LD_VAR 0 16
5582: PPUSH
5583: LD_INT 1
5585: PPUSH
5586: LD_VAR 0 16
5590: PUSH
5591: LD_INT 1
5593: ARRAY
5594: PUSH
5595: LD_INT 1
5597: MINUS
5598: PPUSH
5599: CALL_OW 1
5603: ST_TO_ADDR
// end ;
5604: GO 5490
// for i = 1 to personel_counter [ 2 ] do
5606: LD_ADDR_VAR 0 2
5610: PUSH
5611: DOUBLE
5612: LD_INT 1
5614: DEC
5615: ST_TO_ADDR
5616: LD_VAR 0 16
5620: PUSH
5621: LD_INT 2
5623: ARRAY
5624: PUSH
5625: FOR_TO
5626: IFFALSE 5657
// begin PrepareHuman ( false , 2 , skill ) ;
5628: LD_INT 0
5630: PPUSH
5631: LD_INT 2
5633: PPUSH
5634: LD_VAR 0 6
5638: PPUSH
5639: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru_dep_main ) ;
5643: CALL_OW 44
5647: PPUSH
5648: LD_INT 16
5650: PPUSH
5651: CALL_OW 52
// end ;
5655: GO 5625
5657: POP
5658: POP
// for i = 1 to personel_counter [ 3 ] do
5659: LD_ADDR_VAR 0 2
5663: PUSH
5664: DOUBLE
5665: LD_INT 1
5667: DEC
5668: ST_TO_ADDR
5669: LD_VAR 0 16
5673: PUSH
5674: LD_INT 3
5676: ARRAY
5677: PUSH
5678: FOR_TO
5679: IFFALSE 5726
// begin PrepareHuman ( false , 3 , skill ) ;
5681: LD_INT 0
5683: PPUSH
5684: LD_INT 3
5686: PPUSH
5687: LD_VAR 0 6
5691: PPUSH
5692: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , fac_list [ i mod 2 + 1 ] ) ;
5696: CALL_OW 44
5700: PPUSH
5701: LD_VAR 0 11
5705: PUSH
5706: LD_VAR 0 2
5710: PUSH
5711: LD_INT 2
5713: MOD
5714: PUSH
5715: LD_INT 1
5717: PLUS
5718: ARRAY
5719: PPUSH
5720: CALL_OW 52
// end ;
5724: GO 5678
5726: POP
5727: POP
// for i = 1 to personel_counter [ 4 ] do
5728: LD_ADDR_VAR 0 2
5732: PUSH
5733: DOUBLE
5734: LD_INT 1
5736: DEC
5737: ST_TO_ADDR
5738: LD_VAR 0 16
5742: PUSH
5743: LD_INT 4
5745: ARRAY
5746: PUSH
5747: FOR_TO
5748: IFFALSE 5785
// begin PrepareHuman ( false , 4 , skill ) ;
5750: LD_INT 0
5752: PPUSH
5753: LD_INT 4
5755: PPUSH
5756: LD_VAR 0 6
5760: PPUSH
5761: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , lab_list [ 1 ] ) ;
5765: CALL_OW 44
5769: PPUSH
5770: LD_VAR 0 10
5774: PUSH
5775: LD_INT 1
5777: ARRAY
5778: PPUSH
5779: CALL_OW 52
// end ;
5783: GO 5747
5785: POP
5786: POP
// for i in breastworks_list do
5787: LD_ADDR_VAR 0 2
5791: PUSH
5792: LD_VAR 0 12
5796: PUSH
5797: FOR_IN
5798: IFFALSE 5910
// begin r := GetDir ( i ) ;
5800: LD_ADDR_VAR 0 4
5804: PUSH
5805: LD_VAR 0 2
5809: PPUSH
5810: CALL_OW 254
5814: ST_TO_ADDR
// if r > 3 then
5815: LD_VAR 0 4
5819: PUSH
5820: LD_INT 3
5822: GREATER
5823: IFFALSE 5841
// r := r - 3 else
5825: LD_ADDR_VAR 0 4
5829: PUSH
5830: LD_VAR 0 4
5834: PUSH
5835: LD_INT 3
5837: MINUS
5838: ST_TO_ADDR
5839: GO 5855
// r := r + 3 ;
5841: LD_ADDR_VAR 0 4
5845: PUSH
5846: LD_VAR 0 4
5850: PUSH
5851: LD_INT 3
5853: PLUS
5854: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5855: LD_INT 0
5857: PPUSH
5858: LD_INT 1
5860: PPUSH
5861: LD_VAR 0 6
5865: PPUSH
5866: CALL_OW 380
// un := CreateHuman ;
5870: LD_ADDR_VAR 0 5
5874: PUSH
5875: CALL_OW 44
5879: ST_TO_ADDR
// SetDir ( un , r ) ;
5880: LD_VAR 0 5
5884: PPUSH
5885: LD_VAR 0 4
5889: PPUSH
5890: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
5894: LD_VAR 0 5
5898: PPUSH
5899: LD_VAR 0 2
5903: PPUSH
5904: CALL_OW 52
// end ;
5908: GO 5797
5910: POP
5911: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) ;
5912: LD_ADDR_VAR 0 8
5916: PUSH
5917: LD_INT 22
5919: PUSH
5920: LD_INT 3
5922: PUSH
5923: EMPTY
5924: LIST
5925: LIST
5926: PUSH
5927: LD_INT 25
5929: PUSH
5930: LD_INT 3
5932: PUSH
5933: EMPTY
5934: LIST
5935: LIST
5936: PUSH
5937: EMPTY
5938: LIST
5939: LIST
5940: PPUSH
5941: CALL_OW 69
5945: ST_TO_ADDR
// r := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
5946: LD_ADDR_VAR 0 4
5950: PUSH
5951: LD_INT 4
5953: PUSH
5954: LD_INT 5
5956: PUSH
5957: LD_INT 6
5959: PUSH
5960: LD_INT 6
5962: PUSH
5963: EMPTY
5964: LIST
5965: LIST
5966: LIST
5967: LIST
5968: PUSH
5969: LD_OWVAR 67
5973: ARRAY
5974: ST_TO_ADDR
// for i = 1 to r do
5975: LD_ADDR_VAR 0 2
5979: PUSH
5980: DOUBLE
5981: LD_INT 1
5983: DEC
5984: ST_TO_ADDR
5985: LD_VAR 0 4
5989: PUSH
5990: FOR_TO
5991: IFFALSE 6164
// begin un := PrepareTank ( 3 , 3 , [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked ] [ i mod 3 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
5993: LD_ADDR_VAR 0 5
5997: PUSH
5998: LD_INT 3
6000: PPUSH
6001: LD_INT 3
6003: PPUSH
6004: LD_INT 22
6006: PUSH
6007: LD_INT 22
6009: PUSH
6010: LD_INT 24
6012: PUSH
6013: EMPTY
6014: LIST
6015: LIST
6016: LIST
6017: PUSH
6018: LD_VAR 0 2
6022: PUSH
6023: LD_INT 3
6025: MOD
6026: PUSH
6027: LD_INT 1
6029: PLUS
6030: ARRAY
6031: PPUSH
6032: LD_INT 1
6034: PPUSH
6035: LD_INT 1
6037: PPUSH
6038: LD_INT 43
6040: PUSH
6041: LD_INT 44
6043: PUSH
6044: LD_INT 42
6046: PUSH
6047: EMPTY
6048: LIST
6049: LIST
6050: LIST
6051: PUSH
6052: LD_VAR 0 2
6056: PUSH
6057: LD_INT 3
6059: MOD
6060: PUSH
6061: LD_INT 1
6063: PLUS
6064: ARRAY
6065: PPUSH
6066: LD_INT 100
6068: PPUSH
6069: CALL 520 0 7
6073: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
6074: LD_VAR 0 5
6078: PPUSH
6079: LD_INT 0
6081: PPUSH
6082: LD_INT 5
6084: PPUSH
6085: CALL_OW 12
6089: PPUSH
6090: CALL_OW 233
// PlaceUnitArea ( un , parkingArea , false ) ;
6094: LD_VAR 0 5
6098: PPUSH
6099: LD_INT 5
6101: PPUSH
6102: LD_INT 0
6104: PPUSH
6105: CALL_OW 49
// if i > tmp - 2 then
6109: LD_VAR 0 2
6113: PUSH
6114: LD_VAR 0 8
6118: PUSH
6119: LD_INT 2
6121: MINUS
6122: GREATER
6123: IFFALSE 6127
// continue ;
6125: GO 5990
// ComExitBuilding ( tmp [ i ] ) ;
6127: LD_VAR 0 8
6131: PUSH
6132: LD_VAR 0 2
6136: ARRAY
6137: PPUSH
6138: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , un ) ;
6142: LD_VAR 0 8
6146: PUSH
6147: LD_VAR 0 2
6151: ARRAY
6152: PPUSH
6153: LD_VAR 0 5
6157: PPUSH
6158: CALL_OW 180
// end ;
6162: GO 5990
6164: POP
6165: POP
// end ;
6166: LD_VAR 0 1
6170: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) do var i , filter , tmp , engs , enemy ;
6171: LD_INT 22
6173: PUSH
6174: LD_INT 3
6176: PUSH
6177: EMPTY
6178: LIST
6179: LIST
6180: PUSH
6181: LD_INT 25
6183: PUSH
6184: LD_INT 2
6186: PUSH
6187: EMPTY
6188: LIST
6189: LIST
6190: PUSH
6191: EMPTY
6192: LIST
6193: LIST
6194: PPUSH
6195: CALL_OW 69
6199: IFFALSE 6931
6201: GO 6203
6203: DISABLE
6204: LD_INT 0
6206: PPUSH
6207: PPUSH
6208: PPUSH
6209: PPUSH
6210: PPUSH
// begin enable ;
6211: ENABLE
// filter := FilterUnitsInArea ( baseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
6212: LD_ADDR_VAR 0 2
6216: PUSH
6217: LD_INT 6
6219: PPUSH
6220: LD_INT 3
6222: PUSH
6223: LD_INT 24
6225: PUSH
6226: LD_INT 1000
6228: PUSH
6229: EMPTY
6230: LIST
6231: LIST
6232: PUSH
6233: EMPTY
6234: LIST
6235: LIST
6236: PUSH
6237: LD_INT 21
6239: PUSH
6240: LD_INT 3
6242: PUSH
6243: EMPTY
6244: LIST
6245: LIST
6246: PUSH
6247: EMPTY
6248: LIST
6249: LIST
6250: PPUSH
6251: CALL_OW 70
6255: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
6256: LD_ADDR_VAR 0 4
6260: PUSH
6261: LD_INT 22
6263: PUSH
6264: LD_INT 3
6266: PUSH
6267: EMPTY
6268: LIST
6269: LIST
6270: PUSH
6271: LD_INT 25
6273: PUSH
6274: LD_INT 2
6276: PUSH
6277: EMPTY
6278: LIST
6279: LIST
6280: PUSH
6281: EMPTY
6282: LIST
6283: LIST
6284: PPUSH
6285: CALL_OW 69
6289: ST_TO_ADDR
// if not filter and not ru_rebuild_list then
6290: LD_VAR 0 2
6294: NOT
6295: PUSH
6296: LD_EXP 20
6300: NOT
6301: AND
6302: IFFALSE 6372
// begin for i in engs do
6304: LD_ADDR_VAR 0 1
6308: PUSH
6309: LD_VAR 0 4
6313: PUSH
6314: FOR_IN
6315: IFFALSE 6370
// if GetLives ( i ) = 1000 and not HasTask ( i ) and not IsInUnit ( i ) then
6317: LD_VAR 0 1
6321: PPUSH
6322: CALL_OW 256
6326: PUSH
6327: LD_INT 1000
6329: EQUAL
6330: PUSH
6331: LD_VAR 0 1
6335: PPUSH
6336: CALL_OW 314
6340: NOT
6341: AND
6342: PUSH
6343: LD_VAR 0 1
6347: PPUSH
6348: CALL_OW 310
6352: NOT
6353: AND
6354: IFFALSE 6368
// ComEnterUnit ( i , ru_dep_main ) ;
6356: LD_VAR 0 1
6360: PPUSH
6361: LD_INT 16
6363: PPUSH
6364: CALL_OW 120
6368: GO 6314
6370: POP
6371: POP
// end ; if UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) then
6372: LD_VAR 0 4
6376: PPUSH
6377: LD_INT 3
6379: PUSH
6380: LD_INT 24
6382: PUSH
6383: LD_INT 650
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: PUSH
6390: EMPTY
6391: LIST
6392: LIST
6393: PPUSH
6394: CALL_OW 72
6398: IFFALSE 6491
// begin tmp := UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) ;
6400: LD_ADDR_VAR 0 3
6404: PUSH
6405: LD_VAR 0 4
6409: PPUSH
6410: LD_INT 3
6412: PUSH
6413: LD_INT 24
6415: PUSH
6416: LD_INT 650
6418: PUSH
6419: EMPTY
6420: LIST
6421: LIST
6422: PUSH
6423: EMPTY
6424: LIST
6425: LIST
6426: PPUSH
6427: CALL_OW 72
6431: ST_TO_ADDR
// for i in tmp do
6432: LD_ADDR_VAR 0 1
6436: PUSH
6437: LD_VAR 0 3
6441: PUSH
6442: FOR_IN
6443: IFFALSE 6489
// if not IsInArea ( i , mainBaseArea ) then
6445: LD_VAR 0 1
6449: PPUSH
6450: LD_INT 14
6452: PPUSH
6453: CALL_OW 308
6457: NOT
6458: IFFALSE 6487
// begin ComMoveXY ( i , 129 , 125 ) ;
6460: LD_VAR 0 1
6464: PPUSH
6465: LD_INT 129
6467: PPUSH
6468: LD_INT 125
6470: PPUSH
6471: CALL_OW 111
// AddComWait ( i , 0 0$30 ) ;
6475: LD_VAR 0 1
6479: PPUSH
6480: LD_INT 1050
6482: PPUSH
6483: CALL_OW 202
// end ;
6487: GO 6442
6489: POP
6490: POP
// end ; engs := UnitFilter ( engs , [ f_lives , 650 ] ) ;
6491: LD_ADDR_VAR 0 4
6495: PUSH
6496: LD_VAR 0 4
6500: PPUSH
6501: LD_INT 24
6503: PUSH
6504: LD_INT 650
6506: PUSH
6507: EMPTY
6508: LIST
6509: LIST
6510: PPUSH
6511: CALL_OW 72
6515: ST_TO_ADDR
// if not engs then
6516: LD_VAR 0 4
6520: NOT
6521: IFFALSE 6525
// exit ;
6523: GO 6931
// if filter then
6525: LD_VAR 0 2
6529: IFFALSE 6788
// begin for i in engs do
6531: LD_ADDR_VAR 0 1
6535: PUSH
6536: LD_VAR 0 4
6540: PUSH
6541: FOR_IN
6542: IFFALSE 6566
// if IsInUnit ( i ) then
6544: LD_VAR 0 1
6548: PPUSH
6549: CALL_OW 310
6553: IFFALSE 6564
// ComExitBuilding ( i ) ;
6555: LD_VAR 0 1
6559: PPUSH
6560: CALL_OW 122
6564: GO 6541
6566: POP
6567: POP
// wait ( 3 ) ;
6568: LD_INT 3
6570: PPUSH
6571: CALL_OW 67
// if filter >= 2 and engs >= 2 then
6575: LD_VAR 0 2
6579: PUSH
6580: LD_INT 2
6582: GREATEREQUAL
6583: PUSH
6584: LD_VAR 0 4
6588: PUSH
6589: LD_INT 2
6591: GREATEREQUAL
6592: AND
6593: IFFALSE 6741
// begin for i = 1 to engs / 2 do
6595: LD_ADDR_VAR 0 1
6599: PUSH
6600: DOUBLE
6601: LD_INT 1
6603: DEC
6604: ST_TO_ADDR
6605: LD_VAR 0 4
6609: PUSH
6610: LD_INT 2
6612: DIVREAL
6613: PUSH
6614: FOR_TO
6615: IFFALSE 6661
// if not HasTask ( engs [ i ] ) then
6617: LD_VAR 0 4
6621: PUSH
6622: LD_VAR 0 1
6626: ARRAY
6627: PPUSH
6628: CALL_OW 314
6632: NOT
6633: IFFALSE 6659
// ComRepairBuilding ( engs [ i ] , filter [ 1 ] ) ;
6635: LD_VAR 0 4
6639: PUSH
6640: LD_VAR 0 1
6644: ARRAY
6645: PPUSH
6646: LD_VAR 0 2
6650: PUSH
6651: LD_INT 1
6653: ARRAY
6654: PPUSH
6655: CALL_OW 130
6659: GO 6614
6661: POP
6662: POP
// for i = engs / 2 + 1 to engs do
6663: LD_ADDR_VAR 0 1
6667: PUSH
6668: DOUBLE
6669: LD_VAR 0 4
6673: PUSH
6674: LD_INT 2
6676: DIVREAL
6677: PUSH
6678: LD_INT 1
6680: PLUS
6681: DEC
6682: ST_TO_ADDR
6683: LD_VAR 0 4
6687: PUSH
6688: FOR_TO
6689: IFFALSE 6737
// if not HasTask ( engs [ i ] ) then
6691: LD_VAR 0 4
6695: PUSH
6696: LD_VAR 0 1
6700: ARRAY
6701: PPUSH
6702: CALL_OW 314
6706: NOT
6707: IFFALSE 6735
// ComRepairBuilding ( engs [ i ] , filter [ filter ] ) ;
6709: LD_VAR 0 4
6713: PUSH
6714: LD_VAR 0 1
6718: ARRAY
6719: PPUSH
6720: LD_VAR 0 2
6724: PUSH
6725: LD_VAR 0 2
6729: ARRAY
6730: PPUSH
6731: CALL_OW 130
6735: GO 6688
6737: POP
6738: POP
// end else
6739: GO 6788
// for i in engs do
6741: LD_ADDR_VAR 0 1
6745: PUSH
6746: LD_VAR 0 4
6750: PUSH
6751: FOR_IN
6752: IFFALSE 6786
// if not HasTask ( i ) then
6754: LD_VAR 0 1
6758: PPUSH
6759: CALL_OW 314
6763: NOT
6764: IFFALSE 6784
// ComRepairBuilding ( i , filter [ 1 ] ) ;
6766: LD_VAR 0 1
6770: PPUSH
6771: LD_VAR 0 2
6775: PUSH
6776: LD_INT 1
6778: ARRAY
6779: PPUSH
6780: CALL_OW 130
6784: GO 6751
6786: POP
6787: POP
// end ; enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
6788: LD_ADDR_VAR 0 5
6792: PUSH
6793: LD_INT 81
6795: PUSH
6796: LD_INT 3
6798: PUSH
6799: EMPTY
6800: LIST
6801: LIST
6802: PPUSH
6803: CALL_OW 69
6807: ST_TO_ADDR
// if ru_rebuild_list and not filter then
6808: LD_EXP 20
6812: PUSH
6813: LD_VAR 0 2
6817: NOT
6818: AND
6819: IFFALSE 6931
// begin ComExitBuilding ( engs ) ;
6821: LD_VAR 0 4
6825: PPUSH
6826: CALL_OW 122
// if GetDistUnitXY ( NearestUnitToXY ( enemy , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) > 10 then
6830: LD_VAR 0 5
6834: PPUSH
6835: LD_EXP 20
6839: PUSH
6840: LD_INT 2
6842: ARRAY
6843: PPUSH
6844: LD_EXP 20
6848: PUSH
6849: LD_INT 3
6851: ARRAY
6852: PPUSH
6853: CALL_OW 73
6857: PPUSH
6858: LD_EXP 20
6862: PUSH
6863: LD_INT 2
6865: ARRAY
6866: PPUSH
6867: LD_EXP 20
6871: PUSH
6872: LD_INT 3
6874: ARRAY
6875: PPUSH
6876: CALL_OW 297
6880: PUSH
6881: LD_INT 10
6883: GREATER
6884: IFFALSE 6931
// ComBuild ( engs , ru_rebuild_list [ 1 ] , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] , ru_rebuild_list [ 4 ] ) ;
6886: LD_VAR 0 4
6890: PPUSH
6891: LD_EXP 20
6895: PUSH
6896: LD_INT 1
6898: ARRAY
6899: PPUSH
6900: LD_EXP 20
6904: PUSH
6905: LD_INT 2
6907: ARRAY
6908: PPUSH
6909: LD_EXP 20
6913: PUSH
6914: LD_INT 3
6916: ARRAY
6917: PPUSH
6918: LD_EXP 20
6922: PUSH
6923: LD_INT 4
6925: ARRAY
6926: PPUSH
6927: CALL_OW 145
// end ; end ;
6931: PPOPN 5
6933: END
// every 0 0$1 trigger GetLives ( ru_dep_main ) < 250 do var i , tmp ;
6934: LD_INT 16
6936: PPUSH
6937: CALL_OW 256
6941: PUSH
6942: LD_INT 250
6944: LESS
6945: IFFALSE 7135
6947: GO 6949
6949: DISABLE
6950: LD_INT 0
6952: PPUSH
6953: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
6954: LD_ADDR_VAR 0 2
6958: PUSH
6959: LD_INT 22
6961: PUSH
6962: LD_INT 3
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: PUSH
6969: LD_INT 2
6971: PUSH
6972: LD_INT 25
6974: PUSH
6975: LD_INT 1
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: PUSH
6982: LD_INT 25
6984: PUSH
6985: LD_INT 3
6987: PUSH
6988: EMPTY
6989: LIST
6990: LIST
6991: PUSH
6992: LD_INT 25
6994: PUSH
6995: LD_INT 4
6997: PUSH
6998: EMPTY
6999: LIST
7000: LIST
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: LIST
7006: LIST
7007: PUSH
7008: EMPTY
7009: LIST
7010: LIST
7011: PPUSH
7012: CALL_OW 69
7016: ST_TO_ADDR
// ComExitBuilding ( tmp ) ;
7017: LD_VAR 0 2
7021: PPUSH
7022: CALL_OW 122
// wait ( 3 ) ;
7026: LD_INT 3
7028: PPUSH
7029: CALL_OW 67
// ComMoveXY ( tmp , 156 , 211 ) ;
7033: LD_VAR 0 2
7037: PPUSH
7038: LD_INT 156
7040: PPUSH
7041: LD_INT 211
7043: PPUSH
7044: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7048: LD_INT 35
7050: PPUSH
7051: CALL_OW 67
// for i in tmp do
7055: LD_ADDR_VAR 0 1
7059: PUSH
7060: LD_VAR 0 2
7064: PUSH
7065: FOR_IN
7066: IFFALSE 7126
// if IsInArea ( i , escapeArea ) then
7068: LD_VAR 0 1
7072: PPUSH
7073: LD_INT 15
7075: PPUSH
7076: CALL_OW 308
7080: IFFALSE 7109
// begin RemoveUnit ( i ) ;
7082: LD_VAR 0 1
7086: PPUSH
7087: CALL_OW 64
// tmp := tmp diff i ;
7091: LD_ADDR_VAR 0 2
7095: PUSH
7096: LD_VAR 0 2
7100: PUSH
7101: LD_VAR 0 1
7105: DIFF
7106: ST_TO_ADDR
// end else
7107: GO 7124
// ComMoveXY ( i , 156 , 211 ) ;
7109: LD_VAR 0 1
7113: PPUSH
7114: LD_INT 156
7116: PPUSH
7117: LD_INT 211
7119: PPUSH
7120: CALL_OW 111
7124: GO 7065
7126: POP
7127: POP
// until not tmp ;
7128: LD_VAR 0 2
7132: NOT
7133: IFFALSE 7048
// end ;
7135: PPOPN 2
7137: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do var i , tmp , doc ;
7138: LD_INT 22
7140: PUSH
7141: LD_INT 3
7143: PUSH
7144: EMPTY
7145: LIST
7146: LIST
7147: PUSH
7148: LD_INT 25
7150: PUSH
7151: LD_INT 4
7153: PUSH
7154: EMPTY
7155: LIST
7156: LIST
7157: PUSH
7158: EMPTY
7159: LIST
7160: LIST
7161: PPUSH
7162: CALL_OW 69
7166: IFFALSE 7420
7168: GO 7170
7170: DISABLE
7171: LD_INT 0
7173: PPUSH
7174: PPUSH
7175: PPUSH
// begin enable ;
7176: ENABLE
// tmp := FilterUnitsInArea ( mainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7177: LD_ADDR_VAR 0 2
7181: PUSH
7182: LD_INT 14
7184: PPUSH
7185: LD_INT 22
7187: PUSH
7188: LD_INT 3
7190: PUSH
7191: EMPTY
7192: LIST
7193: LIST
7194: PUSH
7195: LD_INT 21
7197: PUSH
7198: LD_INT 1
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: PUSH
7205: LD_INT 3
7207: PUSH
7208: LD_INT 24
7210: PUSH
7211: LD_INT 1000
7213: PUSH
7214: EMPTY
7215: LIST
7216: LIST
7217: PUSH
7218: EMPTY
7219: LIST
7220: LIST
7221: PUSH
7222: EMPTY
7223: LIST
7224: LIST
7225: LIST
7226: PPUSH
7227: CALL_OW 70
7231: ST_TO_ADDR
// doc := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
7232: LD_ADDR_VAR 0 3
7236: PUSH
7237: LD_INT 22
7239: PUSH
7240: LD_INT 3
7242: PUSH
7243: EMPTY
7244: LIST
7245: LIST
7246: PUSH
7247: LD_INT 25
7249: PUSH
7250: LD_INT 4
7252: PUSH
7253: EMPTY
7254: LIST
7255: LIST
7256: PUSH
7257: EMPTY
7258: LIST
7259: LIST
7260: PPUSH
7261: CALL_OW 69
7265: ST_TO_ADDR
// if not doc then
7266: LD_VAR 0 3
7270: NOT
7271: IFFALSE 7275
// exit ;
7273: GO 7420
// if not tmp then
7275: LD_VAR 0 2
7279: NOT
7280: IFFALSE 7371
// begin if not IsInUnit ( doc [ 1 ] ) then
7282: LD_VAR 0 3
7286: PUSH
7287: LD_INT 1
7289: ARRAY
7290: PPUSH
7291: CALL_OW 310
7295: NOT
7296: IFFALSE 7369
// ComEnterUnit ( doc , FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ) ;
7298: LD_VAR 0 3
7302: PPUSH
7303: LD_INT 22
7305: PUSH
7306: LD_INT 3
7308: PUSH
7309: EMPTY
7310: LIST
7311: LIST
7312: PUSH
7313: LD_INT 2
7315: PUSH
7316: LD_INT 30
7318: PUSH
7319: LD_INT 6
7321: PUSH
7322: EMPTY
7323: LIST
7324: LIST
7325: PUSH
7326: LD_INT 30
7328: PUSH
7329: LD_INT 7
7331: PUSH
7332: EMPTY
7333: LIST
7334: LIST
7335: PUSH
7336: LD_INT 30
7338: PUSH
7339: LD_INT 8
7341: PUSH
7342: EMPTY
7343: LIST
7344: LIST
7345: PUSH
7346: EMPTY
7347: LIST
7348: LIST
7349: LIST
7350: LIST
7351: PUSH
7352: EMPTY
7353: LIST
7354: LIST
7355: PPUSH
7356: CALL_OW 69
7360: PUSH
7361: LD_INT 1
7363: ARRAY
7364: PPUSH
7365: CALL_OW 120
// exit ;
7369: GO 7420
// end ; if IsInUnit ( doc [ 1 ] ) then
7371: LD_VAR 0 3
7375: PUSH
7376: LD_INT 1
7378: ARRAY
7379: PPUSH
7380: CALL_OW 310
7384: IFFALSE 7395
// ComExitBuilding ( doc ) ;
7386: LD_VAR 0 3
7390: PPUSH
7391: CALL_OW 122
// wait ( 3 ) ;
7395: LD_INT 3
7397: PPUSH
7398: CALL_OW 67
// ComHeal ( doc , tmp [ 1 ] ) ;
7402: LD_VAR 0 3
7406: PPUSH
7407: LD_VAR 0 2
7411: PUSH
7412: LD_INT 1
7414: ARRAY
7415: PPUSH
7416: CALL_OW 128
// end ;
7420: PPOPN 3
7422: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do var i , tmp , attacking , areas , area , mech ;
7423: LD_INT 22
7425: PUSH
7426: LD_INT 3
7428: PUSH
7429: EMPTY
7430: LIST
7431: LIST
7432: PUSH
7433: LD_INT 25
7435: PUSH
7436: LD_INT 3
7438: PUSH
7439: EMPTY
7440: LIST
7441: LIST
7442: PUSH
7443: EMPTY
7444: LIST
7445: LIST
7446: PPUSH
7447: CALL_OW 69
7451: PUSH
7452: LD_INT 22
7454: PUSH
7455: LD_INT 3
7457: PUSH
7458: EMPTY
7459: LIST
7460: LIST
7461: PUSH
7462: LD_INT 21
7464: PUSH
7465: LD_INT 2
7467: PUSH
7468: EMPTY
7469: LIST
7470: LIST
7471: PUSH
7472: EMPTY
7473: LIST
7474: LIST
7475: PPUSH
7476: CALL_OW 69
7480: AND
7481: IFFALSE 8240
7483: GO 7485
7485: DISABLE
7486: LD_INT 0
7488: PPUSH
7489: PPUSH
7490: PPUSH
7491: PPUSH
7492: PPUSH
7493: PPUSH
// begin enable ;
7494: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
7495: LD_ADDR_VAR 0 2
7499: PUSH
7500: LD_INT 22
7502: PUSH
7503: LD_INT 3
7505: PUSH
7506: EMPTY
7507: LIST
7508: LIST
7509: PUSH
7510: LD_INT 21
7512: PUSH
7513: LD_INT 2
7515: PUSH
7516: EMPTY
7517: LIST
7518: LIST
7519: PUSH
7520: LD_INT 3
7522: PUSH
7523: LD_INT 58
7525: PUSH
7526: EMPTY
7527: LIST
7528: PUSH
7529: EMPTY
7530: LIST
7531: LIST
7532: PUSH
7533: EMPTY
7534: LIST
7535: LIST
7536: LIST
7537: PPUSH
7538: CALL_OW 69
7542: ST_TO_ADDR
// areas := [ sectorAlpha , sectorBeta , sectorDelta , mainBaseArea ] ;
7543: LD_ADDR_VAR 0 4
7547: PUSH
7548: LD_INT 10
7550: PUSH
7551: LD_INT 11
7553: PUSH
7554: LD_INT 12
7556: PUSH
7557: LD_INT 14
7559: PUSH
7560: EMPTY
7561: LIST
7562: LIST
7563: LIST
7564: LIST
7565: ST_TO_ADDR
// area := 0 ;
7566: LD_ADDR_VAR 0 5
7570: PUSH
7571: LD_INT 0
7573: ST_TO_ADDR
// attacking := false ;
7574: LD_ADDR_VAR 0 3
7578: PUSH
7579: LD_INT 0
7581: ST_TO_ADDR
// for i in tmp do
7582: LD_ADDR_VAR 0 1
7586: PUSH
7587: LD_VAR 0 2
7591: PUSH
7592: FOR_IN
7593: IFFALSE 8021
// begin if GetDistUnits ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) < 10 and not HasTask ( i ) and not GetTag ( i ) and GetLives ( i ) > 650 then
7595: LD_VAR 0 1
7599: PPUSH
7600: LD_INT 22
7602: PUSH
7603: LD_INT 1
7605: PUSH
7606: EMPTY
7607: LIST
7608: LIST
7609: PPUSH
7610: CALL_OW 69
7614: PPUSH
7615: LD_VAR 0 1
7619: PPUSH
7620: CALL_OW 74
7624: PPUSH
7625: CALL_OW 296
7629: PUSH
7630: LD_INT 10
7632: LESS
7633: PUSH
7634: LD_VAR 0 1
7638: PPUSH
7639: CALL_OW 314
7643: NOT
7644: AND
7645: PUSH
7646: LD_VAR 0 1
7650: PPUSH
7651: CALL_OW 110
7655: NOT
7656: AND
7657: PUSH
7658: LD_VAR 0 1
7662: PPUSH
7663: CALL_OW 256
7667: PUSH
7668: LD_INT 650
7670: GREATER
7671: AND
7672: IFFALSE 7716
// begin ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
7674: LD_VAR 0 1
7678: PPUSH
7679: LD_INT 22
7681: PUSH
7682: LD_INT 1
7684: PUSH
7685: EMPTY
7686: LIST
7687: LIST
7688: PPUSH
7689: CALL_OW 69
7693: PPUSH
7694: LD_VAR 0 1
7698: PPUSH
7699: CALL_OW 74
7703: PPUSH
7704: CALL_OW 115
// attacking := true ;
7708: LD_ADDR_VAR 0 3
7712: PUSH
7713: LD_INT 1
7715: ST_TO_ADDR
// end ; if not GetTag ( i ) and GetLives ( i ) < 650 and GetType ( i ) = unit_vehicle then
7716: LD_VAR 0 1
7720: PPUSH
7721: CALL_OW 110
7725: NOT
7726: PUSH
7727: LD_VAR 0 1
7731: PPUSH
7732: CALL_OW 256
7736: PUSH
7737: LD_INT 650
7739: LESS
7740: AND
7741: PUSH
7742: LD_VAR 0 1
7746: PPUSH
7747: CALL_OW 247
7751: PUSH
7752: LD_INT 2
7754: EQUAL
7755: AND
7756: IFFALSE 7785
// begin SetTag ( i , 1 ) ;
7758: LD_VAR 0 1
7762: PPUSH
7763: LD_INT 1
7765: PPUSH
7766: CALL_OW 109
// ComMoveXY ( i , 130 , 139 ) ;
7770: LD_VAR 0 1
7774: PPUSH
7775: LD_INT 130
7777: PPUSH
7778: LD_INT 139
7780: PPUSH
7781: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 130 , 139 ) < 6 then
7785: LD_VAR 0 1
7789: PPUSH
7790: CALL_OW 110
7794: PUSH
7795: LD_INT 1
7797: EQUAL
7798: PUSH
7799: LD_VAR 0 1
7803: PPUSH
7804: LD_INT 130
7806: PPUSH
7807: LD_INT 139
7809: PPUSH
7810: CALL_OW 297
7814: PUSH
7815: LD_INT 6
7817: LESS
7818: AND
7819: IFFALSE 7833
// SetTag ( i , 2 ) ;
7821: LD_VAR 0 1
7825: PPUSH
7826: LD_INT 2
7828: PPUSH
7829: CALL_OW 109
// if GetTag ( i ) = 2 then
7833: LD_VAR 0 1
7837: PPUSH
7838: CALL_OW 110
7842: PUSH
7843: LD_INT 2
7845: EQUAL
7846: IFFALSE 7981
// begin if GetLives ( i ) = 1000 then
7848: LD_VAR 0 1
7852: PPUSH
7853: CALL_OW 256
7857: PUSH
7858: LD_INT 1000
7860: EQUAL
7861: IFFALSE 7877
// SetTag ( i , 3 ) else
7863: LD_VAR 0 1
7867: PPUSH
7868: LD_INT 3
7870: PPUSH
7871: CALL_OW 109
7875: GO 7981
// if IsDrivenBy ( i ) then
7877: LD_VAR 0 1
7881: PPUSH
7882: CALL_OW 311
7886: IFFALSE 7981
// begin mech := IsDrivenBy ( i ) ;
7888: LD_ADDR_VAR 0 6
7892: PUSH
7893: LD_VAR 0 1
7897: PPUSH
7898: CALL_OW 311
7902: ST_TO_ADDR
// if not See ( 1 , mech ) and GetLives ( mech ) < 1000 then
7903: LD_INT 1
7905: PPUSH
7906: LD_VAR 0 6
7910: PPUSH
7911: CALL_OW 292
7915: NOT
7916: PUSH
7917: LD_VAR 0 6
7921: PPUSH
7922: CALL_OW 256
7926: PUSH
7927: LD_INT 1000
7929: LESS
7930: AND
7931: IFFALSE 7945
// SetLives ( mech , 1000 ) ;
7933: LD_VAR 0 6
7937: PPUSH
7938: LD_INT 1000
7940: PPUSH
7941: CALL_OW 234
// if not See ( 1 , i ) then
7945: LD_INT 1
7947: PPUSH
7948: LD_VAR 0 1
7952: PPUSH
7953: CALL_OW 292
7957: NOT
7958: IFFALSE 7972
// SetFuel ( i , 100 ) ;
7960: LD_VAR 0 1
7964: PPUSH
7965: LD_INT 100
7967: PPUSH
7968: CALL_OW 240
// ComRepairVehicleAndReturn ( mech ) ;
7972: LD_VAR 0 6
7976: PPUSH
7977: CALL 73114 0 1
// end ; end ; if GetTag ( i ) = 3 and IsDrivenBy ( i ) then
7981: LD_VAR 0 1
7985: PPUSH
7986: CALL_OW 110
7990: PUSH
7991: LD_INT 3
7993: EQUAL
7994: PUSH
7995: LD_VAR 0 1
7999: PPUSH
8000: CALL_OW 311
8004: AND
8005: IFFALSE 8019
// SetTag ( i , 0 ) ;
8007: LD_VAR 0 1
8011: PPUSH
8012: LD_INT 0
8014: PPUSH
8015: CALL_OW 109
// end ;
8019: GO 7592
8021: POP
8022: POP
// if attacking then
8023: LD_VAR 0 3
8027: IFFALSE 8031
// exit ;
8029: GO 8240
// if can_end and tmp then
8031: LD_EXP 6
8035: PUSH
8036: LD_VAR 0 2
8040: AND
8041: IFFALSE 8096
// begin for i in tmp do
8043: LD_ADDR_VAR 0 1
8047: PUSH
8048: LD_VAR 0 2
8052: PUSH
8053: FOR_IN
8054: IFFALSE 8092
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
8056: LD_VAR 0 1
8060: PPUSH
8061: LD_INT 22
8063: PUSH
8064: LD_INT 1
8066: PUSH
8067: EMPTY
8068: LIST
8069: LIST
8070: PPUSH
8071: CALL_OW 69
8075: PPUSH
8076: LD_VAR 0 1
8080: PPUSH
8081: CALL_OW 74
8085: PPUSH
8086: CALL_OW 115
8090: GO 8053
8092: POP
8093: POP
// exit ;
8094: GO 8240
// end ; for i in areas do
8096: LD_ADDR_VAR 0 1
8100: PUSH
8101: LD_VAR 0 4
8105: PUSH
8106: FOR_IN
8107: IFFALSE 8144
// if FilterUnitsInArea ( i , [ f_side , 1 ] ) then
8109: LD_VAR 0 1
8113: PPUSH
8114: LD_INT 22
8116: PUSH
8117: LD_INT 1
8119: PUSH
8120: EMPTY
8121: LIST
8122: LIST
8123: PPUSH
8124: CALL_OW 70
8128: IFFALSE 8142
// begin area := i ;
8130: LD_ADDR_VAR 0 5
8134: PUSH
8135: LD_VAR 0 1
8139: ST_TO_ADDR
// break ;
8140: GO 8144
// end ;
8142: GO 8106
8144: POP
8145: POP
// if area then
8146: LD_VAR 0 5
8150: IFFALSE 8240
// begin for i in tmp do
8152: LD_ADDR_VAR 0 1
8156: PUSH
8157: LD_VAR 0 2
8161: PUSH
8162: FOR_IN
8163: IFFALSE 8238
// begin if GetTag ( i ) then
8165: LD_VAR 0 1
8169: PPUSH
8170: CALL_OW 110
8174: IFFALSE 8178
// continue ;
8176: GO 8162
// if GetFuel ( i ) < 33 then
8178: LD_VAR 0 1
8182: PPUSH
8183: CALL_OW 261
8187: PUSH
8188: LD_INT 33
8190: LESS
8191: IFFALSE 8205
// SetFuel ( i , 33 ) ;
8193: LD_VAR 0 1
8197: PPUSH
8198: LD_INT 33
8200: PPUSH
8201: CALL_OW 240
// if not IsInArea ( i , area ) then
8205: LD_VAR 0 1
8209: PPUSH
8210: LD_VAR 0 5
8214: PPUSH
8215: CALL_OW 308
8219: NOT
8220: IFFALSE 8236
// ComMoveToArea ( i , area ) ;
8222: LD_VAR 0 1
8226: PPUSH
8227: LD_VAR 0 5
8231: PPUSH
8232: CALL_OW 113
// end ;
8236: GO 8162
8238: POP
8239: POP
// end ; end ;
8240: PPOPN 6
8242: END
// every 15 15$00 trigger Difficulty > 1 do var i , j , un , veh , time , count ;
8243: LD_OWVAR 67
8247: PUSH
8248: LD_INT 1
8250: GREATER
8251: IFFALSE 8540
8253: GO 8255
8255: DISABLE
8256: LD_INT 0
8258: PPUSH
8259: PPUSH
8260: PPUSH
8261: PPUSH
8262: PPUSH
8263: PPUSH
// begin uc_side := 3 ;
8264: LD_ADDR_OWVAR 20
8268: PUSH
8269: LD_INT 3
8271: ST_TO_ADDR
// uc_nation := 3 ;
8272: LD_ADDR_OWVAR 21
8276: PUSH
8277: LD_INT 3
8279: ST_TO_ADDR
// time := [ 9 9$00 , 7 7$00 , 6 6$00 , 5 5$30 ] [ Difficulty ] ;
8280: LD_ADDR_VAR 0 5
8284: PUSH
8285: LD_INT 18900
8287: PUSH
8288: LD_INT 14700
8290: PUSH
8291: LD_INT 12600
8293: PUSH
8294: LD_INT 11550
8296: PUSH
8297: EMPTY
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: PUSH
8303: LD_OWVAR 67
8307: ARRAY
8308: ST_TO_ADDR
// count := [ 2 , 2 , 3 , 3 ] [ Difficulty ] ;
8309: LD_ADDR_VAR 0 6
8313: PUSH
8314: LD_INT 2
8316: PUSH
8317: LD_INT 2
8319: PUSH
8320: LD_INT 3
8322: PUSH
8323: LD_INT 3
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: LIST
8330: LIST
8331: PUSH
8332: LD_OWVAR 67
8336: ARRAY
8337: ST_TO_ADDR
// for i = 1 to count do
8338: LD_ADDR_VAR 0 1
8342: PUSH
8343: DOUBLE
8344: LD_INT 1
8346: DEC
8347: ST_TO_ADDR
8348: LD_VAR 0 6
8352: PUSH
8353: FOR_TO
8354: IFFALSE 8538
// begin wait ( time ) ;
8356: LD_VAR 0 5
8360: PPUSH
8361: CALL_OW 67
// for j = 1 to rand ( 1 , Difficulty ) do
8365: LD_ADDR_VAR 0 2
8369: PUSH
8370: DOUBLE
8371: LD_INT 1
8373: DEC
8374: ST_TO_ADDR
8375: LD_INT 1
8377: PPUSH
8378: LD_OWVAR 67
8382: PPUSH
8383: CALL_OW 12
8387: PUSH
8388: FOR_TO
8389: IFFALSE 8534
// begin veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 80 ) ;
8391: LD_ADDR_VAR 0 4
8395: PUSH
8396: LD_INT 3
8398: PPUSH
8399: LD_INT 3
8401: PPUSH
8402: LD_INT 22
8404: PPUSH
8405: LD_INT 1
8407: PPUSH
8408: LD_INT 1
8410: PPUSH
8411: LD_INT 43
8413: PUSH
8414: LD_INT 44
8416: PUSH
8417: LD_INT 42
8419: PUSH
8420: EMPTY
8421: LIST
8422: LIST
8423: LIST
8424: PUSH
8425: LD_VAR 0 1
8429: PUSH
8430: LD_INT 3
8432: MOD
8433: PUSH
8434: LD_INT 1
8436: PLUS
8437: ARRAY
8438: PPUSH
8439: LD_INT 80
8441: PPUSH
8442: CALL 520 0 7
8446: ST_TO_ADDR
// PlaceUnitArea ( veh , southArea , false ) ;
8447: LD_VAR 0 4
8451: PPUSH
8452: LD_INT 13
8454: PPUSH
8455: LD_INT 0
8457: PPUSH
8458: CALL_OW 49
// PrepareHuman ( false , 3 , [ 4 , 5 , 5 , 7 ] [ Difficulty ] ) ;
8462: LD_INT 0
8464: PPUSH
8465: LD_INT 3
8467: PPUSH
8468: LD_INT 4
8470: PUSH
8471: LD_INT 5
8473: PUSH
8474: LD_INT 5
8476: PUSH
8477: LD_INT 7
8479: PUSH
8480: EMPTY
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: PUSH
8486: LD_OWVAR 67
8490: ARRAY
8491: PPUSH
8492: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
8496: CALL_OW 44
8500: PPUSH
8501: LD_VAR 0 4
8505: PPUSH
8506: CALL_OW 52
// wait ( 0 0$01 ) ;
8510: LD_INT 35
8512: PPUSH
8513: CALL_OW 67
// ComMoveXY ( veh , 143 , 143 ) ;
8517: LD_VAR 0 4
8521: PPUSH
8522: LD_INT 143
8524: PPUSH
8525: LD_INT 143
8527: PPUSH
8528: CALL_OW 111
// end ;
8532: GO 8388
8534: POP
8535: POP
// end ;
8536: GO 8353
8538: POP
8539: POP
// end ;
8540: PPOPN 6
8542: END
// every 8 8$00 do var i , un , time ;
8543: GO 8545
8545: DISABLE
8546: LD_INT 0
8548: PPUSH
8549: PPUSH
8550: PPUSH
// begin time := [ 3 3$00 , 1 1$00 , 0 0$30 ] ;
8551: LD_ADDR_VAR 0 3
8555: PUSH
8556: LD_INT 6300
8558: PUSH
8559: LD_INT 2100
8561: PUSH
8562: LD_INT 1050
8564: PUSH
8565: EMPTY
8566: LIST
8567: LIST
8568: LIST
8569: ST_TO_ADDR
// wait ( time ) ;
8570: LD_VAR 0 3
8574: PPUSH
8575: CALL_OW 67
// uc_side := 3 ;
8579: LD_ADDR_OWVAR 20
8583: PUSH
8584: LD_INT 3
8586: ST_TO_ADDR
// uc_nation := 3 ;
8587: LD_ADDR_OWVAR 21
8591: PUSH
8592: LD_INT 3
8594: ST_TO_ADDR
// for i = 1 to 2 do
8595: LD_ADDR_VAR 0 1
8599: PUSH
8600: DOUBLE
8601: LD_INT 1
8603: DEC
8604: ST_TO_ADDR
8605: LD_INT 2
8607: PUSH
8608: FOR_TO
8609: IFFALSE 8672
// begin PrepareHuman ( false , 1 , 4 ) ;
8611: LD_INT 0
8613: PPUSH
8614: LD_INT 1
8616: PPUSH
8617: LD_INT 4
8619: PPUSH
8620: CALL_OW 380
// un := CreateHuman ;
8624: LD_ADDR_VAR 0 2
8628: PUSH
8629: CALL_OW 44
8633: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_dep_main ) ;
8634: LD_VAR 0 2
8638: PPUSH
8639: LD_INT 16
8641: PPUSH
8642: CALL_OW 52
// ComExitBuilding ( un ) ;
8646: LD_VAR 0 2
8650: PPUSH
8651: CALL_OW 122
// AddComAgressiveMove ( un , 41 , 76 ) ;
8655: LD_VAR 0 2
8659: PPUSH
8660: LD_INT 41
8662: PPUSH
8663: LD_INT 76
8665: PPUSH
8666: CALL_OW 174
// end ;
8670: GO 8608
8672: POP
8673: POP
// end ; end_of_file
8674: PPOPN 3
8676: END
// export function Action ; begin
8677: LD_INT 0
8679: PPUSH
// CenterNowOnXY ( 28 , 3 ) ;
8680: LD_INT 28
8682: PPUSH
8683: LD_INT 3
8685: PPUSH
8686: CALL_OW 86
// PlaceSeeing ( 41 , 76 , 1 , 10 ) ;
8690: LD_INT 41
8692: PPUSH
8693: LD_INT 76
8695: PPUSH
8696: LD_INT 1
8698: PPUSH
8699: LD_INT 10
8701: PPUSH
8702: CALL_OW 330
// RemoveSeeing ( 41 , 76 , 1 ) ;
8706: LD_INT 41
8708: PPUSH
8709: LD_INT 76
8711: PPUSH
8712: LD_INT 1
8714: PPUSH
8715: CALL_OW 331
// InGameOn ;
8719: CALL_OW 8
// SayRadio ( Harisson , D2-Har-1 ) ;
8723: LD_EXP 19
8727: PPUSH
8728: LD_STRING D2-Har-1
8730: PPUSH
8731: CALL_OW 94
// InGameOff ;
8735: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
8739: LD_STRING M1
8741: PPUSH
8742: CALL_OW 337
// end ;
8746: LD_VAR 0 1
8750: RET
// every 0 0$1 trigger buildings_counter > 1 do var un ;
8751: LD_EXP 4
8755: PUSH
8756: LD_INT 1
8758: GREATER
8759: IFFALSE 8850
8761: GO 8763
8763: DISABLE
8764: LD_INT 0
8766: PPUSH
// begin un := GetRandom ( sex_male ) [ 1 ] ;
8767: LD_ADDR_VAR 0 1
8771: PUSH
8772: LD_INT 1
8774: PPUSH
8775: CALL 608 0 1
8779: PUSH
8780: LD_INT 1
8782: ARRAY
8783: ST_TO_ADDR
// Say ( un , D2a-Sol1-1 ) ;
8784: LD_VAR 0 1
8788: PPUSH
8789: LD_STRING D2a-Sol1-1
8791: PPUSH
8792: CALL_OW 88
// if not un then
8796: LD_VAR 0 1
8800: NOT
8801: IFFALSE 8832
// begin un := GetRandom ( sex_female ) [ 1 ] ;
8803: LD_ADDR_VAR 0 1
8807: PUSH
8808: LD_INT 2
8810: PPUSH
8811: CALL 608 0 1
8815: PUSH
8816: LD_INT 1
8818: ARRAY
8819: ST_TO_ADDR
// Say ( un , D2a-FSol1-1 ) ;
8820: LD_VAR 0 1
8824: PPUSH
8825: LD_STRING D2a-FSol1-1
8827: PPUSH
8828: CALL_OW 88
// end ; if Khatam then
8832: LD_EXP 17
8836: IFFALSE 8850
// Say ( Khatam , D3b-Khat-3 ) ;
8838: LD_EXP 17
8842: PPUSH
8843: LD_STRING D3b-Khat-3
8845: PPUSH
8846: CALL_OW 88
// end ;
8850: PPOPN 1
8852: END
// every 0 0$1 trigger Frank and not Kikuchi and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Frank , 7 ] ] ) and IsOk ( Frank ) and not InBattle ( 1 ) and not InBattle ( 4 ) do var i , ape ;
8853: LD_EXP 15
8857: PUSH
8858: LD_EXP 18
8862: NOT
8863: AND
8864: PUSH
8865: LD_INT 22
8867: PUSH
8868: LD_INT 1
8870: PUSH
8871: EMPTY
8872: LIST
8873: LIST
8874: PUSH
8875: LD_INT 91
8877: PUSH
8878: LD_EXP 15
8882: PUSH
8883: LD_INT 7
8885: PUSH
8886: EMPTY
8887: LIST
8888: LIST
8889: LIST
8890: PUSH
8891: EMPTY
8892: LIST
8893: LIST
8894: PPUSH
8895: CALL_OW 69
8899: AND
8900: PUSH
8901: LD_EXP 15
8905: PPUSH
8906: CALL_OW 302
8910: AND
8911: PUSH
8912: LD_INT 1
8914: PPUSH
8915: CALL_OW 463
8919: NOT
8920: AND
8921: PUSH
8922: LD_INT 4
8924: PPUSH
8925: CALL_OW 463
8929: NOT
8930: AND
8931: IFFALSE 9518
8933: GO 8935
8935: DISABLE
8936: LD_INT 0
8938: PPUSH
8939: PPUSH
// begin InGameOn ;
8940: CALL_OW 8
// ape := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
8944: LD_ADDR_VAR 0 2
8948: PUSH
8949: LD_INT 22
8951: PUSH
8952: LD_INT 0
8954: PUSH
8955: EMPTY
8956: LIST
8957: LIST
8958: PUSH
8959: LD_INT 25
8961: PUSH
8962: LD_INT 12
8964: PUSH
8965: EMPTY
8966: LIST
8967: LIST
8968: PUSH
8969: EMPTY
8970: LIST
8971: LIST
8972: PPUSH
8973: CALL_OW 69
8977: ST_TO_ADDR
// ape := NearestUnitToUnit ( ape , Frank ) ;
8978: LD_ADDR_VAR 0 2
8982: PUSH
8983: LD_VAR 0 2
8987: PPUSH
8988: LD_EXP 15
8992: PPUSH
8993: CALL_OW 74
8997: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , Frank , 20 ] ] ) do
8998: LD_ADDR_VAR 0 1
9002: PUSH
9003: LD_INT 22
9005: PUSH
9006: LD_INT 1
9008: PUSH
9009: EMPTY
9010: LIST
9011: LIST
9012: PUSH
9013: LD_INT 21
9015: PUSH
9016: LD_INT 1
9018: PUSH
9019: EMPTY
9020: LIST
9021: LIST
9022: PUSH
9023: LD_INT 91
9025: PUSH
9026: LD_EXP 15
9030: PUSH
9031: LD_INT 20
9033: PUSH
9034: EMPTY
9035: LIST
9036: LIST
9037: LIST
9038: PUSH
9039: EMPTY
9040: LIST
9041: LIST
9042: LIST
9043: PPUSH
9044: CALL_OW 69
9048: PUSH
9049: FOR_IN
9050: IFFALSE 9068
// ComTurnUnit ( i , Frank ) ;
9052: LD_VAR 0 1
9056: PPUSH
9057: LD_EXP 15
9061: PPUSH
9062: CALL_OW 119
9066: GO 9049
9068: POP
9069: POP
// SetSide ( Frank , 1 ) ;
9070: LD_EXP 15
9074: PPUSH
9075: LD_INT 1
9077: PPUSH
9078: CALL_OW 235
// ComMoveUnit ( JMM , Frank ) ;
9082: LD_EXP 9
9086: PPUSH
9087: LD_EXP 15
9091: PPUSH
9092: CALL_OW 112
// AddComTurnUnit ( JMM , Frank ) ;
9096: LD_EXP 9
9100: PPUSH
9101: LD_EXP 15
9105: PPUSH
9106: CALL_OW 179
// CenterOnUnits ( Frank ) ;
9110: LD_EXP 15
9114: PPUSH
9115: CALL_OW 85
// Say ( Frank , D3a-Frank-1 ) ;
9119: LD_EXP 15
9123: PPUSH
9124: LD_STRING D3a-Frank-1
9126: PPUSH
9127: CALL_OW 88
// ComMoveXY ( ape , 42 , 78 ) ;
9131: LD_VAR 0 2
9135: PPUSH
9136: LD_INT 42
9138: PPUSH
9139: LD_INT 78
9141: PPUSH
9142: CALL_OW 111
// AddComTurnUnit ( ape , Frank ) ;
9146: LD_VAR 0 2
9150: PPUSH
9151: LD_EXP 15
9155: PPUSH
9156: CALL_OW 179
// if Lisa then
9160: LD_EXP 14
9164: IFFALSE 9178
// Say ( Lisa , D3a-Lisa-1 ) ;
9166: LD_EXP 14
9170: PPUSH
9171: LD_STRING D3a-Lisa-1
9173: PPUSH
9174: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
9178: LD_EXP 9
9182: PPUSH
9183: LD_STRING D3a-JMM-1
9185: PPUSH
9186: CALL_OW 88
// if Cyrus then
9190: LD_EXP 13
9194: IFFALSE 9208
// Say ( Cyrus , D3a-Cyrus-1 ) ;
9196: LD_EXP 13
9200: PPUSH
9201: LD_STRING D3a-Cyrus-1
9203: PPUSH
9204: CALL_OW 88
// if GetRandom ( sex_male ) then
9208: LD_INT 1
9210: PPUSH
9211: CALL 608 0 1
9215: IFFALSE 9236
// Say ( GetRandom ( sex_male ) [ 1 ] , D3a-Sol1-1 ) ;
9217: LD_INT 1
9219: PPUSH
9220: CALL 608 0 1
9224: PUSH
9225: LD_INT 1
9227: ARRAY
9228: PPUSH
9229: LD_STRING D3a-Sol1-1
9231: PPUSH
9232: CALL_OW 88
// if GetRandom ( sex_female ) then
9236: LD_INT 2
9238: PPUSH
9239: CALL 608 0 1
9243: IFFALSE 9264
// Say ( GetRandom ( sex_female ) [ 1 ] , D3a-FSol1-1 ) ;
9245: LD_INT 2
9247: PPUSH
9248: CALL 608 0 1
9252: PUSH
9253: LD_INT 1
9255: ARRAY
9256: PPUSH
9257: LD_STRING D3a-FSol1-1
9259: PPUSH
9260: CALL_OW 88
// if Gladstone then
9264: LD_EXP 16
9268: IFFALSE 9282
// Say ( Gladstone , D3a-Glad-1 ) ;
9270: LD_EXP 16
9274: PPUSH
9275: LD_STRING D3a-Glad-1
9277: PPUSH
9278: CALL_OW 88
// ComMoveXY ( ape , 60 , 113 ) ;
9282: LD_VAR 0 2
9286: PPUSH
9287: LD_INT 60
9289: PPUSH
9290: LD_INT 113
9292: PPUSH
9293: CALL_OW 111
// Say ( Frank , D3a-Frank-2 ) ;
9297: LD_EXP 15
9301: PPUSH
9302: LD_STRING D3a-Frank-2
9304: PPUSH
9305: CALL_OW 88
// ComTurnUnit ( Frank , JMM ) ;
9309: LD_EXP 15
9313: PPUSH
9314: LD_EXP 9
9318: PPUSH
9319: CALL_OW 119
// Say ( JMM , D3a-JMM-2 ) ;
9323: LD_EXP 9
9327: PPUSH
9328: LD_STRING D3a-JMM-2
9330: PPUSH
9331: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9335: LD_INT 1
9337: PPUSH
9338: LD_INT 4
9340: PPUSH
9341: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9345: LD_INT 85
9347: PPUSH
9348: LD_INT 134
9350: PPUSH
9351: CALL_OW 84
// Say ( Frank , D3a-Frank-3 ) ;
9355: LD_EXP 15
9359: PPUSH
9360: LD_STRING D3a-Frank-3
9362: PPUSH
9363: CALL_OW 88
// Wait ( 0 0$01 ) ;
9367: LD_INT 35
9369: PPUSH
9370: CALL_OW 67
// CenterOnXY ( 166 , 136 ) ;
9374: LD_INT 166
9376: PPUSH
9377: LD_INT 136
9379: PPUSH
9380: CALL_OW 84
// Say ( JMM , D3a-JMM-3 ) ;
9384: LD_EXP 9
9388: PPUSH
9389: LD_STRING D3a-JMM-3
9391: PPUSH
9392: CALL_OW 88
// Wait ( 0 0$01 ) ;
9396: LD_INT 35
9398: PPUSH
9399: CALL_OW 67
// CenterNowOnUnits ( Frank ) ;
9403: LD_EXP 15
9407: PPUSH
9408: CALL_OW 87
// Say ( Frank , D3a-Frank-4 ) ;
9412: LD_EXP 15
9416: PPUSH
9417: LD_STRING D3a-Frank-4
9419: PPUSH
9420: CALL_OW 88
// if Lisa then
9424: LD_EXP 14
9428: IFFALSE 9442
// Say ( Lisa , D3a-Lisa-4 ) ;
9430: LD_EXP 14
9434: PPUSH
9435: LD_STRING D3a-Lisa-4
9437: PPUSH
9438: CALL_OW 88
// Say ( JMM , D3a-JMM-4 ) ;
9442: LD_EXP 9
9446: PPUSH
9447: LD_STRING D3a-JMM-4
9449: PPUSH
9450: CALL_OW 88
// Say ( Frank , D3a-Frank-5 ) ;
9454: LD_EXP 15
9458: PPUSH
9459: LD_STRING D3a-Frank-5
9461: PPUSH
9462: CALL_OW 88
// Say ( JMM , D3a-JMM-5 ) ;
9466: LD_EXP 9
9470: PPUSH
9471: LD_STRING D3a-JMM-5
9473: PPUSH
9474: CALL_OW 88
// Say ( Frank , D3a-Frank-6 ) ;
9478: LD_EXP 15
9482: PPUSH
9483: LD_STRING D3a-Frank-6
9485: PPUSH
9486: CALL_OW 88
// Say ( JMM , D3a-JMM-6 ) ;
9490: LD_EXP 9
9494: PPUSH
9495: LD_STRING D3a-JMM-6
9497: PPUSH
9498: CALL_OW 88
// Say ( Frank , D3a-Frank-7 ) ;
9502: LD_EXP 15
9506: PPUSH
9507: LD_STRING D3a-Frank-7
9509: PPUSH
9510: CALL_OW 88
// InGameOff ;
9514: CALL_OW 9
// end ;
9518: PPOPN 2
9520: END
// every 0 0$1 trigger Kikuchi and not Frank and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Kikuchi , 7 ] ] ) and IsOk ( Kikuchi ) and not InBattle ( 1 ) and not InBattle ( 4 ) do
9521: LD_EXP 18
9525: PUSH
9526: LD_EXP 15
9530: NOT
9531: AND
9532: PUSH
9533: LD_INT 22
9535: PUSH
9536: LD_INT 1
9538: PUSH
9539: EMPTY
9540: LIST
9541: LIST
9542: PUSH
9543: LD_INT 91
9545: PUSH
9546: LD_EXP 18
9550: PUSH
9551: LD_INT 7
9553: PUSH
9554: EMPTY
9555: LIST
9556: LIST
9557: LIST
9558: PUSH
9559: EMPTY
9560: LIST
9561: LIST
9562: PPUSH
9563: CALL_OW 69
9567: AND
9568: PUSH
9569: LD_EXP 18
9573: PPUSH
9574: CALL_OW 302
9578: AND
9579: PUSH
9580: LD_INT 1
9582: PPUSH
9583: CALL_OW 463
9587: NOT
9588: AND
9589: PUSH
9590: LD_INT 4
9592: PPUSH
9593: CALL_OW 463
9597: NOT
9598: AND
9599: IFFALSE 9779
9601: GO 9603
9603: DISABLE
// begin InGameOn ;
9604: CALL_OW 8
// ComTurnUnit ( JMM , Kikuchi ) ;
9608: LD_EXP 9
9612: PPUSH
9613: LD_EXP 18
9617: PPUSH
9618: CALL_OW 119
// ComTurnUnit ( Kikuchi , JMM ) ;
9622: LD_EXP 18
9626: PPUSH
9627: LD_EXP 9
9631: PPUSH
9632: CALL_OW 119
// CenterOnUnits ( Kikuchi ) ;
9636: LD_EXP 18
9640: PPUSH
9641: CALL_OW 85
// Say ( Kikuchi , D3b-Yam-1 ) ;
9645: LD_EXP 18
9649: PPUSH
9650: LD_STRING D3b-Yam-1
9652: PPUSH
9653: CALL_OW 88
// Say ( JMM , D3b-JMM-1 ) ;
9657: LD_EXP 9
9661: PPUSH
9662: LD_STRING D3b-JMM-1
9664: PPUSH
9665: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9669: LD_INT 1
9671: PPUSH
9672: LD_INT 4
9674: PPUSH
9675: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9679: LD_INT 85
9681: PPUSH
9682: LD_INT 134
9684: PPUSH
9685: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-2 ) ;
9689: LD_EXP 18
9693: PPUSH
9694: LD_STRING D3b-Yam-2
9696: PPUSH
9697: CALL_OW 88
// Wait ( 0 0$01 ) ;
9701: LD_INT 35
9703: PPUSH
9704: CALL_OW 67
// Say ( JMM , D3b-JMM-2 ) ;
9708: LD_EXP 9
9712: PPUSH
9713: LD_STRING D3b-JMM-2
9715: PPUSH
9716: CALL_OW 88
// CenterOnXY ( 166 , 136 ) ;
9720: LD_INT 166
9722: PPUSH
9723: LD_INT 136
9725: PPUSH
9726: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-3 ) ;
9730: LD_EXP 18
9734: PPUSH
9735: LD_STRING D3b-Yam-3
9737: PPUSH
9738: CALL_OW 88
// CenterNowOnUnits ( JMM ) ;
9742: LD_EXP 9
9746: PPUSH
9747: CALL_OW 87
// Say ( JMM , D3b-JMM-3a ) ;
9751: LD_EXP 9
9755: PPUSH
9756: LD_STRING D3b-JMM-3a
9758: PPUSH
9759: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
9763: LD_EXP 18
9767: PPUSH
9768: LD_INT 1
9770: PPUSH
9771: CALL_OW 235
// InGameOff ;
9775: CALL_OW 9
// end ;
9779: END
// every 0 0$1 trigger FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var un , x , tw , i ;
9780: LD_INT 7
9782: PPUSH
9783: LD_INT 22
9785: PUSH
9786: LD_INT 1
9788: PUSH
9789: EMPTY
9790: LIST
9791: LIST
9792: PUSH
9793: LD_INT 3
9795: PUSH
9796: LD_INT 24
9798: PUSH
9799: LD_INT 1000
9801: PUSH
9802: EMPTY
9803: LIST
9804: LIST
9805: PUSH
9806: EMPTY
9807: LIST
9808: LIST
9809: PUSH
9810: EMPTY
9811: LIST
9812: LIST
9813: PPUSH
9814: CALL_OW 70
9818: IFFALSE 10274
9820: GO 9822
9822: DISABLE
9823: LD_INT 0
9825: PPUSH
9826: PPUSH
9827: PPUSH
9828: PPUSH
// begin repeat wait ( 0 0$1 ) ;
9829: LD_INT 35
9831: PPUSH
9832: CALL_OW 67
// un := FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
9836: LD_ADDR_VAR 0 1
9840: PUSH
9841: LD_INT 7
9843: PPUSH
9844: LD_INT 22
9846: PUSH
9847: LD_INT 1
9849: PUSH
9850: EMPTY
9851: LIST
9852: LIST
9853: PUSH
9854: LD_INT 3
9856: PUSH
9857: LD_INT 24
9859: PUSH
9860: LD_INT 1000
9862: PUSH
9863: EMPTY
9864: LIST
9865: LIST
9866: PUSH
9867: EMPTY
9868: LIST
9869: LIST
9870: PUSH
9871: EMPTY
9872: LIST
9873: LIST
9874: PPUSH
9875: CALL_OW 70
9879: ST_TO_ADDR
// if not un then
9880: LD_VAR 0 1
9884: NOT
9885: IFFALSE 9889
// continue ;
9887: GO 9829
// tw := NearbyTowerHasEnergy ( un [ 1 ] ) ;
9889: LD_ADDR_VAR 0 3
9893: PUSH
9894: LD_VAR 0 1
9898: PUSH
9899: LD_INT 1
9901: ARRAY
9902: PPUSH
9903: CALL 2053 0 1
9907: ST_TO_ADDR
// until tw ;
9908: LD_VAR 0 3
9912: IFFALSE 9829
// DialogueOn ;
9914: CALL_OW 6
// CenterNowOnUnits ( tw ) ;
9918: LD_VAR 0 3
9922: PPUSH
9923: CALL_OW 87
// if Lisa then
9927: LD_EXP 14
9931: IFFALSE 9959
// begin Say ( Lisa , D5-Lisa-1 ) ;
9933: LD_EXP 14
9937: PPUSH
9938: LD_STRING D5-Lisa-1
9940: PPUSH
9941: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
9945: LD_EXP 9
9949: PPUSH
9950: LD_STRING D5-JMM-1a
9952: PPUSH
9953: CALL_OW 88
// end else
9957: GO 9971
// Say ( JMM , D5-JMM-1 ) ;
9959: LD_EXP 9
9963: PPUSH
9964: LD_STRING D5-JMM-1
9966: PPUSH
9967: CALL_OW 88
// DialogueOff ;
9971: CALL_OW 7
// while ( true ) do
9975: LD_INT 1
9977: IFFALSE 10033
// begin wait ( 0 0$01 ) ;
9979: LD_INT 35
9981: PPUSH
9982: CALL_OW 67
// x := FilterUnitsExceptArea ( northElectro , [ [ f_btype , b_oil_power ] , [ f_see , 1 ] ] ) ;
9986: LD_ADDR_VAR 0 2
9990: PUSH
9991: LD_INT 8
9993: PPUSH
9994: LD_INT 30
9996: PUSH
9997: LD_INT 26
9999: PUSH
10000: EMPTY
10001: LIST
10002: LIST
10003: PUSH
10004: LD_INT 101
10006: PUSH
10007: LD_INT 1
10009: PUSH
10010: EMPTY
10011: LIST
10012: LIST
10013: PUSH
10014: EMPTY
10015: LIST
10016: LIST
10017: PPUSH
10018: CALL_OW 71
10022: ST_TO_ADDR
// if x then
10023: LD_VAR 0 2
10027: IFFALSE 10031
// break ;
10029: GO 10033
// end ;
10031: GO 9975
// CenterOnUnits ( x [ 1 ] ) ;
10033: LD_VAR 0 2
10037: PUSH
10038: LD_INT 1
10040: ARRAY
10041: PPUSH
10042: CALL_OW 85
// if Frank and GetSide ( Frank ) = 1 then
10046: LD_EXP 15
10050: PUSH
10051: LD_EXP 15
10055: PPUSH
10056: CALL_OW 255
10060: PUSH
10061: LD_INT 1
10063: EQUAL
10064: AND
10065: IFFALSE 10081
// Say ( Frank , D5a-Frank-1 ) else
10067: LD_EXP 15
10071: PPUSH
10072: LD_STRING D5a-Frank-1
10074: PPUSH
10075: CALL_OW 88
10079: GO 10135
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
10081: LD_EXP 18
10085: PUSH
10086: LD_EXP 18
10090: PPUSH
10091: CALL_OW 255
10095: PUSH
10096: LD_INT 1
10098: EQUAL
10099: AND
10100: IFFALSE 10116
// Say ( Kikuchi , D5a-Yam-1 ) else
10102: LD_EXP 18
10106: PPUSH
10107: LD_STRING D5a-Yam-1
10109: PPUSH
10110: CALL_OW 88
10114: GO 10135
// Say ( GetRandom ( sex_male ) [ 1 ] , D5a-Sol1-1 ) ;
10116: LD_INT 1
10118: PPUSH
10119: CALL 608 0 1
10123: PUSH
10124: LD_INT 1
10126: ARRAY
10127: PPUSH
10128: LD_STRING D5a-Sol1-1
10130: PPUSH
10131: CALL_OW 88
// Say ( JMM , D5a-JMM-1 ) ;
10135: LD_EXP 9
10139: PPUSH
10140: LD_STRING D5a-JMM-1
10142: PPUSH
10143: CALL_OW 88
// if Cyrus then
10147: LD_EXP 13
10151: IFFALSE 10165
// Say ( Cyrus , D5a-Cyrus-1 ) ;
10153: LD_EXP 13
10157: PPUSH
10158: LD_STRING D5a-Cyrus-1
10160: PPUSH
10161: CALL_OW 88
// x := false ;
10165: LD_ADDR_VAR 0 2
10169: PUSH
10170: LD_INT 0
10172: ST_TO_ADDR
// while ( true ) do
10173: LD_INT 1
10175: IFFALSE 10262
// begin wait ( 0 0$01 ) ;
10177: LD_INT 35
10179: PPUSH
10180: CALL_OW 67
// for i in FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) diff ru_dep_west do
10184: LD_ADDR_VAR 0 4
10188: PUSH
10189: LD_INT 2
10191: PUSH
10192: LD_INT 30
10194: PUSH
10195: LD_INT 0
10197: PUSH
10198: EMPTY
10199: LIST
10200: LIST
10201: PUSH
10202: LD_INT 30
10204: PUSH
10205: LD_INT 1
10207: PUSH
10208: EMPTY
10209: LIST
10210: LIST
10211: PUSH
10212: EMPTY
10213: LIST
10214: LIST
10215: LIST
10216: PPUSH
10217: CALL_OW 69
10221: PUSH
10222: LD_INT 1
10224: DIFF
10225: PUSH
10226: FOR_IN
10227: IFFALSE 10250
// if BaseNeedEnergy ( i ) then
10229: LD_VAR 0 4
10233: PPUSH
10234: CALL 1178 0 1
10238: IFFALSE 10248
// x := true ;
10240: LD_ADDR_VAR 0 2
10244: PUSH
10245: LD_INT 1
10247: ST_TO_ADDR
10248: GO 10226
10250: POP
10251: POP
// if x then
10252: LD_VAR 0 2
10256: IFFALSE 10260
// break ;
10258: GO 10262
// end ;
10260: GO 10173
// Say ( JMM , D5b-JMM-1 ) ;
10262: LD_EXP 9
10266: PPUSH
10267: LD_STRING D5b-JMM-1
10269: PPUSH
10270: CALL_OW 88
// end ;
10274: PPOPN 4
10276: END
// every 0 0$1 trigger time_to_end [ 1 ] < tick or FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) < 10 do
10277: LD_EXP 5
10281: PUSH
10282: LD_INT 1
10284: ARRAY
10285: PUSH
10286: LD_OWVAR 1
10290: LESS
10291: PUSH
10292: LD_INT 22
10294: PUSH
10295: LD_INT 3
10297: PUSH
10298: EMPTY
10299: LIST
10300: LIST
10301: PUSH
10302: LD_INT 21
10304: PUSH
10305: LD_INT 3
10307: PUSH
10308: EMPTY
10309: LIST
10310: LIST
10311: PUSH
10312: EMPTY
10313: LIST
10314: LIST
10315: PPUSH
10316: CALL_OW 69
10320: PUSH
10321: LD_INT 10
10323: LESS
10324: OR
10325: IFFALSE 10525
10327: GO 10329
10329: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10330: LD_INT 16
10332: PPUSH
10333: CALL_OW 301
10337: NOT
10338: IFFALSE 10361
// begin SayRadio ( Harisson , D3b-Har-3 ) ;
10340: LD_EXP 19
10344: PPUSH
10345: LD_STRING D3b-Har-3
10347: PPUSH
10348: CALL_OW 94
// ChangeMissionObjectives ( M2a ) ;
10352: LD_STRING M2a
10354: PPUSH
10355: CALL_OW 337
// end else
10359: GO 10380
// begin SayRadio ( Harisson , D3b-Har-3a ) ;
10361: LD_EXP 19
10365: PPUSH
10366: LD_STRING D3b-Har-3a
10368: PPUSH
10369: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
10373: LD_STRING M2
10375: PPUSH
10376: CALL_OW 337
// end ; can_end := true ;
10380: LD_ADDR_EXP 6
10384: PUSH
10385: LD_INT 1
10387: ST_TO_ADDR
// SetAreaMapShow ( endArea , 1 ) ;
10388: LD_INT 9
10390: PPUSH
10391: LD_INT 1
10393: PPUSH
10394: CALL_OW 424
// Wait ( 0 0$02 ) ;
10398: LD_INT 70
10400: PPUSH
10401: CALL_OW 67
// if Lisa then
10405: LD_EXP 14
10409: IFFALSE 10423
// Say ( Lisa , D3b-Lisa ) ;
10411: LD_EXP 14
10415: PPUSH
10416: LD_STRING D3b-Lisa
10418: PPUSH
10419: CALL_OW 88
// if Bobby then
10423: LD_EXP 12
10427: IFFALSE 10441
// Say ( Bobby , D3b-Bobby-3 ) ;
10429: LD_EXP 12
10433: PPUSH
10434: LD_STRING D3b-Bobby-3
10436: PPUSH
10437: CALL_OW 88
// if Cyrus then
10441: LD_EXP 13
10445: IFFALSE 10459
// Say ( Cyrus , D3b-Cyrus-3 ) ;
10447: LD_EXP 13
10451: PPUSH
10452: LD_STRING D3b-Cyrus-3
10454: PPUSH
10455: CALL_OW 88
// if Frank and GetSide ( Frank ) = 1 then
10459: LD_EXP 15
10463: PUSH
10464: LD_EXP 15
10468: PPUSH
10469: CALL_OW 255
10473: PUSH
10474: LD_INT 1
10476: EQUAL
10477: AND
10478: IFFALSE 10492
// Say ( Frank , D3b-Frank-3 ) ;
10480: LD_EXP 15
10484: PPUSH
10485: LD_STRING D3b-Frank-3
10487: PPUSH
10488: CALL_OW 88
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
10492: LD_EXP 18
10496: PUSH
10497: LD_EXP 18
10501: PPUSH
10502: CALL_OW 255
10506: PUSH
10507: LD_INT 1
10509: EQUAL
10510: AND
10511: IFFALSE 10525
// Say ( Kikuchi , D3b-Yam-4 ) ;
10513: LD_EXP 18
10517: PPUSH
10518: LD_STRING D3b-Yam-4
10520: PPUSH
10521: CALL_OW 88
// end ;
10525: END
// every 0 0$1 trigger time_to_end [ 2 ] < tick do
10526: LD_EXP 5
10530: PUSH
10531: LD_INT 2
10533: ARRAY
10534: PUSH
10535: LD_OWVAR 1
10539: LESS
10540: IFFALSE 10572
10542: GO 10544
10544: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
10545: LD_EXP 19
10549: PPUSH
10550: LD_STRING D4-Har-1
10552: PPUSH
10553: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
10557: LD_STRING M3
10559: PPUSH
10560: CALL_OW 337
// must_end := true ;
10564: LD_ADDR_EXP 7
10568: PUSH
10569: LD_INT 1
10571: ST_TO_ADDR
// end ;
10572: END
// every 0 0$01 trigger time_to_end [ 3 ] < tick do
10573: LD_EXP 5
10577: PUSH
10578: LD_INT 3
10580: ARRAY
10581: PUSH
10582: LD_OWVAR 1
10586: LESS
10587: IFFALSE 10618
10589: GO 10591
10591: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10592: LD_INT 16
10594: PPUSH
10595: CALL_OW 301
10599: NOT
10600: IFFALSE 10611
// YouLost ( TimeOut1 ) else
10602: LD_STRING TimeOut1
10604: PPUSH
10605: CALL_OW 104
10609: GO 10618
// YouLost ( TimeOut2 ) ;
10611: LD_STRING TimeOut2
10613: PPUSH
10614: CALL_OW 104
// end ;
10618: END
// every 0 0$1 trigger IsInArea ( JMM , endArea ) and can_end do var wait_on , i , tmp , m1 , m2 , m3 ;
10619: LD_EXP 9
10623: PPUSH
10624: LD_INT 9
10626: PPUSH
10627: CALL_OW 308
10631: PUSH
10632: LD_EXP 6
10636: AND
10637: IFFALSE 11798
10639: GO 10641
10641: DISABLE
10642: LD_INT 0
10644: PPUSH
10645: PPUSH
10646: PPUSH
10647: PPUSH
10648: PPUSH
10649: PPUSH
// begin if Count ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ) < 5 then
10650: LD_INT 22
10652: PUSH
10653: LD_INT 1
10655: PUSH
10656: EMPTY
10657: LIST
10658: LIST
10659: PUSH
10660: LD_INT 21
10662: PUSH
10663: LD_INT 1
10665: PUSH
10666: EMPTY
10667: LIST
10668: LIST
10669: PUSH
10670: LD_INT 23
10672: PUSH
10673: LD_INT 1
10675: PUSH
10676: EMPTY
10677: LIST
10678: LIST
10679: PUSH
10680: LD_INT 50
10682: PUSH
10683: EMPTY
10684: LIST
10685: PUSH
10686: EMPTY
10687: LIST
10688: LIST
10689: LIST
10690: LIST
10691: PPUSH
10692: CALL_OW 69
10696: PPUSH
10697: CALL 35805 0 1
10701: PUSH
10702: LD_INT 5
10704: LESS
10705: IFFALSE 10716
// begin YouLost ( LostVictory ) ;
10707: LD_STRING LostVictory
10709: PPUSH
10710: CALL_OW 104
// exit ;
10714: GO 11798
// end ; wait_on := false ;
10716: LD_ADDR_VAR 0 1
10720: PUSH
10721: LD_INT 0
10723: ST_TO_ADDR
// if Count ( FilterPeople ( 1 ) ) > Count ( FilterPeopleArea ( 1 , endArea ) ^ FilterDriversArea ( 1 , endArea ) ) then
10724: LD_INT 1
10726: PPUSH
10727: CALL 1255 0 1
10731: PPUSH
10732: CALL 35805 0 1
10736: PUSH
10737: LD_INT 1
10739: PPUSH
10740: LD_INT 9
10742: PPUSH
10743: CALL 1346 0 2
10747: PUSH
10748: LD_INT 1
10750: PPUSH
10751: LD_INT 9
10753: PPUSH
10754: CALL 1393 0 2
10758: ADD
10759: PPUSH
10760: CALL 35805 0 1
10764: GREATER
10765: IFFALSE 10788
// if Query ( Q1 ) = 1 then
10767: LD_STRING Q1
10769: PPUSH
10770: CALL_OW 97
10774: PUSH
10775: LD_INT 1
10777: EQUAL
10778: IFFALSE 10788
// wait_on := true ;
10780: LD_ADDR_VAR 0 1
10784: PUSH
10785: LD_INT 1
10787: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
10788: LD_INT 35
10790: PPUSH
10791: CALL_OW 67
// until Count ( FilterPeople ( 1 ) ) = Count ( FilterPeopleArea ( 1 , endArea ) union FilterDriversArea ( 1 , endArea ) ) ;
10795: LD_INT 1
10797: PPUSH
10798: CALL 1255 0 1
10802: PPUSH
10803: CALL 35805 0 1
10807: PUSH
10808: LD_INT 1
10810: PPUSH
10811: LD_INT 9
10813: PPUSH
10814: CALL 1346 0 2
10818: PUSH
10819: LD_INT 1
10821: PPUSH
10822: LD_INT 9
10824: PPUSH
10825: CALL 1393 0 2
10829: UNION
10830: PPUSH
10831: CALL 35805 0 1
10835: EQUAL
10836: IFFALSE 10788
// DialogueOn ;
10838: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
10842: LD_EXP 9
10846: PPUSH
10847: CALL_OW 87
// Say ( JMM , D6-JMM-1 ) ;
10851: LD_EXP 9
10855: PPUSH
10856: LD_STRING D6-JMM-1
10858: PPUSH
10859: CALL_OW 88
// SayRadio ( Harisson , D6-Har-1 ) ;
10863: LD_EXP 19
10867: PPUSH
10868: LD_STRING D6-Har-1
10870: PPUSH
10871: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
10875: LD_EXP 9
10879: PPUSH
10880: LD_STRING D6-JMM-2
10882: PPUSH
10883: CALL_OW 88
// SayRadio ( Harisson , D6-Har-2 ) ;
10887: LD_EXP 19
10891: PPUSH
10892: LD_STRING D6-Har-2
10894: PPUSH
10895: CALL_OW 94
// Say ( JMM , D6-JMM-3 ) ;
10899: LD_EXP 9
10903: PPUSH
10904: LD_STRING D6-JMM-3
10906: PPUSH
10907: CALL_OW 88
// SayRadio ( Harisson , D6-Har-3 ) ;
10911: LD_EXP 19
10915: PPUSH
10916: LD_STRING D6-Har-3
10918: PPUSH
10919: CALL_OW 94
// Say ( JMM , D6-JMM-4 ) ;
10923: LD_EXP 9
10927: PPUSH
10928: LD_STRING D6-JMM-4
10930: PPUSH
10931: CALL_OW 88
// SayRadio ( Harisson , D6-Har-4 ) ;
10935: LD_EXP 19
10939: PPUSH
10940: LD_STRING D6-Har-4
10942: PPUSH
10943: CALL_OW 94
// Say ( JMM , D6-JMM-5 ) ;
10947: LD_EXP 9
10951: PPUSH
10952: LD_STRING D6-JMM-5
10954: PPUSH
10955: CALL_OW 88
// DialogueOff ;
10959: CALL_OW 7
// m1 := false ;
10963: LD_ADDR_VAR 0 4
10967: PUSH
10968: LD_INT 0
10970: ST_TO_ADDR
// m2 := false ;
10971: LD_ADDR_VAR 0 5
10975: PUSH
10976: LD_INT 0
10978: ST_TO_ADDR
// m3 := false ;
10979: LD_ADDR_VAR 0 6
10983: PUSH
10984: LD_INT 0
10986: ST_TO_ADDR
// tmp := FilterBuildings ( 3 ) ;
10987: LD_ADDR_VAR 0 3
10991: PUSH
10992: LD_INT 3
10994: PPUSH
10995: CALL 1524 0 1
10999: ST_TO_ADDR
// if tmp >= 35 then
11000: LD_VAR 0 3
11004: PUSH
11005: LD_INT 35
11007: GREATEREQUAL
11008: IFFALSE 11045
// begin AddMedal ( Destroy1 , - 1 ) ;
11010: LD_STRING Destroy1
11012: PPUSH
11013: LD_INT 1
11015: NEG
11016: PPUSH
11017: CALL_OW 101
// AddMedal ( Destroy2 , - 1 ) ;
11021: LD_STRING Destroy2
11023: PPUSH
11024: LD_INT 1
11026: NEG
11027: PPUSH
11028: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
11032: LD_STRING Destroy3
11034: PPUSH
11035: LD_INT 1
11037: NEG
11038: PPUSH
11039: CALL_OW 101
// end else
11043: GO 11156
// begin AddMedal ( Destroy1 , 1 ) ;
11045: LD_STRING Destroy1
11047: PPUSH
11048: LD_INT 1
11050: PPUSH
11051: CALL_OW 101
// m1 := true ;
11055: LD_ADDR_VAR 0 4
11059: PUSH
11060: LD_INT 1
11062: ST_TO_ADDR
// if tmp >= 25 then
11063: LD_VAR 0 3
11067: PUSH
11068: LD_INT 25
11070: GREATEREQUAL
11071: IFFALSE 11097
// begin AddMedal ( Destroy2 , - 1 ) ;
11073: LD_STRING Destroy2
11075: PPUSH
11076: LD_INT 1
11078: NEG
11079: PPUSH
11080: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
11084: LD_STRING Destroy3
11086: PPUSH
11087: LD_INT 1
11089: NEG
11090: PPUSH
11091: CALL_OW 101
// end else
11095: GO 11156
// begin AddMedal ( Destroy2 , 1 ) ;
11097: LD_STRING Destroy2
11099: PPUSH
11100: LD_INT 1
11102: PPUSH
11103: CALL_OW 101
// m2 := true ;
11107: LD_ADDR_VAR 0 5
11111: PUSH
11112: LD_INT 1
11114: ST_TO_ADDR
// if tmp >= 15 then
11115: LD_VAR 0 3
11119: PUSH
11120: LD_INT 15
11122: GREATEREQUAL
11123: IFFALSE 11138
// AddMedal ( Destroy3 , - 1 ) else
11125: LD_STRING Destroy3
11127: PPUSH
11128: LD_INT 1
11130: NEG
11131: PPUSH
11132: CALL_OW 101
11136: GO 11156
// begin AddMedal ( Destroy3 , 1 ) ;
11138: LD_STRING Destroy3
11140: PPUSH
11141: LD_INT 1
11143: PPUSH
11144: CALL_OW 101
// m3 := true ;
11148: LD_ADDR_VAR 0 6
11152: PUSH
11153: LD_INT 1
11155: ST_TO_ADDR
// end ; end ; end ; if tick <= 32 32$00 then
11156: LD_OWVAR 1
11160: PUSH
11161: LD_INT 67200
11163: LESSEQUAL
11164: IFFALSE 11173
// SetAchievement ( ACH_ASPEED_7 ) ;
11166: LD_STRING ACH_ASPEED_7
11168: PPUSH
11169: CALL_OW 543
// if m1 and m2 and m3 and Difficulty >= 3 then
11173: LD_VAR 0 4
11177: PUSH
11178: LD_VAR 0 5
11182: AND
11183: PUSH
11184: LD_VAR 0 6
11188: AND
11189: PUSH
11190: LD_OWVAR 67
11194: PUSH
11195: LD_INT 3
11197: GREATEREQUAL
11198: AND
11199: IFFALSE 11211
// SetAchievementEX ( ACH_AMER , 7 ) ;
11201: LD_STRING ACH_AMER
11203: PPUSH
11204: LD_INT 7
11206: PPUSH
11207: CALL_OW 564
// GiveMedals ( MAIN ) ;
11211: LD_STRING MAIN
11213: PPUSH
11214: CALL_OW 102
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] ] ) ;
11218: LD_ADDR_VAR 0 3
11222: PUSH
11223: LD_INT 22
11225: PUSH
11226: LD_INT 1
11228: PUSH
11229: EMPTY
11230: LIST
11231: LIST
11232: PUSH
11233: LD_INT 23
11235: PUSH
11236: LD_INT 1
11238: PUSH
11239: EMPTY
11240: LIST
11241: LIST
11242: PUSH
11243: EMPTY
11244: LIST
11245: LIST
11246: PPUSH
11247: CALL_OW 69
11251: ST_TO_ADDR
// RewardPeople ( tmp ) ;
11252: LD_VAR 0 3
11256: PPUSH
11257: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
11261: LD_EXP 9
11265: PPUSH
11266: LD_EXP 3
11270: PUSH
11271: LD_STRING JMM
11273: STR
11274: PPUSH
11275: CALL_OW 38
// if Brown in tmp then
11279: LD_EXP 10
11283: PUSH
11284: LD_VAR 0 3
11288: IN
11289: IFFALSE 11309
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
11291: LD_EXP 10
11295: PPUSH
11296: LD_EXP 3
11300: PUSH
11301: LD_STRING Brown
11303: STR
11304: PPUSH
11305: CALL_OW 38
// if Donaldson in tmp then
11309: LD_EXP 11
11313: PUSH
11314: LD_VAR 0 3
11318: IN
11319: IFFALSE 11339
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
11321: LD_EXP 11
11325: PPUSH
11326: LD_EXP 3
11330: PUSH
11331: LD_STRING Donaldson
11333: STR
11334: PPUSH
11335: CALL_OW 38
// if Bobby in tmp then
11339: LD_EXP 12
11343: PUSH
11344: LD_VAR 0 3
11348: IN
11349: IFFALSE 11369
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
11351: LD_EXP 12
11355: PPUSH
11356: LD_EXP 3
11360: PUSH
11361: LD_STRING Bobby
11363: STR
11364: PPUSH
11365: CALL_OW 38
// if Cyrus in tmp then
11369: LD_EXP 13
11373: PUSH
11374: LD_VAR 0 3
11378: IN
11379: IFFALSE 11399
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
11381: LD_EXP 13
11385: PPUSH
11386: LD_EXP 3
11390: PUSH
11391: LD_STRING Cyrus
11393: STR
11394: PPUSH
11395: CALL_OW 38
// if Lisa in tmp then
11399: LD_EXP 14
11403: PUSH
11404: LD_VAR 0 3
11408: IN
11409: IFFALSE 11429
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
11411: LD_EXP 14
11415: PPUSH
11416: LD_EXP 3
11420: PUSH
11421: LD_STRING Lisa
11423: STR
11424: PPUSH
11425: CALL_OW 38
// if Frank in tmp then
11429: LD_EXP 15
11433: PUSH
11434: LD_VAR 0 3
11438: IN
11439: IFFALSE 11459
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
11441: LD_EXP 15
11445: PPUSH
11446: LD_EXP 3
11450: PUSH
11451: LD_STRING Frank
11453: STR
11454: PPUSH
11455: CALL_OW 38
// if Gladstone in tmp then
11459: LD_EXP 16
11463: PUSH
11464: LD_VAR 0 3
11468: IN
11469: IFFALSE 11489
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
11471: LD_EXP 16
11475: PPUSH
11476: LD_EXP 3
11480: PUSH
11481: LD_STRING Gladstone
11483: STR
11484: PPUSH
11485: CALL_OW 38
// if Khatam in tmp then
11489: LD_EXP 17
11493: PUSH
11494: LD_VAR 0 3
11498: IN
11499: IFFALSE 11519
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
11501: LD_EXP 17
11505: PPUSH
11506: LD_EXP 3
11510: PUSH
11511: LD_STRING Khatam
11513: STR
11514: PPUSH
11515: CALL_OW 38
// if Kikuchi in tmp then
11519: LD_EXP 18
11523: PUSH
11524: LD_VAR 0 3
11528: IN
11529: IFFALSE 11556
// begin ToLua ( enableBioCharacter(BIO_YAMO) ) ;
11531: LD_STRING enableBioCharacter(BIO_YAMO)
11533: PPUSH
11534: CALL_OW 559
// SaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
11538: LD_EXP 18
11542: PPUSH
11543: LD_EXP 3
11547: PUSH
11548: LD_STRING Kikuchi
11550: STR
11551: PPUSH
11552: CALL_OW 38
// end ; SaveCharacters ( tmp diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] , mission_prefix & others ) ;
11556: LD_VAR 0 3
11560: PUSH
11561: LD_EXP 9
11565: PUSH
11566: LD_EXP 10
11570: PUSH
11571: LD_EXP 11
11575: PUSH
11576: LD_EXP 12
11580: PUSH
11581: LD_EXP 13
11585: PUSH
11586: LD_EXP 14
11590: PUSH
11591: LD_EXP 15
11595: PUSH
11596: LD_EXP 16
11600: PUSH
11601: LD_EXP 18
11605: PUSH
11606: LD_EXP 17
11610: PUSH
11611: EMPTY
11612: LIST
11613: LIST
11614: LIST
11615: LIST
11616: LIST
11617: LIST
11618: LIST
11619: LIST
11620: LIST
11621: LIST
11622: DIFF
11623: PPUSH
11624: LD_EXP 3
11628: PUSH
11629: LD_STRING others
11631: STR
11632: PPUSH
11633: CALL_OW 38
// SaveVariable ( tick , 07_time ) ;
11637: LD_OWVAR 1
11641: PPUSH
11642: LD_STRING 07_time
11644: PPUSH
11645: CALL_OW 39
// tmp := [ ] ;
11649: LD_ADDR_VAR 0 3
11653: PUSH
11654: EMPTY
11655: ST_TO_ADDR
// for i in FilterUnitsInArea ( endArea , [ [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] , [ f_ok ] ] ] ) do
11656: LD_ADDR_VAR 0 2
11660: PUSH
11661: LD_INT 9
11663: PPUSH
11664: LD_INT 22
11666: PUSH
11667: LD_INT 1
11669: PUSH
11670: EMPTY
11671: LIST
11672: LIST
11673: PUSH
11674: LD_INT 23
11676: PUSH
11677: LD_INT 1
11679: PUSH
11680: EMPTY
11681: LIST
11682: LIST
11683: PUSH
11684: LD_INT 21
11686: PUSH
11687: LD_INT 2
11689: PUSH
11690: EMPTY
11691: LIST
11692: LIST
11693: PUSH
11694: LD_INT 50
11696: PUSH
11697: EMPTY
11698: LIST
11699: PUSH
11700: EMPTY
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: PUSH
11706: EMPTY
11707: LIST
11708: PPUSH
11709: CALL_OW 70
11713: PUSH
11714: FOR_IN
11715: IFFALSE 11780
// tmp := Join ( tmp , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ) ;
11717: LD_ADDR_VAR 0 3
11721: PUSH
11722: LD_VAR 0 3
11726: PPUSH
11727: LD_VAR 0 2
11731: PPUSH
11732: CALL_OW 265
11736: PUSH
11737: LD_VAR 0 2
11741: PPUSH
11742: CALL_OW 262
11746: PUSH
11747: LD_VAR 0 2
11751: PPUSH
11752: CALL_OW 263
11756: PUSH
11757: LD_VAR 0 2
11761: PPUSH
11762: CALL_OW 264
11766: PUSH
11767: EMPTY
11768: LIST
11769: LIST
11770: LIST
11771: LIST
11772: PPUSH
11773: CALL 71414 0 2
11777: ST_TO_ADDR
11778: GO 11714
11780: POP
11781: POP
// SaveVariable ( tmp , 07_vehicles ) ;
11782: LD_VAR 0 3
11786: PPUSH
11787: LD_STRING 07_vehicles
11789: PPUSH
11790: CALL_OW 39
// YouWin ;
11794: CALL_OW 103
// end ; end_of_file
11798: PPOPN 6
11800: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
11801: LD_VAR 0 1
11805: PPUSH
11806: CALL 28255 0 1
// if un = JMM then
11810: LD_VAR 0 1
11814: PUSH
11815: LD_EXP 9
11819: EQUAL
11820: IFFALSE 11829
// YouLost ( JMM ) ;
11822: LD_STRING JMM
11824: PPUSH
11825: CALL_OW 104
// if GetType ( un ) = unit_building then
11829: LD_VAR 0 1
11833: PPUSH
11834: CALL_OW 247
11838: PUSH
11839: LD_INT 3
11841: EQUAL
11842: IFFALSE 11858
// buildings_counter := buildings_counter + 1 ;
11844: LD_ADDR_EXP 4
11848: PUSH
11849: LD_EXP 4
11853: PUSH
11854: LD_INT 1
11856: PLUS
11857: ST_TO_ADDR
// if un in FilterUnitsInArea ( baseArea , [ f_or , [ f_btype , b_turret ] , [ f_btype , b_bunker ] ] ) then
11858: LD_VAR 0 1
11862: PUSH
11863: LD_INT 6
11865: PPUSH
11866: LD_INT 2
11868: PUSH
11869: LD_INT 30
11871: PUSH
11872: LD_INT 33
11874: PUSH
11875: EMPTY
11876: LIST
11877: LIST
11878: PUSH
11879: LD_INT 30
11881: PUSH
11882: LD_INT 32
11884: PUSH
11885: EMPTY
11886: LIST
11887: LIST
11888: PUSH
11889: EMPTY
11890: LIST
11891: LIST
11892: LIST
11893: PPUSH
11894: CALL_OW 70
11898: IN
11899: IFFALSE 11958
// ru_rebuild_list := ru_rebuild_list ^ [ GetBType ( un ) , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ;
11901: LD_ADDR_EXP 20
11905: PUSH
11906: LD_EXP 20
11910: PUSH
11911: LD_VAR 0 1
11915: PPUSH
11916: CALL_OW 266
11920: PUSH
11921: LD_VAR 0 1
11925: PPUSH
11926: CALL_OW 250
11930: PUSH
11931: LD_VAR 0 1
11935: PPUSH
11936: CALL_OW 251
11940: PUSH
11941: LD_VAR 0 1
11945: PPUSH
11946: CALL_OW 254
11950: PUSH
11951: EMPTY
11952: LIST
11953: LIST
11954: LIST
11955: LIST
11956: ADD
11957: ST_TO_ADDR
// if un = ru_dep_main then
11958: LD_VAR 0 1
11962: PUSH
11963: LD_INT 16
11965: EQUAL
11966: IFFALSE 11975
// ChangeMissionObjectives ( M1a ) ;
11968: LD_STRING M1a
11970: PPUSH
11971: CALL_OW 337
// if GetType ( un ) = unit_human and GetSide ( un ) = 3 then
11975: LD_VAR 0 1
11979: PPUSH
11980: CALL_OW 247
11984: PUSH
11985: LD_INT 1
11987: EQUAL
11988: PUSH
11989: LD_VAR 0 1
11993: PPUSH
11994: CALL_OW 255
11998: PUSH
11999: LD_INT 3
12001: EQUAL
12002: AND
12003: IFFALSE 12019
// kill_counter := kill_counter + 1 ;
12005: LD_ADDR_EXP 8
12009: PUSH
12010: LD_EXP 8
12014: PUSH
12015: LD_INT 1
12017: PLUS
12018: ST_TO_ADDR
// end ;
12019: PPOPN 1
12021: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
12022: LD_VAR 0 1
12026: PPUSH
12027: LD_VAR 0 2
12031: PPUSH
12032: CALL 28313 0 2
// end ;
12036: PPOPN 2
12038: END
// on UnitGoesToRed ( un ) do begin if GetBType ( un ) = b_bunker and GetTag ( un ) = 7 then
12039: LD_VAR 0 1
12043: PPUSH
12044: CALL_OW 266
12048: PUSH
12049: LD_INT 32
12051: EQUAL
12052: PUSH
12053: LD_VAR 0 1
12057: PPUSH
12058: CALL_OW 110
12062: PUSH
12063: LD_INT 7
12065: EQUAL
12066: AND
12067: IFFALSE 12081
// SetTag ( un , 0 ) ;
12069: LD_VAR 0 1
12073: PPUSH
12074: LD_INT 0
12076: PPUSH
12077: CALL_OW 109
// end ;
12081: PPOPN 1
12083: END
// on BuildingStarted ( b , builder ) do var i ;
12084: LD_INT 0
12086: PPUSH
// begin if GetSide ( b ) = 3 then
12087: LD_VAR 0 1
12091: PPUSH
12092: CALL_OW 255
12096: PUSH
12097: LD_INT 3
12099: EQUAL
12100: IFFALSE 12140
// for i = 1 to 4 do
12102: LD_ADDR_VAR 0 3
12106: PUSH
12107: DOUBLE
12108: LD_INT 1
12110: DEC
12111: ST_TO_ADDR
12112: LD_INT 4
12114: PUSH
12115: FOR_TO
12116: IFFALSE 12138
// ru_rebuild_list := Delete ( ru_rebuild_list , 1 ) ;
12118: LD_ADDR_EXP 20
12122: PUSH
12123: LD_EXP 20
12127: PPUSH
12128: LD_INT 1
12130: PPUSH
12131: CALL_OW 3
12135: ST_TO_ADDR
12136: GO 12115
12138: POP
12139: POP
// end ;
12140: PPOPN 3
12142: END
// on BuildingComplete ( b ) do if GetBType ( b ) in [ b_bunker , b_turret ] then
12143: LD_VAR 0 1
12147: PPUSH
12148: CALL_OW 266
12152: PUSH
12153: LD_INT 32
12155: PUSH
12156: LD_INT 33
12158: PUSH
12159: EMPTY
12160: LIST
12161: LIST
12162: IN
12163: IFFALSE 12177
// ComPlaceWeapon ( b , ru_gatling_gun ) ;
12165: LD_VAR 0 1
12169: PPUSH
12170: LD_INT 43
12172: PPUSH
12173: CALL_OW 148
12177: PPOPN 1
12179: END
// on LeaveBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
12180: LD_VAR 0 1
12184: PUSH
12185: LD_INT 22
12187: PUSH
12188: LD_INT 3
12190: PUSH
12191: EMPTY
12192: LIST
12193: LIST
12194: PUSH
12195: LD_INT 2
12197: PUSH
12198: LD_INT 30
12200: PUSH
12201: LD_INT 31
12203: PUSH
12204: EMPTY
12205: LIST
12206: LIST
12207: PUSH
12208: LD_INT 30
12210: PUSH
12211: LD_INT 32
12213: PUSH
12214: EMPTY
12215: LIST
12216: LIST
12217: PUSH
12218: EMPTY
12219: LIST
12220: LIST
12221: LIST
12222: PUSH
12223: EMPTY
12224: LIST
12225: LIST
12226: PPUSH
12227: CALL_OW 69
12231: IN
12232: IFFALSE 12254
// GoToAnotherTower ( un , b , 134 , 136 ) ;
12234: LD_VAR 0 2
12238: PPUSH
12239: LD_VAR 0 1
12243: PPUSH
12244: LD_INT 134
12246: PPUSH
12247: LD_INT 136
12249: PPUSH
12250: CALL 838 0 4
// end ;
12254: PPOPN 2
12256: END
// on EnterBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) then
12257: LD_VAR 0 1
12261: PUSH
12262: LD_INT 22
12264: PUSH
12265: LD_INT 3
12267: PUSH
12268: EMPTY
12269: LIST
12270: LIST
12271: PUSH
12272: LD_INT 30
12274: PUSH
12275: LD_INT 32
12277: PUSH
12278: EMPTY
12279: LIST
12280: LIST
12281: PUSH
12282: EMPTY
12283: LIST
12284: LIST
12285: PPUSH
12286: CALL_OW 69
12290: IN
12291: IFFALSE 12305
// SetTag ( b , 0 ) ;
12293: LD_VAR 0 1
12297: PPUSH
12298: LD_INT 0
12300: PPUSH
12301: CALL_OW 109
// end ; end_of_file end_of_file
12305: PPOPN 2
12307: END
// export globalGameSaveCounter ; every 0 0$1 do
12308: GO 12310
12310: DISABLE
// begin enable ;
12311: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
12312: LD_STRING updateTimer(
12314: PUSH
12315: LD_OWVAR 1
12319: STR
12320: PUSH
12321: LD_STRING );
12323: STR
12324: PPUSH
12325: CALL_OW 559
// end ;
12329: END
// every 0 0$1 do
12330: GO 12332
12332: DISABLE
// begin globalGameSaveCounter := 0 ;
12333: LD_ADDR_EXP 21
12337: PUSH
12338: LD_INT 0
12340: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
12341: LD_STRING setGameSaveCounter(0)
12343: PPUSH
12344: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
12348: LD_STRING initStreamRollete();
12350: PPUSH
12351: CALL_OW 559
// InitStreamMode ;
12355: CALL 13698 0 0
// DefineStreamItems ( false ) ;
12359: LD_INT 0
12361: PPUSH
12362: CALL 14162 0 1
// end ;
12366: END
// export function SOS_MapStart ( ) ; begin
12367: LD_INT 0
12369: PPUSH
// if streamModeActive then
12370: LD_EXP 22
12374: IFFALSE 12383
// DefineStreamItems ( true ) ;
12376: LD_INT 1
12378: PPUSH
12379: CALL 14162 0 1
// UpdateLuaVariables ( ) ;
12383: CALL 12400 0 0
// UpdateFactoryWaypoints ( ) ;
12387: CALL 27164 0 0
// UpdateWarehouseGatheringPoints ( ) ;
12391: CALL 27416 0 0
// end ;
12395: LD_VAR 0 1
12399: RET
// function UpdateLuaVariables ( ) ; begin
12400: LD_INT 0
12402: PPUSH
// if globalGameSaveCounter then
12403: LD_EXP 21
12407: IFFALSE 12441
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
12409: LD_ADDR_EXP 21
12413: PUSH
12414: LD_EXP 21
12418: PPUSH
12419: CALL 72775 0 1
12423: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
12424: LD_STRING setGameSaveCounter(
12426: PUSH
12427: LD_EXP 21
12431: STR
12432: PUSH
12433: LD_STRING )
12435: STR
12436: PPUSH
12437: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
12441: LD_STRING setGameDifficulty(
12443: PUSH
12444: LD_OWVAR 67
12448: STR
12449: PUSH
12450: LD_STRING )
12452: STR
12453: PPUSH
12454: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
12458: LD_STRING displayDifficulty(
12460: PUSH
12461: LD_OWVAR 67
12465: STR
12466: PUSH
12467: LD_STRING )
12469: STR
12470: PPUSH
12471: CALL_OW 559
// end ;
12475: LD_VAR 0 1
12479: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
12480: LD_INT 0
12482: PPUSH
// if p2 = stream_mode then
12483: LD_VAR 0 2
12487: PUSH
12488: LD_INT 100
12490: EQUAL
12491: IFFALSE 13494
// begin if not StreamModeActive then
12493: LD_EXP 22
12497: NOT
12498: IFFALSE 12508
// StreamModeActive := true ;
12500: LD_ADDR_EXP 22
12504: PUSH
12505: LD_INT 1
12507: ST_TO_ADDR
// if p3 = 0 then
12508: LD_VAR 0 3
12512: PUSH
12513: LD_INT 0
12515: EQUAL
12516: IFFALSE 12522
// InitStreamMode ;
12518: CALL 13698 0 0
// if p3 = 1 then
12522: LD_VAR 0 3
12526: PUSH
12527: LD_INT 1
12529: EQUAL
12530: IFFALSE 12540
// sRocket := true ;
12532: LD_ADDR_EXP 27
12536: PUSH
12537: LD_INT 1
12539: ST_TO_ADDR
// if p3 = 2 then
12540: LD_VAR 0 3
12544: PUSH
12545: LD_INT 2
12547: EQUAL
12548: IFFALSE 12558
// sSpeed := true ;
12550: LD_ADDR_EXP 26
12554: PUSH
12555: LD_INT 1
12557: ST_TO_ADDR
// if p3 = 3 then
12558: LD_VAR 0 3
12562: PUSH
12563: LD_INT 3
12565: EQUAL
12566: IFFALSE 12576
// sEngine := true ;
12568: LD_ADDR_EXP 28
12572: PUSH
12573: LD_INT 1
12575: ST_TO_ADDR
// if p3 = 4 then
12576: LD_VAR 0 3
12580: PUSH
12581: LD_INT 4
12583: EQUAL
12584: IFFALSE 12594
// sSpec := true ;
12586: LD_ADDR_EXP 25
12590: PUSH
12591: LD_INT 1
12593: ST_TO_ADDR
// if p3 = 5 then
12594: LD_VAR 0 3
12598: PUSH
12599: LD_INT 5
12601: EQUAL
12602: IFFALSE 12612
// sLevel := true ;
12604: LD_ADDR_EXP 29
12608: PUSH
12609: LD_INT 1
12611: ST_TO_ADDR
// if p3 = 6 then
12612: LD_VAR 0 3
12616: PUSH
12617: LD_INT 6
12619: EQUAL
12620: IFFALSE 12630
// sArmoury := true ;
12622: LD_ADDR_EXP 30
12626: PUSH
12627: LD_INT 1
12629: ST_TO_ADDR
// if p3 = 7 then
12630: LD_VAR 0 3
12634: PUSH
12635: LD_INT 7
12637: EQUAL
12638: IFFALSE 12648
// sRadar := true ;
12640: LD_ADDR_EXP 31
12644: PUSH
12645: LD_INT 1
12647: ST_TO_ADDR
// if p3 = 8 then
12648: LD_VAR 0 3
12652: PUSH
12653: LD_INT 8
12655: EQUAL
12656: IFFALSE 12666
// sBunker := true ;
12658: LD_ADDR_EXP 32
12662: PUSH
12663: LD_INT 1
12665: ST_TO_ADDR
// if p3 = 9 then
12666: LD_VAR 0 3
12670: PUSH
12671: LD_INT 9
12673: EQUAL
12674: IFFALSE 12684
// sHack := true ;
12676: LD_ADDR_EXP 33
12680: PUSH
12681: LD_INT 1
12683: ST_TO_ADDR
// if p3 = 10 then
12684: LD_VAR 0 3
12688: PUSH
12689: LD_INT 10
12691: EQUAL
12692: IFFALSE 12702
// sFire := true ;
12694: LD_ADDR_EXP 34
12698: PUSH
12699: LD_INT 1
12701: ST_TO_ADDR
// if p3 = 11 then
12702: LD_VAR 0 3
12706: PUSH
12707: LD_INT 11
12709: EQUAL
12710: IFFALSE 12720
// sRefresh := true ;
12712: LD_ADDR_EXP 35
12716: PUSH
12717: LD_INT 1
12719: ST_TO_ADDR
// if p3 = 12 then
12720: LD_VAR 0 3
12724: PUSH
12725: LD_INT 12
12727: EQUAL
12728: IFFALSE 12738
// sExp := true ;
12730: LD_ADDR_EXP 36
12734: PUSH
12735: LD_INT 1
12737: ST_TO_ADDR
// if p3 = 13 then
12738: LD_VAR 0 3
12742: PUSH
12743: LD_INT 13
12745: EQUAL
12746: IFFALSE 12756
// sDepot := true ;
12748: LD_ADDR_EXP 37
12752: PUSH
12753: LD_INT 1
12755: ST_TO_ADDR
// if p3 = 14 then
12756: LD_VAR 0 3
12760: PUSH
12761: LD_INT 14
12763: EQUAL
12764: IFFALSE 12774
// sFlag := true ;
12766: LD_ADDR_EXP 38
12770: PUSH
12771: LD_INT 1
12773: ST_TO_ADDR
// if p3 = 15 then
12774: LD_VAR 0 3
12778: PUSH
12779: LD_INT 15
12781: EQUAL
12782: IFFALSE 12792
// sKamikadze := true ;
12784: LD_ADDR_EXP 46
12788: PUSH
12789: LD_INT 1
12791: ST_TO_ADDR
// if p3 = 16 then
12792: LD_VAR 0 3
12796: PUSH
12797: LD_INT 16
12799: EQUAL
12800: IFFALSE 12810
// sTroll := true ;
12802: LD_ADDR_EXP 47
12806: PUSH
12807: LD_INT 1
12809: ST_TO_ADDR
// if p3 = 17 then
12810: LD_VAR 0 3
12814: PUSH
12815: LD_INT 17
12817: EQUAL
12818: IFFALSE 12828
// sSlow := true ;
12820: LD_ADDR_EXP 48
12824: PUSH
12825: LD_INT 1
12827: ST_TO_ADDR
// if p3 = 18 then
12828: LD_VAR 0 3
12832: PUSH
12833: LD_INT 18
12835: EQUAL
12836: IFFALSE 12846
// sLack := true ;
12838: LD_ADDR_EXP 49
12842: PUSH
12843: LD_INT 1
12845: ST_TO_ADDR
// if p3 = 19 then
12846: LD_VAR 0 3
12850: PUSH
12851: LD_INT 19
12853: EQUAL
12854: IFFALSE 12864
// sTank := true ;
12856: LD_ADDR_EXP 51
12860: PUSH
12861: LD_INT 1
12863: ST_TO_ADDR
// if p3 = 20 then
12864: LD_VAR 0 3
12868: PUSH
12869: LD_INT 20
12871: EQUAL
12872: IFFALSE 12882
// sRemote := true ;
12874: LD_ADDR_EXP 52
12878: PUSH
12879: LD_INT 1
12881: ST_TO_ADDR
// if p3 = 21 then
12882: LD_VAR 0 3
12886: PUSH
12887: LD_INT 21
12889: EQUAL
12890: IFFALSE 12900
// sPowell := true ;
12892: LD_ADDR_EXP 53
12896: PUSH
12897: LD_INT 1
12899: ST_TO_ADDR
// if p3 = 22 then
12900: LD_VAR 0 3
12904: PUSH
12905: LD_INT 22
12907: EQUAL
12908: IFFALSE 12918
// sTeleport := true ;
12910: LD_ADDR_EXP 56
12914: PUSH
12915: LD_INT 1
12917: ST_TO_ADDR
// if p3 = 23 then
12918: LD_VAR 0 3
12922: PUSH
12923: LD_INT 23
12925: EQUAL
12926: IFFALSE 12936
// sOilTower := true ;
12928: LD_ADDR_EXP 58
12932: PUSH
12933: LD_INT 1
12935: ST_TO_ADDR
// if p3 = 24 then
12936: LD_VAR 0 3
12940: PUSH
12941: LD_INT 24
12943: EQUAL
12944: IFFALSE 12954
// sShovel := true ;
12946: LD_ADDR_EXP 59
12950: PUSH
12951: LD_INT 1
12953: ST_TO_ADDR
// if p3 = 25 then
12954: LD_VAR 0 3
12958: PUSH
12959: LD_INT 25
12961: EQUAL
12962: IFFALSE 12972
// sSheik := true ;
12964: LD_ADDR_EXP 60
12968: PUSH
12969: LD_INT 1
12971: ST_TO_ADDR
// if p3 = 26 then
12972: LD_VAR 0 3
12976: PUSH
12977: LD_INT 26
12979: EQUAL
12980: IFFALSE 12990
// sEarthquake := true ;
12982: LD_ADDR_EXP 62
12986: PUSH
12987: LD_INT 1
12989: ST_TO_ADDR
// if p3 = 27 then
12990: LD_VAR 0 3
12994: PUSH
12995: LD_INT 27
12997: EQUAL
12998: IFFALSE 13008
// sAI := true ;
13000: LD_ADDR_EXP 63
13004: PUSH
13005: LD_INT 1
13007: ST_TO_ADDR
// if p3 = 28 then
13008: LD_VAR 0 3
13012: PUSH
13013: LD_INT 28
13015: EQUAL
13016: IFFALSE 13026
// sCargo := true ;
13018: LD_ADDR_EXP 66
13022: PUSH
13023: LD_INT 1
13025: ST_TO_ADDR
// if p3 = 29 then
13026: LD_VAR 0 3
13030: PUSH
13031: LD_INT 29
13033: EQUAL
13034: IFFALSE 13044
// sDLaser := true ;
13036: LD_ADDR_EXP 67
13040: PUSH
13041: LD_INT 1
13043: ST_TO_ADDR
// if p3 = 30 then
13044: LD_VAR 0 3
13048: PUSH
13049: LD_INT 30
13051: EQUAL
13052: IFFALSE 13062
// sExchange := true ;
13054: LD_ADDR_EXP 68
13058: PUSH
13059: LD_INT 1
13061: ST_TO_ADDR
// if p3 = 31 then
13062: LD_VAR 0 3
13066: PUSH
13067: LD_INT 31
13069: EQUAL
13070: IFFALSE 13080
// sFac := true ;
13072: LD_ADDR_EXP 69
13076: PUSH
13077: LD_INT 1
13079: ST_TO_ADDR
// if p3 = 32 then
13080: LD_VAR 0 3
13084: PUSH
13085: LD_INT 32
13087: EQUAL
13088: IFFALSE 13098
// sPower := true ;
13090: LD_ADDR_EXP 70
13094: PUSH
13095: LD_INT 1
13097: ST_TO_ADDR
// if p3 = 33 then
13098: LD_VAR 0 3
13102: PUSH
13103: LD_INT 33
13105: EQUAL
13106: IFFALSE 13116
// sRandom := true ;
13108: LD_ADDR_EXP 71
13112: PUSH
13113: LD_INT 1
13115: ST_TO_ADDR
// if p3 = 34 then
13116: LD_VAR 0 3
13120: PUSH
13121: LD_INT 34
13123: EQUAL
13124: IFFALSE 13134
// sShield := true ;
13126: LD_ADDR_EXP 72
13130: PUSH
13131: LD_INT 1
13133: ST_TO_ADDR
// if p3 = 35 then
13134: LD_VAR 0 3
13138: PUSH
13139: LD_INT 35
13141: EQUAL
13142: IFFALSE 13152
// sTime := true ;
13144: LD_ADDR_EXP 73
13148: PUSH
13149: LD_INT 1
13151: ST_TO_ADDR
// if p3 = 36 then
13152: LD_VAR 0 3
13156: PUSH
13157: LD_INT 36
13159: EQUAL
13160: IFFALSE 13170
// sTools := true ;
13162: LD_ADDR_EXP 74
13166: PUSH
13167: LD_INT 1
13169: ST_TO_ADDR
// if p3 = 101 then
13170: LD_VAR 0 3
13174: PUSH
13175: LD_INT 101
13177: EQUAL
13178: IFFALSE 13188
// sSold := true ;
13180: LD_ADDR_EXP 39
13184: PUSH
13185: LD_INT 1
13187: ST_TO_ADDR
// if p3 = 102 then
13188: LD_VAR 0 3
13192: PUSH
13193: LD_INT 102
13195: EQUAL
13196: IFFALSE 13206
// sDiff := true ;
13198: LD_ADDR_EXP 40
13202: PUSH
13203: LD_INT 1
13205: ST_TO_ADDR
// if p3 = 103 then
13206: LD_VAR 0 3
13210: PUSH
13211: LD_INT 103
13213: EQUAL
13214: IFFALSE 13224
// sFog := true ;
13216: LD_ADDR_EXP 43
13220: PUSH
13221: LD_INT 1
13223: ST_TO_ADDR
// if p3 = 104 then
13224: LD_VAR 0 3
13228: PUSH
13229: LD_INT 104
13231: EQUAL
13232: IFFALSE 13242
// sReset := true ;
13234: LD_ADDR_EXP 44
13238: PUSH
13239: LD_INT 1
13241: ST_TO_ADDR
// if p3 = 105 then
13242: LD_VAR 0 3
13246: PUSH
13247: LD_INT 105
13249: EQUAL
13250: IFFALSE 13260
// sSun := true ;
13252: LD_ADDR_EXP 45
13256: PUSH
13257: LD_INT 1
13259: ST_TO_ADDR
// if p3 = 106 then
13260: LD_VAR 0 3
13264: PUSH
13265: LD_INT 106
13267: EQUAL
13268: IFFALSE 13278
// sTiger := true ;
13270: LD_ADDR_EXP 41
13274: PUSH
13275: LD_INT 1
13277: ST_TO_ADDR
// if p3 = 107 then
13278: LD_VAR 0 3
13282: PUSH
13283: LD_INT 107
13285: EQUAL
13286: IFFALSE 13296
// sBomb := true ;
13288: LD_ADDR_EXP 42
13292: PUSH
13293: LD_INT 1
13295: ST_TO_ADDR
// if p3 = 108 then
13296: LD_VAR 0 3
13300: PUSH
13301: LD_INT 108
13303: EQUAL
13304: IFFALSE 13314
// sWound := true ;
13306: LD_ADDR_EXP 50
13310: PUSH
13311: LD_INT 1
13313: ST_TO_ADDR
// if p3 = 109 then
13314: LD_VAR 0 3
13318: PUSH
13319: LD_INT 109
13321: EQUAL
13322: IFFALSE 13332
// sBetray := true ;
13324: LD_ADDR_EXP 54
13328: PUSH
13329: LD_INT 1
13331: ST_TO_ADDR
// if p3 = 110 then
13332: LD_VAR 0 3
13336: PUSH
13337: LD_INT 110
13339: EQUAL
13340: IFFALSE 13350
// sContamin := true ;
13342: LD_ADDR_EXP 55
13346: PUSH
13347: LD_INT 1
13349: ST_TO_ADDR
// if p3 = 111 then
13350: LD_VAR 0 3
13354: PUSH
13355: LD_INT 111
13357: EQUAL
13358: IFFALSE 13368
// sOil := true ;
13360: LD_ADDR_EXP 57
13364: PUSH
13365: LD_INT 1
13367: ST_TO_ADDR
// if p3 = 112 then
13368: LD_VAR 0 3
13372: PUSH
13373: LD_INT 112
13375: EQUAL
13376: IFFALSE 13386
// sStu := true ;
13378: LD_ADDR_EXP 61
13382: PUSH
13383: LD_INT 1
13385: ST_TO_ADDR
// if p3 = 113 then
13386: LD_VAR 0 3
13390: PUSH
13391: LD_INT 113
13393: EQUAL
13394: IFFALSE 13404
// sBazooka := true ;
13396: LD_ADDR_EXP 64
13400: PUSH
13401: LD_INT 1
13403: ST_TO_ADDR
// if p3 = 114 then
13404: LD_VAR 0 3
13408: PUSH
13409: LD_INT 114
13411: EQUAL
13412: IFFALSE 13422
// sMortar := true ;
13414: LD_ADDR_EXP 65
13418: PUSH
13419: LD_INT 1
13421: ST_TO_ADDR
// if p3 = 115 then
13422: LD_VAR 0 3
13426: PUSH
13427: LD_INT 115
13429: EQUAL
13430: IFFALSE 13440
// sRanger := true ;
13432: LD_ADDR_EXP 75
13436: PUSH
13437: LD_INT 1
13439: ST_TO_ADDR
// if p3 = 116 then
13440: LD_VAR 0 3
13444: PUSH
13445: LD_INT 116
13447: EQUAL
13448: IFFALSE 13458
// sComputer := true ;
13450: LD_ADDR_EXP 76
13454: PUSH
13455: LD_INT 1
13457: ST_TO_ADDR
// if p3 = 117 then
13458: LD_VAR 0 3
13462: PUSH
13463: LD_INT 117
13465: EQUAL
13466: IFFALSE 13476
// s30 := true ;
13468: LD_ADDR_EXP 77
13472: PUSH
13473: LD_INT 1
13475: ST_TO_ADDR
// if p3 = 118 then
13476: LD_VAR 0 3
13480: PUSH
13481: LD_INT 118
13483: EQUAL
13484: IFFALSE 13494
// s60 := true ;
13486: LD_ADDR_EXP 78
13490: PUSH
13491: LD_INT 1
13493: ST_TO_ADDR
// end ; if p2 = hack_mode then
13494: LD_VAR 0 2
13498: PUSH
13499: LD_INT 101
13501: EQUAL
13502: IFFALSE 13630
// begin case p3 of 1 :
13504: LD_VAR 0 3
13508: PUSH
13509: LD_INT 1
13511: DOUBLE
13512: EQUAL
13513: IFTRUE 13517
13515: GO 13524
13517: POP
// hHackUnlimitedResources ; 2 :
13518: CALL 25777 0 0
13522: GO 13630
13524: LD_INT 2
13526: DOUBLE
13527: EQUAL
13528: IFTRUE 13532
13530: GO 13539
13532: POP
// hHackSetLevel10 ; 3 :
13533: CALL 25910 0 0
13537: GO 13630
13539: LD_INT 3
13541: DOUBLE
13542: EQUAL
13543: IFTRUE 13547
13545: GO 13554
13547: POP
// hHackSetLevel10YourUnits ; 4 :
13548: CALL 25995 0 0
13552: GO 13630
13554: LD_INT 4
13556: DOUBLE
13557: EQUAL
13558: IFTRUE 13562
13560: GO 13569
13562: POP
// hHackInvincible ; 5 :
13563: CALL 26443 0 0
13567: GO 13630
13569: LD_INT 5
13571: DOUBLE
13572: EQUAL
13573: IFTRUE 13577
13575: GO 13584
13577: POP
// hHackInvisible ; 6 :
13578: CALL 26554 0 0
13582: GO 13630
13584: LD_INT 6
13586: DOUBLE
13587: EQUAL
13588: IFTRUE 13592
13590: GO 13599
13592: POP
// hHackChangeYourSide ; 7 :
13593: CALL 26611 0 0
13597: GO 13630
13599: LD_INT 7
13601: DOUBLE
13602: EQUAL
13603: IFTRUE 13607
13605: GO 13614
13607: POP
// hHackChangeUnitSide ; 8 :
13608: CALL 26653 0 0
13612: GO 13630
13614: LD_INT 8
13616: DOUBLE
13617: EQUAL
13618: IFTRUE 13622
13620: GO 13629
13622: POP
// hHackFog ; end ;
13623: CALL 26754 0 0
13627: GO 13630
13629: POP
// end ; if p2 = game_save_mode then
13630: LD_VAR 0 2
13634: PUSH
13635: LD_INT 102
13637: EQUAL
13638: IFFALSE 13693
// begin if p3 = 1 then
13640: LD_VAR 0 3
13644: PUSH
13645: LD_INT 1
13647: EQUAL
13648: IFFALSE 13660
// globalGameSaveCounter := p4 ;
13650: LD_ADDR_EXP 21
13654: PUSH
13655: LD_VAR 0 4
13659: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
13660: LD_VAR 0 3
13664: PUSH
13665: LD_INT 2
13667: EQUAL
13668: PUSH
13669: LD_EXP 21
13673: AND
13674: IFFALSE 13693
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
13676: LD_STRING setGameSaveCounter(
13678: PUSH
13679: LD_EXP 21
13683: STR
13684: PUSH
13685: LD_STRING )
13687: STR
13688: PPUSH
13689: CALL_OW 559
// end ; end ;
13693: LD_VAR 0 7
13697: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
13698: LD_INT 0
13700: PPUSH
// streamModeActive := false ;
13701: LD_ADDR_EXP 22
13705: PUSH
13706: LD_INT 0
13708: ST_TO_ADDR
// normalCounter := 36 ;
13709: LD_ADDR_EXP 23
13713: PUSH
13714: LD_INT 36
13716: ST_TO_ADDR
// hardcoreCounter := 18 ;
13717: LD_ADDR_EXP 24
13721: PUSH
13722: LD_INT 18
13724: ST_TO_ADDR
// sRocket := false ;
13725: LD_ADDR_EXP 27
13729: PUSH
13730: LD_INT 0
13732: ST_TO_ADDR
// sSpeed := false ;
13733: LD_ADDR_EXP 26
13737: PUSH
13738: LD_INT 0
13740: ST_TO_ADDR
// sEngine := false ;
13741: LD_ADDR_EXP 28
13745: PUSH
13746: LD_INT 0
13748: ST_TO_ADDR
// sSpec := false ;
13749: LD_ADDR_EXP 25
13753: PUSH
13754: LD_INT 0
13756: ST_TO_ADDR
// sLevel := false ;
13757: LD_ADDR_EXP 29
13761: PUSH
13762: LD_INT 0
13764: ST_TO_ADDR
// sArmoury := false ;
13765: LD_ADDR_EXP 30
13769: PUSH
13770: LD_INT 0
13772: ST_TO_ADDR
// sRadar := false ;
13773: LD_ADDR_EXP 31
13777: PUSH
13778: LD_INT 0
13780: ST_TO_ADDR
// sBunker := false ;
13781: LD_ADDR_EXP 32
13785: PUSH
13786: LD_INT 0
13788: ST_TO_ADDR
// sHack := false ;
13789: LD_ADDR_EXP 33
13793: PUSH
13794: LD_INT 0
13796: ST_TO_ADDR
// sFire := false ;
13797: LD_ADDR_EXP 34
13801: PUSH
13802: LD_INT 0
13804: ST_TO_ADDR
// sRefresh := false ;
13805: LD_ADDR_EXP 35
13809: PUSH
13810: LD_INT 0
13812: ST_TO_ADDR
// sExp := false ;
13813: LD_ADDR_EXP 36
13817: PUSH
13818: LD_INT 0
13820: ST_TO_ADDR
// sDepot := false ;
13821: LD_ADDR_EXP 37
13825: PUSH
13826: LD_INT 0
13828: ST_TO_ADDR
// sFlag := false ;
13829: LD_ADDR_EXP 38
13833: PUSH
13834: LD_INT 0
13836: ST_TO_ADDR
// sKamikadze := false ;
13837: LD_ADDR_EXP 46
13841: PUSH
13842: LD_INT 0
13844: ST_TO_ADDR
// sTroll := false ;
13845: LD_ADDR_EXP 47
13849: PUSH
13850: LD_INT 0
13852: ST_TO_ADDR
// sSlow := false ;
13853: LD_ADDR_EXP 48
13857: PUSH
13858: LD_INT 0
13860: ST_TO_ADDR
// sLack := false ;
13861: LD_ADDR_EXP 49
13865: PUSH
13866: LD_INT 0
13868: ST_TO_ADDR
// sTank := false ;
13869: LD_ADDR_EXP 51
13873: PUSH
13874: LD_INT 0
13876: ST_TO_ADDR
// sRemote := false ;
13877: LD_ADDR_EXP 52
13881: PUSH
13882: LD_INT 0
13884: ST_TO_ADDR
// sPowell := false ;
13885: LD_ADDR_EXP 53
13889: PUSH
13890: LD_INT 0
13892: ST_TO_ADDR
// sTeleport := false ;
13893: LD_ADDR_EXP 56
13897: PUSH
13898: LD_INT 0
13900: ST_TO_ADDR
// sOilTower := false ;
13901: LD_ADDR_EXP 58
13905: PUSH
13906: LD_INT 0
13908: ST_TO_ADDR
// sShovel := false ;
13909: LD_ADDR_EXP 59
13913: PUSH
13914: LD_INT 0
13916: ST_TO_ADDR
// sSheik := false ;
13917: LD_ADDR_EXP 60
13921: PUSH
13922: LD_INT 0
13924: ST_TO_ADDR
// sEarthquake := false ;
13925: LD_ADDR_EXP 62
13929: PUSH
13930: LD_INT 0
13932: ST_TO_ADDR
// sAI := false ;
13933: LD_ADDR_EXP 63
13937: PUSH
13938: LD_INT 0
13940: ST_TO_ADDR
// sCargo := false ;
13941: LD_ADDR_EXP 66
13945: PUSH
13946: LD_INT 0
13948: ST_TO_ADDR
// sDLaser := false ;
13949: LD_ADDR_EXP 67
13953: PUSH
13954: LD_INT 0
13956: ST_TO_ADDR
// sExchange := false ;
13957: LD_ADDR_EXP 68
13961: PUSH
13962: LD_INT 0
13964: ST_TO_ADDR
// sFac := false ;
13965: LD_ADDR_EXP 69
13969: PUSH
13970: LD_INT 0
13972: ST_TO_ADDR
// sPower := false ;
13973: LD_ADDR_EXP 70
13977: PUSH
13978: LD_INT 0
13980: ST_TO_ADDR
// sRandom := false ;
13981: LD_ADDR_EXP 71
13985: PUSH
13986: LD_INT 0
13988: ST_TO_ADDR
// sShield := false ;
13989: LD_ADDR_EXP 72
13993: PUSH
13994: LD_INT 0
13996: ST_TO_ADDR
// sTime := false ;
13997: LD_ADDR_EXP 73
14001: PUSH
14002: LD_INT 0
14004: ST_TO_ADDR
// sTools := false ;
14005: LD_ADDR_EXP 74
14009: PUSH
14010: LD_INT 0
14012: ST_TO_ADDR
// sSold := false ;
14013: LD_ADDR_EXP 39
14017: PUSH
14018: LD_INT 0
14020: ST_TO_ADDR
// sDiff := false ;
14021: LD_ADDR_EXP 40
14025: PUSH
14026: LD_INT 0
14028: ST_TO_ADDR
// sFog := false ;
14029: LD_ADDR_EXP 43
14033: PUSH
14034: LD_INT 0
14036: ST_TO_ADDR
// sReset := false ;
14037: LD_ADDR_EXP 44
14041: PUSH
14042: LD_INT 0
14044: ST_TO_ADDR
// sSun := false ;
14045: LD_ADDR_EXP 45
14049: PUSH
14050: LD_INT 0
14052: ST_TO_ADDR
// sTiger := false ;
14053: LD_ADDR_EXP 41
14057: PUSH
14058: LD_INT 0
14060: ST_TO_ADDR
// sBomb := false ;
14061: LD_ADDR_EXP 42
14065: PUSH
14066: LD_INT 0
14068: ST_TO_ADDR
// sWound := false ;
14069: LD_ADDR_EXP 50
14073: PUSH
14074: LD_INT 0
14076: ST_TO_ADDR
// sBetray := false ;
14077: LD_ADDR_EXP 54
14081: PUSH
14082: LD_INT 0
14084: ST_TO_ADDR
// sContamin := false ;
14085: LD_ADDR_EXP 55
14089: PUSH
14090: LD_INT 0
14092: ST_TO_ADDR
// sOil := false ;
14093: LD_ADDR_EXP 57
14097: PUSH
14098: LD_INT 0
14100: ST_TO_ADDR
// sStu := false ;
14101: LD_ADDR_EXP 61
14105: PUSH
14106: LD_INT 0
14108: ST_TO_ADDR
// sBazooka := false ;
14109: LD_ADDR_EXP 64
14113: PUSH
14114: LD_INT 0
14116: ST_TO_ADDR
// sMortar := false ;
14117: LD_ADDR_EXP 65
14121: PUSH
14122: LD_INT 0
14124: ST_TO_ADDR
// sRanger := false ;
14125: LD_ADDR_EXP 75
14129: PUSH
14130: LD_INT 0
14132: ST_TO_ADDR
// sComputer := false ;
14133: LD_ADDR_EXP 76
14137: PUSH
14138: LD_INT 0
14140: ST_TO_ADDR
// s30 := false ;
14141: LD_ADDR_EXP 77
14145: PUSH
14146: LD_INT 0
14148: ST_TO_ADDR
// s60 := false ;
14149: LD_ADDR_EXP 78
14153: PUSH
14154: LD_INT 0
14156: ST_TO_ADDR
// end ;
14157: LD_VAR 0 1
14161: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
14162: LD_INT 0
14164: PPUSH
14165: PPUSH
14166: PPUSH
14167: PPUSH
14168: PPUSH
14169: PPUSH
14170: PPUSH
// result := [ ] ;
14171: LD_ADDR_VAR 0 2
14175: PUSH
14176: EMPTY
14177: ST_TO_ADDR
// if campaign_id = 1 then
14178: LD_OWVAR 69
14182: PUSH
14183: LD_INT 1
14185: EQUAL
14186: IFFALSE 17352
// begin case mission_number of 1 :
14188: LD_OWVAR 70
14192: PUSH
14193: LD_INT 1
14195: DOUBLE
14196: EQUAL
14197: IFTRUE 14201
14199: GO 14277
14201: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
14202: LD_ADDR_VAR 0 2
14206: PUSH
14207: LD_INT 2
14209: PUSH
14210: LD_INT 4
14212: PUSH
14213: LD_INT 11
14215: PUSH
14216: LD_INT 12
14218: PUSH
14219: LD_INT 15
14221: PUSH
14222: LD_INT 16
14224: PUSH
14225: LD_INT 22
14227: PUSH
14228: LD_INT 23
14230: PUSH
14231: LD_INT 26
14233: PUSH
14234: EMPTY
14235: LIST
14236: LIST
14237: LIST
14238: LIST
14239: LIST
14240: LIST
14241: LIST
14242: LIST
14243: LIST
14244: PUSH
14245: LD_INT 101
14247: PUSH
14248: LD_INT 102
14250: PUSH
14251: LD_INT 106
14253: PUSH
14254: LD_INT 116
14256: PUSH
14257: LD_INT 117
14259: PUSH
14260: LD_INT 118
14262: PUSH
14263: EMPTY
14264: LIST
14265: LIST
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: PUSH
14271: EMPTY
14272: LIST
14273: LIST
14274: ST_TO_ADDR
14275: GO 17350
14277: LD_INT 2
14279: DOUBLE
14280: EQUAL
14281: IFTRUE 14285
14283: GO 14369
14285: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
14286: LD_ADDR_VAR 0 2
14290: PUSH
14291: LD_INT 2
14293: PUSH
14294: LD_INT 4
14296: PUSH
14297: LD_INT 11
14299: PUSH
14300: LD_INT 12
14302: PUSH
14303: LD_INT 15
14305: PUSH
14306: LD_INT 16
14308: PUSH
14309: LD_INT 22
14311: PUSH
14312: LD_INT 23
14314: PUSH
14315: LD_INT 26
14317: PUSH
14318: EMPTY
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: LIST
14327: LIST
14328: PUSH
14329: LD_INT 101
14331: PUSH
14332: LD_INT 102
14334: PUSH
14335: LD_INT 105
14337: PUSH
14338: LD_INT 106
14340: PUSH
14341: LD_INT 108
14343: PUSH
14344: LD_INT 116
14346: PUSH
14347: LD_INT 117
14349: PUSH
14350: LD_INT 118
14352: PUSH
14353: EMPTY
14354: LIST
14355: LIST
14356: LIST
14357: LIST
14358: LIST
14359: LIST
14360: LIST
14361: LIST
14362: PUSH
14363: EMPTY
14364: LIST
14365: LIST
14366: ST_TO_ADDR
14367: GO 17350
14369: LD_INT 3
14371: DOUBLE
14372: EQUAL
14373: IFTRUE 14377
14375: GO 14465
14377: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
14378: LD_ADDR_VAR 0 2
14382: PUSH
14383: LD_INT 2
14385: PUSH
14386: LD_INT 4
14388: PUSH
14389: LD_INT 5
14391: PUSH
14392: LD_INT 11
14394: PUSH
14395: LD_INT 12
14397: PUSH
14398: LD_INT 15
14400: PUSH
14401: LD_INT 16
14403: PUSH
14404: LD_INT 22
14406: PUSH
14407: LD_INT 26
14409: PUSH
14410: LD_INT 36
14412: PUSH
14413: EMPTY
14414: LIST
14415: LIST
14416: LIST
14417: LIST
14418: LIST
14419: LIST
14420: LIST
14421: LIST
14422: LIST
14423: LIST
14424: PUSH
14425: LD_INT 101
14427: PUSH
14428: LD_INT 102
14430: PUSH
14431: LD_INT 105
14433: PUSH
14434: LD_INT 106
14436: PUSH
14437: LD_INT 108
14439: PUSH
14440: LD_INT 116
14442: PUSH
14443: LD_INT 117
14445: PUSH
14446: LD_INT 118
14448: PUSH
14449: EMPTY
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: PUSH
14459: EMPTY
14460: LIST
14461: LIST
14462: ST_TO_ADDR
14463: GO 17350
14465: LD_INT 4
14467: DOUBLE
14468: EQUAL
14469: IFTRUE 14473
14471: GO 14569
14473: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
14474: LD_ADDR_VAR 0 2
14478: PUSH
14479: LD_INT 2
14481: PUSH
14482: LD_INT 4
14484: PUSH
14485: LD_INT 5
14487: PUSH
14488: LD_INT 8
14490: PUSH
14491: LD_INT 11
14493: PUSH
14494: LD_INT 12
14496: PUSH
14497: LD_INT 15
14499: PUSH
14500: LD_INT 16
14502: PUSH
14503: LD_INT 22
14505: PUSH
14506: LD_INT 23
14508: PUSH
14509: LD_INT 26
14511: PUSH
14512: LD_INT 36
14514: PUSH
14515: EMPTY
14516: LIST
14517: LIST
14518: LIST
14519: LIST
14520: LIST
14521: LIST
14522: LIST
14523: LIST
14524: LIST
14525: LIST
14526: LIST
14527: LIST
14528: PUSH
14529: LD_INT 101
14531: PUSH
14532: LD_INT 102
14534: PUSH
14535: LD_INT 105
14537: PUSH
14538: LD_INT 106
14540: PUSH
14541: LD_INT 108
14543: PUSH
14544: LD_INT 116
14546: PUSH
14547: LD_INT 117
14549: PUSH
14550: LD_INT 118
14552: PUSH
14553: EMPTY
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: PUSH
14563: EMPTY
14564: LIST
14565: LIST
14566: ST_TO_ADDR
14567: GO 17350
14569: LD_INT 5
14571: DOUBLE
14572: EQUAL
14573: IFTRUE 14577
14575: GO 14689
14577: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
14578: LD_ADDR_VAR 0 2
14582: PUSH
14583: LD_INT 2
14585: PUSH
14586: LD_INT 4
14588: PUSH
14589: LD_INT 5
14591: PUSH
14592: LD_INT 6
14594: PUSH
14595: LD_INT 8
14597: PUSH
14598: LD_INT 11
14600: PUSH
14601: LD_INT 12
14603: PUSH
14604: LD_INT 15
14606: PUSH
14607: LD_INT 16
14609: PUSH
14610: LD_INT 22
14612: PUSH
14613: LD_INT 23
14615: PUSH
14616: LD_INT 25
14618: PUSH
14619: LD_INT 26
14621: PUSH
14622: LD_INT 36
14624: PUSH
14625: EMPTY
14626: LIST
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: LIST
14633: LIST
14634: LIST
14635: LIST
14636: LIST
14637: LIST
14638: LIST
14639: LIST
14640: PUSH
14641: LD_INT 101
14643: PUSH
14644: LD_INT 102
14646: PUSH
14647: LD_INT 105
14649: PUSH
14650: LD_INT 106
14652: PUSH
14653: LD_INT 108
14655: PUSH
14656: LD_INT 109
14658: PUSH
14659: LD_INT 112
14661: PUSH
14662: LD_INT 116
14664: PUSH
14665: LD_INT 117
14667: PUSH
14668: LD_INT 118
14670: PUSH
14671: EMPTY
14672: LIST
14673: LIST
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: PUSH
14683: EMPTY
14684: LIST
14685: LIST
14686: ST_TO_ADDR
14687: GO 17350
14689: LD_INT 6
14691: DOUBLE
14692: EQUAL
14693: IFTRUE 14697
14695: GO 14829
14697: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
14698: LD_ADDR_VAR 0 2
14702: PUSH
14703: LD_INT 2
14705: PUSH
14706: LD_INT 4
14708: PUSH
14709: LD_INT 5
14711: PUSH
14712: LD_INT 6
14714: PUSH
14715: LD_INT 8
14717: PUSH
14718: LD_INT 11
14720: PUSH
14721: LD_INT 12
14723: PUSH
14724: LD_INT 15
14726: PUSH
14727: LD_INT 16
14729: PUSH
14730: LD_INT 20
14732: PUSH
14733: LD_INT 21
14735: PUSH
14736: LD_INT 22
14738: PUSH
14739: LD_INT 23
14741: PUSH
14742: LD_INT 25
14744: PUSH
14745: LD_INT 26
14747: PUSH
14748: LD_INT 30
14750: PUSH
14751: LD_INT 31
14753: PUSH
14754: LD_INT 32
14756: PUSH
14757: LD_INT 36
14759: PUSH
14760: EMPTY
14761: LIST
14762: LIST
14763: LIST
14764: LIST
14765: LIST
14766: LIST
14767: LIST
14768: LIST
14769: LIST
14770: LIST
14771: LIST
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: LIST
14777: LIST
14778: LIST
14779: LIST
14780: PUSH
14781: LD_INT 101
14783: PUSH
14784: LD_INT 102
14786: PUSH
14787: LD_INT 105
14789: PUSH
14790: LD_INT 106
14792: PUSH
14793: LD_INT 108
14795: PUSH
14796: LD_INT 109
14798: PUSH
14799: LD_INT 112
14801: PUSH
14802: LD_INT 116
14804: PUSH
14805: LD_INT 117
14807: PUSH
14808: LD_INT 118
14810: PUSH
14811: EMPTY
14812: LIST
14813: LIST
14814: LIST
14815: LIST
14816: LIST
14817: LIST
14818: LIST
14819: LIST
14820: LIST
14821: LIST
14822: PUSH
14823: EMPTY
14824: LIST
14825: LIST
14826: ST_TO_ADDR
14827: GO 17350
14829: LD_INT 7
14831: DOUBLE
14832: EQUAL
14833: IFTRUE 14837
14835: GO 14949
14837: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
14838: LD_ADDR_VAR 0 2
14842: PUSH
14843: LD_INT 2
14845: PUSH
14846: LD_INT 4
14848: PUSH
14849: LD_INT 5
14851: PUSH
14852: LD_INT 7
14854: PUSH
14855: LD_INT 11
14857: PUSH
14858: LD_INT 12
14860: PUSH
14861: LD_INT 15
14863: PUSH
14864: LD_INT 16
14866: PUSH
14867: LD_INT 20
14869: PUSH
14870: LD_INT 21
14872: PUSH
14873: LD_INT 22
14875: PUSH
14876: LD_INT 23
14878: PUSH
14879: LD_INT 25
14881: PUSH
14882: LD_INT 26
14884: PUSH
14885: EMPTY
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: LIST
14894: LIST
14895: LIST
14896: LIST
14897: LIST
14898: LIST
14899: LIST
14900: PUSH
14901: LD_INT 101
14903: PUSH
14904: LD_INT 102
14906: PUSH
14907: LD_INT 103
14909: PUSH
14910: LD_INT 105
14912: PUSH
14913: LD_INT 106
14915: PUSH
14916: LD_INT 108
14918: PUSH
14919: LD_INT 112
14921: PUSH
14922: LD_INT 116
14924: PUSH
14925: LD_INT 117
14927: PUSH
14928: LD_INT 118
14930: PUSH
14931: EMPTY
14932: LIST
14933: LIST
14934: LIST
14935: LIST
14936: LIST
14937: LIST
14938: LIST
14939: LIST
14940: LIST
14941: LIST
14942: PUSH
14943: EMPTY
14944: LIST
14945: LIST
14946: ST_TO_ADDR
14947: GO 17350
14949: LD_INT 8
14951: DOUBLE
14952: EQUAL
14953: IFTRUE 14957
14955: GO 15097
14957: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
14958: LD_ADDR_VAR 0 2
14962: PUSH
14963: LD_INT 2
14965: PUSH
14966: LD_INT 4
14968: PUSH
14969: LD_INT 5
14971: PUSH
14972: LD_INT 6
14974: PUSH
14975: LD_INT 7
14977: PUSH
14978: LD_INT 8
14980: PUSH
14981: LD_INT 11
14983: PUSH
14984: LD_INT 12
14986: PUSH
14987: LD_INT 15
14989: PUSH
14990: LD_INT 16
14992: PUSH
14993: LD_INT 20
14995: PUSH
14996: LD_INT 21
14998: PUSH
14999: LD_INT 22
15001: PUSH
15002: LD_INT 23
15004: PUSH
15005: LD_INT 25
15007: PUSH
15008: LD_INT 26
15010: PUSH
15011: LD_INT 30
15013: PUSH
15014: LD_INT 31
15016: PUSH
15017: LD_INT 32
15019: PUSH
15020: LD_INT 36
15022: PUSH
15023: EMPTY
15024: LIST
15025: LIST
15026: LIST
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: LIST
15032: LIST
15033: LIST
15034: LIST
15035: LIST
15036: LIST
15037: LIST
15038: LIST
15039: LIST
15040: LIST
15041: LIST
15042: LIST
15043: LIST
15044: PUSH
15045: LD_INT 101
15047: PUSH
15048: LD_INT 102
15050: PUSH
15051: LD_INT 103
15053: PUSH
15054: LD_INT 105
15056: PUSH
15057: LD_INT 106
15059: PUSH
15060: LD_INT 108
15062: PUSH
15063: LD_INT 109
15065: PUSH
15066: LD_INT 112
15068: PUSH
15069: LD_INT 116
15071: PUSH
15072: LD_INT 117
15074: PUSH
15075: LD_INT 118
15077: PUSH
15078: EMPTY
15079: LIST
15080: LIST
15081: LIST
15082: LIST
15083: LIST
15084: LIST
15085: LIST
15086: LIST
15087: LIST
15088: LIST
15089: LIST
15090: PUSH
15091: EMPTY
15092: LIST
15093: LIST
15094: ST_TO_ADDR
15095: GO 17350
15097: LD_INT 9
15099: DOUBLE
15100: EQUAL
15101: IFTRUE 15105
15103: GO 15253
15105: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
15106: LD_ADDR_VAR 0 2
15110: PUSH
15111: LD_INT 2
15113: PUSH
15114: LD_INT 4
15116: PUSH
15117: LD_INT 5
15119: PUSH
15120: LD_INT 6
15122: PUSH
15123: LD_INT 7
15125: PUSH
15126: LD_INT 8
15128: PUSH
15129: LD_INT 11
15131: PUSH
15132: LD_INT 12
15134: PUSH
15135: LD_INT 15
15137: PUSH
15138: LD_INT 16
15140: PUSH
15141: LD_INT 20
15143: PUSH
15144: LD_INT 21
15146: PUSH
15147: LD_INT 22
15149: PUSH
15150: LD_INT 23
15152: PUSH
15153: LD_INT 25
15155: PUSH
15156: LD_INT 26
15158: PUSH
15159: LD_INT 28
15161: PUSH
15162: LD_INT 30
15164: PUSH
15165: LD_INT 31
15167: PUSH
15168: LD_INT 32
15170: PUSH
15171: LD_INT 36
15173: PUSH
15174: EMPTY
15175: LIST
15176: LIST
15177: LIST
15178: LIST
15179: LIST
15180: LIST
15181: LIST
15182: LIST
15183: LIST
15184: LIST
15185: LIST
15186: LIST
15187: LIST
15188: LIST
15189: LIST
15190: LIST
15191: LIST
15192: LIST
15193: LIST
15194: LIST
15195: LIST
15196: PUSH
15197: LD_INT 101
15199: PUSH
15200: LD_INT 102
15202: PUSH
15203: LD_INT 103
15205: PUSH
15206: LD_INT 105
15208: PUSH
15209: LD_INT 106
15211: PUSH
15212: LD_INT 108
15214: PUSH
15215: LD_INT 109
15217: PUSH
15218: LD_INT 112
15220: PUSH
15221: LD_INT 114
15223: PUSH
15224: LD_INT 116
15226: PUSH
15227: LD_INT 117
15229: PUSH
15230: LD_INT 118
15232: PUSH
15233: EMPTY
15234: LIST
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: LIST
15240: LIST
15241: LIST
15242: LIST
15243: LIST
15244: LIST
15245: LIST
15246: PUSH
15247: EMPTY
15248: LIST
15249: LIST
15250: ST_TO_ADDR
15251: GO 17350
15253: LD_INT 10
15255: DOUBLE
15256: EQUAL
15257: IFTRUE 15261
15259: GO 15457
15261: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
15262: LD_ADDR_VAR 0 2
15266: PUSH
15267: LD_INT 2
15269: PUSH
15270: LD_INT 4
15272: PUSH
15273: LD_INT 5
15275: PUSH
15276: LD_INT 6
15278: PUSH
15279: LD_INT 7
15281: PUSH
15282: LD_INT 8
15284: PUSH
15285: LD_INT 9
15287: PUSH
15288: LD_INT 10
15290: PUSH
15291: LD_INT 11
15293: PUSH
15294: LD_INT 12
15296: PUSH
15297: LD_INT 13
15299: PUSH
15300: LD_INT 14
15302: PUSH
15303: LD_INT 15
15305: PUSH
15306: LD_INT 16
15308: PUSH
15309: LD_INT 17
15311: PUSH
15312: LD_INT 18
15314: PUSH
15315: LD_INT 19
15317: PUSH
15318: LD_INT 20
15320: PUSH
15321: LD_INT 21
15323: PUSH
15324: LD_INT 22
15326: PUSH
15327: LD_INT 23
15329: PUSH
15330: LD_INT 24
15332: PUSH
15333: LD_INT 25
15335: PUSH
15336: LD_INT 26
15338: PUSH
15339: LD_INT 28
15341: PUSH
15342: LD_INT 30
15344: PUSH
15345: LD_INT 31
15347: PUSH
15348: LD_INT 32
15350: PUSH
15351: LD_INT 36
15353: PUSH
15354: EMPTY
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: LIST
15376: LIST
15377: LIST
15378: LIST
15379: LIST
15380: LIST
15381: LIST
15382: LIST
15383: LIST
15384: PUSH
15385: LD_INT 101
15387: PUSH
15388: LD_INT 102
15390: PUSH
15391: LD_INT 103
15393: PUSH
15394: LD_INT 104
15396: PUSH
15397: LD_INT 105
15399: PUSH
15400: LD_INT 106
15402: PUSH
15403: LD_INT 107
15405: PUSH
15406: LD_INT 108
15408: PUSH
15409: LD_INT 109
15411: PUSH
15412: LD_INT 110
15414: PUSH
15415: LD_INT 111
15417: PUSH
15418: LD_INT 112
15420: PUSH
15421: LD_INT 114
15423: PUSH
15424: LD_INT 116
15426: PUSH
15427: LD_INT 117
15429: PUSH
15430: LD_INT 118
15432: PUSH
15433: EMPTY
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: LIST
15441: LIST
15442: LIST
15443: LIST
15444: LIST
15445: LIST
15446: LIST
15447: LIST
15448: LIST
15449: LIST
15450: PUSH
15451: EMPTY
15452: LIST
15453: LIST
15454: ST_TO_ADDR
15455: GO 17350
15457: LD_INT 11
15459: DOUBLE
15460: EQUAL
15461: IFTRUE 15465
15463: GO 15669
15465: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
15466: LD_ADDR_VAR 0 2
15470: PUSH
15471: LD_INT 2
15473: PUSH
15474: LD_INT 3
15476: PUSH
15477: LD_INT 4
15479: PUSH
15480: LD_INT 5
15482: PUSH
15483: LD_INT 6
15485: PUSH
15486: LD_INT 7
15488: PUSH
15489: LD_INT 8
15491: PUSH
15492: LD_INT 9
15494: PUSH
15495: LD_INT 10
15497: PUSH
15498: LD_INT 11
15500: PUSH
15501: LD_INT 12
15503: PUSH
15504: LD_INT 13
15506: PUSH
15507: LD_INT 14
15509: PUSH
15510: LD_INT 15
15512: PUSH
15513: LD_INT 16
15515: PUSH
15516: LD_INT 17
15518: PUSH
15519: LD_INT 18
15521: PUSH
15522: LD_INT 19
15524: PUSH
15525: LD_INT 20
15527: PUSH
15528: LD_INT 21
15530: PUSH
15531: LD_INT 22
15533: PUSH
15534: LD_INT 23
15536: PUSH
15537: LD_INT 24
15539: PUSH
15540: LD_INT 25
15542: PUSH
15543: LD_INT 26
15545: PUSH
15546: LD_INT 28
15548: PUSH
15549: LD_INT 30
15551: PUSH
15552: LD_INT 31
15554: PUSH
15555: LD_INT 32
15557: PUSH
15558: LD_INT 34
15560: PUSH
15561: LD_INT 36
15563: PUSH
15564: EMPTY
15565: LIST
15566: LIST
15567: LIST
15568: LIST
15569: LIST
15570: LIST
15571: LIST
15572: LIST
15573: LIST
15574: LIST
15575: LIST
15576: LIST
15577: LIST
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: LIST
15588: LIST
15589: LIST
15590: LIST
15591: LIST
15592: LIST
15593: LIST
15594: LIST
15595: LIST
15596: PUSH
15597: LD_INT 101
15599: PUSH
15600: LD_INT 102
15602: PUSH
15603: LD_INT 103
15605: PUSH
15606: LD_INT 104
15608: PUSH
15609: LD_INT 105
15611: PUSH
15612: LD_INT 106
15614: PUSH
15615: LD_INT 107
15617: PUSH
15618: LD_INT 108
15620: PUSH
15621: LD_INT 109
15623: PUSH
15624: LD_INT 110
15626: PUSH
15627: LD_INT 111
15629: PUSH
15630: LD_INT 112
15632: PUSH
15633: LD_INT 114
15635: PUSH
15636: LD_INT 116
15638: PUSH
15639: LD_INT 117
15641: PUSH
15642: LD_INT 118
15644: PUSH
15645: EMPTY
15646: LIST
15647: LIST
15648: LIST
15649: LIST
15650: LIST
15651: LIST
15652: LIST
15653: LIST
15654: LIST
15655: LIST
15656: LIST
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: LIST
15662: PUSH
15663: EMPTY
15664: LIST
15665: LIST
15666: ST_TO_ADDR
15667: GO 17350
15669: LD_INT 12
15671: DOUBLE
15672: EQUAL
15673: IFTRUE 15677
15675: GO 15897
15677: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
15678: LD_ADDR_VAR 0 2
15682: PUSH
15683: LD_INT 1
15685: PUSH
15686: LD_INT 2
15688: PUSH
15689: LD_INT 3
15691: PUSH
15692: LD_INT 4
15694: PUSH
15695: LD_INT 5
15697: PUSH
15698: LD_INT 6
15700: PUSH
15701: LD_INT 7
15703: PUSH
15704: LD_INT 8
15706: PUSH
15707: LD_INT 9
15709: PUSH
15710: LD_INT 10
15712: PUSH
15713: LD_INT 11
15715: PUSH
15716: LD_INT 12
15718: PUSH
15719: LD_INT 13
15721: PUSH
15722: LD_INT 14
15724: PUSH
15725: LD_INT 15
15727: PUSH
15728: LD_INT 16
15730: PUSH
15731: LD_INT 17
15733: PUSH
15734: LD_INT 18
15736: PUSH
15737: LD_INT 19
15739: PUSH
15740: LD_INT 20
15742: PUSH
15743: LD_INT 21
15745: PUSH
15746: LD_INT 22
15748: PUSH
15749: LD_INT 23
15751: PUSH
15752: LD_INT 24
15754: PUSH
15755: LD_INT 25
15757: PUSH
15758: LD_INT 26
15760: PUSH
15761: LD_INT 27
15763: PUSH
15764: LD_INT 28
15766: PUSH
15767: LD_INT 30
15769: PUSH
15770: LD_INT 31
15772: PUSH
15773: LD_INT 32
15775: PUSH
15776: LD_INT 33
15778: PUSH
15779: LD_INT 34
15781: PUSH
15782: LD_INT 36
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: LIST
15789: LIST
15790: LIST
15791: LIST
15792: LIST
15793: LIST
15794: LIST
15795: LIST
15796: LIST
15797: LIST
15798: LIST
15799: LIST
15800: LIST
15801: LIST
15802: LIST
15803: LIST
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: LIST
15809: LIST
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: LIST
15815: LIST
15816: LIST
15817: LIST
15818: LIST
15819: LIST
15820: PUSH
15821: LD_INT 101
15823: PUSH
15824: LD_INT 102
15826: PUSH
15827: LD_INT 103
15829: PUSH
15830: LD_INT 104
15832: PUSH
15833: LD_INT 105
15835: PUSH
15836: LD_INT 106
15838: PUSH
15839: LD_INT 107
15841: PUSH
15842: LD_INT 108
15844: PUSH
15845: LD_INT 109
15847: PUSH
15848: LD_INT 110
15850: PUSH
15851: LD_INT 111
15853: PUSH
15854: LD_INT 112
15856: PUSH
15857: LD_INT 113
15859: PUSH
15860: LD_INT 114
15862: PUSH
15863: LD_INT 116
15865: PUSH
15866: LD_INT 117
15868: PUSH
15869: LD_INT 118
15871: PUSH
15872: EMPTY
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: LIST
15878: LIST
15879: LIST
15880: LIST
15881: LIST
15882: LIST
15883: LIST
15884: LIST
15885: LIST
15886: LIST
15887: LIST
15888: LIST
15889: LIST
15890: PUSH
15891: EMPTY
15892: LIST
15893: LIST
15894: ST_TO_ADDR
15895: GO 17350
15897: LD_INT 13
15899: DOUBLE
15900: EQUAL
15901: IFTRUE 15905
15903: GO 16113
15905: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
15906: LD_ADDR_VAR 0 2
15910: PUSH
15911: LD_INT 1
15913: PUSH
15914: LD_INT 2
15916: PUSH
15917: LD_INT 3
15919: PUSH
15920: LD_INT 4
15922: PUSH
15923: LD_INT 5
15925: PUSH
15926: LD_INT 8
15928: PUSH
15929: LD_INT 9
15931: PUSH
15932: LD_INT 10
15934: PUSH
15935: LD_INT 11
15937: PUSH
15938: LD_INT 12
15940: PUSH
15941: LD_INT 14
15943: PUSH
15944: LD_INT 15
15946: PUSH
15947: LD_INT 16
15949: PUSH
15950: LD_INT 17
15952: PUSH
15953: LD_INT 18
15955: PUSH
15956: LD_INT 19
15958: PUSH
15959: LD_INT 20
15961: PUSH
15962: LD_INT 21
15964: PUSH
15965: LD_INT 22
15967: PUSH
15968: LD_INT 23
15970: PUSH
15971: LD_INT 24
15973: PUSH
15974: LD_INT 25
15976: PUSH
15977: LD_INT 26
15979: PUSH
15980: LD_INT 27
15982: PUSH
15983: LD_INT 28
15985: PUSH
15986: LD_INT 30
15988: PUSH
15989: LD_INT 31
15991: PUSH
15992: LD_INT 32
15994: PUSH
15995: LD_INT 33
15997: PUSH
15998: LD_INT 34
16000: PUSH
16001: LD_INT 36
16003: PUSH
16004: EMPTY
16005: LIST
16006: LIST
16007: LIST
16008: LIST
16009: LIST
16010: LIST
16011: LIST
16012: LIST
16013: LIST
16014: LIST
16015: LIST
16016: LIST
16017: LIST
16018: LIST
16019: LIST
16020: LIST
16021: LIST
16022: LIST
16023: LIST
16024: LIST
16025: LIST
16026: LIST
16027: LIST
16028: LIST
16029: LIST
16030: LIST
16031: LIST
16032: LIST
16033: LIST
16034: LIST
16035: LIST
16036: PUSH
16037: LD_INT 101
16039: PUSH
16040: LD_INT 102
16042: PUSH
16043: LD_INT 103
16045: PUSH
16046: LD_INT 104
16048: PUSH
16049: LD_INT 105
16051: PUSH
16052: LD_INT 106
16054: PUSH
16055: LD_INT 107
16057: PUSH
16058: LD_INT 108
16060: PUSH
16061: LD_INT 109
16063: PUSH
16064: LD_INT 110
16066: PUSH
16067: LD_INT 111
16069: PUSH
16070: LD_INT 112
16072: PUSH
16073: LD_INT 113
16075: PUSH
16076: LD_INT 114
16078: PUSH
16079: LD_INT 116
16081: PUSH
16082: LD_INT 117
16084: PUSH
16085: LD_INT 118
16087: PUSH
16088: EMPTY
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: LIST
16096: LIST
16097: LIST
16098: LIST
16099: LIST
16100: LIST
16101: LIST
16102: LIST
16103: LIST
16104: LIST
16105: LIST
16106: PUSH
16107: EMPTY
16108: LIST
16109: LIST
16110: ST_TO_ADDR
16111: GO 17350
16113: LD_INT 14
16115: DOUBLE
16116: EQUAL
16117: IFTRUE 16121
16119: GO 16345
16121: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
16122: LD_ADDR_VAR 0 2
16126: PUSH
16127: LD_INT 1
16129: PUSH
16130: LD_INT 2
16132: PUSH
16133: LD_INT 3
16135: PUSH
16136: LD_INT 4
16138: PUSH
16139: LD_INT 5
16141: PUSH
16142: LD_INT 6
16144: PUSH
16145: LD_INT 7
16147: PUSH
16148: LD_INT 8
16150: PUSH
16151: LD_INT 9
16153: PUSH
16154: LD_INT 10
16156: PUSH
16157: LD_INT 11
16159: PUSH
16160: LD_INT 12
16162: PUSH
16163: LD_INT 13
16165: PUSH
16166: LD_INT 14
16168: PUSH
16169: LD_INT 15
16171: PUSH
16172: LD_INT 16
16174: PUSH
16175: LD_INT 17
16177: PUSH
16178: LD_INT 18
16180: PUSH
16181: LD_INT 19
16183: PUSH
16184: LD_INT 20
16186: PUSH
16187: LD_INT 21
16189: PUSH
16190: LD_INT 22
16192: PUSH
16193: LD_INT 23
16195: PUSH
16196: LD_INT 24
16198: PUSH
16199: LD_INT 25
16201: PUSH
16202: LD_INT 26
16204: PUSH
16205: LD_INT 27
16207: PUSH
16208: LD_INT 28
16210: PUSH
16211: LD_INT 29
16213: PUSH
16214: LD_INT 30
16216: PUSH
16217: LD_INT 31
16219: PUSH
16220: LD_INT 32
16222: PUSH
16223: LD_INT 33
16225: PUSH
16226: LD_INT 34
16228: PUSH
16229: LD_INT 36
16231: PUSH
16232: EMPTY
16233: LIST
16234: LIST
16235: LIST
16236: LIST
16237: LIST
16238: LIST
16239: LIST
16240: LIST
16241: LIST
16242: LIST
16243: LIST
16244: LIST
16245: LIST
16246: LIST
16247: LIST
16248: LIST
16249: LIST
16250: LIST
16251: LIST
16252: LIST
16253: LIST
16254: LIST
16255: LIST
16256: LIST
16257: LIST
16258: LIST
16259: LIST
16260: LIST
16261: LIST
16262: LIST
16263: LIST
16264: LIST
16265: LIST
16266: LIST
16267: LIST
16268: PUSH
16269: LD_INT 101
16271: PUSH
16272: LD_INT 102
16274: PUSH
16275: LD_INT 103
16277: PUSH
16278: LD_INT 104
16280: PUSH
16281: LD_INT 105
16283: PUSH
16284: LD_INT 106
16286: PUSH
16287: LD_INT 107
16289: PUSH
16290: LD_INT 108
16292: PUSH
16293: LD_INT 109
16295: PUSH
16296: LD_INT 110
16298: PUSH
16299: LD_INT 111
16301: PUSH
16302: LD_INT 112
16304: PUSH
16305: LD_INT 113
16307: PUSH
16308: LD_INT 114
16310: PUSH
16311: LD_INT 116
16313: PUSH
16314: LD_INT 117
16316: PUSH
16317: LD_INT 118
16319: PUSH
16320: EMPTY
16321: LIST
16322: LIST
16323: LIST
16324: LIST
16325: LIST
16326: LIST
16327: LIST
16328: LIST
16329: LIST
16330: LIST
16331: LIST
16332: LIST
16333: LIST
16334: LIST
16335: LIST
16336: LIST
16337: LIST
16338: PUSH
16339: EMPTY
16340: LIST
16341: LIST
16342: ST_TO_ADDR
16343: GO 17350
16345: LD_INT 15
16347: DOUBLE
16348: EQUAL
16349: IFTRUE 16353
16351: GO 16577
16353: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
16354: LD_ADDR_VAR 0 2
16358: PUSH
16359: LD_INT 1
16361: PUSH
16362: LD_INT 2
16364: PUSH
16365: LD_INT 3
16367: PUSH
16368: LD_INT 4
16370: PUSH
16371: LD_INT 5
16373: PUSH
16374: LD_INT 6
16376: PUSH
16377: LD_INT 7
16379: PUSH
16380: LD_INT 8
16382: PUSH
16383: LD_INT 9
16385: PUSH
16386: LD_INT 10
16388: PUSH
16389: LD_INT 11
16391: PUSH
16392: LD_INT 12
16394: PUSH
16395: LD_INT 13
16397: PUSH
16398: LD_INT 14
16400: PUSH
16401: LD_INT 15
16403: PUSH
16404: LD_INT 16
16406: PUSH
16407: LD_INT 17
16409: PUSH
16410: LD_INT 18
16412: PUSH
16413: LD_INT 19
16415: PUSH
16416: LD_INT 20
16418: PUSH
16419: LD_INT 21
16421: PUSH
16422: LD_INT 22
16424: PUSH
16425: LD_INT 23
16427: PUSH
16428: LD_INT 24
16430: PUSH
16431: LD_INT 25
16433: PUSH
16434: LD_INT 26
16436: PUSH
16437: LD_INT 27
16439: PUSH
16440: LD_INT 28
16442: PUSH
16443: LD_INT 29
16445: PUSH
16446: LD_INT 30
16448: PUSH
16449: LD_INT 31
16451: PUSH
16452: LD_INT 32
16454: PUSH
16455: LD_INT 33
16457: PUSH
16458: LD_INT 34
16460: PUSH
16461: LD_INT 36
16463: PUSH
16464: EMPTY
16465: LIST
16466: LIST
16467: LIST
16468: LIST
16469: LIST
16470: LIST
16471: LIST
16472: LIST
16473: LIST
16474: LIST
16475: LIST
16476: LIST
16477: LIST
16478: LIST
16479: LIST
16480: LIST
16481: LIST
16482: LIST
16483: LIST
16484: LIST
16485: LIST
16486: LIST
16487: LIST
16488: LIST
16489: LIST
16490: LIST
16491: LIST
16492: LIST
16493: LIST
16494: LIST
16495: LIST
16496: LIST
16497: LIST
16498: LIST
16499: LIST
16500: PUSH
16501: LD_INT 101
16503: PUSH
16504: LD_INT 102
16506: PUSH
16507: LD_INT 103
16509: PUSH
16510: LD_INT 104
16512: PUSH
16513: LD_INT 105
16515: PUSH
16516: LD_INT 106
16518: PUSH
16519: LD_INT 107
16521: PUSH
16522: LD_INT 108
16524: PUSH
16525: LD_INT 109
16527: PUSH
16528: LD_INT 110
16530: PUSH
16531: LD_INT 111
16533: PUSH
16534: LD_INT 112
16536: PUSH
16537: LD_INT 113
16539: PUSH
16540: LD_INT 114
16542: PUSH
16543: LD_INT 116
16545: PUSH
16546: LD_INT 117
16548: PUSH
16549: LD_INT 118
16551: PUSH
16552: EMPTY
16553: LIST
16554: LIST
16555: LIST
16556: LIST
16557: LIST
16558: LIST
16559: LIST
16560: LIST
16561: LIST
16562: LIST
16563: LIST
16564: LIST
16565: LIST
16566: LIST
16567: LIST
16568: LIST
16569: LIST
16570: PUSH
16571: EMPTY
16572: LIST
16573: LIST
16574: ST_TO_ADDR
16575: GO 17350
16577: LD_INT 16
16579: DOUBLE
16580: EQUAL
16581: IFTRUE 16585
16583: GO 16721
16585: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
16586: LD_ADDR_VAR 0 2
16590: PUSH
16591: LD_INT 2
16593: PUSH
16594: LD_INT 4
16596: PUSH
16597: LD_INT 5
16599: PUSH
16600: LD_INT 7
16602: PUSH
16603: LD_INT 11
16605: PUSH
16606: LD_INT 12
16608: PUSH
16609: LD_INT 15
16611: PUSH
16612: LD_INT 16
16614: PUSH
16615: LD_INT 20
16617: PUSH
16618: LD_INT 21
16620: PUSH
16621: LD_INT 22
16623: PUSH
16624: LD_INT 23
16626: PUSH
16627: LD_INT 25
16629: PUSH
16630: LD_INT 26
16632: PUSH
16633: LD_INT 30
16635: PUSH
16636: LD_INT 31
16638: PUSH
16639: LD_INT 32
16641: PUSH
16642: LD_INT 33
16644: PUSH
16645: LD_INT 34
16647: PUSH
16648: EMPTY
16649: LIST
16650: LIST
16651: LIST
16652: LIST
16653: LIST
16654: LIST
16655: LIST
16656: LIST
16657: LIST
16658: LIST
16659: LIST
16660: LIST
16661: LIST
16662: LIST
16663: LIST
16664: LIST
16665: LIST
16666: LIST
16667: LIST
16668: PUSH
16669: LD_INT 101
16671: PUSH
16672: LD_INT 102
16674: PUSH
16675: LD_INT 103
16677: PUSH
16678: LD_INT 106
16680: PUSH
16681: LD_INT 108
16683: PUSH
16684: LD_INT 112
16686: PUSH
16687: LD_INT 113
16689: PUSH
16690: LD_INT 114
16692: PUSH
16693: LD_INT 116
16695: PUSH
16696: LD_INT 117
16698: PUSH
16699: LD_INT 118
16701: PUSH
16702: EMPTY
16703: LIST
16704: LIST
16705: LIST
16706: LIST
16707: LIST
16708: LIST
16709: LIST
16710: LIST
16711: LIST
16712: LIST
16713: LIST
16714: PUSH
16715: EMPTY
16716: LIST
16717: LIST
16718: ST_TO_ADDR
16719: GO 17350
16721: LD_INT 17
16723: DOUBLE
16724: EQUAL
16725: IFTRUE 16729
16727: GO 16953
16729: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
16730: LD_ADDR_VAR 0 2
16734: PUSH
16735: LD_INT 1
16737: PUSH
16738: LD_INT 2
16740: PUSH
16741: LD_INT 3
16743: PUSH
16744: LD_INT 4
16746: PUSH
16747: LD_INT 5
16749: PUSH
16750: LD_INT 6
16752: PUSH
16753: LD_INT 7
16755: PUSH
16756: LD_INT 8
16758: PUSH
16759: LD_INT 9
16761: PUSH
16762: LD_INT 10
16764: PUSH
16765: LD_INT 11
16767: PUSH
16768: LD_INT 12
16770: PUSH
16771: LD_INT 13
16773: PUSH
16774: LD_INT 14
16776: PUSH
16777: LD_INT 15
16779: PUSH
16780: LD_INT 16
16782: PUSH
16783: LD_INT 17
16785: PUSH
16786: LD_INT 18
16788: PUSH
16789: LD_INT 19
16791: PUSH
16792: LD_INT 20
16794: PUSH
16795: LD_INT 21
16797: PUSH
16798: LD_INT 22
16800: PUSH
16801: LD_INT 23
16803: PUSH
16804: LD_INT 24
16806: PUSH
16807: LD_INT 25
16809: PUSH
16810: LD_INT 26
16812: PUSH
16813: LD_INT 27
16815: PUSH
16816: LD_INT 28
16818: PUSH
16819: LD_INT 29
16821: PUSH
16822: LD_INT 30
16824: PUSH
16825: LD_INT 31
16827: PUSH
16828: LD_INT 32
16830: PUSH
16831: LD_INT 33
16833: PUSH
16834: LD_INT 34
16836: PUSH
16837: LD_INT 36
16839: PUSH
16840: EMPTY
16841: LIST
16842: LIST
16843: LIST
16844: LIST
16845: LIST
16846: LIST
16847: LIST
16848: LIST
16849: LIST
16850: LIST
16851: LIST
16852: LIST
16853: LIST
16854: LIST
16855: LIST
16856: LIST
16857: LIST
16858: LIST
16859: LIST
16860: LIST
16861: LIST
16862: LIST
16863: LIST
16864: LIST
16865: LIST
16866: LIST
16867: LIST
16868: LIST
16869: LIST
16870: LIST
16871: LIST
16872: LIST
16873: LIST
16874: LIST
16875: LIST
16876: PUSH
16877: LD_INT 101
16879: PUSH
16880: LD_INT 102
16882: PUSH
16883: LD_INT 103
16885: PUSH
16886: LD_INT 104
16888: PUSH
16889: LD_INT 105
16891: PUSH
16892: LD_INT 106
16894: PUSH
16895: LD_INT 107
16897: PUSH
16898: LD_INT 108
16900: PUSH
16901: LD_INT 109
16903: PUSH
16904: LD_INT 110
16906: PUSH
16907: LD_INT 111
16909: PUSH
16910: LD_INT 112
16912: PUSH
16913: LD_INT 113
16915: PUSH
16916: LD_INT 114
16918: PUSH
16919: LD_INT 116
16921: PUSH
16922: LD_INT 117
16924: PUSH
16925: LD_INT 118
16927: PUSH
16928: EMPTY
16929: LIST
16930: LIST
16931: LIST
16932: LIST
16933: LIST
16934: LIST
16935: LIST
16936: LIST
16937: LIST
16938: LIST
16939: LIST
16940: LIST
16941: LIST
16942: LIST
16943: LIST
16944: LIST
16945: LIST
16946: PUSH
16947: EMPTY
16948: LIST
16949: LIST
16950: ST_TO_ADDR
16951: GO 17350
16953: LD_INT 18
16955: DOUBLE
16956: EQUAL
16957: IFTRUE 16961
16959: GO 17109
16961: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
16962: LD_ADDR_VAR 0 2
16966: PUSH
16967: LD_INT 2
16969: PUSH
16970: LD_INT 4
16972: PUSH
16973: LD_INT 5
16975: PUSH
16976: LD_INT 7
16978: PUSH
16979: LD_INT 11
16981: PUSH
16982: LD_INT 12
16984: PUSH
16985: LD_INT 15
16987: PUSH
16988: LD_INT 16
16990: PUSH
16991: LD_INT 20
16993: PUSH
16994: LD_INT 21
16996: PUSH
16997: LD_INT 22
16999: PUSH
17000: LD_INT 23
17002: PUSH
17003: LD_INT 25
17005: PUSH
17006: LD_INT 26
17008: PUSH
17009: LD_INT 30
17011: PUSH
17012: LD_INT 31
17014: PUSH
17015: LD_INT 32
17017: PUSH
17018: LD_INT 33
17020: PUSH
17021: LD_INT 34
17023: PUSH
17024: LD_INT 35
17026: PUSH
17027: LD_INT 36
17029: PUSH
17030: EMPTY
17031: LIST
17032: LIST
17033: LIST
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: PUSH
17053: LD_INT 101
17055: PUSH
17056: LD_INT 102
17058: PUSH
17059: LD_INT 103
17061: PUSH
17062: LD_INT 106
17064: PUSH
17065: LD_INT 108
17067: PUSH
17068: LD_INT 112
17070: PUSH
17071: LD_INT 113
17073: PUSH
17074: LD_INT 114
17076: PUSH
17077: LD_INT 115
17079: PUSH
17080: LD_INT 116
17082: PUSH
17083: LD_INT 117
17085: PUSH
17086: LD_INT 118
17088: PUSH
17089: EMPTY
17090: LIST
17091: LIST
17092: LIST
17093: LIST
17094: LIST
17095: LIST
17096: LIST
17097: LIST
17098: LIST
17099: LIST
17100: LIST
17101: LIST
17102: PUSH
17103: EMPTY
17104: LIST
17105: LIST
17106: ST_TO_ADDR
17107: GO 17350
17109: LD_INT 19
17111: DOUBLE
17112: EQUAL
17113: IFTRUE 17117
17115: GO 17349
17117: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
17118: LD_ADDR_VAR 0 2
17122: PUSH
17123: LD_INT 1
17125: PUSH
17126: LD_INT 2
17128: PUSH
17129: LD_INT 3
17131: PUSH
17132: LD_INT 4
17134: PUSH
17135: LD_INT 5
17137: PUSH
17138: LD_INT 6
17140: PUSH
17141: LD_INT 7
17143: PUSH
17144: LD_INT 8
17146: PUSH
17147: LD_INT 9
17149: PUSH
17150: LD_INT 10
17152: PUSH
17153: LD_INT 11
17155: PUSH
17156: LD_INT 12
17158: PUSH
17159: LD_INT 13
17161: PUSH
17162: LD_INT 14
17164: PUSH
17165: LD_INT 15
17167: PUSH
17168: LD_INT 16
17170: PUSH
17171: LD_INT 17
17173: PUSH
17174: LD_INT 18
17176: PUSH
17177: LD_INT 19
17179: PUSH
17180: LD_INT 20
17182: PUSH
17183: LD_INT 21
17185: PUSH
17186: LD_INT 22
17188: PUSH
17189: LD_INT 23
17191: PUSH
17192: LD_INT 24
17194: PUSH
17195: LD_INT 25
17197: PUSH
17198: LD_INT 26
17200: PUSH
17201: LD_INT 27
17203: PUSH
17204: LD_INT 28
17206: PUSH
17207: LD_INT 29
17209: PUSH
17210: LD_INT 30
17212: PUSH
17213: LD_INT 31
17215: PUSH
17216: LD_INT 32
17218: PUSH
17219: LD_INT 33
17221: PUSH
17222: LD_INT 34
17224: PUSH
17225: LD_INT 35
17227: PUSH
17228: LD_INT 36
17230: PUSH
17231: EMPTY
17232: LIST
17233: LIST
17234: LIST
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: LIST
17240: LIST
17241: LIST
17242: LIST
17243: LIST
17244: LIST
17245: LIST
17246: LIST
17247: LIST
17248: LIST
17249: LIST
17250: LIST
17251: LIST
17252: LIST
17253: LIST
17254: LIST
17255: LIST
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: LIST
17267: LIST
17268: PUSH
17269: LD_INT 101
17271: PUSH
17272: LD_INT 102
17274: PUSH
17275: LD_INT 103
17277: PUSH
17278: LD_INT 104
17280: PUSH
17281: LD_INT 105
17283: PUSH
17284: LD_INT 106
17286: PUSH
17287: LD_INT 107
17289: PUSH
17290: LD_INT 108
17292: PUSH
17293: LD_INT 109
17295: PUSH
17296: LD_INT 110
17298: PUSH
17299: LD_INT 111
17301: PUSH
17302: LD_INT 112
17304: PUSH
17305: LD_INT 113
17307: PUSH
17308: LD_INT 114
17310: PUSH
17311: LD_INT 115
17313: PUSH
17314: LD_INT 116
17316: PUSH
17317: LD_INT 117
17319: PUSH
17320: LD_INT 118
17322: PUSH
17323: EMPTY
17324: LIST
17325: LIST
17326: LIST
17327: LIST
17328: LIST
17329: LIST
17330: LIST
17331: LIST
17332: LIST
17333: LIST
17334: LIST
17335: LIST
17336: LIST
17337: LIST
17338: LIST
17339: LIST
17340: LIST
17341: LIST
17342: PUSH
17343: EMPTY
17344: LIST
17345: LIST
17346: ST_TO_ADDR
17347: GO 17350
17349: POP
// end else
17350: GO 17581
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
17352: LD_ADDR_VAR 0 2
17356: PUSH
17357: LD_INT 1
17359: PUSH
17360: LD_INT 2
17362: PUSH
17363: LD_INT 3
17365: PUSH
17366: LD_INT 4
17368: PUSH
17369: LD_INT 5
17371: PUSH
17372: LD_INT 6
17374: PUSH
17375: LD_INT 7
17377: PUSH
17378: LD_INT 8
17380: PUSH
17381: LD_INT 9
17383: PUSH
17384: LD_INT 10
17386: PUSH
17387: LD_INT 11
17389: PUSH
17390: LD_INT 12
17392: PUSH
17393: LD_INT 13
17395: PUSH
17396: LD_INT 14
17398: PUSH
17399: LD_INT 15
17401: PUSH
17402: LD_INT 16
17404: PUSH
17405: LD_INT 17
17407: PUSH
17408: LD_INT 18
17410: PUSH
17411: LD_INT 19
17413: PUSH
17414: LD_INT 20
17416: PUSH
17417: LD_INT 21
17419: PUSH
17420: LD_INT 22
17422: PUSH
17423: LD_INT 23
17425: PUSH
17426: LD_INT 24
17428: PUSH
17429: LD_INT 25
17431: PUSH
17432: LD_INT 26
17434: PUSH
17435: LD_INT 27
17437: PUSH
17438: LD_INT 28
17440: PUSH
17441: LD_INT 29
17443: PUSH
17444: LD_INT 30
17446: PUSH
17447: LD_INT 31
17449: PUSH
17450: LD_INT 32
17452: PUSH
17453: LD_INT 33
17455: PUSH
17456: LD_INT 34
17458: PUSH
17459: LD_INT 35
17461: PUSH
17462: LD_INT 36
17464: PUSH
17465: EMPTY
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: LIST
17481: LIST
17482: LIST
17483: LIST
17484: LIST
17485: LIST
17486: LIST
17487: LIST
17488: LIST
17489: LIST
17490: LIST
17491: LIST
17492: LIST
17493: LIST
17494: LIST
17495: LIST
17496: LIST
17497: LIST
17498: LIST
17499: LIST
17500: LIST
17501: LIST
17502: PUSH
17503: LD_INT 101
17505: PUSH
17506: LD_INT 102
17508: PUSH
17509: LD_INT 103
17511: PUSH
17512: LD_INT 104
17514: PUSH
17515: LD_INT 105
17517: PUSH
17518: LD_INT 106
17520: PUSH
17521: LD_INT 107
17523: PUSH
17524: LD_INT 108
17526: PUSH
17527: LD_INT 109
17529: PUSH
17530: LD_INT 110
17532: PUSH
17533: LD_INT 111
17535: PUSH
17536: LD_INT 112
17538: PUSH
17539: LD_INT 113
17541: PUSH
17542: LD_INT 114
17544: PUSH
17545: LD_INT 115
17547: PUSH
17548: LD_INT 116
17550: PUSH
17551: LD_INT 117
17553: PUSH
17554: LD_INT 118
17556: PUSH
17557: EMPTY
17558: LIST
17559: LIST
17560: LIST
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: LIST
17566: LIST
17567: LIST
17568: LIST
17569: LIST
17570: LIST
17571: LIST
17572: LIST
17573: LIST
17574: LIST
17575: LIST
17576: PUSH
17577: EMPTY
17578: LIST
17579: LIST
17580: ST_TO_ADDR
// if result then
17581: LD_VAR 0 2
17585: IFFALSE 18371
// begin normal :=  ;
17587: LD_ADDR_VAR 0 5
17591: PUSH
17592: LD_STRING 
17594: ST_TO_ADDR
// hardcore :=  ;
17595: LD_ADDR_VAR 0 6
17599: PUSH
17600: LD_STRING 
17602: ST_TO_ADDR
// active :=  ;
17603: LD_ADDR_VAR 0 7
17607: PUSH
17608: LD_STRING 
17610: ST_TO_ADDR
// for i = 1 to normalCounter do
17611: LD_ADDR_VAR 0 8
17615: PUSH
17616: DOUBLE
17617: LD_INT 1
17619: DEC
17620: ST_TO_ADDR
17621: LD_EXP 23
17625: PUSH
17626: FOR_TO
17627: IFFALSE 17728
// begin tmp := 0 ;
17629: LD_ADDR_VAR 0 3
17633: PUSH
17634: LD_STRING 0
17636: ST_TO_ADDR
// if result [ 1 ] then
17637: LD_VAR 0 2
17641: PUSH
17642: LD_INT 1
17644: ARRAY
17645: IFFALSE 17710
// if result [ 1 ] [ 1 ] = i then
17647: LD_VAR 0 2
17651: PUSH
17652: LD_INT 1
17654: ARRAY
17655: PUSH
17656: LD_INT 1
17658: ARRAY
17659: PUSH
17660: LD_VAR 0 8
17664: EQUAL
17665: IFFALSE 17710
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
17667: LD_ADDR_VAR 0 2
17671: PUSH
17672: LD_VAR 0 2
17676: PPUSH
17677: LD_INT 1
17679: PPUSH
17680: LD_VAR 0 2
17684: PUSH
17685: LD_INT 1
17687: ARRAY
17688: PPUSH
17689: LD_INT 1
17691: PPUSH
17692: CALL_OW 3
17696: PPUSH
17697: CALL_OW 1
17701: ST_TO_ADDR
// tmp := 1 ;
17702: LD_ADDR_VAR 0 3
17706: PUSH
17707: LD_STRING 1
17709: ST_TO_ADDR
// end ; normal := normal & tmp ;
17710: LD_ADDR_VAR 0 5
17714: PUSH
17715: LD_VAR 0 5
17719: PUSH
17720: LD_VAR 0 3
17724: STR
17725: ST_TO_ADDR
// end ;
17726: GO 17626
17728: POP
17729: POP
// for i = 1 to hardcoreCounter do
17730: LD_ADDR_VAR 0 8
17734: PUSH
17735: DOUBLE
17736: LD_INT 1
17738: DEC
17739: ST_TO_ADDR
17740: LD_EXP 24
17744: PUSH
17745: FOR_TO
17746: IFFALSE 17851
// begin tmp := 0 ;
17748: LD_ADDR_VAR 0 3
17752: PUSH
17753: LD_STRING 0
17755: ST_TO_ADDR
// if result [ 2 ] then
17756: LD_VAR 0 2
17760: PUSH
17761: LD_INT 2
17763: ARRAY
17764: IFFALSE 17833
// if result [ 2 ] [ 1 ] = 100 + i then
17766: LD_VAR 0 2
17770: PUSH
17771: LD_INT 2
17773: ARRAY
17774: PUSH
17775: LD_INT 1
17777: ARRAY
17778: PUSH
17779: LD_INT 100
17781: PUSH
17782: LD_VAR 0 8
17786: PLUS
17787: EQUAL
17788: IFFALSE 17833
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
17790: LD_ADDR_VAR 0 2
17794: PUSH
17795: LD_VAR 0 2
17799: PPUSH
17800: LD_INT 2
17802: PPUSH
17803: LD_VAR 0 2
17807: PUSH
17808: LD_INT 2
17810: ARRAY
17811: PPUSH
17812: LD_INT 1
17814: PPUSH
17815: CALL_OW 3
17819: PPUSH
17820: CALL_OW 1
17824: ST_TO_ADDR
// tmp := 1 ;
17825: LD_ADDR_VAR 0 3
17829: PUSH
17830: LD_STRING 1
17832: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
17833: LD_ADDR_VAR 0 6
17837: PUSH
17838: LD_VAR 0 6
17842: PUSH
17843: LD_VAR 0 3
17847: STR
17848: ST_TO_ADDR
// end ;
17849: GO 17745
17851: POP
17852: POP
// if isGameLoad then
17853: LD_VAR 0 1
17857: IFFALSE 18332
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
17859: LD_ADDR_VAR 0 4
17863: PUSH
17864: LD_EXP 27
17868: PUSH
17869: LD_EXP 26
17873: PUSH
17874: LD_EXP 28
17878: PUSH
17879: LD_EXP 25
17883: PUSH
17884: LD_EXP 29
17888: PUSH
17889: LD_EXP 30
17893: PUSH
17894: LD_EXP 31
17898: PUSH
17899: LD_EXP 32
17903: PUSH
17904: LD_EXP 33
17908: PUSH
17909: LD_EXP 34
17913: PUSH
17914: LD_EXP 35
17918: PUSH
17919: LD_EXP 36
17923: PUSH
17924: LD_EXP 37
17928: PUSH
17929: LD_EXP 38
17933: PUSH
17934: LD_EXP 46
17938: PUSH
17939: LD_EXP 47
17943: PUSH
17944: LD_EXP 48
17948: PUSH
17949: LD_EXP 49
17953: PUSH
17954: LD_EXP 51
17958: PUSH
17959: LD_EXP 52
17963: PUSH
17964: LD_EXP 53
17968: PUSH
17969: LD_EXP 56
17973: PUSH
17974: LD_EXP 58
17978: PUSH
17979: LD_EXP 59
17983: PUSH
17984: LD_EXP 60
17988: PUSH
17989: LD_EXP 62
17993: PUSH
17994: LD_EXP 63
17998: PUSH
17999: LD_EXP 66
18003: PUSH
18004: LD_EXP 67
18008: PUSH
18009: LD_EXP 68
18013: PUSH
18014: LD_EXP 69
18018: PUSH
18019: LD_EXP 70
18023: PUSH
18024: LD_EXP 71
18028: PUSH
18029: LD_EXP 72
18033: PUSH
18034: LD_EXP 73
18038: PUSH
18039: LD_EXP 74
18043: PUSH
18044: LD_EXP 39
18048: PUSH
18049: LD_EXP 40
18053: PUSH
18054: LD_EXP 43
18058: PUSH
18059: LD_EXP 44
18063: PUSH
18064: LD_EXP 45
18068: PUSH
18069: LD_EXP 41
18073: PUSH
18074: LD_EXP 42
18078: PUSH
18079: LD_EXP 50
18083: PUSH
18084: LD_EXP 54
18088: PUSH
18089: LD_EXP 55
18093: PUSH
18094: LD_EXP 57
18098: PUSH
18099: LD_EXP 61
18103: PUSH
18104: LD_EXP 64
18108: PUSH
18109: LD_EXP 65
18113: PUSH
18114: LD_EXP 75
18118: PUSH
18119: LD_EXP 76
18123: PUSH
18124: LD_EXP 77
18128: PUSH
18129: LD_EXP 78
18133: PUSH
18134: EMPTY
18135: LIST
18136: LIST
18137: LIST
18138: LIST
18139: LIST
18140: LIST
18141: LIST
18142: LIST
18143: LIST
18144: LIST
18145: LIST
18146: LIST
18147: LIST
18148: LIST
18149: LIST
18150: LIST
18151: LIST
18152: LIST
18153: LIST
18154: LIST
18155: LIST
18156: LIST
18157: LIST
18158: LIST
18159: LIST
18160: LIST
18161: LIST
18162: LIST
18163: LIST
18164: LIST
18165: LIST
18166: LIST
18167: LIST
18168: LIST
18169: LIST
18170: LIST
18171: LIST
18172: LIST
18173: LIST
18174: LIST
18175: LIST
18176: LIST
18177: LIST
18178: LIST
18179: LIST
18180: LIST
18181: LIST
18182: LIST
18183: LIST
18184: LIST
18185: LIST
18186: LIST
18187: LIST
18188: LIST
18189: ST_TO_ADDR
// tmp :=  ;
18190: LD_ADDR_VAR 0 3
18194: PUSH
18195: LD_STRING 
18197: ST_TO_ADDR
// for i = 1 to normalCounter do
18198: LD_ADDR_VAR 0 8
18202: PUSH
18203: DOUBLE
18204: LD_INT 1
18206: DEC
18207: ST_TO_ADDR
18208: LD_EXP 23
18212: PUSH
18213: FOR_TO
18214: IFFALSE 18250
// begin if flags [ i ] then
18216: LD_VAR 0 4
18220: PUSH
18221: LD_VAR 0 8
18225: ARRAY
18226: IFFALSE 18248
// tmp := tmp & i & ; ;
18228: LD_ADDR_VAR 0 3
18232: PUSH
18233: LD_VAR 0 3
18237: PUSH
18238: LD_VAR 0 8
18242: STR
18243: PUSH
18244: LD_STRING ;
18246: STR
18247: ST_TO_ADDR
// end ;
18248: GO 18213
18250: POP
18251: POP
// for i = 1 to hardcoreCounter do
18252: LD_ADDR_VAR 0 8
18256: PUSH
18257: DOUBLE
18258: LD_INT 1
18260: DEC
18261: ST_TO_ADDR
18262: LD_EXP 24
18266: PUSH
18267: FOR_TO
18268: IFFALSE 18314
// begin if flags [ normalCounter + i ] then
18270: LD_VAR 0 4
18274: PUSH
18275: LD_EXP 23
18279: PUSH
18280: LD_VAR 0 8
18284: PLUS
18285: ARRAY
18286: IFFALSE 18312
// tmp := tmp & ( 100 + i ) & ; ;
18288: LD_ADDR_VAR 0 3
18292: PUSH
18293: LD_VAR 0 3
18297: PUSH
18298: LD_INT 100
18300: PUSH
18301: LD_VAR 0 8
18305: PLUS
18306: STR
18307: PUSH
18308: LD_STRING ;
18310: STR
18311: ST_TO_ADDR
// end ;
18312: GO 18267
18314: POP
18315: POP
// if tmp then
18316: LD_VAR 0 3
18320: IFFALSE 18332
// active := tmp ;
18322: LD_ADDR_VAR 0 7
18326: PUSH
18327: LD_VAR 0 3
18331: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
18332: LD_STRING getStreamItemsFromMission("
18334: PUSH
18335: LD_VAR 0 5
18339: STR
18340: PUSH
18341: LD_STRING ","
18343: STR
18344: PUSH
18345: LD_VAR 0 6
18349: STR
18350: PUSH
18351: LD_STRING ","
18353: STR
18354: PUSH
18355: LD_VAR 0 7
18359: STR
18360: PUSH
18361: LD_STRING ")
18363: STR
18364: PPUSH
18365: CALL_OW 559
// end else
18369: GO 18378
// ToLua ( getStreamItemsFromMission("","","") ) ;
18371: LD_STRING getStreamItemsFromMission("","","")
18373: PPUSH
18374: CALL_OW 559
// end ;
18378: LD_VAR 0 2
18382: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
18383: LD_EXP 22
18387: PUSH
18388: LD_EXP 27
18392: AND
18393: IFFALSE 18517
18395: GO 18397
18397: DISABLE
18398: LD_INT 0
18400: PPUSH
18401: PPUSH
// begin enable ;
18402: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
18403: LD_ADDR_VAR 0 2
18407: PUSH
18408: LD_INT 22
18410: PUSH
18411: LD_OWVAR 2
18415: PUSH
18416: EMPTY
18417: LIST
18418: LIST
18419: PUSH
18420: LD_INT 2
18422: PUSH
18423: LD_INT 34
18425: PUSH
18426: LD_INT 7
18428: PUSH
18429: EMPTY
18430: LIST
18431: LIST
18432: PUSH
18433: LD_INT 34
18435: PUSH
18436: LD_INT 45
18438: PUSH
18439: EMPTY
18440: LIST
18441: LIST
18442: PUSH
18443: LD_INT 34
18445: PUSH
18446: LD_INT 28
18448: PUSH
18449: EMPTY
18450: LIST
18451: LIST
18452: PUSH
18453: LD_INT 34
18455: PUSH
18456: LD_INT 47
18458: PUSH
18459: EMPTY
18460: LIST
18461: LIST
18462: PUSH
18463: EMPTY
18464: LIST
18465: LIST
18466: LIST
18467: LIST
18468: LIST
18469: PUSH
18470: EMPTY
18471: LIST
18472: LIST
18473: PPUSH
18474: CALL_OW 69
18478: ST_TO_ADDR
// if not tmp then
18479: LD_VAR 0 2
18483: NOT
18484: IFFALSE 18488
// exit ;
18486: GO 18517
// for i in tmp do
18488: LD_ADDR_VAR 0 1
18492: PUSH
18493: LD_VAR 0 2
18497: PUSH
18498: FOR_IN
18499: IFFALSE 18515
// begin SetLives ( i , 0 ) ;
18501: LD_VAR 0 1
18505: PPUSH
18506: LD_INT 0
18508: PPUSH
18509: CALL_OW 234
// end ;
18513: GO 18498
18515: POP
18516: POP
// end ;
18517: PPOPN 2
18519: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
18520: LD_EXP 22
18524: PUSH
18525: LD_EXP 28
18529: AND
18530: IFFALSE 18614
18532: GO 18534
18534: DISABLE
18535: LD_INT 0
18537: PPUSH
18538: PPUSH
// begin enable ;
18539: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
18540: LD_ADDR_VAR 0 2
18544: PUSH
18545: LD_INT 22
18547: PUSH
18548: LD_OWVAR 2
18552: PUSH
18553: EMPTY
18554: LIST
18555: LIST
18556: PUSH
18557: LD_INT 32
18559: PUSH
18560: LD_INT 3
18562: PUSH
18563: EMPTY
18564: LIST
18565: LIST
18566: PUSH
18567: EMPTY
18568: LIST
18569: LIST
18570: PPUSH
18571: CALL_OW 69
18575: ST_TO_ADDR
// if not tmp then
18576: LD_VAR 0 2
18580: NOT
18581: IFFALSE 18585
// exit ;
18583: GO 18614
// for i in tmp do
18585: LD_ADDR_VAR 0 1
18589: PUSH
18590: LD_VAR 0 2
18594: PUSH
18595: FOR_IN
18596: IFFALSE 18612
// begin SetLives ( i , 0 ) ;
18598: LD_VAR 0 1
18602: PPUSH
18603: LD_INT 0
18605: PPUSH
18606: CALL_OW 234
// end ;
18610: GO 18595
18612: POP
18613: POP
// end ;
18614: PPOPN 2
18616: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
18617: LD_EXP 22
18621: PUSH
18622: LD_EXP 25
18626: AND
18627: IFFALSE 18720
18629: GO 18631
18631: DISABLE
18632: LD_INT 0
18634: PPUSH
// begin enable ;
18635: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
18636: LD_ADDR_VAR 0 1
18640: PUSH
18641: LD_INT 22
18643: PUSH
18644: LD_OWVAR 2
18648: PUSH
18649: EMPTY
18650: LIST
18651: LIST
18652: PUSH
18653: LD_INT 2
18655: PUSH
18656: LD_INT 25
18658: PUSH
18659: LD_INT 5
18661: PUSH
18662: EMPTY
18663: LIST
18664: LIST
18665: PUSH
18666: LD_INT 25
18668: PUSH
18669: LD_INT 9
18671: PUSH
18672: EMPTY
18673: LIST
18674: LIST
18675: PUSH
18676: LD_INT 25
18678: PUSH
18679: LD_INT 8
18681: PUSH
18682: EMPTY
18683: LIST
18684: LIST
18685: PUSH
18686: EMPTY
18687: LIST
18688: LIST
18689: LIST
18690: LIST
18691: PUSH
18692: EMPTY
18693: LIST
18694: LIST
18695: PPUSH
18696: CALL_OW 69
18700: PUSH
18701: FOR_IN
18702: IFFALSE 18718
// begin SetClass ( i , 1 ) ;
18704: LD_VAR 0 1
18708: PPUSH
18709: LD_INT 1
18711: PPUSH
18712: CALL_OW 336
// end ;
18716: GO 18701
18718: POP
18719: POP
// end ;
18720: PPOPN 1
18722: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
18723: LD_EXP 22
18727: PUSH
18728: LD_EXP 26
18732: AND
18733: PUSH
18734: LD_OWVAR 65
18738: PUSH
18739: LD_INT 7
18741: LESS
18742: AND
18743: IFFALSE 18757
18745: GO 18747
18747: DISABLE
// begin enable ;
18748: ENABLE
// game_speed := 7 ;
18749: LD_ADDR_OWVAR 65
18753: PUSH
18754: LD_INT 7
18756: ST_TO_ADDR
// end ;
18757: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
18758: LD_EXP 22
18762: PUSH
18763: LD_EXP 29
18767: AND
18768: IFFALSE 18970
18770: GO 18772
18772: DISABLE
18773: LD_INT 0
18775: PPUSH
18776: PPUSH
18777: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18778: LD_ADDR_VAR 0 3
18782: PUSH
18783: LD_INT 81
18785: PUSH
18786: LD_OWVAR 2
18790: PUSH
18791: EMPTY
18792: LIST
18793: LIST
18794: PUSH
18795: LD_INT 21
18797: PUSH
18798: LD_INT 1
18800: PUSH
18801: EMPTY
18802: LIST
18803: LIST
18804: PUSH
18805: EMPTY
18806: LIST
18807: LIST
18808: PPUSH
18809: CALL_OW 69
18813: ST_TO_ADDR
// if not tmp then
18814: LD_VAR 0 3
18818: NOT
18819: IFFALSE 18823
// exit ;
18821: GO 18970
// if tmp > 5 then
18823: LD_VAR 0 3
18827: PUSH
18828: LD_INT 5
18830: GREATER
18831: IFFALSE 18843
// k := 5 else
18833: LD_ADDR_VAR 0 2
18837: PUSH
18838: LD_INT 5
18840: ST_TO_ADDR
18841: GO 18853
// k := tmp ;
18843: LD_ADDR_VAR 0 2
18847: PUSH
18848: LD_VAR 0 3
18852: ST_TO_ADDR
// for i := 1 to k do
18853: LD_ADDR_VAR 0 1
18857: PUSH
18858: DOUBLE
18859: LD_INT 1
18861: DEC
18862: ST_TO_ADDR
18863: LD_VAR 0 2
18867: PUSH
18868: FOR_TO
18869: IFFALSE 18968
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
18871: LD_VAR 0 3
18875: PUSH
18876: LD_VAR 0 1
18880: ARRAY
18881: PPUSH
18882: LD_VAR 0 1
18886: PUSH
18887: LD_INT 4
18889: MOD
18890: PUSH
18891: LD_INT 1
18893: PLUS
18894: PPUSH
18895: CALL_OW 259
18899: PUSH
18900: LD_INT 10
18902: LESS
18903: IFFALSE 18966
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
18905: LD_VAR 0 3
18909: PUSH
18910: LD_VAR 0 1
18914: ARRAY
18915: PPUSH
18916: LD_VAR 0 1
18920: PUSH
18921: LD_INT 4
18923: MOD
18924: PUSH
18925: LD_INT 1
18927: PLUS
18928: PPUSH
18929: LD_VAR 0 3
18933: PUSH
18934: LD_VAR 0 1
18938: ARRAY
18939: PPUSH
18940: LD_VAR 0 1
18944: PUSH
18945: LD_INT 4
18947: MOD
18948: PUSH
18949: LD_INT 1
18951: PLUS
18952: PPUSH
18953: CALL_OW 259
18957: PUSH
18958: LD_INT 1
18960: PLUS
18961: PPUSH
18962: CALL_OW 237
18966: GO 18868
18968: POP
18969: POP
// end ;
18970: PPOPN 3
18972: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
18973: LD_EXP 22
18977: PUSH
18978: LD_EXP 30
18982: AND
18983: IFFALSE 19003
18985: GO 18987
18987: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
18988: LD_INT 4
18990: PPUSH
18991: LD_OWVAR 2
18995: PPUSH
18996: LD_INT 0
18998: PPUSH
18999: CALL_OW 324
19003: END
// every 0 0$1 trigger StreamModeActive and sShovel do
19004: LD_EXP 22
19008: PUSH
19009: LD_EXP 59
19013: AND
19014: IFFALSE 19034
19016: GO 19018
19018: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
19019: LD_INT 19
19021: PPUSH
19022: LD_OWVAR 2
19026: PPUSH
19027: LD_INT 0
19029: PPUSH
19030: CALL_OW 324
19034: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
19035: LD_EXP 22
19039: PUSH
19040: LD_EXP 31
19044: AND
19045: IFFALSE 19147
19047: GO 19049
19049: DISABLE
19050: LD_INT 0
19052: PPUSH
19053: PPUSH
// begin enable ;
19054: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
19055: LD_ADDR_VAR 0 2
19059: PUSH
19060: LD_INT 22
19062: PUSH
19063: LD_OWVAR 2
19067: PUSH
19068: EMPTY
19069: LIST
19070: LIST
19071: PUSH
19072: LD_INT 2
19074: PUSH
19075: LD_INT 34
19077: PUSH
19078: LD_INT 11
19080: PUSH
19081: EMPTY
19082: LIST
19083: LIST
19084: PUSH
19085: LD_INT 34
19087: PUSH
19088: LD_INT 30
19090: PUSH
19091: EMPTY
19092: LIST
19093: LIST
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: LIST
19099: PUSH
19100: EMPTY
19101: LIST
19102: LIST
19103: PPUSH
19104: CALL_OW 69
19108: ST_TO_ADDR
// if not tmp then
19109: LD_VAR 0 2
19113: NOT
19114: IFFALSE 19118
// exit ;
19116: GO 19147
// for i in tmp do
19118: LD_ADDR_VAR 0 1
19122: PUSH
19123: LD_VAR 0 2
19127: PUSH
19128: FOR_IN
19129: IFFALSE 19145
// begin SetLives ( i , 0 ) ;
19131: LD_VAR 0 1
19135: PPUSH
19136: LD_INT 0
19138: PPUSH
19139: CALL_OW 234
// end ;
19143: GO 19128
19145: POP
19146: POP
// end ;
19147: PPOPN 2
19149: END
// every 0 0$1 trigger StreamModeActive and sBunker do
19150: LD_EXP 22
19154: PUSH
19155: LD_EXP 32
19159: AND
19160: IFFALSE 19180
19162: GO 19164
19164: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
19165: LD_INT 32
19167: PPUSH
19168: LD_OWVAR 2
19172: PPUSH
19173: LD_INT 0
19175: PPUSH
19176: CALL_OW 324
19180: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
19181: LD_EXP 22
19185: PUSH
19186: LD_EXP 33
19190: AND
19191: IFFALSE 19372
19193: GO 19195
19195: DISABLE
19196: LD_INT 0
19198: PPUSH
19199: PPUSH
19200: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
19201: LD_ADDR_VAR 0 2
19205: PUSH
19206: LD_INT 22
19208: PUSH
19209: LD_OWVAR 2
19213: PUSH
19214: EMPTY
19215: LIST
19216: LIST
19217: PUSH
19218: LD_INT 33
19220: PUSH
19221: LD_INT 3
19223: PUSH
19224: EMPTY
19225: LIST
19226: LIST
19227: PUSH
19228: EMPTY
19229: LIST
19230: LIST
19231: PPUSH
19232: CALL_OW 69
19236: ST_TO_ADDR
// if not tmp then
19237: LD_VAR 0 2
19241: NOT
19242: IFFALSE 19246
// exit ;
19244: GO 19372
// side := 0 ;
19246: LD_ADDR_VAR 0 3
19250: PUSH
19251: LD_INT 0
19253: ST_TO_ADDR
// for i := 1 to 8 do
19254: LD_ADDR_VAR 0 1
19258: PUSH
19259: DOUBLE
19260: LD_INT 1
19262: DEC
19263: ST_TO_ADDR
19264: LD_INT 8
19266: PUSH
19267: FOR_TO
19268: IFFALSE 19316
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
19270: LD_OWVAR 2
19274: PUSH
19275: LD_VAR 0 1
19279: NONEQUAL
19280: PUSH
19281: LD_OWVAR 2
19285: PPUSH
19286: LD_VAR 0 1
19290: PPUSH
19291: CALL_OW 81
19295: PUSH
19296: LD_INT 2
19298: EQUAL
19299: AND
19300: IFFALSE 19314
// begin side := i ;
19302: LD_ADDR_VAR 0 3
19306: PUSH
19307: LD_VAR 0 1
19311: ST_TO_ADDR
// break ;
19312: GO 19316
// end ;
19314: GO 19267
19316: POP
19317: POP
// if not side then
19318: LD_VAR 0 3
19322: NOT
19323: IFFALSE 19327
// exit ;
19325: GO 19372
// for i := 1 to tmp do
19327: LD_ADDR_VAR 0 1
19331: PUSH
19332: DOUBLE
19333: LD_INT 1
19335: DEC
19336: ST_TO_ADDR
19337: LD_VAR 0 2
19341: PUSH
19342: FOR_TO
19343: IFFALSE 19370
// if Prob ( 60 ) then
19345: LD_INT 60
19347: PPUSH
19348: CALL_OW 13
19352: IFFALSE 19368
// SetSide ( i , side ) ;
19354: LD_VAR 0 1
19358: PPUSH
19359: LD_VAR 0 3
19363: PPUSH
19364: CALL_OW 235
19368: GO 19342
19370: POP
19371: POP
// end ;
19372: PPOPN 3
19374: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
19375: LD_EXP 22
19379: PUSH
19380: LD_EXP 35
19384: AND
19385: IFFALSE 19504
19387: GO 19389
19389: DISABLE
19390: LD_INT 0
19392: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
19393: LD_ADDR_VAR 0 1
19397: PUSH
19398: LD_INT 22
19400: PUSH
19401: LD_OWVAR 2
19405: PUSH
19406: EMPTY
19407: LIST
19408: LIST
19409: PUSH
19410: LD_INT 21
19412: PUSH
19413: LD_INT 1
19415: PUSH
19416: EMPTY
19417: LIST
19418: LIST
19419: PUSH
19420: LD_INT 3
19422: PUSH
19423: LD_INT 23
19425: PUSH
19426: LD_INT 0
19428: PUSH
19429: EMPTY
19430: LIST
19431: LIST
19432: PUSH
19433: EMPTY
19434: LIST
19435: LIST
19436: PUSH
19437: EMPTY
19438: LIST
19439: LIST
19440: LIST
19441: PPUSH
19442: CALL_OW 69
19446: PUSH
19447: FOR_IN
19448: IFFALSE 19502
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
19450: LD_VAR 0 1
19454: PPUSH
19455: CALL_OW 257
19459: PUSH
19460: LD_INT 1
19462: PUSH
19463: LD_INT 2
19465: PUSH
19466: LD_INT 3
19468: PUSH
19469: LD_INT 4
19471: PUSH
19472: EMPTY
19473: LIST
19474: LIST
19475: LIST
19476: LIST
19477: IN
19478: IFFALSE 19500
// SetClass ( un , rand ( 1 , 4 ) ) ;
19480: LD_VAR 0 1
19484: PPUSH
19485: LD_INT 1
19487: PPUSH
19488: LD_INT 4
19490: PPUSH
19491: CALL_OW 12
19495: PPUSH
19496: CALL_OW 336
19500: GO 19447
19502: POP
19503: POP
// end ;
19504: PPOPN 1
19506: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
19507: LD_EXP 22
19511: PUSH
19512: LD_EXP 34
19516: AND
19517: IFFALSE 19596
19519: GO 19521
19521: DISABLE
19522: LD_INT 0
19524: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19525: LD_ADDR_VAR 0 1
19529: PUSH
19530: LD_INT 22
19532: PUSH
19533: LD_OWVAR 2
19537: PUSH
19538: EMPTY
19539: LIST
19540: LIST
19541: PUSH
19542: LD_INT 21
19544: PUSH
19545: LD_INT 3
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: PUSH
19552: EMPTY
19553: LIST
19554: LIST
19555: PPUSH
19556: CALL_OW 69
19560: ST_TO_ADDR
// if not tmp then
19561: LD_VAR 0 1
19565: NOT
19566: IFFALSE 19570
// exit ;
19568: GO 19596
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
19570: LD_VAR 0 1
19574: PUSH
19575: LD_INT 1
19577: PPUSH
19578: LD_VAR 0 1
19582: PPUSH
19583: CALL_OW 12
19587: ARRAY
19588: PPUSH
19589: LD_INT 100
19591: PPUSH
19592: CALL_OW 234
// end ;
19596: PPOPN 1
19598: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
19599: LD_EXP 22
19603: PUSH
19604: LD_EXP 36
19608: AND
19609: IFFALSE 19707
19611: GO 19613
19613: DISABLE
19614: LD_INT 0
19616: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19617: LD_ADDR_VAR 0 1
19621: PUSH
19622: LD_INT 22
19624: PUSH
19625: LD_OWVAR 2
19629: PUSH
19630: EMPTY
19631: LIST
19632: LIST
19633: PUSH
19634: LD_INT 21
19636: PUSH
19637: LD_INT 1
19639: PUSH
19640: EMPTY
19641: LIST
19642: LIST
19643: PUSH
19644: EMPTY
19645: LIST
19646: LIST
19647: PPUSH
19648: CALL_OW 69
19652: ST_TO_ADDR
// if not tmp then
19653: LD_VAR 0 1
19657: NOT
19658: IFFALSE 19662
// exit ;
19660: GO 19707
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
19662: LD_VAR 0 1
19666: PUSH
19667: LD_INT 1
19669: PPUSH
19670: LD_VAR 0 1
19674: PPUSH
19675: CALL_OW 12
19679: ARRAY
19680: PPUSH
19681: LD_INT 1
19683: PPUSH
19684: LD_INT 4
19686: PPUSH
19687: CALL_OW 12
19691: PPUSH
19692: LD_INT 3000
19694: PPUSH
19695: LD_INT 9000
19697: PPUSH
19698: CALL_OW 12
19702: PPUSH
19703: CALL_OW 492
// end ;
19707: PPOPN 1
19709: END
// every 0 0$1 trigger StreamModeActive and sDepot do
19710: LD_EXP 22
19714: PUSH
19715: LD_EXP 37
19719: AND
19720: IFFALSE 19740
19722: GO 19724
19724: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
19725: LD_INT 1
19727: PPUSH
19728: LD_OWVAR 2
19732: PPUSH
19733: LD_INT 0
19735: PPUSH
19736: CALL_OW 324
19740: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
19741: LD_EXP 22
19745: PUSH
19746: LD_EXP 38
19750: AND
19751: IFFALSE 19834
19753: GO 19755
19755: DISABLE
19756: LD_INT 0
19758: PPUSH
19759: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19760: LD_ADDR_VAR 0 2
19764: PUSH
19765: LD_INT 22
19767: PUSH
19768: LD_OWVAR 2
19772: PUSH
19773: EMPTY
19774: LIST
19775: LIST
19776: PUSH
19777: LD_INT 21
19779: PUSH
19780: LD_INT 3
19782: PUSH
19783: EMPTY
19784: LIST
19785: LIST
19786: PUSH
19787: EMPTY
19788: LIST
19789: LIST
19790: PPUSH
19791: CALL_OW 69
19795: ST_TO_ADDR
// if not tmp then
19796: LD_VAR 0 2
19800: NOT
19801: IFFALSE 19805
// exit ;
19803: GO 19834
// for i in tmp do
19805: LD_ADDR_VAR 0 1
19809: PUSH
19810: LD_VAR 0 2
19814: PUSH
19815: FOR_IN
19816: IFFALSE 19832
// SetBLevel ( i , 10 ) ;
19818: LD_VAR 0 1
19822: PPUSH
19823: LD_INT 10
19825: PPUSH
19826: CALL_OW 241
19830: GO 19815
19832: POP
19833: POP
// end ;
19834: PPOPN 2
19836: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
19837: LD_EXP 22
19841: PUSH
19842: LD_EXP 39
19846: AND
19847: IFFALSE 19958
19849: GO 19851
19851: DISABLE
19852: LD_INT 0
19854: PPUSH
19855: PPUSH
19856: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19857: LD_ADDR_VAR 0 3
19861: PUSH
19862: LD_INT 22
19864: PUSH
19865: LD_OWVAR 2
19869: PUSH
19870: EMPTY
19871: LIST
19872: LIST
19873: PUSH
19874: LD_INT 25
19876: PUSH
19877: LD_INT 1
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: PUSH
19884: EMPTY
19885: LIST
19886: LIST
19887: PPUSH
19888: CALL_OW 69
19892: ST_TO_ADDR
// if not tmp then
19893: LD_VAR 0 3
19897: NOT
19898: IFFALSE 19902
// exit ;
19900: GO 19958
// un := tmp [ rand ( 1 , tmp ) ] ;
19902: LD_ADDR_VAR 0 2
19906: PUSH
19907: LD_VAR 0 3
19911: PUSH
19912: LD_INT 1
19914: PPUSH
19915: LD_VAR 0 3
19919: PPUSH
19920: CALL_OW 12
19924: ARRAY
19925: ST_TO_ADDR
// if Crawls ( un ) then
19926: LD_VAR 0 2
19930: PPUSH
19931: CALL_OW 318
19935: IFFALSE 19946
// ComWalk ( un ) ;
19937: LD_VAR 0 2
19941: PPUSH
19942: CALL_OW 138
// SetClass ( un , class_sniper ) ;
19946: LD_VAR 0 2
19950: PPUSH
19951: LD_INT 5
19953: PPUSH
19954: CALL_OW 336
// end ;
19958: PPOPN 3
19960: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
19961: LD_EXP 22
19965: PUSH
19966: LD_EXP 40
19970: AND
19971: PUSH
19972: LD_OWVAR 67
19976: PUSH
19977: LD_INT 4
19979: LESS
19980: AND
19981: IFFALSE 20000
19983: GO 19985
19985: DISABLE
// begin Difficulty := Difficulty + 1 ;
19986: LD_ADDR_OWVAR 67
19990: PUSH
19991: LD_OWVAR 67
19995: PUSH
19996: LD_INT 1
19998: PLUS
19999: ST_TO_ADDR
// end ;
20000: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
20001: LD_EXP 22
20005: PUSH
20006: LD_EXP 41
20010: AND
20011: IFFALSE 20114
20013: GO 20015
20015: DISABLE
20016: LD_INT 0
20018: PPUSH
// begin for i := 1 to 5 do
20019: LD_ADDR_VAR 0 1
20023: PUSH
20024: DOUBLE
20025: LD_INT 1
20027: DEC
20028: ST_TO_ADDR
20029: LD_INT 5
20031: PUSH
20032: FOR_TO
20033: IFFALSE 20112
// begin uc_nation := nation_nature ;
20035: LD_ADDR_OWVAR 21
20039: PUSH
20040: LD_INT 0
20042: ST_TO_ADDR
// uc_side := 0 ;
20043: LD_ADDR_OWVAR 20
20047: PUSH
20048: LD_INT 0
20050: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20051: LD_ADDR_OWVAR 29
20055: PUSH
20056: LD_INT 12
20058: PUSH
20059: LD_INT 12
20061: PUSH
20062: EMPTY
20063: LIST
20064: LIST
20065: ST_TO_ADDR
// hc_agressivity := 20 ;
20066: LD_ADDR_OWVAR 35
20070: PUSH
20071: LD_INT 20
20073: ST_TO_ADDR
// hc_class := class_tiger ;
20074: LD_ADDR_OWVAR 28
20078: PUSH
20079: LD_INT 14
20081: ST_TO_ADDR
// hc_gallery :=  ;
20082: LD_ADDR_OWVAR 33
20086: PUSH
20087: LD_STRING 
20089: ST_TO_ADDR
// hc_name :=  ;
20090: LD_ADDR_OWVAR 26
20094: PUSH
20095: LD_STRING 
20097: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
20098: CALL_OW 44
20102: PPUSH
20103: LD_INT 0
20105: PPUSH
20106: CALL_OW 51
// end ;
20110: GO 20032
20112: POP
20113: POP
// end ;
20114: PPOPN 1
20116: END
// every 0 0$1 trigger StreamModeActive and sBomb do
20117: LD_EXP 22
20121: PUSH
20122: LD_EXP 42
20126: AND
20127: IFFALSE 20136
20129: GO 20131
20131: DISABLE
// StreamSibBomb ;
20132: CALL 20137 0 0
20136: END
// export function StreamSibBomb ; var i , x , y ; begin
20137: LD_INT 0
20139: PPUSH
20140: PPUSH
20141: PPUSH
20142: PPUSH
// result := false ;
20143: LD_ADDR_VAR 0 1
20147: PUSH
20148: LD_INT 0
20150: ST_TO_ADDR
// for i := 1 to 16 do
20151: LD_ADDR_VAR 0 2
20155: PUSH
20156: DOUBLE
20157: LD_INT 1
20159: DEC
20160: ST_TO_ADDR
20161: LD_INT 16
20163: PUSH
20164: FOR_TO
20165: IFFALSE 20364
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20167: LD_ADDR_VAR 0 3
20171: PUSH
20172: LD_INT 10
20174: PUSH
20175: LD_INT 20
20177: PUSH
20178: LD_INT 30
20180: PUSH
20181: LD_INT 40
20183: PUSH
20184: LD_INT 50
20186: PUSH
20187: LD_INT 60
20189: PUSH
20190: LD_INT 70
20192: PUSH
20193: LD_INT 80
20195: PUSH
20196: LD_INT 90
20198: PUSH
20199: LD_INT 100
20201: PUSH
20202: LD_INT 110
20204: PUSH
20205: LD_INT 120
20207: PUSH
20208: LD_INT 130
20210: PUSH
20211: LD_INT 140
20213: PUSH
20214: LD_INT 150
20216: PUSH
20217: EMPTY
20218: LIST
20219: LIST
20220: LIST
20221: LIST
20222: LIST
20223: LIST
20224: LIST
20225: LIST
20226: LIST
20227: LIST
20228: LIST
20229: LIST
20230: LIST
20231: LIST
20232: LIST
20233: PUSH
20234: LD_INT 1
20236: PPUSH
20237: LD_INT 15
20239: PPUSH
20240: CALL_OW 12
20244: ARRAY
20245: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20246: LD_ADDR_VAR 0 4
20250: PUSH
20251: LD_INT 10
20253: PUSH
20254: LD_INT 20
20256: PUSH
20257: LD_INT 30
20259: PUSH
20260: LD_INT 40
20262: PUSH
20263: LD_INT 50
20265: PUSH
20266: LD_INT 60
20268: PUSH
20269: LD_INT 70
20271: PUSH
20272: LD_INT 80
20274: PUSH
20275: LD_INT 90
20277: PUSH
20278: LD_INT 100
20280: PUSH
20281: LD_INT 110
20283: PUSH
20284: LD_INT 120
20286: PUSH
20287: LD_INT 130
20289: PUSH
20290: LD_INT 140
20292: PUSH
20293: LD_INT 150
20295: PUSH
20296: EMPTY
20297: LIST
20298: LIST
20299: LIST
20300: LIST
20301: LIST
20302: LIST
20303: LIST
20304: LIST
20305: LIST
20306: LIST
20307: LIST
20308: LIST
20309: LIST
20310: LIST
20311: LIST
20312: PUSH
20313: LD_INT 1
20315: PPUSH
20316: LD_INT 15
20318: PPUSH
20319: CALL_OW 12
20323: ARRAY
20324: ST_TO_ADDR
// if ValidHex ( x , y ) then
20325: LD_VAR 0 3
20329: PPUSH
20330: LD_VAR 0 4
20334: PPUSH
20335: CALL_OW 488
20339: IFFALSE 20362
// begin result := [ x , y ] ;
20341: LD_ADDR_VAR 0 1
20345: PUSH
20346: LD_VAR 0 3
20350: PUSH
20351: LD_VAR 0 4
20355: PUSH
20356: EMPTY
20357: LIST
20358: LIST
20359: ST_TO_ADDR
// break ;
20360: GO 20364
// end ; end ;
20362: GO 20164
20364: POP
20365: POP
// if result then
20366: LD_VAR 0 1
20370: IFFALSE 20430
// begin ToLua ( playSibBomb() ) ;
20372: LD_STRING playSibBomb()
20374: PPUSH
20375: CALL_OW 559
// wait ( 0 0$14 ) ;
20379: LD_INT 490
20381: PPUSH
20382: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
20386: LD_VAR 0 1
20390: PUSH
20391: LD_INT 1
20393: ARRAY
20394: PPUSH
20395: LD_VAR 0 1
20399: PUSH
20400: LD_INT 2
20402: ARRAY
20403: PPUSH
20404: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
20408: LD_VAR 0 1
20412: PUSH
20413: LD_INT 1
20415: ARRAY
20416: PPUSH
20417: LD_VAR 0 1
20421: PUSH
20422: LD_INT 2
20424: ARRAY
20425: PPUSH
20426: CALL_OW 429
// end ; end ;
20430: LD_VAR 0 1
20434: RET
// every 0 0$1 trigger StreamModeActive and sReset do
20435: LD_EXP 22
20439: PUSH
20440: LD_EXP 44
20444: AND
20445: IFFALSE 20457
20447: GO 20449
20449: DISABLE
// YouLost (  ) ;
20450: LD_STRING 
20452: PPUSH
20453: CALL_OW 104
20457: END
// every 0 0$1 trigger StreamModeActive and sFog do
20458: LD_EXP 22
20462: PUSH
20463: LD_EXP 43
20467: AND
20468: IFFALSE 20482
20470: GO 20472
20472: DISABLE
// FogOff ( your_side ) ;
20473: LD_OWVAR 2
20477: PPUSH
20478: CALL_OW 344
20482: END
// every 0 0$1 trigger StreamModeActive and sSun do
20483: LD_EXP 22
20487: PUSH
20488: LD_EXP 45
20492: AND
20493: IFFALSE 20521
20495: GO 20497
20497: DISABLE
// begin solar_recharge_percent := 0 ;
20498: LD_ADDR_OWVAR 79
20502: PUSH
20503: LD_INT 0
20505: ST_TO_ADDR
// wait ( 5 5$00 ) ;
20506: LD_INT 10500
20508: PPUSH
20509: CALL_OW 67
// solar_recharge_percent := 100 ;
20513: LD_ADDR_OWVAR 79
20517: PUSH
20518: LD_INT 100
20520: ST_TO_ADDR
// end ;
20521: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
20522: LD_EXP 22
20526: PUSH
20527: LD_EXP 46
20531: AND
20532: IFFALSE 20771
20534: GO 20536
20536: DISABLE
20537: LD_INT 0
20539: PPUSH
20540: PPUSH
20541: PPUSH
// begin tmp := [ ] ;
20542: LD_ADDR_VAR 0 3
20546: PUSH
20547: EMPTY
20548: ST_TO_ADDR
// for i := 1 to 6 do
20549: LD_ADDR_VAR 0 1
20553: PUSH
20554: DOUBLE
20555: LD_INT 1
20557: DEC
20558: ST_TO_ADDR
20559: LD_INT 6
20561: PUSH
20562: FOR_TO
20563: IFFALSE 20668
// begin uc_nation := nation_nature ;
20565: LD_ADDR_OWVAR 21
20569: PUSH
20570: LD_INT 0
20572: ST_TO_ADDR
// uc_side := 0 ;
20573: LD_ADDR_OWVAR 20
20577: PUSH
20578: LD_INT 0
20580: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20581: LD_ADDR_OWVAR 29
20585: PUSH
20586: LD_INT 12
20588: PUSH
20589: LD_INT 12
20591: PUSH
20592: EMPTY
20593: LIST
20594: LIST
20595: ST_TO_ADDR
// hc_agressivity := 20 ;
20596: LD_ADDR_OWVAR 35
20600: PUSH
20601: LD_INT 20
20603: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
20604: LD_ADDR_OWVAR 28
20608: PUSH
20609: LD_INT 17
20611: ST_TO_ADDR
// hc_gallery :=  ;
20612: LD_ADDR_OWVAR 33
20616: PUSH
20617: LD_STRING 
20619: ST_TO_ADDR
// hc_name :=  ;
20620: LD_ADDR_OWVAR 26
20624: PUSH
20625: LD_STRING 
20627: ST_TO_ADDR
// un := CreateHuman ;
20628: LD_ADDR_VAR 0 2
20632: PUSH
20633: CALL_OW 44
20637: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
20638: LD_VAR 0 2
20642: PPUSH
20643: LD_INT 1
20645: PPUSH
20646: CALL_OW 51
// tmp := tmp ^ un ;
20650: LD_ADDR_VAR 0 3
20654: PUSH
20655: LD_VAR 0 3
20659: PUSH
20660: LD_VAR 0 2
20664: ADD
20665: ST_TO_ADDR
// end ;
20666: GO 20562
20668: POP
20669: POP
// repeat wait ( 0 0$1 ) ;
20670: LD_INT 35
20672: PPUSH
20673: CALL_OW 67
// for un in tmp do
20677: LD_ADDR_VAR 0 2
20681: PUSH
20682: LD_VAR 0 3
20686: PUSH
20687: FOR_IN
20688: IFFALSE 20762
// begin if IsDead ( un ) then
20690: LD_VAR 0 2
20694: PPUSH
20695: CALL_OW 301
20699: IFFALSE 20719
// begin tmp := tmp diff un ;
20701: LD_ADDR_VAR 0 3
20705: PUSH
20706: LD_VAR 0 3
20710: PUSH
20711: LD_VAR 0 2
20715: DIFF
20716: ST_TO_ADDR
// continue ;
20717: GO 20687
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
20719: LD_VAR 0 2
20723: PPUSH
20724: LD_INT 3
20726: PUSH
20727: LD_INT 22
20729: PUSH
20730: LD_INT 0
20732: PUSH
20733: EMPTY
20734: LIST
20735: LIST
20736: PUSH
20737: EMPTY
20738: LIST
20739: LIST
20740: PPUSH
20741: CALL_OW 69
20745: PPUSH
20746: LD_VAR 0 2
20750: PPUSH
20751: CALL_OW 74
20755: PPUSH
20756: CALL_OW 115
// end ;
20760: GO 20687
20762: POP
20763: POP
// until not tmp ;
20764: LD_VAR 0 3
20768: NOT
20769: IFFALSE 20670
// end ;
20771: PPOPN 3
20773: END
// every 0 0$1 trigger StreamModeActive and sTroll do
20774: LD_EXP 22
20778: PUSH
20779: LD_EXP 47
20783: AND
20784: IFFALSE 20838
20786: GO 20788
20788: DISABLE
// begin ToLua ( displayTroll(); ) ;
20789: LD_STRING displayTroll();
20791: PPUSH
20792: CALL_OW 559
// wait ( 3 3$00 ) ;
20796: LD_INT 6300
20798: PPUSH
20799: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20803: LD_STRING hideTroll();
20805: PPUSH
20806: CALL_OW 559
// wait ( 1 1$00 ) ;
20810: LD_INT 2100
20812: PPUSH
20813: CALL_OW 67
// ToLua ( displayTroll(); ) ;
20817: LD_STRING displayTroll();
20819: PPUSH
20820: CALL_OW 559
// wait ( 1 1$00 ) ;
20824: LD_INT 2100
20826: PPUSH
20827: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20831: LD_STRING hideTroll();
20833: PPUSH
20834: CALL_OW 559
// end ;
20838: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
20839: LD_EXP 22
20843: PUSH
20844: LD_EXP 48
20848: AND
20849: IFFALSE 20912
20851: GO 20853
20853: DISABLE
20854: LD_INT 0
20856: PPUSH
// begin p := 0 ;
20857: LD_ADDR_VAR 0 1
20861: PUSH
20862: LD_INT 0
20864: ST_TO_ADDR
// repeat game_speed := 1 ;
20865: LD_ADDR_OWVAR 65
20869: PUSH
20870: LD_INT 1
20872: ST_TO_ADDR
// wait ( 0 0$1 ) ;
20873: LD_INT 35
20875: PPUSH
20876: CALL_OW 67
// p := p + 1 ;
20880: LD_ADDR_VAR 0 1
20884: PUSH
20885: LD_VAR 0 1
20889: PUSH
20890: LD_INT 1
20892: PLUS
20893: ST_TO_ADDR
// until p >= 60 ;
20894: LD_VAR 0 1
20898: PUSH
20899: LD_INT 60
20901: GREATEREQUAL
20902: IFFALSE 20865
// game_speed := 4 ;
20904: LD_ADDR_OWVAR 65
20908: PUSH
20909: LD_INT 4
20911: ST_TO_ADDR
// end ;
20912: PPOPN 1
20914: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
20915: LD_EXP 22
20919: PUSH
20920: LD_EXP 49
20924: AND
20925: IFFALSE 21071
20927: GO 20929
20929: DISABLE
20930: LD_INT 0
20932: PPUSH
20933: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20934: LD_ADDR_VAR 0 1
20938: PUSH
20939: LD_INT 22
20941: PUSH
20942: LD_OWVAR 2
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: PUSH
20951: LD_INT 2
20953: PUSH
20954: LD_INT 30
20956: PUSH
20957: LD_INT 0
20959: PUSH
20960: EMPTY
20961: LIST
20962: LIST
20963: PUSH
20964: LD_INT 30
20966: PUSH
20967: LD_INT 1
20969: PUSH
20970: EMPTY
20971: LIST
20972: LIST
20973: PUSH
20974: EMPTY
20975: LIST
20976: LIST
20977: LIST
20978: PUSH
20979: EMPTY
20980: LIST
20981: LIST
20982: PPUSH
20983: CALL_OW 69
20987: ST_TO_ADDR
// if not depot then
20988: LD_VAR 0 1
20992: NOT
20993: IFFALSE 20997
// exit ;
20995: GO 21071
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20997: LD_ADDR_VAR 0 2
21001: PUSH
21002: LD_VAR 0 1
21006: PUSH
21007: LD_INT 1
21009: PPUSH
21010: LD_VAR 0 1
21014: PPUSH
21015: CALL_OW 12
21019: ARRAY
21020: PPUSH
21021: CALL_OW 274
21025: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
21026: LD_VAR 0 2
21030: PPUSH
21031: LD_INT 1
21033: PPUSH
21034: LD_INT 0
21036: PPUSH
21037: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
21041: LD_VAR 0 2
21045: PPUSH
21046: LD_INT 2
21048: PPUSH
21049: LD_INT 0
21051: PPUSH
21052: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
21056: LD_VAR 0 2
21060: PPUSH
21061: LD_INT 3
21063: PPUSH
21064: LD_INT 0
21066: PPUSH
21067: CALL_OW 277
// end ;
21071: PPOPN 2
21073: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
21074: LD_EXP 22
21078: PUSH
21079: LD_EXP 50
21083: AND
21084: IFFALSE 21181
21086: GO 21088
21088: DISABLE
21089: LD_INT 0
21091: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21092: LD_ADDR_VAR 0 1
21096: PUSH
21097: LD_INT 22
21099: PUSH
21100: LD_OWVAR 2
21104: PUSH
21105: EMPTY
21106: LIST
21107: LIST
21108: PUSH
21109: LD_INT 21
21111: PUSH
21112: LD_INT 1
21114: PUSH
21115: EMPTY
21116: LIST
21117: LIST
21118: PUSH
21119: LD_INT 3
21121: PUSH
21122: LD_INT 23
21124: PUSH
21125: LD_INT 0
21127: PUSH
21128: EMPTY
21129: LIST
21130: LIST
21131: PUSH
21132: EMPTY
21133: LIST
21134: LIST
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: LIST
21140: PPUSH
21141: CALL_OW 69
21145: ST_TO_ADDR
// if not tmp then
21146: LD_VAR 0 1
21150: NOT
21151: IFFALSE 21155
// exit ;
21153: GO 21181
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
21155: LD_VAR 0 1
21159: PUSH
21160: LD_INT 1
21162: PPUSH
21163: LD_VAR 0 1
21167: PPUSH
21168: CALL_OW 12
21172: ARRAY
21173: PPUSH
21174: LD_INT 200
21176: PPUSH
21177: CALL_OW 234
// end ;
21181: PPOPN 1
21183: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
21184: LD_EXP 22
21188: PUSH
21189: LD_EXP 51
21193: AND
21194: IFFALSE 21273
21196: GO 21198
21198: DISABLE
21199: LD_INT 0
21201: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
21202: LD_ADDR_VAR 0 1
21206: PUSH
21207: LD_INT 22
21209: PUSH
21210: LD_OWVAR 2
21214: PUSH
21215: EMPTY
21216: LIST
21217: LIST
21218: PUSH
21219: LD_INT 21
21221: PUSH
21222: LD_INT 2
21224: PUSH
21225: EMPTY
21226: LIST
21227: LIST
21228: PUSH
21229: EMPTY
21230: LIST
21231: LIST
21232: PPUSH
21233: CALL_OW 69
21237: ST_TO_ADDR
// if not tmp then
21238: LD_VAR 0 1
21242: NOT
21243: IFFALSE 21247
// exit ;
21245: GO 21273
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
21247: LD_VAR 0 1
21251: PUSH
21252: LD_INT 1
21254: PPUSH
21255: LD_VAR 0 1
21259: PPUSH
21260: CALL_OW 12
21264: ARRAY
21265: PPUSH
21266: LD_INT 60
21268: PPUSH
21269: CALL_OW 234
// end ;
21273: PPOPN 1
21275: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
21276: LD_EXP 22
21280: PUSH
21281: LD_EXP 52
21285: AND
21286: IFFALSE 21385
21288: GO 21290
21290: DISABLE
21291: LD_INT 0
21293: PPUSH
21294: PPUSH
// begin enable ;
21295: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
21296: LD_ADDR_VAR 0 1
21300: PUSH
21301: LD_INT 22
21303: PUSH
21304: LD_OWVAR 2
21308: PUSH
21309: EMPTY
21310: LIST
21311: LIST
21312: PUSH
21313: LD_INT 61
21315: PUSH
21316: EMPTY
21317: LIST
21318: PUSH
21319: LD_INT 33
21321: PUSH
21322: LD_INT 2
21324: PUSH
21325: EMPTY
21326: LIST
21327: LIST
21328: PUSH
21329: EMPTY
21330: LIST
21331: LIST
21332: LIST
21333: PPUSH
21334: CALL_OW 69
21338: ST_TO_ADDR
// if not tmp then
21339: LD_VAR 0 1
21343: NOT
21344: IFFALSE 21348
// exit ;
21346: GO 21385
// for i in tmp do
21348: LD_ADDR_VAR 0 2
21352: PUSH
21353: LD_VAR 0 1
21357: PUSH
21358: FOR_IN
21359: IFFALSE 21383
// if IsControledBy ( i ) then
21361: LD_VAR 0 2
21365: PPUSH
21366: CALL_OW 312
21370: IFFALSE 21381
// ComUnlink ( i ) ;
21372: LD_VAR 0 2
21376: PPUSH
21377: CALL_OW 136
21381: GO 21358
21383: POP
21384: POP
// end ;
21385: PPOPN 2
21387: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
21388: LD_EXP 22
21392: PUSH
21393: LD_EXP 53
21397: AND
21398: IFFALSE 21538
21400: GO 21402
21402: DISABLE
21403: LD_INT 0
21405: PPUSH
21406: PPUSH
// begin ToLua ( displayPowell(); ) ;
21407: LD_STRING displayPowell();
21409: PPUSH
21410: CALL_OW 559
// uc_side := 0 ;
21414: LD_ADDR_OWVAR 20
21418: PUSH
21419: LD_INT 0
21421: ST_TO_ADDR
// uc_nation := 2 ;
21422: LD_ADDR_OWVAR 21
21426: PUSH
21427: LD_INT 2
21429: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
21430: LD_ADDR_OWVAR 37
21434: PUSH
21435: LD_INT 14
21437: ST_TO_ADDR
// vc_engine := engine_siberite ;
21438: LD_ADDR_OWVAR 39
21442: PUSH
21443: LD_INT 3
21445: ST_TO_ADDR
// vc_control := control_apeman ;
21446: LD_ADDR_OWVAR 38
21450: PUSH
21451: LD_INT 5
21453: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
21454: LD_ADDR_OWVAR 40
21458: PUSH
21459: LD_INT 29
21461: ST_TO_ADDR
// un := CreateVehicle ;
21462: LD_ADDR_VAR 0 2
21466: PUSH
21467: CALL_OW 45
21471: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21472: LD_VAR 0 2
21476: PPUSH
21477: LD_INT 1
21479: PPUSH
21480: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21484: LD_INT 35
21486: PPUSH
21487: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21491: LD_VAR 0 2
21495: PPUSH
21496: LD_INT 22
21498: PUSH
21499: LD_OWVAR 2
21503: PUSH
21504: EMPTY
21505: LIST
21506: LIST
21507: PPUSH
21508: CALL_OW 69
21512: PPUSH
21513: LD_VAR 0 2
21517: PPUSH
21518: CALL_OW 74
21522: PPUSH
21523: CALL_OW 115
// until IsDead ( un ) ;
21527: LD_VAR 0 2
21531: PPUSH
21532: CALL_OW 301
21536: IFFALSE 21484
// end ;
21538: PPOPN 2
21540: END
// every 0 0$1 trigger StreamModeActive and sStu do
21541: LD_EXP 22
21545: PUSH
21546: LD_EXP 61
21550: AND
21551: IFFALSE 21567
21553: GO 21555
21555: DISABLE
// begin ToLua ( displayStucuk(); ) ;
21556: LD_STRING displayStucuk();
21558: PPUSH
21559: CALL_OW 559
// ResetFog ;
21563: CALL_OW 335
// end ;
21567: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
21568: LD_EXP 22
21572: PUSH
21573: LD_EXP 54
21577: AND
21578: IFFALSE 21719
21580: GO 21582
21582: DISABLE
21583: LD_INT 0
21585: PPUSH
21586: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21587: LD_ADDR_VAR 0 2
21591: PUSH
21592: LD_INT 22
21594: PUSH
21595: LD_OWVAR 2
21599: PUSH
21600: EMPTY
21601: LIST
21602: LIST
21603: PUSH
21604: LD_INT 21
21606: PUSH
21607: LD_INT 1
21609: PUSH
21610: EMPTY
21611: LIST
21612: LIST
21613: PUSH
21614: EMPTY
21615: LIST
21616: LIST
21617: PPUSH
21618: CALL_OW 69
21622: ST_TO_ADDR
// if not tmp then
21623: LD_VAR 0 2
21627: NOT
21628: IFFALSE 21632
// exit ;
21630: GO 21719
// un := tmp [ rand ( 1 , tmp ) ] ;
21632: LD_ADDR_VAR 0 1
21636: PUSH
21637: LD_VAR 0 2
21641: PUSH
21642: LD_INT 1
21644: PPUSH
21645: LD_VAR 0 2
21649: PPUSH
21650: CALL_OW 12
21654: ARRAY
21655: ST_TO_ADDR
// SetSide ( un , 0 ) ;
21656: LD_VAR 0 1
21660: PPUSH
21661: LD_INT 0
21663: PPUSH
21664: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
21668: LD_VAR 0 1
21672: PPUSH
21673: LD_OWVAR 3
21677: PUSH
21678: LD_VAR 0 1
21682: DIFF
21683: PPUSH
21684: LD_VAR 0 1
21688: PPUSH
21689: CALL_OW 74
21693: PPUSH
21694: CALL_OW 115
// wait ( 0 0$20 ) ;
21698: LD_INT 700
21700: PPUSH
21701: CALL_OW 67
// SetSide ( un , your_side ) ;
21705: LD_VAR 0 1
21709: PPUSH
21710: LD_OWVAR 2
21714: PPUSH
21715: CALL_OW 235
// end ;
21719: PPOPN 2
21721: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
21722: LD_EXP 22
21726: PUSH
21727: LD_EXP 55
21731: AND
21732: IFFALSE 21838
21734: GO 21736
21736: DISABLE
21737: LD_INT 0
21739: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21740: LD_ADDR_VAR 0 1
21744: PUSH
21745: LD_INT 22
21747: PUSH
21748: LD_OWVAR 2
21752: PUSH
21753: EMPTY
21754: LIST
21755: LIST
21756: PUSH
21757: LD_INT 2
21759: PUSH
21760: LD_INT 30
21762: PUSH
21763: LD_INT 0
21765: PUSH
21766: EMPTY
21767: LIST
21768: LIST
21769: PUSH
21770: LD_INT 30
21772: PUSH
21773: LD_INT 1
21775: PUSH
21776: EMPTY
21777: LIST
21778: LIST
21779: PUSH
21780: EMPTY
21781: LIST
21782: LIST
21783: LIST
21784: PUSH
21785: EMPTY
21786: LIST
21787: LIST
21788: PPUSH
21789: CALL_OW 69
21793: ST_TO_ADDR
// if not depot then
21794: LD_VAR 0 1
21798: NOT
21799: IFFALSE 21803
// exit ;
21801: GO 21838
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
21803: LD_VAR 0 1
21807: PUSH
21808: LD_INT 1
21810: ARRAY
21811: PPUSH
21812: CALL_OW 250
21816: PPUSH
21817: LD_VAR 0 1
21821: PUSH
21822: LD_INT 1
21824: ARRAY
21825: PPUSH
21826: CALL_OW 251
21830: PPUSH
21831: LD_INT 70
21833: PPUSH
21834: CALL_OW 495
// end ;
21838: PPOPN 1
21840: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
21841: LD_EXP 22
21845: PUSH
21846: LD_EXP 56
21850: AND
21851: IFFALSE 22062
21853: GO 21855
21855: DISABLE
21856: LD_INT 0
21858: PPUSH
21859: PPUSH
21860: PPUSH
21861: PPUSH
21862: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21863: LD_ADDR_VAR 0 5
21867: PUSH
21868: LD_INT 22
21870: PUSH
21871: LD_OWVAR 2
21875: PUSH
21876: EMPTY
21877: LIST
21878: LIST
21879: PUSH
21880: LD_INT 21
21882: PUSH
21883: LD_INT 1
21885: PUSH
21886: EMPTY
21887: LIST
21888: LIST
21889: PUSH
21890: EMPTY
21891: LIST
21892: LIST
21893: PPUSH
21894: CALL_OW 69
21898: ST_TO_ADDR
// if not tmp then
21899: LD_VAR 0 5
21903: NOT
21904: IFFALSE 21908
// exit ;
21906: GO 22062
// for i in tmp do
21908: LD_ADDR_VAR 0 1
21912: PUSH
21913: LD_VAR 0 5
21917: PUSH
21918: FOR_IN
21919: IFFALSE 22060
// begin d := rand ( 0 , 5 ) ;
21921: LD_ADDR_VAR 0 4
21925: PUSH
21926: LD_INT 0
21928: PPUSH
21929: LD_INT 5
21931: PPUSH
21932: CALL_OW 12
21936: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
21937: LD_ADDR_VAR 0 2
21941: PUSH
21942: LD_VAR 0 1
21946: PPUSH
21947: CALL_OW 250
21951: PPUSH
21952: LD_VAR 0 4
21956: PPUSH
21957: LD_INT 3
21959: PPUSH
21960: LD_INT 12
21962: PPUSH
21963: CALL_OW 12
21967: PPUSH
21968: CALL_OW 272
21972: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
21973: LD_ADDR_VAR 0 3
21977: PUSH
21978: LD_VAR 0 1
21982: PPUSH
21983: CALL_OW 251
21987: PPUSH
21988: LD_VAR 0 4
21992: PPUSH
21993: LD_INT 3
21995: PPUSH
21996: LD_INT 12
21998: PPUSH
21999: CALL_OW 12
22003: PPUSH
22004: CALL_OW 273
22008: ST_TO_ADDR
// if ValidHex ( x , y ) then
22009: LD_VAR 0 2
22013: PPUSH
22014: LD_VAR 0 3
22018: PPUSH
22019: CALL_OW 488
22023: IFFALSE 22058
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
22025: LD_VAR 0 1
22029: PPUSH
22030: LD_VAR 0 2
22034: PPUSH
22035: LD_VAR 0 3
22039: PPUSH
22040: LD_INT 3
22042: PPUSH
22043: LD_INT 6
22045: PPUSH
22046: CALL_OW 12
22050: PPUSH
22051: LD_INT 1
22053: PPUSH
22054: CALL_OW 483
// end ;
22058: GO 21918
22060: POP
22061: POP
// end ;
22062: PPOPN 5
22064: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
22065: LD_EXP 22
22069: PUSH
22070: LD_EXP 57
22074: AND
22075: IFFALSE 22169
22077: GO 22079
22079: DISABLE
22080: LD_INT 0
22082: PPUSH
22083: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
22084: LD_ADDR_VAR 0 2
22088: PUSH
22089: LD_INT 22
22091: PUSH
22092: LD_OWVAR 2
22096: PUSH
22097: EMPTY
22098: LIST
22099: LIST
22100: PUSH
22101: LD_INT 32
22103: PUSH
22104: LD_INT 1
22106: PUSH
22107: EMPTY
22108: LIST
22109: LIST
22110: PUSH
22111: LD_INT 21
22113: PUSH
22114: LD_INT 2
22116: PUSH
22117: EMPTY
22118: LIST
22119: LIST
22120: PUSH
22121: EMPTY
22122: LIST
22123: LIST
22124: LIST
22125: PPUSH
22126: CALL_OW 69
22130: ST_TO_ADDR
// if not tmp then
22131: LD_VAR 0 2
22135: NOT
22136: IFFALSE 22140
// exit ;
22138: GO 22169
// for i in tmp do
22140: LD_ADDR_VAR 0 1
22144: PUSH
22145: LD_VAR 0 2
22149: PUSH
22150: FOR_IN
22151: IFFALSE 22167
// SetFuel ( i , 0 ) ;
22153: LD_VAR 0 1
22157: PPUSH
22158: LD_INT 0
22160: PPUSH
22161: CALL_OW 240
22165: GO 22150
22167: POP
22168: POP
// end ;
22169: PPOPN 2
22171: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
22172: LD_EXP 22
22176: PUSH
22177: LD_EXP 58
22181: AND
22182: IFFALSE 22248
22184: GO 22186
22186: DISABLE
22187: LD_INT 0
22189: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22190: LD_ADDR_VAR 0 1
22194: PUSH
22195: LD_INT 22
22197: PUSH
22198: LD_OWVAR 2
22202: PUSH
22203: EMPTY
22204: LIST
22205: LIST
22206: PUSH
22207: LD_INT 30
22209: PUSH
22210: LD_INT 29
22212: PUSH
22213: EMPTY
22214: LIST
22215: LIST
22216: PUSH
22217: EMPTY
22218: LIST
22219: LIST
22220: PPUSH
22221: CALL_OW 69
22225: ST_TO_ADDR
// if not tmp then
22226: LD_VAR 0 1
22230: NOT
22231: IFFALSE 22235
// exit ;
22233: GO 22248
// DestroyUnit ( tmp [ 1 ] ) ;
22235: LD_VAR 0 1
22239: PUSH
22240: LD_INT 1
22242: ARRAY
22243: PPUSH
22244: CALL_OW 65
// end ;
22248: PPOPN 1
22250: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
22251: LD_EXP 22
22255: PUSH
22256: LD_EXP 60
22260: AND
22261: IFFALSE 22390
22263: GO 22265
22265: DISABLE
22266: LD_INT 0
22268: PPUSH
// begin uc_side := 0 ;
22269: LD_ADDR_OWVAR 20
22273: PUSH
22274: LD_INT 0
22276: ST_TO_ADDR
// uc_nation := nation_arabian ;
22277: LD_ADDR_OWVAR 21
22281: PUSH
22282: LD_INT 2
22284: ST_TO_ADDR
// hc_gallery :=  ;
22285: LD_ADDR_OWVAR 33
22289: PUSH
22290: LD_STRING 
22292: ST_TO_ADDR
// hc_name :=  ;
22293: LD_ADDR_OWVAR 26
22297: PUSH
22298: LD_STRING 
22300: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
22301: LD_INT 1
22303: PPUSH
22304: LD_INT 11
22306: PPUSH
22307: LD_INT 10
22309: PPUSH
22310: CALL_OW 380
// un := CreateHuman ;
22314: LD_ADDR_VAR 0 1
22318: PUSH
22319: CALL_OW 44
22323: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22324: LD_VAR 0 1
22328: PPUSH
22329: LD_INT 1
22331: PPUSH
22332: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
22336: LD_INT 35
22338: PPUSH
22339: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
22343: LD_VAR 0 1
22347: PPUSH
22348: LD_INT 22
22350: PUSH
22351: LD_OWVAR 2
22355: PUSH
22356: EMPTY
22357: LIST
22358: LIST
22359: PPUSH
22360: CALL_OW 69
22364: PPUSH
22365: LD_VAR 0 1
22369: PPUSH
22370: CALL_OW 74
22374: PPUSH
22375: CALL_OW 115
// until IsDead ( un ) ;
22379: LD_VAR 0 1
22383: PPUSH
22384: CALL_OW 301
22388: IFFALSE 22336
// end ;
22390: PPOPN 1
22392: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
22393: LD_EXP 22
22397: PUSH
22398: LD_EXP 62
22402: AND
22403: IFFALSE 22415
22405: GO 22407
22407: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
22408: LD_STRING earthquake(getX(game), 0, 32)
22410: PPUSH
22411: CALL_OW 559
22415: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
22416: LD_EXP 22
22420: PUSH
22421: LD_EXP 63
22425: AND
22426: IFFALSE 22517
22428: GO 22430
22430: DISABLE
22431: LD_INT 0
22433: PPUSH
// begin enable ;
22434: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
22435: LD_ADDR_VAR 0 1
22439: PUSH
22440: LD_INT 22
22442: PUSH
22443: LD_OWVAR 2
22447: PUSH
22448: EMPTY
22449: LIST
22450: LIST
22451: PUSH
22452: LD_INT 21
22454: PUSH
22455: LD_INT 2
22457: PUSH
22458: EMPTY
22459: LIST
22460: LIST
22461: PUSH
22462: LD_INT 33
22464: PUSH
22465: LD_INT 3
22467: PUSH
22468: EMPTY
22469: LIST
22470: LIST
22471: PUSH
22472: EMPTY
22473: LIST
22474: LIST
22475: LIST
22476: PPUSH
22477: CALL_OW 69
22481: ST_TO_ADDR
// if not tmp then
22482: LD_VAR 0 1
22486: NOT
22487: IFFALSE 22491
// exit ;
22489: GO 22517
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22491: LD_VAR 0 1
22495: PUSH
22496: LD_INT 1
22498: PPUSH
22499: LD_VAR 0 1
22503: PPUSH
22504: CALL_OW 12
22508: ARRAY
22509: PPUSH
22510: LD_INT 1
22512: PPUSH
22513: CALL_OW 234
// end ;
22517: PPOPN 1
22519: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
22520: LD_EXP 22
22524: PUSH
22525: LD_EXP 64
22529: AND
22530: IFFALSE 22671
22532: GO 22534
22534: DISABLE
22535: LD_INT 0
22537: PPUSH
22538: PPUSH
22539: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22540: LD_ADDR_VAR 0 3
22544: PUSH
22545: LD_INT 22
22547: PUSH
22548: LD_OWVAR 2
22552: PUSH
22553: EMPTY
22554: LIST
22555: LIST
22556: PUSH
22557: LD_INT 25
22559: PUSH
22560: LD_INT 1
22562: PUSH
22563: EMPTY
22564: LIST
22565: LIST
22566: PUSH
22567: EMPTY
22568: LIST
22569: LIST
22570: PPUSH
22571: CALL_OW 69
22575: ST_TO_ADDR
// if not tmp then
22576: LD_VAR 0 3
22580: NOT
22581: IFFALSE 22585
// exit ;
22583: GO 22671
// un := tmp [ rand ( 1 , tmp ) ] ;
22585: LD_ADDR_VAR 0 2
22589: PUSH
22590: LD_VAR 0 3
22594: PUSH
22595: LD_INT 1
22597: PPUSH
22598: LD_VAR 0 3
22602: PPUSH
22603: CALL_OW 12
22607: ARRAY
22608: ST_TO_ADDR
// if Crawls ( un ) then
22609: LD_VAR 0 2
22613: PPUSH
22614: CALL_OW 318
22618: IFFALSE 22629
// ComWalk ( un ) ;
22620: LD_VAR 0 2
22624: PPUSH
22625: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
22629: LD_VAR 0 2
22633: PPUSH
22634: LD_INT 9
22636: PPUSH
22637: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
22641: LD_INT 28
22643: PPUSH
22644: LD_OWVAR 2
22648: PPUSH
22649: LD_INT 2
22651: PPUSH
22652: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
22656: LD_INT 29
22658: PPUSH
22659: LD_OWVAR 2
22663: PPUSH
22664: LD_INT 2
22666: PPUSH
22667: CALL_OW 322
// end ;
22671: PPOPN 3
22673: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
22674: LD_EXP 22
22678: PUSH
22679: LD_EXP 65
22683: AND
22684: IFFALSE 22795
22686: GO 22688
22688: DISABLE
22689: LD_INT 0
22691: PPUSH
22692: PPUSH
22693: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22694: LD_ADDR_VAR 0 3
22698: PUSH
22699: LD_INT 22
22701: PUSH
22702: LD_OWVAR 2
22706: PUSH
22707: EMPTY
22708: LIST
22709: LIST
22710: PUSH
22711: LD_INT 25
22713: PUSH
22714: LD_INT 1
22716: PUSH
22717: EMPTY
22718: LIST
22719: LIST
22720: PUSH
22721: EMPTY
22722: LIST
22723: LIST
22724: PPUSH
22725: CALL_OW 69
22729: ST_TO_ADDR
// if not tmp then
22730: LD_VAR 0 3
22734: NOT
22735: IFFALSE 22739
// exit ;
22737: GO 22795
// un := tmp [ rand ( 1 , tmp ) ] ;
22739: LD_ADDR_VAR 0 2
22743: PUSH
22744: LD_VAR 0 3
22748: PUSH
22749: LD_INT 1
22751: PPUSH
22752: LD_VAR 0 3
22756: PPUSH
22757: CALL_OW 12
22761: ARRAY
22762: ST_TO_ADDR
// if Crawls ( un ) then
22763: LD_VAR 0 2
22767: PPUSH
22768: CALL_OW 318
22772: IFFALSE 22783
// ComWalk ( un ) ;
22774: LD_VAR 0 2
22778: PPUSH
22779: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22783: LD_VAR 0 2
22787: PPUSH
22788: LD_INT 8
22790: PPUSH
22791: CALL_OW 336
// end ;
22795: PPOPN 3
22797: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
22798: LD_EXP 22
22802: PUSH
22803: LD_EXP 66
22807: AND
22808: IFFALSE 22952
22810: GO 22812
22812: DISABLE
22813: LD_INT 0
22815: PPUSH
22816: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
22817: LD_ADDR_VAR 0 2
22821: PUSH
22822: LD_INT 22
22824: PUSH
22825: LD_OWVAR 2
22829: PUSH
22830: EMPTY
22831: LIST
22832: LIST
22833: PUSH
22834: LD_INT 21
22836: PUSH
22837: LD_INT 2
22839: PUSH
22840: EMPTY
22841: LIST
22842: LIST
22843: PUSH
22844: LD_INT 2
22846: PUSH
22847: LD_INT 34
22849: PUSH
22850: LD_INT 12
22852: PUSH
22853: EMPTY
22854: LIST
22855: LIST
22856: PUSH
22857: LD_INT 34
22859: PUSH
22860: LD_INT 51
22862: PUSH
22863: EMPTY
22864: LIST
22865: LIST
22866: PUSH
22867: LD_INT 34
22869: PUSH
22870: LD_INT 32
22872: PUSH
22873: EMPTY
22874: LIST
22875: LIST
22876: PUSH
22877: EMPTY
22878: LIST
22879: LIST
22880: LIST
22881: LIST
22882: PUSH
22883: EMPTY
22884: LIST
22885: LIST
22886: LIST
22887: PPUSH
22888: CALL_OW 69
22892: ST_TO_ADDR
// if not tmp then
22893: LD_VAR 0 2
22897: NOT
22898: IFFALSE 22902
// exit ;
22900: GO 22952
// for i in tmp do
22902: LD_ADDR_VAR 0 1
22906: PUSH
22907: LD_VAR 0 2
22911: PUSH
22912: FOR_IN
22913: IFFALSE 22950
// if GetCargo ( i , mat_artifact ) = 0 then
22915: LD_VAR 0 1
22919: PPUSH
22920: LD_INT 4
22922: PPUSH
22923: CALL_OW 289
22927: PUSH
22928: LD_INT 0
22930: EQUAL
22931: IFFALSE 22948
// SetCargo ( i , mat_siberit , 100 ) ;
22933: LD_VAR 0 1
22937: PPUSH
22938: LD_INT 3
22940: PPUSH
22941: LD_INT 100
22943: PPUSH
22944: CALL_OW 290
22948: GO 22912
22950: POP
22951: POP
// end ;
22952: PPOPN 2
22954: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
22955: LD_EXP 22
22959: PUSH
22960: LD_EXP 67
22964: AND
22965: IFFALSE 23148
22967: GO 22969
22969: DISABLE
22970: LD_INT 0
22972: PPUSH
22973: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22974: LD_ADDR_VAR 0 2
22978: PUSH
22979: LD_INT 22
22981: PUSH
22982: LD_OWVAR 2
22986: PUSH
22987: EMPTY
22988: LIST
22989: LIST
22990: PPUSH
22991: CALL_OW 69
22995: ST_TO_ADDR
// if not tmp then
22996: LD_VAR 0 2
23000: NOT
23001: IFFALSE 23005
// exit ;
23003: GO 23148
// for i := 1 to 2 do
23005: LD_ADDR_VAR 0 1
23009: PUSH
23010: DOUBLE
23011: LD_INT 1
23013: DEC
23014: ST_TO_ADDR
23015: LD_INT 2
23017: PUSH
23018: FOR_TO
23019: IFFALSE 23146
// begin uc_side := your_side ;
23021: LD_ADDR_OWVAR 20
23025: PUSH
23026: LD_OWVAR 2
23030: ST_TO_ADDR
// uc_nation := nation_american ;
23031: LD_ADDR_OWVAR 21
23035: PUSH
23036: LD_INT 1
23038: ST_TO_ADDR
// vc_chassis := us_morphling ;
23039: LD_ADDR_OWVAR 37
23043: PUSH
23044: LD_INT 5
23046: ST_TO_ADDR
// vc_engine := engine_siberite ;
23047: LD_ADDR_OWVAR 39
23051: PUSH
23052: LD_INT 3
23054: ST_TO_ADDR
// vc_control := control_computer ;
23055: LD_ADDR_OWVAR 38
23059: PUSH
23060: LD_INT 3
23062: ST_TO_ADDR
// vc_weapon := us_double_laser ;
23063: LD_ADDR_OWVAR 40
23067: PUSH
23068: LD_INT 10
23070: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
23071: LD_VAR 0 2
23075: PUSH
23076: LD_INT 1
23078: ARRAY
23079: PPUSH
23080: CALL_OW 310
23084: NOT
23085: IFFALSE 23132
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
23087: CALL_OW 45
23091: PPUSH
23092: LD_VAR 0 2
23096: PUSH
23097: LD_INT 1
23099: ARRAY
23100: PPUSH
23101: CALL_OW 250
23105: PPUSH
23106: LD_VAR 0 2
23110: PUSH
23111: LD_INT 1
23113: ARRAY
23114: PPUSH
23115: CALL_OW 251
23119: PPUSH
23120: LD_INT 12
23122: PPUSH
23123: LD_INT 1
23125: PPUSH
23126: CALL_OW 50
23130: GO 23144
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
23132: CALL_OW 45
23136: PPUSH
23137: LD_INT 1
23139: PPUSH
23140: CALL_OW 51
// end ;
23144: GO 23018
23146: POP
23147: POP
// end ;
23148: PPOPN 2
23150: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
23151: LD_EXP 22
23155: PUSH
23156: LD_EXP 68
23160: AND
23161: IFFALSE 23383
23163: GO 23165
23165: DISABLE
23166: LD_INT 0
23168: PPUSH
23169: PPUSH
23170: PPUSH
23171: PPUSH
23172: PPUSH
23173: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23174: LD_ADDR_VAR 0 6
23178: PUSH
23179: LD_INT 22
23181: PUSH
23182: LD_OWVAR 2
23186: PUSH
23187: EMPTY
23188: LIST
23189: LIST
23190: PUSH
23191: LD_INT 21
23193: PUSH
23194: LD_INT 1
23196: PUSH
23197: EMPTY
23198: LIST
23199: LIST
23200: PUSH
23201: LD_INT 3
23203: PUSH
23204: LD_INT 23
23206: PUSH
23207: LD_INT 0
23209: PUSH
23210: EMPTY
23211: LIST
23212: LIST
23213: PUSH
23214: EMPTY
23215: LIST
23216: LIST
23217: PUSH
23218: EMPTY
23219: LIST
23220: LIST
23221: LIST
23222: PPUSH
23223: CALL_OW 69
23227: ST_TO_ADDR
// if not tmp then
23228: LD_VAR 0 6
23232: NOT
23233: IFFALSE 23237
// exit ;
23235: GO 23383
// s1 := rand ( 1 , 4 ) ;
23237: LD_ADDR_VAR 0 2
23241: PUSH
23242: LD_INT 1
23244: PPUSH
23245: LD_INT 4
23247: PPUSH
23248: CALL_OW 12
23252: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
23253: LD_ADDR_VAR 0 4
23257: PUSH
23258: LD_VAR 0 6
23262: PUSH
23263: LD_INT 1
23265: ARRAY
23266: PPUSH
23267: LD_VAR 0 2
23271: PPUSH
23272: CALL_OW 259
23276: ST_TO_ADDR
// if s1 = 1 then
23277: LD_VAR 0 2
23281: PUSH
23282: LD_INT 1
23284: EQUAL
23285: IFFALSE 23305
// s2 := rand ( 2 , 4 ) else
23287: LD_ADDR_VAR 0 3
23291: PUSH
23292: LD_INT 2
23294: PPUSH
23295: LD_INT 4
23297: PPUSH
23298: CALL_OW 12
23302: ST_TO_ADDR
23303: GO 23313
// s2 := 1 ;
23305: LD_ADDR_VAR 0 3
23309: PUSH
23310: LD_INT 1
23312: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
23313: LD_ADDR_VAR 0 5
23317: PUSH
23318: LD_VAR 0 6
23322: PUSH
23323: LD_INT 1
23325: ARRAY
23326: PPUSH
23327: LD_VAR 0 3
23331: PPUSH
23332: CALL_OW 259
23336: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
23337: LD_VAR 0 6
23341: PUSH
23342: LD_INT 1
23344: ARRAY
23345: PPUSH
23346: LD_VAR 0 2
23350: PPUSH
23351: LD_VAR 0 5
23355: PPUSH
23356: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
23360: LD_VAR 0 6
23364: PUSH
23365: LD_INT 1
23367: ARRAY
23368: PPUSH
23369: LD_VAR 0 3
23373: PPUSH
23374: LD_VAR 0 4
23378: PPUSH
23379: CALL_OW 237
// end ;
23383: PPOPN 6
23385: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
23386: LD_EXP 22
23390: PUSH
23391: LD_EXP 69
23395: AND
23396: IFFALSE 23475
23398: GO 23400
23400: DISABLE
23401: LD_INT 0
23403: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
23404: LD_ADDR_VAR 0 1
23408: PUSH
23409: LD_INT 22
23411: PUSH
23412: LD_OWVAR 2
23416: PUSH
23417: EMPTY
23418: LIST
23419: LIST
23420: PUSH
23421: LD_INT 30
23423: PUSH
23424: LD_INT 3
23426: PUSH
23427: EMPTY
23428: LIST
23429: LIST
23430: PUSH
23431: EMPTY
23432: LIST
23433: LIST
23434: PPUSH
23435: CALL_OW 69
23439: ST_TO_ADDR
// if not tmp then
23440: LD_VAR 0 1
23444: NOT
23445: IFFALSE 23449
// exit ;
23447: GO 23475
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
23449: LD_VAR 0 1
23453: PUSH
23454: LD_INT 1
23456: PPUSH
23457: LD_VAR 0 1
23461: PPUSH
23462: CALL_OW 12
23466: ARRAY
23467: PPUSH
23468: LD_INT 1
23470: PPUSH
23471: CALL_OW 234
// end ;
23475: PPOPN 1
23477: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
23478: LD_EXP 22
23482: PUSH
23483: LD_EXP 70
23487: AND
23488: IFFALSE 23600
23490: GO 23492
23492: DISABLE
23493: LD_INT 0
23495: PPUSH
23496: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
23497: LD_ADDR_VAR 0 2
23501: PUSH
23502: LD_INT 22
23504: PUSH
23505: LD_OWVAR 2
23509: PUSH
23510: EMPTY
23511: LIST
23512: LIST
23513: PUSH
23514: LD_INT 2
23516: PUSH
23517: LD_INT 30
23519: PUSH
23520: LD_INT 27
23522: PUSH
23523: EMPTY
23524: LIST
23525: LIST
23526: PUSH
23527: LD_INT 30
23529: PUSH
23530: LD_INT 26
23532: PUSH
23533: EMPTY
23534: LIST
23535: LIST
23536: PUSH
23537: LD_INT 30
23539: PUSH
23540: LD_INT 28
23542: PUSH
23543: EMPTY
23544: LIST
23545: LIST
23546: PUSH
23547: EMPTY
23548: LIST
23549: LIST
23550: LIST
23551: LIST
23552: PUSH
23553: EMPTY
23554: LIST
23555: LIST
23556: PPUSH
23557: CALL_OW 69
23561: ST_TO_ADDR
// if not tmp then
23562: LD_VAR 0 2
23566: NOT
23567: IFFALSE 23571
// exit ;
23569: GO 23600
// for i in tmp do
23571: LD_ADDR_VAR 0 1
23575: PUSH
23576: LD_VAR 0 2
23580: PUSH
23581: FOR_IN
23582: IFFALSE 23598
// SetLives ( i , 1 ) ;
23584: LD_VAR 0 1
23588: PPUSH
23589: LD_INT 1
23591: PPUSH
23592: CALL_OW 234
23596: GO 23581
23598: POP
23599: POP
// end ;
23600: PPOPN 2
23602: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
23603: LD_EXP 22
23607: PUSH
23608: LD_EXP 71
23612: AND
23613: IFFALSE 23900
23615: GO 23617
23617: DISABLE
23618: LD_INT 0
23620: PPUSH
23621: PPUSH
23622: PPUSH
// begin i := rand ( 1 , 7 ) ;
23623: LD_ADDR_VAR 0 1
23627: PUSH
23628: LD_INT 1
23630: PPUSH
23631: LD_INT 7
23633: PPUSH
23634: CALL_OW 12
23638: ST_TO_ADDR
// case i of 1 :
23639: LD_VAR 0 1
23643: PUSH
23644: LD_INT 1
23646: DOUBLE
23647: EQUAL
23648: IFTRUE 23652
23650: GO 23662
23652: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
23653: LD_STRING earthquake(getX(game), 0, 32)
23655: PPUSH
23656: CALL_OW 559
23660: GO 23900
23662: LD_INT 2
23664: DOUBLE
23665: EQUAL
23666: IFTRUE 23670
23668: GO 23684
23670: POP
// begin ToLua ( displayStucuk(); ) ;
23671: LD_STRING displayStucuk();
23673: PPUSH
23674: CALL_OW 559
// ResetFog ;
23678: CALL_OW 335
// end ; 3 :
23682: GO 23900
23684: LD_INT 3
23686: DOUBLE
23687: EQUAL
23688: IFTRUE 23692
23690: GO 23796
23692: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23693: LD_ADDR_VAR 0 2
23697: PUSH
23698: LD_INT 22
23700: PUSH
23701: LD_OWVAR 2
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: PUSH
23710: LD_INT 25
23712: PUSH
23713: LD_INT 1
23715: PUSH
23716: EMPTY
23717: LIST
23718: LIST
23719: PUSH
23720: EMPTY
23721: LIST
23722: LIST
23723: PPUSH
23724: CALL_OW 69
23728: ST_TO_ADDR
// if not tmp then
23729: LD_VAR 0 2
23733: NOT
23734: IFFALSE 23738
// exit ;
23736: GO 23900
// un := tmp [ rand ( 1 , tmp ) ] ;
23738: LD_ADDR_VAR 0 3
23742: PUSH
23743: LD_VAR 0 2
23747: PUSH
23748: LD_INT 1
23750: PPUSH
23751: LD_VAR 0 2
23755: PPUSH
23756: CALL_OW 12
23760: ARRAY
23761: ST_TO_ADDR
// if Crawls ( un ) then
23762: LD_VAR 0 3
23766: PPUSH
23767: CALL_OW 318
23771: IFFALSE 23782
// ComWalk ( un ) ;
23773: LD_VAR 0 3
23777: PPUSH
23778: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23782: LD_VAR 0 3
23786: PPUSH
23787: LD_INT 8
23789: PPUSH
23790: CALL_OW 336
// end ; 4 :
23794: GO 23900
23796: LD_INT 4
23798: DOUBLE
23799: EQUAL
23800: IFTRUE 23804
23802: GO 23878
23804: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23805: LD_ADDR_VAR 0 2
23809: PUSH
23810: LD_INT 22
23812: PUSH
23813: LD_OWVAR 2
23817: PUSH
23818: EMPTY
23819: LIST
23820: LIST
23821: PUSH
23822: LD_INT 30
23824: PUSH
23825: LD_INT 29
23827: PUSH
23828: EMPTY
23829: LIST
23830: LIST
23831: PUSH
23832: EMPTY
23833: LIST
23834: LIST
23835: PPUSH
23836: CALL_OW 69
23840: ST_TO_ADDR
// if not tmp then
23841: LD_VAR 0 2
23845: NOT
23846: IFFALSE 23850
// exit ;
23848: GO 23900
// CenterNowOnUnits ( tmp [ 1 ] ) ;
23850: LD_VAR 0 2
23854: PUSH
23855: LD_INT 1
23857: ARRAY
23858: PPUSH
23859: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
23863: LD_VAR 0 2
23867: PUSH
23868: LD_INT 1
23870: ARRAY
23871: PPUSH
23872: CALL_OW 65
// end ; 5 .. 7 :
23876: GO 23900
23878: LD_INT 5
23880: DOUBLE
23881: GREATEREQUAL
23882: IFFALSE 23890
23884: LD_INT 7
23886: DOUBLE
23887: LESSEQUAL
23888: IFTRUE 23892
23890: GO 23899
23892: POP
// StreamSibBomb ; end ;
23893: CALL 20137 0 0
23897: GO 23900
23899: POP
// end ;
23900: PPOPN 3
23902: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
23903: LD_EXP 22
23907: PUSH
23908: LD_EXP 72
23912: AND
23913: IFFALSE 24069
23915: GO 23917
23917: DISABLE
23918: LD_INT 0
23920: PPUSH
23921: PPUSH
23922: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23923: LD_ADDR_VAR 0 2
23927: PUSH
23928: LD_INT 81
23930: PUSH
23931: LD_OWVAR 2
23935: PUSH
23936: EMPTY
23937: LIST
23938: LIST
23939: PUSH
23940: LD_INT 2
23942: PUSH
23943: LD_INT 21
23945: PUSH
23946: LD_INT 1
23948: PUSH
23949: EMPTY
23950: LIST
23951: LIST
23952: PUSH
23953: LD_INT 21
23955: PUSH
23956: LD_INT 2
23958: PUSH
23959: EMPTY
23960: LIST
23961: LIST
23962: PUSH
23963: EMPTY
23964: LIST
23965: LIST
23966: LIST
23967: PUSH
23968: EMPTY
23969: LIST
23970: LIST
23971: PPUSH
23972: CALL_OW 69
23976: ST_TO_ADDR
// if not tmp then
23977: LD_VAR 0 2
23981: NOT
23982: IFFALSE 23986
// exit ;
23984: GO 24069
// p := 0 ;
23986: LD_ADDR_VAR 0 3
23990: PUSH
23991: LD_INT 0
23993: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23994: LD_INT 35
23996: PPUSH
23997: CALL_OW 67
// p := p + 1 ;
24001: LD_ADDR_VAR 0 3
24005: PUSH
24006: LD_VAR 0 3
24010: PUSH
24011: LD_INT 1
24013: PLUS
24014: ST_TO_ADDR
// for i in tmp do
24015: LD_ADDR_VAR 0 1
24019: PUSH
24020: LD_VAR 0 2
24024: PUSH
24025: FOR_IN
24026: IFFALSE 24057
// if GetLives ( i ) < 1000 then
24028: LD_VAR 0 1
24032: PPUSH
24033: CALL_OW 256
24037: PUSH
24038: LD_INT 1000
24040: LESS
24041: IFFALSE 24055
// SetLives ( i , 1000 ) ;
24043: LD_VAR 0 1
24047: PPUSH
24048: LD_INT 1000
24050: PPUSH
24051: CALL_OW 234
24055: GO 24025
24057: POP
24058: POP
// until p > 20 ;
24059: LD_VAR 0 3
24063: PUSH
24064: LD_INT 20
24066: GREATER
24067: IFFALSE 23994
// end ;
24069: PPOPN 3
24071: END
// every 0 0$1 trigger StreamModeActive and sTime do
24072: LD_EXP 22
24076: PUSH
24077: LD_EXP 73
24081: AND
24082: IFFALSE 24117
24084: GO 24086
24086: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
24087: LD_INT 28
24089: PPUSH
24090: LD_OWVAR 2
24094: PPUSH
24095: LD_INT 2
24097: PPUSH
24098: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
24102: LD_INT 30
24104: PPUSH
24105: LD_OWVAR 2
24109: PPUSH
24110: LD_INT 2
24112: PPUSH
24113: CALL_OW 322
// end ;
24117: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
24118: LD_EXP 22
24122: PUSH
24123: LD_EXP 74
24127: AND
24128: IFFALSE 24249
24130: GO 24132
24132: DISABLE
24133: LD_INT 0
24135: PPUSH
24136: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24137: LD_ADDR_VAR 0 2
24141: PUSH
24142: LD_INT 22
24144: PUSH
24145: LD_OWVAR 2
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: PUSH
24154: LD_INT 21
24156: PUSH
24157: LD_INT 1
24159: PUSH
24160: EMPTY
24161: LIST
24162: LIST
24163: PUSH
24164: LD_INT 3
24166: PUSH
24167: LD_INT 23
24169: PUSH
24170: LD_INT 0
24172: PUSH
24173: EMPTY
24174: LIST
24175: LIST
24176: PUSH
24177: EMPTY
24178: LIST
24179: LIST
24180: PUSH
24181: EMPTY
24182: LIST
24183: LIST
24184: LIST
24185: PPUSH
24186: CALL_OW 69
24190: ST_TO_ADDR
// if not tmp then
24191: LD_VAR 0 2
24195: NOT
24196: IFFALSE 24200
// exit ;
24198: GO 24249
// for i in tmp do
24200: LD_ADDR_VAR 0 1
24204: PUSH
24205: LD_VAR 0 2
24209: PUSH
24210: FOR_IN
24211: IFFALSE 24247
// begin if Crawls ( i ) then
24213: LD_VAR 0 1
24217: PPUSH
24218: CALL_OW 318
24222: IFFALSE 24233
// ComWalk ( i ) ;
24224: LD_VAR 0 1
24228: PPUSH
24229: CALL_OW 138
// SetClass ( i , 2 ) ;
24233: LD_VAR 0 1
24237: PPUSH
24238: LD_INT 2
24240: PPUSH
24241: CALL_OW 336
// end ;
24245: GO 24210
24247: POP
24248: POP
// end ;
24249: PPOPN 2
24251: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
24252: LD_EXP 22
24256: PUSH
24257: LD_EXP 75
24261: AND
24262: IFFALSE 24550
24264: GO 24266
24266: DISABLE
24267: LD_INT 0
24269: PPUSH
24270: PPUSH
24271: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
24272: LD_OWVAR 2
24276: PPUSH
24277: LD_INT 9
24279: PPUSH
24280: LD_INT 1
24282: PPUSH
24283: LD_INT 1
24285: PPUSH
24286: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
24290: LD_INT 9
24292: PPUSH
24293: LD_OWVAR 2
24297: PPUSH
24298: CALL_OW 343
// uc_side := 9 ;
24302: LD_ADDR_OWVAR 20
24306: PUSH
24307: LD_INT 9
24309: ST_TO_ADDR
// uc_nation := 2 ;
24310: LD_ADDR_OWVAR 21
24314: PUSH
24315: LD_INT 2
24317: ST_TO_ADDR
// hc_name := Dark Warrior ;
24318: LD_ADDR_OWVAR 26
24322: PUSH
24323: LD_STRING Dark Warrior
24325: ST_TO_ADDR
// hc_gallery :=  ;
24326: LD_ADDR_OWVAR 33
24330: PUSH
24331: LD_STRING 
24333: ST_TO_ADDR
// hc_noskilllimit := true ;
24334: LD_ADDR_OWVAR 76
24338: PUSH
24339: LD_INT 1
24341: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
24342: LD_ADDR_OWVAR 31
24346: PUSH
24347: LD_INT 30
24349: PUSH
24350: LD_INT 30
24352: PUSH
24353: LD_INT 30
24355: PUSH
24356: LD_INT 30
24358: PUSH
24359: EMPTY
24360: LIST
24361: LIST
24362: LIST
24363: LIST
24364: ST_TO_ADDR
// un := CreateHuman ;
24365: LD_ADDR_VAR 0 3
24369: PUSH
24370: CALL_OW 44
24374: ST_TO_ADDR
// hc_noskilllimit := false ;
24375: LD_ADDR_OWVAR 76
24379: PUSH
24380: LD_INT 0
24382: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24383: LD_VAR 0 3
24387: PPUSH
24388: LD_INT 1
24390: PPUSH
24391: CALL_OW 51
// ToLua ( playRanger() ) ;
24395: LD_STRING playRanger()
24397: PPUSH
24398: CALL_OW 559
// p := 0 ;
24402: LD_ADDR_VAR 0 2
24406: PUSH
24407: LD_INT 0
24409: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24410: LD_INT 35
24412: PPUSH
24413: CALL_OW 67
// p := p + 1 ;
24417: LD_ADDR_VAR 0 2
24421: PUSH
24422: LD_VAR 0 2
24426: PUSH
24427: LD_INT 1
24429: PLUS
24430: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
24431: LD_VAR 0 3
24435: PPUSH
24436: CALL_OW 256
24440: PUSH
24441: LD_INT 1000
24443: LESS
24444: IFFALSE 24458
// SetLives ( un , 1000 ) ;
24446: LD_VAR 0 3
24450: PPUSH
24451: LD_INT 1000
24453: PPUSH
24454: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
24458: LD_VAR 0 3
24462: PPUSH
24463: LD_INT 81
24465: PUSH
24466: LD_OWVAR 2
24470: PUSH
24471: EMPTY
24472: LIST
24473: LIST
24474: PUSH
24475: LD_INT 91
24477: PUSH
24478: LD_VAR 0 3
24482: PUSH
24483: LD_INT 30
24485: PUSH
24486: EMPTY
24487: LIST
24488: LIST
24489: LIST
24490: PUSH
24491: EMPTY
24492: LIST
24493: LIST
24494: PPUSH
24495: CALL_OW 69
24499: PPUSH
24500: LD_VAR 0 3
24504: PPUSH
24505: CALL_OW 74
24509: PPUSH
24510: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
24514: LD_VAR 0 2
24518: PUSH
24519: LD_INT 80
24521: GREATER
24522: PUSH
24523: LD_VAR 0 3
24527: PPUSH
24528: CALL_OW 301
24532: OR
24533: IFFALSE 24410
// if un then
24535: LD_VAR 0 3
24539: IFFALSE 24550
// RemoveUnit ( un ) ;
24541: LD_VAR 0 3
24545: PPUSH
24546: CALL_OW 64
// end ;
24550: PPOPN 3
24552: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
24553: LD_EXP 76
24557: IFFALSE 24673
24559: GO 24561
24561: DISABLE
24562: LD_INT 0
24564: PPUSH
24565: PPUSH
24566: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24567: LD_ADDR_VAR 0 2
24571: PUSH
24572: LD_INT 81
24574: PUSH
24575: LD_OWVAR 2
24579: PUSH
24580: EMPTY
24581: LIST
24582: LIST
24583: PUSH
24584: LD_INT 21
24586: PUSH
24587: LD_INT 1
24589: PUSH
24590: EMPTY
24591: LIST
24592: LIST
24593: PUSH
24594: EMPTY
24595: LIST
24596: LIST
24597: PPUSH
24598: CALL_OW 69
24602: ST_TO_ADDR
// ToLua ( playComputer() ) ;
24603: LD_STRING playComputer()
24605: PPUSH
24606: CALL_OW 559
// if not tmp then
24610: LD_VAR 0 2
24614: NOT
24615: IFFALSE 24619
// exit ;
24617: GO 24673
// for i in tmp do
24619: LD_ADDR_VAR 0 1
24623: PUSH
24624: LD_VAR 0 2
24628: PUSH
24629: FOR_IN
24630: IFFALSE 24671
// for j := 1 to 4 do
24632: LD_ADDR_VAR 0 3
24636: PUSH
24637: DOUBLE
24638: LD_INT 1
24640: DEC
24641: ST_TO_ADDR
24642: LD_INT 4
24644: PUSH
24645: FOR_TO
24646: IFFALSE 24667
// SetSkill ( i , j , 10 ) ;
24648: LD_VAR 0 1
24652: PPUSH
24653: LD_VAR 0 3
24657: PPUSH
24658: LD_INT 10
24660: PPUSH
24661: CALL_OW 237
24665: GO 24645
24667: POP
24668: POP
24669: GO 24629
24671: POP
24672: POP
// end ;
24673: PPOPN 3
24675: END
// every 0 0$1 trigger s30 do var i , tmp ;
24676: LD_EXP 77
24680: IFFALSE 24749
24682: GO 24684
24684: DISABLE
24685: LD_INT 0
24687: PPUSH
24688: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24689: LD_ADDR_VAR 0 2
24693: PUSH
24694: LD_INT 22
24696: PUSH
24697: LD_OWVAR 2
24701: PUSH
24702: EMPTY
24703: LIST
24704: LIST
24705: PPUSH
24706: CALL_OW 69
24710: ST_TO_ADDR
// if not tmp then
24711: LD_VAR 0 2
24715: NOT
24716: IFFALSE 24720
// exit ;
24718: GO 24749
// for i in tmp do
24720: LD_ADDR_VAR 0 1
24724: PUSH
24725: LD_VAR 0 2
24729: PUSH
24730: FOR_IN
24731: IFFALSE 24747
// SetLives ( i , 300 ) ;
24733: LD_VAR 0 1
24737: PPUSH
24738: LD_INT 300
24740: PPUSH
24741: CALL_OW 234
24745: GO 24730
24747: POP
24748: POP
// end ;
24749: PPOPN 2
24751: END
// every 0 0$1 trigger s60 do var i , tmp ;
24752: LD_EXP 78
24756: IFFALSE 24825
24758: GO 24760
24760: DISABLE
24761: LD_INT 0
24763: PPUSH
24764: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24765: LD_ADDR_VAR 0 2
24769: PUSH
24770: LD_INT 22
24772: PUSH
24773: LD_OWVAR 2
24777: PUSH
24778: EMPTY
24779: LIST
24780: LIST
24781: PPUSH
24782: CALL_OW 69
24786: ST_TO_ADDR
// if not tmp then
24787: LD_VAR 0 2
24791: NOT
24792: IFFALSE 24796
// exit ;
24794: GO 24825
// for i in tmp do
24796: LD_ADDR_VAR 0 1
24800: PUSH
24801: LD_VAR 0 2
24805: PUSH
24806: FOR_IN
24807: IFFALSE 24823
// SetLives ( i , 600 ) ;
24809: LD_VAR 0 1
24813: PPUSH
24814: LD_INT 600
24816: PPUSH
24817: CALL_OW 234
24821: GO 24806
24823: POP
24824: POP
// end ;
24825: PPOPN 2
24827: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
24828: LD_INT 0
24830: PPUSH
// case cmd of 301 :
24831: LD_VAR 0 1
24835: PUSH
24836: LD_INT 301
24838: DOUBLE
24839: EQUAL
24840: IFTRUE 24844
24842: GO 24876
24844: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
24845: LD_VAR 0 6
24849: PPUSH
24850: LD_VAR 0 7
24854: PPUSH
24855: LD_VAR 0 8
24859: PPUSH
24860: LD_VAR 0 4
24864: PPUSH
24865: LD_VAR 0 5
24869: PPUSH
24870: CALL 26085 0 5
24874: GO 24997
24876: LD_INT 302
24878: DOUBLE
24879: EQUAL
24880: IFTRUE 24884
24882: GO 24921
24884: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
24885: LD_VAR 0 6
24889: PPUSH
24890: LD_VAR 0 7
24894: PPUSH
24895: LD_VAR 0 8
24899: PPUSH
24900: LD_VAR 0 9
24904: PPUSH
24905: LD_VAR 0 4
24909: PPUSH
24910: LD_VAR 0 5
24914: PPUSH
24915: CALL 26176 0 6
24919: GO 24997
24921: LD_INT 303
24923: DOUBLE
24924: EQUAL
24925: IFTRUE 24929
24927: GO 24966
24929: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
24930: LD_VAR 0 6
24934: PPUSH
24935: LD_VAR 0 7
24939: PPUSH
24940: LD_VAR 0 8
24944: PPUSH
24945: LD_VAR 0 9
24949: PPUSH
24950: LD_VAR 0 4
24954: PPUSH
24955: LD_VAR 0 5
24959: PPUSH
24960: CALL 25002 0 6
24964: GO 24997
24966: LD_INT 304
24968: DOUBLE
24969: EQUAL
24970: IFTRUE 24974
24972: GO 24996
24974: POP
// hHackTeleport ( unit , x , y ) ; end ;
24975: LD_VAR 0 2
24979: PPUSH
24980: LD_VAR 0 4
24984: PPUSH
24985: LD_VAR 0 5
24989: PPUSH
24990: CALL 26769 0 3
24994: GO 24997
24996: POP
// end ;
24997: LD_VAR 0 12
25001: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
25002: LD_INT 0
25004: PPUSH
25005: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
25006: LD_VAR 0 1
25010: PUSH
25011: LD_INT 1
25013: LESS
25014: PUSH
25015: LD_VAR 0 1
25019: PUSH
25020: LD_INT 3
25022: GREATER
25023: OR
25024: PUSH
25025: LD_VAR 0 5
25029: PPUSH
25030: LD_VAR 0 6
25034: PPUSH
25035: CALL_OW 428
25039: OR
25040: IFFALSE 25044
// exit ;
25042: GO 25772
// uc_side := your_side ;
25044: LD_ADDR_OWVAR 20
25048: PUSH
25049: LD_OWVAR 2
25053: ST_TO_ADDR
// uc_nation := nation ;
25054: LD_ADDR_OWVAR 21
25058: PUSH
25059: LD_VAR 0 1
25063: ST_TO_ADDR
// bc_level = 1 ;
25064: LD_ADDR_OWVAR 43
25068: PUSH
25069: LD_INT 1
25071: ST_TO_ADDR
// case btype of 1 :
25072: LD_VAR 0 2
25076: PUSH
25077: LD_INT 1
25079: DOUBLE
25080: EQUAL
25081: IFTRUE 25085
25083: GO 25096
25085: POP
// bc_type := b_depot ; 2 :
25086: LD_ADDR_OWVAR 42
25090: PUSH
25091: LD_INT 0
25093: ST_TO_ADDR
25094: GO 25716
25096: LD_INT 2
25098: DOUBLE
25099: EQUAL
25100: IFTRUE 25104
25102: GO 25115
25104: POP
// bc_type := b_warehouse ; 3 :
25105: LD_ADDR_OWVAR 42
25109: PUSH
25110: LD_INT 1
25112: ST_TO_ADDR
25113: GO 25716
25115: LD_INT 3
25117: DOUBLE
25118: EQUAL
25119: IFTRUE 25123
25121: GO 25134
25123: POP
// bc_type := b_lab ; 4 .. 9 :
25124: LD_ADDR_OWVAR 42
25128: PUSH
25129: LD_INT 6
25131: ST_TO_ADDR
25132: GO 25716
25134: LD_INT 4
25136: DOUBLE
25137: GREATEREQUAL
25138: IFFALSE 25146
25140: LD_INT 9
25142: DOUBLE
25143: LESSEQUAL
25144: IFTRUE 25148
25146: GO 25208
25148: POP
// begin bc_type := b_lab_half ;
25149: LD_ADDR_OWVAR 42
25153: PUSH
25154: LD_INT 7
25156: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
25157: LD_ADDR_OWVAR 44
25161: PUSH
25162: LD_INT 10
25164: PUSH
25165: LD_INT 11
25167: PUSH
25168: LD_INT 12
25170: PUSH
25171: LD_INT 15
25173: PUSH
25174: LD_INT 14
25176: PUSH
25177: LD_INT 13
25179: PUSH
25180: EMPTY
25181: LIST
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: PUSH
25188: LD_VAR 0 2
25192: PUSH
25193: LD_INT 3
25195: MINUS
25196: ARRAY
25197: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
25198: LD_ADDR_OWVAR 45
25202: PUSH
25203: LD_INT 9
25205: ST_TO_ADDR
// end ; 10 .. 13 :
25206: GO 25716
25208: LD_INT 10
25210: DOUBLE
25211: GREATEREQUAL
25212: IFFALSE 25220
25214: LD_INT 13
25216: DOUBLE
25217: LESSEQUAL
25218: IFTRUE 25222
25220: GO 25299
25222: POP
// begin bc_type := b_lab_full ;
25223: LD_ADDR_OWVAR 42
25227: PUSH
25228: LD_INT 8
25230: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
25231: LD_ADDR_OWVAR 44
25235: PUSH
25236: LD_INT 10
25238: PUSH
25239: LD_INT 12
25241: PUSH
25242: LD_INT 14
25244: PUSH
25245: LD_INT 13
25247: PUSH
25248: EMPTY
25249: LIST
25250: LIST
25251: LIST
25252: LIST
25253: PUSH
25254: LD_VAR 0 2
25258: PUSH
25259: LD_INT 9
25261: MINUS
25262: ARRAY
25263: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
25264: LD_ADDR_OWVAR 45
25268: PUSH
25269: LD_INT 11
25271: PUSH
25272: LD_INT 15
25274: PUSH
25275: LD_INT 12
25277: PUSH
25278: LD_INT 15
25280: PUSH
25281: EMPTY
25282: LIST
25283: LIST
25284: LIST
25285: LIST
25286: PUSH
25287: LD_VAR 0 2
25291: PUSH
25292: LD_INT 9
25294: MINUS
25295: ARRAY
25296: ST_TO_ADDR
// end ; 14 :
25297: GO 25716
25299: LD_INT 14
25301: DOUBLE
25302: EQUAL
25303: IFTRUE 25307
25305: GO 25318
25307: POP
// bc_type := b_workshop ; 15 :
25308: LD_ADDR_OWVAR 42
25312: PUSH
25313: LD_INT 2
25315: ST_TO_ADDR
25316: GO 25716
25318: LD_INT 15
25320: DOUBLE
25321: EQUAL
25322: IFTRUE 25326
25324: GO 25337
25326: POP
// bc_type := b_factory ; 16 :
25327: LD_ADDR_OWVAR 42
25331: PUSH
25332: LD_INT 3
25334: ST_TO_ADDR
25335: GO 25716
25337: LD_INT 16
25339: DOUBLE
25340: EQUAL
25341: IFTRUE 25345
25343: GO 25356
25345: POP
// bc_type := b_ext_gun ; 17 :
25346: LD_ADDR_OWVAR 42
25350: PUSH
25351: LD_INT 17
25353: ST_TO_ADDR
25354: GO 25716
25356: LD_INT 17
25358: DOUBLE
25359: EQUAL
25360: IFTRUE 25364
25362: GO 25392
25364: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
25365: LD_ADDR_OWVAR 42
25369: PUSH
25370: LD_INT 19
25372: PUSH
25373: LD_INT 23
25375: PUSH
25376: LD_INT 19
25378: PUSH
25379: EMPTY
25380: LIST
25381: LIST
25382: LIST
25383: PUSH
25384: LD_VAR 0 1
25388: ARRAY
25389: ST_TO_ADDR
25390: GO 25716
25392: LD_INT 18
25394: DOUBLE
25395: EQUAL
25396: IFTRUE 25400
25398: GO 25411
25400: POP
// bc_type := b_ext_radar ; 19 :
25401: LD_ADDR_OWVAR 42
25405: PUSH
25406: LD_INT 20
25408: ST_TO_ADDR
25409: GO 25716
25411: LD_INT 19
25413: DOUBLE
25414: EQUAL
25415: IFTRUE 25419
25417: GO 25430
25419: POP
// bc_type := b_ext_radio ; 20 :
25420: LD_ADDR_OWVAR 42
25424: PUSH
25425: LD_INT 22
25427: ST_TO_ADDR
25428: GO 25716
25430: LD_INT 20
25432: DOUBLE
25433: EQUAL
25434: IFTRUE 25438
25436: GO 25449
25438: POP
// bc_type := b_ext_siberium ; 21 :
25439: LD_ADDR_OWVAR 42
25443: PUSH
25444: LD_INT 21
25446: ST_TO_ADDR
25447: GO 25716
25449: LD_INT 21
25451: DOUBLE
25452: EQUAL
25453: IFTRUE 25457
25455: GO 25468
25457: POP
// bc_type := b_ext_computer ; 22 :
25458: LD_ADDR_OWVAR 42
25462: PUSH
25463: LD_INT 24
25465: ST_TO_ADDR
25466: GO 25716
25468: LD_INT 22
25470: DOUBLE
25471: EQUAL
25472: IFTRUE 25476
25474: GO 25487
25476: POP
// bc_type := b_ext_track ; 23 :
25477: LD_ADDR_OWVAR 42
25481: PUSH
25482: LD_INT 16
25484: ST_TO_ADDR
25485: GO 25716
25487: LD_INT 23
25489: DOUBLE
25490: EQUAL
25491: IFTRUE 25495
25493: GO 25506
25495: POP
// bc_type := b_ext_laser ; 24 :
25496: LD_ADDR_OWVAR 42
25500: PUSH
25501: LD_INT 25
25503: ST_TO_ADDR
25504: GO 25716
25506: LD_INT 24
25508: DOUBLE
25509: EQUAL
25510: IFTRUE 25514
25512: GO 25525
25514: POP
// bc_type := b_control_tower ; 25 :
25515: LD_ADDR_OWVAR 42
25519: PUSH
25520: LD_INT 36
25522: ST_TO_ADDR
25523: GO 25716
25525: LD_INT 25
25527: DOUBLE
25528: EQUAL
25529: IFTRUE 25533
25531: GO 25544
25533: POP
// bc_type := b_breastwork ; 26 :
25534: LD_ADDR_OWVAR 42
25538: PUSH
25539: LD_INT 31
25541: ST_TO_ADDR
25542: GO 25716
25544: LD_INT 26
25546: DOUBLE
25547: EQUAL
25548: IFTRUE 25552
25550: GO 25563
25552: POP
// bc_type := b_bunker ; 27 :
25553: LD_ADDR_OWVAR 42
25557: PUSH
25558: LD_INT 32
25560: ST_TO_ADDR
25561: GO 25716
25563: LD_INT 27
25565: DOUBLE
25566: EQUAL
25567: IFTRUE 25571
25569: GO 25582
25571: POP
// bc_type := b_turret ; 28 :
25572: LD_ADDR_OWVAR 42
25576: PUSH
25577: LD_INT 33
25579: ST_TO_ADDR
25580: GO 25716
25582: LD_INT 28
25584: DOUBLE
25585: EQUAL
25586: IFTRUE 25590
25588: GO 25601
25590: POP
// bc_type := b_armoury ; 29 :
25591: LD_ADDR_OWVAR 42
25595: PUSH
25596: LD_INT 4
25598: ST_TO_ADDR
25599: GO 25716
25601: LD_INT 29
25603: DOUBLE
25604: EQUAL
25605: IFTRUE 25609
25607: GO 25620
25609: POP
// bc_type := b_barracks ; 30 :
25610: LD_ADDR_OWVAR 42
25614: PUSH
25615: LD_INT 5
25617: ST_TO_ADDR
25618: GO 25716
25620: LD_INT 30
25622: DOUBLE
25623: EQUAL
25624: IFTRUE 25628
25626: GO 25639
25628: POP
// bc_type := b_solar_power ; 31 :
25629: LD_ADDR_OWVAR 42
25633: PUSH
25634: LD_INT 27
25636: ST_TO_ADDR
25637: GO 25716
25639: LD_INT 31
25641: DOUBLE
25642: EQUAL
25643: IFTRUE 25647
25645: GO 25658
25647: POP
// bc_type := b_oil_power ; 32 :
25648: LD_ADDR_OWVAR 42
25652: PUSH
25653: LD_INT 26
25655: ST_TO_ADDR
25656: GO 25716
25658: LD_INT 32
25660: DOUBLE
25661: EQUAL
25662: IFTRUE 25666
25664: GO 25677
25666: POP
// bc_type := b_siberite_power ; 33 :
25667: LD_ADDR_OWVAR 42
25671: PUSH
25672: LD_INT 28
25674: ST_TO_ADDR
25675: GO 25716
25677: LD_INT 33
25679: DOUBLE
25680: EQUAL
25681: IFTRUE 25685
25683: GO 25696
25685: POP
// bc_type := b_oil_mine ; 34 :
25686: LD_ADDR_OWVAR 42
25690: PUSH
25691: LD_INT 29
25693: ST_TO_ADDR
25694: GO 25716
25696: LD_INT 34
25698: DOUBLE
25699: EQUAL
25700: IFTRUE 25704
25702: GO 25715
25704: POP
// bc_type := b_siberite_mine ; end ;
25705: LD_ADDR_OWVAR 42
25709: PUSH
25710: LD_INT 30
25712: ST_TO_ADDR
25713: GO 25716
25715: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
25716: LD_ADDR_VAR 0 8
25720: PUSH
25721: LD_VAR 0 5
25725: PPUSH
25726: LD_VAR 0 6
25730: PPUSH
25731: LD_VAR 0 3
25735: PPUSH
25736: CALL_OW 47
25740: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
25741: LD_OWVAR 42
25745: PUSH
25746: LD_INT 32
25748: PUSH
25749: LD_INT 33
25751: PUSH
25752: EMPTY
25753: LIST
25754: LIST
25755: IN
25756: IFFALSE 25772
// PlaceWeaponTurret ( b , weapon ) ;
25758: LD_VAR 0 8
25762: PPUSH
25763: LD_VAR 0 4
25767: PPUSH
25768: CALL_OW 431
// end ;
25772: LD_VAR 0 7
25776: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
25777: LD_INT 0
25779: PPUSH
25780: PPUSH
25781: PPUSH
25782: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25783: LD_ADDR_VAR 0 4
25787: PUSH
25788: LD_INT 22
25790: PUSH
25791: LD_OWVAR 2
25795: PUSH
25796: EMPTY
25797: LIST
25798: LIST
25799: PUSH
25800: LD_INT 2
25802: PUSH
25803: LD_INT 30
25805: PUSH
25806: LD_INT 0
25808: PUSH
25809: EMPTY
25810: LIST
25811: LIST
25812: PUSH
25813: LD_INT 30
25815: PUSH
25816: LD_INT 1
25818: PUSH
25819: EMPTY
25820: LIST
25821: LIST
25822: PUSH
25823: EMPTY
25824: LIST
25825: LIST
25826: LIST
25827: PUSH
25828: EMPTY
25829: LIST
25830: LIST
25831: PPUSH
25832: CALL_OW 69
25836: ST_TO_ADDR
// if not tmp then
25837: LD_VAR 0 4
25841: NOT
25842: IFFALSE 25846
// exit ;
25844: GO 25905
// for i in tmp do
25846: LD_ADDR_VAR 0 2
25850: PUSH
25851: LD_VAR 0 4
25855: PUSH
25856: FOR_IN
25857: IFFALSE 25903
// for j = 1 to 3 do
25859: LD_ADDR_VAR 0 3
25863: PUSH
25864: DOUBLE
25865: LD_INT 1
25867: DEC
25868: ST_TO_ADDR
25869: LD_INT 3
25871: PUSH
25872: FOR_TO
25873: IFFALSE 25899
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
25875: LD_VAR 0 2
25879: PPUSH
25880: CALL_OW 274
25884: PPUSH
25885: LD_VAR 0 3
25889: PPUSH
25890: LD_INT 99999
25892: PPUSH
25893: CALL_OW 277
25897: GO 25872
25899: POP
25900: POP
25901: GO 25856
25903: POP
25904: POP
// end ;
25905: LD_VAR 0 1
25909: RET
// export function hHackSetLevel10 ; var i , j ; begin
25910: LD_INT 0
25912: PPUSH
25913: PPUSH
25914: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25915: LD_ADDR_VAR 0 2
25919: PUSH
25920: LD_INT 21
25922: PUSH
25923: LD_INT 1
25925: PUSH
25926: EMPTY
25927: LIST
25928: LIST
25929: PPUSH
25930: CALL_OW 69
25934: PUSH
25935: FOR_IN
25936: IFFALSE 25988
// if IsSelected ( i ) then
25938: LD_VAR 0 2
25942: PPUSH
25943: CALL_OW 306
25947: IFFALSE 25986
// begin for j := 1 to 4 do
25949: LD_ADDR_VAR 0 3
25953: PUSH
25954: DOUBLE
25955: LD_INT 1
25957: DEC
25958: ST_TO_ADDR
25959: LD_INT 4
25961: PUSH
25962: FOR_TO
25963: IFFALSE 25984
// SetSkill ( i , j , 10 ) ;
25965: LD_VAR 0 2
25969: PPUSH
25970: LD_VAR 0 3
25974: PPUSH
25975: LD_INT 10
25977: PPUSH
25978: CALL_OW 237
25982: GO 25962
25984: POP
25985: POP
// end ;
25986: GO 25935
25988: POP
25989: POP
// end ;
25990: LD_VAR 0 1
25994: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
25995: LD_INT 0
25997: PPUSH
25998: PPUSH
25999: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
26000: LD_ADDR_VAR 0 2
26004: PUSH
26005: LD_INT 22
26007: PUSH
26008: LD_OWVAR 2
26012: PUSH
26013: EMPTY
26014: LIST
26015: LIST
26016: PUSH
26017: LD_INT 21
26019: PUSH
26020: LD_INT 1
26022: PUSH
26023: EMPTY
26024: LIST
26025: LIST
26026: PUSH
26027: EMPTY
26028: LIST
26029: LIST
26030: PPUSH
26031: CALL_OW 69
26035: PUSH
26036: FOR_IN
26037: IFFALSE 26078
// begin for j := 1 to 4 do
26039: LD_ADDR_VAR 0 3
26043: PUSH
26044: DOUBLE
26045: LD_INT 1
26047: DEC
26048: ST_TO_ADDR
26049: LD_INT 4
26051: PUSH
26052: FOR_TO
26053: IFFALSE 26074
// SetSkill ( i , j , 10 ) ;
26055: LD_VAR 0 2
26059: PPUSH
26060: LD_VAR 0 3
26064: PPUSH
26065: LD_INT 10
26067: PPUSH
26068: CALL_OW 237
26072: GO 26052
26074: POP
26075: POP
// end ;
26076: GO 26036
26078: POP
26079: POP
// end ;
26080: LD_VAR 0 1
26084: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
26085: LD_INT 0
26087: PPUSH
// uc_side := your_side ;
26088: LD_ADDR_OWVAR 20
26092: PUSH
26093: LD_OWVAR 2
26097: ST_TO_ADDR
// uc_nation := nation ;
26098: LD_ADDR_OWVAR 21
26102: PUSH
26103: LD_VAR 0 1
26107: ST_TO_ADDR
// InitHc ;
26108: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
26112: LD_INT 0
26114: PPUSH
26115: LD_VAR 0 2
26119: PPUSH
26120: LD_VAR 0 3
26124: PPUSH
26125: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
26129: LD_VAR 0 4
26133: PPUSH
26134: LD_VAR 0 5
26138: PPUSH
26139: CALL_OW 428
26143: PUSH
26144: LD_INT 0
26146: EQUAL
26147: IFFALSE 26171
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
26149: CALL_OW 44
26153: PPUSH
26154: LD_VAR 0 4
26158: PPUSH
26159: LD_VAR 0 5
26163: PPUSH
26164: LD_INT 1
26166: PPUSH
26167: CALL_OW 48
// end ;
26171: LD_VAR 0 6
26175: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
26176: LD_INT 0
26178: PPUSH
26179: PPUSH
// uc_side := your_side ;
26180: LD_ADDR_OWVAR 20
26184: PUSH
26185: LD_OWVAR 2
26189: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
26190: LD_VAR 0 1
26194: PUSH
26195: LD_INT 1
26197: PUSH
26198: LD_INT 2
26200: PUSH
26201: LD_INT 3
26203: PUSH
26204: LD_INT 4
26206: PUSH
26207: LD_INT 5
26209: PUSH
26210: EMPTY
26211: LIST
26212: LIST
26213: LIST
26214: LIST
26215: LIST
26216: IN
26217: IFFALSE 26229
// uc_nation := nation_american else
26219: LD_ADDR_OWVAR 21
26223: PUSH
26224: LD_INT 1
26226: ST_TO_ADDR
26227: GO 26272
// if chassis in [ 11 , 12 , 13 , 14 ] then
26229: LD_VAR 0 1
26233: PUSH
26234: LD_INT 11
26236: PUSH
26237: LD_INT 12
26239: PUSH
26240: LD_INT 13
26242: PUSH
26243: LD_INT 14
26245: PUSH
26246: EMPTY
26247: LIST
26248: LIST
26249: LIST
26250: LIST
26251: IN
26252: IFFALSE 26264
// uc_nation := nation_arabian else
26254: LD_ADDR_OWVAR 21
26258: PUSH
26259: LD_INT 2
26261: ST_TO_ADDR
26262: GO 26272
// uc_nation := nation_russian ;
26264: LD_ADDR_OWVAR 21
26268: PUSH
26269: LD_INT 3
26271: ST_TO_ADDR
// vc_chassis := chassis ;
26272: LD_ADDR_OWVAR 37
26276: PUSH
26277: LD_VAR 0 1
26281: ST_TO_ADDR
// vc_engine := engine ;
26282: LD_ADDR_OWVAR 39
26286: PUSH
26287: LD_VAR 0 2
26291: ST_TO_ADDR
// vc_control := control ;
26292: LD_ADDR_OWVAR 38
26296: PUSH
26297: LD_VAR 0 3
26301: ST_TO_ADDR
// vc_weapon := weapon ;
26302: LD_ADDR_OWVAR 40
26306: PUSH
26307: LD_VAR 0 4
26311: ST_TO_ADDR
// un := CreateVehicle ;
26312: LD_ADDR_VAR 0 8
26316: PUSH
26317: CALL_OW 45
26321: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
26322: LD_VAR 0 8
26326: PPUSH
26327: LD_INT 0
26329: PPUSH
26330: LD_INT 5
26332: PPUSH
26333: CALL_OW 12
26337: PPUSH
26338: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
26342: LD_VAR 0 8
26346: PPUSH
26347: LD_VAR 0 5
26351: PPUSH
26352: LD_VAR 0 6
26356: PPUSH
26357: LD_INT 1
26359: PPUSH
26360: CALL_OW 48
// end ;
26364: LD_VAR 0 7
26368: RET
// export hInvincible ; every 1 do
26369: GO 26371
26371: DISABLE
// hInvincible := [ ] ;
26372: LD_ADDR_EXP 79
26376: PUSH
26377: EMPTY
26378: ST_TO_ADDR
26379: END
// every 10 do var i ;
26380: GO 26382
26382: DISABLE
26383: LD_INT 0
26385: PPUSH
// begin enable ;
26386: ENABLE
// if not hInvincible then
26387: LD_EXP 79
26391: NOT
26392: IFFALSE 26396
// exit ;
26394: GO 26440
// for i in hInvincible do
26396: LD_ADDR_VAR 0 1
26400: PUSH
26401: LD_EXP 79
26405: PUSH
26406: FOR_IN
26407: IFFALSE 26438
// if GetLives ( i ) < 1000 then
26409: LD_VAR 0 1
26413: PPUSH
26414: CALL_OW 256
26418: PUSH
26419: LD_INT 1000
26421: LESS
26422: IFFALSE 26436
// SetLives ( i , 1000 ) ;
26424: LD_VAR 0 1
26428: PPUSH
26429: LD_INT 1000
26431: PPUSH
26432: CALL_OW 234
26436: GO 26406
26438: POP
26439: POP
// end ;
26440: PPOPN 1
26442: END
// export function hHackInvincible ; var i ; begin
26443: LD_INT 0
26445: PPUSH
26446: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
26447: LD_ADDR_VAR 0 2
26451: PUSH
26452: LD_INT 2
26454: PUSH
26455: LD_INT 21
26457: PUSH
26458: LD_INT 1
26460: PUSH
26461: EMPTY
26462: LIST
26463: LIST
26464: PUSH
26465: LD_INT 21
26467: PUSH
26468: LD_INT 2
26470: PUSH
26471: EMPTY
26472: LIST
26473: LIST
26474: PUSH
26475: EMPTY
26476: LIST
26477: LIST
26478: LIST
26479: PPUSH
26480: CALL_OW 69
26484: PUSH
26485: FOR_IN
26486: IFFALSE 26547
// if IsSelected ( i ) then
26488: LD_VAR 0 2
26492: PPUSH
26493: CALL_OW 306
26497: IFFALSE 26545
// begin if i in hInvincible then
26499: LD_VAR 0 2
26503: PUSH
26504: LD_EXP 79
26508: IN
26509: IFFALSE 26529
// hInvincible := hInvincible diff i else
26511: LD_ADDR_EXP 79
26515: PUSH
26516: LD_EXP 79
26520: PUSH
26521: LD_VAR 0 2
26525: DIFF
26526: ST_TO_ADDR
26527: GO 26545
// hInvincible := hInvincible union i ;
26529: LD_ADDR_EXP 79
26533: PUSH
26534: LD_EXP 79
26538: PUSH
26539: LD_VAR 0 2
26543: UNION
26544: ST_TO_ADDR
// end ;
26545: GO 26485
26547: POP
26548: POP
// end ;
26549: LD_VAR 0 1
26553: RET
// export function hHackInvisible ; var i , j ; begin
26554: LD_INT 0
26556: PPUSH
26557: PPUSH
26558: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
26559: LD_ADDR_VAR 0 2
26563: PUSH
26564: LD_INT 21
26566: PUSH
26567: LD_INT 1
26569: PUSH
26570: EMPTY
26571: LIST
26572: LIST
26573: PPUSH
26574: CALL_OW 69
26578: PUSH
26579: FOR_IN
26580: IFFALSE 26604
// if IsSelected ( i ) then
26582: LD_VAR 0 2
26586: PPUSH
26587: CALL_OW 306
26591: IFFALSE 26602
// ComForceInvisible ( i ) ;
26593: LD_VAR 0 2
26597: PPUSH
26598: CALL_OW 496
26602: GO 26579
26604: POP
26605: POP
// end ;
26606: LD_VAR 0 1
26610: RET
// export function hHackChangeYourSide ; begin
26611: LD_INT 0
26613: PPUSH
// if your_side = 8 then
26614: LD_OWVAR 2
26618: PUSH
26619: LD_INT 8
26621: EQUAL
26622: IFFALSE 26634
// your_side := 0 else
26624: LD_ADDR_OWVAR 2
26628: PUSH
26629: LD_INT 0
26631: ST_TO_ADDR
26632: GO 26648
// your_side := your_side + 1 ;
26634: LD_ADDR_OWVAR 2
26638: PUSH
26639: LD_OWVAR 2
26643: PUSH
26644: LD_INT 1
26646: PLUS
26647: ST_TO_ADDR
// end ;
26648: LD_VAR 0 1
26652: RET
// export function hHackChangeUnitSide ; var i , j ; begin
26653: LD_INT 0
26655: PPUSH
26656: PPUSH
26657: PPUSH
// for i in all_units do
26658: LD_ADDR_VAR 0 2
26662: PUSH
26663: LD_OWVAR 3
26667: PUSH
26668: FOR_IN
26669: IFFALSE 26747
// if IsSelected ( i ) then
26671: LD_VAR 0 2
26675: PPUSH
26676: CALL_OW 306
26680: IFFALSE 26745
// begin j := GetSide ( i ) ;
26682: LD_ADDR_VAR 0 3
26686: PUSH
26687: LD_VAR 0 2
26691: PPUSH
26692: CALL_OW 255
26696: ST_TO_ADDR
// if j = 8 then
26697: LD_VAR 0 3
26701: PUSH
26702: LD_INT 8
26704: EQUAL
26705: IFFALSE 26717
// j := 0 else
26707: LD_ADDR_VAR 0 3
26711: PUSH
26712: LD_INT 0
26714: ST_TO_ADDR
26715: GO 26731
// j := j + 1 ;
26717: LD_ADDR_VAR 0 3
26721: PUSH
26722: LD_VAR 0 3
26726: PUSH
26727: LD_INT 1
26729: PLUS
26730: ST_TO_ADDR
// SetSide ( i , j ) ;
26731: LD_VAR 0 2
26735: PPUSH
26736: LD_VAR 0 3
26740: PPUSH
26741: CALL_OW 235
// end ;
26745: GO 26668
26747: POP
26748: POP
// end ;
26749: LD_VAR 0 1
26753: RET
// export function hHackFog ; begin
26754: LD_INT 0
26756: PPUSH
// FogOff ( true ) ;
26757: LD_INT 1
26759: PPUSH
26760: CALL_OW 344
// end ;
26764: LD_VAR 0 1
26768: RET
// export function hHackTeleport ( unit , x , y ) ; begin
26769: LD_INT 0
26771: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
26772: LD_VAR 0 1
26776: PPUSH
26777: LD_VAR 0 2
26781: PPUSH
26782: LD_VAR 0 3
26786: PPUSH
26787: LD_INT 1
26789: PPUSH
26790: LD_INT 1
26792: PPUSH
26793: CALL_OW 483
// CenterOnXY ( x , y ) ;
26797: LD_VAR 0 2
26801: PPUSH
26802: LD_VAR 0 3
26806: PPUSH
26807: CALL_OW 84
// end ;
26811: LD_VAR 0 4
26815: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
26816: LD_INT 0
26818: PPUSH
26819: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
26820: LD_VAR 0 1
26824: NOT
26825: PUSH
26826: LD_VAR 0 2
26830: PPUSH
26831: LD_VAR 0 3
26835: PPUSH
26836: CALL_OW 488
26840: NOT
26841: OR
26842: PUSH
26843: LD_VAR 0 1
26847: PPUSH
26848: CALL_OW 266
26852: PUSH
26853: LD_INT 3
26855: NONEQUAL
26856: PUSH
26857: LD_VAR 0 1
26861: PPUSH
26862: CALL_OW 247
26866: PUSH
26867: LD_INT 1
26869: EQUAL
26870: NOT
26871: AND
26872: OR
26873: IFFALSE 26877
// exit ;
26875: GO 27159
// if GetType ( factory ) = unit_human then
26877: LD_VAR 0 1
26881: PPUSH
26882: CALL_OW 247
26886: PUSH
26887: LD_INT 1
26889: EQUAL
26890: IFFALSE 26907
// factory := IsInUnit ( factory ) ;
26892: LD_ADDR_VAR 0 1
26896: PUSH
26897: LD_VAR 0 1
26901: PPUSH
26902: CALL_OW 310
26906: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
26907: LD_VAR 0 1
26911: PPUSH
26912: CALL_OW 266
26916: PUSH
26917: LD_INT 3
26919: NONEQUAL
26920: IFFALSE 26924
// exit ;
26922: GO 27159
// for i := 1 to Count ( factoryWaypoints ) do
26924: LD_ADDR_VAR 0 5
26928: PUSH
26929: DOUBLE
26930: LD_INT 1
26932: DEC
26933: ST_TO_ADDR
26934: LD_EXP 80
26938: PPUSH
26939: CALL 35805 0 1
26943: PUSH
26944: FOR_TO
26945: IFFALSE 27107
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
26947: LD_VAR 0 2
26951: PPUSH
26952: LD_VAR 0 3
26956: PPUSH
26957: CALL_OW 428
26961: PUSH
26962: LD_EXP 80
26966: PUSH
26967: LD_VAR 0 5
26971: ARRAY
26972: PUSH
26973: LD_INT 2
26975: ARRAY
26976: EQUAL
26977: IFFALSE 27009
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
26979: LD_ADDR_EXP 80
26983: PUSH
26984: LD_EXP 80
26988: PPUSH
26989: LD_VAR 0 5
26993: PPUSH
26994: CALL_OW 3
26998: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26999: CALL 27164 0 0
// exit ;
27003: POP
27004: POP
27005: GO 27159
// end else
27007: GO 27105
// if factory = factoryWaypoints [ i ] [ 2 ] then
27009: LD_VAR 0 1
27013: PUSH
27014: LD_EXP 80
27018: PUSH
27019: LD_VAR 0 5
27023: ARRAY
27024: PUSH
27025: LD_INT 2
27027: ARRAY
27028: EQUAL
27029: IFFALSE 27105
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
27031: LD_ADDR_EXP 80
27035: PUSH
27036: LD_EXP 80
27040: PPUSH
27041: LD_VAR 0 5
27045: PPUSH
27046: CALL_OW 3
27050: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
27051: LD_ADDR_EXP 80
27055: PUSH
27056: LD_EXP 80
27060: PPUSH
27061: LD_VAR 0 1
27065: PPUSH
27066: CALL_OW 255
27070: PUSH
27071: LD_VAR 0 1
27075: PUSH
27076: LD_VAR 0 2
27080: PUSH
27081: LD_VAR 0 3
27085: PUSH
27086: EMPTY
27087: LIST
27088: LIST
27089: LIST
27090: LIST
27091: PPUSH
27092: CALL 71414 0 2
27096: ST_TO_ADDR
// UpdateFactoryWaypoints ;
27097: CALL 27164 0 0
// exit ;
27101: POP
27102: POP
27103: GO 27159
// end ; end ;
27105: GO 26944
27107: POP
27108: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
27109: LD_ADDR_EXP 80
27113: PUSH
27114: LD_EXP 80
27118: PPUSH
27119: LD_VAR 0 1
27123: PPUSH
27124: CALL_OW 255
27128: PUSH
27129: LD_VAR 0 1
27133: PUSH
27134: LD_VAR 0 2
27138: PUSH
27139: LD_VAR 0 3
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: LIST
27148: LIST
27149: PPUSH
27150: CALL 71414 0 2
27154: ST_TO_ADDR
// UpdateFactoryWaypoints ;
27155: CALL 27164 0 0
// end ;
27159: LD_VAR 0 4
27163: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
27164: LD_INT 0
27166: PPUSH
27167: PPUSH
27168: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
27169: LD_STRING resetFactoryWaypoint();
27171: PPUSH
27172: CALL_OW 559
// if factoryWaypoints then
27176: LD_EXP 80
27180: IFFALSE 27301
// begin list := factoryWaypoints ;
27182: LD_ADDR_VAR 0 3
27186: PUSH
27187: LD_EXP 80
27191: ST_TO_ADDR
// for i := 1 to list do
27192: LD_ADDR_VAR 0 2
27196: PUSH
27197: DOUBLE
27198: LD_INT 1
27200: DEC
27201: ST_TO_ADDR
27202: LD_VAR 0 3
27206: PUSH
27207: FOR_TO
27208: IFFALSE 27299
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
27210: LD_STRING setFactoryWaypointXY(
27212: PUSH
27213: LD_VAR 0 3
27217: PUSH
27218: LD_VAR 0 2
27222: ARRAY
27223: PUSH
27224: LD_INT 1
27226: ARRAY
27227: STR
27228: PUSH
27229: LD_STRING ,
27231: STR
27232: PUSH
27233: LD_VAR 0 3
27237: PUSH
27238: LD_VAR 0 2
27242: ARRAY
27243: PUSH
27244: LD_INT 2
27246: ARRAY
27247: STR
27248: PUSH
27249: LD_STRING ,
27251: STR
27252: PUSH
27253: LD_VAR 0 3
27257: PUSH
27258: LD_VAR 0 2
27262: ARRAY
27263: PUSH
27264: LD_INT 3
27266: ARRAY
27267: STR
27268: PUSH
27269: LD_STRING ,
27271: STR
27272: PUSH
27273: LD_VAR 0 3
27277: PUSH
27278: LD_VAR 0 2
27282: ARRAY
27283: PUSH
27284: LD_INT 4
27286: ARRAY
27287: STR
27288: PUSH
27289: LD_STRING )
27291: STR
27292: PPUSH
27293: CALL_OW 559
27297: GO 27207
27299: POP
27300: POP
// end ; end ;
27301: LD_VAR 0 1
27305: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
27306: LD_INT 0
27308: PPUSH
// if HexInfo ( x , y ) = warehouse then
27309: LD_VAR 0 2
27313: PPUSH
27314: LD_VAR 0 3
27318: PPUSH
27319: CALL_OW 428
27323: PUSH
27324: LD_VAR 0 1
27328: EQUAL
27329: IFFALSE 27356
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
27331: LD_ADDR_EXP 82
27335: PUSH
27336: LD_EXP 82
27340: PPUSH
27341: LD_VAR 0 1
27345: PPUSH
27346: LD_INT 0
27348: PPUSH
27349: CALL_OW 1
27353: ST_TO_ADDR
27354: GO 27407
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
27356: LD_ADDR_EXP 82
27360: PUSH
27361: LD_EXP 82
27365: PPUSH
27366: LD_VAR 0 1
27370: PPUSH
27371: LD_VAR 0 1
27375: PPUSH
27376: CALL_OW 255
27380: PUSH
27381: LD_VAR 0 1
27385: PUSH
27386: LD_VAR 0 2
27390: PUSH
27391: LD_VAR 0 3
27395: PUSH
27396: EMPTY
27397: LIST
27398: LIST
27399: LIST
27400: LIST
27401: PPUSH
27402: CALL_OW 1
27406: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
27407: CALL 27416 0 0
// end ;
27411: LD_VAR 0 4
27415: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
27416: LD_INT 0
27418: PPUSH
27419: PPUSH
27420: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
27421: LD_STRING resetWarehouseGatheringPoints();
27423: PPUSH
27424: CALL_OW 559
// if warehouseGatheringPoints then
27428: LD_EXP 82
27432: IFFALSE 27558
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
27434: LD_ADDR_VAR 0 3
27438: PUSH
27439: LD_EXP 82
27443: PPUSH
27444: CALL 75182 0 1
27448: ST_TO_ADDR
// for i := 1 to list do
27449: LD_ADDR_VAR 0 2
27453: PUSH
27454: DOUBLE
27455: LD_INT 1
27457: DEC
27458: ST_TO_ADDR
27459: LD_VAR 0 3
27463: PUSH
27464: FOR_TO
27465: IFFALSE 27556
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
27467: LD_STRING setWarehouseGatheringPointXY(
27469: PUSH
27470: LD_VAR 0 3
27474: PUSH
27475: LD_VAR 0 2
27479: ARRAY
27480: PUSH
27481: LD_INT 1
27483: ARRAY
27484: STR
27485: PUSH
27486: LD_STRING ,
27488: STR
27489: PUSH
27490: LD_VAR 0 3
27494: PUSH
27495: LD_VAR 0 2
27499: ARRAY
27500: PUSH
27501: LD_INT 2
27503: ARRAY
27504: STR
27505: PUSH
27506: LD_STRING ,
27508: STR
27509: PUSH
27510: LD_VAR 0 3
27514: PUSH
27515: LD_VAR 0 2
27519: ARRAY
27520: PUSH
27521: LD_INT 3
27523: ARRAY
27524: STR
27525: PUSH
27526: LD_STRING ,
27528: STR
27529: PUSH
27530: LD_VAR 0 3
27534: PUSH
27535: LD_VAR 0 2
27539: ARRAY
27540: PUSH
27541: LD_INT 4
27543: ARRAY
27544: STR
27545: PUSH
27546: LD_STRING )
27548: STR
27549: PPUSH
27550: CALL_OW 559
27554: GO 27464
27556: POP
27557: POP
// end ; end ;
27558: LD_VAR 0 1
27562: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
27563: LD_EXP 82
27567: IFFALSE 28252
27569: GO 27571
27571: DISABLE
27572: LD_INT 0
27574: PPUSH
27575: PPUSH
27576: PPUSH
27577: PPUSH
27578: PPUSH
27579: PPUSH
27580: PPUSH
27581: PPUSH
27582: PPUSH
// begin enable ;
27583: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
27584: LD_ADDR_VAR 0 3
27588: PUSH
27589: LD_EXP 82
27593: PPUSH
27594: CALL 75182 0 1
27598: ST_TO_ADDR
// if not list then
27599: LD_VAR 0 3
27603: NOT
27604: IFFALSE 27608
// exit ;
27606: GO 28252
// for i := 1 to list do
27608: LD_ADDR_VAR 0 1
27612: PUSH
27613: DOUBLE
27614: LD_INT 1
27616: DEC
27617: ST_TO_ADDR
27618: LD_VAR 0 3
27622: PUSH
27623: FOR_TO
27624: IFFALSE 28250
// begin depot := list [ i ] [ 2 ] ;
27626: LD_ADDR_VAR 0 8
27630: PUSH
27631: LD_VAR 0 3
27635: PUSH
27636: LD_VAR 0 1
27640: ARRAY
27641: PUSH
27642: LD_INT 2
27644: ARRAY
27645: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
27646: LD_ADDR_VAR 0 5
27650: PUSH
27651: LD_VAR 0 3
27655: PUSH
27656: LD_VAR 0 1
27660: ARRAY
27661: PUSH
27662: LD_INT 1
27664: ARRAY
27665: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
27666: LD_VAR 0 8
27670: PPUSH
27671: CALL_OW 301
27675: PUSH
27676: LD_VAR 0 5
27680: PUSH
27681: LD_VAR 0 8
27685: PPUSH
27686: CALL_OW 255
27690: NONEQUAL
27691: OR
27692: IFFALSE 27721
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
27694: LD_ADDR_EXP 82
27698: PUSH
27699: LD_EXP 82
27703: PPUSH
27704: LD_VAR 0 8
27708: PPUSH
27709: LD_INT 0
27711: PPUSH
27712: CALL_OW 1
27716: ST_TO_ADDR
// exit ;
27717: POP
27718: POP
27719: GO 28252
// end ; x := list [ i ] [ 3 ] ;
27721: LD_ADDR_VAR 0 6
27725: PUSH
27726: LD_VAR 0 3
27730: PUSH
27731: LD_VAR 0 1
27735: ARRAY
27736: PUSH
27737: LD_INT 3
27739: ARRAY
27740: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
27741: LD_ADDR_VAR 0 7
27745: PUSH
27746: LD_VAR 0 3
27750: PUSH
27751: LD_VAR 0 1
27755: ARRAY
27756: PUSH
27757: LD_INT 4
27759: ARRAY
27760: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
27761: LD_ADDR_VAR 0 9
27765: PUSH
27766: LD_VAR 0 6
27770: PPUSH
27771: LD_VAR 0 7
27775: PPUSH
27776: LD_INT 16
27778: PPUSH
27779: CALL 73766 0 3
27783: ST_TO_ADDR
// if not cratesNearbyPoint then
27784: LD_VAR 0 9
27788: NOT
27789: IFFALSE 27795
// exit ;
27791: POP
27792: POP
27793: GO 28252
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
27795: LD_ADDR_VAR 0 4
27799: PUSH
27800: LD_INT 22
27802: PUSH
27803: LD_VAR 0 5
27807: PUSH
27808: EMPTY
27809: LIST
27810: LIST
27811: PUSH
27812: LD_INT 3
27814: PUSH
27815: LD_INT 60
27817: PUSH
27818: EMPTY
27819: LIST
27820: PUSH
27821: EMPTY
27822: LIST
27823: LIST
27824: PUSH
27825: LD_INT 91
27827: PUSH
27828: LD_VAR 0 8
27832: PUSH
27833: LD_INT 6
27835: PUSH
27836: EMPTY
27837: LIST
27838: LIST
27839: LIST
27840: PUSH
27841: LD_INT 2
27843: PUSH
27844: LD_INT 25
27846: PUSH
27847: LD_INT 2
27849: PUSH
27850: EMPTY
27851: LIST
27852: LIST
27853: PUSH
27854: LD_INT 25
27856: PUSH
27857: LD_INT 16
27859: PUSH
27860: EMPTY
27861: LIST
27862: LIST
27863: PUSH
27864: EMPTY
27865: LIST
27866: LIST
27867: LIST
27868: PUSH
27869: EMPTY
27870: LIST
27871: LIST
27872: LIST
27873: LIST
27874: PPUSH
27875: CALL_OW 69
27879: PUSH
27880: LD_VAR 0 8
27884: PPUSH
27885: CALL_OW 313
27889: PPUSH
27890: LD_INT 3
27892: PUSH
27893: LD_INT 60
27895: PUSH
27896: EMPTY
27897: LIST
27898: PUSH
27899: EMPTY
27900: LIST
27901: LIST
27902: PUSH
27903: LD_INT 2
27905: PUSH
27906: LD_INT 25
27908: PUSH
27909: LD_INT 2
27911: PUSH
27912: EMPTY
27913: LIST
27914: LIST
27915: PUSH
27916: LD_INT 25
27918: PUSH
27919: LD_INT 16
27921: PUSH
27922: EMPTY
27923: LIST
27924: LIST
27925: PUSH
27926: EMPTY
27927: LIST
27928: LIST
27929: LIST
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: PPUSH
27935: CALL_OW 72
27939: UNION
27940: ST_TO_ADDR
// if tmp then
27941: LD_VAR 0 4
27945: IFFALSE 28025
// begin tmp := ShrinkArray ( tmp , 3 ) ;
27947: LD_ADDR_VAR 0 4
27951: PUSH
27952: LD_VAR 0 4
27956: PPUSH
27957: LD_INT 3
27959: PPUSH
27960: CALL 71729 0 2
27964: ST_TO_ADDR
// for j in tmp do
27965: LD_ADDR_VAR 0 2
27969: PUSH
27970: LD_VAR 0 4
27974: PUSH
27975: FOR_IN
27976: IFFALSE 28019
// begin if IsInUnit ( j ) then
27978: LD_VAR 0 2
27982: PPUSH
27983: CALL_OW 310
27987: IFFALSE 27998
// ComExit ( j ) ;
27989: LD_VAR 0 2
27993: PPUSH
27994: CALL 71812 0 1
// AddComCollect ( j , x , y ) ;
27998: LD_VAR 0 2
28002: PPUSH
28003: LD_VAR 0 6
28007: PPUSH
28008: LD_VAR 0 7
28012: PPUSH
28013: CALL_OW 177
// end ;
28017: GO 27975
28019: POP
28020: POP
// exit ;
28021: POP
28022: POP
28023: GO 28252
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
28025: LD_ADDR_VAR 0 4
28029: PUSH
28030: LD_INT 22
28032: PUSH
28033: LD_VAR 0 5
28037: PUSH
28038: EMPTY
28039: LIST
28040: LIST
28041: PUSH
28042: LD_INT 91
28044: PUSH
28045: LD_VAR 0 8
28049: PUSH
28050: LD_INT 8
28052: PUSH
28053: EMPTY
28054: LIST
28055: LIST
28056: LIST
28057: PUSH
28058: LD_INT 2
28060: PUSH
28061: LD_INT 34
28063: PUSH
28064: LD_INT 12
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: PUSH
28071: LD_INT 34
28073: PUSH
28074: LD_INT 51
28076: PUSH
28077: EMPTY
28078: LIST
28079: LIST
28080: PUSH
28081: LD_INT 34
28083: PUSH
28084: LD_INT 32
28086: PUSH
28087: EMPTY
28088: LIST
28089: LIST
28090: PUSH
28091: LD_INT 34
28093: PUSH
28094: LD_INT 89
28096: PUSH
28097: EMPTY
28098: LIST
28099: LIST
28100: PUSH
28101: EMPTY
28102: LIST
28103: LIST
28104: LIST
28105: LIST
28106: LIST
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: LIST
28112: PPUSH
28113: CALL_OW 69
28117: ST_TO_ADDR
// if tmp then
28118: LD_VAR 0 4
28122: IFFALSE 28248
// begin for j in tmp do
28124: LD_ADDR_VAR 0 2
28128: PUSH
28129: LD_VAR 0 4
28133: PUSH
28134: FOR_IN
28135: IFFALSE 28246
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
28137: LD_VAR 0 2
28141: PPUSH
28142: CALL_OW 262
28146: PUSH
28147: LD_INT 3
28149: EQUAL
28150: PUSH
28151: LD_VAR 0 2
28155: PPUSH
28156: CALL_OW 261
28160: PUSH
28161: LD_INT 20
28163: GREATER
28164: OR
28165: PUSH
28166: LD_VAR 0 2
28170: PPUSH
28171: CALL_OW 314
28175: NOT
28176: AND
28177: PUSH
28178: LD_VAR 0 2
28182: PPUSH
28183: CALL_OW 263
28187: PUSH
28188: LD_INT 1
28190: NONEQUAL
28191: PUSH
28192: LD_VAR 0 2
28196: PPUSH
28197: CALL_OW 311
28201: OR
28202: AND
28203: IFFALSE 28244
// begin ComCollect ( j , x , y ) ;
28205: LD_VAR 0 2
28209: PPUSH
28210: LD_VAR 0 6
28214: PPUSH
28215: LD_VAR 0 7
28219: PPUSH
28220: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
28224: LD_VAR 0 2
28228: PPUSH
28229: LD_VAR 0 8
28233: PPUSH
28234: CALL_OW 172
// exit ;
28238: POP
28239: POP
28240: POP
28241: POP
28242: GO 28252
// end ;
28244: GO 28134
28246: POP
28247: POP
// end ; end ;
28248: GO 27623
28250: POP
28251: POP
// end ; end_of_file
28252: PPOPN 9
28254: END
// export function SOS_UnitDestroyed ( un ) ; begin
28255: LD_INT 0
28257: PPUSH
// ComRadiation ( un ) ;
28258: LD_VAR 0 1
28262: PPUSH
28263: CALL 29324 0 1
// end ;
28267: LD_VAR 0 2
28271: RET
// export function SOS_UnitKamikazed ( un ) ; begin
28272: LD_INT 0
28274: PPUSH
// ComRadiation ( un ) ;
28275: LD_VAR 0 1
28279: PPUSH
28280: CALL 29324 0 1
// end ;
28284: LD_VAR 0 2
28288: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
28289: LD_INT 0
28291: PPUSH
// end ;
28292: LD_VAR 0 4
28296: RET
// export function SOS_Command ( cmd ) ; begin
28297: LD_INT 0
28299: PPUSH
// end ;
28300: LD_VAR 0 2
28304: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
28305: LD_INT 0
28307: PPUSH
// end ;
28308: LD_VAR 0 6
28312: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
28313: LD_INT 0
28315: PPUSH
28316: PPUSH
28317: PPUSH
28318: PPUSH
// if not vehicle or not factory then
28319: LD_VAR 0 1
28323: NOT
28324: PUSH
28325: LD_VAR 0 2
28329: NOT
28330: OR
28331: IFFALSE 28335
// exit ;
28333: GO 28915
// if not factoryWaypoints then
28335: LD_EXP 80
28339: NOT
28340: IFFALSE 28344
// exit ;
28342: GO 28915
// for i := 1 to Count ( factoryWaypoints ) do
28344: LD_ADDR_VAR 0 4
28348: PUSH
28349: DOUBLE
28350: LD_INT 1
28352: DEC
28353: ST_TO_ADDR
28354: LD_EXP 80
28358: PPUSH
28359: CALL 35805 0 1
28363: PUSH
28364: FOR_TO
28365: IFFALSE 28913
// if factoryWaypoints [ i ] [ 2 ] = factory then
28367: LD_EXP 80
28371: PUSH
28372: LD_VAR 0 4
28376: ARRAY
28377: PUSH
28378: LD_INT 2
28380: ARRAY
28381: PUSH
28382: LD_VAR 0 2
28386: EQUAL
28387: IFFALSE 28911
// begin if GetControl ( vehicle ) = control_manual then
28389: LD_VAR 0 1
28393: PPUSH
28394: CALL_OW 263
28398: PUSH
28399: LD_INT 1
28401: EQUAL
28402: IFFALSE 28764
// begin driver := IsDrivenBy ( vehicle ) ;
28404: LD_ADDR_VAR 0 5
28408: PUSH
28409: LD_VAR 0 1
28413: PPUSH
28414: CALL_OW 311
28418: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
28419: LD_VAR 0 5
28423: PUSH
28424: LD_EXP 81
28428: IN
28429: PUSH
28430: LD_VAR 0 1
28434: PUSH
28435: LD_EXP 81
28439: IN
28440: OR
28441: IFFALSE 28447
// exit ;
28443: POP
28444: POP
28445: GO 28915
// if not HasTask ( driver ) then
28447: LD_VAR 0 5
28451: PPUSH
28452: CALL_OW 314
28456: NOT
28457: IFFALSE 28762
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
28459: LD_ADDR_EXP 81
28463: PUSH
28464: LD_EXP 81
28468: PPUSH
28469: LD_VAR 0 5
28473: PPUSH
28474: CALL 71414 0 2
28478: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
28479: LD_ADDR_EXP 81
28483: PUSH
28484: LD_EXP 81
28488: PPUSH
28489: LD_VAR 0 1
28493: PPUSH
28494: CALL 71414 0 2
28498: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
28499: LD_ADDR_VAR 0 6
28503: PUSH
28504: LD_EXP 80
28508: PUSH
28509: LD_VAR 0 4
28513: ARRAY
28514: PUSH
28515: LD_INT 3
28517: ARRAY
28518: PPUSH
28519: LD_EXP 80
28523: PUSH
28524: LD_VAR 0 4
28528: ARRAY
28529: PUSH
28530: LD_INT 4
28532: ARRAY
28533: PPUSH
28534: CALL_OW 428
28538: ST_TO_ADDR
// if hex then
28539: LD_VAR 0 6
28543: IFFALSE 28561
// ComMoveUnit ( driver , hex ) else
28545: LD_VAR 0 5
28549: PPUSH
28550: LD_VAR 0 6
28554: PPUSH
28555: CALL_OW 112
28559: GO 28645
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
28561: LD_VAR 0 1
28565: PPUSH
28566: LD_EXP 80
28570: PUSH
28571: LD_VAR 0 4
28575: ARRAY
28576: PUSH
28577: LD_INT 3
28579: ARRAY
28580: PPUSH
28581: LD_EXP 80
28585: PUSH
28586: LD_VAR 0 4
28590: ARRAY
28591: PUSH
28592: LD_INT 4
28594: ARRAY
28595: PPUSH
28596: CALL_OW 297
28600: PUSH
28601: LD_INT 0
28603: GREATER
28604: IFFALSE 28645
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
28606: LD_VAR 0 5
28610: PPUSH
28611: LD_EXP 80
28615: PUSH
28616: LD_VAR 0 4
28620: ARRAY
28621: PUSH
28622: LD_INT 3
28624: ARRAY
28625: PPUSH
28626: LD_EXP 80
28630: PUSH
28631: LD_VAR 0 4
28635: ARRAY
28636: PUSH
28637: LD_INT 4
28639: ARRAY
28640: PPUSH
28641: CALL_OW 111
// AddComExitVehicle ( driver ) ;
28645: LD_VAR 0 5
28649: PPUSH
28650: CALL_OW 181
// if Multiplayer then
28654: LD_OWVAR 4
28658: IFFALSE 28707
// begin repeat wait ( 10 ) ;
28660: LD_INT 10
28662: PPUSH
28663: CALL_OW 67
// until not IsInUnit ( driver ) ;
28667: LD_VAR 0 5
28671: PPUSH
28672: CALL_OW 310
28676: NOT
28677: IFFALSE 28660
// if not HasTask ( driver ) then
28679: LD_VAR 0 5
28683: PPUSH
28684: CALL_OW 314
28688: NOT
28689: IFFALSE 28705
// ComEnterUnit ( driver , factory ) ;
28691: LD_VAR 0 5
28695: PPUSH
28696: LD_VAR 0 2
28700: PPUSH
28701: CALL_OW 120
// end else
28705: GO 28721
// AddComEnterUnit ( driver , factory ) ;
28707: LD_VAR 0 5
28711: PPUSH
28712: LD_VAR 0 2
28716: PPUSH
28717: CALL_OW 180
// wait ( 0 0$1 ) ;
28721: LD_INT 35
28723: PPUSH
28724: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
28728: LD_ADDR_EXP 81
28732: PUSH
28733: LD_EXP 81
28737: PUSH
28738: LD_VAR 0 5
28742: DIFF
28743: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
28744: LD_ADDR_EXP 81
28748: PUSH
28749: LD_EXP 81
28753: PUSH
28754: LD_VAR 0 1
28758: DIFF
28759: ST_TO_ADDR
// break ;
28760: GO 28913
// end ; end else
28762: GO 28911
// if GetControl ( vehicle ) = control_remote then
28764: LD_VAR 0 1
28768: PPUSH
28769: CALL_OW 263
28773: PUSH
28774: LD_INT 2
28776: EQUAL
28777: IFFALSE 28863
// begin wait ( 0 0$2 ) ;
28779: LD_INT 70
28781: PPUSH
28782: CALL_OW 67
// repeat wait ( 10 ) ;
28786: LD_INT 10
28788: PPUSH
28789: CALL_OW 67
// Connect ( vehicle ) ;
28793: LD_VAR 0 1
28797: PPUSH
28798: CALL 42011 0 1
// until IsControledBy ( vehicle ) ;
28802: LD_VAR 0 1
28806: PPUSH
28807: CALL_OW 312
28811: IFFALSE 28786
// wait ( 10 ) ;
28813: LD_INT 10
28815: PPUSH
28816: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
28820: LD_VAR 0 1
28824: PPUSH
28825: LD_EXP 80
28829: PUSH
28830: LD_VAR 0 4
28834: ARRAY
28835: PUSH
28836: LD_INT 3
28838: ARRAY
28839: PPUSH
28840: LD_EXP 80
28844: PUSH
28845: LD_VAR 0 4
28849: ARRAY
28850: PUSH
28851: LD_INT 4
28853: ARRAY
28854: PPUSH
28855: CALL_OW 111
// break ;
28859: GO 28913
// end else
28861: GO 28911
// begin wait ( 0 0$3 ) ;
28863: LD_INT 105
28865: PPUSH
28866: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
28870: LD_VAR 0 1
28874: PPUSH
28875: LD_EXP 80
28879: PUSH
28880: LD_VAR 0 4
28884: ARRAY
28885: PUSH
28886: LD_INT 3
28888: ARRAY
28889: PPUSH
28890: LD_EXP 80
28894: PUSH
28895: LD_VAR 0 4
28899: ARRAY
28900: PUSH
28901: LD_INT 4
28903: ARRAY
28904: PPUSH
28905: CALL_OW 111
// break ;
28909: GO 28913
// end ; end ;
28911: GO 28364
28913: POP
28914: POP
// end ;
28915: LD_VAR 0 3
28919: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
28920: LD_INT 0
28922: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
28923: LD_VAR 0 1
28927: PUSH
28928: LD_INT 250
28930: EQUAL
28931: PUSH
28932: LD_VAR 0 2
28936: PPUSH
28937: CALL_OW 264
28941: PUSH
28942: LD_INT 81
28944: EQUAL
28945: AND
28946: IFFALSE 28967
// MinerPlaceMine ( unit , x , y ) ;
28948: LD_VAR 0 2
28952: PPUSH
28953: LD_VAR 0 4
28957: PPUSH
28958: LD_VAR 0 5
28962: PPUSH
28963: CALL 32059 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
28967: LD_VAR 0 1
28971: PUSH
28972: LD_INT 251
28974: EQUAL
28975: PUSH
28976: LD_VAR 0 2
28980: PPUSH
28981: CALL_OW 264
28985: PUSH
28986: LD_INT 81
28988: EQUAL
28989: AND
28990: IFFALSE 29011
// MinerDetonateMine ( unit , x , y ) ;
28992: LD_VAR 0 2
28996: PPUSH
28997: LD_VAR 0 4
29001: PPUSH
29002: LD_VAR 0 5
29006: PPUSH
29007: CALL 32334 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
29011: LD_VAR 0 1
29015: PUSH
29016: LD_INT 252
29018: EQUAL
29019: PUSH
29020: LD_VAR 0 2
29024: PPUSH
29025: CALL_OW 264
29029: PUSH
29030: LD_INT 81
29032: EQUAL
29033: AND
29034: IFFALSE 29055
// MinerCreateMinefield ( unit , x , y ) ;
29036: LD_VAR 0 2
29040: PPUSH
29041: LD_VAR 0 4
29045: PPUSH
29046: LD_VAR 0 5
29050: PPUSH
29051: CALL 32751 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
29055: LD_VAR 0 1
29059: PUSH
29060: LD_INT 253
29062: EQUAL
29063: PUSH
29064: LD_VAR 0 2
29068: PPUSH
29069: CALL_OW 257
29073: PUSH
29074: LD_INT 5
29076: EQUAL
29077: AND
29078: IFFALSE 29099
// ComBinocular ( unit , x , y ) ;
29080: LD_VAR 0 2
29084: PPUSH
29085: LD_VAR 0 4
29089: PPUSH
29090: LD_VAR 0 5
29094: PPUSH
29095: CALL 33120 0 3
// if selectedUnit then
29099: LD_VAR 0 3
29103: IFFALSE 29159
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
29105: LD_VAR 0 1
29109: PUSH
29110: LD_INT 254
29112: EQUAL
29113: PUSH
29114: LD_VAR 0 2
29118: PPUSH
29119: CALL_OW 264
29123: PUSH
29124: LD_INT 99
29126: EQUAL
29127: AND
29128: PUSH
29129: LD_VAR 0 3
29133: PPUSH
29134: CALL_OW 263
29138: PUSH
29139: LD_INT 3
29141: EQUAL
29142: AND
29143: IFFALSE 29159
// HackDestroyVehicle ( unit , selectedUnit ) ;
29145: LD_VAR 0 2
29149: PPUSH
29150: LD_VAR 0 3
29154: PPUSH
29155: CALL 31423 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
29159: LD_VAR 0 1
29163: PUSH
29164: LD_INT 255
29166: EQUAL
29167: PUSH
29168: LD_VAR 0 2
29172: PPUSH
29173: CALL_OW 264
29177: PUSH
29178: LD_INT 14
29180: PUSH
29181: LD_INT 53
29183: PUSH
29184: EMPTY
29185: LIST
29186: LIST
29187: IN
29188: AND
29189: PUSH
29190: LD_VAR 0 4
29194: PPUSH
29195: LD_VAR 0 5
29199: PPUSH
29200: CALL_OW 488
29204: AND
29205: IFFALSE 29229
// CutTreeXYR ( unit , x , y , 12 ) ;
29207: LD_VAR 0 2
29211: PPUSH
29212: LD_VAR 0 4
29216: PPUSH
29217: LD_VAR 0 5
29221: PPUSH
29222: LD_INT 12
29224: PPUSH
29225: CALL 29420 0 4
// if cmd = 256 then
29229: LD_VAR 0 1
29233: PUSH
29234: LD_INT 256
29236: EQUAL
29237: IFFALSE 29258
// SetFactoryWaypoint ( unit , x , y ) ;
29239: LD_VAR 0 2
29243: PPUSH
29244: LD_VAR 0 4
29248: PPUSH
29249: LD_VAR 0 5
29253: PPUSH
29254: CALL 26816 0 3
// if cmd = 257 then
29258: LD_VAR 0 1
29262: PUSH
29263: LD_INT 257
29265: EQUAL
29266: IFFALSE 29287
// SetWarehouseGatheringPoint ( unit , x , y ) ;
29268: LD_VAR 0 2
29272: PPUSH
29273: LD_VAR 0 4
29277: PPUSH
29278: LD_VAR 0 5
29282: PPUSH
29283: CALL 27306 0 3
// if cmd = 258 then
29287: LD_VAR 0 1
29291: PUSH
29292: LD_INT 258
29294: EQUAL
29295: IFFALSE 29319
// BurnTreeXYR ( unit , x , y , 8 ) ;
29297: LD_VAR 0 2
29301: PPUSH
29302: LD_VAR 0 4
29306: PPUSH
29307: LD_VAR 0 5
29311: PPUSH
29312: LD_INT 8
29314: PPUSH
29315: CALL 29814 0 4
// end ;
29319: LD_VAR 0 6
29323: RET
// export function ComRadiation ( un ) ; var eff ; begin
29324: LD_INT 0
29326: PPUSH
29327: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
29328: LD_VAR 0 1
29332: PPUSH
29333: CALL_OW 264
29337: PUSH
29338: LD_INT 91
29340: NONEQUAL
29341: IFFALSE 29345
// exit ;
29343: GO 29415
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
29345: LD_INT 68
29347: PPUSH
29348: LD_VAR 0 1
29352: PPUSH
29353: CALL_OW 255
29357: PPUSH
29358: CALL_OW 321
29362: PUSH
29363: LD_INT 2
29365: EQUAL
29366: IFFALSE 29378
// eff := 50 else
29368: LD_ADDR_VAR 0 3
29372: PUSH
29373: LD_INT 50
29375: ST_TO_ADDR
29376: GO 29386
// eff := 25 ;
29378: LD_ADDR_VAR 0 3
29382: PUSH
29383: LD_INT 25
29385: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
29386: LD_VAR 0 1
29390: PPUSH
29391: CALL_OW 250
29395: PPUSH
29396: LD_VAR 0 1
29400: PPUSH
29401: CALL_OW 251
29405: PPUSH
29406: LD_VAR 0 3
29410: PPUSH
29411: CALL_OW 495
// end ;
29415: LD_VAR 0 2
29419: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
29420: LD_INT 0
29422: PPUSH
29423: PPUSH
29424: PPUSH
29425: PPUSH
29426: PPUSH
29427: PPUSH
29428: PPUSH
29429: PPUSH
29430: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
29431: LD_VAR 0 1
29435: PPUSH
29436: CALL_OW 302
29440: NOT
29441: PUSH
29442: LD_VAR 0 2
29446: PPUSH
29447: LD_VAR 0 3
29451: PPUSH
29452: CALL_OW 488
29456: NOT
29457: OR
29458: PUSH
29459: LD_VAR 0 4
29463: NOT
29464: OR
29465: IFFALSE 29469
// exit ;
29467: GO 29809
// list := [ ] ;
29469: LD_ADDR_VAR 0 13
29473: PUSH
29474: EMPTY
29475: ST_TO_ADDR
// if x - r < 0 then
29476: LD_VAR 0 2
29480: PUSH
29481: LD_VAR 0 4
29485: MINUS
29486: PUSH
29487: LD_INT 0
29489: LESS
29490: IFFALSE 29502
// min_x := 0 else
29492: LD_ADDR_VAR 0 7
29496: PUSH
29497: LD_INT 0
29499: ST_TO_ADDR
29500: GO 29518
// min_x := x - r ;
29502: LD_ADDR_VAR 0 7
29506: PUSH
29507: LD_VAR 0 2
29511: PUSH
29512: LD_VAR 0 4
29516: MINUS
29517: ST_TO_ADDR
// if y - r < 0 then
29518: LD_VAR 0 3
29522: PUSH
29523: LD_VAR 0 4
29527: MINUS
29528: PUSH
29529: LD_INT 0
29531: LESS
29532: IFFALSE 29544
// min_y := 0 else
29534: LD_ADDR_VAR 0 8
29538: PUSH
29539: LD_INT 0
29541: ST_TO_ADDR
29542: GO 29560
// min_y := y - r ;
29544: LD_ADDR_VAR 0 8
29548: PUSH
29549: LD_VAR 0 3
29553: PUSH
29554: LD_VAR 0 4
29558: MINUS
29559: ST_TO_ADDR
// max_x := x + r ;
29560: LD_ADDR_VAR 0 9
29564: PUSH
29565: LD_VAR 0 2
29569: PUSH
29570: LD_VAR 0 4
29574: PLUS
29575: ST_TO_ADDR
// max_y := y + r ;
29576: LD_ADDR_VAR 0 10
29580: PUSH
29581: LD_VAR 0 3
29585: PUSH
29586: LD_VAR 0 4
29590: PLUS
29591: ST_TO_ADDR
// for _x = min_x to max_x do
29592: LD_ADDR_VAR 0 11
29596: PUSH
29597: DOUBLE
29598: LD_VAR 0 7
29602: DEC
29603: ST_TO_ADDR
29604: LD_VAR 0 9
29608: PUSH
29609: FOR_TO
29610: IFFALSE 29727
// for _y = min_y to max_y do
29612: LD_ADDR_VAR 0 12
29616: PUSH
29617: DOUBLE
29618: LD_VAR 0 8
29622: DEC
29623: ST_TO_ADDR
29624: LD_VAR 0 10
29628: PUSH
29629: FOR_TO
29630: IFFALSE 29723
// begin if not ValidHex ( _x , _y ) then
29632: LD_VAR 0 11
29636: PPUSH
29637: LD_VAR 0 12
29641: PPUSH
29642: CALL_OW 488
29646: NOT
29647: IFFALSE 29651
// continue ;
29649: GO 29629
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
29651: LD_VAR 0 11
29655: PPUSH
29656: LD_VAR 0 12
29660: PPUSH
29661: CALL_OW 351
29665: PUSH
29666: LD_VAR 0 11
29670: PPUSH
29671: LD_VAR 0 12
29675: PPUSH
29676: CALL_OW 554
29680: AND
29681: IFFALSE 29721
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
29683: LD_ADDR_VAR 0 13
29687: PUSH
29688: LD_VAR 0 13
29692: PPUSH
29693: LD_VAR 0 13
29697: PUSH
29698: LD_INT 1
29700: PLUS
29701: PPUSH
29702: LD_VAR 0 11
29706: PUSH
29707: LD_VAR 0 12
29711: PUSH
29712: EMPTY
29713: LIST
29714: LIST
29715: PPUSH
29716: CALL_OW 2
29720: ST_TO_ADDR
// end ;
29721: GO 29629
29723: POP
29724: POP
29725: GO 29609
29727: POP
29728: POP
// if not list then
29729: LD_VAR 0 13
29733: NOT
29734: IFFALSE 29738
// exit ;
29736: GO 29809
// for i in list do
29738: LD_ADDR_VAR 0 6
29742: PUSH
29743: LD_VAR 0 13
29747: PUSH
29748: FOR_IN
29749: IFFALSE 29807
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
29751: LD_VAR 0 1
29755: PPUSH
29756: LD_STRING M
29758: PUSH
29759: LD_VAR 0 6
29763: PUSH
29764: LD_INT 1
29766: ARRAY
29767: PUSH
29768: LD_VAR 0 6
29772: PUSH
29773: LD_INT 2
29775: ARRAY
29776: PUSH
29777: LD_INT 0
29779: PUSH
29780: LD_INT 0
29782: PUSH
29783: LD_INT 0
29785: PUSH
29786: LD_INT 0
29788: PUSH
29789: EMPTY
29790: LIST
29791: LIST
29792: LIST
29793: LIST
29794: LIST
29795: LIST
29796: LIST
29797: PUSH
29798: EMPTY
29799: LIST
29800: PPUSH
29801: CALL_OW 447
29805: GO 29748
29807: POP
29808: POP
// end ;
29809: LD_VAR 0 5
29813: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
29814: LD_INT 0
29816: PPUSH
29817: PPUSH
29818: PPUSH
29819: PPUSH
29820: PPUSH
29821: PPUSH
29822: PPUSH
29823: PPUSH
29824: PPUSH
29825: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
29826: LD_VAR 0 1
29830: PPUSH
29831: CALL_OW 302
29835: NOT
29836: PUSH
29837: LD_VAR 0 2
29841: PPUSH
29842: LD_VAR 0 3
29846: PPUSH
29847: CALL_OW 488
29851: NOT
29852: OR
29853: PUSH
29854: LD_VAR 0 4
29858: NOT
29859: OR
29860: IFFALSE 29864
// exit ;
29862: GO 30377
// list := [ ] ;
29864: LD_ADDR_VAR 0 13
29868: PUSH
29869: EMPTY
29870: ST_TO_ADDR
// if x - r < 0 then
29871: LD_VAR 0 2
29875: PUSH
29876: LD_VAR 0 4
29880: MINUS
29881: PUSH
29882: LD_INT 0
29884: LESS
29885: IFFALSE 29897
// min_x := 0 else
29887: LD_ADDR_VAR 0 7
29891: PUSH
29892: LD_INT 0
29894: ST_TO_ADDR
29895: GO 29913
// min_x := x - r ;
29897: LD_ADDR_VAR 0 7
29901: PUSH
29902: LD_VAR 0 2
29906: PUSH
29907: LD_VAR 0 4
29911: MINUS
29912: ST_TO_ADDR
// if y - r < 0 then
29913: LD_VAR 0 3
29917: PUSH
29918: LD_VAR 0 4
29922: MINUS
29923: PUSH
29924: LD_INT 0
29926: LESS
29927: IFFALSE 29939
// min_y := 0 else
29929: LD_ADDR_VAR 0 8
29933: PUSH
29934: LD_INT 0
29936: ST_TO_ADDR
29937: GO 29955
// min_y := y - r ;
29939: LD_ADDR_VAR 0 8
29943: PUSH
29944: LD_VAR 0 3
29948: PUSH
29949: LD_VAR 0 4
29953: MINUS
29954: ST_TO_ADDR
// max_x := x + r ;
29955: LD_ADDR_VAR 0 9
29959: PUSH
29960: LD_VAR 0 2
29964: PUSH
29965: LD_VAR 0 4
29969: PLUS
29970: ST_TO_ADDR
// max_y := y + r ;
29971: LD_ADDR_VAR 0 10
29975: PUSH
29976: LD_VAR 0 3
29980: PUSH
29981: LD_VAR 0 4
29985: PLUS
29986: ST_TO_ADDR
// for _x = min_x to max_x do
29987: LD_ADDR_VAR 0 11
29991: PUSH
29992: DOUBLE
29993: LD_VAR 0 7
29997: DEC
29998: ST_TO_ADDR
29999: LD_VAR 0 9
30003: PUSH
30004: FOR_TO
30005: IFFALSE 30122
// for _y = min_y to max_y do
30007: LD_ADDR_VAR 0 12
30011: PUSH
30012: DOUBLE
30013: LD_VAR 0 8
30017: DEC
30018: ST_TO_ADDR
30019: LD_VAR 0 10
30023: PUSH
30024: FOR_TO
30025: IFFALSE 30118
// begin if not ValidHex ( _x , _y ) then
30027: LD_VAR 0 11
30031: PPUSH
30032: LD_VAR 0 12
30036: PPUSH
30037: CALL_OW 488
30041: NOT
30042: IFFALSE 30046
// continue ;
30044: GO 30024
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
30046: LD_VAR 0 11
30050: PPUSH
30051: LD_VAR 0 12
30055: PPUSH
30056: CALL_OW 351
30060: PUSH
30061: LD_VAR 0 11
30065: PPUSH
30066: LD_VAR 0 12
30070: PPUSH
30071: CALL_OW 554
30075: AND
30076: IFFALSE 30116
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
30078: LD_ADDR_VAR 0 13
30082: PUSH
30083: LD_VAR 0 13
30087: PPUSH
30088: LD_VAR 0 13
30092: PUSH
30093: LD_INT 1
30095: PLUS
30096: PPUSH
30097: LD_VAR 0 11
30101: PUSH
30102: LD_VAR 0 12
30106: PUSH
30107: EMPTY
30108: LIST
30109: LIST
30110: PPUSH
30111: CALL_OW 2
30115: ST_TO_ADDR
// end ;
30116: GO 30024
30118: POP
30119: POP
30120: GO 30004
30122: POP
30123: POP
// if not list then
30124: LD_VAR 0 13
30128: NOT
30129: IFFALSE 30133
// exit ;
30131: GO 30377
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
30133: LD_ADDR_VAR 0 13
30137: PUSH
30138: LD_VAR 0 1
30142: PPUSH
30143: LD_VAR 0 13
30147: PPUSH
30148: LD_INT 1
30150: PPUSH
30151: LD_INT 1
30153: PPUSH
30154: CALL 39153 0 4
30158: ST_TO_ADDR
// ComStop ( flame ) ;
30159: LD_VAR 0 1
30163: PPUSH
30164: CALL_OW 141
// for i in list do
30168: LD_ADDR_VAR 0 6
30172: PUSH
30173: LD_VAR 0 13
30177: PUSH
30178: FOR_IN
30179: IFFALSE 30210
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
30181: LD_VAR 0 1
30185: PPUSH
30186: LD_VAR 0 6
30190: PUSH
30191: LD_INT 1
30193: ARRAY
30194: PPUSH
30195: LD_VAR 0 6
30199: PUSH
30200: LD_INT 2
30202: ARRAY
30203: PPUSH
30204: CALL_OW 176
30208: GO 30178
30210: POP
30211: POP
// repeat wait ( 0 0$1 ) ;
30212: LD_INT 35
30214: PPUSH
30215: CALL_OW 67
// task := GetTaskList ( flame ) ;
30219: LD_ADDR_VAR 0 14
30223: PUSH
30224: LD_VAR 0 1
30228: PPUSH
30229: CALL_OW 437
30233: ST_TO_ADDR
// if not task then
30234: LD_VAR 0 14
30238: NOT
30239: IFFALSE 30243
// exit ;
30241: GO 30377
// if task [ 1 ] [ 1 ] <> | then
30243: LD_VAR 0 14
30247: PUSH
30248: LD_INT 1
30250: ARRAY
30251: PUSH
30252: LD_INT 1
30254: ARRAY
30255: PUSH
30256: LD_STRING |
30258: NONEQUAL
30259: IFFALSE 30263
// exit ;
30261: GO 30377
// _x := task [ 1 ] [ 2 ] ;
30263: LD_ADDR_VAR 0 11
30267: PUSH
30268: LD_VAR 0 14
30272: PUSH
30273: LD_INT 1
30275: ARRAY
30276: PUSH
30277: LD_INT 2
30279: ARRAY
30280: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
30281: LD_ADDR_VAR 0 12
30285: PUSH
30286: LD_VAR 0 14
30290: PUSH
30291: LD_INT 1
30293: ARRAY
30294: PUSH
30295: LD_INT 3
30297: ARRAY
30298: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
30299: LD_VAR 0 11
30303: PPUSH
30304: LD_VAR 0 12
30308: PPUSH
30309: CALL_OW 351
30313: NOT
30314: PUSH
30315: LD_VAR 0 11
30319: PPUSH
30320: LD_VAR 0 12
30324: PPUSH
30325: CALL_OW 554
30329: NOT
30330: OR
30331: IFFALSE 30365
// begin task := Delete ( task , 1 ) ;
30333: LD_ADDR_VAR 0 14
30337: PUSH
30338: LD_VAR 0 14
30342: PPUSH
30343: LD_INT 1
30345: PPUSH
30346: CALL_OW 3
30350: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
30351: LD_VAR 0 1
30355: PPUSH
30356: LD_VAR 0 14
30360: PPUSH
30361: CALL_OW 446
// end ; until not HasTask ( flame ) ;
30365: LD_VAR 0 1
30369: PPUSH
30370: CALL_OW 314
30374: NOT
30375: IFFALSE 30212
// end ;
30377: LD_VAR 0 5
30381: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
30382: LD_EXP 84
30386: NOT
30387: IFFALSE 30437
30389: GO 30391
30391: DISABLE
// begin initHack := true ;
30392: LD_ADDR_EXP 84
30396: PUSH
30397: LD_INT 1
30399: ST_TO_ADDR
// hackTanks := [ ] ;
30400: LD_ADDR_EXP 85
30404: PUSH
30405: EMPTY
30406: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
30407: LD_ADDR_EXP 86
30411: PUSH
30412: EMPTY
30413: ST_TO_ADDR
// hackLimit := 3 ;
30414: LD_ADDR_EXP 87
30418: PUSH
30419: LD_INT 3
30421: ST_TO_ADDR
// hackDist := 12 ;
30422: LD_ADDR_EXP 88
30426: PUSH
30427: LD_INT 12
30429: ST_TO_ADDR
// hackCounter := [ ] ;
30430: LD_ADDR_EXP 89
30434: PUSH
30435: EMPTY
30436: ST_TO_ADDR
// end ;
30437: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
30438: LD_EXP 84
30442: PUSH
30443: LD_INT 34
30445: PUSH
30446: LD_INT 99
30448: PUSH
30449: EMPTY
30450: LIST
30451: LIST
30452: PPUSH
30453: CALL_OW 69
30457: AND
30458: IFFALSE 30711
30460: GO 30462
30462: DISABLE
30463: LD_INT 0
30465: PPUSH
30466: PPUSH
// begin enable ;
30467: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
30468: LD_ADDR_VAR 0 1
30472: PUSH
30473: LD_INT 34
30475: PUSH
30476: LD_INT 99
30478: PUSH
30479: EMPTY
30480: LIST
30481: LIST
30482: PPUSH
30483: CALL_OW 69
30487: PUSH
30488: FOR_IN
30489: IFFALSE 30709
// begin if not i in hackTanks then
30491: LD_VAR 0 1
30495: PUSH
30496: LD_EXP 85
30500: IN
30501: NOT
30502: IFFALSE 30585
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
30504: LD_ADDR_EXP 85
30508: PUSH
30509: LD_EXP 85
30513: PPUSH
30514: LD_EXP 85
30518: PUSH
30519: LD_INT 1
30521: PLUS
30522: PPUSH
30523: LD_VAR 0 1
30527: PPUSH
30528: CALL_OW 1
30532: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
30533: LD_ADDR_EXP 86
30537: PUSH
30538: LD_EXP 86
30542: PPUSH
30543: LD_EXP 86
30547: PUSH
30548: LD_INT 1
30550: PLUS
30551: PPUSH
30552: EMPTY
30553: PPUSH
30554: CALL_OW 1
30558: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
30559: LD_ADDR_EXP 89
30563: PUSH
30564: LD_EXP 89
30568: PPUSH
30569: LD_EXP 89
30573: PUSH
30574: LD_INT 1
30576: PLUS
30577: PPUSH
30578: EMPTY
30579: PPUSH
30580: CALL_OW 1
30584: ST_TO_ADDR
// end ; if not IsOk ( i ) then
30585: LD_VAR 0 1
30589: PPUSH
30590: CALL_OW 302
30594: NOT
30595: IFFALSE 30608
// begin HackUnlinkAll ( i ) ;
30597: LD_VAR 0 1
30601: PPUSH
30602: CALL 30714 0 1
// continue ;
30606: GO 30488
// end ; HackCheckCapturedStatus ( i ) ;
30608: LD_VAR 0 1
30612: PPUSH
30613: CALL 31157 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
30617: LD_ADDR_VAR 0 2
30621: PUSH
30622: LD_INT 81
30624: PUSH
30625: LD_VAR 0 1
30629: PPUSH
30630: CALL_OW 255
30634: PUSH
30635: EMPTY
30636: LIST
30637: LIST
30638: PUSH
30639: LD_INT 33
30641: PUSH
30642: LD_INT 3
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: PUSH
30649: LD_INT 91
30651: PUSH
30652: LD_VAR 0 1
30656: PUSH
30657: LD_EXP 88
30661: PUSH
30662: EMPTY
30663: LIST
30664: LIST
30665: LIST
30666: PUSH
30667: LD_INT 50
30669: PUSH
30670: EMPTY
30671: LIST
30672: PUSH
30673: EMPTY
30674: LIST
30675: LIST
30676: LIST
30677: LIST
30678: PPUSH
30679: CALL_OW 69
30683: ST_TO_ADDR
// if not tmp then
30684: LD_VAR 0 2
30688: NOT
30689: IFFALSE 30693
// continue ;
30691: GO 30488
// HackLink ( i , tmp ) ;
30693: LD_VAR 0 1
30697: PPUSH
30698: LD_VAR 0 2
30702: PPUSH
30703: CALL 30850 0 2
// end ;
30707: GO 30488
30709: POP
30710: POP
// end ;
30711: PPOPN 2
30713: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
30714: LD_INT 0
30716: PPUSH
30717: PPUSH
30718: PPUSH
// if not hack in hackTanks then
30719: LD_VAR 0 1
30723: PUSH
30724: LD_EXP 85
30728: IN
30729: NOT
30730: IFFALSE 30734
// exit ;
30732: GO 30845
// index := GetElementIndex ( hackTanks , hack ) ;
30734: LD_ADDR_VAR 0 4
30738: PUSH
30739: LD_EXP 85
30743: PPUSH
30744: LD_VAR 0 1
30748: PPUSH
30749: CALL 38450 0 2
30753: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
30754: LD_EXP 86
30758: PUSH
30759: LD_VAR 0 4
30763: ARRAY
30764: IFFALSE 30845
// begin for i in hackTanksCaptured [ index ] do
30766: LD_ADDR_VAR 0 3
30770: PUSH
30771: LD_EXP 86
30775: PUSH
30776: LD_VAR 0 4
30780: ARRAY
30781: PUSH
30782: FOR_IN
30783: IFFALSE 30809
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
30785: LD_VAR 0 3
30789: PUSH
30790: LD_INT 1
30792: ARRAY
30793: PPUSH
30794: LD_VAR 0 3
30798: PUSH
30799: LD_INT 2
30801: ARRAY
30802: PPUSH
30803: CALL_OW 235
30807: GO 30782
30809: POP
30810: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
30811: LD_ADDR_EXP 86
30815: PUSH
30816: LD_EXP 86
30820: PPUSH
30821: LD_VAR 0 4
30825: PPUSH
30826: EMPTY
30827: PPUSH
30828: CALL_OW 1
30832: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
30833: LD_VAR 0 1
30837: PPUSH
30838: LD_INT 0
30840: PPUSH
30841: CALL_OW 505
// end ; end ;
30845: LD_VAR 0 2
30849: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
30850: LD_INT 0
30852: PPUSH
30853: PPUSH
30854: PPUSH
// if not hack in hackTanks or not vehicles then
30855: LD_VAR 0 1
30859: PUSH
30860: LD_EXP 85
30864: IN
30865: NOT
30866: PUSH
30867: LD_VAR 0 2
30871: NOT
30872: OR
30873: IFFALSE 30877
// exit ;
30875: GO 31152
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
30877: LD_ADDR_VAR 0 2
30881: PUSH
30882: LD_VAR 0 1
30886: PPUSH
30887: LD_VAR 0 2
30891: PPUSH
30892: LD_INT 1
30894: PPUSH
30895: LD_INT 1
30897: PPUSH
30898: CALL 39100 0 4
30902: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
30903: LD_ADDR_VAR 0 5
30907: PUSH
30908: LD_EXP 85
30912: PPUSH
30913: LD_VAR 0 1
30917: PPUSH
30918: CALL 38450 0 2
30922: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
30923: LD_EXP 86
30927: PUSH
30928: LD_VAR 0 5
30932: ARRAY
30933: PUSH
30934: LD_EXP 87
30938: LESS
30939: IFFALSE 31128
// begin for i := 1 to vehicles do
30941: LD_ADDR_VAR 0 4
30945: PUSH
30946: DOUBLE
30947: LD_INT 1
30949: DEC
30950: ST_TO_ADDR
30951: LD_VAR 0 2
30955: PUSH
30956: FOR_TO
30957: IFFALSE 31126
// begin if hackTanksCaptured [ index ] = hackLimit then
30959: LD_EXP 86
30963: PUSH
30964: LD_VAR 0 5
30968: ARRAY
30969: PUSH
30970: LD_EXP 87
30974: EQUAL
30975: IFFALSE 30979
// break ;
30977: GO 31126
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
30979: LD_ADDR_EXP 89
30983: PUSH
30984: LD_EXP 89
30988: PPUSH
30989: LD_VAR 0 5
30993: PPUSH
30994: LD_EXP 89
30998: PUSH
30999: LD_VAR 0 5
31003: ARRAY
31004: PUSH
31005: LD_INT 1
31007: PLUS
31008: PPUSH
31009: CALL_OW 1
31013: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
31014: LD_ADDR_EXP 86
31018: PUSH
31019: LD_EXP 86
31023: PPUSH
31024: LD_VAR 0 5
31028: PUSH
31029: LD_EXP 86
31033: PUSH
31034: LD_VAR 0 5
31038: ARRAY
31039: PUSH
31040: LD_INT 1
31042: PLUS
31043: PUSH
31044: EMPTY
31045: LIST
31046: LIST
31047: PPUSH
31048: LD_VAR 0 2
31052: PUSH
31053: LD_VAR 0 4
31057: ARRAY
31058: PUSH
31059: LD_VAR 0 2
31063: PUSH
31064: LD_VAR 0 4
31068: ARRAY
31069: PPUSH
31070: CALL_OW 255
31074: PUSH
31075: EMPTY
31076: LIST
31077: LIST
31078: PPUSH
31079: CALL 38665 0 3
31083: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
31084: LD_VAR 0 2
31088: PUSH
31089: LD_VAR 0 4
31093: ARRAY
31094: PPUSH
31095: LD_VAR 0 1
31099: PPUSH
31100: CALL_OW 255
31104: PPUSH
31105: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
31109: LD_VAR 0 2
31113: PUSH
31114: LD_VAR 0 4
31118: ARRAY
31119: PPUSH
31120: CALL_OW 141
// end ;
31124: GO 30956
31126: POP
31127: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
31128: LD_VAR 0 1
31132: PPUSH
31133: LD_EXP 86
31137: PUSH
31138: LD_VAR 0 5
31142: ARRAY
31143: PUSH
31144: LD_INT 0
31146: PLUS
31147: PPUSH
31148: CALL_OW 505
// end ;
31152: LD_VAR 0 3
31156: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
31157: LD_INT 0
31159: PPUSH
31160: PPUSH
31161: PPUSH
31162: PPUSH
// if not hack in hackTanks then
31163: LD_VAR 0 1
31167: PUSH
31168: LD_EXP 85
31172: IN
31173: NOT
31174: IFFALSE 31178
// exit ;
31176: GO 31418
// index := GetElementIndex ( hackTanks , hack ) ;
31178: LD_ADDR_VAR 0 4
31182: PUSH
31183: LD_EXP 85
31187: PPUSH
31188: LD_VAR 0 1
31192: PPUSH
31193: CALL 38450 0 2
31197: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
31198: LD_ADDR_VAR 0 3
31202: PUSH
31203: DOUBLE
31204: LD_EXP 86
31208: PUSH
31209: LD_VAR 0 4
31213: ARRAY
31214: INC
31215: ST_TO_ADDR
31216: LD_INT 1
31218: PUSH
31219: FOR_DOWNTO
31220: IFFALSE 31392
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
31222: LD_ADDR_VAR 0 5
31226: PUSH
31227: LD_EXP 86
31231: PUSH
31232: LD_VAR 0 4
31236: ARRAY
31237: PUSH
31238: LD_VAR 0 3
31242: ARRAY
31243: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
31244: LD_VAR 0 5
31248: PUSH
31249: LD_INT 1
31251: ARRAY
31252: PPUSH
31253: CALL_OW 302
31257: NOT
31258: PUSH
31259: LD_VAR 0 5
31263: PUSH
31264: LD_INT 1
31266: ARRAY
31267: PPUSH
31268: CALL_OW 255
31272: PUSH
31273: LD_VAR 0 1
31277: PPUSH
31278: CALL_OW 255
31282: NONEQUAL
31283: OR
31284: IFFALSE 31390
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
31286: LD_VAR 0 5
31290: PUSH
31291: LD_INT 1
31293: ARRAY
31294: PPUSH
31295: CALL_OW 305
31299: PUSH
31300: LD_VAR 0 5
31304: PUSH
31305: LD_INT 1
31307: ARRAY
31308: PPUSH
31309: CALL_OW 255
31313: PUSH
31314: LD_VAR 0 1
31318: PPUSH
31319: CALL_OW 255
31323: EQUAL
31324: AND
31325: IFFALSE 31349
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
31327: LD_VAR 0 5
31331: PUSH
31332: LD_INT 1
31334: ARRAY
31335: PPUSH
31336: LD_VAR 0 5
31340: PUSH
31341: LD_INT 2
31343: ARRAY
31344: PPUSH
31345: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
31349: LD_ADDR_EXP 86
31353: PUSH
31354: LD_EXP 86
31358: PPUSH
31359: LD_VAR 0 4
31363: PPUSH
31364: LD_EXP 86
31368: PUSH
31369: LD_VAR 0 4
31373: ARRAY
31374: PPUSH
31375: LD_VAR 0 3
31379: PPUSH
31380: CALL_OW 3
31384: PPUSH
31385: CALL_OW 1
31389: ST_TO_ADDR
// end ; end ;
31390: GO 31219
31392: POP
31393: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
31394: LD_VAR 0 1
31398: PPUSH
31399: LD_EXP 86
31403: PUSH
31404: LD_VAR 0 4
31408: ARRAY
31409: PUSH
31410: LD_INT 0
31412: PLUS
31413: PPUSH
31414: CALL_OW 505
// end ;
31418: LD_VAR 0 2
31422: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
31423: LD_INT 0
31425: PPUSH
31426: PPUSH
31427: PPUSH
31428: PPUSH
// if not hack in hackTanks then
31429: LD_VAR 0 1
31433: PUSH
31434: LD_EXP 85
31438: IN
31439: NOT
31440: IFFALSE 31444
// exit ;
31442: GO 31529
// index := GetElementIndex ( hackTanks , hack ) ;
31444: LD_ADDR_VAR 0 5
31448: PUSH
31449: LD_EXP 85
31453: PPUSH
31454: LD_VAR 0 1
31458: PPUSH
31459: CALL 38450 0 2
31463: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
31464: LD_ADDR_VAR 0 4
31468: PUSH
31469: DOUBLE
31470: LD_INT 1
31472: DEC
31473: ST_TO_ADDR
31474: LD_EXP 86
31478: PUSH
31479: LD_VAR 0 5
31483: ARRAY
31484: PUSH
31485: FOR_TO
31486: IFFALSE 31527
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
31488: LD_EXP 86
31492: PUSH
31493: LD_VAR 0 5
31497: ARRAY
31498: PUSH
31499: LD_VAR 0 4
31503: ARRAY
31504: PUSH
31505: LD_INT 1
31507: ARRAY
31508: PUSH
31509: LD_VAR 0 2
31513: EQUAL
31514: IFFALSE 31525
// KillUnit ( vehicle ) ;
31516: LD_VAR 0 2
31520: PPUSH
31521: CALL_OW 66
31525: GO 31485
31527: POP
31528: POP
// end ;
31529: LD_VAR 0 3
31533: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
31534: LD_EXP 90
31538: NOT
31539: IFFALSE 31574
31541: GO 31543
31543: DISABLE
// begin initMiner := true ;
31544: LD_ADDR_EXP 90
31548: PUSH
31549: LD_INT 1
31551: ST_TO_ADDR
// minersList := [ ] ;
31552: LD_ADDR_EXP 91
31556: PUSH
31557: EMPTY
31558: ST_TO_ADDR
// minerMinesList := [ ] ;
31559: LD_ADDR_EXP 92
31563: PUSH
31564: EMPTY
31565: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
31566: LD_ADDR_EXP 93
31570: PUSH
31571: LD_INT 5
31573: ST_TO_ADDR
// end ;
31574: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
31575: LD_EXP 90
31579: PUSH
31580: LD_INT 34
31582: PUSH
31583: LD_INT 81
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: PPUSH
31590: CALL_OW 69
31594: AND
31595: IFFALSE 32056
31597: GO 31599
31599: DISABLE
31600: LD_INT 0
31602: PPUSH
31603: PPUSH
31604: PPUSH
31605: PPUSH
// begin enable ;
31606: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
31607: LD_ADDR_VAR 0 1
31611: PUSH
31612: LD_INT 34
31614: PUSH
31615: LD_INT 81
31617: PUSH
31618: EMPTY
31619: LIST
31620: LIST
31621: PPUSH
31622: CALL_OW 69
31626: PUSH
31627: FOR_IN
31628: IFFALSE 31700
// begin if not i in minersList then
31630: LD_VAR 0 1
31634: PUSH
31635: LD_EXP 91
31639: IN
31640: NOT
31641: IFFALSE 31698
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
31643: LD_ADDR_EXP 91
31647: PUSH
31648: LD_EXP 91
31652: PPUSH
31653: LD_EXP 91
31657: PUSH
31658: LD_INT 1
31660: PLUS
31661: PPUSH
31662: LD_VAR 0 1
31666: PPUSH
31667: CALL_OW 1
31671: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
31672: LD_ADDR_EXP 92
31676: PUSH
31677: LD_EXP 92
31681: PPUSH
31682: LD_EXP 92
31686: PUSH
31687: LD_INT 1
31689: PLUS
31690: PPUSH
31691: EMPTY
31692: PPUSH
31693: CALL_OW 1
31697: ST_TO_ADDR
// end end ;
31698: GO 31627
31700: POP
31701: POP
// for i := minerMinesList downto 1 do
31702: LD_ADDR_VAR 0 1
31706: PUSH
31707: DOUBLE
31708: LD_EXP 92
31712: INC
31713: ST_TO_ADDR
31714: LD_INT 1
31716: PUSH
31717: FOR_DOWNTO
31718: IFFALSE 32054
// begin if IsLive ( minersList [ i ] ) then
31720: LD_EXP 91
31724: PUSH
31725: LD_VAR 0 1
31729: ARRAY
31730: PPUSH
31731: CALL_OW 300
31735: IFFALSE 31763
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
31737: LD_EXP 91
31741: PUSH
31742: LD_VAR 0 1
31746: ARRAY
31747: PPUSH
31748: LD_EXP 92
31752: PUSH
31753: LD_VAR 0 1
31757: ARRAY
31758: PPUSH
31759: CALL_OW 505
// if not minerMinesList [ i ] then
31763: LD_EXP 92
31767: PUSH
31768: LD_VAR 0 1
31772: ARRAY
31773: NOT
31774: IFFALSE 31778
// continue ;
31776: GO 31717
// for j := minerMinesList [ i ] downto 1 do
31778: LD_ADDR_VAR 0 2
31782: PUSH
31783: DOUBLE
31784: LD_EXP 92
31788: PUSH
31789: LD_VAR 0 1
31793: ARRAY
31794: INC
31795: ST_TO_ADDR
31796: LD_INT 1
31798: PUSH
31799: FOR_DOWNTO
31800: IFFALSE 32050
// begin side := GetSide ( minersList [ i ] ) ;
31802: LD_ADDR_VAR 0 3
31806: PUSH
31807: LD_EXP 91
31811: PUSH
31812: LD_VAR 0 1
31816: ARRAY
31817: PPUSH
31818: CALL_OW 255
31822: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
31823: LD_ADDR_VAR 0 4
31827: PUSH
31828: LD_EXP 92
31832: PUSH
31833: LD_VAR 0 1
31837: ARRAY
31838: PUSH
31839: LD_VAR 0 2
31843: ARRAY
31844: PUSH
31845: LD_INT 1
31847: ARRAY
31848: PPUSH
31849: LD_EXP 92
31853: PUSH
31854: LD_VAR 0 1
31858: ARRAY
31859: PUSH
31860: LD_VAR 0 2
31864: ARRAY
31865: PUSH
31866: LD_INT 2
31868: ARRAY
31869: PPUSH
31870: CALL_OW 428
31874: ST_TO_ADDR
// if not tmp then
31875: LD_VAR 0 4
31879: NOT
31880: IFFALSE 31884
// continue ;
31882: GO 31799
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
31884: LD_VAR 0 4
31888: PUSH
31889: LD_INT 81
31891: PUSH
31892: LD_VAR 0 3
31896: PUSH
31897: EMPTY
31898: LIST
31899: LIST
31900: PPUSH
31901: CALL_OW 69
31905: IN
31906: PUSH
31907: LD_EXP 92
31911: PUSH
31912: LD_VAR 0 1
31916: ARRAY
31917: PUSH
31918: LD_VAR 0 2
31922: ARRAY
31923: PUSH
31924: LD_INT 1
31926: ARRAY
31927: PPUSH
31928: LD_EXP 92
31932: PUSH
31933: LD_VAR 0 1
31937: ARRAY
31938: PUSH
31939: LD_VAR 0 2
31943: ARRAY
31944: PUSH
31945: LD_INT 2
31947: ARRAY
31948: PPUSH
31949: CALL_OW 458
31953: AND
31954: IFFALSE 32048
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
31956: LD_EXP 92
31960: PUSH
31961: LD_VAR 0 1
31965: ARRAY
31966: PUSH
31967: LD_VAR 0 2
31971: ARRAY
31972: PUSH
31973: LD_INT 1
31975: ARRAY
31976: PPUSH
31977: LD_EXP 92
31981: PUSH
31982: LD_VAR 0 1
31986: ARRAY
31987: PUSH
31988: LD_VAR 0 2
31992: ARRAY
31993: PUSH
31994: LD_INT 2
31996: ARRAY
31997: PPUSH
31998: LD_VAR 0 3
32002: PPUSH
32003: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
32007: LD_ADDR_EXP 92
32011: PUSH
32012: LD_EXP 92
32016: PPUSH
32017: LD_VAR 0 1
32021: PPUSH
32022: LD_EXP 92
32026: PUSH
32027: LD_VAR 0 1
32031: ARRAY
32032: PPUSH
32033: LD_VAR 0 2
32037: PPUSH
32038: CALL_OW 3
32042: PPUSH
32043: CALL_OW 1
32047: ST_TO_ADDR
// end ; end ;
32048: GO 31799
32050: POP
32051: POP
// end ;
32052: GO 31717
32054: POP
32055: POP
// end ;
32056: PPOPN 4
32058: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
32059: LD_INT 0
32061: PPUSH
32062: PPUSH
// result := false ;
32063: LD_ADDR_VAR 0 4
32067: PUSH
32068: LD_INT 0
32070: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
32071: LD_VAR 0 1
32075: PPUSH
32076: CALL_OW 264
32080: PUSH
32081: LD_INT 81
32083: EQUAL
32084: NOT
32085: IFFALSE 32089
// exit ;
32087: GO 32329
// index := GetElementIndex ( minersList , unit ) ;
32089: LD_ADDR_VAR 0 5
32093: PUSH
32094: LD_EXP 91
32098: PPUSH
32099: LD_VAR 0 1
32103: PPUSH
32104: CALL 38450 0 2
32108: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
32109: LD_EXP 92
32113: PUSH
32114: LD_VAR 0 5
32118: ARRAY
32119: PUSH
32120: LD_EXP 93
32124: GREATEREQUAL
32125: IFFALSE 32129
// exit ;
32127: GO 32329
// ComMoveXY ( unit , x , y ) ;
32129: LD_VAR 0 1
32133: PPUSH
32134: LD_VAR 0 2
32138: PPUSH
32139: LD_VAR 0 3
32143: PPUSH
32144: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32148: LD_INT 35
32150: PPUSH
32151: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
32155: LD_VAR 0 1
32159: PPUSH
32160: LD_VAR 0 2
32164: PPUSH
32165: LD_VAR 0 3
32169: PPUSH
32170: CALL 70211 0 3
32174: NOT
32175: PUSH
32176: LD_VAR 0 1
32180: PPUSH
32181: CALL_OW 314
32185: AND
32186: IFFALSE 32190
// exit ;
32188: GO 32329
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
32190: LD_VAR 0 2
32194: PPUSH
32195: LD_VAR 0 3
32199: PPUSH
32200: CALL_OW 428
32204: PUSH
32205: LD_VAR 0 1
32209: EQUAL
32210: PUSH
32211: LD_VAR 0 1
32215: PPUSH
32216: CALL_OW 314
32220: NOT
32221: AND
32222: IFFALSE 32148
// PlaySoundXY ( x , y , PlantMine ) ;
32224: LD_VAR 0 2
32228: PPUSH
32229: LD_VAR 0 3
32233: PPUSH
32234: LD_STRING PlantMine
32236: PPUSH
32237: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
32241: LD_VAR 0 2
32245: PPUSH
32246: LD_VAR 0 3
32250: PPUSH
32251: LD_VAR 0 1
32255: PPUSH
32256: CALL_OW 255
32260: PPUSH
32261: LD_INT 0
32263: PPUSH
32264: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
32268: LD_ADDR_EXP 92
32272: PUSH
32273: LD_EXP 92
32277: PPUSH
32278: LD_VAR 0 5
32282: PUSH
32283: LD_EXP 92
32287: PUSH
32288: LD_VAR 0 5
32292: ARRAY
32293: PUSH
32294: LD_INT 1
32296: PLUS
32297: PUSH
32298: EMPTY
32299: LIST
32300: LIST
32301: PPUSH
32302: LD_VAR 0 2
32306: PUSH
32307: LD_VAR 0 3
32311: PUSH
32312: EMPTY
32313: LIST
32314: LIST
32315: PPUSH
32316: CALL 38665 0 3
32320: ST_TO_ADDR
// result := true ;
32321: LD_ADDR_VAR 0 4
32325: PUSH
32326: LD_INT 1
32328: ST_TO_ADDR
// end ;
32329: LD_VAR 0 4
32333: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
32334: LD_INT 0
32336: PPUSH
32337: PPUSH
32338: PPUSH
// if not unit in minersList then
32339: LD_VAR 0 1
32343: PUSH
32344: LD_EXP 91
32348: IN
32349: NOT
32350: IFFALSE 32354
// exit ;
32352: GO 32746
// index := GetElementIndex ( minersList , unit ) ;
32354: LD_ADDR_VAR 0 6
32358: PUSH
32359: LD_EXP 91
32363: PPUSH
32364: LD_VAR 0 1
32368: PPUSH
32369: CALL 38450 0 2
32373: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
32374: LD_ADDR_VAR 0 5
32378: PUSH
32379: DOUBLE
32380: LD_EXP 92
32384: PUSH
32385: LD_VAR 0 6
32389: ARRAY
32390: INC
32391: ST_TO_ADDR
32392: LD_INT 1
32394: PUSH
32395: FOR_DOWNTO
32396: IFFALSE 32557
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
32398: LD_EXP 92
32402: PUSH
32403: LD_VAR 0 6
32407: ARRAY
32408: PUSH
32409: LD_VAR 0 5
32413: ARRAY
32414: PUSH
32415: LD_INT 1
32417: ARRAY
32418: PUSH
32419: LD_VAR 0 2
32423: EQUAL
32424: PUSH
32425: LD_EXP 92
32429: PUSH
32430: LD_VAR 0 6
32434: ARRAY
32435: PUSH
32436: LD_VAR 0 5
32440: ARRAY
32441: PUSH
32442: LD_INT 2
32444: ARRAY
32445: PUSH
32446: LD_VAR 0 3
32450: EQUAL
32451: AND
32452: IFFALSE 32555
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
32454: LD_EXP 92
32458: PUSH
32459: LD_VAR 0 6
32463: ARRAY
32464: PUSH
32465: LD_VAR 0 5
32469: ARRAY
32470: PUSH
32471: LD_INT 1
32473: ARRAY
32474: PPUSH
32475: LD_EXP 92
32479: PUSH
32480: LD_VAR 0 6
32484: ARRAY
32485: PUSH
32486: LD_VAR 0 5
32490: ARRAY
32491: PUSH
32492: LD_INT 2
32494: ARRAY
32495: PPUSH
32496: LD_VAR 0 1
32500: PPUSH
32501: CALL_OW 255
32505: PPUSH
32506: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
32510: LD_ADDR_EXP 92
32514: PUSH
32515: LD_EXP 92
32519: PPUSH
32520: LD_VAR 0 6
32524: PPUSH
32525: LD_EXP 92
32529: PUSH
32530: LD_VAR 0 6
32534: ARRAY
32535: PPUSH
32536: LD_VAR 0 5
32540: PPUSH
32541: CALL_OW 3
32545: PPUSH
32546: CALL_OW 1
32550: ST_TO_ADDR
// exit ;
32551: POP
32552: POP
32553: GO 32746
// end ; end ;
32555: GO 32395
32557: POP
32558: POP
// for i := minerMinesList [ index ] downto 1 do
32559: LD_ADDR_VAR 0 5
32563: PUSH
32564: DOUBLE
32565: LD_EXP 92
32569: PUSH
32570: LD_VAR 0 6
32574: ARRAY
32575: INC
32576: ST_TO_ADDR
32577: LD_INT 1
32579: PUSH
32580: FOR_DOWNTO
32581: IFFALSE 32744
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
32583: LD_EXP 92
32587: PUSH
32588: LD_VAR 0 6
32592: ARRAY
32593: PUSH
32594: LD_VAR 0 5
32598: ARRAY
32599: PUSH
32600: LD_INT 1
32602: ARRAY
32603: PPUSH
32604: LD_EXP 92
32608: PUSH
32609: LD_VAR 0 6
32613: ARRAY
32614: PUSH
32615: LD_VAR 0 5
32619: ARRAY
32620: PUSH
32621: LD_INT 2
32623: ARRAY
32624: PPUSH
32625: LD_VAR 0 2
32629: PPUSH
32630: LD_VAR 0 3
32634: PPUSH
32635: CALL_OW 298
32639: PUSH
32640: LD_INT 6
32642: LESS
32643: IFFALSE 32742
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
32645: LD_EXP 92
32649: PUSH
32650: LD_VAR 0 6
32654: ARRAY
32655: PUSH
32656: LD_VAR 0 5
32660: ARRAY
32661: PUSH
32662: LD_INT 1
32664: ARRAY
32665: PPUSH
32666: LD_EXP 92
32670: PUSH
32671: LD_VAR 0 6
32675: ARRAY
32676: PUSH
32677: LD_VAR 0 5
32681: ARRAY
32682: PUSH
32683: LD_INT 2
32685: ARRAY
32686: PPUSH
32687: LD_VAR 0 1
32691: PPUSH
32692: CALL_OW 255
32696: PPUSH
32697: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
32701: LD_ADDR_EXP 92
32705: PUSH
32706: LD_EXP 92
32710: PPUSH
32711: LD_VAR 0 6
32715: PPUSH
32716: LD_EXP 92
32720: PUSH
32721: LD_VAR 0 6
32725: ARRAY
32726: PPUSH
32727: LD_VAR 0 5
32731: PPUSH
32732: CALL_OW 3
32736: PPUSH
32737: CALL_OW 1
32741: ST_TO_ADDR
// end ; end ;
32742: GO 32580
32744: POP
32745: POP
// end ;
32746: LD_VAR 0 4
32750: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
32751: LD_INT 0
32753: PPUSH
32754: PPUSH
32755: PPUSH
32756: PPUSH
32757: PPUSH
32758: PPUSH
32759: PPUSH
32760: PPUSH
32761: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
32762: LD_VAR 0 1
32766: PPUSH
32767: CALL_OW 264
32771: PUSH
32772: LD_INT 81
32774: EQUAL
32775: NOT
32776: PUSH
32777: LD_VAR 0 1
32781: PUSH
32782: LD_EXP 91
32786: IN
32787: NOT
32788: OR
32789: IFFALSE 32793
// exit ;
32791: GO 33115
// index := GetElementIndex ( minersList , unit ) ;
32793: LD_ADDR_VAR 0 6
32797: PUSH
32798: LD_EXP 91
32802: PPUSH
32803: LD_VAR 0 1
32807: PPUSH
32808: CALL 38450 0 2
32812: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
32813: LD_ADDR_VAR 0 8
32817: PUSH
32818: LD_EXP 93
32822: PUSH
32823: LD_EXP 92
32827: PUSH
32828: LD_VAR 0 6
32832: ARRAY
32833: MINUS
32834: ST_TO_ADDR
// if not minesFreeAmount then
32835: LD_VAR 0 8
32839: NOT
32840: IFFALSE 32844
// exit ;
32842: GO 33115
// tmp := [ ] ;
32844: LD_ADDR_VAR 0 7
32848: PUSH
32849: EMPTY
32850: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
32851: LD_ADDR_VAR 0 5
32855: PUSH
32856: DOUBLE
32857: LD_INT 1
32859: DEC
32860: ST_TO_ADDR
32861: LD_VAR 0 8
32865: PUSH
32866: FOR_TO
32867: IFFALSE 33062
// begin _d := rand ( 0 , 5 ) ;
32869: LD_ADDR_VAR 0 11
32873: PUSH
32874: LD_INT 0
32876: PPUSH
32877: LD_INT 5
32879: PPUSH
32880: CALL_OW 12
32884: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
32885: LD_ADDR_VAR 0 12
32889: PUSH
32890: LD_INT 2
32892: PPUSH
32893: LD_INT 6
32895: PPUSH
32896: CALL_OW 12
32900: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
32901: LD_ADDR_VAR 0 9
32905: PUSH
32906: LD_VAR 0 2
32910: PPUSH
32911: LD_VAR 0 11
32915: PPUSH
32916: LD_VAR 0 12
32920: PPUSH
32921: CALL_OW 272
32925: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
32926: LD_ADDR_VAR 0 10
32930: PUSH
32931: LD_VAR 0 3
32935: PPUSH
32936: LD_VAR 0 11
32940: PPUSH
32941: LD_VAR 0 12
32945: PPUSH
32946: CALL_OW 273
32950: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
32951: LD_VAR 0 9
32955: PPUSH
32956: LD_VAR 0 10
32960: PPUSH
32961: CALL_OW 488
32965: PUSH
32966: LD_VAR 0 9
32970: PUSH
32971: LD_VAR 0 10
32975: PUSH
32976: EMPTY
32977: LIST
32978: LIST
32979: PUSH
32980: LD_VAR 0 7
32984: IN
32985: NOT
32986: AND
32987: PUSH
32988: LD_VAR 0 9
32992: PPUSH
32993: LD_VAR 0 10
32997: PPUSH
32998: CALL_OW 458
33002: NOT
33003: AND
33004: IFFALSE 33046
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
33006: LD_ADDR_VAR 0 7
33010: PUSH
33011: LD_VAR 0 7
33015: PPUSH
33016: LD_VAR 0 7
33020: PUSH
33021: LD_INT 1
33023: PLUS
33024: PPUSH
33025: LD_VAR 0 9
33029: PUSH
33030: LD_VAR 0 10
33034: PUSH
33035: EMPTY
33036: LIST
33037: LIST
33038: PPUSH
33039: CALL_OW 1
33043: ST_TO_ADDR
33044: GO 33060
// i := i - 1 ;
33046: LD_ADDR_VAR 0 5
33050: PUSH
33051: LD_VAR 0 5
33055: PUSH
33056: LD_INT 1
33058: MINUS
33059: ST_TO_ADDR
// end ;
33060: GO 32866
33062: POP
33063: POP
// for i in tmp do
33064: LD_ADDR_VAR 0 5
33068: PUSH
33069: LD_VAR 0 7
33073: PUSH
33074: FOR_IN
33075: IFFALSE 33113
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
33077: LD_VAR 0 1
33081: PPUSH
33082: LD_VAR 0 5
33086: PUSH
33087: LD_INT 1
33089: ARRAY
33090: PPUSH
33091: LD_VAR 0 5
33095: PUSH
33096: LD_INT 2
33098: ARRAY
33099: PPUSH
33100: CALL 32059 0 3
33104: NOT
33105: IFFALSE 33111
// exit ;
33107: POP
33108: POP
33109: GO 33115
33111: GO 33074
33113: POP
33114: POP
// end ;
33115: LD_VAR 0 4
33119: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
33120: LD_INT 0
33122: PPUSH
33123: PPUSH
33124: PPUSH
33125: PPUSH
33126: PPUSH
33127: PPUSH
33128: PPUSH
33129: PPUSH
33130: PPUSH
// if GetClass ( unit ) <> class_sniper then
33131: LD_VAR 0 1
33135: PPUSH
33136: CALL_OW 257
33140: PUSH
33141: LD_INT 5
33143: NONEQUAL
33144: IFFALSE 33148
// exit ;
33146: GO 33614
// dist := 8 ;
33148: LD_ADDR_VAR 0 5
33152: PUSH
33153: LD_INT 8
33155: ST_TO_ADDR
// viewRange := 12 ;
33156: LD_ADDR_VAR 0 8
33160: PUSH
33161: LD_INT 12
33163: ST_TO_ADDR
// side := GetSide ( unit ) ;
33164: LD_ADDR_VAR 0 6
33168: PUSH
33169: LD_VAR 0 1
33173: PPUSH
33174: CALL_OW 255
33178: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
33179: LD_INT 61
33181: PPUSH
33182: LD_VAR 0 6
33186: PPUSH
33187: CALL_OW 321
33191: PUSH
33192: LD_INT 2
33194: EQUAL
33195: IFFALSE 33205
// viewRange := 16 ;
33197: LD_ADDR_VAR 0 8
33201: PUSH
33202: LD_INT 16
33204: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
33205: LD_VAR 0 1
33209: PPUSH
33210: LD_VAR 0 2
33214: PPUSH
33215: LD_VAR 0 3
33219: PPUSH
33220: CALL_OW 297
33224: PUSH
33225: LD_VAR 0 5
33229: GREATER
33230: IFFALSE 33309
// begin ComMoveXY ( unit , x , y ) ;
33232: LD_VAR 0 1
33236: PPUSH
33237: LD_VAR 0 2
33241: PPUSH
33242: LD_VAR 0 3
33246: PPUSH
33247: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
33251: LD_INT 35
33253: PPUSH
33254: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
33258: LD_VAR 0 1
33262: PPUSH
33263: LD_VAR 0 2
33267: PPUSH
33268: LD_VAR 0 3
33272: PPUSH
33273: CALL 70211 0 3
33277: NOT
33278: IFFALSE 33282
// exit ;
33280: GO 33614
// until GetDistUnitXY ( unit , x , y ) < dist ;
33282: LD_VAR 0 1
33286: PPUSH
33287: LD_VAR 0 2
33291: PPUSH
33292: LD_VAR 0 3
33296: PPUSH
33297: CALL_OW 297
33301: PUSH
33302: LD_VAR 0 5
33306: LESS
33307: IFFALSE 33251
// end ; ComTurnXY ( unit , x , y ) ;
33309: LD_VAR 0 1
33313: PPUSH
33314: LD_VAR 0 2
33318: PPUSH
33319: LD_VAR 0 3
33323: PPUSH
33324: CALL_OW 118
// repeat if Multiplayer then
33328: LD_OWVAR 4
33332: IFFALSE 33343
// wait ( 35 ) else
33334: LD_INT 35
33336: PPUSH
33337: CALL_OW 67
33341: GO 33350
// wait ( 5 ) ;
33343: LD_INT 5
33345: PPUSH
33346: CALL_OW 67
// _d := GetDir ( unit ) ;
33350: LD_ADDR_VAR 0 11
33354: PUSH
33355: LD_VAR 0 1
33359: PPUSH
33360: CALL_OW 254
33364: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
33365: LD_ADDR_VAR 0 7
33369: PUSH
33370: LD_VAR 0 1
33374: PPUSH
33375: CALL_OW 250
33379: PPUSH
33380: LD_VAR 0 1
33384: PPUSH
33385: CALL_OW 251
33389: PPUSH
33390: LD_VAR 0 2
33394: PPUSH
33395: LD_VAR 0 3
33399: PPUSH
33400: CALL 72819 0 4
33404: ST_TO_ADDR
// until dir = _d ;
33405: LD_VAR 0 7
33409: PUSH
33410: LD_VAR 0 11
33414: EQUAL
33415: IFFALSE 33328
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
33417: LD_ADDR_VAR 0 9
33421: PUSH
33422: LD_VAR 0 1
33426: PPUSH
33427: CALL_OW 250
33431: PPUSH
33432: LD_VAR 0 7
33436: PPUSH
33437: LD_VAR 0 5
33441: PPUSH
33442: CALL_OW 272
33446: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
33447: LD_ADDR_VAR 0 10
33451: PUSH
33452: LD_VAR 0 1
33456: PPUSH
33457: CALL_OW 251
33461: PPUSH
33462: LD_VAR 0 7
33466: PPUSH
33467: LD_VAR 0 5
33471: PPUSH
33472: CALL_OW 273
33476: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33477: LD_VAR 0 9
33481: PPUSH
33482: LD_VAR 0 10
33486: PPUSH
33487: CALL_OW 488
33491: NOT
33492: IFFALSE 33496
// exit ;
33494: GO 33614
// ComAnimCustom ( unit , 1 ) ;
33496: LD_VAR 0 1
33500: PPUSH
33501: LD_INT 1
33503: PPUSH
33504: CALL_OW 592
// p := 0 ;
33508: LD_ADDR_VAR 0 12
33512: PUSH
33513: LD_INT 0
33515: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
33516: LD_VAR 0 9
33520: PPUSH
33521: LD_VAR 0 10
33525: PPUSH
33526: LD_VAR 0 6
33530: PPUSH
33531: LD_VAR 0 8
33535: PPUSH
33536: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
33540: LD_INT 35
33542: PPUSH
33543: CALL_OW 67
// p := Inc ( p ) ;
33547: LD_ADDR_VAR 0 12
33551: PUSH
33552: LD_VAR 0 12
33556: PPUSH
33557: CALL 72775 0 1
33561: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
33562: LD_VAR 0 12
33566: PUSH
33567: LD_INT 3
33569: EQUAL
33570: PUSH
33571: LD_VAR 0 1
33575: PPUSH
33576: CALL_OW 302
33580: NOT
33581: OR
33582: PUSH
33583: LD_VAR 0 1
33587: PPUSH
33588: CALL_OW 301
33592: OR
33593: IFFALSE 33540
// RemoveSeeing ( _x , _y , side ) ;
33595: LD_VAR 0 9
33599: PPUSH
33600: LD_VAR 0 10
33604: PPUSH
33605: LD_VAR 0 6
33609: PPUSH
33610: CALL_OW 331
// end ; end_of_file
33614: LD_VAR 0 4
33618: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
33619: LD_INT 0
33621: PPUSH
33622: PPUSH
// if exist_mode then
33623: LD_VAR 0 2
33627: IFFALSE 33673
// begin unit := CreateCharacter ( prefix & ident ) ;
33629: LD_ADDR_VAR 0 5
33633: PUSH
33634: LD_VAR 0 3
33638: PUSH
33639: LD_VAR 0 1
33643: STR
33644: PPUSH
33645: CALL_OW 34
33649: ST_TO_ADDR
// if unit then
33650: LD_VAR 0 5
33654: IFFALSE 33671
// DeleteCharacters ( prefix & ident ) ;
33656: LD_VAR 0 3
33660: PUSH
33661: LD_VAR 0 1
33665: STR
33666: PPUSH
33667: CALL_OW 40
// end else
33671: GO 33688
// unit := NewCharacter ( ident ) ;
33673: LD_ADDR_VAR 0 5
33677: PUSH
33678: LD_VAR 0 1
33682: PPUSH
33683: CALL_OW 25
33687: ST_TO_ADDR
// result := unit ;
33688: LD_ADDR_VAR 0 4
33692: PUSH
33693: LD_VAR 0 5
33697: ST_TO_ADDR
// end ;
33698: LD_VAR 0 4
33702: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
33703: LD_INT 0
33705: PPUSH
33706: PPUSH
// if exist_mode then
33707: LD_VAR 0 2
33711: IFFALSE 33736
// unit := CreateCharacter ( prefix & ident ) else
33713: LD_ADDR_VAR 0 5
33717: PUSH
33718: LD_VAR 0 3
33722: PUSH
33723: LD_VAR 0 1
33727: STR
33728: PPUSH
33729: CALL_OW 34
33733: ST_TO_ADDR
33734: GO 33751
// unit := NewCharacter ( ident ) ;
33736: LD_ADDR_VAR 0 5
33740: PUSH
33741: LD_VAR 0 1
33745: PPUSH
33746: CALL_OW 25
33750: ST_TO_ADDR
// result := unit ;
33751: LD_ADDR_VAR 0 4
33755: PUSH
33756: LD_VAR 0 5
33760: ST_TO_ADDR
// end ;
33761: LD_VAR 0 4
33765: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
33766: LD_INT 0
33768: PPUSH
33769: PPUSH
// if not side or not nation then
33770: LD_VAR 0 1
33774: NOT
33775: PUSH
33776: LD_VAR 0 2
33780: NOT
33781: OR
33782: IFFALSE 33786
// exit ;
33784: GO 34554
// case nation of nation_american :
33786: LD_VAR 0 2
33790: PUSH
33791: LD_INT 1
33793: DOUBLE
33794: EQUAL
33795: IFTRUE 33799
33797: GO 34013
33799: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
33800: LD_ADDR_VAR 0 4
33804: PUSH
33805: LD_INT 35
33807: PUSH
33808: LD_INT 45
33810: PUSH
33811: LD_INT 46
33813: PUSH
33814: LD_INT 47
33816: PUSH
33817: LD_INT 82
33819: PUSH
33820: LD_INT 83
33822: PUSH
33823: LD_INT 84
33825: PUSH
33826: LD_INT 85
33828: PUSH
33829: LD_INT 86
33831: PUSH
33832: LD_INT 1
33834: PUSH
33835: LD_INT 2
33837: PUSH
33838: LD_INT 6
33840: PUSH
33841: LD_INT 15
33843: PUSH
33844: LD_INT 16
33846: PUSH
33847: LD_INT 7
33849: PUSH
33850: LD_INT 12
33852: PUSH
33853: LD_INT 13
33855: PUSH
33856: LD_INT 10
33858: PUSH
33859: LD_INT 14
33861: PUSH
33862: LD_INT 20
33864: PUSH
33865: LD_INT 21
33867: PUSH
33868: LD_INT 22
33870: PUSH
33871: LD_INT 25
33873: PUSH
33874: LD_INT 32
33876: PUSH
33877: LD_INT 27
33879: PUSH
33880: LD_INT 36
33882: PUSH
33883: LD_INT 69
33885: PUSH
33886: LD_INT 39
33888: PUSH
33889: LD_INT 34
33891: PUSH
33892: LD_INT 40
33894: PUSH
33895: LD_INT 48
33897: PUSH
33898: LD_INT 49
33900: PUSH
33901: LD_INT 50
33903: PUSH
33904: LD_INT 51
33906: PUSH
33907: LD_INT 52
33909: PUSH
33910: LD_INT 53
33912: PUSH
33913: LD_INT 54
33915: PUSH
33916: LD_INT 55
33918: PUSH
33919: LD_INT 56
33921: PUSH
33922: LD_INT 57
33924: PUSH
33925: LD_INT 58
33927: PUSH
33928: LD_INT 59
33930: PUSH
33931: LD_INT 60
33933: PUSH
33934: LD_INT 61
33936: PUSH
33937: LD_INT 62
33939: PUSH
33940: LD_INT 80
33942: PUSH
33943: LD_INT 82
33945: PUSH
33946: LD_INT 83
33948: PUSH
33949: LD_INT 84
33951: PUSH
33952: LD_INT 85
33954: PUSH
33955: LD_INT 86
33957: PUSH
33958: EMPTY
33959: LIST
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: LIST
33965: LIST
33966: LIST
33967: LIST
33968: LIST
33969: LIST
33970: LIST
33971: LIST
33972: LIST
33973: LIST
33974: LIST
33975: LIST
33976: LIST
33977: LIST
33978: LIST
33979: LIST
33980: LIST
33981: LIST
33982: LIST
33983: LIST
33984: LIST
33985: LIST
33986: LIST
33987: LIST
33988: LIST
33989: LIST
33990: LIST
33991: LIST
33992: LIST
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: LIST
34007: LIST
34008: LIST
34009: LIST
34010: ST_TO_ADDR
34011: GO 34478
34013: LD_INT 2
34015: DOUBLE
34016: EQUAL
34017: IFTRUE 34021
34019: GO 34247
34021: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
34022: LD_ADDR_VAR 0 4
34026: PUSH
34027: LD_INT 35
34029: PUSH
34030: LD_INT 45
34032: PUSH
34033: LD_INT 46
34035: PUSH
34036: LD_INT 47
34038: PUSH
34039: LD_INT 82
34041: PUSH
34042: LD_INT 83
34044: PUSH
34045: LD_INT 84
34047: PUSH
34048: LD_INT 85
34050: PUSH
34051: LD_INT 87
34053: PUSH
34054: LD_INT 70
34056: PUSH
34057: LD_INT 1
34059: PUSH
34060: LD_INT 11
34062: PUSH
34063: LD_INT 3
34065: PUSH
34066: LD_INT 4
34068: PUSH
34069: LD_INT 5
34071: PUSH
34072: LD_INT 6
34074: PUSH
34075: LD_INT 15
34077: PUSH
34078: LD_INT 18
34080: PUSH
34081: LD_INT 7
34083: PUSH
34084: LD_INT 17
34086: PUSH
34087: LD_INT 8
34089: PUSH
34090: LD_INT 20
34092: PUSH
34093: LD_INT 21
34095: PUSH
34096: LD_INT 22
34098: PUSH
34099: LD_INT 72
34101: PUSH
34102: LD_INT 26
34104: PUSH
34105: LD_INT 69
34107: PUSH
34108: LD_INT 39
34110: PUSH
34111: LD_INT 40
34113: PUSH
34114: LD_INT 41
34116: PUSH
34117: LD_INT 42
34119: PUSH
34120: LD_INT 43
34122: PUSH
34123: LD_INT 48
34125: PUSH
34126: LD_INT 49
34128: PUSH
34129: LD_INT 50
34131: PUSH
34132: LD_INT 51
34134: PUSH
34135: LD_INT 52
34137: PUSH
34138: LD_INT 53
34140: PUSH
34141: LD_INT 54
34143: PUSH
34144: LD_INT 55
34146: PUSH
34147: LD_INT 56
34149: PUSH
34150: LD_INT 60
34152: PUSH
34153: LD_INT 61
34155: PUSH
34156: LD_INT 62
34158: PUSH
34159: LD_INT 66
34161: PUSH
34162: LD_INT 67
34164: PUSH
34165: LD_INT 68
34167: PUSH
34168: LD_INT 81
34170: PUSH
34171: LD_INT 82
34173: PUSH
34174: LD_INT 83
34176: PUSH
34177: LD_INT 84
34179: PUSH
34180: LD_INT 85
34182: PUSH
34183: LD_INT 87
34185: PUSH
34186: LD_INT 88
34188: PUSH
34189: EMPTY
34190: LIST
34191: LIST
34192: LIST
34193: LIST
34194: LIST
34195: LIST
34196: LIST
34197: LIST
34198: LIST
34199: LIST
34200: LIST
34201: LIST
34202: LIST
34203: LIST
34204: LIST
34205: LIST
34206: LIST
34207: LIST
34208: LIST
34209: LIST
34210: LIST
34211: LIST
34212: LIST
34213: LIST
34214: LIST
34215: LIST
34216: LIST
34217: LIST
34218: LIST
34219: LIST
34220: LIST
34221: LIST
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: LIST
34243: LIST
34244: ST_TO_ADDR
34245: GO 34478
34247: LD_INT 3
34249: DOUBLE
34250: EQUAL
34251: IFTRUE 34255
34253: GO 34477
34255: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
34256: LD_ADDR_VAR 0 4
34260: PUSH
34261: LD_INT 46
34263: PUSH
34264: LD_INT 47
34266: PUSH
34267: LD_INT 1
34269: PUSH
34270: LD_INT 2
34272: PUSH
34273: LD_INT 82
34275: PUSH
34276: LD_INT 83
34278: PUSH
34279: LD_INT 84
34281: PUSH
34282: LD_INT 85
34284: PUSH
34285: LD_INT 86
34287: PUSH
34288: LD_INT 11
34290: PUSH
34291: LD_INT 9
34293: PUSH
34294: LD_INT 20
34296: PUSH
34297: LD_INT 19
34299: PUSH
34300: LD_INT 21
34302: PUSH
34303: LD_INT 24
34305: PUSH
34306: LD_INT 22
34308: PUSH
34309: LD_INT 25
34311: PUSH
34312: LD_INT 28
34314: PUSH
34315: LD_INT 29
34317: PUSH
34318: LD_INT 30
34320: PUSH
34321: LD_INT 31
34323: PUSH
34324: LD_INT 37
34326: PUSH
34327: LD_INT 38
34329: PUSH
34330: LD_INT 32
34332: PUSH
34333: LD_INT 27
34335: PUSH
34336: LD_INT 33
34338: PUSH
34339: LD_INT 69
34341: PUSH
34342: LD_INT 39
34344: PUSH
34345: LD_INT 34
34347: PUSH
34348: LD_INT 40
34350: PUSH
34351: LD_INT 71
34353: PUSH
34354: LD_INT 23
34356: PUSH
34357: LD_INT 44
34359: PUSH
34360: LD_INT 48
34362: PUSH
34363: LD_INT 49
34365: PUSH
34366: LD_INT 50
34368: PUSH
34369: LD_INT 51
34371: PUSH
34372: LD_INT 52
34374: PUSH
34375: LD_INT 53
34377: PUSH
34378: LD_INT 54
34380: PUSH
34381: LD_INT 55
34383: PUSH
34384: LD_INT 56
34386: PUSH
34387: LD_INT 57
34389: PUSH
34390: LD_INT 58
34392: PUSH
34393: LD_INT 59
34395: PUSH
34396: LD_INT 63
34398: PUSH
34399: LD_INT 64
34401: PUSH
34402: LD_INT 65
34404: PUSH
34405: LD_INT 82
34407: PUSH
34408: LD_INT 83
34410: PUSH
34411: LD_INT 84
34413: PUSH
34414: LD_INT 85
34416: PUSH
34417: LD_INT 86
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: LIST
34424: LIST
34425: LIST
34426: LIST
34427: LIST
34428: LIST
34429: LIST
34430: LIST
34431: LIST
34432: LIST
34433: LIST
34434: LIST
34435: LIST
34436: LIST
34437: LIST
34438: LIST
34439: LIST
34440: LIST
34441: LIST
34442: LIST
34443: LIST
34444: LIST
34445: LIST
34446: LIST
34447: LIST
34448: LIST
34449: LIST
34450: LIST
34451: LIST
34452: LIST
34453: LIST
34454: LIST
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: LIST
34460: LIST
34461: LIST
34462: LIST
34463: LIST
34464: LIST
34465: LIST
34466: LIST
34467: LIST
34468: LIST
34469: LIST
34470: LIST
34471: LIST
34472: LIST
34473: LIST
34474: ST_TO_ADDR
34475: GO 34478
34477: POP
// if state > - 1 and state < 3 then
34478: LD_VAR 0 3
34482: PUSH
34483: LD_INT 1
34485: NEG
34486: GREATER
34487: PUSH
34488: LD_VAR 0 3
34492: PUSH
34493: LD_INT 3
34495: LESS
34496: AND
34497: IFFALSE 34554
// for i in result do
34499: LD_ADDR_VAR 0 5
34503: PUSH
34504: LD_VAR 0 4
34508: PUSH
34509: FOR_IN
34510: IFFALSE 34552
// if GetTech ( i , side ) <> state then
34512: LD_VAR 0 5
34516: PPUSH
34517: LD_VAR 0 1
34521: PPUSH
34522: CALL_OW 321
34526: PUSH
34527: LD_VAR 0 3
34531: NONEQUAL
34532: IFFALSE 34550
// result := result diff i ;
34534: LD_ADDR_VAR 0 4
34538: PUSH
34539: LD_VAR 0 4
34543: PUSH
34544: LD_VAR 0 5
34548: DIFF
34549: ST_TO_ADDR
34550: GO 34509
34552: POP
34553: POP
// end ;
34554: LD_VAR 0 4
34558: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
34559: LD_INT 0
34561: PPUSH
34562: PPUSH
34563: PPUSH
// result := true ;
34564: LD_ADDR_VAR 0 3
34568: PUSH
34569: LD_INT 1
34571: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
34572: LD_ADDR_VAR 0 5
34576: PUSH
34577: LD_VAR 0 2
34581: PPUSH
34582: CALL_OW 480
34586: ST_TO_ADDR
// if not tmp then
34587: LD_VAR 0 5
34591: NOT
34592: IFFALSE 34596
// exit ;
34594: GO 34645
// for i in tmp do
34596: LD_ADDR_VAR 0 4
34600: PUSH
34601: LD_VAR 0 5
34605: PUSH
34606: FOR_IN
34607: IFFALSE 34643
// if GetTech ( i , side ) <> state_researched then
34609: LD_VAR 0 4
34613: PPUSH
34614: LD_VAR 0 1
34618: PPUSH
34619: CALL_OW 321
34623: PUSH
34624: LD_INT 2
34626: NONEQUAL
34627: IFFALSE 34641
// begin result := false ;
34629: LD_ADDR_VAR 0 3
34633: PUSH
34634: LD_INT 0
34636: ST_TO_ADDR
// exit ;
34637: POP
34638: POP
34639: GO 34645
// end ;
34641: GO 34606
34643: POP
34644: POP
// end ;
34645: LD_VAR 0 3
34649: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
34650: LD_INT 0
34652: PPUSH
34653: PPUSH
34654: PPUSH
34655: PPUSH
34656: PPUSH
34657: PPUSH
34658: PPUSH
34659: PPUSH
34660: PPUSH
34661: PPUSH
34662: PPUSH
34663: PPUSH
34664: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
34665: LD_VAR 0 1
34669: NOT
34670: PUSH
34671: LD_VAR 0 1
34675: PPUSH
34676: CALL_OW 257
34680: PUSH
34681: LD_INT 9
34683: NONEQUAL
34684: OR
34685: IFFALSE 34689
// exit ;
34687: GO 35262
// side := GetSide ( unit ) ;
34689: LD_ADDR_VAR 0 9
34693: PUSH
34694: LD_VAR 0 1
34698: PPUSH
34699: CALL_OW 255
34703: ST_TO_ADDR
// tech_space := tech_spacanom ;
34704: LD_ADDR_VAR 0 12
34708: PUSH
34709: LD_INT 29
34711: ST_TO_ADDR
// tech_time := tech_taurad ;
34712: LD_ADDR_VAR 0 13
34716: PUSH
34717: LD_INT 28
34719: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
34720: LD_ADDR_VAR 0 11
34724: PUSH
34725: LD_VAR 0 1
34729: PPUSH
34730: CALL_OW 310
34734: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
34735: LD_VAR 0 11
34739: PPUSH
34740: CALL_OW 247
34744: PUSH
34745: LD_INT 2
34747: EQUAL
34748: IFFALSE 34752
// exit ;
34750: GO 35262
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34752: LD_ADDR_VAR 0 8
34756: PUSH
34757: LD_INT 81
34759: PUSH
34760: LD_VAR 0 9
34764: PUSH
34765: EMPTY
34766: LIST
34767: LIST
34768: PUSH
34769: LD_INT 3
34771: PUSH
34772: LD_INT 21
34774: PUSH
34775: LD_INT 3
34777: PUSH
34778: EMPTY
34779: LIST
34780: LIST
34781: PUSH
34782: EMPTY
34783: LIST
34784: LIST
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: PPUSH
34790: CALL_OW 69
34794: ST_TO_ADDR
// if not tmp then
34795: LD_VAR 0 8
34799: NOT
34800: IFFALSE 34804
// exit ;
34802: GO 35262
// if in_unit then
34804: LD_VAR 0 11
34808: IFFALSE 34832
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
34810: LD_ADDR_VAR 0 10
34814: PUSH
34815: LD_VAR 0 8
34819: PPUSH
34820: LD_VAR 0 11
34824: PPUSH
34825: CALL_OW 74
34829: ST_TO_ADDR
34830: GO 34852
// enemy := NearestUnitToUnit ( tmp , unit ) ;
34832: LD_ADDR_VAR 0 10
34836: PUSH
34837: LD_VAR 0 8
34841: PPUSH
34842: LD_VAR 0 1
34846: PPUSH
34847: CALL_OW 74
34851: ST_TO_ADDR
// if not enemy then
34852: LD_VAR 0 10
34856: NOT
34857: IFFALSE 34861
// exit ;
34859: GO 35262
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
34861: LD_VAR 0 11
34865: PUSH
34866: LD_VAR 0 11
34870: PPUSH
34871: LD_VAR 0 10
34875: PPUSH
34876: CALL_OW 296
34880: PUSH
34881: LD_INT 13
34883: GREATER
34884: AND
34885: PUSH
34886: LD_VAR 0 1
34890: PPUSH
34891: LD_VAR 0 10
34895: PPUSH
34896: CALL_OW 296
34900: PUSH
34901: LD_INT 12
34903: GREATER
34904: OR
34905: IFFALSE 34909
// exit ;
34907: GO 35262
// missile := [ 1 ] ;
34909: LD_ADDR_VAR 0 14
34913: PUSH
34914: LD_INT 1
34916: PUSH
34917: EMPTY
34918: LIST
34919: ST_TO_ADDR
// if Researched ( side , tech_space ) then
34920: LD_VAR 0 9
34924: PPUSH
34925: LD_VAR 0 12
34929: PPUSH
34930: CALL_OW 325
34934: IFFALSE 34963
// missile := Replace ( missile , missile + 1 , 2 ) ;
34936: LD_ADDR_VAR 0 14
34940: PUSH
34941: LD_VAR 0 14
34945: PPUSH
34946: LD_VAR 0 14
34950: PUSH
34951: LD_INT 1
34953: PLUS
34954: PPUSH
34955: LD_INT 2
34957: PPUSH
34958: CALL_OW 1
34962: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
34963: LD_VAR 0 9
34967: PPUSH
34968: LD_VAR 0 13
34972: PPUSH
34973: CALL_OW 325
34977: PUSH
34978: LD_VAR 0 10
34982: PPUSH
34983: CALL_OW 255
34987: PPUSH
34988: LD_VAR 0 13
34992: PPUSH
34993: CALL_OW 325
34997: NOT
34998: AND
34999: IFFALSE 35028
// missile := Replace ( missile , missile + 1 , 3 ) ;
35001: LD_ADDR_VAR 0 14
35005: PUSH
35006: LD_VAR 0 14
35010: PPUSH
35011: LD_VAR 0 14
35015: PUSH
35016: LD_INT 1
35018: PLUS
35019: PPUSH
35020: LD_INT 3
35022: PPUSH
35023: CALL_OW 1
35027: ST_TO_ADDR
// if missile < 2 then
35028: LD_VAR 0 14
35032: PUSH
35033: LD_INT 2
35035: LESS
35036: IFFALSE 35040
// exit ;
35038: GO 35262
// x := GetX ( enemy ) ;
35040: LD_ADDR_VAR 0 4
35044: PUSH
35045: LD_VAR 0 10
35049: PPUSH
35050: CALL_OW 250
35054: ST_TO_ADDR
// y := GetY ( enemy ) ;
35055: LD_ADDR_VAR 0 5
35059: PUSH
35060: LD_VAR 0 10
35064: PPUSH
35065: CALL_OW 251
35069: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
35070: LD_ADDR_VAR 0 6
35074: PUSH
35075: LD_VAR 0 4
35079: PUSH
35080: LD_INT 1
35082: NEG
35083: PPUSH
35084: LD_INT 1
35086: PPUSH
35087: CALL_OW 12
35091: PLUS
35092: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
35093: LD_ADDR_VAR 0 7
35097: PUSH
35098: LD_VAR 0 5
35102: PUSH
35103: LD_INT 1
35105: NEG
35106: PPUSH
35107: LD_INT 1
35109: PPUSH
35110: CALL_OW 12
35114: PLUS
35115: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35116: LD_VAR 0 6
35120: PPUSH
35121: LD_VAR 0 7
35125: PPUSH
35126: CALL_OW 488
35130: NOT
35131: IFFALSE 35153
// begin _x := x ;
35133: LD_ADDR_VAR 0 6
35137: PUSH
35138: LD_VAR 0 4
35142: ST_TO_ADDR
// _y := y ;
35143: LD_ADDR_VAR 0 7
35147: PUSH
35148: LD_VAR 0 5
35152: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
35153: LD_ADDR_VAR 0 3
35157: PUSH
35158: LD_INT 1
35160: PPUSH
35161: LD_VAR 0 14
35165: PPUSH
35166: CALL_OW 12
35170: ST_TO_ADDR
// case i of 1 :
35171: LD_VAR 0 3
35175: PUSH
35176: LD_INT 1
35178: DOUBLE
35179: EQUAL
35180: IFTRUE 35184
35182: GO 35201
35184: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
35185: LD_VAR 0 1
35189: PPUSH
35190: LD_VAR 0 10
35194: PPUSH
35195: CALL_OW 115
35199: GO 35262
35201: LD_INT 2
35203: DOUBLE
35204: EQUAL
35205: IFTRUE 35209
35207: GO 35231
35209: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
35210: LD_VAR 0 1
35214: PPUSH
35215: LD_VAR 0 6
35219: PPUSH
35220: LD_VAR 0 7
35224: PPUSH
35225: CALL_OW 153
35229: GO 35262
35231: LD_INT 3
35233: DOUBLE
35234: EQUAL
35235: IFTRUE 35239
35237: GO 35261
35239: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
35240: LD_VAR 0 1
35244: PPUSH
35245: LD_VAR 0 6
35249: PPUSH
35250: LD_VAR 0 7
35254: PPUSH
35255: CALL_OW 154
35259: GO 35262
35261: POP
// end ;
35262: LD_VAR 0 2
35266: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
35267: LD_INT 0
35269: PPUSH
35270: PPUSH
35271: PPUSH
35272: PPUSH
35273: PPUSH
35274: PPUSH
// if not unit or not building then
35275: LD_VAR 0 1
35279: NOT
35280: PUSH
35281: LD_VAR 0 2
35285: NOT
35286: OR
35287: IFFALSE 35291
// exit ;
35289: GO 35449
// x := GetX ( building ) ;
35291: LD_ADDR_VAR 0 5
35295: PUSH
35296: LD_VAR 0 2
35300: PPUSH
35301: CALL_OW 250
35305: ST_TO_ADDR
// y := GetY ( building ) ;
35306: LD_ADDR_VAR 0 6
35310: PUSH
35311: LD_VAR 0 2
35315: PPUSH
35316: CALL_OW 251
35320: ST_TO_ADDR
// for i = 0 to 5 do
35321: LD_ADDR_VAR 0 4
35325: PUSH
35326: DOUBLE
35327: LD_INT 0
35329: DEC
35330: ST_TO_ADDR
35331: LD_INT 5
35333: PUSH
35334: FOR_TO
35335: IFFALSE 35447
// begin _x := ShiftX ( x , i , 3 ) ;
35337: LD_ADDR_VAR 0 7
35341: PUSH
35342: LD_VAR 0 5
35346: PPUSH
35347: LD_VAR 0 4
35351: PPUSH
35352: LD_INT 3
35354: PPUSH
35355: CALL_OW 272
35359: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
35360: LD_ADDR_VAR 0 8
35364: PUSH
35365: LD_VAR 0 6
35369: PPUSH
35370: LD_VAR 0 4
35374: PPUSH
35375: LD_INT 3
35377: PPUSH
35378: CALL_OW 273
35382: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35383: LD_VAR 0 7
35387: PPUSH
35388: LD_VAR 0 8
35392: PPUSH
35393: CALL_OW 488
35397: NOT
35398: IFFALSE 35402
// continue ;
35400: GO 35334
// if HexInfo ( _x , _y ) = 0 then
35402: LD_VAR 0 7
35406: PPUSH
35407: LD_VAR 0 8
35411: PPUSH
35412: CALL_OW 428
35416: PUSH
35417: LD_INT 0
35419: EQUAL
35420: IFFALSE 35445
// begin ComMoveXY ( unit , _x , _y ) ;
35422: LD_VAR 0 1
35426: PPUSH
35427: LD_VAR 0 7
35431: PPUSH
35432: LD_VAR 0 8
35436: PPUSH
35437: CALL_OW 111
// exit ;
35441: POP
35442: POP
35443: GO 35449
// end ; end ;
35445: GO 35334
35447: POP
35448: POP
// end ;
35449: LD_VAR 0 3
35453: RET
// export function ScanBase ( side , base_area ) ; begin
35454: LD_INT 0
35456: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
35457: LD_ADDR_VAR 0 3
35461: PUSH
35462: LD_VAR 0 2
35466: PPUSH
35467: LD_INT 81
35469: PUSH
35470: LD_VAR 0 1
35474: PUSH
35475: EMPTY
35476: LIST
35477: LIST
35478: PPUSH
35479: CALL_OW 70
35483: ST_TO_ADDR
// end ;
35484: LD_VAR 0 3
35488: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
35489: LD_INT 0
35491: PPUSH
35492: PPUSH
35493: PPUSH
35494: PPUSH
// result := false ;
35495: LD_ADDR_VAR 0 2
35499: PUSH
35500: LD_INT 0
35502: ST_TO_ADDR
// side := GetSide ( unit ) ;
35503: LD_ADDR_VAR 0 3
35507: PUSH
35508: LD_VAR 0 1
35512: PPUSH
35513: CALL_OW 255
35517: ST_TO_ADDR
// nat := GetNation ( unit ) ;
35518: LD_ADDR_VAR 0 4
35522: PUSH
35523: LD_VAR 0 1
35527: PPUSH
35528: CALL_OW 248
35532: ST_TO_ADDR
// case nat of 1 :
35533: LD_VAR 0 4
35537: PUSH
35538: LD_INT 1
35540: DOUBLE
35541: EQUAL
35542: IFTRUE 35546
35544: GO 35557
35546: POP
// tech := tech_lassight ; 2 :
35547: LD_ADDR_VAR 0 5
35551: PUSH
35552: LD_INT 12
35554: ST_TO_ADDR
35555: GO 35596
35557: LD_INT 2
35559: DOUBLE
35560: EQUAL
35561: IFTRUE 35565
35563: GO 35576
35565: POP
// tech := tech_mortar ; 3 :
35566: LD_ADDR_VAR 0 5
35570: PUSH
35571: LD_INT 41
35573: ST_TO_ADDR
35574: GO 35596
35576: LD_INT 3
35578: DOUBLE
35579: EQUAL
35580: IFTRUE 35584
35582: GO 35595
35584: POP
// tech := tech_bazooka ; end ;
35585: LD_ADDR_VAR 0 5
35589: PUSH
35590: LD_INT 44
35592: ST_TO_ADDR
35593: GO 35596
35595: POP
// if Researched ( side , tech ) then
35596: LD_VAR 0 3
35600: PPUSH
35601: LD_VAR 0 5
35605: PPUSH
35606: CALL_OW 325
35610: IFFALSE 35637
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
35612: LD_ADDR_VAR 0 2
35616: PUSH
35617: LD_INT 5
35619: PUSH
35620: LD_INT 8
35622: PUSH
35623: LD_INT 9
35625: PUSH
35626: EMPTY
35627: LIST
35628: LIST
35629: LIST
35630: PUSH
35631: LD_VAR 0 4
35635: ARRAY
35636: ST_TO_ADDR
// end ;
35637: LD_VAR 0 2
35641: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
35642: LD_INT 0
35644: PPUSH
35645: PPUSH
35646: PPUSH
// if not mines then
35647: LD_VAR 0 2
35651: NOT
35652: IFFALSE 35656
// exit ;
35654: GO 35800
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35656: LD_ADDR_VAR 0 5
35660: PUSH
35661: LD_INT 81
35663: PUSH
35664: LD_VAR 0 1
35668: PUSH
35669: EMPTY
35670: LIST
35671: LIST
35672: PUSH
35673: LD_INT 3
35675: PUSH
35676: LD_INT 21
35678: PUSH
35679: LD_INT 3
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: PPUSH
35694: CALL_OW 69
35698: ST_TO_ADDR
// for i in mines do
35699: LD_ADDR_VAR 0 4
35703: PUSH
35704: LD_VAR 0 2
35708: PUSH
35709: FOR_IN
35710: IFFALSE 35798
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
35712: LD_VAR 0 4
35716: PUSH
35717: LD_INT 1
35719: ARRAY
35720: PPUSH
35721: LD_VAR 0 4
35725: PUSH
35726: LD_INT 2
35728: ARRAY
35729: PPUSH
35730: CALL_OW 458
35734: NOT
35735: IFFALSE 35739
// continue ;
35737: GO 35709
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
35739: LD_VAR 0 4
35743: PUSH
35744: LD_INT 1
35746: ARRAY
35747: PPUSH
35748: LD_VAR 0 4
35752: PUSH
35753: LD_INT 2
35755: ARRAY
35756: PPUSH
35757: CALL_OW 428
35761: PUSH
35762: LD_VAR 0 5
35766: IN
35767: IFFALSE 35796
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
35769: LD_VAR 0 4
35773: PUSH
35774: LD_INT 1
35776: ARRAY
35777: PPUSH
35778: LD_VAR 0 4
35782: PUSH
35783: LD_INT 2
35785: ARRAY
35786: PPUSH
35787: LD_VAR 0 1
35791: PPUSH
35792: CALL_OW 456
// end ;
35796: GO 35709
35798: POP
35799: POP
// end ;
35800: LD_VAR 0 3
35804: RET
// export function Count ( array ) ; begin
35805: LD_INT 0
35807: PPUSH
// result := array + 0 ;
35808: LD_ADDR_VAR 0 2
35812: PUSH
35813: LD_VAR 0 1
35817: PUSH
35818: LD_INT 0
35820: PLUS
35821: ST_TO_ADDR
// end ;
35822: LD_VAR 0 2
35826: RET
// export function IsEmpty ( building ) ; begin
35827: LD_INT 0
35829: PPUSH
// if not building then
35830: LD_VAR 0 1
35834: NOT
35835: IFFALSE 35839
// exit ;
35837: GO 35882
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
35839: LD_ADDR_VAR 0 2
35843: PUSH
35844: LD_VAR 0 1
35848: PUSH
35849: LD_INT 22
35851: PUSH
35852: LD_VAR 0 1
35856: PPUSH
35857: CALL_OW 255
35861: PUSH
35862: EMPTY
35863: LIST
35864: LIST
35865: PUSH
35866: LD_INT 58
35868: PUSH
35869: EMPTY
35870: LIST
35871: PUSH
35872: EMPTY
35873: LIST
35874: LIST
35875: PPUSH
35876: CALL_OW 69
35880: IN
35881: ST_TO_ADDR
// end ;
35882: LD_VAR 0 2
35886: RET
// export function IsNotFull ( building ) ; var places ; begin
35887: LD_INT 0
35889: PPUSH
35890: PPUSH
// if not building then
35891: LD_VAR 0 1
35895: NOT
35896: IFFALSE 35900
// exit ;
35898: GO 35928
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
35900: LD_ADDR_VAR 0 2
35904: PUSH
35905: LD_VAR 0 1
35909: PPUSH
35910: LD_INT 3
35912: PUSH
35913: LD_INT 62
35915: PUSH
35916: EMPTY
35917: LIST
35918: PUSH
35919: EMPTY
35920: LIST
35921: LIST
35922: PPUSH
35923: CALL_OW 72
35927: ST_TO_ADDR
// end ;
35928: LD_VAR 0 2
35932: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
35933: LD_INT 0
35935: PPUSH
35936: PPUSH
35937: PPUSH
35938: PPUSH
// tmp := [ ] ;
35939: LD_ADDR_VAR 0 3
35943: PUSH
35944: EMPTY
35945: ST_TO_ADDR
// list := [ ] ;
35946: LD_ADDR_VAR 0 5
35950: PUSH
35951: EMPTY
35952: ST_TO_ADDR
// for i = 16 to 25 do
35953: LD_ADDR_VAR 0 4
35957: PUSH
35958: DOUBLE
35959: LD_INT 16
35961: DEC
35962: ST_TO_ADDR
35963: LD_INT 25
35965: PUSH
35966: FOR_TO
35967: IFFALSE 36040
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
35969: LD_ADDR_VAR 0 3
35973: PUSH
35974: LD_VAR 0 3
35978: PUSH
35979: LD_INT 22
35981: PUSH
35982: LD_VAR 0 1
35986: PPUSH
35987: CALL_OW 255
35991: PUSH
35992: EMPTY
35993: LIST
35994: LIST
35995: PUSH
35996: LD_INT 91
35998: PUSH
35999: LD_VAR 0 1
36003: PUSH
36004: LD_INT 6
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: LIST
36011: PUSH
36012: LD_INT 30
36014: PUSH
36015: LD_VAR 0 4
36019: PUSH
36020: EMPTY
36021: LIST
36022: LIST
36023: PUSH
36024: EMPTY
36025: LIST
36026: LIST
36027: LIST
36028: PUSH
36029: EMPTY
36030: LIST
36031: PPUSH
36032: CALL_OW 69
36036: ADD
36037: ST_TO_ADDR
36038: GO 35966
36040: POP
36041: POP
// for i = 1 to tmp do
36042: LD_ADDR_VAR 0 4
36046: PUSH
36047: DOUBLE
36048: LD_INT 1
36050: DEC
36051: ST_TO_ADDR
36052: LD_VAR 0 3
36056: PUSH
36057: FOR_TO
36058: IFFALSE 36146
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
36060: LD_ADDR_VAR 0 5
36064: PUSH
36065: LD_VAR 0 5
36069: PUSH
36070: LD_VAR 0 3
36074: PUSH
36075: LD_VAR 0 4
36079: ARRAY
36080: PPUSH
36081: CALL_OW 266
36085: PUSH
36086: LD_VAR 0 3
36090: PUSH
36091: LD_VAR 0 4
36095: ARRAY
36096: PPUSH
36097: CALL_OW 250
36101: PUSH
36102: LD_VAR 0 3
36106: PUSH
36107: LD_VAR 0 4
36111: ARRAY
36112: PPUSH
36113: CALL_OW 251
36117: PUSH
36118: LD_VAR 0 3
36122: PUSH
36123: LD_VAR 0 4
36127: ARRAY
36128: PPUSH
36129: CALL_OW 254
36133: PUSH
36134: EMPTY
36135: LIST
36136: LIST
36137: LIST
36138: LIST
36139: PUSH
36140: EMPTY
36141: LIST
36142: ADD
36143: ST_TO_ADDR
36144: GO 36057
36146: POP
36147: POP
// result := list ;
36148: LD_ADDR_VAR 0 2
36152: PUSH
36153: LD_VAR 0 5
36157: ST_TO_ADDR
// end ;
36158: LD_VAR 0 2
36162: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
36163: LD_INT 0
36165: PPUSH
36166: PPUSH
36167: PPUSH
36168: PPUSH
36169: PPUSH
36170: PPUSH
36171: PPUSH
// if not factory then
36172: LD_VAR 0 1
36176: NOT
36177: IFFALSE 36181
// exit ;
36179: GO 36774
// if control = control_apeman then
36181: LD_VAR 0 4
36185: PUSH
36186: LD_INT 5
36188: EQUAL
36189: IFFALSE 36298
// begin tmp := UnitsInside ( factory ) ;
36191: LD_ADDR_VAR 0 8
36195: PUSH
36196: LD_VAR 0 1
36200: PPUSH
36201: CALL_OW 313
36205: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
36206: LD_VAR 0 8
36210: PPUSH
36211: LD_INT 25
36213: PUSH
36214: LD_INT 12
36216: PUSH
36217: EMPTY
36218: LIST
36219: LIST
36220: PPUSH
36221: CALL_OW 72
36225: NOT
36226: IFFALSE 36236
// control := control_manual ;
36228: LD_ADDR_VAR 0 4
36232: PUSH
36233: LD_INT 1
36235: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
36236: LD_ADDR_VAR 0 8
36240: PUSH
36241: LD_VAR 0 1
36245: PPUSH
36246: CALL 35933 0 1
36250: ST_TO_ADDR
// if tmp then
36251: LD_VAR 0 8
36255: IFFALSE 36298
// begin for i in tmp do
36257: LD_ADDR_VAR 0 7
36261: PUSH
36262: LD_VAR 0 8
36266: PUSH
36267: FOR_IN
36268: IFFALSE 36296
// if i [ 1 ] = b_ext_radio then
36270: LD_VAR 0 7
36274: PUSH
36275: LD_INT 1
36277: ARRAY
36278: PUSH
36279: LD_INT 22
36281: EQUAL
36282: IFFALSE 36294
// begin control := control_remote ;
36284: LD_ADDR_VAR 0 4
36288: PUSH
36289: LD_INT 2
36291: ST_TO_ADDR
// break ;
36292: GO 36296
// end ;
36294: GO 36267
36296: POP
36297: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36298: LD_VAR 0 1
36302: PPUSH
36303: LD_VAR 0 2
36307: PPUSH
36308: LD_VAR 0 3
36312: PPUSH
36313: LD_VAR 0 4
36317: PPUSH
36318: LD_VAR 0 5
36322: PPUSH
36323: CALL_OW 448
36327: IFFALSE 36362
// begin result := [ chassis , engine , control , weapon ] ;
36329: LD_ADDR_VAR 0 6
36333: PUSH
36334: LD_VAR 0 2
36338: PUSH
36339: LD_VAR 0 3
36343: PUSH
36344: LD_VAR 0 4
36348: PUSH
36349: LD_VAR 0 5
36353: PUSH
36354: EMPTY
36355: LIST
36356: LIST
36357: LIST
36358: LIST
36359: ST_TO_ADDR
// exit ;
36360: GO 36774
// end ; _chassis := AvailableChassisList ( factory ) ;
36362: LD_ADDR_VAR 0 9
36366: PUSH
36367: LD_VAR 0 1
36371: PPUSH
36372: CALL_OW 475
36376: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
36377: LD_ADDR_VAR 0 11
36381: PUSH
36382: LD_VAR 0 1
36386: PPUSH
36387: CALL_OW 476
36391: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
36392: LD_ADDR_VAR 0 12
36396: PUSH
36397: LD_VAR 0 1
36401: PPUSH
36402: CALL_OW 477
36406: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
36407: LD_ADDR_VAR 0 10
36411: PUSH
36412: LD_VAR 0 1
36416: PPUSH
36417: CALL_OW 478
36421: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
36422: LD_VAR 0 9
36426: NOT
36427: PUSH
36428: LD_VAR 0 11
36432: NOT
36433: OR
36434: PUSH
36435: LD_VAR 0 12
36439: NOT
36440: OR
36441: PUSH
36442: LD_VAR 0 10
36446: NOT
36447: OR
36448: IFFALSE 36483
// begin result := [ chassis , engine , control , weapon ] ;
36450: LD_ADDR_VAR 0 6
36454: PUSH
36455: LD_VAR 0 2
36459: PUSH
36460: LD_VAR 0 3
36464: PUSH
36465: LD_VAR 0 4
36469: PUSH
36470: LD_VAR 0 5
36474: PUSH
36475: EMPTY
36476: LIST
36477: LIST
36478: LIST
36479: LIST
36480: ST_TO_ADDR
// exit ;
36481: GO 36774
// end ; if not chassis in _chassis then
36483: LD_VAR 0 2
36487: PUSH
36488: LD_VAR 0 9
36492: IN
36493: NOT
36494: IFFALSE 36520
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
36496: LD_ADDR_VAR 0 2
36500: PUSH
36501: LD_VAR 0 9
36505: PUSH
36506: LD_INT 1
36508: PPUSH
36509: LD_VAR 0 9
36513: PPUSH
36514: CALL_OW 12
36518: ARRAY
36519: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
36520: LD_VAR 0 2
36524: PPUSH
36525: LD_VAR 0 3
36529: PPUSH
36530: CALL 36779 0 2
36534: NOT
36535: IFFALSE 36594
// repeat engine := _engine [ 1 ] ;
36537: LD_ADDR_VAR 0 3
36541: PUSH
36542: LD_VAR 0 11
36546: PUSH
36547: LD_INT 1
36549: ARRAY
36550: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
36551: LD_ADDR_VAR 0 11
36555: PUSH
36556: LD_VAR 0 11
36560: PPUSH
36561: LD_INT 1
36563: PPUSH
36564: CALL_OW 3
36568: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
36569: LD_VAR 0 2
36573: PPUSH
36574: LD_VAR 0 3
36578: PPUSH
36579: CALL 36779 0 2
36583: PUSH
36584: LD_VAR 0 11
36588: PUSH
36589: EMPTY
36590: EQUAL
36591: OR
36592: IFFALSE 36537
// if not control in _control then
36594: LD_VAR 0 4
36598: PUSH
36599: LD_VAR 0 12
36603: IN
36604: NOT
36605: IFFALSE 36631
// control := _control [ rand ( 1 , _control ) ] ;
36607: LD_ADDR_VAR 0 4
36611: PUSH
36612: LD_VAR 0 12
36616: PUSH
36617: LD_INT 1
36619: PPUSH
36620: LD_VAR 0 12
36624: PPUSH
36625: CALL_OW 12
36629: ARRAY
36630: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
36631: LD_VAR 0 2
36635: PPUSH
36636: LD_VAR 0 5
36640: PPUSH
36641: CALL 36999 0 2
36645: NOT
36646: IFFALSE 36705
// repeat weapon := _weapon [ 1 ] ;
36648: LD_ADDR_VAR 0 5
36652: PUSH
36653: LD_VAR 0 10
36657: PUSH
36658: LD_INT 1
36660: ARRAY
36661: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
36662: LD_ADDR_VAR 0 10
36666: PUSH
36667: LD_VAR 0 10
36671: PPUSH
36672: LD_INT 1
36674: PPUSH
36675: CALL_OW 3
36679: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
36680: LD_VAR 0 2
36684: PPUSH
36685: LD_VAR 0 5
36689: PPUSH
36690: CALL 36999 0 2
36694: PUSH
36695: LD_VAR 0 10
36699: PUSH
36700: EMPTY
36701: EQUAL
36702: OR
36703: IFFALSE 36648
// result := [ ] ;
36705: LD_ADDR_VAR 0 6
36709: PUSH
36710: EMPTY
36711: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36712: LD_VAR 0 1
36716: PPUSH
36717: LD_VAR 0 2
36721: PPUSH
36722: LD_VAR 0 3
36726: PPUSH
36727: LD_VAR 0 4
36731: PPUSH
36732: LD_VAR 0 5
36736: PPUSH
36737: CALL_OW 448
36741: IFFALSE 36774
// result := [ chassis , engine , control , weapon ] ;
36743: LD_ADDR_VAR 0 6
36747: PUSH
36748: LD_VAR 0 2
36752: PUSH
36753: LD_VAR 0 3
36757: PUSH
36758: LD_VAR 0 4
36762: PUSH
36763: LD_VAR 0 5
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: LIST
36772: LIST
36773: ST_TO_ADDR
// end ;
36774: LD_VAR 0 6
36778: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
36779: LD_INT 0
36781: PPUSH
// if not chassis or not engine then
36782: LD_VAR 0 1
36786: NOT
36787: PUSH
36788: LD_VAR 0 2
36792: NOT
36793: OR
36794: IFFALSE 36798
// exit ;
36796: GO 36994
// case engine of engine_solar :
36798: LD_VAR 0 2
36802: PUSH
36803: LD_INT 2
36805: DOUBLE
36806: EQUAL
36807: IFTRUE 36811
36809: GO 36849
36811: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
36812: LD_ADDR_VAR 0 3
36816: PUSH
36817: LD_INT 11
36819: PUSH
36820: LD_INT 12
36822: PUSH
36823: LD_INT 13
36825: PUSH
36826: LD_INT 14
36828: PUSH
36829: LD_INT 1
36831: PUSH
36832: LD_INT 2
36834: PUSH
36835: LD_INT 3
36837: PUSH
36838: EMPTY
36839: LIST
36840: LIST
36841: LIST
36842: LIST
36843: LIST
36844: LIST
36845: LIST
36846: ST_TO_ADDR
36847: GO 36978
36849: LD_INT 1
36851: DOUBLE
36852: EQUAL
36853: IFTRUE 36857
36855: GO 36919
36857: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
36858: LD_ADDR_VAR 0 3
36862: PUSH
36863: LD_INT 11
36865: PUSH
36866: LD_INT 12
36868: PUSH
36869: LD_INT 13
36871: PUSH
36872: LD_INT 14
36874: PUSH
36875: LD_INT 1
36877: PUSH
36878: LD_INT 2
36880: PUSH
36881: LD_INT 3
36883: PUSH
36884: LD_INT 4
36886: PUSH
36887: LD_INT 5
36889: PUSH
36890: LD_INT 21
36892: PUSH
36893: LD_INT 23
36895: PUSH
36896: LD_INT 22
36898: PUSH
36899: LD_INT 24
36901: PUSH
36902: EMPTY
36903: LIST
36904: LIST
36905: LIST
36906: LIST
36907: LIST
36908: LIST
36909: LIST
36910: LIST
36911: LIST
36912: LIST
36913: LIST
36914: LIST
36915: LIST
36916: ST_TO_ADDR
36917: GO 36978
36919: LD_INT 3
36921: DOUBLE
36922: EQUAL
36923: IFTRUE 36927
36925: GO 36977
36927: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36928: LD_ADDR_VAR 0 3
36932: PUSH
36933: LD_INT 13
36935: PUSH
36936: LD_INT 14
36938: PUSH
36939: LD_INT 2
36941: PUSH
36942: LD_INT 3
36944: PUSH
36945: LD_INT 4
36947: PUSH
36948: LD_INT 5
36950: PUSH
36951: LD_INT 21
36953: PUSH
36954: LD_INT 22
36956: PUSH
36957: LD_INT 23
36959: PUSH
36960: LD_INT 24
36962: PUSH
36963: EMPTY
36964: LIST
36965: LIST
36966: LIST
36967: LIST
36968: LIST
36969: LIST
36970: LIST
36971: LIST
36972: LIST
36973: LIST
36974: ST_TO_ADDR
36975: GO 36978
36977: POP
// result := ( chassis in result ) ;
36978: LD_ADDR_VAR 0 3
36982: PUSH
36983: LD_VAR 0 1
36987: PUSH
36988: LD_VAR 0 3
36992: IN
36993: ST_TO_ADDR
// end ;
36994: LD_VAR 0 3
36998: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
36999: LD_INT 0
37001: PPUSH
// if not chassis or not weapon then
37002: LD_VAR 0 1
37006: NOT
37007: PUSH
37008: LD_VAR 0 2
37012: NOT
37013: OR
37014: IFFALSE 37018
// exit ;
37016: GO 38078
// case weapon of us_machine_gun :
37018: LD_VAR 0 2
37022: PUSH
37023: LD_INT 2
37025: DOUBLE
37026: EQUAL
37027: IFTRUE 37031
37029: GO 37061
37031: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
37032: LD_ADDR_VAR 0 3
37036: PUSH
37037: LD_INT 1
37039: PUSH
37040: LD_INT 2
37042: PUSH
37043: LD_INT 3
37045: PUSH
37046: LD_INT 4
37048: PUSH
37049: LD_INT 5
37051: PUSH
37052: EMPTY
37053: LIST
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: ST_TO_ADDR
37059: GO 38062
37061: LD_INT 3
37063: DOUBLE
37064: EQUAL
37065: IFTRUE 37069
37067: GO 37099
37069: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
37070: LD_ADDR_VAR 0 3
37074: PUSH
37075: LD_INT 1
37077: PUSH
37078: LD_INT 2
37080: PUSH
37081: LD_INT 3
37083: PUSH
37084: LD_INT 4
37086: PUSH
37087: LD_INT 5
37089: PUSH
37090: EMPTY
37091: LIST
37092: LIST
37093: LIST
37094: LIST
37095: LIST
37096: ST_TO_ADDR
37097: GO 38062
37099: LD_INT 11
37101: DOUBLE
37102: EQUAL
37103: IFTRUE 37107
37105: GO 37137
37107: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
37108: LD_ADDR_VAR 0 3
37112: PUSH
37113: LD_INT 1
37115: PUSH
37116: LD_INT 2
37118: PUSH
37119: LD_INT 3
37121: PUSH
37122: LD_INT 4
37124: PUSH
37125: LD_INT 5
37127: PUSH
37128: EMPTY
37129: LIST
37130: LIST
37131: LIST
37132: LIST
37133: LIST
37134: ST_TO_ADDR
37135: GO 38062
37137: LD_INT 4
37139: DOUBLE
37140: EQUAL
37141: IFTRUE 37145
37143: GO 37171
37145: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
37146: LD_ADDR_VAR 0 3
37150: PUSH
37151: LD_INT 2
37153: PUSH
37154: LD_INT 3
37156: PUSH
37157: LD_INT 4
37159: PUSH
37160: LD_INT 5
37162: PUSH
37163: EMPTY
37164: LIST
37165: LIST
37166: LIST
37167: LIST
37168: ST_TO_ADDR
37169: GO 38062
37171: LD_INT 5
37173: DOUBLE
37174: EQUAL
37175: IFTRUE 37179
37177: GO 37205
37179: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
37180: LD_ADDR_VAR 0 3
37184: PUSH
37185: LD_INT 2
37187: PUSH
37188: LD_INT 3
37190: PUSH
37191: LD_INT 4
37193: PUSH
37194: LD_INT 5
37196: PUSH
37197: EMPTY
37198: LIST
37199: LIST
37200: LIST
37201: LIST
37202: ST_TO_ADDR
37203: GO 38062
37205: LD_INT 9
37207: DOUBLE
37208: EQUAL
37209: IFTRUE 37213
37211: GO 37239
37213: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
37214: LD_ADDR_VAR 0 3
37218: PUSH
37219: LD_INT 2
37221: PUSH
37222: LD_INT 3
37224: PUSH
37225: LD_INT 4
37227: PUSH
37228: LD_INT 5
37230: PUSH
37231: EMPTY
37232: LIST
37233: LIST
37234: LIST
37235: LIST
37236: ST_TO_ADDR
37237: GO 38062
37239: LD_INT 7
37241: DOUBLE
37242: EQUAL
37243: IFTRUE 37247
37245: GO 37273
37247: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
37248: LD_ADDR_VAR 0 3
37252: PUSH
37253: LD_INT 2
37255: PUSH
37256: LD_INT 3
37258: PUSH
37259: LD_INT 4
37261: PUSH
37262: LD_INT 5
37264: PUSH
37265: EMPTY
37266: LIST
37267: LIST
37268: LIST
37269: LIST
37270: ST_TO_ADDR
37271: GO 38062
37273: LD_INT 12
37275: DOUBLE
37276: EQUAL
37277: IFTRUE 37281
37279: GO 37307
37281: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
37282: LD_ADDR_VAR 0 3
37286: PUSH
37287: LD_INT 2
37289: PUSH
37290: LD_INT 3
37292: PUSH
37293: LD_INT 4
37295: PUSH
37296: LD_INT 5
37298: PUSH
37299: EMPTY
37300: LIST
37301: LIST
37302: LIST
37303: LIST
37304: ST_TO_ADDR
37305: GO 38062
37307: LD_INT 13
37309: DOUBLE
37310: EQUAL
37311: IFTRUE 37315
37313: GO 37341
37315: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
37316: LD_ADDR_VAR 0 3
37320: PUSH
37321: LD_INT 2
37323: PUSH
37324: LD_INT 3
37326: PUSH
37327: LD_INT 4
37329: PUSH
37330: LD_INT 5
37332: PUSH
37333: EMPTY
37334: LIST
37335: LIST
37336: LIST
37337: LIST
37338: ST_TO_ADDR
37339: GO 38062
37341: LD_INT 14
37343: DOUBLE
37344: EQUAL
37345: IFTRUE 37349
37347: GO 37367
37349: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
37350: LD_ADDR_VAR 0 3
37354: PUSH
37355: LD_INT 4
37357: PUSH
37358: LD_INT 5
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: ST_TO_ADDR
37365: GO 38062
37367: LD_INT 6
37369: DOUBLE
37370: EQUAL
37371: IFTRUE 37375
37373: GO 37393
37375: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
37376: LD_ADDR_VAR 0 3
37380: PUSH
37381: LD_INT 4
37383: PUSH
37384: LD_INT 5
37386: PUSH
37387: EMPTY
37388: LIST
37389: LIST
37390: ST_TO_ADDR
37391: GO 38062
37393: LD_INT 10
37395: DOUBLE
37396: EQUAL
37397: IFTRUE 37401
37399: GO 37419
37401: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
37402: LD_ADDR_VAR 0 3
37406: PUSH
37407: LD_INT 4
37409: PUSH
37410: LD_INT 5
37412: PUSH
37413: EMPTY
37414: LIST
37415: LIST
37416: ST_TO_ADDR
37417: GO 38062
37419: LD_INT 22
37421: DOUBLE
37422: EQUAL
37423: IFTRUE 37427
37425: GO 37453
37427: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
37428: LD_ADDR_VAR 0 3
37432: PUSH
37433: LD_INT 11
37435: PUSH
37436: LD_INT 12
37438: PUSH
37439: LD_INT 13
37441: PUSH
37442: LD_INT 14
37444: PUSH
37445: EMPTY
37446: LIST
37447: LIST
37448: LIST
37449: LIST
37450: ST_TO_ADDR
37451: GO 38062
37453: LD_INT 23
37455: DOUBLE
37456: EQUAL
37457: IFTRUE 37461
37459: GO 37487
37461: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
37462: LD_ADDR_VAR 0 3
37466: PUSH
37467: LD_INT 11
37469: PUSH
37470: LD_INT 12
37472: PUSH
37473: LD_INT 13
37475: PUSH
37476: LD_INT 14
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: LIST
37483: LIST
37484: ST_TO_ADDR
37485: GO 38062
37487: LD_INT 24
37489: DOUBLE
37490: EQUAL
37491: IFTRUE 37495
37493: GO 37521
37495: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
37496: LD_ADDR_VAR 0 3
37500: PUSH
37501: LD_INT 11
37503: PUSH
37504: LD_INT 12
37506: PUSH
37507: LD_INT 13
37509: PUSH
37510: LD_INT 14
37512: PUSH
37513: EMPTY
37514: LIST
37515: LIST
37516: LIST
37517: LIST
37518: ST_TO_ADDR
37519: GO 38062
37521: LD_INT 30
37523: DOUBLE
37524: EQUAL
37525: IFTRUE 37529
37527: GO 37555
37529: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
37530: LD_ADDR_VAR 0 3
37534: PUSH
37535: LD_INT 11
37537: PUSH
37538: LD_INT 12
37540: PUSH
37541: LD_INT 13
37543: PUSH
37544: LD_INT 14
37546: PUSH
37547: EMPTY
37548: LIST
37549: LIST
37550: LIST
37551: LIST
37552: ST_TO_ADDR
37553: GO 38062
37555: LD_INT 25
37557: DOUBLE
37558: EQUAL
37559: IFTRUE 37563
37561: GO 37581
37563: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
37564: LD_ADDR_VAR 0 3
37568: PUSH
37569: LD_INT 13
37571: PUSH
37572: LD_INT 14
37574: PUSH
37575: EMPTY
37576: LIST
37577: LIST
37578: ST_TO_ADDR
37579: GO 38062
37581: LD_INT 27
37583: DOUBLE
37584: EQUAL
37585: IFTRUE 37589
37587: GO 37607
37589: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
37590: LD_ADDR_VAR 0 3
37594: PUSH
37595: LD_INT 13
37597: PUSH
37598: LD_INT 14
37600: PUSH
37601: EMPTY
37602: LIST
37603: LIST
37604: ST_TO_ADDR
37605: GO 38062
37607: LD_INT 92
37609: DOUBLE
37610: EQUAL
37611: IFTRUE 37615
37613: GO 37641
37615: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
37616: LD_ADDR_VAR 0 3
37620: PUSH
37621: LD_INT 11
37623: PUSH
37624: LD_INT 12
37626: PUSH
37627: LD_INT 13
37629: PUSH
37630: LD_INT 14
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: LIST
37637: LIST
37638: ST_TO_ADDR
37639: GO 38062
37641: LD_INT 28
37643: DOUBLE
37644: EQUAL
37645: IFTRUE 37649
37647: GO 37667
37649: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
37650: LD_ADDR_VAR 0 3
37654: PUSH
37655: LD_INT 13
37657: PUSH
37658: LD_INT 14
37660: PUSH
37661: EMPTY
37662: LIST
37663: LIST
37664: ST_TO_ADDR
37665: GO 38062
37667: LD_INT 29
37669: DOUBLE
37670: EQUAL
37671: IFTRUE 37675
37673: GO 37693
37675: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
37676: LD_ADDR_VAR 0 3
37680: PUSH
37681: LD_INT 13
37683: PUSH
37684: LD_INT 14
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: ST_TO_ADDR
37691: GO 38062
37693: LD_INT 31
37695: DOUBLE
37696: EQUAL
37697: IFTRUE 37701
37699: GO 37719
37701: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
37702: LD_ADDR_VAR 0 3
37706: PUSH
37707: LD_INT 13
37709: PUSH
37710: LD_INT 14
37712: PUSH
37713: EMPTY
37714: LIST
37715: LIST
37716: ST_TO_ADDR
37717: GO 38062
37719: LD_INT 26
37721: DOUBLE
37722: EQUAL
37723: IFTRUE 37727
37725: GO 37745
37727: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
37728: LD_ADDR_VAR 0 3
37732: PUSH
37733: LD_INT 13
37735: PUSH
37736: LD_INT 14
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: ST_TO_ADDR
37743: GO 38062
37745: LD_INT 42
37747: DOUBLE
37748: EQUAL
37749: IFTRUE 37753
37751: GO 37779
37753: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
37754: LD_ADDR_VAR 0 3
37758: PUSH
37759: LD_INT 21
37761: PUSH
37762: LD_INT 22
37764: PUSH
37765: LD_INT 23
37767: PUSH
37768: LD_INT 24
37770: PUSH
37771: EMPTY
37772: LIST
37773: LIST
37774: LIST
37775: LIST
37776: ST_TO_ADDR
37777: GO 38062
37779: LD_INT 43
37781: DOUBLE
37782: EQUAL
37783: IFTRUE 37787
37785: GO 37813
37787: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
37788: LD_ADDR_VAR 0 3
37792: PUSH
37793: LD_INT 21
37795: PUSH
37796: LD_INT 22
37798: PUSH
37799: LD_INT 23
37801: PUSH
37802: LD_INT 24
37804: PUSH
37805: EMPTY
37806: LIST
37807: LIST
37808: LIST
37809: LIST
37810: ST_TO_ADDR
37811: GO 38062
37813: LD_INT 44
37815: DOUBLE
37816: EQUAL
37817: IFTRUE 37821
37819: GO 37847
37821: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
37822: LD_ADDR_VAR 0 3
37826: PUSH
37827: LD_INT 21
37829: PUSH
37830: LD_INT 22
37832: PUSH
37833: LD_INT 23
37835: PUSH
37836: LD_INT 24
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: LIST
37843: LIST
37844: ST_TO_ADDR
37845: GO 38062
37847: LD_INT 45
37849: DOUBLE
37850: EQUAL
37851: IFTRUE 37855
37853: GO 37881
37855: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
37856: LD_ADDR_VAR 0 3
37860: PUSH
37861: LD_INT 21
37863: PUSH
37864: LD_INT 22
37866: PUSH
37867: LD_INT 23
37869: PUSH
37870: LD_INT 24
37872: PUSH
37873: EMPTY
37874: LIST
37875: LIST
37876: LIST
37877: LIST
37878: ST_TO_ADDR
37879: GO 38062
37881: LD_INT 49
37883: DOUBLE
37884: EQUAL
37885: IFTRUE 37889
37887: GO 37915
37889: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
37890: LD_ADDR_VAR 0 3
37894: PUSH
37895: LD_INT 21
37897: PUSH
37898: LD_INT 22
37900: PUSH
37901: LD_INT 23
37903: PUSH
37904: LD_INT 24
37906: PUSH
37907: EMPTY
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: ST_TO_ADDR
37913: GO 38062
37915: LD_INT 51
37917: DOUBLE
37918: EQUAL
37919: IFTRUE 37923
37921: GO 37949
37923: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
37924: LD_ADDR_VAR 0 3
37928: PUSH
37929: LD_INT 21
37931: PUSH
37932: LD_INT 22
37934: PUSH
37935: LD_INT 23
37937: PUSH
37938: LD_INT 24
37940: PUSH
37941: EMPTY
37942: LIST
37943: LIST
37944: LIST
37945: LIST
37946: ST_TO_ADDR
37947: GO 38062
37949: LD_INT 52
37951: DOUBLE
37952: EQUAL
37953: IFTRUE 37957
37955: GO 37983
37957: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
37958: LD_ADDR_VAR 0 3
37962: PUSH
37963: LD_INT 21
37965: PUSH
37966: LD_INT 22
37968: PUSH
37969: LD_INT 23
37971: PUSH
37972: LD_INT 24
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: LIST
37979: LIST
37980: ST_TO_ADDR
37981: GO 38062
37983: LD_INT 53
37985: DOUBLE
37986: EQUAL
37987: IFTRUE 37991
37989: GO 38009
37991: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
37992: LD_ADDR_VAR 0 3
37996: PUSH
37997: LD_INT 23
37999: PUSH
38000: LD_INT 24
38002: PUSH
38003: EMPTY
38004: LIST
38005: LIST
38006: ST_TO_ADDR
38007: GO 38062
38009: LD_INT 46
38011: DOUBLE
38012: EQUAL
38013: IFTRUE 38017
38015: GO 38035
38017: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
38018: LD_ADDR_VAR 0 3
38022: PUSH
38023: LD_INT 23
38025: PUSH
38026: LD_INT 24
38028: PUSH
38029: EMPTY
38030: LIST
38031: LIST
38032: ST_TO_ADDR
38033: GO 38062
38035: LD_INT 47
38037: DOUBLE
38038: EQUAL
38039: IFTRUE 38043
38041: GO 38061
38043: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
38044: LD_ADDR_VAR 0 3
38048: PUSH
38049: LD_INT 23
38051: PUSH
38052: LD_INT 24
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: ST_TO_ADDR
38059: GO 38062
38061: POP
// result := ( chassis in result ) ;
38062: LD_ADDR_VAR 0 3
38066: PUSH
38067: LD_VAR 0 1
38071: PUSH
38072: LD_VAR 0 3
38076: IN
38077: ST_TO_ADDR
// end ;
38078: LD_VAR 0 3
38082: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
38083: LD_INT 0
38085: PPUSH
38086: PPUSH
38087: PPUSH
38088: PPUSH
38089: PPUSH
38090: PPUSH
38091: PPUSH
// result := array ;
38092: LD_ADDR_VAR 0 5
38096: PUSH
38097: LD_VAR 0 1
38101: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
38102: LD_VAR 0 1
38106: NOT
38107: PUSH
38108: LD_VAR 0 2
38112: NOT
38113: OR
38114: PUSH
38115: LD_VAR 0 3
38119: NOT
38120: OR
38121: PUSH
38122: LD_VAR 0 2
38126: PUSH
38127: LD_VAR 0 1
38131: GREATER
38132: OR
38133: PUSH
38134: LD_VAR 0 3
38138: PUSH
38139: LD_VAR 0 1
38143: GREATER
38144: OR
38145: IFFALSE 38149
// exit ;
38147: GO 38445
// if direction then
38149: LD_VAR 0 4
38153: IFFALSE 38217
// begin d := 1 ;
38155: LD_ADDR_VAR 0 9
38159: PUSH
38160: LD_INT 1
38162: ST_TO_ADDR
// if i_from > i_to then
38163: LD_VAR 0 2
38167: PUSH
38168: LD_VAR 0 3
38172: GREATER
38173: IFFALSE 38199
// length := ( array - i_from ) + i_to else
38175: LD_ADDR_VAR 0 11
38179: PUSH
38180: LD_VAR 0 1
38184: PUSH
38185: LD_VAR 0 2
38189: MINUS
38190: PUSH
38191: LD_VAR 0 3
38195: PLUS
38196: ST_TO_ADDR
38197: GO 38215
// length := i_to - i_from ;
38199: LD_ADDR_VAR 0 11
38203: PUSH
38204: LD_VAR 0 3
38208: PUSH
38209: LD_VAR 0 2
38213: MINUS
38214: ST_TO_ADDR
// end else
38215: GO 38278
// begin d := - 1 ;
38217: LD_ADDR_VAR 0 9
38221: PUSH
38222: LD_INT 1
38224: NEG
38225: ST_TO_ADDR
// if i_from > i_to then
38226: LD_VAR 0 2
38230: PUSH
38231: LD_VAR 0 3
38235: GREATER
38236: IFFALSE 38256
// length := i_from - i_to else
38238: LD_ADDR_VAR 0 11
38242: PUSH
38243: LD_VAR 0 2
38247: PUSH
38248: LD_VAR 0 3
38252: MINUS
38253: ST_TO_ADDR
38254: GO 38278
// length := ( array - i_to ) + i_from ;
38256: LD_ADDR_VAR 0 11
38260: PUSH
38261: LD_VAR 0 1
38265: PUSH
38266: LD_VAR 0 3
38270: MINUS
38271: PUSH
38272: LD_VAR 0 2
38276: PLUS
38277: ST_TO_ADDR
// end ; if not length then
38278: LD_VAR 0 11
38282: NOT
38283: IFFALSE 38287
// exit ;
38285: GO 38445
// tmp := array ;
38287: LD_ADDR_VAR 0 10
38291: PUSH
38292: LD_VAR 0 1
38296: ST_TO_ADDR
// for i = 1 to length do
38297: LD_ADDR_VAR 0 6
38301: PUSH
38302: DOUBLE
38303: LD_INT 1
38305: DEC
38306: ST_TO_ADDR
38307: LD_VAR 0 11
38311: PUSH
38312: FOR_TO
38313: IFFALSE 38433
// begin for j = 1 to array do
38315: LD_ADDR_VAR 0 7
38319: PUSH
38320: DOUBLE
38321: LD_INT 1
38323: DEC
38324: ST_TO_ADDR
38325: LD_VAR 0 1
38329: PUSH
38330: FOR_TO
38331: IFFALSE 38419
// begin k := j + d ;
38333: LD_ADDR_VAR 0 8
38337: PUSH
38338: LD_VAR 0 7
38342: PUSH
38343: LD_VAR 0 9
38347: PLUS
38348: ST_TO_ADDR
// if k > array then
38349: LD_VAR 0 8
38353: PUSH
38354: LD_VAR 0 1
38358: GREATER
38359: IFFALSE 38369
// k := 1 ;
38361: LD_ADDR_VAR 0 8
38365: PUSH
38366: LD_INT 1
38368: ST_TO_ADDR
// if not k then
38369: LD_VAR 0 8
38373: NOT
38374: IFFALSE 38386
// k := array ;
38376: LD_ADDR_VAR 0 8
38380: PUSH
38381: LD_VAR 0 1
38385: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
38386: LD_ADDR_VAR 0 10
38390: PUSH
38391: LD_VAR 0 10
38395: PPUSH
38396: LD_VAR 0 8
38400: PPUSH
38401: LD_VAR 0 1
38405: PUSH
38406: LD_VAR 0 7
38410: ARRAY
38411: PPUSH
38412: CALL_OW 1
38416: ST_TO_ADDR
// end ;
38417: GO 38330
38419: POP
38420: POP
// array := tmp ;
38421: LD_ADDR_VAR 0 1
38425: PUSH
38426: LD_VAR 0 10
38430: ST_TO_ADDR
// end ;
38431: GO 38312
38433: POP
38434: POP
// result := array ;
38435: LD_ADDR_VAR 0 5
38439: PUSH
38440: LD_VAR 0 1
38444: ST_TO_ADDR
// end ;
38445: LD_VAR 0 5
38449: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
38450: LD_INT 0
38452: PPUSH
38453: PPUSH
// result := 0 ;
38454: LD_ADDR_VAR 0 3
38458: PUSH
38459: LD_INT 0
38461: ST_TO_ADDR
// if not array or not value in array then
38462: LD_VAR 0 1
38466: NOT
38467: PUSH
38468: LD_VAR 0 2
38472: PUSH
38473: LD_VAR 0 1
38477: IN
38478: NOT
38479: OR
38480: IFFALSE 38484
// exit ;
38482: GO 38538
// for i = 1 to array do
38484: LD_ADDR_VAR 0 4
38488: PUSH
38489: DOUBLE
38490: LD_INT 1
38492: DEC
38493: ST_TO_ADDR
38494: LD_VAR 0 1
38498: PUSH
38499: FOR_TO
38500: IFFALSE 38536
// if value = array [ i ] then
38502: LD_VAR 0 2
38506: PUSH
38507: LD_VAR 0 1
38511: PUSH
38512: LD_VAR 0 4
38516: ARRAY
38517: EQUAL
38518: IFFALSE 38534
// begin result := i ;
38520: LD_ADDR_VAR 0 3
38524: PUSH
38525: LD_VAR 0 4
38529: ST_TO_ADDR
// exit ;
38530: POP
38531: POP
38532: GO 38538
// end ;
38534: GO 38499
38536: POP
38537: POP
// end ;
38538: LD_VAR 0 3
38542: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
38543: LD_INT 0
38545: PPUSH
// vc_chassis := chassis ;
38546: LD_ADDR_OWVAR 37
38550: PUSH
38551: LD_VAR 0 1
38555: ST_TO_ADDR
// vc_engine := engine ;
38556: LD_ADDR_OWVAR 39
38560: PUSH
38561: LD_VAR 0 2
38565: ST_TO_ADDR
// vc_control := control ;
38566: LD_ADDR_OWVAR 38
38570: PUSH
38571: LD_VAR 0 3
38575: ST_TO_ADDR
// vc_weapon := weapon ;
38576: LD_ADDR_OWVAR 40
38580: PUSH
38581: LD_VAR 0 4
38585: ST_TO_ADDR
// vc_fuel_battery := fuel ;
38586: LD_ADDR_OWVAR 41
38590: PUSH
38591: LD_VAR 0 5
38595: ST_TO_ADDR
// end ;
38596: LD_VAR 0 6
38600: RET
// export function WantPlant ( unit ) ; var task ; begin
38601: LD_INT 0
38603: PPUSH
38604: PPUSH
// result := false ;
38605: LD_ADDR_VAR 0 2
38609: PUSH
38610: LD_INT 0
38612: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
38613: LD_ADDR_VAR 0 3
38617: PUSH
38618: LD_VAR 0 1
38622: PPUSH
38623: CALL_OW 437
38627: ST_TO_ADDR
// if task then
38628: LD_VAR 0 3
38632: IFFALSE 38660
// if task [ 1 ] [ 1 ] = p then
38634: LD_VAR 0 3
38638: PUSH
38639: LD_INT 1
38641: ARRAY
38642: PUSH
38643: LD_INT 1
38645: ARRAY
38646: PUSH
38647: LD_STRING p
38649: EQUAL
38650: IFFALSE 38660
// result := true ;
38652: LD_ADDR_VAR 0 2
38656: PUSH
38657: LD_INT 1
38659: ST_TO_ADDR
// end ;
38660: LD_VAR 0 2
38664: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
38665: LD_INT 0
38667: PPUSH
38668: PPUSH
38669: PPUSH
38670: PPUSH
// if pos < 1 then
38671: LD_VAR 0 2
38675: PUSH
38676: LD_INT 1
38678: LESS
38679: IFFALSE 38683
// exit ;
38681: GO 38986
// if pos = 1 then
38683: LD_VAR 0 2
38687: PUSH
38688: LD_INT 1
38690: EQUAL
38691: IFFALSE 38724
// result := Replace ( arr , pos [ 1 ] , value ) else
38693: LD_ADDR_VAR 0 4
38697: PUSH
38698: LD_VAR 0 1
38702: PPUSH
38703: LD_VAR 0 2
38707: PUSH
38708: LD_INT 1
38710: ARRAY
38711: PPUSH
38712: LD_VAR 0 3
38716: PPUSH
38717: CALL_OW 1
38721: ST_TO_ADDR
38722: GO 38986
// begin tmp := arr ;
38724: LD_ADDR_VAR 0 6
38728: PUSH
38729: LD_VAR 0 1
38733: ST_TO_ADDR
// s_arr := [ tmp ] ;
38734: LD_ADDR_VAR 0 7
38738: PUSH
38739: LD_VAR 0 6
38743: PUSH
38744: EMPTY
38745: LIST
38746: ST_TO_ADDR
// for i = 1 to pos - 1 do
38747: LD_ADDR_VAR 0 5
38751: PUSH
38752: DOUBLE
38753: LD_INT 1
38755: DEC
38756: ST_TO_ADDR
38757: LD_VAR 0 2
38761: PUSH
38762: LD_INT 1
38764: MINUS
38765: PUSH
38766: FOR_TO
38767: IFFALSE 38812
// begin tmp := tmp [ pos [ i ] ] ;
38769: LD_ADDR_VAR 0 6
38773: PUSH
38774: LD_VAR 0 6
38778: PUSH
38779: LD_VAR 0 2
38783: PUSH
38784: LD_VAR 0 5
38788: ARRAY
38789: ARRAY
38790: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
38791: LD_ADDR_VAR 0 7
38795: PUSH
38796: LD_VAR 0 7
38800: PUSH
38801: LD_VAR 0 6
38805: PUSH
38806: EMPTY
38807: LIST
38808: ADD
38809: ST_TO_ADDR
// end ;
38810: GO 38766
38812: POP
38813: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
38814: LD_ADDR_VAR 0 6
38818: PUSH
38819: LD_VAR 0 6
38823: PPUSH
38824: LD_VAR 0 2
38828: PUSH
38829: LD_VAR 0 2
38833: ARRAY
38834: PPUSH
38835: LD_VAR 0 3
38839: PPUSH
38840: CALL_OW 1
38844: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
38845: LD_ADDR_VAR 0 7
38849: PUSH
38850: LD_VAR 0 7
38854: PPUSH
38855: LD_VAR 0 7
38859: PPUSH
38860: LD_VAR 0 6
38864: PPUSH
38865: CALL_OW 1
38869: ST_TO_ADDR
// for i = s_arr downto 2 do
38870: LD_ADDR_VAR 0 5
38874: PUSH
38875: DOUBLE
38876: LD_VAR 0 7
38880: INC
38881: ST_TO_ADDR
38882: LD_INT 2
38884: PUSH
38885: FOR_DOWNTO
38886: IFFALSE 38970
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
38888: LD_ADDR_VAR 0 6
38892: PUSH
38893: LD_VAR 0 7
38897: PUSH
38898: LD_VAR 0 5
38902: PUSH
38903: LD_INT 1
38905: MINUS
38906: ARRAY
38907: PPUSH
38908: LD_VAR 0 2
38912: PUSH
38913: LD_VAR 0 5
38917: PUSH
38918: LD_INT 1
38920: MINUS
38921: ARRAY
38922: PPUSH
38923: LD_VAR 0 7
38927: PUSH
38928: LD_VAR 0 5
38932: ARRAY
38933: PPUSH
38934: CALL_OW 1
38938: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
38939: LD_ADDR_VAR 0 7
38943: PUSH
38944: LD_VAR 0 7
38948: PPUSH
38949: LD_VAR 0 5
38953: PUSH
38954: LD_INT 1
38956: MINUS
38957: PPUSH
38958: LD_VAR 0 6
38962: PPUSH
38963: CALL_OW 1
38967: ST_TO_ADDR
// end ;
38968: GO 38885
38970: POP
38971: POP
// result := s_arr [ 1 ] ;
38972: LD_ADDR_VAR 0 4
38976: PUSH
38977: LD_VAR 0 7
38981: PUSH
38982: LD_INT 1
38984: ARRAY
38985: ST_TO_ADDR
// end ; end ;
38986: LD_VAR 0 4
38990: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
38991: LD_INT 0
38993: PPUSH
38994: PPUSH
// if not list then
38995: LD_VAR 0 1
38999: NOT
39000: IFFALSE 39004
// exit ;
39002: GO 39095
// i := list [ pos1 ] ;
39004: LD_ADDR_VAR 0 5
39008: PUSH
39009: LD_VAR 0 1
39013: PUSH
39014: LD_VAR 0 2
39018: ARRAY
39019: ST_TO_ADDR
// if not i then
39020: LD_VAR 0 5
39024: NOT
39025: IFFALSE 39029
// exit ;
39027: GO 39095
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
39029: LD_ADDR_VAR 0 1
39033: PUSH
39034: LD_VAR 0 1
39038: PPUSH
39039: LD_VAR 0 2
39043: PPUSH
39044: LD_VAR 0 1
39048: PUSH
39049: LD_VAR 0 3
39053: ARRAY
39054: PPUSH
39055: CALL_OW 1
39059: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
39060: LD_ADDR_VAR 0 1
39064: PUSH
39065: LD_VAR 0 1
39069: PPUSH
39070: LD_VAR 0 3
39074: PPUSH
39075: LD_VAR 0 5
39079: PPUSH
39080: CALL_OW 1
39084: ST_TO_ADDR
// result := list ;
39085: LD_ADDR_VAR 0 4
39089: PUSH
39090: LD_VAR 0 1
39094: ST_TO_ADDR
// end ;
39095: LD_VAR 0 4
39099: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
39100: LD_INT 0
39102: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
39103: LD_ADDR_VAR 0 5
39107: PUSH
39108: LD_VAR 0 1
39112: PPUSH
39113: CALL_OW 250
39117: PPUSH
39118: LD_VAR 0 1
39122: PPUSH
39123: CALL_OW 251
39127: PPUSH
39128: LD_VAR 0 2
39132: PPUSH
39133: LD_VAR 0 3
39137: PPUSH
39138: LD_VAR 0 4
39142: PPUSH
39143: CALL 39521 0 5
39147: ST_TO_ADDR
// end ;
39148: LD_VAR 0 5
39152: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
39153: LD_INT 0
39155: PPUSH
39156: PPUSH
39157: PPUSH
39158: PPUSH
// if not list or not unit then
39159: LD_VAR 0 2
39163: NOT
39164: PUSH
39165: LD_VAR 0 1
39169: NOT
39170: OR
39171: IFFALSE 39175
// exit ;
39173: GO 39516
// result := [ ] ;
39175: LD_ADDR_VAR 0 5
39179: PUSH
39180: EMPTY
39181: ST_TO_ADDR
// for i in list do
39182: LD_ADDR_VAR 0 6
39186: PUSH
39187: LD_VAR 0 2
39191: PUSH
39192: FOR_IN
39193: IFFALSE 39411
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
39195: LD_ADDR_VAR 0 8
39199: PUSH
39200: LD_VAR 0 1
39204: PPUSH
39205: LD_VAR 0 6
39209: PUSH
39210: LD_INT 1
39212: ARRAY
39213: PPUSH
39214: LD_VAR 0 6
39218: PUSH
39219: LD_INT 2
39221: ARRAY
39222: PPUSH
39223: CALL_OW 297
39227: ST_TO_ADDR
// if not Count ( result ) then
39228: LD_VAR 0 5
39232: PPUSH
39233: CALL 35805 0 1
39237: NOT
39238: IFFALSE 39271
// begin result := Join ( result , [ i , tmp ] ) ;
39240: LD_ADDR_VAR 0 5
39244: PUSH
39245: LD_VAR 0 5
39249: PPUSH
39250: LD_VAR 0 6
39254: PUSH
39255: LD_VAR 0 8
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: PPUSH
39264: CALL 71414 0 2
39268: ST_TO_ADDR
// continue ;
39269: GO 39192
// end ; if result [ result ] [ 2 ] <= tmp then
39271: LD_VAR 0 5
39275: PUSH
39276: LD_VAR 0 5
39280: ARRAY
39281: PUSH
39282: LD_INT 2
39284: ARRAY
39285: PUSH
39286: LD_VAR 0 8
39290: LESSEQUAL
39291: IFFALSE 39324
// result := Join ( result , [ i , tmp ] ) else
39293: LD_ADDR_VAR 0 5
39297: PUSH
39298: LD_VAR 0 5
39302: PPUSH
39303: LD_VAR 0 6
39307: PUSH
39308: LD_VAR 0 8
39312: PUSH
39313: EMPTY
39314: LIST
39315: LIST
39316: PPUSH
39317: CALL 71414 0 2
39321: ST_TO_ADDR
39322: GO 39409
// begin for j := 1 to Count ( result ) do
39324: LD_ADDR_VAR 0 7
39328: PUSH
39329: DOUBLE
39330: LD_INT 1
39332: DEC
39333: ST_TO_ADDR
39334: LD_VAR 0 5
39338: PPUSH
39339: CALL 35805 0 1
39343: PUSH
39344: FOR_TO
39345: IFFALSE 39407
// begin if tmp < result [ j ] [ 2 ] then
39347: LD_VAR 0 8
39351: PUSH
39352: LD_VAR 0 5
39356: PUSH
39357: LD_VAR 0 7
39361: ARRAY
39362: PUSH
39363: LD_INT 2
39365: ARRAY
39366: LESS
39367: IFFALSE 39405
// begin result := Insert ( result , j , [ i , tmp ] ) ;
39369: LD_ADDR_VAR 0 5
39373: PUSH
39374: LD_VAR 0 5
39378: PPUSH
39379: LD_VAR 0 7
39383: PPUSH
39384: LD_VAR 0 6
39388: PUSH
39389: LD_VAR 0 8
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: PPUSH
39398: CALL_OW 2
39402: ST_TO_ADDR
// break ;
39403: GO 39407
// end ; end ;
39405: GO 39344
39407: POP
39408: POP
// end ; end ;
39409: GO 39192
39411: POP
39412: POP
// if result and not asc then
39413: LD_VAR 0 5
39417: PUSH
39418: LD_VAR 0 3
39422: NOT
39423: AND
39424: IFFALSE 39441
// result := ReverseArray ( result ) ;
39426: LD_ADDR_VAR 0 5
39430: PUSH
39431: LD_VAR 0 5
39435: PPUSH
39436: CALL 66681 0 1
39440: ST_TO_ADDR
// tmp := [ ] ;
39441: LD_ADDR_VAR 0 8
39445: PUSH
39446: EMPTY
39447: ST_TO_ADDR
// if mode then
39448: LD_VAR 0 4
39452: IFFALSE 39516
// begin for i := 1 to result do
39454: LD_ADDR_VAR 0 6
39458: PUSH
39459: DOUBLE
39460: LD_INT 1
39462: DEC
39463: ST_TO_ADDR
39464: LD_VAR 0 5
39468: PUSH
39469: FOR_TO
39470: IFFALSE 39504
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
39472: LD_ADDR_VAR 0 8
39476: PUSH
39477: LD_VAR 0 8
39481: PPUSH
39482: LD_VAR 0 5
39486: PUSH
39487: LD_VAR 0 6
39491: ARRAY
39492: PUSH
39493: LD_INT 1
39495: ARRAY
39496: PPUSH
39497: CALL 71414 0 2
39501: ST_TO_ADDR
39502: GO 39469
39504: POP
39505: POP
// result := tmp ;
39506: LD_ADDR_VAR 0 5
39510: PUSH
39511: LD_VAR 0 8
39515: ST_TO_ADDR
// end ; end ;
39516: LD_VAR 0 5
39520: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
39521: LD_INT 0
39523: PPUSH
39524: PPUSH
39525: PPUSH
39526: PPUSH
// if not list then
39527: LD_VAR 0 3
39531: NOT
39532: IFFALSE 39536
// exit ;
39534: GO 39924
// result := [ ] ;
39536: LD_ADDR_VAR 0 6
39540: PUSH
39541: EMPTY
39542: ST_TO_ADDR
// for i in list do
39543: LD_ADDR_VAR 0 7
39547: PUSH
39548: LD_VAR 0 3
39552: PUSH
39553: FOR_IN
39554: IFFALSE 39756
// begin tmp := GetDistUnitXY ( i , x , y ) ;
39556: LD_ADDR_VAR 0 9
39560: PUSH
39561: LD_VAR 0 7
39565: PPUSH
39566: LD_VAR 0 1
39570: PPUSH
39571: LD_VAR 0 2
39575: PPUSH
39576: CALL_OW 297
39580: ST_TO_ADDR
// if not result then
39581: LD_VAR 0 6
39585: NOT
39586: IFFALSE 39612
// result := [ [ i , tmp ] ] else
39588: LD_ADDR_VAR 0 6
39592: PUSH
39593: LD_VAR 0 7
39597: PUSH
39598: LD_VAR 0 9
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: PUSH
39607: EMPTY
39608: LIST
39609: ST_TO_ADDR
39610: GO 39754
// begin if result [ result ] [ 2 ] <= tmp then
39612: LD_VAR 0 6
39616: PUSH
39617: LD_VAR 0 6
39621: ARRAY
39622: PUSH
39623: LD_INT 2
39625: ARRAY
39626: PUSH
39627: LD_VAR 0 9
39631: LESSEQUAL
39632: IFFALSE 39674
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
39634: LD_ADDR_VAR 0 6
39638: PUSH
39639: LD_VAR 0 6
39643: PPUSH
39644: LD_VAR 0 6
39648: PUSH
39649: LD_INT 1
39651: PLUS
39652: PPUSH
39653: LD_VAR 0 7
39657: PUSH
39658: LD_VAR 0 9
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PPUSH
39667: CALL_OW 2
39671: ST_TO_ADDR
39672: GO 39754
// for j := 1 to result do
39674: LD_ADDR_VAR 0 8
39678: PUSH
39679: DOUBLE
39680: LD_INT 1
39682: DEC
39683: ST_TO_ADDR
39684: LD_VAR 0 6
39688: PUSH
39689: FOR_TO
39690: IFFALSE 39752
// begin if tmp < result [ j ] [ 2 ] then
39692: LD_VAR 0 9
39696: PUSH
39697: LD_VAR 0 6
39701: PUSH
39702: LD_VAR 0 8
39706: ARRAY
39707: PUSH
39708: LD_INT 2
39710: ARRAY
39711: LESS
39712: IFFALSE 39750
// begin result := Insert ( result , j , [ i , tmp ] ) ;
39714: LD_ADDR_VAR 0 6
39718: PUSH
39719: LD_VAR 0 6
39723: PPUSH
39724: LD_VAR 0 8
39728: PPUSH
39729: LD_VAR 0 7
39733: PUSH
39734: LD_VAR 0 9
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PPUSH
39743: CALL_OW 2
39747: ST_TO_ADDR
// break ;
39748: GO 39752
// end ; end ;
39750: GO 39689
39752: POP
39753: POP
// end ; end ;
39754: GO 39553
39756: POP
39757: POP
// if result and not asc then
39758: LD_VAR 0 6
39762: PUSH
39763: LD_VAR 0 4
39767: NOT
39768: AND
39769: IFFALSE 39844
// begin tmp := result ;
39771: LD_ADDR_VAR 0 9
39775: PUSH
39776: LD_VAR 0 6
39780: ST_TO_ADDR
// for i = tmp downto 1 do
39781: LD_ADDR_VAR 0 7
39785: PUSH
39786: DOUBLE
39787: LD_VAR 0 9
39791: INC
39792: ST_TO_ADDR
39793: LD_INT 1
39795: PUSH
39796: FOR_DOWNTO
39797: IFFALSE 39842
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
39799: LD_ADDR_VAR 0 6
39803: PUSH
39804: LD_VAR 0 6
39808: PPUSH
39809: LD_VAR 0 9
39813: PUSH
39814: LD_VAR 0 7
39818: MINUS
39819: PUSH
39820: LD_INT 1
39822: PLUS
39823: PPUSH
39824: LD_VAR 0 9
39828: PUSH
39829: LD_VAR 0 7
39833: ARRAY
39834: PPUSH
39835: CALL_OW 1
39839: ST_TO_ADDR
39840: GO 39796
39842: POP
39843: POP
// end ; tmp := [ ] ;
39844: LD_ADDR_VAR 0 9
39848: PUSH
39849: EMPTY
39850: ST_TO_ADDR
// if mode then
39851: LD_VAR 0 5
39855: IFFALSE 39924
// begin for i = 1 to result do
39857: LD_ADDR_VAR 0 7
39861: PUSH
39862: DOUBLE
39863: LD_INT 1
39865: DEC
39866: ST_TO_ADDR
39867: LD_VAR 0 6
39871: PUSH
39872: FOR_TO
39873: IFFALSE 39912
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
39875: LD_ADDR_VAR 0 9
39879: PUSH
39880: LD_VAR 0 9
39884: PPUSH
39885: LD_VAR 0 7
39889: PPUSH
39890: LD_VAR 0 6
39894: PUSH
39895: LD_VAR 0 7
39899: ARRAY
39900: PUSH
39901: LD_INT 1
39903: ARRAY
39904: PPUSH
39905: CALL_OW 1
39909: ST_TO_ADDR
39910: GO 39872
39912: POP
39913: POP
// result := tmp ;
39914: LD_ADDR_VAR 0 6
39918: PUSH
39919: LD_VAR 0 9
39923: ST_TO_ADDR
// end ; end ;
39924: LD_VAR 0 6
39928: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
39929: LD_INT 0
39931: PPUSH
39932: PPUSH
39933: PPUSH
39934: PPUSH
39935: PPUSH
39936: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
39937: LD_ADDR_VAR 0 5
39941: PUSH
39942: LD_INT 0
39944: PUSH
39945: LD_INT 0
39947: PUSH
39948: LD_INT 0
39950: PUSH
39951: EMPTY
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: LIST
39957: LIST
39958: ST_TO_ADDR
// if not x or not y then
39959: LD_VAR 0 2
39963: NOT
39964: PUSH
39965: LD_VAR 0 3
39969: NOT
39970: OR
39971: IFFALSE 39975
// exit ;
39973: GO 41625
// if not range then
39975: LD_VAR 0 4
39979: NOT
39980: IFFALSE 39990
// range := 10 ;
39982: LD_ADDR_VAR 0 4
39986: PUSH
39987: LD_INT 10
39989: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39990: LD_ADDR_VAR 0 8
39994: PUSH
39995: LD_INT 81
39997: PUSH
39998: LD_VAR 0 1
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: PUSH
40007: LD_INT 92
40009: PUSH
40010: LD_VAR 0 2
40014: PUSH
40015: LD_VAR 0 3
40019: PUSH
40020: LD_VAR 0 4
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: LIST
40029: LIST
40030: PUSH
40031: LD_INT 3
40033: PUSH
40034: LD_INT 21
40036: PUSH
40037: LD_INT 3
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: LIST
40052: PPUSH
40053: CALL_OW 69
40057: ST_TO_ADDR
// if not tmp then
40058: LD_VAR 0 8
40062: NOT
40063: IFFALSE 40067
// exit ;
40065: GO 41625
// for i in tmp do
40067: LD_ADDR_VAR 0 6
40071: PUSH
40072: LD_VAR 0 8
40076: PUSH
40077: FOR_IN
40078: IFFALSE 41600
// begin points := [ 0 , 0 , 0 ] ;
40080: LD_ADDR_VAR 0 9
40084: PUSH
40085: LD_INT 0
40087: PUSH
40088: LD_INT 0
40090: PUSH
40091: LD_INT 0
40093: PUSH
40094: EMPTY
40095: LIST
40096: LIST
40097: LIST
40098: ST_TO_ADDR
// bpoints := 1 ;
40099: LD_ADDR_VAR 0 10
40103: PUSH
40104: LD_INT 1
40106: ST_TO_ADDR
// case GetType ( i ) of unit_human :
40107: LD_VAR 0 6
40111: PPUSH
40112: CALL_OW 247
40116: PUSH
40117: LD_INT 1
40119: DOUBLE
40120: EQUAL
40121: IFTRUE 40125
40123: GO 40703
40125: POP
// begin if GetClass ( i ) = 1 then
40126: LD_VAR 0 6
40130: PPUSH
40131: CALL_OW 257
40135: PUSH
40136: LD_INT 1
40138: EQUAL
40139: IFFALSE 40160
// points := [ 10 , 5 , 3 ] ;
40141: LD_ADDR_VAR 0 9
40145: PUSH
40146: LD_INT 10
40148: PUSH
40149: LD_INT 5
40151: PUSH
40152: LD_INT 3
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: LIST
40159: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
40160: LD_VAR 0 6
40164: PPUSH
40165: CALL_OW 257
40169: PUSH
40170: LD_INT 2
40172: PUSH
40173: LD_INT 3
40175: PUSH
40176: LD_INT 4
40178: PUSH
40179: EMPTY
40180: LIST
40181: LIST
40182: LIST
40183: IN
40184: IFFALSE 40205
// points := [ 3 , 2 , 1 ] ;
40186: LD_ADDR_VAR 0 9
40190: PUSH
40191: LD_INT 3
40193: PUSH
40194: LD_INT 2
40196: PUSH
40197: LD_INT 1
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: LIST
40204: ST_TO_ADDR
// if GetClass ( i ) = 5 then
40205: LD_VAR 0 6
40209: PPUSH
40210: CALL_OW 257
40214: PUSH
40215: LD_INT 5
40217: EQUAL
40218: IFFALSE 40239
// points := [ 130 , 5 , 2 ] ;
40220: LD_ADDR_VAR 0 9
40224: PUSH
40225: LD_INT 130
40227: PUSH
40228: LD_INT 5
40230: PUSH
40231: LD_INT 2
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: LIST
40238: ST_TO_ADDR
// if GetClass ( i ) = 8 then
40239: LD_VAR 0 6
40243: PPUSH
40244: CALL_OW 257
40248: PUSH
40249: LD_INT 8
40251: EQUAL
40252: IFFALSE 40273
// points := [ 35 , 35 , 30 ] ;
40254: LD_ADDR_VAR 0 9
40258: PUSH
40259: LD_INT 35
40261: PUSH
40262: LD_INT 35
40264: PUSH
40265: LD_INT 30
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: LIST
40272: ST_TO_ADDR
// if GetClass ( i ) = 9 then
40273: LD_VAR 0 6
40277: PPUSH
40278: CALL_OW 257
40282: PUSH
40283: LD_INT 9
40285: EQUAL
40286: IFFALSE 40307
// points := [ 20 , 55 , 40 ] ;
40288: LD_ADDR_VAR 0 9
40292: PUSH
40293: LD_INT 20
40295: PUSH
40296: LD_INT 55
40298: PUSH
40299: LD_INT 40
40301: PUSH
40302: EMPTY
40303: LIST
40304: LIST
40305: LIST
40306: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
40307: LD_VAR 0 6
40311: PPUSH
40312: CALL_OW 257
40316: PUSH
40317: LD_INT 12
40319: PUSH
40320: LD_INT 16
40322: PUSH
40323: EMPTY
40324: LIST
40325: LIST
40326: IN
40327: IFFALSE 40348
// points := [ 5 , 3 , 2 ] ;
40329: LD_ADDR_VAR 0 9
40333: PUSH
40334: LD_INT 5
40336: PUSH
40337: LD_INT 3
40339: PUSH
40340: LD_INT 2
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: LIST
40347: ST_TO_ADDR
// if GetClass ( i ) = 17 then
40348: LD_VAR 0 6
40352: PPUSH
40353: CALL_OW 257
40357: PUSH
40358: LD_INT 17
40360: EQUAL
40361: IFFALSE 40382
// points := [ 100 , 50 , 75 ] ;
40363: LD_ADDR_VAR 0 9
40367: PUSH
40368: LD_INT 100
40370: PUSH
40371: LD_INT 50
40373: PUSH
40374: LD_INT 75
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: LIST
40381: ST_TO_ADDR
// if GetClass ( i ) = 15 then
40382: LD_VAR 0 6
40386: PPUSH
40387: CALL_OW 257
40391: PUSH
40392: LD_INT 15
40394: EQUAL
40395: IFFALSE 40416
// points := [ 10 , 5 , 3 ] ;
40397: LD_ADDR_VAR 0 9
40401: PUSH
40402: LD_INT 10
40404: PUSH
40405: LD_INT 5
40407: PUSH
40408: LD_INT 3
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: LIST
40415: ST_TO_ADDR
// if GetClass ( i ) = 14 then
40416: LD_VAR 0 6
40420: PPUSH
40421: CALL_OW 257
40425: PUSH
40426: LD_INT 14
40428: EQUAL
40429: IFFALSE 40450
// points := [ 10 , 0 , 0 ] ;
40431: LD_ADDR_VAR 0 9
40435: PUSH
40436: LD_INT 10
40438: PUSH
40439: LD_INT 0
40441: PUSH
40442: LD_INT 0
40444: PUSH
40445: EMPTY
40446: LIST
40447: LIST
40448: LIST
40449: ST_TO_ADDR
// if GetClass ( i ) = 11 then
40450: LD_VAR 0 6
40454: PPUSH
40455: CALL_OW 257
40459: PUSH
40460: LD_INT 11
40462: EQUAL
40463: IFFALSE 40484
// points := [ 30 , 10 , 5 ] ;
40465: LD_ADDR_VAR 0 9
40469: PUSH
40470: LD_INT 30
40472: PUSH
40473: LD_INT 10
40475: PUSH
40476: LD_INT 5
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: LIST
40483: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
40484: LD_VAR 0 1
40488: PPUSH
40489: LD_INT 5
40491: PPUSH
40492: CALL_OW 321
40496: PUSH
40497: LD_INT 2
40499: EQUAL
40500: IFFALSE 40517
// bpoints := bpoints * 1.8 ;
40502: LD_ADDR_VAR 0 10
40506: PUSH
40507: LD_VAR 0 10
40511: PUSH
40512: LD_REAL  1.80000000000000E+0000
40515: MUL
40516: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
40517: LD_VAR 0 6
40521: PPUSH
40522: CALL_OW 257
40526: PUSH
40527: LD_INT 1
40529: PUSH
40530: LD_INT 2
40532: PUSH
40533: LD_INT 3
40535: PUSH
40536: LD_INT 4
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: LIST
40543: LIST
40544: IN
40545: PUSH
40546: LD_VAR 0 1
40550: PPUSH
40551: LD_INT 51
40553: PPUSH
40554: CALL_OW 321
40558: PUSH
40559: LD_INT 2
40561: EQUAL
40562: AND
40563: IFFALSE 40580
// bpoints := bpoints * 1.2 ;
40565: LD_ADDR_VAR 0 10
40569: PUSH
40570: LD_VAR 0 10
40574: PUSH
40575: LD_REAL  1.20000000000000E+0000
40578: MUL
40579: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
40580: LD_VAR 0 6
40584: PPUSH
40585: CALL_OW 257
40589: PUSH
40590: LD_INT 5
40592: PUSH
40593: LD_INT 7
40595: PUSH
40596: LD_INT 9
40598: PUSH
40599: EMPTY
40600: LIST
40601: LIST
40602: LIST
40603: IN
40604: PUSH
40605: LD_VAR 0 1
40609: PPUSH
40610: LD_INT 52
40612: PPUSH
40613: CALL_OW 321
40617: PUSH
40618: LD_INT 2
40620: EQUAL
40621: AND
40622: IFFALSE 40639
// bpoints := bpoints * 1.5 ;
40624: LD_ADDR_VAR 0 10
40628: PUSH
40629: LD_VAR 0 10
40633: PUSH
40634: LD_REAL  1.50000000000000E+0000
40637: MUL
40638: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
40639: LD_VAR 0 1
40643: PPUSH
40644: LD_INT 66
40646: PPUSH
40647: CALL_OW 321
40651: PUSH
40652: LD_INT 2
40654: EQUAL
40655: IFFALSE 40672
// bpoints := bpoints * 1.1 ;
40657: LD_ADDR_VAR 0 10
40661: PUSH
40662: LD_VAR 0 10
40666: PUSH
40667: LD_REAL  1.10000000000000E+0000
40670: MUL
40671: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
40672: LD_ADDR_VAR 0 10
40676: PUSH
40677: LD_VAR 0 10
40681: PUSH
40682: LD_VAR 0 6
40686: PPUSH
40687: LD_INT 1
40689: PPUSH
40690: CALL_OW 259
40694: PUSH
40695: LD_REAL  1.15000000000000E+0000
40698: MUL
40699: MUL
40700: ST_TO_ADDR
// end ; unit_vehicle :
40701: GO 41529
40703: LD_INT 2
40705: DOUBLE
40706: EQUAL
40707: IFTRUE 40711
40709: GO 41517
40711: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
40712: LD_VAR 0 6
40716: PPUSH
40717: CALL_OW 264
40721: PUSH
40722: LD_INT 2
40724: PUSH
40725: LD_INT 42
40727: PUSH
40728: LD_INT 24
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: LIST
40735: IN
40736: IFFALSE 40757
// points := [ 25 , 5 , 3 ] ;
40738: LD_ADDR_VAR 0 9
40742: PUSH
40743: LD_INT 25
40745: PUSH
40746: LD_INT 5
40748: PUSH
40749: LD_INT 3
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: LIST
40756: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
40757: LD_VAR 0 6
40761: PPUSH
40762: CALL_OW 264
40766: PUSH
40767: LD_INT 4
40769: PUSH
40770: LD_INT 43
40772: PUSH
40773: LD_INT 25
40775: PUSH
40776: EMPTY
40777: LIST
40778: LIST
40779: LIST
40780: IN
40781: IFFALSE 40802
// points := [ 40 , 15 , 5 ] ;
40783: LD_ADDR_VAR 0 9
40787: PUSH
40788: LD_INT 40
40790: PUSH
40791: LD_INT 15
40793: PUSH
40794: LD_INT 5
40796: PUSH
40797: EMPTY
40798: LIST
40799: LIST
40800: LIST
40801: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
40802: LD_VAR 0 6
40806: PPUSH
40807: CALL_OW 264
40811: PUSH
40812: LD_INT 3
40814: PUSH
40815: LD_INT 23
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: IN
40822: IFFALSE 40843
// points := [ 7 , 25 , 8 ] ;
40824: LD_ADDR_VAR 0 9
40828: PUSH
40829: LD_INT 7
40831: PUSH
40832: LD_INT 25
40834: PUSH
40835: LD_INT 8
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: LIST
40842: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
40843: LD_VAR 0 6
40847: PPUSH
40848: CALL_OW 264
40852: PUSH
40853: LD_INT 5
40855: PUSH
40856: LD_INT 27
40858: PUSH
40859: LD_INT 44
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: LIST
40866: IN
40867: IFFALSE 40888
// points := [ 14 , 50 , 16 ] ;
40869: LD_ADDR_VAR 0 9
40873: PUSH
40874: LD_INT 14
40876: PUSH
40877: LD_INT 50
40879: PUSH
40880: LD_INT 16
40882: PUSH
40883: EMPTY
40884: LIST
40885: LIST
40886: LIST
40887: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
40888: LD_VAR 0 6
40892: PPUSH
40893: CALL_OW 264
40897: PUSH
40898: LD_INT 6
40900: PUSH
40901: LD_INT 46
40903: PUSH
40904: EMPTY
40905: LIST
40906: LIST
40907: IN
40908: IFFALSE 40929
// points := [ 32 , 120 , 70 ] ;
40910: LD_ADDR_VAR 0 9
40914: PUSH
40915: LD_INT 32
40917: PUSH
40918: LD_INT 120
40920: PUSH
40921: LD_INT 70
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: LIST
40928: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
40929: LD_VAR 0 6
40933: PPUSH
40934: CALL_OW 264
40938: PUSH
40939: LD_INT 7
40941: PUSH
40942: LD_INT 28
40944: PUSH
40945: LD_INT 45
40947: PUSH
40948: LD_INT 92
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: LIST
40955: LIST
40956: IN
40957: IFFALSE 40978
// points := [ 35 , 20 , 45 ] ;
40959: LD_ADDR_VAR 0 9
40963: PUSH
40964: LD_INT 35
40966: PUSH
40967: LD_INT 20
40969: PUSH
40970: LD_INT 45
40972: PUSH
40973: EMPTY
40974: LIST
40975: LIST
40976: LIST
40977: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
40978: LD_VAR 0 6
40982: PPUSH
40983: CALL_OW 264
40987: PUSH
40988: LD_INT 47
40990: PUSH
40991: EMPTY
40992: LIST
40993: IN
40994: IFFALSE 41015
// points := [ 67 , 45 , 75 ] ;
40996: LD_ADDR_VAR 0 9
41000: PUSH
41001: LD_INT 67
41003: PUSH
41004: LD_INT 45
41006: PUSH
41007: LD_INT 75
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: LIST
41014: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
41015: LD_VAR 0 6
41019: PPUSH
41020: CALL_OW 264
41024: PUSH
41025: LD_INT 26
41027: PUSH
41028: EMPTY
41029: LIST
41030: IN
41031: IFFALSE 41052
// points := [ 120 , 30 , 80 ] ;
41033: LD_ADDR_VAR 0 9
41037: PUSH
41038: LD_INT 120
41040: PUSH
41041: LD_INT 30
41043: PUSH
41044: LD_INT 80
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: LIST
41051: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
41052: LD_VAR 0 6
41056: PPUSH
41057: CALL_OW 264
41061: PUSH
41062: LD_INT 22
41064: PUSH
41065: EMPTY
41066: LIST
41067: IN
41068: IFFALSE 41089
// points := [ 40 , 1 , 1 ] ;
41070: LD_ADDR_VAR 0 9
41074: PUSH
41075: LD_INT 40
41077: PUSH
41078: LD_INT 1
41080: PUSH
41081: LD_INT 1
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: LIST
41088: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
41089: LD_VAR 0 6
41093: PPUSH
41094: CALL_OW 264
41098: PUSH
41099: LD_INT 29
41101: PUSH
41102: EMPTY
41103: LIST
41104: IN
41105: IFFALSE 41126
// points := [ 70 , 200 , 400 ] ;
41107: LD_ADDR_VAR 0 9
41111: PUSH
41112: LD_INT 70
41114: PUSH
41115: LD_INT 200
41117: PUSH
41118: LD_INT 400
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: LIST
41125: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
41126: LD_VAR 0 6
41130: PPUSH
41131: CALL_OW 264
41135: PUSH
41136: LD_INT 14
41138: PUSH
41139: LD_INT 53
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: IN
41146: IFFALSE 41167
// points := [ 40 , 10 , 20 ] ;
41148: LD_ADDR_VAR 0 9
41152: PUSH
41153: LD_INT 40
41155: PUSH
41156: LD_INT 10
41158: PUSH
41159: LD_INT 20
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: LIST
41166: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
41167: LD_VAR 0 6
41171: PPUSH
41172: CALL_OW 264
41176: PUSH
41177: LD_INT 9
41179: PUSH
41180: EMPTY
41181: LIST
41182: IN
41183: IFFALSE 41204
// points := [ 5 , 70 , 20 ] ;
41185: LD_ADDR_VAR 0 9
41189: PUSH
41190: LD_INT 5
41192: PUSH
41193: LD_INT 70
41195: PUSH
41196: LD_INT 20
41198: PUSH
41199: EMPTY
41200: LIST
41201: LIST
41202: LIST
41203: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
41204: LD_VAR 0 6
41208: PPUSH
41209: CALL_OW 264
41213: PUSH
41214: LD_INT 10
41216: PUSH
41217: EMPTY
41218: LIST
41219: IN
41220: IFFALSE 41241
// points := [ 35 , 110 , 70 ] ;
41222: LD_ADDR_VAR 0 9
41226: PUSH
41227: LD_INT 35
41229: PUSH
41230: LD_INT 110
41232: PUSH
41233: LD_INT 70
41235: PUSH
41236: EMPTY
41237: LIST
41238: LIST
41239: LIST
41240: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
41241: LD_VAR 0 6
41245: PPUSH
41246: CALL_OW 265
41250: PUSH
41251: LD_INT 25
41253: EQUAL
41254: IFFALSE 41275
// points := [ 80 , 65 , 100 ] ;
41256: LD_ADDR_VAR 0 9
41260: PUSH
41261: LD_INT 80
41263: PUSH
41264: LD_INT 65
41266: PUSH
41267: LD_INT 100
41269: PUSH
41270: EMPTY
41271: LIST
41272: LIST
41273: LIST
41274: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
41275: LD_VAR 0 6
41279: PPUSH
41280: CALL_OW 263
41284: PUSH
41285: LD_INT 1
41287: EQUAL
41288: IFFALSE 41323
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
41290: LD_ADDR_VAR 0 10
41294: PUSH
41295: LD_VAR 0 10
41299: PUSH
41300: LD_VAR 0 6
41304: PPUSH
41305: CALL_OW 311
41309: PPUSH
41310: LD_INT 3
41312: PPUSH
41313: CALL_OW 259
41317: PUSH
41318: LD_INT 4
41320: MUL
41321: MUL
41322: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
41323: LD_VAR 0 6
41327: PPUSH
41328: CALL_OW 263
41332: PUSH
41333: LD_INT 2
41335: EQUAL
41336: IFFALSE 41387
// begin j := IsControledBy ( i ) ;
41338: LD_ADDR_VAR 0 7
41342: PUSH
41343: LD_VAR 0 6
41347: PPUSH
41348: CALL_OW 312
41352: ST_TO_ADDR
// if j then
41353: LD_VAR 0 7
41357: IFFALSE 41387
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
41359: LD_ADDR_VAR 0 10
41363: PUSH
41364: LD_VAR 0 10
41368: PUSH
41369: LD_VAR 0 7
41373: PPUSH
41374: LD_INT 3
41376: PPUSH
41377: CALL_OW 259
41381: PUSH
41382: LD_INT 3
41384: MUL
41385: MUL
41386: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
41387: LD_VAR 0 6
41391: PPUSH
41392: CALL_OW 264
41396: PUSH
41397: LD_INT 5
41399: PUSH
41400: LD_INT 6
41402: PUSH
41403: LD_INT 46
41405: PUSH
41406: LD_INT 44
41408: PUSH
41409: LD_INT 47
41411: PUSH
41412: LD_INT 45
41414: PUSH
41415: LD_INT 28
41417: PUSH
41418: LD_INT 7
41420: PUSH
41421: LD_INT 27
41423: PUSH
41424: LD_INT 29
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: IN
41439: PUSH
41440: LD_VAR 0 1
41444: PPUSH
41445: LD_INT 52
41447: PPUSH
41448: CALL_OW 321
41452: PUSH
41453: LD_INT 2
41455: EQUAL
41456: AND
41457: IFFALSE 41474
// bpoints := bpoints * 1.2 ;
41459: LD_ADDR_VAR 0 10
41463: PUSH
41464: LD_VAR 0 10
41468: PUSH
41469: LD_REAL  1.20000000000000E+0000
41472: MUL
41473: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
41474: LD_VAR 0 6
41478: PPUSH
41479: CALL_OW 264
41483: PUSH
41484: LD_INT 6
41486: PUSH
41487: LD_INT 46
41489: PUSH
41490: LD_INT 47
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: LIST
41497: IN
41498: IFFALSE 41515
// bpoints := bpoints * 1.2 ;
41500: LD_ADDR_VAR 0 10
41504: PUSH
41505: LD_VAR 0 10
41509: PUSH
41510: LD_REAL  1.20000000000000E+0000
41513: MUL
41514: ST_TO_ADDR
// end ; unit_building :
41515: GO 41529
41517: LD_INT 3
41519: DOUBLE
41520: EQUAL
41521: IFTRUE 41525
41523: GO 41528
41525: POP
// ; end ;
41526: GO 41529
41528: POP
// for j = 1 to 3 do
41529: LD_ADDR_VAR 0 7
41533: PUSH
41534: DOUBLE
41535: LD_INT 1
41537: DEC
41538: ST_TO_ADDR
41539: LD_INT 3
41541: PUSH
41542: FOR_TO
41543: IFFALSE 41596
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
41545: LD_ADDR_VAR 0 5
41549: PUSH
41550: LD_VAR 0 5
41554: PPUSH
41555: LD_VAR 0 7
41559: PPUSH
41560: LD_VAR 0 5
41564: PUSH
41565: LD_VAR 0 7
41569: ARRAY
41570: PUSH
41571: LD_VAR 0 9
41575: PUSH
41576: LD_VAR 0 7
41580: ARRAY
41581: PUSH
41582: LD_VAR 0 10
41586: MUL
41587: PLUS
41588: PPUSH
41589: CALL_OW 1
41593: ST_TO_ADDR
41594: GO 41542
41596: POP
41597: POP
// end ;
41598: GO 40077
41600: POP
41601: POP
// result := Replace ( result , 4 , tmp ) ;
41602: LD_ADDR_VAR 0 5
41606: PUSH
41607: LD_VAR 0 5
41611: PPUSH
41612: LD_INT 4
41614: PPUSH
41615: LD_VAR 0 8
41619: PPUSH
41620: CALL_OW 1
41624: ST_TO_ADDR
// end ;
41625: LD_VAR 0 5
41629: RET
// export function DangerAtRange ( unit , range ) ; begin
41630: LD_INT 0
41632: PPUSH
// if not unit then
41633: LD_VAR 0 1
41637: NOT
41638: IFFALSE 41642
// exit ;
41640: GO 41687
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
41642: LD_ADDR_VAR 0 3
41646: PUSH
41647: LD_VAR 0 1
41651: PPUSH
41652: CALL_OW 255
41656: PPUSH
41657: LD_VAR 0 1
41661: PPUSH
41662: CALL_OW 250
41666: PPUSH
41667: LD_VAR 0 1
41671: PPUSH
41672: CALL_OW 251
41676: PPUSH
41677: LD_VAR 0 2
41681: PPUSH
41682: CALL 39929 0 4
41686: ST_TO_ADDR
// end ;
41687: LD_VAR 0 3
41691: RET
// export function DangerInArea ( side , area ) ; begin
41692: LD_INT 0
41694: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
41695: LD_ADDR_VAR 0 3
41699: PUSH
41700: LD_VAR 0 2
41704: PPUSH
41705: LD_INT 81
41707: PUSH
41708: LD_VAR 0 1
41712: PUSH
41713: EMPTY
41714: LIST
41715: LIST
41716: PPUSH
41717: CALL_OW 70
41721: ST_TO_ADDR
// end ;
41722: LD_VAR 0 3
41726: RET
// export function IsExtension ( b ) ; begin
41727: LD_INT 0
41729: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
41730: LD_ADDR_VAR 0 2
41734: PUSH
41735: LD_VAR 0 1
41739: PUSH
41740: LD_INT 23
41742: PUSH
41743: LD_INT 20
41745: PUSH
41746: LD_INT 22
41748: PUSH
41749: LD_INT 17
41751: PUSH
41752: LD_INT 24
41754: PUSH
41755: LD_INT 21
41757: PUSH
41758: LD_INT 19
41760: PUSH
41761: LD_INT 16
41763: PUSH
41764: LD_INT 25
41766: PUSH
41767: LD_INT 18
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: LIST
41774: LIST
41775: LIST
41776: LIST
41777: LIST
41778: LIST
41779: LIST
41780: LIST
41781: IN
41782: ST_TO_ADDR
// end ;
41783: LD_VAR 0 2
41787: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
41788: LD_INT 0
41790: PPUSH
41791: PPUSH
41792: PPUSH
// result := [ ] ;
41793: LD_ADDR_VAR 0 4
41797: PUSH
41798: EMPTY
41799: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
41800: LD_ADDR_VAR 0 5
41804: PUSH
41805: LD_VAR 0 2
41809: PPUSH
41810: LD_INT 21
41812: PUSH
41813: LD_INT 3
41815: PUSH
41816: EMPTY
41817: LIST
41818: LIST
41819: PPUSH
41820: CALL_OW 70
41824: ST_TO_ADDR
// if not tmp then
41825: LD_VAR 0 5
41829: NOT
41830: IFFALSE 41834
// exit ;
41832: GO 41898
// if checkLink then
41834: LD_VAR 0 3
41838: IFFALSE 41888
// begin for i in tmp do
41840: LD_ADDR_VAR 0 6
41844: PUSH
41845: LD_VAR 0 5
41849: PUSH
41850: FOR_IN
41851: IFFALSE 41886
// if GetBase ( i ) <> base then
41853: LD_VAR 0 6
41857: PPUSH
41858: CALL_OW 274
41862: PUSH
41863: LD_VAR 0 1
41867: NONEQUAL
41868: IFFALSE 41884
// ComLinkToBase ( base , i ) ;
41870: LD_VAR 0 1
41874: PPUSH
41875: LD_VAR 0 6
41879: PPUSH
41880: CALL_OW 169
41884: GO 41850
41886: POP
41887: POP
// end ; result := tmp ;
41888: LD_ADDR_VAR 0 4
41892: PUSH
41893: LD_VAR 0 5
41897: ST_TO_ADDR
// end ;
41898: LD_VAR 0 4
41902: RET
// export function ComComplete ( units , b ) ; var i ; begin
41903: LD_INT 0
41905: PPUSH
41906: PPUSH
// if not units then
41907: LD_VAR 0 1
41911: NOT
41912: IFFALSE 41916
// exit ;
41914: GO 42006
// for i in units do
41916: LD_ADDR_VAR 0 4
41920: PUSH
41921: LD_VAR 0 1
41925: PUSH
41926: FOR_IN
41927: IFFALSE 42004
// if BuildingStatus ( b ) = bs_build then
41929: LD_VAR 0 2
41933: PPUSH
41934: CALL_OW 461
41938: PUSH
41939: LD_INT 1
41941: EQUAL
41942: IFFALSE 42002
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
41944: LD_VAR 0 4
41948: PPUSH
41949: LD_STRING h
41951: PUSH
41952: LD_VAR 0 2
41956: PPUSH
41957: CALL_OW 250
41961: PUSH
41962: LD_VAR 0 2
41966: PPUSH
41967: CALL_OW 251
41971: PUSH
41972: LD_VAR 0 2
41976: PUSH
41977: LD_INT 0
41979: PUSH
41980: LD_INT 0
41982: PUSH
41983: LD_INT 0
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: LIST
41990: LIST
41991: LIST
41992: LIST
41993: LIST
41994: PUSH
41995: EMPTY
41996: LIST
41997: PPUSH
41998: CALL_OW 446
42002: GO 41926
42004: POP
42005: POP
// end ;
42006: LD_VAR 0 3
42010: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
42011: LD_INT 0
42013: PPUSH
42014: PPUSH
42015: PPUSH
42016: PPUSH
42017: PPUSH
42018: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
42019: LD_VAR 0 1
42023: NOT
42024: PUSH
42025: LD_VAR 0 1
42029: PPUSH
42030: CALL_OW 263
42034: PUSH
42035: LD_INT 2
42037: NONEQUAL
42038: OR
42039: IFFALSE 42043
// exit ;
42041: GO 42359
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
42043: LD_ADDR_VAR 0 6
42047: PUSH
42048: LD_INT 22
42050: PUSH
42051: LD_VAR 0 1
42055: PPUSH
42056: CALL_OW 255
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: PUSH
42065: LD_INT 2
42067: PUSH
42068: LD_INT 30
42070: PUSH
42071: LD_INT 36
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 34
42080: PUSH
42081: LD_INT 31
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: LIST
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: PPUSH
42097: CALL_OW 69
42101: ST_TO_ADDR
// if not tmp then
42102: LD_VAR 0 6
42106: NOT
42107: IFFALSE 42111
// exit ;
42109: GO 42359
// result := [ ] ;
42111: LD_ADDR_VAR 0 2
42115: PUSH
42116: EMPTY
42117: ST_TO_ADDR
// for i in tmp do
42118: LD_ADDR_VAR 0 3
42122: PUSH
42123: LD_VAR 0 6
42127: PUSH
42128: FOR_IN
42129: IFFALSE 42200
// begin t := UnitsInside ( i ) ;
42131: LD_ADDR_VAR 0 4
42135: PUSH
42136: LD_VAR 0 3
42140: PPUSH
42141: CALL_OW 313
42145: ST_TO_ADDR
// if t then
42146: LD_VAR 0 4
42150: IFFALSE 42198
// for j in t do
42152: LD_ADDR_VAR 0 7
42156: PUSH
42157: LD_VAR 0 4
42161: PUSH
42162: FOR_IN
42163: IFFALSE 42196
// result := Replace ( result , result + 1 , j ) ;
42165: LD_ADDR_VAR 0 2
42169: PUSH
42170: LD_VAR 0 2
42174: PPUSH
42175: LD_VAR 0 2
42179: PUSH
42180: LD_INT 1
42182: PLUS
42183: PPUSH
42184: LD_VAR 0 7
42188: PPUSH
42189: CALL_OW 1
42193: ST_TO_ADDR
42194: GO 42162
42196: POP
42197: POP
// end ;
42198: GO 42128
42200: POP
42201: POP
// if not result then
42202: LD_VAR 0 2
42206: NOT
42207: IFFALSE 42211
// exit ;
42209: GO 42359
// mech := result [ 1 ] ;
42211: LD_ADDR_VAR 0 5
42215: PUSH
42216: LD_VAR 0 2
42220: PUSH
42221: LD_INT 1
42223: ARRAY
42224: ST_TO_ADDR
// if result > 1 then
42225: LD_VAR 0 2
42229: PUSH
42230: LD_INT 1
42232: GREATER
42233: IFFALSE 42345
// begin for i = 2 to result do
42235: LD_ADDR_VAR 0 3
42239: PUSH
42240: DOUBLE
42241: LD_INT 2
42243: DEC
42244: ST_TO_ADDR
42245: LD_VAR 0 2
42249: PUSH
42250: FOR_TO
42251: IFFALSE 42343
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
42253: LD_ADDR_VAR 0 4
42257: PUSH
42258: LD_VAR 0 2
42262: PUSH
42263: LD_VAR 0 3
42267: ARRAY
42268: PPUSH
42269: LD_INT 3
42271: PPUSH
42272: CALL_OW 259
42276: PUSH
42277: LD_VAR 0 2
42281: PUSH
42282: LD_VAR 0 3
42286: ARRAY
42287: PPUSH
42288: CALL_OW 432
42292: MINUS
42293: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
42294: LD_VAR 0 4
42298: PUSH
42299: LD_VAR 0 5
42303: PPUSH
42304: LD_INT 3
42306: PPUSH
42307: CALL_OW 259
42311: PUSH
42312: LD_VAR 0 5
42316: PPUSH
42317: CALL_OW 432
42321: MINUS
42322: GREATEREQUAL
42323: IFFALSE 42341
// mech := result [ i ] ;
42325: LD_ADDR_VAR 0 5
42329: PUSH
42330: LD_VAR 0 2
42334: PUSH
42335: LD_VAR 0 3
42339: ARRAY
42340: ST_TO_ADDR
// end ;
42341: GO 42250
42343: POP
42344: POP
// end ; ComLinkTo ( vehicle , mech ) ;
42345: LD_VAR 0 1
42349: PPUSH
42350: LD_VAR 0 5
42354: PPUSH
42355: CALL_OW 135
// end ;
42359: LD_VAR 0 2
42363: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
42364: LD_INT 0
42366: PPUSH
42367: PPUSH
42368: PPUSH
42369: PPUSH
42370: PPUSH
42371: PPUSH
42372: PPUSH
42373: PPUSH
42374: PPUSH
42375: PPUSH
42376: PPUSH
42377: PPUSH
42378: PPUSH
// result := [ ] ;
42379: LD_ADDR_VAR 0 7
42383: PUSH
42384: EMPTY
42385: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
42386: LD_VAR 0 1
42390: PPUSH
42391: CALL_OW 266
42395: PUSH
42396: LD_INT 0
42398: PUSH
42399: LD_INT 1
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: IN
42406: NOT
42407: IFFALSE 42411
// exit ;
42409: GO 44045
// if name then
42411: LD_VAR 0 3
42415: IFFALSE 42431
// SetBName ( base_dep , name ) ;
42417: LD_VAR 0 1
42421: PPUSH
42422: LD_VAR 0 3
42426: PPUSH
42427: CALL_OW 500
// base := GetBase ( base_dep ) ;
42431: LD_ADDR_VAR 0 15
42435: PUSH
42436: LD_VAR 0 1
42440: PPUSH
42441: CALL_OW 274
42445: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
42446: LD_ADDR_VAR 0 16
42450: PUSH
42451: LD_VAR 0 1
42455: PPUSH
42456: CALL_OW 255
42460: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
42461: LD_ADDR_VAR 0 17
42465: PUSH
42466: LD_VAR 0 1
42470: PPUSH
42471: CALL_OW 248
42475: ST_TO_ADDR
// if sources then
42476: LD_VAR 0 5
42480: IFFALSE 42527
// for i = 1 to 3 do
42482: LD_ADDR_VAR 0 8
42486: PUSH
42487: DOUBLE
42488: LD_INT 1
42490: DEC
42491: ST_TO_ADDR
42492: LD_INT 3
42494: PUSH
42495: FOR_TO
42496: IFFALSE 42525
// AddResourceType ( base , i , sources [ i ] ) ;
42498: LD_VAR 0 15
42502: PPUSH
42503: LD_VAR 0 8
42507: PPUSH
42508: LD_VAR 0 5
42512: PUSH
42513: LD_VAR 0 8
42517: ARRAY
42518: PPUSH
42519: CALL_OW 276
42523: GO 42495
42525: POP
42526: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
42527: LD_ADDR_VAR 0 18
42531: PUSH
42532: LD_VAR 0 15
42536: PPUSH
42537: LD_VAR 0 2
42541: PPUSH
42542: LD_INT 1
42544: PPUSH
42545: CALL 41788 0 3
42549: ST_TO_ADDR
// InitHc ;
42550: CALL_OW 19
// InitUc ;
42554: CALL_OW 18
// uc_side := side ;
42558: LD_ADDR_OWVAR 20
42562: PUSH
42563: LD_VAR 0 16
42567: ST_TO_ADDR
// uc_nation := nation ;
42568: LD_ADDR_OWVAR 21
42572: PUSH
42573: LD_VAR 0 17
42577: ST_TO_ADDR
// if buildings then
42578: LD_VAR 0 18
42582: IFFALSE 43904
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
42584: LD_ADDR_VAR 0 19
42588: PUSH
42589: LD_VAR 0 18
42593: PPUSH
42594: LD_INT 2
42596: PUSH
42597: LD_INT 30
42599: PUSH
42600: LD_INT 29
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: PUSH
42607: LD_INT 30
42609: PUSH
42610: LD_INT 30
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: LIST
42621: PPUSH
42622: CALL_OW 72
42626: ST_TO_ADDR
// if tmp then
42627: LD_VAR 0 19
42631: IFFALSE 42679
// for i in tmp do
42633: LD_ADDR_VAR 0 8
42637: PUSH
42638: LD_VAR 0 19
42642: PUSH
42643: FOR_IN
42644: IFFALSE 42677
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
42646: LD_VAR 0 8
42650: PPUSH
42651: CALL_OW 250
42655: PPUSH
42656: LD_VAR 0 8
42660: PPUSH
42661: CALL_OW 251
42665: PPUSH
42666: LD_VAR 0 16
42670: PPUSH
42671: CALL_OW 441
42675: GO 42643
42677: POP
42678: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
42679: LD_VAR 0 18
42683: PPUSH
42684: LD_INT 2
42686: PUSH
42687: LD_INT 30
42689: PUSH
42690: LD_INT 32
42692: PUSH
42693: EMPTY
42694: LIST
42695: LIST
42696: PUSH
42697: LD_INT 30
42699: PUSH
42700: LD_INT 33
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: LIST
42711: PPUSH
42712: CALL_OW 72
42716: IFFALSE 42804
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
42718: LD_ADDR_VAR 0 8
42722: PUSH
42723: LD_VAR 0 18
42727: PPUSH
42728: LD_INT 2
42730: PUSH
42731: LD_INT 30
42733: PUSH
42734: LD_INT 32
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: LD_INT 30
42743: PUSH
42744: LD_INT 33
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PUSH
42751: EMPTY
42752: LIST
42753: LIST
42754: LIST
42755: PPUSH
42756: CALL_OW 72
42760: PUSH
42761: FOR_IN
42762: IFFALSE 42802
// begin if not GetBWeapon ( i ) then
42764: LD_VAR 0 8
42768: PPUSH
42769: CALL_OW 269
42773: NOT
42774: IFFALSE 42800
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
42776: LD_VAR 0 8
42780: PPUSH
42781: LD_VAR 0 8
42785: PPUSH
42786: LD_VAR 0 2
42790: PPUSH
42791: CALL 44050 0 2
42795: PPUSH
42796: CALL_OW 431
// end ;
42800: GO 42761
42802: POP
42803: POP
// end ; for i = 1 to personel do
42804: LD_ADDR_VAR 0 8
42808: PUSH
42809: DOUBLE
42810: LD_INT 1
42812: DEC
42813: ST_TO_ADDR
42814: LD_VAR 0 6
42818: PUSH
42819: FOR_TO
42820: IFFALSE 43884
// begin if i > 4 then
42822: LD_VAR 0 8
42826: PUSH
42827: LD_INT 4
42829: GREATER
42830: IFFALSE 42834
// break ;
42832: GO 43884
// case i of 1 :
42834: LD_VAR 0 8
42838: PUSH
42839: LD_INT 1
42841: DOUBLE
42842: EQUAL
42843: IFTRUE 42847
42845: GO 42927
42847: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
42848: LD_ADDR_VAR 0 12
42852: PUSH
42853: LD_VAR 0 18
42857: PPUSH
42858: LD_INT 22
42860: PUSH
42861: LD_VAR 0 16
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: PUSH
42870: LD_INT 58
42872: PUSH
42873: EMPTY
42874: LIST
42875: PUSH
42876: LD_INT 2
42878: PUSH
42879: LD_INT 30
42881: PUSH
42882: LD_INT 32
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: PUSH
42889: LD_INT 30
42891: PUSH
42892: LD_INT 4
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: PUSH
42899: LD_INT 30
42901: PUSH
42902: LD_INT 5
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: LIST
42919: PPUSH
42920: CALL_OW 72
42924: ST_TO_ADDR
42925: GO 43149
42927: LD_INT 2
42929: DOUBLE
42930: EQUAL
42931: IFTRUE 42935
42933: GO 42997
42935: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
42936: LD_ADDR_VAR 0 12
42940: PUSH
42941: LD_VAR 0 18
42945: PPUSH
42946: LD_INT 22
42948: PUSH
42949: LD_VAR 0 16
42953: PUSH
42954: EMPTY
42955: LIST
42956: LIST
42957: PUSH
42958: LD_INT 2
42960: PUSH
42961: LD_INT 30
42963: PUSH
42964: LD_INT 0
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: PUSH
42971: LD_INT 30
42973: PUSH
42974: LD_INT 1
42976: PUSH
42977: EMPTY
42978: LIST
42979: LIST
42980: PUSH
42981: EMPTY
42982: LIST
42983: LIST
42984: LIST
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: PPUSH
42990: CALL_OW 72
42994: ST_TO_ADDR
42995: GO 43149
42997: LD_INT 3
42999: DOUBLE
43000: EQUAL
43001: IFTRUE 43005
43003: GO 43067
43005: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
43006: LD_ADDR_VAR 0 12
43010: PUSH
43011: LD_VAR 0 18
43015: PPUSH
43016: LD_INT 22
43018: PUSH
43019: LD_VAR 0 16
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: PUSH
43028: LD_INT 2
43030: PUSH
43031: LD_INT 30
43033: PUSH
43034: LD_INT 2
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: PUSH
43041: LD_INT 30
43043: PUSH
43044: LD_INT 3
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: LIST
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: PPUSH
43060: CALL_OW 72
43064: ST_TO_ADDR
43065: GO 43149
43067: LD_INT 4
43069: DOUBLE
43070: EQUAL
43071: IFTRUE 43075
43073: GO 43148
43075: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
43076: LD_ADDR_VAR 0 12
43080: PUSH
43081: LD_VAR 0 18
43085: PPUSH
43086: LD_INT 22
43088: PUSH
43089: LD_VAR 0 16
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: PUSH
43098: LD_INT 2
43100: PUSH
43101: LD_INT 30
43103: PUSH
43104: LD_INT 6
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: PUSH
43111: LD_INT 30
43113: PUSH
43114: LD_INT 7
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: LD_INT 30
43123: PUSH
43124: LD_INT 8
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: LIST
43135: LIST
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PPUSH
43141: CALL_OW 72
43145: ST_TO_ADDR
43146: GO 43149
43148: POP
// if i = 1 then
43149: LD_VAR 0 8
43153: PUSH
43154: LD_INT 1
43156: EQUAL
43157: IFFALSE 43268
// begin tmp := [ ] ;
43159: LD_ADDR_VAR 0 19
43163: PUSH
43164: EMPTY
43165: ST_TO_ADDR
// for j in f do
43166: LD_ADDR_VAR 0 9
43170: PUSH
43171: LD_VAR 0 12
43175: PUSH
43176: FOR_IN
43177: IFFALSE 43250
// if GetBType ( j ) = b_bunker then
43179: LD_VAR 0 9
43183: PPUSH
43184: CALL_OW 266
43188: PUSH
43189: LD_INT 32
43191: EQUAL
43192: IFFALSE 43219
// tmp := Insert ( tmp , 1 , j ) else
43194: LD_ADDR_VAR 0 19
43198: PUSH
43199: LD_VAR 0 19
43203: PPUSH
43204: LD_INT 1
43206: PPUSH
43207: LD_VAR 0 9
43211: PPUSH
43212: CALL_OW 2
43216: ST_TO_ADDR
43217: GO 43248
// tmp := Insert ( tmp , tmp + 1 , j ) ;
43219: LD_ADDR_VAR 0 19
43223: PUSH
43224: LD_VAR 0 19
43228: PPUSH
43229: LD_VAR 0 19
43233: PUSH
43234: LD_INT 1
43236: PLUS
43237: PPUSH
43238: LD_VAR 0 9
43242: PPUSH
43243: CALL_OW 2
43247: ST_TO_ADDR
43248: GO 43176
43250: POP
43251: POP
// if tmp then
43252: LD_VAR 0 19
43256: IFFALSE 43268
// f := tmp ;
43258: LD_ADDR_VAR 0 12
43262: PUSH
43263: LD_VAR 0 19
43267: ST_TO_ADDR
// end ; x := personel [ i ] ;
43268: LD_ADDR_VAR 0 13
43272: PUSH
43273: LD_VAR 0 6
43277: PUSH
43278: LD_VAR 0 8
43282: ARRAY
43283: ST_TO_ADDR
// if x = - 1 then
43284: LD_VAR 0 13
43288: PUSH
43289: LD_INT 1
43291: NEG
43292: EQUAL
43293: IFFALSE 43502
// begin for j in f do
43295: LD_ADDR_VAR 0 9
43299: PUSH
43300: LD_VAR 0 12
43304: PUSH
43305: FOR_IN
43306: IFFALSE 43498
// repeat InitHc ;
43308: CALL_OW 19
// if GetBType ( j ) = b_barracks then
43312: LD_VAR 0 9
43316: PPUSH
43317: CALL_OW 266
43321: PUSH
43322: LD_INT 5
43324: EQUAL
43325: IFFALSE 43395
// begin if UnitsInside ( j ) < 3 then
43327: LD_VAR 0 9
43331: PPUSH
43332: CALL_OW 313
43336: PUSH
43337: LD_INT 3
43339: LESS
43340: IFFALSE 43376
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43342: LD_INT 0
43344: PPUSH
43345: LD_INT 5
43347: PUSH
43348: LD_INT 8
43350: PUSH
43351: LD_INT 9
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: LIST
43358: PUSH
43359: LD_VAR 0 17
43363: ARRAY
43364: PPUSH
43365: LD_VAR 0 4
43369: PPUSH
43370: CALL_OW 380
43374: GO 43393
// PrepareHuman ( false , i , skill ) ;
43376: LD_INT 0
43378: PPUSH
43379: LD_VAR 0 8
43383: PPUSH
43384: LD_VAR 0 4
43388: PPUSH
43389: CALL_OW 380
// end else
43393: GO 43412
// PrepareHuman ( false , i , skill ) ;
43395: LD_INT 0
43397: PPUSH
43398: LD_VAR 0 8
43402: PPUSH
43403: LD_VAR 0 4
43407: PPUSH
43408: CALL_OW 380
// un := CreateHuman ;
43412: LD_ADDR_VAR 0 14
43416: PUSH
43417: CALL_OW 44
43421: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43422: LD_ADDR_VAR 0 7
43426: PUSH
43427: LD_VAR 0 7
43431: PPUSH
43432: LD_INT 1
43434: PPUSH
43435: LD_VAR 0 14
43439: PPUSH
43440: CALL_OW 2
43444: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
43445: LD_VAR 0 14
43449: PPUSH
43450: LD_VAR 0 9
43454: PPUSH
43455: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
43459: LD_VAR 0 9
43463: PPUSH
43464: CALL_OW 313
43468: PUSH
43469: LD_INT 6
43471: EQUAL
43472: PUSH
43473: LD_VAR 0 9
43477: PPUSH
43478: CALL_OW 266
43482: PUSH
43483: LD_INT 32
43485: PUSH
43486: LD_INT 31
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: IN
43493: OR
43494: IFFALSE 43308
43496: GO 43305
43498: POP
43499: POP
// end else
43500: GO 43882
// for j = 1 to x do
43502: LD_ADDR_VAR 0 9
43506: PUSH
43507: DOUBLE
43508: LD_INT 1
43510: DEC
43511: ST_TO_ADDR
43512: LD_VAR 0 13
43516: PUSH
43517: FOR_TO
43518: IFFALSE 43880
// begin InitHc ;
43520: CALL_OW 19
// if not f then
43524: LD_VAR 0 12
43528: NOT
43529: IFFALSE 43618
// begin PrepareHuman ( false , i , skill ) ;
43531: LD_INT 0
43533: PPUSH
43534: LD_VAR 0 8
43538: PPUSH
43539: LD_VAR 0 4
43543: PPUSH
43544: CALL_OW 380
// un := CreateHuman ;
43548: LD_ADDR_VAR 0 14
43552: PUSH
43553: CALL_OW 44
43557: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43558: LD_ADDR_VAR 0 7
43562: PUSH
43563: LD_VAR 0 7
43567: PPUSH
43568: LD_INT 1
43570: PPUSH
43571: LD_VAR 0 14
43575: PPUSH
43576: CALL_OW 2
43580: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43581: LD_VAR 0 14
43585: PPUSH
43586: LD_VAR 0 1
43590: PPUSH
43591: CALL_OW 250
43595: PPUSH
43596: LD_VAR 0 1
43600: PPUSH
43601: CALL_OW 251
43605: PPUSH
43606: LD_INT 10
43608: PPUSH
43609: LD_INT 0
43611: PPUSH
43612: CALL_OW 50
// continue ;
43616: GO 43517
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
43618: LD_VAR 0 12
43622: PUSH
43623: LD_INT 1
43625: ARRAY
43626: PPUSH
43627: CALL_OW 313
43631: PUSH
43632: LD_VAR 0 12
43636: PUSH
43637: LD_INT 1
43639: ARRAY
43640: PPUSH
43641: CALL_OW 266
43645: PUSH
43646: LD_INT 32
43648: PUSH
43649: LD_INT 31
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: IN
43656: AND
43657: PUSH
43658: LD_VAR 0 12
43662: PUSH
43663: LD_INT 1
43665: ARRAY
43666: PPUSH
43667: CALL_OW 313
43671: PUSH
43672: LD_INT 6
43674: EQUAL
43675: OR
43676: IFFALSE 43696
// f := Delete ( f , 1 ) ;
43678: LD_ADDR_VAR 0 12
43682: PUSH
43683: LD_VAR 0 12
43687: PPUSH
43688: LD_INT 1
43690: PPUSH
43691: CALL_OW 3
43695: ST_TO_ADDR
// if not f then
43696: LD_VAR 0 12
43700: NOT
43701: IFFALSE 43719
// begin x := x + 2 ;
43703: LD_ADDR_VAR 0 13
43707: PUSH
43708: LD_VAR 0 13
43712: PUSH
43713: LD_INT 2
43715: PLUS
43716: ST_TO_ADDR
// continue ;
43717: GO 43517
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
43719: LD_VAR 0 12
43723: PUSH
43724: LD_INT 1
43726: ARRAY
43727: PPUSH
43728: CALL_OW 266
43732: PUSH
43733: LD_INT 5
43735: EQUAL
43736: IFFALSE 43810
// begin if UnitsInside ( f [ 1 ] ) < 3 then
43738: LD_VAR 0 12
43742: PUSH
43743: LD_INT 1
43745: ARRAY
43746: PPUSH
43747: CALL_OW 313
43751: PUSH
43752: LD_INT 3
43754: LESS
43755: IFFALSE 43791
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43757: LD_INT 0
43759: PPUSH
43760: LD_INT 5
43762: PUSH
43763: LD_INT 8
43765: PUSH
43766: LD_INT 9
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: LIST
43773: PUSH
43774: LD_VAR 0 17
43778: ARRAY
43779: PPUSH
43780: LD_VAR 0 4
43784: PPUSH
43785: CALL_OW 380
43789: GO 43808
// PrepareHuman ( false , i , skill ) ;
43791: LD_INT 0
43793: PPUSH
43794: LD_VAR 0 8
43798: PPUSH
43799: LD_VAR 0 4
43803: PPUSH
43804: CALL_OW 380
// end else
43808: GO 43827
// PrepareHuman ( false , i , skill ) ;
43810: LD_INT 0
43812: PPUSH
43813: LD_VAR 0 8
43817: PPUSH
43818: LD_VAR 0 4
43822: PPUSH
43823: CALL_OW 380
// un := CreateHuman ;
43827: LD_ADDR_VAR 0 14
43831: PUSH
43832: CALL_OW 44
43836: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43837: LD_ADDR_VAR 0 7
43841: PUSH
43842: LD_VAR 0 7
43846: PPUSH
43847: LD_INT 1
43849: PPUSH
43850: LD_VAR 0 14
43854: PPUSH
43855: CALL_OW 2
43859: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
43860: LD_VAR 0 14
43864: PPUSH
43865: LD_VAR 0 12
43869: PUSH
43870: LD_INT 1
43872: ARRAY
43873: PPUSH
43874: CALL_OW 52
// end ;
43878: GO 43517
43880: POP
43881: POP
// end ;
43882: GO 42819
43884: POP
43885: POP
// result := result ^ buildings ;
43886: LD_ADDR_VAR 0 7
43890: PUSH
43891: LD_VAR 0 7
43895: PUSH
43896: LD_VAR 0 18
43900: ADD
43901: ST_TO_ADDR
// end else
43902: GO 44045
// begin for i = 1 to personel do
43904: LD_ADDR_VAR 0 8
43908: PUSH
43909: DOUBLE
43910: LD_INT 1
43912: DEC
43913: ST_TO_ADDR
43914: LD_VAR 0 6
43918: PUSH
43919: FOR_TO
43920: IFFALSE 44043
// begin if i > 4 then
43922: LD_VAR 0 8
43926: PUSH
43927: LD_INT 4
43929: GREATER
43930: IFFALSE 43934
// break ;
43932: GO 44043
// x := personel [ i ] ;
43934: LD_ADDR_VAR 0 13
43938: PUSH
43939: LD_VAR 0 6
43943: PUSH
43944: LD_VAR 0 8
43948: ARRAY
43949: ST_TO_ADDR
// if x = - 1 then
43950: LD_VAR 0 13
43954: PUSH
43955: LD_INT 1
43957: NEG
43958: EQUAL
43959: IFFALSE 43963
// continue ;
43961: GO 43919
// PrepareHuman ( false , i , skill ) ;
43963: LD_INT 0
43965: PPUSH
43966: LD_VAR 0 8
43970: PPUSH
43971: LD_VAR 0 4
43975: PPUSH
43976: CALL_OW 380
// un := CreateHuman ;
43980: LD_ADDR_VAR 0 14
43984: PUSH
43985: CALL_OW 44
43989: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43990: LD_VAR 0 14
43994: PPUSH
43995: LD_VAR 0 1
43999: PPUSH
44000: CALL_OW 250
44004: PPUSH
44005: LD_VAR 0 1
44009: PPUSH
44010: CALL_OW 251
44014: PPUSH
44015: LD_INT 10
44017: PPUSH
44018: LD_INT 0
44020: PPUSH
44021: CALL_OW 50
// result := result ^ un ;
44025: LD_ADDR_VAR 0 7
44029: PUSH
44030: LD_VAR 0 7
44034: PUSH
44035: LD_VAR 0 14
44039: ADD
44040: ST_TO_ADDR
// end ;
44041: GO 43919
44043: POP
44044: POP
// end ; end ;
44045: LD_VAR 0 7
44049: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
44050: LD_INT 0
44052: PPUSH
44053: PPUSH
44054: PPUSH
44055: PPUSH
44056: PPUSH
44057: PPUSH
44058: PPUSH
44059: PPUSH
44060: PPUSH
44061: PPUSH
44062: PPUSH
44063: PPUSH
44064: PPUSH
44065: PPUSH
44066: PPUSH
44067: PPUSH
// result := false ;
44068: LD_ADDR_VAR 0 3
44072: PUSH
44073: LD_INT 0
44075: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
44076: LD_VAR 0 1
44080: NOT
44081: PUSH
44082: LD_VAR 0 1
44086: PPUSH
44087: CALL_OW 266
44091: PUSH
44092: LD_INT 32
44094: PUSH
44095: LD_INT 33
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: IN
44102: NOT
44103: OR
44104: IFFALSE 44108
// exit ;
44106: GO 45217
// nat := GetNation ( tower ) ;
44108: LD_ADDR_VAR 0 12
44112: PUSH
44113: LD_VAR 0 1
44117: PPUSH
44118: CALL_OW 248
44122: ST_TO_ADDR
// side := GetSide ( tower ) ;
44123: LD_ADDR_VAR 0 16
44127: PUSH
44128: LD_VAR 0 1
44132: PPUSH
44133: CALL_OW 255
44137: ST_TO_ADDR
// x := GetX ( tower ) ;
44138: LD_ADDR_VAR 0 10
44142: PUSH
44143: LD_VAR 0 1
44147: PPUSH
44148: CALL_OW 250
44152: ST_TO_ADDR
// y := GetY ( tower ) ;
44153: LD_ADDR_VAR 0 11
44157: PUSH
44158: LD_VAR 0 1
44162: PPUSH
44163: CALL_OW 251
44167: ST_TO_ADDR
// if not x or not y then
44168: LD_VAR 0 10
44172: NOT
44173: PUSH
44174: LD_VAR 0 11
44178: NOT
44179: OR
44180: IFFALSE 44184
// exit ;
44182: GO 45217
// weapon := 0 ;
44184: LD_ADDR_VAR 0 18
44188: PUSH
44189: LD_INT 0
44191: ST_TO_ADDR
// fac_list := [ ] ;
44192: LD_ADDR_VAR 0 17
44196: PUSH
44197: EMPTY
44198: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
44199: LD_ADDR_VAR 0 6
44203: PUSH
44204: LD_VAR 0 1
44208: PPUSH
44209: CALL_OW 274
44213: PPUSH
44214: LD_VAR 0 2
44218: PPUSH
44219: LD_INT 0
44221: PPUSH
44222: CALL 41788 0 3
44226: PPUSH
44227: LD_INT 30
44229: PUSH
44230: LD_INT 3
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PPUSH
44237: CALL_OW 72
44241: ST_TO_ADDR
// if not factories then
44242: LD_VAR 0 6
44246: NOT
44247: IFFALSE 44251
// exit ;
44249: GO 45217
// for i in factories do
44251: LD_ADDR_VAR 0 8
44255: PUSH
44256: LD_VAR 0 6
44260: PUSH
44261: FOR_IN
44262: IFFALSE 44287
// fac_list := fac_list union AvailableWeaponList ( i ) ;
44264: LD_ADDR_VAR 0 17
44268: PUSH
44269: LD_VAR 0 17
44273: PUSH
44274: LD_VAR 0 8
44278: PPUSH
44279: CALL_OW 478
44283: UNION
44284: ST_TO_ADDR
44285: GO 44261
44287: POP
44288: POP
// if not fac_list then
44289: LD_VAR 0 17
44293: NOT
44294: IFFALSE 44298
// exit ;
44296: GO 45217
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
44298: LD_ADDR_VAR 0 5
44302: PUSH
44303: LD_INT 4
44305: PUSH
44306: LD_INT 5
44308: PUSH
44309: LD_INT 9
44311: PUSH
44312: LD_INT 10
44314: PUSH
44315: LD_INT 6
44317: PUSH
44318: LD_INT 7
44320: PUSH
44321: LD_INT 11
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: PUSH
44333: LD_INT 27
44335: PUSH
44336: LD_INT 28
44338: PUSH
44339: LD_INT 26
44341: PUSH
44342: LD_INT 30
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: LIST
44349: LIST
44350: PUSH
44351: LD_INT 43
44353: PUSH
44354: LD_INT 44
44356: PUSH
44357: LD_INT 46
44359: PUSH
44360: LD_INT 45
44362: PUSH
44363: LD_INT 47
44365: PUSH
44366: LD_INT 49
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: LIST
44373: LIST
44374: LIST
44375: LIST
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: LIST
44381: PUSH
44382: LD_VAR 0 12
44386: ARRAY
44387: ST_TO_ADDR
// list := list isect fac_list ;
44388: LD_ADDR_VAR 0 5
44392: PUSH
44393: LD_VAR 0 5
44397: PUSH
44398: LD_VAR 0 17
44402: ISECT
44403: ST_TO_ADDR
// if not list then
44404: LD_VAR 0 5
44408: NOT
44409: IFFALSE 44413
// exit ;
44411: GO 45217
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
44413: LD_VAR 0 12
44417: PUSH
44418: LD_INT 3
44420: EQUAL
44421: PUSH
44422: LD_INT 49
44424: PUSH
44425: LD_VAR 0 5
44429: IN
44430: AND
44431: PUSH
44432: LD_INT 31
44434: PPUSH
44435: LD_VAR 0 16
44439: PPUSH
44440: CALL_OW 321
44444: PUSH
44445: LD_INT 2
44447: EQUAL
44448: AND
44449: IFFALSE 44509
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
44451: LD_INT 22
44453: PUSH
44454: LD_VAR 0 16
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 35
44465: PUSH
44466: LD_INT 49
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: LD_INT 91
44475: PUSH
44476: LD_VAR 0 1
44480: PUSH
44481: LD_INT 10
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: LIST
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: LIST
44493: PPUSH
44494: CALL_OW 69
44498: NOT
44499: IFFALSE 44509
// weapon := ru_time_lapser ;
44501: LD_ADDR_VAR 0 18
44505: PUSH
44506: LD_INT 49
44508: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
44509: LD_VAR 0 12
44513: PUSH
44514: LD_INT 1
44516: PUSH
44517: LD_INT 2
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: IN
44524: PUSH
44525: LD_INT 11
44527: PUSH
44528: LD_VAR 0 5
44532: IN
44533: PUSH
44534: LD_INT 30
44536: PUSH
44537: LD_VAR 0 5
44541: IN
44542: OR
44543: AND
44544: PUSH
44545: LD_INT 6
44547: PPUSH
44548: LD_VAR 0 16
44552: PPUSH
44553: CALL_OW 321
44557: PUSH
44558: LD_INT 2
44560: EQUAL
44561: AND
44562: IFFALSE 44727
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
44564: LD_INT 22
44566: PUSH
44567: LD_VAR 0 16
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 2
44578: PUSH
44579: LD_INT 35
44581: PUSH
44582: LD_INT 11
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PUSH
44589: LD_INT 35
44591: PUSH
44592: LD_INT 30
44594: PUSH
44595: EMPTY
44596: LIST
44597: LIST
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: LIST
44603: PUSH
44604: LD_INT 91
44606: PUSH
44607: LD_VAR 0 1
44611: PUSH
44612: LD_INT 18
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: LIST
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: LIST
44624: PPUSH
44625: CALL_OW 69
44629: NOT
44630: PUSH
44631: LD_INT 22
44633: PUSH
44634: LD_VAR 0 16
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 2
44645: PUSH
44646: LD_INT 30
44648: PUSH
44649: LD_INT 32
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: LD_INT 30
44658: PUSH
44659: LD_INT 33
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: LIST
44670: PUSH
44671: LD_INT 91
44673: PUSH
44674: LD_VAR 0 1
44678: PUSH
44679: LD_INT 12
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: LIST
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: LIST
44691: PUSH
44692: EMPTY
44693: LIST
44694: PPUSH
44695: CALL_OW 69
44699: PUSH
44700: LD_INT 2
44702: GREATER
44703: AND
44704: IFFALSE 44727
// weapon := [ us_radar , ar_radar ] [ nat ] ;
44706: LD_ADDR_VAR 0 18
44710: PUSH
44711: LD_INT 11
44713: PUSH
44714: LD_INT 30
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: PUSH
44721: LD_VAR 0 12
44725: ARRAY
44726: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
44727: LD_VAR 0 18
44731: NOT
44732: PUSH
44733: LD_INT 40
44735: PPUSH
44736: LD_VAR 0 16
44740: PPUSH
44741: CALL_OW 321
44745: PUSH
44746: LD_INT 2
44748: EQUAL
44749: AND
44750: PUSH
44751: LD_INT 7
44753: PUSH
44754: LD_VAR 0 5
44758: IN
44759: PUSH
44760: LD_INT 28
44762: PUSH
44763: LD_VAR 0 5
44767: IN
44768: OR
44769: PUSH
44770: LD_INT 45
44772: PUSH
44773: LD_VAR 0 5
44777: IN
44778: OR
44779: AND
44780: IFFALSE 45034
// begin hex := GetHexInfo ( x , y ) ;
44782: LD_ADDR_VAR 0 4
44786: PUSH
44787: LD_VAR 0 10
44791: PPUSH
44792: LD_VAR 0 11
44796: PPUSH
44797: CALL_OW 546
44801: ST_TO_ADDR
// if hex [ 1 ] then
44802: LD_VAR 0 4
44806: PUSH
44807: LD_INT 1
44809: ARRAY
44810: IFFALSE 44814
// exit ;
44812: GO 45217
// height := hex [ 2 ] ;
44814: LD_ADDR_VAR 0 15
44818: PUSH
44819: LD_VAR 0 4
44823: PUSH
44824: LD_INT 2
44826: ARRAY
44827: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
44828: LD_ADDR_VAR 0 14
44832: PUSH
44833: LD_INT 0
44835: PUSH
44836: LD_INT 2
44838: PUSH
44839: LD_INT 3
44841: PUSH
44842: LD_INT 5
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: LIST
44849: LIST
44850: ST_TO_ADDR
// for i in tmp do
44851: LD_ADDR_VAR 0 8
44855: PUSH
44856: LD_VAR 0 14
44860: PUSH
44861: FOR_IN
44862: IFFALSE 45032
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
44864: LD_ADDR_VAR 0 9
44868: PUSH
44869: LD_VAR 0 10
44873: PPUSH
44874: LD_VAR 0 8
44878: PPUSH
44879: LD_INT 5
44881: PPUSH
44882: CALL_OW 272
44886: PUSH
44887: LD_VAR 0 11
44891: PPUSH
44892: LD_VAR 0 8
44896: PPUSH
44897: LD_INT 5
44899: PPUSH
44900: CALL_OW 273
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
44909: LD_VAR 0 9
44913: PUSH
44914: LD_INT 1
44916: ARRAY
44917: PPUSH
44918: LD_VAR 0 9
44922: PUSH
44923: LD_INT 2
44925: ARRAY
44926: PPUSH
44927: CALL_OW 488
44931: IFFALSE 45030
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
44933: LD_ADDR_VAR 0 4
44937: PUSH
44938: LD_VAR 0 9
44942: PUSH
44943: LD_INT 1
44945: ARRAY
44946: PPUSH
44947: LD_VAR 0 9
44951: PUSH
44952: LD_INT 2
44954: ARRAY
44955: PPUSH
44956: CALL_OW 546
44960: ST_TO_ADDR
// if hex [ 1 ] then
44961: LD_VAR 0 4
44965: PUSH
44966: LD_INT 1
44968: ARRAY
44969: IFFALSE 44973
// continue ;
44971: GO 44861
// h := hex [ 2 ] ;
44973: LD_ADDR_VAR 0 13
44977: PUSH
44978: LD_VAR 0 4
44982: PUSH
44983: LD_INT 2
44985: ARRAY
44986: ST_TO_ADDR
// if h + 7 < height then
44987: LD_VAR 0 13
44991: PUSH
44992: LD_INT 7
44994: PLUS
44995: PUSH
44996: LD_VAR 0 15
45000: LESS
45001: IFFALSE 45030
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
45003: LD_ADDR_VAR 0 18
45007: PUSH
45008: LD_INT 7
45010: PUSH
45011: LD_INT 28
45013: PUSH
45014: LD_INT 45
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: LIST
45021: PUSH
45022: LD_VAR 0 12
45026: ARRAY
45027: ST_TO_ADDR
// break ;
45028: GO 45032
// end ; end ; end ;
45030: GO 44861
45032: POP
45033: POP
// end ; if not weapon then
45034: LD_VAR 0 18
45038: NOT
45039: IFFALSE 45099
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
45041: LD_ADDR_VAR 0 5
45045: PUSH
45046: LD_VAR 0 5
45050: PUSH
45051: LD_INT 11
45053: PUSH
45054: LD_INT 30
45056: PUSH
45057: LD_INT 49
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: LIST
45064: DIFF
45065: ST_TO_ADDR
// if not list then
45066: LD_VAR 0 5
45070: NOT
45071: IFFALSE 45075
// exit ;
45073: GO 45217
// weapon := list [ rand ( 1 , list ) ] ;
45075: LD_ADDR_VAR 0 18
45079: PUSH
45080: LD_VAR 0 5
45084: PUSH
45085: LD_INT 1
45087: PPUSH
45088: LD_VAR 0 5
45092: PPUSH
45093: CALL_OW 12
45097: ARRAY
45098: ST_TO_ADDR
// end ; if weapon then
45099: LD_VAR 0 18
45103: IFFALSE 45217
// begin tmp := CostOfWeapon ( weapon ) ;
45105: LD_ADDR_VAR 0 14
45109: PUSH
45110: LD_VAR 0 18
45114: PPUSH
45115: CALL_OW 451
45119: ST_TO_ADDR
// j := GetBase ( tower ) ;
45120: LD_ADDR_VAR 0 9
45124: PUSH
45125: LD_VAR 0 1
45129: PPUSH
45130: CALL_OW 274
45134: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
45135: LD_VAR 0 9
45139: PPUSH
45140: LD_INT 1
45142: PPUSH
45143: CALL_OW 275
45147: PUSH
45148: LD_VAR 0 14
45152: PUSH
45153: LD_INT 1
45155: ARRAY
45156: GREATEREQUAL
45157: PUSH
45158: LD_VAR 0 9
45162: PPUSH
45163: LD_INT 2
45165: PPUSH
45166: CALL_OW 275
45170: PUSH
45171: LD_VAR 0 14
45175: PUSH
45176: LD_INT 2
45178: ARRAY
45179: GREATEREQUAL
45180: AND
45181: PUSH
45182: LD_VAR 0 9
45186: PPUSH
45187: LD_INT 3
45189: PPUSH
45190: CALL_OW 275
45194: PUSH
45195: LD_VAR 0 14
45199: PUSH
45200: LD_INT 3
45202: ARRAY
45203: GREATEREQUAL
45204: AND
45205: IFFALSE 45217
// result := weapon ;
45207: LD_ADDR_VAR 0 3
45211: PUSH
45212: LD_VAR 0 18
45216: ST_TO_ADDR
// end ; end ;
45217: LD_VAR 0 3
45221: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
45222: LD_INT 0
45224: PPUSH
45225: PPUSH
// result := true ;
45226: LD_ADDR_VAR 0 3
45230: PUSH
45231: LD_INT 1
45233: ST_TO_ADDR
// if array1 = array2 then
45234: LD_VAR 0 1
45238: PUSH
45239: LD_VAR 0 2
45243: EQUAL
45244: IFFALSE 45304
// begin for i = 1 to array1 do
45246: LD_ADDR_VAR 0 4
45250: PUSH
45251: DOUBLE
45252: LD_INT 1
45254: DEC
45255: ST_TO_ADDR
45256: LD_VAR 0 1
45260: PUSH
45261: FOR_TO
45262: IFFALSE 45300
// if array1 [ i ] <> array2 [ i ] then
45264: LD_VAR 0 1
45268: PUSH
45269: LD_VAR 0 4
45273: ARRAY
45274: PUSH
45275: LD_VAR 0 2
45279: PUSH
45280: LD_VAR 0 4
45284: ARRAY
45285: NONEQUAL
45286: IFFALSE 45298
// begin result := false ;
45288: LD_ADDR_VAR 0 3
45292: PUSH
45293: LD_INT 0
45295: ST_TO_ADDR
// break ;
45296: GO 45300
// end ;
45298: GO 45261
45300: POP
45301: POP
// end else
45302: GO 45312
// result := false ;
45304: LD_ADDR_VAR 0 3
45308: PUSH
45309: LD_INT 0
45311: ST_TO_ADDR
// end ;
45312: LD_VAR 0 3
45316: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
45317: LD_INT 0
45319: PPUSH
45320: PPUSH
// if not array1 or not array2 then
45321: LD_VAR 0 1
45325: NOT
45326: PUSH
45327: LD_VAR 0 2
45331: NOT
45332: OR
45333: IFFALSE 45337
// exit ;
45335: GO 45401
// result := true ;
45337: LD_ADDR_VAR 0 3
45341: PUSH
45342: LD_INT 1
45344: ST_TO_ADDR
// for i = 1 to array1 do
45345: LD_ADDR_VAR 0 4
45349: PUSH
45350: DOUBLE
45351: LD_INT 1
45353: DEC
45354: ST_TO_ADDR
45355: LD_VAR 0 1
45359: PUSH
45360: FOR_TO
45361: IFFALSE 45399
// if array1 [ i ] <> array2 [ i ] then
45363: LD_VAR 0 1
45367: PUSH
45368: LD_VAR 0 4
45372: ARRAY
45373: PUSH
45374: LD_VAR 0 2
45378: PUSH
45379: LD_VAR 0 4
45383: ARRAY
45384: NONEQUAL
45385: IFFALSE 45397
// begin result := false ;
45387: LD_ADDR_VAR 0 3
45391: PUSH
45392: LD_INT 0
45394: ST_TO_ADDR
// break ;
45395: GO 45399
// end ;
45397: GO 45360
45399: POP
45400: POP
// end ;
45401: LD_VAR 0 3
45405: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
45406: LD_INT 0
45408: PPUSH
45409: PPUSH
45410: PPUSH
// pom := GetBase ( fac ) ;
45411: LD_ADDR_VAR 0 5
45415: PUSH
45416: LD_VAR 0 1
45420: PPUSH
45421: CALL_OW 274
45425: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
45426: LD_ADDR_VAR 0 4
45430: PUSH
45431: LD_VAR 0 2
45435: PUSH
45436: LD_INT 1
45438: ARRAY
45439: PPUSH
45440: LD_VAR 0 2
45444: PUSH
45445: LD_INT 2
45447: ARRAY
45448: PPUSH
45449: LD_VAR 0 2
45453: PUSH
45454: LD_INT 3
45456: ARRAY
45457: PPUSH
45458: LD_VAR 0 2
45462: PUSH
45463: LD_INT 4
45465: ARRAY
45466: PPUSH
45467: CALL_OW 449
45471: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45472: LD_ADDR_VAR 0 3
45476: PUSH
45477: LD_VAR 0 5
45481: PPUSH
45482: LD_INT 1
45484: PPUSH
45485: CALL_OW 275
45489: PUSH
45490: LD_VAR 0 4
45494: PUSH
45495: LD_INT 1
45497: ARRAY
45498: GREATEREQUAL
45499: PUSH
45500: LD_VAR 0 5
45504: PPUSH
45505: LD_INT 2
45507: PPUSH
45508: CALL_OW 275
45512: PUSH
45513: LD_VAR 0 4
45517: PUSH
45518: LD_INT 2
45520: ARRAY
45521: GREATEREQUAL
45522: AND
45523: PUSH
45524: LD_VAR 0 5
45528: PPUSH
45529: LD_INT 3
45531: PPUSH
45532: CALL_OW 275
45536: PUSH
45537: LD_VAR 0 4
45541: PUSH
45542: LD_INT 3
45544: ARRAY
45545: GREATEREQUAL
45546: AND
45547: ST_TO_ADDR
// end ;
45548: LD_VAR 0 3
45552: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
45553: LD_INT 0
45555: PPUSH
45556: PPUSH
45557: PPUSH
45558: PPUSH
// pom := GetBase ( building ) ;
45559: LD_ADDR_VAR 0 3
45563: PUSH
45564: LD_VAR 0 1
45568: PPUSH
45569: CALL_OW 274
45573: ST_TO_ADDR
// if not pom then
45574: LD_VAR 0 3
45578: NOT
45579: IFFALSE 45583
// exit ;
45581: GO 45753
// btype := GetBType ( building ) ;
45583: LD_ADDR_VAR 0 5
45587: PUSH
45588: LD_VAR 0 1
45592: PPUSH
45593: CALL_OW 266
45597: ST_TO_ADDR
// if btype = b_armoury then
45598: LD_VAR 0 5
45602: PUSH
45603: LD_INT 4
45605: EQUAL
45606: IFFALSE 45616
// btype := b_barracks ;
45608: LD_ADDR_VAR 0 5
45612: PUSH
45613: LD_INT 5
45615: ST_TO_ADDR
// if btype = b_depot then
45616: LD_VAR 0 5
45620: PUSH
45621: LD_INT 0
45623: EQUAL
45624: IFFALSE 45634
// btype := b_warehouse ;
45626: LD_ADDR_VAR 0 5
45630: PUSH
45631: LD_INT 1
45633: ST_TO_ADDR
// if btype = b_workshop then
45634: LD_VAR 0 5
45638: PUSH
45639: LD_INT 2
45641: EQUAL
45642: IFFALSE 45652
// btype := b_factory ;
45644: LD_ADDR_VAR 0 5
45648: PUSH
45649: LD_INT 3
45651: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45652: LD_ADDR_VAR 0 4
45656: PUSH
45657: LD_VAR 0 5
45661: PPUSH
45662: LD_VAR 0 1
45666: PPUSH
45667: CALL_OW 248
45671: PPUSH
45672: CALL_OW 450
45676: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45677: LD_ADDR_VAR 0 2
45681: PUSH
45682: LD_VAR 0 3
45686: PPUSH
45687: LD_INT 1
45689: PPUSH
45690: CALL_OW 275
45694: PUSH
45695: LD_VAR 0 4
45699: PUSH
45700: LD_INT 1
45702: ARRAY
45703: GREATEREQUAL
45704: PUSH
45705: LD_VAR 0 3
45709: PPUSH
45710: LD_INT 2
45712: PPUSH
45713: CALL_OW 275
45717: PUSH
45718: LD_VAR 0 4
45722: PUSH
45723: LD_INT 2
45725: ARRAY
45726: GREATEREQUAL
45727: AND
45728: PUSH
45729: LD_VAR 0 3
45733: PPUSH
45734: LD_INT 3
45736: PPUSH
45737: CALL_OW 275
45741: PUSH
45742: LD_VAR 0 4
45746: PUSH
45747: LD_INT 3
45749: ARRAY
45750: GREATEREQUAL
45751: AND
45752: ST_TO_ADDR
// end ;
45753: LD_VAR 0 2
45757: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
45758: LD_INT 0
45760: PPUSH
45761: PPUSH
45762: PPUSH
// pom := GetBase ( building ) ;
45763: LD_ADDR_VAR 0 4
45767: PUSH
45768: LD_VAR 0 1
45772: PPUSH
45773: CALL_OW 274
45777: ST_TO_ADDR
// if not pom then
45778: LD_VAR 0 4
45782: NOT
45783: IFFALSE 45787
// exit ;
45785: GO 45888
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45787: LD_ADDR_VAR 0 5
45791: PUSH
45792: LD_VAR 0 2
45796: PPUSH
45797: LD_VAR 0 1
45801: PPUSH
45802: CALL_OW 248
45806: PPUSH
45807: CALL_OW 450
45811: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45812: LD_ADDR_VAR 0 3
45816: PUSH
45817: LD_VAR 0 4
45821: PPUSH
45822: LD_INT 1
45824: PPUSH
45825: CALL_OW 275
45829: PUSH
45830: LD_VAR 0 5
45834: PUSH
45835: LD_INT 1
45837: ARRAY
45838: GREATEREQUAL
45839: PUSH
45840: LD_VAR 0 4
45844: PPUSH
45845: LD_INT 2
45847: PPUSH
45848: CALL_OW 275
45852: PUSH
45853: LD_VAR 0 5
45857: PUSH
45858: LD_INT 2
45860: ARRAY
45861: GREATEREQUAL
45862: AND
45863: PUSH
45864: LD_VAR 0 4
45868: PPUSH
45869: LD_INT 3
45871: PPUSH
45872: CALL_OW 275
45876: PUSH
45877: LD_VAR 0 5
45881: PUSH
45882: LD_INT 3
45884: ARRAY
45885: GREATEREQUAL
45886: AND
45887: ST_TO_ADDR
// end ;
45888: LD_VAR 0 3
45892: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
45893: LD_INT 0
45895: PPUSH
45896: PPUSH
45897: PPUSH
45898: PPUSH
45899: PPUSH
45900: PPUSH
45901: PPUSH
45902: PPUSH
45903: PPUSH
45904: PPUSH
45905: PPUSH
// result := false ;
45906: LD_ADDR_VAR 0 8
45910: PUSH
45911: LD_INT 0
45913: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
45914: LD_VAR 0 5
45918: NOT
45919: PUSH
45920: LD_VAR 0 1
45924: NOT
45925: OR
45926: PUSH
45927: LD_VAR 0 2
45931: NOT
45932: OR
45933: PUSH
45934: LD_VAR 0 3
45938: NOT
45939: OR
45940: IFFALSE 45944
// exit ;
45942: GO 46758
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
45944: LD_ADDR_VAR 0 14
45948: PUSH
45949: LD_VAR 0 1
45953: PPUSH
45954: LD_VAR 0 2
45958: PPUSH
45959: LD_VAR 0 3
45963: PPUSH
45964: LD_VAR 0 4
45968: PPUSH
45969: LD_VAR 0 5
45973: PUSH
45974: LD_INT 1
45976: ARRAY
45977: PPUSH
45978: CALL_OW 248
45982: PPUSH
45983: LD_INT 0
45985: PPUSH
45986: CALL 48011 0 6
45990: ST_TO_ADDR
// if not hexes then
45991: LD_VAR 0 14
45995: NOT
45996: IFFALSE 46000
// exit ;
45998: GO 46758
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
46000: LD_ADDR_VAR 0 17
46004: PUSH
46005: LD_VAR 0 5
46009: PPUSH
46010: LD_INT 22
46012: PUSH
46013: LD_VAR 0 13
46017: PPUSH
46018: CALL_OW 255
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 2
46029: PUSH
46030: LD_INT 30
46032: PUSH
46033: LD_INT 0
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: LD_INT 30
46042: PUSH
46043: LD_INT 1
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: LIST
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PPUSH
46059: CALL_OW 72
46063: ST_TO_ADDR
// for i = 1 to hexes do
46064: LD_ADDR_VAR 0 9
46068: PUSH
46069: DOUBLE
46070: LD_INT 1
46072: DEC
46073: ST_TO_ADDR
46074: LD_VAR 0 14
46078: PUSH
46079: FOR_TO
46080: IFFALSE 46756
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46082: LD_ADDR_VAR 0 13
46086: PUSH
46087: LD_VAR 0 14
46091: PUSH
46092: LD_VAR 0 9
46096: ARRAY
46097: PUSH
46098: LD_INT 1
46100: ARRAY
46101: PPUSH
46102: LD_VAR 0 14
46106: PUSH
46107: LD_VAR 0 9
46111: ARRAY
46112: PUSH
46113: LD_INT 2
46115: ARRAY
46116: PPUSH
46117: CALL_OW 428
46121: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
46122: LD_VAR 0 14
46126: PUSH
46127: LD_VAR 0 9
46131: ARRAY
46132: PUSH
46133: LD_INT 1
46135: ARRAY
46136: PPUSH
46137: LD_VAR 0 14
46141: PUSH
46142: LD_VAR 0 9
46146: ARRAY
46147: PUSH
46148: LD_INT 2
46150: ARRAY
46151: PPUSH
46152: CALL_OW 351
46156: PUSH
46157: LD_VAR 0 14
46161: PUSH
46162: LD_VAR 0 9
46166: ARRAY
46167: PUSH
46168: LD_INT 1
46170: ARRAY
46171: PPUSH
46172: LD_VAR 0 14
46176: PUSH
46177: LD_VAR 0 9
46181: ARRAY
46182: PUSH
46183: LD_INT 2
46185: ARRAY
46186: PPUSH
46187: CALL_OW 488
46191: NOT
46192: OR
46193: PUSH
46194: LD_VAR 0 13
46198: PPUSH
46199: CALL_OW 247
46203: PUSH
46204: LD_INT 3
46206: EQUAL
46207: OR
46208: IFFALSE 46214
// exit ;
46210: POP
46211: POP
46212: GO 46758
// if not tmp then
46214: LD_VAR 0 13
46218: NOT
46219: IFFALSE 46223
// continue ;
46221: GO 46079
// result := true ;
46223: LD_ADDR_VAR 0 8
46227: PUSH
46228: LD_INT 1
46230: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
46231: LD_VAR 0 6
46235: PUSH
46236: LD_VAR 0 13
46240: PPUSH
46241: CALL_OW 247
46245: PUSH
46246: LD_INT 2
46248: EQUAL
46249: AND
46250: PUSH
46251: LD_VAR 0 13
46255: PPUSH
46256: CALL_OW 263
46260: PUSH
46261: LD_INT 1
46263: EQUAL
46264: AND
46265: IFFALSE 46429
// begin if IsDrivenBy ( tmp ) then
46267: LD_VAR 0 13
46271: PPUSH
46272: CALL_OW 311
46276: IFFALSE 46280
// continue ;
46278: GO 46079
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
46280: LD_VAR 0 6
46284: PPUSH
46285: LD_INT 3
46287: PUSH
46288: LD_INT 60
46290: PUSH
46291: EMPTY
46292: LIST
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 3
46300: PUSH
46301: LD_INT 55
46303: PUSH
46304: EMPTY
46305: LIST
46306: PUSH
46307: EMPTY
46308: LIST
46309: LIST
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PPUSH
46315: CALL_OW 72
46319: IFFALSE 46427
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
46321: LD_ADDR_VAR 0 18
46325: PUSH
46326: LD_VAR 0 6
46330: PPUSH
46331: LD_INT 3
46333: PUSH
46334: LD_INT 60
46336: PUSH
46337: EMPTY
46338: LIST
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: LD_INT 3
46346: PUSH
46347: LD_INT 55
46349: PUSH
46350: EMPTY
46351: LIST
46352: PUSH
46353: EMPTY
46354: LIST
46355: LIST
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PPUSH
46361: CALL_OW 72
46365: PUSH
46366: LD_INT 1
46368: ARRAY
46369: ST_TO_ADDR
// if IsInUnit ( driver ) then
46370: LD_VAR 0 18
46374: PPUSH
46375: CALL_OW 310
46379: IFFALSE 46390
// ComExit ( driver ) ;
46381: LD_VAR 0 18
46385: PPUSH
46386: CALL 71812 0 1
// AddComEnterUnit ( driver , tmp ) ;
46390: LD_VAR 0 18
46394: PPUSH
46395: LD_VAR 0 13
46399: PPUSH
46400: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
46404: LD_VAR 0 18
46408: PPUSH
46409: LD_VAR 0 7
46413: PPUSH
46414: CALL_OW 173
// AddComExitVehicle ( driver ) ;
46418: LD_VAR 0 18
46422: PPUSH
46423: CALL_OW 181
// end ; continue ;
46427: GO 46079
// end ; if not cleaners or not tmp in cleaners then
46429: LD_VAR 0 6
46433: NOT
46434: PUSH
46435: LD_VAR 0 13
46439: PUSH
46440: LD_VAR 0 6
46444: IN
46445: NOT
46446: OR
46447: IFFALSE 46754
// begin if dep then
46449: LD_VAR 0 17
46453: IFFALSE 46589
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
46455: LD_ADDR_VAR 0 16
46459: PUSH
46460: LD_VAR 0 17
46464: PUSH
46465: LD_INT 1
46467: ARRAY
46468: PPUSH
46469: CALL_OW 250
46473: PPUSH
46474: LD_VAR 0 17
46478: PUSH
46479: LD_INT 1
46481: ARRAY
46482: PPUSH
46483: CALL_OW 254
46487: PPUSH
46488: LD_INT 5
46490: PPUSH
46491: CALL_OW 272
46495: PUSH
46496: LD_VAR 0 17
46500: PUSH
46501: LD_INT 1
46503: ARRAY
46504: PPUSH
46505: CALL_OW 251
46509: PPUSH
46510: LD_VAR 0 17
46514: PUSH
46515: LD_INT 1
46517: ARRAY
46518: PPUSH
46519: CALL_OW 254
46523: PPUSH
46524: LD_INT 5
46526: PPUSH
46527: CALL_OW 273
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
46536: LD_VAR 0 16
46540: PUSH
46541: LD_INT 1
46543: ARRAY
46544: PPUSH
46545: LD_VAR 0 16
46549: PUSH
46550: LD_INT 2
46552: ARRAY
46553: PPUSH
46554: CALL_OW 488
46558: IFFALSE 46589
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
46560: LD_VAR 0 13
46564: PPUSH
46565: LD_VAR 0 16
46569: PUSH
46570: LD_INT 1
46572: ARRAY
46573: PPUSH
46574: LD_VAR 0 16
46578: PUSH
46579: LD_INT 2
46581: ARRAY
46582: PPUSH
46583: CALL_OW 111
// continue ;
46587: GO 46079
// end ; end ; r := GetDir ( tmp ) ;
46589: LD_ADDR_VAR 0 15
46593: PUSH
46594: LD_VAR 0 13
46598: PPUSH
46599: CALL_OW 254
46603: ST_TO_ADDR
// if r = 5 then
46604: LD_VAR 0 15
46608: PUSH
46609: LD_INT 5
46611: EQUAL
46612: IFFALSE 46622
// r := 0 ;
46614: LD_ADDR_VAR 0 15
46618: PUSH
46619: LD_INT 0
46621: ST_TO_ADDR
// for j = r to 5 do
46622: LD_ADDR_VAR 0 10
46626: PUSH
46627: DOUBLE
46628: LD_VAR 0 15
46632: DEC
46633: ST_TO_ADDR
46634: LD_INT 5
46636: PUSH
46637: FOR_TO
46638: IFFALSE 46752
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
46640: LD_ADDR_VAR 0 11
46644: PUSH
46645: LD_VAR 0 13
46649: PPUSH
46650: CALL_OW 250
46654: PPUSH
46655: LD_VAR 0 10
46659: PPUSH
46660: LD_INT 2
46662: PPUSH
46663: CALL_OW 272
46667: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
46668: LD_ADDR_VAR 0 12
46672: PUSH
46673: LD_VAR 0 13
46677: PPUSH
46678: CALL_OW 251
46682: PPUSH
46683: LD_VAR 0 10
46687: PPUSH
46688: LD_INT 2
46690: PPUSH
46691: CALL_OW 273
46695: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
46696: LD_VAR 0 11
46700: PPUSH
46701: LD_VAR 0 12
46705: PPUSH
46706: CALL_OW 488
46710: PUSH
46711: LD_VAR 0 11
46715: PPUSH
46716: LD_VAR 0 12
46720: PPUSH
46721: CALL_OW 428
46725: NOT
46726: AND
46727: IFFALSE 46750
// begin ComMoveXY ( tmp , _x , _y ) ;
46729: LD_VAR 0 13
46733: PPUSH
46734: LD_VAR 0 11
46738: PPUSH
46739: LD_VAR 0 12
46743: PPUSH
46744: CALL_OW 111
// break ;
46748: GO 46752
// end ; end ;
46750: GO 46637
46752: POP
46753: POP
// end ; end ;
46754: GO 46079
46756: POP
46757: POP
// end ;
46758: LD_VAR 0 8
46762: RET
// export function BuildingTechInvented ( side , btype ) ; begin
46763: LD_INT 0
46765: PPUSH
// result := true ;
46766: LD_ADDR_VAR 0 3
46770: PUSH
46771: LD_INT 1
46773: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
46774: LD_VAR 0 2
46778: PUSH
46779: LD_INT 24
46781: DOUBLE
46782: EQUAL
46783: IFTRUE 46793
46785: LD_INT 33
46787: DOUBLE
46788: EQUAL
46789: IFTRUE 46793
46791: GO 46818
46793: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
46794: LD_ADDR_VAR 0 3
46798: PUSH
46799: LD_INT 32
46801: PPUSH
46802: LD_VAR 0 1
46806: PPUSH
46807: CALL_OW 321
46811: PUSH
46812: LD_INT 2
46814: EQUAL
46815: ST_TO_ADDR
46816: GO 47134
46818: LD_INT 20
46820: DOUBLE
46821: EQUAL
46822: IFTRUE 46826
46824: GO 46851
46826: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
46827: LD_ADDR_VAR 0 3
46831: PUSH
46832: LD_INT 6
46834: PPUSH
46835: LD_VAR 0 1
46839: PPUSH
46840: CALL_OW 321
46844: PUSH
46845: LD_INT 2
46847: EQUAL
46848: ST_TO_ADDR
46849: GO 47134
46851: LD_INT 22
46853: DOUBLE
46854: EQUAL
46855: IFTRUE 46865
46857: LD_INT 36
46859: DOUBLE
46860: EQUAL
46861: IFTRUE 46865
46863: GO 46890
46865: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
46866: LD_ADDR_VAR 0 3
46870: PUSH
46871: LD_INT 15
46873: PPUSH
46874: LD_VAR 0 1
46878: PPUSH
46879: CALL_OW 321
46883: PUSH
46884: LD_INT 2
46886: EQUAL
46887: ST_TO_ADDR
46888: GO 47134
46890: LD_INT 30
46892: DOUBLE
46893: EQUAL
46894: IFTRUE 46898
46896: GO 46923
46898: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
46899: LD_ADDR_VAR 0 3
46903: PUSH
46904: LD_INT 20
46906: PPUSH
46907: LD_VAR 0 1
46911: PPUSH
46912: CALL_OW 321
46916: PUSH
46917: LD_INT 2
46919: EQUAL
46920: ST_TO_ADDR
46921: GO 47134
46923: LD_INT 28
46925: DOUBLE
46926: EQUAL
46927: IFTRUE 46937
46929: LD_INT 21
46931: DOUBLE
46932: EQUAL
46933: IFTRUE 46937
46935: GO 46962
46937: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
46938: LD_ADDR_VAR 0 3
46942: PUSH
46943: LD_INT 21
46945: PPUSH
46946: LD_VAR 0 1
46950: PPUSH
46951: CALL_OW 321
46955: PUSH
46956: LD_INT 2
46958: EQUAL
46959: ST_TO_ADDR
46960: GO 47134
46962: LD_INT 16
46964: DOUBLE
46965: EQUAL
46966: IFTRUE 46970
46968: GO 46995
46970: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
46971: LD_ADDR_VAR 0 3
46975: PUSH
46976: LD_INT 84
46978: PPUSH
46979: LD_VAR 0 1
46983: PPUSH
46984: CALL_OW 321
46988: PUSH
46989: LD_INT 2
46991: EQUAL
46992: ST_TO_ADDR
46993: GO 47134
46995: LD_INT 19
46997: DOUBLE
46998: EQUAL
46999: IFTRUE 47009
47001: LD_INT 23
47003: DOUBLE
47004: EQUAL
47005: IFTRUE 47009
47007: GO 47034
47009: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
47010: LD_ADDR_VAR 0 3
47014: PUSH
47015: LD_INT 83
47017: PPUSH
47018: LD_VAR 0 1
47022: PPUSH
47023: CALL_OW 321
47027: PUSH
47028: LD_INT 2
47030: EQUAL
47031: ST_TO_ADDR
47032: GO 47134
47034: LD_INT 17
47036: DOUBLE
47037: EQUAL
47038: IFTRUE 47042
47040: GO 47067
47042: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
47043: LD_ADDR_VAR 0 3
47047: PUSH
47048: LD_INT 39
47050: PPUSH
47051: LD_VAR 0 1
47055: PPUSH
47056: CALL_OW 321
47060: PUSH
47061: LD_INT 2
47063: EQUAL
47064: ST_TO_ADDR
47065: GO 47134
47067: LD_INT 18
47069: DOUBLE
47070: EQUAL
47071: IFTRUE 47075
47073: GO 47100
47075: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
47076: LD_ADDR_VAR 0 3
47080: PUSH
47081: LD_INT 40
47083: PPUSH
47084: LD_VAR 0 1
47088: PPUSH
47089: CALL_OW 321
47093: PUSH
47094: LD_INT 2
47096: EQUAL
47097: ST_TO_ADDR
47098: GO 47134
47100: LD_INT 27
47102: DOUBLE
47103: EQUAL
47104: IFTRUE 47108
47106: GO 47133
47108: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
47109: LD_ADDR_VAR 0 3
47113: PUSH
47114: LD_INT 35
47116: PPUSH
47117: LD_VAR 0 1
47121: PPUSH
47122: CALL_OW 321
47126: PUSH
47127: LD_INT 2
47129: EQUAL
47130: ST_TO_ADDR
47131: GO 47134
47133: POP
// end ;
47134: LD_VAR 0 3
47138: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
47139: LD_INT 0
47141: PPUSH
47142: PPUSH
47143: PPUSH
47144: PPUSH
47145: PPUSH
47146: PPUSH
47147: PPUSH
47148: PPUSH
47149: PPUSH
47150: PPUSH
47151: PPUSH
// result := false ;
47152: LD_ADDR_VAR 0 6
47156: PUSH
47157: LD_INT 0
47159: ST_TO_ADDR
// if btype = b_depot then
47160: LD_VAR 0 2
47164: PUSH
47165: LD_INT 0
47167: EQUAL
47168: IFFALSE 47180
// begin result := true ;
47170: LD_ADDR_VAR 0 6
47174: PUSH
47175: LD_INT 1
47177: ST_TO_ADDR
// exit ;
47178: GO 48006
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
47180: LD_VAR 0 1
47184: NOT
47185: PUSH
47186: LD_VAR 0 1
47190: PPUSH
47191: CALL_OW 266
47195: PUSH
47196: LD_INT 0
47198: PUSH
47199: LD_INT 1
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: IN
47206: NOT
47207: OR
47208: PUSH
47209: LD_VAR 0 2
47213: NOT
47214: OR
47215: PUSH
47216: LD_VAR 0 5
47220: PUSH
47221: LD_INT 0
47223: PUSH
47224: LD_INT 1
47226: PUSH
47227: LD_INT 2
47229: PUSH
47230: LD_INT 3
47232: PUSH
47233: LD_INT 4
47235: PUSH
47236: LD_INT 5
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: IN
47247: NOT
47248: OR
47249: PUSH
47250: LD_VAR 0 3
47254: PPUSH
47255: LD_VAR 0 4
47259: PPUSH
47260: CALL_OW 488
47264: NOT
47265: OR
47266: IFFALSE 47270
// exit ;
47268: GO 48006
// side := GetSide ( depot ) ;
47270: LD_ADDR_VAR 0 9
47274: PUSH
47275: LD_VAR 0 1
47279: PPUSH
47280: CALL_OW 255
47284: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
47285: LD_VAR 0 9
47289: PPUSH
47290: LD_VAR 0 2
47294: PPUSH
47295: CALL 46763 0 2
47299: NOT
47300: IFFALSE 47304
// exit ;
47302: GO 48006
// pom := GetBase ( depot ) ;
47304: LD_ADDR_VAR 0 10
47308: PUSH
47309: LD_VAR 0 1
47313: PPUSH
47314: CALL_OW 274
47318: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
47319: LD_ADDR_VAR 0 11
47323: PUSH
47324: LD_VAR 0 2
47328: PPUSH
47329: LD_VAR 0 1
47333: PPUSH
47334: CALL_OW 248
47338: PPUSH
47339: CALL_OW 450
47343: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
47344: LD_VAR 0 10
47348: PPUSH
47349: LD_INT 1
47351: PPUSH
47352: CALL_OW 275
47356: PUSH
47357: LD_VAR 0 11
47361: PUSH
47362: LD_INT 1
47364: ARRAY
47365: GREATEREQUAL
47366: PUSH
47367: LD_VAR 0 10
47371: PPUSH
47372: LD_INT 2
47374: PPUSH
47375: CALL_OW 275
47379: PUSH
47380: LD_VAR 0 11
47384: PUSH
47385: LD_INT 2
47387: ARRAY
47388: GREATEREQUAL
47389: AND
47390: PUSH
47391: LD_VAR 0 10
47395: PPUSH
47396: LD_INT 3
47398: PPUSH
47399: CALL_OW 275
47403: PUSH
47404: LD_VAR 0 11
47408: PUSH
47409: LD_INT 3
47411: ARRAY
47412: GREATEREQUAL
47413: AND
47414: NOT
47415: IFFALSE 47419
// exit ;
47417: GO 48006
// if GetBType ( depot ) = b_depot then
47419: LD_VAR 0 1
47423: PPUSH
47424: CALL_OW 266
47428: PUSH
47429: LD_INT 0
47431: EQUAL
47432: IFFALSE 47444
// dist := 28 else
47434: LD_ADDR_VAR 0 14
47438: PUSH
47439: LD_INT 28
47441: ST_TO_ADDR
47442: GO 47452
// dist := 36 ;
47444: LD_ADDR_VAR 0 14
47448: PUSH
47449: LD_INT 36
47451: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
47452: LD_VAR 0 1
47456: PPUSH
47457: LD_VAR 0 3
47461: PPUSH
47462: LD_VAR 0 4
47466: PPUSH
47467: CALL_OW 297
47471: PUSH
47472: LD_VAR 0 14
47476: GREATER
47477: IFFALSE 47481
// exit ;
47479: GO 48006
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
47481: LD_ADDR_VAR 0 12
47485: PUSH
47486: LD_VAR 0 2
47490: PPUSH
47491: LD_VAR 0 3
47495: PPUSH
47496: LD_VAR 0 4
47500: PPUSH
47501: LD_VAR 0 5
47505: PPUSH
47506: LD_VAR 0 1
47510: PPUSH
47511: CALL_OW 248
47515: PPUSH
47516: LD_INT 0
47518: PPUSH
47519: CALL 48011 0 6
47523: ST_TO_ADDR
// if not hexes then
47524: LD_VAR 0 12
47528: NOT
47529: IFFALSE 47533
// exit ;
47531: GO 48006
// hex := GetHexInfo ( x , y ) ;
47533: LD_ADDR_VAR 0 15
47537: PUSH
47538: LD_VAR 0 3
47542: PPUSH
47543: LD_VAR 0 4
47547: PPUSH
47548: CALL_OW 546
47552: ST_TO_ADDR
// if hex [ 1 ] then
47553: LD_VAR 0 15
47557: PUSH
47558: LD_INT 1
47560: ARRAY
47561: IFFALSE 47565
// exit ;
47563: GO 48006
// height := hex [ 2 ] ;
47565: LD_ADDR_VAR 0 13
47569: PUSH
47570: LD_VAR 0 15
47574: PUSH
47575: LD_INT 2
47577: ARRAY
47578: ST_TO_ADDR
// for i = 1 to hexes do
47579: LD_ADDR_VAR 0 7
47583: PUSH
47584: DOUBLE
47585: LD_INT 1
47587: DEC
47588: ST_TO_ADDR
47589: LD_VAR 0 12
47593: PUSH
47594: FOR_TO
47595: IFFALSE 47925
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
47597: LD_VAR 0 12
47601: PUSH
47602: LD_VAR 0 7
47606: ARRAY
47607: PUSH
47608: LD_INT 1
47610: ARRAY
47611: PPUSH
47612: LD_VAR 0 12
47616: PUSH
47617: LD_VAR 0 7
47621: ARRAY
47622: PUSH
47623: LD_INT 2
47625: ARRAY
47626: PPUSH
47627: CALL_OW 488
47631: NOT
47632: PUSH
47633: LD_VAR 0 12
47637: PUSH
47638: LD_VAR 0 7
47642: ARRAY
47643: PUSH
47644: LD_INT 1
47646: ARRAY
47647: PPUSH
47648: LD_VAR 0 12
47652: PUSH
47653: LD_VAR 0 7
47657: ARRAY
47658: PUSH
47659: LD_INT 2
47661: ARRAY
47662: PPUSH
47663: CALL_OW 428
47667: PUSH
47668: LD_INT 0
47670: GREATER
47671: OR
47672: PUSH
47673: LD_VAR 0 12
47677: PUSH
47678: LD_VAR 0 7
47682: ARRAY
47683: PUSH
47684: LD_INT 1
47686: ARRAY
47687: PPUSH
47688: LD_VAR 0 12
47692: PUSH
47693: LD_VAR 0 7
47697: ARRAY
47698: PUSH
47699: LD_INT 2
47701: ARRAY
47702: PPUSH
47703: CALL_OW 351
47707: OR
47708: IFFALSE 47714
// exit ;
47710: POP
47711: POP
47712: GO 48006
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47714: LD_ADDR_VAR 0 8
47718: PUSH
47719: LD_VAR 0 12
47723: PUSH
47724: LD_VAR 0 7
47728: ARRAY
47729: PUSH
47730: LD_INT 1
47732: ARRAY
47733: PPUSH
47734: LD_VAR 0 12
47738: PUSH
47739: LD_VAR 0 7
47743: ARRAY
47744: PUSH
47745: LD_INT 2
47747: ARRAY
47748: PPUSH
47749: CALL_OW 546
47753: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
47754: LD_VAR 0 8
47758: PUSH
47759: LD_INT 1
47761: ARRAY
47762: PUSH
47763: LD_VAR 0 8
47767: PUSH
47768: LD_INT 2
47770: ARRAY
47771: PUSH
47772: LD_VAR 0 13
47776: PUSH
47777: LD_INT 2
47779: PLUS
47780: GREATER
47781: OR
47782: PUSH
47783: LD_VAR 0 8
47787: PUSH
47788: LD_INT 2
47790: ARRAY
47791: PUSH
47792: LD_VAR 0 13
47796: PUSH
47797: LD_INT 2
47799: MINUS
47800: LESS
47801: OR
47802: PUSH
47803: LD_VAR 0 8
47807: PUSH
47808: LD_INT 3
47810: ARRAY
47811: PUSH
47812: LD_INT 0
47814: PUSH
47815: LD_INT 8
47817: PUSH
47818: LD_INT 9
47820: PUSH
47821: LD_INT 10
47823: PUSH
47824: LD_INT 11
47826: PUSH
47827: LD_INT 12
47829: PUSH
47830: LD_INT 13
47832: PUSH
47833: LD_INT 16
47835: PUSH
47836: LD_INT 17
47838: PUSH
47839: LD_INT 18
47841: PUSH
47842: LD_INT 19
47844: PUSH
47845: LD_INT 20
47847: PUSH
47848: LD_INT 21
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: LIST
47864: LIST
47865: IN
47866: NOT
47867: OR
47868: PUSH
47869: LD_VAR 0 8
47873: PUSH
47874: LD_INT 5
47876: ARRAY
47877: NOT
47878: OR
47879: PUSH
47880: LD_VAR 0 8
47884: PUSH
47885: LD_INT 6
47887: ARRAY
47888: PUSH
47889: LD_INT 1
47891: PUSH
47892: LD_INT 2
47894: PUSH
47895: LD_INT 7
47897: PUSH
47898: LD_INT 9
47900: PUSH
47901: LD_INT 10
47903: PUSH
47904: LD_INT 11
47906: PUSH
47907: EMPTY
47908: LIST
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: IN
47915: NOT
47916: OR
47917: IFFALSE 47923
// exit ;
47919: POP
47920: POP
47921: GO 48006
// end ;
47923: GO 47594
47925: POP
47926: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
47927: LD_VAR 0 9
47931: PPUSH
47932: LD_VAR 0 3
47936: PPUSH
47937: LD_VAR 0 4
47941: PPUSH
47942: LD_INT 20
47944: PPUSH
47945: CALL 39929 0 4
47949: PUSH
47950: LD_INT 4
47952: ARRAY
47953: IFFALSE 47957
// exit ;
47955: GO 48006
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
47957: LD_VAR 0 2
47961: PUSH
47962: LD_INT 29
47964: PUSH
47965: LD_INT 30
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: IN
47972: PUSH
47973: LD_VAR 0 3
47977: PPUSH
47978: LD_VAR 0 4
47982: PPUSH
47983: LD_VAR 0 9
47987: PPUSH
47988: CALL_OW 440
47992: NOT
47993: AND
47994: IFFALSE 47998
// exit ;
47996: GO 48006
// result := true ;
47998: LD_ADDR_VAR 0 6
48002: PUSH
48003: LD_INT 1
48005: ST_TO_ADDR
// end ;
48006: LD_VAR 0 6
48010: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
48011: LD_INT 0
48013: PPUSH
48014: PPUSH
48015: PPUSH
48016: PPUSH
48017: PPUSH
48018: PPUSH
48019: PPUSH
48020: PPUSH
48021: PPUSH
48022: PPUSH
48023: PPUSH
48024: PPUSH
48025: PPUSH
48026: PPUSH
48027: PPUSH
48028: PPUSH
48029: PPUSH
48030: PPUSH
48031: PPUSH
48032: PPUSH
48033: PPUSH
48034: PPUSH
48035: PPUSH
48036: PPUSH
48037: PPUSH
48038: PPUSH
48039: PPUSH
48040: PPUSH
48041: PPUSH
48042: PPUSH
48043: PPUSH
48044: PPUSH
48045: PPUSH
48046: PPUSH
48047: PPUSH
48048: PPUSH
48049: PPUSH
48050: PPUSH
48051: PPUSH
48052: PPUSH
48053: PPUSH
48054: PPUSH
48055: PPUSH
48056: PPUSH
48057: PPUSH
48058: PPUSH
48059: PPUSH
48060: PPUSH
48061: PPUSH
48062: PPUSH
48063: PPUSH
48064: PPUSH
48065: PPUSH
48066: PPUSH
48067: PPUSH
48068: PPUSH
48069: PPUSH
48070: PPUSH
// result = [ ] ;
48071: LD_ADDR_VAR 0 7
48075: PUSH
48076: EMPTY
48077: ST_TO_ADDR
// temp_list = [ ] ;
48078: LD_ADDR_VAR 0 9
48082: PUSH
48083: EMPTY
48084: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
48085: LD_VAR 0 4
48089: PUSH
48090: LD_INT 0
48092: PUSH
48093: LD_INT 1
48095: PUSH
48096: LD_INT 2
48098: PUSH
48099: LD_INT 3
48101: PUSH
48102: LD_INT 4
48104: PUSH
48105: LD_INT 5
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: IN
48116: NOT
48117: PUSH
48118: LD_VAR 0 1
48122: PUSH
48123: LD_INT 0
48125: PUSH
48126: LD_INT 1
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: IN
48133: PUSH
48134: LD_VAR 0 5
48138: PUSH
48139: LD_INT 1
48141: PUSH
48142: LD_INT 2
48144: PUSH
48145: LD_INT 3
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: LIST
48152: IN
48153: NOT
48154: AND
48155: OR
48156: IFFALSE 48160
// exit ;
48158: GO 66551
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
48160: LD_VAR 0 1
48164: PUSH
48165: LD_INT 6
48167: PUSH
48168: LD_INT 7
48170: PUSH
48171: LD_INT 8
48173: PUSH
48174: LD_INT 13
48176: PUSH
48177: LD_INT 12
48179: PUSH
48180: LD_INT 15
48182: PUSH
48183: LD_INT 11
48185: PUSH
48186: LD_INT 14
48188: PUSH
48189: LD_INT 10
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: LIST
48202: IN
48203: IFFALSE 48213
// btype = b_lab ;
48205: LD_ADDR_VAR 0 1
48209: PUSH
48210: LD_INT 6
48212: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
48213: LD_VAR 0 6
48217: PUSH
48218: LD_INT 0
48220: PUSH
48221: LD_INT 1
48223: PUSH
48224: LD_INT 2
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: LIST
48231: IN
48232: NOT
48233: PUSH
48234: LD_VAR 0 1
48238: PUSH
48239: LD_INT 0
48241: PUSH
48242: LD_INT 1
48244: PUSH
48245: LD_INT 2
48247: PUSH
48248: LD_INT 3
48250: PUSH
48251: LD_INT 6
48253: PUSH
48254: LD_INT 36
48256: PUSH
48257: LD_INT 4
48259: PUSH
48260: LD_INT 5
48262: PUSH
48263: LD_INT 31
48265: PUSH
48266: LD_INT 32
48268: PUSH
48269: LD_INT 33
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: LIST
48276: LIST
48277: LIST
48278: LIST
48279: LIST
48280: LIST
48281: LIST
48282: LIST
48283: LIST
48284: IN
48285: NOT
48286: PUSH
48287: LD_VAR 0 6
48291: PUSH
48292: LD_INT 1
48294: EQUAL
48295: AND
48296: OR
48297: PUSH
48298: LD_VAR 0 1
48302: PUSH
48303: LD_INT 2
48305: PUSH
48306: LD_INT 3
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: IN
48313: NOT
48314: PUSH
48315: LD_VAR 0 6
48319: PUSH
48320: LD_INT 2
48322: EQUAL
48323: AND
48324: OR
48325: IFFALSE 48335
// mode = 0 ;
48327: LD_ADDR_VAR 0 6
48331: PUSH
48332: LD_INT 0
48334: ST_TO_ADDR
// case mode of 0 :
48335: LD_VAR 0 6
48339: PUSH
48340: LD_INT 0
48342: DOUBLE
48343: EQUAL
48344: IFTRUE 48348
48346: GO 59801
48348: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48349: LD_ADDR_VAR 0 11
48353: PUSH
48354: LD_INT 0
48356: PUSH
48357: LD_INT 0
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 0
48366: PUSH
48367: LD_INT 1
48369: NEG
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 1
48377: PUSH
48378: LD_INT 0
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: LD_INT 1
48387: PUSH
48388: LD_INT 1
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 0
48397: PUSH
48398: LD_INT 1
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 1
48407: NEG
48408: PUSH
48409: LD_INT 0
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: LD_INT 1
48418: NEG
48419: PUSH
48420: LD_INT 1
48422: NEG
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: LD_INT 1
48430: NEG
48431: PUSH
48432: LD_INT 2
48434: NEG
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 0
48442: PUSH
48443: LD_INT 2
48445: NEG
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 1
48453: PUSH
48454: LD_INT 1
48456: NEG
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 1
48464: PUSH
48465: LD_INT 2
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: LD_INT 0
48474: PUSH
48475: LD_INT 2
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: LD_INT 1
48484: NEG
48485: PUSH
48486: LD_INT 1
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 1
48495: PUSH
48496: LD_INT 3
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 0
48505: PUSH
48506: LD_INT 3
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: LD_INT 1
48515: NEG
48516: PUSH
48517: LD_INT 2
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48542: LD_ADDR_VAR 0 12
48546: PUSH
48547: LD_INT 0
48549: PUSH
48550: LD_INT 0
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: LD_INT 0
48559: PUSH
48560: LD_INT 1
48562: NEG
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 1
48570: PUSH
48571: LD_INT 0
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 1
48580: PUSH
48581: LD_INT 1
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 0
48590: PUSH
48591: LD_INT 1
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 1
48600: NEG
48601: PUSH
48602: LD_INT 0
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 1
48611: NEG
48612: PUSH
48613: LD_INT 1
48615: NEG
48616: PUSH
48617: EMPTY
48618: LIST
48619: LIST
48620: PUSH
48621: LD_INT 1
48623: PUSH
48624: LD_INT 1
48626: NEG
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: PUSH
48632: LD_INT 2
48634: PUSH
48635: LD_INT 0
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: LD_INT 2
48644: PUSH
48645: LD_INT 1
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 1
48654: NEG
48655: PUSH
48656: LD_INT 1
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 2
48665: NEG
48666: PUSH
48667: LD_INT 0
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: LD_INT 2
48676: NEG
48677: PUSH
48678: LD_INT 1
48680: NEG
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: LD_INT 2
48688: NEG
48689: PUSH
48690: LD_INT 1
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: LD_INT 3
48699: NEG
48700: PUSH
48701: LD_INT 0
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_INT 3
48710: NEG
48711: PUSH
48712: LD_INT 1
48714: NEG
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: LIST
48724: LIST
48725: LIST
48726: LIST
48727: LIST
48728: LIST
48729: LIST
48730: LIST
48731: LIST
48732: LIST
48733: LIST
48734: LIST
48735: LIST
48736: LIST
48737: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48738: LD_ADDR_VAR 0 13
48742: PUSH
48743: LD_INT 0
48745: PUSH
48746: LD_INT 0
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 0
48755: PUSH
48756: LD_INT 1
48758: NEG
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 1
48766: PUSH
48767: LD_INT 0
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 1
48776: PUSH
48777: LD_INT 1
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 0
48786: PUSH
48787: LD_INT 1
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 1
48796: NEG
48797: PUSH
48798: LD_INT 0
48800: PUSH
48801: EMPTY
48802: LIST
48803: LIST
48804: PUSH
48805: LD_INT 1
48807: NEG
48808: PUSH
48809: LD_INT 1
48811: NEG
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 1
48819: NEG
48820: PUSH
48821: LD_INT 2
48823: NEG
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 2
48831: PUSH
48832: LD_INT 1
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 2
48841: PUSH
48842: LD_INT 2
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 1
48851: PUSH
48852: LD_INT 2
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: LD_INT 2
48861: NEG
48862: PUSH
48863: LD_INT 1
48865: NEG
48866: PUSH
48867: EMPTY
48868: LIST
48869: LIST
48870: PUSH
48871: LD_INT 2
48873: NEG
48874: PUSH
48875: LD_INT 2
48877: NEG
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 2
48885: NEG
48886: PUSH
48887: LD_INT 3
48889: NEG
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 3
48897: NEG
48898: PUSH
48899: LD_INT 2
48901: NEG
48902: PUSH
48903: EMPTY
48904: LIST
48905: LIST
48906: PUSH
48907: LD_INT 3
48909: NEG
48910: PUSH
48911: LD_INT 3
48913: NEG
48914: PUSH
48915: EMPTY
48916: LIST
48917: LIST
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48937: LD_ADDR_VAR 0 14
48941: PUSH
48942: LD_INT 0
48944: PUSH
48945: LD_INT 0
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 0
48954: PUSH
48955: LD_INT 1
48957: NEG
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 1
48965: PUSH
48966: LD_INT 0
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 1
48975: PUSH
48976: LD_INT 1
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 0
48985: PUSH
48986: LD_INT 1
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 1
48995: NEG
48996: PUSH
48997: LD_INT 0
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: LD_INT 1
49006: NEG
49007: PUSH
49008: LD_INT 1
49010: NEG
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 1
49018: NEG
49019: PUSH
49020: LD_INT 2
49022: NEG
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 0
49030: PUSH
49031: LD_INT 2
49033: NEG
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 1
49041: PUSH
49042: LD_INT 1
49044: NEG
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PUSH
49050: LD_INT 1
49052: PUSH
49053: LD_INT 2
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 0
49062: PUSH
49063: LD_INT 2
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 1
49072: NEG
49073: PUSH
49074: LD_INT 1
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 1
49083: NEG
49084: PUSH
49085: LD_INT 3
49087: NEG
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 0
49095: PUSH
49096: LD_INT 3
49098: NEG
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: LD_INT 1
49106: PUSH
49107: LD_INT 2
49109: NEG
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49133: LD_ADDR_VAR 0 15
49137: PUSH
49138: LD_INT 0
49140: PUSH
49141: LD_INT 0
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PUSH
49148: LD_INT 0
49150: PUSH
49151: LD_INT 1
49153: NEG
49154: PUSH
49155: EMPTY
49156: LIST
49157: LIST
49158: PUSH
49159: LD_INT 1
49161: PUSH
49162: LD_INT 0
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: PUSH
49169: LD_INT 1
49171: PUSH
49172: LD_INT 1
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: PUSH
49179: LD_INT 0
49181: PUSH
49182: LD_INT 1
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: LD_INT 1
49191: NEG
49192: PUSH
49193: LD_INT 0
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 1
49202: NEG
49203: PUSH
49204: LD_INT 1
49206: NEG
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: LD_INT 1
49214: PUSH
49215: LD_INT 1
49217: NEG
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 2
49225: PUSH
49226: LD_INT 0
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 2
49235: PUSH
49236: LD_INT 1
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: PUSH
49243: LD_INT 1
49245: NEG
49246: PUSH
49247: LD_INT 1
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 2
49256: NEG
49257: PUSH
49258: LD_INT 0
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: PUSH
49265: LD_INT 2
49267: NEG
49268: PUSH
49269: LD_INT 1
49271: NEG
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: LD_INT 2
49279: PUSH
49280: LD_INT 1
49282: NEG
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 3
49290: PUSH
49291: LD_INT 0
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 3
49300: PUSH
49301: LD_INT 1
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: LIST
49323: LIST
49324: LIST
49325: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49326: LD_ADDR_VAR 0 16
49330: PUSH
49331: LD_INT 0
49333: PUSH
49334: LD_INT 0
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: LD_INT 0
49343: PUSH
49344: LD_INT 1
49346: NEG
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: LD_INT 1
49354: PUSH
49355: LD_INT 0
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 1
49364: PUSH
49365: LD_INT 1
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: LD_INT 0
49374: PUSH
49375: LD_INT 1
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 1
49384: NEG
49385: PUSH
49386: LD_INT 0
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 1
49395: NEG
49396: PUSH
49397: LD_INT 1
49399: NEG
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PUSH
49405: LD_INT 1
49407: NEG
49408: PUSH
49409: LD_INT 2
49411: NEG
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 2
49419: PUSH
49420: LD_INT 1
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 2
49429: PUSH
49430: LD_INT 2
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 1
49439: PUSH
49440: LD_INT 2
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: PUSH
49447: LD_INT 2
49449: NEG
49450: PUSH
49451: LD_INT 1
49453: NEG
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 2
49461: NEG
49462: PUSH
49463: LD_INT 2
49465: NEG
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 3
49473: PUSH
49474: LD_INT 2
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 3
49483: PUSH
49484: LD_INT 3
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 2
49493: PUSH
49494: LD_INT 3
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: LIST
49516: LIST
49517: LIST
49518: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49519: LD_ADDR_VAR 0 17
49523: PUSH
49524: LD_INT 0
49526: PUSH
49527: LD_INT 0
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 0
49536: PUSH
49537: LD_INT 1
49539: NEG
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 1
49547: PUSH
49548: LD_INT 0
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 1
49557: PUSH
49558: LD_INT 1
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 0
49567: PUSH
49568: LD_INT 1
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 1
49577: NEG
49578: PUSH
49579: LD_INT 0
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 1
49588: NEG
49589: PUSH
49590: LD_INT 1
49592: NEG
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: LD_INT 1
49600: NEG
49601: PUSH
49602: LD_INT 2
49604: NEG
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 0
49612: PUSH
49613: LD_INT 2
49615: NEG
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 1
49623: PUSH
49624: LD_INT 1
49626: NEG
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 2
49634: PUSH
49635: LD_INT 0
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 2
49644: PUSH
49645: LD_INT 1
49647: PUSH
49648: EMPTY
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 2
49654: PUSH
49655: LD_INT 2
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 1
49664: PUSH
49665: LD_INT 2
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 0
49674: PUSH
49675: LD_INT 2
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 1
49684: NEG
49685: PUSH
49686: LD_INT 1
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 2
49695: NEG
49696: PUSH
49697: LD_INT 0
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 2
49706: NEG
49707: PUSH
49708: LD_INT 1
49710: NEG
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 2
49718: NEG
49719: PUSH
49720: LD_INT 2
49722: NEG
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: LIST
49732: LIST
49733: LIST
49734: LIST
49735: LIST
49736: LIST
49737: LIST
49738: LIST
49739: LIST
49740: LIST
49741: LIST
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49749: LD_ADDR_VAR 0 18
49753: PUSH
49754: LD_INT 0
49756: PUSH
49757: LD_INT 0
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 0
49766: PUSH
49767: LD_INT 1
49769: NEG
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 1
49777: PUSH
49778: LD_INT 0
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 1
49787: PUSH
49788: LD_INT 1
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 0
49797: PUSH
49798: LD_INT 1
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 1
49807: NEG
49808: PUSH
49809: LD_INT 0
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 1
49818: NEG
49819: PUSH
49820: LD_INT 1
49822: NEG
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 1
49830: NEG
49831: PUSH
49832: LD_INT 2
49834: NEG
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 0
49842: PUSH
49843: LD_INT 2
49845: NEG
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 1
49853: PUSH
49854: LD_INT 1
49856: NEG
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 2
49864: PUSH
49865: LD_INT 0
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 2
49874: PUSH
49875: LD_INT 1
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 2
49884: PUSH
49885: LD_INT 2
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 1
49894: PUSH
49895: LD_INT 2
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 0
49904: PUSH
49905: LD_INT 2
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: LD_INT 1
49914: NEG
49915: PUSH
49916: LD_INT 1
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 2
49925: NEG
49926: PUSH
49927: LD_INT 0
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: LD_INT 2
49936: NEG
49937: PUSH
49938: LD_INT 1
49940: NEG
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 2
49948: NEG
49949: PUSH
49950: LD_INT 2
49952: NEG
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49979: LD_ADDR_VAR 0 19
49983: PUSH
49984: LD_INT 0
49986: PUSH
49987: LD_INT 0
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 0
49996: PUSH
49997: LD_INT 1
49999: NEG
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: PUSH
50005: LD_INT 1
50007: PUSH
50008: LD_INT 0
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: PUSH
50015: LD_INT 1
50017: PUSH
50018: LD_INT 1
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: LD_INT 0
50027: PUSH
50028: LD_INT 1
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 1
50037: NEG
50038: PUSH
50039: LD_INT 0
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 1
50048: NEG
50049: PUSH
50050: LD_INT 1
50052: NEG
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 1
50060: NEG
50061: PUSH
50062: LD_INT 2
50064: NEG
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 0
50072: PUSH
50073: LD_INT 2
50075: NEG
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 1
50083: PUSH
50084: LD_INT 1
50086: NEG
50087: PUSH
50088: EMPTY
50089: LIST
50090: LIST
50091: PUSH
50092: LD_INT 2
50094: PUSH
50095: LD_INT 0
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 2
50104: PUSH
50105: LD_INT 1
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 2
50114: PUSH
50115: LD_INT 2
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: LD_INT 1
50124: PUSH
50125: LD_INT 2
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: LD_INT 0
50134: PUSH
50135: LD_INT 2
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: PUSH
50142: LD_INT 1
50144: NEG
50145: PUSH
50146: LD_INT 1
50148: PUSH
50149: EMPTY
50150: LIST
50151: LIST
50152: PUSH
50153: LD_INT 2
50155: NEG
50156: PUSH
50157: LD_INT 0
50159: PUSH
50160: EMPTY
50161: LIST
50162: LIST
50163: PUSH
50164: LD_INT 2
50166: NEG
50167: PUSH
50168: LD_INT 1
50170: NEG
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: PUSH
50176: LD_INT 2
50178: NEG
50179: PUSH
50180: LD_INT 2
50182: NEG
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50209: LD_ADDR_VAR 0 20
50213: PUSH
50214: LD_INT 0
50216: PUSH
50217: LD_INT 0
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 0
50226: PUSH
50227: LD_INT 1
50229: NEG
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 1
50237: PUSH
50238: LD_INT 0
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 1
50247: PUSH
50248: LD_INT 1
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 0
50257: PUSH
50258: LD_INT 1
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 1
50267: NEG
50268: PUSH
50269: LD_INT 0
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 1
50278: NEG
50279: PUSH
50280: LD_INT 1
50282: NEG
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 1
50290: NEG
50291: PUSH
50292: LD_INT 2
50294: NEG
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 0
50302: PUSH
50303: LD_INT 2
50305: NEG
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 1
50313: PUSH
50314: LD_INT 1
50316: NEG
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 2
50324: PUSH
50325: LD_INT 0
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 2
50334: PUSH
50335: LD_INT 1
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 2
50344: PUSH
50345: LD_INT 2
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 1
50354: PUSH
50355: LD_INT 2
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 0
50364: PUSH
50365: LD_INT 2
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 1
50374: NEG
50375: PUSH
50376: LD_INT 1
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 2
50385: NEG
50386: PUSH
50387: LD_INT 0
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: LD_INT 2
50396: NEG
50397: PUSH
50398: LD_INT 1
50400: NEG
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: LD_INT 2
50408: NEG
50409: PUSH
50410: LD_INT 2
50412: NEG
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50439: LD_ADDR_VAR 0 21
50443: PUSH
50444: LD_INT 0
50446: PUSH
50447: LD_INT 0
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 0
50456: PUSH
50457: LD_INT 1
50459: NEG
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: LD_INT 1
50467: PUSH
50468: LD_INT 0
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: LD_INT 1
50477: PUSH
50478: LD_INT 1
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 0
50487: PUSH
50488: LD_INT 1
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 1
50497: NEG
50498: PUSH
50499: LD_INT 0
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: LD_INT 1
50508: NEG
50509: PUSH
50510: LD_INT 1
50512: NEG
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: LD_INT 1
50520: NEG
50521: PUSH
50522: LD_INT 2
50524: NEG
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 0
50532: PUSH
50533: LD_INT 2
50535: NEG
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 1
50543: PUSH
50544: LD_INT 1
50546: NEG
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 2
50554: PUSH
50555: LD_INT 0
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 2
50564: PUSH
50565: LD_INT 1
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 2
50574: PUSH
50575: LD_INT 2
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 1
50584: PUSH
50585: LD_INT 2
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 0
50594: PUSH
50595: LD_INT 2
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 1
50604: NEG
50605: PUSH
50606: LD_INT 1
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: LD_INT 2
50615: NEG
50616: PUSH
50617: LD_INT 0
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 2
50626: NEG
50627: PUSH
50628: LD_INT 1
50630: NEG
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 2
50638: NEG
50639: PUSH
50640: LD_INT 2
50642: NEG
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: LIST
50652: LIST
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: LIST
50668: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50669: LD_ADDR_VAR 0 22
50673: PUSH
50674: LD_INT 0
50676: PUSH
50677: LD_INT 0
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: LD_INT 0
50686: PUSH
50687: LD_INT 1
50689: NEG
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: PUSH
50695: LD_INT 1
50697: PUSH
50698: LD_INT 0
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 1
50707: PUSH
50708: LD_INT 1
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: LD_INT 0
50717: PUSH
50718: LD_INT 1
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: PUSH
50725: LD_INT 1
50727: NEG
50728: PUSH
50729: LD_INT 0
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: PUSH
50736: LD_INT 1
50738: NEG
50739: PUSH
50740: LD_INT 1
50742: NEG
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: LD_INT 1
50750: NEG
50751: PUSH
50752: LD_INT 2
50754: NEG
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: PUSH
50760: LD_INT 0
50762: PUSH
50763: LD_INT 2
50765: NEG
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: LD_INT 1
50773: PUSH
50774: LD_INT 1
50776: NEG
50777: PUSH
50778: EMPTY
50779: LIST
50780: LIST
50781: PUSH
50782: LD_INT 2
50784: PUSH
50785: LD_INT 0
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 2
50794: PUSH
50795: LD_INT 1
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: LD_INT 2
50804: PUSH
50805: LD_INT 2
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: LD_INT 1
50814: PUSH
50815: LD_INT 2
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 0
50824: PUSH
50825: LD_INT 2
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 1
50834: NEG
50835: PUSH
50836: LD_INT 1
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 2
50845: NEG
50846: PUSH
50847: LD_INT 0
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PUSH
50854: LD_INT 2
50856: NEG
50857: PUSH
50858: LD_INT 1
50860: NEG
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 2
50868: NEG
50869: PUSH
50870: LD_INT 2
50872: NEG
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: EMPTY
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50899: LD_ADDR_VAR 0 23
50903: PUSH
50904: LD_INT 0
50906: PUSH
50907: LD_INT 0
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 0
50916: PUSH
50917: LD_INT 1
50919: NEG
50920: PUSH
50921: EMPTY
50922: LIST
50923: LIST
50924: PUSH
50925: LD_INT 1
50927: PUSH
50928: LD_INT 0
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 1
50937: PUSH
50938: LD_INT 1
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 0
50947: PUSH
50948: LD_INT 1
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 1
50957: NEG
50958: PUSH
50959: LD_INT 0
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 1
50968: NEG
50969: PUSH
50970: LD_INT 1
50972: NEG
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: LD_INT 1
50980: NEG
50981: PUSH
50982: LD_INT 2
50984: NEG
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 0
50992: PUSH
50993: LD_INT 2
50995: NEG
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 1
51003: PUSH
51004: LD_INT 1
51006: NEG
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 2
51014: PUSH
51015: LD_INT 0
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 2
51024: PUSH
51025: LD_INT 1
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 2
51034: PUSH
51035: LD_INT 2
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 1
51044: PUSH
51045: LD_INT 2
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 0
51054: PUSH
51055: LD_INT 2
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 1
51064: NEG
51065: PUSH
51066: LD_INT 1
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 2
51075: NEG
51076: PUSH
51077: LD_INT 0
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 2
51086: NEG
51087: PUSH
51088: LD_INT 1
51090: NEG
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 2
51098: NEG
51099: PUSH
51100: LD_INT 2
51102: NEG
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 2
51110: NEG
51111: PUSH
51112: LD_INT 3
51114: NEG
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 1
51122: NEG
51123: PUSH
51124: LD_INT 3
51126: NEG
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 1
51134: PUSH
51135: LD_INT 2
51137: NEG
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 2
51145: PUSH
51146: LD_INT 1
51148: NEG
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
51179: LD_ADDR_VAR 0 24
51183: PUSH
51184: LD_INT 0
51186: PUSH
51187: LD_INT 0
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: LD_INT 0
51196: PUSH
51197: LD_INT 1
51199: NEG
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 1
51207: PUSH
51208: LD_INT 0
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 1
51217: PUSH
51218: LD_INT 1
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 0
51227: PUSH
51228: LD_INT 1
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 1
51237: NEG
51238: PUSH
51239: LD_INT 0
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 1
51248: NEG
51249: PUSH
51250: LD_INT 1
51252: NEG
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 1
51260: NEG
51261: PUSH
51262: LD_INT 2
51264: NEG
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 0
51272: PUSH
51273: LD_INT 2
51275: NEG
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 1
51283: PUSH
51284: LD_INT 1
51286: NEG
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 2
51294: PUSH
51295: LD_INT 0
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 2
51304: PUSH
51305: LD_INT 1
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: PUSH
51312: LD_INT 2
51314: PUSH
51315: LD_INT 2
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 1
51324: PUSH
51325: LD_INT 2
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 0
51334: PUSH
51335: LD_INT 2
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 1
51344: NEG
51345: PUSH
51346: LD_INT 1
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 2
51355: NEG
51356: PUSH
51357: LD_INT 0
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: LD_INT 2
51366: NEG
51367: PUSH
51368: LD_INT 1
51370: NEG
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 2
51378: NEG
51379: PUSH
51380: LD_INT 2
51382: NEG
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: LD_INT 1
51390: PUSH
51391: LD_INT 2
51393: NEG
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 2
51401: PUSH
51402: LD_INT 1
51404: NEG
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 3
51412: PUSH
51413: LD_INT 1
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: LD_INT 3
51422: PUSH
51423: LD_INT 2
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: LIST
51442: LIST
51443: LIST
51444: LIST
51445: LIST
51446: LIST
51447: LIST
51448: LIST
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
51455: LD_ADDR_VAR 0 25
51459: PUSH
51460: LD_INT 0
51462: PUSH
51463: LD_INT 0
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: PUSH
51470: LD_INT 0
51472: PUSH
51473: LD_INT 1
51475: NEG
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 1
51483: PUSH
51484: LD_INT 0
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 1
51493: PUSH
51494: LD_INT 1
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 0
51503: PUSH
51504: LD_INT 1
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: LD_INT 1
51513: NEG
51514: PUSH
51515: LD_INT 0
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 1
51524: NEG
51525: PUSH
51526: LD_INT 1
51528: NEG
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 1
51536: NEG
51537: PUSH
51538: LD_INT 2
51540: NEG
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 0
51548: PUSH
51549: LD_INT 2
51551: NEG
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_INT 1
51559: PUSH
51560: LD_INT 1
51562: NEG
51563: PUSH
51564: EMPTY
51565: LIST
51566: LIST
51567: PUSH
51568: LD_INT 2
51570: PUSH
51571: LD_INT 0
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 2
51580: PUSH
51581: LD_INT 1
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 2
51590: PUSH
51591: LD_INT 2
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 1
51600: PUSH
51601: LD_INT 2
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: LD_INT 0
51610: PUSH
51611: LD_INT 2
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 1
51620: NEG
51621: PUSH
51622: LD_INT 1
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: LD_INT 2
51631: NEG
51632: PUSH
51633: LD_INT 0
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 2
51642: NEG
51643: PUSH
51644: LD_INT 1
51646: NEG
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 2
51654: NEG
51655: PUSH
51656: LD_INT 2
51658: NEG
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 3
51666: PUSH
51667: LD_INT 1
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 3
51676: PUSH
51677: LD_INT 2
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 2
51686: PUSH
51687: LD_INT 3
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 1
51696: PUSH
51697: LD_INT 3
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: LIST
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51729: LD_ADDR_VAR 0 26
51733: PUSH
51734: LD_INT 0
51736: PUSH
51737: LD_INT 0
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 0
51746: PUSH
51747: LD_INT 1
51749: NEG
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 1
51757: PUSH
51758: LD_INT 0
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 1
51767: PUSH
51768: LD_INT 1
51770: PUSH
51771: EMPTY
51772: LIST
51773: LIST
51774: PUSH
51775: LD_INT 0
51777: PUSH
51778: LD_INT 1
51780: PUSH
51781: EMPTY
51782: LIST
51783: LIST
51784: PUSH
51785: LD_INT 1
51787: NEG
51788: PUSH
51789: LD_INT 0
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: LD_INT 1
51798: NEG
51799: PUSH
51800: LD_INT 1
51802: NEG
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 1
51810: NEG
51811: PUSH
51812: LD_INT 2
51814: NEG
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 0
51822: PUSH
51823: LD_INT 2
51825: NEG
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 1
51833: PUSH
51834: LD_INT 1
51836: NEG
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: PUSH
51842: LD_INT 2
51844: PUSH
51845: LD_INT 0
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 2
51854: PUSH
51855: LD_INT 1
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 2
51864: PUSH
51865: LD_INT 2
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: LD_INT 1
51874: PUSH
51875: LD_INT 2
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: LD_INT 0
51884: PUSH
51885: LD_INT 2
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 1
51894: NEG
51895: PUSH
51896: LD_INT 1
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 2
51905: NEG
51906: PUSH
51907: LD_INT 0
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 2
51916: NEG
51917: PUSH
51918: LD_INT 1
51920: NEG
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 2
51928: NEG
51929: PUSH
51930: LD_INT 2
51932: NEG
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 2
51940: PUSH
51941: LD_INT 3
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 1
51950: PUSH
51951: LD_INT 3
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 1
51960: NEG
51961: PUSH
51962: LD_INT 2
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 2
51971: NEG
51972: PUSH
51973: LD_INT 1
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52005: LD_ADDR_VAR 0 27
52009: PUSH
52010: LD_INT 0
52012: PUSH
52013: LD_INT 0
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 0
52022: PUSH
52023: LD_INT 1
52025: NEG
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: LD_INT 1
52033: PUSH
52034: LD_INT 0
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 1
52043: PUSH
52044: LD_INT 1
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: LD_INT 0
52053: PUSH
52054: LD_INT 1
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: LD_INT 1
52063: NEG
52064: PUSH
52065: LD_INT 0
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 1
52074: NEG
52075: PUSH
52076: LD_INT 1
52078: NEG
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 1
52086: NEG
52087: PUSH
52088: LD_INT 2
52090: NEG
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 0
52098: PUSH
52099: LD_INT 2
52101: NEG
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PUSH
52107: LD_INT 1
52109: PUSH
52110: LD_INT 1
52112: NEG
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 2
52120: PUSH
52121: LD_INT 0
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 2
52130: PUSH
52131: LD_INT 1
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 2
52140: PUSH
52141: LD_INT 2
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 1
52150: PUSH
52151: LD_INT 2
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 0
52160: PUSH
52161: LD_INT 2
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 1
52170: NEG
52171: PUSH
52172: LD_INT 1
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 2
52181: NEG
52182: PUSH
52183: LD_INT 0
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 2
52192: NEG
52193: PUSH
52194: LD_INT 1
52196: NEG
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 2
52204: NEG
52205: PUSH
52206: LD_INT 2
52208: NEG
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 1
52216: NEG
52217: PUSH
52218: LD_INT 2
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 2
52227: NEG
52228: PUSH
52229: LD_INT 1
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 3
52238: NEG
52239: PUSH
52240: LD_INT 1
52242: NEG
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 3
52250: NEG
52251: PUSH
52252: LD_INT 2
52254: NEG
52255: PUSH
52256: EMPTY
52257: LIST
52258: LIST
52259: PUSH
52260: EMPTY
52261: LIST
52262: LIST
52263: LIST
52264: LIST
52265: LIST
52266: LIST
52267: LIST
52268: LIST
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: LIST
52276: LIST
52277: LIST
52278: LIST
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52285: LD_ADDR_VAR 0 28
52289: PUSH
52290: LD_INT 0
52292: PUSH
52293: LD_INT 0
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 0
52302: PUSH
52303: LD_INT 1
52305: NEG
52306: PUSH
52307: EMPTY
52308: LIST
52309: LIST
52310: PUSH
52311: LD_INT 1
52313: PUSH
52314: LD_INT 0
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 1
52323: PUSH
52324: LD_INT 1
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 0
52333: PUSH
52334: LD_INT 1
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: PUSH
52341: LD_INT 1
52343: NEG
52344: PUSH
52345: LD_INT 0
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 1
52354: NEG
52355: PUSH
52356: LD_INT 1
52358: NEG
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 1
52366: NEG
52367: PUSH
52368: LD_INT 2
52370: NEG
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 0
52378: PUSH
52379: LD_INT 2
52381: NEG
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 1
52389: PUSH
52390: LD_INT 1
52392: NEG
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 2
52400: PUSH
52401: LD_INT 0
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 2
52410: PUSH
52411: LD_INT 1
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 2
52420: PUSH
52421: LD_INT 2
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 1
52430: PUSH
52431: LD_INT 2
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 0
52440: PUSH
52441: LD_INT 2
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 1
52450: NEG
52451: PUSH
52452: LD_INT 1
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: PUSH
52459: LD_INT 2
52461: NEG
52462: PUSH
52463: LD_INT 0
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 2
52472: NEG
52473: PUSH
52474: LD_INT 1
52476: NEG
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: PUSH
52482: LD_INT 2
52484: NEG
52485: PUSH
52486: LD_INT 2
52488: NEG
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 2
52496: NEG
52497: PUSH
52498: LD_INT 3
52500: NEG
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: LD_INT 1
52508: NEG
52509: PUSH
52510: LD_INT 3
52512: NEG
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 3
52520: NEG
52521: PUSH
52522: LD_INT 1
52524: NEG
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 3
52532: NEG
52533: PUSH
52534: LD_INT 2
52536: NEG
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: LIST
52546: LIST
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52567: LD_ADDR_VAR 0 29
52571: PUSH
52572: LD_INT 0
52574: PUSH
52575: LD_INT 0
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 0
52584: PUSH
52585: LD_INT 1
52587: NEG
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: LD_INT 1
52595: PUSH
52596: LD_INT 0
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 1
52605: PUSH
52606: LD_INT 1
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 0
52615: PUSH
52616: LD_INT 1
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 1
52625: NEG
52626: PUSH
52627: LD_INT 0
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 1
52636: NEG
52637: PUSH
52638: LD_INT 1
52640: NEG
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 1
52648: NEG
52649: PUSH
52650: LD_INT 2
52652: NEG
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 0
52660: PUSH
52661: LD_INT 2
52663: NEG
52664: PUSH
52665: EMPTY
52666: LIST
52667: LIST
52668: PUSH
52669: LD_INT 1
52671: PUSH
52672: LD_INT 1
52674: NEG
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 2
52682: PUSH
52683: LD_INT 0
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 2
52692: PUSH
52693: LD_INT 1
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_INT 1
52702: PUSH
52703: LD_INT 2
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 0
52712: PUSH
52713: LD_INT 2
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: LD_INT 1
52722: NEG
52723: PUSH
52724: LD_INT 1
52726: PUSH
52727: EMPTY
52728: LIST
52729: LIST
52730: PUSH
52731: LD_INT 2
52733: NEG
52734: PUSH
52735: LD_INT 1
52737: NEG
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 2
52745: NEG
52746: PUSH
52747: LD_INT 2
52749: NEG
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 2
52757: NEG
52758: PUSH
52759: LD_INT 3
52761: NEG
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 2
52769: PUSH
52770: LD_INT 1
52772: NEG
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 3
52780: PUSH
52781: LD_INT 1
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 1
52790: PUSH
52791: LD_INT 3
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PUSH
52798: LD_INT 1
52800: NEG
52801: PUSH
52802: LD_INT 2
52804: PUSH
52805: EMPTY
52806: LIST
52807: LIST
52808: PUSH
52809: LD_INT 3
52811: NEG
52812: PUSH
52813: LD_INT 2
52815: NEG
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: LIST
52832: LIST
52833: LIST
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52846: LD_ADDR_VAR 0 30
52850: PUSH
52851: LD_INT 0
52853: PUSH
52854: LD_INT 0
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 0
52863: PUSH
52864: LD_INT 1
52866: NEG
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 1
52874: PUSH
52875: LD_INT 0
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 1
52884: PUSH
52885: LD_INT 1
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 0
52894: PUSH
52895: LD_INT 1
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 1
52904: NEG
52905: PUSH
52906: LD_INT 0
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 1
52915: NEG
52916: PUSH
52917: LD_INT 1
52919: NEG
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 1
52927: NEG
52928: PUSH
52929: LD_INT 2
52931: NEG
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 0
52939: PUSH
52940: LD_INT 2
52942: NEG
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 1
52950: PUSH
52951: LD_INT 1
52953: NEG
52954: PUSH
52955: EMPTY
52956: LIST
52957: LIST
52958: PUSH
52959: LD_INT 2
52961: PUSH
52962: LD_INT 0
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 2
52971: PUSH
52972: LD_INT 1
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 2
52981: PUSH
52982: LD_INT 2
52984: PUSH
52985: EMPTY
52986: LIST
52987: LIST
52988: PUSH
52989: LD_INT 1
52991: PUSH
52992: LD_INT 2
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: LD_INT 1
53001: NEG
53002: PUSH
53003: LD_INT 1
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 2
53012: NEG
53013: PUSH
53014: LD_INT 0
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: PUSH
53021: LD_INT 2
53023: NEG
53024: PUSH
53025: LD_INT 1
53027: NEG
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 1
53035: NEG
53036: PUSH
53037: LD_INT 3
53039: NEG
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 1
53047: PUSH
53048: LD_INT 2
53050: NEG
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 3
53058: PUSH
53059: LD_INT 2
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 2
53068: PUSH
53069: LD_INT 3
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 2
53078: NEG
53079: PUSH
53080: LD_INT 1
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: PUSH
53087: LD_INT 3
53089: NEG
53090: PUSH
53091: LD_INT 1
53093: NEG
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: LIST
53120: LIST
53121: LIST
53122: LIST
53123: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53124: LD_ADDR_VAR 0 31
53128: PUSH
53129: LD_INT 0
53131: PUSH
53132: LD_INT 0
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 0
53141: PUSH
53142: LD_INT 1
53144: NEG
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: LD_INT 1
53152: PUSH
53153: LD_INT 0
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: PUSH
53160: LD_INT 1
53162: PUSH
53163: LD_INT 1
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: LD_INT 0
53172: PUSH
53173: LD_INT 1
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: LD_INT 1
53182: NEG
53183: PUSH
53184: LD_INT 0
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: LD_INT 1
53193: NEG
53194: PUSH
53195: LD_INT 1
53197: NEG
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 1
53205: NEG
53206: PUSH
53207: LD_INT 2
53209: NEG
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 1
53217: PUSH
53218: LD_INT 1
53220: NEG
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: LD_INT 2
53228: PUSH
53229: LD_INT 0
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: LD_INT 2
53238: PUSH
53239: LD_INT 1
53241: PUSH
53242: EMPTY
53243: LIST
53244: LIST
53245: PUSH
53246: LD_INT 2
53248: PUSH
53249: LD_INT 2
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 1
53258: PUSH
53259: LD_INT 2
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: PUSH
53266: LD_INT 0
53268: PUSH
53269: LD_INT 2
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: LD_INT 1
53278: NEG
53279: PUSH
53280: LD_INT 1
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 2
53289: NEG
53290: PUSH
53291: LD_INT 1
53293: NEG
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: LD_INT 2
53301: NEG
53302: PUSH
53303: LD_INT 2
53305: NEG
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 2
53313: NEG
53314: PUSH
53315: LD_INT 3
53317: NEG
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 2
53325: PUSH
53326: LD_INT 1
53328: NEG
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: LD_INT 3
53336: PUSH
53337: LD_INT 1
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 1
53346: PUSH
53347: LD_INT 3
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 1
53356: NEG
53357: PUSH
53358: LD_INT 2
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: PUSH
53365: LD_INT 3
53367: NEG
53368: PUSH
53369: LD_INT 2
53371: NEG
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: LIST
53381: LIST
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: LIST
53387: LIST
53388: LIST
53389: LIST
53390: LIST
53391: LIST
53392: LIST
53393: LIST
53394: LIST
53395: LIST
53396: LIST
53397: LIST
53398: LIST
53399: LIST
53400: LIST
53401: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53402: LD_ADDR_VAR 0 32
53406: PUSH
53407: LD_INT 0
53409: PUSH
53410: LD_INT 0
53412: PUSH
53413: EMPTY
53414: LIST
53415: LIST
53416: PUSH
53417: LD_INT 0
53419: PUSH
53420: LD_INT 1
53422: NEG
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 1
53430: PUSH
53431: LD_INT 0
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 1
53440: PUSH
53441: LD_INT 1
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 0
53450: PUSH
53451: LD_INT 1
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 1
53460: NEG
53461: PUSH
53462: LD_INT 0
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: LD_INT 1
53471: NEG
53472: PUSH
53473: LD_INT 1
53475: NEG
53476: PUSH
53477: EMPTY
53478: LIST
53479: LIST
53480: PUSH
53481: LD_INT 1
53483: NEG
53484: PUSH
53485: LD_INT 2
53487: NEG
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 0
53495: PUSH
53496: LD_INT 2
53498: NEG
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 1
53506: PUSH
53507: LD_INT 1
53509: NEG
53510: PUSH
53511: EMPTY
53512: LIST
53513: LIST
53514: PUSH
53515: LD_INT 2
53517: PUSH
53518: LD_INT 1
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 2
53527: PUSH
53528: LD_INT 2
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 1
53537: PUSH
53538: LD_INT 2
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: LD_INT 0
53547: PUSH
53548: LD_INT 2
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: LD_INT 1
53557: NEG
53558: PUSH
53559: LD_INT 1
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 2
53568: NEG
53569: PUSH
53570: LD_INT 0
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 2
53579: NEG
53580: PUSH
53581: LD_INT 1
53583: NEG
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 1
53591: NEG
53592: PUSH
53593: LD_INT 3
53595: NEG
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: LD_INT 1
53603: PUSH
53604: LD_INT 2
53606: NEG
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 3
53614: PUSH
53615: LD_INT 2
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 2
53624: PUSH
53625: LD_INT 3
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 2
53634: NEG
53635: PUSH
53636: LD_INT 1
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 3
53645: NEG
53646: PUSH
53647: LD_INT 1
53649: NEG
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: EMPTY
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53680: LD_ADDR_VAR 0 33
53684: PUSH
53685: LD_INT 0
53687: PUSH
53688: LD_INT 0
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 0
53697: PUSH
53698: LD_INT 1
53700: NEG
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 1
53708: PUSH
53709: LD_INT 0
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 1
53718: PUSH
53719: LD_INT 1
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 0
53728: PUSH
53729: LD_INT 1
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: PUSH
53736: LD_INT 1
53738: NEG
53739: PUSH
53740: LD_INT 0
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: LD_INT 1
53749: NEG
53750: PUSH
53751: LD_INT 1
53753: NEG
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 1
53761: NEG
53762: PUSH
53763: LD_INT 2
53765: NEG
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 1
53773: PUSH
53774: LD_INT 1
53776: NEG
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 2
53784: PUSH
53785: LD_INT 0
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 2
53794: PUSH
53795: LD_INT 1
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 1
53804: PUSH
53805: LD_INT 2
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 0
53814: PUSH
53815: LD_INT 2
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 1
53824: NEG
53825: PUSH
53826: LD_INT 1
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 2
53835: NEG
53836: PUSH
53837: LD_INT 0
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 2
53846: NEG
53847: PUSH
53848: LD_INT 1
53850: NEG
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 2
53858: NEG
53859: PUSH
53860: LD_INT 2
53862: NEG
53863: PUSH
53864: EMPTY
53865: LIST
53866: LIST
53867: PUSH
53868: LD_INT 2
53870: NEG
53871: PUSH
53872: LD_INT 3
53874: NEG
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: LD_INT 2
53882: PUSH
53883: LD_INT 1
53885: NEG
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 3
53893: PUSH
53894: LD_INT 1
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 1
53903: PUSH
53904: LD_INT 3
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 1
53913: NEG
53914: PUSH
53915: LD_INT 2
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 3
53924: NEG
53925: PUSH
53926: LD_INT 2
53928: NEG
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: LIST
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: LIST
53956: LIST
53957: LIST
53958: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53959: LD_ADDR_VAR 0 34
53963: PUSH
53964: LD_INT 0
53966: PUSH
53967: LD_INT 0
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 0
53976: PUSH
53977: LD_INT 1
53979: NEG
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 1
53987: PUSH
53988: LD_INT 0
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 1
53997: PUSH
53998: LD_INT 1
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 0
54007: PUSH
54008: LD_INT 1
54010: PUSH
54011: EMPTY
54012: LIST
54013: LIST
54014: PUSH
54015: LD_INT 1
54017: NEG
54018: PUSH
54019: LD_INT 0
54021: PUSH
54022: EMPTY
54023: LIST
54024: LIST
54025: PUSH
54026: LD_INT 1
54028: NEG
54029: PUSH
54030: LD_INT 1
54032: NEG
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: LD_INT 1
54040: NEG
54041: PUSH
54042: LD_INT 2
54044: NEG
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: PUSH
54050: LD_INT 0
54052: PUSH
54053: LD_INT 2
54055: NEG
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 1
54063: PUSH
54064: LD_INT 1
54066: NEG
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 2
54074: PUSH
54075: LD_INT 1
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 2
54084: PUSH
54085: LD_INT 2
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 1
54094: PUSH
54095: LD_INT 2
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 1
54104: NEG
54105: PUSH
54106: LD_INT 1
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 2
54115: NEG
54116: PUSH
54117: LD_INT 0
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: LD_INT 2
54126: NEG
54127: PUSH
54128: LD_INT 1
54130: NEG
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 2
54138: NEG
54139: PUSH
54140: LD_INT 2
54142: NEG
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 1
54150: NEG
54151: PUSH
54152: LD_INT 3
54154: NEG
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 1
54162: PUSH
54163: LD_INT 2
54165: NEG
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 3
54173: PUSH
54174: LD_INT 2
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: LD_INT 2
54183: PUSH
54184: LD_INT 3
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 2
54193: NEG
54194: PUSH
54195: LD_INT 1
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 3
54204: NEG
54205: PUSH
54206: LD_INT 1
54208: NEG
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: LIST
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54239: LD_ADDR_VAR 0 35
54243: PUSH
54244: LD_INT 0
54246: PUSH
54247: LD_INT 0
54249: PUSH
54250: EMPTY
54251: LIST
54252: LIST
54253: PUSH
54254: LD_INT 0
54256: PUSH
54257: LD_INT 1
54259: NEG
54260: PUSH
54261: EMPTY
54262: LIST
54263: LIST
54264: PUSH
54265: LD_INT 1
54267: PUSH
54268: LD_INT 0
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 1
54277: PUSH
54278: LD_INT 1
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 0
54287: PUSH
54288: LD_INT 1
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 1
54297: NEG
54298: PUSH
54299: LD_INT 0
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 1
54308: NEG
54309: PUSH
54310: LD_INT 1
54312: NEG
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: PUSH
54318: LD_INT 2
54320: PUSH
54321: LD_INT 1
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 2
54330: NEG
54331: PUSH
54332: LD_INT 1
54334: NEG
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54351: LD_ADDR_VAR 0 36
54355: PUSH
54356: LD_INT 0
54358: PUSH
54359: LD_INT 0
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 0
54368: PUSH
54369: LD_INT 1
54371: NEG
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 1
54379: PUSH
54380: LD_INT 0
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 1
54389: PUSH
54390: LD_INT 1
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 0
54399: PUSH
54400: LD_INT 1
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 1
54409: NEG
54410: PUSH
54411: LD_INT 0
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 1
54420: NEG
54421: PUSH
54422: LD_INT 1
54424: NEG
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 1
54432: NEG
54433: PUSH
54434: LD_INT 2
54436: NEG
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 1
54444: PUSH
54445: LD_INT 2
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: LIST
54456: LIST
54457: LIST
54458: LIST
54459: LIST
54460: LIST
54461: LIST
54462: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54463: LD_ADDR_VAR 0 37
54467: PUSH
54468: LD_INT 0
54470: PUSH
54471: LD_INT 0
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 0
54480: PUSH
54481: LD_INT 1
54483: NEG
54484: PUSH
54485: EMPTY
54486: LIST
54487: LIST
54488: PUSH
54489: LD_INT 1
54491: PUSH
54492: LD_INT 0
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 1
54501: PUSH
54502: LD_INT 1
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 0
54511: PUSH
54512: LD_INT 1
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 1
54521: NEG
54522: PUSH
54523: LD_INT 0
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 1
54532: NEG
54533: PUSH
54534: LD_INT 1
54536: NEG
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 1
54544: PUSH
54545: LD_INT 1
54547: NEG
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 1
54555: NEG
54556: PUSH
54557: LD_INT 1
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54575: LD_ADDR_VAR 0 38
54579: PUSH
54580: LD_INT 0
54582: PUSH
54583: LD_INT 0
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 0
54592: PUSH
54593: LD_INT 1
54595: NEG
54596: PUSH
54597: EMPTY
54598: LIST
54599: LIST
54600: PUSH
54601: LD_INT 1
54603: PUSH
54604: LD_INT 0
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 1
54613: PUSH
54614: LD_INT 1
54616: PUSH
54617: EMPTY
54618: LIST
54619: LIST
54620: PUSH
54621: LD_INT 0
54623: PUSH
54624: LD_INT 1
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 1
54633: NEG
54634: PUSH
54635: LD_INT 0
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 1
54644: NEG
54645: PUSH
54646: LD_INT 1
54648: NEG
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 2
54656: PUSH
54657: LD_INT 1
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 2
54666: NEG
54667: PUSH
54668: LD_INT 1
54670: NEG
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54687: LD_ADDR_VAR 0 39
54691: PUSH
54692: LD_INT 0
54694: PUSH
54695: LD_INT 0
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 0
54704: PUSH
54705: LD_INT 1
54707: NEG
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 1
54715: PUSH
54716: LD_INT 0
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 1
54725: PUSH
54726: LD_INT 1
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 0
54735: PUSH
54736: LD_INT 1
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 1
54745: NEG
54746: PUSH
54747: LD_INT 0
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 1
54756: NEG
54757: PUSH
54758: LD_INT 1
54760: NEG
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 1
54768: NEG
54769: PUSH
54770: LD_INT 2
54772: NEG
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 1
54780: PUSH
54781: LD_INT 2
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54799: LD_ADDR_VAR 0 40
54803: PUSH
54804: LD_INT 0
54806: PUSH
54807: LD_INT 0
54809: PUSH
54810: EMPTY
54811: LIST
54812: LIST
54813: PUSH
54814: LD_INT 0
54816: PUSH
54817: LD_INT 1
54819: NEG
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 1
54827: PUSH
54828: LD_INT 0
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 1
54837: PUSH
54838: LD_INT 1
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 0
54847: PUSH
54848: LD_INT 1
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 1
54857: NEG
54858: PUSH
54859: LD_INT 0
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 1
54868: NEG
54869: PUSH
54870: LD_INT 1
54872: NEG
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 1
54880: PUSH
54881: LD_INT 1
54883: NEG
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 1
54891: NEG
54892: PUSH
54893: LD_INT 1
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54911: LD_ADDR_VAR 0 41
54915: PUSH
54916: LD_INT 0
54918: PUSH
54919: LD_INT 0
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 0
54928: PUSH
54929: LD_INT 1
54931: NEG
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 1
54939: PUSH
54940: LD_INT 0
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 1
54949: PUSH
54950: LD_INT 1
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 0
54959: PUSH
54960: LD_INT 1
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 1
54969: NEG
54970: PUSH
54971: LD_INT 0
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 1
54980: NEG
54981: PUSH
54982: LD_INT 1
54984: NEG
54985: PUSH
54986: EMPTY
54987: LIST
54988: LIST
54989: PUSH
54990: LD_INT 1
54992: NEG
54993: PUSH
54994: LD_INT 2
54996: NEG
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 1
55004: PUSH
55005: LD_INT 1
55007: NEG
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 2
55015: PUSH
55016: LD_INT 0
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 2
55025: PUSH
55026: LD_INT 1
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 2
55035: PUSH
55036: LD_INT 2
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: LD_INT 1
55045: PUSH
55046: LD_INT 2
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 1
55055: NEG
55056: PUSH
55057: LD_INT 1
55059: PUSH
55060: EMPTY
55061: LIST
55062: LIST
55063: PUSH
55064: LD_INT 2
55066: NEG
55067: PUSH
55068: LD_INT 0
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 2
55077: NEG
55078: PUSH
55079: LD_INT 1
55081: NEG
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 2
55089: NEG
55090: PUSH
55091: LD_INT 2
55093: NEG
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: LD_INT 2
55101: NEG
55102: PUSH
55103: LD_INT 3
55105: NEG
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: LD_INT 2
55113: PUSH
55114: LD_INT 1
55116: NEG
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: LD_INT 3
55124: PUSH
55125: LD_INT 0
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 3
55134: PUSH
55135: LD_INT 1
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 3
55144: PUSH
55145: LD_INT 2
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 3
55154: PUSH
55155: LD_INT 3
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 2
55164: PUSH
55165: LD_INT 3
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 2
55174: NEG
55175: PUSH
55176: LD_INT 1
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: LD_INT 3
55185: NEG
55186: PUSH
55187: LD_INT 0
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 3
55196: NEG
55197: PUSH
55198: LD_INT 1
55200: NEG
55201: PUSH
55202: EMPTY
55203: LIST
55204: LIST
55205: PUSH
55206: LD_INT 3
55208: NEG
55209: PUSH
55210: LD_INT 2
55212: NEG
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 3
55220: NEG
55221: PUSH
55222: LD_INT 3
55224: NEG
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55261: LD_ADDR_VAR 0 42
55265: PUSH
55266: LD_INT 0
55268: PUSH
55269: LD_INT 0
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 0
55278: PUSH
55279: LD_INT 1
55281: NEG
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 1
55289: PUSH
55290: LD_INT 0
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 1
55299: PUSH
55300: LD_INT 1
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 0
55309: PUSH
55310: LD_INT 1
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 1
55319: NEG
55320: PUSH
55321: LD_INT 0
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: LD_INT 1
55330: NEG
55331: PUSH
55332: LD_INT 1
55334: NEG
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 1
55342: NEG
55343: PUSH
55344: LD_INT 2
55346: NEG
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 0
55354: PUSH
55355: LD_INT 2
55357: NEG
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 1
55365: PUSH
55366: LD_INT 1
55368: NEG
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: LD_INT 2
55376: PUSH
55377: LD_INT 1
55379: PUSH
55380: EMPTY
55381: LIST
55382: LIST
55383: PUSH
55384: LD_INT 2
55386: PUSH
55387: LD_INT 2
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 1
55396: PUSH
55397: LD_INT 2
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: PUSH
55404: LD_INT 0
55406: PUSH
55407: LD_INT 2
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 1
55416: NEG
55417: PUSH
55418: LD_INT 1
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 2
55427: NEG
55428: PUSH
55429: LD_INT 1
55431: NEG
55432: PUSH
55433: EMPTY
55434: LIST
55435: LIST
55436: PUSH
55437: LD_INT 2
55439: NEG
55440: PUSH
55441: LD_INT 2
55443: NEG
55444: PUSH
55445: EMPTY
55446: LIST
55447: LIST
55448: PUSH
55449: LD_INT 2
55451: NEG
55452: PUSH
55453: LD_INT 3
55455: NEG
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: PUSH
55461: LD_INT 1
55463: NEG
55464: PUSH
55465: LD_INT 3
55467: NEG
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 0
55475: PUSH
55476: LD_INT 3
55478: NEG
55479: PUSH
55480: EMPTY
55481: LIST
55482: LIST
55483: PUSH
55484: LD_INT 1
55486: PUSH
55487: LD_INT 2
55489: NEG
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 3
55497: PUSH
55498: LD_INT 2
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 3
55507: PUSH
55508: LD_INT 3
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_INT 2
55517: PUSH
55518: LD_INT 3
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 1
55527: PUSH
55528: LD_INT 3
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 0
55537: PUSH
55538: LD_INT 3
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 1
55547: NEG
55548: PUSH
55549: LD_INT 2
55551: PUSH
55552: EMPTY
55553: LIST
55554: LIST
55555: PUSH
55556: LD_INT 3
55558: NEG
55559: PUSH
55560: LD_INT 2
55562: NEG
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 3
55570: NEG
55571: PUSH
55572: LD_INT 3
55574: NEG
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: LIST
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55611: LD_ADDR_VAR 0 43
55615: PUSH
55616: LD_INT 0
55618: PUSH
55619: LD_INT 0
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 0
55628: PUSH
55629: LD_INT 1
55631: NEG
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 1
55639: PUSH
55640: LD_INT 0
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 1
55649: PUSH
55650: LD_INT 1
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 0
55659: PUSH
55660: LD_INT 1
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 1
55669: NEG
55670: PUSH
55671: LD_INT 0
55673: PUSH
55674: EMPTY
55675: LIST
55676: LIST
55677: PUSH
55678: LD_INT 1
55680: NEG
55681: PUSH
55682: LD_INT 1
55684: NEG
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 1
55692: NEG
55693: PUSH
55694: LD_INT 2
55696: NEG
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 0
55704: PUSH
55705: LD_INT 2
55707: NEG
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 1
55715: PUSH
55716: LD_INT 1
55718: NEG
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 2
55726: PUSH
55727: LD_INT 0
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 2
55736: PUSH
55737: LD_INT 1
55739: PUSH
55740: EMPTY
55741: LIST
55742: LIST
55743: PUSH
55744: LD_INT 1
55746: PUSH
55747: LD_INT 2
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: PUSH
55754: LD_INT 0
55756: PUSH
55757: LD_INT 2
55759: PUSH
55760: EMPTY
55761: LIST
55762: LIST
55763: PUSH
55764: LD_INT 1
55766: NEG
55767: PUSH
55768: LD_INT 1
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 2
55777: NEG
55778: PUSH
55779: LD_INT 0
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 2
55788: NEG
55789: PUSH
55790: LD_INT 1
55792: NEG
55793: PUSH
55794: EMPTY
55795: LIST
55796: LIST
55797: PUSH
55798: LD_INT 1
55800: NEG
55801: PUSH
55802: LD_INT 3
55804: NEG
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 0
55812: PUSH
55813: LD_INT 3
55815: NEG
55816: PUSH
55817: EMPTY
55818: LIST
55819: LIST
55820: PUSH
55821: LD_INT 1
55823: PUSH
55824: LD_INT 2
55826: NEG
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 2
55834: PUSH
55835: LD_INT 1
55837: NEG
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: LD_INT 3
55845: PUSH
55846: LD_INT 0
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: PUSH
55853: LD_INT 3
55855: PUSH
55856: LD_INT 1
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: LD_INT 1
55865: PUSH
55866: LD_INT 3
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 0
55875: PUSH
55876: LD_INT 3
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 1
55885: NEG
55886: PUSH
55887: LD_INT 2
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 2
55896: NEG
55897: PUSH
55898: LD_INT 1
55900: PUSH
55901: EMPTY
55902: LIST
55903: LIST
55904: PUSH
55905: LD_INT 3
55907: NEG
55908: PUSH
55909: LD_INT 0
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: PUSH
55916: LD_INT 3
55918: NEG
55919: PUSH
55920: LD_INT 1
55922: NEG
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: LIST
55957: LIST
55958: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55959: LD_ADDR_VAR 0 44
55963: PUSH
55964: LD_INT 0
55966: PUSH
55967: LD_INT 0
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 0
55976: PUSH
55977: LD_INT 1
55979: NEG
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 1
55987: PUSH
55988: LD_INT 0
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 1
55997: PUSH
55998: LD_INT 1
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 0
56007: PUSH
56008: LD_INT 1
56010: PUSH
56011: EMPTY
56012: LIST
56013: LIST
56014: PUSH
56015: LD_INT 1
56017: NEG
56018: PUSH
56019: LD_INT 0
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: LD_INT 1
56028: NEG
56029: PUSH
56030: LD_INT 1
56032: NEG
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 1
56040: NEG
56041: PUSH
56042: LD_INT 2
56044: NEG
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 1
56052: PUSH
56053: LD_INT 1
56055: NEG
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 2
56063: PUSH
56064: LD_INT 0
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 2
56073: PUSH
56074: LD_INT 1
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 2
56083: PUSH
56084: LD_INT 2
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 1
56093: PUSH
56094: LD_INT 2
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 1
56103: NEG
56104: PUSH
56105: LD_INT 1
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 2
56114: NEG
56115: PUSH
56116: LD_INT 0
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 2
56125: NEG
56126: PUSH
56127: LD_INT 1
56129: NEG
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 2
56137: NEG
56138: PUSH
56139: LD_INT 2
56141: NEG
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 2
56149: NEG
56150: PUSH
56151: LD_INT 3
56153: NEG
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 2
56161: PUSH
56162: LD_INT 1
56164: NEG
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 3
56172: PUSH
56173: LD_INT 0
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: LD_INT 3
56182: PUSH
56183: LD_INT 1
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 3
56192: PUSH
56193: LD_INT 2
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 3
56202: PUSH
56203: LD_INT 3
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 2
56212: PUSH
56213: LD_INT 3
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 2
56222: NEG
56223: PUSH
56224: LD_INT 1
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 3
56233: NEG
56234: PUSH
56235: LD_INT 0
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 3
56244: NEG
56245: PUSH
56246: LD_INT 1
56248: NEG
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 3
56256: NEG
56257: PUSH
56258: LD_INT 2
56260: NEG
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 3
56268: NEG
56269: PUSH
56270: LD_INT 3
56272: NEG
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56309: LD_ADDR_VAR 0 45
56313: PUSH
56314: LD_INT 0
56316: PUSH
56317: LD_INT 0
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 0
56326: PUSH
56327: LD_INT 1
56329: NEG
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 1
56337: PUSH
56338: LD_INT 0
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 1
56347: PUSH
56348: LD_INT 1
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: LD_INT 0
56357: PUSH
56358: LD_INT 1
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: LD_INT 1
56367: NEG
56368: PUSH
56369: LD_INT 0
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 1
56378: NEG
56379: PUSH
56380: LD_INT 1
56382: NEG
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: LD_INT 1
56390: NEG
56391: PUSH
56392: LD_INT 2
56394: NEG
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 0
56402: PUSH
56403: LD_INT 2
56405: NEG
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 1
56413: PUSH
56414: LD_INT 1
56416: NEG
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 2
56424: PUSH
56425: LD_INT 1
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 2
56434: PUSH
56435: LD_INT 2
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 1
56444: PUSH
56445: LD_INT 2
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 0
56454: PUSH
56455: LD_INT 2
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 1
56464: NEG
56465: PUSH
56466: LD_INT 1
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 2
56475: NEG
56476: PUSH
56477: LD_INT 1
56479: NEG
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 2
56487: NEG
56488: PUSH
56489: LD_INT 2
56491: NEG
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 2
56499: NEG
56500: PUSH
56501: LD_INT 3
56503: NEG
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 1
56511: NEG
56512: PUSH
56513: LD_INT 3
56515: NEG
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 0
56523: PUSH
56524: LD_INT 3
56526: NEG
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 1
56534: PUSH
56535: LD_INT 2
56537: NEG
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 3
56545: PUSH
56546: LD_INT 2
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 3
56555: PUSH
56556: LD_INT 3
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: PUSH
56563: LD_INT 2
56565: PUSH
56566: LD_INT 3
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PUSH
56573: LD_INT 1
56575: PUSH
56576: LD_INT 3
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 0
56585: PUSH
56586: LD_INT 3
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PUSH
56593: LD_INT 1
56595: NEG
56596: PUSH
56597: LD_INT 2
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: LD_INT 3
56606: NEG
56607: PUSH
56608: LD_INT 2
56610: NEG
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: PUSH
56616: LD_INT 3
56618: NEG
56619: PUSH
56620: LD_INT 3
56622: NEG
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: LIST
56649: LIST
56650: LIST
56651: LIST
56652: LIST
56653: LIST
56654: LIST
56655: LIST
56656: LIST
56657: LIST
56658: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56659: LD_ADDR_VAR 0 46
56663: PUSH
56664: LD_INT 0
56666: PUSH
56667: LD_INT 0
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: LD_INT 0
56676: PUSH
56677: LD_INT 1
56679: NEG
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 1
56687: PUSH
56688: LD_INT 0
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 1
56697: PUSH
56698: LD_INT 1
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: LD_INT 0
56707: PUSH
56708: LD_INT 1
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 1
56717: NEG
56718: PUSH
56719: LD_INT 0
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 1
56728: NEG
56729: PUSH
56730: LD_INT 1
56732: NEG
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 1
56740: NEG
56741: PUSH
56742: LD_INT 2
56744: NEG
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 0
56752: PUSH
56753: LD_INT 2
56755: NEG
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 1
56763: PUSH
56764: LD_INT 1
56766: NEG
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 2
56774: PUSH
56775: LD_INT 0
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 2
56784: PUSH
56785: LD_INT 1
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: LD_INT 1
56794: PUSH
56795: LD_INT 2
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 0
56804: PUSH
56805: LD_INT 2
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PUSH
56812: LD_INT 1
56814: NEG
56815: PUSH
56816: LD_INT 1
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: PUSH
56823: LD_INT 2
56825: NEG
56826: PUSH
56827: LD_INT 0
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: LD_INT 2
56836: NEG
56837: PUSH
56838: LD_INT 1
56840: NEG
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 1
56848: NEG
56849: PUSH
56850: LD_INT 3
56852: NEG
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 0
56860: PUSH
56861: LD_INT 3
56863: NEG
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 1
56871: PUSH
56872: LD_INT 2
56874: NEG
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: LD_INT 2
56882: PUSH
56883: LD_INT 1
56885: NEG
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 3
56893: PUSH
56894: LD_INT 0
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 3
56903: PUSH
56904: LD_INT 1
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: LD_INT 1
56913: PUSH
56914: LD_INT 3
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 0
56923: PUSH
56924: LD_INT 3
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 1
56933: NEG
56934: PUSH
56935: LD_INT 2
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 2
56944: NEG
56945: PUSH
56946: LD_INT 1
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: LD_INT 3
56955: NEG
56956: PUSH
56957: LD_INT 0
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 3
56966: NEG
56967: PUSH
56968: LD_INT 1
56970: NEG
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57007: LD_ADDR_VAR 0 47
57011: PUSH
57012: LD_INT 0
57014: PUSH
57015: LD_INT 0
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 0
57024: PUSH
57025: LD_INT 1
57027: NEG
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 1
57035: PUSH
57036: LD_INT 0
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 1
57045: PUSH
57046: LD_INT 1
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 0
57055: PUSH
57056: LD_INT 1
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 1
57065: NEG
57066: PUSH
57067: LD_INT 0
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: LD_INT 1
57076: NEG
57077: PUSH
57078: LD_INT 1
57080: NEG
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: LD_INT 1
57088: NEG
57089: PUSH
57090: LD_INT 2
57092: NEG
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: LD_INT 0
57100: PUSH
57101: LD_INT 2
57103: NEG
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: LD_INT 1
57111: PUSH
57112: LD_INT 1
57114: NEG
57115: PUSH
57116: EMPTY
57117: LIST
57118: LIST
57119: PUSH
57120: LD_INT 2
57122: NEG
57123: PUSH
57124: LD_INT 1
57126: NEG
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 2
57134: NEG
57135: PUSH
57136: LD_INT 2
57138: NEG
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: LIST
57148: LIST
57149: LIST
57150: LIST
57151: LIST
57152: LIST
57153: LIST
57154: LIST
57155: LIST
57156: LIST
57157: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57158: LD_ADDR_VAR 0 48
57162: PUSH
57163: LD_INT 0
57165: PUSH
57166: LD_INT 0
57168: PUSH
57169: EMPTY
57170: LIST
57171: LIST
57172: PUSH
57173: LD_INT 0
57175: PUSH
57176: LD_INT 1
57178: NEG
57179: PUSH
57180: EMPTY
57181: LIST
57182: LIST
57183: PUSH
57184: LD_INT 1
57186: PUSH
57187: LD_INT 0
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: PUSH
57194: LD_INT 1
57196: PUSH
57197: LD_INT 1
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: LD_INT 0
57206: PUSH
57207: LD_INT 1
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: LD_INT 1
57216: NEG
57217: PUSH
57218: LD_INT 0
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PUSH
57225: LD_INT 1
57227: NEG
57228: PUSH
57229: LD_INT 1
57231: NEG
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: LD_INT 1
57239: NEG
57240: PUSH
57241: LD_INT 2
57243: NEG
57244: PUSH
57245: EMPTY
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 0
57251: PUSH
57252: LD_INT 2
57254: NEG
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 1
57262: PUSH
57263: LD_INT 1
57265: NEG
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 2
57273: PUSH
57274: LD_INT 0
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 2
57283: PUSH
57284: LD_INT 1
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: LIST
57295: LIST
57296: LIST
57297: LIST
57298: LIST
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: LIST
57304: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57305: LD_ADDR_VAR 0 49
57309: PUSH
57310: LD_INT 0
57312: PUSH
57313: LD_INT 0
57315: PUSH
57316: EMPTY
57317: LIST
57318: LIST
57319: PUSH
57320: LD_INT 0
57322: PUSH
57323: LD_INT 1
57325: NEG
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 1
57333: PUSH
57334: LD_INT 0
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 1
57343: PUSH
57344: LD_INT 1
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 0
57353: PUSH
57354: LD_INT 1
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: LD_INT 1
57363: NEG
57364: PUSH
57365: LD_INT 0
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 1
57374: NEG
57375: PUSH
57376: LD_INT 1
57378: NEG
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 1
57386: PUSH
57387: LD_INT 1
57389: NEG
57390: PUSH
57391: EMPTY
57392: LIST
57393: LIST
57394: PUSH
57395: LD_INT 2
57397: PUSH
57398: LD_INT 0
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 2
57407: PUSH
57408: LD_INT 1
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: LD_INT 2
57417: PUSH
57418: LD_INT 2
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 1
57427: PUSH
57428: LD_INT 2
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57449: LD_ADDR_VAR 0 50
57453: PUSH
57454: LD_INT 0
57456: PUSH
57457: LD_INT 0
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: LD_INT 0
57466: PUSH
57467: LD_INT 1
57469: NEG
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 1
57477: PUSH
57478: LD_INT 0
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: LD_INT 1
57487: PUSH
57488: LD_INT 1
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: PUSH
57495: LD_INT 0
57497: PUSH
57498: LD_INT 1
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: PUSH
57505: LD_INT 1
57507: NEG
57508: PUSH
57509: LD_INT 0
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 1
57518: NEG
57519: PUSH
57520: LD_INT 1
57522: NEG
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 2
57530: PUSH
57531: LD_INT 1
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 2
57540: PUSH
57541: LD_INT 2
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 1
57550: PUSH
57551: LD_INT 2
57553: PUSH
57554: EMPTY
57555: LIST
57556: LIST
57557: PUSH
57558: LD_INT 0
57560: PUSH
57561: LD_INT 2
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: LD_INT 1
57570: NEG
57571: PUSH
57572: LD_INT 1
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: LIST
57583: LIST
57584: LIST
57585: LIST
57586: LIST
57587: LIST
57588: LIST
57589: LIST
57590: LIST
57591: LIST
57592: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57593: LD_ADDR_VAR 0 51
57597: PUSH
57598: LD_INT 0
57600: PUSH
57601: LD_INT 0
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 0
57610: PUSH
57611: LD_INT 1
57613: NEG
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: PUSH
57619: LD_INT 1
57621: PUSH
57622: LD_INT 0
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 1
57631: PUSH
57632: LD_INT 1
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: LD_INT 0
57641: PUSH
57642: LD_INT 1
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: LD_INT 1
57651: NEG
57652: PUSH
57653: LD_INT 0
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: PUSH
57660: LD_INT 1
57662: NEG
57663: PUSH
57664: LD_INT 1
57666: NEG
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PUSH
57672: LD_INT 1
57674: PUSH
57675: LD_INT 2
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: PUSH
57682: LD_INT 0
57684: PUSH
57685: LD_INT 2
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: LD_INT 1
57694: NEG
57695: PUSH
57696: LD_INT 1
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: LD_INT 2
57705: NEG
57706: PUSH
57707: LD_INT 0
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: PUSH
57714: LD_INT 2
57716: NEG
57717: PUSH
57718: LD_INT 1
57720: NEG
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: LIST
57730: LIST
57731: LIST
57732: LIST
57733: LIST
57734: LIST
57735: LIST
57736: LIST
57737: LIST
57738: LIST
57739: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57740: LD_ADDR_VAR 0 52
57744: PUSH
57745: LD_INT 0
57747: PUSH
57748: LD_INT 0
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: LD_INT 0
57757: PUSH
57758: LD_INT 1
57760: NEG
57761: PUSH
57762: EMPTY
57763: LIST
57764: LIST
57765: PUSH
57766: LD_INT 1
57768: PUSH
57769: LD_INT 0
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: LD_INT 1
57778: PUSH
57779: LD_INT 1
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: PUSH
57786: LD_INT 0
57788: PUSH
57789: LD_INT 1
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PUSH
57796: LD_INT 1
57798: NEG
57799: PUSH
57800: LD_INT 0
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: PUSH
57807: LD_INT 1
57809: NEG
57810: PUSH
57811: LD_INT 1
57813: NEG
57814: PUSH
57815: EMPTY
57816: LIST
57817: LIST
57818: PUSH
57819: LD_INT 1
57821: NEG
57822: PUSH
57823: LD_INT 2
57825: NEG
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 1
57833: NEG
57834: PUSH
57835: LD_INT 1
57837: PUSH
57838: EMPTY
57839: LIST
57840: LIST
57841: PUSH
57842: LD_INT 2
57844: NEG
57845: PUSH
57846: LD_INT 0
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PUSH
57853: LD_INT 2
57855: NEG
57856: PUSH
57857: LD_INT 1
57859: NEG
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: LD_INT 2
57867: NEG
57868: PUSH
57869: LD_INT 2
57871: NEG
57872: PUSH
57873: EMPTY
57874: LIST
57875: LIST
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57891: LD_ADDR_VAR 0 53
57895: PUSH
57896: LD_INT 0
57898: PUSH
57899: LD_INT 0
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 0
57908: PUSH
57909: LD_INT 1
57911: NEG
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 1
57919: PUSH
57920: LD_INT 0
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 1
57929: PUSH
57930: LD_INT 1
57932: PUSH
57933: EMPTY
57934: LIST
57935: LIST
57936: PUSH
57937: LD_INT 0
57939: PUSH
57940: LD_INT 1
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 1
57949: NEG
57950: PUSH
57951: LD_INT 0
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 1
57960: NEG
57961: PUSH
57962: LD_INT 1
57964: NEG
57965: PUSH
57966: EMPTY
57967: LIST
57968: LIST
57969: PUSH
57970: LD_INT 1
57972: NEG
57973: PUSH
57974: LD_INT 2
57976: NEG
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 0
57984: PUSH
57985: LD_INT 2
57987: NEG
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: PUSH
57993: LD_INT 1
57995: PUSH
57996: LD_INT 1
57998: NEG
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 2
58006: PUSH
58007: LD_INT 0
58009: PUSH
58010: EMPTY
58011: LIST
58012: LIST
58013: PUSH
58014: LD_INT 2
58016: PUSH
58017: LD_INT 1
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: LD_INT 2
58026: PUSH
58027: LD_INT 2
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: LD_INT 1
58036: PUSH
58037: LD_INT 2
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 0
58046: PUSH
58047: LD_INT 2
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 1
58056: NEG
58057: PUSH
58058: LD_INT 1
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: PUSH
58065: LD_INT 2
58067: NEG
58068: PUSH
58069: LD_INT 0
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: LD_INT 2
58078: NEG
58079: PUSH
58080: LD_INT 1
58082: NEG
58083: PUSH
58084: EMPTY
58085: LIST
58086: LIST
58087: PUSH
58088: LD_INT 2
58090: NEG
58091: PUSH
58092: LD_INT 2
58094: NEG
58095: PUSH
58096: EMPTY
58097: LIST
58098: LIST
58099: PUSH
58100: EMPTY
58101: LIST
58102: LIST
58103: LIST
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: LIST
58115: LIST
58116: LIST
58117: LIST
58118: LIST
58119: LIST
58120: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58121: LD_ADDR_VAR 0 54
58125: PUSH
58126: LD_INT 0
58128: PUSH
58129: LD_INT 0
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 0
58138: PUSH
58139: LD_INT 1
58141: NEG
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 1
58149: PUSH
58150: LD_INT 0
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 1
58159: PUSH
58160: LD_INT 1
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 0
58169: PUSH
58170: LD_INT 1
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 1
58179: NEG
58180: PUSH
58181: LD_INT 0
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: LD_INT 1
58190: NEG
58191: PUSH
58192: LD_INT 1
58194: NEG
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 1
58202: NEG
58203: PUSH
58204: LD_INT 2
58206: NEG
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: PUSH
58212: LD_INT 0
58214: PUSH
58215: LD_INT 2
58217: NEG
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 1
58225: PUSH
58226: LD_INT 1
58228: NEG
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 2
58236: PUSH
58237: LD_INT 0
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: LD_INT 2
58246: PUSH
58247: LD_INT 1
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: LD_INT 2
58256: PUSH
58257: LD_INT 2
58259: PUSH
58260: EMPTY
58261: LIST
58262: LIST
58263: PUSH
58264: LD_INT 1
58266: PUSH
58267: LD_INT 2
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_INT 0
58276: PUSH
58277: LD_INT 2
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 1
58286: NEG
58287: PUSH
58288: LD_INT 1
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: PUSH
58295: LD_INT 2
58297: NEG
58298: PUSH
58299: LD_INT 0
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 2
58308: NEG
58309: PUSH
58310: LD_INT 1
58312: NEG
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 2
58320: NEG
58321: PUSH
58322: LD_INT 2
58324: NEG
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: LIST
58334: LIST
58335: LIST
58336: LIST
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: LIST
58346: LIST
58347: LIST
58348: LIST
58349: LIST
58350: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58351: LD_ADDR_VAR 0 55
58355: PUSH
58356: LD_INT 0
58358: PUSH
58359: LD_INT 0
58361: PUSH
58362: EMPTY
58363: LIST
58364: LIST
58365: PUSH
58366: LD_INT 0
58368: PUSH
58369: LD_INT 1
58371: NEG
58372: PUSH
58373: EMPTY
58374: LIST
58375: LIST
58376: PUSH
58377: LD_INT 1
58379: PUSH
58380: LD_INT 0
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: LD_INT 1
58389: PUSH
58390: LD_INT 1
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: PUSH
58397: LD_INT 0
58399: PUSH
58400: LD_INT 1
58402: PUSH
58403: EMPTY
58404: LIST
58405: LIST
58406: PUSH
58407: LD_INT 1
58409: NEG
58410: PUSH
58411: LD_INT 0
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: PUSH
58418: LD_INT 1
58420: NEG
58421: PUSH
58422: LD_INT 1
58424: NEG
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 1
58432: NEG
58433: PUSH
58434: LD_INT 2
58436: NEG
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 0
58444: PUSH
58445: LD_INT 2
58447: NEG
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 1
58455: PUSH
58456: LD_INT 1
58458: NEG
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: LD_INT 2
58466: PUSH
58467: LD_INT 0
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: LD_INT 2
58476: PUSH
58477: LD_INT 1
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_INT 2
58486: PUSH
58487: LD_INT 2
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 1
58496: PUSH
58497: LD_INT 2
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: PUSH
58504: LD_INT 0
58506: PUSH
58507: LD_INT 2
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: LD_INT 1
58516: NEG
58517: PUSH
58518: LD_INT 1
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: LD_INT 2
58527: NEG
58528: PUSH
58529: LD_INT 0
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 2
58538: NEG
58539: PUSH
58540: LD_INT 1
58542: NEG
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_INT 2
58550: NEG
58551: PUSH
58552: LD_INT 2
58554: NEG
58555: PUSH
58556: EMPTY
58557: LIST
58558: LIST
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: LIST
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58581: LD_ADDR_VAR 0 56
58585: PUSH
58586: LD_INT 0
58588: PUSH
58589: LD_INT 0
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 0
58598: PUSH
58599: LD_INT 1
58601: NEG
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: PUSH
58607: LD_INT 1
58609: PUSH
58610: LD_INT 0
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: LD_INT 1
58619: PUSH
58620: LD_INT 1
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 0
58629: PUSH
58630: LD_INT 1
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 1
58639: NEG
58640: PUSH
58641: LD_INT 0
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: PUSH
58648: LD_INT 1
58650: NEG
58651: PUSH
58652: LD_INT 1
58654: NEG
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: LD_INT 1
58662: NEG
58663: PUSH
58664: LD_INT 2
58666: NEG
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 0
58674: PUSH
58675: LD_INT 2
58677: NEG
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: LD_INT 1
58685: PUSH
58686: LD_INT 1
58688: NEG
58689: PUSH
58690: EMPTY
58691: LIST
58692: LIST
58693: PUSH
58694: LD_INT 2
58696: PUSH
58697: LD_INT 0
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: PUSH
58704: LD_INT 2
58706: PUSH
58707: LD_INT 1
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: LD_INT 2
58716: PUSH
58717: LD_INT 2
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: LD_INT 1
58726: PUSH
58727: LD_INT 2
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: PUSH
58734: LD_INT 0
58736: PUSH
58737: LD_INT 2
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: LD_INT 1
58746: NEG
58747: PUSH
58748: LD_INT 1
58750: PUSH
58751: EMPTY
58752: LIST
58753: LIST
58754: PUSH
58755: LD_INT 2
58757: NEG
58758: PUSH
58759: LD_INT 0
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: PUSH
58766: LD_INT 2
58768: NEG
58769: PUSH
58770: LD_INT 1
58772: NEG
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 2
58780: NEG
58781: PUSH
58782: LD_INT 2
58784: NEG
58785: PUSH
58786: EMPTY
58787: LIST
58788: LIST
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: LIST
58794: LIST
58795: LIST
58796: LIST
58797: LIST
58798: LIST
58799: LIST
58800: LIST
58801: LIST
58802: LIST
58803: LIST
58804: LIST
58805: LIST
58806: LIST
58807: LIST
58808: LIST
58809: LIST
58810: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58811: LD_ADDR_VAR 0 57
58815: PUSH
58816: LD_INT 0
58818: PUSH
58819: LD_INT 0
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: LD_INT 0
58828: PUSH
58829: LD_INT 1
58831: NEG
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 1
58839: PUSH
58840: LD_INT 0
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: PUSH
58847: LD_INT 1
58849: PUSH
58850: LD_INT 1
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: LD_INT 0
58859: PUSH
58860: LD_INT 1
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 1
58869: NEG
58870: PUSH
58871: LD_INT 0
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 1
58880: NEG
58881: PUSH
58882: LD_INT 1
58884: NEG
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: LD_INT 1
58892: NEG
58893: PUSH
58894: LD_INT 2
58896: NEG
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 0
58904: PUSH
58905: LD_INT 2
58907: NEG
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 1
58915: PUSH
58916: LD_INT 1
58918: NEG
58919: PUSH
58920: EMPTY
58921: LIST
58922: LIST
58923: PUSH
58924: LD_INT 2
58926: PUSH
58927: LD_INT 0
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: LD_INT 2
58936: PUSH
58937: LD_INT 1
58939: PUSH
58940: EMPTY
58941: LIST
58942: LIST
58943: PUSH
58944: LD_INT 2
58946: PUSH
58947: LD_INT 2
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 1
58956: PUSH
58957: LD_INT 2
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: PUSH
58964: LD_INT 0
58966: PUSH
58967: LD_INT 2
58969: PUSH
58970: EMPTY
58971: LIST
58972: LIST
58973: PUSH
58974: LD_INT 1
58976: NEG
58977: PUSH
58978: LD_INT 1
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PUSH
58985: LD_INT 2
58987: NEG
58988: PUSH
58989: LD_INT 0
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: PUSH
58996: LD_INT 2
58998: NEG
58999: PUSH
59000: LD_INT 1
59002: NEG
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: LD_INT 2
59010: NEG
59011: PUSH
59012: LD_INT 2
59014: NEG
59015: PUSH
59016: EMPTY
59017: LIST
59018: LIST
59019: PUSH
59020: EMPTY
59021: LIST
59022: LIST
59023: LIST
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: LIST
59034: LIST
59035: LIST
59036: LIST
59037: LIST
59038: LIST
59039: LIST
59040: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59041: LD_ADDR_VAR 0 58
59045: PUSH
59046: LD_INT 0
59048: PUSH
59049: LD_INT 0
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 0
59058: PUSH
59059: LD_INT 1
59061: NEG
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: PUSH
59067: LD_INT 1
59069: PUSH
59070: LD_INT 0
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: LD_INT 1
59079: PUSH
59080: LD_INT 1
59082: PUSH
59083: EMPTY
59084: LIST
59085: LIST
59086: PUSH
59087: LD_INT 0
59089: PUSH
59090: LD_INT 1
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: PUSH
59097: LD_INT 1
59099: NEG
59100: PUSH
59101: LD_INT 0
59103: PUSH
59104: EMPTY
59105: LIST
59106: LIST
59107: PUSH
59108: LD_INT 1
59110: NEG
59111: PUSH
59112: LD_INT 1
59114: NEG
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: PUSH
59120: LD_INT 1
59122: NEG
59123: PUSH
59124: LD_INT 2
59126: NEG
59127: PUSH
59128: EMPTY
59129: LIST
59130: LIST
59131: PUSH
59132: LD_INT 0
59134: PUSH
59135: LD_INT 2
59137: NEG
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: PUSH
59143: LD_INT 1
59145: PUSH
59146: LD_INT 1
59148: NEG
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 2
59156: PUSH
59157: LD_INT 0
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 2
59166: PUSH
59167: LD_INT 1
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: PUSH
59174: LD_INT 2
59176: PUSH
59177: LD_INT 2
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: LD_INT 1
59186: PUSH
59187: LD_INT 2
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: PUSH
59194: LD_INT 0
59196: PUSH
59197: LD_INT 2
59199: PUSH
59200: EMPTY
59201: LIST
59202: LIST
59203: PUSH
59204: LD_INT 1
59206: NEG
59207: PUSH
59208: LD_INT 1
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 2
59217: NEG
59218: PUSH
59219: LD_INT 0
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: LD_INT 2
59228: NEG
59229: PUSH
59230: LD_INT 1
59232: NEG
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: LD_INT 2
59240: NEG
59241: PUSH
59242: LD_INT 2
59244: NEG
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: EMPTY
59251: LIST
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: LIST
59257: LIST
59258: LIST
59259: LIST
59260: LIST
59261: LIST
59262: LIST
59263: LIST
59264: LIST
59265: LIST
59266: LIST
59267: LIST
59268: LIST
59269: LIST
59270: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59271: LD_ADDR_VAR 0 59
59275: PUSH
59276: LD_INT 0
59278: PUSH
59279: LD_INT 0
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: LD_INT 0
59288: PUSH
59289: LD_INT 1
59291: NEG
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 1
59299: PUSH
59300: LD_INT 0
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: PUSH
59307: LD_INT 1
59309: PUSH
59310: LD_INT 1
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: PUSH
59317: LD_INT 0
59319: PUSH
59320: LD_INT 1
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: PUSH
59327: LD_INT 1
59329: NEG
59330: PUSH
59331: LD_INT 0
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: PUSH
59338: LD_INT 1
59340: NEG
59341: PUSH
59342: LD_INT 1
59344: NEG
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59359: LD_ADDR_VAR 0 60
59363: PUSH
59364: LD_INT 0
59366: PUSH
59367: LD_INT 0
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 0
59376: PUSH
59377: LD_INT 1
59379: NEG
59380: PUSH
59381: EMPTY
59382: LIST
59383: LIST
59384: PUSH
59385: LD_INT 1
59387: PUSH
59388: LD_INT 0
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: PUSH
59395: LD_INT 1
59397: PUSH
59398: LD_INT 1
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 0
59407: PUSH
59408: LD_INT 1
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: PUSH
59415: LD_INT 1
59417: NEG
59418: PUSH
59419: LD_INT 0
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: LD_INT 1
59428: NEG
59429: PUSH
59430: LD_INT 1
59432: NEG
59433: PUSH
59434: EMPTY
59435: LIST
59436: LIST
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: LIST
59442: LIST
59443: LIST
59444: LIST
59445: LIST
59446: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59447: LD_ADDR_VAR 0 61
59451: PUSH
59452: LD_INT 0
59454: PUSH
59455: LD_INT 0
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 0
59464: PUSH
59465: LD_INT 1
59467: NEG
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 1
59475: PUSH
59476: LD_INT 0
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: LD_INT 1
59485: PUSH
59486: LD_INT 1
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 0
59495: PUSH
59496: LD_INT 1
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: PUSH
59503: LD_INT 1
59505: NEG
59506: PUSH
59507: LD_INT 0
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: LD_INT 1
59516: NEG
59517: PUSH
59518: LD_INT 1
59520: NEG
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: LIST
59534: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59535: LD_ADDR_VAR 0 62
59539: PUSH
59540: LD_INT 0
59542: PUSH
59543: LD_INT 0
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 0
59552: PUSH
59553: LD_INT 1
59555: NEG
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 1
59563: PUSH
59564: LD_INT 0
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: PUSH
59571: LD_INT 1
59573: PUSH
59574: LD_INT 1
59576: PUSH
59577: EMPTY
59578: LIST
59579: LIST
59580: PUSH
59581: LD_INT 0
59583: PUSH
59584: LD_INT 1
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: PUSH
59591: LD_INT 1
59593: NEG
59594: PUSH
59595: LD_INT 0
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: PUSH
59602: LD_INT 1
59604: NEG
59605: PUSH
59606: LD_INT 1
59608: NEG
59609: PUSH
59610: EMPTY
59611: LIST
59612: LIST
59613: PUSH
59614: EMPTY
59615: LIST
59616: LIST
59617: LIST
59618: LIST
59619: LIST
59620: LIST
59621: LIST
59622: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59623: LD_ADDR_VAR 0 63
59627: PUSH
59628: LD_INT 0
59630: PUSH
59631: LD_INT 0
59633: PUSH
59634: EMPTY
59635: LIST
59636: LIST
59637: PUSH
59638: LD_INT 0
59640: PUSH
59641: LD_INT 1
59643: NEG
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: LD_INT 1
59651: PUSH
59652: LD_INT 0
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: PUSH
59659: LD_INT 1
59661: PUSH
59662: LD_INT 1
59664: PUSH
59665: EMPTY
59666: LIST
59667: LIST
59668: PUSH
59669: LD_INT 0
59671: PUSH
59672: LD_INT 1
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: LD_INT 1
59681: NEG
59682: PUSH
59683: LD_INT 0
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 1
59692: NEG
59693: PUSH
59694: LD_INT 1
59696: NEG
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: PUSH
59702: EMPTY
59703: LIST
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: LIST
59710: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59711: LD_ADDR_VAR 0 64
59715: PUSH
59716: LD_INT 0
59718: PUSH
59719: LD_INT 0
59721: PUSH
59722: EMPTY
59723: LIST
59724: LIST
59725: PUSH
59726: LD_INT 0
59728: PUSH
59729: LD_INT 1
59731: NEG
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: PUSH
59737: LD_INT 1
59739: PUSH
59740: LD_INT 0
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: PUSH
59747: LD_INT 1
59749: PUSH
59750: LD_INT 1
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: PUSH
59757: LD_INT 0
59759: PUSH
59760: LD_INT 1
59762: PUSH
59763: EMPTY
59764: LIST
59765: LIST
59766: PUSH
59767: LD_INT 1
59769: NEG
59770: PUSH
59771: LD_INT 0
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 1
59780: NEG
59781: PUSH
59782: LD_INT 1
59784: NEG
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: PUSH
59790: EMPTY
59791: LIST
59792: LIST
59793: LIST
59794: LIST
59795: LIST
59796: LIST
59797: LIST
59798: ST_TO_ADDR
// end ; 1 :
59799: GO 65696
59801: LD_INT 1
59803: DOUBLE
59804: EQUAL
59805: IFTRUE 59809
59807: GO 62432
59809: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59810: LD_ADDR_VAR 0 11
59814: PUSH
59815: LD_INT 1
59817: NEG
59818: PUSH
59819: LD_INT 3
59821: NEG
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: PUSH
59827: LD_INT 0
59829: PUSH
59830: LD_INT 3
59832: NEG
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: LD_INT 1
59840: PUSH
59841: LD_INT 2
59843: NEG
59844: PUSH
59845: EMPTY
59846: LIST
59847: LIST
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: LIST
59853: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59854: LD_ADDR_VAR 0 12
59858: PUSH
59859: LD_INT 2
59861: PUSH
59862: LD_INT 1
59864: NEG
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 3
59872: PUSH
59873: LD_INT 0
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: LD_INT 3
59882: PUSH
59883: LD_INT 1
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: LIST
59894: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59895: LD_ADDR_VAR 0 13
59899: PUSH
59900: LD_INT 3
59902: PUSH
59903: LD_INT 2
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: PUSH
59910: LD_INT 3
59912: PUSH
59913: LD_INT 3
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: PUSH
59920: LD_INT 2
59922: PUSH
59923: LD_INT 3
59925: PUSH
59926: EMPTY
59927: LIST
59928: LIST
59929: PUSH
59930: EMPTY
59931: LIST
59932: LIST
59933: LIST
59934: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59935: LD_ADDR_VAR 0 14
59939: PUSH
59940: LD_INT 1
59942: PUSH
59943: LD_INT 3
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: LD_INT 0
59952: PUSH
59953: LD_INT 3
59955: PUSH
59956: EMPTY
59957: LIST
59958: LIST
59959: PUSH
59960: LD_INT 1
59962: NEG
59963: PUSH
59964: LD_INT 2
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: EMPTY
59972: LIST
59973: LIST
59974: LIST
59975: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59976: LD_ADDR_VAR 0 15
59980: PUSH
59981: LD_INT 2
59983: NEG
59984: PUSH
59985: LD_INT 1
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: LD_INT 3
59994: NEG
59995: PUSH
59996: LD_INT 0
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: LD_INT 3
60005: NEG
60006: PUSH
60007: LD_INT 1
60009: NEG
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: LIST
60019: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60020: LD_ADDR_VAR 0 16
60024: PUSH
60025: LD_INT 2
60027: NEG
60028: PUSH
60029: LD_INT 3
60031: NEG
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: PUSH
60037: LD_INT 3
60039: NEG
60040: PUSH
60041: LD_INT 2
60043: NEG
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: PUSH
60049: LD_INT 3
60051: NEG
60052: PUSH
60053: LD_INT 3
60055: NEG
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: LIST
60065: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60066: LD_ADDR_VAR 0 17
60070: PUSH
60071: LD_INT 1
60073: NEG
60074: PUSH
60075: LD_INT 3
60077: NEG
60078: PUSH
60079: EMPTY
60080: LIST
60081: LIST
60082: PUSH
60083: LD_INT 0
60085: PUSH
60086: LD_INT 3
60088: NEG
60089: PUSH
60090: EMPTY
60091: LIST
60092: LIST
60093: PUSH
60094: LD_INT 1
60096: PUSH
60097: LD_INT 2
60099: NEG
60100: PUSH
60101: EMPTY
60102: LIST
60103: LIST
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: LIST
60109: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60110: LD_ADDR_VAR 0 18
60114: PUSH
60115: LD_INT 2
60117: PUSH
60118: LD_INT 1
60120: NEG
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: PUSH
60126: LD_INT 3
60128: PUSH
60129: LD_INT 0
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: PUSH
60136: LD_INT 3
60138: PUSH
60139: LD_INT 1
60141: PUSH
60142: EMPTY
60143: LIST
60144: LIST
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: LIST
60150: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60151: LD_ADDR_VAR 0 19
60155: PUSH
60156: LD_INT 3
60158: PUSH
60159: LD_INT 2
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: LD_INT 3
60168: PUSH
60169: LD_INT 3
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: LD_INT 2
60178: PUSH
60179: LD_INT 3
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: LIST
60190: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60191: LD_ADDR_VAR 0 20
60195: PUSH
60196: LD_INT 1
60198: PUSH
60199: LD_INT 3
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: PUSH
60206: LD_INT 0
60208: PUSH
60209: LD_INT 3
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: PUSH
60216: LD_INT 1
60218: NEG
60219: PUSH
60220: LD_INT 2
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: LIST
60231: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60232: LD_ADDR_VAR 0 21
60236: PUSH
60237: LD_INT 2
60239: NEG
60240: PUSH
60241: LD_INT 1
60243: PUSH
60244: EMPTY
60245: LIST
60246: LIST
60247: PUSH
60248: LD_INT 3
60250: NEG
60251: PUSH
60252: LD_INT 0
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: PUSH
60259: LD_INT 3
60261: NEG
60262: PUSH
60263: LD_INT 1
60265: NEG
60266: PUSH
60267: EMPTY
60268: LIST
60269: LIST
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: LIST
60275: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60276: LD_ADDR_VAR 0 22
60280: PUSH
60281: LD_INT 2
60283: NEG
60284: PUSH
60285: LD_INT 3
60287: NEG
60288: PUSH
60289: EMPTY
60290: LIST
60291: LIST
60292: PUSH
60293: LD_INT 3
60295: NEG
60296: PUSH
60297: LD_INT 2
60299: NEG
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 3
60307: NEG
60308: PUSH
60309: LD_INT 3
60311: NEG
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: PUSH
60317: EMPTY
60318: LIST
60319: LIST
60320: LIST
60321: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
60322: LD_ADDR_VAR 0 23
60326: PUSH
60327: LD_INT 0
60329: PUSH
60330: LD_INT 3
60332: NEG
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PUSH
60338: LD_INT 1
60340: NEG
60341: PUSH
60342: LD_INT 4
60344: NEG
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 1
60352: PUSH
60353: LD_INT 3
60355: NEG
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: LIST
60365: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
60366: LD_ADDR_VAR 0 24
60370: PUSH
60371: LD_INT 3
60373: PUSH
60374: LD_INT 0
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: PUSH
60381: LD_INT 3
60383: PUSH
60384: LD_INT 1
60386: NEG
60387: PUSH
60388: EMPTY
60389: LIST
60390: LIST
60391: PUSH
60392: LD_INT 4
60394: PUSH
60395: LD_INT 1
60397: PUSH
60398: EMPTY
60399: LIST
60400: LIST
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: LIST
60406: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
60407: LD_ADDR_VAR 0 25
60411: PUSH
60412: LD_INT 3
60414: PUSH
60415: LD_INT 3
60417: PUSH
60418: EMPTY
60419: LIST
60420: LIST
60421: PUSH
60422: LD_INT 4
60424: PUSH
60425: LD_INT 3
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: PUSH
60432: LD_INT 3
60434: PUSH
60435: LD_INT 4
60437: PUSH
60438: EMPTY
60439: LIST
60440: LIST
60441: PUSH
60442: EMPTY
60443: LIST
60444: LIST
60445: LIST
60446: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
60447: LD_ADDR_VAR 0 26
60451: PUSH
60452: LD_INT 0
60454: PUSH
60455: LD_INT 3
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: PUSH
60462: LD_INT 1
60464: PUSH
60465: LD_INT 4
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: PUSH
60472: LD_INT 1
60474: NEG
60475: PUSH
60476: LD_INT 3
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: LIST
60487: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
60488: LD_ADDR_VAR 0 27
60492: PUSH
60493: LD_INT 3
60495: NEG
60496: PUSH
60497: LD_INT 0
60499: PUSH
60500: EMPTY
60501: LIST
60502: LIST
60503: PUSH
60504: LD_INT 3
60506: NEG
60507: PUSH
60508: LD_INT 1
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: PUSH
60515: LD_INT 4
60517: NEG
60518: PUSH
60519: LD_INT 1
60521: NEG
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: LIST
60531: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
60532: LD_ADDR_VAR 0 28
60536: PUSH
60537: LD_INT 3
60539: NEG
60540: PUSH
60541: LD_INT 3
60543: NEG
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 3
60551: NEG
60552: PUSH
60553: LD_INT 4
60555: NEG
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: PUSH
60561: LD_INT 4
60563: NEG
60564: PUSH
60565: LD_INT 3
60567: NEG
60568: PUSH
60569: EMPTY
60570: LIST
60571: LIST
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: LIST
60577: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
60578: LD_ADDR_VAR 0 29
60582: PUSH
60583: LD_INT 1
60585: NEG
60586: PUSH
60587: LD_INT 3
60589: NEG
60590: PUSH
60591: EMPTY
60592: LIST
60593: LIST
60594: PUSH
60595: LD_INT 0
60597: PUSH
60598: LD_INT 3
60600: NEG
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: PUSH
60606: LD_INT 1
60608: PUSH
60609: LD_INT 2
60611: NEG
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: LD_INT 1
60619: NEG
60620: PUSH
60621: LD_INT 4
60623: NEG
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PUSH
60629: LD_INT 0
60631: PUSH
60632: LD_INT 4
60634: NEG
60635: PUSH
60636: EMPTY
60637: LIST
60638: LIST
60639: PUSH
60640: LD_INT 1
60642: PUSH
60643: LD_INT 3
60645: NEG
60646: PUSH
60647: EMPTY
60648: LIST
60649: LIST
60650: PUSH
60651: LD_INT 1
60653: NEG
60654: PUSH
60655: LD_INT 5
60657: NEG
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: PUSH
60663: LD_INT 0
60665: PUSH
60666: LD_INT 5
60668: NEG
60669: PUSH
60670: EMPTY
60671: LIST
60672: LIST
60673: PUSH
60674: LD_INT 1
60676: PUSH
60677: LD_INT 4
60679: NEG
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: PUSH
60685: LD_INT 1
60687: NEG
60688: PUSH
60689: LD_INT 6
60691: NEG
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: LD_INT 0
60699: PUSH
60700: LD_INT 6
60702: NEG
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: PUSH
60708: LD_INT 1
60710: PUSH
60711: LD_INT 5
60713: NEG
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: LIST
60723: LIST
60724: LIST
60725: LIST
60726: LIST
60727: LIST
60728: LIST
60729: LIST
60730: LIST
60731: LIST
60732: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
60733: LD_ADDR_VAR 0 30
60737: PUSH
60738: LD_INT 2
60740: PUSH
60741: LD_INT 1
60743: NEG
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: PUSH
60749: LD_INT 3
60751: PUSH
60752: LD_INT 0
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PUSH
60759: LD_INT 3
60761: PUSH
60762: LD_INT 1
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: PUSH
60769: LD_INT 3
60771: PUSH
60772: LD_INT 1
60774: NEG
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: LD_INT 4
60782: PUSH
60783: LD_INT 0
60785: PUSH
60786: EMPTY
60787: LIST
60788: LIST
60789: PUSH
60790: LD_INT 4
60792: PUSH
60793: LD_INT 1
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: PUSH
60800: LD_INT 4
60802: PUSH
60803: LD_INT 1
60805: NEG
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: PUSH
60811: LD_INT 5
60813: PUSH
60814: LD_INT 0
60816: PUSH
60817: EMPTY
60818: LIST
60819: LIST
60820: PUSH
60821: LD_INT 5
60823: PUSH
60824: LD_INT 1
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: LD_INT 5
60833: PUSH
60834: LD_INT 1
60836: NEG
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PUSH
60842: LD_INT 6
60844: PUSH
60845: LD_INT 0
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: PUSH
60852: LD_INT 6
60854: PUSH
60855: LD_INT 1
60857: PUSH
60858: EMPTY
60859: LIST
60860: LIST
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: LIST
60866: LIST
60867: LIST
60868: LIST
60869: LIST
60870: LIST
60871: LIST
60872: LIST
60873: LIST
60874: LIST
60875: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
60876: LD_ADDR_VAR 0 31
60880: PUSH
60881: LD_INT 3
60883: PUSH
60884: LD_INT 2
60886: PUSH
60887: EMPTY
60888: LIST
60889: LIST
60890: PUSH
60891: LD_INT 3
60893: PUSH
60894: LD_INT 3
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: LD_INT 2
60903: PUSH
60904: LD_INT 3
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: LD_INT 4
60913: PUSH
60914: LD_INT 3
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 4
60923: PUSH
60924: LD_INT 4
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: LD_INT 3
60933: PUSH
60934: LD_INT 4
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: LD_INT 5
60943: PUSH
60944: LD_INT 4
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 5
60953: PUSH
60954: LD_INT 5
60956: PUSH
60957: EMPTY
60958: LIST
60959: LIST
60960: PUSH
60961: LD_INT 4
60963: PUSH
60964: LD_INT 5
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: PUSH
60971: LD_INT 6
60973: PUSH
60974: LD_INT 5
60976: PUSH
60977: EMPTY
60978: LIST
60979: LIST
60980: PUSH
60981: LD_INT 6
60983: PUSH
60984: LD_INT 6
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: PUSH
60991: LD_INT 5
60993: PUSH
60994: LD_INT 6
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: LIST
61005: LIST
61006: LIST
61007: LIST
61008: LIST
61009: LIST
61010: LIST
61011: LIST
61012: LIST
61013: LIST
61014: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
61015: LD_ADDR_VAR 0 32
61019: PUSH
61020: LD_INT 1
61022: PUSH
61023: LD_INT 3
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: PUSH
61030: LD_INT 0
61032: PUSH
61033: LD_INT 3
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PUSH
61040: LD_INT 1
61042: NEG
61043: PUSH
61044: LD_INT 2
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: PUSH
61051: LD_INT 1
61053: PUSH
61054: LD_INT 4
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: PUSH
61061: LD_INT 0
61063: PUSH
61064: LD_INT 4
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: PUSH
61071: LD_INT 1
61073: NEG
61074: PUSH
61075: LD_INT 3
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: PUSH
61082: LD_INT 1
61084: PUSH
61085: LD_INT 5
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: LD_INT 0
61094: PUSH
61095: LD_INT 5
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: PUSH
61102: LD_INT 1
61104: NEG
61105: PUSH
61106: LD_INT 4
61108: PUSH
61109: EMPTY
61110: LIST
61111: LIST
61112: PUSH
61113: LD_INT 1
61115: PUSH
61116: LD_INT 6
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: PUSH
61123: LD_INT 0
61125: PUSH
61126: LD_INT 6
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: PUSH
61133: LD_INT 1
61135: NEG
61136: PUSH
61137: LD_INT 5
61139: PUSH
61140: EMPTY
61141: LIST
61142: LIST
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
61158: LD_ADDR_VAR 0 33
61162: PUSH
61163: LD_INT 2
61165: NEG
61166: PUSH
61167: LD_INT 1
61169: PUSH
61170: EMPTY
61171: LIST
61172: LIST
61173: PUSH
61174: LD_INT 3
61176: NEG
61177: PUSH
61178: LD_INT 0
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PUSH
61185: LD_INT 3
61187: NEG
61188: PUSH
61189: LD_INT 1
61191: NEG
61192: PUSH
61193: EMPTY
61194: LIST
61195: LIST
61196: PUSH
61197: LD_INT 3
61199: NEG
61200: PUSH
61201: LD_INT 1
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: PUSH
61208: LD_INT 4
61210: NEG
61211: PUSH
61212: LD_INT 0
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PUSH
61219: LD_INT 4
61221: NEG
61222: PUSH
61223: LD_INT 1
61225: NEG
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: PUSH
61231: LD_INT 4
61233: NEG
61234: PUSH
61235: LD_INT 1
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: PUSH
61242: LD_INT 5
61244: NEG
61245: PUSH
61246: LD_INT 0
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 5
61255: NEG
61256: PUSH
61257: LD_INT 1
61259: NEG
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: PUSH
61265: LD_INT 5
61267: NEG
61268: PUSH
61269: LD_INT 1
61271: PUSH
61272: EMPTY
61273: LIST
61274: LIST
61275: PUSH
61276: LD_INT 6
61278: NEG
61279: PUSH
61280: LD_INT 0
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: PUSH
61287: LD_INT 6
61289: NEG
61290: PUSH
61291: LD_INT 1
61293: NEG
61294: PUSH
61295: EMPTY
61296: LIST
61297: LIST
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: LIST
61303: LIST
61304: LIST
61305: LIST
61306: LIST
61307: LIST
61308: LIST
61309: LIST
61310: LIST
61311: LIST
61312: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
61313: LD_ADDR_VAR 0 34
61317: PUSH
61318: LD_INT 2
61320: NEG
61321: PUSH
61322: LD_INT 3
61324: NEG
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: PUSH
61330: LD_INT 3
61332: NEG
61333: PUSH
61334: LD_INT 2
61336: NEG
61337: PUSH
61338: EMPTY
61339: LIST
61340: LIST
61341: PUSH
61342: LD_INT 3
61344: NEG
61345: PUSH
61346: LD_INT 3
61348: NEG
61349: PUSH
61350: EMPTY
61351: LIST
61352: LIST
61353: PUSH
61354: LD_INT 3
61356: NEG
61357: PUSH
61358: LD_INT 4
61360: NEG
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: PUSH
61366: LD_INT 4
61368: NEG
61369: PUSH
61370: LD_INT 3
61372: NEG
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: PUSH
61378: LD_INT 4
61380: NEG
61381: PUSH
61382: LD_INT 4
61384: NEG
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: LD_INT 4
61392: NEG
61393: PUSH
61394: LD_INT 5
61396: NEG
61397: PUSH
61398: EMPTY
61399: LIST
61400: LIST
61401: PUSH
61402: LD_INT 5
61404: NEG
61405: PUSH
61406: LD_INT 4
61408: NEG
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: PUSH
61414: LD_INT 5
61416: NEG
61417: PUSH
61418: LD_INT 5
61420: NEG
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: LD_INT 5
61428: NEG
61429: PUSH
61430: LD_INT 6
61432: NEG
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: PUSH
61438: LD_INT 6
61440: NEG
61441: PUSH
61442: LD_INT 5
61444: NEG
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: PUSH
61450: LD_INT 6
61452: NEG
61453: PUSH
61454: LD_INT 6
61456: NEG
61457: PUSH
61458: EMPTY
61459: LIST
61460: LIST
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: LIST
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: LIST
61474: LIST
61475: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
61476: LD_ADDR_VAR 0 41
61480: PUSH
61481: LD_INT 0
61483: PUSH
61484: LD_INT 2
61486: NEG
61487: PUSH
61488: EMPTY
61489: LIST
61490: LIST
61491: PUSH
61492: LD_INT 1
61494: NEG
61495: PUSH
61496: LD_INT 3
61498: NEG
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: LD_INT 1
61506: PUSH
61507: LD_INT 2
61509: NEG
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: LIST
61519: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
61520: LD_ADDR_VAR 0 42
61524: PUSH
61525: LD_INT 2
61527: PUSH
61528: LD_INT 0
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: PUSH
61535: LD_INT 2
61537: PUSH
61538: LD_INT 1
61540: NEG
61541: PUSH
61542: EMPTY
61543: LIST
61544: LIST
61545: PUSH
61546: LD_INT 3
61548: PUSH
61549: LD_INT 1
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: LIST
61560: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
61561: LD_ADDR_VAR 0 43
61565: PUSH
61566: LD_INT 2
61568: PUSH
61569: LD_INT 2
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: PUSH
61576: LD_INT 3
61578: PUSH
61579: LD_INT 2
61581: PUSH
61582: EMPTY
61583: LIST
61584: LIST
61585: PUSH
61586: LD_INT 2
61588: PUSH
61589: LD_INT 3
61591: PUSH
61592: EMPTY
61593: LIST
61594: LIST
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: LIST
61600: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
61601: LD_ADDR_VAR 0 44
61605: PUSH
61606: LD_INT 0
61608: PUSH
61609: LD_INT 2
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: PUSH
61616: LD_INT 1
61618: PUSH
61619: LD_INT 3
61621: PUSH
61622: EMPTY
61623: LIST
61624: LIST
61625: PUSH
61626: LD_INT 1
61628: NEG
61629: PUSH
61630: LD_INT 2
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: PUSH
61637: EMPTY
61638: LIST
61639: LIST
61640: LIST
61641: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61642: LD_ADDR_VAR 0 45
61646: PUSH
61647: LD_INT 2
61649: NEG
61650: PUSH
61651: LD_INT 0
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: PUSH
61658: LD_INT 2
61660: NEG
61661: PUSH
61662: LD_INT 1
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PUSH
61669: LD_INT 3
61671: NEG
61672: PUSH
61673: LD_INT 1
61675: NEG
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: LIST
61685: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
61686: LD_ADDR_VAR 0 46
61690: PUSH
61691: LD_INT 2
61693: NEG
61694: PUSH
61695: LD_INT 2
61697: NEG
61698: PUSH
61699: EMPTY
61700: LIST
61701: LIST
61702: PUSH
61703: LD_INT 2
61705: NEG
61706: PUSH
61707: LD_INT 3
61709: NEG
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: PUSH
61715: LD_INT 3
61717: NEG
61718: PUSH
61719: LD_INT 2
61721: NEG
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: LIST
61731: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
61732: LD_ADDR_VAR 0 47
61736: PUSH
61737: LD_INT 2
61739: NEG
61740: PUSH
61741: LD_INT 3
61743: NEG
61744: PUSH
61745: EMPTY
61746: LIST
61747: LIST
61748: PUSH
61749: LD_INT 1
61751: NEG
61752: PUSH
61753: LD_INT 3
61755: NEG
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: PUSH
61761: EMPTY
61762: LIST
61763: LIST
61764: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
61765: LD_ADDR_VAR 0 48
61769: PUSH
61770: LD_INT 1
61772: PUSH
61773: LD_INT 2
61775: NEG
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: PUSH
61781: LD_INT 2
61783: PUSH
61784: LD_INT 1
61786: NEG
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: PUSH
61792: EMPTY
61793: LIST
61794: LIST
61795: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
61796: LD_ADDR_VAR 0 49
61800: PUSH
61801: LD_INT 3
61803: PUSH
61804: LD_INT 1
61806: PUSH
61807: EMPTY
61808: LIST
61809: LIST
61810: PUSH
61811: LD_INT 3
61813: PUSH
61814: LD_INT 2
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
61825: LD_ADDR_VAR 0 50
61829: PUSH
61830: LD_INT 2
61832: PUSH
61833: LD_INT 3
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PUSH
61840: LD_INT 1
61842: PUSH
61843: LD_INT 3
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: EMPTY
61851: LIST
61852: LIST
61853: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
61854: LD_ADDR_VAR 0 51
61858: PUSH
61859: LD_INT 1
61861: NEG
61862: PUSH
61863: LD_INT 2
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: PUSH
61870: LD_INT 2
61872: NEG
61873: PUSH
61874: LD_INT 1
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61885: LD_ADDR_VAR 0 52
61889: PUSH
61890: LD_INT 3
61892: NEG
61893: PUSH
61894: LD_INT 1
61896: NEG
61897: PUSH
61898: EMPTY
61899: LIST
61900: LIST
61901: PUSH
61902: LD_INT 3
61904: NEG
61905: PUSH
61906: LD_INT 2
61908: NEG
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: PUSH
61914: EMPTY
61915: LIST
61916: LIST
61917: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61918: LD_ADDR_VAR 0 53
61922: PUSH
61923: LD_INT 1
61925: NEG
61926: PUSH
61927: LD_INT 3
61929: NEG
61930: PUSH
61931: EMPTY
61932: LIST
61933: LIST
61934: PUSH
61935: LD_INT 0
61937: PUSH
61938: LD_INT 3
61940: NEG
61941: PUSH
61942: EMPTY
61943: LIST
61944: LIST
61945: PUSH
61946: LD_INT 1
61948: PUSH
61949: LD_INT 2
61951: NEG
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: EMPTY
61958: LIST
61959: LIST
61960: LIST
61961: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61962: LD_ADDR_VAR 0 54
61966: PUSH
61967: LD_INT 2
61969: PUSH
61970: LD_INT 1
61972: NEG
61973: PUSH
61974: EMPTY
61975: LIST
61976: LIST
61977: PUSH
61978: LD_INT 3
61980: PUSH
61981: LD_INT 0
61983: PUSH
61984: EMPTY
61985: LIST
61986: LIST
61987: PUSH
61988: LD_INT 3
61990: PUSH
61991: LD_INT 1
61993: PUSH
61994: EMPTY
61995: LIST
61996: LIST
61997: PUSH
61998: EMPTY
61999: LIST
62000: LIST
62001: LIST
62002: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62003: LD_ADDR_VAR 0 55
62007: PUSH
62008: LD_INT 3
62010: PUSH
62011: LD_INT 2
62013: PUSH
62014: EMPTY
62015: LIST
62016: LIST
62017: PUSH
62018: LD_INT 3
62020: PUSH
62021: LD_INT 3
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: PUSH
62028: LD_INT 2
62030: PUSH
62031: LD_INT 3
62033: PUSH
62034: EMPTY
62035: LIST
62036: LIST
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: LIST
62042: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62043: LD_ADDR_VAR 0 56
62047: PUSH
62048: LD_INT 1
62050: PUSH
62051: LD_INT 3
62053: PUSH
62054: EMPTY
62055: LIST
62056: LIST
62057: PUSH
62058: LD_INT 0
62060: PUSH
62061: LD_INT 3
62063: PUSH
62064: EMPTY
62065: LIST
62066: LIST
62067: PUSH
62068: LD_INT 1
62070: NEG
62071: PUSH
62072: LD_INT 2
62074: PUSH
62075: EMPTY
62076: LIST
62077: LIST
62078: PUSH
62079: EMPTY
62080: LIST
62081: LIST
62082: LIST
62083: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62084: LD_ADDR_VAR 0 57
62088: PUSH
62089: LD_INT 2
62091: NEG
62092: PUSH
62093: LD_INT 1
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: PUSH
62100: LD_INT 3
62102: NEG
62103: PUSH
62104: LD_INT 0
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: PUSH
62111: LD_INT 3
62113: NEG
62114: PUSH
62115: LD_INT 1
62117: NEG
62118: PUSH
62119: EMPTY
62120: LIST
62121: LIST
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: LIST
62127: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62128: LD_ADDR_VAR 0 58
62132: PUSH
62133: LD_INT 2
62135: NEG
62136: PUSH
62137: LD_INT 3
62139: NEG
62140: PUSH
62141: EMPTY
62142: LIST
62143: LIST
62144: PUSH
62145: LD_INT 3
62147: NEG
62148: PUSH
62149: LD_INT 2
62151: NEG
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: PUSH
62157: LD_INT 3
62159: NEG
62160: PUSH
62161: LD_INT 3
62163: NEG
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: LIST
62173: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
62174: LD_ADDR_VAR 0 59
62178: PUSH
62179: LD_INT 1
62181: NEG
62182: PUSH
62183: LD_INT 2
62185: NEG
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PUSH
62191: LD_INT 0
62193: PUSH
62194: LD_INT 2
62196: NEG
62197: PUSH
62198: EMPTY
62199: LIST
62200: LIST
62201: PUSH
62202: LD_INT 1
62204: PUSH
62205: LD_INT 1
62207: NEG
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: LIST
62217: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62218: LD_ADDR_VAR 0 60
62222: PUSH
62223: LD_INT 1
62225: PUSH
62226: LD_INT 1
62228: NEG
62229: PUSH
62230: EMPTY
62231: LIST
62232: LIST
62233: PUSH
62234: LD_INT 2
62236: PUSH
62237: LD_INT 0
62239: PUSH
62240: EMPTY
62241: LIST
62242: LIST
62243: PUSH
62244: LD_INT 2
62246: PUSH
62247: LD_INT 1
62249: PUSH
62250: EMPTY
62251: LIST
62252: LIST
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: LIST
62258: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62259: LD_ADDR_VAR 0 61
62263: PUSH
62264: LD_INT 2
62266: PUSH
62267: LD_INT 1
62269: PUSH
62270: EMPTY
62271: LIST
62272: LIST
62273: PUSH
62274: LD_INT 2
62276: PUSH
62277: LD_INT 2
62279: PUSH
62280: EMPTY
62281: LIST
62282: LIST
62283: PUSH
62284: LD_INT 1
62286: PUSH
62287: LD_INT 2
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: PUSH
62294: EMPTY
62295: LIST
62296: LIST
62297: LIST
62298: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62299: LD_ADDR_VAR 0 62
62303: PUSH
62304: LD_INT 1
62306: PUSH
62307: LD_INT 2
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: PUSH
62314: LD_INT 0
62316: PUSH
62317: LD_INT 2
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: PUSH
62324: LD_INT 1
62326: NEG
62327: PUSH
62328: LD_INT 1
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PUSH
62335: EMPTY
62336: LIST
62337: LIST
62338: LIST
62339: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62340: LD_ADDR_VAR 0 63
62344: PUSH
62345: LD_INT 1
62347: NEG
62348: PUSH
62349: LD_INT 1
62351: PUSH
62352: EMPTY
62353: LIST
62354: LIST
62355: PUSH
62356: LD_INT 2
62358: NEG
62359: PUSH
62360: LD_INT 0
62362: PUSH
62363: EMPTY
62364: LIST
62365: LIST
62366: PUSH
62367: LD_INT 2
62369: NEG
62370: PUSH
62371: LD_INT 1
62373: NEG
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: PUSH
62379: EMPTY
62380: LIST
62381: LIST
62382: LIST
62383: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62384: LD_ADDR_VAR 0 64
62388: PUSH
62389: LD_INT 1
62391: NEG
62392: PUSH
62393: LD_INT 2
62395: NEG
62396: PUSH
62397: EMPTY
62398: LIST
62399: LIST
62400: PUSH
62401: LD_INT 2
62403: NEG
62404: PUSH
62405: LD_INT 1
62407: NEG
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: LD_INT 2
62415: NEG
62416: PUSH
62417: LD_INT 2
62419: NEG
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: PUSH
62425: EMPTY
62426: LIST
62427: LIST
62428: LIST
62429: ST_TO_ADDR
// end ; 2 :
62430: GO 65696
62432: LD_INT 2
62434: DOUBLE
62435: EQUAL
62436: IFTRUE 62440
62438: GO 65695
62440: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
62441: LD_ADDR_VAR 0 29
62445: PUSH
62446: LD_INT 4
62448: PUSH
62449: LD_INT 0
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: PUSH
62456: LD_INT 4
62458: PUSH
62459: LD_INT 1
62461: NEG
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: PUSH
62467: LD_INT 5
62469: PUSH
62470: LD_INT 0
62472: PUSH
62473: EMPTY
62474: LIST
62475: LIST
62476: PUSH
62477: LD_INT 5
62479: PUSH
62480: LD_INT 1
62482: PUSH
62483: EMPTY
62484: LIST
62485: LIST
62486: PUSH
62487: LD_INT 4
62489: PUSH
62490: LD_INT 1
62492: PUSH
62493: EMPTY
62494: LIST
62495: LIST
62496: PUSH
62497: LD_INT 3
62499: PUSH
62500: LD_INT 0
62502: PUSH
62503: EMPTY
62504: LIST
62505: LIST
62506: PUSH
62507: LD_INT 3
62509: PUSH
62510: LD_INT 1
62512: NEG
62513: PUSH
62514: EMPTY
62515: LIST
62516: LIST
62517: PUSH
62518: LD_INT 3
62520: PUSH
62521: LD_INT 2
62523: NEG
62524: PUSH
62525: EMPTY
62526: LIST
62527: LIST
62528: PUSH
62529: LD_INT 5
62531: PUSH
62532: LD_INT 2
62534: PUSH
62535: EMPTY
62536: LIST
62537: LIST
62538: PUSH
62539: LD_INT 3
62541: PUSH
62542: LD_INT 3
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: PUSH
62549: LD_INT 3
62551: PUSH
62552: LD_INT 2
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: PUSH
62559: LD_INT 4
62561: PUSH
62562: LD_INT 3
62564: PUSH
62565: EMPTY
62566: LIST
62567: LIST
62568: PUSH
62569: LD_INT 4
62571: PUSH
62572: LD_INT 4
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: PUSH
62579: LD_INT 3
62581: PUSH
62582: LD_INT 4
62584: PUSH
62585: EMPTY
62586: LIST
62587: LIST
62588: PUSH
62589: LD_INT 2
62591: PUSH
62592: LD_INT 3
62594: PUSH
62595: EMPTY
62596: LIST
62597: LIST
62598: PUSH
62599: LD_INT 2
62601: PUSH
62602: LD_INT 2
62604: PUSH
62605: EMPTY
62606: LIST
62607: LIST
62608: PUSH
62609: LD_INT 4
62611: PUSH
62612: LD_INT 2
62614: PUSH
62615: EMPTY
62616: LIST
62617: LIST
62618: PUSH
62619: LD_INT 2
62621: PUSH
62622: LD_INT 4
62624: PUSH
62625: EMPTY
62626: LIST
62627: LIST
62628: PUSH
62629: LD_INT 0
62631: PUSH
62632: LD_INT 4
62634: PUSH
62635: EMPTY
62636: LIST
62637: LIST
62638: PUSH
62639: LD_INT 0
62641: PUSH
62642: LD_INT 3
62644: PUSH
62645: EMPTY
62646: LIST
62647: LIST
62648: PUSH
62649: LD_INT 1
62651: PUSH
62652: LD_INT 4
62654: PUSH
62655: EMPTY
62656: LIST
62657: LIST
62658: PUSH
62659: LD_INT 1
62661: PUSH
62662: LD_INT 5
62664: PUSH
62665: EMPTY
62666: LIST
62667: LIST
62668: PUSH
62669: LD_INT 0
62671: PUSH
62672: LD_INT 5
62674: PUSH
62675: EMPTY
62676: LIST
62677: LIST
62678: PUSH
62679: LD_INT 1
62681: NEG
62682: PUSH
62683: LD_INT 4
62685: PUSH
62686: EMPTY
62687: LIST
62688: LIST
62689: PUSH
62690: LD_INT 1
62692: NEG
62693: PUSH
62694: LD_INT 3
62696: PUSH
62697: EMPTY
62698: LIST
62699: LIST
62700: PUSH
62701: LD_INT 2
62703: PUSH
62704: LD_INT 5
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: PUSH
62711: LD_INT 2
62713: NEG
62714: PUSH
62715: LD_INT 3
62717: PUSH
62718: EMPTY
62719: LIST
62720: LIST
62721: PUSH
62722: LD_INT 3
62724: NEG
62725: PUSH
62726: LD_INT 0
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: LD_INT 3
62735: NEG
62736: PUSH
62737: LD_INT 1
62739: NEG
62740: PUSH
62741: EMPTY
62742: LIST
62743: LIST
62744: PUSH
62745: LD_INT 2
62747: NEG
62748: PUSH
62749: LD_INT 0
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: PUSH
62756: LD_INT 2
62758: NEG
62759: PUSH
62760: LD_INT 1
62762: PUSH
62763: EMPTY
62764: LIST
62765: LIST
62766: PUSH
62767: LD_INT 3
62769: NEG
62770: PUSH
62771: LD_INT 1
62773: PUSH
62774: EMPTY
62775: LIST
62776: LIST
62777: PUSH
62778: LD_INT 4
62780: NEG
62781: PUSH
62782: LD_INT 0
62784: PUSH
62785: EMPTY
62786: LIST
62787: LIST
62788: PUSH
62789: LD_INT 4
62791: NEG
62792: PUSH
62793: LD_INT 1
62795: NEG
62796: PUSH
62797: EMPTY
62798: LIST
62799: LIST
62800: PUSH
62801: LD_INT 4
62803: NEG
62804: PUSH
62805: LD_INT 2
62807: NEG
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: PUSH
62813: LD_INT 2
62815: NEG
62816: PUSH
62817: LD_INT 2
62819: PUSH
62820: EMPTY
62821: LIST
62822: LIST
62823: PUSH
62824: LD_INT 4
62826: NEG
62827: PUSH
62828: LD_INT 4
62830: NEG
62831: PUSH
62832: EMPTY
62833: LIST
62834: LIST
62835: PUSH
62836: LD_INT 4
62838: NEG
62839: PUSH
62840: LD_INT 5
62842: NEG
62843: PUSH
62844: EMPTY
62845: LIST
62846: LIST
62847: PUSH
62848: LD_INT 3
62850: NEG
62851: PUSH
62852: LD_INT 4
62854: NEG
62855: PUSH
62856: EMPTY
62857: LIST
62858: LIST
62859: PUSH
62860: LD_INT 3
62862: NEG
62863: PUSH
62864: LD_INT 3
62866: NEG
62867: PUSH
62868: EMPTY
62869: LIST
62870: LIST
62871: PUSH
62872: LD_INT 4
62874: NEG
62875: PUSH
62876: LD_INT 3
62878: NEG
62879: PUSH
62880: EMPTY
62881: LIST
62882: LIST
62883: PUSH
62884: LD_INT 5
62886: NEG
62887: PUSH
62888: LD_INT 4
62890: NEG
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: PUSH
62896: LD_INT 5
62898: NEG
62899: PUSH
62900: LD_INT 5
62902: NEG
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: PUSH
62908: LD_INT 3
62910: NEG
62911: PUSH
62912: LD_INT 5
62914: NEG
62915: PUSH
62916: EMPTY
62917: LIST
62918: LIST
62919: PUSH
62920: LD_INT 5
62922: NEG
62923: PUSH
62924: LD_INT 3
62926: NEG
62927: PUSH
62928: EMPTY
62929: LIST
62930: LIST
62931: PUSH
62932: EMPTY
62933: LIST
62934: LIST
62935: LIST
62936: LIST
62937: LIST
62938: LIST
62939: LIST
62940: LIST
62941: LIST
62942: LIST
62943: LIST
62944: LIST
62945: LIST
62946: LIST
62947: LIST
62948: LIST
62949: LIST
62950: LIST
62951: LIST
62952: LIST
62953: LIST
62954: LIST
62955: LIST
62956: LIST
62957: LIST
62958: LIST
62959: LIST
62960: LIST
62961: LIST
62962: LIST
62963: LIST
62964: LIST
62965: LIST
62966: LIST
62967: LIST
62968: LIST
62969: LIST
62970: LIST
62971: LIST
62972: LIST
62973: LIST
62974: LIST
62975: LIST
62976: LIST
62977: LIST
62978: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
62979: LD_ADDR_VAR 0 30
62983: PUSH
62984: LD_INT 4
62986: PUSH
62987: LD_INT 4
62989: PUSH
62990: EMPTY
62991: LIST
62992: LIST
62993: PUSH
62994: LD_INT 4
62996: PUSH
62997: LD_INT 3
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: PUSH
63004: LD_INT 5
63006: PUSH
63007: LD_INT 4
63009: PUSH
63010: EMPTY
63011: LIST
63012: LIST
63013: PUSH
63014: LD_INT 5
63016: PUSH
63017: LD_INT 5
63019: PUSH
63020: EMPTY
63021: LIST
63022: LIST
63023: PUSH
63024: LD_INT 4
63026: PUSH
63027: LD_INT 5
63029: PUSH
63030: EMPTY
63031: LIST
63032: LIST
63033: PUSH
63034: LD_INT 3
63036: PUSH
63037: LD_INT 4
63039: PUSH
63040: EMPTY
63041: LIST
63042: LIST
63043: PUSH
63044: LD_INT 3
63046: PUSH
63047: LD_INT 3
63049: PUSH
63050: EMPTY
63051: LIST
63052: LIST
63053: PUSH
63054: LD_INT 5
63056: PUSH
63057: LD_INT 3
63059: PUSH
63060: EMPTY
63061: LIST
63062: LIST
63063: PUSH
63064: LD_INT 3
63066: PUSH
63067: LD_INT 5
63069: PUSH
63070: EMPTY
63071: LIST
63072: LIST
63073: PUSH
63074: LD_INT 0
63076: PUSH
63077: LD_INT 3
63079: PUSH
63080: EMPTY
63081: LIST
63082: LIST
63083: PUSH
63084: LD_INT 0
63086: PUSH
63087: LD_INT 2
63089: PUSH
63090: EMPTY
63091: LIST
63092: LIST
63093: PUSH
63094: LD_INT 1
63096: PUSH
63097: LD_INT 3
63099: PUSH
63100: EMPTY
63101: LIST
63102: LIST
63103: PUSH
63104: LD_INT 1
63106: PUSH
63107: LD_INT 4
63109: PUSH
63110: EMPTY
63111: LIST
63112: LIST
63113: PUSH
63114: LD_INT 0
63116: PUSH
63117: LD_INT 4
63119: PUSH
63120: EMPTY
63121: LIST
63122: LIST
63123: PUSH
63124: LD_INT 1
63126: NEG
63127: PUSH
63128: LD_INT 3
63130: PUSH
63131: EMPTY
63132: LIST
63133: LIST
63134: PUSH
63135: LD_INT 1
63137: NEG
63138: PUSH
63139: LD_INT 2
63141: PUSH
63142: EMPTY
63143: LIST
63144: LIST
63145: PUSH
63146: LD_INT 2
63148: PUSH
63149: LD_INT 4
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: PUSH
63156: LD_INT 2
63158: NEG
63159: PUSH
63160: LD_INT 2
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: PUSH
63167: LD_INT 4
63169: NEG
63170: PUSH
63171: LD_INT 0
63173: PUSH
63174: EMPTY
63175: LIST
63176: LIST
63177: PUSH
63178: LD_INT 4
63180: NEG
63181: PUSH
63182: LD_INT 1
63184: NEG
63185: PUSH
63186: EMPTY
63187: LIST
63188: LIST
63189: PUSH
63190: LD_INT 3
63192: NEG
63193: PUSH
63194: LD_INT 0
63196: PUSH
63197: EMPTY
63198: LIST
63199: LIST
63200: PUSH
63201: LD_INT 3
63203: NEG
63204: PUSH
63205: LD_INT 1
63207: PUSH
63208: EMPTY
63209: LIST
63210: LIST
63211: PUSH
63212: LD_INT 4
63214: NEG
63215: PUSH
63216: LD_INT 1
63218: PUSH
63219: EMPTY
63220: LIST
63221: LIST
63222: PUSH
63223: LD_INT 5
63225: NEG
63226: PUSH
63227: LD_INT 0
63229: PUSH
63230: EMPTY
63231: LIST
63232: LIST
63233: PUSH
63234: LD_INT 5
63236: NEG
63237: PUSH
63238: LD_INT 1
63240: NEG
63241: PUSH
63242: EMPTY
63243: LIST
63244: LIST
63245: PUSH
63246: LD_INT 5
63248: NEG
63249: PUSH
63250: LD_INT 2
63252: NEG
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: PUSH
63258: LD_INT 3
63260: NEG
63261: PUSH
63262: LD_INT 2
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: PUSH
63269: LD_INT 3
63271: NEG
63272: PUSH
63273: LD_INT 3
63275: NEG
63276: PUSH
63277: EMPTY
63278: LIST
63279: LIST
63280: PUSH
63281: LD_INT 3
63283: NEG
63284: PUSH
63285: LD_INT 4
63287: NEG
63288: PUSH
63289: EMPTY
63290: LIST
63291: LIST
63292: PUSH
63293: LD_INT 2
63295: NEG
63296: PUSH
63297: LD_INT 3
63299: NEG
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: PUSH
63305: LD_INT 2
63307: NEG
63308: PUSH
63309: LD_INT 2
63311: NEG
63312: PUSH
63313: EMPTY
63314: LIST
63315: LIST
63316: PUSH
63317: LD_INT 3
63319: NEG
63320: PUSH
63321: LD_INT 2
63323: NEG
63324: PUSH
63325: EMPTY
63326: LIST
63327: LIST
63328: PUSH
63329: LD_INT 4
63331: NEG
63332: PUSH
63333: LD_INT 3
63335: NEG
63336: PUSH
63337: EMPTY
63338: LIST
63339: LIST
63340: PUSH
63341: LD_INT 4
63343: NEG
63344: PUSH
63345: LD_INT 4
63347: NEG
63348: PUSH
63349: EMPTY
63350: LIST
63351: LIST
63352: PUSH
63353: LD_INT 2
63355: NEG
63356: PUSH
63357: LD_INT 4
63359: NEG
63360: PUSH
63361: EMPTY
63362: LIST
63363: LIST
63364: PUSH
63365: LD_INT 4
63367: NEG
63368: PUSH
63369: LD_INT 2
63371: NEG
63372: PUSH
63373: EMPTY
63374: LIST
63375: LIST
63376: PUSH
63377: LD_INT 0
63379: PUSH
63380: LD_INT 4
63382: NEG
63383: PUSH
63384: EMPTY
63385: LIST
63386: LIST
63387: PUSH
63388: LD_INT 0
63390: PUSH
63391: LD_INT 5
63393: NEG
63394: PUSH
63395: EMPTY
63396: LIST
63397: LIST
63398: PUSH
63399: LD_INT 1
63401: PUSH
63402: LD_INT 4
63404: NEG
63405: PUSH
63406: EMPTY
63407: LIST
63408: LIST
63409: PUSH
63410: LD_INT 1
63412: PUSH
63413: LD_INT 3
63415: NEG
63416: PUSH
63417: EMPTY
63418: LIST
63419: LIST
63420: PUSH
63421: LD_INT 0
63423: PUSH
63424: LD_INT 3
63426: NEG
63427: PUSH
63428: EMPTY
63429: LIST
63430: LIST
63431: PUSH
63432: LD_INT 1
63434: NEG
63435: PUSH
63436: LD_INT 4
63438: NEG
63439: PUSH
63440: EMPTY
63441: LIST
63442: LIST
63443: PUSH
63444: LD_INT 1
63446: NEG
63447: PUSH
63448: LD_INT 5
63450: NEG
63451: PUSH
63452: EMPTY
63453: LIST
63454: LIST
63455: PUSH
63456: LD_INT 2
63458: PUSH
63459: LD_INT 3
63461: NEG
63462: PUSH
63463: EMPTY
63464: LIST
63465: LIST
63466: PUSH
63467: LD_INT 2
63469: NEG
63470: PUSH
63471: LD_INT 5
63473: NEG
63474: PUSH
63475: EMPTY
63476: LIST
63477: LIST
63478: PUSH
63479: EMPTY
63480: LIST
63481: LIST
63482: LIST
63483: LIST
63484: LIST
63485: LIST
63486: LIST
63487: LIST
63488: LIST
63489: LIST
63490: LIST
63491: LIST
63492: LIST
63493: LIST
63494: LIST
63495: LIST
63496: LIST
63497: LIST
63498: LIST
63499: LIST
63500: LIST
63501: LIST
63502: LIST
63503: LIST
63504: LIST
63505: LIST
63506: LIST
63507: LIST
63508: LIST
63509: LIST
63510: LIST
63511: LIST
63512: LIST
63513: LIST
63514: LIST
63515: LIST
63516: LIST
63517: LIST
63518: LIST
63519: LIST
63520: LIST
63521: LIST
63522: LIST
63523: LIST
63524: LIST
63525: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
63526: LD_ADDR_VAR 0 31
63530: PUSH
63531: LD_INT 0
63533: PUSH
63534: LD_INT 4
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: PUSH
63541: LD_INT 0
63543: PUSH
63544: LD_INT 3
63546: PUSH
63547: EMPTY
63548: LIST
63549: LIST
63550: PUSH
63551: LD_INT 1
63553: PUSH
63554: LD_INT 4
63556: PUSH
63557: EMPTY
63558: LIST
63559: LIST
63560: PUSH
63561: LD_INT 1
63563: PUSH
63564: LD_INT 5
63566: PUSH
63567: EMPTY
63568: LIST
63569: LIST
63570: PUSH
63571: LD_INT 0
63573: PUSH
63574: LD_INT 5
63576: PUSH
63577: EMPTY
63578: LIST
63579: LIST
63580: PUSH
63581: LD_INT 1
63583: NEG
63584: PUSH
63585: LD_INT 4
63587: PUSH
63588: EMPTY
63589: LIST
63590: LIST
63591: PUSH
63592: LD_INT 1
63594: NEG
63595: PUSH
63596: LD_INT 3
63598: PUSH
63599: EMPTY
63600: LIST
63601: LIST
63602: PUSH
63603: LD_INT 2
63605: PUSH
63606: LD_INT 5
63608: PUSH
63609: EMPTY
63610: LIST
63611: LIST
63612: PUSH
63613: LD_INT 2
63615: NEG
63616: PUSH
63617: LD_INT 3
63619: PUSH
63620: EMPTY
63621: LIST
63622: LIST
63623: PUSH
63624: LD_INT 3
63626: NEG
63627: PUSH
63628: LD_INT 0
63630: PUSH
63631: EMPTY
63632: LIST
63633: LIST
63634: PUSH
63635: LD_INT 3
63637: NEG
63638: PUSH
63639: LD_INT 1
63641: NEG
63642: PUSH
63643: EMPTY
63644: LIST
63645: LIST
63646: PUSH
63647: LD_INT 2
63649: NEG
63650: PUSH
63651: LD_INT 0
63653: PUSH
63654: EMPTY
63655: LIST
63656: LIST
63657: PUSH
63658: LD_INT 2
63660: NEG
63661: PUSH
63662: LD_INT 1
63664: PUSH
63665: EMPTY
63666: LIST
63667: LIST
63668: PUSH
63669: LD_INT 3
63671: NEG
63672: PUSH
63673: LD_INT 1
63675: PUSH
63676: EMPTY
63677: LIST
63678: LIST
63679: PUSH
63680: LD_INT 4
63682: NEG
63683: PUSH
63684: LD_INT 0
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: PUSH
63691: LD_INT 4
63693: NEG
63694: PUSH
63695: LD_INT 1
63697: NEG
63698: PUSH
63699: EMPTY
63700: LIST
63701: LIST
63702: PUSH
63703: LD_INT 4
63705: NEG
63706: PUSH
63707: LD_INT 2
63709: NEG
63710: PUSH
63711: EMPTY
63712: LIST
63713: LIST
63714: PUSH
63715: LD_INT 2
63717: NEG
63718: PUSH
63719: LD_INT 2
63721: PUSH
63722: EMPTY
63723: LIST
63724: LIST
63725: PUSH
63726: LD_INT 4
63728: NEG
63729: PUSH
63730: LD_INT 4
63732: NEG
63733: PUSH
63734: EMPTY
63735: LIST
63736: LIST
63737: PUSH
63738: LD_INT 4
63740: NEG
63741: PUSH
63742: LD_INT 5
63744: NEG
63745: PUSH
63746: EMPTY
63747: LIST
63748: LIST
63749: PUSH
63750: LD_INT 3
63752: NEG
63753: PUSH
63754: LD_INT 4
63756: NEG
63757: PUSH
63758: EMPTY
63759: LIST
63760: LIST
63761: PUSH
63762: LD_INT 3
63764: NEG
63765: PUSH
63766: LD_INT 3
63768: NEG
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: PUSH
63774: LD_INT 4
63776: NEG
63777: PUSH
63778: LD_INT 3
63780: NEG
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: PUSH
63786: LD_INT 5
63788: NEG
63789: PUSH
63790: LD_INT 4
63792: NEG
63793: PUSH
63794: EMPTY
63795: LIST
63796: LIST
63797: PUSH
63798: LD_INT 5
63800: NEG
63801: PUSH
63802: LD_INT 5
63804: NEG
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: PUSH
63810: LD_INT 3
63812: NEG
63813: PUSH
63814: LD_INT 5
63816: NEG
63817: PUSH
63818: EMPTY
63819: LIST
63820: LIST
63821: PUSH
63822: LD_INT 5
63824: NEG
63825: PUSH
63826: LD_INT 3
63828: NEG
63829: PUSH
63830: EMPTY
63831: LIST
63832: LIST
63833: PUSH
63834: LD_INT 0
63836: PUSH
63837: LD_INT 3
63839: NEG
63840: PUSH
63841: EMPTY
63842: LIST
63843: LIST
63844: PUSH
63845: LD_INT 0
63847: PUSH
63848: LD_INT 4
63850: NEG
63851: PUSH
63852: EMPTY
63853: LIST
63854: LIST
63855: PUSH
63856: LD_INT 1
63858: PUSH
63859: LD_INT 3
63861: NEG
63862: PUSH
63863: EMPTY
63864: LIST
63865: LIST
63866: PUSH
63867: LD_INT 1
63869: PUSH
63870: LD_INT 2
63872: NEG
63873: PUSH
63874: EMPTY
63875: LIST
63876: LIST
63877: PUSH
63878: LD_INT 0
63880: PUSH
63881: LD_INT 2
63883: NEG
63884: PUSH
63885: EMPTY
63886: LIST
63887: LIST
63888: PUSH
63889: LD_INT 1
63891: NEG
63892: PUSH
63893: LD_INT 3
63895: NEG
63896: PUSH
63897: EMPTY
63898: LIST
63899: LIST
63900: PUSH
63901: LD_INT 1
63903: NEG
63904: PUSH
63905: LD_INT 4
63907: NEG
63908: PUSH
63909: EMPTY
63910: LIST
63911: LIST
63912: PUSH
63913: LD_INT 2
63915: PUSH
63916: LD_INT 2
63918: NEG
63919: PUSH
63920: EMPTY
63921: LIST
63922: LIST
63923: PUSH
63924: LD_INT 2
63926: NEG
63927: PUSH
63928: LD_INT 4
63930: NEG
63931: PUSH
63932: EMPTY
63933: LIST
63934: LIST
63935: PUSH
63936: LD_INT 4
63938: PUSH
63939: LD_INT 0
63941: PUSH
63942: EMPTY
63943: LIST
63944: LIST
63945: PUSH
63946: LD_INT 4
63948: PUSH
63949: LD_INT 1
63951: NEG
63952: PUSH
63953: EMPTY
63954: LIST
63955: LIST
63956: PUSH
63957: LD_INT 5
63959: PUSH
63960: LD_INT 0
63962: PUSH
63963: EMPTY
63964: LIST
63965: LIST
63966: PUSH
63967: LD_INT 5
63969: PUSH
63970: LD_INT 1
63972: PUSH
63973: EMPTY
63974: LIST
63975: LIST
63976: PUSH
63977: LD_INT 4
63979: PUSH
63980: LD_INT 1
63982: PUSH
63983: EMPTY
63984: LIST
63985: LIST
63986: PUSH
63987: LD_INT 3
63989: PUSH
63990: LD_INT 0
63992: PUSH
63993: EMPTY
63994: LIST
63995: LIST
63996: PUSH
63997: LD_INT 3
63999: PUSH
64000: LD_INT 1
64002: NEG
64003: PUSH
64004: EMPTY
64005: LIST
64006: LIST
64007: PUSH
64008: LD_INT 3
64010: PUSH
64011: LD_INT 2
64013: NEG
64014: PUSH
64015: EMPTY
64016: LIST
64017: LIST
64018: PUSH
64019: LD_INT 5
64021: PUSH
64022: LD_INT 2
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: PUSH
64029: EMPTY
64030: LIST
64031: LIST
64032: LIST
64033: LIST
64034: LIST
64035: LIST
64036: LIST
64037: LIST
64038: LIST
64039: LIST
64040: LIST
64041: LIST
64042: LIST
64043: LIST
64044: LIST
64045: LIST
64046: LIST
64047: LIST
64048: LIST
64049: LIST
64050: LIST
64051: LIST
64052: LIST
64053: LIST
64054: LIST
64055: LIST
64056: LIST
64057: LIST
64058: LIST
64059: LIST
64060: LIST
64061: LIST
64062: LIST
64063: LIST
64064: LIST
64065: LIST
64066: LIST
64067: LIST
64068: LIST
64069: LIST
64070: LIST
64071: LIST
64072: LIST
64073: LIST
64074: LIST
64075: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
64076: LD_ADDR_VAR 0 32
64080: PUSH
64081: LD_INT 4
64083: NEG
64084: PUSH
64085: LD_INT 0
64087: PUSH
64088: EMPTY
64089: LIST
64090: LIST
64091: PUSH
64092: LD_INT 4
64094: NEG
64095: PUSH
64096: LD_INT 1
64098: NEG
64099: PUSH
64100: EMPTY
64101: LIST
64102: LIST
64103: PUSH
64104: LD_INT 3
64106: NEG
64107: PUSH
64108: LD_INT 0
64110: PUSH
64111: EMPTY
64112: LIST
64113: LIST
64114: PUSH
64115: LD_INT 3
64117: NEG
64118: PUSH
64119: LD_INT 1
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: PUSH
64126: LD_INT 4
64128: NEG
64129: PUSH
64130: LD_INT 1
64132: PUSH
64133: EMPTY
64134: LIST
64135: LIST
64136: PUSH
64137: LD_INT 5
64139: NEG
64140: PUSH
64141: LD_INT 0
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: PUSH
64148: LD_INT 5
64150: NEG
64151: PUSH
64152: LD_INT 1
64154: NEG
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: PUSH
64160: LD_INT 5
64162: NEG
64163: PUSH
64164: LD_INT 2
64166: NEG
64167: PUSH
64168: EMPTY
64169: LIST
64170: LIST
64171: PUSH
64172: LD_INT 3
64174: NEG
64175: PUSH
64176: LD_INT 2
64178: PUSH
64179: EMPTY
64180: LIST
64181: LIST
64182: PUSH
64183: LD_INT 3
64185: NEG
64186: PUSH
64187: LD_INT 3
64189: NEG
64190: PUSH
64191: EMPTY
64192: LIST
64193: LIST
64194: PUSH
64195: LD_INT 3
64197: NEG
64198: PUSH
64199: LD_INT 4
64201: NEG
64202: PUSH
64203: EMPTY
64204: LIST
64205: LIST
64206: PUSH
64207: LD_INT 2
64209: NEG
64210: PUSH
64211: LD_INT 3
64213: NEG
64214: PUSH
64215: EMPTY
64216: LIST
64217: LIST
64218: PUSH
64219: LD_INT 2
64221: NEG
64222: PUSH
64223: LD_INT 2
64225: NEG
64226: PUSH
64227: EMPTY
64228: LIST
64229: LIST
64230: PUSH
64231: LD_INT 3
64233: NEG
64234: PUSH
64235: LD_INT 2
64237: NEG
64238: PUSH
64239: EMPTY
64240: LIST
64241: LIST
64242: PUSH
64243: LD_INT 4
64245: NEG
64246: PUSH
64247: LD_INT 3
64249: NEG
64250: PUSH
64251: EMPTY
64252: LIST
64253: LIST
64254: PUSH
64255: LD_INT 4
64257: NEG
64258: PUSH
64259: LD_INT 4
64261: NEG
64262: PUSH
64263: EMPTY
64264: LIST
64265: LIST
64266: PUSH
64267: LD_INT 2
64269: NEG
64270: PUSH
64271: LD_INT 4
64273: NEG
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: PUSH
64279: LD_INT 4
64281: NEG
64282: PUSH
64283: LD_INT 2
64285: NEG
64286: PUSH
64287: EMPTY
64288: LIST
64289: LIST
64290: PUSH
64291: LD_INT 0
64293: PUSH
64294: LD_INT 4
64296: NEG
64297: PUSH
64298: EMPTY
64299: LIST
64300: LIST
64301: PUSH
64302: LD_INT 0
64304: PUSH
64305: LD_INT 5
64307: NEG
64308: PUSH
64309: EMPTY
64310: LIST
64311: LIST
64312: PUSH
64313: LD_INT 1
64315: PUSH
64316: LD_INT 4
64318: NEG
64319: PUSH
64320: EMPTY
64321: LIST
64322: LIST
64323: PUSH
64324: LD_INT 1
64326: PUSH
64327: LD_INT 3
64329: NEG
64330: PUSH
64331: EMPTY
64332: LIST
64333: LIST
64334: PUSH
64335: LD_INT 0
64337: PUSH
64338: LD_INT 3
64340: NEG
64341: PUSH
64342: EMPTY
64343: LIST
64344: LIST
64345: PUSH
64346: LD_INT 1
64348: NEG
64349: PUSH
64350: LD_INT 4
64352: NEG
64353: PUSH
64354: EMPTY
64355: LIST
64356: LIST
64357: PUSH
64358: LD_INT 1
64360: NEG
64361: PUSH
64362: LD_INT 5
64364: NEG
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: PUSH
64370: LD_INT 2
64372: PUSH
64373: LD_INT 3
64375: NEG
64376: PUSH
64377: EMPTY
64378: LIST
64379: LIST
64380: PUSH
64381: LD_INT 2
64383: NEG
64384: PUSH
64385: LD_INT 5
64387: NEG
64388: PUSH
64389: EMPTY
64390: LIST
64391: LIST
64392: PUSH
64393: LD_INT 3
64395: PUSH
64396: LD_INT 0
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: PUSH
64403: LD_INT 3
64405: PUSH
64406: LD_INT 1
64408: NEG
64409: PUSH
64410: EMPTY
64411: LIST
64412: LIST
64413: PUSH
64414: LD_INT 4
64416: PUSH
64417: LD_INT 0
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: PUSH
64424: LD_INT 4
64426: PUSH
64427: LD_INT 1
64429: PUSH
64430: EMPTY
64431: LIST
64432: LIST
64433: PUSH
64434: LD_INT 3
64436: PUSH
64437: LD_INT 1
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: PUSH
64444: LD_INT 2
64446: PUSH
64447: LD_INT 0
64449: PUSH
64450: EMPTY
64451: LIST
64452: LIST
64453: PUSH
64454: LD_INT 2
64456: PUSH
64457: LD_INT 1
64459: NEG
64460: PUSH
64461: EMPTY
64462: LIST
64463: LIST
64464: PUSH
64465: LD_INT 2
64467: PUSH
64468: LD_INT 2
64470: NEG
64471: PUSH
64472: EMPTY
64473: LIST
64474: LIST
64475: PUSH
64476: LD_INT 4
64478: PUSH
64479: LD_INT 2
64481: PUSH
64482: EMPTY
64483: LIST
64484: LIST
64485: PUSH
64486: LD_INT 4
64488: PUSH
64489: LD_INT 4
64491: PUSH
64492: EMPTY
64493: LIST
64494: LIST
64495: PUSH
64496: LD_INT 4
64498: PUSH
64499: LD_INT 3
64501: PUSH
64502: EMPTY
64503: LIST
64504: LIST
64505: PUSH
64506: LD_INT 5
64508: PUSH
64509: LD_INT 4
64511: PUSH
64512: EMPTY
64513: LIST
64514: LIST
64515: PUSH
64516: LD_INT 5
64518: PUSH
64519: LD_INT 5
64521: PUSH
64522: EMPTY
64523: LIST
64524: LIST
64525: PUSH
64526: LD_INT 4
64528: PUSH
64529: LD_INT 5
64531: PUSH
64532: EMPTY
64533: LIST
64534: LIST
64535: PUSH
64536: LD_INT 3
64538: PUSH
64539: LD_INT 4
64541: PUSH
64542: EMPTY
64543: LIST
64544: LIST
64545: PUSH
64546: LD_INT 3
64548: PUSH
64549: LD_INT 3
64551: PUSH
64552: EMPTY
64553: LIST
64554: LIST
64555: PUSH
64556: LD_INT 5
64558: PUSH
64559: LD_INT 3
64561: PUSH
64562: EMPTY
64563: LIST
64564: LIST
64565: PUSH
64566: LD_INT 3
64568: PUSH
64569: LD_INT 5
64571: PUSH
64572: EMPTY
64573: LIST
64574: LIST
64575: PUSH
64576: EMPTY
64577: LIST
64578: LIST
64579: LIST
64580: LIST
64581: LIST
64582: LIST
64583: LIST
64584: LIST
64585: LIST
64586: LIST
64587: LIST
64588: LIST
64589: LIST
64590: LIST
64591: LIST
64592: LIST
64593: LIST
64594: LIST
64595: LIST
64596: LIST
64597: LIST
64598: LIST
64599: LIST
64600: LIST
64601: LIST
64602: LIST
64603: LIST
64604: LIST
64605: LIST
64606: LIST
64607: LIST
64608: LIST
64609: LIST
64610: LIST
64611: LIST
64612: LIST
64613: LIST
64614: LIST
64615: LIST
64616: LIST
64617: LIST
64618: LIST
64619: LIST
64620: LIST
64621: LIST
64622: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
64623: LD_ADDR_VAR 0 33
64627: PUSH
64628: LD_INT 4
64630: NEG
64631: PUSH
64632: LD_INT 4
64634: NEG
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: PUSH
64640: LD_INT 4
64642: NEG
64643: PUSH
64644: LD_INT 5
64646: NEG
64647: PUSH
64648: EMPTY
64649: LIST
64650: LIST
64651: PUSH
64652: LD_INT 3
64654: NEG
64655: PUSH
64656: LD_INT 4
64658: NEG
64659: PUSH
64660: EMPTY
64661: LIST
64662: LIST
64663: PUSH
64664: LD_INT 3
64666: NEG
64667: PUSH
64668: LD_INT 3
64670: NEG
64671: PUSH
64672: EMPTY
64673: LIST
64674: LIST
64675: PUSH
64676: LD_INT 4
64678: NEG
64679: PUSH
64680: LD_INT 3
64682: NEG
64683: PUSH
64684: EMPTY
64685: LIST
64686: LIST
64687: PUSH
64688: LD_INT 5
64690: NEG
64691: PUSH
64692: LD_INT 4
64694: NEG
64695: PUSH
64696: EMPTY
64697: LIST
64698: LIST
64699: PUSH
64700: LD_INT 5
64702: NEG
64703: PUSH
64704: LD_INT 5
64706: NEG
64707: PUSH
64708: EMPTY
64709: LIST
64710: LIST
64711: PUSH
64712: LD_INT 3
64714: NEG
64715: PUSH
64716: LD_INT 5
64718: NEG
64719: PUSH
64720: EMPTY
64721: LIST
64722: LIST
64723: PUSH
64724: LD_INT 5
64726: NEG
64727: PUSH
64728: LD_INT 3
64730: NEG
64731: PUSH
64732: EMPTY
64733: LIST
64734: LIST
64735: PUSH
64736: LD_INT 0
64738: PUSH
64739: LD_INT 3
64741: NEG
64742: PUSH
64743: EMPTY
64744: LIST
64745: LIST
64746: PUSH
64747: LD_INT 0
64749: PUSH
64750: LD_INT 4
64752: NEG
64753: PUSH
64754: EMPTY
64755: LIST
64756: LIST
64757: PUSH
64758: LD_INT 1
64760: PUSH
64761: LD_INT 3
64763: NEG
64764: PUSH
64765: EMPTY
64766: LIST
64767: LIST
64768: PUSH
64769: LD_INT 1
64771: PUSH
64772: LD_INT 2
64774: NEG
64775: PUSH
64776: EMPTY
64777: LIST
64778: LIST
64779: PUSH
64780: LD_INT 0
64782: PUSH
64783: LD_INT 2
64785: NEG
64786: PUSH
64787: EMPTY
64788: LIST
64789: LIST
64790: PUSH
64791: LD_INT 1
64793: NEG
64794: PUSH
64795: LD_INT 3
64797: NEG
64798: PUSH
64799: EMPTY
64800: LIST
64801: LIST
64802: PUSH
64803: LD_INT 1
64805: NEG
64806: PUSH
64807: LD_INT 4
64809: NEG
64810: PUSH
64811: EMPTY
64812: LIST
64813: LIST
64814: PUSH
64815: LD_INT 2
64817: PUSH
64818: LD_INT 2
64820: NEG
64821: PUSH
64822: EMPTY
64823: LIST
64824: LIST
64825: PUSH
64826: LD_INT 2
64828: NEG
64829: PUSH
64830: LD_INT 4
64832: NEG
64833: PUSH
64834: EMPTY
64835: LIST
64836: LIST
64837: PUSH
64838: LD_INT 4
64840: PUSH
64841: LD_INT 0
64843: PUSH
64844: EMPTY
64845: LIST
64846: LIST
64847: PUSH
64848: LD_INT 4
64850: PUSH
64851: LD_INT 1
64853: NEG
64854: PUSH
64855: EMPTY
64856: LIST
64857: LIST
64858: PUSH
64859: LD_INT 5
64861: PUSH
64862: LD_INT 0
64864: PUSH
64865: EMPTY
64866: LIST
64867: LIST
64868: PUSH
64869: LD_INT 5
64871: PUSH
64872: LD_INT 1
64874: PUSH
64875: EMPTY
64876: LIST
64877: LIST
64878: PUSH
64879: LD_INT 4
64881: PUSH
64882: LD_INT 1
64884: PUSH
64885: EMPTY
64886: LIST
64887: LIST
64888: PUSH
64889: LD_INT 3
64891: PUSH
64892: LD_INT 0
64894: PUSH
64895: EMPTY
64896: LIST
64897: LIST
64898: PUSH
64899: LD_INT 3
64901: PUSH
64902: LD_INT 1
64904: NEG
64905: PUSH
64906: EMPTY
64907: LIST
64908: LIST
64909: PUSH
64910: LD_INT 3
64912: PUSH
64913: LD_INT 2
64915: NEG
64916: PUSH
64917: EMPTY
64918: LIST
64919: LIST
64920: PUSH
64921: LD_INT 5
64923: PUSH
64924: LD_INT 2
64926: PUSH
64927: EMPTY
64928: LIST
64929: LIST
64930: PUSH
64931: LD_INT 3
64933: PUSH
64934: LD_INT 3
64936: PUSH
64937: EMPTY
64938: LIST
64939: LIST
64940: PUSH
64941: LD_INT 3
64943: PUSH
64944: LD_INT 2
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: PUSH
64951: LD_INT 4
64953: PUSH
64954: LD_INT 3
64956: PUSH
64957: EMPTY
64958: LIST
64959: LIST
64960: PUSH
64961: LD_INT 4
64963: PUSH
64964: LD_INT 4
64966: PUSH
64967: EMPTY
64968: LIST
64969: LIST
64970: PUSH
64971: LD_INT 3
64973: PUSH
64974: LD_INT 4
64976: PUSH
64977: EMPTY
64978: LIST
64979: LIST
64980: PUSH
64981: LD_INT 2
64983: PUSH
64984: LD_INT 3
64986: PUSH
64987: EMPTY
64988: LIST
64989: LIST
64990: PUSH
64991: LD_INT 2
64993: PUSH
64994: LD_INT 2
64996: PUSH
64997: EMPTY
64998: LIST
64999: LIST
65000: PUSH
65001: LD_INT 4
65003: PUSH
65004: LD_INT 2
65006: PUSH
65007: EMPTY
65008: LIST
65009: LIST
65010: PUSH
65011: LD_INT 2
65013: PUSH
65014: LD_INT 4
65016: PUSH
65017: EMPTY
65018: LIST
65019: LIST
65020: PUSH
65021: LD_INT 0
65023: PUSH
65024: LD_INT 4
65026: PUSH
65027: EMPTY
65028: LIST
65029: LIST
65030: PUSH
65031: LD_INT 0
65033: PUSH
65034: LD_INT 3
65036: PUSH
65037: EMPTY
65038: LIST
65039: LIST
65040: PUSH
65041: LD_INT 1
65043: PUSH
65044: LD_INT 4
65046: PUSH
65047: EMPTY
65048: LIST
65049: LIST
65050: PUSH
65051: LD_INT 1
65053: PUSH
65054: LD_INT 5
65056: PUSH
65057: EMPTY
65058: LIST
65059: LIST
65060: PUSH
65061: LD_INT 0
65063: PUSH
65064: LD_INT 5
65066: PUSH
65067: EMPTY
65068: LIST
65069: LIST
65070: PUSH
65071: LD_INT 1
65073: NEG
65074: PUSH
65075: LD_INT 4
65077: PUSH
65078: EMPTY
65079: LIST
65080: LIST
65081: PUSH
65082: LD_INT 1
65084: NEG
65085: PUSH
65086: LD_INT 3
65088: PUSH
65089: EMPTY
65090: LIST
65091: LIST
65092: PUSH
65093: LD_INT 2
65095: PUSH
65096: LD_INT 5
65098: PUSH
65099: EMPTY
65100: LIST
65101: LIST
65102: PUSH
65103: LD_INT 2
65105: NEG
65106: PUSH
65107: LD_INT 3
65109: PUSH
65110: EMPTY
65111: LIST
65112: LIST
65113: PUSH
65114: EMPTY
65115: LIST
65116: LIST
65117: LIST
65118: LIST
65119: LIST
65120: LIST
65121: LIST
65122: LIST
65123: LIST
65124: LIST
65125: LIST
65126: LIST
65127: LIST
65128: LIST
65129: LIST
65130: LIST
65131: LIST
65132: LIST
65133: LIST
65134: LIST
65135: LIST
65136: LIST
65137: LIST
65138: LIST
65139: LIST
65140: LIST
65141: LIST
65142: LIST
65143: LIST
65144: LIST
65145: LIST
65146: LIST
65147: LIST
65148: LIST
65149: LIST
65150: LIST
65151: LIST
65152: LIST
65153: LIST
65154: LIST
65155: LIST
65156: LIST
65157: LIST
65158: LIST
65159: LIST
65160: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
65161: LD_ADDR_VAR 0 34
65165: PUSH
65166: LD_INT 0
65168: PUSH
65169: LD_INT 4
65171: NEG
65172: PUSH
65173: EMPTY
65174: LIST
65175: LIST
65176: PUSH
65177: LD_INT 0
65179: PUSH
65180: LD_INT 5
65182: NEG
65183: PUSH
65184: EMPTY
65185: LIST
65186: LIST
65187: PUSH
65188: LD_INT 1
65190: PUSH
65191: LD_INT 4
65193: NEG
65194: PUSH
65195: EMPTY
65196: LIST
65197: LIST
65198: PUSH
65199: LD_INT 1
65201: PUSH
65202: LD_INT 3
65204: NEG
65205: PUSH
65206: EMPTY
65207: LIST
65208: LIST
65209: PUSH
65210: LD_INT 0
65212: PUSH
65213: LD_INT 3
65215: NEG
65216: PUSH
65217: EMPTY
65218: LIST
65219: LIST
65220: PUSH
65221: LD_INT 1
65223: NEG
65224: PUSH
65225: LD_INT 4
65227: NEG
65228: PUSH
65229: EMPTY
65230: LIST
65231: LIST
65232: PUSH
65233: LD_INT 1
65235: NEG
65236: PUSH
65237: LD_INT 5
65239: NEG
65240: PUSH
65241: EMPTY
65242: LIST
65243: LIST
65244: PUSH
65245: LD_INT 2
65247: PUSH
65248: LD_INT 3
65250: NEG
65251: PUSH
65252: EMPTY
65253: LIST
65254: LIST
65255: PUSH
65256: LD_INT 2
65258: NEG
65259: PUSH
65260: LD_INT 5
65262: NEG
65263: PUSH
65264: EMPTY
65265: LIST
65266: LIST
65267: PUSH
65268: LD_INT 3
65270: PUSH
65271: LD_INT 0
65273: PUSH
65274: EMPTY
65275: LIST
65276: LIST
65277: PUSH
65278: LD_INT 3
65280: PUSH
65281: LD_INT 1
65283: NEG
65284: PUSH
65285: EMPTY
65286: LIST
65287: LIST
65288: PUSH
65289: LD_INT 4
65291: PUSH
65292: LD_INT 0
65294: PUSH
65295: EMPTY
65296: LIST
65297: LIST
65298: PUSH
65299: LD_INT 4
65301: PUSH
65302: LD_INT 1
65304: PUSH
65305: EMPTY
65306: LIST
65307: LIST
65308: PUSH
65309: LD_INT 3
65311: PUSH
65312: LD_INT 1
65314: PUSH
65315: EMPTY
65316: LIST
65317: LIST
65318: PUSH
65319: LD_INT 2
65321: PUSH
65322: LD_INT 0
65324: PUSH
65325: EMPTY
65326: LIST
65327: LIST
65328: PUSH
65329: LD_INT 2
65331: PUSH
65332: LD_INT 1
65334: NEG
65335: PUSH
65336: EMPTY
65337: LIST
65338: LIST
65339: PUSH
65340: LD_INT 2
65342: PUSH
65343: LD_INT 2
65345: NEG
65346: PUSH
65347: EMPTY
65348: LIST
65349: LIST
65350: PUSH
65351: LD_INT 4
65353: PUSH
65354: LD_INT 2
65356: PUSH
65357: EMPTY
65358: LIST
65359: LIST
65360: PUSH
65361: LD_INT 4
65363: PUSH
65364: LD_INT 4
65366: PUSH
65367: EMPTY
65368: LIST
65369: LIST
65370: PUSH
65371: LD_INT 4
65373: PUSH
65374: LD_INT 3
65376: PUSH
65377: EMPTY
65378: LIST
65379: LIST
65380: PUSH
65381: LD_INT 5
65383: PUSH
65384: LD_INT 4
65386: PUSH
65387: EMPTY
65388: LIST
65389: LIST
65390: PUSH
65391: LD_INT 5
65393: PUSH
65394: LD_INT 5
65396: PUSH
65397: EMPTY
65398: LIST
65399: LIST
65400: PUSH
65401: LD_INT 4
65403: PUSH
65404: LD_INT 5
65406: PUSH
65407: EMPTY
65408: LIST
65409: LIST
65410: PUSH
65411: LD_INT 3
65413: PUSH
65414: LD_INT 4
65416: PUSH
65417: EMPTY
65418: LIST
65419: LIST
65420: PUSH
65421: LD_INT 3
65423: PUSH
65424: LD_INT 3
65426: PUSH
65427: EMPTY
65428: LIST
65429: LIST
65430: PUSH
65431: LD_INT 5
65433: PUSH
65434: LD_INT 3
65436: PUSH
65437: EMPTY
65438: LIST
65439: LIST
65440: PUSH
65441: LD_INT 3
65443: PUSH
65444: LD_INT 5
65446: PUSH
65447: EMPTY
65448: LIST
65449: LIST
65450: PUSH
65451: LD_INT 0
65453: PUSH
65454: LD_INT 3
65456: PUSH
65457: EMPTY
65458: LIST
65459: LIST
65460: PUSH
65461: LD_INT 0
65463: PUSH
65464: LD_INT 2
65466: PUSH
65467: EMPTY
65468: LIST
65469: LIST
65470: PUSH
65471: LD_INT 1
65473: PUSH
65474: LD_INT 3
65476: PUSH
65477: EMPTY
65478: LIST
65479: LIST
65480: PUSH
65481: LD_INT 1
65483: PUSH
65484: LD_INT 4
65486: PUSH
65487: EMPTY
65488: LIST
65489: LIST
65490: PUSH
65491: LD_INT 0
65493: PUSH
65494: LD_INT 4
65496: PUSH
65497: EMPTY
65498: LIST
65499: LIST
65500: PUSH
65501: LD_INT 1
65503: NEG
65504: PUSH
65505: LD_INT 3
65507: PUSH
65508: EMPTY
65509: LIST
65510: LIST
65511: PUSH
65512: LD_INT 1
65514: NEG
65515: PUSH
65516: LD_INT 2
65518: PUSH
65519: EMPTY
65520: LIST
65521: LIST
65522: PUSH
65523: LD_INT 2
65525: PUSH
65526: LD_INT 4
65528: PUSH
65529: EMPTY
65530: LIST
65531: LIST
65532: PUSH
65533: LD_INT 2
65535: NEG
65536: PUSH
65537: LD_INT 2
65539: PUSH
65540: EMPTY
65541: LIST
65542: LIST
65543: PUSH
65544: LD_INT 4
65546: NEG
65547: PUSH
65548: LD_INT 0
65550: PUSH
65551: EMPTY
65552: LIST
65553: LIST
65554: PUSH
65555: LD_INT 4
65557: NEG
65558: PUSH
65559: LD_INT 1
65561: NEG
65562: PUSH
65563: EMPTY
65564: LIST
65565: LIST
65566: PUSH
65567: LD_INT 3
65569: NEG
65570: PUSH
65571: LD_INT 0
65573: PUSH
65574: EMPTY
65575: LIST
65576: LIST
65577: PUSH
65578: LD_INT 3
65580: NEG
65581: PUSH
65582: LD_INT 1
65584: PUSH
65585: EMPTY
65586: LIST
65587: LIST
65588: PUSH
65589: LD_INT 4
65591: NEG
65592: PUSH
65593: LD_INT 1
65595: PUSH
65596: EMPTY
65597: LIST
65598: LIST
65599: PUSH
65600: LD_INT 5
65602: NEG
65603: PUSH
65604: LD_INT 0
65606: PUSH
65607: EMPTY
65608: LIST
65609: LIST
65610: PUSH
65611: LD_INT 5
65613: NEG
65614: PUSH
65615: LD_INT 1
65617: NEG
65618: PUSH
65619: EMPTY
65620: LIST
65621: LIST
65622: PUSH
65623: LD_INT 5
65625: NEG
65626: PUSH
65627: LD_INT 2
65629: NEG
65630: PUSH
65631: EMPTY
65632: LIST
65633: LIST
65634: PUSH
65635: LD_INT 3
65637: NEG
65638: PUSH
65639: LD_INT 2
65641: PUSH
65642: EMPTY
65643: LIST
65644: LIST
65645: PUSH
65646: EMPTY
65647: LIST
65648: LIST
65649: LIST
65650: LIST
65651: LIST
65652: LIST
65653: LIST
65654: LIST
65655: LIST
65656: LIST
65657: LIST
65658: LIST
65659: LIST
65660: LIST
65661: LIST
65662: LIST
65663: LIST
65664: LIST
65665: LIST
65666: LIST
65667: LIST
65668: LIST
65669: LIST
65670: LIST
65671: LIST
65672: LIST
65673: LIST
65674: LIST
65675: LIST
65676: LIST
65677: LIST
65678: LIST
65679: LIST
65680: LIST
65681: LIST
65682: LIST
65683: LIST
65684: LIST
65685: LIST
65686: LIST
65687: LIST
65688: LIST
65689: LIST
65690: LIST
65691: LIST
65692: ST_TO_ADDR
// end ; end ;
65693: GO 65696
65695: POP
// case btype of b_depot , b_warehouse :
65696: LD_VAR 0 1
65700: PUSH
65701: LD_INT 0
65703: DOUBLE
65704: EQUAL
65705: IFTRUE 65715
65707: LD_INT 1
65709: DOUBLE
65710: EQUAL
65711: IFTRUE 65715
65713: GO 65916
65715: POP
// case nation of nation_american :
65716: LD_VAR 0 5
65720: PUSH
65721: LD_INT 1
65723: DOUBLE
65724: EQUAL
65725: IFTRUE 65729
65727: GO 65785
65729: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
65730: LD_ADDR_VAR 0 9
65734: PUSH
65735: LD_VAR 0 11
65739: PUSH
65740: LD_VAR 0 12
65744: PUSH
65745: LD_VAR 0 13
65749: PUSH
65750: LD_VAR 0 14
65754: PUSH
65755: LD_VAR 0 15
65759: PUSH
65760: LD_VAR 0 16
65764: PUSH
65765: EMPTY
65766: LIST
65767: LIST
65768: LIST
65769: LIST
65770: LIST
65771: LIST
65772: PUSH
65773: LD_VAR 0 4
65777: PUSH
65778: LD_INT 1
65780: PLUS
65781: ARRAY
65782: ST_TO_ADDR
65783: GO 65914
65785: LD_INT 2
65787: DOUBLE
65788: EQUAL
65789: IFTRUE 65793
65791: GO 65849
65793: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
65794: LD_ADDR_VAR 0 9
65798: PUSH
65799: LD_VAR 0 17
65803: PUSH
65804: LD_VAR 0 18
65808: PUSH
65809: LD_VAR 0 19
65813: PUSH
65814: LD_VAR 0 20
65818: PUSH
65819: LD_VAR 0 21
65823: PUSH
65824: LD_VAR 0 22
65828: PUSH
65829: EMPTY
65830: LIST
65831: LIST
65832: LIST
65833: LIST
65834: LIST
65835: LIST
65836: PUSH
65837: LD_VAR 0 4
65841: PUSH
65842: LD_INT 1
65844: PLUS
65845: ARRAY
65846: ST_TO_ADDR
65847: GO 65914
65849: LD_INT 3
65851: DOUBLE
65852: EQUAL
65853: IFTRUE 65857
65855: GO 65913
65857: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
65858: LD_ADDR_VAR 0 9
65862: PUSH
65863: LD_VAR 0 23
65867: PUSH
65868: LD_VAR 0 24
65872: PUSH
65873: LD_VAR 0 25
65877: PUSH
65878: LD_VAR 0 26
65882: PUSH
65883: LD_VAR 0 27
65887: PUSH
65888: LD_VAR 0 28
65892: PUSH
65893: EMPTY
65894: LIST
65895: LIST
65896: LIST
65897: LIST
65898: LIST
65899: LIST
65900: PUSH
65901: LD_VAR 0 4
65905: PUSH
65906: LD_INT 1
65908: PLUS
65909: ARRAY
65910: ST_TO_ADDR
65911: GO 65914
65913: POP
65914: GO 66469
65916: LD_INT 2
65918: DOUBLE
65919: EQUAL
65920: IFTRUE 65930
65922: LD_INT 3
65924: DOUBLE
65925: EQUAL
65926: IFTRUE 65930
65928: GO 65986
65930: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
65931: LD_ADDR_VAR 0 9
65935: PUSH
65936: LD_VAR 0 29
65940: PUSH
65941: LD_VAR 0 30
65945: PUSH
65946: LD_VAR 0 31
65950: PUSH
65951: LD_VAR 0 32
65955: PUSH
65956: LD_VAR 0 33
65960: PUSH
65961: LD_VAR 0 34
65965: PUSH
65966: EMPTY
65967: LIST
65968: LIST
65969: LIST
65970: LIST
65971: LIST
65972: LIST
65973: PUSH
65974: LD_VAR 0 4
65978: PUSH
65979: LD_INT 1
65981: PLUS
65982: ARRAY
65983: ST_TO_ADDR
65984: GO 66469
65986: LD_INT 16
65988: DOUBLE
65989: EQUAL
65990: IFTRUE 66048
65992: LD_INT 17
65994: DOUBLE
65995: EQUAL
65996: IFTRUE 66048
65998: LD_INT 18
66000: DOUBLE
66001: EQUAL
66002: IFTRUE 66048
66004: LD_INT 19
66006: DOUBLE
66007: EQUAL
66008: IFTRUE 66048
66010: LD_INT 22
66012: DOUBLE
66013: EQUAL
66014: IFTRUE 66048
66016: LD_INT 20
66018: DOUBLE
66019: EQUAL
66020: IFTRUE 66048
66022: LD_INT 21
66024: DOUBLE
66025: EQUAL
66026: IFTRUE 66048
66028: LD_INT 23
66030: DOUBLE
66031: EQUAL
66032: IFTRUE 66048
66034: LD_INT 24
66036: DOUBLE
66037: EQUAL
66038: IFTRUE 66048
66040: LD_INT 25
66042: DOUBLE
66043: EQUAL
66044: IFTRUE 66048
66046: GO 66104
66048: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
66049: LD_ADDR_VAR 0 9
66053: PUSH
66054: LD_VAR 0 35
66058: PUSH
66059: LD_VAR 0 36
66063: PUSH
66064: LD_VAR 0 37
66068: PUSH
66069: LD_VAR 0 38
66073: PUSH
66074: LD_VAR 0 39
66078: PUSH
66079: LD_VAR 0 40
66083: PUSH
66084: EMPTY
66085: LIST
66086: LIST
66087: LIST
66088: LIST
66089: LIST
66090: LIST
66091: PUSH
66092: LD_VAR 0 4
66096: PUSH
66097: LD_INT 1
66099: PLUS
66100: ARRAY
66101: ST_TO_ADDR
66102: GO 66469
66104: LD_INT 6
66106: DOUBLE
66107: EQUAL
66108: IFTRUE 66160
66110: LD_INT 7
66112: DOUBLE
66113: EQUAL
66114: IFTRUE 66160
66116: LD_INT 8
66118: DOUBLE
66119: EQUAL
66120: IFTRUE 66160
66122: LD_INT 13
66124: DOUBLE
66125: EQUAL
66126: IFTRUE 66160
66128: LD_INT 12
66130: DOUBLE
66131: EQUAL
66132: IFTRUE 66160
66134: LD_INT 15
66136: DOUBLE
66137: EQUAL
66138: IFTRUE 66160
66140: LD_INT 11
66142: DOUBLE
66143: EQUAL
66144: IFTRUE 66160
66146: LD_INT 14
66148: DOUBLE
66149: EQUAL
66150: IFTRUE 66160
66152: LD_INT 10
66154: DOUBLE
66155: EQUAL
66156: IFTRUE 66160
66158: GO 66216
66160: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
66161: LD_ADDR_VAR 0 9
66165: PUSH
66166: LD_VAR 0 41
66170: PUSH
66171: LD_VAR 0 42
66175: PUSH
66176: LD_VAR 0 43
66180: PUSH
66181: LD_VAR 0 44
66185: PUSH
66186: LD_VAR 0 45
66190: PUSH
66191: LD_VAR 0 46
66195: PUSH
66196: EMPTY
66197: LIST
66198: LIST
66199: LIST
66200: LIST
66201: LIST
66202: LIST
66203: PUSH
66204: LD_VAR 0 4
66208: PUSH
66209: LD_INT 1
66211: PLUS
66212: ARRAY
66213: ST_TO_ADDR
66214: GO 66469
66216: LD_INT 36
66218: DOUBLE
66219: EQUAL
66220: IFTRUE 66224
66222: GO 66280
66224: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
66225: LD_ADDR_VAR 0 9
66229: PUSH
66230: LD_VAR 0 47
66234: PUSH
66235: LD_VAR 0 48
66239: PUSH
66240: LD_VAR 0 49
66244: PUSH
66245: LD_VAR 0 50
66249: PUSH
66250: LD_VAR 0 51
66254: PUSH
66255: LD_VAR 0 52
66259: PUSH
66260: EMPTY
66261: LIST
66262: LIST
66263: LIST
66264: LIST
66265: LIST
66266: LIST
66267: PUSH
66268: LD_VAR 0 4
66272: PUSH
66273: LD_INT 1
66275: PLUS
66276: ARRAY
66277: ST_TO_ADDR
66278: GO 66469
66280: LD_INT 4
66282: DOUBLE
66283: EQUAL
66284: IFTRUE 66306
66286: LD_INT 5
66288: DOUBLE
66289: EQUAL
66290: IFTRUE 66306
66292: LD_INT 34
66294: DOUBLE
66295: EQUAL
66296: IFTRUE 66306
66298: LD_INT 37
66300: DOUBLE
66301: EQUAL
66302: IFTRUE 66306
66304: GO 66362
66306: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
66307: LD_ADDR_VAR 0 9
66311: PUSH
66312: LD_VAR 0 53
66316: PUSH
66317: LD_VAR 0 54
66321: PUSH
66322: LD_VAR 0 55
66326: PUSH
66327: LD_VAR 0 56
66331: PUSH
66332: LD_VAR 0 57
66336: PUSH
66337: LD_VAR 0 58
66341: PUSH
66342: EMPTY
66343: LIST
66344: LIST
66345: LIST
66346: LIST
66347: LIST
66348: LIST
66349: PUSH
66350: LD_VAR 0 4
66354: PUSH
66355: LD_INT 1
66357: PLUS
66358: ARRAY
66359: ST_TO_ADDR
66360: GO 66469
66362: LD_INT 31
66364: DOUBLE
66365: EQUAL
66366: IFTRUE 66412
66368: LD_INT 32
66370: DOUBLE
66371: EQUAL
66372: IFTRUE 66412
66374: LD_INT 33
66376: DOUBLE
66377: EQUAL
66378: IFTRUE 66412
66380: LD_INT 27
66382: DOUBLE
66383: EQUAL
66384: IFTRUE 66412
66386: LD_INT 26
66388: DOUBLE
66389: EQUAL
66390: IFTRUE 66412
66392: LD_INT 28
66394: DOUBLE
66395: EQUAL
66396: IFTRUE 66412
66398: LD_INT 29
66400: DOUBLE
66401: EQUAL
66402: IFTRUE 66412
66404: LD_INT 30
66406: DOUBLE
66407: EQUAL
66408: IFTRUE 66412
66410: GO 66468
66412: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
66413: LD_ADDR_VAR 0 9
66417: PUSH
66418: LD_VAR 0 59
66422: PUSH
66423: LD_VAR 0 60
66427: PUSH
66428: LD_VAR 0 61
66432: PUSH
66433: LD_VAR 0 62
66437: PUSH
66438: LD_VAR 0 63
66442: PUSH
66443: LD_VAR 0 64
66447: PUSH
66448: EMPTY
66449: LIST
66450: LIST
66451: LIST
66452: LIST
66453: LIST
66454: LIST
66455: PUSH
66456: LD_VAR 0 4
66460: PUSH
66461: LD_INT 1
66463: PLUS
66464: ARRAY
66465: ST_TO_ADDR
66466: GO 66469
66468: POP
// temp_list2 = [ ] ;
66469: LD_ADDR_VAR 0 10
66473: PUSH
66474: EMPTY
66475: ST_TO_ADDR
// for i in temp_list do
66476: LD_ADDR_VAR 0 8
66480: PUSH
66481: LD_VAR 0 9
66485: PUSH
66486: FOR_IN
66487: IFFALSE 66539
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
66489: LD_ADDR_VAR 0 10
66493: PUSH
66494: LD_VAR 0 10
66498: PUSH
66499: LD_VAR 0 8
66503: PUSH
66504: LD_INT 1
66506: ARRAY
66507: PUSH
66508: LD_VAR 0 2
66512: PLUS
66513: PUSH
66514: LD_VAR 0 8
66518: PUSH
66519: LD_INT 2
66521: ARRAY
66522: PUSH
66523: LD_VAR 0 3
66527: PLUS
66528: PUSH
66529: EMPTY
66530: LIST
66531: LIST
66532: PUSH
66533: EMPTY
66534: LIST
66535: ADD
66536: ST_TO_ADDR
66537: GO 66486
66539: POP
66540: POP
// result = temp_list2 ;
66541: LD_ADDR_VAR 0 7
66545: PUSH
66546: LD_VAR 0 10
66550: ST_TO_ADDR
// end ;
66551: LD_VAR 0 7
66555: RET
// export function EnemyInRange ( unit , dist ) ; begin
66556: LD_INT 0
66558: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
66559: LD_ADDR_VAR 0 3
66563: PUSH
66564: LD_VAR 0 1
66568: PPUSH
66569: CALL_OW 255
66573: PPUSH
66574: LD_VAR 0 1
66578: PPUSH
66579: CALL_OW 250
66583: PPUSH
66584: LD_VAR 0 1
66588: PPUSH
66589: CALL_OW 251
66593: PPUSH
66594: LD_VAR 0 2
66598: PPUSH
66599: CALL 39929 0 4
66603: PUSH
66604: LD_INT 4
66606: ARRAY
66607: ST_TO_ADDR
// end ;
66608: LD_VAR 0 3
66612: RET
// export function PlayerSeeMe ( unit ) ; begin
66613: LD_INT 0
66615: PPUSH
// result := See ( your_side , unit ) ;
66616: LD_ADDR_VAR 0 2
66620: PUSH
66621: LD_OWVAR 2
66625: PPUSH
66626: LD_VAR 0 1
66630: PPUSH
66631: CALL_OW 292
66635: ST_TO_ADDR
// end ;
66636: LD_VAR 0 2
66640: RET
// export function ReverseDir ( unit ) ; begin
66641: LD_INT 0
66643: PPUSH
// if not unit then
66644: LD_VAR 0 1
66648: NOT
66649: IFFALSE 66653
// exit ;
66651: GO 66676
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
66653: LD_ADDR_VAR 0 2
66657: PUSH
66658: LD_VAR 0 1
66662: PPUSH
66663: CALL_OW 254
66667: PUSH
66668: LD_INT 3
66670: PLUS
66671: PUSH
66672: LD_INT 6
66674: MOD
66675: ST_TO_ADDR
// end ;
66676: LD_VAR 0 2
66680: RET
// export function ReverseArray ( array ) ; var i ; begin
66681: LD_INT 0
66683: PPUSH
66684: PPUSH
// if not array then
66685: LD_VAR 0 1
66689: NOT
66690: IFFALSE 66694
// exit ;
66692: GO 66749
// result := [ ] ;
66694: LD_ADDR_VAR 0 2
66698: PUSH
66699: EMPTY
66700: ST_TO_ADDR
// for i := array downto 1 do
66701: LD_ADDR_VAR 0 3
66705: PUSH
66706: DOUBLE
66707: LD_VAR 0 1
66711: INC
66712: ST_TO_ADDR
66713: LD_INT 1
66715: PUSH
66716: FOR_DOWNTO
66717: IFFALSE 66747
// result := Join ( result , array [ i ] ) ;
66719: LD_ADDR_VAR 0 2
66723: PUSH
66724: LD_VAR 0 2
66728: PPUSH
66729: LD_VAR 0 1
66733: PUSH
66734: LD_VAR 0 3
66738: ARRAY
66739: PPUSH
66740: CALL 71414 0 2
66744: ST_TO_ADDR
66745: GO 66716
66747: POP
66748: POP
// end ;
66749: LD_VAR 0 2
66753: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
66754: LD_INT 0
66756: PPUSH
66757: PPUSH
66758: PPUSH
66759: PPUSH
66760: PPUSH
66761: PPUSH
// if not unit or not hexes then
66762: LD_VAR 0 1
66766: NOT
66767: PUSH
66768: LD_VAR 0 2
66772: NOT
66773: OR
66774: IFFALSE 66778
// exit ;
66776: GO 66901
// dist := 9999 ;
66778: LD_ADDR_VAR 0 5
66782: PUSH
66783: LD_INT 9999
66785: ST_TO_ADDR
// for i = 1 to hexes do
66786: LD_ADDR_VAR 0 4
66790: PUSH
66791: DOUBLE
66792: LD_INT 1
66794: DEC
66795: ST_TO_ADDR
66796: LD_VAR 0 2
66800: PUSH
66801: FOR_TO
66802: IFFALSE 66889
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
66804: LD_ADDR_VAR 0 6
66808: PUSH
66809: LD_VAR 0 1
66813: PPUSH
66814: LD_VAR 0 2
66818: PUSH
66819: LD_VAR 0 4
66823: ARRAY
66824: PUSH
66825: LD_INT 1
66827: ARRAY
66828: PPUSH
66829: LD_VAR 0 2
66833: PUSH
66834: LD_VAR 0 4
66838: ARRAY
66839: PUSH
66840: LD_INT 2
66842: ARRAY
66843: PPUSH
66844: CALL_OW 297
66848: ST_TO_ADDR
// if tdist < dist then
66849: LD_VAR 0 6
66853: PUSH
66854: LD_VAR 0 5
66858: LESS
66859: IFFALSE 66887
// begin hex := hexes [ i ] ;
66861: LD_ADDR_VAR 0 8
66865: PUSH
66866: LD_VAR 0 2
66870: PUSH
66871: LD_VAR 0 4
66875: ARRAY
66876: ST_TO_ADDR
// dist := tdist ;
66877: LD_ADDR_VAR 0 5
66881: PUSH
66882: LD_VAR 0 6
66886: ST_TO_ADDR
// end ; end ;
66887: GO 66801
66889: POP
66890: POP
// result := hex ;
66891: LD_ADDR_VAR 0 3
66895: PUSH
66896: LD_VAR 0 8
66900: ST_TO_ADDR
// end ;
66901: LD_VAR 0 3
66905: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
66906: LD_INT 0
66908: PPUSH
66909: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
66910: LD_VAR 0 1
66914: NOT
66915: PUSH
66916: LD_VAR 0 1
66920: PUSH
66921: LD_INT 21
66923: PUSH
66924: LD_INT 2
66926: PUSH
66927: EMPTY
66928: LIST
66929: LIST
66930: PUSH
66931: LD_INT 23
66933: PUSH
66934: LD_INT 2
66936: PUSH
66937: EMPTY
66938: LIST
66939: LIST
66940: PUSH
66941: EMPTY
66942: LIST
66943: LIST
66944: PPUSH
66945: CALL_OW 69
66949: IN
66950: NOT
66951: OR
66952: IFFALSE 66956
// exit ;
66954: GO 67003
// for i = 1 to 3 do
66956: LD_ADDR_VAR 0 3
66960: PUSH
66961: DOUBLE
66962: LD_INT 1
66964: DEC
66965: ST_TO_ADDR
66966: LD_INT 3
66968: PUSH
66969: FOR_TO
66970: IFFALSE 67001
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
66972: LD_VAR 0 1
66976: PPUSH
66977: CALL_OW 250
66981: PPUSH
66982: LD_VAR 0 1
66986: PPUSH
66987: CALL_OW 251
66991: PPUSH
66992: LD_INT 1
66994: PPUSH
66995: CALL_OW 453
66999: GO 66969
67001: POP
67002: POP
// end ;
67003: LD_VAR 0 2
67007: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
67008: LD_INT 0
67010: PPUSH
67011: PPUSH
67012: PPUSH
67013: PPUSH
67014: PPUSH
67015: PPUSH
// if not unit or not enemy_unit then
67016: LD_VAR 0 1
67020: NOT
67021: PUSH
67022: LD_VAR 0 2
67026: NOT
67027: OR
67028: IFFALSE 67032
// exit ;
67030: GO 67499
// if GetLives ( i ) < 250 then
67032: LD_VAR 0 4
67036: PPUSH
67037: CALL_OW 256
67041: PUSH
67042: LD_INT 250
67044: LESS
67045: IFFALSE 67058
// begin ComAutodestruct ( i ) ;
67047: LD_VAR 0 4
67051: PPUSH
67052: CALL 66906 0 1
// exit ;
67056: GO 67499
// end ; x := GetX ( enemy_unit ) ;
67058: LD_ADDR_VAR 0 7
67062: PUSH
67063: LD_VAR 0 2
67067: PPUSH
67068: CALL_OW 250
67072: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
67073: LD_ADDR_VAR 0 8
67077: PUSH
67078: LD_VAR 0 2
67082: PPUSH
67083: CALL_OW 251
67087: ST_TO_ADDR
// if not x or not y then
67088: LD_VAR 0 7
67092: NOT
67093: PUSH
67094: LD_VAR 0 8
67098: NOT
67099: OR
67100: IFFALSE 67104
// exit ;
67102: GO 67499
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
67104: LD_ADDR_VAR 0 6
67108: PUSH
67109: LD_VAR 0 7
67113: PPUSH
67114: LD_INT 0
67116: PPUSH
67117: LD_INT 4
67119: PPUSH
67120: CALL_OW 272
67124: PUSH
67125: LD_VAR 0 8
67129: PPUSH
67130: LD_INT 0
67132: PPUSH
67133: LD_INT 4
67135: PPUSH
67136: CALL_OW 273
67140: PUSH
67141: EMPTY
67142: LIST
67143: LIST
67144: PUSH
67145: LD_VAR 0 7
67149: PPUSH
67150: LD_INT 1
67152: PPUSH
67153: LD_INT 4
67155: PPUSH
67156: CALL_OW 272
67160: PUSH
67161: LD_VAR 0 8
67165: PPUSH
67166: LD_INT 1
67168: PPUSH
67169: LD_INT 4
67171: PPUSH
67172: CALL_OW 273
67176: PUSH
67177: EMPTY
67178: LIST
67179: LIST
67180: PUSH
67181: LD_VAR 0 7
67185: PPUSH
67186: LD_INT 2
67188: PPUSH
67189: LD_INT 4
67191: PPUSH
67192: CALL_OW 272
67196: PUSH
67197: LD_VAR 0 8
67201: PPUSH
67202: LD_INT 2
67204: PPUSH
67205: LD_INT 4
67207: PPUSH
67208: CALL_OW 273
67212: PUSH
67213: EMPTY
67214: LIST
67215: LIST
67216: PUSH
67217: LD_VAR 0 7
67221: PPUSH
67222: LD_INT 3
67224: PPUSH
67225: LD_INT 4
67227: PPUSH
67228: CALL_OW 272
67232: PUSH
67233: LD_VAR 0 8
67237: PPUSH
67238: LD_INT 3
67240: PPUSH
67241: LD_INT 4
67243: PPUSH
67244: CALL_OW 273
67248: PUSH
67249: EMPTY
67250: LIST
67251: LIST
67252: PUSH
67253: LD_VAR 0 7
67257: PPUSH
67258: LD_INT 4
67260: PPUSH
67261: LD_INT 4
67263: PPUSH
67264: CALL_OW 272
67268: PUSH
67269: LD_VAR 0 8
67273: PPUSH
67274: LD_INT 4
67276: PPUSH
67277: LD_INT 4
67279: PPUSH
67280: CALL_OW 273
67284: PUSH
67285: EMPTY
67286: LIST
67287: LIST
67288: PUSH
67289: LD_VAR 0 7
67293: PPUSH
67294: LD_INT 5
67296: PPUSH
67297: LD_INT 4
67299: PPUSH
67300: CALL_OW 272
67304: PUSH
67305: LD_VAR 0 8
67309: PPUSH
67310: LD_INT 5
67312: PPUSH
67313: LD_INT 4
67315: PPUSH
67316: CALL_OW 273
67320: PUSH
67321: EMPTY
67322: LIST
67323: LIST
67324: PUSH
67325: EMPTY
67326: LIST
67327: LIST
67328: LIST
67329: LIST
67330: LIST
67331: LIST
67332: ST_TO_ADDR
// for i = tmp downto 1 do
67333: LD_ADDR_VAR 0 4
67337: PUSH
67338: DOUBLE
67339: LD_VAR 0 6
67343: INC
67344: ST_TO_ADDR
67345: LD_INT 1
67347: PUSH
67348: FOR_DOWNTO
67349: IFFALSE 67450
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
67351: LD_VAR 0 6
67355: PUSH
67356: LD_VAR 0 4
67360: ARRAY
67361: PUSH
67362: LD_INT 1
67364: ARRAY
67365: PPUSH
67366: LD_VAR 0 6
67370: PUSH
67371: LD_VAR 0 4
67375: ARRAY
67376: PUSH
67377: LD_INT 2
67379: ARRAY
67380: PPUSH
67381: CALL_OW 488
67385: NOT
67386: PUSH
67387: LD_VAR 0 6
67391: PUSH
67392: LD_VAR 0 4
67396: ARRAY
67397: PUSH
67398: LD_INT 1
67400: ARRAY
67401: PPUSH
67402: LD_VAR 0 6
67406: PUSH
67407: LD_VAR 0 4
67411: ARRAY
67412: PUSH
67413: LD_INT 2
67415: ARRAY
67416: PPUSH
67417: CALL_OW 428
67421: PUSH
67422: LD_INT 0
67424: NONEQUAL
67425: OR
67426: IFFALSE 67448
// tmp := Delete ( tmp , i ) ;
67428: LD_ADDR_VAR 0 6
67432: PUSH
67433: LD_VAR 0 6
67437: PPUSH
67438: LD_VAR 0 4
67442: PPUSH
67443: CALL_OW 3
67447: ST_TO_ADDR
67448: GO 67348
67450: POP
67451: POP
// j := GetClosestHex ( unit , tmp ) ;
67452: LD_ADDR_VAR 0 5
67456: PUSH
67457: LD_VAR 0 1
67461: PPUSH
67462: LD_VAR 0 6
67466: PPUSH
67467: CALL 66754 0 2
67471: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
67472: LD_VAR 0 1
67476: PPUSH
67477: LD_VAR 0 5
67481: PUSH
67482: LD_INT 1
67484: ARRAY
67485: PPUSH
67486: LD_VAR 0 5
67490: PUSH
67491: LD_INT 2
67493: ARRAY
67494: PPUSH
67495: CALL_OW 111
// end ;
67499: LD_VAR 0 3
67503: RET
// export function PrepareApemanSoldier ( ) ; begin
67504: LD_INT 0
67506: PPUSH
// uc_nation := 0 ;
67507: LD_ADDR_OWVAR 21
67511: PUSH
67512: LD_INT 0
67514: ST_TO_ADDR
// hc_sex := sex_male ;
67515: LD_ADDR_OWVAR 27
67519: PUSH
67520: LD_INT 1
67522: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
67523: LD_ADDR_OWVAR 28
67527: PUSH
67528: LD_INT 15
67530: ST_TO_ADDR
// hc_gallery :=  ;
67531: LD_ADDR_OWVAR 33
67535: PUSH
67536: LD_STRING 
67538: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67539: LD_ADDR_OWVAR 31
67543: PUSH
67544: LD_INT 0
67546: PPUSH
67547: LD_INT 3
67549: PPUSH
67550: CALL_OW 12
67554: PUSH
67555: LD_INT 0
67557: PPUSH
67558: LD_INT 3
67560: PPUSH
67561: CALL_OW 12
67565: PUSH
67566: LD_INT 0
67568: PUSH
67569: LD_INT 0
67571: PUSH
67572: EMPTY
67573: LIST
67574: LIST
67575: LIST
67576: LIST
67577: ST_TO_ADDR
// end ;
67578: LD_VAR 0 1
67582: RET
// export function PrepareApemanEngineer ( ) ; begin
67583: LD_INT 0
67585: PPUSH
// uc_nation := 0 ;
67586: LD_ADDR_OWVAR 21
67590: PUSH
67591: LD_INT 0
67593: ST_TO_ADDR
// hc_sex := sex_male ;
67594: LD_ADDR_OWVAR 27
67598: PUSH
67599: LD_INT 1
67601: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
67602: LD_ADDR_OWVAR 28
67606: PUSH
67607: LD_INT 16
67609: ST_TO_ADDR
// hc_gallery :=  ;
67610: LD_ADDR_OWVAR 33
67614: PUSH
67615: LD_STRING 
67617: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67618: LD_ADDR_OWVAR 31
67622: PUSH
67623: LD_INT 0
67625: PPUSH
67626: LD_INT 3
67628: PPUSH
67629: CALL_OW 12
67633: PUSH
67634: LD_INT 0
67636: PPUSH
67637: LD_INT 3
67639: PPUSH
67640: CALL_OW 12
67644: PUSH
67645: LD_INT 0
67647: PUSH
67648: LD_INT 0
67650: PUSH
67651: EMPTY
67652: LIST
67653: LIST
67654: LIST
67655: LIST
67656: ST_TO_ADDR
// end ;
67657: LD_VAR 0 1
67661: RET
// export function PrepareApeman ( agressivity ) ; begin
67662: LD_INT 0
67664: PPUSH
// uc_side := 0 ;
67665: LD_ADDR_OWVAR 20
67669: PUSH
67670: LD_INT 0
67672: ST_TO_ADDR
// uc_nation := 0 ;
67673: LD_ADDR_OWVAR 21
67677: PUSH
67678: LD_INT 0
67680: ST_TO_ADDR
// hc_sex := sex_male ;
67681: LD_ADDR_OWVAR 27
67685: PUSH
67686: LD_INT 1
67688: ST_TO_ADDR
// hc_class := class_apeman ;
67689: LD_ADDR_OWVAR 28
67693: PUSH
67694: LD_INT 12
67696: ST_TO_ADDR
// hc_gallery :=  ;
67697: LD_ADDR_OWVAR 33
67701: PUSH
67702: LD_STRING 
67704: ST_TO_ADDR
// if agressivity = 0 then
67705: LD_VAR 0 1
67709: PUSH
67710: LD_INT 0
67712: EQUAL
67713: IFFALSE 67725
// hc_agressivity := 0 else
67715: LD_ADDR_OWVAR 35
67719: PUSH
67720: LD_INT 0
67722: ST_TO_ADDR
67723: GO 67746
// hc_agressivity := rand ( - agressivity , agressivity ) ;
67725: LD_ADDR_OWVAR 35
67729: PUSH
67730: LD_VAR 0 1
67734: NEG
67735: PPUSH
67736: LD_VAR 0 1
67740: PPUSH
67741: CALL_OW 12
67745: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67746: LD_ADDR_OWVAR 31
67750: PUSH
67751: LD_INT 0
67753: PPUSH
67754: LD_INT 3
67756: PPUSH
67757: CALL_OW 12
67761: PUSH
67762: LD_INT 0
67764: PPUSH
67765: LD_INT 3
67767: PPUSH
67768: CALL_OW 12
67772: PUSH
67773: LD_INT 0
67775: PUSH
67776: LD_INT 0
67778: PUSH
67779: EMPTY
67780: LIST
67781: LIST
67782: LIST
67783: LIST
67784: ST_TO_ADDR
// end ;
67785: LD_VAR 0 2
67789: RET
// export function PrepareTiger ( agressivity ) ; begin
67790: LD_INT 0
67792: PPUSH
// uc_side := 0 ;
67793: LD_ADDR_OWVAR 20
67797: PUSH
67798: LD_INT 0
67800: ST_TO_ADDR
// uc_nation := 0 ;
67801: LD_ADDR_OWVAR 21
67805: PUSH
67806: LD_INT 0
67808: ST_TO_ADDR
// hc_class := class_tiger ;
67809: LD_ADDR_OWVAR 28
67813: PUSH
67814: LD_INT 14
67816: ST_TO_ADDR
// hc_gallery :=  ;
67817: LD_ADDR_OWVAR 33
67821: PUSH
67822: LD_STRING 
67824: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
67825: LD_ADDR_OWVAR 35
67829: PUSH
67830: LD_VAR 0 1
67834: NEG
67835: PPUSH
67836: LD_VAR 0 1
67840: PPUSH
67841: CALL_OW 12
67845: ST_TO_ADDR
// end ;
67846: LD_VAR 0 2
67850: RET
// export function PrepareEnchidna ( ) ; begin
67851: LD_INT 0
67853: PPUSH
// uc_side := 0 ;
67854: LD_ADDR_OWVAR 20
67858: PUSH
67859: LD_INT 0
67861: ST_TO_ADDR
// uc_nation := 0 ;
67862: LD_ADDR_OWVAR 21
67866: PUSH
67867: LD_INT 0
67869: ST_TO_ADDR
// hc_class := class_baggie ;
67870: LD_ADDR_OWVAR 28
67874: PUSH
67875: LD_INT 13
67877: ST_TO_ADDR
// hc_gallery :=  ;
67878: LD_ADDR_OWVAR 33
67882: PUSH
67883: LD_STRING 
67885: ST_TO_ADDR
// end ;
67886: LD_VAR 0 1
67890: RET
// export function PrepareFrog ( ) ; begin
67891: LD_INT 0
67893: PPUSH
// uc_side := 0 ;
67894: LD_ADDR_OWVAR 20
67898: PUSH
67899: LD_INT 0
67901: ST_TO_ADDR
// uc_nation := 0 ;
67902: LD_ADDR_OWVAR 21
67906: PUSH
67907: LD_INT 0
67909: ST_TO_ADDR
// hc_class := class_frog ;
67910: LD_ADDR_OWVAR 28
67914: PUSH
67915: LD_INT 19
67917: ST_TO_ADDR
// hc_gallery :=  ;
67918: LD_ADDR_OWVAR 33
67922: PUSH
67923: LD_STRING 
67925: ST_TO_ADDR
// end ;
67926: LD_VAR 0 1
67930: RET
// export function PrepareFish ( ) ; begin
67931: LD_INT 0
67933: PPUSH
// uc_side := 0 ;
67934: LD_ADDR_OWVAR 20
67938: PUSH
67939: LD_INT 0
67941: ST_TO_ADDR
// uc_nation := 0 ;
67942: LD_ADDR_OWVAR 21
67946: PUSH
67947: LD_INT 0
67949: ST_TO_ADDR
// hc_class := class_fish ;
67950: LD_ADDR_OWVAR 28
67954: PUSH
67955: LD_INT 20
67957: ST_TO_ADDR
// hc_gallery :=  ;
67958: LD_ADDR_OWVAR 33
67962: PUSH
67963: LD_STRING 
67965: ST_TO_ADDR
// end ;
67966: LD_VAR 0 1
67970: RET
// export function PrepareBird ( ) ; begin
67971: LD_INT 0
67973: PPUSH
// uc_side := 0 ;
67974: LD_ADDR_OWVAR 20
67978: PUSH
67979: LD_INT 0
67981: ST_TO_ADDR
// uc_nation := 0 ;
67982: LD_ADDR_OWVAR 21
67986: PUSH
67987: LD_INT 0
67989: ST_TO_ADDR
// hc_class := class_phororhacos ;
67990: LD_ADDR_OWVAR 28
67994: PUSH
67995: LD_INT 18
67997: ST_TO_ADDR
// hc_gallery :=  ;
67998: LD_ADDR_OWVAR 33
68002: PUSH
68003: LD_STRING 
68005: ST_TO_ADDR
// end ;
68006: LD_VAR 0 1
68010: RET
// export function PrepareHorse ( ) ; begin
68011: LD_INT 0
68013: PPUSH
// uc_side := 0 ;
68014: LD_ADDR_OWVAR 20
68018: PUSH
68019: LD_INT 0
68021: ST_TO_ADDR
// uc_nation := 0 ;
68022: LD_ADDR_OWVAR 21
68026: PUSH
68027: LD_INT 0
68029: ST_TO_ADDR
// hc_class := class_horse ;
68030: LD_ADDR_OWVAR 28
68034: PUSH
68035: LD_INT 21
68037: ST_TO_ADDR
// hc_gallery :=  ;
68038: LD_ADDR_OWVAR 33
68042: PUSH
68043: LD_STRING 
68045: ST_TO_ADDR
// end ;
68046: LD_VAR 0 1
68050: RET
// export function PrepareMastodont ( ) ; begin
68051: LD_INT 0
68053: PPUSH
// uc_side := 0 ;
68054: LD_ADDR_OWVAR 20
68058: PUSH
68059: LD_INT 0
68061: ST_TO_ADDR
// uc_nation := 0 ;
68062: LD_ADDR_OWVAR 21
68066: PUSH
68067: LD_INT 0
68069: ST_TO_ADDR
// vc_chassis := class_mastodont ;
68070: LD_ADDR_OWVAR 37
68074: PUSH
68075: LD_INT 31
68077: ST_TO_ADDR
// vc_control := control_rider ;
68078: LD_ADDR_OWVAR 38
68082: PUSH
68083: LD_INT 4
68085: ST_TO_ADDR
// end ;
68086: LD_VAR 0 1
68090: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
68091: LD_INT 0
68093: PPUSH
68094: PPUSH
68095: PPUSH
// uc_side = 0 ;
68096: LD_ADDR_OWVAR 20
68100: PUSH
68101: LD_INT 0
68103: ST_TO_ADDR
// uc_nation = 0 ;
68104: LD_ADDR_OWVAR 21
68108: PUSH
68109: LD_INT 0
68111: ST_TO_ADDR
// InitHc_All ( ) ;
68112: CALL_OW 584
// InitVc ;
68116: CALL_OW 20
// if mastodonts then
68120: LD_VAR 0 6
68124: IFFALSE 68191
// for i = 1 to mastodonts do
68126: LD_ADDR_VAR 0 11
68130: PUSH
68131: DOUBLE
68132: LD_INT 1
68134: DEC
68135: ST_TO_ADDR
68136: LD_VAR 0 6
68140: PUSH
68141: FOR_TO
68142: IFFALSE 68189
// begin vc_chassis := 31 ;
68144: LD_ADDR_OWVAR 37
68148: PUSH
68149: LD_INT 31
68151: ST_TO_ADDR
// vc_control := control_rider ;
68152: LD_ADDR_OWVAR 38
68156: PUSH
68157: LD_INT 4
68159: ST_TO_ADDR
// animal := CreateVehicle ;
68160: LD_ADDR_VAR 0 12
68164: PUSH
68165: CALL_OW 45
68169: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68170: LD_VAR 0 12
68174: PPUSH
68175: LD_VAR 0 8
68179: PPUSH
68180: LD_INT 0
68182: PPUSH
68183: CALL 70319 0 3
// end ;
68187: GO 68141
68189: POP
68190: POP
// if horses then
68191: LD_VAR 0 5
68195: IFFALSE 68262
// for i = 1 to horses do
68197: LD_ADDR_VAR 0 11
68201: PUSH
68202: DOUBLE
68203: LD_INT 1
68205: DEC
68206: ST_TO_ADDR
68207: LD_VAR 0 5
68211: PUSH
68212: FOR_TO
68213: IFFALSE 68260
// begin hc_class := 21 ;
68215: LD_ADDR_OWVAR 28
68219: PUSH
68220: LD_INT 21
68222: ST_TO_ADDR
// hc_gallery :=  ;
68223: LD_ADDR_OWVAR 33
68227: PUSH
68228: LD_STRING 
68230: ST_TO_ADDR
// animal := CreateHuman ;
68231: LD_ADDR_VAR 0 12
68235: PUSH
68236: CALL_OW 44
68240: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68241: LD_VAR 0 12
68245: PPUSH
68246: LD_VAR 0 8
68250: PPUSH
68251: LD_INT 0
68253: PPUSH
68254: CALL 70319 0 3
// end ;
68258: GO 68212
68260: POP
68261: POP
// if birds then
68262: LD_VAR 0 1
68266: IFFALSE 68333
// for i = 1 to birds do
68268: LD_ADDR_VAR 0 11
68272: PUSH
68273: DOUBLE
68274: LD_INT 1
68276: DEC
68277: ST_TO_ADDR
68278: LD_VAR 0 1
68282: PUSH
68283: FOR_TO
68284: IFFALSE 68331
// begin hc_class := 18 ;
68286: LD_ADDR_OWVAR 28
68290: PUSH
68291: LD_INT 18
68293: ST_TO_ADDR
// hc_gallery =  ;
68294: LD_ADDR_OWVAR 33
68298: PUSH
68299: LD_STRING 
68301: ST_TO_ADDR
// animal := CreateHuman ;
68302: LD_ADDR_VAR 0 12
68306: PUSH
68307: CALL_OW 44
68311: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68312: LD_VAR 0 12
68316: PPUSH
68317: LD_VAR 0 8
68321: PPUSH
68322: LD_INT 0
68324: PPUSH
68325: CALL 70319 0 3
// end ;
68329: GO 68283
68331: POP
68332: POP
// if tigers then
68333: LD_VAR 0 2
68337: IFFALSE 68421
// for i = 1 to tigers do
68339: LD_ADDR_VAR 0 11
68343: PUSH
68344: DOUBLE
68345: LD_INT 1
68347: DEC
68348: ST_TO_ADDR
68349: LD_VAR 0 2
68353: PUSH
68354: FOR_TO
68355: IFFALSE 68419
// begin hc_class = class_tiger ;
68357: LD_ADDR_OWVAR 28
68361: PUSH
68362: LD_INT 14
68364: ST_TO_ADDR
// hc_gallery =  ;
68365: LD_ADDR_OWVAR 33
68369: PUSH
68370: LD_STRING 
68372: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
68373: LD_ADDR_OWVAR 35
68377: PUSH
68378: LD_INT 7
68380: NEG
68381: PPUSH
68382: LD_INT 7
68384: PPUSH
68385: CALL_OW 12
68389: ST_TO_ADDR
// animal := CreateHuman ;
68390: LD_ADDR_VAR 0 12
68394: PUSH
68395: CALL_OW 44
68399: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68400: LD_VAR 0 12
68404: PPUSH
68405: LD_VAR 0 8
68409: PPUSH
68410: LD_INT 0
68412: PPUSH
68413: CALL 70319 0 3
// end ;
68417: GO 68354
68419: POP
68420: POP
// if apemans then
68421: LD_VAR 0 3
68425: IFFALSE 68548
// for i = 1 to apemans do
68427: LD_ADDR_VAR 0 11
68431: PUSH
68432: DOUBLE
68433: LD_INT 1
68435: DEC
68436: ST_TO_ADDR
68437: LD_VAR 0 3
68441: PUSH
68442: FOR_TO
68443: IFFALSE 68546
// begin hc_class = class_apeman ;
68445: LD_ADDR_OWVAR 28
68449: PUSH
68450: LD_INT 12
68452: ST_TO_ADDR
// hc_gallery =  ;
68453: LD_ADDR_OWVAR 33
68457: PUSH
68458: LD_STRING 
68460: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
68461: LD_ADDR_OWVAR 35
68465: PUSH
68466: LD_INT 2
68468: NEG
68469: PPUSH
68470: LD_INT 2
68472: PPUSH
68473: CALL_OW 12
68477: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
68478: LD_ADDR_OWVAR 31
68482: PUSH
68483: LD_INT 1
68485: PPUSH
68486: LD_INT 3
68488: PPUSH
68489: CALL_OW 12
68493: PUSH
68494: LD_INT 1
68496: PPUSH
68497: LD_INT 3
68499: PPUSH
68500: CALL_OW 12
68504: PUSH
68505: LD_INT 0
68507: PUSH
68508: LD_INT 0
68510: PUSH
68511: EMPTY
68512: LIST
68513: LIST
68514: LIST
68515: LIST
68516: ST_TO_ADDR
// animal := CreateHuman ;
68517: LD_ADDR_VAR 0 12
68521: PUSH
68522: CALL_OW 44
68526: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68527: LD_VAR 0 12
68531: PPUSH
68532: LD_VAR 0 8
68536: PPUSH
68537: LD_INT 0
68539: PPUSH
68540: CALL 70319 0 3
// end ;
68544: GO 68442
68546: POP
68547: POP
// if enchidnas then
68548: LD_VAR 0 4
68552: IFFALSE 68619
// for i = 1 to enchidnas do
68554: LD_ADDR_VAR 0 11
68558: PUSH
68559: DOUBLE
68560: LD_INT 1
68562: DEC
68563: ST_TO_ADDR
68564: LD_VAR 0 4
68568: PUSH
68569: FOR_TO
68570: IFFALSE 68617
// begin hc_class = 13 ;
68572: LD_ADDR_OWVAR 28
68576: PUSH
68577: LD_INT 13
68579: ST_TO_ADDR
// hc_gallery =  ;
68580: LD_ADDR_OWVAR 33
68584: PUSH
68585: LD_STRING 
68587: ST_TO_ADDR
// animal := CreateHuman ;
68588: LD_ADDR_VAR 0 12
68592: PUSH
68593: CALL_OW 44
68597: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68598: LD_VAR 0 12
68602: PPUSH
68603: LD_VAR 0 8
68607: PPUSH
68608: LD_INT 0
68610: PPUSH
68611: CALL 70319 0 3
// end ;
68615: GO 68569
68617: POP
68618: POP
// if fishes then
68619: LD_VAR 0 7
68623: IFFALSE 68690
// for i = 1 to fishes do
68625: LD_ADDR_VAR 0 11
68629: PUSH
68630: DOUBLE
68631: LD_INT 1
68633: DEC
68634: ST_TO_ADDR
68635: LD_VAR 0 7
68639: PUSH
68640: FOR_TO
68641: IFFALSE 68688
// begin hc_class = 20 ;
68643: LD_ADDR_OWVAR 28
68647: PUSH
68648: LD_INT 20
68650: ST_TO_ADDR
// hc_gallery =  ;
68651: LD_ADDR_OWVAR 33
68655: PUSH
68656: LD_STRING 
68658: ST_TO_ADDR
// animal := CreateHuman ;
68659: LD_ADDR_VAR 0 12
68663: PUSH
68664: CALL_OW 44
68668: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
68669: LD_VAR 0 12
68673: PPUSH
68674: LD_VAR 0 9
68678: PPUSH
68679: LD_INT 0
68681: PPUSH
68682: CALL 70319 0 3
// end ;
68686: GO 68640
68688: POP
68689: POP
// end ;
68690: LD_VAR 0 10
68694: RET
// export function WantHeal ( sci , unit ) ; begin
68695: LD_INT 0
68697: PPUSH
// if GetTaskList ( sci ) > 0 then
68698: LD_VAR 0 1
68702: PPUSH
68703: CALL_OW 437
68707: PUSH
68708: LD_INT 0
68710: GREATER
68711: IFFALSE 68781
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
68713: LD_VAR 0 1
68717: PPUSH
68718: CALL_OW 437
68722: PUSH
68723: LD_INT 1
68725: ARRAY
68726: PUSH
68727: LD_INT 1
68729: ARRAY
68730: PUSH
68731: LD_STRING l
68733: EQUAL
68734: PUSH
68735: LD_VAR 0 1
68739: PPUSH
68740: CALL_OW 437
68744: PUSH
68745: LD_INT 1
68747: ARRAY
68748: PUSH
68749: LD_INT 4
68751: ARRAY
68752: PUSH
68753: LD_VAR 0 2
68757: EQUAL
68758: AND
68759: IFFALSE 68771
// result := true else
68761: LD_ADDR_VAR 0 3
68765: PUSH
68766: LD_INT 1
68768: ST_TO_ADDR
68769: GO 68779
// result := false ;
68771: LD_ADDR_VAR 0 3
68775: PUSH
68776: LD_INT 0
68778: ST_TO_ADDR
// end else
68779: GO 68789
// result := false ;
68781: LD_ADDR_VAR 0 3
68785: PUSH
68786: LD_INT 0
68788: ST_TO_ADDR
// end ;
68789: LD_VAR 0 3
68793: RET
// export function HealTarget ( sci ) ; begin
68794: LD_INT 0
68796: PPUSH
// if not sci then
68797: LD_VAR 0 1
68801: NOT
68802: IFFALSE 68806
// exit ;
68804: GO 68871
// result := 0 ;
68806: LD_ADDR_VAR 0 2
68810: PUSH
68811: LD_INT 0
68813: ST_TO_ADDR
// if GetTaskList ( sci ) then
68814: LD_VAR 0 1
68818: PPUSH
68819: CALL_OW 437
68823: IFFALSE 68871
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
68825: LD_VAR 0 1
68829: PPUSH
68830: CALL_OW 437
68834: PUSH
68835: LD_INT 1
68837: ARRAY
68838: PUSH
68839: LD_INT 1
68841: ARRAY
68842: PUSH
68843: LD_STRING l
68845: EQUAL
68846: IFFALSE 68871
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
68848: LD_ADDR_VAR 0 2
68852: PUSH
68853: LD_VAR 0 1
68857: PPUSH
68858: CALL_OW 437
68862: PUSH
68863: LD_INT 1
68865: ARRAY
68866: PUSH
68867: LD_INT 4
68869: ARRAY
68870: ST_TO_ADDR
// end ;
68871: LD_VAR 0 2
68875: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
68876: LD_INT 0
68878: PPUSH
68879: PPUSH
68880: PPUSH
68881: PPUSH
// if not base_units then
68882: LD_VAR 0 1
68886: NOT
68887: IFFALSE 68891
// exit ;
68889: GO 68978
// result := false ;
68891: LD_ADDR_VAR 0 2
68895: PUSH
68896: LD_INT 0
68898: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
68899: LD_ADDR_VAR 0 5
68903: PUSH
68904: LD_VAR 0 1
68908: PPUSH
68909: LD_INT 21
68911: PUSH
68912: LD_INT 3
68914: PUSH
68915: EMPTY
68916: LIST
68917: LIST
68918: PPUSH
68919: CALL_OW 72
68923: ST_TO_ADDR
// if not tmp then
68924: LD_VAR 0 5
68928: NOT
68929: IFFALSE 68933
// exit ;
68931: GO 68978
// for i in tmp do
68933: LD_ADDR_VAR 0 3
68937: PUSH
68938: LD_VAR 0 5
68942: PUSH
68943: FOR_IN
68944: IFFALSE 68976
// begin result := EnemyInRange ( i , 22 ) ;
68946: LD_ADDR_VAR 0 2
68950: PUSH
68951: LD_VAR 0 3
68955: PPUSH
68956: LD_INT 22
68958: PPUSH
68959: CALL 66556 0 2
68963: ST_TO_ADDR
// if result then
68964: LD_VAR 0 2
68968: IFFALSE 68974
// exit ;
68970: POP
68971: POP
68972: GO 68978
// end ;
68974: GO 68943
68976: POP
68977: POP
// end ;
68978: LD_VAR 0 2
68982: RET
// export function FilterByTag ( units , tag ) ; begin
68983: LD_INT 0
68985: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
68986: LD_ADDR_VAR 0 3
68990: PUSH
68991: LD_VAR 0 1
68995: PPUSH
68996: LD_INT 120
68998: PUSH
68999: LD_VAR 0 2
69003: PUSH
69004: EMPTY
69005: LIST
69006: LIST
69007: PPUSH
69008: CALL_OW 72
69012: ST_TO_ADDR
// end ;
69013: LD_VAR 0 3
69017: RET
// export function IsDriver ( un ) ; begin
69018: LD_INT 0
69020: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
69021: LD_ADDR_VAR 0 2
69025: PUSH
69026: LD_VAR 0 1
69030: PUSH
69031: LD_INT 55
69033: PUSH
69034: EMPTY
69035: LIST
69036: PPUSH
69037: CALL_OW 69
69041: IN
69042: ST_TO_ADDR
// end ;
69043: LD_VAR 0 2
69047: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
69048: LD_INT 0
69050: PPUSH
69051: PPUSH
// list := [ ] ;
69052: LD_ADDR_VAR 0 5
69056: PUSH
69057: EMPTY
69058: ST_TO_ADDR
// case d of 0 :
69059: LD_VAR 0 3
69063: PUSH
69064: LD_INT 0
69066: DOUBLE
69067: EQUAL
69068: IFTRUE 69072
69070: GO 69205
69072: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
69073: LD_ADDR_VAR 0 5
69077: PUSH
69078: LD_VAR 0 1
69082: PUSH
69083: LD_INT 4
69085: MINUS
69086: PUSH
69087: LD_VAR 0 2
69091: PUSH
69092: LD_INT 4
69094: MINUS
69095: PUSH
69096: LD_INT 2
69098: PUSH
69099: EMPTY
69100: LIST
69101: LIST
69102: LIST
69103: PUSH
69104: LD_VAR 0 1
69108: PUSH
69109: LD_INT 3
69111: MINUS
69112: PUSH
69113: LD_VAR 0 2
69117: PUSH
69118: LD_INT 1
69120: PUSH
69121: EMPTY
69122: LIST
69123: LIST
69124: LIST
69125: PUSH
69126: LD_VAR 0 1
69130: PUSH
69131: LD_INT 4
69133: PLUS
69134: PUSH
69135: LD_VAR 0 2
69139: PUSH
69140: LD_INT 4
69142: PUSH
69143: EMPTY
69144: LIST
69145: LIST
69146: LIST
69147: PUSH
69148: LD_VAR 0 1
69152: PUSH
69153: LD_INT 3
69155: PLUS
69156: PUSH
69157: LD_VAR 0 2
69161: PUSH
69162: LD_INT 3
69164: PLUS
69165: PUSH
69166: LD_INT 5
69168: PUSH
69169: EMPTY
69170: LIST
69171: LIST
69172: LIST
69173: PUSH
69174: LD_VAR 0 1
69178: PUSH
69179: LD_VAR 0 2
69183: PUSH
69184: LD_INT 4
69186: PLUS
69187: PUSH
69188: LD_INT 0
69190: PUSH
69191: EMPTY
69192: LIST
69193: LIST
69194: LIST
69195: PUSH
69196: EMPTY
69197: LIST
69198: LIST
69199: LIST
69200: LIST
69201: LIST
69202: ST_TO_ADDR
// end ; 1 :
69203: GO 69903
69205: LD_INT 1
69207: DOUBLE
69208: EQUAL
69209: IFTRUE 69213
69211: GO 69346
69213: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
69214: LD_ADDR_VAR 0 5
69218: PUSH
69219: LD_VAR 0 1
69223: PUSH
69224: LD_VAR 0 2
69228: PUSH
69229: LD_INT 4
69231: MINUS
69232: PUSH
69233: LD_INT 3
69235: PUSH
69236: EMPTY
69237: LIST
69238: LIST
69239: LIST
69240: PUSH
69241: LD_VAR 0 1
69245: PUSH
69246: LD_INT 3
69248: MINUS
69249: PUSH
69250: LD_VAR 0 2
69254: PUSH
69255: LD_INT 3
69257: MINUS
69258: PUSH
69259: LD_INT 2
69261: PUSH
69262: EMPTY
69263: LIST
69264: LIST
69265: LIST
69266: PUSH
69267: LD_VAR 0 1
69271: PUSH
69272: LD_INT 4
69274: MINUS
69275: PUSH
69276: LD_VAR 0 2
69280: PUSH
69281: LD_INT 1
69283: PUSH
69284: EMPTY
69285: LIST
69286: LIST
69287: LIST
69288: PUSH
69289: LD_VAR 0 1
69293: PUSH
69294: LD_VAR 0 2
69298: PUSH
69299: LD_INT 3
69301: PLUS
69302: PUSH
69303: LD_INT 0
69305: PUSH
69306: EMPTY
69307: LIST
69308: LIST
69309: LIST
69310: PUSH
69311: LD_VAR 0 1
69315: PUSH
69316: LD_INT 4
69318: PLUS
69319: PUSH
69320: LD_VAR 0 2
69324: PUSH
69325: LD_INT 4
69327: PLUS
69328: PUSH
69329: LD_INT 5
69331: PUSH
69332: EMPTY
69333: LIST
69334: LIST
69335: LIST
69336: PUSH
69337: EMPTY
69338: LIST
69339: LIST
69340: LIST
69341: LIST
69342: LIST
69343: ST_TO_ADDR
// end ; 2 :
69344: GO 69903
69346: LD_INT 2
69348: DOUBLE
69349: EQUAL
69350: IFTRUE 69354
69352: GO 69483
69354: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
69355: LD_ADDR_VAR 0 5
69359: PUSH
69360: LD_VAR 0 1
69364: PUSH
69365: LD_VAR 0 2
69369: PUSH
69370: LD_INT 3
69372: MINUS
69373: PUSH
69374: LD_INT 3
69376: PUSH
69377: EMPTY
69378: LIST
69379: LIST
69380: LIST
69381: PUSH
69382: LD_VAR 0 1
69386: PUSH
69387: LD_INT 4
69389: PLUS
69390: PUSH
69391: LD_VAR 0 2
69395: PUSH
69396: LD_INT 4
69398: PUSH
69399: EMPTY
69400: LIST
69401: LIST
69402: LIST
69403: PUSH
69404: LD_VAR 0 1
69408: PUSH
69409: LD_VAR 0 2
69413: PUSH
69414: LD_INT 4
69416: PLUS
69417: PUSH
69418: LD_INT 0
69420: PUSH
69421: EMPTY
69422: LIST
69423: LIST
69424: LIST
69425: PUSH
69426: LD_VAR 0 1
69430: PUSH
69431: LD_INT 3
69433: MINUS
69434: PUSH
69435: LD_VAR 0 2
69439: PUSH
69440: LD_INT 1
69442: PUSH
69443: EMPTY
69444: LIST
69445: LIST
69446: LIST
69447: PUSH
69448: LD_VAR 0 1
69452: PUSH
69453: LD_INT 4
69455: MINUS
69456: PUSH
69457: LD_VAR 0 2
69461: PUSH
69462: LD_INT 4
69464: MINUS
69465: PUSH
69466: LD_INT 2
69468: PUSH
69469: EMPTY
69470: LIST
69471: LIST
69472: LIST
69473: PUSH
69474: EMPTY
69475: LIST
69476: LIST
69477: LIST
69478: LIST
69479: LIST
69480: ST_TO_ADDR
// end ; 3 :
69481: GO 69903
69483: LD_INT 3
69485: DOUBLE
69486: EQUAL
69487: IFTRUE 69491
69489: GO 69624
69491: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
69492: LD_ADDR_VAR 0 5
69496: PUSH
69497: LD_VAR 0 1
69501: PUSH
69502: LD_INT 3
69504: PLUS
69505: PUSH
69506: LD_VAR 0 2
69510: PUSH
69511: LD_INT 4
69513: PUSH
69514: EMPTY
69515: LIST
69516: LIST
69517: LIST
69518: PUSH
69519: LD_VAR 0 1
69523: PUSH
69524: LD_INT 4
69526: PLUS
69527: PUSH
69528: LD_VAR 0 2
69532: PUSH
69533: LD_INT 4
69535: PLUS
69536: PUSH
69537: LD_INT 5
69539: PUSH
69540: EMPTY
69541: LIST
69542: LIST
69543: LIST
69544: PUSH
69545: LD_VAR 0 1
69549: PUSH
69550: LD_INT 4
69552: MINUS
69553: PUSH
69554: LD_VAR 0 2
69558: PUSH
69559: LD_INT 1
69561: PUSH
69562: EMPTY
69563: LIST
69564: LIST
69565: LIST
69566: PUSH
69567: LD_VAR 0 1
69571: PUSH
69572: LD_VAR 0 2
69576: PUSH
69577: LD_INT 4
69579: MINUS
69580: PUSH
69581: LD_INT 3
69583: PUSH
69584: EMPTY
69585: LIST
69586: LIST
69587: LIST
69588: PUSH
69589: LD_VAR 0 1
69593: PUSH
69594: LD_INT 3
69596: MINUS
69597: PUSH
69598: LD_VAR 0 2
69602: PUSH
69603: LD_INT 3
69605: MINUS
69606: PUSH
69607: LD_INT 2
69609: PUSH
69610: EMPTY
69611: LIST
69612: LIST
69613: LIST
69614: PUSH
69615: EMPTY
69616: LIST
69617: LIST
69618: LIST
69619: LIST
69620: LIST
69621: ST_TO_ADDR
// end ; 4 :
69622: GO 69903
69624: LD_INT 4
69626: DOUBLE
69627: EQUAL
69628: IFTRUE 69632
69630: GO 69765
69632: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
69633: LD_ADDR_VAR 0 5
69637: PUSH
69638: LD_VAR 0 1
69642: PUSH
69643: LD_VAR 0 2
69647: PUSH
69648: LD_INT 4
69650: PLUS
69651: PUSH
69652: LD_INT 0
69654: PUSH
69655: EMPTY
69656: LIST
69657: LIST
69658: LIST
69659: PUSH
69660: LD_VAR 0 1
69664: PUSH
69665: LD_INT 3
69667: PLUS
69668: PUSH
69669: LD_VAR 0 2
69673: PUSH
69674: LD_INT 3
69676: PLUS
69677: PUSH
69678: LD_INT 5
69680: PUSH
69681: EMPTY
69682: LIST
69683: LIST
69684: LIST
69685: PUSH
69686: LD_VAR 0 1
69690: PUSH
69691: LD_INT 4
69693: PLUS
69694: PUSH
69695: LD_VAR 0 2
69699: PUSH
69700: LD_INT 4
69702: PUSH
69703: EMPTY
69704: LIST
69705: LIST
69706: LIST
69707: PUSH
69708: LD_VAR 0 1
69712: PUSH
69713: LD_VAR 0 2
69717: PUSH
69718: LD_INT 3
69720: MINUS
69721: PUSH
69722: LD_INT 3
69724: PUSH
69725: EMPTY
69726: LIST
69727: LIST
69728: LIST
69729: PUSH
69730: LD_VAR 0 1
69734: PUSH
69735: LD_INT 4
69737: MINUS
69738: PUSH
69739: LD_VAR 0 2
69743: PUSH
69744: LD_INT 4
69746: MINUS
69747: PUSH
69748: LD_INT 2
69750: PUSH
69751: EMPTY
69752: LIST
69753: LIST
69754: LIST
69755: PUSH
69756: EMPTY
69757: LIST
69758: LIST
69759: LIST
69760: LIST
69761: LIST
69762: ST_TO_ADDR
// end ; 5 :
69763: GO 69903
69765: LD_INT 5
69767: DOUBLE
69768: EQUAL
69769: IFTRUE 69773
69771: GO 69902
69773: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
69774: LD_ADDR_VAR 0 5
69778: PUSH
69779: LD_VAR 0 1
69783: PUSH
69784: LD_INT 4
69786: MINUS
69787: PUSH
69788: LD_VAR 0 2
69792: PUSH
69793: LD_INT 1
69795: PUSH
69796: EMPTY
69797: LIST
69798: LIST
69799: LIST
69800: PUSH
69801: LD_VAR 0 1
69805: PUSH
69806: LD_VAR 0 2
69810: PUSH
69811: LD_INT 4
69813: MINUS
69814: PUSH
69815: LD_INT 3
69817: PUSH
69818: EMPTY
69819: LIST
69820: LIST
69821: LIST
69822: PUSH
69823: LD_VAR 0 1
69827: PUSH
69828: LD_INT 4
69830: PLUS
69831: PUSH
69832: LD_VAR 0 2
69836: PUSH
69837: LD_INT 4
69839: PLUS
69840: PUSH
69841: LD_INT 5
69843: PUSH
69844: EMPTY
69845: LIST
69846: LIST
69847: LIST
69848: PUSH
69849: LD_VAR 0 1
69853: PUSH
69854: LD_INT 3
69856: PLUS
69857: PUSH
69858: LD_VAR 0 2
69862: PUSH
69863: LD_INT 4
69865: PUSH
69866: EMPTY
69867: LIST
69868: LIST
69869: LIST
69870: PUSH
69871: LD_VAR 0 1
69875: PUSH
69876: LD_VAR 0 2
69880: PUSH
69881: LD_INT 3
69883: PLUS
69884: PUSH
69885: LD_INT 0
69887: PUSH
69888: EMPTY
69889: LIST
69890: LIST
69891: LIST
69892: PUSH
69893: EMPTY
69894: LIST
69895: LIST
69896: LIST
69897: LIST
69898: LIST
69899: ST_TO_ADDR
// end ; end ;
69900: GO 69903
69902: POP
// result := list ;
69903: LD_ADDR_VAR 0 4
69907: PUSH
69908: LD_VAR 0 5
69912: ST_TO_ADDR
// end ;
69913: LD_VAR 0 4
69917: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
69918: LD_INT 0
69920: PPUSH
69921: PPUSH
69922: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
69923: LD_VAR 0 1
69927: NOT
69928: PUSH
69929: LD_VAR 0 2
69933: PUSH
69934: LD_INT 1
69936: PUSH
69937: LD_INT 2
69939: PUSH
69940: LD_INT 3
69942: PUSH
69943: LD_INT 4
69945: PUSH
69946: EMPTY
69947: LIST
69948: LIST
69949: LIST
69950: LIST
69951: IN
69952: NOT
69953: OR
69954: IFFALSE 69958
// exit ;
69956: GO 70041
// tmp := [ ] ;
69958: LD_ADDR_VAR 0 5
69962: PUSH
69963: EMPTY
69964: ST_TO_ADDR
// for i in units do
69965: LD_ADDR_VAR 0 4
69969: PUSH
69970: LD_VAR 0 1
69974: PUSH
69975: FOR_IN
69976: IFFALSE 70010
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
69978: LD_ADDR_VAR 0 5
69982: PUSH
69983: LD_VAR 0 5
69987: PPUSH
69988: LD_VAR 0 4
69992: PPUSH
69993: LD_VAR 0 2
69997: PPUSH
69998: CALL_OW 259
70002: PPUSH
70003: CALL 71414 0 2
70007: ST_TO_ADDR
70008: GO 69975
70010: POP
70011: POP
// if not tmp then
70012: LD_VAR 0 5
70016: NOT
70017: IFFALSE 70021
// exit ;
70019: GO 70041
// result := SortListByListDesc ( units , tmp ) ;
70021: LD_ADDR_VAR 0 3
70025: PUSH
70026: LD_VAR 0 1
70030: PPUSH
70031: LD_VAR 0 5
70035: PPUSH
70036: CALL_OW 77
70040: ST_TO_ADDR
// end ;
70041: LD_VAR 0 3
70045: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
70046: LD_INT 0
70048: PPUSH
70049: PPUSH
70050: PPUSH
// result := false ;
70051: LD_ADDR_VAR 0 3
70055: PUSH
70056: LD_INT 0
70058: ST_TO_ADDR
// if not building then
70059: LD_VAR 0 2
70063: NOT
70064: IFFALSE 70068
// exit ;
70066: GO 70206
// x := GetX ( building ) ;
70068: LD_ADDR_VAR 0 4
70072: PUSH
70073: LD_VAR 0 2
70077: PPUSH
70078: CALL_OW 250
70082: ST_TO_ADDR
// y := GetY ( building ) ;
70083: LD_ADDR_VAR 0 5
70087: PUSH
70088: LD_VAR 0 2
70092: PPUSH
70093: CALL_OW 251
70097: ST_TO_ADDR
// if not x or not y then
70098: LD_VAR 0 4
70102: NOT
70103: PUSH
70104: LD_VAR 0 5
70108: NOT
70109: OR
70110: IFFALSE 70114
// exit ;
70112: GO 70206
// if GetTaskList ( unit ) then
70114: LD_VAR 0 1
70118: PPUSH
70119: CALL_OW 437
70123: IFFALSE 70206
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70125: LD_STRING e
70127: PUSH
70128: LD_VAR 0 1
70132: PPUSH
70133: CALL_OW 437
70137: PUSH
70138: LD_INT 1
70140: ARRAY
70141: PUSH
70142: LD_INT 1
70144: ARRAY
70145: EQUAL
70146: PUSH
70147: LD_VAR 0 4
70151: PUSH
70152: LD_VAR 0 1
70156: PPUSH
70157: CALL_OW 437
70161: PUSH
70162: LD_INT 1
70164: ARRAY
70165: PUSH
70166: LD_INT 2
70168: ARRAY
70169: EQUAL
70170: AND
70171: PUSH
70172: LD_VAR 0 5
70176: PUSH
70177: LD_VAR 0 1
70181: PPUSH
70182: CALL_OW 437
70186: PUSH
70187: LD_INT 1
70189: ARRAY
70190: PUSH
70191: LD_INT 3
70193: ARRAY
70194: EQUAL
70195: AND
70196: IFFALSE 70206
// result := true end ;
70198: LD_ADDR_VAR 0 3
70202: PUSH
70203: LD_INT 1
70205: ST_TO_ADDR
// end ;
70206: LD_VAR 0 3
70210: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
70211: LD_INT 0
70213: PPUSH
// result := false ;
70214: LD_ADDR_VAR 0 4
70218: PUSH
70219: LD_INT 0
70221: ST_TO_ADDR
// if GetTaskList ( unit ) then
70222: LD_VAR 0 1
70226: PPUSH
70227: CALL_OW 437
70231: IFFALSE 70314
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
70233: LD_STRING M
70235: PUSH
70236: LD_VAR 0 1
70240: PPUSH
70241: CALL_OW 437
70245: PUSH
70246: LD_INT 1
70248: ARRAY
70249: PUSH
70250: LD_INT 1
70252: ARRAY
70253: EQUAL
70254: PUSH
70255: LD_VAR 0 2
70259: PUSH
70260: LD_VAR 0 1
70264: PPUSH
70265: CALL_OW 437
70269: PUSH
70270: LD_INT 1
70272: ARRAY
70273: PUSH
70274: LD_INT 2
70276: ARRAY
70277: EQUAL
70278: AND
70279: PUSH
70280: LD_VAR 0 3
70284: PUSH
70285: LD_VAR 0 1
70289: PPUSH
70290: CALL_OW 437
70294: PUSH
70295: LD_INT 1
70297: ARRAY
70298: PUSH
70299: LD_INT 3
70301: ARRAY
70302: EQUAL
70303: AND
70304: IFFALSE 70314
// result := true ;
70306: LD_ADDR_VAR 0 4
70310: PUSH
70311: LD_INT 1
70313: ST_TO_ADDR
// end ; end ;
70314: LD_VAR 0 4
70318: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
70319: LD_INT 0
70321: PPUSH
70322: PPUSH
70323: PPUSH
70324: PPUSH
// if not unit or not area then
70325: LD_VAR 0 1
70329: NOT
70330: PUSH
70331: LD_VAR 0 2
70335: NOT
70336: OR
70337: IFFALSE 70341
// exit ;
70339: GO 70517
// tmp := AreaToList ( area , i ) ;
70341: LD_ADDR_VAR 0 6
70345: PUSH
70346: LD_VAR 0 2
70350: PPUSH
70351: LD_VAR 0 5
70355: PPUSH
70356: CALL_OW 517
70360: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
70361: LD_ADDR_VAR 0 5
70365: PUSH
70366: DOUBLE
70367: LD_INT 1
70369: DEC
70370: ST_TO_ADDR
70371: LD_VAR 0 6
70375: PUSH
70376: LD_INT 1
70378: ARRAY
70379: PUSH
70380: FOR_TO
70381: IFFALSE 70515
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
70383: LD_ADDR_VAR 0 7
70387: PUSH
70388: LD_VAR 0 6
70392: PUSH
70393: LD_INT 1
70395: ARRAY
70396: PUSH
70397: LD_VAR 0 5
70401: ARRAY
70402: PUSH
70403: LD_VAR 0 6
70407: PUSH
70408: LD_INT 2
70410: ARRAY
70411: PUSH
70412: LD_VAR 0 5
70416: ARRAY
70417: PUSH
70418: EMPTY
70419: LIST
70420: LIST
70421: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
70422: LD_INT 92
70424: PUSH
70425: LD_VAR 0 7
70429: PUSH
70430: LD_INT 1
70432: ARRAY
70433: PUSH
70434: LD_VAR 0 7
70438: PUSH
70439: LD_INT 2
70441: ARRAY
70442: PUSH
70443: LD_INT 2
70445: PUSH
70446: EMPTY
70447: LIST
70448: LIST
70449: LIST
70450: LIST
70451: PPUSH
70452: CALL_OW 69
70456: PUSH
70457: LD_INT 0
70459: EQUAL
70460: IFFALSE 70513
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
70462: LD_VAR 0 1
70466: PPUSH
70467: LD_VAR 0 7
70471: PUSH
70472: LD_INT 1
70474: ARRAY
70475: PPUSH
70476: LD_VAR 0 7
70480: PUSH
70481: LD_INT 2
70483: ARRAY
70484: PPUSH
70485: LD_VAR 0 3
70489: PPUSH
70490: CALL_OW 48
// result := IsPlaced ( unit ) ;
70494: LD_ADDR_VAR 0 4
70498: PUSH
70499: LD_VAR 0 1
70503: PPUSH
70504: CALL_OW 305
70508: ST_TO_ADDR
// exit ;
70509: POP
70510: POP
70511: GO 70517
// end ; end ;
70513: GO 70380
70515: POP
70516: POP
// end ;
70517: LD_VAR 0 4
70521: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
70522: LD_INT 0
70524: PPUSH
70525: PPUSH
70526: PPUSH
// if not side or side > 8 then
70527: LD_VAR 0 1
70531: NOT
70532: PUSH
70533: LD_VAR 0 1
70537: PUSH
70538: LD_INT 8
70540: GREATER
70541: OR
70542: IFFALSE 70546
// exit ;
70544: GO 70733
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
70546: LD_ADDR_VAR 0 4
70550: PUSH
70551: LD_INT 22
70553: PUSH
70554: LD_VAR 0 1
70558: PUSH
70559: EMPTY
70560: LIST
70561: LIST
70562: PUSH
70563: LD_INT 21
70565: PUSH
70566: LD_INT 3
70568: PUSH
70569: EMPTY
70570: LIST
70571: LIST
70572: PUSH
70573: EMPTY
70574: LIST
70575: LIST
70576: PPUSH
70577: CALL_OW 69
70581: ST_TO_ADDR
// if not tmp then
70582: LD_VAR 0 4
70586: NOT
70587: IFFALSE 70591
// exit ;
70589: GO 70733
// enable_addtolog := true ;
70591: LD_ADDR_OWVAR 81
70595: PUSH
70596: LD_INT 1
70598: ST_TO_ADDR
// AddToLog ( [ ) ;
70599: LD_STRING [
70601: PPUSH
70602: CALL_OW 561
// for i in tmp do
70606: LD_ADDR_VAR 0 3
70610: PUSH
70611: LD_VAR 0 4
70615: PUSH
70616: FOR_IN
70617: IFFALSE 70724
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
70619: LD_STRING [
70621: PUSH
70622: LD_VAR 0 3
70626: PPUSH
70627: CALL_OW 266
70631: STR
70632: PUSH
70633: LD_STRING , 
70635: STR
70636: PUSH
70637: LD_VAR 0 3
70641: PPUSH
70642: CALL_OW 250
70646: STR
70647: PUSH
70648: LD_STRING , 
70650: STR
70651: PUSH
70652: LD_VAR 0 3
70656: PPUSH
70657: CALL_OW 251
70661: STR
70662: PUSH
70663: LD_STRING , 
70665: STR
70666: PUSH
70667: LD_VAR 0 3
70671: PPUSH
70672: CALL_OW 254
70676: STR
70677: PUSH
70678: LD_STRING , 
70680: STR
70681: PUSH
70682: LD_VAR 0 3
70686: PPUSH
70687: LD_INT 1
70689: PPUSH
70690: CALL_OW 268
70694: STR
70695: PUSH
70696: LD_STRING , 
70698: STR
70699: PUSH
70700: LD_VAR 0 3
70704: PPUSH
70705: LD_INT 2
70707: PPUSH
70708: CALL_OW 268
70712: STR
70713: PUSH
70714: LD_STRING ],
70716: STR
70717: PPUSH
70718: CALL_OW 561
// end ;
70722: GO 70616
70724: POP
70725: POP
// AddToLog ( ]; ) ;
70726: LD_STRING ];
70728: PPUSH
70729: CALL_OW 561
// end ;
70733: LD_VAR 0 2
70737: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
70738: LD_INT 0
70740: PPUSH
70741: PPUSH
70742: PPUSH
70743: PPUSH
70744: PPUSH
// if not area or not rate or not max then
70745: LD_VAR 0 1
70749: NOT
70750: PUSH
70751: LD_VAR 0 2
70755: NOT
70756: OR
70757: PUSH
70758: LD_VAR 0 4
70762: NOT
70763: OR
70764: IFFALSE 70768
// exit ;
70766: GO 70957
// while 1 do
70768: LD_INT 1
70770: IFFALSE 70957
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
70772: LD_ADDR_VAR 0 9
70776: PUSH
70777: LD_VAR 0 1
70781: PPUSH
70782: LD_INT 1
70784: PPUSH
70785: CALL_OW 287
70789: PUSH
70790: LD_INT 10
70792: MUL
70793: ST_TO_ADDR
// r := rate / 10 ;
70794: LD_ADDR_VAR 0 7
70798: PUSH
70799: LD_VAR 0 2
70803: PUSH
70804: LD_INT 10
70806: DIVREAL
70807: ST_TO_ADDR
// time := 1 1$00 ;
70808: LD_ADDR_VAR 0 8
70812: PUSH
70813: LD_INT 2100
70815: ST_TO_ADDR
// if amount < min then
70816: LD_VAR 0 9
70820: PUSH
70821: LD_VAR 0 3
70825: LESS
70826: IFFALSE 70844
// r := r * 2 else
70828: LD_ADDR_VAR 0 7
70832: PUSH
70833: LD_VAR 0 7
70837: PUSH
70838: LD_INT 2
70840: MUL
70841: ST_TO_ADDR
70842: GO 70870
// if amount > max then
70844: LD_VAR 0 9
70848: PUSH
70849: LD_VAR 0 4
70853: GREATER
70854: IFFALSE 70870
// r := r / 2 ;
70856: LD_ADDR_VAR 0 7
70860: PUSH
70861: LD_VAR 0 7
70865: PUSH
70866: LD_INT 2
70868: DIVREAL
70869: ST_TO_ADDR
// time := time / r ;
70870: LD_ADDR_VAR 0 8
70874: PUSH
70875: LD_VAR 0 8
70879: PUSH
70880: LD_VAR 0 7
70884: DIVREAL
70885: ST_TO_ADDR
// if time < 0 then
70886: LD_VAR 0 8
70890: PUSH
70891: LD_INT 0
70893: LESS
70894: IFFALSE 70911
// time := time * - 1 ;
70896: LD_ADDR_VAR 0 8
70900: PUSH
70901: LD_VAR 0 8
70905: PUSH
70906: LD_INT 1
70908: NEG
70909: MUL
70910: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
70911: LD_VAR 0 8
70915: PUSH
70916: LD_INT 35
70918: PPUSH
70919: LD_INT 875
70921: PPUSH
70922: CALL_OW 12
70926: PLUS
70927: PPUSH
70928: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
70932: LD_INT 1
70934: PPUSH
70935: LD_INT 5
70937: PPUSH
70938: CALL_OW 12
70942: PPUSH
70943: LD_VAR 0 1
70947: PPUSH
70948: LD_INT 1
70950: PPUSH
70951: CALL_OW 55
// end ;
70955: GO 70768
// end ;
70957: LD_VAR 0 5
70961: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
70962: LD_INT 0
70964: PPUSH
70965: PPUSH
70966: PPUSH
70967: PPUSH
70968: PPUSH
70969: PPUSH
70970: PPUSH
70971: PPUSH
// if not turrets or not factories then
70972: LD_VAR 0 1
70976: NOT
70977: PUSH
70978: LD_VAR 0 2
70982: NOT
70983: OR
70984: IFFALSE 70988
// exit ;
70986: GO 71295
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
70988: LD_ADDR_VAR 0 10
70992: PUSH
70993: LD_INT 5
70995: PUSH
70996: LD_INT 6
70998: PUSH
70999: EMPTY
71000: LIST
71001: LIST
71002: PUSH
71003: LD_INT 2
71005: PUSH
71006: LD_INT 4
71008: PUSH
71009: EMPTY
71010: LIST
71011: LIST
71012: PUSH
71013: LD_INT 3
71015: PUSH
71016: LD_INT 5
71018: PUSH
71019: EMPTY
71020: LIST
71021: LIST
71022: PUSH
71023: EMPTY
71024: LIST
71025: LIST
71026: LIST
71027: PUSH
71028: LD_INT 24
71030: PUSH
71031: LD_INT 25
71033: PUSH
71034: EMPTY
71035: LIST
71036: LIST
71037: PUSH
71038: LD_INT 23
71040: PUSH
71041: LD_INT 27
71043: PUSH
71044: EMPTY
71045: LIST
71046: LIST
71047: PUSH
71048: EMPTY
71049: LIST
71050: LIST
71051: PUSH
71052: LD_INT 42
71054: PUSH
71055: LD_INT 43
71057: PUSH
71058: EMPTY
71059: LIST
71060: LIST
71061: PUSH
71062: LD_INT 44
71064: PUSH
71065: LD_INT 46
71067: PUSH
71068: EMPTY
71069: LIST
71070: LIST
71071: PUSH
71072: LD_INT 45
71074: PUSH
71075: LD_INT 47
71077: PUSH
71078: EMPTY
71079: LIST
71080: LIST
71081: PUSH
71082: EMPTY
71083: LIST
71084: LIST
71085: LIST
71086: PUSH
71087: EMPTY
71088: LIST
71089: LIST
71090: LIST
71091: ST_TO_ADDR
// result := [ ] ;
71092: LD_ADDR_VAR 0 3
71096: PUSH
71097: EMPTY
71098: ST_TO_ADDR
// for i in turrets do
71099: LD_ADDR_VAR 0 4
71103: PUSH
71104: LD_VAR 0 1
71108: PUSH
71109: FOR_IN
71110: IFFALSE 71293
// begin nat := GetNation ( i ) ;
71112: LD_ADDR_VAR 0 7
71116: PUSH
71117: LD_VAR 0 4
71121: PPUSH
71122: CALL_OW 248
71126: ST_TO_ADDR
// weapon := 0 ;
71127: LD_ADDR_VAR 0 8
71131: PUSH
71132: LD_INT 0
71134: ST_TO_ADDR
// if not nat then
71135: LD_VAR 0 7
71139: NOT
71140: IFFALSE 71144
// continue ;
71142: GO 71109
// for j in list [ nat ] do
71144: LD_ADDR_VAR 0 5
71148: PUSH
71149: LD_VAR 0 10
71153: PUSH
71154: LD_VAR 0 7
71158: ARRAY
71159: PUSH
71160: FOR_IN
71161: IFFALSE 71202
// if GetBWeapon ( i ) = j [ 1 ] then
71163: LD_VAR 0 4
71167: PPUSH
71168: CALL_OW 269
71172: PUSH
71173: LD_VAR 0 5
71177: PUSH
71178: LD_INT 1
71180: ARRAY
71181: EQUAL
71182: IFFALSE 71200
// begin weapon := j [ 2 ] ;
71184: LD_ADDR_VAR 0 8
71188: PUSH
71189: LD_VAR 0 5
71193: PUSH
71194: LD_INT 2
71196: ARRAY
71197: ST_TO_ADDR
// break ;
71198: GO 71202
// end ;
71200: GO 71160
71202: POP
71203: POP
// if not weapon then
71204: LD_VAR 0 8
71208: NOT
71209: IFFALSE 71213
// continue ;
71211: GO 71109
// for k in factories do
71213: LD_ADDR_VAR 0 6
71217: PUSH
71218: LD_VAR 0 2
71222: PUSH
71223: FOR_IN
71224: IFFALSE 71289
// begin weapons := AvailableWeaponList ( k ) ;
71226: LD_ADDR_VAR 0 9
71230: PUSH
71231: LD_VAR 0 6
71235: PPUSH
71236: CALL_OW 478
71240: ST_TO_ADDR
// if not weapons then
71241: LD_VAR 0 9
71245: NOT
71246: IFFALSE 71250
// continue ;
71248: GO 71223
// if weapon in weapons then
71250: LD_VAR 0 8
71254: PUSH
71255: LD_VAR 0 9
71259: IN
71260: IFFALSE 71287
// begin result := [ i , weapon ] ;
71262: LD_ADDR_VAR 0 3
71266: PUSH
71267: LD_VAR 0 4
71271: PUSH
71272: LD_VAR 0 8
71276: PUSH
71277: EMPTY
71278: LIST
71279: LIST
71280: ST_TO_ADDR
// exit ;
71281: POP
71282: POP
71283: POP
71284: POP
71285: GO 71295
// end ; end ;
71287: GO 71223
71289: POP
71290: POP
// end ;
71291: GO 71109
71293: POP
71294: POP
// end ;
71295: LD_VAR 0 3
71299: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
71300: LD_INT 0
71302: PPUSH
// if not side or side > 8 then
71303: LD_VAR 0 3
71307: NOT
71308: PUSH
71309: LD_VAR 0 3
71313: PUSH
71314: LD_INT 8
71316: GREATER
71317: OR
71318: IFFALSE 71322
// exit ;
71320: GO 71381
// if not range then
71322: LD_VAR 0 4
71326: NOT
71327: IFFALSE 71338
// range := - 12 ;
71329: LD_ADDR_VAR 0 4
71333: PUSH
71334: LD_INT 12
71336: NEG
71337: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
71338: LD_VAR 0 1
71342: PPUSH
71343: LD_VAR 0 2
71347: PPUSH
71348: LD_VAR 0 3
71352: PPUSH
71353: LD_VAR 0 4
71357: PPUSH
71358: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
71362: LD_VAR 0 1
71366: PPUSH
71367: LD_VAR 0 2
71371: PPUSH
71372: LD_VAR 0 3
71376: PPUSH
71377: CALL_OW 331
// end ;
71381: LD_VAR 0 5
71385: RET
// export function Video ( mode ) ; begin
71386: LD_INT 0
71388: PPUSH
// ingame_video = mode ;
71389: LD_ADDR_OWVAR 52
71393: PUSH
71394: LD_VAR 0 1
71398: ST_TO_ADDR
// interface_hidden = mode ;
71399: LD_ADDR_OWVAR 54
71403: PUSH
71404: LD_VAR 0 1
71408: ST_TO_ADDR
// end ;
71409: LD_VAR 0 2
71413: RET
// export function Join ( array , element ) ; begin
71414: LD_INT 0
71416: PPUSH
// result := Replace ( array , array + 1 , element ) ;
71417: LD_ADDR_VAR 0 3
71421: PUSH
71422: LD_VAR 0 1
71426: PPUSH
71427: LD_VAR 0 1
71431: PUSH
71432: LD_INT 1
71434: PLUS
71435: PPUSH
71436: LD_VAR 0 2
71440: PPUSH
71441: CALL_OW 1
71445: ST_TO_ADDR
// end ;
71446: LD_VAR 0 3
71450: RET
// export function JoinUnion ( array , element ) ; begin
71451: LD_INT 0
71453: PPUSH
// result := array union element ;
71454: LD_ADDR_VAR 0 3
71458: PUSH
71459: LD_VAR 0 1
71463: PUSH
71464: LD_VAR 0 2
71468: UNION
71469: ST_TO_ADDR
// end ;
71470: LD_VAR 0 3
71474: RET
// export function GetBehemoths ( side ) ; begin
71475: LD_INT 0
71477: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
71478: LD_ADDR_VAR 0 2
71482: PUSH
71483: LD_INT 22
71485: PUSH
71486: LD_VAR 0 1
71490: PUSH
71491: EMPTY
71492: LIST
71493: LIST
71494: PUSH
71495: LD_INT 31
71497: PUSH
71498: LD_INT 25
71500: PUSH
71501: EMPTY
71502: LIST
71503: LIST
71504: PUSH
71505: EMPTY
71506: LIST
71507: LIST
71508: PPUSH
71509: CALL_OW 69
71513: ST_TO_ADDR
// end ;
71514: LD_VAR 0 2
71518: RET
// export function Shuffle ( array ) ; var i , index ; begin
71519: LD_INT 0
71521: PPUSH
71522: PPUSH
71523: PPUSH
// result := [ ] ;
71524: LD_ADDR_VAR 0 2
71528: PUSH
71529: EMPTY
71530: ST_TO_ADDR
// if not array then
71531: LD_VAR 0 1
71535: NOT
71536: IFFALSE 71540
// exit ;
71538: GO 71639
// Randomize ;
71540: CALL_OW 10
// for i = array downto 1 do
71544: LD_ADDR_VAR 0 3
71548: PUSH
71549: DOUBLE
71550: LD_VAR 0 1
71554: INC
71555: ST_TO_ADDR
71556: LD_INT 1
71558: PUSH
71559: FOR_DOWNTO
71560: IFFALSE 71637
// begin index := rand ( 1 , array ) ;
71562: LD_ADDR_VAR 0 4
71566: PUSH
71567: LD_INT 1
71569: PPUSH
71570: LD_VAR 0 1
71574: PPUSH
71575: CALL_OW 12
71579: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
71580: LD_ADDR_VAR 0 2
71584: PUSH
71585: LD_VAR 0 2
71589: PPUSH
71590: LD_VAR 0 2
71594: PUSH
71595: LD_INT 1
71597: PLUS
71598: PPUSH
71599: LD_VAR 0 1
71603: PUSH
71604: LD_VAR 0 4
71608: ARRAY
71609: PPUSH
71610: CALL_OW 2
71614: ST_TO_ADDR
// array := Delete ( array , index ) ;
71615: LD_ADDR_VAR 0 1
71619: PUSH
71620: LD_VAR 0 1
71624: PPUSH
71625: LD_VAR 0 4
71629: PPUSH
71630: CALL_OW 3
71634: ST_TO_ADDR
// end ;
71635: GO 71559
71637: POP
71638: POP
// end ;
71639: LD_VAR 0 2
71643: RET
// export function GetBaseMaterials ( base ) ; begin
71644: LD_INT 0
71646: PPUSH
// result := [ 0 , 0 , 0 ] ;
71647: LD_ADDR_VAR 0 2
71651: PUSH
71652: LD_INT 0
71654: PUSH
71655: LD_INT 0
71657: PUSH
71658: LD_INT 0
71660: PUSH
71661: EMPTY
71662: LIST
71663: LIST
71664: LIST
71665: ST_TO_ADDR
// if not base then
71666: LD_VAR 0 1
71670: NOT
71671: IFFALSE 71675
// exit ;
71673: GO 71724
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
71675: LD_ADDR_VAR 0 2
71679: PUSH
71680: LD_VAR 0 1
71684: PPUSH
71685: LD_INT 1
71687: PPUSH
71688: CALL_OW 275
71692: PUSH
71693: LD_VAR 0 1
71697: PPUSH
71698: LD_INT 2
71700: PPUSH
71701: CALL_OW 275
71705: PUSH
71706: LD_VAR 0 1
71710: PPUSH
71711: LD_INT 3
71713: PPUSH
71714: CALL_OW 275
71718: PUSH
71719: EMPTY
71720: LIST
71721: LIST
71722: LIST
71723: ST_TO_ADDR
// end ;
71724: LD_VAR 0 2
71728: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
71729: LD_INT 0
71731: PPUSH
71732: PPUSH
// result := array ;
71733: LD_ADDR_VAR 0 3
71737: PUSH
71738: LD_VAR 0 1
71742: ST_TO_ADDR
// if size >= result then
71743: LD_VAR 0 2
71747: PUSH
71748: LD_VAR 0 3
71752: GREATEREQUAL
71753: IFFALSE 71757
// exit ;
71755: GO 71807
// if size then
71757: LD_VAR 0 2
71761: IFFALSE 71807
// for i := array downto size do
71763: LD_ADDR_VAR 0 4
71767: PUSH
71768: DOUBLE
71769: LD_VAR 0 1
71773: INC
71774: ST_TO_ADDR
71775: LD_VAR 0 2
71779: PUSH
71780: FOR_DOWNTO
71781: IFFALSE 71805
// result := Delete ( result , result ) ;
71783: LD_ADDR_VAR 0 3
71787: PUSH
71788: LD_VAR 0 3
71792: PPUSH
71793: LD_VAR 0 3
71797: PPUSH
71798: CALL_OW 3
71802: ST_TO_ADDR
71803: GO 71780
71805: POP
71806: POP
// end ;
71807: LD_VAR 0 3
71811: RET
// export function ComExit ( unit ) ; var tmp ; begin
71812: LD_INT 0
71814: PPUSH
71815: PPUSH
// if not IsInUnit ( unit ) then
71816: LD_VAR 0 1
71820: PPUSH
71821: CALL_OW 310
71825: NOT
71826: IFFALSE 71830
// exit ;
71828: GO 71890
// tmp := IsInUnit ( unit ) ;
71830: LD_ADDR_VAR 0 3
71834: PUSH
71835: LD_VAR 0 1
71839: PPUSH
71840: CALL_OW 310
71844: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
71845: LD_VAR 0 3
71849: PPUSH
71850: CALL_OW 247
71854: PUSH
71855: LD_INT 2
71857: EQUAL
71858: IFFALSE 71871
// ComExitVehicle ( unit ) else
71860: LD_VAR 0 1
71864: PPUSH
71865: CALL_OW 121
71869: GO 71880
// ComExitBuilding ( unit ) ;
71871: LD_VAR 0 1
71875: PPUSH
71876: CALL_OW 122
// result := tmp ;
71880: LD_ADDR_VAR 0 2
71884: PUSH
71885: LD_VAR 0 3
71889: ST_TO_ADDR
// end ;
71890: LD_VAR 0 2
71894: RET
// export function ComExitAll ( units ) ; var i ; begin
71895: LD_INT 0
71897: PPUSH
71898: PPUSH
// if not units then
71899: LD_VAR 0 1
71903: NOT
71904: IFFALSE 71908
// exit ;
71906: GO 71934
// for i in units do
71908: LD_ADDR_VAR 0 3
71912: PUSH
71913: LD_VAR 0 1
71917: PUSH
71918: FOR_IN
71919: IFFALSE 71932
// ComExit ( i ) ;
71921: LD_VAR 0 3
71925: PPUSH
71926: CALL 71812 0 1
71930: GO 71918
71932: POP
71933: POP
// end ;
71934: LD_VAR 0 2
71938: RET
// export function ResetHc ; begin
71939: LD_INT 0
71941: PPUSH
// InitHc ;
71942: CALL_OW 19
// hc_importance := 0 ;
71946: LD_ADDR_OWVAR 32
71950: PUSH
71951: LD_INT 0
71953: ST_TO_ADDR
// end ;
71954: LD_VAR 0 1
71958: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
71959: LD_INT 0
71961: PPUSH
71962: PPUSH
71963: PPUSH
// _x := ( x1 + x2 ) div 2 ;
71964: LD_ADDR_VAR 0 6
71968: PUSH
71969: LD_VAR 0 1
71973: PUSH
71974: LD_VAR 0 3
71978: PLUS
71979: PUSH
71980: LD_INT 2
71982: DIV
71983: ST_TO_ADDR
// if _x < 0 then
71984: LD_VAR 0 6
71988: PUSH
71989: LD_INT 0
71991: LESS
71992: IFFALSE 72009
// _x := _x * - 1 ;
71994: LD_ADDR_VAR 0 6
71998: PUSH
71999: LD_VAR 0 6
72003: PUSH
72004: LD_INT 1
72006: NEG
72007: MUL
72008: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
72009: LD_ADDR_VAR 0 7
72013: PUSH
72014: LD_VAR 0 2
72018: PUSH
72019: LD_VAR 0 4
72023: PLUS
72024: PUSH
72025: LD_INT 2
72027: DIV
72028: ST_TO_ADDR
// if _y < 0 then
72029: LD_VAR 0 7
72033: PUSH
72034: LD_INT 0
72036: LESS
72037: IFFALSE 72054
// _y := _y * - 1 ;
72039: LD_ADDR_VAR 0 7
72043: PUSH
72044: LD_VAR 0 7
72048: PUSH
72049: LD_INT 1
72051: NEG
72052: MUL
72053: ST_TO_ADDR
// result := [ _x , _y ] ;
72054: LD_ADDR_VAR 0 5
72058: PUSH
72059: LD_VAR 0 6
72063: PUSH
72064: LD_VAR 0 7
72068: PUSH
72069: EMPTY
72070: LIST
72071: LIST
72072: ST_TO_ADDR
// end ;
72073: LD_VAR 0 5
72077: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
72078: LD_INT 0
72080: PPUSH
72081: PPUSH
72082: PPUSH
72083: PPUSH
// task := GetTaskList ( unit ) ;
72084: LD_ADDR_VAR 0 7
72088: PUSH
72089: LD_VAR 0 1
72093: PPUSH
72094: CALL_OW 437
72098: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
72099: LD_VAR 0 7
72103: NOT
72104: PUSH
72105: LD_VAR 0 1
72109: PPUSH
72110: LD_VAR 0 2
72114: PPUSH
72115: CALL_OW 308
72119: NOT
72120: AND
72121: IFFALSE 72125
// exit ;
72123: GO 72243
// if IsInArea ( unit , area ) then
72125: LD_VAR 0 1
72129: PPUSH
72130: LD_VAR 0 2
72134: PPUSH
72135: CALL_OW 308
72139: IFFALSE 72157
// begin ComMoveToArea ( unit , goAway ) ;
72141: LD_VAR 0 1
72145: PPUSH
72146: LD_VAR 0 3
72150: PPUSH
72151: CALL_OW 113
// exit ;
72155: GO 72243
// end ; if task [ 1 ] [ 1 ] <> M then
72157: LD_VAR 0 7
72161: PUSH
72162: LD_INT 1
72164: ARRAY
72165: PUSH
72166: LD_INT 1
72168: ARRAY
72169: PUSH
72170: LD_STRING M
72172: NONEQUAL
72173: IFFALSE 72177
// exit ;
72175: GO 72243
// x := task [ 1 ] [ 2 ] ;
72177: LD_ADDR_VAR 0 5
72181: PUSH
72182: LD_VAR 0 7
72186: PUSH
72187: LD_INT 1
72189: ARRAY
72190: PUSH
72191: LD_INT 2
72193: ARRAY
72194: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
72195: LD_ADDR_VAR 0 6
72199: PUSH
72200: LD_VAR 0 7
72204: PUSH
72205: LD_INT 1
72207: ARRAY
72208: PUSH
72209: LD_INT 3
72211: ARRAY
72212: ST_TO_ADDR
// if InArea ( x , y , area ) then
72213: LD_VAR 0 5
72217: PPUSH
72218: LD_VAR 0 6
72222: PPUSH
72223: LD_VAR 0 2
72227: PPUSH
72228: CALL_OW 309
72232: IFFALSE 72243
// ComStop ( unit ) ;
72234: LD_VAR 0 1
72238: PPUSH
72239: CALL_OW 141
// end ;
72243: LD_VAR 0 4
72247: RET
// export function Abs ( value ) ; begin
72248: LD_INT 0
72250: PPUSH
// result := value ;
72251: LD_ADDR_VAR 0 2
72255: PUSH
72256: LD_VAR 0 1
72260: ST_TO_ADDR
// if value < 0 then
72261: LD_VAR 0 1
72265: PUSH
72266: LD_INT 0
72268: LESS
72269: IFFALSE 72286
// result := value * - 1 ;
72271: LD_ADDR_VAR 0 2
72275: PUSH
72276: LD_VAR 0 1
72280: PUSH
72281: LD_INT 1
72283: NEG
72284: MUL
72285: ST_TO_ADDR
// end ;
72286: LD_VAR 0 2
72290: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
72291: LD_INT 0
72293: PPUSH
72294: PPUSH
72295: PPUSH
72296: PPUSH
72297: PPUSH
72298: PPUSH
72299: PPUSH
72300: PPUSH
// if not unit or not building then
72301: LD_VAR 0 1
72305: NOT
72306: PUSH
72307: LD_VAR 0 2
72311: NOT
72312: OR
72313: IFFALSE 72317
// exit ;
72315: GO 72543
// x := GetX ( building ) ;
72317: LD_ADDR_VAR 0 4
72321: PUSH
72322: LD_VAR 0 2
72326: PPUSH
72327: CALL_OW 250
72331: ST_TO_ADDR
// y := GetY ( building ) ;
72332: LD_ADDR_VAR 0 6
72336: PUSH
72337: LD_VAR 0 2
72341: PPUSH
72342: CALL_OW 251
72346: ST_TO_ADDR
// d := GetDir ( building ) ;
72347: LD_ADDR_VAR 0 8
72351: PUSH
72352: LD_VAR 0 2
72356: PPUSH
72357: CALL_OW 254
72361: ST_TO_ADDR
// r := 4 ;
72362: LD_ADDR_VAR 0 9
72366: PUSH
72367: LD_INT 4
72369: ST_TO_ADDR
// for i := 1 to 5 do
72370: LD_ADDR_VAR 0 10
72374: PUSH
72375: DOUBLE
72376: LD_INT 1
72378: DEC
72379: ST_TO_ADDR
72380: LD_INT 5
72382: PUSH
72383: FOR_TO
72384: IFFALSE 72541
// begin _x := ShiftX ( x , d , r + i ) ;
72386: LD_ADDR_VAR 0 5
72390: PUSH
72391: LD_VAR 0 4
72395: PPUSH
72396: LD_VAR 0 8
72400: PPUSH
72401: LD_VAR 0 9
72405: PUSH
72406: LD_VAR 0 10
72410: PLUS
72411: PPUSH
72412: CALL_OW 272
72416: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
72417: LD_ADDR_VAR 0 7
72421: PUSH
72422: LD_VAR 0 6
72426: PPUSH
72427: LD_VAR 0 8
72431: PPUSH
72432: LD_VAR 0 9
72436: PUSH
72437: LD_VAR 0 10
72441: PLUS
72442: PPUSH
72443: CALL_OW 273
72447: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
72448: LD_VAR 0 5
72452: PPUSH
72453: LD_VAR 0 7
72457: PPUSH
72458: CALL_OW 488
72462: PUSH
72463: LD_VAR 0 5
72467: PPUSH
72468: LD_VAR 0 7
72472: PPUSH
72473: CALL_OW 428
72477: PPUSH
72478: CALL_OW 247
72482: PUSH
72483: LD_INT 3
72485: PUSH
72486: LD_INT 2
72488: PUSH
72489: EMPTY
72490: LIST
72491: LIST
72492: IN
72493: NOT
72494: AND
72495: IFFALSE 72539
// begin ComMoveXY ( unit , _x , _y ) ;
72497: LD_VAR 0 1
72501: PPUSH
72502: LD_VAR 0 5
72506: PPUSH
72507: LD_VAR 0 7
72511: PPUSH
72512: CALL_OW 111
// result := [ _x , _y ] ;
72516: LD_ADDR_VAR 0 3
72520: PUSH
72521: LD_VAR 0 5
72525: PUSH
72526: LD_VAR 0 7
72530: PUSH
72531: EMPTY
72532: LIST
72533: LIST
72534: ST_TO_ADDR
// exit ;
72535: POP
72536: POP
72537: GO 72543
// end ; end ;
72539: GO 72383
72541: POP
72542: POP
// end ;
72543: LD_VAR 0 3
72547: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
72548: LD_INT 0
72550: PPUSH
72551: PPUSH
72552: PPUSH
// result := 0 ;
72553: LD_ADDR_VAR 0 3
72557: PUSH
72558: LD_INT 0
72560: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
72561: LD_VAR 0 1
72565: PUSH
72566: LD_INT 0
72568: LESS
72569: PUSH
72570: LD_VAR 0 1
72574: PUSH
72575: LD_INT 8
72577: GREATER
72578: OR
72579: PUSH
72580: LD_VAR 0 2
72584: PUSH
72585: LD_INT 0
72587: LESS
72588: OR
72589: PUSH
72590: LD_VAR 0 2
72594: PUSH
72595: LD_INT 8
72597: GREATER
72598: OR
72599: IFFALSE 72603
// exit ;
72601: GO 72678
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
72603: LD_ADDR_VAR 0 4
72607: PUSH
72608: LD_INT 22
72610: PUSH
72611: LD_VAR 0 2
72615: PUSH
72616: EMPTY
72617: LIST
72618: LIST
72619: PPUSH
72620: CALL_OW 69
72624: PUSH
72625: FOR_IN
72626: IFFALSE 72676
// begin un := UnitShoot ( i ) ;
72628: LD_ADDR_VAR 0 5
72632: PUSH
72633: LD_VAR 0 4
72637: PPUSH
72638: CALL_OW 504
72642: ST_TO_ADDR
// if GetSide ( un ) = side1 then
72643: LD_VAR 0 5
72647: PPUSH
72648: CALL_OW 255
72652: PUSH
72653: LD_VAR 0 1
72657: EQUAL
72658: IFFALSE 72674
// begin result := un ;
72660: LD_ADDR_VAR 0 3
72664: PUSH
72665: LD_VAR 0 5
72669: ST_TO_ADDR
// exit ;
72670: POP
72671: POP
72672: GO 72678
// end ; end ;
72674: GO 72625
72676: POP
72677: POP
// end ;
72678: LD_VAR 0 3
72682: RET
// export function GetCargoBay ( units ) ; begin
72683: LD_INT 0
72685: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
72686: LD_ADDR_VAR 0 2
72690: PUSH
72691: LD_VAR 0 1
72695: PPUSH
72696: LD_INT 2
72698: PUSH
72699: LD_INT 34
72701: PUSH
72702: LD_INT 12
72704: PUSH
72705: EMPTY
72706: LIST
72707: LIST
72708: PUSH
72709: LD_INT 34
72711: PUSH
72712: LD_INT 51
72714: PUSH
72715: EMPTY
72716: LIST
72717: LIST
72718: PUSH
72719: LD_INT 34
72721: PUSH
72722: LD_INT 32
72724: PUSH
72725: EMPTY
72726: LIST
72727: LIST
72728: PUSH
72729: LD_INT 34
72731: PUSH
72732: LD_INT 89
72734: PUSH
72735: EMPTY
72736: LIST
72737: LIST
72738: PUSH
72739: EMPTY
72740: LIST
72741: LIST
72742: LIST
72743: LIST
72744: LIST
72745: PPUSH
72746: CALL_OW 72
72750: ST_TO_ADDR
// end ;
72751: LD_VAR 0 2
72755: RET
// export function Negate ( value ) ; begin
72756: LD_INT 0
72758: PPUSH
// result := not value ;
72759: LD_ADDR_VAR 0 2
72763: PUSH
72764: LD_VAR 0 1
72768: NOT
72769: ST_TO_ADDR
// end ;
72770: LD_VAR 0 2
72774: RET
// export function Inc ( value ) ; begin
72775: LD_INT 0
72777: PPUSH
// result := value + 1 ;
72778: LD_ADDR_VAR 0 2
72782: PUSH
72783: LD_VAR 0 1
72787: PUSH
72788: LD_INT 1
72790: PLUS
72791: ST_TO_ADDR
// end ;
72792: LD_VAR 0 2
72796: RET
// export function Dec ( value ) ; begin
72797: LD_INT 0
72799: PPUSH
// result := value - 1 ;
72800: LD_ADDR_VAR 0 2
72804: PUSH
72805: LD_VAR 0 1
72809: PUSH
72810: LD_INT 1
72812: MINUS
72813: ST_TO_ADDR
// end ;
72814: LD_VAR 0 2
72818: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
72819: LD_INT 0
72821: PPUSH
72822: PPUSH
72823: PPUSH
72824: PPUSH
72825: PPUSH
72826: PPUSH
72827: PPUSH
72828: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
72829: LD_VAR 0 1
72833: PPUSH
72834: LD_VAR 0 2
72838: PPUSH
72839: CALL_OW 488
72843: NOT
72844: PUSH
72845: LD_VAR 0 3
72849: PPUSH
72850: LD_VAR 0 4
72854: PPUSH
72855: CALL_OW 488
72859: NOT
72860: OR
72861: IFFALSE 72874
// begin result := - 1 ;
72863: LD_ADDR_VAR 0 5
72867: PUSH
72868: LD_INT 1
72870: NEG
72871: ST_TO_ADDR
// exit ;
72872: GO 73109
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
72874: LD_ADDR_VAR 0 12
72878: PUSH
72879: LD_VAR 0 1
72883: PPUSH
72884: LD_VAR 0 2
72888: PPUSH
72889: LD_VAR 0 3
72893: PPUSH
72894: LD_VAR 0 4
72898: PPUSH
72899: CALL 71959 0 4
72903: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
72904: LD_ADDR_VAR 0 11
72908: PUSH
72909: LD_VAR 0 1
72913: PPUSH
72914: LD_VAR 0 2
72918: PPUSH
72919: LD_VAR 0 12
72923: PUSH
72924: LD_INT 1
72926: ARRAY
72927: PPUSH
72928: LD_VAR 0 12
72932: PUSH
72933: LD_INT 2
72935: ARRAY
72936: PPUSH
72937: CALL_OW 298
72941: ST_TO_ADDR
// distance := 9999 ;
72942: LD_ADDR_VAR 0 10
72946: PUSH
72947: LD_INT 9999
72949: ST_TO_ADDR
// for i := 0 to 5 do
72950: LD_ADDR_VAR 0 6
72954: PUSH
72955: DOUBLE
72956: LD_INT 0
72958: DEC
72959: ST_TO_ADDR
72960: LD_INT 5
72962: PUSH
72963: FOR_TO
72964: IFFALSE 73107
// begin _x := ShiftX ( x1 , i , centerDist ) ;
72966: LD_ADDR_VAR 0 7
72970: PUSH
72971: LD_VAR 0 1
72975: PPUSH
72976: LD_VAR 0 6
72980: PPUSH
72981: LD_VAR 0 11
72985: PPUSH
72986: CALL_OW 272
72990: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
72991: LD_ADDR_VAR 0 8
72995: PUSH
72996: LD_VAR 0 2
73000: PPUSH
73001: LD_VAR 0 6
73005: PPUSH
73006: LD_VAR 0 11
73010: PPUSH
73011: CALL_OW 273
73015: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
73016: LD_VAR 0 7
73020: PPUSH
73021: LD_VAR 0 8
73025: PPUSH
73026: CALL_OW 488
73030: NOT
73031: IFFALSE 73035
// continue ;
73033: GO 72963
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
73035: LD_ADDR_VAR 0 9
73039: PUSH
73040: LD_VAR 0 12
73044: PUSH
73045: LD_INT 1
73047: ARRAY
73048: PPUSH
73049: LD_VAR 0 12
73053: PUSH
73054: LD_INT 2
73056: ARRAY
73057: PPUSH
73058: LD_VAR 0 7
73062: PPUSH
73063: LD_VAR 0 8
73067: PPUSH
73068: CALL_OW 298
73072: ST_TO_ADDR
// if tmp < distance then
73073: LD_VAR 0 9
73077: PUSH
73078: LD_VAR 0 10
73082: LESS
73083: IFFALSE 73105
// begin result := i ;
73085: LD_ADDR_VAR 0 5
73089: PUSH
73090: LD_VAR 0 6
73094: ST_TO_ADDR
// distance := tmp ;
73095: LD_ADDR_VAR 0 10
73099: PUSH
73100: LD_VAR 0 9
73104: ST_TO_ADDR
// end ; end ;
73105: GO 72963
73107: POP
73108: POP
// end ;
73109: LD_VAR 0 5
73113: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
73114: LD_INT 0
73116: PPUSH
73117: PPUSH
// if not driver or not IsInUnit ( driver ) then
73118: LD_VAR 0 1
73122: NOT
73123: PUSH
73124: LD_VAR 0 1
73128: PPUSH
73129: CALL_OW 310
73133: NOT
73134: OR
73135: IFFALSE 73139
// exit ;
73137: GO 73229
// vehicle := IsInUnit ( driver ) ;
73139: LD_ADDR_VAR 0 3
73143: PUSH
73144: LD_VAR 0 1
73148: PPUSH
73149: CALL_OW 310
73153: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
73154: LD_VAR 0 1
73158: PPUSH
73159: LD_STRING \
73161: PUSH
73162: LD_INT 0
73164: PUSH
73165: LD_INT 0
73167: PUSH
73168: LD_INT 0
73170: PUSH
73171: LD_INT 0
73173: PUSH
73174: LD_INT 0
73176: PUSH
73177: LD_INT 0
73179: PUSH
73180: EMPTY
73181: LIST
73182: LIST
73183: LIST
73184: LIST
73185: LIST
73186: LIST
73187: LIST
73188: PUSH
73189: LD_STRING E
73191: PUSH
73192: LD_INT 0
73194: PUSH
73195: LD_INT 0
73197: PUSH
73198: LD_VAR 0 3
73202: PUSH
73203: LD_INT 0
73205: PUSH
73206: LD_INT 0
73208: PUSH
73209: LD_INT 0
73211: PUSH
73212: EMPTY
73213: LIST
73214: LIST
73215: LIST
73216: LIST
73217: LIST
73218: LIST
73219: LIST
73220: PUSH
73221: EMPTY
73222: LIST
73223: LIST
73224: PPUSH
73225: CALL_OW 446
// end ;
73229: LD_VAR 0 2
73233: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
73234: LD_INT 0
73236: PPUSH
73237: PPUSH
// if not driver or not IsInUnit ( driver ) then
73238: LD_VAR 0 1
73242: NOT
73243: PUSH
73244: LD_VAR 0 1
73248: PPUSH
73249: CALL_OW 310
73253: NOT
73254: OR
73255: IFFALSE 73259
// exit ;
73257: GO 73349
// vehicle := IsInUnit ( driver ) ;
73259: LD_ADDR_VAR 0 3
73263: PUSH
73264: LD_VAR 0 1
73268: PPUSH
73269: CALL_OW 310
73273: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
73274: LD_VAR 0 1
73278: PPUSH
73279: LD_STRING \
73281: PUSH
73282: LD_INT 0
73284: PUSH
73285: LD_INT 0
73287: PUSH
73288: LD_INT 0
73290: PUSH
73291: LD_INT 0
73293: PUSH
73294: LD_INT 0
73296: PUSH
73297: LD_INT 0
73299: PUSH
73300: EMPTY
73301: LIST
73302: LIST
73303: LIST
73304: LIST
73305: LIST
73306: LIST
73307: LIST
73308: PUSH
73309: LD_STRING E
73311: PUSH
73312: LD_INT 0
73314: PUSH
73315: LD_INT 0
73317: PUSH
73318: LD_VAR 0 3
73322: PUSH
73323: LD_INT 0
73325: PUSH
73326: LD_INT 0
73328: PUSH
73329: LD_INT 0
73331: PUSH
73332: EMPTY
73333: LIST
73334: LIST
73335: LIST
73336: LIST
73337: LIST
73338: LIST
73339: LIST
73340: PUSH
73341: EMPTY
73342: LIST
73343: LIST
73344: PPUSH
73345: CALL_OW 447
// end ;
73349: LD_VAR 0 2
73353: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
73354: LD_INT 0
73356: PPUSH
73357: PPUSH
73358: PPUSH
// tmp := [ ] ;
73359: LD_ADDR_VAR 0 5
73363: PUSH
73364: EMPTY
73365: ST_TO_ADDR
// for i in units do
73366: LD_ADDR_VAR 0 4
73370: PUSH
73371: LD_VAR 0 1
73375: PUSH
73376: FOR_IN
73377: IFFALSE 73415
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
73379: LD_ADDR_VAR 0 5
73383: PUSH
73384: LD_VAR 0 5
73388: PPUSH
73389: LD_VAR 0 5
73393: PUSH
73394: LD_INT 1
73396: PLUS
73397: PPUSH
73398: LD_VAR 0 4
73402: PPUSH
73403: CALL_OW 256
73407: PPUSH
73408: CALL_OW 2
73412: ST_TO_ADDR
73413: GO 73376
73415: POP
73416: POP
// if not tmp then
73417: LD_VAR 0 5
73421: NOT
73422: IFFALSE 73426
// exit ;
73424: GO 73474
// if asc then
73426: LD_VAR 0 2
73430: IFFALSE 73454
// result := SortListByListAsc ( units , tmp ) else
73432: LD_ADDR_VAR 0 3
73436: PUSH
73437: LD_VAR 0 1
73441: PPUSH
73442: LD_VAR 0 5
73446: PPUSH
73447: CALL_OW 76
73451: ST_TO_ADDR
73452: GO 73474
// result := SortListByListDesc ( units , tmp ) ;
73454: LD_ADDR_VAR 0 3
73458: PUSH
73459: LD_VAR 0 1
73463: PPUSH
73464: LD_VAR 0 5
73468: PPUSH
73469: CALL_OW 77
73473: ST_TO_ADDR
// end ;
73474: LD_VAR 0 3
73478: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
73479: LD_INT 0
73481: PPUSH
73482: PPUSH
// task := GetTaskList ( mech ) ;
73483: LD_ADDR_VAR 0 4
73487: PUSH
73488: LD_VAR 0 1
73492: PPUSH
73493: CALL_OW 437
73497: ST_TO_ADDR
// if not task then
73498: LD_VAR 0 4
73502: NOT
73503: IFFALSE 73507
// exit ;
73505: GO 73549
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
73507: LD_ADDR_VAR 0 3
73511: PUSH
73512: LD_VAR 0 4
73516: PUSH
73517: LD_INT 1
73519: ARRAY
73520: PUSH
73521: LD_INT 1
73523: ARRAY
73524: PUSH
73525: LD_STRING r
73527: EQUAL
73528: PUSH
73529: LD_VAR 0 4
73533: PUSH
73534: LD_INT 1
73536: ARRAY
73537: PUSH
73538: LD_INT 4
73540: ARRAY
73541: PUSH
73542: LD_VAR 0 2
73546: EQUAL
73547: AND
73548: ST_TO_ADDR
// end ;
73549: LD_VAR 0 3
73553: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
73554: LD_INT 0
73556: PPUSH
// SetDir ( unit , d ) ;
73557: LD_VAR 0 1
73561: PPUSH
73562: LD_VAR 0 4
73566: PPUSH
73567: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
73571: LD_ADDR_VAR 0 6
73575: PUSH
73576: LD_VAR 0 1
73580: PPUSH
73581: LD_VAR 0 2
73585: PPUSH
73586: LD_VAR 0 3
73590: PPUSH
73591: LD_VAR 0 5
73595: PPUSH
73596: CALL_OW 48
73600: ST_TO_ADDR
// end ;
73601: LD_VAR 0 6
73605: RET
// export function ToNaturalNumber ( number ) ; begin
73606: LD_INT 0
73608: PPUSH
// result := number div 1 ;
73609: LD_ADDR_VAR 0 2
73613: PUSH
73614: LD_VAR 0 1
73618: PUSH
73619: LD_INT 1
73621: DIV
73622: ST_TO_ADDR
// if number < 0 then
73623: LD_VAR 0 1
73627: PUSH
73628: LD_INT 0
73630: LESS
73631: IFFALSE 73641
// result := 0 ;
73633: LD_ADDR_VAR 0 2
73637: PUSH
73638: LD_INT 0
73640: ST_TO_ADDR
// end ;
73641: LD_VAR 0 2
73645: RET
// export function SortByClass ( units , class ) ; var un ; begin
73646: LD_INT 0
73648: PPUSH
73649: PPUSH
// if not units or not class then
73650: LD_VAR 0 1
73654: NOT
73655: PUSH
73656: LD_VAR 0 2
73660: NOT
73661: OR
73662: IFFALSE 73666
// exit ;
73664: GO 73761
// result := [ ] ;
73666: LD_ADDR_VAR 0 3
73670: PUSH
73671: EMPTY
73672: ST_TO_ADDR
// for un in units do
73673: LD_ADDR_VAR 0 4
73677: PUSH
73678: LD_VAR 0 1
73682: PUSH
73683: FOR_IN
73684: IFFALSE 73759
// if GetClass ( un ) = class then
73686: LD_VAR 0 4
73690: PPUSH
73691: CALL_OW 257
73695: PUSH
73696: LD_VAR 0 2
73700: EQUAL
73701: IFFALSE 73728
// result := Insert ( result , 1 , un ) else
73703: LD_ADDR_VAR 0 3
73707: PUSH
73708: LD_VAR 0 3
73712: PPUSH
73713: LD_INT 1
73715: PPUSH
73716: LD_VAR 0 4
73720: PPUSH
73721: CALL_OW 2
73725: ST_TO_ADDR
73726: GO 73757
// result := Replace ( result , result + 1 , un ) ;
73728: LD_ADDR_VAR 0 3
73732: PUSH
73733: LD_VAR 0 3
73737: PPUSH
73738: LD_VAR 0 3
73742: PUSH
73743: LD_INT 1
73745: PLUS
73746: PPUSH
73747: LD_VAR 0 4
73751: PPUSH
73752: CALL_OW 1
73756: ST_TO_ADDR
73757: GO 73683
73759: POP
73760: POP
// end ;
73761: LD_VAR 0 3
73765: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
73766: LD_INT 0
73768: PPUSH
73769: PPUSH
73770: PPUSH
73771: PPUSH
73772: PPUSH
73773: PPUSH
73774: PPUSH
// result := [ ] ;
73775: LD_ADDR_VAR 0 4
73779: PUSH
73780: EMPTY
73781: ST_TO_ADDR
// if x - r < 0 then
73782: LD_VAR 0 1
73786: PUSH
73787: LD_VAR 0 3
73791: MINUS
73792: PUSH
73793: LD_INT 0
73795: LESS
73796: IFFALSE 73808
// min_x := 0 else
73798: LD_ADDR_VAR 0 8
73802: PUSH
73803: LD_INT 0
73805: ST_TO_ADDR
73806: GO 73824
// min_x := x - r ;
73808: LD_ADDR_VAR 0 8
73812: PUSH
73813: LD_VAR 0 1
73817: PUSH
73818: LD_VAR 0 3
73822: MINUS
73823: ST_TO_ADDR
// if y - r < 0 then
73824: LD_VAR 0 2
73828: PUSH
73829: LD_VAR 0 3
73833: MINUS
73834: PUSH
73835: LD_INT 0
73837: LESS
73838: IFFALSE 73850
// min_y := 0 else
73840: LD_ADDR_VAR 0 7
73844: PUSH
73845: LD_INT 0
73847: ST_TO_ADDR
73848: GO 73866
// min_y := y - r ;
73850: LD_ADDR_VAR 0 7
73854: PUSH
73855: LD_VAR 0 2
73859: PUSH
73860: LD_VAR 0 3
73864: MINUS
73865: ST_TO_ADDR
// max_x := x + r ;
73866: LD_ADDR_VAR 0 9
73870: PUSH
73871: LD_VAR 0 1
73875: PUSH
73876: LD_VAR 0 3
73880: PLUS
73881: ST_TO_ADDR
// max_y := y + r ;
73882: LD_ADDR_VAR 0 10
73886: PUSH
73887: LD_VAR 0 2
73891: PUSH
73892: LD_VAR 0 3
73896: PLUS
73897: ST_TO_ADDR
// for _x = min_x to max_x do
73898: LD_ADDR_VAR 0 5
73902: PUSH
73903: DOUBLE
73904: LD_VAR 0 8
73908: DEC
73909: ST_TO_ADDR
73910: LD_VAR 0 9
73914: PUSH
73915: FOR_TO
73916: IFFALSE 74017
// for _y = min_y to max_y do
73918: LD_ADDR_VAR 0 6
73922: PUSH
73923: DOUBLE
73924: LD_VAR 0 7
73928: DEC
73929: ST_TO_ADDR
73930: LD_VAR 0 10
73934: PUSH
73935: FOR_TO
73936: IFFALSE 74013
// begin if not ValidHex ( _x , _y ) then
73938: LD_VAR 0 5
73942: PPUSH
73943: LD_VAR 0 6
73947: PPUSH
73948: CALL_OW 488
73952: NOT
73953: IFFALSE 73957
// continue ;
73955: GO 73935
// if GetResourceTypeXY ( _x , _y ) then
73957: LD_VAR 0 5
73961: PPUSH
73962: LD_VAR 0 6
73966: PPUSH
73967: CALL_OW 283
73971: IFFALSE 74011
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
73973: LD_ADDR_VAR 0 4
73977: PUSH
73978: LD_VAR 0 4
73982: PPUSH
73983: LD_VAR 0 4
73987: PUSH
73988: LD_INT 1
73990: PLUS
73991: PPUSH
73992: LD_VAR 0 5
73996: PUSH
73997: LD_VAR 0 6
74001: PUSH
74002: EMPTY
74003: LIST
74004: LIST
74005: PPUSH
74006: CALL_OW 1
74010: ST_TO_ADDR
// end ;
74011: GO 73935
74013: POP
74014: POP
74015: GO 73915
74017: POP
74018: POP
// end ;
74019: LD_VAR 0 4
74023: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
74024: LD_INT 0
74026: PPUSH
74027: PPUSH
74028: PPUSH
74029: PPUSH
74030: PPUSH
74031: PPUSH
74032: PPUSH
74033: PPUSH
// if not units then
74034: LD_VAR 0 1
74038: NOT
74039: IFFALSE 74043
// exit ;
74041: GO 74571
// result := UnitFilter ( units , [ f_ok ] ) ;
74043: LD_ADDR_VAR 0 3
74047: PUSH
74048: LD_VAR 0 1
74052: PPUSH
74053: LD_INT 50
74055: PUSH
74056: EMPTY
74057: LIST
74058: PPUSH
74059: CALL_OW 72
74063: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
74064: LD_ADDR_VAR 0 8
74068: PUSH
74069: LD_VAR 0 1
74073: PUSH
74074: LD_INT 1
74076: ARRAY
74077: PPUSH
74078: CALL_OW 255
74082: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
74083: LD_ADDR_VAR 0 10
74087: PUSH
74088: LD_INT 29
74090: PUSH
74091: LD_INT 91
74093: PUSH
74094: LD_INT 49
74096: PUSH
74097: EMPTY
74098: LIST
74099: LIST
74100: LIST
74101: ST_TO_ADDR
// if not result then
74102: LD_VAR 0 3
74106: NOT
74107: IFFALSE 74111
// exit ;
74109: GO 74571
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
74111: LD_ADDR_VAR 0 5
74115: PUSH
74116: LD_INT 81
74118: PUSH
74119: LD_VAR 0 8
74123: PUSH
74124: EMPTY
74125: LIST
74126: LIST
74127: PPUSH
74128: CALL_OW 69
74132: ST_TO_ADDR
// for i in result do
74133: LD_ADDR_VAR 0 4
74137: PUSH
74138: LD_VAR 0 3
74142: PUSH
74143: FOR_IN
74144: IFFALSE 74569
// begin tag := GetTag ( i ) + 1 ;
74146: LD_ADDR_VAR 0 9
74150: PUSH
74151: LD_VAR 0 4
74155: PPUSH
74156: CALL_OW 110
74160: PUSH
74161: LD_INT 1
74163: PLUS
74164: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
74165: LD_ADDR_VAR 0 7
74169: PUSH
74170: LD_VAR 0 4
74174: PPUSH
74175: CALL_OW 250
74179: PPUSH
74180: LD_VAR 0 4
74184: PPUSH
74185: CALL_OW 251
74189: PPUSH
74190: LD_INT 4
74192: PPUSH
74193: CALL 73766 0 3
74197: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
74198: LD_VAR 0 4
74202: PPUSH
74203: CALL_OW 247
74207: PUSH
74208: LD_INT 2
74210: EQUAL
74211: PUSH
74212: LD_VAR 0 7
74216: PUSH
74217: LD_INT 2
74219: GREATER
74220: AND
74221: PUSH
74222: LD_VAR 0 4
74226: PPUSH
74227: CALL_OW 264
74231: PUSH
74232: LD_VAR 0 10
74236: IN
74237: NOT
74238: AND
74239: IFFALSE 74278
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
74241: LD_VAR 0 4
74245: PPUSH
74246: LD_VAR 0 7
74250: PUSH
74251: LD_INT 1
74253: ARRAY
74254: PUSH
74255: LD_INT 1
74257: ARRAY
74258: PPUSH
74259: LD_VAR 0 7
74263: PUSH
74264: LD_INT 1
74266: ARRAY
74267: PUSH
74268: LD_INT 2
74270: ARRAY
74271: PPUSH
74272: CALL_OW 116
74276: GO 74567
// if path > tag then
74278: LD_VAR 0 2
74282: PUSH
74283: LD_VAR 0 9
74287: GREATER
74288: IFFALSE 74496
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
74290: LD_ADDR_VAR 0 6
74294: PUSH
74295: LD_VAR 0 5
74299: PPUSH
74300: LD_INT 91
74302: PUSH
74303: LD_VAR 0 4
74307: PUSH
74308: LD_INT 8
74310: PUSH
74311: EMPTY
74312: LIST
74313: LIST
74314: LIST
74315: PPUSH
74316: CALL_OW 72
74320: ST_TO_ADDR
// if nearEnemy then
74321: LD_VAR 0 6
74325: IFFALSE 74394
// begin if GetWeapon ( i ) = ru_time_lapser then
74327: LD_VAR 0 4
74331: PPUSH
74332: CALL_OW 264
74336: PUSH
74337: LD_INT 49
74339: EQUAL
74340: IFFALSE 74368
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
74342: LD_VAR 0 4
74346: PPUSH
74347: LD_VAR 0 6
74351: PPUSH
74352: LD_VAR 0 4
74356: PPUSH
74357: CALL_OW 74
74361: PPUSH
74362: CALL_OW 112
74366: GO 74392
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
74368: LD_VAR 0 4
74372: PPUSH
74373: LD_VAR 0 6
74377: PPUSH
74378: LD_VAR 0 4
74382: PPUSH
74383: CALL_OW 74
74387: PPUSH
74388: CALL 75642 0 2
// end else
74392: GO 74494
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
74394: LD_VAR 0 4
74398: PPUSH
74399: LD_VAR 0 2
74403: PUSH
74404: LD_VAR 0 9
74408: ARRAY
74409: PUSH
74410: LD_INT 1
74412: ARRAY
74413: PPUSH
74414: LD_VAR 0 2
74418: PUSH
74419: LD_VAR 0 9
74423: ARRAY
74424: PUSH
74425: LD_INT 2
74427: ARRAY
74428: PPUSH
74429: CALL_OW 297
74433: PUSH
74434: LD_INT 6
74436: GREATER
74437: IFFALSE 74480
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
74439: LD_VAR 0 4
74443: PPUSH
74444: LD_VAR 0 2
74448: PUSH
74449: LD_VAR 0 9
74453: ARRAY
74454: PUSH
74455: LD_INT 1
74457: ARRAY
74458: PPUSH
74459: LD_VAR 0 2
74463: PUSH
74464: LD_VAR 0 9
74468: ARRAY
74469: PUSH
74470: LD_INT 2
74472: ARRAY
74473: PPUSH
74474: CALL_OW 114
74478: GO 74494
// SetTag ( i , tag ) ;
74480: LD_VAR 0 4
74484: PPUSH
74485: LD_VAR 0 9
74489: PPUSH
74490: CALL_OW 109
// end else
74494: GO 74567
// if enemy then
74496: LD_VAR 0 5
74500: IFFALSE 74567
// begin if GetWeapon ( i ) = ru_time_lapser then
74502: LD_VAR 0 4
74506: PPUSH
74507: CALL_OW 264
74511: PUSH
74512: LD_INT 49
74514: EQUAL
74515: IFFALSE 74543
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
74517: LD_VAR 0 4
74521: PPUSH
74522: LD_VAR 0 5
74526: PPUSH
74527: LD_VAR 0 4
74531: PPUSH
74532: CALL_OW 74
74536: PPUSH
74537: CALL_OW 112
74541: GO 74567
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
74543: LD_VAR 0 4
74547: PPUSH
74548: LD_VAR 0 5
74552: PPUSH
74553: LD_VAR 0 4
74557: PPUSH
74558: CALL_OW 74
74562: PPUSH
74563: CALL 75642 0 2
// end ; end ;
74567: GO 74143
74569: POP
74570: POP
// end ;
74571: LD_VAR 0 3
74575: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
74576: LD_INT 0
74578: PPUSH
74579: PPUSH
74580: PPUSH
// if not unit or IsInUnit ( unit ) then
74581: LD_VAR 0 1
74585: NOT
74586: PUSH
74587: LD_VAR 0 1
74591: PPUSH
74592: CALL_OW 310
74596: OR
74597: IFFALSE 74601
// exit ;
74599: GO 74692
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
74601: LD_ADDR_VAR 0 4
74605: PUSH
74606: LD_VAR 0 1
74610: PPUSH
74611: CALL_OW 250
74615: PPUSH
74616: LD_VAR 0 2
74620: PPUSH
74621: LD_INT 1
74623: PPUSH
74624: CALL_OW 272
74628: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
74629: LD_ADDR_VAR 0 5
74633: PUSH
74634: LD_VAR 0 1
74638: PPUSH
74639: CALL_OW 251
74643: PPUSH
74644: LD_VAR 0 2
74648: PPUSH
74649: LD_INT 1
74651: PPUSH
74652: CALL_OW 273
74656: ST_TO_ADDR
// if ValidHex ( x , y ) then
74657: LD_VAR 0 4
74661: PPUSH
74662: LD_VAR 0 5
74666: PPUSH
74667: CALL_OW 488
74671: IFFALSE 74692
// ComTurnXY ( unit , x , y ) ;
74673: LD_VAR 0 1
74677: PPUSH
74678: LD_VAR 0 4
74682: PPUSH
74683: LD_VAR 0 5
74687: PPUSH
74688: CALL_OW 118
// end ;
74692: LD_VAR 0 3
74696: RET
// export function SeeUnits ( side , units ) ; var i ; begin
74697: LD_INT 0
74699: PPUSH
74700: PPUSH
// result := false ;
74701: LD_ADDR_VAR 0 3
74705: PUSH
74706: LD_INT 0
74708: ST_TO_ADDR
// if not units then
74709: LD_VAR 0 2
74713: NOT
74714: IFFALSE 74718
// exit ;
74716: GO 74763
// for i in units do
74718: LD_ADDR_VAR 0 4
74722: PUSH
74723: LD_VAR 0 2
74727: PUSH
74728: FOR_IN
74729: IFFALSE 74761
// if See ( side , i ) then
74731: LD_VAR 0 1
74735: PPUSH
74736: LD_VAR 0 4
74740: PPUSH
74741: CALL_OW 292
74745: IFFALSE 74759
// begin result := true ;
74747: LD_ADDR_VAR 0 3
74751: PUSH
74752: LD_INT 1
74754: ST_TO_ADDR
// exit ;
74755: POP
74756: POP
74757: GO 74763
// end ;
74759: GO 74728
74761: POP
74762: POP
// end ;
74763: LD_VAR 0 3
74767: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
74768: LD_INT 0
74770: PPUSH
74771: PPUSH
74772: PPUSH
74773: PPUSH
// if not unit or not points then
74774: LD_VAR 0 1
74778: NOT
74779: PUSH
74780: LD_VAR 0 2
74784: NOT
74785: OR
74786: IFFALSE 74790
// exit ;
74788: GO 74880
// dist := 99999 ;
74790: LD_ADDR_VAR 0 5
74794: PUSH
74795: LD_INT 99999
74797: ST_TO_ADDR
// for i in points do
74798: LD_ADDR_VAR 0 4
74802: PUSH
74803: LD_VAR 0 2
74807: PUSH
74808: FOR_IN
74809: IFFALSE 74878
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
74811: LD_ADDR_VAR 0 6
74815: PUSH
74816: LD_VAR 0 1
74820: PPUSH
74821: LD_VAR 0 4
74825: PUSH
74826: LD_INT 1
74828: ARRAY
74829: PPUSH
74830: LD_VAR 0 4
74834: PUSH
74835: LD_INT 2
74837: ARRAY
74838: PPUSH
74839: CALL_OW 297
74843: ST_TO_ADDR
// if tmpDist < dist then
74844: LD_VAR 0 6
74848: PUSH
74849: LD_VAR 0 5
74853: LESS
74854: IFFALSE 74876
// begin result := i ;
74856: LD_ADDR_VAR 0 3
74860: PUSH
74861: LD_VAR 0 4
74865: ST_TO_ADDR
// dist := tmpDist ;
74866: LD_ADDR_VAR 0 5
74870: PUSH
74871: LD_VAR 0 6
74875: ST_TO_ADDR
// end ; end ;
74876: GO 74808
74878: POP
74879: POP
// end ;
74880: LD_VAR 0 3
74884: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
74885: LD_INT 0
74887: PPUSH
// uc_side := side ;
74888: LD_ADDR_OWVAR 20
74892: PUSH
74893: LD_VAR 0 1
74897: ST_TO_ADDR
// uc_nation := 3 ;
74898: LD_ADDR_OWVAR 21
74902: PUSH
74903: LD_INT 3
74905: ST_TO_ADDR
// vc_chassis := 25 ;
74906: LD_ADDR_OWVAR 37
74910: PUSH
74911: LD_INT 25
74913: ST_TO_ADDR
// vc_engine := engine_siberite ;
74914: LD_ADDR_OWVAR 39
74918: PUSH
74919: LD_INT 3
74921: ST_TO_ADDR
// vc_control := control_computer ;
74922: LD_ADDR_OWVAR 38
74926: PUSH
74927: LD_INT 3
74929: ST_TO_ADDR
// vc_weapon := 59 ;
74930: LD_ADDR_OWVAR 40
74934: PUSH
74935: LD_INT 59
74937: ST_TO_ADDR
// result := CreateVehicle ;
74938: LD_ADDR_VAR 0 5
74942: PUSH
74943: CALL_OW 45
74947: ST_TO_ADDR
// SetDir ( result , d ) ;
74948: LD_VAR 0 5
74952: PPUSH
74953: LD_VAR 0 4
74957: PPUSH
74958: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
74962: LD_VAR 0 5
74966: PPUSH
74967: LD_VAR 0 2
74971: PPUSH
74972: LD_VAR 0 3
74976: PPUSH
74977: LD_INT 0
74979: PPUSH
74980: CALL_OW 48
// end ;
74984: LD_VAR 0 5
74988: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
74989: LD_INT 0
74991: PPUSH
74992: PPUSH
74993: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
74994: LD_ADDR_VAR 0 2
74998: PUSH
74999: LD_INT 0
75001: PUSH
75002: LD_INT 0
75004: PUSH
75005: LD_INT 0
75007: PUSH
75008: LD_INT 0
75010: PUSH
75011: EMPTY
75012: LIST
75013: LIST
75014: LIST
75015: LIST
75016: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
75017: LD_VAR 0 1
75021: NOT
75022: PUSH
75023: LD_VAR 0 1
75027: PPUSH
75028: CALL_OW 264
75032: PUSH
75033: LD_INT 12
75035: PUSH
75036: LD_INT 51
75038: PUSH
75039: LD_INT 32
75041: PUSH
75042: LD_INT 89
75044: PUSH
75045: EMPTY
75046: LIST
75047: LIST
75048: LIST
75049: LIST
75050: IN
75051: NOT
75052: OR
75053: IFFALSE 75057
// exit ;
75055: GO 75155
// for i := 1 to 3 do
75057: LD_ADDR_VAR 0 3
75061: PUSH
75062: DOUBLE
75063: LD_INT 1
75065: DEC
75066: ST_TO_ADDR
75067: LD_INT 3
75069: PUSH
75070: FOR_TO
75071: IFFALSE 75153
// begin tmp := GetCargo ( cargo , i ) ;
75073: LD_ADDR_VAR 0 4
75077: PUSH
75078: LD_VAR 0 1
75082: PPUSH
75083: LD_VAR 0 3
75087: PPUSH
75088: CALL_OW 289
75092: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
75093: LD_ADDR_VAR 0 2
75097: PUSH
75098: LD_VAR 0 2
75102: PPUSH
75103: LD_VAR 0 3
75107: PPUSH
75108: LD_VAR 0 4
75112: PPUSH
75113: CALL_OW 1
75117: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
75118: LD_ADDR_VAR 0 2
75122: PUSH
75123: LD_VAR 0 2
75127: PPUSH
75128: LD_INT 4
75130: PPUSH
75131: LD_VAR 0 2
75135: PUSH
75136: LD_INT 4
75138: ARRAY
75139: PUSH
75140: LD_VAR 0 4
75144: PLUS
75145: PPUSH
75146: CALL_OW 1
75150: ST_TO_ADDR
// end ;
75151: GO 75070
75153: POP
75154: POP
// end ;
75155: LD_VAR 0 2
75159: RET
// export function Length ( array ) ; begin
75160: LD_INT 0
75162: PPUSH
// result := array + 0 ;
75163: LD_ADDR_VAR 0 2
75167: PUSH
75168: LD_VAR 0 1
75172: PUSH
75173: LD_INT 0
75175: PLUS
75176: ST_TO_ADDR
// end ;
75177: LD_VAR 0 2
75181: RET
// export function PrepareArray ( array ) ; begin
75182: LD_INT 0
75184: PPUSH
// result := array diff 0 ;
75185: LD_ADDR_VAR 0 2
75189: PUSH
75190: LD_VAR 0 1
75194: PUSH
75195: LD_INT 0
75197: DIFF
75198: ST_TO_ADDR
// if not result [ 1 ] then
75199: LD_VAR 0 2
75203: PUSH
75204: LD_INT 1
75206: ARRAY
75207: NOT
75208: IFFALSE 75228
// result := Delete ( result , 1 ) ;
75210: LD_ADDR_VAR 0 2
75214: PUSH
75215: LD_VAR 0 2
75219: PPUSH
75220: LD_INT 1
75222: PPUSH
75223: CALL_OW 3
75227: ST_TO_ADDR
// end ;
75228: LD_VAR 0 2
75232: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
75233: LD_INT 0
75235: PPUSH
75236: PPUSH
75237: PPUSH
75238: PPUSH
// sibRocketRange := 25 ;
75239: LD_ADDR_VAR 0 6
75243: PUSH
75244: LD_INT 25
75246: ST_TO_ADDR
// result := false ;
75247: LD_ADDR_VAR 0 4
75251: PUSH
75252: LD_INT 0
75254: ST_TO_ADDR
// for i := 0 to 5 do
75255: LD_ADDR_VAR 0 5
75259: PUSH
75260: DOUBLE
75261: LD_INT 0
75263: DEC
75264: ST_TO_ADDR
75265: LD_INT 5
75267: PUSH
75268: FOR_TO
75269: IFFALSE 75336
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
75271: LD_VAR 0 1
75275: PPUSH
75276: LD_VAR 0 5
75280: PPUSH
75281: LD_VAR 0 6
75285: PPUSH
75286: CALL_OW 272
75290: PPUSH
75291: LD_VAR 0 2
75295: PPUSH
75296: LD_VAR 0 5
75300: PPUSH
75301: LD_VAR 0 6
75305: PPUSH
75306: CALL_OW 273
75310: PPUSH
75311: LD_VAR 0 3
75315: PPUSH
75316: CALL_OW 309
75320: IFFALSE 75334
// begin result := true ;
75322: LD_ADDR_VAR 0 4
75326: PUSH
75327: LD_INT 1
75329: ST_TO_ADDR
// exit ;
75330: POP
75331: POP
75332: GO 75338
// end ;
75334: GO 75268
75336: POP
75337: POP
// end ;
75338: LD_VAR 0 4
75342: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
75343: LD_INT 0
75345: PPUSH
75346: PPUSH
75347: PPUSH
// if btype = b_depot then
75348: LD_VAR 0 2
75352: PUSH
75353: LD_INT 0
75355: EQUAL
75356: IFFALSE 75368
// begin result := true ;
75358: LD_ADDR_VAR 0 3
75362: PUSH
75363: LD_INT 1
75365: ST_TO_ADDR
// exit ;
75366: GO 75484
// end ; pom := GetBase ( depot ) ;
75368: LD_ADDR_VAR 0 4
75372: PUSH
75373: LD_VAR 0 1
75377: PPUSH
75378: CALL_OW 274
75382: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
75383: LD_ADDR_VAR 0 5
75387: PUSH
75388: LD_VAR 0 2
75392: PPUSH
75393: LD_VAR 0 1
75397: PPUSH
75398: CALL_OW 248
75402: PPUSH
75403: CALL_OW 450
75407: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
75408: LD_ADDR_VAR 0 3
75412: PUSH
75413: LD_VAR 0 4
75417: PPUSH
75418: LD_INT 1
75420: PPUSH
75421: CALL_OW 275
75425: PUSH
75426: LD_VAR 0 5
75430: PUSH
75431: LD_INT 1
75433: ARRAY
75434: GREATEREQUAL
75435: PUSH
75436: LD_VAR 0 4
75440: PPUSH
75441: LD_INT 2
75443: PPUSH
75444: CALL_OW 275
75448: PUSH
75449: LD_VAR 0 5
75453: PUSH
75454: LD_INT 2
75456: ARRAY
75457: GREATEREQUAL
75458: AND
75459: PUSH
75460: LD_VAR 0 4
75464: PPUSH
75465: LD_INT 3
75467: PPUSH
75468: CALL_OW 275
75472: PUSH
75473: LD_VAR 0 5
75477: PUSH
75478: LD_INT 3
75480: ARRAY
75481: GREATEREQUAL
75482: AND
75483: ST_TO_ADDR
// end ;
75484: LD_VAR 0 3
75488: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
75489: LD_INT 0
75491: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
75492: LD_VAR 0 1
75496: PPUSH
75497: LD_VAR 0 2
75501: PPUSH
75502: LD_INT 0
75504: PPUSH
75505: LD_INT 0
75507: PPUSH
75508: LD_INT 1
75510: PPUSH
75511: LD_INT 0
75513: PPUSH
75514: CALL_OW 587
// end ;
75518: LD_VAR 0 3
75522: RET
// export function CenterOnNow ( unit ) ; begin
75523: LD_INT 0
75525: PPUSH
// result := IsInUnit ( unit ) ;
75526: LD_ADDR_VAR 0 2
75530: PUSH
75531: LD_VAR 0 1
75535: PPUSH
75536: CALL_OW 310
75540: ST_TO_ADDR
// if not result then
75541: LD_VAR 0 2
75545: NOT
75546: IFFALSE 75558
// result := unit ;
75548: LD_ADDR_VAR 0 2
75552: PUSH
75553: LD_VAR 0 1
75557: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
75558: LD_VAR 0 1
75562: PPUSH
75563: CALL_OW 87
// end ;
75567: LD_VAR 0 2
75571: RET
// export function ComMoveHex ( unit , hex ) ; begin
75572: LD_INT 0
75574: PPUSH
// if not hex then
75575: LD_VAR 0 2
75579: NOT
75580: IFFALSE 75584
// exit ;
75582: GO 75637
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
75584: LD_VAR 0 2
75588: PUSH
75589: LD_INT 1
75591: ARRAY
75592: PPUSH
75593: LD_VAR 0 2
75597: PUSH
75598: LD_INT 2
75600: ARRAY
75601: PPUSH
75602: CALL_OW 428
75606: IFFALSE 75610
// exit ;
75608: GO 75637
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
75610: LD_VAR 0 1
75614: PPUSH
75615: LD_VAR 0 2
75619: PUSH
75620: LD_INT 1
75622: ARRAY
75623: PPUSH
75624: LD_VAR 0 2
75628: PUSH
75629: LD_INT 2
75631: ARRAY
75632: PPUSH
75633: CALL_OW 111
// end ;
75637: LD_VAR 0 3
75641: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
75642: LD_INT 0
75644: PPUSH
75645: PPUSH
75646: PPUSH
// if not unit or not enemy then
75647: LD_VAR 0 1
75651: NOT
75652: PUSH
75653: LD_VAR 0 2
75657: NOT
75658: OR
75659: IFFALSE 75663
// exit ;
75661: GO 75787
// x := GetX ( enemy ) ;
75663: LD_ADDR_VAR 0 4
75667: PUSH
75668: LD_VAR 0 2
75672: PPUSH
75673: CALL_OW 250
75677: ST_TO_ADDR
// y := GetY ( enemy ) ;
75678: LD_ADDR_VAR 0 5
75682: PUSH
75683: LD_VAR 0 2
75687: PPUSH
75688: CALL_OW 251
75692: ST_TO_ADDR
// if ValidHex ( x , y ) then
75693: LD_VAR 0 4
75697: PPUSH
75698: LD_VAR 0 5
75702: PPUSH
75703: CALL_OW 488
75707: IFFALSE 75787
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
75709: LD_VAR 0 2
75713: PPUSH
75714: CALL_OW 247
75718: PUSH
75719: LD_INT 3
75721: PUSH
75722: LD_INT 2
75724: PUSH
75725: EMPTY
75726: LIST
75727: LIST
75728: IN
75729: PUSH
75730: LD_VAR 0 1
75734: PPUSH
75735: CALL_OW 255
75739: PPUSH
75740: LD_VAR 0 2
75744: PPUSH
75745: CALL_OW 292
75749: OR
75750: IFFALSE 75768
// ComAttackUnit ( unit , enemy ) else
75752: LD_VAR 0 1
75756: PPUSH
75757: LD_VAR 0 2
75761: PPUSH
75762: CALL_OW 115
75766: GO 75787
// ComAgressiveMove ( unit , x , y ) ;
75768: LD_VAR 0 1
75772: PPUSH
75773: LD_VAR 0 4
75777: PPUSH
75778: LD_VAR 0 5
75782: PPUSH
75783: CALL_OW 114
// end ;
75787: LD_VAR 0 3
75791: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
75792: LD_INT 0
75794: PPUSH
75795: PPUSH
75796: PPUSH
// list := AreaToList ( area , 0 ) ;
75797: LD_ADDR_VAR 0 5
75801: PUSH
75802: LD_VAR 0 1
75806: PPUSH
75807: LD_INT 0
75809: PPUSH
75810: CALL_OW 517
75814: ST_TO_ADDR
// if not list then
75815: LD_VAR 0 5
75819: NOT
75820: IFFALSE 75824
// exit ;
75822: GO 75954
// if all then
75824: LD_VAR 0 2
75828: IFFALSE 75916
// begin for i := 1 to list [ 1 ] do
75830: LD_ADDR_VAR 0 4
75834: PUSH
75835: DOUBLE
75836: LD_INT 1
75838: DEC
75839: ST_TO_ADDR
75840: LD_VAR 0 5
75844: PUSH
75845: LD_INT 1
75847: ARRAY
75848: PUSH
75849: FOR_TO
75850: IFFALSE 75912
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
75852: LD_ADDR_VAR 0 3
75856: PUSH
75857: LD_VAR 0 3
75861: PPUSH
75862: LD_VAR 0 3
75866: PUSH
75867: LD_INT 1
75869: PLUS
75870: PPUSH
75871: LD_VAR 0 5
75875: PUSH
75876: LD_INT 1
75878: ARRAY
75879: PUSH
75880: LD_VAR 0 4
75884: ARRAY
75885: PUSH
75886: LD_VAR 0 5
75890: PUSH
75891: LD_INT 2
75893: ARRAY
75894: PUSH
75895: LD_VAR 0 4
75899: ARRAY
75900: PUSH
75901: EMPTY
75902: LIST
75903: LIST
75904: PPUSH
75905: CALL_OW 1
75909: ST_TO_ADDR
75910: GO 75849
75912: POP
75913: POP
// exit ;
75914: GO 75954
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
75916: LD_ADDR_VAR 0 3
75920: PUSH
75921: LD_VAR 0 5
75925: PUSH
75926: LD_INT 1
75928: ARRAY
75929: PUSH
75930: LD_INT 1
75932: ARRAY
75933: PUSH
75934: LD_VAR 0 5
75938: PUSH
75939: LD_INT 2
75941: ARRAY
75942: PUSH
75943: LD_INT 1
75945: ARRAY
75946: PUSH
75947: EMPTY
75948: LIST
75949: LIST
75950: PUSH
75951: EMPTY
75952: LIST
75953: ST_TO_ADDR
// end ;
75954: LD_VAR 0 3
75958: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
75959: LD_INT 0
75961: PPUSH
75962: PPUSH
// list := AreaToList ( area , 0 ) ;
75963: LD_ADDR_VAR 0 4
75967: PUSH
75968: LD_VAR 0 1
75972: PPUSH
75973: LD_INT 0
75975: PPUSH
75976: CALL_OW 517
75980: ST_TO_ADDR
// if not list then
75981: LD_VAR 0 4
75985: NOT
75986: IFFALSE 75990
// exit ;
75988: GO 76031
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
75990: LD_ADDR_VAR 0 3
75994: PUSH
75995: LD_VAR 0 4
75999: PUSH
76000: LD_INT 1
76002: ARRAY
76003: PUSH
76004: LD_INT 1
76006: ARRAY
76007: PUSH
76008: LD_VAR 0 4
76012: PUSH
76013: LD_INT 2
76015: ARRAY
76016: PUSH
76017: LD_INT 1
76019: ARRAY
76020: PUSH
76021: LD_VAR 0 2
76025: PUSH
76026: EMPTY
76027: LIST
76028: LIST
76029: LIST
76030: ST_TO_ADDR
// end ;
76031: LD_VAR 0 3
76035: RET
// export function First ( array ) ; begin
76036: LD_INT 0
76038: PPUSH
// if not array then
76039: LD_VAR 0 1
76043: NOT
76044: IFFALSE 76048
// exit ;
76046: GO 76062
// result := array [ 1 ] ;
76048: LD_ADDR_VAR 0 2
76052: PUSH
76053: LD_VAR 0 1
76057: PUSH
76058: LD_INT 1
76060: ARRAY
76061: ST_TO_ADDR
// end ;
76062: LD_VAR 0 2
76066: RET
// export function Last ( array ) ; begin
76067: LD_INT 0
76069: PPUSH
// if not array then
76070: LD_VAR 0 1
76074: NOT
76075: IFFALSE 76079
// exit ;
76077: GO 76095
// result := array [ array ] ;
76079: LD_ADDR_VAR 0 2
76083: PUSH
76084: LD_VAR 0 1
76088: PUSH
76089: LD_VAR 0 1
76093: ARRAY
76094: ST_TO_ADDR
// end ;
76095: LD_VAR 0 2
76099: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
76100: LD_INT 0
76102: PPUSH
76103: PPUSH
// result := [ ] ;
76104: LD_ADDR_VAR 0 5
76108: PUSH
76109: EMPTY
76110: ST_TO_ADDR
// if not array then
76111: LD_VAR 0 1
76115: NOT
76116: IFFALSE 76120
// exit ;
76118: GO 76232
// for i := 1 to array do
76120: LD_ADDR_VAR 0 6
76124: PUSH
76125: DOUBLE
76126: LD_INT 1
76128: DEC
76129: ST_TO_ADDR
76130: LD_VAR 0 1
76134: PUSH
76135: FOR_TO
76136: IFFALSE 76230
// if array [ i ] [ index ] = value then
76138: LD_VAR 0 1
76142: PUSH
76143: LD_VAR 0 6
76147: ARRAY
76148: PUSH
76149: LD_VAR 0 2
76153: ARRAY
76154: PUSH
76155: LD_VAR 0 3
76159: EQUAL
76160: IFFALSE 76228
// begin if indexColumn then
76162: LD_VAR 0 4
76166: IFFALSE 76202
// result := Join ( result , array [ i ] [ indexColumn ] ) else
76168: LD_ADDR_VAR 0 5
76172: PUSH
76173: LD_VAR 0 5
76177: PPUSH
76178: LD_VAR 0 1
76182: PUSH
76183: LD_VAR 0 6
76187: ARRAY
76188: PUSH
76189: LD_VAR 0 4
76193: ARRAY
76194: PPUSH
76195: CALL 71414 0 2
76199: ST_TO_ADDR
76200: GO 76228
// result := Join ( result , array [ i ] ) ;
76202: LD_ADDR_VAR 0 5
76206: PUSH
76207: LD_VAR 0 5
76211: PPUSH
76212: LD_VAR 0 1
76216: PUSH
76217: LD_VAR 0 6
76221: ARRAY
76222: PPUSH
76223: CALL 71414 0 2
76227: ST_TO_ADDR
// end ;
76228: GO 76135
76230: POP
76231: POP
// end ;
76232: LD_VAR 0 5
76236: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
76237: LD_INT 0
76239: PPUSH
// if not vehicles or not parkingPoint then
76240: LD_VAR 0 1
76244: NOT
76245: PUSH
76246: LD_VAR 0 2
76250: NOT
76251: OR
76252: IFFALSE 76256
// exit ;
76254: GO 76354
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
76256: LD_ADDR_VAR 0 1
76260: PUSH
76261: LD_VAR 0 1
76265: PPUSH
76266: LD_INT 50
76268: PUSH
76269: EMPTY
76270: LIST
76271: PUSH
76272: LD_INT 3
76274: PUSH
76275: LD_INT 92
76277: PUSH
76278: LD_VAR 0 2
76282: PUSH
76283: LD_INT 1
76285: ARRAY
76286: PUSH
76287: LD_VAR 0 2
76291: PUSH
76292: LD_INT 2
76294: ARRAY
76295: PUSH
76296: LD_INT 8
76298: PUSH
76299: EMPTY
76300: LIST
76301: LIST
76302: LIST
76303: LIST
76304: PUSH
76305: EMPTY
76306: LIST
76307: LIST
76308: PUSH
76309: EMPTY
76310: LIST
76311: LIST
76312: PPUSH
76313: CALL_OW 72
76317: ST_TO_ADDR
// if not vehicles then
76318: LD_VAR 0 1
76322: NOT
76323: IFFALSE 76327
// exit ;
76325: GO 76354
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
76327: LD_VAR 0 1
76331: PPUSH
76332: LD_VAR 0 2
76336: PUSH
76337: LD_INT 1
76339: ARRAY
76340: PPUSH
76341: LD_VAR 0 2
76345: PUSH
76346: LD_INT 2
76348: ARRAY
76349: PPUSH
76350: CALL_OW 111
// end ;
76354: LD_VAR 0 3
76358: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
76359: LD_INT 0
76361: PPUSH
76362: PPUSH
76363: PPUSH
// if not side or not area then
76364: LD_VAR 0 1
76368: NOT
76369: PUSH
76370: LD_VAR 0 2
76374: NOT
76375: OR
76376: IFFALSE 76380
// exit ;
76378: GO 76499
// tmp := AreaToList ( area , 0 ) ;
76380: LD_ADDR_VAR 0 5
76384: PUSH
76385: LD_VAR 0 2
76389: PPUSH
76390: LD_INT 0
76392: PPUSH
76393: CALL_OW 517
76397: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
76398: LD_ADDR_VAR 0 4
76402: PUSH
76403: DOUBLE
76404: LD_INT 1
76406: DEC
76407: ST_TO_ADDR
76408: LD_VAR 0 5
76412: PUSH
76413: LD_INT 1
76415: ARRAY
76416: PUSH
76417: FOR_TO
76418: IFFALSE 76497
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
76420: LD_VAR 0 5
76424: PUSH
76425: LD_INT 1
76427: ARRAY
76428: PUSH
76429: LD_VAR 0 4
76433: ARRAY
76434: PPUSH
76435: LD_VAR 0 5
76439: PUSH
76440: LD_INT 2
76442: ARRAY
76443: PUSH
76444: LD_VAR 0 4
76448: ARRAY
76449: PPUSH
76450: CALL_OW 351
76454: IFFALSE 76495
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
76456: LD_VAR 0 5
76460: PUSH
76461: LD_INT 1
76463: ARRAY
76464: PUSH
76465: LD_VAR 0 4
76469: ARRAY
76470: PPUSH
76471: LD_VAR 0 5
76475: PUSH
76476: LD_INT 2
76478: ARRAY
76479: PUSH
76480: LD_VAR 0 4
76484: ARRAY
76485: PPUSH
76486: LD_VAR 0 1
76490: PPUSH
76491: CALL_OW 244
// end ;
76495: GO 76417
76497: POP
76498: POP
// end ; end_of_file
76499: LD_VAR 0 3
76503: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
76504: LD_VAR 0 1
76508: PUSH
76509: LD_INT 200
76511: DOUBLE
76512: GREATEREQUAL
76513: IFFALSE 76521
76515: LD_INT 299
76517: DOUBLE
76518: LESSEQUAL
76519: IFTRUE 76523
76521: GO 76555
76523: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
76524: LD_VAR 0 1
76528: PPUSH
76529: LD_VAR 0 2
76533: PPUSH
76534: LD_VAR 0 3
76538: PPUSH
76539: LD_VAR 0 4
76543: PPUSH
76544: LD_VAR 0 5
76548: PPUSH
76549: CALL 28920 0 5
76553: GO 76632
76555: LD_INT 300
76557: DOUBLE
76558: GREATEREQUAL
76559: IFFALSE 76567
76561: LD_INT 399
76563: DOUBLE
76564: LESSEQUAL
76565: IFTRUE 76569
76567: GO 76631
76569: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
76570: LD_VAR 0 1
76574: PPUSH
76575: LD_VAR 0 2
76579: PPUSH
76580: LD_VAR 0 3
76584: PPUSH
76585: LD_VAR 0 4
76589: PPUSH
76590: LD_VAR 0 5
76594: PPUSH
76595: LD_VAR 0 6
76599: PPUSH
76600: LD_VAR 0 7
76604: PPUSH
76605: LD_VAR 0 8
76609: PPUSH
76610: LD_VAR 0 9
76614: PPUSH
76615: LD_VAR 0 10
76619: PPUSH
76620: LD_VAR 0 11
76624: PPUSH
76625: CALL 24828 0 11
76629: GO 76632
76631: POP
// end ;
76632: PPOPN 11
76634: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
76635: LD_VAR 0 1
76639: PPUSH
76640: LD_VAR 0 2
76644: PPUSH
76645: LD_VAR 0 3
76649: PPUSH
76650: LD_VAR 0 4
76654: PPUSH
76655: LD_VAR 0 5
76659: PPUSH
76660: CALL 28305 0 5
// end ; end_of_file
76664: PPOPN 5
76666: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
76667: LD_VAR 0 1
76671: PPUSH
76672: LD_VAR 0 2
76676: PPUSH
76677: LD_VAR 0 3
76681: PPUSH
76682: LD_VAR 0 4
76686: PPUSH
76687: LD_VAR 0 5
76691: PPUSH
76692: LD_VAR 0 6
76696: PPUSH
76697: CALL 12480 0 6
// end ;
76701: PPOPN 6
76703: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
76704: LD_INT 0
76706: PPUSH
// begin if not units then
76707: LD_VAR 0 1
76711: NOT
76712: IFFALSE 76716
// exit ;
76714: GO 76716
// end ;
76716: PPOPN 7
76718: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
76719: CALL 12367 0 0
// end ;
76723: PPOPN 1
76725: END
