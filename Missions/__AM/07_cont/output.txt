// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// Init ;
   8: CALL 44 0 0
// DebugMode ;
  12: CALL 265 0 0
// AnimateTrees ( true ) ;
  16: LD_INT 1
  18: PPUSH
  19: CALL_OW 573
// CreateNature ;
  23: CALL 1543 0 0
// PrepareRussians ;
  27: CALL 4553 0 0
// PrepareAmericans ;
  31: CALL 3423 0 0
// Action ;
  35: CALL 8457 0 0
// SaveForQuickRestart ;
  39: CALL_OW 22
// end ;
  43: END
// export debug ; export mission_prev_prefix , mission_prefix ; export buildings_counter , time_to_end , can_end , must_end , kill_counter ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// mission_prefix := 07c_ ;
  55: LD_ADDR_EXP 3
  59: PUSH
  60: LD_STRING 07c_
  62: ST_TO_ADDR
// mission_prev_prefix := 07_ ;
  63: LD_ADDR_EXP 2
  67: PUSH
  68: LD_STRING 07_
  70: ST_TO_ADDR
// buildings_counter := 0 ;
  71: LD_ADDR_EXP 4
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// time_to_end := [ [ 32 32$00 , 29 29$00 , 26 26$00 , 25 25$00 ] [ Difficulty ] , [ 38 38$00 , 35 35$00 , 32 32$00 , 31 31$00 ] [ Difficulty ] , [ 44 44$00 , 41 41$00 , 38 38$00 , 37 37$00 ] [ Difficulty ] ] ;
  79: LD_ADDR_EXP 5
  83: PUSH
  84: LD_INT 67200
  86: PUSH
  87: LD_INT 60900
  89: PUSH
  90: LD_INT 54600
  92: PUSH
  93: LD_INT 52500
  95: PUSH
  96: EMPTY
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: PUSH
 102: LD_OWVAR 67
 106: ARRAY
 107: PUSH
 108: LD_INT 79800
 110: PUSH
 111: LD_INT 73500
 113: PUSH
 114: LD_INT 67200
 116: PUSH
 117: LD_INT 65100
 119: PUSH
 120: EMPTY
 121: LIST
 122: LIST
 123: LIST
 124: LIST
 125: PUSH
 126: LD_OWVAR 67
 130: ARRAY
 131: PUSH
 132: LD_INT 92400
 134: PUSH
 135: LD_INT 86100
 137: PUSH
 138: LD_INT 79800
 140: PUSH
 141: LD_INT 77700
 143: PUSH
 144: EMPTY
 145: LIST
 146: LIST
 147: LIST
 148: LIST
 149: PUSH
 150: LD_OWVAR 67
 154: ARRAY
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: ST_TO_ADDR
// can_end := false ;
 161: LD_ADDR_EXP 6
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// must_end := false ;
 169: LD_ADDR_EXP 7
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// kill_counter := 0 ;
 177: LD_ADDR_EXP 8
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// end ;
 185: LD_VAR 0 1
 189: RET
// every 0 0$01 trigger not debug do
 190: LD_EXP 1
 194: NOT
 195: IFFALSE 264
 197: GO 199
 199: DISABLE
// begin enable ;
 200: ENABLE
// if not must_end then
 201: LD_EXP 7
 205: NOT
 206: IFFALSE 227
// display_strings := [ #Am07-1 , tick ] else
 208: LD_ADDR_OWVAR 47
 212: PUSH
 213: LD_STRING #Am07-1
 215: PUSH
 216: LD_OWVAR 1
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: ST_TO_ADDR
 225: GO 264
// display_strings := [ #Am07-1 , tick , #Am07-2 , time_to_end [ 3 ] - tick ] ;
 227: LD_ADDR_OWVAR 47
 231: PUSH
 232: LD_STRING #Am07-1
 234: PUSH
 235: LD_OWVAR 1
 239: PUSH
 240: LD_STRING #Am07-2
 242: PUSH
 243: LD_EXP 5
 247: PUSH
 248: LD_INT 3
 250: ARRAY
 251: PUSH
 252: LD_OWVAR 1
 256: MINUS
 257: PUSH
 258: EMPTY
 259: LIST
 260: LIST
 261: LIST
 262: LIST
 263: ST_TO_ADDR
// end ;
 264: END
// function DebugMode ; var i ; begin
 265: LD_INT 0
 267: PPUSH
 268: PPUSH
// if not debug then
 269: LD_EXP 1
 273: NOT
 274: IFFALSE 278
// exit ;
 276: GO 285
// FogOff ( 1 ) ;
 278: LD_INT 1
 280: PPUSH
 281: CALL_OW 344
// end ;
 285: LD_VAR 0 1
 289: RET
// every 3 trigger debug do var i , filter ;
 290: LD_EXP 1
 294: IFFALSE 383
 296: GO 298
 298: DISABLE
 299: LD_INT 0
 301: PPUSH
 302: PPUSH
// begin enable ;
 303: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 500 ] ] ] ) ;
 304: LD_ADDR_VAR 0 2
 308: PUSH
 309: LD_INT 22
 311: PUSH
 312: LD_INT 1
 314: PUSH
 315: EMPTY
 316: LIST
 317: LIST
 318: PUSH
 319: LD_INT 3
 321: PUSH
 322: LD_INT 24
 324: PUSH
 325: LD_INT 500
 327: PUSH
 328: EMPTY
 329: LIST
 330: LIST
 331: PUSH
 332: EMPTY
 333: LIST
 334: LIST
 335: PUSH
 336: EMPTY
 337: LIST
 338: LIST
 339: PPUSH
 340: CALL_OW 69
 344: ST_TO_ADDR
// if not filter then
 345: LD_VAR 0 2
 349: NOT
 350: IFFALSE 354
// exit ;
 352: GO 383
// for i in filter do
 354: LD_ADDR_VAR 0 1
 358: PUSH
 359: LD_VAR 0 2
 363: PUSH
 364: FOR_IN
 365: IFFALSE 381
// SetLives ( i , 1000 ) ;
 367: LD_VAR 0 1
 371: PPUSH
 372: LD_INT 1000
 374: PPUSH
 375: CALL_OW 234
 379: GO 364
 381: POP
 382: POP
// end ;
 383: PPOPN 2
 385: END
// every 0 0$1 trigger kill_counter >= 20 do
 386: LD_EXP 8
 390: PUSH
 391: LD_INT 20
 393: GREATEREQUAL
 394: IFFALSE 406
 396: GO 398
 398: DISABLE
// SetAchievement ( ACH_HITMAN ) ;
 399: LD_STRING ACH_HITMAN
 401: PPUSH
 402: CALL_OW 543
 406: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) >= 3 do
 407: LD_INT 22
 409: PUSH
 410: LD_INT 1
 412: PUSH
 413: EMPTY
 414: LIST
 415: LIST
 416: PUSH
 417: LD_INT 23
 419: PUSH
 420: LD_INT 3
 422: PUSH
 423: EMPTY
 424: LIST
 425: LIST
 426: PUSH
 427: LD_INT 21
 429: PUSH
 430: LD_INT 2
 432: PUSH
 433: EMPTY
 434: LIST
 435: LIST
 436: PUSH
 437: EMPTY
 438: LIST
 439: LIST
 440: LIST
 441: PPUSH
 442: CALL_OW 69
 446: PUSH
 447: LD_INT 3
 449: GREATEREQUAL
 450: IFFALSE 462
 452: GO 454
 454: DISABLE
// SetAchievement ( ACH_TANKACE ) ;
 455: LD_STRING ACH_TANKACE
 457: PPUSH
 458: CALL_OW 543
 462: END
// every 0 0$1 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) = 0 do
 463: LD_INT 2
 465: PUSH
 466: LD_INT 30
 468: PUSH
 469: LD_INT 0
 471: PUSH
 472: EMPTY
 473: LIST
 474: LIST
 475: PUSH
 476: LD_INT 30
 478: PUSH
 479: LD_INT 1
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: PUSH
 486: EMPTY
 487: LIST
 488: LIST
 489: LIST
 490: PPUSH
 491: CALL_OW 69
 495: PUSH
 496: LD_INT 0
 498: EQUAL
 499: IFFALSE 511
 501: GO 503
 503: DISABLE
// SetAchievement ( ACH_COMMANDO ) ; end_of_file
 504: LD_STRING ACH_COMMANDO
 506: PPUSH
 507: CALL_OW 543
 511: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 512: LD_INT 0
 514: PPUSH
// uc_side := side ;
 515: LD_ADDR_OWVAR 20
 519: PUSH
 520: LD_VAR 0 1
 524: ST_TO_ADDR
// uc_nation := nation ;
 525: LD_ADDR_OWVAR 21
 529: PUSH
 530: LD_VAR 0 2
 534: ST_TO_ADDR
// vc_chassis := chassis ;
 535: LD_ADDR_OWVAR 37
 539: PUSH
 540: LD_VAR 0 3
 544: ST_TO_ADDR
// vc_engine := engine ;
 545: LD_ADDR_OWVAR 39
 549: PUSH
 550: LD_VAR 0 4
 554: ST_TO_ADDR
// vc_control := control ;
 555: LD_ADDR_OWVAR 38
 559: PUSH
 560: LD_VAR 0 5
 564: ST_TO_ADDR
// vc_weapon := weapon ;
 565: LD_ADDR_OWVAR 40
 569: PUSH
 570: LD_VAR 0 6
 574: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 575: LD_ADDR_OWVAR 41
 579: PUSH
 580: LD_VAR 0 7
 584: ST_TO_ADDR
// result := CreateVehicle ;
 585: LD_ADDR_VAR 0 8
 589: PUSH
 590: CALL_OW 45
 594: ST_TO_ADDR
// end ;
 595: LD_VAR 0 8
 599: RET
// export function GetRandom ( sex ) ; var i , filter ; begin
 600: LD_INT 0
 602: PPUSH
 603: PPUSH
 604: PPUSH
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] ;
 605: LD_ADDR_VAR 0 4
 609: PUSH
 610: LD_INT 22
 612: PUSH
 613: LD_INT 1
 615: PUSH
 616: EMPTY
 617: LIST
 618: LIST
 619: PUSH
 620: LD_INT 21
 622: PUSH
 623: LD_INT 1
 625: PUSH
 626: EMPTY
 627: LIST
 628: LIST
 629: PUSH
 630: LD_INT 50
 632: PUSH
 633: EMPTY
 634: LIST
 635: PUSH
 636: EMPTY
 637: LIST
 638: LIST
 639: LIST
 640: PPUSH
 641: CALL_OW 69
 645: PUSH
 646: LD_EXP 9
 650: PUSH
 651: LD_EXP 10
 655: PUSH
 656: LD_EXP 11
 660: PUSH
 661: LD_EXP 12
 665: PUSH
 666: LD_EXP 13
 670: PUSH
 671: LD_EXP 14
 675: PUSH
 676: LD_EXP 15
 680: PUSH
 681: LD_EXP 16
 685: PUSH
 686: LD_EXP 18
 690: PUSH
 691: LD_EXP 17
 695: PUSH
 696: EMPTY
 697: LIST
 698: LIST
 699: LIST
 700: LIST
 701: LIST
 702: LIST
 703: LIST
 704: LIST
 705: LIST
 706: LIST
 707: DIFF
 708: ST_TO_ADDR
// if not filter then
 709: LD_VAR 0 4
 713: NOT
 714: IFFALSE 718
// exit ;
 716: GO 745
// result := UnitFilter ( filter , [ f_sex , sex ] ) ;
 718: LD_ADDR_VAR 0 2
 722: PUSH
 723: LD_VAR 0 4
 727: PPUSH
 728: LD_INT 26
 730: PUSH
 731: LD_VAR 0 1
 735: PUSH
 736: EMPTY
 737: LIST
 738: LIST
 739: PPUSH
 740: CALL_OW 72
 744: ST_TO_ADDR
// end ;
 745: LD_VAR 0 2
 749: RET
// export function SayX ( units , ident ) ; var i ; begin
 750: LD_INT 0
 752: PPUSH
 753: PPUSH
// result := false ;
 754: LD_ADDR_VAR 0 3
 758: PUSH
 759: LD_INT 0
 761: ST_TO_ADDR
// if not units then
 762: LD_VAR 0 1
 766: NOT
 767: IFFALSE 771
// exit ;
 769: GO 825
// for i in units do
 771: LD_ADDR_VAR 0 4
 775: PUSH
 776: LD_VAR 0 1
 780: PUSH
 781: FOR_IN
 782: IFFALSE 823
// if IsOk ( i ) then
 784: LD_VAR 0 4
 788: PPUSH
 789: CALL_OW 302
 793: IFFALSE 821
// begin Say ( i , ident ) ;
 795: LD_VAR 0 4
 799: PPUSH
 800: LD_VAR 0 2
 804: PPUSH
 805: CALL_OW 88
// result := i ;
 809: LD_ADDR_VAR 0 3
 813: PUSH
 814: LD_VAR 0 4
 818: ST_TO_ADDR
// break ;
 819: GO 823
// end ;
 821: GO 781
 823: POP
 824: POP
// end ;
 825: LD_VAR 0 3
 829: RET
// export function GoToAnotherTower ( un , b , x , y ) ; var i , filter , barracks , side ; begin
 830: LD_INT 0
 832: PPUSH
 833: PPUSH
 834: PPUSH
 835: PPUSH
 836: PPUSH
// if not un or not IsOk ( un ) then
 837: LD_VAR 0 1
 841: NOT
 842: PUSH
 843: LD_VAR 0 1
 847: PPUSH
 848: CALL_OW 302
 852: NOT
 853: OR
 854: IFFALSE 858
// exit ;
 856: GO 1148
// side := GetSide ( un ) ;
 858: LD_ADDR_VAR 0 9
 862: PUSH
 863: LD_VAR 0 1
 867: PPUSH
 868: CALL_OW 255
 872: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_ok ] , [ f_empty ] ] ) diff b ;
 873: LD_ADDR_VAR 0 7
 877: PUSH
 878: LD_INT 22
 880: PUSH
 881: LD_VAR 0 9
 885: PUSH
 886: EMPTY
 887: LIST
 888: LIST
 889: PUSH
 890: LD_INT 30
 892: PUSH
 893: LD_INT 32
 895: PUSH
 896: EMPTY
 897: LIST
 898: LIST
 899: PUSH
 900: LD_INT 50
 902: PUSH
 903: EMPTY
 904: LIST
 905: PUSH
 906: LD_INT 58
 908: PUSH
 909: EMPTY
 910: LIST
 911: PUSH
 912: EMPTY
 913: LIST
 914: LIST
 915: LIST
 916: LIST
 917: PPUSH
 918: CALL_OW 69
 922: PUSH
 923: LD_VAR 0 2
 927: DIFF
 928: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_barracks ] ] ) ;
 929: LD_ADDR_VAR 0 8
 933: PUSH
 934: LD_INT 22
 936: PUSH
 937: LD_VAR 0 9
 941: PUSH
 942: EMPTY
 943: LIST
 944: LIST
 945: PUSH
 946: LD_INT 30
 948: PUSH
 949: LD_INT 5
 951: PUSH
 952: EMPTY
 953: LIST
 954: LIST
 955: PUSH
 956: EMPTY
 957: LIST
 958: LIST
 959: PPUSH
 960: CALL_OW 69
 964: ST_TO_ADDR
// if not filter then
 965: LD_VAR 0 7
 969: NOT
 970: IFFALSE 1060
// begin ComMoveXY ( un , x , y ) ;
 972: LD_VAR 0 1
 976: PPUSH
 977: LD_VAR 0 3
 981: PPUSH
 982: LD_VAR 0 4
 986: PPUSH
 987: CALL_OW 111
// if barracks then
 991: LD_VAR 0 8
 995: IFFALSE 1058
// for i in barracks do
 997: LD_ADDR_VAR 0 6
1001: PUSH
1002: LD_VAR 0 8
1006: PUSH
1007: FOR_IN
1008: IFFALSE 1056
// begin if UnitsInside ( i ) < 6 and IsOk ( i ) then
1010: LD_VAR 0 6
1014: PPUSH
1015: CALL_OW 313
1019: PUSH
1020: LD_INT 6
1022: LESS
1023: PUSH
1024: LD_VAR 0 6
1028: PPUSH
1029: CALL_OW 302
1033: AND
1034: IFFALSE 1054
// begin AddComEnterUnit ( un , i ) ;
1036: LD_VAR 0 1
1040: PPUSH
1041: LD_VAR 0 6
1045: PPUSH
1046: CALL_OW 180
// exit ;
1050: POP
1051: POP
1052: GO 1148
// end ; end ;
1054: GO 1007
1056: POP
1057: POP
// end else
1058: GO 1148
// begin filter := SortByDistanceUnit ( un , filter , true , true ) ;
1060: LD_ADDR_VAR 0 7
1064: PUSH
1065: LD_VAR 0 1
1069: PPUSH
1070: LD_VAR 0 7
1074: PPUSH
1075: LD_INT 1
1077: PPUSH
1078: LD_INT 1
1080: PPUSH
1081: CALL 36535 0 4
1085: ST_TO_ADDR
// for i in filter do
1086: LD_ADDR_VAR 0 6
1090: PUSH
1091: LD_VAR 0 7
1095: PUSH
1096: FOR_IN
1097: IFFALSE 1146
// if GetTag ( i ) <> 7 then
1099: LD_VAR 0 6
1103: PPUSH
1104: CALL_OW 110
1108: PUSH
1109: LD_INT 7
1111: NONEQUAL
1112: IFFALSE 1144
// begin ComEnterUnit ( un , i ) ;
1114: LD_VAR 0 1
1118: PPUSH
1119: LD_VAR 0 6
1123: PPUSH
1124: CALL_OW 120
// SetTag ( i , 7 ) ;
1128: LD_VAR 0 6
1132: PPUSH
1133: LD_INT 7
1135: PPUSH
1136: CALL_OW 109
// exit ;
1140: POP
1141: POP
1142: GO 1148
// end ;
1144: GO 1096
1146: POP
1147: POP
// end ; end ;
1148: LD_VAR 0 5
1152: RET
// export function BaseNeedEnergy ( base ) ; var i , tmp ; begin
1153: LD_INT 0
1155: PPUSH
1156: PPUSH
1157: PPUSH
// if not base then
1158: LD_VAR 0 1
1162: NOT
1163: IFFALSE 1167
// exit ;
1165: GO 1225
// tmp := GetEnergy ( GetBase ( base ) ) ;
1167: LD_ADDR_VAR 0 4
1171: PUSH
1172: LD_VAR 0 1
1176: PPUSH
1177: CALL_OW 274
1181: PPUSH
1182: CALL_OW 278
1186: ST_TO_ADDR
// if tmp [ 1 ] > tmp [ 4 ] then
1187: LD_VAR 0 4
1191: PUSH
1192: LD_INT 1
1194: ARRAY
1195: PUSH
1196: LD_VAR 0 4
1200: PUSH
1201: LD_INT 4
1203: ARRAY
1204: GREATER
1205: IFFALSE 1217
// result := true else
1207: LD_ADDR_VAR 0 2
1211: PUSH
1212: LD_INT 1
1214: ST_TO_ADDR
1215: GO 1225
// result := false ;
1217: LD_ADDR_VAR 0 2
1221: PUSH
1222: LD_INT 0
1224: ST_TO_ADDR
// end ;
1225: LD_VAR 0 2
1229: RET
// export function FilterPeople ( side ) ; begin
1230: LD_INT 0
1232: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) ;
1233: LD_ADDR_VAR 0 2
1237: PUSH
1238: LD_INT 22
1240: PUSH
1241: LD_VAR 0 1
1245: PUSH
1246: EMPTY
1247: LIST
1248: LIST
1249: PUSH
1250: LD_INT 21
1252: PUSH
1253: LD_INT 1
1255: PUSH
1256: EMPTY
1257: LIST
1258: LIST
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: PPUSH
1264: CALL_OW 69
1268: ST_TO_ADDR
// end ;
1269: LD_VAR 0 2
1273: RET
// export function FilterDrivers ( side ) ; begin
1274: LD_INT 0
1276: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_outside ] ] ] ) ;
1277: LD_ADDR_VAR 0 2
1281: PUSH
1282: LD_INT 22
1284: PUSH
1285: LD_VAR 0 1
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: PUSH
1294: LD_INT 3
1296: PUSH
1297: LD_INT 56
1299: PUSH
1300: EMPTY
1301: LIST
1302: PUSH
1303: EMPTY
1304: LIST
1305: LIST
1306: PUSH
1307: EMPTY
1308: LIST
1309: LIST
1310: PPUSH
1311: CALL_OW 69
1315: ST_TO_ADDR
// end ;
1316: LD_VAR 0 2
1320: RET
// export function FilterPeopleArea ( side , area ) ; begin
1321: LD_INT 0
1323: PPUSH
// result := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
1324: LD_ADDR_VAR 0 3
1328: PUSH
1329: LD_VAR 0 2
1333: PPUSH
1334: LD_INT 22
1336: PUSH
1337: LD_INT 1
1339: PUSH
1340: EMPTY
1341: LIST
1342: LIST
1343: PUSH
1344: LD_INT 21
1346: PUSH
1347: LD_INT 1
1349: PUSH
1350: EMPTY
1351: LIST
1352: LIST
1353: PUSH
1354: EMPTY
1355: LIST
1356: LIST
1357: PPUSH
1358: CALL_OW 70
1362: ST_TO_ADDR
// end ;
1363: LD_VAR 0 3
1367: RET
// export function FilterDriversArea ( side , area ) ; var i , tmp ; begin
1368: LD_INT 0
1370: PPUSH
1371: PPUSH
1372: PPUSH
// tmp := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
1373: LD_ADDR_VAR 0 5
1377: PUSH
1378: LD_VAR 0 2
1382: PPUSH
1383: LD_INT 22
1385: PUSH
1386: LD_INT 1
1388: PUSH
1389: EMPTY
1390: LIST
1391: LIST
1392: PUSH
1393: LD_INT 21
1395: PUSH
1396: LD_INT 2
1398: PUSH
1399: EMPTY
1400: LIST
1401: LIST
1402: PUSH
1403: LD_INT 3
1405: PUSH
1406: LD_INT 58
1408: PUSH
1409: EMPTY
1410: LIST
1411: PUSH
1412: EMPTY
1413: LIST
1414: LIST
1415: PUSH
1416: EMPTY
1417: LIST
1418: LIST
1419: LIST
1420: PPUSH
1421: CALL_OW 70
1425: ST_TO_ADDR
// result := [ ] ;
1426: LD_ADDR_VAR 0 3
1430: PUSH
1431: EMPTY
1432: ST_TO_ADDR
// if not tmp then
1433: LD_VAR 0 5
1437: NOT
1438: IFFALSE 1442
// exit ;
1440: GO 1494
// for i in tmp do
1442: LD_ADDR_VAR 0 4
1446: PUSH
1447: LD_VAR 0 5
1451: PUSH
1452: FOR_IN
1453: IFFALSE 1478
// result := result union IsDrivenBy ( i ) ;
1455: LD_ADDR_VAR 0 3
1459: PUSH
1460: LD_VAR 0 3
1464: PUSH
1465: LD_VAR 0 4
1469: PPUSH
1470: CALL_OW 311
1474: UNION
1475: ST_TO_ADDR
1476: GO 1452
1478: POP
1479: POP
// result := result diff 0 ;
1480: LD_ADDR_VAR 0 3
1484: PUSH
1485: LD_VAR 0 3
1489: PUSH
1490: LD_INT 0
1492: DIFF
1493: ST_TO_ADDR
// end ;
1494: LD_VAR 0 3
1498: RET
// export function FilterBuildings ( side ) ; begin
1499: LD_INT 0
1501: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
1502: LD_ADDR_VAR 0 2
1506: PUSH
1507: LD_INT 22
1509: PUSH
1510: LD_VAR 0 1
1514: PUSH
1515: EMPTY
1516: LIST
1517: LIST
1518: PUSH
1519: LD_INT 21
1521: PUSH
1522: LD_INT 3
1524: PUSH
1525: EMPTY
1526: LIST
1527: LIST
1528: PUSH
1529: EMPTY
1530: LIST
1531: LIST
1532: PPUSH
1533: CALL_OW 69
1537: ST_TO_ADDR
// end ;
1538: LD_VAR 0 2
1542: RET
// export function CreateNature ; var i , animal , nat_area ; begin
1543: LD_INT 0
1545: PPUSH
1546: PPUSH
1547: PPUSH
1548: PPUSH
// uc_side = 0 ;
1549: LD_ADDR_OWVAR 20
1553: PUSH
1554: LD_INT 0
1556: ST_TO_ADDR
// uc_nation = 0 ;
1557: LD_ADDR_OWVAR 21
1561: PUSH
1562: LD_INT 0
1564: ST_TO_ADDR
// nat_area := wildArea ;
1565: LD_ADDR_VAR 0 4
1569: PUSH
1570: LD_INT 3
1572: ST_TO_ADDR
// InitHc ;
1573: CALL_OW 19
// for i = 1 to 4 do
1577: LD_ADDR_VAR 0 2
1581: PUSH
1582: DOUBLE
1583: LD_INT 1
1585: DEC
1586: ST_TO_ADDR
1587: LD_INT 4
1589: PUSH
1590: FOR_TO
1591: IFFALSE 1646
// begin hc_class = 18 ;
1593: LD_ADDR_OWVAR 28
1597: PUSH
1598: LD_INT 18
1600: ST_TO_ADDR
// hc_gallery =  ;
1601: LD_ADDR_OWVAR 33
1605: PUSH
1606: LD_STRING 
1608: ST_TO_ADDR
// hc_face_number = 1 ;
1609: LD_ADDR_OWVAR 34
1613: PUSH
1614: LD_INT 1
1616: ST_TO_ADDR
// animal := CreateHuman ;
1617: LD_ADDR_VAR 0 3
1621: PUSH
1622: CALL_OW 44
1626: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1627: LD_VAR 0 3
1631: PPUSH
1632: LD_VAR 0 4
1636: PPUSH
1637: LD_INT 0
1639: PPUSH
1640: CALL_OW 49
// end ;
1644: GO 1590
1646: POP
1647: POP
// for i = 1 to 6 do
1648: LD_ADDR_VAR 0 2
1652: PUSH
1653: DOUBLE
1654: LD_INT 1
1656: DEC
1657: ST_TO_ADDR
1658: LD_INT 6
1660: PUSH
1661: FOR_TO
1662: IFFALSE 1733
// begin hc_class = class_tiger ;
1664: LD_ADDR_OWVAR 28
1668: PUSH
1669: LD_INT 14
1671: ST_TO_ADDR
// hc_gallery =  ;
1672: LD_ADDR_OWVAR 33
1676: PUSH
1677: LD_STRING 
1679: ST_TO_ADDR
// hc_agressivity = Rand ( 0 , 10 ) ;
1680: LD_ADDR_OWVAR 35
1684: PUSH
1685: LD_INT 0
1687: PPUSH
1688: LD_INT 10
1690: PPUSH
1691: CALL_OW 12
1695: ST_TO_ADDR
// hc_face_number = 3 ;
1696: LD_ADDR_OWVAR 34
1700: PUSH
1701: LD_INT 3
1703: ST_TO_ADDR
// animal := CreateHuman ;
1704: LD_ADDR_VAR 0 3
1708: PUSH
1709: CALL_OW 44
1713: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1714: LD_VAR 0 3
1718: PPUSH
1719: LD_VAR 0 4
1723: PPUSH
1724: LD_INT 0
1726: PPUSH
1727: CALL_OW 49
// end ;
1731: GO 1661
1733: POP
1734: POP
// for i = 1 to 2 do
1735: LD_ADDR_VAR 0 2
1739: PUSH
1740: DOUBLE
1741: LD_INT 1
1743: DEC
1744: ST_TO_ADDR
1745: LD_INT 2
1747: PUSH
1748: FOR_TO
1749: IFFALSE 1812
// begin hc_class = 21 ;
1751: LD_ADDR_OWVAR 28
1755: PUSH
1756: LD_INT 21
1758: ST_TO_ADDR
// hc_gallery =  ;
1759: LD_ADDR_OWVAR 33
1763: PUSH
1764: LD_STRING 
1766: ST_TO_ADDR
// hc_agressivity = 0 ;
1767: LD_ADDR_OWVAR 35
1771: PUSH
1772: LD_INT 0
1774: ST_TO_ADDR
// hc_face_number = 5 ;
1775: LD_ADDR_OWVAR 34
1779: PUSH
1780: LD_INT 5
1782: ST_TO_ADDR
// animal := CreateHuman ;
1783: LD_ADDR_VAR 0 3
1787: PUSH
1788: CALL_OW 44
1792: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1793: LD_VAR 0 3
1797: PPUSH
1798: LD_VAR 0 4
1802: PPUSH
1803: LD_INT 0
1805: PPUSH
1806: CALL_OW 49
// end ;
1810: GO 1748
1812: POP
1813: POP
// for i = 1 to 6 do
1814: LD_ADDR_VAR 0 2
1818: PUSH
1819: DOUBLE
1820: LD_INT 1
1822: DEC
1823: ST_TO_ADDR
1824: LD_INT 6
1826: PUSH
1827: FOR_TO
1828: IFFALSE 1883
// begin hc_class = 13 ;
1830: LD_ADDR_OWVAR 28
1834: PUSH
1835: LD_INT 13
1837: ST_TO_ADDR
// hc_gallery =  ;
1838: LD_ADDR_OWVAR 33
1842: PUSH
1843: LD_STRING 
1845: ST_TO_ADDR
// hc_face_number = 4 ;
1846: LD_ADDR_OWVAR 34
1850: PUSH
1851: LD_INT 4
1853: ST_TO_ADDR
// animal := CreateHuman ;
1854: LD_ADDR_VAR 0 3
1858: PUSH
1859: CALL_OW 44
1863: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1864: LD_VAR 0 3
1868: PPUSH
1869: LD_VAR 0 4
1873: PPUSH
1874: LD_INT 0
1876: PPUSH
1877: CALL_OW 49
// end ;
1881: GO 1827
1883: POP
1884: POP
// for i = 1 to 2 do
1885: LD_ADDR_VAR 0 2
1889: PUSH
1890: DOUBLE
1891: LD_INT 1
1893: DEC
1894: ST_TO_ADDR
1895: LD_INT 2
1897: PUSH
1898: FOR_TO
1899: IFFALSE 1958
// begin hc_class = 20 ;
1901: LD_ADDR_OWVAR 28
1905: PUSH
1906: LD_INT 20
1908: ST_TO_ADDR
// hc_gallery =  ;
1909: LD_ADDR_OWVAR 33
1913: PUSH
1914: LD_STRING 
1916: ST_TO_ADDR
// hc_face_number = 2 ;
1917: LD_ADDR_OWVAR 34
1921: PUSH
1922: LD_INT 2
1924: ST_TO_ADDR
// animal := CreateHuman ;
1925: LD_ADDR_VAR 0 3
1929: PUSH
1930: CALL_OW 44
1934: ST_TO_ADDR
// PlaceUnitXYR ( animal , 101 , 37 , 3 , false ) ;
1935: LD_VAR 0 3
1939: PPUSH
1940: LD_INT 101
1942: PPUSH
1943: LD_INT 37
1945: PPUSH
1946: LD_INT 3
1948: PPUSH
1949: LD_INT 0
1951: PPUSH
1952: CALL_OW 50
// end ;
1956: GO 1898
1958: POP
1959: POP
// for i = 1 to 1 do
1960: LD_ADDR_VAR 0 2
1964: PUSH
1965: DOUBLE
1966: LD_INT 1
1968: DEC
1969: ST_TO_ADDR
1970: LD_INT 1
1972: PUSH
1973: FOR_TO
1974: IFFALSE 2021
// begin vc_chassis := 31 ;
1976: LD_ADDR_OWVAR 37
1980: PUSH
1981: LD_INT 31
1983: ST_TO_ADDR
// vc_control := control_rider ;
1984: LD_ADDR_OWVAR 38
1988: PUSH
1989: LD_INT 4
1991: ST_TO_ADDR
// animal := CreateVehicle ;
1992: LD_ADDR_VAR 0 3
1996: PUSH
1997: CALL_OW 45
2001: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
2002: LD_VAR 0 3
2006: PPUSH
2007: LD_VAR 0 4
2011: PPUSH
2012: LD_INT 0
2014: PPUSH
2015: CALL_OW 49
// end ;
2019: GO 1973
2021: POP
2022: POP
// end ;
2023: LD_VAR 0 1
2027: RET
// export function NearbyTowerHasEnergy ( unit ) ; var i , tmp , energy ; begin
2028: LD_INT 0
2030: PPUSH
2031: PPUSH
2032: PPUSH
2033: PPUSH
// result := [ ] ;
2034: LD_ADDR_VAR 0 2
2038: PUSH
2039: EMPTY
2040: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_dist , unit , 15 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
2041: LD_ADDR_VAR 0 4
2045: PUSH
2046: LD_INT 81
2048: PUSH
2049: LD_VAR 0 1
2053: PPUSH
2054: CALL_OW 255
2058: PUSH
2059: EMPTY
2060: LIST
2061: LIST
2062: PUSH
2063: LD_INT 91
2065: PUSH
2066: LD_VAR 0 1
2070: PUSH
2071: LD_INT 15
2073: PUSH
2074: EMPTY
2075: LIST
2076: LIST
2077: LIST
2078: PUSH
2079: LD_INT 2
2081: PUSH
2082: LD_INT 30
2084: PUSH
2085: LD_INT 32
2087: PUSH
2088: EMPTY
2089: LIST
2090: LIST
2091: PUSH
2092: LD_INT 30
2094: PUSH
2095: LD_INT 33
2097: PUSH
2098: EMPTY
2099: LIST
2100: LIST
2101: PUSH
2102: EMPTY
2103: LIST
2104: LIST
2105: LIST
2106: PUSH
2107: EMPTY
2108: LIST
2109: LIST
2110: LIST
2111: PPUSH
2112: CALL_OW 69
2116: ST_TO_ADDR
// if not tmp then
2117: LD_VAR 0 4
2121: NOT
2122: IFFALSE 2126
// exit ;
2124: GO 2195
// for i in tmp do
2126: LD_ADDR_VAR 0 3
2130: PUSH
2131: LD_VAR 0 4
2135: PUSH
2136: FOR_IN
2137: IFFALSE 2193
// begin energy := GetEnergy ( GetBase ( i ) ) ;
2139: LD_ADDR_VAR 0 5
2143: PUSH
2144: LD_VAR 0 3
2148: PPUSH
2149: CALL_OW 274
2153: PPUSH
2154: CALL_OW 278
2158: ST_TO_ADDR
// if energy [ 4 ] > energy [ 1 ] then
2159: LD_VAR 0 5
2163: PUSH
2164: LD_INT 4
2166: ARRAY
2167: PUSH
2168: LD_VAR 0 5
2172: PUSH
2173: LD_INT 1
2175: ARRAY
2176: GREATER
2177: IFFALSE 2191
// begin result := i ;
2179: LD_ADDR_VAR 0 2
2183: PUSH
2184: LD_VAR 0 3
2188: ST_TO_ADDR
// break ;
2189: GO 2193
// end ; end ;
2191: GO 2136
2193: POP
2194: POP
// end ;
2195: LD_VAR 0 2
2199: RET
// export function GetTurretWeaponBase ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
2200: LD_INT 0
2202: PPUSH
2203: PPUSH
2204: PPUSH
2205: PPUSH
2206: PPUSH
2207: PPUSH
2208: PPUSH
2209: PPUSH
2210: PPUSH
2211: PPUSH
2212: PPUSH
2213: PPUSH
2214: PPUSH
2215: PPUSH
2216: PPUSH
2217: PPUSH
// result := false ;
2218: LD_ADDR_VAR 0 2
2222: PUSH
2223: LD_INT 0
2225: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
2226: LD_VAR 0 1
2230: NOT
2231: PUSH
2232: LD_VAR 0 1
2236: PPUSH
2237: CALL_OW 266
2241: PUSH
2242: LD_INT 32
2244: PUSH
2245: LD_INT 33
2247: PUSH
2248: EMPTY
2249: LIST
2250: LIST
2251: IN
2252: NOT
2253: OR
2254: IFFALSE 2258
// exit ;
2256: GO 3418
// nat := GetNation ( tower ) ;
2258: LD_ADDR_VAR 0 11
2262: PUSH
2263: LD_VAR 0 1
2267: PPUSH
2268: CALL_OW 248
2272: ST_TO_ADDR
// side := GetSide ( tower ) ;
2273: LD_ADDR_VAR 0 15
2277: PUSH
2278: LD_VAR 0 1
2282: PPUSH
2283: CALL_OW 255
2287: ST_TO_ADDR
// x := GetX ( tower ) ;
2288: LD_ADDR_VAR 0 9
2292: PUSH
2293: LD_VAR 0 1
2297: PPUSH
2298: CALL_OW 250
2302: ST_TO_ADDR
// y := GetY ( tower ) ;
2303: LD_ADDR_VAR 0 10
2307: PUSH
2308: LD_VAR 0 1
2312: PPUSH
2313: CALL_OW 251
2317: ST_TO_ADDR
// if not x or not y then
2318: LD_VAR 0 9
2322: NOT
2323: PUSH
2324: LD_VAR 0 10
2328: NOT
2329: OR
2330: IFFALSE 2334
// exit ;
2332: GO 3418
// weapon := 0 ;
2334: LD_ADDR_VAR 0 17
2338: PUSH
2339: LD_INT 0
2341: ST_TO_ADDR
// fac_list := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
2342: LD_ADDR_VAR 0 16
2346: PUSH
2347: LD_INT 42
2349: PUSH
2350: LD_INT 43
2352: PUSH
2353: LD_INT 44
2355: PUSH
2356: LD_INT 46
2358: PUSH
2359: EMPTY
2360: LIST
2361: LIST
2362: LIST
2363: LIST
2364: ST_TO_ADDR
// if not fac_list then
2365: LD_VAR 0 16
2369: NOT
2370: IFFALSE 2374
// exit ;
2372: GO 3418
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
2374: LD_ADDR_VAR 0 4
2378: PUSH
2379: LD_INT 4
2381: PUSH
2382: LD_INT 5
2384: PUSH
2385: LD_INT 9
2387: PUSH
2388: LD_INT 10
2390: PUSH
2391: LD_INT 6
2393: PUSH
2394: LD_INT 7
2396: PUSH
2397: LD_INT 11
2399: PUSH
2400: EMPTY
2401: LIST
2402: LIST
2403: LIST
2404: LIST
2405: LIST
2406: LIST
2407: LIST
2408: PUSH
2409: LD_INT 27
2411: PUSH
2412: LD_INT 28
2414: PUSH
2415: LD_INT 26
2417: PUSH
2418: LD_INT 30
2420: PUSH
2421: EMPTY
2422: LIST
2423: LIST
2424: LIST
2425: LIST
2426: PUSH
2427: LD_INT 43
2429: PUSH
2430: LD_INT 44
2432: PUSH
2433: LD_INT 46
2435: PUSH
2436: LD_INT 45
2438: PUSH
2439: LD_INT 47
2441: PUSH
2442: LD_INT 49
2444: PUSH
2445: EMPTY
2446: LIST
2447: LIST
2448: LIST
2449: LIST
2450: LIST
2451: LIST
2452: PUSH
2453: EMPTY
2454: LIST
2455: LIST
2456: LIST
2457: PUSH
2458: LD_VAR 0 11
2462: ARRAY
2463: ST_TO_ADDR
// for i in list do
2464: LD_ADDR_VAR 0 7
2468: PUSH
2469: LD_VAR 0 4
2473: PUSH
2474: FOR_IN
2475: IFFALSE 2508
// if not i in fac_list then
2477: LD_VAR 0 7
2481: PUSH
2482: LD_VAR 0 16
2486: IN
2487: NOT
2488: IFFALSE 2506
// list := list diff i ;
2490: LD_ADDR_VAR 0 4
2494: PUSH
2495: LD_VAR 0 4
2499: PUSH
2500: LD_VAR 0 7
2504: DIFF
2505: ST_TO_ADDR
2506: GO 2474
2508: POP
2509: POP
// if not list then
2510: LD_VAR 0 4
2514: NOT
2515: IFFALSE 2519
// exit ;
2517: GO 3418
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
2519: LD_VAR 0 11
2523: PUSH
2524: LD_INT 3
2526: EQUAL
2527: PUSH
2528: LD_INT 49
2530: PUSH
2531: LD_VAR 0 4
2535: IN
2536: AND
2537: PUSH
2538: LD_INT 31
2540: PPUSH
2541: LD_VAR 0 15
2545: PPUSH
2546: CALL_OW 321
2550: PUSH
2551: LD_INT 2
2553: EQUAL
2554: AND
2555: IFFALSE 2615
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
2557: LD_INT 22
2559: PUSH
2560: LD_VAR 0 15
2564: PUSH
2565: EMPTY
2566: LIST
2567: LIST
2568: PUSH
2569: LD_INT 35
2571: PUSH
2572: LD_INT 49
2574: PUSH
2575: EMPTY
2576: LIST
2577: LIST
2578: PUSH
2579: LD_INT 91
2581: PUSH
2582: LD_VAR 0 1
2586: PUSH
2587: LD_INT 10
2589: PUSH
2590: EMPTY
2591: LIST
2592: LIST
2593: LIST
2594: PUSH
2595: EMPTY
2596: LIST
2597: LIST
2598: LIST
2599: PPUSH
2600: CALL_OW 69
2604: NOT
2605: IFFALSE 2615
// weapon := ru_time_lapser ;
2607: LD_ADDR_VAR 0 17
2611: PUSH
2612: LD_INT 49
2614: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
2615: LD_VAR 0 11
2619: PUSH
2620: LD_INT 1
2622: PUSH
2623: LD_INT 2
2625: PUSH
2626: EMPTY
2627: LIST
2628: LIST
2629: IN
2630: PUSH
2631: LD_INT 11
2633: PUSH
2634: LD_VAR 0 4
2638: IN
2639: PUSH
2640: LD_INT 30
2642: PUSH
2643: LD_VAR 0 4
2647: IN
2648: OR
2649: AND
2650: PUSH
2651: LD_INT 6
2653: PPUSH
2654: LD_VAR 0 15
2658: PPUSH
2659: CALL_OW 321
2663: PUSH
2664: LD_INT 2
2666: EQUAL
2667: AND
2668: IFFALSE 2833
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
2670: LD_INT 22
2672: PUSH
2673: LD_VAR 0 15
2677: PUSH
2678: EMPTY
2679: LIST
2680: LIST
2681: PUSH
2682: LD_INT 2
2684: PUSH
2685: LD_INT 35
2687: PUSH
2688: LD_INT 11
2690: PUSH
2691: EMPTY
2692: LIST
2693: LIST
2694: PUSH
2695: LD_INT 35
2697: PUSH
2698: LD_INT 30
2700: PUSH
2701: EMPTY
2702: LIST
2703: LIST
2704: PUSH
2705: EMPTY
2706: LIST
2707: LIST
2708: LIST
2709: PUSH
2710: LD_INT 91
2712: PUSH
2713: LD_VAR 0 1
2717: PUSH
2718: LD_INT 18
2720: PUSH
2721: EMPTY
2722: LIST
2723: LIST
2724: LIST
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: LIST
2730: PPUSH
2731: CALL_OW 69
2735: NOT
2736: PUSH
2737: LD_INT 22
2739: PUSH
2740: LD_VAR 0 15
2744: PUSH
2745: EMPTY
2746: LIST
2747: LIST
2748: PUSH
2749: LD_INT 2
2751: PUSH
2752: LD_INT 30
2754: PUSH
2755: LD_INT 32
2757: PUSH
2758: EMPTY
2759: LIST
2760: LIST
2761: PUSH
2762: LD_INT 30
2764: PUSH
2765: LD_INT 33
2767: PUSH
2768: EMPTY
2769: LIST
2770: LIST
2771: PUSH
2772: EMPTY
2773: LIST
2774: LIST
2775: LIST
2776: PUSH
2777: LD_INT 91
2779: PUSH
2780: LD_VAR 0 1
2784: PUSH
2785: LD_INT 12
2787: PUSH
2788: EMPTY
2789: LIST
2790: LIST
2791: LIST
2792: PUSH
2793: EMPTY
2794: LIST
2795: LIST
2796: LIST
2797: PUSH
2798: EMPTY
2799: LIST
2800: PPUSH
2801: CALL_OW 69
2805: PUSH
2806: LD_INT 2
2808: GREATER
2809: AND
2810: IFFALSE 2833
// weapon := [ us_radar , ar_radar ] [ nat ] ;
2812: LD_ADDR_VAR 0 17
2816: PUSH
2817: LD_INT 11
2819: PUSH
2820: LD_INT 30
2822: PUSH
2823: EMPTY
2824: LIST
2825: LIST
2826: PUSH
2827: LD_VAR 0 11
2831: ARRAY
2832: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
2833: LD_VAR 0 17
2837: NOT
2838: PUSH
2839: LD_INT 40
2841: PPUSH
2842: LD_VAR 0 15
2846: PPUSH
2847: CALL_OW 321
2851: PUSH
2852: LD_INT 2
2854: EQUAL
2855: AND
2856: PUSH
2857: LD_INT 7
2859: PUSH
2860: LD_VAR 0 4
2864: IN
2865: PUSH
2866: LD_INT 28
2868: PUSH
2869: LD_VAR 0 4
2873: IN
2874: OR
2875: PUSH
2876: LD_INT 45
2878: PUSH
2879: LD_VAR 0 4
2883: IN
2884: OR
2885: AND
2886: IFFALSE 3140
// begin hex := GetHexInfo ( x , y ) ;
2888: LD_ADDR_VAR 0 3
2892: PUSH
2893: LD_VAR 0 9
2897: PPUSH
2898: LD_VAR 0 10
2902: PPUSH
2903: CALL_OW 546
2907: ST_TO_ADDR
// if hex [ 1 ] then
2908: LD_VAR 0 3
2912: PUSH
2913: LD_INT 1
2915: ARRAY
2916: IFFALSE 2920
// exit ;
2918: GO 3418
// height := hex [ 2 ] ;
2920: LD_ADDR_VAR 0 14
2924: PUSH
2925: LD_VAR 0 3
2929: PUSH
2930: LD_INT 2
2932: ARRAY
2933: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
2934: LD_ADDR_VAR 0 13
2938: PUSH
2939: LD_INT 0
2941: PUSH
2942: LD_INT 2
2944: PUSH
2945: LD_INT 3
2947: PUSH
2948: LD_INT 5
2950: PUSH
2951: EMPTY
2952: LIST
2953: LIST
2954: LIST
2955: LIST
2956: ST_TO_ADDR
// for i in tmp do
2957: LD_ADDR_VAR 0 7
2961: PUSH
2962: LD_VAR 0 13
2966: PUSH
2967: FOR_IN
2968: IFFALSE 3138
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
2970: LD_ADDR_VAR 0 8
2974: PUSH
2975: LD_VAR 0 9
2979: PPUSH
2980: LD_VAR 0 7
2984: PPUSH
2985: LD_INT 5
2987: PPUSH
2988: CALL_OW 272
2992: PUSH
2993: LD_VAR 0 10
2997: PPUSH
2998: LD_VAR 0 7
3002: PPUSH
3003: LD_INT 5
3005: PPUSH
3006: CALL_OW 273
3010: PUSH
3011: EMPTY
3012: LIST
3013: LIST
3014: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
3015: LD_VAR 0 8
3019: PUSH
3020: LD_INT 1
3022: ARRAY
3023: PPUSH
3024: LD_VAR 0 8
3028: PUSH
3029: LD_INT 2
3031: ARRAY
3032: PPUSH
3033: CALL_OW 488
3037: IFFALSE 3136
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
3039: LD_ADDR_VAR 0 3
3043: PUSH
3044: LD_VAR 0 8
3048: PUSH
3049: LD_INT 1
3051: ARRAY
3052: PPUSH
3053: LD_VAR 0 8
3057: PUSH
3058: LD_INT 2
3060: ARRAY
3061: PPUSH
3062: CALL_OW 546
3066: ST_TO_ADDR
// if hex [ 1 ] then
3067: LD_VAR 0 3
3071: PUSH
3072: LD_INT 1
3074: ARRAY
3075: IFFALSE 3079
// continue ;
3077: GO 2967
// h := hex [ 2 ] ;
3079: LD_ADDR_VAR 0 12
3083: PUSH
3084: LD_VAR 0 3
3088: PUSH
3089: LD_INT 2
3091: ARRAY
3092: ST_TO_ADDR
// if h + 7 < height then
3093: LD_VAR 0 12
3097: PUSH
3098: LD_INT 7
3100: PLUS
3101: PUSH
3102: LD_VAR 0 14
3106: LESS
3107: IFFALSE 3136
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
3109: LD_ADDR_VAR 0 17
3113: PUSH
3114: LD_INT 7
3116: PUSH
3117: LD_INT 28
3119: PUSH
3120: LD_INT 45
3122: PUSH
3123: EMPTY
3124: LIST
3125: LIST
3126: LIST
3127: PUSH
3128: LD_VAR 0 11
3132: ARRAY
3133: ST_TO_ADDR
// break ;
3134: GO 3138
// end ; end ; end ;
3136: GO 2967
3138: POP
3139: POP
// end ; if not weapon then
3140: LD_VAR 0 17
3144: NOT
3145: IFFALSE 3300
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
3147: LD_ADDR_VAR 0 4
3151: PUSH
3152: LD_VAR 0 4
3156: PUSH
3157: LD_INT 11
3159: PUSH
3160: LD_INT 30
3162: PUSH
3163: LD_INT 49
3165: PUSH
3166: EMPTY
3167: LIST
3168: LIST
3169: LIST
3170: DIFF
3171: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , tower , 6 ] , [ f_not , [ f_bweapon , 0 ] ] ] ) ;
3172: LD_ADDR_VAR 0 13
3176: PUSH
3177: LD_INT 22
3179: PUSH
3180: LD_VAR 0 15
3184: PUSH
3185: EMPTY
3186: LIST
3187: LIST
3188: PUSH
3189: LD_INT 91
3191: PUSH
3192: LD_VAR 0 1
3196: PUSH
3197: LD_INT 6
3199: PUSH
3200: EMPTY
3201: LIST
3202: LIST
3203: LIST
3204: PUSH
3205: LD_INT 3
3207: PUSH
3208: LD_INT 35
3210: PUSH
3211: LD_INT 0
3213: PUSH
3214: EMPTY
3215: LIST
3216: LIST
3217: PUSH
3218: EMPTY
3219: LIST
3220: LIST
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: LIST
3226: PPUSH
3227: CALL_OW 69
3231: ST_TO_ADDR
// for i in tmp do
3232: LD_ADDR_VAR 0 7
3236: PUSH
3237: LD_VAR 0 13
3241: PUSH
3242: FOR_IN
3243: IFFALSE 3268
// list := list diff GetBWeapon ( i ) ;
3245: LD_ADDR_VAR 0 4
3249: PUSH
3250: LD_VAR 0 4
3254: PUSH
3255: LD_VAR 0 7
3259: PPUSH
3260: CALL_OW 269
3264: DIFF
3265: ST_TO_ADDR
3266: GO 3242
3268: POP
3269: POP
// if list then
3270: LD_VAR 0 4
3274: IFFALSE 3300
// weapon := list [ rand ( 1 , list ) ] ;
3276: LD_ADDR_VAR 0 17
3280: PUSH
3281: LD_VAR 0 4
3285: PUSH
3286: LD_INT 1
3288: PPUSH
3289: LD_VAR 0 4
3293: PPUSH
3294: CALL_OW 12
3298: ARRAY
3299: ST_TO_ADDR
// end ; if weapon then
3300: LD_VAR 0 17
3304: IFFALSE 3418
// begin tmp := CostOfWeapon ( weapon ) ;
3306: LD_ADDR_VAR 0 13
3310: PUSH
3311: LD_VAR 0 17
3315: PPUSH
3316: CALL_OW 451
3320: ST_TO_ADDR
// j := GetBase ( tower ) ;
3321: LD_ADDR_VAR 0 8
3325: PUSH
3326: LD_VAR 0 1
3330: PPUSH
3331: CALL_OW 274
3335: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
3336: LD_VAR 0 8
3340: PPUSH
3341: LD_INT 1
3343: PPUSH
3344: CALL_OW 275
3348: PUSH
3349: LD_VAR 0 13
3353: PUSH
3354: LD_INT 1
3356: ARRAY
3357: GREATEREQUAL
3358: PUSH
3359: LD_VAR 0 8
3363: PPUSH
3364: LD_INT 2
3366: PPUSH
3367: CALL_OW 275
3371: PUSH
3372: LD_VAR 0 13
3376: PUSH
3377: LD_INT 2
3379: ARRAY
3380: GREATEREQUAL
3381: AND
3382: PUSH
3383: LD_VAR 0 8
3387: PPUSH
3388: LD_INT 3
3390: PPUSH
3391: CALL_OW 275
3395: PUSH
3396: LD_VAR 0 13
3400: PUSH
3401: LD_INT 3
3403: ARRAY
3404: GREATEREQUAL
3405: AND
3406: IFFALSE 3418
// result := weapon ;
3408: LD_ADDR_VAR 0 2
3412: PUSH
3413: LD_VAR 0 17
3417: ST_TO_ADDR
// end ; end ; end_of_file
3418: LD_VAR 0 2
3422: RET
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Khatam , Kikuchi , Harisson ; export function PrepareAmericans ; var i , team , others , veh , m ; begin
3423: LD_INT 0
3425: PPUSH
3426: PPUSH
3427: PPUSH
3428: PPUSH
3429: PPUSH
3430: PPUSH
// uc_side := 1 ;
3431: LD_ADDR_OWVAR 20
3435: PUSH
3436: LD_INT 1
3438: ST_TO_ADDR
// uc_nation := 1 ;
3439: LD_ADDR_OWVAR 21
3443: PUSH
3444: LD_INT 1
3446: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prev_prefix ) ;
3447: LD_ADDR_EXP 9
3451: PUSH
3452: LD_STRING JMM
3454: PPUSH
3455: LD_EXP 1
3459: NOT
3460: PPUSH
3461: LD_EXP 2
3465: PPUSH
3466: CALL 31114 0 3
3470: ST_TO_ADDR
// team := [ JMM ] ;
3471: LD_ADDR_VAR 0 3
3475: PUSH
3476: LD_EXP 9
3480: PUSH
3481: EMPTY
3482: LIST
3483: ST_TO_ADDR
// if LoadVariable ( BrownIn07 , debug ) then
3484: LD_STRING BrownIn07
3486: PPUSH
3487: LD_EXP 1
3491: PPUSH
3492: CALL_OW 30
3496: IFFALSE 3522
// Brown := PrepareUnit ( Brown , ( not debug ) , mission_prev_prefix ) ;
3498: LD_ADDR_EXP 10
3502: PUSH
3503: LD_STRING Brown
3505: PPUSH
3506: LD_EXP 1
3510: NOT
3511: PPUSH
3512: LD_EXP 2
3516: PPUSH
3517: CALL 31114 0 3
3521: ST_TO_ADDR
// if Brown then
3522: LD_EXP 10
3526: IFFALSE 3544
// team := team ^ Brown ;
3528: LD_ADDR_VAR 0 3
3532: PUSH
3533: LD_VAR 0 3
3537: PUSH
3538: LD_EXP 10
3542: ADD
3543: ST_TO_ADDR
// if LoadVariable ( DonaldsonIn07 , debug ) then
3544: LD_STRING DonaldsonIn07
3546: PPUSH
3547: LD_EXP 1
3551: PPUSH
3552: CALL_OW 30
3556: IFFALSE 3582
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prev_prefix ) ;
3558: LD_ADDR_EXP 11
3562: PUSH
3563: LD_STRING Donaldson
3565: PPUSH
3566: LD_EXP 1
3570: NOT
3571: PPUSH
3572: LD_EXP 2
3576: PPUSH
3577: CALL 31114 0 3
3581: ST_TO_ADDR
// if Donaldson then
3582: LD_EXP 11
3586: IFFALSE 3604
// team := team ^ Donaldson ;
3588: LD_ADDR_VAR 0 3
3592: PUSH
3593: LD_VAR 0 3
3597: PUSH
3598: LD_EXP 11
3602: ADD
3603: ST_TO_ADDR
// if LoadVariable ( BobbyIn07 , debug ) then
3604: LD_STRING BobbyIn07
3606: PPUSH
3607: LD_EXP 1
3611: PPUSH
3612: CALL_OW 30
3616: IFFALSE 3642
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prev_prefix ) ;
3618: LD_ADDR_EXP 12
3622: PUSH
3623: LD_STRING Bobby
3625: PPUSH
3626: LD_EXP 1
3630: NOT
3631: PPUSH
3632: LD_EXP 2
3636: PPUSH
3637: CALL 31114 0 3
3641: ST_TO_ADDR
// if Bobby then
3642: LD_EXP 12
3646: IFFALSE 3664
// team := team ^ Bobby ;
3648: LD_ADDR_VAR 0 3
3652: PUSH
3653: LD_VAR 0 3
3657: PUSH
3658: LD_EXP 12
3662: ADD
3663: ST_TO_ADDR
// if LoadVariable ( CyrusIn07 , debug ) then
3664: LD_STRING CyrusIn07
3666: PPUSH
3667: LD_EXP 1
3671: PPUSH
3672: CALL_OW 30
3676: IFFALSE 3702
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prev_prefix ) ;
3678: LD_ADDR_EXP 13
3682: PUSH
3683: LD_STRING Cyrus
3685: PPUSH
3686: LD_EXP 1
3690: NOT
3691: PPUSH
3692: LD_EXP 2
3696: PPUSH
3697: CALL 31114 0 3
3701: ST_TO_ADDR
// if Cyrus then
3702: LD_EXP 13
3706: IFFALSE 3724
// team := team ^ Cyrus ;
3708: LD_ADDR_VAR 0 3
3712: PUSH
3713: LD_VAR 0 3
3717: PUSH
3718: LD_EXP 13
3722: ADD
3723: ST_TO_ADDR
// if LoadVariable ( LisaIn07 , debug ) then
3724: LD_STRING LisaIn07
3726: PPUSH
3727: LD_EXP 1
3731: PPUSH
3732: CALL_OW 30
3736: IFFALSE 3762
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prev_prefix ) ;
3738: LD_ADDR_EXP 14
3742: PUSH
3743: LD_STRING Lisa
3745: PPUSH
3746: LD_EXP 1
3750: NOT
3751: PPUSH
3752: LD_EXP 2
3756: PPUSH
3757: CALL 31114 0 3
3761: ST_TO_ADDR
// if Lisa then
3762: LD_EXP 14
3766: IFFALSE 3784
// team := team ^ Lisa ;
3768: LD_ADDR_VAR 0 3
3772: PUSH
3773: LD_VAR 0 3
3777: PUSH
3778: LD_EXP 14
3782: ADD
3783: ST_TO_ADDR
// if LoadVariable ( GladstoneIn07 , debug ) then
3784: LD_STRING GladstoneIn07
3786: PPUSH
3787: LD_EXP 1
3791: PPUSH
3792: CALL_OW 30
3796: IFFALSE 3822
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , mission_prev_prefix ) ;
3798: LD_ADDR_EXP 16
3802: PUSH
3803: LD_STRING Gladstone
3805: PPUSH
3806: LD_EXP 1
3810: NOT
3811: PPUSH
3812: LD_EXP 2
3816: PPUSH
3817: CALL 31114 0 3
3821: ST_TO_ADDR
// if Gladstone then
3822: LD_EXP 16
3826: IFFALSE 3844
// team := team ^ Gladstone ;
3828: LD_ADDR_VAR 0 3
3832: PUSH
3833: LD_VAR 0 3
3837: PUSH
3838: LD_EXP 16
3842: ADD
3843: ST_TO_ADDR
// if LoadVariable ( KhatamIn07 , debug ) then
3844: LD_STRING KhatamIn07
3846: PPUSH
3847: LD_EXP 1
3851: PPUSH
3852: CALL_OW 30
3856: IFFALSE 3882
// Khatam := PrepareUnit ( Khatam , ( not debug ) , mission_prev_prefix ) ;
3858: LD_ADDR_EXP 17
3862: PUSH
3863: LD_STRING Khatam
3865: PPUSH
3866: LD_EXP 1
3870: NOT
3871: PPUSH
3872: LD_EXP 2
3876: PPUSH
3877: CALL 31114 0 3
3881: ST_TO_ADDR
// if Khatam then
3882: LD_EXP 17
3886: IFFALSE 3904
// team := team ^ Khatam ;
3888: LD_ADDR_VAR 0 3
3892: PUSH
3893: LD_VAR 0 3
3897: PUSH
3898: LD_EXP 17
3902: ADD
3903: ST_TO_ADDR
// others := CreateCharacterSet ( 07_others ) ;
3904: LD_ADDR_VAR 0 4
3908: PUSH
3909: LD_STRING 07_others
3911: PPUSH
3912: CALL_OW 31
3916: ST_TO_ADDR
// if others then
3917: LD_VAR 0 4
3921: IFFALSE 3939
// team := team ^ others ;
3923: LD_ADDR_VAR 0 3
3927: PUSH
3928: LD_VAR 0 3
3932: PUSH
3933: LD_VAR 0 4
3937: ADD
3938: ST_TO_ADDR
// if debug then
3939: LD_EXP 1
3943: IFFALSE 4017
// begin InitHc ;
3945: CALL_OW 19
// for i = 1 to 4 do
3949: LD_ADDR_VAR 0 2
3953: PUSH
3954: DOUBLE
3955: LD_INT 1
3957: DEC
3958: ST_TO_ADDR
3959: LD_INT 4
3961: PUSH
3962: FOR_TO
3963: IFFALSE 4015
// begin PrepareHuman ( false , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , 4 ) ;
3965: LD_INT 0
3967: PPUSH
3968: LD_INT 1
3970: PUSH
3971: LD_INT 3
3973: PUSH
3974: EMPTY
3975: LIST
3976: LIST
3977: PUSH
3978: LD_INT 1
3980: PPUSH
3981: LD_INT 2
3983: PPUSH
3984: CALL_OW 12
3988: ARRAY
3989: PPUSH
3990: LD_INT 4
3992: PPUSH
3993: CALL_OW 380
// team := team ^ CreateHuman ;
3997: LD_ADDR_VAR 0 3
4001: PUSH
4002: LD_VAR 0 3
4006: PUSH
4007: CALL_OW 44
4011: ADD
4012: ST_TO_ADDR
// end ;
4013: GO 3962
4015: POP
4016: POP
// end ; m := 0 ;
4017: LD_ADDR_VAR 0 6
4021: PUSH
4022: LD_INT 0
4024: ST_TO_ADDR
// for i in team do
4025: LD_ADDR_VAR 0 2
4029: PUSH
4030: LD_VAR 0 3
4034: PUSH
4035: FOR_IN
4036: IFFALSE 4243
// if GetClass ( i ) = 3 then
4038: LD_VAR 0 2
4042: PPUSH
4043: CALL_OW 257
4047: PUSH
4048: LD_INT 3
4050: EQUAL
4051: IFFALSE 4199
// begin m := m + 1 ;
4053: LD_ADDR_VAR 0 6
4057: PUSH
4058: LD_VAR 0 6
4062: PUSH
4063: LD_INT 1
4065: PLUS
4066: ST_TO_ADDR
// veh := PrepareTank ( 1 , 1 , [ us_medium_wheeled , us_medium_tracked , us_medium_wheeled , us_light_wheeled ] [ m mod 4 + 1 ] , engine_solar , control_manual , [ us_gatling_gun , us_double_gun , us_light_gun , us_radar ] [ m mod 4 + 1 ] , 60 ) ;
4067: LD_ADDR_VAR 0 5
4071: PUSH
4072: LD_INT 1
4074: PPUSH
4075: LD_INT 1
4077: PPUSH
4078: LD_INT 2
4080: PUSH
4081: LD_INT 3
4083: PUSH
4084: LD_INT 2
4086: PUSH
4087: LD_INT 1
4089: PUSH
4090: EMPTY
4091: LIST
4092: LIST
4093: LIST
4094: LIST
4095: PUSH
4096: LD_VAR 0 6
4100: PUSH
4101: LD_INT 4
4103: MOD
4104: PUSH
4105: LD_INT 1
4107: PLUS
4108: ARRAY
4109: PPUSH
4110: LD_INT 2
4112: PPUSH
4113: LD_INT 1
4115: PPUSH
4116: LD_INT 4
4118: PUSH
4119: LD_INT 5
4121: PUSH
4122: LD_INT 3
4124: PUSH
4125: LD_INT 11
4127: PUSH
4128: EMPTY
4129: LIST
4130: LIST
4131: LIST
4132: LIST
4133: PUSH
4134: LD_VAR 0 6
4138: PUSH
4139: LD_INT 4
4141: MOD
4142: PUSH
4143: LD_INT 1
4145: PLUS
4146: ARRAY
4147: PPUSH
4148: LD_INT 60
4150: PPUSH
4151: CALL 512 0 7
4155: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
4156: LD_VAR 0 5
4160: PPUSH
4161: LD_INT 2
4163: PPUSH
4164: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
4168: LD_VAR 0 5
4172: PPUSH
4173: LD_INT 1
4175: PPUSH
4176: LD_INT 0
4178: PPUSH
4179: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
4183: LD_VAR 0 2
4187: PPUSH
4188: LD_VAR 0 5
4192: PPUSH
4193: CALL_OW 52
// end else
4197: GO 4241
// begin if GetClass ( i ) = 2 then
4199: LD_VAR 0 2
4203: PPUSH
4204: CALL_OW 257
4208: PUSH
4209: LD_INT 2
4211: EQUAL
4212: IFFALSE 4226
// SetClass ( i , 1 ) ;
4214: LD_VAR 0 2
4218: PPUSH
4219: LD_INT 1
4221: PPUSH
4222: CALL_OW 336
// PlaceUnitArea ( i , startArea , false ) ;
4226: LD_VAR 0 2
4230: PPUSH
4231: LD_INT 1
4233: PPUSH
4234: LD_INT 0
4236: PPUSH
4237: CALL_OW 49
// end ;
4241: GO 4035
4243: POP
4244: POP
// uc_side := 4 ;
4245: LD_ADDR_OWVAR 20
4249: PUSH
4250: LD_INT 4
4252: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
4253: LD_ADDR_EXP 19
4257: PUSH
4258: LD_STRING Harisson
4260: PPUSH
4261: LD_INT 0
4263: PPUSH
4264: LD_STRING 
4266: PPUSH
4267: CALL 31114 0 3
4271: ST_TO_ADDR
// PrepareScout ;
4272: CALL 4281 0 0
// end ;
4276: LD_VAR 0 1
4280: RET
// function PrepareScout ; var ape ; begin
4281: LD_INT 0
4283: PPUSH
4284: PPUSH
// uc_side := 4 ;
4285: LD_ADDR_OWVAR 20
4289: PUSH
4290: LD_INT 4
4292: ST_TO_ADDR
// uc_nation := 1 ;
4293: LD_ADDR_OWVAR 21
4297: PUSH
4298: LD_INT 1
4300: ST_TO_ADDR
// if LoadVariable ( FrankIn06 , 0 ) then
4301: LD_STRING FrankIn06
4303: PPUSH
4304: LD_INT 0
4306: PPUSH
4307: CALL_OW 30
4311: IFFALSE 4328
// Frank := CreateCharacter ( 06c_Frank ) else
4313: LD_ADDR_EXP 15
4317: PUSH
4318: LD_STRING 06c_Frank
4320: PPUSH
4321: CALL_OW 34
4325: ST_TO_ADDR
4326: GO 4368
// if LoadVariable ( FrankInDelta , 0 ) then
4328: LD_STRING FrankInDelta
4330: PPUSH
4331: LD_INT 0
4333: PPUSH
4334: CALL_OW 30
4338: IFFALSE 4355
// Frank := CreateCharacter ( 05_Frank ) else
4340: LD_ADDR_EXP 15
4344: PUSH
4345: LD_STRING 05_Frank
4347: PPUSH
4348: CALL_OW 34
4352: ST_TO_ADDR
4353: GO 4368
// Frank := CreateCharacter ( 04_Frank ) ;
4355: LD_ADDR_EXP 15
4359: PUSH
4360: LD_STRING 04_Frank
4362: PPUSH
4363: CALL_OW 34
4367: ST_TO_ADDR
// if Frank then
4368: LD_EXP 15
4372: IFFALSE 4505
// begin PlaceUnitArea ( Frank , scoutArea , false ) ;
4374: LD_EXP 15
4378: PPUSH
4379: LD_INT 2
4381: PPUSH
4382: LD_INT 0
4384: PPUSH
4385: CALL_OW 49
// SetClass ( Frank , 1 ) ;
4389: LD_EXP 15
4393: PPUSH
4394: LD_INT 1
4396: PPUSH
4397: CALL_OW 336
// uc_side := 0 ;
4401: LD_ADDR_OWVAR 20
4405: PUSH
4406: LD_INT 0
4408: ST_TO_ADDR
// uc_nation := 0 ;
4409: LD_ADDR_OWVAR 21
4413: PUSH
4414: LD_INT 0
4416: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 0 ) ;
4417: LD_INT 0
4419: PPUSH
4420: LD_INT 12
4422: PPUSH
4423: LD_INT 0
4425: PPUSH
4426: CALL_OW 380
// ape := CreateHuman ;
4430: LD_ADDR_VAR 0 2
4434: PUSH
4435: CALL_OW 44
4439: ST_TO_ADDR
// PlaceUnitXYR ( ape , GetX ( Frank ) , GetY ( Frank ) , 5 , false ) ;
4440: LD_VAR 0 2
4444: PPUSH
4445: LD_EXP 15
4449: PPUSH
4450: CALL_OW 250
4454: PPUSH
4455: LD_EXP 15
4459: PPUSH
4460: CALL_OW 251
4464: PPUSH
4465: LD_INT 5
4467: PPUSH
4468: LD_INT 0
4470: PPUSH
4471: CALL_OW 50
// ComTurnUnit ( ape , Frank ) ;
4475: LD_VAR 0 2
4479: PPUSH
4480: LD_EXP 15
4484: PPUSH
4485: CALL_OW 119
// ComTurnUnit ( Frank , ape ) ;
4489: LD_EXP 15
4493: PPUSH
4494: LD_VAR 0 2
4498: PPUSH
4499: CALL_OW 119
// exit ;
4503: GO 4548
// end ; Kikuchi := PrepareUnit ( Yamoko , false ,  ) ;
4505: LD_ADDR_EXP 18
4509: PUSH
4510: LD_STRING Yamoko
4512: PPUSH
4513: LD_INT 0
4515: PPUSH
4516: LD_STRING 
4518: PPUSH
4519: CALL 31114 0 3
4523: ST_TO_ADDR
// PlaceUnitArea ( Kikuchi , scoutArea , false ) ;
4524: LD_EXP 18
4528: PPUSH
4529: LD_INT 2
4531: PPUSH
4532: LD_INT 0
4534: PPUSH
4535: CALL_OW 49
// ComHold ( Kikuchi ) ;
4539: LD_EXP 18
4543: PPUSH
4544: CALL_OW 140
// end ; end_of_file
4548: LD_VAR 0 1
4552: RET
// export ru_rebuild_list ; export function PrepareRussians ; var i , j , r , un , skill , filter , tmp , dep_list , lab_list , fac_list , breastworks_list , bunker_list , turret_list , weapons_list , personel_counter ; begin
4553: LD_INT 0
4555: PPUSH
4556: PPUSH
4557: PPUSH
4558: PPUSH
4559: PPUSH
4560: PPUSH
4561: PPUSH
4562: PPUSH
4563: PPUSH
4564: PPUSH
4565: PPUSH
4566: PPUSH
4567: PPUSH
4568: PPUSH
4569: PPUSH
4570: PPUSH
// ru_rebuild_list := [ ] ;
4571: LD_ADDR_EXP 20
4575: PUSH
4576: EMPTY
4577: ST_TO_ADDR
// uc_side := 3 ;
4578: LD_ADDR_OWVAR 20
4582: PUSH
4583: LD_INT 3
4585: ST_TO_ADDR
// uc_nation := 3 ;
4586: LD_ADDR_OWVAR 21
4590: PUSH
4591: LD_INT 3
4593: ST_TO_ADDR
// if Difficulty > 1 then
4594: LD_OWVAR 67
4598: PUSH
4599: LD_INT 1
4601: GREATER
4602: IFFALSE 4738
// begin bc_type := b_breastwork ;
4604: LD_ADDR_OWVAR 42
4608: PUSH
4609: LD_INT 31
4611: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 78 , 74 , 2 ) ;
4612: LD_INT 78
4614: PPUSH
4615: LD_INT 74
4617: PPUSH
4618: LD_INT 2
4620: PPUSH
4621: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 171 , 193 , 4 ) ;
4625: LD_INT 171
4627: PPUSH
4628: LD_INT 193
4630: PPUSH
4631: LD_INT 4
4633: PPUSH
4634: CALL_OW 47
// bc_type := b_turret ;
4638: LD_ADDR_OWVAR 42
4642: PUSH
4643: LD_INT 33
4645: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 129 , 96 , 3 ) ;
4646: LD_INT 129
4648: PPUSH
4649: LD_INT 96
4651: PPUSH
4652: LD_INT 3
4654: PPUSH
4655: CALL_OW 47
// if Difficulty > 2 then
4659: LD_OWVAR 67
4663: PUSH
4664: LD_INT 2
4666: GREATER
4667: IFFALSE 4738
// begin RemoveUnit ( HexInfo ( 83 , 141 ) ) ;
4669: LD_INT 83
4671: PPUSH
4672: LD_INT 141
4674: PPUSH
4675: CALL_OW 428
4679: PPUSH
4680: CALL_OW 64
// RemoveUnit ( HexInfo ( 78 , 133 ) ) ;
4684: LD_INT 78
4686: PPUSH
4687: LD_INT 133
4689: PPUSH
4690: CALL_OW 428
4694: PPUSH
4695: CALL_OW 64
// CreateAndPlaceBuildingXYD ( 83 , 141 , 2 ) ;
4699: LD_INT 83
4701: PPUSH
4702: LD_INT 141
4704: PPUSH
4705: LD_INT 2
4707: PPUSH
4708: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 78 , 133 , 2 ) ;
4712: LD_INT 78
4714: PPUSH
4715: LD_INT 133
4717: PPUSH
4718: LD_INT 2
4720: PPUSH
4721: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 145 , 112 , 3 ) ;
4725: LD_INT 145
4727: PPUSH
4728: LD_INT 112
4730: PPUSH
4731: LD_INT 3
4733: PPUSH
4734: CALL_OW 47
// end ; end ; dep_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
4738: LD_ADDR_VAR 0 9
4742: PUSH
4743: LD_INT 22
4745: PUSH
4746: LD_INT 3
4748: PUSH
4749: EMPTY
4750: LIST
4751: LIST
4752: PUSH
4753: LD_INT 2
4755: PUSH
4756: LD_INT 30
4758: PUSH
4759: LD_INT 0
4761: PUSH
4762: EMPTY
4763: LIST
4764: LIST
4765: PUSH
4766: LD_INT 30
4768: PUSH
4769: LD_INT 1
4771: PUSH
4772: EMPTY
4773: LIST
4774: LIST
4775: PUSH
4776: EMPTY
4777: LIST
4778: LIST
4779: LIST
4780: PUSH
4781: EMPTY
4782: LIST
4783: LIST
4784: PPUSH
4785: CALL_OW 69
4789: ST_TO_ADDR
// lab_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
4790: LD_ADDR_VAR 0 10
4794: PUSH
4795: LD_INT 22
4797: PUSH
4798: LD_INT 3
4800: PUSH
4801: EMPTY
4802: LIST
4803: LIST
4804: PUSH
4805: LD_INT 2
4807: PUSH
4808: LD_INT 30
4810: PUSH
4811: LD_INT 6
4813: PUSH
4814: EMPTY
4815: LIST
4816: LIST
4817: PUSH
4818: LD_INT 30
4820: PUSH
4821: LD_INT 7
4823: PUSH
4824: EMPTY
4825: LIST
4826: LIST
4827: PUSH
4828: LD_INT 30
4830: PUSH
4831: LD_INT 8
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: PUSH
4838: EMPTY
4839: LIST
4840: LIST
4841: LIST
4842: LIST
4843: PUSH
4844: EMPTY
4845: LIST
4846: LIST
4847: PPUSH
4848: CALL_OW 69
4852: ST_TO_ADDR
// fac_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
4853: LD_ADDR_VAR 0 11
4857: PUSH
4858: LD_INT 22
4860: PUSH
4861: LD_INT 3
4863: PUSH
4864: EMPTY
4865: LIST
4866: LIST
4867: PUSH
4868: LD_INT 30
4870: PUSH
4871: LD_INT 3
4873: PUSH
4874: EMPTY
4875: LIST
4876: LIST
4877: PUSH
4878: EMPTY
4879: LIST
4880: LIST
4881: PPUSH
4882: CALL_OW 69
4886: ST_TO_ADDR
// breastworks_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
4887: LD_ADDR_VAR 0 12
4891: PUSH
4892: LD_INT 22
4894: PUSH
4895: LD_INT 3
4897: PUSH
4898: EMPTY
4899: LIST
4900: LIST
4901: PUSH
4902: LD_INT 30
4904: PUSH
4905: LD_INT 31
4907: PUSH
4908: EMPTY
4909: LIST
4910: LIST
4911: PUSH
4912: EMPTY
4913: LIST
4914: LIST
4915: PPUSH
4916: CALL_OW 69
4920: ST_TO_ADDR
// bunker_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
4921: LD_ADDR_VAR 0 13
4925: PUSH
4926: LD_INT 22
4928: PUSH
4929: LD_INT 3
4931: PUSH
4932: EMPTY
4933: LIST
4934: LIST
4935: PUSH
4936: LD_INT 30
4938: PUSH
4939: LD_INT 32
4941: PUSH
4942: EMPTY
4943: LIST
4944: LIST
4945: PUSH
4946: EMPTY
4947: LIST
4948: LIST
4949: PPUSH
4950: CALL_OW 69
4954: ST_TO_ADDR
// turret_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
4955: LD_ADDR_VAR 0 14
4959: PUSH
4960: LD_INT 22
4962: PUSH
4963: LD_INT 3
4965: PUSH
4966: EMPTY
4967: LIST
4968: LIST
4969: PUSH
4970: LD_INT 30
4972: PUSH
4973: LD_INT 33
4975: PUSH
4976: EMPTY
4977: LIST
4978: LIST
4979: PUSH
4980: EMPTY
4981: LIST
4982: LIST
4983: PPUSH
4984: CALL_OW 69
4988: ST_TO_ADDR
// weapons_list := [ [ ru_heavy_machine_gun , 5 ] , [ ru_gatling_gun , 50 ] , [ ru_gun , 30 ] , [ ru_heavy_gun , 15 ] ] ;
4989: LD_ADDR_VAR 0 15
4993: PUSH
4994: LD_INT 42
4996: PUSH
4997: LD_INT 5
4999: PUSH
5000: EMPTY
5001: LIST
5002: LIST
5003: PUSH
5004: LD_INT 43
5006: PUSH
5007: LD_INT 50
5009: PUSH
5010: EMPTY
5011: LIST
5012: LIST
5013: PUSH
5014: LD_INT 44
5016: PUSH
5017: LD_INT 30
5019: PUSH
5020: EMPTY
5021: LIST
5022: LIST
5023: PUSH
5024: LD_INT 46
5026: PUSH
5027: LD_INT 15
5029: PUSH
5030: EMPTY
5031: LIST
5032: LIST
5033: PUSH
5034: EMPTY
5035: LIST
5036: LIST
5037: LIST
5038: LIST
5039: ST_TO_ADDR
// personel_counter := [ 0 , 4 , 6 , 3 ] ;
5040: LD_ADDR_VAR 0 16
5044: PUSH
5045: LD_INT 0
5047: PUSH
5048: LD_INT 4
5050: PUSH
5051: LD_INT 6
5053: PUSH
5054: LD_INT 3
5056: PUSH
5057: EMPTY
5058: LIST
5059: LIST
5060: LIST
5061: LIST
5062: ST_TO_ADDR
// skill := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
5063: LD_ADDR_VAR 0 6
5067: PUSH
5068: LD_INT 4
5070: PUSH
5071: LD_INT 5
5073: PUSH
5074: LD_INT 6
5076: PUSH
5077: LD_INT 6
5079: PUSH
5080: EMPTY
5081: LIST
5082: LIST
5083: LIST
5084: LIST
5085: PUSH
5086: LD_OWVAR 67
5090: ARRAY
5091: ST_TO_ADDR
// SetBName ( ru_dep_main , am_tukh ) ;
5092: LD_INT 16
5094: PPUSH
5095: LD_STRING am_tukh
5097: PPUSH
5098: CALL_OW 500
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
5102: LD_ADDR_VAR 0 2
5106: PUSH
5107: LD_INT 21
5109: PUSH
5110: LD_INT 3
5112: PUSH
5113: EMPTY
5114: LIST
5115: LIST
5116: PPUSH
5117: CALL_OW 69
5121: PUSH
5122: FOR_IN
5123: IFFALSE 5160
// SetBLevel ( i , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5125: LD_VAR 0 2
5129: PPUSH
5130: LD_INT 4
5132: PUSH
5133: LD_INT 5
5135: PUSH
5136: LD_INT 6
5138: PUSH
5139: LD_INT 7
5141: PUSH
5142: EMPTY
5143: LIST
5144: LIST
5145: LIST
5146: LIST
5147: PUSH
5148: LD_OWVAR 67
5152: ARRAY
5153: PPUSH
5154: CALL_OW 241
5158: GO 5122
5160: POP
5161: POP
// for i in dep_list do
5162: LD_ADDR_VAR 0 2
5166: PUSH
5167: LD_VAR 0 9
5171: PUSH
5172: FOR_IN
5173: IFFALSE 5217
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
5175: LD_VAR 0 2
5179: PPUSH
5180: CALL_OW 274
5184: PPUSH
5185: LD_INT 1
5187: PPUSH
5188: LD_INT 1000
5190: PPUSH
5191: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
5195: LD_VAR 0 2
5199: PPUSH
5200: CALL_OW 274
5204: PPUSH
5205: LD_INT 2
5207: PPUSH
5208: LD_INT 1000
5210: PPUSH
5211: CALL_OW 277
// end ;
5215: GO 5172
5217: POP
5218: POP
// InitHc ;
5219: CALL_OW 19
// tmp := bunker_list * [ 45 , 60 , 75 , 80 ] [ Difficulty ] div 100 ;
5223: LD_ADDR_VAR 0 8
5227: PUSH
5228: LD_VAR 0 13
5232: PUSH
5233: LD_INT 45
5235: PUSH
5236: LD_INT 60
5238: PUSH
5239: LD_INT 75
5241: PUSH
5242: LD_INT 80
5244: PUSH
5245: EMPTY
5246: LIST
5247: LIST
5248: LIST
5249: LIST
5250: PUSH
5251: LD_OWVAR 67
5255: ARRAY
5256: MUL
5257: PUSH
5258: LD_INT 100
5260: DIV
5261: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , tmp ) ;
5262: LD_ADDR_VAR 0 16
5266: PUSH
5267: LD_VAR 0 16
5271: PPUSH
5272: LD_INT 1
5274: PPUSH
5275: LD_VAR 0 8
5279: PPUSH
5280: CALL_OW 1
5284: ST_TO_ADDR
// tmp := [ ] ;
5285: LD_ADDR_VAR 0 8
5289: PUSH
5290: EMPTY
5291: ST_TO_ADDR
// for i in bunker_list do
5292: LD_ADDR_VAR 0 2
5296: PUSH
5297: LD_VAR 0 13
5301: PUSH
5302: FOR_IN
5303: IFFALSE 5399
// if i mod 10 + 1 < tmp then
5305: LD_VAR 0 2
5309: PUSH
5310: LD_INT 10
5312: MOD
5313: PUSH
5314: LD_INT 1
5316: PLUS
5317: PUSH
5318: LD_VAR 0 8
5322: LESS
5323: IFFALSE 5368
// tmp := Insert ( tmp , i mod rand ( 3 , 5 ) + 1 , i ) else
5325: LD_ADDR_VAR 0 8
5329: PUSH
5330: LD_VAR 0 8
5334: PPUSH
5335: LD_VAR 0 2
5339: PUSH
5340: LD_INT 3
5342: PPUSH
5343: LD_INT 5
5345: PPUSH
5346: CALL_OW 12
5350: MOD
5351: PUSH
5352: LD_INT 1
5354: PLUS
5355: PPUSH
5356: LD_VAR 0 2
5360: PPUSH
5361: CALL_OW 2
5365: ST_TO_ADDR
5366: GO 5397
// tmp := Insert ( tmp , tmp + 1 , i ) ;
5368: LD_ADDR_VAR 0 8
5372: PUSH
5373: LD_VAR 0 8
5377: PPUSH
5378: LD_VAR 0 8
5382: PUSH
5383: LD_INT 1
5385: PLUS
5386: PPUSH
5387: LD_VAR 0 2
5391: PPUSH
5392: CALL_OW 2
5396: ST_TO_ADDR
5397: GO 5302
5399: POP
5400: POP
// bunker_list := tmp ;
5401: LD_ADDR_VAR 0 13
5405: PUSH
5406: LD_VAR 0 8
5410: ST_TO_ADDR
// for i in bunker_list ^ turret_list do
5411: LD_ADDR_VAR 0 2
5415: PUSH
5416: LD_VAR 0 13
5420: PUSH
5421: LD_VAR 0 14
5425: ADD
5426: PUSH
5427: FOR_IN
5428: IFFALSE 5451
// PlaceWeaponTurret ( i , GetTurretWeaponBase ( i ) ) ;
5430: LD_VAR 0 2
5434: PPUSH
5435: LD_VAR 0 2
5439: PPUSH
5440: CALL 2200 0 1
5444: PPUSH
5445: CALL_OW 431
5449: GO 5427
5451: POP
5452: POP
// while ( personel_counter [ 1 ] ) do
5453: LD_VAR 0 16
5457: PUSH
5458: LD_INT 1
5460: ARRAY
5461: IFFALSE 5569
// begin i := rand ( 1 , bunker_list ) ;
5463: LD_ADDR_VAR 0 2
5467: PUSH
5468: LD_INT 1
5470: PPUSH
5471: LD_VAR 0 13
5475: PPUSH
5476: CALL_OW 12
5480: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5481: LD_INT 0
5483: PPUSH
5484: LD_INT 1
5486: PPUSH
5487: LD_VAR 0 6
5491: PPUSH
5492: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , bunker_list [ i ] ) ;
5496: CALL_OW 44
5500: PPUSH
5501: LD_VAR 0 13
5505: PUSH
5506: LD_VAR 0 2
5510: ARRAY
5511: PPUSH
5512: CALL_OW 52
// bunker_list := Delete ( bunker_list , i ) ;
5516: LD_ADDR_VAR 0 13
5520: PUSH
5521: LD_VAR 0 13
5525: PPUSH
5526: LD_VAR 0 2
5530: PPUSH
5531: CALL_OW 3
5535: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , personel_counter [ 1 ] - 1 ) ;
5536: LD_ADDR_VAR 0 16
5540: PUSH
5541: LD_VAR 0 16
5545: PPUSH
5546: LD_INT 1
5548: PPUSH
5549: LD_VAR 0 16
5553: PUSH
5554: LD_INT 1
5556: ARRAY
5557: PUSH
5558: LD_INT 1
5560: MINUS
5561: PPUSH
5562: CALL_OW 1
5566: ST_TO_ADDR
// end ;
5567: GO 5453
// for i = 1 to personel_counter [ 2 ] do
5569: LD_ADDR_VAR 0 2
5573: PUSH
5574: DOUBLE
5575: LD_INT 1
5577: DEC
5578: ST_TO_ADDR
5579: LD_VAR 0 16
5583: PUSH
5584: LD_INT 2
5586: ARRAY
5587: PUSH
5588: FOR_TO
5589: IFFALSE 5620
// begin PrepareHuman ( false , 2 , skill ) ;
5591: LD_INT 0
5593: PPUSH
5594: LD_INT 2
5596: PPUSH
5597: LD_VAR 0 6
5601: PPUSH
5602: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru_dep_main ) ;
5606: CALL_OW 44
5610: PPUSH
5611: LD_INT 16
5613: PPUSH
5614: CALL_OW 52
// end ;
5618: GO 5588
5620: POP
5621: POP
// for i = 1 to personel_counter [ 3 ] do
5622: LD_ADDR_VAR 0 2
5626: PUSH
5627: DOUBLE
5628: LD_INT 1
5630: DEC
5631: ST_TO_ADDR
5632: LD_VAR 0 16
5636: PUSH
5637: LD_INT 3
5639: ARRAY
5640: PUSH
5641: FOR_TO
5642: IFFALSE 5689
// begin PrepareHuman ( false , 3 , skill ) ;
5644: LD_INT 0
5646: PPUSH
5647: LD_INT 3
5649: PPUSH
5650: LD_VAR 0 6
5654: PPUSH
5655: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , fac_list [ i mod 2 + 1 ] ) ;
5659: CALL_OW 44
5663: PPUSH
5664: LD_VAR 0 11
5668: PUSH
5669: LD_VAR 0 2
5673: PUSH
5674: LD_INT 2
5676: MOD
5677: PUSH
5678: LD_INT 1
5680: PLUS
5681: ARRAY
5682: PPUSH
5683: CALL_OW 52
// end ;
5687: GO 5641
5689: POP
5690: POP
// for i = 1 to personel_counter [ 4 ] do
5691: LD_ADDR_VAR 0 2
5695: PUSH
5696: DOUBLE
5697: LD_INT 1
5699: DEC
5700: ST_TO_ADDR
5701: LD_VAR 0 16
5705: PUSH
5706: LD_INT 4
5708: ARRAY
5709: PUSH
5710: FOR_TO
5711: IFFALSE 5748
// begin PrepareHuman ( false , 4 , skill ) ;
5713: LD_INT 0
5715: PPUSH
5716: LD_INT 4
5718: PPUSH
5719: LD_VAR 0 6
5723: PPUSH
5724: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , lab_list [ 1 ] ) ;
5728: CALL_OW 44
5732: PPUSH
5733: LD_VAR 0 10
5737: PUSH
5738: LD_INT 1
5740: ARRAY
5741: PPUSH
5742: CALL_OW 52
// end ;
5746: GO 5710
5748: POP
5749: POP
// for i in breastworks_list do
5750: LD_ADDR_VAR 0 2
5754: PUSH
5755: LD_VAR 0 12
5759: PUSH
5760: FOR_IN
5761: IFFALSE 5873
// begin r := GetDir ( i ) ;
5763: LD_ADDR_VAR 0 4
5767: PUSH
5768: LD_VAR 0 2
5772: PPUSH
5773: CALL_OW 254
5777: ST_TO_ADDR
// if r > 3 then
5778: LD_VAR 0 4
5782: PUSH
5783: LD_INT 3
5785: GREATER
5786: IFFALSE 5804
// r := r - 3 else
5788: LD_ADDR_VAR 0 4
5792: PUSH
5793: LD_VAR 0 4
5797: PUSH
5798: LD_INT 3
5800: MINUS
5801: ST_TO_ADDR
5802: GO 5818
// r := r + 3 ;
5804: LD_ADDR_VAR 0 4
5808: PUSH
5809: LD_VAR 0 4
5813: PUSH
5814: LD_INT 3
5816: PLUS
5817: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5818: LD_INT 0
5820: PPUSH
5821: LD_INT 1
5823: PPUSH
5824: LD_VAR 0 6
5828: PPUSH
5829: CALL_OW 380
// un := CreateHuman ;
5833: LD_ADDR_VAR 0 5
5837: PUSH
5838: CALL_OW 44
5842: ST_TO_ADDR
// SetDir ( un , r ) ;
5843: LD_VAR 0 5
5847: PPUSH
5848: LD_VAR 0 4
5852: PPUSH
5853: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
5857: LD_VAR 0 5
5861: PPUSH
5862: LD_VAR 0 2
5866: PPUSH
5867: CALL_OW 52
// end ;
5871: GO 5760
5873: POP
5874: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) ;
5875: LD_ADDR_VAR 0 8
5879: PUSH
5880: LD_INT 22
5882: PUSH
5883: LD_INT 3
5885: PUSH
5886: EMPTY
5887: LIST
5888: LIST
5889: PUSH
5890: LD_INT 25
5892: PUSH
5893: LD_INT 3
5895: PUSH
5896: EMPTY
5897: LIST
5898: LIST
5899: PUSH
5900: EMPTY
5901: LIST
5902: LIST
5903: PPUSH
5904: CALL_OW 69
5908: ST_TO_ADDR
// r := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
5909: LD_ADDR_VAR 0 4
5913: PUSH
5914: LD_INT 4
5916: PUSH
5917: LD_INT 5
5919: PUSH
5920: LD_INT 6
5922: PUSH
5923: LD_INT 6
5925: PUSH
5926: EMPTY
5927: LIST
5928: LIST
5929: LIST
5930: LIST
5931: PUSH
5932: LD_OWVAR 67
5936: ARRAY
5937: ST_TO_ADDR
// for i = 1 to r do
5938: LD_ADDR_VAR 0 2
5942: PUSH
5943: DOUBLE
5944: LD_INT 1
5946: DEC
5947: ST_TO_ADDR
5948: LD_VAR 0 4
5952: PUSH
5953: FOR_TO
5954: IFFALSE 6127
// begin un := PrepareTank ( 3 , 3 , [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked ] [ i mod 3 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
5956: LD_ADDR_VAR 0 5
5960: PUSH
5961: LD_INT 3
5963: PPUSH
5964: LD_INT 3
5966: PPUSH
5967: LD_INT 22
5969: PUSH
5970: LD_INT 22
5972: PUSH
5973: LD_INT 24
5975: PUSH
5976: EMPTY
5977: LIST
5978: LIST
5979: LIST
5980: PUSH
5981: LD_VAR 0 2
5985: PUSH
5986: LD_INT 3
5988: MOD
5989: PUSH
5990: LD_INT 1
5992: PLUS
5993: ARRAY
5994: PPUSH
5995: LD_INT 1
5997: PPUSH
5998: LD_INT 1
6000: PPUSH
6001: LD_INT 43
6003: PUSH
6004: LD_INT 44
6006: PUSH
6007: LD_INT 42
6009: PUSH
6010: EMPTY
6011: LIST
6012: LIST
6013: LIST
6014: PUSH
6015: LD_VAR 0 2
6019: PUSH
6020: LD_INT 3
6022: MOD
6023: PUSH
6024: LD_INT 1
6026: PLUS
6027: ARRAY
6028: PPUSH
6029: LD_INT 100
6031: PPUSH
6032: CALL 512 0 7
6036: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
6037: LD_VAR 0 5
6041: PPUSH
6042: LD_INT 0
6044: PPUSH
6045: LD_INT 5
6047: PPUSH
6048: CALL_OW 12
6052: PPUSH
6053: CALL_OW 233
// PlaceUnitArea ( un , parkingArea , false ) ;
6057: LD_VAR 0 5
6061: PPUSH
6062: LD_INT 5
6064: PPUSH
6065: LD_INT 0
6067: PPUSH
6068: CALL_OW 49
// if i > tmp - 2 then
6072: LD_VAR 0 2
6076: PUSH
6077: LD_VAR 0 8
6081: PUSH
6082: LD_INT 2
6084: MINUS
6085: GREATER
6086: IFFALSE 6090
// continue ;
6088: GO 5953
// ComExitBuilding ( tmp [ i ] ) ;
6090: LD_VAR 0 8
6094: PUSH
6095: LD_VAR 0 2
6099: ARRAY
6100: PPUSH
6101: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , un ) ;
6105: LD_VAR 0 8
6109: PUSH
6110: LD_VAR 0 2
6114: ARRAY
6115: PPUSH
6116: LD_VAR 0 5
6120: PPUSH
6121: CALL_OW 180
// end ;
6125: GO 5953
6127: POP
6128: POP
// end ;
6129: LD_VAR 0 1
6133: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) do var i , filter , tmp , engs , enemy ;
6134: LD_INT 22
6136: PUSH
6137: LD_INT 3
6139: PUSH
6140: EMPTY
6141: LIST
6142: LIST
6143: PUSH
6144: LD_INT 25
6146: PUSH
6147: LD_INT 2
6149: PUSH
6150: EMPTY
6151: LIST
6152: LIST
6153: PUSH
6154: EMPTY
6155: LIST
6156: LIST
6157: PPUSH
6158: CALL_OW 69
6162: IFFALSE 6894
6164: GO 6166
6166: DISABLE
6167: LD_INT 0
6169: PPUSH
6170: PPUSH
6171: PPUSH
6172: PPUSH
6173: PPUSH
// begin enable ;
6174: ENABLE
// filter := FilterUnitsInArea ( baseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
6175: LD_ADDR_VAR 0 2
6179: PUSH
6180: LD_INT 6
6182: PPUSH
6183: LD_INT 3
6185: PUSH
6186: LD_INT 24
6188: PUSH
6189: LD_INT 1000
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: PUSH
6200: LD_INT 21
6202: PUSH
6203: LD_INT 3
6205: PUSH
6206: EMPTY
6207: LIST
6208: LIST
6209: PUSH
6210: EMPTY
6211: LIST
6212: LIST
6213: PPUSH
6214: CALL_OW 70
6218: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
6219: LD_ADDR_VAR 0 4
6223: PUSH
6224: LD_INT 22
6226: PUSH
6227: LD_INT 3
6229: PUSH
6230: EMPTY
6231: LIST
6232: LIST
6233: PUSH
6234: LD_INT 25
6236: PUSH
6237: LD_INT 2
6239: PUSH
6240: EMPTY
6241: LIST
6242: LIST
6243: PUSH
6244: EMPTY
6245: LIST
6246: LIST
6247: PPUSH
6248: CALL_OW 69
6252: ST_TO_ADDR
// if not filter and not ru_rebuild_list then
6253: LD_VAR 0 2
6257: NOT
6258: PUSH
6259: LD_EXP 20
6263: NOT
6264: AND
6265: IFFALSE 6335
// begin for i in engs do
6267: LD_ADDR_VAR 0 1
6271: PUSH
6272: LD_VAR 0 4
6276: PUSH
6277: FOR_IN
6278: IFFALSE 6333
// if GetLives ( i ) = 1000 and not HasTask ( i ) and not IsInUnit ( i ) then
6280: LD_VAR 0 1
6284: PPUSH
6285: CALL_OW 256
6289: PUSH
6290: LD_INT 1000
6292: EQUAL
6293: PUSH
6294: LD_VAR 0 1
6298: PPUSH
6299: CALL_OW 314
6303: NOT
6304: AND
6305: PUSH
6306: LD_VAR 0 1
6310: PPUSH
6311: CALL_OW 310
6315: NOT
6316: AND
6317: IFFALSE 6331
// ComEnterUnit ( i , ru_dep_main ) ;
6319: LD_VAR 0 1
6323: PPUSH
6324: LD_INT 16
6326: PPUSH
6327: CALL_OW 120
6331: GO 6277
6333: POP
6334: POP
// end ; if UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) then
6335: LD_VAR 0 4
6339: PPUSH
6340: LD_INT 3
6342: PUSH
6343: LD_INT 24
6345: PUSH
6346: LD_INT 650
6348: PUSH
6349: EMPTY
6350: LIST
6351: LIST
6352: PUSH
6353: EMPTY
6354: LIST
6355: LIST
6356: PPUSH
6357: CALL_OW 72
6361: IFFALSE 6454
// begin tmp := UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) ;
6363: LD_ADDR_VAR 0 3
6367: PUSH
6368: LD_VAR 0 4
6372: PPUSH
6373: LD_INT 3
6375: PUSH
6376: LD_INT 24
6378: PUSH
6379: LD_INT 650
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: PPUSH
6390: CALL_OW 72
6394: ST_TO_ADDR
// for i in tmp do
6395: LD_ADDR_VAR 0 1
6399: PUSH
6400: LD_VAR 0 3
6404: PUSH
6405: FOR_IN
6406: IFFALSE 6452
// if not IsInArea ( i , mainBaseArea ) then
6408: LD_VAR 0 1
6412: PPUSH
6413: LD_INT 14
6415: PPUSH
6416: CALL_OW 308
6420: NOT
6421: IFFALSE 6450
// begin ComMoveXY ( i , 129 , 125 ) ;
6423: LD_VAR 0 1
6427: PPUSH
6428: LD_INT 129
6430: PPUSH
6431: LD_INT 125
6433: PPUSH
6434: CALL_OW 111
// AddComWait ( i , 0 0$30 ) ;
6438: LD_VAR 0 1
6442: PPUSH
6443: LD_INT 1050
6445: PPUSH
6446: CALL_OW 202
// end ;
6450: GO 6405
6452: POP
6453: POP
// end ; engs := UnitFilter ( engs , [ f_lives , 650 ] ) ;
6454: LD_ADDR_VAR 0 4
6458: PUSH
6459: LD_VAR 0 4
6463: PPUSH
6464: LD_INT 24
6466: PUSH
6467: LD_INT 650
6469: PUSH
6470: EMPTY
6471: LIST
6472: LIST
6473: PPUSH
6474: CALL_OW 72
6478: ST_TO_ADDR
// if not engs then
6479: LD_VAR 0 4
6483: NOT
6484: IFFALSE 6488
// exit ;
6486: GO 6894
// if filter then
6488: LD_VAR 0 2
6492: IFFALSE 6751
// begin for i in engs do
6494: LD_ADDR_VAR 0 1
6498: PUSH
6499: LD_VAR 0 4
6503: PUSH
6504: FOR_IN
6505: IFFALSE 6529
// if IsInUnit ( i ) then
6507: LD_VAR 0 1
6511: PPUSH
6512: CALL_OW 310
6516: IFFALSE 6527
// ComExitBuilding ( i ) ;
6518: LD_VAR 0 1
6522: PPUSH
6523: CALL_OW 122
6527: GO 6504
6529: POP
6530: POP
// wait ( 3 ) ;
6531: LD_INT 3
6533: PPUSH
6534: CALL_OW 67
// if filter >= 2 and engs >= 2 then
6538: LD_VAR 0 2
6542: PUSH
6543: LD_INT 2
6545: GREATEREQUAL
6546: PUSH
6547: LD_VAR 0 4
6551: PUSH
6552: LD_INT 2
6554: GREATEREQUAL
6555: AND
6556: IFFALSE 6704
// begin for i = 1 to engs / 2 do
6558: LD_ADDR_VAR 0 1
6562: PUSH
6563: DOUBLE
6564: LD_INT 1
6566: DEC
6567: ST_TO_ADDR
6568: LD_VAR 0 4
6572: PUSH
6573: LD_INT 2
6575: DIVREAL
6576: PUSH
6577: FOR_TO
6578: IFFALSE 6624
// if not HasTask ( engs [ i ] ) then
6580: LD_VAR 0 4
6584: PUSH
6585: LD_VAR 0 1
6589: ARRAY
6590: PPUSH
6591: CALL_OW 314
6595: NOT
6596: IFFALSE 6622
// ComRepairBuilding ( engs [ i ] , filter [ 1 ] ) ;
6598: LD_VAR 0 4
6602: PUSH
6603: LD_VAR 0 1
6607: ARRAY
6608: PPUSH
6609: LD_VAR 0 2
6613: PUSH
6614: LD_INT 1
6616: ARRAY
6617: PPUSH
6618: CALL_OW 130
6622: GO 6577
6624: POP
6625: POP
// for i = engs / 2 + 1 to engs do
6626: LD_ADDR_VAR 0 1
6630: PUSH
6631: DOUBLE
6632: LD_VAR 0 4
6636: PUSH
6637: LD_INT 2
6639: DIVREAL
6640: PUSH
6641: LD_INT 1
6643: PLUS
6644: DEC
6645: ST_TO_ADDR
6646: LD_VAR 0 4
6650: PUSH
6651: FOR_TO
6652: IFFALSE 6700
// if not HasTask ( engs [ i ] ) then
6654: LD_VAR 0 4
6658: PUSH
6659: LD_VAR 0 1
6663: ARRAY
6664: PPUSH
6665: CALL_OW 314
6669: NOT
6670: IFFALSE 6698
// ComRepairBuilding ( engs [ i ] , filter [ filter ] ) ;
6672: LD_VAR 0 4
6676: PUSH
6677: LD_VAR 0 1
6681: ARRAY
6682: PPUSH
6683: LD_VAR 0 2
6687: PUSH
6688: LD_VAR 0 2
6692: ARRAY
6693: PPUSH
6694: CALL_OW 130
6698: GO 6651
6700: POP
6701: POP
// end else
6702: GO 6751
// for i in engs do
6704: LD_ADDR_VAR 0 1
6708: PUSH
6709: LD_VAR 0 4
6713: PUSH
6714: FOR_IN
6715: IFFALSE 6749
// if not HasTask ( i ) then
6717: LD_VAR 0 1
6721: PPUSH
6722: CALL_OW 314
6726: NOT
6727: IFFALSE 6747
// ComRepairBuilding ( i , filter [ 1 ] ) ;
6729: LD_VAR 0 1
6733: PPUSH
6734: LD_VAR 0 2
6738: PUSH
6739: LD_INT 1
6741: ARRAY
6742: PPUSH
6743: CALL_OW 130
6747: GO 6714
6749: POP
6750: POP
// end ; enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
6751: LD_ADDR_VAR 0 5
6755: PUSH
6756: LD_INT 81
6758: PUSH
6759: LD_INT 3
6761: PUSH
6762: EMPTY
6763: LIST
6764: LIST
6765: PPUSH
6766: CALL_OW 69
6770: ST_TO_ADDR
// if ru_rebuild_list and not filter then
6771: LD_EXP 20
6775: PUSH
6776: LD_VAR 0 2
6780: NOT
6781: AND
6782: IFFALSE 6894
// begin ComExitBuilding ( engs ) ;
6784: LD_VAR 0 4
6788: PPUSH
6789: CALL_OW 122
// if GetDistUnitXY ( NearestUnitToXY ( enemy , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) > 10 then
6793: LD_VAR 0 5
6797: PPUSH
6798: LD_EXP 20
6802: PUSH
6803: LD_INT 2
6805: ARRAY
6806: PPUSH
6807: LD_EXP 20
6811: PUSH
6812: LD_INT 3
6814: ARRAY
6815: PPUSH
6816: CALL_OW 73
6820: PPUSH
6821: LD_EXP 20
6825: PUSH
6826: LD_INT 2
6828: ARRAY
6829: PPUSH
6830: LD_EXP 20
6834: PUSH
6835: LD_INT 3
6837: ARRAY
6838: PPUSH
6839: CALL_OW 297
6843: PUSH
6844: LD_INT 10
6846: GREATER
6847: IFFALSE 6894
// ComBuild ( engs , ru_rebuild_list [ 1 ] , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] , ru_rebuild_list [ 4 ] ) ;
6849: LD_VAR 0 4
6853: PPUSH
6854: LD_EXP 20
6858: PUSH
6859: LD_INT 1
6861: ARRAY
6862: PPUSH
6863: LD_EXP 20
6867: PUSH
6868: LD_INT 2
6870: ARRAY
6871: PPUSH
6872: LD_EXP 20
6876: PUSH
6877: LD_INT 3
6879: ARRAY
6880: PPUSH
6881: LD_EXP 20
6885: PUSH
6886: LD_INT 4
6888: ARRAY
6889: PPUSH
6890: CALL_OW 145
// end ; end ;
6894: PPOPN 5
6896: END
// every 0 0$1 trigger GetLives ( ru_dep_main ) < 250 do var i , tmp ;
6897: LD_INT 16
6899: PPUSH
6900: CALL_OW 256
6904: PUSH
6905: LD_INT 250
6907: LESS
6908: IFFALSE 7098
6910: GO 6912
6912: DISABLE
6913: LD_INT 0
6915: PPUSH
6916: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
6917: LD_ADDR_VAR 0 2
6921: PUSH
6922: LD_INT 22
6924: PUSH
6925: LD_INT 3
6927: PUSH
6928: EMPTY
6929: LIST
6930: LIST
6931: PUSH
6932: LD_INT 2
6934: PUSH
6935: LD_INT 25
6937: PUSH
6938: LD_INT 1
6940: PUSH
6941: EMPTY
6942: LIST
6943: LIST
6944: PUSH
6945: LD_INT 25
6947: PUSH
6948: LD_INT 3
6950: PUSH
6951: EMPTY
6952: LIST
6953: LIST
6954: PUSH
6955: LD_INT 25
6957: PUSH
6958: LD_INT 4
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: LIST
6969: LIST
6970: PUSH
6971: EMPTY
6972: LIST
6973: LIST
6974: PPUSH
6975: CALL_OW 69
6979: ST_TO_ADDR
// ComExitBuilding ( tmp ) ;
6980: LD_VAR 0 2
6984: PPUSH
6985: CALL_OW 122
// wait ( 3 ) ;
6989: LD_INT 3
6991: PPUSH
6992: CALL_OW 67
// ComMoveXY ( tmp , 156 , 211 ) ;
6996: LD_VAR 0 2
7000: PPUSH
7001: LD_INT 156
7003: PPUSH
7004: LD_INT 211
7006: PPUSH
7007: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7011: LD_INT 35
7013: PPUSH
7014: CALL_OW 67
// for i in tmp do
7018: LD_ADDR_VAR 0 1
7022: PUSH
7023: LD_VAR 0 2
7027: PUSH
7028: FOR_IN
7029: IFFALSE 7089
// if IsInArea ( i , escapeArea ) then
7031: LD_VAR 0 1
7035: PPUSH
7036: LD_INT 15
7038: PPUSH
7039: CALL_OW 308
7043: IFFALSE 7072
// begin RemoveUnit ( i ) ;
7045: LD_VAR 0 1
7049: PPUSH
7050: CALL_OW 64
// tmp := tmp diff i ;
7054: LD_ADDR_VAR 0 2
7058: PUSH
7059: LD_VAR 0 2
7063: PUSH
7064: LD_VAR 0 1
7068: DIFF
7069: ST_TO_ADDR
// end else
7070: GO 7087
// ComMoveXY ( i , 156 , 211 ) ;
7072: LD_VAR 0 1
7076: PPUSH
7077: LD_INT 156
7079: PPUSH
7080: LD_INT 211
7082: PPUSH
7083: CALL_OW 111
7087: GO 7028
7089: POP
7090: POP
// until not tmp ;
7091: LD_VAR 0 2
7095: NOT
7096: IFFALSE 7011
// end ;
7098: PPOPN 2
7100: END
// every 0 0$01 trigger GetLives ( ru_dep_main ) > 250 and FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_outside ] ] ] ) do var i , tmp ;
7101: LD_INT 16
7103: PPUSH
7104: CALL_OW 256
7108: PUSH
7109: LD_INT 250
7111: GREATER
7112: PUSH
7113: LD_INT 22
7115: PUSH
7116: LD_INT 3
7118: PUSH
7119: EMPTY
7120: LIST
7121: LIST
7122: PUSH
7123: LD_INT 25
7125: PUSH
7126: LD_INT 1
7128: PUSH
7129: EMPTY
7130: LIST
7131: LIST
7132: PUSH
7133: LD_INT 56
7135: PUSH
7136: EMPTY
7137: LIST
7138: PUSH
7139: EMPTY
7140: LIST
7141: LIST
7142: LIST
7143: PUSH
7144: EMPTY
7145: LIST
7146: PPUSH
7147: CALL_OW 69
7151: AND
7152: IFFALSE 7264
7154: GO 7156
7156: DISABLE
7157: LD_INT 0
7159: PPUSH
7160: PPUSH
// begin enable ;
7161: ENABLE
// tmp := FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ] ) ;
7162: LD_ADDR_VAR 0 2
7166: PUSH
7167: LD_INT 22
7169: PUSH
7170: LD_INT 3
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: PUSH
7177: LD_INT 25
7179: PUSH
7180: LD_INT 1
7182: PUSH
7183: EMPTY
7184: LIST
7185: LIST
7186: PUSH
7187: LD_INT 56
7189: PUSH
7190: EMPTY
7191: LIST
7192: PUSH
7193: LD_INT 3
7195: PUSH
7196: LD_INT 60
7198: PUSH
7199: EMPTY
7200: LIST
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: PUSH
7206: EMPTY
7207: LIST
7208: LIST
7209: LIST
7210: LIST
7211: PUSH
7212: EMPTY
7213: LIST
7214: PPUSH
7215: CALL_OW 69
7219: ST_TO_ADDR
// if not tmp then
7220: LD_VAR 0 2
7224: NOT
7225: IFFALSE 7229
// exit ;
7227: GO 7264
// for i in tmp do
7229: LD_ADDR_VAR 0 1
7233: PUSH
7234: LD_VAR 0 2
7238: PUSH
7239: FOR_IN
7240: IFFALSE 7262
// GoToAnotherTower ( i , 0 , 143 , 143 ) ;
7242: LD_VAR 0 1
7246: PPUSH
7247: LD_INT 0
7249: PPUSH
7250: LD_INT 143
7252: PPUSH
7253: LD_INT 143
7255: PPUSH
7256: CALL 830 0 4
7260: GO 7239
7262: POP
7263: POP
// end ;
7264: PPOPN 2
7266: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do var i , tmp , doc ;
7267: LD_INT 22
7269: PUSH
7270: LD_INT 3
7272: PUSH
7273: EMPTY
7274: LIST
7275: LIST
7276: PUSH
7277: LD_INT 25
7279: PUSH
7280: LD_INT 4
7282: PUSH
7283: EMPTY
7284: LIST
7285: LIST
7286: PUSH
7287: EMPTY
7288: LIST
7289: LIST
7290: PPUSH
7291: CALL_OW 69
7295: IFFALSE 7549
7297: GO 7299
7299: DISABLE
7300: LD_INT 0
7302: PPUSH
7303: PPUSH
7304: PPUSH
// begin enable ;
7305: ENABLE
// tmp := FilterUnitsInArea ( mainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7306: LD_ADDR_VAR 0 2
7310: PUSH
7311: LD_INT 14
7313: PPUSH
7314: LD_INT 22
7316: PUSH
7317: LD_INT 3
7319: PUSH
7320: EMPTY
7321: LIST
7322: LIST
7323: PUSH
7324: LD_INT 21
7326: PUSH
7327: LD_INT 1
7329: PUSH
7330: EMPTY
7331: LIST
7332: LIST
7333: PUSH
7334: LD_INT 3
7336: PUSH
7337: LD_INT 24
7339: PUSH
7340: LD_INT 1000
7342: PUSH
7343: EMPTY
7344: LIST
7345: LIST
7346: PUSH
7347: EMPTY
7348: LIST
7349: LIST
7350: PUSH
7351: EMPTY
7352: LIST
7353: LIST
7354: LIST
7355: PPUSH
7356: CALL_OW 70
7360: ST_TO_ADDR
// doc := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
7361: LD_ADDR_VAR 0 3
7365: PUSH
7366: LD_INT 22
7368: PUSH
7369: LD_INT 3
7371: PUSH
7372: EMPTY
7373: LIST
7374: LIST
7375: PUSH
7376: LD_INT 25
7378: PUSH
7379: LD_INT 4
7381: PUSH
7382: EMPTY
7383: LIST
7384: LIST
7385: PUSH
7386: EMPTY
7387: LIST
7388: LIST
7389: PPUSH
7390: CALL_OW 69
7394: ST_TO_ADDR
// if not doc then
7395: LD_VAR 0 3
7399: NOT
7400: IFFALSE 7404
// exit ;
7402: GO 7549
// if not tmp then
7404: LD_VAR 0 2
7408: NOT
7409: IFFALSE 7500
// begin if not IsInUnit ( doc [ 1 ] ) then
7411: LD_VAR 0 3
7415: PUSH
7416: LD_INT 1
7418: ARRAY
7419: PPUSH
7420: CALL_OW 310
7424: NOT
7425: IFFALSE 7498
// ComEnterUnit ( doc , FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ) ;
7427: LD_VAR 0 3
7431: PPUSH
7432: LD_INT 22
7434: PUSH
7435: LD_INT 3
7437: PUSH
7438: EMPTY
7439: LIST
7440: LIST
7441: PUSH
7442: LD_INT 2
7444: PUSH
7445: LD_INT 30
7447: PUSH
7448: LD_INT 6
7450: PUSH
7451: EMPTY
7452: LIST
7453: LIST
7454: PUSH
7455: LD_INT 30
7457: PUSH
7458: LD_INT 7
7460: PUSH
7461: EMPTY
7462: LIST
7463: LIST
7464: PUSH
7465: LD_INT 30
7467: PUSH
7468: LD_INT 8
7470: PUSH
7471: EMPTY
7472: LIST
7473: LIST
7474: PUSH
7475: EMPTY
7476: LIST
7477: LIST
7478: LIST
7479: LIST
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: PPUSH
7485: CALL_OW 69
7489: PUSH
7490: LD_INT 1
7492: ARRAY
7493: PPUSH
7494: CALL_OW 120
// exit ;
7498: GO 7549
// end ; if IsInUnit ( doc [ 1 ] ) then
7500: LD_VAR 0 3
7504: PUSH
7505: LD_INT 1
7507: ARRAY
7508: PPUSH
7509: CALL_OW 310
7513: IFFALSE 7524
// ComExitBuilding ( doc ) ;
7515: LD_VAR 0 3
7519: PPUSH
7520: CALL_OW 122
// wait ( 3 ) ;
7524: LD_INT 3
7526: PPUSH
7527: CALL_OW 67
// ComHeal ( doc , tmp [ 1 ] ) ;
7531: LD_VAR 0 3
7535: PPUSH
7536: LD_VAR 0 2
7540: PUSH
7541: LD_INT 1
7543: ARRAY
7544: PPUSH
7545: CALL_OW 128
// end ;
7549: PPOPN 3
7551: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do var i , tmp , attacking , areas , area ;
7552: LD_INT 22
7554: PUSH
7555: LD_INT 3
7557: PUSH
7558: EMPTY
7559: LIST
7560: LIST
7561: PUSH
7562: LD_INT 25
7564: PUSH
7565: LD_INT 3
7567: PUSH
7568: EMPTY
7569: LIST
7570: LIST
7571: PUSH
7572: EMPTY
7573: LIST
7574: LIST
7575: PPUSH
7576: CALL_OW 69
7580: PUSH
7581: LD_INT 22
7583: PUSH
7584: LD_INT 3
7586: PUSH
7587: EMPTY
7588: LIST
7589: LIST
7590: PUSH
7591: LD_INT 21
7593: PUSH
7594: LD_INT 2
7596: PUSH
7597: EMPTY
7598: LIST
7599: LIST
7600: PUSH
7601: EMPTY
7602: LIST
7603: LIST
7604: PPUSH
7605: CALL_OW 69
7609: AND
7610: IFFALSE 8024
7612: GO 7614
7614: DISABLE
7615: LD_INT 0
7617: PPUSH
7618: PPUSH
7619: PPUSH
7620: PPUSH
7621: PPUSH
// begin enable ;
7622: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
7623: LD_ADDR_VAR 0 2
7627: PUSH
7628: LD_INT 22
7630: PUSH
7631: LD_INT 3
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: PUSH
7638: LD_INT 21
7640: PUSH
7641: LD_INT 2
7643: PUSH
7644: EMPTY
7645: LIST
7646: LIST
7647: PUSH
7648: LD_INT 3
7650: PUSH
7651: LD_INT 58
7653: PUSH
7654: EMPTY
7655: LIST
7656: PUSH
7657: EMPTY
7658: LIST
7659: LIST
7660: PUSH
7661: EMPTY
7662: LIST
7663: LIST
7664: LIST
7665: PPUSH
7666: CALL_OW 69
7670: ST_TO_ADDR
// areas := [ sectorAlpha , sectorBeta , sectorDelta , mainBaseArea ] ;
7671: LD_ADDR_VAR 0 4
7675: PUSH
7676: LD_INT 10
7678: PUSH
7679: LD_INT 11
7681: PUSH
7682: LD_INT 12
7684: PUSH
7685: LD_INT 14
7687: PUSH
7688: EMPTY
7689: LIST
7690: LIST
7691: LIST
7692: LIST
7693: ST_TO_ADDR
// area := 0 ;
7694: LD_ADDR_VAR 0 5
7698: PUSH
7699: LD_INT 0
7701: ST_TO_ADDR
// attacking := false ;
7702: LD_ADDR_VAR 0 3
7706: PUSH
7707: LD_INT 0
7709: ST_TO_ADDR
// for i in tmp do
7710: LD_ADDR_VAR 0 1
7714: PUSH
7715: LD_VAR 0 2
7719: PUSH
7720: FOR_IN
7721: IFFALSE 7807
// if GetDistUnits ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) < 10 then
7723: LD_VAR 0 1
7727: PPUSH
7728: LD_INT 22
7730: PUSH
7731: LD_INT 1
7733: PUSH
7734: EMPTY
7735: LIST
7736: LIST
7737: PPUSH
7738: CALL_OW 69
7742: PPUSH
7743: LD_VAR 0 1
7747: PPUSH
7748: CALL_OW 74
7752: PPUSH
7753: CALL_OW 296
7757: PUSH
7758: LD_INT 10
7760: LESS
7761: IFFALSE 7805
// begin ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
7763: LD_VAR 0 1
7767: PPUSH
7768: LD_INT 22
7770: PUSH
7771: LD_INT 1
7773: PUSH
7774: EMPTY
7775: LIST
7776: LIST
7777: PPUSH
7778: CALL_OW 69
7782: PPUSH
7783: LD_VAR 0 1
7787: PPUSH
7788: CALL_OW 74
7792: PPUSH
7793: CALL_OW 115
// attacking := true ;
7797: LD_ADDR_VAR 0 3
7801: PUSH
7802: LD_INT 1
7804: ST_TO_ADDR
// end ;
7805: GO 7720
7807: POP
7808: POP
// if attacking then
7809: LD_VAR 0 3
7813: IFFALSE 7817
// exit ;
7815: GO 8024
// for i in areas do
7817: LD_ADDR_VAR 0 1
7821: PUSH
7822: LD_VAR 0 4
7826: PUSH
7827: FOR_IN
7828: IFFALSE 7865
// if FilterUnitsInArea ( i , [ f_side , 1 ] ) then
7830: LD_VAR 0 1
7834: PPUSH
7835: LD_INT 22
7837: PUSH
7838: LD_INT 1
7840: PUSH
7841: EMPTY
7842: LIST
7843: LIST
7844: PPUSH
7845: CALL_OW 70
7849: IFFALSE 7863
// begin area := i ;
7851: LD_ADDR_VAR 0 5
7855: PUSH
7856: LD_VAR 0 1
7860: ST_TO_ADDR
// break ;
7861: GO 7865
// end ;
7863: GO 7827
7865: POP
7866: POP
// if area then
7867: LD_VAR 0 5
7871: IFFALSE 8024
// begin for i in tmp do
7873: LD_ADDR_VAR 0 1
7877: PUSH
7878: LD_VAR 0 2
7882: PUSH
7883: FOR_IN
7884: IFFALSE 8022
// begin if GetFuel ( i ) < 33 then
7886: LD_VAR 0 1
7890: PPUSH
7891: CALL_OW 261
7895: PUSH
7896: LD_INT 33
7898: LESS
7899: IFFALSE 7913
// SetFuel ( i , 33 ) ;
7901: LD_VAR 0 1
7905: PPUSH
7906: LD_INT 33
7908: PPUSH
7909: CALL_OW 240
// if GetDistUnits ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) < 10 then
7913: LD_VAR 0 1
7917: PPUSH
7918: LD_INT 22
7920: PUSH
7921: LD_INT 1
7923: PUSH
7924: EMPTY
7925: LIST
7926: LIST
7927: PPUSH
7928: CALL_OW 69
7932: PPUSH
7933: LD_VAR 0 1
7937: PPUSH
7938: CALL_OW 74
7942: PPUSH
7943: CALL_OW 296
7947: PUSH
7948: LD_INT 10
7950: LESS
7951: IFFALSE 7989
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) else
7953: LD_VAR 0 1
7957: PPUSH
7958: LD_INT 22
7960: PUSH
7961: LD_INT 1
7963: PUSH
7964: EMPTY
7965: LIST
7966: LIST
7967: PPUSH
7968: CALL_OW 69
7972: PPUSH
7973: LD_VAR 0 1
7977: PPUSH
7978: CALL_OW 74
7982: PPUSH
7983: CALL_OW 115
7987: GO 8020
// if not IsInArea ( i , area ) then
7989: LD_VAR 0 1
7993: PPUSH
7994: LD_VAR 0 5
7998: PPUSH
7999: CALL_OW 308
8003: NOT
8004: IFFALSE 8020
// ComMoveToArea ( i , area ) ;
8006: LD_VAR 0 1
8010: PPUSH
8011: LD_VAR 0 5
8015: PPUSH
8016: CALL_OW 113
// end ;
8020: GO 7883
8022: POP
8023: POP
// end ; end ;
8024: PPOPN 5
8026: END
// every 15 15$00 trigger Difficulty > 1 do var i , j , un , veh , time , count ;
8027: LD_OWVAR 67
8031: PUSH
8032: LD_INT 1
8034: GREATER
8035: IFFALSE 8320
8037: GO 8039
8039: DISABLE
8040: LD_INT 0
8042: PPUSH
8043: PPUSH
8044: PPUSH
8045: PPUSH
8046: PPUSH
8047: PPUSH
// begin uc_side := 3 ;
8048: LD_ADDR_OWVAR 20
8052: PUSH
8053: LD_INT 3
8055: ST_TO_ADDR
// uc_nation := 3 ;
8056: LD_ADDR_OWVAR 21
8060: PUSH
8061: LD_INT 3
8063: ST_TO_ADDR
// time := [ 9 9$00 , 7 7$00 , 6 6$00 , 5 5$30 ] [ Difficulty ] ;
8064: LD_ADDR_VAR 0 5
8068: PUSH
8069: LD_INT 18900
8071: PUSH
8072: LD_INT 14700
8074: PUSH
8075: LD_INT 12600
8077: PUSH
8078: LD_INT 11550
8080: PUSH
8081: EMPTY
8082: LIST
8083: LIST
8084: LIST
8085: LIST
8086: PUSH
8087: LD_OWVAR 67
8091: ARRAY
8092: ST_TO_ADDR
// count := [ 2 , 2 , 3 , 3 ] [ Difficulty ] ;
8093: LD_ADDR_VAR 0 6
8097: PUSH
8098: LD_INT 2
8100: PUSH
8101: LD_INT 2
8103: PUSH
8104: LD_INT 3
8106: PUSH
8107: LD_INT 3
8109: PUSH
8110: EMPTY
8111: LIST
8112: LIST
8113: LIST
8114: LIST
8115: PUSH
8116: LD_OWVAR 67
8120: ARRAY
8121: ST_TO_ADDR
// for i = 1 to count do
8122: LD_ADDR_VAR 0 1
8126: PUSH
8127: DOUBLE
8128: LD_INT 1
8130: DEC
8131: ST_TO_ADDR
8132: LD_VAR 0 6
8136: PUSH
8137: FOR_TO
8138: IFFALSE 8318
// begin wait ( time ) ;
8140: LD_VAR 0 5
8144: PPUSH
8145: CALL_OW 67
// for j = 1 to rand ( 1 , Difficulty ) do
8149: LD_ADDR_VAR 0 2
8153: PUSH
8154: DOUBLE
8155: LD_INT 1
8157: DEC
8158: ST_TO_ADDR
8159: LD_INT 1
8161: PPUSH
8162: LD_OWVAR 67
8166: PPUSH
8167: CALL_OW 12
8171: PUSH
8172: FOR_TO
8173: IFFALSE 8314
// begin veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 80 ) ;
8175: LD_ADDR_VAR 0 4
8179: PUSH
8180: LD_INT 3
8182: PPUSH
8183: LD_INT 3
8185: PPUSH
8186: LD_INT 22
8188: PPUSH
8189: LD_INT 1
8191: PPUSH
8192: LD_INT 1
8194: PPUSH
8195: LD_INT 43
8197: PUSH
8198: LD_INT 44
8200: PUSH
8201: LD_INT 42
8203: PUSH
8204: EMPTY
8205: LIST
8206: LIST
8207: LIST
8208: PUSH
8209: LD_VAR 0 1
8213: PUSH
8214: LD_INT 3
8216: MOD
8217: PUSH
8218: LD_INT 1
8220: PLUS
8221: ARRAY
8222: PPUSH
8223: LD_INT 80
8225: PPUSH
8226: CALL 512 0 7
8230: ST_TO_ADDR
// PlaceUnitArea ( veh , southArea , false ) ;
8231: LD_VAR 0 4
8235: PPUSH
8236: LD_INT 13
8238: PPUSH
8239: LD_INT 0
8241: PPUSH
8242: CALL_OW 49
// PrepareHuman ( false , 3 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
8246: LD_INT 0
8248: PPUSH
8249: LD_INT 3
8251: PPUSH
8252: LD_INT 4
8254: PUSH
8255: LD_INT 5
8257: PUSH
8258: LD_INT 5
8260: PUSH
8261: EMPTY
8262: LIST
8263: LIST
8264: LIST
8265: PUSH
8266: LD_OWVAR 67
8270: ARRAY
8271: PPUSH
8272: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
8276: CALL_OW 44
8280: PPUSH
8281: LD_VAR 0 4
8285: PPUSH
8286: CALL_OW 52
// wait ( 0 0$01 ) ;
8290: LD_INT 35
8292: PPUSH
8293: CALL_OW 67
// ComMoveXY ( veh , 143 , 143 ) ;
8297: LD_VAR 0 4
8301: PPUSH
8302: LD_INT 143
8304: PPUSH
8305: LD_INT 143
8307: PPUSH
8308: CALL_OW 111
// end ;
8312: GO 8172
8314: POP
8315: POP
// end ;
8316: GO 8137
8318: POP
8319: POP
// end ;
8320: PPOPN 6
8322: END
// every 8 8$00 do var i , un , time ;
8323: GO 8325
8325: DISABLE
8326: LD_INT 0
8328: PPUSH
8329: PPUSH
8330: PPUSH
// begin time := [ 3 3$00 , 1 1$00 , 0 0$30 ] ;
8331: LD_ADDR_VAR 0 3
8335: PUSH
8336: LD_INT 6300
8338: PUSH
8339: LD_INT 2100
8341: PUSH
8342: LD_INT 1050
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: LIST
8349: ST_TO_ADDR
// wait ( time ) ;
8350: LD_VAR 0 3
8354: PPUSH
8355: CALL_OW 67
// uc_side := 3 ;
8359: LD_ADDR_OWVAR 20
8363: PUSH
8364: LD_INT 3
8366: ST_TO_ADDR
// uc_nation := 3 ;
8367: LD_ADDR_OWVAR 21
8371: PUSH
8372: LD_INT 3
8374: ST_TO_ADDR
// for i = 1 to 2 do
8375: LD_ADDR_VAR 0 1
8379: PUSH
8380: DOUBLE
8381: LD_INT 1
8383: DEC
8384: ST_TO_ADDR
8385: LD_INT 2
8387: PUSH
8388: FOR_TO
8389: IFFALSE 8452
// begin PrepareHuman ( false , 1 , 4 ) ;
8391: LD_INT 0
8393: PPUSH
8394: LD_INT 1
8396: PPUSH
8397: LD_INT 4
8399: PPUSH
8400: CALL_OW 380
// un := CreateHuman ;
8404: LD_ADDR_VAR 0 2
8408: PUSH
8409: CALL_OW 44
8413: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_dep_main ) ;
8414: LD_VAR 0 2
8418: PPUSH
8419: LD_INT 16
8421: PPUSH
8422: CALL_OW 52
// ComExitBuilding ( un ) ;
8426: LD_VAR 0 2
8430: PPUSH
8431: CALL_OW 122
// AddComAgressiveMove ( un , 41 , 76 ) ;
8435: LD_VAR 0 2
8439: PPUSH
8440: LD_INT 41
8442: PPUSH
8443: LD_INT 76
8445: PPUSH
8446: CALL_OW 174
// end ;
8450: GO 8388
8452: POP
8453: POP
// end ; end_of_file
8454: PPOPN 3
8456: END
// export function Action ; begin
8457: LD_INT 0
8459: PPUSH
// CenterNowOnXY ( 28 , 3 ) ;
8460: LD_INT 28
8462: PPUSH
8463: LD_INT 3
8465: PPUSH
8466: CALL_OW 86
// PlaceSeeing ( 41 , 76 , 1 , 10 ) ;
8470: LD_INT 41
8472: PPUSH
8473: LD_INT 76
8475: PPUSH
8476: LD_INT 1
8478: PPUSH
8479: LD_INT 10
8481: PPUSH
8482: CALL_OW 330
// RemoveSeeing ( 41 , 76 , 1 ) ;
8486: LD_INT 41
8488: PPUSH
8489: LD_INT 76
8491: PPUSH
8492: LD_INT 1
8494: PPUSH
8495: CALL_OW 331
// InGameOn ;
8499: CALL_OW 8
// SayRadio ( Harisson , D2-Har-1 ) ;
8503: LD_EXP 19
8507: PPUSH
8508: LD_STRING D2-Har-1
8510: PPUSH
8511: CALL_OW 94
// InGameOff ;
8515: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
8519: LD_STRING M1
8521: PPUSH
8522: CALL_OW 337
// end ;
8526: LD_VAR 0 1
8530: RET
// every 0 0$1 trigger buildings_counter > 1 do var un ;
8531: LD_EXP 4
8535: PUSH
8536: LD_INT 1
8538: GREATER
8539: IFFALSE 8630
8541: GO 8543
8543: DISABLE
8544: LD_INT 0
8546: PPUSH
// begin un := GetRandom ( sex_male ) [ 1 ] ;
8547: LD_ADDR_VAR 0 1
8551: PUSH
8552: LD_INT 1
8554: PPUSH
8555: CALL 600 0 1
8559: PUSH
8560: LD_INT 1
8562: ARRAY
8563: ST_TO_ADDR
// Say ( un , D2a-Sol1-1 ) ;
8564: LD_VAR 0 1
8568: PPUSH
8569: LD_STRING D2a-Sol1-1
8571: PPUSH
8572: CALL_OW 88
// if not un then
8576: LD_VAR 0 1
8580: NOT
8581: IFFALSE 8612
// begin un := GetRandom ( sex_female ) [ 1 ] ;
8583: LD_ADDR_VAR 0 1
8587: PUSH
8588: LD_INT 2
8590: PPUSH
8591: CALL 600 0 1
8595: PUSH
8596: LD_INT 1
8598: ARRAY
8599: ST_TO_ADDR
// Say ( un , D2a-FSol1-1 ) ;
8600: LD_VAR 0 1
8604: PPUSH
8605: LD_STRING D2a-FSol1-1
8607: PPUSH
8608: CALL_OW 88
// end ; if Khatam then
8612: LD_EXP 17
8616: IFFALSE 8630
// Say ( Khatam , D3b-Khat-3 ) ;
8618: LD_EXP 17
8622: PPUSH
8623: LD_STRING D3b-Khat-3
8625: PPUSH
8626: CALL_OW 88
// end ;
8630: PPOPN 1
8632: END
// every 0 0$1 trigger Frank and not Kikuchi and FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , GetX ( Frank ) , GetY ( Frank ) , 7 ] ] ) and not InBattle ( 1 ) and not InBattle ( 4 ) do var i , ape ;
8633: LD_EXP 15
8637: PUSH
8638: LD_EXP 18
8642: NOT
8643: AND
8644: PUSH
8645: LD_INT 22
8647: PUSH
8648: LD_INT 1
8650: PUSH
8651: EMPTY
8652: LIST
8653: LIST
8654: PUSH
8655: LD_INT 92
8657: PUSH
8658: LD_EXP 15
8662: PPUSH
8663: CALL_OW 250
8667: PUSH
8668: LD_EXP 15
8672: PPUSH
8673: CALL_OW 251
8677: PUSH
8678: LD_INT 7
8680: PUSH
8681: EMPTY
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: PUSH
8687: EMPTY
8688: LIST
8689: LIST
8690: PPUSH
8691: CALL_OW 69
8695: AND
8696: PUSH
8697: LD_INT 1
8699: PPUSH
8700: CALL_OW 463
8704: NOT
8705: AND
8706: PUSH
8707: LD_INT 4
8709: PPUSH
8710: CALL_OW 463
8714: NOT
8715: AND
8716: IFFALSE 9303
8718: GO 8720
8720: DISABLE
8721: LD_INT 0
8723: PPUSH
8724: PPUSH
// begin InGameOn ;
8725: CALL_OW 8
// ape := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
8729: LD_ADDR_VAR 0 2
8733: PUSH
8734: LD_INT 22
8736: PUSH
8737: LD_INT 0
8739: PUSH
8740: EMPTY
8741: LIST
8742: LIST
8743: PUSH
8744: LD_INT 25
8746: PUSH
8747: LD_INT 12
8749: PUSH
8750: EMPTY
8751: LIST
8752: LIST
8753: PUSH
8754: EMPTY
8755: LIST
8756: LIST
8757: PPUSH
8758: CALL_OW 69
8762: ST_TO_ADDR
// ape := NearestUnitToUnit ( ape , Frank ) ;
8763: LD_ADDR_VAR 0 2
8767: PUSH
8768: LD_VAR 0 2
8772: PPUSH
8773: LD_EXP 15
8777: PPUSH
8778: CALL_OW 74
8782: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , Frank , 20 ] ] ) do
8783: LD_ADDR_VAR 0 1
8787: PUSH
8788: LD_INT 22
8790: PUSH
8791: LD_INT 1
8793: PUSH
8794: EMPTY
8795: LIST
8796: LIST
8797: PUSH
8798: LD_INT 21
8800: PUSH
8801: LD_INT 1
8803: PUSH
8804: EMPTY
8805: LIST
8806: LIST
8807: PUSH
8808: LD_INT 91
8810: PUSH
8811: LD_EXP 15
8815: PUSH
8816: LD_INT 20
8818: PUSH
8819: EMPTY
8820: LIST
8821: LIST
8822: LIST
8823: PUSH
8824: EMPTY
8825: LIST
8826: LIST
8827: LIST
8828: PPUSH
8829: CALL_OW 69
8833: PUSH
8834: FOR_IN
8835: IFFALSE 8853
// ComTurnUnit ( i , Frank ) ;
8837: LD_VAR 0 1
8841: PPUSH
8842: LD_EXP 15
8846: PPUSH
8847: CALL_OW 119
8851: GO 8834
8853: POP
8854: POP
// SetSide ( Frank , 1 ) ;
8855: LD_EXP 15
8859: PPUSH
8860: LD_INT 1
8862: PPUSH
8863: CALL_OW 235
// ComMoveUnit ( JMM , Frank ) ;
8867: LD_EXP 9
8871: PPUSH
8872: LD_EXP 15
8876: PPUSH
8877: CALL_OW 112
// AddComTurnUnit ( JMM , Frank ) ;
8881: LD_EXP 9
8885: PPUSH
8886: LD_EXP 15
8890: PPUSH
8891: CALL_OW 179
// CenterOnUnits ( Frank ) ;
8895: LD_EXP 15
8899: PPUSH
8900: CALL_OW 85
// Say ( Frank , D3a-Frank-1 ) ;
8904: LD_EXP 15
8908: PPUSH
8909: LD_STRING D3a-Frank-1
8911: PPUSH
8912: CALL_OW 88
// ComMoveXY ( ape , 42 , 78 ) ;
8916: LD_VAR 0 2
8920: PPUSH
8921: LD_INT 42
8923: PPUSH
8924: LD_INT 78
8926: PPUSH
8927: CALL_OW 111
// AddComTurnUnit ( ape , Frank ) ;
8931: LD_VAR 0 2
8935: PPUSH
8936: LD_EXP 15
8940: PPUSH
8941: CALL_OW 179
// if Lisa then
8945: LD_EXP 14
8949: IFFALSE 8963
// Say ( Lisa , D3a-Lisa-1 ) ;
8951: LD_EXP 14
8955: PPUSH
8956: LD_STRING D3a-Lisa-1
8958: PPUSH
8959: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
8963: LD_EXP 9
8967: PPUSH
8968: LD_STRING D3a-JMM-1
8970: PPUSH
8971: CALL_OW 88
// if Cyrus then
8975: LD_EXP 13
8979: IFFALSE 8993
// Say ( Cyrus , D3a-Cyrus-1 ) ;
8981: LD_EXP 13
8985: PPUSH
8986: LD_STRING D3a-Cyrus-1
8988: PPUSH
8989: CALL_OW 88
// if GetRandom ( sex_male ) then
8993: LD_INT 1
8995: PPUSH
8996: CALL 600 0 1
9000: IFFALSE 9021
// Say ( GetRandom ( sex_male ) [ 1 ] , D3a-Sol1-1 ) ;
9002: LD_INT 1
9004: PPUSH
9005: CALL 600 0 1
9009: PUSH
9010: LD_INT 1
9012: ARRAY
9013: PPUSH
9014: LD_STRING D3a-Sol1-1
9016: PPUSH
9017: CALL_OW 88
// if GetRandom ( sex_female ) then
9021: LD_INT 2
9023: PPUSH
9024: CALL 600 0 1
9028: IFFALSE 9049
// Say ( GetRandom ( sex_female ) [ 1 ] , D3a-FSol1-1 ) ;
9030: LD_INT 2
9032: PPUSH
9033: CALL 600 0 1
9037: PUSH
9038: LD_INT 1
9040: ARRAY
9041: PPUSH
9042: LD_STRING D3a-FSol1-1
9044: PPUSH
9045: CALL_OW 88
// if Gladstone then
9049: LD_EXP 16
9053: IFFALSE 9067
// Say ( Gladstone , D3a-Glad-1 ) ;
9055: LD_EXP 16
9059: PPUSH
9060: LD_STRING D3a-Glad-1
9062: PPUSH
9063: CALL_OW 88
// ComMoveXY ( ape , 60 , 113 ) ;
9067: LD_VAR 0 2
9071: PPUSH
9072: LD_INT 60
9074: PPUSH
9075: LD_INT 113
9077: PPUSH
9078: CALL_OW 111
// Say ( Frank , D3a-Frank-2 ) ;
9082: LD_EXP 15
9086: PPUSH
9087: LD_STRING D3a-Frank-2
9089: PPUSH
9090: CALL_OW 88
// ComTurnUnit ( Frank , JMM ) ;
9094: LD_EXP 15
9098: PPUSH
9099: LD_EXP 9
9103: PPUSH
9104: CALL_OW 119
// Say ( JMM , D3a-JMM-2 ) ;
9108: LD_EXP 9
9112: PPUSH
9113: LD_STRING D3a-JMM-2
9115: PPUSH
9116: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9120: LD_INT 1
9122: PPUSH
9123: LD_INT 4
9125: PPUSH
9126: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9130: LD_INT 85
9132: PPUSH
9133: LD_INT 134
9135: PPUSH
9136: CALL_OW 84
// Say ( Frank , D3a-Frank-3 ) ;
9140: LD_EXP 15
9144: PPUSH
9145: LD_STRING D3a-Frank-3
9147: PPUSH
9148: CALL_OW 88
// Wait ( 0 0$01 ) ;
9152: LD_INT 35
9154: PPUSH
9155: CALL_OW 67
// CenterOnXY ( 166 , 136 ) ;
9159: LD_INT 166
9161: PPUSH
9162: LD_INT 136
9164: PPUSH
9165: CALL_OW 84
// Say ( JMM , D3a-JMM-3 ) ;
9169: LD_EXP 9
9173: PPUSH
9174: LD_STRING D3a-JMM-3
9176: PPUSH
9177: CALL_OW 88
// Wait ( 0 0$01 ) ;
9181: LD_INT 35
9183: PPUSH
9184: CALL_OW 67
// CenterNowOnUnits ( Frank ) ;
9188: LD_EXP 15
9192: PPUSH
9193: CALL_OW 87
// Say ( Frank , D3a-Frank-4 ) ;
9197: LD_EXP 15
9201: PPUSH
9202: LD_STRING D3a-Frank-4
9204: PPUSH
9205: CALL_OW 88
// if Lisa then
9209: LD_EXP 14
9213: IFFALSE 9227
// Say ( Lisa , D3a-Lisa-4 ) ;
9215: LD_EXP 14
9219: PPUSH
9220: LD_STRING D3a-Lisa-4
9222: PPUSH
9223: CALL_OW 88
// Say ( JMM , D3a-JMM-4 ) ;
9227: LD_EXP 9
9231: PPUSH
9232: LD_STRING D3a-JMM-4
9234: PPUSH
9235: CALL_OW 88
// Say ( Frank , D3a-Frank-5 ) ;
9239: LD_EXP 15
9243: PPUSH
9244: LD_STRING D3a-Frank-5
9246: PPUSH
9247: CALL_OW 88
// Say ( JMM , D3a-JMM-5 ) ;
9251: LD_EXP 9
9255: PPUSH
9256: LD_STRING D3a-JMM-5
9258: PPUSH
9259: CALL_OW 88
// Say ( Frank , D3a-Frank-6 ) ;
9263: LD_EXP 15
9267: PPUSH
9268: LD_STRING D3a-Frank-6
9270: PPUSH
9271: CALL_OW 88
// Say ( JMM , D3a-JMM-6 ) ;
9275: LD_EXP 9
9279: PPUSH
9280: LD_STRING D3a-JMM-6
9282: PPUSH
9283: CALL_OW 88
// Say ( Frank , D3a-Frank-7 ) ;
9287: LD_EXP 15
9291: PPUSH
9292: LD_STRING D3a-Frank-7
9294: PPUSH
9295: CALL_OW 88
// InGameOff ;
9299: CALL_OW 9
// end ;
9303: PPOPN 2
9305: END
// every 0 0$1 trigger Kikuchi and not Frank and FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , GetX ( Kikuchi ) , GetY ( Kikuchi ) , 7 ] ] ) and not InBattle ( 1 ) and not InBattle ( 4 ) do
9306: LD_EXP 18
9310: PUSH
9311: LD_EXP 15
9315: NOT
9316: AND
9317: PUSH
9318: LD_INT 22
9320: PUSH
9321: LD_INT 1
9323: PUSH
9324: EMPTY
9325: LIST
9326: LIST
9327: PUSH
9328: LD_INT 92
9330: PUSH
9331: LD_EXP 18
9335: PPUSH
9336: CALL_OW 250
9340: PUSH
9341: LD_EXP 18
9345: PPUSH
9346: CALL_OW 251
9350: PUSH
9351: LD_INT 7
9353: PUSH
9354: EMPTY
9355: LIST
9356: LIST
9357: LIST
9358: LIST
9359: PUSH
9360: EMPTY
9361: LIST
9362: LIST
9363: PPUSH
9364: CALL_OW 69
9368: AND
9369: PUSH
9370: LD_INT 1
9372: PPUSH
9373: CALL_OW 463
9377: NOT
9378: AND
9379: PUSH
9380: LD_INT 4
9382: PPUSH
9383: CALL_OW 463
9387: NOT
9388: AND
9389: IFFALSE 9569
9391: GO 9393
9393: DISABLE
// begin InGameOn ;
9394: CALL_OW 8
// ComTurnUnit ( JMM , Kikuchi ) ;
9398: LD_EXP 9
9402: PPUSH
9403: LD_EXP 18
9407: PPUSH
9408: CALL_OW 119
// ComTurnUnit ( Kikuchi , JMM ) ;
9412: LD_EXP 18
9416: PPUSH
9417: LD_EXP 9
9421: PPUSH
9422: CALL_OW 119
// CenterOnUnits ( Kikuchi ) ;
9426: LD_EXP 18
9430: PPUSH
9431: CALL_OW 85
// Say ( Kikuchi , D3b-Yam-1 ) ;
9435: LD_EXP 18
9439: PPUSH
9440: LD_STRING D3b-Yam-1
9442: PPUSH
9443: CALL_OW 88
// Say ( JMM , D3b-JMM-1 ) ;
9447: LD_EXP 9
9451: PPUSH
9452: LD_STRING D3b-JMM-1
9454: PPUSH
9455: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9459: LD_INT 1
9461: PPUSH
9462: LD_INT 4
9464: PPUSH
9465: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9469: LD_INT 85
9471: PPUSH
9472: LD_INT 134
9474: PPUSH
9475: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-2 ) ;
9479: LD_EXP 18
9483: PPUSH
9484: LD_STRING D3b-Yam-2
9486: PPUSH
9487: CALL_OW 88
// Wait ( 0 0$01 ) ;
9491: LD_INT 35
9493: PPUSH
9494: CALL_OW 67
// Say ( JMM , D3b-JMM-2 ) ;
9498: LD_EXP 9
9502: PPUSH
9503: LD_STRING D3b-JMM-2
9505: PPUSH
9506: CALL_OW 88
// CenterOnXY ( 166 , 136 ) ;
9510: LD_INT 166
9512: PPUSH
9513: LD_INT 136
9515: PPUSH
9516: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-3 ) ;
9520: LD_EXP 18
9524: PPUSH
9525: LD_STRING D3b-Yam-3
9527: PPUSH
9528: CALL_OW 88
// CenterNowOnUnits ( JMM ) ;
9532: LD_EXP 9
9536: PPUSH
9537: CALL_OW 87
// Say ( JMM , D3b-JMM-3a ) ;
9541: LD_EXP 9
9545: PPUSH
9546: LD_STRING D3b-JMM-3a
9548: PPUSH
9549: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
9553: LD_EXP 18
9557: PPUSH
9558: LD_INT 1
9560: PPUSH
9561: CALL_OW 235
// InGameOff ;
9565: CALL_OW 9
// end ;
9569: END
// every 0 0$1 trigger FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var un , x , tw , i ;
9570: LD_INT 7
9572: PPUSH
9573: LD_INT 22
9575: PUSH
9576: LD_INT 1
9578: PUSH
9579: EMPTY
9580: LIST
9581: LIST
9582: PUSH
9583: LD_INT 3
9585: PUSH
9586: LD_INT 24
9588: PUSH
9589: LD_INT 1000
9591: PUSH
9592: EMPTY
9593: LIST
9594: LIST
9595: PUSH
9596: EMPTY
9597: LIST
9598: LIST
9599: PUSH
9600: EMPTY
9601: LIST
9602: LIST
9603: PPUSH
9604: CALL_OW 70
9608: IFFALSE 10064
9610: GO 9612
9612: DISABLE
9613: LD_INT 0
9615: PPUSH
9616: PPUSH
9617: PPUSH
9618: PPUSH
// begin repeat wait ( 0 0$1 ) ;
9619: LD_INT 35
9621: PPUSH
9622: CALL_OW 67
// un := FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
9626: LD_ADDR_VAR 0 1
9630: PUSH
9631: LD_INT 7
9633: PPUSH
9634: LD_INT 22
9636: PUSH
9637: LD_INT 1
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: PUSH
9644: LD_INT 3
9646: PUSH
9647: LD_INT 24
9649: PUSH
9650: LD_INT 1000
9652: PUSH
9653: EMPTY
9654: LIST
9655: LIST
9656: PUSH
9657: EMPTY
9658: LIST
9659: LIST
9660: PUSH
9661: EMPTY
9662: LIST
9663: LIST
9664: PPUSH
9665: CALL_OW 70
9669: ST_TO_ADDR
// if not un then
9670: LD_VAR 0 1
9674: NOT
9675: IFFALSE 9679
// continue ;
9677: GO 9619
// tw := NearbyTowerHasEnergy ( un [ 1 ] ) ;
9679: LD_ADDR_VAR 0 3
9683: PUSH
9684: LD_VAR 0 1
9688: PUSH
9689: LD_INT 1
9691: ARRAY
9692: PPUSH
9693: CALL 2028 0 1
9697: ST_TO_ADDR
// until tw ;
9698: LD_VAR 0 3
9702: IFFALSE 9619
// DialogueOn ;
9704: CALL_OW 6
// CenterNowOnUnits ( tw ) ;
9708: LD_VAR 0 3
9712: PPUSH
9713: CALL_OW 87
// if Lisa then
9717: LD_EXP 14
9721: IFFALSE 9749
// begin Say ( Lisa , D5-Lisa-1 ) ;
9723: LD_EXP 14
9727: PPUSH
9728: LD_STRING D5-Lisa-1
9730: PPUSH
9731: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
9735: LD_EXP 9
9739: PPUSH
9740: LD_STRING D5-JMM-1a
9742: PPUSH
9743: CALL_OW 88
// end else
9747: GO 9761
// Say ( JMM , D5-JMM-1 ) ;
9749: LD_EXP 9
9753: PPUSH
9754: LD_STRING D5-JMM-1
9756: PPUSH
9757: CALL_OW 88
// DialogueOff ;
9761: CALL_OW 7
// while ( true ) do
9765: LD_INT 1
9767: IFFALSE 9823
// begin wait ( 0 0$01 ) ;
9769: LD_INT 35
9771: PPUSH
9772: CALL_OW 67
// x := FilterUnitsExceptArea ( northElectro , [ [ f_btype , b_oil_power ] , [ f_see , 1 ] ] ) ;
9776: LD_ADDR_VAR 0 2
9780: PUSH
9781: LD_INT 8
9783: PPUSH
9784: LD_INT 30
9786: PUSH
9787: LD_INT 26
9789: PUSH
9790: EMPTY
9791: LIST
9792: LIST
9793: PUSH
9794: LD_INT 101
9796: PUSH
9797: LD_INT 1
9799: PUSH
9800: EMPTY
9801: LIST
9802: LIST
9803: PUSH
9804: EMPTY
9805: LIST
9806: LIST
9807: PPUSH
9808: CALL_OW 71
9812: ST_TO_ADDR
// if x then
9813: LD_VAR 0 2
9817: IFFALSE 9821
// break ;
9819: GO 9823
// end ;
9821: GO 9765
// CenterOnUnits ( x [ 1 ] ) ;
9823: LD_VAR 0 2
9827: PUSH
9828: LD_INT 1
9830: ARRAY
9831: PPUSH
9832: CALL_OW 85
// if Frank and GetSide ( Frank ) = 1 then
9836: LD_EXP 15
9840: PUSH
9841: LD_EXP 15
9845: PPUSH
9846: CALL_OW 255
9850: PUSH
9851: LD_INT 1
9853: EQUAL
9854: AND
9855: IFFALSE 9871
// Say ( Frank , D5a-Frank-1 ) else
9857: LD_EXP 15
9861: PPUSH
9862: LD_STRING D5a-Frank-1
9864: PPUSH
9865: CALL_OW 88
9869: GO 9925
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
9871: LD_EXP 18
9875: PUSH
9876: LD_EXP 18
9880: PPUSH
9881: CALL_OW 255
9885: PUSH
9886: LD_INT 1
9888: EQUAL
9889: AND
9890: IFFALSE 9906
// Say ( Kikuchi , D5a-Yam-1 ) else
9892: LD_EXP 18
9896: PPUSH
9897: LD_STRING D5a-Yam-1
9899: PPUSH
9900: CALL_OW 88
9904: GO 9925
// Say ( GetRandom ( sex_male ) [ 1 ] , D5a-Sol1-1 ) ;
9906: LD_INT 1
9908: PPUSH
9909: CALL 600 0 1
9913: PUSH
9914: LD_INT 1
9916: ARRAY
9917: PPUSH
9918: LD_STRING D5a-Sol1-1
9920: PPUSH
9921: CALL_OW 88
// Say ( JMM , D5a-JMM-1 ) ;
9925: LD_EXP 9
9929: PPUSH
9930: LD_STRING D5a-JMM-1
9932: PPUSH
9933: CALL_OW 88
// if Cyrus then
9937: LD_EXP 13
9941: IFFALSE 9955
// Say ( Cyrus , D5a-Cyrus-1 ) ;
9943: LD_EXP 13
9947: PPUSH
9948: LD_STRING D5a-Cyrus-1
9950: PPUSH
9951: CALL_OW 88
// x := false ;
9955: LD_ADDR_VAR 0 2
9959: PUSH
9960: LD_INT 0
9962: ST_TO_ADDR
// while ( true ) do
9963: LD_INT 1
9965: IFFALSE 10052
// begin wait ( 0 0$01 ) ;
9967: LD_INT 35
9969: PPUSH
9970: CALL_OW 67
// for i in FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) diff ru_dep_west do
9974: LD_ADDR_VAR 0 4
9978: PUSH
9979: LD_INT 2
9981: PUSH
9982: LD_INT 30
9984: PUSH
9985: LD_INT 0
9987: PUSH
9988: EMPTY
9989: LIST
9990: LIST
9991: PUSH
9992: LD_INT 30
9994: PUSH
9995: LD_INT 1
9997: PUSH
9998: EMPTY
9999: LIST
10000: LIST
10001: PUSH
10002: EMPTY
10003: LIST
10004: LIST
10005: LIST
10006: PPUSH
10007: CALL_OW 69
10011: PUSH
10012: LD_INT 1
10014: DIFF
10015: PUSH
10016: FOR_IN
10017: IFFALSE 10040
// if BaseNeedEnergy ( i ) then
10019: LD_VAR 0 4
10023: PPUSH
10024: CALL 1153 0 1
10028: IFFALSE 10038
// x := true ;
10030: LD_ADDR_VAR 0 2
10034: PUSH
10035: LD_INT 1
10037: ST_TO_ADDR
10038: GO 10016
10040: POP
10041: POP
// if x then
10042: LD_VAR 0 2
10046: IFFALSE 10050
// break ;
10048: GO 10052
// end ;
10050: GO 9963
// Say ( JMM , D5b-JMM-1 ) ;
10052: LD_EXP 9
10056: PPUSH
10057: LD_STRING D5b-JMM-1
10059: PPUSH
10060: CALL_OW 88
// end ;
10064: PPOPN 4
10066: END
// every 0 0$1 trigger time_to_end [ 1 ] < tick do
10067: LD_EXP 5
10071: PUSH
10072: LD_INT 1
10074: ARRAY
10075: PUSH
10076: LD_OWVAR 1
10080: LESS
10081: IFFALSE 10281
10083: GO 10085
10085: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10086: LD_INT 16
10088: PPUSH
10089: CALL_OW 301
10093: NOT
10094: IFFALSE 10117
// begin SayRadio ( Harisson , D3b-Har-3 ) ;
10096: LD_EXP 19
10100: PPUSH
10101: LD_STRING D3b-Har-3
10103: PPUSH
10104: CALL_OW 94
// ChangeMissionObjectives ( M2a ) ;
10108: LD_STRING M2a
10110: PPUSH
10111: CALL_OW 337
// end else
10115: GO 10136
// begin SayRadio ( Harisson , D3b-Har-3a ) ;
10117: LD_EXP 19
10121: PPUSH
10122: LD_STRING D3b-Har-3a
10124: PPUSH
10125: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
10129: LD_STRING M2
10131: PPUSH
10132: CALL_OW 337
// end ; can_end := true ;
10136: LD_ADDR_EXP 6
10140: PUSH
10141: LD_INT 1
10143: ST_TO_ADDR
// SetAreaMapShow ( endArea , 1 ) ;
10144: LD_INT 9
10146: PPUSH
10147: LD_INT 1
10149: PPUSH
10150: CALL_OW 424
// Wait ( 0 0$02 ) ;
10154: LD_INT 70
10156: PPUSH
10157: CALL_OW 67
// if Lisa then
10161: LD_EXP 14
10165: IFFALSE 10179
// Say ( Lisa , D3b-Lisa ) ;
10167: LD_EXP 14
10171: PPUSH
10172: LD_STRING D3b-Lisa
10174: PPUSH
10175: CALL_OW 88
// if Bobby then
10179: LD_EXP 12
10183: IFFALSE 10197
// Say ( Bobby , D3b-Bobby-3 ) ;
10185: LD_EXP 12
10189: PPUSH
10190: LD_STRING D3b-Bobby-3
10192: PPUSH
10193: CALL_OW 88
// if Cyrus then
10197: LD_EXP 13
10201: IFFALSE 10215
// Say ( Cyrus , D3b-Cyrus-3 ) ;
10203: LD_EXP 13
10207: PPUSH
10208: LD_STRING D3b-Cyrus-3
10210: PPUSH
10211: CALL_OW 88
// if Frank and GetSide ( Frank ) = 1 then
10215: LD_EXP 15
10219: PUSH
10220: LD_EXP 15
10224: PPUSH
10225: CALL_OW 255
10229: PUSH
10230: LD_INT 1
10232: EQUAL
10233: AND
10234: IFFALSE 10248
// Say ( Frank , D3b-Frank-3 ) ;
10236: LD_EXP 15
10240: PPUSH
10241: LD_STRING D3b-Frank-3
10243: PPUSH
10244: CALL_OW 88
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
10248: LD_EXP 18
10252: PUSH
10253: LD_EXP 18
10257: PPUSH
10258: CALL_OW 255
10262: PUSH
10263: LD_INT 1
10265: EQUAL
10266: AND
10267: IFFALSE 10281
// Say ( Kikuchi , D3b-Yam-4 ) ;
10269: LD_EXP 18
10273: PPUSH
10274: LD_STRING D3b-Yam-4
10276: PPUSH
10277: CALL_OW 88
// end ;
10281: END
// every 0 0$1 trigger time_to_end [ 2 ] < tick do
10282: LD_EXP 5
10286: PUSH
10287: LD_INT 2
10289: ARRAY
10290: PUSH
10291: LD_OWVAR 1
10295: LESS
10296: IFFALSE 10328
10298: GO 10300
10300: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
10301: LD_EXP 19
10305: PPUSH
10306: LD_STRING D4-Har-1
10308: PPUSH
10309: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
10313: LD_STRING M3
10315: PPUSH
10316: CALL_OW 337
// must_end := true ;
10320: LD_ADDR_EXP 7
10324: PUSH
10325: LD_INT 1
10327: ST_TO_ADDR
// end ;
10328: END
// every 0 0$01 trigger time_to_end [ 3 ] < tick do
10329: LD_EXP 5
10333: PUSH
10334: LD_INT 3
10336: ARRAY
10337: PUSH
10338: LD_OWVAR 1
10342: LESS
10343: IFFALSE 10374
10345: GO 10347
10347: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10348: LD_INT 16
10350: PPUSH
10351: CALL_OW 301
10355: NOT
10356: IFFALSE 10367
// YouLost ( TimeOut1 ) else
10358: LD_STRING TimeOut1
10360: PPUSH
10361: CALL_OW 104
10365: GO 10374
// YouLost ( TimeOut2 ) ;
10367: LD_STRING TimeOut2
10369: PPUSH
10370: CALL_OW 104
// end ;
10374: END
// every 0 0$1 trigger IsInArea ( JMM , endArea ) and can_end do var wait_on , i , tmp , m1 , m2 , m3 ;
10375: LD_EXP 9
10379: PPUSH
10380: LD_INT 9
10382: PPUSH
10383: CALL_OW 308
10387: PUSH
10388: LD_EXP 6
10392: AND
10393: IFFALSE 11493
10395: GO 10397
10397: DISABLE
10398: LD_INT 0
10400: PPUSH
10401: PPUSH
10402: PPUSH
10403: PPUSH
10404: PPUSH
10405: PPUSH
// begin wait_on := false ;
10406: LD_ADDR_VAR 0 1
10410: PUSH
10411: LD_INT 0
10413: ST_TO_ADDR
// if FilterPeople ( 1 ) + 0 > ( FilterPeopleArea ( 1 , endArea ) ^ FilterDriversArea ( 1 , endArea ) ) + 0 then
10414: LD_INT 1
10416: PPUSH
10417: CALL 1230 0 1
10421: PUSH
10422: LD_INT 0
10424: PLUS
10425: PUSH
10426: LD_INT 1
10428: PPUSH
10429: LD_INT 9
10431: PPUSH
10432: CALL 1321 0 2
10436: PUSH
10437: LD_INT 1
10439: PPUSH
10440: LD_INT 9
10442: PPUSH
10443: CALL 1368 0 2
10447: ADD
10448: PUSH
10449: LD_INT 0
10451: PLUS
10452: GREATER
10453: IFFALSE 10502
// case Query ( Q1 ) of 1 :
10455: LD_STRING Q1
10457: PPUSH
10458: CALL_OW 97
10462: PUSH
10463: LD_INT 1
10465: DOUBLE
10466: EQUAL
10467: IFTRUE 10471
10469: GO 10482
10471: POP
// wait_on := true ; 2 :
10472: LD_ADDR_VAR 0 1
10476: PUSH
10477: LD_INT 1
10479: ST_TO_ADDR
10480: GO 10502
10482: LD_INT 2
10484: DOUBLE
10485: EQUAL
10486: IFTRUE 10490
10488: GO 10501
10490: POP
// wait_on := false ; end ;
10491: LD_ADDR_VAR 0 1
10495: PUSH
10496: LD_INT 0
10498: ST_TO_ADDR
10499: GO 10502
10501: POP
// repeat wait ( 0 0$01 ) ;
10502: LD_INT 35
10504: PPUSH
10505: CALL_OW 67
// until ( not wait_on ) or ( FilterPeople ( 1 ) + 0 ) = ( FilterPeopleArea ( 1 , endArea ) ^ FilterDriversArea ( 1 , endArea ) ) + 0 ;
10509: LD_VAR 0 1
10513: NOT
10514: PUSH
10515: LD_INT 1
10517: PPUSH
10518: CALL 1230 0 1
10522: PUSH
10523: LD_INT 0
10525: PLUS
10526: PUSH
10527: LD_INT 1
10529: PPUSH
10530: LD_INT 9
10532: PPUSH
10533: CALL 1321 0 2
10537: PUSH
10538: LD_INT 1
10540: PPUSH
10541: LD_INT 9
10543: PPUSH
10544: CALL 1368 0 2
10548: ADD
10549: PUSH
10550: LD_INT 0
10552: PLUS
10553: EQUAL
10554: OR
10555: IFFALSE 10502
// DialogueOn ;
10557: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
10561: LD_EXP 9
10565: PPUSH
10566: CALL_OW 87
// Say ( JMM , D6-JMM-1 ) ;
10570: LD_EXP 9
10574: PPUSH
10575: LD_STRING D6-JMM-1
10577: PPUSH
10578: CALL_OW 88
// SayRadio ( Harisson , D6-Har-1 ) ;
10582: LD_EXP 19
10586: PPUSH
10587: LD_STRING D6-Har-1
10589: PPUSH
10590: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
10594: LD_EXP 9
10598: PPUSH
10599: LD_STRING D6-JMM-2
10601: PPUSH
10602: CALL_OW 88
// SayRadio ( Harisson , D6-Har-2 ) ;
10606: LD_EXP 19
10610: PPUSH
10611: LD_STRING D6-Har-2
10613: PPUSH
10614: CALL_OW 94
// Say ( JMM , D6-JMM-3 ) ;
10618: LD_EXP 9
10622: PPUSH
10623: LD_STRING D6-JMM-3
10625: PPUSH
10626: CALL_OW 88
// SayRadio ( Harisson , D6-Har-3 ) ;
10630: LD_EXP 19
10634: PPUSH
10635: LD_STRING D6-Har-3
10637: PPUSH
10638: CALL_OW 94
// Say ( JMM , D6-JMM-4 ) ;
10642: LD_EXP 9
10646: PPUSH
10647: LD_STRING D6-JMM-4
10649: PPUSH
10650: CALL_OW 88
// SayRadio ( Harisson , D6-Har-4 ) ;
10654: LD_EXP 19
10658: PPUSH
10659: LD_STRING D6-Har-4
10661: PPUSH
10662: CALL_OW 94
// Say ( JMM , D6-JMM-5 ) ;
10666: LD_EXP 9
10670: PPUSH
10671: LD_STRING D6-JMM-5
10673: PPUSH
10674: CALL_OW 88
// DialogueOff ;
10678: CALL_OW 7
// m1 := false ;
10682: LD_ADDR_VAR 0 4
10686: PUSH
10687: LD_INT 0
10689: ST_TO_ADDR
// m2 := false ;
10690: LD_ADDR_VAR 0 5
10694: PUSH
10695: LD_INT 0
10697: ST_TO_ADDR
// m3 := false ;
10698: LD_ADDR_VAR 0 6
10702: PUSH
10703: LD_INT 0
10705: ST_TO_ADDR
// tmp := FilterBuildings ( 3 ) ;
10706: LD_ADDR_VAR 0 3
10710: PUSH
10711: LD_INT 3
10713: PPUSH
10714: CALL 1499 0 1
10718: ST_TO_ADDR
// if tmp >= 35 then
10719: LD_VAR 0 3
10723: PUSH
10724: LD_INT 35
10726: GREATEREQUAL
10727: IFFALSE 10764
// begin AddMedal ( Destroy1 , - 1 ) ;
10729: LD_STRING Destroy1
10731: PPUSH
10732: LD_INT 1
10734: NEG
10735: PPUSH
10736: CALL_OW 101
// AddMedal ( Destroy2 , - 1 ) ;
10740: LD_STRING Destroy2
10742: PPUSH
10743: LD_INT 1
10745: NEG
10746: PPUSH
10747: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
10751: LD_STRING Destroy3
10753: PPUSH
10754: LD_INT 1
10756: NEG
10757: PPUSH
10758: CALL_OW 101
// end else
10762: GO 10875
// begin AddMedal ( Destroy1 , 1 ) ;
10764: LD_STRING Destroy1
10766: PPUSH
10767: LD_INT 1
10769: PPUSH
10770: CALL_OW 101
// m1 := true ;
10774: LD_ADDR_VAR 0 4
10778: PUSH
10779: LD_INT 1
10781: ST_TO_ADDR
// if tmp >= 25 then
10782: LD_VAR 0 3
10786: PUSH
10787: LD_INT 25
10789: GREATEREQUAL
10790: IFFALSE 10816
// begin AddMedal ( Destroy2 , - 1 ) ;
10792: LD_STRING Destroy2
10794: PPUSH
10795: LD_INT 1
10797: NEG
10798: PPUSH
10799: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
10803: LD_STRING Destroy3
10805: PPUSH
10806: LD_INT 1
10808: NEG
10809: PPUSH
10810: CALL_OW 101
// end else
10814: GO 10875
// begin AddMedal ( Destroy2 , 1 ) ;
10816: LD_STRING Destroy2
10818: PPUSH
10819: LD_INT 1
10821: PPUSH
10822: CALL_OW 101
// m2 := true ;
10826: LD_ADDR_VAR 0 5
10830: PUSH
10831: LD_INT 1
10833: ST_TO_ADDR
// if tmp >= 15 then
10834: LD_VAR 0 3
10838: PUSH
10839: LD_INT 15
10841: GREATEREQUAL
10842: IFFALSE 10857
// AddMedal ( Destroy3 , - 1 ) else
10844: LD_STRING Destroy3
10846: PPUSH
10847: LD_INT 1
10849: NEG
10850: PPUSH
10851: CALL_OW 101
10855: GO 10875
// begin AddMedal ( Destroy3 , 1 ) ;
10857: LD_STRING Destroy3
10859: PPUSH
10860: LD_INT 1
10862: PPUSH
10863: CALL_OW 101
// m3 := true ;
10867: LD_ADDR_VAR 0 6
10871: PUSH
10872: LD_INT 1
10874: ST_TO_ADDR
// end ; end ; end ; if tick <= 32 32$00 then
10875: LD_OWVAR 1
10879: PUSH
10880: LD_INT 67200
10882: LESSEQUAL
10883: IFFALSE 10892
// SetAchievement ( ACH_ASPEED_7 ) ;
10885: LD_STRING ACH_ASPEED_7
10887: PPUSH
10888: CALL_OW 543
// if m1 and m2 and m3 and Difficulty >= 3 then
10892: LD_VAR 0 4
10896: PUSH
10897: LD_VAR 0 5
10901: AND
10902: PUSH
10903: LD_VAR 0 6
10907: AND
10908: PUSH
10909: LD_OWVAR 67
10913: PUSH
10914: LD_INT 3
10916: GREATEREQUAL
10917: AND
10918: IFFALSE 10930
// SetAchievementEX ( ACH_AMER , 7 ) ;
10920: LD_STRING ACH_AMER
10922: PPUSH
10923: LD_INT 7
10925: PPUSH
10926: CALL_OW 564
// GiveMedals ( MAIN ) ;
10930: LD_STRING MAIN
10932: PPUSH
10933: CALL_OW 102
// tmp := FilterPeopleArea ( 1 , endArea ) union FilterDriversArea ( 1 , endArea ) ;
10937: LD_ADDR_VAR 0 3
10941: PUSH
10942: LD_INT 1
10944: PPUSH
10945: LD_INT 9
10947: PPUSH
10948: CALL 1321 0 2
10952: PUSH
10953: LD_INT 1
10955: PPUSH
10956: LD_INT 9
10958: PPUSH
10959: CALL 1368 0 2
10963: UNION
10964: ST_TO_ADDR
// RewardPeople ( tmp ) ;
10965: LD_VAR 0 3
10969: PPUSH
10970: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
10974: LD_EXP 9
10978: PPUSH
10979: LD_EXP 3
10983: PUSH
10984: LD_STRING JMM
10986: STR
10987: PPUSH
10988: CALL_OW 38
// if Brown in tmp then
10992: LD_EXP 10
10996: PUSH
10997: LD_VAR 0 3
11001: IN
11002: IFFALSE 11022
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
11004: LD_EXP 10
11008: PPUSH
11009: LD_EXP 3
11013: PUSH
11014: LD_STRING Brown
11016: STR
11017: PPUSH
11018: CALL_OW 38
// if Donaldson in tmp then
11022: LD_EXP 11
11026: PUSH
11027: LD_VAR 0 3
11031: IN
11032: IFFALSE 11052
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
11034: LD_EXP 11
11038: PPUSH
11039: LD_EXP 3
11043: PUSH
11044: LD_STRING Donaldson
11046: STR
11047: PPUSH
11048: CALL_OW 38
// if Bobby in tmp then
11052: LD_EXP 12
11056: PUSH
11057: LD_VAR 0 3
11061: IN
11062: IFFALSE 11082
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
11064: LD_EXP 12
11068: PPUSH
11069: LD_EXP 3
11073: PUSH
11074: LD_STRING Bobby
11076: STR
11077: PPUSH
11078: CALL_OW 38
// if Cyrus in tmp then
11082: LD_EXP 13
11086: PUSH
11087: LD_VAR 0 3
11091: IN
11092: IFFALSE 11112
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
11094: LD_EXP 13
11098: PPUSH
11099: LD_EXP 3
11103: PUSH
11104: LD_STRING Cyrus
11106: STR
11107: PPUSH
11108: CALL_OW 38
// if Lisa in tmp then
11112: LD_EXP 14
11116: PUSH
11117: LD_VAR 0 3
11121: IN
11122: IFFALSE 11142
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
11124: LD_EXP 14
11128: PPUSH
11129: LD_EXP 3
11133: PUSH
11134: LD_STRING Lisa
11136: STR
11137: PPUSH
11138: CALL_OW 38
// if Frank in tmp then
11142: LD_EXP 15
11146: PUSH
11147: LD_VAR 0 3
11151: IN
11152: IFFALSE 11172
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
11154: LD_EXP 15
11158: PPUSH
11159: LD_EXP 3
11163: PUSH
11164: LD_STRING Frank
11166: STR
11167: PPUSH
11168: CALL_OW 38
// if Gladstone in tmp then
11172: LD_EXP 16
11176: PUSH
11177: LD_VAR 0 3
11181: IN
11182: IFFALSE 11202
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
11184: LD_EXP 16
11188: PPUSH
11189: LD_EXP 3
11193: PUSH
11194: LD_STRING Gladstone
11196: STR
11197: PPUSH
11198: CALL_OW 38
// if Khatam in tmp then
11202: LD_EXP 17
11206: PUSH
11207: LD_VAR 0 3
11211: IN
11212: IFFALSE 11232
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
11214: LD_EXP 17
11218: PPUSH
11219: LD_EXP 3
11223: PUSH
11224: LD_STRING Khatam
11226: STR
11227: PPUSH
11228: CALL_OW 38
// if Kikuchi in tmp then
11232: LD_EXP 18
11236: PUSH
11237: LD_VAR 0 3
11241: IN
11242: IFFALSE 11262
// SaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
11244: LD_EXP 18
11248: PPUSH
11249: LD_EXP 3
11253: PUSH
11254: LD_STRING Kikuchi
11256: STR
11257: PPUSH
11258: CALL_OW 38
// SaveCharacters ( tmp diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] , mission_prefix & others ) ;
11262: LD_VAR 0 3
11266: PUSH
11267: LD_EXP 9
11271: PUSH
11272: LD_EXP 10
11276: PUSH
11277: LD_EXP 11
11281: PUSH
11282: LD_EXP 12
11286: PUSH
11287: LD_EXP 13
11291: PUSH
11292: LD_EXP 14
11296: PUSH
11297: LD_EXP 15
11301: PUSH
11302: LD_EXP 16
11306: PUSH
11307: LD_EXP 18
11311: PUSH
11312: LD_EXP 17
11316: PUSH
11317: EMPTY
11318: LIST
11319: LIST
11320: LIST
11321: LIST
11322: LIST
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: DIFF
11329: PPUSH
11330: LD_EXP 3
11334: PUSH
11335: LD_STRING others
11337: STR
11338: PPUSH
11339: CALL_OW 38
// SaveVariable ( tick , 07_time ) ;
11343: LD_OWVAR 1
11347: PPUSH
11348: LD_STRING 07_time
11350: PPUSH
11351: CALL_OW 39
// tmp := [ ] ;
11355: LD_ADDR_VAR 0 3
11359: PUSH
11360: EMPTY
11361: ST_TO_ADDR
// for i in FilterUnitsInArea ( endArea , [ [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] ] ] ) do
11362: LD_ADDR_VAR 0 2
11366: PUSH
11367: LD_INT 9
11369: PPUSH
11370: LD_INT 22
11372: PUSH
11373: LD_INT 1
11375: PUSH
11376: EMPTY
11377: LIST
11378: LIST
11379: PUSH
11380: LD_INT 23
11382: PUSH
11383: LD_INT 1
11385: PUSH
11386: EMPTY
11387: LIST
11388: LIST
11389: PUSH
11390: LD_INT 21
11392: PUSH
11393: LD_INT 2
11395: PUSH
11396: EMPTY
11397: LIST
11398: LIST
11399: PUSH
11400: EMPTY
11401: LIST
11402: LIST
11403: LIST
11404: PUSH
11405: EMPTY
11406: LIST
11407: PPUSH
11408: CALL_OW 70
11412: PUSH
11413: FOR_IN
11414: IFFALSE 11475
// tmp := tmp ^ [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ;
11416: LD_ADDR_VAR 0 3
11420: PUSH
11421: LD_VAR 0 3
11425: PUSH
11426: LD_VAR 0 2
11430: PPUSH
11431: CALL_OW 265
11435: PUSH
11436: LD_VAR 0 2
11440: PPUSH
11441: CALL_OW 262
11445: PUSH
11446: LD_VAR 0 2
11450: PPUSH
11451: CALL_OW 263
11455: PUSH
11456: LD_VAR 0 2
11460: PPUSH
11461: CALL_OW 264
11465: PUSH
11466: EMPTY
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: ADD
11472: ST_TO_ADDR
11473: GO 11413
11475: POP
11476: POP
// SaveVariable ( tmp , 07_vehicles ) ;
11477: LD_VAR 0 3
11481: PPUSH
11482: LD_STRING 07_vehicles
11484: PPUSH
11485: CALL_OW 39
// YouWin ;
11489: CALL_OW 103
// end ; end_of_file
11493: PPOPN 6
11495: END
// on UnitDestroyed ( un ) do begin if un = JMM then
11496: LD_VAR 0 1
11500: PUSH
11501: LD_EXP 9
11505: EQUAL
11506: IFFALSE 11515
// YouLost ( JMM ) ;
11508: LD_STRING JMM
11510: PPUSH
11511: CALL_OW 104
// if GetType ( un ) = unit_building then
11515: LD_VAR 0 1
11519: PPUSH
11520: CALL_OW 247
11524: PUSH
11525: LD_INT 3
11527: EQUAL
11528: IFFALSE 11544
// buildings_counter := buildings_counter + 1 ;
11530: LD_ADDR_EXP 4
11534: PUSH
11535: LD_EXP 4
11539: PUSH
11540: LD_INT 1
11542: PLUS
11543: ST_TO_ADDR
// if un in FilterUnitsInArea ( baseArea , [ f_or , [ f_btype , b_turret ] , [ f_btype , b_bunker ] ] ) then
11544: LD_VAR 0 1
11548: PUSH
11549: LD_INT 6
11551: PPUSH
11552: LD_INT 2
11554: PUSH
11555: LD_INT 30
11557: PUSH
11558: LD_INT 33
11560: PUSH
11561: EMPTY
11562: LIST
11563: LIST
11564: PUSH
11565: LD_INT 30
11567: PUSH
11568: LD_INT 32
11570: PUSH
11571: EMPTY
11572: LIST
11573: LIST
11574: PUSH
11575: EMPTY
11576: LIST
11577: LIST
11578: LIST
11579: PPUSH
11580: CALL_OW 70
11584: IN
11585: IFFALSE 11644
// ru_rebuild_list := ru_rebuild_list ^ [ GetBType ( un ) , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ;
11587: LD_ADDR_EXP 20
11591: PUSH
11592: LD_EXP 20
11596: PUSH
11597: LD_VAR 0 1
11601: PPUSH
11602: CALL_OW 266
11606: PUSH
11607: LD_VAR 0 1
11611: PPUSH
11612: CALL_OW 250
11616: PUSH
11617: LD_VAR 0 1
11621: PPUSH
11622: CALL_OW 251
11626: PUSH
11627: LD_VAR 0 1
11631: PPUSH
11632: CALL_OW 254
11636: PUSH
11637: EMPTY
11638: LIST
11639: LIST
11640: LIST
11641: LIST
11642: ADD
11643: ST_TO_ADDR
// if un = ru_dep_main then
11644: LD_VAR 0 1
11648: PUSH
11649: LD_INT 16
11651: EQUAL
11652: IFFALSE 11661
// ChangeMissionObjectives ( M1a ) ;
11654: LD_STRING M1a
11656: PPUSH
11657: CALL_OW 337
// if GetType ( un ) = unit_human and GetSide ( un ) = 3 then
11661: LD_VAR 0 1
11665: PPUSH
11666: CALL_OW 247
11670: PUSH
11671: LD_INT 1
11673: EQUAL
11674: PUSH
11675: LD_VAR 0 1
11679: PPUSH
11680: CALL_OW 255
11684: PUSH
11685: LD_INT 3
11687: EQUAL
11688: AND
11689: IFFALSE 11705
// kill_counter := kill_counter + 1 ;
11691: LD_ADDR_EXP 8
11695: PUSH
11696: LD_EXP 8
11700: PUSH
11701: LD_INT 1
11703: PLUS
11704: ST_TO_ADDR
// end ;
11705: PPOPN 1
11707: END
// on UnitGoesToRed ( un ) do begin if GetBType ( un ) = b_bunker and GetTag ( un ) = 7 then
11708: LD_VAR 0 1
11712: PPUSH
11713: CALL_OW 266
11717: PUSH
11718: LD_INT 32
11720: EQUAL
11721: PUSH
11722: LD_VAR 0 1
11726: PPUSH
11727: CALL_OW 110
11731: PUSH
11732: LD_INT 7
11734: EQUAL
11735: AND
11736: IFFALSE 11750
// SetTag ( un , 0 ) ;
11738: LD_VAR 0 1
11742: PPUSH
11743: LD_INT 0
11745: PPUSH
11746: CALL_OW 109
// end ;
11750: PPOPN 1
11752: END
// on BuildingStarted ( b , builder ) do var i ;
11753: LD_INT 0
11755: PPUSH
// begin if GetSide ( b ) = 3 then
11756: LD_VAR 0 1
11760: PPUSH
11761: CALL_OW 255
11765: PUSH
11766: LD_INT 3
11768: EQUAL
11769: IFFALSE 11809
// for i = 1 to 4 do
11771: LD_ADDR_VAR 0 3
11775: PUSH
11776: DOUBLE
11777: LD_INT 1
11779: DEC
11780: ST_TO_ADDR
11781: LD_INT 4
11783: PUSH
11784: FOR_TO
11785: IFFALSE 11807
// ru_rebuild_list := Delete ( ru_rebuild_list , 1 ) ;
11787: LD_ADDR_EXP 20
11791: PUSH
11792: LD_EXP 20
11796: PPUSH
11797: LD_INT 1
11799: PPUSH
11800: CALL_OW 3
11804: ST_TO_ADDR
11805: GO 11784
11807: POP
11808: POP
// end ;
11809: PPOPN 3
11811: END
// on BuildingComplete ( b ) do if GetBType ( b ) in [ b_bunker , b_turret ] then
11812: LD_VAR 0 1
11816: PPUSH
11817: CALL_OW 266
11821: PUSH
11822: LD_INT 32
11824: PUSH
11825: LD_INT 33
11827: PUSH
11828: EMPTY
11829: LIST
11830: LIST
11831: IN
11832: IFFALSE 11846
// ComPlaceWeapon ( b , ru_gatling_gun ) ;
11834: LD_VAR 0 1
11838: PPUSH
11839: LD_INT 43
11841: PPUSH
11842: CALL_OW 148
11846: PPOPN 1
11848: END
// on LeaveBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
11849: LD_VAR 0 1
11853: PUSH
11854: LD_INT 22
11856: PUSH
11857: LD_INT 3
11859: PUSH
11860: EMPTY
11861: LIST
11862: LIST
11863: PUSH
11864: LD_INT 2
11866: PUSH
11867: LD_INT 30
11869: PUSH
11870: LD_INT 31
11872: PUSH
11873: EMPTY
11874: LIST
11875: LIST
11876: PUSH
11877: LD_INT 30
11879: PUSH
11880: LD_INT 32
11882: PUSH
11883: EMPTY
11884: LIST
11885: LIST
11886: PUSH
11887: EMPTY
11888: LIST
11889: LIST
11890: LIST
11891: PUSH
11892: EMPTY
11893: LIST
11894: LIST
11895: PPUSH
11896: CALL_OW 69
11900: IN
11901: IFFALSE 11923
// GoToAnotherTower ( un , b , 143 , 143 ) ;
11903: LD_VAR 0 2
11907: PPUSH
11908: LD_VAR 0 1
11912: PPUSH
11913: LD_INT 143
11915: PPUSH
11916: LD_INT 143
11918: PPUSH
11919: CALL 830 0 4
// end ;
11923: PPOPN 2
11925: END
// on EnterBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) then
11926: LD_VAR 0 1
11930: PUSH
11931: LD_INT 22
11933: PUSH
11934: LD_INT 3
11936: PUSH
11937: EMPTY
11938: LIST
11939: LIST
11940: PUSH
11941: LD_INT 30
11943: PUSH
11944: LD_INT 32
11946: PUSH
11947: EMPTY
11948: LIST
11949: LIST
11950: PUSH
11951: EMPTY
11952: LIST
11953: LIST
11954: PPUSH
11955: CALL_OW 69
11959: IN
11960: IFFALSE 11974
// SetTag ( b , 0 ) ;
11962: LD_VAR 0 1
11966: PPUSH
11967: LD_INT 0
11969: PPUSH
11970: CALL_OW 109
// end ; end_of_file
11974: PPOPN 2
11976: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
11977: LD_INT 0
11979: PPUSH
// ar_miner := 81 ;
11980: LD_ADDR_EXP 28
11984: PUSH
11985: LD_INT 81
11987: ST_TO_ADDR
// ar_crane := 88 ;
11988: LD_ADDR_EXP 27
11992: PUSH
11993: LD_INT 88
11995: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
11996: LD_ADDR_EXP 22
12000: PUSH
12001: LD_INT 89
12003: ST_TO_ADDR
// us_hack := 99 ;
12004: LD_ADDR_EXP 23
12008: PUSH
12009: LD_INT 99
12011: ST_TO_ADDR
// us_artillery := 97 ;
12012: LD_ADDR_EXP 24
12016: PUSH
12017: LD_INT 97
12019: ST_TO_ADDR
// ar_bio_bomb := 91 ;
12020: LD_ADDR_EXP 25
12024: PUSH
12025: LD_INT 91
12027: ST_TO_ADDR
// ar_mortar := 92 ;
12028: LD_ADDR_EXP 26
12032: PUSH
12033: LD_INT 92
12035: ST_TO_ADDR
// ru_radar := 98 ;
12036: LD_ADDR_EXP 21
12040: PUSH
12041: LD_INT 98
12043: ST_TO_ADDR
// tech_Artillery := 80 ;
12044: LD_ADDR_EXP 29
12048: PUSH
12049: LD_INT 80
12051: ST_TO_ADDR
// tech_RadMat := 81 ;
12052: LD_ADDR_EXP 30
12056: PUSH
12057: LD_INT 81
12059: ST_TO_ADDR
// tech_BasicTools := 82 ;
12060: LD_ADDR_EXP 31
12064: PUSH
12065: LD_INT 82
12067: ST_TO_ADDR
// tech_Cargo := 83 ;
12068: LD_ADDR_EXP 32
12072: PUSH
12073: LD_INT 83
12075: ST_TO_ADDR
// tech_Track := 84 ;
12076: LD_ADDR_EXP 33
12080: PUSH
12081: LD_INT 84
12083: ST_TO_ADDR
// tech_Crane := 85 ;
12084: LD_ADDR_EXP 34
12088: PUSH
12089: LD_INT 85
12091: ST_TO_ADDR
// tech_Bulldozer := 86 ;
12092: LD_ADDR_EXP 35
12096: PUSH
12097: LD_INT 86
12099: ST_TO_ADDR
// tech_Hovercraft := 87 ;
12100: LD_ADDR_EXP 36
12104: PUSH
12105: LD_INT 87
12107: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
12108: LD_ADDR_EXP 37
12112: PUSH
12113: LD_INT 88
12115: ST_TO_ADDR
// class_mastodont := 31 ;
12116: LD_ADDR_EXP 38
12120: PUSH
12121: LD_INT 31
12123: ST_TO_ADDR
// class_horse := 21 ;
12124: LD_ADDR_EXP 39
12128: PUSH
12129: LD_INT 21
12131: ST_TO_ADDR
// end ;
12132: LD_VAR 0 1
12136: RET
// every 1 do
12137: GO 12139
12139: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
12140: CALL 11977 0 0
12144: END
// every 0 0$1 do
12145: GO 12147
12147: DISABLE
// begin enable ;
12148: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
12149: LD_STRING updateTimer(
12151: PUSH
12152: LD_OWVAR 1
12156: STR
12157: PUSH
12158: LD_STRING );
12160: STR
12161: PPUSH
12162: CALL_OW 559
// end ;
12166: END
// on MapStart ( p ) do begin if streamModeActive then
12167: LD_EXP 40
12171: IFFALSE 12180
// DefineStreamItems ( true ) ;
12173: LD_INT 1
12175: PPUSH
12176: CALL 13828 0 1
// UpdateFactoryWaypoints ( ) ;
12180: CALL 27412 0 0
// end ;
12184: PPOPN 1
12186: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
12187: LD_INT 0
12189: PPUSH
// if p2 = 100 then
12190: LD_VAR 0 2
12194: PUSH
12195: LD_INT 100
12197: EQUAL
12198: IFFALSE 13201
// begin if not StreamModeActive then
12200: LD_EXP 40
12204: NOT
12205: IFFALSE 12215
// StreamModeActive := true ;
12207: LD_ADDR_EXP 40
12211: PUSH
12212: LD_INT 1
12214: ST_TO_ADDR
// if p3 = 0 then
12215: LD_VAR 0 3
12219: PUSH
12220: LD_INT 0
12222: EQUAL
12223: IFFALSE 12229
// InitStreamMode ;
12225: CALL 13364 0 0
// if p3 = 1 then
12229: LD_VAR 0 3
12233: PUSH
12234: LD_INT 1
12236: EQUAL
12237: IFFALSE 12247
// sRocket := true ;
12239: LD_ADDR_EXP 45
12243: PUSH
12244: LD_INT 1
12246: ST_TO_ADDR
// if p3 = 2 then
12247: LD_VAR 0 3
12251: PUSH
12252: LD_INT 2
12254: EQUAL
12255: IFFALSE 12265
// sSpeed := true ;
12257: LD_ADDR_EXP 44
12261: PUSH
12262: LD_INT 1
12264: ST_TO_ADDR
// if p3 = 3 then
12265: LD_VAR 0 3
12269: PUSH
12270: LD_INT 3
12272: EQUAL
12273: IFFALSE 12283
// sEngine := true ;
12275: LD_ADDR_EXP 46
12279: PUSH
12280: LD_INT 1
12282: ST_TO_ADDR
// if p3 = 4 then
12283: LD_VAR 0 3
12287: PUSH
12288: LD_INT 4
12290: EQUAL
12291: IFFALSE 12301
// sSpec := true ;
12293: LD_ADDR_EXP 43
12297: PUSH
12298: LD_INT 1
12300: ST_TO_ADDR
// if p3 = 5 then
12301: LD_VAR 0 3
12305: PUSH
12306: LD_INT 5
12308: EQUAL
12309: IFFALSE 12319
// sLevel := true ;
12311: LD_ADDR_EXP 47
12315: PUSH
12316: LD_INT 1
12318: ST_TO_ADDR
// if p3 = 6 then
12319: LD_VAR 0 3
12323: PUSH
12324: LD_INT 6
12326: EQUAL
12327: IFFALSE 12337
// sArmoury := true ;
12329: LD_ADDR_EXP 48
12333: PUSH
12334: LD_INT 1
12336: ST_TO_ADDR
// if p3 = 7 then
12337: LD_VAR 0 3
12341: PUSH
12342: LD_INT 7
12344: EQUAL
12345: IFFALSE 12355
// sRadar := true ;
12347: LD_ADDR_EXP 49
12351: PUSH
12352: LD_INT 1
12354: ST_TO_ADDR
// if p3 = 8 then
12355: LD_VAR 0 3
12359: PUSH
12360: LD_INT 8
12362: EQUAL
12363: IFFALSE 12373
// sBunker := true ;
12365: LD_ADDR_EXP 50
12369: PUSH
12370: LD_INT 1
12372: ST_TO_ADDR
// if p3 = 9 then
12373: LD_VAR 0 3
12377: PUSH
12378: LD_INT 9
12380: EQUAL
12381: IFFALSE 12391
// sHack := true ;
12383: LD_ADDR_EXP 51
12387: PUSH
12388: LD_INT 1
12390: ST_TO_ADDR
// if p3 = 10 then
12391: LD_VAR 0 3
12395: PUSH
12396: LD_INT 10
12398: EQUAL
12399: IFFALSE 12409
// sFire := true ;
12401: LD_ADDR_EXP 52
12405: PUSH
12406: LD_INT 1
12408: ST_TO_ADDR
// if p3 = 11 then
12409: LD_VAR 0 3
12413: PUSH
12414: LD_INT 11
12416: EQUAL
12417: IFFALSE 12427
// sRefresh := true ;
12419: LD_ADDR_EXP 53
12423: PUSH
12424: LD_INT 1
12426: ST_TO_ADDR
// if p3 = 12 then
12427: LD_VAR 0 3
12431: PUSH
12432: LD_INT 12
12434: EQUAL
12435: IFFALSE 12445
// sExp := true ;
12437: LD_ADDR_EXP 54
12441: PUSH
12442: LD_INT 1
12444: ST_TO_ADDR
// if p3 = 13 then
12445: LD_VAR 0 3
12449: PUSH
12450: LD_INT 13
12452: EQUAL
12453: IFFALSE 12463
// sDepot := true ;
12455: LD_ADDR_EXP 55
12459: PUSH
12460: LD_INT 1
12462: ST_TO_ADDR
// if p3 = 14 then
12463: LD_VAR 0 3
12467: PUSH
12468: LD_INT 14
12470: EQUAL
12471: IFFALSE 12481
// sFlag := true ;
12473: LD_ADDR_EXP 56
12477: PUSH
12478: LD_INT 1
12480: ST_TO_ADDR
// if p3 = 15 then
12481: LD_VAR 0 3
12485: PUSH
12486: LD_INT 15
12488: EQUAL
12489: IFFALSE 12499
// sKamikadze := true ;
12491: LD_ADDR_EXP 64
12495: PUSH
12496: LD_INT 1
12498: ST_TO_ADDR
// if p3 = 16 then
12499: LD_VAR 0 3
12503: PUSH
12504: LD_INT 16
12506: EQUAL
12507: IFFALSE 12517
// sTroll := true ;
12509: LD_ADDR_EXP 65
12513: PUSH
12514: LD_INT 1
12516: ST_TO_ADDR
// if p3 = 17 then
12517: LD_VAR 0 3
12521: PUSH
12522: LD_INT 17
12524: EQUAL
12525: IFFALSE 12535
// sSlow := true ;
12527: LD_ADDR_EXP 66
12531: PUSH
12532: LD_INT 1
12534: ST_TO_ADDR
// if p3 = 18 then
12535: LD_VAR 0 3
12539: PUSH
12540: LD_INT 18
12542: EQUAL
12543: IFFALSE 12553
// sLack := true ;
12545: LD_ADDR_EXP 67
12549: PUSH
12550: LD_INT 1
12552: ST_TO_ADDR
// if p3 = 19 then
12553: LD_VAR 0 3
12557: PUSH
12558: LD_INT 19
12560: EQUAL
12561: IFFALSE 12571
// sTank := true ;
12563: LD_ADDR_EXP 69
12567: PUSH
12568: LD_INT 1
12570: ST_TO_ADDR
// if p3 = 20 then
12571: LD_VAR 0 3
12575: PUSH
12576: LD_INT 20
12578: EQUAL
12579: IFFALSE 12589
// sRemote := true ;
12581: LD_ADDR_EXP 70
12585: PUSH
12586: LD_INT 1
12588: ST_TO_ADDR
// if p3 = 21 then
12589: LD_VAR 0 3
12593: PUSH
12594: LD_INT 21
12596: EQUAL
12597: IFFALSE 12607
// sPowell := true ;
12599: LD_ADDR_EXP 71
12603: PUSH
12604: LD_INT 1
12606: ST_TO_ADDR
// if p3 = 22 then
12607: LD_VAR 0 3
12611: PUSH
12612: LD_INT 22
12614: EQUAL
12615: IFFALSE 12625
// sTeleport := true ;
12617: LD_ADDR_EXP 74
12621: PUSH
12622: LD_INT 1
12624: ST_TO_ADDR
// if p3 = 23 then
12625: LD_VAR 0 3
12629: PUSH
12630: LD_INT 23
12632: EQUAL
12633: IFFALSE 12643
// sOilTower := true ;
12635: LD_ADDR_EXP 76
12639: PUSH
12640: LD_INT 1
12642: ST_TO_ADDR
// if p3 = 24 then
12643: LD_VAR 0 3
12647: PUSH
12648: LD_INT 24
12650: EQUAL
12651: IFFALSE 12661
// sShovel := true ;
12653: LD_ADDR_EXP 77
12657: PUSH
12658: LD_INT 1
12660: ST_TO_ADDR
// if p3 = 25 then
12661: LD_VAR 0 3
12665: PUSH
12666: LD_INT 25
12668: EQUAL
12669: IFFALSE 12679
// sSheik := true ;
12671: LD_ADDR_EXP 78
12675: PUSH
12676: LD_INT 1
12678: ST_TO_ADDR
// if p3 = 26 then
12679: LD_VAR 0 3
12683: PUSH
12684: LD_INT 26
12686: EQUAL
12687: IFFALSE 12697
// sEarthquake := true ;
12689: LD_ADDR_EXP 80
12693: PUSH
12694: LD_INT 1
12696: ST_TO_ADDR
// if p3 = 27 then
12697: LD_VAR 0 3
12701: PUSH
12702: LD_INT 27
12704: EQUAL
12705: IFFALSE 12715
// sAI := true ;
12707: LD_ADDR_EXP 81
12711: PUSH
12712: LD_INT 1
12714: ST_TO_ADDR
// if p3 = 28 then
12715: LD_VAR 0 3
12719: PUSH
12720: LD_INT 28
12722: EQUAL
12723: IFFALSE 12733
// sCargo := true ;
12725: LD_ADDR_EXP 84
12729: PUSH
12730: LD_INT 1
12732: ST_TO_ADDR
// if p3 = 29 then
12733: LD_VAR 0 3
12737: PUSH
12738: LD_INT 29
12740: EQUAL
12741: IFFALSE 12751
// sDLaser := true ;
12743: LD_ADDR_EXP 85
12747: PUSH
12748: LD_INT 1
12750: ST_TO_ADDR
// if p3 = 30 then
12751: LD_VAR 0 3
12755: PUSH
12756: LD_INT 30
12758: EQUAL
12759: IFFALSE 12769
// sExchange := true ;
12761: LD_ADDR_EXP 86
12765: PUSH
12766: LD_INT 1
12768: ST_TO_ADDR
// if p3 = 31 then
12769: LD_VAR 0 3
12773: PUSH
12774: LD_INT 31
12776: EQUAL
12777: IFFALSE 12787
// sFac := true ;
12779: LD_ADDR_EXP 87
12783: PUSH
12784: LD_INT 1
12786: ST_TO_ADDR
// if p3 = 32 then
12787: LD_VAR 0 3
12791: PUSH
12792: LD_INT 32
12794: EQUAL
12795: IFFALSE 12805
// sPower := true ;
12797: LD_ADDR_EXP 88
12801: PUSH
12802: LD_INT 1
12804: ST_TO_ADDR
// if p3 = 33 then
12805: LD_VAR 0 3
12809: PUSH
12810: LD_INT 33
12812: EQUAL
12813: IFFALSE 12823
// sRandom := true ;
12815: LD_ADDR_EXP 89
12819: PUSH
12820: LD_INT 1
12822: ST_TO_ADDR
// if p3 = 34 then
12823: LD_VAR 0 3
12827: PUSH
12828: LD_INT 34
12830: EQUAL
12831: IFFALSE 12841
// sShield := true ;
12833: LD_ADDR_EXP 90
12837: PUSH
12838: LD_INT 1
12840: ST_TO_ADDR
// if p3 = 35 then
12841: LD_VAR 0 3
12845: PUSH
12846: LD_INT 35
12848: EQUAL
12849: IFFALSE 12859
// sTime := true ;
12851: LD_ADDR_EXP 91
12855: PUSH
12856: LD_INT 1
12858: ST_TO_ADDR
// if p3 = 36 then
12859: LD_VAR 0 3
12863: PUSH
12864: LD_INT 36
12866: EQUAL
12867: IFFALSE 12877
// sTools := true ;
12869: LD_ADDR_EXP 92
12873: PUSH
12874: LD_INT 1
12876: ST_TO_ADDR
// if p3 = 101 then
12877: LD_VAR 0 3
12881: PUSH
12882: LD_INT 101
12884: EQUAL
12885: IFFALSE 12895
// sSold := true ;
12887: LD_ADDR_EXP 57
12891: PUSH
12892: LD_INT 1
12894: ST_TO_ADDR
// if p3 = 102 then
12895: LD_VAR 0 3
12899: PUSH
12900: LD_INT 102
12902: EQUAL
12903: IFFALSE 12913
// sDiff := true ;
12905: LD_ADDR_EXP 58
12909: PUSH
12910: LD_INT 1
12912: ST_TO_ADDR
// if p3 = 103 then
12913: LD_VAR 0 3
12917: PUSH
12918: LD_INT 103
12920: EQUAL
12921: IFFALSE 12931
// sFog := true ;
12923: LD_ADDR_EXP 61
12927: PUSH
12928: LD_INT 1
12930: ST_TO_ADDR
// if p3 = 104 then
12931: LD_VAR 0 3
12935: PUSH
12936: LD_INT 104
12938: EQUAL
12939: IFFALSE 12949
// sReset := true ;
12941: LD_ADDR_EXP 62
12945: PUSH
12946: LD_INT 1
12948: ST_TO_ADDR
// if p3 = 105 then
12949: LD_VAR 0 3
12953: PUSH
12954: LD_INT 105
12956: EQUAL
12957: IFFALSE 12967
// sSun := true ;
12959: LD_ADDR_EXP 63
12963: PUSH
12964: LD_INT 1
12966: ST_TO_ADDR
// if p3 = 106 then
12967: LD_VAR 0 3
12971: PUSH
12972: LD_INT 106
12974: EQUAL
12975: IFFALSE 12985
// sTiger := true ;
12977: LD_ADDR_EXP 59
12981: PUSH
12982: LD_INT 1
12984: ST_TO_ADDR
// if p3 = 107 then
12985: LD_VAR 0 3
12989: PUSH
12990: LD_INT 107
12992: EQUAL
12993: IFFALSE 13003
// sBomb := true ;
12995: LD_ADDR_EXP 60
12999: PUSH
13000: LD_INT 1
13002: ST_TO_ADDR
// if p3 = 108 then
13003: LD_VAR 0 3
13007: PUSH
13008: LD_INT 108
13010: EQUAL
13011: IFFALSE 13021
// sWound := true ;
13013: LD_ADDR_EXP 68
13017: PUSH
13018: LD_INT 1
13020: ST_TO_ADDR
// if p3 = 109 then
13021: LD_VAR 0 3
13025: PUSH
13026: LD_INT 109
13028: EQUAL
13029: IFFALSE 13039
// sBetray := true ;
13031: LD_ADDR_EXP 72
13035: PUSH
13036: LD_INT 1
13038: ST_TO_ADDR
// if p3 = 110 then
13039: LD_VAR 0 3
13043: PUSH
13044: LD_INT 110
13046: EQUAL
13047: IFFALSE 13057
// sContamin := true ;
13049: LD_ADDR_EXP 73
13053: PUSH
13054: LD_INT 1
13056: ST_TO_ADDR
// if p3 = 111 then
13057: LD_VAR 0 3
13061: PUSH
13062: LD_INT 111
13064: EQUAL
13065: IFFALSE 13075
// sOil := true ;
13067: LD_ADDR_EXP 75
13071: PUSH
13072: LD_INT 1
13074: ST_TO_ADDR
// if p3 = 112 then
13075: LD_VAR 0 3
13079: PUSH
13080: LD_INT 112
13082: EQUAL
13083: IFFALSE 13093
// sStu := true ;
13085: LD_ADDR_EXP 79
13089: PUSH
13090: LD_INT 1
13092: ST_TO_ADDR
// if p3 = 113 then
13093: LD_VAR 0 3
13097: PUSH
13098: LD_INT 113
13100: EQUAL
13101: IFFALSE 13111
// sBazooka := true ;
13103: LD_ADDR_EXP 82
13107: PUSH
13108: LD_INT 1
13110: ST_TO_ADDR
// if p3 = 114 then
13111: LD_VAR 0 3
13115: PUSH
13116: LD_INT 114
13118: EQUAL
13119: IFFALSE 13129
// sMortar := true ;
13121: LD_ADDR_EXP 83
13125: PUSH
13126: LD_INT 1
13128: ST_TO_ADDR
// if p3 = 115 then
13129: LD_VAR 0 3
13133: PUSH
13134: LD_INT 115
13136: EQUAL
13137: IFFALSE 13147
// sRanger := true ;
13139: LD_ADDR_EXP 93
13143: PUSH
13144: LD_INT 1
13146: ST_TO_ADDR
// if p3 = 116 then
13147: LD_VAR 0 3
13151: PUSH
13152: LD_INT 116
13154: EQUAL
13155: IFFALSE 13165
// sComputer := true ;
13157: LD_ADDR_EXP 94
13161: PUSH
13162: LD_INT 1
13164: ST_TO_ADDR
// if p3 = 117 then
13165: LD_VAR 0 3
13169: PUSH
13170: LD_INT 117
13172: EQUAL
13173: IFFALSE 13183
// s30 := true ;
13175: LD_ADDR_EXP 95
13179: PUSH
13180: LD_INT 1
13182: ST_TO_ADDR
// if p3 = 118 then
13183: LD_VAR 0 3
13187: PUSH
13188: LD_INT 118
13190: EQUAL
13191: IFFALSE 13201
// s60 := true ;
13193: LD_ADDR_EXP 96
13197: PUSH
13198: LD_INT 1
13200: ST_TO_ADDR
// end ; if p2 = 101 then
13201: LD_VAR 0 2
13205: PUSH
13206: LD_INT 101
13208: EQUAL
13209: IFFALSE 13337
// begin case p3 of 1 :
13211: LD_VAR 0 3
13215: PUSH
13216: LD_INT 1
13218: DOUBLE
13219: EQUAL
13220: IFTRUE 13224
13222: GO 13231
13224: POP
// hHackUnlimitedResources ; 2 :
13225: CALL 25435 0 0
13229: GO 13337
13231: LD_INT 2
13233: DOUBLE
13234: EQUAL
13235: IFTRUE 13239
13237: GO 13246
13239: POP
// hHackSetLevel10 ; 3 :
13240: CALL 25568 0 0
13244: GO 13337
13246: LD_INT 3
13248: DOUBLE
13249: EQUAL
13250: IFTRUE 13254
13252: GO 13261
13254: POP
// hHackSetLevel10YourUnits ; 4 :
13255: CALL 25653 0 0
13259: GO 13337
13261: LD_INT 4
13263: DOUBLE
13264: EQUAL
13265: IFTRUE 13269
13267: GO 13276
13269: POP
// hHackInvincible ; 5 :
13270: CALL 26101 0 0
13274: GO 13337
13276: LD_INT 5
13278: DOUBLE
13279: EQUAL
13280: IFTRUE 13284
13282: GO 13291
13284: POP
// hHackInvisible ; 6 :
13285: CALL 26212 0 0
13289: GO 13337
13291: LD_INT 6
13293: DOUBLE
13294: EQUAL
13295: IFTRUE 13299
13297: GO 13306
13299: POP
// hHackChangeYourSide ; 7 :
13300: CALL 26269 0 0
13304: GO 13337
13306: LD_INT 7
13308: DOUBLE
13309: EQUAL
13310: IFTRUE 13314
13312: GO 13321
13314: POP
// hHackChangeUnitSide ; 8 :
13315: CALL 26311 0 0
13319: GO 13337
13321: LD_INT 8
13323: DOUBLE
13324: EQUAL
13325: IFTRUE 13329
13327: GO 13336
13329: POP
// hHackFog ; end ;
13330: CALL 26412 0 0
13334: GO 13337
13336: POP
// end ; end ;
13337: LD_VAR 0 7
13341: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
13342: GO 13344
13344: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
13345: LD_STRING initStreamRollete();
13347: PPUSH
13348: CALL_OW 559
// InitStreamMode ;
13352: CALL 13364 0 0
// DefineStreamItems ( false ) ;
13356: LD_INT 0
13358: PPUSH
13359: CALL 13828 0 1
// end ;
13363: END
// function InitStreamMode ; begin
13364: LD_INT 0
13366: PPUSH
// streamModeActive := false ;
13367: LD_ADDR_EXP 40
13371: PUSH
13372: LD_INT 0
13374: ST_TO_ADDR
// normalCounter := 36 ;
13375: LD_ADDR_EXP 41
13379: PUSH
13380: LD_INT 36
13382: ST_TO_ADDR
// hardcoreCounter := 18 ;
13383: LD_ADDR_EXP 42
13387: PUSH
13388: LD_INT 18
13390: ST_TO_ADDR
// sRocket := false ;
13391: LD_ADDR_EXP 45
13395: PUSH
13396: LD_INT 0
13398: ST_TO_ADDR
// sSpeed := false ;
13399: LD_ADDR_EXP 44
13403: PUSH
13404: LD_INT 0
13406: ST_TO_ADDR
// sEngine := false ;
13407: LD_ADDR_EXP 46
13411: PUSH
13412: LD_INT 0
13414: ST_TO_ADDR
// sSpec := false ;
13415: LD_ADDR_EXP 43
13419: PUSH
13420: LD_INT 0
13422: ST_TO_ADDR
// sLevel := false ;
13423: LD_ADDR_EXP 47
13427: PUSH
13428: LD_INT 0
13430: ST_TO_ADDR
// sArmoury := false ;
13431: LD_ADDR_EXP 48
13435: PUSH
13436: LD_INT 0
13438: ST_TO_ADDR
// sRadar := false ;
13439: LD_ADDR_EXP 49
13443: PUSH
13444: LD_INT 0
13446: ST_TO_ADDR
// sBunker := false ;
13447: LD_ADDR_EXP 50
13451: PUSH
13452: LD_INT 0
13454: ST_TO_ADDR
// sHack := false ;
13455: LD_ADDR_EXP 51
13459: PUSH
13460: LD_INT 0
13462: ST_TO_ADDR
// sFire := false ;
13463: LD_ADDR_EXP 52
13467: PUSH
13468: LD_INT 0
13470: ST_TO_ADDR
// sRefresh := false ;
13471: LD_ADDR_EXP 53
13475: PUSH
13476: LD_INT 0
13478: ST_TO_ADDR
// sExp := false ;
13479: LD_ADDR_EXP 54
13483: PUSH
13484: LD_INT 0
13486: ST_TO_ADDR
// sDepot := false ;
13487: LD_ADDR_EXP 55
13491: PUSH
13492: LD_INT 0
13494: ST_TO_ADDR
// sFlag := false ;
13495: LD_ADDR_EXP 56
13499: PUSH
13500: LD_INT 0
13502: ST_TO_ADDR
// sKamikadze := false ;
13503: LD_ADDR_EXP 64
13507: PUSH
13508: LD_INT 0
13510: ST_TO_ADDR
// sTroll := false ;
13511: LD_ADDR_EXP 65
13515: PUSH
13516: LD_INT 0
13518: ST_TO_ADDR
// sSlow := false ;
13519: LD_ADDR_EXP 66
13523: PUSH
13524: LD_INT 0
13526: ST_TO_ADDR
// sLack := false ;
13527: LD_ADDR_EXP 67
13531: PUSH
13532: LD_INT 0
13534: ST_TO_ADDR
// sTank := false ;
13535: LD_ADDR_EXP 69
13539: PUSH
13540: LD_INT 0
13542: ST_TO_ADDR
// sRemote := false ;
13543: LD_ADDR_EXP 70
13547: PUSH
13548: LD_INT 0
13550: ST_TO_ADDR
// sPowell := false ;
13551: LD_ADDR_EXP 71
13555: PUSH
13556: LD_INT 0
13558: ST_TO_ADDR
// sTeleport := false ;
13559: LD_ADDR_EXP 74
13563: PUSH
13564: LD_INT 0
13566: ST_TO_ADDR
// sOilTower := false ;
13567: LD_ADDR_EXP 76
13571: PUSH
13572: LD_INT 0
13574: ST_TO_ADDR
// sShovel := false ;
13575: LD_ADDR_EXP 77
13579: PUSH
13580: LD_INT 0
13582: ST_TO_ADDR
// sSheik := false ;
13583: LD_ADDR_EXP 78
13587: PUSH
13588: LD_INT 0
13590: ST_TO_ADDR
// sEarthquake := false ;
13591: LD_ADDR_EXP 80
13595: PUSH
13596: LD_INT 0
13598: ST_TO_ADDR
// sAI := false ;
13599: LD_ADDR_EXP 81
13603: PUSH
13604: LD_INT 0
13606: ST_TO_ADDR
// sCargo := false ;
13607: LD_ADDR_EXP 84
13611: PUSH
13612: LD_INT 0
13614: ST_TO_ADDR
// sDLaser := false ;
13615: LD_ADDR_EXP 85
13619: PUSH
13620: LD_INT 0
13622: ST_TO_ADDR
// sExchange := false ;
13623: LD_ADDR_EXP 86
13627: PUSH
13628: LD_INT 0
13630: ST_TO_ADDR
// sFac := false ;
13631: LD_ADDR_EXP 87
13635: PUSH
13636: LD_INT 0
13638: ST_TO_ADDR
// sPower := false ;
13639: LD_ADDR_EXP 88
13643: PUSH
13644: LD_INT 0
13646: ST_TO_ADDR
// sRandom := false ;
13647: LD_ADDR_EXP 89
13651: PUSH
13652: LD_INT 0
13654: ST_TO_ADDR
// sShield := false ;
13655: LD_ADDR_EXP 90
13659: PUSH
13660: LD_INT 0
13662: ST_TO_ADDR
// sTime := false ;
13663: LD_ADDR_EXP 91
13667: PUSH
13668: LD_INT 0
13670: ST_TO_ADDR
// sTools := false ;
13671: LD_ADDR_EXP 92
13675: PUSH
13676: LD_INT 0
13678: ST_TO_ADDR
// sSold := false ;
13679: LD_ADDR_EXP 57
13683: PUSH
13684: LD_INT 0
13686: ST_TO_ADDR
// sDiff := false ;
13687: LD_ADDR_EXP 58
13691: PUSH
13692: LD_INT 0
13694: ST_TO_ADDR
// sFog := false ;
13695: LD_ADDR_EXP 61
13699: PUSH
13700: LD_INT 0
13702: ST_TO_ADDR
// sReset := false ;
13703: LD_ADDR_EXP 62
13707: PUSH
13708: LD_INT 0
13710: ST_TO_ADDR
// sSun := false ;
13711: LD_ADDR_EXP 63
13715: PUSH
13716: LD_INT 0
13718: ST_TO_ADDR
// sTiger := false ;
13719: LD_ADDR_EXP 59
13723: PUSH
13724: LD_INT 0
13726: ST_TO_ADDR
// sBomb := false ;
13727: LD_ADDR_EXP 60
13731: PUSH
13732: LD_INT 0
13734: ST_TO_ADDR
// sWound := false ;
13735: LD_ADDR_EXP 68
13739: PUSH
13740: LD_INT 0
13742: ST_TO_ADDR
// sBetray := false ;
13743: LD_ADDR_EXP 72
13747: PUSH
13748: LD_INT 0
13750: ST_TO_ADDR
// sContamin := false ;
13751: LD_ADDR_EXP 73
13755: PUSH
13756: LD_INT 0
13758: ST_TO_ADDR
// sOil := false ;
13759: LD_ADDR_EXP 75
13763: PUSH
13764: LD_INT 0
13766: ST_TO_ADDR
// sStu := false ;
13767: LD_ADDR_EXP 79
13771: PUSH
13772: LD_INT 0
13774: ST_TO_ADDR
// sBazooka := false ;
13775: LD_ADDR_EXP 82
13779: PUSH
13780: LD_INT 0
13782: ST_TO_ADDR
// sMortar := false ;
13783: LD_ADDR_EXP 83
13787: PUSH
13788: LD_INT 0
13790: ST_TO_ADDR
// sRanger := false ;
13791: LD_ADDR_EXP 93
13795: PUSH
13796: LD_INT 0
13798: ST_TO_ADDR
// sComputer := false ;
13799: LD_ADDR_EXP 94
13803: PUSH
13804: LD_INT 0
13806: ST_TO_ADDR
// s30 := false ;
13807: LD_ADDR_EXP 95
13811: PUSH
13812: LD_INT 0
13814: ST_TO_ADDR
// s60 := false ;
13815: LD_ADDR_EXP 96
13819: PUSH
13820: LD_INT 0
13822: ST_TO_ADDR
// end ;
13823: LD_VAR 0 1
13827: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
13828: LD_INT 0
13830: PPUSH
13831: PPUSH
13832: PPUSH
13833: PPUSH
13834: PPUSH
13835: PPUSH
13836: PPUSH
// result := [ ] ;
13837: LD_ADDR_VAR 0 2
13841: PUSH
13842: EMPTY
13843: ST_TO_ADDR
// if campaign_id = 1 then
13844: LD_OWVAR 69
13848: PUSH
13849: LD_INT 1
13851: EQUAL
13852: IFFALSE 17018
// begin case mission_number of 1 :
13854: LD_OWVAR 70
13858: PUSH
13859: LD_INT 1
13861: DOUBLE
13862: EQUAL
13863: IFTRUE 13867
13865: GO 13943
13867: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
13868: LD_ADDR_VAR 0 2
13872: PUSH
13873: LD_INT 2
13875: PUSH
13876: LD_INT 4
13878: PUSH
13879: LD_INT 11
13881: PUSH
13882: LD_INT 12
13884: PUSH
13885: LD_INT 15
13887: PUSH
13888: LD_INT 16
13890: PUSH
13891: LD_INT 22
13893: PUSH
13894: LD_INT 23
13896: PUSH
13897: LD_INT 26
13899: PUSH
13900: EMPTY
13901: LIST
13902: LIST
13903: LIST
13904: LIST
13905: LIST
13906: LIST
13907: LIST
13908: LIST
13909: LIST
13910: PUSH
13911: LD_INT 101
13913: PUSH
13914: LD_INT 102
13916: PUSH
13917: LD_INT 106
13919: PUSH
13920: LD_INT 116
13922: PUSH
13923: LD_INT 117
13925: PUSH
13926: LD_INT 118
13928: PUSH
13929: EMPTY
13930: LIST
13931: LIST
13932: LIST
13933: LIST
13934: LIST
13935: LIST
13936: PUSH
13937: EMPTY
13938: LIST
13939: LIST
13940: ST_TO_ADDR
13941: GO 17016
13943: LD_INT 2
13945: DOUBLE
13946: EQUAL
13947: IFTRUE 13951
13949: GO 14035
13951: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
13952: LD_ADDR_VAR 0 2
13956: PUSH
13957: LD_INT 2
13959: PUSH
13960: LD_INT 4
13962: PUSH
13963: LD_INT 11
13965: PUSH
13966: LD_INT 12
13968: PUSH
13969: LD_INT 15
13971: PUSH
13972: LD_INT 16
13974: PUSH
13975: LD_INT 22
13977: PUSH
13978: LD_INT 23
13980: PUSH
13981: LD_INT 26
13983: PUSH
13984: EMPTY
13985: LIST
13986: LIST
13987: LIST
13988: LIST
13989: LIST
13990: LIST
13991: LIST
13992: LIST
13993: LIST
13994: PUSH
13995: LD_INT 101
13997: PUSH
13998: LD_INT 102
14000: PUSH
14001: LD_INT 105
14003: PUSH
14004: LD_INT 106
14006: PUSH
14007: LD_INT 108
14009: PUSH
14010: LD_INT 116
14012: PUSH
14013: LD_INT 117
14015: PUSH
14016: LD_INT 118
14018: PUSH
14019: EMPTY
14020: LIST
14021: LIST
14022: LIST
14023: LIST
14024: LIST
14025: LIST
14026: LIST
14027: LIST
14028: PUSH
14029: EMPTY
14030: LIST
14031: LIST
14032: ST_TO_ADDR
14033: GO 17016
14035: LD_INT 3
14037: DOUBLE
14038: EQUAL
14039: IFTRUE 14043
14041: GO 14131
14043: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
14044: LD_ADDR_VAR 0 2
14048: PUSH
14049: LD_INT 2
14051: PUSH
14052: LD_INT 4
14054: PUSH
14055: LD_INT 5
14057: PUSH
14058: LD_INT 11
14060: PUSH
14061: LD_INT 12
14063: PUSH
14064: LD_INT 15
14066: PUSH
14067: LD_INT 16
14069: PUSH
14070: LD_INT 22
14072: PUSH
14073: LD_INT 26
14075: PUSH
14076: LD_INT 36
14078: PUSH
14079: EMPTY
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: LIST
14090: PUSH
14091: LD_INT 101
14093: PUSH
14094: LD_INT 102
14096: PUSH
14097: LD_INT 105
14099: PUSH
14100: LD_INT 106
14102: PUSH
14103: LD_INT 108
14105: PUSH
14106: LD_INT 116
14108: PUSH
14109: LD_INT 117
14111: PUSH
14112: LD_INT 118
14114: PUSH
14115: EMPTY
14116: LIST
14117: LIST
14118: LIST
14119: LIST
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: PUSH
14125: EMPTY
14126: LIST
14127: LIST
14128: ST_TO_ADDR
14129: GO 17016
14131: LD_INT 4
14133: DOUBLE
14134: EQUAL
14135: IFTRUE 14139
14137: GO 14235
14139: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
14140: LD_ADDR_VAR 0 2
14144: PUSH
14145: LD_INT 2
14147: PUSH
14148: LD_INT 4
14150: PUSH
14151: LD_INT 5
14153: PUSH
14154: LD_INT 8
14156: PUSH
14157: LD_INT 11
14159: PUSH
14160: LD_INT 12
14162: PUSH
14163: LD_INT 15
14165: PUSH
14166: LD_INT 16
14168: PUSH
14169: LD_INT 22
14171: PUSH
14172: LD_INT 23
14174: PUSH
14175: LD_INT 26
14177: PUSH
14178: LD_INT 36
14180: PUSH
14181: EMPTY
14182: LIST
14183: LIST
14184: LIST
14185: LIST
14186: LIST
14187: LIST
14188: LIST
14189: LIST
14190: LIST
14191: LIST
14192: LIST
14193: LIST
14194: PUSH
14195: LD_INT 101
14197: PUSH
14198: LD_INT 102
14200: PUSH
14201: LD_INT 105
14203: PUSH
14204: LD_INT 106
14206: PUSH
14207: LD_INT 108
14209: PUSH
14210: LD_INT 116
14212: PUSH
14213: LD_INT 117
14215: PUSH
14216: LD_INT 118
14218: PUSH
14219: EMPTY
14220: LIST
14221: LIST
14222: LIST
14223: LIST
14224: LIST
14225: LIST
14226: LIST
14227: LIST
14228: PUSH
14229: EMPTY
14230: LIST
14231: LIST
14232: ST_TO_ADDR
14233: GO 17016
14235: LD_INT 5
14237: DOUBLE
14238: EQUAL
14239: IFTRUE 14243
14241: GO 14355
14243: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
14244: LD_ADDR_VAR 0 2
14248: PUSH
14249: LD_INT 2
14251: PUSH
14252: LD_INT 4
14254: PUSH
14255: LD_INT 5
14257: PUSH
14258: LD_INT 6
14260: PUSH
14261: LD_INT 8
14263: PUSH
14264: LD_INT 11
14266: PUSH
14267: LD_INT 12
14269: PUSH
14270: LD_INT 15
14272: PUSH
14273: LD_INT 16
14275: PUSH
14276: LD_INT 22
14278: PUSH
14279: LD_INT 23
14281: PUSH
14282: LD_INT 25
14284: PUSH
14285: LD_INT 26
14287: PUSH
14288: LD_INT 36
14290: PUSH
14291: EMPTY
14292: LIST
14293: LIST
14294: LIST
14295: LIST
14296: LIST
14297: LIST
14298: LIST
14299: LIST
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: PUSH
14307: LD_INT 101
14309: PUSH
14310: LD_INT 102
14312: PUSH
14313: LD_INT 105
14315: PUSH
14316: LD_INT 106
14318: PUSH
14319: LD_INT 108
14321: PUSH
14322: LD_INT 109
14324: PUSH
14325: LD_INT 112
14327: PUSH
14328: LD_INT 116
14330: PUSH
14331: LD_INT 117
14333: PUSH
14334: LD_INT 118
14336: PUSH
14337: EMPTY
14338: LIST
14339: LIST
14340: LIST
14341: LIST
14342: LIST
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: PUSH
14349: EMPTY
14350: LIST
14351: LIST
14352: ST_TO_ADDR
14353: GO 17016
14355: LD_INT 6
14357: DOUBLE
14358: EQUAL
14359: IFTRUE 14363
14361: GO 14495
14363: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
14364: LD_ADDR_VAR 0 2
14368: PUSH
14369: LD_INT 2
14371: PUSH
14372: LD_INT 4
14374: PUSH
14375: LD_INT 5
14377: PUSH
14378: LD_INT 6
14380: PUSH
14381: LD_INT 8
14383: PUSH
14384: LD_INT 11
14386: PUSH
14387: LD_INT 12
14389: PUSH
14390: LD_INT 15
14392: PUSH
14393: LD_INT 16
14395: PUSH
14396: LD_INT 20
14398: PUSH
14399: LD_INT 21
14401: PUSH
14402: LD_INT 22
14404: PUSH
14405: LD_INT 23
14407: PUSH
14408: LD_INT 25
14410: PUSH
14411: LD_INT 26
14413: PUSH
14414: LD_INT 30
14416: PUSH
14417: LD_INT 31
14419: PUSH
14420: LD_INT 32
14422: PUSH
14423: LD_INT 36
14425: PUSH
14426: EMPTY
14427: LIST
14428: LIST
14429: LIST
14430: LIST
14431: LIST
14432: LIST
14433: LIST
14434: LIST
14435: LIST
14436: LIST
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: LIST
14446: PUSH
14447: LD_INT 101
14449: PUSH
14450: LD_INT 102
14452: PUSH
14453: LD_INT 105
14455: PUSH
14456: LD_INT 106
14458: PUSH
14459: LD_INT 108
14461: PUSH
14462: LD_INT 109
14464: PUSH
14465: LD_INT 112
14467: PUSH
14468: LD_INT 116
14470: PUSH
14471: LD_INT 117
14473: PUSH
14474: LD_INT 118
14476: PUSH
14477: EMPTY
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: PUSH
14489: EMPTY
14490: LIST
14491: LIST
14492: ST_TO_ADDR
14493: GO 17016
14495: LD_INT 7
14497: DOUBLE
14498: EQUAL
14499: IFTRUE 14503
14501: GO 14615
14503: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
14504: LD_ADDR_VAR 0 2
14508: PUSH
14509: LD_INT 2
14511: PUSH
14512: LD_INT 4
14514: PUSH
14515: LD_INT 5
14517: PUSH
14518: LD_INT 7
14520: PUSH
14521: LD_INT 11
14523: PUSH
14524: LD_INT 12
14526: PUSH
14527: LD_INT 15
14529: PUSH
14530: LD_INT 16
14532: PUSH
14533: LD_INT 20
14535: PUSH
14536: LD_INT 21
14538: PUSH
14539: LD_INT 22
14541: PUSH
14542: LD_INT 23
14544: PUSH
14545: LD_INT 25
14547: PUSH
14548: LD_INT 26
14550: PUSH
14551: EMPTY
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: PUSH
14567: LD_INT 101
14569: PUSH
14570: LD_INT 102
14572: PUSH
14573: LD_INT 103
14575: PUSH
14576: LD_INT 105
14578: PUSH
14579: LD_INT 106
14581: PUSH
14582: LD_INT 108
14584: PUSH
14585: LD_INT 112
14587: PUSH
14588: LD_INT 116
14590: PUSH
14591: LD_INT 117
14593: PUSH
14594: LD_INT 118
14596: PUSH
14597: EMPTY
14598: LIST
14599: LIST
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: LIST
14606: LIST
14607: LIST
14608: PUSH
14609: EMPTY
14610: LIST
14611: LIST
14612: ST_TO_ADDR
14613: GO 17016
14615: LD_INT 8
14617: DOUBLE
14618: EQUAL
14619: IFTRUE 14623
14621: GO 14763
14623: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
14624: LD_ADDR_VAR 0 2
14628: PUSH
14629: LD_INT 2
14631: PUSH
14632: LD_INT 4
14634: PUSH
14635: LD_INT 5
14637: PUSH
14638: LD_INT 6
14640: PUSH
14641: LD_INT 7
14643: PUSH
14644: LD_INT 8
14646: PUSH
14647: LD_INT 11
14649: PUSH
14650: LD_INT 12
14652: PUSH
14653: LD_INT 15
14655: PUSH
14656: LD_INT 16
14658: PUSH
14659: LD_INT 20
14661: PUSH
14662: LD_INT 21
14664: PUSH
14665: LD_INT 22
14667: PUSH
14668: LD_INT 23
14670: PUSH
14671: LD_INT 25
14673: PUSH
14674: LD_INT 26
14676: PUSH
14677: LD_INT 30
14679: PUSH
14680: LD_INT 31
14682: PUSH
14683: LD_INT 32
14685: PUSH
14686: LD_INT 36
14688: PUSH
14689: EMPTY
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: PUSH
14711: LD_INT 101
14713: PUSH
14714: LD_INT 102
14716: PUSH
14717: LD_INT 103
14719: PUSH
14720: LD_INT 105
14722: PUSH
14723: LD_INT 106
14725: PUSH
14726: LD_INT 108
14728: PUSH
14729: LD_INT 109
14731: PUSH
14732: LD_INT 112
14734: PUSH
14735: LD_INT 116
14737: PUSH
14738: LD_INT 117
14740: PUSH
14741: LD_INT 118
14743: PUSH
14744: EMPTY
14745: LIST
14746: LIST
14747: LIST
14748: LIST
14749: LIST
14750: LIST
14751: LIST
14752: LIST
14753: LIST
14754: LIST
14755: LIST
14756: PUSH
14757: EMPTY
14758: LIST
14759: LIST
14760: ST_TO_ADDR
14761: GO 17016
14763: LD_INT 9
14765: DOUBLE
14766: EQUAL
14767: IFTRUE 14771
14769: GO 14919
14771: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
14772: LD_ADDR_VAR 0 2
14776: PUSH
14777: LD_INT 2
14779: PUSH
14780: LD_INT 4
14782: PUSH
14783: LD_INT 5
14785: PUSH
14786: LD_INT 6
14788: PUSH
14789: LD_INT 7
14791: PUSH
14792: LD_INT 8
14794: PUSH
14795: LD_INT 11
14797: PUSH
14798: LD_INT 12
14800: PUSH
14801: LD_INT 15
14803: PUSH
14804: LD_INT 16
14806: PUSH
14807: LD_INT 20
14809: PUSH
14810: LD_INT 21
14812: PUSH
14813: LD_INT 22
14815: PUSH
14816: LD_INT 23
14818: PUSH
14819: LD_INT 25
14821: PUSH
14822: LD_INT 26
14824: PUSH
14825: LD_INT 28
14827: PUSH
14828: LD_INT 30
14830: PUSH
14831: LD_INT 31
14833: PUSH
14834: LD_INT 32
14836: PUSH
14837: LD_INT 36
14839: PUSH
14840: EMPTY
14841: LIST
14842: LIST
14843: LIST
14844: LIST
14845: LIST
14846: LIST
14847: LIST
14848: LIST
14849: LIST
14850: LIST
14851: LIST
14852: LIST
14853: LIST
14854: LIST
14855: LIST
14856: LIST
14857: LIST
14858: LIST
14859: LIST
14860: LIST
14861: LIST
14862: PUSH
14863: LD_INT 101
14865: PUSH
14866: LD_INT 102
14868: PUSH
14869: LD_INT 103
14871: PUSH
14872: LD_INT 105
14874: PUSH
14875: LD_INT 106
14877: PUSH
14878: LD_INT 108
14880: PUSH
14881: LD_INT 109
14883: PUSH
14884: LD_INT 112
14886: PUSH
14887: LD_INT 114
14889: PUSH
14890: LD_INT 116
14892: PUSH
14893: LD_INT 117
14895: PUSH
14896: LD_INT 118
14898: PUSH
14899: EMPTY
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: LIST
14907: LIST
14908: LIST
14909: LIST
14910: LIST
14911: LIST
14912: PUSH
14913: EMPTY
14914: LIST
14915: LIST
14916: ST_TO_ADDR
14917: GO 17016
14919: LD_INT 10
14921: DOUBLE
14922: EQUAL
14923: IFTRUE 14927
14925: GO 15123
14927: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
14928: LD_ADDR_VAR 0 2
14932: PUSH
14933: LD_INT 2
14935: PUSH
14936: LD_INT 4
14938: PUSH
14939: LD_INT 5
14941: PUSH
14942: LD_INT 6
14944: PUSH
14945: LD_INT 7
14947: PUSH
14948: LD_INT 8
14950: PUSH
14951: LD_INT 9
14953: PUSH
14954: LD_INT 10
14956: PUSH
14957: LD_INT 11
14959: PUSH
14960: LD_INT 12
14962: PUSH
14963: LD_INT 13
14965: PUSH
14966: LD_INT 14
14968: PUSH
14969: LD_INT 15
14971: PUSH
14972: LD_INT 16
14974: PUSH
14975: LD_INT 17
14977: PUSH
14978: LD_INT 18
14980: PUSH
14981: LD_INT 19
14983: PUSH
14984: LD_INT 20
14986: PUSH
14987: LD_INT 21
14989: PUSH
14990: LD_INT 22
14992: PUSH
14993: LD_INT 23
14995: PUSH
14996: LD_INT 24
14998: PUSH
14999: LD_INT 25
15001: PUSH
15002: LD_INT 26
15004: PUSH
15005: LD_INT 28
15007: PUSH
15008: LD_INT 30
15010: PUSH
15011: LD_INT 31
15013: PUSH
15014: LD_INT 32
15016: PUSH
15017: LD_INT 36
15019: PUSH
15020: EMPTY
15021: LIST
15022: LIST
15023: LIST
15024: LIST
15025: LIST
15026: LIST
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: LIST
15032: LIST
15033: LIST
15034: LIST
15035: LIST
15036: LIST
15037: LIST
15038: LIST
15039: LIST
15040: LIST
15041: LIST
15042: LIST
15043: LIST
15044: LIST
15045: LIST
15046: LIST
15047: LIST
15048: LIST
15049: LIST
15050: PUSH
15051: LD_INT 101
15053: PUSH
15054: LD_INT 102
15056: PUSH
15057: LD_INT 103
15059: PUSH
15060: LD_INT 104
15062: PUSH
15063: LD_INT 105
15065: PUSH
15066: LD_INT 106
15068: PUSH
15069: LD_INT 107
15071: PUSH
15072: LD_INT 108
15074: PUSH
15075: LD_INT 109
15077: PUSH
15078: LD_INT 110
15080: PUSH
15081: LD_INT 111
15083: PUSH
15084: LD_INT 112
15086: PUSH
15087: LD_INT 114
15089: PUSH
15090: LD_INT 116
15092: PUSH
15093: LD_INT 117
15095: PUSH
15096: LD_INT 118
15098: PUSH
15099: EMPTY
15100: LIST
15101: LIST
15102: LIST
15103: LIST
15104: LIST
15105: LIST
15106: LIST
15107: LIST
15108: LIST
15109: LIST
15110: LIST
15111: LIST
15112: LIST
15113: LIST
15114: LIST
15115: LIST
15116: PUSH
15117: EMPTY
15118: LIST
15119: LIST
15120: ST_TO_ADDR
15121: GO 17016
15123: LD_INT 11
15125: DOUBLE
15126: EQUAL
15127: IFTRUE 15131
15129: GO 15335
15131: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
15132: LD_ADDR_VAR 0 2
15136: PUSH
15137: LD_INT 2
15139: PUSH
15140: LD_INT 3
15142: PUSH
15143: LD_INT 4
15145: PUSH
15146: LD_INT 5
15148: PUSH
15149: LD_INT 6
15151: PUSH
15152: LD_INT 7
15154: PUSH
15155: LD_INT 8
15157: PUSH
15158: LD_INT 9
15160: PUSH
15161: LD_INT 10
15163: PUSH
15164: LD_INT 11
15166: PUSH
15167: LD_INT 12
15169: PUSH
15170: LD_INT 13
15172: PUSH
15173: LD_INT 14
15175: PUSH
15176: LD_INT 15
15178: PUSH
15179: LD_INT 16
15181: PUSH
15182: LD_INT 17
15184: PUSH
15185: LD_INT 18
15187: PUSH
15188: LD_INT 19
15190: PUSH
15191: LD_INT 20
15193: PUSH
15194: LD_INT 21
15196: PUSH
15197: LD_INT 22
15199: PUSH
15200: LD_INT 23
15202: PUSH
15203: LD_INT 24
15205: PUSH
15206: LD_INT 25
15208: PUSH
15209: LD_INT 26
15211: PUSH
15212: LD_INT 28
15214: PUSH
15215: LD_INT 30
15217: PUSH
15218: LD_INT 31
15220: PUSH
15221: LD_INT 32
15223: PUSH
15224: LD_INT 34
15226: PUSH
15227: LD_INT 36
15229: PUSH
15230: EMPTY
15231: LIST
15232: LIST
15233: LIST
15234: LIST
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: LIST
15240: LIST
15241: LIST
15242: LIST
15243: LIST
15244: LIST
15245: LIST
15246: LIST
15247: LIST
15248: LIST
15249: LIST
15250: LIST
15251: LIST
15252: LIST
15253: LIST
15254: LIST
15255: LIST
15256: LIST
15257: LIST
15258: LIST
15259: LIST
15260: LIST
15261: LIST
15262: PUSH
15263: LD_INT 101
15265: PUSH
15266: LD_INT 102
15268: PUSH
15269: LD_INT 103
15271: PUSH
15272: LD_INT 104
15274: PUSH
15275: LD_INT 105
15277: PUSH
15278: LD_INT 106
15280: PUSH
15281: LD_INT 107
15283: PUSH
15284: LD_INT 108
15286: PUSH
15287: LD_INT 109
15289: PUSH
15290: LD_INT 110
15292: PUSH
15293: LD_INT 111
15295: PUSH
15296: LD_INT 112
15298: PUSH
15299: LD_INT 114
15301: PUSH
15302: LD_INT 116
15304: PUSH
15305: LD_INT 117
15307: PUSH
15308: LD_INT 118
15310: PUSH
15311: EMPTY
15312: LIST
15313: LIST
15314: LIST
15315: LIST
15316: LIST
15317: LIST
15318: LIST
15319: LIST
15320: LIST
15321: LIST
15322: LIST
15323: LIST
15324: LIST
15325: LIST
15326: LIST
15327: LIST
15328: PUSH
15329: EMPTY
15330: LIST
15331: LIST
15332: ST_TO_ADDR
15333: GO 17016
15335: LD_INT 12
15337: DOUBLE
15338: EQUAL
15339: IFTRUE 15343
15341: GO 15563
15343: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
15344: LD_ADDR_VAR 0 2
15348: PUSH
15349: LD_INT 1
15351: PUSH
15352: LD_INT 2
15354: PUSH
15355: LD_INT 3
15357: PUSH
15358: LD_INT 4
15360: PUSH
15361: LD_INT 5
15363: PUSH
15364: LD_INT 6
15366: PUSH
15367: LD_INT 7
15369: PUSH
15370: LD_INT 8
15372: PUSH
15373: LD_INT 9
15375: PUSH
15376: LD_INT 10
15378: PUSH
15379: LD_INT 11
15381: PUSH
15382: LD_INT 12
15384: PUSH
15385: LD_INT 13
15387: PUSH
15388: LD_INT 14
15390: PUSH
15391: LD_INT 15
15393: PUSH
15394: LD_INT 16
15396: PUSH
15397: LD_INT 17
15399: PUSH
15400: LD_INT 18
15402: PUSH
15403: LD_INT 19
15405: PUSH
15406: LD_INT 20
15408: PUSH
15409: LD_INT 21
15411: PUSH
15412: LD_INT 22
15414: PUSH
15415: LD_INT 23
15417: PUSH
15418: LD_INT 24
15420: PUSH
15421: LD_INT 25
15423: PUSH
15424: LD_INT 26
15426: PUSH
15427: LD_INT 27
15429: PUSH
15430: LD_INT 28
15432: PUSH
15433: LD_INT 30
15435: PUSH
15436: LD_INT 31
15438: PUSH
15439: LD_INT 32
15441: PUSH
15442: LD_INT 33
15444: PUSH
15445: LD_INT 34
15447: PUSH
15448: LD_INT 36
15450: PUSH
15451: EMPTY
15452: LIST
15453: LIST
15454: LIST
15455: LIST
15456: LIST
15457: LIST
15458: LIST
15459: LIST
15460: LIST
15461: LIST
15462: LIST
15463: LIST
15464: LIST
15465: LIST
15466: LIST
15467: LIST
15468: LIST
15469: LIST
15470: LIST
15471: LIST
15472: LIST
15473: LIST
15474: LIST
15475: LIST
15476: LIST
15477: LIST
15478: LIST
15479: LIST
15480: LIST
15481: LIST
15482: LIST
15483: LIST
15484: LIST
15485: LIST
15486: PUSH
15487: LD_INT 101
15489: PUSH
15490: LD_INT 102
15492: PUSH
15493: LD_INT 103
15495: PUSH
15496: LD_INT 104
15498: PUSH
15499: LD_INT 105
15501: PUSH
15502: LD_INT 106
15504: PUSH
15505: LD_INT 107
15507: PUSH
15508: LD_INT 108
15510: PUSH
15511: LD_INT 109
15513: PUSH
15514: LD_INT 110
15516: PUSH
15517: LD_INT 111
15519: PUSH
15520: LD_INT 112
15522: PUSH
15523: LD_INT 113
15525: PUSH
15526: LD_INT 114
15528: PUSH
15529: LD_INT 116
15531: PUSH
15532: LD_INT 117
15534: PUSH
15535: LD_INT 118
15537: PUSH
15538: EMPTY
15539: LIST
15540: LIST
15541: LIST
15542: LIST
15543: LIST
15544: LIST
15545: LIST
15546: LIST
15547: LIST
15548: LIST
15549: LIST
15550: LIST
15551: LIST
15552: LIST
15553: LIST
15554: LIST
15555: LIST
15556: PUSH
15557: EMPTY
15558: LIST
15559: LIST
15560: ST_TO_ADDR
15561: GO 17016
15563: LD_INT 13
15565: DOUBLE
15566: EQUAL
15567: IFTRUE 15571
15569: GO 15779
15571: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
15572: LD_ADDR_VAR 0 2
15576: PUSH
15577: LD_INT 1
15579: PUSH
15580: LD_INT 2
15582: PUSH
15583: LD_INT 3
15585: PUSH
15586: LD_INT 4
15588: PUSH
15589: LD_INT 5
15591: PUSH
15592: LD_INT 8
15594: PUSH
15595: LD_INT 9
15597: PUSH
15598: LD_INT 10
15600: PUSH
15601: LD_INT 11
15603: PUSH
15604: LD_INT 12
15606: PUSH
15607: LD_INT 14
15609: PUSH
15610: LD_INT 15
15612: PUSH
15613: LD_INT 16
15615: PUSH
15616: LD_INT 17
15618: PUSH
15619: LD_INT 18
15621: PUSH
15622: LD_INT 19
15624: PUSH
15625: LD_INT 20
15627: PUSH
15628: LD_INT 21
15630: PUSH
15631: LD_INT 22
15633: PUSH
15634: LD_INT 23
15636: PUSH
15637: LD_INT 24
15639: PUSH
15640: LD_INT 25
15642: PUSH
15643: LD_INT 26
15645: PUSH
15646: LD_INT 27
15648: PUSH
15649: LD_INT 28
15651: PUSH
15652: LD_INT 30
15654: PUSH
15655: LD_INT 31
15657: PUSH
15658: LD_INT 32
15660: PUSH
15661: LD_INT 33
15663: PUSH
15664: LD_INT 34
15666: PUSH
15667: LD_INT 36
15669: PUSH
15670: EMPTY
15671: LIST
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: LIST
15677: LIST
15678: LIST
15679: LIST
15680: LIST
15681: LIST
15682: LIST
15683: LIST
15684: LIST
15685: LIST
15686: LIST
15687: LIST
15688: LIST
15689: LIST
15690: LIST
15691: LIST
15692: LIST
15693: LIST
15694: LIST
15695: LIST
15696: LIST
15697: LIST
15698: LIST
15699: LIST
15700: LIST
15701: LIST
15702: PUSH
15703: LD_INT 101
15705: PUSH
15706: LD_INT 102
15708: PUSH
15709: LD_INT 103
15711: PUSH
15712: LD_INT 104
15714: PUSH
15715: LD_INT 105
15717: PUSH
15718: LD_INT 106
15720: PUSH
15721: LD_INT 107
15723: PUSH
15724: LD_INT 108
15726: PUSH
15727: LD_INT 109
15729: PUSH
15730: LD_INT 110
15732: PUSH
15733: LD_INT 111
15735: PUSH
15736: LD_INT 112
15738: PUSH
15739: LD_INT 113
15741: PUSH
15742: LD_INT 114
15744: PUSH
15745: LD_INT 116
15747: PUSH
15748: LD_INT 117
15750: PUSH
15751: LD_INT 118
15753: PUSH
15754: EMPTY
15755: LIST
15756: LIST
15757: LIST
15758: LIST
15759: LIST
15760: LIST
15761: LIST
15762: LIST
15763: LIST
15764: LIST
15765: LIST
15766: LIST
15767: LIST
15768: LIST
15769: LIST
15770: LIST
15771: LIST
15772: PUSH
15773: EMPTY
15774: LIST
15775: LIST
15776: ST_TO_ADDR
15777: GO 17016
15779: LD_INT 14
15781: DOUBLE
15782: EQUAL
15783: IFTRUE 15787
15785: GO 16011
15787: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
15788: LD_ADDR_VAR 0 2
15792: PUSH
15793: LD_INT 1
15795: PUSH
15796: LD_INT 2
15798: PUSH
15799: LD_INT 3
15801: PUSH
15802: LD_INT 4
15804: PUSH
15805: LD_INT 5
15807: PUSH
15808: LD_INT 6
15810: PUSH
15811: LD_INT 7
15813: PUSH
15814: LD_INT 8
15816: PUSH
15817: LD_INT 9
15819: PUSH
15820: LD_INT 10
15822: PUSH
15823: LD_INT 11
15825: PUSH
15826: LD_INT 12
15828: PUSH
15829: LD_INT 13
15831: PUSH
15832: LD_INT 14
15834: PUSH
15835: LD_INT 15
15837: PUSH
15838: LD_INT 16
15840: PUSH
15841: LD_INT 17
15843: PUSH
15844: LD_INT 18
15846: PUSH
15847: LD_INT 19
15849: PUSH
15850: LD_INT 20
15852: PUSH
15853: LD_INT 21
15855: PUSH
15856: LD_INT 22
15858: PUSH
15859: LD_INT 23
15861: PUSH
15862: LD_INT 24
15864: PUSH
15865: LD_INT 25
15867: PUSH
15868: LD_INT 26
15870: PUSH
15871: LD_INT 27
15873: PUSH
15874: LD_INT 28
15876: PUSH
15877: LD_INT 29
15879: PUSH
15880: LD_INT 30
15882: PUSH
15883: LD_INT 31
15885: PUSH
15886: LD_INT 32
15888: PUSH
15889: LD_INT 33
15891: PUSH
15892: LD_INT 34
15894: PUSH
15895: LD_INT 36
15897: PUSH
15898: EMPTY
15899: LIST
15900: LIST
15901: LIST
15902: LIST
15903: LIST
15904: LIST
15905: LIST
15906: LIST
15907: LIST
15908: LIST
15909: LIST
15910: LIST
15911: LIST
15912: LIST
15913: LIST
15914: LIST
15915: LIST
15916: LIST
15917: LIST
15918: LIST
15919: LIST
15920: LIST
15921: LIST
15922: LIST
15923: LIST
15924: LIST
15925: LIST
15926: LIST
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: PUSH
15935: LD_INT 101
15937: PUSH
15938: LD_INT 102
15940: PUSH
15941: LD_INT 103
15943: PUSH
15944: LD_INT 104
15946: PUSH
15947: LD_INT 105
15949: PUSH
15950: LD_INT 106
15952: PUSH
15953: LD_INT 107
15955: PUSH
15956: LD_INT 108
15958: PUSH
15959: LD_INT 109
15961: PUSH
15962: LD_INT 110
15964: PUSH
15965: LD_INT 111
15967: PUSH
15968: LD_INT 112
15970: PUSH
15971: LD_INT 113
15973: PUSH
15974: LD_INT 114
15976: PUSH
15977: LD_INT 116
15979: PUSH
15980: LD_INT 117
15982: PUSH
15983: LD_INT 118
15985: PUSH
15986: EMPTY
15987: LIST
15988: LIST
15989: LIST
15990: LIST
15991: LIST
15992: LIST
15993: LIST
15994: LIST
15995: LIST
15996: LIST
15997: LIST
15998: LIST
15999: LIST
16000: LIST
16001: LIST
16002: LIST
16003: LIST
16004: PUSH
16005: EMPTY
16006: LIST
16007: LIST
16008: ST_TO_ADDR
16009: GO 17016
16011: LD_INT 15
16013: DOUBLE
16014: EQUAL
16015: IFTRUE 16019
16017: GO 16243
16019: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
16020: LD_ADDR_VAR 0 2
16024: PUSH
16025: LD_INT 1
16027: PUSH
16028: LD_INT 2
16030: PUSH
16031: LD_INT 3
16033: PUSH
16034: LD_INT 4
16036: PUSH
16037: LD_INT 5
16039: PUSH
16040: LD_INT 6
16042: PUSH
16043: LD_INT 7
16045: PUSH
16046: LD_INT 8
16048: PUSH
16049: LD_INT 9
16051: PUSH
16052: LD_INT 10
16054: PUSH
16055: LD_INT 11
16057: PUSH
16058: LD_INT 12
16060: PUSH
16061: LD_INT 13
16063: PUSH
16064: LD_INT 14
16066: PUSH
16067: LD_INT 15
16069: PUSH
16070: LD_INT 16
16072: PUSH
16073: LD_INT 17
16075: PUSH
16076: LD_INT 18
16078: PUSH
16079: LD_INT 19
16081: PUSH
16082: LD_INT 20
16084: PUSH
16085: LD_INT 21
16087: PUSH
16088: LD_INT 22
16090: PUSH
16091: LD_INT 23
16093: PUSH
16094: LD_INT 24
16096: PUSH
16097: LD_INT 25
16099: PUSH
16100: LD_INT 26
16102: PUSH
16103: LD_INT 27
16105: PUSH
16106: LD_INT 28
16108: PUSH
16109: LD_INT 29
16111: PUSH
16112: LD_INT 30
16114: PUSH
16115: LD_INT 31
16117: PUSH
16118: LD_INT 32
16120: PUSH
16121: LD_INT 33
16123: PUSH
16124: LD_INT 34
16126: PUSH
16127: LD_INT 36
16129: PUSH
16130: EMPTY
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: LIST
16143: LIST
16144: LIST
16145: LIST
16146: LIST
16147: LIST
16148: LIST
16149: LIST
16150: LIST
16151: LIST
16152: LIST
16153: LIST
16154: LIST
16155: LIST
16156: LIST
16157: LIST
16158: LIST
16159: LIST
16160: LIST
16161: LIST
16162: LIST
16163: LIST
16164: LIST
16165: LIST
16166: PUSH
16167: LD_INT 101
16169: PUSH
16170: LD_INT 102
16172: PUSH
16173: LD_INT 103
16175: PUSH
16176: LD_INT 104
16178: PUSH
16179: LD_INT 105
16181: PUSH
16182: LD_INT 106
16184: PUSH
16185: LD_INT 107
16187: PUSH
16188: LD_INT 108
16190: PUSH
16191: LD_INT 109
16193: PUSH
16194: LD_INT 110
16196: PUSH
16197: LD_INT 111
16199: PUSH
16200: LD_INT 112
16202: PUSH
16203: LD_INT 113
16205: PUSH
16206: LD_INT 114
16208: PUSH
16209: LD_INT 116
16211: PUSH
16212: LD_INT 117
16214: PUSH
16215: LD_INT 118
16217: PUSH
16218: EMPTY
16219: LIST
16220: LIST
16221: LIST
16222: LIST
16223: LIST
16224: LIST
16225: LIST
16226: LIST
16227: LIST
16228: LIST
16229: LIST
16230: LIST
16231: LIST
16232: LIST
16233: LIST
16234: LIST
16235: LIST
16236: PUSH
16237: EMPTY
16238: LIST
16239: LIST
16240: ST_TO_ADDR
16241: GO 17016
16243: LD_INT 16
16245: DOUBLE
16246: EQUAL
16247: IFTRUE 16251
16249: GO 16387
16251: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
16252: LD_ADDR_VAR 0 2
16256: PUSH
16257: LD_INT 2
16259: PUSH
16260: LD_INT 4
16262: PUSH
16263: LD_INT 5
16265: PUSH
16266: LD_INT 7
16268: PUSH
16269: LD_INT 11
16271: PUSH
16272: LD_INT 12
16274: PUSH
16275: LD_INT 15
16277: PUSH
16278: LD_INT 16
16280: PUSH
16281: LD_INT 20
16283: PUSH
16284: LD_INT 21
16286: PUSH
16287: LD_INT 22
16289: PUSH
16290: LD_INT 23
16292: PUSH
16293: LD_INT 25
16295: PUSH
16296: LD_INT 26
16298: PUSH
16299: LD_INT 30
16301: PUSH
16302: LD_INT 31
16304: PUSH
16305: LD_INT 32
16307: PUSH
16308: LD_INT 33
16310: PUSH
16311: LD_INT 34
16313: PUSH
16314: EMPTY
16315: LIST
16316: LIST
16317: LIST
16318: LIST
16319: LIST
16320: LIST
16321: LIST
16322: LIST
16323: LIST
16324: LIST
16325: LIST
16326: LIST
16327: LIST
16328: LIST
16329: LIST
16330: LIST
16331: LIST
16332: LIST
16333: LIST
16334: PUSH
16335: LD_INT 101
16337: PUSH
16338: LD_INT 102
16340: PUSH
16341: LD_INT 103
16343: PUSH
16344: LD_INT 106
16346: PUSH
16347: LD_INT 108
16349: PUSH
16350: LD_INT 112
16352: PUSH
16353: LD_INT 113
16355: PUSH
16356: LD_INT 114
16358: PUSH
16359: LD_INT 116
16361: PUSH
16362: LD_INT 117
16364: PUSH
16365: LD_INT 118
16367: PUSH
16368: EMPTY
16369: LIST
16370: LIST
16371: LIST
16372: LIST
16373: LIST
16374: LIST
16375: LIST
16376: LIST
16377: LIST
16378: LIST
16379: LIST
16380: PUSH
16381: EMPTY
16382: LIST
16383: LIST
16384: ST_TO_ADDR
16385: GO 17016
16387: LD_INT 17
16389: DOUBLE
16390: EQUAL
16391: IFTRUE 16395
16393: GO 16619
16395: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
16396: LD_ADDR_VAR 0 2
16400: PUSH
16401: LD_INT 1
16403: PUSH
16404: LD_INT 2
16406: PUSH
16407: LD_INT 3
16409: PUSH
16410: LD_INT 4
16412: PUSH
16413: LD_INT 5
16415: PUSH
16416: LD_INT 6
16418: PUSH
16419: LD_INT 7
16421: PUSH
16422: LD_INT 8
16424: PUSH
16425: LD_INT 9
16427: PUSH
16428: LD_INT 10
16430: PUSH
16431: LD_INT 11
16433: PUSH
16434: LD_INT 12
16436: PUSH
16437: LD_INT 13
16439: PUSH
16440: LD_INT 14
16442: PUSH
16443: LD_INT 15
16445: PUSH
16446: LD_INT 16
16448: PUSH
16449: LD_INT 17
16451: PUSH
16452: LD_INT 18
16454: PUSH
16455: LD_INT 19
16457: PUSH
16458: LD_INT 20
16460: PUSH
16461: LD_INT 21
16463: PUSH
16464: LD_INT 22
16466: PUSH
16467: LD_INT 23
16469: PUSH
16470: LD_INT 24
16472: PUSH
16473: LD_INT 25
16475: PUSH
16476: LD_INT 26
16478: PUSH
16479: LD_INT 27
16481: PUSH
16482: LD_INT 28
16484: PUSH
16485: LD_INT 29
16487: PUSH
16488: LD_INT 30
16490: PUSH
16491: LD_INT 31
16493: PUSH
16494: LD_INT 32
16496: PUSH
16497: LD_INT 33
16499: PUSH
16500: LD_INT 34
16502: PUSH
16503: LD_INT 36
16505: PUSH
16506: EMPTY
16507: LIST
16508: LIST
16509: LIST
16510: LIST
16511: LIST
16512: LIST
16513: LIST
16514: LIST
16515: LIST
16516: LIST
16517: LIST
16518: LIST
16519: LIST
16520: LIST
16521: LIST
16522: LIST
16523: LIST
16524: LIST
16525: LIST
16526: LIST
16527: LIST
16528: LIST
16529: LIST
16530: LIST
16531: LIST
16532: LIST
16533: LIST
16534: LIST
16535: LIST
16536: LIST
16537: LIST
16538: LIST
16539: LIST
16540: LIST
16541: LIST
16542: PUSH
16543: LD_INT 101
16545: PUSH
16546: LD_INT 102
16548: PUSH
16549: LD_INT 103
16551: PUSH
16552: LD_INT 104
16554: PUSH
16555: LD_INT 105
16557: PUSH
16558: LD_INT 106
16560: PUSH
16561: LD_INT 107
16563: PUSH
16564: LD_INT 108
16566: PUSH
16567: LD_INT 109
16569: PUSH
16570: LD_INT 110
16572: PUSH
16573: LD_INT 111
16575: PUSH
16576: LD_INT 112
16578: PUSH
16579: LD_INT 113
16581: PUSH
16582: LD_INT 114
16584: PUSH
16585: LD_INT 116
16587: PUSH
16588: LD_INT 117
16590: PUSH
16591: LD_INT 118
16593: PUSH
16594: EMPTY
16595: LIST
16596: LIST
16597: LIST
16598: LIST
16599: LIST
16600: LIST
16601: LIST
16602: LIST
16603: LIST
16604: LIST
16605: LIST
16606: LIST
16607: LIST
16608: LIST
16609: LIST
16610: LIST
16611: LIST
16612: PUSH
16613: EMPTY
16614: LIST
16615: LIST
16616: ST_TO_ADDR
16617: GO 17016
16619: LD_INT 18
16621: DOUBLE
16622: EQUAL
16623: IFTRUE 16627
16625: GO 16775
16627: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
16628: LD_ADDR_VAR 0 2
16632: PUSH
16633: LD_INT 2
16635: PUSH
16636: LD_INT 4
16638: PUSH
16639: LD_INT 5
16641: PUSH
16642: LD_INT 7
16644: PUSH
16645: LD_INT 11
16647: PUSH
16648: LD_INT 12
16650: PUSH
16651: LD_INT 15
16653: PUSH
16654: LD_INT 16
16656: PUSH
16657: LD_INT 20
16659: PUSH
16660: LD_INT 21
16662: PUSH
16663: LD_INT 22
16665: PUSH
16666: LD_INT 23
16668: PUSH
16669: LD_INT 25
16671: PUSH
16672: LD_INT 26
16674: PUSH
16675: LD_INT 30
16677: PUSH
16678: LD_INT 31
16680: PUSH
16681: LD_INT 32
16683: PUSH
16684: LD_INT 33
16686: PUSH
16687: LD_INT 34
16689: PUSH
16690: LD_INT 35
16692: PUSH
16693: LD_INT 36
16695: PUSH
16696: EMPTY
16697: LIST
16698: LIST
16699: LIST
16700: LIST
16701: LIST
16702: LIST
16703: LIST
16704: LIST
16705: LIST
16706: LIST
16707: LIST
16708: LIST
16709: LIST
16710: LIST
16711: LIST
16712: LIST
16713: LIST
16714: LIST
16715: LIST
16716: LIST
16717: LIST
16718: PUSH
16719: LD_INT 101
16721: PUSH
16722: LD_INT 102
16724: PUSH
16725: LD_INT 103
16727: PUSH
16728: LD_INT 106
16730: PUSH
16731: LD_INT 108
16733: PUSH
16734: LD_INT 112
16736: PUSH
16737: LD_INT 113
16739: PUSH
16740: LD_INT 114
16742: PUSH
16743: LD_INT 115
16745: PUSH
16746: LD_INT 116
16748: PUSH
16749: LD_INT 117
16751: PUSH
16752: LD_INT 118
16754: PUSH
16755: EMPTY
16756: LIST
16757: LIST
16758: LIST
16759: LIST
16760: LIST
16761: LIST
16762: LIST
16763: LIST
16764: LIST
16765: LIST
16766: LIST
16767: LIST
16768: PUSH
16769: EMPTY
16770: LIST
16771: LIST
16772: ST_TO_ADDR
16773: GO 17016
16775: LD_INT 19
16777: DOUBLE
16778: EQUAL
16779: IFTRUE 16783
16781: GO 17015
16783: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
16784: LD_ADDR_VAR 0 2
16788: PUSH
16789: LD_INT 1
16791: PUSH
16792: LD_INT 2
16794: PUSH
16795: LD_INT 3
16797: PUSH
16798: LD_INT 4
16800: PUSH
16801: LD_INT 5
16803: PUSH
16804: LD_INT 6
16806: PUSH
16807: LD_INT 7
16809: PUSH
16810: LD_INT 8
16812: PUSH
16813: LD_INT 9
16815: PUSH
16816: LD_INT 10
16818: PUSH
16819: LD_INT 11
16821: PUSH
16822: LD_INT 12
16824: PUSH
16825: LD_INT 13
16827: PUSH
16828: LD_INT 14
16830: PUSH
16831: LD_INT 15
16833: PUSH
16834: LD_INT 16
16836: PUSH
16837: LD_INT 17
16839: PUSH
16840: LD_INT 18
16842: PUSH
16843: LD_INT 19
16845: PUSH
16846: LD_INT 20
16848: PUSH
16849: LD_INT 21
16851: PUSH
16852: LD_INT 22
16854: PUSH
16855: LD_INT 23
16857: PUSH
16858: LD_INT 24
16860: PUSH
16861: LD_INT 25
16863: PUSH
16864: LD_INT 26
16866: PUSH
16867: LD_INT 27
16869: PUSH
16870: LD_INT 28
16872: PUSH
16873: LD_INT 29
16875: PUSH
16876: LD_INT 30
16878: PUSH
16879: LD_INT 31
16881: PUSH
16882: LD_INT 32
16884: PUSH
16885: LD_INT 33
16887: PUSH
16888: LD_INT 34
16890: PUSH
16891: LD_INT 35
16893: PUSH
16894: LD_INT 36
16896: PUSH
16897: EMPTY
16898: LIST
16899: LIST
16900: LIST
16901: LIST
16902: LIST
16903: LIST
16904: LIST
16905: LIST
16906: LIST
16907: LIST
16908: LIST
16909: LIST
16910: LIST
16911: LIST
16912: LIST
16913: LIST
16914: LIST
16915: LIST
16916: LIST
16917: LIST
16918: LIST
16919: LIST
16920: LIST
16921: LIST
16922: LIST
16923: LIST
16924: LIST
16925: LIST
16926: LIST
16927: LIST
16928: LIST
16929: LIST
16930: LIST
16931: LIST
16932: LIST
16933: LIST
16934: PUSH
16935: LD_INT 101
16937: PUSH
16938: LD_INT 102
16940: PUSH
16941: LD_INT 103
16943: PUSH
16944: LD_INT 104
16946: PUSH
16947: LD_INT 105
16949: PUSH
16950: LD_INT 106
16952: PUSH
16953: LD_INT 107
16955: PUSH
16956: LD_INT 108
16958: PUSH
16959: LD_INT 109
16961: PUSH
16962: LD_INT 110
16964: PUSH
16965: LD_INT 111
16967: PUSH
16968: LD_INT 112
16970: PUSH
16971: LD_INT 113
16973: PUSH
16974: LD_INT 114
16976: PUSH
16977: LD_INT 115
16979: PUSH
16980: LD_INT 116
16982: PUSH
16983: LD_INT 117
16985: PUSH
16986: LD_INT 118
16988: PUSH
16989: EMPTY
16990: LIST
16991: LIST
16992: LIST
16993: LIST
16994: LIST
16995: LIST
16996: LIST
16997: LIST
16998: LIST
16999: LIST
17000: LIST
17001: LIST
17002: LIST
17003: LIST
17004: LIST
17005: LIST
17006: LIST
17007: LIST
17008: PUSH
17009: EMPTY
17010: LIST
17011: LIST
17012: ST_TO_ADDR
17013: GO 17016
17015: POP
// end else
17016: GO 17247
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
17018: LD_ADDR_VAR 0 2
17022: PUSH
17023: LD_INT 1
17025: PUSH
17026: LD_INT 2
17028: PUSH
17029: LD_INT 3
17031: PUSH
17032: LD_INT 4
17034: PUSH
17035: LD_INT 5
17037: PUSH
17038: LD_INT 6
17040: PUSH
17041: LD_INT 7
17043: PUSH
17044: LD_INT 8
17046: PUSH
17047: LD_INT 9
17049: PUSH
17050: LD_INT 10
17052: PUSH
17053: LD_INT 11
17055: PUSH
17056: LD_INT 12
17058: PUSH
17059: LD_INT 13
17061: PUSH
17062: LD_INT 14
17064: PUSH
17065: LD_INT 15
17067: PUSH
17068: LD_INT 16
17070: PUSH
17071: LD_INT 17
17073: PUSH
17074: LD_INT 18
17076: PUSH
17077: LD_INT 19
17079: PUSH
17080: LD_INT 20
17082: PUSH
17083: LD_INT 21
17085: PUSH
17086: LD_INT 22
17088: PUSH
17089: LD_INT 23
17091: PUSH
17092: LD_INT 24
17094: PUSH
17095: LD_INT 25
17097: PUSH
17098: LD_INT 26
17100: PUSH
17101: LD_INT 27
17103: PUSH
17104: LD_INT 28
17106: PUSH
17107: LD_INT 29
17109: PUSH
17110: LD_INT 30
17112: PUSH
17113: LD_INT 31
17115: PUSH
17116: LD_INT 32
17118: PUSH
17119: LD_INT 33
17121: PUSH
17122: LD_INT 34
17124: PUSH
17125: LD_INT 35
17127: PUSH
17128: LD_INT 36
17130: PUSH
17131: EMPTY
17132: LIST
17133: LIST
17134: LIST
17135: LIST
17136: LIST
17137: LIST
17138: LIST
17139: LIST
17140: LIST
17141: LIST
17142: LIST
17143: LIST
17144: LIST
17145: LIST
17146: LIST
17147: LIST
17148: LIST
17149: LIST
17150: LIST
17151: LIST
17152: LIST
17153: LIST
17154: LIST
17155: LIST
17156: LIST
17157: LIST
17158: LIST
17159: LIST
17160: LIST
17161: LIST
17162: LIST
17163: LIST
17164: LIST
17165: LIST
17166: LIST
17167: LIST
17168: PUSH
17169: LD_INT 101
17171: PUSH
17172: LD_INT 102
17174: PUSH
17175: LD_INT 103
17177: PUSH
17178: LD_INT 104
17180: PUSH
17181: LD_INT 105
17183: PUSH
17184: LD_INT 106
17186: PUSH
17187: LD_INT 107
17189: PUSH
17190: LD_INT 108
17192: PUSH
17193: LD_INT 109
17195: PUSH
17196: LD_INT 110
17198: PUSH
17199: LD_INT 111
17201: PUSH
17202: LD_INT 112
17204: PUSH
17205: LD_INT 113
17207: PUSH
17208: LD_INT 114
17210: PUSH
17211: LD_INT 115
17213: PUSH
17214: LD_INT 116
17216: PUSH
17217: LD_INT 117
17219: PUSH
17220: LD_INT 118
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: LIST
17227: LIST
17228: LIST
17229: LIST
17230: LIST
17231: LIST
17232: LIST
17233: LIST
17234: LIST
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: LIST
17240: LIST
17241: LIST
17242: PUSH
17243: EMPTY
17244: LIST
17245: LIST
17246: ST_TO_ADDR
// if result then
17247: LD_VAR 0 2
17251: IFFALSE 18037
// begin normal :=  ;
17253: LD_ADDR_VAR 0 5
17257: PUSH
17258: LD_STRING 
17260: ST_TO_ADDR
// hardcore :=  ;
17261: LD_ADDR_VAR 0 6
17265: PUSH
17266: LD_STRING 
17268: ST_TO_ADDR
// active :=  ;
17269: LD_ADDR_VAR 0 7
17273: PUSH
17274: LD_STRING 
17276: ST_TO_ADDR
// for i = 1 to normalCounter do
17277: LD_ADDR_VAR 0 8
17281: PUSH
17282: DOUBLE
17283: LD_INT 1
17285: DEC
17286: ST_TO_ADDR
17287: LD_EXP 41
17291: PUSH
17292: FOR_TO
17293: IFFALSE 17394
// begin tmp := 0 ;
17295: LD_ADDR_VAR 0 3
17299: PUSH
17300: LD_STRING 0
17302: ST_TO_ADDR
// if result [ 1 ] then
17303: LD_VAR 0 2
17307: PUSH
17308: LD_INT 1
17310: ARRAY
17311: IFFALSE 17376
// if result [ 1 ] [ 1 ] = i then
17313: LD_VAR 0 2
17317: PUSH
17318: LD_INT 1
17320: ARRAY
17321: PUSH
17322: LD_INT 1
17324: ARRAY
17325: PUSH
17326: LD_VAR 0 8
17330: EQUAL
17331: IFFALSE 17376
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
17333: LD_ADDR_VAR 0 2
17337: PUSH
17338: LD_VAR 0 2
17342: PPUSH
17343: LD_INT 1
17345: PPUSH
17346: LD_VAR 0 2
17350: PUSH
17351: LD_INT 1
17353: ARRAY
17354: PPUSH
17355: LD_INT 1
17357: PPUSH
17358: CALL_OW 3
17362: PPUSH
17363: CALL_OW 1
17367: ST_TO_ADDR
// tmp := 1 ;
17368: LD_ADDR_VAR 0 3
17372: PUSH
17373: LD_STRING 1
17375: ST_TO_ADDR
// end ; normal := normal & tmp ;
17376: LD_ADDR_VAR 0 5
17380: PUSH
17381: LD_VAR 0 5
17385: PUSH
17386: LD_VAR 0 3
17390: STR
17391: ST_TO_ADDR
// end ;
17392: GO 17292
17394: POP
17395: POP
// for i = 1 to hardcoreCounter do
17396: LD_ADDR_VAR 0 8
17400: PUSH
17401: DOUBLE
17402: LD_INT 1
17404: DEC
17405: ST_TO_ADDR
17406: LD_EXP 42
17410: PUSH
17411: FOR_TO
17412: IFFALSE 17517
// begin tmp := 0 ;
17414: LD_ADDR_VAR 0 3
17418: PUSH
17419: LD_STRING 0
17421: ST_TO_ADDR
// if result [ 2 ] then
17422: LD_VAR 0 2
17426: PUSH
17427: LD_INT 2
17429: ARRAY
17430: IFFALSE 17499
// if result [ 2 ] [ 1 ] = 100 + i then
17432: LD_VAR 0 2
17436: PUSH
17437: LD_INT 2
17439: ARRAY
17440: PUSH
17441: LD_INT 1
17443: ARRAY
17444: PUSH
17445: LD_INT 100
17447: PUSH
17448: LD_VAR 0 8
17452: PLUS
17453: EQUAL
17454: IFFALSE 17499
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
17456: LD_ADDR_VAR 0 2
17460: PUSH
17461: LD_VAR 0 2
17465: PPUSH
17466: LD_INT 2
17468: PPUSH
17469: LD_VAR 0 2
17473: PUSH
17474: LD_INT 2
17476: ARRAY
17477: PPUSH
17478: LD_INT 1
17480: PPUSH
17481: CALL_OW 3
17485: PPUSH
17486: CALL_OW 1
17490: ST_TO_ADDR
// tmp := 1 ;
17491: LD_ADDR_VAR 0 3
17495: PUSH
17496: LD_STRING 1
17498: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
17499: LD_ADDR_VAR 0 6
17503: PUSH
17504: LD_VAR 0 6
17508: PUSH
17509: LD_VAR 0 3
17513: STR
17514: ST_TO_ADDR
// end ;
17515: GO 17411
17517: POP
17518: POP
// if isGameLoad then
17519: LD_VAR 0 1
17523: IFFALSE 17998
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
17525: LD_ADDR_VAR 0 4
17529: PUSH
17530: LD_EXP 45
17534: PUSH
17535: LD_EXP 44
17539: PUSH
17540: LD_EXP 46
17544: PUSH
17545: LD_EXP 43
17549: PUSH
17550: LD_EXP 47
17554: PUSH
17555: LD_EXP 48
17559: PUSH
17560: LD_EXP 49
17564: PUSH
17565: LD_EXP 50
17569: PUSH
17570: LD_EXP 51
17574: PUSH
17575: LD_EXP 52
17579: PUSH
17580: LD_EXP 53
17584: PUSH
17585: LD_EXP 54
17589: PUSH
17590: LD_EXP 55
17594: PUSH
17595: LD_EXP 56
17599: PUSH
17600: LD_EXP 64
17604: PUSH
17605: LD_EXP 65
17609: PUSH
17610: LD_EXP 66
17614: PUSH
17615: LD_EXP 67
17619: PUSH
17620: LD_EXP 69
17624: PUSH
17625: LD_EXP 70
17629: PUSH
17630: LD_EXP 71
17634: PUSH
17635: LD_EXP 74
17639: PUSH
17640: LD_EXP 76
17644: PUSH
17645: LD_EXP 77
17649: PUSH
17650: LD_EXP 78
17654: PUSH
17655: LD_EXP 80
17659: PUSH
17660: LD_EXP 81
17664: PUSH
17665: LD_EXP 84
17669: PUSH
17670: LD_EXP 85
17674: PUSH
17675: LD_EXP 86
17679: PUSH
17680: LD_EXP 87
17684: PUSH
17685: LD_EXP 88
17689: PUSH
17690: LD_EXP 89
17694: PUSH
17695: LD_EXP 90
17699: PUSH
17700: LD_EXP 91
17704: PUSH
17705: LD_EXP 92
17709: PUSH
17710: LD_EXP 57
17714: PUSH
17715: LD_EXP 58
17719: PUSH
17720: LD_EXP 61
17724: PUSH
17725: LD_EXP 62
17729: PUSH
17730: LD_EXP 63
17734: PUSH
17735: LD_EXP 59
17739: PUSH
17740: LD_EXP 60
17744: PUSH
17745: LD_EXP 68
17749: PUSH
17750: LD_EXP 72
17754: PUSH
17755: LD_EXP 73
17759: PUSH
17760: LD_EXP 75
17764: PUSH
17765: LD_EXP 79
17769: PUSH
17770: LD_EXP 82
17774: PUSH
17775: LD_EXP 83
17779: PUSH
17780: LD_EXP 93
17784: PUSH
17785: LD_EXP 94
17789: PUSH
17790: LD_EXP 95
17794: PUSH
17795: LD_EXP 96
17799: PUSH
17800: EMPTY
17801: LIST
17802: LIST
17803: LIST
17804: LIST
17805: LIST
17806: LIST
17807: LIST
17808: LIST
17809: LIST
17810: LIST
17811: LIST
17812: LIST
17813: LIST
17814: LIST
17815: LIST
17816: LIST
17817: LIST
17818: LIST
17819: LIST
17820: LIST
17821: LIST
17822: LIST
17823: LIST
17824: LIST
17825: LIST
17826: LIST
17827: LIST
17828: LIST
17829: LIST
17830: LIST
17831: LIST
17832: LIST
17833: LIST
17834: LIST
17835: LIST
17836: LIST
17837: LIST
17838: LIST
17839: LIST
17840: LIST
17841: LIST
17842: LIST
17843: LIST
17844: LIST
17845: LIST
17846: LIST
17847: LIST
17848: LIST
17849: LIST
17850: LIST
17851: LIST
17852: LIST
17853: LIST
17854: LIST
17855: ST_TO_ADDR
// tmp :=  ;
17856: LD_ADDR_VAR 0 3
17860: PUSH
17861: LD_STRING 
17863: ST_TO_ADDR
// for i = 1 to normalCounter do
17864: LD_ADDR_VAR 0 8
17868: PUSH
17869: DOUBLE
17870: LD_INT 1
17872: DEC
17873: ST_TO_ADDR
17874: LD_EXP 41
17878: PUSH
17879: FOR_TO
17880: IFFALSE 17916
// begin if flags [ i ] then
17882: LD_VAR 0 4
17886: PUSH
17887: LD_VAR 0 8
17891: ARRAY
17892: IFFALSE 17914
// tmp := tmp & i & ; ;
17894: LD_ADDR_VAR 0 3
17898: PUSH
17899: LD_VAR 0 3
17903: PUSH
17904: LD_VAR 0 8
17908: STR
17909: PUSH
17910: LD_STRING ;
17912: STR
17913: ST_TO_ADDR
// end ;
17914: GO 17879
17916: POP
17917: POP
// for i = 1 to hardcoreCounter do
17918: LD_ADDR_VAR 0 8
17922: PUSH
17923: DOUBLE
17924: LD_INT 1
17926: DEC
17927: ST_TO_ADDR
17928: LD_EXP 42
17932: PUSH
17933: FOR_TO
17934: IFFALSE 17980
// begin if flags [ normalCounter + i ] then
17936: LD_VAR 0 4
17940: PUSH
17941: LD_EXP 41
17945: PUSH
17946: LD_VAR 0 8
17950: PLUS
17951: ARRAY
17952: IFFALSE 17978
// tmp := tmp & ( 100 + i ) & ; ;
17954: LD_ADDR_VAR 0 3
17958: PUSH
17959: LD_VAR 0 3
17963: PUSH
17964: LD_INT 100
17966: PUSH
17967: LD_VAR 0 8
17971: PLUS
17972: STR
17973: PUSH
17974: LD_STRING ;
17976: STR
17977: ST_TO_ADDR
// end ;
17978: GO 17933
17980: POP
17981: POP
// if tmp then
17982: LD_VAR 0 3
17986: IFFALSE 17998
// active := tmp ;
17988: LD_ADDR_VAR 0 7
17992: PUSH
17993: LD_VAR 0 3
17997: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
17998: LD_STRING getStreamItemsFromMission("
18000: PUSH
18001: LD_VAR 0 5
18005: STR
18006: PUSH
18007: LD_STRING ","
18009: STR
18010: PUSH
18011: LD_VAR 0 6
18015: STR
18016: PUSH
18017: LD_STRING ","
18019: STR
18020: PUSH
18021: LD_VAR 0 7
18025: STR
18026: PUSH
18027: LD_STRING ")
18029: STR
18030: PPUSH
18031: CALL_OW 559
// end else
18035: GO 18044
// ToLua ( getStreamItemsFromMission("","","") ) ;
18037: LD_STRING getStreamItemsFromMission("","","")
18039: PPUSH
18040: CALL_OW 559
// end ;
18044: LD_VAR 0 2
18048: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
18049: LD_EXP 40
18053: PUSH
18054: LD_EXP 45
18058: AND
18059: IFFALSE 18183
18061: GO 18063
18063: DISABLE
18064: LD_INT 0
18066: PPUSH
18067: PPUSH
// begin enable ;
18068: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
18069: LD_ADDR_VAR 0 2
18073: PUSH
18074: LD_INT 22
18076: PUSH
18077: LD_OWVAR 2
18081: PUSH
18082: EMPTY
18083: LIST
18084: LIST
18085: PUSH
18086: LD_INT 2
18088: PUSH
18089: LD_INT 34
18091: PUSH
18092: LD_INT 7
18094: PUSH
18095: EMPTY
18096: LIST
18097: LIST
18098: PUSH
18099: LD_INT 34
18101: PUSH
18102: LD_INT 45
18104: PUSH
18105: EMPTY
18106: LIST
18107: LIST
18108: PUSH
18109: LD_INT 34
18111: PUSH
18112: LD_INT 28
18114: PUSH
18115: EMPTY
18116: LIST
18117: LIST
18118: PUSH
18119: LD_INT 34
18121: PUSH
18122: LD_INT 47
18124: PUSH
18125: EMPTY
18126: LIST
18127: LIST
18128: PUSH
18129: EMPTY
18130: LIST
18131: LIST
18132: LIST
18133: LIST
18134: LIST
18135: PUSH
18136: EMPTY
18137: LIST
18138: LIST
18139: PPUSH
18140: CALL_OW 69
18144: ST_TO_ADDR
// if not tmp then
18145: LD_VAR 0 2
18149: NOT
18150: IFFALSE 18154
// exit ;
18152: GO 18183
// for i in tmp do
18154: LD_ADDR_VAR 0 1
18158: PUSH
18159: LD_VAR 0 2
18163: PUSH
18164: FOR_IN
18165: IFFALSE 18181
// begin SetLives ( i , 0 ) ;
18167: LD_VAR 0 1
18171: PPUSH
18172: LD_INT 0
18174: PPUSH
18175: CALL_OW 234
// end ;
18179: GO 18164
18181: POP
18182: POP
// end ;
18183: PPOPN 2
18185: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
18186: LD_EXP 40
18190: PUSH
18191: LD_EXP 46
18195: AND
18196: IFFALSE 18280
18198: GO 18200
18200: DISABLE
18201: LD_INT 0
18203: PPUSH
18204: PPUSH
// begin enable ;
18205: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
18206: LD_ADDR_VAR 0 2
18210: PUSH
18211: LD_INT 22
18213: PUSH
18214: LD_OWVAR 2
18218: PUSH
18219: EMPTY
18220: LIST
18221: LIST
18222: PUSH
18223: LD_INT 32
18225: PUSH
18226: LD_INT 3
18228: PUSH
18229: EMPTY
18230: LIST
18231: LIST
18232: PUSH
18233: EMPTY
18234: LIST
18235: LIST
18236: PPUSH
18237: CALL_OW 69
18241: ST_TO_ADDR
// if not tmp then
18242: LD_VAR 0 2
18246: NOT
18247: IFFALSE 18251
// exit ;
18249: GO 18280
// for i in tmp do
18251: LD_ADDR_VAR 0 1
18255: PUSH
18256: LD_VAR 0 2
18260: PUSH
18261: FOR_IN
18262: IFFALSE 18278
// begin SetLives ( i , 0 ) ;
18264: LD_VAR 0 1
18268: PPUSH
18269: LD_INT 0
18271: PPUSH
18272: CALL_OW 234
// end ;
18276: GO 18261
18278: POP
18279: POP
// end ;
18280: PPOPN 2
18282: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
18283: LD_EXP 40
18287: PUSH
18288: LD_EXP 43
18292: AND
18293: IFFALSE 18386
18295: GO 18297
18297: DISABLE
18298: LD_INT 0
18300: PPUSH
// begin enable ;
18301: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
18302: LD_ADDR_VAR 0 1
18306: PUSH
18307: LD_INT 22
18309: PUSH
18310: LD_OWVAR 2
18314: PUSH
18315: EMPTY
18316: LIST
18317: LIST
18318: PUSH
18319: LD_INT 2
18321: PUSH
18322: LD_INT 25
18324: PUSH
18325: LD_INT 5
18327: PUSH
18328: EMPTY
18329: LIST
18330: LIST
18331: PUSH
18332: LD_INT 25
18334: PUSH
18335: LD_INT 9
18337: PUSH
18338: EMPTY
18339: LIST
18340: LIST
18341: PUSH
18342: LD_INT 25
18344: PUSH
18345: LD_INT 8
18347: PUSH
18348: EMPTY
18349: LIST
18350: LIST
18351: PUSH
18352: EMPTY
18353: LIST
18354: LIST
18355: LIST
18356: LIST
18357: PUSH
18358: EMPTY
18359: LIST
18360: LIST
18361: PPUSH
18362: CALL_OW 69
18366: PUSH
18367: FOR_IN
18368: IFFALSE 18384
// begin SetClass ( i , 1 ) ;
18370: LD_VAR 0 1
18374: PPUSH
18375: LD_INT 1
18377: PPUSH
18378: CALL_OW 336
// end ;
18382: GO 18367
18384: POP
18385: POP
// end ;
18386: PPOPN 1
18388: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
18389: LD_EXP 40
18393: PUSH
18394: LD_EXP 44
18398: AND
18399: PUSH
18400: LD_OWVAR 65
18404: PUSH
18405: LD_INT 7
18407: LESS
18408: AND
18409: IFFALSE 18423
18411: GO 18413
18413: DISABLE
// begin enable ;
18414: ENABLE
// game_speed := 7 ;
18415: LD_ADDR_OWVAR 65
18419: PUSH
18420: LD_INT 7
18422: ST_TO_ADDR
// end ;
18423: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
18424: LD_EXP 40
18428: PUSH
18429: LD_EXP 47
18433: AND
18434: IFFALSE 18636
18436: GO 18438
18438: DISABLE
18439: LD_INT 0
18441: PPUSH
18442: PPUSH
18443: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18444: LD_ADDR_VAR 0 3
18448: PUSH
18449: LD_INT 81
18451: PUSH
18452: LD_OWVAR 2
18456: PUSH
18457: EMPTY
18458: LIST
18459: LIST
18460: PUSH
18461: LD_INT 21
18463: PUSH
18464: LD_INT 1
18466: PUSH
18467: EMPTY
18468: LIST
18469: LIST
18470: PUSH
18471: EMPTY
18472: LIST
18473: LIST
18474: PPUSH
18475: CALL_OW 69
18479: ST_TO_ADDR
// if not tmp then
18480: LD_VAR 0 3
18484: NOT
18485: IFFALSE 18489
// exit ;
18487: GO 18636
// if tmp > 5 then
18489: LD_VAR 0 3
18493: PUSH
18494: LD_INT 5
18496: GREATER
18497: IFFALSE 18509
// k := 5 else
18499: LD_ADDR_VAR 0 2
18503: PUSH
18504: LD_INT 5
18506: ST_TO_ADDR
18507: GO 18519
// k := tmp ;
18509: LD_ADDR_VAR 0 2
18513: PUSH
18514: LD_VAR 0 3
18518: ST_TO_ADDR
// for i := 1 to k do
18519: LD_ADDR_VAR 0 1
18523: PUSH
18524: DOUBLE
18525: LD_INT 1
18527: DEC
18528: ST_TO_ADDR
18529: LD_VAR 0 2
18533: PUSH
18534: FOR_TO
18535: IFFALSE 18634
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
18537: LD_VAR 0 3
18541: PUSH
18542: LD_VAR 0 1
18546: ARRAY
18547: PPUSH
18548: LD_VAR 0 1
18552: PUSH
18553: LD_INT 4
18555: MOD
18556: PUSH
18557: LD_INT 1
18559: PLUS
18560: PPUSH
18561: CALL_OW 259
18565: PUSH
18566: LD_INT 10
18568: LESS
18569: IFFALSE 18632
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
18571: LD_VAR 0 3
18575: PUSH
18576: LD_VAR 0 1
18580: ARRAY
18581: PPUSH
18582: LD_VAR 0 1
18586: PUSH
18587: LD_INT 4
18589: MOD
18590: PUSH
18591: LD_INT 1
18593: PLUS
18594: PPUSH
18595: LD_VAR 0 3
18599: PUSH
18600: LD_VAR 0 1
18604: ARRAY
18605: PPUSH
18606: LD_VAR 0 1
18610: PUSH
18611: LD_INT 4
18613: MOD
18614: PUSH
18615: LD_INT 1
18617: PLUS
18618: PPUSH
18619: CALL_OW 259
18623: PUSH
18624: LD_INT 1
18626: PLUS
18627: PPUSH
18628: CALL_OW 237
18632: GO 18534
18634: POP
18635: POP
// end ;
18636: PPOPN 3
18638: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
18639: LD_EXP 40
18643: PUSH
18644: LD_EXP 48
18648: AND
18649: IFFALSE 18669
18651: GO 18653
18653: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
18654: LD_INT 4
18656: PPUSH
18657: LD_OWVAR 2
18661: PPUSH
18662: LD_INT 0
18664: PPUSH
18665: CALL_OW 324
18669: END
// every 0 0$1 trigger StreamModeActive and sShovel do
18670: LD_EXP 40
18674: PUSH
18675: LD_EXP 77
18679: AND
18680: IFFALSE 18700
18682: GO 18684
18684: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
18685: LD_INT 19
18687: PPUSH
18688: LD_OWVAR 2
18692: PPUSH
18693: LD_INT 0
18695: PPUSH
18696: CALL_OW 324
18700: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
18701: LD_EXP 40
18705: PUSH
18706: LD_EXP 49
18710: AND
18711: IFFALSE 18813
18713: GO 18715
18715: DISABLE
18716: LD_INT 0
18718: PPUSH
18719: PPUSH
// begin enable ;
18720: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
18721: LD_ADDR_VAR 0 2
18725: PUSH
18726: LD_INT 22
18728: PUSH
18729: LD_OWVAR 2
18733: PUSH
18734: EMPTY
18735: LIST
18736: LIST
18737: PUSH
18738: LD_INT 2
18740: PUSH
18741: LD_INT 34
18743: PUSH
18744: LD_INT 11
18746: PUSH
18747: EMPTY
18748: LIST
18749: LIST
18750: PUSH
18751: LD_INT 34
18753: PUSH
18754: LD_INT 30
18756: PUSH
18757: EMPTY
18758: LIST
18759: LIST
18760: PUSH
18761: EMPTY
18762: LIST
18763: LIST
18764: LIST
18765: PUSH
18766: EMPTY
18767: LIST
18768: LIST
18769: PPUSH
18770: CALL_OW 69
18774: ST_TO_ADDR
// if not tmp then
18775: LD_VAR 0 2
18779: NOT
18780: IFFALSE 18784
// exit ;
18782: GO 18813
// for i in tmp do
18784: LD_ADDR_VAR 0 1
18788: PUSH
18789: LD_VAR 0 2
18793: PUSH
18794: FOR_IN
18795: IFFALSE 18811
// begin SetLives ( i , 0 ) ;
18797: LD_VAR 0 1
18801: PPUSH
18802: LD_INT 0
18804: PPUSH
18805: CALL_OW 234
// end ;
18809: GO 18794
18811: POP
18812: POP
// end ;
18813: PPOPN 2
18815: END
// every 0 0$1 trigger StreamModeActive and sBunker do
18816: LD_EXP 40
18820: PUSH
18821: LD_EXP 50
18825: AND
18826: IFFALSE 18846
18828: GO 18830
18830: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
18831: LD_INT 32
18833: PPUSH
18834: LD_OWVAR 2
18838: PPUSH
18839: LD_INT 0
18841: PPUSH
18842: CALL_OW 324
18846: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
18847: LD_EXP 40
18851: PUSH
18852: LD_EXP 51
18856: AND
18857: IFFALSE 19038
18859: GO 18861
18861: DISABLE
18862: LD_INT 0
18864: PPUSH
18865: PPUSH
18866: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18867: LD_ADDR_VAR 0 2
18871: PUSH
18872: LD_INT 22
18874: PUSH
18875: LD_OWVAR 2
18879: PUSH
18880: EMPTY
18881: LIST
18882: LIST
18883: PUSH
18884: LD_INT 33
18886: PUSH
18887: LD_INT 3
18889: PUSH
18890: EMPTY
18891: LIST
18892: LIST
18893: PUSH
18894: EMPTY
18895: LIST
18896: LIST
18897: PPUSH
18898: CALL_OW 69
18902: ST_TO_ADDR
// if not tmp then
18903: LD_VAR 0 2
18907: NOT
18908: IFFALSE 18912
// exit ;
18910: GO 19038
// side := 0 ;
18912: LD_ADDR_VAR 0 3
18916: PUSH
18917: LD_INT 0
18919: ST_TO_ADDR
// for i := 1 to 8 do
18920: LD_ADDR_VAR 0 1
18924: PUSH
18925: DOUBLE
18926: LD_INT 1
18928: DEC
18929: ST_TO_ADDR
18930: LD_INT 8
18932: PUSH
18933: FOR_TO
18934: IFFALSE 18982
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18936: LD_OWVAR 2
18940: PUSH
18941: LD_VAR 0 1
18945: NONEQUAL
18946: PUSH
18947: LD_OWVAR 2
18951: PPUSH
18952: LD_VAR 0 1
18956: PPUSH
18957: CALL_OW 81
18961: PUSH
18962: LD_INT 2
18964: EQUAL
18965: AND
18966: IFFALSE 18980
// begin side := i ;
18968: LD_ADDR_VAR 0 3
18972: PUSH
18973: LD_VAR 0 1
18977: ST_TO_ADDR
// break ;
18978: GO 18982
// end ;
18980: GO 18933
18982: POP
18983: POP
// if not side then
18984: LD_VAR 0 3
18988: NOT
18989: IFFALSE 18993
// exit ;
18991: GO 19038
// for i := 1 to tmp do
18993: LD_ADDR_VAR 0 1
18997: PUSH
18998: DOUBLE
18999: LD_INT 1
19001: DEC
19002: ST_TO_ADDR
19003: LD_VAR 0 2
19007: PUSH
19008: FOR_TO
19009: IFFALSE 19036
// if Prob ( 60 ) then
19011: LD_INT 60
19013: PPUSH
19014: CALL_OW 13
19018: IFFALSE 19034
// SetSide ( i , side ) ;
19020: LD_VAR 0 1
19024: PPUSH
19025: LD_VAR 0 3
19029: PPUSH
19030: CALL_OW 235
19034: GO 19008
19036: POP
19037: POP
// end ;
19038: PPOPN 3
19040: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
19041: LD_EXP 40
19045: PUSH
19046: LD_EXP 53
19050: AND
19051: IFFALSE 19170
19053: GO 19055
19055: DISABLE
19056: LD_INT 0
19058: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
19059: LD_ADDR_VAR 0 1
19063: PUSH
19064: LD_INT 22
19066: PUSH
19067: LD_OWVAR 2
19071: PUSH
19072: EMPTY
19073: LIST
19074: LIST
19075: PUSH
19076: LD_INT 21
19078: PUSH
19079: LD_INT 1
19081: PUSH
19082: EMPTY
19083: LIST
19084: LIST
19085: PUSH
19086: LD_INT 3
19088: PUSH
19089: LD_INT 23
19091: PUSH
19092: LD_INT 0
19094: PUSH
19095: EMPTY
19096: LIST
19097: LIST
19098: PUSH
19099: EMPTY
19100: LIST
19101: LIST
19102: PUSH
19103: EMPTY
19104: LIST
19105: LIST
19106: LIST
19107: PPUSH
19108: CALL_OW 69
19112: PUSH
19113: FOR_IN
19114: IFFALSE 19168
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
19116: LD_VAR 0 1
19120: PPUSH
19121: CALL_OW 257
19125: PUSH
19126: LD_INT 1
19128: PUSH
19129: LD_INT 2
19131: PUSH
19132: LD_INT 3
19134: PUSH
19135: LD_INT 4
19137: PUSH
19138: EMPTY
19139: LIST
19140: LIST
19141: LIST
19142: LIST
19143: IN
19144: IFFALSE 19166
// SetClass ( un , rand ( 1 , 4 ) ) ;
19146: LD_VAR 0 1
19150: PPUSH
19151: LD_INT 1
19153: PPUSH
19154: LD_INT 4
19156: PPUSH
19157: CALL_OW 12
19161: PPUSH
19162: CALL_OW 336
19166: GO 19113
19168: POP
19169: POP
// end ;
19170: PPOPN 1
19172: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
19173: LD_EXP 40
19177: PUSH
19178: LD_EXP 52
19182: AND
19183: IFFALSE 19262
19185: GO 19187
19187: DISABLE
19188: LD_INT 0
19190: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19191: LD_ADDR_VAR 0 1
19195: PUSH
19196: LD_INT 22
19198: PUSH
19199: LD_OWVAR 2
19203: PUSH
19204: EMPTY
19205: LIST
19206: LIST
19207: PUSH
19208: LD_INT 21
19210: PUSH
19211: LD_INT 3
19213: PUSH
19214: EMPTY
19215: LIST
19216: LIST
19217: PUSH
19218: EMPTY
19219: LIST
19220: LIST
19221: PPUSH
19222: CALL_OW 69
19226: ST_TO_ADDR
// if not tmp then
19227: LD_VAR 0 1
19231: NOT
19232: IFFALSE 19236
// exit ;
19234: GO 19262
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
19236: LD_VAR 0 1
19240: PUSH
19241: LD_INT 1
19243: PPUSH
19244: LD_VAR 0 1
19248: PPUSH
19249: CALL_OW 12
19253: ARRAY
19254: PPUSH
19255: LD_INT 100
19257: PPUSH
19258: CALL_OW 234
// end ;
19262: PPOPN 1
19264: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
19265: LD_EXP 40
19269: PUSH
19270: LD_EXP 54
19274: AND
19275: IFFALSE 19373
19277: GO 19279
19279: DISABLE
19280: LD_INT 0
19282: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19283: LD_ADDR_VAR 0 1
19287: PUSH
19288: LD_INT 22
19290: PUSH
19291: LD_OWVAR 2
19295: PUSH
19296: EMPTY
19297: LIST
19298: LIST
19299: PUSH
19300: LD_INT 21
19302: PUSH
19303: LD_INT 1
19305: PUSH
19306: EMPTY
19307: LIST
19308: LIST
19309: PUSH
19310: EMPTY
19311: LIST
19312: LIST
19313: PPUSH
19314: CALL_OW 69
19318: ST_TO_ADDR
// if not tmp then
19319: LD_VAR 0 1
19323: NOT
19324: IFFALSE 19328
// exit ;
19326: GO 19373
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
19328: LD_VAR 0 1
19332: PUSH
19333: LD_INT 1
19335: PPUSH
19336: LD_VAR 0 1
19340: PPUSH
19341: CALL_OW 12
19345: ARRAY
19346: PPUSH
19347: LD_INT 1
19349: PPUSH
19350: LD_INT 4
19352: PPUSH
19353: CALL_OW 12
19357: PPUSH
19358: LD_INT 3000
19360: PPUSH
19361: LD_INT 9000
19363: PPUSH
19364: CALL_OW 12
19368: PPUSH
19369: CALL_OW 492
// end ;
19373: PPOPN 1
19375: END
// every 0 0$1 trigger StreamModeActive and sDepot do
19376: LD_EXP 40
19380: PUSH
19381: LD_EXP 55
19385: AND
19386: IFFALSE 19406
19388: GO 19390
19390: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
19391: LD_INT 1
19393: PPUSH
19394: LD_OWVAR 2
19398: PPUSH
19399: LD_INT 0
19401: PPUSH
19402: CALL_OW 324
19406: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
19407: LD_EXP 40
19411: PUSH
19412: LD_EXP 56
19416: AND
19417: IFFALSE 19500
19419: GO 19421
19421: DISABLE
19422: LD_INT 0
19424: PPUSH
19425: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19426: LD_ADDR_VAR 0 2
19430: PUSH
19431: LD_INT 22
19433: PUSH
19434: LD_OWVAR 2
19438: PUSH
19439: EMPTY
19440: LIST
19441: LIST
19442: PUSH
19443: LD_INT 21
19445: PUSH
19446: LD_INT 3
19448: PUSH
19449: EMPTY
19450: LIST
19451: LIST
19452: PUSH
19453: EMPTY
19454: LIST
19455: LIST
19456: PPUSH
19457: CALL_OW 69
19461: ST_TO_ADDR
// if not tmp then
19462: LD_VAR 0 2
19466: NOT
19467: IFFALSE 19471
// exit ;
19469: GO 19500
// for i in tmp do
19471: LD_ADDR_VAR 0 1
19475: PUSH
19476: LD_VAR 0 2
19480: PUSH
19481: FOR_IN
19482: IFFALSE 19498
// SetBLevel ( i , 10 ) ;
19484: LD_VAR 0 1
19488: PPUSH
19489: LD_INT 10
19491: PPUSH
19492: CALL_OW 241
19496: GO 19481
19498: POP
19499: POP
// end ;
19500: PPOPN 2
19502: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
19503: LD_EXP 40
19507: PUSH
19508: LD_EXP 57
19512: AND
19513: IFFALSE 19624
19515: GO 19517
19517: DISABLE
19518: LD_INT 0
19520: PPUSH
19521: PPUSH
19522: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19523: LD_ADDR_VAR 0 3
19527: PUSH
19528: LD_INT 22
19530: PUSH
19531: LD_OWVAR 2
19535: PUSH
19536: EMPTY
19537: LIST
19538: LIST
19539: PUSH
19540: LD_INT 25
19542: PUSH
19543: LD_INT 1
19545: PUSH
19546: EMPTY
19547: LIST
19548: LIST
19549: PUSH
19550: EMPTY
19551: LIST
19552: LIST
19553: PPUSH
19554: CALL_OW 69
19558: ST_TO_ADDR
// if not tmp then
19559: LD_VAR 0 3
19563: NOT
19564: IFFALSE 19568
// exit ;
19566: GO 19624
// un := tmp [ rand ( 1 , tmp ) ] ;
19568: LD_ADDR_VAR 0 2
19572: PUSH
19573: LD_VAR 0 3
19577: PUSH
19578: LD_INT 1
19580: PPUSH
19581: LD_VAR 0 3
19585: PPUSH
19586: CALL_OW 12
19590: ARRAY
19591: ST_TO_ADDR
// if Crawls ( un ) then
19592: LD_VAR 0 2
19596: PPUSH
19597: CALL_OW 318
19601: IFFALSE 19612
// ComWalk ( un ) ;
19603: LD_VAR 0 2
19607: PPUSH
19608: CALL_OW 138
// SetClass ( un , class_sniper ) ;
19612: LD_VAR 0 2
19616: PPUSH
19617: LD_INT 5
19619: PPUSH
19620: CALL_OW 336
// end ;
19624: PPOPN 3
19626: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
19627: LD_EXP 40
19631: PUSH
19632: LD_EXP 58
19636: AND
19637: PUSH
19638: LD_OWVAR 67
19642: PUSH
19643: LD_INT 4
19645: LESS
19646: AND
19647: IFFALSE 19666
19649: GO 19651
19651: DISABLE
// begin Difficulty := Difficulty + 1 ;
19652: LD_ADDR_OWVAR 67
19656: PUSH
19657: LD_OWVAR 67
19661: PUSH
19662: LD_INT 1
19664: PLUS
19665: ST_TO_ADDR
// end ;
19666: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
19667: LD_EXP 40
19671: PUSH
19672: LD_EXP 59
19676: AND
19677: IFFALSE 19780
19679: GO 19681
19681: DISABLE
19682: LD_INT 0
19684: PPUSH
// begin for i := 1 to 5 do
19685: LD_ADDR_VAR 0 1
19689: PUSH
19690: DOUBLE
19691: LD_INT 1
19693: DEC
19694: ST_TO_ADDR
19695: LD_INT 5
19697: PUSH
19698: FOR_TO
19699: IFFALSE 19778
// begin uc_nation := nation_nature ;
19701: LD_ADDR_OWVAR 21
19705: PUSH
19706: LD_INT 0
19708: ST_TO_ADDR
// uc_side := 0 ;
19709: LD_ADDR_OWVAR 20
19713: PUSH
19714: LD_INT 0
19716: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19717: LD_ADDR_OWVAR 29
19721: PUSH
19722: LD_INT 12
19724: PUSH
19725: LD_INT 12
19727: PUSH
19728: EMPTY
19729: LIST
19730: LIST
19731: ST_TO_ADDR
// hc_agressivity := 20 ;
19732: LD_ADDR_OWVAR 35
19736: PUSH
19737: LD_INT 20
19739: ST_TO_ADDR
// hc_class := class_tiger ;
19740: LD_ADDR_OWVAR 28
19744: PUSH
19745: LD_INT 14
19747: ST_TO_ADDR
// hc_gallery :=  ;
19748: LD_ADDR_OWVAR 33
19752: PUSH
19753: LD_STRING 
19755: ST_TO_ADDR
// hc_name :=  ;
19756: LD_ADDR_OWVAR 26
19760: PUSH
19761: LD_STRING 
19763: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
19764: CALL_OW 44
19768: PPUSH
19769: LD_INT 0
19771: PPUSH
19772: CALL_OW 51
// end ;
19776: GO 19698
19778: POP
19779: POP
// end ;
19780: PPOPN 1
19782: END
// every 0 0$1 trigger StreamModeActive and sBomb do
19783: LD_EXP 40
19787: PUSH
19788: LD_EXP 60
19792: AND
19793: IFFALSE 19802
19795: GO 19797
19797: DISABLE
// StreamSibBomb ;
19798: CALL 19803 0 0
19802: END
// export function StreamSibBomb ; var i , x , y ; begin
19803: LD_INT 0
19805: PPUSH
19806: PPUSH
19807: PPUSH
19808: PPUSH
// result := false ;
19809: LD_ADDR_VAR 0 1
19813: PUSH
19814: LD_INT 0
19816: ST_TO_ADDR
// for i := 1 to 16 do
19817: LD_ADDR_VAR 0 2
19821: PUSH
19822: DOUBLE
19823: LD_INT 1
19825: DEC
19826: ST_TO_ADDR
19827: LD_INT 16
19829: PUSH
19830: FOR_TO
19831: IFFALSE 20030
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19833: LD_ADDR_VAR 0 3
19837: PUSH
19838: LD_INT 10
19840: PUSH
19841: LD_INT 20
19843: PUSH
19844: LD_INT 30
19846: PUSH
19847: LD_INT 40
19849: PUSH
19850: LD_INT 50
19852: PUSH
19853: LD_INT 60
19855: PUSH
19856: LD_INT 70
19858: PUSH
19859: LD_INT 80
19861: PUSH
19862: LD_INT 90
19864: PUSH
19865: LD_INT 100
19867: PUSH
19868: LD_INT 110
19870: PUSH
19871: LD_INT 120
19873: PUSH
19874: LD_INT 130
19876: PUSH
19877: LD_INT 140
19879: PUSH
19880: LD_INT 150
19882: PUSH
19883: EMPTY
19884: LIST
19885: LIST
19886: LIST
19887: LIST
19888: LIST
19889: LIST
19890: LIST
19891: LIST
19892: LIST
19893: LIST
19894: LIST
19895: LIST
19896: LIST
19897: LIST
19898: LIST
19899: PUSH
19900: LD_INT 1
19902: PPUSH
19903: LD_INT 15
19905: PPUSH
19906: CALL_OW 12
19910: ARRAY
19911: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19912: LD_ADDR_VAR 0 4
19916: PUSH
19917: LD_INT 10
19919: PUSH
19920: LD_INT 20
19922: PUSH
19923: LD_INT 30
19925: PUSH
19926: LD_INT 40
19928: PUSH
19929: LD_INT 50
19931: PUSH
19932: LD_INT 60
19934: PUSH
19935: LD_INT 70
19937: PUSH
19938: LD_INT 80
19940: PUSH
19941: LD_INT 90
19943: PUSH
19944: LD_INT 100
19946: PUSH
19947: LD_INT 110
19949: PUSH
19950: LD_INT 120
19952: PUSH
19953: LD_INT 130
19955: PUSH
19956: LD_INT 140
19958: PUSH
19959: LD_INT 150
19961: PUSH
19962: EMPTY
19963: LIST
19964: LIST
19965: LIST
19966: LIST
19967: LIST
19968: LIST
19969: LIST
19970: LIST
19971: LIST
19972: LIST
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: PUSH
19979: LD_INT 1
19981: PPUSH
19982: LD_INT 15
19984: PPUSH
19985: CALL_OW 12
19989: ARRAY
19990: ST_TO_ADDR
// if ValidHex ( x , y ) then
19991: LD_VAR 0 3
19995: PPUSH
19996: LD_VAR 0 4
20000: PPUSH
20001: CALL_OW 488
20005: IFFALSE 20028
// begin result := [ x , y ] ;
20007: LD_ADDR_VAR 0 1
20011: PUSH
20012: LD_VAR 0 3
20016: PUSH
20017: LD_VAR 0 4
20021: PUSH
20022: EMPTY
20023: LIST
20024: LIST
20025: ST_TO_ADDR
// break ;
20026: GO 20030
// end ; end ;
20028: GO 19830
20030: POP
20031: POP
// if result then
20032: LD_VAR 0 1
20036: IFFALSE 20096
// begin ToLua ( playSibBomb() ) ;
20038: LD_STRING playSibBomb()
20040: PPUSH
20041: CALL_OW 559
// wait ( 0 0$14 ) ;
20045: LD_INT 490
20047: PPUSH
20048: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
20052: LD_VAR 0 1
20056: PUSH
20057: LD_INT 1
20059: ARRAY
20060: PPUSH
20061: LD_VAR 0 1
20065: PUSH
20066: LD_INT 2
20068: ARRAY
20069: PPUSH
20070: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
20074: LD_VAR 0 1
20078: PUSH
20079: LD_INT 1
20081: ARRAY
20082: PPUSH
20083: LD_VAR 0 1
20087: PUSH
20088: LD_INT 2
20090: ARRAY
20091: PPUSH
20092: CALL_OW 429
// end ; end ;
20096: LD_VAR 0 1
20100: RET
// every 0 0$1 trigger StreamModeActive and sReset do
20101: LD_EXP 40
20105: PUSH
20106: LD_EXP 62
20110: AND
20111: IFFALSE 20123
20113: GO 20115
20115: DISABLE
// YouLost (  ) ;
20116: LD_STRING 
20118: PPUSH
20119: CALL_OW 104
20123: END
// every 0 0$1 trigger StreamModeActive and sFog do
20124: LD_EXP 40
20128: PUSH
20129: LD_EXP 61
20133: AND
20134: IFFALSE 20148
20136: GO 20138
20138: DISABLE
// FogOff ( your_side ) ;
20139: LD_OWVAR 2
20143: PPUSH
20144: CALL_OW 344
20148: END
// every 0 0$1 trigger StreamModeActive and sSun do
20149: LD_EXP 40
20153: PUSH
20154: LD_EXP 63
20158: AND
20159: IFFALSE 20187
20161: GO 20163
20163: DISABLE
// begin solar_recharge_percent := 0 ;
20164: LD_ADDR_OWVAR 79
20168: PUSH
20169: LD_INT 0
20171: ST_TO_ADDR
// wait ( 5 5$00 ) ;
20172: LD_INT 10500
20174: PPUSH
20175: CALL_OW 67
// solar_recharge_percent := 100 ;
20179: LD_ADDR_OWVAR 79
20183: PUSH
20184: LD_INT 100
20186: ST_TO_ADDR
// end ;
20187: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
20188: LD_EXP 40
20192: PUSH
20193: LD_EXP 64
20197: AND
20198: IFFALSE 20437
20200: GO 20202
20202: DISABLE
20203: LD_INT 0
20205: PPUSH
20206: PPUSH
20207: PPUSH
// begin tmp := [ ] ;
20208: LD_ADDR_VAR 0 3
20212: PUSH
20213: EMPTY
20214: ST_TO_ADDR
// for i := 1 to 6 do
20215: LD_ADDR_VAR 0 1
20219: PUSH
20220: DOUBLE
20221: LD_INT 1
20223: DEC
20224: ST_TO_ADDR
20225: LD_INT 6
20227: PUSH
20228: FOR_TO
20229: IFFALSE 20334
// begin uc_nation := nation_nature ;
20231: LD_ADDR_OWVAR 21
20235: PUSH
20236: LD_INT 0
20238: ST_TO_ADDR
// uc_side := 0 ;
20239: LD_ADDR_OWVAR 20
20243: PUSH
20244: LD_INT 0
20246: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20247: LD_ADDR_OWVAR 29
20251: PUSH
20252: LD_INT 12
20254: PUSH
20255: LD_INT 12
20257: PUSH
20258: EMPTY
20259: LIST
20260: LIST
20261: ST_TO_ADDR
// hc_agressivity := 20 ;
20262: LD_ADDR_OWVAR 35
20266: PUSH
20267: LD_INT 20
20269: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
20270: LD_ADDR_OWVAR 28
20274: PUSH
20275: LD_INT 17
20277: ST_TO_ADDR
// hc_gallery :=  ;
20278: LD_ADDR_OWVAR 33
20282: PUSH
20283: LD_STRING 
20285: ST_TO_ADDR
// hc_name :=  ;
20286: LD_ADDR_OWVAR 26
20290: PUSH
20291: LD_STRING 
20293: ST_TO_ADDR
// un := CreateHuman ;
20294: LD_ADDR_VAR 0 2
20298: PUSH
20299: CALL_OW 44
20303: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
20304: LD_VAR 0 2
20308: PPUSH
20309: LD_INT 1
20311: PPUSH
20312: CALL_OW 51
// tmp := tmp ^ un ;
20316: LD_ADDR_VAR 0 3
20320: PUSH
20321: LD_VAR 0 3
20325: PUSH
20326: LD_VAR 0 2
20330: ADD
20331: ST_TO_ADDR
// end ;
20332: GO 20228
20334: POP
20335: POP
// repeat wait ( 0 0$1 ) ;
20336: LD_INT 35
20338: PPUSH
20339: CALL_OW 67
// for un in tmp do
20343: LD_ADDR_VAR 0 2
20347: PUSH
20348: LD_VAR 0 3
20352: PUSH
20353: FOR_IN
20354: IFFALSE 20428
// begin if IsDead ( un ) then
20356: LD_VAR 0 2
20360: PPUSH
20361: CALL_OW 301
20365: IFFALSE 20385
// begin tmp := tmp diff un ;
20367: LD_ADDR_VAR 0 3
20371: PUSH
20372: LD_VAR 0 3
20376: PUSH
20377: LD_VAR 0 2
20381: DIFF
20382: ST_TO_ADDR
// continue ;
20383: GO 20353
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
20385: LD_VAR 0 2
20389: PPUSH
20390: LD_INT 3
20392: PUSH
20393: LD_INT 22
20395: PUSH
20396: LD_INT 0
20398: PUSH
20399: EMPTY
20400: LIST
20401: LIST
20402: PUSH
20403: EMPTY
20404: LIST
20405: LIST
20406: PPUSH
20407: CALL_OW 69
20411: PPUSH
20412: LD_VAR 0 2
20416: PPUSH
20417: CALL_OW 74
20421: PPUSH
20422: CALL_OW 115
// end ;
20426: GO 20353
20428: POP
20429: POP
// until not tmp ;
20430: LD_VAR 0 3
20434: NOT
20435: IFFALSE 20336
// end ;
20437: PPOPN 3
20439: END
// every 0 0$1 trigger StreamModeActive and sTroll do
20440: LD_EXP 40
20444: PUSH
20445: LD_EXP 65
20449: AND
20450: IFFALSE 20504
20452: GO 20454
20454: DISABLE
// begin ToLua ( displayTroll(); ) ;
20455: LD_STRING displayTroll();
20457: PPUSH
20458: CALL_OW 559
// wait ( 3 3$00 ) ;
20462: LD_INT 6300
20464: PPUSH
20465: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20469: LD_STRING hideTroll();
20471: PPUSH
20472: CALL_OW 559
// wait ( 1 1$00 ) ;
20476: LD_INT 2100
20478: PPUSH
20479: CALL_OW 67
// ToLua ( displayTroll(); ) ;
20483: LD_STRING displayTroll();
20485: PPUSH
20486: CALL_OW 559
// wait ( 1 1$00 ) ;
20490: LD_INT 2100
20492: PPUSH
20493: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20497: LD_STRING hideTroll();
20499: PPUSH
20500: CALL_OW 559
// end ;
20504: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
20505: LD_EXP 40
20509: PUSH
20510: LD_EXP 66
20514: AND
20515: IFFALSE 20578
20517: GO 20519
20519: DISABLE
20520: LD_INT 0
20522: PPUSH
// begin p := 0 ;
20523: LD_ADDR_VAR 0 1
20527: PUSH
20528: LD_INT 0
20530: ST_TO_ADDR
// repeat game_speed := 1 ;
20531: LD_ADDR_OWVAR 65
20535: PUSH
20536: LD_INT 1
20538: ST_TO_ADDR
// wait ( 0 0$1 ) ;
20539: LD_INT 35
20541: PPUSH
20542: CALL_OW 67
// p := p + 1 ;
20546: LD_ADDR_VAR 0 1
20550: PUSH
20551: LD_VAR 0 1
20555: PUSH
20556: LD_INT 1
20558: PLUS
20559: ST_TO_ADDR
// until p >= 60 ;
20560: LD_VAR 0 1
20564: PUSH
20565: LD_INT 60
20567: GREATEREQUAL
20568: IFFALSE 20531
// game_speed := 4 ;
20570: LD_ADDR_OWVAR 65
20574: PUSH
20575: LD_INT 4
20577: ST_TO_ADDR
// end ;
20578: PPOPN 1
20580: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
20581: LD_EXP 40
20585: PUSH
20586: LD_EXP 67
20590: AND
20591: IFFALSE 20737
20593: GO 20595
20595: DISABLE
20596: LD_INT 0
20598: PPUSH
20599: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20600: LD_ADDR_VAR 0 1
20604: PUSH
20605: LD_INT 22
20607: PUSH
20608: LD_OWVAR 2
20612: PUSH
20613: EMPTY
20614: LIST
20615: LIST
20616: PUSH
20617: LD_INT 2
20619: PUSH
20620: LD_INT 30
20622: PUSH
20623: LD_INT 0
20625: PUSH
20626: EMPTY
20627: LIST
20628: LIST
20629: PUSH
20630: LD_INT 30
20632: PUSH
20633: LD_INT 1
20635: PUSH
20636: EMPTY
20637: LIST
20638: LIST
20639: PUSH
20640: EMPTY
20641: LIST
20642: LIST
20643: LIST
20644: PUSH
20645: EMPTY
20646: LIST
20647: LIST
20648: PPUSH
20649: CALL_OW 69
20653: ST_TO_ADDR
// if not depot then
20654: LD_VAR 0 1
20658: NOT
20659: IFFALSE 20663
// exit ;
20661: GO 20737
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20663: LD_ADDR_VAR 0 2
20667: PUSH
20668: LD_VAR 0 1
20672: PUSH
20673: LD_INT 1
20675: PPUSH
20676: LD_VAR 0 1
20680: PPUSH
20681: CALL_OW 12
20685: ARRAY
20686: PPUSH
20687: CALL_OW 274
20691: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
20692: LD_VAR 0 2
20696: PPUSH
20697: LD_INT 1
20699: PPUSH
20700: LD_INT 0
20702: PPUSH
20703: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
20707: LD_VAR 0 2
20711: PPUSH
20712: LD_INT 2
20714: PPUSH
20715: LD_INT 0
20717: PPUSH
20718: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
20722: LD_VAR 0 2
20726: PPUSH
20727: LD_INT 3
20729: PPUSH
20730: LD_INT 0
20732: PPUSH
20733: CALL_OW 277
// end ;
20737: PPOPN 2
20739: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
20740: LD_EXP 40
20744: PUSH
20745: LD_EXP 68
20749: AND
20750: IFFALSE 20847
20752: GO 20754
20754: DISABLE
20755: LD_INT 0
20757: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20758: LD_ADDR_VAR 0 1
20762: PUSH
20763: LD_INT 22
20765: PUSH
20766: LD_OWVAR 2
20770: PUSH
20771: EMPTY
20772: LIST
20773: LIST
20774: PUSH
20775: LD_INT 21
20777: PUSH
20778: LD_INT 1
20780: PUSH
20781: EMPTY
20782: LIST
20783: LIST
20784: PUSH
20785: LD_INT 3
20787: PUSH
20788: LD_INT 23
20790: PUSH
20791: LD_INT 0
20793: PUSH
20794: EMPTY
20795: LIST
20796: LIST
20797: PUSH
20798: EMPTY
20799: LIST
20800: LIST
20801: PUSH
20802: EMPTY
20803: LIST
20804: LIST
20805: LIST
20806: PPUSH
20807: CALL_OW 69
20811: ST_TO_ADDR
// if not tmp then
20812: LD_VAR 0 1
20816: NOT
20817: IFFALSE 20821
// exit ;
20819: GO 20847
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
20821: LD_VAR 0 1
20825: PUSH
20826: LD_INT 1
20828: PPUSH
20829: LD_VAR 0 1
20833: PPUSH
20834: CALL_OW 12
20838: ARRAY
20839: PPUSH
20840: LD_INT 200
20842: PPUSH
20843: CALL_OW 234
// end ;
20847: PPOPN 1
20849: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
20850: LD_EXP 40
20854: PUSH
20855: LD_EXP 69
20859: AND
20860: IFFALSE 20939
20862: GO 20864
20864: DISABLE
20865: LD_INT 0
20867: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20868: LD_ADDR_VAR 0 1
20872: PUSH
20873: LD_INT 22
20875: PUSH
20876: LD_OWVAR 2
20880: PUSH
20881: EMPTY
20882: LIST
20883: LIST
20884: PUSH
20885: LD_INT 21
20887: PUSH
20888: LD_INT 2
20890: PUSH
20891: EMPTY
20892: LIST
20893: LIST
20894: PUSH
20895: EMPTY
20896: LIST
20897: LIST
20898: PPUSH
20899: CALL_OW 69
20903: ST_TO_ADDR
// if not tmp then
20904: LD_VAR 0 1
20908: NOT
20909: IFFALSE 20913
// exit ;
20911: GO 20939
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20913: LD_VAR 0 1
20917: PUSH
20918: LD_INT 1
20920: PPUSH
20921: LD_VAR 0 1
20925: PPUSH
20926: CALL_OW 12
20930: ARRAY
20931: PPUSH
20932: LD_INT 60
20934: PPUSH
20935: CALL_OW 234
// end ;
20939: PPOPN 1
20941: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20942: LD_EXP 40
20946: PUSH
20947: LD_EXP 70
20951: AND
20952: IFFALSE 21051
20954: GO 20956
20956: DISABLE
20957: LD_INT 0
20959: PPUSH
20960: PPUSH
// begin enable ;
20961: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20962: LD_ADDR_VAR 0 1
20966: PUSH
20967: LD_INT 22
20969: PUSH
20970: LD_OWVAR 2
20974: PUSH
20975: EMPTY
20976: LIST
20977: LIST
20978: PUSH
20979: LD_INT 61
20981: PUSH
20982: EMPTY
20983: LIST
20984: PUSH
20985: LD_INT 33
20987: PUSH
20988: LD_INT 2
20990: PUSH
20991: EMPTY
20992: LIST
20993: LIST
20994: PUSH
20995: EMPTY
20996: LIST
20997: LIST
20998: LIST
20999: PPUSH
21000: CALL_OW 69
21004: ST_TO_ADDR
// if not tmp then
21005: LD_VAR 0 1
21009: NOT
21010: IFFALSE 21014
// exit ;
21012: GO 21051
// for i in tmp do
21014: LD_ADDR_VAR 0 2
21018: PUSH
21019: LD_VAR 0 1
21023: PUSH
21024: FOR_IN
21025: IFFALSE 21049
// if IsControledBy ( i ) then
21027: LD_VAR 0 2
21031: PPUSH
21032: CALL_OW 312
21036: IFFALSE 21047
// ComUnlink ( i ) ;
21038: LD_VAR 0 2
21042: PPUSH
21043: CALL_OW 136
21047: GO 21024
21049: POP
21050: POP
// end ;
21051: PPOPN 2
21053: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
21054: LD_EXP 40
21058: PUSH
21059: LD_EXP 71
21063: AND
21064: IFFALSE 21204
21066: GO 21068
21068: DISABLE
21069: LD_INT 0
21071: PPUSH
21072: PPUSH
// begin ToLua ( displayPowell(); ) ;
21073: LD_STRING displayPowell();
21075: PPUSH
21076: CALL_OW 559
// uc_side := 0 ;
21080: LD_ADDR_OWVAR 20
21084: PUSH
21085: LD_INT 0
21087: ST_TO_ADDR
// uc_nation := 2 ;
21088: LD_ADDR_OWVAR 21
21092: PUSH
21093: LD_INT 2
21095: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
21096: LD_ADDR_OWVAR 37
21100: PUSH
21101: LD_INT 14
21103: ST_TO_ADDR
// vc_engine := engine_siberite ;
21104: LD_ADDR_OWVAR 39
21108: PUSH
21109: LD_INT 3
21111: ST_TO_ADDR
// vc_control := control_apeman ;
21112: LD_ADDR_OWVAR 38
21116: PUSH
21117: LD_INT 5
21119: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
21120: LD_ADDR_OWVAR 40
21124: PUSH
21125: LD_INT 29
21127: ST_TO_ADDR
// un := CreateVehicle ;
21128: LD_ADDR_VAR 0 2
21132: PUSH
21133: CALL_OW 45
21137: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21138: LD_VAR 0 2
21142: PPUSH
21143: LD_INT 1
21145: PPUSH
21146: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21150: LD_INT 35
21152: PPUSH
21153: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21157: LD_VAR 0 2
21161: PPUSH
21162: LD_INT 22
21164: PUSH
21165: LD_OWVAR 2
21169: PUSH
21170: EMPTY
21171: LIST
21172: LIST
21173: PPUSH
21174: CALL_OW 69
21178: PPUSH
21179: LD_VAR 0 2
21183: PPUSH
21184: CALL_OW 74
21188: PPUSH
21189: CALL_OW 115
// until IsDead ( un ) ;
21193: LD_VAR 0 2
21197: PPUSH
21198: CALL_OW 301
21202: IFFALSE 21150
// end ;
21204: PPOPN 2
21206: END
// every 0 0$1 trigger StreamModeActive and sStu do
21207: LD_EXP 40
21211: PUSH
21212: LD_EXP 79
21216: AND
21217: IFFALSE 21233
21219: GO 21221
21221: DISABLE
// begin ToLua ( displayStucuk(); ) ;
21222: LD_STRING displayStucuk();
21224: PPUSH
21225: CALL_OW 559
// ResetFog ;
21229: CALL_OW 335
// end ;
21233: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
21234: LD_EXP 40
21238: PUSH
21239: LD_EXP 72
21243: AND
21244: IFFALSE 21385
21246: GO 21248
21248: DISABLE
21249: LD_INT 0
21251: PPUSH
21252: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21253: LD_ADDR_VAR 0 2
21257: PUSH
21258: LD_INT 22
21260: PUSH
21261: LD_OWVAR 2
21265: PUSH
21266: EMPTY
21267: LIST
21268: LIST
21269: PUSH
21270: LD_INT 21
21272: PUSH
21273: LD_INT 1
21275: PUSH
21276: EMPTY
21277: LIST
21278: LIST
21279: PUSH
21280: EMPTY
21281: LIST
21282: LIST
21283: PPUSH
21284: CALL_OW 69
21288: ST_TO_ADDR
// if not tmp then
21289: LD_VAR 0 2
21293: NOT
21294: IFFALSE 21298
// exit ;
21296: GO 21385
// un := tmp [ rand ( 1 , tmp ) ] ;
21298: LD_ADDR_VAR 0 1
21302: PUSH
21303: LD_VAR 0 2
21307: PUSH
21308: LD_INT 1
21310: PPUSH
21311: LD_VAR 0 2
21315: PPUSH
21316: CALL_OW 12
21320: ARRAY
21321: ST_TO_ADDR
// SetSide ( un , 0 ) ;
21322: LD_VAR 0 1
21326: PPUSH
21327: LD_INT 0
21329: PPUSH
21330: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
21334: LD_VAR 0 1
21338: PPUSH
21339: LD_OWVAR 3
21343: PUSH
21344: LD_VAR 0 1
21348: DIFF
21349: PPUSH
21350: LD_VAR 0 1
21354: PPUSH
21355: CALL_OW 74
21359: PPUSH
21360: CALL_OW 115
// wait ( 0 0$20 ) ;
21364: LD_INT 700
21366: PPUSH
21367: CALL_OW 67
// SetSide ( un , your_side ) ;
21371: LD_VAR 0 1
21375: PPUSH
21376: LD_OWVAR 2
21380: PPUSH
21381: CALL_OW 235
// end ;
21385: PPOPN 2
21387: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
21388: LD_EXP 40
21392: PUSH
21393: LD_EXP 73
21397: AND
21398: IFFALSE 21504
21400: GO 21402
21402: DISABLE
21403: LD_INT 0
21405: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21406: LD_ADDR_VAR 0 1
21410: PUSH
21411: LD_INT 22
21413: PUSH
21414: LD_OWVAR 2
21418: PUSH
21419: EMPTY
21420: LIST
21421: LIST
21422: PUSH
21423: LD_INT 2
21425: PUSH
21426: LD_INT 30
21428: PUSH
21429: LD_INT 0
21431: PUSH
21432: EMPTY
21433: LIST
21434: LIST
21435: PUSH
21436: LD_INT 30
21438: PUSH
21439: LD_INT 1
21441: PUSH
21442: EMPTY
21443: LIST
21444: LIST
21445: PUSH
21446: EMPTY
21447: LIST
21448: LIST
21449: LIST
21450: PUSH
21451: EMPTY
21452: LIST
21453: LIST
21454: PPUSH
21455: CALL_OW 69
21459: ST_TO_ADDR
// if not depot then
21460: LD_VAR 0 1
21464: NOT
21465: IFFALSE 21469
// exit ;
21467: GO 21504
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
21469: LD_VAR 0 1
21473: PUSH
21474: LD_INT 1
21476: ARRAY
21477: PPUSH
21478: CALL_OW 250
21482: PPUSH
21483: LD_VAR 0 1
21487: PUSH
21488: LD_INT 1
21490: ARRAY
21491: PPUSH
21492: CALL_OW 251
21496: PPUSH
21497: LD_INT 70
21499: PPUSH
21500: CALL_OW 495
// end ;
21504: PPOPN 1
21506: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
21507: LD_EXP 40
21511: PUSH
21512: LD_EXP 74
21516: AND
21517: IFFALSE 21728
21519: GO 21521
21521: DISABLE
21522: LD_INT 0
21524: PPUSH
21525: PPUSH
21526: PPUSH
21527: PPUSH
21528: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21529: LD_ADDR_VAR 0 5
21533: PUSH
21534: LD_INT 22
21536: PUSH
21537: LD_OWVAR 2
21541: PUSH
21542: EMPTY
21543: LIST
21544: LIST
21545: PUSH
21546: LD_INT 21
21548: PUSH
21549: LD_INT 1
21551: PUSH
21552: EMPTY
21553: LIST
21554: LIST
21555: PUSH
21556: EMPTY
21557: LIST
21558: LIST
21559: PPUSH
21560: CALL_OW 69
21564: ST_TO_ADDR
// if not tmp then
21565: LD_VAR 0 5
21569: NOT
21570: IFFALSE 21574
// exit ;
21572: GO 21728
// for i in tmp do
21574: LD_ADDR_VAR 0 1
21578: PUSH
21579: LD_VAR 0 5
21583: PUSH
21584: FOR_IN
21585: IFFALSE 21726
// begin d := rand ( 0 , 5 ) ;
21587: LD_ADDR_VAR 0 4
21591: PUSH
21592: LD_INT 0
21594: PPUSH
21595: LD_INT 5
21597: PPUSH
21598: CALL_OW 12
21602: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
21603: LD_ADDR_VAR 0 2
21607: PUSH
21608: LD_VAR 0 1
21612: PPUSH
21613: CALL_OW 250
21617: PPUSH
21618: LD_VAR 0 4
21622: PPUSH
21623: LD_INT 3
21625: PPUSH
21626: LD_INT 12
21628: PPUSH
21629: CALL_OW 12
21633: PPUSH
21634: CALL_OW 272
21638: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
21639: LD_ADDR_VAR 0 3
21643: PUSH
21644: LD_VAR 0 1
21648: PPUSH
21649: CALL_OW 251
21653: PPUSH
21654: LD_VAR 0 4
21658: PPUSH
21659: LD_INT 3
21661: PPUSH
21662: LD_INT 12
21664: PPUSH
21665: CALL_OW 12
21669: PPUSH
21670: CALL_OW 273
21674: ST_TO_ADDR
// if ValidHex ( x , y ) then
21675: LD_VAR 0 2
21679: PPUSH
21680: LD_VAR 0 3
21684: PPUSH
21685: CALL_OW 488
21689: IFFALSE 21724
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
21691: LD_VAR 0 1
21695: PPUSH
21696: LD_VAR 0 2
21700: PPUSH
21701: LD_VAR 0 3
21705: PPUSH
21706: LD_INT 3
21708: PPUSH
21709: LD_INT 6
21711: PPUSH
21712: CALL_OW 12
21716: PPUSH
21717: LD_INT 1
21719: PPUSH
21720: CALL_OW 483
// end ;
21724: GO 21584
21726: POP
21727: POP
// end ;
21728: PPOPN 5
21730: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
21731: LD_EXP 40
21735: PUSH
21736: LD_EXP 75
21740: AND
21741: IFFALSE 21835
21743: GO 21745
21745: DISABLE
21746: LD_INT 0
21748: PPUSH
21749: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
21750: LD_ADDR_VAR 0 2
21754: PUSH
21755: LD_INT 22
21757: PUSH
21758: LD_OWVAR 2
21762: PUSH
21763: EMPTY
21764: LIST
21765: LIST
21766: PUSH
21767: LD_INT 32
21769: PUSH
21770: LD_INT 1
21772: PUSH
21773: EMPTY
21774: LIST
21775: LIST
21776: PUSH
21777: LD_INT 21
21779: PUSH
21780: LD_INT 2
21782: PUSH
21783: EMPTY
21784: LIST
21785: LIST
21786: PUSH
21787: EMPTY
21788: LIST
21789: LIST
21790: LIST
21791: PPUSH
21792: CALL_OW 69
21796: ST_TO_ADDR
// if not tmp then
21797: LD_VAR 0 2
21801: NOT
21802: IFFALSE 21806
// exit ;
21804: GO 21835
// for i in tmp do
21806: LD_ADDR_VAR 0 1
21810: PUSH
21811: LD_VAR 0 2
21815: PUSH
21816: FOR_IN
21817: IFFALSE 21833
// SetFuel ( i , 0 ) ;
21819: LD_VAR 0 1
21823: PPUSH
21824: LD_INT 0
21826: PPUSH
21827: CALL_OW 240
21831: GO 21816
21833: POP
21834: POP
// end ;
21835: PPOPN 2
21837: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
21838: LD_EXP 40
21842: PUSH
21843: LD_EXP 76
21847: AND
21848: IFFALSE 21914
21850: GO 21852
21852: DISABLE
21853: LD_INT 0
21855: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21856: LD_ADDR_VAR 0 1
21860: PUSH
21861: LD_INT 22
21863: PUSH
21864: LD_OWVAR 2
21868: PUSH
21869: EMPTY
21870: LIST
21871: LIST
21872: PUSH
21873: LD_INT 30
21875: PUSH
21876: LD_INT 29
21878: PUSH
21879: EMPTY
21880: LIST
21881: LIST
21882: PUSH
21883: EMPTY
21884: LIST
21885: LIST
21886: PPUSH
21887: CALL_OW 69
21891: ST_TO_ADDR
// if not tmp then
21892: LD_VAR 0 1
21896: NOT
21897: IFFALSE 21901
// exit ;
21899: GO 21914
// DestroyUnit ( tmp [ 1 ] ) ;
21901: LD_VAR 0 1
21905: PUSH
21906: LD_INT 1
21908: ARRAY
21909: PPUSH
21910: CALL_OW 65
// end ;
21914: PPOPN 1
21916: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21917: LD_EXP 40
21921: PUSH
21922: LD_EXP 78
21926: AND
21927: IFFALSE 22056
21929: GO 21931
21931: DISABLE
21932: LD_INT 0
21934: PPUSH
// begin uc_side := 0 ;
21935: LD_ADDR_OWVAR 20
21939: PUSH
21940: LD_INT 0
21942: ST_TO_ADDR
// uc_nation := nation_arabian ;
21943: LD_ADDR_OWVAR 21
21947: PUSH
21948: LD_INT 2
21950: ST_TO_ADDR
// hc_gallery :=  ;
21951: LD_ADDR_OWVAR 33
21955: PUSH
21956: LD_STRING 
21958: ST_TO_ADDR
// hc_name :=  ;
21959: LD_ADDR_OWVAR 26
21963: PUSH
21964: LD_STRING 
21966: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21967: LD_INT 1
21969: PPUSH
21970: LD_INT 11
21972: PPUSH
21973: LD_INT 10
21975: PPUSH
21976: CALL_OW 380
// un := CreateHuman ;
21980: LD_ADDR_VAR 0 1
21984: PUSH
21985: CALL_OW 44
21989: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21990: LD_VAR 0 1
21994: PPUSH
21995: LD_INT 1
21997: PPUSH
21998: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
22002: LD_INT 35
22004: PPUSH
22005: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
22009: LD_VAR 0 1
22013: PPUSH
22014: LD_INT 22
22016: PUSH
22017: LD_OWVAR 2
22021: PUSH
22022: EMPTY
22023: LIST
22024: LIST
22025: PPUSH
22026: CALL_OW 69
22030: PPUSH
22031: LD_VAR 0 1
22035: PPUSH
22036: CALL_OW 74
22040: PPUSH
22041: CALL_OW 115
// until IsDead ( un ) ;
22045: LD_VAR 0 1
22049: PPUSH
22050: CALL_OW 301
22054: IFFALSE 22002
// end ;
22056: PPOPN 1
22058: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
22059: LD_EXP 40
22063: PUSH
22064: LD_EXP 80
22068: AND
22069: IFFALSE 22081
22071: GO 22073
22073: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
22074: LD_STRING earthquake(getX(game), 0, 32)
22076: PPUSH
22077: CALL_OW 559
22081: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
22082: LD_EXP 40
22086: PUSH
22087: LD_EXP 81
22091: AND
22092: IFFALSE 22183
22094: GO 22096
22096: DISABLE
22097: LD_INT 0
22099: PPUSH
// begin enable ;
22100: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
22101: LD_ADDR_VAR 0 1
22105: PUSH
22106: LD_INT 22
22108: PUSH
22109: LD_OWVAR 2
22113: PUSH
22114: EMPTY
22115: LIST
22116: LIST
22117: PUSH
22118: LD_INT 21
22120: PUSH
22121: LD_INT 2
22123: PUSH
22124: EMPTY
22125: LIST
22126: LIST
22127: PUSH
22128: LD_INT 33
22130: PUSH
22131: LD_INT 3
22133: PUSH
22134: EMPTY
22135: LIST
22136: LIST
22137: PUSH
22138: EMPTY
22139: LIST
22140: LIST
22141: LIST
22142: PPUSH
22143: CALL_OW 69
22147: ST_TO_ADDR
// if not tmp then
22148: LD_VAR 0 1
22152: NOT
22153: IFFALSE 22157
// exit ;
22155: GO 22183
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22157: LD_VAR 0 1
22161: PUSH
22162: LD_INT 1
22164: PPUSH
22165: LD_VAR 0 1
22169: PPUSH
22170: CALL_OW 12
22174: ARRAY
22175: PPUSH
22176: LD_INT 1
22178: PPUSH
22179: CALL_OW 234
// end ;
22183: PPOPN 1
22185: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
22186: LD_EXP 40
22190: PUSH
22191: LD_EXP 82
22195: AND
22196: IFFALSE 22337
22198: GO 22200
22200: DISABLE
22201: LD_INT 0
22203: PPUSH
22204: PPUSH
22205: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22206: LD_ADDR_VAR 0 3
22210: PUSH
22211: LD_INT 22
22213: PUSH
22214: LD_OWVAR 2
22218: PUSH
22219: EMPTY
22220: LIST
22221: LIST
22222: PUSH
22223: LD_INT 25
22225: PUSH
22226: LD_INT 1
22228: PUSH
22229: EMPTY
22230: LIST
22231: LIST
22232: PUSH
22233: EMPTY
22234: LIST
22235: LIST
22236: PPUSH
22237: CALL_OW 69
22241: ST_TO_ADDR
// if not tmp then
22242: LD_VAR 0 3
22246: NOT
22247: IFFALSE 22251
// exit ;
22249: GO 22337
// un := tmp [ rand ( 1 , tmp ) ] ;
22251: LD_ADDR_VAR 0 2
22255: PUSH
22256: LD_VAR 0 3
22260: PUSH
22261: LD_INT 1
22263: PPUSH
22264: LD_VAR 0 3
22268: PPUSH
22269: CALL_OW 12
22273: ARRAY
22274: ST_TO_ADDR
// if Crawls ( un ) then
22275: LD_VAR 0 2
22279: PPUSH
22280: CALL_OW 318
22284: IFFALSE 22295
// ComWalk ( un ) ;
22286: LD_VAR 0 2
22290: PPUSH
22291: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
22295: LD_VAR 0 2
22299: PPUSH
22300: LD_INT 9
22302: PPUSH
22303: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
22307: LD_INT 28
22309: PPUSH
22310: LD_OWVAR 2
22314: PPUSH
22315: LD_INT 2
22317: PPUSH
22318: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
22322: LD_INT 29
22324: PPUSH
22325: LD_OWVAR 2
22329: PPUSH
22330: LD_INT 2
22332: PPUSH
22333: CALL_OW 322
// end ;
22337: PPOPN 3
22339: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
22340: LD_EXP 40
22344: PUSH
22345: LD_EXP 83
22349: AND
22350: IFFALSE 22461
22352: GO 22354
22354: DISABLE
22355: LD_INT 0
22357: PPUSH
22358: PPUSH
22359: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22360: LD_ADDR_VAR 0 3
22364: PUSH
22365: LD_INT 22
22367: PUSH
22368: LD_OWVAR 2
22372: PUSH
22373: EMPTY
22374: LIST
22375: LIST
22376: PUSH
22377: LD_INT 25
22379: PUSH
22380: LD_INT 1
22382: PUSH
22383: EMPTY
22384: LIST
22385: LIST
22386: PUSH
22387: EMPTY
22388: LIST
22389: LIST
22390: PPUSH
22391: CALL_OW 69
22395: ST_TO_ADDR
// if not tmp then
22396: LD_VAR 0 3
22400: NOT
22401: IFFALSE 22405
// exit ;
22403: GO 22461
// un := tmp [ rand ( 1 , tmp ) ] ;
22405: LD_ADDR_VAR 0 2
22409: PUSH
22410: LD_VAR 0 3
22414: PUSH
22415: LD_INT 1
22417: PPUSH
22418: LD_VAR 0 3
22422: PPUSH
22423: CALL_OW 12
22427: ARRAY
22428: ST_TO_ADDR
// if Crawls ( un ) then
22429: LD_VAR 0 2
22433: PPUSH
22434: CALL_OW 318
22438: IFFALSE 22449
// ComWalk ( un ) ;
22440: LD_VAR 0 2
22444: PPUSH
22445: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22449: LD_VAR 0 2
22453: PPUSH
22454: LD_INT 8
22456: PPUSH
22457: CALL_OW 336
// end ;
22461: PPOPN 3
22463: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
22464: LD_EXP 40
22468: PUSH
22469: LD_EXP 84
22473: AND
22474: IFFALSE 22618
22476: GO 22478
22478: DISABLE
22479: LD_INT 0
22481: PPUSH
22482: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
22483: LD_ADDR_VAR 0 2
22487: PUSH
22488: LD_INT 22
22490: PUSH
22491: LD_OWVAR 2
22495: PUSH
22496: EMPTY
22497: LIST
22498: LIST
22499: PUSH
22500: LD_INT 21
22502: PUSH
22503: LD_INT 2
22505: PUSH
22506: EMPTY
22507: LIST
22508: LIST
22509: PUSH
22510: LD_INT 2
22512: PUSH
22513: LD_INT 34
22515: PUSH
22516: LD_INT 12
22518: PUSH
22519: EMPTY
22520: LIST
22521: LIST
22522: PUSH
22523: LD_INT 34
22525: PUSH
22526: LD_INT 51
22528: PUSH
22529: EMPTY
22530: LIST
22531: LIST
22532: PUSH
22533: LD_INT 34
22535: PUSH
22536: LD_INT 32
22538: PUSH
22539: EMPTY
22540: LIST
22541: LIST
22542: PUSH
22543: EMPTY
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: PUSH
22549: EMPTY
22550: LIST
22551: LIST
22552: LIST
22553: PPUSH
22554: CALL_OW 69
22558: ST_TO_ADDR
// if not tmp then
22559: LD_VAR 0 2
22563: NOT
22564: IFFALSE 22568
// exit ;
22566: GO 22618
// for i in tmp do
22568: LD_ADDR_VAR 0 1
22572: PUSH
22573: LD_VAR 0 2
22577: PUSH
22578: FOR_IN
22579: IFFALSE 22616
// if GetCargo ( i , mat_artifact ) = 0 then
22581: LD_VAR 0 1
22585: PPUSH
22586: LD_INT 4
22588: PPUSH
22589: CALL_OW 289
22593: PUSH
22594: LD_INT 0
22596: EQUAL
22597: IFFALSE 22614
// SetCargo ( i , mat_siberit , 100 ) ;
22599: LD_VAR 0 1
22603: PPUSH
22604: LD_INT 3
22606: PPUSH
22607: LD_INT 100
22609: PPUSH
22610: CALL_OW 290
22614: GO 22578
22616: POP
22617: POP
// end ;
22618: PPOPN 2
22620: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
22621: LD_EXP 40
22625: PUSH
22626: LD_EXP 85
22630: AND
22631: IFFALSE 22814
22633: GO 22635
22635: DISABLE
22636: LD_INT 0
22638: PPUSH
22639: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22640: LD_ADDR_VAR 0 2
22644: PUSH
22645: LD_INT 22
22647: PUSH
22648: LD_OWVAR 2
22652: PUSH
22653: EMPTY
22654: LIST
22655: LIST
22656: PPUSH
22657: CALL_OW 69
22661: ST_TO_ADDR
// if not tmp then
22662: LD_VAR 0 2
22666: NOT
22667: IFFALSE 22671
// exit ;
22669: GO 22814
// for i := 1 to 2 do
22671: LD_ADDR_VAR 0 1
22675: PUSH
22676: DOUBLE
22677: LD_INT 1
22679: DEC
22680: ST_TO_ADDR
22681: LD_INT 2
22683: PUSH
22684: FOR_TO
22685: IFFALSE 22812
// begin uc_side := your_side ;
22687: LD_ADDR_OWVAR 20
22691: PUSH
22692: LD_OWVAR 2
22696: ST_TO_ADDR
// uc_nation := nation_american ;
22697: LD_ADDR_OWVAR 21
22701: PUSH
22702: LD_INT 1
22704: ST_TO_ADDR
// vc_chassis := us_morphling ;
22705: LD_ADDR_OWVAR 37
22709: PUSH
22710: LD_INT 5
22712: ST_TO_ADDR
// vc_engine := engine_siberite ;
22713: LD_ADDR_OWVAR 39
22717: PUSH
22718: LD_INT 3
22720: ST_TO_ADDR
// vc_control := control_computer ;
22721: LD_ADDR_OWVAR 38
22725: PUSH
22726: LD_INT 3
22728: ST_TO_ADDR
// vc_weapon := us_double_laser ;
22729: LD_ADDR_OWVAR 40
22733: PUSH
22734: LD_INT 10
22736: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
22737: LD_VAR 0 2
22741: PUSH
22742: LD_INT 1
22744: ARRAY
22745: PPUSH
22746: CALL_OW 310
22750: NOT
22751: IFFALSE 22798
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
22753: CALL_OW 45
22757: PPUSH
22758: LD_VAR 0 2
22762: PUSH
22763: LD_INT 1
22765: ARRAY
22766: PPUSH
22767: CALL_OW 250
22771: PPUSH
22772: LD_VAR 0 2
22776: PUSH
22777: LD_INT 1
22779: ARRAY
22780: PPUSH
22781: CALL_OW 251
22785: PPUSH
22786: LD_INT 12
22788: PPUSH
22789: LD_INT 1
22791: PPUSH
22792: CALL_OW 50
22796: GO 22810
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22798: CALL_OW 45
22802: PPUSH
22803: LD_INT 1
22805: PPUSH
22806: CALL_OW 51
// end ;
22810: GO 22684
22812: POP
22813: POP
// end ;
22814: PPOPN 2
22816: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
22817: LD_EXP 40
22821: PUSH
22822: LD_EXP 86
22826: AND
22827: IFFALSE 23049
22829: GO 22831
22831: DISABLE
22832: LD_INT 0
22834: PPUSH
22835: PPUSH
22836: PPUSH
22837: PPUSH
22838: PPUSH
22839: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22840: LD_ADDR_VAR 0 6
22844: PUSH
22845: LD_INT 22
22847: PUSH
22848: LD_OWVAR 2
22852: PUSH
22853: EMPTY
22854: LIST
22855: LIST
22856: PUSH
22857: LD_INT 21
22859: PUSH
22860: LD_INT 1
22862: PUSH
22863: EMPTY
22864: LIST
22865: LIST
22866: PUSH
22867: LD_INT 3
22869: PUSH
22870: LD_INT 23
22872: PUSH
22873: LD_INT 0
22875: PUSH
22876: EMPTY
22877: LIST
22878: LIST
22879: PUSH
22880: EMPTY
22881: LIST
22882: LIST
22883: PUSH
22884: EMPTY
22885: LIST
22886: LIST
22887: LIST
22888: PPUSH
22889: CALL_OW 69
22893: ST_TO_ADDR
// if not tmp then
22894: LD_VAR 0 6
22898: NOT
22899: IFFALSE 22903
// exit ;
22901: GO 23049
// s1 := rand ( 1 , 4 ) ;
22903: LD_ADDR_VAR 0 2
22907: PUSH
22908: LD_INT 1
22910: PPUSH
22911: LD_INT 4
22913: PPUSH
22914: CALL_OW 12
22918: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22919: LD_ADDR_VAR 0 4
22923: PUSH
22924: LD_VAR 0 6
22928: PUSH
22929: LD_INT 1
22931: ARRAY
22932: PPUSH
22933: LD_VAR 0 2
22937: PPUSH
22938: CALL_OW 259
22942: ST_TO_ADDR
// if s1 = 1 then
22943: LD_VAR 0 2
22947: PUSH
22948: LD_INT 1
22950: EQUAL
22951: IFFALSE 22971
// s2 := rand ( 2 , 4 ) else
22953: LD_ADDR_VAR 0 3
22957: PUSH
22958: LD_INT 2
22960: PPUSH
22961: LD_INT 4
22963: PPUSH
22964: CALL_OW 12
22968: ST_TO_ADDR
22969: GO 22979
// s2 := 1 ;
22971: LD_ADDR_VAR 0 3
22975: PUSH
22976: LD_INT 1
22978: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22979: LD_ADDR_VAR 0 5
22983: PUSH
22984: LD_VAR 0 6
22988: PUSH
22989: LD_INT 1
22991: ARRAY
22992: PPUSH
22993: LD_VAR 0 3
22997: PPUSH
22998: CALL_OW 259
23002: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
23003: LD_VAR 0 6
23007: PUSH
23008: LD_INT 1
23010: ARRAY
23011: PPUSH
23012: LD_VAR 0 2
23016: PPUSH
23017: LD_VAR 0 5
23021: PPUSH
23022: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
23026: LD_VAR 0 6
23030: PUSH
23031: LD_INT 1
23033: ARRAY
23034: PPUSH
23035: LD_VAR 0 3
23039: PPUSH
23040: LD_VAR 0 4
23044: PPUSH
23045: CALL_OW 237
// end ;
23049: PPOPN 6
23051: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
23052: LD_EXP 40
23056: PUSH
23057: LD_EXP 87
23061: AND
23062: IFFALSE 23141
23064: GO 23066
23066: DISABLE
23067: LD_INT 0
23069: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
23070: LD_ADDR_VAR 0 1
23074: PUSH
23075: LD_INT 22
23077: PUSH
23078: LD_OWVAR 2
23082: PUSH
23083: EMPTY
23084: LIST
23085: LIST
23086: PUSH
23087: LD_INT 30
23089: PUSH
23090: LD_INT 3
23092: PUSH
23093: EMPTY
23094: LIST
23095: LIST
23096: PUSH
23097: EMPTY
23098: LIST
23099: LIST
23100: PPUSH
23101: CALL_OW 69
23105: ST_TO_ADDR
// if not tmp then
23106: LD_VAR 0 1
23110: NOT
23111: IFFALSE 23115
// exit ;
23113: GO 23141
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
23115: LD_VAR 0 1
23119: PUSH
23120: LD_INT 1
23122: PPUSH
23123: LD_VAR 0 1
23127: PPUSH
23128: CALL_OW 12
23132: ARRAY
23133: PPUSH
23134: LD_INT 1
23136: PPUSH
23137: CALL_OW 234
// end ;
23141: PPOPN 1
23143: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
23144: LD_EXP 40
23148: PUSH
23149: LD_EXP 88
23153: AND
23154: IFFALSE 23266
23156: GO 23158
23158: DISABLE
23159: LD_INT 0
23161: PPUSH
23162: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
23163: LD_ADDR_VAR 0 2
23167: PUSH
23168: LD_INT 22
23170: PUSH
23171: LD_OWVAR 2
23175: PUSH
23176: EMPTY
23177: LIST
23178: LIST
23179: PUSH
23180: LD_INT 2
23182: PUSH
23183: LD_INT 30
23185: PUSH
23186: LD_INT 27
23188: PUSH
23189: EMPTY
23190: LIST
23191: LIST
23192: PUSH
23193: LD_INT 30
23195: PUSH
23196: LD_INT 26
23198: PUSH
23199: EMPTY
23200: LIST
23201: LIST
23202: PUSH
23203: LD_INT 30
23205: PUSH
23206: LD_INT 28
23208: PUSH
23209: EMPTY
23210: LIST
23211: LIST
23212: PUSH
23213: EMPTY
23214: LIST
23215: LIST
23216: LIST
23217: LIST
23218: PUSH
23219: EMPTY
23220: LIST
23221: LIST
23222: PPUSH
23223: CALL_OW 69
23227: ST_TO_ADDR
// if not tmp then
23228: LD_VAR 0 2
23232: NOT
23233: IFFALSE 23237
// exit ;
23235: GO 23266
// for i in tmp do
23237: LD_ADDR_VAR 0 1
23241: PUSH
23242: LD_VAR 0 2
23246: PUSH
23247: FOR_IN
23248: IFFALSE 23264
// SetLives ( i , 1 ) ;
23250: LD_VAR 0 1
23254: PPUSH
23255: LD_INT 1
23257: PPUSH
23258: CALL_OW 234
23262: GO 23247
23264: POP
23265: POP
// end ;
23266: PPOPN 2
23268: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
23269: LD_EXP 40
23273: PUSH
23274: LD_EXP 89
23278: AND
23279: IFFALSE 23566
23281: GO 23283
23283: DISABLE
23284: LD_INT 0
23286: PPUSH
23287: PPUSH
23288: PPUSH
// begin i := rand ( 1 , 7 ) ;
23289: LD_ADDR_VAR 0 1
23293: PUSH
23294: LD_INT 1
23296: PPUSH
23297: LD_INT 7
23299: PPUSH
23300: CALL_OW 12
23304: ST_TO_ADDR
// case i of 1 :
23305: LD_VAR 0 1
23309: PUSH
23310: LD_INT 1
23312: DOUBLE
23313: EQUAL
23314: IFTRUE 23318
23316: GO 23328
23318: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
23319: LD_STRING earthquake(getX(game), 0, 32)
23321: PPUSH
23322: CALL_OW 559
23326: GO 23566
23328: LD_INT 2
23330: DOUBLE
23331: EQUAL
23332: IFTRUE 23336
23334: GO 23350
23336: POP
// begin ToLua ( displayStucuk(); ) ;
23337: LD_STRING displayStucuk();
23339: PPUSH
23340: CALL_OW 559
// ResetFog ;
23344: CALL_OW 335
// end ; 3 :
23348: GO 23566
23350: LD_INT 3
23352: DOUBLE
23353: EQUAL
23354: IFTRUE 23358
23356: GO 23462
23358: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23359: LD_ADDR_VAR 0 2
23363: PUSH
23364: LD_INT 22
23366: PUSH
23367: LD_OWVAR 2
23371: PUSH
23372: EMPTY
23373: LIST
23374: LIST
23375: PUSH
23376: LD_INT 25
23378: PUSH
23379: LD_INT 1
23381: PUSH
23382: EMPTY
23383: LIST
23384: LIST
23385: PUSH
23386: EMPTY
23387: LIST
23388: LIST
23389: PPUSH
23390: CALL_OW 69
23394: ST_TO_ADDR
// if not tmp then
23395: LD_VAR 0 2
23399: NOT
23400: IFFALSE 23404
// exit ;
23402: GO 23566
// un := tmp [ rand ( 1 , tmp ) ] ;
23404: LD_ADDR_VAR 0 3
23408: PUSH
23409: LD_VAR 0 2
23413: PUSH
23414: LD_INT 1
23416: PPUSH
23417: LD_VAR 0 2
23421: PPUSH
23422: CALL_OW 12
23426: ARRAY
23427: ST_TO_ADDR
// if Crawls ( un ) then
23428: LD_VAR 0 3
23432: PPUSH
23433: CALL_OW 318
23437: IFFALSE 23448
// ComWalk ( un ) ;
23439: LD_VAR 0 3
23443: PPUSH
23444: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23448: LD_VAR 0 3
23452: PPUSH
23453: LD_INT 8
23455: PPUSH
23456: CALL_OW 336
// end ; 4 :
23460: GO 23566
23462: LD_INT 4
23464: DOUBLE
23465: EQUAL
23466: IFTRUE 23470
23468: GO 23544
23470: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23471: LD_ADDR_VAR 0 2
23475: PUSH
23476: LD_INT 22
23478: PUSH
23479: LD_OWVAR 2
23483: PUSH
23484: EMPTY
23485: LIST
23486: LIST
23487: PUSH
23488: LD_INT 30
23490: PUSH
23491: LD_INT 29
23493: PUSH
23494: EMPTY
23495: LIST
23496: LIST
23497: PUSH
23498: EMPTY
23499: LIST
23500: LIST
23501: PPUSH
23502: CALL_OW 69
23506: ST_TO_ADDR
// if not tmp then
23507: LD_VAR 0 2
23511: NOT
23512: IFFALSE 23516
// exit ;
23514: GO 23566
// CenterNowOnUnits ( tmp [ 1 ] ) ;
23516: LD_VAR 0 2
23520: PUSH
23521: LD_INT 1
23523: ARRAY
23524: PPUSH
23525: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
23529: LD_VAR 0 2
23533: PUSH
23534: LD_INT 1
23536: ARRAY
23537: PPUSH
23538: CALL_OW 65
// end ; 5 .. 7 :
23542: GO 23566
23544: LD_INT 5
23546: DOUBLE
23547: GREATEREQUAL
23548: IFFALSE 23556
23550: LD_INT 7
23552: DOUBLE
23553: LESSEQUAL
23554: IFTRUE 23558
23556: GO 23565
23558: POP
// StreamSibBomb ; end ;
23559: CALL 19803 0 0
23563: GO 23566
23565: POP
// end ;
23566: PPOPN 3
23568: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
23569: LD_EXP 40
23573: PUSH
23574: LD_EXP 90
23578: AND
23579: IFFALSE 23735
23581: GO 23583
23583: DISABLE
23584: LD_INT 0
23586: PPUSH
23587: PPUSH
23588: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23589: LD_ADDR_VAR 0 2
23593: PUSH
23594: LD_INT 81
23596: PUSH
23597: LD_OWVAR 2
23601: PUSH
23602: EMPTY
23603: LIST
23604: LIST
23605: PUSH
23606: LD_INT 2
23608: PUSH
23609: LD_INT 21
23611: PUSH
23612: LD_INT 1
23614: PUSH
23615: EMPTY
23616: LIST
23617: LIST
23618: PUSH
23619: LD_INT 21
23621: PUSH
23622: LD_INT 2
23624: PUSH
23625: EMPTY
23626: LIST
23627: LIST
23628: PUSH
23629: EMPTY
23630: LIST
23631: LIST
23632: LIST
23633: PUSH
23634: EMPTY
23635: LIST
23636: LIST
23637: PPUSH
23638: CALL_OW 69
23642: ST_TO_ADDR
// if not tmp then
23643: LD_VAR 0 2
23647: NOT
23648: IFFALSE 23652
// exit ;
23650: GO 23735
// p := 0 ;
23652: LD_ADDR_VAR 0 3
23656: PUSH
23657: LD_INT 0
23659: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23660: LD_INT 35
23662: PPUSH
23663: CALL_OW 67
// p := p + 1 ;
23667: LD_ADDR_VAR 0 3
23671: PUSH
23672: LD_VAR 0 3
23676: PUSH
23677: LD_INT 1
23679: PLUS
23680: ST_TO_ADDR
// for i in tmp do
23681: LD_ADDR_VAR 0 1
23685: PUSH
23686: LD_VAR 0 2
23690: PUSH
23691: FOR_IN
23692: IFFALSE 23723
// if GetLives ( i ) < 1000 then
23694: LD_VAR 0 1
23698: PPUSH
23699: CALL_OW 256
23703: PUSH
23704: LD_INT 1000
23706: LESS
23707: IFFALSE 23721
// SetLives ( i , 1000 ) ;
23709: LD_VAR 0 1
23713: PPUSH
23714: LD_INT 1000
23716: PPUSH
23717: CALL_OW 234
23721: GO 23691
23723: POP
23724: POP
// until p > 20 ;
23725: LD_VAR 0 3
23729: PUSH
23730: LD_INT 20
23732: GREATER
23733: IFFALSE 23660
// end ;
23735: PPOPN 3
23737: END
// every 0 0$1 trigger StreamModeActive and sTime do
23738: LD_EXP 40
23742: PUSH
23743: LD_EXP 91
23747: AND
23748: IFFALSE 23783
23750: GO 23752
23752: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
23753: LD_INT 28
23755: PPUSH
23756: LD_OWVAR 2
23760: PPUSH
23761: LD_INT 2
23763: PPUSH
23764: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
23768: LD_INT 30
23770: PPUSH
23771: LD_OWVAR 2
23775: PPUSH
23776: LD_INT 2
23778: PPUSH
23779: CALL_OW 322
// end ;
23783: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
23784: LD_EXP 40
23788: PUSH
23789: LD_EXP 92
23793: AND
23794: IFFALSE 23915
23796: GO 23798
23798: DISABLE
23799: LD_INT 0
23801: PPUSH
23802: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23803: LD_ADDR_VAR 0 2
23807: PUSH
23808: LD_INT 22
23810: PUSH
23811: LD_OWVAR 2
23815: PUSH
23816: EMPTY
23817: LIST
23818: LIST
23819: PUSH
23820: LD_INT 21
23822: PUSH
23823: LD_INT 1
23825: PUSH
23826: EMPTY
23827: LIST
23828: LIST
23829: PUSH
23830: LD_INT 3
23832: PUSH
23833: LD_INT 23
23835: PUSH
23836: LD_INT 0
23838: PUSH
23839: EMPTY
23840: LIST
23841: LIST
23842: PUSH
23843: EMPTY
23844: LIST
23845: LIST
23846: PUSH
23847: EMPTY
23848: LIST
23849: LIST
23850: LIST
23851: PPUSH
23852: CALL_OW 69
23856: ST_TO_ADDR
// if not tmp then
23857: LD_VAR 0 2
23861: NOT
23862: IFFALSE 23866
// exit ;
23864: GO 23915
// for i in tmp do
23866: LD_ADDR_VAR 0 1
23870: PUSH
23871: LD_VAR 0 2
23875: PUSH
23876: FOR_IN
23877: IFFALSE 23913
// begin if Crawls ( i ) then
23879: LD_VAR 0 1
23883: PPUSH
23884: CALL_OW 318
23888: IFFALSE 23899
// ComWalk ( i ) ;
23890: LD_VAR 0 1
23894: PPUSH
23895: CALL_OW 138
// SetClass ( i , 2 ) ;
23899: LD_VAR 0 1
23903: PPUSH
23904: LD_INT 2
23906: PPUSH
23907: CALL_OW 336
// end ;
23911: GO 23876
23913: POP
23914: POP
// end ;
23915: PPOPN 2
23917: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23918: LD_EXP 40
23922: PUSH
23923: LD_EXP 93
23927: AND
23928: IFFALSE 24216
23930: GO 23932
23932: DISABLE
23933: LD_INT 0
23935: PPUSH
23936: PPUSH
23937: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23938: LD_OWVAR 2
23942: PPUSH
23943: LD_INT 9
23945: PPUSH
23946: LD_INT 1
23948: PPUSH
23949: LD_INT 1
23951: PPUSH
23952: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23956: LD_INT 9
23958: PPUSH
23959: LD_OWVAR 2
23963: PPUSH
23964: CALL_OW 343
// uc_side := 9 ;
23968: LD_ADDR_OWVAR 20
23972: PUSH
23973: LD_INT 9
23975: ST_TO_ADDR
// uc_nation := 2 ;
23976: LD_ADDR_OWVAR 21
23980: PUSH
23981: LD_INT 2
23983: ST_TO_ADDR
// hc_name := Dark Warrior ;
23984: LD_ADDR_OWVAR 26
23988: PUSH
23989: LD_STRING Dark Warrior
23991: ST_TO_ADDR
// hc_gallery :=  ;
23992: LD_ADDR_OWVAR 33
23996: PUSH
23997: LD_STRING 
23999: ST_TO_ADDR
// hc_noskilllimit := true ;
24000: LD_ADDR_OWVAR 76
24004: PUSH
24005: LD_INT 1
24007: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
24008: LD_ADDR_OWVAR 31
24012: PUSH
24013: LD_INT 30
24015: PUSH
24016: LD_INT 30
24018: PUSH
24019: LD_INT 30
24021: PUSH
24022: LD_INT 30
24024: PUSH
24025: EMPTY
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: ST_TO_ADDR
// un := CreateHuman ;
24031: LD_ADDR_VAR 0 3
24035: PUSH
24036: CALL_OW 44
24040: ST_TO_ADDR
// hc_noskilllimit := false ;
24041: LD_ADDR_OWVAR 76
24045: PUSH
24046: LD_INT 0
24048: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24049: LD_VAR 0 3
24053: PPUSH
24054: LD_INT 1
24056: PPUSH
24057: CALL_OW 51
// ToLua ( playRanger() ) ;
24061: LD_STRING playRanger()
24063: PPUSH
24064: CALL_OW 559
// p := 0 ;
24068: LD_ADDR_VAR 0 2
24072: PUSH
24073: LD_INT 0
24075: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24076: LD_INT 35
24078: PPUSH
24079: CALL_OW 67
// p := p + 1 ;
24083: LD_ADDR_VAR 0 2
24087: PUSH
24088: LD_VAR 0 2
24092: PUSH
24093: LD_INT 1
24095: PLUS
24096: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
24097: LD_VAR 0 3
24101: PPUSH
24102: CALL_OW 256
24106: PUSH
24107: LD_INT 1000
24109: LESS
24110: IFFALSE 24124
// SetLives ( un , 1000 ) ;
24112: LD_VAR 0 3
24116: PPUSH
24117: LD_INT 1000
24119: PPUSH
24120: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
24124: LD_VAR 0 3
24128: PPUSH
24129: LD_INT 81
24131: PUSH
24132: LD_OWVAR 2
24136: PUSH
24137: EMPTY
24138: LIST
24139: LIST
24140: PUSH
24141: LD_INT 91
24143: PUSH
24144: LD_VAR 0 3
24148: PUSH
24149: LD_INT 30
24151: PUSH
24152: EMPTY
24153: LIST
24154: LIST
24155: LIST
24156: PUSH
24157: EMPTY
24158: LIST
24159: LIST
24160: PPUSH
24161: CALL_OW 69
24165: PPUSH
24166: LD_VAR 0 3
24170: PPUSH
24171: CALL_OW 74
24175: PPUSH
24176: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
24180: LD_VAR 0 2
24184: PUSH
24185: LD_INT 80
24187: GREATER
24188: PUSH
24189: LD_VAR 0 3
24193: PPUSH
24194: CALL_OW 301
24198: OR
24199: IFFALSE 24076
// if un then
24201: LD_VAR 0 3
24205: IFFALSE 24216
// RemoveUnit ( un ) ;
24207: LD_VAR 0 3
24211: PPUSH
24212: CALL_OW 64
// end ;
24216: PPOPN 3
24218: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
24219: LD_EXP 94
24223: IFFALSE 24339
24225: GO 24227
24227: DISABLE
24228: LD_INT 0
24230: PPUSH
24231: PPUSH
24232: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24233: LD_ADDR_VAR 0 2
24237: PUSH
24238: LD_INT 81
24240: PUSH
24241: LD_OWVAR 2
24245: PUSH
24246: EMPTY
24247: LIST
24248: LIST
24249: PUSH
24250: LD_INT 21
24252: PUSH
24253: LD_INT 1
24255: PUSH
24256: EMPTY
24257: LIST
24258: LIST
24259: PUSH
24260: EMPTY
24261: LIST
24262: LIST
24263: PPUSH
24264: CALL_OW 69
24268: ST_TO_ADDR
// ToLua ( playComputer() ) ;
24269: LD_STRING playComputer()
24271: PPUSH
24272: CALL_OW 559
// if not tmp then
24276: LD_VAR 0 2
24280: NOT
24281: IFFALSE 24285
// exit ;
24283: GO 24339
// for i in tmp do
24285: LD_ADDR_VAR 0 1
24289: PUSH
24290: LD_VAR 0 2
24294: PUSH
24295: FOR_IN
24296: IFFALSE 24337
// for j := 1 to 4 do
24298: LD_ADDR_VAR 0 3
24302: PUSH
24303: DOUBLE
24304: LD_INT 1
24306: DEC
24307: ST_TO_ADDR
24308: LD_INT 4
24310: PUSH
24311: FOR_TO
24312: IFFALSE 24333
// SetSkill ( i , j , 10 ) ;
24314: LD_VAR 0 1
24318: PPUSH
24319: LD_VAR 0 3
24323: PPUSH
24324: LD_INT 10
24326: PPUSH
24327: CALL_OW 237
24331: GO 24311
24333: POP
24334: POP
24335: GO 24295
24337: POP
24338: POP
// end ;
24339: PPOPN 3
24341: END
// every 0 0$1 trigger s30 do var i , tmp ;
24342: LD_EXP 95
24346: IFFALSE 24415
24348: GO 24350
24350: DISABLE
24351: LD_INT 0
24353: PPUSH
24354: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24355: LD_ADDR_VAR 0 2
24359: PUSH
24360: LD_INT 22
24362: PUSH
24363: LD_OWVAR 2
24367: PUSH
24368: EMPTY
24369: LIST
24370: LIST
24371: PPUSH
24372: CALL_OW 69
24376: ST_TO_ADDR
// if not tmp then
24377: LD_VAR 0 2
24381: NOT
24382: IFFALSE 24386
// exit ;
24384: GO 24415
// for i in tmp do
24386: LD_ADDR_VAR 0 1
24390: PUSH
24391: LD_VAR 0 2
24395: PUSH
24396: FOR_IN
24397: IFFALSE 24413
// SetLives ( i , 300 ) ;
24399: LD_VAR 0 1
24403: PPUSH
24404: LD_INT 300
24406: PPUSH
24407: CALL_OW 234
24411: GO 24396
24413: POP
24414: POP
// end ;
24415: PPOPN 2
24417: END
// every 0 0$1 trigger s60 do var i , tmp ;
24418: LD_EXP 96
24422: IFFALSE 24491
24424: GO 24426
24426: DISABLE
24427: LD_INT 0
24429: PPUSH
24430: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24431: LD_ADDR_VAR 0 2
24435: PUSH
24436: LD_INT 22
24438: PUSH
24439: LD_OWVAR 2
24443: PUSH
24444: EMPTY
24445: LIST
24446: LIST
24447: PPUSH
24448: CALL_OW 69
24452: ST_TO_ADDR
// if not tmp then
24453: LD_VAR 0 2
24457: NOT
24458: IFFALSE 24462
// exit ;
24460: GO 24491
// for i in tmp do
24462: LD_ADDR_VAR 0 1
24466: PUSH
24467: LD_VAR 0 2
24471: PUSH
24472: FOR_IN
24473: IFFALSE 24489
// SetLives ( i , 600 ) ;
24475: LD_VAR 0 1
24479: PPUSH
24480: LD_INT 600
24482: PPUSH
24483: CALL_OW 234
24487: GO 24472
24489: POP
24490: POP
// end ;
24491: PPOPN 2
24493: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
24494: LD_INT 0
24496: PPUSH
// case cmd of 301 :
24497: LD_VAR 0 1
24501: PUSH
24502: LD_INT 301
24504: DOUBLE
24505: EQUAL
24506: IFTRUE 24510
24508: GO 24542
24510: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
24511: LD_VAR 0 6
24515: PPUSH
24516: LD_VAR 0 7
24520: PPUSH
24521: LD_VAR 0 8
24525: PPUSH
24526: LD_VAR 0 4
24530: PPUSH
24531: LD_VAR 0 5
24535: PPUSH
24536: CALL 25743 0 5
24540: GO 24663
24542: LD_INT 302
24544: DOUBLE
24545: EQUAL
24546: IFTRUE 24550
24548: GO 24587
24550: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
24551: LD_VAR 0 6
24555: PPUSH
24556: LD_VAR 0 7
24560: PPUSH
24561: LD_VAR 0 8
24565: PPUSH
24566: LD_VAR 0 9
24570: PPUSH
24571: LD_VAR 0 4
24575: PPUSH
24576: LD_VAR 0 5
24580: PPUSH
24581: CALL 25834 0 6
24585: GO 24663
24587: LD_INT 303
24589: DOUBLE
24590: EQUAL
24591: IFTRUE 24595
24593: GO 24632
24595: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
24596: LD_VAR 0 6
24600: PPUSH
24601: LD_VAR 0 7
24605: PPUSH
24606: LD_VAR 0 8
24610: PPUSH
24611: LD_VAR 0 9
24615: PPUSH
24616: LD_VAR 0 4
24620: PPUSH
24621: LD_VAR 0 5
24625: PPUSH
24626: CALL 24668 0 6
24630: GO 24663
24632: LD_INT 304
24634: DOUBLE
24635: EQUAL
24636: IFTRUE 24640
24638: GO 24662
24640: POP
// hHackTeleport ( unit , x , y ) ; end ;
24641: LD_VAR 0 2
24645: PPUSH
24646: LD_VAR 0 4
24650: PPUSH
24651: LD_VAR 0 5
24655: PPUSH
24656: CALL 26427 0 3
24660: GO 24663
24662: POP
// end ;
24663: LD_VAR 0 12
24667: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
24668: LD_INT 0
24670: PPUSH
24671: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
24672: LD_VAR 0 1
24676: PUSH
24677: LD_INT 1
24679: LESS
24680: PUSH
24681: LD_VAR 0 1
24685: PUSH
24686: LD_INT 3
24688: GREATER
24689: OR
24690: PUSH
24691: LD_VAR 0 5
24695: PPUSH
24696: LD_VAR 0 6
24700: PPUSH
24701: CALL_OW 428
24705: OR
24706: IFFALSE 24710
// exit ;
24708: GO 25430
// uc_side := your_side ;
24710: LD_ADDR_OWVAR 20
24714: PUSH
24715: LD_OWVAR 2
24719: ST_TO_ADDR
// uc_nation := nation ;
24720: LD_ADDR_OWVAR 21
24724: PUSH
24725: LD_VAR 0 1
24729: ST_TO_ADDR
// bc_level = 1 ;
24730: LD_ADDR_OWVAR 43
24734: PUSH
24735: LD_INT 1
24737: ST_TO_ADDR
// case btype of 1 :
24738: LD_VAR 0 2
24742: PUSH
24743: LD_INT 1
24745: DOUBLE
24746: EQUAL
24747: IFTRUE 24751
24749: GO 24762
24751: POP
// bc_type := b_depot ; 2 :
24752: LD_ADDR_OWVAR 42
24756: PUSH
24757: LD_INT 0
24759: ST_TO_ADDR
24760: GO 25374
24762: LD_INT 2
24764: DOUBLE
24765: EQUAL
24766: IFTRUE 24770
24768: GO 24781
24770: POP
// bc_type := b_warehouse ; 3 :
24771: LD_ADDR_OWVAR 42
24775: PUSH
24776: LD_INT 1
24778: ST_TO_ADDR
24779: GO 25374
24781: LD_INT 3
24783: DOUBLE
24784: EQUAL
24785: IFTRUE 24789
24787: GO 24800
24789: POP
// bc_type := b_lab ; 4 .. 9 :
24790: LD_ADDR_OWVAR 42
24794: PUSH
24795: LD_INT 6
24797: ST_TO_ADDR
24798: GO 25374
24800: LD_INT 4
24802: DOUBLE
24803: GREATEREQUAL
24804: IFFALSE 24812
24806: LD_INT 9
24808: DOUBLE
24809: LESSEQUAL
24810: IFTRUE 24814
24812: GO 24866
24814: POP
// begin bc_type := b_lab_half ;
24815: LD_ADDR_OWVAR 42
24819: PUSH
24820: LD_INT 7
24822: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
24823: LD_ADDR_OWVAR 44
24827: PUSH
24828: LD_INT 10
24830: PUSH
24831: LD_INT 11
24833: PUSH
24834: LD_INT 12
24836: PUSH
24837: LD_INT 15
24839: PUSH
24840: LD_INT 14
24842: PUSH
24843: LD_INT 13
24845: PUSH
24846: EMPTY
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: PUSH
24854: LD_VAR 0 2
24858: PUSH
24859: LD_INT 3
24861: MINUS
24862: ARRAY
24863: ST_TO_ADDR
// end ; 10 .. 13 :
24864: GO 25374
24866: LD_INT 10
24868: DOUBLE
24869: GREATEREQUAL
24870: IFFALSE 24878
24872: LD_INT 13
24874: DOUBLE
24875: LESSEQUAL
24876: IFTRUE 24880
24878: GO 24957
24880: POP
// begin bc_type := b_lab_full ;
24881: LD_ADDR_OWVAR 42
24885: PUSH
24886: LD_INT 8
24888: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
24889: LD_ADDR_OWVAR 44
24893: PUSH
24894: LD_INT 10
24896: PUSH
24897: LD_INT 12
24899: PUSH
24900: LD_INT 14
24902: PUSH
24903: LD_INT 13
24905: PUSH
24906: EMPTY
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: PUSH
24912: LD_VAR 0 2
24916: PUSH
24917: LD_INT 9
24919: MINUS
24920: ARRAY
24921: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
24922: LD_ADDR_OWVAR 45
24926: PUSH
24927: LD_INT 11
24929: PUSH
24930: LD_INT 15
24932: PUSH
24933: LD_INT 12
24935: PUSH
24936: LD_INT 15
24938: PUSH
24939: EMPTY
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: PUSH
24945: LD_VAR 0 2
24949: PUSH
24950: LD_INT 9
24952: MINUS
24953: ARRAY
24954: ST_TO_ADDR
// end ; 14 :
24955: GO 25374
24957: LD_INT 14
24959: DOUBLE
24960: EQUAL
24961: IFTRUE 24965
24963: GO 24976
24965: POP
// bc_type := b_workshop ; 15 :
24966: LD_ADDR_OWVAR 42
24970: PUSH
24971: LD_INT 2
24973: ST_TO_ADDR
24974: GO 25374
24976: LD_INT 15
24978: DOUBLE
24979: EQUAL
24980: IFTRUE 24984
24982: GO 24995
24984: POP
// bc_type := b_factory ; 16 :
24985: LD_ADDR_OWVAR 42
24989: PUSH
24990: LD_INT 3
24992: ST_TO_ADDR
24993: GO 25374
24995: LD_INT 16
24997: DOUBLE
24998: EQUAL
24999: IFTRUE 25003
25001: GO 25014
25003: POP
// bc_type := b_ext_gun ; 17 :
25004: LD_ADDR_OWVAR 42
25008: PUSH
25009: LD_INT 17
25011: ST_TO_ADDR
25012: GO 25374
25014: LD_INT 17
25016: DOUBLE
25017: EQUAL
25018: IFTRUE 25022
25020: GO 25050
25022: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
25023: LD_ADDR_OWVAR 42
25027: PUSH
25028: LD_INT 19
25030: PUSH
25031: LD_INT 23
25033: PUSH
25034: LD_INT 19
25036: PUSH
25037: EMPTY
25038: LIST
25039: LIST
25040: LIST
25041: PUSH
25042: LD_VAR 0 1
25046: ARRAY
25047: ST_TO_ADDR
25048: GO 25374
25050: LD_INT 18
25052: DOUBLE
25053: EQUAL
25054: IFTRUE 25058
25056: GO 25069
25058: POP
// bc_type := b_ext_radar ; 19 :
25059: LD_ADDR_OWVAR 42
25063: PUSH
25064: LD_INT 20
25066: ST_TO_ADDR
25067: GO 25374
25069: LD_INT 19
25071: DOUBLE
25072: EQUAL
25073: IFTRUE 25077
25075: GO 25088
25077: POP
// bc_type := b_ext_radio ; 20 :
25078: LD_ADDR_OWVAR 42
25082: PUSH
25083: LD_INT 22
25085: ST_TO_ADDR
25086: GO 25374
25088: LD_INT 20
25090: DOUBLE
25091: EQUAL
25092: IFTRUE 25096
25094: GO 25107
25096: POP
// bc_type := b_ext_siberium ; 21 :
25097: LD_ADDR_OWVAR 42
25101: PUSH
25102: LD_INT 21
25104: ST_TO_ADDR
25105: GO 25374
25107: LD_INT 21
25109: DOUBLE
25110: EQUAL
25111: IFTRUE 25115
25113: GO 25126
25115: POP
// bc_type := b_ext_computer ; 22 :
25116: LD_ADDR_OWVAR 42
25120: PUSH
25121: LD_INT 24
25123: ST_TO_ADDR
25124: GO 25374
25126: LD_INT 22
25128: DOUBLE
25129: EQUAL
25130: IFTRUE 25134
25132: GO 25145
25134: POP
// bc_type := b_ext_track ; 23 :
25135: LD_ADDR_OWVAR 42
25139: PUSH
25140: LD_INT 16
25142: ST_TO_ADDR
25143: GO 25374
25145: LD_INT 23
25147: DOUBLE
25148: EQUAL
25149: IFTRUE 25153
25151: GO 25164
25153: POP
// bc_type := b_ext_laser ; 24 :
25154: LD_ADDR_OWVAR 42
25158: PUSH
25159: LD_INT 25
25161: ST_TO_ADDR
25162: GO 25374
25164: LD_INT 24
25166: DOUBLE
25167: EQUAL
25168: IFTRUE 25172
25170: GO 25183
25172: POP
// bc_type := b_control_tower ; 25 :
25173: LD_ADDR_OWVAR 42
25177: PUSH
25178: LD_INT 36
25180: ST_TO_ADDR
25181: GO 25374
25183: LD_INT 25
25185: DOUBLE
25186: EQUAL
25187: IFTRUE 25191
25189: GO 25202
25191: POP
// bc_type := b_breastwork ; 26 :
25192: LD_ADDR_OWVAR 42
25196: PUSH
25197: LD_INT 31
25199: ST_TO_ADDR
25200: GO 25374
25202: LD_INT 26
25204: DOUBLE
25205: EQUAL
25206: IFTRUE 25210
25208: GO 25221
25210: POP
// bc_type := b_bunker ; 27 :
25211: LD_ADDR_OWVAR 42
25215: PUSH
25216: LD_INT 32
25218: ST_TO_ADDR
25219: GO 25374
25221: LD_INT 27
25223: DOUBLE
25224: EQUAL
25225: IFTRUE 25229
25227: GO 25240
25229: POP
// bc_type := b_turret ; 28 :
25230: LD_ADDR_OWVAR 42
25234: PUSH
25235: LD_INT 33
25237: ST_TO_ADDR
25238: GO 25374
25240: LD_INT 28
25242: DOUBLE
25243: EQUAL
25244: IFTRUE 25248
25246: GO 25259
25248: POP
// bc_type := b_armoury ; 29 :
25249: LD_ADDR_OWVAR 42
25253: PUSH
25254: LD_INT 4
25256: ST_TO_ADDR
25257: GO 25374
25259: LD_INT 29
25261: DOUBLE
25262: EQUAL
25263: IFTRUE 25267
25265: GO 25278
25267: POP
// bc_type := b_barracks ; 30 :
25268: LD_ADDR_OWVAR 42
25272: PUSH
25273: LD_INT 5
25275: ST_TO_ADDR
25276: GO 25374
25278: LD_INT 30
25280: DOUBLE
25281: EQUAL
25282: IFTRUE 25286
25284: GO 25297
25286: POP
// bc_type := b_solar_power ; 31 :
25287: LD_ADDR_OWVAR 42
25291: PUSH
25292: LD_INT 27
25294: ST_TO_ADDR
25295: GO 25374
25297: LD_INT 31
25299: DOUBLE
25300: EQUAL
25301: IFTRUE 25305
25303: GO 25316
25305: POP
// bc_type := b_oil_power ; 32 :
25306: LD_ADDR_OWVAR 42
25310: PUSH
25311: LD_INT 26
25313: ST_TO_ADDR
25314: GO 25374
25316: LD_INT 32
25318: DOUBLE
25319: EQUAL
25320: IFTRUE 25324
25322: GO 25335
25324: POP
// bc_type := b_siberite_power ; 33 :
25325: LD_ADDR_OWVAR 42
25329: PUSH
25330: LD_INT 28
25332: ST_TO_ADDR
25333: GO 25374
25335: LD_INT 33
25337: DOUBLE
25338: EQUAL
25339: IFTRUE 25343
25341: GO 25354
25343: POP
// bc_type := b_oil_mine ; 34 :
25344: LD_ADDR_OWVAR 42
25348: PUSH
25349: LD_INT 29
25351: ST_TO_ADDR
25352: GO 25374
25354: LD_INT 34
25356: DOUBLE
25357: EQUAL
25358: IFTRUE 25362
25360: GO 25373
25362: POP
// bc_type := b_siberite_mine ; end ;
25363: LD_ADDR_OWVAR 42
25367: PUSH
25368: LD_INT 30
25370: ST_TO_ADDR
25371: GO 25374
25373: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
25374: LD_ADDR_VAR 0 8
25378: PUSH
25379: LD_VAR 0 5
25383: PPUSH
25384: LD_VAR 0 6
25388: PPUSH
25389: LD_VAR 0 3
25393: PPUSH
25394: CALL_OW 47
25398: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
25399: LD_OWVAR 42
25403: PUSH
25404: LD_INT 32
25406: PUSH
25407: LD_INT 33
25409: PUSH
25410: EMPTY
25411: LIST
25412: LIST
25413: IN
25414: IFFALSE 25430
// PlaceWeaponTurret ( b , weapon ) ;
25416: LD_VAR 0 8
25420: PPUSH
25421: LD_VAR 0 4
25425: PPUSH
25426: CALL_OW 431
// end ;
25430: LD_VAR 0 7
25434: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
25435: LD_INT 0
25437: PPUSH
25438: PPUSH
25439: PPUSH
25440: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25441: LD_ADDR_VAR 0 4
25445: PUSH
25446: LD_INT 22
25448: PUSH
25449: LD_OWVAR 2
25453: PUSH
25454: EMPTY
25455: LIST
25456: LIST
25457: PUSH
25458: LD_INT 2
25460: PUSH
25461: LD_INT 30
25463: PUSH
25464: LD_INT 0
25466: PUSH
25467: EMPTY
25468: LIST
25469: LIST
25470: PUSH
25471: LD_INT 30
25473: PUSH
25474: LD_INT 1
25476: PUSH
25477: EMPTY
25478: LIST
25479: LIST
25480: PUSH
25481: EMPTY
25482: LIST
25483: LIST
25484: LIST
25485: PUSH
25486: EMPTY
25487: LIST
25488: LIST
25489: PPUSH
25490: CALL_OW 69
25494: ST_TO_ADDR
// if not tmp then
25495: LD_VAR 0 4
25499: NOT
25500: IFFALSE 25504
// exit ;
25502: GO 25563
// for i in tmp do
25504: LD_ADDR_VAR 0 2
25508: PUSH
25509: LD_VAR 0 4
25513: PUSH
25514: FOR_IN
25515: IFFALSE 25561
// for j = 1 to 3 do
25517: LD_ADDR_VAR 0 3
25521: PUSH
25522: DOUBLE
25523: LD_INT 1
25525: DEC
25526: ST_TO_ADDR
25527: LD_INT 3
25529: PUSH
25530: FOR_TO
25531: IFFALSE 25557
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
25533: LD_VAR 0 2
25537: PPUSH
25538: CALL_OW 274
25542: PPUSH
25543: LD_VAR 0 3
25547: PPUSH
25548: LD_INT 99999
25550: PPUSH
25551: CALL_OW 277
25555: GO 25530
25557: POP
25558: POP
25559: GO 25514
25561: POP
25562: POP
// end ;
25563: LD_VAR 0 1
25567: RET
// export function hHackSetLevel10 ; var i , j ; begin
25568: LD_INT 0
25570: PPUSH
25571: PPUSH
25572: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25573: LD_ADDR_VAR 0 2
25577: PUSH
25578: LD_INT 21
25580: PUSH
25581: LD_INT 1
25583: PUSH
25584: EMPTY
25585: LIST
25586: LIST
25587: PPUSH
25588: CALL_OW 69
25592: PUSH
25593: FOR_IN
25594: IFFALSE 25646
// if IsSelected ( i ) then
25596: LD_VAR 0 2
25600: PPUSH
25601: CALL_OW 306
25605: IFFALSE 25644
// begin for j := 1 to 4 do
25607: LD_ADDR_VAR 0 3
25611: PUSH
25612: DOUBLE
25613: LD_INT 1
25615: DEC
25616: ST_TO_ADDR
25617: LD_INT 4
25619: PUSH
25620: FOR_TO
25621: IFFALSE 25642
// SetSkill ( i , j , 10 ) ;
25623: LD_VAR 0 2
25627: PPUSH
25628: LD_VAR 0 3
25632: PPUSH
25633: LD_INT 10
25635: PPUSH
25636: CALL_OW 237
25640: GO 25620
25642: POP
25643: POP
// end ;
25644: GO 25593
25646: POP
25647: POP
// end ;
25648: LD_VAR 0 1
25652: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
25653: LD_INT 0
25655: PPUSH
25656: PPUSH
25657: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
25658: LD_ADDR_VAR 0 2
25662: PUSH
25663: LD_INT 22
25665: PUSH
25666: LD_OWVAR 2
25670: PUSH
25671: EMPTY
25672: LIST
25673: LIST
25674: PUSH
25675: LD_INT 21
25677: PUSH
25678: LD_INT 1
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: PUSH
25685: EMPTY
25686: LIST
25687: LIST
25688: PPUSH
25689: CALL_OW 69
25693: PUSH
25694: FOR_IN
25695: IFFALSE 25736
// begin for j := 1 to 4 do
25697: LD_ADDR_VAR 0 3
25701: PUSH
25702: DOUBLE
25703: LD_INT 1
25705: DEC
25706: ST_TO_ADDR
25707: LD_INT 4
25709: PUSH
25710: FOR_TO
25711: IFFALSE 25732
// SetSkill ( i , j , 10 ) ;
25713: LD_VAR 0 2
25717: PPUSH
25718: LD_VAR 0 3
25722: PPUSH
25723: LD_INT 10
25725: PPUSH
25726: CALL_OW 237
25730: GO 25710
25732: POP
25733: POP
// end ;
25734: GO 25694
25736: POP
25737: POP
// end ;
25738: LD_VAR 0 1
25742: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
25743: LD_INT 0
25745: PPUSH
// uc_side := your_side ;
25746: LD_ADDR_OWVAR 20
25750: PUSH
25751: LD_OWVAR 2
25755: ST_TO_ADDR
// uc_nation := nation ;
25756: LD_ADDR_OWVAR 21
25760: PUSH
25761: LD_VAR 0 1
25765: ST_TO_ADDR
// InitHc ;
25766: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
25770: LD_INT 0
25772: PPUSH
25773: LD_VAR 0 2
25777: PPUSH
25778: LD_VAR 0 3
25782: PPUSH
25783: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
25787: LD_VAR 0 4
25791: PPUSH
25792: LD_VAR 0 5
25796: PPUSH
25797: CALL_OW 428
25801: PUSH
25802: LD_INT 0
25804: EQUAL
25805: IFFALSE 25829
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
25807: CALL_OW 44
25811: PPUSH
25812: LD_VAR 0 4
25816: PPUSH
25817: LD_VAR 0 5
25821: PPUSH
25822: LD_INT 1
25824: PPUSH
25825: CALL_OW 48
// end ;
25829: LD_VAR 0 6
25833: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
25834: LD_INT 0
25836: PPUSH
25837: PPUSH
// uc_side := your_side ;
25838: LD_ADDR_OWVAR 20
25842: PUSH
25843: LD_OWVAR 2
25847: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
25848: LD_VAR 0 1
25852: PUSH
25853: LD_INT 1
25855: PUSH
25856: LD_INT 2
25858: PUSH
25859: LD_INT 3
25861: PUSH
25862: LD_INT 4
25864: PUSH
25865: LD_INT 5
25867: PUSH
25868: EMPTY
25869: LIST
25870: LIST
25871: LIST
25872: LIST
25873: LIST
25874: IN
25875: IFFALSE 25887
// uc_nation := nation_american else
25877: LD_ADDR_OWVAR 21
25881: PUSH
25882: LD_INT 1
25884: ST_TO_ADDR
25885: GO 25930
// if chassis in [ 11 , 12 , 13 , 14 ] then
25887: LD_VAR 0 1
25891: PUSH
25892: LD_INT 11
25894: PUSH
25895: LD_INT 12
25897: PUSH
25898: LD_INT 13
25900: PUSH
25901: LD_INT 14
25903: PUSH
25904: EMPTY
25905: LIST
25906: LIST
25907: LIST
25908: LIST
25909: IN
25910: IFFALSE 25922
// uc_nation := nation_arabian else
25912: LD_ADDR_OWVAR 21
25916: PUSH
25917: LD_INT 2
25919: ST_TO_ADDR
25920: GO 25930
// uc_nation := nation_russian ;
25922: LD_ADDR_OWVAR 21
25926: PUSH
25927: LD_INT 3
25929: ST_TO_ADDR
// vc_chassis := chassis ;
25930: LD_ADDR_OWVAR 37
25934: PUSH
25935: LD_VAR 0 1
25939: ST_TO_ADDR
// vc_engine := engine ;
25940: LD_ADDR_OWVAR 39
25944: PUSH
25945: LD_VAR 0 2
25949: ST_TO_ADDR
// vc_control := control ;
25950: LD_ADDR_OWVAR 38
25954: PUSH
25955: LD_VAR 0 3
25959: ST_TO_ADDR
// vc_weapon := weapon ;
25960: LD_ADDR_OWVAR 40
25964: PUSH
25965: LD_VAR 0 4
25969: ST_TO_ADDR
// un := CreateVehicle ;
25970: LD_ADDR_VAR 0 8
25974: PUSH
25975: CALL_OW 45
25979: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
25980: LD_VAR 0 8
25984: PPUSH
25985: LD_INT 0
25987: PPUSH
25988: LD_INT 5
25990: PPUSH
25991: CALL_OW 12
25995: PPUSH
25996: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
26000: LD_VAR 0 8
26004: PPUSH
26005: LD_VAR 0 5
26009: PPUSH
26010: LD_VAR 0 6
26014: PPUSH
26015: LD_INT 1
26017: PPUSH
26018: CALL_OW 48
// end ;
26022: LD_VAR 0 7
26026: RET
// export hInvincible ; every 1 do
26027: GO 26029
26029: DISABLE
// hInvincible := [ ] ;
26030: LD_ADDR_EXP 97
26034: PUSH
26035: EMPTY
26036: ST_TO_ADDR
26037: END
// every 10 do var i ;
26038: GO 26040
26040: DISABLE
26041: LD_INT 0
26043: PPUSH
// begin enable ;
26044: ENABLE
// if not hInvincible then
26045: LD_EXP 97
26049: NOT
26050: IFFALSE 26054
// exit ;
26052: GO 26098
// for i in hInvincible do
26054: LD_ADDR_VAR 0 1
26058: PUSH
26059: LD_EXP 97
26063: PUSH
26064: FOR_IN
26065: IFFALSE 26096
// if GetLives ( i ) < 1000 then
26067: LD_VAR 0 1
26071: PPUSH
26072: CALL_OW 256
26076: PUSH
26077: LD_INT 1000
26079: LESS
26080: IFFALSE 26094
// SetLives ( i , 1000 ) ;
26082: LD_VAR 0 1
26086: PPUSH
26087: LD_INT 1000
26089: PPUSH
26090: CALL_OW 234
26094: GO 26064
26096: POP
26097: POP
// end ;
26098: PPOPN 1
26100: END
// export function hHackInvincible ; var i ; begin
26101: LD_INT 0
26103: PPUSH
26104: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
26105: LD_ADDR_VAR 0 2
26109: PUSH
26110: LD_INT 2
26112: PUSH
26113: LD_INT 21
26115: PUSH
26116: LD_INT 1
26118: PUSH
26119: EMPTY
26120: LIST
26121: LIST
26122: PUSH
26123: LD_INT 21
26125: PUSH
26126: LD_INT 2
26128: PUSH
26129: EMPTY
26130: LIST
26131: LIST
26132: PUSH
26133: EMPTY
26134: LIST
26135: LIST
26136: LIST
26137: PPUSH
26138: CALL_OW 69
26142: PUSH
26143: FOR_IN
26144: IFFALSE 26205
// if IsSelected ( i ) then
26146: LD_VAR 0 2
26150: PPUSH
26151: CALL_OW 306
26155: IFFALSE 26203
// begin if i in hInvincible then
26157: LD_VAR 0 2
26161: PUSH
26162: LD_EXP 97
26166: IN
26167: IFFALSE 26187
// hInvincible := hInvincible diff i else
26169: LD_ADDR_EXP 97
26173: PUSH
26174: LD_EXP 97
26178: PUSH
26179: LD_VAR 0 2
26183: DIFF
26184: ST_TO_ADDR
26185: GO 26203
// hInvincible := hInvincible union i ;
26187: LD_ADDR_EXP 97
26191: PUSH
26192: LD_EXP 97
26196: PUSH
26197: LD_VAR 0 2
26201: UNION
26202: ST_TO_ADDR
// end ;
26203: GO 26143
26205: POP
26206: POP
// end ;
26207: LD_VAR 0 1
26211: RET
// export function hHackInvisible ; var i , j ; begin
26212: LD_INT 0
26214: PPUSH
26215: PPUSH
26216: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
26217: LD_ADDR_VAR 0 2
26221: PUSH
26222: LD_INT 21
26224: PUSH
26225: LD_INT 1
26227: PUSH
26228: EMPTY
26229: LIST
26230: LIST
26231: PPUSH
26232: CALL_OW 69
26236: PUSH
26237: FOR_IN
26238: IFFALSE 26262
// if IsSelected ( i ) then
26240: LD_VAR 0 2
26244: PPUSH
26245: CALL_OW 306
26249: IFFALSE 26260
// ComForceInvisible ( i ) ;
26251: LD_VAR 0 2
26255: PPUSH
26256: CALL_OW 496
26260: GO 26237
26262: POP
26263: POP
// end ;
26264: LD_VAR 0 1
26268: RET
// export function hHackChangeYourSide ; begin
26269: LD_INT 0
26271: PPUSH
// if your_side = 8 then
26272: LD_OWVAR 2
26276: PUSH
26277: LD_INT 8
26279: EQUAL
26280: IFFALSE 26292
// your_side := 0 else
26282: LD_ADDR_OWVAR 2
26286: PUSH
26287: LD_INT 0
26289: ST_TO_ADDR
26290: GO 26306
// your_side := your_side + 1 ;
26292: LD_ADDR_OWVAR 2
26296: PUSH
26297: LD_OWVAR 2
26301: PUSH
26302: LD_INT 1
26304: PLUS
26305: ST_TO_ADDR
// end ;
26306: LD_VAR 0 1
26310: RET
// export function hHackChangeUnitSide ; var i , j ; begin
26311: LD_INT 0
26313: PPUSH
26314: PPUSH
26315: PPUSH
// for i in all_units do
26316: LD_ADDR_VAR 0 2
26320: PUSH
26321: LD_OWVAR 3
26325: PUSH
26326: FOR_IN
26327: IFFALSE 26405
// if IsSelected ( i ) then
26329: LD_VAR 0 2
26333: PPUSH
26334: CALL_OW 306
26338: IFFALSE 26403
// begin j := GetSide ( i ) ;
26340: LD_ADDR_VAR 0 3
26344: PUSH
26345: LD_VAR 0 2
26349: PPUSH
26350: CALL_OW 255
26354: ST_TO_ADDR
// if j = 8 then
26355: LD_VAR 0 3
26359: PUSH
26360: LD_INT 8
26362: EQUAL
26363: IFFALSE 26375
// j := 0 else
26365: LD_ADDR_VAR 0 3
26369: PUSH
26370: LD_INT 0
26372: ST_TO_ADDR
26373: GO 26389
// j := j + 1 ;
26375: LD_ADDR_VAR 0 3
26379: PUSH
26380: LD_VAR 0 3
26384: PUSH
26385: LD_INT 1
26387: PLUS
26388: ST_TO_ADDR
// SetSide ( i , j ) ;
26389: LD_VAR 0 2
26393: PPUSH
26394: LD_VAR 0 3
26398: PPUSH
26399: CALL_OW 235
// end ;
26403: GO 26326
26405: POP
26406: POP
// end ;
26407: LD_VAR 0 1
26411: RET
// export function hHackFog ; begin
26412: LD_INT 0
26414: PPUSH
// FogOff ( true ) ;
26415: LD_INT 1
26417: PPUSH
26418: CALL_OW 344
// end ;
26422: LD_VAR 0 1
26426: RET
// export function hHackTeleport ( unit , x , y ) ; begin
26427: LD_INT 0
26429: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
26430: LD_VAR 0 1
26434: PPUSH
26435: LD_VAR 0 2
26439: PPUSH
26440: LD_VAR 0 3
26444: PPUSH
26445: LD_INT 1
26447: PPUSH
26448: LD_INT 1
26450: PPUSH
26451: CALL_OW 483
// CenterOnXY ( x , y ) ;
26455: LD_VAR 0 2
26459: PPUSH
26460: LD_VAR 0 3
26464: PPUSH
26465: CALL_OW 84
// end ; end_of_file
26469: LD_VAR 0 4
26473: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
26474: LD_INT 0
26476: PPUSH
26477: PPUSH
26478: PPUSH
26479: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
26480: LD_VAR 0 1
26484: PPUSH
26485: CALL_OW 264
26489: PUSH
26490: LD_EXP 25
26494: EQUAL
26495: IFFALSE 26567
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
26497: LD_INT 68
26499: PPUSH
26500: LD_VAR 0 1
26504: PPUSH
26505: CALL_OW 255
26509: PPUSH
26510: CALL_OW 321
26514: PUSH
26515: LD_INT 2
26517: EQUAL
26518: IFFALSE 26530
// eff := 70 else
26520: LD_ADDR_VAR 0 4
26524: PUSH
26525: LD_INT 70
26527: ST_TO_ADDR
26528: GO 26538
// eff := 30 ;
26530: LD_ADDR_VAR 0 4
26534: PUSH
26535: LD_INT 30
26537: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
26538: LD_VAR 0 1
26542: PPUSH
26543: CALL_OW 250
26547: PPUSH
26548: LD_VAR 0 1
26552: PPUSH
26553: CALL_OW 251
26557: PPUSH
26558: LD_VAR 0 4
26562: PPUSH
26563: CALL_OW 495
// end ; end ;
26567: LD_VAR 0 2
26571: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
26572: LD_INT 0
26574: PPUSH
// end ;
26575: LD_VAR 0 4
26579: RET
// export function SOS_Command ( cmd ) ; begin
26580: LD_INT 0
26582: PPUSH
// end ;
26583: LD_VAR 0 2
26587: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
26588: LD_INT 0
26590: PPUSH
// end ;
26591: LD_VAR 0 6
26595: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
26596: LD_INT 0
26598: PPUSH
26599: PPUSH
// if not vehicle or not factory then
26600: LD_VAR 0 1
26604: NOT
26605: PUSH
26606: LD_VAR 0 2
26610: NOT
26611: OR
26612: IFFALSE 26616
// exit ;
26614: GO 26847
// if factoryWaypoints >= factory then
26616: LD_EXP 98
26620: PUSH
26621: LD_VAR 0 2
26625: GREATEREQUAL
26626: IFFALSE 26847
// if factoryWaypoints [ factory ] then
26628: LD_EXP 98
26632: PUSH
26633: LD_VAR 0 2
26637: ARRAY
26638: IFFALSE 26847
// begin if GetControl ( vehicle ) = control_manual then
26640: LD_VAR 0 1
26644: PPUSH
26645: CALL_OW 263
26649: PUSH
26650: LD_INT 1
26652: EQUAL
26653: IFFALSE 26734
// begin driver := IsDrivenBy ( vehicle ) ;
26655: LD_ADDR_VAR 0 4
26659: PUSH
26660: LD_VAR 0 1
26664: PPUSH
26665: CALL_OW 311
26669: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
26670: LD_VAR 0 4
26674: PPUSH
26675: LD_EXP 98
26679: PUSH
26680: LD_VAR 0 2
26684: ARRAY
26685: PUSH
26686: LD_INT 1
26688: ARRAY
26689: PPUSH
26690: LD_EXP 98
26694: PUSH
26695: LD_VAR 0 2
26699: ARRAY
26700: PUSH
26701: LD_INT 2
26703: ARRAY
26704: PPUSH
26705: CALL_OW 171
// AddComExitVehicle ( driver ) ;
26709: LD_VAR 0 4
26713: PPUSH
26714: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
26718: LD_VAR 0 4
26722: PPUSH
26723: LD_VAR 0 2
26727: PPUSH
26728: CALL_OW 180
// end else
26732: GO 26847
// if GetControl ( vehicle ) = control_remote then
26734: LD_VAR 0 1
26738: PPUSH
26739: CALL_OW 263
26743: PUSH
26744: LD_INT 2
26746: EQUAL
26747: IFFALSE 26808
// begin wait ( 0 0$2 ) ;
26749: LD_INT 70
26751: PPUSH
26752: CALL_OW 67
// if Connect ( vehicle ) then
26756: LD_VAR 0 1
26760: PPUSH
26761: CALL 39071 0 1
26765: IFFALSE 26806
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
26767: LD_VAR 0 1
26771: PPUSH
26772: LD_EXP 98
26776: PUSH
26777: LD_VAR 0 2
26781: ARRAY
26782: PUSH
26783: LD_INT 1
26785: ARRAY
26786: PPUSH
26787: LD_EXP 98
26791: PUSH
26792: LD_VAR 0 2
26796: ARRAY
26797: PUSH
26798: LD_INT 2
26800: ARRAY
26801: PPUSH
26802: CALL_OW 171
// end else
26806: GO 26847
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
26808: LD_VAR 0 1
26812: PPUSH
26813: LD_EXP 98
26817: PUSH
26818: LD_VAR 0 2
26822: ARRAY
26823: PUSH
26824: LD_INT 1
26826: ARRAY
26827: PPUSH
26828: LD_EXP 98
26832: PUSH
26833: LD_VAR 0 2
26837: ARRAY
26838: PUSH
26839: LD_INT 2
26841: ARRAY
26842: PPUSH
26843: CALL_OW 171
// end ; end ;
26847: LD_VAR 0 3
26851: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
26852: LD_INT 0
26854: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
26855: LD_VAR 0 1
26859: PUSH
26860: LD_INT 250
26862: EQUAL
26863: PUSH
26864: LD_VAR 0 2
26868: PPUSH
26869: CALL_OW 264
26873: PUSH
26874: LD_EXP 28
26878: EQUAL
26879: AND
26880: IFFALSE 26901
// MinerPlaceMine ( unit , x , y ) ;
26882: LD_VAR 0 2
26886: PPUSH
26887: LD_VAR 0 4
26891: PPUSH
26892: LD_VAR 0 5
26896: PPUSH
26897: CALL 29629 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
26901: LD_VAR 0 1
26905: PUSH
26906: LD_INT 251
26908: EQUAL
26909: PUSH
26910: LD_VAR 0 2
26914: PPUSH
26915: CALL_OW 264
26919: PUSH
26920: LD_EXP 28
26924: EQUAL
26925: AND
26926: IFFALSE 26947
// MinerDetonateMine ( unit , x , y ) ;
26928: LD_VAR 0 2
26932: PPUSH
26933: LD_VAR 0 4
26937: PPUSH
26938: LD_VAR 0 5
26942: PPUSH
26943: CALL 29906 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
26947: LD_VAR 0 1
26951: PUSH
26952: LD_INT 252
26954: EQUAL
26955: PUSH
26956: LD_VAR 0 2
26960: PPUSH
26961: CALL_OW 264
26965: PUSH
26966: LD_EXP 28
26970: EQUAL
26971: AND
26972: IFFALSE 26993
// MinerCreateMinefield ( unit , x , y ) ;
26974: LD_VAR 0 2
26978: PPUSH
26979: LD_VAR 0 4
26983: PPUSH
26984: LD_VAR 0 5
26988: PPUSH
26989: CALL 30323 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
26993: LD_VAR 0 1
26997: PUSH
26998: LD_INT 253
27000: EQUAL
27001: PUSH
27002: LD_VAR 0 2
27006: PPUSH
27007: CALL_OW 257
27011: PUSH
27012: LD_INT 5
27014: EQUAL
27015: AND
27016: IFFALSE 27037
// ComBinocular ( unit , x , y ) ;
27018: LD_VAR 0 2
27022: PPUSH
27023: LD_VAR 0 4
27027: PPUSH
27028: LD_VAR 0 5
27032: PPUSH
27033: CALL 30694 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
27037: LD_VAR 0 1
27041: PUSH
27042: LD_INT 254
27044: EQUAL
27045: PUSH
27046: LD_VAR 0 2
27050: PPUSH
27051: CALL_OW 264
27055: PUSH
27056: LD_EXP 23
27060: EQUAL
27061: AND
27062: PUSH
27063: LD_VAR 0 3
27067: PPUSH
27068: CALL_OW 263
27072: PUSH
27073: LD_INT 3
27075: EQUAL
27076: AND
27077: IFFALSE 27093
// HackDestroyVehicle ( unit , selectedUnit ) ;
27079: LD_VAR 0 2
27083: PPUSH
27084: LD_VAR 0 3
27088: PPUSH
27089: CALL 28989 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27093: LD_VAR 0 1
27097: PUSH
27098: LD_INT 255
27100: EQUAL
27101: PUSH
27102: LD_VAR 0 2
27106: PPUSH
27107: CALL_OW 264
27111: PUSH
27112: LD_INT 14
27114: PUSH
27115: LD_INT 53
27117: PUSH
27118: EMPTY
27119: LIST
27120: LIST
27121: IN
27122: AND
27123: PUSH
27124: LD_VAR 0 4
27128: PPUSH
27129: LD_VAR 0 5
27133: PPUSH
27134: CALL_OW 488
27138: AND
27139: IFFALSE 27163
// CutTreeXYR ( unit , x , y , 12 ) ;
27141: LD_VAR 0 2
27145: PPUSH
27146: LD_VAR 0 4
27150: PPUSH
27151: LD_VAR 0 5
27155: PPUSH
27156: LD_INT 12
27158: PPUSH
27159: CALL 27555 0 4
// if cmd = 256 then
27163: LD_VAR 0 1
27167: PUSH
27168: LD_INT 256
27170: EQUAL
27171: IFFALSE 27192
// SetFactoryWaypoint ( unit , x , y ) ;
27173: LD_VAR 0 2
27177: PPUSH
27178: LD_VAR 0 4
27182: PPUSH
27183: LD_VAR 0 5
27187: PPUSH
27188: CALL 27197 0 3
// end ;
27192: LD_VAR 0 6
27196: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
27197: LD_INT 0
27199: PPUSH
27200: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
27201: LD_VAR 0 1
27205: NOT
27206: PUSH
27207: LD_VAR 0 2
27211: PPUSH
27212: LD_VAR 0 3
27216: PPUSH
27217: CALL_OW 488
27221: NOT
27222: OR
27223: PUSH
27224: LD_VAR 0 1
27228: PPUSH
27229: CALL_OW 266
27233: PUSH
27234: LD_INT 3
27236: NONEQUAL
27237: PUSH
27238: LD_VAR 0 1
27242: PPUSH
27243: CALL_OW 247
27247: PUSH
27248: LD_INT 1
27250: EQUAL
27251: NOT
27252: AND
27253: OR
27254: IFFALSE 27258
// exit ;
27256: GO 27407
// if GetType ( factory ) = unit_human then
27258: LD_VAR 0 1
27262: PPUSH
27263: CALL_OW 247
27267: PUSH
27268: LD_INT 1
27270: EQUAL
27271: IFFALSE 27288
// factory := IsInUnit ( factory ) ;
27273: LD_ADDR_VAR 0 1
27277: PUSH
27278: LD_VAR 0 1
27282: PPUSH
27283: CALL_OW 310
27287: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
27288: LD_VAR 0 1
27292: PPUSH
27293: CALL_OW 266
27297: PUSH
27298: LD_INT 3
27300: NONEQUAL
27301: IFFALSE 27305
// exit ;
27303: GO 27407
// if HexInfo ( x , y ) = factory then
27305: LD_VAR 0 2
27309: PPUSH
27310: LD_VAR 0 3
27314: PPUSH
27315: CALL_OW 428
27319: PUSH
27320: LD_VAR 0 1
27324: EQUAL
27325: IFFALSE 27352
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
27327: LD_ADDR_EXP 98
27331: PUSH
27332: LD_EXP 98
27336: PPUSH
27337: LD_VAR 0 1
27341: PPUSH
27342: LD_INT 0
27344: PPUSH
27345: CALL_OW 1
27349: ST_TO_ADDR
27350: GO 27403
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
27352: LD_ADDR_EXP 98
27356: PUSH
27357: LD_EXP 98
27361: PPUSH
27362: LD_VAR 0 1
27366: PPUSH
27367: LD_VAR 0 1
27371: PPUSH
27372: CALL_OW 255
27376: PUSH
27377: LD_VAR 0 1
27381: PUSH
27382: LD_VAR 0 2
27386: PUSH
27387: LD_VAR 0 3
27391: PUSH
27392: EMPTY
27393: LIST
27394: LIST
27395: LIST
27396: LIST
27397: PPUSH
27398: CALL_OW 1
27402: ST_TO_ADDR
// UpdateFactoryWaypoints ;
27403: CALL 27412 0 0
// end ;
27407: LD_VAR 0 4
27411: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
27412: LD_INT 0
27414: PPUSH
27415: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
27416: LD_STRING resetFactoryWaypoint();
27418: PPUSH
27419: CALL_OW 559
// if factoryWaypoints then
27423: LD_EXP 98
27427: IFFALSE 27550
// begin for i := 1 to factoryWaypoints do
27429: LD_ADDR_VAR 0 2
27433: PUSH
27434: DOUBLE
27435: LD_INT 1
27437: DEC
27438: ST_TO_ADDR
27439: LD_EXP 98
27443: PUSH
27444: FOR_TO
27445: IFFALSE 27548
// if factoryWaypoints [ i ] then
27447: LD_EXP 98
27451: PUSH
27452: LD_VAR 0 2
27456: ARRAY
27457: IFFALSE 27546
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
27459: LD_STRING setFactoryWaypointXY(
27461: PUSH
27462: LD_EXP 98
27466: PUSH
27467: LD_VAR 0 2
27471: ARRAY
27472: PUSH
27473: LD_INT 1
27475: ARRAY
27476: STR
27477: PUSH
27478: LD_STRING ,
27480: STR
27481: PUSH
27482: LD_EXP 98
27486: PUSH
27487: LD_VAR 0 2
27491: ARRAY
27492: PUSH
27493: LD_INT 2
27495: ARRAY
27496: STR
27497: PUSH
27498: LD_STRING ,
27500: STR
27501: PUSH
27502: LD_EXP 98
27506: PUSH
27507: LD_VAR 0 2
27511: ARRAY
27512: PUSH
27513: LD_INT 3
27515: ARRAY
27516: STR
27517: PUSH
27518: LD_STRING ,
27520: STR
27521: PUSH
27522: LD_EXP 98
27526: PUSH
27527: LD_VAR 0 2
27531: ARRAY
27532: PUSH
27533: LD_INT 4
27535: ARRAY
27536: STR
27537: PUSH
27538: LD_STRING )
27540: STR
27541: PPUSH
27542: CALL_OW 559
27546: GO 27444
27548: POP
27549: POP
// end ; end ;
27550: LD_VAR 0 1
27554: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27555: LD_INT 0
27557: PPUSH
27558: PPUSH
27559: PPUSH
27560: PPUSH
27561: PPUSH
27562: PPUSH
27563: PPUSH
27564: PPUSH
27565: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
27566: LD_VAR 0 1
27570: NOT
27571: PUSH
27572: LD_VAR 0 2
27576: PPUSH
27577: LD_VAR 0 3
27581: PPUSH
27582: CALL_OW 488
27586: NOT
27587: OR
27588: PUSH
27589: LD_VAR 0 4
27593: NOT
27594: OR
27595: IFFALSE 27599
// exit ;
27597: GO 27939
// list := [ ] ;
27599: LD_ADDR_VAR 0 13
27603: PUSH
27604: EMPTY
27605: ST_TO_ADDR
// if x - r < 0 then
27606: LD_VAR 0 2
27610: PUSH
27611: LD_VAR 0 4
27615: MINUS
27616: PUSH
27617: LD_INT 0
27619: LESS
27620: IFFALSE 27632
// min_x := 0 else
27622: LD_ADDR_VAR 0 7
27626: PUSH
27627: LD_INT 0
27629: ST_TO_ADDR
27630: GO 27648
// min_x := x - r ;
27632: LD_ADDR_VAR 0 7
27636: PUSH
27637: LD_VAR 0 2
27641: PUSH
27642: LD_VAR 0 4
27646: MINUS
27647: ST_TO_ADDR
// if y - r < 0 then
27648: LD_VAR 0 3
27652: PUSH
27653: LD_VAR 0 4
27657: MINUS
27658: PUSH
27659: LD_INT 0
27661: LESS
27662: IFFALSE 27674
// min_y := 0 else
27664: LD_ADDR_VAR 0 8
27668: PUSH
27669: LD_INT 0
27671: ST_TO_ADDR
27672: GO 27690
// min_y := y - r ;
27674: LD_ADDR_VAR 0 8
27678: PUSH
27679: LD_VAR 0 3
27683: PUSH
27684: LD_VAR 0 4
27688: MINUS
27689: ST_TO_ADDR
// max_x := x + r ;
27690: LD_ADDR_VAR 0 9
27694: PUSH
27695: LD_VAR 0 2
27699: PUSH
27700: LD_VAR 0 4
27704: PLUS
27705: ST_TO_ADDR
// max_y := y + r ;
27706: LD_ADDR_VAR 0 10
27710: PUSH
27711: LD_VAR 0 3
27715: PUSH
27716: LD_VAR 0 4
27720: PLUS
27721: ST_TO_ADDR
// for _x = min_x to max_x do
27722: LD_ADDR_VAR 0 11
27726: PUSH
27727: DOUBLE
27728: LD_VAR 0 7
27732: DEC
27733: ST_TO_ADDR
27734: LD_VAR 0 9
27738: PUSH
27739: FOR_TO
27740: IFFALSE 27857
// for _y = min_y to max_y do
27742: LD_ADDR_VAR 0 12
27746: PUSH
27747: DOUBLE
27748: LD_VAR 0 8
27752: DEC
27753: ST_TO_ADDR
27754: LD_VAR 0 10
27758: PUSH
27759: FOR_TO
27760: IFFALSE 27853
// begin if not ValidHex ( _x , _y ) then
27762: LD_VAR 0 11
27766: PPUSH
27767: LD_VAR 0 12
27771: PPUSH
27772: CALL_OW 488
27776: NOT
27777: IFFALSE 27781
// continue ;
27779: GO 27759
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27781: LD_VAR 0 11
27785: PPUSH
27786: LD_VAR 0 12
27790: PPUSH
27791: CALL_OW 351
27795: PUSH
27796: LD_VAR 0 11
27800: PPUSH
27801: LD_VAR 0 12
27805: PPUSH
27806: CALL_OW 554
27810: AND
27811: IFFALSE 27851
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27813: LD_ADDR_VAR 0 13
27817: PUSH
27818: LD_VAR 0 13
27822: PPUSH
27823: LD_VAR 0 13
27827: PUSH
27828: LD_INT 1
27830: PLUS
27831: PPUSH
27832: LD_VAR 0 11
27836: PUSH
27837: LD_VAR 0 12
27841: PUSH
27842: EMPTY
27843: LIST
27844: LIST
27845: PPUSH
27846: CALL_OW 2
27850: ST_TO_ADDR
// end ;
27851: GO 27759
27853: POP
27854: POP
27855: GO 27739
27857: POP
27858: POP
// if not list then
27859: LD_VAR 0 13
27863: NOT
27864: IFFALSE 27868
// exit ;
27866: GO 27939
// for i in list do
27868: LD_ADDR_VAR 0 6
27872: PUSH
27873: LD_VAR 0 13
27877: PUSH
27878: FOR_IN
27879: IFFALSE 27937
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
27881: LD_VAR 0 1
27885: PPUSH
27886: LD_STRING M
27888: PUSH
27889: LD_VAR 0 6
27893: PUSH
27894: LD_INT 1
27896: ARRAY
27897: PUSH
27898: LD_VAR 0 6
27902: PUSH
27903: LD_INT 2
27905: ARRAY
27906: PUSH
27907: LD_INT 0
27909: PUSH
27910: LD_INT 0
27912: PUSH
27913: LD_INT 0
27915: PUSH
27916: LD_INT 0
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: LIST
27923: LIST
27924: LIST
27925: LIST
27926: LIST
27927: PUSH
27928: EMPTY
27929: LIST
27930: PPUSH
27931: CALL_OW 447
27935: GO 27878
27937: POP
27938: POP
// end ;
27939: LD_VAR 0 5
27943: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
27944: LD_EXP 99
27948: NOT
27949: IFFALSE 27999
27951: GO 27953
27953: DISABLE
// begin initHack := true ;
27954: LD_ADDR_EXP 99
27958: PUSH
27959: LD_INT 1
27961: ST_TO_ADDR
// hackTanks := [ ] ;
27962: LD_ADDR_EXP 100
27966: PUSH
27967: EMPTY
27968: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
27969: LD_ADDR_EXP 101
27973: PUSH
27974: EMPTY
27975: ST_TO_ADDR
// hackLimit := 3 ;
27976: LD_ADDR_EXP 102
27980: PUSH
27981: LD_INT 3
27983: ST_TO_ADDR
// hackDist := 12 ;
27984: LD_ADDR_EXP 103
27988: PUSH
27989: LD_INT 12
27991: ST_TO_ADDR
// hackCounter := [ ] ;
27992: LD_ADDR_EXP 104
27996: PUSH
27997: EMPTY
27998: ST_TO_ADDR
// end ;
27999: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
28000: LD_EXP 99
28004: PUSH
28005: LD_INT 34
28007: PUSH
28008: LD_EXP 23
28012: PUSH
28013: EMPTY
28014: LIST
28015: LIST
28016: PPUSH
28017: CALL_OW 69
28021: AND
28022: IFFALSE 28277
28024: GO 28026
28026: DISABLE
28027: LD_INT 0
28029: PPUSH
28030: PPUSH
// begin enable ;
28031: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
28032: LD_ADDR_VAR 0 1
28036: PUSH
28037: LD_INT 34
28039: PUSH
28040: LD_EXP 23
28044: PUSH
28045: EMPTY
28046: LIST
28047: LIST
28048: PPUSH
28049: CALL_OW 69
28053: PUSH
28054: FOR_IN
28055: IFFALSE 28275
// begin if not i in hackTanks then
28057: LD_VAR 0 1
28061: PUSH
28062: LD_EXP 100
28066: IN
28067: NOT
28068: IFFALSE 28151
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
28070: LD_ADDR_EXP 100
28074: PUSH
28075: LD_EXP 100
28079: PPUSH
28080: LD_EXP 100
28084: PUSH
28085: LD_INT 1
28087: PLUS
28088: PPUSH
28089: LD_VAR 0 1
28093: PPUSH
28094: CALL_OW 1
28098: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
28099: LD_ADDR_EXP 101
28103: PUSH
28104: LD_EXP 101
28108: PPUSH
28109: LD_EXP 101
28113: PUSH
28114: LD_INT 1
28116: PLUS
28117: PPUSH
28118: EMPTY
28119: PPUSH
28120: CALL_OW 1
28124: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
28125: LD_ADDR_EXP 104
28129: PUSH
28130: LD_EXP 104
28134: PPUSH
28135: LD_EXP 104
28139: PUSH
28140: LD_INT 1
28142: PLUS
28143: PPUSH
28144: EMPTY
28145: PPUSH
28146: CALL_OW 1
28150: ST_TO_ADDR
// end ; if not IsOk ( i ) then
28151: LD_VAR 0 1
28155: PPUSH
28156: CALL_OW 302
28160: NOT
28161: IFFALSE 28174
// begin HackUnlinkAll ( i ) ;
28163: LD_VAR 0 1
28167: PPUSH
28168: CALL 28280 0 1
// continue ;
28172: GO 28054
// end ; HackCheckCapturedStatus ( i ) ;
28174: LD_VAR 0 1
28178: PPUSH
28179: CALL 28723 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
28183: LD_ADDR_VAR 0 2
28187: PUSH
28188: LD_INT 81
28190: PUSH
28191: LD_VAR 0 1
28195: PPUSH
28196: CALL_OW 255
28200: PUSH
28201: EMPTY
28202: LIST
28203: LIST
28204: PUSH
28205: LD_INT 33
28207: PUSH
28208: LD_INT 3
28210: PUSH
28211: EMPTY
28212: LIST
28213: LIST
28214: PUSH
28215: LD_INT 91
28217: PUSH
28218: LD_VAR 0 1
28222: PUSH
28223: LD_EXP 103
28227: PUSH
28228: EMPTY
28229: LIST
28230: LIST
28231: LIST
28232: PUSH
28233: LD_INT 50
28235: PUSH
28236: EMPTY
28237: LIST
28238: PUSH
28239: EMPTY
28240: LIST
28241: LIST
28242: LIST
28243: LIST
28244: PPUSH
28245: CALL_OW 69
28249: ST_TO_ADDR
// if not tmp then
28250: LD_VAR 0 2
28254: NOT
28255: IFFALSE 28259
// continue ;
28257: GO 28054
// HackLink ( i , tmp ) ;
28259: LD_VAR 0 1
28263: PPUSH
28264: LD_VAR 0 2
28268: PPUSH
28269: CALL 28416 0 2
// end ;
28273: GO 28054
28275: POP
28276: POP
// end ;
28277: PPOPN 2
28279: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
28280: LD_INT 0
28282: PPUSH
28283: PPUSH
28284: PPUSH
// if not hack in hackTanks then
28285: LD_VAR 0 1
28289: PUSH
28290: LD_EXP 100
28294: IN
28295: NOT
28296: IFFALSE 28300
// exit ;
28298: GO 28411
// index := GetElementIndex ( hackTanks , hack ) ;
28300: LD_ADDR_VAR 0 4
28304: PUSH
28305: LD_EXP 100
28309: PPUSH
28310: LD_VAR 0 1
28314: PPUSH
28315: CALL 35885 0 2
28319: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
28320: LD_EXP 101
28324: PUSH
28325: LD_VAR 0 4
28329: ARRAY
28330: IFFALSE 28411
// begin for i in hackTanksCaptured [ index ] do
28332: LD_ADDR_VAR 0 3
28336: PUSH
28337: LD_EXP 101
28341: PUSH
28342: LD_VAR 0 4
28346: ARRAY
28347: PUSH
28348: FOR_IN
28349: IFFALSE 28375
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
28351: LD_VAR 0 3
28355: PUSH
28356: LD_INT 1
28358: ARRAY
28359: PPUSH
28360: LD_VAR 0 3
28364: PUSH
28365: LD_INT 2
28367: ARRAY
28368: PPUSH
28369: CALL_OW 235
28373: GO 28348
28375: POP
28376: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
28377: LD_ADDR_EXP 101
28381: PUSH
28382: LD_EXP 101
28386: PPUSH
28387: LD_VAR 0 4
28391: PPUSH
28392: EMPTY
28393: PPUSH
28394: CALL_OW 1
28398: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
28399: LD_VAR 0 1
28403: PPUSH
28404: LD_INT 0
28406: PPUSH
28407: CALL_OW 505
// end ; end ;
28411: LD_VAR 0 2
28415: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
28416: LD_INT 0
28418: PPUSH
28419: PPUSH
28420: PPUSH
// if not hack in hackTanks or not vehicles then
28421: LD_VAR 0 1
28425: PUSH
28426: LD_EXP 100
28430: IN
28431: NOT
28432: PUSH
28433: LD_VAR 0 2
28437: NOT
28438: OR
28439: IFFALSE 28443
// exit ;
28441: GO 28718
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
28443: LD_ADDR_VAR 0 2
28447: PUSH
28448: LD_VAR 0 1
28452: PPUSH
28453: LD_VAR 0 2
28457: PPUSH
28458: LD_INT 1
28460: PPUSH
28461: LD_INT 1
28463: PPUSH
28464: CALL 36535 0 4
28468: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
28469: LD_ADDR_VAR 0 5
28473: PUSH
28474: LD_EXP 100
28478: PPUSH
28479: LD_VAR 0 1
28483: PPUSH
28484: CALL 35885 0 2
28488: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
28489: LD_EXP 101
28493: PUSH
28494: LD_VAR 0 5
28498: ARRAY
28499: PUSH
28500: LD_EXP 102
28504: LESS
28505: IFFALSE 28694
// begin for i := 1 to vehicles do
28507: LD_ADDR_VAR 0 4
28511: PUSH
28512: DOUBLE
28513: LD_INT 1
28515: DEC
28516: ST_TO_ADDR
28517: LD_VAR 0 2
28521: PUSH
28522: FOR_TO
28523: IFFALSE 28692
// begin if hackTanksCaptured [ index ] = hackLimit then
28525: LD_EXP 101
28529: PUSH
28530: LD_VAR 0 5
28534: ARRAY
28535: PUSH
28536: LD_EXP 102
28540: EQUAL
28541: IFFALSE 28545
// break ;
28543: GO 28692
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
28545: LD_ADDR_EXP 104
28549: PUSH
28550: LD_EXP 104
28554: PPUSH
28555: LD_VAR 0 5
28559: PPUSH
28560: LD_EXP 104
28564: PUSH
28565: LD_VAR 0 5
28569: ARRAY
28570: PUSH
28571: LD_INT 1
28573: PLUS
28574: PPUSH
28575: CALL_OW 1
28579: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
28580: LD_ADDR_EXP 101
28584: PUSH
28585: LD_EXP 101
28589: PPUSH
28590: LD_VAR 0 5
28594: PUSH
28595: LD_EXP 101
28599: PUSH
28600: LD_VAR 0 5
28604: ARRAY
28605: PUSH
28606: LD_INT 1
28608: PLUS
28609: PUSH
28610: EMPTY
28611: LIST
28612: LIST
28613: PPUSH
28614: LD_VAR 0 2
28618: PUSH
28619: LD_VAR 0 4
28623: ARRAY
28624: PUSH
28625: LD_VAR 0 2
28629: PUSH
28630: LD_VAR 0 4
28634: ARRAY
28635: PPUSH
28636: CALL_OW 255
28640: PUSH
28641: EMPTY
28642: LIST
28643: LIST
28644: PPUSH
28645: CALL 36100 0 3
28649: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
28650: LD_VAR 0 2
28654: PUSH
28655: LD_VAR 0 4
28659: ARRAY
28660: PPUSH
28661: LD_VAR 0 1
28665: PPUSH
28666: CALL_OW 255
28670: PPUSH
28671: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
28675: LD_VAR 0 2
28679: PUSH
28680: LD_VAR 0 4
28684: ARRAY
28685: PPUSH
28686: CALL_OW 141
// end ;
28690: GO 28522
28692: POP
28693: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28694: LD_VAR 0 1
28698: PPUSH
28699: LD_EXP 101
28703: PUSH
28704: LD_VAR 0 5
28708: ARRAY
28709: PUSH
28710: LD_INT 0
28712: PLUS
28713: PPUSH
28714: CALL_OW 505
// end ;
28718: LD_VAR 0 3
28722: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
28723: LD_INT 0
28725: PPUSH
28726: PPUSH
28727: PPUSH
28728: PPUSH
// if not hack in hackTanks then
28729: LD_VAR 0 1
28733: PUSH
28734: LD_EXP 100
28738: IN
28739: NOT
28740: IFFALSE 28744
// exit ;
28742: GO 28984
// index := GetElementIndex ( hackTanks , hack ) ;
28744: LD_ADDR_VAR 0 4
28748: PUSH
28749: LD_EXP 100
28753: PPUSH
28754: LD_VAR 0 1
28758: PPUSH
28759: CALL 35885 0 2
28763: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
28764: LD_ADDR_VAR 0 3
28768: PUSH
28769: DOUBLE
28770: LD_EXP 101
28774: PUSH
28775: LD_VAR 0 4
28779: ARRAY
28780: INC
28781: ST_TO_ADDR
28782: LD_INT 1
28784: PUSH
28785: FOR_DOWNTO
28786: IFFALSE 28958
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
28788: LD_ADDR_VAR 0 5
28792: PUSH
28793: LD_EXP 101
28797: PUSH
28798: LD_VAR 0 4
28802: ARRAY
28803: PUSH
28804: LD_VAR 0 3
28808: ARRAY
28809: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
28810: LD_VAR 0 5
28814: PUSH
28815: LD_INT 1
28817: ARRAY
28818: PPUSH
28819: CALL_OW 302
28823: NOT
28824: PUSH
28825: LD_VAR 0 5
28829: PUSH
28830: LD_INT 1
28832: ARRAY
28833: PPUSH
28834: CALL_OW 255
28838: PUSH
28839: LD_VAR 0 1
28843: PPUSH
28844: CALL_OW 255
28848: NONEQUAL
28849: OR
28850: IFFALSE 28956
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
28852: LD_VAR 0 5
28856: PUSH
28857: LD_INT 1
28859: ARRAY
28860: PPUSH
28861: CALL_OW 305
28865: PUSH
28866: LD_VAR 0 5
28870: PUSH
28871: LD_INT 1
28873: ARRAY
28874: PPUSH
28875: CALL_OW 255
28879: PUSH
28880: LD_VAR 0 1
28884: PPUSH
28885: CALL_OW 255
28889: EQUAL
28890: AND
28891: IFFALSE 28915
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
28893: LD_VAR 0 5
28897: PUSH
28898: LD_INT 1
28900: ARRAY
28901: PPUSH
28902: LD_VAR 0 5
28906: PUSH
28907: LD_INT 2
28909: ARRAY
28910: PPUSH
28911: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
28915: LD_ADDR_EXP 101
28919: PUSH
28920: LD_EXP 101
28924: PPUSH
28925: LD_VAR 0 4
28929: PPUSH
28930: LD_EXP 101
28934: PUSH
28935: LD_VAR 0 4
28939: ARRAY
28940: PPUSH
28941: LD_VAR 0 3
28945: PPUSH
28946: CALL_OW 3
28950: PPUSH
28951: CALL_OW 1
28955: ST_TO_ADDR
// end ; end ;
28956: GO 28785
28958: POP
28959: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28960: LD_VAR 0 1
28964: PPUSH
28965: LD_EXP 101
28969: PUSH
28970: LD_VAR 0 4
28974: ARRAY
28975: PUSH
28976: LD_INT 0
28978: PLUS
28979: PPUSH
28980: CALL_OW 505
// end ;
28984: LD_VAR 0 2
28988: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
28989: LD_INT 0
28991: PPUSH
28992: PPUSH
28993: PPUSH
28994: PPUSH
// if not hack in hackTanks then
28995: LD_VAR 0 1
28999: PUSH
29000: LD_EXP 100
29004: IN
29005: NOT
29006: IFFALSE 29010
// exit ;
29008: GO 29095
// index := GetElementIndex ( hackTanks , hack ) ;
29010: LD_ADDR_VAR 0 5
29014: PUSH
29015: LD_EXP 100
29019: PPUSH
29020: LD_VAR 0 1
29024: PPUSH
29025: CALL 35885 0 2
29029: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
29030: LD_ADDR_VAR 0 4
29034: PUSH
29035: DOUBLE
29036: LD_INT 1
29038: DEC
29039: ST_TO_ADDR
29040: LD_EXP 101
29044: PUSH
29045: LD_VAR 0 5
29049: ARRAY
29050: PUSH
29051: FOR_TO
29052: IFFALSE 29093
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
29054: LD_EXP 101
29058: PUSH
29059: LD_VAR 0 5
29063: ARRAY
29064: PUSH
29065: LD_VAR 0 4
29069: ARRAY
29070: PUSH
29071: LD_INT 1
29073: ARRAY
29074: PUSH
29075: LD_VAR 0 2
29079: EQUAL
29080: IFFALSE 29091
// KillUnit ( vehicle ) ;
29082: LD_VAR 0 2
29086: PPUSH
29087: CALL_OW 66
29091: GO 29051
29093: POP
29094: POP
// end ;
29095: LD_VAR 0 3
29099: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
29100: LD_EXP 105
29104: NOT
29105: IFFALSE 29140
29107: GO 29109
29109: DISABLE
// begin initMiner := true ;
29110: LD_ADDR_EXP 105
29114: PUSH
29115: LD_INT 1
29117: ST_TO_ADDR
// minersList := [ ] ;
29118: LD_ADDR_EXP 106
29122: PUSH
29123: EMPTY
29124: ST_TO_ADDR
// minerMinesList := [ ] ;
29125: LD_ADDR_EXP 107
29129: PUSH
29130: EMPTY
29131: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
29132: LD_ADDR_EXP 108
29136: PUSH
29137: LD_INT 5
29139: ST_TO_ADDR
// end ;
29140: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
29141: LD_EXP 105
29145: PUSH
29146: LD_INT 34
29148: PUSH
29149: LD_EXP 28
29153: PUSH
29154: EMPTY
29155: LIST
29156: LIST
29157: PPUSH
29158: CALL_OW 69
29162: AND
29163: IFFALSE 29626
29165: GO 29167
29167: DISABLE
29168: LD_INT 0
29170: PPUSH
29171: PPUSH
29172: PPUSH
29173: PPUSH
// begin enable ;
29174: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
29175: LD_ADDR_VAR 0 1
29179: PUSH
29180: LD_INT 34
29182: PUSH
29183: LD_EXP 28
29187: PUSH
29188: EMPTY
29189: LIST
29190: LIST
29191: PPUSH
29192: CALL_OW 69
29196: PUSH
29197: FOR_IN
29198: IFFALSE 29270
// begin if not i in minersList then
29200: LD_VAR 0 1
29204: PUSH
29205: LD_EXP 106
29209: IN
29210: NOT
29211: IFFALSE 29268
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
29213: LD_ADDR_EXP 106
29217: PUSH
29218: LD_EXP 106
29222: PPUSH
29223: LD_EXP 106
29227: PUSH
29228: LD_INT 1
29230: PLUS
29231: PPUSH
29232: LD_VAR 0 1
29236: PPUSH
29237: CALL_OW 1
29241: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
29242: LD_ADDR_EXP 107
29246: PUSH
29247: LD_EXP 107
29251: PPUSH
29252: LD_EXP 107
29256: PUSH
29257: LD_INT 1
29259: PLUS
29260: PPUSH
29261: EMPTY
29262: PPUSH
29263: CALL_OW 1
29267: ST_TO_ADDR
// end end ;
29268: GO 29197
29270: POP
29271: POP
// for i := minerMinesList downto 1 do
29272: LD_ADDR_VAR 0 1
29276: PUSH
29277: DOUBLE
29278: LD_EXP 107
29282: INC
29283: ST_TO_ADDR
29284: LD_INT 1
29286: PUSH
29287: FOR_DOWNTO
29288: IFFALSE 29624
// begin if IsLive ( minersList [ i ] ) then
29290: LD_EXP 106
29294: PUSH
29295: LD_VAR 0 1
29299: ARRAY
29300: PPUSH
29301: CALL_OW 300
29305: IFFALSE 29333
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
29307: LD_EXP 106
29311: PUSH
29312: LD_VAR 0 1
29316: ARRAY
29317: PPUSH
29318: LD_EXP 107
29322: PUSH
29323: LD_VAR 0 1
29327: ARRAY
29328: PPUSH
29329: CALL_OW 505
// if not minerMinesList [ i ] then
29333: LD_EXP 107
29337: PUSH
29338: LD_VAR 0 1
29342: ARRAY
29343: NOT
29344: IFFALSE 29348
// continue ;
29346: GO 29287
// for j := minerMinesList [ i ] downto 1 do
29348: LD_ADDR_VAR 0 2
29352: PUSH
29353: DOUBLE
29354: LD_EXP 107
29358: PUSH
29359: LD_VAR 0 1
29363: ARRAY
29364: INC
29365: ST_TO_ADDR
29366: LD_INT 1
29368: PUSH
29369: FOR_DOWNTO
29370: IFFALSE 29620
// begin side := GetSide ( minersList [ i ] ) ;
29372: LD_ADDR_VAR 0 3
29376: PUSH
29377: LD_EXP 106
29381: PUSH
29382: LD_VAR 0 1
29386: ARRAY
29387: PPUSH
29388: CALL_OW 255
29392: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
29393: LD_ADDR_VAR 0 4
29397: PUSH
29398: LD_EXP 107
29402: PUSH
29403: LD_VAR 0 1
29407: ARRAY
29408: PUSH
29409: LD_VAR 0 2
29413: ARRAY
29414: PUSH
29415: LD_INT 1
29417: ARRAY
29418: PPUSH
29419: LD_EXP 107
29423: PUSH
29424: LD_VAR 0 1
29428: ARRAY
29429: PUSH
29430: LD_VAR 0 2
29434: ARRAY
29435: PUSH
29436: LD_INT 2
29438: ARRAY
29439: PPUSH
29440: CALL_OW 428
29444: ST_TO_ADDR
// if not tmp then
29445: LD_VAR 0 4
29449: NOT
29450: IFFALSE 29454
// continue ;
29452: GO 29369
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
29454: LD_VAR 0 4
29458: PUSH
29459: LD_INT 81
29461: PUSH
29462: LD_VAR 0 3
29466: PUSH
29467: EMPTY
29468: LIST
29469: LIST
29470: PPUSH
29471: CALL_OW 69
29475: IN
29476: PUSH
29477: LD_EXP 107
29481: PUSH
29482: LD_VAR 0 1
29486: ARRAY
29487: PUSH
29488: LD_VAR 0 2
29492: ARRAY
29493: PUSH
29494: LD_INT 1
29496: ARRAY
29497: PPUSH
29498: LD_EXP 107
29502: PUSH
29503: LD_VAR 0 1
29507: ARRAY
29508: PUSH
29509: LD_VAR 0 2
29513: ARRAY
29514: PUSH
29515: LD_INT 2
29517: ARRAY
29518: PPUSH
29519: CALL_OW 458
29523: AND
29524: IFFALSE 29618
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
29526: LD_EXP 107
29530: PUSH
29531: LD_VAR 0 1
29535: ARRAY
29536: PUSH
29537: LD_VAR 0 2
29541: ARRAY
29542: PUSH
29543: LD_INT 1
29545: ARRAY
29546: PPUSH
29547: LD_EXP 107
29551: PUSH
29552: LD_VAR 0 1
29556: ARRAY
29557: PUSH
29558: LD_VAR 0 2
29562: ARRAY
29563: PUSH
29564: LD_INT 2
29566: ARRAY
29567: PPUSH
29568: LD_VAR 0 3
29572: PPUSH
29573: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
29577: LD_ADDR_EXP 107
29581: PUSH
29582: LD_EXP 107
29586: PPUSH
29587: LD_VAR 0 1
29591: PPUSH
29592: LD_EXP 107
29596: PUSH
29597: LD_VAR 0 1
29601: ARRAY
29602: PPUSH
29603: LD_VAR 0 2
29607: PPUSH
29608: CALL_OW 3
29612: PPUSH
29613: CALL_OW 1
29617: ST_TO_ADDR
// end ; end ;
29618: GO 29369
29620: POP
29621: POP
// end ;
29622: GO 29287
29624: POP
29625: POP
// end ;
29626: PPOPN 4
29628: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
29629: LD_INT 0
29631: PPUSH
29632: PPUSH
// result := false ;
29633: LD_ADDR_VAR 0 4
29637: PUSH
29638: LD_INT 0
29640: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
29641: LD_VAR 0 1
29645: PPUSH
29646: CALL_OW 264
29650: PUSH
29651: LD_EXP 28
29655: EQUAL
29656: NOT
29657: IFFALSE 29661
// exit ;
29659: GO 29901
// index := GetElementIndex ( minersList , unit ) ;
29661: LD_ADDR_VAR 0 5
29665: PUSH
29666: LD_EXP 106
29670: PPUSH
29671: LD_VAR 0 1
29675: PPUSH
29676: CALL 35885 0 2
29680: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
29681: LD_EXP 107
29685: PUSH
29686: LD_VAR 0 5
29690: ARRAY
29691: PUSH
29692: LD_EXP 108
29696: GREATEREQUAL
29697: IFFALSE 29701
// exit ;
29699: GO 29901
// ComMoveXY ( unit , x , y ) ;
29701: LD_VAR 0 1
29705: PPUSH
29706: LD_VAR 0 2
29710: PPUSH
29711: LD_VAR 0 3
29715: PPUSH
29716: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29720: LD_INT 35
29722: PPUSH
29723: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
29727: LD_VAR 0 1
29731: PPUSH
29732: LD_VAR 0 2
29736: PPUSH
29737: LD_VAR 0 3
29741: PPUSH
29742: CALL 66657 0 3
29746: NOT
29747: PUSH
29748: LD_VAR 0 1
29752: PPUSH
29753: CALL_OW 314
29757: AND
29758: IFFALSE 29762
// exit ;
29760: GO 29901
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
29762: LD_VAR 0 2
29766: PPUSH
29767: LD_VAR 0 3
29771: PPUSH
29772: CALL_OW 428
29776: PUSH
29777: LD_VAR 0 1
29781: EQUAL
29782: PUSH
29783: LD_VAR 0 1
29787: PPUSH
29788: CALL_OW 314
29792: NOT
29793: AND
29794: IFFALSE 29720
// PlaySoundXY ( x , y , PlantMine ) ;
29796: LD_VAR 0 2
29800: PPUSH
29801: LD_VAR 0 3
29805: PPUSH
29806: LD_STRING PlantMine
29808: PPUSH
29809: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
29813: LD_VAR 0 2
29817: PPUSH
29818: LD_VAR 0 3
29822: PPUSH
29823: LD_VAR 0 1
29827: PPUSH
29828: CALL_OW 255
29832: PPUSH
29833: LD_INT 0
29835: PPUSH
29836: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
29840: LD_ADDR_EXP 107
29844: PUSH
29845: LD_EXP 107
29849: PPUSH
29850: LD_VAR 0 5
29854: PUSH
29855: LD_EXP 107
29859: PUSH
29860: LD_VAR 0 5
29864: ARRAY
29865: PUSH
29866: LD_INT 1
29868: PLUS
29869: PUSH
29870: EMPTY
29871: LIST
29872: LIST
29873: PPUSH
29874: LD_VAR 0 2
29878: PUSH
29879: LD_VAR 0 3
29883: PUSH
29884: EMPTY
29885: LIST
29886: LIST
29887: PPUSH
29888: CALL 36100 0 3
29892: ST_TO_ADDR
// result := true ;
29893: LD_ADDR_VAR 0 4
29897: PUSH
29898: LD_INT 1
29900: ST_TO_ADDR
// end ;
29901: LD_VAR 0 4
29905: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
29906: LD_INT 0
29908: PPUSH
29909: PPUSH
29910: PPUSH
// if not unit in minersList then
29911: LD_VAR 0 1
29915: PUSH
29916: LD_EXP 106
29920: IN
29921: NOT
29922: IFFALSE 29926
// exit ;
29924: GO 30318
// index := GetElementIndex ( minersList , unit ) ;
29926: LD_ADDR_VAR 0 6
29930: PUSH
29931: LD_EXP 106
29935: PPUSH
29936: LD_VAR 0 1
29940: PPUSH
29941: CALL 35885 0 2
29945: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
29946: LD_ADDR_VAR 0 5
29950: PUSH
29951: DOUBLE
29952: LD_EXP 107
29956: PUSH
29957: LD_VAR 0 6
29961: ARRAY
29962: INC
29963: ST_TO_ADDR
29964: LD_INT 1
29966: PUSH
29967: FOR_DOWNTO
29968: IFFALSE 30129
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
29970: LD_EXP 107
29974: PUSH
29975: LD_VAR 0 6
29979: ARRAY
29980: PUSH
29981: LD_VAR 0 5
29985: ARRAY
29986: PUSH
29987: LD_INT 1
29989: ARRAY
29990: PUSH
29991: LD_VAR 0 2
29995: EQUAL
29996: PUSH
29997: LD_EXP 107
30001: PUSH
30002: LD_VAR 0 6
30006: ARRAY
30007: PUSH
30008: LD_VAR 0 5
30012: ARRAY
30013: PUSH
30014: LD_INT 2
30016: ARRAY
30017: PUSH
30018: LD_VAR 0 3
30022: EQUAL
30023: AND
30024: IFFALSE 30127
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30026: LD_EXP 107
30030: PUSH
30031: LD_VAR 0 6
30035: ARRAY
30036: PUSH
30037: LD_VAR 0 5
30041: ARRAY
30042: PUSH
30043: LD_INT 1
30045: ARRAY
30046: PPUSH
30047: LD_EXP 107
30051: PUSH
30052: LD_VAR 0 6
30056: ARRAY
30057: PUSH
30058: LD_VAR 0 5
30062: ARRAY
30063: PUSH
30064: LD_INT 2
30066: ARRAY
30067: PPUSH
30068: LD_VAR 0 1
30072: PPUSH
30073: CALL_OW 255
30077: PPUSH
30078: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30082: LD_ADDR_EXP 107
30086: PUSH
30087: LD_EXP 107
30091: PPUSH
30092: LD_VAR 0 6
30096: PPUSH
30097: LD_EXP 107
30101: PUSH
30102: LD_VAR 0 6
30106: ARRAY
30107: PPUSH
30108: LD_VAR 0 5
30112: PPUSH
30113: CALL_OW 3
30117: PPUSH
30118: CALL_OW 1
30122: ST_TO_ADDR
// exit ;
30123: POP
30124: POP
30125: GO 30318
// end ; end ;
30127: GO 29967
30129: POP
30130: POP
// for i := minerMinesList [ index ] downto 1 do
30131: LD_ADDR_VAR 0 5
30135: PUSH
30136: DOUBLE
30137: LD_EXP 107
30141: PUSH
30142: LD_VAR 0 6
30146: ARRAY
30147: INC
30148: ST_TO_ADDR
30149: LD_INT 1
30151: PUSH
30152: FOR_DOWNTO
30153: IFFALSE 30316
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
30155: LD_EXP 107
30159: PUSH
30160: LD_VAR 0 6
30164: ARRAY
30165: PUSH
30166: LD_VAR 0 5
30170: ARRAY
30171: PUSH
30172: LD_INT 1
30174: ARRAY
30175: PPUSH
30176: LD_EXP 107
30180: PUSH
30181: LD_VAR 0 6
30185: ARRAY
30186: PUSH
30187: LD_VAR 0 5
30191: ARRAY
30192: PUSH
30193: LD_INT 2
30195: ARRAY
30196: PPUSH
30197: LD_VAR 0 2
30201: PPUSH
30202: LD_VAR 0 3
30206: PPUSH
30207: CALL_OW 298
30211: PUSH
30212: LD_INT 6
30214: LESS
30215: IFFALSE 30314
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30217: LD_EXP 107
30221: PUSH
30222: LD_VAR 0 6
30226: ARRAY
30227: PUSH
30228: LD_VAR 0 5
30232: ARRAY
30233: PUSH
30234: LD_INT 1
30236: ARRAY
30237: PPUSH
30238: LD_EXP 107
30242: PUSH
30243: LD_VAR 0 6
30247: ARRAY
30248: PUSH
30249: LD_VAR 0 5
30253: ARRAY
30254: PUSH
30255: LD_INT 2
30257: ARRAY
30258: PPUSH
30259: LD_VAR 0 1
30263: PPUSH
30264: CALL_OW 255
30268: PPUSH
30269: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30273: LD_ADDR_EXP 107
30277: PUSH
30278: LD_EXP 107
30282: PPUSH
30283: LD_VAR 0 6
30287: PPUSH
30288: LD_EXP 107
30292: PUSH
30293: LD_VAR 0 6
30297: ARRAY
30298: PPUSH
30299: LD_VAR 0 5
30303: PPUSH
30304: CALL_OW 3
30308: PPUSH
30309: CALL_OW 1
30313: ST_TO_ADDR
// end ; end ;
30314: GO 30152
30316: POP
30317: POP
// end ;
30318: LD_VAR 0 4
30322: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
30323: LD_INT 0
30325: PPUSH
30326: PPUSH
30327: PPUSH
30328: PPUSH
30329: PPUSH
30330: PPUSH
30331: PPUSH
30332: PPUSH
30333: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
30334: LD_VAR 0 1
30338: PPUSH
30339: CALL_OW 264
30343: PUSH
30344: LD_EXP 28
30348: EQUAL
30349: NOT
30350: PUSH
30351: LD_VAR 0 1
30355: PUSH
30356: LD_EXP 106
30360: IN
30361: NOT
30362: OR
30363: IFFALSE 30367
// exit ;
30365: GO 30689
// index := GetElementIndex ( minersList , unit ) ;
30367: LD_ADDR_VAR 0 6
30371: PUSH
30372: LD_EXP 106
30376: PPUSH
30377: LD_VAR 0 1
30381: PPUSH
30382: CALL 35885 0 2
30386: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
30387: LD_ADDR_VAR 0 8
30391: PUSH
30392: LD_EXP 108
30396: PUSH
30397: LD_EXP 107
30401: PUSH
30402: LD_VAR 0 6
30406: ARRAY
30407: MINUS
30408: ST_TO_ADDR
// if not minesFreeAmount then
30409: LD_VAR 0 8
30413: NOT
30414: IFFALSE 30418
// exit ;
30416: GO 30689
// tmp := [ ] ;
30418: LD_ADDR_VAR 0 7
30422: PUSH
30423: EMPTY
30424: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
30425: LD_ADDR_VAR 0 5
30429: PUSH
30430: DOUBLE
30431: LD_INT 1
30433: DEC
30434: ST_TO_ADDR
30435: LD_VAR 0 8
30439: PUSH
30440: FOR_TO
30441: IFFALSE 30636
// begin _d := rand ( 0 , 5 ) ;
30443: LD_ADDR_VAR 0 11
30447: PUSH
30448: LD_INT 0
30450: PPUSH
30451: LD_INT 5
30453: PPUSH
30454: CALL_OW 12
30458: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
30459: LD_ADDR_VAR 0 12
30463: PUSH
30464: LD_INT 2
30466: PPUSH
30467: LD_INT 6
30469: PPUSH
30470: CALL_OW 12
30474: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
30475: LD_ADDR_VAR 0 9
30479: PUSH
30480: LD_VAR 0 2
30484: PPUSH
30485: LD_VAR 0 11
30489: PPUSH
30490: LD_VAR 0 12
30494: PPUSH
30495: CALL_OW 272
30499: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
30500: LD_ADDR_VAR 0 10
30504: PUSH
30505: LD_VAR 0 3
30509: PPUSH
30510: LD_VAR 0 11
30514: PPUSH
30515: LD_VAR 0 12
30519: PPUSH
30520: CALL_OW 273
30524: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
30525: LD_VAR 0 9
30529: PPUSH
30530: LD_VAR 0 10
30534: PPUSH
30535: CALL_OW 488
30539: PUSH
30540: LD_VAR 0 9
30544: PUSH
30545: LD_VAR 0 10
30549: PUSH
30550: EMPTY
30551: LIST
30552: LIST
30553: PUSH
30554: LD_VAR 0 7
30558: IN
30559: NOT
30560: AND
30561: PUSH
30562: LD_VAR 0 9
30566: PPUSH
30567: LD_VAR 0 10
30571: PPUSH
30572: CALL_OW 458
30576: NOT
30577: AND
30578: IFFALSE 30620
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
30580: LD_ADDR_VAR 0 7
30584: PUSH
30585: LD_VAR 0 7
30589: PPUSH
30590: LD_VAR 0 7
30594: PUSH
30595: LD_INT 1
30597: PLUS
30598: PPUSH
30599: LD_VAR 0 9
30603: PUSH
30604: LD_VAR 0 10
30608: PUSH
30609: EMPTY
30610: LIST
30611: LIST
30612: PPUSH
30613: CALL_OW 1
30617: ST_TO_ADDR
30618: GO 30634
// i := i - 1 ;
30620: LD_ADDR_VAR 0 5
30624: PUSH
30625: LD_VAR 0 5
30629: PUSH
30630: LD_INT 1
30632: MINUS
30633: ST_TO_ADDR
// end ;
30634: GO 30440
30636: POP
30637: POP
// for i in tmp do
30638: LD_ADDR_VAR 0 5
30642: PUSH
30643: LD_VAR 0 7
30647: PUSH
30648: FOR_IN
30649: IFFALSE 30687
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
30651: LD_VAR 0 1
30655: PPUSH
30656: LD_VAR 0 5
30660: PUSH
30661: LD_INT 1
30663: ARRAY
30664: PPUSH
30665: LD_VAR 0 5
30669: PUSH
30670: LD_INT 2
30672: ARRAY
30673: PPUSH
30674: CALL 29629 0 3
30678: NOT
30679: IFFALSE 30685
// exit ;
30681: POP
30682: POP
30683: GO 30689
30685: GO 30648
30687: POP
30688: POP
// end ;
30689: LD_VAR 0 4
30693: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
30694: LD_INT 0
30696: PPUSH
30697: PPUSH
30698: PPUSH
30699: PPUSH
30700: PPUSH
30701: PPUSH
30702: PPUSH
// if not GetClass ( unit ) = class_sniper then
30703: LD_VAR 0 1
30707: PPUSH
30708: CALL_OW 257
30712: PUSH
30713: LD_INT 5
30715: EQUAL
30716: NOT
30717: IFFALSE 30721
// exit ;
30719: GO 31109
// dist := 8 ;
30721: LD_ADDR_VAR 0 5
30725: PUSH
30726: LD_INT 8
30728: ST_TO_ADDR
// viewRange := 12 ;
30729: LD_ADDR_VAR 0 7
30733: PUSH
30734: LD_INT 12
30736: ST_TO_ADDR
// side := GetSide ( unit ) ;
30737: LD_ADDR_VAR 0 6
30741: PUSH
30742: LD_VAR 0 1
30746: PPUSH
30747: CALL_OW 255
30751: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
30752: LD_INT 61
30754: PPUSH
30755: LD_VAR 0 6
30759: PPUSH
30760: CALL_OW 321
30764: PUSH
30765: LD_INT 2
30767: EQUAL
30768: IFFALSE 30778
// viewRange := 16 ;
30770: LD_ADDR_VAR 0 7
30774: PUSH
30775: LD_INT 16
30777: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
30778: LD_VAR 0 1
30782: PPUSH
30783: LD_VAR 0 2
30787: PPUSH
30788: LD_VAR 0 3
30792: PPUSH
30793: CALL_OW 297
30797: PUSH
30798: LD_VAR 0 5
30802: GREATER
30803: IFFALSE 30882
// begin ComMoveXY ( unit , x , y ) ;
30805: LD_VAR 0 1
30809: PPUSH
30810: LD_VAR 0 2
30814: PPUSH
30815: LD_VAR 0 3
30819: PPUSH
30820: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30824: LD_INT 35
30826: PPUSH
30827: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
30831: LD_VAR 0 1
30835: PPUSH
30836: LD_VAR 0 2
30840: PPUSH
30841: LD_VAR 0 3
30845: PPUSH
30846: CALL 66657 0 3
30850: NOT
30851: IFFALSE 30855
// exit ;
30853: GO 31109
// until GetDistUnitXY ( unit , x , y ) < dist ;
30855: LD_VAR 0 1
30859: PPUSH
30860: LD_VAR 0 2
30864: PPUSH
30865: LD_VAR 0 3
30869: PPUSH
30870: CALL_OW 297
30874: PUSH
30875: LD_VAR 0 5
30879: LESS
30880: IFFALSE 30824
// end ; ComTurnXY ( unit , x , y ) ;
30882: LD_VAR 0 1
30886: PPUSH
30887: LD_VAR 0 2
30891: PPUSH
30892: LD_VAR 0 3
30896: PPUSH
30897: CALL_OW 118
// wait ( 5 ) ;
30901: LD_INT 5
30903: PPUSH
30904: CALL_OW 67
// _d := GetDir ( unit ) ;
30908: LD_ADDR_VAR 0 10
30912: PUSH
30913: LD_VAR 0 1
30917: PPUSH
30918: CALL_OW 254
30922: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
30923: LD_ADDR_VAR 0 8
30927: PUSH
30928: LD_VAR 0 1
30932: PPUSH
30933: CALL_OW 250
30937: PPUSH
30938: LD_VAR 0 10
30942: PPUSH
30943: LD_VAR 0 5
30947: PPUSH
30948: CALL_OW 272
30952: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
30953: LD_ADDR_VAR 0 9
30957: PUSH
30958: LD_VAR 0 1
30962: PPUSH
30963: CALL_OW 251
30967: PPUSH
30968: LD_VAR 0 10
30972: PPUSH
30973: LD_VAR 0 5
30977: PPUSH
30978: CALL_OW 273
30982: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
30983: LD_VAR 0 8
30987: PPUSH
30988: LD_VAR 0 9
30992: PPUSH
30993: CALL_OW 488
30997: NOT
30998: IFFALSE 31002
// exit ;
31000: GO 31109
// ComAnimCustom ( unit , 1 ) ;
31002: LD_VAR 0 1
31006: PPUSH
31007: LD_INT 1
31009: PPUSH
31010: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
31014: LD_VAR 0 8
31018: PPUSH
31019: LD_VAR 0 9
31023: PPUSH
31024: LD_VAR 0 6
31028: PPUSH
31029: LD_VAR 0 7
31033: PPUSH
31034: CALL_OW 330
// repeat wait ( 1 ) ;
31038: LD_INT 1
31040: PPUSH
31041: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
31045: LD_VAR 0 1
31049: PPUSH
31050: CALL_OW 316
31054: PUSH
31055: LD_VAR 0 1
31059: PPUSH
31060: CALL_OW 314
31064: OR
31065: PUSH
31066: LD_VAR 0 1
31070: PPUSH
31071: CALL_OW 302
31075: NOT
31076: OR
31077: PUSH
31078: LD_VAR 0 1
31082: PPUSH
31083: CALL_OW 301
31087: OR
31088: IFFALSE 31038
// RemoveSeeing ( _x , _y , side ) ;
31090: LD_VAR 0 8
31094: PPUSH
31095: LD_VAR 0 9
31099: PPUSH
31100: LD_VAR 0 6
31104: PPUSH
31105: CALL_OW 331
// end ; end_of_file
31109: LD_VAR 0 4
31113: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31114: LD_INT 0
31116: PPUSH
31117: PPUSH
// if exist_mode then
31118: LD_VAR 0 2
31122: IFFALSE 31147
// unit := CreateCharacter ( prefix & ident ) else
31124: LD_ADDR_VAR 0 5
31128: PUSH
31129: LD_VAR 0 3
31133: PUSH
31134: LD_VAR 0 1
31138: STR
31139: PPUSH
31140: CALL_OW 34
31144: ST_TO_ADDR
31145: GO 31162
// unit := NewCharacter ( ident ) ;
31147: LD_ADDR_VAR 0 5
31151: PUSH
31152: LD_VAR 0 1
31156: PPUSH
31157: CALL_OW 25
31161: ST_TO_ADDR
// result := unit ;
31162: LD_ADDR_VAR 0 4
31166: PUSH
31167: LD_VAR 0 5
31171: ST_TO_ADDR
// end ;
31172: LD_VAR 0 4
31176: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31177: LD_INT 0
31179: PPUSH
31180: PPUSH
// if not side or not nation then
31181: LD_VAR 0 1
31185: NOT
31186: PUSH
31187: LD_VAR 0 2
31191: NOT
31192: OR
31193: IFFALSE 31197
// exit ;
31195: GO 31965
// case nation of nation_american :
31197: LD_VAR 0 2
31201: PUSH
31202: LD_INT 1
31204: DOUBLE
31205: EQUAL
31206: IFTRUE 31210
31208: GO 31424
31210: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31211: LD_ADDR_VAR 0 4
31215: PUSH
31216: LD_INT 35
31218: PUSH
31219: LD_INT 45
31221: PUSH
31222: LD_INT 46
31224: PUSH
31225: LD_INT 47
31227: PUSH
31228: LD_INT 82
31230: PUSH
31231: LD_INT 83
31233: PUSH
31234: LD_INT 84
31236: PUSH
31237: LD_INT 85
31239: PUSH
31240: LD_INT 86
31242: PUSH
31243: LD_INT 1
31245: PUSH
31246: LD_INT 2
31248: PUSH
31249: LD_INT 6
31251: PUSH
31252: LD_INT 15
31254: PUSH
31255: LD_INT 16
31257: PUSH
31258: LD_INT 7
31260: PUSH
31261: LD_INT 12
31263: PUSH
31264: LD_INT 13
31266: PUSH
31267: LD_INT 10
31269: PUSH
31270: LD_INT 14
31272: PUSH
31273: LD_INT 20
31275: PUSH
31276: LD_INT 21
31278: PUSH
31279: LD_INT 22
31281: PUSH
31282: LD_INT 25
31284: PUSH
31285: LD_INT 32
31287: PUSH
31288: LD_INT 27
31290: PUSH
31291: LD_INT 36
31293: PUSH
31294: LD_INT 69
31296: PUSH
31297: LD_INT 39
31299: PUSH
31300: LD_INT 34
31302: PUSH
31303: LD_INT 40
31305: PUSH
31306: LD_INT 48
31308: PUSH
31309: LD_INT 49
31311: PUSH
31312: LD_INT 50
31314: PUSH
31315: LD_INT 51
31317: PUSH
31318: LD_INT 52
31320: PUSH
31321: LD_INT 53
31323: PUSH
31324: LD_INT 54
31326: PUSH
31327: LD_INT 55
31329: PUSH
31330: LD_INT 56
31332: PUSH
31333: LD_INT 57
31335: PUSH
31336: LD_INT 58
31338: PUSH
31339: LD_INT 59
31341: PUSH
31342: LD_INT 60
31344: PUSH
31345: LD_INT 61
31347: PUSH
31348: LD_INT 62
31350: PUSH
31351: LD_INT 80
31353: PUSH
31354: LD_INT 82
31356: PUSH
31357: LD_INT 83
31359: PUSH
31360: LD_INT 84
31362: PUSH
31363: LD_INT 85
31365: PUSH
31366: LD_INT 86
31368: PUSH
31369: EMPTY
31370: LIST
31371: LIST
31372: LIST
31373: LIST
31374: LIST
31375: LIST
31376: LIST
31377: LIST
31378: LIST
31379: LIST
31380: LIST
31381: LIST
31382: LIST
31383: LIST
31384: LIST
31385: LIST
31386: LIST
31387: LIST
31388: LIST
31389: LIST
31390: LIST
31391: LIST
31392: LIST
31393: LIST
31394: LIST
31395: LIST
31396: LIST
31397: LIST
31398: LIST
31399: LIST
31400: LIST
31401: LIST
31402: LIST
31403: LIST
31404: LIST
31405: LIST
31406: LIST
31407: LIST
31408: LIST
31409: LIST
31410: LIST
31411: LIST
31412: LIST
31413: LIST
31414: LIST
31415: LIST
31416: LIST
31417: LIST
31418: LIST
31419: LIST
31420: LIST
31421: ST_TO_ADDR
31422: GO 31889
31424: LD_INT 2
31426: DOUBLE
31427: EQUAL
31428: IFTRUE 31432
31430: GO 31658
31432: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
31433: LD_ADDR_VAR 0 4
31437: PUSH
31438: LD_INT 35
31440: PUSH
31441: LD_INT 45
31443: PUSH
31444: LD_INT 46
31446: PUSH
31447: LD_INT 47
31449: PUSH
31450: LD_INT 82
31452: PUSH
31453: LD_INT 83
31455: PUSH
31456: LD_INT 84
31458: PUSH
31459: LD_INT 85
31461: PUSH
31462: LD_INT 87
31464: PUSH
31465: LD_INT 70
31467: PUSH
31468: LD_INT 1
31470: PUSH
31471: LD_INT 11
31473: PUSH
31474: LD_INT 3
31476: PUSH
31477: LD_INT 4
31479: PUSH
31480: LD_INT 5
31482: PUSH
31483: LD_INT 6
31485: PUSH
31486: LD_INT 15
31488: PUSH
31489: LD_INT 18
31491: PUSH
31492: LD_INT 7
31494: PUSH
31495: LD_INT 17
31497: PUSH
31498: LD_INT 8
31500: PUSH
31501: LD_INT 20
31503: PUSH
31504: LD_INT 21
31506: PUSH
31507: LD_INT 22
31509: PUSH
31510: LD_INT 72
31512: PUSH
31513: LD_INT 26
31515: PUSH
31516: LD_INT 69
31518: PUSH
31519: LD_INT 39
31521: PUSH
31522: LD_INT 40
31524: PUSH
31525: LD_INT 41
31527: PUSH
31528: LD_INT 42
31530: PUSH
31531: LD_INT 43
31533: PUSH
31534: LD_INT 48
31536: PUSH
31537: LD_INT 49
31539: PUSH
31540: LD_INT 50
31542: PUSH
31543: LD_INT 51
31545: PUSH
31546: LD_INT 52
31548: PUSH
31549: LD_INT 53
31551: PUSH
31552: LD_INT 54
31554: PUSH
31555: LD_INT 55
31557: PUSH
31558: LD_INT 56
31560: PUSH
31561: LD_INT 60
31563: PUSH
31564: LD_INT 61
31566: PUSH
31567: LD_INT 62
31569: PUSH
31570: LD_INT 66
31572: PUSH
31573: LD_INT 67
31575: PUSH
31576: LD_INT 68
31578: PUSH
31579: LD_INT 81
31581: PUSH
31582: LD_INT 82
31584: PUSH
31585: LD_INT 83
31587: PUSH
31588: LD_INT 84
31590: PUSH
31591: LD_INT 85
31593: PUSH
31594: LD_INT 87
31596: PUSH
31597: LD_INT 88
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: LIST
31616: LIST
31617: LIST
31618: LIST
31619: LIST
31620: LIST
31621: LIST
31622: LIST
31623: LIST
31624: LIST
31625: LIST
31626: LIST
31627: LIST
31628: LIST
31629: LIST
31630: LIST
31631: LIST
31632: LIST
31633: LIST
31634: LIST
31635: LIST
31636: LIST
31637: LIST
31638: LIST
31639: LIST
31640: LIST
31641: LIST
31642: LIST
31643: LIST
31644: LIST
31645: LIST
31646: LIST
31647: LIST
31648: LIST
31649: LIST
31650: LIST
31651: LIST
31652: LIST
31653: LIST
31654: LIST
31655: ST_TO_ADDR
31656: GO 31889
31658: LD_INT 3
31660: DOUBLE
31661: EQUAL
31662: IFTRUE 31666
31664: GO 31888
31666: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31667: LD_ADDR_VAR 0 4
31671: PUSH
31672: LD_INT 46
31674: PUSH
31675: LD_INT 47
31677: PUSH
31678: LD_INT 1
31680: PUSH
31681: LD_INT 2
31683: PUSH
31684: LD_INT 82
31686: PUSH
31687: LD_INT 83
31689: PUSH
31690: LD_INT 84
31692: PUSH
31693: LD_INT 85
31695: PUSH
31696: LD_INT 86
31698: PUSH
31699: LD_INT 11
31701: PUSH
31702: LD_INT 9
31704: PUSH
31705: LD_INT 20
31707: PUSH
31708: LD_INT 19
31710: PUSH
31711: LD_INT 21
31713: PUSH
31714: LD_INT 24
31716: PUSH
31717: LD_INT 22
31719: PUSH
31720: LD_INT 25
31722: PUSH
31723: LD_INT 28
31725: PUSH
31726: LD_INT 29
31728: PUSH
31729: LD_INT 30
31731: PUSH
31732: LD_INT 31
31734: PUSH
31735: LD_INT 37
31737: PUSH
31738: LD_INT 38
31740: PUSH
31741: LD_INT 32
31743: PUSH
31744: LD_INT 27
31746: PUSH
31747: LD_INT 33
31749: PUSH
31750: LD_INT 69
31752: PUSH
31753: LD_INT 39
31755: PUSH
31756: LD_INT 34
31758: PUSH
31759: LD_INT 40
31761: PUSH
31762: LD_INT 71
31764: PUSH
31765: LD_INT 23
31767: PUSH
31768: LD_INT 44
31770: PUSH
31771: LD_INT 48
31773: PUSH
31774: LD_INT 49
31776: PUSH
31777: LD_INT 50
31779: PUSH
31780: LD_INT 51
31782: PUSH
31783: LD_INT 52
31785: PUSH
31786: LD_INT 53
31788: PUSH
31789: LD_INT 54
31791: PUSH
31792: LD_INT 55
31794: PUSH
31795: LD_INT 56
31797: PUSH
31798: LD_INT 57
31800: PUSH
31801: LD_INT 58
31803: PUSH
31804: LD_INT 59
31806: PUSH
31807: LD_INT 63
31809: PUSH
31810: LD_INT 64
31812: PUSH
31813: LD_INT 65
31815: PUSH
31816: LD_INT 82
31818: PUSH
31819: LD_INT 83
31821: PUSH
31822: LD_INT 84
31824: PUSH
31825: LD_INT 85
31827: PUSH
31828: LD_INT 86
31830: PUSH
31831: EMPTY
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: LIST
31838: LIST
31839: LIST
31840: LIST
31841: LIST
31842: LIST
31843: LIST
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: LIST
31851: LIST
31852: LIST
31853: LIST
31854: LIST
31855: LIST
31856: LIST
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: LIST
31862: LIST
31863: LIST
31864: LIST
31865: LIST
31866: LIST
31867: LIST
31868: LIST
31869: LIST
31870: LIST
31871: LIST
31872: LIST
31873: LIST
31874: LIST
31875: LIST
31876: LIST
31877: LIST
31878: LIST
31879: LIST
31880: LIST
31881: LIST
31882: LIST
31883: LIST
31884: LIST
31885: ST_TO_ADDR
31886: GO 31889
31888: POP
// if state > - 1 and state < 3 then
31889: LD_VAR 0 3
31893: PUSH
31894: LD_INT 1
31896: NEG
31897: GREATER
31898: PUSH
31899: LD_VAR 0 3
31903: PUSH
31904: LD_INT 3
31906: LESS
31907: AND
31908: IFFALSE 31965
// for i in result do
31910: LD_ADDR_VAR 0 5
31914: PUSH
31915: LD_VAR 0 4
31919: PUSH
31920: FOR_IN
31921: IFFALSE 31963
// if GetTech ( i , side ) <> state then
31923: LD_VAR 0 5
31927: PPUSH
31928: LD_VAR 0 1
31932: PPUSH
31933: CALL_OW 321
31937: PUSH
31938: LD_VAR 0 3
31942: NONEQUAL
31943: IFFALSE 31961
// result := result diff i ;
31945: LD_ADDR_VAR 0 4
31949: PUSH
31950: LD_VAR 0 4
31954: PUSH
31955: LD_VAR 0 5
31959: DIFF
31960: ST_TO_ADDR
31961: GO 31920
31963: POP
31964: POP
// end ;
31965: LD_VAR 0 4
31969: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
31970: LD_INT 0
31972: PPUSH
31973: PPUSH
31974: PPUSH
// result := true ;
31975: LD_ADDR_VAR 0 3
31979: PUSH
31980: LD_INT 1
31982: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
31983: LD_ADDR_VAR 0 5
31987: PUSH
31988: LD_VAR 0 2
31992: PPUSH
31993: CALL_OW 480
31997: ST_TO_ADDR
// if not tmp then
31998: LD_VAR 0 5
32002: NOT
32003: IFFALSE 32007
// exit ;
32005: GO 32056
// for i in tmp do
32007: LD_ADDR_VAR 0 4
32011: PUSH
32012: LD_VAR 0 5
32016: PUSH
32017: FOR_IN
32018: IFFALSE 32054
// if GetTech ( i , side ) <> state_researched then
32020: LD_VAR 0 4
32024: PPUSH
32025: LD_VAR 0 1
32029: PPUSH
32030: CALL_OW 321
32034: PUSH
32035: LD_INT 2
32037: NONEQUAL
32038: IFFALSE 32052
// begin result := false ;
32040: LD_ADDR_VAR 0 3
32044: PUSH
32045: LD_INT 0
32047: ST_TO_ADDR
// exit ;
32048: POP
32049: POP
32050: GO 32056
// end ;
32052: GO 32017
32054: POP
32055: POP
// end ;
32056: LD_VAR 0 3
32060: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32061: LD_INT 0
32063: PPUSH
32064: PPUSH
32065: PPUSH
32066: PPUSH
32067: PPUSH
32068: PPUSH
32069: PPUSH
32070: PPUSH
32071: PPUSH
32072: PPUSH
32073: PPUSH
32074: PPUSH
32075: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32076: LD_VAR 0 1
32080: NOT
32081: PUSH
32082: LD_VAR 0 1
32086: PPUSH
32087: CALL_OW 257
32091: PUSH
32092: LD_INT 9
32094: NONEQUAL
32095: OR
32096: IFFALSE 32100
// exit ;
32098: GO 32673
// side := GetSide ( unit ) ;
32100: LD_ADDR_VAR 0 9
32104: PUSH
32105: LD_VAR 0 1
32109: PPUSH
32110: CALL_OW 255
32114: ST_TO_ADDR
// tech_space := tech_spacanom ;
32115: LD_ADDR_VAR 0 12
32119: PUSH
32120: LD_INT 29
32122: ST_TO_ADDR
// tech_time := tech_taurad ;
32123: LD_ADDR_VAR 0 13
32127: PUSH
32128: LD_INT 28
32130: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32131: LD_ADDR_VAR 0 11
32135: PUSH
32136: LD_VAR 0 1
32140: PPUSH
32141: CALL_OW 310
32145: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32146: LD_VAR 0 11
32150: PPUSH
32151: CALL_OW 247
32155: PUSH
32156: LD_INT 2
32158: EQUAL
32159: IFFALSE 32163
// exit ;
32161: GO 32673
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32163: LD_ADDR_VAR 0 8
32167: PUSH
32168: LD_INT 81
32170: PUSH
32171: LD_VAR 0 9
32175: PUSH
32176: EMPTY
32177: LIST
32178: LIST
32179: PUSH
32180: LD_INT 3
32182: PUSH
32183: LD_INT 21
32185: PUSH
32186: LD_INT 3
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: PUSH
32193: EMPTY
32194: LIST
32195: LIST
32196: PUSH
32197: EMPTY
32198: LIST
32199: LIST
32200: PPUSH
32201: CALL_OW 69
32205: ST_TO_ADDR
// if not tmp then
32206: LD_VAR 0 8
32210: NOT
32211: IFFALSE 32215
// exit ;
32213: GO 32673
// if in_unit then
32215: LD_VAR 0 11
32219: IFFALSE 32243
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32221: LD_ADDR_VAR 0 10
32225: PUSH
32226: LD_VAR 0 8
32230: PPUSH
32231: LD_VAR 0 11
32235: PPUSH
32236: CALL_OW 74
32240: ST_TO_ADDR
32241: GO 32263
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32243: LD_ADDR_VAR 0 10
32247: PUSH
32248: LD_VAR 0 8
32252: PPUSH
32253: LD_VAR 0 1
32257: PPUSH
32258: CALL_OW 74
32262: ST_TO_ADDR
// if not enemy then
32263: LD_VAR 0 10
32267: NOT
32268: IFFALSE 32272
// exit ;
32270: GO 32673
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32272: LD_VAR 0 11
32276: PUSH
32277: LD_VAR 0 11
32281: PPUSH
32282: LD_VAR 0 10
32286: PPUSH
32287: CALL_OW 296
32291: PUSH
32292: LD_INT 13
32294: GREATER
32295: AND
32296: PUSH
32297: LD_VAR 0 1
32301: PPUSH
32302: LD_VAR 0 10
32306: PPUSH
32307: CALL_OW 296
32311: PUSH
32312: LD_INT 12
32314: GREATER
32315: OR
32316: IFFALSE 32320
// exit ;
32318: GO 32673
// missile := [ 1 ] ;
32320: LD_ADDR_VAR 0 14
32324: PUSH
32325: LD_INT 1
32327: PUSH
32328: EMPTY
32329: LIST
32330: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32331: LD_VAR 0 9
32335: PPUSH
32336: LD_VAR 0 12
32340: PPUSH
32341: CALL_OW 325
32345: IFFALSE 32374
// missile := Insert ( missile , missile + 1 , 2 ) ;
32347: LD_ADDR_VAR 0 14
32351: PUSH
32352: LD_VAR 0 14
32356: PPUSH
32357: LD_VAR 0 14
32361: PUSH
32362: LD_INT 1
32364: PLUS
32365: PPUSH
32366: LD_INT 2
32368: PPUSH
32369: CALL_OW 2
32373: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32374: LD_VAR 0 9
32378: PPUSH
32379: LD_VAR 0 13
32383: PPUSH
32384: CALL_OW 325
32388: PUSH
32389: LD_VAR 0 10
32393: PPUSH
32394: CALL_OW 255
32398: PPUSH
32399: LD_VAR 0 13
32403: PPUSH
32404: CALL_OW 325
32408: NOT
32409: AND
32410: IFFALSE 32439
// missile := Insert ( missile , missile + 1 , 3 ) ;
32412: LD_ADDR_VAR 0 14
32416: PUSH
32417: LD_VAR 0 14
32421: PPUSH
32422: LD_VAR 0 14
32426: PUSH
32427: LD_INT 1
32429: PLUS
32430: PPUSH
32431: LD_INT 3
32433: PPUSH
32434: CALL_OW 2
32438: ST_TO_ADDR
// if missile < 2 then
32439: LD_VAR 0 14
32443: PUSH
32444: LD_INT 2
32446: LESS
32447: IFFALSE 32451
// exit ;
32449: GO 32673
// x := GetX ( enemy ) ;
32451: LD_ADDR_VAR 0 4
32455: PUSH
32456: LD_VAR 0 10
32460: PPUSH
32461: CALL_OW 250
32465: ST_TO_ADDR
// y := GetY ( enemy ) ;
32466: LD_ADDR_VAR 0 5
32470: PUSH
32471: LD_VAR 0 10
32475: PPUSH
32476: CALL_OW 251
32480: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32481: LD_ADDR_VAR 0 6
32485: PUSH
32486: LD_VAR 0 4
32490: PUSH
32491: LD_INT 1
32493: NEG
32494: PPUSH
32495: LD_INT 1
32497: PPUSH
32498: CALL_OW 12
32502: PLUS
32503: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32504: LD_ADDR_VAR 0 7
32508: PUSH
32509: LD_VAR 0 5
32513: PUSH
32514: LD_INT 1
32516: NEG
32517: PPUSH
32518: LD_INT 1
32520: PPUSH
32521: CALL_OW 12
32525: PLUS
32526: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32527: LD_VAR 0 6
32531: PPUSH
32532: LD_VAR 0 7
32536: PPUSH
32537: CALL_OW 488
32541: NOT
32542: IFFALSE 32564
// begin _x := x ;
32544: LD_ADDR_VAR 0 6
32548: PUSH
32549: LD_VAR 0 4
32553: ST_TO_ADDR
// _y := y ;
32554: LD_ADDR_VAR 0 7
32558: PUSH
32559: LD_VAR 0 5
32563: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32564: LD_ADDR_VAR 0 3
32568: PUSH
32569: LD_INT 1
32571: PPUSH
32572: LD_VAR 0 14
32576: PPUSH
32577: CALL_OW 12
32581: ST_TO_ADDR
// case i of 1 :
32582: LD_VAR 0 3
32586: PUSH
32587: LD_INT 1
32589: DOUBLE
32590: EQUAL
32591: IFTRUE 32595
32593: GO 32612
32595: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32596: LD_VAR 0 1
32600: PPUSH
32601: LD_VAR 0 10
32605: PPUSH
32606: CALL_OW 115
32610: GO 32673
32612: LD_INT 2
32614: DOUBLE
32615: EQUAL
32616: IFTRUE 32620
32618: GO 32642
32620: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32621: LD_VAR 0 1
32625: PPUSH
32626: LD_VAR 0 6
32630: PPUSH
32631: LD_VAR 0 7
32635: PPUSH
32636: CALL_OW 153
32640: GO 32673
32642: LD_INT 3
32644: DOUBLE
32645: EQUAL
32646: IFTRUE 32650
32648: GO 32672
32650: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32651: LD_VAR 0 1
32655: PPUSH
32656: LD_VAR 0 6
32660: PPUSH
32661: LD_VAR 0 7
32665: PPUSH
32666: CALL_OW 154
32670: GO 32673
32672: POP
// end ;
32673: LD_VAR 0 2
32677: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32678: LD_INT 0
32680: PPUSH
32681: PPUSH
32682: PPUSH
32683: PPUSH
32684: PPUSH
32685: PPUSH
// if not unit or not building then
32686: LD_VAR 0 1
32690: NOT
32691: PUSH
32692: LD_VAR 0 2
32696: NOT
32697: OR
32698: IFFALSE 32702
// exit ;
32700: GO 32860
// x := GetX ( building ) ;
32702: LD_ADDR_VAR 0 5
32706: PUSH
32707: LD_VAR 0 2
32711: PPUSH
32712: CALL_OW 250
32716: ST_TO_ADDR
// y := GetY ( building ) ;
32717: LD_ADDR_VAR 0 6
32721: PUSH
32722: LD_VAR 0 2
32726: PPUSH
32727: CALL_OW 251
32731: ST_TO_ADDR
// for i = 0 to 5 do
32732: LD_ADDR_VAR 0 4
32736: PUSH
32737: DOUBLE
32738: LD_INT 0
32740: DEC
32741: ST_TO_ADDR
32742: LD_INT 5
32744: PUSH
32745: FOR_TO
32746: IFFALSE 32858
// begin _x := ShiftX ( x , i , 3 ) ;
32748: LD_ADDR_VAR 0 7
32752: PUSH
32753: LD_VAR 0 5
32757: PPUSH
32758: LD_VAR 0 4
32762: PPUSH
32763: LD_INT 3
32765: PPUSH
32766: CALL_OW 272
32770: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32771: LD_ADDR_VAR 0 8
32775: PUSH
32776: LD_VAR 0 6
32780: PPUSH
32781: LD_VAR 0 4
32785: PPUSH
32786: LD_INT 3
32788: PPUSH
32789: CALL_OW 273
32793: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32794: LD_VAR 0 7
32798: PPUSH
32799: LD_VAR 0 8
32803: PPUSH
32804: CALL_OW 488
32808: NOT
32809: IFFALSE 32813
// continue ;
32811: GO 32745
// if HexInfo ( _x , _y ) = 0 then
32813: LD_VAR 0 7
32817: PPUSH
32818: LD_VAR 0 8
32822: PPUSH
32823: CALL_OW 428
32827: PUSH
32828: LD_INT 0
32830: EQUAL
32831: IFFALSE 32856
// begin ComMoveXY ( unit , _x , _y ) ;
32833: LD_VAR 0 1
32837: PPUSH
32838: LD_VAR 0 7
32842: PPUSH
32843: LD_VAR 0 8
32847: PPUSH
32848: CALL_OW 111
// exit ;
32852: POP
32853: POP
32854: GO 32860
// end ; end ;
32856: GO 32745
32858: POP
32859: POP
// end ;
32860: LD_VAR 0 3
32864: RET
// export function ScanBase ( side , base_area ) ; begin
32865: LD_INT 0
32867: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32868: LD_ADDR_VAR 0 3
32872: PUSH
32873: LD_VAR 0 2
32877: PPUSH
32878: LD_INT 81
32880: PUSH
32881: LD_VAR 0 1
32885: PUSH
32886: EMPTY
32887: LIST
32888: LIST
32889: PPUSH
32890: CALL_OW 70
32894: ST_TO_ADDR
// end ;
32895: LD_VAR 0 3
32899: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32900: LD_INT 0
32902: PPUSH
32903: PPUSH
32904: PPUSH
32905: PPUSH
// result := false ;
32906: LD_ADDR_VAR 0 2
32910: PUSH
32911: LD_INT 0
32913: ST_TO_ADDR
// side := GetSide ( unit ) ;
32914: LD_ADDR_VAR 0 3
32918: PUSH
32919: LD_VAR 0 1
32923: PPUSH
32924: CALL_OW 255
32928: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32929: LD_ADDR_VAR 0 4
32933: PUSH
32934: LD_VAR 0 1
32938: PPUSH
32939: CALL_OW 248
32943: ST_TO_ADDR
// case nat of 1 :
32944: LD_VAR 0 4
32948: PUSH
32949: LD_INT 1
32951: DOUBLE
32952: EQUAL
32953: IFTRUE 32957
32955: GO 32968
32957: POP
// tech := tech_lassight ; 2 :
32958: LD_ADDR_VAR 0 5
32962: PUSH
32963: LD_INT 12
32965: ST_TO_ADDR
32966: GO 33007
32968: LD_INT 2
32970: DOUBLE
32971: EQUAL
32972: IFTRUE 32976
32974: GO 32987
32976: POP
// tech := tech_mortar ; 3 :
32977: LD_ADDR_VAR 0 5
32981: PUSH
32982: LD_INT 41
32984: ST_TO_ADDR
32985: GO 33007
32987: LD_INT 3
32989: DOUBLE
32990: EQUAL
32991: IFTRUE 32995
32993: GO 33006
32995: POP
// tech := tech_bazooka ; end ;
32996: LD_ADDR_VAR 0 5
33000: PUSH
33001: LD_INT 44
33003: ST_TO_ADDR
33004: GO 33007
33006: POP
// if Researched ( side , tech ) then
33007: LD_VAR 0 3
33011: PPUSH
33012: LD_VAR 0 5
33016: PPUSH
33017: CALL_OW 325
33021: IFFALSE 33048
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33023: LD_ADDR_VAR 0 2
33027: PUSH
33028: LD_INT 5
33030: PUSH
33031: LD_INT 8
33033: PUSH
33034: LD_INT 9
33036: PUSH
33037: EMPTY
33038: LIST
33039: LIST
33040: LIST
33041: PUSH
33042: LD_VAR 0 4
33046: ARRAY
33047: ST_TO_ADDR
// end ;
33048: LD_VAR 0 2
33052: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33053: LD_INT 0
33055: PPUSH
33056: PPUSH
33057: PPUSH
// if not mines then
33058: LD_VAR 0 2
33062: NOT
33063: IFFALSE 33067
// exit ;
33065: GO 33211
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33067: LD_ADDR_VAR 0 5
33071: PUSH
33072: LD_INT 81
33074: PUSH
33075: LD_VAR 0 1
33079: PUSH
33080: EMPTY
33081: LIST
33082: LIST
33083: PUSH
33084: LD_INT 3
33086: PUSH
33087: LD_INT 21
33089: PUSH
33090: LD_INT 3
33092: PUSH
33093: EMPTY
33094: LIST
33095: LIST
33096: PUSH
33097: EMPTY
33098: LIST
33099: LIST
33100: PUSH
33101: EMPTY
33102: LIST
33103: LIST
33104: PPUSH
33105: CALL_OW 69
33109: ST_TO_ADDR
// for i in mines do
33110: LD_ADDR_VAR 0 4
33114: PUSH
33115: LD_VAR 0 2
33119: PUSH
33120: FOR_IN
33121: IFFALSE 33209
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33123: LD_VAR 0 4
33127: PUSH
33128: LD_INT 1
33130: ARRAY
33131: PPUSH
33132: LD_VAR 0 4
33136: PUSH
33137: LD_INT 2
33139: ARRAY
33140: PPUSH
33141: CALL_OW 458
33145: NOT
33146: IFFALSE 33150
// continue ;
33148: GO 33120
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33150: LD_VAR 0 4
33154: PUSH
33155: LD_INT 1
33157: ARRAY
33158: PPUSH
33159: LD_VAR 0 4
33163: PUSH
33164: LD_INT 2
33166: ARRAY
33167: PPUSH
33168: CALL_OW 428
33172: PUSH
33173: LD_VAR 0 5
33177: IN
33178: IFFALSE 33207
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33180: LD_VAR 0 4
33184: PUSH
33185: LD_INT 1
33187: ARRAY
33188: PPUSH
33189: LD_VAR 0 4
33193: PUSH
33194: LD_INT 2
33196: ARRAY
33197: PPUSH
33198: LD_VAR 0 1
33202: PPUSH
33203: CALL_OW 456
// end ;
33207: GO 33120
33209: POP
33210: POP
// end ;
33211: LD_VAR 0 3
33215: RET
// export function Count ( array ) ; var i ; begin
33216: LD_INT 0
33218: PPUSH
33219: PPUSH
// result := 0 ;
33220: LD_ADDR_VAR 0 2
33224: PUSH
33225: LD_INT 0
33227: ST_TO_ADDR
// for i in array do
33228: LD_ADDR_VAR 0 3
33232: PUSH
33233: LD_VAR 0 1
33237: PUSH
33238: FOR_IN
33239: IFFALSE 33263
// if i then
33241: LD_VAR 0 3
33245: IFFALSE 33261
// result := result + 1 ;
33247: LD_ADDR_VAR 0 2
33251: PUSH
33252: LD_VAR 0 2
33256: PUSH
33257: LD_INT 1
33259: PLUS
33260: ST_TO_ADDR
33261: GO 33238
33263: POP
33264: POP
// end ;
33265: LD_VAR 0 2
33269: RET
// export function IsEmpty ( building ) ; begin
33270: LD_INT 0
33272: PPUSH
// if not building then
33273: LD_VAR 0 1
33277: NOT
33278: IFFALSE 33282
// exit ;
33280: GO 33325
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33282: LD_ADDR_VAR 0 2
33286: PUSH
33287: LD_VAR 0 1
33291: PUSH
33292: LD_INT 22
33294: PUSH
33295: LD_VAR 0 1
33299: PPUSH
33300: CALL_OW 255
33304: PUSH
33305: EMPTY
33306: LIST
33307: LIST
33308: PUSH
33309: LD_INT 58
33311: PUSH
33312: EMPTY
33313: LIST
33314: PUSH
33315: EMPTY
33316: LIST
33317: LIST
33318: PPUSH
33319: CALL_OW 69
33323: IN
33324: ST_TO_ADDR
// end ;
33325: LD_VAR 0 2
33329: RET
// export function IsNotFull ( building ) ; begin
33330: LD_INT 0
33332: PPUSH
// if not building then
33333: LD_VAR 0 1
33337: NOT
33338: IFFALSE 33342
// exit ;
33340: GO 33361
// result := UnitsInside ( building ) < 6 ;
33342: LD_ADDR_VAR 0 2
33346: PUSH
33347: LD_VAR 0 1
33351: PPUSH
33352: CALL_OW 313
33356: PUSH
33357: LD_INT 6
33359: LESS
33360: ST_TO_ADDR
// end ;
33361: LD_VAR 0 2
33365: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33366: LD_INT 0
33368: PPUSH
33369: PPUSH
33370: PPUSH
33371: PPUSH
// tmp := [ ] ;
33372: LD_ADDR_VAR 0 3
33376: PUSH
33377: EMPTY
33378: ST_TO_ADDR
// list := [ ] ;
33379: LD_ADDR_VAR 0 5
33383: PUSH
33384: EMPTY
33385: ST_TO_ADDR
// for i = 16 to 25 do
33386: LD_ADDR_VAR 0 4
33390: PUSH
33391: DOUBLE
33392: LD_INT 16
33394: DEC
33395: ST_TO_ADDR
33396: LD_INT 25
33398: PUSH
33399: FOR_TO
33400: IFFALSE 33473
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33402: LD_ADDR_VAR 0 3
33406: PUSH
33407: LD_VAR 0 3
33411: PUSH
33412: LD_INT 22
33414: PUSH
33415: LD_VAR 0 1
33419: PPUSH
33420: CALL_OW 255
33424: PUSH
33425: EMPTY
33426: LIST
33427: LIST
33428: PUSH
33429: LD_INT 91
33431: PUSH
33432: LD_VAR 0 1
33436: PUSH
33437: LD_INT 6
33439: PUSH
33440: EMPTY
33441: LIST
33442: LIST
33443: LIST
33444: PUSH
33445: LD_INT 30
33447: PUSH
33448: LD_VAR 0 4
33452: PUSH
33453: EMPTY
33454: LIST
33455: LIST
33456: PUSH
33457: EMPTY
33458: LIST
33459: LIST
33460: LIST
33461: PUSH
33462: EMPTY
33463: LIST
33464: PPUSH
33465: CALL_OW 69
33469: ADD
33470: ST_TO_ADDR
33471: GO 33399
33473: POP
33474: POP
// for i = 1 to tmp do
33475: LD_ADDR_VAR 0 4
33479: PUSH
33480: DOUBLE
33481: LD_INT 1
33483: DEC
33484: ST_TO_ADDR
33485: LD_VAR 0 3
33489: PUSH
33490: FOR_TO
33491: IFFALSE 33579
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33493: LD_ADDR_VAR 0 5
33497: PUSH
33498: LD_VAR 0 5
33502: PUSH
33503: LD_VAR 0 3
33507: PUSH
33508: LD_VAR 0 4
33512: ARRAY
33513: PPUSH
33514: CALL_OW 266
33518: PUSH
33519: LD_VAR 0 3
33523: PUSH
33524: LD_VAR 0 4
33528: ARRAY
33529: PPUSH
33530: CALL_OW 250
33534: PUSH
33535: LD_VAR 0 3
33539: PUSH
33540: LD_VAR 0 4
33544: ARRAY
33545: PPUSH
33546: CALL_OW 251
33550: PUSH
33551: LD_VAR 0 3
33555: PUSH
33556: LD_VAR 0 4
33560: ARRAY
33561: PPUSH
33562: CALL_OW 254
33566: PUSH
33567: EMPTY
33568: LIST
33569: LIST
33570: LIST
33571: LIST
33572: PUSH
33573: EMPTY
33574: LIST
33575: ADD
33576: ST_TO_ADDR
33577: GO 33490
33579: POP
33580: POP
// result := list ;
33581: LD_ADDR_VAR 0 2
33585: PUSH
33586: LD_VAR 0 5
33590: ST_TO_ADDR
// end ;
33591: LD_VAR 0 2
33595: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33596: LD_INT 0
33598: PPUSH
33599: PPUSH
33600: PPUSH
33601: PPUSH
33602: PPUSH
33603: PPUSH
33604: PPUSH
// if not factory then
33605: LD_VAR 0 1
33609: NOT
33610: IFFALSE 33614
// exit ;
33612: GO 34207
// if control = control_apeman then
33614: LD_VAR 0 4
33618: PUSH
33619: LD_INT 5
33621: EQUAL
33622: IFFALSE 33731
// begin tmp := UnitsInside ( factory ) ;
33624: LD_ADDR_VAR 0 8
33628: PUSH
33629: LD_VAR 0 1
33633: PPUSH
33634: CALL_OW 313
33638: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33639: LD_VAR 0 8
33643: PPUSH
33644: LD_INT 25
33646: PUSH
33647: LD_INT 12
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: PPUSH
33654: CALL_OW 72
33658: NOT
33659: IFFALSE 33669
// control := control_manual ;
33661: LD_ADDR_VAR 0 4
33665: PUSH
33666: LD_INT 1
33668: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33669: LD_ADDR_VAR 0 8
33673: PUSH
33674: LD_VAR 0 1
33678: PPUSH
33679: CALL 33366 0 1
33683: ST_TO_ADDR
// if tmp then
33684: LD_VAR 0 8
33688: IFFALSE 33731
// begin for i in tmp do
33690: LD_ADDR_VAR 0 7
33694: PUSH
33695: LD_VAR 0 8
33699: PUSH
33700: FOR_IN
33701: IFFALSE 33729
// if i [ 1 ] = b_ext_radio then
33703: LD_VAR 0 7
33707: PUSH
33708: LD_INT 1
33710: ARRAY
33711: PUSH
33712: LD_INT 22
33714: EQUAL
33715: IFFALSE 33727
// begin control := control_remote ;
33717: LD_ADDR_VAR 0 4
33721: PUSH
33722: LD_INT 2
33724: ST_TO_ADDR
// break ;
33725: GO 33729
// end ;
33727: GO 33700
33729: POP
33730: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33731: LD_VAR 0 1
33735: PPUSH
33736: LD_VAR 0 2
33740: PPUSH
33741: LD_VAR 0 3
33745: PPUSH
33746: LD_VAR 0 4
33750: PPUSH
33751: LD_VAR 0 5
33755: PPUSH
33756: CALL_OW 448
33760: IFFALSE 33795
// begin result := [ chassis , engine , control , weapon ] ;
33762: LD_ADDR_VAR 0 6
33766: PUSH
33767: LD_VAR 0 2
33771: PUSH
33772: LD_VAR 0 3
33776: PUSH
33777: LD_VAR 0 4
33781: PUSH
33782: LD_VAR 0 5
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: LIST
33791: LIST
33792: ST_TO_ADDR
// exit ;
33793: GO 34207
// end ; _chassis := AvailableChassisList ( factory ) ;
33795: LD_ADDR_VAR 0 9
33799: PUSH
33800: LD_VAR 0 1
33804: PPUSH
33805: CALL_OW 475
33809: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33810: LD_ADDR_VAR 0 11
33814: PUSH
33815: LD_VAR 0 1
33819: PPUSH
33820: CALL_OW 476
33824: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33825: LD_ADDR_VAR 0 12
33829: PUSH
33830: LD_VAR 0 1
33834: PPUSH
33835: CALL_OW 477
33839: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33840: LD_ADDR_VAR 0 10
33844: PUSH
33845: LD_VAR 0 1
33849: PPUSH
33850: CALL_OW 478
33854: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33855: LD_VAR 0 9
33859: NOT
33860: PUSH
33861: LD_VAR 0 11
33865: NOT
33866: OR
33867: PUSH
33868: LD_VAR 0 12
33872: NOT
33873: OR
33874: PUSH
33875: LD_VAR 0 10
33879: NOT
33880: OR
33881: IFFALSE 33916
// begin result := [ chassis , engine , control , weapon ] ;
33883: LD_ADDR_VAR 0 6
33887: PUSH
33888: LD_VAR 0 2
33892: PUSH
33893: LD_VAR 0 3
33897: PUSH
33898: LD_VAR 0 4
33902: PUSH
33903: LD_VAR 0 5
33907: PUSH
33908: EMPTY
33909: LIST
33910: LIST
33911: LIST
33912: LIST
33913: ST_TO_ADDR
// exit ;
33914: GO 34207
// end ; if not chassis in _chassis then
33916: LD_VAR 0 2
33920: PUSH
33921: LD_VAR 0 9
33925: IN
33926: NOT
33927: IFFALSE 33953
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33929: LD_ADDR_VAR 0 2
33933: PUSH
33934: LD_VAR 0 9
33938: PUSH
33939: LD_INT 1
33941: PPUSH
33942: LD_VAR 0 9
33946: PPUSH
33947: CALL_OW 12
33951: ARRAY
33952: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
33953: LD_VAR 0 2
33957: PPUSH
33958: LD_VAR 0 3
33962: PPUSH
33963: CALL 34212 0 2
33967: NOT
33968: IFFALSE 34027
// repeat engine := _engine [ 1 ] ;
33970: LD_ADDR_VAR 0 3
33974: PUSH
33975: LD_VAR 0 11
33979: PUSH
33980: LD_INT 1
33982: ARRAY
33983: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
33984: LD_ADDR_VAR 0 11
33988: PUSH
33989: LD_VAR 0 11
33993: PPUSH
33994: LD_INT 1
33996: PPUSH
33997: CALL_OW 3
34001: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34002: LD_VAR 0 2
34006: PPUSH
34007: LD_VAR 0 3
34011: PPUSH
34012: CALL 34212 0 2
34016: PUSH
34017: LD_VAR 0 11
34021: PUSH
34022: EMPTY
34023: EQUAL
34024: OR
34025: IFFALSE 33970
// if not control in _control then
34027: LD_VAR 0 4
34031: PUSH
34032: LD_VAR 0 12
34036: IN
34037: NOT
34038: IFFALSE 34064
// control := _control [ rand ( 1 , _control ) ] ;
34040: LD_ADDR_VAR 0 4
34044: PUSH
34045: LD_VAR 0 12
34049: PUSH
34050: LD_INT 1
34052: PPUSH
34053: LD_VAR 0 12
34057: PPUSH
34058: CALL_OW 12
34062: ARRAY
34063: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34064: LD_VAR 0 2
34068: PPUSH
34069: LD_VAR 0 5
34073: PPUSH
34074: CALL 34432 0 2
34078: NOT
34079: IFFALSE 34138
// repeat weapon := _weapon [ 1 ] ;
34081: LD_ADDR_VAR 0 5
34085: PUSH
34086: LD_VAR 0 10
34090: PUSH
34091: LD_INT 1
34093: ARRAY
34094: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34095: LD_ADDR_VAR 0 10
34099: PUSH
34100: LD_VAR 0 10
34104: PPUSH
34105: LD_INT 1
34107: PPUSH
34108: CALL_OW 3
34112: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34113: LD_VAR 0 2
34117: PPUSH
34118: LD_VAR 0 5
34122: PPUSH
34123: CALL 34432 0 2
34127: PUSH
34128: LD_VAR 0 10
34132: PUSH
34133: EMPTY
34134: EQUAL
34135: OR
34136: IFFALSE 34081
// result := [ ] ;
34138: LD_ADDR_VAR 0 6
34142: PUSH
34143: EMPTY
34144: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34145: LD_VAR 0 1
34149: PPUSH
34150: LD_VAR 0 2
34154: PPUSH
34155: LD_VAR 0 3
34159: PPUSH
34160: LD_VAR 0 4
34164: PPUSH
34165: LD_VAR 0 5
34169: PPUSH
34170: CALL_OW 448
34174: IFFALSE 34207
// result := [ chassis , engine , control , weapon ] ;
34176: LD_ADDR_VAR 0 6
34180: PUSH
34181: LD_VAR 0 2
34185: PUSH
34186: LD_VAR 0 3
34190: PUSH
34191: LD_VAR 0 4
34195: PUSH
34196: LD_VAR 0 5
34200: PUSH
34201: EMPTY
34202: LIST
34203: LIST
34204: LIST
34205: LIST
34206: ST_TO_ADDR
// end ;
34207: LD_VAR 0 6
34211: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34212: LD_INT 0
34214: PPUSH
// if not chassis or not engine then
34215: LD_VAR 0 1
34219: NOT
34220: PUSH
34221: LD_VAR 0 2
34225: NOT
34226: OR
34227: IFFALSE 34231
// exit ;
34229: GO 34427
// case engine of engine_solar :
34231: LD_VAR 0 2
34235: PUSH
34236: LD_INT 2
34238: DOUBLE
34239: EQUAL
34240: IFTRUE 34244
34242: GO 34282
34244: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34245: LD_ADDR_VAR 0 3
34249: PUSH
34250: LD_INT 11
34252: PUSH
34253: LD_INT 12
34255: PUSH
34256: LD_INT 13
34258: PUSH
34259: LD_INT 14
34261: PUSH
34262: LD_INT 1
34264: PUSH
34265: LD_INT 2
34267: PUSH
34268: LD_INT 3
34270: PUSH
34271: EMPTY
34272: LIST
34273: LIST
34274: LIST
34275: LIST
34276: LIST
34277: LIST
34278: LIST
34279: ST_TO_ADDR
34280: GO 34411
34282: LD_INT 1
34284: DOUBLE
34285: EQUAL
34286: IFTRUE 34290
34288: GO 34352
34290: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34291: LD_ADDR_VAR 0 3
34295: PUSH
34296: LD_INT 11
34298: PUSH
34299: LD_INT 12
34301: PUSH
34302: LD_INT 13
34304: PUSH
34305: LD_INT 14
34307: PUSH
34308: LD_INT 1
34310: PUSH
34311: LD_INT 2
34313: PUSH
34314: LD_INT 3
34316: PUSH
34317: LD_INT 4
34319: PUSH
34320: LD_INT 5
34322: PUSH
34323: LD_INT 21
34325: PUSH
34326: LD_INT 23
34328: PUSH
34329: LD_INT 22
34331: PUSH
34332: LD_INT 24
34334: PUSH
34335: EMPTY
34336: LIST
34337: LIST
34338: LIST
34339: LIST
34340: LIST
34341: LIST
34342: LIST
34343: LIST
34344: LIST
34345: LIST
34346: LIST
34347: LIST
34348: LIST
34349: ST_TO_ADDR
34350: GO 34411
34352: LD_INT 3
34354: DOUBLE
34355: EQUAL
34356: IFTRUE 34360
34358: GO 34410
34360: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34361: LD_ADDR_VAR 0 3
34365: PUSH
34366: LD_INT 13
34368: PUSH
34369: LD_INT 14
34371: PUSH
34372: LD_INT 2
34374: PUSH
34375: LD_INT 3
34377: PUSH
34378: LD_INT 4
34380: PUSH
34381: LD_INT 5
34383: PUSH
34384: LD_INT 21
34386: PUSH
34387: LD_INT 22
34389: PUSH
34390: LD_INT 23
34392: PUSH
34393: LD_INT 24
34395: PUSH
34396: EMPTY
34397: LIST
34398: LIST
34399: LIST
34400: LIST
34401: LIST
34402: LIST
34403: LIST
34404: LIST
34405: LIST
34406: LIST
34407: ST_TO_ADDR
34408: GO 34411
34410: POP
// result := ( chassis in result ) ;
34411: LD_ADDR_VAR 0 3
34415: PUSH
34416: LD_VAR 0 1
34420: PUSH
34421: LD_VAR 0 3
34425: IN
34426: ST_TO_ADDR
// end ;
34427: LD_VAR 0 3
34431: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34432: LD_INT 0
34434: PPUSH
// if not chassis or not weapon then
34435: LD_VAR 0 1
34439: NOT
34440: PUSH
34441: LD_VAR 0 2
34445: NOT
34446: OR
34447: IFFALSE 34451
// exit ;
34449: GO 35513
// case weapon of us_machine_gun :
34451: LD_VAR 0 2
34455: PUSH
34456: LD_INT 2
34458: DOUBLE
34459: EQUAL
34460: IFTRUE 34464
34462: GO 34494
34464: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34465: LD_ADDR_VAR 0 3
34469: PUSH
34470: LD_INT 1
34472: PUSH
34473: LD_INT 2
34475: PUSH
34476: LD_INT 3
34478: PUSH
34479: LD_INT 4
34481: PUSH
34482: LD_INT 5
34484: PUSH
34485: EMPTY
34486: LIST
34487: LIST
34488: LIST
34489: LIST
34490: LIST
34491: ST_TO_ADDR
34492: GO 35497
34494: LD_INT 3
34496: DOUBLE
34497: EQUAL
34498: IFTRUE 34502
34500: GO 34532
34502: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34503: LD_ADDR_VAR 0 3
34507: PUSH
34508: LD_INT 1
34510: PUSH
34511: LD_INT 2
34513: PUSH
34514: LD_INT 3
34516: PUSH
34517: LD_INT 4
34519: PUSH
34520: LD_INT 5
34522: PUSH
34523: EMPTY
34524: LIST
34525: LIST
34526: LIST
34527: LIST
34528: LIST
34529: ST_TO_ADDR
34530: GO 35497
34532: LD_INT 11
34534: DOUBLE
34535: EQUAL
34536: IFTRUE 34540
34538: GO 34570
34540: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34541: LD_ADDR_VAR 0 3
34545: PUSH
34546: LD_INT 1
34548: PUSH
34549: LD_INT 2
34551: PUSH
34552: LD_INT 3
34554: PUSH
34555: LD_INT 4
34557: PUSH
34558: LD_INT 5
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: LIST
34565: LIST
34566: LIST
34567: ST_TO_ADDR
34568: GO 35497
34570: LD_INT 4
34572: DOUBLE
34573: EQUAL
34574: IFTRUE 34578
34576: GO 34604
34578: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34579: LD_ADDR_VAR 0 3
34583: PUSH
34584: LD_INT 2
34586: PUSH
34587: LD_INT 3
34589: PUSH
34590: LD_INT 4
34592: PUSH
34593: LD_INT 5
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: LIST
34600: LIST
34601: ST_TO_ADDR
34602: GO 35497
34604: LD_INT 5
34606: DOUBLE
34607: EQUAL
34608: IFTRUE 34612
34610: GO 34638
34612: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34613: LD_ADDR_VAR 0 3
34617: PUSH
34618: LD_INT 2
34620: PUSH
34621: LD_INT 3
34623: PUSH
34624: LD_INT 4
34626: PUSH
34627: LD_INT 5
34629: PUSH
34630: EMPTY
34631: LIST
34632: LIST
34633: LIST
34634: LIST
34635: ST_TO_ADDR
34636: GO 35497
34638: LD_INT 9
34640: DOUBLE
34641: EQUAL
34642: IFTRUE 34646
34644: GO 34672
34646: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34647: LD_ADDR_VAR 0 3
34651: PUSH
34652: LD_INT 2
34654: PUSH
34655: LD_INT 3
34657: PUSH
34658: LD_INT 4
34660: PUSH
34661: LD_INT 5
34663: PUSH
34664: EMPTY
34665: LIST
34666: LIST
34667: LIST
34668: LIST
34669: ST_TO_ADDR
34670: GO 35497
34672: LD_INT 7
34674: DOUBLE
34675: EQUAL
34676: IFTRUE 34680
34678: GO 34706
34680: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34681: LD_ADDR_VAR 0 3
34685: PUSH
34686: LD_INT 2
34688: PUSH
34689: LD_INT 3
34691: PUSH
34692: LD_INT 4
34694: PUSH
34695: LD_INT 5
34697: PUSH
34698: EMPTY
34699: LIST
34700: LIST
34701: LIST
34702: LIST
34703: ST_TO_ADDR
34704: GO 35497
34706: LD_INT 12
34708: DOUBLE
34709: EQUAL
34710: IFTRUE 34714
34712: GO 34740
34714: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34715: LD_ADDR_VAR 0 3
34719: PUSH
34720: LD_INT 2
34722: PUSH
34723: LD_INT 3
34725: PUSH
34726: LD_INT 4
34728: PUSH
34729: LD_INT 5
34731: PUSH
34732: EMPTY
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: ST_TO_ADDR
34738: GO 35497
34740: LD_INT 13
34742: DOUBLE
34743: EQUAL
34744: IFTRUE 34748
34746: GO 34774
34748: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34749: LD_ADDR_VAR 0 3
34753: PUSH
34754: LD_INT 2
34756: PUSH
34757: LD_INT 3
34759: PUSH
34760: LD_INT 4
34762: PUSH
34763: LD_INT 5
34765: PUSH
34766: EMPTY
34767: LIST
34768: LIST
34769: LIST
34770: LIST
34771: ST_TO_ADDR
34772: GO 35497
34774: LD_INT 14
34776: DOUBLE
34777: EQUAL
34778: IFTRUE 34782
34780: GO 34800
34782: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34783: LD_ADDR_VAR 0 3
34787: PUSH
34788: LD_INT 4
34790: PUSH
34791: LD_INT 5
34793: PUSH
34794: EMPTY
34795: LIST
34796: LIST
34797: ST_TO_ADDR
34798: GO 35497
34800: LD_INT 6
34802: DOUBLE
34803: EQUAL
34804: IFTRUE 34808
34806: GO 34826
34808: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34809: LD_ADDR_VAR 0 3
34813: PUSH
34814: LD_INT 4
34816: PUSH
34817: LD_INT 5
34819: PUSH
34820: EMPTY
34821: LIST
34822: LIST
34823: ST_TO_ADDR
34824: GO 35497
34826: LD_INT 10
34828: DOUBLE
34829: EQUAL
34830: IFTRUE 34834
34832: GO 34852
34834: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34835: LD_ADDR_VAR 0 3
34839: PUSH
34840: LD_INT 4
34842: PUSH
34843: LD_INT 5
34845: PUSH
34846: EMPTY
34847: LIST
34848: LIST
34849: ST_TO_ADDR
34850: GO 35497
34852: LD_INT 22
34854: DOUBLE
34855: EQUAL
34856: IFTRUE 34860
34858: GO 34886
34860: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34861: LD_ADDR_VAR 0 3
34865: PUSH
34866: LD_INT 11
34868: PUSH
34869: LD_INT 12
34871: PUSH
34872: LD_INT 13
34874: PUSH
34875: LD_INT 14
34877: PUSH
34878: EMPTY
34879: LIST
34880: LIST
34881: LIST
34882: LIST
34883: ST_TO_ADDR
34884: GO 35497
34886: LD_INT 23
34888: DOUBLE
34889: EQUAL
34890: IFTRUE 34894
34892: GO 34920
34894: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34895: LD_ADDR_VAR 0 3
34899: PUSH
34900: LD_INT 11
34902: PUSH
34903: LD_INT 12
34905: PUSH
34906: LD_INT 13
34908: PUSH
34909: LD_INT 14
34911: PUSH
34912: EMPTY
34913: LIST
34914: LIST
34915: LIST
34916: LIST
34917: ST_TO_ADDR
34918: GO 35497
34920: LD_INT 24
34922: DOUBLE
34923: EQUAL
34924: IFTRUE 34928
34926: GO 34954
34928: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34929: LD_ADDR_VAR 0 3
34933: PUSH
34934: LD_INT 11
34936: PUSH
34937: LD_INT 12
34939: PUSH
34940: LD_INT 13
34942: PUSH
34943: LD_INT 14
34945: PUSH
34946: EMPTY
34947: LIST
34948: LIST
34949: LIST
34950: LIST
34951: ST_TO_ADDR
34952: GO 35497
34954: LD_INT 30
34956: DOUBLE
34957: EQUAL
34958: IFTRUE 34962
34960: GO 34988
34962: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
34963: LD_ADDR_VAR 0 3
34967: PUSH
34968: LD_INT 11
34970: PUSH
34971: LD_INT 12
34973: PUSH
34974: LD_INT 13
34976: PUSH
34977: LD_INT 14
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: LIST
34984: LIST
34985: ST_TO_ADDR
34986: GO 35497
34988: LD_INT 25
34990: DOUBLE
34991: EQUAL
34992: IFTRUE 34996
34994: GO 35014
34996: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
34997: LD_ADDR_VAR 0 3
35001: PUSH
35002: LD_INT 13
35004: PUSH
35005: LD_INT 14
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: ST_TO_ADDR
35012: GO 35497
35014: LD_INT 27
35016: DOUBLE
35017: EQUAL
35018: IFTRUE 35022
35020: GO 35040
35022: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
35023: LD_ADDR_VAR 0 3
35027: PUSH
35028: LD_INT 13
35030: PUSH
35031: LD_INT 14
35033: PUSH
35034: EMPTY
35035: LIST
35036: LIST
35037: ST_TO_ADDR
35038: GO 35497
35040: LD_EXP 26
35044: DOUBLE
35045: EQUAL
35046: IFTRUE 35050
35048: GO 35076
35050: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35051: LD_ADDR_VAR 0 3
35055: PUSH
35056: LD_INT 11
35058: PUSH
35059: LD_INT 12
35061: PUSH
35062: LD_INT 13
35064: PUSH
35065: LD_INT 14
35067: PUSH
35068: EMPTY
35069: LIST
35070: LIST
35071: LIST
35072: LIST
35073: ST_TO_ADDR
35074: GO 35497
35076: LD_INT 28
35078: DOUBLE
35079: EQUAL
35080: IFTRUE 35084
35082: GO 35102
35084: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35085: LD_ADDR_VAR 0 3
35089: PUSH
35090: LD_INT 13
35092: PUSH
35093: LD_INT 14
35095: PUSH
35096: EMPTY
35097: LIST
35098: LIST
35099: ST_TO_ADDR
35100: GO 35497
35102: LD_INT 29
35104: DOUBLE
35105: EQUAL
35106: IFTRUE 35110
35108: GO 35128
35110: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35111: LD_ADDR_VAR 0 3
35115: PUSH
35116: LD_INT 13
35118: PUSH
35119: LD_INT 14
35121: PUSH
35122: EMPTY
35123: LIST
35124: LIST
35125: ST_TO_ADDR
35126: GO 35497
35128: LD_INT 31
35130: DOUBLE
35131: EQUAL
35132: IFTRUE 35136
35134: GO 35154
35136: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35137: LD_ADDR_VAR 0 3
35141: PUSH
35142: LD_INT 13
35144: PUSH
35145: LD_INT 14
35147: PUSH
35148: EMPTY
35149: LIST
35150: LIST
35151: ST_TO_ADDR
35152: GO 35497
35154: LD_INT 26
35156: DOUBLE
35157: EQUAL
35158: IFTRUE 35162
35160: GO 35180
35162: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35163: LD_ADDR_VAR 0 3
35167: PUSH
35168: LD_INT 13
35170: PUSH
35171: LD_INT 14
35173: PUSH
35174: EMPTY
35175: LIST
35176: LIST
35177: ST_TO_ADDR
35178: GO 35497
35180: LD_INT 42
35182: DOUBLE
35183: EQUAL
35184: IFTRUE 35188
35186: GO 35214
35188: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35189: LD_ADDR_VAR 0 3
35193: PUSH
35194: LD_INT 21
35196: PUSH
35197: LD_INT 22
35199: PUSH
35200: LD_INT 23
35202: PUSH
35203: LD_INT 24
35205: PUSH
35206: EMPTY
35207: LIST
35208: LIST
35209: LIST
35210: LIST
35211: ST_TO_ADDR
35212: GO 35497
35214: LD_INT 43
35216: DOUBLE
35217: EQUAL
35218: IFTRUE 35222
35220: GO 35248
35222: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35223: LD_ADDR_VAR 0 3
35227: PUSH
35228: LD_INT 21
35230: PUSH
35231: LD_INT 22
35233: PUSH
35234: LD_INT 23
35236: PUSH
35237: LD_INT 24
35239: PUSH
35240: EMPTY
35241: LIST
35242: LIST
35243: LIST
35244: LIST
35245: ST_TO_ADDR
35246: GO 35497
35248: LD_INT 44
35250: DOUBLE
35251: EQUAL
35252: IFTRUE 35256
35254: GO 35282
35256: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35257: LD_ADDR_VAR 0 3
35261: PUSH
35262: LD_INT 21
35264: PUSH
35265: LD_INT 22
35267: PUSH
35268: LD_INT 23
35270: PUSH
35271: LD_INT 24
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: LIST
35278: LIST
35279: ST_TO_ADDR
35280: GO 35497
35282: LD_INT 45
35284: DOUBLE
35285: EQUAL
35286: IFTRUE 35290
35288: GO 35316
35290: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35291: LD_ADDR_VAR 0 3
35295: PUSH
35296: LD_INT 21
35298: PUSH
35299: LD_INT 22
35301: PUSH
35302: LD_INT 23
35304: PUSH
35305: LD_INT 24
35307: PUSH
35308: EMPTY
35309: LIST
35310: LIST
35311: LIST
35312: LIST
35313: ST_TO_ADDR
35314: GO 35497
35316: LD_INT 49
35318: DOUBLE
35319: EQUAL
35320: IFTRUE 35324
35322: GO 35350
35324: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35325: LD_ADDR_VAR 0 3
35329: PUSH
35330: LD_INT 21
35332: PUSH
35333: LD_INT 22
35335: PUSH
35336: LD_INT 23
35338: PUSH
35339: LD_INT 24
35341: PUSH
35342: EMPTY
35343: LIST
35344: LIST
35345: LIST
35346: LIST
35347: ST_TO_ADDR
35348: GO 35497
35350: LD_INT 51
35352: DOUBLE
35353: EQUAL
35354: IFTRUE 35358
35356: GO 35384
35358: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35359: LD_ADDR_VAR 0 3
35363: PUSH
35364: LD_INT 21
35366: PUSH
35367: LD_INT 22
35369: PUSH
35370: LD_INT 23
35372: PUSH
35373: LD_INT 24
35375: PUSH
35376: EMPTY
35377: LIST
35378: LIST
35379: LIST
35380: LIST
35381: ST_TO_ADDR
35382: GO 35497
35384: LD_INT 52
35386: DOUBLE
35387: EQUAL
35388: IFTRUE 35392
35390: GO 35418
35392: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35393: LD_ADDR_VAR 0 3
35397: PUSH
35398: LD_INT 21
35400: PUSH
35401: LD_INT 22
35403: PUSH
35404: LD_INT 23
35406: PUSH
35407: LD_INT 24
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: LIST
35414: LIST
35415: ST_TO_ADDR
35416: GO 35497
35418: LD_INT 53
35420: DOUBLE
35421: EQUAL
35422: IFTRUE 35426
35424: GO 35444
35426: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35427: LD_ADDR_VAR 0 3
35431: PUSH
35432: LD_INT 23
35434: PUSH
35435: LD_INT 24
35437: PUSH
35438: EMPTY
35439: LIST
35440: LIST
35441: ST_TO_ADDR
35442: GO 35497
35444: LD_INT 46
35446: DOUBLE
35447: EQUAL
35448: IFTRUE 35452
35450: GO 35470
35452: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35453: LD_ADDR_VAR 0 3
35457: PUSH
35458: LD_INT 23
35460: PUSH
35461: LD_INT 24
35463: PUSH
35464: EMPTY
35465: LIST
35466: LIST
35467: ST_TO_ADDR
35468: GO 35497
35470: LD_INT 47
35472: DOUBLE
35473: EQUAL
35474: IFTRUE 35478
35476: GO 35496
35478: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35479: LD_ADDR_VAR 0 3
35483: PUSH
35484: LD_INT 23
35486: PUSH
35487: LD_INT 24
35489: PUSH
35490: EMPTY
35491: LIST
35492: LIST
35493: ST_TO_ADDR
35494: GO 35497
35496: POP
// result := ( chassis in result ) ;
35497: LD_ADDR_VAR 0 3
35501: PUSH
35502: LD_VAR 0 1
35506: PUSH
35507: LD_VAR 0 3
35511: IN
35512: ST_TO_ADDR
// end ;
35513: LD_VAR 0 3
35517: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35518: LD_INT 0
35520: PPUSH
35521: PPUSH
35522: PPUSH
35523: PPUSH
35524: PPUSH
35525: PPUSH
35526: PPUSH
// result := array ;
35527: LD_ADDR_VAR 0 5
35531: PUSH
35532: LD_VAR 0 1
35536: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35537: LD_VAR 0 1
35541: NOT
35542: PUSH
35543: LD_VAR 0 2
35547: NOT
35548: OR
35549: PUSH
35550: LD_VAR 0 3
35554: NOT
35555: OR
35556: PUSH
35557: LD_VAR 0 2
35561: PUSH
35562: LD_VAR 0 1
35566: GREATER
35567: OR
35568: PUSH
35569: LD_VAR 0 3
35573: PUSH
35574: LD_VAR 0 1
35578: GREATER
35579: OR
35580: IFFALSE 35584
// exit ;
35582: GO 35880
// if direction then
35584: LD_VAR 0 4
35588: IFFALSE 35652
// begin d := 1 ;
35590: LD_ADDR_VAR 0 9
35594: PUSH
35595: LD_INT 1
35597: ST_TO_ADDR
// if i_from > i_to then
35598: LD_VAR 0 2
35602: PUSH
35603: LD_VAR 0 3
35607: GREATER
35608: IFFALSE 35634
// length := ( array - i_from ) + i_to else
35610: LD_ADDR_VAR 0 11
35614: PUSH
35615: LD_VAR 0 1
35619: PUSH
35620: LD_VAR 0 2
35624: MINUS
35625: PUSH
35626: LD_VAR 0 3
35630: PLUS
35631: ST_TO_ADDR
35632: GO 35650
// length := i_to - i_from ;
35634: LD_ADDR_VAR 0 11
35638: PUSH
35639: LD_VAR 0 3
35643: PUSH
35644: LD_VAR 0 2
35648: MINUS
35649: ST_TO_ADDR
// end else
35650: GO 35713
// begin d := - 1 ;
35652: LD_ADDR_VAR 0 9
35656: PUSH
35657: LD_INT 1
35659: NEG
35660: ST_TO_ADDR
// if i_from > i_to then
35661: LD_VAR 0 2
35665: PUSH
35666: LD_VAR 0 3
35670: GREATER
35671: IFFALSE 35691
// length := i_from - i_to else
35673: LD_ADDR_VAR 0 11
35677: PUSH
35678: LD_VAR 0 2
35682: PUSH
35683: LD_VAR 0 3
35687: MINUS
35688: ST_TO_ADDR
35689: GO 35713
// length := ( array - i_to ) + i_from ;
35691: LD_ADDR_VAR 0 11
35695: PUSH
35696: LD_VAR 0 1
35700: PUSH
35701: LD_VAR 0 3
35705: MINUS
35706: PUSH
35707: LD_VAR 0 2
35711: PLUS
35712: ST_TO_ADDR
// end ; if not length then
35713: LD_VAR 0 11
35717: NOT
35718: IFFALSE 35722
// exit ;
35720: GO 35880
// tmp := array ;
35722: LD_ADDR_VAR 0 10
35726: PUSH
35727: LD_VAR 0 1
35731: ST_TO_ADDR
// for i = 1 to length do
35732: LD_ADDR_VAR 0 6
35736: PUSH
35737: DOUBLE
35738: LD_INT 1
35740: DEC
35741: ST_TO_ADDR
35742: LD_VAR 0 11
35746: PUSH
35747: FOR_TO
35748: IFFALSE 35868
// begin for j = 1 to array do
35750: LD_ADDR_VAR 0 7
35754: PUSH
35755: DOUBLE
35756: LD_INT 1
35758: DEC
35759: ST_TO_ADDR
35760: LD_VAR 0 1
35764: PUSH
35765: FOR_TO
35766: IFFALSE 35854
// begin k := j + d ;
35768: LD_ADDR_VAR 0 8
35772: PUSH
35773: LD_VAR 0 7
35777: PUSH
35778: LD_VAR 0 9
35782: PLUS
35783: ST_TO_ADDR
// if k > array then
35784: LD_VAR 0 8
35788: PUSH
35789: LD_VAR 0 1
35793: GREATER
35794: IFFALSE 35804
// k := 1 ;
35796: LD_ADDR_VAR 0 8
35800: PUSH
35801: LD_INT 1
35803: ST_TO_ADDR
// if not k then
35804: LD_VAR 0 8
35808: NOT
35809: IFFALSE 35821
// k := array ;
35811: LD_ADDR_VAR 0 8
35815: PUSH
35816: LD_VAR 0 1
35820: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35821: LD_ADDR_VAR 0 10
35825: PUSH
35826: LD_VAR 0 10
35830: PPUSH
35831: LD_VAR 0 8
35835: PPUSH
35836: LD_VAR 0 1
35840: PUSH
35841: LD_VAR 0 7
35845: ARRAY
35846: PPUSH
35847: CALL_OW 1
35851: ST_TO_ADDR
// end ;
35852: GO 35765
35854: POP
35855: POP
// array := tmp ;
35856: LD_ADDR_VAR 0 1
35860: PUSH
35861: LD_VAR 0 10
35865: ST_TO_ADDR
// end ;
35866: GO 35747
35868: POP
35869: POP
// result := array ;
35870: LD_ADDR_VAR 0 5
35874: PUSH
35875: LD_VAR 0 1
35879: ST_TO_ADDR
// end ;
35880: LD_VAR 0 5
35884: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35885: LD_INT 0
35887: PPUSH
35888: PPUSH
// result := 0 ;
35889: LD_ADDR_VAR 0 3
35893: PUSH
35894: LD_INT 0
35896: ST_TO_ADDR
// if not array or not value in array then
35897: LD_VAR 0 1
35901: NOT
35902: PUSH
35903: LD_VAR 0 2
35907: PUSH
35908: LD_VAR 0 1
35912: IN
35913: NOT
35914: OR
35915: IFFALSE 35919
// exit ;
35917: GO 35973
// for i = 1 to array do
35919: LD_ADDR_VAR 0 4
35923: PUSH
35924: DOUBLE
35925: LD_INT 1
35927: DEC
35928: ST_TO_ADDR
35929: LD_VAR 0 1
35933: PUSH
35934: FOR_TO
35935: IFFALSE 35971
// if value = array [ i ] then
35937: LD_VAR 0 2
35941: PUSH
35942: LD_VAR 0 1
35946: PUSH
35947: LD_VAR 0 4
35951: ARRAY
35952: EQUAL
35953: IFFALSE 35969
// begin result := i ;
35955: LD_ADDR_VAR 0 3
35959: PUSH
35960: LD_VAR 0 4
35964: ST_TO_ADDR
// exit ;
35965: POP
35966: POP
35967: GO 35973
// end ;
35969: GO 35934
35971: POP
35972: POP
// end ;
35973: LD_VAR 0 3
35977: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
35978: LD_INT 0
35980: PPUSH
// vc_chassis := chassis ;
35981: LD_ADDR_OWVAR 37
35985: PUSH
35986: LD_VAR 0 1
35990: ST_TO_ADDR
// vc_engine := engine ;
35991: LD_ADDR_OWVAR 39
35995: PUSH
35996: LD_VAR 0 2
36000: ST_TO_ADDR
// vc_control := control ;
36001: LD_ADDR_OWVAR 38
36005: PUSH
36006: LD_VAR 0 3
36010: ST_TO_ADDR
// vc_weapon := weapon ;
36011: LD_ADDR_OWVAR 40
36015: PUSH
36016: LD_VAR 0 4
36020: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36021: LD_ADDR_OWVAR 41
36025: PUSH
36026: LD_VAR 0 5
36030: ST_TO_ADDR
// end ;
36031: LD_VAR 0 6
36035: RET
// export function WantPlant ( unit ) ; var task ; begin
36036: LD_INT 0
36038: PPUSH
36039: PPUSH
// result := false ;
36040: LD_ADDR_VAR 0 2
36044: PUSH
36045: LD_INT 0
36047: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36048: LD_ADDR_VAR 0 3
36052: PUSH
36053: LD_VAR 0 1
36057: PPUSH
36058: CALL_OW 437
36062: ST_TO_ADDR
// if task then
36063: LD_VAR 0 3
36067: IFFALSE 36095
// if task [ 1 ] [ 1 ] = p then
36069: LD_VAR 0 3
36073: PUSH
36074: LD_INT 1
36076: ARRAY
36077: PUSH
36078: LD_INT 1
36080: ARRAY
36081: PUSH
36082: LD_STRING p
36084: EQUAL
36085: IFFALSE 36095
// result := true ;
36087: LD_ADDR_VAR 0 2
36091: PUSH
36092: LD_INT 1
36094: ST_TO_ADDR
// end ;
36095: LD_VAR 0 2
36099: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36100: LD_INT 0
36102: PPUSH
36103: PPUSH
36104: PPUSH
36105: PPUSH
// if pos < 1 then
36106: LD_VAR 0 2
36110: PUSH
36111: LD_INT 1
36113: LESS
36114: IFFALSE 36118
// exit ;
36116: GO 36421
// if pos = 1 then
36118: LD_VAR 0 2
36122: PUSH
36123: LD_INT 1
36125: EQUAL
36126: IFFALSE 36159
// result := Replace ( arr , pos [ 1 ] , value ) else
36128: LD_ADDR_VAR 0 4
36132: PUSH
36133: LD_VAR 0 1
36137: PPUSH
36138: LD_VAR 0 2
36142: PUSH
36143: LD_INT 1
36145: ARRAY
36146: PPUSH
36147: LD_VAR 0 3
36151: PPUSH
36152: CALL_OW 1
36156: ST_TO_ADDR
36157: GO 36421
// begin tmp := arr ;
36159: LD_ADDR_VAR 0 6
36163: PUSH
36164: LD_VAR 0 1
36168: ST_TO_ADDR
// s_arr := [ tmp ] ;
36169: LD_ADDR_VAR 0 7
36173: PUSH
36174: LD_VAR 0 6
36178: PUSH
36179: EMPTY
36180: LIST
36181: ST_TO_ADDR
// for i = 1 to pos - 1 do
36182: LD_ADDR_VAR 0 5
36186: PUSH
36187: DOUBLE
36188: LD_INT 1
36190: DEC
36191: ST_TO_ADDR
36192: LD_VAR 0 2
36196: PUSH
36197: LD_INT 1
36199: MINUS
36200: PUSH
36201: FOR_TO
36202: IFFALSE 36247
// begin tmp := tmp [ pos [ i ] ] ;
36204: LD_ADDR_VAR 0 6
36208: PUSH
36209: LD_VAR 0 6
36213: PUSH
36214: LD_VAR 0 2
36218: PUSH
36219: LD_VAR 0 5
36223: ARRAY
36224: ARRAY
36225: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36226: LD_ADDR_VAR 0 7
36230: PUSH
36231: LD_VAR 0 7
36235: PUSH
36236: LD_VAR 0 6
36240: PUSH
36241: EMPTY
36242: LIST
36243: ADD
36244: ST_TO_ADDR
// end ;
36245: GO 36201
36247: POP
36248: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36249: LD_ADDR_VAR 0 6
36253: PUSH
36254: LD_VAR 0 6
36258: PPUSH
36259: LD_VAR 0 2
36263: PUSH
36264: LD_VAR 0 2
36268: ARRAY
36269: PPUSH
36270: LD_VAR 0 3
36274: PPUSH
36275: CALL_OW 1
36279: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36280: LD_ADDR_VAR 0 7
36284: PUSH
36285: LD_VAR 0 7
36289: PPUSH
36290: LD_VAR 0 7
36294: PPUSH
36295: LD_VAR 0 6
36299: PPUSH
36300: CALL_OW 1
36304: ST_TO_ADDR
// for i = s_arr downto 2 do
36305: LD_ADDR_VAR 0 5
36309: PUSH
36310: DOUBLE
36311: LD_VAR 0 7
36315: INC
36316: ST_TO_ADDR
36317: LD_INT 2
36319: PUSH
36320: FOR_DOWNTO
36321: IFFALSE 36405
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36323: LD_ADDR_VAR 0 6
36327: PUSH
36328: LD_VAR 0 7
36332: PUSH
36333: LD_VAR 0 5
36337: PUSH
36338: LD_INT 1
36340: MINUS
36341: ARRAY
36342: PPUSH
36343: LD_VAR 0 2
36347: PUSH
36348: LD_VAR 0 5
36352: PUSH
36353: LD_INT 1
36355: MINUS
36356: ARRAY
36357: PPUSH
36358: LD_VAR 0 7
36362: PUSH
36363: LD_VAR 0 5
36367: ARRAY
36368: PPUSH
36369: CALL_OW 1
36373: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36374: LD_ADDR_VAR 0 7
36378: PUSH
36379: LD_VAR 0 7
36383: PPUSH
36384: LD_VAR 0 5
36388: PUSH
36389: LD_INT 1
36391: MINUS
36392: PPUSH
36393: LD_VAR 0 6
36397: PPUSH
36398: CALL_OW 1
36402: ST_TO_ADDR
// end ;
36403: GO 36320
36405: POP
36406: POP
// result := s_arr [ 1 ] ;
36407: LD_ADDR_VAR 0 4
36411: PUSH
36412: LD_VAR 0 7
36416: PUSH
36417: LD_INT 1
36419: ARRAY
36420: ST_TO_ADDR
// end ; end ;
36421: LD_VAR 0 4
36425: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36426: LD_INT 0
36428: PPUSH
36429: PPUSH
// if not list then
36430: LD_VAR 0 1
36434: NOT
36435: IFFALSE 36439
// exit ;
36437: GO 36530
// i := list [ pos1 ] ;
36439: LD_ADDR_VAR 0 5
36443: PUSH
36444: LD_VAR 0 1
36448: PUSH
36449: LD_VAR 0 2
36453: ARRAY
36454: ST_TO_ADDR
// if not i then
36455: LD_VAR 0 5
36459: NOT
36460: IFFALSE 36464
// exit ;
36462: GO 36530
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36464: LD_ADDR_VAR 0 1
36468: PUSH
36469: LD_VAR 0 1
36473: PPUSH
36474: LD_VAR 0 2
36478: PPUSH
36479: LD_VAR 0 1
36483: PUSH
36484: LD_VAR 0 3
36488: ARRAY
36489: PPUSH
36490: CALL_OW 1
36494: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36495: LD_ADDR_VAR 0 1
36499: PUSH
36500: LD_VAR 0 1
36504: PPUSH
36505: LD_VAR 0 3
36509: PPUSH
36510: LD_VAR 0 5
36514: PPUSH
36515: CALL_OW 1
36519: ST_TO_ADDR
// result := list ;
36520: LD_ADDR_VAR 0 4
36524: PUSH
36525: LD_VAR 0 1
36529: ST_TO_ADDR
// end ;
36530: LD_VAR 0 4
36534: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36535: LD_INT 0
36537: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36538: LD_ADDR_VAR 0 5
36542: PUSH
36543: LD_VAR 0 1
36547: PPUSH
36548: CALL_OW 250
36552: PPUSH
36553: LD_VAR 0 1
36557: PPUSH
36558: CALL_OW 251
36562: PPUSH
36563: LD_VAR 0 2
36567: PPUSH
36568: LD_VAR 0 3
36572: PPUSH
36573: LD_VAR 0 4
36577: PPUSH
36578: CALL 36588 0 5
36582: ST_TO_ADDR
// end ;
36583: LD_VAR 0 5
36587: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36588: LD_INT 0
36590: PPUSH
36591: PPUSH
36592: PPUSH
36593: PPUSH
// if not list then
36594: LD_VAR 0 3
36598: NOT
36599: IFFALSE 36603
// exit ;
36601: GO 36991
// result := [ ] ;
36603: LD_ADDR_VAR 0 6
36607: PUSH
36608: EMPTY
36609: ST_TO_ADDR
// for i in list do
36610: LD_ADDR_VAR 0 7
36614: PUSH
36615: LD_VAR 0 3
36619: PUSH
36620: FOR_IN
36621: IFFALSE 36823
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36623: LD_ADDR_VAR 0 9
36627: PUSH
36628: LD_VAR 0 7
36632: PPUSH
36633: LD_VAR 0 1
36637: PPUSH
36638: LD_VAR 0 2
36642: PPUSH
36643: CALL_OW 297
36647: ST_TO_ADDR
// if not result then
36648: LD_VAR 0 6
36652: NOT
36653: IFFALSE 36679
// result := [ [ i , tmp ] ] else
36655: LD_ADDR_VAR 0 6
36659: PUSH
36660: LD_VAR 0 7
36664: PUSH
36665: LD_VAR 0 9
36669: PUSH
36670: EMPTY
36671: LIST
36672: LIST
36673: PUSH
36674: EMPTY
36675: LIST
36676: ST_TO_ADDR
36677: GO 36821
// begin if result [ result ] [ 2 ] < tmp then
36679: LD_VAR 0 6
36683: PUSH
36684: LD_VAR 0 6
36688: ARRAY
36689: PUSH
36690: LD_INT 2
36692: ARRAY
36693: PUSH
36694: LD_VAR 0 9
36698: LESS
36699: IFFALSE 36741
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36701: LD_ADDR_VAR 0 6
36705: PUSH
36706: LD_VAR 0 6
36710: PPUSH
36711: LD_VAR 0 6
36715: PUSH
36716: LD_INT 1
36718: PLUS
36719: PPUSH
36720: LD_VAR 0 7
36724: PUSH
36725: LD_VAR 0 9
36729: PUSH
36730: EMPTY
36731: LIST
36732: LIST
36733: PPUSH
36734: CALL_OW 2
36738: ST_TO_ADDR
36739: GO 36821
// for j = 1 to result do
36741: LD_ADDR_VAR 0 8
36745: PUSH
36746: DOUBLE
36747: LD_INT 1
36749: DEC
36750: ST_TO_ADDR
36751: LD_VAR 0 6
36755: PUSH
36756: FOR_TO
36757: IFFALSE 36819
// begin if tmp < result [ j ] [ 2 ] then
36759: LD_VAR 0 9
36763: PUSH
36764: LD_VAR 0 6
36768: PUSH
36769: LD_VAR 0 8
36773: ARRAY
36774: PUSH
36775: LD_INT 2
36777: ARRAY
36778: LESS
36779: IFFALSE 36817
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36781: LD_ADDR_VAR 0 6
36785: PUSH
36786: LD_VAR 0 6
36790: PPUSH
36791: LD_VAR 0 8
36795: PPUSH
36796: LD_VAR 0 7
36800: PUSH
36801: LD_VAR 0 9
36805: PUSH
36806: EMPTY
36807: LIST
36808: LIST
36809: PPUSH
36810: CALL_OW 2
36814: ST_TO_ADDR
// break ;
36815: GO 36819
// end ; end ;
36817: GO 36756
36819: POP
36820: POP
// end ; end ;
36821: GO 36620
36823: POP
36824: POP
// if result and not asc then
36825: LD_VAR 0 6
36829: PUSH
36830: LD_VAR 0 4
36834: NOT
36835: AND
36836: IFFALSE 36911
// begin tmp := result ;
36838: LD_ADDR_VAR 0 9
36842: PUSH
36843: LD_VAR 0 6
36847: ST_TO_ADDR
// for i = tmp downto 1 do
36848: LD_ADDR_VAR 0 7
36852: PUSH
36853: DOUBLE
36854: LD_VAR 0 9
36858: INC
36859: ST_TO_ADDR
36860: LD_INT 1
36862: PUSH
36863: FOR_DOWNTO
36864: IFFALSE 36909
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36866: LD_ADDR_VAR 0 6
36870: PUSH
36871: LD_VAR 0 6
36875: PPUSH
36876: LD_VAR 0 9
36880: PUSH
36881: LD_VAR 0 7
36885: MINUS
36886: PUSH
36887: LD_INT 1
36889: PLUS
36890: PPUSH
36891: LD_VAR 0 9
36895: PUSH
36896: LD_VAR 0 7
36900: ARRAY
36901: PPUSH
36902: CALL_OW 1
36906: ST_TO_ADDR
36907: GO 36863
36909: POP
36910: POP
// end ; tmp := [ ] ;
36911: LD_ADDR_VAR 0 9
36915: PUSH
36916: EMPTY
36917: ST_TO_ADDR
// if mode then
36918: LD_VAR 0 5
36922: IFFALSE 36991
// begin for i = 1 to result do
36924: LD_ADDR_VAR 0 7
36928: PUSH
36929: DOUBLE
36930: LD_INT 1
36932: DEC
36933: ST_TO_ADDR
36934: LD_VAR 0 6
36938: PUSH
36939: FOR_TO
36940: IFFALSE 36979
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36942: LD_ADDR_VAR 0 9
36946: PUSH
36947: LD_VAR 0 9
36951: PPUSH
36952: LD_VAR 0 7
36956: PPUSH
36957: LD_VAR 0 6
36961: PUSH
36962: LD_VAR 0 7
36966: ARRAY
36967: PUSH
36968: LD_INT 1
36970: ARRAY
36971: PPUSH
36972: CALL_OW 1
36976: ST_TO_ADDR
36977: GO 36939
36979: POP
36980: POP
// result := tmp ;
36981: LD_ADDR_VAR 0 6
36985: PUSH
36986: LD_VAR 0 9
36990: ST_TO_ADDR
// end ; end ;
36991: LD_VAR 0 6
36995: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
36996: LD_INT 0
36998: PPUSH
36999: PPUSH
37000: PPUSH
37001: PPUSH
37002: PPUSH
37003: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
37004: LD_ADDR_VAR 0 5
37008: PUSH
37009: LD_INT 0
37011: PUSH
37012: LD_INT 0
37014: PUSH
37015: LD_INT 0
37017: PUSH
37018: EMPTY
37019: PUSH
37020: EMPTY
37021: LIST
37022: LIST
37023: LIST
37024: LIST
37025: ST_TO_ADDR
// if not x or not y then
37026: LD_VAR 0 2
37030: NOT
37031: PUSH
37032: LD_VAR 0 3
37036: NOT
37037: OR
37038: IFFALSE 37042
// exit ;
37040: GO 38694
// if not range then
37042: LD_VAR 0 4
37046: NOT
37047: IFFALSE 37057
// range := 10 ;
37049: LD_ADDR_VAR 0 4
37053: PUSH
37054: LD_INT 10
37056: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37057: LD_ADDR_VAR 0 8
37061: PUSH
37062: LD_INT 81
37064: PUSH
37065: LD_VAR 0 1
37069: PUSH
37070: EMPTY
37071: LIST
37072: LIST
37073: PUSH
37074: LD_INT 92
37076: PUSH
37077: LD_VAR 0 2
37081: PUSH
37082: LD_VAR 0 3
37086: PUSH
37087: LD_VAR 0 4
37091: PUSH
37092: EMPTY
37093: LIST
37094: LIST
37095: LIST
37096: LIST
37097: PUSH
37098: LD_INT 3
37100: PUSH
37101: LD_INT 21
37103: PUSH
37104: LD_INT 3
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: PUSH
37111: EMPTY
37112: LIST
37113: LIST
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: LIST
37119: PPUSH
37120: CALL_OW 69
37124: ST_TO_ADDR
// if not tmp then
37125: LD_VAR 0 8
37129: NOT
37130: IFFALSE 37134
// exit ;
37132: GO 38694
// for i in tmp do
37134: LD_ADDR_VAR 0 6
37138: PUSH
37139: LD_VAR 0 8
37143: PUSH
37144: FOR_IN
37145: IFFALSE 38669
// begin points := [ 0 , 0 , 0 ] ;
37147: LD_ADDR_VAR 0 9
37151: PUSH
37152: LD_INT 0
37154: PUSH
37155: LD_INT 0
37157: PUSH
37158: LD_INT 0
37160: PUSH
37161: EMPTY
37162: LIST
37163: LIST
37164: LIST
37165: ST_TO_ADDR
// bpoints := 1 ;
37166: LD_ADDR_VAR 0 10
37170: PUSH
37171: LD_INT 1
37173: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37174: LD_VAR 0 6
37178: PPUSH
37179: CALL_OW 247
37183: PUSH
37184: LD_INT 1
37186: DOUBLE
37187: EQUAL
37188: IFTRUE 37192
37190: GO 37770
37192: POP
// begin if GetClass ( i ) = 1 then
37193: LD_VAR 0 6
37197: PPUSH
37198: CALL_OW 257
37202: PUSH
37203: LD_INT 1
37205: EQUAL
37206: IFFALSE 37227
// points := [ 10 , 5 , 3 ] ;
37208: LD_ADDR_VAR 0 9
37212: PUSH
37213: LD_INT 10
37215: PUSH
37216: LD_INT 5
37218: PUSH
37219: LD_INT 3
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: LIST
37226: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37227: LD_VAR 0 6
37231: PPUSH
37232: CALL_OW 257
37236: PUSH
37237: LD_INT 2
37239: PUSH
37240: LD_INT 3
37242: PUSH
37243: LD_INT 4
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: LIST
37250: IN
37251: IFFALSE 37272
// points := [ 3 , 2 , 1 ] ;
37253: LD_ADDR_VAR 0 9
37257: PUSH
37258: LD_INT 3
37260: PUSH
37261: LD_INT 2
37263: PUSH
37264: LD_INT 1
37266: PUSH
37267: EMPTY
37268: LIST
37269: LIST
37270: LIST
37271: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37272: LD_VAR 0 6
37276: PPUSH
37277: CALL_OW 257
37281: PUSH
37282: LD_INT 5
37284: EQUAL
37285: IFFALSE 37306
// points := [ 130 , 5 , 2 ] ;
37287: LD_ADDR_VAR 0 9
37291: PUSH
37292: LD_INT 130
37294: PUSH
37295: LD_INT 5
37297: PUSH
37298: LD_INT 2
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: LIST
37305: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37306: LD_VAR 0 6
37310: PPUSH
37311: CALL_OW 257
37315: PUSH
37316: LD_INT 8
37318: EQUAL
37319: IFFALSE 37340
// points := [ 35 , 35 , 30 ] ;
37321: LD_ADDR_VAR 0 9
37325: PUSH
37326: LD_INT 35
37328: PUSH
37329: LD_INT 35
37331: PUSH
37332: LD_INT 30
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: LIST
37339: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37340: LD_VAR 0 6
37344: PPUSH
37345: CALL_OW 257
37349: PUSH
37350: LD_INT 9
37352: EQUAL
37353: IFFALSE 37374
// points := [ 20 , 55 , 40 ] ;
37355: LD_ADDR_VAR 0 9
37359: PUSH
37360: LD_INT 20
37362: PUSH
37363: LD_INT 55
37365: PUSH
37366: LD_INT 40
37368: PUSH
37369: EMPTY
37370: LIST
37371: LIST
37372: LIST
37373: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37374: LD_VAR 0 6
37378: PPUSH
37379: CALL_OW 257
37383: PUSH
37384: LD_INT 12
37386: PUSH
37387: LD_INT 16
37389: PUSH
37390: EMPTY
37391: LIST
37392: LIST
37393: IN
37394: IFFALSE 37415
// points := [ 5 , 3 , 2 ] ;
37396: LD_ADDR_VAR 0 9
37400: PUSH
37401: LD_INT 5
37403: PUSH
37404: LD_INT 3
37406: PUSH
37407: LD_INT 2
37409: PUSH
37410: EMPTY
37411: LIST
37412: LIST
37413: LIST
37414: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37415: LD_VAR 0 6
37419: PPUSH
37420: CALL_OW 257
37424: PUSH
37425: LD_INT 17
37427: EQUAL
37428: IFFALSE 37449
// points := [ 100 , 50 , 75 ] ;
37430: LD_ADDR_VAR 0 9
37434: PUSH
37435: LD_INT 100
37437: PUSH
37438: LD_INT 50
37440: PUSH
37441: LD_INT 75
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: LIST
37448: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37449: LD_VAR 0 6
37453: PPUSH
37454: CALL_OW 257
37458: PUSH
37459: LD_INT 15
37461: EQUAL
37462: IFFALSE 37483
// points := [ 10 , 5 , 3 ] ;
37464: LD_ADDR_VAR 0 9
37468: PUSH
37469: LD_INT 10
37471: PUSH
37472: LD_INT 5
37474: PUSH
37475: LD_INT 3
37477: PUSH
37478: EMPTY
37479: LIST
37480: LIST
37481: LIST
37482: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37483: LD_VAR 0 6
37487: PPUSH
37488: CALL_OW 257
37492: PUSH
37493: LD_INT 14
37495: EQUAL
37496: IFFALSE 37517
// points := [ 10 , 0 , 0 ] ;
37498: LD_ADDR_VAR 0 9
37502: PUSH
37503: LD_INT 10
37505: PUSH
37506: LD_INT 0
37508: PUSH
37509: LD_INT 0
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: LIST
37516: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37517: LD_VAR 0 6
37521: PPUSH
37522: CALL_OW 257
37526: PUSH
37527: LD_INT 11
37529: EQUAL
37530: IFFALSE 37551
// points := [ 30 , 10 , 5 ] ;
37532: LD_ADDR_VAR 0 9
37536: PUSH
37537: LD_INT 30
37539: PUSH
37540: LD_INT 10
37542: PUSH
37543: LD_INT 5
37545: PUSH
37546: EMPTY
37547: LIST
37548: LIST
37549: LIST
37550: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37551: LD_VAR 0 1
37555: PPUSH
37556: LD_INT 5
37558: PPUSH
37559: CALL_OW 321
37563: PUSH
37564: LD_INT 2
37566: EQUAL
37567: IFFALSE 37584
// bpoints := bpoints * 1.8 ;
37569: LD_ADDR_VAR 0 10
37573: PUSH
37574: LD_VAR 0 10
37578: PUSH
37579: LD_REAL  1.80000000000000E+0000
37582: MUL
37583: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37584: LD_VAR 0 6
37588: PPUSH
37589: CALL_OW 257
37593: PUSH
37594: LD_INT 1
37596: PUSH
37597: LD_INT 2
37599: PUSH
37600: LD_INT 3
37602: PUSH
37603: LD_INT 4
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: LIST
37610: LIST
37611: IN
37612: PUSH
37613: LD_VAR 0 1
37617: PPUSH
37618: LD_INT 51
37620: PPUSH
37621: CALL_OW 321
37625: PUSH
37626: LD_INT 2
37628: EQUAL
37629: AND
37630: IFFALSE 37647
// bpoints := bpoints * 1.2 ;
37632: LD_ADDR_VAR 0 10
37636: PUSH
37637: LD_VAR 0 10
37641: PUSH
37642: LD_REAL  1.20000000000000E+0000
37645: MUL
37646: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37647: LD_VAR 0 6
37651: PPUSH
37652: CALL_OW 257
37656: PUSH
37657: LD_INT 5
37659: PUSH
37660: LD_INT 7
37662: PUSH
37663: LD_INT 9
37665: PUSH
37666: EMPTY
37667: LIST
37668: LIST
37669: LIST
37670: IN
37671: PUSH
37672: LD_VAR 0 1
37676: PPUSH
37677: LD_INT 52
37679: PPUSH
37680: CALL_OW 321
37684: PUSH
37685: LD_INT 2
37687: EQUAL
37688: AND
37689: IFFALSE 37706
// bpoints := bpoints * 1.5 ;
37691: LD_ADDR_VAR 0 10
37695: PUSH
37696: LD_VAR 0 10
37700: PUSH
37701: LD_REAL  1.50000000000000E+0000
37704: MUL
37705: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37706: LD_VAR 0 1
37710: PPUSH
37711: LD_INT 66
37713: PPUSH
37714: CALL_OW 321
37718: PUSH
37719: LD_INT 2
37721: EQUAL
37722: IFFALSE 37739
// bpoints := bpoints * 1.1 ;
37724: LD_ADDR_VAR 0 10
37728: PUSH
37729: LD_VAR 0 10
37733: PUSH
37734: LD_REAL  1.10000000000000E+0000
37737: MUL
37738: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37739: LD_ADDR_VAR 0 10
37743: PUSH
37744: LD_VAR 0 10
37748: PUSH
37749: LD_VAR 0 6
37753: PPUSH
37754: LD_INT 1
37756: PPUSH
37757: CALL_OW 259
37761: PUSH
37762: LD_REAL  1.15000000000000E+0000
37765: MUL
37766: MUL
37767: ST_TO_ADDR
// end ; unit_vehicle :
37768: GO 38598
37770: LD_INT 2
37772: DOUBLE
37773: EQUAL
37774: IFTRUE 37778
37776: GO 38586
37778: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37779: LD_VAR 0 6
37783: PPUSH
37784: CALL_OW 264
37788: PUSH
37789: LD_INT 2
37791: PUSH
37792: LD_INT 42
37794: PUSH
37795: LD_INT 24
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: LIST
37802: IN
37803: IFFALSE 37824
// points := [ 25 , 5 , 3 ] ;
37805: LD_ADDR_VAR 0 9
37809: PUSH
37810: LD_INT 25
37812: PUSH
37813: LD_INT 5
37815: PUSH
37816: LD_INT 3
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: LIST
37823: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37824: LD_VAR 0 6
37828: PPUSH
37829: CALL_OW 264
37833: PUSH
37834: LD_INT 4
37836: PUSH
37837: LD_INT 43
37839: PUSH
37840: LD_INT 25
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: LIST
37847: IN
37848: IFFALSE 37869
// points := [ 40 , 15 , 5 ] ;
37850: LD_ADDR_VAR 0 9
37854: PUSH
37855: LD_INT 40
37857: PUSH
37858: LD_INT 15
37860: PUSH
37861: LD_INT 5
37863: PUSH
37864: EMPTY
37865: LIST
37866: LIST
37867: LIST
37868: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37869: LD_VAR 0 6
37873: PPUSH
37874: CALL_OW 264
37878: PUSH
37879: LD_INT 3
37881: PUSH
37882: LD_INT 23
37884: PUSH
37885: EMPTY
37886: LIST
37887: LIST
37888: IN
37889: IFFALSE 37910
// points := [ 7 , 25 , 8 ] ;
37891: LD_ADDR_VAR 0 9
37895: PUSH
37896: LD_INT 7
37898: PUSH
37899: LD_INT 25
37901: PUSH
37902: LD_INT 8
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: LIST
37909: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37910: LD_VAR 0 6
37914: PPUSH
37915: CALL_OW 264
37919: PUSH
37920: LD_INT 5
37922: PUSH
37923: LD_INT 27
37925: PUSH
37926: LD_INT 44
37928: PUSH
37929: EMPTY
37930: LIST
37931: LIST
37932: LIST
37933: IN
37934: IFFALSE 37955
// points := [ 14 , 50 , 16 ] ;
37936: LD_ADDR_VAR 0 9
37940: PUSH
37941: LD_INT 14
37943: PUSH
37944: LD_INT 50
37946: PUSH
37947: LD_INT 16
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: LIST
37954: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
37955: LD_VAR 0 6
37959: PPUSH
37960: CALL_OW 264
37964: PUSH
37965: LD_INT 6
37967: PUSH
37968: LD_INT 46
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: IN
37975: IFFALSE 37996
// points := [ 32 , 120 , 70 ] ;
37977: LD_ADDR_VAR 0 9
37981: PUSH
37982: LD_INT 32
37984: PUSH
37985: LD_INT 120
37987: PUSH
37988: LD_INT 70
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: LIST
37995: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
37996: LD_VAR 0 6
38000: PPUSH
38001: CALL_OW 264
38005: PUSH
38006: LD_INT 7
38008: PUSH
38009: LD_INT 28
38011: PUSH
38012: LD_INT 45
38014: PUSH
38015: LD_EXP 26
38019: PUSH
38020: EMPTY
38021: LIST
38022: LIST
38023: LIST
38024: LIST
38025: IN
38026: IFFALSE 38047
// points := [ 35 , 20 , 45 ] ;
38028: LD_ADDR_VAR 0 9
38032: PUSH
38033: LD_INT 35
38035: PUSH
38036: LD_INT 20
38038: PUSH
38039: LD_INT 45
38041: PUSH
38042: EMPTY
38043: LIST
38044: LIST
38045: LIST
38046: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
38047: LD_VAR 0 6
38051: PPUSH
38052: CALL_OW 264
38056: PUSH
38057: LD_INT 47
38059: PUSH
38060: EMPTY
38061: LIST
38062: IN
38063: IFFALSE 38084
// points := [ 67 , 45 , 75 ] ;
38065: LD_ADDR_VAR 0 9
38069: PUSH
38070: LD_INT 67
38072: PUSH
38073: LD_INT 45
38075: PUSH
38076: LD_INT 75
38078: PUSH
38079: EMPTY
38080: LIST
38081: LIST
38082: LIST
38083: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
38084: LD_VAR 0 6
38088: PPUSH
38089: CALL_OW 264
38093: PUSH
38094: LD_INT 26
38096: PUSH
38097: EMPTY
38098: LIST
38099: IN
38100: IFFALSE 38121
// points := [ 120 , 30 , 80 ] ;
38102: LD_ADDR_VAR 0 9
38106: PUSH
38107: LD_INT 120
38109: PUSH
38110: LD_INT 30
38112: PUSH
38113: LD_INT 80
38115: PUSH
38116: EMPTY
38117: LIST
38118: LIST
38119: LIST
38120: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
38121: LD_VAR 0 6
38125: PPUSH
38126: CALL_OW 264
38130: PUSH
38131: LD_INT 22
38133: PUSH
38134: EMPTY
38135: LIST
38136: IN
38137: IFFALSE 38158
// points := [ 40 , 1 , 1 ] ;
38139: LD_ADDR_VAR 0 9
38143: PUSH
38144: LD_INT 40
38146: PUSH
38147: LD_INT 1
38149: PUSH
38150: LD_INT 1
38152: PUSH
38153: EMPTY
38154: LIST
38155: LIST
38156: LIST
38157: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38158: LD_VAR 0 6
38162: PPUSH
38163: CALL_OW 264
38167: PUSH
38168: LD_INT 29
38170: PUSH
38171: EMPTY
38172: LIST
38173: IN
38174: IFFALSE 38195
// points := [ 70 , 200 , 400 ] ;
38176: LD_ADDR_VAR 0 9
38180: PUSH
38181: LD_INT 70
38183: PUSH
38184: LD_INT 200
38186: PUSH
38187: LD_INT 400
38189: PUSH
38190: EMPTY
38191: LIST
38192: LIST
38193: LIST
38194: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38195: LD_VAR 0 6
38199: PPUSH
38200: CALL_OW 264
38204: PUSH
38205: LD_INT 14
38207: PUSH
38208: LD_INT 53
38210: PUSH
38211: EMPTY
38212: LIST
38213: LIST
38214: IN
38215: IFFALSE 38236
// points := [ 40 , 10 , 20 ] ;
38217: LD_ADDR_VAR 0 9
38221: PUSH
38222: LD_INT 40
38224: PUSH
38225: LD_INT 10
38227: PUSH
38228: LD_INT 20
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: LIST
38235: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38236: LD_VAR 0 6
38240: PPUSH
38241: CALL_OW 264
38245: PUSH
38246: LD_INT 9
38248: PUSH
38249: EMPTY
38250: LIST
38251: IN
38252: IFFALSE 38273
// points := [ 5 , 70 , 20 ] ;
38254: LD_ADDR_VAR 0 9
38258: PUSH
38259: LD_INT 5
38261: PUSH
38262: LD_INT 70
38264: PUSH
38265: LD_INT 20
38267: PUSH
38268: EMPTY
38269: LIST
38270: LIST
38271: LIST
38272: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38273: LD_VAR 0 6
38277: PPUSH
38278: CALL_OW 264
38282: PUSH
38283: LD_INT 10
38285: PUSH
38286: EMPTY
38287: LIST
38288: IN
38289: IFFALSE 38310
// points := [ 35 , 110 , 70 ] ;
38291: LD_ADDR_VAR 0 9
38295: PUSH
38296: LD_INT 35
38298: PUSH
38299: LD_INT 110
38301: PUSH
38302: LD_INT 70
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: LIST
38309: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38310: LD_VAR 0 6
38314: PPUSH
38315: CALL_OW 265
38319: PUSH
38320: LD_INT 25
38322: EQUAL
38323: IFFALSE 38344
// points := [ 80 , 65 , 100 ] ;
38325: LD_ADDR_VAR 0 9
38329: PUSH
38330: LD_INT 80
38332: PUSH
38333: LD_INT 65
38335: PUSH
38336: LD_INT 100
38338: PUSH
38339: EMPTY
38340: LIST
38341: LIST
38342: LIST
38343: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38344: LD_VAR 0 6
38348: PPUSH
38349: CALL_OW 263
38353: PUSH
38354: LD_INT 1
38356: EQUAL
38357: IFFALSE 38392
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38359: LD_ADDR_VAR 0 10
38363: PUSH
38364: LD_VAR 0 10
38368: PUSH
38369: LD_VAR 0 6
38373: PPUSH
38374: CALL_OW 311
38378: PPUSH
38379: LD_INT 3
38381: PPUSH
38382: CALL_OW 259
38386: PUSH
38387: LD_INT 4
38389: MUL
38390: MUL
38391: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38392: LD_VAR 0 6
38396: PPUSH
38397: CALL_OW 263
38401: PUSH
38402: LD_INT 2
38404: EQUAL
38405: IFFALSE 38456
// begin j := IsControledBy ( i ) ;
38407: LD_ADDR_VAR 0 7
38411: PUSH
38412: LD_VAR 0 6
38416: PPUSH
38417: CALL_OW 312
38421: ST_TO_ADDR
// if j then
38422: LD_VAR 0 7
38426: IFFALSE 38456
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38428: LD_ADDR_VAR 0 10
38432: PUSH
38433: LD_VAR 0 10
38437: PUSH
38438: LD_VAR 0 7
38442: PPUSH
38443: LD_INT 3
38445: PPUSH
38446: CALL_OW 259
38450: PUSH
38451: LD_INT 3
38453: MUL
38454: MUL
38455: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38456: LD_VAR 0 6
38460: PPUSH
38461: CALL_OW 264
38465: PUSH
38466: LD_INT 5
38468: PUSH
38469: LD_INT 6
38471: PUSH
38472: LD_INT 46
38474: PUSH
38475: LD_INT 44
38477: PUSH
38478: LD_INT 47
38480: PUSH
38481: LD_INT 45
38483: PUSH
38484: LD_INT 28
38486: PUSH
38487: LD_INT 7
38489: PUSH
38490: LD_INT 27
38492: PUSH
38493: LD_INT 29
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: LIST
38500: LIST
38501: LIST
38502: LIST
38503: LIST
38504: LIST
38505: LIST
38506: LIST
38507: IN
38508: PUSH
38509: LD_VAR 0 1
38513: PPUSH
38514: LD_INT 52
38516: PPUSH
38517: CALL_OW 321
38521: PUSH
38522: LD_INT 2
38524: EQUAL
38525: AND
38526: IFFALSE 38543
// bpoints := bpoints * 1.2 ;
38528: LD_ADDR_VAR 0 10
38532: PUSH
38533: LD_VAR 0 10
38537: PUSH
38538: LD_REAL  1.20000000000000E+0000
38541: MUL
38542: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38543: LD_VAR 0 6
38547: PPUSH
38548: CALL_OW 264
38552: PUSH
38553: LD_INT 6
38555: PUSH
38556: LD_INT 46
38558: PUSH
38559: LD_INT 47
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: LIST
38566: IN
38567: IFFALSE 38584
// bpoints := bpoints * 1.2 ;
38569: LD_ADDR_VAR 0 10
38573: PUSH
38574: LD_VAR 0 10
38578: PUSH
38579: LD_REAL  1.20000000000000E+0000
38582: MUL
38583: ST_TO_ADDR
// end ; unit_building :
38584: GO 38598
38586: LD_INT 3
38588: DOUBLE
38589: EQUAL
38590: IFTRUE 38594
38592: GO 38597
38594: POP
// ; end ;
38595: GO 38598
38597: POP
// for j = 1 to 3 do
38598: LD_ADDR_VAR 0 7
38602: PUSH
38603: DOUBLE
38604: LD_INT 1
38606: DEC
38607: ST_TO_ADDR
38608: LD_INT 3
38610: PUSH
38611: FOR_TO
38612: IFFALSE 38665
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38614: LD_ADDR_VAR 0 5
38618: PUSH
38619: LD_VAR 0 5
38623: PPUSH
38624: LD_VAR 0 7
38628: PPUSH
38629: LD_VAR 0 5
38633: PUSH
38634: LD_VAR 0 7
38638: ARRAY
38639: PUSH
38640: LD_VAR 0 9
38644: PUSH
38645: LD_VAR 0 7
38649: ARRAY
38650: PUSH
38651: LD_VAR 0 10
38655: MUL
38656: PLUS
38657: PPUSH
38658: CALL_OW 1
38662: ST_TO_ADDR
38663: GO 38611
38665: POP
38666: POP
// end ;
38667: GO 37144
38669: POP
38670: POP
// result := Replace ( result , 4 , tmp ) ;
38671: LD_ADDR_VAR 0 5
38675: PUSH
38676: LD_VAR 0 5
38680: PPUSH
38681: LD_INT 4
38683: PPUSH
38684: LD_VAR 0 8
38688: PPUSH
38689: CALL_OW 1
38693: ST_TO_ADDR
// end ;
38694: LD_VAR 0 5
38698: RET
// export function DangerAtRange ( unit , range ) ; begin
38699: LD_INT 0
38701: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38702: LD_ADDR_VAR 0 3
38706: PUSH
38707: LD_VAR 0 1
38711: PPUSH
38712: CALL_OW 255
38716: PPUSH
38717: LD_VAR 0 1
38721: PPUSH
38722: CALL_OW 250
38726: PPUSH
38727: LD_VAR 0 1
38731: PPUSH
38732: CALL_OW 251
38736: PPUSH
38737: LD_VAR 0 2
38741: PPUSH
38742: CALL 36996 0 4
38746: ST_TO_ADDR
// end ;
38747: LD_VAR 0 3
38751: RET
// export function DangerInArea ( side , area ) ; begin
38752: LD_INT 0
38754: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38755: LD_ADDR_VAR 0 3
38759: PUSH
38760: LD_VAR 0 2
38764: PPUSH
38765: LD_INT 81
38767: PUSH
38768: LD_VAR 0 1
38772: PUSH
38773: EMPTY
38774: LIST
38775: LIST
38776: PPUSH
38777: CALL_OW 70
38781: ST_TO_ADDR
// end ;
38782: LD_VAR 0 3
38786: RET
// export function IsExtension ( b ) ; begin
38787: LD_INT 0
38789: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38790: LD_ADDR_VAR 0 2
38794: PUSH
38795: LD_VAR 0 1
38799: PUSH
38800: LD_INT 23
38802: PUSH
38803: LD_INT 20
38805: PUSH
38806: LD_INT 22
38808: PUSH
38809: LD_INT 17
38811: PUSH
38812: LD_INT 24
38814: PUSH
38815: LD_INT 21
38817: PUSH
38818: LD_INT 19
38820: PUSH
38821: LD_INT 16
38823: PUSH
38824: LD_INT 25
38826: PUSH
38827: LD_INT 18
38829: PUSH
38830: EMPTY
38831: LIST
38832: LIST
38833: LIST
38834: LIST
38835: LIST
38836: LIST
38837: LIST
38838: LIST
38839: LIST
38840: LIST
38841: IN
38842: ST_TO_ADDR
// end ;
38843: LD_VAR 0 2
38847: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38848: LD_INT 0
38850: PPUSH
38851: PPUSH
38852: PPUSH
// result := [ ] ;
38853: LD_ADDR_VAR 0 4
38857: PUSH
38858: EMPTY
38859: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38860: LD_ADDR_VAR 0 5
38864: PUSH
38865: LD_VAR 0 2
38869: PPUSH
38870: LD_INT 21
38872: PUSH
38873: LD_INT 3
38875: PUSH
38876: EMPTY
38877: LIST
38878: LIST
38879: PPUSH
38880: CALL_OW 70
38884: ST_TO_ADDR
// if not tmp then
38885: LD_VAR 0 5
38889: NOT
38890: IFFALSE 38894
// exit ;
38892: GO 38958
// if checkLink then
38894: LD_VAR 0 3
38898: IFFALSE 38948
// begin for i in tmp do
38900: LD_ADDR_VAR 0 6
38904: PUSH
38905: LD_VAR 0 5
38909: PUSH
38910: FOR_IN
38911: IFFALSE 38946
// if GetBase ( i ) <> base then
38913: LD_VAR 0 6
38917: PPUSH
38918: CALL_OW 274
38922: PUSH
38923: LD_VAR 0 1
38927: NONEQUAL
38928: IFFALSE 38944
// ComLinkToBase ( base , i ) ;
38930: LD_VAR 0 1
38934: PPUSH
38935: LD_VAR 0 6
38939: PPUSH
38940: CALL_OW 169
38944: GO 38910
38946: POP
38947: POP
// end ; result := tmp ;
38948: LD_ADDR_VAR 0 4
38952: PUSH
38953: LD_VAR 0 5
38957: ST_TO_ADDR
// end ;
38958: LD_VAR 0 4
38962: RET
// export function ComComplete ( units , b ) ; var i ; begin
38963: LD_INT 0
38965: PPUSH
38966: PPUSH
// if not units then
38967: LD_VAR 0 1
38971: NOT
38972: IFFALSE 38976
// exit ;
38974: GO 39066
// for i in units do
38976: LD_ADDR_VAR 0 4
38980: PUSH
38981: LD_VAR 0 1
38985: PUSH
38986: FOR_IN
38987: IFFALSE 39064
// if BuildingStatus ( b ) = bs_build then
38989: LD_VAR 0 2
38993: PPUSH
38994: CALL_OW 461
38998: PUSH
38999: LD_INT 1
39001: EQUAL
39002: IFFALSE 39062
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
39004: LD_VAR 0 4
39008: PPUSH
39009: LD_STRING h
39011: PUSH
39012: LD_VAR 0 2
39016: PPUSH
39017: CALL_OW 250
39021: PUSH
39022: LD_VAR 0 2
39026: PPUSH
39027: CALL_OW 251
39031: PUSH
39032: LD_VAR 0 2
39036: PUSH
39037: LD_INT 0
39039: PUSH
39040: LD_INT 0
39042: PUSH
39043: LD_INT 0
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: LIST
39050: LIST
39051: LIST
39052: LIST
39053: LIST
39054: PUSH
39055: EMPTY
39056: LIST
39057: PPUSH
39058: CALL_OW 446
39062: GO 38986
39064: POP
39065: POP
// end ;
39066: LD_VAR 0 3
39070: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
39071: LD_INT 0
39073: PPUSH
39074: PPUSH
39075: PPUSH
39076: PPUSH
39077: PPUSH
39078: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
39079: LD_VAR 0 1
39083: NOT
39084: PUSH
39085: LD_VAR 0 1
39089: PPUSH
39090: CALL_OW 263
39094: PUSH
39095: LD_INT 2
39097: NONEQUAL
39098: OR
39099: IFFALSE 39103
// exit ;
39101: GO 39419
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
39103: LD_ADDR_VAR 0 6
39107: PUSH
39108: LD_INT 22
39110: PUSH
39111: LD_VAR 0 1
39115: PPUSH
39116: CALL_OW 255
39120: PUSH
39121: EMPTY
39122: LIST
39123: LIST
39124: PUSH
39125: LD_INT 2
39127: PUSH
39128: LD_INT 30
39130: PUSH
39131: LD_INT 36
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: PUSH
39138: LD_INT 34
39140: PUSH
39141: LD_INT 31
39143: PUSH
39144: EMPTY
39145: LIST
39146: LIST
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: LIST
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: PPUSH
39157: CALL_OW 69
39161: ST_TO_ADDR
// if not tmp then
39162: LD_VAR 0 6
39166: NOT
39167: IFFALSE 39171
// exit ;
39169: GO 39419
// result := [ ] ;
39171: LD_ADDR_VAR 0 2
39175: PUSH
39176: EMPTY
39177: ST_TO_ADDR
// for i in tmp do
39178: LD_ADDR_VAR 0 3
39182: PUSH
39183: LD_VAR 0 6
39187: PUSH
39188: FOR_IN
39189: IFFALSE 39260
// begin t := UnitsInside ( i ) ;
39191: LD_ADDR_VAR 0 4
39195: PUSH
39196: LD_VAR 0 3
39200: PPUSH
39201: CALL_OW 313
39205: ST_TO_ADDR
// if t then
39206: LD_VAR 0 4
39210: IFFALSE 39258
// for j in t do
39212: LD_ADDR_VAR 0 7
39216: PUSH
39217: LD_VAR 0 4
39221: PUSH
39222: FOR_IN
39223: IFFALSE 39256
// result := Replace ( result , result + 1 , j ) ;
39225: LD_ADDR_VAR 0 2
39229: PUSH
39230: LD_VAR 0 2
39234: PPUSH
39235: LD_VAR 0 2
39239: PUSH
39240: LD_INT 1
39242: PLUS
39243: PPUSH
39244: LD_VAR 0 7
39248: PPUSH
39249: CALL_OW 1
39253: ST_TO_ADDR
39254: GO 39222
39256: POP
39257: POP
// end ;
39258: GO 39188
39260: POP
39261: POP
// if not result then
39262: LD_VAR 0 2
39266: NOT
39267: IFFALSE 39271
// exit ;
39269: GO 39419
// mech := result [ 1 ] ;
39271: LD_ADDR_VAR 0 5
39275: PUSH
39276: LD_VAR 0 2
39280: PUSH
39281: LD_INT 1
39283: ARRAY
39284: ST_TO_ADDR
// if result > 1 then
39285: LD_VAR 0 2
39289: PUSH
39290: LD_INT 1
39292: GREATER
39293: IFFALSE 39405
// begin for i = 2 to result do
39295: LD_ADDR_VAR 0 3
39299: PUSH
39300: DOUBLE
39301: LD_INT 2
39303: DEC
39304: ST_TO_ADDR
39305: LD_VAR 0 2
39309: PUSH
39310: FOR_TO
39311: IFFALSE 39403
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39313: LD_ADDR_VAR 0 4
39317: PUSH
39318: LD_VAR 0 2
39322: PUSH
39323: LD_VAR 0 3
39327: ARRAY
39328: PPUSH
39329: LD_INT 3
39331: PPUSH
39332: CALL_OW 259
39336: PUSH
39337: LD_VAR 0 2
39341: PUSH
39342: LD_VAR 0 3
39346: ARRAY
39347: PPUSH
39348: CALL_OW 432
39352: MINUS
39353: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39354: LD_VAR 0 4
39358: PUSH
39359: LD_VAR 0 5
39363: PPUSH
39364: LD_INT 3
39366: PPUSH
39367: CALL_OW 259
39371: PUSH
39372: LD_VAR 0 5
39376: PPUSH
39377: CALL_OW 432
39381: MINUS
39382: GREATEREQUAL
39383: IFFALSE 39401
// mech := result [ i ] ;
39385: LD_ADDR_VAR 0 5
39389: PUSH
39390: LD_VAR 0 2
39394: PUSH
39395: LD_VAR 0 3
39399: ARRAY
39400: ST_TO_ADDR
// end ;
39401: GO 39310
39403: POP
39404: POP
// end ; ComLinkTo ( vehicle , mech ) ;
39405: LD_VAR 0 1
39409: PPUSH
39410: LD_VAR 0 5
39414: PPUSH
39415: CALL_OW 135
// end ;
39419: LD_VAR 0 2
39423: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39424: LD_INT 0
39426: PPUSH
39427: PPUSH
39428: PPUSH
39429: PPUSH
39430: PPUSH
39431: PPUSH
39432: PPUSH
39433: PPUSH
39434: PPUSH
39435: PPUSH
39436: PPUSH
39437: PPUSH
39438: PPUSH
// result := [ ] ;
39439: LD_ADDR_VAR 0 7
39443: PUSH
39444: EMPTY
39445: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39446: LD_VAR 0 1
39450: PPUSH
39451: CALL_OW 266
39455: PUSH
39456: LD_INT 0
39458: PUSH
39459: LD_INT 1
39461: PUSH
39462: EMPTY
39463: LIST
39464: LIST
39465: IN
39466: NOT
39467: IFFALSE 39471
// exit ;
39469: GO 41105
// if name then
39471: LD_VAR 0 3
39475: IFFALSE 39491
// SetBName ( base_dep , name ) ;
39477: LD_VAR 0 1
39481: PPUSH
39482: LD_VAR 0 3
39486: PPUSH
39487: CALL_OW 500
// base := GetBase ( base_dep ) ;
39491: LD_ADDR_VAR 0 15
39495: PUSH
39496: LD_VAR 0 1
39500: PPUSH
39501: CALL_OW 274
39505: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39506: LD_ADDR_VAR 0 16
39510: PUSH
39511: LD_VAR 0 1
39515: PPUSH
39516: CALL_OW 255
39520: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39521: LD_ADDR_VAR 0 17
39525: PUSH
39526: LD_VAR 0 1
39530: PPUSH
39531: CALL_OW 248
39535: ST_TO_ADDR
// if sources then
39536: LD_VAR 0 5
39540: IFFALSE 39587
// for i = 1 to 3 do
39542: LD_ADDR_VAR 0 8
39546: PUSH
39547: DOUBLE
39548: LD_INT 1
39550: DEC
39551: ST_TO_ADDR
39552: LD_INT 3
39554: PUSH
39555: FOR_TO
39556: IFFALSE 39585
// AddResourceType ( base , i , sources [ i ] ) ;
39558: LD_VAR 0 15
39562: PPUSH
39563: LD_VAR 0 8
39567: PPUSH
39568: LD_VAR 0 5
39572: PUSH
39573: LD_VAR 0 8
39577: ARRAY
39578: PPUSH
39579: CALL_OW 276
39583: GO 39555
39585: POP
39586: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39587: LD_ADDR_VAR 0 18
39591: PUSH
39592: LD_VAR 0 15
39596: PPUSH
39597: LD_VAR 0 2
39601: PPUSH
39602: LD_INT 1
39604: PPUSH
39605: CALL 38848 0 3
39609: ST_TO_ADDR
// InitHc ;
39610: CALL_OW 19
// InitUc ;
39614: CALL_OW 18
// uc_side := side ;
39618: LD_ADDR_OWVAR 20
39622: PUSH
39623: LD_VAR 0 16
39627: ST_TO_ADDR
// uc_nation := nation ;
39628: LD_ADDR_OWVAR 21
39632: PUSH
39633: LD_VAR 0 17
39637: ST_TO_ADDR
// if buildings then
39638: LD_VAR 0 18
39642: IFFALSE 40964
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39644: LD_ADDR_VAR 0 19
39648: PUSH
39649: LD_VAR 0 18
39653: PPUSH
39654: LD_INT 2
39656: PUSH
39657: LD_INT 30
39659: PUSH
39660: LD_INT 29
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 30
39669: PUSH
39670: LD_INT 30
39672: PUSH
39673: EMPTY
39674: LIST
39675: LIST
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: LIST
39681: PPUSH
39682: CALL_OW 72
39686: ST_TO_ADDR
// if tmp then
39687: LD_VAR 0 19
39691: IFFALSE 39739
// for i in tmp do
39693: LD_ADDR_VAR 0 8
39697: PUSH
39698: LD_VAR 0 19
39702: PUSH
39703: FOR_IN
39704: IFFALSE 39737
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39706: LD_VAR 0 8
39710: PPUSH
39711: CALL_OW 250
39715: PPUSH
39716: LD_VAR 0 8
39720: PPUSH
39721: CALL_OW 251
39725: PPUSH
39726: LD_VAR 0 16
39730: PPUSH
39731: CALL_OW 441
39735: GO 39703
39737: POP
39738: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39739: LD_VAR 0 18
39743: PPUSH
39744: LD_INT 2
39746: PUSH
39747: LD_INT 30
39749: PUSH
39750: LD_INT 32
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: PUSH
39757: LD_INT 30
39759: PUSH
39760: LD_INT 33
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: LIST
39771: PPUSH
39772: CALL_OW 72
39776: IFFALSE 39864
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39778: LD_ADDR_VAR 0 8
39782: PUSH
39783: LD_VAR 0 18
39787: PPUSH
39788: LD_INT 2
39790: PUSH
39791: LD_INT 30
39793: PUSH
39794: LD_INT 32
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: PUSH
39801: LD_INT 30
39803: PUSH
39804: LD_INT 33
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: PUSH
39811: EMPTY
39812: LIST
39813: LIST
39814: LIST
39815: PPUSH
39816: CALL_OW 72
39820: PUSH
39821: FOR_IN
39822: IFFALSE 39862
// begin if not GetBWeapon ( i ) then
39824: LD_VAR 0 8
39828: PPUSH
39829: CALL_OW 269
39833: NOT
39834: IFFALSE 39860
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39836: LD_VAR 0 8
39840: PPUSH
39841: LD_VAR 0 8
39845: PPUSH
39846: LD_VAR 0 2
39850: PPUSH
39851: CALL 41110 0 2
39855: PPUSH
39856: CALL_OW 431
// end ;
39860: GO 39821
39862: POP
39863: POP
// end ; for i = 1 to personel do
39864: LD_ADDR_VAR 0 8
39868: PUSH
39869: DOUBLE
39870: LD_INT 1
39872: DEC
39873: ST_TO_ADDR
39874: LD_VAR 0 6
39878: PUSH
39879: FOR_TO
39880: IFFALSE 40944
// begin if i > 4 then
39882: LD_VAR 0 8
39886: PUSH
39887: LD_INT 4
39889: GREATER
39890: IFFALSE 39894
// break ;
39892: GO 40944
// case i of 1 :
39894: LD_VAR 0 8
39898: PUSH
39899: LD_INT 1
39901: DOUBLE
39902: EQUAL
39903: IFTRUE 39907
39905: GO 39987
39907: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39908: LD_ADDR_VAR 0 12
39912: PUSH
39913: LD_VAR 0 18
39917: PPUSH
39918: LD_INT 22
39920: PUSH
39921: LD_VAR 0 16
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: PUSH
39930: LD_INT 58
39932: PUSH
39933: EMPTY
39934: LIST
39935: PUSH
39936: LD_INT 2
39938: PUSH
39939: LD_INT 30
39941: PUSH
39942: LD_INT 32
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: PUSH
39949: LD_INT 30
39951: PUSH
39952: LD_INT 4
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: PUSH
39959: LD_INT 30
39961: PUSH
39962: LD_INT 5
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: LIST
39973: LIST
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: LIST
39979: PPUSH
39980: CALL_OW 72
39984: ST_TO_ADDR
39985: GO 40209
39987: LD_INT 2
39989: DOUBLE
39990: EQUAL
39991: IFTRUE 39995
39993: GO 40057
39995: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
39996: LD_ADDR_VAR 0 12
40000: PUSH
40001: LD_VAR 0 18
40005: PPUSH
40006: LD_INT 22
40008: PUSH
40009: LD_VAR 0 16
40013: PUSH
40014: EMPTY
40015: LIST
40016: LIST
40017: PUSH
40018: LD_INT 2
40020: PUSH
40021: LD_INT 30
40023: PUSH
40024: LD_INT 0
40026: PUSH
40027: EMPTY
40028: LIST
40029: LIST
40030: PUSH
40031: LD_INT 30
40033: PUSH
40034: LD_INT 1
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: LIST
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: PPUSH
40050: CALL_OW 72
40054: ST_TO_ADDR
40055: GO 40209
40057: LD_INT 3
40059: DOUBLE
40060: EQUAL
40061: IFTRUE 40065
40063: GO 40127
40065: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
40066: LD_ADDR_VAR 0 12
40070: PUSH
40071: LD_VAR 0 18
40075: PPUSH
40076: LD_INT 22
40078: PUSH
40079: LD_VAR 0 16
40083: PUSH
40084: EMPTY
40085: LIST
40086: LIST
40087: PUSH
40088: LD_INT 2
40090: PUSH
40091: LD_INT 30
40093: PUSH
40094: LD_INT 2
40096: PUSH
40097: EMPTY
40098: LIST
40099: LIST
40100: PUSH
40101: LD_INT 30
40103: PUSH
40104: LD_INT 3
40106: PUSH
40107: EMPTY
40108: LIST
40109: LIST
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: LIST
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PPUSH
40120: CALL_OW 72
40124: ST_TO_ADDR
40125: GO 40209
40127: LD_INT 4
40129: DOUBLE
40130: EQUAL
40131: IFTRUE 40135
40133: GO 40208
40135: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
40136: LD_ADDR_VAR 0 12
40140: PUSH
40141: LD_VAR 0 18
40145: PPUSH
40146: LD_INT 22
40148: PUSH
40149: LD_VAR 0 16
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: PUSH
40158: LD_INT 2
40160: PUSH
40161: LD_INT 30
40163: PUSH
40164: LD_INT 6
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: PUSH
40171: LD_INT 30
40173: PUSH
40174: LD_INT 7
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: PUSH
40181: LD_INT 30
40183: PUSH
40184: LD_INT 8
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: PUSH
40191: EMPTY
40192: LIST
40193: LIST
40194: LIST
40195: LIST
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: PPUSH
40201: CALL_OW 72
40205: ST_TO_ADDR
40206: GO 40209
40208: POP
// if i = 1 then
40209: LD_VAR 0 8
40213: PUSH
40214: LD_INT 1
40216: EQUAL
40217: IFFALSE 40328
// begin tmp := [ ] ;
40219: LD_ADDR_VAR 0 19
40223: PUSH
40224: EMPTY
40225: ST_TO_ADDR
// for j in f do
40226: LD_ADDR_VAR 0 9
40230: PUSH
40231: LD_VAR 0 12
40235: PUSH
40236: FOR_IN
40237: IFFALSE 40310
// if GetBType ( j ) = b_bunker then
40239: LD_VAR 0 9
40243: PPUSH
40244: CALL_OW 266
40248: PUSH
40249: LD_INT 32
40251: EQUAL
40252: IFFALSE 40279
// tmp := Insert ( tmp , 1 , j ) else
40254: LD_ADDR_VAR 0 19
40258: PUSH
40259: LD_VAR 0 19
40263: PPUSH
40264: LD_INT 1
40266: PPUSH
40267: LD_VAR 0 9
40271: PPUSH
40272: CALL_OW 2
40276: ST_TO_ADDR
40277: GO 40308
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40279: LD_ADDR_VAR 0 19
40283: PUSH
40284: LD_VAR 0 19
40288: PPUSH
40289: LD_VAR 0 19
40293: PUSH
40294: LD_INT 1
40296: PLUS
40297: PPUSH
40298: LD_VAR 0 9
40302: PPUSH
40303: CALL_OW 2
40307: ST_TO_ADDR
40308: GO 40236
40310: POP
40311: POP
// if tmp then
40312: LD_VAR 0 19
40316: IFFALSE 40328
// f := tmp ;
40318: LD_ADDR_VAR 0 12
40322: PUSH
40323: LD_VAR 0 19
40327: ST_TO_ADDR
// end ; x := personel [ i ] ;
40328: LD_ADDR_VAR 0 13
40332: PUSH
40333: LD_VAR 0 6
40337: PUSH
40338: LD_VAR 0 8
40342: ARRAY
40343: ST_TO_ADDR
// if x = - 1 then
40344: LD_VAR 0 13
40348: PUSH
40349: LD_INT 1
40351: NEG
40352: EQUAL
40353: IFFALSE 40562
// begin for j in f do
40355: LD_ADDR_VAR 0 9
40359: PUSH
40360: LD_VAR 0 12
40364: PUSH
40365: FOR_IN
40366: IFFALSE 40558
// repeat InitHc ;
40368: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40372: LD_VAR 0 9
40376: PPUSH
40377: CALL_OW 266
40381: PUSH
40382: LD_INT 5
40384: EQUAL
40385: IFFALSE 40455
// begin if UnitsInside ( j ) < 3 then
40387: LD_VAR 0 9
40391: PPUSH
40392: CALL_OW 313
40396: PUSH
40397: LD_INT 3
40399: LESS
40400: IFFALSE 40436
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40402: LD_INT 0
40404: PPUSH
40405: LD_INT 5
40407: PUSH
40408: LD_INT 8
40410: PUSH
40411: LD_INT 9
40413: PUSH
40414: EMPTY
40415: LIST
40416: LIST
40417: LIST
40418: PUSH
40419: LD_VAR 0 17
40423: ARRAY
40424: PPUSH
40425: LD_VAR 0 4
40429: PPUSH
40430: CALL_OW 380
40434: GO 40453
// PrepareHuman ( false , i , skill ) ;
40436: LD_INT 0
40438: PPUSH
40439: LD_VAR 0 8
40443: PPUSH
40444: LD_VAR 0 4
40448: PPUSH
40449: CALL_OW 380
// end else
40453: GO 40472
// PrepareHuman ( false , i , skill ) ;
40455: LD_INT 0
40457: PPUSH
40458: LD_VAR 0 8
40462: PPUSH
40463: LD_VAR 0 4
40467: PPUSH
40468: CALL_OW 380
// un := CreateHuman ;
40472: LD_ADDR_VAR 0 14
40476: PUSH
40477: CALL_OW 44
40481: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40482: LD_ADDR_VAR 0 7
40486: PUSH
40487: LD_VAR 0 7
40491: PPUSH
40492: LD_INT 1
40494: PPUSH
40495: LD_VAR 0 14
40499: PPUSH
40500: CALL_OW 2
40504: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40505: LD_VAR 0 14
40509: PPUSH
40510: LD_VAR 0 9
40514: PPUSH
40515: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40519: LD_VAR 0 9
40523: PPUSH
40524: CALL_OW 313
40528: PUSH
40529: LD_INT 6
40531: EQUAL
40532: PUSH
40533: LD_VAR 0 9
40537: PPUSH
40538: CALL_OW 266
40542: PUSH
40543: LD_INT 32
40545: PUSH
40546: LD_INT 31
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: IN
40553: OR
40554: IFFALSE 40368
40556: GO 40365
40558: POP
40559: POP
// end else
40560: GO 40942
// for j = 1 to x do
40562: LD_ADDR_VAR 0 9
40566: PUSH
40567: DOUBLE
40568: LD_INT 1
40570: DEC
40571: ST_TO_ADDR
40572: LD_VAR 0 13
40576: PUSH
40577: FOR_TO
40578: IFFALSE 40940
// begin InitHc ;
40580: CALL_OW 19
// if not f then
40584: LD_VAR 0 12
40588: NOT
40589: IFFALSE 40678
// begin PrepareHuman ( false , i , skill ) ;
40591: LD_INT 0
40593: PPUSH
40594: LD_VAR 0 8
40598: PPUSH
40599: LD_VAR 0 4
40603: PPUSH
40604: CALL_OW 380
// un := CreateHuman ;
40608: LD_ADDR_VAR 0 14
40612: PUSH
40613: CALL_OW 44
40617: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40618: LD_ADDR_VAR 0 7
40622: PUSH
40623: LD_VAR 0 7
40627: PPUSH
40628: LD_INT 1
40630: PPUSH
40631: LD_VAR 0 14
40635: PPUSH
40636: CALL_OW 2
40640: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40641: LD_VAR 0 14
40645: PPUSH
40646: LD_VAR 0 1
40650: PPUSH
40651: CALL_OW 250
40655: PPUSH
40656: LD_VAR 0 1
40660: PPUSH
40661: CALL_OW 251
40665: PPUSH
40666: LD_INT 10
40668: PPUSH
40669: LD_INT 0
40671: PPUSH
40672: CALL_OW 50
// continue ;
40676: GO 40577
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40678: LD_VAR 0 12
40682: PUSH
40683: LD_INT 1
40685: ARRAY
40686: PPUSH
40687: CALL_OW 313
40691: PUSH
40692: LD_VAR 0 12
40696: PUSH
40697: LD_INT 1
40699: ARRAY
40700: PPUSH
40701: CALL_OW 266
40705: PUSH
40706: LD_INT 32
40708: PUSH
40709: LD_INT 31
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: IN
40716: AND
40717: PUSH
40718: LD_VAR 0 12
40722: PUSH
40723: LD_INT 1
40725: ARRAY
40726: PPUSH
40727: CALL_OW 313
40731: PUSH
40732: LD_INT 6
40734: EQUAL
40735: OR
40736: IFFALSE 40756
// f := Delete ( f , 1 ) ;
40738: LD_ADDR_VAR 0 12
40742: PUSH
40743: LD_VAR 0 12
40747: PPUSH
40748: LD_INT 1
40750: PPUSH
40751: CALL_OW 3
40755: ST_TO_ADDR
// if not f then
40756: LD_VAR 0 12
40760: NOT
40761: IFFALSE 40779
// begin x := x + 2 ;
40763: LD_ADDR_VAR 0 13
40767: PUSH
40768: LD_VAR 0 13
40772: PUSH
40773: LD_INT 2
40775: PLUS
40776: ST_TO_ADDR
// continue ;
40777: GO 40577
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40779: LD_VAR 0 12
40783: PUSH
40784: LD_INT 1
40786: ARRAY
40787: PPUSH
40788: CALL_OW 266
40792: PUSH
40793: LD_INT 5
40795: EQUAL
40796: IFFALSE 40870
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40798: LD_VAR 0 12
40802: PUSH
40803: LD_INT 1
40805: ARRAY
40806: PPUSH
40807: CALL_OW 313
40811: PUSH
40812: LD_INT 3
40814: LESS
40815: IFFALSE 40851
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40817: LD_INT 0
40819: PPUSH
40820: LD_INT 5
40822: PUSH
40823: LD_INT 8
40825: PUSH
40826: LD_INT 9
40828: PUSH
40829: EMPTY
40830: LIST
40831: LIST
40832: LIST
40833: PUSH
40834: LD_VAR 0 17
40838: ARRAY
40839: PPUSH
40840: LD_VAR 0 4
40844: PPUSH
40845: CALL_OW 380
40849: GO 40868
// PrepareHuman ( false , i , skill ) ;
40851: LD_INT 0
40853: PPUSH
40854: LD_VAR 0 8
40858: PPUSH
40859: LD_VAR 0 4
40863: PPUSH
40864: CALL_OW 380
// end else
40868: GO 40887
// PrepareHuman ( false , i , skill ) ;
40870: LD_INT 0
40872: PPUSH
40873: LD_VAR 0 8
40877: PPUSH
40878: LD_VAR 0 4
40882: PPUSH
40883: CALL_OW 380
// un := CreateHuman ;
40887: LD_ADDR_VAR 0 14
40891: PUSH
40892: CALL_OW 44
40896: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40897: LD_ADDR_VAR 0 7
40901: PUSH
40902: LD_VAR 0 7
40906: PPUSH
40907: LD_INT 1
40909: PPUSH
40910: LD_VAR 0 14
40914: PPUSH
40915: CALL_OW 2
40919: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40920: LD_VAR 0 14
40924: PPUSH
40925: LD_VAR 0 12
40929: PUSH
40930: LD_INT 1
40932: ARRAY
40933: PPUSH
40934: CALL_OW 52
// end ;
40938: GO 40577
40940: POP
40941: POP
// end ;
40942: GO 39879
40944: POP
40945: POP
// result := result ^ buildings ;
40946: LD_ADDR_VAR 0 7
40950: PUSH
40951: LD_VAR 0 7
40955: PUSH
40956: LD_VAR 0 18
40960: ADD
40961: ST_TO_ADDR
// end else
40962: GO 41105
// begin for i = 1 to personel do
40964: LD_ADDR_VAR 0 8
40968: PUSH
40969: DOUBLE
40970: LD_INT 1
40972: DEC
40973: ST_TO_ADDR
40974: LD_VAR 0 6
40978: PUSH
40979: FOR_TO
40980: IFFALSE 41103
// begin if i > 4 then
40982: LD_VAR 0 8
40986: PUSH
40987: LD_INT 4
40989: GREATER
40990: IFFALSE 40994
// break ;
40992: GO 41103
// x := personel [ i ] ;
40994: LD_ADDR_VAR 0 13
40998: PUSH
40999: LD_VAR 0 6
41003: PUSH
41004: LD_VAR 0 8
41008: ARRAY
41009: ST_TO_ADDR
// if x = - 1 then
41010: LD_VAR 0 13
41014: PUSH
41015: LD_INT 1
41017: NEG
41018: EQUAL
41019: IFFALSE 41023
// continue ;
41021: GO 40979
// PrepareHuman ( false , i , skill ) ;
41023: LD_INT 0
41025: PPUSH
41026: LD_VAR 0 8
41030: PPUSH
41031: LD_VAR 0 4
41035: PPUSH
41036: CALL_OW 380
// un := CreateHuman ;
41040: LD_ADDR_VAR 0 14
41044: PUSH
41045: CALL_OW 44
41049: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41050: LD_VAR 0 14
41054: PPUSH
41055: LD_VAR 0 1
41059: PPUSH
41060: CALL_OW 250
41064: PPUSH
41065: LD_VAR 0 1
41069: PPUSH
41070: CALL_OW 251
41074: PPUSH
41075: LD_INT 10
41077: PPUSH
41078: LD_INT 0
41080: PPUSH
41081: CALL_OW 50
// result := result ^ un ;
41085: LD_ADDR_VAR 0 7
41089: PUSH
41090: LD_VAR 0 7
41094: PUSH
41095: LD_VAR 0 14
41099: ADD
41100: ST_TO_ADDR
// end ;
41101: GO 40979
41103: POP
41104: POP
// end ; end ;
41105: LD_VAR 0 7
41109: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
41110: LD_INT 0
41112: PPUSH
41113: PPUSH
41114: PPUSH
41115: PPUSH
41116: PPUSH
41117: PPUSH
41118: PPUSH
41119: PPUSH
41120: PPUSH
41121: PPUSH
41122: PPUSH
41123: PPUSH
41124: PPUSH
41125: PPUSH
41126: PPUSH
41127: PPUSH
// result := false ;
41128: LD_ADDR_VAR 0 3
41132: PUSH
41133: LD_INT 0
41135: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
41136: LD_VAR 0 1
41140: NOT
41141: PUSH
41142: LD_VAR 0 1
41146: PPUSH
41147: CALL_OW 266
41151: PUSH
41152: LD_INT 32
41154: PUSH
41155: LD_INT 33
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: IN
41162: NOT
41163: OR
41164: IFFALSE 41168
// exit ;
41166: GO 42277
// nat := GetNation ( tower ) ;
41168: LD_ADDR_VAR 0 12
41172: PUSH
41173: LD_VAR 0 1
41177: PPUSH
41178: CALL_OW 248
41182: ST_TO_ADDR
// side := GetSide ( tower ) ;
41183: LD_ADDR_VAR 0 16
41187: PUSH
41188: LD_VAR 0 1
41192: PPUSH
41193: CALL_OW 255
41197: ST_TO_ADDR
// x := GetX ( tower ) ;
41198: LD_ADDR_VAR 0 10
41202: PUSH
41203: LD_VAR 0 1
41207: PPUSH
41208: CALL_OW 250
41212: ST_TO_ADDR
// y := GetY ( tower ) ;
41213: LD_ADDR_VAR 0 11
41217: PUSH
41218: LD_VAR 0 1
41222: PPUSH
41223: CALL_OW 251
41227: ST_TO_ADDR
// if not x or not y then
41228: LD_VAR 0 10
41232: NOT
41233: PUSH
41234: LD_VAR 0 11
41238: NOT
41239: OR
41240: IFFALSE 41244
// exit ;
41242: GO 42277
// weapon := 0 ;
41244: LD_ADDR_VAR 0 18
41248: PUSH
41249: LD_INT 0
41251: ST_TO_ADDR
// fac_list := [ ] ;
41252: LD_ADDR_VAR 0 17
41256: PUSH
41257: EMPTY
41258: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
41259: LD_ADDR_VAR 0 6
41263: PUSH
41264: LD_VAR 0 1
41268: PPUSH
41269: CALL_OW 274
41273: PPUSH
41274: LD_VAR 0 2
41278: PPUSH
41279: LD_INT 0
41281: PPUSH
41282: CALL 38848 0 3
41286: PPUSH
41287: LD_INT 30
41289: PUSH
41290: LD_INT 3
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PPUSH
41297: CALL_OW 72
41301: ST_TO_ADDR
// if not factories then
41302: LD_VAR 0 6
41306: NOT
41307: IFFALSE 41311
// exit ;
41309: GO 42277
// for i in factories do
41311: LD_ADDR_VAR 0 8
41315: PUSH
41316: LD_VAR 0 6
41320: PUSH
41321: FOR_IN
41322: IFFALSE 41347
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41324: LD_ADDR_VAR 0 17
41328: PUSH
41329: LD_VAR 0 17
41333: PUSH
41334: LD_VAR 0 8
41338: PPUSH
41339: CALL_OW 478
41343: UNION
41344: ST_TO_ADDR
41345: GO 41321
41347: POP
41348: POP
// if not fac_list then
41349: LD_VAR 0 17
41353: NOT
41354: IFFALSE 41358
// exit ;
41356: GO 42277
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41358: LD_ADDR_VAR 0 5
41362: PUSH
41363: LD_INT 4
41365: PUSH
41366: LD_INT 5
41368: PUSH
41369: LD_INT 9
41371: PUSH
41372: LD_INT 10
41374: PUSH
41375: LD_INT 6
41377: PUSH
41378: LD_INT 7
41380: PUSH
41381: LD_INT 11
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: LIST
41388: LIST
41389: LIST
41390: LIST
41391: LIST
41392: PUSH
41393: LD_INT 27
41395: PUSH
41396: LD_INT 28
41398: PUSH
41399: LD_INT 26
41401: PUSH
41402: LD_INT 30
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: PUSH
41411: LD_INT 43
41413: PUSH
41414: LD_INT 44
41416: PUSH
41417: LD_INT 46
41419: PUSH
41420: LD_INT 45
41422: PUSH
41423: LD_INT 47
41425: PUSH
41426: LD_INT 49
41428: PUSH
41429: EMPTY
41430: LIST
41431: LIST
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: LIST
41441: PUSH
41442: LD_VAR 0 12
41446: ARRAY
41447: ST_TO_ADDR
// list := list isect fac_list ;
41448: LD_ADDR_VAR 0 5
41452: PUSH
41453: LD_VAR 0 5
41457: PUSH
41458: LD_VAR 0 17
41462: ISECT
41463: ST_TO_ADDR
// if not list then
41464: LD_VAR 0 5
41468: NOT
41469: IFFALSE 41473
// exit ;
41471: GO 42277
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41473: LD_VAR 0 12
41477: PUSH
41478: LD_INT 3
41480: EQUAL
41481: PUSH
41482: LD_INT 49
41484: PUSH
41485: LD_VAR 0 5
41489: IN
41490: AND
41491: PUSH
41492: LD_INT 31
41494: PPUSH
41495: LD_VAR 0 16
41499: PPUSH
41500: CALL_OW 321
41504: PUSH
41505: LD_INT 2
41507: EQUAL
41508: AND
41509: IFFALSE 41569
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41511: LD_INT 22
41513: PUSH
41514: LD_VAR 0 16
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: PUSH
41523: LD_INT 35
41525: PUSH
41526: LD_INT 49
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: PUSH
41533: LD_INT 91
41535: PUSH
41536: LD_VAR 0 1
41540: PUSH
41541: LD_INT 10
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: LIST
41548: PUSH
41549: EMPTY
41550: LIST
41551: LIST
41552: LIST
41553: PPUSH
41554: CALL_OW 69
41558: NOT
41559: IFFALSE 41569
// weapon := ru_time_lapser ;
41561: LD_ADDR_VAR 0 18
41565: PUSH
41566: LD_INT 49
41568: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41569: LD_VAR 0 12
41573: PUSH
41574: LD_INT 1
41576: PUSH
41577: LD_INT 2
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: IN
41584: PUSH
41585: LD_INT 11
41587: PUSH
41588: LD_VAR 0 5
41592: IN
41593: PUSH
41594: LD_INT 30
41596: PUSH
41597: LD_VAR 0 5
41601: IN
41602: OR
41603: AND
41604: PUSH
41605: LD_INT 6
41607: PPUSH
41608: LD_VAR 0 16
41612: PPUSH
41613: CALL_OW 321
41617: PUSH
41618: LD_INT 2
41620: EQUAL
41621: AND
41622: IFFALSE 41787
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41624: LD_INT 22
41626: PUSH
41627: LD_VAR 0 16
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PUSH
41636: LD_INT 2
41638: PUSH
41639: LD_INT 35
41641: PUSH
41642: LD_INT 11
41644: PUSH
41645: EMPTY
41646: LIST
41647: LIST
41648: PUSH
41649: LD_INT 35
41651: PUSH
41652: LD_INT 30
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: PUSH
41659: EMPTY
41660: LIST
41661: LIST
41662: LIST
41663: PUSH
41664: LD_INT 91
41666: PUSH
41667: LD_VAR 0 1
41671: PUSH
41672: LD_INT 18
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: LIST
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: LIST
41684: PPUSH
41685: CALL_OW 69
41689: NOT
41690: PUSH
41691: LD_INT 22
41693: PUSH
41694: LD_VAR 0 16
41698: PUSH
41699: EMPTY
41700: LIST
41701: LIST
41702: PUSH
41703: LD_INT 2
41705: PUSH
41706: LD_INT 30
41708: PUSH
41709: LD_INT 32
41711: PUSH
41712: EMPTY
41713: LIST
41714: LIST
41715: PUSH
41716: LD_INT 30
41718: PUSH
41719: LD_INT 33
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: LIST
41730: PUSH
41731: LD_INT 91
41733: PUSH
41734: LD_VAR 0 1
41738: PUSH
41739: LD_INT 12
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: LIST
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: LIST
41751: PUSH
41752: EMPTY
41753: LIST
41754: PPUSH
41755: CALL_OW 69
41759: PUSH
41760: LD_INT 2
41762: GREATER
41763: AND
41764: IFFALSE 41787
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41766: LD_ADDR_VAR 0 18
41770: PUSH
41771: LD_INT 11
41773: PUSH
41774: LD_INT 30
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: LD_VAR 0 12
41785: ARRAY
41786: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41787: LD_VAR 0 18
41791: NOT
41792: PUSH
41793: LD_INT 40
41795: PPUSH
41796: LD_VAR 0 16
41800: PPUSH
41801: CALL_OW 321
41805: PUSH
41806: LD_INT 2
41808: EQUAL
41809: AND
41810: PUSH
41811: LD_INT 7
41813: PUSH
41814: LD_VAR 0 5
41818: IN
41819: PUSH
41820: LD_INT 28
41822: PUSH
41823: LD_VAR 0 5
41827: IN
41828: OR
41829: PUSH
41830: LD_INT 45
41832: PUSH
41833: LD_VAR 0 5
41837: IN
41838: OR
41839: AND
41840: IFFALSE 42094
// begin hex := GetHexInfo ( x , y ) ;
41842: LD_ADDR_VAR 0 4
41846: PUSH
41847: LD_VAR 0 10
41851: PPUSH
41852: LD_VAR 0 11
41856: PPUSH
41857: CALL_OW 546
41861: ST_TO_ADDR
// if hex [ 1 ] then
41862: LD_VAR 0 4
41866: PUSH
41867: LD_INT 1
41869: ARRAY
41870: IFFALSE 41874
// exit ;
41872: GO 42277
// height := hex [ 2 ] ;
41874: LD_ADDR_VAR 0 15
41878: PUSH
41879: LD_VAR 0 4
41883: PUSH
41884: LD_INT 2
41886: ARRAY
41887: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41888: LD_ADDR_VAR 0 14
41892: PUSH
41893: LD_INT 0
41895: PUSH
41896: LD_INT 2
41898: PUSH
41899: LD_INT 3
41901: PUSH
41902: LD_INT 5
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: LIST
41909: LIST
41910: ST_TO_ADDR
// for i in tmp do
41911: LD_ADDR_VAR 0 8
41915: PUSH
41916: LD_VAR 0 14
41920: PUSH
41921: FOR_IN
41922: IFFALSE 42092
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41924: LD_ADDR_VAR 0 9
41928: PUSH
41929: LD_VAR 0 10
41933: PPUSH
41934: LD_VAR 0 8
41938: PPUSH
41939: LD_INT 5
41941: PPUSH
41942: CALL_OW 272
41946: PUSH
41947: LD_VAR 0 11
41951: PPUSH
41952: LD_VAR 0 8
41956: PPUSH
41957: LD_INT 5
41959: PPUSH
41960: CALL_OW 273
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
41969: LD_VAR 0 9
41973: PUSH
41974: LD_INT 1
41976: ARRAY
41977: PPUSH
41978: LD_VAR 0 9
41982: PUSH
41983: LD_INT 2
41985: ARRAY
41986: PPUSH
41987: CALL_OW 488
41991: IFFALSE 42090
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
41993: LD_ADDR_VAR 0 4
41997: PUSH
41998: LD_VAR 0 9
42002: PUSH
42003: LD_INT 1
42005: ARRAY
42006: PPUSH
42007: LD_VAR 0 9
42011: PUSH
42012: LD_INT 2
42014: ARRAY
42015: PPUSH
42016: CALL_OW 546
42020: ST_TO_ADDR
// if hex [ 1 ] then
42021: LD_VAR 0 4
42025: PUSH
42026: LD_INT 1
42028: ARRAY
42029: IFFALSE 42033
// continue ;
42031: GO 41921
// h := hex [ 2 ] ;
42033: LD_ADDR_VAR 0 13
42037: PUSH
42038: LD_VAR 0 4
42042: PUSH
42043: LD_INT 2
42045: ARRAY
42046: ST_TO_ADDR
// if h + 7 < height then
42047: LD_VAR 0 13
42051: PUSH
42052: LD_INT 7
42054: PLUS
42055: PUSH
42056: LD_VAR 0 15
42060: LESS
42061: IFFALSE 42090
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
42063: LD_ADDR_VAR 0 18
42067: PUSH
42068: LD_INT 7
42070: PUSH
42071: LD_INT 28
42073: PUSH
42074: LD_INT 45
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: LIST
42081: PUSH
42082: LD_VAR 0 12
42086: ARRAY
42087: ST_TO_ADDR
// break ;
42088: GO 42092
// end ; end ; end ;
42090: GO 41921
42092: POP
42093: POP
// end ; if not weapon then
42094: LD_VAR 0 18
42098: NOT
42099: IFFALSE 42159
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
42101: LD_ADDR_VAR 0 5
42105: PUSH
42106: LD_VAR 0 5
42110: PUSH
42111: LD_INT 11
42113: PUSH
42114: LD_INT 30
42116: PUSH
42117: LD_INT 49
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: LIST
42124: DIFF
42125: ST_TO_ADDR
// if not list then
42126: LD_VAR 0 5
42130: NOT
42131: IFFALSE 42135
// exit ;
42133: GO 42277
// weapon := list [ rand ( 1 , list ) ] ;
42135: LD_ADDR_VAR 0 18
42139: PUSH
42140: LD_VAR 0 5
42144: PUSH
42145: LD_INT 1
42147: PPUSH
42148: LD_VAR 0 5
42152: PPUSH
42153: CALL_OW 12
42157: ARRAY
42158: ST_TO_ADDR
// end ; if weapon then
42159: LD_VAR 0 18
42163: IFFALSE 42277
// begin tmp := CostOfWeapon ( weapon ) ;
42165: LD_ADDR_VAR 0 14
42169: PUSH
42170: LD_VAR 0 18
42174: PPUSH
42175: CALL_OW 451
42179: ST_TO_ADDR
// j := GetBase ( tower ) ;
42180: LD_ADDR_VAR 0 9
42184: PUSH
42185: LD_VAR 0 1
42189: PPUSH
42190: CALL_OW 274
42194: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42195: LD_VAR 0 9
42199: PPUSH
42200: LD_INT 1
42202: PPUSH
42203: CALL_OW 275
42207: PUSH
42208: LD_VAR 0 14
42212: PUSH
42213: LD_INT 1
42215: ARRAY
42216: GREATEREQUAL
42217: PUSH
42218: LD_VAR 0 9
42222: PPUSH
42223: LD_INT 2
42225: PPUSH
42226: CALL_OW 275
42230: PUSH
42231: LD_VAR 0 14
42235: PUSH
42236: LD_INT 2
42238: ARRAY
42239: GREATEREQUAL
42240: AND
42241: PUSH
42242: LD_VAR 0 9
42246: PPUSH
42247: LD_INT 3
42249: PPUSH
42250: CALL_OW 275
42254: PUSH
42255: LD_VAR 0 14
42259: PUSH
42260: LD_INT 3
42262: ARRAY
42263: GREATEREQUAL
42264: AND
42265: IFFALSE 42277
// result := weapon ;
42267: LD_ADDR_VAR 0 3
42271: PUSH
42272: LD_VAR 0 18
42276: ST_TO_ADDR
// end ; end ;
42277: LD_VAR 0 3
42281: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42282: LD_INT 0
42284: PPUSH
42285: PPUSH
// result := true ;
42286: LD_ADDR_VAR 0 3
42290: PUSH
42291: LD_INT 1
42293: ST_TO_ADDR
// if array1 = array2 then
42294: LD_VAR 0 1
42298: PUSH
42299: LD_VAR 0 2
42303: EQUAL
42304: IFFALSE 42364
// begin for i = 1 to array1 do
42306: LD_ADDR_VAR 0 4
42310: PUSH
42311: DOUBLE
42312: LD_INT 1
42314: DEC
42315: ST_TO_ADDR
42316: LD_VAR 0 1
42320: PUSH
42321: FOR_TO
42322: IFFALSE 42360
// if array1 [ i ] <> array2 [ i ] then
42324: LD_VAR 0 1
42328: PUSH
42329: LD_VAR 0 4
42333: ARRAY
42334: PUSH
42335: LD_VAR 0 2
42339: PUSH
42340: LD_VAR 0 4
42344: ARRAY
42345: NONEQUAL
42346: IFFALSE 42358
// begin result := false ;
42348: LD_ADDR_VAR 0 3
42352: PUSH
42353: LD_INT 0
42355: ST_TO_ADDR
// break ;
42356: GO 42360
// end ;
42358: GO 42321
42360: POP
42361: POP
// end else
42362: GO 42372
// result := false ;
42364: LD_ADDR_VAR 0 3
42368: PUSH
42369: LD_INT 0
42371: ST_TO_ADDR
// end ;
42372: LD_VAR 0 3
42376: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
42377: LD_INT 0
42379: PPUSH
42380: PPUSH
// if not array1 or not array2 then
42381: LD_VAR 0 1
42385: NOT
42386: PUSH
42387: LD_VAR 0 2
42391: NOT
42392: OR
42393: IFFALSE 42397
// exit ;
42395: GO 42461
// result := true ;
42397: LD_ADDR_VAR 0 3
42401: PUSH
42402: LD_INT 1
42404: ST_TO_ADDR
// for i = 1 to array1 do
42405: LD_ADDR_VAR 0 4
42409: PUSH
42410: DOUBLE
42411: LD_INT 1
42413: DEC
42414: ST_TO_ADDR
42415: LD_VAR 0 1
42419: PUSH
42420: FOR_TO
42421: IFFALSE 42459
// if array1 [ i ] <> array2 [ i ] then
42423: LD_VAR 0 1
42427: PUSH
42428: LD_VAR 0 4
42432: ARRAY
42433: PUSH
42434: LD_VAR 0 2
42438: PUSH
42439: LD_VAR 0 4
42443: ARRAY
42444: NONEQUAL
42445: IFFALSE 42457
// begin result := false ;
42447: LD_ADDR_VAR 0 3
42451: PUSH
42452: LD_INT 0
42454: ST_TO_ADDR
// break ;
42455: GO 42459
// end ;
42457: GO 42420
42459: POP
42460: POP
// end ;
42461: LD_VAR 0 3
42465: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42466: LD_INT 0
42468: PPUSH
42469: PPUSH
42470: PPUSH
// pom := GetBase ( fac ) ;
42471: LD_ADDR_VAR 0 5
42475: PUSH
42476: LD_VAR 0 1
42480: PPUSH
42481: CALL_OW 274
42485: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42486: LD_ADDR_VAR 0 4
42490: PUSH
42491: LD_VAR 0 2
42495: PUSH
42496: LD_INT 1
42498: ARRAY
42499: PPUSH
42500: LD_VAR 0 2
42504: PUSH
42505: LD_INT 2
42507: ARRAY
42508: PPUSH
42509: LD_VAR 0 2
42513: PUSH
42514: LD_INT 3
42516: ARRAY
42517: PPUSH
42518: LD_VAR 0 2
42522: PUSH
42523: LD_INT 4
42525: ARRAY
42526: PPUSH
42527: CALL_OW 449
42531: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42532: LD_ADDR_VAR 0 3
42536: PUSH
42537: LD_VAR 0 5
42541: PPUSH
42542: LD_INT 1
42544: PPUSH
42545: CALL_OW 275
42549: PUSH
42550: LD_VAR 0 4
42554: PUSH
42555: LD_INT 1
42557: ARRAY
42558: GREATEREQUAL
42559: PUSH
42560: LD_VAR 0 5
42564: PPUSH
42565: LD_INT 2
42567: PPUSH
42568: CALL_OW 275
42572: PUSH
42573: LD_VAR 0 4
42577: PUSH
42578: LD_INT 2
42580: ARRAY
42581: GREATEREQUAL
42582: AND
42583: PUSH
42584: LD_VAR 0 5
42588: PPUSH
42589: LD_INT 3
42591: PPUSH
42592: CALL_OW 275
42596: PUSH
42597: LD_VAR 0 4
42601: PUSH
42602: LD_INT 3
42604: ARRAY
42605: GREATEREQUAL
42606: AND
42607: ST_TO_ADDR
// end ;
42608: LD_VAR 0 3
42612: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42613: LD_INT 0
42615: PPUSH
42616: PPUSH
42617: PPUSH
42618: PPUSH
// pom := GetBase ( building ) ;
42619: LD_ADDR_VAR 0 3
42623: PUSH
42624: LD_VAR 0 1
42628: PPUSH
42629: CALL_OW 274
42633: ST_TO_ADDR
// if not pom then
42634: LD_VAR 0 3
42638: NOT
42639: IFFALSE 42643
// exit ;
42641: GO 42813
// btype := GetBType ( building ) ;
42643: LD_ADDR_VAR 0 5
42647: PUSH
42648: LD_VAR 0 1
42652: PPUSH
42653: CALL_OW 266
42657: ST_TO_ADDR
// if btype = b_armoury then
42658: LD_VAR 0 5
42662: PUSH
42663: LD_INT 4
42665: EQUAL
42666: IFFALSE 42676
// btype := b_barracks ;
42668: LD_ADDR_VAR 0 5
42672: PUSH
42673: LD_INT 5
42675: ST_TO_ADDR
// if btype = b_depot then
42676: LD_VAR 0 5
42680: PUSH
42681: LD_INT 0
42683: EQUAL
42684: IFFALSE 42694
// btype := b_warehouse ;
42686: LD_ADDR_VAR 0 5
42690: PUSH
42691: LD_INT 1
42693: ST_TO_ADDR
// if btype = b_workshop then
42694: LD_VAR 0 5
42698: PUSH
42699: LD_INT 2
42701: EQUAL
42702: IFFALSE 42712
// btype := b_factory ;
42704: LD_ADDR_VAR 0 5
42708: PUSH
42709: LD_INT 3
42711: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42712: LD_ADDR_VAR 0 4
42716: PUSH
42717: LD_VAR 0 5
42721: PPUSH
42722: LD_VAR 0 1
42726: PPUSH
42727: CALL_OW 248
42731: PPUSH
42732: CALL_OW 450
42736: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42737: LD_ADDR_VAR 0 2
42741: PUSH
42742: LD_VAR 0 3
42746: PPUSH
42747: LD_INT 1
42749: PPUSH
42750: CALL_OW 275
42754: PUSH
42755: LD_VAR 0 4
42759: PUSH
42760: LD_INT 1
42762: ARRAY
42763: GREATEREQUAL
42764: PUSH
42765: LD_VAR 0 3
42769: PPUSH
42770: LD_INT 2
42772: PPUSH
42773: CALL_OW 275
42777: PUSH
42778: LD_VAR 0 4
42782: PUSH
42783: LD_INT 2
42785: ARRAY
42786: GREATEREQUAL
42787: AND
42788: PUSH
42789: LD_VAR 0 3
42793: PPUSH
42794: LD_INT 3
42796: PPUSH
42797: CALL_OW 275
42801: PUSH
42802: LD_VAR 0 4
42806: PUSH
42807: LD_INT 3
42809: ARRAY
42810: GREATEREQUAL
42811: AND
42812: ST_TO_ADDR
// end ;
42813: LD_VAR 0 2
42817: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42818: LD_INT 0
42820: PPUSH
42821: PPUSH
42822: PPUSH
// pom := GetBase ( building ) ;
42823: LD_ADDR_VAR 0 4
42827: PUSH
42828: LD_VAR 0 1
42832: PPUSH
42833: CALL_OW 274
42837: ST_TO_ADDR
// if not pom then
42838: LD_VAR 0 4
42842: NOT
42843: IFFALSE 42847
// exit ;
42845: GO 42948
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42847: LD_ADDR_VAR 0 5
42851: PUSH
42852: LD_VAR 0 2
42856: PPUSH
42857: LD_VAR 0 1
42861: PPUSH
42862: CALL_OW 248
42866: PPUSH
42867: CALL_OW 450
42871: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42872: LD_ADDR_VAR 0 3
42876: PUSH
42877: LD_VAR 0 4
42881: PPUSH
42882: LD_INT 1
42884: PPUSH
42885: CALL_OW 275
42889: PUSH
42890: LD_VAR 0 5
42894: PUSH
42895: LD_INT 1
42897: ARRAY
42898: GREATEREQUAL
42899: PUSH
42900: LD_VAR 0 4
42904: PPUSH
42905: LD_INT 2
42907: PPUSH
42908: CALL_OW 275
42912: PUSH
42913: LD_VAR 0 5
42917: PUSH
42918: LD_INT 2
42920: ARRAY
42921: GREATEREQUAL
42922: AND
42923: PUSH
42924: LD_VAR 0 4
42928: PPUSH
42929: LD_INT 3
42931: PPUSH
42932: CALL_OW 275
42936: PUSH
42937: LD_VAR 0 5
42941: PUSH
42942: LD_INT 3
42944: ARRAY
42945: GREATEREQUAL
42946: AND
42947: ST_TO_ADDR
// end ;
42948: LD_VAR 0 3
42952: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
42953: LD_INT 0
42955: PPUSH
42956: PPUSH
42957: PPUSH
42958: PPUSH
42959: PPUSH
42960: PPUSH
42961: PPUSH
42962: PPUSH
42963: PPUSH
42964: PPUSH
42965: PPUSH
// result := false ;
42966: LD_ADDR_VAR 0 8
42970: PUSH
42971: LD_INT 0
42973: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
42974: LD_VAR 0 5
42978: NOT
42979: PUSH
42980: LD_VAR 0 1
42984: NOT
42985: OR
42986: PUSH
42987: LD_VAR 0 2
42991: NOT
42992: OR
42993: PUSH
42994: LD_VAR 0 3
42998: NOT
42999: OR
43000: IFFALSE 43004
// exit ;
43002: GO 43818
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
43004: LD_ADDR_VAR 0 14
43008: PUSH
43009: LD_VAR 0 1
43013: PPUSH
43014: LD_VAR 0 2
43018: PPUSH
43019: LD_VAR 0 3
43023: PPUSH
43024: LD_VAR 0 4
43028: PPUSH
43029: LD_VAR 0 5
43033: PUSH
43034: LD_INT 1
43036: ARRAY
43037: PPUSH
43038: CALL_OW 248
43042: PPUSH
43043: LD_INT 0
43045: PPUSH
43046: CALL 45055 0 6
43050: ST_TO_ADDR
// if not hexes then
43051: LD_VAR 0 14
43055: NOT
43056: IFFALSE 43060
// exit ;
43058: GO 43818
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43060: LD_ADDR_VAR 0 17
43064: PUSH
43065: LD_VAR 0 5
43069: PPUSH
43070: LD_INT 22
43072: PUSH
43073: LD_VAR 0 13
43077: PPUSH
43078: CALL_OW 255
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: PUSH
43087: LD_INT 2
43089: PUSH
43090: LD_INT 30
43092: PUSH
43093: LD_INT 0
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PUSH
43100: LD_INT 30
43102: PUSH
43103: LD_INT 1
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: LIST
43114: PUSH
43115: EMPTY
43116: LIST
43117: LIST
43118: PPUSH
43119: CALL_OW 72
43123: ST_TO_ADDR
// for i = 1 to hexes do
43124: LD_ADDR_VAR 0 9
43128: PUSH
43129: DOUBLE
43130: LD_INT 1
43132: DEC
43133: ST_TO_ADDR
43134: LD_VAR 0 14
43138: PUSH
43139: FOR_TO
43140: IFFALSE 43816
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43142: LD_ADDR_VAR 0 13
43146: PUSH
43147: LD_VAR 0 14
43151: PUSH
43152: LD_VAR 0 9
43156: ARRAY
43157: PUSH
43158: LD_INT 1
43160: ARRAY
43161: PPUSH
43162: LD_VAR 0 14
43166: PUSH
43167: LD_VAR 0 9
43171: ARRAY
43172: PUSH
43173: LD_INT 2
43175: ARRAY
43176: PPUSH
43177: CALL_OW 428
43181: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
43182: LD_VAR 0 14
43186: PUSH
43187: LD_VAR 0 9
43191: ARRAY
43192: PUSH
43193: LD_INT 1
43195: ARRAY
43196: PPUSH
43197: LD_VAR 0 14
43201: PUSH
43202: LD_VAR 0 9
43206: ARRAY
43207: PUSH
43208: LD_INT 2
43210: ARRAY
43211: PPUSH
43212: CALL_OW 351
43216: PUSH
43217: LD_VAR 0 14
43221: PUSH
43222: LD_VAR 0 9
43226: ARRAY
43227: PUSH
43228: LD_INT 1
43230: ARRAY
43231: PPUSH
43232: LD_VAR 0 14
43236: PUSH
43237: LD_VAR 0 9
43241: ARRAY
43242: PUSH
43243: LD_INT 2
43245: ARRAY
43246: PPUSH
43247: CALL_OW 488
43251: NOT
43252: OR
43253: PUSH
43254: LD_VAR 0 13
43258: PPUSH
43259: CALL_OW 247
43263: PUSH
43264: LD_INT 3
43266: EQUAL
43267: OR
43268: IFFALSE 43274
// exit ;
43270: POP
43271: POP
43272: GO 43818
// if not tmp then
43274: LD_VAR 0 13
43278: NOT
43279: IFFALSE 43283
// continue ;
43281: GO 43139
// result := true ;
43283: LD_ADDR_VAR 0 8
43287: PUSH
43288: LD_INT 1
43290: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
43291: LD_VAR 0 6
43295: PUSH
43296: LD_VAR 0 13
43300: PPUSH
43301: CALL_OW 247
43305: PUSH
43306: LD_INT 2
43308: EQUAL
43309: AND
43310: PUSH
43311: LD_VAR 0 13
43315: PPUSH
43316: CALL_OW 263
43320: PUSH
43321: LD_INT 1
43323: EQUAL
43324: AND
43325: IFFALSE 43489
// begin if IsDrivenBy ( tmp ) then
43327: LD_VAR 0 13
43331: PPUSH
43332: CALL_OW 311
43336: IFFALSE 43340
// continue ;
43338: GO 43139
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
43340: LD_VAR 0 6
43344: PPUSH
43345: LD_INT 3
43347: PUSH
43348: LD_INT 60
43350: PUSH
43351: EMPTY
43352: LIST
43353: PUSH
43354: EMPTY
43355: LIST
43356: LIST
43357: PUSH
43358: LD_INT 3
43360: PUSH
43361: LD_INT 55
43363: PUSH
43364: EMPTY
43365: LIST
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: PPUSH
43375: CALL_OW 72
43379: IFFALSE 43487
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43381: LD_ADDR_VAR 0 18
43385: PUSH
43386: LD_VAR 0 6
43390: PPUSH
43391: LD_INT 3
43393: PUSH
43394: LD_INT 60
43396: PUSH
43397: EMPTY
43398: LIST
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: PUSH
43404: LD_INT 3
43406: PUSH
43407: LD_INT 55
43409: PUSH
43410: EMPTY
43411: LIST
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PPUSH
43421: CALL_OW 72
43425: PUSH
43426: LD_INT 1
43428: ARRAY
43429: ST_TO_ADDR
// if IsInUnit ( driver ) then
43430: LD_VAR 0 18
43434: PPUSH
43435: CALL_OW 310
43439: IFFALSE 43450
// ComExit ( driver ) ;
43441: LD_VAR 0 18
43445: PPUSH
43446: CALL 68239 0 1
// AddComEnterUnit ( driver , tmp ) ;
43450: LD_VAR 0 18
43454: PPUSH
43455: LD_VAR 0 13
43459: PPUSH
43460: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
43464: LD_VAR 0 18
43468: PPUSH
43469: LD_VAR 0 7
43473: PPUSH
43474: CALL_OW 173
// AddComExitVehicle ( driver ) ;
43478: LD_VAR 0 18
43482: PPUSH
43483: CALL_OW 181
// end ; continue ;
43487: GO 43139
// end ; if not cleaners or not tmp in cleaners then
43489: LD_VAR 0 6
43493: NOT
43494: PUSH
43495: LD_VAR 0 13
43499: PUSH
43500: LD_VAR 0 6
43504: IN
43505: NOT
43506: OR
43507: IFFALSE 43814
// begin if dep then
43509: LD_VAR 0 17
43513: IFFALSE 43649
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43515: LD_ADDR_VAR 0 16
43519: PUSH
43520: LD_VAR 0 17
43524: PUSH
43525: LD_INT 1
43527: ARRAY
43528: PPUSH
43529: CALL_OW 250
43533: PPUSH
43534: LD_VAR 0 17
43538: PUSH
43539: LD_INT 1
43541: ARRAY
43542: PPUSH
43543: CALL_OW 254
43547: PPUSH
43548: LD_INT 5
43550: PPUSH
43551: CALL_OW 272
43555: PUSH
43556: LD_VAR 0 17
43560: PUSH
43561: LD_INT 1
43563: ARRAY
43564: PPUSH
43565: CALL_OW 251
43569: PPUSH
43570: LD_VAR 0 17
43574: PUSH
43575: LD_INT 1
43577: ARRAY
43578: PPUSH
43579: CALL_OW 254
43583: PPUSH
43584: LD_INT 5
43586: PPUSH
43587: CALL_OW 273
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43596: LD_VAR 0 16
43600: PUSH
43601: LD_INT 1
43603: ARRAY
43604: PPUSH
43605: LD_VAR 0 16
43609: PUSH
43610: LD_INT 2
43612: ARRAY
43613: PPUSH
43614: CALL_OW 488
43618: IFFALSE 43649
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43620: LD_VAR 0 13
43624: PPUSH
43625: LD_VAR 0 16
43629: PUSH
43630: LD_INT 1
43632: ARRAY
43633: PPUSH
43634: LD_VAR 0 16
43638: PUSH
43639: LD_INT 2
43641: ARRAY
43642: PPUSH
43643: CALL_OW 111
// continue ;
43647: GO 43139
// end ; end ; r := GetDir ( tmp ) ;
43649: LD_ADDR_VAR 0 15
43653: PUSH
43654: LD_VAR 0 13
43658: PPUSH
43659: CALL_OW 254
43663: ST_TO_ADDR
// if r = 5 then
43664: LD_VAR 0 15
43668: PUSH
43669: LD_INT 5
43671: EQUAL
43672: IFFALSE 43682
// r := 0 ;
43674: LD_ADDR_VAR 0 15
43678: PUSH
43679: LD_INT 0
43681: ST_TO_ADDR
// for j = r to 5 do
43682: LD_ADDR_VAR 0 10
43686: PUSH
43687: DOUBLE
43688: LD_VAR 0 15
43692: DEC
43693: ST_TO_ADDR
43694: LD_INT 5
43696: PUSH
43697: FOR_TO
43698: IFFALSE 43812
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43700: LD_ADDR_VAR 0 11
43704: PUSH
43705: LD_VAR 0 13
43709: PPUSH
43710: CALL_OW 250
43714: PPUSH
43715: LD_VAR 0 10
43719: PPUSH
43720: LD_INT 2
43722: PPUSH
43723: CALL_OW 272
43727: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43728: LD_ADDR_VAR 0 12
43732: PUSH
43733: LD_VAR 0 13
43737: PPUSH
43738: CALL_OW 251
43742: PPUSH
43743: LD_VAR 0 10
43747: PPUSH
43748: LD_INT 2
43750: PPUSH
43751: CALL_OW 273
43755: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43756: LD_VAR 0 11
43760: PPUSH
43761: LD_VAR 0 12
43765: PPUSH
43766: CALL_OW 488
43770: PUSH
43771: LD_VAR 0 11
43775: PPUSH
43776: LD_VAR 0 12
43780: PPUSH
43781: CALL_OW 428
43785: NOT
43786: AND
43787: IFFALSE 43810
// begin ComMoveXY ( tmp , _x , _y ) ;
43789: LD_VAR 0 13
43793: PPUSH
43794: LD_VAR 0 11
43798: PPUSH
43799: LD_VAR 0 12
43803: PPUSH
43804: CALL_OW 111
// break ;
43808: GO 43812
// end ; end ;
43810: GO 43697
43812: POP
43813: POP
// end ; end ;
43814: GO 43139
43816: POP
43817: POP
// end ;
43818: LD_VAR 0 8
43822: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43823: LD_INT 0
43825: PPUSH
// result := true ;
43826: LD_ADDR_VAR 0 3
43830: PUSH
43831: LD_INT 1
43833: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43834: LD_VAR 0 2
43838: PUSH
43839: LD_INT 24
43841: DOUBLE
43842: EQUAL
43843: IFTRUE 43853
43845: LD_INT 33
43847: DOUBLE
43848: EQUAL
43849: IFTRUE 43853
43851: GO 43878
43853: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43854: LD_ADDR_VAR 0 3
43858: PUSH
43859: LD_INT 32
43861: PPUSH
43862: LD_VAR 0 1
43866: PPUSH
43867: CALL_OW 321
43871: PUSH
43872: LD_INT 2
43874: EQUAL
43875: ST_TO_ADDR
43876: GO 44198
43878: LD_INT 20
43880: DOUBLE
43881: EQUAL
43882: IFTRUE 43886
43884: GO 43911
43886: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43887: LD_ADDR_VAR 0 3
43891: PUSH
43892: LD_INT 6
43894: PPUSH
43895: LD_VAR 0 1
43899: PPUSH
43900: CALL_OW 321
43904: PUSH
43905: LD_INT 2
43907: EQUAL
43908: ST_TO_ADDR
43909: GO 44198
43911: LD_INT 22
43913: DOUBLE
43914: EQUAL
43915: IFTRUE 43925
43917: LD_INT 36
43919: DOUBLE
43920: EQUAL
43921: IFTRUE 43925
43923: GO 43950
43925: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43926: LD_ADDR_VAR 0 3
43930: PUSH
43931: LD_INT 15
43933: PPUSH
43934: LD_VAR 0 1
43938: PPUSH
43939: CALL_OW 321
43943: PUSH
43944: LD_INT 2
43946: EQUAL
43947: ST_TO_ADDR
43948: GO 44198
43950: LD_INT 30
43952: DOUBLE
43953: EQUAL
43954: IFTRUE 43958
43956: GO 43983
43958: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
43959: LD_ADDR_VAR 0 3
43963: PUSH
43964: LD_INT 20
43966: PPUSH
43967: LD_VAR 0 1
43971: PPUSH
43972: CALL_OW 321
43976: PUSH
43977: LD_INT 2
43979: EQUAL
43980: ST_TO_ADDR
43981: GO 44198
43983: LD_INT 28
43985: DOUBLE
43986: EQUAL
43987: IFTRUE 43997
43989: LD_INT 21
43991: DOUBLE
43992: EQUAL
43993: IFTRUE 43997
43995: GO 44022
43997: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
43998: LD_ADDR_VAR 0 3
44002: PUSH
44003: LD_INT 21
44005: PPUSH
44006: LD_VAR 0 1
44010: PPUSH
44011: CALL_OW 321
44015: PUSH
44016: LD_INT 2
44018: EQUAL
44019: ST_TO_ADDR
44020: GO 44198
44022: LD_INT 16
44024: DOUBLE
44025: EQUAL
44026: IFTRUE 44030
44028: GO 44057
44030: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
44031: LD_ADDR_VAR 0 3
44035: PUSH
44036: LD_EXP 33
44040: PPUSH
44041: LD_VAR 0 1
44045: PPUSH
44046: CALL_OW 321
44050: PUSH
44051: LD_INT 2
44053: EQUAL
44054: ST_TO_ADDR
44055: GO 44198
44057: LD_INT 19
44059: DOUBLE
44060: EQUAL
44061: IFTRUE 44071
44063: LD_INT 23
44065: DOUBLE
44066: EQUAL
44067: IFTRUE 44071
44069: GO 44098
44071: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
44072: LD_ADDR_VAR 0 3
44076: PUSH
44077: LD_EXP 32
44081: PPUSH
44082: LD_VAR 0 1
44086: PPUSH
44087: CALL_OW 321
44091: PUSH
44092: LD_INT 2
44094: EQUAL
44095: ST_TO_ADDR
44096: GO 44198
44098: LD_INT 17
44100: DOUBLE
44101: EQUAL
44102: IFTRUE 44106
44104: GO 44131
44106: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
44107: LD_ADDR_VAR 0 3
44111: PUSH
44112: LD_INT 39
44114: PPUSH
44115: LD_VAR 0 1
44119: PPUSH
44120: CALL_OW 321
44124: PUSH
44125: LD_INT 2
44127: EQUAL
44128: ST_TO_ADDR
44129: GO 44198
44131: LD_INT 18
44133: DOUBLE
44134: EQUAL
44135: IFTRUE 44139
44137: GO 44164
44139: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
44140: LD_ADDR_VAR 0 3
44144: PUSH
44145: LD_INT 40
44147: PPUSH
44148: LD_VAR 0 1
44152: PPUSH
44153: CALL_OW 321
44157: PUSH
44158: LD_INT 2
44160: EQUAL
44161: ST_TO_ADDR
44162: GO 44198
44164: LD_INT 27
44166: DOUBLE
44167: EQUAL
44168: IFTRUE 44172
44170: GO 44197
44172: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
44173: LD_ADDR_VAR 0 3
44177: PUSH
44178: LD_INT 35
44180: PPUSH
44181: LD_VAR 0 1
44185: PPUSH
44186: CALL_OW 321
44190: PUSH
44191: LD_INT 2
44193: EQUAL
44194: ST_TO_ADDR
44195: GO 44198
44197: POP
// end ;
44198: LD_VAR 0 3
44202: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
44203: LD_INT 0
44205: PPUSH
44206: PPUSH
44207: PPUSH
44208: PPUSH
44209: PPUSH
44210: PPUSH
44211: PPUSH
44212: PPUSH
44213: PPUSH
44214: PPUSH
44215: PPUSH
// result := false ;
44216: LD_ADDR_VAR 0 6
44220: PUSH
44221: LD_INT 0
44223: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
44224: LD_VAR 0 1
44228: NOT
44229: PUSH
44230: LD_VAR 0 1
44234: PPUSH
44235: CALL_OW 266
44239: PUSH
44240: LD_INT 0
44242: PUSH
44243: LD_INT 1
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: IN
44250: NOT
44251: OR
44252: PUSH
44253: LD_VAR 0 2
44257: NOT
44258: OR
44259: PUSH
44260: LD_VAR 0 5
44264: PUSH
44265: LD_INT 0
44267: PUSH
44268: LD_INT 1
44270: PUSH
44271: LD_INT 2
44273: PUSH
44274: LD_INT 3
44276: PUSH
44277: LD_INT 4
44279: PUSH
44280: LD_INT 5
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: LIST
44289: LIST
44290: IN
44291: NOT
44292: OR
44293: PUSH
44294: LD_VAR 0 3
44298: PPUSH
44299: LD_VAR 0 4
44303: PPUSH
44304: CALL_OW 488
44308: NOT
44309: OR
44310: IFFALSE 44314
// exit ;
44312: GO 45050
// side := GetSide ( depot ) ;
44314: LD_ADDR_VAR 0 9
44318: PUSH
44319: LD_VAR 0 1
44323: PPUSH
44324: CALL_OW 255
44328: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
44329: LD_VAR 0 9
44333: PPUSH
44334: LD_VAR 0 2
44338: PPUSH
44339: CALL 43823 0 2
44343: NOT
44344: IFFALSE 44348
// exit ;
44346: GO 45050
// pom := GetBase ( depot ) ;
44348: LD_ADDR_VAR 0 10
44352: PUSH
44353: LD_VAR 0 1
44357: PPUSH
44358: CALL_OW 274
44362: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44363: LD_ADDR_VAR 0 11
44367: PUSH
44368: LD_VAR 0 2
44372: PPUSH
44373: LD_VAR 0 1
44377: PPUSH
44378: CALL_OW 248
44382: PPUSH
44383: CALL_OW 450
44387: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44388: LD_VAR 0 10
44392: PPUSH
44393: LD_INT 1
44395: PPUSH
44396: CALL_OW 275
44400: PUSH
44401: LD_VAR 0 11
44405: PUSH
44406: LD_INT 1
44408: ARRAY
44409: GREATEREQUAL
44410: PUSH
44411: LD_VAR 0 10
44415: PPUSH
44416: LD_INT 2
44418: PPUSH
44419: CALL_OW 275
44423: PUSH
44424: LD_VAR 0 11
44428: PUSH
44429: LD_INT 2
44431: ARRAY
44432: GREATEREQUAL
44433: AND
44434: PUSH
44435: LD_VAR 0 10
44439: PPUSH
44440: LD_INT 3
44442: PPUSH
44443: CALL_OW 275
44447: PUSH
44448: LD_VAR 0 11
44452: PUSH
44453: LD_INT 3
44455: ARRAY
44456: GREATEREQUAL
44457: AND
44458: NOT
44459: IFFALSE 44463
// exit ;
44461: GO 45050
// if GetBType ( depot ) = b_depot then
44463: LD_VAR 0 1
44467: PPUSH
44468: CALL_OW 266
44472: PUSH
44473: LD_INT 0
44475: EQUAL
44476: IFFALSE 44488
// dist := 28 else
44478: LD_ADDR_VAR 0 14
44482: PUSH
44483: LD_INT 28
44485: ST_TO_ADDR
44486: GO 44496
// dist := 36 ;
44488: LD_ADDR_VAR 0 14
44492: PUSH
44493: LD_INT 36
44495: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44496: LD_VAR 0 1
44500: PPUSH
44501: LD_VAR 0 3
44505: PPUSH
44506: LD_VAR 0 4
44510: PPUSH
44511: CALL_OW 297
44515: PUSH
44516: LD_VAR 0 14
44520: GREATER
44521: IFFALSE 44525
// exit ;
44523: GO 45050
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44525: LD_ADDR_VAR 0 12
44529: PUSH
44530: LD_VAR 0 2
44534: PPUSH
44535: LD_VAR 0 3
44539: PPUSH
44540: LD_VAR 0 4
44544: PPUSH
44545: LD_VAR 0 5
44549: PPUSH
44550: LD_VAR 0 1
44554: PPUSH
44555: CALL_OW 248
44559: PPUSH
44560: LD_INT 0
44562: PPUSH
44563: CALL 45055 0 6
44567: ST_TO_ADDR
// if not hexes then
44568: LD_VAR 0 12
44572: NOT
44573: IFFALSE 44577
// exit ;
44575: GO 45050
// hex := GetHexInfo ( x , y ) ;
44577: LD_ADDR_VAR 0 15
44581: PUSH
44582: LD_VAR 0 3
44586: PPUSH
44587: LD_VAR 0 4
44591: PPUSH
44592: CALL_OW 546
44596: ST_TO_ADDR
// if hex [ 1 ] then
44597: LD_VAR 0 15
44601: PUSH
44602: LD_INT 1
44604: ARRAY
44605: IFFALSE 44609
// exit ;
44607: GO 45050
// height := hex [ 2 ] ;
44609: LD_ADDR_VAR 0 13
44613: PUSH
44614: LD_VAR 0 15
44618: PUSH
44619: LD_INT 2
44621: ARRAY
44622: ST_TO_ADDR
// for i = 1 to hexes do
44623: LD_ADDR_VAR 0 7
44627: PUSH
44628: DOUBLE
44629: LD_INT 1
44631: DEC
44632: ST_TO_ADDR
44633: LD_VAR 0 12
44637: PUSH
44638: FOR_TO
44639: IFFALSE 44969
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44641: LD_VAR 0 12
44645: PUSH
44646: LD_VAR 0 7
44650: ARRAY
44651: PUSH
44652: LD_INT 1
44654: ARRAY
44655: PPUSH
44656: LD_VAR 0 12
44660: PUSH
44661: LD_VAR 0 7
44665: ARRAY
44666: PUSH
44667: LD_INT 2
44669: ARRAY
44670: PPUSH
44671: CALL_OW 488
44675: NOT
44676: PUSH
44677: LD_VAR 0 12
44681: PUSH
44682: LD_VAR 0 7
44686: ARRAY
44687: PUSH
44688: LD_INT 1
44690: ARRAY
44691: PPUSH
44692: LD_VAR 0 12
44696: PUSH
44697: LD_VAR 0 7
44701: ARRAY
44702: PUSH
44703: LD_INT 2
44705: ARRAY
44706: PPUSH
44707: CALL_OW 428
44711: PUSH
44712: LD_INT 0
44714: GREATER
44715: OR
44716: PUSH
44717: LD_VAR 0 12
44721: PUSH
44722: LD_VAR 0 7
44726: ARRAY
44727: PUSH
44728: LD_INT 1
44730: ARRAY
44731: PPUSH
44732: LD_VAR 0 12
44736: PUSH
44737: LD_VAR 0 7
44741: ARRAY
44742: PUSH
44743: LD_INT 2
44745: ARRAY
44746: PPUSH
44747: CALL_OW 351
44751: OR
44752: IFFALSE 44758
// exit ;
44754: POP
44755: POP
44756: GO 45050
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44758: LD_ADDR_VAR 0 8
44762: PUSH
44763: LD_VAR 0 12
44767: PUSH
44768: LD_VAR 0 7
44772: ARRAY
44773: PUSH
44774: LD_INT 1
44776: ARRAY
44777: PPUSH
44778: LD_VAR 0 12
44782: PUSH
44783: LD_VAR 0 7
44787: ARRAY
44788: PUSH
44789: LD_INT 2
44791: ARRAY
44792: PPUSH
44793: CALL_OW 546
44797: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44798: LD_VAR 0 8
44802: PUSH
44803: LD_INT 1
44805: ARRAY
44806: PUSH
44807: LD_VAR 0 8
44811: PUSH
44812: LD_INT 2
44814: ARRAY
44815: PUSH
44816: LD_VAR 0 13
44820: PUSH
44821: LD_INT 2
44823: PLUS
44824: GREATER
44825: OR
44826: PUSH
44827: LD_VAR 0 8
44831: PUSH
44832: LD_INT 2
44834: ARRAY
44835: PUSH
44836: LD_VAR 0 13
44840: PUSH
44841: LD_INT 2
44843: MINUS
44844: LESS
44845: OR
44846: PUSH
44847: LD_VAR 0 8
44851: PUSH
44852: LD_INT 3
44854: ARRAY
44855: PUSH
44856: LD_INT 0
44858: PUSH
44859: LD_INT 8
44861: PUSH
44862: LD_INT 9
44864: PUSH
44865: LD_INT 10
44867: PUSH
44868: LD_INT 11
44870: PUSH
44871: LD_INT 12
44873: PUSH
44874: LD_INT 13
44876: PUSH
44877: LD_INT 16
44879: PUSH
44880: LD_INT 17
44882: PUSH
44883: LD_INT 18
44885: PUSH
44886: LD_INT 19
44888: PUSH
44889: LD_INT 20
44891: PUSH
44892: LD_INT 21
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: LIST
44899: LIST
44900: LIST
44901: LIST
44902: LIST
44903: LIST
44904: LIST
44905: LIST
44906: LIST
44907: LIST
44908: LIST
44909: IN
44910: NOT
44911: OR
44912: PUSH
44913: LD_VAR 0 8
44917: PUSH
44918: LD_INT 5
44920: ARRAY
44921: NOT
44922: OR
44923: PUSH
44924: LD_VAR 0 8
44928: PUSH
44929: LD_INT 6
44931: ARRAY
44932: PUSH
44933: LD_INT 1
44935: PUSH
44936: LD_INT 2
44938: PUSH
44939: LD_INT 7
44941: PUSH
44942: LD_INT 9
44944: PUSH
44945: LD_INT 10
44947: PUSH
44948: LD_INT 11
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: LIST
44955: LIST
44956: LIST
44957: LIST
44958: IN
44959: NOT
44960: OR
44961: IFFALSE 44967
// exit ;
44963: POP
44964: POP
44965: GO 45050
// end ;
44967: GO 44638
44969: POP
44970: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44971: LD_VAR 0 9
44975: PPUSH
44976: LD_VAR 0 3
44980: PPUSH
44981: LD_VAR 0 4
44985: PPUSH
44986: LD_INT 20
44988: PPUSH
44989: CALL 36996 0 4
44993: PUSH
44994: LD_INT 4
44996: ARRAY
44997: IFFALSE 45001
// exit ;
44999: GO 45050
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
45001: LD_VAR 0 2
45005: PUSH
45006: LD_INT 29
45008: PUSH
45009: LD_INT 30
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: IN
45016: PUSH
45017: LD_VAR 0 3
45021: PPUSH
45022: LD_VAR 0 4
45026: PPUSH
45027: LD_VAR 0 9
45031: PPUSH
45032: CALL_OW 440
45036: NOT
45037: AND
45038: IFFALSE 45042
// exit ;
45040: GO 45050
// result := true ;
45042: LD_ADDR_VAR 0 6
45046: PUSH
45047: LD_INT 1
45049: ST_TO_ADDR
// end ;
45050: LD_VAR 0 6
45054: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
45055: LD_INT 0
45057: PPUSH
45058: PPUSH
45059: PPUSH
45060: PPUSH
45061: PPUSH
45062: PPUSH
45063: PPUSH
45064: PPUSH
45065: PPUSH
45066: PPUSH
45067: PPUSH
45068: PPUSH
45069: PPUSH
45070: PPUSH
45071: PPUSH
45072: PPUSH
45073: PPUSH
45074: PPUSH
45075: PPUSH
45076: PPUSH
45077: PPUSH
45078: PPUSH
45079: PPUSH
45080: PPUSH
45081: PPUSH
45082: PPUSH
45083: PPUSH
45084: PPUSH
45085: PPUSH
45086: PPUSH
45087: PPUSH
45088: PPUSH
45089: PPUSH
45090: PPUSH
45091: PPUSH
45092: PPUSH
45093: PPUSH
45094: PPUSH
45095: PPUSH
45096: PPUSH
45097: PPUSH
45098: PPUSH
45099: PPUSH
45100: PPUSH
45101: PPUSH
45102: PPUSH
45103: PPUSH
45104: PPUSH
45105: PPUSH
45106: PPUSH
45107: PPUSH
45108: PPUSH
45109: PPUSH
45110: PPUSH
45111: PPUSH
45112: PPUSH
45113: PPUSH
45114: PPUSH
// result = [ ] ;
45115: LD_ADDR_VAR 0 7
45119: PUSH
45120: EMPTY
45121: ST_TO_ADDR
// temp_list = [ ] ;
45122: LD_ADDR_VAR 0 9
45126: PUSH
45127: EMPTY
45128: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
45129: LD_VAR 0 4
45133: PUSH
45134: LD_INT 0
45136: PUSH
45137: LD_INT 1
45139: PUSH
45140: LD_INT 2
45142: PUSH
45143: LD_INT 3
45145: PUSH
45146: LD_INT 4
45148: PUSH
45149: LD_INT 5
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: LIST
45159: IN
45160: NOT
45161: PUSH
45162: LD_VAR 0 1
45166: PUSH
45167: LD_INT 0
45169: PUSH
45170: LD_INT 1
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: IN
45177: PUSH
45178: LD_VAR 0 5
45182: PUSH
45183: LD_INT 1
45185: PUSH
45186: LD_INT 2
45188: PUSH
45189: LD_INT 3
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: LIST
45196: IN
45197: NOT
45198: AND
45199: OR
45200: IFFALSE 45204
// exit ;
45202: GO 63595
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45204: LD_VAR 0 1
45208: PUSH
45209: LD_INT 6
45211: PUSH
45212: LD_INT 7
45214: PUSH
45215: LD_INT 8
45217: PUSH
45218: LD_INT 13
45220: PUSH
45221: LD_INT 12
45223: PUSH
45224: LD_INT 15
45226: PUSH
45227: LD_INT 11
45229: PUSH
45230: LD_INT 14
45232: PUSH
45233: LD_INT 10
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: IN
45247: IFFALSE 45257
// btype = b_lab ;
45249: LD_ADDR_VAR 0 1
45253: PUSH
45254: LD_INT 6
45256: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45257: LD_VAR 0 6
45261: PUSH
45262: LD_INT 0
45264: PUSH
45265: LD_INT 1
45267: PUSH
45268: LD_INT 2
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: LIST
45275: IN
45276: NOT
45277: PUSH
45278: LD_VAR 0 1
45282: PUSH
45283: LD_INT 0
45285: PUSH
45286: LD_INT 1
45288: PUSH
45289: LD_INT 2
45291: PUSH
45292: LD_INT 3
45294: PUSH
45295: LD_INT 6
45297: PUSH
45298: LD_INT 36
45300: PUSH
45301: LD_INT 4
45303: PUSH
45304: LD_INT 5
45306: PUSH
45307: LD_INT 31
45309: PUSH
45310: LD_INT 32
45312: PUSH
45313: LD_INT 33
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: IN
45329: NOT
45330: PUSH
45331: LD_VAR 0 6
45335: PUSH
45336: LD_INT 1
45338: EQUAL
45339: AND
45340: OR
45341: PUSH
45342: LD_VAR 0 1
45346: PUSH
45347: LD_INT 2
45349: PUSH
45350: LD_INT 3
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: IN
45357: NOT
45358: PUSH
45359: LD_VAR 0 6
45363: PUSH
45364: LD_INT 2
45366: EQUAL
45367: AND
45368: OR
45369: IFFALSE 45379
// mode = 0 ;
45371: LD_ADDR_VAR 0 6
45375: PUSH
45376: LD_INT 0
45378: ST_TO_ADDR
// case mode of 0 :
45379: LD_VAR 0 6
45383: PUSH
45384: LD_INT 0
45386: DOUBLE
45387: EQUAL
45388: IFTRUE 45392
45390: GO 56845
45392: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45393: LD_ADDR_VAR 0 11
45397: PUSH
45398: LD_INT 0
45400: PUSH
45401: LD_INT 0
45403: PUSH
45404: EMPTY
45405: LIST
45406: LIST
45407: PUSH
45408: LD_INT 0
45410: PUSH
45411: LD_INT 1
45413: NEG
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 1
45421: PUSH
45422: LD_INT 0
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: PUSH
45429: LD_INT 1
45431: PUSH
45432: LD_INT 1
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: LD_INT 0
45441: PUSH
45442: LD_INT 1
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: LD_INT 1
45451: NEG
45452: PUSH
45453: LD_INT 0
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: LD_INT 1
45462: NEG
45463: PUSH
45464: LD_INT 1
45466: NEG
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 1
45474: NEG
45475: PUSH
45476: LD_INT 2
45478: NEG
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: PUSH
45484: LD_INT 0
45486: PUSH
45487: LD_INT 2
45489: NEG
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 1
45497: PUSH
45498: LD_INT 1
45500: NEG
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 1
45508: PUSH
45509: LD_INT 2
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: PUSH
45516: LD_INT 0
45518: PUSH
45519: LD_INT 2
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: LD_INT 1
45528: NEG
45529: PUSH
45530: LD_INT 1
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: PUSH
45537: LD_INT 1
45539: PUSH
45540: LD_INT 3
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PUSH
45547: LD_INT 0
45549: PUSH
45550: LD_INT 3
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: PUSH
45557: LD_INT 1
45559: NEG
45560: PUSH
45561: LD_INT 2
45563: PUSH
45564: EMPTY
45565: LIST
45566: LIST
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: LIST
45572: LIST
45573: LIST
45574: LIST
45575: LIST
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: LIST
45583: LIST
45584: LIST
45585: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45586: LD_ADDR_VAR 0 12
45590: PUSH
45591: LD_INT 0
45593: PUSH
45594: LD_INT 0
45596: PUSH
45597: EMPTY
45598: LIST
45599: LIST
45600: PUSH
45601: LD_INT 0
45603: PUSH
45604: LD_INT 1
45606: NEG
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: LD_INT 1
45614: PUSH
45615: LD_INT 0
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: LD_INT 1
45624: PUSH
45625: LD_INT 1
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 0
45634: PUSH
45635: LD_INT 1
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 1
45644: NEG
45645: PUSH
45646: LD_INT 0
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 1
45655: NEG
45656: PUSH
45657: LD_INT 1
45659: NEG
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: LD_INT 1
45667: PUSH
45668: LD_INT 1
45670: NEG
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: PUSH
45676: LD_INT 2
45678: PUSH
45679: LD_INT 0
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: LD_INT 2
45688: PUSH
45689: LD_INT 1
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 1
45698: NEG
45699: PUSH
45700: LD_INT 1
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 2
45709: NEG
45710: PUSH
45711: LD_INT 0
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 2
45720: NEG
45721: PUSH
45722: LD_INT 1
45724: NEG
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_INT 2
45732: NEG
45733: PUSH
45734: LD_INT 1
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: LD_INT 3
45743: NEG
45744: PUSH
45745: LD_INT 0
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 3
45754: NEG
45755: PUSH
45756: LD_INT 1
45758: NEG
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: LIST
45775: LIST
45776: LIST
45777: LIST
45778: LIST
45779: LIST
45780: LIST
45781: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45782: LD_ADDR_VAR 0 13
45786: PUSH
45787: LD_INT 0
45789: PUSH
45790: LD_INT 0
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: PUSH
45797: LD_INT 0
45799: PUSH
45800: LD_INT 1
45802: NEG
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: PUSH
45808: LD_INT 1
45810: PUSH
45811: LD_INT 0
45813: PUSH
45814: EMPTY
45815: LIST
45816: LIST
45817: PUSH
45818: LD_INT 1
45820: PUSH
45821: LD_INT 1
45823: PUSH
45824: EMPTY
45825: LIST
45826: LIST
45827: PUSH
45828: LD_INT 0
45830: PUSH
45831: LD_INT 1
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 1
45840: NEG
45841: PUSH
45842: LD_INT 0
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 1
45851: NEG
45852: PUSH
45853: LD_INT 1
45855: NEG
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: LD_INT 1
45863: NEG
45864: PUSH
45865: LD_INT 2
45867: NEG
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: LD_INT 2
45875: PUSH
45876: LD_INT 1
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 2
45885: PUSH
45886: LD_INT 2
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 1
45895: PUSH
45896: LD_INT 2
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 2
45905: NEG
45906: PUSH
45907: LD_INT 1
45909: NEG
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 2
45917: NEG
45918: PUSH
45919: LD_INT 2
45921: NEG
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PUSH
45927: LD_INT 2
45929: NEG
45930: PUSH
45931: LD_INT 3
45933: NEG
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 3
45941: NEG
45942: PUSH
45943: LD_INT 2
45945: NEG
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 3
45953: NEG
45954: PUSH
45955: LD_INT 3
45957: NEG
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45981: LD_ADDR_VAR 0 14
45985: PUSH
45986: LD_INT 0
45988: PUSH
45989: LD_INT 0
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 0
45998: PUSH
45999: LD_INT 1
46001: NEG
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 1
46009: PUSH
46010: LD_INT 0
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: PUSH
46017: LD_INT 1
46019: PUSH
46020: LD_INT 1
46022: PUSH
46023: EMPTY
46024: LIST
46025: LIST
46026: PUSH
46027: LD_INT 0
46029: PUSH
46030: LD_INT 1
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 1
46039: NEG
46040: PUSH
46041: LD_INT 0
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PUSH
46048: LD_INT 1
46050: NEG
46051: PUSH
46052: LD_INT 1
46054: NEG
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: PUSH
46060: LD_INT 1
46062: NEG
46063: PUSH
46064: LD_INT 2
46066: NEG
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 0
46074: PUSH
46075: LD_INT 2
46077: NEG
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: PUSH
46083: LD_INT 1
46085: PUSH
46086: LD_INT 1
46088: NEG
46089: PUSH
46090: EMPTY
46091: LIST
46092: LIST
46093: PUSH
46094: LD_INT 1
46096: PUSH
46097: LD_INT 2
46099: PUSH
46100: EMPTY
46101: LIST
46102: LIST
46103: PUSH
46104: LD_INT 0
46106: PUSH
46107: LD_INT 2
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: PUSH
46114: LD_INT 1
46116: NEG
46117: PUSH
46118: LD_INT 1
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 1
46127: NEG
46128: PUSH
46129: LD_INT 3
46131: NEG
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 0
46139: PUSH
46140: LD_INT 3
46142: NEG
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 1
46150: PUSH
46151: LD_INT 2
46153: NEG
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: EMPTY
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46177: LD_ADDR_VAR 0 15
46181: PUSH
46182: LD_INT 0
46184: PUSH
46185: LD_INT 0
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PUSH
46192: LD_INT 0
46194: PUSH
46195: LD_INT 1
46197: NEG
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 1
46205: PUSH
46206: LD_INT 0
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 1
46215: PUSH
46216: LD_INT 1
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: PUSH
46223: LD_INT 0
46225: PUSH
46226: LD_INT 1
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 1
46235: NEG
46236: PUSH
46237: LD_INT 0
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 1
46246: NEG
46247: PUSH
46248: LD_INT 1
46250: NEG
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 1
46258: PUSH
46259: LD_INT 1
46261: NEG
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 2
46269: PUSH
46270: LD_INT 0
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: PUSH
46277: LD_INT 2
46279: PUSH
46280: LD_INT 1
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 1
46289: NEG
46290: PUSH
46291: LD_INT 1
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 2
46300: NEG
46301: PUSH
46302: LD_INT 0
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 2
46311: NEG
46312: PUSH
46313: LD_INT 1
46315: NEG
46316: PUSH
46317: EMPTY
46318: LIST
46319: LIST
46320: PUSH
46321: LD_INT 2
46323: PUSH
46324: LD_INT 1
46326: NEG
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: PUSH
46332: LD_INT 3
46334: PUSH
46335: LD_INT 0
46337: PUSH
46338: EMPTY
46339: LIST
46340: LIST
46341: PUSH
46342: LD_INT 3
46344: PUSH
46345: LD_INT 1
46347: PUSH
46348: EMPTY
46349: LIST
46350: LIST
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: LIST
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: LIST
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46370: LD_ADDR_VAR 0 16
46374: PUSH
46375: LD_INT 0
46377: PUSH
46378: LD_INT 0
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 0
46387: PUSH
46388: LD_INT 1
46390: NEG
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 1
46398: PUSH
46399: LD_INT 0
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 1
46408: PUSH
46409: LD_INT 1
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 0
46418: PUSH
46419: LD_INT 1
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 1
46428: NEG
46429: PUSH
46430: LD_INT 0
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 1
46439: NEG
46440: PUSH
46441: LD_INT 1
46443: NEG
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: LD_INT 1
46451: NEG
46452: PUSH
46453: LD_INT 2
46455: NEG
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: LD_INT 2
46463: PUSH
46464: LD_INT 1
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 2
46473: PUSH
46474: LD_INT 2
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 1
46483: PUSH
46484: LD_INT 2
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 2
46493: NEG
46494: PUSH
46495: LD_INT 1
46497: NEG
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: LD_INT 2
46505: NEG
46506: PUSH
46507: LD_INT 2
46509: NEG
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 3
46517: PUSH
46518: LD_INT 2
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: LD_INT 3
46527: PUSH
46528: LD_INT 3
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: PUSH
46535: LD_INT 2
46537: PUSH
46538: LD_INT 3
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46563: LD_ADDR_VAR 0 17
46567: PUSH
46568: LD_INT 0
46570: PUSH
46571: LD_INT 0
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 0
46580: PUSH
46581: LD_INT 1
46583: NEG
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: PUSH
46589: LD_INT 1
46591: PUSH
46592: LD_INT 0
46594: PUSH
46595: EMPTY
46596: LIST
46597: LIST
46598: PUSH
46599: LD_INT 1
46601: PUSH
46602: LD_INT 1
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 0
46611: PUSH
46612: LD_INT 1
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: PUSH
46619: LD_INT 1
46621: NEG
46622: PUSH
46623: LD_INT 0
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 1
46632: NEG
46633: PUSH
46634: LD_INT 1
46636: NEG
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: LD_INT 1
46644: NEG
46645: PUSH
46646: LD_INT 2
46648: NEG
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 0
46656: PUSH
46657: LD_INT 2
46659: NEG
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: LD_INT 1
46667: PUSH
46668: LD_INT 1
46670: NEG
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: LD_INT 2
46678: PUSH
46679: LD_INT 0
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 2
46688: PUSH
46689: LD_INT 1
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 2
46698: PUSH
46699: LD_INT 2
46701: PUSH
46702: EMPTY
46703: LIST
46704: LIST
46705: PUSH
46706: LD_INT 1
46708: PUSH
46709: LD_INT 2
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 0
46718: PUSH
46719: LD_INT 2
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 1
46728: NEG
46729: PUSH
46730: LD_INT 1
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: LD_INT 2
46739: NEG
46740: PUSH
46741: LD_INT 0
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 2
46750: NEG
46751: PUSH
46752: LD_INT 1
46754: NEG
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: PUSH
46760: LD_INT 2
46762: NEG
46763: PUSH
46764: LD_INT 2
46766: NEG
46767: PUSH
46768: EMPTY
46769: LIST
46770: LIST
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46793: LD_ADDR_VAR 0 18
46797: PUSH
46798: LD_INT 0
46800: PUSH
46801: LD_INT 0
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 0
46810: PUSH
46811: LD_INT 1
46813: NEG
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 1
46821: PUSH
46822: LD_INT 0
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: LD_INT 1
46831: PUSH
46832: LD_INT 1
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: LD_INT 0
46841: PUSH
46842: LD_INT 1
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 1
46851: NEG
46852: PUSH
46853: LD_INT 0
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 1
46862: NEG
46863: PUSH
46864: LD_INT 1
46866: NEG
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 1
46874: NEG
46875: PUSH
46876: LD_INT 2
46878: NEG
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: PUSH
46884: LD_INT 0
46886: PUSH
46887: LD_INT 2
46889: NEG
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: PUSH
46895: LD_INT 1
46897: PUSH
46898: LD_INT 1
46900: NEG
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: LD_INT 2
46908: PUSH
46909: LD_INT 0
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_INT 2
46918: PUSH
46919: LD_INT 1
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: LD_INT 2
46928: PUSH
46929: LD_INT 2
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: PUSH
46936: LD_INT 1
46938: PUSH
46939: LD_INT 2
46941: PUSH
46942: EMPTY
46943: LIST
46944: LIST
46945: PUSH
46946: LD_INT 0
46948: PUSH
46949: LD_INT 2
46951: PUSH
46952: EMPTY
46953: LIST
46954: LIST
46955: PUSH
46956: LD_INT 1
46958: NEG
46959: PUSH
46960: LD_INT 1
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: LD_INT 2
46969: NEG
46970: PUSH
46971: LD_INT 0
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: PUSH
46978: LD_INT 2
46980: NEG
46981: PUSH
46982: LD_INT 1
46984: NEG
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: PUSH
46990: LD_INT 2
46992: NEG
46993: PUSH
46994: LD_INT 2
46996: NEG
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47023: LD_ADDR_VAR 0 19
47027: PUSH
47028: LD_INT 0
47030: PUSH
47031: LD_INT 0
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 0
47040: PUSH
47041: LD_INT 1
47043: NEG
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: LD_INT 1
47051: PUSH
47052: LD_INT 0
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 1
47061: PUSH
47062: LD_INT 1
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 0
47071: PUSH
47072: LD_INT 1
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 1
47081: NEG
47082: PUSH
47083: LD_INT 0
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 1
47092: NEG
47093: PUSH
47094: LD_INT 1
47096: NEG
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 1
47104: NEG
47105: PUSH
47106: LD_INT 2
47108: NEG
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 0
47116: PUSH
47117: LD_INT 2
47119: NEG
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 1
47127: PUSH
47128: LD_INT 1
47130: NEG
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 2
47138: PUSH
47139: LD_INT 0
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 2
47148: PUSH
47149: LD_INT 1
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 2
47158: PUSH
47159: LD_INT 2
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 1
47168: PUSH
47169: LD_INT 2
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 0
47178: PUSH
47179: LD_INT 2
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 1
47188: NEG
47189: PUSH
47190: LD_INT 1
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 2
47199: NEG
47200: PUSH
47201: LD_INT 0
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 2
47210: NEG
47211: PUSH
47212: LD_INT 1
47214: NEG
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 2
47222: NEG
47223: PUSH
47224: LD_INT 2
47226: NEG
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: LIST
47236: LIST
47237: LIST
47238: LIST
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47253: LD_ADDR_VAR 0 20
47257: PUSH
47258: LD_INT 0
47260: PUSH
47261: LD_INT 0
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: PUSH
47268: LD_INT 0
47270: PUSH
47271: LD_INT 1
47273: NEG
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: PUSH
47279: LD_INT 1
47281: PUSH
47282: LD_INT 0
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 1
47291: PUSH
47292: LD_INT 1
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 0
47301: PUSH
47302: LD_INT 1
47304: PUSH
47305: EMPTY
47306: LIST
47307: LIST
47308: PUSH
47309: LD_INT 1
47311: NEG
47312: PUSH
47313: LD_INT 0
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: LD_INT 1
47322: NEG
47323: PUSH
47324: LD_INT 1
47326: NEG
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 1
47334: NEG
47335: PUSH
47336: LD_INT 2
47338: NEG
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 0
47346: PUSH
47347: LD_INT 2
47349: NEG
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: LD_INT 1
47357: PUSH
47358: LD_INT 1
47360: NEG
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: LD_INT 2
47368: PUSH
47369: LD_INT 0
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: LD_INT 2
47378: PUSH
47379: LD_INT 1
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: PUSH
47386: LD_INT 2
47388: PUSH
47389: LD_INT 2
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 1
47398: PUSH
47399: LD_INT 2
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 0
47408: PUSH
47409: LD_INT 2
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 1
47418: NEG
47419: PUSH
47420: LD_INT 1
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: PUSH
47427: LD_INT 2
47429: NEG
47430: PUSH
47431: LD_INT 0
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 2
47440: NEG
47441: PUSH
47442: LD_INT 1
47444: NEG
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 2
47452: NEG
47453: PUSH
47454: LD_INT 2
47456: NEG
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47483: LD_ADDR_VAR 0 21
47487: PUSH
47488: LD_INT 0
47490: PUSH
47491: LD_INT 0
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 0
47500: PUSH
47501: LD_INT 1
47503: NEG
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 1
47511: PUSH
47512: LD_INT 0
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 1
47521: PUSH
47522: LD_INT 1
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 0
47531: PUSH
47532: LD_INT 1
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 1
47541: NEG
47542: PUSH
47543: LD_INT 0
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 1
47552: NEG
47553: PUSH
47554: LD_INT 1
47556: NEG
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 1
47564: NEG
47565: PUSH
47566: LD_INT 2
47568: NEG
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 0
47576: PUSH
47577: LD_INT 2
47579: NEG
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 1
47587: PUSH
47588: LD_INT 1
47590: NEG
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 2
47598: PUSH
47599: LD_INT 0
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: LD_INT 2
47608: PUSH
47609: LD_INT 1
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: LD_INT 2
47618: PUSH
47619: LD_INT 2
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 1
47628: PUSH
47629: LD_INT 2
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: LD_INT 0
47638: PUSH
47639: LD_INT 2
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 1
47648: NEG
47649: PUSH
47650: LD_INT 1
47652: PUSH
47653: EMPTY
47654: LIST
47655: LIST
47656: PUSH
47657: LD_INT 2
47659: NEG
47660: PUSH
47661: LD_INT 0
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 2
47670: NEG
47671: PUSH
47672: LD_INT 1
47674: NEG
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: PUSH
47680: LD_INT 2
47682: NEG
47683: PUSH
47684: LD_INT 2
47686: NEG
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: LIST
47696: LIST
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47713: LD_ADDR_VAR 0 22
47717: PUSH
47718: LD_INT 0
47720: PUSH
47721: LD_INT 0
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 0
47730: PUSH
47731: LD_INT 1
47733: NEG
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: LD_INT 1
47741: PUSH
47742: LD_INT 0
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 1
47751: PUSH
47752: LD_INT 1
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: PUSH
47759: LD_INT 0
47761: PUSH
47762: LD_INT 1
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 1
47771: NEG
47772: PUSH
47773: LD_INT 0
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 1
47782: NEG
47783: PUSH
47784: LD_INT 1
47786: NEG
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 1
47794: NEG
47795: PUSH
47796: LD_INT 2
47798: NEG
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 0
47806: PUSH
47807: LD_INT 2
47809: NEG
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: LD_INT 1
47817: PUSH
47818: LD_INT 1
47820: NEG
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 2
47828: PUSH
47829: LD_INT 0
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 2
47838: PUSH
47839: LD_INT 1
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 2
47848: PUSH
47849: LD_INT 2
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: LD_INT 1
47858: PUSH
47859: LD_INT 2
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: LD_INT 0
47868: PUSH
47869: LD_INT 2
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: PUSH
47876: LD_INT 1
47878: NEG
47879: PUSH
47880: LD_INT 1
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: LD_INT 2
47889: NEG
47890: PUSH
47891: LD_INT 0
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 2
47900: NEG
47901: PUSH
47902: LD_INT 1
47904: NEG
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: LD_INT 2
47912: NEG
47913: PUSH
47914: LD_INT 2
47916: NEG
47917: PUSH
47918: EMPTY
47919: LIST
47920: LIST
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: LIST
47941: LIST
47942: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47943: LD_ADDR_VAR 0 23
47947: PUSH
47948: LD_INT 0
47950: PUSH
47951: LD_INT 0
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: LD_INT 0
47960: PUSH
47961: LD_INT 1
47963: NEG
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: LD_INT 1
47971: PUSH
47972: LD_INT 0
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 1
47981: PUSH
47982: LD_INT 1
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 0
47991: PUSH
47992: LD_INT 1
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: PUSH
47999: LD_INT 1
48001: NEG
48002: PUSH
48003: LD_INT 0
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: LD_INT 1
48012: NEG
48013: PUSH
48014: LD_INT 1
48016: NEG
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: LD_INT 1
48024: NEG
48025: PUSH
48026: LD_INT 2
48028: NEG
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 0
48036: PUSH
48037: LD_INT 2
48039: NEG
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 1
48047: PUSH
48048: LD_INT 1
48050: NEG
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: LD_INT 2
48058: PUSH
48059: LD_INT 0
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 2
48068: PUSH
48069: LD_INT 1
48071: PUSH
48072: EMPTY
48073: LIST
48074: LIST
48075: PUSH
48076: LD_INT 2
48078: PUSH
48079: LD_INT 2
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 1
48088: PUSH
48089: LD_INT 2
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: LD_INT 0
48098: PUSH
48099: LD_INT 2
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 1
48108: NEG
48109: PUSH
48110: LD_INT 1
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: LD_INT 2
48119: NEG
48120: PUSH
48121: LD_INT 0
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 2
48130: NEG
48131: PUSH
48132: LD_INT 1
48134: NEG
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 2
48142: NEG
48143: PUSH
48144: LD_INT 2
48146: NEG
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: PUSH
48152: LD_INT 2
48154: NEG
48155: PUSH
48156: LD_INT 3
48158: NEG
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 1
48166: NEG
48167: PUSH
48168: LD_INT 3
48170: NEG
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: PUSH
48176: LD_INT 1
48178: PUSH
48179: LD_INT 2
48181: NEG
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 2
48189: PUSH
48190: LD_INT 1
48192: NEG
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: LIST
48216: LIST
48217: LIST
48218: LIST
48219: LIST
48220: LIST
48221: LIST
48222: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48223: LD_ADDR_VAR 0 24
48227: PUSH
48228: LD_INT 0
48230: PUSH
48231: LD_INT 0
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 0
48240: PUSH
48241: LD_INT 1
48243: NEG
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 1
48251: PUSH
48252: LD_INT 0
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: LD_INT 1
48261: PUSH
48262: LD_INT 1
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 0
48271: PUSH
48272: LD_INT 1
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 1
48281: NEG
48282: PUSH
48283: LD_INT 0
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 1
48292: NEG
48293: PUSH
48294: LD_INT 1
48296: NEG
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 1
48304: NEG
48305: PUSH
48306: LD_INT 2
48308: NEG
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: PUSH
48314: LD_INT 0
48316: PUSH
48317: LD_INT 2
48319: NEG
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 1
48327: PUSH
48328: LD_INT 1
48330: NEG
48331: PUSH
48332: EMPTY
48333: LIST
48334: LIST
48335: PUSH
48336: LD_INT 2
48338: PUSH
48339: LD_INT 0
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: LD_INT 2
48348: PUSH
48349: LD_INT 1
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: LD_INT 2
48358: PUSH
48359: LD_INT 2
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 1
48368: PUSH
48369: LD_INT 2
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: LD_INT 0
48378: PUSH
48379: LD_INT 2
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 1
48388: NEG
48389: PUSH
48390: LD_INT 1
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 2
48399: NEG
48400: PUSH
48401: LD_INT 0
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_INT 2
48410: NEG
48411: PUSH
48412: LD_INT 1
48414: NEG
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 2
48422: NEG
48423: PUSH
48424: LD_INT 2
48426: NEG
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: PUSH
48432: LD_INT 1
48434: PUSH
48435: LD_INT 2
48437: NEG
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 2
48445: PUSH
48446: LD_INT 1
48448: NEG
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 3
48456: PUSH
48457: LD_INT 1
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 3
48466: PUSH
48467: LD_INT 2
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: LIST
48490: LIST
48491: LIST
48492: LIST
48493: LIST
48494: LIST
48495: LIST
48496: LIST
48497: LIST
48498: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48499: LD_ADDR_VAR 0 25
48503: PUSH
48504: LD_INT 0
48506: PUSH
48507: LD_INT 0
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: LD_INT 0
48516: PUSH
48517: LD_INT 1
48519: NEG
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: PUSH
48525: LD_INT 1
48527: PUSH
48528: LD_INT 0
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_INT 1
48537: PUSH
48538: LD_INT 1
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 0
48547: PUSH
48548: LD_INT 1
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: LD_INT 1
48557: NEG
48558: PUSH
48559: LD_INT 0
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: PUSH
48566: LD_INT 1
48568: NEG
48569: PUSH
48570: LD_INT 1
48572: NEG
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 1
48580: NEG
48581: PUSH
48582: LD_INT 2
48584: NEG
48585: PUSH
48586: EMPTY
48587: LIST
48588: LIST
48589: PUSH
48590: LD_INT 0
48592: PUSH
48593: LD_INT 2
48595: NEG
48596: PUSH
48597: EMPTY
48598: LIST
48599: LIST
48600: PUSH
48601: LD_INT 1
48603: PUSH
48604: LD_INT 1
48606: NEG
48607: PUSH
48608: EMPTY
48609: LIST
48610: LIST
48611: PUSH
48612: LD_INT 2
48614: PUSH
48615: LD_INT 0
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: LD_INT 2
48624: PUSH
48625: LD_INT 1
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: PUSH
48632: LD_INT 2
48634: PUSH
48635: LD_INT 2
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: LD_INT 1
48644: PUSH
48645: LD_INT 2
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 0
48654: PUSH
48655: LD_INT 2
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 1
48664: NEG
48665: PUSH
48666: LD_INT 1
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: LD_INT 2
48675: NEG
48676: PUSH
48677: LD_INT 0
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 2
48686: NEG
48687: PUSH
48688: LD_INT 1
48690: NEG
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 2
48698: NEG
48699: PUSH
48700: LD_INT 2
48702: NEG
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_INT 3
48710: PUSH
48711: LD_INT 1
48713: PUSH
48714: EMPTY
48715: LIST
48716: LIST
48717: PUSH
48718: LD_INT 3
48720: PUSH
48721: LD_INT 2
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 2
48730: PUSH
48731: LD_INT 3
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 1
48740: PUSH
48741: LD_INT 3
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48773: LD_ADDR_VAR 0 26
48777: PUSH
48778: LD_INT 0
48780: PUSH
48781: LD_INT 0
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 0
48790: PUSH
48791: LD_INT 1
48793: NEG
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 1
48801: PUSH
48802: LD_INT 0
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 1
48811: PUSH
48812: LD_INT 1
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 0
48821: PUSH
48822: LD_INT 1
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 1
48831: NEG
48832: PUSH
48833: LD_INT 0
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 1
48842: NEG
48843: PUSH
48844: LD_INT 1
48846: NEG
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 1
48854: NEG
48855: PUSH
48856: LD_INT 2
48858: NEG
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 0
48866: PUSH
48867: LD_INT 2
48869: NEG
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 1
48877: PUSH
48878: LD_INT 1
48880: NEG
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 2
48888: PUSH
48889: LD_INT 0
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 2
48898: PUSH
48899: LD_INT 1
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 2
48908: PUSH
48909: LD_INT 2
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 1
48918: PUSH
48919: LD_INT 2
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 0
48928: PUSH
48929: LD_INT 2
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 1
48938: NEG
48939: PUSH
48940: LD_INT 1
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 2
48949: NEG
48950: PUSH
48951: LD_INT 0
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 2
48960: NEG
48961: PUSH
48962: LD_INT 1
48964: NEG
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 2
48972: NEG
48973: PUSH
48974: LD_INT 2
48976: NEG
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 2
48984: PUSH
48985: LD_INT 3
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: PUSH
48992: LD_INT 1
48994: PUSH
48995: LD_INT 3
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 1
49004: NEG
49005: PUSH
49006: LD_INT 2
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: LD_INT 2
49015: NEG
49016: PUSH
49017: LD_INT 1
49019: PUSH
49020: EMPTY
49021: LIST
49022: LIST
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: LIST
49028: LIST
49029: LIST
49030: LIST
49031: LIST
49032: LIST
49033: LIST
49034: LIST
49035: LIST
49036: LIST
49037: LIST
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49049: LD_ADDR_VAR 0 27
49053: PUSH
49054: LD_INT 0
49056: PUSH
49057: LD_INT 0
49059: PUSH
49060: EMPTY
49061: LIST
49062: LIST
49063: PUSH
49064: LD_INT 0
49066: PUSH
49067: LD_INT 1
49069: NEG
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: PUSH
49075: LD_INT 1
49077: PUSH
49078: LD_INT 0
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 1
49087: PUSH
49088: LD_INT 1
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 0
49097: PUSH
49098: LD_INT 1
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: LD_INT 1
49107: NEG
49108: PUSH
49109: LD_INT 0
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 1
49118: NEG
49119: PUSH
49120: LD_INT 1
49122: NEG
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 1
49130: NEG
49131: PUSH
49132: LD_INT 2
49134: NEG
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 0
49142: PUSH
49143: LD_INT 2
49145: NEG
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 1
49153: PUSH
49154: LD_INT 1
49156: NEG
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 2
49164: PUSH
49165: LD_INT 0
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 2
49174: PUSH
49175: LD_INT 1
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 2
49184: PUSH
49185: LD_INT 2
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 1
49194: PUSH
49195: LD_INT 2
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: PUSH
49202: LD_INT 0
49204: PUSH
49205: LD_INT 2
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: LD_INT 1
49214: NEG
49215: PUSH
49216: LD_INT 1
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 2
49225: NEG
49226: PUSH
49227: LD_INT 0
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 2
49236: NEG
49237: PUSH
49238: LD_INT 1
49240: NEG
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: PUSH
49246: LD_INT 2
49248: NEG
49249: PUSH
49250: LD_INT 2
49252: NEG
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 1
49260: NEG
49261: PUSH
49262: LD_INT 2
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 2
49271: NEG
49272: PUSH
49273: LD_INT 1
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: LD_INT 3
49282: NEG
49283: PUSH
49284: LD_INT 1
49286: NEG
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 3
49294: NEG
49295: PUSH
49296: LD_INT 2
49298: NEG
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: LIST
49323: LIST
49324: LIST
49325: LIST
49326: LIST
49327: LIST
49328: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49329: LD_ADDR_VAR 0 28
49333: PUSH
49334: LD_INT 0
49336: PUSH
49337: LD_INT 0
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: PUSH
49344: LD_INT 0
49346: PUSH
49347: LD_INT 1
49349: NEG
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: LD_INT 1
49357: PUSH
49358: LD_INT 0
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 1
49367: PUSH
49368: LD_INT 1
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 0
49377: PUSH
49378: LD_INT 1
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PUSH
49385: LD_INT 1
49387: NEG
49388: PUSH
49389: LD_INT 0
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 1
49398: NEG
49399: PUSH
49400: LD_INT 1
49402: NEG
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 1
49410: NEG
49411: PUSH
49412: LD_INT 2
49414: NEG
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 0
49422: PUSH
49423: LD_INT 2
49425: NEG
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: PUSH
49431: LD_INT 1
49433: PUSH
49434: LD_INT 1
49436: NEG
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 2
49444: PUSH
49445: LD_INT 0
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 2
49454: PUSH
49455: LD_INT 1
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 2
49464: PUSH
49465: LD_INT 2
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 1
49474: PUSH
49475: LD_INT 2
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 0
49484: PUSH
49485: LD_INT 2
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 1
49494: NEG
49495: PUSH
49496: LD_INT 1
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: LD_INT 2
49505: NEG
49506: PUSH
49507: LD_INT 0
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PUSH
49514: LD_INT 2
49516: NEG
49517: PUSH
49518: LD_INT 1
49520: NEG
49521: PUSH
49522: EMPTY
49523: LIST
49524: LIST
49525: PUSH
49526: LD_INT 2
49528: NEG
49529: PUSH
49530: LD_INT 2
49532: NEG
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: LD_INT 2
49540: NEG
49541: PUSH
49542: LD_INT 3
49544: NEG
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: LD_INT 1
49552: NEG
49553: PUSH
49554: LD_INT 3
49556: NEG
49557: PUSH
49558: EMPTY
49559: LIST
49560: LIST
49561: PUSH
49562: LD_INT 3
49564: NEG
49565: PUSH
49566: LD_INT 1
49568: NEG
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: LD_INT 3
49576: NEG
49577: PUSH
49578: LD_INT 2
49580: NEG
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: LIST
49603: LIST
49604: LIST
49605: LIST
49606: LIST
49607: LIST
49608: LIST
49609: LIST
49610: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49611: LD_ADDR_VAR 0 29
49615: PUSH
49616: LD_INT 0
49618: PUSH
49619: LD_INT 0
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: LD_INT 0
49628: PUSH
49629: LD_INT 1
49631: NEG
49632: PUSH
49633: EMPTY
49634: LIST
49635: LIST
49636: PUSH
49637: LD_INT 1
49639: PUSH
49640: LD_INT 0
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 1
49649: PUSH
49650: LD_INT 1
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: LD_INT 0
49659: PUSH
49660: LD_INT 1
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: LD_INT 1
49669: NEG
49670: PUSH
49671: LD_INT 0
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: LD_INT 1
49680: NEG
49681: PUSH
49682: LD_INT 1
49684: NEG
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 1
49692: NEG
49693: PUSH
49694: LD_INT 2
49696: NEG
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 0
49704: PUSH
49705: LD_INT 2
49707: NEG
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 1
49715: PUSH
49716: LD_INT 1
49718: NEG
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: PUSH
49724: LD_INT 2
49726: PUSH
49727: LD_INT 0
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: LD_INT 2
49736: PUSH
49737: LD_INT 1
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: PUSH
49744: LD_INT 1
49746: PUSH
49747: LD_INT 2
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: PUSH
49754: LD_INT 0
49756: PUSH
49757: LD_INT 2
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 1
49766: NEG
49767: PUSH
49768: LD_INT 1
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 2
49777: NEG
49778: PUSH
49779: LD_INT 1
49781: NEG
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 2
49789: NEG
49790: PUSH
49791: LD_INT 2
49793: NEG
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: PUSH
49799: LD_INT 2
49801: NEG
49802: PUSH
49803: LD_INT 3
49805: NEG
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 2
49813: PUSH
49814: LD_INT 1
49816: NEG
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 3
49824: PUSH
49825: LD_INT 1
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: LD_INT 1
49834: PUSH
49835: LD_INT 3
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 1
49844: NEG
49845: PUSH
49846: LD_INT 2
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 3
49855: NEG
49856: PUSH
49857: LD_INT 2
49859: NEG
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: LIST
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49890: LD_ADDR_VAR 0 30
49894: PUSH
49895: LD_INT 0
49897: PUSH
49898: LD_INT 0
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 0
49907: PUSH
49908: LD_INT 1
49910: NEG
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 1
49918: PUSH
49919: LD_INT 0
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 1
49928: PUSH
49929: LD_INT 1
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 0
49938: PUSH
49939: LD_INT 1
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: PUSH
49946: LD_INT 1
49948: NEG
49949: PUSH
49950: LD_INT 0
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PUSH
49957: LD_INT 1
49959: NEG
49960: PUSH
49961: LD_INT 1
49963: NEG
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 1
49971: NEG
49972: PUSH
49973: LD_INT 2
49975: NEG
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 0
49983: PUSH
49984: LD_INT 2
49986: NEG
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 1
49994: PUSH
49995: LD_INT 1
49997: NEG
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: PUSH
50003: LD_INT 2
50005: PUSH
50006: LD_INT 0
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 2
50015: PUSH
50016: LD_INT 1
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 2
50025: PUSH
50026: LD_INT 2
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 1
50035: PUSH
50036: LD_INT 2
50038: PUSH
50039: EMPTY
50040: LIST
50041: LIST
50042: PUSH
50043: LD_INT 1
50045: NEG
50046: PUSH
50047: LD_INT 1
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: PUSH
50054: LD_INT 2
50056: NEG
50057: PUSH
50058: LD_INT 0
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 2
50067: NEG
50068: PUSH
50069: LD_INT 1
50071: NEG
50072: PUSH
50073: EMPTY
50074: LIST
50075: LIST
50076: PUSH
50077: LD_INT 1
50079: NEG
50080: PUSH
50081: LD_INT 3
50083: NEG
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 1
50091: PUSH
50092: LD_INT 2
50094: NEG
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 3
50102: PUSH
50103: LD_INT 2
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 2
50112: PUSH
50113: LD_INT 3
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 2
50122: NEG
50123: PUSH
50124: LD_INT 1
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: LD_INT 3
50133: NEG
50134: PUSH
50135: LD_INT 1
50137: NEG
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: LIST
50157: LIST
50158: LIST
50159: LIST
50160: LIST
50161: LIST
50162: LIST
50163: LIST
50164: LIST
50165: LIST
50166: LIST
50167: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50168: LD_ADDR_VAR 0 31
50172: PUSH
50173: LD_INT 0
50175: PUSH
50176: LD_INT 0
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 0
50185: PUSH
50186: LD_INT 1
50188: NEG
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 1
50196: PUSH
50197: LD_INT 0
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 1
50206: PUSH
50207: LD_INT 1
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 0
50216: PUSH
50217: LD_INT 1
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 1
50226: NEG
50227: PUSH
50228: LD_INT 0
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: LD_INT 1
50237: NEG
50238: PUSH
50239: LD_INT 1
50241: NEG
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 1
50249: NEG
50250: PUSH
50251: LD_INT 2
50253: NEG
50254: PUSH
50255: EMPTY
50256: LIST
50257: LIST
50258: PUSH
50259: LD_INT 1
50261: PUSH
50262: LD_INT 1
50264: NEG
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 2
50272: PUSH
50273: LD_INT 0
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 2
50282: PUSH
50283: LD_INT 1
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 2
50292: PUSH
50293: LD_INT 2
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 1
50302: PUSH
50303: LD_INT 2
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 0
50312: PUSH
50313: LD_INT 2
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: LD_INT 1
50322: NEG
50323: PUSH
50324: LD_INT 1
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 2
50333: NEG
50334: PUSH
50335: LD_INT 1
50337: NEG
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 2
50345: NEG
50346: PUSH
50347: LD_INT 2
50349: NEG
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 2
50357: NEG
50358: PUSH
50359: LD_INT 3
50361: NEG
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: LD_INT 2
50369: PUSH
50370: LD_INT 1
50372: NEG
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: PUSH
50378: LD_INT 3
50380: PUSH
50381: LD_INT 1
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 1
50390: PUSH
50391: LD_INT 3
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 1
50400: NEG
50401: PUSH
50402: LD_INT 2
50404: PUSH
50405: EMPTY
50406: LIST
50407: LIST
50408: PUSH
50409: LD_INT 3
50411: NEG
50412: PUSH
50413: LD_INT 2
50415: NEG
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50446: LD_ADDR_VAR 0 32
50450: PUSH
50451: LD_INT 0
50453: PUSH
50454: LD_INT 0
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: LD_INT 0
50463: PUSH
50464: LD_INT 1
50466: NEG
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: LD_INT 1
50474: PUSH
50475: LD_INT 0
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: LD_INT 1
50484: PUSH
50485: LD_INT 1
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: LD_INT 0
50494: PUSH
50495: LD_INT 1
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 1
50504: NEG
50505: PUSH
50506: LD_INT 0
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 1
50515: NEG
50516: PUSH
50517: LD_INT 1
50519: NEG
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: PUSH
50525: LD_INT 1
50527: NEG
50528: PUSH
50529: LD_INT 2
50531: NEG
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 0
50539: PUSH
50540: LD_INT 2
50542: NEG
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 1
50550: PUSH
50551: LD_INT 1
50553: NEG
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: LD_INT 2
50561: PUSH
50562: LD_INT 1
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 2
50571: PUSH
50572: LD_INT 2
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 1
50581: PUSH
50582: LD_INT 2
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 0
50591: PUSH
50592: LD_INT 2
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: PUSH
50599: LD_INT 1
50601: NEG
50602: PUSH
50603: LD_INT 1
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: PUSH
50610: LD_INT 2
50612: NEG
50613: PUSH
50614: LD_INT 0
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: LD_INT 2
50623: NEG
50624: PUSH
50625: LD_INT 1
50627: NEG
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 1
50635: NEG
50636: PUSH
50637: LD_INT 3
50639: NEG
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 1
50647: PUSH
50648: LD_INT 2
50650: NEG
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 3
50658: PUSH
50659: LD_INT 2
50661: PUSH
50662: EMPTY
50663: LIST
50664: LIST
50665: PUSH
50666: LD_INT 2
50668: PUSH
50669: LD_INT 3
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: LD_INT 2
50678: NEG
50679: PUSH
50680: LD_INT 1
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: LD_INT 3
50689: NEG
50690: PUSH
50691: LD_INT 1
50693: NEG
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: LIST
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: LIST
50708: LIST
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: LIST
50714: LIST
50715: LIST
50716: LIST
50717: LIST
50718: LIST
50719: LIST
50720: LIST
50721: LIST
50722: LIST
50723: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50724: LD_ADDR_VAR 0 33
50728: PUSH
50729: LD_INT 0
50731: PUSH
50732: LD_INT 0
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: PUSH
50739: LD_INT 0
50741: PUSH
50742: LD_INT 1
50744: NEG
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: PUSH
50750: LD_INT 1
50752: PUSH
50753: LD_INT 0
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: PUSH
50760: LD_INT 1
50762: PUSH
50763: LD_INT 1
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 0
50772: PUSH
50773: LD_INT 1
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 1
50782: NEG
50783: PUSH
50784: LD_INT 0
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 1
50793: NEG
50794: PUSH
50795: LD_INT 1
50797: NEG
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 1
50805: NEG
50806: PUSH
50807: LD_INT 2
50809: NEG
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 1
50817: PUSH
50818: LD_INT 1
50820: NEG
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 2
50828: PUSH
50829: LD_INT 0
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 2
50838: PUSH
50839: LD_INT 1
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 1
50848: PUSH
50849: LD_INT 2
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 0
50858: PUSH
50859: LD_INT 2
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 1
50868: NEG
50869: PUSH
50870: LD_INT 1
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 2
50879: NEG
50880: PUSH
50881: LD_INT 0
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 2
50890: NEG
50891: PUSH
50892: LD_INT 1
50894: NEG
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 2
50902: NEG
50903: PUSH
50904: LD_INT 2
50906: NEG
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 2
50914: NEG
50915: PUSH
50916: LD_INT 3
50918: NEG
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 2
50926: PUSH
50927: LD_INT 1
50929: NEG
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 3
50937: PUSH
50938: LD_INT 1
50940: PUSH
50941: EMPTY
50942: LIST
50943: LIST
50944: PUSH
50945: LD_INT 1
50947: PUSH
50948: LD_INT 3
50950: PUSH
50951: EMPTY
50952: LIST
50953: LIST
50954: PUSH
50955: LD_INT 1
50957: NEG
50958: PUSH
50959: LD_INT 2
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 3
50968: NEG
50969: PUSH
50970: LD_INT 2
50972: NEG
50973: PUSH
50974: EMPTY
50975: LIST
50976: LIST
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: LIST
50982: LIST
50983: LIST
50984: LIST
50985: LIST
50986: LIST
50987: LIST
50988: LIST
50989: LIST
50990: LIST
50991: LIST
50992: LIST
50993: LIST
50994: LIST
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: LIST
51002: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51003: LD_ADDR_VAR 0 34
51007: PUSH
51008: LD_INT 0
51010: PUSH
51011: LD_INT 0
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 0
51020: PUSH
51021: LD_INT 1
51023: NEG
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 1
51031: PUSH
51032: LD_INT 0
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 1
51041: PUSH
51042: LD_INT 1
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: LD_INT 0
51051: PUSH
51052: LD_INT 1
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: LD_INT 1
51061: NEG
51062: PUSH
51063: LD_INT 0
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 1
51072: NEG
51073: PUSH
51074: LD_INT 1
51076: NEG
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: LD_INT 1
51084: NEG
51085: PUSH
51086: LD_INT 2
51088: NEG
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 0
51096: PUSH
51097: LD_INT 2
51099: NEG
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 1
51107: PUSH
51108: LD_INT 1
51110: NEG
51111: PUSH
51112: EMPTY
51113: LIST
51114: LIST
51115: PUSH
51116: LD_INT 2
51118: PUSH
51119: LD_INT 1
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 2
51128: PUSH
51129: LD_INT 2
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 1
51138: PUSH
51139: LD_INT 2
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 1
51148: NEG
51149: PUSH
51150: LD_INT 1
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 2
51159: NEG
51160: PUSH
51161: LD_INT 0
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 2
51170: NEG
51171: PUSH
51172: LD_INT 1
51174: NEG
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: LD_INT 2
51182: NEG
51183: PUSH
51184: LD_INT 2
51186: NEG
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: LD_INT 1
51194: NEG
51195: PUSH
51196: LD_INT 3
51198: NEG
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 1
51206: PUSH
51207: LD_INT 2
51209: NEG
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 3
51217: PUSH
51218: LD_INT 2
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 2
51227: PUSH
51228: LD_INT 3
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 2
51237: NEG
51238: PUSH
51239: LD_INT 1
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 3
51248: NEG
51249: PUSH
51250: LD_INT 1
51252: NEG
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: LIST
51262: LIST
51263: LIST
51264: LIST
51265: LIST
51266: LIST
51267: LIST
51268: LIST
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: LIST
51274: LIST
51275: LIST
51276: LIST
51277: LIST
51278: LIST
51279: LIST
51280: LIST
51281: LIST
51282: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51283: LD_ADDR_VAR 0 35
51287: PUSH
51288: LD_INT 0
51290: PUSH
51291: LD_INT 0
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: LD_INT 0
51300: PUSH
51301: LD_INT 1
51303: NEG
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: LD_INT 1
51311: PUSH
51312: LD_INT 0
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 1
51321: PUSH
51322: LD_INT 1
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: LD_INT 0
51331: PUSH
51332: LD_INT 1
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: LD_INT 1
51341: NEG
51342: PUSH
51343: LD_INT 0
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 1
51352: NEG
51353: PUSH
51354: LD_INT 1
51356: NEG
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 2
51364: PUSH
51365: LD_INT 1
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 2
51374: NEG
51375: PUSH
51376: LD_INT 1
51378: NEG
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51395: LD_ADDR_VAR 0 36
51399: PUSH
51400: LD_INT 0
51402: PUSH
51403: LD_INT 0
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 0
51412: PUSH
51413: LD_INT 1
51415: NEG
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 1
51423: PUSH
51424: LD_INT 0
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 1
51433: PUSH
51434: LD_INT 1
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 0
51443: PUSH
51444: LD_INT 1
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 1
51453: NEG
51454: PUSH
51455: LD_INT 0
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 1
51464: NEG
51465: PUSH
51466: LD_INT 1
51468: NEG
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 1
51476: NEG
51477: PUSH
51478: LD_INT 2
51480: NEG
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 1
51488: PUSH
51489: LD_INT 2
51491: PUSH
51492: EMPTY
51493: LIST
51494: LIST
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51507: LD_ADDR_VAR 0 37
51511: PUSH
51512: LD_INT 0
51514: PUSH
51515: LD_INT 0
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 0
51524: PUSH
51525: LD_INT 1
51527: NEG
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 1
51535: PUSH
51536: LD_INT 0
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 1
51545: PUSH
51546: LD_INT 1
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: LD_INT 0
51555: PUSH
51556: LD_INT 1
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 1
51565: NEG
51566: PUSH
51567: LD_INT 0
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: PUSH
51574: LD_INT 1
51576: NEG
51577: PUSH
51578: LD_INT 1
51580: NEG
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 1
51588: PUSH
51589: LD_INT 1
51591: NEG
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 1
51599: NEG
51600: PUSH
51601: LD_INT 1
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: LIST
51618: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51619: LD_ADDR_VAR 0 38
51623: PUSH
51624: LD_INT 0
51626: PUSH
51627: LD_INT 0
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 0
51636: PUSH
51637: LD_INT 1
51639: NEG
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PUSH
51645: LD_INT 1
51647: PUSH
51648: LD_INT 0
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 1
51657: PUSH
51658: LD_INT 1
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 0
51667: PUSH
51668: LD_INT 1
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 1
51677: NEG
51678: PUSH
51679: LD_INT 0
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 1
51688: NEG
51689: PUSH
51690: LD_INT 1
51692: NEG
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 2
51700: PUSH
51701: LD_INT 1
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 2
51710: NEG
51711: PUSH
51712: LD_INT 1
51714: NEG
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: LIST
51727: LIST
51728: LIST
51729: LIST
51730: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51731: LD_ADDR_VAR 0 39
51735: PUSH
51736: LD_INT 0
51738: PUSH
51739: LD_INT 0
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 0
51748: PUSH
51749: LD_INT 1
51751: NEG
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: LD_INT 1
51759: PUSH
51760: LD_INT 0
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 1
51769: PUSH
51770: LD_INT 1
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 0
51779: PUSH
51780: LD_INT 1
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 1
51789: NEG
51790: PUSH
51791: LD_INT 0
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 1
51800: NEG
51801: PUSH
51802: LD_INT 1
51804: NEG
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 1
51812: NEG
51813: PUSH
51814: LD_INT 2
51816: NEG
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 1
51824: PUSH
51825: LD_INT 2
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51843: LD_ADDR_VAR 0 40
51847: PUSH
51848: LD_INT 0
51850: PUSH
51851: LD_INT 0
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 0
51860: PUSH
51861: LD_INT 1
51863: NEG
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 1
51871: PUSH
51872: LD_INT 0
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 1
51881: PUSH
51882: LD_INT 1
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 0
51891: PUSH
51892: LD_INT 1
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 1
51901: NEG
51902: PUSH
51903: LD_INT 0
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 1
51912: NEG
51913: PUSH
51914: LD_INT 1
51916: NEG
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 1
51924: PUSH
51925: LD_INT 1
51927: NEG
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 1
51935: NEG
51936: PUSH
51937: LD_INT 1
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: LIST
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: LIST
51953: LIST
51954: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51955: LD_ADDR_VAR 0 41
51959: PUSH
51960: LD_INT 0
51962: PUSH
51963: LD_INT 0
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 0
51972: PUSH
51973: LD_INT 1
51975: NEG
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 1
51983: PUSH
51984: LD_INT 0
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 1
51993: PUSH
51994: LD_INT 1
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 0
52003: PUSH
52004: LD_INT 1
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 1
52013: NEG
52014: PUSH
52015: LD_INT 0
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 1
52024: NEG
52025: PUSH
52026: LD_INT 1
52028: NEG
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 1
52036: NEG
52037: PUSH
52038: LD_INT 2
52040: NEG
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 1
52048: PUSH
52049: LD_INT 1
52051: NEG
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: LD_INT 2
52059: PUSH
52060: LD_INT 0
52062: PUSH
52063: EMPTY
52064: LIST
52065: LIST
52066: PUSH
52067: LD_INT 2
52069: PUSH
52070: LD_INT 1
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 2
52079: PUSH
52080: LD_INT 2
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 1
52089: PUSH
52090: LD_INT 2
52092: PUSH
52093: EMPTY
52094: LIST
52095: LIST
52096: PUSH
52097: LD_INT 1
52099: NEG
52100: PUSH
52101: LD_INT 1
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 2
52110: NEG
52111: PUSH
52112: LD_INT 0
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 2
52121: NEG
52122: PUSH
52123: LD_INT 1
52125: NEG
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 2
52133: NEG
52134: PUSH
52135: LD_INT 2
52137: NEG
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 2
52145: NEG
52146: PUSH
52147: LD_INT 3
52149: NEG
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: LD_INT 2
52157: PUSH
52158: LD_INT 1
52160: NEG
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 3
52168: PUSH
52169: LD_INT 0
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 3
52178: PUSH
52179: LD_INT 1
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 3
52188: PUSH
52189: LD_INT 2
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: LD_INT 3
52198: PUSH
52199: LD_INT 3
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: LD_INT 2
52208: PUSH
52209: LD_INT 3
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 2
52218: NEG
52219: PUSH
52220: LD_INT 1
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: LD_INT 3
52229: NEG
52230: PUSH
52231: LD_INT 0
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 3
52240: NEG
52241: PUSH
52242: LD_INT 1
52244: NEG
52245: PUSH
52246: EMPTY
52247: LIST
52248: LIST
52249: PUSH
52250: LD_INT 3
52252: NEG
52253: PUSH
52254: LD_INT 2
52256: NEG
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: PUSH
52262: LD_INT 3
52264: NEG
52265: PUSH
52266: LD_INT 3
52268: NEG
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: LIST
52278: LIST
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: LIST
52285: LIST
52286: LIST
52287: LIST
52288: LIST
52289: LIST
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: LIST
52299: LIST
52300: LIST
52301: LIST
52302: LIST
52303: LIST
52304: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52305: LD_ADDR_VAR 0 42
52309: PUSH
52310: LD_INT 0
52312: PUSH
52313: LD_INT 0
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 0
52322: PUSH
52323: LD_INT 1
52325: NEG
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 1
52333: PUSH
52334: LD_INT 0
52336: PUSH
52337: EMPTY
52338: LIST
52339: LIST
52340: PUSH
52341: LD_INT 1
52343: PUSH
52344: LD_INT 1
52346: PUSH
52347: EMPTY
52348: LIST
52349: LIST
52350: PUSH
52351: LD_INT 0
52353: PUSH
52354: LD_INT 1
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 1
52363: NEG
52364: PUSH
52365: LD_INT 0
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 1
52374: NEG
52375: PUSH
52376: LD_INT 1
52378: NEG
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 1
52386: NEG
52387: PUSH
52388: LD_INT 2
52390: NEG
52391: PUSH
52392: EMPTY
52393: LIST
52394: LIST
52395: PUSH
52396: LD_INT 0
52398: PUSH
52399: LD_INT 2
52401: NEG
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 1
52409: PUSH
52410: LD_INT 1
52412: NEG
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 2
52420: PUSH
52421: LD_INT 1
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 2
52430: PUSH
52431: LD_INT 2
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 1
52440: PUSH
52441: LD_INT 2
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 0
52450: PUSH
52451: LD_INT 2
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 1
52460: NEG
52461: PUSH
52462: LD_INT 1
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: LD_INT 2
52471: NEG
52472: PUSH
52473: LD_INT 1
52475: NEG
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 2
52483: NEG
52484: PUSH
52485: LD_INT 2
52487: NEG
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PUSH
52493: LD_INT 2
52495: NEG
52496: PUSH
52497: LD_INT 3
52499: NEG
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 1
52507: NEG
52508: PUSH
52509: LD_INT 3
52511: NEG
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 0
52519: PUSH
52520: LD_INT 3
52522: NEG
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: PUSH
52528: LD_INT 1
52530: PUSH
52531: LD_INT 2
52533: NEG
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: PUSH
52539: LD_INT 3
52541: PUSH
52542: LD_INT 2
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 3
52551: PUSH
52552: LD_INT 3
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 2
52561: PUSH
52562: LD_INT 3
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 1
52571: PUSH
52572: LD_INT 3
52574: PUSH
52575: EMPTY
52576: LIST
52577: LIST
52578: PUSH
52579: LD_INT 0
52581: PUSH
52582: LD_INT 3
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 1
52591: NEG
52592: PUSH
52593: LD_INT 2
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: PUSH
52600: LD_INT 3
52602: NEG
52603: PUSH
52604: LD_INT 2
52606: NEG
52607: PUSH
52608: EMPTY
52609: LIST
52610: LIST
52611: PUSH
52612: LD_INT 3
52614: NEG
52615: PUSH
52616: LD_INT 3
52618: NEG
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: LIST
52646: LIST
52647: LIST
52648: LIST
52649: LIST
52650: LIST
52651: LIST
52652: LIST
52653: LIST
52654: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52655: LD_ADDR_VAR 0 43
52659: PUSH
52660: LD_INT 0
52662: PUSH
52663: LD_INT 0
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: PUSH
52670: LD_INT 0
52672: PUSH
52673: LD_INT 1
52675: NEG
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 1
52683: PUSH
52684: LD_INT 0
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 1
52693: PUSH
52694: LD_INT 1
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: LD_INT 0
52703: PUSH
52704: LD_INT 1
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 1
52713: NEG
52714: PUSH
52715: LD_INT 0
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 1
52724: NEG
52725: PUSH
52726: LD_INT 1
52728: NEG
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 1
52736: NEG
52737: PUSH
52738: LD_INT 2
52740: NEG
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: PUSH
52746: LD_INT 0
52748: PUSH
52749: LD_INT 2
52751: NEG
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 1
52759: PUSH
52760: LD_INT 1
52762: NEG
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 2
52770: PUSH
52771: LD_INT 0
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 2
52780: PUSH
52781: LD_INT 1
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 1
52790: PUSH
52791: LD_INT 2
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: PUSH
52798: LD_INT 0
52800: PUSH
52801: LD_INT 2
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 1
52810: NEG
52811: PUSH
52812: LD_INT 1
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 2
52821: NEG
52822: PUSH
52823: LD_INT 0
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PUSH
52830: LD_INT 2
52832: NEG
52833: PUSH
52834: LD_INT 1
52836: NEG
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 1
52844: NEG
52845: PUSH
52846: LD_INT 3
52848: NEG
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 0
52856: PUSH
52857: LD_INT 3
52859: NEG
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 1
52867: PUSH
52868: LD_INT 2
52870: NEG
52871: PUSH
52872: EMPTY
52873: LIST
52874: LIST
52875: PUSH
52876: LD_INT 2
52878: PUSH
52879: LD_INT 1
52881: NEG
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 3
52889: PUSH
52890: LD_INT 0
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 3
52899: PUSH
52900: LD_INT 1
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 1
52909: PUSH
52910: LD_INT 3
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 0
52919: PUSH
52920: LD_INT 3
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 1
52929: NEG
52930: PUSH
52931: LD_INT 2
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 2
52940: NEG
52941: PUSH
52942: LD_INT 1
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: LD_INT 3
52951: NEG
52952: PUSH
52953: LD_INT 0
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 3
52962: NEG
52963: PUSH
52964: LD_INT 1
52966: NEG
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: LIST
52989: LIST
52990: LIST
52991: LIST
52992: LIST
52993: LIST
52994: LIST
52995: LIST
52996: LIST
52997: LIST
52998: LIST
52999: LIST
53000: LIST
53001: LIST
53002: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53003: LD_ADDR_VAR 0 44
53007: PUSH
53008: LD_INT 0
53010: PUSH
53011: LD_INT 0
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: PUSH
53018: LD_INT 0
53020: PUSH
53021: LD_INT 1
53023: NEG
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 1
53031: PUSH
53032: LD_INT 0
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: LD_INT 1
53041: PUSH
53042: LD_INT 1
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 0
53051: PUSH
53052: LD_INT 1
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 1
53061: NEG
53062: PUSH
53063: LD_INT 0
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 1
53072: NEG
53073: PUSH
53074: LD_INT 1
53076: NEG
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 1
53084: NEG
53085: PUSH
53086: LD_INT 2
53088: NEG
53089: PUSH
53090: EMPTY
53091: LIST
53092: LIST
53093: PUSH
53094: LD_INT 1
53096: PUSH
53097: LD_INT 1
53099: NEG
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 2
53107: PUSH
53108: LD_INT 0
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: LD_INT 2
53117: PUSH
53118: LD_INT 1
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 2
53127: PUSH
53128: LD_INT 2
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 1
53137: PUSH
53138: LD_INT 2
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 1
53147: NEG
53148: PUSH
53149: LD_INT 1
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 2
53158: NEG
53159: PUSH
53160: LD_INT 0
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 2
53169: NEG
53170: PUSH
53171: LD_INT 1
53173: NEG
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 2
53181: NEG
53182: PUSH
53183: LD_INT 2
53185: NEG
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: LD_INT 2
53193: NEG
53194: PUSH
53195: LD_INT 3
53197: NEG
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 2
53205: PUSH
53206: LD_INT 1
53208: NEG
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 3
53216: PUSH
53217: LD_INT 0
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 3
53226: PUSH
53227: LD_INT 1
53229: PUSH
53230: EMPTY
53231: LIST
53232: LIST
53233: PUSH
53234: LD_INT 3
53236: PUSH
53237: LD_INT 2
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 3
53246: PUSH
53247: LD_INT 3
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: PUSH
53254: LD_INT 2
53256: PUSH
53257: LD_INT 3
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: LD_INT 2
53266: NEG
53267: PUSH
53268: LD_INT 1
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 3
53277: NEG
53278: PUSH
53279: LD_INT 0
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: LD_INT 3
53288: NEG
53289: PUSH
53290: LD_INT 1
53292: NEG
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: LD_INT 3
53300: NEG
53301: PUSH
53302: LD_INT 2
53304: NEG
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: LD_INT 3
53312: NEG
53313: PUSH
53314: LD_INT 3
53316: NEG
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: LIST
53330: LIST
53331: LIST
53332: LIST
53333: LIST
53334: LIST
53335: LIST
53336: LIST
53337: LIST
53338: LIST
53339: LIST
53340: LIST
53341: LIST
53342: LIST
53343: LIST
53344: LIST
53345: LIST
53346: LIST
53347: LIST
53348: LIST
53349: LIST
53350: LIST
53351: LIST
53352: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53353: LD_ADDR_VAR 0 45
53357: PUSH
53358: LD_INT 0
53360: PUSH
53361: LD_INT 0
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 0
53370: PUSH
53371: LD_INT 1
53373: NEG
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 1
53381: PUSH
53382: LD_INT 0
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 1
53391: PUSH
53392: LD_INT 1
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 0
53401: PUSH
53402: LD_INT 1
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 1
53411: NEG
53412: PUSH
53413: LD_INT 0
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 1
53422: NEG
53423: PUSH
53424: LD_INT 1
53426: NEG
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 1
53434: NEG
53435: PUSH
53436: LD_INT 2
53438: NEG
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: LD_INT 0
53446: PUSH
53447: LD_INT 2
53449: NEG
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: LD_INT 1
53457: PUSH
53458: LD_INT 1
53460: NEG
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: LD_INT 2
53468: PUSH
53469: LD_INT 1
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: LD_INT 2
53478: PUSH
53479: LD_INT 2
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 1
53488: PUSH
53489: LD_INT 2
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: LD_INT 0
53498: PUSH
53499: LD_INT 2
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 1
53508: NEG
53509: PUSH
53510: LD_INT 1
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: LD_INT 2
53519: NEG
53520: PUSH
53521: LD_INT 1
53523: NEG
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: LD_INT 2
53531: NEG
53532: PUSH
53533: LD_INT 2
53535: NEG
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 2
53543: NEG
53544: PUSH
53545: LD_INT 3
53547: NEG
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 1
53555: NEG
53556: PUSH
53557: LD_INT 3
53559: NEG
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 0
53567: PUSH
53568: LD_INT 3
53570: NEG
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 1
53578: PUSH
53579: LD_INT 2
53581: NEG
53582: PUSH
53583: EMPTY
53584: LIST
53585: LIST
53586: PUSH
53587: LD_INT 3
53589: PUSH
53590: LD_INT 2
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 3
53599: PUSH
53600: LD_INT 3
53602: PUSH
53603: EMPTY
53604: LIST
53605: LIST
53606: PUSH
53607: LD_INT 2
53609: PUSH
53610: LD_INT 3
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 1
53619: PUSH
53620: LD_INT 3
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: LD_INT 0
53629: PUSH
53630: LD_INT 3
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 1
53639: NEG
53640: PUSH
53641: LD_INT 2
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 3
53650: NEG
53651: PUSH
53652: LD_INT 2
53654: NEG
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: PUSH
53660: LD_INT 3
53662: NEG
53663: PUSH
53664: LD_INT 3
53666: NEG
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: LIST
53697: LIST
53698: LIST
53699: LIST
53700: LIST
53701: LIST
53702: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53703: LD_ADDR_VAR 0 46
53707: PUSH
53708: LD_INT 0
53710: PUSH
53711: LD_INT 0
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 0
53720: PUSH
53721: LD_INT 1
53723: NEG
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 1
53731: PUSH
53732: LD_INT 0
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 1
53741: PUSH
53742: LD_INT 1
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 0
53751: PUSH
53752: LD_INT 1
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 1
53761: NEG
53762: PUSH
53763: LD_INT 0
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 1
53772: NEG
53773: PUSH
53774: LD_INT 1
53776: NEG
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 1
53784: NEG
53785: PUSH
53786: LD_INT 2
53788: NEG
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: LD_INT 0
53796: PUSH
53797: LD_INT 2
53799: NEG
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 1
53807: PUSH
53808: LD_INT 1
53810: NEG
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: LD_INT 2
53818: PUSH
53819: LD_INT 0
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: PUSH
53826: LD_INT 2
53828: PUSH
53829: LD_INT 1
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 1
53838: PUSH
53839: LD_INT 2
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 0
53848: PUSH
53849: LD_INT 2
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 1
53858: NEG
53859: PUSH
53860: LD_INT 1
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 2
53869: NEG
53870: PUSH
53871: LD_INT 0
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: LD_INT 2
53880: NEG
53881: PUSH
53882: LD_INT 1
53884: NEG
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 1
53892: NEG
53893: PUSH
53894: LD_INT 3
53896: NEG
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 0
53904: PUSH
53905: LD_INT 3
53907: NEG
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 1
53915: PUSH
53916: LD_INT 2
53918: NEG
53919: PUSH
53920: EMPTY
53921: LIST
53922: LIST
53923: PUSH
53924: LD_INT 2
53926: PUSH
53927: LD_INT 1
53929: NEG
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 3
53937: PUSH
53938: LD_INT 0
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 3
53947: PUSH
53948: LD_INT 1
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 1
53957: PUSH
53958: LD_INT 3
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 0
53967: PUSH
53968: LD_INT 3
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 1
53977: NEG
53978: PUSH
53979: LD_INT 2
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 2
53988: NEG
53989: PUSH
53990: LD_INT 1
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: LD_INT 3
53999: NEG
54000: PUSH
54001: LD_INT 0
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 3
54010: NEG
54011: PUSH
54012: LD_INT 1
54014: NEG
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: LIST
54024: LIST
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54051: LD_ADDR_VAR 0 47
54055: PUSH
54056: LD_INT 0
54058: PUSH
54059: LD_INT 0
54061: PUSH
54062: EMPTY
54063: LIST
54064: LIST
54065: PUSH
54066: LD_INT 0
54068: PUSH
54069: LD_INT 1
54071: NEG
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 1
54079: PUSH
54080: LD_INT 0
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 1
54089: PUSH
54090: LD_INT 1
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: LD_INT 0
54099: PUSH
54100: LD_INT 1
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: LD_INT 1
54109: NEG
54110: PUSH
54111: LD_INT 0
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: LD_INT 1
54120: NEG
54121: PUSH
54122: LD_INT 1
54124: NEG
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 1
54132: NEG
54133: PUSH
54134: LD_INT 2
54136: NEG
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PUSH
54142: LD_INT 0
54144: PUSH
54145: LD_INT 2
54147: NEG
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 1
54155: PUSH
54156: LD_INT 1
54158: NEG
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: PUSH
54164: LD_INT 2
54166: NEG
54167: PUSH
54168: LD_INT 1
54170: NEG
54171: PUSH
54172: EMPTY
54173: LIST
54174: LIST
54175: PUSH
54176: LD_INT 2
54178: NEG
54179: PUSH
54180: LD_INT 2
54182: NEG
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: LIST
54197: LIST
54198: LIST
54199: LIST
54200: LIST
54201: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54202: LD_ADDR_VAR 0 48
54206: PUSH
54207: LD_INT 0
54209: PUSH
54210: LD_INT 0
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: LD_INT 0
54219: PUSH
54220: LD_INT 1
54222: NEG
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 1
54230: PUSH
54231: LD_INT 0
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 1
54240: PUSH
54241: LD_INT 1
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 0
54250: PUSH
54251: LD_INT 1
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 1
54260: NEG
54261: PUSH
54262: LD_INT 0
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 1
54271: NEG
54272: PUSH
54273: LD_INT 1
54275: NEG
54276: PUSH
54277: EMPTY
54278: LIST
54279: LIST
54280: PUSH
54281: LD_INT 1
54283: NEG
54284: PUSH
54285: LD_INT 2
54287: NEG
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 0
54295: PUSH
54296: LD_INT 2
54298: NEG
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 1
54306: PUSH
54307: LD_INT 1
54309: NEG
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 2
54317: PUSH
54318: LD_INT 0
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 2
54327: PUSH
54328: LD_INT 1
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54349: LD_ADDR_VAR 0 49
54353: PUSH
54354: LD_INT 0
54356: PUSH
54357: LD_INT 0
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 0
54366: PUSH
54367: LD_INT 1
54369: NEG
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 1
54377: PUSH
54378: LD_INT 0
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 1
54387: PUSH
54388: LD_INT 1
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: LD_INT 0
54397: PUSH
54398: LD_INT 1
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 1
54407: NEG
54408: PUSH
54409: LD_INT 0
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 1
54418: NEG
54419: PUSH
54420: LD_INT 1
54422: NEG
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 1
54430: PUSH
54431: LD_INT 1
54433: NEG
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 2
54441: PUSH
54442: LD_INT 0
54444: PUSH
54445: EMPTY
54446: LIST
54447: LIST
54448: PUSH
54449: LD_INT 2
54451: PUSH
54452: LD_INT 1
54454: PUSH
54455: EMPTY
54456: LIST
54457: LIST
54458: PUSH
54459: LD_INT 2
54461: PUSH
54462: LD_INT 2
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 1
54471: PUSH
54472: LD_INT 2
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: LIST
54483: LIST
54484: LIST
54485: LIST
54486: LIST
54487: LIST
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54493: LD_ADDR_VAR 0 50
54497: PUSH
54498: LD_INT 0
54500: PUSH
54501: LD_INT 0
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 0
54510: PUSH
54511: LD_INT 1
54513: NEG
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: PUSH
54519: LD_INT 1
54521: PUSH
54522: LD_INT 0
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 1
54531: PUSH
54532: LD_INT 1
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: PUSH
54539: LD_INT 0
54541: PUSH
54542: LD_INT 1
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 1
54551: NEG
54552: PUSH
54553: LD_INT 0
54555: PUSH
54556: EMPTY
54557: LIST
54558: LIST
54559: PUSH
54560: LD_INT 1
54562: NEG
54563: PUSH
54564: LD_INT 1
54566: NEG
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 2
54574: PUSH
54575: LD_INT 1
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 2
54584: PUSH
54585: LD_INT 2
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 1
54594: PUSH
54595: LD_INT 2
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 0
54604: PUSH
54605: LD_INT 2
54607: PUSH
54608: EMPTY
54609: LIST
54610: LIST
54611: PUSH
54612: LD_INT 1
54614: NEG
54615: PUSH
54616: LD_INT 1
54618: PUSH
54619: EMPTY
54620: LIST
54621: LIST
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: LIST
54627: LIST
54628: LIST
54629: LIST
54630: LIST
54631: LIST
54632: LIST
54633: LIST
54634: LIST
54635: LIST
54636: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54637: LD_ADDR_VAR 0 51
54641: PUSH
54642: LD_INT 0
54644: PUSH
54645: LD_INT 0
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: LD_INT 0
54654: PUSH
54655: LD_INT 1
54657: NEG
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 1
54665: PUSH
54666: LD_INT 0
54668: PUSH
54669: EMPTY
54670: LIST
54671: LIST
54672: PUSH
54673: LD_INT 1
54675: PUSH
54676: LD_INT 1
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 0
54685: PUSH
54686: LD_INT 1
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 1
54695: NEG
54696: PUSH
54697: LD_INT 0
54699: PUSH
54700: EMPTY
54701: LIST
54702: LIST
54703: PUSH
54704: LD_INT 1
54706: NEG
54707: PUSH
54708: LD_INT 1
54710: NEG
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 1
54718: PUSH
54719: LD_INT 2
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: PUSH
54726: LD_INT 0
54728: PUSH
54729: LD_INT 2
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: LD_INT 1
54738: NEG
54739: PUSH
54740: LD_INT 1
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 2
54749: NEG
54750: PUSH
54751: LD_INT 0
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 2
54760: NEG
54761: PUSH
54762: LD_INT 1
54764: NEG
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54784: LD_ADDR_VAR 0 52
54788: PUSH
54789: LD_INT 0
54791: PUSH
54792: LD_INT 0
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 0
54801: PUSH
54802: LD_INT 1
54804: NEG
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: LD_INT 1
54812: PUSH
54813: LD_INT 0
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 1
54822: PUSH
54823: LD_INT 1
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 0
54832: PUSH
54833: LD_INT 1
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: LD_INT 1
54842: NEG
54843: PUSH
54844: LD_INT 0
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 1
54853: NEG
54854: PUSH
54855: LD_INT 1
54857: NEG
54858: PUSH
54859: EMPTY
54860: LIST
54861: LIST
54862: PUSH
54863: LD_INT 1
54865: NEG
54866: PUSH
54867: LD_INT 2
54869: NEG
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 1
54877: NEG
54878: PUSH
54879: LD_INT 1
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 2
54888: NEG
54889: PUSH
54890: LD_INT 0
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 2
54899: NEG
54900: PUSH
54901: LD_INT 1
54903: NEG
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 2
54911: NEG
54912: PUSH
54913: LD_INT 2
54915: NEG
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: LIST
54933: LIST
54934: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54935: LD_ADDR_VAR 0 53
54939: PUSH
54940: LD_INT 0
54942: PUSH
54943: LD_INT 0
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 0
54952: PUSH
54953: LD_INT 1
54955: NEG
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: LD_INT 1
54963: PUSH
54964: LD_INT 0
54966: PUSH
54967: EMPTY
54968: LIST
54969: LIST
54970: PUSH
54971: LD_INT 1
54973: PUSH
54974: LD_INT 1
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 0
54983: PUSH
54984: LD_INT 1
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 1
54993: NEG
54994: PUSH
54995: LD_INT 0
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 1
55004: NEG
55005: PUSH
55006: LD_INT 1
55008: NEG
55009: PUSH
55010: EMPTY
55011: LIST
55012: LIST
55013: PUSH
55014: LD_INT 1
55016: NEG
55017: PUSH
55018: LD_INT 2
55020: NEG
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 0
55028: PUSH
55029: LD_INT 2
55031: NEG
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 1
55039: PUSH
55040: LD_INT 1
55042: NEG
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 2
55050: PUSH
55051: LD_INT 0
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 2
55060: PUSH
55061: LD_INT 1
55063: PUSH
55064: EMPTY
55065: LIST
55066: LIST
55067: PUSH
55068: LD_INT 2
55070: PUSH
55071: LD_INT 2
55073: PUSH
55074: EMPTY
55075: LIST
55076: LIST
55077: PUSH
55078: LD_INT 1
55080: PUSH
55081: LD_INT 2
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 0
55090: PUSH
55091: LD_INT 2
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: LD_INT 1
55100: NEG
55101: PUSH
55102: LD_INT 1
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: LD_INT 2
55111: NEG
55112: PUSH
55113: LD_INT 0
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 2
55122: NEG
55123: PUSH
55124: LD_INT 1
55126: NEG
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 2
55134: NEG
55135: PUSH
55136: LD_INT 2
55138: NEG
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55165: LD_ADDR_VAR 0 54
55169: PUSH
55170: LD_INT 0
55172: PUSH
55173: LD_INT 0
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 0
55182: PUSH
55183: LD_INT 1
55185: NEG
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: LD_INT 1
55193: PUSH
55194: LD_INT 0
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: LD_INT 1
55203: PUSH
55204: LD_INT 1
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PUSH
55211: LD_INT 0
55213: PUSH
55214: LD_INT 1
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 1
55223: NEG
55224: PUSH
55225: LD_INT 0
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 1
55234: NEG
55235: PUSH
55236: LD_INT 1
55238: NEG
55239: PUSH
55240: EMPTY
55241: LIST
55242: LIST
55243: PUSH
55244: LD_INT 1
55246: NEG
55247: PUSH
55248: LD_INT 2
55250: NEG
55251: PUSH
55252: EMPTY
55253: LIST
55254: LIST
55255: PUSH
55256: LD_INT 0
55258: PUSH
55259: LD_INT 2
55261: NEG
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 1
55269: PUSH
55270: LD_INT 1
55272: NEG
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: LD_INT 2
55280: PUSH
55281: LD_INT 0
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: LD_INT 2
55290: PUSH
55291: LD_INT 1
55293: PUSH
55294: EMPTY
55295: LIST
55296: LIST
55297: PUSH
55298: LD_INT 2
55300: PUSH
55301: LD_INT 2
55303: PUSH
55304: EMPTY
55305: LIST
55306: LIST
55307: PUSH
55308: LD_INT 1
55310: PUSH
55311: LD_INT 2
55313: PUSH
55314: EMPTY
55315: LIST
55316: LIST
55317: PUSH
55318: LD_INT 0
55320: PUSH
55321: LD_INT 2
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: LD_INT 1
55330: NEG
55331: PUSH
55332: LD_INT 1
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: PUSH
55339: LD_INT 2
55341: NEG
55342: PUSH
55343: LD_INT 0
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 2
55352: NEG
55353: PUSH
55354: LD_INT 1
55356: NEG
55357: PUSH
55358: EMPTY
55359: LIST
55360: LIST
55361: PUSH
55362: LD_INT 2
55364: NEG
55365: PUSH
55366: LD_INT 2
55368: NEG
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55395: LD_ADDR_VAR 0 55
55399: PUSH
55400: LD_INT 0
55402: PUSH
55403: LD_INT 0
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: LD_INT 0
55412: PUSH
55413: LD_INT 1
55415: NEG
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 1
55423: PUSH
55424: LD_INT 0
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 1
55433: PUSH
55434: LD_INT 1
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 0
55443: PUSH
55444: LD_INT 1
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 1
55453: NEG
55454: PUSH
55455: LD_INT 0
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 1
55464: NEG
55465: PUSH
55466: LD_INT 1
55468: NEG
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 1
55476: NEG
55477: PUSH
55478: LD_INT 2
55480: NEG
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 0
55488: PUSH
55489: LD_INT 2
55491: NEG
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 1
55499: PUSH
55500: LD_INT 1
55502: NEG
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 2
55510: PUSH
55511: LD_INT 0
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 2
55520: PUSH
55521: LD_INT 1
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: LD_INT 2
55530: PUSH
55531: LD_INT 2
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 1
55540: PUSH
55541: LD_INT 2
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: LD_INT 0
55550: PUSH
55551: LD_INT 2
55553: PUSH
55554: EMPTY
55555: LIST
55556: LIST
55557: PUSH
55558: LD_INT 1
55560: NEG
55561: PUSH
55562: LD_INT 1
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: LD_INT 2
55571: NEG
55572: PUSH
55573: LD_INT 0
55575: PUSH
55576: EMPTY
55577: LIST
55578: LIST
55579: PUSH
55580: LD_INT 2
55582: NEG
55583: PUSH
55584: LD_INT 1
55586: NEG
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 2
55594: NEG
55595: PUSH
55596: LD_INT 2
55598: NEG
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: LIST
55624: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55625: LD_ADDR_VAR 0 56
55629: PUSH
55630: LD_INT 0
55632: PUSH
55633: LD_INT 0
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 0
55642: PUSH
55643: LD_INT 1
55645: NEG
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: LD_INT 1
55653: PUSH
55654: LD_INT 0
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 1
55663: PUSH
55664: LD_INT 1
55666: PUSH
55667: EMPTY
55668: LIST
55669: LIST
55670: PUSH
55671: LD_INT 0
55673: PUSH
55674: LD_INT 1
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 1
55683: NEG
55684: PUSH
55685: LD_INT 0
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: LD_INT 1
55694: NEG
55695: PUSH
55696: LD_INT 1
55698: NEG
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: LD_INT 1
55706: NEG
55707: PUSH
55708: LD_INT 2
55710: NEG
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 0
55718: PUSH
55719: LD_INT 2
55721: NEG
55722: PUSH
55723: EMPTY
55724: LIST
55725: LIST
55726: PUSH
55727: LD_INT 1
55729: PUSH
55730: LD_INT 1
55732: NEG
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 2
55740: PUSH
55741: LD_INT 0
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: LD_INT 2
55750: PUSH
55751: LD_INT 1
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 2
55760: PUSH
55761: LD_INT 2
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 1
55770: PUSH
55771: LD_INT 2
55773: PUSH
55774: EMPTY
55775: LIST
55776: LIST
55777: PUSH
55778: LD_INT 0
55780: PUSH
55781: LD_INT 2
55783: PUSH
55784: EMPTY
55785: LIST
55786: LIST
55787: PUSH
55788: LD_INT 1
55790: NEG
55791: PUSH
55792: LD_INT 1
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 2
55801: NEG
55802: PUSH
55803: LD_INT 0
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 2
55812: NEG
55813: PUSH
55814: LD_INT 1
55816: NEG
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 2
55824: NEG
55825: PUSH
55826: LD_INT 2
55828: NEG
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: EMPTY
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55855: LD_ADDR_VAR 0 57
55859: PUSH
55860: LD_INT 0
55862: PUSH
55863: LD_INT 0
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 0
55872: PUSH
55873: LD_INT 1
55875: NEG
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 1
55883: PUSH
55884: LD_INT 0
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 1
55893: PUSH
55894: LD_INT 1
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 0
55903: PUSH
55904: LD_INT 1
55906: PUSH
55907: EMPTY
55908: LIST
55909: LIST
55910: PUSH
55911: LD_INT 1
55913: NEG
55914: PUSH
55915: LD_INT 0
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 1
55924: NEG
55925: PUSH
55926: LD_INT 1
55928: NEG
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 1
55936: NEG
55937: PUSH
55938: LD_INT 2
55940: NEG
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 0
55948: PUSH
55949: LD_INT 2
55951: NEG
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 1
55959: PUSH
55960: LD_INT 1
55962: NEG
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 2
55970: PUSH
55971: LD_INT 0
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: LD_INT 2
55980: PUSH
55981: LD_INT 1
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 2
55990: PUSH
55991: LD_INT 2
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 1
56000: PUSH
56001: LD_INT 2
56003: PUSH
56004: EMPTY
56005: LIST
56006: LIST
56007: PUSH
56008: LD_INT 0
56010: PUSH
56011: LD_INT 2
56013: PUSH
56014: EMPTY
56015: LIST
56016: LIST
56017: PUSH
56018: LD_INT 1
56020: NEG
56021: PUSH
56022: LD_INT 1
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 2
56031: NEG
56032: PUSH
56033: LD_INT 0
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 2
56042: NEG
56043: PUSH
56044: LD_INT 1
56046: NEG
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 2
56054: NEG
56055: PUSH
56056: LD_INT 2
56058: NEG
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56085: LD_ADDR_VAR 0 58
56089: PUSH
56090: LD_INT 0
56092: PUSH
56093: LD_INT 0
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 0
56102: PUSH
56103: LD_INT 1
56105: NEG
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: LD_INT 1
56113: PUSH
56114: LD_INT 0
56116: PUSH
56117: EMPTY
56118: LIST
56119: LIST
56120: PUSH
56121: LD_INT 1
56123: PUSH
56124: LD_INT 1
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: LD_INT 0
56133: PUSH
56134: LD_INT 1
56136: PUSH
56137: EMPTY
56138: LIST
56139: LIST
56140: PUSH
56141: LD_INT 1
56143: NEG
56144: PUSH
56145: LD_INT 0
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 1
56154: NEG
56155: PUSH
56156: LD_INT 1
56158: NEG
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 1
56166: NEG
56167: PUSH
56168: LD_INT 2
56170: NEG
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 0
56178: PUSH
56179: LD_INT 2
56181: NEG
56182: PUSH
56183: EMPTY
56184: LIST
56185: LIST
56186: PUSH
56187: LD_INT 1
56189: PUSH
56190: LD_INT 1
56192: NEG
56193: PUSH
56194: EMPTY
56195: LIST
56196: LIST
56197: PUSH
56198: LD_INT 2
56200: PUSH
56201: LD_INT 0
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: LD_INT 2
56210: PUSH
56211: LD_INT 1
56213: PUSH
56214: EMPTY
56215: LIST
56216: LIST
56217: PUSH
56218: LD_INT 2
56220: PUSH
56221: LD_INT 2
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 1
56230: PUSH
56231: LD_INT 2
56233: PUSH
56234: EMPTY
56235: LIST
56236: LIST
56237: PUSH
56238: LD_INT 0
56240: PUSH
56241: LD_INT 2
56243: PUSH
56244: EMPTY
56245: LIST
56246: LIST
56247: PUSH
56248: LD_INT 1
56250: NEG
56251: PUSH
56252: LD_INT 1
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: LD_INT 2
56261: NEG
56262: PUSH
56263: LD_INT 0
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: LD_INT 2
56272: NEG
56273: PUSH
56274: LD_INT 1
56276: NEG
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: LD_INT 2
56284: NEG
56285: PUSH
56286: LD_INT 2
56288: NEG
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56315: LD_ADDR_VAR 0 59
56319: PUSH
56320: LD_INT 0
56322: PUSH
56323: LD_INT 0
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 0
56332: PUSH
56333: LD_INT 1
56335: NEG
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 1
56343: PUSH
56344: LD_INT 0
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: PUSH
56351: LD_INT 1
56353: PUSH
56354: LD_INT 1
56356: PUSH
56357: EMPTY
56358: LIST
56359: LIST
56360: PUSH
56361: LD_INT 0
56363: PUSH
56364: LD_INT 1
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: PUSH
56371: LD_INT 1
56373: NEG
56374: PUSH
56375: LD_INT 0
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: LD_INT 1
56384: NEG
56385: PUSH
56386: LD_INT 1
56388: NEG
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56403: LD_ADDR_VAR 0 60
56407: PUSH
56408: LD_INT 0
56410: PUSH
56411: LD_INT 0
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: LD_INT 0
56420: PUSH
56421: LD_INT 1
56423: NEG
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 1
56431: PUSH
56432: LD_INT 0
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PUSH
56439: LD_INT 1
56441: PUSH
56442: LD_INT 1
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 0
56451: PUSH
56452: LD_INT 1
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 1
56461: NEG
56462: PUSH
56463: LD_INT 0
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 1
56472: NEG
56473: PUSH
56474: LD_INT 1
56476: NEG
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56491: LD_ADDR_VAR 0 61
56495: PUSH
56496: LD_INT 0
56498: PUSH
56499: LD_INT 0
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 0
56508: PUSH
56509: LD_INT 1
56511: NEG
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 1
56519: PUSH
56520: LD_INT 0
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: PUSH
56527: LD_INT 1
56529: PUSH
56530: LD_INT 1
56532: PUSH
56533: EMPTY
56534: LIST
56535: LIST
56536: PUSH
56537: LD_INT 0
56539: PUSH
56540: LD_INT 1
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: PUSH
56547: LD_INT 1
56549: NEG
56550: PUSH
56551: LD_INT 0
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 1
56560: NEG
56561: PUSH
56562: LD_INT 1
56564: NEG
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56579: LD_ADDR_VAR 0 62
56583: PUSH
56584: LD_INT 0
56586: PUSH
56587: LD_INT 0
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 0
56596: PUSH
56597: LD_INT 1
56599: NEG
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: LD_INT 1
56607: PUSH
56608: LD_INT 0
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: LD_INT 1
56617: PUSH
56618: LD_INT 1
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: PUSH
56625: LD_INT 0
56627: PUSH
56628: LD_INT 1
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: LD_INT 1
56637: NEG
56638: PUSH
56639: LD_INT 0
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: LD_INT 1
56648: NEG
56649: PUSH
56650: LD_INT 1
56652: NEG
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: LIST
56662: LIST
56663: LIST
56664: LIST
56665: LIST
56666: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56667: LD_ADDR_VAR 0 63
56671: PUSH
56672: LD_INT 0
56674: PUSH
56675: LD_INT 0
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 0
56684: PUSH
56685: LD_INT 1
56687: NEG
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 1
56695: PUSH
56696: LD_INT 0
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: LD_INT 1
56705: PUSH
56706: LD_INT 1
56708: PUSH
56709: EMPTY
56710: LIST
56711: LIST
56712: PUSH
56713: LD_INT 0
56715: PUSH
56716: LD_INT 1
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 1
56725: NEG
56726: PUSH
56727: LD_INT 0
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: LD_INT 1
56736: NEG
56737: PUSH
56738: LD_INT 1
56740: NEG
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56755: LD_ADDR_VAR 0 64
56759: PUSH
56760: LD_INT 0
56762: PUSH
56763: LD_INT 0
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 0
56772: PUSH
56773: LD_INT 1
56775: NEG
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: LD_INT 1
56783: PUSH
56784: LD_INT 0
56786: PUSH
56787: EMPTY
56788: LIST
56789: LIST
56790: PUSH
56791: LD_INT 1
56793: PUSH
56794: LD_INT 1
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: LD_INT 0
56803: PUSH
56804: LD_INT 1
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: PUSH
56811: LD_INT 1
56813: NEG
56814: PUSH
56815: LD_INT 0
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: LD_INT 1
56824: NEG
56825: PUSH
56826: LD_INT 1
56828: NEG
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: ST_TO_ADDR
// end ; 1 :
56843: GO 62740
56845: LD_INT 1
56847: DOUBLE
56848: EQUAL
56849: IFTRUE 56853
56851: GO 59476
56853: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56854: LD_ADDR_VAR 0 11
56858: PUSH
56859: LD_INT 1
56861: NEG
56862: PUSH
56863: LD_INT 3
56865: NEG
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 0
56873: PUSH
56874: LD_INT 3
56876: NEG
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 1
56884: PUSH
56885: LD_INT 2
56887: NEG
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: LIST
56897: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56898: LD_ADDR_VAR 0 12
56902: PUSH
56903: LD_INT 2
56905: PUSH
56906: LD_INT 1
56908: NEG
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 3
56916: PUSH
56917: LD_INT 0
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: PUSH
56924: LD_INT 3
56926: PUSH
56927: LD_INT 1
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: LIST
56938: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56939: LD_ADDR_VAR 0 13
56943: PUSH
56944: LD_INT 3
56946: PUSH
56947: LD_INT 2
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 3
56956: PUSH
56957: LD_INT 3
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 2
56966: PUSH
56967: LD_INT 3
56969: PUSH
56970: EMPTY
56971: LIST
56972: LIST
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: LIST
56978: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56979: LD_ADDR_VAR 0 14
56983: PUSH
56984: LD_INT 1
56986: PUSH
56987: LD_INT 3
56989: PUSH
56990: EMPTY
56991: LIST
56992: LIST
56993: PUSH
56994: LD_INT 0
56996: PUSH
56997: LD_INT 3
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: LD_INT 1
57006: NEG
57007: PUSH
57008: LD_INT 2
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: LIST
57019: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57020: LD_ADDR_VAR 0 15
57024: PUSH
57025: LD_INT 2
57027: NEG
57028: PUSH
57029: LD_INT 1
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: LD_INT 3
57038: NEG
57039: PUSH
57040: LD_INT 0
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 3
57049: NEG
57050: PUSH
57051: LD_INT 1
57053: NEG
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: LIST
57063: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57064: LD_ADDR_VAR 0 16
57068: PUSH
57069: LD_INT 2
57071: NEG
57072: PUSH
57073: LD_INT 3
57075: NEG
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: LD_INT 3
57083: NEG
57084: PUSH
57085: LD_INT 2
57087: NEG
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 3
57095: NEG
57096: PUSH
57097: LD_INT 3
57099: NEG
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: LIST
57109: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57110: LD_ADDR_VAR 0 17
57114: PUSH
57115: LD_INT 1
57117: NEG
57118: PUSH
57119: LD_INT 3
57121: NEG
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: LD_INT 0
57129: PUSH
57130: LD_INT 3
57132: NEG
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: PUSH
57138: LD_INT 1
57140: PUSH
57141: LD_INT 2
57143: NEG
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: LIST
57153: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57154: LD_ADDR_VAR 0 18
57158: PUSH
57159: LD_INT 2
57161: PUSH
57162: LD_INT 1
57164: NEG
57165: PUSH
57166: EMPTY
57167: LIST
57168: LIST
57169: PUSH
57170: LD_INT 3
57172: PUSH
57173: LD_INT 0
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: PUSH
57180: LD_INT 3
57182: PUSH
57183: LD_INT 1
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: LIST
57194: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57195: LD_ADDR_VAR 0 19
57199: PUSH
57200: LD_INT 3
57202: PUSH
57203: LD_INT 2
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 3
57212: PUSH
57213: LD_INT 3
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: LD_INT 2
57222: PUSH
57223: LD_INT 3
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: LIST
57234: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57235: LD_ADDR_VAR 0 20
57239: PUSH
57240: LD_INT 1
57242: PUSH
57243: LD_INT 3
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 0
57252: PUSH
57253: LD_INT 3
57255: PUSH
57256: EMPTY
57257: LIST
57258: LIST
57259: PUSH
57260: LD_INT 1
57262: NEG
57263: PUSH
57264: LD_INT 2
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: LIST
57275: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57276: LD_ADDR_VAR 0 21
57280: PUSH
57281: LD_INT 2
57283: NEG
57284: PUSH
57285: LD_INT 1
57287: PUSH
57288: EMPTY
57289: LIST
57290: LIST
57291: PUSH
57292: LD_INT 3
57294: NEG
57295: PUSH
57296: LD_INT 0
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: LD_INT 3
57305: NEG
57306: PUSH
57307: LD_INT 1
57309: NEG
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: LIST
57319: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57320: LD_ADDR_VAR 0 22
57324: PUSH
57325: LD_INT 2
57327: NEG
57328: PUSH
57329: LD_INT 3
57331: NEG
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: LD_INT 3
57339: NEG
57340: PUSH
57341: LD_INT 2
57343: NEG
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: LD_INT 3
57351: NEG
57352: PUSH
57353: LD_INT 3
57355: NEG
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: LIST
57365: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57366: LD_ADDR_VAR 0 23
57370: PUSH
57371: LD_INT 0
57373: PUSH
57374: LD_INT 3
57376: NEG
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 1
57384: NEG
57385: PUSH
57386: LD_INT 4
57388: NEG
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 1
57396: PUSH
57397: LD_INT 3
57399: NEG
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: EMPTY
57406: LIST
57407: LIST
57408: LIST
57409: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57410: LD_ADDR_VAR 0 24
57414: PUSH
57415: LD_INT 3
57417: PUSH
57418: LD_INT 0
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 3
57427: PUSH
57428: LD_INT 1
57430: NEG
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: LD_INT 4
57438: PUSH
57439: LD_INT 1
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: LIST
57450: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57451: LD_ADDR_VAR 0 25
57455: PUSH
57456: LD_INT 3
57458: PUSH
57459: LD_INT 3
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: PUSH
57466: LD_INT 4
57468: PUSH
57469: LD_INT 3
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: PUSH
57476: LD_INT 3
57478: PUSH
57479: LD_INT 4
57481: PUSH
57482: EMPTY
57483: LIST
57484: LIST
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: LIST
57490: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57491: LD_ADDR_VAR 0 26
57495: PUSH
57496: LD_INT 0
57498: PUSH
57499: LD_INT 3
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: PUSH
57506: LD_INT 1
57508: PUSH
57509: LD_INT 4
57511: PUSH
57512: EMPTY
57513: LIST
57514: LIST
57515: PUSH
57516: LD_INT 1
57518: NEG
57519: PUSH
57520: LD_INT 3
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: LIST
57531: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57532: LD_ADDR_VAR 0 27
57536: PUSH
57537: LD_INT 3
57539: NEG
57540: PUSH
57541: LD_INT 0
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 3
57550: NEG
57551: PUSH
57552: LD_INT 1
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: LD_INT 4
57561: NEG
57562: PUSH
57563: LD_INT 1
57565: NEG
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: LIST
57575: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57576: LD_ADDR_VAR 0 28
57580: PUSH
57581: LD_INT 3
57583: NEG
57584: PUSH
57585: LD_INT 3
57587: NEG
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: LD_INT 3
57595: NEG
57596: PUSH
57597: LD_INT 4
57599: NEG
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: PUSH
57605: LD_INT 4
57607: NEG
57608: PUSH
57609: LD_INT 3
57611: NEG
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: LIST
57621: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57622: LD_ADDR_VAR 0 29
57626: PUSH
57627: LD_INT 1
57629: NEG
57630: PUSH
57631: LD_INT 3
57633: NEG
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: LD_INT 0
57641: PUSH
57642: LD_INT 3
57644: NEG
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: PUSH
57650: LD_INT 1
57652: PUSH
57653: LD_INT 2
57655: NEG
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: PUSH
57661: LD_INT 1
57663: NEG
57664: PUSH
57665: LD_INT 4
57667: NEG
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: LD_INT 0
57675: PUSH
57676: LD_INT 4
57678: NEG
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: PUSH
57684: LD_INT 1
57686: PUSH
57687: LD_INT 3
57689: NEG
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 1
57697: NEG
57698: PUSH
57699: LD_INT 5
57701: NEG
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 0
57709: PUSH
57710: LD_INT 5
57712: NEG
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: LD_INT 1
57720: PUSH
57721: LD_INT 4
57723: NEG
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: LD_INT 1
57731: NEG
57732: PUSH
57733: LD_INT 6
57735: NEG
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: LD_INT 0
57743: PUSH
57744: LD_INT 6
57746: NEG
57747: PUSH
57748: EMPTY
57749: LIST
57750: LIST
57751: PUSH
57752: LD_INT 1
57754: PUSH
57755: LD_INT 5
57757: NEG
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: LIST
57767: LIST
57768: LIST
57769: LIST
57770: LIST
57771: LIST
57772: LIST
57773: LIST
57774: LIST
57775: LIST
57776: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57777: LD_ADDR_VAR 0 30
57781: PUSH
57782: LD_INT 2
57784: PUSH
57785: LD_INT 1
57787: NEG
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: PUSH
57793: LD_INT 3
57795: PUSH
57796: LD_INT 0
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: PUSH
57803: LD_INT 3
57805: PUSH
57806: LD_INT 1
57808: PUSH
57809: EMPTY
57810: LIST
57811: LIST
57812: PUSH
57813: LD_INT 3
57815: PUSH
57816: LD_INT 1
57818: NEG
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 4
57826: PUSH
57827: LD_INT 0
57829: PUSH
57830: EMPTY
57831: LIST
57832: LIST
57833: PUSH
57834: LD_INT 4
57836: PUSH
57837: LD_INT 1
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 4
57846: PUSH
57847: LD_INT 1
57849: NEG
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: LD_INT 5
57857: PUSH
57858: LD_INT 0
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: LD_INT 5
57867: PUSH
57868: LD_INT 1
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 5
57877: PUSH
57878: LD_INT 1
57880: NEG
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 6
57888: PUSH
57889: LD_INT 0
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 6
57898: PUSH
57899: LD_INT 1
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: LIST
57910: LIST
57911: LIST
57912: LIST
57913: LIST
57914: LIST
57915: LIST
57916: LIST
57917: LIST
57918: LIST
57919: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57920: LD_ADDR_VAR 0 31
57924: PUSH
57925: LD_INT 3
57927: PUSH
57928: LD_INT 2
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: PUSH
57935: LD_INT 3
57937: PUSH
57938: LD_INT 3
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: PUSH
57945: LD_INT 2
57947: PUSH
57948: LD_INT 3
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: PUSH
57955: LD_INT 4
57957: PUSH
57958: LD_INT 3
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: PUSH
57965: LD_INT 4
57967: PUSH
57968: LD_INT 4
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: LD_INT 3
57977: PUSH
57978: LD_INT 4
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: LD_INT 5
57987: PUSH
57988: LD_INT 4
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 5
57997: PUSH
57998: LD_INT 5
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: LD_INT 4
58007: PUSH
58008: LD_INT 5
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 6
58017: PUSH
58018: LD_INT 5
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 6
58027: PUSH
58028: LD_INT 6
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 5
58037: PUSH
58038: LD_INT 6
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: LIST
58049: LIST
58050: LIST
58051: LIST
58052: LIST
58053: LIST
58054: LIST
58055: LIST
58056: LIST
58057: LIST
58058: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
58059: LD_ADDR_VAR 0 32
58063: PUSH
58064: LD_INT 1
58066: PUSH
58067: LD_INT 3
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: LD_INT 0
58076: PUSH
58077: LD_INT 3
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: LD_INT 1
58086: NEG
58087: PUSH
58088: LD_INT 2
58090: PUSH
58091: EMPTY
58092: LIST
58093: LIST
58094: PUSH
58095: LD_INT 1
58097: PUSH
58098: LD_INT 4
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PUSH
58105: LD_INT 0
58107: PUSH
58108: LD_INT 4
58110: PUSH
58111: EMPTY
58112: LIST
58113: LIST
58114: PUSH
58115: LD_INT 1
58117: NEG
58118: PUSH
58119: LD_INT 3
58121: PUSH
58122: EMPTY
58123: LIST
58124: LIST
58125: PUSH
58126: LD_INT 1
58128: PUSH
58129: LD_INT 5
58131: PUSH
58132: EMPTY
58133: LIST
58134: LIST
58135: PUSH
58136: LD_INT 0
58138: PUSH
58139: LD_INT 5
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 1
58148: NEG
58149: PUSH
58150: LD_INT 4
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 1
58159: PUSH
58160: LD_INT 6
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: LD_INT 0
58169: PUSH
58170: LD_INT 6
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 1
58179: NEG
58180: PUSH
58181: LD_INT 5
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: LIST
58192: LIST
58193: LIST
58194: LIST
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58202: LD_ADDR_VAR 0 33
58206: PUSH
58207: LD_INT 2
58209: NEG
58210: PUSH
58211: LD_INT 1
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PUSH
58218: LD_INT 3
58220: NEG
58221: PUSH
58222: LD_INT 0
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: LD_INT 3
58231: NEG
58232: PUSH
58233: LD_INT 1
58235: NEG
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 3
58243: NEG
58244: PUSH
58245: LD_INT 1
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 4
58254: NEG
58255: PUSH
58256: LD_INT 0
58258: PUSH
58259: EMPTY
58260: LIST
58261: LIST
58262: PUSH
58263: LD_INT 4
58265: NEG
58266: PUSH
58267: LD_INT 1
58269: NEG
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 4
58277: NEG
58278: PUSH
58279: LD_INT 1
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 5
58288: NEG
58289: PUSH
58290: LD_INT 0
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 5
58299: NEG
58300: PUSH
58301: LD_INT 1
58303: NEG
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: LD_INT 5
58311: NEG
58312: PUSH
58313: LD_INT 1
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 6
58322: NEG
58323: PUSH
58324: LD_INT 0
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 6
58333: NEG
58334: PUSH
58335: LD_INT 1
58337: NEG
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: EMPTY
58344: LIST
58345: LIST
58346: LIST
58347: LIST
58348: LIST
58349: LIST
58350: LIST
58351: LIST
58352: LIST
58353: LIST
58354: LIST
58355: LIST
58356: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58357: LD_ADDR_VAR 0 34
58361: PUSH
58362: LD_INT 2
58364: NEG
58365: PUSH
58366: LD_INT 3
58368: NEG
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 3
58376: NEG
58377: PUSH
58378: LD_INT 2
58380: NEG
58381: PUSH
58382: EMPTY
58383: LIST
58384: LIST
58385: PUSH
58386: LD_INT 3
58388: NEG
58389: PUSH
58390: LD_INT 3
58392: NEG
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 3
58400: NEG
58401: PUSH
58402: LD_INT 4
58404: NEG
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 4
58412: NEG
58413: PUSH
58414: LD_INT 3
58416: NEG
58417: PUSH
58418: EMPTY
58419: LIST
58420: LIST
58421: PUSH
58422: LD_INT 4
58424: NEG
58425: PUSH
58426: LD_INT 4
58428: NEG
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 4
58436: NEG
58437: PUSH
58438: LD_INT 5
58440: NEG
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: LD_INT 5
58448: NEG
58449: PUSH
58450: LD_INT 4
58452: NEG
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 5
58460: NEG
58461: PUSH
58462: LD_INT 5
58464: NEG
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PUSH
58470: LD_INT 5
58472: NEG
58473: PUSH
58474: LD_INT 6
58476: NEG
58477: PUSH
58478: EMPTY
58479: LIST
58480: LIST
58481: PUSH
58482: LD_INT 6
58484: NEG
58485: PUSH
58486: LD_INT 5
58488: NEG
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 6
58496: NEG
58497: PUSH
58498: LD_INT 6
58500: NEG
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: LIST
58510: LIST
58511: LIST
58512: LIST
58513: LIST
58514: LIST
58515: LIST
58516: LIST
58517: LIST
58518: LIST
58519: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58520: LD_ADDR_VAR 0 41
58524: PUSH
58525: LD_INT 0
58527: PUSH
58528: LD_INT 2
58530: NEG
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PUSH
58536: LD_INT 1
58538: NEG
58539: PUSH
58540: LD_INT 3
58542: NEG
58543: PUSH
58544: EMPTY
58545: LIST
58546: LIST
58547: PUSH
58548: LD_INT 1
58550: PUSH
58551: LD_INT 2
58553: NEG
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: LIST
58563: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58564: LD_ADDR_VAR 0 42
58568: PUSH
58569: LD_INT 2
58571: PUSH
58572: LD_INT 0
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 2
58581: PUSH
58582: LD_INT 1
58584: NEG
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: LD_INT 3
58592: PUSH
58593: LD_INT 1
58595: PUSH
58596: EMPTY
58597: LIST
58598: LIST
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: LIST
58604: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58605: LD_ADDR_VAR 0 43
58609: PUSH
58610: LD_INT 2
58612: PUSH
58613: LD_INT 2
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: PUSH
58620: LD_INT 3
58622: PUSH
58623: LD_INT 2
58625: PUSH
58626: EMPTY
58627: LIST
58628: LIST
58629: PUSH
58630: LD_INT 2
58632: PUSH
58633: LD_INT 3
58635: PUSH
58636: EMPTY
58637: LIST
58638: LIST
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: LIST
58644: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58645: LD_ADDR_VAR 0 44
58649: PUSH
58650: LD_INT 0
58652: PUSH
58653: LD_INT 2
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: LD_INT 1
58662: PUSH
58663: LD_INT 3
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: PUSH
58670: LD_INT 1
58672: NEG
58673: PUSH
58674: LD_INT 2
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: LIST
58685: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58686: LD_ADDR_VAR 0 45
58690: PUSH
58691: LD_INT 2
58693: NEG
58694: PUSH
58695: LD_INT 0
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 2
58704: NEG
58705: PUSH
58706: LD_INT 1
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: LD_INT 3
58715: NEG
58716: PUSH
58717: LD_INT 1
58719: NEG
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: LIST
58729: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58730: LD_ADDR_VAR 0 46
58734: PUSH
58735: LD_INT 2
58737: NEG
58738: PUSH
58739: LD_INT 2
58741: NEG
58742: PUSH
58743: EMPTY
58744: LIST
58745: LIST
58746: PUSH
58747: LD_INT 2
58749: NEG
58750: PUSH
58751: LD_INT 3
58753: NEG
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: PUSH
58759: LD_INT 3
58761: NEG
58762: PUSH
58763: LD_INT 2
58765: NEG
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: LIST
58775: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58776: LD_ADDR_VAR 0 47
58780: PUSH
58781: LD_INT 2
58783: NEG
58784: PUSH
58785: LD_INT 3
58787: NEG
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 1
58795: NEG
58796: PUSH
58797: LD_INT 3
58799: NEG
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58809: LD_ADDR_VAR 0 48
58813: PUSH
58814: LD_INT 1
58816: PUSH
58817: LD_INT 2
58819: NEG
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 2
58827: PUSH
58828: LD_INT 1
58830: NEG
58831: PUSH
58832: EMPTY
58833: LIST
58834: LIST
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58840: LD_ADDR_VAR 0 49
58844: PUSH
58845: LD_INT 3
58847: PUSH
58848: LD_INT 1
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 3
58857: PUSH
58858: LD_INT 2
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58869: LD_ADDR_VAR 0 50
58873: PUSH
58874: LD_INT 2
58876: PUSH
58877: LD_INT 3
58879: PUSH
58880: EMPTY
58881: LIST
58882: LIST
58883: PUSH
58884: LD_INT 1
58886: PUSH
58887: LD_INT 3
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58898: LD_ADDR_VAR 0 51
58902: PUSH
58903: LD_INT 1
58905: NEG
58906: PUSH
58907: LD_INT 2
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 2
58916: NEG
58917: PUSH
58918: LD_INT 1
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58929: LD_ADDR_VAR 0 52
58933: PUSH
58934: LD_INT 3
58936: NEG
58937: PUSH
58938: LD_INT 1
58940: NEG
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: LD_INT 3
58948: NEG
58949: PUSH
58950: LD_INT 2
58952: NEG
58953: PUSH
58954: EMPTY
58955: LIST
58956: LIST
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58962: LD_ADDR_VAR 0 53
58966: PUSH
58967: LD_INT 1
58969: NEG
58970: PUSH
58971: LD_INT 3
58973: NEG
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: LD_INT 0
58981: PUSH
58982: LD_INT 3
58984: NEG
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: LD_INT 1
58992: PUSH
58993: LD_INT 2
58995: NEG
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: LIST
59005: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59006: LD_ADDR_VAR 0 54
59010: PUSH
59011: LD_INT 2
59013: PUSH
59014: LD_INT 1
59016: NEG
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: LD_INT 3
59024: PUSH
59025: LD_INT 0
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 3
59034: PUSH
59035: LD_INT 1
59037: PUSH
59038: EMPTY
59039: LIST
59040: LIST
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: LIST
59046: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59047: LD_ADDR_VAR 0 55
59051: PUSH
59052: LD_INT 3
59054: PUSH
59055: LD_INT 2
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 3
59064: PUSH
59065: LD_INT 3
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: LD_INT 2
59074: PUSH
59075: LD_INT 3
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: LIST
59086: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59087: LD_ADDR_VAR 0 56
59091: PUSH
59092: LD_INT 1
59094: PUSH
59095: LD_INT 3
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 0
59104: PUSH
59105: LD_INT 3
59107: PUSH
59108: EMPTY
59109: LIST
59110: LIST
59111: PUSH
59112: LD_INT 1
59114: NEG
59115: PUSH
59116: LD_INT 2
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: LIST
59127: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59128: LD_ADDR_VAR 0 57
59132: PUSH
59133: LD_INT 2
59135: NEG
59136: PUSH
59137: LD_INT 1
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 3
59146: NEG
59147: PUSH
59148: LD_INT 0
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 3
59157: NEG
59158: PUSH
59159: LD_INT 1
59161: NEG
59162: PUSH
59163: EMPTY
59164: LIST
59165: LIST
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: LIST
59171: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59172: LD_ADDR_VAR 0 58
59176: PUSH
59177: LD_INT 2
59179: NEG
59180: PUSH
59181: LD_INT 3
59183: NEG
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: LD_INT 3
59191: NEG
59192: PUSH
59193: LD_INT 2
59195: NEG
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 3
59203: NEG
59204: PUSH
59205: LD_INT 3
59207: NEG
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: LIST
59217: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59218: LD_ADDR_VAR 0 59
59222: PUSH
59223: LD_INT 1
59225: NEG
59226: PUSH
59227: LD_INT 2
59229: NEG
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: LD_INT 0
59237: PUSH
59238: LD_INT 2
59240: NEG
59241: PUSH
59242: EMPTY
59243: LIST
59244: LIST
59245: PUSH
59246: LD_INT 1
59248: PUSH
59249: LD_INT 1
59251: NEG
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: LIST
59261: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59262: LD_ADDR_VAR 0 60
59266: PUSH
59267: LD_INT 1
59269: PUSH
59270: LD_INT 1
59272: NEG
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: PUSH
59278: LD_INT 2
59280: PUSH
59281: LD_INT 0
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 2
59290: PUSH
59291: LD_INT 1
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: LIST
59302: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59303: LD_ADDR_VAR 0 61
59307: PUSH
59308: LD_INT 2
59310: PUSH
59311: LD_INT 1
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 2
59320: PUSH
59321: LD_INT 2
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: PUSH
59328: LD_INT 1
59330: PUSH
59331: LD_INT 2
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: LIST
59342: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59343: LD_ADDR_VAR 0 62
59347: PUSH
59348: LD_INT 1
59350: PUSH
59351: LD_INT 2
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: PUSH
59358: LD_INT 0
59360: PUSH
59361: LD_INT 2
59363: PUSH
59364: EMPTY
59365: LIST
59366: LIST
59367: PUSH
59368: LD_INT 1
59370: NEG
59371: PUSH
59372: LD_INT 1
59374: PUSH
59375: EMPTY
59376: LIST
59377: LIST
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: LIST
59383: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59384: LD_ADDR_VAR 0 63
59388: PUSH
59389: LD_INT 1
59391: NEG
59392: PUSH
59393: LD_INT 1
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PUSH
59400: LD_INT 2
59402: NEG
59403: PUSH
59404: LD_INT 0
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: PUSH
59411: LD_INT 2
59413: NEG
59414: PUSH
59415: LD_INT 1
59417: NEG
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: LIST
59427: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59428: LD_ADDR_VAR 0 64
59432: PUSH
59433: LD_INT 1
59435: NEG
59436: PUSH
59437: LD_INT 2
59439: NEG
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: PUSH
59445: LD_INT 2
59447: NEG
59448: PUSH
59449: LD_INT 1
59451: NEG
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 2
59459: NEG
59460: PUSH
59461: LD_INT 2
59463: NEG
59464: PUSH
59465: EMPTY
59466: LIST
59467: LIST
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: LIST
59473: ST_TO_ADDR
// end ; 2 :
59474: GO 62740
59476: LD_INT 2
59478: DOUBLE
59479: EQUAL
59480: IFTRUE 59484
59482: GO 62739
59484: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59485: LD_ADDR_VAR 0 29
59489: PUSH
59490: LD_INT 4
59492: PUSH
59493: LD_INT 0
59495: PUSH
59496: EMPTY
59497: LIST
59498: LIST
59499: PUSH
59500: LD_INT 4
59502: PUSH
59503: LD_INT 1
59505: NEG
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: PUSH
59511: LD_INT 5
59513: PUSH
59514: LD_INT 0
59516: PUSH
59517: EMPTY
59518: LIST
59519: LIST
59520: PUSH
59521: LD_INT 5
59523: PUSH
59524: LD_INT 1
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PUSH
59531: LD_INT 4
59533: PUSH
59534: LD_INT 1
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: LD_INT 3
59543: PUSH
59544: LD_INT 0
59546: PUSH
59547: EMPTY
59548: LIST
59549: LIST
59550: PUSH
59551: LD_INT 3
59553: PUSH
59554: LD_INT 1
59556: NEG
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 3
59564: PUSH
59565: LD_INT 2
59567: NEG
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 5
59575: PUSH
59576: LD_INT 2
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 3
59585: PUSH
59586: LD_INT 3
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: LD_INT 3
59595: PUSH
59596: LD_INT 2
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 4
59605: PUSH
59606: LD_INT 3
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 4
59615: PUSH
59616: LD_INT 4
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PUSH
59623: LD_INT 3
59625: PUSH
59626: LD_INT 4
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: LD_INT 2
59635: PUSH
59636: LD_INT 3
59638: PUSH
59639: EMPTY
59640: LIST
59641: LIST
59642: PUSH
59643: LD_INT 2
59645: PUSH
59646: LD_INT 2
59648: PUSH
59649: EMPTY
59650: LIST
59651: LIST
59652: PUSH
59653: LD_INT 4
59655: PUSH
59656: LD_INT 2
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: LD_INT 2
59665: PUSH
59666: LD_INT 4
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: PUSH
59673: LD_INT 0
59675: PUSH
59676: LD_INT 4
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: PUSH
59683: LD_INT 0
59685: PUSH
59686: LD_INT 3
59688: PUSH
59689: EMPTY
59690: LIST
59691: LIST
59692: PUSH
59693: LD_INT 1
59695: PUSH
59696: LD_INT 4
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: LD_INT 1
59705: PUSH
59706: LD_INT 5
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: PUSH
59713: LD_INT 0
59715: PUSH
59716: LD_INT 5
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PUSH
59723: LD_INT 1
59725: NEG
59726: PUSH
59727: LD_INT 4
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: LD_INT 1
59736: NEG
59737: PUSH
59738: LD_INT 3
59740: PUSH
59741: EMPTY
59742: LIST
59743: LIST
59744: PUSH
59745: LD_INT 2
59747: PUSH
59748: LD_INT 5
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PUSH
59755: LD_INT 2
59757: NEG
59758: PUSH
59759: LD_INT 3
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 3
59768: NEG
59769: PUSH
59770: LD_INT 0
59772: PUSH
59773: EMPTY
59774: LIST
59775: LIST
59776: PUSH
59777: LD_INT 3
59779: NEG
59780: PUSH
59781: LD_INT 1
59783: NEG
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: LD_INT 2
59791: NEG
59792: PUSH
59793: LD_INT 0
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: LD_INT 2
59802: NEG
59803: PUSH
59804: LD_INT 1
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: LD_INT 3
59813: NEG
59814: PUSH
59815: LD_INT 1
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: LD_INT 4
59824: NEG
59825: PUSH
59826: LD_INT 0
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: PUSH
59833: LD_INT 4
59835: NEG
59836: PUSH
59837: LD_INT 1
59839: NEG
59840: PUSH
59841: EMPTY
59842: LIST
59843: LIST
59844: PUSH
59845: LD_INT 4
59847: NEG
59848: PUSH
59849: LD_INT 2
59851: NEG
59852: PUSH
59853: EMPTY
59854: LIST
59855: LIST
59856: PUSH
59857: LD_INT 2
59859: NEG
59860: PUSH
59861: LD_INT 2
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: PUSH
59868: LD_INT 4
59870: NEG
59871: PUSH
59872: LD_INT 4
59874: NEG
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: LD_INT 4
59882: NEG
59883: PUSH
59884: LD_INT 5
59886: NEG
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 3
59894: NEG
59895: PUSH
59896: LD_INT 4
59898: NEG
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 3
59906: NEG
59907: PUSH
59908: LD_INT 3
59910: NEG
59911: PUSH
59912: EMPTY
59913: LIST
59914: LIST
59915: PUSH
59916: LD_INT 4
59918: NEG
59919: PUSH
59920: LD_INT 3
59922: NEG
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_INT 5
59930: NEG
59931: PUSH
59932: LD_INT 4
59934: NEG
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 5
59942: NEG
59943: PUSH
59944: LD_INT 5
59946: NEG
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 3
59954: NEG
59955: PUSH
59956: LD_INT 5
59958: NEG
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: LD_INT 5
59966: NEG
59967: PUSH
59968: LD_INT 3
59970: NEG
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: LIST
59980: LIST
59981: LIST
59982: LIST
59983: LIST
59984: LIST
59985: LIST
59986: LIST
59987: LIST
59988: LIST
59989: LIST
59990: LIST
59991: LIST
59992: LIST
59993: LIST
59994: LIST
59995: LIST
59996: LIST
59997: LIST
59998: LIST
59999: LIST
60000: LIST
60001: LIST
60002: LIST
60003: LIST
60004: LIST
60005: LIST
60006: LIST
60007: LIST
60008: LIST
60009: LIST
60010: LIST
60011: LIST
60012: LIST
60013: LIST
60014: LIST
60015: LIST
60016: LIST
60017: LIST
60018: LIST
60019: LIST
60020: LIST
60021: LIST
60022: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
60023: LD_ADDR_VAR 0 30
60027: PUSH
60028: LD_INT 4
60030: PUSH
60031: LD_INT 4
60033: PUSH
60034: EMPTY
60035: LIST
60036: LIST
60037: PUSH
60038: LD_INT 4
60040: PUSH
60041: LD_INT 3
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: PUSH
60048: LD_INT 5
60050: PUSH
60051: LD_INT 4
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: LD_INT 5
60060: PUSH
60061: LD_INT 5
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: LD_INT 4
60070: PUSH
60071: LD_INT 5
60073: PUSH
60074: EMPTY
60075: LIST
60076: LIST
60077: PUSH
60078: LD_INT 3
60080: PUSH
60081: LD_INT 4
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: LD_INT 3
60090: PUSH
60091: LD_INT 3
60093: PUSH
60094: EMPTY
60095: LIST
60096: LIST
60097: PUSH
60098: LD_INT 5
60100: PUSH
60101: LD_INT 3
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 3
60110: PUSH
60111: LD_INT 5
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: PUSH
60118: LD_INT 0
60120: PUSH
60121: LD_INT 3
60123: PUSH
60124: EMPTY
60125: LIST
60126: LIST
60127: PUSH
60128: LD_INT 0
60130: PUSH
60131: LD_INT 2
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: PUSH
60138: LD_INT 1
60140: PUSH
60141: LD_INT 3
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: PUSH
60148: LD_INT 1
60150: PUSH
60151: LD_INT 4
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: PUSH
60158: LD_INT 0
60160: PUSH
60161: LD_INT 4
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: PUSH
60168: LD_INT 1
60170: NEG
60171: PUSH
60172: LD_INT 3
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: PUSH
60179: LD_INT 1
60181: NEG
60182: PUSH
60183: LD_INT 2
60185: PUSH
60186: EMPTY
60187: LIST
60188: LIST
60189: PUSH
60190: LD_INT 2
60192: PUSH
60193: LD_INT 4
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: PUSH
60200: LD_INT 2
60202: NEG
60203: PUSH
60204: LD_INT 2
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: LD_INT 4
60213: NEG
60214: PUSH
60215: LD_INT 0
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: LD_INT 4
60224: NEG
60225: PUSH
60226: LD_INT 1
60228: NEG
60229: PUSH
60230: EMPTY
60231: LIST
60232: LIST
60233: PUSH
60234: LD_INT 3
60236: NEG
60237: PUSH
60238: LD_INT 0
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: PUSH
60245: LD_INT 3
60247: NEG
60248: PUSH
60249: LD_INT 1
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: PUSH
60256: LD_INT 4
60258: NEG
60259: PUSH
60260: LD_INT 1
60262: PUSH
60263: EMPTY
60264: LIST
60265: LIST
60266: PUSH
60267: LD_INT 5
60269: NEG
60270: PUSH
60271: LD_INT 0
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: PUSH
60278: LD_INT 5
60280: NEG
60281: PUSH
60282: LD_INT 1
60284: NEG
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 5
60292: NEG
60293: PUSH
60294: LD_INT 2
60296: NEG
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 3
60304: NEG
60305: PUSH
60306: LD_INT 2
60308: PUSH
60309: EMPTY
60310: LIST
60311: LIST
60312: PUSH
60313: LD_INT 3
60315: NEG
60316: PUSH
60317: LD_INT 3
60319: NEG
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 3
60327: NEG
60328: PUSH
60329: LD_INT 4
60331: NEG
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 2
60339: NEG
60340: PUSH
60341: LD_INT 3
60343: NEG
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 2
60351: NEG
60352: PUSH
60353: LD_INT 2
60355: NEG
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 3
60363: NEG
60364: PUSH
60365: LD_INT 2
60367: NEG
60368: PUSH
60369: EMPTY
60370: LIST
60371: LIST
60372: PUSH
60373: LD_INT 4
60375: NEG
60376: PUSH
60377: LD_INT 3
60379: NEG
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: PUSH
60385: LD_INT 4
60387: NEG
60388: PUSH
60389: LD_INT 4
60391: NEG
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PUSH
60397: LD_INT 2
60399: NEG
60400: PUSH
60401: LD_INT 4
60403: NEG
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: PUSH
60409: LD_INT 4
60411: NEG
60412: PUSH
60413: LD_INT 2
60415: NEG
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: LD_INT 0
60423: PUSH
60424: LD_INT 4
60426: NEG
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: PUSH
60432: LD_INT 0
60434: PUSH
60435: LD_INT 5
60437: NEG
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: PUSH
60443: LD_INT 1
60445: PUSH
60446: LD_INT 4
60448: NEG
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: PUSH
60454: LD_INT 1
60456: PUSH
60457: LD_INT 3
60459: NEG
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: PUSH
60465: LD_INT 0
60467: PUSH
60468: LD_INT 3
60470: NEG
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: LD_INT 1
60478: NEG
60479: PUSH
60480: LD_INT 4
60482: NEG
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 1
60490: NEG
60491: PUSH
60492: LD_INT 5
60494: NEG
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PUSH
60500: LD_INT 2
60502: PUSH
60503: LD_INT 3
60505: NEG
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: PUSH
60511: LD_INT 2
60513: NEG
60514: PUSH
60515: LD_INT 5
60517: NEG
60518: PUSH
60519: EMPTY
60520: LIST
60521: LIST
60522: PUSH
60523: EMPTY
60524: LIST
60525: LIST
60526: LIST
60527: LIST
60528: LIST
60529: LIST
60530: LIST
60531: LIST
60532: LIST
60533: LIST
60534: LIST
60535: LIST
60536: LIST
60537: LIST
60538: LIST
60539: LIST
60540: LIST
60541: LIST
60542: LIST
60543: LIST
60544: LIST
60545: LIST
60546: LIST
60547: LIST
60548: LIST
60549: LIST
60550: LIST
60551: LIST
60552: LIST
60553: LIST
60554: LIST
60555: LIST
60556: LIST
60557: LIST
60558: LIST
60559: LIST
60560: LIST
60561: LIST
60562: LIST
60563: LIST
60564: LIST
60565: LIST
60566: LIST
60567: LIST
60568: LIST
60569: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60570: LD_ADDR_VAR 0 31
60574: PUSH
60575: LD_INT 0
60577: PUSH
60578: LD_INT 4
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: PUSH
60585: LD_INT 0
60587: PUSH
60588: LD_INT 3
60590: PUSH
60591: EMPTY
60592: LIST
60593: LIST
60594: PUSH
60595: LD_INT 1
60597: PUSH
60598: LD_INT 4
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: PUSH
60605: LD_INT 1
60607: PUSH
60608: LD_INT 5
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: PUSH
60615: LD_INT 0
60617: PUSH
60618: LD_INT 5
60620: PUSH
60621: EMPTY
60622: LIST
60623: LIST
60624: PUSH
60625: LD_INT 1
60627: NEG
60628: PUSH
60629: LD_INT 4
60631: PUSH
60632: EMPTY
60633: LIST
60634: LIST
60635: PUSH
60636: LD_INT 1
60638: NEG
60639: PUSH
60640: LD_INT 3
60642: PUSH
60643: EMPTY
60644: LIST
60645: LIST
60646: PUSH
60647: LD_INT 2
60649: PUSH
60650: LD_INT 5
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: LD_INT 2
60659: NEG
60660: PUSH
60661: LD_INT 3
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PUSH
60668: LD_INT 3
60670: NEG
60671: PUSH
60672: LD_INT 0
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: PUSH
60679: LD_INT 3
60681: NEG
60682: PUSH
60683: LD_INT 1
60685: NEG
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: LD_INT 2
60693: NEG
60694: PUSH
60695: LD_INT 0
60697: PUSH
60698: EMPTY
60699: LIST
60700: LIST
60701: PUSH
60702: LD_INT 2
60704: NEG
60705: PUSH
60706: LD_INT 1
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: PUSH
60713: LD_INT 3
60715: NEG
60716: PUSH
60717: LD_INT 1
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: PUSH
60724: LD_INT 4
60726: NEG
60727: PUSH
60728: LD_INT 0
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 4
60737: NEG
60738: PUSH
60739: LD_INT 1
60741: NEG
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: PUSH
60747: LD_INT 4
60749: NEG
60750: PUSH
60751: LD_INT 2
60753: NEG
60754: PUSH
60755: EMPTY
60756: LIST
60757: LIST
60758: PUSH
60759: LD_INT 2
60761: NEG
60762: PUSH
60763: LD_INT 2
60765: PUSH
60766: EMPTY
60767: LIST
60768: LIST
60769: PUSH
60770: LD_INT 4
60772: NEG
60773: PUSH
60774: LD_INT 4
60776: NEG
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 4
60784: NEG
60785: PUSH
60786: LD_INT 5
60788: NEG
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: PUSH
60794: LD_INT 3
60796: NEG
60797: PUSH
60798: LD_INT 4
60800: NEG
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PUSH
60806: LD_INT 3
60808: NEG
60809: PUSH
60810: LD_INT 3
60812: NEG
60813: PUSH
60814: EMPTY
60815: LIST
60816: LIST
60817: PUSH
60818: LD_INT 4
60820: NEG
60821: PUSH
60822: LD_INT 3
60824: NEG
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: PUSH
60830: LD_INT 5
60832: NEG
60833: PUSH
60834: LD_INT 4
60836: NEG
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PUSH
60842: LD_INT 5
60844: NEG
60845: PUSH
60846: LD_INT 5
60848: NEG
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 3
60856: NEG
60857: PUSH
60858: LD_INT 5
60860: NEG
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: PUSH
60866: LD_INT 5
60868: NEG
60869: PUSH
60870: LD_INT 3
60872: NEG
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: PUSH
60878: LD_INT 0
60880: PUSH
60881: LD_INT 3
60883: NEG
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: PUSH
60889: LD_INT 0
60891: PUSH
60892: LD_INT 4
60894: NEG
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 1
60902: PUSH
60903: LD_INT 3
60905: NEG
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: LD_INT 1
60913: PUSH
60914: LD_INT 2
60916: NEG
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: PUSH
60922: LD_INT 0
60924: PUSH
60925: LD_INT 2
60927: NEG
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PUSH
60933: LD_INT 1
60935: NEG
60936: PUSH
60937: LD_INT 3
60939: NEG
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 1
60947: NEG
60948: PUSH
60949: LD_INT 4
60951: NEG
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: PUSH
60957: LD_INT 2
60959: PUSH
60960: LD_INT 2
60962: NEG
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: PUSH
60968: LD_INT 2
60970: NEG
60971: PUSH
60972: LD_INT 4
60974: NEG
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: PUSH
60980: LD_INT 4
60982: PUSH
60983: LD_INT 0
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 4
60992: PUSH
60993: LD_INT 1
60995: NEG
60996: PUSH
60997: EMPTY
60998: LIST
60999: LIST
61000: PUSH
61001: LD_INT 5
61003: PUSH
61004: LD_INT 0
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: LD_INT 5
61013: PUSH
61014: LD_INT 1
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: PUSH
61021: LD_INT 4
61023: PUSH
61024: LD_INT 1
61026: PUSH
61027: EMPTY
61028: LIST
61029: LIST
61030: PUSH
61031: LD_INT 3
61033: PUSH
61034: LD_INT 0
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: PUSH
61041: LD_INT 3
61043: PUSH
61044: LD_INT 1
61046: NEG
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 3
61054: PUSH
61055: LD_INT 2
61057: NEG
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: PUSH
61063: LD_INT 5
61065: PUSH
61066: LD_INT 2
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: EMPTY
61074: LIST
61075: LIST
61076: LIST
61077: LIST
61078: LIST
61079: LIST
61080: LIST
61081: LIST
61082: LIST
61083: LIST
61084: LIST
61085: LIST
61086: LIST
61087: LIST
61088: LIST
61089: LIST
61090: LIST
61091: LIST
61092: LIST
61093: LIST
61094: LIST
61095: LIST
61096: LIST
61097: LIST
61098: LIST
61099: LIST
61100: LIST
61101: LIST
61102: LIST
61103: LIST
61104: LIST
61105: LIST
61106: LIST
61107: LIST
61108: LIST
61109: LIST
61110: LIST
61111: LIST
61112: LIST
61113: LIST
61114: LIST
61115: LIST
61116: LIST
61117: LIST
61118: LIST
61119: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
61120: LD_ADDR_VAR 0 32
61124: PUSH
61125: LD_INT 4
61127: NEG
61128: PUSH
61129: LD_INT 0
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: PUSH
61136: LD_INT 4
61138: NEG
61139: PUSH
61140: LD_INT 1
61142: NEG
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: PUSH
61148: LD_INT 3
61150: NEG
61151: PUSH
61152: LD_INT 0
61154: PUSH
61155: EMPTY
61156: LIST
61157: LIST
61158: PUSH
61159: LD_INT 3
61161: NEG
61162: PUSH
61163: LD_INT 1
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: LD_INT 4
61172: NEG
61173: PUSH
61174: LD_INT 1
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 5
61183: NEG
61184: PUSH
61185: LD_INT 0
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 5
61194: NEG
61195: PUSH
61196: LD_INT 1
61198: NEG
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: PUSH
61204: LD_INT 5
61206: NEG
61207: PUSH
61208: LD_INT 2
61210: NEG
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: PUSH
61216: LD_INT 3
61218: NEG
61219: PUSH
61220: LD_INT 2
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PUSH
61227: LD_INT 3
61229: NEG
61230: PUSH
61231: LD_INT 3
61233: NEG
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: PUSH
61239: LD_INT 3
61241: NEG
61242: PUSH
61243: LD_INT 4
61245: NEG
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: PUSH
61251: LD_INT 2
61253: NEG
61254: PUSH
61255: LD_INT 3
61257: NEG
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 2
61265: NEG
61266: PUSH
61267: LD_INT 2
61269: NEG
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: PUSH
61275: LD_INT 3
61277: NEG
61278: PUSH
61279: LD_INT 2
61281: NEG
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: PUSH
61287: LD_INT 4
61289: NEG
61290: PUSH
61291: LD_INT 3
61293: NEG
61294: PUSH
61295: EMPTY
61296: LIST
61297: LIST
61298: PUSH
61299: LD_INT 4
61301: NEG
61302: PUSH
61303: LD_INT 4
61305: NEG
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: LD_INT 2
61313: NEG
61314: PUSH
61315: LD_INT 4
61317: NEG
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: PUSH
61323: LD_INT 4
61325: NEG
61326: PUSH
61327: LD_INT 2
61329: NEG
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PUSH
61335: LD_INT 0
61337: PUSH
61338: LD_INT 4
61340: NEG
61341: PUSH
61342: EMPTY
61343: LIST
61344: LIST
61345: PUSH
61346: LD_INT 0
61348: PUSH
61349: LD_INT 5
61351: NEG
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: PUSH
61357: LD_INT 1
61359: PUSH
61360: LD_INT 4
61362: NEG
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: LD_INT 1
61370: PUSH
61371: LD_INT 3
61373: NEG
61374: PUSH
61375: EMPTY
61376: LIST
61377: LIST
61378: PUSH
61379: LD_INT 0
61381: PUSH
61382: LD_INT 3
61384: NEG
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: LD_INT 1
61392: NEG
61393: PUSH
61394: LD_INT 4
61396: NEG
61397: PUSH
61398: EMPTY
61399: LIST
61400: LIST
61401: PUSH
61402: LD_INT 1
61404: NEG
61405: PUSH
61406: LD_INT 5
61408: NEG
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: PUSH
61414: LD_INT 2
61416: PUSH
61417: LD_INT 3
61419: NEG
61420: PUSH
61421: EMPTY
61422: LIST
61423: LIST
61424: PUSH
61425: LD_INT 2
61427: NEG
61428: PUSH
61429: LD_INT 5
61431: NEG
61432: PUSH
61433: EMPTY
61434: LIST
61435: LIST
61436: PUSH
61437: LD_INT 3
61439: PUSH
61440: LD_INT 0
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: PUSH
61447: LD_INT 3
61449: PUSH
61450: LD_INT 1
61452: NEG
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: PUSH
61458: LD_INT 4
61460: PUSH
61461: LD_INT 0
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PUSH
61468: LD_INT 4
61470: PUSH
61471: LD_INT 1
61473: PUSH
61474: EMPTY
61475: LIST
61476: LIST
61477: PUSH
61478: LD_INT 3
61480: PUSH
61481: LD_INT 1
61483: PUSH
61484: EMPTY
61485: LIST
61486: LIST
61487: PUSH
61488: LD_INT 2
61490: PUSH
61491: LD_INT 0
61493: PUSH
61494: EMPTY
61495: LIST
61496: LIST
61497: PUSH
61498: LD_INT 2
61500: PUSH
61501: LD_INT 1
61503: NEG
61504: PUSH
61505: EMPTY
61506: LIST
61507: LIST
61508: PUSH
61509: LD_INT 2
61511: PUSH
61512: LD_INT 2
61514: NEG
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: PUSH
61520: LD_INT 4
61522: PUSH
61523: LD_INT 2
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 4
61532: PUSH
61533: LD_INT 4
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: LD_INT 4
61542: PUSH
61543: LD_INT 3
61545: PUSH
61546: EMPTY
61547: LIST
61548: LIST
61549: PUSH
61550: LD_INT 5
61552: PUSH
61553: LD_INT 4
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PUSH
61560: LD_INT 5
61562: PUSH
61563: LD_INT 5
61565: PUSH
61566: EMPTY
61567: LIST
61568: LIST
61569: PUSH
61570: LD_INT 4
61572: PUSH
61573: LD_INT 5
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: PUSH
61580: LD_INT 3
61582: PUSH
61583: LD_INT 4
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: PUSH
61590: LD_INT 3
61592: PUSH
61593: LD_INT 3
61595: PUSH
61596: EMPTY
61597: LIST
61598: LIST
61599: PUSH
61600: LD_INT 5
61602: PUSH
61603: LD_INT 3
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: PUSH
61610: LD_INT 3
61612: PUSH
61613: LD_INT 5
61615: PUSH
61616: EMPTY
61617: LIST
61618: LIST
61619: PUSH
61620: EMPTY
61621: LIST
61622: LIST
61623: LIST
61624: LIST
61625: LIST
61626: LIST
61627: LIST
61628: LIST
61629: LIST
61630: LIST
61631: LIST
61632: LIST
61633: LIST
61634: LIST
61635: LIST
61636: LIST
61637: LIST
61638: LIST
61639: LIST
61640: LIST
61641: LIST
61642: LIST
61643: LIST
61644: LIST
61645: LIST
61646: LIST
61647: LIST
61648: LIST
61649: LIST
61650: LIST
61651: LIST
61652: LIST
61653: LIST
61654: LIST
61655: LIST
61656: LIST
61657: LIST
61658: LIST
61659: LIST
61660: LIST
61661: LIST
61662: LIST
61663: LIST
61664: LIST
61665: LIST
61666: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61667: LD_ADDR_VAR 0 33
61671: PUSH
61672: LD_INT 4
61674: NEG
61675: PUSH
61676: LD_INT 4
61678: NEG
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: PUSH
61684: LD_INT 4
61686: NEG
61687: PUSH
61688: LD_INT 5
61690: NEG
61691: PUSH
61692: EMPTY
61693: LIST
61694: LIST
61695: PUSH
61696: LD_INT 3
61698: NEG
61699: PUSH
61700: LD_INT 4
61702: NEG
61703: PUSH
61704: EMPTY
61705: LIST
61706: LIST
61707: PUSH
61708: LD_INT 3
61710: NEG
61711: PUSH
61712: LD_INT 3
61714: NEG
61715: PUSH
61716: EMPTY
61717: LIST
61718: LIST
61719: PUSH
61720: LD_INT 4
61722: NEG
61723: PUSH
61724: LD_INT 3
61726: NEG
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: PUSH
61732: LD_INT 5
61734: NEG
61735: PUSH
61736: LD_INT 4
61738: NEG
61739: PUSH
61740: EMPTY
61741: LIST
61742: LIST
61743: PUSH
61744: LD_INT 5
61746: NEG
61747: PUSH
61748: LD_INT 5
61750: NEG
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: PUSH
61756: LD_INT 3
61758: NEG
61759: PUSH
61760: LD_INT 5
61762: NEG
61763: PUSH
61764: EMPTY
61765: LIST
61766: LIST
61767: PUSH
61768: LD_INT 5
61770: NEG
61771: PUSH
61772: LD_INT 3
61774: NEG
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: PUSH
61780: LD_INT 0
61782: PUSH
61783: LD_INT 3
61785: NEG
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: PUSH
61791: LD_INT 0
61793: PUSH
61794: LD_INT 4
61796: NEG
61797: PUSH
61798: EMPTY
61799: LIST
61800: LIST
61801: PUSH
61802: LD_INT 1
61804: PUSH
61805: LD_INT 3
61807: NEG
61808: PUSH
61809: EMPTY
61810: LIST
61811: LIST
61812: PUSH
61813: LD_INT 1
61815: PUSH
61816: LD_INT 2
61818: NEG
61819: PUSH
61820: EMPTY
61821: LIST
61822: LIST
61823: PUSH
61824: LD_INT 0
61826: PUSH
61827: LD_INT 2
61829: NEG
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: PUSH
61835: LD_INT 1
61837: NEG
61838: PUSH
61839: LD_INT 3
61841: NEG
61842: PUSH
61843: EMPTY
61844: LIST
61845: LIST
61846: PUSH
61847: LD_INT 1
61849: NEG
61850: PUSH
61851: LD_INT 4
61853: NEG
61854: PUSH
61855: EMPTY
61856: LIST
61857: LIST
61858: PUSH
61859: LD_INT 2
61861: PUSH
61862: LD_INT 2
61864: NEG
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: PUSH
61870: LD_INT 2
61872: NEG
61873: PUSH
61874: LD_INT 4
61876: NEG
61877: PUSH
61878: EMPTY
61879: LIST
61880: LIST
61881: PUSH
61882: LD_INT 4
61884: PUSH
61885: LD_INT 0
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: PUSH
61892: LD_INT 4
61894: PUSH
61895: LD_INT 1
61897: NEG
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: PUSH
61903: LD_INT 5
61905: PUSH
61906: LD_INT 0
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: PUSH
61913: LD_INT 5
61915: PUSH
61916: LD_INT 1
61918: PUSH
61919: EMPTY
61920: LIST
61921: LIST
61922: PUSH
61923: LD_INT 4
61925: PUSH
61926: LD_INT 1
61928: PUSH
61929: EMPTY
61930: LIST
61931: LIST
61932: PUSH
61933: LD_INT 3
61935: PUSH
61936: LD_INT 0
61938: PUSH
61939: EMPTY
61940: LIST
61941: LIST
61942: PUSH
61943: LD_INT 3
61945: PUSH
61946: LD_INT 1
61948: NEG
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: PUSH
61954: LD_INT 3
61956: PUSH
61957: LD_INT 2
61959: NEG
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: LD_INT 5
61967: PUSH
61968: LD_INT 2
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: LD_INT 3
61977: PUSH
61978: LD_INT 3
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: PUSH
61985: LD_INT 3
61987: PUSH
61988: LD_INT 2
61990: PUSH
61991: EMPTY
61992: LIST
61993: LIST
61994: PUSH
61995: LD_INT 4
61997: PUSH
61998: LD_INT 3
62000: PUSH
62001: EMPTY
62002: LIST
62003: LIST
62004: PUSH
62005: LD_INT 4
62007: PUSH
62008: LD_INT 4
62010: PUSH
62011: EMPTY
62012: LIST
62013: LIST
62014: PUSH
62015: LD_INT 3
62017: PUSH
62018: LD_INT 4
62020: PUSH
62021: EMPTY
62022: LIST
62023: LIST
62024: PUSH
62025: LD_INT 2
62027: PUSH
62028: LD_INT 3
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 2
62037: PUSH
62038: LD_INT 2
62040: PUSH
62041: EMPTY
62042: LIST
62043: LIST
62044: PUSH
62045: LD_INT 4
62047: PUSH
62048: LD_INT 2
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PUSH
62055: LD_INT 2
62057: PUSH
62058: LD_INT 4
62060: PUSH
62061: EMPTY
62062: LIST
62063: LIST
62064: PUSH
62065: LD_INT 0
62067: PUSH
62068: LD_INT 4
62070: PUSH
62071: EMPTY
62072: LIST
62073: LIST
62074: PUSH
62075: LD_INT 0
62077: PUSH
62078: LD_INT 3
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: LD_INT 1
62087: PUSH
62088: LD_INT 4
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: PUSH
62095: LD_INT 1
62097: PUSH
62098: LD_INT 5
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: PUSH
62105: LD_INT 0
62107: PUSH
62108: LD_INT 5
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: PUSH
62115: LD_INT 1
62117: NEG
62118: PUSH
62119: LD_INT 4
62121: PUSH
62122: EMPTY
62123: LIST
62124: LIST
62125: PUSH
62126: LD_INT 1
62128: NEG
62129: PUSH
62130: LD_INT 3
62132: PUSH
62133: EMPTY
62134: LIST
62135: LIST
62136: PUSH
62137: LD_INT 2
62139: PUSH
62140: LD_INT 5
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: PUSH
62147: LD_INT 2
62149: NEG
62150: PUSH
62151: LD_INT 3
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: PUSH
62158: EMPTY
62159: LIST
62160: LIST
62161: LIST
62162: LIST
62163: LIST
62164: LIST
62165: LIST
62166: LIST
62167: LIST
62168: LIST
62169: LIST
62170: LIST
62171: LIST
62172: LIST
62173: LIST
62174: LIST
62175: LIST
62176: LIST
62177: LIST
62178: LIST
62179: LIST
62180: LIST
62181: LIST
62182: LIST
62183: LIST
62184: LIST
62185: LIST
62186: LIST
62187: LIST
62188: LIST
62189: LIST
62190: LIST
62191: LIST
62192: LIST
62193: LIST
62194: LIST
62195: LIST
62196: LIST
62197: LIST
62198: LIST
62199: LIST
62200: LIST
62201: LIST
62202: LIST
62203: LIST
62204: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62205: LD_ADDR_VAR 0 34
62209: PUSH
62210: LD_INT 0
62212: PUSH
62213: LD_INT 4
62215: NEG
62216: PUSH
62217: EMPTY
62218: LIST
62219: LIST
62220: PUSH
62221: LD_INT 0
62223: PUSH
62224: LD_INT 5
62226: NEG
62227: PUSH
62228: EMPTY
62229: LIST
62230: LIST
62231: PUSH
62232: LD_INT 1
62234: PUSH
62235: LD_INT 4
62237: NEG
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PUSH
62243: LD_INT 1
62245: PUSH
62246: LD_INT 3
62248: NEG
62249: PUSH
62250: EMPTY
62251: LIST
62252: LIST
62253: PUSH
62254: LD_INT 0
62256: PUSH
62257: LD_INT 3
62259: NEG
62260: PUSH
62261: EMPTY
62262: LIST
62263: LIST
62264: PUSH
62265: LD_INT 1
62267: NEG
62268: PUSH
62269: LD_INT 4
62271: NEG
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: PUSH
62277: LD_INT 1
62279: NEG
62280: PUSH
62281: LD_INT 5
62283: NEG
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: LD_INT 2
62291: PUSH
62292: LD_INT 3
62294: NEG
62295: PUSH
62296: EMPTY
62297: LIST
62298: LIST
62299: PUSH
62300: LD_INT 2
62302: NEG
62303: PUSH
62304: LD_INT 5
62306: NEG
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: PUSH
62312: LD_INT 3
62314: PUSH
62315: LD_INT 0
62317: PUSH
62318: EMPTY
62319: LIST
62320: LIST
62321: PUSH
62322: LD_INT 3
62324: PUSH
62325: LD_INT 1
62327: NEG
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: PUSH
62333: LD_INT 4
62335: PUSH
62336: LD_INT 0
62338: PUSH
62339: EMPTY
62340: LIST
62341: LIST
62342: PUSH
62343: LD_INT 4
62345: PUSH
62346: LD_INT 1
62348: PUSH
62349: EMPTY
62350: LIST
62351: LIST
62352: PUSH
62353: LD_INT 3
62355: PUSH
62356: LD_INT 1
62358: PUSH
62359: EMPTY
62360: LIST
62361: LIST
62362: PUSH
62363: LD_INT 2
62365: PUSH
62366: LD_INT 0
62368: PUSH
62369: EMPTY
62370: LIST
62371: LIST
62372: PUSH
62373: LD_INT 2
62375: PUSH
62376: LD_INT 1
62378: NEG
62379: PUSH
62380: EMPTY
62381: LIST
62382: LIST
62383: PUSH
62384: LD_INT 2
62386: PUSH
62387: LD_INT 2
62389: NEG
62390: PUSH
62391: EMPTY
62392: LIST
62393: LIST
62394: PUSH
62395: LD_INT 4
62397: PUSH
62398: LD_INT 2
62400: PUSH
62401: EMPTY
62402: LIST
62403: LIST
62404: PUSH
62405: LD_INT 4
62407: PUSH
62408: LD_INT 4
62410: PUSH
62411: EMPTY
62412: LIST
62413: LIST
62414: PUSH
62415: LD_INT 4
62417: PUSH
62418: LD_INT 3
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: PUSH
62425: LD_INT 5
62427: PUSH
62428: LD_INT 4
62430: PUSH
62431: EMPTY
62432: LIST
62433: LIST
62434: PUSH
62435: LD_INT 5
62437: PUSH
62438: LD_INT 5
62440: PUSH
62441: EMPTY
62442: LIST
62443: LIST
62444: PUSH
62445: LD_INT 4
62447: PUSH
62448: LD_INT 5
62450: PUSH
62451: EMPTY
62452: LIST
62453: LIST
62454: PUSH
62455: LD_INT 3
62457: PUSH
62458: LD_INT 4
62460: PUSH
62461: EMPTY
62462: LIST
62463: LIST
62464: PUSH
62465: LD_INT 3
62467: PUSH
62468: LD_INT 3
62470: PUSH
62471: EMPTY
62472: LIST
62473: LIST
62474: PUSH
62475: LD_INT 5
62477: PUSH
62478: LD_INT 3
62480: PUSH
62481: EMPTY
62482: LIST
62483: LIST
62484: PUSH
62485: LD_INT 3
62487: PUSH
62488: LD_INT 5
62490: PUSH
62491: EMPTY
62492: LIST
62493: LIST
62494: PUSH
62495: LD_INT 0
62497: PUSH
62498: LD_INT 3
62500: PUSH
62501: EMPTY
62502: LIST
62503: LIST
62504: PUSH
62505: LD_INT 0
62507: PUSH
62508: LD_INT 2
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: PUSH
62515: LD_INT 1
62517: PUSH
62518: LD_INT 3
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: PUSH
62525: LD_INT 1
62527: PUSH
62528: LD_INT 4
62530: PUSH
62531: EMPTY
62532: LIST
62533: LIST
62534: PUSH
62535: LD_INT 0
62537: PUSH
62538: LD_INT 4
62540: PUSH
62541: EMPTY
62542: LIST
62543: LIST
62544: PUSH
62545: LD_INT 1
62547: NEG
62548: PUSH
62549: LD_INT 3
62551: PUSH
62552: EMPTY
62553: LIST
62554: LIST
62555: PUSH
62556: LD_INT 1
62558: NEG
62559: PUSH
62560: LD_INT 2
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: PUSH
62567: LD_INT 2
62569: PUSH
62570: LD_INT 4
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: LD_INT 2
62579: NEG
62580: PUSH
62581: LD_INT 2
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: PUSH
62588: LD_INT 4
62590: NEG
62591: PUSH
62592: LD_INT 0
62594: PUSH
62595: EMPTY
62596: LIST
62597: LIST
62598: PUSH
62599: LD_INT 4
62601: NEG
62602: PUSH
62603: LD_INT 1
62605: NEG
62606: PUSH
62607: EMPTY
62608: LIST
62609: LIST
62610: PUSH
62611: LD_INT 3
62613: NEG
62614: PUSH
62615: LD_INT 0
62617: PUSH
62618: EMPTY
62619: LIST
62620: LIST
62621: PUSH
62622: LD_INT 3
62624: NEG
62625: PUSH
62626: LD_INT 1
62628: PUSH
62629: EMPTY
62630: LIST
62631: LIST
62632: PUSH
62633: LD_INT 4
62635: NEG
62636: PUSH
62637: LD_INT 1
62639: PUSH
62640: EMPTY
62641: LIST
62642: LIST
62643: PUSH
62644: LD_INT 5
62646: NEG
62647: PUSH
62648: LD_INT 0
62650: PUSH
62651: EMPTY
62652: LIST
62653: LIST
62654: PUSH
62655: LD_INT 5
62657: NEG
62658: PUSH
62659: LD_INT 1
62661: NEG
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: PUSH
62667: LD_INT 5
62669: NEG
62670: PUSH
62671: LD_INT 2
62673: NEG
62674: PUSH
62675: EMPTY
62676: LIST
62677: LIST
62678: PUSH
62679: LD_INT 3
62681: NEG
62682: PUSH
62683: LD_INT 2
62685: PUSH
62686: EMPTY
62687: LIST
62688: LIST
62689: PUSH
62690: EMPTY
62691: LIST
62692: LIST
62693: LIST
62694: LIST
62695: LIST
62696: LIST
62697: LIST
62698: LIST
62699: LIST
62700: LIST
62701: LIST
62702: LIST
62703: LIST
62704: LIST
62705: LIST
62706: LIST
62707: LIST
62708: LIST
62709: LIST
62710: LIST
62711: LIST
62712: LIST
62713: LIST
62714: LIST
62715: LIST
62716: LIST
62717: LIST
62718: LIST
62719: LIST
62720: LIST
62721: LIST
62722: LIST
62723: LIST
62724: LIST
62725: LIST
62726: LIST
62727: LIST
62728: LIST
62729: LIST
62730: LIST
62731: LIST
62732: LIST
62733: LIST
62734: LIST
62735: LIST
62736: ST_TO_ADDR
// end ; end ;
62737: GO 62740
62739: POP
// case btype of b_depot , b_warehouse :
62740: LD_VAR 0 1
62744: PUSH
62745: LD_INT 0
62747: DOUBLE
62748: EQUAL
62749: IFTRUE 62759
62751: LD_INT 1
62753: DOUBLE
62754: EQUAL
62755: IFTRUE 62759
62757: GO 62960
62759: POP
// case nation of nation_american :
62760: LD_VAR 0 5
62764: PUSH
62765: LD_INT 1
62767: DOUBLE
62768: EQUAL
62769: IFTRUE 62773
62771: GO 62829
62773: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62774: LD_ADDR_VAR 0 9
62778: PUSH
62779: LD_VAR 0 11
62783: PUSH
62784: LD_VAR 0 12
62788: PUSH
62789: LD_VAR 0 13
62793: PUSH
62794: LD_VAR 0 14
62798: PUSH
62799: LD_VAR 0 15
62803: PUSH
62804: LD_VAR 0 16
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: LIST
62813: LIST
62814: LIST
62815: LIST
62816: PUSH
62817: LD_VAR 0 4
62821: PUSH
62822: LD_INT 1
62824: PLUS
62825: ARRAY
62826: ST_TO_ADDR
62827: GO 62958
62829: LD_INT 2
62831: DOUBLE
62832: EQUAL
62833: IFTRUE 62837
62835: GO 62893
62837: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62838: LD_ADDR_VAR 0 9
62842: PUSH
62843: LD_VAR 0 17
62847: PUSH
62848: LD_VAR 0 18
62852: PUSH
62853: LD_VAR 0 19
62857: PUSH
62858: LD_VAR 0 20
62862: PUSH
62863: LD_VAR 0 21
62867: PUSH
62868: LD_VAR 0 22
62872: PUSH
62873: EMPTY
62874: LIST
62875: LIST
62876: LIST
62877: LIST
62878: LIST
62879: LIST
62880: PUSH
62881: LD_VAR 0 4
62885: PUSH
62886: LD_INT 1
62888: PLUS
62889: ARRAY
62890: ST_TO_ADDR
62891: GO 62958
62893: LD_INT 3
62895: DOUBLE
62896: EQUAL
62897: IFTRUE 62901
62899: GO 62957
62901: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62902: LD_ADDR_VAR 0 9
62906: PUSH
62907: LD_VAR 0 23
62911: PUSH
62912: LD_VAR 0 24
62916: PUSH
62917: LD_VAR 0 25
62921: PUSH
62922: LD_VAR 0 26
62926: PUSH
62927: LD_VAR 0 27
62931: PUSH
62932: LD_VAR 0 28
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: LIST
62941: LIST
62942: LIST
62943: LIST
62944: PUSH
62945: LD_VAR 0 4
62949: PUSH
62950: LD_INT 1
62952: PLUS
62953: ARRAY
62954: ST_TO_ADDR
62955: GO 62958
62957: POP
62958: GO 63513
62960: LD_INT 2
62962: DOUBLE
62963: EQUAL
62964: IFTRUE 62974
62966: LD_INT 3
62968: DOUBLE
62969: EQUAL
62970: IFTRUE 62974
62972: GO 63030
62974: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62975: LD_ADDR_VAR 0 9
62979: PUSH
62980: LD_VAR 0 29
62984: PUSH
62985: LD_VAR 0 30
62989: PUSH
62990: LD_VAR 0 31
62994: PUSH
62995: LD_VAR 0 32
62999: PUSH
63000: LD_VAR 0 33
63004: PUSH
63005: LD_VAR 0 34
63009: PUSH
63010: EMPTY
63011: LIST
63012: LIST
63013: LIST
63014: LIST
63015: LIST
63016: LIST
63017: PUSH
63018: LD_VAR 0 4
63022: PUSH
63023: LD_INT 1
63025: PLUS
63026: ARRAY
63027: ST_TO_ADDR
63028: GO 63513
63030: LD_INT 16
63032: DOUBLE
63033: EQUAL
63034: IFTRUE 63092
63036: LD_INT 17
63038: DOUBLE
63039: EQUAL
63040: IFTRUE 63092
63042: LD_INT 18
63044: DOUBLE
63045: EQUAL
63046: IFTRUE 63092
63048: LD_INT 19
63050: DOUBLE
63051: EQUAL
63052: IFTRUE 63092
63054: LD_INT 22
63056: DOUBLE
63057: EQUAL
63058: IFTRUE 63092
63060: LD_INT 20
63062: DOUBLE
63063: EQUAL
63064: IFTRUE 63092
63066: LD_INT 21
63068: DOUBLE
63069: EQUAL
63070: IFTRUE 63092
63072: LD_INT 23
63074: DOUBLE
63075: EQUAL
63076: IFTRUE 63092
63078: LD_INT 24
63080: DOUBLE
63081: EQUAL
63082: IFTRUE 63092
63084: LD_INT 25
63086: DOUBLE
63087: EQUAL
63088: IFTRUE 63092
63090: GO 63148
63092: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
63093: LD_ADDR_VAR 0 9
63097: PUSH
63098: LD_VAR 0 35
63102: PUSH
63103: LD_VAR 0 36
63107: PUSH
63108: LD_VAR 0 37
63112: PUSH
63113: LD_VAR 0 38
63117: PUSH
63118: LD_VAR 0 39
63122: PUSH
63123: LD_VAR 0 40
63127: PUSH
63128: EMPTY
63129: LIST
63130: LIST
63131: LIST
63132: LIST
63133: LIST
63134: LIST
63135: PUSH
63136: LD_VAR 0 4
63140: PUSH
63141: LD_INT 1
63143: PLUS
63144: ARRAY
63145: ST_TO_ADDR
63146: GO 63513
63148: LD_INT 6
63150: DOUBLE
63151: EQUAL
63152: IFTRUE 63204
63154: LD_INT 7
63156: DOUBLE
63157: EQUAL
63158: IFTRUE 63204
63160: LD_INT 8
63162: DOUBLE
63163: EQUAL
63164: IFTRUE 63204
63166: LD_INT 13
63168: DOUBLE
63169: EQUAL
63170: IFTRUE 63204
63172: LD_INT 12
63174: DOUBLE
63175: EQUAL
63176: IFTRUE 63204
63178: LD_INT 15
63180: DOUBLE
63181: EQUAL
63182: IFTRUE 63204
63184: LD_INT 11
63186: DOUBLE
63187: EQUAL
63188: IFTRUE 63204
63190: LD_INT 14
63192: DOUBLE
63193: EQUAL
63194: IFTRUE 63204
63196: LD_INT 10
63198: DOUBLE
63199: EQUAL
63200: IFTRUE 63204
63202: GO 63260
63204: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63205: LD_ADDR_VAR 0 9
63209: PUSH
63210: LD_VAR 0 41
63214: PUSH
63215: LD_VAR 0 42
63219: PUSH
63220: LD_VAR 0 43
63224: PUSH
63225: LD_VAR 0 44
63229: PUSH
63230: LD_VAR 0 45
63234: PUSH
63235: LD_VAR 0 46
63239: PUSH
63240: EMPTY
63241: LIST
63242: LIST
63243: LIST
63244: LIST
63245: LIST
63246: LIST
63247: PUSH
63248: LD_VAR 0 4
63252: PUSH
63253: LD_INT 1
63255: PLUS
63256: ARRAY
63257: ST_TO_ADDR
63258: GO 63513
63260: LD_INT 36
63262: DOUBLE
63263: EQUAL
63264: IFTRUE 63268
63266: GO 63324
63268: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63269: LD_ADDR_VAR 0 9
63273: PUSH
63274: LD_VAR 0 47
63278: PUSH
63279: LD_VAR 0 48
63283: PUSH
63284: LD_VAR 0 49
63288: PUSH
63289: LD_VAR 0 50
63293: PUSH
63294: LD_VAR 0 51
63298: PUSH
63299: LD_VAR 0 52
63303: PUSH
63304: EMPTY
63305: LIST
63306: LIST
63307: LIST
63308: LIST
63309: LIST
63310: LIST
63311: PUSH
63312: LD_VAR 0 4
63316: PUSH
63317: LD_INT 1
63319: PLUS
63320: ARRAY
63321: ST_TO_ADDR
63322: GO 63513
63324: LD_INT 4
63326: DOUBLE
63327: EQUAL
63328: IFTRUE 63350
63330: LD_INT 5
63332: DOUBLE
63333: EQUAL
63334: IFTRUE 63350
63336: LD_INT 34
63338: DOUBLE
63339: EQUAL
63340: IFTRUE 63350
63342: LD_INT 37
63344: DOUBLE
63345: EQUAL
63346: IFTRUE 63350
63348: GO 63406
63350: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63351: LD_ADDR_VAR 0 9
63355: PUSH
63356: LD_VAR 0 53
63360: PUSH
63361: LD_VAR 0 54
63365: PUSH
63366: LD_VAR 0 55
63370: PUSH
63371: LD_VAR 0 56
63375: PUSH
63376: LD_VAR 0 57
63380: PUSH
63381: LD_VAR 0 58
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: LIST
63390: LIST
63391: LIST
63392: LIST
63393: PUSH
63394: LD_VAR 0 4
63398: PUSH
63399: LD_INT 1
63401: PLUS
63402: ARRAY
63403: ST_TO_ADDR
63404: GO 63513
63406: LD_INT 31
63408: DOUBLE
63409: EQUAL
63410: IFTRUE 63456
63412: LD_INT 32
63414: DOUBLE
63415: EQUAL
63416: IFTRUE 63456
63418: LD_INT 33
63420: DOUBLE
63421: EQUAL
63422: IFTRUE 63456
63424: LD_INT 27
63426: DOUBLE
63427: EQUAL
63428: IFTRUE 63456
63430: LD_INT 26
63432: DOUBLE
63433: EQUAL
63434: IFTRUE 63456
63436: LD_INT 28
63438: DOUBLE
63439: EQUAL
63440: IFTRUE 63456
63442: LD_INT 29
63444: DOUBLE
63445: EQUAL
63446: IFTRUE 63456
63448: LD_INT 30
63450: DOUBLE
63451: EQUAL
63452: IFTRUE 63456
63454: GO 63512
63456: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63457: LD_ADDR_VAR 0 9
63461: PUSH
63462: LD_VAR 0 59
63466: PUSH
63467: LD_VAR 0 60
63471: PUSH
63472: LD_VAR 0 61
63476: PUSH
63477: LD_VAR 0 62
63481: PUSH
63482: LD_VAR 0 63
63486: PUSH
63487: LD_VAR 0 64
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: LIST
63496: LIST
63497: LIST
63498: LIST
63499: PUSH
63500: LD_VAR 0 4
63504: PUSH
63505: LD_INT 1
63507: PLUS
63508: ARRAY
63509: ST_TO_ADDR
63510: GO 63513
63512: POP
// temp_list2 = [ ] ;
63513: LD_ADDR_VAR 0 10
63517: PUSH
63518: EMPTY
63519: ST_TO_ADDR
// for i in temp_list do
63520: LD_ADDR_VAR 0 8
63524: PUSH
63525: LD_VAR 0 9
63529: PUSH
63530: FOR_IN
63531: IFFALSE 63583
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63533: LD_ADDR_VAR 0 10
63537: PUSH
63538: LD_VAR 0 10
63542: PUSH
63543: LD_VAR 0 8
63547: PUSH
63548: LD_INT 1
63550: ARRAY
63551: PUSH
63552: LD_VAR 0 2
63556: PLUS
63557: PUSH
63558: LD_VAR 0 8
63562: PUSH
63563: LD_INT 2
63565: ARRAY
63566: PUSH
63567: LD_VAR 0 3
63571: PLUS
63572: PUSH
63573: EMPTY
63574: LIST
63575: LIST
63576: PUSH
63577: EMPTY
63578: LIST
63579: ADD
63580: ST_TO_ADDR
63581: GO 63530
63583: POP
63584: POP
// result = temp_list2 ;
63585: LD_ADDR_VAR 0 7
63589: PUSH
63590: LD_VAR 0 10
63594: ST_TO_ADDR
// end ;
63595: LD_VAR 0 7
63599: RET
// export function EnemyInRange ( unit , dist ) ; begin
63600: LD_INT 0
63602: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63603: LD_ADDR_VAR 0 3
63607: PUSH
63608: LD_VAR 0 1
63612: PPUSH
63613: CALL_OW 255
63617: PPUSH
63618: LD_VAR 0 1
63622: PPUSH
63623: CALL_OW 250
63627: PPUSH
63628: LD_VAR 0 1
63632: PPUSH
63633: CALL_OW 251
63637: PPUSH
63638: LD_VAR 0 2
63642: PPUSH
63643: CALL 36996 0 4
63647: PUSH
63648: LD_INT 4
63650: ARRAY
63651: ST_TO_ADDR
// end ;
63652: LD_VAR 0 3
63656: RET
// export function PlayerSeeMe ( unit ) ; begin
63657: LD_INT 0
63659: PPUSH
// result := See ( your_side , unit ) ;
63660: LD_ADDR_VAR 0 2
63664: PUSH
63665: LD_OWVAR 2
63669: PPUSH
63670: LD_VAR 0 1
63674: PPUSH
63675: CALL_OW 292
63679: ST_TO_ADDR
// end ;
63680: LD_VAR 0 2
63684: RET
// export function ReverseDir ( unit ) ; begin
63685: LD_INT 0
63687: PPUSH
// if not unit then
63688: LD_VAR 0 1
63692: NOT
63693: IFFALSE 63697
// exit ;
63695: GO 63720
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63697: LD_ADDR_VAR 0 2
63701: PUSH
63702: LD_VAR 0 1
63706: PPUSH
63707: CALL_OW 254
63711: PUSH
63712: LD_INT 3
63714: PLUS
63715: PUSH
63716: LD_INT 6
63718: MOD
63719: ST_TO_ADDR
// end ;
63720: LD_VAR 0 2
63724: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
63725: LD_INT 0
63727: PPUSH
63728: PPUSH
63729: PPUSH
63730: PPUSH
63731: PPUSH
// if not hexes then
63732: LD_VAR 0 2
63736: NOT
63737: IFFALSE 63741
// exit ;
63739: GO 63889
// dist := 9999 ;
63741: LD_ADDR_VAR 0 5
63745: PUSH
63746: LD_INT 9999
63748: ST_TO_ADDR
// for i = 1 to hexes do
63749: LD_ADDR_VAR 0 4
63753: PUSH
63754: DOUBLE
63755: LD_INT 1
63757: DEC
63758: ST_TO_ADDR
63759: LD_VAR 0 2
63763: PUSH
63764: FOR_TO
63765: IFFALSE 63877
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
63767: LD_VAR 0 1
63771: PPUSH
63772: LD_VAR 0 2
63776: PUSH
63777: LD_VAR 0 4
63781: ARRAY
63782: PUSH
63783: LD_INT 1
63785: ARRAY
63786: PPUSH
63787: LD_VAR 0 2
63791: PUSH
63792: LD_VAR 0 4
63796: ARRAY
63797: PUSH
63798: LD_INT 2
63800: ARRAY
63801: PPUSH
63802: CALL_OW 297
63806: PUSH
63807: LD_VAR 0 5
63811: LESS
63812: IFFALSE 63875
// begin hex := hexes [ i ] ;
63814: LD_ADDR_VAR 0 7
63818: PUSH
63819: LD_VAR 0 2
63823: PUSH
63824: LD_VAR 0 4
63828: ARRAY
63829: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63830: LD_ADDR_VAR 0 5
63834: PUSH
63835: LD_VAR 0 1
63839: PPUSH
63840: LD_VAR 0 2
63844: PUSH
63845: LD_VAR 0 4
63849: ARRAY
63850: PUSH
63851: LD_INT 1
63853: ARRAY
63854: PPUSH
63855: LD_VAR 0 2
63859: PUSH
63860: LD_VAR 0 4
63864: ARRAY
63865: PUSH
63866: LD_INT 2
63868: ARRAY
63869: PPUSH
63870: CALL_OW 297
63874: ST_TO_ADDR
// end ; end ;
63875: GO 63764
63877: POP
63878: POP
// result := hex ;
63879: LD_ADDR_VAR 0 3
63883: PUSH
63884: LD_VAR 0 7
63888: ST_TO_ADDR
// end ;
63889: LD_VAR 0 3
63893: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63894: LD_INT 0
63896: PPUSH
63897: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63898: LD_VAR 0 1
63902: NOT
63903: PUSH
63904: LD_VAR 0 1
63908: PUSH
63909: LD_INT 21
63911: PUSH
63912: LD_INT 2
63914: PUSH
63915: EMPTY
63916: LIST
63917: LIST
63918: PUSH
63919: LD_INT 23
63921: PUSH
63922: LD_INT 2
63924: PUSH
63925: EMPTY
63926: LIST
63927: LIST
63928: PUSH
63929: EMPTY
63930: LIST
63931: LIST
63932: PPUSH
63933: CALL_OW 69
63937: IN
63938: NOT
63939: OR
63940: IFFALSE 63944
// exit ;
63942: GO 63991
// for i = 1 to 3 do
63944: LD_ADDR_VAR 0 3
63948: PUSH
63949: DOUBLE
63950: LD_INT 1
63952: DEC
63953: ST_TO_ADDR
63954: LD_INT 3
63956: PUSH
63957: FOR_TO
63958: IFFALSE 63989
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63960: LD_VAR 0 1
63964: PPUSH
63965: CALL_OW 250
63969: PPUSH
63970: LD_VAR 0 1
63974: PPUSH
63975: CALL_OW 251
63979: PPUSH
63980: LD_INT 1
63982: PPUSH
63983: CALL_OW 453
63987: GO 63957
63989: POP
63990: POP
// end ;
63991: LD_VAR 0 2
63995: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63996: LD_INT 0
63998: PPUSH
63999: PPUSH
64000: PPUSH
64001: PPUSH
64002: PPUSH
64003: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
64004: LD_VAR 0 1
64008: NOT
64009: PUSH
64010: LD_VAR 0 2
64014: NOT
64015: OR
64016: PUSH
64017: LD_VAR 0 1
64021: PPUSH
64022: CALL_OW 314
64026: OR
64027: IFFALSE 64031
// exit ;
64029: GO 64472
// x := GetX ( enemy_unit ) ;
64031: LD_ADDR_VAR 0 7
64035: PUSH
64036: LD_VAR 0 2
64040: PPUSH
64041: CALL_OW 250
64045: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
64046: LD_ADDR_VAR 0 8
64050: PUSH
64051: LD_VAR 0 2
64055: PPUSH
64056: CALL_OW 251
64060: ST_TO_ADDR
// if not x or not y then
64061: LD_VAR 0 7
64065: NOT
64066: PUSH
64067: LD_VAR 0 8
64071: NOT
64072: OR
64073: IFFALSE 64077
// exit ;
64075: GO 64472
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
64077: LD_ADDR_VAR 0 6
64081: PUSH
64082: LD_VAR 0 7
64086: PPUSH
64087: LD_INT 0
64089: PPUSH
64090: LD_INT 4
64092: PPUSH
64093: CALL_OW 272
64097: PUSH
64098: LD_VAR 0 8
64102: PPUSH
64103: LD_INT 0
64105: PPUSH
64106: LD_INT 4
64108: PPUSH
64109: CALL_OW 273
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: PUSH
64118: LD_VAR 0 7
64122: PPUSH
64123: LD_INT 1
64125: PPUSH
64126: LD_INT 4
64128: PPUSH
64129: CALL_OW 272
64133: PUSH
64134: LD_VAR 0 8
64138: PPUSH
64139: LD_INT 1
64141: PPUSH
64142: LD_INT 4
64144: PPUSH
64145: CALL_OW 273
64149: PUSH
64150: EMPTY
64151: LIST
64152: LIST
64153: PUSH
64154: LD_VAR 0 7
64158: PPUSH
64159: LD_INT 2
64161: PPUSH
64162: LD_INT 4
64164: PPUSH
64165: CALL_OW 272
64169: PUSH
64170: LD_VAR 0 8
64174: PPUSH
64175: LD_INT 2
64177: PPUSH
64178: LD_INT 4
64180: PPUSH
64181: CALL_OW 273
64185: PUSH
64186: EMPTY
64187: LIST
64188: LIST
64189: PUSH
64190: LD_VAR 0 7
64194: PPUSH
64195: LD_INT 3
64197: PPUSH
64198: LD_INT 4
64200: PPUSH
64201: CALL_OW 272
64205: PUSH
64206: LD_VAR 0 8
64210: PPUSH
64211: LD_INT 3
64213: PPUSH
64214: LD_INT 4
64216: PPUSH
64217: CALL_OW 273
64221: PUSH
64222: EMPTY
64223: LIST
64224: LIST
64225: PUSH
64226: LD_VAR 0 7
64230: PPUSH
64231: LD_INT 4
64233: PPUSH
64234: LD_INT 4
64236: PPUSH
64237: CALL_OW 272
64241: PUSH
64242: LD_VAR 0 8
64246: PPUSH
64247: LD_INT 4
64249: PPUSH
64250: LD_INT 4
64252: PPUSH
64253: CALL_OW 273
64257: PUSH
64258: EMPTY
64259: LIST
64260: LIST
64261: PUSH
64262: LD_VAR 0 7
64266: PPUSH
64267: LD_INT 5
64269: PPUSH
64270: LD_INT 4
64272: PPUSH
64273: CALL_OW 272
64277: PUSH
64278: LD_VAR 0 8
64282: PPUSH
64283: LD_INT 5
64285: PPUSH
64286: LD_INT 4
64288: PPUSH
64289: CALL_OW 273
64293: PUSH
64294: EMPTY
64295: LIST
64296: LIST
64297: PUSH
64298: EMPTY
64299: LIST
64300: LIST
64301: LIST
64302: LIST
64303: LIST
64304: LIST
64305: ST_TO_ADDR
// for i = tmp downto 1 do
64306: LD_ADDR_VAR 0 4
64310: PUSH
64311: DOUBLE
64312: LD_VAR 0 6
64316: INC
64317: ST_TO_ADDR
64318: LD_INT 1
64320: PUSH
64321: FOR_DOWNTO
64322: IFFALSE 64423
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64324: LD_VAR 0 6
64328: PUSH
64329: LD_VAR 0 4
64333: ARRAY
64334: PUSH
64335: LD_INT 1
64337: ARRAY
64338: PPUSH
64339: LD_VAR 0 6
64343: PUSH
64344: LD_VAR 0 4
64348: ARRAY
64349: PUSH
64350: LD_INT 2
64352: ARRAY
64353: PPUSH
64354: CALL_OW 488
64358: NOT
64359: PUSH
64360: LD_VAR 0 6
64364: PUSH
64365: LD_VAR 0 4
64369: ARRAY
64370: PUSH
64371: LD_INT 1
64373: ARRAY
64374: PPUSH
64375: LD_VAR 0 6
64379: PUSH
64380: LD_VAR 0 4
64384: ARRAY
64385: PUSH
64386: LD_INT 2
64388: ARRAY
64389: PPUSH
64390: CALL_OW 428
64394: PUSH
64395: LD_INT 0
64397: NONEQUAL
64398: OR
64399: IFFALSE 64421
// tmp := Delete ( tmp , i ) ;
64401: LD_ADDR_VAR 0 6
64405: PUSH
64406: LD_VAR 0 6
64410: PPUSH
64411: LD_VAR 0 4
64415: PPUSH
64416: CALL_OW 3
64420: ST_TO_ADDR
64421: GO 64321
64423: POP
64424: POP
// j := GetClosestHex ( unit , tmp ) ;
64425: LD_ADDR_VAR 0 5
64429: PUSH
64430: LD_VAR 0 1
64434: PPUSH
64435: LD_VAR 0 6
64439: PPUSH
64440: CALL 63725 0 2
64444: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64445: LD_VAR 0 1
64449: PPUSH
64450: LD_VAR 0 5
64454: PUSH
64455: LD_INT 1
64457: ARRAY
64458: PPUSH
64459: LD_VAR 0 5
64463: PUSH
64464: LD_INT 2
64466: ARRAY
64467: PPUSH
64468: CALL_OW 111
// end ;
64472: LD_VAR 0 3
64476: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64477: LD_INT 0
64479: PPUSH
64480: PPUSH
64481: PPUSH
// uc_side = 0 ;
64482: LD_ADDR_OWVAR 20
64486: PUSH
64487: LD_INT 0
64489: ST_TO_ADDR
// uc_nation = 0 ;
64490: LD_ADDR_OWVAR 21
64494: PUSH
64495: LD_INT 0
64497: ST_TO_ADDR
// InitHc_All ( ) ;
64498: CALL_OW 584
// InitVc ;
64502: CALL_OW 20
// if mastodonts then
64506: LD_VAR 0 6
64510: IFFALSE 64577
// for i = 1 to mastodonts do
64512: LD_ADDR_VAR 0 11
64516: PUSH
64517: DOUBLE
64518: LD_INT 1
64520: DEC
64521: ST_TO_ADDR
64522: LD_VAR 0 6
64526: PUSH
64527: FOR_TO
64528: IFFALSE 64575
// begin vc_chassis := 31 ;
64530: LD_ADDR_OWVAR 37
64534: PUSH
64535: LD_INT 31
64537: ST_TO_ADDR
// vc_control := control_rider ;
64538: LD_ADDR_OWVAR 38
64542: PUSH
64543: LD_INT 4
64545: ST_TO_ADDR
// animal := CreateVehicle ;
64546: LD_ADDR_VAR 0 12
64550: PUSH
64551: CALL_OW 45
64555: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64556: LD_VAR 0 12
64560: PPUSH
64561: LD_VAR 0 8
64565: PPUSH
64566: LD_INT 0
64568: PPUSH
64569: CALL 66765 0 3
// end ;
64573: GO 64527
64575: POP
64576: POP
// if horses then
64577: LD_VAR 0 5
64581: IFFALSE 64648
// for i = 1 to horses do
64583: LD_ADDR_VAR 0 11
64587: PUSH
64588: DOUBLE
64589: LD_INT 1
64591: DEC
64592: ST_TO_ADDR
64593: LD_VAR 0 5
64597: PUSH
64598: FOR_TO
64599: IFFALSE 64646
// begin hc_class := 21 ;
64601: LD_ADDR_OWVAR 28
64605: PUSH
64606: LD_INT 21
64608: ST_TO_ADDR
// hc_gallery :=  ;
64609: LD_ADDR_OWVAR 33
64613: PUSH
64614: LD_STRING 
64616: ST_TO_ADDR
// animal := CreateHuman ;
64617: LD_ADDR_VAR 0 12
64621: PUSH
64622: CALL_OW 44
64626: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64627: LD_VAR 0 12
64631: PPUSH
64632: LD_VAR 0 8
64636: PPUSH
64637: LD_INT 0
64639: PPUSH
64640: CALL 66765 0 3
// end ;
64644: GO 64598
64646: POP
64647: POP
// if birds then
64648: LD_VAR 0 1
64652: IFFALSE 64719
// for i = 1 to birds do
64654: LD_ADDR_VAR 0 11
64658: PUSH
64659: DOUBLE
64660: LD_INT 1
64662: DEC
64663: ST_TO_ADDR
64664: LD_VAR 0 1
64668: PUSH
64669: FOR_TO
64670: IFFALSE 64717
// begin hc_class = 18 ;
64672: LD_ADDR_OWVAR 28
64676: PUSH
64677: LD_INT 18
64679: ST_TO_ADDR
// hc_gallery =  ;
64680: LD_ADDR_OWVAR 33
64684: PUSH
64685: LD_STRING 
64687: ST_TO_ADDR
// animal := CreateHuman ;
64688: LD_ADDR_VAR 0 12
64692: PUSH
64693: CALL_OW 44
64697: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64698: LD_VAR 0 12
64702: PPUSH
64703: LD_VAR 0 8
64707: PPUSH
64708: LD_INT 0
64710: PPUSH
64711: CALL 66765 0 3
// end ;
64715: GO 64669
64717: POP
64718: POP
// if tigers then
64719: LD_VAR 0 2
64723: IFFALSE 64807
// for i = 1 to tigers do
64725: LD_ADDR_VAR 0 11
64729: PUSH
64730: DOUBLE
64731: LD_INT 1
64733: DEC
64734: ST_TO_ADDR
64735: LD_VAR 0 2
64739: PUSH
64740: FOR_TO
64741: IFFALSE 64805
// begin hc_class = class_tiger ;
64743: LD_ADDR_OWVAR 28
64747: PUSH
64748: LD_INT 14
64750: ST_TO_ADDR
// hc_gallery =  ;
64751: LD_ADDR_OWVAR 33
64755: PUSH
64756: LD_STRING 
64758: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
64759: LD_ADDR_OWVAR 35
64763: PUSH
64764: LD_INT 7
64766: NEG
64767: PPUSH
64768: LD_INT 7
64770: PPUSH
64771: CALL_OW 12
64775: ST_TO_ADDR
// animal := CreateHuman ;
64776: LD_ADDR_VAR 0 12
64780: PUSH
64781: CALL_OW 44
64785: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64786: LD_VAR 0 12
64790: PPUSH
64791: LD_VAR 0 8
64795: PPUSH
64796: LD_INT 0
64798: PPUSH
64799: CALL 66765 0 3
// end ;
64803: GO 64740
64805: POP
64806: POP
// if apemans then
64807: LD_VAR 0 3
64811: IFFALSE 64934
// for i = 1 to apemans do
64813: LD_ADDR_VAR 0 11
64817: PUSH
64818: DOUBLE
64819: LD_INT 1
64821: DEC
64822: ST_TO_ADDR
64823: LD_VAR 0 3
64827: PUSH
64828: FOR_TO
64829: IFFALSE 64932
// begin hc_class = class_apeman ;
64831: LD_ADDR_OWVAR 28
64835: PUSH
64836: LD_INT 12
64838: ST_TO_ADDR
// hc_gallery =  ;
64839: LD_ADDR_OWVAR 33
64843: PUSH
64844: LD_STRING 
64846: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
64847: LD_ADDR_OWVAR 35
64851: PUSH
64852: LD_INT 2
64854: NEG
64855: PPUSH
64856: LD_INT 2
64858: PPUSH
64859: CALL_OW 12
64863: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64864: LD_ADDR_OWVAR 31
64868: PUSH
64869: LD_INT 1
64871: PPUSH
64872: LD_INT 3
64874: PPUSH
64875: CALL_OW 12
64879: PUSH
64880: LD_INT 1
64882: PPUSH
64883: LD_INT 3
64885: PPUSH
64886: CALL_OW 12
64890: PUSH
64891: LD_INT 0
64893: PUSH
64894: LD_INT 0
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: LIST
64901: LIST
64902: ST_TO_ADDR
// animal := CreateHuman ;
64903: LD_ADDR_VAR 0 12
64907: PUSH
64908: CALL_OW 44
64912: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64913: LD_VAR 0 12
64917: PPUSH
64918: LD_VAR 0 8
64922: PPUSH
64923: LD_INT 0
64925: PPUSH
64926: CALL 66765 0 3
// end ;
64930: GO 64828
64932: POP
64933: POP
// if enchidnas then
64934: LD_VAR 0 4
64938: IFFALSE 65005
// for i = 1 to enchidnas do
64940: LD_ADDR_VAR 0 11
64944: PUSH
64945: DOUBLE
64946: LD_INT 1
64948: DEC
64949: ST_TO_ADDR
64950: LD_VAR 0 4
64954: PUSH
64955: FOR_TO
64956: IFFALSE 65003
// begin hc_class = 13 ;
64958: LD_ADDR_OWVAR 28
64962: PUSH
64963: LD_INT 13
64965: ST_TO_ADDR
// hc_gallery =  ;
64966: LD_ADDR_OWVAR 33
64970: PUSH
64971: LD_STRING 
64973: ST_TO_ADDR
// animal := CreateHuman ;
64974: LD_ADDR_VAR 0 12
64978: PUSH
64979: CALL_OW 44
64983: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64984: LD_VAR 0 12
64988: PPUSH
64989: LD_VAR 0 8
64993: PPUSH
64994: LD_INT 0
64996: PPUSH
64997: CALL 66765 0 3
// end ;
65001: GO 64955
65003: POP
65004: POP
// if fishes then
65005: LD_VAR 0 7
65009: IFFALSE 65076
// for i = 1 to fishes do
65011: LD_ADDR_VAR 0 11
65015: PUSH
65016: DOUBLE
65017: LD_INT 1
65019: DEC
65020: ST_TO_ADDR
65021: LD_VAR 0 7
65025: PUSH
65026: FOR_TO
65027: IFFALSE 65074
// begin hc_class = 20 ;
65029: LD_ADDR_OWVAR 28
65033: PUSH
65034: LD_INT 20
65036: ST_TO_ADDR
// hc_gallery =  ;
65037: LD_ADDR_OWVAR 33
65041: PUSH
65042: LD_STRING 
65044: ST_TO_ADDR
// animal := CreateHuman ;
65045: LD_ADDR_VAR 0 12
65049: PUSH
65050: CALL_OW 44
65054: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65055: LD_VAR 0 12
65059: PPUSH
65060: LD_VAR 0 9
65064: PPUSH
65065: LD_INT 0
65067: PPUSH
65068: CALL 66765 0 3
// end ;
65072: GO 65026
65074: POP
65075: POP
// end ;
65076: LD_VAR 0 10
65080: RET
// export function WantHeal ( sci , unit ) ; begin
65081: LD_INT 0
65083: PPUSH
// if GetTaskList ( sci ) > 0 then
65084: LD_VAR 0 1
65088: PPUSH
65089: CALL_OW 437
65093: PUSH
65094: LD_INT 0
65096: GREATER
65097: IFFALSE 65167
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65099: LD_VAR 0 1
65103: PPUSH
65104: CALL_OW 437
65108: PUSH
65109: LD_INT 1
65111: ARRAY
65112: PUSH
65113: LD_INT 1
65115: ARRAY
65116: PUSH
65117: LD_STRING l
65119: EQUAL
65120: PUSH
65121: LD_VAR 0 1
65125: PPUSH
65126: CALL_OW 437
65130: PUSH
65131: LD_INT 1
65133: ARRAY
65134: PUSH
65135: LD_INT 4
65137: ARRAY
65138: PUSH
65139: LD_VAR 0 2
65143: EQUAL
65144: AND
65145: IFFALSE 65157
// result := true else
65147: LD_ADDR_VAR 0 3
65151: PUSH
65152: LD_INT 1
65154: ST_TO_ADDR
65155: GO 65165
// result := false ;
65157: LD_ADDR_VAR 0 3
65161: PUSH
65162: LD_INT 0
65164: ST_TO_ADDR
// end else
65165: GO 65175
// result := false ;
65167: LD_ADDR_VAR 0 3
65171: PUSH
65172: LD_INT 0
65174: ST_TO_ADDR
// end ;
65175: LD_VAR 0 3
65179: RET
// export function HealTarget ( sci ) ; begin
65180: LD_INT 0
65182: PPUSH
// if not sci then
65183: LD_VAR 0 1
65187: NOT
65188: IFFALSE 65192
// exit ;
65190: GO 65257
// result := 0 ;
65192: LD_ADDR_VAR 0 2
65196: PUSH
65197: LD_INT 0
65199: ST_TO_ADDR
// if GetTaskList ( sci ) then
65200: LD_VAR 0 1
65204: PPUSH
65205: CALL_OW 437
65209: IFFALSE 65257
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65211: LD_VAR 0 1
65215: PPUSH
65216: CALL_OW 437
65220: PUSH
65221: LD_INT 1
65223: ARRAY
65224: PUSH
65225: LD_INT 1
65227: ARRAY
65228: PUSH
65229: LD_STRING l
65231: EQUAL
65232: IFFALSE 65257
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65234: LD_ADDR_VAR 0 2
65238: PUSH
65239: LD_VAR 0 1
65243: PPUSH
65244: CALL_OW 437
65248: PUSH
65249: LD_INT 1
65251: ARRAY
65252: PUSH
65253: LD_INT 4
65255: ARRAY
65256: ST_TO_ADDR
// end ;
65257: LD_VAR 0 2
65261: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65262: LD_INT 0
65264: PPUSH
65265: PPUSH
65266: PPUSH
65267: PPUSH
// if not base_units then
65268: LD_VAR 0 1
65272: NOT
65273: IFFALSE 65277
// exit ;
65275: GO 65364
// result := false ;
65277: LD_ADDR_VAR 0 2
65281: PUSH
65282: LD_INT 0
65284: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65285: LD_ADDR_VAR 0 5
65289: PUSH
65290: LD_VAR 0 1
65294: PPUSH
65295: LD_INT 21
65297: PUSH
65298: LD_INT 3
65300: PUSH
65301: EMPTY
65302: LIST
65303: LIST
65304: PPUSH
65305: CALL_OW 72
65309: ST_TO_ADDR
// if not tmp then
65310: LD_VAR 0 5
65314: NOT
65315: IFFALSE 65319
// exit ;
65317: GO 65364
// for i in tmp do
65319: LD_ADDR_VAR 0 3
65323: PUSH
65324: LD_VAR 0 5
65328: PUSH
65329: FOR_IN
65330: IFFALSE 65362
// begin result := EnemyInRange ( i , 22 ) ;
65332: LD_ADDR_VAR 0 2
65336: PUSH
65337: LD_VAR 0 3
65341: PPUSH
65342: LD_INT 22
65344: PPUSH
65345: CALL 63600 0 2
65349: ST_TO_ADDR
// if result then
65350: LD_VAR 0 2
65354: IFFALSE 65360
// exit ;
65356: POP
65357: POP
65358: GO 65364
// end ;
65360: GO 65329
65362: POP
65363: POP
// end ;
65364: LD_VAR 0 2
65368: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
65369: LD_INT 0
65371: PPUSH
65372: PPUSH
// if not units then
65373: LD_VAR 0 1
65377: NOT
65378: IFFALSE 65382
// exit ;
65380: GO 65452
// result := [ ] ;
65382: LD_ADDR_VAR 0 3
65386: PUSH
65387: EMPTY
65388: ST_TO_ADDR
// for i in units do
65389: LD_ADDR_VAR 0 4
65393: PUSH
65394: LD_VAR 0 1
65398: PUSH
65399: FOR_IN
65400: IFFALSE 65450
// if GetTag ( i ) = tag then
65402: LD_VAR 0 4
65406: PPUSH
65407: CALL_OW 110
65411: PUSH
65412: LD_VAR 0 2
65416: EQUAL
65417: IFFALSE 65448
// result := Replace ( result , result + 1 , i ) ;
65419: LD_ADDR_VAR 0 3
65423: PUSH
65424: LD_VAR 0 3
65428: PPUSH
65429: LD_VAR 0 3
65433: PUSH
65434: LD_INT 1
65436: PLUS
65437: PPUSH
65438: LD_VAR 0 4
65442: PPUSH
65443: CALL_OW 1
65447: ST_TO_ADDR
65448: GO 65399
65450: POP
65451: POP
// end ;
65452: LD_VAR 0 3
65456: RET
// export function IsDriver ( un ) ; begin
65457: LD_INT 0
65459: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65460: LD_ADDR_VAR 0 2
65464: PUSH
65465: LD_VAR 0 1
65469: PUSH
65470: LD_INT 55
65472: PUSH
65473: EMPTY
65474: LIST
65475: PPUSH
65476: CALL_OW 69
65480: IN
65481: ST_TO_ADDR
// end ;
65482: LD_VAR 0 2
65486: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65487: LD_INT 0
65489: PPUSH
65490: PPUSH
// list := [ ] ;
65491: LD_ADDR_VAR 0 5
65495: PUSH
65496: EMPTY
65497: ST_TO_ADDR
// case d of 0 :
65498: LD_VAR 0 3
65502: PUSH
65503: LD_INT 0
65505: DOUBLE
65506: EQUAL
65507: IFTRUE 65511
65509: GO 65644
65511: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65512: LD_ADDR_VAR 0 5
65516: PUSH
65517: LD_VAR 0 1
65521: PUSH
65522: LD_INT 4
65524: MINUS
65525: PUSH
65526: LD_VAR 0 2
65530: PUSH
65531: LD_INT 4
65533: MINUS
65534: PUSH
65535: LD_INT 2
65537: PUSH
65538: EMPTY
65539: LIST
65540: LIST
65541: LIST
65542: PUSH
65543: LD_VAR 0 1
65547: PUSH
65548: LD_INT 3
65550: MINUS
65551: PUSH
65552: LD_VAR 0 2
65556: PUSH
65557: LD_INT 1
65559: PUSH
65560: EMPTY
65561: LIST
65562: LIST
65563: LIST
65564: PUSH
65565: LD_VAR 0 1
65569: PUSH
65570: LD_INT 4
65572: PLUS
65573: PUSH
65574: LD_VAR 0 2
65578: PUSH
65579: LD_INT 4
65581: PUSH
65582: EMPTY
65583: LIST
65584: LIST
65585: LIST
65586: PUSH
65587: LD_VAR 0 1
65591: PUSH
65592: LD_INT 3
65594: PLUS
65595: PUSH
65596: LD_VAR 0 2
65600: PUSH
65601: LD_INT 3
65603: PLUS
65604: PUSH
65605: LD_INT 5
65607: PUSH
65608: EMPTY
65609: LIST
65610: LIST
65611: LIST
65612: PUSH
65613: LD_VAR 0 1
65617: PUSH
65618: LD_VAR 0 2
65622: PUSH
65623: LD_INT 4
65625: PLUS
65626: PUSH
65627: LD_INT 0
65629: PUSH
65630: EMPTY
65631: LIST
65632: LIST
65633: LIST
65634: PUSH
65635: EMPTY
65636: LIST
65637: LIST
65638: LIST
65639: LIST
65640: LIST
65641: ST_TO_ADDR
// end ; 1 :
65642: GO 66342
65644: LD_INT 1
65646: DOUBLE
65647: EQUAL
65648: IFTRUE 65652
65650: GO 65785
65652: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
65653: LD_ADDR_VAR 0 5
65657: PUSH
65658: LD_VAR 0 1
65662: PUSH
65663: LD_VAR 0 2
65667: PUSH
65668: LD_INT 4
65670: MINUS
65671: PUSH
65672: LD_INT 3
65674: PUSH
65675: EMPTY
65676: LIST
65677: LIST
65678: LIST
65679: PUSH
65680: LD_VAR 0 1
65684: PUSH
65685: LD_INT 3
65687: MINUS
65688: PUSH
65689: LD_VAR 0 2
65693: PUSH
65694: LD_INT 3
65696: MINUS
65697: PUSH
65698: LD_INT 2
65700: PUSH
65701: EMPTY
65702: LIST
65703: LIST
65704: LIST
65705: PUSH
65706: LD_VAR 0 1
65710: PUSH
65711: LD_INT 4
65713: MINUS
65714: PUSH
65715: LD_VAR 0 2
65719: PUSH
65720: LD_INT 1
65722: PUSH
65723: EMPTY
65724: LIST
65725: LIST
65726: LIST
65727: PUSH
65728: LD_VAR 0 1
65732: PUSH
65733: LD_VAR 0 2
65737: PUSH
65738: LD_INT 3
65740: PLUS
65741: PUSH
65742: LD_INT 0
65744: PUSH
65745: EMPTY
65746: LIST
65747: LIST
65748: LIST
65749: PUSH
65750: LD_VAR 0 1
65754: PUSH
65755: LD_INT 4
65757: PLUS
65758: PUSH
65759: LD_VAR 0 2
65763: PUSH
65764: LD_INT 4
65766: PLUS
65767: PUSH
65768: LD_INT 5
65770: PUSH
65771: EMPTY
65772: LIST
65773: LIST
65774: LIST
65775: PUSH
65776: EMPTY
65777: LIST
65778: LIST
65779: LIST
65780: LIST
65781: LIST
65782: ST_TO_ADDR
// end ; 2 :
65783: GO 66342
65785: LD_INT 2
65787: DOUBLE
65788: EQUAL
65789: IFTRUE 65793
65791: GO 65922
65793: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
65794: LD_ADDR_VAR 0 5
65798: PUSH
65799: LD_VAR 0 1
65803: PUSH
65804: LD_VAR 0 2
65808: PUSH
65809: LD_INT 3
65811: MINUS
65812: PUSH
65813: LD_INT 3
65815: PUSH
65816: EMPTY
65817: LIST
65818: LIST
65819: LIST
65820: PUSH
65821: LD_VAR 0 1
65825: PUSH
65826: LD_INT 4
65828: PLUS
65829: PUSH
65830: LD_VAR 0 2
65834: PUSH
65835: LD_INT 4
65837: PUSH
65838: EMPTY
65839: LIST
65840: LIST
65841: LIST
65842: PUSH
65843: LD_VAR 0 1
65847: PUSH
65848: LD_VAR 0 2
65852: PUSH
65853: LD_INT 4
65855: PLUS
65856: PUSH
65857: LD_INT 0
65859: PUSH
65860: EMPTY
65861: LIST
65862: LIST
65863: LIST
65864: PUSH
65865: LD_VAR 0 1
65869: PUSH
65870: LD_INT 3
65872: MINUS
65873: PUSH
65874: LD_VAR 0 2
65878: PUSH
65879: LD_INT 1
65881: PUSH
65882: EMPTY
65883: LIST
65884: LIST
65885: LIST
65886: PUSH
65887: LD_VAR 0 1
65891: PUSH
65892: LD_INT 4
65894: MINUS
65895: PUSH
65896: LD_VAR 0 2
65900: PUSH
65901: LD_INT 4
65903: MINUS
65904: PUSH
65905: LD_INT 2
65907: PUSH
65908: EMPTY
65909: LIST
65910: LIST
65911: LIST
65912: PUSH
65913: EMPTY
65914: LIST
65915: LIST
65916: LIST
65917: LIST
65918: LIST
65919: ST_TO_ADDR
// end ; 3 :
65920: GO 66342
65922: LD_INT 3
65924: DOUBLE
65925: EQUAL
65926: IFTRUE 65930
65928: GO 66063
65930: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65931: LD_ADDR_VAR 0 5
65935: PUSH
65936: LD_VAR 0 1
65940: PUSH
65941: LD_INT 3
65943: PLUS
65944: PUSH
65945: LD_VAR 0 2
65949: PUSH
65950: LD_INT 4
65952: PUSH
65953: EMPTY
65954: LIST
65955: LIST
65956: LIST
65957: PUSH
65958: LD_VAR 0 1
65962: PUSH
65963: LD_INT 4
65965: PLUS
65966: PUSH
65967: LD_VAR 0 2
65971: PUSH
65972: LD_INT 4
65974: PLUS
65975: PUSH
65976: LD_INT 5
65978: PUSH
65979: EMPTY
65980: LIST
65981: LIST
65982: LIST
65983: PUSH
65984: LD_VAR 0 1
65988: PUSH
65989: LD_INT 4
65991: MINUS
65992: PUSH
65993: LD_VAR 0 2
65997: PUSH
65998: LD_INT 1
66000: PUSH
66001: EMPTY
66002: LIST
66003: LIST
66004: LIST
66005: PUSH
66006: LD_VAR 0 1
66010: PUSH
66011: LD_VAR 0 2
66015: PUSH
66016: LD_INT 4
66018: MINUS
66019: PUSH
66020: LD_INT 3
66022: PUSH
66023: EMPTY
66024: LIST
66025: LIST
66026: LIST
66027: PUSH
66028: LD_VAR 0 1
66032: PUSH
66033: LD_INT 3
66035: MINUS
66036: PUSH
66037: LD_VAR 0 2
66041: PUSH
66042: LD_INT 3
66044: MINUS
66045: PUSH
66046: LD_INT 2
66048: PUSH
66049: EMPTY
66050: LIST
66051: LIST
66052: LIST
66053: PUSH
66054: EMPTY
66055: LIST
66056: LIST
66057: LIST
66058: LIST
66059: LIST
66060: ST_TO_ADDR
// end ; 4 :
66061: GO 66342
66063: LD_INT 4
66065: DOUBLE
66066: EQUAL
66067: IFTRUE 66071
66069: GO 66204
66071: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66072: LD_ADDR_VAR 0 5
66076: PUSH
66077: LD_VAR 0 1
66081: PUSH
66082: LD_VAR 0 2
66086: PUSH
66087: LD_INT 4
66089: PLUS
66090: PUSH
66091: LD_INT 0
66093: PUSH
66094: EMPTY
66095: LIST
66096: LIST
66097: LIST
66098: PUSH
66099: LD_VAR 0 1
66103: PUSH
66104: LD_INT 3
66106: PLUS
66107: PUSH
66108: LD_VAR 0 2
66112: PUSH
66113: LD_INT 3
66115: PLUS
66116: PUSH
66117: LD_INT 5
66119: PUSH
66120: EMPTY
66121: LIST
66122: LIST
66123: LIST
66124: PUSH
66125: LD_VAR 0 1
66129: PUSH
66130: LD_INT 4
66132: PLUS
66133: PUSH
66134: LD_VAR 0 2
66138: PUSH
66139: LD_INT 4
66141: PUSH
66142: EMPTY
66143: LIST
66144: LIST
66145: LIST
66146: PUSH
66147: LD_VAR 0 1
66151: PUSH
66152: LD_VAR 0 2
66156: PUSH
66157: LD_INT 3
66159: MINUS
66160: PUSH
66161: LD_INT 3
66163: PUSH
66164: EMPTY
66165: LIST
66166: LIST
66167: LIST
66168: PUSH
66169: LD_VAR 0 1
66173: PUSH
66174: LD_INT 4
66176: MINUS
66177: PUSH
66178: LD_VAR 0 2
66182: PUSH
66183: LD_INT 4
66185: MINUS
66186: PUSH
66187: LD_INT 2
66189: PUSH
66190: EMPTY
66191: LIST
66192: LIST
66193: LIST
66194: PUSH
66195: EMPTY
66196: LIST
66197: LIST
66198: LIST
66199: LIST
66200: LIST
66201: ST_TO_ADDR
// end ; 5 :
66202: GO 66342
66204: LD_INT 5
66206: DOUBLE
66207: EQUAL
66208: IFTRUE 66212
66210: GO 66341
66212: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66213: LD_ADDR_VAR 0 5
66217: PUSH
66218: LD_VAR 0 1
66222: PUSH
66223: LD_INT 4
66225: MINUS
66226: PUSH
66227: LD_VAR 0 2
66231: PUSH
66232: LD_INT 1
66234: PUSH
66235: EMPTY
66236: LIST
66237: LIST
66238: LIST
66239: PUSH
66240: LD_VAR 0 1
66244: PUSH
66245: LD_VAR 0 2
66249: PUSH
66250: LD_INT 4
66252: MINUS
66253: PUSH
66254: LD_INT 3
66256: PUSH
66257: EMPTY
66258: LIST
66259: LIST
66260: LIST
66261: PUSH
66262: LD_VAR 0 1
66266: PUSH
66267: LD_INT 4
66269: PLUS
66270: PUSH
66271: LD_VAR 0 2
66275: PUSH
66276: LD_INT 4
66278: PLUS
66279: PUSH
66280: LD_INT 5
66282: PUSH
66283: EMPTY
66284: LIST
66285: LIST
66286: LIST
66287: PUSH
66288: LD_VAR 0 1
66292: PUSH
66293: LD_INT 3
66295: PLUS
66296: PUSH
66297: LD_VAR 0 2
66301: PUSH
66302: LD_INT 4
66304: PUSH
66305: EMPTY
66306: LIST
66307: LIST
66308: LIST
66309: PUSH
66310: LD_VAR 0 1
66314: PUSH
66315: LD_VAR 0 2
66319: PUSH
66320: LD_INT 3
66322: PLUS
66323: PUSH
66324: LD_INT 0
66326: PUSH
66327: EMPTY
66328: LIST
66329: LIST
66330: LIST
66331: PUSH
66332: EMPTY
66333: LIST
66334: LIST
66335: LIST
66336: LIST
66337: LIST
66338: ST_TO_ADDR
// end ; end ;
66339: GO 66342
66341: POP
// result := list ;
66342: LD_ADDR_VAR 0 4
66346: PUSH
66347: LD_VAR 0 5
66351: ST_TO_ADDR
// end ;
66352: LD_VAR 0 4
66356: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66357: LD_INT 0
66359: PPUSH
66360: PPUSH
66361: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66362: LD_VAR 0 1
66366: NOT
66367: PUSH
66368: LD_VAR 0 2
66372: PUSH
66373: LD_INT 1
66375: PUSH
66376: LD_INT 2
66378: PUSH
66379: LD_INT 3
66381: PUSH
66382: LD_INT 4
66384: PUSH
66385: EMPTY
66386: LIST
66387: LIST
66388: LIST
66389: LIST
66390: IN
66391: NOT
66392: OR
66393: IFFALSE 66397
// exit ;
66395: GO 66489
// tmp := [ ] ;
66397: LD_ADDR_VAR 0 5
66401: PUSH
66402: EMPTY
66403: ST_TO_ADDR
// for i in units do
66404: LD_ADDR_VAR 0 4
66408: PUSH
66409: LD_VAR 0 1
66413: PUSH
66414: FOR_IN
66415: IFFALSE 66458
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
66417: LD_ADDR_VAR 0 5
66421: PUSH
66422: LD_VAR 0 5
66426: PPUSH
66427: LD_VAR 0 5
66431: PUSH
66432: LD_INT 1
66434: PLUS
66435: PPUSH
66436: LD_VAR 0 4
66440: PPUSH
66441: LD_VAR 0 2
66445: PPUSH
66446: CALL_OW 259
66450: PPUSH
66451: CALL_OW 2
66455: ST_TO_ADDR
66456: GO 66414
66458: POP
66459: POP
// if not tmp then
66460: LD_VAR 0 5
66464: NOT
66465: IFFALSE 66469
// exit ;
66467: GO 66489
// result := SortListByListDesc ( units , tmp ) ;
66469: LD_ADDR_VAR 0 3
66473: PUSH
66474: LD_VAR 0 1
66478: PPUSH
66479: LD_VAR 0 5
66483: PPUSH
66484: CALL_OW 77
66488: ST_TO_ADDR
// end ;
66489: LD_VAR 0 3
66493: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66494: LD_INT 0
66496: PPUSH
66497: PPUSH
66498: PPUSH
// result := false ;
66499: LD_ADDR_VAR 0 3
66503: PUSH
66504: LD_INT 0
66506: ST_TO_ADDR
// x := GetX ( building ) ;
66507: LD_ADDR_VAR 0 4
66511: PUSH
66512: LD_VAR 0 2
66516: PPUSH
66517: CALL_OW 250
66521: ST_TO_ADDR
// y := GetY ( building ) ;
66522: LD_ADDR_VAR 0 5
66526: PUSH
66527: LD_VAR 0 2
66531: PPUSH
66532: CALL_OW 251
66536: ST_TO_ADDR
// if not building or not x or not y then
66537: LD_VAR 0 2
66541: NOT
66542: PUSH
66543: LD_VAR 0 4
66547: NOT
66548: OR
66549: PUSH
66550: LD_VAR 0 5
66554: NOT
66555: OR
66556: IFFALSE 66560
// exit ;
66558: GO 66652
// if GetTaskList ( unit ) then
66560: LD_VAR 0 1
66564: PPUSH
66565: CALL_OW 437
66569: IFFALSE 66652
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66571: LD_STRING e
66573: PUSH
66574: LD_VAR 0 1
66578: PPUSH
66579: CALL_OW 437
66583: PUSH
66584: LD_INT 1
66586: ARRAY
66587: PUSH
66588: LD_INT 1
66590: ARRAY
66591: EQUAL
66592: PUSH
66593: LD_VAR 0 4
66597: PUSH
66598: LD_VAR 0 1
66602: PPUSH
66603: CALL_OW 437
66607: PUSH
66608: LD_INT 1
66610: ARRAY
66611: PUSH
66612: LD_INT 2
66614: ARRAY
66615: EQUAL
66616: AND
66617: PUSH
66618: LD_VAR 0 5
66622: PUSH
66623: LD_VAR 0 1
66627: PPUSH
66628: CALL_OW 437
66632: PUSH
66633: LD_INT 1
66635: ARRAY
66636: PUSH
66637: LD_INT 3
66639: ARRAY
66640: EQUAL
66641: AND
66642: IFFALSE 66652
// result := true end ;
66644: LD_ADDR_VAR 0 3
66648: PUSH
66649: LD_INT 1
66651: ST_TO_ADDR
// end ;
66652: LD_VAR 0 3
66656: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
66657: LD_INT 0
66659: PPUSH
// result := false ;
66660: LD_ADDR_VAR 0 4
66664: PUSH
66665: LD_INT 0
66667: ST_TO_ADDR
// if GetTaskList ( unit ) then
66668: LD_VAR 0 1
66672: PPUSH
66673: CALL_OW 437
66677: IFFALSE 66760
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66679: LD_STRING M
66681: PUSH
66682: LD_VAR 0 1
66686: PPUSH
66687: CALL_OW 437
66691: PUSH
66692: LD_INT 1
66694: ARRAY
66695: PUSH
66696: LD_INT 1
66698: ARRAY
66699: EQUAL
66700: PUSH
66701: LD_VAR 0 2
66705: PUSH
66706: LD_VAR 0 1
66710: PPUSH
66711: CALL_OW 437
66715: PUSH
66716: LD_INT 1
66718: ARRAY
66719: PUSH
66720: LD_INT 2
66722: ARRAY
66723: EQUAL
66724: AND
66725: PUSH
66726: LD_VAR 0 3
66730: PUSH
66731: LD_VAR 0 1
66735: PPUSH
66736: CALL_OW 437
66740: PUSH
66741: LD_INT 1
66743: ARRAY
66744: PUSH
66745: LD_INT 3
66747: ARRAY
66748: EQUAL
66749: AND
66750: IFFALSE 66760
// result := true ;
66752: LD_ADDR_VAR 0 4
66756: PUSH
66757: LD_INT 1
66759: ST_TO_ADDR
// end ; end ;
66760: LD_VAR 0 4
66764: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
66765: LD_INT 0
66767: PPUSH
66768: PPUSH
66769: PPUSH
66770: PPUSH
// if not unit or not area then
66771: LD_VAR 0 1
66775: NOT
66776: PUSH
66777: LD_VAR 0 2
66781: NOT
66782: OR
66783: IFFALSE 66787
// exit ;
66785: GO 66951
// tmp := AreaToList ( area , i ) ;
66787: LD_ADDR_VAR 0 6
66791: PUSH
66792: LD_VAR 0 2
66796: PPUSH
66797: LD_VAR 0 5
66801: PPUSH
66802: CALL_OW 517
66806: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
66807: LD_ADDR_VAR 0 5
66811: PUSH
66812: DOUBLE
66813: LD_INT 1
66815: DEC
66816: ST_TO_ADDR
66817: LD_VAR 0 6
66821: PUSH
66822: LD_INT 1
66824: ARRAY
66825: PUSH
66826: FOR_TO
66827: IFFALSE 66949
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66829: LD_ADDR_VAR 0 7
66833: PUSH
66834: LD_VAR 0 6
66838: PUSH
66839: LD_INT 1
66841: ARRAY
66842: PUSH
66843: LD_VAR 0 5
66847: ARRAY
66848: PUSH
66849: LD_VAR 0 6
66853: PUSH
66854: LD_INT 2
66856: ARRAY
66857: PUSH
66858: LD_VAR 0 5
66862: ARRAY
66863: PUSH
66864: EMPTY
66865: LIST
66866: LIST
66867: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
66868: LD_VAR 0 7
66872: PUSH
66873: LD_INT 1
66875: ARRAY
66876: PPUSH
66877: LD_VAR 0 7
66881: PUSH
66882: LD_INT 2
66884: ARRAY
66885: PPUSH
66886: CALL_OW 428
66890: PUSH
66891: LD_INT 0
66893: EQUAL
66894: IFFALSE 66947
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66896: LD_VAR 0 1
66900: PPUSH
66901: LD_VAR 0 7
66905: PUSH
66906: LD_INT 1
66908: ARRAY
66909: PPUSH
66910: LD_VAR 0 7
66914: PUSH
66915: LD_INT 2
66917: ARRAY
66918: PPUSH
66919: LD_VAR 0 3
66923: PPUSH
66924: CALL_OW 48
// result := IsPlaced ( unit ) ;
66928: LD_ADDR_VAR 0 4
66932: PUSH
66933: LD_VAR 0 1
66937: PPUSH
66938: CALL_OW 305
66942: ST_TO_ADDR
// exit ;
66943: POP
66944: POP
66945: GO 66951
// end ; end ;
66947: GO 66826
66949: POP
66950: POP
// end ;
66951: LD_VAR 0 4
66955: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66956: LD_INT 0
66958: PPUSH
66959: PPUSH
66960: PPUSH
// if not side or side > 8 then
66961: LD_VAR 0 1
66965: NOT
66966: PUSH
66967: LD_VAR 0 1
66971: PUSH
66972: LD_INT 8
66974: GREATER
66975: OR
66976: IFFALSE 66980
// exit ;
66978: GO 67167
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66980: LD_ADDR_VAR 0 4
66984: PUSH
66985: LD_INT 22
66987: PUSH
66988: LD_VAR 0 1
66992: PUSH
66993: EMPTY
66994: LIST
66995: LIST
66996: PUSH
66997: LD_INT 21
66999: PUSH
67000: LD_INT 3
67002: PUSH
67003: EMPTY
67004: LIST
67005: LIST
67006: PUSH
67007: EMPTY
67008: LIST
67009: LIST
67010: PPUSH
67011: CALL_OW 69
67015: ST_TO_ADDR
// if not tmp then
67016: LD_VAR 0 4
67020: NOT
67021: IFFALSE 67025
// exit ;
67023: GO 67167
// enable_addtolog := true ;
67025: LD_ADDR_OWVAR 81
67029: PUSH
67030: LD_INT 1
67032: ST_TO_ADDR
// AddToLog ( [ ) ;
67033: LD_STRING [
67035: PPUSH
67036: CALL_OW 561
// for i in tmp do
67040: LD_ADDR_VAR 0 3
67044: PUSH
67045: LD_VAR 0 4
67049: PUSH
67050: FOR_IN
67051: IFFALSE 67158
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67053: LD_STRING [
67055: PUSH
67056: LD_VAR 0 3
67060: PPUSH
67061: CALL_OW 266
67065: STR
67066: PUSH
67067: LD_STRING , 
67069: STR
67070: PUSH
67071: LD_VAR 0 3
67075: PPUSH
67076: CALL_OW 250
67080: STR
67081: PUSH
67082: LD_STRING , 
67084: STR
67085: PUSH
67086: LD_VAR 0 3
67090: PPUSH
67091: CALL_OW 251
67095: STR
67096: PUSH
67097: LD_STRING , 
67099: STR
67100: PUSH
67101: LD_VAR 0 3
67105: PPUSH
67106: CALL_OW 254
67110: STR
67111: PUSH
67112: LD_STRING , 
67114: STR
67115: PUSH
67116: LD_VAR 0 3
67120: PPUSH
67121: LD_INT 1
67123: PPUSH
67124: CALL_OW 268
67128: STR
67129: PUSH
67130: LD_STRING , 
67132: STR
67133: PUSH
67134: LD_VAR 0 3
67138: PPUSH
67139: LD_INT 2
67141: PPUSH
67142: CALL_OW 268
67146: STR
67147: PUSH
67148: LD_STRING ],
67150: STR
67151: PPUSH
67152: CALL_OW 561
// end ;
67156: GO 67050
67158: POP
67159: POP
// AddToLog ( ]; ) ;
67160: LD_STRING ];
67162: PPUSH
67163: CALL_OW 561
// end ;
67167: LD_VAR 0 2
67171: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67172: LD_INT 0
67174: PPUSH
67175: PPUSH
67176: PPUSH
67177: PPUSH
67178: PPUSH
// if not area or not rate or not max then
67179: LD_VAR 0 1
67183: NOT
67184: PUSH
67185: LD_VAR 0 2
67189: NOT
67190: OR
67191: PUSH
67192: LD_VAR 0 4
67196: NOT
67197: OR
67198: IFFALSE 67202
// exit ;
67200: GO 67394
// while 1 do
67202: LD_INT 1
67204: IFFALSE 67394
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67206: LD_ADDR_VAR 0 9
67210: PUSH
67211: LD_VAR 0 1
67215: PPUSH
67216: LD_INT 1
67218: PPUSH
67219: CALL_OW 287
67223: PUSH
67224: LD_INT 10
67226: MUL
67227: ST_TO_ADDR
// r := rate / 10 ;
67228: LD_ADDR_VAR 0 7
67232: PUSH
67233: LD_VAR 0 2
67237: PUSH
67238: LD_INT 10
67240: DIVREAL
67241: ST_TO_ADDR
// time := 1 1$00 ;
67242: LD_ADDR_VAR 0 8
67246: PUSH
67247: LD_INT 2100
67249: ST_TO_ADDR
// if amount < min then
67250: LD_VAR 0 9
67254: PUSH
67255: LD_VAR 0 3
67259: LESS
67260: IFFALSE 67278
// r := r * 2 else
67262: LD_ADDR_VAR 0 7
67266: PUSH
67267: LD_VAR 0 7
67271: PUSH
67272: LD_INT 2
67274: MUL
67275: ST_TO_ADDR
67276: GO 67304
// if amount > max then
67278: LD_VAR 0 9
67282: PUSH
67283: LD_VAR 0 4
67287: GREATER
67288: IFFALSE 67304
// r := r / 2 ;
67290: LD_ADDR_VAR 0 7
67294: PUSH
67295: LD_VAR 0 7
67299: PUSH
67300: LD_INT 2
67302: DIVREAL
67303: ST_TO_ADDR
// time := time / r ;
67304: LD_ADDR_VAR 0 8
67308: PUSH
67309: LD_VAR 0 8
67313: PUSH
67314: LD_VAR 0 7
67318: DIVREAL
67319: ST_TO_ADDR
// if time < 0 then
67320: LD_VAR 0 8
67324: PUSH
67325: LD_INT 0
67327: LESS
67328: IFFALSE 67345
// time := time * - 1 ;
67330: LD_ADDR_VAR 0 8
67334: PUSH
67335: LD_VAR 0 8
67339: PUSH
67340: LD_INT 1
67342: NEG
67343: MUL
67344: ST_TO_ADDR
// wait ( time ) ;
67345: LD_VAR 0 8
67349: PPUSH
67350: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
67354: LD_INT 35
67356: PPUSH
67357: LD_INT 875
67359: PPUSH
67360: CALL_OW 12
67364: PPUSH
67365: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67369: LD_INT 1
67371: PPUSH
67372: LD_INT 5
67374: PPUSH
67375: CALL_OW 12
67379: PPUSH
67380: LD_VAR 0 1
67384: PPUSH
67385: LD_INT 1
67387: PPUSH
67388: CALL_OW 55
// end ;
67392: GO 67202
// end ;
67394: LD_VAR 0 5
67398: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67399: LD_INT 0
67401: PPUSH
67402: PPUSH
67403: PPUSH
67404: PPUSH
67405: PPUSH
67406: PPUSH
67407: PPUSH
67408: PPUSH
// if not turrets or not factories then
67409: LD_VAR 0 1
67413: NOT
67414: PUSH
67415: LD_VAR 0 2
67419: NOT
67420: OR
67421: IFFALSE 67425
// exit ;
67423: GO 67732
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67425: LD_ADDR_VAR 0 10
67429: PUSH
67430: LD_INT 5
67432: PUSH
67433: LD_INT 6
67435: PUSH
67436: EMPTY
67437: LIST
67438: LIST
67439: PUSH
67440: LD_INT 2
67442: PUSH
67443: LD_INT 4
67445: PUSH
67446: EMPTY
67447: LIST
67448: LIST
67449: PUSH
67450: LD_INT 3
67452: PUSH
67453: LD_INT 5
67455: PUSH
67456: EMPTY
67457: LIST
67458: LIST
67459: PUSH
67460: EMPTY
67461: LIST
67462: LIST
67463: LIST
67464: PUSH
67465: LD_INT 24
67467: PUSH
67468: LD_INT 25
67470: PUSH
67471: EMPTY
67472: LIST
67473: LIST
67474: PUSH
67475: LD_INT 23
67477: PUSH
67478: LD_INT 27
67480: PUSH
67481: EMPTY
67482: LIST
67483: LIST
67484: PUSH
67485: EMPTY
67486: LIST
67487: LIST
67488: PUSH
67489: LD_INT 42
67491: PUSH
67492: LD_INT 43
67494: PUSH
67495: EMPTY
67496: LIST
67497: LIST
67498: PUSH
67499: LD_INT 44
67501: PUSH
67502: LD_INT 46
67504: PUSH
67505: EMPTY
67506: LIST
67507: LIST
67508: PUSH
67509: LD_INT 45
67511: PUSH
67512: LD_INT 47
67514: PUSH
67515: EMPTY
67516: LIST
67517: LIST
67518: PUSH
67519: EMPTY
67520: LIST
67521: LIST
67522: LIST
67523: PUSH
67524: EMPTY
67525: LIST
67526: LIST
67527: LIST
67528: ST_TO_ADDR
// result := [ ] ;
67529: LD_ADDR_VAR 0 3
67533: PUSH
67534: EMPTY
67535: ST_TO_ADDR
// for i in turrets do
67536: LD_ADDR_VAR 0 4
67540: PUSH
67541: LD_VAR 0 1
67545: PUSH
67546: FOR_IN
67547: IFFALSE 67730
// begin nat := GetNation ( i ) ;
67549: LD_ADDR_VAR 0 7
67553: PUSH
67554: LD_VAR 0 4
67558: PPUSH
67559: CALL_OW 248
67563: ST_TO_ADDR
// weapon := 0 ;
67564: LD_ADDR_VAR 0 8
67568: PUSH
67569: LD_INT 0
67571: ST_TO_ADDR
// if not nat then
67572: LD_VAR 0 7
67576: NOT
67577: IFFALSE 67581
// continue ;
67579: GO 67546
// for j in list [ nat ] do
67581: LD_ADDR_VAR 0 5
67585: PUSH
67586: LD_VAR 0 10
67590: PUSH
67591: LD_VAR 0 7
67595: ARRAY
67596: PUSH
67597: FOR_IN
67598: IFFALSE 67639
// if GetBWeapon ( i ) = j [ 1 ] then
67600: LD_VAR 0 4
67604: PPUSH
67605: CALL_OW 269
67609: PUSH
67610: LD_VAR 0 5
67614: PUSH
67615: LD_INT 1
67617: ARRAY
67618: EQUAL
67619: IFFALSE 67637
// begin weapon := j [ 2 ] ;
67621: LD_ADDR_VAR 0 8
67625: PUSH
67626: LD_VAR 0 5
67630: PUSH
67631: LD_INT 2
67633: ARRAY
67634: ST_TO_ADDR
// break ;
67635: GO 67639
// end ;
67637: GO 67597
67639: POP
67640: POP
// if not weapon then
67641: LD_VAR 0 8
67645: NOT
67646: IFFALSE 67650
// continue ;
67648: GO 67546
// for k in factories do
67650: LD_ADDR_VAR 0 6
67654: PUSH
67655: LD_VAR 0 2
67659: PUSH
67660: FOR_IN
67661: IFFALSE 67726
// begin weapons := AvailableWeaponList ( k ) ;
67663: LD_ADDR_VAR 0 9
67667: PUSH
67668: LD_VAR 0 6
67672: PPUSH
67673: CALL_OW 478
67677: ST_TO_ADDR
// if not weapons then
67678: LD_VAR 0 9
67682: NOT
67683: IFFALSE 67687
// continue ;
67685: GO 67660
// if weapon in weapons then
67687: LD_VAR 0 8
67691: PUSH
67692: LD_VAR 0 9
67696: IN
67697: IFFALSE 67724
// begin result := [ i , weapon ] ;
67699: LD_ADDR_VAR 0 3
67703: PUSH
67704: LD_VAR 0 4
67708: PUSH
67709: LD_VAR 0 8
67713: PUSH
67714: EMPTY
67715: LIST
67716: LIST
67717: ST_TO_ADDR
// exit ;
67718: POP
67719: POP
67720: POP
67721: POP
67722: GO 67732
// end ; end ;
67724: GO 67660
67726: POP
67727: POP
// end ;
67728: GO 67546
67730: POP
67731: POP
// end ;
67732: LD_VAR 0 3
67736: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
67737: LD_INT 0
67739: PPUSH
// if not side or side > 8 then
67740: LD_VAR 0 3
67744: NOT
67745: PUSH
67746: LD_VAR 0 3
67750: PUSH
67751: LD_INT 8
67753: GREATER
67754: OR
67755: IFFALSE 67759
// exit ;
67757: GO 67818
// if not range then
67759: LD_VAR 0 4
67763: NOT
67764: IFFALSE 67775
// range := - 12 ;
67766: LD_ADDR_VAR 0 4
67770: PUSH
67771: LD_INT 12
67773: NEG
67774: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
67775: LD_VAR 0 1
67779: PPUSH
67780: LD_VAR 0 2
67784: PPUSH
67785: LD_VAR 0 3
67789: PPUSH
67790: LD_VAR 0 4
67794: PPUSH
67795: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
67799: LD_VAR 0 1
67803: PPUSH
67804: LD_VAR 0 2
67808: PPUSH
67809: LD_VAR 0 3
67813: PPUSH
67814: CALL_OW 331
// end ;
67818: LD_VAR 0 5
67822: RET
// export function Video ( mode ) ; begin
67823: LD_INT 0
67825: PPUSH
// ingame_video = mode ;
67826: LD_ADDR_OWVAR 52
67830: PUSH
67831: LD_VAR 0 1
67835: ST_TO_ADDR
// interface_hidden = mode ;
67836: LD_ADDR_OWVAR 54
67840: PUSH
67841: LD_VAR 0 1
67845: ST_TO_ADDR
// end ;
67846: LD_VAR 0 2
67850: RET
// export function Join ( array , element ) ; begin
67851: LD_INT 0
67853: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67854: LD_ADDR_VAR 0 3
67858: PUSH
67859: LD_VAR 0 1
67863: PPUSH
67864: LD_VAR 0 1
67868: PUSH
67869: LD_INT 1
67871: PLUS
67872: PPUSH
67873: LD_VAR 0 2
67877: PPUSH
67878: CALL_OW 1
67882: ST_TO_ADDR
// end ;
67883: LD_VAR 0 3
67887: RET
// export function JoinUnion ( array , element ) ; begin
67888: LD_INT 0
67890: PPUSH
// result := array union element ;
67891: LD_ADDR_VAR 0 3
67895: PUSH
67896: LD_VAR 0 1
67900: PUSH
67901: LD_VAR 0 2
67905: UNION
67906: ST_TO_ADDR
// end ;
67907: LD_VAR 0 3
67911: RET
// export function GetBehemoths ( side ) ; begin
67912: LD_INT 0
67914: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
67915: LD_ADDR_VAR 0 2
67919: PUSH
67920: LD_INT 22
67922: PUSH
67923: LD_VAR 0 1
67927: PUSH
67928: EMPTY
67929: LIST
67930: LIST
67931: PUSH
67932: LD_INT 31
67934: PUSH
67935: LD_INT 25
67937: PUSH
67938: EMPTY
67939: LIST
67940: LIST
67941: PUSH
67942: EMPTY
67943: LIST
67944: LIST
67945: PPUSH
67946: CALL_OW 69
67950: ST_TO_ADDR
// end ;
67951: LD_VAR 0 2
67955: RET
// export function Shuffle ( array ) ; var i , index ; begin
67956: LD_INT 0
67958: PPUSH
67959: PPUSH
67960: PPUSH
// result := [ ] ;
67961: LD_ADDR_VAR 0 2
67965: PUSH
67966: EMPTY
67967: ST_TO_ADDR
// if not array then
67968: LD_VAR 0 1
67972: NOT
67973: IFFALSE 67977
// exit ;
67975: GO 68076
// Randomize ;
67977: CALL_OW 10
// for i = array downto 1 do
67981: LD_ADDR_VAR 0 3
67985: PUSH
67986: DOUBLE
67987: LD_VAR 0 1
67991: INC
67992: ST_TO_ADDR
67993: LD_INT 1
67995: PUSH
67996: FOR_DOWNTO
67997: IFFALSE 68074
// begin index := rand ( 1 , array ) ;
67999: LD_ADDR_VAR 0 4
68003: PUSH
68004: LD_INT 1
68006: PPUSH
68007: LD_VAR 0 1
68011: PPUSH
68012: CALL_OW 12
68016: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68017: LD_ADDR_VAR 0 2
68021: PUSH
68022: LD_VAR 0 2
68026: PPUSH
68027: LD_VAR 0 2
68031: PUSH
68032: LD_INT 1
68034: PLUS
68035: PPUSH
68036: LD_VAR 0 1
68040: PUSH
68041: LD_VAR 0 4
68045: ARRAY
68046: PPUSH
68047: CALL_OW 2
68051: ST_TO_ADDR
// array := Delete ( array , index ) ;
68052: LD_ADDR_VAR 0 1
68056: PUSH
68057: LD_VAR 0 1
68061: PPUSH
68062: LD_VAR 0 4
68066: PPUSH
68067: CALL_OW 3
68071: ST_TO_ADDR
// end ;
68072: GO 67996
68074: POP
68075: POP
// end ;
68076: LD_VAR 0 2
68080: RET
// export function GetBaseMaterials ( base ) ; begin
68081: LD_INT 0
68083: PPUSH
// result := [ 0 , 0 , 0 ] ;
68084: LD_ADDR_VAR 0 2
68088: PUSH
68089: LD_INT 0
68091: PUSH
68092: LD_INT 0
68094: PUSH
68095: LD_INT 0
68097: PUSH
68098: EMPTY
68099: LIST
68100: LIST
68101: LIST
68102: ST_TO_ADDR
// if not base then
68103: LD_VAR 0 1
68107: NOT
68108: IFFALSE 68112
// exit ;
68110: GO 68161
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68112: LD_ADDR_VAR 0 2
68116: PUSH
68117: LD_VAR 0 1
68121: PPUSH
68122: LD_INT 1
68124: PPUSH
68125: CALL_OW 275
68129: PUSH
68130: LD_VAR 0 1
68134: PPUSH
68135: LD_INT 2
68137: PPUSH
68138: CALL_OW 275
68142: PUSH
68143: LD_VAR 0 1
68147: PPUSH
68148: LD_INT 3
68150: PPUSH
68151: CALL_OW 275
68155: PUSH
68156: EMPTY
68157: LIST
68158: LIST
68159: LIST
68160: ST_TO_ADDR
// end ;
68161: LD_VAR 0 2
68165: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68166: LD_INT 0
68168: PPUSH
68169: PPUSH
// result := array ;
68170: LD_ADDR_VAR 0 3
68174: PUSH
68175: LD_VAR 0 1
68179: ST_TO_ADDR
// if size > 0 then
68180: LD_VAR 0 2
68184: PUSH
68185: LD_INT 0
68187: GREATER
68188: IFFALSE 68234
// for i := array downto size do
68190: LD_ADDR_VAR 0 4
68194: PUSH
68195: DOUBLE
68196: LD_VAR 0 1
68200: INC
68201: ST_TO_ADDR
68202: LD_VAR 0 2
68206: PUSH
68207: FOR_DOWNTO
68208: IFFALSE 68232
// result := Delete ( result , result ) ;
68210: LD_ADDR_VAR 0 3
68214: PUSH
68215: LD_VAR 0 3
68219: PPUSH
68220: LD_VAR 0 3
68224: PPUSH
68225: CALL_OW 3
68229: ST_TO_ADDR
68230: GO 68207
68232: POP
68233: POP
// end ;
68234: LD_VAR 0 3
68238: RET
// export function ComExit ( unit ) ; var tmp ; begin
68239: LD_INT 0
68241: PPUSH
68242: PPUSH
// if not IsInUnit ( unit ) then
68243: LD_VAR 0 1
68247: PPUSH
68248: CALL_OW 310
68252: NOT
68253: IFFALSE 68257
// exit ;
68255: GO 68317
// tmp := IsInUnit ( unit ) ;
68257: LD_ADDR_VAR 0 3
68261: PUSH
68262: LD_VAR 0 1
68266: PPUSH
68267: CALL_OW 310
68271: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68272: LD_VAR 0 3
68276: PPUSH
68277: CALL_OW 247
68281: PUSH
68282: LD_INT 2
68284: EQUAL
68285: IFFALSE 68298
// ComExitVehicle ( unit ) else
68287: LD_VAR 0 1
68291: PPUSH
68292: CALL_OW 121
68296: GO 68307
// ComExitBuilding ( unit ) ;
68298: LD_VAR 0 1
68302: PPUSH
68303: CALL_OW 122
// result := tmp ;
68307: LD_ADDR_VAR 0 2
68311: PUSH
68312: LD_VAR 0 3
68316: ST_TO_ADDR
// end ;
68317: LD_VAR 0 2
68321: RET
// export function ComExitAll ( units ) ; var i ; begin
68322: LD_INT 0
68324: PPUSH
68325: PPUSH
// if not units then
68326: LD_VAR 0 1
68330: NOT
68331: IFFALSE 68335
// exit ;
68333: GO 68361
// for i in units do
68335: LD_ADDR_VAR 0 3
68339: PUSH
68340: LD_VAR 0 1
68344: PUSH
68345: FOR_IN
68346: IFFALSE 68359
// ComExit ( i ) ;
68348: LD_VAR 0 3
68352: PPUSH
68353: CALL 68239 0 1
68357: GO 68345
68359: POP
68360: POP
// end ;
68361: LD_VAR 0 2
68365: RET
// export function ResetHc ; begin
68366: LD_INT 0
68368: PPUSH
// InitHc ;
68369: CALL_OW 19
// hc_importance := 0 ;
68373: LD_ADDR_OWVAR 32
68377: PUSH
68378: LD_INT 0
68380: ST_TO_ADDR
// end ;
68381: LD_VAR 0 1
68385: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68386: LD_INT 0
68388: PPUSH
68389: PPUSH
68390: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68391: LD_ADDR_VAR 0 6
68395: PUSH
68396: LD_VAR 0 1
68400: PUSH
68401: LD_VAR 0 3
68405: PLUS
68406: PUSH
68407: LD_INT 2
68409: DIV
68410: ST_TO_ADDR
// if _x < 0 then
68411: LD_VAR 0 6
68415: PUSH
68416: LD_INT 0
68418: LESS
68419: IFFALSE 68436
// _x := _x * - 1 ;
68421: LD_ADDR_VAR 0 6
68425: PUSH
68426: LD_VAR 0 6
68430: PUSH
68431: LD_INT 1
68433: NEG
68434: MUL
68435: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68436: LD_ADDR_VAR 0 7
68440: PUSH
68441: LD_VAR 0 2
68445: PUSH
68446: LD_VAR 0 4
68450: PLUS
68451: PUSH
68452: LD_INT 2
68454: DIV
68455: ST_TO_ADDR
// if _y < 0 then
68456: LD_VAR 0 7
68460: PUSH
68461: LD_INT 0
68463: LESS
68464: IFFALSE 68481
// _y := _y * - 1 ;
68466: LD_ADDR_VAR 0 7
68470: PUSH
68471: LD_VAR 0 7
68475: PUSH
68476: LD_INT 1
68478: NEG
68479: MUL
68480: ST_TO_ADDR
// result := [ _x , _y ] ;
68481: LD_ADDR_VAR 0 5
68485: PUSH
68486: LD_VAR 0 6
68490: PUSH
68491: LD_VAR 0 7
68495: PUSH
68496: EMPTY
68497: LIST
68498: LIST
68499: ST_TO_ADDR
// end ;
68500: LD_VAR 0 5
68504: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68505: LD_INT 0
68507: PPUSH
68508: PPUSH
68509: PPUSH
68510: PPUSH
// task := GetTaskList ( unit ) ;
68511: LD_ADDR_VAR 0 7
68515: PUSH
68516: LD_VAR 0 1
68520: PPUSH
68521: CALL_OW 437
68525: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68526: LD_VAR 0 7
68530: NOT
68531: PUSH
68532: LD_VAR 0 1
68536: PPUSH
68537: LD_VAR 0 2
68541: PPUSH
68542: CALL_OW 308
68546: NOT
68547: AND
68548: IFFALSE 68552
// exit ;
68550: GO 68670
// if IsInArea ( unit , area ) then
68552: LD_VAR 0 1
68556: PPUSH
68557: LD_VAR 0 2
68561: PPUSH
68562: CALL_OW 308
68566: IFFALSE 68584
// begin ComMoveToArea ( unit , goAway ) ;
68568: LD_VAR 0 1
68572: PPUSH
68573: LD_VAR 0 3
68577: PPUSH
68578: CALL_OW 113
// exit ;
68582: GO 68670
// end ; if task [ 1 ] [ 1 ] <> M then
68584: LD_VAR 0 7
68588: PUSH
68589: LD_INT 1
68591: ARRAY
68592: PUSH
68593: LD_INT 1
68595: ARRAY
68596: PUSH
68597: LD_STRING M
68599: NONEQUAL
68600: IFFALSE 68604
// exit ;
68602: GO 68670
// x := task [ 1 ] [ 2 ] ;
68604: LD_ADDR_VAR 0 5
68608: PUSH
68609: LD_VAR 0 7
68613: PUSH
68614: LD_INT 1
68616: ARRAY
68617: PUSH
68618: LD_INT 2
68620: ARRAY
68621: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
68622: LD_ADDR_VAR 0 6
68626: PUSH
68627: LD_VAR 0 7
68631: PUSH
68632: LD_INT 1
68634: ARRAY
68635: PUSH
68636: LD_INT 3
68638: ARRAY
68639: ST_TO_ADDR
// if InArea ( x , y , area ) then
68640: LD_VAR 0 5
68644: PPUSH
68645: LD_VAR 0 6
68649: PPUSH
68650: LD_VAR 0 2
68654: PPUSH
68655: CALL_OW 309
68659: IFFALSE 68670
// ComStop ( unit ) ;
68661: LD_VAR 0 1
68665: PPUSH
68666: CALL_OW 141
// end ;
68670: LD_VAR 0 4
68674: RET
// export function Abs ( value ) ; begin
68675: LD_INT 0
68677: PPUSH
// result := value ;
68678: LD_ADDR_VAR 0 2
68682: PUSH
68683: LD_VAR 0 1
68687: ST_TO_ADDR
// if value < 0 then
68688: LD_VAR 0 1
68692: PUSH
68693: LD_INT 0
68695: LESS
68696: IFFALSE 68713
// result := value * - 1 ;
68698: LD_ADDR_VAR 0 2
68702: PUSH
68703: LD_VAR 0 1
68707: PUSH
68708: LD_INT 1
68710: NEG
68711: MUL
68712: ST_TO_ADDR
// end ;
68713: LD_VAR 0 2
68717: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
68718: LD_INT 0
68720: PPUSH
68721: PPUSH
68722: PPUSH
68723: PPUSH
68724: PPUSH
68725: PPUSH
68726: PPUSH
68727: PPUSH
// if not unit or not building then
68728: LD_VAR 0 1
68732: NOT
68733: PUSH
68734: LD_VAR 0 2
68738: NOT
68739: OR
68740: IFFALSE 68744
// exit ;
68742: GO 68970
// x := GetX ( building ) ;
68744: LD_ADDR_VAR 0 4
68748: PUSH
68749: LD_VAR 0 2
68753: PPUSH
68754: CALL_OW 250
68758: ST_TO_ADDR
// y := GetY ( building ) ;
68759: LD_ADDR_VAR 0 6
68763: PUSH
68764: LD_VAR 0 2
68768: PPUSH
68769: CALL_OW 251
68773: ST_TO_ADDR
// d := GetDir ( building ) ;
68774: LD_ADDR_VAR 0 8
68778: PUSH
68779: LD_VAR 0 2
68783: PPUSH
68784: CALL_OW 254
68788: ST_TO_ADDR
// r := 4 ;
68789: LD_ADDR_VAR 0 9
68793: PUSH
68794: LD_INT 4
68796: ST_TO_ADDR
// for i := 1 to 5 do
68797: LD_ADDR_VAR 0 10
68801: PUSH
68802: DOUBLE
68803: LD_INT 1
68805: DEC
68806: ST_TO_ADDR
68807: LD_INT 5
68809: PUSH
68810: FOR_TO
68811: IFFALSE 68968
// begin _x := ShiftX ( x , d , r + i ) ;
68813: LD_ADDR_VAR 0 5
68817: PUSH
68818: LD_VAR 0 4
68822: PPUSH
68823: LD_VAR 0 8
68827: PPUSH
68828: LD_VAR 0 9
68832: PUSH
68833: LD_VAR 0 10
68837: PLUS
68838: PPUSH
68839: CALL_OW 272
68843: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
68844: LD_ADDR_VAR 0 7
68848: PUSH
68849: LD_VAR 0 6
68853: PPUSH
68854: LD_VAR 0 8
68858: PPUSH
68859: LD_VAR 0 9
68863: PUSH
68864: LD_VAR 0 10
68868: PLUS
68869: PPUSH
68870: CALL_OW 273
68874: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68875: LD_VAR 0 5
68879: PPUSH
68880: LD_VAR 0 7
68884: PPUSH
68885: CALL_OW 488
68889: PUSH
68890: LD_VAR 0 5
68894: PPUSH
68895: LD_VAR 0 7
68899: PPUSH
68900: CALL_OW 428
68904: PPUSH
68905: CALL_OW 247
68909: PUSH
68910: LD_INT 3
68912: PUSH
68913: LD_INT 2
68915: PUSH
68916: EMPTY
68917: LIST
68918: LIST
68919: IN
68920: NOT
68921: AND
68922: IFFALSE 68966
// begin ComMoveXY ( unit , _x , _y ) ;
68924: LD_VAR 0 1
68928: PPUSH
68929: LD_VAR 0 5
68933: PPUSH
68934: LD_VAR 0 7
68938: PPUSH
68939: CALL_OW 111
// result := [ _x , _y ] ;
68943: LD_ADDR_VAR 0 3
68947: PUSH
68948: LD_VAR 0 5
68952: PUSH
68953: LD_VAR 0 7
68957: PUSH
68958: EMPTY
68959: LIST
68960: LIST
68961: ST_TO_ADDR
// exit ;
68962: POP
68963: POP
68964: GO 68970
// end ; end ;
68966: GO 68810
68968: POP
68969: POP
// end ;
68970: LD_VAR 0 3
68974: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68975: LD_INT 0
68977: PPUSH
68978: PPUSH
68979: PPUSH
// result := 0 ;
68980: LD_ADDR_VAR 0 3
68984: PUSH
68985: LD_INT 0
68987: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68988: LD_VAR 0 1
68992: PUSH
68993: LD_INT 0
68995: LESS
68996: PUSH
68997: LD_VAR 0 1
69001: PUSH
69002: LD_INT 8
69004: GREATER
69005: OR
69006: PUSH
69007: LD_VAR 0 2
69011: PUSH
69012: LD_INT 0
69014: LESS
69015: OR
69016: PUSH
69017: LD_VAR 0 2
69021: PUSH
69022: LD_INT 8
69024: GREATER
69025: OR
69026: IFFALSE 69030
// exit ;
69028: GO 69105
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69030: LD_ADDR_VAR 0 4
69034: PUSH
69035: LD_INT 22
69037: PUSH
69038: LD_VAR 0 2
69042: PUSH
69043: EMPTY
69044: LIST
69045: LIST
69046: PPUSH
69047: CALL_OW 69
69051: PUSH
69052: FOR_IN
69053: IFFALSE 69103
// begin un := UnitShoot ( i ) ;
69055: LD_ADDR_VAR 0 5
69059: PUSH
69060: LD_VAR 0 4
69064: PPUSH
69065: CALL_OW 504
69069: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69070: LD_VAR 0 5
69074: PPUSH
69075: CALL_OW 255
69079: PUSH
69080: LD_VAR 0 1
69084: EQUAL
69085: IFFALSE 69101
// begin result := un ;
69087: LD_ADDR_VAR 0 3
69091: PUSH
69092: LD_VAR 0 5
69096: ST_TO_ADDR
// exit ;
69097: POP
69098: POP
69099: GO 69105
// end ; end ;
69101: GO 69052
69103: POP
69104: POP
// end ;
69105: LD_VAR 0 3
69109: RET
// export function GetCargoBay ( units ) ; begin
69110: LD_INT 0
69112: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69113: LD_ADDR_VAR 0 2
69117: PUSH
69118: LD_VAR 0 1
69122: PPUSH
69123: LD_INT 2
69125: PUSH
69126: LD_INT 34
69128: PUSH
69129: LD_INT 12
69131: PUSH
69132: EMPTY
69133: LIST
69134: LIST
69135: PUSH
69136: LD_INT 34
69138: PUSH
69139: LD_INT 51
69141: PUSH
69142: EMPTY
69143: LIST
69144: LIST
69145: PUSH
69146: LD_INT 34
69148: PUSH
69149: LD_INT 32
69151: PUSH
69152: EMPTY
69153: LIST
69154: LIST
69155: PUSH
69156: LD_INT 34
69158: PUSH
69159: LD_EXP 22
69163: PUSH
69164: EMPTY
69165: LIST
69166: LIST
69167: PUSH
69168: EMPTY
69169: LIST
69170: LIST
69171: LIST
69172: LIST
69173: LIST
69174: PPUSH
69175: CALL_OW 72
69179: ST_TO_ADDR
// end ;
69180: LD_VAR 0 2
69184: RET
// export function Negate ( value ) ; begin
69185: LD_INT 0
69187: PPUSH
// result := not value ;
69188: LD_ADDR_VAR 0 2
69192: PUSH
69193: LD_VAR 0 1
69197: NOT
69198: ST_TO_ADDR
// end ;
69199: LD_VAR 0 2
69203: RET
// export function Inc ( value ) ; begin
69204: LD_INT 0
69206: PPUSH
// result := value + 1 ;
69207: LD_ADDR_VAR 0 2
69211: PUSH
69212: LD_VAR 0 1
69216: PUSH
69217: LD_INT 1
69219: PLUS
69220: ST_TO_ADDR
// end ;
69221: LD_VAR 0 2
69225: RET
// export function Dec ( value ) ; begin
69226: LD_INT 0
69228: PPUSH
// result := value - 1 ;
69229: LD_ADDR_VAR 0 2
69233: PUSH
69234: LD_VAR 0 1
69238: PUSH
69239: LD_INT 1
69241: MINUS
69242: ST_TO_ADDR
// end ;
69243: LD_VAR 0 2
69247: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
69248: LD_INT 0
69250: PPUSH
69251: PPUSH
69252: PPUSH
69253: PPUSH
69254: PPUSH
69255: PPUSH
69256: PPUSH
69257: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
69258: LD_VAR 0 1
69262: PPUSH
69263: LD_VAR 0 2
69267: PPUSH
69268: CALL_OW 488
69272: NOT
69273: PUSH
69274: LD_VAR 0 3
69278: PPUSH
69279: LD_VAR 0 4
69283: PPUSH
69284: CALL_OW 488
69288: NOT
69289: OR
69290: IFFALSE 69303
// begin result := - 1 ;
69292: LD_ADDR_VAR 0 5
69296: PUSH
69297: LD_INT 1
69299: NEG
69300: ST_TO_ADDR
// exit ;
69301: GO 69538
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
69303: LD_ADDR_VAR 0 12
69307: PUSH
69308: LD_VAR 0 1
69312: PPUSH
69313: LD_VAR 0 2
69317: PPUSH
69318: LD_VAR 0 3
69322: PPUSH
69323: LD_VAR 0 4
69327: PPUSH
69328: CALL 68386 0 4
69332: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
69333: LD_ADDR_VAR 0 11
69337: PUSH
69338: LD_VAR 0 1
69342: PPUSH
69343: LD_VAR 0 2
69347: PPUSH
69348: LD_VAR 0 12
69352: PUSH
69353: LD_INT 1
69355: ARRAY
69356: PPUSH
69357: LD_VAR 0 12
69361: PUSH
69362: LD_INT 2
69364: ARRAY
69365: PPUSH
69366: CALL_OW 298
69370: ST_TO_ADDR
// distance := 9999 ;
69371: LD_ADDR_VAR 0 10
69375: PUSH
69376: LD_INT 9999
69378: ST_TO_ADDR
// for i := 0 to 5 do
69379: LD_ADDR_VAR 0 6
69383: PUSH
69384: DOUBLE
69385: LD_INT 0
69387: DEC
69388: ST_TO_ADDR
69389: LD_INT 5
69391: PUSH
69392: FOR_TO
69393: IFFALSE 69536
// begin _x := ShiftX ( x1 , i , centerDist ) ;
69395: LD_ADDR_VAR 0 7
69399: PUSH
69400: LD_VAR 0 1
69404: PPUSH
69405: LD_VAR 0 6
69409: PPUSH
69410: LD_VAR 0 11
69414: PPUSH
69415: CALL_OW 272
69419: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
69420: LD_ADDR_VAR 0 8
69424: PUSH
69425: LD_VAR 0 2
69429: PPUSH
69430: LD_VAR 0 6
69434: PPUSH
69435: LD_VAR 0 11
69439: PPUSH
69440: CALL_OW 273
69444: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69445: LD_VAR 0 7
69449: PPUSH
69450: LD_VAR 0 8
69454: PPUSH
69455: CALL_OW 488
69459: NOT
69460: IFFALSE 69464
// continue ;
69462: GO 69392
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
69464: LD_ADDR_VAR 0 9
69468: PUSH
69469: LD_VAR 0 12
69473: PUSH
69474: LD_INT 1
69476: ARRAY
69477: PPUSH
69478: LD_VAR 0 12
69482: PUSH
69483: LD_INT 2
69485: ARRAY
69486: PPUSH
69487: LD_VAR 0 7
69491: PPUSH
69492: LD_VAR 0 8
69496: PPUSH
69497: CALL_OW 298
69501: ST_TO_ADDR
// if tmp < distance then
69502: LD_VAR 0 9
69506: PUSH
69507: LD_VAR 0 10
69511: LESS
69512: IFFALSE 69534
// begin result := i ;
69514: LD_ADDR_VAR 0 5
69518: PUSH
69519: LD_VAR 0 6
69523: ST_TO_ADDR
// distance := tmp ;
69524: LD_ADDR_VAR 0 10
69528: PUSH
69529: LD_VAR 0 9
69533: ST_TO_ADDR
// end ; end ;
69534: GO 69392
69536: POP
69537: POP
// end ;
69538: LD_VAR 0 5
69542: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69543: LD_INT 0
69545: PPUSH
69546: PPUSH
// if not driver or not IsInUnit ( driver ) then
69547: LD_VAR 0 1
69551: NOT
69552: PUSH
69553: LD_VAR 0 1
69557: PPUSH
69558: CALL_OW 310
69562: NOT
69563: OR
69564: IFFALSE 69568
// exit ;
69566: GO 69658
// vehicle := IsInUnit ( driver ) ;
69568: LD_ADDR_VAR 0 3
69572: PUSH
69573: LD_VAR 0 1
69577: PPUSH
69578: CALL_OW 310
69582: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69583: LD_VAR 0 1
69587: PPUSH
69588: LD_STRING \
69590: PUSH
69591: LD_INT 0
69593: PUSH
69594: LD_INT 0
69596: PUSH
69597: LD_INT 0
69599: PUSH
69600: LD_INT 0
69602: PUSH
69603: LD_INT 0
69605: PUSH
69606: LD_INT 0
69608: PUSH
69609: EMPTY
69610: LIST
69611: LIST
69612: LIST
69613: LIST
69614: LIST
69615: LIST
69616: LIST
69617: PUSH
69618: LD_STRING E
69620: PUSH
69621: LD_INT 0
69623: PUSH
69624: LD_INT 0
69626: PUSH
69627: LD_VAR 0 3
69631: PUSH
69632: LD_INT 0
69634: PUSH
69635: LD_INT 0
69637: PUSH
69638: LD_INT 0
69640: PUSH
69641: EMPTY
69642: LIST
69643: LIST
69644: LIST
69645: LIST
69646: LIST
69647: LIST
69648: LIST
69649: PUSH
69650: EMPTY
69651: LIST
69652: LIST
69653: PPUSH
69654: CALL_OW 446
// end ;
69658: LD_VAR 0 2
69662: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69663: LD_INT 0
69665: PPUSH
69666: PPUSH
// if not driver or not IsInUnit ( driver ) then
69667: LD_VAR 0 1
69671: NOT
69672: PUSH
69673: LD_VAR 0 1
69677: PPUSH
69678: CALL_OW 310
69682: NOT
69683: OR
69684: IFFALSE 69688
// exit ;
69686: GO 69778
// vehicle := IsInUnit ( driver ) ;
69688: LD_ADDR_VAR 0 3
69692: PUSH
69693: LD_VAR 0 1
69697: PPUSH
69698: CALL_OW 310
69702: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69703: LD_VAR 0 1
69707: PPUSH
69708: LD_STRING \
69710: PUSH
69711: LD_INT 0
69713: PUSH
69714: LD_INT 0
69716: PUSH
69717: LD_INT 0
69719: PUSH
69720: LD_INT 0
69722: PUSH
69723: LD_INT 0
69725: PUSH
69726: LD_INT 0
69728: PUSH
69729: EMPTY
69730: LIST
69731: LIST
69732: LIST
69733: LIST
69734: LIST
69735: LIST
69736: LIST
69737: PUSH
69738: LD_STRING E
69740: PUSH
69741: LD_INT 0
69743: PUSH
69744: LD_INT 0
69746: PUSH
69747: LD_VAR 0 3
69751: PUSH
69752: LD_INT 0
69754: PUSH
69755: LD_INT 0
69757: PUSH
69758: LD_INT 0
69760: PUSH
69761: EMPTY
69762: LIST
69763: LIST
69764: LIST
69765: LIST
69766: LIST
69767: LIST
69768: LIST
69769: PUSH
69770: EMPTY
69771: LIST
69772: LIST
69773: PPUSH
69774: CALL_OW 447
// end ;
69778: LD_VAR 0 2
69782: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
69783: LD_INT 0
69785: PPUSH
69786: PPUSH
69787: PPUSH
// tmp := [ ] ;
69788: LD_ADDR_VAR 0 5
69792: PUSH
69793: EMPTY
69794: ST_TO_ADDR
// for i in units do
69795: LD_ADDR_VAR 0 4
69799: PUSH
69800: LD_VAR 0 1
69804: PUSH
69805: FOR_IN
69806: IFFALSE 69844
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
69808: LD_ADDR_VAR 0 5
69812: PUSH
69813: LD_VAR 0 5
69817: PPUSH
69818: LD_VAR 0 5
69822: PUSH
69823: LD_INT 1
69825: PLUS
69826: PPUSH
69827: LD_VAR 0 4
69831: PPUSH
69832: CALL_OW 256
69836: PPUSH
69837: CALL_OW 2
69841: ST_TO_ADDR
69842: GO 69805
69844: POP
69845: POP
// if not tmp then
69846: LD_VAR 0 5
69850: NOT
69851: IFFALSE 69855
// exit ;
69853: GO 69903
// if asc then
69855: LD_VAR 0 2
69859: IFFALSE 69883
// result := SortListByListAsc ( units , tmp ) else
69861: LD_ADDR_VAR 0 3
69865: PUSH
69866: LD_VAR 0 1
69870: PPUSH
69871: LD_VAR 0 5
69875: PPUSH
69876: CALL_OW 76
69880: ST_TO_ADDR
69881: GO 69903
// result := SortListByListDesc ( units , tmp ) ;
69883: LD_ADDR_VAR 0 3
69887: PUSH
69888: LD_VAR 0 1
69892: PPUSH
69893: LD_VAR 0 5
69897: PPUSH
69898: CALL_OW 77
69902: ST_TO_ADDR
// end ;
69903: LD_VAR 0 3
69907: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
69908: LD_INT 0
69910: PPUSH
69911: PPUSH
// task := GetTaskList ( mech ) ;
69912: LD_ADDR_VAR 0 4
69916: PUSH
69917: LD_VAR 0 1
69921: PPUSH
69922: CALL_OW 437
69926: ST_TO_ADDR
// if not task then
69927: LD_VAR 0 4
69931: NOT
69932: IFFALSE 69936
// exit ;
69934: GO 69978
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
69936: LD_ADDR_VAR 0 3
69940: PUSH
69941: LD_VAR 0 4
69945: PUSH
69946: LD_INT 1
69948: ARRAY
69949: PUSH
69950: LD_INT 1
69952: ARRAY
69953: PUSH
69954: LD_STRING r
69956: EQUAL
69957: PUSH
69958: LD_VAR 0 4
69962: PUSH
69963: LD_INT 1
69965: ARRAY
69966: PUSH
69967: LD_INT 4
69969: ARRAY
69970: PUSH
69971: LD_VAR 0 2
69975: EQUAL
69976: AND
69977: ST_TO_ADDR
// end ;
69978: LD_VAR 0 3
69982: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
69983: LD_INT 0
69985: PPUSH
// SetDir ( unit , d ) ;
69986: LD_VAR 0 1
69990: PPUSH
69991: LD_VAR 0 4
69995: PPUSH
69996: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
70000: LD_VAR 0 1
70004: PPUSH
70005: LD_VAR 0 2
70009: PPUSH
70010: LD_VAR 0 3
70014: PPUSH
70015: LD_VAR 0 5
70019: PPUSH
70020: CALL_OW 48
// end ;
70024: LD_VAR 0 6
70028: RET
// export function ToNaturalNumber ( number ) ; begin
70029: LD_INT 0
70031: PPUSH
// result := number div 1 ;
70032: LD_ADDR_VAR 0 2
70036: PUSH
70037: LD_VAR 0 1
70041: PUSH
70042: LD_INT 1
70044: DIV
70045: ST_TO_ADDR
// if number < 0 then
70046: LD_VAR 0 1
70050: PUSH
70051: LD_INT 0
70053: LESS
70054: IFFALSE 70064
// result := 0 ;
70056: LD_ADDR_VAR 0 2
70060: PUSH
70061: LD_INT 0
70063: ST_TO_ADDR
// end ;
70064: LD_VAR 0 2
70068: RET
// export function SortByClass ( units , class ) ; var un ; begin
70069: LD_INT 0
70071: PPUSH
70072: PPUSH
// if not units or not class then
70073: LD_VAR 0 1
70077: NOT
70078: PUSH
70079: LD_VAR 0 2
70083: NOT
70084: OR
70085: IFFALSE 70089
// exit ;
70087: GO 70184
// result := [ ] ;
70089: LD_ADDR_VAR 0 3
70093: PUSH
70094: EMPTY
70095: ST_TO_ADDR
// for un in units do
70096: LD_ADDR_VAR 0 4
70100: PUSH
70101: LD_VAR 0 1
70105: PUSH
70106: FOR_IN
70107: IFFALSE 70182
// if GetClass ( un ) = class then
70109: LD_VAR 0 4
70113: PPUSH
70114: CALL_OW 257
70118: PUSH
70119: LD_VAR 0 2
70123: EQUAL
70124: IFFALSE 70151
// result := Insert ( result , 1 , un ) else
70126: LD_ADDR_VAR 0 3
70130: PUSH
70131: LD_VAR 0 3
70135: PPUSH
70136: LD_INT 1
70138: PPUSH
70139: LD_VAR 0 4
70143: PPUSH
70144: CALL_OW 2
70148: ST_TO_ADDR
70149: GO 70180
// result := Replace ( result , result + 1 , un ) ;
70151: LD_ADDR_VAR 0 3
70155: PUSH
70156: LD_VAR 0 3
70160: PPUSH
70161: LD_VAR 0 3
70165: PUSH
70166: LD_INT 1
70168: PLUS
70169: PPUSH
70170: LD_VAR 0 4
70174: PPUSH
70175: CALL_OW 1
70179: ST_TO_ADDR
70180: GO 70106
70182: POP
70183: POP
// end ;
70184: LD_VAR 0 3
70188: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70189: LD_INT 0
70191: PPUSH
70192: PPUSH
70193: PPUSH
70194: PPUSH
70195: PPUSH
70196: PPUSH
70197: PPUSH
// result := [ ] ;
70198: LD_ADDR_VAR 0 4
70202: PUSH
70203: EMPTY
70204: ST_TO_ADDR
// if x - r < 0 then
70205: LD_VAR 0 1
70209: PUSH
70210: LD_VAR 0 3
70214: MINUS
70215: PUSH
70216: LD_INT 0
70218: LESS
70219: IFFALSE 70231
// min_x := 0 else
70221: LD_ADDR_VAR 0 8
70225: PUSH
70226: LD_INT 0
70228: ST_TO_ADDR
70229: GO 70247
// min_x := x - r ;
70231: LD_ADDR_VAR 0 8
70235: PUSH
70236: LD_VAR 0 1
70240: PUSH
70241: LD_VAR 0 3
70245: MINUS
70246: ST_TO_ADDR
// if y - r < 0 then
70247: LD_VAR 0 2
70251: PUSH
70252: LD_VAR 0 3
70256: MINUS
70257: PUSH
70258: LD_INT 0
70260: LESS
70261: IFFALSE 70273
// min_y := 0 else
70263: LD_ADDR_VAR 0 7
70267: PUSH
70268: LD_INT 0
70270: ST_TO_ADDR
70271: GO 70289
// min_y := y - r ;
70273: LD_ADDR_VAR 0 7
70277: PUSH
70278: LD_VAR 0 2
70282: PUSH
70283: LD_VAR 0 3
70287: MINUS
70288: ST_TO_ADDR
// max_x := x + r ;
70289: LD_ADDR_VAR 0 9
70293: PUSH
70294: LD_VAR 0 1
70298: PUSH
70299: LD_VAR 0 3
70303: PLUS
70304: ST_TO_ADDR
// max_y := y + r ;
70305: LD_ADDR_VAR 0 10
70309: PUSH
70310: LD_VAR 0 2
70314: PUSH
70315: LD_VAR 0 3
70319: PLUS
70320: ST_TO_ADDR
// for _x = min_x to max_x do
70321: LD_ADDR_VAR 0 5
70325: PUSH
70326: DOUBLE
70327: LD_VAR 0 8
70331: DEC
70332: ST_TO_ADDR
70333: LD_VAR 0 9
70337: PUSH
70338: FOR_TO
70339: IFFALSE 70440
// for _y = min_y to max_y do
70341: LD_ADDR_VAR 0 6
70345: PUSH
70346: DOUBLE
70347: LD_VAR 0 7
70351: DEC
70352: ST_TO_ADDR
70353: LD_VAR 0 10
70357: PUSH
70358: FOR_TO
70359: IFFALSE 70436
// begin if not ValidHex ( _x , _y ) then
70361: LD_VAR 0 5
70365: PPUSH
70366: LD_VAR 0 6
70370: PPUSH
70371: CALL_OW 488
70375: NOT
70376: IFFALSE 70380
// continue ;
70378: GO 70358
// if GetResourceTypeXY ( _x , _y ) then
70380: LD_VAR 0 5
70384: PPUSH
70385: LD_VAR 0 6
70389: PPUSH
70390: CALL_OW 283
70394: IFFALSE 70434
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
70396: LD_ADDR_VAR 0 4
70400: PUSH
70401: LD_VAR 0 4
70405: PPUSH
70406: LD_VAR 0 4
70410: PUSH
70411: LD_INT 1
70413: PLUS
70414: PPUSH
70415: LD_VAR 0 5
70419: PUSH
70420: LD_VAR 0 6
70424: PUSH
70425: EMPTY
70426: LIST
70427: LIST
70428: PPUSH
70429: CALL_OW 1
70433: ST_TO_ADDR
// end ;
70434: GO 70358
70436: POP
70437: POP
70438: GO 70338
70440: POP
70441: POP
// end ;
70442: LD_VAR 0 4
70446: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
70447: LD_INT 0
70449: PPUSH
70450: PPUSH
70451: PPUSH
70452: PPUSH
70453: PPUSH
70454: PPUSH
70455: PPUSH
70456: PPUSH
// if not units then
70457: LD_VAR 0 1
70461: NOT
70462: IFFALSE 70466
// exit ;
70464: GO 70891
// result := UnitFilter ( units , [ f_ok ] ) ;
70466: LD_ADDR_VAR 0 3
70470: PUSH
70471: LD_VAR 0 1
70475: PPUSH
70476: LD_INT 50
70478: PUSH
70479: EMPTY
70480: LIST
70481: PPUSH
70482: CALL_OW 72
70486: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
70487: LD_ADDR_VAR 0 8
70491: PUSH
70492: LD_VAR 0 1
70496: PUSH
70497: LD_INT 1
70499: ARRAY
70500: PPUSH
70501: CALL_OW 255
70505: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
70506: LD_ADDR_VAR 0 10
70510: PUSH
70511: LD_INT 29
70513: PUSH
70514: LD_EXP 25
70518: PUSH
70519: EMPTY
70520: LIST
70521: LIST
70522: ST_TO_ADDR
// if not result then
70523: LD_VAR 0 3
70527: NOT
70528: IFFALSE 70532
// exit ;
70530: GO 70891
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
70532: LD_ADDR_VAR 0 5
70536: PUSH
70537: LD_INT 81
70539: PUSH
70540: LD_VAR 0 8
70544: PUSH
70545: EMPTY
70546: LIST
70547: LIST
70548: PPUSH
70549: CALL_OW 69
70553: ST_TO_ADDR
// for i in result do
70554: LD_ADDR_VAR 0 4
70558: PUSH
70559: LD_VAR 0 3
70563: PUSH
70564: FOR_IN
70565: IFFALSE 70889
// begin tag := GetTag ( i ) + 1 ;
70567: LD_ADDR_VAR 0 9
70571: PUSH
70572: LD_VAR 0 4
70576: PPUSH
70577: CALL_OW 110
70581: PUSH
70582: LD_INT 1
70584: PLUS
70585: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
70586: LD_ADDR_VAR 0 7
70590: PUSH
70591: LD_VAR 0 4
70595: PPUSH
70596: CALL_OW 250
70600: PPUSH
70601: LD_VAR 0 4
70605: PPUSH
70606: CALL_OW 251
70610: PPUSH
70611: LD_INT 6
70613: PPUSH
70614: CALL 70189 0 3
70618: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
70619: LD_VAR 0 7
70623: PUSH
70624: LD_VAR 0 4
70628: PPUSH
70629: CALL_OW 264
70633: PUSH
70634: LD_VAR 0 10
70638: IN
70639: NOT
70640: AND
70641: IFFALSE 70680
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
70643: LD_VAR 0 4
70647: PPUSH
70648: LD_VAR 0 7
70652: PUSH
70653: LD_INT 1
70655: ARRAY
70656: PUSH
70657: LD_INT 1
70659: ARRAY
70660: PPUSH
70661: LD_VAR 0 7
70665: PUSH
70666: LD_INT 1
70668: ARRAY
70669: PUSH
70670: LD_INT 2
70672: ARRAY
70673: PPUSH
70674: CALL_OW 116
70678: GO 70887
// if path > tag then
70680: LD_VAR 0 2
70684: PUSH
70685: LD_VAR 0 9
70689: GREATER
70690: IFFALSE 70857
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
70692: LD_ADDR_VAR 0 6
70696: PUSH
70697: LD_VAR 0 5
70701: PPUSH
70702: LD_INT 91
70704: PUSH
70705: LD_VAR 0 4
70709: PUSH
70710: LD_INT 12
70712: PUSH
70713: EMPTY
70714: LIST
70715: LIST
70716: LIST
70717: PPUSH
70718: CALL_OW 72
70722: ST_TO_ADDR
// if nearEnemy then
70723: LD_VAR 0 6
70727: IFFALSE 70755
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
70729: LD_VAR 0 4
70733: PPUSH
70734: LD_VAR 0 6
70738: PPUSH
70739: LD_VAR 0 4
70743: PPUSH
70744: CALL_OW 74
70748: PPUSH
70749: CALL_OW 115
70753: GO 70855
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
70755: LD_VAR 0 4
70759: PPUSH
70760: LD_VAR 0 2
70764: PUSH
70765: LD_VAR 0 9
70769: ARRAY
70770: PUSH
70771: LD_INT 1
70773: ARRAY
70774: PPUSH
70775: LD_VAR 0 2
70779: PUSH
70780: LD_VAR 0 9
70784: ARRAY
70785: PUSH
70786: LD_INT 2
70788: ARRAY
70789: PPUSH
70790: CALL_OW 297
70794: PUSH
70795: LD_INT 6
70797: GREATER
70798: IFFALSE 70841
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
70800: LD_VAR 0 4
70804: PPUSH
70805: LD_VAR 0 2
70809: PUSH
70810: LD_VAR 0 9
70814: ARRAY
70815: PUSH
70816: LD_INT 1
70818: ARRAY
70819: PPUSH
70820: LD_VAR 0 2
70824: PUSH
70825: LD_VAR 0 9
70829: ARRAY
70830: PUSH
70831: LD_INT 2
70833: ARRAY
70834: PPUSH
70835: CALL_OW 114
70839: GO 70855
// SetTag ( i , tag ) ;
70841: LD_VAR 0 4
70845: PPUSH
70846: LD_VAR 0 9
70850: PPUSH
70851: CALL_OW 109
// end else
70855: GO 70887
// if enemy then
70857: LD_VAR 0 5
70861: IFFALSE 70887
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
70863: LD_VAR 0 4
70867: PPUSH
70868: LD_VAR 0 5
70872: PPUSH
70873: LD_VAR 0 4
70877: PPUSH
70878: CALL_OW 74
70882: PPUSH
70883: CALL_OW 115
// end ;
70887: GO 70564
70889: POP
70890: POP
// end ;
70891: LD_VAR 0 3
70895: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
70896: LD_INT 0
70898: PPUSH
70899: PPUSH
70900: PPUSH
// if not unit or IsInUnit ( unit ) then
70901: LD_VAR 0 1
70905: NOT
70906: PUSH
70907: LD_VAR 0 1
70911: PPUSH
70912: CALL_OW 310
70916: OR
70917: IFFALSE 70921
// exit ;
70919: GO 71012
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
70921: LD_ADDR_VAR 0 4
70925: PUSH
70926: LD_VAR 0 1
70930: PPUSH
70931: CALL_OW 250
70935: PPUSH
70936: LD_VAR 0 2
70940: PPUSH
70941: LD_INT 1
70943: PPUSH
70944: CALL_OW 272
70948: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
70949: LD_ADDR_VAR 0 5
70953: PUSH
70954: LD_VAR 0 1
70958: PPUSH
70959: CALL_OW 251
70963: PPUSH
70964: LD_VAR 0 2
70968: PPUSH
70969: LD_INT 1
70971: PPUSH
70972: CALL_OW 273
70976: ST_TO_ADDR
// if ValidHex ( x , y ) then
70977: LD_VAR 0 4
70981: PPUSH
70982: LD_VAR 0 5
70986: PPUSH
70987: CALL_OW 488
70991: IFFALSE 71012
// ComTurnXY ( unit , x , y ) ;
70993: LD_VAR 0 1
70997: PPUSH
70998: LD_VAR 0 4
71002: PPUSH
71003: LD_VAR 0 5
71007: PPUSH
71008: CALL_OW 118
// end ;
71012: LD_VAR 0 3
71016: RET
// export function SeeUnits ( side , units ) ; var i ; begin
71017: LD_INT 0
71019: PPUSH
71020: PPUSH
// result := false ;
71021: LD_ADDR_VAR 0 3
71025: PUSH
71026: LD_INT 0
71028: ST_TO_ADDR
// if not units then
71029: LD_VAR 0 2
71033: NOT
71034: IFFALSE 71038
// exit ;
71036: GO 71083
// for i in units do
71038: LD_ADDR_VAR 0 4
71042: PUSH
71043: LD_VAR 0 2
71047: PUSH
71048: FOR_IN
71049: IFFALSE 71081
// if See ( side , i ) then
71051: LD_VAR 0 1
71055: PPUSH
71056: LD_VAR 0 4
71060: PPUSH
71061: CALL_OW 292
71065: IFFALSE 71079
// begin result := true ;
71067: LD_ADDR_VAR 0 3
71071: PUSH
71072: LD_INT 1
71074: ST_TO_ADDR
// exit ;
71075: POP
71076: POP
71077: GO 71083
// end ;
71079: GO 71048
71081: POP
71082: POP
// end ;
71083: LD_VAR 0 3
71087: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
71088: LD_INT 0
71090: PPUSH
71091: PPUSH
71092: PPUSH
71093: PPUSH
// if not unit or not points then
71094: LD_VAR 0 1
71098: NOT
71099: PUSH
71100: LD_VAR 0 2
71104: NOT
71105: OR
71106: IFFALSE 71110
// exit ;
71108: GO 71200
// dist := 99999 ;
71110: LD_ADDR_VAR 0 5
71114: PUSH
71115: LD_INT 99999
71117: ST_TO_ADDR
// for i in points do
71118: LD_ADDR_VAR 0 4
71122: PUSH
71123: LD_VAR 0 2
71127: PUSH
71128: FOR_IN
71129: IFFALSE 71198
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
71131: LD_ADDR_VAR 0 6
71135: PUSH
71136: LD_VAR 0 1
71140: PPUSH
71141: LD_VAR 0 4
71145: PUSH
71146: LD_INT 1
71148: ARRAY
71149: PPUSH
71150: LD_VAR 0 4
71154: PUSH
71155: LD_INT 2
71157: ARRAY
71158: PPUSH
71159: CALL_OW 297
71163: ST_TO_ADDR
// if tmpDist < dist then
71164: LD_VAR 0 6
71168: PUSH
71169: LD_VAR 0 5
71173: LESS
71174: IFFALSE 71196
// begin result := i ;
71176: LD_ADDR_VAR 0 3
71180: PUSH
71181: LD_VAR 0 4
71185: ST_TO_ADDR
// dist := tmpDist ;
71186: LD_ADDR_VAR 0 5
71190: PUSH
71191: LD_VAR 0 6
71195: ST_TO_ADDR
// end ; end ;
71196: GO 71128
71198: POP
71199: POP
// end ; end_of_file
71200: LD_VAR 0 3
71204: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
71205: LD_VAR 0 1
71209: PUSH
71210: LD_INT 200
71212: DOUBLE
71213: GREATEREQUAL
71214: IFFALSE 71222
71216: LD_INT 299
71218: DOUBLE
71219: LESSEQUAL
71220: IFTRUE 71224
71222: GO 71256
71224: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
71225: LD_VAR 0 1
71229: PPUSH
71230: LD_VAR 0 2
71234: PPUSH
71235: LD_VAR 0 3
71239: PPUSH
71240: LD_VAR 0 4
71244: PPUSH
71245: LD_VAR 0 5
71249: PPUSH
71250: CALL 26852 0 5
71254: GO 71333
71256: LD_INT 300
71258: DOUBLE
71259: GREATEREQUAL
71260: IFFALSE 71268
71262: LD_INT 399
71264: DOUBLE
71265: LESSEQUAL
71266: IFTRUE 71270
71268: GO 71332
71270: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
71271: LD_VAR 0 1
71275: PPUSH
71276: LD_VAR 0 2
71280: PPUSH
71281: LD_VAR 0 3
71285: PPUSH
71286: LD_VAR 0 4
71290: PPUSH
71291: LD_VAR 0 5
71295: PPUSH
71296: LD_VAR 0 6
71300: PPUSH
71301: LD_VAR 0 7
71305: PPUSH
71306: LD_VAR 0 8
71310: PPUSH
71311: LD_VAR 0 9
71315: PPUSH
71316: LD_VAR 0 10
71320: PPUSH
71321: LD_VAR 0 11
71325: PPUSH
71326: CALL 24494 0 11
71330: GO 71333
71332: POP
// end ;
71333: PPOPN 11
71335: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
71336: LD_VAR 0 1
71340: PPUSH
71341: LD_VAR 0 2
71345: PPUSH
71346: LD_VAR 0 3
71350: PPUSH
71351: LD_VAR 0 4
71355: PPUSH
71356: LD_VAR 0 5
71360: PPUSH
71361: CALL 26588 0 5
// end ; end_of_file
71365: PPOPN 5
71367: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
71368: LD_VAR 0 1
71372: PPUSH
71373: LD_VAR 0 2
71377: PPUSH
71378: LD_VAR 0 3
71382: PPUSH
71383: LD_VAR 0 4
71387: PPUSH
71388: LD_VAR 0 5
71392: PPUSH
71393: LD_VAR 0 6
71397: PPUSH
71398: CALL 12187 0 6
// end ;
71402: PPOPN 6
71404: END
