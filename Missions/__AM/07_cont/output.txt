// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// Init ;
   8: CALL 44 0 0
// DebugMode ;
  12: CALL 265 0 0
// AnimateTrees ( true ) ;
  16: LD_INT 1
  18: PPUSH
  19: CALL_OW 573
// CreateNature ;
  23: CALL 1568 0 0
// PrepareRussians ;
  27: CALL 4578 0 0
// PrepareAmericans ;
  31: CALL 3448 0 0
// Action ;
  35: CALL 8696 0 0
// SaveForQuickRestart ;
  39: CALL_OW 22
// end ;
  43: END
// export debug ; export mission_prev_prefix , mission_prefix ; export buildings_counter , time_to_end , can_end , must_end , kill_counter ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// mission_prefix := 07c_ ;
  55: LD_ADDR_EXP 3
  59: PUSH
  60: LD_STRING 07c_
  62: ST_TO_ADDR
// mission_prev_prefix := 07_ ;
  63: LD_ADDR_EXP 2
  67: PUSH
  68: LD_STRING 07_
  70: ST_TO_ADDR
// buildings_counter := 0 ;
  71: LD_ADDR_EXP 4
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// time_to_end := [ [ 32 32$00 , 29 29$00 , 26 26$00 , 23 23$00 ] [ Difficulty ] , [ 38 38$00 , 36 36$00 , 34 34$00 , 32 32$00 ] [ Difficulty ] , [ 43 43$00 , 41 41$00 , 39 39$00 , 37 37$00 ] [ Difficulty ] ] ;
  79: LD_ADDR_EXP 5
  83: PUSH
  84: LD_INT 67200
  86: PUSH
  87: LD_INT 60900
  89: PUSH
  90: LD_INT 54600
  92: PUSH
  93: LD_INT 48300
  95: PUSH
  96: EMPTY
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: PUSH
 102: LD_OWVAR 67
 106: ARRAY
 107: PUSH
 108: LD_INT 79800
 110: PUSH
 111: LD_INT 75600
 113: PUSH
 114: LD_INT 71400
 116: PUSH
 117: LD_INT 67200
 119: PUSH
 120: EMPTY
 121: LIST
 122: LIST
 123: LIST
 124: LIST
 125: PUSH
 126: LD_OWVAR 67
 130: ARRAY
 131: PUSH
 132: LD_INT 90300
 134: PUSH
 135: LD_INT 86100
 137: PUSH
 138: LD_INT 81900
 140: PUSH
 141: LD_INT 77700
 143: PUSH
 144: EMPTY
 145: LIST
 146: LIST
 147: LIST
 148: LIST
 149: PUSH
 150: LD_OWVAR 67
 154: ARRAY
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: ST_TO_ADDR
// can_end := false ;
 161: LD_ADDR_EXP 6
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// must_end := false ;
 169: LD_ADDR_EXP 7
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// kill_counter := 0 ;
 177: LD_ADDR_EXP 8
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// end ;
 185: LD_VAR 0 1
 189: RET
// every 0 0$01 trigger not debug do
 190: LD_EXP 1
 194: NOT
 195: IFFALSE 264
 197: GO 199
 199: DISABLE
// begin enable ;
 200: ENABLE
// if not must_end then
 201: LD_EXP 7
 205: NOT
 206: IFFALSE 227
// display_strings := [ #Am07-1 , tick ] else
 208: LD_ADDR_OWVAR 47
 212: PUSH
 213: LD_STRING #Am07-1
 215: PUSH
 216: LD_OWVAR 1
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: ST_TO_ADDR
 225: GO 264
// display_strings := [ #Am07-1 , tick , #Am07-2 , time_to_end [ 3 ] - tick ] ;
 227: LD_ADDR_OWVAR 47
 231: PUSH
 232: LD_STRING #Am07-1
 234: PUSH
 235: LD_OWVAR 1
 239: PUSH
 240: LD_STRING #Am07-2
 242: PUSH
 243: LD_EXP 5
 247: PUSH
 248: LD_INT 3
 250: ARRAY
 251: PUSH
 252: LD_OWVAR 1
 256: MINUS
 257: PUSH
 258: EMPTY
 259: LIST
 260: LIST
 261: LIST
 262: LIST
 263: ST_TO_ADDR
// end ;
 264: END
// function DebugMode ; var i ; begin
 265: LD_INT 0
 267: PPUSH
 268: PPUSH
// if not debug then
 269: LD_EXP 1
 273: NOT
 274: IFFALSE 278
// exit ;
 276: GO 293
// Difficulty := 4 ;
 278: LD_ADDR_OWVAR 67
 282: PUSH
 283: LD_INT 4
 285: ST_TO_ADDR
// FogOff ( 1 ) ;
 286: LD_INT 1
 288: PPUSH
 289: CALL_OW 344
// end ;
 293: LD_VAR 0 1
 297: RET
// every 3 trigger debug do var i , filter ;
 298: LD_EXP 1
 302: IFFALSE 391
 304: GO 306
 306: DISABLE
 307: LD_INT 0
 309: PPUSH
 310: PPUSH
// begin enable ;
 311: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 500 ] ] ] ) ;
 312: LD_ADDR_VAR 0 2
 316: PUSH
 317: LD_INT 22
 319: PUSH
 320: LD_INT 1
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PUSH
 327: LD_INT 3
 329: PUSH
 330: LD_INT 24
 332: PUSH
 333: LD_INT 500
 335: PUSH
 336: EMPTY
 337: LIST
 338: LIST
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: PPUSH
 348: CALL_OW 69
 352: ST_TO_ADDR
// if not filter then
 353: LD_VAR 0 2
 357: NOT
 358: IFFALSE 362
// exit ;
 360: GO 391
// for i in filter do
 362: LD_ADDR_VAR 0 1
 366: PUSH
 367: LD_VAR 0 2
 371: PUSH
 372: FOR_IN
 373: IFFALSE 389
// SetLives ( i , 1000 ) ;
 375: LD_VAR 0 1
 379: PPUSH
 380: LD_INT 1000
 382: PPUSH
 383: CALL_OW 234
 387: GO 372
 389: POP
 390: POP
// end ;
 391: PPOPN 2
 393: END
// every 0 0$1 trigger kill_counter >= 20 do
 394: LD_EXP 8
 398: PUSH
 399: LD_INT 20
 401: GREATEREQUAL
 402: IFFALSE 414
 404: GO 406
 406: DISABLE
// SetAchievement ( ACH_HITMAN ) ;
 407: LD_STRING ACH_HITMAN
 409: PPUSH
 410: CALL_OW 543
 414: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) >= 3 do
 415: LD_INT 22
 417: PUSH
 418: LD_INT 1
 420: PUSH
 421: EMPTY
 422: LIST
 423: LIST
 424: PUSH
 425: LD_INT 23
 427: PUSH
 428: LD_INT 3
 430: PUSH
 431: EMPTY
 432: LIST
 433: LIST
 434: PUSH
 435: LD_INT 21
 437: PUSH
 438: LD_INT 2
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: LIST
 449: PPUSH
 450: CALL_OW 69
 454: PUSH
 455: LD_INT 3
 457: GREATEREQUAL
 458: IFFALSE 470
 460: GO 462
 462: DISABLE
// SetAchievement ( ACH_TANKACE ) ;
 463: LD_STRING ACH_TANKACE
 465: PPUSH
 466: CALL_OW 543
 470: END
// every 0 0$1 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) = 0 do
 471: LD_INT 2
 473: PUSH
 474: LD_INT 30
 476: PUSH
 477: LD_INT 0
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PUSH
 484: LD_INT 30
 486: PUSH
 487: LD_INT 1
 489: PUSH
 490: EMPTY
 491: LIST
 492: LIST
 493: PUSH
 494: EMPTY
 495: LIST
 496: LIST
 497: LIST
 498: PPUSH
 499: CALL_OW 69
 503: PUSH
 504: LD_INT 0
 506: EQUAL
 507: IFFALSE 519
 509: GO 511
 511: DISABLE
// SetAchievement ( ACH_COMMANDO ) ; end_of_file
 512: LD_STRING ACH_COMMANDO
 514: PPUSH
 515: CALL_OW 543
 519: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 520: LD_INT 0
 522: PPUSH
// uc_side := side ;
 523: LD_ADDR_OWVAR 20
 527: PUSH
 528: LD_VAR 0 1
 532: ST_TO_ADDR
// uc_nation := nation ;
 533: LD_ADDR_OWVAR 21
 537: PUSH
 538: LD_VAR 0 2
 542: ST_TO_ADDR
// vc_chassis := chassis ;
 543: LD_ADDR_OWVAR 37
 547: PUSH
 548: LD_VAR 0 3
 552: ST_TO_ADDR
// vc_engine := engine ;
 553: LD_ADDR_OWVAR 39
 557: PUSH
 558: LD_VAR 0 4
 562: ST_TO_ADDR
// vc_control := control ;
 563: LD_ADDR_OWVAR 38
 567: PUSH
 568: LD_VAR 0 5
 572: ST_TO_ADDR
// vc_weapon := weapon ;
 573: LD_ADDR_OWVAR 40
 577: PUSH
 578: LD_VAR 0 6
 582: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 583: LD_ADDR_OWVAR 41
 587: PUSH
 588: LD_VAR 0 7
 592: ST_TO_ADDR
// result := CreateVehicle ;
 593: LD_ADDR_VAR 0 8
 597: PUSH
 598: CALL_OW 45
 602: ST_TO_ADDR
// end ;
 603: LD_VAR 0 8
 607: RET
// export function GetRandom ( sex ) ; var i , filter ; begin
 608: LD_INT 0
 610: PPUSH
 611: PPUSH
 612: PPUSH
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] ;
 613: LD_ADDR_VAR 0 4
 617: PUSH
 618: LD_INT 22
 620: PUSH
 621: LD_INT 1
 623: PUSH
 624: EMPTY
 625: LIST
 626: LIST
 627: PUSH
 628: LD_INT 21
 630: PUSH
 631: LD_INT 1
 633: PUSH
 634: EMPTY
 635: LIST
 636: LIST
 637: PUSH
 638: LD_INT 50
 640: PUSH
 641: EMPTY
 642: LIST
 643: PUSH
 644: EMPTY
 645: LIST
 646: LIST
 647: LIST
 648: PPUSH
 649: CALL_OW 69
 653: PUSH
 654: LD_EXP 9
 658: PUSH
 659: LD_EXP 10
 663: PUSH
 664: LD_EXP 11
 668: PUSH
 669: LD_EXP 12
 673: PUSH
 674: LD_EXP 13
 678: PUSH
 679: LD_EXP 14
 683: PUSH
 684: LD_EXP 15
 688: PUSH
 689: LD_EXP 16
 693: PUSH
 694: LD_EXP 18
 698: PUSH
 699: LD_EXP 17
 703: PUSH
 704: EMPTY
 705: LIST
 706: LIST
 707: LIST
 708: LIST
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: DIFF
 716: ST_TO_ADDR
// if not filter then
 717: LD_VAR 0 4
 721: NOT
 722: IFFALSE 726
// exit ;
 724: GO 753
// result := UnitFilter ( filter , [ f_sex , sex ] ) ;
 726: LD_ADDR_VAR 0 2
 730: PUSH
 731: LD_VAR 0 4
 735: PPUSH
 736: LD_INT 26
 738: PUSH
 739: LD_VAR 0 1
 743: PUSH
 744: EMPTY
 745: LIST
 746: LIST
 747: PPUSH
 748: CALL_OW 72
 752: ST_TO_ADDR
// end ;
 753: LD_VAR 0 2
 757: RET
// export function SayX ( units , ident ) ; var i ; begin
 758: LD_INT 0
 760: PPUSH
 761: PPUSH
// result := false ;
 762: LD_ADDR_VAR 0 3
 766: PUSH
 767: LD_INT 0
 769: ST_TO_ADDR
// if not units then
 770: LD_VAR 0 1
 774: NOT
 775: IFFALSE 779
// exit ;
 777: GO 833
// for i in units do
 779: LD_ADDR_VAR 0 4
 783: PUSH
 784: LD_VAR 0 1
 788: PUSH
 789: FOR_IN
 790: IFFALSE 831
// if IsOk ( i ) then
 792: LD_VAR 0 4
 796: PPUSH
 797: CALL_OW 302
 801: IFFALSE 829
// begin Say ( i , ident ) ;
 803: LD_VAR 0 4
 807: PPUSH
 808: LD_VAR 0 2
 812: PPUSH
 813: CALL_OW 88
// result := i ;
 817: LD_ADDR_VAR 0 3
 821: PUSH
 822: LD_VAR 0 4
 826: ST_TO_ADDR
// break ;
 827: GO 831
// end ;
 829: GO 789
 831: POP
 832: POP
// end ;
 833: LD_VAR 0 3
 837: RET
// export function GoToAnotherTower ( un , b , x , y ) ; var i , filter , barracks , side ; begin
 838: LD_INT 0
 840: PPUSH
 841: PPUSH
 842: PPUSH
 843: PPUSH
 844: PPUSH
// if not un or not IsOk ( un ) then
 845: LD_VAR 0 1
 849: NOT
 850: PUSH
 851: LD_VAR 0 1
 855: PPUSH
 856: CALL_OW 302
 860: NOT
 861: OR
 862: IFFALSE 866
// exit ;
 864: GO 1173
// side := GetSide ( un ) ;
 866: LD_ADDR_VAR 0 9
 870: PUSH
 871: LD_VAR 0 1
 875: PPUSH
 876: CALL_OW 255
 880: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_not , [ f_tag , 7 ] ] , [ f_ok ] , [ f_empty ] ] ) diff b ;
 881: LD_ADDR_VAR 0 7
 885: PUSH
 886: LD_INT 22
 888: PUSH
 889: LD_VAR 0 9
 893: PUSH
 894: EMPTY
 895: LIST
 896: LIST
 897: PUSH
 898: LD_INT 30
 900: PUSH
 901: LD_INT 32
 903: PUSH
 904: EMPTY
 905: LIST
 906: LIST
 907: PUSH
 908: LD_INT 3
 910: PUSH
 911: LD_INT 120
 913: PUSH
 914: LD_INT 7
 916: PUSH
 917: EMPTY
 918: LIST
 919: LIST
 920: PUSH
 921: EMPTY
 922: LIST
 923: LIST
 924: PUSH
 925: LD_INT 50
 927: PUSH
 928: EMPTY
 929: LIST
 930: PUSH
 931: LD_INT 58
 933: PUSH
 934: EMPTY
 935: LIST
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: LIST
 941: LIST
 942: LIST
 943: PPUSH
 944: CALL_OW 69
 948: PUSH
 949: LD_VAR 0 2
 953: DIFF
 954: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_barracks ] ] ) ;
 955: LD_ADDR_VAR 0 8
 959: PUSH
 960: LD_INT 22
 962: PUSH
 963: LD_VAR 0 9
 967: PUSH
 968: EMPTY
 969: LIST
 970: LIST
 971: PUSH
 972: LD_INT 30
 974: PUSH
 975: LD_INT 5
 977: PUSH
 978: EMPTY
 979: LIST
 980: LIST
 981: PUSH
 982: EMPTY
 983: LIST
 984: LIST
 985: PPUSH
 986: CALL_OW 69
 990: ST_TO_ADDR
// if not filter then
 991: LD_VAR 0 7
 995: NOT
 996: IFFALSE 1086
// begin if barracks then
 998: LD_VAR 0 8
1002: IFFALSE 1065
// for i in barracks do
1004: LD_ADDR_VAR 0 6
1008: PUSH
1009: LD_VAR 0 8
1013: PUSH
1014: FOR_IN
1015: IFFALSE 1063
// begin if UnitsInside ( i ) < 6 and IsOk ( i ) then
1017: LD_VAR 0 6
1021: PPUSH
1022: CALL_OW 313
1026: PUSH
1027: LD_INT 6
1029: LESS
1030: PUSH
1031: LD_VAR 0 6
1035: PPUSH
1036: CALL_OW 302
1040: AND
1041: IFFALSE 1061
// begin ComEnterUnit ( un , i ) ;
1043: LD_VAR 0 1
1047: PPUSH
1048: LD_VAR 0 6
1052: PPUSH
1053: CALL_OW 120
// exit ;
1057: POP
1058: POP
1059: GO 1173
// end ; end ;
1061: GO 1014
1063: POP
1064: POP
// ComMoveXY ( un , x , y ) ;
1065: LD_VAR 0 1
1069: PPUSH
1070: LD_VAR 0 3
1074: PPUSH
1075: LD_VAR 0 4
1079: PPUSH
1080: CALL_OW 111
// end else
1084: GO 1173
// begin filter := SortByDistanceUnit ( un , filter , true , true ) ;
1086: LD_ADDR_VAR 0 7
1090: PUSH
1091: LD_VAR 0 1
1095: PPUSH
1096: LD_VAR 0 7
1100: PPUSH
1101: LD_INT 1
1103: PPUSH
1104: LD_INT 1
1106: PPUSH
1107: CALL 37742 0 4
1111: ST_TO_ADDR
// if filter then
1112: LD_VAR 0 7
1116: IFFALSE 1154
// begin SetTag ( filter [ 1 ] , 7 ) ;
1118: LD_VAR 0 7
1122: PUSH
1123: LD_INT 1
1125: ARRAY
1126: PPUSH
1127: LD_INT 7
1129: PPUSH
1130: CALL_OW 109
// ComEnterUnit ( un , filter [ 1 ] ) ;
1134: LD_VAR 0 1
1138: PPUSH
1139: LD_VAR 0 7
1143: PUSH
1144: LD_INT 1
1146: ARRAY
1147: PPUSH
1148: CALL_OW 120
// end else
1152: GO 1173
// ComMoveXY ( un , x , y ) ;
1154: LD_VAR 0 1
1158: PPUSH
1159: LD_VAR 0 3
1163: PPUSH
1164: LD_VAR 0 4
1168: PPUSH
1169: CALL_OW 111
// end ; end ;
1173: LD_VAR 0 5
1177: RET
// export function BaseNeedEnergy ( base ) ; var i , tmp ; begin
1178: LD_INT 0
1180: PPUSH
1181: PPUSH
1182: PPUSH
// if not base then
1183: LD_VAR 0 1
1187: NOT
1188: IFFALSE 1192
// exit ;
1190: GO 1250
// tmp := GetEnergy ( GetBase ( base ) ) ;
1192: LD_ADDR_VAR 0 4
1196: PUSH
1197: LD_VAR 0 1
1201: PPUSH
1202: CALL_OW 274
1206: PPUSH
1207: CALL_OW 278
1211: ST_TO_ADDR
// if tmp [ 1 ] > tmp [ 4 ] then
1212: LD_VAR 0 4
1216: PUSH
1217: LD_INT 1
1219: ARRAY
1220: PUSH
1221: LD_VAR 0 4
1225: PUSH
1226: LD_INT 4
1228: ARRAY
1229: GREATER
1230: IFFALSE 1242
// result := true else
1232: LD_ADDR_VAR 0 2
1236: PUSH
1237: LD_INT 1
1239: ST_TO_ADDR
1240: GO 1250
// result := false ;
1242: LD_ADDR_VAR 0 2
1246: PUSH
1247: LD_INT 0
1249: ST_TO_ADDR
// end ;
1250: LD_VAR 0 2
1254: RET
// export function FilterPeople ( side ) ; begin
1255: LD_INT 0
1257: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) ;
1258: LD_ADDR_VAR 0 2
1262: PUSH
1263: LD_INT 22
1265: PUSH
1266: LD_VAR 0 1
1270: PUSH
1271: EMPTY
1272: LIST
1273: LIST
1274: PUSH
1275: LD_INT 21
1277: PUSH
1278: LD_INT 1
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: PPUSH
1289: CALL_OW 69
1293: ST_TO_ADDR
// end ;
1294: LD_VAR 0 2
1298: RET
// export function FilterDrivers ( side ) ; begin
1299: LD_INT 0
1301: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_outside ] ] ] ) ;
1302: LD_ADDR_VAR 0 2
1306: PUSH
1307: LD_INT 22
1309: PUSH
1310: LD_VAR 0 1
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: PUSH
1319: LD_INT 3
1321: PUSH
1322: LD_INT 56
1324: PUSH
1325: EMPTY
1326: LIST
1327: PUSH
1328: EMPTY
1329: LIST
1330: LIST
1331: PUSH
1332: EMPTY
1333: LIST
1334: LIST
1335: PPUSH
1336: CALL_OW 69
1340: ST_TO_ADDR
// end ;
1341: LD_VAR 0 2
1345: RET
// export function FilterPeopleArea ( side , area ) ; begin
1346: LD_INT 0
1348: PPUSH
// result := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
1349: LD_ADDR_VAR 0 3
1353: PUSH
1354: LD_VAR 0 2
1358: PPUSH
1359: LD_INT 22
1361: PUSH
1362: LD_INT 1
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: PUSH
1369: LD_INT 21
1371: PUSH
1372: LD_INT 1
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: PUSH
1379: EMPTY
1380: LIST
1381: LIST
1382: PPUSH
1383: CALL_OW 70
1387: ST_TO_ADDR
// end ;
1388: LD_VAR 0 3
1392: RET
// export function FilterDriversArea ( side , area ) ; var i , tmp ; begin
1393: LD_INT 0
1395: PPUSH
1396: PPUSH
1397: PPUSH
// tmp := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
1398: LD_ADDR_VAR 0 5
1402: PUSH
1403: LD_VAR 0 2
1407: PPUSH
1408: LD_INT 22
1410: PUSH
1411: LD_INT 1
1413: PUSH
1414: EMPTY
1415: LIST
1416: LIST
1417: PUSH
1418: LD_INT 21
1420: PUSH
1421: LD_INT 2
1423: PUSH
1424: EMPTY
1425: LIST
1426: LIST
1427: PUSH
1428: LD_INT 3
1430: PUSH
1431: LD_INT 58
1433: PUSH
1434: EMPTY
1435: LIST
1436: PUSH
1437: EMPTY
1438: LIST
1439: LIST
1440: PUSH
1441: EMPTY
1442: LIST
1443: LIST
1444: LIST
1445: PPUSH
1446: CALL_OW 70
1450: ST_TO_ADDR
// result := [ ] ;
1451: LD_ADDR_VAR 0 3
1455: PUSH
1456: EMPTY
1457: ST_TO_ADDR
// if not tmp then
1458: LD_VAR 0 5
1462: NOT
1463: IFFALSE 1467
// exit ;
1465: GO 1519
// for i in tmp do
1467: LD_ADDR_VAR 0 4
1471: PUSH
1472: LD_VAR 0 5
1476: PUSH
1477: FOR_IN
1478: IFFALSE 1503
// result := result union IsDrivenBy ( i ) ;
1480: LD_ADDR_VAR 0 3
1484: PUSH
1485: LD_VAR 0 3
1489: PUSH
1490: LD_VAR 0 4
1494: PPUSH
1495: CALL_OW 311
1499: UNION
1500: ST_TO_ADDR
1501: GO 1477
1503: POP
1504: POP
// result := result diff 0 ;
1505: LD_ADDR_VAR 0 3
1509: PUSH
1510: LD_VAR 0 3
1514: PUSH
1515: LD_INT 0
1517: DIFF
1518: ST_TO_ADDR
// end ;
1519: LD_VAR 0 3
1523: RET
// export function FilterBuildings ( side ) ; begin
1524: LD_INT 0
1526: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
1527: LD_ADDR_VAR 0 2
1531: PUSH
1532: LD_INT 22
1534: PUSH
1535: LD_VAR 0 1
1539: PUSH
1540: EMPTY
1541: LIST
1542: LIST
1543: PUSH
1544: LD_INT 21
1546: PUSH
1547: LD_INT 3
1549: PUSH
1550: EMPTY
1551: LIST
1552: LIST
1553: PUSH
1554: EMPTY
1555: LIST
1556: LIST
1557: PPUSH
1558: CALL_OW 69
1562: ST_TO_ADDR
// end ;
1563: LD_VAR 0 2
1567: RET
// export function CreateNature ; var i , animal , nat_area ; begin
1568: LD_INT 0
1570: PPUSH
1571: PPUSH
1572: PPUSH
1573: PPUSH
// uc_side = 0 ;
1574: LD_ADDR_OWVAR 20
1578: PUSH
1579: LD_INT 0
1581: ST_TO_ADDR
// uc_nation = 0 ;
1582: LD_ADDR_OWVAR 21
1586: PUSH
1587: LD_INT 0
1589: ST_TO_ADDR
// nat_area := wildArea ;
1590: LD_ADDR_VAR 0 4
1594: PUSH
1595: LD_INT 3
1597: ST_TO_ADDR
// InitHc ;
1598: CALL_OW 19
// for i = 1 to 4 do
1602: LD_ADDR_VAR 0 2
1606: PUSH
1607: DOUBLE
1608: LD_INT 1
1610: DEC
1611: ST_TO_ADDR
1612: LD_INT 4
1614: PUSH
1615: FOR_TO
1616: IFFALSE 1671
// begin hc_class = 18 ;
1618: LD_ADDR_OWVAR 28
1622: PUSH
1623: LD_INT 18
1625: ST_TO_ADDR
// hc_gallery =  ;
1626: LD_ADDR_OWVAR 33
1630: PUSH
1631: LD_STRING 
1633: ST_TO_ADDR
// hc_face_number = 1 ;
1634: LD_ADDR_OWVAR 34
1638: PUSH
1639: LD_INT 1
1641: ST_TO_ADDR
// animal := CreateHuman ;
1642: LD_ADDR_VAR 0 3
1646: PUSH
1647: CALL_OW 44
1651: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1652: LD_VAR 0 3
1656: PPUSH
1657: LD_VAR 0 4
1661: PPUSH
1662: LD_INT 0
1664: PPUSH
1665: CALL_OW 49
// end ;
1669: GO 1615
1671: POP
1672: POP
// for i = 1 to 6 do
1673: LD_ADDR_VAR 0 2
1677: PUSH
1678: DOUBLE
1679: LD_INT 1
1681: DEC
1682: ST_TO_ADDR
1683: LD_INT 6
1685: PUSH
1686: FOR_TO
1687: IFFALSE 1758
// begin hc_class = class_tiger ;
1689: LD_ADDR_OWVAR 28
1693: PUSH
1694: LD_INT 14
1696: ST_TO_ADDR
// hc_gallery =  ;
1697: LD_ADDR_OWVAR 33
1701: PUSH
1702: LD_STRING 
1704: ST_TO_ADDR
// hc_agressivity = Rand ( 0 , 10 ) ;
1705: LD_ADDR_OWVAR 35
1709: PUSH
1710: LD_INT 0
1712: PPUSH
1713: LD_INT 10
1715: PPUSH
1716: CALL_OW 12
1720: ST_TO_ADDR
// hc_face_number = 3 ;
1721: LD_ADDR_OWVAR 34
1725: PUSH
1726: LD_INT 3
1728: ST_TO_ADDR
// animal := CreateHuman ;
1729: LD_ADDR_VAR 0 3
1733: PUSH
1734: CALL_OW 44
1738: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1739: LD_VAR 0 3
1743: PPUSH
1744: LD_VAR 0 4
1748: PPUSH
1749: LD_INT 0
1751: PPUSH
1752: CALL_OW 49
// end ;
1756: GO 1686
1758: POP
1759: POP
// for i = 1 to 2 do
1760: LD_ADDR_VAR 0 2
1764: PUSH
1765: DOUBLE
1766: LD_INT 1
1768: DEC
1769: ST_TO_ADDR
1770: LD_INT 2
1772: PUSH
1773: FOR_TO
1774: IFFALSE 1837
// begin hc_class = 21 ;
1776: LD_ADDR_OWVAR 28
1780: PUSH
1781: LD_INT 21
1783: ST_TO_ADDR
// hc_gallery =  ;
1784: LD_ADDR_OWVAR 33
1788: PUSH
1789: LD_STRING 
1791: ST_TO_ADDR
// hc_agressivity = 0 ;
1792: LD_ADDR_OWVAR 35
1796: PUSH
1797: LD_INT 0
1799: ST_TO_ADDR
// hc_face_number = 5 ;
1800: LD_ADDR_OWVAR 34
1804: PUSH
1805: LD_INT 5
1807: ST_TO_ADDR
// animal := CreateHuman ;
1808: LD_ADDR_VAR 0 3
1812: PUSH
1813: CALL_OW 44
1817: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1818: LD_VAR 0 3
1822: PPUSH
1823: LD_VAR 0 4
1827: PPUSH
1828: LD_INT 0
1830: PPUSH
1831: CALL_OW 49
// end ;
1835: GO 1773
1837: POP
1838: POP
// for i = 1 to 6 do
1839: LD_ADDR_VAR 0 2
1843: PUSH
1844: DOUBLE
1845: LD_INT 1
1847: DEC
1848: ST_TO_ADDR
1849: LD_INT 6
1851: PUSH
1852: FOR_TO
1853: IFFALSE 1908
// begin hc_class = 13 ;
1855: LD_ADDR_OWVAR 28
1859: PUSH
1860: LD_INT 13
1862: ST_TO_ADDR
// hc_gallery =  ;
1863: LD_ADDR_OWVAR 33
1867: PUSH
1868: LD_STRING 
1870: ST_TO_ADDR
// hc_face_number = 4 ;
1871: LD_ADDR_OWVAR 34
1875: PUSH
1876: LD_INT 4
1878: ST_TO_ADDR
// animal := CreateHuman ;
1879: LD_ADDR_VAR 0 3
1883: PUSH
1884: CALL_OW 44
1888: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1889: LD_VAR 0 3
1893: PPUSH
1894: LD_VAR 0 4
1898: PPUSH
1899: LD_INT 0
1901: PPUSH
1902: CALL_OW 49
// end ;
1906: GO 1852
1908: POP
1909: POP
// for i = 1 to 2 do
1910: LD_ADDR_VAR 0 2
1914: PUSH
1915: DOUBLE
1916: LD_INT 1
1918: DEC
1919: ST_TO_ADDR
1920: LD_INT 2
1922: PUSH
1923: FOR_TO
1924: IFFALSE 1983
// begin hc_class = 20 ;
1926: LD_ADDR_OWVAR 28
1930: PUSH
1931: LD_INT 20
1933: ST_TO_ADDR
// hc_gallery =  ;
1934: LD_ADDR_OWVAR 33
1938: PUSH
1939: LD_STRING 
1941: ST_TO_ADDR
// hc_face_number = 2 ;
1942: LD_ADDR_OWVAR 34
1946: PUSH
1947: LD_INT 2
1949: ST_TO_ADDR
// animal := CreateHuman ;
1950: LD_ADDR_VAR 0 3
1954: PUSH
1955: CALL_OW 44
1959: ST_TO_ADDR
// PlaceUnitXYR ( animal , 101 , 37 , 3 , false ) ;
1960: LD_VAR 0 3
1964: PPUSH
1965: LD_INT 101
1967: PPUSH
1968: LD_INT 37
1970: PPUSH
1971: LD_INT 3
1973: PPUSH
1974: LD_INT 0
1976: PPUSH
1977: CALL_OW 50
// end ;
1981: GO 1923
1983: POP
1984: POP
// for i = 1 to 1 do
1985: LD_ADDR_VAR 0 2
1989: PUSH
1990: DOUBLE
1991: LD_INT 1
1993: DEC
1994: ST_TO_ADDR
1995: LD_INT 1
1997: PUSH
1998: FOR_TO
1999: IFFALSE 2046
// begin vc_chassis := 31 ;
2001: LD_ADDR_OWVAR 37
2005: PUSH
2006: LD_INT 31
2008: ST_TO_ADDR
// vc_control := control_rider ;
2009: LD_ADDR_OWVAR 38
2013: PUSH
2014: LD_INT 4
2016: ST_TO_ADDR
// animal := CreateVehicle ;
2017: LD_ADDR_VAR 0 3
2021: PUSH
2022: CALL_OW 45
2026: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
2027: LD_VAR 0 3
2031: PPUSH
2032: LD_VAR 0 4
2036: PPUSH
2037: LD_INT 0
2039: PPUSH
2040: CALL_OW 49
// end ;
2044: GO 1998
2046: POP
2047: POP
// end ;
2048: LD_VAR 0 1
2052: RET
// export function NearbyTowerHasEnergy ( unit ) ; var i , tmp , energy ; begin
2053: LD_INT 0
2055: PPUSH
2056: PPUSH
2057: PPUSH
2058: PPUSH
// result := [ ] ;
2059: LD_ADDR_VAR 0 2
2063: PUSH
2064: EMPTY
2065: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_dist , unit , 15 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
2066: LD_ADDR_VAR 0 4
2070: PUSH
2071: LD_INT 81
2073: PUSH
2074: LD_VAR 0 1
2078: PPUSH
2079: CALL_OW 255
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: PUSH
2088: LD_INT 91
2090: PUSH
2091: LD_VAR 0 1
2095: PUSH
2096: LD_INT 15
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: LIST
2103: PUSH
2104: LD_INT 2
2106: PUSH
2107: LD_INT 30
2109: PUSH
2110: LD_INT 32
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: PUSH
2117: LD_INT 30
2119: PUSH
2120: LD_INT 33
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: PUSH
2127: EMPTY
2128: LIST
2129: LIST
2130: LIST
2131: PUSH
2132: EMPTY
2133: LIST
2134: LIST
2135: LIST
2136: PPUSH
2137: CALL_OW 69
2141: ST_TO_ADDR
// if not tmp then
2142: LD_VAR 0 4
2146: NOT
2147: IFFALSE 2151
// exit ;
2149: GO 2220
// for i in tmp do
2151: LD_ADDR_VAR 0 3
2155: PUSH
2156: LD_VAR 0 4
2160: PUSH
2161: FOR_IN
2162: IFFALSE 2218
// begin energy := GetEnergy ( GetBase ( i ) ) ;
2164: LD_ADDR_VAR 0 5
2168: PUSH
2169: LD_VAR 0 3
2173: PPUSH
2174: CALL_OW 274
2178: PPUSH
2179: CALL_OW 278
2183: ST_TO_ADDR
// if energy [ 4 ] > energy [ 1 ] then
2184: LD_VAR 0 5
2188: PUSH
2189: LD_INT 4
2191: ARRAY
2192: PUSH
2193: LD_VAR 0 5
2197: PUSH
2198: LD_INT 1
2200: ARRAY
2201: GREATER
2202: IFFALSE 2216
// begin result := i ;
2204: LD_ADDR_VAR 0 2
2208: PUSH
2209: LD_VAR 0 3
2213: ST_TO_ADDR
// break ;
2214: GO 2218
// end ; end ;
2216: GO 2161
2218: POP
2219: POP
// end ;
2220: LD_VAR 0 2
2224: RET
// export function GetTurretWeaponBase ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
2225: LD_INT 0
2227: PPUSH
2228: PPUSH
2229: PPUSH
2230: PPUSH
2231: PPUSH
2232: PPUSH
2233: PPUSH
2234: PPUSH
2235: PPUSH
2236: PPUSH
2237: PPUSH
2238: PPUSH
2239: PPUSH
2240: PPUSH
2241: PPUSH
2242: PPUSH
// result := false ;
2243: LD_ADDR_VAR 0 2
2247: PUSH
2248: LD_INT 0
2250: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
2251: LD_VAR 0 1
2255: NOT
2256: PUSH
2257: LD_VAR 0 1
2261: PPUSH
2262: CALL_OW 266
2266: PUSH
2267: LD_INT 32
2269: PUSH
2270: LD_INT 33
2272: PUSH
2273: EMPTY
2274: LIST
2275: LIST
2276: IN
2277: NOT
2278: OR
2279: IFFALSE 2283
// exit ;
2281: GO 3443
// nat := GetNation ( tower ) ;
2283: LD_ADDR_VAR 0 11
2287: PUSH
2288: LD_VAR 0 1
2292: PPUSH
2293: CALL_OW 248
2297: ST_TO_ADDR
// side := GetSide ( tower ) ;
2298: LD_ADDR_VAR 0 15
2302: PUSH
2303: LD_VAR 0 1
2307: PPUSH
2308: CALL_OW 255
2312: ST_TO_ADDR
// x := GetX ( tower ) ;
2313: LD_ADDR_VAR 0 9
2317: PUSH
2318: LD_VAR 0 1
2322: PPUSH
2323: CALL_OW 250
2327: ST_TO_ADDR
// y := GetY ( tower ) ;
2328: LD_ADDR_VAR 0 10
2332: PUSH
2333: LD_VAR 0 1
2337: PPUSH
2338: CALL_OW 251
2342: ST_TO_ADDR
// if not x or not y then
2343: LD_VAR 0 9
2347: NOT
2348: PUSH
2349: LD_VAR 0 10
2353: NOT
2354: OR
2355: IFFALSE 2359
// exit ;
2357: GO 3443
// weapon := 0 ;
2359: LD_ADDR_VAR 0 17
2363: PUSH
2364: LD_INT 0
2366: ST_TO_ADDR
// fac_list := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
2367: LD_ADDR_VAR 0 16
2371: PUSH
2372: LD_INT 42
2374: PUSH
2375: LD_INT 43
2377: PUSH
2378: LD_INT 44
2380: PUSH
2381: LD_INT 46
2383: PUSH
2384: EMPTY
2385: LIST
2386: LIST
2387: LIST
2388: LIST
2389: ST_TO_ADDR
// if not fac_list then
2390: LD_VAR 0 16
2394: NOT
2395: IFFALSE 2399
// exit ;
2397: GO 3443
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
2399: LD_ADDR_VAR 0 4
2403: PUSH
2404: LD_INT 4
2406: PUSH
2407: LD_INT 5
2409: PUSH
2410: LD_INT 9
2412: PUSH
2413: LD_INT 10
2415: PUSH
2416: LD_INT 6
2418: PUSH
2419: LD_INT 7
2421: PUSH
2422: LD_INT 11
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: LIST
2429: LIST
2430: LIST
2431: LIST
2432: LIST
2433: PUSH
2434: LD_INT 27
2436: PUSH
2437: LD_INT 28
2439: PUSH
2440: LD_INT 26
2442: PUSH
2443: LD_INT 30
2445: PUSH
2446: EMPTY
2447: LIST
2448: LIST
2449: LIST
2450: LIST
2451: PUSH
2452: LD_INT 43
2454: PUSH
2455: LD_INT 44
2457: PUSH
2458: LD_INT 46
2460: PUSH
2461: LD_INT 45
2463: PUSH
2464: LD_INT 47
2466: PUSH
2467: LD_INT 49
2469: PUSH
2470: EMPTY
2471: LIST
2472: LIST
2473: LIST
2474: LIST
2475: LIST
2476: LIST
2477: PUSH
2478: EMPTY
2479: LIST
2480: LIST
2481: LIST
2482: PUSH
2483: LD_VAR 0 11
2487: ARRAY
2488: ST_TO_ADDR
// for i in list do
2489: LD_ADDR_VAR 0 7
2493: PUSH
2494: LD_VAR 0 4
2498: PUSH
2499: FOR_IN
2500: IFFALSE 2533
// if not i in fac_list then
2502: LD_VAR 0 7
2506: PUSH
2507: LD_VAR 0 16
2511: IN
2512: NOT
2513: IFFALSE 2531
// list := list diff i ;
2515: LD_ADDR_VAR 0 4
2519: PUSH
2520: LD_VAR 0 4
2524: PUSH
2525: LD_VAR 0 7
2529: DIFF
2530: ST_TO_ADDR
2531: GO 2499
2533: POP
2534: POP
// if not list then
2535: LD_VAR 0 4
2539: NOT
2540: IFFALSE 2544
// exit ;
2542: GO 3443
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
2544: LD_VAR 0 11
2548: PUSH
2549: LD_INT 3
2551: EQUAL
2552: PUSH
2553: LD_INT 49
2555: PUSH
2556: LD_VAR 0 4
2560: IN
2561: AND
2562: PUSH
2563: LD_INT 31
2565: PPUSH
2566: LD_VAR 0 15
2570: PPUSH
2571: CALL_OW 321
2575: PUSH
2576: LD_INT 2
2578: EQUAL
2579: AND
2580: IFFALSE 2640
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
2582: LD_INT 22
2584: PUSH
2585: LD_VAR 0 15
2589: PUSH
2590: EMPTY
2591: LIST
2592: LIST
2593: PUSH
2594: LD_INT 35
2596: PUSH
2597: LD_INT 49
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: PUSH
2604: LD_INT 91
2606: PUSH
2607: LD_VAR 0 1
2611: PUSH
2612: LD_INT 10
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: LIST
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: LIST
2624: PPUSH
2625: CALL_OW 69
2629: NOT
2630: IFFALSE 2640
// weapon := ru_time_lapser ;
2632: LD_ADDR_VAR 0 17
2636: PUSH
2637: LD_INT 49
2639: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
2640: LD_VAR 0 11
2644: PUSH
2645: LD_INT 1
2647: PUSH
2648: LD_INT 2
2650: PUSH
2651: EMPTY
2652: LIST
2653: LIST
2654: IN
2655: PUSH
2656: LD_INT 11
2658: PUSH
2659: LD_VAR 0 4
2663: IN
2664: PUSH
2665: LD_INT 30
2667: PUSH
2668: LD_VAR 0 4
2672: IN
2673: OR
2674: AND
2675: PUSH
2676: LD_INT 6
2678: PPUSH
2679: LD_VAR 0 15
2683: PPUSH
2684: CALL_OW 321
2688: PUSH
2689: LD_INT 2
2691: EQUAL
2692: AND
2693: IFFALSE 2858
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
2695: LD_INT 22
2697: PUSH
2698: LD_VAR 0 15
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: PUSH
2707: LD_INT 2
2709: PUSH
2710: LD_INT 35
2712: PUSH
2713: LD_INT 11
2715: PUSH
2716: EMPTY
2717: LIST
2718: LIST
2719: PUSH
2720: LD_INT 35
2722: PUSH
2723: LD_INT 30
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: LIST
2734: PUSH
2735: LD_INT 91
2737: PUSH
2738: LD_VAR 0 1
2742: PUSH
2743: LD_INT 18
2745: PUSH
2746: EMPTY
2747: LIST
2748: LIST
2749: LIST
2750: PUSH
2751: EMPTY
2752: LIST
2753: LIST
2754: LIST
2755: PPUSH
2756: CALL_OW 69
2760: NOT
2761: PUSH
2762: LD_INT 22
2764: PUSH
2765: LD_VAR 0 15
2769: PUSH
2770: EMPTY
2771: LIST
2772: LIST
2773: PUSH
2774: LD_INT 2
2776: PUSH
2777: LD_INT 30
2779: PUSH
2780: LD_INT 32
2782: PUSH
2783: EMPTY
2784: LIST
2785: LIST
2786: PUSH
2787: LD_INT 30
2789: PUSH
2790: LD_INT 33
2792: PUSH
2793: EMPTY
2794: LIST
2795: LIST
2796: PUSH
2797: EMPTY
2798: LIST
2799: LIST
2800: LIST
2801: PUSH
2802: LD_INT 91
2804: PUSH
2805: LD_VAR 0 1
2809: PUSH
2810: LD_INT 12
2812: PUSH
2813: EMPTY
2814: LIST
2815: LIST
2816: LIST
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: LIST
2822: PUSH
2823: EMPTY
2824: LIST
2825: PPUSH
2826: CALL_OW 69
2830: PUSH
2831: LD_INT 2
2833: GREATER
2834: AND
2835: IFFALSE 2858
// weapon := [ us_radar , ar_radar ] [ nat ] ;
2837: LD_ADDR_VAR 0 17
2841: PUSH
2842: LD_INT 11
2844: PUSH
2845: LD_INT 30
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: PUSH
2852: LD_VAR 0 11
2856: ARRAY
2857: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
2858: LD_VAR 0 17
2862: NOT
2863: PUSH
2864: LD_INT 40
2866: PPUSH
2867: LD_VAR 0 15
2871: PPUSH
2872: CALL_OW 321
2876: PUSH
2877: LD_INT 2
2879: EQUAL
2880: AND
2881: PUSH
2882: LD_INT 7
2884: PUSH
2885: LD_VAR 0 4
2889: IN
2890: PUSH
2891: LD_INT 28
2893: PUSH
2894: LD_VAR 0 4
2898: IN
2899: OR
2900: PUSH
2901: LD_INT 45
2903: PUSH
2904: LD_VAR 0 4
2908: IN
2909: OR
2910: AND
2911: IFFALSE 3165
// begin hex := GetHexInfo ( x , y ) ;
2913: LD_ADDR_VAR 0 3
2917: PUSH
2918: LD_VAR 0 9
2922: PPUSH
2923: LD_VAR 0 10
2927: PPUSH
2928: CALL_OW 546
2932: ST_TO_ADDR
// if hex [ 1 ] then
2933: LD_VAR 0 3
2937: PUSH
2938: LD_INT 1
2940: ARRAY
2941: IFFALSE 2945
// exit ;
2943: GO 3443
// height := hex [ 2 ] ;
2945: LD_ADDR_VAR 0 14
2949: PUSH
2950: LD_VAR 0 3
2954: PUSH
2955: LD_INT 2
2957: ARRAY
2958: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
2959: LD_ADDR_VAR 0 13
2963: PUSH
2964: LD_INT 0
2966: PUSH
2967: LD_INT 2
2969: PUSH
2970: LD_INT 3
2972: PUSH
2973: LD_INT 5
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: LIST
2980: LIST
2981: ST_TO_ADDR
// for i in tmp do
2982: LD_ADDR_VAR 0 7
2986: PUSH
2987: LD_VAR 0 13
2991: PUSH
2992: FOR_IN
2993: IFFALSE 3163
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
2995: LD_ADDR_VAR 0 8
2999: PUSH
3000: LD_VAR 0 9
3004: PPUSH
3005: LD_VAR 0 7
3009: PPUSH
3010: LD_INT 5
3012: PPUSH
3013: CALL_OW 272
3017: PUSH
3018: LD_VAR 0 10
3022: PPUSH
3023: LD_VAR 0 7
3027: PPUSH
3028: LD_INT 5
3030: PPUSH
3031: CALL_OW 273
3035: PUSH
3036: EMPTY
3037: LIST
3038: LIST
3039: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
3040: LD_VAR 0 8
3044: PUSH
3045: LD_INT 1
3047: ARRAY
3048: PPUSH
3049: LD_VAR 0 8
3053: PUSH
3054: LD_INT 2
3056: ARRAY
3057: PPUSH
3058: CALL_OW 488
3062: IFFALSE 3161
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
3064: LD_ADDR_VAR 0 3
3068: PUSH
3069: LD_VAR 0 8
3073: PUSH
3074: LD_INT 1
3076: ARRAY
3077: PPUSH
3078: LD_VAR 0 8
3082: PUSH
3083: LD_INT 2
3085: ARRAY
3086: PPUSH
3087: CALL_OW 546
3091: ST_TO_ADDR
// if hex [ 1 ] then
3092: LD_VAR 0 3
3096: PUSH
3097: LD_INT 1
3099: ARRAY
3100: IFFALSE 3104
// continue ;
3102: GO 2992
// h := hex [ 2 ] ;
3104: LD_ADDR_VAR 0 12
3108: PUSH
3109: LD_VAR 0 3
3113: PUSH
3114: LD_INT 2
3116: ARRAY
3117: ST_TO_ADDR
// if h + 7 < height then
3118: LD_VAR 0 12
3122: PUSH
3123: LD_INT 7
3125: PLUS
3126: PUSH
3127: LD_VAR 0 14
3131: LESS
3132: IFFALSE 3161
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
3134: LD_ADDR_VAR 0 17
3138: PUSH
3139: LD_INT 7
3141: PUSH
3142: LD_INT 28
3144: PUSH
3145: LD_INT 45
3147: PUSH
3148: EMPTY
3149: LIST
3150: LIST
3151: LIST
3152: PUSH
3153: LD_VAR 0 11
3157: ARRAY
3158: ST_TO_ADDR
// break ;
3159: GO 3163
// end ; end ; end ;
3161: GO 2992
3163: POP
3164: POP
// end ; if not weapon then
3165: LD_VAR 0 17
3169: NOT
3170: IFFALSE 3325
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
3172: LD_ADDR_VAR 0 4
3176: PUSH
3177: LD_VAR 0 4
3181: PUSH
3182: LD_INT 11
3184: PUSH
3185: LD_INT 30
3187: PUSH
3188: LD_INT 49
3190: PUSH
3191: EMPTY
3192: LIST
3193: LIST
3194: LIST
3195: DIFF
3196: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , tower , 6 ] , [ f_not , [ f_bweapon , 0 ] ] ] ) ;
3197: LD_ADDR_VAR 0 13
3201: PUSH
3202: LD_INT 22
3204: PUSH
3205: LD_VAR 0 15
3209: PUSH
3210: EMPTY
3211: LIST
3212: LIST
3213: PUSH
3214: LD_INT 91
3216: PUSH
3217: LD_VAR 0 1
3221: PUSH
3222: LD_INT 6
3224: PUSH
3225: EMPTY
3226: LIST
3227: LIST
3228: LIST
3229: PUSH
3230: LD_INT 3
3232: PUSH
3233: LD_INT 35
3235: PUSH
3236: LD_INT 0
3238: PUSH
3239: EMPTY
3240: LIST
3241: LIST
3242: PUSH
3243: EMPTY
3244: LIST
3245: LIST
3246: PUSH
3247: EMPTY
3248: LIST
3249: LIST
3250: LIST
3251: PPUSH
3252: CALL_OW 69
3256: ST_TO_ADDR
// for i in tmp do
3257: LD_ADDR_VAR 0 7
3261: PUSH
3262: LD_VAR 0 13
3266: PUSH
3267: FOR_IN
3268: IFFALSE 3293
// list := list diff GetBWeapon ( i ) ;
3270: LD_ADDR_VAR 0 4
3274: PUSH
3275: LD_VAR 0 4
3279: PUSH
3280: LD_VAR 0 7
3284: PPUSH
3285: CALL_OW 269
3289: DIFF
3290: ST_TO_ADDR
3291: GO 3267
3293: POP
3294: POP
// if list then
3295: LD_VAR 0 4
3299: IFFALSE 3325
// weapon := list [ rand ( 1 , list ) ] ;
3301: LD_ADDR_VAR 0 17
3305: PUSH
3306: LD_VAR 0 4
3310: PUSH
3311: LD_INT 1
3313: PPUSH
3314: LD_VAR 0 4
3318: PPUSH
3319: CALL_OW 12
3323: ARRAY
3324: ST_TO_ADDR
// end ; if weapon then
3325: LD_VAR 0 17
3329: IFFALSE 3443
// begin tmp := CostOfWeapon ( weapon ) ;
3331: LD_ADDR_VAR 0 13
3335: PUSH
3336: LD_VAR 0 17
3340: PPUSH
3341: CALL_OW 451
3345: ST_TO_ADDR
// j := GetBase ( tower ) ;
3346: LD_ADDR_VAR 0 8
3350: PUSH
3351: LD_VAR 0 1
3355: PPUSH
3356: CALL_OW 274
3360: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
3361: LD_VAR 0 8
3365: PPUSH
3366: LD_INT 1
3368: PPUSH
3369: CALL_OW 275
3373: PUSH
3374: LD_VAR 0 13
3378: PUSH
3379: LD_INT 1
3381: ARRAY
3382: GREATEREQUAL
3383: PUSH
3384: LD_VAR 0 8
3388: PPUSH
3389: LD_INT 2
3391: PPUSH
3392: CALL_OW 275
3396: PUSH
3397: LD_VAR 0 13
3401: PUSH
3402: LD_INT 2
3404: ARRAY
3405: GREATEREQUAL
3406: AND
3407: PUSH
3408: LD_VAR 0 8
3412: PPUSH
3413: LD_INT 3
3415: PPUSH
3416: CALL_OW 275
3420: PUSH
3421: LD_VAR 0 13
3425: PUSH
3426: LD_INT 3
3428: ARRAY
3429: GREATEREQUAL
3430: AND
3431: IFFALSE 3443
// result := weapon ;
3433: LD_ADDR_VAR 0 2
3437: PUSH
3438: LD_VAR 0 17
3442: ST_TO_ADDR
// end ; end ; end_of_file
3443: LD_VAR 0 2
3447: RET
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Khatam , Kikuchi , Harisson ; export function PrepareAmericans ; var i , team , others , veh , m ; begin
3448: LD_INT 0
3450: PPUSH
3451: PPUSH
3452: PPUSH
3453: PPUSH
3454: PPUSH
3455: PPUSH
// uc_side := 1 ;
3456: LD_ADDR_OWVAR 20
3460: PUSH
3461: LD_INT 1
3463: ST_TO_ADDR
// uc_nation := 1 ;
3464: LD_ADDR_OWVAR 21
3468: PUSH
3469: LD_INT 1
3471: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prev_prefix ) ;
3472: LD_ADDR_EXP 9
3476: PUSH
3477: LD_STRING JMM
3479: PPUSH
3480: LD_EXP 1
3484: NOT
3485: PPUSH
3486: LD_EXP 2
3490: PPUSH
3491: CALL 32345 0 3
3495: ST_TO_ADDR
// team := [ JMM ] ;
3496: LD_ADDR_VAR 0 3
3500: PUSH
3501: LD_EXP 9
3505: PUSH
3506: EMPTY
3507: LIST
3508: ST_TO_ADDR
// if LoadVariable ( BrownIn07 , debug ) then
3509: LD_STRING BrownIn07
3511: PPUSH
3512: LD_EXP 1
3516: PPUSH
3517: CALL_OW 30
3521: IFFALSE 3547
// Brown := PrepareUnit ( Brown , ( not debug ) , mission_prev_prefix ) ;
3523: LD_ADDR_EXP 10
3527: PUSH
3528: LD_STRING Brown
3530: PPUSH
3531: LD_EXP 1
3535: NOT
3536: PPUSH
3537: LD_EXP 2
3541: PPUSH
3542: CALL 32345 0 3
3546: ST_TO_ADDR
// if Brown then
3547: LD_EXP 10
3551: IFFALSE 3569
// team := team ^ Brown ;
3553: LD_ADDR_VAR 0 3
3557: PUSH
3558: LD_VAR 0 3
3562: PUSH
3563: LD_EXP 10
3567: ADD
3568: ST_TO_ADDR
// if LoadVariable ( DonaldsonIn07 , debug ) then
3569: LD_STRING DonaldsonIn07
3571: PPUSH
3572: LD_EXP 1
3576: PPUSH
3577: CALL_OW 30
3581: IFFALSE 3607
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prev_prefix ) ;
3583: LD_ADDR_EXP 11
3587: PUSH
3588: LD_STRING Donaldson
3590: PPUSH
3591: LD_EXP 1
3595: NOT
3596: PPUSH
3597: LD_EXP 2
3601: PPUSH
3602: CALL 32345 0 3
3606: ST_TO_ADDR
// if Donaldson then
3607: LD_EXP 11
3611: IFFALSE 3629
// team := team ^ Donaldson ;
3613: LD_ADDR_VAR 0 3
3617: PUSH
3618: LD_VAR 0 3
3622: PUSH
3623: LD_EXP 11
3627: ADD
3628: ST_TO_ADDR
// if LoadVariable ( BobbyIn07 , debug ) then
3629: LD_STRING BobbyIn07
3631: PPUSH
3632: LD_EXP 1
3636: PPUSH
3637: CALL_OW 30
3641: IFFALSE 3667
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prev_prefix ) ;
3643: LD_ADDR_EXP 12
3647: PUSH
3648: LD_STRING Bobby
3650: PPUSH
3651: LD_EXP 1
3655: NOT
3656: PPUSH
3657: LD_EXP 2
3661: PPUSH
3662: CALL 32345 0 3
3666: ST_TO_ADDR
// if Bobby then
3667: LD_EXP 12
3671: IFFALSE 3689
// team := team ^ Bobby ;
3673: LD_ADDR_VAR 0 3
3677: PUSH
3678: LD_VAR 0 3
3682: PUSH
3683: LD_EXP 12
3687: ADD
3688: ST_TO_ADDR
// if LoadVariable ( CyrusIn07 , debug ) then
3689: LD_STRING CyrusIn07
3691: PPUSH
3692: LD_EXP 1
3696: PPUSH
3697: CALL_OW 30
3701: IFFALSE 3727
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prev_prefix ) ;
3703: LD_ADDR_EXP 13
3707: PUSH
3708: LD_STRING Cyrus
3710: PPUSH
3711: LD_EXP 1
3715: NOT
3716: PPUSH
3717: LD_EXP 2
3721: PPUSH
3722: CALL 32345 0 3
3726: ST_TO_ADDR
// if Cyrus then
3727: LD_EXP 13
3731: IFFALSE 3749
// team := team ^ Cyrus ;
3733: LD_ADDR_VAR 0 3
3737: PUSH
3738: LD_VAR 0 3
3742: PUSH
3743: LD_EXP 13
3747: ADD
3748: ST_TO_ADDR
// if LoadVariable ( LisaIn07 , debug ) then
3749: LD_STRING LisaIn07
3751: PPUSH
3752: LD_EXP 1
3756: PPUSH
3757: CALL_OW 30
3761: IFFALSE 3787
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prev_prefix ) ;
3763: LD_ADDR_EXP 14
3767: PUSH
3768: LD_STRING Lisa
3770: PPUSH
3771: LD_EXP 1
3775: NOT
3776: PPUSH
3777: LD_EXP 2
3781: PPUSH
3782: CALL 32345 0 3
3786: ST_TO_ADDR
// if Lisa then
3787: LD_EXP 14
3791: IFFALSE 3809
// team := team ^ Lisa ;
3793: LD_ADDR_VAR 0 3
3797: PUSH
3798: LD_VAR 0 3
3802: PUSH
3803: LD_EXP 14
3807: ADD
3808: ST_TO_ADDR
// if LoadVariable ( GladstoneIn07 , debug ) then
3809: LD_STRING GladstoneIn07
3811: PPUSH
3812: LD_EXP 1
3816: PPUSH
3817: CALL_OW 30
3821: IFFALSE 3847
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , mission_prev_prefix ) ;
3823: LD_ADDR_EXP 16
3827: PUSH
3828: LD_STRING Gladstone
3830: PPUSH
3831: LD_EXP 1
3835: NOT
3836: PPUSH
3837: LD_EXP 2
3841: PPUSH
3842: CALL 32345 0 3
3846: ST_TO_ADDR
// if Gladstone then
3847: LD_EXP 16
3851: IFFALSE 3869
// team := team ^ Gladstone ;
3853: LD_ADDR_VAR 0 3
3857: PUSH
3858: LD_VAR 0 3
3862: PUSH
3863: LD_EXP 16
3867: ADD
3868: ST_TO_ADDR
// if LoadVariable ( KhatamIn07 , debug ) then
3869: LD_STRING KhatamIn07
3871: PPUSH
3872: LD_EXP 1
3876: PPUSH
3877: CALL_OW 30
3881: IFFALSE 3907
// Khatam := PrepareUnit ( Khatam , ( not debug ) , mission_prev_prefix ) ;
3883: LD_ADDR_EXP 17
3887: PUSH
3888: LD_STRING Khatam
3890: PPUSH
3891: LD_EXP 1
3895: NOT
3896: PPUSH
3897: LD_EXP 2
3901: PPUSH
3902: CALL 32345 0 3
3906: ST_TO_ADDR
// if Khatam then
3907: LD_EXP 17
3911: IFFALSE 3929
// team := team ^ Khatam ;
3913: LD_ADDR_VAR 0 3
3917: PUSH
3918: LD_VAR 0 3
3922: PUSH
3923: LD_EXP 17
3927: ADD
3928: ST_TO_ADDR
// others := CreateCharacterSet ( 07_others ) ;
3929: LD_ADDR_VAR 0 4
3933: PUSH
3934: LD_STRING 07_others
3936: PPUSH
3937: CALL_OW 31
3941: ST_TO_ADDR
// if others then
3942: LD_VAR 0 4
3946: IFFALSE 3964
// team := team ^ others ;
3948: LD_ADDR_VAR 0 3
3952: PUSH
3953: LD_VAR 0 3
3957: PUSH
3958: LD_VAR 0 4
3962: ADD
3963: ST_TO_ADDR
// if debug then
3964: LD_EXP 1
3968: IFFALSE 4042
// begin InitHc ;
3970: CALL_OW 19
// for i = 1 to 4 do
3974: LD_ADDR_VAR 0 2
3978: PUSH
3979: DOUBLE
3980: LD_INT 1
3982: DEC
3983: ST_TO_ADDR
3984: LD_INT 4
3986: PUSH
3987: FOR_TO
3988: IFFALSE 4040
// begin PrepareHuman ( false , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , 4 ) ;
3990: LD_INT 0
3992: PPUSH
3993: LD_INT 1
3995: PUSH
3996: LD_INT 3
3998: PUSH
3999: EMPTY
4000: LIST
4001: LIST
4002: PUSH
4003: LD_INT 1
4005: PPUSH
4006: LD_INT 2
4008: PPUSH
4009: CALL_OW 12
4013: ARRAY
4014: PPUSH
4015: LD_INT 4
4017: PPUSH
4018: CALL_OW 380
// team := team ^ CreateHuman ;
4022: LD_ADDR_VAR 0 3
4026: PUSH
4027: LD_VAR 0 3
4031: PUSH
4032: CALL_OW 44
4036: ADD
4037: ST_TO_ADDR
// end ;
4038: GO 3987
4040: POP
4041: POP
// end ; m := 0 ;
4042: LD_ADDR_VAR 0 6
4046: PUSH
4047: LD_INT 0
4049: ST_TO_ADDR
// for i in team do
4050: LD_ADDR_VAR 0 2
4054: PUSH
4055: LD_VAR 0 3
4059: PUSH
4060: FOR_IN
4061: IFFALSE 4268
// if GetClass ( i ) = 3 then
4063: LD_VAR 0 2
4067: PPUSH
4068: CALL_OW 257
4072: PUSH
4073: LD_INT 3
4075: EQUAL
4076: IFFALSE 4224
// begin m := m + 1 ;
4078: LD_ADDR_VAR 0 6
4082: PUSH
4083: LD_VAR 0 6
4087: PUSH
4088: LD_INT 1
4090: PLUS
4091: ST_TO_ADDR
// veh := PrepareTank ( 1 , 1 , [ us_medium_wheeled , us_medium_tracked , us_medium_wheeled , us_light_wheeled ] [ m mod 4 + 1 ] , engine_solar , control_manual , [ us_gatling_gun , us_double_gun , us_light_gun , us_radar ] [ m mod 4 + 1 ] , 60 ) ;
4092: LD_ADDR_VAR 0 5
4096: PUSH
4097: LD_INT 1
4099: PPUSH
4100: LD_INT 1
4102: PPUSH
4103: LD_INT 2
4105: PUSH
4106: LD_INT 3
4108: PUSH
4109: LD_INT 2
4111: PUSH
4112: LD_INT 1
4114: PUSH
4115: EMPTY
4116: LIST
4117: LIST
4118: LIST
4119: LIST
4120: PUSH
4121: LD_VAR 0 6
4125: PUSH
4126: LD_INT 4
4128: MOD
4129: PUSH
4130: LD_INT 1
4132: PLUS
4133: ARRAY
4134: PPUSH
4135: LD_INT 2
4137: PPUSH
4138: LD_INT 1
4140: PPUSH
4141: LD_INT 4
4143: PUSH
4144: LD_INT 5
4146: PUSH
4147: LD_INT 3
4149: PUSH
4150: LD_INT 11
4152: PUSH
4153: EMPTY
4154: LIST
4155: LIST
4156: LIST
4157: LIST
4158: PUSH
4159: LD_VAR 0 6
4163: PUSH
4164: LD_INT 4
4166: MOD
4167: PUSH
4168: LD_INT 1
4170: PLUS
4171: ARRAY
4172: PPUSH
4173: LD_INT 60
4175: PPUSH
4176: CALL 520 0 7
4180: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
4181: LD_VAR 0 5
4185: PPUSH
4186: LD_INT 2
4188: PPUSH
4189: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
4193: LD_VAR 0 5
4197: PPUSH
4198: LD_INT 1
4200: PPUSH
4201: LD_INT 0
4203: PPUSH
4204: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
4208: LD_VAR 0 2
4212: PPUSH
4213: LD_VAR 0 5
4217: PPUSH
4218: CALL_OW 52
// end else
4222: GO 4266
// begin if GetClass ( i ) = 2 then
4224: LD_VAR 0 2
4228: PPUSH
4229: CALL_OW 257
4233: PUSH
4234: LD_INT 2
4236: EQUAL
4237: IFFALSE 4251
// SetClass ( i , 1 ) ;
4239: LD_VAR 0 2
4243: PPUSH
4244: LD_INT 1
4246: PPUSH
4247: CALL_OW 336
// PlaceUnitArea ( i , startArea , false ) ;
4251: LD_VAR 0 2
4255: PPUSH
4256: LD_INT 1
4258: PPUSH
4259: LD_INT 0
4261: PPUSH
4262: CALL_OW 49
// end ;
4266: GO 4060
4268: POP
4269: POP
// uc_side := 4 ;
4270: LD_ADDR_OWVAR 20
4274: PUSH
4275: LD_INT 4
4277: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
4278: LD_ADDR_EXP 19
4282: PUSH
4283: LD_STRING Harisson
4285: PPUSH
4286: LD_INT 0
4288: PPUSH
4289: LD_STRING 
4291: PPUSH
4292: CALL 32345 0 3
4296: ST_TO_ADDR
// PrepareScout ;
4297: CALL 4306 0 0
// end ;
4301: LD_VAR 0 1
4305: RET
// function PrepareScout ; var ape ; begin
4306: LD_INT 0
4308: PPUSH
4309: PPUSH
// uc_side := 4 ;
4310: LD_ADDR_OWVAR 20
4314: PUSH
4315: LD_INT 4
4317: ST_TO_ADDR
// uc_nation := 1 ;
4318: LD_ADDR_OWVAR 21
4322: PUSH
4323: LD_INT 1
4325: ST_TO_ADDR
// if LoadVariable ( FrankIn06 , 0 ) then
4326: LD_STRING FrankIn06
4328: PPUSH
4329: LD_INT 0
4331: PPUSH
4332: CALL_OW 30
4336: IFFALSE 4353
// Frank := CreateCharacter ( 06c_Frank ) else
4338: LD_ADDR_EXP 15
4342: PUSH
4343: LD_STRING 06c_Frank
4345: PPUSH
4346: CALL_OW 34
4350: ST_TO_ADDR
4351: GO 4393
// if LoadVariable ( FrankInDelta , 0 ) then
4353: LD_STRING FrankInDelta
4355: PPUSH
4356: LD_INT 0
4358: PPUSH
4359: CALL_OW 30
4363: IFFALSE 4380
// Frank := CreateCharacter ( 05_Frank ) else
4365: LD_ADDR_EXP 15
4369: PUSH
4370: LD_STRING 05_Frank
4372: PPUSH
4373: CALL_OW 34
4377: ST_TO_ADDR
4378: GO 4393
// Frank := CreateCharacter ( 04_Frank ) ;
4380: LD_ADDR_EXP 15
4384: PUSH
4385: LD_STRING 04_Frank
4387: PPUSH
4388: CALL_OW 34
4392: ST_TO_ADDR
// if Frank then
4393: LD_EXP 15
4397: IFFALSE 4530
// begin PlaceUnitArea ( Frank , scoutArea , false ) ;
4399: LD_EXP 15
4403: PPUSH
4404: LD_INT 2
4406: PPUSH
4407: LD_INT 0
4409: PPUSH
4410: CALL_OW 49
// SetClass ( Frank , 1 ) ;
4414: LD_EXP 15
4418: PPUSH
4419: LD_INT 1
4421: PPUSH
4422: CALL_OW 336
// uc_side := 0 ;
4426: LD_ADDR_OWVAR 20
4430: PUSH
4431: LD_INT 0
4433: ST_TO_ADDR
// uc_nation := 0 ;
4434: LD_ADDR_OWVAR 21
4438: PUSH
4439: LD_INT 0
4441: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 0 ) ;
4442: LD_INT 0
4444: PPUSH
4445: LD_INT 12
4447: PPUSH
4448: LD_INT 0
4450: PPUSH
4451: CALL_OW 380
// ape := CreateHuman ;
4455: LD_ADDR_VAR 0 2
4459: PUSH
4460: CALL_OW 44
4464: ST_TO_ADDR
// PlaceUnitXYR ( ape , GetX ( Frank ) , GetY ( Frank ) , 5 , false ) ;
4465: LD_VAR 0 2
4469: PPUSH
4470: LD_EXP 15
4474: PPUSH
4475: CALL_OW 250
4479: PPUSH
4480: LD_EXP 15
4484: PPUSH
4485: CALL_OW 251
4489: PPUSH
4490: LD_INT 5
4492: PPUSH
4493: LD_INT 0
4495: PPUSH
4496: CALL_OW 50
// ComTurnUnit ( ape , Frank ) ;
4500: LD_VAR 0 2
4504: PPUSH
4505: LD_EXP 15
4509: PPUSH
4510: CALL_OW 119
// ComTurnUnit ( Frank , ape ) ;
4514: LD_EXP 15
4518: PPUSH
4519: LD_VAR 0 2
4523: PPUSH
4524: CALL_OW 119
// exit ;
4528: GO 4573
// end ; Kikuchi := PrepareUnit ( Yamoko , false ,  ) ;
4530: LD_ADDR_EXP 18
4534: PUSH
4535: LD_STRING Yamoko
4537: PPUSH
4538: LD_INT 0
4540: PPUSH
4541: LD_STRING 
4543: PPUSH
4544: CALL 32345 0 3
4548: ST_TO_ADDR
// PlaceUnitArea ( Kikuchi , scoutArea , false ) ;
4549: LD_EXP 18
4553: PPUSH
4554: LD_INT 2
4556: PPUSH
4557: LD_INT 0
4559: PPUSH
4560: CALL_OW 49
// ComHold ( Kikuchi ) ;
4564: LD_EXP 18
4568: PPUSH
4569: CALL_OW 140
// end ; end_of_file
4573: LD_VAR 0 1
4577: RET
// export ru_rebuild_list ; export function PrepareRussians ; var i , j , r , un , skill , filter , tmp , dep_list , lab_list , fac_list , breastworks_list , bunker_list , turret_list , weapons_list , personel_counter ; begin
4578: LD_INT 0
4580: PPUSH
4581: PPUSH
4582: PPUSH
4583: PPUSH
4584: PPUSH
4585: PPUSH
4586: PPUSH
4587: PPUSH
4588: PPUSH
4589: PPUSH
4590: PPUSH
4591: PPUSH
4592: PPUSH
4593: PPUSH
4594: PPUSH
4595: PPUSH
// ru_rebuild_list := [ ] ;
4596: LD_ADDR_EXP 20
4600: PUSH
4601: EMPTY
4602: ST_TO_ADDR
// uc_side := 3 ;
4603: LD_ADDR_OWVAR 20
4607: PUSH
4608: LD_INT 3
4610: ST_TO_ADDR
// uc_nation := 3 ;
4611: LD_ADDR_OWVAR 21
4615: PUSH
4616: LD_INT 3
4618: ST_TO_ADDR
// if Difficulty > 1 then
4619: LD_OWVAR 67
4623: PUSH
4624: LD_INT 1
4626: GREATER
4627: IFFALSE 4794
// begin bc_type := b_breastwork ;
4629: LD_ADDR_OWVAR 42
4633: PUSH
4634: LD_INT 31
4636: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 78 , 74 , 2 ) ;
4637: LD_INT 78
4639: PPUSH
4640: LD_INT 74
4642: PPUSH
4643: LD_INT 2
4645: PPUSH
4646: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 171 , 193 , 4 ) ;
4650: LD_INT 171
4652: PPUSH
4653: LD_INT 193
4655: PPUSH
4656: LD_INT 4
4658: PPUSH
4659: CALL_OW 47
// bc_type := b_turret ;
4663: LD_ADDR_OWVAR 42
4667: PUSH
4668: LD_INT 33
4670: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 129 , 96 , 3 ) ;
4671: LD_INT 129
4673: PPUSH
4674: LD_INT 96
4676: PPUSH
4677: LD_INT 3
4679: PPUSH
4680: CALL_OW 47
// if Difficulty > 2 then
4684: LD_OWVAR 67
4688: PUSH
4689: LD_INT 2
4691: GREATER
4692: IFFALSE 4763
// begin RemoveUnit ( HexInfo ( 83 , 141 ) ) ;
4694: LD_INT 83
4696: PPUSH
4697: LD_INT 141
4699: PPUSH
4700: CALL_OW 428
4704: PPUSH
4705: CALL_OW 64
// RemoveUnit ( HexInfo ( 78 , 133 ) ) ;
4709: LD_INT 78
4711: PPUSH
4712: LD_INT 133
4714: PPUSH
4715: CALL_OW 428
4719: PPUSH
4720: CALL_OW 64
// CreateAndPlaceBuildingXYD ( 83 , 141 , 2 ) ;
4724: LD_INT 83
4726: PPUSH
4727: LD_INT 141
4729: PPUSH
4730: LD_INT 2
4732: PPUSH
4733: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 78 , 133 , 2 ) ;
4737: LD_INT 78
4739: PPUSH
4740: LD_INT 133
4742: PPUSH
4743: LD_INT 2
4745: PPUSH
4746: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 145 , 112 , 3 ) ;
4750: LD_INT 145
4752: PPUSH
4753: LD_INT 112
4755: PPUSH
4756: LD_INT 3
4758: PPUSH
4759: CALL_OW 47
// end ; if Difficulty > 3 then
4763: LD_OWVAR 67
4767: PUSH
4768: LD_INT 3
4770: GREATER
4771: IFFALSE 4794
// begin bc_type := b_bunker ;
4773: LD_ADDR_OWVAR 42
4777: PUSH
4778: LD_INT 32
4780: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 44 , 50 , 4 ) ;
4781: LD_INT 44
4783: PPUSH
4784: LD_INT 50
4786: PPUSH
4787: LD_INT 4
4789: PPUSH
4790: CALL_OW 47
// end ; end ; dep_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
4794: LD_ADDR_VAR 0 9
4798: PUSH
4799: LD_INT 22
4801: PUSH
4802: LD_INT 3
4804: PUSH
4805: EMPTY
4806: LIST
4807: LIST
4808: PUSH
4809: LD_INT 2
4811: PUSH
4812: LD_INT 30
4814: PUSH
4815: LD_INT 0
4817: PUSH
4818: EMPTY
4819: LIST
4820: LIST
4821: PUSH
4822: LD_INT 30
4824: PUSH
4825: LD_INT 1
4827: PUSH
4828: EMPTY
4829: LIST
4830: LIST
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: LIST
4836: PUSH
4837: EMPTY
4838: LIST
4839: LIST
4840: PPUSH
4841: CALL_OW 69
4845: ST_TO_ADDR
// lab_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
4846: LD_ADDR_VAR 0 10
4850: PUSH
4851: LD_INT 22
4853: PUSH
4854: LD_INT 3
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PUSH
4861: LD_INT 2
4863: PUSH
4864: LD_INT 30
4866: PUSH
4867: LD_INT 6
4869: PUSH
4870: EMPTY
4871: LIST
4872: LIST
4873: PUSH
4874: LD_INT 30
4876: PUSH
4877: LD_INT 7
4879: PUSH
4880: EMPTY
4881: LIST
4882: LIST
4883: PUSH
4884: LD_INT 30
4886: PUSH
4887: LD_INT 8
4889: PUSH
4890: EMPTY
4891: LIST
4892: LIST
4893: PUSH
4894: EMPTY
4895: LIST
4896: LIST
4897: LIST
4898: LIST
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: PPUSH
4904: CALL_OW 69
4908: ST_TO_ADDR
// fac_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
4909: LD_ADDR_VAR 0 11
4913: PUSH
4914: LD_INT 22
4916: PUSH
4917: LD_INT 3
4919: PUSH
4920: EMPTY
4921: LIST
4922: LIST
4923: PUSH
4924: LD_INT 30
4926: PUSH
4927: LD_INT 3
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: PUSH
4934: EMPTY
4935: LIST
4936: LIST
4937: PPUSH
4938: CALL_OW 69
4942: ST_TO_ADDR
// breastworks_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
4943: LD_ADDR_VAR 0 12
4947: PUSH
4948: LD_INT 22
4950: PUSH
4951: LD_INT 3
4953: PUSH
4954: EMPTY
4955: LIST
4956: LIST
4957: PUSH
4958: LD_INT 30
4960: PUSH
4961: LD_INT 31
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: PUSH
4968: EMPTY
4969: LIST
4970: LIST
4971: PPUSH
4972: CALL_OW 69
4976: ST_TO_ADDR
// bunker_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
4977: LD_ADDR_VAR 0 13
4981: PUSH
4982: LD_INT 22
4984: PUSH
4985: LD_INT 3
4987: PUSH
4988: EMPTY
4989: LIST
4990: LIST
4991: PUSH
4992: LD_INT 30
4994: PUSH
4995: LD_INT 32
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: PUSH
5002: EMPTY
5003: LIST
5004: LIST
5005: PPUSH
5006: CALL_OW 69
5010: ST_TO_ADDR
// turret_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
5011: LD_ADDR_VAR 0 14
5015: PUSH
5016: LD_INT 22
5018: PUSH
5019: LD_INT 3
5021: PUSH
5022: EMPTY
5023: LIST
5024: LIST
5025: PUSH
5026: LD_INT 30
5028: PUSH
5029: LD_INT 33
5031: PUSH
5032: EMPTY
5033: LIST
5034: LIST
5035: PUSH
5036: EMPTY
5037: LIST
5038: LIST
5039: PPUSH
5040: CALL_OW 69
5044: ST_TO_ADDR
// weapons_list := [ [ ru_heavy_machine_gun , 5 ] , [ ru_gatling_gun , 50 ] , [ ru_gun , 30 ] , [ ru_heavy_gun , 15 ] ] ;
5045: LD_ADDR_VAR 0 15
5049: PUSH
5050: LD_INT 42
5052: PUSH
5053: LD_INT 5
5055: PUSH
5056: EMPTY
5057: LIST
5058: LIST
5059: PUSH
5060: LD_INT 43
5062: PUSH
5063: LD_INT 50
5065: PUSH
5066: EMPTY
5067: LIST
5068: LIST
5069: PUSH
5070: LD_INT 44
5072: PUSH
5073: LD_INT 30
5075: PUSH
5076: EMPTY
5077: LIST
5078: LIST
5079: PUSH
5080: LD_INT 46
5082: PUSH
5083: LD_INT 15
5085: PUSH
5086: EMPTY
5087: LIST
5088: LIST
5089: PUSH
5090: EMPTY
5091: LIST
5092: LIST
5093: LIST
5094: LIST
5095: ST_TO_ADDR
// personel_counter := [ 0 , 4 , 6 , 3 ] ;
5096: LD_ADDR_VAR 0 16
5100: PUSH
5101: LD_INT 0
5103: PUSH
5104: LD_INT 4
5106: PUSH
5107: LD_INT 6
5109: PUSH
5110: LD_INT 3
5112: PUSH
5113: EMPTY
5114: LIST
5115: LIST
5116: LIST
5117: LIST
5118: ST_TO_ADDR
// skill := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
5119: LD_ADDR_VAR 0 6
5123: PUSH
5124: LD_INT 4
5126: PUSH
5127: LD_INT 5
5129: PUSH
5130: LD_INT 6
5132: PUSH
5133: LD_INT 7
5135: PUSH
5136: EMPTY
5137: LIST
5138: LIST
5139: LIST
5140: LIST
5141: PUSH
5142: LD_OWVAR 67
5146: ARRAY
5147: ST_TO_ADDR
// SetBName ( ru_dep_main , am_tukh ) ;
5148: LD_INT 16
5150: PPUSH
5151: LD_STRING am_tukh
5153: PPUSH
5154: CALL_OW 500
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
5158: LD_ADDR_VAR 0 2
5162: PUSH
5163: LD_INT 21
5165: PUSH
5166: LD_INT 3
5168: PUSH
5169: EMPTY
5170: LIST
5171: LIST
5172: PPUSH
5173: CALL_OW 69
5177: PUSH
5178: FOR_IN
5179: IFFALSE 5216
// SetBLevel ( i , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5181: LD_VAR 0 2
5185: PPUSH
5186: LD_INT 4
5188: PUSH
5189: LD_INT 5
5191: PUSH
5192: LD_INT 6
5194: PUSH
5195: LD_INT 7
5197: PUSH
5198: EMPTY
5199: LIST
5200: LIST
5201: LIST
5202: LIST
5203: PUSH
5204: LD_OWVAR 67
5208: ARRAY
5209: PPUSH
5210: CALL_OW 241
5214: GO 5178
5216: POP
5217: POP
// for i in dep_list do
5218: LD_ADDR_VAR 0 2
5222: PUSH
5223: LD_VAR 0 9
5227: PUSH
5228: FOR_IN
5229: IFFALSE 5273
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
5231: LD_VAR 0 2
5235: PPUSH
5236: CALL_OW 274
5240: PPUSH
5241: LD_INT 1
5243: PPUSH
5244: LD_INT 1000
5246: PPUSH
5247: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
5251: LD_VAR 0 2
5255: PPUSH
5256: CALL_OW 274
5260: PPUSH
5261: LD_INT 2
5263: PPUSH
5264: LD_INT 1000
5266: PPUSH
5267: CALL_OW 277
// end ;
5271: GO 5228
5273: POP
5274: POP
// InitHc ;
5275: CALL_OW 19
// tmp := bunker_list * [ 45 , 60 , 75 , 80 ] [ Difficulty ] div 100 ;
5279: LD_ADDR_VAR 0 8
5283: PUSH
5284: LD_VAR 0 13
5288: PUSH
5289: LD_INT 45
5291: PUSH
5292: LD_INT 60
5294: PUSH
5295: LD_INT 75
5297: PUSH
5298: LD_INT 80
5300: PUSH
5301: EMPTY
5302: LIST
5303: LIST
5304: LIST
5305: LIST
5306: PUSH
5307: LD_OWVAR 67
5311: ARRAY
5312: MUL
5313: PUSH
5314: LD_INT 100
5316: DIV
5317: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , tmp ) ;
5318: LD_ADDR_VAR 0 16
5322: PUSH
5323: LD_VAR 0 16
5327: PPUSH
5328: LD_INT 1
5330: PPUSH
5331: LD_VAR 0 8
5335: PPUSH
5336: CALL_OW 1
5340: ST_TO_ADDR
// tmp := [ ] ;
5341: LD_ADDR_VAR 0 8
5345: PUSH
5346: EMPTY
5347: ST_TO_ADDR
// for i in bunker_list do
5348: LD_ADDR_VAR 0 2
5352: PUSH
5353: LD_VAR 0 13
5357: PUSH
5358: FOR_IN
5359: IFFALSE 5455
// if i mod 10 + 1 < tmp then
5361: LD_VAR 0 2
5365: PUSH
5366: LD_INT 10
5368: MOD
5369: PUSH
5370: LD_INT 1
5372: PLUS
5373: PUSH
5374: LD_VAR 0 8
5378: LESS
5379: IFFALSE 5424
// tmp := Insert ( tmp , i mod rand ( 3 , 5 ) + 1 , i ) else
5381: LD_ADDR_VAR 0 8
5385: PUSH
5386: LD_VAR 0 8
5390: PPUSH
5391: LD_VAR 0 2
5395: PUSH
5396: LD_INT 3
5398: PPUSH
5399: LD_INT 5
5401: PPUSH
5402: CALL_OW 12
5406: MOD
5407: PUSH
5408: LD_INT 1
5410: PLUS
5411: PPUSH
5412: LD_VAR 0 2
5416: PPUSH
5417: CALL_OW 2
5421: ST_TO_ADDR
5422: GO 5453
// tmp := Insert ( tmp , tmp + 1 , i ) ;
5424: LD_ADDR_VAR 0 8
5428: PUSH
5429: LD_VAR 0 8
5433: PPUSH
5434: LD_VAR 0 8
5438: PUSH
5439: LD_INT 1
5441: PLUS
5442: PPUSH
5443: LD_VAR 0 2
5447: PPUSH
5448: CALL_OW 2
5452: ST_TO_ADDR
5453: GO 5358
5455: POP
5456: POP
// bunker_list := tmp ;
5457: LD_ADDR_VAR 0 13
5461: PUSH
5462: LD_VAR 0 8
5466: ST_TO_ADDR
// for i in bunker_list ^ turret_list do
5467: LD_ADDR_VAR 0 2
5471: PUSH
5472: LD_VAR 0 13
5476: PUSH
5477: LD_VAR 0 14
5481: ADD
5482: PUSH
5483: FOR_IN
5484: IFFALSE 5507
// PlaceWeaponTurret ( i , GetTurretWeaponBase ( i ) ) ;
5486: LD_VAR 0 2
5490: PPUSH
5491: LD_VAR 0 2
5495: PPUSH
5496: CALL 2225 0 1
5500: PPUSH
5501: CALL_OW 431
5505: GO 5483
5507: POP
5508: POP
// while ( personel_counter [ 1 ] ) do
5509: LD_VAR 0 16
5513: PUSH
5514: LD_INT 1
5516: ARRAY
5517: IFFALSE 5625
// begin i := rand ( 1 , bunker_list ) ;
5519: LD_ADDR_VAR 0 2
5523: PUSH
5524: LD_INT 1
5526: PPUSH
5527: LD_VAR 0 13
5531: PPUSH
5532: CALL_OW 12
5536: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5537: LD_INT 0
5539: PPUSH
5540: LD_INT 1
5542: PPUSH
5543: LD_VAR 0 6
5547: PPUSH
5548: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , bunker_list [ i ] ) ;
5552: CALL_OW 44
5556: PPUSH
5557: LD_VAR 0 13
5561: PUSH
5562: LD_VAR 0 2
5566: ARRAY
5567: PPUSH
5568: CALL_OW 52
// bunker_list := Delete ( bunker_list , i ) ;
5572: LD_ADDR_VAR 0 13
5576: PUSH
5577: LD_VAR 0 13
5581: PPUSH
5582: LD_VAR 0 2
5586: PPUSH
5587: CALL_OW 3
5591: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , personel_counter [ 1 ] - 1 ) ;
5592: LD_ADDR_VAR 0 16
5596: PUSH
5597: LD_VAR 0 16
5601: PPUSH
5602: LD_INT 1
5604: PPUSH
5605: LD_VAR 0 16
5609: PUSH
5610: LD_INT 1
5612: ARRAY
5613: PUSH
5614: LD_INT 1
5616: MINUS
5617: PPUSH
5618: CALL_OW 1
5622: ST_TO_ADDR
// end ;
5623: GO 5509
// for i = 1 to personel_counter [ 2 ] do
5625: LD_ADDR_VAR 0 2
5629: PUSH
5630: DOUBLE
5631: LD_INT 1
5633: DEC
5634: ST_TO_ADDR
5635: LD_VAR 0 16
5639: PUSH
5640: LD_INT 2
5642: ARRAY
5643: PUSH
5644: FOR_TO
5645: IFFALSE 5676
// begin PrepareHuman ( false , 2 , skill ) ;
5647: LD_INT 0
5649: PPUSH
5650: LD_INT 2
5652: PPUSH
5653: LD_VAR 0 6
5657: PPUSH
5658: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru_dep_main ) ;
5662: CALL_OW 44
5666: PPUSH
5667: LD_INT 16
5669: PPUSH
5670: CALL_OW 52
// end ;
5674: GO 5644
5676: POP
5677: POP
// for i = 1 to personel_counter [ 3 ] do
5678: LD_ADDR_VAR 0 2
5682: PUSH
5683: DOUBLE
5684: LD_INT 1
5686: DEC
5687: ST_TO_ADDR
5688: LD_VAR 0 16
5692: PUSH
5693: LD_INT 3
5695: ARRAY
5696: PUSH
5697: FOR_TO
5698: IFFALSE 5745
// begin PrepareHuman ( false , 3 , skill ) ;
5700: LD_INT 0
5702: PPUSH
5703: LD_INT 3
5705: PPUSH
5706: LD_VAR 0 6
5710: PPUSH
5711: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , fac_list [ i mod 2 + 1 ] ) ;
5715: CALL_OW 44
5719: PPUSH
5720: LD_VAR 0 11
5724: PUSH
5725: LD_VAR 0 2
5729: PUSH
5730: LD_INT 2
5732: MOD
5733: PUSH
5734: LD_INT 1
5736: PLUS
5737: ARRAY
5738: PPUSH
5739: CALL_OW 52
// end ;
5743: GO 5697
5745: POP
5746: POP
// for i = 1 to personel_counter [ 4 ] do
5747: LD_ADDR_VAR 0 2
5751: PUSH
5752: DOUBLE
5753: LD_INT 1
5755: DEC
5756: ST_TO_ADDR
5757: LD_VAR 0 16
5761: PUSH
5762: LD_INT 4
5764: ARRAY
5765: PUSH
5766: FOR_TO
5767: IFFALSE 5804
// begin PrepareHuman ( false , 4 , skill ) ;
5769: LD_INT 0
5771: PPUSH
5772: LD_INT 4
5774: PPUSH
5775: LD_VAR 0 6
5779: PPUSH
5780: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , lab_list [ 1 ] ) ;
5784: CALL_OW 44
5788: PPUSH
5789: LD_VAR 0 10
5793: PUSH
5794: LD_INT 1
5796: ARRAY
5797: PPUSH
5798: CALL_OW 52
// end ;
5802: GO 5766
5804: POP
5805: POP
// for i in breastworks_list do
5806: LD_ADDR_VAR 0 2
5810: PUSH
5811: LD_VAR 0 12
5815: PUSH
5816: FOR_IN
5817: IFFALSE 5929
// begin r := GetDir ( i ) ;
5819: LD_ADDR_VAR 0 4
5823: PUSH
5824: LD_VAR 0 2
5828: PPUSH
5829: CALL_OW 254
5833: ST_TO_ADDR
// if r > 3 then
5834: LD_VAR 0 4
5838: PUSH
5839: LD_INT 3
5841: GREATER
5842: IFFALSE 5860
// r := r - 3 else
5844: LD_ADDR_VAR 0 4
5848: PUSH
5849: LD_VAR 0 4
5853: PUSH
5854: LD_INT 3
5856: MINUS
5857: ST_TO_ADDR
5858: GO 5874
// r := r + 3 ;
5860: LD_ADDR_VAR 0 4
5864: PUSH
5865: LD_VAR 0 4
5869: PUSH
5870: LD_INT 3
5872: PLUS
5873: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5874: LD_INT 0
5876: PPUSH
5877: LD_INT 1
5879: PPUSH
5880: LD_VAR 0 6
5884: PPUSH
5885: CALL_OW 380
// un := CreateHuman ;
5889: LD_ADDR_VAR 0 5
5893: PUSH
5894: CALL_OW 44
5898: ST_TO_ADDR
// SetDir ( un , r ) ;
5899: LD_VAR 0 5
5903: PPUSH
5904: LD_VAR 0 4
5908: PPUSH
5909: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
5913: LD_VAR 0 5
5917: PPUSH
5918: LD_VAR 0 2
5922: PPUSH
5923: CALL_OW 52
// end ;
5927: GO 5816
5929: POP
5930: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) ;
5931: LD_ADDR_VAR 0 8
5935: PUSH
5936: LD_INT 22
5938: PUSH
5939: LD_INT 3
5941: PUSH
5942: EMPTY
5943: LIST
5944: LIST
5945: PUSH
5946: LD_INT 25
5948: PUSH
5949: LD_INT 3
5951: PUSH
5952: EMPTY
5953: LIST
5954: LIST
5955: PUSH
5956: EMPTY
5957: LIST
5958: LIST
5959: PPUSH
5960: CALL_OW 69
5964: ST_TO_ADDR
// r := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
5965: LD_ADDR_VAR 0 4
5969: PUSH
5970: LD_INT 4
5972: PUSH
5973: LD_INT 5
5975: PUSH
5976: LD_INT 6
5978: PUSH
5979: LD_INT 6
5981: PUSH
5982: EMPTY
5983: LIST
5984: LIST
5985: LIST
5986: LIST
5987: PUSH
5988: LD_OWVAR 67
5992: ARRAY
5993: ST_TO_ADDR
// for i = 1 to r do
5994: LD_ADDR_VAR 0 2
5998: PUSH
5999: DOUBLE
6000: LD_INT 1
6002: DEC
6003: ST_TO_ADDR
6004: LD_VAR 0 4
6008: PUSH
6009: FOR_TO
6010: IFFALSE 6183
// begin un := PrepareTank ( 3 , 3 , [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked ] [ i mod 3 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
6012: LD_ADDR_VAR 0 5
6016: PUSH
6017: LD_INT 3
6019: PPUSH
6020: LD_INT 3
6022: PPUSH
6023: LD_INT 22
6025: PUSH
6026: LD_INT 22
6028: PUSH
6029: LD_INT 24
6031: PUSH
6032: EMPTY
6033: LIST
6034: LIST
6035: LIST
6036: PUSH
6037: LD_VAR 0 2
6041: PUSH
6042: LD_INT 3
6044: MOD
6045: PUSH
6046: LD_INT 1
6048: PLUS
6049: ARRAY
6050: PPUSH
6051: LD_INT 1
6053: PPUSH
6054: LD_INT 1
6056: PPUSH
6057: LD_INT 43
6059: PUSH
6060: LD_INT 44
6062: PUSH
6063: LD_INT 42
6065: PUSH
6066: EMPTY
6067: LIST
6068: LIST
6069: LIST
6070: PUSH
6071: LD_VAR 0 2
6075: PUSH
6076: LD_INT 3
6078: MOD
6079: PUSH
6080: LD_INT 1
6082: PLUS
6083: ARRAY
6084: PPUSH
6085: LD_INT 100
6087: PPUSH
6088: CALL 520 0 7
6092: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
6093: LD_VAR 0 5
6097: PPUSH
6098: LD_INT 0
6100: PPUSH
6101: LD_INT 5
6103: PPUSH
6104: CALL_OW 12
6108: PPUSH
6109: CALL_OW 233
// PlaceUnitArea ( un , parkingArea , false ) ;
6113: LD_VAR 0 5
6117: PPUSH
6118: LD_INT 5
6120: PPUSH
6121: LD_INT 0
6123: PPUSH
6124: CALL_OW 49
// if i > tmp - 2 then
6128: LD_VAR 0 2
6132: PUSH
6133: LD_VAR 0 8
6137: PUSH
6138: LD_INT 2
6140: MINUS
6141: GREATER
6142: IFFALSE 6146
// continue ;
6144: GO 6009
// ComExitBuilding ( tmp [ i ] ) ;
6146: LD_VAR 0 8
6150: PUSH
6151: LD_VAR 0 2
6155: ARRAY
6156: PPUSH
6157: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , un ) ;
6161: LD_VAR 0 8
6165: PUSH
6166: LD_VAR 0 2
6170: ARRAY
6171: PPUSH
6172: LD_VAR 0 5
6176: PPUSH
6177: CALL_OW 180
// end ;
6181: GO 6009
6183: POP
6184: POP
// end ;
6185: LD_VAR 0 1
6189: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) do var i , filter , tmp , engs , enemy ;
6190: LD_INT 22
6192: PUSH
6193: LD_INT 3
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: PUSH
6200: LD_INT 25
6202: PUSH
6203: LD_INT 2
6205: PUSH
6206: EMPTY
6207: LIST
6208: LIST
6209: PUSH
6210: EMPTY
6211: LIST
6212: LIST
6213: PPUSH
6214: CALL_OW 69
6218: IFFALSE 6950
6220: GO 6222
6222: DISABLE
6223: LD_INT 0
6225: PPUSH
6226: PPUSH
6227: PPUSH
6228: PPUSH
6229: PPUSH
// begin enable ;
6230: ENABLE
// filter := FilterUnitsInArea ( baseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
6231: LD_ADDR_VAR 0 2
6235: PUSH
6236: LD_INT 6
6238: PPUSH
6239: LD_INT 3
6241: PUSH
6242: LD_INT 24
6244: PUSH
6245: LD_INT 1000
6247: PUSH
6248: EMPTY
6249: LIST
6250: LIST
6251: PUSH
6252: EMPTY
6253: LIST
6254: LIST
6255: PUSH
6256: LD_INT 21
6258: PUSH
6259: LD_INT 3
6261: PUSH
6262: EMPTY
6263: LIST
6264: LIST
6265: PUSH
6266: EMPTY
6267: LIST
6268: LIST
6269: PPUSH
6270: CALL_OW 70
6274: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
6275: LD_ADDR_VAR 0 4
6279: PUSH
6280: LD_INT 22
6282: PUSH
6283: LD_INT 3
6285: PUSH
6286: EMPTY
6287: LIST
6288: LIST
6289: PUSH
6290: LD_INT 25
6292: PUSH
6293: LD_INT 2
6295: PUSH
6296: EMPTY
6297: LIST
6298: LIST
6299: PUSH
6300: EMPTY
6301: LIST
6302: LIST
6303: PPUSH
6304: CALL_OW 69
6308: ST_TO_ADDR
// if not filter and not ru_rebuild_list then
6309: LD_VAR 0 2
6313: NOT
6314: PUSH
6315: LD_EXP 20
6319: NOT
6320: AND
6321: IFFALSE 6391
// begin for i in engs do
6323: LD_ADDR_VAR 0 1
6327: PUSH
6328: LD_VAR 0 4
6332: PUSH
6333: FOR_IN
6334: IFFALSE 6389
// if GetLives ( i ) = 1000 and not HasTask ( i ) and not IsInUnit ( i ) then
6336: LD_VAR 0 1
6340: PPUSH
6341: CALL_OW 256
6345: PUSH
6346: LD_INT 1000
6348: EQUAL
6349: PUSH
6350: LD_VAR 0 1
6354: PPUSH
6355: CALL_OW 314
6359: NOT
6360: AND
6361: PUSH
6362: LD_VAR 0 1
6366: PPUSH
6367: CALL_OW 310
6371: NOT
6372: AND
6373: IFFALSE 6387
// ComEnterUnit ( i , ru_dep_main ) ;
6375: LD_VAR 0 1
6379: PPUSH
6380: LD_INT 16
6382: PPUSH
6383: CALL_OW 120
6387: GO 6333
6389: POP
6390: POP
// end ; if UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) then
6391: LD_VAR 0 4
6395: PPUSH
6396: LD_INT 3
6398: PUSH
6399: LD_INT 24
6401: PUSH
6402: LD_INT 650
6404: PUSH
6405: EMPTY
6406: LIST
6407: LIST
6408: PUSH
6409: EMPTY
6410: LIST
6411: LIST
6412: PPUSH
6413: CALL_OW 72
6417: IFFALSE 6510
// begin tmp := UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) ;
6419: LD_ADDR_VAR 0 3
6423: PUSH
6424: LD_VAR 0 4
6428: PPUSH
6429: LD_INT 3
6431: PUSH
6432: LD_INT 24
6434: PUSH
6435: LD_INT 650
6437: PUSH
6438: EMPTY
6439: LIST
6440: LIST
6441: PUSH
6442: EMPTY
6443: LIST
6444: LIST
6445: PPUSH
6446: CALL_OW 72
6450: ST_TO_ADDR
// for i in tmp do
6451: LD_ADDR_VAR 0 1
6455: PUSH
6456: LD_VAR 0 3
6460: PUSH
6461: FOR_IN
6462: IFFALSE 6508
// if not IsInArea ( i , mainBaseArea ) then
6464: LD_VAR 0 1
6468: PPUSH
6469: LD_INT 14
6471: PPUSH
6472: CALL_OW 308
6476: NOT
6477: IFFALSE 6506
// begin ComMoveXY ( i , 129 , 125 ) ;
6479: LD_VAR 0 1
6483: PPUSH
6484: LD_INT 129
6486: PPUSH
6487: LD_INT 125
6489: PPUSH
6490: CALL_OW 111
// AddComWait ( i , 0 0$30 ) ;
6494: LD_VAR 0 1
6498: PPUSH
6499: LD_INT 1050
6501: PPUSH
6502: CALL_OW 202
// end ;
6506: GO 6461
6508: POP
6509: POP
// end ; engs := UnitFilter ( engs , [ f_lives , 650 ] ) ;
6510: LD_ADDR_VAR 0 4
6514: PUSH
6515: LD_VAR 0 4
6519: PPUSH
6520: LD_INT 24
6522: PUSH
6523: LD_INT 650
6525: PUSH
6526: EMPTY
6527: LIST
6528: LIST
6529: PPUSH
6530: CALL_OW 72
6534: ST_TO_ADDR
// if not engs then
6535: LD_VAR 0 4
6539: NOT
6540: IFFALSE 6544
// exit ;
6542: GO 6950
// if filter then
6544: LD_VAR 0 2
6548: IFFALSE 6807
// begin for i in engs do
6550: LD_ADDR_VAR 0 1
6554: PUSH
6555: LD_VAR 0 4
6559: PUSH
6560: FOR_IN
6561: IFFALSE 6585
// if IsInUnit ( i ) then
6563: LD_VAR 0 1
6567: PPUSH
6568: CALL_OW 310
6572: IFFALSE 6583
// ComExitBuilding ( i ) ;
6574: LD_VAR 0 1
6578: PPUSH
6579: CALL_OW 122
6583: GO 6560
6585: POP
6586: POP
// wait ( 3 ) ;
6587: LD_INT 3
6589: PPUSH
6590: CALL_OW 67
// if filter >= 2 and engs >= 2 then
6594: LD_VAR 0 2
6598: PUSH
6599: LD_INT 2
6601: GREATEREQUAL
6602: PUSH
6603: LD_VAR 0 4
6607: PUSH
6608: LD_INT 2
6610: GREATEREQUAL
6611: AND
6612: IFFALSE 6760
// begin for i = 1 to engs / 2 do
6614: LD_ADDR_VAR 0 1
6618: PUSH
6619: DOUBLE
6620: LD_INT 1
6622: DEC
6623: ST_TO_ADDR
6624: LD_VAR 0 4
6628: PUSH
6629: LD_INT 2
6631: DIVREAL
6632: PUSH
6633: FOR_TO
6634: IFFALSE 6680
// if not HasTask ( engs [ i ] ) then
6636: LD_VAR 0 4
6640: PUSH
6641: LD_VAR 0 1
6645: ARRAY
6646: PPUSH
6647: CALL_OW 314
6651: NOT
6652: IFFALSE 6678
// ComRepairBuilding ( engs [ i ] , filter [ 1 ] ) ;
6654: LD_VAR 0 4
6658: PUSH
6659: LD_VAR 0 1
6663: ARRAY
6664: PPUSH
6665: LD_VAR 0 2
6669: PUSH
6670: LD_INT 1
6672: ARRAY
6673: PPUSH
6674: CALL_OW 130
6678: GO 6633
6680: POP
6681: POP
// for i = engs / 2 + 1 to engs do
6682: LD_ADDR_VAR 0 1
6686: PUSH
6687: DOUBLE
6688: LD_VAR 0 4
6692: PUSH
6693: LD_INT 2
6695: DIVREAL
6696: PUSH
6697: LD_INT 1
6699: PLUS
6700: DEC
6701: ST_TO_ADDR
6702: LD_VAR 0 4
6706: PUSH
6707: FOR_TO
6708: IFFALSE 6756
// if not HasTask ( engs [ i ] ) then
6710: LD_VAR 0 4
6714: PUSH
6715: LD_VAR 0 1
6719: ARRAY
6720: PPUSH
6721: CALL_OW 314
6725: NOT
6726: IFFALSE 6754
// ComRepairBuilding ( engs [ i ] , filter [ filter ] ) ;
6728: LD_VAR 0 4
6732: PUSH
6733: LD_VAR 0 1
6737: ARRAY
6738: PPUSH
6739: LD_VAR 0 2
6743: PUSH
6744: LD_VAR 0 2
6748: ARRAY
6749: PPUSH
6750: CALL_OW 130
6754: GO 6707
6756: POP
6757: POP
// end else
6758: GO 6807
// for i in engs do
6760: LD_ADDR_VAR 0 1
6764: PUSH
6765: LD_VAR 0 4
6769: PUSH
6770: FOR_IN
6771: IFFALSE 6805
// if not HasTask ( i ) then
6773: LD_VAR 0 1
6777: PPUSH
6778: CALL_OW 314
6782: NOT
6783: IFFALSE 6803
// ComRepairBuilding ( i , filter [ 1 ] ) ;
6785: LD_VAR 0 1
6789: PPUSH
6790: LD_VAR 0 2
6794: PUSH
6795: LD_INT 1
6797: ARRAY
6798: PPUSH
6799: CALL_OW 130
6803: GO 6770
6805: POP
6806: POP
// end ; enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
6807: LD_ADDR_VAR 0 5
6811: PUSH
6812: LD_INT 81
6814: PUSH
6815: LD_INT 3
6817: PUSH
6818: EMPTY
6819: LIST
6820: LIST
6821: PPUSH
6822: CALL_OW 69
6826: ST_TO_ADDR
// if ru_rebuild_list and not filter then
6827: LD_EXP 20
6831: PUSH
6832: LD_VAR 0 2
6836: NOT
6837: AND
6838: IFFALSE 6950
// begin ComExitBuilding ( engs ) ;
6840: LD_VAR 0 4
6844: PPUSH
6845: CALL_OW 122
// if GetDistUnitXY ( NearestUnitToXY ( enemy , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) > 10 then
6849: LD_VAR 0 5
6853: PPUSH
6854: LD_EXP 20
6858: PUSH
6859: LD_INT 2
6861: ARRAY
6862: PPUSH
6863: LD_EXP 20
6867: PUSH
6868: LD_INT 3
6870: ARRAY
6871: PPUSH
6872: CALL_OW 73
6876: PPUSH
6877: LD_EXP 20
6881: PUSH
6882: LD_INT 2
6884: ARRAY
6885: PPUSH
6886: LD_EXP 20
6890: PUSH
6891: LD_INT 3
6893: ARRAY
6894: PPUSH
6895: CALL_OW 297
6899: PUSH
6900: LD_INT 10
6902: GREATER
6903: IFFALSE 6950
// ComBuild ( engs , ru_rebuild_list [ 1 ] , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] , ru_rebuild_list [ 4 ] ) ;
6905: LD_VAR 0 4
6909: PPUSH
6910: LD_EXP 20
6914: PUSH
6915: LD_INT 1
6917: ARRAY
6918: PPUSH
6919: LD_EXP 20
6923: PUSH
6924: LD_INT 2
6926: ARRAY
6927: PPUSH
6928: LD_EXP 20
6932: PUSH
6933: LD_INT 3
6935: ARRAY
6936: PPUSH
6937: LD_EXP 20
6941: PUSH
6942: LD_INT 4
6944: ARRAY
6945: PPUSH
6946: CALL_OW 145
// end ; end ;
6950: PPOPN 5
6952: END
// every 0 0$1 trigger GetLives ( ru_dep_main ) < 250 do var i , tmp ;
6953: LD_INT 16
6955: PPUSH
6956: CALL_OW 256
6960: PUSH
6961: LD_INT 250
6963: LESS
6964: IFFALSE 7154
6966: GO 6968
6968: DISABLE
6969: LD_INT 0
6971: PPUSH
6972: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
6973: LD_ADDR_VAR 0 2
6977: PUSH
6978: LD_INT 22
6980: PUSH
6981: LD_INT 3
6983: PUSH
6984: EMPTY
6985: LIST
6986: LIST
6987: PUSH
6988: LD_INT 2
6990: PUSH
6991: LD_INT 25
6993: PUSH
6994: LD_INT 1
6996: PUSH
6997: EMPTY
6998: LIST
6999: LIST
7000: PUSH
7001: LD_INT 25
7003: PUSH
7004: LD_INT 3
7006: PUSH
7007: EMPTY
7008: LIST
7009: LIST
7010: PUSH
7011: LD_INT 25
7013: PUSH
7014: LD_INT 4
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: LIST
7025: LIST
7026: PUSH
7027: EMPTY
7028: LIST
7029: LIST
7030: PPUSH
7031: CALL_OW 69
7035: ST_TO_ADDR
// ComExitBuilding ( tmp ) ;
7036: LD_VAR 0 2
7040: PPUSH
7041: CALL_OW 122
// wait ( 3 ) ;
7045: LD_INT 3
7047: PPUSH
7048: CALL_OW 67
// ComMoveXY ( tmp , 156 , 211 ) ;
7052: LD_VAR 0 2
7056: PPUSH
7057: LD_INT 156
7059: PPUSH
7060: LD_INT 211
7062: PPUSH
7063: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7067: LD_INT 35
7069: PPUSH
7070: CALL_OW 67
// for i in tmp do
7074: LD_ADDR_VAR 0 1
7078: PUSH
7079: LD_VAR 0 2
7083: PUSH
7084: FOR_IN
7085: IFFALSE 7145
// if IsInArea ( i , escapeArea ) then
7087: LD_VAR 0 1
7091: PPUSH
7092: LD_INT 15
7094: PPUSH
7095: CALL_OW 308
7099: IFFALSE 7128
// begin RemoveUnit ( i ) ;
7101: LD_VAR 0 1
7105: PPUSH
7106: CALL_OW 64
// tmp := tmp diff i ;
7110: LD_ADDR_VAR 0 2
7114: PUSH
7115: LD_VAR 0 2
7119: PUSH
7120: LD_VAR 0 1
7124: DIFF
7125: ST_TO_ADDR
// end else
7126: GO 7143
// ComMoveXY ( i , 156 , 211 ) ;
7128: LD_VAR 0 1
7132: PPUSH
7133: LD_INT 156
7135: PPUSH
7136: LD_INT 211
7138: PPUSH
7139: CALL_OW 111
7143: GO 7084
7145: POP
7146: POP
// until not tmp ;
7147: LD_VAR 0 2
7151: NOT
7152: IFFALSE 7067
// end ;
7154: PPOPN 2
7156: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do var i , tmp , doc ;
7157: LD_INT 22
7159: PUSH
7160: LD_INT 3
7162: PUSH
7163: EMPTY
7164: LIST
7165: LIST
7166: PUSH
7167: LD_INT 25
7169: PUSH
7170: LD_INT 4
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: PUSH
7177: EMPTY
7178: LIST
7179: LIST
7180: PPUSH
7181: CALL_OW 69
7185: IFFALSE 7439
7187: GO 7189
7189: DISABLE
7190: LD_INT 0
7192: PPUSH
7193: PPUSH
7194: PPUSH
// begin enable ;
7195: ENABLE
// tmp := FilterUnitsInArea ( mainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7196: LD_ADDR_VAR 0 2
7200: PUSH
7201: LD_INT 14
7203: PPUSH
7204: LD_INT 22
7206: PUSH
7207: LD_INT 3
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: PUSH
7214: LD_INT 21
7216: PUSH
7217: LD_INT 1
7219: PUSH
7220: EMPTY
7221: LIST
7222: LIST
7223: PUSH
7224: LD_INT 3
7226: PUSH
7227: LD_INT 24
7229: PUSH
7230: LD_INT 1000
7232: PUSH
7233: EMPTY
7234: LIST
7235: LIST
7236: PUSH
7237: EMPTY
7238: LIST
7239: LIST
7240: PUSH
7241: EMPTY
7242: LIST
7243: LIST
7244: LIST
7245: PPUSH
7246: CALL_OW 70
7250: ST_TO_ADDR
// doc := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
7251: LD_ADDR_VAR 0 3
7255: PUSH
7256: LD_INT 22
7258: PUSH
7259: LD_INT 3
7261: PUSH
7262: EMPTY
7263: LIST
7264: LIST
7265: PUSH
7266: LD_INT 25
7268: PUSH
7269: LD_INT 4
7271: PUSH
7272: EMPTY
7273: LIST
7274: LIST
7275: PUSH
7276: EMPTY
7277: LIST
7278: LIST
7279: PPUSH
7280: CALL_OW 69
7284: ST_TO_ADDR
// if not doc then
7285: LD_VAR 0 3
7289: NOT
7290: IFFALSE 7294
// exit ;
7292: GO 7439
// if not tmp then
7294: LD_VAR 0 2
7298: NOT
7299: IFFALSE 7390
// begin if not IsInUnit ( doc [ 1 ] ) then
7301: LD_VAR 0 3
7305: PUSH
7306: LD_INT 1
7308: ARRAY
7309: PPUSH
7310: CALL_OW 310
7314: NOT
7315: IFFALSE 7388
// ComEnterUnit ( doc , FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ) ;
7317: LD_VAR 0 3
7321: PPUSH
7322: LD_INT 22
7324: PUSH
7325: LD_INT 3
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: PUSH
7332: LD_INT 2
7334: PUSH
7335: LD_INT 30
7337: PUSH
7338: LD_INT 6
7340: PUSH
7341: EMPTY
7342: LIST
7343: LIST
7344: PUSH
7345: LD_INT 30
7347: PUSH
7348: LD_INT 7
7350: PUSH
7351: EMPTY
7352: LIST
7353: LIST
7354: PUSH
7355: LD_INT 30
7357: PUSH
7358: LD_INT 8
7360: PUSH
7361: EMPTY
7362: LIST
7363: LIST
7364: PUSH
7365: EMPTY
7366: LIST
7367: LIST
7368: LIST
7369: LIST
7370: PUSH
7371: EMPTY
7372: LIST
7373: LIST
7374: PPUSH
7375: CALL_OW 69
7379: PUSH
7380: LD_INT 1
7382: ARRAY
7383: PPUSH
7384: CALL_OW 120
// exit ;
7388: GO 7439
// end ; if IsInUnit ( doc [ 1 ] ) then
7390: LD_VAR 0 3
7394: PUSH
7395: LD_INT 1
7397: ARRAY
7398: PPUSH
7399: CALL_OW 310
7403: IFFALSE 7414
// ComExitBuilding ( doc ) ;
7405: LD_VAR 0 3
7409: PPUSH
7410: CALL_OW 122
// wait ( 3 ) ;
7414: LD_INT 3
7416: PPUSH
7417: CALL_OW 67
// ComHeal ( doc , tmp [ 1 ] ) ;
7421: LD_VAR 0 3
7425: PPUSH
7426: LD_VAR 0 2
7430: PUSH
7431: LD_INT 1
7433: ARRAY
7434: PPUSH
7435: CALL_OW 128
// end ;
7439: PPOPN 3
7441: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do var i , tmp , attacking , areas , area , mech ;
7442: LD_INT 22
7444: PUSH
7445: LD_INT 3
7447: PUSH
7448: EMPTY
7449: LIST
7450: LIST
7451: PUSH
7452: LD_INT 25
7454: PUSH
7455: LD_INT 3
7457: PUSH
7458: EMPTY
7459: LIST
7460: LIST
7461: PUSH
7462: EMPTY
7463: LIST
7464: LIST
7465: PPUSH
7466: CALL_OW 69
7470: PUSH
7471: LD_INT 22
7473: PUSH
7474: LD_INT 3
7476: PUSH
7477: EMPTY
7478: LIST
7479: LIST
7480: PUSH
7481: LD_INT 21
7483: PUSH
7484: LD_INT 2
7486: PUSH
7487: EMPTY
7488: LIST
7489: LIST
7490: PUSH
7491: EMPTY
7492: LIST
7493: LIST
7494: PPUSH
7495: CALL_OW 69
7499: AND
7500: IFFALSE 8259
7502: GO 7504
7504: DISABLE
7505: LD_INT 0
7507: PPUSH
7508: PPUSH
7509: PPUSH
7510: PPUSH
7511: PPUSH
7512: PPUSH
// begin enable ;
7513: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
7514: LD_ADDR_VAR 0 2
7518: PUSH
7519: LD_INT 22
7521: PUSH
7522: LD_INT 3
7524: PUSH
7525: EMPTY
7526: LIST
7527: LIST
7528: PUSH
7529: LD_INT 21
7531: PUSH
7532: LD_INT 2
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: PUSH
7539: LD_INT 3
7541: PUSH
7542: LD_INT 58
7544: PUSH
7545: EMPTY
7546: LIST
7547: PUSH
7548: EMPTY
7549: LIST
7550: LIST
7551: PUSH
7552: EMPTY
7553: LIST
7554: LIST
7555: LIST
7556: PPUSH
7557: CALL_OW 69
7561: ST_TO_ADDR
// areas := [ sectorAlpha , sectorBeta , sectorDelta , mainBaseArea ] ;
7562: LD_ADDR_VAR 0 4
7566: PUSH
7567: LD_INT 10
7569: PUSH
7570: LD_INT 11
7572: PUSH
7573: LD_INT 12
7575: PUSH
7576: LD_INT 14
7578: PUSH
7579: EMPTY
7580: LIST
7581: LIST
7582: LIST
7583: LIST
7584: ST_TO_ADDR
// area := 0 ;
7585: LD_ADDR_VAR 0 5
7589: PUSH
7590: LD_INT 0
7592: ST_TO_ADDR
// attacking := false ;
7593: LD_ADDR_VAR 0 3
7597: PUSH
7598: LD_INT 0
7600: ST_TO_ADDR
// for i in tmp do
7601: LD_ADDR_VAR 0 1
7605: PUSH
7606: LD_VAR 0 2
7610: PUSH
7611: FOR_IN
7612: IFFALSE 8040
// begin if GetDistUnits ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) < 10 and not HasTask ( i ) and not GetTag ( i ) and GetLives ( i ) > 650 then
7614: LD_VAR 0 1
7618: PPUSH
7619: LD_INT 22
7621: PUSH
7622: LD_INT 1
7624: PUSH
7625: EMPTY
7626: LIST
7627: LIST
7628: PPUSH
7629: CALL_OW 69
7633: PPUSH
7634: LD_VAR 0 1
7638: PPUSH
7639: CALL_OW 74
7643: PPUSH
7644: CALL_OW 296
7648: PUSH
7649: LD_INT 10
7651: LESS
7652: PUSH
7653: LD_VAR 0 1
7657: PPUSH
7658: CALL_OW 314
7662: NOT
7663: AND
7664: PUSH
7665: LD_VAR 0 1
7669: PPUSH
7670: CALL_OW 110
7674: NOT
7675: AND
7676: PUSH
7677: LD_VAR 0 1
7681: PPUSH
7682: CALL_OW 256
7686: PUSH
7687: LD_INT 650
7689: GREATER
7690: AND
7691: IFFALSE 7735
// begin ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
7693: LD_VAR 0 1
7697: PPUSH
7698: LD_INT 22
7700: PUSH
7701: LD_INT 1
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: PPUSH
7708: CALL_OW 69
7712: PPUSH
7713: LD_VAR 0 1
7717: PPUSH
7718: CALL_OW 74
7722: PPUSH
7723: CALL_OW 115
// attacking := true ;
7727: LD_ADDR_VAR 0 3
7731: PUSH
7732: LD_INT 1
7734: ST_TO_ADDR
// end ; if not GetTag ( i ) and GetLives ( i ) < 650 and GetType ( i ) = unit_vehicle then
7735: LD_VAR 0 1
7739: PPUSH
7740: CALL_OW 110
7744: NOT
7745: PUSH
7746: LD_VAR 0 1
7750: PPUSH
7751: CALL_OW 256
7755: PUSH
7756: LD_INT 650
7758: LESS
7759: AND
7760: PUSH
7761: LD_VAR 0 1
7765: PPUSH
7766: CALL_OW 247
7770: PUSH
7771: LD_INT 2
7773: EQUAL
7774: AND
7775: IFFALSE 7804
// begin SetTag ( i , 1 ) ;
7777: LD_VAR 0 1
7781: PPUSH
7782: LD_INT 1
7784: PPUSH
7785: CALL_OW 109
// ComMoveXY ( i , 130 , 139 ) ;
7789: LD_VAR 0 1
7793: PPUSH
7794: LD_INT 130
7796: PPUSH
7797: LD_INT 139
7799: PPUSH
7800: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 130 , 139 ) < 6 then
7804: LD_VAR 0 1
7808: PPUSH
7809: CALL_OW 110
7813: PUSH
7814: LD_INT 1
7816: EQUAL
7817: PUSH
7818: LD_VAR 0 1
7822: PPUSH
7823: LD_INT 130
7825: PPUSH
7826: LD_INT 139
7828: PPUSH
7829: CALL_OW 297
7833: PUSH
7834: LD_INT 6
7836: LESS
7837: AND
7838: IFFALSE 7852
// SetTag ( i , 2 ) ;
7840: LD_VAR 0 1
7844: PPUSH
7845: LD_INT 2
7847: PPUSH
7848: CALL_OW 109
// if GetTag ( i ) = 2 then
7852: LD_VAR 0 1
7856: PPUSH
7857: CALL_OW 110
7861: PUSH
7862: LD_INT 2
7864: EQUAL
7865: IFFALSE 8000
// begin if GetLives ( i ) = 1000 then
7867: LD_VAR 0 1
7871: PPUSH
7872: CALL_OW 256
7876: PUSH
7877: LD_INT 1000
7879: EQUAL
7880: IFFALSE 7896
// SetTag ( i , 3 ) else
7882: LD_VAR 0 1
7886: PPUSH
7887: LD_INT 3
7889: PPUSH
7890: CALL_OW 109
7894: GO 8000
// if IsDrivenBy ( i ) then
7896: LD_VAR 0 1
7900: PPUSH
7901: CALL_OW 311
7905: IFFALSE 8000
// begin mech := IsDrivenBy ( i ) ;
7907: LD_ADDR_VAR 0 6
7911: PUSH
7912: LD_VAR 0 1
7916: PPUSH
7917: CALL_OW 311
7921: ST_TO_ADDR
// if not See ( 1 , mech ) and GetLives ( mech ) < 1000 then
7922: LD_INT 1
7924: PPUSH
7925: LD_VAR 0 6
7929: PPUSH
7930: CALL_OW 292
7934: NOT
7935: PUSH
7936: LD_VAR 0 6
7940: PPUSH
7941: CALL_OW 256
7945: PUSH
7946: LD_INT 1000
7948: LESS
7949: AND
7950: IFFALSE 7964
// SetLives ( mech , 1000 ) ;
7952: LD_VAR 0 6
7956: PPUSH
7957: LD_INT 1000
7959: PPUSH
7960: CALL_OW 234
// if not See ( 1 , i ) then
7964: LD_INT 1
7966: PPUSH
7967: LD_VAR 0 1
7971: PPUSH
7972: CALL_OW 292
7976: NOT
7977: IFFALSE 7991
// SetFuel ( i , 100 ) ;
7979: LD_VAR 0 1
7983: PPUSH
7984: LD_INT 100
7986: PPUSH
7987: CALL_OW 240
// ComRepairVehicleAndReturn ( mech ) ;
7991: LD_VAR 0 6
7995: PPUSH
7996: CALL 71366 0 1
// end ; end ; if GetTag ( i ) = 3 and IsDrivenBy ( i ) then
8000: LD_VAR 0 1
8004: PPUSH
8005: CALL_OW 110
8009: PUSH
8010: LD_INT 3
8012: EQUAL
8013: PUSH
8014: LD_VAR 0 1
8018: PPUSH
8019: CALL_OW 311
8023: AND
8024: IFFALSE 8038
// SetTag ( i , 0 ) ;
8026: LD_VAR 0 1
8030: PPUSH
8031: LD_INT 0
8033: PPUSH
8034: CALL_OW 109
// end ;
8038: GO 7611
8040: POP
8041: POP
// if attacking then
8042: LD_VAR 0 3
8046: IFFALSE 8050
// exit ;
8048: GO 8259
// if can_end and tmp then
8050: LD_EXP 6
8054: PUSH
8055: LD_VAR 0 2
8059: AND
8060: IFFALSE 8115
// begin for i in tmp do
8062: LD_ADDR_VAR 0 1
8066: PUSH
8067: LD_VAR 0 2
8071: PUSH
8072: FOR_IN
8073: IFFALSE 8111
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
8075: LD_VAR 0 1
8079: PPUSH
8080: LD_INT 22
8082: PUSH
8083: LD_INT 1
8085: PUSH
8086: EMPTY
8087: LIST
8088: LIST
8089: PPUSH
8090: CALL_OW 69
8094: PPUSH
8095: LD_VAR 0 1
8099: PPUSH
8100: CALL_OW 74
8104: PPUSH
8105: CALL_OW 115
8109: GO 8072
8111: POP
8112: POP
// exit ;
8113: GO 8259
// end ; for i in areas do
8115: LD_ADDR_VAR 0 1
8119: PUSH
8120: LD_VAR 0 4
8124: PUSH
8125: FOR_IN
8126: IFFALSE 8163
// if FilterUnitsInArea ( i , [ f_side , 1 ] ) then
8128: LD_VAR 0 1
8132: PPUSH
8133: LD_INT 22
8135: PUSH
8136: LD_INT 1
8138: PUSH
8139: EMPTY
8140: LIST
8141: LIST
8142: PPUSH
8143: CALL_OW 70
8147: IFFALSE 8161
// begin area := i ;
8149: LD_ADDR_VAR 0 5
8153: PUSH
8154: LD_VAR 0 1
8158: ST_TO_ADDR
// break ;
8159: GO 8163
// end ;
8161: GO 8125
8163: POP
8164: POP
// if area then
8165: LD_VAR 0 5
8169: IFFALSE 8259
// begin for i in tmp do
8171: LD_ADDR_VAR 0 1
8175: PUSH
8176: LD_VAR 0 2
8180: PUSH
8181: FOR_IN
8182: IFFALSE 8257
// begin if GetTag ( i ) then
8184: LD_VAR 0 1
8188: PPUSH
8189: CALL_OW 110
8193: IFFALSE 8197
// continue ;
8195: GO 8181
// if GetFuel ( i ) < 33 then
8197: LD_VAR 0 1
8201: PPUSH
8202: CALL_OW 261
8206: PUSH
8207: LD_INT 33
8209: LESS
8210: IFFALSE 8224
// SetFuel ( i , 33 ) ;
8212: LD_VAR 0 1
8216: PPUSH
8217: LD_INT 33
8219: PPUSH
8220: CALL_OW 240
// if not IsInArea ( i , area ) then
8224: LD_VAR 0 1
8228: PPUSH
8229: LD_VAR 0 5
8233: PPUSH
8234: CALL_OW 308
8238: NOT
8239: IFFALSE 8255
// ComMoveToArea ( i , area ) ;
8241: LD_VAR 0 1
8245: PPUSH
8246: LD_VAR 0 5
8250: PPUSH
8251: CALL_OW 113
// end ;
8255: GO 8181
8257: POP
8258: POP
// end ; end ;
8259: PPOPN 6
8261: END
// every 15 15$00 trigger Difficulty > 1 do var i , j , un , veh , time , count ;
8262: LD_OWVAR 67
8266: PUSH
8267: LD_INT 1
8269: GREATER
8270: IFFALSE 8559
8272: GO 8274
8274: DISABLE
8275: LD_INT 0
8277: PPUSH
8278: PPUSH
8279: PPUSH
8280: PPUSH
8281: PPUSH
8282: PPUSH
// begin uc_side := 3 ;
8283: LD_ADDR_OWVAR 20
8287: PUSH
8288: LD_INT 3
8290: ST_TO_ADDR
// uc_nation := 3 ;
8291: LD_ADDR_OWVAR 21
8295: PUSH
8296: LD_INT 3
8298: ST_TO_ADDR
// time := [ 9 9$00 , 7 7$00 , 6 6$00 , 5 5$30 ] [ Difficulty ] ;
8299: LD_ADDR_VAR 0 5
8303: PUSH
8304: LD_INT 18900
8306: PUSH
8307: LD_INT 14700
8309: PUSH
8310: LD_INT 12600
8312: PUSH
8313: LD_INT 11550
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: LIST
8320: LIST
8321: PUSH
8322: LD_OWVAR 67
8326: ARRAY
8327: ST_TO_ADDR
// count := [ 2 , 2 , 3 , 3 ] [ Difficulty ] ;
8328: LD_ADDR_VAR 0 6
8332: PUSH
8333: LD_INT 2
8335: PUSH
8336: LD_INT 2
8338: PUSH
8339: LD_INT 3
8341: PUSH
8342: LD_INT 3
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: LIST
8349: LIST
8350: PUSH
8351: LD_OWVAR 67
8355: ARRAY
8356: ST_TO_ADDR
// for i = 1 to count do
8357: LD_ADDR_VAR 0 1
8361: PUSH
8362: DOUBLE
8363: LD_INT 1
8365: DEC
8366: ST_TO_ADDR
8367: LD_VAR 0 6
8371: PUSH
8372: FOR_TO
8373: IFFALSE 8557
// begin wait ( time ) ;
8375: LD_VAR 0 5
8379: PPUSH
8380: CALL_OW 67
// for j = 1 to rand ( 1 , Difficulty ) do
8384: LD_ADDR_VAR 0 2
8388: PUSH
8389: DOUBLE
8390: LD_INT 1
8392: DEC
8393: ST_TO_ADDR
8394: LD_INT 1
8396: PPUSH
8397: LD_OWVAR 67
8401: PPUSH
8402: CALL_OW 12
8406: PUSH
8407: FOR_TO
8408: IFFALSE 8553
// begin veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 80 ) ;
8410: LD_ADDR_VAR 0 4
8414: PUSH
8415: LD_INT 3
8417: PPUSH
8418: LD_INT 3
8420: PPUSH
8421: LD_INT 22
8423: PPUSH
8424: LD_INT 1
8426: PPUSH
8427: LD_INT 1
8429: PPUSH
8430: LD_INT 43
8432: PUSH
8433: LD_INT 44
8435: PUSH
8436: LD_INT 42
8438: PUSH
8439: EMPTY
8440: LIST
8441: LIST
8442: LIST
8443: PUSH
8444: LD_VAR 0 1
8448: PUSH
8449: LD_INT 3
8451: MOD
8452: PUSH
8453: LD_INT 1
8455: PLUS
8456: ARRAY
8457: PPUSH
8458: LD_INT 80
8460: PPUSH
8461: CALL 520 0 7
8465: ST_TO_ADDR
// PlaceUnitArea ( veh , southArea , false ) ;
8466: LD_VAR 0 4
8470: PPUSH
8471: LD_INT 13
8473: PPUSH
8474: LD_INT 0
8476: PPUSH
8477: CALL_OW 49
// PrepareHuman ( false , 3 , [ 4 , 5 , 5 , 7 ] [ Difficulty ] ) ;
8481: LD_INT 0
8483: PPUSH
8484: LD_INT 3
8486: PPUSH
8487: LD_INT 4
8489: PUSH
8490: LD_INT 5
8492: PUSH
8493: LD_INT 5
8495: PUSH
8496: LD_INT 7
8498: PUSH
8499: EMPTY
8500: LIST
8501: LIST
8502: LIST
8503: LIST
8504: PUSH
8505: LD_OWVAR 67
8509: ARRAY
8510: PPUSH
8511: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
8515: CALL_OW 44
8519: PPUSH
8520: LD_VAR 0 4
8524: PPUSH
8525: CALL_OW 52
// wait ( 0 0$01 ) ;
8529: LD_INT 35
8531: PPUSH
8532: CALL_OW 67
// ComMoveXY ( veh , 143 , 143 ) ;
8536: LD_VAR 0 4
8540: PPUSH
8541: LD_INT 143
8543: PPUSH
8544: LD_INT 143
8546: PPUSH
8547: CALL_OW 111
// end ;
8551: GO 8407
8553: POP
8554: POP
// end ;
8555: GO 8372
8557: POP
8558: POP
// end ;
8559: PPOPN 6
8561: END
// every 8 8$00 do var i , un , time ;
8562: GO 8564
8564: DISABLE
8565: LD_INT 0
8567: PPUSH
8568: PPUSH
8569: PPUSH
// begin time := [ 3 3$00 , 1 1$00 , 0 0$30 ] ;
8570: LD_ADDR_VAR 0 3
8574: PUSH
8575: LD_INT 6300
8577: PUSH
8578: LD_INT 2100
8580: PUSH
8581: LD_INT 1050
8583: PUSH
8584: EMPTY
8585: LIST
8586: LIST
8587: LIST
8588: ST_TO_ADDR
// wait ( time ) ;
8589: LD_VAR 0 3
8593: PPUSH
8594: CALL_OW 67
// uc_side := 3 ;
8598: LD_ADDR_OWVAR 20
8602: PUSH
8603: LD_INT 3
8605: ST_TO_ADDR
// uc_nation := 3 ;
8606: LD_ADDR_OWVAR 21
8610: PUSH
8611: LD_INT 3
8613: ST_TO_ADDR
// for i = 1 to 2 do
8614: LD_ADDR_VAR 0 1
8618: PUSH
8619: DOUBLE
8620: LD_INT 1
8622: DEC
8623: ST_TO_ADDR
8624: LD_INT 2
8626: PUSH
8627: FOR_TO
8628: IFFALSE 8691
// begin PrepareHuman ( false , 1 , 4 ) ;
8630: LD_INT 0
8632: PPUSH
8633: LD_INT 1
8635: PPUSH
8636: LD_INT 4
8638: PPUSH
8639: CALL_OW 380
// un := CreateHuman ;
8643: LD_ADDR_VAR 0 2
8647: PUSH
8648: CALL_OW 44
8652: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_dep_main ) ;
8653: LD_VAR 0 2
8657: PPUSH
8658: LD_INT 16
8660: PPUSH
8661: CALL_OW 52
// ComExitBuilding ( un ) ;
8665: LD_VAR 0 2
8669: PPUSH
8670: CALL_OW 122
// AddComAgressiveMove ( un , 41 , 76 ) ;
8674: LD_VAR 0 2
8678: PPUSH
8679: LD_INT 41
8681: PPUSH
8682: LD_INT 76
8684: PPUSH
8685: CALL_OW 174
// end ;
8689: GO 8627
8691: POP
8692: POP
// end ; end_of_file
8693: PPOPN 3
8695: END
// export function Action ; begin
8696: LD_INT 0
8698: PPUSH
// CenterNowOnXY ( 28 , 3 ) ;
8699: LD_INT 28
8701: PPUSH
8702: LD_INT 3
8704: PPUSH
8705: CALL_OW 86
// PlaceSeeing ( 41 , 76 , 1 , 10 ) ;
8709: LD_INT 41
8711: PPUSH
8712: LD_INT 76
8714: PPUSH
8715: LD_INT 1
8717: PPUSH
8718: LD_INT 10
8720: PPUSH
8721: CALL_OW 330
// RemoveSeeing ( 41 , 76 , 1 ) ;
8725: LD_INT 41
8727: PPUSH
8728: LD_INT 76
8730: PPUSH
8731: LD_INT 1
8733: PPUSH
8734: CALL_OW 331
// InGameOn ;
8738: CALL_OW 8
// SayRadio ( Harisson , D2-Har-1 ) ;
8742: LD_EXP 19
8746: PPUSH
8747: LD_STRING D2-Har-1
8749: PPUSH
8750: CALL_OW 94
// InGameOff ;
8754: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
8758: LD_STRING M1
8760: PPUSH
8761: CALL_OW 337
// end ;
8765: LD_VAR 0 1
8769: RET
// every 0 0$1 trigger buildings_counter > 1 do var un ;
8770: LD_EXP 4
8774: PUSH
8775: LD_INT 1
8777: GREATER
8778: IFFALSE 8869
8780: GO 8782
8782: DISABLE
8783: LD_INT 0
8785: PPUSH
// begin un := GetRandom ( sex_male ) [ 1 ] ;
8786: LD_ADDR_VAR 0 1
8790: PUSH
8791: LD_INT 1
8793: PPUSH
8794: CALL 608 0 1
8798: PUSH
8799: LD_INT 1
8801: ARRAY
8802: ST_TO_ADDR
// Say ( un , D2a-Sol1-1 ) ;
8803: LD_VAR 0 1
8807: PPUSH
8808: LD_STRING D2a-Sol1-1
8810: PPUSH
8811: CALL_OW 88
// if not un then
8815: LD_VAR 0 1
8819: NOT
8820: IFFALSE 8851
// begin un := GetRandom ( sex_female ) [ 1 ] ;
8822: LD_ADDR_VAR 0 1
8826: PUSH
8827: LD_INT 2
8829: PPUSH
8830: CALL 608 0 1
8834: PUSH
8835: LD_INT 1
8837: ARRAY
8838: ST_TO_ADDR
// Say ( un , D2a-FSol1-1 ) ;
8839: LD_VAR 0 1
8843: PPUSH
8844: LD_STRING D2a-FSol1-1
8846: PPUSH
8847: CALL_OW 88
// end ; if Khatam then
8851: LD_EXP 17
8855: IFFALSE 8869
// Say ( Khatam , D3b-Khat-3 ) ;
8857: LD_EXP 17
8861: PPUSH
8862: LD_STRING D3b-Khat-3
8864: PPUSH
8865: CALL_OW 88
// end ;
8869: PPOPN 1
8871: END
// every 0 0$1 trigger Frank and not Kikuchi and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Frank , 7 ] ] ) and IsOk ( Frank ) and not InBattle ( 1 ) and not InBattle ( 4 ) do var i , ape ;
8872: LD_EXP 15
8876: PUSH
8877: LD_EXP 18
8881: NOT
8882: AND
8883: PUSH
8884: LD_INT 22
8886: PUSH
8887: LD_INT 1
8889: PUSH
8890: EMPTY
8891: LIST
8892: LIST
8893: PUSH
8894: LD_INT 91
8896: PUSH
8897: LD_EXP 15
8901: PUSH
8902: LD_INT 7
8904: PUSH
8905: EMPTY
8906: LIST
8907: LIST
8908: LIST
8909: PUSH
8910: EMPTY
8911: LIST
8912: LIST
8913: PPUSH
8914: CALL_OW 69
8918: AND
8919: PUSH
8920: LD_EXP 15
8924: PPUSH
8925: CALL_OW 302
8929: AND
8930: PUSH
8931: LD_INT 1
8933: PPUSH
8934: CALL_OW 463
8938: NOT
8939: AND
8940: PUSH
8941: LD_INT 4
8943: PPUSH
8944: CALL_OW 463
8948: NOT
8949: AND
8950: IFFALSE 9537
8952: GO 8954
8954: DISABLE
8955: LD_INT 0
8957: PPUSH
8958: PPUSH
// begin InGameOn ;
8959: CALL_OW 8
// ape := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
8963: LD_ADDR_VAR 0 2
8967: PUSH
8968: LD_INT 22
8970: PUSH
8971: LD_INT 0
8973: PUSH
8974: EMPTY
8975: LIST
8976: LIST
8977: PUSH
8978: LD_INT 25
8980: PUSH
8981: LD_INT 12
8983: PUSH
8984: EMPTY
8985: LIST
8986: LIST
8987: PUSH
8988: EMPTY
8989: LIST
8990: LIST
8991: PPUSH
8992: CALL_OW 69
8996: ST_TO_ADDR
// ape := NearestUnitToUnit ( ape , Frank ) ;
8997: LD_ADDR_VAR 0 2
9001: PUSH
9002: LD_VAR 0 2
9006: PPUSH
9007: LD_EXP 15
9011: PPUSH
9012: CALL_OW 74
9016: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , Frank , 20 ] ] ) do
9017: LD_ADDR_VAR 0 1
9021: PUSH
9022: LD_INT 22
9024: PUSH
9025: LD_INT 1
9027: PUSH
9028: EMPTY
9029: LIST
9030: LIST
9031: PUSH
9032: LD_INT 21
9034: PUSH
9035: LD_INT 1
9037: PUSH
9038: EMPTY
9039: LIST
9040: LIST
9041: PUSH
9042: LD_INT 91
9044: PUSH
9045: LD_EXP 15
9049: PUSH
9050: LD_INT 20
9052: PUSH
9053: EMPTY
9054: LIST
9055: LIST
9056: LIST
9057: PUSH
9058: EMPTY
9059: LIST
9060: LIST
9061: LIST
9062: PPUSH
9063: CALL_OW 69
9067: PUSH
9068: FOR_IN
9069: IFFALSE 9087
// ComTurnUnit ( i , Frank ) ;
9071: LD_VAR 0 1
9075: PPUSH
9076: LD_EXP 15
9080: PPUSH
9081: CALL_OW 119
9085: GO 9068
9087: POP
9088: POP
// SetSide ( Frank , 1 ) ;
9089: LD_EXP 15
9093: PPUSH
9094: LD_INT 1
9096: PPUSH
9097: CALL_OW 235
// ComMoveUnit ( JMM , Frank ) ;
9101: LD_EXP 9
9105: PPUSH
9106: LD_EXP 15
9110: PPUSH
9111: CALL_OW 112
// AddComTurnUnit ( JMM , Frank ) ;
9115: LD_EXP 9
9119: PPUSH
9120: LD_EXP 15
9124: PPUSH
9125: CALL_OW 179
// CenterOnUnits ( Frank ) ;
9129: LD_EXP 15
9133: PPUSH
9134: CALL_OW 85
// Say ( Frank , D3a-Frank-1 ) ;
9138: LD_EXP 15
9142: PPUSH
9143: LD_STRING D3a-Frank-1
9145: PPUSH
9146: CALL_OW 88
// ComMoveXY ( ape , 42 , 78 ) ;
9150: LD_VAR 0 2
9154: PPUSH
9155: LD_INT 42
9157: PPUSH
9158: LD_INT 78
9160: PPUSH
9161: CALL_OW 111
// AddComTurnUnit ( ape , Frank ) ;
9165: LD_VAR 0 2
9169: PPUSH
9170: LD_EXP 15
9174: PPUSH
9175: CALL_OW 179
// if Lisa then
9179: LD_EXP 14
9183: IFFALSE 9197
// Say ( Lisa , D3a-Lisa-1 ) ;
9185: LD_EXP 14
9189: PPUSH
9190: LD_STRING D3a-Lisa-1
9192: PPUSH
9193: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
9197: LD_EXP 9
9201: PPUSH
9202: LD_STRING D3a-JMM-1
9204: PPUSH
9205: CALL_OW 88
// if Cyrus then
9209: LD_EXP 13
9213: IFFALSE 9227
// Say ( Cyrus , D3a-Cyrus-1 ) ;
9215: LD_EXP 13
9219: PPUSH
9220: LD_STRING D3a-Cyrus-1
9222: PPUSH
9223: CALL_OW 88
// if GetRandom ( sex_male ) then
9227: LD_INT 1
9229: PPUSH
9230: CALL 608 0 1
9234: IFFALSE 9255
// Say ( GetRandom ( sex_male ) [ 1 ] , D3a-Sol1-1 ) ;
9236: LD_INT 1
9238: PPUSH
9239: CALL 608 0 1
9243: PUSH
9244: LD_INT 1
9246: ARRAY
9247: PPUSH
9248: LD_STRING D3a-Sol1-1
9250: PPUSH
9251: CALL_OW 88
// if GetRandom ( sex_female ) then
9255: LD_INT 2
9257: PPUSH
9258: CALL 608 0 1
9262: IFFALSE 9283
// Say ( GetRandom ( sex_female ) [ 1 ] , D3a-FSol1-1 ) ;
9264: LD_INT 2
9266: PPUSH
9267: CALL 608 0 1
9271: PUSH
9272: LD_INT 1
9274: ARRAY
9275: PPUSH
9276: LD_STRING D3a-FSol1-1
9278: PPUSH
9279: CALL_OW 88
// if Gladstone then
9283: LD_EXP 16
9287: IFFALSE 9301
// Say ( Gladstone , D3a-Glad-1 ) ;
9289: LD_EXP 16
9293: PPUSH
9294: LD_STRING D3a-Glad-1
9296: PPUSH
9297: CALL_OW 88
// ComMoveXY ( ape , 60 , 113 ) ;
9301: LD_VAR 0 2
9305: PPUSH
9306: LD_INT 60
9308: PPUSH
9309: LD_INT 113
9311: PPUSH
9312: CALL_OW 111
// Say ( Frank , D3a-Frank-2 ) ;
9316: LD_EXP 15
9320: PPUSH
9321: LD_STRING D3a-Frank-2
9323: PPUSH
9324: CALL_OW 88
// ComTurnUnit ( Frank , JMM ) ;
9328: LD_EXP 15
9332: PPUSH
9333: LD_EXP 9
9337: PPUSH
9338: CALL_OW 119
// Say ( JMM , D3a-JMM-2 ) ;
9342: LD_EXP 9
9346: PPUSH
9347: LD_STRING D3a-JMM-2
9349: PPUSH
9350: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9354: LD_INT 1
9356: PPUSH
9357: LD_INT 4
9359: PPUSH
9360: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9364: LD_INT 85
9366: PPUSH
9367: LD_INT 134
9369: PPUSH
9370: CALL_OW 84
// Say ( Frank , D3a-Frank-3 ) ;
9374: LD_EXP 15
9378: PPUSH
9379: LD_STRING D3a-Frank-3
9381: PPUSH
9382: CALL_OW 88
// Wait ( 0 0$01 ) ;
9386: LD_INT 35
9388: PPUSH
9389: CALL_OW 67
// CenterOnXY ( 166 , 136 ) ;
9393: LD_INT 166
9395: PPUSH
9396: LD_INT 136
9398: PPUSH
9399: CALL_OW 84
// Say ( JMM , D3a-JMM-3 ) ;
9403: LD_EXP 9
9407: PPUSH
9408: LD_STRING D3a-JMM-3
9410: PPUSH
9411: CALL_OW 88
// Wait ( 0 0$01 ) ;
9415: LD_INT 35
9417: PPUSH
9418: CALL_OW 67
// CenterNowOnUnits ( Frank ) ;
9422: LD_EXP 15
9426: PPUSH
9427: CALL_OW 87
// Say ( Frank , D3a-Frank-4 ) ;
9431: LD_EXP 15
9435: PPUSH
9436: LD_STRING D3a-Frank-4
9438: PPUSH
9439: CALL_OW 88
// if Lisa then
9443: LD_EXP 14
9447: IFFALSE 9461
// Say ( Lisa , D3a-Lisa-4 ) ;
9449: LD_EXP 14
9453: PPUSH
9454: LD_STRING D3a-Lisa-4
9456: PPUSH
9457: CALL_OW 88
// Say ( JMM , D3a-JMM-4 ) ;
9461: LD_EXP 9
9465: PPUSH
9466: LD_STRING D3a-JMM-4
9468: PPUSH
9469: CALL_OW 88
// Say ( Frank , D3a-Frank-5 ) ;
9473: LD_EXP 15
9477: PPUSH
9478: LD_STRING D3a-Frank-5
9480: PPUSH
9481: CALL_OW 88
// Say ( JMM , D3a-JMM-5 ) ;
9485: LD_EXP 9
9489: PPUSH
9490: LD_STRING D3a-JMM-5
9492: PPUSH
9493: CALL_OW 88
// Say ( Frank , D3a-Frank-6 ) ;
9497: LD_EXP 15
9501: PPUSH
9502: LD_STRING D3a-Frank-6
9504: PPUSH
9505: CALL_OW 88
// Say ( JMM , D3a-JMM-6 ) ;
9509: LD_EXP 9
9513: PPUSH
9514: LD_STRING D3a-JMM-6
9516: PPUSH
9517: CALL_OW 88
// Say ( Frank , D3a-Frank-7 ) ;
9521: LD_EXP 15
9525: PPUSH
9526: LD_STRING D3a-Frank-7
9528: PPUSH
9529: CALL_OW 88
// InGameOff ;
9533: CALL_OW 9
// end ;
9537: PPOPN 2
9539: END
// every 0 0$1 trigger Kikuchi and not Frank and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Kikuchi , 7 ] ] ) and IsOk ( Kikuchi ) and not InBattle ( 1 ) and not InBattle ( 4 ) do
9540: LD_EXP 18
9544: PUSH
9545: LD_EXP 15
9549: NOT
9550: AND
9551: PUSH
9552: LD_INT 22
9554: PUSH
9555: LD_INT 1
9557: PUSH
9558: EMPTY
9559: LIST
9560: LIST
9561: PUSH
9562: LD_INT 91
9564: PUSH
9565: LD_EXP 18
9569: PUSH
9570: LD_INT 7
9572: PUSH
9573: EMPTY
9574: LIST
9575: LIST
9576: LIST
9577: PUSH
9578: EMPTY
9579: LIST
9580: LIST
9581: PPUSH
9582: CALL_OW 69
9586: AND
9587: PUSH
9588: LD_EXP 18
9592: PPUSH
9593: CALL_OW 302
9597: AND
9598: PUSH
9599: LD_INT 1
9601: PPUSH
9602: CALL_OW 463
9606: NOT
9607: AND
9608: PUSH
9609: LD_INT 4
9611: PPUSH
9612: CALL_OW 463
9616: NOT
9617: AND
9618: IFFALSE 9798
9620: GO 9622
9622: DISABLE
// begin InGameOn ;
9623: CALL_OW 8
// ComTurnUnit ( JMM , Kikuchi ) ;
9627: LD_EXP 9
9631: PPUSH
9632: LD_EXP 18
9636: PPUSH
9637: CALL_OW 119
// ComTurnUnit ( Kikuchi , JMM ) ;
9641: LD_EXP 18
9645: PPUSH
9646: LD_EXP 9
9650: PPUSH
9651: CALL_OW 119
// CenterOnUnits ( Kikuchi ) ;
9655: LD_EXP 18
9659: PPUSH
9660: CALL_OW 85
// Say ( Kikuchi , D3b-Yam-1 ) ;
9664: LD_EXP 18
9668: PPUSH
9669: LD_STRING D3b-Yam-1
9671: PPUSH
9672: CALL_OW 88
// Say ( JMM , D3b-JMM-1 ) ;
9676: LD_EXP 9
9680: PPUSH
9681: LD_STRING D3b-JMM-1
9683: PPUSH
9684: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9688: LD_INT 1
9690: PPUSH
9691: LD_INT 4
9693: PPUSH
9694: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9698: LD_INT 85
9700: PPUSH
9701: LD_INT 134
9703: PPUSH
9704: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-2 ) ;
9708: LD_EXP 18
9712: PPUSH
9713: LD_STRING D3b-Yam-2
9715: PPUSH
9716: CALL_OW 88
// Wait ( 0 0$01 ) ;
9720: LD_INT 35
9722: PPUSH
9723: CALL_OW 67
// Say ( JMM , D3b-JMM-2 ) ;
9727: LD_EXP 9
9731: PPUSH
9732: LD_STRING D3b-JMM-2
9734: PPUSH
9735: CALL_OW 88
// CenterOnXY ( 166 , 136 ) ;
9739: LD_INT 166
9741: PPUSH
9742: LD_INT 136
9744: PPUSH
9745: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-3 ) ;
9749: LD_EXP 18
9753: PPUSH
9754: LD_STRING D3b-Yam-3
9756: PPUSH
9757: CALL_OW 88
// CenterNowOnUnits ( JMM ) ;
9761: LD_EXP 9
9765: PPUSH
9766: CALL_OW 87
// Say ( JMM , D3b-JMM-3a ) ;
9770: LD_EXP 9
9774: PPUSH
9775: LD_STRING D3b-JMM-3a
9777: PPUSH
9778: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
9782: LD_EXP 18
9786: PPUSH
9787: LD_INT 1
9789: PPUSH
9790: CALL_OW 235
// InGameOff ;
9794: CALL_OW 9
// end ;
9798: END
// every 0 0$1 trigger FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var un , x , tw , i ;
9799: LD_INT 7
9801: PPUSH
9802: LD_INT 22
9804: PUSH
9805: LD_INT 1
9807: PUSH
9808: EMPTY
9809: LIST
9810: LIST
9811: PUSH
9812: LD_INT 3
9814: PUSH
9815: LD_INT 24
9817: PUSH
9818: LD_INT 1000
9820: PUSH
9821: EMPTY
9822: LIST
9823: LIST
9824: PUSH
9825: EMPTY
9826: LIST
9827: LIST
9828: PUSH
9829: EMPTY
9830: LIST
9831: LIST
9832: PPUSH
9833: CALL_OW 70
9837: IFFALSE 10293
9839: GO 9841
9841: DISABLE
9842: LD_INT 0
9844: PPUSH
9845: PPUSH
9846: PPUSH
9847: PPUSH
// begin repeat wait ( 0 0$1 ) ;
9848: LD_INT 35
9850: PPUSH
9851: CALL_OW 67
// un := FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
9855: LD_ADDR_VAR 0 1
9859: PUSH
9860: LD_INT 7
9862: PPUSH
9863: LD_INT 22
9865: PUSH
9866: LD_INT 1
9868: PUSH
9869: EMPTY
9870: LIST
9871: LIST
9872: PUSH
9873: LD_INT 3
9875: PUSH
9876: LD_INT 24
9878: PUSH
9879: LD_INT 1000
9881: PUSH
9882: EMPTY
9883: LIST
9884: LIST
9885: PUSH
9886: EMPTY
9887: LIST
9888: LIST
9889: PUSH
9890: EMPTY
9891: LIST
9892: LIST
9893: PPUSH
9894: CALL_OW 70
9898: ST_TO_ADDR
// if not un then
9899: LD_VAR 0 1
9903: NOT
9904: IFFALSE 9908
// continue ;
9906: GO 9848
// tw := NearbyTowerHasEnergy ( un [ 1 ] ) ;
9908: LD_ADDR_VAR 0 3
9912: PUSH
9913: LD_VAR 0 1
9917: PUSH
9918: LD_INT 1
9920: ARRAY
9921: PPUSH
9922: CALL 2053 0 1
9926: ST_TO_ADDR
// until tw ;
9927: LD_VAR 0 3
9931: IFFALSE 9848
// DialogueOn ;
9933: CALL_OW 6
// CenterNowOnUnits ( tw ) ;
9937: LD_VAR 0 3
9941: PPUSH
9942: CALL_OW 87
// if Lisa then
9946: LD_EXP 14
9950: IFFALSE 9978
// begin Say ( Lisa , D5-Lisa-1 ) ;
9952: LD_EXP 14
9956: PPUSH
9957: LD_STRING D5-Lisa-1
9959: PPUSH
9960: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
9964: LD_EXP 9
9968: PPUSH
9969: LD_STRING D5-JMM-1a
9971: PPUSH
9972: CALL_OW 88
// end else
9976: GO 9990
// Say ( JMM , D5-JMM-1 ) ;
9978: LD_EXP 9
9982: PPUSH
9983: LD_STRING D5-JMM-1
9985: PPUSH
9986: CALL_OW 88
// DialogueOff ;
9990: CALL_OW 7
// while ( true ) do
9994: LD_INT 1
9996: IFFALSE 10052
// begin wait ( 0 0$01 ) ;
9998: LD_INT 35
10000: PPUSH
10001: CALL_OW 67
// x := FilterUnitsExceptArea ( northElectro , [ [ f_btype , b_oil_power ] , [ f_see , 1 ] ] ) ;
10005: LD_ADDR_VAR 0 2
10009: PUSH
10010: LD_INT 8
10012: PPUSH
10013: LD_INT 30
10015: PUSH
10016: LD_INT 26
10018: PUSH
10019: EMPTY
10020: LIST
10021: LIST
10022: PUSH
10023: LD_INT 101
10025: PUSH
10026: LD_INT 1
10028: PUSH
10029: EMPTY
10030: LIST
10031: LIST
10032: PUSH
10033: EMPTY
10034: LIST
10035: LIST
10036: PPUSH
10037: CALL_OW 71
10041: ST_TO_ADDR
// if x then
10042: LD_VAR 0 2
10046: IFFALSE 10050
// break ;
10048: GO 10052
// end ;
10050: GO 9994
// CenterOnUnits ( x [ 1 ] ) ;
10052: LD_VAR 0 2
10056: PUSH
10057: LD_INT 1
10059: ARRAY
10060: PPUSH
10061: CALL_OW 85
// if Frank and GetSide ( Frank ) = 1 then
10065: LD_EXP 15
10069: PUSH
10070: LD_EXP 15
10074: PPUSH
10075: CALL_OW 255
10079: PUSH
10080: LD_INT 1
10082: EQUAL
10083: AND
10084: IFFALSE 10100
// Say ( Frank , D5a-Frank-1 ) else
10086: LD_EXP 15
10090: PPUSH
10091: LD_STRING D5a-Frank-1
10093: PPUSH
10094: CALL_OW 88
10098: GO 10154
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
10100: LD_EXP 18
10104: PUSH
10105: LD_EXP 18
10109: PPUSH
10110: CALL_OW 255
10114: PUSH
10115: LD_INT 1
10117: EQUAL
10118: AND
10119: IFFALSE 10135
// Say ( Kikuchi , D5a-Yam-1 ) else
10121: LD_EXP 18
10125: PPUSH
10126: LD_STRING D5a-Yam-1
10128: PPUSH
10129: CALL_OW 88
10133: GO 10154
// Say ( GetRandom ( sex_male ) [ 1 ] , D5a-Sol1-1 ) ;
10135: LD_INT 1
10137: PPUSH
10138: CALL 608 0 1
10142: PUSH
10143: LD_INT 1
10145: ARRAY
10146: PPUSH
10147: LD_STRING D5a-Sol1-1
10149: PPUSH
10150: CALL_OW 88
// Say ( JMM , D5a-JMM-1 ) ;
10154: LD_EXP 9
10158: PPUSH
10159: LD_STRING D5a-JMM-1
10161: PPUSH
10162: CALL_OW 88
// if Cyrus then
10166: LD_EXP 13
10170: IFFALSE 10184
// Say ( Cyrus , D5a-Cyrus-1 ) ;
10172: LD_EXP 13
10176: PPUSH
10177: LD_STRING D5a-Cyrus-1
10179: PPUSH
10180: CALL_OW 88
// x := false ;
10184: LD_ADDR_VAR 0 2
10188: PUSH
10189: LD_INT 0
10191: ST_TO_ADDR
// while ( true ) do
10192: LD_INT 1
10194: IFFALSE 10281
// begin wait ( 0 0$01 ) ;
10196: LD_INT 35
10198: PPUSH
10199: CALL_OW 67
// for i in FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) diff ru_dep_west do
10203: LD_ADDR_VAR 0 4
10207: PUSH
10208: LD_INT 2
10210: PUSH
10211: LD_INT 30
10213: PUSH
10214: LD_INT 0
10216: PUSH
10217: EMPTY
10218: LIST
10219: LIST
10220: PUSH
10221: LD_INT 30
10223: PUSH
10224: LD_INT 1
10226: PUSH
10227: EMPTY
10228: LIST
10229: LIST
10230: PUSH
10231: EMPTY
10232: LIST
10233: LIST
10234: LIST
10235: PPUSH
10236: CALL_OW 69
10240: PUSH
10241: LD_INT 1
10243: DIFF
10244: PUSH
10245: FOR_IN
10246: IFFALSE 10269
// if BaseNeedEnergy ( i ) then
10248: LD_VAR 0 4
10252: PPUSH
10253: CALL 1178 0 1
10257: IFFALSE 10267
// x := true ;
10259: LD_ADDR_VAR 0 2
10263: PUSH
10264: LD_INT 1
10266: ST_TO_ADDR
10267: GO 10245
10269: POP
10270: POP
// if x then
10271: LD_VAR 0 2
10275: IFFALSE 10279
// break ;
10277: GO 10281
// end ;
10279: GO 10192
// Say ( JMM , D5b-JMM-1 ) ;
10281: LD_EXP 9
10285: PPUSH
10286: LD_STRING D5b-JMM-1
10288: PPUSH
10289: CALL_OW 88
// end ;
10293: PPOPN 4
10295: END
// every 0 0$1 trigger time_to_end [ 1 ] < tick or FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) < 10 do
10296: LD_EXP 5
10300: PUSH
10301: LD_INT 1
10303: ARRAY
10304: PUSH
10305: LD_OWVAR 1
10309: LESS
10310: PUSH
10311: LD_INT 22
10313: PUSH
10314: LD_INT 3
10316: PUSH
10317: EMPTY
10318: LIST
10319: LIST
10320: PUSH
10321: LD_INT 21
10323: PUSH
10324: LD_INT 3
10326: PUSH
10327: EMPTY
10328: LIST
10329: LIST
10330: PUSH
10331: EMPTY
10332: LIST
10333: LIST
10334: PPUSH
10335: CALL_OW 69
10339: PUSH
10340: LD_INT 10
10342: LESS
10343: OR
10344: IFFALSE 10544
10346: GO 10348
10348: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10349: LD_INT 16
10351: PPUSH
10352: CALL_OW 301
10356: NOT
10357: IFFALSE 10380
// begin SayRadio ( Harisson , D3b-Har-3 ) ;
10359: LD_EXP 19
10363: PPUSH
10364: LD_STRING D3b-Har-3
10366: PPUSH
10367: CALL_OW 94
// ChangeMissionObjectives ( M2a ) ;
10371: LD_STRING M2a
10373: PPUSH
10374: CALL_OW 337
// end else
10378: GO 10399
// begin SayRadio ( Harisson , D3b-Har-3a ) ;
10380: LD_EXP 19
10384: PPUSH
10385: LD_STRING D3b-Har-3a
10387: PPUSH
10388: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
10392: LD_STRING M2
10394: PPUSH
10395: CALL_OW 337
// end ; can_end := true ;
10399: LD_ADDR_EXP 6
10403: PUSH
10404: LD_INT 1
10406: ST_TO_ADDR
// SetAreaMapShow ( endArea , 1 ) ;
10407: LD_INT 9
10409: PPUSH
10410: LD_INT 1
10412: PPUSH
10413: CALL_OW 424
// Wait ( 0 0$02 ) ;
10417: LD_INT 70
10419: PPUSH
10420: CALL_OW 67
// if Lisa then
10424: LD_EXP 14
10428: IFFALSE 10442
// Say ( Lisa , D3b-Lisa ) ;
10430: LD_EXP 14
10434: PPUSH
10435: LD_STRING D3b-Lisa
10437: PPUSH
10438: CALL_OW 88
// if Bobby then
10442: LD_EXP 12
10446: IFFALSE 10460
// Say ( Bobby , D3b-Bobby-3 ) ;
10448: LD_EXP 12
10452: PPUSH
10453: LD_STRING D3b-Bobby-3
10455: PPUSH
10456: CALL_OW 88
// if Cyrus then
10460: LD_EXP 13
10464: IFFALSE 10478
// Say ( Cyrus , D3b-Cyrus-3 ) ;
10466: LD_EXP 13
10470: PPUSH
10471: LD_STRING D3b-Cyrus-3
10473: PPUSH
10474: CALL_OW 88
// if Frank and GetSide ( Frank ) = 1 then
10478: LD_EXP 15
10482: PUSH
10483: LD_EXP 15
10487: PPUSH
10488: CALL_OW 255
10492: PUSH
10493: LD_INT 1
10495: EQUAL
10496: AND
10497: IFFALSE 10511
// Say ( Frank , D3b-Frank-3 ) ;
10499: LD_EXP 15
10503: PPUSH
10504: LD_STRING D3b-Frank-3
10506: PPUSH
10507: CALL_OW 88
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
10511: LD_EXP 18
10515: PUSH
10516: LD_EXP 18
10520: PPUSH
10521: CALL_OW 255
10525: PUSH
10526: LD_INT 1
10528: EQUAL
10529: AND
10530: IFFALSE 10544
// Say ( Kikuchi , D3b-Yam-4 ) ;
10532: LD_EXP 18
10536: PPUSH
10537: LD_STRING D3b-Yam-4
10539: PPUSH
10540: CALL_OW 88
// end ;
10544: END
// every 0 0$1 trigger time_to_end [ 2 ] < tick do
10545: LD_EXP 5
10549: PUSH
10550: LD_INT 2
10552: ARRAY
10553: PUSH
10554: LD_OWVAR 1
10558: LESS
10559: IFFALSE 10591
10561: GO 10563
10563: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
10564: LD_EXP 19
10568: PPUSH
10569: LD_STRING D4-Har-1
10571: PPUSH
10572: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
10576: LD_STRING M3
10578: PPUSH
10579: CALL_OW 337
// must_end := true ;
10583: LD_ADDR_EXP 7
10587: PUSH
10588: LD_INT 1
10590: ST_TO_ADDR
// end ;
10591: END
// every 0 0$01 trigger time_to_end [ 3 ] < tick do
10592: LD_EXP 5
10596: PUSH
10597: LD_INT 3
10599: ARRAY
10600: PUSH
10601: LD_OWVAR 1
10605: LESS
10606: IFFALSE 10637
10608: GO 10610
10610: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10611: LD_INT 16
10613: PPUSH
10614: CALL_OW 301
10618: NOT
10619: IFFALSE 10630
// YouLost ( TimeOut1 ) else
10621: LD_STRING TimeOut1
10623: PPUSH
10624: CALL_OW 104
10628: GO 10637
// YouLost ( TimeOut2 ) ;
10630: LD_STRING TimeOut2
10632: PPUSH
10633: CALL_OW 104
// end ;
10637: END
// every 0 0$1 trigger IsInArea ( JMM , endArea ) and can_end do var wait_on , i , tmp , m1 , m2 , m3 ;
10638: LD_EXP 9
10642: PPUSH
10643: LD_INT 9
10645: PPUSH
10646: CALL_OW 308
10650: PUSH
10651: LD_EXP 6
10655: AND
10656: IFFALSE 11744
10658: GO 10660
10660: DISABLE
10661: LD_INT 0
10663: PPUSH
10664: PPUSH
10665: PPUSH
10666: PPUSH
10667: PPUSH
10668: PPUSH
// begin wait_on := false ;
10669: LD_ADDR_VAR 0 1
10673: PUSH
10674: LD_INT 0
10676: ST_TO_ADDR
// if Count ( FilterPeople ( 1 ) ) > Count ( FilterPeopleArea ( 1 , endArea ) ^ FilterDriversArea ( 1 , endArea ) ) then
10677: LD_INT 1
10679: PPUSH
10680: CALL 1255 0 1
10684: PPUSH
10685: CALL 34447 0 1
10689: PUSH
10690: LD_INT 1
10692: PPUSH
10693: LD_INT 9
10695: PPUSH
10696: CALL 1346 0 2
10700: PUSH
10701: LD_INT 1
10703: PPUSH
10704: LD_INT 9
10706: PPUSH
10707: CALL 1393 0 2
10711: ADD
10712: PPUSH
10713: CALL 34447 0 1
10717: GREATER
10718: IFFALSE 10741
// if Query ( Q1 ) = 1 then
10720: LD_STRING Q1
10722: PPUSH
10723: CALL_OW 97
10727: PUSH
10728: LD_INT 1
10730: EQUAL
10731: IFFALSE 10741
// wait_on := true ;
10733: LD_ADDR_VAR 0 1
10737: PUSH
10738: LD_INT 1
10740: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
10741: LD_INT 35
10743: PPUSH
10744: CALL_OW 67
// until Count ( FilterPeople ( 1 ) ) = Count ( FilterPeopleArea ( 1 , endArea ) union FilterDriversArea ( 1 , endArea ) ) ;
10748: LD_INT 1
10750: PPUSH
10751: CALL 1255 0 1
10755: PPUSH
10756: CALL 34447 0 1
10760: PUSH
10761: LD_INT 1
10763: PPUSH
10764: LD_INT 9
10766: PPUSH
10767: CALL 1346 0 2
10771: PUSH
10772: LD_INT 1
10774: PPUSH
10775: LD_INT 9
10777: PPUSH
10778: CALL 1393 0 2
10782: UNION
10783: PPUSH
10784: CALL 34447 0 1
10788: EQUAL
10789: IFFALSE 10741
// DialogueOn ;
10791: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
10795: LD_EXP 9
10799: PPUSH
10800: CALL_OW 87
// Say ( JMM , D6-JMM-1 ) ;
10804: LD_EXP 9
10808: PPUSH
10809: LD_STRING D6-JMM-1
10811: PPUSH
10812: CALL_OW 88
// SayRadio ( Harisson , D6-Har-1 ) ;
10816: LD_EXP 19
10820: PPUSH
10821: LD_STRING D6-Har-1
10823: PPUSH
10824: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
10828: LD_EXP 9
10832: PPUSH
10833: LD_STRING D6-JMM-2
10835: PPUSH
10836: CALL_OW 88
// SayRadio ( Harisson , D6-Har-2 ) ;
10840: LD_EXP 19
10844: PPUSH
10845: LD_STRING D6-Har-2
10847: PPUSH
10848: CALL_OW 94
// Say ( JMM , D6-JMM-3 ) ;
10852: LD_EXP 9
10856: PPUSH
10857: LD_STRING D6-JMM-3
10859: PPUSH
10860: CALL_OW 88
// SayRadio ( Harisson , D6-Har-3 ) ;
10864: LD_EXP 19
10868: PPUSH
10869: LD_STRING D6-Har-3
10871: PPUSH
10872: CALL_OW 94
// Say ( JMM , D6-JMM-4 ) ;
10876: LD_EXP 9
10880: PPUSH
10881: LD_STRING D6-JMM-4
10883: PPUSH
10884: CALL_OW 88
// SayRadio ( Harisson , D6-Har-4 ) ;
10888: LD_EXP 19
10892: PPUSH
10893: LD_STRING D6-Har-4
10895: PPUSH
10896: CALL_OW 94
// Say ( JMM , D6-JMM-5 ) ;
10900: LD_EXP 9
10904: PPUSH
10905: LD_STRING D6-JMM-5
10907: PPUSH
10908: CALL_OW 88
// DialogueOff ;
10912: CALL_OW 7
// m1 := false ;
10916: LD_ADDR_VAR 0 4
10920: PUSH
10921: LD_INT 0
10923: ST_TO_ADDR
// m2 := false ;
10924: LD_ADDR_VAR 0 5
10928: PUSH
10929: LD_INT 0
10931: ST_TO_ADDR
// m3 := false ;
10932: LD_ADDR_VAR 0 6
10936: PUSH
10937: LD_INT 0
10939: ST_TO_ADDR
// tmp := FilterBuildings ( 3 ) ;
10940: LD_ADDR_VAR 0 3
10944: PUSH
10945: LD_INT 3
10947: PPUSH
10948: CALL 1524 0 1
10952: ST_TO_ADDR
// if tmp >= 35 then
10953: LD_VAR 0 3
10957: PUSH
10958: LD_INT 35
10960: GREATEREQUAL
10961: IFFALSE 10998
// begin AddMedal ( Destroy1 , - 1 ) ;
10963: LD_STRING Destroy1
10965: PPUSH
10966: LD_INT 1
10968: NEG
10969: PPUSH
10970: CALL_OW 101
// AddMedal ( Destroy2 , - 1 ) ;
10974: LD_STRING Destroy2
10976: PPUSH
10977: LD_INT 1
10979: NEG
10980: PPUSH
10981: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
10985: LD_STRING Destroy3
10987: PPUSH
10988: LD_INT 1
10990: NEG
10991: PPUSH
10992: CALL_OW 101
// end else
10996: GO 11109
// begin AddMedal ( Destroy1 , 1 ) ;
10998: LD_STRING Destroy1
11000: PPUSH
11001: LD_INT 1
11003: PPUSH
11004: CALL_OW 101
// m1 := true ;
11008: LD_ADDR_VAR 0 4
11012: PUSH
11013: LD_INT 1
11015: ST_TO_ADDR
// if tmp >= 25 then
11016: LD_VAR 0 3
11020: PUSH
11021: LD_INT 25
11023: GREATEREQUAL
11024: IFFALSE 11050
// begin AddMedal ( Destroy2 , - 1 ) ;
11026: LD_STRING Destroy2
11028: PPUSH
11029: LD_INT 1
11031: NEG
11032: PPUSH
11033: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
11037: LD_STRING Destroy3
11039: PPUSH
11040: LD_INT 1
11042: NEG
11043: PPUSH
11044: CALL_OW 101
// end else
11048: GO 11109
// begin AddMedal ( Destroy2 , 1 ) ;
11050: LD_STRING Destroy2
11052: PPUSH
11053: LD_INT 1
11055: PPUSH
11056: CALL_OW 101
// m2 := true ;
11060: LD_ADDR_VAR 0 5
11064: PUSH
11065: LD_INT 1
11067: ST_TO_ADDR
// if tmp >= 15 then
11068: LD_VAR 0 3
11072: PUSH
11073: LD_INT 15
11075: GREATEREQUAL
11076: IFFALSE 11091
// AddMedal ( Destroy3 , - 1 ) else
11078: LD_STRING Destroy3
11080: PPUSH
11081: LD_INT 1
11083: NEG
11084: PPUSH
11085: CALL_OW 101
11089: GO 11109
// begin AddMedal ( Destroy3 , 1 ) ;
11091: LD_STRING Destroy3
11093: PPUSH
11094: LD_INT 1
11096: PPUSH
11097: CALL_OW 101
// m3 := true ;
11101: LD_ADDR_VAR 0 6
11105: PUSH
11106: LD_INT 1
11108: ST_TO_ADDR
// end ; end ; end ; if tick <= 32 32$00 then
11109: LD_OWVAR 1
11113: PUSH
11114: LD_INT 67200
11116: LESSEQUAL
11117: IFFALSE 11126
// SetAchievement ( ACH_ASPEED_7 ) ;
11119: LD_STRING ACH_ASPEED_7
11121: PPUSH
11122: CALL_OW 543
// if m1 and m2 and m3 and Difficulty >= 3 then
11126: LD_VAR 0 4
11130: PUSH
11131: LD_VAR 0 5
11135: AND
11136: PUSH
11137: LD_VAR 0 6
11141: AND
11142: PUSH
11143: LD_OWVAR 67
11147: PUSH
11148: LD_INT 3
11150: GREATEREQUAL
11151: AND
11152: IFFALSE 11164
// SetAchievementEX ( ACH_AMER , 7 ) ;
11154: LD_STRING ACH_AMER
11156: PPUSH
11157: LD_INT 7
11159: PPUSH
11160: CALL_OW 564
// GiveMedals ( MAIN ) ;
11164: LD_STRING MAIN
11166: PPUSH
11167: CALL_OW 102
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] ] ) ;
11171: LD_ADDR_VAR 0 3
11175: PUSH
11176: LD_INT 22
11178: PUSH
11179: LD_INT 1
11181: PUSH
11182: EMPTY
11183: LIST
11184: LIST
11185: PUSH
11186: LD_INT 23
11188: PUSH
11189: LD_INT 1
11191: PUSH
11192: EMPTY
11193: LIST
11194: LIST
11195: PUSH
11196: EMPTY
11197: LIST
11198: LIST
11199: PPUSH
11200: CALL_OW 69
11204: ST_TO_ADDR
// RewardPeople ( tmp ) ;
11205: LD_VAR 0 3
11209: PPUSH
11210: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
11214: LD_EXP 9
11218: PPUSH
11219: LD_EXP 3
11223: PUSH
11224: LD_STRING JMM
11226: STR
11227: PPUSH
11228: CALL_OW 38
// if Brown in tmp then
11232: LD_EXP 10
11236: PUSH
11237: LD_VAR 0 3
11241: IN
11242: IFFALSE 11262
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
11244: LD_EXP 10
11248: PPUSH
11249: LD_EXP 3
11253: PUSH
11254: LD_STRING Brown
11256: STR
11257: PPUSH
11258: CALL_OW 38
// if Donaldson in tmp then
11262: LD_EXP 11
11266: PUSH
11267: LD_VAR 0 3
11271: IN
11272: IFFALSE 11292
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
11274: LD_EXP 11
11278: PPUSH
11279: LD_EXP 3
11283: PUSH
11284: LD_STRING Donaldson
11286: STR
11287: PPUSH
11288: CALL_OW 38
// if Bobby in tmp then
11292: LD_EXP 12
11296: PUSH
11297: LD_VAR 0 3
11301: IN
11302: IFFALSE 11322
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
11304: LD_EXP 12
11308: PPUSH
11309: LD_EXP 3
11313: PUSH
11314: LD_STRING Bobby
11316: STR
11317: PPUSH
11318: CALL_OW 38
// if Cyrus in tmp then
11322: LD_EXP 13
11326: PUSH
11327: LD_VAR 0 3
11331: IN
11332: IFFALSE 11352
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
11334: LD_EXP 13
11338: PPUSH
11339: LD_EXP 3
11343: PUSH
11344: LD_STRING Cyrus
11346: STR
11347: PPUSH
11348: CALL_OW 38
// if Lisa in tmp then
11352: LD_EXP 14
11356: PUSH
11357: LD_VAR 0 3
11361: IN
11362: IFFALSE 11382
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
11364: LD_EXP 14
11368: PPUSH
11369: LD_EXP 3
11373: PUSH
11374: LD_STRING Lisa
11376: STR
11377: PPUSH
11378: CALL_OW 38
// if Frank in tmp then
11382: LD_EXP 15
11386: PUSH
11387: LD_VAR 0 3
11391: IN
11392: IFFALSE 11412
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
11394: LD_EXP 15
11398: PPUSH
11399: LD_EXP 3
11403: PUSH
11404: LD_STRING Frank
11406: STR
11407: PPUSH
11408: CALL_OW 38
// if Gladstone in tmp then
11412: LD_EXP 16
11416: PUSH
11417: LD_VAR 0 3
11421: IN
11422: IFFALSE 11442
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
11424: LD_EXP 16
11428: PPUSH
11429: LD_EXP 3
11433: PUSH
11434: LD_STRING Gladstone
11436: STR
11437: PPUSH
11438: CALL_OW 38
// if Khatam in tmp then
11442: LD_EXP 17
11446: PUSH
11447: LD_VAR 0 3
11451: IN
11452: IFFALSE 11472
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
11454: LD_EXP 17
11458: PPUSH
11459: LD_EXP 3
11463: PUSH
11464: LD_STRING Khatam
11466: STR
11467: PPUSH
11468: CALL_OW 38
// if Kikuchi in tmp then
11472: LD_EXP 18
11476: PUSH
11477: LD_VAR 0 3
11481: IN
11482: IFFALSE 11509
// begin ToLua ( enableBioCharacter(BIO_YAMO) ) ;
11484: LD_STRING enableBioCharacter(BIO_YAMO)
11486: PPUSH
11487: CALL_OW 559
// SaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
11491: LD_EXP 18
11495: PPUSH
11496: LD_EXP 3
11500: PUSH
11501: LD_STRING Kikuchi
11503: STR
11504: PPUSH
11505: CALL_OW 38
// end ; SaveCharacters ( tmp diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] , mission_prefix & others ) ;
11509: LD_VAR 0 3
11513: PUSH
11514: LD_EXP 9
11518: PUSH
11519: LD_EXP 10
11523: PUSH
11524: LD_EXP 11
11528: PUSH
11529: LD_EXP 12
11533: PUSH
11534: LD_EXP 13
11538: PUSH
11539: LD_EXP 14
11543: PUSH
11544: LD_EXP 15
11548: PUSH
11549: LD_EXP 16
11553: PUSH
11554: LD_EXP 18
11558: PUSH
11559: LD_EXP 17
11563: PUSH
11564: EMPTY
11565: LIST
11566: LIST
11567: LIST
11568: LIST
11569: LIST
11570: LIST
11571: LIST
11572: LIST
11573: LIST
11574: LIST
11575: DIFF
11576: PPUSH
11577: LD_EXP 3
11581: PUSH
11582: LD_STRING others
11584: STR
11585: PPUSH
11586: CALL_OW 38
// SaveVariable ( tick , 07_time ) ;
11590: LD_OWVAR 1
11594: PPUSH
11595: LD_STRING 07_time
11597: PPUSH
11598: CALL_OW 39
// tmp := [ ] ;
11602: LD_ADDR_VAR 0 3
11606: PUSH
11607: EMPTY
11608: ST_TO_ADDR
// for i in FilterUnitsInArea ( endArea , [ [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] ] ] ) do
11609: LD_ADDR_VAR 0 2
11613: PUSH
11614: LD_INT 9
11616: PPUSH
11617: LD_INT 22
11619: PUSH
11620: LD_INT 1
11622: PUSH
11623: EMPTY
11624: LIST
11625: LIST
11626: PUSH
11627: LD_INT 23
11629: PUSH
11630: LD_INT 1
11632: PUSH
11633: EMPTY
11634: LIST
11635: LIST
11636: PUSH
11637: LD_INT 21
11639: PUSH
11640: LD_INT 2
11642: PUSH
11643: EMPTY
11644: LIST
11645: LIST
11646: PUSH
11647: EMPTY
11648: LIST
11649: LIST
11650: LIST
11651: PUSH
11652: EMPTY
11653: LIST
11654: PPUSH
11655: CALL_OW 70
11659: PUSH
11660: FOR_IN
11661: IFFALSE 11726
// tmp := Join ( tmp , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ) ;
11663: LD_ADDR_VAR 0 3
11667: PUSH
11668: LD_VAR 0 3
11672: PPUSH
11673: LD_VAR 0 2
11677: PPUSH
11678: CALL_OW 265
11682: PUSH
11683: LD_VAR 0 2
11687: PPUSH
11688: CALL_OW 262
11692: PUSH
11693: LD_VAR 0 2
11697: PPUSH
11698: CALL_OW 263
11702: PUSH
11703: LD_VAR 0 2
11707: PPUSH
11708: CALL_OW 264
11712: PUSH
11713: EMPTY
11714: LIST
11715: LIST
11716: LIST
11717: LIST
11718: PPUSH
11719: CALL 69666 0 2
11723: ST_TO_ADDR
11724: GO 11660
11726: POP
11727: POP
// SaveVariable ( tmp , 07_vehicles ) ;
11728: LD_VAR 0 3
11732: PPUSH
11733: LD_STRING 07_vehicles
11735: PPUSH
11736: CALL_OW 39
// YouWin ;
11740: CALL_OW 103
// end ; end_of_file
11744: PPOPN 6
11746: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
11747: LD_VAR 0 1
11751: PPUSH
11752: CALL 28056 0 1
// if un = JMM then
11756: LD_VAR 0 1
11760: PUSH
11761: LD_EXP 9
11765: EQUAL
11766: IFFALSE 11775
// YouLost ( JMM ) ;
11768: LD_STRING JMM
11770: PPUSH
11771: CALL_OW 104
// if GetType ( un ) = unit_building then
11775: LD_VAR 0 1
11779: PPUSH
11780: CALL_OW 247
11784: PUSH
11785: LD_INT 3
11787: EQUAL
11788: IFFALSE 11804
// buildings_counter := buildings_counter + 1 ;
11790: LD_ADDR_EXP 4
11794: PUSH
11795: LD_EXP 4
11799: PUSH
11800: LD_INT 1
11802: PLUS
11803: ST_TO_ADDR
// if un in FilterUnitsInArea ( baseArea , [ f_or , [ f_btype , b_turret ] , [ f_btype , b_bunker ] ] ) then
11804: LD_VAR 0 1
11808: PUSH
11809: LD_INT 6
11811: PPUSH
11812: LD_INT 2
11814: PUSH
11815: LD_INT 30
11817: PUSH
11818: LD_INT 33
11820: PUSH
11821: EMPTY
11822: LIST
11823: LIST
11824: PUSH
11825: LD_INT 30
11827: PUSH
11828: LD_INT 32
11830: PUSH
11831: EMPTY
11832: LIST
11833: LIST
11834: PUSH
11835: EMPTY
11836: LIST
11837: LIST
11838: LIST
11839: PPUSH
11840: CALL_OW 70
11844: IN
11845: IFFALSE 11904
// ru_rebuild_list := ru_rebuild_list ^ [ GetBType ( un ) , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ;
11847: LD_ADDR_EXP 20
11851: PUSH
11852: LD_EXP 20
11856: PUSH
11857: LD_VAR 0 1
11861: PPUSH
11862: CALL_OW 266
11866: PUSH
11867: LD_VAR 0 1
11871: PPUSH
11872: CALL_OW 250
11876: PUSH
11877: LD_VAR 0 1
11881: PPUSH
11882: CALL_OW 251
11886: PUSH
11887: LD_VAR 0 1
11891: PPUSH
11892: CALL_OW 254
11896: PUSH
11897: EMPTY
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: ADD
11903: ST_TO_ADDR
// if un = ru_dep_main then
11904: LD_VAR 0 1
11908: PUSH
11909: LD_INT 16
11911: EQUAL
11912: IFFALSE 11921
// ChangeMissionObjectives ( M1a ) ;
11914: LD_STRING M1a
11916: PPUSH
11917: CALL_OW 337
// if GetType ( un ) = unit_human and GetSide ( un ) = 3 then
11921: LD_VAR 0 1
11925: PPUSH
11926: CALL_OW 247
11930: PUSH
11931: LD_INT 1
11933: EQUAL
11934: PUSH
11935: LD_VAR 0 1
11939: PPUSH
11940: CALL_OW 255
11944: PUSH
11945: LD_INT 3
11947: EQUAL
11948: AND
11949: IFFALSE 11965
// kill_counter := kill_counter + 1 ;
11951: LD_ADDR_EXP 8
11955: PUSH
11956: LD_EXP 8
11960: PUSH
11961: LD_INT 1
11963: PLUS
11964: ST_TO_ADDR
// end ;
11965: PPOPN 1
11967: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
11968: LD_VAR 0 1
11972: PPUSH
11973: LD_VAR 0 2
11977: PPUSH
11978: CALL 28176 0 2
// end ;
11982: PPOPN 2
11984: END
// on UnitGoesToRed ( un ) do begin if GetBType ( un ) = b_bunker and GetTag ( un ) = 7 then
11985: LD_VAR 0 1
11989: PPUSH
11990: CALL_OW 266
11994: PUSH
11995: LD_INT 32
11997: EQUAL
11998: PUSH
11999: LD_VAR 0 1
12003: PPUSH
12004: CALL_OW 110
12008: PUSH
12009: LD_INT 7
12011: EQUAL
12012: AND
12013: IFFALSE 12027
// SetTag ( un , 0 ) ;
12015: LD_VAR 0 1
12019: PPUSH
12020: LD_INT 0
12022: PPUSH
12023: CALL_OW 109
// end ;
12027: PPOPN 1
12029: END
// on BuildingStarted ( b , builder ) do var i ;
12030: LD_INT 0
12032: PPUSH
// begin if GetSide ( b ) = 3 then
12033: LD_VAR 0 1
12037: PPUSH
12038: CALL_OW 255
12042: PUSH
12043: LD_INT 3
12045: EQUAL
12046: IFFALSE 12086
// for i = 1 to 4 do
12048: LD_ADDR_VAR 0 3
12052: PUSH
12053: DOUBLE
12054: LD_INT 1
12056: DEC
12057: ST_TO_ADDR
12058: LD_INT 4
12060: PUSH
12061: FOR_TO
12062: IFFALSE 12084
// ru_rebuild_list := Delete ( ru_rebuild_list , 1 ) ;
12064: LD_ADDR_EXP 20
12068: PUSH
12069: LD_EXP 20
12073: PPUSH
12074: LD_INT 1
12076: PPUSH
12077: CALL_OW 3
12081: ST_TO_ADDR
12082: GO 12061
12084: POP
12085: POP
// end ;
12086: PPOPN 3
12088: END
// on BuildingComplete ( b ) do if GetBType ( b ) in [ b_bunker , b_turret ] then
12089: LD_VAR 0 1
12093: PPUSH
12094: CALL_OW 266
12098: PUSH
12099: LD_INT 32
12101: PUSH
12102: LD_INT 33
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: IN
12109: IFFALSE 12123
// ComPlaceWeapon ( b , ru_gatling_gun ) ;
12111: LD_VAR 0 1
12115: PPUSH
12116: LD_INT 43
12118: PPUSH
12119: CALL_OW 148
12123: PPOPN 1
12125: END
// on LeaveBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
12126: LD_VAR 0 1
12130: PUSH
12131: LD_INT 22
12133: PUSH
12134: LD_INT 3
12136: PUSH
12137: EMPTY
12138: LIST
12139: LIST
12140: PUSH
12141: LD_INT 2
12143: PUSH
12144: LD_INT 30
12146: PUSH
12147: LD_INT 31
12149: PUSH
12150: EMPTY
12151: LIST
12152: LIST
12153: PUSH
12154: LD_INT 30
12156: PUSH
12157: LD_INT 32
12159: PUSH
12160: EMPTY
12161: LIST
12162: LIST
12163: PUSH
12164: EMPTY
12165: LIST
12166: LIST
12167: LIST
12168: PUSH
12169: EMPTY
12170: LIST
12171: LIST
12172: PPUSH
12173: CALL_OW 69
12177: IN
12178: IFFALSE 12200
// GoToAnotherTower ( un , b , 134 , 136 ) ;
12180: LD_VAR 0 2
12184: PPUSH
12185: LD_VAR 0 1
12189: PPUSH
12190: LD_INT 134
12192: PPUSH
12193: LD_INT 136
12195: PPUSH
12196: CALL 838 0 4
// end ;
12200: PPOPN 2
12202: END
// on EnterBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) then
12203: LD_VAR 0 1
12207: PUSH
12208: LD_INT 22
12210: PUSH
12211: LD_INT 3
12213: PUSH
12214: EMPTY
12215: LIST
12216: LIST
12217: PUSH
12218: LD_INT 30
12220: PUSH
12221: LD_INT 32
12223: PUSH
12224: EMPTY
12225: LIST
12226: LIST
12227: PUSH
12228: EMPTY
12229: LIST
12230: LIST
12231: PPUSH
12232: CALL_OW 69
12236: IN
12237: IFFALSE 12251
// SetTag ( b , 0 ) ;
12239: LD_VAR 0 1
12243: PPUSH
12244: LD_INT 0
12246: PPUSH
12247: CALL_OW 109
// end ; end_of_file end_of_file
12251: PPOPN 2
12253: END
// export globalGameSaveCounter ; every 0 0$1 do
12254: GO 12256
12256: DISABLE
// begin enable ;
12257: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
12258: LD_STRING updateTimer(
12260: PUSH
12261: LD_OWVAR 1
12265: STR
12266: PUSH
12267: LD_STRING );
12269: STR
12270: PPUSH
12271: CALL_OW 559
// end ;
12275: END
// every 0 0$1 do
12276: GO 12278
12278: DISABLE
// begin globalGameSaveCounter := 0 ;
12279: LD_ADDR_EXP 21
12283: PUSH
12284: LD_INT 0
12286: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
12287: LD_STRING setGameSaveCounter(0)
12289: PPUSH
12290: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
12294: LD_STRING initStreamRollete();
12296: PPUSH
12297: CALL_OW 559
// InitStreamMode ;
12301: CALL 13627 0 0
// DefineStreamItems ( false ) ;
12305: LD_INT 0
12307: PPUSH
12308: CALL 14091 0 1
// end ;
12312: END
// export function SOS_MapStart ( ) ; begin
12313: LD_INT 0
12315: PPUSH
// if streamModeActive then
12316: LD_EXP 22
12320: IFFALSE 12329
// DefineStreamItems ( true ) ;
12322: LD_INT 1
12324: PPUSH
12325: CALL 14091 0 1
// UpdateLuaVariables ( ) ;
12329: CALL 12346 0 0
// UpdateFactoryWaypoints ( ) ;
12333: CALL 26960 0 0
// UpdateWarehouseGatheringPoints ( ) ;
12337: CALL 27217 0 0
// end ;
12341: LD_VAR 0 1
12345: RET
// function UpdateLuaVariables ( ) ; begin
12346: LD_INT 0
12348: PPUSH
// if globalGameSaveCounter then
12349: LD_EXP 21
12353: IFFALSE 12387
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
12355: LD_ADDR_EXP 21
12359: PUSH
12360: LD_EXP 21
12364: PPUSH
12365: CALL 71027 0 1
12369: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
12370: LD_STRING setGameSaveCounter(
12372: PUSH
12373: LD_EXP 21
12377: STR
12378: PUSH
12379: LD_STRING )
12381: STR
12382: PPUSH
12383: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
12387: LD_STRING setGameDifficulty(
12389: PUSH
12390: LD_OWVAR 67
12394: STR
12395: PUSH
12396: LD_STRING )
12398: STR
12399: PPUSH
12400: CALL_OW 559
// end ;
12404: LD_VAR 0 1
12408: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
12409: LD_INT 0
12411: PPUSH
// if p2 = stream_mode then
12412: LD_VAR 0 2
12416: PUSH
12417: LD_INT 100
12419: EQUAL
12420: IFFALSE 13423
// begin if not StreamModeActive then
12422: LD_EXP 22
12426: NOT
12427: IFFALSE 12437
// StreamModeActive := true ;
12429: LD_ADDR_EXP 22
12433: PUSH
12434: LD_INT 1
12436: ST_TO_ADDR
// if p3 = 0 then
12437: LD_VAR 0 3
12441: PUSH
12442: LD_INT 0
12444: EQUAL
12445: IFFALSE 12451
// InitStreamMode ;
12447: CALL 13627 0 0
// if p3 = 1 then
12451: LD_VAR 0 3
12455: PUSH
12456: LD_INT 1
12458: EQUAL
12459: IFFALSE 12469
// sRocket := true ;
12461: LD_ADDR_EXP 27
12465: PUSH
12466: LD_INT 1
12468: ST_TO_ADDR
// if p3 = 2 then
12469: LD_VAR 0 3
12473: PUSH
12474: LD_INT 2
12476: EQUAL
12477: IFFALSE 12487
// sSpeed := true ;
12479: LD_ADDR_EXP 26
12483: PUSH
12484: LD_INT 1
12486: ST_TO_ADDR
// if p3 = 3 then
12487: LD_VAR 0 3
12491: PUSH
12492: LD_INT 3
12494: EQUAL
12495: IFFALSE 12505
// sEngine := true ;
12497: LD_ADDR_EXP 28
12501: PUSH
12502: LD_INT 1
12504: ST_TO_ADDR
// if p3 = 4 then
12505: LD_VAR 0 3
12509: PUSH
12510: LD_INT 4
12512: EQUAL
12513: IFFALSE 12523
// sSpec := true ;
12515: LD_ADDR_EXP 25
12519: PUSH
12520: LD_INT 1
12522: ST_TO_ADDR
// if p3 = 5 then
12523: LD_VAR 0 3
12527: PUSH
12528: LD_INT 5
12530: EQUAL
12531: IFFALSE 12541
// sLevel := true ;
12533: LD_ADDR_EXP 29
12537: PUSH
12538: LD_INT 1
12540: ST_TO_ADDR
// if p3 = 6 then
12541: LD_VAR 0 3
12545: PUSH
12546: LD_INT 6
12548: EQUAL
12549: IFFALSE 12559
// sArmoury := true ;
12551: LD_ADDR_EXP 30
12555: PUSH
12556: LD_INT 1
12558: ST_TO_ADDR
// if p3 = 7 then
12559: LD_VAR 0 3
12563: PUSH
12564: LD_INT 7
12566: EQUAL
12567: IFFALSE 12577
// sRadar := true ;
12569: LD_ADDR_EXP 31
12573: PUSH
12574: LD_INT 1
12576: ST_TO_ADDR
// if p3 = 8 then
12577: LD_VAR 0 3
12581: PUSH
12582: LD_INT 8
12584: EQUAL
12585: IFFALSE 12595
// sBunker := true ;
12587: LD_ADDR_EXP 32
12591: PUSH
12592: LD_INT 1
12594: ST_TO_ADDR
// if p3 = 9 then
12595: LD_VAR 0 3
12599: PUSH
12600: LD_INT 9
12602: EQUAL
12603: IFFALSE 12613
// sHack := true ;
12605: LD_ADDR_EXP 33
12609: PUSH
12610: LD_INT 1
12612: ST_TO_ADDR
// if p3 = 10 then
12613: LD_VAR 0 3
12617: PUSH
12618: LD_INT 10
12620: EQUAL
12621: IFFALSE 12631
// sFire := true ;
12623: LD_ADDR_EXP 34
12627: PUSH
12628: LD_INT 1
12630: ST_TO_ADDR
// if p3 = 11 then
12631: LD_VAR 0 3
12635: PUSH
12636: LD_INT 11
12638: EQUAL
12639: IFFALSE 12649
// sRefresh := true ;
12641: LD_ADDR_EXP 35
12645: PUSH
12646: LD_INT 1
12648: ST_TO_ADDR
// if p3 = 12 then
12649: LD_VAR 0 3
12653: PUSH
12654: LD_INT 12
12656: EQUAL
12657: IFFALSE 12667
// sExp := true ;
12659: LD_ADDR_EXP 36
12663: PUSH
12664: LD_INT 1
12666: ST_TO_ADDR
// if p3 = 13 then
12667: LD_VAR 0 3
12671: PUSH
12672: LD_INT 13
12674: EQUAL
12675: IFFALSE 12685
// sDepot := true ;
12677: LD_ADDR_EXP 37
12681: PUSH
12682: LD_INT 1
12684: ST_TO_ADDR
// if p3 = 14 then
12685: LD_VAR 0 3
12689: PUSH
12690: LD_INT 14
12692: EQUAL
12693: IFFALSE 12703
// sFlag := true ;
12695: LD_ADDR_EXP 38
12699: PUSH
12700: LD_INT 1
12702: ST_TO_ADDR
// if p3 = 15 then
12703: LD_VAR 0 3
12707: PUSH
12708: LD_INT 15
12710: EQUAL
12711: IFFALSE 12721
// sKamikadze := true ;
12713: LD_ADDR_EXP 46
12717: PUSH
12718: LD_INT 1
12720: ST_TO_ADDR
// if p3 = 16 then
12721: LD_VAR 0 3
12725: PUSH
12726: LD_INT 16
12728: EQUAL
12729: IFFALSE 12739
// sTroll := true ;
12731: LD_ADDR_EXP 47
12735: PUSH
12736: LD_INT 1
12738: ST_TO_ADDR
// if p3 = 17 then
12739: LD_VAR 0 3
12743: PUSH
12744: LD_INT 17
12746: EQUAL
12747: IFFALSE 12757
// sSlow := true ;
12749: LD_ADDR_EXP 48
12753: PUSH
12754: LD_INT 1
12756: ST_TO_ADDR
// if p3 = 18 then
12757: LD_VAR 0 3
12761: PUSH
12762: LD_INT 18
12764: EQUAL
12765: IFFALSE 12775
// sLack := true ;
12767: LD_ADDR_EXP 49
12771: PUSH
12772: LD_INT 1
12774: ST_TO_ADDR
// if p3 = 19 then
12775: LD_VAR 0 3
12779: PUSH
12780: LD_INT 19
12782: EQUAL
12783: IFFALSE 12793
// sTank := true ;
12785: LD_ADDR_EXP 51
12789: PUSH
12790: LD_INT 1
12792: ST_TO_ADDR
// if p3 = 20 then
12793: LD_VAR 0 3
12797: PUSH
12798: LD_INT 20
12800: EQUAL
12801: IFFALSE 12811
// sRemote := true ;
12803: LD_ADDR_EXP 52
12807: PUSH
12808: LD_INT 1
12810: ST_TO_ADDR
// if p3 = 21 then
12811: LD_VAR 0 3
12815: PUSH
12816: LD_INT 21
12818: EQUAL
12819: IFFALSE 12829
// sPowell := true ;
12821: LD_ADDR_EXP 53
12825: PUSH
12826: LD_INT 1
12828: ST_TO_ADDR
// if p3 = 22 then
12829: LD_VAR 0 3
12833: PUSH
12834: LD_INT 22
12836: EQUAL
12837: IFFALSE 12847
// sTeleport := true ;
12839: LD_ADDR_EXP 56
12843: PUSH
12844: LD_INT 1
12846: ST_TO_ADDR
// if p3 = 23 then
12847: LD_VAR 0 3
12851: PUSH
12852: LD_INT 23
12854: EQUAL
12855: IFFALSE 12865
// sOilTower := true ;
12857: LD_ADDR_EXP 58
12861: PUSH
12862: LD_INT 1
12864: ST_TO_ADDR
// if p3 = 24 then
12865: LD_VAR 0 3
12869: PUSH
12870: LD_INT 24
12872: EQUAL
12873: IFFALSE 12883
// sShovel := true ;
12875: LD_ADDR_EXP 59
12879: PUSH
12880: LD_INT 1
12882: ST_TO_ADDR
// if p3 = 25 then
12883: LD_VAR 0 3
12887: PUSH
12888: LD_INT 25
12890: EQUAL
12891: IFFALSE 12901
// sSheik := true ;
12893: LD_ADDR_EXP 60
12897: PUSH
12898: LD_INT 1
12900: ST_TO_ADDR
// if p3 = 26 then
12901: LD_VAR 0 3
12905: PUSH
12906: LD_INT 26
12908: EQUAL
12909: IFFALSE 12919
// sEarthquake := true ;
12911: LD_ADDR_EXP 62
12915: PUSH
12916: LD_INT 1
12918: ST_TO_ADDR
// if p3 = 27 then
12919: LD_VAR 0 3
12923: PUSH
12924: LD_INT 27
12926: EQUAL
12927: IFFALSE 12937
// sAI := true ;
12929: LD_ADDR_EXP 63
12933: PUSH
12934: LD_INT 1
12936: ST_TO_ADDR
// if p3 = 28 then
12937: LD_VAR 0 3
12941: PUSH
12942: LD_INT 28
12944: EQUAL
12945: IFFALSE 12955
// sCargo := true ;
12947: LD_ADDR_EXP 66
12951: PUSH
12952: LD_INT 1
12954: ST_TO_ADDR
// if p3 = 29 then
12955: LD_VAR 0 3
12959: PUSH
12960: LD_INT 29
12962: EQUAL
12963: IFFALSE 12973
// sDLaser := true ;
12965: LD_ADDR_EXP 67
12969: PUSH
12970: LD_INT 1
12972: ST_TO_ADDR
// if p3 = 30 then
12973: LD_VAR 0 3
12977: PUSH
12978: LD_INT 30
12980: EQUAL
12981: IFFALSE 12991
// sExchange := true ;
12983: LD_ADDR_EXP 68
12987: PUSH
12988: LD_INT 1
12990: ST_TO_ADDR
// if p3 = 31 then
12991: LD_VAR 0 3
12995: PUSH
12996: LD_INT 31
12998: EQUAL
12999: IFFALSE 13009
// sFac := true ;
13001: LD_ADDR_EXP 69
13005: PUSH
13006: LD_INT 1
13008: ST_TO_ADDR
// if p3 = 32 then
13009: LD_VAR 0 3
13013: PUSH
13014: LD_INT 32
13016: EQUAL
13017: IFFALSE 13027
// sPower := true ;
13019: LD_ADDR_EXP 70
13023: PUSH
13024: LD_INT 1
13026: ST_TO_ADDR
// if p3 = 33 then
13027: LD_VAR 0 3
13031: PUSH
13032: LD_INT 33
13034: EQUAL
13035: IFFALSE 13045
// sRandom := true ;
13037: LD_ADDR_EXP 71
13041: PUSH
13042: LD_INT 1
13044: ST_TO_ADDR
// if p3 = 34 then
13045: LD_VAR 0 3
13049: PUSH
13050: LD_INT 34
13052: EQUAL
13053: IFFALSE 13063
// sShield := true ;
13055: LD_ADDR_EXP 72
13059: PUSH
13060: LD_INT 1
13062: ST_TO_ADDR
// if p3 = 35 then
13063: LD_VAR 0 3
13067: PUSH
13068: LD_INT 35
13070: EQUAL
13071: IFFALSE 13081
// sTime := true ;
13073: LD_ADDR_EXP 73
13077: PUSH
13078: LD_INT 1
13080: ST_TO_ADDR
// if p3 = 36 then
13081: LD_VAR 0 3
13085: PUSH
13086: LD_INT 36
13088: EQUAL
13089: IFFALSE 13099
// sTools := true ;
13091: LD_ADDR_EXP 74
13095: PUSH
13096: LD_INT 1
13098: ST_TO_ADDR
// if p3 = 101 then
13099: LD_VAR 0 3
13103: PUSH
13104: LD_INT 101
13106: EQUAL
13107: IFFALSE 13117
// sSold := true ;
13109: LD_ADDR_EXP 39
13113: PUSH
13114: LD_INT 1
13116: ST_TO_ADDR
// if p3 = 102 then
13117: LD_VAR 0 3
13121: PUSH
13122: LD_INT 102
13124: EQUAL
13125: IFFALSE 13135
// sDiff := true ;
13127: LD_ADDR_EXP 40
13131: PUSH
13132: LD_INT 1
13134: ST_TO_ADDR
// if p3 = 103 then
13135: LD_VAR 0 3
13139: PUSH
13140: LD_INT 103
13142: EQUAL
13143: IFFALSE 13153
// sFog := true ;
13145: LD_ADDR_EXP 43
13149: PUSH
13150: LD_INT 1
13152: ST_TO_ADDR
// if p3 = 104 then
13153: LD_VAR 0 3
13157: PUSH
13158: LD_INT 104
13160: EQUAL
13161: IFFALSE 13171
// sReset := true ;
13163: LD_ADDR_EXP 44
13167: PUSH
13168: LD_INT 1
13170: ST_TO_ADDR
// if p3 = 105 then
13171: LD_VAR 0 3
13175: PUSH
13176: LD_INT 105
13178: EQUAL
13179: IFFALSE 13189
// sSun := true ;
13181: LD_ADDR_EXP 45
13185: PUSH
13186: LD_INT 1
13188: ST_TO_ADDR
// if p3 = 106 then
13189: LD_VAR 0 3
13193: PUSH
13194: LD_INT 106
13196: EQUAL
13197: IFFALSE 13207
// sTiger := true ;
13199: LD_ADDR_EXP 41
13203: PUSH
13204: LD_INT 1
13206: ST_TO_ADDR
// if p3 = 107 then
13207: LD_VAR 0 3
13211: PUSH
13212: LD_INT 107
13214: EQUAL
13215: IFFALSE 13225
// sBomb := true ;
13217: LD_ADDR_EXP 42
13221: PUSH
13222: LD_INT 1
13224: ST_TO_ADDR
// if p3 = 108 then
13225: LD_VAR 0 3
13229: PUSH
13230: LD_INT 108
13232: EQUAL
13233: IFFALSE 13243
// sWound := true ;
13235: LD_ADDR_EXP 50
13239: PUSH
13240: LD_INT 1
13242: ST_TO_ADDR
// if p3 = 109 then
13243: LD_VAR 0 3
13247: PUSH
13248: LD_INT 109
13250: EQUAL
13251: IFFALSE 13261
// sBetray := true ;
13253: LD_ADDR_EXP 54
13257: PUSH
13258: LD_INT 1
13260: ST_TO_ADDR
// if p3 = 110 then
13261: LD_VAR 0 3
13265: PUSH
13266: LD_INT 110
13268: EQUAL
13269: IFFALSE 13279
// sContamin := true ;
13271: LD_ADDR_EXP 55
13275: PUSH
13276: LD_INT 1
13278: ST_TO_ADDR
// if p3 = 111 then
13279: LD_VAR 0 3
13283: PUSH
13284: LD_INT 111
13286: EQUAL
13287: IFFALSE 13297
// sOil := true ;
13289: LD_ADDR_EXP 57
13293: PUSH
13294: LD_INT 1
13296: ST_TO_ADDR
// if p3 = 112 then
13297: LD_VAR 0 3
13301: PUSH
13302: LD_INT 112
13304: EQUAL
13305: IFFALSE 13315
// sStu := true ;
13307: LD_ADDR_EXP 61
13311: PUSH
13312: LD_INT 1
13314: ST_TO_ADDR
// if p3 = 113 then
13315: LD_VAR 0 3
13319: PUSH
13320: LD_INT 113
13322: EQUAL
13323: IFFALSE 13333
// sBazooka := true ;
13325: LD_ADDR_EXP 64
13329: PUSH
13330: LD_INT 1
13332: ST_TO_ADDR
// if p3 = 114 then
13333: LD_VAR 0 3
13337: PUSH
13338: LD_INT 114
13340: EQUAL
13341: IFFALSE 13351
// sMortar := true ;
13343: LD_ADDR_EXP 65
13347: PUSH
13348: LD_INT 1
13350: ST_TO_ADDR
// if p3 = 115 then
13351: LD_VAR 0 3
13355: PUSH
13356: LD_INT 115
13358: EQUAL
13359: IFFALSE 13369
// sRanger := true ;
13361: LD_ADDR_EXP 75
13365: PUSH
13366: LD_INT 1
13368: ST_TO_ADDR
// if p3 = 116 then
13369: LD_VAR 0 3
13373: PUSH
13374: LD_INT 116
13376: EQUAL
13377: IFFALSE 13387
// sComputer := true ;
13379: LD_ADDR_EXP 76
13383: PUSH
13384: LD_INT 1
13386: ST_TO_ADDR
// if p3 = 117 then
13387: LD_VAR 0 3
13391: PUSH
13392: LD_INT 117
13394: EQUAL
13395: IFFALSE 13405
// s30 := true ;
13397: LD_ADDR_EXP 77
13401: PUSH
13402: LD_INT 1
13404: ST_TO_ADDR
// if p3 = 118 then
13405: LD_VAR 0 3
13409: PUSH
13410: LD_INT 118
13412: EQUAL
13413: IFFALSE 13423
// s60 := true ;
13415: LD_ADDR_EXP 78
13419: PUSH
13420: LD_INT 1
13422: ST_TO_ADDR
// end ; if p2 = hack_mode then
13423: LD_VAR 0 2
13427: PUSH
13428: LD_INT 101
13430: EQUAL
13431: IFFALSE 13559
// begin case p3 of 1 :
13433: LD_VAR 0 3
13437: PUSH
13438: LD_INT 1
13440: DOUBLE
13441: EQUAL
13442: IFTRUE 13446
13444: GO 13453
13446: POP
// hHackUnlimitedResources ; 2 :
13447: CALL 25706 0 0
13451: GO 13559
13453: LD_INT 2
13455: DOUBLE
13456: EQUAL
13457: IFTRUE 13461
13459: GO 13468
13461: POP
// hHackSetLevel10 ; 3 :
13462: CALL 25839 0 0
13466: GO 13559
13468: LD_INT 3
13470: DOUBLE
13471: EQUAL
13472: IFTRUE 13476
13474: GO 13483
13476: POP
// hHackSetLevel10YourUnits ; 4 :
13477: CALL 25924 0 0
13481: GO 13559
13483: LD_INT 4
13485: DOUBLE
13486: EQUAL
13487: IFTRUE 13491
13489: GO 13498
13491: POP
// hHackInvincible ; 5 :
13492: CALL 26372 0 0
13496: GO 13559
13498: LD_INT 5
13500: DOUBLE
13501: EQUAL
13502: IFTRUE 13506
13504: GO 13513
13506: POP
// hHackInvisible ; 6 :
13507: CALL 26483 0 0
13511: GO 13559
13513: LD_INT 6
13515: DOUBLE
13516: EQUAL
13517: IFTRUE 13521
13519: GO 13528
13521: POP
// hHackChangeYourSide ; 7 :
13522: CALL 26540 0 0
13526: GO 13559
13528: LD_INT 7
13530: DOUBLE
13531: EQUAL
13532: IFTRUE 13536
13534: GO 13543
13536: POP
// hHackChangeUnitSide ; 8 :
13537: CALL 26582 0 0
13541: GO 13559
13543: LD_INT 8
13545: DOUBLE
13546: EQUAL
13547: IFTRUE 13551
13549: GO 13558
13551: POP
// hHackFog ; end ;
13552: CALL 26683 0 0
13556: GO 13559
13558: POP
// end ; if p2 = game_save_mode then
13559: LD_VAR 0 2
13563: PUSH
13564: LD_INT 102
13566: EQUAL
13567: IFFALSE 13622
// begin if p3 = 1 then
13569: LD_VAR 0 3
13573: PUSH
13574: LD_INT 1
13576: EQUAL
13577: IFFALSE 13589
// globalGameSaveCounter := p4 ;
13579: LD_ADDR_EXP 21
13583: PUSH
13584: LD_VAR 0 4
13588: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
13589: LD_VAR 0 3
13593: PUSH
13594: LD_INT 2
13596: EQUAL
13597: PUSH
13598: LD_EXP 21
13602: AND
13603: IFFALSE 13622
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
13605: LD_STRING setGameSaveCounter(
13607: PUSH
13608: LD_EXP 21
13612: STR
13613: PUSH
13614: LD_STRING )
13616: STR
13617: PPUSH
13618: CALL_OW 559
// end ; end ;
13622: LD_VAR 0 7
13626: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
13627: LD_INT 0
13629: PPUSH
// streamModeActive := false ;
13630: LD_ADDR_EXP 22
13634: PUSH
13635: LD_INT 0
13637: ST_TO_ADDR
// normalCounter := 36 ;
13638: LD_ADDR_EXP 23
13642: PUSH
13643: LD_INT 36
13645: ST_TO_ADDR
// hardcoreCounter := 18 ;
13646: LD_ADDR_EXP 24
13650: PUSH
13651: LD_INT 18
13653: ST_TO_ADDR
// sRocket := false ;
13654: LD_ADDR_EXP 27
13658: PUSH
13659: LD_INT 0
13661: ST_TO_ADDR
// sSpeed := false ;
13662: LD_ADDR_EXP 26
13666: PUSH
13667: LD_INT 0
13669: ST_TO_ADDR
// sEngine := false ;
13670: LD_ADDR_EXP 28
13674: PUSH
13675: LD_INT 0
13677: ST_TO_ADDR
// sSpec := false ;
13678: LD_ADDR_EXP 25
13682: PUSH
13683: LD_INT 0
13685: ST_TO_ADDR
// sLevel := false ;
13686: LD_ADDR_EXP 29
13690: PUSH
13691: LD_INT 0
13693: ST_TO_ADDR
// sArmoury := false ;
13694: LD_ADDR_EXP 30
13698: PUSH
13699: LD_INT 0
13701: ST_TO_ADDR
// sRadar := false ;
13702: LD_ADDR_EXP 31
13706: PUSH
13707: LD_INT 0
13709: ST_TO_ADDR
// sBunker := false ;
13710: LD_ADDR_EXP 32
13714: PUSH
13715: LD_INT 0
13717: ST_TO_ADDR
// sHack := false ;
13718: LD_ADDR_EXP 33
13722: PUSH
13723: LD_INT 0
13725: ST_TO_ADDR
// sFire := false ;
13726: LD_ADDR_EXP 34
13730: PUSH
13731: LD_INT 0
13733: ST_TO_ADDR
// sRefresh := false ;
13734: LD_ADDR_EXP 35
13738: PUSH
13739: LD_INT 0
13741: ST_TO_ADDR
// sExp := false ;
13742: LD_ADDR_EXP 36
13746: PUSH
13747: LD_INT 0
13749: ST_TO_ADDR
// sDepot := false ;
13750: LD_ADDR_EXP 37
13754: PUSH
13755: LD_INT 0
13757: ST_TO_ADDR
// sFlag := false ;
13758: LD_ADDR_EXP 38
13762: PUSH
13763: LD_INT 0
13765: ST_TO_ADDR
// sKamikadze := false ;
13766: LD_ADDR_EXP 46
13770: PUSH
13771: LD_INT 0
13773: ST_TO_ADDR
// sTroll := false ;
13774: LD_ADDR_EXP 47
13778: PUSH
13779: LD_INT 0
13781: ST_TO_ADDR
// sSlow := false ;
13782: LD_ADDR_EXP 48
13786: PUSH
13787: LD_INT 0
13789: ST_TO_ADDR
// sLack := false ;
13790: LD_ADDR_EXP 49
13794: PUSH
13795: LD_INT 0
13797: ST_TO_ADDR
// sTank := false ;
13798: LD_ADDR_EXP 51
13802: PUSH
13803: LD_INT 0
13805: ST_TO_ADDR
// sRemote := false ;
13806: LD_ADDR_EXP 52
13810: PUSH
13811: LD_INT 0
13813: ST_TO_ADDR
// sPowell := false ;
13814: LD_ADDR_EXP 53
13818: PUSH
13819: LD_INT 0
13821: ST_TO_ADDR
// sTeleport := false ;
13822: LD_ADDR_EXP 56
13826: PUSH
13827: LD_INT 0
13829: ST_TO_ADDR
// sOilTower := false ;
13830: LD_ADDR_EXP 58
13834: PUSH
13835: LD_INT 0
13837: ST_TO_ADDR
// sShovel := false ;
13838: LD_ADDR_EXP 59
13842: PUSH
13843: LD_INT 0
13845: ST_TO_ADDR
// sSheik := false ;
13846: LD_ADDR_EXP 60
13850: PUSH
13851: LD_INT 0
13853: ST_TO_ADDR
// sEarthquake := false ;
13854: LD_ADDR_EXP 62
13858: PUSH
13859: LD_INT 0
13861: ST_TO_ADDR
// sAI := false ;
13862: LD_ADDR_EXP 63
13866: PUSH
13867: LD_INT 0
13869: ST_TO_ADDR
// sCargo := false ;
13870: LD_ADDR_EXP 66
13874: PUSH
13875: LD_INT 0
13877: ST_TO_ADDR
// sDLaser := false ;
13878: LD_ADDR_EXP 67
13882: PUSH
13883: LD_INT 0
13885: ST_TO_ADDR
// sExchange := false ;
13886: LD_ADDR_EXP 68
13890: PUSH
13891: LD_INT 0
13893: ST_TO_ADDR
// sFac := false ;
13894: LD_ADDR_EXP 69
13898: PUSH
13899: LD_INT 0
13901: ST_TO_ADDR
// sPower := false ;
13902: LD_ADDR_EXP 70
13906: PUSH
13907: LD_INT 0
13909: ST_TO_ADDR
// sRandom := false ;
13910: LD_ADDR_EXP 71
13914: PUSH
13915: LD_INT 0
13917: ST_TO_ADDR
// sShield := false ;
13918: LD_ADDR_EXP 72
13922: PUSH
13923: LD_INT 0
13925: ST_TO_ADDR
// sTime := false ;
13926: LD_ADDR_EXP 73
13930: PUSH
13931: LD_INT 0
13933: ST_TO_ADDR
// sTools := false ;
13934: LD_ADDR_EXP 74
13938: PUSH
13939: LD_INT 0
13941: ST_TO_ADDR
// sSold := false ;
13942: LD_ADDR_EXP 39
13946: PUSH
13947: LD_INT 0
13949: ST_TO_ADDR
// sDiff := false ;
13950: LD_ADDR_EXP 40
13954: PUSH
13955: LD_INT 0
13957: ST_TO_ADDR
// sFog := false ;
13958: LD_ADDR_EXP 43
13962: PUSH
13963: LD_INT 0
13965: ST_TO_ADDR
// sReset := false ;
13966: LD_ADDR_EXP 44
13970: PUSH
13971: LD_INT 0
13973: ST_TO_ADDR
// sSun := false ;
13974: LD_ADDR_EXP 45
13978: PUSH
13979: LD_INT 0
13981: ST_TO_ADDR
// sTiger := false ;
13982: LD_ADDR_EXP 41
13986: PUSH
13987: LD_INT 0
13989: ST_TO_ADDR
// sBomb := false ;
13990: LD_ADDR_EXP 42
13994: PUSH
13995: LD_INT 0
13997: ST_TO_ADDR
// sWound := false ;
13998: LD_ADDR_EXP 50
14002: PUSH
14003: LD_INT 0
14005: ST_TO_ADDR
// sBetray := false ;
14006: LD_ADDR_EXP 54
14010: PUSH
14011: LD_INT 0
14013: ST_TO_ADDR
// sContamin := false ;
14014: LD_ADDR_EXP 55
14018: PUSH
14019: LD_INT 0
14021: ST_TO_ADDR
// sOil := false ;
14022: LD_ADDR_EXP 57
14026: PUSH
14027: LD_INT 0
14029: ST_TO_ADDR
// sStu := false ;
14030: LD_ADDR_EXP 61
14034: PUSH
14035: LD_INT 0
14037: ST_TO_ADDR
// sBazooka := false ;
14038: LD_ADDR_EXP 64
14042: PUSH
14043: LD_INT 0
14045: ST_TO_ADDR
// sMortar := false ;
14046: LD_ADDR_EXP 65
14050: PUSH
14051: LD_INT 0
14053: ST_TO_ADDR
// sRanger := false ;
14054: LD_ADDR_EXP 75
14058: PUSH
14059: LD_INT 0
14061: ST_TO_ADDR
// sComputer := false ;
14062: LD_ADDR_EXP 76
14066: PUSH
14067: LD_INT 0
14069: ST_TO_ADDR
// s30 := false ;
14070: LD_ADDR_EXP 77
14074: PUSH
14075: LD_INT 0
14077: ST_TO_ADDR
// s60 := false ;
14078: LD_ADDR_EXP 78
14082: PUSH
14083: LD_INT 0
14085: ST_TO_ADDR
// end ;
14086: LD_VAR 0 1
14090: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
14091: LD_INT 0
14093: PPUSH
14094: PPUSH
14095: PPUSH
14096: PPUSH
14097: PPUSH
14098: PPUSH
14099: PPUSH
// result := [ ] ;
14100: LD_ADDR_VAR 0 2
14104: PUSH
14105: EMPTY
14106: ST_TO_ADDR
// if campaign_id = 1 then
14107: LD_OWVAR 69
14111: PUSH
14112: LD_INT 1
14114: EQUAL
14115: IFFALSE 17281
// begin case mission_number of 1 :
14117: LD_OWVAR 70
14121: PUSH
14122: LD_INT 1
14124: DOUBLE
14125: EQUAL
14126: IFTRUE 14130
14128: GO 14206
14130: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
14131: LD_ADDR_VAR 0 2
14135: PUSH
14136: LD_INT 2
14138: PUSH
14139: LD_INT 4
14141: PUSH
14142: LD_INT 11
14144: PUSH
14145: LD_INT 12
14147: PUSH
14148: LD_INT 15
14150: PUSH
14151: LD_INT 16
14153: PUSH
14154: LD_INT 22
14156: PUSH
14157: LD_INT 23
14159: PUSH
14160: LD_INT 26
14162: PUSH
14163: EMPTY
14164: LIST
14165: LIST
14166: LIST
14167: LIST
14168: LIST
14169: LIST
14170: LIST
14171: LIST
14172: LIST
14173: PUSH
14174: LD_INT 101
14176: PUSH
14177: LD_INT 102
14179: PUSH
14180: LD_INT 106
14182: PUSH
14183: LD_INT 116
14185: PUSH
14186: LD_INT 117
14188: PUSH
14189: LD_INT 118
14191: PUSH
14192: EMPTY
14193: LIST
14194: LIST
14195: LIST
14196: LIST
14197: LIST
14198: LIST
14199: PUSH
14200: EMPTY
14201: LIST
14202: LIST
14203: ST_TO_ADDR
14204: GO 17279
14206: LD_INT 2
14208: DOUBLE
14209: EQUAL
14210: IFTRUE 14214
14212: GO 14298
14214: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
14215: LD_ADDR_VAR 0 2
14219: PUSH
14220: LD_INT 2
14222: PUSH
14223: LD_INT 4
14225: PUSH
14226: LD_INT 11
14228: PUSH
14229: LD_INT 12
14231: PUSH
14232: LD_INT 15
14234: PUSH
14235: LD_INT 16
14237: PUSH
14238: LD_INT 22
14240: PUSH
14241: LD_INT 23
14243: PUSH
14244: LD_INT 26
14246: PUSH
14247: EMPTY
14248: LIST
14249: LIST
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: PUSH
14258: LD_INT 101
14260: PUSH
14261: LD_INT 102
14263: PUSH
14264: LD_INT 105
14266: PUSH
14267: LD_INT 106
14269: PUSH
14270: LD_INT 108
14272: PUSH
14273: LD_INT 116
14275: PUSH
14276: LD_INT 117
14278: PUSH
14279: LD_INT 118
14281: PUSH
14282: EMPTY
14283: LIST
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: LIST
14291: PUSH
14292: EMPTY
14293: LIST
14294: LIST
14295: ST_TO_ADDR
14296: GO 17279
14298: LD_INT 3
14300: DOUBLE
14301: EQUAL
14302: IFTRUE 14306
14304: GO 14394
14306: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
14307: LD_ADDR_VAR 0 2
14311: PUSH
14312: LD_INT 2
14314: PUSH
14315: LD_INT 4
14317: PUSH
14318: LD_INT 5
14320: PUSH
14321: LD_INT 11
14323: PUSH
14324: LD_INT 12
14326: PUSH
14327: LD_INT 15
14329: PUSH
14330: LD_INT 16
14332: PUSH
14333: LD_INT 22
14335: PUSH
14336: LD_INT 26
14338: PUSH
14339: LD_INT 36
14341: PUSH
14342: EMPTY
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: PUSH
14354: LD_INT 101
14356: PUSH
14357: LD_INT 102
14359: PUSH
14360: LD_INT 105
14362: PUSH
14363: LD_INT 106
14365: PUSH
14366: LD_INT 108
14368: PUSH
14369: LD_INT 116
14371: PUSH
14372: LD_INT 117
14374: PUSH
14375: LD_INT 118
14377: PUSH
14378: EMPTY
14379: LIST
14380: LIST
14381: LIST
14382: LIST
14383: LIST
14384: LIST
14385: LIST
14386: LIST
14387: PUSH
14388: EMPTY
14389: LIST
14390: LIST
14391: ST_TO_ADDR
14392: GO 17279
14394: LD_INT 4
14396: DOUBLE
14397: EQUAL
14398: IFTRUE 14402
14400: GO 14498
14402: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
14403: LD_ADDR_VAR 0 2
14407: PUSH
14408: LD_INT 2
14410: PUSH
14411: LD_INT 4
14413: PUSH
14414: LD_INT 5
14416: PUSH
14417: LD_INT 8
14419: PUSH
14420: LD_INT 11
14422: PUSH
14423: LD_INT 12
14425: PUSH
14426: LD_INT 15
14428: PUSH
14429: LD_INT 16
14431: PUSH
14432: LD_INT 22
14434: PUSH
14435: LD_INT 23
14437: PUSH
14438: LD_INT 26
14440: PUSH
14441: LD_INT 36
14443: PUSH
14444: EMPTY
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: PUSH
14458: LD_INT 101
14460: PUSH
14461: LD_INT 102
14463: PUSH
14464: LD_INT 105
14466: PUSH
14467: LD_INT 106
14469: PUSH
14470: LD_INT 108
14472: PUSH
14473: LD_INT 116
14475: PUSH
14476: LD_INT 117
14478: PUSH
14479: LD_INT 118
14481: PUSH
14482: EMPTY
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: PUSH
14492: EMPTY
14493: LIST
14494: LIST
14495: ST_TO_ADDR
14496: GO 17279
14498: LD_INT 5
14500: DOUBLE
14501: EQUAL
14502: IFTRUE 14506
14504: GO 14618
14506: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
14507: LD_ADDR_VAR 0 2
14511: PUSH
14512: LD_INT 2
14514: PUSH
14515: LD_INT 4
14517: PUSH
14518: LD_INT 5
14520: PUSH
14521: LD_INT 6
14523: PUSH
14524: LD_INT 8
14526: PUSH
14527: LD_INT 11
14529: PUSH
14530: LD_INT 12
14532: PUSH
14533: LD_INT 15
14535: PUSH
14536: LD_INT 16
14538: PUSH
14539: LD_INT 22
14541: PUSH
14542: LD_INT 23
14544: PUSH
14545: LD_INT 25
14547: PUSH
14548: LD_INT 26
14550: PUSH
14551: LD_INT 36
14553: PUSH
14554: EMPTY
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: LIST
14568: LIST
14569: PUSH
14570: LD_INT 101
14572: PUSH
14573: LD_INT 102
14575: PUSH
14576: LD_INT 105
14578: PUSH
14579: LD_INT 106
14581: PUSH
14582: LD_INT 108
14584: PUSH
14585: LD_INT 109
14587: PUSH
14588: LD_INT 112
14590: PUSH
14591: LD_INT 116
14593: PUSH
14594: LD_INT 117
14596: PUSH
14597: LD_INT 118
14599: PUSH
14600: EMPTY
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: LIST
14606: LIST
14607: LIST
14608: LIST
14609: LIST
14610: LIST
14611: PUSH
14612: EMPTY
14613: LIST
14614: LIST
14615: ST_TO_ADDR
14616: GO 17279
14618: LD_INT 6
14620: DOUBLE
14621: EQUAL
14622: IFTRUE 14626
14624: GO 14758
14626: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
14627: LD_ADDR_VAR 0 2
14631: PUSH
14632: LD_INT 2
14634: PUSH
14635: LD_INT 4
14637: PUSH
14638: LD_INT 5
14640: PUSH
14641: LD_INT 6
14643: PUSH
14644: LD_INT 8
14646: PUSH
14647: LD_INT 11
14649: PUSH
14650: LD_INT 12
14652: PUSH
14653: LD_INT 15
14655: PUSH
14656: LD_INT 16
14658: PUSH
14659: LD_INT 20
14661: PUSH
14662: LD_INT 21
14664: PUSH
14665: LD_INT 22
14667: PUSH
14668: LD_INT 23
14670: PUSH
14671: LD_INT 25
14673: PUSH
14674: LD_INT 26
14676: PUSH
14677: LD_INT 30
14679: PUSH
14680: LD_INT 31
14682: PUSH
14683: LD_INT 32
14685: PUSH
14686: LD_INT 36
14688: PUSH
14689: EMPTY
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: PUSH
14710: LD_INT 101
14712: PUSH
14713: LD_INT 102
14715: PUSH
14716: LD_INT 105
14718: PUSH
14719: LD_INT 106
14721: PUSH
14722: LD_INT 108
14724: PUSH
14725: LD_INT 109
14727: PUSH
14728: LD_INT 112
14730: PUSH
14731: LD_INT 116
14733: PUSH
14734: LD_INT 117
14736: PUSH
14737: LD_INT 118
14739: PUSH
14740: EMPTY
14741: LIST
14742: LIST
14743: LIST
14744: LIST
14745: LIST
14746: LIST
14747: LIST
14748: LIST
14749: LIST
14750: LIST
14751: PUSH
14752: EMPTY
14753: LIST
14754: LIST
14755: ST_TO_ADDR
14756: GO 17279
14758: LD_INT 7
14760: DOUBLE
14761: EQUAL
14762: IFTRUE 14766
14764: GO 14878
14766: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
14767: LD_ADDR_VAR 0 2
14771: PUSH
14772: LD_INT 2
14774: PUSH
14775: LD_INT 4
14777: PUSH
14778: LD_INT 5
14780: PUSH
14781: LD_INT 7
14783: PUSH
14784: LD_INT 11
14786: PUSH
14787: LD_INT 12
14789: PUSH
14790: LD_INT 15
14792: PUSH
14793: LD_INT 16
14795: PUSH
14796: LD_INT 20
14798: PUSH
14799: LD_INT 21
14801: PUSH
14802: LD_INT 22
14804: PUSH
14805: LD_INT 23
14807: PUSH
14808: LD_INT 25
14810: PUSH
14811: LD_INT 26
14813: PUSH
14814: EMPTY
14815: LIST
14816: LIST
14817: LIST
14818: LIST
14819: LIST
14820: LIST
14821: LIST
14822: LIST
14823: LIST
14824: LIST
14825: LIST
14826: LIST
14827: LIST
14828: LIST
14829: PUSH
14830: LD_INT 101
14832: PUSH
14833: LD_INT 102
14835: PUSH
14836: LD_INT 103
14838: PUSH
14839: LD_INT 105
14841: PUSH
14842: LD_INT 106
14844: PUSH
14845: LD_INT 108
14847: PUSH
14848: LD_INT 112
14850: PUSH
14851: LD_INT 116
14853: PUSH
14854: LD_INT 117
14856: PUSH
14857: LD_INT 118
14859: PUSH
14860: EMPTY
14861: LIST
14862: LIST
14863: LIST
14864: LIST
14865: LIST
14866: LIST
14867: LIST
14868: LIST
14869: LIST
14870: LIST
14871: PUSH
14872: EMPTY
14873: LIST
14874: LIST
14875: ST_TO_ADDR
14876: GO 17279
14878: LD_INT 8
14880: DOUBLE
14881: EQUAL
14882: IFTRUE 14886
14884: GO 15026
14886: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
14887: LD_ADDR_VAR 0 2
14891: PUSH
14892: LD_INT 2
14894: PUSH
14895: LD_INT 4
14897: PUSH
14898: LD_INT 5
14900: PUSH
14901: LD_INT 6
14903: PUSH
14904: LD_INT 7
14906: PUSH
14907: LD_INT 8
14909: PUSH
14910: LD_INT 11
14912: PUSH
14913: LD_INT 12
14915: PUSH
14916: LD_INT 15
14918: PUSH
14919: LD_INT 16
14921: PUSH
14922: LD_INT 20
14924: PUSH
14925: LD_INT 21
14927: PUSH
14928: LD_INT 22
14930: PUSH
14931: LD_INT 23
14933: PUSH
14934: LD_INT 25
14936: PUSH
14937: LD_INT 26
14939: PUSH
14940: LD_INT 30
14942: PUSH
14943: LD_INT 31
14945: PUSH
14946: LD_INT 32
14948: PUSH
14949: LD_INT 36
14951: PUSH
14952: EMPTY
14953: LIST
14954: LIST
14955: LIST
14956: LIST
14957: LIST
14958: LIST
14959: LIST
14960: LIST
14961: LIST
14962: LIST
14963: LIST
14964: LIST
14965: LIST
14966: LIST
14967: LIST
14968: LIST
14969: LIST
14970: LIST
14971: LIST
14972: LIST
14973: PUSH
14974: LD_INT 101
14976: PUSH
14977: LD_INT 102
14979: PUSH
14980: LD_INT 103
14982: PUSH
14983: LD_INT 105
14985: PUSH
14986: LD_INT 106
14988: PUSH
14989: LD_INT 108
14991: PUSH
14992: LD_INT 109
14994: PUSH
14995: LD_INT 112
14997: PUSH
14998: LD_INT 116
15000: PUSH
15001: LD_INT 117
15003: PUSH
15004: LD_INT 118
15006: PUSH
15007: EMPTY
15008: LIST
15009: LIST
15010: LIST
15011: LIST
15012: LIST
15013: LIST
15014: LIST
15015: LIST
15016: LIST
15017: LIST
15018: LIST
15019: PUSH
15020: EMPTY
15021: LIST
15022: LIST
15023: ST_TO_ADDR
15024: GO 17279
15026: LD_INT 9
15028: DOUBLE
15029: EQUAL
15030: IFTRUE 15034
15032: GO 15182
15034: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
15035: LD_ADDR_VAR 0 2
15039: PUSH
15040: LD_INT 2
15042: PUSH
15043: LD_INT 4
15045: PUSH
15046: LD_INT 5
15048: PUSH
15049: LD_INT 6
15051: PUSH
15052: LD_INT 7
15054: PUSH
15055: LD_INT 8
15057: PUSH
15058: LD_INT 11
15060: PUSH
15061: LD_INT 12
15063: PUSH
15064: LD_INT 15
15066: PUSH
15067: LD_INT 16
15069: PUSH
15070: LD_INT 20
15072: PUSH
15073: LD_INT 21
15075: PUSH
15076: LD_INT 22
15078: PUSH
15079: LD_INT 23
15081: PUSH
15082: LD_INT 25
15084: PUSH
15085: LD_INT 26
15087: PUSH
15088: LD_INT 28
15090: PUSH
15091: LD_INT 30
15093: PUSH
15094: LD_INT 31
15096: PUSH
15097: LD_INT 32
15099: PUSH
15100: LD_INT 36
15102: PUSH
15103: EMPTY
15104: LIST
15105: LIST
15106: LIST
15107: LIST
15108: LIST
15109: LIST
15110: LIST
15111: LIST
15112: LIST
15113: LIST
15114: LIST
15115: LIST
15116: LIST
15117: LIST
15118: LIST
15119: LIST
15120: LIST
15121: LIST
15122: LIST
15123: LIST
15124: LIST
15125: PUSH
15126: LD_INT 101
15128: PUSH
15129: LD_INT 102
15131: PUSH
15132: LD_INT 103
15134: PUSH
15135: LD_INT 105
15137: PUSH
15138: LD_INT 106
15140: PUSH
15141: LD_INT 108
15143: PUSH
15144: LD_INT 109
15146: PUSH
15147: LD_INT 112
15149: PUSH
15150: LD_INT 114
15152: PUSH
15153: LD_INT 116
15155: PUSH
15156: LD_INT 117
15158: PUSH
15159: LD_INT 118
15161: PUSH
15162: EMPTY
15163: LIST
15164: LIST
15165: LIST
15166: LIST
15167: LIST
15168: LIST
15169: LIST
15170: LIST
15171: LIST
15172: LIST
15173: LIST
15174: LIST
15175: PUSH
15176: EMPTY
15177: LIST
15178: LIST
15179: ST_TO_ADDR
15180: GO 17279
15182: LD_INT 10
15184: DOUBLE
15185: EQUAL
15186: IFTRUE 15190
15188: GO 15386
15190: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
15191: LD_ADDR_VAR 0 2
15195: PUSH
15196: LD_INT 2
15198: PUSH
15199: LD_INT 4
15201: PUSH
15202: LD_INT 5
15204: PUSH
15205: LD_INT 6
15207: PUSH
15208: LD_INT 7
15210: PUSH
15211: LD_INT 8
15213: PUSH
15214: LD_INT 9
15216: PUSH
15217: LD_INT 10
15219: PUSH
15220: LD_INT 11
15222: PUSH
15223: LD_INT 12
15225: PUSH
15226: LD_INT 13
15228: PUSH
15229: LD_INT 14
15231: PUSH
15232: LD_INT 15
15234: PUSH
15235: LD_INT 16
15237: PUSH
15238: LD_INT 17
15240: PUSH
15241: LD_INT 18
15243: PUSH
15244: LD_INT 19
15246: PUSH
15247: LD_INT 20
15249: PUSH
15250: LD_INT 21
15252: PUSH
15253: LD_INT 22
15255: PUSH
15256: LD_INT 23
15258: PUSH
15259: LD_INT 24
15261: PUSH
15262: LD_INT 25
15264: PUSH
15265: LD_INT 26
15267: PUSH
15268: LD_INT 28
15270: PUSH
15271: LD_INT 30
15273: PUSH
15274: LD_INT 31
15276: PUSH
15277: LD_INT 32
15279: PUSH
15280: LD_INT 36
15282: PUSH
15283: EMPTY
15284: LIST
15285: LIST
15286: LIST
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: LIST
15298: LIST
15299: LIST
15300: LIST
15301: LIST
15302: LIST
15303: LIST
15304: LIST
15305: LIST
15306: LIST
15307: LIST
15308: LIST
15309: LIST
15310: LIST
15311: LIST
15312: LIST
15313: PUSH
15314: LD_INT 101
15316: PUSH
15317: LD_INT 102
15319: PUSH
15320: LD_INT 103
15322: PUSH
15323: LD_INT 104
15325: PUSH
15326: LD_INT 105
15328: PUSH
15329: LD_INT 106
15331: PUSH
15332: LD_INT 107
15334: PUSH
15335: LD_INT 108
15337: PUSH
15338: LD_INT 109
15340: PUSH
15341: LD_INT 110
15343: PUSH
15344: LD_INT 111
15346: PUSH
15347: LD_INT 112
15349: PUSH
15350: LD_INT 114
15352: PUSH
15353: LD_INT 116
15355: PUSH
15356: LD_INT 117
15358: PUSH
15359: LD_INT 118
15361: PUSH
15362: EMPTY
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: LIST
15376: LIST
15377: LIST
15378: LIST
15379: PUSH
15380: EMPTY
15381: LIST
15382: LIST
15383: ST_TO_ADDR
15384: GO 17279
15386: LD_INT 11
15388: DOUBLE
15389: EQUAL
15390: IFTRUE 15394
15392: GO 15598
15394: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
15395: LD_ADDR_VAR 0 2
15399: PUSH
15400: LD_INT 2
15402: PUSH
15403: LD_INT 3
15405: PUSH
15406: LD_INT 4
15408: PUSH
15409: LD_INT 5
15411: PUSH
15412: LD_INT 6
15414: PUSH
15415: LD_INT 7
15417: PUSH
15418: LD_INT 8
15420: PUSH
15421: LD_INT 9
15423: PUSH
15424: LD_INT 10
15426: PUSH
15427: LD_INT 11
15429: PUSH
15430: LD_INT 12
15432: PUSH
15433: LD_INT 13
15435: PUSH
15436: LD_INT 14
15438: PUSH
15439: LD_INT 15
15441: PUSH
15442: LD_INT 16
15444: PUSH
15445: LD_INT 17
15447: PUSH
15448: LD_INT 18
15450: PUSH
15451: LD_INT 19
15453: PUSH
15454: LD_INT 20
15456: PUSH
15457: LD_INT 21
15459: PUSH
15460: LD_INT 22
15462: PUSH
15463: LD_INT 23
15465: PUSH
15466: LD_INT 24
15468: PUSH
15469: LD_INT 25
15471: PUSH
15472: LD_INT 26
15474: PUSH
15475: LD_INT 28
15477: PUSH
15478: LD_INT 30
15480: PUSH
15481: LD_INT 31
15483: PUSH
15484: LD_INT 32
15486: PUSH
15487: LD_INT 34
15489: PUSH
15490: LD_INT 36
15492: PUSH
15493: EMPTY
15494: LIST
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: LIST
15502: LIST
15503: LIST
15504: LIST
15505: LIST
15506: LIST
15507: LIST
15508: LIST
15509: LIST
15510: LIST
15511: LIST
15512: LIST
15513: LIST
15514: LIST
15515: LIST
15516: LIST
15517: LIST
15518: LIST
15519: LIST
15520: LIST
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: PUSH
15526: LD_INT 101
15528: PUSH
15529: LD_INT 102
15531: PUSH
15532: LD_INT 103
15534: PUSH
15535: LD_INT 104
15537: PUSH
15538: LD_INT 105
15540: PUSH
15541: LD_INT 106
15543: PUSH
15544: LD_INT 107
15546: PUSH
15547: LD_INT 108
15549: PUSH
15550: LD_INT 109
15552: PUSH
15553: LD_INT 110
15555: PUSH
15556: LD_INT 111
15558: PUSH
15559: LD_INT 112
15561: PUSH
15562: LD_INT 114
15564: PUSH
15565: LD_INT 116
15567: PUSH
15568: LD_INT 117
15570: PUSH
15571: LD_INT 118
15573: PUSH
15574: EMPTY
15575: LIST
15576: LIST
15577: LIST
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: LIST
15588: LIST
15589: LIST
15590: LIST
15591: PUSH
15592: EMPTY
15593: LIST
15594: LIST
15595: ST_TO_ADDR
15596: GO 17279
15598: LD_INT 12
15600: DOUBLE
15601: EQUAL
15602: IFTRUE 15606
15604: GO 15826
15606: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
15607: LD_ADDR_VAR 0 2
15611: PUSH
15612: LD_INT 1
15614: PUSH
15615: LD_INT 2
15617: PUSH
15618: LD_INT 3
15620: PUSH
15621: LD_INT 4
15623: PUSH
15624: LD_INT 5
15626: PUSH
15627: LD_INT 6
15629: PUSH
15630: LD_INT 7
15632: PUSH
15633: LD_INT 8
15635: PUSH
15636: LD_INT 9
15638: PUSH
15639: LD_INT 10
15641: PUSH
15642: LD_INT 11
15644: PUSH
15645: LD_INT 12
15647: PUSH
15648: LD_INT 13
15650: PUSH
15651: LD_INT 14
15653: PUSH
15654: LD_INT 15
15656: PUSH
15657: LD_INT 16
15659: PUSH
15660: LD_INT 17
15662: PUSH
15663: LD_INT 18
15665: PUSH
15666: LD_INT 19
15668: PUSH
15669: LD_INT 20
15671: PUSH
15672: LD_INT 21
15674: PUSH
15675: LD_INT 22
15677: PUSH
15678: LD_INT 23
15680: PUSH
15681: LD_INT 24
15683: PUSH
15684: LD_INT 25
15686: PUSH
15687: LD_INT 26
15689: PUSH
15690: LD_INT 27
15692: PUSH
15693: LD_INT 28
15695: PUSH
15696: LD_INT 30
15698: PUSH
15699: LD_INT 31
15701: PUSH
15702: LD_INT 32
15704: PUSH
15705: LD_INT 33
15707: PUSH
15708: LD_INT 34
15710: PUSH
15711: LD_INT 36
15713: PUSH
15714: EMPTY
15715: LIST
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: PUSH
15750: LD_INT 101
15752: PUSH
15753: LD_INT 102
15755: PUSH
15756: LD_INT 103
15758: PUSH
15759: LD_INT 104
15761: PUSH
15762: LD_INT 105
15764: PUSH
15765: LD_INT 106
15767: PUSH
15768: LD_INT 107
15770: PUSH
15771: LD_INT 108
15773: PUSH
15774: LD_INT 109
15776: PUSH
15777: LD_INT 110
15779: PUSH
15780: LD_INT 111
15782: PUSH
15783: LD_INT 112
15785: PUSH
15786: LD_INT 113
15788: PUSH
15789: LD_INT 114
15791: PUSH
15792: LD_INT 116
15794: PUSH
15795: LD_INT 117
15797: PUSH
15798: LD_INT 118
15800: PUSH
15801: EMPTY
15802: LIST
15803: LIST
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: LIST
15809: LIST
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: LIST
15815: LIST
15816: LIST
15817: LIST
15818: LIST
15819: PUSH
15820: EMPTY
15821: LIST
15822: LIST
15823: ST_TO_ADDR
15824: GO 17279
15826: LD_INT 13
15828: DOUBLE
15829: EQUAL
15830: IFTRUE 15834
15832: GO 16042
15834: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
15835: LD_ADDR_VAR 0 2
15839: PUSH
15840: LD_INT 1
15842: PUSH
15843: LD_INT 2
15845: PUSH
15846: LD_INT 3
15848: PUSH
15849: LD_INT 4
15851: PUSH
15852: LD_INT 5
15854: PUSH
15855: LD_INT 8
15857: PUSH
15858: LD_INT 9
15860: PUSH
15861: LD_INT 10
15863: PUSH
15864: LD_INT 11
15866: PUSH
15867: LD_INT 12
15869: PUSH
15870: LD_INT 14
15872: PUSH
15873: LD_INT 15
15875: PUSH
15876: LD_INT 16
15878: PUSH
15879: LD_INT 17
15881: PUSH
15882: LD_INT 18
15884: PUSH
15885: LD_INT 19
15887: PUSH
15888: LD_INT 20
15890: PUSH
15891: LD_INT 21
15893: PUSH
15894: LD_INT 22
15896: PUSH
15897: LD_INT 23
15899: PUSH
15900: LD_INT 24
15902: PUSH
15903: LD_INT 25
15905: PUSH
15906: LD_INT 26
15908: PUSH
15909: LD_INT 27
15911: PUSH
15912: LD_INT 28
15914: PUSH
15915: LD_INT 30
15917: PUSH
15918: LD_INT 31
15920: PUSH
15921: LD_INT 32
15923: PUSH
15924: LD_INT 33
15926: PUSH
15927: LD_INT 34
15929: PUSH
15930: LD_INT 36
15932: PUSH
15933: EMPTY
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: PUSH
15966: LD_INT 101
15968: PUSH
15969: LD_INT 102
15971: PUSH
15972: LD_INT 103
15974: PUSH
15975: LD_INT 104
15977: PUSH
15978: LD_INT 105
15980: PUSH
15981: LD_INT 106
15983: PUSH
15984: LD_INT 107
15986: PUSH
15987: LD_INT 108
15989: PUSH
15990: LD_INT 109
15992: PUSH
15993: LD_INT 110
15995: PUSH
15996: LD_INT 111
15998: PUSH
15999: LD_INT 112
16001: PUSH
16002: LD_INT 113
16004: PUSH
16005: LD_INT 114
16007: PUSH
16008: LD_INT 116
16010: PUSH
16011: LD_INT 117
16013: PUSH
16014: LD_INT 118
16016: PUSH
16017: EMPTY
16018: LIST
16019: LIST
16020: LIST
16021: LIST
16022: LIST
16023: LIST
16024: LIST
16025: LIST
16026: LIST
16027: LIST
16028: LIST
16029: LIST
16030: LIST
16031: LIST
16032: LIST
16033: LIST
16034: LIST
16035: PUSH
16036: EMPTY
16037: LIST
16038: LIST
16039: ST_TO_ADDR
16040: GO 17279
16042: LD_INT 14
16044: DOUBLE
16045: EQUAL
16046: IFTRUE 16050
16048: GO 16274
16050: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
16051: LD_ADDR_VAR 0 2
16055: PUSH
16056: LD_INT 1
16058: PUSH
16059: LD_INT 2
16061: PUSH
16062: LD_INT 3
16064: PUSH
16065: LD_INT 4
16067: PUSH
16068: LD_INT 5
16070: PUSH
16071: LD_INT 6
16073: PUSH
16074: LD_INT 7
16076: PUSH
16077: LD_INT 8
16079: PUSH
16080: LD_INT 9
16082: PUSH
16083: LD_INT 10
16085: PUSH
16086: LD_INT 11
16088: PUSH
16089: LD_INT 12
16091: PUSH
16092: LD_INT 13
16094: PUSH
16095: LD_INT 14
16097: PUSH
16098: LD_INT 15
16100: PUSH
16101: LD_INT 16
16103: PUSH
16104: LD_INT 17
16106: PUSH
16107: LD_INT 18
16109: PUSH
16110: LD_INT 19
16112: PUSH
16113: LD_INT 20
16115: PUSH
16116: LD_INT 21
16118: PUSH
16119: LD_INT 22
16121: PUSH
16122: LD_INT 23
16124: PUSH
16125: LD_INT 24
16127: PUSH
16128: LD_INT 25
16130: PUSH
16131: LD_INT 26
16133: PUSH
16134: LD_INT 27
16136: PUSH
16137: LD_INT 28
16139: PUSH
16140: LD_INT 29
16142: PUSH
16143: LD_INT 30
16145: PUSH
16146: LD_INT 31
16148: PUSH
16149: LD_INT 32
16151: PUSH
16152: LD_INT 33
16154: PUSH
16155: LD_INT 34
16157: PUSH
16158: LD_INT 36
16160: PUSH
16161: EMPTY
16162: LIST
16163: LIST
16164: LIST
16165: LIST
16166: LIST
16167: LIST
16168: LIST
16169: LIST
16170: LIST
16171: LIST
16172: LIST
16173: LIST
16174: LIST
16175: LIST
16176: LIST
16177: LIST
16178: LIST
16179: LIST
16180: LIST
16181: LIST
16182: LIST
16183: LIST
16184: LIST
16185: LIST
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: LIST
16191: LIST
16192: LIST
16193: LIST
16194: LIST
16195: LIST
16196: LIST
16197: PUSH
16198: LD_INT 101
16200: PUSH
16201: LD_INT 102
16203: PUSH
16204: LD_INT 103
16206: PUSH
16207: LD_INT 104
16209: PUSH
16210: LD_INT 105
16212: PUSH
16213: LD_INT 106
16215: PUSH
16216: LD_INT 107
16218: PUSH
16219: LD_INT 108
16221: PUSH
16222: LD_INT 109
16224: PUSH
16225: LD_INT 110
16227: PUSH
16228: LD_INT 111
16230: PUSH
16231: LD_INT 112
16233: PUSH
16234: LD_INT 113
16236: PUSH
16237: LD_INT 114
16239: PUSH
16240: LD_INT 116
16242: PUSH
16243: LD_INT 117
16245: PUSH
16246: LD_INT 118
16248: PUSH
16249: EMPTY
16250: LIST
16251: LIST
16252: LIST
16253: LIST
16254: LIST
16255: LIST
16256: LIST
16257: LIST
16258: LIST
16259: LIST
16260: LIST
16261: LIST
16262: LIST
16263: LIST
16264: LIST
16265: LIST
16266: LIST
16267: PUSH
16268: EMPTY
16269: LIST
16270: LIST
16271: ST_TO_ADDR
16272: GO 17279
16274: LD_INT 15
16276: DOUBLE
16277: EQUAL
16278: IFTRUE 16282
16280: GO 16506
16282: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
16283: LD_ADDR_VAR 0 2
16287: PUSH
16288: LD_INT 1
16290: PUSH
16291: LD_INT 2
16293: PUSH
16294: LD_INT 3
16296: PUSH
16297: LD_INT 4
16299: PUSH
16300: LD_INT 5
16302: PUSH
16303: LD_INT 6
16305: PUSH
16306: LD_INT 7
16308: PUSH
16309: LD_INT 8
16311: PUSH
16312: LD_INT 9
16314: PUSH
16315: LD_INT 10
16317: PUSH
16318: LD_INT 11
16320: PUSH
16321: LD_INT 12
16323: PUSH
16324: LD_INT 13
16326: PUSH
16327: LD_INT 14
16329: PUSH
16330: LD_INT 15
16332: PUSH
16333: LD_INT 16
16335: PUSH
16336: LD_INT 17
16338: PUSH
16339: LD_INT 18
16341: PUSH
16342: LD_INT 19
16344: PUSH
16345: LD_INT 20
16347: PUSH
16348: LD_INT 21
16350: PUSH
16351: LD_INT 22
16353: PUSH
16354: LD_INT 23
16356: PUSH
16357: LD_INT 24
16359: PUSH
16360: LD_INT 25
16362: PUSH
16363: LD_INT 26
16365: PUSH
16366: LD_INT 27
16368: PUSH
16369: LD_INT 28
16371: PUSH
16372: LD_INT 29
16374: PUSH
16375: LD_INT 30
16377: PUSH
16378: LD_INT 31
16380: PUSH
16381: LD_INT 32
16383: PUSH
16384: LD_INT 33
16386: PUSH
16387: LD_INT 34
16389: PUSH
16390: LD_INT 36
16392: PUSH
16393: EMPTY
16394: LIST
16395: LIST
16396: LIST
16397: LIST
16398: LIST
16399: LIST
16400: LIST
16401: LIST
16402: LIST
16403: LIST
16404: LIST
16405: LIST
16406: LIST
16407: LIST
16408: LIST
16409: LIST
16410: LIST
16411: LIST
16412: LIST
16413: LIST
16414: LIST
16415: LIST
16416: LIST
16417: LIST
16418: LIST
16419: LIST
16420: LIST
16421: LIST
16422: LIST
16423: LIST
16424: LIST
16425: LIST
16426: LIST
16427: LIST
16428: LIST
16429: PUSH
16430: LD_INT 101
16432: PUSH
16433: LD_INT 102
16435: PUSH
16436: LD_INT 103
16438: PUSH
16439: LD_INT 104
16441: PUSH
16442: LD_INT 105
16444: PUSH
16445: LD_INT 106
16447: PUSH
16448: LD_INT 107
16450: PUSH
16451: LD_INT 108
16453: PUSH
16454: LD_INT 109
16456: PUSH
16457: LD_INT 110
16459: PUSH
16460: LD_INT 111
16462: PUSH
16463: LD_INT 112
16465: PUSH
16466: LD_INT 113
16468: PUSH
16469: LD_INT 114
16471: PUSH
16472: LD_INT 116
16474: PUSH
16475: LD_INT 117
16477: PUSH
16478: LD_INT 118
16480: PUSH
16481: EMPTY
16482: LIST
16483: LIST
16484: LIST
16485: LIST
16486: LIST
16487: LIST
16488: LIST
16489: LIST
16490: LIST
16491: LIST
16492: LIST
16493: LIST
16494: LIST
16495: LIST
16496: LIST
16497: LIST
16498: LIST
16499: PUSH
16500: EMPTY
16501: LIST
16502: LIST
16503: ST_TO_ADDR
16504: GO 17279
16506: LD_INT 16
16508: DOUBLE
16509: EQUAL
16510: IFTRUE 16514
16512: GO 16650
16514: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
16515: LD_ADDR_VAR 0 2
16519: PUSH
16520: LD_INT 2
16522: PUSH
16523: LD_INT 4
16525: PUSH
16526: LD_INT 5
16528: PUSH
16529: LD_INT 7
16531: PUSH
16532: LD_INT 11
16534: PUSH
16535: LD_INT 12
16537: PUSH
16538: LD_INT 15
16540: PUSH
16541: LD_INT 16
16543: PUSH
16544: LD_INT 20
16546: PUSH
16547: LD_INT 21
16549: PUSH
16550: LD_INT 22
16552: PUSH
16553: LD_INT 23
16555: PUSH
16556: LD_INT 25
16558: PUSH
16559: LD_INT 26
16561: PUSH
16562: LD_INT 30
16564: PUSH
16565: LD_INT 31
16567: PUSH
16568: LD_INT 32
16570: PUSH
16571: LD_INT 33
16573: PUSH
16574: LD_INT 34
16576: PUSH
16577: EMPTY
16578: LIST
16579: LIST
16580: LIST
16581: LIST
16582: LIST
16583: LIST
16584: LIST
16585: LIST
16586: LIST
16587: LIST
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: LIST
16597: PUSH
16598: LD_INT 101
16600: PUSH
16601: LD_INT 102
16603: PUSH
16604: LD_INT 103
16606: PUSH
16607: LD_INT 106
16609: PUSH
16610: LD_INT 108
16612: PUSH
16613: LD_INT 112
16615: PUSH
16616: LD_INT 113
16618: PUSH
16619: LD_INT 114
16621: PUSH
16622: LD_INT 116
16624: PUSH
16625: LD_INT 117
16627: PUSH
16628: LD_INT 118
16630: PUSH
16631: EMPTY
16632: LIST
16633: LIST
16634: LIST
16635: LIST
16636: LIST
16637: LIST
16638: LIST
16639: LIST
16640: LIST
16641: LIST
16642: LIST
16643: PUSH
16644: EMPTY
16645: LIST
16646: LIST
16647: ST_TO_ADDR
16648: GO 17279
16650: LD_INT 17
16652: DOUBLE
16653: EQUAL
16654: IFTRUE 16658
16656: GO 16882
16658: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
16659: LD_ADDR_VAR 0 2
16663: PUSH
16664: LD_INT 1
16666: PUSH
16667: LD_INT 2
16669: PUSH
16670: LD_INT 3
16672: PUSH
16673: LD_INT 4
16675: PUSH
16676: LD_INT 5
16678: PUSH
16679: LD_INT 6
16681: PUSH
16682: LD_INT 7
16684: PUSH
16685: LD_INT 8
16687: PUSH
16688: LD_INT 9
16690: PUSH
16691: LD_INT 10
16693: PUSH
16694: LD_INT 11
16696: PUSH
16697: LD_INT 12
16699: PUSH
16700: LD_INT 13
16702: PUSH
16703: LD_INT 14
16705: PUSH
16706: LD_INT 15
16708: PUSH
16709: LD_INT 16
16711: PUSH
16712: LD_INT 17
16714: PUSH
16715: LD_INT 18
16717: PUSH
16718: LD_INT 19
16720: PUSH
16721: LD_INT 20
16723: PUSH
16724: LD_INT 21
16726: PUSH
16727: LD_INT 22
16729: PUSH
16730: LD_INT 23
16732: PUSH
16733: LD_INT 24
16735: PUSH
16736: LD_INT 25
16738: PUSH
16739: LD_INT 26
16741: PUSH
16742: LD_INT 27
16744: PUSH
16745: LD_INT 28
16747: PUSH
16748: LD_INT 29
16750: PUSH
16751: LD_INT 30
16753: PUSH
16754: LD_INT 31
16756: PUSH
16757: LD_INT 32
16759: PUSH
16760: LD_INT 33
16762: PUSH
16763: LD_INT 34
16765: PUSH
16766: LD_INT 36
16768: PUSH
16769: EMPTY
16770: LIST
16771: LIST
16772: LIST
16773: LIST
16774: LIST
16775: LIST
16776: LIST
16777: LIST
16778: LIST
16779: LIST
16780: LIST
16781: LIST
16782: LIST
16783: LIST
16784: LIST
16785: LIST
16786: LIST
16787: LIST
16788: LIST
16789: LIST
16790: LIST
16791: LIST
16792: LIST
16793: LIST
16794: LIST
16795: LIST
16796: LIST
16797: LIST
16798: LIST
16799: LIST
16800: LIST
16801: LIST
16802: LIST
16803: LIST
16804: LIST
16805: PUSH
16806: LD_INT 101
16808: PUSH
16809: LD_INT 102
16811: PUSH
16812: LD_INT 103
16814: PUSH
16815: LD_INT 104
16817: PUSH
16818: LD_INT 105
16820: PUSH
16821: LD_INT 106
16823: PUSH
16824: LD_INT 107
16826: PUSH
16827: LD_INT 108
16829: PUSH
16830: LD_INT 109
16832: PUSH
16833: LD_INT 110
16835: PUSH
16836: LD_INT 111
16838: PUSH
16839: LD_INT 112
16841: PUSH
16842: LD_INT 113
16844: PUSH
16845: LD_INT 114
16847: PUSH
16848: LD_INT 116
16850: PUSH
16851: LD_INT 117
16853: PUSH
16854: LD_INT 118
16856: PUSH
16857: EMPTY
16858: LIST
16859: LIST
16860: LIST
16861: LIST
16862: LIST
16863: LIST
16864: LIST
16865: LIST
16866: LIST
16867: LIST
16868: LIST
16869: LIST
16870: LIST
16871: LIST
16872: LIST
16873: LIST
16874: LIST
16875: PUSH
16876: EMPTY
16877: LIST
16878: LIST
16879: ST_TO_ADDR
16880: GO 17279
16882: LD_INT 18
16884: DOUBLE
16885: EQUAL
16886: IFTRUE 16890
16888: GO 17038
16890: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
16891: LD_ADDR_VAR 0 2
16895: PUSH
16896: LD_INT 2
16898: PUSH
16899: LD_INT 4
16901: PUSH
16902: LD_INT 5
16904: PUSH
16905: LD_INT 7
16907: PUSH
16908: LD_INT 11
16910: PUSH
16911: LD_INT 12
16913: PUSH
16914: LD_INT 15
16916: PUSH
16917: LD_INT 16
16919: PUSH
16920: LD_INT 20
16922: PUSH
16923: LD_INT 21
16925: PUSH
16926: LD_INT 22
16928: PUSH
16929: LD_INT 23
16931: PUSH
16932: LD_INT 25
16934: PUSH
16935: LD_INT 26
16937: PUSH
16938: LD_INT 30
16940: PUSH
16941: LD_INT 31
16943: PUSH
16944: LD_INT 32
16946: PUSH
16947: LD_INT 33
16949: PUSH
16950: LD_INT 34
16952: PUSH
16953: LD_INT 35
16955: PUSH
16956: LD_INT 36
16958: PUSH
16959: EMPTY
16960: LIST
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: LIST
16966: LIST
16967: LIST
16968: LIST
16969: LIST
16970: LIST
16971: LIST
16972: LIST
16973: LIST
16974: LIST
16975: LIST
16976: LIST
16977: LIST
16978: LIST
16979: LIST
16980: LIST
16981: PUSH
16982: LD_INT 101
16984: PUSH
16985: LD_INT 102
16987: PUSH
16988: LD_INT 103
16990: PUSH
16991: LD_INT 106
16993: PUSH
16994: LD_INT 108
16996: PUSH
16997: LD_INT 112
16999: PUSH
17000: LD_INT 113
17002: PUSH
17003: LD_INT 114
17005: PUSH
17006: LD_INT 115
17008: PUSH
17009: LD_INT 116
17011: PUSH
17012: LD_INT 117
17014: PUSH
17015: LD_INT 118
17017: PUSH
17018: EMPTY
17019: LIST
17020: LIST
17021: LIST
17022: LIST
17023: LIST
17024: LIST
17025: LIST
17026: LIST
17027: LIST
17028: LIST
17029: LIST
17030: LIST
17031: PUSH
17032: EMPTY
17033: LIST
17034: LIST
17035: ST_TO_ADDR
17036: GO 17279
17038: LD_INT 19
17040: DOUBLE
17041: EQUAL
17042: IFTRUE 17046
17044: GO 17278
17046: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
17047: LD_ADDR_VAR 0 2
17051: PUSH
17052: LD_INT 1
17054: PUSH
17055: LD_INT 2
17057: PUSH
17058: LD_INT 3
17060: PUSH
17061: LD_INT 4
17063: PUSH
17064: LD_INT 5
17066: PUSH
17067: LD_INT 6
17069: PUSH
17070: LD_INT 7
17072: PUSH
17073: LD_INT 8
17075: PUSH
17076: LD_INT 9
17078: PUSH
17079: LD_INT 10
17081: PUSH
17082: LD_INT 11
17084: PUSH
17085: LD_INT 12
17087: PUSH
17088: LD_INT 13
17090: PUSH
17091: LD_INT 14
17093: PUSH
17094: LD_INT 15
17096: PUSH
17097: LD_INT 16
17099: PUSH
17100: LD_INT 17
17102: PUSH
17103: LD_INT 18
17105: PUSH
17106: LD_INT 19
17108: PUSH
17109: LD_INT 20
17111: PUSH
17112: LD_INT 21
17114: PUSH
17115: LD_INT 22
17117: PUSH
17118: LD_INT 23
17120: PUSH
17121: LD_INT 24
17123: PUSH
17124: LD_INT 25
17126: PUSH
17127: LD_INT 26
17129: PUSH
17130: LD_INT 27
17132: PUSH
17133: LD_INT 28
17135: PUSH
17136: LD_INT 29
17138: PUSH
17139: LD_INT 30
17141: PUSH
17142: LD_INT 31
17144: PUSH
17145: LD_INT 32
17147: PUSH
17148: LD_INT 33
17150: PUSH
17151: LD_INT 34
17153: PUSH
17154: LD_INT 35
17156: PUSH
17157: LD_INT 36
17159: PUSH
17160: EMPTY
17161: LIST
17162: LIST
17163: LIST
17164: LIST
17165: LIST
17166: LIST
17167: LIST
17168: LIST
17169: LIST
17170: LIST
17171: LIST
17172: LIST
17173: LIST
17174: LIST
17175: LIST
17176: LIST
17177: LIST
17178: LIST
17179: LIST
17180: LIST
17181: LIST
17182: LIST
17183: LIST
17184: LIST
17185: LIST
17186: LIST
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: LIST
17197: PUSH
17198: LD_INT 101
17200: PUSH
17201: LD_INT 102
17203: PUSH
17204: LD_INT 103
17206: PUSH
17207: LD_INT 104
17209: PUSH
17210: LD_INT 105
17212: PUSH
17213: LD_INT 106
17215: PUSH
17216: LD_INT 107
17218: PUSH
17219: LD_INT 108
17221: PUSH
17222: LD_INT 109
17224: PUSH
17225: LD_INT 110
17227: PUSH
17228: LD_INT 111
17230: PUSH
17231: LD_INT 112
17233: PUSH
17234: LD_INT 113
17236: PUSH
17237: LD_INT 114
17239: PUSH
17240: LD_INT 115
17242: PUSH
17243: LD_INT 116
17245: PUSH
17246: LD_INT 117
17248: PUSH
17249: LD_INT 118
17251: PUSH
17252: EMPTY
17253: LIST
17254: LIST
17255: LIST
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: PUSH
17272: EMPTY
17273: LIST
17274: LIST
17275: ST_TO_ADDR
17276: GO 17279
17278: POP
// end else
17279: GO 17510
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
17281: LD_ADDR_VAR 0 2
17285: PUSH
17286: LD_INT 1
17288: PUSH
17289: LD_INT 2
17291: PUSH
17292: LD_INT 3
17294: PUSH
17295: LD_INT 4
17297: PUSH
17298: LD_INT 5
17300: PUSH
17301: LD_INT 6
17303: PUSH
17304: LD_INT 7
17306: PUSH
17307: LD_INT 8
17309: PUSH
17310: LD_INT 9
17312: PUSH
17313: LD_INT 10
17315: PUSH
17316: LD_INT 11
17318: PUSH
17319: LD_INT 12
17321: PUSH
17322: LD_INT 13
17324: PUSH
17325: LD_INT 14
17327: PUSH
17328: LD_INT 15
17330: PUSH
17331: LD_INT 16
17333: PUSH
17334: LD_INT 17
17336: PUSH
17337: LD_INT 18
17339: PUSH
17340: LD_INT 19
17342: PUSH
17343: LD_INT 20
17345: PUSH
17346: LD_INT 21
17348: PUSH
17349: LD_INT 22
17351: PUSH
17352: LD_INT 23
17354: PUSH
17355: LD_INT 24
17357: PUSH
17358: LD_INT 25
17360: PUSH
17361: LD_INT 26
17363: PUSH
17364: LD_INT 27
17366: PUSH
17367: LD_INT 28
17369: PUSH
17370: LD_INT 29
17372: PUSH
17373: LD_INT 30
17375: PUSH
17376: LD_INT 31
17378: PUSH
17379: LD_INT 32
17381: PUSH
17382: LD_INT 33
17384: PUSH
17385: LD_INT 34
17387: PUSH
17388: LD_INT 35
17390: PUSH
17391: LD_INT 36
17393: PUSH
17394: EMPTY
17395: LIST
17396: LIST
17397: LIST
17398: LIST
17399: LIST
17400: LIST
17401: LIST
17402: LIST
17403: LIST
17404: LIST
17405: LIST
17406: LIST
17407: LIST
17408: LIST
17409: LIST
17410: LIST
17411: LIST
17412: LIST
17413: LIST
17414: LIST
17415: LIST
17416: LIST
17417: LIST
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: LIST
17424: LIST
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: PUSH
17432: LD_INT 101
17434: PUSH
17435: LD_INT 102
17437: PUSH
17438: LD_INT 103
17440: PUSH
17441: LD_INT 104
17443: PUSH
17444: LD_INT 105
17446: PUSH
17447: LD_INT 106
17449: PUSH
17450: LD_INT 107
17452: PUSH
17453: LD_INT 108
17455: PUSH
17456: LD_INT 109
17458: PUSH
17459: LD_INT 110
17461: PUSH
17462: LD_INT 111
17464: PUSH
17465: LD_INT 112
17467: PUSH
17468: LD_INT 113
17470: PUSH
17471: LD_INT 114
17473: PUSH
17474: LD_INT 115
17476: PUSH
17477: LD_INT 116
17479: PUSH
17480: LD_INT 117
17482: PUSH
17483: LD_INT 118
17485: PUSH
17486: EMPTY
17487: LIST
17488: LIST
17489: LIST
17490: LIST
17491: LIST
17492: LIST
17493: LIST
17494: LIST
17495: LIST
17496: LIST
17497: LIST
17498: LIST
17499: LIST
17500: LIST
17501: LIST
17502: LIST
17503: LIST
17504: LIST
17505: PUSH
17506: EMPTY
17507: LIST
17508: LIST
17509: ST_TO_ADDR
// if result then
17510: LD_VAR 0 2
17514: IFFALSE 18300
// begin normal :=  ;
17516: LD_ADDR_VAR 0 5
17520: PUSH
17521: LD_STRING 
17523: ST_TO_ADDR
// hardcore :=  ;
17524: LD_ADDR_VAR 0 6
17528: PUSH
17529: LD_STRING 
17531: ST_TO_ADDR
// active :=  ;
17532: LD_ADDR_VAR 0 7
17536: PUSH
17537: LD_STRING 
17539: ST_TO_ADDR
// for i = 1 to normalCounter do
17540: LD_ADDR_VAR 0 8
17544: PUSH
17545: DOUBLE
17546: LD_INT 1
17548: DEC
17549: ST_TO_ADDR
17550: LD_EXP 23
17554: PUSH
17555: FOR_TO
17556: IFFALSE 17657
// begin tmp := 0 ;
17558: LD_ADDR_VAR 0 3
17562: PUSH
17563: LD_STRING 0
17565: ST_TO_ADDR
// if result [ 1 ] then
17566: LD_VAR 0 2
17570: PUSH
17571: LD_INT 1
17573: ARRAY
17574: IFFALSE 17639
// if result [ 1 ] [ 1 ] = i then
17576: LD_VAR 0 2
17580: PUSH
17581: LD_INT 1
17583: ARRAY
17584: PUSH
17585: LD_INT 1
17587: ARRAY
17588: PUSH
17589: LD_VAR 0 8
17593: EQUAL
17594: IFFALSE 17639
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
17596: LD_ADDR_VAR 0 2
17600: PUSH
17601: LD_VAR 0 2
17605: PPUSH
17606: LD_INT 1
17608: PPUSH
17609: LD_VAR 0 2
17613: PUSH
17614: LD_INT 1
17616: ARRAY
17617: PPUSH
17618: LD_INT 1
17620: PPUSH
17621: CALL_OW 3
17625: PPUSH
17626: CALL_OW 1
17630: ST_TO_ADDR
// tmp := 1 ;
17631: LD_ADDR_VAR 0 3
17635: PUSH
17636: LD_STRING 1
17638: ST_TO_ADDR
// end ; normal := normal & tmp ;
17639: LD_ADDR_VAR 0 5
17643: PUSH
17644: LD_VAR 0 5
17648: PUSH
17649: LD_VAR 0 3
17653: STR
17654: ST_TO_ADDR
// end ;
17655: GO 17555
17657: POP
17658: POP
// for i = 1 to hardcoreCounter do
17659: LD_ADDR_VAR 0 8
17663: PUSH
17664: DOUBLE
17665: LD_INT 1
17667: DEC
17668: ST_TO_ADDR
17669: LD_EXP 24
17673: PUSH
17674: FOR_TO
17675: IFFALSE 17780
// begin tmp := 0 ;
17677: LD_ADDR_VAR 0 3
17681: PUSH
17682: LD_STRING 0
17684: ST_TO_ADDR
// if result [ 2 ] then
17685: LD_VAR 0 2
17689: PUSH
17690: LD_INT 2
17692: ARRAY
17693: IFFALSE 17762
// if result [ 2 ] [ 1 ] = 100 + i then
17695: LD_VAR 0 2
17699: PUSH
17700: LD_INT 2
17702: ARRAY
17703: PUSH
17704: LD_INT 1
17706: ARRAY
17707: PUSH
17708: LD_INT 100
17710: PUSH
17711: LD_VAR 0 8
17715: PLUS
17716: EQUAL
17717: IFFALSE 17762
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
17719: LD_ADDR_VAR 0 2
17723: PUSH
17724: LD_VAR 0 2
17728: PPUSH
17729: LD_INT 2
17731: PPUSH
17732: LD_VAR 0 2
17736: PUSH
17737: LD_INT 2
17739: ARRAY
17740: PPUSH
17741: LD_INT 1
17743: PPUSH
17744: CALL_OW 3
17748: PPUSH
17749: CALL_OW 1
17753: ST_TO_ADDR
// tmp := 1 ;
17754: LD_ADDR_VAR 0 3
17758: PUSH
17759: LD_STRING 1
17761: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
17762: LD_ADDR_VAR 0 6
17766: PUSH
17767: LD_VAR 0 6
17771: PUSH
17772: LD_VAR 0 3
17776: STR
17777: ST_TO_ADDR
// end ;
17778: GO 17674
17780: POP
17781: POP
// if isGameLoad then
17782: LD_VAR 0 1
17786: IFFALSE 18261
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
17788: LD_ADDR_VAR 0 4
17792: PUSH
17793: LD_EXP 27
17797: PUSH
17798: LD_EXP 26
17802: PUSH
17803: LD_EXP 28
17807: PUSH
17808: LD_EXP 25
17812: PUSH
17813: LD_EXP 29
17817: PUSH
17818: LD_EXP 30
17822: PUSH
17823: LD_EXP 31
17827: PUSH
17828: LD_EXP 32
17832: PUSH
17833: LD_EXP 33
17837: PUSH
17838: LD_EXP 34
17842: PUSH
17843: LD_EXP 35
17847: PUSH
17848: LD_EXP 36
17852: PUSH
17853: LD_EXP 37
17857: PUSH
17858: LD_EXP 38
17862: PUSH
17863: LD_EXP 46
17867: PUSH
17868: LD_EXP 47
17872: PUSH
17873: LD_EXP 48
17877: PUSH
17878: LD_EXP 49
17882: PUSH
17883: LD_EXP 51
17887: PUSH
17888: LD_EXP 52
17892: PUSH
17893: LD_EXP 53
17897: PUSH
17898: LD_EXP 56
17902: PUSH
17903: LD_EXP 58
17907: PUSH
17908: LD_EXP 59
17912: PUSH
17913: LD_EXP 60
17917: PUSH
17918: LD_EXP 62
17922: PUSH
17923: LD_EXP 63
17927: PUSH
17928: LD_EXP 66
17932: PUSH
17933: LD_EXP 67
17937: PUSH
17938: LD_EXP 68
17942: PUSH
17943: LD_EXP 69
17947: PUSH
17948: LD_EXP 70
17952: PUSH
17953: LD_EXP 71
17957: PUSH
17958: LD_EXP 72
17962: PUSH
17963: LD_EXP 73
17967: PUSH
17968: LD_EXP 74
17972: PUSH
17973: LD_EXP 39
17977: PUSH
17978: LD_EXP 40
17982: PUSH
17983: LD_EXP 43
17987: PUSH
17988: LD_EXP 44
17992: PUSH
17993: LD_EXP 45
17997: PUSH
17998: LD_EXP 41
18002: PUSH
18003: LD_EXP 42
18007: PUSH
18008: LD_EXP 50
18012: PUSH
18013: LD_EXP 54
18017: PUSH
18018: LD_EXP 55
18022: PUSH
18023: LD_EXP 57
18027: PUSH
18028: LD_EXP 61
18032: PUSH
18033: LD_EXP 64
18037: PUSH
18038: LD_EXP 65
18042: PUSH
18043: LD_EXP 75
18047: PUSH
18048: LD_EXP 76
18052: PUSH
18053: LD_EXP 77
18057: PUSH
18058: LD_EXP 78
18062: PUSH
18063: EMPTY
18064: LIST
18065: LIST
18066: LIST
18067: LIST
18068: LIST
18069: LIST
18070: LIST
18071: LIST
18072: LIST
18073: LIST
18074: LIST
18075: LIST
18076: LIST
18077: LIST
18078: LIST
18079: LIST
18080: LIST
18081: LIST
18082: LIST
18083: LIST
18084: LIST
18085: LIST
18086: LIST
18087: LIST
18088: LIST
18089: LIST
18090: LIST
18091: LIST
18092: LIST
18093: LIST
18094: LIST
18095: LIST
18096: LIST
18097: LIST
18098: LIST
18099: LIST
18100: LIST
18101: LIST
18102: LIST
18103: LIST
18104: LIST
18105: LIST
18106: LIST
18107: LIST
18108: LIST
18109: LIST
18110: LIST
18111: LIST
18112: LIST
18113: LIST
18114: LIST
18115: LIST
18116: LIST
18117: LIST
18118: ST_TO_ADDR
// tmp :=  ;
18119: LD_ADDR_VAR 0 3
18123: PUSH
18124: LD_STRING 
18126: ST_TO_ADDR
// for i = 1 to normalCounter do
18127: LD_ADDR_VAR 0 8
18131: PUSH
18132: DOUBLE
18133: LD_INT 1
18135: DEC
18136: ST_TO_ADDR
18137: LD_EXP 23
18141: PUSH
18142: FOR_TO
18143: IFFALSE 18179
// begin if flags [ i ] then
18145: LD_VAR 0 4
18149: PUSH
18150: LD_VAR 0 8
18154: ARRAY
18155: IFFALSE 18177
// tmp := tmp & i & ; ;
18157: LD_ADDR_VAR 0 3
18161: PUSH
18162: LD_VAR 0 3
18166: PUSH
18167: LD_VAR 0 8
18171: STR
18172: PUSH
18173: LD_STRING ;
18175: STR
18176: ST_TO_ADDR
// end ;
18177: GO 18142
18179: POP
18180: POP
// for i = 1 to hardcoreCounter do
18181: LD_ADDR_VAR 0 8
18185: PUSH
18186: DOUBLE
18187: LD_INT 1
18189: DEC
18190: ST_TO_ADDR
18191: LD_EXP 24
18195: PUSH
18196: FOR_TO
18197: IFFALSE 18243
// begin if flags [ normalCounter + i ] then
18199: LD_VAR 0 4
18203: PUSH
18204: LD_EXP 23
18208: PUSH
18209: LD_VAR 0 8
18213: PLUS
18214: ARRAY
18215: IFFALSE 18241
// tmp := tmp & ( 100 + i ) & ; ;
18217: LD_ADDR_VAR 0 3
18221: PUSH
18222: LD_VAR 0 3
18226: PUSH
18227: LD_INT 100
18229: PUSH
18230: LD_VAR 0 8
18234: PLUS
18235: STR
18236: PUSH
18237: LD_STRING ;
18239: STR
18240: ST_TO_ADDR
// end ;
18241: GO 18196
18243: POP
18244: POP
// if tmp then
18245: LD_VAR 0 3
18249: IFFALSE 18261
// active := tmp ;
18251: LD_ADDR_VAR 0 7
18255: PUSH
18256: LD_VAR 0 3
18260: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
18261: LD_STRING getStreamItemsFromMission("
18263: PUSH
18264: LD_VAR 0 5
18268: STR
18269: PUSH
18270: LD_STRING ","
18272: STR
18273: PUSH
18274: LD_VAR 0 6
18278: STR
18279: PUSH
18280: LD_STRING ","
18282: STR
18283: PUSH
18284: LD_VAR 0 7
18288: STR
18289: PUSH
18290: LD_STRING ")
18292: STR
18293: PPUSH
18294: CALL_OW 559
// end else
18298: GO 18307
// ToLua ( getStreamItemsFromMission("","","") ) ;
18300: LD_STRING getStreamItemsFromMission("","","")
18302: PPUSH
18303: CALL_OW 559
// end ;
18307: LD_VAR 0 2
18311: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
18312: LD_EXP 22
18316: PUSH
18317: LD_EXP 27
18321: AND
18322: IFFALSE 18446
18324: GO 18326
18326: DISABLE
18327: LD_INT 0
18329: PPUSH
18330: PPUSH
// begin enable ;
18331: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
18332: LD_ADDR_VAR 0 2
18336: PUSH
18337: LD_INT 22
18339: PUSH
18340: LD_OWVAR 2
18344: PUSH
18345: EMPTY
18346: LIST
18347: LIST
18348: PUSH
18349: LD_INT 2
18351: PUSH
18352: LD_INT 34
18354: PUSH
18355: LD_INT 7
18357: PUSH
18358: EMPTY
18359: LIST
18360: LIST
18361: PUSH
18362: LD_INT 34
18364: PUSH
18365: LD_INT 45
18367: PUSH
18368: EMPTY
18369: LIST
18370: LIST
18371: PUSH
18372: LD_INT 34
18374: PUSH
18375: LD_INT 28
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: PUSH
18382: LD_INT 34
18384: PUSH
18385: LD_INT 47
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: PUSH
18392: EMPTY
18393: LIST
18394: LIST
18395: LIST
18396: LIST
18397: LIST
18398: PUSH
18399: EMPTY
18400: LIST
18401: LIST
18402: PPUSH
18403: CALL_OW 69
18407: ST_TO_ADDR
// if not tmp then
18408: LD_VAR 0 2
18412: NOT
18413: IFFALSE 18417
// exit ;
18415: GO 18446
// for i in tmp do
18417: LD_ADDR_VAR 0 1
18421: PUSH
18422: LD_VAR 0 2
18426: PUSH
18427: FOR_IN
18428: IFFALSE 18444
// begin SetLives ( i , 0 ) ;
18430: LD_VAR 0 1
18434: PPUSH
18435: LD_INT 0
18437: PPUSH
18438: CALL_OW 234
// end ;
18442: GO 18427
18444: POP
18445: POP
// end ;
18446: PPOPN 2
18448: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
18449: LD_EXP 22
18453: PUSH
18454: LD_EXP 28
18458: AND
18459: IFFALSE 18543
18461: GO 18463
18463: DISABLE
18464: LD_INT 0
18466: PPUSH
18467: PPUSH
// begin enable ;
18468: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
18469: LD_ADDR_VAR 0 2
18473: PUSH
18474: LD_INT 22
18476: PUSH
18477: LD_OWVAR 2
18481: PUSH
18482: EMPTY
18483: LIST
18484: LIST
18485: PUSH
18486: LD_INT 32
18488: PUSH
18489: LD_INT 3
18491: PUSH
18492: EMPTY
18493: LIST
18494: LIST
18495: PUSH
18496: EMPTY
18497: LIST
18498: LIST
18499: PPUSH
18500: CALL_OW 69
18504: ST_TO_ADDR
// if not tmp then
18505: LD_VAR 0 2
18509: NOT
18510: IFFALSE 18514
// exit ;
18512: GO 18543
// for i in tmp do
18514: LD_ADDR_VAR 0 1
18518: PUSH
18519: LD_VAR 0 2
18523: PUSH
18524: FOR_IN
18525: IFFALSE 18541
// begin SetLives ( i , 0 ) ;
18527: LD_VAR 0 1
18531: PPUSH
18532: LD_INT 0
18534: PPUSH
18535: CALL_OW 234
// end ;
18539: GO 18524
18541: POP
18542: POP
// end ;
18543: PPOPN 2
18545: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
18546: LD_EXP 22
18550: PUSH
18551: LD_EXP 25
18555: AND
18556: IFFALSE 18649
18558: GO 18560
18560: DISABLE
18561: LD_INT 0
18563: PPUSH
// begin enable ;
18564: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
18565: LD_ADDR_VAR 0 1
18569: PUSH
18570: LD_INT 22
18572: PUSH
18573: LD_OWVAR 2
18577: PUSH
18578: EMPTY
18579: LIST
18580: LIST
18581: PUSH
18582: LD_INT 2
18584: PUSH
18585: LD_INT 25
18587: PUSH
18588: LD_INT 5
18590: PUSH
18591: EMPTY
18592: LIST
18593: LIST
18594: PUSH
18595: LD_INT 25
18597: PUSH
18598: LD_INT 9
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: PUSH
18605: LD_INT 25
18607: PUSH
18608: LD_INT 8
18610: PUSH
18611: EMPTY
18612: LIST
18613: LIST
18614: PUSH
18615: EMPTY
18616: LIST
18617: LIST
18618: LIST
18619: LIST
18620: PUSH
18621: EMPTY
18622: LIST
18623: LIST
18624: PPUSH
18625: CALL_OW 69
18629: PUSH
18630: FOR_IN
18631: IFFALSE 18647
// begin SetClass ( i , 1 ) ;
18633: LD_VAR 0 1
18637: PPUSH
18638: LD_INT 1
18640: PPUSH
18641: CALL_OW 336
// end ;
18645: GO 18630
18647: POP
18648: POP
// end ;
18649: PPOPN 1
18651: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
18652: LD_EXP 22
18656: PUSH
18657: LD_EXP 26
18661: AND
18662: PUSH
18663: LD_OWVAR 65
18667: PUSH
18668: LD_INT 7
18670: LESS
18671: AND
18672: IFFALSE 18686
18674: GO 18676
18676: DISABLE
// begin enable ;
18677: ENABLE
// game_speed := 7 ;
18678: LD_ADDR_OWVAR 65
18682: PUSH
18683: LD_INT 7
18685: ST_TO_ADDR
// end ;
18686: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
18687: LD_EXP 22
18691: PUSH
18692: LD_EXP 29
18696: AND
18697: IFFALSE 18899
18699: GO 18701
18701: DISABLE
18702: LD_INT 0
18704: PPUSH
18705: PPUSH
18706: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18707: LD_ADDR_VAR 0 3
18711: PUSH
18712: LD_INT 81
18714: PUSH
18715: LD_OWVAR 2
18719: PUSH
18720: EMPTY
18721: LIST
18722: LIST
18723: PUSH
18724: LD_INT 21
18726: PUSH
18727: LD_INT 1
18729: PUSH
18730: EMPTY
18731: LIST
18732: LIST
18733: PUSH
18734: EMPTY
18735: LIST
18736: LIST
18737: PPUSH
18738: CALL_OW 69
18742: ST_TO_ADDR
// if not tmp then
18743: LD_VAR 0 3
18747: NOT
18748: IFFALSE 18752
// exit ;
18750: GO 18899
// if tmp > 5 then
18752: LD_VAR 0 3
18756: PUSH
18757: LD_INT 5
18759: GREATER
18760: IFFALSE 18772
// k := 5 else
18762: LD_ADDR_VAR 0 2
18766: PUSH
18767: LD_INT 5
18769: ST_TO_ADDR
18770: GO 18782
// k := tmp ;
18772: LD_ADDR_VAR 0 2
18776: PUSH
18777: LD_VAR 0 3
18781: ST_TO_ADDR
// for i := 1 to k do
18782: LD_ADDR_VAR 0 1
18786: PUSH
18787: DOUBLE
18788: LD_INT 1
18790: DEC
18791: ST_TO_ADDR
18792: LD_VAR 0 2
18796: PUSH
18797: FOR_TO
18798: IFFALSE 18897
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
18800: LD_VAR 0 3
18804: PUSH
18805: LD_VAR 0 1
18809: ARRAY
18810: PPUSH
18811: LD_VAR 0 1
18815: PUSH
18816: LD_INT 4
18818: MOD
18819: PUSH
18820: LD_INT 1
18822: PLUS
18823: PPUSH
18824: CALL_OW 259
18828: PUSH
18829: LD_INT 10
18831: LESS
18832: IFFALSE 18895
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
18834: LD_VAR 0 3
18838: PUSH
18839: LD_VAR 0 1
18843: ARRAY
18844: PPUSH
18845: LD_VAR 0 1
18849: PUSH
18850: LD_INT 4
18852: MOD
18853: PUSH
18854: LD_INT 1
18856: PLUS
18857: PPUSH
18858: LD_VAR 0 3
18862: PUSH
18863: LD_VAR 0 1
18867: ARRAY
18868: PPUSH
18869: LD_VAR 0 1
18873: PUSH
18874: LD_INT 4
18876: MOD
18877: PUSH
18878: LD_INT 1
18880: PLUS
18881: PPUSH
18882: CALL_OW 259
18886: PUSH
18887: LD_INT 1
18889: PLUS
18890: PPUSH
18891: CALL_OW 237
18895: GO 18797
18897: POP
18898: POP
// end ;
18899: PPOPN 3
18901: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
18902: LD_EXP 22
18906: PUSH
18907: LD_EXP 30
18911: AND
18912: IFFALSE 18932
18914: GO 18916
18916: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
18917: LD_INT 4
18919: PPUSH
18920: LD_OWVAR 2
18924: PPUSH
18925: LD_INT 0
18927: PPUSH
18928: CALL_OW 324
18932: END
// every 0 0$1 trigger StreamModeActive and sShovel do
18933: LD_EXP 22
18937: PUSH
18938: LD_EXP 59
18942: AND
18943: IFFALSE 18963
18945: GO 18947
18947: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
18948: LD_INT 19
18950: PPUSH
18951: LD_OWVAR 2
18955: PPUSH
18956: LD_INT 0
18958: PPUSH
18959: CALL_OW 324
18963: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
18964: LD_EXP 22
18968: PUSH
18969: LD_EXP 31
18973: AND
18974: IFFALSE 19076
18976: GO 18978
18978: DISABLE
18979: LD_INT 0
18981: PPUSH
18982: PPUSH
// begin enable ;
18983: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
18984: LD_ADDR_VAR 0 2
18988: PUSH
18989: LD_INT 22
18991: PUSH
18992: LD_OWVAR 2
18996: PUSH
18997: EMPTY
18998: LIST
18999: LIST
19000: PUSH
19001: LD_INT 2
19003: PUSH
19004: LD_INT 34
19006: PUSH
19007: LD_INT 11
19009: PUSH
19010: EMPTY
19011: LIST
19012: LIST
19013: PUSH
19014: LD_INT 34
19016: PUSH
19017: LD_INT 30
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: LIST
19028: PUSH
19029: EMPTY
19030: LIST
19031: LIST
19032: PPUSH
19033: CALL_OW 69
19037: ST_TO_ADDR
// if not tmp then
19038: LD_VAR 0 2
19042: NOT
19043: IFFALSE 19047
// exit ;
19045: GO 19076
// for i in tmp do
19047: LD_ADDR_VAR 0 1
19051: PUSH
19052: LD_VAR 0 2
19056: PUSH
19057: FOR_IN
19058: IFFALSE 19074
// begin SetLives ( i , 0 ) ;
19060: LD_VAR 0 1
19064: PPUSH
19065: LD_INT 0
19067: PPUSH
19068: CALL_OW 234
// end ;
19072: GO 19057
19074: POP
19075: POP
// end ;
19076: PPOPN 2
19078: END
// every 0 0$1 trigger StreamModeActive and sBunker do
19079: LD_EXP 22
19083: PUSH
19084: LD_EXP 32
19088: AND
19089: IFFALSE 19109
19091: GO 19093
19093: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
19094: LD_INT 32
19096: PPUSH
19097: LD_OWVAR 2
19101: PPUSH
19102: LD_INT 0
19104: PPUSH
19105: CALL_OW 324
19109: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
19110: LD_EXP 22
19114: PUSH
19115: LD_EXP 33
19119: AND
19120: IFFALSE 19301
19122: GO 19124
19124: DISABLE
19125: LD_INT 0
19127: PPUSH
19128: PPUSH
19129: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
19130: LD_ADDR_VAR 0 2
19134: PUSH
19135: LD_INT 22
19137: PUSH
19138: LD_OWVAR 2
19142: PUSH
19143: EMPTY
19144: LIST
19145: LIST
19146: PUSH
19147: LD_INT 33
19149: PUSH
19150: LD_INT 3
19152: PUSH
19153: EMPTY
19154: LIST
19155: LIST
19156: PUSH
19157: EMPTY
19158: LIST
19159: LIST
19160: PPUSH
19161: CALL_OW 69
19165: ST_TO_ADDR
// if not tmp then
19166: LD_VAR 0 2
19170: NOT
19171: IFFALSE 19175
// exit ;
19173: GO 19301
// side := 0 ;
19175: LD_ADDR_VAR 0 3
19179: PUSH
19180: LD_INT 0
19182: ST_TO_ADDR
// for i := 1 to 8 do
19183: LD_ADDR_VAR 0 1
19187: PUSH
19188: DOUBLE
19189: LD_INT 1
19191: DEC
19192: ST_TO_ADDR
19193: LD_INT 8
19195: PUSH
19196: FOR_TO
19197: IFFALSE 19245
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
19199: LD_OWVAR 2
19203: PUSH
19204: LD_VAR 0 1
19208: NONEQUAL
19209: PUSH
19210: LD_OWVAR 2
19214: PPUSH
19215: LD_VAR 0 1
19219: PPUSH
19220: CALL_OW 81
19224: PUSH
19225: LD_INT 2
19227: EQUAL
19228: AND
19229: IFFALSE 19243
// begin side := i ;
19231: LD_ADDR_VAR 0 3
19235: PUSH
19236: LD_VAR 0 1
19240: ST_TO_ADDR
// break ;
19241: GO 19245
// end ;
19243: GO 19196
19245: POP
19246: POP
// if not side then
19247: LD_VAR 0 3
19251: NOT
19252: IFFALSE 19256
// exit ;
19254: GO 19301
// for i := 1 to tmp do
19256: LD_ADDR_VAR 0 1
19260: PUSH
19261: DOUBLE
19262: LD_INT 1
19264: DEC
19265: ST_TO_ADDR
19266: LD_VAR 0 2
19270: PUSH
19271: FOR_TO
19272: IFFALSE 19299
// if Prob ( 60 ) then
19274: LD_INT 60
19276: PPUSH
19277: CALL_OW 13
19281: IFFALSE 19297
// SetSide ( i , side ) ;
19283: LD_VAR 0 1
19287: PPUSH
19288: LD_VAR 0 3
19292: PPUSH
19293: CALL_OW 235
19297: GO 19271
19299: POP
19300: POP
// end ;
19301: PPOPN 3
19303: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
19304: LD_EXP 22
19308: PUSH
19309: LD_EXP 35
19313: AND
19314: IFFALSE 19433
19316: GO 19318
19318: DISABLE
19319: LD_INT 0
19321: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
19322: LD_ADDR_VAR 0 1
19326: PUSH
19327: LD_INT 22
19329: PUSH
19330: LD_OWVAR 2
19334: PUSH
19335: EMPTY
19336: LIST
19337: LIST
19338: PUSH
19339: LD_INT 21
19341: PUSH
19342: LD_INT 1
19344: PUSH
19345: EMPTY
19346: LIST
19347: LIST
19348: PUSH
19349: LD_INT 3
19351: PUSH
19352: LD_INT 23
19354: PUSH
19355: LD_INT 0
19357: PUSH
19358: EMPTY
19359: LIST
19360: LIST
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: PUSH
19366: EMPTY
19367: LIST
19368: LIST
19369: LIST
19370: PPUSH
19371: CALL_OW 69
19375: PUSH
19376: FOR_IN
19377: IFFALSE 19431
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
19379: LD_VAR 0 1
19383: PPUSH
19384: CALL_OW 257
19388: PUSH
19389: LD_INT 1
19391: PUSH
19392: LD_INT 2
19394: PUSH
19395: LD_INT 3
19397: PUSH
19398: LD_INT 4
19400: PUSH
19401: EMPTY
19402: LIST
19403: LIST
19404: LIST
19405: LIST
19406: IN
19407: IFFALSE 19429
// SetClass ( un , rand ( 1 , 4 ) ) ;
19409: LD_VAR 0 1
19413: PPUSH
19414: LD_INT 1
19416: PPUSH
19417: LD_INT 4
19419: PPUSH
19420: CALL_OW 12
19424: PPUSH
19425: CALL_OW 336
19429: GO 19376
19431: POP
19432: POP
// end ;
19433: PPOPN 1
19435: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
19436: LD_EXP 22
19440: PUSH
19441: LD_EXP 34
19445: AND
19446: IFFALSE 19525
19448: GO 19450
19450: DISABLE
19451: LD_INT 0
19453: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19454: LD_ADDR_VAR 0 1
19458: PUSH
19459: LD_INT 22
19461: PUSH
19462: LD_OWVAR 2
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: PUSH
19471: LD_INT 21
19473: PUSH
19474: LD_INT 3
19476: PUSH
19477: EMPTY
19478: LIST
19479: LIST
19480: PUSH
19481: EMPTY
19482: LIST
19483: LIST
19484: PPUSH
19485: CALL_OW 69
19489: ST_TO_ADDR
// if not tmp then
19490: LD_VAR 0 1
19494: NOT
19495: IFFALSE 19499
// exit ;
19497: GO 19525
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
19499: LD_VAR 0 1
19503: PUSH
19504: LD_INT 1
19506: PPUSH
19507: LD_VAR 0 1
19511: PPUSH
19512: CALL_OW 12
19516: ARRAY
19517: PPUSH
19518: LD_INT 100
19520: PPUSH
19521: CALL_OW 234
// end ;
19525: PPOPN 1
19527: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
19528: LD_EXP 22
19532: PUSH
19533: LD_EXP 36
19537: AND
19538: IFFALSE 19636
19540: GO 19542
19542: DISABLE
19543: LD_INT 0
19545: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19546: LD_ADDR_VAR 0 1
19550: PUSH
19551: LD_INT 22
19553: PUSH
19554: LD_OWVAR 2
19558: PUSH
19559: EMPTY
19560: LIST
19561: LIST
19562: PUSH
19563: LD_INT 21
19565: PUSH
19566: LD_INT 1
19568: PUSH
19569: EMPTY
19570: LIST
19571: LIST
19572: PUSH
19573: EMPTY
19574: LIST
19575: LIST
19576: PPUSH
19577: CALL_OW 69
19581: ST_TO_ADDR
// if not tmp then
19582: LD_VAR 0 1
19586: NOT
19587: IFFALSE 19591
// exit ;
19589: GO 19636
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
19591: LD_VAR 0 1
19595: PUSH
19596: LD_INT 1
19598: PPUSH
19599: LD_VAR 0 1
19603: PPUSH
19604: CALL_OW 12
19608: ARRAY
19609: PPUSH
19610: LD_INT 1
19612: PPUSH
19613: LD_INT 4
19615: PPUSH
19616: CALL_OW 12
19620: PPUSH
19621: LD_INT 3000
19623: PPUSH
19624: LD_INT 9000
19626: PPUSH
19627: CALL_OW 12
19631: PPUSH
19632: CALL_OW 492
// end ;
19636: PPOPN 1
19638: END
// every 0 0$1 trigger StreamModeActive and sDepot do
19639: LD_EXP 22
19643: PUSH
19644: LD_EXP 37
19648: AND
19649: IFFALSE 19669
19651: GO 19653
19653: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
19654: LD_INT 1
19656: PPUSH
19657: LD_OWVAR 2
19661: PPUSH
19662: LD_INT 0
19664: PPUSH
19665: CALL_OW 324
19669: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
19670: LD_EXP 22
19674: PUSH
19675: LD_EXP 38
19679: AND
19680: IFFALSE 19763
19682: GO 19684
19684: DISABLE
19685: LD_INT 0
19687: PPUSH
19688: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19689: LD_ADDR_VAR 0 2
19693: PUSH
19694: LD_INT 22
19696: PUSH
19697: LD_OWVAR 2
19701: PUSH
19702: EMPTY
19703: LIST
19704: LIST
19705: PUSH
19706: LD_INT 21
19708: PUSH
19709: LD_INT 3
19711: PUSH
19712: EMPTY
19713: LIST
19714: LIST
19715: PUSH
19716: EMPTY
19717: LIST
19718: LIST
19719: PPUSH
19720: CALL_OW 69
19724: ST_TO_ADDR
// if not tmp then
19725: LD_VAR 0 2
19729: NOT
19730: IFFALSE 19734
// exit ;
19732: GO 19763
// for i in tmp do
19734: LD_ADDR_VAR 0 1
19738: PUSH
19739: LD_VAR 0 2
19743: PUSH
19744: FOR_IN
19745: IFFALSE 19761
// SetBLevel ( i , 10 ) ;
19747: LD_VAR 0 1
19751: PPUSH
19752: LD_INT 10
19754: PPUSH
19755: CALL_OW 241
19759: GO 19744
19761: POP
19762: POP
// end ;
19763: PPOPN 2
19765: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
19766: LD_EXP 22
19770: PUSH
19771: LD_EXP 39
19775: AND
19776: IFFALSE 19887
19778: GO 19780
19780: DISABLE
19781: LD_INT 0
19783: PPUSH
19784: PPUSH
19785: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19786: LD_ADDR_VAR 0 3
19790: PUSH
19791: LD_INT 22
19793: PUSH
19794: LD_OWVAR 2
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: PUSH
19803: LD_INT 25
19805: PUSH
19806: LD_INT 1
19808: PUSH
19809: EMPTY
19810: LIST
19811: LIST
19812: PUSH
19813: EMPTY
19814: LIST
19815: LIST
19816: PPUSH
19817: CALL_OW 69
19821: ST_TO_ADDR
// if not tmp then
19822: LD_VAR 0 3
19826: NOT
19827: IFFALSE 19831
// exit ;
19829: GO 19887
// un := tmp [ rand ( 1 , tmp ) ] ;
19831: LD_ADDR_VAR 0 2
19835: PUSH
19836: LD_VAR 0 3
19840: PUSH
19841: LD_INT 1
19843: PPUSH
19844: LD_VAR 0 3
19848: PPUSH
19849: CALL_OW 12
19853: ARRAY
19854: ST_TO_ADDR
// if Crawls ( un ) then
19855: LD_VAR 0 2
19859: PPUSH
19860: CALL_OW 318
19864: IFFALSE 19875
// ComWalk ( un ) ;
19866: LD_VAR 0 2
19870: PPUSH
19871: CALL_OW 138
// SetClass ( un , class_sniper ) ;
19875: LD_VAR 0 2
19879: PPUSH
19880: LD_INT 5
19882: PPUSH
19883: CALL_OW 336
// end ;
19887: PPOPN 3
19889: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
19890: LD_EXP 22
19894: PUSH
19895: LD_EXP 40
19899: AND
19900: PUSH
19901: LD_OWVAR 67
19905: PUSH
19906: LD_INT 4
19908: LESS
19909: AND
19910: IFFALSE 19929
19912: GO 19914
19914: DISABLE
// begin Difficulty := Difficulty + 1 ;
19915: LD_ADDR_OWVAR 67
19919: PUSH
19920: LD_OWVAR 67
19924: PUSH
19925: LD_INT 1
19927: PLUS
19928: ST_TO_ADDR
// end ;
19929: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
19930: LD_EXP 22
19934: PUSH
19935: LD_EXP 41
19939: AND
19940: IFFALSE 20043
19942: GO 19944
19944: DISABLE
19945: LD_INT 0
19947: PPUSH
// begin for i := 1 to 5 do
19948: LD_ADDR_VAR 0 1
19952: PUSH
19953: DOUBLE
19954: LD_INT 1
19956: DEC
19957: ST_TO_ADDR
19958: LD_INT 5
19960: PUSH
19961: FOR_TO
19962: IFFALSE 20041
// begin uc_nation := nation_nature ;
19964: LD_ADDR_OWVAR 21
19968: PUSH
19969: LD_INT 0
19971: ST_TO_ADDR
// uc_side := 0 ;
19972: LD_ADDR_OWVAR 20
19976: PUSH
19977: LD_INT 0
19979: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19980: LD_ADDR_OWVAR 29
19984: PUSH
19985: LD_INT 12
19987: PUSH
19988: LD_INT 12
19990: PUSH
19991: EMPTY
19992: LIST
19993: LIST
19994: ST_TO_ADDR
// hc_agressivity := 20 ;
19995: LD_ADDR_OWVAR 35
19999: PUSH
20000: LD_INT 20
20002: ST_TO_ADDR
// hc_class := class_tiger ;
20003: LD_ADDR_OWVAR 28
20007: PUSH
20008: LD_INT 14
20010: ST_TO_ADDR
// hc_gallery :=  ;
20011: LD_ADDR_OWVAR 33
20015: PUSH
20016: LD_STRING 
20018: ST_TO_ADDR
// hc_name :=  ;
20019: LD_ADDR_OWVAR 26
20023: PUSH
20024: LD_STRING 
20026: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
20027: CALL_OW 44
20031: PPUSH
20032: LD_INT 0
20034: PPUSH
20035: CALL_OW 51
// end ;
20039: GO 19961
20041: POP
20042: POP
// end ;
20043: PPOPN 1
20045: END
// every 0 0$1 trigger StreamModeActive and sBomb do
20046: LD_EXP 22
20050: PUSH
20051: LD_EXP 42
20055: AND
20056: IFFALSE 20065
20058: GO 20060
20060: DISABLE
// StreamSibBomb ;
20061: CALL 20066 0 0
20065: END
// export function StreamSibBomb ; var i , x , y ; begin
20066: LD_INT 0
20068: PPUSH
20069: PPUSH
20070: PPUSH
20071: PPUSH
// result := false ;
20072: LD_ADDR_VAR 0 1
20076: PUSH
20077: LD_INT 0
20079: ST_TO_ADDR
// for i := 1 to 16 do
20080: LD_ADDR_VAR 0 2
20084: PUSH
20085: DOUBLE
20086: LD_INT 1
20088: DEC
20089: ST_TO_ADDR
20090: LD_INT 16
20092: PUSH
20093: FOR_TO
20094: IFFALSE 20293
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20096: LD_ADDR_VAR 0 3
20100: PUSH
20101: LD_INT 10
20103: PUSH
20104: LD_INT 20
20106: PUSH
20107: LD_INT 30
20109: PUSH
20110: LD_INT 40
20112: PUSH
20113: LD_INT 50
20115: PUSH
20116: LD_INT 60
20118: PUSH
20119: LD_INT 70
20121: PUSH
20122: LD_INT 80
20124: PUSH
20125: LD_INT 90
20127: PUSH
20128: LD_INT 100
20130: PUSH
20131: LD_INT 110
20133: PUSH
20134: LD_INT 120
20136: PUSH
20137: LD_INT 130
20139: PUSH
20140: LD_INT 140
20142: PUSH
20143: LD_INT 150
20145: PUSH
20146: EMPTY
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: LIST
20162: PUSH
20163: LD_INT 1
20165: PPUSH
20166: LD_INT 15
20168: PPUSH
20169: CALL_OW 12
20173: ARRAY
20174: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20175: LD_ADDR_VAR 0 4
20179: PUSH
20180: LD_INT 10
20182: PUSH
20183: LD_INT 20
20185: PUSH
20186: LD_INT 30
20188: PUSH
20189: LD_INT 40
20191: PUSH
20192: LD_INT 50
20194: PUSH
20195: LD_INT 60
20197: PUSH
20198: LD_INT 70
20200: PUSH
20201: LD_INT 80
20203: PUSH
20204: LD_INT 90
20206: PUSH
20207: LD_INT 100
20209: PUSH
20210: LD_INT 110
20212: PUSH
20213: LD_INT 120
20215: PUSH
20216: LD_INT 130
20218: PUSH
20219: LD_INT 140
20221: PUSH
20222: LD_INT 150
20224: PUSH
20225: EMPTY
20226: LIST
20227: LIST
20228: LIST
20229: LIST
20230: LIST
20231: LIST
20232: LIST
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: PUSH
20242: LD_INT 1
20244: PPUSH
20245: LD_INT 15
20247: PPUSH
20248: CALL_OW 12
20252: ARRAY
20253: ST_TO_ADDR
// if ValidHex ( x , y ) then
20254: LD_VAR 0 3
20258: PPUSH
20259: LD_VAR 0 4
20263: PPUSH
20264: CALL_OW 488
20268: IFFALSE 20291
// begin result := [ x , y ] ;
20270: LD_ADDR_VAR 0 1
20274: PUSH
20275: LD_VAR 0 3
20279: PUSH
20280: LD_VAR 0 4
20284: PUSH
20285: EMPTY
20286: LIST
20287: LIST
20288: ST_TO_ADDR
// break ;
20289: GO 20293
// end ; end ;
20291: GO 20093
20293: POP
20294: POP
// if result then
20295: LD_VAR 0 1
20299: IFFALSE 20359
// begin ToLua ( playSibBomb() ) ;
20301: LD_STRING playSibBomb()
20303: PPUSH
20304: CALL_OW 559
// wait ( 0 0$14 ) ;
20308: LD_INT 490
20310: PPUSH
20311: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
20315: LD_VAR 0 1
20319: PUSH
20320: LD_INT 1
20322: ARRAY
20323: PPUSH
20324: LD_VAR 0 1
20328: PUSH
20329: LD_INT 2
20331: ARRAY
20332: PPUSH
20333: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
20337: LD_VAR 0 1
20341: PUSH
20342: LD_INT 1
20344: ARRAY
20345: PPUSH
20346: LD_VAR 0 1
20350: PUSH
20351: LD_INT 2
20353: ARRAY
20354: PPUSH
20355: CALL_OW 429
// end ; end ;
20359: LD_VAR 0 1
20363: RET
// every 0 0$1 trigger StreamModeActive and sReset do
20364: LD_EXP 22
20368: PUSH
20369: LD_EXP 44
20373: AND
20374: IFFALSE 20386
20376: GO 20378
20378: DISABLE
// YouLost (  ) ;
20379: LD_STRING 
20381: PPUSH
20382: CALL_OW 104
20386: END
// every 0 0$1 trigger StreamModeActive and sFog do
20387: LD_EXP 22
20391: PUSH
20392: LD_EXP 43
20396: AND
20397: IFFALSE 20411
20399: GO 20401
20401: DISABLE
// FogOff ( your_side ) ;
20402: LD_OWVAR 2
20406: PPUSH
20407: CALL_OW 344
20411: END
// every 0 0$1 trigger StreamModeActive and sSun do
20412: LD_EXP 22
20416: PUSH
20417: LD_EXP 45
20421: AND
20422: IFFALSE 20450
20424: GO 20426
20426: DISABLE
// begin solar_recharge_percent := 0 ;
20427: LD_ADDR_OWVAR 79
20431: PUSH
20432: LD_INT 0
20434: ST_TO_ADDR
// wait ( 5 5$00 ) ;
20435: LD_INT 10500
20437: PPUSH
20438: CALL_OW 67
// solar_recharge_percent := 100 ;
20442: LD_ADDR_OWVAR 79
20446: PUSH
20447: LD_INT 100
20449: ST_TO_ADDR
// end ;
20450: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
20451: LD_EXP 22
20455: PUSH
20456: LD_EXP 46
20460: AND
20461: IFFALSE 20700
20463: GO 20465
20465: DISABLE
20466: LD_INT 0
20468: PPUSH
20469: PPUSH
20470: PPUSH
// begin tmp := [ ] ;
20471: LD_ADDR_VAR 0 3
20475: PUSH
20476: EMPTY
20477: ST_TO_ADDR
// for i := 1 to 6 do
20478: LD_ADDR_VAR 0 1
20482: PUSH
20483: DOUBLE
20484: LD_INT 1
20486: DEC
20487: ST_TO_ADDR
20488: LD_INT 6
20490: PUSH
20491: FOR_TO
20492: IFFALSE 20597
// begin uc_nation := nation_nature ;
20494: LD_ADDR_OWVAR 21
20498: PUSH
20499: LD_INT 0
20501: ST_TO_ADDR
// uc_side := 0 ;
20502: LD_ADDR_OWVAR 20
20506: PUSH
20507: LD_INT 0
20509: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20510: LD_ADDR_OWVAR 29
20514: PUSH
20515: LD_INT 12
20517: PUSH
20518: LD_INT 12
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: ST_TO_ADDR
// hc_agressivity := 20 ;
20525: LD_ADDR_OWVAR 35
20529: PUSH
20530: LD_INT 20
20532: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
20533: LD_ADDR_OWVAR 28
20537: PUSH
20538: LD_INT 17
20540: ST_TO_ADDR
// hc_gallery :=  ;
20541: LD_ADDR_OWVAR 33
20545: PUSH
20546: LD_STRING 
20548: ST_TO_ADDR
// hc_name :=  ;
20549: LD_ADDR_OWVAR 26
20553: PUSH
20554: LD_STRING 
20556: ST_TO_ADDR
// un := CreateHuman ;
20557: LD_ADDR_VAR 0 2
20561: PUSH
20562: CALL_OW 44
20566: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
20567: LD_VAR 0 2
20571: PPUSH
20572: LD_INT 1
20574: PPUSH
20575: CALL_OW 51
// tmp := tmp ^ un ;
20579: LD_ADDR_VAR 0 3
20583: PUSH
20584: LD_VAR 0 3
20588: PUSH
20589: LD_VAR 0 2
20593: ADD
20594: ST_TO_ADDR
// end ;
20595: GO 20491
20597: POP
20598: POP
// repeat wait ( 0 0$1 ) ;
20599: LD_INT 35
20601: PPUSH
20602: CALL_OW 67
// for un in tmp do
20606: LD_ADDR_VAR 0 2
20610: PUSH
20611: LD_VAR 0 3
20615: PUSH
20616: FOR_IN
20617: IFFALSE 20691
// begin if IsDead ( un ) then
20619: LD_VAR 0 2
20623: PPUSH
20624: CALL_OW 301
20628: IFFALSE 20648
// begin tmp := tmp diff un ;
20630: LD_ADDR_VAR 0 3
20634: PUSH
20635: LD_VAR 0 3
20639: PUSH
20640: LD_VAR 0 2
20644: DIFF
20645: ST_TO_ADDR
// continue ;
20646: GO 20616
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
20648: LD_VAR 0 2
20652: PPUSH
20653: LD_INT 3
20655: PUSH
20656: LD_INT 22
20658: PUSH
20659: LD_INT 0
20661: PUSH
20662: EMPTY
20663: LIST
20664: LIST
20665: PUSH
20666: EMPTY
20667: LIST
20668: LIST
20669: PPUSH
20670: CALL_OW 69
20674: PPUSH
20675: LD_VAR 0 2
20679: PPUSH
20680: CALL_OW 74
20684: PPUSH
20685: CALL_OW 115
// end ;
20689: GO 20616
20691: POP
20692: POP
// until not tmp ;
20693: LD_VAR 0 3
20697: NOT
20698: IFFALSE 20599
// end ;
20700: PPOPN 3
20702: END
// every 0 0$1 trigger StreamModeActive and sTroll do
20703: LD_EXP 22
20707: PUSH
20708: LD_EXP 47
20712: AND
20713: IFFALSE 20767
20715: GO 20717
20717: DISABLE
// begin ToLua ( displayTroll(); ) ;
20718: LD_STRING displayTroll();
20720: PPUSH
20721: CALL_OW 559
// wait ( 3 3$00 ) ;
20725: LD_INT 6300
20727: PPUSH
20728: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20732: LD_STRING hideTroll();
20734: PPUSH
20735: CALL_OW 559
// wait ( 1 1$00 ) ;
20739: LD_INT 2100
20741: PPUSH
20742: CALL_OW 67
// ToLua ( displayTroll(); ) ;
20746: LD_STRING displayTroll();
20748: PPUSH
20749: CALL_OW 559
// wait ( 1 1$00 ) ;
20753: LD_INT 2100
20755: PPUSH
20756: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20760: LD_STRING hideTroll();
20762: PPUSH
20763: CALL_OW 559
// end ;
20767: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
20768: LD_EXP 22
20772: PUSH
20773: LD_EXP 48
20777: AND
20778: IFFALSE 20841
20780: GO 20782
20782: DISABLE
20783: LD_INT 0
20785: PPUSH
// begin p := 0 ;
20786: LD_ADDR_VAR 0 1
20790: PUSH
20791: LD_INT 0
20793: ST_TO_ADDR
// repeat game_speed := 1 ;
20794: LD_ADDR_OWVAR 65
20798: PUSH
20799: LD_INT 1
20801: ST_TO_ADDR
// wait ( 0 0$1 ) ;
20802: LD_INT 35
20804: PPUSH
20805: CALL_OW 67
// p := p + 1 ;
20809: LD_ADDR_VAR 0 1
20813: PUSH
20814: LD_VAR 0 1
20818: PUSH
20819: LD_INT 1
20821: PLUS
20822: ST_TO_ADDR
// until p >= 60 ;
20823: LD_VAR 0 1
20827: PUSH
20828: LD_INT 60
20830: GREATEREQUAL
20831: IFFALSE 20794
// game_speed := 4 ;
20833: LD_ADDR_OWVAR 65
20837: PUSH
20838: LD_INT 4
20840: ST_TO_ADDR
// end ;
20841: PPOPN 1
20843: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
20844: LD_EXP 22
20848: PUSH
20849: LD_EXP 49
20853: AND
20854: IFFALSE 21000
20856: GO 20858
20858: DISABLE
20859: LD_INT 0
20861: PPUSH
20862: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20863: LD_ADDR_VAR 0 1
20867: PUSH
20868: LD_INT 22
20870: PUSH
20871: LD_OWVAR 2
20875: PUSH
20876: EMPTY
20877: LIST
20878: LIST
20879: PUSH
20880: LD_INT 2
20882: PUSH
20883: LD_INT 30
20885: PUSH
20886: LD_INT 0
20888: PUSH
20889: EMPTY
20890: LIST
20891: LIST
20892: PUSH
20893: LD_INT 30
20895: PUSH
20896: LD_INT 1
20898: PUSH
20899: EMPTY
20900: LIST
20901: LIST
20902: PUSH
20903: EMPTY
20904: LIST
20905: LIST
20906: LIST
20907: PUSH
20908: EMPTY
20909: LIST
20910: LIST
20911: PPUSH
20912: CALL_OW 69
20916: ST_TO_ADDR
// if not depot then
20917: LD_VAR 0 1
20921: NOT
20922: IFFALSE 20926
// exit ;
20924: GO 21000
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20926: LD_ADDR_VAR 0 2
20930: PUSH
20931: LD_VAR 0 1
20935: PUSH
20936: LD_INT 1
20938: PPUSH
20939: LD_VAR 0 1
20943: PPUSH
20944: CALL_OW 12
20948: ARRAY
20949: PPUSH
20950: CALL_OW 274
20954: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
20955: LD_VAR 0 2
20959: PPUSH
20960: LD_INT 1
20962: PPUSH
20963: LD_INT 0
20965: PPUSH
20966: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
20970: LD_VAR 0 2
20974: PPUSH
20975: LD_INT 2
20977: PPUSH
20978: LD_INT 0
20980: PPUSH
20981: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
20985: LD_VAR 0 2
20989: PPUSH
20990: LD_INT 3
20992: PPUSH
20993: LD_INT 0
20995: PPUSH
20996: CALL_OW 277
// end ;
21000: PPOPN 2
21002: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
21003: LD_EXP 22
21007: PUSH
21008: LD_EXP 50
21012: AND
21013: IFFALSE 21110
21015: GO 21017
21017: DISABLE
21018: LD_INT 0
21020: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21021: LD_ADDR_VAR 0 1
21025: PUSH
21026: LD_INT 22
21028: PUSH
21029: LD_OWVAR 2
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: PUSH
21038: LD_INT 21
21040: PUSH
21041: LD_INT 1
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: PUSH
21048: LD_INT 3
21050: PUSH
21051: LD_INT 23
21053: PUSH
21054: LD_INT 0
21056: PUSH
21057: EMPTY
21058: LIST
21059: LIST
21060: PUSH
21061: EMPTY
21062: LIST
21063: LIST
21064: PUSH
21065: EMPTY
21066: LIST
21067: LIST
21068: LIST
21069: PPUSH
21070: CALL_OW 69
21074: ST_TO_ADDR
// if not tmp then
21075: LD_VAR 0 1
21079: NOT
21080: IFFALSE 21084
// exit ;
21082: GO 21110
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
21084: LD_VAR 0 1
21088: PUSH
21089: LD_INT 1
21091: PPUSH
21092: LD_VAR 0 1
21096: PPUSH
21097: CALL_OW 12
21101: ARRAY
21102: PPUSH
21103: LD_INT 200
21105: PPUSH
21106: CALL_OW 234
// end ;
21110: PPOPN 1
21112: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
21113: LD_EXP 22
21117: PUSH
21118: LD_EXP 51
21122: AND
21123: IFFALSE 21202
21125: GO 21127
21127: DISABLE
21128: LD_INT 0
21130: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
21131: LD_ADDR_VAR 0 1
21135: PUSH
21136: LD_INT 22
21138: PUSH
21139: LD_OWVAR 2
21143: PUSH
21144: EMPTY
21145: LIST
21146: LIST
21147: PUSH
21148: LD_INT 21
21150: PUSH
21151: LD_INT 2
21153: PUSH
21154: EMPTY
21155: LIST
21156: LIST
21157: PUSH
21158: EMPTY
21159: LIST
21160: LIST
21161: PPUSH
21162: CALL_OW 69
21166: ST_TO_ADDR
// if not tmp then
21167: LD_VAR 0 1
21171: NOT
21172: IFFALSE 21176
// exit ;
21174: GO 21202
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
21176: LD_VAR 0 1
21180: PUSH
21181: LD_INT 1
21183: PPUSH
21184: LD_VAR 0 1
21188: PPUSH
21189: CALL_OW 12
21193: ARRAY
21194: PPUSH
21195: LD_INT 60
21197: PPUSH
21198: CALL_OW 234
// end ;
21202: PPOPN 1
21204: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
21205: LD_EXP 22
21209: PUSH
21210: LD_EXP 52
21214: AND
21215: IFFALSE 21314
21217: GO 21219
21219: DISABLE
21220: LD_INT 0
21222: PPUSH
21223: PPUSH
// begin enable ;
21224: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
21225: LD_ADDR_VAR 0 1
21229: PUSH
21230: LD_INT 22
21232: PUSH
21233: LD_OWVAR 2
21237: PUSH
21238: EMPTY
21239: LIST
21240: LIST
21241: PUSH
21242: LD_INT 61
21244: PUSH
21245: EMPTY
21246: LIST
21247: PUSH
21248: LD_INT 33
21250: PUSH
21251: LD_INT 2
21253: PUSH
21254: EMPTY
21255: LIST
21256: LIST
21257: PUSH
21258: EMPTY
21259: LIST
21260: LIST
21261: LIST
21262: PPUSH
21263: CALL_OW 69
21267: ST_TO_ADDR
// if not tmp then
21268: LD_VAR 0 1
21272: NOT
21273: IFFALSE 21277
// exit ;
21275: GO 21314
// for i in tmp do
21277: LD_ADDR_VAR 0 2
21281: PUSH
21282: LD_VAR 0 1
21286: PUSH
21287: FOR_IN
21288: IFFALSE 21312
// if IsControledBy ( i ) then
21290: LD_VAR 0 2
21294: PPUSH
21295: CALL_OW 312
21299: IFFALSE 21310
// ComUnlink ( i ) ;
21301: LD_VAR 0 2
21305: PPUSH
21306: CALL_OW 136
21310: GO 21287
21312: POP
21313: POP
// end ;
21314: PPOPN 2
21316: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
21317: LD_EXP 22
21321: PUSH
21322: LD_EXP 53
21326: AND
21327: IFFALSE 21467
21329: GO 21331
21331: DISABLE
21332: LD_INT 0
21334: PPUSH
21335: PPUSH
// begin ToLua ( displayPowell(); ) ;
21336: LD_STRING displayPowell();
21338: PPUSH
21339: CALL_OW 559
// uc_side := 0 ;
21343: LD_ADDR_OWVAR 20
21347: PUSH
21348: LD_INT 0
21350: ST_TO_ADDR
// uc_nation := 2 ;
21351: LD_ADDR_OWVAR 21
21355: PUSH
21356: LD_INT 2
21358: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
21359: LD_ADDR_OWVAR 37
21363: PUSH
21364: LD_INT 14
21366: ST_TO_ADDR
// vc_engine := engine_siberite ;
21367: LD_ADDR_OWVAR 39
21371: PUSH
21372: LD_INT 3
21374: ST_TO_ADDR
// vc_control := control_apeman ;
21375: LD_ADDR_OWVAR 38
21379: PUSH
21380: LD_INT 5
21382: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
21383: LD_ADDR_OWVAR 40
21387: PUSH
21388: LD_INT 29
21390: ST_TO_ADDR
// un := CreateVehicle ;
21391: LD_ADDR_VAR 0 2
21395: PUSH
21396: CALL_OW 45
21400: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21401: LD_VAR 0 2
21405: PPUSH
21406: LD_INT 1
21408: PPUSH
21409: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21413: LD_INT 35
21415: PPUSH
21416: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21420: LD_VAR 0 2
21424: PPUSH
21425: LD_INT 22
21427: PUSH
21428: LD_OWVAR 2
21432: PUSH
21433: EMPTY
21434: LIST
21435: LIST
21436: PPUSH
21437: CALL_OW 69
21441: PPUSH
21442: LD_VAR 0 2
21446: PPUSH
21447: CALL_OW 74
21451: PPUSH
21452: CALL_OW 115
// until IsDead ( un ) ;
21456: LD_VAR 0 2
21460: PPUSH
21461: CALL_OW 301
21465: IFFALSE 21413
// end ;
21467: PPOPN 2
21469: END
// every 0 0$1 trigger StreamModeActive and sStu do
21470: LD_EXP 22
21474: PUSH
21475: LD_EXP 61
21479: AND
21480: IFFALSE 21496
21482: GO 21484
21484: DISABLE
// begin ToLua ( displayStucuk(); ) ;
21485: LD_STRING displayStucuk();
21487: PPUSH
21488: CALL_OW 559
// ResetFog ;
21492: CALL_OW 335
// end ;
21496: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
21497: LD_EXP 22
21501: PUSH
21502: LD_EXP 54
21506: AND
21507: IFFALSE 21648
21509: GO 21511
21511: DISABLE
21512: LD_INT 0
21514: PPUSH
21515: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21516: LD_ADDR_VAR 0 2
21520: PUSH
21521: LD_INT 22
21523: PUSH
21524: LD_OWVAR 2
21528: PUSH
21529: EMPTY
21530: LIST
21531: LIST
21532: PUSH
21533: LD_INT 21
21535: PUSH
21536: LD_INT 1
21538: PUSH
21539: EMPTY
21540: LIST
21541: LIST
21542: PUSH
21543: EMPTY
21544: LIST
21545: LIST
21546: PPUSH
21547: CALL_OW 69
21551: ST_TO_ADDR
// if not tmp then
21552: LD_VAR 0 2
21556: NOT
21557: IFFALSE 21561
// exit ;
21559: GO 21648
// un := tmp [ rand ( 1 , tmp ) ] ;
21561: LD_ADDR_VAR 0 1
21565: PUSH
21566: LD_VAR 0 2
21570: PUSH
21571: LD_INT 1
21573: PPUSH
21574: LD_VAR 0 2
21578: PPUSH
21579: CALL_OW 12
21583: ARRAY
21584: ST_TO_ADDR
// SetSide ( un , 0 ) ;
21585: LD_VAR 0 1
21589: PPUSH
21590: LD_INT 0
21592: PPUSH
21593: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
21597: LD_VAR 0 1
21601: PPUSH
21602: LD_OWVAR 3
21606: PUSH
21607: LD_VAR 0 1
21611: DIFF
21612: PPUSH
21613: LD_VAR 0 1
21617: PPUSH
21618: CALL_OW 74
21622: PPUSH
21623: CALL_OW 115
// wait ( 0 0$20 ) ;
21627: LD_INT 700
21629: PPUSH
21630: CALL_OW 67
// SetSide ( un , your_side ) ;
21634: LD_VAR 0 1
21638: PPUSH
21639: LD_OWVAR 2
21643: PPUSH
21644: CALL_OW 235
// end ;
21648: PPOPN 2
21650: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
21651: LD_EXP 22
21655: PUSH
21656: LD_EXP 55
21660: AND
21661: IFFALSE 21767
21663: GO 21665
21665: DISABLE
21666: LD_INT 0
21668: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21669: LD_ADDR_VAR 0 1
21673: PUSH
21674: LD_INT 22
21676: PUSH
21677: LD_OWVAR 2
21681: PUSH
21682: EMPTY
21683: LIST
21684: LIST
21685: PUSH
21686: LD_INT 2
21688: PUSH
21689: LD_INT 30
21691: PUSH
21692: LD_INT 0
21694: PUSH
21695: EMPTY
21696: LIST
21697: LIST
21698: PUSH
21699: LD_INT 30
21701: PUSH
21702: LD_INT 1
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: PUSH
21709: EMPTY
21710: LIST
21711: LIST
21712: LIST
21713: PUSH
21714: EMPTY
21715: LIST
21716: LIST
21717: PPUSH
21718: CALL_OW 69
21722: ST_TO_ADDR
// if not depot then
21723: LD_VAR 0 1
21727: NOT
21728: IFFALSE 21732
// exit ;
21730: GO 21767
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
21732: LD_VAR 0 1
21736: PUSH
21737: LD_INT 1
21739: ARRAY
21740: PPUSH
21741: CALL_OW 250
21745: PPUSH
21746: LD_VAR 0 1
21750: PUSH
21751: LD_INT 1
21753: ARRAY
21754: PPUSH
21755: CALL_OW 251
21759: PPUSH
21760: LD_INT 70
21762: PPUSH
21763: CALL_OW 495
// end ;
21767: PPOPN 1
21769: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
21770: LD_EXP 22
21774: PUSH
21775: LD_EXP 56
21779: AND
21780: IFFALSE 21991
21782: GO 21784
21784: DISABLE
21785: LD_INT 0
21787: PPUSH
21788: PPUSH
21789: PPUSH
21790: PPUSH
21791: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21792: LD_ADDR_VAR 0 5
21796: PUSH
21797: LD_INT 22
21799: PUSH
21800: LD_OWVAR 2
21804: PUSH
21805: EMPTY
21806: LIST
21807: LIST
21808: PUSH
21809: LD_INT 21
21811: PUSH
21812: LD_INT 1
21814: PUSH
21815: EMPTY
21816: LIST
21817: LIST
21818: PUSH
21819: EMPTY
21820: LIST
21821: LIST
21822: PPUSH
21823: CALL_OW 69
21827: ST_TO_ADDR
// if not tmp then
21828: LD_VAR 0 5
21832: NOT
21833: IFFALSE 21837
// exit ;
21835: GO 21991
// for i in tmp do
21837: LD_ADDR_VAR 0 1
21841: PUSH
21842: LD_VAR 0 5
21846: PUSH
21847: FOR_IN
21848: IFFALSE 21989
// begin d := rand ( 0 , 5 ) ;
21850: LD_ADDR_VAR 0 4
21854: PUSH
21855: LD_INT 0
21857: PPUSH
21858: LD_INT 5
21860: PPUSH
21861: CALL_OW 12
21865: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
21866: LD_ADDR_VAR 0 2
21870: PUSH
21871: LD_VAR 0 1
21875: PPUSH
21876: CALL_OW 250
21880: PPUSH
21881: LD_VAR 0 4
21885: PPUSH
21886: LD_INT 3
21888: PPUSH
21889: LD_INT 12
21891: PPUSH
21892: CALL_OW 12
21896: PPUSH
21897: CALL_OW 272
21901: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
21902: LD_ADDR_VAR 0 3
21906: PUSH
21907: LD_VAR 0 1
21911: PPUSH
21912: CALL_OW 251
21916: PPUSH
21917: LD_VAR 0 4
21921: PPUSH
21922: LD_INT 3
21924: PPUSH
21925: LD_INT 12
21927: PPUSH
21928: CALL_OW 12
21932: PPUSH
21933: CALL_OW 273
21937: ST_TO_ADDR
// if ValidHex ( x , y ) then
21938: LD_VAR 0 2
21942: PPUSH
21943: LD_VAR 0 3
21947: PPUSH
21948: CALL_OW 488
21952: IFFALSE 21987
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
21954: LD_VAR 0 1
21958: PPUSH
21959: LD_VAR 0 2
21963: PPUSH
21964: LD_VAR 0 3
21968: PPUSH
21969: LD_INT 3
21971: PPUSH
21972: LD_INT 6
21974: PPUSH
21975: CALL_OW 12
21979: PPUSH
21980: LD_INT 1
21982: PPUSH
21983: CALL_OW 483
// end ;
21987: GO 21847
21989: POP
21990: POP
// end ;
21991: PPOPN 5
21993: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
21994: LD_EXP 22
21998: PUSH
21999: LD_EXP 57
22003: AND
22004: IFFALSE 22098
22006: GO 22008
22008: DISABLE
22009: LD_INT 0
22011: PPUSH
22012: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
22013: LD_ADDR_VAR 0 2
22017: PUSH
22018: LD_INT 22
22020: PUSH
22021: LD_OWVAR 2
22025: PUSH
22026: EMPTY
22027: LIST
22028: LIST
22029: PUSH
22030: LD_INT 32
22032: PUSH
22033: LD_INT 1
22035: PUSH
22036: EMPTY
22037: LIST
22038: LIST
22039: PUSH
22040: LD_INT 21
22042: PUSH
22043: LD_INT 2
22045: PUSH
22046: EMPTY
22047: LIST
22048: LIST
22049: PUSH
22050: EMPTY
22051: LIST
22052: LIST
22053: LIST
22054: PPUSH
22055: CALL_OW 69
22059: ST_TO_ADDR
// if not tmp then
22060: LD_VAR 0 2
22064: NOT
22065: IFFALSE 22069
// exit ;
22067: GO 22098
// for i in tmp do
22069: LD_ADDR_VAR 0 1
22073: PUSH
22074: LD_VAR 0 2
22078: PUSH
22079: FOR_IN
22080: IFFALSE 22096
// SetFuel ( i , 0 ) ;
22082: LD_VAR 0 1
22086: PPUSH
22087: LD_INT 0
22089: PPUSH
22090: CALL_OW 240
22094: GO 22079
22096: POP
22097: POP
// end ;
22098: PPOPN 2
22100: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
22101: LD_EXP 22
22105: PUSH
22106: LD_EXP 58
22110: AND
22111: IFFALSE 22177
22113: GO 22115
22115: DISABLE
22116: LD_INT 0
22118: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22119: LD_ADDR_VAR 0 1
22123: PUSH
22124: LD_INT 22
22126: PUSH
22127: LD_OWVAR 2
22131: PUSH
22132: EMPTY
22133: LIST
22134: LIST
22135: PUSH
22136: LD_INT 30
22138: PUSH
22139: LD_INT 29
22141: PUSH
22142: EMPTY
22143: LIST
22144: LIST
22145: PUSH
22146: EMPTY
22147: LIST
22148: LIST
22149: PPUSH
22150: CALL_OW 69
22154: ST_TO_ADDR
// if not tmp then
22155: LD_VAR 0 1
22159: NOT
22160: IFFALSE 22164
// exit ;
22162: GO 22177
// DestroyUnit ( tmp [ 1 ] ) ;
22164: LD_VAR 0 1
22168: PUSH
22169: LD_INT 1
22171: ARRAY
22172: PPUSH
22173: CALL_OW 65
// end ;
22177: PPOPN 1
22179: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
22180: LD_EXP 22
22184: PUSH
22185: LD_EXP 60
22189: AND
22190: IFFALSE 22319
22192: GO 22194
22194: DISABLE
22195: LD_INT 0
22197: PPUSH
// begin uc_side := 0 ;
22198: LD_ADDR_OWVAR 20
22202: PUSH
22203: LD_INT 0
22205: ST_TO_ADDR
// uc_nation := nation_arabian ;
22206: LD_ADDR_OWVAR 21
22210: PUSH
22211: LD_INT 2
22213: ST_TO_ADDR
// hc_gallery :=  ;
22214: LD_ADDR_OWVAR 33
22218: PUSH
22219: LD_STRING 
22221: ST_TO_ADDR
// hc_name :=  ;
22222: LD_ADDR_OWVAR 26
22226: PUSH
22227: LD_STRING 
22229: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
22230: LD_INT 1
22232: PPUSH
22233: LD_INT 11
22235: PPUSH
22236: LD_INT 10
22238: PPUSH
22239: CALL_OW 380
// un := CreateHuman ;
22243: LD_ADDR_VAR 0 1
22247: PUSH
22248: CALL_OW 44
22252: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22253: LD_VAR 0 1
22257: PPUSH
22258: LD_INT 1
22260: PPUSH
22261: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
22265: LD_INT 35
22267: PPUSH
22268: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
22272: LD_VAR 0 1
22276: PPUSH
22277: LD_INT 22
22279: PUSH
22280: LD_OWVAR 2
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: PPUSH
22289: CALL_OW 69
22293: PPUSH
22294: LD_VAR 0 1
22298: PPUSH
22299: CALL_OW 74
22303: PPUSH
22304: CALL_OW 115
// until IsDead ( un ) ;
22308: LD_VAR 0 1
22312: PPUSH
22313: CALL_OW 301
22317: IFFALSE 22265
// end ;
22319: PPOPN 1
22321: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
22322: LD_EXP 22
22326: PUSH
22327: LD_EXP 62
22331: AND
22332: IFFALSE 22344
22334: GO 22336
22336: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
22337: LD_STRING earthquake(getX(game), 0, 32)
22339: PPUSH
22340: CALL_OW 559
22344: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
22345: LD_EXP 22
22349: PUSH
22350: LD_EXP 63
22354: AND
22355: IFFALSE 22446
22357: GO 22359
22359: DISABLE
22360: LD_INT 0
22362: PPUSH
// begin enable ;
22363: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
22364: LD_ADDR_VAR 0 1
22368: PUSH
22369: LD_INT 22
22371: PUSH
22372: LD_OWVAR 2
22376: PUSH
22377: EMPTY
22378: LIST
22379: LIST
22380: PUSH
22381: LD_INT 21
22383: PUSH
22384: LD_INT 2
22386: PUSH
22387: EMPTY
22388: LIST
22389: LIST
22390: PUSH
22391: LD_INT 33
22393: PUSH
22394: LD_INT 3
22396: PUSH
22397: EMPTY
22398: LIST
22399: LIST
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: LIST
22405: PPUSH
22406: CALL_OW 69
22410: ST_TO_ADDR
// if not tmp then
22411: LD_VAR 0 1
22415: NOT
22416: IFFALSE 22420
// exit ;
22418: GO 22446
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22420: LD_VAR 0 1
22424: PUSH
22425: LD_INT 1
22427: PPUSH
22428: LD_VAR 0 1
22432: PPUSH
22433: CALL_OW 12
22437: ARRAY
22438: PPUSH
22439: LD_INT 1
22441: PPUSH
22442: CALL_OW 234
// end ;
22446: PPOPN 1
22448: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
22449: LD_EXP 22
22453: PUSH
22454: LD_EXP 64
22458: AND
22459: IFFALSE 22600
22461: GO 22463
22463: DISABLE
22464: LD_INT 0
22466: PPUSH
22467: PPUSH
22468: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22469: LD_ADDR_VAR 0 3
22473: PUSH
22474: LD_INT 22
22476: PUSH
22477: LD_OWVAR 2
22481: PUSH
22482: EMPTY
22483: LIST
22484: LIST
22485: PUSH
22486: LD_INT 25
22488: PUSH
22489: LD_INT 1
22491: PUSH
22492: EMPTY
22493: LIST
22494: LIST
22495: PUSH
22496: EMPTY
22497: LIST
22498: LIST
22499: PPUSH
22500: CALL_OW 69
22504: ST_TO_ADDR
// if not tmp then
22505: LD_VAR 0 3
22509: NOT
22510: IFFALSE 22514
// exit ;
22512: GO 22600
// un := tmp [ rand ( 1 , tmp ) ] ;
22514: LD_ADDR_VAR 0 2
22518: PUSH
22519: LD_VAR 0 3
22523: PUSH
22524: LD_INT 1
22526: PPUSH
22527: LD_VAR 0 3
22531: PPUSH
22532: CALL_OW 12
22536: ARRAY
22537: ST_TO_ADDR
// if Crawls ( un ) then
22538: LD_VAR 0 2
22542: PPUSH
22543: CALL_OW 318
22547: IFFALSE 22558
// ComWalk ( un ) ;
22549: LD_VAR 0 2
22553: PPUSH
22554: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
22558: LD_VAR 0 2
22562: PPUSH
22563: LD_INT 9
22565: PPUSH
22566: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
22570: LD_INT 28
22572: PPUSH
22573: LD_OWVAR 2
22577: PPUSH
22578: LD_INT 2
22580: PPUSH
22581: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
22585: LD_INT 29
22587: PPUSH
22588: LD_OWVAR 2
22592: PPUSH
22593: LD_INT 2
22595: PPUSH
22596: CALL_OW 322
// end ;
22600: PPOPN 3
22602: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
22603: LD_EXP 22
22607: PUSH
22608: LD_EXP 65
22612: AND
22613: IFFALSE 22724
22615: GO 22617
22617: DISABLE
22618: LD_INT 0
22620: PPUSH
22621: PPUSH
22622: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22623: LD_ADDR_VAR 0 3
22627: PUSH
22628: LD_INT 22
22630: PUSH
22631: LD_OWVAR 2
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: PUSH
22640: LD_INT 25
22642: PUSH
22643: LD_INT 1
22645: PUSH
22646: EMPTY
22647: LIST
22648: LIST
22649: PUSH
22650: EMPTY
22651: LIST
22652: LIST
22653: PPUSH
22654: CALL_OW 69
22658: ST_TO_ADDR
// if not tmp then
22659: LD_VAR 0 3
22663: NOT
22664: IFFALSE 22668
// exit ;
22666: GO 22724
// un := tmp [ rand ( 1 , tmp ) ] ;
22668: LD_ADDR_VAR 0 2
22672: PUSH
22673: LD_VAR 0 3
22677: PUSH
22678: LD_INT 1
22680: PPUSH
22681: LD_VAR 0 3
22685: PPUSH
22686: CALL_OW 12
22690: ARRAY
22691: ST_TO_ADDR
// if Crawls ( un ) then
22692: LD_VAR 0 2
22696: PPUSH
22697: CALL_OW 318
22701: IFFALSE 22712
// ComWalk ( un ) ;
22703: LD_VAR 0 2
22707: PPUSH
22708: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22712: LD_VAR 0 2
22716: PPUSH
22717: LD_INT 8
22719: PPUSH
22720: CALL_OW 336
// end ;
22724: PPOPN 3
22726: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
22727: LD_EXP 22
22731: PUSH
22732: LD_EXP 66
22736: AND
22737: IFFALSE 22881
22739: GO 22741
22741: DISABLE
22742: LD_INT 0
22744: PPUSH
22745: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
22746: LD_ADDR_VAR 0 2
22750: PUSH
22751: LD_INT 22
22753: PUSH
22754: LD_OWVAR 2
22758: PUSH
22759: EMPTY
22760: LIST
22761: LIST
22762: PUSH
22763: LD_INT 21
22765: PUSH
22766: LD_INT 2
22768: PUSH
22769: EMPTY
22770: LIST
22771: LIST
22772: PUSH
22773: LD_INT 2
22775: PUSH
22776: LD_INT 34
22778: PUSH
22779: LD_INT 12
22781: PUSH
22782: EMPTY
22783: LIST
22784: LIST
22785: PUSH
22786: LD_INT 34
22788: PUSH
22789: LD_INT 51
22791: PUSH
22792: EMPTY
22793: LIST
22794: LIST
22795: PUSH
22796: LD_INT 34
22798: PUSH
22799: LD_INT 32
22801: PUSH
22802: EMPTY
22803: LIST
22804: LIST
22805: PUSH
22806: EMPTY
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: PUSH
22812: EMPTY
22813: LIST
22814: LIST
22815: LIST
22816: PPUSH
22817: CALL_OW 69
22821: ST_TO_ADDR
// if not tmp then
22822: LD_VAR 0 2
22826: NOT
22827: IFFALSE 22831
// exit ;
22829: GO 22881
// for i in tmp do
22831: LD_ADDR_VAR 0 1
22835: PUSH
22836: LD_VAR 0 2
22840: PUSH
22841: FOR_IN
22842: IFFALSE 22879
// if GetCargo ( i , mat_artifact ) = 0 then
22844: LD_VAR 0 1
22848: PPUSH
22849: LD_INT 4
22851: PPUSH
22852: CALL_OW 289
22856: PUSH
22857: LD_INT 0
22859: EQUAL
22860: IFFALSE 22877
// SetCargo ( i , mat_siberit , 100 ) ;
22862: LD_VAR 0 1
22866: PPUSH
22867: LD_INT 3
22869: PPUSH
22870: LD_INT 100
22872: PPUSH
22873: CALL_OW 290
22877: GO 22841
22879: POP
22880: POP
// end ;
22881: PPOPN 2
22883: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
22884: LD_EXP 22
22888: PUSH
22889: LD_EXP 67
22893: AND
22894: IFFALSE 23077
22896: GO 22898
22898: DISABLE
22899: LD_INT 0
22901: PPUSH
22902: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22903: LD_ADDR_VAR 0 2
22907: PUSH
22908: LD_INT 22
22910: PUSH
22911: LD_OWVAR 2
22915: PUSH
22916: EMPTY
22917: LIST
22918: LIST
22919: PPUSH
22920: CALL_OW 69
22924: ST_TO_ADDR
// if not tmp then
22925: LD_VAR 0 2
22929: NOT
22930: IFFALSE 22934
// exit ;
22932: GO 23077
// for i := 1 to 2 do
22934: LD_ADDR_VAR 0 1
22938: PUSH
22939: DOUBLE
22940: LD_INT 1
22942: DEC
22943: ST_TO_ADDR
22944: LD_INT 2
22946: PUSH
22947: FOR_TO
22948: IFFALSE 23075
// begin uc_side := your_side ;
22950: LD_ADDR_OWVAR 20
22954: PUSH
22955: LD_OWVAR 2
22959: ST_TO_ADDR
// uc_nation := nation_american ;
22960: LD_ADDR_OWVAR 21
22964: PUSH
22965: LD_INT 1
22967: ST_TO_ADDR
// vc_chassis := us_morphling ;
22968: LD_ADDR_OWVAR 37
22972: PUSH
22973: LD_INT 5
22975: ST_TO_ADDR
// vc_engine := engine_siberite ;
22976: LD_ADDR_OWVAR 39
22980: PUSH
22981: LD_INT 3
22983: ST_TO_ADDR
// vc_control := control_computer ;
22984: LD_ADDR_OWVAR 38
22988: PUSH
22989: LD_INT 3
22991: ST_TO_ADDR
// vc_weapon := us_double_laser ;
22992: LD_ADDR_OWVAR 40
22996: PUSH
22997: LD_INT 10
22999: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
23000: LD_VAR 0 2
23004: PUSH
23005: LD_INT 1
23007: ARRAY
23008: PPUSH
23009: CALL_OW 310
23013: NOT
23014: IFFALSE 23061
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
23016: CALL_OW 45
23020: PPUSH
23021: LD_VAR 0 2
23025: PUSH
23026: LD_INT 1
23028: ARRAY
23029: PPUSH
23030: CALL_OW 250
23034: PPUSH
23035: LD_VAR 0 2
23039: PUSH
23040: LD_INT 1
23042: ARRAY
23043: PPUSH
23044: CALL_OW 251
23048: PPUSH
23049: LD_INT 12
23051: PPUSH
23052: LD_INT 1
23054: PPUSH
23055: CALL_OW 50
23059: GO 23073
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
23061: CALL_OW 45
23065: PPUSH
23066: LD_INT 1
23068: PPUSH
23069: CALL_OW 51
// end ;
23073: GO 22947
23075: POP
23076: POP
// end ;
23077: PPOPN 2
23079: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
23080: LD_EXP 22
23084: PUSH
23085: LD_EXP 68
23089: AND
23090: IFFALSE 23312
23092: GO 23094
23094: DISABLE
23095: LD_INT 0
23097: PPUSH
23098: PPUSH
23099: PPUSH
23100: PPUSH
23101: PPUSH
23102: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23103: LD_ADDR_VAR 0 6
23107: PUSH
23108: LD_INT 22
23110: PUSH
23111: LD_OWVAR 2
23115: PUSH
23116: EMPTY
23117: LIST
23118: LIST
23119: PUSH
23120: LD_INT 21
23122: PUSH
23123: LD_INT 1
23125: PUSH
23126: EMPTY
23127: LIST
23128: LIST
23129: PUSH
23130: LD_INT 3
23132: PUSH
23133: LD_INT 23
23135: PUSH
23136: LD_INT 0
23138: PUSH
23139: EMPTY
23140: LIST
23141: LIST
23142: PUSH
23143: EMPTY
23144: LIST
23145: LIST
23146: PUSH
23147: EMPTY
23148: LIST
23149: LIST
23150: LIST
23151: PPUSH
23152: CALL_OW 69
23156: ST_TO_ADDR
// if not tmp then
23157: LD_VAR 0 6
23161: NOT
23162: IFFALSE 23166
// exit ;
23164: GO 23312
// s1 := rand ( 1 , 4 ) ;
23166: LD_ADDR_VAR 0 2
23170: PUSH
23171: LD_INT 1
23173: PPUSH
23174: LD_INT 4
23176: PPUSH
23177: CALL_OW 12
23181: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
23182: LD_ADDR_VAR 0 4
23186: PUSH
23187: LD_VAR 0 6
23191: PUSH
23192: LD_INT 1
23194: ARRAY
23195: PPUSH
23196: LD_VAR 0 2
23200: PPUSH
23201: CALL_OW 259
23205: ST_TO_ADDR
// if s1 = 1 then
23206: LD_VAR 0 2
23210: PUSH
23211: LD_INT 1
23213: EQUAL
23214: IFFALSE 23234
// s2 := rand ( 2 , 4 ) else
23216: LD_ADDR_VAR 0 3
23220: PUSH
23221: LD_INT 2
23223: PPUSH
23224: LD_INT 4
23226: PPUSH
23227: CALL_OW 12
23231: ST_TO_ADDR
23232: GO 23242
// s2 := 1 ;
23234: LD_ADDR_VAR 0 3
23238: PUSH
23239: LD_INT 1
23241: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
23242: LD_ADDR_VAR 0 5
23246: PUSH
23247: LD_VAR 0 6
23251: PUSH
23252: LD_INT 1
23254: ARRAY
23255: PPUSH
23256: LD_VAR 0 3
23260: PPUSH
23261: CALL_OW 259
23265: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
23266: LD_VAR 0 6
23270: PUSH
23271: LD_INT 1
23273: ARRAY
23274: PPUSH
23275: LD_VAR 0 2
23279: PPUSH
23280: LD_VAR 0 5
23284: PPUSH
23285: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
23289: LD_VAR 0 6
23293: PUSH
23294: LD_INT 1
23296: ARRAY
23297: PPUSH
23298: LD_VAR 0 3
23302: PPUSH
23303: LD_VAR 0 4
23307: PPUSH
23308: CALL_OW 237
// end ;
23312: PPOPN 6
23314: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
23315: LD_EXP 22
23319: PUSH
23320: LD_EXP 69
23324: AND
23325: IFFALSE 23404
23327: GO 23329
23329: DISABLE
23330: LD_INT 0
23332: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
23333: LD_ADDR_VAR 0 1
23337: PUSH
23338: LD_INT 22
23340: PUSH
23341: LD_OWVAR 2
23345: PUSH
23346: EMPTY
23347: LIST
23348: LIST
23349: PUSH
23350: LD_INT 30
23352: PUSH
23353: LD_INT 3
23355: PUSH
23356: EMPTY
23357: LIST
23358: LIST
23359: PUSH
23360: EMPTY
23361: LIST
23362: LIST
23363: PPUSH
23364: CALL_OW 69
23368: ST_TO_ADDR
// if not tmp then
23369: LD_VAR 0 1
23373: NOT
23374: IFFALSE 23378
// exit ;
23376: GO 23404
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
23378: LD_VAR 0 1
23382: PUSH
23383: LD_INT 1
23385: PPUSH
23386: LD_VAR 0 1
23390: PPUSH
23391: CALL_OW 12
23395: ARRAY
23396: PPUSH
23397: LD_INT 1
23399: PPUSH
23400: CALL_OW 234
// end ;
23404: PPOPN 1
23406: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
23407: LD_EXP 22
23411: PUSH
23412: LD_EXP 70
23416: AND
23417: IFFALSE 23529
23419: GO 23421
23421: DISABLE
23422: LD_INT 0
23424: PPUSH
23425: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
23426: LD_ADDR_VAR 0 2
23430: PUSH
23431: LD_INT 22
23433: PUSH
23434: LD_OWVAR 2
23438: PUSH
23439: EMPTY
23440: LIST
23441: LIST
23442: PUSH
23443: LD_INT 2
23445: PUSH
23446: LD_INT 30
23448: PUSH
23449: LD_INT 27
23451: PUSH
23452: EMPTY
23453: LIST
23454: LIST
23455: PUSH
23456: LD_INT 30
23458: PUSH
23459: LD_INT 26
23461: PUSH
23462: EMPTY
23463: LIST
23464: LIST
23465: PUSH
23466: LD_INT 30
23468: PUSH
23469: LD_INT 28
23471: PUSH
23472: EMPTY
23473: LIST
23474: LIST
23475: PUSH
23476: EMPTY
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: PUSH
23482: EMPTY
23483: LIST
23484: LIST
23485: PPUSH
23486: CALL_OW 69
23490: ST_TO_ADDR
// if not tmp then
23491: LD_VAR 0 2
23495: NOT
23496: IFFALSE 23500
// exit ;
23498: GO 23529
// for i in tmp do
23500: LD_ADDR_VAR 0 1
23504: PUSH
23505: LD_VAR 0 2
23509: PUSH
23510: FOR_IN
23511: IFFALSE 23527
// SetLives ( i , 1 ) ;
23513: LD_VAR 0 1
23517: PPUSH
23518: LD_INT 1
23520: PPUSH
23521: CALL_OW 234
23525: GO 23510
23527: POP
23528: POP
// end ;
23529: PPOPN 2
23531: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
23532: LD_EXP 22
23536: PUSH
23537: LD_EXP 71
23541: AND
23542: IFFALSE 23829
23544: GO 23546
23546: DISABLE
23547: LD_INT 0
23549: PPUSH
23550: PPUSH
23551: PPUSH
// begin i := rand ( 1 , 7 ) ;
23552: LD_ADDR_VAR 0 1
23556: PUSH
23557: LD_INT 1
23559: PPUSH
23560: LD_INT 7
23562: PPUSH
23563: CALL_OW 12
23567: ST_TO_ADDR
// case i of 1 :
23568: LD_VAR 0 1
23572: PUSH
23573: LD_INT 1
23575: DOUBLE
23576: EQUAL
23577: IFTRUE 23581
23579: GO 23591
23581: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
23582: LD_STRING earthquake(getX(game), 0, 32)
23584: PPUSH
23585: CALL_OW 559
23589: GO 23829
23591: LD_INT 2
23593: DOUBLE
23594: EQUAL
23595: IFTRUE 23599
23597: GO 23613
23599: POP
// begin ToLua ( displayStucuk(); ) ;
23600: LD_STRING displayStucuk();
23602: PPUSH
23603: CALL_OW 559
// ResetFog ;
23607: CALL_OW 335
// end ; 3 :
23611: GO 23829
23613: LD_INT 3
23615: DOUBLE
23616: EQUAL
23617: IFTRUE 23621
23619: GO 23725
23621: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23622: LD_ADDR_VAR 0 2
23626: PUSH
23627: LD_INT 22
23629: PUSH
23630: LD_OWVAR 2
23634: PUSH
23635: EMPTY
23636: LIST
23637: LIST
23638: PUSH
23639: LD_INT 25
23641: PUSH
23642: LD_INT 1
23644: PUSH
23645: EMPTY
23646: LIST
23647: LIST
23648: PUSH
23649: EMPTY
23650: LIST
23651: LIST
23652: PPUSH
23653: CALL_OW 69
23657: ST_TO_ADDR
// if not tmp then
23658: LD_VAR 0 2
23662: NOT
23663: IFFALSE 23667
// exit ;
23665: GO 23829
// un := tmp [ rand ( 1 , tmp ) ] ;
23667: LD_ADDR_VAR 0 3
23671: PUSH
23672: LD_VAR 0 2
23676: PUSH
23677: LD_INT 1
23679: PPUSH
23680: LD_VAR 0 2
23684: PPUSH
23685: CALL_OW 12
23689: ARRAY
23690: ST_TO_ADDR
// if Crawls ( un ) then
23691: LD_VAR 0 3
23695: PPUSH
23696: CALL_OW 318
23700: IFFALSE 23711
// ComWalk ( un ) ;
23702: LD_VAR 0 3
23706: PPUSH
23707: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23711: LD_VAR 0 3
23715: PPUSH
23716: LD_INT 8
23718: PPUSH
23719: CALL_OW 336
// end ; 4 :
23723: GO 23829
23725: LD_INT 4
23727: DOUBLE
23728: EQUAL
23729: IFTRUE 23733
23731: GO 23807
23733: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23734: LD_ADDR_VAR 0 2
23738: PUSH
23739: LD_INT 22
23741: PUSH
23742: LD_OWVAR 2
23746: PUSH
23747: EMPTY
23748: LIST
23749: LIST
23750: PUSH
23751: LD_INT 30
23753: PUSH
23754: LD_INT 29
23756: PUSH
23757: EMPTY
23758: LIST
23759: LIST
23760: PUSH
23761: EMPTY
23762: LIST
23763: LIST
23764: PPUSH
23765: CALL_OW 69
23769: ST_TO_ADDR
// if not tmp then
23770: LD_VAR 0 2
23774: NOT
23775: IFFALSE 23779
// exit ;
23777: GO 23829
// CenterNowOnUnits ( tmp [ 1 ] ) ;
23779: LD_VAR 0 2
23783: PUSH
23784: LD_INT 1
23786: ARRAY
23787: PPUSH
23788: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
23792: LD_VAR 0 2
23796: PUSH
23797: LD_INT 1
23799: ARRAY
23800: PPUSH
23801: CALL_OW 65
// end ; 5 .. 7 :
23805: GO 23829
23807: LD_INT 5
23809: DOUBLE
23810: GREATEREQUAL
23811: IFFALSE 23819
23813: LD_INT 7
23815: DOUBLE
23816: LESSEQUAL
23817: IFTRUE 23821
23819: GO 23828
23821: POP
// StreamSibBomb ; end ;
23822: CALL 20066 0 0
23826: GO 23829
23828: POP
// end ;
23829: PPOPN 3
23831: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
23832: LD_EXP 22
23836: PUSH
23837: LD_EXP 72
23841: AND
23842: IFFALSE 23998
23844: GO 23846
23846: DISABLE
23847: LD_INT 0
23849: PPUSH
23850: PPUSH
23851: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23852: LD_ADDR_VAR 0 2
23856: PUSH
23857: LD_INT 81
23859: PUSH
23860: LD_OWVAR 2
23864: PUSH
23865: EMPTY
23866: LIST
23867: LIST
23868: PUSH
23869: LD_INT 2
23871: PUSH
23872: LD_INT 21
23874: PUSH
23875: LD_INT 1
23877: PUSH
23878: EMPTY
23879: LIST
23880: LIST
23881: PUSH
23882: LD_INT 21
23884: PUSH
23885: LD_INT 2
23887: PUSH
23888: EMPTY
23889: LIST
23890: LIST
23891: PUSH
23892: EMPTY
23893: LIST
23894: LIST
23895: LIST
23896: PUSH
23897: EMPTY
23898: LIST
23899: LIST
23900: PPUSH
23901: CALL_OW 69
23905: ST_TO_ADDR
// if not tmp then
23906: LD_VAR 0 2
23910: NOT
23911: IFFALSE 23915
// exit ;
23913: GO 23998
// p := 0 ;
23915: LD_ADDR_VAR 0 3
23919: PUSH
23920: LD_INT 0
23922: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23923: LD_INT 35
23925: PPUSH
23926: CALL_OW 67
// p := p + 1 ;
23930: LD_ADDR_VAR 0 3
23934: PUSH
23935: LD_VAR 0 3
23939: PUSH
23940: LD_INT 1
23942: PLUS
23943: ST_TO_ADDR
// for i in tmp do
23944: LD_ADDR_VAR 0 1
23948: PUSH
23949: LD_VAR 0 2
23953: PUSH
23954: FOR_IN
23955: IFFALSE 23986
// if GetLives ( i ) < 1000 then
23957: LD_VAR 0 1
23961: PPUSH
23962: CALL_OW 256
23966: PUSH
23967: LD_INT 1000
23969: LESS
23970: IFFALSE 23984
// SetLives ( i , 1000 ) ;
23972: LD_VAR 0 1
23976: PPUSH
23977: LD_INT 1000
23979: PPUSH
23980: CALL_OW 234
23984: GO 23954
23986: POP
23987: POP
// until p > 20 ;
23988: LD_VAR 0 3
23992: PUSH
23993: LD_INT 20
23995: GREATER
23996: IFFALSE 23923
// end ;
23998: PPOPN 3
24000: END
// every 0 0$1 trigger StreamModeActive and sTime do
24001: LD_EXP 22
24005: PUSH
24006: LD_EXP 73
24010: AND
24011: IFFALSE 24046
24013: GO 24015
24015: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
24016: LD_INT 28
24018: PPUSH
24019: LD_OWVAR 2
24023: PPUSH
24024: LD_INT 2
24026: PPUSH
24027: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
24031: LD_INT 30
24033: PPUSH
24034: LD_OWVAR 2
24038: PPUSH
24039: LD_INT 2
24041: PPUSH
24042: CALL_OW 322
// end ;
24046: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
24047: LD_EXP 22
24051: PUSH
24052: LD_EXP 74
24056: AND
24057: IFFALSE 24178
24059: GO 24061
24061: DISABLE
24062: LD_INT 0
24064: PPUSH
24065: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24066: LD_ADDR_VAR 0 2
24070: PUSH
24071: LD_INT 22
24073: PUSH
24074: LD_OWVAR 2
24078: PUSH
24079: EMPTY
24080: LIST
24081: LIST
24082: PUSH
24083: LD_INT 21
24085: PUSH
24086: LD_INT 1
24088: PUSH
24089: EMPTY
24090: LIST
24091: LIST
24092: PUSH
24093: LD_INT 3
24095: PUSH
24096: LD_INT 23
24098: PUSH
24099: LD_INT 0
24101: PUSH
24102: EMPTY
24103: LIST
24104: LIST
24105: PUSH
24106: EMPTY
24107: LIST
24108: LIST
24109: PUSH
24110: EMPTY
24111: LIST
24112: LIST
24113: LIST
24114: PPUSH
24115: CALL_OW 69
24119: ST_TO_ADDR
// if not tmp then
24120: LD_VAR 0 2
24124: NOT
24125: IFFALSE 24129
// exit ;
24127: GO 24178
// for i in tmp do
24129: LD_ADDR_VAR 0 1
24133: PUSH
24134: LD_VAR 0 2
24138: PUSH
24139: FOR_IN
24140: IFFALSE 24176
// begin if Crawls ( i ) then
24142: LD_VAR 0 1
24146: PPUSH
24147: CALL_OW 318
24151: IFFALSE 24162
// ComWalk ( i ) ;
24153: LD_VAR 0 1
24157: PPUSH
24158: CALL_OW 138
// SetClass ( i , 2 ) ;
24162: LD_VAR 0 1
24166: PPUSH
24167: LD_INT 2
24169: PPUSH
24170: CALL_OW 336
// end ;
24174: GO 24139
24176: POP
24177: POP
// end ;
24178: PPOPN 2
24180: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
24181: LD_EXP 22
24185: PUSH
24186: LD_EXP 75
24190: AND
24191: IFFALSE 24479
24193: GO 24195
24195: DISABLE
24196: LD_INT 0
24198: PPUSH
24199: PPUSH
24200: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
24201: LD_OWVAR 2
24205: PPUSH
24206: LD_INT 9
24208: PPUSH
24209: LD_INT 1
24211: PPUSH
24212: LD_INT 1
24214: PPUSH
24215: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
24219: LD_INT 9
24221: PPUSH
24222: LD_OWVAR 2
24226: PPUSH
24227: CALL_OW 343
// uc_side := 9 ;
24231: LD_ADDR_OWVAR 20
24235: PUSH
24236: LD_INT 9
24238: ST_TO_ADDR
// uc_nation := 2 ;
24239: LD_ADDR_OWVAR 21
24243: PUSH
24244: LD_INT 2
24246: ST_TO_ADDR
// hc_name := Dark Warrior ;
24247: LD_ADDR_OWVAR 26
24251: PUSH
24252: LD_STRING Dark Warrior
24254: ST_TO_ADDR
// hc_gallery :=  ;
24255: LD_ADDR_OWVAR 33
24259: PUSH
24260: LD_STRING 
24262: ST_TO_ADDR
// hc_noskilllimit := true ;
24263: LD_ADDR_OWVAR 76
24267: PUSH
24268: LD_INT 1
24270: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
24271: LD_ADDR_OWVAR 31
24275: PUSH
24276: LD_INT 30
24278: PUSH
24279: LD_INT 30
24281: PUSH
24282: LD_INT 30
24284: PUSH
24285: LD_INT 30
24287: PUSH
24288: EMPTY
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: ST_TO_ADDR
// un := CreateHuman ;
24294: LD_ADDR_VAR 0 3
24298: PUSH
24299: CALL_OW 44
24303: ST_TO_ADDR
// hc_noskilllimit := false ;
24304: LD_ADDR_OWVAR 76
24308: PUSH
24309: LD_INT 0
24311: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24312: LD_VAR 0 3
24316: PPUSH
24317: LD_INT 1
24319: PPUSH
24320: CALL_OW 51
// ToLua ( playRanger() ) ;
24324: LD_STRING playRanger()
24326: PPUSH
24327: CALL_OW 559
// p := 0 ;
24331: LD_ADDR_VAR 0 2
24335: PUSH
24336: LD_INT 0
24338: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24339: LD_INT 35
24341: PPUSH
24342: CALL_OW 67
// p := p + 1 ;
24346: LD_ADDR_VAR 0 2
24350: PUSH
24351: LD_VAR 0 2
24355: PUSH
24356: LD_INT 1
24358: PLUS
24359: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
24360: LD_VAR 0 3
24364: PPUSH
24365: CALL_OW 256
24369: PUSH
24370: LD_INT 1000
24372: LESS
24373: IFFALSE 24387
// SetLives ( un , 1000 ) ;
24375: LD_VAR 0 3
24379: PPUSH
24380: LD_INT 1000
24382: PPUSH
24383: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
24387: LD_VAR 0 3
24391: PPUSH
24392: LD_INT 81
24394: PUSH
24395: LD_OWVAR 2
24399: PUSH
24400: EMPTY
24401: LIST
24402: LIST
24403: PUSH
24404: LD_INT 91
24406: PUSH
24407: LD_VAR 0 3
24411: PUSH
24412: LD_INT 30
24414: PUSH
24415: EMPTY
24416: LIST
24417: LIST
24418: LIST
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: PPUSH
24424: CALL_OW 69
24428: PPUSH
24429: LD_VAR 0 3
24433: PPUSH
24434: CALL_OW 74
24438: PPUSH
24439: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
24443: LD_VAR 0 2
24447: PUSH
24448: LD_INT 80
24450: GREATER
24451: PUSH
24452: LD_VAR 0 3
24456: PPUSH
24457: CALL_OW 301
24461: OR
24462: IFFALSE 24339
// if un then
24464: LD_VAR 0 3
24468: IFFALSE 24479
// RemoveUnit ( un ) ;
24470: LD_VAR 0 3
24474: PPUSH
24475: CALL_OW 64
// end ;
24479: PPOPN 3
24481: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
24482: LD_EXP 76
24486: IFFALSE 24602
24488: GO 24490
24490: DISABLE
24491: LD_INT 0
24493: PPUSH
24494: PPUSH
24495: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24496: LD_ADDR_VAR 0 2
24500: PUSH
24501: LD_INT 81
24503: PUSH
24504: LD_OWVAR 2
24508: PUSH
24509: EMPTY
24510: LIST
24511: LIST
24512: PUSH
24513: LD_INT 21
24515: PUSH
24516: LD_INT 1
24518: PUSH
24519: EMPTY
24520: LIST
24521: LIST
24522: PUSH
24523: EMPTY
24524: LIST
24525: LIST
24526: PPUSH
24527: CALL_OW 69
24531: ST_TO_ADDR
// ToLua ( playComputer() ) ;
24532: LD_STRING playComputer()
24534: PPUSH
24535: CALL_OW 559
// if not tmp then
24539: LD_VAR 0 2
24543: NOT
24544: IFFALSE 24548
// exit ;
24546: GO 24602
// for i in tmp do
24548: LD_ADDR_VAR 0 1
24552: PUSH
24553: LD_VAR 0 2
24557: PUSH
24558: FOR_IN
24559: IFFALSE 24600
// for j := 1 to 4 do
24561: LD_ADDR_VAR 0 3
24565: PUSH
24566: DOUBLE
24567: LD_INT 1
24569: DEC
24570: ST_TO_ADDR
24571: LD_INT 4
24573: PUSH
24574: FOR_TO
24575: IFFALSE 24596
// SetSkill ( i , j , 10 ) ;
24577: LD_VAR 0 1
24581: PPUSH
24582: LD_VAR 0 3
24586: PPUSH
24587: LD_INT 10
24589: PPUSH
24590: CALL_OW 237
24594: GO 24574
24596: POP
24597: POP
24598: GO 24558
24600: POP
24601: POP
// end ;
24602: PPOPN 3
24604: END
// every 0 0$1 trigger s30 do var i , tmp ;
24605: LD_EXP 77
24609: IFFALSE 24678
24611: GO 24613
24613: DISABLE
24614: LD_INT 0
24616: PPUSH
24617: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24618: LD_ADDR_VAR 0 2
24622: PUSH
24623: LD_INT 22
24625: PUSH
24626: LD_OWVAR 2
24630: PUSH
24631: EMPTY
24632: LIST
24633: LIST
24634: PPUSH
24635: CALL_OW 69
24639: ST_TO_ADDR
// if not tmp then
24640: LD_VAR 0 2
24644: NOT
24645: IFFALSE 24649
// exit ;
24647: GO 24678
// for i in tmp do
24649: LD_ADDR_VAR 0 1
24653: PUSH
24654: LD_VAR 0 2
24658: PUSH
24659: FOR_IN
24660: IFFALSE 24676
// SetLives ( i , 300 ) ;
24662: LD_VAR 0 1
24666: PPUSH
24667: LD_INT 300
24669: PPUSH
24670: CALL_OW 234
24674: GO 24659
24676: POP
24677: POP
// end ;
24678: PPOPN 2
24680: END
// every 0 0$1 trigger s60 do var i , tmp ;
24681: LD_EXP 78
24685: IFFALSE 24754
24687: GO 24689
24689: DISABLE
24690: LD_INT 0
24692: PPUSH
24693: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24694: LD_ADDR_VAR 0 2
24698: PUSH
24699: LD_INT 22
24701: PUSH
24702: LD_OWVAR 2
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: PPUSH
24711: CALL_OW 69
24715: ST_TO_ADDR
// if not tmp then
24716: LD_VAR 0 2
24720: NOT
24721: IFFALSE 24725
// exit ;
24723: GO 24754
// for i in tmp do
24725: LD_ADDR_VAR 0 1
24729: PUSH
24730: LD_VAR 0 2
24734: PUSH
24735: FOR_IN
24736: IFFALSE 24752
// SetLives ( i , 600 ) ;
24738: LD_VAR 0 1
24742: PPUSH
24743: LD_INT 600
24745: PPUSH
24746: CALL_OW 234
24750: GO 24735
24752: POP
24753: POP
// end ;
24754: PPOPN 2
24756: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
24757: LD_INT 0
24759: PPUSH
// case cmd of 301 :
24760: LD_VAR 0 1
24764: PUSH
24765: LD_INT 301
24767: DOUBLE
24768: EQUAL
24769: IFTRUE 24773
24771: GO 24805
24773: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
24774: LD_VAR 0 6
24778: PPUSH
24779: LD_VAR 0 7
24783: PPUSH
24784: LD_VAR 0 8
24788: PPUSH
24789: LD_VAR 0 4
24793: PPUSH
24794: LD_VAR 0 5
24798: PPUSH
24799: CALL 26014 0 5
24803: GO 24926
24805: LD_INT 302
24807: DOUBLE
24808: EQUAL
24809: IFTRUE 24813
24811: GO 24850
24813: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
24814: LD_VAR 0 6
24818: PPUSH
24819: LD_VAR 0 7
24823: PPUSH
24824: LD_VAR 0 8
24828: PPUSH
24829: LD_VAR 0 9
24833: PPUSH
24834: LD_VAR 0 4
24838: PPUSH
24839: LD_VAR 0 5
24843: PPUSH
24844: CALL 26105 0 6
24848: GO 24926
24850: LD_INT 303
24852: DOUBLE
24853: EQUAL
24854: IFTRUE 24858
24856: GO 24895
24858: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
24859: LD_VAR 0 6
24863: PPUSH
24864: LD_VAR 0 7
24868: PPUSH
24869: LD_VAR 0 8
24873: PPUSH
24874: LD_VAR 0 9
24878: PPUSH
24879: LD_VAR 0 4
24883: PPUSH
24884: LD_VAR 0 5
24888: PPUSH
24889: CALL 24931 0 6
24893: GO 24926
24895: LD_INT 304
24897: DOUBLE
24898: EQUAL
24899: IFTRUE 24903
24901: GO 24925
24903: POP
// hHackTeleport ( unit , x , y ) ; end ;
24904: LD_VAR 0 2
24908: PPUSH
24909: LD_VAR 0 4
24913: PPUSH
24914: LD_VAR 0 5
24918: PPUSH
24919: CALL 26698 0 3
24923: GO 24926
24925: POP
// end ;
24926: LD_VAR 0 12
24930: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
24931: LD_INT 0
24933: PPUSH
24934: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
24935: LD_VAR 0 1
24939: PUSH
24940: LD_INT 1
24942: LESS
24943: PUSH
24944: LD_VAR 0 1
24948: PUSH
24949: LD_INT 3
24951: GREATER
24952: OR
24953: PUSH
24954: LD_VAR 0 5
24958: PPUSH
24959: LD_VAR 0 6
24963: PPUSH
24964: CALL_OW 428
24968: OR
24969: IFFALSE 24973
// exit ;
24971: GO 25701
// uc_side := your_side ;
24973: LD_ADDR_OWVAR 20
24977: PUSH
24978: LD_OWVAR 2
24982: ST_TO_ADDR
// uc_nation := nation ;
24983: LD_ADDR_OWVAR 21
24987: PUSH
24988: LD_VAR 0 1
24992: ST_TO_ADDR
// bc_level = 1 ;
24993: LD_ADDR_OWVAR 43
24997: PUSH
24998: LD_INT 1
25000: ST_TO_ADDR
// case btype of 1 :
25001: LD_VAR 0 2
25005: PUSH
25006: LD_INT 1
25008: DOUBLE
25009: EQUAL
25010: IFTRUE 25014
25012: GO 25025
25014: POP
// bc_type := b_depot ; 2 :
25015: LD_ADDR_OWVAR 42
25019: PUSH
25020: LD_INT 0
25022: ST_TO_ADDR
25023: GO 25645
25025: LD_INT 2
25027: DOUBLE
25028: EQUAL
25029: IFTRUE 25033
25031: GO 25044
25033: POP
// bc_type := b_warehouse ; 3 :
25034: LD_ADDR_OWVAR 42
25038: PUSH
25039: LD_INT 1
25041: ST_TO_ADDR
25042: GO 25645
25044: LD_INT 3
25046: DOUBLE
25047: EQUAL
25048: IFTRUE 25052
25050: GO 25063
25052: POP
// bc_type := b_lab ; 4 .. 9 :
25053: LD_ADDR_OWVAR 42
25057: PUSH
25058: LD_INT 6
25060: ST_TO_ADDR
25061: GO 25645
25063: LD_INT 4
25065: DOUBLE
25066: GREATEREQUAL
25067: IFFALSE 25075
25069: LD_INT 9
25071: DOUBLE
25072: LESSEQUAL
25073: IFTRUE 25077
25075: GO 25137
25077: POP
// begin bc_type := b_lab_half ;
25078: LD_ADDR_OWVAR 42
25082: PUSH
25083: LD_INT 7
25085: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
25086: LD_ADDR_OWVAR 44
25090: PUSH
25091: LD_INT 10
25093: PUSH
25094: LD_INT 11
25096: PUSH
25097: LD_INT 12
25099: PUSH
25100: LD_INT 15
25102: PUSH
25103: LD_INT 14
25105: PUSH
25106: LD_INT 13
25108: PUSH
25109: EMPTY
25110: LIST
25111: LIST
25112: LIST
25113: LIST
25114: LIST
25115: LIST
25116: PUSH
25117: LD_VAR 0 2
25121: PUSH
25122: LD_INT 3
25124: MINUS
25125: ARRAY
25126: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
25127: LD_ADDR_OWVAR 45
25131: PUSH
25132: LD_INT 9
25134: ST_TO_ADDR
// end ; 10 .. 13 :
25135: GO 25645
25137: LD_INT 10
25139: DOUBLE
25140: GREATEREQUAL
25141: IFFALSE 25149
25143: LD_INT 13
25145: DOUBLE
25146: LESSEQUAL
25147: IFTRUE 25151
25149: GO 25228
25151: POP
// begin bc_type := b_lab_full ;
25152: LD_ADDR_OWVAR 42
25156: PUSH
25157: LD_INT 8
25159: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
25160: LD_ADDR_OWVAR 44
25164: PUSH
25165: LD_INT 10
25167: PUSH
25168: LD_INT 12
25170: PUSH
25171: LD_INT 14
25173: PUSH
25174: LD_INT 13
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: LIST
25181: LIST
25182: PUSH
25183: LD_VAR 0 2
25187: PUSH
25188: LD_INT 9
25190: MINUS
25191: ARRAY
25192: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
25193: LD_ADDR_OWVAR 45
25197: PUSH
25198: LD_INT 11
25200: PUSH
25201: LD_INT 15
25203: PUSH
25204: LD_INT 12
25206: PUSH
25207: LD_INT 15
25209: PUSH
25210: EMPTY
25211: LIST
25212: LIST
25213: LIST
25214: LIST
25215: PUSH
25216: LD_VAR 0 2
25220: PUSH
25221: LD_INT 9
25223: MINUS
25224: ARRAY
25225: ST_TO_ADDR
// end ; 14 :
25226: GO 25645
25228: LD_INT 14
25230: DOUBLE
25231: EQUAL
25232: IFTRUE 25236
25234: GO 25247
25236: POP
// bc_type := b_workshop ; 15 :
25237: LD_ADDR_OWVAR 42
25241: PUSH
25242: LD_INT 2
25244: ST_TO_ADDR
25245: GO 25645
25247: LD_INT 15
25249: DOUBLE
25250: EQUAL
25251: IFTRUE 25255
25253: GO 25266
25255: POP
// bc_type := b_factory ; 16 :
25256: LD_ADDR_OWVAR 42
25260: PUSH
25261: LD_INT 3
25263: ST_TO_ADDR
25264: GO 25645
25266: LD_INT 16
25268: DOUBLE
25269: EQUAL
25270: IFTRUE 25274
25272: GO 25285
25274: POP
// bc_type := b_ext_gun ; 17 :
25275: LD_ADDR_OWVAR 42
25279: PUSH
25280: LD_INT 17
25282: ST_TO_ADDR
25283: GO 25645
25285: LD_INT 17
25287: DOUBLE
25288: EQUAL
25289: IFTRUE 25293
25291: GO 25321
25293: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
25294: LD_ADDR_OWVAR 42
25298: PUSH
25299: LD_INT 19
25301: PUSH
25302: LD_INT 23
25304: PUSH
25305: LD_INT 19
25307: PUSH
25308: EMPTY
25309: LIST
25310: LIST
25311: LIST
25312: PUSH
25313: LD_VAR 0 1
25317: ARRAY
25318: ST_TO_ADDR
25319: GO 25645
25321: LD_INT 18
25323: DOUBLE
25324: EQUAL
25325: IFTRUE 25329
25327: GO 25340
25329: POP
// bc_type := b_ext_radar ; 19 :
25330: LD_ADDR_OWVAR 42
25334: PUSH
25335: LD_INT 20
25337: ST_TO_ADDR
25338: GO 25645
25340: LD_INT 19
25342: DOUBLE
25343: EQUAL
25344: IFTRUE 25348
25346: GO 25359
25348: POP
// bc_type := b_ext_radio ; 20 :
25349: LD_ADDR_OWVAR 42
25353: PUSH
25354: LD_INT 22
25356: ST_TO_ADDR
25357: GO 25645
25359: LD_INT 20
25361: DOUBLE
25362: EQUAL
25363: IFTRUE 25367
25365: GO 25378
25367: POP
// bc_type := b_ext_siberium ; 21 :
25368: LD_ADDR_OWVAR 42
25372: PUSH
25373: LD_INT 21
25375: ST_TO_ADDR
25376: GO 25645
25378: LD_INT 21
25380: DOUBLE
25381: EQUAL
25382: IFTRUE 25386
25384: GO 25397
25386: POP
// bc_type := b_ext_computer ; 22 :
25387: LD_ADDR_OWVAR 42
25391: PUSH
25392: LD_INT 24
25394: ST_TO_ADDR
25395: GO 25645
25397: LD_INT 22
25399: DOUBLE
25400: EQUAL
25401: IFTRUE 25405
25403: GO 25416
25405: POP
// bc_type := b_ext_track ; 23 :
25406: LD_ADDR_OWVAR 42
25410: PUSH
25411: LD_INT 16
25413: ST_TO_ADDR
25414: GO 25645
25416: LD_INT 23
25418: DOUBLE
25419: EQUAL
25420: IFTRUE 25424
25422: GO 25435
25424: POP
// bc_type := b_ext_laser ; 24 :
25425: LD_ADDR_OWVAR 42
25429: PUSH
25430: LD_INT 25
25432: ST_TO_ADDR
25433: GO 25645
25435: LD_INT 24
25437: DOUBLE
25438: EQUAL
25439: IFTRUE 25443
25441: GO 25454
25443: POP
// bc_type := b_control_tower ; 25 :
25444: LD_ADDR_OWVAR 42
25448: PUSH
25449: LD_INT 36
25451: ST_TO_ADDR
25452: GO 25645
25454: LD_INT 25
25456: DOUBLE
25457: EQUAL
25458: IFTRUE 25462
25460: GO 25473
25462: POP
// bc_type := b_breastwork ; 26 :
25463: LD_ADDR_OWVAR 42
25467: PUSH
25468: LD_INT 31
25470: ST_TO_ADDR
25471: GO 25645
25473: LD_INT 26
25475: DOUBLE
25476: EQUAL
25477: IFTRUE 25481
25479: GO 25492
25481: POP
// bc_type := b_bunker ; 27 :
25482: LD_ADDR_OWVAR 42
25486: PUSH
25487: LD_INT 32
25489: ST_TO_ADDR
25490: GO 25645
25492: LD_INT 27
25494: DOUBLE
25495: EQUAL
25496: IFTRUE 25500
25498: GO 25511
25500: POP
// bc_type := b_turret ; 28 :
25501: LD_ADDR_OWVAR 42
25505: PUSH
25506: LD_INT 33
25508: ST_TO_ADDR
25509: GO 25645
25511: LD_INT 28
25513: DOUBLE
25514: EQUAL
25515: IFTRUE 25519
25517: GO 25530
25519: POP
// bc_type := b_armoury ; 29 :
25520: LD_ADDR_OWVAR 42
25524: PUSH
25525: LD_INT 4
25527: ST_TO_ADDR
25528: GO 25645
25530: LD_INT 29
25532: DOUBLE
25533: EQUAL
25534: IFTRUE 25538
25536: GO 25549
25538: POP
// bc_type := b_barracks ; 30 :
25539: LD_ADDR_OWVAR 42
25543: PUSH
25544: LD_INT 5
25546: ST_TO_ADDR
25547: GO 25645
25549: LD_INT 30
25551: DOUBLE
25552: EQUAL
25553: IFTRUE 25557
25555: GO 25568
25557: POP
// bc_type := b_solar_power ; 31 :
25558: LD_ADDR_OWVAR 42
25562: PUSH
25563: LD_INT 27
25565: ST_TO_ADDR
25566: GO 25645
25568: LD_INT 31
25570: DOUBLE
25571: EQUAL
25572: IFTRUE 25576
25574: GO 25587
25576: POP
// bc_type := b_oil_power ; 32 :
25577: LD_ADDR_OWVAR 42
25581: PUSH
25582: LD_INT 26
25584: ST_TO_ADDR
25585: GO 25645
25587: LD_INT 32
25589: DOUBLE
25590: EQUAL
25591: IFTRUE 25595
25593: GO 25606
25595: POP
// bc_type := b_siberite_power ; 33 :
25596: LD_ADDR_OWVAR 42
25600: PUSH
25601: LD_INT 28
25603: ST_TO_ADDR
25604: GO 25645
25606: LD_INT 33
25608: DOUBLE
25609: EQUAL
25610: IFTRUE 25614
25612: GO 25625
25614: POP
// bc_type := b_oil_mine ; 34 :
25615: LD_ADDR_OWVAR 42
25619: PUSH
25620: LD_INT 29
25622: ST_TO_ADDR
25623: GO 25645
25625: LD_INT 34
25627: DOUBLE
25628: EQUAL
25629: IFTRUE 25633
25631: GO 25644
25633: POP
// bc_type := b_siberite_mine ; end ;
25634: LD_ADDR_OWVAR 42
25638: PUSH
25639: LD_INT 30
25641: ST_TO_ADDR
25642: GO 25645
25644: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
25645: LD_ADDR_VAR 0 8
25649: PUSH
25650: LD_VAR 0 5
25654: PPUSH
25655: LD_VAR 0 6
25659: PPUSH
25660: LD_VAR 0 3
25664: PPUSH
25665: CALL_OW 47
25669: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
25670: LD_OWVAR 42
25674: PUSH
25675: LD_INT 32
25677: PUSH
25678: LD_INT 33
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: IN
25685: IFFALSE 25701
// PlaceWeaponTurret ( b , weapon ) ;
25687: LD_VAR 0 8
25691: PPUSH
25692: LD_VAR 0 4
25696: PPUSH
25697: CALL_OW 431
// end ;
25701: LD_VAR 0 7
25705: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
25706: LD_INT 0
25708: PPUSH
25709: PPUSH
25710: PPUSH
25711: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25712: LD_ADDR_VAR 0 4
25716: PUSH
25717: LD_INT 22
25719: PUSH
25720: LD_OWVAR 2
25724: PUSH
25725: EMPTY
25726: LIST
25727: LIST
25728: PUSH
25729: LD_INT 2
25731: PUSH
25732: LD_INT 30
25734: PUSH
25735: LD_INT 0
25737: PUSH
25738: EMPTY
25739: LIST
25740: LIST
25741: PUSH
25742: LD_INT 30
25744: PUSH
25745: LD_INT 1
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: PUSH
25752: EMPTY
25753: LIST
25754: LIST
25755: LIST
25756: PUSH
25757: EMPTY
25758: LIST
25759: LIST
25760: PPUSH
25761: CALL_OW 69
25765: ST_TO_ADDR
// if not tmp then
25766: LD_VAR 0 4
25770: NOT
25771: IFFALSE 25775
// exit ;
25773: GO 25834
// for i in tmp do
25775: LD_ADDR_VAR 0 2
25779: PUSH
25780: LD_VAR 0 4
25784: PUSH
25785: FOR_IN
25786: IFFALSE 25832
// for j = 1 to 3 do
25788: LD_ADDR_VAR 0 3
25792: PUSH
25793: DOUBLE
25794: LD_INT 1
25796: DEC
25797: ST_TO_ADDR
25798: LD_INT 3
25800: PUSH
25801: FOR_TO
25802: IFFALSE 25828
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
25804: LD_VAR 0 2
25808: PPUSH
25809: CALL_OW 274
25813: PPUSH
25814: LD_VAR 0 3
25818: PPUSH
25819: LD_INT 99999
25821: PPUSH
25822: CALL_OW 277
25826: GO 25801
25828: POP
25829: POP
25830: GO 25785
25832: POP
25833: POP
// end ;
25834: LD_VAR 0 1
25838: RET
// export function hHackSetLevel10 ; var i , j ; begin
25839: LD_INT 0
25841: PPUSH
25842: PPUSH
25843: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25844: LD_ADDR_VAR 0 2
25848: PUSH
25849: LD_INT 21
25851: PUSH
25852: LD_INT 1
25854: PUSH
25855: EMPTY
25856: LIST
25857: LIST
25858: PPUSH
25859: CALL_OW 69
25863: PUSH
25864: FOR_IN
25865: IFFALSE 25917
// if IsSelected ( i ) then
25867: LD_VAR 0 2
25871: PPUSH
25872: CALL_OW 306
25876: IFFALSE 25915
// begin for j := 1 to 4 do
25878: LD_ADDR_VAR 0 3
25882: PUSH
25883: DOUBLE
25884: LD_INT 1
25886: DEC
25887: ST_TO_ADDR
25888: LD_INT 4
25890: PUSH
25891: FOR_TO
25892: IFFALSE 25913
// SetSkill ( i , j , 10 ) ;
25894: LD_VAR 0 2
25898: PPUSH
25899: LD_VAR 0 3
25903: PPUSH
25904: LD_INT 10
25906: PPUSH
25907: CALL_OW 237
25911: GO 25891
25913: POP
25914: POP
// end ;
25915: GO 25864
25917: POP
25918: POP
// end ;
25919: LD_VAR 0 1
25923: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
25924: LD_INT 0
25926: PPUSH
25927: PPUSH
25928: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
25929: LD_ADDR_VAR 0 2
25933: PUSH
25934: LD_INT 22
25936: PUSH
25937: LD_OWVAR 2
25941: PUSH
25942: EMPTY
25943: LIST
25944: LIST
25945: PUSH
25946: LD_INT 21
25948: PUSH
25949: LD_INT 1
25951: PUSH
25952: EMPTY
25953: LIST
25954: LIST
25955: PUSH
25956: EMPTY
25957: LIST
25958: LIST
25959: PPUSH
25960: CALL_OW 69
25964: PUSH
25965: FOR_IN
25966: IFFALSE 26007
// begin for j := 1 to 4 do
25968: LD_ADDR_VAR 0 3
25972: PUSH
25973: DOUBLE
25974: LD_INT 1
25976: DEC
25977: ST_TO_ADDR
25978: LD_INT 4
25980: PUSH
25981: FOR_TO
25982: IFFALSE 26003
// SetSkill ( i , j , 10 ) ;
25984: LD_VAR 0 2
25988: PPUSH
25989: LD_VAR 0 3
25993: PPUSH
25994: LD_INT 10
25996: PPUSH
25997: CALL_OW 237
26001: GO 25981
26003: POP
26004: POP
// end ;
26005: GO 25965
26007: POP
26008: POP
// end ;
26009: LD_VAR 0 1
26013: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
26014: LD_INT 0
26016: PPUSH
// uc_side := your_side ;
26017: LD_ADDR_OWVAR 20
26021: PUSH
26022: LD_OWVAR 2
26026: ST_TO_ADDR
// uc_nation := nation ;
26027: LD_ADDR_OWVAR 21
26031: PUSH
26032: LD_VAR 0 1
26036: ST_TO_ADDR
// InitHc ;
26037: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
26041: LD_INT 0
26043: PPUSH
26044: LD_VAR 0 2
26048: PPUSH
26049: LD_VAR 0 3
26053: PPUSH
26054: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
26058: LD_VAR 0 4
26062: PPUSH
26063: LD_VAR 0 5
26067: PPUSH
26068: CALL_OW 428
26072: PUSH
26073: LD_INT 0
26075: EQUAL
26076: IFFALSE 26100
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
26078: CALL_OW 44
26082: PPUSH
26083: LD_VAR 0 4
26087: PPUSH
26088: LD_VAR 0 5
26092: PPUSH
26093: LD_INT 1
26095: PPUSH
26096: CALL_OW 48
// end ;
26100: LD_VAR 0 6
26104: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
26105: LD_INT 0
26107: PPUSH
26108: PPUSH
// uc_side := your_side ;
26109: LD_ADDR_OWVAR 20
26113: PUSH
26114: LD_OWVAR 2
26118: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
26119: LD_VAR 0 1
26123: PUSH
26124: LD_INT 1
26126: PUSH
26127: LD_INT 2
26129: PUSH
26130: LD_INT 3
26132: PUSH
26133: LD_INT 4
26135: PUSH
26136: LD_INT 5
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: LIST
26143: LIST
26144: LIST
26145: IN
26146: IFFALSE 26158
// uc_nation := nation_american else
26148: LD_ADDR_OWVAR 21
26152: PUSH
26153: LD_INT 1
26155: ST_TO_ADDR
26156: GO 26201
// if chassis in [ 11 , 12 , 13 , 14 ] then
26158: LD_VAR 0 1
26162: PUSH
26163: LD_INT 11
26165: PUSH
26166: LD_INT 12
26168: PUSH
26169: LD_INT 13
26171: PUSH
26172: LD_INT 14
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: LIST
26179: LIST
26180: IN
26181: IFFALSE 26193
// uc_nation := nation_arabian else
26183: LD_ADDR_OWVAR 21
26187: PUSH
26188: LD_INT 2
26190: ST_TO_ADDR
26191: GO 26201
// uc_nation := nation_russian ;
26193: LD_ADDR_OWVAR 21
26197: PUSH
26198: LD_INT 3
26200: ST_TO_ADDR
// vc_chassis := chassis ;
26201: LD_ADDR_OWVAR 37
26205: PUSH
26206: LD_VAR 0 1
26210: ST_TO_ADDR
// vc_engine := engine ;
26211: LD_ADDR_OWVAR 39
26215: PUSH
26216: LD_VAR 0 2
26220: ST_TO_ADDR
// vc_control := control ;
26221: LD_ADDR_OWVAR 38
26225: PUSH
26226: LD_VAR 0 3
26230: ST_TO_ADDR
// vc_weapon := weapon ;
26231: LD_ADDR_OWVAR 40
26235: PUSH
26236: LD_VAR 0 4
26240: ST_TO_ADDR
// un := CreateVehicle ;
26241: LD_ADDR_VAR 0 8
26245: PUSH
26246: CALL_OW 45
26250: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
26251: LD_VAR 0 8
26255: PPUSH
26256: LD_INT 0
26258: PPUSH
26259: LD_INT 5
26261: PPUSH
26262: CALL_OW 12
26266: PPUSH
26267: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
26271: LD_VAR 0 8
26275: PPUSH
26276: LD_VAR 0 5
26280: PPUSH
26281: LD_VAR 0 6
26285: PPUSH
26286: LD_INT 1
26288: PPUSH
26289: CALL_OW 48
// end ;
26293: LD_VAR 0 7
26297: RET
// export hInvincible ; every 1 do
26298: GO 26300
26300: DISABLE
// hInvincible := [ ] ;
26301: LD_ADDR_EXP 79
26305: PUSH
26306: EMPTY
26307: ST_TO_ADDR
26308: END
// every 10 do var i ;
26309: GO 26311
26311: DISABLE
26312: LD_INT 0
26314: PPUSH
// begin enable ;
26315: ENABLE
// if not hInvincible then
26316: LD_EXP 79
26320: NOT
26321: IFFALSE 26325
// exit ;
26323: GO 26369
// for i in hInvincible do
26325: LD_ADDR_VAR 0 1
26329: PUSH
26330: LD_EXP 79
26334: PUSH
26335: FOR_IN
26336: IFFALSE 26367
// if GetLives ( i ) < 1000 then
26338: LD_VAR 0 1
26342: PPUSH
26343: CALL_OW 256
26347: PUSH
26348: LD_INT 1000
26350: LESS
26351: IFFALSE 26365
// SetLives ( i , 1000 ) ;
26353: LD_VAR 0 1
26357: PPUSH
26358: LD_INT 1000
26360: PPUSH
26361: CALL_OW 234
26365: GO 26335
26367: POP
26368: POP
// end ;
26369: PPOPN 1
26371: END
// export function hHackInvincible ; var i ; begin
26372: LD_INT 0
26374: PPUSH
26375: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
26376: LD_ADDR_VAR 0 2
26380: PUSH
26381: LD_INT 2
26383: PUSH
26384: LD_INT 21
26386: PUSH
26387: LD_INT 1
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: LD_INT 21
26396: PUSH
26397: LD_INT 2
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: PUSH
26404: EMPTY
26405: LIST
26406: LIST
26407: LIST
26408: PPUSH
26409: CALL_OW 69
26413: PUSH
26414: FOR_IN
26415: IFFALSE 26476
// if IsSelected ( i ) then
26417: LD_VAR 0 2
26421: PPUSH
26422: CALL_OW 306
26426: IFFALSE 26474
// begin if i in hInvincible then
26428: LD_VAR 0 2
26432: PUSH
26433: LD_EXP 79
26437: IN
26438: IFFALSE 26458
// hInvincible := hInvincible diff i else
26440: LD_ADDR_EXP 79
26444: PUSH
26445: LD_EXP 79
26449: PUSH
26450: LD_VAR 0 2
26454: DIFF
26455: ST_TO_ADDR
26456: GO 26474
// hInvincible := hInvincible union i ;
26458: LD_ADDR_EXP 79
26462: PUSH
26463: LD_EXP 79
26467: PUSH
26468: LD_VAR 0 2
26472: UNION
26473: ST_TO_ADDR
// end ;
26474: GO 26414
26476: POP
26477: POP
// end ;
26478: LD_VAR 0 1
26482: RET
// export function hHackInvisible ; var i , j ; begin
26483: LD_INT 0
26485: PPUSH
26486: PPUSH
26487: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
26488: LD_ADDR_VAR 0 2
26492: PUSH
26493: LD_INT 21
26495: PUSH
26496: LD_INT 1
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: PPUSH
26503: CALL_OW 69
26507: PUSH
26508: FOR_IN
26509: IFFALSE 26533
// if IsSelected ( i ) then
26511: LD_VAR 0 2
26515: PPUSH
26516: CALL_OW 306
26520: IFFALSE 26531
// ComForceInvisible ( i ) ;
26522: LD_VAR 0 2
26526: PPUSH
26527: CALL_OW 496
26531: GO 26508
26533: POP
26534: POP
// end ;
26535: LD_VAR 0 1
26539: RET
// export function hHackChangeYourSide ; begin
26540: LD_INT 0
26542: PPUSH
// if your_side = 8 then
26543: LD_OWVAR 2
26547: PUSH
26548: LD_INT 8
26550: EQUAL
26551: IFFALSE 26563
// your_side := 0 else
26553: LD_ADDR_OWVAR 2
26557: PUSH
26558: LD_INT 0
26560: ST_TO_ADDR
26561: GO 26577
// your_side := your_side + 1 ;
26563: LD_ADDR_OWVAR 2
26567: PUSH
26568: LD_OWVAR 2
26572: PUSH
26573: LD_INT 1
26575: PLUS
26576: ST_TO_ADDR
// end ;
26577: LD_VAR 0 1
26581: RET
// export function hHackChangeUnitSide ; var i , j ; begin
26582: LD_INT 0
26584: PPUSH
26585: PPUSH
26586: PPUSH
// for i in all_units do
26587: LD_ADDR_VAR 0 2
26591: PUSH
26592: LD_OWVAR 3
26596: PUSH
26597: FOR_IN
26598: IFFALSE 26676
// if IsSelected ( i ) then
26600: LD_VAR 0 2
26604: PPUSH
26605: CALL_OW 306
26609: IFFALSE 26674
// begin j := GetSide ( i ) ;
26611: LD_ADDR_VAR 0 3
26615: PUSH
26616: LD_VAR 0 2
26620: PPUSH
26621: CALL_OW 255
26625: ST_TO_ADDR
// if j = 8 then
26626: LD_VAR 0 3
26630: PUSH
26631: LD_INT 8
26633: EQUAL
26634: IFFALSE 26646
// j := 0 else
26636: LD_ADDR_VAR 0 3
26640: PUSH
26641: LD_INT 0
26643: ST_TO_ADDR
26644: GO 26660
// j := j + 1 ;
26646: LD_ADDR_VAR 0 3
26650: PUSH
26651: LD_VAR 0 3
26655: PUSH
26656: LD_INT 1
26658: PLUS
26659: ST_TO_ADDR
// SetSide ( i , j ) ;
26660: LD_VAR 0 2
26664: PPUSH
26665: LD_VAR 0 3
26669: PPUSH
26670: CALL_OW 235
// end ;
26674: GO 26597
26676: POP
26677: POP
// end ;
26678: LD_VAR 0 1
26682: RET
// export function hHackFog ; begin
26683: LD_INT 0
26685: PPUSH
// FogOff ( true ) ;
26686: LD_INT 1
26688: PPUSH
26689: CALL_OW 344
// end ;
26693: LD_VAR 0 1
26697: RET
// export function hHackTeleport ( unit , x , y ) ; begin
26698: LD_INT 0
26700: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
26701: LD_VAR 0 1
26705: PPUSH
26706: LD_VAR 0 2
26710: PPUSH
26711: LD_VAR 0 3
26715: PPUSH
26716: LD_INT 1
26718: PPUSH
26719: LD_INT 1
26721: PPUSH
26722: CALL_OW 483
// CenterOnXY ( x , y ) ;
26726: LD_VAR 0 2
26730: PPUSH
26731: LD_VAR 0 3
26735: PPUSH
26736: CALL_OW 84
// end ;
26740: LD_VAR 0 4
26744: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
26745: LD_INT 0
26747: PPUSH
26748: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
26749: LD_VAR 0 1
26753: NOT
26754: PUSH
26755: LD_VAR 0 2
26759: PPUSH
26760: LD_VAR 0 3
26764: PPUSH
26765: CALL_OW 488
26769: NOT
26770: OR
26771: PUSH
26772: LD_VAR 0 1
26776: PPUSH
26777: CALL_OW 266
26781: PUSH
26782: LD_INT 3
26784: NONEQUAL
26785: PUSH
26786: LD_VAR 0 1
26790: PPUSH
26791: CALL_OW 247
26795: PUSH
26796: LD_INT 1
26798: EQUAL
26799: NOT
26800: AND
26801: OR
26802: IFFALSE 26806
// exit ;
26804: GO 26955
// if GetType ( factory ) = unit_human then
26806: LD_VAR 0 1
26810: PPUSH
26811: CALL_OW 247
26815: PUSH
26816: LD_INT 1
26818: EQUAL
26819: IFFALSE 26836
// factory := IsInUnit ( factory ) ;
26821: LD_ADDR_VAR 0 1
26825: PUSH
26826: LD_VAR 0 1
26830: PPUSH
26831: CALL_OW 310
26835: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
26836: LD_VAR 0 1
26840: PPUSH
26841: CALL_OW 266
26845: PUSH
26846: LD_INT 3
26848: NONEQUAL
26849: IFFALSE 26853
// exit ;
26851: GO 26955
// if HexInfo ( x , y ) = factory then
26853: LD_VAR 0 2
26857: PPUSH
26858: LD_VAR 0 3
26862: PPUSH
26863: CALL_OW 428
26867: PUSH
26868: LD_VAR 0 1
26872: EQUAL
26873: IFFALSE 26900
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
26875: LD_ADDR_EXP 80
26879: PUSH
26880: LD_EXP 80
26884: PPUSH
26885: LD_VAR 0 1
26889: PPUSH
26890: LD_INT 0
26892: PPUSH
26893: CALL_OW 1
26897: ST_TO_ADDR
26898: GO 26951
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
26900: LD_ADDR_EXP 80
26904: PUSH
26905: LD_EXP 80
26909: PPUSH
26910: LD_VAR 0 1
26914: PPUSH
26915: LD_VAR 0 1
26919: PPUSH
26920: CALL_OW 255
26924: PUSH
26925: LD_VAR 0 1
26929: PUSH
26930: LD_VAR 0 2
26934: PUSH
26935: LD_VAR 0 3
26939: PUSH
26940: EMPTY
26941: LIST
26942: LIST
26943: LIST
26944: LIST
26945: PPUSH
26946: CALL_OW 1
26950: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26951: CALL 26960 0 0
// end ;
26955: LD_VAR 0 4
26959: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
26960: LD_INT 0
26962: PPUSH
26963: PPUSH
26964: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
26965: LD_STRING resetFactoryWaypoint();
26967: PPUSH
26968: CALL_OW 559
// if factoryWaypoints then
26972: LD_EXP 80
26976: IFFALSE 27102
// begin list := PrepareArray ( factoryWaypoints ) ;
26978: LD_ADDR_VAR 0 3
26982: PUSH
26983: LD_EXP 80
26987: PPUSH
26988: CALL 73424 0 1
26992: ST_TO_ADDR
// for i := 1 to list do
26993: LD_ADDR_VAR 0 2
26997: PUSH
26998: DOUBLE
26999: LD_INT 1
27001: DEC
27002: ST_TO_ADDR
27003: LD_VAR 0 3
27007: PUSH
27008: FOR_TO
27009: IFFALSE 27100
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
27011: LD_STRING setFactoryWaypointXY(
27013: PUSH
27014: LD_VAR 0 3
27018: PUSH
27019: LD_VAR 0 2
27023: ARRAY
27024: PUSH
27025: LD_INT 1
27027: ARRAY
27028: STR
27029: PUSH
27030: LD_STRING ,
27032: STR
27033: PUSH
27034: LD_VAR 0 3
27038: PUSH
27039: LD_VAR 0 2
27043: ARRAY
27044: PUSH
27045: LD_INT 2
27047: ARRAY
27048: STR
27049: PUSH
27050: LD_STRING ,
27052: STR
27053: PUSH
27054: LD_VAR 0 3
27058: PUSH
27059: LD_VAR 0 2
27063: ARRAY
27064: PUSH
27065: LD_INT 3
27067: ARRAY
27068: STR
27069: PUSH
27070: LD_STRING ,
27072: STR
27073: PUSH
27074: LD_VAR 0 3
27078: PUSH
27079: LD_VAR 0 2
27083: ARRAY
27084: PUSH
27085: LD_INT 4
27087: ARRAY
27088: STR
27089: PUSH
27090: LD_STRING )
27092: STR
27093: PPUSH
27094: CALL_OW 559
27098: GO 27008
27100: POP
27101: POP
// end ; end ;
27102: LD_VAR 0 1
27106: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
27107: LD_INT 0
27109: PPUSH
// if HexInfo ( x , y ) = warehouse then
27110: LD_VAR 0 2
27114: PPUSH
27115: LD_VAR 0 3
27119: PPUSH
27120: CALL_OW 428
27124: PUSH
27125: LD_VAR 0 1
27129: EQUAL
27130: IFFALSE 27157
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
27132: LD_ADDR_EXP 81
27136: PUSH
27137: LD_EXP 81
27141: PPUSH
27142: LD_VAR 0 1
27146: PPUSH
27147: LD_INT 0
27149: PPUSH
27150: CALL_OW 1
27154: ST_TO_ADDR
27155: GO 27208
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
27157: LD_ADDR_EXP 81
27161: PUSH
27162: LD_EXP 81
27166: PPUSH
27167: LD_VAR 0 1
27171: PPUSH
27172: LD_VAR 0 1
27176: PPUSH
27177: CALL_OW 255
27181: PUSH
27182: LD_VAR 0 1
27186: PUSH
27187: LD_VAR 0 2
27191: PUSH
27192: LD_VAR 0 3
27196: PUSH
27197: EMPTY
27198: LIST
27199: LIST
27200: LIST
27201: LIST
27202: PPUSH
27203: CALL_OW 1
27207: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
27208: CALL 27217 0 0
// end ;
27212: LD_VAR 0 4
27216: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
27217: LD_INT 0
27219: PPUSH
27220: PPUSH
27221: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
27222: LD_STRING resetWarehouseGatheringPoints();
27224: PPUSH
27225: CALL_OW 559
// if warehouseGatheringPoints then
27229: LD_EXP 81
27233: IFFALSE 27359
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
27235: LD_ADDR_VAR 0 3
27239: PUSH
27240: LD_EXP 81
27244: PPUSH
27245: CALL 73424 0 1
27249: ST_TO_ADDR
// for i := 1 to list do
27250: LD_ADDR_VAR 0 2
27254: PUSH
27255: DOUBLE
27256: LD_INT 1
27258: DEC
27259: ST_TO_ADDR
27260: LD_VAR 0 3
27264: PUSH
27265: FOR_TO
27266: IFFALSE 27357
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
27268: LD_STRING setWarehouseGatheringPointXY(
27270: PUSH
27271: LD_VAR 0 3
27275: PUSH
27276: LD_VAR 0 2
27280: ARRAY
27281: PUSH
27282: LD_INT 1
27284: ARRAY
27285: STR
27286: PUSH
27287: LD_STRING ,
27289: STR
27290: PUSH
27291: LD_VAR 0 3
27295: PUSH
27296: LD_VAR 0 2
27300: ARRAY
27301: PUSH
27302: LD_INT 2
27304: ARRAY
27305: STR
27306: PUSH
27307: LD_STRING ,
27309: STR
27310: PUSH
27311: LD_VAR 0 3
27315: PUSH
27316: LD_VAR 0 2
27320: ARRAY
27321: PUSH
27322: LD_INT 3
27324: ARRAY
27325: STR
27326: PUSH
27327: LD_STRING ,
27329: STR
27330: PUSH
27331: LD_VAR 0 3
27335: PUSH
27336: LD_VAR 0 2
27340: ARRAY
27341: PUSH
27342: LD_INT 4
27344: ARRAY
27345: STR
27346: PUSH
27347: LD_STRING )
27349: STR
27350: PPUSH
27351: CALL_OW 559
27355: GO 27265
27357: POP
27358: POP
// end ; end ;
27359: LD_VAR 0 1
27363: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
27364: LD_EXP 81
27368: IFFALSE 28053
27370: GO 27372
27372: DISABLE
27373: LD_INT 0
27375: PPUSH
27376: PPUSH
27377: PPUSH
27378: PPUSH
27379: PPUSH
27380: PPUSH
27381: PPUSH
27382: PPUSH
27383: PPUSH
// begin enable ;
27384: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
27385: LD_ADDR_VAR 0 3
27389: PUSH
27390: LD_EXP 81
27394: PPUSH
27395: CALL 73424 0 1
27399: ST_TO_ADDR
// if not list then
27400: LD_VAR 0 3
27404: NOT
27405: IFFALSE 27409
// exit ;
27407: GO 28053
// for i := 1 to list do
27409: LD_ADDR_VAR 0 1
27413: PUSH
27414: DOUBLE
27415: LD_INT 1
27417: DEC
27418: ST_TO_ADDR
27419: LD_VAR 0 3
27423: PUSH
27424: FOR_TO
27425: IFFALSE 28051
// begin depot := list [ i ] [ 2 ] ;
27427: LD_ADDR_VAR 0 8
27431: PUSH
27432: LD_VAR 0 3
27436: PUSH
27437: LD_VAR 0 1
27441: ARRAY
27442: PUSH
27443: LD_INT 2
27445: ARRAY
27446: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
27447: LD_ADDR_VAR 0 5
27451: PUSH
27452: LD_VAR 0 3
27456: PUSH
27457: LD_VAR 0 1
27461: ARRAY
27462: PUSH
27463: LD_INT 1
27465: ARRAY
27466: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
27467: LD_VAR 0 8
27471: PPUSH
27472: CALL_OW 301
27476: PUSH
27477: LD_VAR 0 5
27481: PUSH
27482: LD_VAR 0 8
27486: PPUSH
27487: CALL_OW 255
27491: NONEQUAL
27492: OR
27493: IFFALSE 27522
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
27495: LD_ADDR_EXP 81
27499: PUSH
27500: LD_EXP 81
27504: PPUSH
27505: LD_VAR 0 8
27509: PPUSH
27510: LD_INT 0
27512: PPUSH
27513: CALL_OW 1
27517: ST_TO_ADDR
// exit ;
27518: POP
27519: POP
27520: GO 28053
// end ; x := list [ i ] [ 3 ] ;
27522: LD_ADDR_VAR 0 6
27526: PUSH
27527: LD_VAR 0 3
27531: PUSH
27532: LD_VAR 0 1
27536: ARRAY
27537: PUSH
27538: LD_INT 3
27540: ARRAY
27541: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
27542: LD_ADDR_VAR 0 7
27546: PUSH
27547: LD_VAR 0 3
27551: PUSH
27552: LD_VAR 0 1
27556: ARRAY
27557: PUSH
27558: LD_INT 4
27560: ARRAY
27561: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
27562: LD_ADDR_VAR 0 9
27566: PUSH
27567: LD_VAR 0 6
27571: PPUSH
27572: LD_VAR 0 7
27576: PPUSH
27577: LD_INT 16
27579: PPUSH
27580: CALL 72012 0 3
27584: ST_TO_ADDR
// if not cratesNearbyPoint then
27585: LD_VAR 0 9
27589: NOT
27590: IFFALSE 27596
// exit ;
27592: POP
27593: POP
27594: GO 28053
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
27596: LD_ADDR_VAR 0 4
27600: PUSH
27601: LD_INT 22
27603: PUSH
27604: LD_VAR 0 5
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: PUSH
27613: LD_INT 3
27615: PUSH
27616: LD_INT 60
27618: PUSH
27619: EMPTY
27620: LIST
27621: PUSH
27622: EMPTY
27623: LIST
27624: LIST
27625: PUSH
27626: LD_INT 91
27628: PUSH
27629: LD_VAR 0 8
27633: PUSH
27634: LD_INT 6
27636: PUSH
27637: EMPTY
27638: LIST
27639: LIST
27640: LIST
27641: PUSH
27642: LD_INT 2
27644: PUSH
27645: LD_INT 25
27647: PUSH
27648: LD_INT 2
27650: PUSH
27651: EMPTY
27652: LIST
27653: LIST
27654: PUSH
27655: LD_INT 25
27657: PUSH
27658: LD_INT 16
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: PUSH
27665: EMPTY
27666: LIST
27667: LIST
27668: LIST
27669: PUSH
27670: EMPTY
27671: LIST
27672: LIST
27673: LIST
27674: LIST
27675: PPUSH
27676: CALL_OW 69
27680: PUSH
27681: LD_VAR 0 8
27685: PPUSH
27686: CALL_OW 313
27690: PPUSH
27691: LD_INT 3
27693: PUSH
27694: LD_INT 60
27696: PUSH
27697: EMPTY
27698: LIST
27699: PUSH
27700: EMPTY
27701: LIST
27702: LIST
27703: PUSH
27704: LD_INT 2
27706: PUSH
27707: LD_INT 25
27709: PUSH
27710: LD_INT 2
27712: PUSH
27713: EMPTY
27714: LIST
27715: LIST
27716: PUSH
27717: LD_INT 25
27719: PUSH
27720: LD_INT 16
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: PUSH
27727: EMPTY
27728: LIST
27729: LIST
27730: LIST
27731: PUSH
27732: EMPTY
27733: LIST
27734: LIST
27735: PPUSH
27736: CALL_OW 72
27740: UNION
27741: ST_TO_ADDR
// if tmp then
27742: LD_VAR 0 4
27746: IFFALSE 27826
// begin tmp := ShrinkArray ( tmp , 3 ) ;
27748: LD_ADDR_VAR 0 4
27752: PUSH
27753: LD_VAR 0 4
27757: PPUSH
27758: LD_INT 3
27760: PPUSH
27761: CALL 69981 0 2
27765: ST_TO_ADDR
// for j in tmp do
27766: LD_ADDR_VAR 0 2
27770: PUSH
27771: LD_VAR 0 4
27775: PUSH
27776: FOR_IN
27777: IFFALSE 27820
// begin if IsInUnit ( j ) then
27779: LD_VAR 0 2
27783: PPUSH
27784: CALL_OW 310
27788: IFFALSE 27799
// ComExit ( j ) ;
27790: LD_VAR 0 2
27794: PPUSH
27795: CALL 70064 0 1
// AddComCollect ( j , x , y ) ;
27799: LD_VAR 0 2
27803: PPUSH
27804: LD_VAR 0 6
27808: PPUSH
27809: LD_VAR 0 7
27813: PPUSH
27814: CALL_OW 177
// end ;
27818: GO 27776
27820: POP
27821: POP
// exit ;
27822: POP
27823: POP
27824: GO 28053
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
27826: LD_ADDR_VAR 0 4
27830: PUSH
27831: LD_INT 22
27833: PUSH
27834: LD_VAR 0 5
27838: PUSH
27839: EMPTY
27840: LIST
27841: LIST
27842: PUSH
27843: LD_INT 91
27845: PUSH
27846: LD_VAR 0 8
27850: PUSH
27851: LD_INT 8
27853: PUSH
27854: EMPTY
27855: LIST
27856: LIST
27857: LIST
27858: PUSH
27859: LD_INT 2
27861: PUSH
27862: LD_INT 34
27864: PUSH
27865: LD_INT 12
27867: PUSH
27868: EMPTY
27869: LIST
27870: LIST
27871: PUSH
27872: LD_INT 34
27874: PUSH
27875: LD_INT 51
27877: PUSH
27878: EMPTY
27879: LIST
27880: LIST
27881: PUSH
27882: LD_INT 34
27884: PUSH
27885: LD_INT 32
27887: PUSH
27888: EMPTY
27889: LIST
27890: LIST
27891: PUSH
27892: LD_INT 34
27894: PUSH
27895: LD_INT 89
27897: PUSH
27898: EMPTY
27899: LIST
27900: LIST
27901: PUSH
27902: EMPTY
27903: LIST
27904: LIST
27905: LIST
27906: LIST
27907: LIST
27908: PUSH
27909: EMPTY
27910: LIST
27911: LIST
27912: LIST
27913: PPUSH
27914: CALL_OW 69
27918: ST_TO_ADDR
// if tmp then
27919: LD_VAR 0 4
27923: IFFALSE 28049
// begin for j in tmp do
27925: LD_ADDR_VAR 0 2
27929: PUSH
27930: LD_VAR 0 4
27934: PUSH
27935: FOR_IN
27936: IFFALSE 28047
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
27938: LD_VAR 0 2
27942: PPUSH
27943: CALL_OW 262
27947: PUSH
27948: LD_INT 3
27950: EQUAL
27951: PUSH
27952: LD_VAR 0 2
27956: PPUSH
27957: CALL_OW 261
27961: PUSH
27962: LD_INT 20
27964: GREATER
27965: OR
27966: PUSH
27967: LD_VAR 0 2
27971: PPUSH
27972: CALL_OW 314
27976: NOT
27977: AND
27978: PUSH
27979: LD_VAR 0 2
27983: PPUSH
27984: CALL_OW 263
27988: PUSH
27989: LD_INT 1
27991: NONEQUAL
27992: PUSH
27993: LD_VAR 0 2
27997: PPUSH
27998: CALL_OW 311
28002: OR
28003: AND
28004: IFFALSE 28045
// begin ComCollect ( j , x , y ) ;
28006: LD_VAR 0 2
28010: PPUSH
28011: LD_VAR 0 6
28015: PPUSH
28016: LD_VAR 0 7
28020: PPUSH
28021: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
28025: LD_VAR 0 2
28029: PPUSH
28030: LD_VAR 0 8
28034: PPUSH
28035: CALL_OW 172
// exit ;
28039: POP
28040: POP
28041: POP
28042: POP
28043: GO 28053
// end ;
28045: GO 27935
28047: POP
28048: POP
// end ; end ;
28049: GO 27424
28051: POP
28052: POP
// end ; end_of_file
28053: PPOPN 9
28055: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
28056: LD_INT 0
28058: PPUSH
28059: PPUSH
28060: PPUSH
28061: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
28062: LD_VAR 0 1
28066: PPUSH
28067: CALL_OW 264
28071: PUSH
28072: LD_INT 91
28074: EQUAL
28075: IFFALSE 28147
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
28077: LD_INT 68
28079: PPUSH
28080: LD_VAR 0 1
28084: PPUSH
28085: CALL_OW 255
28089: PPUSH
28090: CALL_OW 321
28094: PUSH
28095: LD_INT 2
28097: EQUAL
28098: IFFALSE 28110
// eff := 70 else
28100: LD_ADDR_VAR 0 4
28104: PUSH
28105: LD_INT 70
28107: ST_TO_ADDR
28108: GO 28118
// eff := 30 ;
28110: LD_ADDR_VAR 0 4
28114: PUSH
28115: LD_INT 30
28117: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
28118: LD_VAR 0 1
28122: PPUSH
28123: CALL_OW 250
28127: PPUSH
28128: LD_VAR 0 1
28132: PPUSH
28133: CALL_OW 251
28137: PPUSH
28138: LD_VAR 0 4
28142: PPUSH
28143: CALL_OW 495
// end ; end ;
28147: LD_VAR 0 2
28151: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
28152: LD_INT 0
28154: PPUSH
// end ;
28155: LD_VAR 0 4
28159: RET
// export function SOS_Command ( cmd ) ; begin
28160: LD_INT 0
28162: PPUSH
// end ;
28163: LD_VAR 0 2
28167: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
28168: LD_INT 0
28170: PPUSH
// end ;
28171: LD_VAR 0 6
28175: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
28176: LD_INT 0
28178: PPUSH
28179: PPUSH
// if not vehicle or not factory then
28180: LD_VAR 0 1
28184: NOT
28185: PUSH
28186: LD_VAR 0 2
28190: NOT
28191: OR
28192: IFFALSE 28196
// exit ;
28194: GO 28427
// if factoryWaypoints >= factory then
28196: LD_EXP 80
28200: PUSH
28201: LD_VAR 0 2
28205: GREATEREQUAL
28206: IFFALSE 28427
// if factoryWaypoints [ factory ] then
28208: LD_EXP 80
28212: PUSH
28213: LD_VAR 0 2
28217: ARRAY
28218: IFFALSE 28427
// begin if GetControl ( vehicle ) = control_manual then
28220: LD_VAR 0 1
28224: PPUSH
28225: CALL_OW 263
28229: PUSH
28230: LD_INT 1
28232: EQUAL
28233: IFFALSE 28314
// begin driver := IsDrivenBy ( vehicle ) ;
28235: LD_ADDR_VAR 0 4
28239: PUSH
28240: LD_VAR 0 1
28244: PPUSH
28245: CALL_OW 311
28249: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28250: LD_VAR 0 4
28254: PPUSH
28255: LD_EXP 80
28259: PUSH
28260: LD_VAR 0 2
28264: ARRAY
28265: PUSH
28266: LD_INT 3
28268: ARRAY
28269: PPUSH
28270: LD_EXP 80
28274: PUSH
28275: LD_VAR 0 2
28279: ARRAY
28280: PUSH
28281: LD_INT 4
28283: ARRAY
28284: PPUSH
28285: CALL_OW 171
// AddComExitVehicle ( driver ) ;
28289: LD_VAR 0 4
28293: PPUSH
28294: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
28298: LD_VAR 0 4
28302: PPUSH
28303: LD_VAR 0 2
28307: PPUSH
28308: CALL_OW 180
// end else
28312: GO 28427
// if GetControl ( vehicle ) = control_remote then
28314: LD_VAR 0 1
28318: PPUSH
28319: CALL_OW 263
28323: PUSH
28324: LD_INT 2
28326: EQUAL
28327: IFFALSE 28388
// begin wait ( 0 0$2 ) ;
28329: LD_INT 70
28331: PPUSH
28332: CALL_OW 67
// if Connect ( vehicle ) then
28336: LD_VAR 0 1
28340: PPUSH
28341: CALL 40285 0 1
28345: IFFALSE 28386
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28347: LD_VAR 0 1
28351: PPUSH
28352: LD_EXP 80
28356: PUSH
28357: LD_VAR 0 2
28361: ARRAY
28362: PUSH
28363: LD_INT 3
28365: ARRAY
28366: PPUSH
28367: LD_EXP 80
28371: PUSH
28372: LD_VAR 0 2
28376: ARRAY
28377: PUSH
28378: LD_INT 4
28380: ARRAY
28381: PPUSH
28382: CALL_OW 171
// end else
28386: GO 28427
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28388: LD_VAR 0 1
28392: PPUSH
28393: LD_EXP 80
28397: PUSH
28398: LD_VAR 0 2
28402: ARRAY
28403: PUSH
28404: LD_INT 3
28406: ARRAY
28407: PPUSH
28408: LD_EXP 80
28412: PUSH
28413: LD_VAR 0 2
28417: ARRAY
28418: PUSH
28419: LD_INT 4
28421: ARRAY
28422: PPUSH
28423: CALL_OW 171
// end ; end ;
28427: LD_VAR 0 3
28431: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
28432: LD_INT 0
28434: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
28435: LD_VAR 0 1
28439: PUSH
28440: LD_INT 250
28442: EQUAL
28443: PUSH
28444: LD_VAR 0 2
28448: PPUSH
28449: CALL_OW 264
28453: PUSH
28454: LD_INT 81
28456: EQUAL
28457: AND
28458: IFFALSE 28479
// MinerPlaceMine ( unit , x , y ) ;
28460: LD_VAR 0 2
28464: PPUSH
28465: LD_VAR 0 4
28469: PPUSH
28470: LD_VAR 0 5
28474: PPUSH
28475: CALL 30864 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
28479: LD_VAR 0 1
28483: PUSH
28484: LD_INT 251
28486: EQUAL
28487: PUSH
28488: LD_VAR 0 2
28492: PPUSH
28493: CALL_OW 264
28497: PUSH
28498: LD_INT 81
28500: EQUAL
28501: AND
28502: IFFALSE 28523
// MinerDetonateMine ( unit , x , y ) ;
28504: LD_VAR 0 2
28508: PPUSH
28509: LD_VAR 0 4
28513: PPUSH
28514: LD_VAR 0 5
28518: PPUSH
28519: CALL 31139 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
28523: LD_VAR 0 1
28527: PUSH
28528: LD_INT 252
28530: EQUAL
28531: PUSH
28532: LD_VAR 0 2
28536: PPUSH
28537: CALL_OW 264
28541: PUSH
28542: LD_INT 81
28544: EQUAL
28545: AND
28546: IFFALSE 28567
// MinerCreateMinefield ( unit , x , y ) ;
28548: LD_VAR 0 2
28552: PPUSH
28553: LD_VAR 0 4
28557: PPUSH
28558: LD_VAR 0 5
28562: PPUSH
28563: CALL 31556 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
28567: LD_VAR 0 1
28571: PUSH
28572: LD_INT 253
28574: EQUAL
28575: PUSH
28576: LD_VAR 0 2
28580: PPUSH
28581: CALL_OW 257
28585: PUSH
28586: LD_INT 5
28588: EQUAL
28589: AND
28590: IFFALSE 28611
// ComBinocular ( unit , x , y ) ;
28592: LD_VAR 0 2
28596: PPUSH
28597: LD_VAR 0 4
28601: PPUSH
28602: LD_VAR 0 5
28606: PPUSH
28607: CALL 31925 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
28611: LD_VAR 0 1
28615: PUSH
28616: LD_INT 254
28618: EQUAL
28619: PUSH
28620: LD_VAR 0 2
28624: PPUSH
28625: CALL_OW 264
28629: PUSH
28630: LD_INT 99
28632: EQUAL
28633: AND
28634: PUSH
28635: LD_VAR 0 3
28639: PPUSH
28640: CALL_OW 263
28644: PUSH
28645: LD_INT 3
28647: EQUAL
28648: AND
28649: IFFALSE 28665
// HackDestroyVehicle ( unit , selectedUnit ) ;
28651: LD_VAR 0 2
28655: PPUSH
28656: LD_VAR 0 3
28660: PPUSH
28661: CALL 30228 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
28665: LD_VAR 0 1
28669: PUSH
28670: LD_INT 255
28672: EQUAL
28673: PUSH
28674: LD_VAR 0 2
28678: PPUSH
28679: CALL_OW 264
28683: PUSH
28684: LD_INT 14
28686: PUSH
28687: LD_INT 53
28689: PUSH
28690: EMPTY
28691: LIST
28692: LIST
28693: IN
28694: AND
28695: PUSH
28696: LD_VAR 0 4
28700: PPUSH
28701: LD_VAR 0 5
28705: PPUSH
28706: CALL_OW 488
28710: AND
28711: IFFALSE 28735
// CutTreeXYR ( unit , x , y , 12 ) ;
28713: LD_VAR 0 2
28717: PPUSH
28718: LD_VAR 0 4
28722: PPUSH
28723: LD_VAR 0 5
28727: PPUSH
28728: LD_INT 12
28730: PPUSH
28731: CALL 28798 0 4
// if cmd = 256 then
28735: LD_VAR 0 1
28739: PUSH
28740: LD_INT 256
28742: EQUAL
28743: IFFALSE 28764
// SetFactoryWaypoint ( unit , x , y ) ;
28745: LD_VAR 0 2
28749: PPUSH
28750: LD_VAR 0 4
28754: PPUSH
28755: LD_VAR 0 5
28759: PPUSH
28760: CALL 26745 0 3
// if cmd = 257 then
28764: LD_VAR 0 1
28768: PUSH
28769: LD_INT 257
28771: EQUAL
28772: IFFALSE 28793
// SetWarehouseGatheringPoint ( unit , x , y ) ;
28774: LD_VAR 0 2
28778: PPUSH
28779: LD_VAR 0 4
28783: PPUSH
28784: LD_VAR 0 5
28788: PPUSH
28789: CALL 27107 0 3
// end ;
28793: LD_VAR 0 6
28797: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
28798: LD_INT 0
28800: PPUSH
28801: PPUSH
28802: PPUSH
28803: PPUSH
28804: PPUSH
28805: PPUSH
28806: PPUSH
28807: PPUSH
28808: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
28809: LD_VAR 0 1
28813: NOT
28814: PUSH
28815: LD_VAR 0 2
28819: PPUSH
28820: LD_VAR 0 3
28824: PPUSH
28825: CALL_OW 488
28829: NOT
28830: OR
28831: PUSH
28832: LD_VAR 0 4
28836: NOT
28837: OR
28838: IFFALSE 28842
// exit ;
28840: GO 29182
// list := [ ] ;
28842: LD_ADDR_VAR 0 13
28846: PUSH
28847: EMPTY
28848: ST_TO_ADDR
// if x - r < 0 then
28849: LD_VAR 0 2
28853: PUSH
28854: LD_VAR 0 4
28858: MINUS
28859: PUSH
28860: LD_INT 0
28862: LESS
28863: IFFALSE 28875
// min_x := 0 else
28865: LD_ADDR_VAR 0 7
28869: PUSH
28870: LD_INT 0
28872: ST_TO_ADDR
28873: GO 28891
// min_x := x - r ;
28875: LD_ADDR_VAR 0 7
28879: PUSH
28880: LD_VAR 0 2
28884: PUSH
28885: LD_VAR 0 4
28889: MINUS
28890: ST_TO_ADDR
// if y - r < 0 then
28891: LD_VAR 0 3
28895: PUSH
28896: LD_VAR 0 4
28900: MINUS
28901: PUSH
28902: LD_INT 0
28904: LESS
28905: IFFALSE 28917
// min_y := 0 else
28907: LD_ADDR_VAR 0 8
28911: PUSH
28912: LD_INT 0
28914: ST_TO_ADDR
28915: GO 28933
// min_y := y - r ;
28917: LD_ADDR_VAR 0 8
28921: PUSH
28922: LD_VAR 0 3
28926: PUSH
28927: LD_VAR 0 4
28931: MINUS
28932: ST_TO_ADDR
// max_x := x + r ;
28933: LD_ADDR_VAR 0 9
28937: PUSH
28938: LD_VAR 0 2
28942: PUSH
28943: LD_VAR 0 4
28947: PLUS
28948: ST_TO_ADDR
// max_y := y + r ;
28949: LD_ADDR_VAR 0 10
28953: PUSH
28954: LD_VAR 0 3
28958: PUSH
28959: LD_VAR 0 4
28963: PLUS
28964: ST_TO_ADDR
// for _x = min_x to max_x do
28965: LD_ADDR_VAR 0 11
28969: PUSH
28970: DOUBLE
28971: LD_VAR 0 7
28975: DEC
28976: ST_TO_ADDR
28977: LD_VAR 0 9
28981: PUSH
28982: FOR_TO
28983: IFFALSE 29100
// for _y = min_y to max_y do
28985: LD_ADDR_VAR 0 12
28989: PUSH
28990: DOUBLE
28991: LD_VAR 0 8
28995: DEC
28996: ST_TO_ADDR
28997: LD_VAR 0 10
29001: PUSH
29002: FOR_TO
29003: IFFALSE 29096
// begin if not ValidHex ( _x , _y ) then
29005: LD_VAR 0 11
29009: PPUSH
29010: LD_VAR 0 12
29014: PPUSH
29015: CALL_OW 488
29019: NOT
29020: IFFALSE 29024
// continue ;
29022: GO 29002
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
29024: LD_VAR 0 11
29028: PPUSH
29029: LD_VAR 0 12
29033: PPUSH
29034: CALL_OW 351
29038: PUSH
29039: LD_VAR 0 11
29043: PPUSH
29044: LD_VAR 0 12
29048: PPUSH
29049: CALL_OW 554
29053: AND
29054: IFFALSE 29094
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
29056: LD_ADDR_VAR 0 13
29060: PUSH
29061: LD_VAR 0 13
29065: PPUSH
29066: LD_VAR 0 13
29070: PUSH
29071: LD_INT 1
29073: PLUS
29074: PPUSH
29075: LD_VAR 0 11
29079: PUSH
29080: LD_VAR 0 12
29084: PUSH
29085: EMPTY
29086: LIST
29087: LIST
29088: PPUSH
29089: CALL_OW 2
29093: ST_TO_ADDR
// end ;
29094: GO 29002
29096: POP
29097: POP
29098: GO 28982
29100: POP
29101: POP
// if not list then
29102: LD_VAR 0 13
29106: NOT
29107: IFFALSE 29111
// exit ;
29109: GO 29182
// for i in list do
29111: LD_ADDR_VAR 0 6
29115: PUSH
29116: LD_VAR 0 13
29120: PUSH
29121: FOR_IN
29122: IFFALSE 29180
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
29124: LD_VAR 0 1
29128: PPUSH
29129: LD_STRING M
29131: PUSH
29132: LD_VAR 0 6
29136: PUSH
29137: LD_INT 1
29139: ARRAY
29140: PUSH
29141: LD_VAR 0 6
29145: PUSH
29146: LD_INT 2
29148: ARRAY
29149: PUSH
29150: LD_INT 0
29152: PUSH
29153: LD_INT 0
29155: PUSH
29156: LD_INT 0
29158: PUSH
29159: LD_INT 0
29161: PUSH
29162: EMPTY
29163: LIST
29164: LIST
29165: LIST
29166: LIST
29167: LIST
29168: LIST
29169: LIST
29170: PUSH
29171: EMPTY
29172: LIST
29173: PPUSH
29174: CALL_OW 447
29178: GO 29121
29180: POP
29181: POP
// end ;
29182: LD_VAR 0 5
29186: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
29187: LD_EXP 83
29191: NOT
29192: IFFALSE 29242
29194: GO 29196
29196: DISABLE
// begin initHack := true ;
29197: LD_ADDR_EXP 83
29201: PUSH
29202: LD_INT 1
29204: ST_TO_ADDR
// hackTanks := [ ] ;
29205: LD_ADDR_EXP 84
29209: PUSH
29210: EMPTY
29211: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
29212: LD_ADDR_EXP 85
29216: PUSH
29217: EMPTY
29218: ST_TO_ADDR
// hackLimit := 3 ;
29219: LD_ADDR_EXP 86
29223: PUSH
29224: LD_INT 3
29226: ST_TO_ADDR
// hackDist := 12 ;
29227: LD_ADDR_EXP 87
29231: PUSH
29232: LD_INT 12
29234: ST_TO_ADDR
// hackCounter := [ ] ;
29235: LD_ADDR_EXP 88
29239: PUSH
29240: EMPTY
29241: ST_TO_ADDR
// end ;
29242: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
29243: LD_EXP 83
29247: PUSH
29248: LD_INT 34
29250: PUSH
29251: LD_INT 99
29253: PUSH
29254: EMPTY
29255: LIST
29256: LIST
29257: PPUSH
29258: CALL_OW 69
29262: AND
29263: IFFALSE 29516
29265: GO 29267
29267: DISABLE
29268: LD_INT 0
29270: PPUSH
29271: PPUSH
// begin enable ;
29272: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
29273: LD_ADDR_VAR 0 1
29277: PUSH
29278: LD_INT 34
29280: PUSH
29281: LD_INT 99
29283: PUSH
29284: EMPTY
29285: LIST
29286: LIST
29287: PPUSH
29288: CALL_OW 69
29292: PUSH
29293: FOR_IN
29294: IFFALSE 29514
// begin if not i in hackTanks then
29296: LD_VAR 0 1
29300: PUSH
29301: LD_EXP 84
29305: IN
29306: NOT
29307: IFFALSE 29390
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
29309: LD_ADDR_EXP 84
29313: PUSH
29314: LD_EXP 84
29318: PPUSH
29319: LD_EXP 84
29323: PUSH
29324: LD_INT 1
29326: PLUS
29327: PPUSH
29328: LD_VAR 0 1
29332: PPUSH
29333: CALL_OW 1
29337: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
29338: LD_ADDR_EXP 85
29342: PUSH
29343: LD_EXP 85
29347: PPUSH
29348: LD_EXP 85
29352: PUSH
29353: LD_INT 1
29355: PLUS
29356: PPUSH
29357: EMPTY
29358: PPUSH
29359: CALL_OW 1
29363: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
29364: LD_ADDR_EXP 88
29368: PUSH
29369: LD_EXP 88
29373: PPUSH
29374: LD_EXP 88
29378: PUSH
29379: LD_INT 1
29381: PLUS
29382: PPUSH
29383: EMPTY
29384: PPUSH
29385: CALL_OW 1
29389: ST_TO_ADDR
// end ; if not IsOk ( i ) then
29390: LD_VAR 0 1
29394: PPUSH
29395: CALL_OW 302
29399: NOT
29400: IFFALSE 29413
// begin HackUnlinkAll ( i ) ;
29402: LD_VAR 0 1
29406: PPUSH
29407: CALL 29519 0 1
// continue ;
29411: GO 29293
// end ; HackCheckCapturedStatus ( i ) ;
29413: LD_VAR 0 1
29417: PPUSH
29418: CALL 29962 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
29422: LD_ADDR_VAR 0 2
29426: PUSH
29427: LD_INT 81
29429: PUSH
29430: LD_VAR 0 1
29434: PPUSH
29435: CALL_OW 255
29439: PUSH
29440: EMPTY
29441: LIST
29442: LIST
29443: PUSH
29444: LD_INT 33
29446: PUSH
29447: LD_INT 3
29449: PUSH
29450: EMPTY
29451: LIST
29452: LIST
29453: PUSH
29454: LD_INT 91
29456: PUSH
29457: LD_VAR 0 1
29461: PUSH
29462: LD_EXP 87
29466: PUSH
29467: EMPTY
29468: LIST
29469: LIST
29470: LIST
29471: PUSH
29472: LD_INT 50
29474: PUSH
29475: EMPTY
29476: LIST
29477: PUSH
29478: EMPTY
29479: LIST
29480: LIST
29481: LIST
29482: LIST
29483: PPUSH
29484: CALL_OW 69
29488: ST_TO_ADDR
// if not tmp then
29489: LD_VAR 0 2
29493: NOT
29494: IFFALSE 29498
// continue ;
29496: GO 29293
// HackLink ( i , tmp ) ;
29498: LD_VAR 0 1
29502: PPUSH
29503: LD_VAR 0 2
29507: PPUSH
29508: CALL 29655 0 2
// end ;
29512: GO 29293
29514: POP
29515: POP
// end ;
29516: PPOPN 2
29518: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
29519: LD_INT 0
29521: PPUSH
29522: PPUSH
29523: PPUSH
// if not hack in hackTanks then
29524: LD_VAR 0 1
29528: PUSH
29529: LD_EXP 84
29533: IN
29534: NOT
29535: IFFALSE 29539
// exit ;
29537: GO 29650
// index := GetElementIndex ( hackTanks , hack ) ;
29539: LD_ADDR_VAR 0 4
29543: PUSH
29544: LD_EXP 84
29548: PPUSH
29549: LD_VAR 0 1
29553: PPUSH
29554: CALL 37092 0 2
29558: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
29559: LD_EXP 85
29563: PUSH
29564: LD_VAR 0 4
29568: ARRAY
29569: IFFALSE 29650
// begin for i in hackTanksCaptured [ index ] do
29571: LD_ADDR_VAR 0 3
29575: PUSH
29576: LD_EXP 85
29580: PUSH
29581: LD_VAR 0 4
29585: ARRAY
29586: PUSH
29587: FOR_IN
29588: IFFALSE 29614
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
29590: LD_VAR 0 3
29594: PUSH
29595: LD_INT 1
29597: ARRAY
29598: PPUSH
29599: LD_VAR 0 3
29603: PUSH
29604: LD_INT 2
29606: ARRAY
29607: PPUSH
29608: CALL_OW 235
29612: GO 29587
29614: POP
29615: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
29616: LD_ADDR_EXP 85
29620: PUSH
29621: LD_EXP 85
29625: PPUSH
29626: LD_VAR 0 4
29630: PPUSH
29631: EMPTY
29632: PPUSH
29633: CALL_OW 1
29637: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
29638: LD_VAR 0 1
29642: PPUSH
29643: LD_INT 0
29645: PPUSH
29646: CALL_OW 505
// end ; end ;
29650: LD_VAR 0 2
29654: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
29655: LD_INT 0
29657: PPUSH
29658: PPUSH
29659: PPUSH
// if not hack in hackTanks or not vehicles then
29660: LD_VAR 0 1
29664: PUSH
29665: LD_EXP 84
29669: IN
29670: NOT
29671: PUSH
29672: LD_VAR 0 2
29676: NOT
29677: OR
29678: IFFALSE 29682
// exit ;
29680: GO 29957
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
29682: LD_ADDR_VAR 0 2
29686: PUSH
29687: LD_VAR 0 1
29691: PPUSH
29692: LD_VAR 0 2
29696: PPUSH
29697: LD_INT 1
29699: PPUSH
29700: LD_INT 1
29702: PPUSH
29703: CALL 37742 0 4
29707: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
29708: LD_ADDR_VAR 0 5
29712: PUSH
29713: LD_EXP 84
29717: PPUSH
29718: LD_VAR 0 1
29722: PPUSH
29723: CALL 37092 0 2
29727: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
29728: LD_EXP 85
29732: PUSH
29733: LD_VAR 0 5
29737: ARRAY
29738: PUSH
29739: LD_EXP 86
29743: LESS
29744: IFFALSE 29933
// begin for i := 1 to vehicles do
29746: LD_ADDR_VAR 0 4
29750: PUSH
29751: DOUBLE
29752: LD_INT 1
29754: DEC
29755: ST_TO_ADDR
29756: LD_VAR 0 2
29760: PUSH
29761: FOR_TO
29762: IFFALSE 29931
// begin if hackTanksCaptured [ index ] = hackLimit then
29764: LD_EXP 85
29768: PUSH
29769: LD_VAR 0 5
29773: ARRAY
29774: PUSH
29775: LD_EXP 86
29779: EQUAL
29780: IFFALSE 29784
// break ;
29782: GO 29931
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
29784: LD_ADDR_EXP 88
29788: PUSH
29789: LD_EXP 88
29793: PPUSH
29794: LD_VAR 0 5
29798: PPUSH
29799: LD_EXP 88
29803: PUSH
29804: LD_VAR 0 5
29808: ARRAY
29809: PUSH
29810: LD_INT 1
29812: PLUS
29813: PPUSH
29814: CALL_OW 1
29818: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
29819: LD_ADDR_EXP 85
29823: PUSH
29824: LD_EXP 85
29828: PPUSH
29829: LD_VAR 0 5
29833: PUSH
29834: LD_EXP 85
29838: PUSH
29839: LD_VAR 0 5
29843: ARRAY
29844: PUSH
29845: LD_INT 1
29847: PLUS
29848: PUSH
29849: EMPTY
29850: LIST
29851: LIST
29852: PPUSH
29853: LD_VAR 0 2
29857: PUSH
29858: LD_VAR 0 4
29862: ARRAY
29863: PUSH
29864: LD_VAR 0 2
29868: PUSH
29869: LD_VAR 0 4
29873: ARRAY
29874: PPUSH
29875: CALL_OW 255
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: PPUSH
29884: CALL 37307 0 3
29888: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
29889: LD_VAR 0 2
29893: PUSH
29894: LD_VAR 0 4
29898: ARRAY
29899: PPUSH
29900: LD_VAR 0 1
29904: PPUSH
29905: CALL_OW 255
29909: PPUSH
29910: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
29914: LD_VAR 0 2
29918: PUSH
29919: LD_VAR 0 4
29923: ARRAY
29924: PPUSH
29925: CALL_OW 141
// end ;
29929: GO 29761
29931: POP
29932: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29933: LD_VAR 0 1
29937: PPUSH
29938: LD_EXP 85
29942: PUSH
29943: LD_VAR 0 5
29947: ARRAY
29948: PUSH
29949: LD_INT 0
29951: PLUS
29952: PPUSH
29953: CALL_OW 505
// end ;
29957: LD_VAR 0 3
29961: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
29962: LD_INT 0
29964: PPUSH
29965: PPUSH
29966: PPUSH
29967: PPUSH
// if not hack in hackTanks then
29968: LD_VAR 0 1
29972: PUSH
29973: LD_EXP 84
29977: IN
29978: NOT
29979: IFFALSE 29983
// exit ;
29981: GO 30223
// index := GetElementIndex ( hackTanks , hack ) ;
29983: LD_ADDR_VAR 0 4
29987: PUSH
29988: LD_EXP 84
29992: PPUSH
29993: LD_VAR 0 1
29997: PPUSH
29998: CALL 37092 0 2
30002: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
30003: LD_ADDR_VAR 0 3
30007: PUSH
30008: DOUBLE
30009: LD_EXP 85
30013: PUSH
30014: LD_VAR 0 4
30018: ARRAY
30019: INC
30020: ST_TO_ADDR
30021: LD_INT 1
30023: PUSH
30024: FOR_DOWNTO
30025: IFFALSE 30197
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
30027: LD_ADDR_VAR 0 5
30031: PUSH
30032: LD_EXP 85
30036: PUSH
30037: LD_VAR 0 4
30041: ARRAY
30042: PUSH
30043: LD_VAR 0 3
30047: ARRAY
30048: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
30049: LD_VAR 0 5
30053: PUSH
30054: LD_INT 1
30056: ARRAY
30057: PPUSH
30058: CALL_OW 302
30062: NOT
30063: PUSH
30064: LD_VAR 0 5
30068: PUSH
30069: LD_INT 1
30071: ARRAY
30072: PPUSH
30073: CALL_OW 255
30077: PUSH
30078: LD_VAR 0 1
30082: PPUSH
30083: CALL_OW 255
30087: NONEQUAL
30088: OR
30089: IFFALSE 30195
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
30091: LD_VAR 0 5
30095: PUSH
30096: LD_INT 1
30098: ARRAY
30099: PPUSH
30100: CALL_OW 305
30104: PUSH
30105: LD_VAR 0 5
30109: PUSH
30110: LD_INT 1
30112: ARRAY
30113: PPUSH
30114: CALL_OW 255
30118: PUSH
30119: LD_VAR 0 1
30123: PPUSH
30124: CALL_OW 255
30128: EQUAL
30129: AND
30130: IFFALSE 30154
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
30132: LD_VAR 0 5
30136: PUSH
30137: LD_INT 1
30139: ARRAY
30140: PPUSH
30141: LD_VAR 0 5
30145: PUSH
30146: LD_INT 2
30148: ARRAY
30149: PPUSH
30150: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
30154: LD_ADDR_EXP 85
30158: PUSH
30159: LD_EXP 85
30163: PPUSH
30164: LD_VAR 0 4
30168: PPUSH
30169: LD_EXP 85
30173: PUSH
30174: LD_VAR 0 4
30178: ARRAY
30179: PPUSH
30180: LD_VAR 0 3
30184: PPUSH
30185: CALL_OW 3
30189: PPUSH
30190: CALL_OW 1
30194: ST_TO_ADDR
// end ; end ;
30195: GO 30024
30197: POP
30198: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30199: LD_VAR 0 1
30203: PPUSH
30204: LD_EXP 85
30208: PUSH
30209: LD_VAR 0 4
30213: ARRAY
30214: PUSH
30215: LD_INT 0
30217: PLUS
30218: PPUSH
30219: CALL_OW 505
// end ;
30223: LD_VAR 0 2
30227: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
30228: LD_INT 0
30230: PPUSH
30231: PPUSH
30232: PPUSH
30233: PPUSH
// if not hack in hackTanks then
30234: LD_VAR 0 1
30238: PUSH
30239: LD_EXP 84
30243: IN
30244: NOT
30245: IFFALSE 30249
// exit ;
30247: GO 30334
// index := GetElementIndex ( hackTanks , hack ) ;
30249: LD_ADDR_VAR 0 5
30253: PUSH
30254: LD_EXP 84
30258: PPUSH
30259: LD_VAR 0 1
30263: PPUSH
30264: CALL 37092 0 2
30268: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
30269: LD_ADDR_VAR 0 4
30273: PUSH
30274: DOUBLE
30275: LD_INT 1
30277: DEC
30278: ST_TO_ADDR
30279: LD_EXP 85
30283: PUSH
30284: LD_VAR 0 5
30288: ARRAY
30289: PUSH
30290: FOR_TO
30291: IFFALSE 30332
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
30293: LD_EXP 85
30297: PUSH
30298: LD_VAR 0 5
30302: ARRAY
30303: PUSH
30304: LD_VAR 0 4
30308: ARRAY
30309: PUSH
30310: LD_INT 1
30312: ARRAY
30313: PUSH
30314: LD_VAR 0 2
30318: EQUAL
30319: IFFALSE 30330
// KillUnit ( vehicle ) ;
30321: LD_VAR 0 2
30325: PPUSH
30326: CALL_OW 66
30330: GO 30290
30332: POP
30333: POP
// end ;
30334: LD_VAR 0 3
30338: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
30339: LD_EXP 89
30343: NOT
30344: IFFALSE 30379
30346: GO 30348
30348: DISABLE
// begin initMiner := true ;
30349: LD_ADDR_EXP 89
30353: PUSH
30354: LD_INT 1
30356: ST_TO_ADDR
// minersList := [ ] ;
30357: LD_ADDR_EXP 90
30361: PUSH
30362: EMPTY
30363: ST_TO_ADDR
// minerMinesList := [ ] ;
30364: LD_ADDR_EXP 91
30368: PUSH
30369: EMPTY
30370: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
30371: LD_ADDR_EXP 92
30375: PUSH
30376: LD_INT 5
30378: ST_TO_ADDR
// end ;
30379: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
30380: LD_EXP 89
30384: PUSH
30385: LD_INT 34
30387: PUSH
30388: LD_INT 81
30390: PUSH
30391: EMPTY
30392: LIST
30393: LIST
30394: PPUSH
30395: CALL_OW 69
30399: AND
30400: IFFALSE 30861
30402: GO 30404
30404: DISABLE
30405: LD_INT 0
30407: PPUSH
30408: PPUSH
30409: PPUSH
30410: PPUSH
// begin enable ;
30411: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
30412: LD_ADDR_VAR 0 1
30416: PUSH
30417: LD_INT 34
30419: PUSH
30420: LD_INT 81
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: PPUSH
30427: CALL_OW 69
30431: PUSH
30432: FOR_IN
30433: IFFALSE 30505
// begin if not i in minersList then
30435: LD_VAR 0 1
30439: PUSH
30440: LD_EXP 90
30444: IN
30445: NOT
30446: IFFALSE 30503
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
30448: LD_ADDR_EXP 90
30452: PUSH
30453: LD_EXP 90
30457: PPUSH
30458: LD_EXP 90
30462: PUSH
30463: LD_INT 1
30465: PLUS
30466: PPUSH
30467: LD_VAR 0 1
30471: PPUSH
30472: CALL_OW 1
30476: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
30477: LD_ADDR_EXP 91
30481: PUSH
30482: LD_EXP 91
30486: PPUSH
30487: LD_EXP 91
30491: PUSH
30492: LD_INT 1
30494: PLUS
30495: PPUSH
30496: EMPTY
30497: PPUSH
30498: CALL_OW 1
30502: ST_TO_ADDR
// end end ;
30503: GO 30432
30505: POP
30506: POP
// for i := minerMinesList downto 1 do
30507: LD_ADDR_VAR 0 1
30511: PUSH
30512: DOUBLE
30513: LD_EXP 91
30517: INC
30518: ST_TO_ADDR
30519: LD_INT 1
30521: PUSH
30522: FOR_DOWNTO
30523: IFFALSE 30859
// begin if IsLive ( minersList [ i ] ) then
30525: LD_EXP 90
30529: PUSH
30530: LD_VAR 0 1
30534: ARRAY
30535: PPUSH
30536: CALL_OW 300
30540: IFFALSE 30568
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
30542: LD_EXP 90
30546: PUSH
30547: LD_VAR 0 1
30551: ARRAY
30552: PPUSH
30553: LD_EXP 91
30557: PUSH
30558: LD_VAR 0 1
30562: ARRAY
30563: PPUSH
30564: CALL_OW 505
// if not minerMinesList [ i ] then
30568: LD_EXP 91
30572: PUSH
30573: LD_VAR 0 1
30577: ARRAY
30578: NOT
30579: IFFALSE 30583
// continue ;
30581: GO 30522
// for j := minerMinesList [ i ] downto 1 do
30583: LD_ADDR_VAR 0 2
30587: PUSH
30588: DOUBLE
30589: LD_EXP 91
30593: PUSH
30594: LD_VAR 0 1
30598: ARRAY
30599: INC
30600: ST_TO_ADDR
30601: LD_INT 1
30603: PUSH
30604: FOR_DOWNTO
30605: IFFALSE 30855
// begin side := GetSide ( minersList [ i ] ) ;
30607: LD_ADDR_VAR 0 3
30611: PUSH
30612: LD_EXP 90
30616: PUSH
30617: LD_VAR 0 1
30621: ARRAY
30622: PPUSH
30623: CALL_OW 255
30627: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
30628: LD_ADDR_VAR 0 4
30632: PUSH
30633: LD_EXP 91
30637: PUSH
30638: LD_VAR 0 1
30642: ARRAY
30643: PUSH
30644: LD_VAR 0 2
30648: ARRAY
30649: PUSH
30650: LD_INT 1
30652: ARRAY
30653: PPUSH
30654: LD_EXP 91
30658: PUSH
30659: LD_VAR 0 1
30663: ARRAY
30664: PUSH
30665: LD_VAR 0 2
30669: ARRAY
30670: PUSH
30671: LD_INT 2
30673: ARRAY
30674: PPUSH
30675: CALL_OW 428
30679: ST_TO_ADDR
// if not tmp then
30680: LD_VAR 0 4
30684: NOT
30685: IFFALSE 30689
// continue ;
30687: GO 30604
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
30689: LD_VAR 0 4
30693: PUSH
30694: LD_INT 81
30696: PUSH
30697: LD_VAR 0 3
30701: PUSH
30702: EMPTY
30703: LIST
30704: LIST
30705: PPUSH
30706: CALL_OW 69
30710: IN
30711: PUSH
30712: LD_EXP 91
30716: PUSH
30717: LD_VAR 0 1
30721: ARRAY
30722: PUSH
30723: LD_VAR 0 2
30727: ARRAY
30728: PUSH
30729: LD_INT 1
30731: ARRAY
30732: PPUSH
30733: LD_EXP 91
30737: PUSH
30738: LD_VAR 0 1
30742: ARRAY
30743: PUSH
30744: LD_VAR 0 2
30748: ARRAY
30749: PUSH
30750: LD_INT 2
30752: ARRAY
30753: PPUSH
30754: CALL_OW 458
30758: AND
30759: IFFALSE 30853
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
30761: LD_EXP 91
30765: PUSH
30766: LD_VAR 0 1
30770: ARRAY
30771: PUSH
30772: LD_VAR 0 2
30776: ARRAY
30777: PUSH
30778: LD_INT 1
30780: ARRAY
30781: PPUSH
30782: LD_EXP 91
30786: PUSH
30787: LD_VAR 0 1
30791: ARRAY
30792: PUSH
30793: LD_VAR 0 2
30797: ARRAY
30798: PUSH
30799: LD_INT 2
30801: ARRAY
30802: PPUSH
30803: LD_VAR 0 3
30807: PPUSH
30808: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
30812: LD_ADDR_EXP 91
30816: PUSH
30817: LD_EXP 91
30821: PPUSH
30822: LD_VAR 0 1
30826: PPUSH
30827: LD_EXP 91
30831: PUSH
30832: LD_VAR 0 1
30836: ARRAY
30837: PPUSH
30838: LD_VAR 0 2
30842: PPUSH
30843: CALL_OW 3
30847: PPUSH
30848: CALL_OW 1
30852: ST_TO_ADDR
// end ; end ;
30853: GO 30604
30855: POP
30856: POP
// end ;
30857: GO 30522
30859: POP
30860: POP
// end ;
30861: PPOPN 4
30863: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
30864: LD_INT 0
30866: PPUSH
30867: PPUSH
// result := false ;
30868: LD_ADDR_VAR 0 4
30872: PUSH
30873: LD_INT 0
30875: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
30876: LD_VAR 0 1
30880: PPUSH
30881: CALL_OW 264
30885: PUSH
30886: LD_INT 81
30888: EQUAL
30889: NOT
30890: IFFALSE 30894
// exit ;
30892: GO 31134
// index := GetElementIndex ( minersList , unit ) ;
30894: LD_ADDR_VAR 0 5
30898: PUSH
30899: LD_EXP 90
30903: PPUSH
30904: LD_VAR 0 1
30908: PPUSH
30909: CALL 37092 0 2
30913: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
30914: LD_EXP 91
30918: PUSH
30919: LD_VAR 0 5
30923: ARRAY
30924: PUSH
30925: LD_EXP 92
30929: GREATEREQUAL
30930: IFFALSE 30934
// exit ;
30932: GO 31134
// ComMoveXY ( unit , x , y ) ;
30934: LD_VAR 0 1
30938: PPUSH
30939: LD_VAR 0 2
30943: PPUSH
30944: LD_VAR 0 3
30948: PPUSH
30949: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30953: LD_INT 35
30955: PPUSH
30956: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
30960: LD_VAR 0 1
30964: PPUSH
30965: LD_VAR 0 2
30969: PPUSH
30970: LD_VAR 0 3
30974: PPUSH
30975: CALL 68476 0 3
30979: NOT
30980: PUSH
30981: LD_VAR 0 1
30985: PPUSH
30986: CALL_OW 314
30990: AND
30991: IFFALSE 30995
// exit ;
30993: GO 31134
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
30995: LD_VAR 0 2
30999: PPUSH
31000: LD_VAR 0 3
31004: PPUSH
31005: CALL_OW 428
31009: PUSH
31010: LD_VAR 0 1
31014: EQUAL
31015: PUSH
31016: LD_VAR 0 1
31020: PPUSH
31021: CALL_OW 314
31025: NOT
31026: AND
31027: IFFALSE 30953
// PlaySoundXY ( x , y , PlantMine ) ;
31029: LD_VAR 0 2
31033: PPUSH
31034: LD_VAR 0 3
31038: PPUSH
31039: LD_STRING PlantMine
31041: PPUSH
31042: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
31046: LD_VAR 0 2
31050: PPUSH
31051: LD_VAR 0 3
31055: PPUSH
31056: LD_VAR 0 1
31060: PPUSH
31061: CALL_OW 255
31065: PPUSH
31066: LD_INT 0
31068: PPUSH
31069: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
31073: LD_ADDR_EXP 91
31077: PUSH
31078: LD_EXP 91
31082: PPUSH
31083: LD_VAR 0 5
31087: PUSH
31088: LD_EXP 91
31092: PUSH
31093: LD_VAR 0 5
31097: ARRAY
31098: PUSH
31099: LD_INT 1
31101: PLUS
31102: PUSH
31103: EMPTY
31104: LIST
31105: LIST
31106: PPUSH
31107: LD_VAR 0 2
31111: PUSH
31112: LD_VAR 0 3
31116: PUSH
31117: EMPTY
31118: LIST
31119: LIST
31120: PPUSH
31121: CALL 37307 0 3
31125: ST_TO_ADDR
// result := true ;
31126: LD_ADDR_VAR 0 4
31130: PUSH
31131: LD_INT 1
31133: ST_TO_ADDR
// end ;
31134: LD_VAR 0 4
31138: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
31139: LD_INT 0
31141: PPUSH
31142: PPUSH
31143: PPUSH
// if not unit in minersList then
31144: LD_VAR 0 1
31148: PUSH
31149: LD_EXP 90
31153: IN
31154: NOT
31155: IFFALSE 31159
// exit ;
31157: GO 31551
// index := GetElementIndex ( minersList , unit ) ;
31159: LD_ADDR_VAR 0 6
31163: PUSH
31164: LD_EXP 90
31168: PPUSH
31169: LD_VAR 0 1
31173: PPUSH
31174: CALL 37092 0 2
31178: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
31179: LD_ADDR_VAR 0 5
31183: PUSH
31184: DOUBLE
31185: LD_EXP 91
31189: PUSH
31190: LD_VAR 0 6
31194: ARRAY
31195: INC
31196: ST_TO_ADDR
31197: LD_INT 1
31199: PUSH
31200: FOR_DOWNTO
31201: IFFALSE 31362
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
31203: LD_EXP 91
31207: PUSH
31208: LD_VAR 0 6
31212: ARRAY
31213: PUSH
31214: LD_VAR 0 5
31218: ARRAY
31219: PUSH
31220: LD_INT 1
31222: ARRAY
31223: PUSH
31224: LD_VAR 0 2
31228: EQUAL
31229: PUSH
31230: LD_EXP 91
31234: PUSH
31235: LD_VAR 0 6
31239: ARRAY
31240: PUSH
31241: LD_VAR 0 5
31245: ARRAY
31246: PUSH
31247: LD_INT 2
31249: ARRAY
31250: PUSH
31251: LD_VAR 0 3
31255: EQUAL
31256: AND
31257: IFFALSE 31360
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31259: LD_EXP 91
31263: PUSH
31264: LD_VAR 0 6
31268: ARRAY
31269: PUSH
31270: LD_VAR 0 5
31274: ARRAY
31275: PUSH
31276: LD_INT 1
31278: ARRAY
31279: PPUSH
31280: LD_EXP 91
31284: PUSH
31285: LD_VAR 0 6
31289: ARRAY
31290: PUSH
31291: LD_VAR 0 5
31295: ARRAY
31296: PUSH
31297: LD_INT 2
31299: ARRAY
31300: PPUSH
31301: LD_VAR 0 1
31305: PPUSH
31306: CALL_OW 255
31310: PPUSH
31311: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31315: LD_ADDR_EXP 91
31319: PUSH
31320: LD_EXP 91
31324: PPUSH
31325: LD_VAR 0 6
31329: PPUSH
31330: LD_EXP 91
31334: PUSH
31335: LD_VAR 0 6
31339: ARRAY
31340: PPUSH
31341: LD_VAR 0 5
31345: PPUSH
31346: CALL_OW 3
31350: PPUSH
31351: CALL_OW 1
31355: ST_TO_ADDR
// exit ;
31356: POP
31357: POP
31358: GO 31551
// end ; end ;
31360: GO 31200
31362: POP
31363: POP
// for i := minerMinesList [ index ] downto 1 do
31364: LD_ADDR_VAR 0 5
31368: PUSH
31369: DOUBLE
31370: LD_EXP 91
31374: PUSH
31375: LD_VAR 0 6
31379: ARRAY
31380: INC
31381: ST_TO_ADDR
31382: LD_INT 1
31384: PUSH
31385: FOR_DOWNTO
31386: IFFALSE 31549
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
31388: LD_EXP 91
31392: PUSH
31393: LD_VAR 0 6
31397: ARRAY
31398: PUSH
31399: LD_VAR 0 5
31403: ARRAY
31404: PUSH
31405: LD_INT 1
31407: ARRAY
31408: PPUSH
31409: LD_EXP 91
31413: PUSH
31414: LD_VAR 0 6
31418: ARRAY
31419: PUSH
31420: LD_VAR 0 5
31424: ARRAY
31425: PUSH
31426: LD_INT 2
31428: ARRAY
31429: PPUSH
31430: LD_VAR 0 2
31434: PPUSH
31435: LD_VAR 0 3
31439: PPUSH
31440: CALL_OW 298
31444: PUSH
31445: LD_INT 6
31447: LESS
31448: IFFALSE 31547
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31450: LD_EXP 91
31454: PUSH
31455: LD_VAR 0 6
31459: ARRAY
31460: PUSH
31461: LD_VAR 0 5
31465: ARRAY
31466: PUSH
31467: LD_INT 1
31469: ARRAY
31470: PPUSH
31471: LD_EXP 91
31475: PUSH
31476: LD_VAR 0 6
31480: ARRAY
31481: PUSH
31482: LD_VAR 0 5
31486: ARRAY
31487: PUSH
31488: LD_INT 2
31490: ARRAY
31491: PPUSH
31492: LD_VAR 0 1
31496: PPUSH
31497: CALL_OW 255
31501: PPUSH
31502: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31506: LD_ADDR_EXP 91
31510: PUSH
31511: LD_EXP 91
31515: PPUSH
31516: LD_VAR 0 6
31520: PPUSH
31521: LD_EXP 91
31525: PUSH
31526: LD_VAR 0 6
31530: ARRAY
31531: PPUSH
31532: LD_VAR 0 5
31536: PPUSH
31537: CALL_OW 3
31541: PPUSH
31542: CALL_OW 1
31546: ST_TO_ADDR
// end ; end ;
31547: GO 31385
31549: POP
31550: POP
// end ;
31551: LD_VAR 0 4
31555: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
31556: LD_INT 0
31558: PPUSH
31559: PPUSH
31560: PPUSH
31561: PPUSH
31562: PPUSH
31563: PPUSH
31564: PPUSH
31565: PPUSH
31566: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
31567: LD_VAR 0 1
31571: PPUSH
31572: CALL_OW 264
31576: PUSH
31577: LD_INT 81
31579: EQUAL
31580: NOT
31581: PUSH
31582: LD_VAR 0 1
31586: PUSH
31587: LD_EXP 90
31591: IN
31592: NOT
31593: OR
31594: IFFALSE 31598
// exit ;
31596: GO 31920
// index := GetElementIndex ( minersList , unit ) ;
31598: LD_ADDR_VAR 0 6
31602: PUSH
31603: LD_EXP 90
31607: PPUSH
31608: LD_VAR 0 1
31612: PPUSH
31613: CALL 37092 0 2
31617: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
31618: LD_ADDR_VAR 0 8
31622: PUSH
31623: LD_EXP 92
31627: PUSH
31628: LD_EXP 91
31632: PUSH
31633: LD_VAR 0 6
31637: ARRAY
31638: MINUS
31639: ST_TO_ADDR
// if not minesFreeAmount then
31640: LD_VAR 0 8
31644: NOT
31645: IFFALSE 31649
// exit ;
31647: GO 31920
// tmp := [ ] ;
31649: LD_ADDR_VAR 0 7
31653: PUSH
31654: EMPTY
31655: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
31656: LD_ADDR_VAR 0 5
31660: PUSH
31661: DOUBLE
31662: LD_INT 1
31664: DEC
31665: ST_TO_ADDR
31666: LD_VAR 0 8
31670: PUSH
31671: FOR_TO
31672: IFFALSE 31867
// begin _d := rand ( 0 , 5 ) ;
31674: LD_ADDR_VAR 0 11
31678: PUSH
31679: LD_INT 0
31681: PPUSH
31682: LD_INT 5
31684: PPUSH
31685: CALL_OW 12
31689: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
31690: LD_ADDR_VAR 0 12
31694: PUSH
31695: LD_INT 2
31697: PPUSH
31698: LD_INT 6
31700: PPUSH
31701: CALL_OW 12
31705: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
31706: LD_ADDR_VAR 0 9
31710: PUSH
31711: LD_VAR 0 2
31715: PPUSH
31716: LD_VAR 0 11
31720: PPUSH
31721: LD_VAR 0 12
31725: PPUSH
31726: CALL_OW 272
31730: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
31731: LD_ADDR_VAR 0 10
31735: PUSH
31736: LD_VAR 0 3
31740: PPUSH
31741: LD_VAR 0 11
31745: PPUSH
31746: LD_VAR 0 12
31750: PPUSH
31751: CALL_OW 273
31755: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
31756: LD_VAR 0 9
31760: PPUSH
31761: LD_VAR 0 10
31765: PPUSH
31766: CALL_OW 488
31770: PUSH
31771: LD_VAR 0 9
31775: PUSH
31776: LD_VAR 0 10
31780: PUSH
31781: EMPTY
31782: LIST
31783: LIST
31784: PUSH
31785: LD_VAR 0 7
31789: IN
31790: NOT
31791: AND
31792: PUSH
31793: LD_VAR 0 9
31797: PPUSH
31798: LD_VAR 0 10
31802: PPUSH
31803: CALL_OW 458
31807: NOT
31808: AND
31809: IFFALSE 31851
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
31811: LD_ADDR_VAR 0 7
31815: PUSH
31816: LD_VAR 0 7
31820: PPUSH
31821: LD_VAR 0 7
31825: PUSH
31826: LD_INT 1
31828: PLUS
31829: PPUSH
31830: LD_VAR 0 9
31834: PUSH
31835: LD_VAR 0 10
31839: PUSH
31840: EMPTY
31841: LIST
31842: LIST
31843: PPUSH
31844: CALL_OW 1
31848: ST_TO_ADDR
31849: GO 31865
// i := i - 1 ;
31851: LD_ADDR_VAR 0 5
31855: PUSH
31856: LD_VAR 0 5
31860: PUSH
31861: LD_INT 1
31863: MINUS
31864: ST_TO_ADDR
// end ;
31865: GO 31671
31867: POP
31868: POP
// for i in tmp do
31869: LD_ADDR_VAR 0 5
31873: PUSH
31874: LD_VAR 0 7
31878: PUSH
31879: FOR_IN
31880: IFFALSE 31918
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
31882: LD_VAR 0 1
31886: PPUSH
31887: LD_VAR 0 5
31891: PUSH
31892: LD_INT 1
31894: ARRAY
31895: PPUSH
31896: LD_VAR 0 5
31900: PUSH
31901: LD_INT 2
31903: ARRAY
31904: PPUSH
31905: CALL 30864 0 3
31909: NOT
31910: IFFALSE 31916
// exit ;
31912: POP
31913: POP
31914: GO 31920
31916: GO 31879
31918: POP
31919: POP
// end ;
31920: LD_VAR 0 4
31924: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
31925: LD_INT 0
31927: PPUSH
31928: PPUSH
31929: PPUSH
31930: PPUSH
31931: PPUSH
31932: PPUSH
31933: PPUSH
// if not GetClass ( unit ) = class_sniper then
31934: LD_VAR 0 1
31938: PPUSH
31939: CALL_OW 257
31943: PUSH
31944: LD_INT 5
31946: EQUAL
31947: NOT
31948: IFFALSE 31952
// exit ;
31950: GO 32340
// dist := 8 ;
31952: LD_ADDR_VAR 0 5
31956: PUSH
31957: LD_INT 8
31959: ST_TO_ADDR
// viewRange := 12 ;
31960: LD_ADDR_VAR 0 7
31964: PUSH
31965: LD_INT 12
31967: ST_TO_ADDR
// side := GetSide ( unit ) ;
31968: LD_ADDR_VAR 0 6
31972: PUSH
31973: LD_VAR 0 1
31977: PPUSH
31978: CALL_OW 255
31982: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
31983: LD_INT 61
31985: PPUSH
31986: LD_VAR 0 6
31990: PPUSH
31991: CALL_OW 321
31995: PUSH
31996: LD_INT 2
31998: EQUAL
31999: IFFALSE 32009
// viewRange := 16 ;
32001: LD_ADDR_VAR 0 7
32005: PUSH
32006: LD_INT 16
32008: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
32009: LD_VAR 0 1
32013: PPUSH
32014: LD_VAR 0 2
32018: PPUSH
32019: LD_VAR 0 3
32023: PPUSH
32024: CALL_OW 297
32028: PUSH
32029: LD_VAR 0 5
32033: GREATER
32034: IFFALSE 32113
// begin ComMoveXY ( unit , x , y ) ;
32036: LD_VAR 0 1
32040: PPUSH
32041: LD_VAR 0 2
32045: PPUSH
32046: LD_VAR 0 3
32050: PPUSH
32051: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32055: LD_INT 35
32057: PPUSH
32058: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
32062: LD_VAR 0 1
32066: PPUSH
32067: LD_VAR 0 2
32071: PPUSH
32072: LD_VAR 0 3
32076: PPUSH
32077: CALL 68476 0 3
32081: NOT
32082: IFFALSE 32086
// exit ;
32084: GO 32340
// until GetDistUnitXY ( unit , x , y ) < dist ;
32086: LD_VAR 0 1
32090: PPUSH
32091: LD_VAR 0 2
32095: PPUSH
32096: LD_VAR 0 3
32100: PPUSH
32101: CALL_OW 297
32105: PUSH
32106: LD_VAR 0 5
32110: LESS
32111: IFFALSE 32055
// end ; ComTurnXY ( unit , x , y ) ;
32113: LD_VAR 0 1
32117: PPUSH
32118: LD_VAR 0 2
32122: PPUSH
32123: LD_VAR 0 3
32127: PPUSH
32128: CALL_OW 118
// wait ( 5 ) ;
32132: LD_INT 5
32134: PPUSH
32135: CALL_OW 67
// _d := GetDir ( unit ) ;
32139: LD_ADDR_VAR 0 10
32143: PUSH
32144: LD_VAR 0 1
32148: PPUSH
32149: CALL_OW 254
32153: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
32154: LD_ADDR_VAR 0 8
32158: PUSH
32159: LD_VAR 0 1
32163: PPUSH
32164: CALL_OW 250
32168: PPUSH
32169: LD_VAR 0 10
32173: PPUSH
32174: LD_VAR 0 5
32178: PPUSH
32179: CALL_OW 272
32183: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
32184: LD_ADDR_VAR 0 9
32188: PUSH
32189: LD_VAR 0 1
32193: PPUSH
32194: CALL_OW 251
32198: PPUSH
32199: LD_VAR 0 10
32203: PPUSH
32204: LD_VAR 0 5
32208: PPUSH
32209: CALL_OW 273
32213: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32214: LD_VAR 0 8
32218: PPUSH
32219: LD_VAR 0 9
32223: PPUSH
32224: CALL_OW 488
32228: NOT
32229: IFFALSE 32233
// exit ;
32231: GO 32340
// ComAnimCustom ( unit , 1 ) ;
32233: LD_VAR 0 1
32237: PPUSH
32238: LD_INT 1
32240: PPUSH
32241: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
32245: LD_VAR 0 8
32249: PPUSH
32250: LD_VAR 0 9
32254: PPUSH
32255: LD_VAR 0 6
32259: PPUSH
32260: LD_VAR 0 7
32264: PPUSH
32265: CALL_OW 330
// repeat wait ( 1 ) ;
32269: LD_INT 1
32271: PPUSH
32272: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
32276: LD_VAR 0 1
32280: PPUSH
32281: CALL_OW 316
32285: PUSH
32286: LD_VAR 0 1
32290: PPUSH
32291: CALL_OW 314
32295: OR
32296: PUSH
32297: LD_VAR 0 1
32301: PPUSH
32302: CALL_OW 302
32306: NOT
32307: OR
32308: PUSH
32309: LD_VAR 0 1
32313: PPUSH
32314: CALL_OW 301
32318: OR
32319: IFFALSE 32269
// RemoveSeeing ( _x , _y , side ) ;
32321: LD_VAR 0 8
32325: PPUSH
32326: LD_VAR 0 9
32330: PPUSH
32331: LD_VAR 0 6
32335: PPUSH
32336: CALL_OW 331
// end ; end_of_file
32340: LD_VAR 0 4
32344: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
32345: LD_INT 0
32347: PPUSH
32348: PPUSH
// if exist_mode then
32349: LD_VAR 0 2
32353: IFFALSE 32378
// unit := CreateCharacter ( prefix & ident ) else
32355: LD_ADDR_VAR 0 5
32359: PUSH
32360: LD_VAR 0 3
32364: PUSH
32365: LD_VAR 0 1
32369: STR
32370: PPUSH
32371: CALL_OW 34
32375: ST_TO_ADDR
32376: GO 32393
// unit := NewCharacter ( ident ) ;
32378: LD_ADDR_VAR 0 5
32382: PUSH
32383: LD_VAR 0 1
32387: PPUSH
32388: CALL_OW 25
32392: ST_TO_ADDR
// result := unit ;
32393: LD_ADDR_VAR 0 4
32397: PUSH
32398: LD_VAR 0 5
32402: ST_TO_ADDR
// end ;
32403: LD_VAR 0 4
32407: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
32408: LD_INT 0
32410: PPUSH
32411: PPUSH
// if not side or not nation then
32412: LD_VAR 0 1
32416: NOT
32417: PUSH
32418: LD_VAR 0 2
32422: NOT
32423: OR
32424: IFFALSE 32428
// exit ;
32426: GO 33196
// case nation of nation_american :
32428: LD_VAR 0 2
32432: PUSH
32433: LD_INT 1
32435: DOUBLE
32436: EQUAL
32437: IFTRUE 32441
32439: GO 32655
32441: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
32442: LD_ADDR_VAR 0 4
32446: PUSH
32447: LD_INT 35
32449: PUSH
32450: LD_INT 45
32452: PUSH
32453: LD_INT 46
32455: PUSH
32456: LD_INT 47
32458: PUSH
32459: LD_INT 82
32461: PUSH
32462: LD_INT 83
32464: PUSH
32465: LD_INT 84
32467: PUSH
32468: LD_INT 85
32470: PUSH
32471: LD_INT 86
32473: PUSH
32474: LD_INT 1
32476: PUSH
32477: LD_INT 2
32479: PUSH
32480: LD_INT 6
32482: PUSH
32483: LD_INT 15
32485: PUSH
32486: LD_INT 16
32488: PUSH
32489: LD_INT 7
32491: PUSH
32492: LD_INT 12
32494: PUSH
32495: LD_INT 13
32497: PUSH
32498: LD_INT 10
32500: PUSH
32501: LD_INT 14
32503: PUSH
32504: LD_INT 20
32506: PUSH
32507: LD_INT 21
32509: PUSH
32510: LD_INT 22
32512: PUSH
32513: LD_INT 25
32515: PUSH
32516: LD_INT 32
32518: PUSH
32519: LD_INT 27
32521: PUSH
32522: LD_INT 36
32524: PUSH
32525: LD_INT 69
32527: PUSH
32528: LD_INT 39
32530: PUSH
32531: LD_INT 34
32533: PUSH
32534: LD_INT 40
32536: PUSH
32537: LD_INT 48
32539: PUSH
32540: LD_INT 49
32542: PUSH
32543: LD_INT 50
32545: PUSH
32546: LD_INT 51
32548: PUSH
32549: LD_INT 52
32551: PUSH
32552: LD_INT 53
32554: PUSH
32555: LD_INT 54
32557: PUSH
32558: LD_INT 55
32560: PUSH
32561: LD_INT 56
32563: PUSH
32564: LD_INT 57
32566: PUSH
32567: LD_INT 58
32569: PUSH
32570: LD_INT 59
32572: PUSH
32573: LD_INT 60
32575: PUSH
32576: LD_INT 61
32578: PUSH
32579: LD_INT 62
32581: PUSH
32582: LD_INT 80
32584: PUSH
32585: LD_INT 82
32587: PUSH
32588: LD_INT 83
32590: PUSH
32591: LD_INT 84
32593: PUSH
32594: LD_INT 85
32596: PUSH
32597: LD_INT 86
32599: PUSH
32600: EMPTY
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: LIST
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: LIST
32622: LIST
32623: LIST
32624: LIST
32625: LIST
32626: LIST
32627: LIST
32628: LIST
32629: LIST
32630: LIST
32631: LIST
32632: LIST
32633: LIST
32634: LIST
32635: LIST
32636: LIST
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: LIST
32648: LIST
32649: LIST
32650: LIST
32651: LIST
32652: ST_TO_ADDR
32653: GO 33120
32655: LD_INT 2
32657: DOUBLE
32658: EQUAL
32659: IFTRUE 32663
32661: GO 32889
32663: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
32664: LD_ADDR_VAR 0 4
32668: PUSH
32669: LD_INT 35
32671: PUSH
32672: LD_INT 45
32674: PUSH
32675: LD_INT 46
32677: PUSH
32678: LD_INT 47
32680: PUSH
32681: LD_INT 82
32683: PUSH
32684: LD_INT 83
32686: PUSH
32687: LD_INT 84
32689: PUSH
32690: LD_INT 85
32692: PUSH
32693: LD_INT 87
32695: PUSH
32696: LD_INT 70
32698: PUSH
32699: LD_INT 1
32701: PUSH
32702: LD_INT 11
32704: PUSH
32705: LD_INT 3
32707: PUSH
32708: LD_INT 4
32710: PUSH
32711: LD_INT 5
32713: PUSH
32714: LD_INT 6
32716: PUSH
32717: LD_INT 15
32719: PUSH
32720: LD_INT 18
32722: PUSH
32723: LD_INT 7
32725: PUSH
32726: LD_INT 17
32728: PUSH
32729: LD_INT 8
32731: PUSH
32732: LD_INT 20
32734: PUSH
32735: LD_INT 21
32737: PUSH
32738: LD_INT 22
32740: PUSH
32741: LD_INT 72
32743: PUSH
32744: LD_INT 26
32746: PUSH
32747: LD_INT 69
32749: PUSH
32750: LD_INT 39
32752: PUSH
32753: LD_INT 40
32755: PUSH
32756: LD_INT 41
32758: PUSH
32759: LD_INT 42
32761: PUSH
32762: LD_INT 43
32764: PUSH
32765: LD_INT 48
32767: PUSH
32768: LD_INT 49
32770: PUSH
32771: LD_INT 50
32773: PUSH
32774: LD_INT 51
32776: PUSH
32777: LD_INT 52
32779: PUSH
32780: LD_INT 53
32782: PUSH
32783: LD_INT 54
32785: PUSH
32786: LD_INT 55
32788: PUSH
32789: LD_INT 56
32791: PUSH
32792: LD_INT 60
32794: PUSH
32795: LD_INT 61
32797: PUSH
32798: LD_INT 62
32800: PUSH
32801: LD_INT 66
32803: PUSH
32804: LD_INT 67
32806: PUSH
32807: LD_INT 68
32809: PUSH
32810: LD_INT 81
32812: PUSH
32813: LD_INT 82
32815: PUSH
32816: LD_INT 83
32818: PUSH
32819: LD_INT 84
32821: PUSH
32822: LD_INT 85
32824: PUSH
32825: LD_INT 87
32827: PUSH
32828: LD_INT 88
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: LIST
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: LIST
32845: LIST
32846: LIST
32847: LIST
32848: LIST
32849: LIST
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: LIST
32855: LIST
32856: LIST
32857: LIST
32858: LIST
32859: LIST
32860: LIST
32861: LIST
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: LIST
32886: ST_TO_ADDR
32887: GO 33120
32889: LD_INT 3
32891: DOUBLE
32892: EQUAL
32893: IFTRUE 32897
32895: GO 33119
32897: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
32898: LD_ADDR_VAR 0 4
32902: PUSH
32903: LD_INT 46
32905: PUSH
32906: LD_INT 47
32908: PUSH
32909: LD_INT 1
32911: PUSH
32912: LD_INT 2
32914: PUSH
32915: LD_INT 82
32917: PUSH
32918: LD_INT 83
32920: PUSH
32921: LD_INT 84
32923: PUSH
32924: LD_INT 85
32926: PUSH
32927: LD_INT 86
32929: PUSH
32930: LD_INT 11
32932: PUSH
32933: LD_INT 9
32935: PUSH
32936: LD_INT 20
32938: PUSH
32939: LD_INT 19
32941: PUSH
32942: LD_INT 21
32944: PUSH
32945: LD_INT 24
32947: PUSH
32948: LD_INT 22
32950: PUSH
32951: LD_INT 25
32953: PUSH
32954: LD_INT 28
32956: PUSH
32957: LD_INT 29
32959: PUSH
32960: LD_INT 30
32962: PUSH
32963: LD_INT 31
32965: PUSH
32966: LD_INT 37
32968: PUSH
32969: LD_INT 38
32971: PUSH
32972: LD_INT 32
32974: PUSH
32975: LD_INT 27
32977: PUSH
32978: LD_INT 33
32980: PUSH
32981: LD_INT 69
32983: PUSH
32984: LD_INT 39
32986: PUSH
32987: LD_INT 34
32989: PUSH
32990: LD_INT 40
32992: PUSH
32993: LD_INT 71
32995: PUSH
32996: LD_INT 23
32998: PUSH
32999: LD_INT 44
33001: PUSH
33002: LD_INT 48
33004: PUSH
33005: LD_INT 49
33007: PUSH
33008: LD_INT 50
33010: PUSH
33011: LD_INT 51
33013: PUSH
33014: LD_INT 52
33016: PUSH
33017: LD_INT 53
33019: PUSH
33020: LD_INT 54
33022: PUSH
33023: LD_INT 55
33025: PUSH
33026: LD_INT 56
33028: PUSH
33029: LD_INT 57
33031: PUSH
33032: LD_INT 58
33034: PUSH
33035: LD_INT 59
33037: PUSH
33038: LD_INT 63
33040: PUSH
33041: LD_INT 64
33043: PUSH
33044: LD_INT 65
33046: PUSH
33047: LD_INT 82
33049: PUSH
33050: LD_INT 83
33052: PUSH
33053: LD_INT 84
33055: PUSH
33056: LD_INT 85
33058: PUSH
33059: LD_INT 86
33061: PUSH
33062: EMPTY
33063: LIST
33064: LIST
33065: LIST
33066: LIST
33067: LIST
33068: LIST
33069: LIST
33070: LIST
33071: LIST
33072: LIST
33073: LIST
33074: LIST
33075: LIST
33076: LIST
33077: LIST
33078: LIST
33079: LIST
33080: LIST
33081: LIST
33082: LIST
33083: LIST
33084: LIST
33085: LIST
33086: LIST
33087: LIST
33088: LIST
33089: LIST
33090: LIST
33091: LIST
33092: LIST
33093: LIST
33094: LIST
33095: LIST
33096: LIST
33097: LIST
33098: LIST
33099: LIST
33100: LIST
33101: LIST
33102: LIST
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: LIST
33116: ST_TO_ADDR
33117: GO 33120
33119: POP
// if state > - 1 and state < 3 then
33120: LD_VAR 0 3
33124: PUSH
33125: LD_INT 1
33127: NEG
33128: GREATER
33129: PUSH
33130: LD_VAR 0 3
33134: PUSH
33135: LD_INT 3
33137: LESS
33138: AND
33139: IFFALSE 33196
// for i in result do
33141: LD_ADDR_VAR 0 5
33145: PUSH
33146: LD_VAR 0 4
33150: PUSH
33151: FOR_IN
33152: IFFALSE 33194
// if GetTech ( i , side ) <> state then
33154: LD_VAR 0 5
33158: PPUSH
33159: LD_VAR 0 1
33163: PPUSH
33164: CALL_OW 321
33168: PUSH
33169: LD_VAR 0 3
33173: NONEQUAL
33174: IFFALSE 33192
// result := result diff i ;
33176: LD_ADDR_VAR 0 4
33180: PUSH
33181: LD_VAR 0 4
33185: PUSH
33186: LD_VAR 0 5
33190: DIFF
33191: ST_TO_ADDR
33192: GO 33151
33194: POP
33195: POP
// end ;
33196: LD_VAR 0 4
33200: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
33201: LD_INT 0
33203: PPUSH
33204: PPUSH
33205: PPUSH
// result := true ;
33206: LD_ADDR_VAR 0 3
33210: PUSH
33211: LD_INT 1
33213: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
33214: LD_ADDR_VAR 0 5
33218: PUSH
33219: LD_VAR 0 2
33223: PPUSH
33224: CALL_OW 480
33228: ST_TO_ADDR
// if not tmp then
33229: LD_VAR 0 5
33233: NOT
33234: IFFALSE 33238
// exit ;
33236: GO 33287
// for i in tmp do
33238: LD_ADDR_VAR 0 4
33242: PUSH
33243: LD_VAR 0 5
33247: PUSH
33248: FOR_IN
33249: IFFALSE 33285
// if GetTech ( i , side ) <> state_researched then
33251: LD_VAR 0 4
33255: PPUSH
33256: LD_VAR 0 1
33260: PPUSH
33261: CALL_OW 321
33265: PUSH
33266: LD_INT 2
33268: NONEQUAL
33269: IFFALSE 33283
// begin result := false ;
33271: LD_ADDR_VAR 0 3
33275: PUSH
33276: LD_INT 0
33278: ST_TO_ADDR
// exit ;
33279: POP
33280: POP
33281: GO 33287
// end ;
33283: GO 33248
33285: POP
33286: POP
// end ;
33287: LD_VAR 0 3
33291: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
33292: LD_INT 0
33294: PPUSH
33295: PPUSH
33296: PPUSH
33297: PPUSH
33298: PPUSH
33299: PPUSH
33300: PPUSH
33301: PPUSH
33302: PPUSH
33303: PPUSH
33304: PPUSH
33305: PPUSH
33306: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
33307: LD_VAR 0 1
33311: NOT
33312: PUSH
33313: LD_VAR 0 1
33317: PPUSH
33318: CALL_OW 257
33322: PUSH
33323: LD_INT 9
33325: NONEQUAL
33326: OR
33327: IFFALSE 33331
// exit ;
33329: GO 33904
// side := GetSide ( unit ) ;
33331: LD_ADDR_VAR 0 9
33335: PUSH
33336: LD_VAR 0 1
33340: PPUSH
33341: CALL_OW 255
33345: ST_TO_ADDR
// tech_space := tech_spacanom ;
33346: LD_ADDR_VAR 0 12
33350: PUSH
33351: LD_INT 29
33353: ST_TO_ADDR
// tech_time := tech_taurad ;
33354: LD_ADDR_VAR 0 13
33358: PUSH
33359: LD_INT 28
33361: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
33362: LD_ADDR_VAR 0 11
33366: PUSH
33367: LD_VAR 0 1
33371: PPUSH
33372: CALL_OW 310
33376: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
33377: LD_VAR 0 11
33381: PPUSH
33382: CALL_OW 247
33386: PUSH
33387: LD_INT 2
33389: EQUAL
33390: IFFALSE 33394
// exit ;
33392: GO 33904
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33394: LD_ADDR_VAR 0 8
33398: PUSH
33399: LD_INT 81
33401: PUSH
33402: LD_VAR 0 9
33406: PUSH
33407: EMPTY
33408: LIST
33409: LIST
33410: PUSH
33411: LD_INT 3
33413: PUSH
33414: LD_INT 21
33416: PUSH
33417: LD_INT 3
33419: PUSH
33420: EMPTY
33421: LIST
33422: LIST
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: PUSH
33428: EMPTY
33429: LIST
33430: LIST
33431: PPUSH
33432: CALL_OW 69
33436: ST_TO_ADDR
// if not tmp then
33437: LD_VAR 0 8
33441: NOT
33442: IFFALSE 33446
// exit ;
33444: GO 33904
// if in_unit then
33446: LD_VAR 0 11
33450: IFFALSE 33474
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
33452: LD_ADDR_VAR 0 10
33456: PUSH
33457: LD_VAR 0 8
33461: PPUSH
33462: LD_VAR 0 11
33466: PPUSH
33467: CALL_OW 74
33471: ST_TO_ADDR
33472: GO 33494
// enemy := NearestUnitToUnit ( tmp , unit ) ;
33474: LD_ADDR_VAR 0 10
33478: PUSH
33479: LD_VAR 0 8
33483: PPUSH
33484: LD_VAR 0 1
33488: PPUSH
33489: CALL_OW 74
33493: ST_TO_ADDR
// if not enemy then
33494: LD_VAR 0 10
33498: NOT
33499: IFFALSE 33503
// exit ;
33501: GO 33904
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
33503: LD_VAR 0 11
33507: PUSH
33508: LD_VAR 0 11
33512: PPUSH
33513: LD_VAR 0 10
33517: PPUSH
33518: CALL_OW 296
33522: PUSH
33523: LD_INT 13
33525: GREATER
33526: AND
33527: PUSH
33528: LD_VAR 0 1
33532: PPUSH
33533: LD_VAR 0 10
33537: PPUSH
33538: CALL_OW 296
33542: PUSH
33543: LD_INT 12
33545: GREATER
33546: OR
33547: IFFALSE 33551
// exit ;
33549: GO 33904
// missile := [ 1 ] ;
33551: LD_ADDR_VAR 0 14
33555: PUSH
33556: LD_INT 1
33558: PUSH
33559: EMPTY
33560: LIST
33561: ST_TO_ADDR
// if Researched ( side , tech_space ) then
33562: LD_VAR 0 9
33566: PPUSH
33567: LD_VAR 0 12
33571: PPUSH
33572: CALL_OW 325
33576: IFFALSE 33605
// missile := Replace ( missile , missile + 1 , 2 ) ;
33578: LD_ADDR_VAR 0 14
33582: PUSH
33583: LD_VAR 0 14
33587: PPUSH
33588: LD_VAR 0 14
33592: PUSH
33593: LD_INT 1
33595: PLUS
33596: PPUSH
33597: LD_INT 2
33599: PPUSH
33600: CALL_OW 1
33604: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
33605: LD_VAR 0 9
33609: PPUSH
33610: LD_VAR 0 13
33614: PPUSH
33615: CALL_OW 325
33619: PUSH
33620: LD_VAR 0 10
33624: PPUSH
33625: CALL_OW 255
33629: PPUSH
33630: LD_VAR 0 13
33634: PPUSH
33635: CALL_OW 325
33639: NOT
33640: AND
33641: IFFALSE 33670
// missile := Replace ( missile , missile + 1 , 3 ) ;
33643: LD_ADDR_VAR 0 14
33647: PUSH
33648: LD_VAR 0 14
33652: PPUSH
33653: LD_VAR 0 14
33657: PUSH
33658: LD_INT 1
33660: PLUS
33661: PPUSH
33662: LD_INT 3
33664: PPUSH
33665: CALL_OW 1
33669: ST_TO_ADDR
// if missile < 2 then
33670: LD_VAR 0 14
33674: PUSH
33675: LD_INT 2
33677: LESS
33678: IFFALSE 33682
// exit ;
33680: GO 33904
// x := GetX ( enemy ) ;
33682: LD_ADDR_VAR 0 4
33686: PUSH
33687: LD_VAR 0 10
33691: PPUSH
33692: CALL_OW 250
33696: ST_TO_ADDR
// y := GetY ( enemy ) ;
33697: LD_ADDR_VAR 0 5
33701: PUSH
33702: LD_VAR 0 10
33706: PPUSH
33707: CALL_OW 251
33711: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
33712: LD_ADDR_VAR 0 6
33716: PUSH
33717: LD_VAR 0 4
33721: PUSH
33722: LD_INT 1
33724: NEG
33725: PPUSH
33726: LD_INT 1
33728: PPUSH
33729: CALL_OW 12
33733: PLUS
33734: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
33735: LD_ADDR_VAR 0 7
33739: PUSH
33740: LD_VAR 0 5
33744: PUSH
33745: LD_INT 1
33747: NEG
33748: PPUSH
33749: LD_INT 1
33751: PPUSH
33752: CALL_OW 12
33756: PLUS
33757: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33758: LD_VAR 0 6
33762: PPUSH
33763: LD_VAR 0 7
33767: PPUSH
33768: CALL_OW 488
33772: NOT
33773: IFFALSE 33795
// begin _x := x ;
33775: LD_ADDR_VAR 0 6
33779: PUSH
33780: LD_VAR 0 4
33784: ST_TO_ADDR
// _y := y ;
33785: LD_ADDR_VAR 0 7
33789: PUSH
33790: LD_VAR 0 5
33794: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
33795: LD_ADDR_VAR 0 3
33799: PUSH
33800: LD_INT 1
33802: PPUSH
33803: LD_VAR 0 14
33807: PPUSH
33808: CALL_OW 12
33812: ST_TO_ADDR
// case i of 1 :
33813: LD_VAR 0 3
33817: PUSH
33818: LD_INT 1
33820: DOUBLE
33821: EQUAL
33822: IFTRUE 33826
33824: GO 33843
33826: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
33827: LD_VAR 0 1
33831: PPUSH
33832: LD_VAR 0 10
33836: PPUSH
33837: CALL_OW 115
33841: GO 33904
33843: LD_INT 2
33845: DOUBLE
33846: EQUAL
33847: IFTRUE 33851
33849: GO 33873
33851: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
33852: LD_VAR 0 1
33856: PPUSH
33857: LD_VAR 0 6
33861: PPUSH
33862: LD_VAR 0 7
33866: PPUSH
33867: CALL_OW 153
33871: GO 33904
33873: LD_INT 3
33875: DOUBLE
33876: EQUAL
33877: IFTRUE 33881
33879: GO 33903
33881: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
33882: LD_VAR 0 1
33886: PPUSH
33887: LD_VAR 0 6
33891: PPUSH
33892: LD_VAR 0 7
33896: PPUSH
33897: CALL_OW 154
33901: GO 33904
33903: POP
// end ;
33904: LD_VAR 0 2
33908: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
33909: LD_INT 0
33911: PPUSH
33912: PPUSH
33913: PPUSH
33914: PPUSH
33915: PPUSH
33916: PPUSH
// if not unit or not building then
33917: LD_VAR 0 1
33921: NOT
33922: PUSH
33923: LD_VAR 0 2
33927: NOT
33928: OR
33929: IFFALSE 33933
// exit ;
33931: GO 34091
// x := GetX ( building ) ;
33933: LD_ADDR_VAR 0 5
33937: PUSH
33938: LD_VAR 0 2
33942: PPUSH
33943: CALL_OW 250
33947: ST_TO_ADDR
// y := GetY ( building ) ;
33948: LD_ADDR_VAR 0 6
33952: PUSH
33953: LD_VAR 0 2
33957: PPUSH
33958: CALL_OW 251
33962: ST_TO_ADDR
// for i = 0 to 5 do
33963: LD_ADDR_VAR 0 4
33967: PUSH
33968: DOUBLE
33969: LD_INT 0
33971: DEC
33972: ST_TO_ADDR
33973: LD_INT 5
33975: PUSH
33976: FOR_TO
33977: IFFALSE 34089
// begin _x := ShiftX ( x , i , 3 ) ;
33979: LD_ADDR_VAR 0 7
33983: PUSH
33984: LD_VAR 0 5
33988: PPUSH
33989: LD_VAR 0 4
33993: PPUSH
33994: LD_INT 3
33996: PPUSH
33997: CALL_OW 272
34001: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
34002: LD_ADDR_VAR 0 8
34006: PUSH
34007: LD_VAR 0 6
34011: PPUSH
34012: LD_VAR 0 4
34016: PPUSH
34017: LD_INT 3
34019: PPUSH
34020: CALL_OW 273
34024: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34025: LD_VAR 0 7
34029: PPUSH
34030: LD_VAR 0 8
34034: PPUSH
34035: CALL_OW 488
34039: NOT
34040: IFFALSE 34044
// continue ;
34042: GO 33976
// if HexInfo ( _x , _y ) = 0 then
34044: LD_VAR 0 7
34048: PPUSH
34049: LD_VAR 0 8
34053: PPUSH
34054: CALL_OW 428
34058: PUSH
34059: LD_INT 0
34061: EQUAL
34062: IFFALSE 34087
// begin ComMoveXY ( unit , _x , _y ) ;
34064: LD_VAR 0 1
34068: PPUSH
34069: LD_VAR 0 7
34073: PPUSH
34074: LD_VAR 0 8
34078: PPUSH
34079: CALL_OW 111
// exit ;
34083: POP
34084: POP
34085: GO 34091
// end ; end ;
34087: GO 33976
34089: POP
34090: POP
// end ;
34091: LD_VAR 0 3
34095: RET
// export function ScanBase ( side , base_area ) ; begin
34096: LD_INT 0
34098: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
34099: LD_ADDR_VAR 0 3
34103: PUSH
34104: LD_VAR 0 2
34108: PPUSH
34109: LD_INT 81
34111: PUSH
34112: LD_VAR 0 1
34116: PUSH
34117: EMPTY
34118: LIST
34119: LIST
34120: PPUSH
34121: CALL_OW 70
34125: ST_TO_ADDR
// end ;
34126: LD_VAR 0 3
34130: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
34131: LD_INT 0
34133: PPUSH
34134: PPUSH
34135: PPUSH
34136: PPUSH
// result := false ;
34137: LD_ADDR_VAR 0 2
34141: PUSH
34142: LD_INT 0
34144: ST_TO_ADDR
// side := GetSide ( unit ) ;
34145: LD_ADDR_VAR 0 3
34149: PUSH
34150: LD_VAR 0 1
34154: PPUSH
34155: CALL_OW 255
34159: ST_TO_ADDR
// nat := GetNation ( unit ) ;
34160: LD_ADDR_VAR 0 4
34164: PUSH
34165: LD_VAR 0 1
34169: PPUSH
34170: CALL_OW 248
34174: ST_TO_ADDR
// case nat of 1 :
34175: LD_VAR 0 4
34179: PUSH
34180: LD_INT 1
34182: DOUBLE
34183: EQUAL
34184: IFTRUE 34188
34186: GO 34199
34188: POP
// tech := tech_lassight ; 2 :
34189: LD_ADDR_VAR 0 5
34193: PUSH
34194: LD_INT 12
34196: ST_TO_ADDR
34197: GO 34238
34199: LD_INT 2
34201: DOUBLE
34202: EQUAL
34203: IFTRUE 34207
34205: GO 34218
34207: POP
// tech := tech_mortar ; 3 :
34208: LD_ADDR_VAR 0 5
34212: PUSH
34213: LD_INT 41
34215: ST_TO_ADDR
34216: GO 34238
34218: LD_INT 3
34220: DOUBLE
34221: EQUAL
34222: IFTRUE 34226
34224: GO 34237
34226: POP
// tech := tech_bazooka ; end ;
34227: LD_ADDR_VAR 0 5
34231: PUSH
34232: LD_INT 44
34234: ST_TO_ADDR
34235: GO 34238
34237: POP
// if Researched ( side , tech ) then
34238: LD_VAR 0 3
34242: PPUSH
34243: LD_VAR 0 5
34247: PPUSH
34248: CALL_OW 325
34252: IFFALSE 34279
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
34254: LD_ADDR_VAR 0 2
34258: PUSH
34259: LD_INT 5
34261: PUSH
34262: LD_INT 8
34264: PUSH
34265: LD_INT 9
34267: PUSH
34268: EMPTY
34269: LIST
34270: LIST
34271: LIST
34272: PUSH
34273: LD_VAR 0 4
34277: ARRAY
34278: ST_TO_ADDR
// end ;
34279: LD_VAR 0 2
34283: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
34284: LD_INT 0
34286: PPUSH
34287: PPUSH
34288: PPUSH
// if not mines then
34289: LD_VAR 0 2
34293: NOT
34294: IFFALSE 34298
// exit ;
34296: GO 34442
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34298: LD_ADDR_VAR 0 5
34302: PUSH
34303: LD_INT 81
34305: PUSH
34306: LD_VAR 0 1
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: PUSH
34315: LD_INT 3
34317: PUSH
34318: LD_INT 21
34320: PUSH
34321: LD_INT 3
34323: PUSH
34324: EMPTY
34325: LIST
34326: LIST
34327: PUSH
34328: EMPTY
34329: LIST
34330: LIST
34331: PUSH
34332: EMPTY
34333: LIST
34334: LIST
34335: PPUSH
34336: CALL_OW 69
34340: ST_TO_ADDR
// for i in mines do
34341: LD_ADDR_VAR 0 4
34345: PUSH
34346: LD_VAR 0 2
34350: PUSH
34351: FOR_IN
34352: IFFALSE 34440
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
34354: LD_VAR 0 4
34358: PUSH
34359: LD_INT 1
34361: ARRAY
34362: PPUSH
34363: LD_VAR 0 4
34367: PUSH
34368: LD_INT 2
34370: ARRAY
34371: PPUSH
34372: CALL_OW 458
34376: NOT
34377: IFFALSE 34381
// continue ;
34379: GO 34351
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
34381: LD_VAR 0 4
34385: PUSH
34386: LD_INT 1
34388: ARRAY
34389: PPUSH
34390: LD_VAR 0 4
34394: PUSH
34395: LD_INT 2
34397: ARRAY
34398: PPUSH
34399: CALL_OW 428
34403: PUSH
34404: LD_VAR 0 5
34408: IN
34409: IFFALSE 34438
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
34411: LD_VAR 0 4
34415: PUSH
34416: LD_INT 1
34418: ARRAY
34419: PPUSH
34420: LD_VAR 0 4
34424: PUSH
34425: LD_INT 2
34427: ARRAY
34428: PPUSH
34429: LD_VAR 0 1
34433: PPUSH
34434: CALL_OW 456
// end ;
34438: GO 34351
34440: POP
34441: POP
// end ;
34442: LD_VAR 0 3
34446: RET
// export function Count ( array ) ; begin
34447: LD_INT 0
34449: PPUSH
// result := array + 0 ;
34450: LD_ADDR_VAR 0 2
34454: PUSH
34455: LD_VAR 0 1
34459: PUSH
34460: LD_INT 0
34462: PLUS
34463: ST_TO_ADDR
// end ;
34464: LD_VAR 0 2
34468: RET
// export function IsEmpty ( building ) ; begin
34469: LD_INT 0
34471: PPUSH
// if not building then
34472: LD_VAR 0 1
34476: NOT
34477: IFFALSE 34481
// exit ;
34479: GO 34524
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
34481: LD_ADDR_VAR 0 2
34485: PUSH
34486: LD_VAR 0 1
34490: PUSH
34491: LD_INT 22
34493: PUSH
34494: LD_VAR 0 1
34498: PPUSH
34499: CALL_OW 255
34503: PUSH
34504: EMPTY
34505: LIST
34506: LIST
34507: PUSH
34508: LD_INT 58
34510: PUSH
34511: EMPTY
34512: LIST
34513: PUSH
34514: EMPTY
34515: LIST
34516: LIST
34517: PPUSH
34518: CALL_OW 69
34522: IN
34523: ST_TO_ADDR
// end ;
34524: LD_VAR 0 2
34528: RET
// export function IsNotFull ( building ) ; var places ; begin
34529: LD_INT 0
34531: PPUSH
34532: PPUSH
// if not building then
34533: LD_VAR 0 1
34537: NOT
34538: IFFALSE 34542
// exit ;
34540: GO 34570
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
34542: LD_ADDR_VAR 0 2
34546: PUSH
34547: LD_VAR 0 1
34551: PPUSH
34552: LD_INT 3
34554: PUSH
34555: LD_INT 62
34557: PUSH
34558: EMPTY
34559: LIST
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: PPUSH
34565: CALL_OW 72
34569: ST_TO_ADDR
// end ;
34570: LD_VAR 0 2
34574: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
34575: LD_INT 0
34577: PPUSH
34578: PPUSH
34579: PPUSH
34580: PPUSH
// tmp := [ ] ;
34581: LD_ADDR_VAR 0 3
34585: PUSH
34586: EMPTY
34587: ST_TO_ADDR
// list := [ ] ;
34588: LD_ADDR_VAR 0 5
34592: PUSH
34593: EMPTY
34594: ST_TO_ADDR
// for i = 16 to 25 do
34595: LD_ADDR_VAR 0 4
34599: PUSH
34600: DOUBLE
34601: LD_INT 16
34603: DEC
34604: ST_TO_ADDR
34605: LD_INT 25
34607: PUSH
34608: FOR_TO
34609: IFFALSE 34682
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
34611: LD_ADDR_VAR 0 3
34615: PUSH
34616: LD_VAR 0 3
34620: PUSH
34621: LD_INT 22
34623: PUSH
34624: LD_VAR 0 1
34628: PPUSH
34629: CALL_OW 255
34633: PUSH
34634: EMPTY
34635: LIST
34636: LIST
34637: PUSH
34638: LD_INT 91
34640: PUSH
34641: LD_VAR 0 1
34645: PUSH
34646: LD_INT 6
34648: PUSH
34649: EMPTY
34650: LIST
34651: LIST
34652: LIST
34653: PUSH
34654: LD_INT 30
34656: PUSH
34657: LD_VAR 0 4
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: PUSH
34666: EMPTY
34667: LIST
34668: LIST
34669: LIST
34670: PUSH
34671: EMPTY
34672: LIST
34673: PPUSH
34674: CALL_OW 69
34678: ADD
34679: ST_TO_ADDR
34680: GO 34608
34682: POP
34683: POP
// for i = 1 to tmp do
34684: LD_ADDR_VAR 0 4
34688: PUSH
34689: DOUBLE
34690: LD_INT 1
34692: DEC
34693: ST_TO_ADDR
34694: LD_VAR 0 3
34698: PUSH
34699: FOR_TO
34700: IFFALSE 34788
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
34702: LD_ADDR_VAR 0 5
34706: PUSH
34707: LD_VAR 0 5
34711: PUSH
34712: LD_VAR 0 3
34716: PUSH
34717: LD_VAR 0 4
34721: ARRAY
34722: PPUSH
34723: CALL_OW 266
34727: PUSH
34728: LD_VAR 0 3
34732: PUSH
34733: LD_VAR 0 4
34737: ARRAY
34738: PPUSH
34739: CALL_OW 250
34743: PUSH
34744: LD_VAR 0 3
34748: PUSH
34749: LD_VAR 0 4
34753: ARRAY
34754: PPUSH
34755: CALL_OW 251
34759: PUSH
34760: LD_VAR 0 3
34764: PUSH
34765: LD_VAR 0 4
34769: ARRAY
34770: PPUSH
34771: CALL_OW 254
34775: PUSH
34776: EMPTY
34777: LIST
34778: LIST
34779: LIST
34780: LIST
34781: PUSH
34782: EMPTY
34783: LIST
34784: ADD
34785: ST_TO_ADDR
34786: GO 34699
34788: POP
34789: POP
// result := list ;
34790: LD_ADDR_VAR 0 2
34794: PUSH
34795: LD_VAR 0 5
34799: ST_TO_ADDR
// end ;
34800: LD_VAR 0 2
34804: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
34805: LD_INT 0
34807: PPUSH
34808: PPUSH
34809: PPUSH
34810: PPUSH
34811: PPUSH
34812: PPUSH
34813: PPUSH
// if not factory then
34814: LD_VAR 0 1
34818: NOT
34819: IFFALSE 34823
// exit ;
34821: GO 35416
// if control = control_apeman then
34823: LD_VAR 0 4
34827: PUSH
34828: LD_INT 5
34830: EQUAL
34831: IFFALSE 34940
// begin tmp := UnitsInside ( factory ) ;
34833: LD_ADDR_VAR 0 8
34837: PUSH
34838: LD_VAR 0 1
34842: PPUSH
34843: CALL_OW 313
34847: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
34848: LD_VAR 0 8
34852: PPUSH
34853: LD_INT 25
34855: PUSH
34856: LD_INT 12
34858: PUSH
34859: EMPTY
34860: LIST
34861: LIST
34862: PPUSH
34863: CALL_OW 72
34867: NOT
34868: IFFALSE 34878
// control := control_manual ;
34870: LD_ADDR_VAR 0 4
34874: PUSH
34875: LD_INT 1
34877: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
34878: LD_ADDR_VAR 0 8
34882: PUSH
34883: LD_VAR 0 1
34887: PPUSH
34888: CALL 34575 0 1
34892: ST_TO_ADDR
// if tmp then
34893: LD_VAR 0 8
34897: IFFALSE 34940
// begin for i in tmp do
34899: LD_ADDR_VAR 0 7
34903: PUSH
34904: LD_VAR 0 8
34908: PUSH
34909: FOR_IN
34910: IFFALSE 34938
// if i [ 1 ] = b_ext_radio then
34912: LD_VAR 0 7
34916: PUSH
34917: LD_INT 1
34919: ARRAY
34920: PUSH
34921: LD_INT 22
34923: EQUAL
34924: IFFALSE 34936
// begin control := control_remote ;
34926: LD_ADDR_VAR 0 4
34930: PUSH
34931: LD_INT 2
34933: ST_TO_ADDR
// break ;
34934: GO 34938
// end ;
34936: GO 34909
34938: POP
34939: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34940: LD_VAR 0 1
34944: PPUSH
34945: LD_VAR 0 2
34949: PPUSH
34950: LD_VAR 0 3
34954: PPUSH
34955: LD_VAR 0 4
34959: PPUSH
34960: LD_VAR 0 5
34964: PPUSH
34965: CALL_OW 448
34969: IFFALSE 35004
// begin result := [ chassis , engine , control , weapon ] ;
34971: LD_ADDR_VAR 0 6
34975: PUSH
34976: LD_VAR 0 2
34980: PUSH
34981: LD_VAR 0 3
34985: PUSH
34986: LD_VAR 0 4
34990: PUSH
34991: LD_VAR 0 5
34995: PUSH
34996: EMPTY
34997: LIST
34998: LIST
34999: LIST
35000: LIST
35001: ST_TO_ADDR
// exit ;
35002: GO 35416
// end ; _chassis := AvailableChassisList ( factory ) ;
35004: LD_ADDR_VAR 0 9
35008: PUSH
35009: LD_VAR 0 1
35013: PPUSH
35014: CALL_OW 475
35018: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
35019: LD_ADDR_VAR 0 11
35023: PUSH
35024: LD_VAR 0 1
35028: PPUSH
35029: CALL_OW 476
35033: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
35034: LD_ADDR_VAR 0 12
35038: PUSH
35039: LD_VAR 0 1
35043: PPUSH
35044: CALL_OW 477
35048: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
35049: LD_ADDR_VAR 0 10
35053: PUSH
35054: LD_VAR 0 1
35058: PPUSH
35059: CALL_OW 478
35063: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
35064: LD_VAR 0 9
35068: NOT
35069: PUSH
35070: LD_VAR 0 11
35074: NOT
35075: OR
35076: PUSH
35077: LD_VAR 0 12
35081: NOT
35082: OR
35083: PUSH
35084: LD_VAR 0 10
35088: NOT
35089: OR
35090: IFFALSE 35125
// begin result := [ chassis , engine , control , weapon ] ;
35092: LD_ADDR_VAR 0 6
35096: PUSH
35097: LD_VAR 0 2
35101: PUSH
35102: LD_VAR 0 3
35106: PUSH
35107: LD_VAR 0 4
35111: PUSH
35112: LD_VAR 0 5
35116: PUSH
35117: EMPTY
35118: LIST
35119: LIST
35120: LIST
35121: LIST
35122: ST_TO_ADDR
// exit ;
35123: GO 35416
// end ; if not chassis in _chassis then
35125: LD_VAR 0 2
35129: PUSH
35130: LD_VAR 0 9
35134: IN
35135: NOT
35136: IFFALSE 35162
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
35138: LD_ADDR_VAR 0 2
35142: PUSH
35143: LD_VAR 0 9
35147: PUSH
35148: LD_INT 1
35150: PPUSH
35151: LD_VAR 0 9
35155: PPUSH
35156: CALL_OW 12
35160: ARRAY
35161: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
35162: LD_VAR 0 2
35166: PPUSH
35167: LD_VAR 0 3
35171: PPUSH
35172: CALL 35421 0 2
35176: NOT
35177: IFFALSE 35236
// repeat engine := _engine [ 1 ] ;
35179: LD_ADDR_VAR 0 3
35183: PUSH
35184: LD_VAR 0 11
35188: PUSH
35189: LD_INT 1
35191: ARRAY
35192: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
35193: LD_ADDR_VAR 0 11
35197: PUSH
35198: LD_VAR 0 11
35202: PPUSH
35203: LD_INT 1
35205: PPUSH
35206: CALL_OW 3
35210: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
35211: LD_VAR 0 2
35215: PPUSH
35216: LD_VAR 0 3
35220: PPUSH
35221: CALL 35421 0 2
35225: PUSH
35226: LD_VAR 0 11
35230: PUSH
35231: EMPTY
35232: EQUAL
35233: OR
35234: IFFALSE 35179
// if not control in _control then
35236: LD_VAR 0 4
35240: PUSH
35241: LD_VAR 0 12
35245: IN
35246: NOT
35247: IFFALSE 35273
// control := _control [ rand ( 1 , _control ) ] ;
35249: LD_ADDR_VAR 0 4
35253: PUSH
35254: LD_VAR 0 12
35258: PUSH
35259: LD_INT 1
35261: PPUSH
35262: LD_VAR 0 12
35266: PPUSH
35267: CALL_OW 12
35271: ARRAY
35272: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
35273: LD_VAR 0 2
35277: PPUSH
35278: LD_VAR 0 5
35282: PPUSH
35283: CALL 35641 0 2
35287: NOT
35288: IFFALSE 35347
// repeat weapon := _weapon [ 1 ] ;
35290: LD_ADDR_VAR 0 5
35294: PUSH
35295: LD_VAR 0 10
35299: PUSH
35300: LD_INT 1
35302: ARRAY
35303: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
35304: LD_ADDR_VAR 0 10
35308: PUSH
35309: LD_VAR 0 10
35313: PPUSH
35314: LD_INT 1
35316: PPUSH
35317: CALL_OW 3
35321: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
35322: LD_VAR 0 2
35326: PPUSH
35327: LD_VAR 0 5
35331: PPUSH
35332: CALL 35641 0 2
35336: PUSH
35337: LD_VAR 0 10
35341: PUSH
35342: EMPTY
35343: EQUAL
35344: OR
35345: IFFALSE 35290
// result := [ ] ;
35347: LD_ADDR_VAR 0 6
35351: PUSH
35352: EMPTY
35353: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35354: LD_VAR 0 1
35358: PPUSH
35359: LD_VAR 0 2
35363: PPUSH
35364: LD_VAR 0 3
35368: PPUSH
35369: LD_VAR 0 4
35373: PPUSH
35374: LD_VAR 0 5
35378: PPUSH
35379: CALL_OW 448
35383: IFFALSE 35416
// result := [ chassis , engine , control , weapon ] ;
35385: LD_ADDR_VAR 0 6
35389: PUSH
35390: LD_VAR 0 2
35394: PUSH
35395: LD_VAR 0 3
35399: PUSH
35400: LD_VAR 0 4
35404: PUSH
35405: LD_VAR 0 5
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: LIST
35414: LIST
35415: ST_TO_ADDR
// end ;
35416: LD_VAR 0 6
35420: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
35421: LD_INT 0
35423: PPUSH
// if not chassis or not engine then
35424: LD_VAR 0 1
35428: NOT
35429: PUSH
35430: LD_VAR 0 2
35434: NOT
35435: OR
35436: IFFALSE 35440
// exit ;
35438: GO 35636
// case engine of engine_solar :
35440: LD_VAR 0 2
35444: PUSH
35445: LD_INT 2
35447: DOUBLE
35448: EQUAL
35449: IFTRUE 35453
35451: GO 35491
35453: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
35454: LD_ADDR_VAR 0 3
35458: PUSH
35459: LD_INT 11
35461: PUSH
35462: LD_INT 12
35464: PUSH
35465: LD_INT 13
35467: PUSH
35468: LD_INT 14
35470: PUSH
35471: LD_INT 1
35473: PUSH
35474: LD_INT 2
35476: PUSH
35477: LD_INT 3
35479: PUSH
35480: EMPTY
35481: LIST
35482: LIST
35483: LIST
35484: LIST
35485: LIST
35486: LIST
35487: LIST
35488: ST_TO_ADDR
35489: GO 35620
35491: LD_INT 1
35493: DOUBLE
35494: EQUAL
35495: IFTRUE 35499
35497: GO 35561
35499: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
35500: LD_ADDR_VAR 0 3
35504: PUSH
35505: LD_INT 11
35507: PUSH
35508: LD_INT 12
35510: PUSH
35511: LD_INT 13
35513: PUSH
35514: LD_INT 14
35516: PUSH
35517: LD_INT 1
35519: PUSH
35520: LD_INT 2
35522: PUSH
35523: LD_INT 3
35525: PUSH
35526: LD_INT 4
35528: PUSH
35529: LD_INT 5
35531: PUSH
35532: LD_INT 21
35534: PUSH
35535: LD_INT 23
35537: PUSH
35538: LD_INT 22
35540: PUSH
35541: LD_INT 24
35543: PUSH
35544: EMPTY
35545: LIST
35546: LIST
35547: LIST
35548: LIST
35549: LIST
35550: LIST
35551: LIST
35552: LIST
35553: LIST
35554: LIST
35555: LIST
35556: LIST
35557: LIST
35558: ST_TO_ADDR
35559: GO 35620
35561: LD_INT 3
35563: DOUBLE
35564: EQUAL
35565: IFTRUE 35569
35567: GO 35619
35569: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35570: LD_ADDR_VAR 0 3
35574: PUSH
35575: LD_INT 13
35577: PUSH
35578: LD_INT 14
35580: PUSH
35581: LD_INT 2
35583: PUSH
35584: LD_INT 3
35586: PUSH
35587: LD_INT 4
35589: PUSH
35590: LD_INT 5
35592: PUSH
35593: LD_INT 21
35595: PUSH
35596: LD_INT 22
35598: PUSH
35599: LD_INT 23
35601: PUSH
35602: LD_INT 24
35604: PUSH
35605: EMPTY
35606: LIST
35607: LIST
35608: LIST
35609: LIST
35610: LIST
35611: LIST
35612: LIST
35613: LIST
35614: LIST
35615: LIST
35616: ST_TO_ADDR
35617: GO 35620
35619: POP
// result := ( chassis in result ) ;
35620: LD_ADDR_VAR 0 3
35624: PUSH
35625: LD_VAR 0 1
35629: PUSH
35630: LD_VAR 0 3
35634: IN
35635: ST_TO_ADDR
// end ;
35636: LD_VAR 0 3
35640: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
35641: LD_INT 0
35643: PPUSH
// if not chassis or not weapon then
35644: LD_VAR 0 1
35648: NOT
35649: PUSH
35650: LD_VAR 0 2
35654: NOT
35655: OR
35656: IFFALSE 35660
// exit ;
35658: GO 36720
// case weapon of us_machine_gun :
35660: LD_VAR 0 2
35664: PUSH
35665: LD_INT 2
35667: DOUBLE
35668: EQUAL
35669: IFTRUE 35673
35671: GO 35703
35673: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
35674: LD_ADDR_VAR 0 3
35678: PUSH
35679: LD_INT 1
35681: PUSH
35682: LD_INT 2
35684: PUSH
35685: LD_INT 3
35687: PUSH
35688: LD_INT 4
35690: PUSH
35691: LD_INT 5
35693: PUSH
35694: EMPTY
35695: LIST
35696: LIST
35697: LIST
35698: LIST
35699: LIST
35700: ST_TO_ADDR
35701: GO 36704
35703: LD_INT 3
35705: DOUBLE
35706: EQUAL
35707: IFTRUE 35711
35709: GO 35741
35711: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
35712: LD_ADDR_VAR 0 3
35716: PUSH
35717: LD_INT 1
35719: PUSH
35720: LD_INT 2
35722: PUSH
35723: LD_INT 3
35725: PUSH
35726: LD_INT 4
35728: PUSH
35729: LD_INT 5
35731: PUSH
35732: EMPTY
35733: LIST
35734: LIST
35735: LIST
35736: LIST
35737: LIST
35738: ST_TO_ADDR
35739: GO 36704
35741: LD_INT 11
35743: DOUBLE
35744: EQUAL
35745: IFTRUE 35749
35747: GO 35779
35749: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
35750: LD_ADDR_VAR 0 3
35754: PUSH
35755: LD_INT 1
35757: PUSH
35758: LD_INT 2
35760: PUSH
35761: LD_INT 3
35763: PUSH
35764: LD_INT 4
35766: PUSH
35767: LD_INT 5
35769: PUSH
35770: EMPTY
35771: LIST
35772: LIST
35773: LIST
35774: LIST
35775: LIST
35776: ST_TO_ADDR
35777: GO 36704
35779: LD_INT 4
35781: DOUBLE
35782: EQUAL
35783: IFTRUE 35787
35785: GO 35813
35787: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
35788: LD_ADDR_VAR 0 3
35792: PUSH
35793: LD_INT 2
35795: PUSH
35796: LD_INT 3
35798: PUSH
35799: LD_INT 4
35801: PUSH
35802: LD_INT 5
35804: PUSH
35805: EMPTY
35806: LIST
35807: LIST
35808: LIST
35809: LIST
35810: ST_TO_ADDR
35811: GO 36704
35813: LD_INT 5
35815: DOUBLE
35816: EQUAL
35817: IFTRUE 35821
35819: GO 35847
35821: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
35822: LD_ADDR_VAR 0 3
35826: PUSH
35827: LD_INT 2
35829: PUSH
35830: LD_INT 3
35832: PUSH
35833: LD_INT 4
35835: PUSH
35836: LD_INT 5
35838: PUSH
35839: EMPTY
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: ST_TO_ADDR
35845: GO 36704
35847: LD_INT 9
35849: DOUBLE
35850: EQUAL
35851: IFTRUE 35855
35853: GO 35881
35855: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
35856: LD_ADDR_VAR 0 3
35860: PUSH
35861: LD_INT 2
35863: PUSH
35864: LD_INT 3
35866: PUSH
35867: LD_INT 4
35869: PUSH
35870: LD_INT 5
35872: PUSH
35873: EMPTY
35874: LIST
35875: LIST
35876: LIST
35877: LIST
35878: ST_TO_ADDR
35879: GO 36704
35881: LD_INT 7
35883: DOUBLE
35884: EQUAL
35885: IFTRUE 35889
35887: GO 35915
35889: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
35890: LD_ADDR_VAR 0 3
35894: PUSH
35895: LD_INT 2
35897: PUSH
35898: LD_INT 3
35900: PUSH
35901: LD_INT 4
35903: PUSH
35904: LD_INT 5
35906: PUSH
35907: EMPTY
35908: LIST
35909: LIST
35910: LIST
35911: LIST
35912: ST_TO_ADDR
35913: GO 36704
35915: LD_INT 12
35917: DOUBLE
35918: EQUAL
35919: IFTRUE 35923
35921: GO 35949
35923: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
35924: LD_ADDR_VAR 0 3
35928: PUSH
35929: LD_INT 2
35931: PUSH
35932: LD_INT 3
35934: PUSH
35935: LD_INT 4
35937: PUSH
35938: LD_INT 5
35940: PUSH
35941: EMPTY
35942: LIST
35943: LIST
35944: LIST
35945: LIST
35946: ST_TO_ADDR
35947: GO 36704
35949: LD_INT 13
35951: DOUBLE
35952: EQUAL
35953: IFTRUE 35957
35955: GO 35983
35957: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
35958: LD_ADDR_VAR 0 3
35962: PUSH
35963: LD_INT 2
35965: PUSH
35966: LD_INT 3
35968: PUSH
35969: LD_INT 4
35971: PUSH
35972: LD_INT 5
35974: PUSH
35975: EMPTY
35976: LIST
35977: LIST
35978: LIST
35979: LIST
35980: ST_TO_ADDR
35981: GO 36704
35983: LD_INT 14
35985: DOUBLE
35986: EQUAL
35987: IFTRUE 35991
35989: GO 36009
35991: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
35992: LD_ADDR_VAR 0 3
35996: PUSH
35997: LD_INT 4
35999: PUSH
36000: LD_INT 5
36002: PUSH
36003: EMPTY
36004: LIST
36005: LIST
36006: ST_TO_ADDR
36007: GO 36704
36009: LD_INT 6
36011: DOUBLE
36012: EQUAL
36013: IFTRUE 36017
36015: GO 36035
36017: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
36018: LD_ADDR_VAR 0 3
36022: PUSH
36023: LD_INT 4
36025: PUSH
36026: LD_INT 5
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: ST_TO_ADDR
36033: GO 36704
36035: LD_INT 10
36037: DOUBLE
36038: EQUAL
36039: IFTRUE 36043
36041: GO 36061
36043: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
36044: LD_ADDR_VAR 0 3
36048: PUSH
36049: LD_INT 4
36051: PUSH
36052: LD_INT 5
36054: PUSH
36055: EMPTY
36056: LIST
36057: LIST
36058: ST_TO_ADDR
36059: GO 36704
36061: LD_INT 22
36063: DOUBLE
36064: EQUAL
36065: IFTRUE 36069
36067: GO 36095
36069: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
36070: LD_ADDR_VAR 0 3
36074: PUSH
36075: LD_INT 11
36077: PUSH
36078: LD_INT 12
36080: PUSH
36081: LD_INT 13
36083: PUSH
36084: LD_INT 14
36086: PUSH
36087: EMPTY
36088: LIST
36089: LIST
36090: LIST
36091: LIST
36092: ST_TO_ADDR
36093: GO 36704
36095: LD_INT 23
36097: DOUBLE
36098: EQUAL
36099: IFTRUE 36103
36101: GO 36129
36103: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
36104: LD_ADDR_VAR 0 3
36108: PUSH
36109: LD_INT 11
36111: PUSH
36112: LD_INT 12
36114: PUSH
36115: LD_INT 13
36117: PUSH
36118: LD_INT 14
36120: PUSH
36121: EMPTY
36122: LIST
36123: LIST
36124: LIST
36125: LIST
36126: ST_TO_ADDR
36127: GO 36704
36129: LD_INT 24
36131: DOUBLE
36132: EQUAL
36133: IFTRUE 36137
36135: GO 36163
36137: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
36138: LD_ADDR_VAR 0 3
36142: PUSH
36143: LD_INT 11
36145: PUSH
36146: LD_INT 12
36148: PUSH
36149: LD_INT 13
36151: PUSH
36152: LD_INT 14
36154: PUSH
36155: EMPTY
36156: LIST
36157: LIST
36158: LIST
36159: LIST
36160: ST_TO_ADDR
36161: GO 36704
36163: LD_INT 30
36165: DOUBLE
36166: EQUAL
36167: IFTRUE 36171
36169: GO 36197
36171: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
36172: LD_ADDR_VAR 0 3
36176: PUSH
36177: LD_INT 11
36179: PUSH
36180: LD_INT 12
36182: PUSH
36183: LD_INT 13
36185: PUSH
36186: LD_INT 14
36188: PUSH
36189: EMPTY
36190: LIST
36191: LIST
36192: LIST
36193: LIST
36194: ST_TO_ADDR
36195: GO 36704
36197: LD_INT 25
36199: DOUBLE
36200: EQUAL
36201: IFTRUE 36205
36203: GO 36223
36205: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
36206: LD_ADDR_VAR 0 3
36210: PUSH
36211: LD_INT 13
36213: PUSH
36214: LD_INT 14
36216: PUSH
36217: EMPTY
36218: LIST
36219: LIST
36220: ST_TO_ADDR
36221: GO 36704
36223: LD_INT 27
36225: DOUBLE
36226: EQUAL
36227: IFTRUE 36231
36229: GO 36249
36231: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
36232: LD_ADDR_VAR 0 3
36236: PUSH
36237: LD_INT 13
36239: PUSH
36240: LD_INT 14
36242: PUSH
36243: EMPTY
36244: LIST
36245: LIST
36246: ST_TO_ADDR
36247: GO 36704
36249: LD_INT 92
36251: DOUBLE
36252: EQUAL
36253: IFTRUE 36257
36255: GO 36283
36257: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
36258: LD_ADDR_VAR 0 3
36262: PUSH
36263: LD_INT 11
36265: PUSH
36266: LD_INT 12
36268: PUSH
36269: LD_INT 13
36271: PUSH
36272: LD_INT 14
36274: PUSH
36275: EMPTY
36276: LIST
36277: LIST
36278: LIST
36279: LIST
36280: ST_TO_ADDR
36281: GO 36704
36283: LD_INT 28
36285: DOUBLE
36286: EQUAL
36287: IFTRUE 36291
36289: GO 36309
36291: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
36292: LD_ADDR_VAR 0 3
36296: PUSH
36297: LD_INT 13
36299: PUSH
36300: LD_INT 14
36302: PUSH
36303: EMPTY
36304: LIST
36305: LIST
36306: ST_TO_ADDR
36307: GO 36704
36309: LD_INT 29
36311: DOUBLE
36312: EQUAL
36313: IFTRUE 36317
36315: GO 36335
36317: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
36318: LD_ADDR_VAR 0 3
36322: PUSH
36323: LD_INT 13
36325: PUSH
36326: LD_INT 14
36328: PUSH
36329: EMPTY
36330: LIST
36331: LIST
36332: ST_TO_ADDR
36333: GO 36704
36335: LD_INT 31
36337: DOUBLE
36338: EQUAL
36339: IFTRUE 36343
36341: GO 36361
36343: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
36344: LD_ADDR_VAR 0 3
36348: PUSH
36349: LD_INT 13
36351: PUSH
36352: LD_INT 14
36354: PUSH
36355: EMPTY
36356: LIST
36357: LIST
36358: ST_TO_ADDR
36359: GO 36704
36361: LD_INT 26
36363: DOUBLE
36364: EQUAL
36365: IFTRUE 36369
36367: GO 36387
36369: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
36370: LD_ADDR_VAR 0 3
36374: PUSH
36375: LD_INT 13
36377: PUSH
36378: LD_INT 14
36380: PUSH
36381: EMPTY
36382: LIST
36383: LIST
36384: ST_TO_ADDR
36385: GO 36704
36387: LD_INT 42
36389: DOUBLE
36390: EQUAL
36391: IFTRUE 36395
36393: GO 36421
36395: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
36396: LD_ADDR_VAR 0 3
36400: PUSH
36401: LD_INT 21
36403: PUSH
36404: LD_INT 22
36406: PUSH
36407: LD_INT 23
36409: PUSH
36410: LD_INT 24
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: LIST
36417: LIST
36418: ST_TO_ADDR
36419: GO 36704
36421: LD_INT 43
36423: DOUBLE
36424: EQUAL
36425: IFTRUE 36429
36427: GO 36455
36429: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
36430: LD_ADDR_VAR 0 3
36434: PUSH
36435: LD_INT 21
36437: PUSH
36438: LD_INT 22
36440: PUSH
36441: LD_INT 23
36443: PUSH
36444: LD_INT 24
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: LIST
36451: LIST
36452: ST_TO_ADDR
36453: GO 36704
36455: LD_INT 44
36457: DOUBLE
36458: EQUAL
36459: IFTRUE 36463
36461: GO 36489
36463: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
36464: LD_ADDR_VAR 0 3
36468: PUSH
36469: LD_INT 21
36471: PUSH
36472: LD_INT 22
36474: PUSH
36475: LD_INT 23
36477: PUSH
36478: LD_INT 24
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: LIST
36485: LIST
36486: ST_TO_ADDR
36487: GO 36704
36489: LD_INT 45
36491: DOUBLE
36492: EQUAL
36493: IFTRUE 36497
36495: GO 36523
36497: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
36498: LD_ADDR_VAR 0 3
36502: PUSH
36503: LD_INT 21
36505: PUSH
36506: LD_INT 22
36508: PUSH
36509: LD_INT 23
36511: PUSH
36512: LD_INT 24
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: LIST
36519: LIST
36520: ST_TO_ADDR
36521: GO 36704
36523: LD_INT 49
36525: DOUBLE
36526: EQUAL
36527: IFTRUE 36531
36529: GO 36557
36531: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
36532: LD_ADDR_VAR 0 3
36536: PUSH
36537: LD_INT 21
36539: PUSH
36540: LD_INT 22
36542: PUSH
36543: LD_INT 23
36545: PUSH
36546: LD_INT 24
36548: PUSH
36549: EMPTY
36550: LIST
36551: LIST
36552: LIST
36553: LIST
36554: ST_TO_ADDR
36555: GO 36704
36557: LD_INT 51
36559: DOUBLE
36560: EQUAL
36561: IFTRUE 36565
36563: GO 36591
36565: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
36566: LD_ADDR_VAR 0 3
36570: PUSH
36571: LD_INT 21
36573: PUSH
36574: LD_INT 22
36576: PUSH
36577: LD_INT 23
36579: PUSH
36580: LD_INT 24
36582: PUSH
36583: EMPTY
36584: LIST
36585: LIST
36586: LIST
36587: LIST
36588: ST_TO_ADDR
36589: GO 36704
36591: LD_INT 52
36593: DOUBLE
36594: EQUAL
36595: IFTRUE 36599
36597: GO 36625
36599: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
36600: LD_ADDR_VAR 0 3
36604: PUSH
36605: LD_INT 21
36607: PUSH
36608: LD_INT 22
36610: PUSH
36611: LD_INT 23
36613: PUSH
36614: LD_INT 24
36616: PUSH
36617: EMPTY
36618: LIST
36619: LIST
36620: LIST
36621: LIST
36622: ST_TO_ADDR
36623: GO 36704
36625: LD_INT 53
36627: DOUBLE
36628: EQUAL
36629: IFTRUE 36633
36631: GO 36651
36633: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
36634: LD_ADDR_VAR 0 3
36638: PUSH
36639: LD_INT 23
36641: PUSH
36642: LD_INT 24
36644: PUSH
36645: EMPTY
36646: LIST
36647: LIST
36648: ST_TO_ADDR
36649: GO 36704
36651: LD_INT 46
36653: DOUBLE
36654: EQUAL
36655: IFTRUE 36659
36657: GO 36677
36659: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
36660: LD_ADDR_VAR 0 3
36664: PUSH
36665: LD_INT 23
36667: PUSH
36668: LD_INT 24
36670: PUSH
36671: EMPTY
36672: LIST
36673: LIST
36674: ST_TO_ADDR
36675: GO 36704
36677: LD_INT 47
36679: DOUBLE
36680: EQUAL
36681: IFTRUE 36685
36683: GO 36703
36685: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36686: LD_ADDR_VAR 0 3
36690: PUSH
36691: LD_INT 23
36693: PUSH
36694: LD_INT 24
36696: PUSH
36697: EMPTY
36698: LIST
36699: LIST
36700: ST_TO_ADDR
36701: GO 36704
36703: POP
// result := ( chassis in result ) ;
36704: LD_ADDR_VAR 0 3
36708: PUSH
36709: LD_VAR 0 1
36713: PUSH
36714: LD_VAR 0 3
36718: IN
36719: ST_TO_ADDR
// end ;
36720: LD_VAR 0 3
36724: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
36725: LD_INT 0
36727: PPUSH
36728: PPUSH
36729: PPUSH
36730: PPUSH
36731: PPUSH
36732: PPUSH
36733: PPUSH
// result := array ;
36734: LD_ADDR_VAR 0 5
36738: PUSH
36739: LD_VAR 0 1
36743: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
36744: LD_VAR 0 1
36748: NOT
36749: PUSH
36750: LD_VAR 0 2
36754: NOT
36755: OR
36756: PUSH
36757: LD_VAR 0 3
36761: NOT
36762: OR
36763: PUSH
36764: LD_VAR 0 2
36768: PUSH
36769: LD_VAR 0 1
36773: GREATER
36774: OR
36775: PUSH
36776: LD_VAR 0 3
36780: PUSH
36781: LD_VAR 0 1
36785: GREATER
36786: OR
36787: IFFALSE 36791
// exit ;
36789: GO 37087
// if direction then
36791: LD_VAR 0 4
36795: IFFALSE 36859
// begin d := 1 ;
36797: LD_ADDR_VAR 0 9
36801: PUSH
36802: LD_INT 1
36804: ST_TO_ADDR
// if i_from > i_to then
36805: LD_VAR 0 2
36809: PUSH
36810: LD_VAR 0 3
36814: GREATER
36815: IFFALSE 36841
// length := ( array - i_from ) + i_to else
36817: LD_ADDR_VAR 0 11
36821: PUSH
36822: LD_VAR 0 1
36826: PUSH
36827: LD_VAR 0 2
36831: MINUS
36832: PUSH
36833: LD_VAR 0 3
36837: PLUS
36838: ST_TO_ADDR
36839: GO 36857
// length := i_to - i_from ;
36841: LD_ADDR_VAR 0 11
36845: PUSH
36846: LD_VAR 0 3
36850: PUSH
36851: LD_VAR 0 2
36855: MINUS
36856: ST_TO_ADDR
// end else
36857: GO 36920
// begin d := - 1 ;
36859: LD_ADDR_VAR 0 9
36863: PUSH
36864: LD_INT 1
36866: NEG
36867: ST_TO_ADDR
// if i_from > i_to then
36868: LD_VAR 0 2
36872: PUSH
36873: LD_VAR 0 3
36877: GREATER
36878: IFFALSE 36898
// length := i_from - i_to else
36880: LD_ADDR_VAR 0 11
36884: PUSH
36885: LD_VAR 0 2
36889: PUSH
36890: LD_VAR 0 3
36894: MINUS
36895: ST_TO_ADDR
36896: GO 36920
// length := ( array - i_to ) + i_from ;
36898: LD_ADDR_VAR 0 11
36902: PUSH
36903: LD_VAR 0 1
36907: PUSH
36908: LD_VAR 0 3
36912: MINUS
36913: PUSH
36914: LD_VAR 0 2
36918: PLUS
36919: ST_TO_ADDR
// end ; if not length then
36920: LD_VAR 0 11
36924: NOT
36925: IFFALSE 36929
// exit ;
36927: GO 37087
// tmp := array ;
36929: LD_ADDR_VAR 0 10
36933: PUSH
36934: LD_VAR 0 1
36938: ST_TO_ADDR
// for i = 1 to length do
36939: LD_ADDR_VAR 0 6
36943: PUSH
36944: DOUBLE
36945: LD_INT 1
36947: DEC
36948: ST_TO_ADDR
36949: LD_VAR 0 11
36953: PUSH
36954: FOR_TO
36955: IFFALSE 37075
// begin for j = 1 to array do
36957: LD_ADDR_VAR 0 7
36961: PUSH
36962: DOUBLE
36963: LD_INT 1
36965: DEC
36966: ST_TO_ADDR
36967: LD_VAR 0 1
36971: PUSH
36972: FOR_TO
36973: IFFALSE 37061
// begin k := j + d ;
36975: LD_ADDR_VAR 0 8
36979: PUSH
36980: LD_VAR 0 7
36984: PUSH
36985: LD_VAR 0 9
36989: PLUS
36990: ST_TO_ADDR
// if k > array then
36991: LD_VAR 0 8
36995: PUSH
36996: LD_VAR 0 1
37000: GREATER
37001: IFFALSE 37011
// k := 1 ;
37003: LD_ADDR_VAR 0 8
37007: PUSH
37008: LD_INT 1
37010: ST_TO_ADDR
// if not k then
37011: LD_VAR 0 8
37015: NOT
37016: IFFALSE 37028
// k := array ;
37018: LD_ADDR_VAR 0 8
37022: PUSH
37023: LD_VAR 0 1
37027: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
37028: LD_ADDR_VAR 0 10
37032: PUSH
37033: LD_VAR 0 10
37037: PPUSH
37038: LD_VAR 0 8
37042: PPUSH
37043: LD_VAR 0 1
37047: PUSH
37048: LD_VAR 0 7
37052: ARRAY
37053: PPUSH
37054: CALL_OW 1
37058: ST_TO_ADDR
// end ;
37059: GO 36972
37061: POP
37062: POP
// array := tmp ;
37063: LD_ADDR_VAR 0 1
37067: PUSH
37068: LD_VAR 0 10
37072: ST_TO_ADDR
// end ;
37073: GO 36954
37075: POP
37076: POP
// result := array ;
37077: LD_ADDR_VAR 0 5
37081: PUSH
37082: LD_VAR 0 1
37086: ST_TO_ADDR
// end ;
37087: LD_VAR 0 5
37091: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
37092: LD_INT 0
37094: PPUSH
37095: PPUSH
// result := 0 ;
37096: LD_ADDR_VAR 0 3
37100: PUSH
37101: LD_INT 0
37103: ST_TO_ADDR
// if not array or not value in array then
37104: LD_VAR 0 1
37108: NOT
37109: PUSH
37110: LD_VAR 0 2
37114: PUSH
37115: LD_VAR 0 1
37119: IN
37120: NOT
37121: OR
37122: IFFALSE 37126
// exit ;
37124: GO 37180
// for i = 1 to array do
37126: LD_ADDR_VAR 0 4
37130: PUSH
37131: DOUBLE
37132: LD_INT 1
37134: DEC
37135: ST_TO_ADDR
37136: LD_VAR 0 1
37140: PUSH
37141: FOR_TO
37142: IFFALSE 37178
// if value = array [ i ] then
37144: LD_VAR 0 2
37148: PUSH
37149: LD_VAR 0 1
37153: PUSH
37154: LD_VAR 0 4
37158: ARRAY
37159: EQUAL
37160: IFFALSE 37176
// begin result := i ;
37162: LD_ADDR_VAR 0 3
37166: PUSH
37167: LD_VAR 0 4
37171: ST_TO_ADDR
// exit ;
37172: POP
37173: POP
37174: GO 37180
// end ;
37176: GO 37141
37178: POP
37179: POP
// end ;
37180: LD_VAR 0 3
37184: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
37185: LD_INT 0
37187: PPUSH
// vc_chassis := chassis ;
37188: LD_ADDR_OWVAR 37
37192: PUSH
37193: LD_VAR 0 1
37197: ST_TO_ADDR
// vc_engine := engine ;
37198: LD_ADDR_OWVAR 39
37202: PUSH
37203: LD_VAR 0 2
37207: ST_TO_ADDR
// vc_control := control ;
37208: LD_ADDR_OWVAR 38
37212: PUSH
37213: LD_VAR 0 3
37217: ST_TO_ADDR
// vc_weapon := weapon ;
37218: LD_ADDR_OWVAR 40
37222: PUSH
37223: LD_VAR 0 4
37227: ST_TO_ADDR
// vc_fuel_battery := fuel ;
37228: LD_ADDR_OWVAR 41
37232: PUSH
37233: LD_VAR 0 5
37237: ST_TO_ADDR
// end ;
37238: LD_VAR 0 6
37242: RET
// export function WantPlant ( unit ) ; var task ; begin
37243: LD_INT 0
37245: PPUSH
37246: PPUSH
// result := false ;
37247: LD_ADDR_VAR 0 2
37251: PUSH
37252: LD_INT 0
37254: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
37255: LD_ADDR_VAR 0 3
37259: PUSH
37260: LD_VAR 0 1
37264: PPUSH
37265: CALL_OW 437
37269: ST_TO_ADDR
// if task then
37270: LD_VAR 0 3
37274: IFFALSE 37302
// if task [ 1 ] [ 1 ] = p then
37276: LD_VAR 0 3
37280: PUSH
37281: LD_INT 1
37283: ARRAY
37284: PUSH
37285: LD_INT 1
37287: ARRAY
37288: PUSH
37289: LD_STRING p
37291: EQUAL
37292: IFFALSE 37302
// result := true ;
37294: LD_ADDR_VAR 0 2
37298: PUSH
37299: LD_INT 1
37301: ST_TO_ADDR
// end ;
37302: LD_VAR 0 2
37306: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
37307: LD_INT 0
37309: PPUSH
37310: PPUSH
37311: PPUSH
37312: PPUSH
// if pos < 1 then
37313: LD_VAR 0 2
37317: PUSH
37318: LD_INT 1
37320: LESS
37321: IFFALSE 37325
// exit ;
37323: GO 37628
// if pos = 1 then
37325: LD_VAR 0 2
37329: PUSH
37330: LD_INT 1
37332: EQUAL
37333: IFFALSE 37366
// result := Replace ( arr , pos [ 1 ] , value ) else
37335: LD_ADDR_VAR 0 4
37339: PUSH
37340: LD_VAR 0 1
37344: PPUSH
37345: LD_VAR 0 2
37349: PUSH
37350: LD_INT 1
37352: ARRAY
37353: PPUSH
37354: LD_VAR 0 3
37358: PPUSH
37359: CALL_OW 1
37363: ST_TO_ADDR
37364: GO 37628
// begin tmp := arr ;
37366: LD_ADDR_VAR 0 6
37370: PUSH
37371: LD_VAR 0 1
37375: ST_TO_ADDR
// s_arr := [ tmp ] ;
37376: LD_ADDR_VAR 0 7
37380: PUSH
37381: LD_VAR 0 6
37385: PUSH
37386: EMPTY
37387: LIST
37388: ST_TO_ADDR
// for i = 1 to pos - 1 do
37389: LD_ADDR_VAR 0 5
37393: PUSH
37394: DOUBLE
37395: LD_INT 1
37397: DEC
37398: ST_TO_ADDR
37399: LD_VAR 0 2
37403: PUSH
37404: LD_INT 1
37406: MINUS
37407: PUSH
37408: FOR_TO
37409: IFFALSE 37454
// begin tmp := tmp [ pos [ i ] ] ;
37411: LD_ADDR_VAR 0 6
37415: PUSH
37416: LD_VAR 0 6
37420: PUSH
37421: LD_VAR 0 2
37425: PUSH
37426: LD_VAR 0 5
37430: ARRAY
37431: ARRAY
37432: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
37433: LD_ADDR_VAR 0 7
37437: PUSH
37438: LD_VAR 0 7
37442: PUSH
37443: LD_VAR 0 6
37447: PUSH
37448: EMPTY
37449: LIST
37450: ADD
37451: ST_TO_ADDR
// end ;
37452: GO 37408
37454: POP
37455: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
37456: LD_ADDR_VAR 0 6
37460: PUSH
37461: LD_VAR 0 6
37465: PPUSH
37466: LD_VAR 0 2
37470: PUSH
37471: LD_VAR 0 2
37475: ARRAY
37476: PPUSH
37477: LD_VAR 0 3
37481: PPUSH
37482: CALL_OW 1
37486: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
37487: LD_ADDR_VAR 0 7
37491: PUSH
37492: LD_VAR 0 7
37496: PPUSH
37497: LD_VAR 0 7
37501: PPUSH
37502: LD_VAR 0 6
37506: PPUSH
37507: CALL_OW 1
37511: ST_TO_ADDR
// for i = s_arr downto 2 do
37512: LD_ADDR_VAR 0 5
37516: PUSH
37517: DOUBLE
37518: LD_VAR 0 7
37522: INC
37523: ST_TO_ADDR
37524: LD_INT 2
37526: PUSH
37527: FOR_DOWNTO
37528: IFFALSE 37612
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
37530: LD_ADDR_VAR 0 6
37534: PUSH
37535: LD_VAR 0 7
37539: PUSH
37540: LD_VAR 0 5
37544: PUSH
37545: LD_INT 1
37547: MINUS
37548: ARRAY
37549: PPUSH
37550: LD_VAR 0 2
37554: PUSH
37555: LD_VAR 0 5
37559: PUSH
37560: LD_INT 1
37562: MINUS
37563: ARRAY
37564: PPUSH
37565: LD_VAR 0 7
37569: PUSH
37570: LD_VAR 0 5
37574: ARRAY
37575: PPUSH
37576: CALL_OW 1
37580: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
37581: LD_ADDR_VAR 0 7
37585: PUSH
37586: LD_VAR 0 7
37590: PPUSH
37591: LD_VAR 0 5
37595: PUSH
37596: LD_INT 1
37598: MINUS
37599: PPUSH
37600: LD_VAR 0 6
37604: PPUSH
37605: CALL_OW 1
37609: ST_TO_ADDR
// end ;
37610: GO 37527
37612: POP
37613: POP
// result := s_arr [ 1 ] ;
37614: LD_ADDR_VAR 0 4
37618: PUSH
37619: LD_VAR 0 7
37623: PUSH
37624: LD_INT 1
37626: ARRAY
37627: ST_TO_ADDR
// end ; end ;
37628: LD_VAR 0 4
37632: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
37633: LD_INT 0
37635: PPUSH
37636: PPUSH
// if not list then
37637: LD_VAR 0 1
37641: NOT
37642: IFFALSE 37646
// exit ;
37644: GO 37737
// i := list [ pos1 ] ;
37646: LD_ADDR_VAR 0 5
37650: PUSH
37651: LD_VAR 0 1
37655: PUSH
37656: LD_VAR 0 2
37660: ARRAY
37661: ST_TO_ADDR
// if not i then
37662: LD_VAR 0 5
37666: NOT
37667: IFFALSE 37671
// exit ;
37669: GO 37737
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
37671: LD_ADDR_VAR 0 1
37675: PUSH
37676: LD_VAR 0 1
37680: PPUSH
37681: LD_VAR 0 2
37685: PPUSH
37686: LD_VAR 0 1
37690: PUSH
37691: LD_VAR 0 3
37695: ARRAY
37696: PPUSH
37697: CALL_OW 1
37701: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
37702: LD_ADDR_VAR 0 1
37706: PUSH
37707: LD_VAR 0 1
37711: PPUSH
37712: LD_VAR 0 3
37716: PPUSH
37717: LD_VAR 0 5
37721: PPUSH
37722: CALL_OW 1
37726: ST_TO_ADDR
// result := list ;
37727: LD_ADDR_VAR 0 4
37731: PUSH
37732: LD_VAR 0 1
37736: ST_TO_ADDR
// end ;
37737: LD_VAR 0 4
37741: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
37742: LD_INT 0
37744: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
37745: LD_ADDR_VAR 0 5
37749: PUSH
37750: LD_VAR 0 1
37754: PPUSH
37755: CALL_OW 250
37759: PPUSH
37760: LD_VAR 0 1
37764: PPUSH
37765: CALL_OW 251
37769: PPUSH
37770: LD_VAR 0 2
37774: PPUSH
37775: LD_VAR 0 3
37779: PPUSH
37780: LD_VAR 0 4
37784: PPUSH
37785: CALL 37795 0 5
37789: ST_TO_ADDR
// end ;
37790: LD_VAR 0 5
37794: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
37795: LD_INT 0
37797: PPUSH
37798: PPUSH
37799: PPUSH
37800: PPUSH
// if not list then
37801: LD_VAR 0 3
37805: NOT
37806: IFFALSE 37810
// exit ;
37808: GO 38198
// result := [ ] ;
37810: LD_ADDR_VAR 0 6
37814: PUSH
37815: EMPTY
37816: ST_TO_ADDR
// for i in list do
37817: LD_ADDR_VAR 0 7
37821: PUSH
37822: LD_VAR 0 3
37826: PUSH
37827: FOR_IN
37828: IFFALSE 38030
// begin tmp := GetDistUnitXY ( i , x , y ) ;
37830: LD_ADDR_VAR 0 9
37834: PUSH
37835: LD_VAR 0 7
37839: PPUSH
37840: LD_VAR 0 1
37844: PPUSH
37845: LD_VAR 0 2
37849: PPUSH
37850: CALL_OW 297
37854: ST_TO_ADDR
// if not result then
37855: LD_VAR 0 6
37859: NOT
37860: IFFALSE 37886
// result := [ [ i , tmp ] ] else
37862: LD_ADDR_VAR 0 6
37866: PUSH
37867: LD_VAR 0 7
37871: PUSH
37872: LD_VAR 0 9
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: PUSH
37881: EMPTY
37882: LIST
37883: ST_TO_ADDR
37884: GO 38028
// begin if result [ result ] [ 2 ] < tmp then
37886: LD_VAR 0 6
37890: PUSH
37891: LD_VAR 0 6
37895: ARRAY
37896: PUSH
37897: LD_INT 2
37899: ARRAY
37900: PUSH
37901: LD_VAR 0 9
37905: LESS
37906: IFFALSE 37948
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37908: LD_ADDR_VAR 0 6
37912: PUSH
37913: LD_VAR 0 6
37917: PPUSH
37918: LD_VAR 0 6
37922: PUSH
37923: LD_INT 1
37925: PLUS
37926: PPUSH
37927: LD_VAR 0 7
37931: PUSH
37932: LD_VAR 0 9
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: PPUSH
37941: CALL_OW 2
37945: ST_TO_ADDR
37946: GO 38028
// for j = 1 to result do
37948: LD_ADDR_VAR 0 8
37952: PUSH
37953: DOUBLE
37954: LD_INT 1
37956: DEC
37957: ST_TO_ADDR
37958: LD_VAR 0 6
37962: PUSH
37963: FOR_TO
37964: IFFALSE 38026
// begin if tmp < result [ j ] [ 2 ] then
37966: LD_VAR 0 9
37970: PUSH
37971: LD_VAR 0 6
37975: PUSH
37976: LD_VAR 0 8
37980: ARRAY
37981: PUSH
37982: LD_INT 2
37984: ARRAY
37985: LESS
37986: IFFALSE 38024
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37988: LD_ADDR_VAR 0 6
37992: PUSH
37993: LD_VAR 0 6
37997: PPUSH
37998: LD_VAR 0 8
38002: PPUSH
38003: LD_VAR 0 7
38007: PUSH
38008: LD_VAR 0 9
38012: PUSH
38013: EMPTY
38014: LIST
38015: LIST
38016: PPUSH
38017: CALL_OW 2
38021: ST_TO_ADDR
// break ;
38022: GO 38026
// end ; end ;
38024: GO 37963
38026: POP
38027: POP
// end ; end ;
38028: GO 37827
38030: POP
38031: POP
// if result and not asc then
38032: LD_VAR 0 6
38036: PUSH
38037: LD_VAR 0 4
38041: NOT
38042: AND
38043: IFFALSE 38118
// begin tmp := result ;
38045: LD_ADDR_VAR 0 9
38049: PUSH
38050: LD_VAR 0 6
38054: ST_TO_ADDR
// for i = tmp downto 1 do
38055: LD_ADDR_VAR 0 7
38059: PUSH
38060: DOUBLE
38061: LD_VAR 0 9
38065: INC
38066: ST_TO_ADDR
38067: LD_INT 1
38069: PUSH
38070: FOR_DOWNTO
38071: IFFALSE 38116
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
38073: LD_ADDR_VAR 0 6
38077: PUSH
38078: LD_VAR 0 6
38082: PPUSH
38083: LD_VAR 0 9
38087: PUSH
38088: LD_VAR 0 7
38092: MINUS
38093: PUSH
38094: LD_INT 1
38096: PLUS
38097: PPUSH
38098: LD_VAR 0 9
38102: PUSH
38103: LD_VAR 0 7
38107: ARRAY
38108: PPUSH
38109: CALL_OW 1
38113: ST_TO_ADDR
38114: GO 38070
38116: POP
38117: POP
// end ; tmp := [ ] ;
38118: LD_ADDR_VAR 0 9
38122: PUSH
38123: EMPTY
38124: ST_TO_ADDR
// if mode then
38125: LD_VAR 0 5
38129: IFFALSE 38198
// begin for i = 1 to result do
38131: LD_ADDR_VAR 0 7
38135: PUSH
38136: DOUBLE
38137: LD_INT 1
38139: DEC
38140: ST_TO_ADDR
38141: LD_VAR 0 6
38145: PUSH
38146: FOR_TO
38147: IFFALSE 38186
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
38149: LD_ADDR_VAR 0 9
38153: PUSH
38154: LD_VAR 0 9
38158: PPUSH
38159: LD_VAR 0 7
38163: PPUSH
38164: LD_VAR 0 6
38168: PUSH
38169: LD_VAR 0 7
38173: ARRAY
38174: PUSH
38175: LD_INT 1
38177: ARRAY
38178: PPUSH
38179: CALL_OW 1
38183: ST_TO_ADDR
38184: GO 38146
38186: POP
38187: POP
// result := tmp ;
38188: LD_ADDR_VAR 0 6
38192: PUSH
38193: LD_VAR 0 9
38197: ST_TO_ADDR
// end ; end ;
38198: LD_VAR 0 6
38202: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
38203: LD_INT 0
38205: PPUSH
38206: PPUSH
38207: PPUSH
38208: PPUSH
38209: PPUSH
38210: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
38211: LD_ADDR_VAR 0 5
38215: PUSH
38216: LD_INT 0
38218: PUSH
38219: LD_INT 0
38221: PUSH
38222: LD_INT 0
38224: PUSH
38225: EMPTY
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: LIST
38231: LIST
38232: ST_TO_ADDR
// if not x or not y then
38233: LD_VAR 0 2
38237: NOT
38238: PUSH
38239: LD_VAR 0 3
38243: NOT
38244: OR
38245: IFFALSE 38249
// exit ;
38247: GO 39899
// if not range then
38249: LD_VAR 0 4
38253: NOT
38254: IFFALSE 38264
// range := 10 ;
38256: LD_ADDR_VAR 0 4
38260: PUSH
38261: LD_INT 10
38263: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38264: LD_ADDR_VAR 0 8
38268: PUSH
38269: LD_INT 81
38271: PUSH
38272: LD_VAR 0 1
38276: PUSH
38277: EMPTY
38278: LIST
38279: LIST
38280: PUSH
38281: LD_INT 92
38283: PUSH
38284: LD_VAR 0 2
38288: PUSH
38289: LD_VAR 0 3
38293: PUSH
38294: LD_VAR 0 4
38298: PUSH
38299: EMPTY
38300: LIST
38301: LIST
38302: LIST
38303: LIST
38304: PUSH
38305: LD_INT 3
38307: PUSH
38308: LD_INT 21
38310: PUSH
38311: LD_INT 3
38313: PUSH
38314: EMPTY
38315: LIST
38316: LIST
38317: PUSH
38318: EMPTY
38319: LIST
38320: LIST
38321: PUSH
38322: EMPTY
38323: LIST
38324: LIST
38325: LIST
38326: PPUSH
38327: CALL_OW 69
38331: ST_TO_ADDR
// if not tmp then
38332: LD_VAR 0 8
38336: NOT
38337: IFFALSE 38341
// exit ;
38339: GO 39899
// for i in tmp do
38341: LD_ADDR_VAR 0 6
38345: PUSH
38346: LD_VAR 0 8
38350: PUSH
38351: FOR_IN
38352: IFFALSE 39874
// begin points := [ 0 , 0 , 0 ] ;
38354: LD_ADDR_VAR 0 9
38358: PUSH
38359: LD_INT 0
38361: PUSH
38362: LD_INT 0
38364: PUSH
38365: LD_INT 0
38367: PUSH
38368: EMPTY
38369: LIST
38370: LIST
38371: LIST
38372: ST_TO_ADDR
// bpoints := 1 ;
38373: LD_ADDR_VAR 0 10
38377: PUSH
38378: LD_INT 1
38380: ST_TO_ADDR
// case GetType ( i ) of unit_human :
38381: LD_VAR 0 6
38385: PPUSH
38386: CALL_OW 247
38390: PUSH
38391: LD_INT 1
38393: DOUBLE
38394: EQUAL
38395: IFTRUE 38399
38397: GO 38977
38399: POP
// begin if GetClass ( i ) = 1 then
38400: LD_VAR 0 6
38404: PPUSH
38405: CALL_OW 257
38409: PUSH
38410: LD_INT 1
38412: EQUAL
38413: IFFALSE 38434
// points := [ 10 , 5 , 3 ] ;
38415: LD_ADDR_VAR 0 9
38419: PUSH
38420: LD_INT 10
38422: PUSH
38423: LD_INT 5
38425: PUSH
38426: LD_INT 3
38428: PUSH
38429: EMPTY
38430: LIST
38431: LIST
38432: LIST
38433: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
38434: LD_VAR 0 6
38438: PPUSH
38439: CALL_OW 257
38443: PUSH
38444: LD_INT 2
38446: PUSH
38447: LD_INT 3
38449: PUSH
38450: LD_INT 4
38452: PUSH
38453: EMPTY
38454: LIST
38455: LIST
38456: LIST
38457: IN
38458: IFFALSE 38479
// points := [ 3 , 2 , 1 ] ;
38460: LD_ADDR_VAR 0 9
38464: PUSH
38465: LD_INT 3
38467: PUSH
38468: LD_INT 2
38470: PUSH
38471: LD_INT 1
38473: PUSH
38474: EMPTY
38475: LIST
38476: LIST
38477: LIST
38478: ST_TO_ADDR
// if GetClass ( i ) = 5 then
38479: LD_VAR 0 6
38483: PPUSH
38484: CALL_OW 257
38488: PUSH
38489: LD_INT 5
38491: EQUAL
38492: IFFALSE 38513
// points := [ 130 , 5 , 2 ] ;
38494: LD_ADDR_VAR 0 9
38498: PUSH
38499: LD_INT 130
38501: PUSH
38502: LD_INT 5
38504: PUSH
38505: LD_INT 2
38507: PUSH
38508: EMPTY
38509: LIST
38510: LIST
38511: LIST
38512: ST_TO_ADDR
// if GetClass ( i ) = 8 then
38513: LD_VAR 0 6
38517: PPUSH
38518: CALL_OW 257
38522: PUSH
38523: LD_INT 8
38525: EQUAL
38526: IFFALSE 38547
// points := [ 35 , 35 , 30 ] ;
38528: LD_ADDR_VAR 0 9
38532: PUSH
38533: LD_INT 35
38535: PUSH
38536: LD_INT 35
38538: PUSH
38539: LD_INT 30
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: LIST
38546: ST_TO_ADDR
// if GetClass ( i ) = 9 then
38547: LD_VAR 0 6
38551: PPUSH
38552: CALL_OW 257
38556: PUSH
38557: LD_INT 9
38559: EQUAL
38560: IFFALSE 38581
// points := [ 20 , 55 , 40 ] ;
38562: LD_ADDR_VAR 0 9
38566: PUSH
38567: LD_INT 20
38569: PUSH
38570: LD_INT 55
38572: PUSH
38573: LD_INT 40
38575: PUSH
38576: EMPTY
38577: LIST
38578: LIST
38579: LIST
38580: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
38581: LD_VAR 0 6
38585: PPUSH
38586: CALL_OW 257
38590: PUSH
38591: LD_INT 12
38593: PUSH
38594: LD_INT 16
38596: PUSH
38597: EMPTY
38598: LIST
38599: LIST
38600: IN
38601: IFFALSE 38622
// points := [ 5 , 3 , 2 ] ;
38603: LD_ADDR_VAR 0 9
38607: PUSH
38608: LD_INT 5
38610: PUSH
38611: LD_INT 3
38613: PUSH
38614: LD_INT 2
38616: PUSH
38617: EMPTY
38618: LIST
38619: LIST
38620: LIST
38621: ST_TO_ADDR
// if GetClass ( i ) = 17 then
38622: LD_VAR 0 6
38626: PPUSH
38627: CALL_OW 257
38631: PUSH
38632: LD_INT 17
38634: EQUAL
38635: IFFALSE 38656
// points := [ 100 , 50 , 75 ] ;
38637: LD_ADDR_VAR 0 9
38641: PUSH
38642: LD_INT 100
38644: PUSH
38645: LD_INT 50
38647: PUSH
38648: LD_INT 75
38650: PUSH
38651: EMPTY
38652: LIST
38653: LIST
38654: LIST
38655: ST_TO_ADDR
// if GetClass ( i ) = 15 then
38656: LD_VAR 0 6
38660: PPUSH
38661: CALL_OW 257
38665: PUSH
38666: LD_INT 15
38668: EQUAL
38669: IFFALSE 38690
// points := [ 10 , 5 , 3 ] ;
38671: LD_ADDR_VAR 0 9
38675: PUSH
38676: LD_INT 10
38678: PUSH
38679: LD_INT 5
38681: PUSH
38682: LD_INT 3
38684: PUSH
38685: EMPTY
38686: LIST
38687: LIST
38688: LIST
38689: ST_TO_ADDR
// if GetClass ( i ) = 14 then
38690: LD_VAR 0 6
38694: PPUSH
38695: CALL_OW 257
38699: PUSH
38700: LD_INT 14
38702: EQUAL
38703: IFFALSE 38724
// points := [ 10 , 0 , 0 ] ;
38705: LD_ADDR_VAR 0 9
38709: PUSH
38710: LD_INT 10
38712: PUSH
38713: LD_INT 0
38715: PUSH
38716: LD_INT 0
38718: PUSH
38719: EMPTY
38720: LIST
38721: LIST
38722: LIST
38723: ST_TO_ADDR
// if GetClass ( i ) = 11 then
38724: LD_VAR 0 6
38728: PPUSH
38729: CALL_OW 257
38733: PUSH
38734: LD_INT 11
38736: EQUAL
38737: IFFALSE 38758
// points := [ 30 , 10 , 5 ] ;
38739: LD_ADDR_VAR 0 9
38743: PUSH
38744: LD_INT 30
38746: PUSH
38747: LD_INT 10
38749: PUSH
38750: LD_INT 5
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: LIST
38757: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
38758: LD_VAR 0 1
38762: PPUSH
38763: LD_INT 5
38765: PPUSH
38766: CALL_OW 321
38770: PUSH
38771: LD_INT 2
38773: EQUAL
38774: IFFALSE 38791
// bpoints := bpoints * 1.8 ;
38776: LD_ADDR_VAR 0 10
38780: PUSH
38781: LD_VAR 0 10
38785: PUSH
38786: LD_REAL  1.80000000000000E+0000
38789: MUL
38790: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
38791: LD_VAR 0 6
38795: PPUSH
38796: CALL_OW 257
38800: PUSH
38801: LD_INT 1
38803: PUSH
38804: LD_INT 2
38806: PUSH
38807: LD_INT 3
38809: PUSH
38810: LD_INT 4
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: LIST
38817: LIST
38818: IN
38819: PUSH
38820: LD_VAR 0 1
38824: PPUSH
38825: LD_INT 51
38827: PPUSH
38828: CALL_OW 321
38832: PUSH
38833: LD_INT 2
38835: EQUAL
38836: AND
38837: IFFALSE 38854
// bpoints := bpoints * 1.2 ;
38839: LD_ADDR_VAR 0 10
38843: PUSH
38844: LD_VAR 0 10
38848: PUSH
38849: LD_REAL  1.20000000000000E+0000
38852: MUL
38853: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
38854: LD_VAR 0 6
38858: PPUSH
38859: CALL_OW 257
38863: PUSH
38864: LD_INT 5
38866: PUSH
38867: LD_INT 7
38869: PUSH
38870: LD_INT 9
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: LIST
38877: IN
38878: PUSH
38879: LD_VAR 0 1
38883: PPUSH
38884: LD_INT 52
38886: PPUSH
38887: CALL_OW 321
38891: PUSH
38892: LD_INT 2
38894: EQUAL
38895: AND
38896: IFFALSE 38913
// bpoints := bpoints * 1.5 ;
38898: LD_ADDR_VAR 0 10
38902: PUSH
38903: LD_VAR 0 10
38907: PUSH
38908: LD_REAL  1.50000000000000E+0000
38911: MUL
38912: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38913: LD_VAR 0 1
38917: PPUSH
38918: LD_INT 66
38920: PPUSH
38921: CALL_OW 321
38925: PUSH
38926: LD_INT 2
38928: EQUAL
38929: IFFALSE 38946
// bpoints := bpoints * 1.1 ;
38931: LD_ADDR_VAR 0 10
38935: PUSH
38936: LD_VAR 0 10
38940: PUSH
38941: LD_REAL  1.10000000000000E+0000
38944: MUL
38945: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38946: LD_ADDR_VAR 0 10
38950: PUSH
38951: LD_VAR 0 10
38955: PUSH
38956: LD_VAR 0 6
38960: PPUSH
38961: LD_INT 1
38963: PPUSH
38964: CALL_OW 259
38968: PUSH
38969: LD_REAL  1.15000000000000E+0000
38972: MUL
38973: MUL
38974: ST_TO_ADDR
// end ; unit_vehicle :
38975: GO 39803
38977: LD_INT 2
38979: DOUBLE
38980: EQUAL
38981: IFTRUE 38985
38983: GO 39791
38985: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38986: LD_VAR 0 6
38990: PPUSH
38991: CALL_OW 264
38995: PUSH
38996: LD_INT 2
38998: PUSH
38999: LD_INT 42
39001: PUSH
39002: LD_INT 24
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: LIST
39009: IN
39010: IFFALSE 39031
// points := [ 25 , 5 , 3 ] ;
39012: LD_ADDR_VAR 0 9
39016: PUSH
39017: LD_INT 25
39019: PUSH
39020: LD_INT 5
39022: PUSH
39023: LD_INT 3
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: LIST
39030: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
39031: LD_VAR 0 6
39035: PPUSH
39036: CALL_OW 264
39040: PUSH
39041: LD_INT 4
39043: PUSH
39044: LD_INT 43
39046: PUSH
39047: LD_INT 25
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: LIST
39054: IN
39055: IFFALSE 39076
// points := [ 40 , 15 , 5 ] ;
39057: LD_ADDR_VAR 0 9
39061: PUSH
39062: LD_INT 40
39064: PUSH
39065: LD_INT 15
39067: PUSH
39068: LD_INT 5
39070: PUSH
39071: EMPTY
39072: LIST
39073: LIST
39074: LIST
39075: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
39076: LD_VAR 0 6
39080: PPUSH
39081: CALL_OW 264
39085: PUSH
39086: LD_INT 3
39088: PUSH
39089: LD_INT 23
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: IN
39096: IFFALSE 39117
// points := [ 7 , 25 , 8 ] ;
39098: LD_ADDR_VAR 0 9
39102: PUSH
39103: LD_INT 7
39105: PUSH
39106: LD_INT 25
39108: PUSH
39109: LD_INT 8
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: LIST
39116: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
39117: LD_VAR 0 6
39121: PPUSH
39122: CALL_OW 264
39126: PUSH
39127: LD_INT 5
39129: PUSH
39130: LD_INT 27
39132: PUSH
39133: LD_INT 44
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: LIST
39140: IN
39141: IFFALSE 39162
// points := [ 14 , 50 , 16 ] ;
39143: LD_ADDR_VAR 0 9
39147: PUSH
39148: LD_INT 14
39150: PUSH
39151: LD_INT 50
39153: PUSH
39154: LD_INT 16
39156: PUSH
39157: EMPTY
39158: LIST
39159: LIST
39160: LIST
39161: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
39162: LD_VAR 0 6
39166: PPUSH
39167: CALL_OW 264
39171: PUSH
39172: LD_INT 6
39174: PUSH
39175: LD_INT 46
39177: PUSH
39178: EMPTY
39179: LIST
39180: LIST
39181: IN
39182: IFFALSE 39203
// points := [ 32 , 120 , 70 ] ;
39184: LD_ADDR_VAR 0 9
39188: PUSH
39189: LD_INT 32
39191: PUSH
39192: LD_INT 120
39194: PUSH
39195: LD_INT 70
39197: PUSH
39198: EMPTY
39199: LIST
39200: LIST
39201: LIST
39202: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
39203: LD_VAR 0 6
39207: PPUSH
39208: CALL_OW 264
39212: PUSH
39213: LD_INT 7
39215: PUSH
39216: LD_INT 28
39218: PUSH
39219: LD_INT 45
39221: PUSH
39222: LD_INT 92
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: LIST
39229: LIST
39230: IN
39231: IFFALSE 39252
// points := [ 35 , 20 , 45 ] ;
39233: LD_ADDR_VAR 0 9
39237: PUSH
39238: LD_INT 35
39240: PUSH
39241: LD_INT 20
39243: PUSH
39244: LD_INT 45
39246: PUSH
39247: EMPTY
39248: LIST
39249: LIST
39250: LIST
39251: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
39252: LD_VAR 0 6
39256: PPUSH
39257: CALL_OW 264
39261: PUSH
39262: LD_INT 47
39264: PUSH
39265: EMPTY
39266: LIST
39267: IN
39268: IFFALSE 39289
// points := [ 67 , 45 , 75 ] ;
39270: LD_ADDR_VAR 0 9
39274: PUSH
39275: LD_INT 67
39277: PUSH
39278: LD_INT 45
39280: PUSH
39281: LD_INT 75
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: LIST
39288: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
39289: LD_VAR 0 6
39293: PPUSH
39294: CALL_OW 264
39298: PUSH
39299: LD_INT 26
39301: PUSH
39302: EMPTY
39303: LIST
39304: IN
39305: IFFALSE 39326
// points := [ 120 , 30 , 80 ] ;
39307: LD_ADDR_VAR 0 9
39311: PUSH
39312: LD_INT 120
39314: PUSH
39315: LD_INT 30
39317: PUSH
39318: LD_INT 80
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: LIST
39325: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
39326: LD_VAR 0 6
39330: PPUSH
39331: CALL_OW 264
39335: PUSH
39336: LD_INT 22
39338: PUSH
39339: EMPTY
39340: LIST
39341: IN
39342: IFFALSE 39363
// points := [ 40 , 1 , 1 ] ;
39344: LD_ADDR_VAR 0 9
39348: PUSH
39349: LD_INT 40
39351: PUSH
39352: LD_INT 1
39354: PUSH
39355: LD_INT 1
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: LIST
39362: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
39363: LD_VAR 0 6
39367: PPUSH
39368: CALL_OW 264
39372: PUSH
39373: LD_INT 29
39375: PUSH
39376: EMPTY
39377: LIST
39378: IN
39379: IFFALSE 39400
// points := [ 70 , 200 , 400 ] ;
39381: LD_ADDR_VAR 0 9
39385: PUSH
39386: LD_INT 70
39388: PUSH
39389: LD_INT 200
39391: PUSH
39392: LD_INT 400
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: LIST
39399: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
39400: LD_VAR 0 6
39404: PPUSH
39405: CALL_OW 264
39409: PUSH
39410: LD_INT 14
39412: PUSH
39413: LD_INT 53
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: IN
39420: IFFALSE 39441
// points := [ 40 , 10 , 20 ] ;
39422: LD_ADDR_VAR 0 9
39426: PUSH
39427: LD_INT 40
39429: PUSH
39430: LD_INT 10
39432: PUSH
39433: LD_INT 20
39435: PUSH
39436: EMPTY
39437: LIST
39438: LIST
39439: LIST
39440: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
39441: LD_VAR 0 6
39445: PPUSH
39446: CALL_OW 264
39450: PUSH
39451: LD_INT 9
39453: PUSH
39454: EMPTY
39455: LIST
39456: IN
39457: IFFALSE 39478
// points := [ 5 , 70 , 20 ] ;
39459: LD_ADDR_VAR 0 9
39463: PUSH
39464: LD_INT 5
39466: PUSH
39467: LD_INT 70
39469: PUSH
39470: LD_INT 20
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: LIST
39477: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
39478: LD_VAR 0 6
39482: PPUSH
39483: CALL_OW 264
39487: PUSH
39488: LD_INT 10
39490: PUSH
39491: EMPTY
39492: LIST
39493: IN
39494: IFFALSE 39515
// points := [ 35 , 110 , 70 ] ;
39496: LD_ADDR_VAR 0 9
39500: PUSH
39501: LD_INT 35
39503: PUSH
39504: LD_INT 110
39506: PUSH
39507: LD_INT 70
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: LIST
39514: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
39515: LD_VAR 0 6
39519: PPUSH
39520: CALL_OW 265
39524: PUSH
39525: LD_INT 25
39527: EQUAL
39528: IFFALSE 39549
// points := [ 80 , 65 , 100 ] ;
39530: LD_ADDR_VAR 0 9
39534: PUSH
39535: LD_INT 80
39537: PUSH
39538: LD_INT 65
39540: PUSH
39541: LD_INT 100
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: LIST
39548: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
39549: LD_VAR 0 6
39553: PPUSH
39554: CALL_OW 263
39558: PUSH
39559: LD_INT 1
39561: EQUAL
39562: IFFALSE 39597
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
39564: LD_ADDR_VAR 0 10
39568: PUSH
39569: LD_VAR 0 10
39573: PUSH
39574: LD_VAR 0 6
39578: PPUSH
39579: CALL_OW 311
39583: PPUSH
39584: LD_INT 3
39586: PPUSH
39587: CALL_OW 259
39591: PUSH
39592: LD_INT 4
39594: MUL
39595: MUL
39596: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
39597: LD_VAR 0 6
39601: PPUSH
39602: CALL_OW 263
39606: PUSH
39607: LD_INT 2
39609: EQUAL
39610: IFFALSE 39661
// begin j := IsControledBy ( i ) ;
39612: LD_ADDR_VAR 0 7
39616: PUSH
39617: LD_VAR 0 6
39621: PPUSH
39622: CALL_OW 312
39626: ST_TO_ADDR
// if j then
39627: LD_VAR 0 7
39631: IFFALSE 39661
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
39633: LD_ADDR_VAR 0 10
39637: PUSH
39638: LD_VAR 0 10
39642: PUSH
39643: LD_VAR 0 7
39647: PPUSH
39648: LD_INT 3
39650: PPUSH
39651: CALL_OW 259
39655: PUSH
39656: LD_INT 3
39658: MUL
39659: MUL
39660: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
39661: LD_VAR 0 6
39665: PPUSH
39666: CALL_OW 264
39670: PUSH
39671: LD_INT 5
39673: PUSH
39674: LD_INT 6
39676: PUSH
39677: LD_INT 46
39679: PUSH
39680: LD_INT 44
39682: PUSH
39683: LD_INT 47
39685: PUSH
39686: LD_INT 45
39688: PUSH
39689: LD_INT 28
39691: PUSH
39692: LD_INT 7
39694: PUSH
39695: LD_INT 27
39697: PUSH
39698: LD_INT 29
39700: PUSH
39701: EMPTY
39702: LIST
39703: LIST
39704: LIST
39705: LIST
39706: LIST
39707: LIST
39708: LIST
39709: LIST
39710: LIST
39711: LIST
39712: IN
39713: PUSH
39714: LD_VAR 0 1
39718: PPUSH
39719: LD_INT 52
39721: PPUSH
39722: CALL_OW 321
39726: PUSH
39727: LD_INT 2
39729: EQUAL
39730: AND
39731: IFFALSE 39748
// bpoints := bpoints * 1.2 ;
39733: LD_ADDR_VAR 0 10
39737: PUSH
39738: LD_VAR 0 10
39742: PUSH
39743: LD_REAL  1.20000000000000E+0000
39746: MUL
39747: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
39748: LD_VAR 0 6
39752: PPUSH
39753: CALL_OW 264
39757: PUSH
39758: LD_INT 6
39760: PUSH
39761: LD_INT 46
39763: PUSH
39764: LD_INT 47
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: LIST
39771: IN
39772: IFFALSE 39789
// bpoints := bpoints * 1.2 ;
39774: LD_ADDR_VAR 0 10
39778: PUSH
39779: LD_VAR 0 10
39783: PUSH
39784: LD_REAL  1.20000000000000E+0000
39787: MUL
39788: ST_TO_ADDR
// end ; unit_building :
39789: GO 39803
39791: LD_INT 3
39793: DOUBLE
39794: EQUAL
39795: IFTRUE 39799
39797: GO 39802
39799: POP
// ; end ;
39800: GO 39803
39802: POP
// for j = 1 to 3 do
39803: LD_ADDR_VAR 0 7
39807: PUSH
39808: DOUBLE
39809: LD_INT 1
39811: DEC
39812: ST_TO_ADDR
39813: LD_INT 3
39815: PUSH
39816: FOR_TO
39817: IFFALSE 39870
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
39819: LD_ADDR_VAR 0 5
39823: PUSH
39824: LD_VAR 0 5
39828: PPUSH
39829: LD_VAR 0 7
39833: PPUSH
39834: LD_VAR 0 5
39838: PUSH
39839: LD_VAR 0 7
39843: ARRAY
39844: PUSH
39845: LD_VAR 0 9
39849: PUSH
39850: LD_VAR 0 7
39854: ARRAY
39855: PUSH
39856: LD_VAR 0 10
39860: MUL
39861: PLUS
39862: PPUSH
39863: CALL_OW 1
39867: ST_TO_ADDR
39868: GO 39816
39870: POP
39871: POP
// end ;
39872: GO 38351
39874: POP
39875: POP
// result := Replace ( result , 4 , tmp ) ;
39876: LD_ADDR_VAR 0 5
39880: PUSH
39881: LD_VAR 0 5
39885: PPUSH
39886: LD_INT 4
39888: PPUSH
39889: LD_VAR 0 8
39893: PPUSH
39894: CALL_OW 1
39898: ST_TO_ADDR
// end ;
39899: LD_VAR 0 5
39903: RET
// export function DangerAtRange ( unit , range ) ; begin
39904: LD_INT 0
39906: PPUSH
// if not unit then
39907: LD_VAR 0 1
39911: NOT
39912: IFFALSE 39916
// exit ;
39914: GO 39961
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39916: LD_ADDR_VAR 0 3
39920: PUSH
39921: LD_VAR 0 1
39925: PPUSH
39926: CALL_OW 255
39930: PPUSH
39931: LD_VAR 0 1
39935: PPUSH
39936: CALL_OW 250
39940: PPUSH
39941: LD_VAR 0 1
39945: PPUSH
39946: CALL_OW 251
39950: PPUSH
39951: LD_VAR 0 2
39955: PPUSH
39956: CALL 38203 0 4
39960: ST_TO_ADDR
// end ;
39961: LD_VAR 0 3
39965: RET
// export function DangerInArea ( side , area ) ; begin
39966: LD_INT 0
39968: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39969: LD_ADDR_VAR 0 3
39973: PUSH
39974: LD_VAR 0 2
39978: PPUSH
39979: LD_INT 81
39981: PUSH
39982: LD_VAR 0 1
39986: PUSH
39987: EMPTY
39988: LIST
39989: LIST
39990: PPUSH
39991: CALL_OW 70
39995: ST_TO_ADDR
// end ;
39996: LD_VAR 0 3
40000: RET
// export function IsExtension ( b ) ; begin
40001: LD_INT 0
40003: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
40004: LD_ADDR_VAR 0 2
40008: PUSH
40009: LD_VAR 0 1
40013: PUSH
40014: LD_INT 23
40016: PUSH
40017: LD_INT 20
40019: PUSH
40020: LD_INT 22
40022: PUSH
40023: LD_INT 17
40025: PUSH
40026: LD_INT 24
40028: PUSH
40029: LD_INT 21
40031: PUSH
40032: LD_INT 19
40034: PUSH
40035: LD_INT 16
40037: PUSH
40038: LD_INT 25
40040: PUSH
40041: LD_INT 18
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: IN
40056: ST_TO_ADDR
// end ;
40057: LD_VAR 0 2
40061: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
40062: LD_INT 0
40064: PPUSH
40065: PPUSH
40066: PPUSH
// result := [ ] ;
40067: LD_ADDR_VAR 0 4
40071: PUSH
40072: EMPTY
40073: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
40074: LD_ADDR_VAR 0 5
40078: PUSH
40079: LD_VAR 0 2
40083: PPUSH
40084: LD_INT 21
40086: PUSH
40087: LD_INT 3
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: PPUSH
40094: CALL_OW 70
40098: ST_TO_ADDR
// if not tmp then
40099: LD_VAR 0 5
40103: NOT
40104: IFFALSE 40108
// exit ;
40106: GO 40172
// if checkLink then
40108: LD_VAR 0 3
40112: IFFALSE 40162
// begin for i in tmp do
40114: LD_ADDR_VAR 0 6
40118: PUSH
40119: LD_VAR 0 5
40123: PUSH
40124: FOR_IN
40125: IFFALSE 40160
// if GetBase ( i ) <> base then
40127: LD_VAR 0 6
40131: PPUSH
40132: CALL_OW 274
40136: PUSH
40137: LD_VAR 0 1
40141: NONEQUAL
40142: IFFALSE 40158
// ComLinkToBase ( base , i ) ;
40144: LD_VAR 0 1
40148: PPUSH
40149: LD_VAR 0 6
40153: PPUSH
40154: CALL_OW 169
40158: GO 40124
40160: POP
40161: POP
// end ; result := tmp ;
40162: LD_ADDR_VAR 0 4
40166: PUSH
40167: LD_VAR 0 5
40171: ST_TO_ADDR
// end ;
40172: LD_VAR 0 4
40176: RET
// export function ComComplete ( units , b ) ; var i ; begin
40177: LD_INT 0
40179: PPUSH
40180: PPUSH
// if not units then
40181: LD_VAR 0 1
40185: NOT
40186: IFFALSE 40190
// exit ;
40188: GO 40280
// for i in units do
40190: LD_ADDR_VAR 0 4
40194: PUSH
40195: LD_VAR 0 1
40199: PUSH
40200: FOR_IN
40201: IFFALSE 40278
// if BuildingStatus ( b ) = bs_build then
40203: LD_VAR 0 2
40207: PPUSH
40208: CALL_OW 461
40212: PUSH
40213: LD_INT 1
40215: EQUAL
40216: IFFALSE 40276
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
40218: LD_VAR 0 4
40222: PPUSH
40223: LD_STRING h
40225: PUSH
40226: LD_VAR 0 2
40230: PPUSH
40231: CALL_OW 250
40235: PUSH
40236: LD_VAR 0 2
40240: PPUSH
40241: CALL_OW 251
40245: PUSH
40246: LD_VAR 0 2
40250: PUSH
40251: LD_INT 0
40253: PUSH
40254: LD_INT 0
40256: PUSH
40257: LD_INT 0
40259: PUSH
40260: EMPTY
40261: LIST
40262: LIST
40263: LIST
40264: LIST
40265: LIST
40266: LIST
40267: LIST
40268: PUSH
40269: EMPTY
40270: LIST
40271: PPUSH
40272: CALL_OW 446
40276: GO 40200
40278: POP
40279: POP
// end ;
40280: LD_VAR 0 3
40284: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
40285: LD_INT 0
40287: PPUSH
40288: PPUSH
40289: PPUSH
40290: PPUSH
40291: PPUSH
40292: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
40293: LD_VAR 0 1
40297: NOT
40298: PUSH
40299: LD_VAR 0 1
40303: PPUSH
40304: CALL_OW 263
40308: PUSH
40309: LD_INT 2
40311: NONEQUAL
40312: OR
40313: IFFALSE 40317
// exit ;
40315: GO 40633
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
40317: LD_ADDR_VAR 0 6
40321: PUSH
40322: LD_INT 22
40324: PUSH
40325: LD_VAR 0 1
40329: PPUSH
40330: CALL_OW 255
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: LD_INT 2
40341: PUSH
40342: LD_INT 30
40344: PUSH
40345: LD_INT 36
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: PUSH
40352: LD_INT 34
40354: PUSH
40355: LD_INT 31
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: PUSH
40362: EMPTY
40363: LIST
40364: LIST
40365: LIST
40366: PUSH
40367: EMPTY
40368: LIST
40369: LIST
40370: PPUSH
40371: CALL_OW 69
40375: ST_TO_ADDR
// if not tmp then
40376: LD_VAR 0 6
40380: NOT
40381: IFFALSE 40385
// exit ;
40383: GO 40633
// result := [ ] ;
40385: LD_ADDR_VAR 0 2
40389: PUSH
40390: EMPTY
40391: ST_TO_ADDR
// for i in tmp do
40392: LD_ADDR_VAR 0 3
40396: PUSH
40397: LD_VAR 0 6
40401: PUSH
40402: FOR_IN
40403: IFFALSE 40474
// begin t := UnitsInside ( i ) ;
40405: LD_ADDR_VAR 0 4
40409: PUSH
40410: LD_VAR 0 3
40414: PPUSH
40415: CALL_OW 313
40419: ST_TO_ADDR
// if t then
40420: LD_VAR 0 4
40424: IFFALSE 40472
// for j in t do
40426: LD_ADDR_VAR 0 7
40430: PUSH
40431: LD_VAR 0 4
40435: PUSH
40436: FOR_IN
40437: IFFALSE 40470
// result := Replace ( result , result + 1 , j ) ;
40439: LD_ADDR_VAR 0 2
40443: PUSH
40444: LD_VAR 0 2
40448: PPUSH
40449: LD_VAR 0 2
40453: PUSH
40454: LD_INT 1
40456: PLUS
40457: PPUSH
40458: LD_VAR 0 7
40462: PPUSH
40463: CALL_OW 1
40467: ST_TO_ADDR
40468: GO 40436
40470: POP
40471: POP
// end ;
40472: GO 40402
40474: POP
40475: POP
// if not result then
40476: LD_VAR 0 2
40480: NOT
40481: IFFALSE 40485
// exit ;
40483: GO 40633
// mech := result [ 1 ] ;
40485: LD_ADDR_VAR 0 5
40489: PUSH
40490: LD_VAR 0 2
40494: PUSH
40495: LD_INT 1
40497: ARRAY
40498: ST_TO_ADDR
// if result > 1 then
40499: LD_VAR 0 2
40503: PUSH
40504: LD_INT 1
40506: GREATER
40507: IFFALSE 40619
// begin for i = 2 to result do
40509: LD_ADDR_VAR 0 3
40513: PUSH
40514: DOUBLE
40515: LD_INT 2
40517: DEC
40518: ST_TO_ADDR
40519: LD_VAR 0 2
40523: PUSH
40524: FOR_TO
40525: IFFALSE 40617
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
40527: LD_ADDR_VAR 0 4
40531: PUSH
40532: LD_VAR 0 2
40536: PUSH
40537: LD_VAR 0 3
40541: ARRAY
40542: PPUSH
40543: LD_INT 3
40545: PPUSH
40546: CALL_OW 259
40550: PUSH
40551: LD_VAR 0 2
40555: PUSH
40556: LD_VAR 0 3
40560: ARRAY
40561: PPUSH
40562: CALL_OW 432
40566: MINUS
40567: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
40568: LD_VAR 0 4
40572: PUSH
40573: LD_VAR 0 5
40577: PPUSH
40578: LD_INT 3
40580: PPUSH
40581: CALL_OW 259
40585: PUSH
40586: LD_VAR 0 5
40590: PPUSH
40591: CALL_OW 432
40595: MINUS
40596: GREATEREQUAL
40597: IFFALSE 40615
// mech := result [ i ] ;
40599: LD_ADDR_VAR 0 5
40603: PUSH
40604: LD_VAR 0 2
40608: PUSH
40609: LD_VAR 0 3
40613: ARRAY
40614: ST_TO_ADDR
// end ;
40615: GO 40524
40617: POP
40618: POP
// end ; ComLinkTo ( vehicle , mech ) ;
40619: LD_VAR 0 1
40623: PPUSH
40624: LD_VAR 0 5
40628: PPUSH
40629: CALL_OW 135
// end ;
40633: LD_VAR 0 2
40637: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
40638: LD_INT 0
40640: PPUSH
40641: PPUSH
40642: PPUSH
40643: PPUSH
40644: PPUSH
40645: PPUSH
40646: PPUSH
40647: PPUSH
40648: PPUSH
40649: PPUSH
40650: PPUSH
40651: PPUSH
40652: PPUSH
// result := [ ] ;
40653: LD_ADDR_VAR 0 7
40657: PUSH
40658: EMPTY
40659: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
40660: LD_VAR 0 1
40664: PPUSH
40665: CALL_OW 266
40669: PUSH
40670: LD_INT 0
40672: PUSH
40673: LD_INT 1
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: IN
40680: NOT
40681: IFFALSE 40685
// exit ;
40683: GO 42319
// if name then
40685: LD_VAR 0 3
40689: IFFALSE 40705
// SetBName ( base_dep , name ) ;
40691: LD_VAR 0 1
40695: PPUSH
40696: LD_VAR 0 3
40700: PPUSH
40701: CALL_OW 500
// base := GetBase ( base_dep ) ;
40705: LD_ADDR_VAR 0 15
40709: PUSH
40710: LD_VAR 0 1
40714: PPUSH
40715: CALL_OW 274
40719: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
40720: LD_ADDR_VAR 0 16
40724: PUSH
40725: LD_VAR 0 1
40729: PPUSH
40730: CALL_OW 255
40734: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
40735: LD_ADDR_VAR 0 17
40739: PUSH
40740: LD_VAR 0 1
40744: PPUSH
40745: CALL_OW 248
40749: ST_TO_ADDR
// if sources then
40750: LD_VAR 0 5
40754: IFFALSE 40801
// for i = 1 to 3 do
40756: LD_ADDR_VAR 0 8
40760: PUSH
40761: DOUBLE
40762: LD_INT 1
40764: DEC
40765: ST_TO_ADDR
40766: LD_INT 3
40768: PUSH
40769: FOR_TO
40770: IFFALSE 40799
// AddResourceType ( base , i , sources [ i ] ) ;
40772: LD_VAR 0 15
40776: PPUSH
40777: LD_VAR 0 8
40781: PPUSH
40782: LD_VAR 0 5
40786: PUSH
40787: LD_VAR 0 8
40791: ARRAY
40792: PPUSH
40793: CALL_OW 276
40797: GO 40769
40799: POP
40800: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
40801: LD_ADDR_VAR 0 18
40805: PUSH
40806: LD_VAR 0 15
40810: PPUSH
40811: LD_VAR 0 2
40815: PPUSH
40816: LD_INT 1
40818: PPUSH
40819: CALL 40062 0 3
40823: ST_TO_ADDR
// InitHc ;
40824: CALL_OW 19
// InitUc ;
40828: CALL_OW 18
// uc_side := side ;
40832: LD_ADDR_OWVAR 20
40836: PUSH
40837: LD_VAR 0 16
40841: ST_TO_ADDR
// uc_nation := nation ;
40842: LD_ADDR_OWVAR 21
40846: PUSH
40847: LD_VAR 0 17
40851: ST_TO_ADDR
// if buildings then
40852: LD_VAR 0 18
40856: IFFALSE 42178
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
40858: LD_ADDR_VAR 0 19
40862: PUSH
40863: LD_VAR 0 18
40867: PPUSH
40868: LD_INT 2
40870: PUSH
40871: LD_INT 30
40873: PUSH
40874: LD_INT 29
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PUSH
40881: LD_INT 30
40883: PUSH
40884: LD_INT 30
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: LIST
40895: PPUSH
40896: CALL_OW 72
40900: ST_TO_ADDR
// if tmp then
40901: LD_VAR 0 19
40905: IFFALSE 40953
// for i in tmp do
40907: LD_ADDR_VAR 0 8
40911: PUSH
40912: LD_VAR 0 19
40916: PUSH
40917: FOR_IN
40918: IFFALSE 40951
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40920: LD_VAR 0 8
40924: PPUSH
40925: CALL_OW 250
40929: PPUSH
40930: LD_VAR 0 8
40934: PPUSH
40935: CALL_OW 251
40939: PPUSH
40940: LD_VAR 0 16
40944: PPUSH
40945: CALL_OW 441
40949: GO 40917
40951: POP
40952: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40953: LD_VAR 0 18
40957: PPUSH
40958: LD_INT 2
40960: PUSH
40961: LD_INT 30
40963: PUSH
40964: LD_INT 32
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: PUSH
40971: LD_INT 30
40973: PUSH
40974: LD_INT 33
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: LIST
40985: PPUSH
40986: CALL_OW 72
40990: IFFALSE 41078
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40992: LD_ADDR_VAR 0 8
40996: PUSH
40997: LD_VAR 0 18
41001: PPUSH
41002: LD_INT 2
41004: PUSH
41005: LD_INT 30
41007: PUSH
41008: LD_INT 32
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: PUSH
41015: LD_INT 30
41017: PUSH
41018: LD_INT 33
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: LIST
41029: PPUSH
41030: CALL_OW 72
41034: PUSH
41035: FOR_IN
41036: IFFALSE 41076
// begin if not GetBWeapon ( i ) then
41038: LD_VAR 0 8
41042: PPUSH
41043: CALL_OW 269
41047: NOT
41048: IFFALSE 41074
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
41050: LD_VAR 0 8
41054: PPUSH
41055: LD_VAR 0 8
41059: PPUSH
41060: LD_VAR 0 2
41064: PPUSH
41065: CALL 42324 0 2
41069: PPUSH
41070: CALL_OW 431
// end ;
41074: GO 41035
41076: POP
41077: POP
// end ; for i = 1 to personel do
41078: LD_ADDR_VAR 0 8
41082: PUSH
41083: DOUBLE
41084: LD_INT 1
41086: DEC
41087: ST_TO_ADDR
41088: LD_VAR 0 6
41092: PUSH
41093: FOR_TO
41094: IFFALSE 42158
// begin if i > 4 then
41096: LD_VAR 0 8
41100: PUSH
41101: LD_INT 4
41103: GREATER
41104: IFFALSE 41108
// break ;
41106: GO 42158
// case i of 1 :
41108: LD_VAR 0 8
41112: PUSH
41113: LD_INT 1
41115: DOUBLE
41116: EQUAL
41117: IFTRUE 41121
41119: GO 41201
41121: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
41122: LD_ADDR_VAR 0 12
41126: PUSH
41127: LD_VAR 0 18
41131: PPUSH
41132: LD_INT 22
41134: PUSH
41135: LD_VAR 0 16
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: PUSH
41144: LD_INT 58
41146: PUSH
41147: EMPTY
41148: LIST
41149: PUSH
41150: LD_INT 2
41152: PUSH
41153: LD_INT 30
41155: PUSH
41156: LD_INT 32
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: PUSH
41163: LD_INT 30
41165: PUSH
41166: LD_INT 4
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: PUSH
41173: LD_INT 30
41175: PUSH
41176: LD_INT 5
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: PUSH
41183: EMPTY
41184: LIST
41185: LIST
41186: LIST
41187: LIST
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: LIST
41193: PPUSH
41194: CALL_OW 72
41198: ST_TO_ADDR
41199: GO 41423
41201: LD_INT 2
41203: DOUBLE
41204: EQUAL
41205: IFTRUE 41209
41207: GO 41271
41209: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
41210: LD_ADDR_VAR 0 12
41214: PUSH
41215: LD_VAR 0 18
41219: PPUSH
41220: LD_INT 22
41222: PUSH
41223: LD_VAR 0 16
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: PUSH
41232: LD_INT 2
41234: PUSH
41235: LD_INT 30
41237: PUSH
41238: LD_INT 0
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: PUSH
41245: LD_INT 30
41247: PUSH
41248: LD_INT 1
41250: PUSH
41251: EMPTY
41252: LIST
41253: LIST
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: LIST
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PPUSH
41264: CALL_OW 72
41268: ST_TO_ADDR
41269: GO 41423
41271: LD_INT 3
41273: DOUBLE
41274: EQUAL
41275: IFTRUE 41279
41277: GO 41341
41279: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
41280: LD_ADDR_VAR 0 12
41284: PUSH
41285: LD_VAR 0 18
41289: PPUSH
41290: LD_INT 22
41292: PUSH
41293: LD_VAR 0 16
41297: PUSH
41298: EMPTY
41299: LIST
41300: LIST
41301: PUSH
41302: LD_INT 2
41304: PUSH
41305: LD_INT 30
41307: PUSH
41308: LD_INT 2
41310: PUSH
41311: EMPTY
41312: LIST
41313: LIST
41314: PUSH
41315: LD_INT 30
41317: PUSH
41318: LD_INT 3
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: PUSH
41325: EMPTY
41326: LIST
41327: LIST
41328: LIST
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: PPUSH
41334: CALL_OW 72
41338: ST_TO_ADDR
41339: GO 41423
41341: LD_INT 4
41343: DOUBLE
41344: EQUAL
41345: IFTRUE 41349
41347: GO 41422
41349: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
41350: LD_ADDR_VAR 0 12
41354: PUSH
41355: LD_VAR 0 18
41359: PPUSH
41360: LD_INT 22
41362: PUSH
41363: LD_VAR 0 16
41367: PUSH
41368: EMPTY
41369: LIST
41370: LIST
41371: PUSH
41372: LD_INT 2
41374: PUSH
41375: LD_INT 30
41377: PUSH
41378: LD_INT 6
41380: PUSH
41381: EMPTY
41382: LIST
41383: LIST
41384: PUSH
41385: LD_INT 30
41387: PUSH
41388: LD_INT 7
41390: PUSH
41391: EMPTY
41392: LIST
41393: LIST
41394: PUSH
41395: LD_INT 30
41397: PUSH
41398: LD_INT 8
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PPUSH
41415: CALL_OW 72
41419: ST_TO_ADDR
41420: GO 41423
41422: POP
// if i = 1 then
41423: LD_VAR 0 8
41427: PUSH
41428: LD_INT 1
41430: EQUAL
41431: IFFALSE 41542
// begin tmp := [ ] ;
41433: LD_ADDR_VAR 0 19
41437: PUSH
41438: EMPTY
41439: ST_TO_ADDR
// for j in f do
41440: LD_ADDR_VAR 0 9
41444: PUSH
41445: LD_VAR 0 12
41449: PUSH
41450: FOR_IN
41451: IFFALSE 41524
// if GetBType ( j ) = b_bunker then
41453: LD_VAR 0 9
41457: PPUSH
41458: CALL_OW 266
41462: PUSH
41463: LD_INT 32
41465: EQUAL
41466: IFFALSE 41493
// tmp := Insert ( tmp , 1 , j ) else
41468: LD_ADDR_VAR 0 19
41472: PUSH
41473: LD_VAR 0 19
41477: PPUSH
41478: LD_INT 1
41480: PPUSH
41481: LD_VAR 0 9
41485: PPUSH
41486: CALL_OW 2
41490: ST_TO_ADDR
41491: GO 41522
// tmp := Insert ( tmp , tmp + 1 , j ) ;
41493: LD_ADDR_VAR 0 19
41497: PUSH
41498: LD_VAR 0 19
41502: PPUSH
41503: LD_VAR 0 19
41507: PUSH
41508: LD_INT 1
41510: PLUS
41511: PPUSH
41512: LD_VAR 0 9
41516: PPUSH
41517: CALL_OW 2
41521: ST_TO_ADDR
41522: GO 41450
41524: POP
41525: POP
// if tmp then
41526: LD_VAR 0 19
41530: IFFALSE 41542
// f := tmp ;
41532: LD_ADDR_VAR 0 12
41536: PUSH
41537: LD_VAR 0 19
41541: ST_TO_ADDR
// end ; x := personel [ i ] ;
41542: LD_ADDR_VAR 0 13
41546: PUSH
41547: LD_VAR 0 6
41551: PUSH
41552: LD_VAR 0 8
41556: ARRAY
41557: ST_TO_ADDR
// if x = - 1 then
41558: LD_VAR 0 13
41562: PUSH
41563: LD_INT 1
41565: NEG
41566: EQUAL
41567: IFFALSE 41776
// begin for j in f do
41569: LD_ADDR_VAR 0 9
41573: PUSH
41574: LD_VAR 0 12
41578: PUSH
41579: FOR_IN
41580: IFFALSE 41772
// repeat InitHc ;
41582: CALL_OW 19
// if GetBType ( j ) = b_barracks then
41586: LD_VAR 0 9
41590: PPUSH
41591: CALL_OW 266
41595: PUSH
41596: LD_INT 5
41598: EQUAL
41599: IFFALSE 41669
// begin if UnitsInside ( j ) < 3 then
41601: LD_VAR 0 9
41605: PPUSH
41606: CALL_OW 313
41610: PUSH
41611: LD_INT 3
41613: LESS
41614: IFFALSE 41650
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41616: LD_INT 0
41618: PPUSH
41619: LD_INT 5
41621: PUSH
41622: LD_INT 8
41624: PUSH
41625: LD_INT 9
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: LIST
41632: PUSH
41633: LD_VAR 0 17
41637: ARRAY
41638: PPUSH
41639: LD_VAR 0 4
41643: PPUSH
41644: CALL_OW 380
41648: GO 41667
// PrepareHuman ( false , i , skill ) ;
41650: LD_INT 0
41652: PPUSH
41653: LD_VAR 0 8
41657: PPUSH
41658: LD_VAR 0 4
41662: PPUSH
41663: CALL_OW 380
// end else
41667: GO 41686
// PrepareHuman ( false , i , skill ) ;
41669: LD_INT 0
41671: PPUSH
41672: LD_VAR 0 8
41676: PPUSH
41677: LD_VAR 0 4
41681: PPUSH
41682: CALL_OW 380
// un := CreateHuman ;
41686: LD_ADDR_VAR 0 14
41690: PUSH
41691: CALL_OW 44
41695: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41696: LD_ADDR_VAR 0 7
41700: PUSH
41701: LD_VAR 0 7
41705: PPUSH
41706: LD_INT 1
41708: PPUSH
41709: LD_VAR 0 14
41713: PPUSH
41714: CALL_OW 2
41718: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
41719: LD_VAR 0 14
41723: PPUSH
41724: LD_VAR 0 9
41728: PPUSH
41729: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
41733: LD_VAR 0 9
41737: PPUSH
41738: CALL_OW 313
41742: PUSH
41743: LD_INT 6
41745: EQUAL
41746: PUSH
41747: LD_VAR 0 9
41751: PPUSH
41752: CALL_OW 266
41756: PUSH
41757: LD_INT 32
41759: PUSH
41760: LD_INT 31
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: IN
41767: OR
41768: IFFALSE 41582
41770: GO 41579
41772: POP
41773: POP
// end else
41774: GO 42156
// for j = 1 to x do
41776: LD_ADDR_VAR 0 9
41780: PUSH
41781: DOUBLE
41782: LD_INT 1
41784: DEC
41785: ST_TO_ADDR
41786: LD_VAR 0 13
41790: PUSH
41791: FOR_TO
41792: IFFALSE 42154
// begin InitHc ;
41794: CALL_OW 19
// if not f then
41798: LD_VAR 0 12
41802: NOT
41803: IFFALSE 41892
// begin PrepareHuman ( false , i , skill ) ;
41805: LD_INT 0
41807: PPUSH
41808: LD_VAR 0 8
41812: PPUSH
41813: LD_VAR 0 4
41817: PPUSH
41818: CALL_OW 380
// un := CreateHuman ;
41822: LD_ADDR_VAR 0 14
41826: PUSH
41827: CALL_OW 44
41831: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41832: LD_ADDR_VAR 0 7
41836: PUSH
41837: LD_VAR 0 7
41841: PPUSH
41842: LD_INT 1
41844: PPUSH
41845: LD_VAR 0 14
41849: PPUSH
41850: CALL_OW 2
41854: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41855: LD_VAR 0 14
41859: PPUSH
41860: LD_VAR 0 1
41864: PPUSH
41865: CALL_OW 250
41869: PPUSH
41870: LD_VAR 0 1
41874: PPUSH
41875: CALL_OW 251
41879: PPUSH
41880: LD_INT 10
41882: PPUSH
41883: LD_INT 0
41885: PPUSH
41886: CALL_OW 50
// continue ;
41890: GO 41791
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
41892: LD_VAR 0 12
41896: PUSH
41897: LD_INT 1
41899: ARRAY
41900: PPUSH
41901: CALL_OW 313
41905: PUSH
41906: LD_VAR 0 12
41910: PUSH
41911: LD_INT 1
41913: ARRAY
41914: PPUSH
41915: CALL_OW 266
41919: PUSH
41920: LD_INT 32
41922: PUSH
41923: LD_INT 31
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: IN
41930: AND
41931: PUSH
41932: LD_VAR 0 12
41936: PUSH
41937: LD_INT 1
41939: ARRAY
41940: PPUSH
41941: CALL_OW 313
41945: PUSH
41946: LD_INT 6
41948: EQUAL
41949: OR
41950: IFFALSE 41970
// f := Delete ( f , 1 ) ;
41952: LD_ADDR_VAR 0 12
41956: PUSH
41957: LD_VAR 0 12
41961: PPUSH
41962: LD_INT 1
41964: PPUSH
41965: CALL_OW 3
41969: ST_TO_ADDR
// if not f then
41970: LD_VAR 0 12
41974: NOT
41975: IFFALSE 41993
// begin x := x + 2 ;
41977: LD_ADDR_VAR 0 13
41981: PUSH
41982: LD_VAR 0 13
41986: PUSH
41987: LD_INT 2
41989: PLUS
41990: ST_TO_ADDR
// continue ;
41991: GO 41791
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41993: LD_VAR 0 12
41997: PUSH
41998: LD_INT 1
42000: ARRAY
42001: PPUSH
42002: CALL_OW 266
42006: PUSH
42007: LD_INT 5
42009: EQUAL
42010: IFFALSE 42084
// begin if UnitsInside ( f [ 1 ] ) < 3 then
42012: LD_VAR 0 12
42016: PUSH
42017: LD_INT 1
42019: ARRAY
42020: PPUSH
42021: CALL_OW 313
42025: PUSH
42026: LD_INT 3
42028: LESS
42029: IFFALSE 42065
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42031: LD_INT 0
42033: PPUSH
42034: LD_INT 5
42036: PUSH
42037: LD_INT 8
42039: PUSH
42040: LD_INT 9
42042: PUSH
42043: EMPTY
42044: LIST
42045: LIST
42046: LIST
42047: PUSH
42048: LD_VAR 0 17
42052: ARRAY
42053: PPUSH
42054: LD_VAR 0 4
42058: PPUSH
42059: CALL_OW 380
42063: GO 42082
// PrepareHuman ( false , i , skill ) ;
42065: LD_INT 0
42067: PPUSH
42068: LD_VAR 0 8
42072: PPUSH
42073: LD_VAR 0 4
42077: PPUSH
42078: CALL_OW 380
// end else
42082: GO 42101
// PrepareHuman ( false , i , skill ) ;
42084: LD_INT 0
42086: PPUSH
42087: LD_VAR 0 8
42091: PPUSH
42092: LD_VAR 0 4
42096: PPUSH
42097: CALL_OW 380
// un := CreateHuman ;
42101: LD_ADDR_VAR 0 14
42105: PUSH
42106: CALL_OW 44
42110: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42111: LD_ADDR_VAR 0 7
42115: PUSH
42116: LD_VAR 0 7
42120: PPUSH
42121: LD_INT 1
42123: PPUSH
42124: LD_VAR 0 14
42128: PPUSH
42129: CALL_OW 2
42133: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
42134: LD_VAR 0 14
42138: PPUSH
42139: LD_VAR 0 12
42143: PUSH
42144: LD_INT 1
42146: ARRAY
42147: PPUSH
42148: CALL_OW 52
// end ;
42152: GO 41791
42154: POP
42155: POP
// end ;
42156: GO 41093
42158: POP
42159: POP
// result := result ^ buildings ;
42160: LD_ADDR_VAR 0 7
42164: PUSH
42165: LD_VAR 0 7
42169: PUSH
42170: LD_VAR 0 18
42174: ADD
42175: ST_TO_ADDR
// end else
42176: GO 42319
// begin for i = 1 to personel do
42178: LD_ADDR_VAR 0 8
42182: PUSH
42183: DOUBLE
42184: LD_INT 1
42186: DEC
42187: ST_TO_ADDR
42188: LD_VAR 0 6
42192: PUSH
42193: FOR_TO
42194: IFFALSE 42317
// begin if i > 4 then
42196: LD_VAR 0 8
42200: PUSH
42201: LD_INT 4
42203: GREATER
42204: IFFALSE 42208
// break ;
42206: GO 42317
// x := personel [ i ] ;
42208: LD_ADDR_VAR 0 13
42212: PUSH
42213: LD_VAR 0 6
42217: PUSH
42218: LD_VAR 0 8
42222: ARRAY
42223: ST_TO_ADDR
// if x = - 1 then
42224: LD_VAR 0 13
42228: PUSH
42229: LD_INT 1
42231: NEG
42232: EQUAL
42233: IFFALSE 42237
// continue ;
42235: GO 42193
// PrepareHuman ( false , i , skill ) ;
42237: LD_INT 0
42239: PPUSH
42240: LD_VAR 0 8
42244: PPUSH
42245: LD_VAR 0 4
42249: PPUSH
42250: CALL_OW 380
// un := CreateHuman ;
42254: LD_ADDR_VAR 0 14
42258: PUSH
42259: CALL_OW 44
42263: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42264: LD_VAR 0 14
42268: PPUSH
42269: LD_VAR 0 1
42273: PPUSH
42274: CALL_OW 250
42278: PPUSH
42279: LD_VAR 0 1
42283: PPUSH
42284: CALL_OW 251
42288: PPUSH
42289: LD_INT 10
42291: PPUSH
42292: LD_INT 0
42294: PPUSH
42295: CALL_OW 50
// result := result ^ un ;
42299: LD_ADDR_VAR 0 7
42303: PUSH
42304: LD_VAR 0 7
42308: PUSH
42309: LD_VAR 0 14
42313: ADD
42314: ST_TO_ADDR
// end ;
42315: GO 42193
42317: POP
42318: POP
// end ; end ;
42319: LD_VAR 0 7
42323: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
42324: LD_INT 0
42326: PPUSH
42327: PPUSH
42328: PPUSH
42329: PPUSH
42330: PPUSH
42331: PPUSH
42332: PPUSH
42333: PPUSH
42334: PPUSH
42335: PPUSH
42336: PPUSH
42337: PPUSH
42338: PPUSH
42339: PPUSH
42340: PPUSH
42341: PPUSH
// result := false ;
42342: LD_ADDR_VAR 0 3
42346: PUSH
42347: LD_INT 0
42349: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
42350: LD_VAR 0 1
42354: NOT
42355: PUSH
42356: LD_VAR 0 1
42360: PPUSH
42361: CALL_OW 266
42365: PUSH
42366: LD_INT 32
42368: PUSH
42369: LD_INT 33
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: IN
42376: NOT
42377: OR
42378: IFFALSE 42382
// exit ;
42380: GO 43491
// nat := GetNation ( tower ) ;
42382: LD_ADDR_VAR 0 12
42386: PUSH
42387: LD_VAR 0 1
42391: PPUSH
42392: CALL_OW 248
42396: ST_TO_ADDR
// side := GetSide ( tower ) ;
42397: LD_ADDR_VAR 0 16
42401: PUSH
42402: LD_VAR 0 1
42406: PPUSH
42407: CALL_OW 255
42411: ST_TO_ADDR
// x := GetX ( tower ) ;
42412: LD_ADDR_VAR 0 10
42416: PUSH
42417: LD_VAR 0 1
42421: PPUSH
42422: CALL_OW 250
42426: ST_TO_ADDR
// y := GetY ( tower ) ;
42427: LD_ADDR_VAR 0 11
42431: PUSH
42432: LD_VAR 0 1
42436: PPUSH
42437: CALL_OW 251
42441: ST_TO_ADDR
// if not x or not y then
42442: LD_VAR 0 10
42446: NOT
42447: PUSH
42448: LD_VAR 0 11
42452: NOT
42453: OR
42454: IFFALSE 42458
// exit ;
42456: GO 43491
// weapon := 0 ;
42458: LD_ADDR_VAR 0 18
42462: PUSH
42463: LD_INT 0
42465: ST_TO_ADDR
// fac_list := [ ] ;
42466: LD_ADDR_VAR 0 17
42470: PUSH
42471: EMPTY
42472: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
42473: LD_ADDR_VAR 0 6
42477: PUSH
42478: LD_VAR 0 1
42482: PPUSH
42483: CALL_OW 274
42487: PPUSH
42488: LD_VAR 0 2
42492: PPUSH
42493: LD_INT 0
42495: PPUSH
42496: CALL 40062 0 3
42500: PPUSH
42501: LD_INT 30
42503: PUSH
42504: LD_INT 3
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PPUSH
42511: CALL_OW 72
42515: ST_TO_ADDR
// if not factories then
42516: LD_VAR 0 6
42520: NOT
42521: IFFALSE 42525
// exit ;
42523: GO 43491
// for i in factories do
42525: LD_ADDR_VAR 0 8
42529: PUSH
42530: LD_VAR 0 6
42534: PUSH
42535: FOR_IN
42536: IFFALSE 42561
// fac_list := fac_list union AvailableWeaponList ( i ) ;
42538: LD_ADDR_VAR 0 17
42542: PUSH
42543: LD_VAR 0 17
42547: PUSH
42548: LD_VAR 0 8
42552: PPUSH
42553: CALL_OW 478
42557: UNION
42558: ST_TO_ADDR
42559: GO 42535
42561: POP
42562: POP
// if not fac_list then
42563: LD_VAR 0 17
42567: NOT
42568: IFFALSE 42572
// exit ;
42570: GO 43491
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
42572: LD_ADDR_VAR 0 5
42576: PUSH
42577: LD_INT 4
42579: PUSH
42580: LD_INT 5
42582: PUSH
42583: LD_INT 9
42585: PUSH
42586: LD_INT 10
42588: PUSH
42589: LD_INT 6
42591: PUSH
42592: LD_INT 7
42594: PUSH
42595: LD_INT 11
42597: PUSH
42598: EMPTY
42599: LIST
42600: LIST
42601: LIST
42602: LIST
42603: LIST
42604: LIST
42605: LIST
42606: PUSH
42607: LD_INT 27
42609: PUSH
42610: LD_INT 28
42612: PUSH
42613: LD_INT 26
42615: PUSH
42616: LD_INT 30
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: LIST
42623: LIST
42624: PUSH
42625: LD_INT 43
42627: PUSH
42628: LD_INT 44
42630: PUSH
42631: LD_INT 46
42633: PUSH
42634: LD_INT 45
42636: PUSH
42637: LD_INT 47
42639: PUSH
42640: LD_INT 49
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: LIST
42647: LIST
42648: LIST
42649: LIST
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: LIST
42655: PUSH
42656: LD_VAR 0 12
42660: ARRAY
42661: ST_TO_ADDR
// list := list isect fac_list ;
42662: LD_ADDR_VAR 0 5
42666: PUSH
42667: LD_VAR 0 5
42671: PUSH
42672: LD_VAR 0 17
42676: ISECT
42677: ST_TO_ADDR
// if not list then
42678: LD_VAR 0 5
42682: NOT
42683: IFFALSE 42687
// exit ;
42685: GO 43491
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
42687: LD_VAR 0 12
42691: PUSH
42692: LD_INT 3
42694: EQUAL
42695: PUSH
42696: LD_INT 49
42698: PUSH
42699: LD_VAR 0 5
42703: IN
42704: AND
42705: PUSH
42706: LD_INT 31
42708: PPUSH
42709: LD_VAR 0 16
42713: PPUSH
42714: CALL_OW 321
42718: PUSH
42719: LD_INT 2
42721: EQUAL
42722: AND
42723: IFFALSE 42783
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
42725: LD_INT 22
42727: PUSH
42728: LD_VAR 0 16
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 35
42739: PUSH
42740: LD_INT 49
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: LD_INT 91
42749: PUSH
42750: LD_VAR 0 1
42754: PUSH
42755: LD_INT 10
42757: PUSH
42758: EMPTY
42759: LIST
42760: LIST
42761: LIST
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: LIST
42767: PPUSH
42768: CALL_OW 69
42772: NOT
42773: IFFALSE 42783
// weapon := ru_time_lapser ;
42775: LD_ADDR_VAR 0 18
42779: PUSH
42780: LD_INT 49
42782: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
42783: LD_VAR 0 12
42787: PUSH
42788: LD_INT 1
42790: PUSH
42791: LD_INT 2
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: IN
42798: PUSH
42799: LD_INT 11
42801: PUSH
42802: LD_VAR 0 5
42806: IN
42807: PUSH
42808: LD_INT 30
42810: PUSH
42811: LD_VAR 0 5
42815: IN
42816: OR
42817: AND
42818: PUSH
42819: LD_INT 6
42821: PPUSH
42822: LD_VAR 0 16
42826: PPUSH
42827: CALL_OW 321
42831: PUSH
42832: LD_INT 2
42834: EQUAL
42835: AND
42836: IFFALSE 43001
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
42838: LD_INT 22
42840: PUSH
42841: LD_VAR 0 16
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: PUSH
42850: LD_INT 2
42852: PUSH
42853: LD_INT 35
42855: PUSH
42856: LD_INT 11
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: PUSH
42863: LD_INT 35
42865: PUSH
42866: LD_INT 30
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: LIST
42877: PUSH
42878: LD_INT 91
42880: PUSH
42881: LD_VAR 0 1
42885: PUSH
42886: LD_INT 18
42888: PUSH
42889: EMPTY
42890: LIST
42891: LIST
42892: LIST
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: LIST
42898: PPUSH
42899: CALL_OW 69
42903: NOT
42904: PUSH
42905: LD_INT 22
42907: PUSH
42908: LD_VAR 0 16
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PUSH
42917: LD_INT 2
42919: PUSH
42920: LD_INT 30
42922: PUSH
42923: LD_INT 32
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: PUSH
42930: LD_INT 30
42932: PUSH
42933: LD_INT 33
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: LIST
42944: PUSH
42945: LD_INT 91
42947: PUSH
42948: LD_VAR 0 1
42952: PUSH
42953: LD_INT 12
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: LIST
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: LIST
42965: PUSH
42966: EMPTY
42967: LIST
42968: PPUSH
42969: CALL_OW 69
42973: PUSH
42974: LD_INT 2
42976: GREATER
42977: AND
42978: IFFALSE 43001
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42980: LD_ADDR_VAR 0 18
42984: PUSH
42985: LD_INT 11
42987: PUSH
42988: LD_INT 30
42990: PUSH
42991: EMPTY
42992: LIST
42993: LIST
42994: PUSH
42995: LD_VAR 0 12
42999: ARRAY
43000: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
43001: LD_VAR 0 18
43005: NOT
43006: PUSH
43007: LD_INT 40
43009: PPUSH
43010: LD_VAR 0 16
43014: PPUSH
43015: CALL_OW 321
43019: PUSH
43020: LD_INT 2
43022: EQUAL
43023: AND
43024: PUSH
43025: LD_INT 7
43027: PUSH
43028: LD_VAR 0 5
43032: IN
43033: PUSH
43034: LD_INT 28
43036: PUSH
43037: LD_VAR 0 5
43041: IN
43042: OR
43043: PUSH
43044: LD_INT 45
43046: PUSH
43047: LD_VAR 0 5
43051: IN
43052: OR
43053: AND
43054: IFFALSE 43308
// begin hex := GetHexInfo ( x , y ) ;
43056: LD_ADDR_VAR 0 4
43060: PUSH
43061: LD_VAR 0 10
43065: PPUSH
43066: LD_VAR 0 11
43070: PPUSH
43071: CALL_OW 546
43075: ST_TO_ADDR
// if hex [ 1 ] then
43076: LD_VAR 0 4
43080: PUSH
43081: LD_INT 1
43083: ARRAY
43084: IFFALSE 43088
// exit ;
43086: GO 43491
// height := hex [ 2 ] ;
43088: LD_ADDR_VAR 0 15
43092: PUSH
43093: LD_VAR 0 4
43097: PUSH
43098: LD_INT 2
43100: ARRAY
43101: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
43102: LD_ADDR_VAR 0 14
43106: PUSH
43107: LD_INT 0
43109: PUSH
43110: LD_INT 2
43112: PUSH
43113: LD_INT 3
43115: PUSH
43116: LD_INT 5
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: ST_TO_ADDR
// for i in tmp do
43125: LD_ADDR_VAR 0 8
43129: PUSH
43130: LD_VAR 0 14
43134: PUSH
43135: FOR_IN
43136: IFFALSE 43306
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
43138: LD_ADDR_VAR 0 9
43142: PUSH
43143: LD_VAR 0 10
43147: PPUSH
43148: LD_VAR 0 8
43152: PPUSH
43153: LD_INT 5
43155: PPUSH
43156: CALL_OW 272
43160: PUSH
43161: LD_VAR 0 11
43165: PPUSH
43166: LD_VAR 0 8
43170: PPUSH
43171: LD_INT 5
43173: PPUSH
43174: CALL_OW 273
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
43183: LD_VAR 0 9
43187: PUSH
43188: LD_INT 1
43190: ARRAY
43191: PPUSH
43192: LD_VAR 0 9
43196: PUSH
43197: LD_INT 2
43199: ARRAY
43200: PPUSH
43201: CALL_OW 488
43205: IFFALSE 43304
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
43207: LD_ADDR_VAR 0 4
43211: PUSH
43212: LD_VAR 0 9
43216: PUSH
43217: LD_INT 1
43219: ARRAY
43220: PPUSH
43221: LD_VAR 0 9
43225: PUSH
43226: LD_INT 2
43228: ARRAY
43229: PPUSH
43230: CALL_OW 546
43234: ST_TO_ADDR
// if hex [ 1 ] then
43235: LD_VAR 0 4
43239: PUSH
43240: LD_INT 1
43242: ARRAY
43243: IFFALSE 43247
// continue ;
43245: GO 43135
// h := hex [ 2 ] ;
43247: LD_ADDR_VAR 0 13
43251: PUSH
43252: LD_VAR 0 4
43256: PUSH
43257: LD_INT 2
43259: ARRAY
43260: ST_TO_ADDR
// if h + 7 < height then
43261: LD_VAR 0 13
43265: PUSH
43266: LD_INT 7
43268: PLUS
43269: PUSH
43270: LD_VAR 0 15
43274: LESS
43275: IFFALSE 43304
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
43277: LD_ADDR_VAR 0 18
43281: PUSH
43282: LD_INT 7
43284: PUSH
43285: LD_INT 28
43287: PUSH
43288: LD_INT 45
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: LIST
43295: PUSH
43296: LD_VAR 0 12
43300: ARRAY
43301: ST_TO_ADDR
// break ;
43302: GO 43306
// end ; end ; end ;
43304: GO 43135
43306: POP
43307: POP
// end ; if not weapon then
43308: LD_VAR 0 18
43312: NOT
43313: IFFALSE 43373
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
43315: LD_ADDR_VAR 0 5
43319: PUSH
43320: LD_VAR 0 5
43324: PUSH
43325: LD_INT 11
43327: PUSH
43328: LD_INT 30
43330: PUSH
43331: LD_INT 49
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: LIST
43338: DIFF
43339: ST_TO_ADDR
// if not list then
43340: LD_VAR 0 5
43344: NOT
43345: IFFALSE 43349
// exit ;
43347: GO 43491
// weapon := list [ rand ( 1 , list ) ] ;
43349: LD_ADDR_VAR 0 18
43353: PUSH
43354: LD_VAR 0 5
43358: PUSH
43359: LD_INT 1
43361: PPUSH
43362: LD_VAR 0 5
43366: PPUSH
43367: CALL_OW 12
43371: ARRAY
43372: ST_TO_ADDR
// end ; if weapon then
43373: LD_VAR 0 18
43377: IFFALSE 43491
// begin tmp := CostOfWeapon ( weapon ) ;
43379: LD_ADDR_VAR 0 14
43383: PUSH
43384: LD_VAR 0 18
43388: PPUSH
43389: CALL_OW 451
43393: ST_TO_ADDR
// j := GetBase ( tower ) ;
43394: LD_ADDR_VAR 0 9
43398: PUSH
43399: LD_VAR 0 1
43403: PPUSH
43404: CALL_OW 274
43408: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
43409: LD_VAR 0 9
43413: PPUSH
43414: LD_INT 1
43416: PPUSH
43417: CALL_OW 275
43421: PUSH
43422: LD_VAR 0 14
43426: PUSH
43427: LD_INT 1
43429: ARRAY
43430: GREATEREQUAL
43431: PUSH
43432: LD_VAR 0 9
43436: PPUSH
43437: LD_INT 2
43439: PPUSH
43440: CALL_OW 275
43444: PUSH
43445: LD_VAR 0 14
43449: PUSH
43450: LD_INT 2
43452: ARRAY
43453: GREATEREQUAL
43454: AND
43455: PUSH
43456: LD_VAR 0 9
43460: PPUSH
43461: LD_INT 3
43463: PPUSH
43464: CALL_OW 275
43468: PUSH
43469: LD_VAR 0 14
43473: PUSH
43474: LD_INT 3
43476: ARRAY
43477: GREATEREQUAL
43478: AND
43479: IFFALSE 43491
// result := weapon ;
43481: LD_ADDR_VAR 0 3
43485: PUSH
43486: LD_VAR 0 18
43490: ST_TO_ADDR
// end ; end ;
43491: LD_VAR 0 3
43495: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
43496: LD_INT 0
43498: PPUSH
43499: PPUSH
// result := true ;
43500: LD_ADDR_VAR 0 3
43504: PUSH
43505: LD_INT 1
43507: ST_TO_ADDR
// if array1 = array2 then
43508: LD_VAR 0 1
43512: PUSH
43513: LD_VAR 0 2
43517: EQUAL
43518: IFFALSE 43578
// begin for i = 1 to array1 do
43520: LD_ADDR_VAR 0 4
43524: PUSH
43525: DOUBLE
43526: LD_INT 1
43528: DEC
43529: ST_TO_ADDR
43530: LD_VAR 0 1
43534: PUSH
43535: FOR_TO
43536: IFFALSE 43574
// if array1 [ i ] <> array2 [ i ] then
43538: LD_VAR 0 1
43542: PUSH
43543: LD_VAR 0 4
43547: ARRAY
43548: PUSH
43549: LD_VAR 0 2
43553: PUSH
43554: LD_VAR 0 4
43558: ARRAY
43559: NONEQUAL
43560: IFFALSE 43572
// begin result := false ;
43562: LD_ADDR_VAR 0 3
43566: PUSH
43567: LD_INT 0
43569: ST_TO_ADDR
// break ;
43570: GO 43574
// end ;
43572: GO 43535
43574: POP
43575: POP
// end else
43576: GO 43586
// result := false ;
43578: LD_ADDR_VAR 0 3
43582: PUSH
43583: LD_INT 0
43585: ST_TO_ADDR
// end ;
43586: LD_VAR 0 3
43590: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
43591: LD_INT 0
43593: PPUSH
43594: PPUSH
// if not array1 or not array2 then
43595: LD_VAR 0 1
43599: NOT
43600: PUSH
43601: LD_VAR 0 2
43605: NOT
43606: OR
43607: IFFALSE 43611
// exit ;
43609: GO 43675
// result := true ;
43611: LD_ADDR_VAR 0 3
43615: PUSH
43616: LD_INT 1
43618: ST_TO_ADDR
// for i = 1 to array1 do
43619: LD_ADDR_VAR 0 4
43623: PUSH
43624: DOUBLE
43625: LD_INT 1
43627: DEC
43628: ST_TO_ADDR
43629: LD_VAR 0 1
43633: PUSH
43634: FOR_TO
43635: IFFALSE 43673
// if array1 [ i ] <> array2 [ i ] then
43637: LD_VAR 0 1
43641: PUSH
43642: LD_VAR 0 4
43646: ARRAY
43647: PUSH
43648: LD_VAR 0 2
43652: PUSH
43653: LD_VAR 0 4
43657: ARRAY
43658: NONEQUAL
43659: IFFALSE 43671
// begin result := false ;
43661: LD_ADDR_VAR 0 3
43665: PUSH
43666: LD_INT 0
43668: ST_TO_ADDR
// break ;
43669: GO 43673
// end ;
43671: GO 43634
43673: POP
43674: POP
// end ;
43675: LD_VAR 0 3
43679: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
43680: LD_INT 0
43682: PPUSH
43683: PPUSH
43684: PPUSH
// pom := GetBase ( fac ) ;
43685: LD_ADDR_VAR 0 5
43689: PUSH
43690: LD_VAR 0 1
43694: PPUSH
43695: CALL_OW 274
43699: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
43700: LD_ADDR_VAR 0 4
43704: PUSH
43705: LD_VAR 0 2
43709: PUSH
43710: LD_INT 1
43712: ARRAY
43713: PPUSH
43714: LD_VAR 0 2
43718: PUSH
43719: LD_INT 2
43721: ARRAY
43722: PPUSH
43723: LD_VAR 0 2
43727: PUSH
43728: LD_INT 3
43730: ARRAY
43731: PPUSH
43732: LD_VAR 0 2
43736: PUSH
43737: LD_INT 4
43739: ARRAY
43740: PPUSH
43741: CALL_OW 449
43745: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43746: LD_ADDR_VAR 0 3
43750: PUSH
43751: LD_VAR 0 5
43755: PPUSH
43756: LD_INT 1
43758: PPUSH
43759: CALL_OW 275
43763: PUSH
43764: LD_VAR 0 4
43768: PUSH
43769: LD_INT 1
43771: ARRAY
43772: GREATEREQUAL
43773: PUSH
43774: LD_VAR 0 5
43778: PPUSH
43779: LD_INT 2
43781: PPUSH
43782: CALL_OW 275
43786: PUSH
43787: LD_VAR 0 4
43791: PUSH
43792: LD_INT 2
43794: ARRAY
43795: GREATEREQUAL
43796: AND
43797: PUSH
43798: LD_VAR 0 5
43802: PPUSH
43803: LD_INT 3
43805: PPUSH
43806: CALL_OW 275
43810: PUSH
43811: LD_VAR 0 4
43815: PUSH
43816: LD_INT 3
43818: ARRAY
43819: GREATEREQUAL
43820: AND
43821: ST_TO_ADDR
// end ;
43822: LD_VAR 0 3
43826: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
43827: LD_INT 0
43829: PPUSH
43830: PPUSH
43831: PPUSH
43832: PPUSH
// pom := GetBase ( building ) ;
43833: LD_ADDR_VAR 0 3
43837: PUSH
43838: LD_VAR 0 1
43842: PPUSH
43843: CALL_OW 274
43847: ST_TO_ADDR
// if not pom then
43848: LD_VAR 0 3
43852: NOT
43853: IFFALSE 43857
// exit ;
43855: GO 44027
// btype := GetBType ( building ) ;
43857: LD_ADDR_VAR 0 5
43861: PUSH
43862: LD_VAR 0 1
43866: PPUSH
43867: CALL_OW 266
43871: ST_TO_ADDR
// if btype = b_armoury then
43872: LD_VAR 0 5
43876: PUSH
43877: LD_INT 4
43879: EQUAL
43880: IFFALSE 43890
// btype := b_barracks ;
43882: LD_ADDR_VAR 0 5
43886: PUSH
43887: LD_INT 5
43889: ST_TO_ADDR
// if btype = b_depot then
43890: LD_VAR 0 5
43894: PUSH
43895: LD_INT 0
43897: EQUAL
43898: IFFALSE 43908
// btype := b_warehouse ;
43900: LD_ADDR_VAR 0 5
43904: PUSH
43905: LD_INT 1
43907: ST_TO_ADDR
// if btype = b_workshop then
43908: LD_VAR 0 5
43912: PUSH
43913: LD_INT 2
43915: EQUAL
43916: IFFALSE 43926
// btype := b_factory ;
43918: LD_ADDR_VAR 0 5
43922: PUSH
43923: LD_INT 3
43925: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43926: LD_ADDR_VAR 0 4
43930: PUSH
43931: LD_VAR 0 5
43935: PPUSH
43936: LD_VAR 0 1
43940: PPUSH
43941: CALL_OW 248
43945: PPUSH
43946: CALL_OW 450
43950: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43951: LD_ADDR_VAR 0 2
43955: PUSH
43956: LD_VAR 0 3
43960: PPUSH
43961: LD_INT 1
43963: PPUSH
43964: CALL_OW 275
43968: PUSH
43969: LD_VAR 0 4
43973: PUSH
43974: LD_INT 1
43976: ARRAY
43977: GREATEREQUAL
43978: PUSH
43979: LD_VAR 0 3
43983: PPUSH
43984: LD_INT 2
43986: PPUSH
43987: CALL_OW 275
43991: PUSH
43992: LD_VAR 0 4
43996: PUSH
43997: LD_INT 2
43999: ARRAY
44000: GREATEREQUAL
44001: AND
44002: PUSH
44003: LD_VAR 0 3
44007: PPUSH
44008: LD_INT 3
44010: PPUSH
44011: CALL_OW 275
44015: PUSH
44016: LD_VAR 0 4
44020: PUSH
44021: LD_INT 3
44023: ARRAY
44024: GREATEREQUAL
44025: AND
44026: ST_TO_ADDR
// end ;
44027: LD_VAR 0 2
44031: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
44032: LD_INT 0
44034: PPUSH
44035: PPUSH
44036: PPUSH
// pom := GetBase ( building ) ;
44037: LD_ADDR_VAR 0 4
44041: PUSH
44042: LD_VAR 0 1
44046: PPUSH
44047: CALL_OW 274
44051: ST_TO_ADDR
// if not pom then
44052: LD_VAR 0 4
44056: NOT
44057: IFFALSE 44061
// exit ;
44059: GO 44162
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44061: LD_ADDR_VAR 0 5
44065: PUSH
44066: LD_VAR 0 2
44070: PPUSH
44071: LD_VAR 0 1
44075: PPUSH
44076: CALL_OW 248
44080: PPUSH
44081: CALL_OW 450
44085: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44086: LD_ADDR_VAR 0 3
44090: PUSH
44091: LD_VAR 0 4
44095: PPUSH
44096: LD_INT 1
44098: PPUSH
44099: CALL_OW 275
44103: PUSH
44104: LD_VAR 0 5
44108: PUSH
44109: LD_INT 1
44111: ARRAY
44112: GREATEREQUAL
44113: PUSH
44114: LD_VAR 0 4
44118: PPUSH
44119: LD_INT 2
44121: PPUSH
44122: CALL_OW 275
44126: PUSH
44127: LD_VAR 0 5
44131: PUSH
44132: LD_INT 2
44134: ARRAY
44135: GREATEREQUAL
44136: AND
44137: PUSH
44138: LD_VAR 0 4
44142: PPUSH
44143: LD_INT 3
44145: PPUSH
44146: CALL_OW 275
44150: PUSH
44151: LD_VAR 0 5
44155: PUSH
44156: LD_INT 3
44158: ARRAY
44159: GREATEREQUAL
44160: AND
44161: ST_TO_ADDR
// end ;
44162: LD_VAR 0 3
44166: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
44167: LD_INT 0
44169: PPUSH
44170: PPUSH
44171: PPUSH
44172: PPUSH
44173: PPUSH
44174: PPUSH
44175: PPUSH
44176: PPUSH
44177: PPUSH
44178: PPUSH
44179: PPUSH
// result := false ;
44180: LD_ADDR_VAR 0 8
44184: PUSH
44185: LD_INT 0
44187: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
44188: LD_VAR 0 5
44192: NOT
44193: PUSH
44194: LD_VAR 0 1
44198: NOT
44199: OR
44200: PUSH
44201: LD_VAR 0 2
44205: NOT
44206: OR
44207: PUSH
44208: LD_VAR 0 3
44212: NOT
44213: OR
44214: IFFALSE 44218
// exit ;
44216: GO 45032
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
44218: LD_ADDR_VAR 0 14
44222: PUSH
44223: LD_VAR 0 1
44227: PPUSH
44228: LD_VAR 0 2
44232: PPUSH
44233: LD_VAR 0 3
44237: PPUSH
44238: LD_VAR 0 4
44242: PPUSH
44243: LD_VAR 0 5
44247: PUSH
44248: LD_INT 1
44250: ARRAY
44251: PPUSH
44252: CALL_OW 248
44256: PPUSH
44257: LD_INT 0
44259: PPUSH
44260: CALL 46285 0 6
44264: ST_TO_ADDR
// if not hexes then
44265: LD_VAR 0 14
44269: NOT
44270: IFFALSE 44274
// exit ;
44272: GO 45032
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
44274: LD_ADDR_VAR 0 17
44278: PUSH
44279: LD_VAR 0 5
44283: PPUSH
44284: LD_INT 22
44286: PUSH
44287: LD_VAR 0 13
44291: PPUSH
44292: CALL_OW 255
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: LD_INT 2
44303: PUSH
44304: LD_INT 30
44306: PUSH
44307: LD_INT 0
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: PUSH
44314: LD_INT 30
44316: PUSH
44317: LD_INT 1
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: LIST
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PPUSH
44333: CALL_OW 72
44337: ST_TO_ADDR
// for i = 1 to hexes do
44338: LD_ADDR_VAR 0 9
44342: PUSH
44343: DOUBLE
44344: LD_INT 1
44346: DEC
44347: ST_TO_ADDR
44348: LD_VAR 0 14
44352: PUSH
44353: FOR_TO
44354: IFFALSE 45030
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44356: LD_ADDR_VAR 0 13
44360: PUSH
44361: LD_VAR 0 14
44365: PUSH
44366: LD_VAR 0 9
44370: ARRAY
44371: PUSH
44372: LD_INT 1
44374: ARRAY
44375: PPUSH
44376: LD_VAR 0 14
44380: PUSH
44381: LD_VAR 0 9
44385: ARRAY
44386: PUSH
44387: LD_INT 2
44389: ARRAY
44390: PPUSH
44391: CALL_OW 428
44395: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
44396: LD_VAR 0 14
44400: PUSH
44401: LD_VAR 0 9
44405: ARRAY
44406: PUSH
44407: LD_INT 1
44409: ARRAY
44410: PPUSH
44411: LD_VAR 0 14
44415: PUSH
44416: LD_VAR 0 9
44420: ARRAY
44421: PUSH
44422: LD_INT 2
44424: ARRAY
44425: PPUSH
44426: CALL_OW 351
44430: PUSH
44431: LD_VAR 0 14
44435: PUSH
44436: LD_VAR 0 9
44440: ARRAY
44441: PUSH
44442: LD_INT 1
44444: ARRAY
44445: PPUSH
44446: LD_VAR 0 14
44450: PUSH
44451: LD_VAR 0 9
44455: ARRAY
44456: PUSH
44457: LD_INT 2
44459: ARRAY
44460: PPUSH
44461: CALL_OW 488
44465: NOT
44466: OR
44467: PUSH
44468: LD_VAR 0 13
44472: PPUSH
44473: CALL_OW 247
44477: PUSH
44478: LD_INT 3
44480: EQUAL
44481: OR
44482: IFFALSE 44488
// exit ;
44484: POP
44485: POP
44486: GO 45032
// if not tmp then
44488: LD_VAR 0 13
44492: NOT
44493: IFFALSE 44497
// continue ;
44495: GO 44353
// result := true ;
44497: LD_ADDR_VAR 0 8
44501: PUSH
44502: LD_INT 1
44504: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
44505: LD_VAR 0 6
44509: PUSH
44510: LD_VAR 0 13
44514: PPUSH
44515: CALL_OW 247
44519: PUSH
44520: LD_INT 2
44522: EQUAL
44523: AND
44524: PUSH
44525: LD_VAR 0 13
44529: PPUSH
44530: CALL_OW 263
44534: PUSH
44535: LD_INT 1
44537: EQUAL
44538: AND
44539: IFFALSE 44703
// begin if IsDrivenBy ( tmp ) then
44541: LD_VAR 0 13
44545: PPUSH
44546: CALL_OW 311
44550: IFFALSE 44554
// continue ;
44552: GO 44353
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
44554: LD_VAR 0 6
44558: PPUSH
44559: LD_INT 3
44561: PUSH
44562: LD_INT 60
44564: PUSH
44565: EMPTY
44566: LIST
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: LD_INT 3
44574: PUSH
44575: LD_INT 55
44577: PUSH
44578: EMPTY
44579: LIST
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PPUSH
44589: CALL_OW 72
44593: IFFALSE 44701
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
44595: LD_ADDR_VAR 0 18
44599: PUSH
44600: LD_VAR 0 6
44604: PPUSH
44605: LD_INT 3
44607: PUSH
44608: LD_INT 60
44610: PUSH
44611: EMPTY
44612: LIST
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: PUSH
44618: LD_INT 3
44620: PUSH
44621: LD_INT 55
44623: PUSH
44624: EMPTY
44625: LIST
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PPUSH
44635: CALL_OW 72
44639: PUSH
44640: LD_INT 1
44642: ARRAY
44643: ST_TO_ADDR
// if IsInUnit ( driver ) then
44644: LD_VAR 0 18
44648: PPUSH
44649: CALL_OW 310
44653: IFFALSE 44664
// ComExit ( driver ) ;
44655: LD_VAR 0 18
44659: PPUSH
44660: CALL 70064 0 1
// AddComEnterUnit ( driver , tmp ) ;
44664: LD_VAR 0 18
44668: PPUSH
44669: LD_VAR 0 13
44673: PPUSH
44674: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
44678: LD_VAR 0 18
44682: PPUSH
44683: LD_VAR 0 7
44687: PPUSH
44688: CALL_OW 173
// AddComExitVehicle ( driver ) ;
44692: LD_VAR 0 18
44696: PPUSH
44697: CALL_OW 181
// end ; continue ;
44701: GO 44353
// end ; if not cleaners or not tmp in cleaners then
44703: LD_VAR 0 6
44707: NOT
44708: PUSH
44709: LD_VAR 0 13
44713: PUSH
44714: LD_VAR 0 6
44718: IN
44719: NOT
44720: OR
44721: IFFALSE 45028
// begin if dep then
44723: LD_VAR 0 17
44727: IFFALSE 44863
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
44729: LD_ADDR_VAR 0 16
44733: PUSH
44734: LD_VAR 0 17
44738: PUSH
44739: LD_INT 1
44741: ARRAY
44742: PPUSH
44743: CALL_OW 250
44747: PPUSH
44748: LD_VAR 0 17
44752: PUSH
44753: LD_INT 1
44755: ARRAY
44756: PPUSH
44757: CALL_OW 254
44761: PPUSH
44762: LD_INT 5
44764: PPUSH
44765: CALL_OW 272
44769: PUSH
44770: LD_VAR 0 17
44774: PUSH
44775: LD_INT 1
44777: ARRAY
44778: PPUSH
44779: CALL_OW 251
44783: PPUSH
44784: LD_VAR 0 17
44788: PUSH
44789: LD_INT 1
44791: ARRAY
44792: PPUSH
44793: CALL_OW 254
44797: PPUSH
44798: LD_INT 5
44800: PPUSH
44801: CALL_OW 273
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
44810: LD_VAR 0 16
44814: PUSH
44815: LD_INT 1
44817: ARRAY
44818: PPUSH
44819: LD_VAR 0 16
44823: PUSH
44824: LD_INT 2
44826: ARRAY
44827: PPUSH
44828: CALL_OW 488
44832: IFFALSE 44863
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
44834: LD_VAR 0 13
44838: PPUSH
44839: LD_VAR 0 16
44843: PUSH
44844: LD_INT 1
44846: ARRAY
44847: PPUSH
44848: LD_VAR 0 16
44852: PUSH
44853: LD_INT 2
44855: ARRAY
44856: PPUSH
44857: CALL_OW 111
// continue ;
44861: GO 44353
// end ; end ; r := GetDir ( tmp ) ;
44863: LD_ADDR_VAR 0 15
44867: PUSH
44868: LD_VAR 0 13
44872: PPUSH
44873: CALL_OW 254
44877: ST_TO_ADDR
// if r = 5 then
44878: LD_VAR 0 15
44882: PUSH
44883: LD_INT 5
44885: EQUAL
44886: IFFALSE 44896
// r := 0 ;
44888: LD_ADDR_VAR 0 15
44892: PUSH
44893: LD_INT 0
44895: ST_TO_ADDR
// for j = r to 5 do
44896: LD_ADDR_VAR 0 10
44900: PUSH
44901: DOUBLE
44902: LD_VAR 0 15
44906: DEC
44907: ST_TO_ADDR
44908: LD_INT 5
44910: PUSH
44911: FOR_TO
44912: IFFALSE 45026
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
44914: LD_ADDR_VAR 0 11
44918: PUSH
44919: LD_VAR 0 13
44923: PPUSH
44924: CALL_OW 250
44928: PPUSH
44929: LD_VAR 0 10
44933: PPUSH
44934: LD_INT 2
44936: PPUSH
44937: CALL_OW 272
44941: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
44942: LD_ADDR_VAR 0 12
44946: PUSH
44947: LD_VAR 0 13
44951: PPUSH
44952: CALL_OW 251
44956: PPUSH
44957: LD_VAR 0 10
44961: PPUSH
44962: LD_INT 2
44964: PPUSH
44965: CALL_OW 273
44969: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
44970: LD_VAR 0 11
44974: PPUSH
44975: LD_VAR 0 12
44979: PPUSH
44980: CALL_OW 488
44984: PUSH
44985: LD_VAR 0 11
44989: PPUSH
44990: LD_VAR 0 12
44994: PPUSH
44995: CALL_OW 428
44999: NOT
45000: AND
45001: IFFALSE 45024
// begin ComMoveXY ( tmp , _x , _y ) ;
45003: LD_VAR 0 13
45007: PPUSH
45008: LD_VAR 0 11
45012: PPUSH
45013: LD_VAR 0 12
45017: PPUSH
45018: CALL_OW 111
// break ;
45022: GO 45026
// end ; end ;
45024: GO 44911
45026: POP
45027: POP
// end ; end ;
45028: GO 44353
45030: POP
45031: POP
// end ;
45032: LD_VAR 0 8
45036: RET
// export function BuildingTechInvented ( side , btype ) ; begin
45037: LD_INT 0
45039: PPUSH
// result := true ;
45040: LD_ADDR_VAR 0 3
45044: PUSH
45045: LD_INT 1
45047: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
45048: LD_VAR 0 2
45052: PUSH
45053: LD_INT 24
45055: DOUBLE
45056: EQUAL
45057: IFTRUE 45067
45059: LD_INT 33
45061: DOUBLE
45062: EQUAL
45063: IFTRUE 45067
45065: GO 45092
45067: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
45068: LD_ADDR_VAR 0 3
45072: PUSH
45073: LD_INT 32
45075: PPUSH
45076: LD_VAR 0 1
45080: PPUSH
45081: CALL_OW 321
45085: PUSH
45086: LD_INT 2
45088: EQUAL
45089: ST_TO_ADDR
45090: GO 45408
45092: LD_INT 20
45094: DOUBLE
45095: EQUAL
45096: IFTRUE 45100
45098: GO 45125
45100: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
45101: LD_ADDR_VAR 0 3
45105: PUSH
45106: LD_INT 6
45108: PPUSH
45109: LD_VAR 0 1
45113: PPUSH
45114: CALL_OW 321
45118: PUSH
45119: LD_INT 2
45121: EQUAL
45122: ST_TO_ADDR
45123: GO 45408
45125: LD_INT 22
45127: DOUBLE
45128: EQUAL
45129: IFTRUE 45139
45131: LD_INT 36
45133: DOUBLE
45134: EQUAL
45135: IFTRUE 45139
45137: GO 45164
45139: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
45140: LD_ADDR_VAR 0 3
45144: PUSH
45145: LD_INT 15
45147: PPUSH
45148: LD_VAR 0 1
45152: PPUSH
45153: CALL_OW 321
45157: PUSH
45158: LD_INT 2
45160: EQUAL
45161: ST_TO_ADDR
45162: GO 45408
45164: LD_INT 30
45166: DOUBLE
45167: EQUAL
45168: IFTRUE 45172
45170: GO 45197
45172: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
45173: LD_ADDR_VAR 0 3
45177: PUSH
45178: LD_INT 20
45180: PPUSH
45181: LD_VAR 0 1
45185: PPUSH
45186: CALL_OW 321
45190: PUSH
45191: LD_INT 2
45193: EQUAL
45194: ST_TO_ADDR
45195: GO 45408
45197: LD_INT 28
45199: DOUBLE
45200: EQUAL
45201: IFTRUE 45211
45203: LD_INT 21
45205: DOUBLE
45206: EQUAL
45207: IFTRUE 45211
45209: GO 45236
45211: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
45212: LD_ADDR_VAR 0 3
45216: PUSH
45217: LD_INT 21
45219: PPUSH
45220: LD_VAR 0 1
45224: PPUSH
45225: CALL_OW 321
45229: PUSH
45230: LD_INT 2
45232: EQUAL
45233: ST_TO_ADDR
45234: GO 45408
45236: LD_INT 16
45238: DOUBLE
45239: EQUAL
45240: IFTRUE 45244
45242: GO 45269
45244: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
45245: LD_ADDR_VAR 0 3
45249: PUSH
45250: LD_INT 84
45252: PPUSH
45253: LD_VAR 0 1
45257: PPUSH
45258: CALL_OW 321
45262: PUSH
45263: LD_INT 2
45265: EQUAL
45266: ST_TO_ADDR
45267: GO 45408
45269: LD_INT 19
45271: DOUBLE
45272: EQUAL
45273: IFTRUE 45283
45275: LD_INT 23
45277: DOUBLE
45278: EQUAL
45279: IFTRUE 45283
45281: GO 45308
45283: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
45284: LD_ADDR_VAR 0 3
45288: PUSH
45289: LD_INT 83
45291: PPUSH
45292: LD_VAR 0 1
45296: PPUSH
45297: CALL_OW 321
45301: PUSH
45302: LD_INT 2
45304: EQUAL
45305: ST_TO_ADDR
45306: GO 45408
45308: LD_INT 17
45310: DOUBLE
45311: EQUAL
45312: IFTRUE 45316
45314: GO 45341
45316: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
45317: LD_ADDR_VAR 0 3
45321: PUSH
45322: LD_INT 39
45324: PPUSH
45325: LD_VAR 0 1
45329: PPUSH
45330: CALL_OW 321
45334: PUSH
45335: LD_INT 2
45337: EQUAL
45338: ST_TO_ADDR
45339: GO 45408
45341: LD_INT 18
45343: DOUBLE
45344: EQUAL
45345: IFTRUE 45349
45347: GO 45374
45349: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
45350: LD_ADDR_VAR 0 3
45354: PUSH
45355: LD_INT 40
45357: PPUSH
45358: LD_VAR 0 1
45362: PPUSH
45363: CALL_OW 321
45367: PUSH
45368: LD_INT 2
45370: EQUAL
45371: ST_TO_ADDR
45372: GO 45408
45374: LD_INT 27
45376: DOUBLE
45377: EQUAL
45378: IFTRUE 45382
45380: GO 45407
45382: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
45383: LD_ADDR_VAR 0 3
45387: PUSH
45388: LD_INT 35
45390: PPUSH
45391: LD_VAR 0 1
45395: PPUSH
45396: CALL_OW 321
45400: PUSH
45401: LD_INT 2
45403: EQUAL
45404: ST_TO_ADDR
45405: GO 45408
45407: POP
// end ;
45408: LD_VAR 0 3
45412: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
45413: LD_INT 0
45415: PPUSH
45416: PPUSH
45417: PPUSH
45418: PPUSH
45419: PPUSH
45420: PPUSH
45421: PPUSH
45422: PPUSH
45423: PPUSH
45424: PPUSH
45425: PPUSH
// result := false ;
45426: LD_ADDR_VAR 0 6
45430: PUSH
45431: LD_INT 0
45433: ST_TO_ADDR
// if btype = b_depot then
45434: LD_VAR 0 2
45438: PUSH
45439: LD_INT 0
45441: EQUAL
45442: IFFALSE 45454
// begin result := true ;
45444: LD_ADDR_VAR 0 6
45448: PUSH
45449: LD_INT 1
45451: ST_TO_ADDR
// exit ;
45452: GO 46280
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
45454: LD_VAR 0 1
45458: NOT
45459: PUSH
45460: LD_VAR 0 1
45464: PPUSH
45465: CALL_OW 266
45469: PUSH
45470: LD_INT 0
45472: PUSH
45473: LD_INT 1
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: IN
45480: NOT
45481: OR
45482: PUSH
45483: LD_VAR 0 2
45487: NOT
45488: OR
45489: PUSH
45490: LD_VAR 0 5
45494: PUSH
45495: LD_INT 0
45497: PUSH
45498: LD_INT 1
45500: PUSH
45501: LD_INT 2
45503: PUSH
45504: LD_INT 3
45506: PUSH
45507: LD_INT 4
45509: PUSH
45510: LD_INT 5
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: IN
45521: NOT
45522: OR
45523: PUSH
45524: LD_VAR 0 3
45528: PPUSH
45529: LD_VAR 0 4
45533: PPUSH
45534: CALL_OW 488
45538: NOT
45539: OR
45540: IFFALSE 45544
// exit ;
45542: GO 46280
// side := GetSide ( depot ) ;
45544: LD_ADDR_VAR 0 9
45548: PUSH
45549: LD_VAR 0 1
45553: PPUSH
45554: CALL_OW 255
45558: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
45559: LD_VAR 0 9
45563: PPUSH
45564: LD_VAR 0 2
45568: PPUSH
45569: CALL 45037 0 2
45573: NOT
45574: IFFALSE 45578
// exit ;
45576: GO 46280
// pom := GetBase ( depot ) ;
45578: LD_ADDR_VAR 0 10
45582: PUSH
45583: LD_VAR 0 1
45587: PPUSH
45588: CALL_OW 274
45592: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45593: LD_ADDR_VAR 0 11
45597: PUSH
45598: LD_VAR 0 2
45602: PPUSH
45603: LD_VAR 0 1
45607: PPUSH
45608: CALL_OW 248
45612: PPUSH
45613: CALL_OW 450
45617: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
45618: LD_VAR 0 10
45622: PPUSH
45623: LD_INT 1
45625: PPUSH
45626: CALL_OW 275
45630: PUSH
45631: LD_VAR 0 11
45635: PUSH
45636: LD_INT 1
45638: ARRAY
45639: GREATEREQUAL
45640: PUSH
45641: LD_VAR 0 10
45645: PPUSH
45646: LD_INT 2
45648: PPUSH
45649: CALL_OW 275
45653: PUSH
45654: LD_VAR 0 11
45658: PUSH
45659: LD_INT 2
45661: ARRAY
45662: GREATEREQUAL
45663: AND
45664: PUSH
45665: LD_VAR 0 10
45669: PPUSH
45670: LD_INT 3
45672: PPUSH
45673: CALL_OW 275
45677: PUSH
45678: LD_VAR 0 11
45682: PUSH
45683: LD_INT 3
45685: ARRAY
45686: GREATEREQUAL
45687: AND
45688: NOT
45689: IFFALSE 45693
// exit ;
45691: GO 46280
// if GetBType ( depot ) = b_depot then
45693: LD_VAR 0 1
45697: PPUSH
45698: CALL_OW 266
45702: PUSH
45703: LD_INT 0
45705: EQUAL
45706: IFFALSE 45718
// dist := 28 else
45708: LD_ADDR_VAR 0 14
45712: PUSH
45713: LD_INT 28
45715: ST_TO_ADDR
45716: GO 45726
// dist := 36 ;
45718: LD_ADDR_VAR 0 14
45722: PUSH
45723: LD_INT 36
45725: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
45726: LD_VAR 0 1
45730: PPUSH
45731: LD_VAR 0 3
45735: PPUSH
45736: LD_VAR 0 4
45740: PPUSH
45741: CALL_OW 297
45745: PUSH
45746: LD_VAR 0 14
45750: GREATER
45751: IFFALSE 45755
// exit ;
45753: GO 46280
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
45755: LD_ADDR_VAR 0 12
45759: PUSH
45760: LD_VAR 0 2
45764: PPUSH
45765: LD_VAR 0 3
45769: PPUSH
45770: LD_VAR 0 4
45774: PPUSH
45775: LD_VAR 0 5
45779: PPUSH
45780: LD_VAR 0 1
45784: PPUSH
45785: CALL_OW 248
45789: PPUSH
45790: LD_INT 0
45792: PPUSH
45793: CALL 46285 0 6
45797: ST_TO_ADDR
// if not hexes then
45798: LD_VAR 0 12
45802: NOT
45803: IFFALSE 45807
// exit ;
45805: GO 46280
// hex := GetHexInfo ( x , y ) ;
45807: LD_ADDR_VAR 0 15
45811: PUSH
45812: LD_VAR 0 3
45816: PPUSH
45817: LD_VAR 0 4
45821: PPUSH
45822: CALL_OW 546
45826: ST_TO_ADDR
// if hex [ 1 ] then
45827: LD_VAR 0 15
45831: PUSH
45832: LD_INT 1
45834: ARRAY
45835: IFFALSE 45839
// exit ;
45837: GO 46280
// height := hex [ 2 ] ;
45839: LD_ADDR_VAR 0 13
45843: PUSH
45844: LD_VAR 0 15
45848: PUSH
45849: LD_INT 2
45851: ARRAY
45852: ST_TO_ADDR
// for i = 1 to hexes do
45853: LD_ADDR_VAR 0 7
45857: PUSH
45858: DOUBLE
45859: LD_INT 1
45861: DEC
45862: ST_TO_ADDR
45863: LD_VAR 0 12
45867: PUSH
45868: FOR_TO
45869: IFFALSE 46199
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
45871: LD_VAR 0 12
45875: PUSH
45876: LD_VAR 0 7
45880: ARRAY
45881: PUSH
45882: LD_INT 1
45884: ARRAY
45885: PPUSH
45886: LD_VAR 0 12
45890: PUSH
45891: LD_VAR 0 7
45895: ARRAY
45896: PUSH
45897: LD_INT 2
45899: ARRAY
45900: PPUSH
45901: CALL_OW 488
45905: NOT
45906: PUSH
45907: LD_VAR 0 12
45911: PUSH
45912: LD_VAR 0 7
45916: ARRAY
45917: PUSH
45918: LD_INT 1
45920: ARRAY
45921: PPUSH
45922: LD_VAR 0 12
45926: PUSH
45927: LD_VAR 0 7
45931: ARRAY
45932: PUSH
45933: LD_INT 2
45935: ARRAY
45936: PPUSH
45937: CALL_OW 428
45941: PUSH
45942: LD_INT 0
45944: GREATER
45945: OR
45946: PUSH
45947: LD_VAR 0 12
45951: PUSH
45952: LD_VAR 0 7
45956: ARRAY
45957: PUSH
45958: LD_INT 1
45960: ARRAY
45961: PPUSH
45962: LD_VAR 0 12
45966: PUSH
45967: LD_VAR 0 7
45971: ARRAY
45972: PUSH
45973: LD_INT 2
45975: ARRAY
45976: PPUSH
45977: CALL_OW 351
45981: OR
45982: IFFALSE 45988
// exit ;
45984: POP
45985: POP
45986: GO 46280
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45988: LD_ADDR_VAR 0 8
45992: PUSH
45993: LD_VAR 0 12
45997: PUSH
45998: LD_VAR 0 7
46002: ARRAY
46003: PUSH
46004: LD_INT 1
46006: ARRAY
46007: PPUSH
46008: LD_VAR 0 12
46012: PUSH
46013: LD_VAR 0 7
46017: ARRAY
46018: PUSH
46019: LD_INT 2
46021: ARRAY
46022: PPUSH
46023: CALL_OW 546
46027: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
46028: LD_VAR 0 8
46032: PUSH
46033: LD_INT 1
46035: ARRAY
46036: PUSH
46037: LD_VAR 0 8
46041: PUSH
46042: LD_INT 2
46044: ARRAY
46045: PUSH
46046: LD_VAR 0 13
46050: PUSH
46051: LD_INT 2
46053: PLUS
46054: GREATER
46055: OR
46056: PUSH
46057: LD_VAR 0 8
46061: PUSH
46062: LD_INT 2
46064: ARRAY
46065: PUSH
46066: LD_VAR 0 13
46070: PUSH
46071: LD_INT 2
46073: MINUS
46074: LESS
46075: OR
46076: PUSH
46077: LD_VAR 0 8
46081: PUSH
46082: LD_INT 3
46084: ARRAY
46085: PUSH
46086: LD_INT 0
46088: PUSH
46089: LD_INT 8
46091: PUSH
46092: LD_INT 9
46094: PUSH
46095: LD_INT 10
46097: PUSH
46098: LD_INT 11
46100: PUSH
46101: LD_INT 12
46103: PUSH
46104: LD_INT 13
46106: PUSH
46107: LD_INT 16
46109: PUSH
46110: LD_INT 17
46112: PUSH
46113: LD_INT 18
46115: PUSH
46116: LD_INT 19
46118: PUSH
46119: LD_INT 20
46121: PUSH
46122: LD_INT 21
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: LIST
46129: LIST
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: IN
46140: NOT
46141: OR
46142: PUSH
46143: LD_VAR 0 8
46147: PUSH
46148: LD_INT 5
46150: ARRAY
46151: NOT
46152: OR
46153: PUSH
46154: LD_VAR 0 8
46158: PUSH
46159: LD_INT 6
46161: ARRAY
46162: PUSH
46163: LD_INT 1
46165: PUSH
46166: LD_INT 2
46168: PUSH
46169: LD_INT 7
46171: PUSH
46172: LD_INT 9
46174: PUSH
46175: LD_INT 10
46177: PUSH
46178: LD_INT 11
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: IN
46189: NOT
46190: OR
46191: IFFALSE 46197
// exit ;
46193: POP
46194: POP
46195: GO 46280
// end ;
46197: GO 45868
46199: POP
46200: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
46201: LD_VAR 0 9
46205: PPUSH
46206: LD_VAR 0 3
46210: PPUSH
46211: LD_VAR 0 4
46215: PPUSH
46216: LD_INT 20
46218: PPUSH
46219: CALL 38203 0 4
46223: PUSH
46224: LD_INT 4
46226: ARRAY
46227: IFFALSE 46231
// exit ;
46229: GO 46280
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
46231: LD_VAR 0 2
46235: PUSH
46236: LD_INT 29
46238: PUSH
46239: LD_INT 30
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: IN
46246: PUSH
46247: LD_VAR 0 3
46251: PPUSH
46252: LD_VAR 0 4
46256: PPUSH
46257: LD_VAR 0 9
46261: PPUSH
46262: CALL_OW 440
46266: NOT
46267: AND
46268: IFFALSE 46272
// exit ;
46270: GO 46280
// result := true ;
46272: LD_ADDR_VAR 0 6
46276: PUSH
46277: LD_INT 1
46279: ST_TO_ADDR
// end ;
46280: LD_VAR 0 6
46284: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
46285: LD_INT 0
46287: PPUSH
46288: PPUSH
46289: PPUSH
46290: PPUSH
46291: PPUSH
46292: PPUSH
46293: PPUSH
46294: PPUSH
46295: PPUSH
46296: PPUSH
46297: PPUSH
46298: PPUSH
46299: PPUSH
46300: PPUSH
46301: PPUSH
46302: PPUSH
46303: PPUSH
46304: PPUSH
46305: PPUSH
46306: PPUSH
46307: PPUSH
46308: PPUSH
46309: PPUSH
46310: PPUSH
46311: PPUSH
46312: PPUSH
46313: PPUSH
46314: PPUSH
46315: PPUSH
46316: PPUSH
46317: PPUSH
46318: PPUSH
46319: PPUSH
46320: PPUSH
46321: PPUSH
46322: PPUSH
46323: PPUSH
46324: PPUSH
46325: PPUSH
46326: PPUSH
46327: PPUSH
46328: PPUSH
46329: PPUSH
46330: PPUSH
46331: PPUSH
46332: PPUSH
46333: PPUSH
46334: PPUSH
46335: PPUSH
46336: PPUSH
46337: PPUSH
46338: PPUSH
46339: PPUSH
46340: PPUSH
46341: PPUSH
46342: PPUSH
46343: PPUSH
46344: PPUSH
// result = [ ] ;
46345: LD_ADDR_VAR 0 7
46349: PUSH
46350: EMPTY
46351: ST_TO_ADDR
// temp_list = [ ] ;
46352: LD_ADDR_VAR 0 9
46356: PUSH
46357: EMPTY
46358: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
46359: LD_VAR 0 4
46363: PUSH
46364: LD_INT 0
46366: PUSH
46367: LD_INT 1
46369: PUSH
46370: LD_INT 2
46372: PUSH
46373: LD_INT 3
46375: PUSH
46376: LD_INT 4
46378: PUSH
46379: LD_INT 5
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: LIST
46386: LIST
46387: LIST
46388: LIST
46389: IN
46390: NOT
46391: PUSH
46392: LD_VAR 0 1
46396: PUSH
46397: LD_INT 0
46399: PUSH
46400: LD_INT 1
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: IN
46407: PUSH
46408: LD_VAR 0 5
46412: PUSH
46413: LD_INT 1
46415: PUSH
46416: LD_INT 2
46418: PUSH
46419: LD_INT 3
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: LIST
46426: IN
46427: NOT
46428: AND
46429: OR
46430: IFFALSE 46434
// exit ;
46432: GO 64825
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
46434: LD_VAR 0 1
46438: PUSH
46439: LD_INT 6
46441: PUSH
46442: LD_INT 7
46444: PUSH
46445: LD_INT 8
46447: PUSH
46448: LD_INT 13
46450: PUSH
46451: LD_INT 12
46453: PUSH
46454: LD_INT 15
46456: PUSH
46457: LD_INT 11
46459: PUSH
46460: LD_INT 14
46462: PUSH
46463: LD_INT 10
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: IN
46477: IFFALSE 46487
// btype = b_lab ;
46479: LD_ADDR_VAR 0 1
46483: PUSH
46484: LD_INT 6
46486: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
46487: LD_VAR 0 6
46491: PUSH
46492: LD_INT 0
46494: PUSH
46495: LD_INT 1
46497: PUSH
46498: LD_INT 2
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: LIST
46505: IN
46506: NOT
46507: PUSH
46508: LD_VAR 0 1
46512: PUSH
46513: LD_INT 0
46515: PUSH
46516: LD_INT 1
46518: PUSH
46519: LD_INT 2
46521: PUSH
46522: LD_INT 3
46524: PUSH
46525: LD_INT 6
46527: PUSH
46528: LD_INT 36
46530: PUSH
46531: LD_INT 4
46533: PUSH
46534: LD_INT 5
46536: PUSH
46537: LD_INT 31
46539: PUSH
46540: LD_INT 32
46542: PUSH
46543: LD_INT 33
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: IN
46559: NOT
46560: PUSH
46561: LD_VAR 0 6
46565: PUSH
46566: LD_INT 1
46568: EQUAL
46569: AND
46570: OR
46571: PUSH
46572: LD_VAR 0 1
46576: PUSH
46577: LD_INT 2
46579: PUSH
46580: LD_INT 3
46582: PUSH
46583: EMPTY
46584: LIST
46585: LIST
46586: IN
46587: NOT
46588: PUSH
46589: LD_VAR 0 6
46593: PUSH
46594: LD_INT 2
46596: EQUAL
46597: AND
46598: OR
46599: IFFALSE 46609
// mode = 0 ;
46601: LD_ADDR_VAR 0 6
46605: PUSH
46606: LD_INT 0
46608: ST_TO_ADDR
// case mode of 0 :
46609: LD_VAR 0 6
46613: PUSH
46614: LD_INT 0
46616: DOUBLE
46617: EQUAL
46618: IFTRUE 46622
46620: GO 58075
46622: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46623: LD_ADDR_VAR 0 11
46627: PUSH
46628: LD_INT 0
46630: PUSH
46631: LD_INT 0
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: LD_INT 0
46640: PUSH
46641: LD_INT 1
46643: NEG
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 1
46651: PUSH
46652: LD_INT 0
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 1
46661: PUSH
46662: LD_INT 1
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 0
46671: PUSH
46672: LD_INT 1
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 1
46681: NEG
46682: PUSH
46683: LD_INT 0
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 1
46692: NEG
46693: PUSH
46694: LD_INT 1
46696: NEG
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: PUSH
46702: LD_INT 1
46704: NEG
46705: PUSH
46706: LD_INT 2
46708: NEG
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 0
46716: PUSH
46717: LD_INT 2
46719: NEG
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 1
46727: PUSH
46728: LD_INT 1
46730: NEG
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 1
46738: PUSH
46739: LD_INT 2
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 0
46748: PUSH
46749: LD_INT 2
46751: PUSH
46752: EMPTY
46753: LIST
46754: LIST
46755: PUSH
46756: LD_INT 1
46758: NEG
46759: PUSH
46760: LD_INT 1
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 1
46769: PUSH
46770: LD_INT 3
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 0
46779: PUSH
46780: LD_INT 3
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 1
46789: NEG
46790: PUSH
46791: LD_INT 2
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: LIST
46809: LIST
46810: LIST
46811: LIST
46812: LIST
46813: LIST
46814: LIST
46815: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46816: LD_ADDR_VAR 0 12
46820: PUSH
46821: LD_INT 0
46823: PUSH
46824: LD_INT 0
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 0
46833: PUSH
46834: LD_INT 1
46836: NEG
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 1
46844: PUSH
46845: LD_INT 0
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 1
46854: PUSH
46855: LD_INT 1
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 0
46864: PUSH
46865: LD_INT 1
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 1
46874: NEG
46875: PUSH
46876: LD_INT 0
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 1
46885: NEG
46886: PUSH
46887: LD_INT 1
46889: NEG
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: PUSH
46895: LD_INT 1
46897: PUSH
46898: LD_INT 1
46900: NEG
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: LD_INT 2
46908: PUSH
46909: LD_INT 0
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_INT 2
46918: PUSH
46919: LD_INT 1
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: PUSH
46926: LD_INT 1
46928: NEG
46929: PUSH
46930: LD_INT 1
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: LD_INT 2
46939: NEG
46940: PUSH
46941: LD_INT 0
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 2
46950: NEG
46951: PUSH
46952: LD_INT 1
46954: NEG
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: PUSH
46960: LD_INT 2
46962: NEG
46963: PUSH
46964: LD_INT 1
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: PUSH
46971: LD_INT 3
46973: NEG
46974: PUSH
46975: LD_INT 0
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 3
46984: NEG
46985: PUSH
46986: LD_INT 1
46988: NEG
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: EMPTY
46995: LIST
46996: LIST
46997: LIST
46998: LIST
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47012: LD_ADDR_VAR 0 13
47016: PUSH
47017: LD_INT 0
47019: PUSH
47020: LD_INT 0
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 0
47029: PUSH
47030: LD_INT 1
47032: NEG
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 1
47040: PUSH
47041: LD_INT 0
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 1
47050: PUSH
47051: LD_INT 1
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 0
47060: PUSH
47061: LD_INT 1
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 1
47070: NEG
47071: PUSH
47072: LD_INT 0
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 1
47081: NEG
47082: PUSH
47083: LD_INT 1
47085: NEG
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 1
47093: NEG
47094: PUSH
47095: LD_INT 2
47097: NEG
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 2
47105: PUSH
47106: LD_INT 1
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 2
47115: PUSH
47116: LD_INT 2
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: LD_INT 1
47125: PUSH
47126: LD_INT 2
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 2
47135: NEG
47136: PUSH
47137: LD_INT 1
47139: NEG
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 2
47147: NEG
47148: PUSH
47149: LD_INT 2
47151: NEG
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 2
47159: NEG
47160: PUSH
47161: LD_INT 3
47163: NEG
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: LD_INT 3
47171: NEG
47172: PUSH
47173: LD_INT 2
47175: NEG
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 3
47183: NEG
47184: PUSH
47185: LD_INT 3
47187: NEG
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: LIST
47197: LIST
47198: LIST
47199: LIST
47200: LIST
47201: LIST
47202: LIST
47203: LIST
47204: LIST
47205: LIST
47206: LIST
47207: LIST
47208: LIST
47209: LIST
47210: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47211: LD_ADDR_VAR 0 14
47215: PUSH
47216: LD_INT 0
47218: PUSH
47219: LD_INT 0
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 0
47228: PUSH
47229: LD_INT 1
47231: NEG
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 1
47239: PUSH
47240: LD_INT 0
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 1
47249: PUSH
47250: LD_INT 1
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: LD_INT 0
47259: PUSH
47260: LD_INT 1
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 1
47269: NEG
47270: PUSH
47271: LD_INT 0
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 1
47280: NEG
47281: PUSH
47282: LD_INT 1
47284: NEG
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 1
47292: NEG
47293: PUSH
47294: LD_INT 2
47296: NEG
47297: PUSH
47298: EMPTY
47299: LIST
47300: LIST
47301: PUSH
47302: LD_INT 0
47304: PUSH
47305: LD_INT 2
47307: NEG
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 1
47315: PUSH
47316: LD_INT 1
47318: NEG
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 1
47326: PUSH
47327: LD_INT 2
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 0
47336: PUSH
47337: LD_INT 2
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 1
47346: NEG
47347: PUSH
47348: LD_INT 1
47350: PUSH
47351: EMPTY
47352: LIST
47353: LIST
47354: PUSH
47355: LD_INT 1
47357: NEG
47358: PUSH
47359: LD_INT 3
47361: NEG
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 0
47369: PUSH
47370: LD_INT 3
47372: NEG
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 1
47380: PUSH
47381: LD_INT 2
47383: NEG
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47407: LD_ADDR_VAR 0 15
47411: PUSH
47412: LD_INT 0
47414: PUSH
47415: LD_INT 0
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 0
47424: PUSH
47425: LD_INT 1
47427: NEG
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 1
47435: PUSH
47436: LD_INT 0
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 1
47445: PUSH
47446: LD_INT 1
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 0
47455: PUSH
47456: LD_INT 1
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 1
47465: NEG
47466: PUSH
47467: LD_INT 0
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 1
47476: NEG
47477: PUSH
47478: LD_INT 1
47480: NEG
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 1
47488: PUSH
47489: LD_INT 1
47491: NEG
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 2
47499: PUSH
47500: LD_INT 0
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: LD_INT 2
47509: PUSH
47510: LD_INT 1
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 1
47519: NEG
47520: PUSH
47521: LD_INT 1
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 2
47530: NEG
47531: PUSH
47532: LD_INT 0
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 2
47541: NEG
47542: PUSH
47543: LD_INT 1
47545: NEG
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 2
47553: PUSH
47554: LD_INT 1
47556: NEG
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 3
47564: PUSH
47565: LD_INT 0
47567: PUSH
47568: EMPTY
47569: LIST
47570: LIST
47571: PUSH
47572: LD_INT 3
47574: PUSH
47575: LD_INT 1
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: LIST
47586: LIST
47587: LIST
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: LIST
47596: LIST
47597: LIST
47598: LIST
47599: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47600: LD_ADDR_VAR 0 16
47604: PUSH
47605: LD_INT 0
47607: PUSH
47608: LD_INT 0
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 0
47617: PUSH
47618: LD_INT 1
47620: NEG
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 1
47628: PUSH
47629: LD_INT 0
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: LD_INT 1
47638: PUSH
47639: LD_INT 1
47641: PUSH
47642: EMPTY
47643: LIST
47644: LIST
47645: PUSH
47646: LD_INT 0
47648: PUSH
47649: LD_INT 1
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 1
47658: NEG
47659: PUSH
47660: LD_INT 0
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: LD_INT 1
47669: NEG
47670: PUSH
47671: LD_INT 1
47673: NEG
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 1
47681: NEG
47682: PUSH
47683: LD_INT 2
47685: NEG
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 2
47693: PUSH
47694: LD_INT 1
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 2
47703: PUSH
47704: LD_INT 2
47706: PUSH
47707: EMPTY
47708: LIST
47709: LIST
47710: PUSH
47711: LD_INT 1
47713: PUSH
47714: LD_INT 2
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: LD_INT 2
47723: NEG
47724: PUSH
47725: LD_INT 1
47727: NEG
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 2
47735: NEG
47736: PUSH
47737: LD_INT 2
47739: NEG
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 3
47747: PUSH
47748: LD_INT 2
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 3
47757: PUSH
47758: LD_INT 3
47760: PUSH
47761: EMPTY
47762: LIST
47763: LIST
47764: PUSH
47765: LD_INT 2
47767: PUSH
47768: LD_INT 3
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: LIST
47779: LIST
47780: LIST
47781: LIST
47782: LIST
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47793: LD_ADDR_VAR 0 17
47797: PUSH
47798: LD_INT 0
47800: PUSH
47801: LD_INT 0
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 0
47810: PUSH
47811: LD_INT 1
47813: NEG
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: LD_INT 1
47821: PUSH
47822: LD_INT 0
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 1
47831: PUSH
47832: LD_INT 1
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 0
47841: PUSH
47842: LD_INT 1
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: LD_INT 1
47851: NEG
47852: PUSH
47853: LD_INT 0
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 1
47862: NEG
47863: PUSH
47864: LD_INT 1
47866: NEG
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 1
47874: NEG
47875: PUSH
47876: LD_INT 2
47878: NEG
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: LD_INT 0
47886: PUSH
47887: LD_INT 2
47889: NEG
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 1
47897: PUSH
47898: LD_INT 1
47900: NEG
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: LD_INT 2
47908: PUSH
47909: LD_INT 0
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: LD_INT 2
47918: PUSH
47919: LD_INT 1
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 2
47928: PUSH
47929: LD_INT 2
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 1
47938: PUSH
47939: LD_INT 2
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: LD_INT 0
47948: PUSH
47949: LD_INT 2
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 1
47958: NEG
47959: PUSH
47960: LD_INT 1
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 2
47969: NEG
47970: PUSH
47971: LD_INT 0
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: LD_INT 2
47980: NEG
47981: PUSH
47982: LD_INT 1
47984: NEG
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 2
47992: NEG
47993: PUSH
47994: LD_INT 2
47996: NEG
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: LIST
48019: LIST
48020: LIST
48021: LIST
48022: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48023: LD_ADDR_VAR 0 18
48027: PUSH
48028: LD_INT 0
48030: PUSH
48031: LD_INT 0
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: LD_INT 0
48040: PUSH
48041: LD_INT 1
48043: NEG
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: LD_INT 1
48051: PUSH
48052: LD_INT 0
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 1
48061: PUSH
48062: LD_INT 1
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_INT 0
48071: PUSH
48072: LD_INT 1
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 1
48081: NEG
48082: PUSH
48083: LD_INT 0
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 1
48092: NEG
48093: PUSH
48094: LD_INT 1
48096: NEG
48097: PUSH
48098: EMPTY
48099: LIST
48100: LIST
48101: PUSH
48102: LD_INT 1
48104: NEG
48105: PUSH
48106: LD_INT 2
48108: NEG
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 0
48116: PUSH
48117: LD_INT 2
48119: NEG
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: LD_INT 1
48127: PUSH
48128: LD_INT 1
48130: NEG
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 2
48138: PUSH
48139: LD_INT 0
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: LD_INT 2
48148: PUSH
48149: LD_INT 1
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 2
48158: PUSH
48159: LD_INT 2
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 1
48168: PUSH
48169: LD_INT 2
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: PUSH
48176: LD_INT 0
48178: PUSH
48179: LD_INT 2
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 1
48188: NEG
48189: PUSH
48190: LD_INT 1
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 2
48199: NEG
48200: PUSH
48201: LD_INT 0
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 2
48210: NEG
48211: PUSH
48212: LD_INT 1
48214: NEG
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 2
48222: NEG
48223: PUSH
48224: LD_INT 2
48226: NEG
48227: PUSH
48228: EMPTY
48229: LIST
48230: LIST
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48253: LD_ADDR_VAR 0 19
48257: PUSH
48258: LD_INT 0
48260: PUSH
48261: LD_INT 0
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 0
48270: PUSH
48271: LD_INT 1
48273: NEG
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 1
48281: PUSH
48282: LD_INT 0
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: LD_INT 1
48291: PUSH
48292: LD_INT 1
48294: PUSH
48295: EMPTY
48296: LIST
48297: LIST
48298: PUSH
48299: LD_INT 0
48301: PUSH
48302: LD_INT 1
48304: PUSH
48305: EMPTY
48306: LIST
48307: LIST
48308: PUSH
48309: LD_INT 1
48311: NEG
48312: PUSH
48313: LD_INT 0
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 1
48322: NEG
48323: PUSH
48324: LD_INT 1
48326: NEG
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 1
48334: NEG
48335: PUSH
48336: LD_INT 2
48338: NEG
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: LD_INT 0
48346: PUSH
48347: LD_INT 2
48349: NEG
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 1
48357: PUSH
48358: LD_INT 1
48360: NEG
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 2
48368: PUSH
48369: LD_INT 0
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: LD_INT 2
48378: PUSH
48379: LD_INT 1
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 2
48388: PUSH
48389: LD_INT 2
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 1
48398: PUSH
48399: LD_INT 2
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: LD_INT 0
48408: PUSH
48409: LD_INT 2
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: PUSH
48416: LD_INT 1
48418: NEG
48419: PUSH
48420: LD_INT 1
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 2
48429: NEG
48430: PUSH
48431: LD_INT 0
48433: PUSH
48434: EMPTY
48435: LIST
48436: LIST
48437: PUSH
48438: LD_INT 2
48440: NEG
48441: PUSH
48442: LD_INT 1
48444: NEG
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 2
48452: NEG
48453: PUSH
48454: LD_INT 2
48456: NEG
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: LIST
48475: LIST
48476: LIST
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48483: LD_ADDR_VAR 0 20
48487: PUSH
48488: LD_INT 0
48490: PUSH
48491: LD_INT 0
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 0
48500: PUSH
48501: LD_INT 1
48503: NEG
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: LD_INT 1
48511: PUSH
48512: LD_INT 0
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 1
48521: PUSH
48522: LD_INT 1
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 0
48531: PUSH
48532: LD_INT 1
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: PUSH
48539: LD_INT 1
48541: NEG
48542: PUSH
48543: LD_INT 0
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PUSH
48550: LD_INT 1
48552: NEG
48553: PUSH
48554: LD_INT 1
48556: NEG
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 1
48564: NEG
48565: PUSH
48566: LD_INT 2
48568: NEG
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 0
48576: PUSH
48577: LD_INT 2
48579: NEG
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: LD_INT 1
48587: PUSH
48588: LD_INT 1
48590: NEG
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: PUSH
48596: LD_INT 2
48598: PUSH
48599: LD_INT 0
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 2
48608: PUSH
48609: LD_INT 1
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 2
48618: PUSH
48619: LD_INT 2
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 1
48628: PUSH
48629: LD_INT 2
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 0
48638: PUSH
48639: LD_INT 2
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 1
48648: NEG
48649: PUSH
48650: LD_INT 1
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 2
48659: NEG
48660: PUSH
48661: LD_INT 0
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: PUSH
48668: LD_INT 2
48670: NEG
48671: PUSH
48672: LD_INT 1
48674: NEG
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: LD_INT 2
48682: NEG
48683: PUSH
48684: LD_INT 2
48686: NEG
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: LIST
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: LIST
48708: LIST
48709: LIST
48710: LIST
48711: LIST
48712: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48713: LD_ADDR_VAR 0 21
48717: PUSH
48718: LD_INT 0
48720: PUSH
48721: LD_INT 0
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 0
48730: PUSH
48731: LD_INT 1
48733: NEG
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 1
48741: PUSH
48742: LD_INT 0
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 1
48751: PUSH
48752: LD_INT 1
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 0
48761: PUSH
48762: LD_INT 1
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 1
48771: NEG
48772: PUSH
48773: LD_INT 0
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 1
48782: NEG
48783: PUSH
48784: LD_INT 1
48786: NEG
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 1
48794: NEG
48795: PUSH
48796: LD_INT 2
48798: NEG
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 0
48806: PUSH
48807: LD_INT 2
48809: NEG
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: LD_INT 1
48817: PUSH
48818: LD_INT 1
48820: NEG
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 2
48828: PUSH
48829: LD_INT 0
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: LD_INT 2
48838: PUSH
48839: LD_INT 1
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: LD_INT 2
48848: PUSH
48849: LD_INT 2
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 1
48858: PUSH
48859: LD_INT 2
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 0
48868: PUSH
48869: LD_INT 2
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 1
48878: NEG
48879: PUSH
48880: LD_INT 1
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 2
48889: NEG
48890: PUSH
48891: LD_INT 0
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 2
48900: NEG
48901: PUSH
48902: LD_INT 1
48904: NEG
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 2
48912: NEG
48913: PUSH
48914: LD_INT 2
48916: NEG
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48943: LD_ADDR_VAR 0 22
48947: PUSH
48948: LD_INT 0
48950: PUSH
48951: LD_INT 0
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 0
48960: PUSH
48961: LD_INT 1
48963: NEG
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 1
48971: PUSH
48972: LD_INT 0
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: LD_INT 1
48981: PUSH
48982: LD_INT 1
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 0
48991: PUSH
48992: LD_INT 1
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 1
49001: NEG
49002: PUSH
49003: LD_INT 0
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 1
49012: NEG
49013: PUSH
49014: LD_INT 1
49016: NEG
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 1
49024: NEG
49025: PUSH
49026: LD_INT 2
49028: NEG
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: LD_INT 0
49036: PUSH
49037: LD_INT 2
49039: NEG
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: PUSH
49045: LD_INT 1
49047: PUSH
49048: LD_INT 1
49050: NEG
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 2
49058: PUSH
49059: LD_INT 0
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 2
49068: PUSH
49069: LD_INT 1
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 2
49078: PUSH
49079: LD_INT 2
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 1
49088: PUSH
49089: LD_INT 2
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 0
49098: PUSH
49099: LD_INT 2
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 1
49108: NEG
49109: PUSH
49110: LD_INT 1
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: LD_INT 2
49119: NEG
49120: PUSH
49121: LD_INT 0
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 2
49130: NEG
49131: PUSH
49132: LD_INT 1
49134: NEG
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 2
49142: NEG
49143: PUSH
49144: LD_INT 2
49146: NEG
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: LIST
49172: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49173: LD_ADDR_VAR 0 23
49177: PUSH
49178: LD_INT 0
49180: PUSH
49181: LD_INT 0
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 0
49190: PUSH
49191: LD_INT 1
49193: NEG
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: LD_INT 1
49201: PUSH
49202: LD_INT 0
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 1
49211: PUSH
49212: LD_INT 1
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 0
49221: PUSH
49222: LD_INT 1
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 1
49231: NEG
49232: PUSH
49233: LD_INT 0
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 1
49242: NEG
49243: PUSH
49244: LD_INT 1
49246: NEG
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 1
49254: NEG
49255: PUSH
49256: LD_INT 2
49258: NEG
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 0
49266: PUSH
49267: LD_INT 2
49269: NEG
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: PUSH
49275: LD_INT 1
49277: PUSH
49278: LD_INT 1
49280: NEG
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 2
49288: PUSH
49289: LD_INT 0
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 2
49298: PUSH
49299: LD_INT 1
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 2
49308: PUSH
49309: LD_INT 2
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 1
49318: PUSH
49319: LD_INT 2
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 0
49328: PUSH
49329: LD_INT 2
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 1
49338: NEG
49339: PUSH
49340: LD_INT 1
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 2
49349: NEG
49350: PUSH
49351: LD_INT 0
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 2
49360: NEG
49361: PUSH
49362: LD_INT 1
49364: NEG
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 2
49372: NEG
49373: PUSH
49374: LD_INT 2
49376: NEG
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 2
49384: NEG
49385: PUSH
49386: LD_INT 3
49388: NEG
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 1
49396: NEG
49397: PUSH
49398: LD_INT 3
49400: NEG
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 1
49408: PUSH
49409: LD_INT 2
49411: NEG
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 2
49419: PUSH
49420: LD_INT 1
49422: NEG
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: LIST
49451: LIST
49452: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
49453: LD_ADDR_VAR 0 24
49457: PUSH
49458: LD_INT 0
49460: PUSH
49461: LD_INT 0
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: LD_INT 0
49470: PUSH
49471: LD_INT 1
49473: NEG
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 1
49481: PUSH
49482: LD_INT 0
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: PUSH
49489: LD_INT 1
49491: PUSH
49492: LD_INT 1
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 0
49501: PUSH
49502: LD_INT 1
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 1
49511: NEG
49512: PUSH
49513: LD_INT 0
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: LD_INT 1
49522: NEG
49523: PUSH
49524: LD_INT 1
49526: NEG
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 1
49534: NEG
49535: PUSH
49536: LD_INT 2
49538: NEG
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 0
49546: PUSH
49547: LD_INT 2
49549: NEG
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 1
49557: PUSH
49558: LD_INT 1
49560: NEG
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: LD_INT 2
49568: PUSH
49569: LD_INT 0
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_INT 2
49578: PUSH
49579: LD_INT 1
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 2
49588: PUSH
49589: LD_INT 2
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 1
49598: PUSH
49599: LD_INT 2
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 0
49608: PUSH
49609: LD_INT 2
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 1
49618: NEG
49619: PUSH
49620: LD_INT 1
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: LD_INT 2
49629: NEG
49630: PUSH
49631: LD_INT 0
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 2
49640: NEG
49641: PUSH
49642: LD_INT 1
49644: NEG
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 2
49652: NEG
49653: PUSH
49654: LD_INT 2
49656: NEG
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: PUSH
49662: LD_INT 1
49664: PUSH
49665: LD_INT 2
49667: NEG
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 2
49675: PUSH
49676: LD_INT 1
49678: NEG
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 3
49686: PUSH
49687: LD_INT 1
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 3
49696: PUSH
49697: LD_INT 2
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: LIST
49728: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
49729: LD_ADDR_VAR 0 25
49733: PUSH
49734: LD_INT 0
49736: PUSH
49737: LD_INT 0
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: PUSH
49744: LD_INT 0
49746: PUSH
49747: LD_INT 1
49749: NEG
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 1
49757: PUSH
49758: LD_INT 0
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 1
49767: PUSH
49768: LD_INT 1
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 0
49777: PUSH
49778: LD_INT 1
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 1
49787: NEG
49788: PUSH
49789: LD_INT 0
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 1
49798: NEG
49799: PUSH
49800: LD_INT 1
49802: NEG
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: LD_INT 1
49810: NEG
49811: PUSH
49812: LD_INT 2
49814: NEG
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: LD_INT 0
49822: PUSH
49823: LD_INT 2
49825: NEG
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 1
49833: PUSH
49834: LD_INT 1
49836: NEG
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 2
49844: PUSH
49845: LD_INT 0
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 2
49854: PUSH
49855: LD_INT 1
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 2
49864: PUSH
49865: LD_INT 2
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 1
49874: PUSH
49875: LD_INT 2
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 0
49884: PUSH
49885: LD_INT 2
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 1
49894: NEG
49895: PUSH
49896: LD_INT 1
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 2
49905: NEG
49906: PUSH
49907: LD_INT 0
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 2
49916: NEG
49917: PUSH
49918: LD_INT 1
49920: NEG
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 2
49928: NEG
49929: PUSH
49930: LD_INT 2
49932: NEG
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 3
49940: PUSH
49941: LD_INT 1
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 3
49950: PUSH
49951: LD_INT 2
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 2
49960: PUSH
49961: LD_INT 3
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 1
49970: PUSH
49971: LD_INT 3
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: LIST
49990: LIST
49991: LIST
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: LIST
50000: LIST
50001: LIST
50002: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50003: LD_ADDR_VAR 0 26
50007: PUSH
50008: LD_INT 0
50010: PUSH
50011: LD_INT 0
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 0
50020: PUSH
50021: LD_INT 1
50023: NEG
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 1
50031: PUSH
50032: LD_INT 0
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 1
50041: PUSH
50042: LD_INT 1
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 0
50051: PUSH
50052: LD_INT 1
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: LD_INT 1
50061: NEG
50062: PUSH
50063: LD_INT 0
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 1
50072: NEG
50073: PUSH
50074: LD_INT 1
50076: NEG
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: LD_INT 1
50084: NEG
50085: PUSH
50086: LD_INT 2
50088: NEG
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: LD_INT 0
50096: PUSH
50097: LD_INT 2
50099: NEG
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: LD_INT 1
50107: PUSH
50108: LD_INT 1
50110: NEG
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 2
50118: PUSH
50119: LD_INT 0
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 2
50128: PUSH
50129: LD_INT 1
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 2
50138: PUSH
50139: LD_INT 2
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 1
50148: PUSH
50149: LD_INT 2
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 0
50158: PUSH
50159: LD_INT 2
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 1
50168: NEG
50169: PUSH
50170: LD_INT 1
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 2
50179: NEG
50180: PUSH
50181: LD_INT 0
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 2
50190: NEG
50191: PUSH
50192: LD_INT 1
50194: NEG
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: LD_INT 2
50202: NEG
50203: PUSH
50204: LD_INT 2
50206: NEG
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 2
50214: PUSH
50215: LD_INT 3
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 1
50224: PUSH
50225: LD_INT 3
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 1
50234: NEG
50235: PUSH
50236: LD_INT 2
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 2
50245: NEG
50246: PUSH
50247: LD_INT 1
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: LIST
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50279: LD_ADDR_VAR 0 27
50283: PUSH
50284: LD_INT 0
50286: PUSH
50287: LD_INT 0
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PUSH
50294: LD_INT 0
50296: PUSH
50297: LD_INT 1
50299: NEG
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 1
50307: PUSH
50308: LD_INT 0
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 1
50317: PUSH
50318: LD_INT 1
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 0
50327: PUSH
50328: LD_INT 1
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 1
50337: NEG
50338: PUSH
50339: LD_INT 0
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 1
50348: NEG
50349: PUSH
50350: LD_INT 1
50352: NEG
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 1
50360: NEG
50361: PUSH
50362: LD_INT 2
50364: NEG
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 0
50372: PUSH
50373: LD_INT 2
50375: NEG
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: PUSH
50381: LD_INT 1
50383: PUSH
50384: LD_INT 1
50386: NEG
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: PUSH
50392: LD_INT 2
50394: PUSH
50395: LD_INT 0
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 2
50404: PUSH
50405: LD_INT 1
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 2
50414: PUSH
50415: LD_INT 2
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 1
50424: PUSH
50425: LD_INT 2
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: PUSH
50432: LD_INT 0
50434: PUSH
50435: LD_INT 2
50437: PUSH
50438: EMPTY
50439: LIST
50440: LIST
50441: PUSH
50442: LD_INT 1
50444: NEG
50445: PUSH
50446: LD_INT 1
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 2
50455: NEG
50456: PUSH
50457: LD_INT 0
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 2
50466: NEG
50467: PUSH
50468: LD_INT 1
50470: NEG
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: LD_INT 2
50478: NEG
50479: PUSH
50480: LD_INT 2
50482: NEG
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 1
50490: NEG
50491: PUSH
50492: LD_INT 2
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 2
50501: NEG
50502: PUSH
50503: LD_INT 1
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 3
50512: NEG
50513: PUSH
50514: LD_INT 1
50516: NEG
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: PUSH
50522: LD_INT 3
50524: NEG
50525: PUSH
50526: LD_INT 2
50528: NEG
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50559: LD_ADDR_VAR 0 28
50563: PUSH
50564: LD_INT 0
50566: PUSH
50567: LD_INT 0
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 0
50576: PUSH
50577: LD_INT 1
50579: NEG
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 1
50587: PUSH
50588: LD_INT 0
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 1
50597: PUSH
50598: LD_INT 1
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 0
50607: PUSH
50608: LD_INT 1
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 1
50617: NEG
50618: PUSH
50619: LD_INT 0
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 1
50628: NEG
50629: PUSH
50630: LD_INT 1
50632: NEG
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 1
50640: NEG
50641: PUSH
50642: LD_INT 2
50644: NEG
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 0
50652: PUSH
50653: LD_INT 2
50655: NEG
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 1
50663: PUSH
50664: LD_INT 1
50666: NEG
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 2
50674: PUSH
50675: LD_INT 0
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 2
50684: PUSH
50685: LD_INT 1
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 2
50694: PUSH
50695: LD_INT 2
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: LD_INT 1
50704: PUSH
50705: LD_INT 2
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 0
50714: PUSH
50715: LD_INT 2
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 1
50724: NEG
50725: PUSH
50726: LD_INT 1
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 2
50735: NEG
50736: PUSH
50737: LD_INT 0
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 2
50746: NEG
50747: PUSH
50748: LD_INT 1
50750: NEG
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 2
50758: NEG
50759: PUSH
50760: LD_INT 2
50762: NEG
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 2
50770: NEG
50771: PUSH
50772: LD_INT 3
50774: NEG
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 1
50782: NEG
50783: PUSH
50784: LD_INT 3
50786: NEG
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 3
50794: NEG
50795: PUSH
50796: LD_INT 1
50798: NEG
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 3
50806: NEG
50807: PUSH
50808: LD_INT 2
50810: NEG
50811: PUSH
50812: EMPTY
50813: LIST
50814: LIST
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50841: LD_ADDR_VAR 0 29
50845: PUSH
50846: LD_INT 0
50848: PUSH
50849: LD_INT 0
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 0
50858: PUSH
50859: LD_INT 1
50861: NEG
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 1
50869: PUSH
50870: LD_INT 0
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 1
50879: PUSH
50880: LD_INT 1
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 0
50889: PUSH
50890: LD_INT 1
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 1
50899: NEG
50900: PUSH
50901: LD_INT 0
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 1
50910: NEG
50911: PUSH
50912: LD_INT 1
50914: NEG
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: LD_INT 1
50922: NEG
50923: PUSH
50924: LD_INT 2
50926: NEG
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 0
50934: PUSH
50935: LD_INT 2
50937: NEG
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: LD_INT 1
50945: PUSH
50946: LD_INT 1
50948: NEG
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 2
50956: PUSH
50957: LD_INT 0
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 2
50966: PUSH
50967: LD_INT 1
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 1
50976: PUSH
50977: LD_INT 2
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 0
50986: PUSH
50987: LD_INT 2
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 1
50996: NEG
50997: PUSH
50998: LD_INT 1
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 2
51007: NEG
51008: PUSH
51009: LD_INT 1
51011: NEG
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: LD_INT 2
51019: NEG
51020: PUSH
51021: LD_INT 2
51023: NEG
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 2
51031: NEG
51032: PUSH
51033: LD_INT 3
51035: NEG
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 2
51043: PUSH
51044: LD_INT 1
51046: NEG
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 3
51054: PUSH
51055: LD_INT 1
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 1
51064: PUSH
51065: LD_INT 3
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 1
51074: NEG
51075: PUSH
51076: LD_INT 2
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 3
51085: NEG
51086: PUSH
51087: LD_INT 2
51089: NEG
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51120: LD_ADDR_VAR 0 30
51124: PUSH
51125: LD_INT 0
51127: PUSH
51128: LD_INT 0
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 0
51137: PUSH
51138: LD_INT 1
51140: NEG
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 1
51148: PUSH
51149: LD_INT 0
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 1
51158: PUSH
51159: LD_INT 1
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 0
51168: PUSH
51169: LD_INT 1
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 1
51178: NEG
51179: PUSH
51180: LD_INT 0
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 1
51189: NEG
51190: PUSH
51191: LD_INT 1
51193: NEG
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: PUSH
51199: LD_INT 1
51201: NEG
51202: PUSH
51203: LD_INT 2
51205: NEG
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: LD_INT 0
51213: PUSH
51214: LD_INT 2
51216: NEG
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: PUSH
51222: LD_INT 1
51224: PUSH
51225: LD_INT 1
51227: NEG
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 2
51235: PUSH
51236: LD_INT 0
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 2
51245: PUSH
51246: LD_INT 1
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 2
51255: PUSH
51256: LD_INT 2
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 1
51265: PUSH
51266: LD_INT 2
51268: PUSH
51269: EMPTY
51270: LIST
51271: LIST
51272: PUSH
51273: LD_INT 1
51275: NEG
51276: PUSH
51277: LD_INT 1
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 2
51286: NEG
51287: PUSH
51288: LD_INT 0
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 2
51297: NEG
51298: PUSH
51299: LD_INT 1
51301: NEG
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 1
51309: NEG
51310: PUSH
51311: LD_INT 3
51313: NEG
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 1
51321: PUSH
51322: LD_INT 2
51324: NEG
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 3
51332: PUSH
51333: LD_INT 2
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: LD_INT 2
51342: PUSH
51343: LD_INT 3
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 2
51352: NEG
51353: PUSH
51354: LD_INT 1
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: LD_INT 3
51363: NEG
51364: PUSH
51365: LD_INT 1
51367: NEG
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51398: LD_ADDR_VAR 0 31
51402: PUSH
51403: LD_INT 0
51405: PUSH
51406: LD_INT 0
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: LD_INT 0
51415: PUSH
51416: LD_INT 1
51418: NEG
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: LD_INT 1
51426: PUSH
51427: LD_INT 0
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 1
51436: PUSH
51437: LD_INT 1
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 0
51446: PUSH
51447: LD_INT 1
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 1
51456: NEG
51457: PUSH
51458: LD_INT 0
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 1
51467: NEG
51468: PUSH
51469: LD_INT 1
51471: NEG
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 1
51479: NEG
51480: PUSH
51481: LD_INT 2
51483: NEG
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: LD_INT 1
51491: PUSH
51492: LD_INT 1
51494: NEG
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: LD_INT 2
51502: PUSH
51503: LD_INT 0
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 2
51512: PUSH
51513: LD_INT 1
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 2
51522: PUSH
51523: LD_INT 2
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 1
51532: PUSH
51533: LD_INT 2
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 0
51542: PUSH
51543: LD_INT 2
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 1
51552: NEG
51553: PUSH
51554: LD_INT 1
51556: PUSH
51557: EMPTY
51558: LIST
51559: LIST
51560: PUSH
51561: LD_INT 2
51563: NEG
51564: PUSH
51565: LD_INT 1
51567: NEG
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 2
51575: NEG
51576: PUSH
51577: LD_INT 2
51579: NEG
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: LD_INT 2
51587: NEG
51588: PUSH
51589: LD_INT 3
51591: NEG
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 2
51599: PUSH
51600: LD_INT 1
51602: NEG
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: LD_INT 3
51610: PUSH
51611: LD_INT 1
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: PUSH
51618: LD_INT 1
51620: PUSH
51621: LD_INT 3
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 1
51630: NEG
51631: PUSH
51632: LD_INT 2
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 3
51641: NEG
51642: PUSH
51643: LD_INT 2
51645: NEG
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: LIST
51655: LIST
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51676: LD_ADDR_VAR 0 32
51680: PUSH
51681: LD_INT 0
51683: PUSH
51684: LD_INT 0
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: LD_INT 0
51693: PUSH
51694: LD_INT 1
51696: NEG
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: PUSH
51702: LD_INT 1
51704: PUSH
51705: LD_INT 0
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 1
51714: PUSH
51715: LD_INT 1
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: LD_INT 0
51724: PUSH
51725: LD_INT 1
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 1
51734: NEG
51735: PUSH
51736: LD_INT 0
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 1
51745: NEG
51746: PUSH
51747: LD_INT 1
51749: NEG
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 1
51757: NEG
51758: PUSH
51759: LD_INT 2
51761: NEG
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: LD_INT 0
51769: PUSH
51770: LD_INT 2
51772: NEG
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 1
51780: PUSH
51781: LD_INT 1
51783: NEG
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 2
51791: PUSH
51792: LD_INT 1
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 2
51801: PUSH
51802: LD_INT 2
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 1
51811: PUSH
51812: LD_INT 2
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 0
51821: PUSH
51822: LD_INT 2
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 1
51831: NEG
51832: PUSH
51833: LD_INT 1
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 2
51842: NEG
51843: PUSH
51844: LD_INT 0
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 2
51853: NEG
51854: PUSH
51855: LD_INT 1
51857: NEG
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 1
51865: NEG
51866: PUSH
51867: LD_INT 3
51869: NEG
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: PUSH
51875: LD_INT 1
51877: PUSH
51878: LD_INT 2
51880: NEG
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 3
51888: PUSH
51889: LD_INT 2
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 2
51898: PUSH
51899: LD_INT 3
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 2
51908: NEG
51909: PUSH
51910: LD_INT 1
51912: PUSH
51913: EMPTY
51914: LIST
51915: LIST
51916: PUSH
51917: LD_INT 3
51919: NEG
51920: PUSH
51921: LD_INT 1
51923: NEG
51924: PUSH
51925: EMPTY
51926: LIST
51927: LIST
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: LIST
51937: LIST
51938: LIST
51939: LIST
51940: LIST
51941: LIST
51942: LIST
51943: LIST
51944: LIST
51945: LIST
51946: LIST
51947: LIST
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: LIST
51953: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51954: LD_ADDR_VAR 0 33
51958: PUSH
51959: LD_INT 0
51961: PUSH
51962: LD_INT 0
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 0
51971: PUSH
51972: LD_INT 1
51974: NEG
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 1
51982: PUSH
51983: LD_INT 0
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: LD_INT 1
51992: PUSH
51993: LD_INT 1
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 0
52002: PUSH
52003: LD_INT 1
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 1
52012: NEG
52013: PUSH
52014: LD_INT 0
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 1
52023: NEG
52024: PUSH
52025: LD_INT 1
52027: NEG
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 1
52035: NEG
52036: PUSH
52037: LD_INT 2
52039: NEG
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 1
52047: PUSH
52048: LD_INT 1
52050: NEG
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 2
52058: PUSH
52059: LD_INT 0
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 2
52068: PUSH
52069: LD_INT 1
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 1
52078: PUSH
52079: LD_INT 2
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 0
52088: PUSH
52089: LD_INT 2
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 1
52098: NEG
52099: PUSH
52100: LD_INT 1
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PUSH
52107: LD_INT 2
52109: NEG
52110: PUSH
52111: LD_INT 0
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 2
52120: NEG
52121: PUSH
52122: LD_INT 1
52124: NEG
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 2
52132: NEG
52133: PUSH
52134: LD_INT 2
52136: NEG
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 2
52144: NEG
52145: PUSH
52146: LD_INT 3
52148: NEG
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 2
52156: PUSH
52157: LD_INT 1
52159: NEG
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 3
52167: PUSH
52168: LD_INT 1
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: PUSH
52175: LD_INT 1
52177: PUSH
52178: LD_INT 3
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: PUSH
52185: LD_INT 1
52187: NEG
52188: PUSH
52189: LD_INT 2
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: LD_INT 3
52198: NEG
52199: PUSH
52200: LD_INT 2
52202: NEG
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: EMPTY
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: LIST
52227: LIST
52228: LIST
52229: LIST
52230: LIST
52231: LIST
52232: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52233: LD_ADDR_VAR 0 34
52237: PUSH
52238: LD_INT 0
52240: PUSH
52241: LD_INT 0
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 0
52250: PUSH
52251: LD_INT 1
52253: NEG
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 1
52261: PUSH
52262: LD_INT 0
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 1
52271: PUSH
52272: LD_INT 1
52274: PUSH
52275: EMPTY
52276: LIST
52277: LIST
52278: PUSH
52279: LD_INT 0
52281: PUSH
52282: LD_INT 1
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: LD_INT 1
52291: NEG
52292: PUSH
52293: LD_INT 0
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 1
52302: NEG
52303: PUSH
52304: LD_INT 1
52306: NEG
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 1
52314: NEG
52315: PUSH
52316: LD_INT 2
52318: NEG
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: LD_INT 0
52326: PUSH
52327: LD_INT 2
52329: NEG
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 1
52337: PUSH
52338: LD_INT 1
52340: NEG
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: LD_INT 2
52348: PUSH
52349: LD_INT 1
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 2
52358: PUSH
52359: LD_INT 2
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 1
52368: PUSH
52369: LD_INT 2
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 1
52378: NEG
52379: PUSH
52380: LD_INT 1
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 2
52389: NEG
52390: PUSH
52391: LD_INT 0
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 2
52400: NEG
52401: PUSH
52402: LD_INT 1
52404: NEG
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 2
52412: NEG
52413: PUSH
52414: LD_INT 2
52416: NEG
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 1
52424: NEG
52425: PUSH
52426: LD_INT 3
52428: NEG
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: PUSH
52434: LD_INT 1
52436: PUSH
52437: LD_INT 2
52439: NEG
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 3
52447: PUSH
52448: LD_INT 2
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 2
52457: PUSH
52458: LD_INT 3
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: LD_INT 2
52467: NEG
52468: PUSH
52469: LD_INT 1
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 3
52478: NEG
52479: PUSH
52480: LD_INT 1
52482: NEG
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: LIST
52492: LIST
52493: LIST
52494: LIST
52495: LIST
52496: LIST
52497: LIST
52498: LIST
52499: LIST
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52513: LD_ADDR_VAR 0 35
52517: PUSH
52518: LD_INT 0
52520: PUSH
52521: LD_INT 0
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: PUSH
52528: LD_INT 0
52530: PUSH
52531: LD_INT 1
52533: NEG
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: PUSH
52539: LD_INT 1
52541: PUSH
52542: LD_INT 0
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 1
52551: PUSH
52552: LD_INT 1
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 0
52561: PUSH
52562: LD_INT 1
52564: PUSH
52565: EMPTY
52566: LIST
52567: LIST
52568: PUSH
52569: LD_INT 1
52571: NEG
52572: PUSH
52573: LD_INT 0
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 1
52582: NEG
52583: PUSH
52584: LD_INT 1
52586: NEG
52587: PUSH
52588: EMPTY
52589: LIST
52590: LIST
52591: PUSH
52592: LD_INT 2
52594: PUSH
52595: LD_INT 1
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 2
52604: NEG
52605: PUSH
52606: LD_INT 1
52608: NEG
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52625: LD_ADDR_VAR 0 36
52629: PUSH
52630: LD_INT 0
52632: PUSH
52633: LD_INT 0
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PUSH
52640: LD_INT 0
52642: PUSH
52643: LD_INT 1
52645: NEG
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 1
52653: PUSH
52654: LD_INT 0
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 1
52663: PUSH
52664: LD_INT 1
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 0
52673: PUSH
52674: LD_INT 1
52676: PUSH
52677: EMPTY
52678: LIST
52679: LIST
52680: PUSH
52681: LD_INT 1
52683: NEG
52684: PUSH
52685: LD_INT 0
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 1
52694: NEG
52695: PUSH
52696: LD_INT 1
52698: NEG
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: LD_INT 1
52706: NEG
52707: PUSH
52708: LD_INT 2
52710: NEG
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: LD_INT 1
52718: PUSH
52719: LD_INT 2
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: LIST
52730: LIST
52731: LIST
52732: LIST
52733: LIST
52734: LIST
52735: LIST
52736: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52737: LD_ADDR_VAR 0 37
52741: PUSH
52742: LD_INT 0
52744: PUSH
52745: LD_INT 0
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 0
52754: PUSH
52755: LD_INT 1
52757: NEG
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 1
52765: PUSH
52766: LD_INT 0
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 1
52775: PUSH
52776: LD_INT 1
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 0
52785: PUSH
52786: LD_INT 1
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 1
52795: NEG
52796: PUSH
52797: LD_INT 0
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 1
52806: NEG
52807: PUSH
52808: LD_INT 1
52810: NEG
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 1
52818: PUSH
52819: LD_INT 1
52821: NEG
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 1
52829: NEG
52830: PUSH
52831: LD_INT 1
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52849: LD_ADDR_VAR 0 38
52853: PUSH
52854: LD_INT 0
52856: PUSH
52857: LD_INT 0
52859: PUSH
52860: EMPTY
52861: LIST
52862: LIST
52863: PUSH
52864: LD_INT 0
52866: PUSH
52867: LD_INT 1
52869: NEG
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PUSH
52875: LD_INT 1
52877: PUSH
52878: LD_INT 0
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: LD_INT 1
52887: PUSH
52888: LD_INT 1
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: LD_INT 0
52897: PUSH
52898: LD_INT 1
52900: PUSH
52901: EMPTY
52902: LIST
52903: LIST
52904: PUSH
52905: LD_INT 1
52907: NEG
52908: PUSH
52909: LD_INT 0
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: PUSH
52916: LD_INT 1
52918: NEG
52919: PUSH
52920: LD_INT 1
52922: NEG
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 2
52930: PUSH
52931: LD_INT 1
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 2
52940: NEG
52941: PUSH
52942: LD_INT 1
52944: NEG
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52961: LD_ADDR_VAR 0 39
52965: PUSH
52966: LD_INT 0
52968: PUSH
52969: LD_INT 0
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: PUSH
52976: LD_INT 0
52978: PUSH
52979: LD_INT 1
52981: NEG
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: PUSH
52987: LD_INT 1
52989: PUSH
52990: LD_INT 0
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: LD_INT 1
52999: PUSH
53000: LD_INT 1
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 0
53009: PUSH
53010: LD_INT 1
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: LD_INT 1
53019: NEG
53020: PUSH
53021: LD_INT 0
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: LD_INT 1
53030: NEG
53031: PUSH
53032: LD_INT 1
53034: NEG
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 1
53042: NEG
53043: PUSH
53044: LD_INT 2
53046: NEG
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 1
53054: PUSH
53055: LD_INT 2
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: LIST
53070: LIST
53071: LIST
53072: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53073: LD_ADDR_VAR 0 40
53077: PUSH
53078: LD_INT 0
53080: PUSH
53081: LD_INT 0
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 0
53090: PUSH
53091: LD_INT 1
53093: NEG
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 1
53101: PUSH
53102: LD_INT 0
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 1
53111: PUSH
53112: LD_INT 1
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: PUSH
53119: LD_INT 0
53121: PUSH
53122: LD_INT 1
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 1
53131: NEG
53132: PUSH
53133: LD_INT 0
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: LD_INT 1
53142: NEG
53143: PUSH
53144: LD_INT 1
53146: NEG
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 1
53154: PUSH
53155: LD_INT 1
53157: NEG
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 1
53165: NEG
53166: PUSH
53167: LD_INT 1
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53185: LD_ADDR_VAR 0 41
53189: PUSH
53190: LD_INT 0
53192: PUSH
53193: LD_INT 0
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 0
53202: PUSH
53203: LD_INT 1
53205: NEG
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 1
53213: PUSH
53214: LD_INT 0
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 1
53223: PUSH
53224: LD_INT 1
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: PUSH
53231: LD_INT 0
53233: PUSH
53234: LD_INT 1
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 1
53243: NEG
53244: PUSH
53245: LD_INT 0
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 1
53254: NEG
53255: PUSH
53256: LD_INT 1
53258: NEG
53259: PUSH
53260: EMPTY
53261: LIST
53262: LIST
53263: PUSH
53264: LD_INT 1
53266: NEG
53267: PUSH
53268: LD_INT 2
53270: NEG
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: LD_INT 1
53278: PUSH
53279: LD_INT 1
53281: NEG
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 2
53289: PUSH
53290: LD_INT 0
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 2
53299: PUSH
53300: LD_INT 1
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 2
53309: PUSH
53310: LD_INT 2
53312: PUSH
53313: EMPTY
53314: LIST
53315: LIST
53316: PUSH
53317: LD_INT 1
53319: PUSH
53320: LD_INT 2
53322: PUSH
53323: EMPTY
53324: LIST
53325: LIST
53326: PUSH
53327: LD_INT 1
53329: NEG
53330: PUSH
53331: LD_INT 1
53333: PUSH
53334: EMPTY
53335: LIST
53336: LIST
53337: PUSH
53338: LD_INT 2
53340: NEG
53341: PUSH
53342: LD_INT 0
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 2
53351: NEG
53352: PUSH
53353: LD_INT 1
53355: NEG
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 2
53363: NEG
53364: PUSH
53365: LD_INT 2
53367: NEG
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 2
53375: NEG
53376: PUSH
53377: LD_INT 3
53379: NEG
53380: PUSH
53381: EMPTY
53382: LIST
53383: LIST
53384: PUSH
53385: LD_INT 2
53387: PUSH
53388: LD_INT 1
53390: NEG
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 3
53398: PUSH
53399: LD_INT 0
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: PUSH
53406: LD_INT 3
53408: PUSH
53409: LD_INT 1
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: LD_INT 3
53418: PUSH
53419: LD_INT 2
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 3
53428: PUSH
53429: LD_INT 3
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 2
53438: PUSH
53439: LD_INT 3
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 2
53448: NEG
53449: PUSH
53450: LD_INT 1
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 3
53459: NEG
53460: PUSH
53461: LD_INT 0
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: LD_INT 3
53470: NEG
53471: PUSH
53472: LD_INT 1
53474: NEG
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 3
53482: NEG
53483: PUSH
53484: LD_INT 2
53486: NEG
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 3
53494: NEG
53495: PUSH
53496: LD_INT 3
53498: NEG
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: LIST
53515: LIST
53516: LIST
53517: LIST
53518: LIST
53519: LIST
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: LIST
53532: LIST
53533: LIST
53534: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53535: LD_ADDR_VAR 0 42
53539: PUSH
53540: LD_INT 0
53542: PUSH
53543: LD_INT 0
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 0
53552: PUSH
53553: LD_INT 1
53555: NEG
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 1
53563: PUSH
53564: LD_INT 0
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 1
53573: PUSH
53574: LD_INT 1
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: PUSH
53581: LD_INT 0
53583: PUSH
53584: LD_INT 1
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: LD_INT 1
53593: NEG
53594: PUSH
53595: LD_INT 0
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 1
53604: NEG
53605: PUSH
53606: LD_INT 1
53608: NEG
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 1
53616: NEG
53617: PUSH
53618: LD_INT 2
53620: NEG
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: PUSH
53626: LD_INT 0
53628: PUSH
53629: LD_INT 2
53631: NEG
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 1
53639: PUSH
53640: LD_INT 1
53642: NEG
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 2
53650: PUSH
53651: LD_INT 1
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 2
53660: PUSH
53661: LD_INT 2
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 1
53670: PUSH
53671: LD_INT 2
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 0
53680: PUSH
53681: LD_INT 2
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 1
53690: NEG
53691: PUSH
53692: LD_INT 1
53694: PUSH
53695: EMPTY
53696: LIST
53697: LIST
53698: PUSH
53699: LD_INT 2
53701: NEG
53702: PUSH
53703: LD_INT 1
53705: NEG
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 2
53713: NEG
53714: PUSH
53715: LD_INT 2
53717: NEG
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 2
53725: NEG
53726: PUSH
53727: LD_INT 3
53729: NEG
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 1
53737: NEG
53738: PUSH
53739: LD_INT 3
53741: NEG
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: LD_INT 0
53749: PUSH
53750: LD_INT 3
53752: NEG
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 1
53760: PUSH
53761: LD_INT 2
53763: NEG
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 3
53771: PUSH
53772: LD_INT 2
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 3
53781: PUSH
53782: LD_INT 3
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 2
53791: PUSH
53792: LD_INT 3
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 1
53801: PUSH
53802: LD_INT 3
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 0
53811: PUSH
53812: LD_INT 3
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_INT 1
53821: NEG
53822: PUSH
53823: LD_INT 2
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 3
53832: NEG
53833: PUSH
53834: LD_INT 2
53836: NEG
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 3
53844: NEG
53845: PUSH
53846: LD_INT 3
53848: NEG
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: LIST
53867: LIST
53868: LIST
53869: LIST
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53885: LD_ADDR_VAR 0 43
53889: PUSH
53890: LD_INT 0
53892: PUSH
53893: LD_INT 0
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 0
53902: PUSH
53903: LD_INT 1
53905: NEG
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 1
53913: PUSH
53914: LD_INT 0
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 1
53923: PUSH
53924: LD_INT 1
53926: PUSH
53927: EMPTY
53928: LIST
53929: LIST
53930: PUSH
53931: LD_INT 0
53933: PUSH
53934: LD_INT 1
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 1
53943: NEG
53944: PUSH
53945: LD_INT 0
53947: PUSH
53948: EMPTY
53949: LIST
53950: LIST
53951: PUSH
53952: LD_INT 1
53954: NEG
53955: PUSH
53956: LD_INT 1
53958: NEG
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 1
53966: NEG
53967: PUSH
53968: LD_INT 2
53970: NEG
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 0
53978: PUSH
53979: LD_INT 2
53981: NEG
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 1
53989: PUSH
53990: LD_INT 1
53992: NEG
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 2
54000: PUSH
54001: LD_INT 0
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 2
54010: PUSH
54011: LD_INT 1
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 1
54020: PUSH
54021: LD_INT 2
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 0
54030: PUSH
54031: LD_INT 2
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: LD_INT 1
54040: NEG
54041: PUSH
54042: LD_INT 1
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: PUSH
54049: LD_INT 2
54051: NEG
54052: PUSH
54053: LD_INT 0
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 2
54062: NEG
54063: PUSH
54064: LD_INT 1
54066: NEG
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 1
54074: NEG
54075: PUSH
54076: LD_INT 3
54078: NEG
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: LD_INT 0
54086: PUSH
54087: LD_INT 3
54089: NEG
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 1
54097: PUSH
54098: LD_INT 2
54100: NEG
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 2
54108: PUSH
54109: LD_INT 1
54111: NEG
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 3
54119: PUSH
54120: LD_INT 0
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 3
54129: PUSH
54130: LD_INT 1
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 1
54139: PUSH
54140: LD_INT 3
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 0
54149: PUSH
54150: LD_INT 3
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 1
54159: NEG
54160: PUSH
54161: LD_INT 2
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 2
54170: NEG
54171: PUSH
54172: LD_INT 1
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: PUSH
54179: LD_INT 3
54181: NEG
54182: PUSH
54183: LD_INT 0
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 3
54192: NEG
54193: PUSH
54194: LD_INT 1
54196: NEG
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: EMPTY
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: LIST
54214: LIST
54215: LIST
54216: LIST
54217: LIST
54218: LIST
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: LIST
54224: LIST
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: LIST
54230: LIST
54231: LIST
54232: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54233: LD_ADDR_VAR 0 44
54237: PUSH
54238: LD_INT 0
54240: PUSH
54241: LD_INT 0
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 0
54250: PUSH
54251: LD_INT 1
54253: NEG
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 1
54261: PUSH
54262: LD_INT 0
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 1
54271: PUSH
54272: LD_INT 1
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: LD_INT 0
54281: PUSH
54282: LD_INT 1
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 1
54291: NEG
54292: PUSH
54293: LD_INT 0
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 1
54302: NEG
54303: PUSH
54304: LD_INT 1
54306: NEG
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 1
54314: NEG
54315: PUSH
54316: LD_INT 2
54318: NEG
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 1
54326: PUSH
54327: LD_INT 1
54329: NEG
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 2
54337: PUSH
54338: LD_INT 0
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 2
54347: PUSH
54348: LD_INT 1
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 2
54357: PUSH
54358: LD_INT 2
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: LD_INT 1
54367: PUSH
54368: LD_INT 2
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 1
54377: NEG
54378: PUSH
54379: LD_INT 1
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 2
54388: NEG
54389: PUSH
54390: LD_INT 0
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 2
54399: NEG
54400: PUSH
54401: LD_INT 1
54403: NEG
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 2
54411: NEG
54412: PUSH
54413: LD_INT 2
54415: NEG
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 2
54423: NEG
54424: PUSH
54425: LD_INT 3
54427: NEG
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 2
54435: PUSH
54436: LD_INT 1
54438: NEG
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 3
54446: PUSH
54447: LD_INT 0
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: PUSH
54454: LD_INT 3
54456: PUSH
54457: LD_INT 1
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: LD_INT 3
54466: PUSH
54467: LD_INT 2
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 3
54476: PUSH
54477: LD_INT 3
54479: PUSH
54480: EMPTY
54481: LIST
54482: LIST
54483: PUSH
54484: LD_INT 2
54486: PUSH
54487: LD_INT 3
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_INT 2
54496: NEG
54497: PUSH
54498: LD_INT 1
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 3
54507: NEG
54508: PUSH
54509: LD_INT 0
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 3
54518: NEG
54519: PUSH
54520: LD_INT 1
54522: NEG
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: LD_INT 3
54530: NEG
54531: PUSH
54532: LD_INT 2
54534: NEG
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 3
54542: NEG
54543: PUSH
54544: LD_INT 3
54546: NEG
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: EMPTY
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54583: LD_ADDR_VAR 0 45
54587: PUSH
54588: LD_INT 0
54590: PUSH
54591: LD_INT 0
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 0
54600: PUSH
54601: LD_INT 1
54603: NEG
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 1
54611: PUSH
54612: LD_INT 0
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 1
54621: PUSH
54622: LD_INT 1
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 0
54631: PUSH
54632: LD_INT 1
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 1
54641: NEG
54642: PUSH
54643: LD_INT 0
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 1
54652: NEG
54653: PUSH
54654: LD_INT 1
54656: NEG
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: LD_INT 1
54664: NEG
54665: PUSH
54666: LD_INT 2
54668: NEG
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 0
54676: PUSH
54677: LD_INT 2
54679: NEG
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 1
54687: PUSH
54688: LD_INT 1
54690: NEG
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 2
54698: PUSH
54699: LD_INT 1
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: LD_INT 2
54708: PUSH
54709: LD_INT 2
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 1
54718: PUSH
54719: LD_INT 2
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: PUSH
54726: LD_INT 0
54728: PUSH
54729: LD_INT 2
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: LD_INT 1
54738: NEG
54739: PUSH
54740: LD_INT 1
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 2
54749: NEG
54750: PUSH
54751: LD_INT 1
54753: NEG
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 2
54761: NEG
54762: PUSH
54763: LD_INT 2
54765: NEG
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: LD_INT 2
54773: NEG
54774: PUSH
54775: LD_INT 3
54777: NEG
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 1
54785: NEG
54786: PUSH
54787: LD_INT 3
54789: NEG
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 0
54797: PUSH
54798: LD_INT 3
54800: NEG
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 1
54808: PUSH
54809: LD_INT 2
54811: NEG
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 3
54819: PUSH
54820: LD_INT 2
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: LD_INT 3
54829: PUSH
54830: LD_INT 3
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 2
54839: PUSH
54840: LD_INT 3
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 1
54849: PUSH
54850: LD_INT 3
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PUSH
54857: LD_INT 0
54859: PUSH
54860: LD_INT 3
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 1
54869: NEG
54870: PUSH
54871: LD_INT 2
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 3
54880: NEG
54881: PUSH
54882: LD_INT 2
54884: NEG
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 3
54892: NEG
54893: PUSH
54894: LD_INT 3
54896: NEG
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: LIST
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54933: LD_ADDR_VAR 0 46
54937: PUSH
54938: LD_INT 0
54940: PUSH
54941: LD_INT 0
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 0
54950: PUSH
54951: LD_INT 1
54953: NEG
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 1
54961: PUSH
54962: LD_INT 0
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 1
54971: PUSH
54972: LD_INT 1
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 0
54981: PUSH
54982: LD_INT 1
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 1
54991: NEG
54992: PUSH
54993: LD_INT 0
54995: PUSH
54996: EMPTY
54997: LIST
54998: LIST
54999: PUSH
55000: LD_INT 1
55002: NEG
55003: PUSH
55004: LD_INT 1
55006: NEG
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 1
55014: NEG
55015: PUSH
55016: LD_INT 2
55018: NEG
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 0
55026: PUSH
55027: LD_INT 2
55029: NEG
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: LD_INT 1
55037: PUSH
55038: LD_INT 1
55040: NEG
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 2
55048: PUSH
55049: LD_INT 0
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 2
55058: PUSH
55059: LD_INT 1
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: LD_INT 1
55068: PUSH
55069: LD_INT 2
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 0
55078: PUSH
55079: LD_INT 2
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 1
55088: NEG
55089: PUSH
55090: LD_INT 1
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 2
55099: NEG
55100: PUSH
55101: LD_INT 0
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 2
55110: NEG
55111: PUSH
55112: LD_INT 1
55114: NEG
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 1
55122: NEG
55123: PUSH
55124: LD_INT 3
55126: NEG
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 0
55134: PUSH
55135: LD_INT 3
55137: NEG
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 1
55145: PUSH
55146: LD_INT 2
55148: NEG
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 2
55156: PUSH
55157: LD_INT 1
55159: NEG
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 3
55167: PUSH
55168: LD_INT 0
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 3
55177: PUSH
55178: LD_INT 1
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 1
55187: PUSH
55188: LD_INT 3
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: PUSH
55195: LD_INT 0
55197: PUSH
55198: LD_INT 3
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 1
55207: NEG
55208: PUSH
55209: LD_INT 2
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 2
55218: NEG
55219: PUSH
55220: LD_INT 1
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 3
55229: NEG
55230: PUSH
55231: LD_INT 0
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: LD_INT 3
55240: NEG
55241: PUSH
55242: LD_INT 1
55244: NEG
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55281: LD_ADDR_VAR 0 47
55285: PUSH
55286: LD_INT 0
55288: PUSH
55289: LD_INT 0
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_INT 0
55298: PUSH
55299: LD_INT 1
55301: NEG
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 1
55309: PUSH
55310: LD_INT 0
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 1
55319: PUSH
55320: LD_INT 1
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 0
55329: PUSH
55330: LD_INT 1
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_INT 1
55339: NEG
55340: PUSH
55341: LD_INT 0
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 1
55350: NEG
55351: PUSH
55352: LD_INT 1
55354: NEG
55355: PUSH
55356: EMPTY
55357: LIST
55358: LIST
55359: PUSH
55360: LD_INT 1
55362: NEG
55363: PUSH
55364: LD_INT 2
55366: NEG
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 0
55374: PUSH
55375: LD_INT 2
55377: NEG
55378: PUSH
55379: EMPTY
55380: LIST
55381: LIST
55382: PUSH
55383: LD_INT 1
55385: PUSH
55386: LD_INT 1
55388: NEG
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 2
55396: NEG
55397: PUSH
55398: LD_INT 1
55400: NEG
55401: PUSH
55402: EMPTY
55403: LIST
55404: LIST
55405: PUSH
55406: LD_INT 2
55408: NEG
55409: PUSH
55410: LD_INT 2
55412: NEG
55413: PUSH
55414: EMPTY
55415: LIST
55416: LIST
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55432: LD_ADDR_VAR 0 48
55436: PUSH
55437: LD_INT 0
55439: PUSH
55440: LD_INT 0
55442: PUSH
55443: EMPTY
55444: LIST
55445: LIST
55446: PUSH
55447: LD_INT 0
55449: PUSH
55450: LD_INT 1
55452: NEG
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 1
55460: PUSH
55461: LD_INT 0
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 1
55470: PUSH
55471: LD_INT 1
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 0
55480: PUSH
55481: LD_INT 1
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 1
55490: NEG
55491: PUSH
55492: LD_INT 0
55494: PUSH
55495: EMPTY
55496: LIST
55497: LIST
55498: PUSH
55499: LD_INT 1
55501: NEG
55502: PUSH
55503: LD_INT 1
55505: NEG
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 1
55513: NEG
55514: PUSH
55515: LD_INT 2
55517: NEG
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 0
55525: PUSH
55526: LD_INT 2
55528: NEG
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 1
55536: PUSH
55537: LD_INT 1
55539: NEG
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: LD_INT 2
55547: PUSH
55548: LD_INT 0
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: LD_INT 2
55557: PUSH
55558: LD_INT 1
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: LIST
55569: LIST
55570: LIST
55571: LIST
55572: LIST
55573: LIST
55574: LIST
55575: LIST
55576: LIST
55577: LIST
55578: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55579: LD_ADDR_VAR 0 49
55583: PUSH
55584: LD_INT 0
55586: PUSH
55587: LD_INT 0
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 0
55596: PUSH
55597: LD_INT 1
55599: NEG
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 1
55607: PUSH
55608: LD_INT 0
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 1
55617: PUSH
55618: LD_INT 1
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 0
55627: PUSH
55628: LD_INT 1
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 1
55637: NEG
55638: PUSH
55639: LD_INT 0
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 1
55648: NEG
55649: PUSH
55650: LD_INT 1
55652: NEG
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: PUSH
55658: LD_INT 1
55660: PUSH
55661: LD_INT 1
55663: NEG
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 2
55671: PUSH
55672: LD_INT 0
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 2
55681: PUSH
55682: LD_INT 1
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: LD_INT 2
55691: PUSH
55692: LD_INT 2
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 1
55701: PUSH
55702: LD_INT 2
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55723: LD_ADDR_VAR 0 50
55727: PUSH
55728: LD_INT 0
55730: PUSH
55731: LD_INT 0
55733: PUSH
55734: EMPTY
55735: LIST
55736: LIST
55737: PUSH
55738: LD_INT 0
55740: PUSH
55741: LD_INT 1
55743: NEG
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 1
55751: PUSH
55752: LD_INT 0
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 1
55761: PUSH
55762: LD_INT 1
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 0
55771: PUSH
55772: LD_INT 1
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 1
55781: NEG
55782: PUSH
55783: LD_INT 0
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 1
55792: NEG
55793: PUSH
55794: LD_INT 1
55796: NEG
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 2
55804: PUSH
55805: LD_INT 1
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: LD_INT 2
55814: PUSH
55815: LD_INT 2
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 1
55824: PUSH
55825: LD_INT 2
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 0
55834: PUSH
55835: LD_INT 2
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 1
55844: NEG
55845: PUSH
55846: LD_INT 1
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55867: LD_ADDR_VAR 0 51
55871: PUSH
55872: LD_INT 0
55874: PUSH
55875: LD_INT 0
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 0
55884: PUSH
55885: LD_INT 1
55887: NEG
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 1
55895: PUSH
55896: LD_INT 0
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 1
55905: PUSH
55906: LD_INT 1
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: LD_INT 0
55915: PUSH
55916: LD_INT 1
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 1
55925: NEG
55926: PUSH
55927: LD_INT 0
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 1
55936: NEG
55937: PUSH
55938: LD_INT 1
55940: NEG
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 1
55948: PUSH
55949: LD_INT 2
55951: PUSH
55952: EMPTY
55953: LIST
55954: LIST
55955: PUSH
55956: LD_INT 0
55958: PUSH
55959: LD_INT 2
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 1
55968: NEG
55969: PUSH
55970: LD_INT 1
55972: PUSH
55973: EMPTY
55974: LIST
55975: LIST
55976: PUSH
55977: LD_INT 2
55979: NEG
55980: PUSH
55981: LD_INT 0
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 2
55990: NEG
55991: PUSH
55992: LD_INT 1
55994: NEG
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56014: LD_ADDR_VAR 0 52
56018: PUSH
56019: LD_INT 0
56021: PUSH
56022: LD_INT 0
56024: PUSH
56025: EMPTY
56026: LIST
56027: LIST
56028: PUSH
56029: LD_INT 0
56031: PUSH
56032: LD_INT 1
56034: NEG
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 1
56042: PUSH
56043: LD_INT 0
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 1
56052: PUSH
56053: LD_INT 1
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: PUSH
56060: LD_INT 0
56062: PUSH
56063: LD_INT 1
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: LD_INT 1
56072: NEG
56073: PUSH
56074: LD_INT 0
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 1
56083: NEG
56084: PUSH
56085: LD_INT 1
56087: NEG
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 1
56095: NEG
56096: PUSH
56097: LD_INT 2
56099: NEG
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 1
56107: NEG
56108: PUSH
56109: LD_INT 1
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 2
56118: NEG
56119: PUSH
56120: LD_INT 0
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 2
56129: NEG
56130: PUSH
56131: LD_INT 1
56133: NEG
56134: PUSH
56135: EMPTY
56136: LIST
56137: LIST
56138: PUSH
56139: LD_INT 2
56141: NEG
56142: PUSH
56143: LD_INT 2
56145: NEG
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56165: LD_ADDR_VAR 0 53
56169: PUSH
56170: LD_INT 0
56172: PUSH
56173: LD_INT 0
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: LD_INT 0
56182: PUSH
56183: LD_INT 1
56185: NEG
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 1
56193: PUSH
56194: LD_INT 0
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 1
56203: PUSH
56204: LD_INT 1
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 0
56213: PUSH
56214: LD_INT 1
56216: PUSH
56217: EMPTY
56218: LIST
56219: LIST
56220: PUSH
56221: LD_INT 1
56223: NEG
56224: PUSH
56225: LD_INT 0
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 1
56234: NEG
56235: PUSH
56236: LD_INT 1
56238: NEG
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 1
56246: NEG
56247: PUSH
56248: LD_INT 2
56250: NEG
56251: PUSH
56252: EMPTY
56253: LIST
56254: LIST
56255: PUSH
56256: LD_INT 0
56258: PUSH
56259: LD_INT 2
56261: NEG
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: LD_INT 1
56269: PUSH
56270: LD_INT 1
56272: NEG
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 2
56280: PUSH
56281: LD_INT 0
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: LD_INT 2
56290: PUSH
56291: LD_INT 1
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: PUSH
56298: LD_INT 2
56300: PUSH
56301: LD_INT 2
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: PUSH
56308: LD_INT 1
56310: PUSH
56311: LD_INT 2
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: LD_INT 0
56320: PUSH
56321: LD_INT 2
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: LD_INT 1
56330: NEG
56331: PUSH
56332: LD_INT 1
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PUSH
56339: LD_INT 2
56341: NEG
56342: PUSH
56343: LD_INT 0
56345: PUSH
56346: EMPTY
56347: LIST
56348: LIST
56349: PUSH
56350: LD_INT 2
56352: NEG
56353: PUSH
56354: LD_INT 1
56356: NEG
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 2
56364: NEG
56365: PUSH
56366: LD_INT 2
56368: NEG
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: LIST
56386: LIST
56387: LIST
56388: LIST
56389: LIST
56390: LIST
56391: LIST
56392: LIST
56393: LIST
56394: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56395: LD_ADDR_VAR 0 54
56399: PUSH
56400: LD_INT 0
56402: PUSH
56403: LD_INT 0
56405: PUSH
56406: EMPTY
56407: LIST
56408: LIST
56409: PUSH
56410: LD_INT 0
56412: PUSH
56413: LD_INT 1
56415: NEG
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 1
56423: PUSH
56424: LD_INT 0
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 1
56433: PUSH
56434: LD_INT 1
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 0
56443: PUSH
56444: LD_INT 1
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 1
56453: NEG
56454: PUSH
56455: LD_INT 0
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 1
56464: NEG
56465: PUSH
56466: LD_INT 1
56468: NEG
56469: PUSH
56470: EMPTY
56471: LIST
56472: LIST
56473: PUSH
56474: LD_INT 1
56476: NEG
56477: PUSH
56478: LD_INT 2
56480: NEG
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 0
56488: PUSH
56489: LD_INT 2
56491: NEG
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 1
56499: PUSH
56500: LD_INT 1
56502: NEG
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 2
56510: PUSH
56511: LD_INT 0
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 2
56520: PUSH
56521: LD_INT 1
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 2
56530: PUSH
56531: LD_INT 2
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 1
56540: PUSH
56541: LD_INT 2
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 0
56550: PUSH
56551: LD_INT 2
56553: PUSH
56554: EMPTY
56555: LIST
56556: LIST
56557: PUSH
56558: LD_INT 1
56560: NEG
56561: PUSH
56562: LD_INT 1
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: PUSH
56569: LD_INT 2
56571: NEG
56572: PUSH
56573: LD_INT 0
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 2
56582: NEG
56583: PUSH
56584: LD_INT 1
56586: NEG
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: PUSH
56592: LD_INT 2
56594: NEG
56595: PUSH
56596: LD_INT 2
56598: NEG
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: LIST
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: LIST
56616: LIST
56617: LIST
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56625: LD_ADDR_VAR 0 55
56629: PUSH
56630: LD_INT 0
56632: PUSH
56633: LD_INT 0
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: PUSH
56640: LD_INT 0
56642: PUSH
56643: LD_INT 1
56645: NEG
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: LD_INT 1
56653: PUSH
56654: LD_INT 0
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 1
56663: PUSH
56664: LD_INT 1
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 0
56673: PUSH
56674: LD_INT 1
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 1
56683: NEG
56684: PUSH
56685: LD_INT 0
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: LD_INT 1
56694: NEG
56695: PUSH
56696: LD_INT 1
56698: NEG
56699: PUSH
56700: EMPTY
56701: LIST
56702: LIST
56703: PUSH
56704: LD_INT 1
56706: NEG
56707: PUSH
56708: LD_INT 2
56710: NEG
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PUSH
56716: LD_INT 0
56718: PUSH
56719: LD_INT 2
56721: NEG
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: PUSH
56727: LD_INT 1
56729: PUSH
56730: LD_INT 1
56732: NEG
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 2
56740: PUSH
56741: LD_INT 0
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 2
56750: PUSH
56751: LD_INT 1
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 2
56760: PUSH
56761: LD_INT 2
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 1
56770: PUSH
56771: LD_INT 2
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 0
56780: PUSH
56781: LD_INT 2
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PUSH
56788: LD_INT 1
56790: NEG
56791: PUSH
56792: LD_INT 1
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: PUSH
56799: LD_INT 2
56801: NEG
56802: PUSH
56803: LD_INT 0
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: LD_INT 2
56812: NEG
56813: PUSH
56814: LD_INT 1
56816: NEG
56817: PUSH
56818: EMPTY
56819: LIST
56820: LIST
56821: PUSH
56822: LD_INT 2
56824: NEG
56825: PUSH
56826: LD_INT 2
56828: NEG
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56855: LD_ADDR_VAR 0 56
56859: PUSH
56860: LD_INT 0
56862: PUSH
56863: LD_INT 0
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 0
56872: PUSH
56873: LD_INT 1
56875: NEG
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 1
56883: PUSH
56884: LD_INT 0
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 1
56893: PUSH
56894: LD_INT 1
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 0
56903: PUSH
56904: LD_INT 1
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: LD_INT 1
56913: NEG
56914: PUSH
56915: LD_INT 0
56917: PUSH
56918: EMPTY
56919: LIST
56920: LIST
56921: PUSH
56922: LD_INT 1
56924: NEG
56925: PUSH
56926: LD_INT 1
56928: NEG
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 1
56936: NEG
56937: PUSH
56938: LD_INT 2
56940: NEG
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: LD_INT 0
56948: PUSH
56949: LD_INT 2
56951: NEG
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 1
56959: PUSH
56960: LD_INT 1
56962: NEG
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: LD_INT 2
56970: PUSH
56971: LD_INT 0
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 2
56980: PUSH
56981: LD_INT 1
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 2
56990: PUSH
56991: LD_INT 2
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: LD_INT 1
57000: PUSH
57001: LD_INT 2
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 0
57010: PUSH
57011: LD_INT 2
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: LD_INT 1
57020: NEG
57021: PUSH
57022: LD_INT 1
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: LD_INT 2
57031: NEG
57032: PUSH
57033: LD_INT 0
57035: PUSH
57036: EMPTY
57037: LIST
57038: LIST
57039: PUSH
57040: LD_INT 2
57042: NEG
57043: PUSH
57044: LD_INT 1
57046: NEG
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 2
57054: NEG
57055: PUSH
57056: LD_INT 2
57058: NEG
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PUSH
57064: EMPTY
57065: LIST
57066: LIST
57067: LIST
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57085: LD_ADDR_VAR 0 57
57089: PUSH
57090: LD_INT 0
57092: PUSH
57093: LD_INT 0
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 0
57102: PUSH
57103: LD_INT 1
57105: NEG
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 1
57113: PUSH
57114: LD_INT 0
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: LD_INT 1
57123: PUSH
57124: LD_INT 1
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: PUSH
57131: LD_INT 0
57133: PUSH
57134: LD_INT 1
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 1
57143: NEG
57144: PUSH
57145: LD_INT 0
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 1
57154: NEG
57155: PUSH
57156: LD_INT 1
57158: NEG
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 1
57166: NEG
57167: PUSH
57168: LD_INT 2
57170: NEG
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 0
57178: PUSH
57179: LD_INT 2
57181: NEG
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 1
57189: PUSH
57190: LD_INT 1
57192: NEG
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: LD_INT 2
57200: PUSH
57201: LD_INT 0
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 2
57210: PUSH
57211: LD_INT 1
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 2
57220: PUSH
57221: LD_INT 2
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 1
57230: PUSH
57231: LD_INT 2
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 0
57240: PUSH
57241: LD_INT 2
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 1
57250: NEG
57251: PUSH
57252: LD_INT 1
57254: PUSH
57255: EMPTY
57256: LIST
57257: LIST
57258: PUSH
57259: LD_INT 2
57261: NEG
57262: PUSH
57263: LD_INT 0
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: PUSH
57270: LD_INT 2
57272: NEG
57273: PUSH
57274: LD_INT 1
57276: NEG
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: PUSH
57282: LD_INT 2
57284: NEG
57285: PUSH
57286: LD_INT 2
57288: NEG
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: LIST
57298: LIST
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: LIST
57304: LIST
57305: LIST
57306: LIST
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57315: LD_ADDR_VAR 0 58
57319: PUSH
57320: LD_INT 0
57322: PUSH
57323: LD_INT 0
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 0
57332: PUSH
57333: LD_INT 1
57335: NEG
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 1
57343: PUSH
57344: LD_INT 0
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 1
57353: PUSH
57354: LD_INT 1
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: PUSH
57361: LD_INT 0
57363: PUSH
57364: LD_INT 1
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 1
57373: NEG
57374: PUSH
57375: LD_INT 0
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: PUSH
57382: LD_INT 1
57384: NEG
57385: PUSH
57386: LD_INT 1
57388: NEG
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 1
57396: NEG
57397: PUSH
57398: LD_INT 2
57400: NEG
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 0
57408: PUSH
57409: LD_INT 2
57411: NEG
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 1
57419: PUSH
57420: LD_INT 1
57422: NEG
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 2
57430: PUSH
57431: LD_INT 0
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 2
57440: PUSH
57441: LD_INT 1
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 2
57450: PUSH
57451: LD_INT 2
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 1
57460: PUSH
57461: LD_INT 2
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 0
57470: PUSH
57471: LD_INT 2
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 1
57480: NEG
57481: PUSH
57482: LD_INT 1
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: PUSH
57489: LD_INT 2
57491: NEG
57492: PUSH
57493: LD_INT 0
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: LD_INT 2
57502: NEG
57503: PUSH
57504: LD_INT 1
57506: NEG
57507: PUSH
57508: EMPTY
57509: LIST
57510: LIST
57511: PUSH
57512: LD_INT 2
57514: NEG
57515: PUSH
57516: LD_INT 2
57518: NEG
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57545: LD_ADDR_VAR 0 59
57549: PUSH
57550: LD_INT 0
57552: PUSH
57553: LD_INT 0
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: LD_INT 0
57562: PUSH
57563: LD_INT 1
57565: NEG
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PUSH
57571: LD_INT 1
57573: PUSH
57574: LD_INT 0
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: PUSH
57581: LD_INT 1
57583: PUSH
57584: LD_INT 1
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PUSH
57591: LD_INT 0
57593: PUSH
57594: LD_INT 1
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 1
57603: NEG
57604: PUSH
57605: LD_INT 0
57607: PUSH
57608: EMPTY
57609: LIST
57610: LIST
57611: PUSH
57612: LD_INT 1
57614: NEG
57615: PUSH
57616: LD_INT 1
57618: NEG
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57633: LD_ADDR_VAR 0 60
57637: PUSH
57638: LD_INT 0
57640: PUSH
57641: LD_INT 0
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 0
57650: PUSH
57651: LD_INT 1
57653: NEG
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 1
57661: PUSH
57662: LD_INT 0
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 1
57671: PUSH
57672: LD_INT 1
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: LD_INT 0
57681: PUSH
57682: LD_INT 1
57684: PUSH
57685: EMPTY
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 1
57691: NEG
57692: PUSH
57693: LD_INT 0
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: LD_INT 1
57702: NEG
57703: PUSH
57704: LD_INT 1
57706: NEG
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: LIST
57716: LIST
57717: LIST
57718: LIST
57719: LIST
57720: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57721: LD_ADDR_VAR 0 61
57725: PUSH
57726: LD_INT 0
57728: PUSH
57729: LD_INT 0
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 0
57738: PUSH
57739: LD_INT 1
57741: NEG
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 1
57749: PUSH
57750: LD_INT 0
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 1
57759: PUSH
57760: LD_INT 1
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 0
57769: PUSH
57770: LD_INT 1
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: PUSH
57777: LD_INT 1
57779: NEG
57780: PUSH
57781: LD_INT 0
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 1
57790: NEG
57791: PUSH
57792: LD_INT 1
57794: NEG
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: LIST
57804: LIST
57805: LIST
57806: LIST
57807: LIST
57808: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57809: LD_ADDR_VAR 0 62
57813: PUSH
57814: LD_INT 0
57816: PUSH
57817: LD_INT 0
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 0
57826: PUSH
57827: LD_INT 1
57829: NEG
57830: PUSH
57831: EMPTY
57832: LIST
57833: LIST
57834: PUSH
57835: LD_INT 1
57837: PUSH
57838: LD_INT 0
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 1
57847: PUSH
57848: LD_INT 1
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: LD_INT 0
57857: PUSH
57858: LD_INT 1
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: LD_INT 1
57867: NEG
57868: PUSH
57869: LD_INT 0
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: PUSH
57876: LD_INT 1
57878: NEG
57879: PUSH
57880: LD_INT 1
57882: NEG
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: LIST
57892: LIST
57893: LIST
57894: LIST
57895: LIST
57896: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57897: LD_ADDR_VAR 0 63
57901: PUSH
57902: LD_INT 0
57904: PUSH
57905: LD_INT 0
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: LD_INT 0
57914: PUSH
57915: LD_INT 1
57917: NEG
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: PUSH
57923: LD_INT 1
57925: PUSH
57926: LD_INT 0
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 1
57935: PUSH
57936: LD_INT 1
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: PUSH
57943: LD_INT 0
57945: PUSH
57946: LD_INT 1
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: LD_INT 1
57955: NEG
57956: PUSH
57957: LD_INT 0
57959: PUSH
57960: EMPTY
57961: LIST
57962: LIST
57963: PUSH
57964: LD_INT 1
57966: NEG
57967: PUSH
57968: LD_INT 1
57970: NEG
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57985: LD_ADDR_VAR 0 64
57989: PUSH
57990: LD_INT 0
57992: PUSH
57993: LD_INT 0
57995: PUSH
57996: EMPTY
57997: LIST
57998: LIST
57999: PUSH
58000: LD_INT 0
58002: PUSH
58003: LD_INT 1
58005: NEG
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PUSH
58011: LD_INT 1
58013: PUSH
58014: LD_INT 0
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 1
58023: PUSH
58024: LD_INT 1
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: PUSH
58031: LD_INT 0
58033: PUSH
58034: LD_INT 1
58036: PUSH
58037: EMPTY
58038: LIST
58039: LIST
58040: PUSH
58041: LD_INT 1
58043: NEG
58044: PUSH
58045: LD_INT 0
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 1
58054: NEG
58055: PUSH
58056: LD_INT 1
58058: NEG
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: EMPTY
58065: LIST
58066: LIST
58067: LIST
58068: LIST
58069: LIST
58070: LIST
58071: LIST
58072: ST_TO_ADDR
// end ; 1 :
58073: GO 63970
58075: LD_INT 1
58077: DOUBLE
58078: EQUAL
58079: IFTRUE 58083
58081: GO 60706
58083: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58084: LD_ADDR_VAR 0 11
58088: PUSH
58089: LD_INT 1
58091: NEG
58092: PUSH
58093: LD_INT 3
58095: NEG
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 0
58103: PUSH
58104: LD_INT 3
58106: NEG
58107: PUSH
58108: EMPTY
58109: LIST
58110: LIST
58111: PUSH
58112: LD_INT 1
58114: PUSH
58115: LD_INT 2
58117: NEG
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: LIST
58127: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58128: LD_ADDR_VAR 0 12
58132: PUSH
58133: LD_INT 2
58135: PUSH
58136: LD_INT 1
58138: NEG
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: LD_INT 3
58146: PUSH
58147: LD_INT 0
58149: PUSH
58150: EMPTY
58151: LIST
58152: LIST
58153: PUSH
58154: LD_INT 3
58156: PUSH
58157: LD_INT 1
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: LIST
58168: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58169: LD_ADDR_VAR 0 13
58173: PUSH
58174: LD_INT 3
58176: PUSH
58177: LD_INT 2
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: LD_INT 3
58186: PUSH
58187: LD_INT 3
58189: PUSH
58190: EMPTY
58191: LIST
58192: LIST
58193: PUSH
58194: LD_INT 2
58196: PUSH
58197: LD_INT 3
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: LIST
58208: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58209: LD_ADDR_VAR 0 14
58213: PUSH
58214: LD_INT 1
58216: PUSH
58217: LD_INT 3
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 0
58226: PUSH
58227: LD_INT 3
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 1
58236: NEG
58237: PUSH
58238: LD_INT 2
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: LIST
58249: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58250: LD_ADDR_VAR 0 15
58254: PUSH
58255: LD_INT 2
58257: NEG
58258: PUSH
58259: LD_INT 1
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 3
58268: NEG
58269: PUSH
58270: LD_INT 0
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: PUSH
58277: LD_INT 3
58279: NEG
58280: PUSH
58281: LD_INT 1
58283: NEG
58284: PUSH
58285: EMPTY
58286: LIST
58287: LIST
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: LIST
58293: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58294: LD_ADDR_VAR 0 16
58298: PUSH
58299: LD_INT 2
58301: NEG
58302: PUSH
58303: LD_INT 3
58305: NEG
58306: PUSH
58307: EMPTY
58308: LIST
58309: LIST
58310: PUSH
58311: LD_INT 3
58313: NEG
58314: PUSH
58315: LD_INT 2
58317: NEG
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: LD_INT 3
58325: NEG
58326: PUSH
58327: LD_INT 3
58329: NEG
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: LIST
58339: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58340: LD_ADDR_VAR 0 17
58344: PUSH
58345: LD_INT 1
58347: NEG
58348: PUSH
58349: LD_INT 3
58351: NEG
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 0
58359: PUSH
58360: LD_INT 3
58362: NEG
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 1
58370: PUSH
58371: LD_INT 2
58373: NEG
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: LIST
58383: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58384: LD_ADDR_VAR 0 18
58388: PUSH
58389: LD_INT 2
58391: PUSH
58392: LD_INT 1
58394: NEG
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: PUSH
58400: LD_INT 3
58402: PUSH
58403: LD_INT 0
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 3
58412: PUSH
58413: LD_INT 1
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: LIST
58424: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58425: LD_ADDR_VAR 0 19
58429: PUSH
58430: LD_INT 3
58432: PUSH
58433: LD_INT 2
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: LD_INT 3
58442: PUSH
58443: LD_INT 3
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PUSH
58450: LD_INT 2
58452: PUSH
58453: LD_INT 3
58455: PUSH
58456: EMPTY
58457: LIST
58458: LIST
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: LIST
58464: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58465: LD_ADDR_VAR 0 20
58469: PUSH
58470: LD_INT 1
58472: PUSH
58473: LD_INT 3
58475: PUSH
58476: EMPTY
58477: LIST
58478: LIST
58479: PUSH
58480: LD_INT 0
58482: PUSH
58483: LD_INT 3
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PUSH
58490: LD_INT 1
58492: NEG
58493: PUSH
58494: LD_INT 2
58496: PUSH
58497: EMPTY
58498: LIST
58499: LIST
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: LIST
58505: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58506: LD_ADDR_VAR 0 21
58510: PUSH
58511: LD_INT 2
58513: NEG
58514: PUSH
58515: LD_INT 1
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 3
58524: NEG
58525: PUSH
58526: LD_INT 0
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 3
58535: NEG
58536: PUSH
58537: LD_INT 1
58539: NEG
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: LIST
58549: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58550: LD_ADDR_VAR 0 22
58554: PUSH
58555: LD_INT 2
58557: NEG
58558: PUSH
58559: LD_INT 3
58561: NEG
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: PUSH
58567: LD_INT 3
58569: NEG
58570: PUSH
58571: LD_INT 2
58573: NEG
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: PUSH
58579: LD_INT 3
58581: NEG
58582: PUSH
58583: LD_INT 3
58585: NEG
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: LIST
58595: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
58596: LD_ADDR_VAR 0 23
58600: PUSH
58601: LD_INT 0
58603: PUSH
58604: LD_INT 3
58606: NEG
58607: PUSH
58608: EMPTY
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 1
58614: NEG
58615: PUSH
58616: LD_INT 4
58618: NEG
58619: PUSH
58620: EMPTY
58621: LIST
58622: LIST
58623: PUSH
58624: LD_INT 1
58626: PUSH
58627: LD_INT 3
58629: NEG
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: LIST
58639: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
58640: LD_ADDR_VAR 0 24
58644: PUSH
58645: LD_INT 3
58647: PUSH
58648: LD_INT 0
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: PUSH
58655: LD_INT 3
58657: PUSH
58658: LD_INT 1
58660: NEG
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: LD_INT 4
58668: PUSH
58669: LD_INT 1
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: LIST
58680: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
58681: LD_ADDR_VAR 0 25
58685: PUSH
58686: LD_INT 3
58688: PUSH
58689: LD_INT 3
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 4
58698: PUSH
58699: LD_INT 3
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 3
58708: PUSH
58709: LD_INT 4
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: LIST
58720: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
58721: LD_ADDR_VAR 0 26
58725: PUSH
58726: LD_INT 0
58728: PUSH
58729: LD_INT 3
58731: PUSH
58732: EMPTY
58733: LIST
58734: LIST
58735: PUSH
58736: LD_INT 1
58738: PUSH
58739: LD_INT 4
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PUSH
58746: LD_INT 1
58748: NEG
58749: PUSH
58750: LD_INT 3
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: LIST
58761: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
58762: LD_ADDR_VAR 0 27
58766: PUSH
58767: LD_INT 3
58769: NEG
58770: PUSH
58771: LD_INT 0
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: PUSH
58778: LD_INT 3
58780: NEG
58781: PUSH
58782: LD_INT 1
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: PUSH
58789: LD_INT 4
58791: NEG
58792: PUSH
58793: LD_INT 1
58795: NEG
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: LIST
58805: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
58806: LD_ADDR_VAR 0 28
58810: PUSH
58811: LD_INT 3
58813: NEG
58814: PUSH
58815: LD_INT 3
58817: NEG
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: LD_INT 3
58825: NEG
58826: PUSH
58827: LD_INT 4
58829: NEG
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: LD_INT 4
58837: NEG
58838: PUSH
58839: LD_INT 3
58841: NEG
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: LIST
58851: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
58852: LD_ADDR_VAR 0 29
58856: PUSH
58857: LD_INT 1
58859: NEG
58860: PUSH
58861: LD_INT 3
58863: NEG
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: LD_INT 0
58871: PUSH
58872: LD_INT 3
58874: NEG
58875: PUSH
58876: EMPTY
58877: LIST
58878: LIST
58879: PUSH
58880: LD_INT 1
58882: PUSH
58883: LD_INT 2
58885: NEG
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: PUSH
58891: LD_INT 1
58893: NEG
58894: PUSH
58895: LD_INT 4
58897: NEG
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: PUSH
58903: LD_INT 0
58905: PUSH
58906: LD_INT 4
58908: NEG
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 1
58916: PUSH
58917: LD_INT 3
58919: NEG
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: LD_INT 1
58927: NEG
58928: PUSH
58929: LD_INT 5
58931: NEG
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: LD_INT 0
58939: PUSH
58940: LD_INT 5
58942: NEG
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: PUSH
58948: LD_INT 1
58950: PUSH
58951: LD_INT 4
58953: NEG
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 1
58961: NEG
58962: PUSH
58963: LD_INT 6
58965: NEG
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: PUSH
58971: LD_INT 0
58973: PUSH
58974: LD_INT 6
58976: NEG
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: PUSH
58982: LD_INT 1
58984: PUSH
58985: LD_INT 5
58987: NEG
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
59007: LD_ADDR_VAR 0 30
59011: PUSH
59012: LD_INT 2
59014: PUSH
59015: LD_INT 1
59017: NEG
59018: PUSH
59019: EMPTY
59020: LIST
59021: LIST
59022: PUSH
59023: LD_INT 3
59025: PUSH
59026: LD_INT 0
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: LD_INT 3
59035: PUSH
59036: LD_INT 1
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: LD_INT 3
59045: PUSH
59046: LD_INT 1
59048: NEG
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: PUSH
59054: LD_INT 4
59056: PUSH
59057: LD_INT 0
59059: PUSH
59060: EMPTY
59061: LIST
59062: LIST
59063: PUSH
59064: LD_INT 4
59066: PUSH
59067: LD_INT 1
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: PUSH
59074: LD_INT 4
59076: PUSH
59077: LD_INT 1
59079: NEG
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: LD_INT 5
59087: PUSH
59088: LD_INT 0
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: PUSH
59095: LD_INT 5
59097: PUSH
59098: LD_INT 1
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: LD_INT 5
59107: PUSH
59108: LD_INT 1
59110: NEG
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: LD_INT 6
59118: PUSH
59119: LD_INT 0
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: LD_INT 6
59128: PUSH
59129: LD_INT 1
59131: PUSH
59132: EMPTY
59133: LIST
59134: LIST
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: LIST
59143: LIST
59144: LIST
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
59150: LD_ADDR_VAR 0 31
59154: PUSH
59155: LD_INT 3
59157: PUSH
59158: LD_INT 2
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 3
59167: PUSH
59168: LD_INT 3
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 2
59177: PUSH
59178: LD_INT 3
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: LD_INT 4
59187: PUSH
59188: LD_INT 3
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: LD_INT 4
59197: PUSH
59198: LD_INT 4
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: LD_INT 3
59207: PUSH
59208: LD_INT 4
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 5
59217: PUSH
59218: LD_INT 4
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: PUSH
59225: LD_INT 5
59227: PUSH
59228: LD_INT 5
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: LD_INT 4
59237: PUSH
59238: LD_INT 5
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 6
59247: PUSH
59248: LD_INT 5
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: PUSH
59255: LD_INT 6
59257: PUSH
59258: LD_INT 6
59260: PUSH
59261: EMPTY
59262: LIST
59263: LIST
59264: PUSH
59265: LD_INT 5
59267: PUSH
59268: LD_INT 6
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: LIST
59279: LIST
59280: LIST
59281: LIST
59282: LIST
59283: LIST
59284: LIST
59285: LIST
59286: LIST
59287: LIST
59288: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
59289: LD_ADDR_VAR 0 32
59293: PUSH
59294: LD_INT 1
59296: PUSH
59297: LD_INT 3
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: LD_INT 0
59306: PUSH
59307: LD_INT 3
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: LD_INT 1
59316: NEG
59317: PUSH
59318: LD_INT 2
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: PUSH
59325: LD_INT 1
59327: PUSH
59328: LD_INT 4
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: PUSH
59335: LD_INT 0
59337: PUSH
59338: LD_INT 4
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: PUSH
59345: LD_INT 1
59347: NEG
59348: PUSH
59349: LD_INT 3
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: LD_INT 1
59358: PUSH
59359: LD_INT 5
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 0
59368: PUSH
59369: LD_INT 5
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: LD_INT 1
59378: NEG
59379: PUSH
59380: LD_INT 4
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: LD_INT 1
59389: PUSH
59390: LD_INT 6
59392: PUSH
59393: EMPTY
59394: LIST
59395: LIST
59396: PUSH
59397: LD_INT 0
59399: PUSH
59400: LD_INT 6
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: PUSH
59407: LD_INT 1
59409: NEG
59410: PUSH
59411: LD_INT 5
59413: PUSH
59414: EMPTY
59415: LIST
59416: LIST
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: LIST
59422: LIST
59423: LIST
59424: LIST
59425: LIST
59426: LIST
59427: LIST
59428: LIST
59429: LIST
59430: LIST
59431: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
59432: LD_ADDR_VAR 0 33
59436: PUSH
59437: LD_INT 2
59439: NEG
59440: PUSH
59441: LD_INT 1
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: PUSH
59448: LD_INT 3
59450: NEG
59451: PUSH
59452: LD_INT 0
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: PUSH
59459: LD_INT 3
59461: NEG
59462: PUSH
59463: LD_INT 1
59465: NEG
59466: PUSH
59467: EMPTY
59468: LIST
59469: LIST
59470: PUSH
59471: LD_INT 3
59473: NEG
59474: PUSH
59475: LD_INT 1
59477: PUSH
59478: EMPTY
59479: LIST
59480: LIST
59481: PUSH
59482: LD_INT 4
59484: NEG
59485: PUSH
59486: LD_INT 0
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: PUSH
59493: LD_INT 4
59495: NEG
59496: PUSH
59497: LD_INT 1
59499: NEG
59500: PUSH
59501: EMPTY
59502: LIST
59503: LIST
59504: PUSH
59505: LD_INT 4
59507: NEG
59508: PUSH
59509: LD_INT 1
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 5
59518: NEG
59519: PUSH
59520: LD_INT 0
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 5
59529: NEG
59530: PUSH
59531: LD_INT 1
59533: NEG
59534: PUSH
59535: EMPTY
59536: LIST
59537: LIST
59538: PUSH
59539: LD_INT 5
59541: NEG
59542: PUSH
59543: LD_INT 1
59545: PUSH
59546: EMPTY
59547: LIST
59548: LIST
59549: PUSH
59550: LD_INT 6
59552: NEG
59553: PUSH
59554: LD_INT 0
59556: PUSH
59557: EMPTY
59558: LIST
59559: LIST
59560: PUSH
59561: LD_INT 6
59563: NEG
59564: PUSH
59565: LD_INT 1
59567: NEG
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: LIST
59577: LIST
59578: LIST
59579: LIST
59580: LIST
59581: LIST
59582: LIST
59583: LIST
59584: LIST
59585: LIST
59586: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
59587: LD_ADDR_VAR 0 34
59591: PUSH
59592: LD_INT 2
59594: NEG
59595: PUSH
59596: LD_INT 3
59598: NEG
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 3
59606: NEG
59607: PUSH
59608: LD_INT 2
59610: NEG
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: LD_INT 3
59618: NEG
59619: PUSH
59620: LD_INT 3
59622: NEG
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: PUSH
59628: LD_INT 3
59630: NEG
59631: PUSH
59632: LD_INT 4
59634: NEG
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 4
59642: NEG
59643: PUSH
59644: LD_INT 3
59646: NEG
59647: PUSH
59648: EMPTY
59649: LIST
59650: LIST
59651: PUSH
59652: LD_INT 4
59654: NEG
59655: PUSH
59656: LD_INT 4
59658: NEG
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: PUSH
59664: LD_INT 4
59666: NEG
59667: PUSH
59668: LD_INT 5
59670: NEG
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 5
59678: NEG
59679: PUSH
59680: LD_INT 4
59682: NEG
59683: PUSH
59684: EMPTY
59685: LIST
59686: LIST
59687: PUSH
59688: LD_INT 5
59690: NEG
59691: PUSH
59692: LD_INT 5
59694: NEG
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: PUSH
59700: LD_INT 5
59702: NEG
59703: PUSH
59704: LD_INT 6
59706: NEG
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: PUSH
59712: LD_INT 6
59714: NEG
59715: PUSH
59716: LD_INT 5
59718: NEG
59719: PUSH
59720: EMPTY
59721: LIST
59722: LIST
59723: PUSH
59724: LD_INT 6
59726: NEG
59727: PUSH
59728: LD_INT 6
59730: NEG
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: PUSH
59736: EMPTY
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
59750: LD_ADDR_VAR 0 41
59754: PUSH
59755: LD_INT 0
59757: PUSH
59758: LD_INT 2
59760: NEG
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 1
59768: NEG
59769: PUSH
59770: LD_INT 3
59772: NEG
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 1
59780: PUSH
59781: LD_INT 2
59783: NEG
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: LIST
59793: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
59794: LD_ADDR_VAR 0 42
59798: PUSH
59799: LD_INT 2
59801: PUSH
59802: LD_INT 0
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: PUSH
59809: LD_INT 2
59811: PUSH
59812: LD_INT 1
59814: NEG
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: LD_INT 3
59822: PUSH
59823: LD_INT 1
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: LIST
59834: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
59835: LD_ADDR_VAR 0 43
59839: PUSH
59840: LD_INT 2
59842: PUSH
59843: LD_INT 2
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 3
59852: PUSH
59853: LD_INT 2
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 2
59862: PUSH
59863: LD_INT 3
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: LIST
59874: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
59875: LD_ADDR_VAR 0 44
59879: PUSH
59880: LD_INT 0
59882: PUSH
59883: LD_INT 2
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: LD_INT 1
59892: PUSH
59893: LD_INT 3
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: PUSH
59900: LD_INT 1
59902: NEG
59903: PUSH
59904: LD_INT 2
59906: PUSH
59907: EMPTY
59908: LIST
59909: LIST
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: LIST
59915: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59916: LD_ADDR_VAR 0 45
59920: PUSH
59921: LD_INT 2
59923: NEG
59924: PUSH
59925: LD_INT 0
59927: PUSH
59928: EMPTY
59929: LIST
59930: LIST
59931: PUSH
59932: LD_INT 2
59934: NEG
59935: PUSH
59936: LD_INT 1
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: LD_INT 3
59945: NEG
59946: PUSH
59947: LD_INT 1
59949: NEG
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: LIST
59959: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
59960: LD_ADDR_VAR 0 46
59964: PUSH
59965: LD_INT 2
59967: NEG
59968: PUSH
59969: LD_INT 2
59971: NEG
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: PUSH
59977: LD_INT 2
59979: NEG
59980: PUSH
59981: LD_INT 3
59983: NEG
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 3
59991: NEG
59992: PUSH
59993: LD_INT 2
59995: NEG
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: LIST
60005: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
60006: LD_ADDR_VAR 0 47
60010: PUSH
60011: LD_INT 2
60013: NEG
60014: PUSH
60015: LD_INT 3
60017: NEG
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: PUSH
60023: LD_INT 1
60025: NEG
60026: PUSH
60027: LD_INT 3
60029: NEG
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: EMPTY
60036: LIST
60037: LIST
60038: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
60039: LD_ADDR_VAR 0 48
60043: PUSH
60044: LD_INT 1
60046: PUSH
60047: LD_INT 2
60049: NEG
60050: PUSH
60051: EMPTY
60052: LIST
60053: LIST
60054: PUSH
60055: LD_INT 2
60057: PUSH
60058: LD_INT 1
60060: NEG
60061: PUSH
60062: EMPTY
60063: LIST
60064: LIST
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
60070: LD_ADDR_VAR 0 49
60074: PUSH
60075: LD_INT 3
60077: PUSH
60078: LD_INT 1
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: LD_INT 3
60087: PUSH
60088: LD_INT 2
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
60099: LD_ADDR_VAR 0 50
60103: PUSH
60104: LD_INT 2
60106: PUSH
60107: LD_INT 3
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: PUSH
60114: LD_INT 1
60116: PUSH
60117: LD_INT 3
60119: PUSH
60120: EMPTY
60121: LIST
60122: LIST
60123: PUSH
60124: EMPTY
60125: LIST
60126: LIST
60127: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60128: LD_ADDR_VAR 0 51
60132: PUSH
60133: LD_INT 1
60135: NEG
60136: PUSH
60137: LD_INT 2
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: LD_INT 2
60146: NEG
60147: PUSH
60148: LD_INT 1
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60159: LD_ADDR_VAR 0 52
60163: PUSH
60164: LD_INT 3
60166: NEG
60167: PUSH
60168: LD_INT 1
60170: NEG
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PUSH
60176: LD_INT 3
60178: NEG
60179: PUSH
60180: LD_INT 2
60182: NEG
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60192: LD_ADDR_VAR 0 53
60196: PUSH
60197: LD_INT 1
60199: NEG
60200: PUSH
60201: LD_INT 3
60203: NEG
60204: PUSH
60205: EMPTY
60206: LIST
60207: LIST
60208: PUSH
60209: LD_INT 0
60211: PUSH
60212: LD_INT 3
60214: NEG
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: PUSH
60220: LD_INT 1
60222: PUSH
60223: LD_INT 2
60225: NEG
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: LIST
60235: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60236: LD_ADDR_VAR 0 54
60240: PUSH
60241: LD_INT 2
60243: PUSH
60244: LD_INT 1
60246: NEG
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PUSH
60252: LD_INT 3
60254: PUSH
60255: LD_INT 0
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 3
60264: PUSH
60265: LD_INT 1
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: EMPTY
60273: LIST
60274: LIST
60275: LIST
60276: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60277: LD_ADDR_VAR 0 55
60281: PUSH
60282: LD_INT 3
60284: PUSH
60285: LD_INT 2
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: LD_INT 3
60294: PUSH
60295: LD_INT 3
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 2
60304: PUSH
60305: LD_INT 3
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: LIST
60316: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60317: LD_ADDR_VAR 0 56
60321: PUSH
60322: LD_INT 1
60324: PUSH
60325: LD_INT 3
60327: PUSH
60328: EMPTY
60329: LIST
60330: LIST
60331: PUSH
60332: LD_INT 0
60334: PUSH
60335: LD_INT 3
60337: PUSH
60338: EMPTY
60339: LIST
60340: LIST
60341: PUSH
60342: LD_INT 1
60344: NEG
60345: PUSH
60346: LD_INT 2
60348: PUSH
60349: EMPTY
60350: LIST
60351: LIST
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: LIST
60357: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60358: LD_ADDR_VAR 0 57
60362: PUSH
60363: LD_INT 2
60365: NEG
60366: PUSH
60367: LD_INT 1
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PUSH
60374: LD_INT 3
60376: NEG
60377: PUSH
60378: LD_INT 0
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: PUSH
60385: LD_INT 3
60387: NEG
60388: PUSH
60389: LD_INT 1
60391: NEG
60392: PUSH
60393: EMPTY
60394: LIST
60395: LIST
60396: PUSH
60397: EMPTY
60398: LIST
60399: LIST
60400: LIST
60401: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60402: LD_ADDR_VAR 0 58
60406: PUSH
60407: LD_INT 2
60409: NEG
60410: PUSH
60411: LD_INT 3
60413: NEG
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: PUSH
60419: LD_INT 3
60421: NEG
60422: PUSH
60423: LD_INT 2
60425: NEG
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 3
60433: NEG
60434: PUSH
60435: LD_INT 3
60437: NEG
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: LIST
60447: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
60448: LD_ADDR_VAR 0 59
60452: PUSH
60453: LD_INT 1
60455: NEG
60456: PUSH
60457: LD_INT 2
60459: NEG
60460: PUSH
60461: EMPTY
60462: LIST
60463: LIST
60464: PUSH
60465: LD_INT 0
60467: PUSH
60468: LD_INT 2
60470: NEG
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PUSH
60476: LD_INT 1
60478: PUSH
60479: LD_INT 1
60481: NEG
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: LIST
60491: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60492: LD_ADDR_VAR 0 60
60496: PUSH
60497: LD_INT 1
60499: PUSH
60500: LD_INT 1
60502: NEG
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: PUSH
60508: LD_INT 2
60510: PUSH
60511: LD_INT 0
60513: PUSH
60514: EMPTY
60515: LIST
60516: LIST
60517: PUSH
60518: LD_INT 2
60520: PUSH
60521: LD_INT 1
60523: PUSH
60524: EMPTY
60525: LIST
60526: LIST
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: LIST
60532: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60533: LD_ADDR_VAR 0 61
60537: PUSH
60538: LD_INT 2
60540: PUSH
60541: LD_INT 1
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: PUSH
60548: LD_INT 2
60550: PUSH
60551: LD_INT 2
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: LD_INT 1
60560: PUSH
60561: LD_INT 2
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: LIST
60572: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60573: LD_ADDR_VAR 0 62
60577: PUSH
60578: LD_INT 1
60580: PUSH
60581: LD_INT 2
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: PUSH
60588: LD_INT 0
60590: PUSH
60591: LD_INT 2
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: PUSH
60598: LD_INT 1
60600: NEG
60601: PUSH
60602: LD_INT 1
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: EMPTY
60610: LIST
60611: LIST
60612: LIST
60613: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60614: LD_ADDR_VAR 0 63
60618: PUSH
60619: LD_INT 1
60621: NEG
60622: PUSH
60623: LD_INT 1
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: PUSH
60630: LD_INT 2
60632: NEG
60633: PUSH
60634: LD_INT 0
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: PUSH
60641: LD_INT 2
60643: NEG
60644: PUSH
60645: LD_INT 1
60647: NEG
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: LIST
60657: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60658: LD_ADDR_VAR 0 64
60662: PUSH
60663: LD_INT 1
60665: NEG
60666: PUSH
60667: LD_INT 2
60669: NEG
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: PUSH
60675: LD_INT 2
60677: NEG
60678: PUSH
60679: LD_INT 1
60681: NEG
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: PUSH
60687: LD_INT 2
60689: NEG
60690: PUSH
60691: LD_INT 2
60693: NEG
60694: PUSH
60695: EMPTY
60696: LIST
60697: LIST
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: LIST
60703: ST_TO_ADDR
// end ; 2 :
60704: GO 63970
60706: LD_INT 2
60708: DOUBLE
60709: EQUAL
60710: IFTRUE 60714
60712: GO 63969
60714: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
60715: LD_ADDR_VAR 0 29
60719: PUSH
60720: LD_INT 4
60722: PUSH
60723: LD_INT 0
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PUSH
60730: LD_INT 4
60732: PUSH
60733: LD_INT 1
60735: NEG
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: LD_INT 5
60743: PUSH
60744: LD_INT 0
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: LD_INT 5
60753: PUSH
60754: LD_INT 1
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 4
60763: PUSH
60764: LD_INT 1
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 3
60773: PUSH
60774: LD_INT 0
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: PUSH
60781: LD_INT 3
60783: PUSH
60784: LD_INT 1
60786: NEG
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: PUSH
60792: LD_INT 3
60794: PUSH
60795: LD_INT 2
60797: NEG
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: PUSH
60803: LD_INT 5
60805: PUSH
60806: LD_INT 2
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: PUSH
60813: LD_INT 3
60815: PUSH
60816: LD_INT 3
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: PUSH
60823: LD_INT 3
60825: PUSH
60826: LD_INT 2
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 4
60835: PUSH
60836: LD_INT 3
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: LD_INT 4
60845: PUSH
60846: LD_INT 4
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: PUSH
60853: LD_INT 3
60855: PUSH
60856: LD_INT 4
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 2
60865: PUSH
60866: LD_INT 3
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: LD_INT 2
60875: PUSH
60876: LD_INT 2
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_INT 4
60885: PUSH
60886: LD_INT 2
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: PUSH
60893: LD_INT 2
60895: PUSH
60896: LD_INT 4
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: PUSH
60903: LD_INT 0
60905: PUSH
60906: LD_INT 4
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: PUSH
60913: LD_INT 0
60915: PUSH
60916: LD_INT 3
60918: PUSH
60919: EMPTY
60920: LIST
60921: LIST
60922: PUSH
60923: LD_INT 1
60925: PUSH
60926: LD_INT 4
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PUSH
60933: LD_INT 1
60935: PUSH
60936: LD_INT 5
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: PUSH
60943: LD_INT 0
60945: PUSH
60946: LD_INT 5
60948: PUSH
60949: EMPTY
60950: LIST
60951: LIST
60952: PUSH
60953: LD_INT 1
60955: NEG
60956: PUSH
60957: LD_INT 4
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: PUSH
60964: LD_INT 1
60966: NEG
60967: PUSH
60968: LD_INT 3
60970: PUSH
60971: EMPTY
60972: LIST
60973: LIST
60974: PUSH
60975: LD_INT 2
60977: PUSH
60978: LD_INT 5
60980: PUSH
60981: EMPTY
60982: LIST
60983: LIST
60984: PUSH
60985: LD_INT 2
60987: NEG
60988: PUSH
60989: LD_INT 3
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: PUSH
60996: LD_INT 3
60998: NEG
60999: PUSH
61000: LD_INT 0
61002: PUSH
61003: EMPTY
61004: LIST
61005: LIST
61006: PUSH
61007: LD_INT 3
61009: NEG
61010: PUSH
61011: LD_INT 1
61013: NEG
61014: PUSH
61015: EMPTY
61016: LIST
61017: LIST
61018: PUSH
61019: LD_INT 2
61021: NEG
61022: PUSH
61023: LD_INT 0
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: PUSH
61030: LD_INT 2
61032: NEG
61033: PUSH
61034: LD_INT 1
61036: PUSH
61037: EMPTY
61038: LIST
61039: LIST
61040: PUSH
61041: LD_INT 3
61043: NEG
61044: PUSH
61045: LD_INT 1
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 4
61054: NEG
61055: PUSH
61056: LD_INT 0
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: PUSH
61063: LD_INT 4
61065: NEG
61066: PUSH
61067: LD_INT 1
61069: NEG
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: PUSH
61075: LD_INT 4
61077: NEG
61078: PUSH
61079: LD_INT 2
61081: NEG
61082: PUSH
61083: EMPTY
61084: LIST
61085: LIST
61086: PUSH
61087: LD_INT 2
61089: NEG
61090: PUSH
61091: LD_INT 2
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: PUSH
61098: LD_INT 4
61100: NEG
61101: PUSH
61102: LD_INT 4
61104: NEG
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: PUSH
61110: LD_INT 4
61112: NEG
61113: PUSH
61114: LD_INT 5
61116: NEG
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: LD_INT 3
61124: NEG
61125: PUSH
61126: LD_INT 4
61128: NEG
61129: PUSH
61130: EMPTY
61131: LIST
61132: LIST
61133: PUSH
61134: LD_INT 3
61136: NEG
61137: PUSH
61138: LD_INT 3
61140: NEG
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 4
61148: NEG
61149: PUSH
61150: LD_INT 3
61152: NEG
61153: PUSH
61154: EMPTY
61155: LIST
61156: LIST
61157: PUSH
61158: LD_INT 5
61160: NEG
61161: PUSH
61162: LD_INT 4
61164: NEG
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: PUSH
61170: LD_INT 5
61172: NEG
61173: PUSH
61174: LD_INT 5
61176: NEG
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 3
61184: NEG
61185: PUSH
61186: LD_INT 5
61188: NEG
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: PUSH
61194: LD_INT 5
61196: NEG
61197: PUSH
61198: LD_INT 3
61200: NEG
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: LIST
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: LIST
61216: LIST
61217: LIST
61218: LIST
61219: LIST
61220: LIST
61221: LIST
61222: LIST
61223: LIST
61224: LIST
61225: LIST
61226: LIST
61227: LIST
61228: LIST
61229: LIST
61230: LIST
61231: LIST
61232: LIST
61233: LIST
61234: LIST
61235: LIST
61236: LIST
61237: LIST
61238: LIST
61239: LIST
61240: LIST
61241: LIST
61242: LIST
61243: LIST
61244: LIST
61245: LIST
61246: LIST
61247: LIST
61248: LIST
61249: LIST
61250: LIST
61251: LIST
61252: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
61253: LD_ADDR_VAR 0 30
61257: PUSH
61258: LD_INT 4
61260: PUSH
61261: LD_INT 4
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: PUSH
61268: LD_INT 4
61270: PUSH
61271: LD_INT 3
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: LD_INT 5
61280: PUSH
61281: LD_INT 4
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: PUSH
61288: LD_INT 5
61290: PUSH
61291: LD_INT 5
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: LD_INT 4
61300: PUSH
61301: LD_INT 5
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: LD_INT 3
61310: PUSH
61311: LD_INT 4
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: PUSH
61318: LD_INT 3
61320: PUSH
61321: LD_INT 3
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: PUSH
61328: LD_INT 5
61330: PUSH
61331: LD_INT 3
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: PUSH
61338: LD_INT 3
61340: PUSH
61341: LD_INT 5
61343: PUSH
61344: EMPTY
61345: LIST
61346: LIST
61347: PUSH
61348: LD_INT 0
61350: PUSH
61351: LD_INT 3
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: PUSH
61358: LD_INT 0
61360: PUSH
61361: LD_INT 2
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: LD_INT 1
61370: PUSH
61371: LD_INT 3
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: PUSH
61378: LD_INT 1
61380: PUSH
61381: LD_INT 4
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: PUSH
61388: LD_INT 0
61390: PUSH
61391: LD_INT 4
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: LD_INT 1
61400: NEG
61401: PUSH
61402: LD_INT 3
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: PUSH
61409: LD_INT 1
61411: NEG
61412: PUSH
61413: LD_INT 2
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 2
61422: PUSH
61423: LD_INT 4
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: PUSH
61430: LD_INT 2
61432: NEG
61433: PUSH
61434: LD_INT 2
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: PUSH
61441: LD_INT 4
61443: NEG
61444: PUSH
61445: LD_INT 0
61447: PUSH
61448: EMPTY
61449: LIST
61450: LIST
61451: PUSH
61452: LD_INT 4
61454: NEG
61455: PUSH
61456: LD_INT 1
61458: NEG
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: PUSH
61464: LD_INT 3
61466: NEG
61467: PUSH
61468: LD_INT 0
61470: PUSH
61471: EMPTY
61472: LIST
61473: LIST
61474: PUSH
61475: LD_INT 3
61477: NEG
61478: PUSH
61479: LD_INT 1
61481: PUSH
61482: EMPTY
61483: LIST
61484: LIST
61485: PUSH
61486: LD_INT 4
61488: NEG
61489: PUSH
61490: LD_INT 1
61492: PUSH
61493: EMPTY
61494: LIST
61495: LIST
61496: PUSH
61497: LD_INT 5
61499: NEG
61500: PUSH
61501: LD_INT 0
61503: PUSH
61504: EMPTY
61505: LIST
61506: LIST
61507: PUSH
61508: LD_INT 5
61510: NEG
61511: PUSH
61512: LD_INT 1
61514: NEG
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: PUSH
61520: LD_INT 5
61522: NEG
61523: PUSH
61524: LD_INT 2
61526: NEG
61527: PUSH
61528: EMPTY
61529: LIST
61530: LIST
61531: PUSH
61532: LD_INT 3
61534: NEG
61535: PUSH
61536: LD_INT 2
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: PUSH
61543: LD_INT 3
61545: NEG
61546: PUSH
61547: LD_INT 3
61549: NEG
61550: PUSH
61551: EMPTY
61552: LIST
61553: LIST
61554: PUSH
61555: LD_INT 3
61557: NEG
61558: PUSH
61559: LD_INT 4
61561: NEG
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: LD_INT 2
61569: NEG
61570: PUSH
61571: LD_INT 3
61573: NEG
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: PUSH
61579: LD_INT 2
61581: NEG
61582: PUSH
61583: LD_INT 2
61585: NEG
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: PUSH
61591: LD_INT 3
61593: NEG
61594: PUSH
61595: LD_INT 2
61597: NEG
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: PUSH
61603: LD_INT 4
61605: NEG
61606: PUSH
61607: LD_INT 3
61609: NEG
61610: PUSH
61611: EMPTY
61612: LIST
61613: LIST
61614: PUSH
61615: LD_INT 4
61617: NEG
61618: PUSH
61619: LD_INT 4
61621: NEG
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: PUSH
61627: LD_INT 2
61629: NEG
61630: PUSH
61631: LD_INT 4
61633: NEG
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: PUSH
61639: LD_INT 4
61641: NEG
61642: PUSH
61643: LD_INT 2
61645: NEG
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PUSH
61651: LD_INT 0
61653: PUSH
61654: LD_INT 4
61656: NEG
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: PUSH
61662: LD_INT 0
61664: PUSH
61665: LD_INT 5
61667: NEG
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: PUSH
61673: LD_INT 1
61675: PUSH
61676: LD_INT 4
61678: NEG
61679: PUSH
61680: EMPTY
61681: LIST
61682: LIST
61683: PUSH
61684: LD_INT 1
61686: PUSH
61687: LD_INT 3
61689: NEG
61690: PUSH
61691: EMPTY
61692: LIST
61693: LIST
61694: PUSH
61695: LD_INT 0
61697: PUSH
61698: LD_INT 3
61700: NEG
61701: PUSH
61702: EMPTY
61703: LIST
61704: LIST
61705: PUSH
61706: LD_INT 1
61708: NEG
61709: PUSH
61710: LD_INT 4
61712: NEG
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: PUSH
61718: LD_INT 1
61720: NEG
61721: PUSH
61722: LD_INT 5
61724: NEG
61725: PUSH
61726: EMPTY
61727: LIST
61728: LIST
61729: PUSH
61730: LD_INT 2
61732: PUSH
61733: LD_INT 3
61735: NEG
61736: PUSH
61737: EMPTY
61738: LIST
61739: LIST
61740: PUSH
61741: LD_INT 2
61743: NEG
61744: PUSH
61745: LD_INT 5
61747: NEG
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: PUSH
61753: EMPTY
61754: LIST
61755: LIST
61756: LIST
61757: LIST
61758: LIST
61759: LIST
61760: LIST
61761: LIST
61762: LIST
61763: LIST
61764: LIST
61765: LIST
61766: LIST
61767: LIST
61768: LIST
61769: LIST
61770: LIST
61771: LIST
61772: LIST
61773: LIST
61774: LIST
61775: LIST
61776: LIST
61777: LIST
61778: LIST
61779: LIST
61780: LIST
61781: LIST
61782: LIST
61783: LIST
61784: LIST
61785: LIST
61786: LIST
61787: LIST
61788: LIST
61789: LIST
61790: LIST
61791: LIST
61792: LIST
61793: LIST
61794: LIST
61795: LIST
61796: LIST
61797: LIST
61798: LIST
61799: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
61800: LD_ADDR_VAR 0 31
61804: PUSH
61805: LD_INT 0
61807: PUSH
61808: LD_INT 4
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: PUSH
61815: LD_INT 0
61817: PUSH
61818: LD_INT 3
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: LD_INT 1
61827: PUSH
61828: LD_INT 4
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: PUSH
61835: LD_INT 1
61837: PUSH
61838: LD_INT 5
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: LD_INT 0
61847: PUSH
61848: LD_INT 5
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: PUSH
61855: LD_INT 1
61857: NEG
61858: PUSH
61859: LD_INT 4
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: PUSH
61866: LD_INT 1
61868: NEG
61869: PUSH
61870: LD_INT 3
61872: PUSH
61873: EMPTY
61874: LIST
61875: LIST
61876: PUSH
61877: LD_INT 2
61879: PUSH
61880: LD_INT 5
61882: PUSH
61883: EMPTY
61884: LIST
61885: LIST
61886: PUSH
61887: LD_INT 2
61889: NEG
61890: PUSH
61891: LD_INT 3
61893: PUSH
61894: EMPTY
61895: LIST
61896: LIST
61897: PUSH
61898: LD_INT 3
61900: NEG
61901: PUSH
61902: LD_INT 0
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: PUSH
61909: LD_INT 3
61911: NEG
61912: PUSH
61913: LD_INT 1
61915: NEG
61916: PUSH
61917: EMPTY
61918: LIST
61919: LIST
61920: PUSH
61921: LD_INT 2
61923: NEG
61924: PUSH
61925: LD_INT 0
61927: PUSH
61928: EMPTY
61929: LIST
61930: LIST
61931: PUSH
61932: LD_INT 2
61934: NEG
61935: PUSH
61936: LD_INT 1
61938: PUSH
61939: EMPTY
61940: LIST
61941: LIST
61942: PUSH
61943: LD_INT 3
61945: NEG
61946: PUSH
61947: LD_INT 1
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: PUSH
61954: LD_INT 4
61956: NEG
61957: PUSH
61958: LD_INT 0
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: LD_INT 4
61967: NEG
61968: PUSH
61969: LD_INT 1
61971: NEG
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: PUSH
61977: LD_INT 4
61979: NEG
61980: PUSH
61981: LD_INT 2
61983: NEG
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: LD_INT 2
61991: NEG
61992: PUSH
61993: LD_INT 2
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: PUSH
62000: LD_INT 4
62002: NEG
62003: PUSH
62004: LD_INT 4
62006: NEG
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: PUSH
62012: LD_INT 4
62014: NEG
62015: PUSH
62016: LD_INT 5
62018: NEG
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: LD_INT 3
62026: NEG
62027: PUSH
62028: LD_INT 4
62030: NEG
62031: PUSH
62032: EMPTY
62033: LIST
62034: LIST
62035: PUSH
62036: LD_INT 3
62038: NEG
62039: PUSH
62040: LD_INT 3
62042: NEG
62043: PUSH
62044: EMPTY
62045: LIST
62046: LIST
62047: PUSH
62048: LD_INT 4
62050: NEG
62051: PUSH
62052: LD_INT 3
62054: NEG
62055: PUSH
62056: EMPTY
62057: LIST
62058: LIST
62059: PUSH
62060: LD_INT 5
62062: NEG
62063: PUSH
62064: LD_INT 4
62066: NEG
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: PUSH
62072: LD_INT 5
62074: NEG
62075: PUSH
62076: LD_INT 5
62078: NEG
62079: PUSH
62080: EMPTY
62081: LIST
62082: LIST
62083: PUSH
62084: LD_INT 3
62086: NEG
62087: PUSH
62088: LD_INT 5
62090: NEG
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: PUSH
62096: LD_INT 5
62098: NEG
62099: PUSH
62100: LD_INT 3
62102: NEG
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PUSH
62108: LD_INT 0
62110: PUSH
62111: LD_INT 3
62113: NEG
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: PUSH
62119: LD_INT 0
62121: PUSH
62122: LD_INT 4
62124: NEG
62125: PUSH
62126: EMPTY
62127: LIST
62128: LIST
62129: PUSH
62130: LD_INT 1
62132: PUSH
62133: LD_INT 3
62135: NEG
62136: PUSH
62137: EMPTY
62138: LIST
62139: LIST
62140: PUSH
62141: LD_INT 1
62143: PUSH
62144: LD_INT 2
62146: NEG
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: PUSH
62152: LD_INT 0
62154: PUSH
62155: LD_INT 2
62157: NEG
62158: PUSH
62159: EMPTY
62160: LIST
62161: LIST
62162: PUSH
62163: LD_INT 1
62165: NEG
62166: PUSH
62167: LD_INT 3
62169: NEG
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: PUSH
62175: LD_INT 1
62177: NEG
62178: PUSH
62179: LD_INT 4
62181: NEG
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: PUSH
62187: LD_INT 2
62189: PUSH
62190: LD_INT 2
62192: NEG
62193: PUSH
62194: EMPTY
62195: LIST
62196: LIST
62197: PUSH
62198: LD_INT 2
62200: NEG
62201: PUSH
62202: LD_INT 4
62204: NEG
62205: PUSH
62206: EMPTY
62207: LIST
62208: LIST
62209: PUSH
62210: LD_INT 4
62212: PUSH
62213: LD_INT 0
62215: PUSH
62216: EMPTY
62217: LIST
62218: LIST
62219: PUSH
62220: LD_INT 4
62222: PUSH
62223: LD_INT 1
62225: NEG
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: PUSH
62231: LD_INT 5
62233: PUSH
62234: LD_INT 0
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: PUSH
62241: LD_INT 5
62243: PUSH
62244: LD_INT 1
62246: PUSH
62247: EMPTY
62248: LIST
62249: LIST
62250: PUSH
62251: LD_INT 4
62253: PUSH
62254: LD_INT 1
62256: PUSH
62257: EMPTY
62258: LIST
62259: LIST
62260: PUSH
62261: LD_INT 3
62263: PUSH
62264: LD_INT 0
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: PUSH
62271: LD_INT 3
62273: PUSH
62274: LD_INT 1
62276: NEG
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PUSH
62282: LD_INT 3
62284: PUSH
62285: LD_INT 2
62287: NEG
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PUSH
62293: LD_INT 5
62295: PUSH
62296: LD_INT 2
62298: PUSH
62299: EMPTY
62300: LIST
62301: LIST
62302: PUSH
62303: EMPTY
62304: LIST
62305: LIST
62306: LIST
62307: LIST
62308: LIST
62309: LIST
62310: LIST
62311: LIST
62312: LIST
62313: LIST
62314: LIST
62315: LIST
62316: LIST
62317: LIST
62318: LIST
62319: LIST
62320: LIST
62321: LIST
62322: LIST
62323: LIST
62324: LIST
62325: LIST
62326: LIST
62327: LIST
62328: LIST
62329: LIST
62330: LIST
62331: LIST
62332: LIST
62333: LIST
62334: LIST
62335: LIST
62336: LIST
62337: LIST
62338: LIST
62339: LIST
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: LIST
62346: LIST
62347: LIST
62348: LIST
62349: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
62350: LD_ADDR_VAR 0 32
62354: PUSH
62355: LD_INT 4
62357: NEG
62358: PUSH
62359: LD_INT 0
62361: PUSH
62362: EMPTY
62363: LIST
62364: LIST
62365: PUSH
62366: LD_INT 4
62368: NEG
62369: PUSH
62370: LD_INT 1
62372: NEG
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: PUSH
62378: LD_INT 3
62380: NEG
62381: PUSH
62382: LD_INT 0
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: PUSH
62389: LD_INT 3
62391: NEG
62392: PUSH
62393: LD_INT 1
62395: PUSH
62396: EMPTY
62397: LIST
62398: LIST
62399: PUSH
62400: LD_INT 4
62402: NEG
62403: PUSH
62404: LD_INT 1
62406: PUSH
62407: EMPTY
62408: LIST
62409: LIST
62410: PUSH
62411: LD_INT 5
62413: NEG
62414: PUSH
62415: LD_INT 0
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: PUSH
62422: LD_INT 5
62424: NEG
62425: PUSH
62426: LD_INT 1
62428: NEG
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: PUSH
62434: LD_INT 5
62436: NEG
62437: PUSH
62438: LD_INT 2
62440: NEG
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: PUSH
62446: LD_INT 3
62448: NEG
62449: PUSH
62450: LD_INT 2
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: PUSH
62457: LD_INT 3
62459: NEG
62460: PUSH
62461: LD_INT 3
62463: NEG
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 3
62471: NEG
62472: PUSH
62473: LD_INT 4
62475: NEG
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: PUSH
62481: LD_INT 2
62483: NEG
62484: PUSH
62485: LD_INT 3
62487: NEG
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: PUSH
62493: LD_INT 2
62495: NEG
62496: PUSH
62497: LD_INT 2
62499: NEG
62500: PUSH
62501: EMPTY
62502: LIST
62503: LIST
62504: PUSH
62505: LD_INT 3
62507: NEG
62508: PUSH
62509: LD_INT 2
62511: NEG
62512: PUSH
62513: EMPTY
62514: LIST
62515: LIST
62516: PUSH
62517: LD_INT 4
62519: NEG
62520: PUSH
62521: LD_INT 3
62523: NEG
62524: PUSH
62525: EMPTY
62526: LIST
62527: LIST
62528: PUSH
62529: LD_INT 4
62531: NEG
62532: PUSH
62533: LD_INT 4
62535: NEG
62536: PUSH
62537: EMPTY
62538: LIST
62539: LIST
62540: PUSH
62541: LD_INT 2
62543: NEG
62544: PUSH
62545: LD_INT 4
62547: NEG
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: PUSH
62553: LD_INT 4
62555: NEG
62556: PUSH
62557: LD_INT 2
62559: NEG
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: PUSH
62565: LD_INT 0
62567: PUSH
62568: LD_INT 4
62570: NEG
62571: PUSH
62572: EMPTY
62573: LIST
62574: LIST
62575: PUSH
62576: LD_INT 0
62578: PUSH
62579: LD_INT 5
62581: NEG
62582: PUSH
62583: EMPTY
62584: LIST
62585: LIST
62586: PUSH
62587: LD_INT 1
62589: PUSH
62590: LD_INT 4
62592: NEG
62593: PUSH
62594: EMPTY
62595: LIST
62596: LIST
62597: PUSH
62598: LD_INT 1
62600: PUSH
62601: LD_INT 3
62603: NEG
62604: PUSH
62605: EMPTY
62606: LIST
62607: LIST
62608: PUSH
62609: LD_INT 0
62611: PUSH
62612: LD_INT 3
62614: NEG
62615: PUSH
62616: EMPTY
62617: LIST
62618: LIST
62619: PUSH
62620: LD_INT 1
62622: NEG
62623: PUSH
62624: LD_INT 4
62626: NEG
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: PUSH
62632: LD_INT 1
62634: NEG
62635: PUSH
62636: LD_INT 5
62638: NEG
62639: PUSH
62640: EMPTY
62641: LIST
62642: LIST
62643: PUSH
62644: LD_INT 2
62646: PUSH
62647: LD_INT 3
62649: NEG
62650: PUSH
62651: EMPTY
62652: LIST
62653: LIST
62654: PUSH
62655: LD_INT 2
62657: NEG
62658: PUSH
62659: LD_INT 5
62661: NEG
62662: PUSH
62663: EMPTY
62664: LIST
62665: LIST
62666: PUSH
62667: LD_INT 3
62669: PUSH
62670: LD_INT 0
62672: PUSH
62673: EMPTY
62674: LIST
62675: LIST
62676: PUSH
62677: LD_INT 3
62679: PUSH
62680: LD_INT 1
62682: NEG
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: PUSH
62688: LD_INT 4
62690: PUSH
62691: LD_INT 0
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: PUSH
62698: LD_INT 4
62700: PUSH
62701: LD_INT 1
62703: PUSH
62704: EMPTY
62705: LIST
62706: LIST
62707: PUSH
62708: LD_INT 3
62710: PUSH
62711: LD_INT 1
62713: PUSH
62714: EMPTY
62715: LIST
62716: LIST
62717: PUSH
62718: LD_INT 2
62720: PUSH
62721: LD_INT 0
62723: PUSH
62724: EMPTY
62725: LIST
62726: LIST
62727: PUSH
62728: LD_INT 2
62730: PUSH
62731: LD_INT 1
62733: NEG
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: PUSH
62739: LD_INT 2
62741: PUSH
62742: LD_INT 2
62744: NEG
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: LD_INT 4
62752: PUSH
62753: LD_INT 2
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: PUSH
62760: LD_INT 4
62762: PUSH
62763: LD_INT 4
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: PUSH
62770: LD_INT 4
62772: PUSH
62773: LD_INT 3
62775: PUSH
62776: EMPTY
62777: LIST
62778: LIST
62779: PUSH
62780: LD_INT 5
62782: PUSH
62783: LD_INT 4
62785: PUSH
62786: EMPTY
62787: LIST
62788: LIST
62789: PUSH
62790: LD_INT 5
62792: PUSH
62793: LD_INT 5
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: PUSH
62800: LD_INT 4
62802: PUSH
62803: LD_INT 5
62805: PUSH
62806: EMPTY
62807: LIST
62808: LIST
62809: PUSH
62810: LD_INT 3
62812: PUSH
62813: LD_INT 4
62815: PUSH
62816: EMPTY
62817: LIST
62818: LIST
62819: PUSH
62820: LD_INT 3
62822: PUSH
62823: LD_INT 3
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: PUSH
62830: LD_INT 5
62832: PUSH
62833: LD_INT 3
62835: PUSH
62836: EMPTY
62837: LIST
62838: LIST
62839: PUSH
62840: LD_INT 3
62842: PUSH
62843: LD_INT 5
62845: PUSH
62846: EMPTY
62847: LIST
62848: LIST
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: LIST
62854: LIST
62855: LIST
62856: LIST
62857: LIST
62858: LIST
62859: LIST
62860: LIST
62861: LIST
62862: LIST
62863: LIST
62864: LIST
62865: LIST
62866: LIST
62867: LIST
62868: LIST
62869: LIST
62870: LIST
62871: LIST
62872: LIST
62873: LIST
62874: LIST
62875: LIST
62876: LIST
62877: LIST
62878: LIST
62879: LIST
62880: LIST
62881: LIST
62882: LIST
62883: LIST
62884: LIST
62885: LIST
62886: LIST
62887: LIST
62888: LIST
62889: LIST
62890: LIST
62891: LIST
62892: LIST
62893: LIST
62894: LIST
62895: LIST
62896: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
62897: LD_ADDR_VAR 0 33
62901: PUSH
62902: LD_INT 4
62904: NEG
62905: PUSH
62906: LD_INT 4
62908: NEG
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: PUSH
62914: LD_INT 4
62916: NEG
62917: PUSH
62918: LD_INT 5
62920: NEG
62921: PUSH
62922: EMPTY
62923: LIST
62924: LIST
62925: PUSH
62926: LD_INT 3
62928: NEG
62929: PUSH
62930: LD_INT 4
62932: NEG
62933: PUSH
62934: EMPTY
62935: LIST
62936: LIST
62937: PUSH
62938: LD_INT 3
62940: NEG
62941: PUSH
62942: LD_INT 3
62944: NEG
62945: PUSH
62946: EMPTY
62947: LIST
62948: LIST
62949: PUSH
62950: LD_INT 4
62952: NEG
62953: PUSH
62954: LD_INT 3
62956: NEG
62957: PUSH
62958: EMPTY
62959: LIST
62960: LIST
62961: PUSH
62962: LD_INT 5
62964: NEG
62965: PUSH
62966: LD_INT 4
62968: NEG
62969: PUSH
62970: EMPTY
62971: LIST
62972: LIST
62973: PUSH
62974: LD_INT 5
62976: NEG
62977: PUSH
62978: LD_INT 5
62980: NEG
62981: PUSH
62982: EMPTY
62983: LIST
62984: LIST
62985: PUSH
62986: LD_INT 3
62988: NEG
62989: PUSH
62990: LD_INT 5
62992: NEG
62993: PUSH
62994: EMPTY
62995: LIST
62996: LIST
62997: PUSH
62998: LD_INT 5
63000: NEG
63001: PUSH
63002: LD_INT 3
63004: NEG
63005: PUSH
63006: EMPTY
63007: LIST
63008: LIST
63009: PUSH
63010: LD_INT 0
63012: PUSH
63013: LD_INT 3
63015: NEG
63016: PUSH
63017: EMPTY
63018: LIST
63019: LIST
63020: PUSH
63021: LD_INT 0
63023: PUSH
63024: LD_INT 4
63026: NEG
63027: PUSH
63028: EMPTY
63029: LIST
63030: LIST
63031: PUSH
63032: LD_INT 1
63034: PUSH
63035: LD_INT 3
63037: NEG
63038: PUSH
63039: EMPTY
63040: LIST
63041: LIST
63042: PUSH
63043: LD_INT 1
63045: PUSH
63046: LD_INT 2
63048: NEG
63049: PUSH
63050: EMPTY
63051: LIST
63052: LIST
63053: PUSH
63054: LD_INT 0
63056: PUSH
63057: LD_INT 2
63059: NEG
63060: PUSH
63061: EMPTY
63062: LIST
63063: LIST
63064: PUSH
63065: LD_INT 1
63067: NEG
63068: PUSH
63069: LD_INT 3
63071: NEG
63072: PUSH
63073: EMPTY
63074: LIST
63075: LIST
63076: PUSH
63077: LD_INT 1
63079: NEG
63080: PUSH
63081: LD_INT 4
63083: NEG
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: PUSH
63089: LD_INT 2
63091: PUSH
63092: LD_INT 2
63094: NEG
63095: PUSH
63096: EMPTY
63097: LIST
63098: LIST
63099: PUSH
63100: LD_INT 2
63102: NEG
63103: PUSH
63104: LD_INT 4
63106: NEG
63107: PUSH
63108: EMPTY
63109: LIST
63110: LIST
63111: PUSH
63112: LD_INT 4
63114: PUSH
63115: LD_INT 0
63117: PUSH
63118: EMPTY
63119: LIST
63120: LIST
63121: PUSH
63122: LD_INT 4
63124: PUSH
63125: LD_INT 1
63127: NEG
63128: PUSH
63129: EMPTY
63130: LIST
63131: LIST
63132: PUSH
63133: LD_INT 5
63135: PUSH
63136: LD_INT 0
63138: PUSH
63139: EMPTY
63140: LIST
63141: LIST
63142: PUSH
63143: LD_INT 5
63145: PUSH
63146: LD_INT 1
63148: PUSH
63149: EMPTY
63150: LIST
63151: LIST
63152: PUSH
63153: LD_INT 4
63155: PUSH
63156: LD_INT 1
63158: PUSH
63159: EMPTY
63160: LIST
63161: LIST
63162: PUSH
63163: LD_INT 3
63165: PUSH
63166: LD_INT 0
63168: PUSH
63169: EMPTY
63170: LIST
63171: LIST
63172: PUSH
63173: LD_INT 3
63175: PUSH
63176: LD_INT 1
63178: NEG
63179: PUSH
63180: EMPTY
63181: LIST
63182: LIST
63183: PUSH
63184: LD_INT 3
63186: PUSH
63187: LD_INT 2
63189: NEG
63190: PUSH
63191: EMPTY
63192: LIST
63193: LIST
63194: PUSH
63195: LD_INT 5
63197: PUSH
63198: LD_INT 2
63200: PUSH
63201: EMPTY
63202: LIST
63203: LIST
63204: PUSH
63205: LD_INT 3
63207: PUSH
63208: LD_INT 3
63210: PUSH
63211: EMPTY
63212: LIST
63213: LIST
63214: PUSH
63215: LD_INT 3
63217: PUSH
63218: LD_INT 2
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: PUSH
63225: LD_INT 4
63227: PUSH
63228: LD_INT 3
63230: PUSH
63231: EMPTY
63232: LIST
63233: LIST
63234: PUSH
63235: LD_INT 4
63237: PUSH
63238: LD_INT 4
63240: PUSH
63241: EMPTY
63242: LIST
63243: LIST
63244: PUSH
63245: LD_INT 3
63247: PUSH
63248: LD_INT 4
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: PUSH
63255: LD_INT 2
63257: PUSH
63258: LD_INT 3
63260: PUSH
63261: EMPTY
63262: LIST
63263: LIST
63264: PUSH
63265: LD_INT 2
63267: PUSH
63268: LD_INT 2
63270: PUSH
63271: EMPTY
63272: LIST
63273: LIST
63274: PUSH
63275: LD_INT 4
63277: PUSH
63278: LD_INT 2
63280: PUSH
63281: EMPTY
63282: LIST
63283: LIST
63284: PUSH
63285: LD_INT 2
63287: PUSH
63288: LD_INT 4
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: PUSH
63295: LD_INT 0
63297: PUSH
63298: LD_INT 4
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: PUSH
63305: LD_INT 0
63307: PUSH
63308: LD_INT 3
63310: PUSH
63311: EMPTY
63312: LIST
63313: LIST
63314: PUSH
63315: LD_INT 1
63317: PUSH
63318: LD_INT 4
63320: PUSH
63321: EMPTY
63322: LIST
63323: LIST
63324: PUSH
63325: LD_INT 1
63327: PUSH
63328: LD_INT 5
63330: PUSH
63331: EMPTY
63332: LIST
63333: LIST
63334: PUSH
63335: LD_INT 0
63337: PUSH
63338: LD_INT 5
63340: PUSH
63341: EMPTY
63342: LIST
63343: LIST
63344: PUSH
63345: LD_INT 1
63347: NEG
63348: PUSH
63349: LD_INT 4
63351: PUSH
63352: EMPTY
63353: LIST
63354: LIST
63355: PUSH
63356: LD_INT 1
63358: NEG
63359: PUSH
63360: LD_INT 3
63362: PUSH
63363: EMPTY
63364: LIST
63365: LIST
63366: PUSH
63367: LD_INT 2
63369: PUSH
63370: LD_INT 5
63372: PUSH
63373: EMPTY
63374: LIST
63375: LIST
63376: PUSH
63377: LD_INT 2
63379: NEG
63380: PUSH
63381: LD_INT 3
63383: PUSH
63384: EMPTY
63385: LIST
63386: LIST
63387: PUSH
63388: EMPTY
63389: LIST
63390: LIST
63391: LIST
63392: LIST
63393: LIST
63394: LIST
63395: LIST
63396: LIST
63397: LIST
63398: LIST
63399: LIST
63400: LIST
63401: LIST
63402: LIST
63403: LIST
63404: LIST
63405: LIST
63406: LIST
63407: LIST
63408: LIST
63409: LIST
63410: LIST
63411: LIST
63412: LIST
63413: LIST
63414: LIST
63415: LIST
63416: LIST
63417: LIST
63418: LIST
63419: LIST
63420: LIST
63421: LIST
63422: LIST
63423: LIST
63424: LIST
63425: LIST
63426: LIST
63427: LIST
63428: LIST
63429: LIST
63430: LIST
63431: LIST
63432: LIST
63433: LIST
63434: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
63435: LD_ADDR_VAR 0 34
63439: PUSH
63440: LD_INT 0
63442: PUSH
63443: LD_INT 4
63445: NEG
63446: PUSH
63447: EMPTY
63448: LIST
63449: LIST
63450: PUSH
63451: LD_INT 0
63453: PUSH
63454: LD_INT 5
63456: NEG
63457: PUSH
63458: EMPTY
63459: LIST
63460: LIST
63461: PUSH
63462: LD_INT 1
63464: PUSH
63465: LD_INT 4
63467: NEG
63468: PUSH
63469: EMPTY
63470: LIST
63471: LIST
63472: PUSH
63473: LD_INT 1
63475: PUSH
63476: LD_INT 3
63478: NEG
63479: PUSH
63480: EMPTY
63481: LIST
63482: LIST
63483: PUSH
63484: LD_INT 0
63486: PUSH
63487: LD_INT 3
63489: NEG
63490: PUSH
63491: EMPTY
63492: LIST
63493: LIST
63494: PUSH
63495: LD_INT 1
63497: NEG
63498: PUSH
63499: LD_INT 4
63501: NEG
63502: PUSH
63503: EMPTY
63504: LIST
63505: LIST
63506: PUSH
63507: LD_INT 1
63509: NEG
63510: PUSH
63511: LD_INT 5
63513: NEG
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: PUSH
63519: LD_INT 2
63521: PUSH
63522: LD_INT 3
63524: NEG
63525: PUSH
63526: EMPTY
63527: LIST
63528: LIST
63529: PUSH
63530: LD_INT 2
63532: NEG
63533: PUSH
63534: LD_INT 5
63536: NEG
63537: PUSH
63538: EMPTY
63539: LIST
63540: LIST
63541: PUSH
63542: LD_INT 3
63544: PUSH
63545: LD_INT 0
63547: PUSH
63548: EMPTY
63549: LIST
63550: LIST
63551: PUSH
63552: LD_INT 3
63554: PUSH
63555: LD_INT 1
63557: NEG
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: PUSH
63563: LD_INT 4
63565: PUSH
63566: LD_INT 0
63568: PUSH
63569: EMPTY
63570: LIST
63571: LIST
63572: PUSH
63573: LD_INT 4
63575: PUSH
63576: LD_INT 1
63578: PUSH
63579: EMPTY
63580: LIST
63581: LIST
63582: PUSH
63583: LD_INT 3
63585: PUSH
63586: LD_INT 1
63588: PUSH
63589: EMPTY
63590: LIST
63591: LIST
63592: PUSH
63593: LD_INT 2
63595: PUSH
63596: LD_INT 0
63598: PUSH
63599: EMPTY
63600: LIST
63601: LIST
63602: PUSH
63603: LD_INT 2
63605: PUSH
63606: LD_INT 1
63608: NEG
63609: PUSH
63610: EMPTY
63611: LIST
63612: LIST
63613: PUSH
63614: LD_INT 2
63616: PUSH
63617: LD_INT 2
63619: NEG
63620: PUSH
63621: EMPTY
63622: LIST
63623: LIST
63624: PUSH
63625: LD_INT 4
63627: PUSH
63628: LD_INT 2
63630: PUSH
63631: EMPTY
63632: LIST
63633: LIST
63634: PUSH
63635: LD_INT 4
63637: PUSH
63638: LD_INT 4
63640: PUSH
63641: EMPTY
63642: LIST
63643: LIST
63644: PUSH
63645: LD_INT 4
63647: PUSH
63648: LD_INT 3
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: PUSH
63655: LD_INT 5
63657: PUSH
63658: LD_INT 4
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: PUSH
63665: LD_INT 5
63667: PUSH
63668: LD_INT 5
63670: PUSH
63671: EMPTY
63672: LIST
63673: LIST
63674: PUSH
63675: LD_INT 4
63677: PUSH
63678: LD_INT 5
63680: PUSH
63681: EMPTY
63682: LIST
63683: LIST
63684: PUSH
63685: LD_INT 3
63687: PUSH
63688: LD_INT 4
63690: PUSH
63691: EMPTY
63692: LIST
63693: LIST
63694: PUSH
63695: LD_INT 3
63697: PUSH
63698: LD_INT 3
63700: PUSH
63701: EMPTY
63702: LIST
63703: LIST
63704: PUSH
63705: LD_INT 5
63707: PUSH
63708: LD_INT 3
63710: PUSH
63711: EMPTY
63712: LIST
63713: LIST
63714: PUSH
63715: LD_INT 3
63717: PUSH
63718: LD_INT 5
63720: PUSH
63721: EMPTY
63722: LIST
63723: LIST
63724: PUSH
63725: LD_INT 0
63727: PUSH
63728: LD_INT 3
63730: PUSH
63731: EMPTY
63732: LIST
63733: LIST
63734: PUSH
63735: LD_INT 0
63737: PUSH
63738: LD_INT 2
63740: PUSH
63741: EMPTY
63742: LIST
63743: LIST
63744: PUSH
63745: LD_INT 1
63747: PUSH
63748: LD_INT 3
63750: PUSH
63751: EMPTY
63752: LIST
63753: LIST
63754: PUSH
63755: LD_INT 1
63757: PUSH
63758: LD_INT 4
63760: PUSH
63761: EMPTY
63762: LIST
63763: LIST
63764: PUSH
63765: LD_INT 0
63767: PUSH
63768: LD_INT 4
63770: PUSH
63771: EMPTY
63772: LIST
63773: LIST
63774: PUSH
63775: LD_INT 1
63777: NEG
63778: PUSH
63779: LD_INT 3
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: PUSH
63786: LD_INT 1
63788: NEG
63789: PUSH
63790: LD_INT 2
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: PUSH
63797: LD_INT 2
63799: PUSH
63800: LD_INT 4
63802: PUSH
63803: EMPTY
63804: LIST
63805: LIST
63806: PUSH
63807: LD_INT 2
63809: NEG
63810: PUSH
63811: LD_INT 2
63813: PUSH
63814: EMPTY
63815: LIST
63816: LIST
63817: PUSH
63818: LD_INT 4
63820: NEG
63821: PUSH
63822: LD_INT 0
63824: PUSH
63825: EMPTY
63826: LIST
63827: LIST
63828: PUSH
63829: LD_INT 4
63831: NEG
63832: PUSH
63833: LD_INT 1
63835: NEG
63836: PUSH
63837: EMPTY
63838: LIST
63839: LIST
63840: PUSH
63841: LD_INT 3
63843: NEG
63844: PUSH
63845: LD_INT 0
63847: PUSH
63848: EMPTY
63849: LIST
63850: LIST
63851: PUSH
63852: LD_INT 3
63854: NEG
63855: PUSH
63856: LD_INT 1
63858: PUSH
63859: EMPTY
63860: LIST
63861: LIST
63862: PUSH
63863: LD_INT 4
63865: NEG
63866: PUSH
63867: LD_INT 1
63869: PUSH
63870: EMPTY
63871: LIST
63872: LIST
63873: PUSH
63874: LD_INT 5
63876: NEG
63877: PUSH
63878: LD_INT 0
63880: PUSH
63881: EMPTY
63882: LIST
63883: LIST
63884: PUSH
63885: LD_INT 5
63887: NEG
63888: PUSH
63889: LD_INT 1
63891: NEG
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: PUSH
63897: LD_INT 5
63899: NEG
63900: PUSH
63901: LD_INT 2
63903: NEG
63904: PUSH
63905: EMPTY
63906: LIST
63907: LIST
63908: PUSH
63909: LD_INT 3
63911: NEG
63912: PUSH
63913: LD_INT 2
63915: PUSH
63916: EMPTY
63917: LIST
63918: LIST
63919: PUSH
63920: EMPTY
63921: LIST
63922: LIST
63923: LIST
63924: LIST
63925: LIST
63926: LIST
63927: LIST
63928: LIST
63929: LIST
63930: LIST
63931: LIST
63932: LIST
63933: LIST
63934: LIST
63935: LIST
63936: LIST
63937: LIST
63938: LIST
63939: LIST
63940: LIST
63941: LIST
63942: LIST
63943: LIST
63944: LIST
63945: LIST
63946: LIST
63947: LIST
63948: LIST
63949: LIST
63950: LIST
63951: LIST
63952: LIST
63953: LIST
63954: LIST
63955: LIST
63956: LIST
63957: LIST
63958: LIST
63959: LIST
63960: LIST
63961: LIST
63962: LIST
63963: LIST
63964: LIST
63965: LIST
63966: ST_TO_ADDR
// end ; end ;
63967: GO 63970
63969: POP
// case btype of b_depot , b_warehouse :
63970: LD_VAR 0 1
63974: PUSH
63975: LD_INT 0
63977: DOUBLE
63978: EQUAL
63979: IFTRUE 63989
63981: LD_INT 1
63983: DOUBLE
63984: EQUAL
63985: IFTRUE 63989
63987: GO 64190
63989: POP
// case nation of nation_american :
63990: LD_VAR 0 5
63994: PUSH
63995: LD_INT 1
63997: DOUBLE
63998: EQUAL
63999: IFTRUE 64003
64001: GO 64059
64003: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
64004: LD_ADDR_VAR 0 9
64008: PUSH
64009: LD_VAR 0 11
64013: PUSH
64014: LD_VAR 0 12
64018: PUSH
64019: LD_VAR 0 13
64023: PUSH
64024: LD_VAR 0 14
64028: PUSH
64029: LD_VAR 0 15
64033: PUSH
64034: LD_VAR 0 16
64038: PUSH
64039: EMPTY
64040: LIST
64041: LIST
64042: LIST
64043: LIST
64044: LIST
64045: LIST
64046: PUSH
64047: LD_VAR 0 4
64051: PUSH
64052: LD_INT 1
64054: PLUS
64055: ARRAY
64056: ST_TO_ADDR
64057: GO 64188
64059: LD_INT 2
64061: DOUBLE
64062: EQUAL
64063: IFTRUE 64067
64065: GO 64123
64067: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
64068: LD_ADDR_VAR 0 9
64072: PUSH
64073: LD_VAR 0 17
64077: PUSH
64078: LD_VAR 0 18
64082: PUSH
64083: LD_VAR 0 19
64087: PUSH
64088: LD_VAR 0 20
64092: PUSH
64093: LD_VAR 0 21
64097: PUSH
64098: LD_VAR 0 22
64102: PUSH
64103: EMPTY
64104: LIST
64105: LIST
64106: LIST
64107: LIST
64108: LIST
64109: LIST
64110: PUSH
64111: LD_VAR 0 4
64115: PUSH
64116: LD_INT 1
64118: PLUS
64119: ARRAY
64120: ST_TO_ADDR
64121: GO 64188
64123: LD_INT 3
64125: DOUBLE
64126: EQUAL
64127: IFTRUE 64131
64129: GO 64187
64131: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
64132: LD_ADDR_VAR 0 9
64136: PUSH
64137: LD_VAR 0 23
64141: PUSH
64142: LD_VAR 0 24
64146: PUSH
64147: LD_VAR 0 25
64151: PUSH
64152: LD_VAR 0 26
64156: PUSH
64157: LD_VAR 0 27
64161: PUSH
64162: LD_VAR 0 28
64166: PUSH
64167: EMPTY
64168: LIST
64169: LIST
64170: LIST
64171: LIST
64172: LIST
64173: LIST
64174: PUSH
64175: LD_VAR 0 4
64179: PUSH
64180: LD_INT 1
64182: PLUS
64183: ARRAY
64184: ST_TO_ADDR
64185: GO 64188
64187: POP
64188: GO 64743
64190: LD_INT 2
64192: DOUBLE
64193: EQUAL
64194: IFTRUE 64204
64196: LD_INT 3
64198: DOUBLE
64199: EQUAL
64200: IFTRUE 64204
64202: GO 64260
64204: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
64205: LD_ADDR_VAR 0 9
64209: PUSH
64210: LD_VAR 0 29
64214: PUSH
64215: LD_VAR 0 30
64219: PUSH
64220: LD_VAR 0 31
64224: PUSH
64225: LD_VAR 0 32
64229: PUSH
64230: LD_VAR 0 33
64234: PUSH
64235: LD_VAR 0 34
64239: PUSH
64240: EMPTY
64241: LIST
64242: LIST
64243: LIST
64244: LIST
64245: LIST
64246: LIST
64247: PUSH
64248: LD_VAR 0 4
64252: PUSH
64253: LD_INT 1
64255: PLUS
64256: ARRAY
64257: ST_TO_ADDR
64258: GO 64743
64260: LD_INT 16
64262: DOUBLE
64263: EQUAL
64264: IFTRUE 64322
64266: LD_INT 17
64268: DOUBLE
64269: EQUAL
64270: IFTRUE 64322
64272: LD_INT 18
64274: DOUBLE
64275: EQUAL
64276: IFTRUE 64322
64278: LD_INT 19
64280: DOUBLE
64281: EQUAL
64282: IFTRUE 64322
64284: LD_INT 22
64286: DOUBLE
64287: EQUAL
64288: IFTRUE 64322
64290: LD_INT 20
64292: DOUBLE
64293: EQUAL
64294: IFTRUE 64322
64296: LD_INT 21
64298: DOUBLE
64299: EQUAL
64300: IFTRUE 64322
64302: LD_INT 23
64304: DOUBLE
64305: EQUAL
64306: IFTRUE 64322
64308: LD_INT 24
64310: DOUBLE
64311: EQUAL
64312: IFTRUE 64322
64314: LD_INT 25
64316: DOUBLE
64317: EQUAL
64318: IFTRUE 64322
64320: GO 64378
64322: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
64323: LD_ADDR_VAR 0 9
64327: PUSH
64328: LD_VAR 0 35
64332: PUSH
64333: LD_VAR 0 36
64337: PUSH
64338: LD_VAR 0 37
64342: PUSH
64343: LD_VAR 0 38
64347: PUSH
64348: LD_VAR 0 39
64352: PUSH
64353: LD_VAR 0 40
64357: PUSH
64358: EMPTY
64359: LIST
64360: LIST
64361: LIST
64362: LIST
64363: LIST
64364: LIST
64365: PUSH
64366: LD_VAR 0 4
64370: PUSH
64371: LD_INT 1
64373: PLUS
64374: ARRAY
64375: ST_TO_ADDR
64376: GO 64743
64378: LD_INT 6
64380: DOUBLE
64381: EQUAL
64382: IFTRUE 64434
64384: LD_INT 7
64386: DOUBLE
64387: EQUAL
64388: IFTRUE 64434
64390: LD_INT 8
64392: DOUBLE
64393: EQUAL
64394: IFTRUE 64434
64396: LD_INT 13
64398: DOUBLE
64399: EQUAL
64400: IFTRUE 64434
64402: LD_INT 12
64404: DOUBLE
64405: EQUAL
64406: IFTRUE 64434
64408: LD_INT 15
64410: DOUBLE
64411: EQUAL
64412: IFTRUE 64434
64414: LD_INT 11
64416: DOUBLE
64417: EQUAL
64418: IFTRUE 64434
64420: LD_INT 14
64422: DOUBLE
64423: EQUAL
64424: IFTRUE 64434
64426: LD_INT 10
64428: DOUBLE
64429: EQUAL
64430: IFTRUE 64434
64432: GO 64490
64434: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
64435: LD_ADDR_VAR 0 9
64439: PUSH
64440: LD_VAR 0 41
64444: PUSH
64445: LD_VAR 0 42
64449: PUSH
64450: LD_VAR 0 43
64454: PUSH
64455: LD_VAR 0 44
64459: PUSH
64460: LD_VAR 0 45
64464: PUSH
64465: LD_VAR 0 46
64469: PUSH
64470: EMPTY
64471: LIST
64472: LIST
64473: LIST
64474: LIST
64475: LIST
64476: LIST
64477: PUSH
64478: LD_VAR 0 4
64482: PUSH
64483: LD_INT 1
64485: PLUS
64486: ARRAY
64487: ST_TO_ADDR
64488: GO 64743
64490: LD_INT 36
64492: DOUBLE
64493: EQUAL
64494: IFTRUE 64498
64496: GO 64554
64498: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
64499: LD_ADDR_VAR 0 9
64503: PUSH
64504: LD_VAR 0 47
64508: PUSH
64509: LD_VAR 0 48
64513: PUSH
64514: LD_VAR 0 49
64518: PUSH
64519: LD_VAR 0 50
64523: PUSH
64524: LD_VAR 0 51
64528: PUSH
64529: LD_VAR 0 52
64533: PUSH
64534: EMPTY
64535: LIST
64536: LIST
64537: LIST
64538: LIST
64539: LIST
64540: LIST
64541: PUSH
64542: LD_VAR 0 4
64546: PUSH
64547: LD_INT 1
64549: PLUS
64550: ARRAY
64551: ST_TO_ADDR
64552: GO 64743
64554: LD_INT 4
64556: DOUBLE
64557: EQUAL
64558: IFTRUE 64580
64560: LD_INT 5
64562: DOUBLE
64563: EQUAL
64564: IFTRUE 64580
64566: LD_INT 34
64568: DOUBLE
64569: EQUAL
64570: IFTRUE 64580
64572: LD_INT 37
64574: DOUBLE
64575: EQUAL
64576: IFTRUE 64580
64578: GO 64636
64580: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
64581: LD_ADDR_VAR 0 9
64585: PUSH
64586: LD_VAR 0 53
64590: PUSH
64591: LD_VAR 0 54
64595: PUSH
64596: LD_VAR 0 55
64600: PUSH
64601: LD_VAR 0 56
64605: PUSH
64606: LD_VAR 0 57
64610: PUSH
64611: LD_VAR 0 58
64615: PUSH
64616: EMPTY
64617: LIST
64618: LIST
64619: LIST
64620: LIST
64621: LIST
64622: LIST
64623: PUSH
64624: LD_VAR 0 4
64628: PUSH
64629: LD_INT 1
64631: PLUS
64632: ARRAY
64633: ST_TO_ADDR
64634: GO 64743
64636: LD_INT 31
64638: DOUBLE
64639: EQUAL
64640: IFTRUE 64686
64642: LD_INT 32
64644: DOUBLE
64645: EQUAL
64646: IFTRUE 64686
64648: LD_INT 33
64650: DOUBLE
64651: EQUAL
64652: IFTRUE 64686
64654: LD_INT 27
64656: DOUBLE
64657: EQUAL
64658: IFTRUE 64686
64660: LD_INT 26
64662: DOUBLE
64663: EQUAL
64664: IFTRUE 64686
64666: LD_INT 28
64668: DOUBLE
64669: EQUAL
64670: IFTRUE 64686
64672: LD_INT 29
64674: DOUBLE
64675: EQUAL
64676: IFTRUE 64686
64678: LD_INT 30
64680: DOUBLE
64681: EQUAL
64682: IFTRUE 64686
64684: GO 64742
64686: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
64687: LD_ADDR_VAR 0 9
64691: PUSH
64692: LD_VAR 0 59
64696: PUSH
64697: LD_VAR 0 60
64701: PUSH
64702: LD_VAR 0 61
64706: PUSH
64707: LD_VAR 0 62
64711: PUSH
64712: LD_VAR 0 63
64716: PUSH
64717: LD_VAR 0 64
64721: PUSH
64722: EMPTY
64723: LIST
64724: LIST
64725: LIST
64726: LIST
64727: LIST
64728: LIST
64729: PUSH
64730: LD_VAR 0 4
64734: PUSH
64735: LD_INT 1
64737: PLUS
64738: ARRAY
64739: ST_TO_ADDR
64740: GO 64743
64742: POP
// temp_list2 = [ ] ;
64743: LD_ADDR_VAR 0 10
64747: PUSH
64748: EMPTY
64749: ST_TO_ADDR
// for i in temp_list do
64750: LD_ADDR_VAR 0 8
64754: PUSH
64755: LD_VAR 0 9
64759: PUSH
64760: FOR_IN
64761: IFFALSE 64813
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
64763: LD_ADDR_VAR 0 10
64767: PUSH
64768: LD_VAR 0 10
64772: PUSH
64773: LD_VAR 0 8
64777: PUSH
64778: LD_INT 1
64780: ARRAY
64781: PUSH
64782: LD_VAR 0 2
64786: PLUS
64787: PUSH
64788: LD_VAR 0 8
64792: PUSH
64793: LD_INT 2
64795: ARRAY
64796: PUSH
64797: LD_VAR 0 3
64801: PLUS
64802: PUSH
64803: EMPTY
64804: LIST
64805: LIST
64806: PUSH
64807: EMPTY
64808: LIST
64809: ADD
64810: ST_TO_ADDR
64811: GO 64760
64813: POP
64814: POP
// result = temp_list2 ;
64815: LD_ADDR_VAR 0 7
64819: PUSH
64820: LD_VAR 0 10
64824: ST_TO_ADDR
// end ;
64825: LD_VAR 0 7
64829: RET
// export function EnemyInRange ( unit , dist ) ; begin
64830: LD_INT 0
64832: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
64833: LD_ADDR_VAR 0 3
64837: PUSH
64838: LD_VAR 0 1
64842: PPUSH
64843: CALL_OW 255
64847: PPUSH
64848: LD_VAR 0 1
64852: PPUSH
64853: CALL_OW 250
64857: PPUSH
64858: LD_VAR 0 1
64862: PPUSH
64863: CALL_OW 251
64867: PPUSH
64868: LD_VAR 0 2
64872: PPUSH
64873: CALL 38203 0 4
64877: PUSH
64878: LD_INT 4
64880: ARRAY
64881: ST_TO_ADDR
// end ;
64882: LD_VAR 0 3
64886: RET
// export function PlayerSeeMe ( unit ) ; begin
64887: LD_INT 0
64889: PPUSH
// result := See ( your_side , unit ) ;
64890: LD_ADDR_VAR 0 2
64894: PUSH
64895: LD_OWVAR 2
64899: PPUSH
64900: LD_VAR 0 1
64904: PPUSH
64905: CALL_OW 292
64909: ST_TO_ADDR
// end ;
64910: LD_VAR 0 2
64914: RET
// export function ReverseDir ( unit ) ; begin
64915: LD_INT 0
64917: PPUSH
// if not unit then
64918: LD_VAR 0 1
64922: NOT
64923: IFFALSE 64927
// exit ;
64925: GO 64950
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
64927: LD_ADDR_VAR 0 2
64931: PUSH
64932: LD_VAR 0 1
64936: PPUSH
64937: CALL_OW 254
64941: PUSH
64942: LD_INT 3
64944: PLUS
64945: PUSH
64946: LD_INT 6
64948: MOD
64949: ST_TO_ADDR
// end ;
64950: LD_VAR 0 2
64954: RET
// export function ReverseArray ( array ) ; var i ; begin
64955: LD_INT 0
64957: PPUSH
64958: PPUSH
// if not array then
64959: LD_VAR 0 1
64963: NOT
64964: IFFALSE 64968
// exit ;
64966: GO 65023
// result := [ ] ;
64968: LD_ADDR_VAR 0 2
64972: PUSH
64973: EMPTY
64974: ST_TO_ADDR
// for i := array downto 1 do
64975: LD_ADDR_VAR 0 3
64979: PUSH
64980: DOUBLE
64981: LD_VAR 0 1
64985: INC
64986: ST_TO_ADDR
64987: LD_INT 1
64989: PUSH
64990: FOR_DOWNTO
64991: IFFALSE 65021
// result := Join ( result , array [ i ] ) ;
64993: LD_ADDR_VAR 0 2
64997: PUSH
64998: LD_VAR 0 2
65002: PPUSH
65003: LD_VAR 0 1
65007: PUSH
65008: LD_VAR 0 3
65012: ARRAY
65013: PPUSH
65014: CALL 69666 0 2
65018: ST_TO_ADDR
65019: GO 64990
65021: POP
65022: POP
// end ;
65023: LD_VAR 0 2
65027: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
65028: LD_INT 0
65030: PPUSH
65031: PPUSH
65032: PPUSH
65033: PPUSH
65034: PPUSH
65035: PPUSH
// if not unit or not hexes then
65036: LD_VAR 0 1
65040: NOT
65041: PUSH
65042: LD_VAR 0 2
65046: NOT
65047: OR
65048: IFFALSE 65052
// exit ;
65050: GO 65175
// dist := 9999 ;
65052: LD_ADDR_VAR 0 5
65056: PUSH
65057: LD_INT 9999
65059: ST_TO_ADDR
// for i = 1 to hexes do
65060: LD_ADDR_VAR 0 4
65064: PUSH
65065: DOUBLE
65066: LD_INT 1
65068: DEC
65069: ST_TO_ADDR
65070: LD_VAR 0 2
65074: PUSH
65075: FOR_TO
65076: IFFALSE 65163
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
65078: LD_ADDR_VAR 0 6
65082: PUSH
65083: LD_VAR 0 1
65087: PPUSH
65088: LD_VAR 0 2
65092: PUSH
65093: LD_VAR 0 4
65097: ARRAY
65098: PUSH
65099: LD_INT 1
65101: ARRAY
65102: PPUSH
65103: LD_VAR 0 2
65107: PUSH
65108: LD_VAR 0 4
65112: ARRAY
65113: PUSH
65114: LD_INT 2
65116: ARRAY
65117: PPUSH
65118: CALL_OW 297
65122: ST_TO_ADDR
// if tdist < dist then
65123: LD_VAR 0 6
65127: PUSH
65128: LD_VAR 0 5
65132: LESS
65133: IFFALSE 65161
// begin hex := hexes [ i ] ;
65135: LD_ADDR_VAR 0 8
65139: PUSH
65140: LD_VAR 0 2
65144: PUSH
65145: LD_VAR 0 4
65149: ARRAY
65150: ST_TO_ADDR
// dist := tdist ;
65151: LD_ADDR_VAR 0 5
65155: PUSH
65156: LD_VAR 0 6
65160: ST_TO_ADDR
// end ; end ;
65161: GO 65075
65163: POP
65164: POP
// result := hex ;
65165: LD_ADDR_VAR 0 3
65169: PUSH
65170: LD_VAR 0 8
65174: ST_TO_ADDR
// end ;
65175: LD_VAR 0 3
65179: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
65180: LD_INT 0
65182: PPUSH
65183: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
65184: LD_VAR 0 1
65188: NOT
65189: PUSH
65190: LD_VAR 0 1
65194: PUSH
65195: LD_INT 21
65197: PUSH
65198: LD_INT 2
65200: PUSH
65201: EMPTY
65202: LIST
65203: LIST
65204: PUSH
65205: LD_INT 23
65207: PUSH
65208: LD_INT 2
65210: PUSH
65211: EMPTY
65212: LIST
65213: LIST
65214: PUSH
65215: EMPTY
65216: LIST
65217: LIST
65218: PPUSH
65219: CALL_OW 69
65223: IN
65224: NOT
65225: OR
65226: IFFALSE 65230
// exit ;
65228: GO 65277
// for i = 1 to 3 do
65230: LD_ADDR_VAR 0 3
65234: PUSH
65235: DOUBLE
65236: LD_INT 1
65238: DEC
65239: ST_TO_ADDR
65240: LD_INT 3
65242: PUSH
65243: FOR_TO
65244: IFFALSE 65275
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
65246: LD_VAR 0 1
65250: PPUSH
65251: CALL_OW 250
65255: PPUSH
65256: LD_VAR 0 1
65260: PPUSH
65261: CALL_OW 251
65265: PPUSH
65266: LD_INT 1
65268: PPUSH
65269: CALL_OW 453
65273: GO 65243
65275: POP
65276: POP
// end ;
65277: LD_VAR 0 2
65281: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
65282: LD_INT 0
65284: PPUSH
65285: PPUSH
65286: PPUSH
65287: PPUSH
65288: PPUSH
65289: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
65290: LD_VAR 0 1
65294: NOT
65295: PUSH
65296: LD_VAR 0 2
65300: NOT
65301: OR
65302: PUSH
65303: LD_VAR 0 1
65307: PPUSH
65308: CALL_OW 314
65312: OR
65313: IFFALSE 65317
// exit ;
65315: GO 65784
// if GetLives ( i ) < 250 then
65317: LD_VAR 0 4
65321: PPUSH
65322: CALL_OW 256
65326: PUSH
65327: LD_INT 250
65329: LESS
65330: IFFALSE 65343
// begin ComAutodestruct ( i ) ;
65332: LD_VAR 0 4
65336: PPUSH
65337: CALL 65180 0 1
// exit ;
65341: GO 65784
// end ; x := GetX ( enemy_unit ) ;
65343: LD_ADDR_VAR 0 7
65347: PUSH
65348: LD_VAR 0 2
65352: PPUSH
65353: CALL_OW 250
65357: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
65358: LD_ADDR_VAR 0 8
65362: PUSH
65363: LD_VAR 0 2
65367: PPUSH
65368: CALL_OW 251
65372: ST_TO_ADDR
// if not x or not y then
65373: LD_VAR 0 7
65377: NOT
65378: PUSH
65379: LD_VAR 0 8
65383: NOT
65384: OR
65385: IFFALSE 65389
// exit ;
65387: GO 65784
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
65389: LD_ADDR_VAR 0 6
65393: PUSH
65394: LD_VAR 0 7
65398: PPUSH
65399: LD_INT 0
65401: PPUSH
65402: LD_INT 4
65404: PPUSH
65405: CALL_OW 272
65409: PUSH
65410: LD_VAR 0 8
65414: PPUSH
65415: LD_INT 0
65417: PPUSH
65418: LD_INT 4
65420: PPUSH
65421: CALL_OW 273
65425: PUSH
65426: EMPTY
65427: LIST
65428: LIST
65429: PUSH
65430: LD_VAR 0 7
65434: PPUSH
65435: LD_INT 1
65437: PPUSH
65438: LD_INT 4
65440: PPUSH
65441: CALL_OW 272
65445: PUSH
65446: LD_VAR 0 8
65450: PPUSH
65451: LD_INT 1
65453: PPUSH
65454: LD_INT 4
65456: PPUSH
65457: CALL_OW 273
65461: PUSH
65462: EMPTY
65463: LIST
65464: LIST
65465: PUSH
65466: LD_VAR 0 7
65470: PPUSH
65471: LD_INT 2
65473: PPUSH
65474: LD_INT 4
65476: PPUSH
65477: CALL_OW 272
65481: PUSH
65482: LD_VAR 0 8
65486: PPUSH
65487: LD_INT 2
65489: PPUSH
65490: LD_INT 4
65492: PPUSH
65493: CALL_OW 273
65497: PUSH
65498: EMPTY
65499: LIST
65500: LIST
65501: PUSH
65502: LD_VAR 0 7
65506: PPUSH
65507: LD_INT 3
65509: PPUSH
65510: LD_INT 4
65512: PPUSH
65513: CALL_OW 272
65517: PUSH
65518: LD_VAR 0 8
65522: PPUSH
65523: LD_INT 3
65525: PPUSH
65526: LD_INT 4
65528: PPUSH
65529: CALL_OW 273
65533: PUSH
65534: EMPTY
65535: LIST
65536: LIST
65537: PUSH
65538: LD_VAR 0 7
65542: PPUSH
65543: LD_INT 4
65545: PPUSH
65546: LD_INT 4
65548: PPUSH
65549: CALL_OW 272
65553: PUSH
65554: LD_VAR 0 8
65558: PPUSH
65559: LD_INT 4
65561: PPUSH
65562: LD_INT 4
65564: PPUSH
65565: CALL_OW 273
65569: PUSH
65570: EMPTY
65571: LIST
65572: LIST
65573: PUSH
65574: LD_VAR 0 7
65578: PPUSH
65579: LD_INT 5
65581: PPUSH
65582: LD_INT 4
65584: PPUSH
65585: CALL_OW 272
65589: PUSH
65590: LD_VAR 0 8
65594: PPUSH
65595: LD_INT 5
65597: PPUSH
65598: LD_INT 4
65600: PPUSH
65601: CALL_OW 273
65605: PUSH
65606: EMPTY
65607: LIST
65608: LIST
65609: PUSH
65610: EMPTY
65611: LIST
65612: LIST
65613: LIST
65614: LIST
65615: LIST
65616: LIST
65617: ST_TO_ADDR
// for i = tmp downto 1 do
65618: LD_ADDR_VAR 0 4
65622: PUSH
65623: DOUBLE
65624: LD_VAR 0 6
65628: INC
65629: ST_TO_ADDR
65630: LD_INT 1
65632: PUSH
65633: FOR_DOWNTO
65634: IFFALSE 65735
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
65636: LD_VAR 0 6
65640: PUSH
65641: LD_VAR 0 4
65645: ARRAY
65646: PUSH
65647: LD_INT 1
65649: ARRAY
65650: PPUSH
65651: LD_VAR 0 6
65655: PUSH
65656: LD_VAR 0 4
65660: ARRAY
65661: PUSH
65662: LD_INT 2
65664: ARRAY
65665: PPUSH
65666: CALL_OW 488
65670: NOT
65671: PUSH
65672: LD_VAR 0 6
65676: PUSH
65677: LD_VAR 0 4
65681: ARRAY
65682: PUSH
65683: LD_INT 1
65685: ARRAY
65686: PPUSH
65687: LD_VAR 0 6
65691: PUSH
65692: LD_VAR 0 4
65696: ARRAY
65697: PUSH
65698: LD_INT 2
65700: ARRAY
65701: PPUSH
65702: CALL_OW 428
65706: PUSH
65707: LD_INT 0
65709: NONEQUAL
65710: OR
65711: IFFALSE 65733
// tmp := Delete ( tmp , i ) ;
65713: LD_ADDR_VAR 0 6
65717: PUSH
65718: LD_VAR 0 6
65722: PPUSH
65723: LD_VAR 0 4
65727: PPUSH
65728: CALL_OW 3
65732: ST_TO_ADDR
65733: GO 65633
65735: POP
65736: POP
// j := GetClosestHex ( unit , tmp ) ;
65737: LD_ADDR_VAR 0 5
65741: PUSH
65742: LD_VAR 0 1
65746: PPUSH
65747: LD_VAR 0 6
65751: PPUSH
65752: CALL 65028 0 2
65756: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
65757: LD_VAR 0 1
65761: PPUSH
65762: LD_VAR 0 5
65766: PUSH
65767: LD_INT 1
65769: ARRAY
65770: PPUSH
65771: LD_VAR 0 5
65775: PUSH
65776: LD_INT 2
65778: ARRAY
65779: PPUSH
65780: CALL_OW 111
// end ;
65784: LD_VAR 0 3
65788: RET
// export function PrepareApemanSoldier ( ) ; begin
65789: LD_INT 0
65791: PPUSH
// uc_nation := 0 ;
65792: LD_ADDR_OWVAR 21
65796: PUSH
65797: LD_INT 0
65799: ST_TO_ADDR
// hc_sex := sex_male ;
65800: LD_ADDR_OWVAR 27
65804: PUSH
65805: LD_INT 1
65807: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
65808: LD_ADDR_OWVAR 28
65812: PUSH
65813: LD_INT 15
65815: ST_TO_ADDR
// hc_gallery :=  ;
65816: LD_ADDR_OWVAR 33
65820: PUSH
65821: LD_STRING 
65823: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65824: LD_ADDR_OWVAR 31
65828: PUSH
65829: LD_INT 0
65831: PPUSH
65832: LD_INT 3
65834: PPUSH
65835: CALL_OW 12
65839: PUSH
65840: LD_INT 0
65842: PPUSH
65843: LD_INT 3
65845: PPUSH
65846: CALL_OW 12
65850: PUSH
65851: LD_INT 0
65853: PUSH
65854: LD_INT 0
65856: PUSH
65857: EMPTY
65858: LIST
65859: LIST
65860: LIST
65861: LIST
65862: ST_TO_ADDR
// end ;
65863: LD_VAR 0 1
65867: RET
// export function PrepareApemanEngineer ( ) ; begin
65868: LD_INT 0
65870: PPUSH
// uc_nation := 0 ;
65871: LD_ADDR_OWVAR 21
65875: PUSH
65876: LD_INT 0
65878: ST_TO_ADDR
// hc_sex := sex_male ;
65879: LD_ADDR_OWVAR 27
65883: PUSH
65884: LD_INT 1
65886: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
65887: LD_ADDR_OWVAR 28
65891: PUSH
65892: LD_INT 16
65894: ST_TO_ADDR
// hc_gallery :=  ;
65895: LD_ADDR_OWVAR 33
65899: PUSH
65900: LD_STRING 
65902: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65903: LD_ADDR_OWVAR 31
65907: PUSH
65908: LD_INT 0
65910: PPUSH
65911: LD_INT 3
65913: PPUSH
65914: CALL_OW 12
65918: PUSH
65919: LD_INT 0
65921: PPUSH
65922: LD_INT 3
65924: PPUSH
65925: CALL_OW 12
65929: PUSH
65930: LD_INT 0
65932: PUSH
65933: LD_INT 0
65935: PUSH
65936: EMPTY
65937: LIST
65938: LIST
65939: LIST
65940: LIST
65941: ST_TO_ADDR
// end ;
65942: LD_VAR 0 1
65946: RET
// export function PrepareApeman ( agressivity ) ; begin
65947: LD_INT 0
65949: PPUSH
// uc_side := 0 ;
65950: LD_ADDR_OWVAR 20
65954: PUSH
65955: LD_INT 0
65957: ST_TO_ADDR
// uc_nation := 0 ;
65958: LD_ADDR_OWVAR 21
65962: PUSH
65963: LD_INT 0
65965: ST_TO_ADDR
// hc_sex := sex_male ;
65966: LD_ADDR_OWVAR 27
65970: PUSH
65971: LD_INT 1
65973: ST_TO_ADDR
// hc_class := class_apeman ;
65974: LD_ADDR_OWVAR 28
65978: PUSH
65979: LD_INT 12
65981: ST_TO_ADDR
// hc_gallery :=  ;
65982: LD_ADDR_OWVAR 33
65986: PUSH
65987: LD_STRING 
65989: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65990: LD_ADDR_OWVAR 35
65994: PUSH
65995: LD_VAR 0 1
65999: NEG
66000: PPUSH
66001: LD_VAR 0 1
66005: PPUSH
66006: CALL_OW 12
66010: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66011: LD_ADDR_OWVAR 31
66015: PUSH
66016: LD_INT 0
66018: PPUSH
66019: LD_INT 3
66021: PPUSH
66022: CALL_OW 12
66026: PUSH
66027: LD_INT 0
66029: PPUSH
66030: LD_INT 3
66032: PPUSH
66033: CALL_OW 12
66037: PUSH
66038: LD_INT 0
66040: PUSH
66041: LD_INT 0
66043: PUSH
66044: EMPTY
66045: LIST
66046: LIST
66047: LIST
66048: LIST
66049: ST_TO_ADDR
// end ;
66050: LD_VAR 0 2
66054: RET
// export function PrepareTiger ( agressivity ) ; begin
66055: LD_INT 0
66057: PPUSH
// uc_side := 0 ;
66058: LD_ADDR_OWVAR 20
66062: PUSH
66063: LD_INT 0
66065: ST_TO_ADDR
// uc_nation := 0 ;
66066: LD_ADDR_OWVAR 21
66070: PUSH
66071: LD_INT 0
66073: ST_TO_ADDR
// hc_class := class_tiger ;
66074: LD_ADDR_OWVAR 28
66078: PUSH
66079: LD_INT 14
66081: ST_TO_ADDR
// hc_gallery :=  ;
66082: LD_ADDR_OWVAR 33
66086: PUSH
66087: LD_STRING 
66089: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
66090: LD_ADDR_OWVAR 35
66094: PUSH
66095: LD_VAR 0 1
66099: NEG
66100: PPUSH
66101: LD_VAR 0 1
66105: PPUSH
66106: CALL_OW 12
66110: ST_TO_ADDR
// end ;
66111: LD_VAR 0 2
66115: RET
// export function PrepareEnchidna ( ) ; begin
66116: LD_INT 0
66118: PPUSH
// uc_side := 0 ;
66119: LD_ADDR_OWVAR 20
66123: PUSH
66124: LD_INT 0
66126: ST_TO_ADDR
// uc_nation := 0 ;
66127: LD_ADDR_OWVAR 21
66131: PUSH
66132: LD_INT 0
66134: ST_TO_ADDR
// hc_class := class_baggie ;
66135: LD_ADDR_OWVAR 28
66139: PUSH
66140: LD_INT 13
66142: ST_TO_ADDR
// hc_gallery :=  ;
66143: LD_ADDR_OWVAR 33
66147: PUSH
66148: LD_STRING 
66150: ST_TO_ADDR
// end ;
66151: LD_VAR 0 1
66155: RET
// export function PrepareFrog ( ) ; begin
66156: LD_INT 0
66158: PPUSH
// uc_side := 0 ;
66159: LD_ADDR_OWVAR 20
66163: PUSH
66164: LD_INT 0
66166: ST_TO_ADDR
// uc_nation := 0 ;
66167: LD_ADDR_OWVAR 21
66171: PUSH
66172: LD_INT 0
66174: ST_TO_ADDR
// hc_class := class_frog ;
66175: LD_ADDR_OWVAR 28
66179: PUSH
66180: LD_INT 19
66182: ST_TO_ADDR
// hc_gallery :=  ;
66183: LD_ADDR_OWVAR 33
66187: PUSH
66188: LD_STRING 
66190: ST_TO_ADDR
// end ;
66191: LD_VAR 0 1
66195: RET
// export function PrepareFish ( ) ; begin
66196: LD_INT 0
66198: PPUSH
// uc_side := 0 ;
66199: LD_ADDR_OWVAR 20
66203: PUSH
66204: LD_INT 0
66206: ST_TO_ADDR
// uc_nation := 0 ;
66207: LD_ADDR_OWVAR 21
66211: PUSH
66212: LD_INT 0
66214: ST_TO_ADDR
// hc_class := class_fish ;
66215: LD_ADDR_OWVAR 28
66219: PUSH
66220: LD_INT 20
66222: ST_TO_ADDR
// hc_gallery :=  ;
66223: LD_ADDR_OWVAR 33
66227: PUSH
66228: LD_STRING 
66230: ST_TO_ADDR
// end ;
66231: LD_VAR 0 1
66235: RET
// export function PrepareBird ( ) ; begin
66236: LD_INT 0
66238: PPUSH
// uc_side := 0 ;
66239: LD_ADDR_OWVAR 20
66243: PUSH
66244: LD_INT 0
66246: ST_TO_ADDR
// uc_nation := 0 ;
66247: LD_ADDR_OWVAR 21
66251: PUSH
66252: LD_INT 0
66254: ST_TO_ADDR
// hc_class := class_phororhacos ;
66255: LD_ADDR_OWVAR 28
66259: PUSH
66260: LD_INT 18
66262: ST_TO_ADDR
// hc_gallery :=  ;
66263: LD_ADDR_OWVAR 33
66267: PUSH
66268: LD_STRING 
66270: ST_TO_ADDR
// end ;
66271: LD_VAR 0 1
66275: RET
// export function PrepareHorse ( ) ; begin
66276: LD_INT 0
66278: PPUSH
// uc_side := 0 ;
66279: LD_ADDR_OWVAR 20
66283: PUSH
66284: LD_INT 0
66286: ST_TO_ADDR
// uc_nation := 0 ;
66287: LD_ADDR_OWVAR 21
66291: PUSH
66292: LD_INT 0
66294: ST_TO_ADDR
// hc_class := class_horse ;
66295: LD_ADDR_OWVAR 28
66299: PUSH
66300: LD_INT 21
66302: ST_TO_ADDR
// hc_gallery :=  ;
66303: LD_ADDR_OWVAR 33
66307: PUSH
66308: LD_STRING 
66310: ST_TO_ADDR
// end ;
66311: LD_VAR 0 1
66315: RET
// export function PrepareMastodont ( ) ; begin
66316: LD_INT 0
66318: PPUSH
// uc_side := 0 ;
66319: LD_ADDR_OWVAR 20
66323: PUSH
66324: LD_INT 0
66326: ST_TO_ADDR
// uc_nation := 0 ;
66327: LD_ADDR_OWVAR 21
66331: PUSH
66332: LD_INT 0
66334: ST_TO_ADDR
// vc_chassis := class_mastodont ;
66335: LD_ADDR_OWVAR 37
66339: PUSH
66340: LD_INT 31
66342: ST_TO_ADDR
// vc_control := control_rider ;
66343: LD_ADDR_OWVAR 38
66347: PUSH
66348: LD_INT 4
66350: ST_TO_ADDR
// end ;
66351: LD_VAR 0 1
66355: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
66356: LD_INT 0
66358: PPUSH
66359: PPUSH
66360: PPUSH
// uc_side = 0 ;
66361: LD_ADDR_OWVAR 20
66365: PUSH
66366: LD_INT 0
66368: ST_TO_ADDR
// uc_nation = 0 ;
66369: LD_ADDR_OWVAR 21
66373: PUSH
66374: LD_INT 0
66376: ST_TO_ADDR
// InitHc_All ( ) ;
66377: CALL_OW 584
// InitVc ;
66381: CALL_OW 20
// if mastodonts then
66385: LD_VAR 0 6
66389: IFFALSE 66456
// for i = 1 to mastodonts do
66391: LD_ADDR_VAR 0 11
66395: PUSH
66396: DOUBLE
66397: LD_INT 1
66399: DEC
66400: ST_TO_ADDR
66401: LD_VAR 0 6
66405: PUSH
66406: FOR_TO
66407: IFFALSE 66454
// begin vc_chassis := 31 ;
66409: LD_ADDR_OWVAR 37
66413: PUSH
66414: LD_INT 31
66416: ST_TO_ADDR
// vc_control := control_rider ;
66417: LD_ADDR_OWVAR 38
66421: PUSH
66422: LD_INT 4
66424: ST_TO_ADDR
// animal := CreateVehicle ;
66425: LD_ADDR_VAR 0 12
66429: PUSH
66430: CALL_OW 45
66434: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66435: LD_VAR 0 12
66439: PPUSH
66440: LD_VAR 0 8
66444: PPUSH
66445: LD_INT 0
66447: PPUSH
66448: CALL 68584 0 3
// end ;
66452: GO 66406
66454: POP
66455: POP
// if horses then
66456: LD_VAR 0 5
66460: IFFALSE 66527
// for i = 1 to horses do
66462: LD_ADDR_VAR 0 11
66466: PUSH
66467: DOUBLE
66468: LD_INT 1
66470: DEC
66471: ST_TO_ADDR
66472: LD_VAR 0 5
66476: PUSH
66477: FOR_TO
66478: IFFALSE 66525
// begin hc_class := 21 ;
66480: LD_ADDR_OWVAR 28
66484: PUSH
66485: LD_INT 21
66487: ST_TO_ADDR
// hc_gallery :=  ;
66488: LD_ADDR_OWVAR 33
66492: PUSH
66493: LD_STRING 
66495: ST_TO_ADDR
// animal := CreateHuman ;
66496: LD_ADDR_VAR 0 12
66500: PUSH
66501: CALL_OW 44
66505: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66506: LD_VAR 0 12
66510: PPUSH
66511: LD_VAR 0 8
66515: PPUSH
66516: LD_INT 0
66518: PPUSH
66519: CALL 68584 0 3
// end ;
66523: GO 66477
66525: POP
66526: POP
// if birds then
66527: LD_VAR 0 1
66531: IFFALSE 66598
// for i = 1 to birds do
66533: LD_ADDR_VAR 0 11
66537: PUSH
66538: DOUBLE
66539: LD_INT 1
66541: DEC
66542: ST_TO_ADDR
66543: LD_VAR 0 1
66547: PUSH
66548: FOR_TO
66549: IFFALSE 66596
// begin hc_class := 18 ;
66551: LD_ADDR_OWVAR 28
66555: PUSH
66556: LD_INT 18
66558: ST_TO_ADDR
// hc_gallery =  ;
66559: LD_ADDR_OWVAR 33
66563: PUSH
66564: LD_STRING 
66566: ST_TO_ADDR
// animal := CreateHuman ;
66567: LD_ADDR_VAR 0 12
66571: PUSH
66572: CALL_OW 44
66576: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66577: LD_VAR 0 12
66581: PPUSH
66582: LD_VAR 0 8
66586: PPUSH
66587: LD_INT 0
66589: PPUSH
66590: CALL 68584 0 3
// end ;
66594: GO 66548
66596: POP
66597: POP
// if tigers then
66598: LD_VAR 0 2
66602: IFFALSE 66686
// for i = 1 to tigers do
66604: LD_ADDR_VAR 0 11
66608: PUSH
66609: DOUBLE
66610: LD_INT 1
66612: DEC
66613: ST_TO_ADDR
66614: LD_VAR 0 2
66618: PUSH
66619: FOR_TO
66620: IFFALSE 66684
// begin hc_class = class_tiger ;
66622: LD_ADDR_OWVAR 28
66626: PUSH
66627: LD_INT 14
66629: ST_TO_ADDR
// hc_gallery =  ;
66630: LD_ADDR_OWVAR 33
66634: PUSH
66635: LD_STRING 
66637: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
66638: LD_ADDR_OWVAR 35
66642: PUSH
66643: LD_INT 7
66645: NEG
66646: PPUSH
66647: LD_INT 7
66649: PPUSH
66650: CALL_OW 12
66654: ST_TO_ADDR
// animal := CreateHuman ;
66655: LD_ADDR_VAR 0 12
66659: PUSH
66660: CALL_OW 44
66664: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66665: LD_VAR 0 12
66669: PPUSH
66670: LD_VAR 0 8
66674: PPUSH
66675: LD_INT 0
66677: PPUSH
66678: CALL 68584 0 3
// end ;
66682: GO 66619
66684: POP
66685: POP
// if apemans then
66686: LD_VAR 0 3
66690: IFFALSE 66813
// for i = 1 to apemans do
66692: LD_ADDR_VAR 0 11
66696: PUSH
66697: DOUBLE
66698: LD_INT 1
66700: DEC
66701: ST_TO_ADDR
66702: LD_VAR 0 3
66706: PUSH
66707: FOR_TO
66708: IFFALSE 66811
// begin hc_class = class_apeman ;
66710: LD_ADDR_OWVAR 28
66714: PUSH
66715: LD_INT 12
66717: ST_TO_ADDR
// hc_gallery =  ;
66718: LD_ADDR_OWVAR 33
66722: PUSH
66723: LD_STRING 
66725: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
66726: LD_ADDR_OWVAR 35
66730: PUSH
66731: LD_INT 2
66733: NEG
66734: PPUSH
66735: LD_INT 2
66737: PPUSH
66738: CALL_OW 12
66742: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
66743: LD_ADDR_OWVAR 31
66747: PUSH
66748: LD_INT 1
66750: PPUSH
66751: LD_INT 3
66753: PPUSH
66754: CALL_OW 12
66758: PUSH
66759: LD_INT 1
66761: PPUSH
66762: LD_INT 3
66764: PPUSH
66765: CALL_OW 12
66769: PUSH
66770: LD_INT 0
66772: PUSH
66773: LD_INT 0
66775: PUSH
66776: EMPTY
66777: LIST
66778: LIST
66779: LIST
66780: LIST
66781: ST_TO_ADDR
// animal := CreateHuman ;
66782: LD_ADDR_VAR 0 12
66786: PUSH
66787: CALL_OW 44
66791: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66792: LD_VAR 0 12
66796: PPUSH
66797: LD_VAR 0 8
66801: PPUSH
66802: LD_INT 0
66804: PPUSH
66805: CALL 68584 0 3
// end ;
66809: GO 66707
66811: POP
66812: POP
// if enchidnas then
66813: LD_VAR 0 4
66817: IFFALSE 66884
// for i = 1 to enchidnas do
66819: LD_ADDR_VAR 0 11
66823: PUSH
66824: DOUBLE
66825: LD_INT 1
66827: DEC
66828: ST_TO_ADDR
66829: LD_VAR 0 4
66833: PUSH
66834: FOR_TO
66835: IFFALSE 66882
// begin hc_class = 13 ;
66837: LD_ADDR_OWVAR 28
66841: PUSH
66842: LD_INT 13
66844: ST_TO_ADDR
// hc_gallery =  ;
66845: LD_ADDR_OWVAR 33
66849: PUSH
66850: LD_STRING 
66852: ST_TO_ADDR
// animal := CreateHuman ;
66853: LD_ADDR_VAR 0 12
66857: PUSH
66858: CALL_OW 44
66862: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66863: LD_VAR 0 12
66867: PPUSH
66868: LD_VAR 0 8
66872: PPUSH
66873: LD_INT 0
66875: PPUSH
66876: CALL 68584 0 3
// end ;
66880: GO 66834
66882: POP
66883: POP
// if fishes then
66884: LD_VAR 0 7
66888: IFFALSE 66955
// for i = 1 to fishes do
66890: LD_ADDR_VAR 0 11
66894: PUSH
66895: DOUBLE
66896: LD_INT 1
66898: DEC
66899: ST_TO_ADDR
66900: LD_VAR 0 7
66904: PUSH
66905: FOR_TO
66906: IFFALSE 66953
// begin hc_class = 20 ;
66908: LD_ADDR_OWVAR 28
66912: PUSH
66913: LD_INT 20
66915: ST_TO_ADDR
// hc_gallery =  ;
66916: LD_ADDR_OWVAR 33
66920: PUSH
66921: LD_STRING 
66923: ST_TO_ADDR
// animal := CreateHuman ;
66924: LD_ADDR_VAR 0 12
66928: PUSH
66929: CALL_OW 44
66933: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
66934: LD_VAR 0 12
66938: PPUSH
66939: LD_VAR 0 9
66943: PPUSH
66944: LD_INT 0
66946: PPUSH
66947: CALL 68584 0 3
// end ;
66951: GO 66905
66953: POP
66954: POP
// end ;
66955: LD_VAR 0 10
66959: RET
// export function WantHeal ( sci , unit ) ; begin
66960: LD_INT 0
66962: PPUSH
// if GetTaskList ( sci ) > 0 then
66963: LD_VAR 0 1
66967: PPUSH
66968: CALL_OW 437
66972: PUSH
66973: LD_INT 0
66975: GREATER
66976: IFFALSE 67046
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
66978: LD_VAR 0 1
66982: PPUSH
66983: CALL_OW 437
66987: PUSH
66988: LD_INT 1
66990: ARRAY
66991: PUSH
66992: LD_INT 1
66994: ARRAY
66995: PUSH
66996: LD_STRING l
66998: EQUAL
66999: PUSH
67000: LD_VAR 0 1
67004: PPUSH
67005: CALL_OW 437
67009: PUSH
67010: LD_INT 1
67012: ARRAY
67013: PUSH
67014: LD_INT 4
67016: ARRAY
67017: PUSH
67018: LD_VAR 0 2
67022: EQUAL
67023: AND
67024: IFFALSE 67036
// result := true else
67026: LD_ADDR_VAR 0 3
67030: PUSH
67031: LD_INT 1
67033: ST_TO_ADDR
67034: GO 67044
// result := false ;
67036: LD_ADDR_VAR 0 3
67040: PUSH
67041: LD_INT 0
67043: ST_TO_ADDR
// end else
67044: GO 67054
// result := false ;
67046: LD_ADDR_VAR 0 3
67050: PUSH
67051: LD_INT 0
67053: ST_TO_ADDR
// end ;
67054: LD_VAR 0 3
67058: RET
// export function HealTarget ( sci ) ; begin
67059: LD_INT 0
67061: PPUSH
// if not sci then
67062: LD_VAR 0 1
67066: NOT
67067: IFFALSE 67071
// exit ;
67069: GO 67136
// result := 0 ;
67071: LD_ADDR_VAR 0 2
67075: PUSH
67076: LD_INT 0
67078: ST_TO_ADDR
// if GetTaskList ( sci ) then
67079: LD_VAR 0 1
67083: PPUSH
67084: CALL_OW 437
67088: IFFALSE 67136
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
67090: LD_VAR 0 1
67094: PPUSH
67095: CALL_OW 437
67099: PUSH
67100: LD_INT 1
67102: ARRAY
67103: PUSH
67104: LD_INT 1
67106: ARRAY
67107: PUSH
67108: LD_STRING l
67110: EQUAL
67111: IFFALSE 67136
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
67113: LD_ADDR_VAR 0 2
67117: PUSH
67118: LD_VAR 0 1
67122: PPUSH
67123: CALL_OW 437
67127: PUSH
67128: LD_INT 1
67130: ARRAY
67131: PUSH
67132: LD_INT 4
67134: ARRAY
67135: ST_TO_ADDR
// end ;
67136: LD_VAR 0 2
67140: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
67141: LD_INT 0
67143: PPUSH
67144: PPUSH
67145: PPUSH
67146: PPUSH
// if not base_units then
67147: LD_VAR 0 1
67151: NOT
67152: IFFALSE 67156
// exit ;
67154: GO 67243
// result := false ;
67156: LD_ADDR_VAR 0 2
67160: PUSH
67161: LD_INT 0
67163: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
67164: LD_ADDR_VAR 0 5
67168: PUSH
67169: LD_VAR 0 1
67173: PPUSH
67174: LD_INT 21
67176: PUSH
67177: LD_INT 3
67179: PUSH
67180: EMPTY
67181: LIST
67182: LIST
67183: PPUSH
67184: CALL_OW 72
67188: ST_TO_ADDR
// if not tmp then
67189: LD_VAR 0 5
67193: NOT
67194: IFFALSE 67198
// exit ;
67196: GO 67243
// for i in tmp do
67198: LD_ADDR_VAR 0 3
67202: PUSH
67203: LD_VAR 0 5
67207: PUSH
67208: FOR_IN
67209: IFFALSE 67241
// begin result := EnemyInRange ( i , 22 ) ;
67211: LD_ADDR_VAR 0 2
67215: PUSH
67216: LD_VAR 0 3
67220: PPUSH
67221: LD_INT 22
67223: PPUSH
67224: CALL 64830 0 2
67228: ST_TO_ADDR
// if result then
67229: LD_VAR 0 2
67233: IFFALSE 67239
// exit ;
67235: POP
67236: POP
67237: GO 67243
// end ;
67239: GO 67208
67241: POP
67242: POP
// end ;
67243: LD_VAR 0 2
67247: RET
// export function FilterByTag ( units , tag ) ; begin
67248: LD_INT 0
67250: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
67251: LD_ADDR_VAR 0 3
67255: PUSH
67256: LD_VAR 0 1
67260: PPUSH
67261: LD_INT 120
67263: PUSH
67264: LD_VAR 0 2
67268: PUSH
67269: EMPTY
67270: LIST
67271: LIST
67272: PPUSH
67273: CALL_OW 72
67277: ST_TO_ADDR
// end ;
67278: LD_VAR 0 3
67282: RET
// export function IsDriver ( un ) ; begin
67283: LD_INT 0
67285: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
67286: LD_ADDR_VAR 0 2
67290: PUSH
67291: LD_VAR 0 1
67295: PUSH
67296: LD_INT 55
67298: PUSH
67299: EMPTY
67300: LIST
67301: PPUSH
67302: CALL_OW 69
67306: IN
67307: ST_TO_ADDR
// end ;
67308: LD_VAR 0 2
67312: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
67313: LD_INT 0
67315: PPUSH
67316: PPUSH
// list := [ ] ;
67317: LD_ADDR_VAR 0 5
67321: PUSH
67322: EMPTY
67323: ST_TO_ADDR
// case d of 0 :
67324: LD_VAR 0 3
67328: PUSH
67329: LD_INT 0
67331: DOUBLE
67332: EQUAL
67333: IFTRUE 67337
67335: GO 67470
67337: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
67338: LD_ADDR_VAR 0 5
67342: PUSH
67343: LD_VAR 0 1
67347: PUSH
67348: LD_INT 4
67350: MINUS
67351: PUSH
67352: LD_VAR 0 2
67356: PUSH
67357: LD_INT 4
67359: MINUS
67360: PUSH
67361: LD_INT 2
67363: PUSH
67364: EMPTY
67365: LIST
67366: LIST
67367: LIST
67368: PUSH
67369: LD_VAR 0 1
67373: PUSH
67374: LD_INT 3
67376: MINUS
67377: PUSH
67378: LD_VAR 0 2
67382: PUSH
67383: LD_INT 1
67385: PUSH
67386: EMPTY
67387: LIST
67388: LIST
67389: LIST
67390: PUSH
67391: LD_VAR 0 1
67395: PUSH
67396: LD_INT 4
67398: PLUS
67399: PUSH
67400: LD_VAR 0 2
67404: PUSH
67405: LD_INT 4
67407: PUSH
67408: EMPTY
67409: LIST
67410: LIST
67411: LIST
67412: PUSH
67413: LD_VAR 0 1
67417: PUSH
67418: LD_INT 3
67420: PLUS
67421: PUSH
67422: LD_VAR 0 2
67426: PUSH
67427: LD_INT 3
67429: PLUS
67430: PUSH
67431: LD_INT 5
67433: PUSH
67434: EMPTY
67435: LIST
67436: LIST
67437: LIST
67438: PUSH
67439: LD_VAR 0 1
67443: PUSH
67444: LD_VAR 0 2
67448: PUSH
67449: LD_INT 4
67451: PLUS
67452: PUSH
67453: LD_INT 0
67455: PUSH
67456: EMPTY
67457: LIST
67458: LIST
67459: LIST
67460: PUSH
67461: EMPTY
67462: LIST
67463: LIST
67464: LIST
67465: LIST
67466: LIST
67467: ST_TO_ADDR
// end ; 1 :
67468: GO 68168
67470: LD_INT 1
67472: DOUBLE
67473: EQUAL
67474: IFTRUE 67478
67476: GO 67611
67478: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
67479: LD_ADDR_VAR 0 5
67483: PUSH
67484: LD_VAR 0 1
67488: PUSH
67489: LD_VAR 0 2
67493: PUSH
67494: LD_INT 4
67496: MINUS
67497: PUSH
67498: LD_INT 3
67500: PUSH
67501: EMPTY
67502: LIST
67503: LIST
67504: LIST
67505: PUSH
67506: LD_VAR 0 1
67510: PUSH
67511: LD_INT 3
67513: MINUS
67514: PUSH
67515: LD_VAR 0 2
67519: PUSH
67520: LD_INT 3
67522: MINUS
67523: PUSH
67524: LD_INT 2
67526: PUSH
67527: EMPTY
67528: LIST
67529: LIST
67530: LIST
67531: PUSH
67532: LD_VAR 0 1
67536: PUSH
67537: LD_INT 4
67539: MINUS
67540: PUSH
67541: LD_VAR 0 2
67545: PUSH
67546: LD_INT 1
67548: PUSH
67549: EMPTY
67550: LIST
67551: LIST
67552: LIST
67553: PUSH
67554: LD_VAR 0 1
67558: PUSH
67559: LD_VAR 0 2
67563: PUSH
67564: LD_INT 3
67566: PLUS
67567: PUSH
67568: LD_INT 0
67570: PUSH
67571: EMPTY
67572: LIST
67573: LIST
67574: LIST
67575: PUSH
67576: LD_VAR 0 1
67580: PUSH
67581: LD_INT 4
67583: PLUS
67584: PUSH
67585: LD_VAR 0 2
67589: PUSH
67590: LD_INT 4
67592: PLUS
67593: PUSH
67594: LD_INT 5
67596: PUSH
67597: EMPTY
67598: LIST
67599: LIST
67600: LIST
67601: PUSH
67602: EMPTY
67603: LIST
67604: LIST
67605: LIST
67606: LIST
67607: LIST
67608: ST_TO_ADDR
// end ; 2 :
67609: GO 68168
67611: LD_INT 2
67613: DOUBLE
67614: EQUAL
67615: IFTRUE 67619
67617: GO 67748
67619: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
67620: LD_ADDR_VAR 0 5
67624: PUSH
67625: LD_VAR 0 1
67629: PUSH
67630: LD_VAR 0 2
67634: PUSH
67635: LD_INT 3
67637: MINUS
67638: PUSH
67639: LD_INT 3
67641: PUSH
67642: EMPTY
67643: LIST
67644: LIST
67645: LIST
67646: PUSH
67647: LD_VAR 0 1
67651: PUSH
67652: LD_INT 4
67654: PLUS
67655: PUSH
67656: LD_VAR 0 2
67660: PUSH
67661: LD_INT 4
67663: PUSH
67664: EMPTY
67665: LIST
67666: LIST
67667: LIST
67668: PUSH
67669: LD_VAR 0 1
67673: PUSH
67674: LD_VAR 0 2
67678: PUSH
67679: LD_INT 4
67681: PLUS
67682: PUSH
67683: LD_INT 0
67685: PUSH
67686: EMPTY
67687: LIST
67688: LIST
67689: LIST
67690: PUSH
67691: LD_VAR 0 1
67695: PUSH
67696: LD_INT 3
67698: MINUS
67699: PUSH
67700: LD_VAR 0 2
67704: PUSH
67705: LD_INT 1
67707: PUSH
67708: EMPTY
67709: LIST
67710: LIST
67711: LIST
67712: PUSH
67713: LD_VAR 0 1
67717: PUSH
67718: LD_INT 4
67720: MINUS
67721: PUSH
67722: LD_VAR 0 2
67726: PUSH
67727: LD_INT 4
67729: MINUS
67730: PUSH
67731: LD_INT 2
67733: PUSH
67734: EMPTY
67735: LIST
67736: LIST
67737: LIST
67738: PUSH
67739: EMPTY
67740: LIST
67741: LIST
67742: LIST
67743: LIST
67744: LIST
67745: ST_TO_ADDR
// end ; 3 :
67746: GO 68168
67748: LD_INT 3
67750: DOUBLE
67751: EQUAL
67752: IFTRUE 67756
67754: GO 67889
67756: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
67757: LD_ADDR_VAR 0 5
67761: PUSH
67762: LD_VAR 0 1
67766: PUSH
67767: LD_INT 3
67769: PLUS
67770: PUSH
67771: LD_VAR 0 2
67775: PUSH
67776: LD_INT 4
67778: PUSH
67779: EMPTY
67780: LIST
67781: LIST
67782: LIST
67783: PUSH
67784: LD_VAR 0 1
67788: PUSH
67789: LD_INT 4
67791: PLUS
67792: PUSH
67793: LD_VAR 0 2
67797: PUSH
67798: LD_INT 4
67800: PLUS
67801: PUSH
67802: LD_INT 5
67804: PUSH
67805: EMPTY
67806: LIST
67807: LIST
67808: LIST
67809: PUSH
67810: LD_VAR 0 1
67814: PUSH
67815: LD_INT 4
67817: MINUS
67818: PUSH
67819: LD_VAR 0 2
67823: PUSH
67824: LD_INT 1
67826: PUSH
67827: EMPTY
67828: LIST
67829: LIST
67830: LIST
67831: PUSH
67832: LD_VAR 0 1
67836: PUSH
67837: LD_VAR 0 2
67841: PUSH
67842: LD_INT 4
67844: MINUS
67845: PUSH
67846: LD_INT 3
67848: PUSH
67849: EMPTY
67850: LIST
67851: LIST
67852: LIST
67853: PUSH
67854: LD_VAR 0 1
67858: PUSH
67859: LD_INT 3
67861: MINUS
67862: PUSH
67863: LD_VAR 0 2
67867: PUSH
67868: LD_INT 3
67870: MINUS
67871: PUSH
67872: LD_INT 2
67874: PUSH
67875: EMPTY
67876: LIST
67877: LIST
67878: LIST
67879: PUSH
67880: EMPTY
67881: LIST
67882: LIST
67883: LIST
67884: LIST
67885: LIST
67886: ST_TO_ADDR
// end ; 4 :
67887: GO 68168
67889: LD_INT 4
67891: DOUBLE
67892: EQUAL
67893: IFTRUE 67897
67895: GO 68030
67897: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
67898: LD_ADDR_VAR 0 5
67902: PUSH
67903: LD_VAR 0 1
67907: PUSH
67908: LD_VAR 0 2
67912: PUSH
67913: LD_INT 4
67915: PLUS
67916: PUSH
67917: LD_INT 0
67919: PUSH
67920: EMPTY
67921: LIST
67922: LIST
67923: LIST
67924: PUSH
67925: LD_VAR 0 1
67929: PUSH
67930: LD_INT 3
67932: PLUS
67933: PUSH
67934: LD_VAR 0 2
67938: PUSH
67939: LD_INT 3
67941: PLUS
67942: PUSH
67943: LD_INT 5
67945: PUSH
67946: EMPTY
67947: LIST
67948: LIST
67949: LIST
67950: PUSH
67951: LD_VAR 0 1
67955: PUSH
67956: LD_INT 4
67958: PLUS
67959: PUSH
67960: LD_VAR 0 2
67964: PUSH
67965: LD_INT 4
67967: PUSH
67968: EMPTY
67969: LIST
67970: LIST
67971: LIST
67972: PUSH
67973: LD_VAR 0 1
67977: PUSH
67978: LD_VAR 0 2
67982: PUSH
67983: LD_INT 3
67985: MINUS
67986: PUSH
67987: LD_INT 3
67989: PUSH
67990: EMPTY
67991: LIST
67992: LIST
67993: LIST
67994: PUSH
67995: LD_VAR 0 1
67999: PUSH
68000: LD_INT 4
68002: MINUS
68003: PUSH
68004: LD_VAR 0 2
68008: PUSH
68009: LD_INT 4
68011: MINUS
68012: PUSH
68013: LD_INT 2
68015: PUSH
68016: EMPTY
68017: LIST
68018: LIST
68019: LIST
68020: PUSH
68021: EMPTY
68022: LIST
68023: LIST
68024: LIST
68025: LIST
68026: LIST
68027: ST_TO_ADDR
// end ; 5 :
68028: GO 68168
68030: LD_INT 5
68032: DOUBLE
68033: EQUAL
68034: IFTRUE 68038
68036: GO 68167
68038: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
68039: LD_ADDR_VAR 0 5
68043: PUSH
68044: LD_VAR 0 1
68048: PUSH
68049: LD_INT 4
68051: MINUS
68052: PUSH
68053: LD_VAR 0 2
68057: PUSH
68058: LD_INT 1
68060: PUSH
68061: EMPTY
68062: LIST
68063: LIST
68064: LIST
68065: PUSH
68066: LD_VAR 0 1
68070: PUSH
68071: LD_VAR 0 2
68075: PUSH
68076: LD_INT 4
68078: MINUS
68079: PUSH
68080: LD_INT 3
68082: PUSH
68083: EMPTY
68084: LIST
68085: LIST
68086: LIST
68087: PUSH
68088: LD_VAR 0 1
68092: PUSH
68093: LD_INT 4
68095: PLUS
68096: PUSH
68097: LD_VAR 0 2
68101: PUSH
68102: LD_INT 4
68104: PLUS
68105: PUSH
68106: LD_INT 5
68108: PUSH
68109: EMPTY
68110: LIST
68111: LIST
68112: LIST
68113: PUSH
68114: LD_VAR 0 1
68118: PUSH
68119: LD_INT 3
68121: PLUS
68122: PUSH
68123: LD_VAR 0 2
68127: PUSH
68128: LD_INT 4
68130: PUSH
68131: EMPTY
68132: LIST
68133: LIST
68134: LIST
68135: PUSH
68136: LD_VAR 0 1
68140: PUSH
68141: LD_VAR 0 2
68145: PUSH
68146: LD_INT 3
68148: PLUS
68149: PUSH
68150: LD_INT 0
68152: PUSH
68153: EMPTY
68154: LIST
68155: LIST
68156: LIST
68157: PUSH
68158: EMPTY
68159: LIST
68160: LIST
68161: LIST
68162: LIST
68163: LIST
68164: ST_TO_ADDR
// end ; end ;
68165: GO 68168
68167: POP
// result := list ;
68168: LD_ADDR_VAR 0 4
68172: PUSH
68173: LD_VAR 0 5
68177: ST_TO_ADDR
// end ;
68178: LD_VAR 0 4
68182: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
68183: LD_INT 0
68185: PPUSH
68186: PPUSH
68187: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
68188: LD_VAR 0 1
68192: NOT
68193: PUSH
68194: LD_VAR 0 2
68198: PUSH
68199: LD_INT 1
68201: PUSH
68202: LD_INT 2
68204: PUSH
68205: LD_INT 3
68207: PUSH
68208: LD_INT 4
68210: PUSH
68211: EMPTY
68212: LIST
68213: LIST
68214: LIST
68215: LIST
68216: IN
68217: NOT
68218: OR
68219: IFFALSE 68223
// exit ;
68221: GO 68306
// tmp := [ ] ;
68223: LD_ADDR_VAR 0 5
68227: PUSH
68228: EMPTY
68229: ST_TO_ADDR
// for i in units do
68230: LD_ADDR_VAR 0 4
68234: PUSH
68235: LD_VAR 0 1
68239: PUSH
68240: FOR_IN
68241: IFFALSE 68275
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
68243: LD_ADDR_VAR 0 5
68247: PUSH
68248: LD_VAR 0 5
68252: PPUSH
68253: LD_VAR 0 4
68257: PPUSH
68258: LD_VAR 0 2
68262: PPUSH
68263: CALL_OW 259
68267: PPUSH
68268: CALL 69666 0 2
68272: ST_TO_ADDR
68273: GO 68240
68275: POP
68276: POP
// if not tmp then
68277: LD_VAR 0 5
68281: NOT
68282: IFFALSE 68286
// exit ;
68284: GO 68306
// result := SortListByListDesc ( units , tmp ) ;
68286: LD_ADDR_VAR 0 3
68290: PUSH
68291: LD_VAR 0 1
68295: PPUSH
68296: LD_VAR 0 5
68300: PPUSH
68301: CALL_OW 77
68305: ST_TO_ADDR
// end ;
68306: LD_VAR 0 3
68310: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
68311: LD_INT 0
68313: PPUSH
68314: PPUSH
68315: PPUSH
// result := false ;
68316: LD_ADDR_VAR 0 3
68320: PUSH
68321: LD_INT 0
68323: ST_TO_ADDR
// if not building then
68324: LD_VAR 0 2
68328: NOT
68329: IFFALSE 68333
// exit ;
68331: GO 68471
// x := GetX ( building ) ;
68333: LD_ADDR_VAR 0 4
68337: PUSH
68338: LD_VAR 0 2
68342: PPUSH
68343: CALL_OW 250
68347: ST_TO_ADDR
// y := GetY ( building ) ;
68348: LD_ADDR_VAR 0 5
68352: PUSH
68353: LD_VAR 0 2
68357: PPUSH
68358: CALL_OW 251
68362: ST_TO_ADDR
// if not x or not y then
68363: LD_VAR 0 4
68367: NOT
68368: PUSH
68369: LD_VAR 0 5
68373: NOT
68374: OR
68375: IFFALSE 68379
// exit ;
68377: GO 68471
// if GetTaskList ( unit ) then
68379: LD_VAR 0 1
68383: PPUSH
68384: CALL_OW 437
68388: IFFALSE 68471
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68390: LD_STRING e
68392: PUSH
68393: LD_VAR 0 1
68397: PPUSH
68398: CALL_OW 437
68402: PUSH
68403: LD_INT 1
68405: ARRAY
68406: PUSH
68407: LD_INT 1
68409: ARRAY
68410: EQUAL
68411: PUSH
68412: LD_VAR 0 4
68416: PUSH
68417: LD_VAR 0 1
68421: PPUSH
68422: CALL_OW 437
68426: PUSH
68427: LD_INT 1
68429: ARRAY
68430: PUSH
68431: LD_INT 2
68433: ARRAY
68434: EQUAL
68435: AND
68436: PUSH
68437: LD_VAR 0 5
68441: PUSH
68442: LD_VAR 0 1
68446: PPUSH
68447: CALL_OW 437
68451: PUSH
68452: LD_INT 1
68454: ARRAY
68455: PUSH
68456: LD_INT 3
68458: ARRAY
68459: EQUAL
68460: AND
68461: IFFALSE 68471
// result := true end ;
68463: LD_ADDR_VAR 0 3
68467: PUSH
68468: LD_INT 1
68470: ST_TO_ADDR
// end ;
68471: LD_VAR 0 3
68475: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
68476: LD_INT 0
68478: PPUSH
// result := false ;
68479: LD_ADDR_VAR 0 4
68483: PUSH
68484: LD_INT 0
68486: ST_TO_ADDR
// if GetTaskList ( unit ) then
68487: LD_VAR 0 1
68491: PPUSH
68492: CALL_OW 437
68496: IFFALSE 68579
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68498: LD_STRING M
68500: PUSH
68501: LD_VAR 0 1
68505: PPUSH
68506: CALL_OW 437
68510: PUSH
68511: LD_INT 1
68513: ARRAY
68514: PUSH
68515: LD_INT 1
68517: ARRAY
68518: EQUAL
68519: PUSH
68520: LD_VAR 0 2
68524: PUSH
68525: LD_VAR 0 1
68529: PPUSH
68530: CALL_OW 437
68534: PUSH
68535: LD_INT 1
68537: ARRAY
68538: PUSH
68539: LD_INT 2
68541: ARRAY
68542: EQUAL
68543: AND
68544: PUSH
68545: LD_VAR 0 3
68549: PUSH
68550: LD_VAR 0 1
68554: PPUSH
68555: CALL_OW 437
68559: PUSH
68560: LD_INT 1
68562: ARRAY
68563: PUSH
68564: LD_INT 3
68566: ARRAY
68567: EQUAL
68568: AND
68569: IFFALSE 68579
// result := true ;
68571: LD_ADDR_VAR 0 4
68575: PUSH
68576: LD_INT 1
68578: ST_TO_ADDR
// end ; end ;
68579: LD_VAR 0 4
68583: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
68584: LD_INT 0
68586: PPUSH
68587: PPUSH
68588: PPUSH
68589: PPUSH
// if not unit or not area then
68590: LD_VAR 0 1
68594: NOT
68595: PUSH
68596: LD_VAR 0 2
68600: NOT
68601: OR
68602: IFFALSE 68606
// exit ;
68604: GO 68769
// tmp := AreaToList ( area , i ) ;
68606: LD_ADDR_VAR 0 6
68610: PUSH
68611: LD_VAR 0 2
68615: PPUSH
68616: LD_VAR 0 5
68620: PPUSH
68621: CALL_OW 517
68625: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
68626: LD_ADDR_VAR 0 5
68630: PUSH
68631: DOUBLE
68632: LD_INT 1
68634: DEC
68635: ST_TO_ADDR
68636: LD_VAR 0 6
68640: PUSH
68641: LD_INT 1
68643: ARRAY
68644: PUSH
68645: FOR_TO
68646: IFFALSE 68767
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
68648: LD_ADDR_VAR 0 7
68652: PUSH
68653: LD_VAR 0 6
68657: PUSH
68658: LD_INT 1
68660: ARRAY
68661: PUSH
68662: LD_VAR 0 5
68666: ARRAY
68667: PUSH
68668: LD_VAR 0 6
68672: PUSH
68673: LD_INT 2
68675: ARRAY
68676: PUSH
68677: LD_VAR 0 5
68681: ARRAY
68682: PUSH
68683: EMPTY
68684: LIST
68685: LIST
68686: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
68687: LD_INT 92
68689: PUSH
68690: LD_VAR 0 7
68694: PUSH
68695: LD_INT 1
68697: ARRAY
68698: PUSH
68699: LD_VAR 0 7
68703: PUSH
68704: LD_INT 2
68706: ARRAY
68707: PUSH
68708: LD_INT 3
68710: PUSH
68711: EMPTY
68712: LIST
68713: LIST
68714: LIST
68715: LIST
68716: PPUSH
68717: CALL_OW 69
68721: PUSH
68722: LD_INT 0
68724: EQUAL
68725: IFFALSE 68765
// begin PlaceUnitArea ( unit , area , mode ) ;
68727: LD_VAR 0 1
68731: PPUSH
68732: LD_VAR 0 2
68736: PPUSH
68737: LD_VAR 0 3
68741: PPUSH
68742: CALL_OW 49
// result := IsPlaced ( unit ) ;
68746: LD_ADDR_VAR 0 4
68750: PUSH
68751: LD_VAR 0 1
68755: PPUSH
68756: CALL_OW 305
68760: ST_TO_ADDR
// exit ;
68761: POP
68762: POP
68763: GO 68769
// end ; end ;
68765: GO 68645
68767: POP
68768: POP
// end ;
68769: LD_VAR 0 4
68773: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
68774: LD_INT 0
68776: PPUSH
68777: PPUSH
68778: PPUSH
// if not side or side > 8 then
68779: LD_VAR 0 1
68783: NOT
68784: PUSH
68785: LD_VAR 0 1
68789: PUSH
68790: LD_INT 8
68792: GREATER
68793: OR
68794: IFFALSE 68798
// exit ;
68796: GO 68985
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
68798: LD_ADDR_VAR 0 4
68802: PUSH
68803: LD_INT 22
68805: PUSH
68806: LD_VAR 0 1
68810: PUSH
68811: EMPTY
68812: LIST
68813: LIST
68814: PUSH
68815: LD_INT 21
68817: PUSH
68818: LD_INT 3
68820: PUSH
68821: EMPTY
68822: LIST
68823: LIST
68824: PUSH
68825: EMPTY
68826: LIST
68827: LIST
68828: PPUSH
68829: CALL_OW 69
68833: ST_TO_ADDR
// if not tmp then
68834: LD_VAR 0 4
68838: NOT
68839: IFFALSE 68843
// exit ;
68841: GO 68985
// enable_addtolog := true ;
68843: LD_ADDR_OWVAR 81
68847: PUSH
68848: LD_INT 1
68850: ST_TO_ADDR
// AddToLog ( [ ) ;
68851: LD_STRING [
68853: PPUSH
68854: CALL_OW 561
// for i in tmp do
68858: LD_ADDR_VAR 0 3
68862: PUSH
68863: LD_VAR 0 4
68867: PUSH
68868: FOR_IN
68869: IFFALSE 68976
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
68871: LD_STRING [
68873: PUSH
68874: LD_VAR 0 3
68878: PPUSH
68879: CALL_OW 266
68883: STR
68884: PUSH
68885: LD_STRING , 
68887: STR
68888: PUSH
68889: LD_VAR 0 3
68893: PPUSH
68894: CALL_OW 250
68898: STR
68899: PUSH
68900: LD_STRING , 
68902: STR
68903: PUSH
68904: LD_VAR 0 3
68908: PPUSH
68909: CALL_OW 251
68913: STR
68914: PUSH
68915: LD_STRING , 
68917: STR
68918: PUSH
68919: LD_VAR 0 3
68923: PPUSH
68924: CALL_OW 254
68928: STR
68929: PUSH
68930: LD_STRING , 
68932: STR
68933: PUSH
68934: LD_VAR 0 3
68938: PPUSH
68939: LD_INT 1
68941: PPUSH
68942: CALL_OW 268
68946: STR
68947: PUSH
68948: LD_STRING , 
68950: STR
68951: PUSH
68952: LD_VAR 0 3
68956: PPUSH
68957: LD_INT 2
68959: PPUSH
68960: CALL_OW 268
68964: STR
68965: PUSH
68966: LD_STRING ],
68968: STR
68969: PPUSH
68970: CALL_OW 561
// end ;
68974: GO 68868
68976: POP
68977: POP
// AddToLog ( ]; ) ;
68978: LD_STRING ];
68980: PPUSH
68981: CALL_OW 561
// end ;
68985: LD_VAR 0 2
68989: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
68990: LD_INT 0
68992: PPUSH
68993: PPUSH
68994: PPUSH
68995: PPUSH
68996: PPUSH
// if not area or not rate or not max then
68997: LD_VAR 0 1
69001: NOT
69002: PUSH
69003: LD_VAR 0 2
69007: NOT
69008: OR
69009: PUSH
69010: LD_VAR 0 4
69014: NOT
69015: OR
69016: IFFALSE 69020
// exit ;
69018: GO 69209
// while 1 do
69020: LD_INT 1
69022: IFFALSE 69209
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
69024: LD_ADDR_VAR 0 9
69028: PUSH
69029: LD_VAR 0 1
69033: PPUSH
69034: LD_INT 1
69036: PPUSH
69037: CALL_OW 287
69041: PUSH
69042: LD_INT 10
69044: MUL
69045: ST_TO_ADDR
// r := rate / 10 ;
69046: LD_ADDR_VAR 0 7
69050: PUSH
69051: LD_VAR 0 2
69055: PUSH
69056: LD_INT 10
69058: DIVREAL
69059: ST_TO_ADDR
// time := 1 1$00 ;
69060: LD_ADDR_VAR 0 8
69064: PUSH
69065: LD_INT 2100
69067: ST_TO_ADDR
// if amount < min then
69068: LD_VAR 0 9
69072: PUSH
69073: LD_VAR 0 3
69077: LESS
69078: IFFALSE 69096
// r := r * 2 else
69080: LD_ADDR_VAR 0 7
69084: PUSH
69085: LD_VAR 0 7
69089: PUSH
69090: LD_INT 2
69092: MUL
69093: ST_TO_ADDR
69094: GO 69122
// if amount > max then
69096: LD_VAR 0 9
69100: PUSH
69101: LD_VAR 0 4
69105: GREATER
69106: IFFALSE 69122
// r := r / 2 ;
69108: LD_ADDR_VAR 0 7
69112: PUSH
69113: LD_VAR 0 7
69117: PUSH
69118: LD_INT 2
69120: DIVREAL
69121: ST_TO_ADDR
// time := time / r ;
69122: LD_ADDR_VAR 0 8
69126: PUSH
69127: LD_VAR 0 8
69131: PUSH
69132: LD_VAR 0 7
69136: DIVREAL
69137: ST_TO_ADDR
// if time < 0 then
69138: LD_VAR 0 8
69142: PUSH
69143: LD_INT 0
69145: LESS
69146: IFFALSE 69163
// time := time * - 1 ;
69148: LD_ADDR_VAR 0 8
69152: PUSH
69153: LD_VAR 0 8
69157: PUSH
69158: LD_INT 1
69160: NEG
69161: MUL
69162: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
69163: LD_VAR 0 8
69167: PUSH
69168: LD_INT 35
69170: PPUSH
69171: LD_INT 875
69173: PPUSH
69174: CALL_OW 12
69178: PLUS
69179: PPUSH
69180: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
69184: LD_INT 1
69186: PPUSH
69187: LD_INT 5
69189: PPUSH
69190: CALL_OW 12
69194: PPUSH
69195: LD_VAR 0 1
69199: PPUSH
69200: LD_INT 1
69202: PPUSH
69203: CALL_OW 55
// end ;
69207: GO 69020
// end ;
69209: LD_VAR 0 5
69213: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
69214: LD_INT 0
69216: PPUSH
69217: PPUSH
69218: PPUSH
69219: PPUSH
69220: PPUSH
69221: PPUSH
69222: PPUSH
69223: PPUSH
// if not turrets or not factories then
69224: LD_VAR 0 1
69228: NOT
69229: PUSH
69230: LD_VAR 0 2
69234: NOT
69235: OR
69236: IFFALSE 69240
// exit ;
69238: GO 69547
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
69240: LD_ADDR_VAR 0 10
69244: PUSH
69245: LD_INT 5
69247: PUSH
69248: LD_INT 6
69250: PUSH
69251: EMPTY
69252: LIST
69253: LIST
69254: PUSH
69255: LD_INT 2
69257: PUSH
69258: LD_INT 4
69260: PUSH
69261: EMPTY
69262: LIST
69263: LIST
69264: PUSH
69265: LD_INT 3
69267: PUSH
69268: LD_INT 5
69270: PUSH
69271: EMPTY
69272: LIST
69273: LIST
69274: PUSH
69275: EMPTY
69276: LIST
69277: LIST
69278: LIST
69279: PUSH
69280: LD_INT 24
69282: PUSH
69283: LD_INT 25
69285: PUSH
69286: EMPTY
69287: LIST
69288: LIST
69289: PUSH
69290: LD_INT 23
69292: PUSH
69293: LD_INT 27
69295: PUSH
69296: EMPTY
69297: LIST
69298: LIST
69299: PUSH
69300: EMPTY
69301: LIST
69302: LIST
69303: PUSH
69304: LD_INT 42
69306: PUSH
69307: LD_INT 43
69309: PUSH
69310: EMPTY
69311: LIST
69312: LIST
69313: PUSH
69314: LD_INT 44
69316: PUSH
69317: LD_INT 46
69319: PUSH
69320: EMPTY
69321: LIST
69322: LIST
69323: PUSH
69324: LD_INT 45
69326: PUSH
69327: LD_INT 47
69329: PUSH
69330: EMPTY
69331: LIST
69332: LIST
69333: PUSH
69334: EMPTY
69335: LIST
69336: LIST
69337: LIST
69338: PUSH
69339: EMPTY
69340: LIST
69341: LIST
69342: LIST
69343: ST_TO_ADDR
// result := [ ] ;
69344: LD_ADDR_VAR 0 3
69348: PUSH
69349: EMPTY
69350: ST_TO_ADDR
// for i in turrets do
69351: LD_ADDR_VAR 0 4
69355: PUSH
69356: LD_VAR 0 1
69360: PUSH
69361: FOR_IN
69362: IFFALSE 69545
// begin nat := GetNation ( i ) ;
69364: LD_ADDR_VAR 0 7
69368: PUSH
69369: LD_VAR 0 4
69373: PPUSH
69374: CALL_OW 248
69378: ST_TO_ADDR
// weapon := 0 ;
69379: LD_ADDR_VAR 0 8
69383: PUSH
69384: LD_INT 0
69386: ST_TO_ADDR
// if not nat then
69387: LD_VAR 0 7
69391: NOT
69392: IFFALSE 69396
// continue ;
69394: GO 69361
// for j in list [ nat ] do
69396: LD_ADDR_VAR 0 5
69400: PUSH
69401: LD_VAR 0 10
69405: PUSH
69406: LD_VAR 0 7
69410: ARRAY
69411: PUSH
69412: FOR_IN
69413: IFFALSE 69454
// if GetBWeapon ( i ) = j [ 1 ] then
69415: LD_VAR 0 4
69419: PPUSH
69420: CALL_OW 269
69424: PUSH
69425: LD_VAR 0 5
69429: PUSH
69430: LD_INT 1
69432: ARRAY
69433: EQUAL
69434: IFFALSE 69452
// begin weapon := j [ 2 ] ;
69436: LD_ADDR_VAR 0 8
69440: PUSH
69441: LD_VAR 0 5
69445: PUSH
69446: LD_INT 2
69448: ARRAY
69449: ST_TO_ADDR
// break ;
69450: GO 69454
// end ;
69452: GO 69412
69454: POP
69455: POP
// if not weapon then
69456: LD_VAR 0 8
69460: NOT
69461: IFFALSE 69465
// continue ;
69463: GO 69361
// for k in factories do
69465: LD_ADDR_VAR 0 6
69469: PUSH
69470: LD_VAR 0 2
69474: PUSH
69475: FOR_IN
69476: IFFALSE 69541
// begin weapons := AvailableWeaponList ( k ) ;
69478: LD_ADDR_VAR 0 9
69482: PUSH
69483: LD_VAR 0 6
69487: PPUSH
69488: CALL_OW 478
69492: ST_TO_ADDR
// if not weapons then
69493: LD_VAR 0 9
69497: NOT
69498: IFFALSE 69502
// continue ;
69500: GO 69475
// if weapon in weapons then
69502: LD_VAR 0 8
69506: PUSH
69507: LD_VAR 0 9
69511: IN
69512: IFFALSE 69539
// begin result := [ i , weapon ] ;
69514: LD_ADDR_VAR 0 3
69518: PUSH
69519: LD_VAR 0 4
69523: PUSH
69524: LD_VAR 0 8
69528: PUSH
69529: EMPTY
69530: LIST
69531: LIST
69532: ST_TO_ADDR
// exit ;
69533: POP
69534: POP
69535: POP
69536: POP
69537: GO 69547
// end ; end ;
69539: GO 69475
69541: POP
69542: POP
// end ;
69543: GO 69361
69545: POP
69546: POP
// end ;
69547: LD_VAR 0 3
69551: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
69552: LD_INT 0
69554: PPUSH
// if not side or side > 8 then
69555: LD_VAR 0 3
69559: NOT
69560: PUSH
69561: LD_VAR 0 3
69565: PUSH
69566: LD_INT 8
69568: GREATER
69569: OR
69570: IFFALSE 69574
// exit ;
69572: GO 69633
// if not range then
69574: LD_VAR 0 4
69578: NOT
69579: IFFALSE 69590
// range := - 12 ;
69581: LD_ADDR_VAR 0 4
69585: PUSH
69586: LD_INT 12
69588: NEG
69589: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
69590: LD_VAR 0 1
69594: PPUSH
69595: LD_VAR 0 2
69599: PPUSH
69600: LD_VAR 0 3
69604: PPUSH
69605: LD_VAR 0 4
69609: PPUSH
69610: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
69614: LD_VAR 0 1
69618: PPUSH
69619: LD_VAR 0 2
69623: PPUSH
69624: LD_VAR 0 3
69628: PPUSH
69629: CALL_OW 331
// end ;
69633: LD_VAR 0 5
69637: RET
// export function Video ( mode ) ; begin
69638: LD_INT 0
69640: PPUSH
// ingame_video = mode ;
69641: LD_ADDR_OWVAR 52
69645: PUSH
69646: LD_VAR 0 1
69650: ST_TO_ADDR
// interface_hidden = mode ;
69651: LD_ADDR_OWVAR 54
69655: PUSH
69656: LD_VAR 0 1
69660: ST_TO_ADDR
// end ;
69661: LD_VAR 0 2
69665: RET
// export function Join ( array , element ) ; begin
69666: LD_INT 0
69668: PPUSH
// result := Replace ( array , array + 1 , element ) ;
69669: LD_ADDR_VAR 0 3
69673: PUSH
69674: LD_VAR 0 1
69678: PPUSH
69679: LD_VAR 0 1
69683: PUSH
69684: LD_INT 1
69686: PLUS
69687: PPUSH
69688: LD_VAR 0 2
69692: PPUSH
69693: CALL_OW 1
69697: ST_TO_ADDR
// end ;
69698: LD_VAR 0 3
69702: RET
// export function JoinUnion ( array , element ) ; begin
69703: LD_INT 0
69705: PPUSH
// result := array union element ;
69706: LD_ADDR_VAR 0 3
69710: PUSH
69711: LD_VAR 0 1
69715: PUSH
69716: LD_VAR 0 2
69720: UNION
69721: ST_TO_ADDR
// end ;
69722: LD_VAR 0 3
69726: RET
// export function GetBehemoths ( side ) ; begin
69727: LD_INT 0
69729: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
69730: LD_ADDR_VAR 0 2
69734: PUSH
69735: LD_INT 22
69737: PUSH
69738: LD_VAR 0 1
69742: PUSH
69743: EMPTY
69744: LIST
69745: LIST
69746: PUSH
69747: LD_INT 31
69749: PUSH
69750: LD_INT 25
69752: PUSH
69753: EMPTY
69754: LIST
69755: LIST
69756: PUSH
69757: EMPTY
69758: LIST
69759: LIST
69760: PPUSH
69761: CALL_OW 69
69765: ST_TO_ADDR
// end ;
69766: LD_VAR 0 2
69770: RET
// export function Shuffle ( array ) ; var i , index ; begin
69771: LD_INT 0
69773: PPUSH
69774: PPUSH
69775: PPUSH
// result := [ ] ;
69776: LD_ADDR_VAR 0 2
69780: PUSH
69781: EMPTY
69782: ST_TO_ADDR
// if not array then
69783: LD_VAR 0 1
69787: NOT
69788: IFFALSE 69792
// exit ;
69790: GO 69891
// Randomize ;
69792: CALL_OW 10
// for i = array downto 1 do
69796: LD_ADDR_VAR 0 3
69800: PUSH
69801: DOUBLE
69802: LD_VAR 0 1
69806: INC
69807: ST_TO_ADDR
69808: LD_INT 1
69810: PUSH
69811: FOR_DOWNTO
69812: IFFALSE 69889
// begin index := rand ( 1 , array ) ;
69814: LD_ADDR_VAR 0 4
69818: PUSH
69819: LD_INT 1
69821: PPUSH
69822: LD_VAR 0 1
69826: PPUSH
69827: CALL_OW 12
69831: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
69832: LD_ADDR_VAR 0 2
69836: PUSH
69837: LD_VAR 0 2
69841: PPUSH
69842: LD_VAR 0 2
69846: PUSH
69847: LD_INT 1
69849: PLUS
69850: PPUSH
69851: LD_VAR 0 1
69855: PUSH
69856: LD_VAR 0 4
69860: ARRAY
69861: PPUSH
69862: CALL_OW 2
69866: ST_TO_ADDR
// array := Delete ( array , index ) ;
69867: LD_ADDR_VAR 0 1
69871: PUSH
69872: LD_VAR 0 1
69876: PPUSH
69877: LD_VAR 0 4
69881: PPUSH
69882: CALL_OW 3
69886: ST_TO_ADDR
// end ;
69887: GO 69811
69889: POP
69890: POP
// end ;
69891: LD_VAR 0 2
69895: RET
// export function GetBaseMaterials ( base ) ; begin
69896: LD_INT 0
69898: PPUSH
// result := [ 0 , 0 , 0 ] ;
69899: LD_ADDR_VAR 0 2
69903: PUSH
69904: LD_INT 0
69906: PUSH
69907: LD_INT 0
69909: PUSH
69910: LD_INT 0
69912: PUSH
69913: EMPTY
69914: LIST
69915: LIST
69916: LIST
69917: ST_TO_ADDR
// if not base then
69918: LD_VAR 0 1
69922: NOT
69923: IFFALSE 69927
// exit ;
69925: GO 69976
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
69927: LD_ADDR_VAR 0 2
69931: PUSH
69932: LD_VAR 0 1
69936: PPUSH
69937: LD_INT 1
69939: PPUSH
69940: CALL_OW 275
69944: PUSH
69945: LD_VAR 0 1
69949: PPUSH
69950: LD_INT 2
69952: PPUSH
69953: CALL_OW 275
69957: PUSH
69958: LD_VAR 0 1
69962: PPUSH
69963: LD_INT 3
69965: PPUSH
69966: CALL_OW 275
69970: PUSH
69971: EMPTY
69972: LIST
69973: LIST
69974: LIST
69975: ST_TO_ADDR
// end ;
69976: LD_VAR 0 2
69980: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
69981: LD_INT 0
69983: PPUSH
69984: PPUSH
// result := array ;
69985: LD_ADDR_VAR 0 3
69989: PUSH
69990: LD_VAR 0 1
69994: ST_TO_ADDR
// if size >= result then
69995: LD_VAR 0 2
69999: PUSH
70000: LD_VAR 0 3
70004: GREATEREQUAL
70005: IFFALSE 70009
// exit ;
70007: GO 70059
// if size then
70009: LD_VAR 0 2
70013: IFFALSE 70059
// for i := array downto size do
70015: LD_ADDR_VAR 0 4
70019: PUSH
70020: DOUBLE
70021: LD_VAR 0 1
70025: INC
70026: ST_TO_ADDR
70027: LD_VAR 0 2
70031: PUSH
70032: FOR_DOWNTO
70033: IFFALSE 70057
// result := Delete ( result , result ) ;
70035: LD_ADDR_VAR 0 3
70039: PUSH
70040: LD_VAR 0 3
70044: PPUSH
70045: LD_VAR 0 3
70049: PPUSH
70050: CALL_OW 3
70054: ST_TO_ADDR
70055: GO 70032
70057: POP
70058: POP
// end ;
70059: LD_VAR 0 3
70063: RET
// export function ComExit ( unit ) ; var tmp ; begin
70064: LD_INT 0
70066: PPUSH
70067: PPUSH
// if not IsInUnit ( unit ) then
70068: LD_VAR 0 1
70072: PPUSH
70073: CALL_OW 310
70077: NOT
70078: IFFALSE 70082
// exit ;
70080: GO 70142
// tmp := IsInUnit ( unit ) ;
70082: LD_ADDR_VAR 0 3
70086: PUSH
70087: LD_VAR 0 1
70091: PPUSH
70092: CALL_OW 310
70096: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
70097: LD_VAR 0 3
70101: PPUSH
70102: CALL_OW 247
70106: PUSH
70107: LD_INT 2
70109: EQUAL
70110: IFFALSE 70123
// ComExitVehicle ( unit ) else
70112: LD_VAR 0 1
70116: PPUSH
70117: CALL_OW 121
70121: GO 70132
// ComExitBuilding ( unit ) ;
70123: LD_VAR 0 1
70127: PPUSH
70128: CALL_OW 122
// result := tmp ;
70132: LD_ADDR_VAR 0 2
70136: PUSH
70137: LD_VAR 0 3
70141: ST_TO_ADDR
// end ;
70142: LD_VAR 0 2
70146: RET
// export function ComExitAll ( units ) ; var i ; begin
70147: LD_INT 0
70149: PPUSH
70150: PPUSH
// if not units then
70151: LD_VAR 0 1
70155: NOT
70156: IFFALSE 70160
// exit ;
70158: GO 70186
// for i in units do
70160: LD_ADDR_VAR 0 3
70164: PUSH
70165: LD_VAR 0 1
70169: PUSH
70170: FOR_IN
70171: IFFALSE 70184
// ComExit ( i ) ;
70173: LD_VAR 0 3
70177: PPUSH
70178: CALL 70064 0 1
70182: GO 70170
70184: POP
70185: POP
// end ;
70186: LD_VAR 0 2
70190: RET
// export function ResetHc ; begin
70191: LD_INT 0
70193: PPUSH
// InitHc ;
70194: CALL_OW 19
// hc_importance := 0 ;
70198: LD_ADDR_OWVAR 32
70202: PUSH
70203: LD_INT 0
70205: ST_TO_ADDR
// end ;
70206: LD_VAR 0 1
70210: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
70211: LD_INT 0
70213: PPUSH
70214: PPUSH
70215: PPUSH
// _x := ( x1 + x2 ) div 2 ;
70216: LD_ADDR_VAR 0 6
70220: PUSH
70221: LD_VAR 0 1
70225: PUSH
70226: LD_VAR 0 3
70230: PLUS
70231: PUSH
70232: LD_INT 2
70234: DIV
70235: ST_TO_ADDR
// if _x < 0 then
70236: LD_VAR 0 6
70240: PUSH
70241: LD_INT 0
70243: LESS
70244: IFFALSE 70261
// _x := _x * - 1 ;
70246: LD_ADDR_VAR 0 6
70250: PUSH
70251: LD_VAR 0 6
70255: PUSH
70256: LD_INT 1
70258: NEG
70259: MUL
70260: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
70261: LD_ADDR_VAR 0 7
70265: PUSH
70266: LD_VAR 0 2
70270: PUSH
70271: LD_VAR 0 4
70275: PLUS
70276: PUSH
70277: LD_INT 2
70279: DIV
70280: ST_TO_ADDR
// if _y < 0 then
70281: LD_VAR 0 7
70285: PUSH
70286: LD_INT 0
70288: LESS
70289: IFFALSE 70306
// _y := _y * - 1 ;
70291: LD_ADDR_VAR 0 7
70295: PUSH
70296: LD_VAR 0 7
70300: PUSH
70301: LD_INT 1
70303: NEG
70304: MUL
70305: ST_TO_ADDR
// result := [ _x , _y ] ;
70306: LD_ADDR_VAR 0 5
70310: PUSH
70311: LD_VAR 0 6
70315: PUSH
70316: LD_VAR 0 7
70320: PUSH
70321: EMPTY
70322: LIST
70323: LIST
70324: ST_TO_ADDR
// end ;
70325: LD_VAR 0 5
70329: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
70330: LD_INT 0
70332: PPUSH
70333: PPUSH
70334: PPUSH
70335: PPUSH
// task := GetTaskList ( unit ) ;
70336: LD_ADDR_VAR 0 7
70340: PUSH
70341: LD_VAR 0 1
70345: PPUSH
70346: CALL_OW 437
70350: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
70351: LD_VAR 0 7
70355: NOT
70356: PUSH
70357: LD_VAR 0 1
70361: PPUSH
70362: LD_VAR 0 2
70366: PPUSH
70367: CALL_OW 308
70371: NOT
70372: AND
70373: IFFALSE 70377
// exit ;
70375: GO 70495
// if IsInArea ( unit , area ) then
70377: LD_VAR 0 1
70381: PPUSH
70382: LD_VAR 0 2
70386: PPUSH
70387: CALL_OW 308
70391: IFFALSE 70409
// begin ComMoveToArea ( unit , goAway ) ;
70393: LD_VAR 0 1
70397: PPUSH
70398: LD_VAR 0 3
70402: PPUSH
70403: CALL_OW 113
// exit ;
70407: GO 70495
// end ; if task [ 1 ] [ 1 ] <> M then
70409: LD_VAR 0 7
70413: PUSH
70414: LD_INT 1
70416: ARRAY
70417: PUSH
70418: LD_INT 1
70420: ARRAY
70421: PUSH
70422: LD_STRING M
70424: NONEQUAL
70425: IFFALSE 70429
// exit ;
70427: GO 70495
// x := task [ 1 ] [ 2 ] ;
70429: LD_ADDR_VAR 0 5
70433: PUSH
70434: LD_VAR 0 7
70438: PUSH
70439: LD_INT 1
70441: ARRAY
70442: PUSH
70443: LD_INT 2
70445: ARRAY
70446: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
70447: LD_ADDR_VAR 0 6
70451: PUSH
70452: LD_VAR 0 7
70456: PUSH
70457: LD_INT 1
70459: ARRAY
70460: PUSH
70461: LD_INT 3
70463: ARRAY
70464: ST_TO_ADDR
// if InArea ( x , y , area ) then
70465: LD_VAR 0 5
70469: PPUSH
70470: LD_VAR 0 6
70474: PPUSH
70475: LD_VAR 0 2
70479: PPUSH
70480: CALL_OW 309
70484: IFFALSE 70495
// ComStop ( unit ) ;
70486: LD_VAR 0 1
70490: PPUSH
70491: CALL_OW 141
// end ;
70495: LD_VAR 0 4
70499: RET
// export function Abs ( value ) ; begin
70500: LD_INT 0
70502: PPUSH
// result := value ;
70503: LD_ADDR_VAR 0 2
70507: PUSH
70508: LD_VAR 0 1
70512: ST_TO_ADDR
// if value < 0 then
70513: LD_VAR 0 1
70517: PUSH
70518: LD_INT 0
70520: LESS
70521: IFFALSE 70538
// result := value * - 1 ;
70523: LD_ADDR_VAR 0 2
70527: PUSH
70528: LD_VAR 0 1
70532: PUSH
70533: LD_INT 1
70535: NEG
70536: MUL
70537: ST_TO_ADDR
// end ;
70538: LD_VAR 0 2
70542: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
70543: LD_INT 0
70545: PPUSH
70546: PPUSH
70547: PPUSH
70548: PPUSH
70549: PPUSH
70550: PPUSH
70551: PPUSH
70552: PPUSH
// if not unit or not building then
70553: LD_VAR 0 1
70557: NOT
70558: PUSH
70559: LD_VAR 0 2
70563: NOT
70564: OR
70565: IFFALSE 70569
// exit ;
70567: GO 70795
// x := GetX ( building ) ;
70569: LD_ADDR_VAR 0 4
70573: PUSH
70574: LD_VAR 0 2
70578: PPUSH
70579: CALL_OW 250
70583: ST_TO_ADDR
// y := GetY ( building ) ;
70584: LD_ADDR_VAR 0 6
70588: PUSH
70589: LD_VAR 0 2
70593: PPUSH
70594: CALL_OW 251
70598: ST_TO_ADDR
// d := GetDir ( building ) ;
70599: LD_ADDR_VAR 0 8
70603: PUSH
70604: LD_VAR 0 2
70608: PPUSH
70609: CALL_OW 254
70613: ST_TO_ADDR
// r := 4 ;
70614: LD_ADDR_VAR 0 9
70618: PUSH
70619: LD_INT 4
70621: ST_TO_ADDR
// for i := 1 to 5 do
70622: LD_ADDR_VAR 0 10
70626: PUSH
70627: DOUBLE
70628: LD_INT 1
70630: DEC
70631: ST_TO_ADDR
70632: LD_INT 5
70634: PUSH
70635: FOR_TO
70636: IFFALSE 70793
// begin _x := ShiftX ( x , d , r + i ) ;
70638: LD_ADDR_VAR 0 5
70642: PUSH
70643: LD_VAR 0 4
70647: PPUSH
70648: LD_VAR 0 8
70652: PPUSH
70653: LD_VAR 0 9
70657: PUSH
70658: LD_VAR 0 10
70662: PLUS
70663: PPUSH
70664: CALL_OW 272
70668: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
70669: LD_ADDR_VAR 0 7
70673: PUSH
70674: LD_VAR 0 6
70678: PPUSH
70679: LD_VAR 0 8
70683: PPUSH
70684: LD_VAR 0 9
70688: PUSH
70689: LD_VAR 0 10
70693: PLUS
70694: PPUSH
70695: CALL_OW 273
70699: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
70700: LD_VAR 0 5
70704: PPUSH
70705: LD_VAR 0 7
70709: PPUSH
70710: CALL_OW 488
70714: PUSH
70715: LD_VAR 0 5
70719: PPUSH
70720: LD_VAR 0 7
70724: PPUSH
70725: CALL_OW 428
70729: PPUSH
70730: CALL_OW 247
70734: PUSH
70735: LD_INT 3
70737: PUSH
70738: LD_INT 2
70740: PUSH
70741: EMPTY
70742: LIST
70743: LIST
70744: IN
70745: NOT
70746: AND
70747: IFFALSE 70791
// begin ComMoveXY ( unit , _x , _y ) ;
70749: LD_VAR 0 1
70753: PPUSH
70754: LD_VAR 0 5
70758: PPUSH
70759: LD_VAR 0 7
70763: PPUSH
70764: CALL_OW 111
// result := [ _x , _y ] ;
70768: LD_ADDR_VAR 0 3
70772: PUSH
70773: LD_VAR 0 5
70777: PUSH
70778: LD_VAR 0 7
70782: PUSH
70783: EMPTY
70784: LIST
70785: LIST
70786: ST_TO_ADDR
// exit ;
70787: POP
70788: POP
70789: GO 70795
// end ; end ;
70791: GO 70635
70793: POP
70794: POP
// end ;
70795: LD_VAR 0 3
70799: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
70800: LD_INT 0
70802: PPUSH
70803: PPUSH
70804: PPUSH
// result := 0 ;
70805: LD_ADDR_VAR 0 3
70809: PUSH
70810: LD_INT 0
70812: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
70813: LD_VAR 0 1
70817: PUSH
70818: LD_INT 0
70820: LESS
70821: PUSH
70822: LD_VAR 0 1
70826: PUSH
70827: LD_INT 8
70829: GREATER
70830: OR
70831: PUSH
70832: LD_VAR 0 2
70836: PUSH
70837: LD_INT 0
70839: LESS
70840: OR
70841: PUSH
70842: LD_VAR 0 2
70846: PUSH
70847: LD_INT 8
70849: GREATER
70850: OR
70851: IFFALSE 70855
// exit ;
70853: GO 70930
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
70855: LD_ADDR_VAR 0 4
70859: PUSH
70860: LD_INT 22
70862: PUSH
70863: LD_VAR 0 2
70867: PUSH
70868: EMPTY
70869: LIST
70870: LIST
70871: PPUSH
70872: CALL_OW 69
70876: PUSH
70877: FOR_IN
70878: IFFALSE 70928
// begin un := UnitShoot ( i ) ;
70880: LD_ADDR_VAR 0 5
70884: PUSH
70885: LD_VAR 0 4
70889: PPUSH
70890: CALL_OW 504
70894: ST_TO_ADDR
// if GetSide ( un ) = side1 then
70895: LD_VAR 0 5
70899: PPUSH
70900: CALL_OW 255
70904: PUSH
70905: LD_VAR 0 1
70909: EQUAL
70910: IFFALSE 70926
// begin result := un ;
70912: LD_ADDR_VAR 0 3
70916: PUSH
70917: LD_VAR 0 5
70921: ST_TO_ADDR
// exit ;
70922: POP
70923: POP
70924: GO 70930
// end ; end ;
70926: GO 70877
70928: POP
70929: POP
// end ;
70930: LD_VAR 0 3
70934: RET
// export function GetCargoBay ( units ) ; begin
70935: LD_INT 0
70937: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
70938: LD_ADDR_VAR 0 2
70942: PUSH
70943: LD_VAR 0 1
70947: PPUSH
70948: LD_INT 2
70950: PUSH
70951: LD_INT 34
70953: PUSH
70954: LD_INT 12
70956: PUSH
70957: EMPTY
70958: LIST
70959: LIST
70960: PUSH
70961: LD_INT 34
70963: PUSH
70964: LD_INT 51
70966: PUSH
70967: EMPTY
70968: LIST
70969: LIST
70970: PUSH
70971: LD_INT 34
70973: PUSH
70974: LD_INT 32
70976: PUSH
70977: EMPTY
70978: LIST
70979: LIST
70980: PUSH
70981: LD_INT 34
70983: PUSH
70984: LD_INT 89
70986: PUSH
70987: EMPTY
70988: LIST
70989: LIST
70990: PUSH
70991: EMPTY
70992: LIST
70993: LIST
70994: LIST
70995: LIST
70996: LIST
70997: PPUSH
70998: CALL_OW 72
71002: ST_TO_ADDR
// end ;
71003: LD_VAR 0 2
71007: RET
// export function Negate ( value ) ; begin
71008: LD_INT 0
71010: PPUSH
// result := not value ;
71011: LD_ADDR_VAR 0 2
71015: PUSH
71016: LD_VAR 0 1
71020: NOT
71021: ST_TO_ADDR
// end ;
71022: LD_VAR 0 2
71026: RET
// export function Inc ( value ) ; begin
71027: LD_INT 0
71029: PPUSH
// result := value + 1 ;
71030: LD_ADDR_VAR 0 2
71034: PUSH
71035: LD_VAR 0 1
71039: PUSH
71040: LD_INT 1
71042: PLUS
71043: ST_TO_ADDR
// end ;
71044: LD_VAR 0 2
71048: RET
// export function Dec ( value ) ; begin
71049: LD_INT 0
71051: PPUSH
// result := value - 1 ;
71052: LD_ADDR_VAR 0 2
71056: PUSH
71057: LD_VAR 0 1
71061: PUSH
71062: LD_INT 1
71064: MINUS
71065: ST_TO_ADDR
// end ;
71066: LD_VAR 0 2
71070: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
71071: LD_INT 0
71073: PPUSH
71074: PPUSH
71075: PPUSH
71076: PPUSH
71077: PPUSH
71078: PPUSH
71079: PPUSH
71080: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
71081: LD_VAR 0 1
71085: PPUSH
71086: LD_VAR 0 2
71090: PPUSH
71091: CALL_OW 488
71095: NOT
71096: PUSH
71097: LD_VAR 0 3
71101: PPUSH
71102: LD_VAR 0 4
71106: PPUSH
71107: CALL_OW 488
71111: NOT
71112: OR
71113: IFFALSE 71126
// begin result := - 1 ;
71115: LD_ADDR_VAR 0 5
71119: PUSH
71120: LD_INT 1
71122: NEG
71123: ST_TO_ADDR
// exit ;
71124: GO 71361
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
71126: LD_ADDR_VAR 0 12
71130: PUSH
71131: LD_VAR 0 1
71135: PPUSH
71136: LD_VAR 0 2
71140: PPUSH
71141: LD_VAR 0 3
71145: PPUSH
71146: LD_VAR 0 4
71150: PPUSH
71151: CALL 70211 0 4
71155: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
71156: LD_ADDR_VAR 0 11
71160: PUSH
71161: LD_VAR 0 1
71165: PPUSH
71166: LD_VAR 0 2
71170: PPUSH
71171: LD_VAR 0 12
71175: PUSH
71176: LD_INT 1
71178: ARRAY
71179: PPUSH
71180: LD_VAR 0 12
71184: PUSH
71185: LD_INT 2
71187: ARRAY
71188: PPUSH
71189: CALL_OW 298
71193: ST_TO_ADDR
// distance := 9999 ;
71194: LD_ADDR_VAR 0 10
71198: PUSH
71199: LD_INT 9999
71201: ST_TO_ADDR
// for i := 0 to 5 do
71202: LD_ADDR_VAR 0 6
71206: PUSH
71207: DOUBLE
71208: LD_INT 0
71210: DEC
71211: ST_TO_ADDR
71212: LD_INT 5
71214: PUSH
71215: FOR_TO
71216: IFFALSE 71359
// begin _x := ShiftX ( x1 , i , centerDist ) ;
71218: LD_ADDR_VAR 0 7
71222: PUSH
71223: LD_VAR 0 1
71227: PPUSH
71228: LD_VAR 0 6
71232: PPUSH
71233: LD_VAR 0 11
71237: PPUSH
71238: CALL_OW 272
71242: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
71243: LD_ADDR_VAR 0 8
71247: PUSH
71248: LD_VAR 0 2
71252: PPUSH
71253: LD_VAR 0 6
71257: PPUSH
71258: LD_VAR 0 11
71262: PPUSH
71263: CALL_OW 273
71267: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
71268: LD_VAR 0 7
71272: PPUSH
71273: LD_VAR 0 8
71277: PPUSH
71278: CALL_OW 488
71282: NOT
71283: IFFALSE 71287
// continue ;
71285: GO 71215
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
71287: LD_ADDR_VAR 0 9
71291: PUSH
71292: LD_VAR 0 12
71296: PUSH
71297: LD_INT 1
71299: ARRAY
71300: PPUSH
71301: LD_VAR 0 12
71305: PUSH
71306: LD_INT 2
71308: ARRAY
71309: PPUSH
71310: LD_VAR 0 7
71314: PPUSH
71315: LD_VAR 0 8
71319: PPUSH
71320: CALL_OW 298
71324: ST_TO_ADDR
// if tmp < distance then
71325: LD_VAR 0 9
71329: PUSH
71330: LD_VAR 0 10
71334: LESS
71335: IFFALSE 71357
// begin result := i ;
71337: LD_ADDR_VAR 0 5
71341: PUSH
71342: LD_VAR 0 6
71346: ST_TO_ADDR
// distance := tmp ;
71347: LD_ADDR_VAR 0 10
71351: PUSH
71352: LD_VAR 0 9
71356: ST_TO_ADDR
// end ; end ;
71357: GO 71215
71359: POP
71360: POP
// end ;
71361: LD_VAR 0 5
71365: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71366: LD_INT 0
71368: PPUSH
71369: PPUSH
// if not driver or not IsInUnit ( driver ) then
71370: LD_VAR 0 1
71374: NOT
71375: PUSH
71376: LD_VAR 0 1
71380: PPUSH
71381: CALL_OW 310
71385: NOT
71386: OR
71387: IFFALSE 71391
// exit ;
71389: GO 71481
// vehicle := IsInUnit ( driver ) ;
71391: LD_ADDR_VAR 0 3
71395: PUSH
71396: LD_VAR 0 1
71400: PPUSH
71401: CALL_OW 310
71405: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71406: LD_VAR 0 1
71410: PPUSH
71411: LD_STRING \
71413: PUSH
71414: LD_INT 0
71416: PUSH
71417: LD_INT 0
71419: PUSH
71420: LD_INT 0
71422: PUSH
71423: LD_INT 0
71425: PUSH
71426: LD_INT 0
71428: PUSH
71429: LD_INT 0
71431: PUSH
71432: EMPTY
71433: LIST
71434: LIST
71435: LIST
71436: LIST
71437: LIST
71438: LIST
71439: LIST
71440: PUSH
71441: LD_STRING E
71443: PUSH
71444: LD_INT 0
71446: PUSH
71447: LD_INT 0
71449: PUSH
71450: LD_VAR 0 3
71454: PUSH
71455: LD_INT 0
71457: PUSH
71458: LD_INT 0
71460: PUSH
71461: LD_INT 0
71463: PUSH
71464: EMPTY
71465: LIST
71466: LIST
71467: LIST
71468: LIST
71469: LIST
71470: LIST
71471: LIST
71472: PUSH
71473: EMPTY
71474: LIST
71475: LIST
71476: PPUSH
71477: CALL_OW 446
// end ;
71481: LD_VAR 0 2
71485: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71486: LD_INT 0
71488: PPUSH
71489: PPUSH
// if not driver or not IsInUnit ( driver ) then
71490: LD_VAR 0 1
71494: NOT
71495: PUSH
71496: LD_VAR 0 1
71500: PPUSH
71501: CALL_OW 310
71505: NOT
71506: OR
71507: IFFALSE 71511
// exit ;
71509: GO 71601
// vehicle := IsInUnit ( driver ) ;
71511: LD_ADDR_VAR 0 3
71515: PUSH
71516: LD_VAR 0 1
71520: PPUSH
71521: CALL_OW 310
71525: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71526: LD_VAR 0 1
71530: PPUSH
71531: LD_STRING \
71533: PUSH
71534: LD_INT 0
71536: PUSH
71537: LD_INT 0
71539: PUSH
71540: LD_INT 0
71542: PUSH
71543: LD_INT 0
71545: PUSH
71546: LD_INT 0
71548: PUSH
71549: LD_INT 0
71551: PUSH
71552: EMPTY
71553: LIST
71554: LIST
71555: LIST
71556: LIST
71557: LIST
71558: LIST
71559: LIST
71560: PUSH
71561: LD_STRING E
71563: PUSH
71564: LD_INT 0
71566: PUSH
71567: LD_INT 0
71569: PUSH
71570: LD_VAR 0 3
71574: PUSH
71575: LD_INT 0
71577: PUSH
71578: LD_INT 0
71580: PUSH
71581: LD_INT 0
71583: PUSH
71584: EMPTY
71585: LIST
71586: LIST
71587: LIST
71588: LIST
71589: LIST
71590: LIST
71591: LIST
71592: PUSH
71593: EMPTY
71594: LIST
71595: LIST
71596: PPUSH
71597: CALL_OW 447
// end ;
71601: LD_VAR 0 2
71605: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
71606: LD_INT 0
71608: PPUSH
71609: PPUSH
71610: PPUSH
// tmp := [ ] ;
71611: LD_ADDR_VAR 0 5
71615: PUSH
71616: EMPTY
71617: ST_TO_ADDR
// for i in units do
71618: LD_ADDR_VAR 0 4
71622: PUSH
71623: LD_VAR 0 1
71627: PUSH
71628: FOR_IN
71629: IFFALSE 71667
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
71631: LD_ADDR_VAR 0 5
71635: PUSH
71636: LD_VAR 0 5
71640: PPUSH
71641: LD_VAR 0 5
71645: PUSH
71646: LD_INT 1
71648: PLUS
71649: PPUSH
71650: LD_VAR 0 4
71654: PPUSH
71655: CALL_OW 256
71659: PPUSH
71660: CALL_OW 2
71664: ST_TO_ADDR
71665: GO 71628
71667: POP
71668: POP
// if not tmp then
71669: LD_VAR 0 5
71673: NOT
71674: IFFALSE 71678
// exit ;
71676: GO 71726
// if asc then
71678: LD_VAR 0 2
71682: IFFALSE 71706
// result := SortListByListAsc ( units , tmp ) else
71684: LD_ADDR_VAR 0 3
71688: PUSH
71689: LD_VAR 0 1
71693: PPUSH
71694: LD_VAR 0 5
71698: PPUSH
71699: CALL_OW 76
71703: ST_TO_ADDR
71704: GO 71726
// result := SortListByListDesc ( units , tmp ) ;
71706: LD_ADDR_VAR 0 3
71710: PUSH
71711: LD_VAR 0 1
71715: PPUSH
71716: LD_VAR 0 5
71720: PPUSH
71721: CALL_OW 77
71725: ST_TO_ADDR
// end ;
71726: LD_VAR 0 3
71730: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
71731: LD_INT 0
71733: PPUSH
71734: PPUSH
// task := GetTaskList ( mech ) ;
71735: LD_ADDR_VAR 0 4
71739: PUSH
71740: LD_VAR 0 1
71744: PPUSH
71745: CALL_OW 437
71749: ST_TO_ADDR
// if not task then
71750: LD_VAR 0 4
71754: NOT
71755: IFFALSE 71759
// exit ;
71757: GO 71801
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
71759: LD_ADDR_VAR 0 3
71763: PUSH
71764: LD_VAR 0 4
71768: PUSH
71769: LD_INT 1
71771: ARRAY
71772: PUSH
71773: LD_INT 1
71775: ARRAY
71776: PUSH
71777: LD_STRING r
71779: EQUAL
71780: PUSH
71781: LD_VAR 0 4
71785: PUSH
71786: LD_INT 1
71788: ARRAY
71789: PUSH
71790: LD_INT 4
71792: ARRAY
71793: PUSH
71794: LD_VAR 0 2
71798: EQUAL
71799: AND
71800: ST_TO_ADDR
// end ;
71801: LD_VAR 0 3
71805: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
71806: LD_INT 0
71808: PPUSH
// SetDir ( unit , d ) ;
71809: LD_VAR 0 1
71813: PPUSH
71814: LD_VAR 0 4
71818: PPUSH
71819: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
71823: LD_VAR 0 1
71827: PPUSH
71828: LD_VAR 0 2
71832: PPUSH
71833: LD_VAR 0 3
71837: PPUSH
71838: LD_VAR 0 5
71842: PPUSH
71843: CALL_OW 48
// end ;
71847: LD_VAR 0 6
71851: RET
// export function ToNaturalNumber ( number ) ; begin
71852: LD_INT 0
71854: PPUSH
// result := number div 1 ;
71855: LD_ADDR_VAR 0 2
71859: PUSH
71860: LD_VAR 0 1
71864: PUSH
71865: LD_INT 1
71867: DIV
71868: ST_TO_ADDR
// if number < 0 then
71869: LD_VAR 0 1
71873: PUSH
71874: LD_INT 0
71876: LESS
71877: IFFALSE 71887
// result := 0 ;
71879: LD_ADDR_VAR 0 2
71883: PUSH
71884: LD_INT 0
71886: ST_TO_ADDR
// end ;
71887: LD_VAR 0 2
71891: RET
// export function SortByClass ( units , class ) ; var un ; begin
71892: LD_INT 0
71894: PPUSH
71895: PPUSH
// if not units or not class then
71896: LD_VAR 0 1
71900: NOT
71901: PUSH
71902: LD_VAR 0 2
71906: NOT
71907: OR
71908: IFFALSE 71912
// exit ;
71910: GO 72007
// result := [ ] ;
71912: LD_ADDR_VAR 0 3
71916: PUSH
71917: EMPTY
71918: ST_TO_ADDR
// for un in units do
71919: LD_ADDR_VAR 0 4
71923: PUSH
71924: LD_VAR 0 1
71928: PUSH
71929: FOR_IN
71930: IFFALSE 72005
// if GetClass ( un ) = class then
71932: LD_VAR 0 4
71936: PPUSH
71937: CALL_OW 257
71941: PUSH
71942: LD_VAR 0 2
71946: EQUAL
71947: IFFALSE 71974
// result := Insert ( result , 1 , un ) else
71949: LD_ADDR_VAR 0 3
71953: PUSH
71954: LD_VAR 0 3
71958: PPUSH
71959: LD_INT 1
71961: PPUSH
71962: LD_VAR 0 4
71966: PPUSH
71967: CALL_OW 2
71971: ST_TO_ADDR
71972: GO 72003
// result := Replace ( result , result + 1 , un ) ;
71974: LD_ADDR_VAR 0 3
71978: PUSH
71979: LD_VAR 0 3
71983: PPUSH
71984: LD_VAR 0 3
71988: PUSH
71989: LD_INT 1
71991: PLUS
71992: PPUSH
71993: LD_VAR 0 4
71997: PPUSH
71998: CALL_OW 1
72002: ST_TO_ADDR
72003: GO 71929
72005: POP
72006: POP
// end ;
72007: LD_VAR 0 3
72011: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
72012: LD_INT 0
72014: PPUSH
72015: PPUSH
72016: PPUSH
72017: PPUSH
72018: PPUSH
72019: PPUSH
72020: PPUSH
// result := [ ] ;
72021: LD_ADDR_VAR 0 4
72025: PUSH
72026: EMPTY
72027: ST_TO_ADDR
// if x - r < 0 then
72028: LD_VAR 0 1
72032: PUSH
72033: LD_VAR 0 3
72037: MINUS
72038: PUSH
72039: LD_INT 0
72041: LESS
72042: IFFALSE 72054
// min_x := 0 else
72044: LD_ADDR_VAR 0 8
72048: PUSH
72049: LD_INT 0
72051: ST_TO_ADDR
72052: GO 72070
// min_x := x - r ;
72054: LD_ADDR_VAR 0 8
72058: PUSH
72059: LD_VAR 0 1
72063: PUSH
72064: LD_VAR 0 3
72068: MINUS
72069: ST_TO_ADDR
// if y - r < 0 then
72070: LD_VAR 0 2
72074: PUSH
72075: LD_VAR 0 3
72079: MINUS
72080: PUSH
72081: LD_INT 0
72083: LESS
72084: IFFALSE 72096
// min_y := 0 else
72086: LD_ADDR_VAR 0 7
72090: PUSH
72091: LD_INT 0
72093: ST_TO_ADDR
72094: GO 72112
// min_y := y - r ;
72096: LD_ADDR_VAR 0 7
72100: PUSH
72101: LD_VAR 0 2
72105: PUSH
72106: LD_VAR 0 3
72110: MINUS
72111: ST_TO_ADDR
// max_x := x + r ;
72112: LD_ADDR_VAR 0 9
72116: PUSH
72117: LD_VAR 0 1
72121: PUSH
72122: LD_VAR 0 3
72126: PLUS
72127: ST_TO_ADDR
// max_y := y + r ;
72128: LD_ADDR_VAR 0 10
72132: PUSH
72133: LD_VAR 0 2
72137: PUSH
72138: LD_VAR 0 3
72142: PLUS
72143: ST_TO_ADDR
// for _x = min_x to max_x do
72144: LD_ADDR_VAR 0 5
72148: PUSH
72149: DOUBLE
72150: LD_VAR 0 8
72154: DEC
72155: ST_TO_ADDR
72156: LD_VAR 0 9
72160: PUSH
72161: FOR_TO
72162: IFFALSE 72263
// for _y = min_y to max_y do
72164: LD_ADDR_VAR 0 6
72168: PUSH
72169: DOUBLE
72170: LD_VAR 0 7
72174: DEC
72175: ST_TO_ADDR
72176: LD_VAR 0 10
72180: PUSH
72181: FOR_TO
72182: IFFALSE 72259
// begin if not ValidHex ( _x , _y ) then
72184: LD_VAR 0 5
72188: PPUSH
72189: LD_VAR 0 6
72193: PPUSH
72194: CALL_OW 488
72198: NOT
72199: IFFALSE 72203
// continue ;
72201: GO 72181
// if GetResourceTypeXY ( _x , _y ) then
72203: LD_VAR 0 5
72207: PPUSH
72208: LD_VAR 0 6
72212: PPUSH
72213: CALL_OW 283
72217: IFFALSE 72257
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
72219: LD_ADDR_VAR 0 4
72223: PUSH
72224: LD_VAR 0 4
72228: PPUSH
72229: LD_VAR 0 4
72233: PUSH
72234: LD_INT 1
72236: PLUS
72237: PPUSH
72238: LD_VAR 0 5
72242: PUSH
72243: LD_VAR 0 6
72247: PUSH
72248: EMPTY
72249: LIST
72250: LIST
72251: PPUSH
72252: CALL_OW 1
72256: ST_TO_ADDR
// end ;
72257: GO 72181
72259: POP
72260: POP
72261: GO 72161
72263: POP
72264: POP
// end ;
72265: LD_VAR 0 4
72269: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
72270: LD_INT 0
72272: PPUSH
72273: PPUSH
72274: PPUSH
72275: PPUSH
72276: PPUSH
72277: PPUSH
72278: PPUSH
72279: PPUSH
// if not units then
72280: LD_VAR 0 1
72284: NOT
72285: IFFALSE 72289
// exit ;
72287: GO 72813
// result := UnitFilter ( units , [ f_ok ] ) ;
72289: LD_ADDR_VAR 0 3
72293: PUSH
72294: LD_VAR 0 1
72298: PPUSH
72299: LD_INT 50
72301: PUSH
72302: EMPTY
72303: LIST
72304: PPUSH
72305: CALL_OW 72
72309: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
72310: LD_ADDR_VAR 0 8
72314: PUSH
72315: LD_VAR 0 1
72319: PUSH
72320: LD_INT 1
72322: ARRAY
72323: PPUSH
72324: CALL_OW 255
72328: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
72329: LD_ADDR_VAR 0 10
72333: PUSH
72334: LD_INT 29
72336: PUSH
72337: LD_INT 91
72339: PUSH
72340: LD_INT 49
72342: PUSH
72343: EMPTY
72344: LIST
72345: LIST
72346: LIST
72347: ST_TO_ADDR
// if not result then
72348: LD_VAR 0 3
72352: NOT
72353: IFFALSE 72357
// exit ;
72355: GO 72813
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
72357: LD_ADDR_VAR 0 5
72361: PUSH
72362: LD_INT 81
72364: PUSH
72365: LD_VAR 0 8
72369: PUSH
72370: EMPTY
72371: LIST
72372: LIST
72373: PPUSH
72374: CALL_OW 69
72378: ST_TO_ADDR
// for i in result do
72379: LD_ADDR_VAR 0 4
72383: PUSH
72384: LD_VAR 0 3
72388: PUSH
72389: FOR_IN
72390: IFFALSE 72811
// begin tag := GetTag ( i ) + 1 ;
72392: LD_ADDR_VAR 0 9
72396: PUSH
72397: LD_VAR 0 4
72401: PPUSH
72402: CALL_OW 110
72406: PUSH
72407: LD_INT 1
72409: PLUS
72410: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
72411: LD_ADDR_VAR 0 7
72415: PUSH
72416: LD_VAR 0 4
72420: PPUSH
72421: CALL_OW 250
72425: PPUSH
72426: LD_VAR 0 4
72430: PPUSH
72431: CALL_OW 251
72435: PPUSH
72436: LD_INT 6
72438: PPUSH
72439: CALL 72012 0 3
72443: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
72444: LD_VAR 0 4
72448: PPUSH
72449: CALL_OW 247
72453: PUSH
72454: LD_INT 2
72456: EQUAL
72457: PUSH
72458: LD_VAR 0 7
72462: AND
72463: PUSH
72464: LD_VAR 0 4
72468: PPUSH
72469: CALL_OW 264
72473: PUSH
72474: LD_VAR 0 10
72478: IN
72479: NOT
72480: AND
72481: IFFALSE 72520
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
72483: LD_VAR 0 4
72487: PPUSH
72488: LD_VAR 0 7
72492: PUSH
72493: LD_INT 1
72495: ARRAY
72496: PUSH
72497: LD_INT 1
72499: ARRAY
72500: PPUSH
72501: LD_VAR 0 7
72505: PUSH
72506: LD_INT 1
72508: ARRAY
72509: PUSH
72510: LD_INT 2
72512: ARRAY
72513: PPUSH
72514: CALL_OW 116
72518: GO 72809
// if path > tag then
72520: LD_VAR 0 2
72524: PUSH
72525: LD_VAR 0 9
72529: GREATER
72530: IFFALSE 72738
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
72532: LD_ADDR_VAR 0 6
72536: PUSH
72537: LD_VAR 0 5
72541: PPUSH
72542: LD_INT 91
72544: PUSH
72545: LD_VAR 0 4
72549: PUSH
72550: LD_INT 8
72552: PUSH
72553: EMPTY
72554: LIST
72555: LIST
72556: LIST
72557: PPUSH
72558: CALL_OW 72
72562: ST_TO_ADDR
// if nearEnemy then
72563: LD_VAR 0 6
72567: IFFALSE 72636
// begin if GetWeapon ( i ) = ru_time_lapser then
72569: LD_VAR 0 4
72573: PPUSH
72574: CALL_OW 264
72578: PUSH
72579: LD_INT 49
72581: EQUAL
72582: IFFALSE 72610
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
72584: LD_VAR 0 4
72588: PPUSH
72589: LD_VAR 0 6
72593: PPUSH
72594: LD_VAR 0 4
72598: PPUSH
72599: CALL_OW 74
72603: PPUSH
72604: CALL_OW 112
72608: GO 72634
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
72610: LD_VAR 0 4
72614: PPUSH
72615: LD_VAR 0 6
72619: PPUSH
72620: LD_VAR 0 4
72624: PPUSH
72625: CALL_OW 74
72629: PPUSH
72630: CALL 73738 0 2
// end else
72634: GO 72736
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
72636: LD_VAR 0 4
72640: PPUSH
72641: LD_VAR 0 2
72645: PUSH
72646: LD_VAR 0 9
72650: ARRAY
72651: PUSH
72652: LD_INT 1
72654: ARRAY
72655: PPUSH
72656: LD_VAR 0 2
72660: PUSH
72661: LD_VAR 0 9
72665: ARRAY
72666: PUSH
72667: LD_INT 2
72669: ARRAY
72670: PPUSH
72671: CALL_OW 297
72675: PUSH
72676: LD_INT 6
72678: GREATER
72679: IFFALSE 72722
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
72681: LD_VAR 0 4
72685: PPUSH
72686: LD_VAR 0 2
72690: PUSH
72691: LD_VAR 0 9
72695: ARRAY
72696: PUSH
72697: LD_INT 1
72699: ARRAY
72700: PPUSH
72701: LD_VAR 0 2
72705: PUSH
72706: LD_VAR 0 9
72710: ARRAY
72711: PUSH
72712: LD_INT 2
72714: ARRAY
72715: PPUSH
72716: CALL_OW 114
72720: GO 72736
// SetTag ( i , tag ) ;
72722: LD_VAR 0 4
72726: PPUSH
72727: LD_VAR 0 9
72731: PPUSH
72732: CALL_OW 109
// end else
72736: GO 72809
// if enemy then
72738: LD_VAR 0 5
72742: IFFALSE 72809
// begin if GetWeapon ( i ) = ru_time_lapser then
72744: LD_VAR 0 4
72748: PPUSH
72749: CALL_OW 264
72753: PUSH
72754: LD_INT 49
72756: EQUAL
72757: IFFALSE 72785
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
72759: LD_VAR 0 4
72763: PPUSH
72764: LD_VAR 0 5
72768: PPUSH
72769: LD_VAR 0 4
72773: PPUSH
72774: CALL_OW 74
72778: PPUSH
72779: CALL_OW 112
72783: GO 72809
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
72785: LD_VAR 0 4
72789: PPUSH
72790: LD_VAR 0 5
72794: PPUSH
72795: LD_VAR 0 4
72799: PPUSH
72800: CALL_OW 74
72804: PPUSH
72805: CALL 73738 0 2
// end ; end ;
72809: GO 72389
72811: POP
72812: POP
// end ;
72813: LD_VAR 0 3
72817: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
72818: LD_INT 0
72820: PPUSH
72821: PPUSH
72822: PPUSH
// if not unit or IsInUnit ( unit ) then
72823: LD_VAR 0 1
72827: NOT
72828: PUSH
72829: LD_VAR 0 1
72833: PPUSH
72834: CALL_OW 310
72838: OR
72839: IFFALSE 72843
// exit ;
72841: GO 72934
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
72843: LD_ADDR_VAR 0 4
72847: PUSH
72848: LD_VAR 0 1
72852: PPUSH
72853: CALL_OW 250
72857: PPUSH
72858: LD_VAR 0 2
72862: PPUSH
72863: LD_INT 1
72865: PPUSH
72866: CALL_OW 272
72870: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
72871: LD_ADDR_VAR 0 5
72875: PUSH
72876: LD_VAR 0 1
72880: PPUSH
72881: CALL_OW 251
72885: PPUSH
72886: LD_VAR 0 2
72890: PPUSH
72891: LD_INT 1
72893: PPUSH
72894: CALL_OW 273
72898: ST_TO_ADDR
// if ValidHex ( x , y ) then
72899: LD_VAR 0 4
72903: PPUSH
72904: LD_VAR 0 5
72908: PPUSH
72909: CALL_OW 488
72913: IFFALSE 72934
// ComTurnXY ( unit , x , y ) ;
72915: LD_VAR 0 1
72919: PPUSH
72920: LD_VAR 0 4
72924: PPUSH
72925: LD_VAR 0 5
72929: PPUSH
72930: CALL_OW 118
// end ;
72934: LD_VAR 0 3
72938: RET
// export function SeeUnits ( side , units ) ; var i ; begin
72939: LD_INT 0
72941: PPUSH
72942: PPUSH
// result := false ;
72943: LD_ADDR_VAR 0 3
72947: PUSH
72948: LD_INT 0
72950: ST_TO_ADDR
// if not units then
72951: LD_VAR 0 2
72955: NOT
72956: IFFALSE 72960
// exit ;
72958: GO 73005
// for i in units do
72960: LD_ADDR_VAR 0 4
72964: PUSH
72965: LD_VAR 0 2
72969: PUSH
72970: FOR_IN
72971: IFFALSE 73003
// if See ( side , i ) then
72973: LD_VAR 0 1
72977: PPUSH
72978: LD_VAR 0 4
72982: PPUSH
72983: CALL_OW 292
72987: IFFALSE 73001
// begin result := true ;
72989: LD_ADDR_VAR 0 3
72993: PUSH
72994: LD_INT 1
72996: ST_TO_ADDR
// exit ;
72997: POP
72998: POP
72999: GO 73005
// end ;
73001: GO 72970
73003: POP
73004: POP
// end ;
73005: LD_VAR 0 3
73009: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
73010: LD_INT 0
73012: PPUSH
73013: PPUSH
73014: PPUSH
73015: PPUSH
// if not unit or not points then
73016: LD_VAR 0 1
73020: NOT
73021: PUSH
73022: LD_VAR 0 2
73026: NOT
73027: OR
73028: IFFALSE 73032
// exit ;
73030: GO 73122
// dist := 99999 ;
73032: LD_ADDR_VAR 0 5
73036: PUSH
73037: LD_INT 99999
73039: ST_TO_ADDR
// for i in points do
73040: LD_ADDR_VAR 0 4
73044: PUSH
73045: LD_VAR 0 2
73049: PUSH
73050: FOR_IN
73051: IFFALSE 73120
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
73053: LD_ADDR_VAR 0 6
73057: PUSH
73058: LD_VAR 0 1
73062: PPUSH
73063: LD_VAR 0 4
73067: PUSH
73068: LD_INT 1
73070: ARRAY
73071: PPUSH
73072: LD_VAR 0 4
73076: PUSH
73077: LD_INT 2
73079: ARRAY
73080: PPUSH
73081: CALL_OW 297
73085: ST_TO_ADDR
// if tmpDist < dist then
73086: LD_VAR 0 6
73090: PUSH
73091: LD_VAR 0 5
73095: LESS
73096: IFFALSE 73118
// begin result := i ;
73098: LD_ADDR_VAR 0 3
73102: PUSH
73103: LD_VAR 0 4
73107: ST_TO_ADDR
// dist := tmpDist ;
73108: LD_ADDR_VAR 0 5
73112: PUSH
73113: LD_VAR 0 6
73117: ST_TO_ADDR
// end ; end ;
73118: GO 73050
73120: POP
73121: POP
// end ;
73122: LD_VAR 0 3
73126: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
73127: LD_INT 0
73129: PPUSH
// uc_side := side ;
73130: LD_ADDR_OWVAR 20
73134: PUSH
73135: LD_VAR 0 1
73139: ST_TO_ADDR
// uc_nation := 3 ;
73140: LD_ADDR_OWVAR 21
73144: PUSH
73145: LD_INT 3
73147: ST_TO_ADDR
// vc_chassis := 25 ;
73148: LD_ADDR_OWVAR 37
73152: PUSH
73153: LD_INT 25
73155: ST_TO_ADDR
// vc_engine := engine_siberite ;
73156: LD_ADDR_OWVAR 39
73160: PUSH
73161: LD_INT 3
73163: ST_TO_ADDR
// vc_control := control_computer ;
73164: LD_ADDR_OWVAR 38
73168: PUSH
73169: LD_INT 3
73171: ST_TO_ADDR
// vc_weapon := 59 ;
73172: LD_ADDR_OWVAR 40
73176: PUSH
73177: LD_INT 59
73179: ST_TO_ADDR
// result := CreateVehicle ;
73180: LD_ADDR_VAR 0 5
73184: PUSH
73185: CALL_OW 45
73189: ST_TO_ADDR
// SetDir ( result , d ) ;
73190: LD_VAR 0 5
73194: PPUSH
73195: LD_VAR 0 4
73199: PPUSH
73200: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
73204: LD_VAR 0 5
73208: PPUSH
73209: LD_VAR 0 2
73213: PPUSH
73214: LD_VAR 0 3
73218: PPUSH
73219: LD_INT 0
73221: PPUSH
73222: CALL_OW 48
// end ;
73226: LD_VAR 0 5
73230: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
73231: LD_INT 0
73233: PPUSH
73234: PPUSH
73235: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
73236: LD_ADDR_VAR 0 2
73240: PUSH
73241: LD_INT 0
73243: PUSH
73244: LD_INT 0
73246: PUSH
73247: LD_INT 0
73249: PUSH
73250: LD_INT 0
73252: PUSH
73253: EMPTY
73254: LIST
73255: LIST
73256: LIST
73257: LIST
73258: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
73259: LD_VAR 0 1
73263: NOT
73264: PUSH
73265: LD_VAR 0 1
73269: PPUSH
73270: CALL_OW 264
73274: PUSH
73275: LD_INT 12
73277: PUSH
73278: LD_INT 51
73280: PUSH
73281: LD_INT 32
73283: PUSH
73284: LD_INT 89
73286: PUSH
73287: EMPTY
73288: LIST
73289: LIST
73290: LIST
73291: LIST
73292: IN
73293: NOT
73294: OR
73295: IFFALSE 73299
// exit ;
73297: GO 73397
// for i := 1 to 3 do
73299: LD_ADDR_VAR 0 3
73303: PUSH
73304: DOUBLE
73305: LD_INT 1
73307: DEC
73308: ST_TO_ADDR
73309: LD_INT 3
73311: PUSH
73312: FOR_TO
73313: IFFALSE 73395
// begin tmp := GetCargo ( cargo , i ) ;
73315: LD_ADDR_VAR 0 4
73319: PUSH
73320: LD_VAR 0 1
73324: PPUSH
73325: LD_VAR 0 3
73329: PPUSH
73330: CALL_OW 289
73334: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
73335: LD_ADDR_VAR 0 2
73339: PUSH
73340: LD_VAR 0 2
73344: PPUSH
73345: LD_VAR 0 3
73349: PPUSH
73350: LD_VAR 0 4
73354: PPUSH
73355: CALL_OW 1
73359: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
73360: LD_ADDR_VAR 0 2
73364: PUSH
73365: LD_VAR 0 2
73369: PPUSH
73370: LD_INT 4
73372: PPUSH
73373: LD_VAR 0 2
73377: PUSH
73378: LD_INT 4
73380: ARRAY
73381: PUSH
73382: LD_VAR 0 4
73386: PLUS
73387: PPUSH
73388: CALL_OW 1
73392: ST_TO_ADDR
// end ;
73393: GO 73312
73395: POP
73396: POP
// end ;
73397: LD_VAR 0 2
73401: RET
// export function Length ( array ) ; begin
73402: LD_INT 0
73404: PPUSH
// result := array + 0 ;
73405: LD_ADDR_VAR 0 2
73409: PUSH
73410: LD_VAR 0 1
73414: PUSH
73415: LD_INT 0
73417: PLUS
73418: ST_TO_ADDR
// end ;
73419: LD_VAR 0 2
73423: RET
// export function PrepareArray ( array ) ; begin
73424: LD_INT 0
73426: PPUSH
// result := array diff 0 ;
73427: LD_ADDR_VAR 0 2
73431: PUSH
73432: LD_VAR 0 1
73436: PUSH
73437: LD_INT 0
73439: DIFF
73440: ST_TO_ADDR
// if not result [ 1 ] then
73441: LD_VAR 0 2
73445: PUSH
73446: LD_INT 1
73448: ARRAY
73449: NOT
73450: IFFALSE 73470
// result := Delete ( result , 1 ) ;
73452: LD_ADDR_VAR 0 2
73456: PUSH
73457: LD_VAR 0 2
73461: PPUSH
73462: LD_INT 1
73464: PPUSH
73465: CALL_OW 3
73469: ST_TO_ADDR
// end ;
73470: LD_VAR 0 2
73474: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
73475: LD_INT 0
73477: PPUSH
73478: PPUSH
73479: PPUSH
73480: PPUSH
// sibRocketRange := 25 ;
73481: LD_ADDR_VAR 0 6
73485: PUSH
73486: LD_INT 25
73488: ST_TO_ADDR
// result := false ;
73489: LD_ADDR_VAR 0 4
73493: PUSH
73494: LD_INT 0
73496: ST_TO_ADDR
// for i := 0 to 5 do
73497: LD_ADDR_VAR 0 5
73501: PUSH
73502: DOUBLE
73503: LD_INT 0
73505: DEC
73506: ST_TO_ADDR
73507: LD_INT 5
73509: PUSH
73510: FOR_TO
73511: IFFALSE 73578
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
73513: LD_VAR 0 1
73517: PPUSH
73518: LD_VAR 0 5
73522: PPUSH
73523: LD_VAR 0 6
73527: PPUSH
73528: CALL_OW 272
73532: PPUSH
73533: LD_VAR 0 2
73537: PPUSH
73538: LD_VAR 0 5
73542: PPUSH
73543: LD_VAR 0 6
73547: PPUSH
73548: CALL_OW 273
73552: PPUSH
73553: LD_VAR 0 3
73557: PPUSH
73558: CALL_OW 309
73562: IFFALSE 73576
// begin result := true ;
73564: LD_ADDR_VAR 0 4
73568: PUSH
73569: LD_INT 1
73571: ST_TO_ADDR
// exit ;
73572: POP
73573: POP
73574: GO 73580
// end ;
73576: GO 73510
73578: POP
73579: POP
// end ;
73580: LD_VAR 0 4
73584: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
73585: LD_INT 0
73587: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
73588: LD_VAR 0 1
73592: PPUSH
73593: LD_VAR 0 2
73597: PPUSH
73598: LD_INT 0
73600: PPUSH
73601: LD_INT 0
73603: PPUSH
73604: LD_INT 1
73606: PPUSH
73607: LD_INT 0
73609: PPUSH
73610: CALL_OW 587
// end ;
73614: LD_VAR 0 3
73618: RET
// export function CenterOnNow ( unit ) ; begin
73619: LD_INT 0
73621: PPUSH
// result := IsInUnit ( unit ) ;
73622: LD_ADDR_VAR 0 2
73626: PUSH
73627: LD_VAR 0 1
73631: PPUSH
73632: CALL_OW 310
73636: ST_TO_ADDR
// if not result then
73637: LD_VAR 0 2
73641: NOT
73642: IFFALSE 73654
// result := unit ;
73644: LD_ADDR_VAR 0 2
73648: PUSH
73649: LD_VAR 0 1
73653: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
73654: LD_VAR 0 1
73658: PPUSH
73659: CALL_OW 87
// end ;
73663: LD_VAR 0 2
73667: RET
// export function ComMoveHex ( unit , hex ) ; begin
73668: LD_INT 0
73670: PPUSH
// if not hex then
73671: LD_VAR 0 2
73675: NOT
73676: IFFALSE 73680
// exit ;
73678: GO 73733
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
73680: LD_VAR 0 2
73684: PUSH
73685: LD_INT 1
73687: ARRAY
73688: PPUSH
73689: LD_VAR 0 2
73693: PUSH
73694: LD_INT 2
73696: ARRAY
73697: PPUSH
73698: CALL_OW 428
73702: IFFALSE 73706
// exit ;
73704: GO 73733
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
73706: LD_VAR 0 1
73710: PPUSH
73711: LD_VAR 0 2
73715: PUSH
73716: LD_INT 1
73718: ARRAY
73719: PPUSH
73720: LD_VAR 0 2
73724: PUSH
73725: LD_INT 2
73727: ARRAY
73728: PPUSH
73729: CALL_OW 111
// end ;
73733: LD_VAR 0 3
73737: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
73738: LD_INT 0
73740: PPUSH
73741: PPUSH
73742: PPUSH
// if not unit or not enemy then
73743: LD_VAR 0 1
73747: NOT
73748: PUSH
73749: LD_VAR 0 2
73753: NOT
73754: OR
73755: IFFALSE 73759
// exit ;
73757: GO 73883
// x := GetX ( enemy ) ;
73759: LD_ADDR_VAR 0 4
73763: PUSH
73764: LD_VAR 0 2
73768: PPUSH
73769: CALL_OW 250
73773: ST_TO_ADDR
// y := GetY ( enemy ) ;
73774: LD_ADDR_VAR 0 5
73778: PUSH
73779: LD_VAR 0 2
73783: PPUSH
73784: CALL_OW 251
73788: ST_TO_ADDR
// if ValidHex ( x , y ) then
73789: LD_VAR 0 4
73793: PPUSH
73794: LD_VAR 0 5
73798: PPUSH
73799: CALL_OW 488
73803: IFFALSE 73883
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
73805: LD_VAR 0 2
73809: PPUSH
73810: CALL_OW 247
73814: PUSH
73815: LD_INT 3
73817: PUSH
73818: LD_INT 2
73820: PUSH
73821: EMPTY
73822: LIST
73823: LIST
73824: IN
73825: PUSH
73826: LD_VAR 0 1
73830: PPUSH
73831: CALL_OW 255
73835: PPUSH
73836: LD_VAR 0 2
73840: PPUSH
73841: CALL_OW 292
73845: AND
73846: IFFALSE 73864
// ComAttackUnit ( unit , enemy ) else
73848: LD_VAR 0 1
73852: PPUSH
73853: LD_VAR 0 2
73857: PPUSH
73858: CALL_OW 115
73862: GO 73883
// ComAgressiveMove ( unit , x , y ) ;
73864: LD_VAR 0 1
73868: PPUSH
73869: LD_VAR 0 4
73873: PPUSH
73874: LD_VAR 0 5
73878: PPUSH
73879: CALL_OW 114
// end ; end_of_file
73883: LD_VAR 0 3
73887: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
73888: LD_VAR 0 1
73892: PUSH
73893: LD_INT 200
73895: DOUBLE
73896: GREATEREQUAL
73897: IFFALSE 73905
73899: LD_INT 299
73901: DOUBLE
73902: LESSEQUAL
73903: IFTRUE 73907
73905: GO 73939
73907: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
73908: LD_VAR 0 1
73912: PPUSH
73913: LD_VAR 0 2
73917: PPUSH
73918: LD_VAR 0 3
73922: PPUSH
73923: LD_VAR 0 4
73927: PPUSH
73928: LD_VAR 0 5
73932: PPUSH
73933: CALL 28432 0 5
73937: GO 74016
73939: LD_INT 300
73941: DOUBLE
73942: GREATEREQUAL
73943: IFFALSE 73951
73945: LD_INT 399
73947: DOUBLE
73948: LESSEQUAL
73949: IFTRUE 73953
73951: GO 74015
73953: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
73954: LD_VAR 0 1
73958: PPUSH
73959: LD_VAR 0 2
73963: PPUSH
73964: LD_VAR 0 3
73968: PPUSH
73969: LD_VAR 0 4
73973: PPUSH
73974: LD_VAR 0 5
73978: PPUSH
73979: LD_VAR 0 6
73983: PPUSH
73984: LD_VAR 0 7
73988: PPUSH
73989: LD_VAR 0 8
73993: PPUSH
73994: LD_VAR 0 9
73998: PPUSH
73999: LD_VAR 0 10
74003: PPUSH
74004: LD_VAR 0 11
74008: PPUSH
74009: CALL 24757 0 11
74013: GO 74016
74015: POP
// end ;
74016: PPOPN 11
74018: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
74019: LD_VAR 0 1
74023: PPUSH
74024: LD_VAR 0 2
74028: PPUSH
74029: LD_VAR 0 3
74033: PPUSH
74034: LD_VAR 0 4
74038: PPUSH
74039: LD_VAR 0 5
74043: PPUSH
74044: CALL 28168 0 5
// end ; end_of_file
74048: PPOPN 5
74050: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
74051: LD_VAR 0 1
74055: PPUSH
74056: LD_VAR 0 2
74060: PPUSH
74061: LD_VAR 0 3
74065: PPUSH
74066: LD_VAR 0 4
74070: PPUSH
74071: LD_VAR 0 5
74075: PPUSH
74076: LD_VAR 0 6
74080: PPUSH
74081: CALL 12409 0 6
// end ;
74085: PPOPN 6
74087: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
74088: LD_INT 0
74090: PPUSH
// begin if not units then
74091: LD_VAR 0 1
74095: NOT
74096: IFFALSE 74100
// exit ;
74098: GO 74100
// end ;
74100: PPOPN 7
74102: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
74103: CALL 12313 0 0
// end ;
74107: PPOPN 1
74109: END
