// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// Init ;
   8: CALL 44 0 0
// DebugMode ;
  12: CALL 265 0 0
// AnimateTrees ( true ) ;
  16: LD_INT 1
  18: PPUSH
  19: CALL_OW 573
// CreateNature ;
  23: CALL 1568 0 0
// PrepareRussians ;
  27: CALL 4578 0 0
// PrepareAmericans ;
  31: CALL 3448 0 0
// Action ;
  35: CALL 8696 0 0
// SaveForQuickRestart ;
  39: CALL_OW 22
// end ;
  43: END
// export debug ; export mission_prev_prefix , mission_prefix ; export buildings_counter , time_to_end , can_end , must_end , kill_counter ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// mission_prefix := 07c_ ;
  55: LD_ADDR_EXP 3
  59: PUSH
  60: LD_STRING 07c_
  62: ST_TO_ADDR
// mission_prev_prefix := 07_ ;
  63: LD_ADDR_EXP 2
  67: PUSH
  68: LD_STRING 07_
  70: ST_TO_ADDR
// buildings_counter := 0 ;
  71: LD_ADDR_EXP 4
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// time_to_end := [ [ 32 32$00 , 29 29$00 , 26 26$00 , 23 23$00 ] [ Difficulty ] , [ 38 38$00 , 36 36$00 , 34 34$00 , 32 32$00 ] [ Difficulty ] , [ 43 43$00 , 41 41$00 , 39 39$00 , 37 37$00 ] [ Difficulty ] ] ;
  79: LD_ADDR_EXP 5
  83: PUSH
  84: LD_INT 67200
  86: PUSH
  87: LD_INT 60900
  89: PUSH
  90: LD_INT 54600
  92: PUSH
  93: LD_INT 48300
  95: PUSH
  96: EMPTY
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: PUSH
 102: LD_OWVAR 67
 106: ARRAY
 107: PUSH
 108: LD_INT 79800
 110: PUSH
 111: LD_INT 75600
 113: PUSH
 114: LD_INT 71400
 116: PUSH
 117: LD_INT 67200
 119: PUSH
 120: EMPTY
 121: LIST
 122: LIST
 123: LIST
 124: LIST
 125: PUSH
 126: LD_OWVAR 67
 130: ARRAY
 131: PUSH
 132: LD_INT 90300
 134: PUSH
 135: LD_INT 86100
 137: PUSH
 138: LD_INT 81900
 140: PUSH
 141: LD_INT 77700
 143: PUSH
 144: EMPTY
 145: LIST
 146: LIST
 147: LIST
 148: LIST
 149: PUSH
 150: LD_OWVAR 67
 154: ARRAY
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: ST_TO_ADDR
// can_end := false ;
 161: LD_ADDR_EXP 6
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// must_end := false ;
 169: LD_ADDR_EXP 7
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// kill_counter := 0 ;
 177: LD_ADDR_EXP 8
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// end ;
 185: LD_VAR 0 1
 189: RET
// every 0 0$01 trigger not debug do
 190: LD_EXP 1
 194: NOT
 195: IFFALSE 264
 197: GO 199
 199: DISABLE
// begin enable ;
 200: ENABLE
// if not must_end then
 201: LD_EXP 7
 205: NOT
 206: IFFALSE 227
// display_strings := [ #Am07-1 , tick ] else
 208: LD_ADDR_OWVAR 47
 212: PUSH
 213: LD_STRING #Am07-1
 215: PUSH
 216: LD_OWVAR 1
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: ST_TO_ADDR
 225: GO 264
// display_strings := [ #Am07-1 , tick , #Am07-2 , time_to_end [ 3 ] - tick ] ;
 227: LD_ADDR_OWVAR 47
 231: PUSH
 232: LD_STRING #Am07-1
 234: PUSH
 235: LD_OWVAR 1
 239: PUSH
 240: LD_STRING #Am07-2
 242: PUSH
 243: LD_EXP 5
 247: PUSH
 248: LD_INT 3
 250: ARRAY
 251: PUSH
 252: LD_OWVAR 1
 256: MINUS
 257: PUSH
 258: EMPTY
 259: LIST
 260: LIST
 261: LIST
 262: LIST
 263: ST_TO_ADDR
// end ;
 264: END
// function DebugMode ; var i ; begin
 265: LD_INT 0
 267: PPUSH
 268: PPUSH
// if not debug then
 269: LD_EXP 1
 273: NOT
 274: IFFALSE 278
// exit ;
 276: GO 293
// Difficulty := 4 ;
 278: LD_ADDR_OWVAR 67
 282: PUSH
 283: LD_INT 4
 285: ST_TO_ADDR
// FogOff ( 1 ) ;
 286: LD_INT 1
 288: PPUSH
 289: CALL_OW 344
// end ;
 293: LD_VAR 0 1
 297: RET
// every 3 trigger debug do var i , filter ;
 298: LD_EXP 1
 302: IFFALSE 391
 304: GO 306
 306: DISABLE
 307: LD_INT 0
 309: PPUSH
 310: PPUSH
// begin enable ;
 311: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 500 ] ] ] ) ;
 312: LD_ADDR_VAR 0 2
 316: PUSH
 317: LD_INT 22
 319: PUSH
 320: LD_INT 1
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PUSH
 327: LD_INT 3
 329: PUSH
 330: LD_INT 24
 332: PUSH
 333: LD_INT 500
 335: PUSH
 336: EMPTY
 337: LIST
 338: LIST
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: PPUSH
 348: CALL_OW 69
 352: ST_TO_ADDR
// if not filter then
 353: LD_VAR 0 2
 357: NOT
 358: IFFALSE 362
// exit ;
 360: GO 391
// for i in filter do
 362: LD_ADDR_VAR 0 1
 366: PUSH
 367: LD_VAR 0 2
 371: PUSH
 372: FOR_IN
 373: IFFALSE 389
// SetLives ( i , 1000 ) ;
 375: LD_VAR 0 1
 379: PPUSH
 380: LD_INT 1000
 382: PPUSH
 383: CALL_OW 234
 387: GO 372
 389: POP
 390: POP
// end ;
 391: PPOPN 2
 393: END
// every 0 0$1 trigger kill_counter >= 20 do
 394: LD_EXP 8
 398: PUSH
 399: LD_INT 20
 401: GREATEREQUAL
 402: IFFALSE 414
 404: GO 406
 406: DISABLE
// SetAchievement ( ACH_HITMAN ) ;
 407: LD_STRING ACH_HITMAN
 409: PPUSH
 410: CALL_OW 543
 414: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) >= 3 do
 415: LD_INT 22
 417: PUSH
 418: LD_INT 1
 420: PUSH
 421: EMPTY
 422: LIST
 423: LIST
 424: PUSH
 425: LD_INT 23
 427: PUSH
 428: LD_INT 3
 430: PUSH
 431: EMPTY
 432: LIST
 433: LIST
 434: PUSH
 435: LD_INT 21
 437: PUSH
 438: LD_INT 2
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: LIST
 449: PPUSH
 450: CALL_OW 69
 454: PUSH
 455: LD_INT 3
 457: GREATEREQUAL
 458: IFFALSE 470
 460: GO 462
 462: DISABLE
// SetAchievement ( ACH_TANKACE ) ;
 463: LD_STRING ACH_TANKACE
 465: PPUSH
 466: CALL_OW 543
 470: END
// every 0 0$1 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) = 0 do
 471: LD_INT 2
 473: PUSH
 474: LD_INT 30
 476: PUSH
 477: LD_INT 0
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PUSH
 484: LD_INT 30
 486: PUSH
 487: LD_INT 1
 489: PUSH
 490: EMPTY
 491: LIST
 492: LIST
 493: PUSH
 494: EMPTY
 495: LIST
 496: LIST
 497: LIST
 498: PPUSH
 499: CALL_OW 69
 503: PUSH
 504: LD_INT 0
 506: EQUAL
 507: IFFALSE 519
 509: GO 511
 511: DISABLE
// SetAchievement ( ACH_COMMANDO ) ; end_of_file
 512: LD_STRING ACH_COMMANDO
 514: PPUSH
 515: CALL_OW 543
 519: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 520: LD_INT 0
 522: PPUSH
// uc_side := side ;
 523: LD_ADDR_OWVAR 20
 527: PUSH
 528: LD_VAR 0 1
 532: ST_TO_ADDR
// uc_nation := nation ;
 533: LD_ADDR_OWVAR 21
 537: PUSH
 538: LD_VAR 0 2
 542: ST_TO_ADDR
// vc_chassis := chassis ;
 543: LD_ADDR_OWVAR 37
 547: PUSH
 548: LD_VAR 0 3
 552: ST_TO_ADDR
// vc_engine := engine ;
 553: LD_ADDR_OWVAR 39
 557: PUSH
 558: LD_VAR 0 4
 562: ST_TO_ADDR
// vc_control := control ;
 563: LD_ADDR_OWVAR 38
 567: PUSH
 568: LD_VAR 0 5
 572: ST_TO_ADDR
// vc_weapon := weapon ;
 573: LD_ADDR_OWVAR 40
 577: PUSH
 578: LD_VAR 0 6
 582: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 583: LD_ADDR_OWVAR 41
 587: PUSH
 588: LD_VAR 0 7
 592: ST_TO_ADDR
// result := CreateVehicle ;
 593: LD_ADDR_VAR 0 8
 597: PUSH
 598: CALL_OW 45
 602: ST_TO_ADDR
// end ;
 603: LD_VAR 0 8
 607: RET
// export function GetRandom ( sex ) ; var i , filter ; begin
 608: LD_INT 0
 610: PPUSH
 611: PPUSH
 612: PPUSH
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] ;
 613: LD_ADDR_VAR 0 4
 617: PUSH
 618: LD_INT 22
 620: PUSH
 621: LD_INT 1
 623: PUSH
 624: EMPTY
 625: LIST
 626: LIST
 627: PUSH
 628: LD_INT 21
 630: PUSH
 631: LD_INT 1
 633: PUSH
 634: EMPTY
 635: LIST
 636: LIST
 637: PUSH
 638: LD_INT 50
 640: PUSH
 641: EMPTY
 642: LIST
 643: PUSH
 644: EMPTY
 645: LIST
 646: LIST
 647: LIST
 648: PPUSH
 649: CALL_OW 69
 653: PUSH
 654: LD_EXP 9
 658: PUSH
 659: LD_EXP 10
 663: PUSH
 664: LD_EXP 11
 668: PUSH
 669: LD_EXP 12
 673: PUSH
 674: LD_EXP 13
 678: PUSH
 679: LD_EXP 14
 683: PUSH
 684: LD_EXP 15
 688: PUSH
 689: LD_EXP 16
 693: PUSH
 694: LD_EXP 18
 698: PUSH
 699: LD_EXP 17
 703: PUSH
 704: EMPTY
 705: LIST
 706: LIST
 707: LIST
 708: LIST
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: DIFF
 716: ST_TO_ADDR
// if not filter then
 717: LD_VAR 0 4
 721: NOT
 722: IFFALSE 726
// exit ;
 724: GO 753
// result := UnitFilter ( filter , [ f_sex , sex ] ) ;
 726: LD_ADDR_VAR 0 2
 730: PUSH
 731: LD_VAR 0 4
 735: PPUSH
 736: LD_INT 26
 738: PUSH
 739: LD_VAR 0 1
 743: PUSH
 744: EMPTY
 745: LIST
 746: LIST
 747: PPUSH
 748: CALL_OW 72
 752: ST_TO_ADDR
// end ;
 753: LD_VAR 0 2
 757: RET
// export function SayX ( units , ident ) ; var i ; begin
 758: LD_INT 0
 760: PPUSH
 761: PPUSH
// result := false ;
 762: LD_ADDR_VAR 0 3
 766: PUSH
 767: LD_INT 0
 769: ST_TO_ADDR
// if not units then
 770: LD_VAR 0 1
 774: NOT
 775: IFFALSE 779
// exit ;
 777: GO 833
// for i in units do
 779: LD_ADDR_VAR 0 4
 783: PUSH
 784: LD_VAR 0 1
 788: PUSH
 789: FOR_IN
 790: IFFALSE 831
// if IsOk ( i ) then
 792: LD_VAR 0 4
 796: PPUSH
 797: CALL_OW 302
 801: IFFALSE 829
// begin Say ( i , ident ) ;
 803: LD_VAR 0 4
 807: PPUSH
 808: LD_VAR 0 2
 812: PPUSH
 813: CALL_OW 88
// result := i ;
 817: LD_ADDR_VAR 0 3
 821: PUSH
 822: LD_VAR 0 4
 826: ST_TO_ADDR
// break ;
 827: GO 831
// end ;
 829: GO 789
 831: POP
 832: POP
// end ;
 833: LD_VAR 0 3
 837: RET
// export function GoToAnotherTower ( un , b , x , y ) ; var i , filter , barracks , side ; begin
 838: LD_INT 0
 840: PPUSH
 841: PPUSH
 842: PPUSH
 843: PPUSH
 844: PPUSH
// if not un or not IsOk ( un ) then
 845: LD_VAR 0 1
 849: NOT
 850: PUSH
 851: LD_VAR 0 1
 855: PPUSH
 856: CALL_OW 302
 860: NOT
 861: OR
 862: IFFALSE 866
// exit ;
 864: GO 1173
// side := GetSide ( un ) ;
 866: LD_ADDR_VAR 0 9
 870: PUSH
 871: LD_VAR 0 1
 875: PPUSH
 876: CALL_OW 255
 880: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_not , [ f_tag , 7 ] ] , [ f_ok ] , [ f_empty ] ] ) diff b ;
 881: LD_ADDR_VAR 0 7
 885: PUSH
 886: LD_INT 22
 888: PUSH
 889: LD_VAR 0 9
 893: PUSH
 894: EMPTY
 895: LIST
 896: LIST
 897: PUSH
 898: LD_INT 30
 900: PUSH
 901: LD_INT 32
 903: PUSH
 904: EMPTY
 905: LIST
 906: LIST
 907: PUSH
 908: LD_INT 3
 910: PUSH
 911: LD_INT 120
 913: PUSH
 914: LD_INT 7
 916: PUSH
 917: EMPTY
 918: LIST
 919: LIST
 920: PUSH
 921: EMPTY
 922: LIST
 923: LIST
 924: PUSH
 925: LD_INT 50
 927: PUSH
 928: EMPTY
 929: LIST
 930: PUSH
 931: LD_INT 58
 933: PUSH
 934: EMPTY
 935: LIST
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: LIST
 941: LIST
 942: LIST
 943: PPUSH
 944: CALL_OW 69
 948: PUSH
 949: LD_VAR 0 2
 953: DIFF
 954: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_barracks ] ] ) ;
 955: LD_ADDR_VAR 0 8
 959: PUSH
 960: LD_INT 22
 962: PUSH
 963: LD_VAR 0 9
 967: PUSH
 968: EMPTY
 969: LIST
 970: LIST
 971: PUSH
 972: LD_INT 30
 974: PUSH
 975: LD_INT 5
 977: PUSH
 978: EMPTY
 979: LIST
 980: LIST
 981: PUSH
 982: EMPTY
 983: LIST
 984: LIST
 985: PPUSH
 986: CALL_OW 69
 990: ST_TO_ADDR
// if not filter then
 991: LD_VAR 0 7
 995: NOT
 996: IFFALSE 1086
// begin if barracks then
 998: LD_VAR 0 8
1002: IFFALSE 1065
// for i in barracks do
1004: LD_ADDR_VAR 0 6
1008: PUSH
1009: LD_VAR 0 8
1013: PUSH
1014: FOR_IN
1015: IFFALSE 1063
// begin if UnitsInside ( i ) < 6 and IsOk ( i ) then
1017: LD_VAR 0 6
1021: PPUSH
1022: CALL_OW 313
1026: PUSH
1027: LD_INT 6
1029: LESS
1030: PUSH
1031: LD_VAR 0 6
1035: PPUSH
1036: CALL_OW 302
1040: AND
1041: IFFALSE 1061
// begin ComEnterUnit ( un , i ) ;
1043: LD_VAR 0 1
1047: PPUSH
1048: LD_VAR 0 6
1052: PPUSH
1053: CALL_OW 120
// exit ;
1057: POP
1058: POP
1059: GO 1173
// end ; end ;
1061: GO 1014
1063: POP
1064: POP
// ComMoveXY ( un , x , y ) ;
1065: LD_VAR 0 1
1069: PPUSH
1070: LD_VAR 0 3
1074: PPUSH
1075: LD_VAR 0 4
1079: PPUSH
1080: CALL_OW 111
// end else
1084: GO 1173
// begin filter := SortByDistanceUnit ( un , filter , true , true ) ;
1086: LD_ADDR_VAR 0 7
1090: PUSH
1091: LD_VAR 0 1
1095: PPUSH
1096: LD_VAR 0 7
1100: PPUSH
1101: LD_INT 1
1103: PPUSH
1104: LD_INT 1
1106: PPUSH
1107: CALL 38411 0 4
1111: ST_TO_ADDR
// if filter then
1112: LD_VAR 0 7
1116: IFFALSE 1154
// begin SetTag ( filter [ 1 ] , 7 ) ;
1118: LD_VAR 0 7
1122: PUSH
1123: LD_INT 1
1125: ARRAY
1126: PPUSH
1127: LD_INT 7
1129: PPUSH
1130: CALL_OW 109
// ComEnterUnit ( un , filter [ 1 ] ) ;
1134: LD_VAR 0 1
1138: PPUSH
1139: LD_VAR 0 7
1143: PUSH
1144: LD_INT 1
1146: ARRAY
1147: PPUSH
1148: CALL_OW 120
// end else
1152: GO 1173
// ComMoveXY ( un , x , y ) ;
1154: LD_VAR 0 1
1158: PPUSH
1159: LD_VAR 0 3
1163: PPUSH
1164: LD_VAR 0 4
1168: PPUSH
1169: CALL_OW 111
// end ; end ;
1173: LD_VAR 0 5
1177: RET
// export function BaseNeedEnergy ( base ) ; var i , tmp ; begin
1178: LD_INT 0
1180: PPUSH
1181: PPUSH
1182: PPUSH
// if not base then
1183: LD_VAR 0 1
1187: NOT
1188: IFFALSE 1192
// exit ;
1190: GO 1250
// tmp := GetEnergy ( GetBase ( base ) ) ;
1192: LD_ADDR_VAR 0 4
1196: PUSH
1197: LD_VAR 0 1
1201: PPUSH
1202: CALL_OW 274
1206: PPUSH
1207: CALL_OW 278
1211: ST_TO_ADDR
// if tmp [ 1 ] > tmp [ 4 ] then
1212: LD_VAR 0 4
1216: PUSH
1217: LD_INT 1
1219: ARRAY
1220: PUSH
1221: LD_VAR 0 4
1225: PUSH
1226: LD_INT 4
1228: ARRAY
1229: GREATER
1230: IFFALSE 1242
// result := true else
1232: LD_ADDR_VAR 0 2
1236: PUSH
1237: LD_INT 1
1239: ST_TO_ADDR
1240: GO 1250
// result := false ;
1242: LD_ADDR_VAR 0 2
1246: PUSH
1247: LD_INT 0
1249: ST_TO_ADDR
// end ;
1250: LD_VAR 0 2
1254: RET
// export function FilterPeople ( side ) ; begin
1255: LD_INT 0
1257: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) ;
1258: LD_ADDR_VAR 0 2
1262: PUSH
1263: LD_INT 22
1265: PUSH
1266: LD_VAR 0 1
1270: PUSH
1271: EMPTY
1272: LIST
1273: LIST
1274: PUSH
1275: LD_INT 21
1277: PUSH
1278: LD_INT 1
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: PPUSH
1289: CALL_OW 69
1293: ST_TO_ADDR
// end ;
1294: LD_VAR 0 2
1298: RET
// export function FilterDrivers ( side ) ; begin
1299: LD_INT 0
1301: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_outside ] ] ] ) ;
1302: LD_ADDR_VAR 0 2
1306: PUSH
1307: LD_INT 22
1309: PUSH
1310: LD_VAR 0 1
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: PUSH
1319: LD_INT 3
1321: PUSH
1322: LD_INT 56
1324: PUSH
1325: EMPTY
1326: LIST
1327: PUSH
1328: EMPTY
1329: LIST
1330: LIST
1331: PUSH
1332: EMPTY
1333: LIST
1334: LIST
1335: PPUSH
1336: CALL_OW 69
1340: ST_TO_ADDR
// end ;
1341: LD_VAR 0 2
1345: RET
// export function FilterPeopleArea ( side , area ) ; begin
1346: LD_INT 0
1348: PPUSH
// result := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
1349: LD_ADDR_VAR 0 3
1353: PUSH
1354: LD_VAR 0 2
1358: PPUSH
1359: LD_INT 22
1361: PUSH
1362: LD_INT 1
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: PUSH
1369: LD_INT 21
1371: PUSH
1372: LD_INT 1
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: PUSH
1379: EMPTY
1380: LIST
1381: LIST
1382: PPUSH
1383: CALL_OW 70
1387: ST_TO_ADDR
// end ;
1388: LD_VAR 0 3
1392: RET
// export function FilterDriversArea ( side , area ) ; var i , tmp ; begin
1393: LD_INT 0
1395: PPUSH
1396: PPUSH
1397: PPUSH
// tmp := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
1398: LD_ADDR_VAR 0 5
1402: PUSH
1403: LD_VAR 0 2
1407: PPUSH
1408: LD_INT 22
1410: PUSH
1411: LD_INT 1
1413: PUSH
1414: EMPTY
1415: LIST
1416: LIST
1417: PUSH
1418: LD_INT 21
1420: PUSH
1421: LD_INT 2
1423: PUSH
1424: EMPTY
1425: LIST
1426: LIST
1427: PUSH
1428: LD_INT 3
1430: PUSH
1431: LD_INT 58
1433: PUSH
1434: EMPTY
1435: LIST
1436: PUSH
1437: EMPTY
1438: LIST
1439: LIST
1440: PUSH
1441: EMPTY
1442: LIST
1443: LIST
1444: LIST
1445: PPUSH
1446: CALL_OW 70
1450: ST_TO_ADDR
// result := [ ] ;
1451: LD_ADDR_VAR 0 3
1455: PUSH
1456: EMPTY
1457: ST_TO_ADDR
// if not tmp then
1458: LD_VAR 0 5
1462: NOT
1463: IFFALSE 1467
// exit ;
1465: GO 1519
// for i in tmp do
1467: LD_ADDR_VAR 0 4
1471: PUSH
1472: LD_VAR 0 5
1476: PUSH
1477: FOR_IN
1478: IFFALSE 1503
// result := result union IsDrivenBy ( i ) ;
1480: LD_ADDR_VAR 0 3
1484: PUSH
1485: LD_VAR 0 3
1489: PUSH
1490: LD_VAR 0 4
1494: PPUSH
1495: CALL_OW 311
1499: UNION
1500: ST_TO_ADDR
1501: GO 1477
1503: POP
1504: POP
// result := result diff 0 ;
1505: LD_ADDR_VAR 0 3
1509: PUSH
1510: LD_VAR 0 3
1514: PUSH
1515: LD_INT 0
1517: DIFF
1518: ST_TO_ADDR
// end ;
1519: LD_VAR 0 3
1523: RET
// export function FilterBuildings ( side ) ; begin
1524: LD_INT 0
1526: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
1527: LD_ADDR_VAR 0 2
1531: PUSH
1532: LD_INT 22
1534: PUSH
1535: LD_VAR 0 1
1539: PUSH
1540: EMPTY
1541: LIST
1542: LIST
1543: PUSH
1544: LD_INT 21
1546: PUSH
1547: LD_INT 3
1549: PUSH
1550: EMPTY
1551: LIST
1552: LIST
1553: PUSH
1554: EMPTY
1555: LIST
1556: LIST
1557: PPUSH
1558: CALL_OW 69
1562: ST_TO_ADDR
// end ;
1563: LD_VAR 0 2
1567: RET
// export function CreateNature ; var i , animal , nat_area ; begin
1568: LD_INT 0
1570: PPUSH
1571: PPUSH
1572: PPUSH
1573: PPUSH
// uc_side = 0 ;
1574: LD_ADDR_OWVAR 20
1578: PUSH
1579: LD_INT 0
1581: ST_TO_ADDR
// uc_nation = 0 ;
1582: LD_ADDR_OWVAR 21
1586: PUSH
1587: LD_INT 0
1589: ST_TO_ADDR
// nat_area := wildArea ;
1590: LD_ADDR_VAR 0 4
1594: PUSH
1595: LD_INT 3
1597: ST_TO_ADDR
// InitHc ;
1598: CALL_OW 19
// for i = 1 to 4 do
1602: LD_ADDR_VAR 0 2
1606: PUSH
1607: DOUBLE
1608: LD_INT 1
1610: DEC
1611: ST_TO_ADDR
1612: LD_INT 4
1614: PUSH
1615: FOR_TO
1616: IFFALSE 1671
// begin hc_class = 18 ;
1618: LD_ADDR_OWVAR 28
1622: PUSH
1623: LD_INT 18
1625: ST_TO_ADDR
// hc_gallery =  ;
1626: LD_ADDR_OWVAR 33
1630: PUSH
1631: LD_STRING 
1633: ST_TO_ADDR
// hc_face_number = 1 ;
1634: LD_ADDR_OWVAR 34
1638: PUSH
1639: LD_INT 1
1641: ST_TO_ADDR
// animal := CreateHuman ;
1642: LD_ADDR_VAR 0 3
1646: PUSH
1647: CALL_OW 44
1651: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1652: LD_VAR 0 3
1656: PPUSH
1657: LD_VAR 0 4
1661: PPUSH
1662: LD_INT 0
1664: PPUSH
1665: CALL_OW 49
// end ;
1669: GO 1615
1671: POP
1672: POP
// for i = 1 to 6 do
1673: LD_ADDR_VAR 0 2
1677: PUSH
1678: DOUBLE
1679: LD_INT 1
1681: DEC
1682: ST_TO_ADDR
1683: LD_INT 6
1685: PUSH
1686: FOR_TO
1687: IFFALSE 1758
// begin hc_class = class_tiger ;
1689: LD_ADDR_OWVAR 28
1693: PUSH
1694: LD_INT 14
1696: ST_TO_ADDR
// hc_gallery =  ;
1697: LD_ADDR_OWVAR 33
1701: PUSH
1702: LD_STRING 
1704: ST_TO_ADDR
// hc_agressivity = Rand ( 0 , 10 ) ;
1705: LD_ADDR_OWVAR 35
1709: PUSH
1710: LD_INT 0
1712: PPUSH
1713: LD_INT 10
1715: PPUSH
1716: CALL_OW 12
1720: ST_TO_ADDR
// hc_face_number = 3 ;
1721: LD_ADDR_OWVAR 34
1725: PUSH
1726: LD_INT 3
1728: ST_TO_ADDR
// animal := CreateHuman ;
1729: LD_ADDR_VAR 0 3
1733: PUSH
1734: CALL_OW 44
1738: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1739: LD_VAR 0 3
1743: PPUSH
1744: LD_VAR 0 4
1748: PPUSH
1749: LD_INT 0
1751: PPUSH
1752: CALL_OW 49
// end ;
1756: GO 1686
1758: POP
1759: POP
// for i = 1 to 2 do
1760: LD_ADDR_VAR 0 2
1764: PUSH
1765: DOUBLE
1766: LD_INT 1
1768: DEC
1769: ST_TO_ADDR
1770: LD_INT 2
1772: PUSH
1773: FOR_TO
1774: IFFALSE 1837
// begin hc_class = 21 ;
1776: LD_ADDR_OWVAR 28
1780: PUSH
1781: LD_INT 21
1783: ST_TO_ADDR
// hc_gallery =  ;
1784: LD_ADDR_OWVAR 33
1788: PUSH
1789: LD_STRING 
1791: ST_TO_ADDR
// hc_agressivity = 0 ;
1792: LD_ADDR_OWVAR 35
1796: PUSH
1797: LD_INT 0
1799: ST_TO_ADDR
// hc_face_number = 5 ;
1800: LD_ADDR_OWVAR 34
1804: PUSH
1805: LD_INT 5
1807: ST_TO_ADDR
// animal := CreateHuman ;
1808: LD_ADDR_VAR 0 3
1812: PUSH
1813: CALL_OW 44
1817: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1818: LD_VAR 0 3
1822: PPUSH
1823: LD_VAR 0 4
1827: PPUSH
1828: LD_INT 0
1830: PPUSH
1831: CALL_OW 49
// end ;
1835: GO 1773
1837: POP
1838: POP
// for i = 1 to 6 do
1839: LD_ADDR_VAR 0 2
1843: PUSH
1844: DOUBLE
1845: LD_INT 1
1847: DEC
1848: ST_TO_ADDR
1849: LD_INT 6
1851: PUSH
1852: FOR_TO
1853: IFFALSE 1908
// begin hc_class = 13 ;
1855: LD_ADDR_OWVAR 28
1859: PUSH
1860: LD_INT 13
1862: ST_TO_ADDR
// hc_gallery =  ;
1863: LD_ADDR_OWVAR 33
1867: PUSH
1868: LD_STRING 
1870: ST_TO_ADDR
// hc_face_number = 4 ;
1871: LD_ADDR_OWVAR 34
1875: PUSH
1876: LD_INT 4
1878: ST_TO_ADDR
// animal := CreateHuman ;
1879: LD_ADDR_VAR 0 3
1883: PUSH
1884: CALL_OW 44
1888: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1889: LD_VAR 0 3
1893: PPUSH
1894: LD_VAR 0 4
1898: PPUSH
1899: LD_INT 0
1901: PPUSH
1902: CALL_OW 49
// end ;
1906: GO 1852
1908: POP
1909: POP
// for i = 1 to 2 do
1910: LD_ADDR_VAR 0 2
1914: PUSH
1915: DOUBLE
1916: LD_INT 1
1918: DEC
1919: ST_TO_ADDR
1920: LD_INT 2
1922: PUSH
1923: FOR_TO
1924: IFFALSE 1983
// begin hc_class = 20 ;
1926: LD_ADDR_OWVAR 28
1930: PUSH
1931: LD_INT 20
1933: ST_TO_ADDR
// hc_gallery =  ;
1934: LD_ADDR_OWVAR 33
1938: PUSH
1939: LD_STRING 
1941: ST_TO_ADDR
// hc_face_number = 2 ;
1942: LD_ADDR_OWVAR 34
1946: PUSH
1947: LD_INT 2
1949: ST_TO_ADDR
// animal := CreateHuman ;
1950: LD_ADDR_VAR 0 3
1954: PUSH
1955: CALL_OW 44
1959: ST_TO_ADDR
// PlaceUnitXYR ( animal , 101 , 37 , 3 , false ) ;
1960: LD_VAR 0 3
1964: PPUSH
1965: LD_INT 101
1967: PPUSH
1968: LD_INT 37
1970: PPUSH
1971: LD_INT 3
1973: PPUSH
1974: LD_INT 0
1976: PPUSH
1977: CALL_OW 50
// end ;
1981: GO 1923
1983: POP
1984: POP
// for i = 1 to 1 do
1985: LD_ADDR_VAR 0 2
1989: PUSH
1990: DOUBLE
1991: LD_INT 1
1993: DEC
1994: ST_TO_ADDR
1995: LD_INT 1
1997: PUSH
1998: FOR_TO
1999: IFFALSE 2046
// begin vc_chassis := 31 ;
2001: LD_ADDR_OWVAR 37
2005: PUSH
2006: LD_INT 31
2008: ST_TO_ADDR
// vc_control := control_rider ;
2009: LD_ADDR_OWVAR 38
2013: PUSH
2014: LD_INT 4
2016: ST_TO_ADDR
// animal := CreateVehicle ;
2017: LD_ADDR_VAR 0 3
2021: PUSH
2022: CALL_OW 45
2026: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
2027: LD_VAR 0 3
2031: PPUSH
2032: LD_VAR 0 4
2036: PPUSH
2037: LD_INT 0
2039: PPUSH
2040: CALL_OW 49
// end ;
2044: GO 1998
2046: POP
2047: POP
// end ;
2048: LD_VAR 0 1
2052: RET
// export function NearbyTowerHasEnergy ( unit ) ; var i , tmp , energy ; begin
2053: LD_INT 0
2055: PPUSH
2056: PPUSH
2057: PPUSH
2058: PPUSH
// result := [ ] ;
2059: LD_ADDR_VAR 0 2
2063: PUSH
2064: EMPTY
2065: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_dist , unit , 15 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
2066: LD_ADDR_VAR 0 4
2070: PUSH
2071: LD_INT 81
2073: PUSH
2074: LD_VAR 0 1
2078: PPUSH
2079: CALL_OW 255
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: PUSH
2088: LD_INT 91
2090: PUSH
2091: LD_VAR 0 1
2095: PUSH
2096: LD_INT 15
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: LIST
2103: PUSH
2104: LD_INT 2
2106: PUSH
2107: LD_INT 30
2109: PUSH
2110: LD_INT 32
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: PUSH
2117: LD_INT 30
2119: PUSH
2120: LD_INT 33
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: PUSH
2127: EMPTY
2128: LIST
2129: LIST
2130: LIST
2131: PUSH
2132: EMPTY
2133: LIST
2134: LIST
2135: LIST
2136: PPUSH
2137: CALL_OW 69
2141: ST_TO_ADDR
// if not tmp then
2142: LD_VAR 0 4
2146: NOT
2147: IFFALSE 2151
// exit ;
2149: GO 2220
// for i in tmp do
2151: LD_ADDR_VAR 0 3
2155: PUSH
2156: LD_VAR 0 4
2160: PUSH
2161: FOR_IN
2162: IFFALSE 2218
// begin energy := GetEnergy ( GetBase ( i ) ) ;
2164: LD_ADDR_VAR 0 5
2168: PUSH
2169: LD_VAR 0 3
2173: PPUSH
2174: CALL_OW 274
2178: PPUSH
2179: CALL_OW 278
2183: ST_TO_ADDR
// if energy [ 4 ] > energy [ 1 ] then
2184: LD_VAR 0 5
2188: PUSH
2189: LD_INT 4
2191: ARRAY
2192: PUSH
2193: LD_VAR 0 5
2197: PUSH
2198: LD_INT 1
2200: ARRAY
2201: GREATER
2202: IFFALSE 2216
// begin result := i ;
2204: LD_ADDR_VAR 0 2
2208: PUSH
2209: LD_VAR 0 3
2213: ST_TO_ADDR
// break ;
2214: GO 2218
// end ; end ;
2216: GO 2161
2218: POP
2219: POP
// end ;
2220: LD_VAR 0 2
2224: RET
// export function GetTurretWeaponBase ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
2225: LD_INT 0
2227: PPUSH
2228: PPUSH
2229: PPUSH
2230: PPUSH
2231: PPUSH
2232: PPUSH
2233: PPUSH
2234: PPUSH
2235: PPUSH
2236: PPUSH
2237: PPUSH
2238: PPUSH
2239: PPUSH
2240: PPUSH
2241: PPUSH
2242: PPUSH
// result := false ;
2243: LD_ADDR_VAR 0 2
2247: PUSH
2248: LD_INT 0
2250: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
2251: LD_VAR 0 1
2255: NOT
2256: PUSH
2257: LD_VAR 0 1
2261: PPUSH
2262: CALL_OW 266
2266: PUSH
2267: LD_INT 32
2269: PUSH
2270: LD_INT 33
2272: PUSH
2273: EMPTY
2274: LIST
2275: LIST
2276: IN
2277: NOT
2278: OR
2279: IFFALSE 2283
// exit ;
2281: GO 3443
// nat := GetNation ( tower ) ;
2283: LD_ADDR_VAR 0 11
2287: PUSH
2288: LD_VAR 0 1
2292: PPUSH
2293: CALL_OW 248
2297: ST_TO_ADDR
// side := GetSide ( tower ) ;
2298: LD_ADDR_VAR 0 15
2302: PUSH
2303: LD_VAR 0 1
2307: PPUSH
2308: CALL_OW 255
2312: ST_TO_ADDR
// x := GetX ( tower ) ;
2313: LD_ADDR_VAR 0 9
2317: PUSH
2318: LD_VAR 0 1
2322: PPUSH
2323: CALL_OW 250
2327: ST_TO_ADDR
// y := GetY ( tower ) ;
2328: LD_ADDR_VAR 0 10
2332: PUSH
2333: LD_VAR 0 1
2337: PPUSH
2338: CALL_OW 251
2342: ST_TO_ADDR
// if not x or not y then
2343: LD_VAR 0 9
2347: NOT
2348: PUSH
2349: LD_VAR 0 10
2353: NOT
2354: OR
2355: IFFALSE 2359
// exit ;
2357: GO 3443
// weapon := 0 ;
2359: LD_ADDR_VAR 0 17
2363: PUSH
2364: LD_INT 0
2366: ST_TO_ADDR
// fac_list := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
2367: LD_ADDR_VAR 0 16
2371: PUSH
2372: LD_INT 42
2374: PUSH
2375: LD_INT 43
2377: PUSH
2378: LD_INT 44
2380: PUSH
2381: LD_INT 46
2383: PUSH
2384: EMPTY
2385: LIST
2386: LIST
2387: LIST
2388: LIST
2389: ST_TO_ADDR
// if not fac_list then
2390: LD_VAR 0 16
2394: NOT
2395: IFFALSE 2399
// exit ;
2397: GO 3443
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
2399: LD_ADDR_VAR 0 4
2403: PUSH
2404: LD_INT 4
2406: PUSH
2407: LD_INT 5
2409: PUSH
2410: LD_INT 9
2412: PUSH
2413: LD_INT 10
2415: PUSH
2416: LD_INT 6
2418: PUSH
2419: LD_INT 7
2421: PUSH
2422: LD_INT 11
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: LIST
2429: LIST
2430: LIST
2431: LIST
2432: LIST
2433: PUSH
2434: LD_INT 27
2436: PUSH
2437: LD_INT 28
2439: PUSH
2440: LD_INT 26
2442: PUSH
2443: LD_INT 30
2445: PUSH
2446: EMPTY
2447: LIST
2448: LIST
2449: LIST
2450: LIST
2451: PUSH
2452: LD_INT 43
2454: PUSH
2455: LD_INT 44
2457: PUSH
2458: LD_INT 46
2460: PUSH
2461: LD_INT 45
2463: PUSH
2464: LD_INT 47
2466: PUSH
2467: LD_INT 49
2469: PUSH
2470: EMPTY
2471: LIST
2472: LIST
2473: LIST
2474: LIST
2475: LIST
2476: LIST
2477: PUSH
2478: EMPTY
2479: LIST
2480: LIST
2481: LIST
2482: PUSH
2483: LD_VAR 0 11
2487: ARRAY
2488: ST_TO_ADDR
// for i in list do
2489: LD_ADDR_VAR 0 7
2493: PUSH
2494: LD_VAR 0 4
2498: PUSH
2499: FOR_IN
2500: IFFALSE 2533
// if not i in fac_list then
2502: LD_VAR 0 7
2506: PUSH
2507: LD_VAR 0 16
2511: IN
2512: NOT
2513: IFFALSE 2531
// list := list diff i ;
2515: LD_ADDR_VAR 0 4
2519: PUSH
2520: LD_VAR 0 4
2524: PUSH
2525: LD_VAR 0 7
2529: DIFF
2530: ST_TO_ADDR
2531: GO 2499
2533: POP
2534: POP
// if not list then
2535: LD_VAR 0 4
2539: NOT
2540: IFFALSE 2544
// exit ;
2542: GO 3443
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
2544: LD_VAR 0 11
2548: PUSH
2549: LD_INT 3
2551: EQUAL
2552: PUSH
2553: LD_INT 49
2555: PUSH
2556: LD_VAR 0 4
2560: IN
2561: AND
2562: PUSH
2563: LD_INT 31
2565: PPUSH
2566: LD_VAR 0 15
2570: PPUSH
2571: CALL_OW 321
2575: PUSH
2576: LD_INT 2
2578: EQUAL
2579: AND
2580: IFFALSE 2640
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
2582: LD_INT 22
2584: PUSH
2585: LD_VAR 0 15
2589: PUSH
2590: EMPTY
2591: LIST
2592: LIST
2593: PUSH
2594: LD_INT 35
2596: PUSH
2597: LD_INT 49
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: PUSH
2604: LD_INT 91
2606: PUSH
2607: LD_VAR 0 1
2611: PUSH
2612: LD_INT 10
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: LIST
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: LIST
2624: PPUSH
2625: CALL_OW 69
2629: NOT
2630: IFFALSE 2640
// weapon := ru_time_lapser ;
2632: LD_ADDR_VAR 0 17
2636: PUSH
2637: LD_INT 49
2639: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
2640: LD_VAR 0 11
2644: PUSH
2645: LD_INT 1
2647: PUSH
2648: LD_INT 2
2650: PUSH
2651: EMPTY
2652: LIST
2653: LIST
2654: IN
2655: PUSH
2656: LD_INT 11
2658: PUSH
2659: LD_VAR 0 4
2663: IN
2664: PUSH
2665: LD_INT 30
2667: PUSH
2668: LD_VAR 0 4
2672: IN
2673: OR
2674: AND
2675: PUSH
2676: LD_INT 6
2678: PPUSH
2679: LD_VAR 0 15
2683: PPUSH
2684: CALL_OW 321
2688: PUSH
2689: LD_INT 2
2691: EQUAL
2692: AND
2693: IFFALSE 2858
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
2695: LD_INT 22
2697: PUSH
2698: LD_VAR 0 15
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: PUSH
2707: LD_INT 2
2709: PUSH
2710: LD_INT 35
2712: PUSH
2713: LD_INT 11
2715: PUSH
2716: EMPTY
2717: LIST
2718: LIST
2719: PUSH
2720: LD_INT 35
2722: PUSH
2723: LD_INT 30
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: LIST
2734: PUSH
2735: LD_INT 91
2737: PUSH
2738: LD_VAR 0 1
2742: PUSH
2743: LD_INT 18
2745: PUSH
2746: EMPTY
2747: LIST
2748: LIST
2749: LIST
2750: PUSH
2751: EMPTY
2752: LIST
2753: LIST
2754: LIST
2755: PPUSH
2756: CALL_OW 69
2760: NOT
2761: PUSH
2762: LD_INT 22
2764: PUSH
2765: LD_VAR 0 15
2769: PUSH
2770: EMPTY
2771: LIST
2772: LIST
2773: PUSH
2774: LD_INT 2
2776: PUSH
2777: LD_INT 30
2779: PUSH
2780: LD_INT 32
2782: PUSH
2783: EMPTY
2784: LIST
2785: LIST
2786: PUSH
2787: LD_INT 30
2789: PUSH
2790: LD_INT 33
2792: PUSH
2793: EMPTY
2794: LIST
2795: LIST
2796: PUSH
2797: EMPTY
2798: LIST
2799: LIST
2800: LIST
2801: PUSH
2802: LD_INT 91
2804: PUSH
2805: LD_VAR 0 1
2809: PUSH
2810: LD_INT 12
2812: PUSH
2813: EMPTY
2814: LIST
2815: LIST
2816: LIST
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: LIST
2822: PUSH
2823: EMPTY
2824: LIST
2825: PPUSH
2826: CALL_OW 69
2830: PUSH
2831: LD_INT 2
2833: GREATER
2834: AND
2835: IFFALSE 2858
// weapon := [ us_radar , ar_radar ] [ nat ] ;
2837: LD_ADDR_VAR 0 17
2841: PUSH
2842: LD_INT 11
2844: PUSH
2845: LD_INT 30
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: PUSH
2852: LD_VAR 0 11
2856: ARRAY
2857: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
2858: LD_VAR 0 17
2862: NOT
2863: PUSH
2864: LD_INT 40
2866: PPUSH
2867: LD_VAR 0 15
2871: PPUSH
2872: CALL_OW 321
2876: PUSH
2877: LD_INT 2
2879: EQUAL
2880: AND
2881: PUSH
2882: LD_INT 7
2884: PUSH
2885: LD_VAR 0 4
2889: IN
2890: PUSH
2891: LD_INT 28
2893: PUSH
2894: LD_VAR 0 4
2898: IN
2899: OR
2900: PUSH
2901: LD_INT 45
2903: PUSH
2904: LD_VAR 0 4
2908: IN
2909: OR
2910: AND
2911: IFFALSE 3165
// begin hex := GetHexInfo ( x , y ) ;
2913: LD_ADDR_VAR 0 3
2917: PUSH
2918: LD_VAR 0 9
2922: PPUSH
2923: LD_VAR 0 10
2927: PPUSH
2928: CALL_OW 546
2932: ST_TO_ADDR
// if hex [ 1 ] then
2933: LD_VAR 0 3
2937: PUSH
2938: LD_INT 1
2940: ARRAY
2941: IFFALSE 2945
// exit ;
2943: GO 3443
// height := hex [ 2 ] ;
2945: LD_ADDR_VAR 0 14
2949: PUSH
2950: LD_VAR 0 3
2954: PUSH
2955: LD_INT 2
2957: ARRAY
2958: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
2959: LD_ADDR_VAR 0 13
2963: PUSH
2964: LD_INT 0
2966: PUSH
2967: LD_INT 2
2969: PUSH
2970: LD_INT 3
2972: PUSH
2973: LD_INT 5
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: LIST
2980: LIST
2981: ST_TO_ADDR
// for i in tmp do
2982: LD_ADDR_VAR 0 7
2986: PUSH
2987: LD_VAR 0 13
2991: PUSH
2992: FOR_IN
2993: IFFALSE 3163
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
2995: LD_ADDR_VAR 0 8
2999: PUSH
3000: LD_VAR 0 9
3004: PPUSH
3005: LD_VAR 0 7
3009: PPUSH
3010: LD_INT 5
3012: PPUSH
3013: CALL_OW 272
3017: PUSH
3018: LD_VAR 0 10
3022: PPUSH
3023: LD_VAR 0 7
3027: PPUSH
3028: LD_INT 5
3030: PPUSH
3031: CALL_OW 273
3035: PUSH
3036: EMPTY
3037: LIST
3038: LIST
3039: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
3040: LD_VAR 0 8
3044: PUSH
3045: LD_INT 1
3047: ARRAY
3048: PPUSH
3049: LD_VAR 0 8
3053: PUSH
3054: LD_INT 2
3056: ARRAY
3057: PPUSH
3058: CALL_OW 488
3062: IFFALSE 3161
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
3064: LD_ADDR_VAR 0 3
3068: PUSH
3069: LD_VAR 0 8
3073: PUSH
3074: LD_INT 1
3076: ARRAY
3077: PPUSH
3078: LD_VAR 0 8
3082: PUSH
3083: LD_INT 2
3085: ARRAY
3086: PPUSH
3087: CALL_OW 546
3091: ST_TO_ADDR
// if hex [ 1 ] then
3092: LD_VAR 0 3
3096: PUSH
3097: LD_INT 1
3099: ARRAY
3100: IFFALSE 3104
// continue ;
3102: GO 2992
// h := hex [ 2 ] ;
3104: LD_ADDR_VAR 0 12
3108: PUSH
3109: LD_VAR 0 3
3113: PUSH
3114: LD_INT 2
3116: ARRAY
3117: ST_TO_ADDR
// if h + 7 < height then
3118: LD_VAR 0 12
3122: PUSH
3123: LD_INT 7
3125: PLUS
3126: PUSH
3127: LD_VAR 0 14
3131: LESS
3132: IFFALSE 3161
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
3134: LD_ADDR_VAR 0 17
3138: PUSH
3139: LD_INT 7
3141: PUSH
3142: LD_INT 28
3144: PUSH
3145: LD_INT 45
3147: PUSH
3148: EMPTY
3149: LIST
3150: LIST
3151: LIST
3152: PUSH
3153: LD_VAR 0 11
3157: ARRAY
3158: ST_TO_ADDR
// break ;
3159: GO 3163
// end ; end ; end ;
3161: GO 2992
3163: POP
3164: POP
// end ; if not weapon then
3165: LD_VAR 0 17
3169: NOT
3170: IFFALSE 3325
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
3172: LD_ADDR_VAR 0 4
3176: PUSH
3177: LD_VAR 0 4
3181: PUSH
3182: LD_INT 11
3184: PUSH
3185: LD_INT 30
3187: PUSH
3188: LD_INT 49
3190: PUSH
3191: EMPTY
3192: LIST
3193: LIST
3194: LIST
3195: DIFF
3196: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , tower , 6 ] , [ f_not , [ f_bweapon , 0 ] ] ] ) ;
3197: LD_ADDR_VAR 0 13
3201: PUSH
3202: LD_INT 22
3204: PUSH
3205: LD_VAR 0 15
3209: PUSH
3210: EMPTY
3211: LIST
3212: LIST
3213: PUSH
3214: LD_INT 91
3216: PUSH
3217: LD_VAR 0 1
3221: PUSH
3222: LD_INT 6
3224: PUSH
3225: EMPTY
3226: LIST
3227: LIST
3228: LIST
3229: PUSH
3230: LD_INT 3
3232: PUSH
3233: LD_INT 35
3235: PUSH
3236: LD_INT 0
3238: PUSH
3239: EMPTY
3240: LIST
3241: LIST
3242: PUSH
3243: EMPTY
3244: LIST
3245: LIST
3246: PUSH
3247: EMPTY
3248: LIST
3249: LIST
3250: LIST
3251: PPUSH
3252: CALL_OW 69
3256: ST_TO_ADDR
// for i in tmp do
3257: LD_ADDR_VAR 0 7
3261: PUSH
3262: LD_VAR 0 13
3266: PUSH
3267: FOR_IN
3268: IFFALSE 3293
// list := list diff GetBWeapon ( i ) ;
3270: LD_ADDR_VAR 0 4
3274: PUSH
3275: LD_VAR 0 4
3279: PUSH
3280: LD_VAR 0 7
3284: PPUSH
3285: CALL_OW 269
3289: DIFF
3290: ST_TO_ADDR
3291: GO 3267
3293: POP
3294: POP
// if list then
3295: LD_VAR 0 4
3299: IFFALSE 3325
// weapon := list [ rand ( 1 , list ) ] ;
3301: LD_ADDR_VAR 0 17
3305: PUSH
3306: LD_VAR 0 4
3310: PUSH
3311: LD_INT 1
3313: PPUSH
3314: LD_VAR 0 4
3318: PPUSH
3319: CALL_OW 12
3323: ARRAY
3324: ST_TO_ADDR
// end ; if weapon then
3325: LD_VAR 0 17
3329: IFFALSE 3443
// begin tmp := CostOfWeapon ( weapon ) ;
3331: LD_ADDR_VAR 0 13
3335: PUSH
3336: LD_VAR 0 17
3340: PPUSH
3341: CALL_OW 451
3345: ST_TO_ADDR
// j := GetBase ( tower ) ;
3346: LD_ADDR_VAR 0 8
3350: PUSH
3351: LD_VAR 0 1
3355: PPUSH
3356: CALL_OW 274
3360: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
3361: LD_VAR 0 8
3365: PPUSH
3366: LD_INT 1
3368: PPUSH
3369: CALL_OW 275
3373: PUSH
3374: LD_VAR 0 13
3378: PUSH
3379: LD_INT 1
3381: ARRAY
3382: GREATEREQUAL
3383: PUSH
3384: LD_VAR 0 8
3388: PPUSH
3389: LD_INT 2
3391: PPUSH
3392: CALL_OW 275
3396: PUSH
3397: LD_VAR 0 13
3401: PUSH
3402: LD_INT 2
3404: ARRAY
3405: GREATEREQUAL
3406: AND
3407: PUSH
3408: LD_VAR 0 8
3412: PPUSH
3413: LD_INT 3
3415: PPUSH
3416: CALL_OW 275
3420: PUSH
3421: LD_VAR 0 13
3425: PUSH
3426: LD_INT 3
3428: ARRAY
3429: GREATEREQUAL
3430: AND
3431: IFFALSE 3443
// result := weapon ;
3433: LD_ADDR_VAR 0 2
3437: PUSH
3438: LD_VAR 0 17
3442: ST_TO_ADDR
// end ; end ; end_of_file
3443: LD_VAR 0 2
3447: RET
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Khatam , Kikuchi , Harisson ; export function PrepareAmericans ; var i , team , others , veh , m ; begin
3448: LD_INT 0
3450: PPUSH
3451: PPUSH
3452: PPUSH
3453: PPUSH
3454: PPUSH
3455: PPUSH
// uc_side := 1 ;
3456: LD_ADDR_OWVAR 20
3460: PUSH
3461: LD_INT 1
3463: ST_TO_ADDR
// uc_nation := 1 ;
3464: LD_ADDR_OWVAR 21
3468: PUSH
3469: LD_INT 1
3471: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prev_prefix ) ;
3472: LD_ADDR_EXP 9
3476: PUSH
3477: LD_STRING JMM
3479: PPUSH
3480: LD_EXP 1
3484: NOT
3485: PPUSH
3486: LD_EXP 2
3490: PPUSH
3491: CALL 33014 0 3
3495: ST_TO_ADDR
// team := [ JMM ] ;
3496: LD_ADDR_VAR 0 3
3500: PUSH
3501: LD_EXP 9
3505: PUSH
3506: EMPTY
3507: LIST
3508: ST_TO_ADDR
// if LoadVariable ( BrownIn07 , debug ) then
3509: LD_STRING BrownIn07
3511: PPUSH
3512: LD_EXP 1
3516: PPUSH
3517: CALL_OW 30
3521: IFFALSE 3547
// Brown := PrepareUnit ( Brown , ( not debug ) , mission_prev_prefix ) ;
3523: LD_ADDR_EXP 10
3527: PUSH
3528: LD_STRING Brown
3530: PPUSH
3531: LD_EXP 1
3535: NOT
3536: PPUSH
3537: LD_EXP 2
3541: PPUSH
3542: CALL 33014 0 3
3546: ST_TO_ADDR
// if Brown then
3547: LD_EXP 10
3551: IFFALSE 3569
// team := team ^ Brown ;
3553: LD_ADDR_VAR 0 3
3557: PUSH
3558: LD_VAR 0 3
3562: PUSH
3563: LD_EXP 10
3567: ADD
3568: ST_TO_ADDR
// if LoadVariable ( DonaldsonIn07 , debug ) then
3569: LD_STRING DonaldsonIn07
3571: PPUSH
3572: LD_EXP 1
3576: PPUSH
3577: CALL_OW 30
3581: IFFALSE 3607
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prev_prefix ) ;
3583: LD_ADDR_EXP 11
3587: PUSH
3588: LD_STRING Donaldson
3590: PPUSH
3591: LD_EXP 1
3595: NOT
3596: PPUSH
3597: LD_EXP 2
3601: PPUSH
3602: CALL 33014 0 3
3606: ST_TO_ADDR
// if Donaldson then
3607: LD_EXP 11
3611: IFFALSE 3629
// team := team ^ Donaldson ;
3613: LD_ADDR_VAR 0 3
3617: PUSH
3618: LD_VAR 0 3
3622: PUSH
3623: LD_EXP 11
3627: ADD
3628: ST_TO_ADDR
// if LoadVariable ( BobbyIn07 , debug ) then
3629: LD_STRING BobbyIn07
3631: PPUSH
3632: LD_EXP 1
3636: PPUSH
3637: CALL_OW 30
3641: IFFALSE 3667
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prev_prefix ) ;
3643: LD_ADDR_EXP 12
3647: PUSH
3648: LD_STRING Bobby
3650: PPUSH
3651: LD_EXP 1
3655: NOT
3656: PPUSH
3657: LD_EXP 2
3661: PPUSH
3662: CALL 33014 0 3
3666: ST_TO_ADDR
// if Bobby then
3667: LD_EXP 12
3671: IFFALSE 3689
// team := team ^ Bobby ;
3673: LD_ADDR_VAR 0 3
3677: PUSH
3678: LD_VAR 0 3
3682: PUSH
3683: LD_EXP 12
3687: ADD
3688: ST_TO_ADDR
// if LoadVariable ( CyrusIn07 , debug ) then
3689: LD_STRING CyrusIn07
3691: PPUSH
3692: LD_EXP 1
3696: PPUSH
3697: CALL_OW 30
3701: IFFALSE 3727
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prev_prefix ) ;
3703: LD_ADDR_EXP 13
3707: PUSH
3708: LD_STRING Cyrus
3710: PPUSH
3711: LD_EXP 1
3715: NOT
3716: PPUSH
3717: LD_EXP 2
3721: PPUSH
3722: CALL 33014 0 3
3726: ST_TO_ADDR
// if Cyrus then
3727: LD_EXP 13
3731: IFFALSE 3749
// team := team ^ Cyrus ;
3733: LD_ADDR_VAR 0 3
3737: PUSH
3738: LD_VAR 0 3
3742: PUSH
3743: LD_EXP 13
3747: ADD
3748: ST_TO_ADDR
// if LoadVariable ( LisaIn07 , debug ) then
3749: LD_STRING LisaIn07
3751: PPUSH
3752: LD_EXP 1
3756: PPUSH
3757: CALL_OW 30
3761: IFFALSE 3787
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prev_prefix ) ;
3763: LD_ADDR_EXP 14
3767: PUSH
3768: LD_STRING Lisa
3770: PPUSH
3771: LD_EXP 1
3775: NOT
3776: PPUSH
3777: LD_EXP 2
3781: PPUSH
3782: CALL 33014 0 3
3786: ST_TO_ADDR
// if Lisa then
3787: LD_EXP 14
3791: IFFALSE 3809
// team := team ^ Lisa ;
3793: LD_ADDR_VAR 0 3
3797: PUSH
3798: LD_VAR 0 3
3802: PUSH
3803: LD_EXP 14
3807: ADD
3808: ST_TO_ADDR
// if LoadVariable ( GladstoneIn07 , debug ) then
3809: LD_STRING GladstoneIn07
3811: PPUSH
3812: LD_EXP 1
3816: PPUSH
3817: CALL_OW 30
3821: IFFALSE 3847
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , mission_prev_prefix ) ;
3823: LD_ADDR_EXP 16
3827: PUSH
3828: LD_STRING Gladstone
3830: PPUSH
3831: LD_EXP 1
3835: NOT
3836: PPUSH
3837: LD_EXP 2
3841: PPUSH
3842: CALL 33014 0 3
3846: ST_TO_ADDR
// if Gladstone then
3847: LD_EXP 16
3851: IFFALSE 3869
// team := team ^ Gladstone ;
3853: LD_ADDR_VAR 0 3
3857: PUSH
3858: LD_VAR 0 3
3862: PUSH
3863: LD_EXP 16
3867: ADD
3868: ST_TO_ADDR
// if LoadVariable ( KhatamIn07 , debug ) then
3869: LD_STRING KhatamIn07
3871: PPUSH
3872: LD_EXP 1
3876: PPUSH
3877: CALL_OW 30
3881: IFFALSE 3907
// Khatam := PrepareUnit ( Khatam , ( not debug ) , mission_prev_prefix ) ;
3883: LD_ADDR_EXP 17
3887: PUSH
3888: LD_STRING Khatam
3890: PPUSH
3891: LD_EXP 1
3895: NOT
3896: PPUSH
3897: LD_EXP 2
3901: PPUSH
3902: CALL 33014 0 3
3906: ST_TO_ADDR
// if Khatam then
3907: LD_EXP 17
3911: IFFALSE 3929
// team := team ^ Khatam ;
3913: LD_ADDR_VAR 0 3
3917: PUSH
3918: LD_VAR 0 3
3922: PUSH
3923: LD_EXP 17
3927: ADD
3928: ST_TO_ADDR
// others := CreateCharacterSet ( 07_others ) ;
3929: LD_ADDR_VAR 0 4
3933: PUSH
3934: LD_STRING 07_others
3936: PPUSH
3937: CALL_OW 31
3941: ST_TO_ADDR
// if others then
3942: LD_VAR 0 4
3946: IFFALSE 3964
// team := team ^ others ;
3948: LD_ADDR_VAR 0 3
3952: PUSH
3953: LD_VAR 0 3
3957: PUSH
3958: LD_VAR 0 4
3962: ADD
3963: ST_TO_ADDR
// if debug then
3964: LD_EXP 1
3968: IFFALSE 4042
// begin InitHc ;
3970: CALL_OW 19
// for i = 1 to 4 do
3974: LD_ADDR_VAR 0 2
3978: PUSH
3979: DOUBLE
3980: LD_INT 1
3982: DEC
3983: ST_TO_ADDR
3984: LD_INT 4
3986: PUSH
3987: FOR_TO
3988: IFFALSE 4040
// begin PrepareHuman ( false , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , 4 ) ;
3990: LD_INT 0
3992: PPUSH
3993: LD_INT 1
3995: PUSH
3996: LD_INT 3
3998: PUSH
3999: EMPTY
4000: LIST
4001: LIST
4002: PUSH
4003: LD_INT 1
4005: PPUSH
4006: LD_INT 2
4008: PPUSH
4009: CALL_OW 12
4013: ARRAY
4014: PPUSH
4015: LD_INT 4
4017: PPUSH
4018: CALL_OW 380
// team := team ^ CreateHuman ;
4022: LD_ADDR_VAR 0 3
4026: PUSH
4027: LD_VAR 0 3
4031: PUSH
4032: CALL_OW 44
4036: ADD
4037: ST_TO_ADDR
// end ;
4038: GO 3987
4040: POP
4041: POP
// end ; m := 0 ;
4042: LD_ADDR_VAR 0 6
4046: PUSH
4047: LD_INT 0
4049: ST_TO_ADDR
// for i in team do
4050: LD_ADDR_VAR 0 2
4054: PUSH
4055: LD_VAR 0 3
4059: PUSH
4060: FOR_IN
4061: IFFALSE 4268
// if GetClass ( i ) = 3 then
4063: LD_VAR 0 2
4067: PPUSH
4068: CALL_OW 257
4072: PUSH
4073: LD_INT 3
4075: EQUAL
4076: IFFALSE 4224
// begin m := m + 1 ;
4078: LD_ADDR_VAR 0 6
4082: PUSH
4083: LD_VAR 0 6
4087: PUSH
4088: LD_INT 1
4090: PLUS
4091: ST_TO_ADDR
// veh := PrepareTank ( 1 , 1 , [ us_medium_wheeled , us_medium_tracked , us_medium_wheeled , us_light_wheeled ] [ m mod 4 + 1 ] , engine_solar , control_manual , [ us_gatling_gun , us_double_gun , us_light_gun , us_radar ] [ m mod 4 + 1 ] , 60 ) ;
4092: LD_ADDR_VAR 0 5
4096: PUSH
4097: LD_INT 1
4099: PPUSH
4100: LD_INT 1
4102: PPUSH
4103: LD_INT 2
4105: PUSH
4106: LD_INT 3
4108: PUSH
4109: LD_INT 2
4111: PUSH
4112: LD_INT 1
4114: PUSH
4115: EMPTY
4116: LIST
4117: LIST
4118: LIST
4119: LIST
4120: PUSH
4121: LD_VAR 0 6
4125: PUSH
4126: LD_INT 4
4128: MOD
4129: PUSH
4130: LD_INT 1
4132: PLUS
4133: ARRAY
4134: PPUSH
4135: LD_INT 2
4137: PPUSH
4138: LD_INT 1
4140: PPUSH
4141: LD_INT 4
4143: PUSH
4144: LD_INT 5
4146: PUSH
4147: LD_INT 3
4149: PUSH
4150: LD_INT 11
4152: PUSH
4153: EMPTY
4154: LIST
4155: LIST
4156: LIST
4157: LIST
4158: PUSH
4159: LD_VAR 0 6
4163: PUSH
4164: LD_INT 4
4166: MOD
4167: PUSH
4168: LD_INT 1
4170: PLUS
4171: ARRAY
4172: PPUSH
4173: LD_INT 60
4175: PPUSH
4176: CALL 520 0 7
4180: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
4181: LD_VAR 0 5
4185: PPUSH
4186: LD_INT 2
4188: PPUSH
4189: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
4193: LD_VAR 0 5
4197: PPUSH
4198: LD_INT 1
4200: PPUSH
4201: LD_INT 0
4203: PPUSH
4204: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
4208: LD_VAR 0 2
4212: PPUSH
4213: LD_VAR 0 5
4217: PPUSH
4218: CALL_OW 52
// end else
4222: GO 4266
// begin if GetClass ( i ) = 2 then
4224: LD_VAR 0 2
4228: PPUSH
4229: CALL_OW 257
4233: PUSH
4234: LD_INT 2
4236: EQUAL
4237: IFFALSE 4251
// SetClass ( i , 1 ) ;
4239: LD_VAR 0 2
4243: PPUSH
4244: LD_INT 1
4246: PPUSH
4247: CALL_OW 336
// PlaceUnitArea ( i , startArea , false ) ;
4251: LD_VAR 0 2
4255: PPUSH
4256: LD_INT 1
4258: PPUSH
4259: LD_INT 0
4261: PPUSH
4262: CALL_OW 49
// end ;
4266: GO 4060
4268: POP
4269: POP
// uc_side := 4 ;
4270: LD_ADDR_OWVAR 20
4274: PUSH
4275: LD_INT 4
4277: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
4278: LD_ADDR_EXP 19
4282: PUSH
4283: LD_STRING Harisson
4285: PPUSH
4286: LD_INT 0
4288: PPUSH
4289: LD_STRING 
4291: PPUSH
4292: CALL 33014 0 3
4296: ST_TO_ADDR
// PrepareScout ;
4297: CALL 4306 0 0
// end ;
4301: LD_VAR 0 1
4305: RET
// function PrepareScout ; var ape ; begin
4306: LD_INT 0
4308: PPUSH
4309: PPUSH
// uc_side := 4 ;
4310: LD_ADDR_OWVAR 20
4314: PUSH
4315: LD_INT 4
4317: ST_TO_ADDR
// uc_nation := 1 ;
4318: LD_ADDR_OWVAR 21
4322: PUSH
4323: LD_INT 1
4325: ST_TO_ADDR
// if LoadVariable ( FrankIn06 , 0 ) then
4326: LD_STRING FrankIn06
4328: PPUSH
4329: LD_INT 0
4331: PPUSH
4332: CALL_OW 30
4336: IFFALSE 4353
// Frank := CreateCharacter ( 06c_Frank ) else
4338: LD_ADDR_EXP 15
4342: PUSH
4343: LD_STRING 06c_Frank
4345: PPUSH
4346: CALL_OW 34
4350: ST_TO_ADDR
4351: GO 4393
// if LoadVariable ( FrankInDelta , 0 ) then
4353: LD_STRING FrankInDelta
4355: PPUSH
4356: LD_INT 0
4358: PPUSH
4359: CALL_OW 30
4363: IFFALSE 4380
// Frank := CreateCharacter ( 05_Frank ) else
4365: LD_ADDR_EXP 15
4369: PUSH
4370: LD_STRING 05_Frank
4372: PPUSH
4373: CALL_OW 34
4377: ST_TO_ADDR
4378: GO 4393
// Frank := CreateCharacter ( 04_Frank ) ;
4380: LD_ADDR_EXP 15
4384: PUSH
4385: LD_STRING 04_Frank
4387: PPUSH
4388: CALL_OW 34
4392: ST_TO_ADDR
// if Frank then
4393: LD_EXP 15
4397: IFFALSE 4530
// begin PlaceUnitArea ( Frank , scoutArea , false ) ;
4399: LD_EXP 15
4403: PPUSH
4404: LD_INT 2
4406: PPUSH
4407: LD_INT 0
4409: PPUSH
4410: CALL_OW 49
// SetClass ( Frank , 1 ) ;
4414: LD_EXP 15
4418: PPUSH
4419: LD_INT 1
4421: PPUSH
4422: CALL_OW 336
// uc_side := 0 ;
4426: LD_ADDR_OWVAR 20
4430: PUSH
4431: LD_INT 0
4433: ST_TO_ADDR
// uc_nation := 0 ;
4434: LD_ADDR_OWVAR 21
4438: PUSH
4439: LD_INT 0
4441: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 0 ) ;
4442: LD_INT 0
4444: PPUSH
4445: LD_INT 12
4447: PPUSH
4448: LD_INT 0
4450: PPUSH
4451: CALL_OW 380
// ape := CreateHuman ;
4455: LD_ADDR_VAR 0 2
4459: PUSH
4460: CALL_OW 44
4464: ST_TO_ADDR
// PlaceUnitXYR ( ape , GetX ( Frank ) , GetY ( Frank ) , 5 , false ) ;
4465: LD_VAR 0 2
4469: PPUSH
4470: LD_EXP 15
4474: PPUSH
4475: CALL_OW 250
4479: PPUSH
4480: LD_EXP 15
4484: PPUSH
4485: CALL_OW 251
4489: PPUSH
4490: LD_INT 5
4492: PPUSH
4493: LD_INT 0
4495: PPUSH
4496: CALL_OW 50
// ComTurnUnit ( ape , Frank ) ;
4500: LD_VAR 0 2
4504: PPUSH
4505: LD_EXP 15
4509: PPUSH
4510: CALL_OW 119
// ComTurnUnit ( Frank , ape ) ;
4514: LD_EXP 15
4518: PPUSH
4519: LD_VAR 0 2
4523: PPUSH
4524: CALL_OW 119
// exit ;
4528: GO 4573
// end ; Kikuchi := PrepareUnit ( Yamoko , false ,  ) ;
4530: LD_ADDR_EXP 18
4534: PUSH
4535: LD_STRING Yamoko
4537: PPUSH
4538: LD_INT 0
4540: PPUSH
4541: LD_STRING 
4543: PPUSH
4544: CALL 33014 0 3
4548: ST_TO_ADDR
// PlaceUnitArea ( Kikuchi , scoutArea , false ) ;
4549: LD_EXP 18
4553: PPUSH
4554: LD_INT 2
4556: PPUSH
4557: LD_INT 0
4559: PPUSH
4560: CALL_OW 49
// ComHold ( Kikuchi ) ;
4564: LD_EXP 18
4568: PPUSH
4569: CALL_OW 140
// end ; end_of_file
4573: LD_VAR 0 1
4577: RET
// export ru_rebuild_list ; export function PrepareRussians ; var i , j , r , un , skill , filter , tmp , dep_list , lab_list , fac_list , breastworks_list , bunker_list , turret_list , weapons_list , personel_counter ; begin
4578: LD_INT 0
4580: PPUSH
4581: PPUSH
4582: PPUSH
4583: PPUSH
4584: PPUSH
4585: PPUSH
4586: PPUSH
4587: PPUSH
4588: PPUSH
4589: PPUSH
4590: PPUSH
4591: PPUSH
4592: PPUSH
4593: PPUSH
4594: PPUSH
4595: PPUSH
// ru_rebuild_list := [ ] ;
4596: LD_ADDR_EXP 20
4600: PUSH
4601: EMPTY
4602: ST_TO_ADDR
// uc_side := 3 ;
4603: LD_ADDR_OWVAR 20
4607: PUSH
4608: LD_INT 3
4610: ST_TO_ADDR
// uc_nation := 3 ;
4611: LD_ADDR_OWVAR 21
4615: PUSH
4616: LD_INT 3
4618: ST_TO_ADDR
// if Difficulty > 1 then
4619: LD_OWVAR 67
4623: PUSH
4624: LD_INT 1
4626: GREATER
4627: IFFALSE 4794
// begin bc_type := b_breastwork ;
4629: LD_ADDR_OWVAR 42
4633: PUSH
4634: LD_INT 31
4636: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 78 , 74 , 2 ) ;
4637: LD_INT 78
4639: PPUSH
4640: LD_INT 74
4642: PPUSH
4643: LD_INT 2
4645: PPUSH
4646: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 171 , 193 , 4 ) ;
4650: LD_INT 171
4652: PPUSH
4653: LD_INT 193
4655: PPUSH
4656: LD_INT 4
4658: PPUSH
4659: CALL_OW 47
// bc_type := b_turret ;
4663: LD_ADDR_OWVAR 42
4667: PUSH
4668: LD_INT 33
4670: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 129 , 96 , 3 ) ;
4671: LD_INT 129
4673: PPUSH
4674: LD_INT 96
4676: PPUSH
4677: LD_INT 3
4679: PPUSH
4680: CALL_OW 47
// if Difficulty > 2 then
4684: LD_OWVAR 67
4688: PUSH
4689: LD_INT 2
4691: GREATER
4692: IFFALSE 4763
// begin RemoveUnit ( HexInfo ( 83 , 141 ) ) ;
4694: LD_INT 83
4696: PPUSH
4697: LD_INT 141
4699: PPUSH
4700: CALL_OW 428
4704: PPUSH
4705: CALL_OW 64
// RemoveUnit ( HexInfo ( 78 , 133 ) ) ;
4709: LD_INT 78
4711: PPUSH
4712: LD_INT 133
4714: PPUSH
4715: CALL_OW 428
4719: PPUSH
4720: CALL_OW 64
// CreateAndPlaceBuildingXYD ( 83 , 141 , 2 ) ;
4724: LD_INT 83
4726: PPUSH
4727: LD_INT 141
4729: PPUSH
4730: LD_INT 2
4732: PPUSH
4733: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 78 , 133 , 2 ) ;
4737: LD_INT 78
4739: PPUSH
4740: LD_INT 133
4742: PPUSH
4743: LD_INT 2
4745: PPUSH
4746: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 145 , 112 , 3 ) ;
4750: LD_INT 145
4752: PPUSH
4753: LD_INT 112
4755: PPUSH
4756: LD_INT 3
4758: PPUSH
4759: CALL_OW 47
// end ; if Difficulty > 3 then
4763: LD_OWVAR 67
4767: PUSH
4768: LD_INT 3
4770: GREATER
4771: IFFALSE 4794
// begin bc_type := b_bunker ;
4773: LD_ADDR_OWVAR 42
4777: PUSH
4778: LD_INT 32
4780: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 44 , 50 , 4 ) ;
4781: LD_INT 44
4783: PPUSH
4784: LD_INT 50
4786: PPUSH
4787: LD_INT 4
4789: PPUSH
4790: CALL_OW 47
// end ; end ; dep_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
4794: LD_ADDR_VAR 0 9
4798: PUSH
4799: LD_INT 22
4801: PUSH
4802: LD_INT 3
4804: PUSH
4805: EMPTY
4806: LIST
4807: LIST
4808: PUSH
4809: LD_INT 2
4811: PUSH
4812: LD_INT 30
4814: PUSH
4815: LD_INT 0
4817: PUSH
4818: EMPTY
4819: LIST
4820: LIST
4821: PUSH
4822: LD_INT 30
4824: PUSH
4825: LD_INT 1
4827: PUSH
4828: EMPTY
4829: LIST
4830: LIST
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: LIST
4836: PUSH
4837: EMPTY
4838: LIST
4839: LIST
4840: PPUSH
4841: CALL_OW 69
4845: ST_TO_ADDR
// lab_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
4846: LD_ADDR_VAR 0 10
4850: PUSH
4851: LD_INT 22
4853: PUSH
4854: LD_INT 3
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PUSH
4861: LD_INT 2
4863: PUSH
4864: LD_INT 30
4866: PUSH
4867: LD_INT 6
4869: PUSH
4870: EMPTY
4871: LIST
4872: LIST
4873: PUSH
4874: LD_INT 30
4876: PUSH
4877: LD_INT 7
4879: PUSH
4880: EMPTY
4881: LIST
4882: LIST
4883: PUSH
4884: LD_INT 30
4886: PUSH
4887: LD_INT 8
4889: PUSH
4890: EMPTY
4891: LIST
4892: LIST
4893: PUSH
4894: EMPTY
4895: LIST
4896: LIST
4897: LIST
4898: LIST
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: PPUSH
4904: CALL_OW 69
4908: ST_TO_ADDR
// fac_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
4909: LD_ADDR_VAR 0 11
4913: PUSH
4914: LD_INT 22
4916: PUSH
4917: LD_INT 3
4919: PUSH
4920: EMPTY
4921: LIST
4922: LIST
4923: PUSH
4924: LD_INT 30
4926: PUSH
4927: LD_INT 3
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: PUSH
4934: EMPTY
4935: LIST
4936: LIST
4937: PPUSH
4938: CALL_OW 69
4942: ST_TO_ADDR
// breastworks_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
4943: LD_ADDR_VAR 0 12
4947: PUSH
4948: LD_INT 22
4950: PUSH
4951: LD_INT 3
4953: PUSH
4954: EMPTY
4955: LIST
4956: LIST
4957: PUSH
4958: LD_INT 30
4960: PUSH
4961: LD_INT 31
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: PUSH
4968: EMPTY
4969: LIST
4970: LIST
4971: PPUSH
4972: CALL_OW 69
4976: ST_TO_ADDR
// bunker_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
4977: LD_ADDR_VAR 0 13
4981: PUSH
4982: LD_INT 22
4984: PUSH
4985: LD_INT 3
4987: PUSH
4988: EMPTY
4989: LIST
4990: LIST
4991: PUSH
4992: LD_INT 30
4994: PUSH
4995: LD_INT 32
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: PUSH
5002: EMPTY
5003: LIST
5004: LIST
5005: PPUSH
5006: CALL_OW 69
5010: ST_TO_ADDR
// turret_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
5011: LD_ADDR_VAR 0 14
5015: PUSH
5016: LD_INT 22
5018: PUSH
5019: LD_INT 3
5021: PUSH
5022: EMPTY
5023: LIST
5024: LIST
5025: PUSH
5026: LD_INT 30
5028: PUSH
5029: LD_INT 33
5031: PUSH
5032: EMPTY
5033: LIST
5034: LIST
5035: PUSH
5036: EMPTY
5037: LIST
5038: LIST
5039: PPUSH
5040: CALL_OW 69
5044: ST_TO_ADDR
// weapons_list := [ [ ru_heavy_machine_gun , 5 ] , [ ru_gatling_gun , 50 ] , [ ru_gun , 30 ] , [ ru_heavy_gun , 15 ] ] ;
5045: LD_ADDR_VAR 0 15
5049: PUSH
5050: LD_INT 42
5052: PUSH
5053: LD_INT 5
5055: PUSH
5056: EMPTY
5057: LIST
5058: LIST
5059: PUSH
5060: LD_INT 43
5062: PUSH
5063: LD_INT 50
5065: PUSH
5066: EMPTY
5067: LIST
5068: LIST
5069: PUSH
5070: LD_INT 44
5072: PUSH
5073: LD_INT 30
5075: PUSH
5076: EMPTY
5077: LIST
5078: LIST
5079: PUSH
5080: LD_INT 46
5082: PUSH
5083: LD_INT 15
5085: PUSH
5086: EMPTY
5087: LIST
5088: LIST
5089: PUSH
5090: EMPTY
5091: LIST
5092: LIST
5093: LIST
5094: LIST
5095: ST_TO_ADDR
// personel_counter := [ 0 , 4 , 6 , 3 ] ;
5096: LD_ADDR_VAR 0 16
5100: PUSH
5101: LD_INT 0
5103: PUSH
5104: LD_INT 4
5106: PUSH
5107: LD_INT 6
5109: PUSH
5110: LD_INT 3
5112: PUSH
5113: EMPTY
5114: LIST
5115: LIST
5116: LIST
5117: LIST
5118: ST_TO_ADDR
// skill := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
5119: LD_ADDR_VAR 0 6
5123: PUSH
5124: LD_INT 4
5126: PUSH
5127: LD_INT 5
5129: PUSH
5130: LD_INT 6
5132: PUSH
5133: LD_INT 7
5135: PUSH
5136: EMPTY
5137: LIST
5138: LIST
5139: LIST
5140: LIST
5141: PUSH
5142: LD_OWVAR 67
5146: ARRAY
5147: ST_TO_ADDR
// SetBName ( ru_dep_main , am_tukh ) ;
5148: LD_INT 16
5150: PPUSH
5151: LD_STRING am_tukh
5153: PPUSH
5154: CALL_OW 500
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
5158: LD_ADDR_VAR 0 2
5162: PUSH
5163: LD_INT 21
5165: PUSH
5166: LD_INT 3
5168: PUSH
5169: EMPTY
5170: LIST
5171: LIST
5172: PPUSH
5173: CALL_OW 69
5177: PUSH
5178: FOR_IN
5179: IFFALSE 5216
// SetBLevel ( i , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5181: LD_VAR 0 2
5185: PPUSH
5186: LD_INT 4
5188: PUSH
5189: LD_INT 5
5191: PUSH
5192: LD_INT 6
5194: PUSH
5195: LD_INT 7
5197: PUSH
5198: EMPTY
5199: LIST
5200: LIST
5201: LIST
5202: LIST
5203: PUSH
5204: LD_OWVAR 67
5208: ARRAY
5209: PPUSH
5210: CALL_OW 241
5214: GO 5178
5216: POP
5217: POP
// for i in dep_list do
5218: LD_ADDR_VAR 0 2
5222: PUSH
5223: LD_VAR 0 9
5227: PUSH
5228: FOR_IN
5229: IFFALSE 5273
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
5231: LD_VAR 0 2
5235: PPUSH
5236: CALL_OW 274
5240: PPUSH
5241: LD_INT 1
5243: PPUSH
5244: LD_INT 1000
5246: PPUSH
5247: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
5251: LD_VAR 0 2
5255: PPUSH
5256: CALL_OW 274
5260: PPUSH
5261: LD_INT 2
5263: PPUSH
5264: LD_INT 1000
5266: PPUSH
5267: CALL_OW 277
// end ;
5271: GO 5228
5273: POP
5274: POP
// InitHc ;
5275: CALL_OW 19
// tmp := bunker_list * [ 45 , 60 , 70 , 80 ] [ Difficulty ] div 100 ;
5279: LD_ADDR_VAR 0 8
5283: PUSH
5284: LD_VAR 0 13
5288: PUSH
5289: LD_INT 45
5291: PUSH
5292: LD_INT 60
5294: PUSH
5295: LD_INT 70
5297: PUSH
5298: LD_INT 80
5300: PUSH
5301: EMPTY
5302: LIST
5303: LIST
5304: LIST
5305: LIST
5306: PUSH
5307: LD_OWVAR 67
5311: ARRAY
5312: MUL
5313: PUSH
5314: LD_INT 100
5316: DIV
5317: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , tmp ) ;
5318: LD_ADDR_VAR 0 16
5322: PUSH
5323: LD_VAR 0 16
5327: PPUSH
5328: LD_INT 1
5330: PPUSH
5331: LD_VAR 0 8
5335: PPUSH
5336: CALL_OW 1
5340: ST_TO_ADDR
// tmp := [ ] ;
5341: LD_ADDR_VAR 0 8
5345: PUSH
5346: EMPTY
5347: ST_TO_ADDR
// for i in bunker_list do
5348: LD_ADDR_VAR 0 2
5352: PUSH
5353: LD_VAR 0 13
5357: PUSH
5358: FOR_IN
5359: IFFALSE 5455
// if i mod 10 + 1 < tmp then
5361: LD_VAR 0 2
5365: PUSH
5366: LD_INT 10
5368: MOD
5369: PUSH
5370: LD_INT 1
5372: PLUS
5373: PUSH
5374: LD_VAR 0 8
5378: LESS
5379: IFFALSE 5424
// tmp := Insert ( tmp , i mod rand ( 3 , 5 ) + 1 , i ) else
5381: LD_ADDR_VAR 0 8
5385: PUSH
5386: LD_VAR 0 8
5390: PPUSH
5391: LD_VAR 0 2
5395: PUSH
5396: LD_INT 3
5398: PPUSH
5399: LD_INT 5
5401: PPUSH
5402: CALL_OW 12
5406: MOD
5407: PUSH
5408: LD_INT 1
5410: PLUS
5411: PPUSH
5412: LD_VAR 0 2
5416: PPUSH
5417: CALL_OW 2
5421: ST_TO_ADDR
5422: GO 5453
// tmp := Insert ( tmp , tmp + 1 , i ) ;
5424: LD_ADDR_VAR 0 8
5428: PUSH
5429: LD_VAR 0 8
5433: PPUSH
5434: LD_VAR 0 8
5438: PUSH
5439: LD_INT 1
5441: PLUS
5442: PPUSH
5443: LD_VAR 0 2
5447: PPUSH
5448: CALL_OW 2
5452: ST_TO_ADDR
5453: GO 5358
5455: POP
5456: POP
// bunker_list := tmp ;
5457: LD_ADDR_VAR 0 13
5461: PUSH
5462: LD_VAR 0 8
5466: ST_TO_ADDR
// for i in bunker_list ^ turret_list do
5467: LD_ADDR_VAR 0 2
5471: PUSH
5472: LD_VAR 0 13
5476: PUSH
5477: LD_VAR 0 14
5481: ADD
5482: PUSH
5483: FOR_IN
5484: IFFALSE 5507
// PlaceWeaponTurret ( i , GetTurretWeaponBase ( i ) ) ;
5486: LD_VAR 0 2
5490: PPUSH
5491: LD_VAR 0 2
5495: PPUSH
5496: CALL 2225 0 1
5500: PPUSH
5501: CALL_OW 431
5505: GO 5483
5507: POP
5508: POP
// while ( personel_counter [ 1 ] ) do
5509: LD_VAR 0 16
5513: PUSH
5514: LD_INT 1
5516: ARRAY
5517: IFFALSE 5625
// begin i := rand ( 1 , bunker_list ) ;
5519: LD_ADDR_VAR 0 2
5523: PUSH
5524: LD_INT 1
5526: PPUSH
5527: LD_VAR 0 13
5531: PPUSH
5532: CALL_OW 12
5536: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5537: LD_INT 0
5539: PPUSH
5540: LD_INT 1
5542: PPUSH
5543: LD_VAR 0 6
5547: PPUSH
5548: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , bunker_list [ i ] ) ;
5552: CALL_OW 44
5556: PPUSH
5557: LD_VAR 0 13
5561: PUSH
5562: LD_VAR 0 2
5566: ARRAY
5567: PPUSH
5568: CALL_OW 52
// bunker_list := Delete ( bunker_list , i ) ;
5572: LD_ADDR_VAR 0 13
5576: PUSH
5577: LD_VAR 0 13
5581: PPUSH
5582: LD_VAR 0 2
5586: PPUSH
5587: CALL_OW 3
5591: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , personel_counter [ 1 ] - 1 ) ;
5592: LD_ADDR_VAR 0 16
5596: PUSH
5597: LD_VAR 0 16
5601: PPUSH
5602: LD_INT 1
5604: PPUSH
5605: LD_VAR 0 16
5609: PUSH
5610: LD_INT 1
5612: ARRAY
5613: PUSH
5614: LD_INT 1
5616: MINUS
5617: PPUSH
5618: CALL_OW 1
5622: ST_TO_ADDR
// end ;
5623: GO 5509
// for i = 1 to personel_counter [ 2 ] do
5625: LD_ADDR_VAR 0 2
5629: PUSH
5630: DOUBLE
5631: LD_INT 1
5633: DEC
5634: ST_TO_ADDR
5635: LD_VAR 0 16
5639: PUSH
5640: LD_INT 2
5642: ARRAY
5643: PUSH
5644: FOR_TO
5645: IFFALSE 5676
// begin PrepareHuman ( false , 2 , skill ) ;
5647: LD_INT 0
5649: PPUSH
5650: LD_INT 2
5652: PPUSH
5653: LD_VAR 0 6
5657: PPUSH
5658: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru_dep_main ) ;
5662: CALL_OW 44
5666: PPUSH
5667: LD_INT 16
5669: PPUSH
5670: CALL_OW 52
// end ;
5674: GO 5644
5676: POP
5677: POP
// for i = 1 to personel_counter [ 3 ] do
5678: LD_ADDR_VAR 0 2
5682: PUSH
5683: DOUBLE
5684: LD_INT 1
5686: DEC
5687: ST_TO_ADDR
5688: LD_VAR 0 16
5692: PUSH
5693: LD_INT 3
5695: ARRAY
5696: PUSH
5697: FOR_TO
5698: IFFALSE 5745
// begin PrepareHuman ( false , 3 , skill ) ;
5700: LD_INT 0
5702: PPUSH
5703: LD_INT 3
5705: PPUSH
5706: LD_VAR 0 6
5710: PPUSH
5711: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , fac_list [ i mod 2 + 1 ] ) ;
5715: CALL_OW 44
5719: PPUSH
5720: LD_VAR 0 11
5724: PUSH
5725: LD_VAR 0 2
5729: PUSH
5730: LD_INT 2
5732: MOD
5733: PUSH
5734: LD_INT 1
5736: PLUS
5737: ARRAY
5738: PPUSH
5739: CALL_OW 52
// end ;
5743: GO 5697
5745: POP
5746: POP
// for i = 1 to personel_counter [ 4 ] do
5747: LD_ADDR_VAR 0 2
5751: PUSH
5752: DOUBLE
5753: LD_INT 1
5755: DEC
5756: ST_TO_ADDR
5757: LD_VAR 0 16
5761: PUSH
5762: LD_INT 4
5764: ARRAY
5765: PUSH
5766: FOR_TO
5767: IFFALSE 5804
// begin PrepareHuman ( false , 4 , skill ) ;
5769: LD_INT 0
5771: PPUSH
5772: LD_INT 4
5774: PPUSH
5775: LD_VAR 0 6
5779: PPUSH
5780: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , lab_list [ 1 ] ) ;
5784: CALL_OW 44
5788: PPUSH
5789: LD_VAR 0 10
5793: PUSH
5794: LD_INT 1
5796: ARRAY
5797: PPUSH
5798: CALL_OW 52
// end ;
5802: GO 5766
5804: POP
5805: POP
// for i in breastworks_list do
5806: LD_ADDR_VAR 0 2
5810: PUSH
5811: LD_VAR 0 12
5815: PUSH
5816: FOR_IN
5817: IFFALSE 5929
// begin r := GetDir ( i ) ;
5819: LD_ADDR_VAR 0 4
5823: PUSH
5824: LD_VAR 0 2
5828: PPUSH
5829: CALL_OW 254
5833: ST_TO_ADDR
// if r > 3 then
5834: LD_VAR 0 4
5838: PUSH
5839: LD_INT 3
5841: GREATER
5842: IFFALSE 5860
// r := r - 3 else
5844: LD_ADDR_VAR 0 4
5848: PUSH
5849: LD_VAR 0 4
5853: PUSH
5854: LD_INT 3
5856: MINUS
5857: ST_TO_ADDR
5858: GO 5874
// r := r + 3 ;
5860: LD_ADDR_VAR 0 4
5864: PUSH
5865: LD_VAR 0 4
5869: PUSH
5870: LD_INT 3
5872: PLUS
5873: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5874: LD_INT 0
5876: PPUSH
5877: LD_INT 1
5879: PPUSH
5880: LD_VAR 0 6
5884: PPUSH
5885: CALL_OW 380
// un := CreateHuman ;
5889: LD_ADDR_VAR 0 5
5893: PUSH
5894: CALL_OW 44
5898: ST_TO_ADDR
// SetDir ( un , r ) ;
5899: LD_VAR 0 5
5903: PPUSH
5904: LD_VAR 0 4
5908: PPUSH
5909: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
5913: LD_VAR 0 5
5917: PPUSH
5918: LD_VAR 0 2
5922: PPUSH
5923: CALL_OW 52
// end ;
5927: GO 5816
5929: POP
5930: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) ;
5931: LD_ADDR_VAR 0 8
5935: PUSH
5936: LD_INT 22
5938: PUSH
5939: LD_INT 3
5941: PUSH
5942: EMPTY
5943: LIST
5944: LIST
5945: PUSH
5946: LD_INT 25
5948: PUSH
5949: LD_INT 3
5951: PUSH
5952: EMPTY
5953: LIST
5954: LIST
5955: PUSH
5956: EMPTY
5957: LIST
5958: LIST
5959: PPUSH
5960: CALL_OW 69
5964: ST_TO_ADDR
// r := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
5965: LD_ADDR_VAR 0 4
5969: PUSH
5970: LD_INT 4
5972: PUSH
5973: LD_INT 5
5975: PUSH
5976: LD_INT 6
5978: PUSH
5979: LD_INT 6
5981: PUSH
5982: EMPTY
5983: LIST
5984: LIST
5985: LIST
5986: LIST
5987: PUSH
5988: LD_OWVAR 67
5992: ARRAY
5993: ST_TO_ADDR
// for i = 1 to r do
5994: LD_ADDR_VAR 0 2
5998: PUSH
5999: DOUBLE
6000: LD_INT 1
6002: DEC
6003: ST_TO_ADDR
6004: LD_VAR 0 4
6008: PUSH
6009: FOR_TO
6010: IFFALSE 6183
// begin un := PrepareTank ( 3 , 3 , [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked ] [ i mod 3 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
6012: LD_ADDR_VAR 0 5
6016: PUSH
6017: LD_INT 3
6019: PPUSH
6020: LD_INT 3
6022: PPUSH
6023: LD_INT 22
6025: PUSH
6026: LD_INT 22
6028: PUSH
6029: LD_INT 24
6031: PUSH
6032: EMPTY
6033: LIST
6034: LIST
6035: LIST
6036: PUSH
6037: LD_VAR 0 2
6041: PUSH
6042: LD_INT 3
6044: MOD
6045: PUSH
6046: LD_INT 1
6048: PLUS
6049: ARRAY
6050: PPUSH
6051: LD_INT 1
6053: PPUSH
6054: LD_INT 1
6056: PPUSH
6057: LD_INT 43
6059: PUSH
6060: LD_INT 44
6062: PUSH
6063: LD_INT 42
6065: PUSH
6066: EMPTY
6067: LIST
6068: LIST
6069: LIST
6070: PUSH
6071: LD_VAR 0 2
6075: PUSH
6076: LD_INT 3
6078: MOD
6079: PUSH
6080: LD_INT 1
6082: PLUS
6083: ARRAY
6084: PPUSH
6085: LD_INT 100
6087: PPUSH
6088: CALL 520 0 7
6092: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
6093: LD_VAR 0 5
6097: PPUSH
6098: LD_INT 0
6100: PPUSH
6101: LD_INT 5
6103: PPUSH
6104: CALL_OW 12
6108: PPUSH
6109: CALL_OW 233
// PlaceUnitArea ( un , parkingArea , false ) ;
6113: LD_VAR 0 5
6117: PPUSH
6118: LD_INT 5
6120: PPUSH
6121: LD_INT 0
6123: PPUSH
6124: CALL_OW 49
// if i > tmp - 2 then
6128: LD_VAR 0 2
6132: PUSH
6133: LD_VAR 0 8
6137: PUSH
6138: LD_INT 2
6140: MINUS
6141: GREATER
6142: IFFALSE 6146
// continue ;
6144: GO 6009
// ComExitBuilding ( tmp [ i ] ) ;
6146: LD_VAR 0 8
6150: PUSH
6151: LD_VAR 0 2
6155: ARRAY
6156: PPUSH
6157: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , un ) ;
6161: LD_VAR 0 8
6165: PUSH
6166: LD_VAR 0 2
6170: ARRAY
6171: PPUSH
6172: LD_VAR 0 5
6176: PPUSH
6177: CALL_OW 180
// end ;
6181: GO 6009
6183: POP
6184: POP
// end ;
6185: LD_VAR 0 1
6189: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) do var i , filter , tmp , engs , enemy ;
6190: LD_INT 22
6192: PUSH
6193: LD_INT 3
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: PUSH
6200: LD_INT 25
6202: PUSH
6203: LD_INT 2
6205: PUSH
6206: EMPTY
6207: LIST
6208: LIST
6209: PUSH
6210: EMPTY
6211: LIST
6212: LIST
6213: PPUSH
6214: CALL_OW 69
6218: IFFALSE 6950
6220: GO 6222
6222: DISABLE
6223: LD_INT 0
6225: PPUSH
6226: PPUSH
6227: PPUSH
6228: PPUSH
6229: PPUSH
// begin enable ;
6230: ENABLE
// filter := FilterUnitsInArea ( baseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
6231: LD_ADDR_VAR 0 2
6235: PUSH
6236: LD_INT 6
6238: PPUSH
6239: LD_INT 3
6241: PUSH
6242: LD_INT 24
6244: PUSH
6245: LD_INT 1000
6247: PUSH
6248: EMPTY
6249: LIST
6250: LIST
6251: PUSH
6252: EMPTY
6253: LIST
6254: LIST
6255: PUSH
6256: LD_INT 21
6258: PUSH
6259: LD_INT 3
6261: PUSH
6262: EMPTY
6263: LIST
6264: LIST
6265: PUSH
6266: EMPTY
6267: LIST
6268: LIST
6269: PPUSH
6270: CALL_OW 70
6274: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
6275: LD_ADDR_VAR 0 4
6279: PUSH
6280: LD_INT 22
6282: PUSH
6283: LD_INT 3
6285: PUSH
6286: EMPTY
6287: LIST
6288: LIST
6289: PUSH
6290: LD_INT 25
6292: PUSH
6293: LD_INT 2
6295: PUSH
6296: EMPTY
6297: LIST
6298: LIST
6299: PUSH
6300: EMPTY
6301: LIST
6302: LIST
6303: PPUSH
6304: CALL_OW 69
6308: ST_TO_ADDR
// if not filter and not ru_rebuild_list then
6309: LD_VAR 0 2
6313: NOT
6314: PUSH
6315: LD_EXP 20
6319: NOT
6320: AND
6321: IFFALSE 6391
// begin for i in engs do
6323: LD_ADDR_VAR 0 1
6327: PUSH
6328: LD_VAR 0 4
6332: PUSH
6333: FOR_IN
6334: IFFALSE 6389
// if GetLives ( i ) = 1000 and not HasTask ( i ) and not IsInUnit ( i ) then
6336: LD_VAR 0 1
6340: PPUSH
6341: CALL_OW 256
6345: PUSH
6346: LD_INT 1000
6348: EQUAL
6349: PUSH
6350: LD_VAR 0 1
6354: PPUSH
6355: CALL_OW 314
6359: NOT
6360: AND
6361: PUSH
6362: LD_VAR 0 1
6366: PPUSH
6367: CALL_OW 310
6371: NOT
6372: AND
6373: IFFALSE 6387
// ComEnterUnit ( i , ru_dep_main ) ;
6375: LD_VAR 0 1
6379: PPUSH
6380: LD_INT 16
6382: PPUSH
6383: CALL_OW 120
6387: GO 6333
6389: POP
6390: POP
// end ; if UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) then
6391: LD_VAR 0 4
6395: PPUSH
6396: LD_INT 3
6398: PUSH
6399: LD_INT 24
6401: PUSH
6402: LD_INT 650
6404: PUSH
6405: EMPTY
6406: LIST
6407: LIST
6408: PUSH
6409: EMPTY
6410: LIST
6411: LIST
6412: PPUSH
6413: CALL_OW 72
6417: IFFALSE 6510
// begin tmp := UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) ;
6419: LD_ADDR_VAR 0 3
6423: PUSH
6424: LD_VAR 0 4
6428: PPUSH
6429: LD_INT 3
6431: PUSH
6432: LD_INT 24
6434: PUSH
6435: LD_INT 650
6437: PUSH
6438: EMPTY
6439: LIST
6440: LIST
6441: PUSH
6442: EMPTY
6443: LIST
6444: LIST
6445: PPUSH
6446: CALL_OW 72
6450: ST_TO_ADDR
// for i in tmp do
6451: LD_ADDR_VAR 0 1
6455: PUSH
6456: LD_VAR 0 3
6460: PUSH
6461: FOR_IN
6462: IFFALSE 6508
// if not IsInArea ( i , mainBaseArea ) then
6464: LD_VAR 0 1
6468: PPUSH
6469: LD_INT 14
6471: PPUSH
6472: CALL_OW 308
6476: NOT
6477: IFFALSE 6506
// begin ComMoveXY ( i , 129 , 125 ) ;
6479: LD_VAR 0 1
6483: PPUSH
6484: LD_INT 129
6486: PPUSH
6487: LD_INT 125
6489: PPUSH
6490: CALL_OW 111
// AddComWait ( i , 0 0$30 ) ;
6494: LD_VAR 0 1
6498: PPUSH
6499: LD_INT 1050
6501: PPUSH
6502: CALL_OW 202
// end ;
6506: GO 6461
6508: POP
6509: POP
// end ; engs := UnitFilter ( engs , [ f_lives , 650 ] ) ;
6510: LD_ADDR_VAR 0 4
6514: PUSH
6515: LD_VAR 0 4
6519: PPUSH
6520: LD_INT 24
6522: PUSH
6523: LD_INT 650
6525: PUSH
6526: EMPTY
6527: LIST
6528: LIST
6529: PPUSH
6530: CALL_OW 72
6534: ST_TO_ADDR
// if not engs then
6535: LD_VAR 0 4
6539: NOT
6540: IFFALSE 6544
// exit ;
6542: GO 6950
// if filter then
6544: LD_VAR 0 2
6548: IFFALSE 6807
// begin for i in engs do
6550: LD_ADDR_VAR 0 1
6554: PUSH
6555: LD_VAR 0 4
6559: PUSH
6560: FOR_IN
6561: IFFALSE 6585
// if IsInUnit ( i ) then
6563: LD_VAR 0 1
6567: PPUSH
6568: CALL_OW 310
6572: IFFALSE 6583
// ComExitBuilding ( i ) ;
6574: LD_VAR 0 1
6578: PPUSH
6579: CALL_OW 122
6583: GO 6560
6585: POP
6586: POP
// wait ( 3 ) ;
6587: LD_INT 3
6589: PPUSH
6590: CALL_OW 67
// if filter >= 2 and engs >= 2 then
6594: LD_VAR 0 2
6598: PUSH
6599: LD_INT 2
6601: GREATEREQUAL
6602: PUSH
6603: LD_VAR 0 4
6607: PUSH
6608: LD_INT 2
6610: GREATEREQUAL
6611: AND
6612: IFFALSE 6760
// begin for i = 1 to engs / 2 do
6614: LD_ADDR_VAR 0 1
6618: PUSH
6619: DOUBLE
6620: LD_INT 1
6622: DEC
6623: ST_TO_ADDR
6624: LD_VAR 0 4
6628: PUSH
6629: LD_INT 2
6631: DIVREAL
6632: PUSH
6633: FOR_TO
6634: IFFALSE 6680
// if not HasTask ( engs [ i ] ) then
6636: LD_VAR 0 4
6640: PUSH
6641: LD_VAR 0 1
6645: ARRAY
6646: PPUSH
6647: CALL_OW 314
6651: NOT
6652: IFFALSE 6678
// ComRepairBuilding ( engs [ i ] , filter [ 1 ] ) ;
6654: LD_VAR 0 4
6658: PUSH
6659: LD_VAR 0 1
6663: ARRAY
6664: PPUSH
6665: LD_VAR 0 2
6669: PUSH
6670: LD_INT 1
6672: ARRAY
6673: PPUSH
6674: CALL_OW 130
6678: GO 6633
6680: POP
6681: POP
// for i = engs / 2 + 1 to engs do
6682: LD_ADDR_VAR 0 1
6686: PUSH
6687: DOUBLE
6688: LD_VAR 0 4
6692: PUSH
6693: LD_INT 2
6695: DIVREAL
6696: PUSH
6697: LD_INT 1
6699: PLUS
6700: DEC
6701: ST_TO_ADDR
6702: LD_VAR 0 4
6706: PUSH
6707: FOR_TO
6708: IFFALSE 6756
// if not HasTask ( engs [ i ] ) then
6710: LD_VAR 0 4
6714: PUSH
6715: LD_VAR 0 1
6719: ARRAY
6720: PPUSH
6721: CALL_OW 314
6725: NOT
6726: IFFALSE 6754
// ComRepairBuilding ( engs [ i ] , filter [ filter ] ) ;
6728: LD_VAR 0 4
6732: PUSH
6733: LD_VAR 0 1
6737: ARRAY
6738: PPUSH
6739: LD_VAR 0 2
6743: PUSH
6744: LD_VAR 0 2
6748: ARRAY
6749: PPUSH
6750: CALL_OW 130
6754: GO 6707
6756: POP
6757: POP
// end else
6758: GO 6807
// for i in engs do
6760: LD_ADDR_VAR 0 1
6764: PUSH
6765: LD_VAR 0 4
6769: PUSH
6770: FOR_IN
6771: IFFALSE 6805
// if not HasTask ( i ) then
6773: LD_VAR 0 1
6777: PPUSH
6778: CALL_OW 314
6782: NOT
6783: IFFALSE 6803
// ComRepairBuilding ( i , filter [ 1 ] ) ;
6785: LD_VAR 0 1
6789: PPUSH
6790: LD_VAR 0 2
6794: PUSH
6795: LD_INT 1
6797: ARRAY
6798: PPUSH
6799: CALL_OW 130
6803: GO 6770
6805: POP
6806: POP
// end ; enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
6807: LD_ADDR_VAR 0 5
6811: PUSH
6812: LD_INT 81
6814: PUSH
6815: LD_INT 3
6817: PUSH
6818: EMPTY
6819: LIST
6820: LIST
6821: PPUSH
6822: CALL_OW 69
6826: ST_TO_ADDR
// if ru_rebuild_list and not filter then
6827: LD_EXP 20
6831: PUSH
6832: LD_VAR 0 2
6836: NOT
6837: AND
6838: IFFALSE 6950
// begin ComExitBuilding ( engs ) ;
6840: LD_VAR 0 4
6844: PPUSH
6845: CALL_OW 122
// if GetDistUnitXY ( NearestUnitToXY ( enemy , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) > 10 then
6849: LD_VAR 0 5
6853: PPUSH
6854: LD_EXP 20
6858: PUSH
6859: LD_INT 2
6861: ARRAY
6862: PPUSH
6863: LD_EXP 20
6867: PUSH
6868: LD_INT 3
6870: ARRAY
6871: PPUSH
6872: CALL_OW 73
6876: PPUSH
6877: LD_EXP 20
6881: PUSH
6882: LD_INT 2
6884: ARRAY
6885: PPUSH
6886: LD_EXP 20
6890: PUSH
6891: LD_INT 3
6893: ARRAY
6894: PPUSH
6895: CALL_OW 297
6899: PUSH
6900: LD_INT 10
6902: GREATER
6903: IFFALSE 6950
// ComBuild ( engs , ru_rebuild_list [ 1 ] , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] , ru_rebuild_list [ 4 ] ) ;
6905: LD_VAR 0 4
6909: PPUSH
6910: LD_EXP 20
6914: PUSH
6915: LD_INT 1
6917: ARRAY
6918: PPUSH
6919: LD_EXP 20
6923: PUSH
6924: LD_INT 2
6926: ARRAY
6927: PPUSH
6928: LD_EXP 20
6932: PUSH
6933: LD_INT 3
6935: ARRAY
6936: PPUSH
6937: LD_EXP 20
6941: PUSH
6942: LD_INT 4
6944: ARRAY
6945: PPUSH
6946: CALL_OW 145
// end ; end ;
6950: PPOPN 5
6952: END
// every 0 0$1 trigger GetLives ( ru_dep_main ) < 250 do var i , tmp ;
6953: LD_INT 16
6955: PPUSH
6956: CALL_OW 256
6960: PUSH
6961: LD_INT 250
6963: LESS
6964: IFFALSE 7154
6966: GO 6968
6968: DISABLE
6969: LD_INT 0
6971: PPUSH
6972: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
6973: LD_ADDR_VAR 0 2
6977: PUSH
6978: LD_INT 22
6980: PUSH
6981: LD_INT 3
6983: PUSH
6984: EMPTY
6985: LIST
6986: LIST
6987: PUSH
6988: LD_INT 2
6990: PUSH
6991: LD_INT 25
6993: PUSH
6994: LD_INT 1
6996: PUSH
6997: EMPTY
6998: LIST
6999: LIST
7000: PUSH
7001: LD_INT 25
7003: PUSH
7004: LD_INT 3
7006: PUSH
7007: EMPTY
7008: LIST
7009: LIST
7010: PUSH
7011: LD_INT 25
7013: PUSH
7014: LD_INT 4
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: LIST
7025: LIST
7026: PUSH
7027: EMPTY
7028: LIST
7029: LIST
7030: PPUSH
7031: CALL_OW 69
7035: ST_TO_ADDR
// ComExitBuilding ( tmp ) ;
7036: LD_VAR 0 2
7040: PPUSH
7041: CALL_OW 122
// wait ( 3 ) ;
7045: LD_INT 3
7047: PPUSH
7048: CALL_OW 67
// ComMoveXY ( tmp , 156 , 211 ) ;
7052: LD_VAR 0 2
7056: PPUSH
7057: LD_INT 156
7059: PPUSH
7060: LD_INT 211
7062: PPUSH
7063: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7067: LD_INT 35
7069: PPUSH
7070: CALL_OW 67
// for i in tmp do
7074: LD_ADDR_VAR 0 1
7078: PUSH
7079: LD_VAR 0 2
7083: PUSH
7084: FOR_IN
7085: IFFALSE 7145
// if IsInArea ( i , escapeArea ) then
7087: LD_VAR 0 1
7091: PPUSH
7092: LD_INT 15
7094: PPUSH
7095: CALL_OW 308
7099: IFFALSE 7128
// begin RemoveUnit ( i ) ;
7101: LD_VAR 0 1
7105: PPUSH
7106: CALL_OW 64
// tmp := tmp diff i ;
7110: LD_ADDR_VAR 0 2
7114: PUSH
7115: LD_VAR 0 2
7119: PUSH
7120: LD_VAR 0 1
7124: DIFF
7125: ST_TO_ADDR
// end else
7126: GO 7143
// ComMoveXY ( i , 156 , 211 ) ;
7128: LD_VAR 0 1
7132: PPUSH
7133: LD_INT 156
7135: PPUSH
7136: LD_INT 211
7138: PPUSH
7139: CALL_OW 111
7143: GO 7084
7145: POP
7146: POP
// until not tmp ;
7147: LD_VAR 0 2
7151: NOT
7152: IFFALSE 7067
// end ;
7154: PPOPN 2
7156: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do var i , tmp , doc ;
7157: LD_INT 22
7159: PUSH
7160: LD_INT 3
7162: PUSH
7163: EMPTY
7164: LIST
7165: LIST
7166: PUSH
7167: LD_INT 25
7169: PUSH
7170: LD_INT 4
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: PUSH
7177: EMPTY
7178: LIST
7179: LIST
7180: PPUSH
7181: CALL_OW 69
7185: IFFALSE 7439
7187: GO 7189
7189: DISABLE
7190: LD_INT 0
7192: PPUSH
7193: PPUSH
7194: PPUSH
// begin enable ;
7195: ENABLE
// tmp := FilterUnitsInArea ( mainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7196: LD_ADDR_VAR 0 2
7200: PUSH
7201: LD_INT 14
7203: PPUSH
7204: LD_INT 22
7206: PUSH
7207: LD_INT 3
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: PUSH
7214: LD_INT 21
7216: PUSH
7217: LD_INT 1
7219: PUSH
7220: EMPTY
7221: LIST
7222: LIST
7223: PUSH
7224: LD_INT 3
7226: PUSH
7227: LD_INT 24
7229: PUSH
7230: LD_INT 1000
7232: PUSH
7233: EMPTY
7234: LIST
7235: LIST
7236: PUSH
7237: EMPTY
7238: LIST
7239: LIST
7240: PUSH
7241: EMPTY
7242: LIST
7243: LIST
7244: LIST
7245: PPUSH
7246: CALL_OW 70
7250: ST_TO_ADDR
// doc := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
7251: LD_ADDR_VAR 0 3
7255: PUSH
7256: LD_INT 22
7258: PUSH
7259: LD_INT 3
7261: PUSH
7262: EMPTY
7263: LIST
7264: LIST
7265: PUSH
7266: LD_INT 25
7268: PUSH
7269: LD_INT 4
7271: PUSH
7272: EMPTY
7273: LIST
7274: LIST
7275: PUSH
7276: EMPTY
7277: LIST
7278: LIST
7279: PPUSH
7280: CALL_OW 69
7284: ST_TO_ADDR
// if not doc then
7285: LD_VAR 0 3
7289: NOT
7290: IFFALSE 7294
// exit ;
7292: GO 7439
// if not tmp then
7294: LD_VAR 0 2
7298: NOT
7299: IFFALSE 7390
// begin if not IsInUnit ( doc [ 1 ] ) then
7301: LD_VAR 0 3
7305: PUSH
7306: LD_INT 1
7308: ARRAY
7309: PPUSH
7310: CALL_OW 310
7314: NOT
7315: IFFALSE 7388
// ComEnterUnit ( doc , FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ) ;
7317: LD_VAR 0 3
7321: PPUSH
7322: LD_INT 22
7324: PUSH
7325: LD_INT 3
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: PUSH
7332: LD_INT 2
7334: PUSH
7335: LD_INT 30
7337: PUSH
7338: LD_INT 6
7340: PUSH
7341: EMPTY
7342: LIST
7343: LIST
7344: PUSH
7345: LD_INT 30
7347: PUSH
7348: LD_INT 7
7350: PUSH
7351: EMPTY
7352: LIST
7353: LIST
7354: PUSH
7355: LD_INT 30
7357: PUSH
7358: LD_INT 8
7360: PUSH
7361: EMPTY
7362: LIST
7363: LIST
7364: PUSH
7365: EMPTY
7366: LIST
7367: LIST
7368: LIST
7369: LIST
7370: PUSH
7371: EMPTY
7372: LIST
7373: LIST
7374: PPUSH
7375: CALL_OW 69
7379: PUSH
7380: LD_INT 1
7382: ARRAY
7383: PPUSH
7384: CALL_OW 120
// exit ;
7388: GO 7439
// end ; if IsInUnit ( doc [ 1 ] ) then
7390: LD_VAR 0 3
7394: PUSH
7395: LD_INT 1
7397: ARRAY
7398: PPUSH
7399: CALL_OW 310
7403: IFFALSE 7414
// ComExitBuilding ( doc ) ;
7405: LD_VAR 0 3
7409: PPUSH
7410: CALL_OW 122
// wait ( 3 ) ;
7414: LD_INT 3
7416: PPUSH
7417: CALL_OW 67
// ComHeal ( doc , tmp [ 1 ] ) ;
7421: LD_VAR 0 3
7425: PPUSH
7426: LD_VAR 0 2
7430: PUSH
7431: LD_INT 1
7433: ARRAY
7434: PPUSH
7435: CALL_OW 128
// end ;
7439: PPOPN 3
7441: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do var i , tmp , attacking , areas , area , mech ;
7442: LD_INT 22
7444: PUSH
7445: LD_INT 3
7447: PUSH
7448: EMPTY
7449: LIST
7450: LIST
7451: PUSH
7452: LD_INT 25
7454: PUSH
7455: LD_INT 3
7457: PUSH
7458: EMPTY
7459: LIST
7460: LIST
7461: PUSH
7462: EMPTY
7463: LIST
7464: LIST
7465: PPUSH
7466: CALL_OW 69
7470: PUSH
7471: LD_INT 22
7473: PUSH
7474: LD_INT 3
7476: PUSH
7477: EMPTY
7478: LIST
7479: LIST
7480: PUSH
7481: LD_INT 21
7483: PUSH
7484: LD_INT 2
7486: PUSH
7487: EMPTY
7488: LIST
7489: LIST
7490: PUSH
7491: EMPTY
7492: LIST
7493: LIST
7494: PPUSH
7495: CALL_OW 69
7499: AND
7500: IFFALSE 8259
7502: GO 7504
7504: DISABLE
7505: LD_INT 0
7507: PPUSH
7508: PPUSH
7509: PPUSH
7510: PPUSH
7511: PPUSH
7512: PPUSH
// begin enable ;
7513: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
7514: LD_ADDR_VAR 0 2
7518: PUSH
7519: LD_INT 22
7521: PUSH
7522: LD_INT 3
7524: PUSH
7525: EMPTY
7526: LIST
7527: LIST
7528: PUSH
7529: LD_INT 21
7531: PUSH
7532: LD_INT 2
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: PUSH
7539: LD_INT 3
7541: PUSH
7542: LD_INT 58
7544: PUSH
7545: EMPTY
7546: LIST
7547: PUSH
7548: EMPTY
7549: LIST
7550: LIST
7551: PUSH
7552: EMPTY
7553: LIST
7554: LIST
7555: LIST
7556: PPUSH
7557: CALL_OW 69
7561: ST_TO_ADDR
// areas := [ sectorAlpha , sectorBeta , sectorDelta , mainBaseArea ] ;
7562: LD_ADDR_VAR 0 4
7566: PUSH
7567: LD_INT 10
7569: PUSH
7570: LD_INT 11
7572: PUSH
7573: LD_INT 12
7575: PUSH
7576: LD_INT 14
7578: PUSH
7579: EMPTY
7580: LIST
7581: LIST
7582: LIST
7583: LIST
7584: ST_TO_ADDR
// area := 0 ;
7585: LD_ADDR_VAR 0 5
7589: PUSH
7590: LD_INT 0
7592: ST_TO_ADDR
// attacking := false ;
7593: LD_ADDR_VAR 0 3
7597: PUSH
7598: LD_INT 0
7600: ST_TO_ADDR
// for i in tmp do
7601: LD_ADDR_VAR 0 1
7605: PUSH
7606: LD_VAR 0 2
7610: PUSH
7611: FOR_IN
7612: IFFALSE 8040
// begin if GetDistUnits ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) < 10 and not HasTask ( i ) and not GetTag ( i ) and GetLives ( i ) > 650 then
7614: LD_VAR 0 1
7618: PPUSH
7619: LD_INT 22
7621: PUSH
7622: LD_INT 1
7624: PUSH
7625: EMPTY
7626: LIST
7627: LIST
7628: PPUSH
7629: CALL_OW 69
7633: PPUSH
7634: LD_VAR 0 1
7638: PPUSH
7639: CALL_OW 74
7643: PPUSH
7644: CALL_OW 296
7648: PUSH
7649: LD_INT 10
7651: LESS
7652: PUSH
7653: LD_VAR 0 1
7657: PPUSH
7658: CALL_OW 314
7662: NOT
7663: AND
7664: PUSH
7665: LD_VAR 0 1
7669: PPUSH
7670: CALL_OW 110
7674: NOT
7675: AND
7676: PUSH
7677: LD_VAR 0 1
7681: PPUSH
7682: CALL_OW 256
7686: PUSH
7687: LD_INT 650
7689: GREATER
7690: AND
7691: IFFALSE 7735
// begin ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
7693: LD_VAR 0 1
7697: PPUSH
7698: LD_INT 22
7700: PUSH
7701: LD_INT 1
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: PPUSH
7708: CALL_OW 69
7712: PPUSH
7713: LD_VAR 0 1
7717: PPUSH
7718: CALL_OW 74
7722: PPUSH
7723: CALL_OW 115
// attacking := true ;
7727: LD_ADDR_VAR 0 3
7731: PUSH
7732: LD_INT 1
7734: ST_TO_ADDR
// end ; if not GetTag ( i ) and GetLives ( i ) < 650 and GetType ( i ) = unit_vehicle then
7735: LD_VAR 0 1
7739: PPUSH
7740: CALL_OW 110
7744: NOT
7745: PUSH
7746: LD_VAR 0 1
7750: PPUSH
7751: CALL_OW 256
7755: PUSH
7756: LD_INT 650
7758: LESS
7759: AND
7760: PUSH
7761: LD_VAR 0 1
7765: PPUSH
7766: CALL_OW 247
7770: PUSH
7771: LD_INT 2
7773: EQUAL
7774: AND
7775: IFFALSE 7804
// begin SetTag ( i , 1 ) ;
7777: LD_VAR 0 1
7781: PPUSH
7782: LD_INT 1
7784: PPUSH
7785: CALL_OW 109
// ComMoveXY ( i , 130 , 139 ) ;
7789: LD_VAR 0 1
7793: PPUSH
7794: LD_INT 130
7796: PPUSH
7797: LD_INT 139
7799: PPUSH
7800: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 130 , 139 ) < 6 then
7804: LD_VAR 0 1
7808: PPUSH
7809: CALL_OW 110
7813: PUSH
7814: LD_INT 1
7816: EQUAL
7817: PUSH
7818: LD_VAR 0 1
7822: PPUSH
7823: LD_INT 130
7825: PPUSH
7826: LD_INT 139
7828: PPUSH
7829: CALL_OW 297
7833: PUSH
7834: LD_INT 6
7836: LESS
7837: AND
7838: IFFALSE 7852
// SetTag ( i , 2 ) ;
7840: LD_VAR 0 1
7844: PPUSH
7845: LD_INT 2
7847: PPUSH
7848: CALL_OW 109
// if GetTag ( i ) = 2 then
7852: LD_VAR 0 1
7856: PPUSH
7857: CALL_OW 110
7861: PUSH
7862: LD_INT 2
7864: EQUAL
7865: IFFALSE 8000
// begin if GetLives ( i ) = 1000 then
7867: LD_VAR 0 1
7871: PPUSH
7872: CALL_OW 256
7876: PUSH
7877: LD_INT 1000
7879: EQUAL
7880: IFFALSE 7896
// SetTag ( i , 3 ) else
7882: LD_VAR 0 1
7886: PPUSH
7887: LD_INT 3
7889: PPUSH
7890: CALL_OW 109
7894: GO 8000
// if IsDrivenBy ( i ) then
7896: LD_VAR 0 1
7900: PPUSH
7901: CALL_OW 311
7905: IFFALSE 8000
// begin mech := IsDrivenBy ( i ) ;
7907: LD_ADDR_VAR 0 6
7911: PUSH
7912: LD_VAR 0 1
7916: PPUSH
7917: CALL_OW 311
7921: ST_TO_ADDR
// if not See ( 1 , mech ) and GetLives ( mech ) < 1000 then
7922: LD_INT 1
7924: PPUSH
7925: LD_VAR 0 6
7929: PPUSH
7930: CALL_OW 292
7934: NOT
7935: PUSH
7936: LD_VAR 0 6
7940: PPUSH
7941: CALL_OW 256
7945: PUSH
7946: LD_INT 1000
7948: LESS
7949: AND
7950: IFFALSE 7964
// SetLives ( mech , 1000 ) ;
7952: LD_VAR 0 6
7956: PPUSH
7957: LD_INT 1000
7959: PPUSH
7960: CALL_OW 234
// if not See ( 1 , i ) then
7964: LD_INT 1
7966: PPUSH
7967: LD_VAR 0 1
7971: PPUSH
7972: CALL_OW 292
7976: NOT
7977: IFFALSE 7991
// SetFuel ( i , 100 ) ;
7979: LD_VAR 0 1
7983: PPUSH
7984: LD_INT 100
7986: PPUSH
7987: CALL_OW 240
// ComRepairVehicleAndReturn ( mech ) ;
7991: LD_VAR 0 6
7995: PPUSH
7996: CALL 72405 0 1
// end ; end ; if GetTag ( i ) = 3 and IsDrivenBy ( i ) then
8000: LD_VAR 0 1
8004: PPUSH
8005: CALL_OW 110
8009: PUSH
8010: LD_INT 3
8012: EQUAL
8013: PUSH
8014: LD_VAR 0 1
8018: PPUSH
8019: CALL_OW 311
8023: AND
8024: IFFALSE 8038
// SetTag ( i , 0 ) ;
8026: LD_VAR 0 1
8030: PPUSH
8031: LD_INT 0
8033: PPUSH
8034: CALL_OW 109
// end ;
8038: GO 7611
8040: POP
8041: POP
// if attacking then
8042: LD_VAR 0 3
8046: IFFALSE 8050
// exit ;
8048: GO 8259
// if can_end and tmp then
8050: LD_EXP 6
8054: PUSH
8055: LD_VAR 0 2
8059: AND
8060: IFFALSE 8115
// begin for i in tmp do
8062: LD_ADDR_VAR 0 1
8066: PUSH
8067: LD_VAR 0 2
8071: PUSH
8072: FOR_IN
8073: IFFALSE 8111
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
8075: LD_VAR 0 1
8079: PPUSH
8080: LD_INT 22
8082: PUSH
8083: LD_INT 1
8085: PUSH
8086: EMPTY
8087: LIST
8088: LIST
8089: PPUSH
8090: CALL_OW 69
8094: PPUSH
8095: LD_VAR 0 1
8099: PPUSH
8100: CALL_OW 74
8104: PPUSH
8105: CALL_OW 115
8109: GO 8072
8111: POP
8112: POP
// exit ;
8113: GO 8259
// end ; for i in areas do
8115: LD_ADDR_VAR 0 1
8119: PUSH
8120: LD_VAR 0 4
8124: PUSH
8125: FOR_IN
8126: IFFALSE 8163
// if FilterUnitsInArea ( i , [ f_side , 1 ] ) then
8128: LD_VAR 0 1
8132: PPUSH
8133: LD_INT 22
8135: PUSH
8136: LD_INT 1
8138: PUSH
8139: EMPTY
8140: LIST
8141: LIST
8142: PPUSH
8143: CALL_OW 70
8147: IFFALSE 8161
// begin area := i ;
8149: LD_ADDR_VAR 0 5
8153: PUSH
8154: LD_VAR 0 1
8158: ST_TO_ADDR
// break ;
8159: GO 8163
// end ;
8161: GO 8125
8163: POP
8164: POP
// if area then
8165: LD_VAR 0 5
8169: IFFALSE 8259
// begin for i in tmp do
8171: LD_ADDR_VAR 0 1
8175: PUSH
8176: LD_VAR 0 2
8180: PUSH
8181: FOR_IN
8182: IFFALSE 8257
// begin if GetTag ( i ) then
8184: LD_VAR 0 1
8188: PPUSH
8189: CALL_OW 110
8193: IFFALSE 8197
// continue ;
8195: GO 8181
// if GetFuel ( i ) < 33 then
8197: LD_VAR 0 1
8201: PPUSH
8202: CALL_OW 261
8206: PUSH
8207: LD_INT 33
8209: LESS
8210: IFFALSE 8224
// SetFuel ( i , 33 ) ;
8212: LD_VAR 0 1
8216: PPUSH
8217: LD_INT 33
8219: PPUSH
8220: CALL_OW 240
// if not IsInArea ( i , area ) then
8224: LD_VAR 0 1
8228: PPUSH
8229: LD_VAR 0 5
8233: PPUSH
8234: CALL_OW 308
8238: NOT
8239: IFFALSE 8255
// ComMoveToArea ( i , area ) ;
8241: LD_VAR 0 1
8245: PPUSH
8246: LD_VAR 0 5
8250: PPUSH
8251: CALL_OW 113
// end ;
8255: GO 8181
8257: POP
8258: POP
// end ; end ;
8259: PPOPN 6
8261: END
// every 15 15$00 trigger Difficulty > 1 do var i , j , un , veh , time , count ;
8262: LD_OWVAR 67
8266: PUSH
8267: LD_INT 1
8269: GREATER
8270: IFFALSE 8559
8272: GO 8274
8274: DISABLE
8275: LD_INT 0
8277: PPUSH
8278: PPUSH
8279: PPUSH
8280: PPUSH
8281: PPUSH
8282: PPUSH
// begin uc_side := 3 ;
8283: LD_ADDR_OWVAR 20
8287: PUSH
8288: LD_INT 3
8290: ST_TO_ADDR
// uc_nation := 3 ;
8291: LD_ADDR_OWVAR 21
8295: PUSH
8296: LD_INT 3
8298: ST_TO_ADDR
// time := [ 9 9$00 , 7 7$00 , 6 6$00 , 5 5$30 ] [ Difficulty ] ;
8299: LD_ADDR_VAR 0 5
8303: PUSH
8304: LD_INT 18900
8306: PUSH
8307: LD_INT 14700
8309: PUSH
8310: LD_INT 12600
8312: PUSH
8313: LD_INT 11550
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: LIST
8320: LIST
8321: PUSH
8322: LD_OWVAR 67
8326: ARRAY
8327: ST_TO_ADDR
// count := [ 2 , 2 , 3 , 3 ] [ Difficulty ] ;
8328: LD_ADDR_VAR 0 6
8332: PUSH
8333: LD_INT 2
8335: PUSH
8336: LD_INT 2
8338: PUSH
8339: LD_INT 3
8341: PUSH
8342: LD_INT 3
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: LIST
8349: LIST
8350: PUSH
8351: LD_OWVAR 67
8355: ARRAY
8356: ST_TO_ADDR
// for i = 1 to count do
8357: LD_ADDR_VAR 0 1
8361: PUSH
8362: DOUBLE
8363: LD_INT 1
8365: DEC
8366: ST_TO_ADDR
8367: LD_VAR 0 6
8371: PUSH
8372: FOR_TO
8373: IFFALSE 8557
// begin wait ( time ) ;
8375: LD_VAR 0 5
8379: PPUSH
8380: CALL_OW 67
// for j = 1 to rand ( 1 , Difficulty ) do
8384: LD_ADDR_VAR 0 2
8388: PUSH
8389: DOUBLE
8390: LD_INT 1
8392: DEC
8393: ST_TO_ADDR
8394: LD_INT 1
8396: PPUSH
8397: LD_OWVAR 67
8401: PPUSH
8402: CALL_OW 12
8406: PUSH
8407: FOR_TO
8408: IFFALSE 8553
// begin veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 80 ) ;
8410: LD_ADDR_VAR 0 4
8414: PUSH
8415: LD_INT 3
8417: PPUSH
8418: LD_INT 3
8420: PPUSH
8421: LD_INT 22
8423: PPUSH
8424: LD_INT 1
8426: PPUSH
8427: LD_INT 1
8429: PPUSH
8430: LD_INT 43
8432: PUSH
8433: LD_INT 44
8435: PUSH
8436: LD_INT 42
8438: PUSH
8439: EMPTY
8440: LIST
8441: LIST
8442: LIST
8443: PUSH
8444: LD_VAR 0 1
8448: PUSH
8449: LD_INT 3
8451: MOD
8452: PUSH
8453: LD_INT 1
8455: PLUS
8456: ARRAY
8457: PPUSH
8458: LD_INT 80
8460: PPUSH
8461: CALL 520 0 7
8465: ST_TO_ADDR
// PlaceUnitArea ( veh , southArea , false ) ;
8466: LD_VAR 0 4
8470: PPUSH
8471: LD_INT 13
8473: PPUSH
8474: LD_INT 0
8476: PPUSH
8477: CALL_OW 49
// PrepareHuman ( false , 3 , [ 4 , 5 , 5 , 7 ] [ Difficulty ] ) ;
8481: LD_INT 0
8483: PPUSH
8484: LD_INT 3
8486: PPUSH
8487: LD_INT 4
8489: PUSH
8490: LD_INT 5
8492: PUSH
8493: LD_INT 5
8495: PUSH
8496: LD_INT 7
8498: PUSH
8499: EMPTY
8500: LIST
8501: LIST
8502: LIST
8503: LIST
8504: PUSH
8505: LD_OWVAR 67
8509: ARRAY
8510: PPUSH
8511: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
8515: CALL_OW 44
8519: PPUSH
8520: LD_VAR 0 4
8524: PPUSH
8525: CALL_OW 52
// wait ( 0 0$01 ) ;
8529: LD_INT 35
8531: PPUSH
8532: CALL_OW 67
// ComMoveXY ( veh , 143 , 143 ) ;
8536: LD_VAR 0 4
8540: PPUSH
8541: LD_INT 143
8543: PPUSH
8544: LD_INT 143
8546: PPUSH
8547: CALL_OW 111
// end ;
8551: GO 8407
8553: POP
8554: POP
// end ;
8555: GO 8372
8557: POP
8558: POP
// end ;
8559: PPOPN 6
8561: END
// every 8 8$00 do var i , un , time ;
8562: GO 8564
8564: DISABLE
8565: LD_INT 0
8567: PPUSH
8568: PPUSH
8569: PPUSH
// begin time := [ 3 3$00 , 1 1$00 , 0 0$30 ] ;
8570: LD_ADDR_VAR 0 3
8574: PUSH
8575: LD_INT 6300
8577: PUSH
8578: LD_INT 2100
8580: PUSH
8581: LD_INT 1050
8583: PUSH
8584: EMPTY
8585: LIST
8586: LIST
8587: LIST
8588: ST_TO_ADDR
// wait ( time ) ;
8589: LD_VAR 0 3
8593: PPUSH
8594: CALL_OW 67
// uc_side := 3 ;
8598: LD_ADDR_OWVAR 20
8602: PUSH
8603: LD_INT 3
8605: ST_TO_ADDR
// uc_nation := 3 ;
8606: LD_ADDR_OWVAR 21
8610: PUSH
8611: LD_INT 3
8613: ST_TO_ADDR
// for i = 1 to 2 do
8614: LD_ADDR_VAR 0 1
8618: PUSH
8619: DOUBLE
8620: LD_INT 1
8622: DEC
8623: ST_TO_ADDR
8624: LD_INT 2
8626: PUSH
8627: FOR_TO
8628: IFFALSE 8691
// begin PrepareHuman ( false , 1 , 4 ) ;
8630: LD_INT 0
8632: PPUSH
8633: LD_INT 1
8635: PPUSH
8636: LD_INT 4
8638: PPUSH
8639: CALL_OW 380
// un := CreateHuman ;
8643: LD_ADDR_VAR 0 2
8647: PUSH
8648: CALL_OW 44
8652: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_dep_main ) ;
8653: LD_VAR 0 2
8657: PPUSH
8658: LD_INT 16
8660: PPUSH
8661: CALL_OW 52
// ComExitBuilding ( un ) ;
8665: LD_VAR 0 2
8669: PPUSH
8670: CALL_OW 122
// AddComAgressiveMove ( un , 41 , 76 ) ;
8674: LD_VAR 0 2
8678: PPUSH
8679: LD_INT 41
8681: PPUSH
8682: LD_INT 76
8684: PPUSH
8685: CALL_OW 174
// end ;
8689: GO 8627
8691: POP
8692: POP
// end ; end_of_file
8693: PPOPN 3
8695: END
// export function Action ; begin
8696: LD_INT 0
8698: PPUSH
// CenterNowOnXY ( 28 , 3 ) ;
8699: LD_INT 28
8701: PPUSH
8702: LD_INT 3
8704: PPUSH
8705: CALL_OW 86
// PlaceSeeing ( 41 , 76 , 1 , 10 ) ;
8709: LD_INT 41
8711: PPUSH
8712: LD_INT 76
8714: PPUSH
8715: LD_INT 1
8717: PPUSH
8718: LD_INT 10
8720: PPUSH
8721: CALL_OW 330
// RemoveSeeing ( 41 , 76 , 1 ) ;
8725: LD_INT 41
8727: PPUSH
8728: LD_INT 76
8730: PPUSH
8731: LD_INT 1
8733: PPUSH
8734: CALL_OW 331
// InGameOn ;
8738: CALL_OW 8
// SayRadio ( Harisson , D2-Har-1 ) ;
8742: LD_EXP 19
8746: PPUSH
8747: LD_STRING D2-Har-1
8749: PPUSH
8750: CALL_OW 94
// InGameOff ;
8754: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
8758: LD_STRING M1
8760: PPUSH
8761: CALL_OW 337
// end ;
8765: LD_VAR 0 1
8769: RET
// every 0 0$1 trigger buildings_counter > 1 do var un ;
8770: LD_EXP 4
8774: PUSH
8775: LD_INT 1
8777: GREATER
8778: IFFALSE 8869
8780: GO 8782
8782: DISABLE
8783: LD_INT 0
8785: PPUSH
// begin un := GetRandom ( sex_male ) [ 1 ] ;
8786: LD_ADDR_VAR 0 1
8790: PUSH
8791: LD_INT 1
8793: PPUSH
8794: CALL 608 0 1
8798: PUSH
8799: LD_INT 1
8801: ARRAY
8802: ST_TO_ADDR
// Say ( un , D2a-Sol1-1 ) ;
8803: LD_VAR 0 1
8807: PPUSH
8808: LD_STRING D2a-Sol1-1
8810: PPUSH
8811: CALL_OW 88
// if not un then
8815: LD_VAR 0 1
8819: NOT
8820: IFFALSE 8851
// begin un := GetRandom ( sex_female ) [ 1 ] ;
8822: LD_ADDR_VAR 0 1
8826: PUSH
8827: LD_INT 2
8829: PPUSH
8830: CALL 608 0 1
8834: PUSH
8835: LD_INT 1
8837: ARRAY
8838: ST_TO_ADDR
// Say ( un , D2a-FSol1-1 ) ;
8839: LD_VAR 0 1
8843: PPUSH
8844: LD_STRING D2a-FSol1-1
8846: PPUSH
8847: CALL_OW 88
// end ; if Khatam then
8851: LD_EXP 17
8855: IFFALSE 8869
// Say ( Khatam , D3b-Khat-3 ) ;
8857: LD_EXP 17
8861: PPUSH
8862: LD_STRING D3b-Khat-3
8864: PPUSH
8865: CALL_OW 88
// end ;
8869: PPOPN 1
8871: END
// every 0 0$1 trigger Frank and not Kikuchi and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Frank , 7 ] ] ) and IsOk ( Frank ) and not InBattle ( 1 ) and not InBattle ( 4 ) do var i , ape ;
8872: LD_EXP 15
8876: PUSH
8877: LD_EXP 18
8881: NOT
8882: AND
8883: PUSH
8884: LD_INT 22
8886: PUSH
8887: LD_INT 1
8889: PUSH
8890: EMPTY
8891: LIST
8892: LIST
8893: PUSH
8894: LD_INT 91
8896: PUSH
8897: LD_EXP 15
8901: PUSH
8902: LD_INT 7
8904: PUSH
8905: EMPTY
8906: LIST
8907: LIST
8908: LIST
8909: PUSH
8910: EMPTY
8911: LIST
8912: LIST
8913: PPUSH
8914: CALL_OW 69
8918: AND
8919: PUSH
8920: LD_EXP 15
8924: PPUSH
8925: CALL_OW 302
8929: AND
8930: PUSH
8931: LD_INT 1
8933: PPUSH
8934: CALL_OW 463
8938: NOT
8939: AND
8940: PUSH
8941: LD_INT 4
8943: PPUSH
8944: CALL_OW 463
8948: NOT
8949: AND
8950: IFFALSE 9537
8952: GO 8954
8954: DISABLE
8955: LD_INT 0
8957: PPUSH
8958: PPUSH
// begin InGameOn ;
8959: CALL_OW 8
// ape := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
8963: LD_ADDR_VAR 0 2
8967: PUSH
8968: LD_INT 22
8970: PUSH
8971: LD_INT 0
8973: PUSH
8974: EMPTY
8975: LIST
8976: LIST
8977: PUSH
8978: LD_INT 25
8980: PUSH
8981: LD_INT 12
8983: PUSH
8984: EMPTY
8985: LIST
8986: LIST
8987: PUSH
8988: EMPTY
8989: LIST
8990: LIST
8991: PPUSH
8992: CALL_OW 69
8996: ST_TO_ADDR
// ape := NearestUnitToUnit ( ape , Frank ) ;
8997: LD_ADDR_VAR 0 2
9001: PUSH
9002: LD_VAR 0 2
9006: PPUSH
9007: LD_EXP 15
9011: PPUSH
9012: CALL_OW 74
9016: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , Frank , 20 ] ] ) do
9017: LD_ADDR_VAR 0 1
9021: PUSH
9022: LD_INT 22
9024: PUSH
9025: LD_INT 1
9027: PUSH
9028: EMPTY
9029: LIST
9030: LIST
9031: PUSH
9032: LD_INT 21
9034: PUSH
9035: LD_INT 1
9037: PUSH
9038: EMPTY
9039: LIST
9040: LIST
9041: PUSH
9042: LD_INT 91
9044: PUSH
9045: LD_EXP 15
9049: PUSH
9050: LD_INT 20
9052: PUSH
9053: EMPTY
9054: LIST
9055: LIST
9056: LIST
9057: PUSH
9058: EMPTY
9059: LIST
9060: LIST
9061: LIST
9062: PPUSH
9063: CALL_OW 69
9067: PUSH
9068: FOR_IN
9069: IFFALSE 9087
// ComTurnUnit ( i , Frank ) ;
9071: LD_VAR 0 1
9075: PPUSH
9076: LD_EXP 15
9080: PPUSH
9081: CALL_OW 119
9085: GO 9068
9087: POP
9088: POP
// SetSide ( Frank , 1 ) ;
9089: LD_EXP 15
9093: PPUSH
9094: LD_INT 1
9096: PPUSH
9097: CALL_OW 235
// ComMoveUnit ( JMM , Frank ) ;
9101: LD_EXP 9
9105: PPUSH
9106: LD_EXP 15
9110: PPUSH
9111: CALL_OW 112
// AddComTurnUnit ( JMM , Frank ) ;
9115: LD_EXP 9
9119: PPUSH
9120: LD_EXP 15
9124: PPUSH
9125: CALL_OW 179
// CenterOnUnits ( Frank ) ;
9129: LD_EXP 15
9133: PPUSH
9134: CALL_OW 85
// Say ( Frank , D3a-Frank-1 ) ;
9138: LD_EXP 15
9142: PPUSH
9143: LD_STRING D3a-Frank-1
9145: PPUSH
9146: CALL_OW 88
// ComMoveXY ( ape , 42 , 78 ) ;
9150: LD_VAR 0 2
9154: PPUSH
9155: LD_INT 42
9157: PPUSH
9158: LD_INT 78
9160: PPUSH
9161: CALL_OW 111
// AddComTurnUnit ( ape , Frank ) ;
9165: LD_VAR 0 2
9169: PPUSH
9170: LD_EXP 15
9174: PPUSH
9175: CALL_OW 179
// if Lisa then
9179: LD_EXP 14
9183: IFFALSE 9197
// Say ( Lisa , D3a-Lisa-1 ) ;
9185: LD_EXP 14
9189: PPUSH
9190: LD_STRING D3a-Lisa-1
9192: PPUSH
9193: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
9197: LD_EXP 9
9201: PPUSH
9202: LD_STRING D3a-JMM-1
9204: PPUSH
9205: CALL_OW 88
// if Cyrus then
9209: LD_EXP 13
9213: IFFALSE 9227
// Say ( Cyrus , D3a-Cyrus-1 ) ;
9215: LD_EXP 13
9219: PPUSH
9220: LD_STRING D3a-Cyrus-1
9222: PPUSH
9223: CALL_OW 88
// if GetRandom ( sex_male ) then
9227: LD_INT 1
9229: PPUSH
9230: CALL 608 0 1
9234: IFFALSE 9255
// Say ( GetRandom ( sex_male ) [ 1 ] , D3a-Sol1-1 ) ;
9236: LD_INT 1
9238: PPUSH
9239: CALL 608 0 1
9243: PUSH
9244: LD_INT 1
9246: ARRAY
9247: PPUSH
9248: LD_STRING D3a-Sol1-1
9250: PPUSH
9251: CALL_OW 88
// if GetRandom ( sex_female ) then
9255: LD_INT 2
9257: PPUSH
9258: CALL 608 0 1
9262: IFFALSE 9283
// Say ( GetRandom ( sex_female ) [ 1 ] , D3a-FSol1-1 ) ;
9264: LD_INT 2
9266: PPUSH
9267: CALL 608 0 1
9271: PUSH
9272: LD_INT 1
9274: ARRAY
9275: PPUSH
9276: LD_STRING D3a-FSol1-1
9278: PPUSH
9279: CALL_OW 88
// if Gladstone then
9283: LD_EXP 16
9287: IFFALSE 9301
// Say ( Gladstone , D3a-Glad-1 ) ;
9289: LD_EXP 16
9293: PPUSH
9294: LD_STRING D3a-Glad-1
9296: PPUSH
9297: CALL_OW 88
// ComMoveXY ( ape , 60 , 113 ) ;
9301: LD_VAR 0 2
9305: PPUSH
9306: LD_INT 60
9308: PPUSH
9309: LD_INT 113
9311: PPUSH
9312: CALL_OW 111
// Say ( Frank , D3a-Frank-2 ) ;
9316: LD_EXP 15
9320: PPUSH
9321: LD_STRING D3a-Frank-2
9323: PPUSH
9324: CALL_OW 88
// ComTurnUnit ( Frank , JMM ) ;
9328: LD_EXP 15
9332: PPUSH
9333: LD_EXP 9
9337: PPUSH
9338: CALL_OW 119
// Say ( JMM , D3a-JMM-2 ) ;
9342: LD_EXP 9
9346: PPUSH
9347: LD_STRING D3a-JMM-2
9349: PPUSH
9350: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9354: LD_INT 1
9356: PPUSH
9357: LD_INT 4
9359: PPUSH
9360: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9364: LD_INT 85
9366: PPUSH
9367: LD_INT 134
9369: PPUSH
9370: CALL_OW 84
// Say ( Frank , D3a-Frank-3 ) ;
9374: LD_EXP 15
9378: PPUSH
9379: LD_STRING D3a-Frank-3
9381: PPUSH
9382: CALL_OW 88
// Wait ( 0 0$01 ) ;
9386: LD_INT 35
9388: PPUSH
9389: CALL_OW 67
// CenterOnXY ( 166 , 136 ) ;
9393: LD_INT 166
9395: PPUSH
9396: LD_INT 136
9398: PPUSH
9399: CALL_OW 84
// Say ( JMM , D3a-JMM-3 ) ;
9403: LD_EXP 9
9407: PPUSH
9408: LD_STRING D3a-JMM-3
9410: PPUSH
9411: CALL_OW 88
// Wait ( 0 0$01 ) ;
9415: LD_INT 35
9417: PPUSH
9418: CALL_OW 67
// CenterNowOnUnits ( Frank ) ;
9422: LD_EXP 15
9426: PPUSH
9427: CALL_OW 87
// Say ( Frank , D3a-Frank-4 ) ;
9431: LD_EXP 15
9435: PPUSH
9436: LD_STRING D3a-Frank-4
9438: PPUSH
9439: CALL_OW 88
// if Lisa then
9443: LD_EXP 14
9447: IFFALSE 9461
// Say ( Lisa , D3a-Lisa-4 ) ;
9449: LD_EXP 14
9453: PPUSH
9454: LD_STRING D3a-Lisa-4
9456: PPUSH
9457: CALL_OW 88
// Say ( JMM , D3a-JMM-4 ) ;
9461: LD_EXP 9
9465: PPUSH
9466: LD_STRING D3a-JMM-4
9468: PPUSH
9469: CALL_OW 88
// Say ( Frank , D3a-Frank-5 ) ;
9473: LD_EXP 15
9477: PPUSH
9478: LD_STRING D3a-Frank-5
9480: PPUSH
9481: CALL_OW 88
// Say ( JMM , D3a-JMM-5 ) ;
9485: LD_EXP 9
9489: PPUSH
9490: LD_STRING D3a-JMM-5
9492: PPUSH
9493: CALL_OW 88
// Say ( Frank , D3a-Frank-6 ) ;
9497: LD_EXP 15
9501: PPUSH
9502: LD_STRING D3a-Frank-6
9504: PPUSH
9505: CALL_OW 88
// Say ( JMM , D3a-JMM-6 ) ;
9509: LD_EXP 9
9513: PPUSH
9514: LD_STRING D3a-JMM-6
9516: PPUSH
9517: CALL_OW 88
// Say ( Frank , D3a-Frank-7 ) ;
9521: LD_EXP 15
9525: PPUSH
9526: LD_STRING D3a-Frank-7
9528: PPUSH
9529: CALL_OW 88
// InGameOff ;
9533: CALL_OW 9
// end ;
9537: PPOPN 2
9539: END
// every 0 0$1 trigger Kikuchi and not Frank and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Kikuchi , 7 ] ] ) and IsOk ( Kikuchi ) and not InBattle ( 1 ) and not InBattle ( 4 ) do
9540: LD_EXP 18
9544: PUSH
9545: LD_EXP 15
9549: NOT
9550: AND
9551: PUSH
9552: LD_INT 22
9554: PUSH
9555: LD_INT 1
9557: PUSH
9558: EMPTY
9559: LIST
9560: LIST
9561: PUSH
9562: LD_INT 91
9564: PUSH
9565: LD_EXP 18
9569: PUSH
9570: LD_INT 7
9572: PUSH
9573: EMPTY
9574: LIST
9575: LIST
9576: LIST
9577: PUSH
9578: EMPTY
9579: LIST
9580: LIST
9581: PPUSH
9582: CALL_OW 69
9586: AND
9587: PUSH
9588: LD_EXP 18
9592: PPUSH
9593: CALL_OW 302
9597: AND
9598: PUSH
9599: LD_INT 1
9601: PPUSH
9602: CALL_OW 463
9606: NOT
9607: AND
9608: PUSH
9609: LD_INT 4
9611: PPUSH
9612: CALL_OW 463
9616: NOT
9617: AND
9618: IFFALSE 9798
9620: GO 9622
9622: DISABLE
// begin InGameOn ;
9623: CALL_OW 8
// ComTurnUnit ( JMM , Kikuchi ) ;
9627: LD_EXP 9
9631: PPUSH
9632: LD_EXP 18
9636: PPUSH
9637: CALL_OW 119
// ComTurnUnit ( Kikuchi , JMM ) ;
9641: LD_EXP 18
9645: PPUSH
9646: LD_EXP 9
9650: PPUSH
9651: CALL_OW 119
// CenterOnUnits ( Kikuchi ) ;
9655: LD_EXP 18
9659: PPUSH
9660: CALL_OW 85
// Say ( Kikuchi , D3b-Yam-1 ) ;
9664: LD_EXP 18
9668: PPUSH
9669: LD_STRING D3b-Yam-1
9671: PPUSH
9672: CALL_OW 88
// Say ( JMM , D3b-JMM-1 ) ;
9676: LD_EXP 9
9680: PPUSH
9681: LD_STRING D3b-JMM-1
9683: PPUSH
9684: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9688: LD_INT 1
9690: PPUSH
9691: LD_INT 4
9693: PPUSH
9694: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9698: LD_INT 85
9700: PPUSH
9701: LD_INT 134
9703: PPUSH
9704: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-2 ) ;
9708: LD_EXP 18
9712: PPUSH
9713: LD_STRING D3b-Yam-2
9715: PPUSH
9716: CALL_OW 88
// Wait ( 0 0$01 ) ;
9720: LD_INT 35
9722: PPUSH
9723: CALL_OW 67
// Say ( JMM , D3b-JMM-2 ) ;
9727: LD_EXP 9
9731: PPUSH
9732: LD_STRING D3b-JMM-2
9734: PPUSH
9735: CALL_OW 88
// CenterOnXY ( 166 , 136 ) ;
9739: LD_INT 166
9741: PPUSH
9742: LD_INT 136
9744: PPUSH
9745: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-3 ) ;
9749: LD_EXP 18
9753: PPUSH
9754: LD_STRING D3b-Yam-3
9756: PPUSH
9757: CALL_OW 88
// CenterNowOnUnits ( JMM ) ;
9761: LD_EXP 9
9765: PPUSH
9766: CALL_OW 87
// Say ( JMM , D3b-JMM-3a ) ;
9770: LD_EXP 9
9774: PPUSH
9775: LD_STRING D3b-JMM-3a
9777: PPUSH
9778: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
9782: LD_EXP 18
9786: PPUSH
9787: LD_INT 1
9789: PPUSH
9790: CALL_OW 235
// InGameOff ;
9794: CALL_OW 9
// end ;
9798: END
// every 0 0$1 trigger FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var un , x , tw , i ;
9799: LD_INT 7
9801: PPUSH
9802: LD_INT 22
9804: PUSH
9805: LD_INT 1
9807: PUSH
9808: EMPTY
9809: LIST
9810: LIST
9811: PUSH
9812: LD_INT 3
9814: PUSH
9815: LD_INT 24
9817: PUSH
9818: LD_INT 1000
9820: PUSH
9821: EMPTY
9822: LIST
9823: LIST
9824: PUSH
9825: EMPTY
9826: LIST
9827: LIST
9828: PUSH
9829: EMPTY
9830: LIST
9831: LIST
9832: PPUSH
9833: CALL_OW 70
9837: IFFALSE 10293
9839: GO 9841
9841: DISABLE
9842: LD_INT 0
9844: PPUSH
9845: PPUSH
9846: PPUSH
9847: PPUSH
// begin repeat wait ( 0 0$1 ) ;
9848: LD_INT 35
9850: PPUSH
9851: CALL_OW 67
// un := FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
9855: LD_ADDR_VAR 0 1
9859: PUSH
9860: LD_INT 7
9862: PPUSH
9863: LD_INT 22
9865: PUSH
9866: LD_INT 1
9868: PUSH
9869: EMPTY
9870: LIST
9871: LIST
9872: PUSH
9873: LD_INT 3
9875: PUSH
9876: LD_INT 24
9878: PUSH
9879: LD_INT 1000
9881: PUSH
9882: EMPTY
9883: LIST
9884: LIST
9885: PUSH
9886: EMPTY
9887: LIST
9888: LIST
9889: PUSH
9890: EMPTY
9891: LIST
9892: LIST
9893: PPUSH
9894: CALL_OW 70
9898: ST_TO_ADDR
// if not un then
9899: LD_VAR 0 1
9903: NOT
9904: IFFALSE 9908
// continue ;
9906: GO 9848
// tw := NearbyTowerHasEnergy ( un [ 1 ] ) ;
9908: LD_ADDR_VAR 0 3
9912: PUSH
9913: LD_VAR 0 1
9917: PUSH
9918: LD_INT 1
9920: ARRAY
9921: PPUSH
9922: CALL 2053 0 1
9926: ST_TO_ADDR
// until tw ;
9927: LD_VAR 0 3
9931: IFFALSE 9848
// DialogueOn ;
9933: CALL_OW 6
// CenterNowOnUnits ( tw ) ;
9937: LD_VAR 0 3
9941: PPUSH
9942: CALL_OW 87
// if Lisa then
9946: LD_EXP 14
9950: IFFALSE 9978
// begin Say ( Lisa , D5-Lisa-1 ) ;
9952: LD_EXP 14
9956: PPUSH
9957: LD_STRING D5-Lisa-1
9959: PPUSH
9960: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
9964: LD_EXP 9
9968: PPUSH
9969: LD_STRING D5-JMM-1a
9971: PPUSH
9972: CALL_OW 88
// end else
9976: GO 9990
// Say ( JMM , D5-JMM-1 ) ;
9978: LD_EXP 9
9982: PPUSH
9983: LD_STRING D5-JMM-1
9985: PPUSH
9986: CALL_OW 88
// DialogueOff ;
9990: CALL_OW 7
// while ( true ) do
9994: LD_INT 1
9996: IFFALSE 10052
// begin wait ( 0 0$01 ) ;
9998: LD_INT 35
10000: PPUSH
10001: CALL_OW 67
// x := FilterUnitsExceptArea ( northElectro , [ [ f_btype , b_oil_power ] , [ f_see , 1 ] ] ) ;
10005: LD_ADDR_VAR 0 2
10009: PUSH
10010: LD_INT 8
10012: PPUSH
10013: LD_INT 30
10015: PUSH
10016: LD_INT 26
10018: PUSH
10019: EMPTY
10020: LIST
10021: LIST
10022: PUSH
10023: LD_INT 101
10025: PUSH
10026: LD_INT 1
10028: PUSH
10029: EMPTY
10030: LIST
10031: LIST
10032: PUSH
10033: EMPTY
10034: LIST
10035: LIST
10036: PPUSH
10037: CALL_OW 71
10041: ST_TO_ADDR
// if x then
10042: LD_VAR 0 2
10046: IFFALSE 10050
// break ;
10048: GO 10052
// end ;
10050: GO 9994
// CenterOnUnits ( x [ 1 ] ) ;
10052: LD_VAR 0 2
10056: PUSH
10057: LD_INT 1
10059: ARRAY
10060: PPUSH
10061: CALL_OW 85
// if Frank and GetSide ( Frank ) = 1 then
10065: LD_EXP 15
10069: PUSH
10070: LD_EXP 15
10074: PPUSH
10075: CALL_OW 255
10079: PUSH
10080: LD_INT 1
10082: EQUAL
10083: AND
10084: IFFALSE 10100
// Say ( Frank , D5a-Frank-1 ) else
10086: LD_EXP 15
10090: PPUSH
10091: LD_STRING D5a-Frank-1
10093: PPUSH
10094: CALL_OW 88
10098: GO 10154
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
10100: LD_EXP 18
10104: PUSH
10105: LD_EXP 18
10109: PPUSH
10110: CALL_OW 255
10114: PUSH
10115: LD_INT 1
10117: EQUAL
10118: AND
10119: IFFALSE 10135
// Say ( Kikuchi , D5a-Yam-1 ) else
10121: LD_EXP 18
10125: PPUSH
10126: LD_STRING D5a-Yam-1
10128: PPUSH
10129: CALL_OW 88
10133: GO 10154
// Say ( GetRandom ( sex_male ) [ 1 ] , D5a-Sol1-1 ) ;
10135: LD_INT 1
10137: PPUSH
10138: CALL 608 0 1
10142: PUSH
10143: LD_INT 1
10145: ARRAY
10146: PPUSH
10147: LD_STRING D5a-Sol1-1
10149: PPUSH
10150: CALL_OW 88
// Say ( JMM , D5a-JMM-1 ) ;
10154: LD_EXP 9
10158: PPUSH
10159: LD_STRING D5a-JMM-1
10161: PPUSH
10162: CALL_OW 88
// if Cyrus then
10166: LD_EXP 13
10170: IFFALSE 10184
// Say ( Cyrus , D5a-Cyrus-1 ) ;
10172: LD_EXP 13
10176: PPUSH
10177: LD_STRING D5a-Cyrus-1
10179: PPUSH
10180: CALL_OW 88
// x := false ;
10184: LD_ADDR_VAR 0 2
10188: PUSH
10189: LD_INT 0
10191: ST_TO_ADDR
// while ( true ) do
10192: LD_INT 1
10194: IFFALSE 10281
// begin wait ( 0 0$01 ) ;
10196: LD_INT 35
10198: PPUSH
10199: CALL_OW 67
// for i in FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) diff ru_dep_west do
10203: LD_ADDR_VAR 0 4
10207: PUSH
10208: LD_INT 2
10210: PUSH
10211: LD_INT 30
10213: PUSH
10214: LD_INT 0
10216: PUSH
10217: EMPTY
10218: LIST
10219: LIST
10220: PUSH
10221: LD_INT 30
10223: PUSH
10224: LD_INT 1
10226: PUSH
10227: EMPTY
10228: LIST
10229: LIST
10230: PUSH
10231: EMPTY
10232: LIST
10233: LIST
10234: LIST
10235: PPUSH
10236: CALL_OW 69
10240: PUSH
10241: LD_INT 1
10243: DIFF
10244: PUSH
10245: FOR_IN
10246: IFFALSE 10269
// if BaseNeedEnergy ( i ) then
10248: LD_VAR 0 4
10252: PPUSH
10253: CALL 1178 0 1
10257: IFFALSE 10267
// x := true ;
10259: LD_ADDR_VAR 0 2
10263: PUSH
10264: LD_INT 1
10266: ST_TO_ADDR
10267: GO 10245
10269: POP
10270: POP
// if x then
10271: LD_VAR 0 2
10275: IFFALSE 10279
// break ;
10277: GO 10281
// end ;
10279: GO 10192
// Say ( JMM , D5b-JMM-1 ) ;
10281: LD_EXP 9
10285: PPUSH
10286: LD_STRING D5b-JMM-1
10288: PPUSH
10289: CALL_OW 88
// end ;
10293: PPOPN 4
10295: END
// every 0 0$1 trigger time_to_end [ 1 ] < tick or FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) < 10 do
10296: LD_EXP 5
10300: PUSH
10301: LD_INT 1
10303: ARRAY
10304: PUSH
10305: LD_OWVAR 1
10309: LESS
10310: PUSH
10311: LD_INT 22
10313: PUSH
10314: LD_INT 3
10316: PUSH
10317: EMPTY
10318: LIST
10319: LIST
10320: PUSH
10321: LD_INT 21
10323: PUSH
10324: LD_INT 3
10326: PUSH
10327: EMPTY
10328: LIST
10329: LIST
10330: PUSH
10331: EMPTY
10332: LIST
10333: LIST
10334: PPUSH
10335: CALL_OW 69
10339: PUSH
10340: LD_INT 10
10342: LESS
10343: OR
10344: IFFALSE 10544
10346: GO 10348
10348: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10349: LD_INT 16
10351: PPUSH
10352: CALL_OW 301
10356: NOT
10357: IFFALSE 10380
// begin SayRadio ( Harisson , D3b-Har-3 ) ;
10359: LD_EXP 19
10363: PPUSH
10364: LD_STRING D3b-Har-3
10366: PPUSH
10367: CALL_OW 94
// ChangeMissionObjectives ( M2a ) ;
10371: LD_STRING M2a
10373: PPUSH
10374: CALL_OW 337
// end else
10378: GO 10399
// begin SayRadio ( Harisson , D3b-Har-3a ) ;
10380: LD_EXP 19
10384: PPUSH
10385: LD_STRING D3b-Har-3a
10387: PPUSH
10388: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
10392: LD_STRING M2
10394: PPUSH
10395: CALL_OW 337
// end ; can_end := true ;
10399: LD_ADDR_EXP 6
10403: PUSH
10404: LD_INT 1
10406: ST_TO_ADDR
// SetAreaMapShow ( endArea , 1 ) ;
10407: LD_INT 9
10409: PPUSH
10410: LD_INT 1
10412: PPUSH
10413: CALL_OW 424
// Wait ( 0 0$02 ) ;
10417: LD_INT 70
10419: PPUSH
10420: CALL_OW 67
// if Lisa then
10424: LD_EXP 14
10428: IFFALSE 10442
// Say ( Lisa , D3b-Lisa ) ;
10430: LD_EXP 14
10434: PPUSH
10435: LD_STRING D3b-Lisa
10437: PPUSH
10438: CALL_OW 88
// if Bobby then
10442: LD_EXP 12
10446: IFFALSE 10460
// Say ( Bobby , D3b-Bobby-3 ) ;
10448: LD_EXP 12
10452: PPUSH
10453: LD_STRING D3b-Bobby-3
10455: PPUSH
10456: CALL_OW 88
// if Cyrus then
10460: LD_EXP 13
10464: IFFALSE 10478
// Say ( Cyrus , D3b-Cyrus-3 ) ;
10466: LD_EXP 13
10470: PPUSH
10471: LD_STRING D3b-Cyrus-3
10473: PPUSH
10474: CALL_OW 88
// if Frank and GetSide ( Frank ) = 1 then
10478: LD_EXP 15
10482: PUSH
10483: LD_EXP 15
10487: PPUSH
10488: CALL_OW 255
10492: PUSH
10493: LD_INT 1
10495: EQUAL
10496: AND
10497: IFFALSE 10511
// Say ( Frank , D3b-Frank-3 ) ;
10499: LD_EXP 15
10503: PPUSH
10504: LD_STRING D3b-Frank-3
10506: PPUSH
10507: CALL_OW 88
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
10511: LD_EXP 18
10515: PUSH
10516: LD_EXP 18
10520: PPUSH
10521: CALL_OW 255
10525: PUSH
10526: LD_INT 1
10528: EQUAL
10529: AND
10530: IFFALSE 10544
// Say ( Kikuchi , D3b-Yam-4 ) ;
10532: LD_EXP 18
10536: PPUSH
10537: LD_STRING D3b-Yam-4
10539: PPUSH
10540: CALL_OW 88
// end ;
10544: END
// every 0 0$1 trigger time_to_end [ 2 ] < tick do
10545: LD_EXP 5
10549: PUSH
10550: LD_INT 2
10552: ARRAY
10553: PUSH
10554: LD_OWVAR 1
10558: LESS
10559: IFFALSE 10591
10561: GO 10563
10563: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
10564: LD_EXP 19
10568: PPUSH
10569: LD_STRING D4-Har-1
10571: PPUSH
10572: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
10576: LD_STRING M3
10578: PPUSH
10579: CALL_OW 337
// must_end := true ;
10583: LD_ADDR_EXP 7
10587: PUSH
10588: LD_INT 1
10590: ST_TO_ADDR
// end ;
10591: END
// every 0 0$01 trigger time_to_end [ 3 ] < tick do
10592: LD_EXP 5
10596: PUSH
10597: LD_INT 3
10599: ARRAY
10600: PUSH
10601: LD_OWVAR 1
10605: LESS
10606: IFFALSE 10637
10608: GO 10610
10610: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10611: LD_INT 16
10613: PPUSH
10614: CALL_OW 301
10618: NOT
10619: IFFALSE 10630
// YouLost ( TimeOut1 ) else
10621: LD_STRING TimeOut1
10623: PPUSH
10624: CALL_OW 104
10628: GO 10637
// YouLost ( TimeOut2 ) ;
10630: LD_STRING TimeOut2
10632: PPUSH
10633: CALL_OW 104
// end ;
10637: END
// every 0 0$1 trigger IsInArea ( JMM , endArea ) and can_end do var wait_on , i , tmp , m1 , m2 , m3 ;
10638: LD_EXP 9
10642: PPUSH
10643: LD_INT 9
10645: PPUSH
10646: CALL_OW 308
10650: PUSH
10651: LD_EXP 6
10655: AND
10656: IFFALSE 11808
10658: GO 10660
10660: DISABLE
10661: LD_INT 0
10663: PPUSH
10664: PPUSH
10665: PPUSH
10666: PPUSH
10667: PPUSH
10668: PPUSH
// begin if Count ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ) < 5 then
10669: LD_INT 22
10671: PUSH
10672: LD_INT 1
10674: PUSH
10675: EMPTY
10676: LIST
10677: LIST
10678: PUSH
10679: LD_INT 21
10681: PUSH
10682: LD_INT 1
10684: PUSH
10685: EMPTY
10686: LIST
10687: LIST
10688: PUSH
10689: LD_INT 23
10691: PUSH
10692: LD_INT 1
10694: PUSH
10695: EMPTY
10696: LIST
10697: LIST
10698: PUSH
10699: LD_INT 50
10701: PUSH
10702: EMPTY
10703: LIST
10704: PUSH
10705: EMPTY
10706: LIST
10707: LIST
10708: LIST
10709: LIST
10710: PPUSH
10711: CALL_OW 69
10715: PPUSH
10716: CALL 35116 0 1
10720: PUSH
10721: LD_INT 5
10723: LESS
10724: IFFALSE 10733
// YouLost ( LostVictory ) ;
10726: LD_STRING LostVictory
10728: PPUSH
10729: CALL_OW 104
// wait_on := false ;
10733: LD_ADDR_VAR 0 1
10737: PUSH
10738: LD_INT 0
10740: ST_TO_ADDR
// if Count ( FilterPeople ( 1 ) ) > Count ( FilterPeopleArea ( 1 , endArea ) ^ FilterDriversArea ( 1 , endArea ) ) then
10741: LD_INT 1
10743: PPUSH
10744: CALL 1255 0 1
10748: PPUSH
10749: CALL 35116 0 1
10753: PUSH
10754: LD_INT 1
10756: PPUSH
10757: LD_INT 9
10759: PPUSH
10760: CALL 1346 0 2
10764: PUSH
10765: LD_INT 1
10767: PPUSH
10768: LD_INT 9
10770: PPUSH
10771: CALL 1393 0 2
10775: ADD
10776: PPUSH
10777: CALL 35116 0 1
10781: GREATER
10782: IFFALSE 10805
// if Query ( Q1 ) = 1 then
10784: LD_STRING Q1
10786: PPUSH
10787: CALL_OW 97
10791: PUSH
10792: LD_INT 1
10794: EQUAL
10795: IFFALSE 10805
// wait_on := true ;
10797: LD_ADDR_VAR 0 1
10801: PUSH
10802: LD_INT 1
10804: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
10805: LD_INT 35
10807: PPUSH
10808: CALL_OW 67
// until Count ( FilterPeople ( 1 ) ) = Count ( FilterPeopleArea ( 1 , endArea ) union FilterDriversArea ( 1 , endArea ) ) ;
10812: LD_INT 1
10814: PPUSH
10815: CALL 1255 0 1
10819: PPUSH
10820: CALL 35116 0 1
10824: PUSH
10825: LD_INT 1
10827: PPUSH
10828: LD_INT 9
10830: PPUSH
10831: CALL 1346 0 2
10835: PUSH
10836: LD_INT 1
10838: PPUSH
10839: LD_INT 9
10841: PPUSH
10842: CALL 1393 0 2
10846: UNION
10847: PPUSH
10848: CALL 35116 0 1
10852: EQUAL
10853: IFFALSE 10805
// DialogueOn ;
10855: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
10859: LD_EXP 9
10863: PPUSH
10864: CALL_OW 87
// Say ( JMM , D6-JMM-1 ) ;
10868: LD_EXP 9
10872: PPUSH
10873: LD_STRING D6-JMM-1
10875: PPUSH
10876: CALL_OW 88
// SayRadio ( Harisson , D6-Har-1 ) ;
10880: LD_EXP 19
10884: PPUSH
10885: LD_STRING D6-Har-1
10887: PPUSH
10888: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
10892: LD_EXP 9
10896: PPUSH
10897: LD_STRING D6-JMM-2
10899: PPUSH
10900: CALL_OW 88
// SayRadio ( Harisson , D6-Har-2 ) ;
10904: LD_EXP 19
10908: PPUSH
10909: LD_STRING D6-Har-2
10911: PPUSH
10912: CALL_OW 94
// Say ( JMM , D6-JMM-3 ) ;
10916: LD_EXP 9
10920: PPUSH
10921: LD_STRING D6-JMM-3
10923: PPUSH
10924: CALL_OW 88
// SayRadio ( Harisson , D6-Har-3 ) ;
10928: LD_EXP 19
10932: PPUSH
10933: LD_STRING D6-Har-3
10935: PPUSH
10936: CALL_OW 94
// Say ( JMM , D6-JMM-4 ) ;
10940: LD_EXP 9
10944: PPUSH
10945: LD_STRING D6-JMM-4
10947: PPUSH
10948: CALL_OW 88
// SayRadio ( Harisson , D6-Har-4 ) ;
10952: LD_EXP 19
10956: PPUSH
10957: LD_STRING D6-Har-4
10959: PPUSH
10960: CALL_OW 94
// Say ( JMM , D6-JMM-5 ) ;
10964: LD_EXP 9
10968: PPUSH
10969: LD_STRING D6-JMM-5
10971: PPUSH
10972: CALL_OW 88
// DialogueOff ;
10976: CALL_OW 7
// m1 := false ;
10980: LD_ADDR_VAR 0 4
10984: PUSH
10985: LD_INT 0
10987: ST_TO_ADDR
// m2 := false ;
10988: LD_ADDR_VAR 0 5
10992: PUSH
10993: LD_INT 0
10995: ST_TO_ADDR
// m3 := false ;
10996: LD_ADDR_VAR 0 6
11000: PUSH
11001: LD_INT 0
11003: ST_TO_ADDR
// tmp := FilterBuildings ( 3 ) ;
11004: LD_ADDR_VAR 0 3
11008: PUSH
11009: LD_INT 3
11011: PPUSH
11012: CALL 1524 0 1
11016: ST_TO_ADDR
// if tmp >= 35 then
11017: LD_VAR 0 3
11021: PUSH
11022: LD_INT 35
11024: GREATEREQUAL
11025: IFFALSE 11062
// begin AddMedal ( Destroy1 , - 1 ) ;
11027: LD_STRING Destroy1
11029: PPUSH
11030: LD_INT 1
11032: NEG
11033: PPUSH
11034: CALL_OW 101
// AddMedal ( Destroy2 , - 1 ) ;
11038: LD_STRING Destroy2
11040: PPUSH
11041: LD_INT 1
11043: NEG
11044: PPUSH
11045: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
11049: LD_STRING Destroy3
11051: PPUSH
11052: LD_INT 1
11054: NEG
11055: PPUSH
11056: CALL_OW 101
// end else
11060: GO 11173
// begin AddMedal ( Destroy1 , 1 ) ;
11062: LD_STRING Destroy1
11064: PPUSH
11065: LD_INT 1
11067: PPUSH
11068: CALL_OW 101
// m1 := true ;
11072: LD_ADDR_VAR 0 4
11076: PUSH
11077: LD_INT 1
11079: ST_TO_ADDR
// if tmp >= 25 then
11080: LD_VAR 0 3
11084: PUSH
11085: LD_INT 25
11087: GREATEREQUAL
11088: IFFALSE 11114
// begin AddMedal ( Destroy2 , - 1 ) ;
11090: LD_STRING Destroy2
11092: PPUSH
11093: LD_INT 1
11095: NEG
11096: PPUSH
11097: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
11101: LD_STRING Destroy3
11103: PPUSH
11104: LD_INT 1
11106: NEG
11107: PPUSH
11108: CALL_OW 101
// end else
11112: GO 11173
// begin AddMedal ( Destroy2 , 1 ) ;
11114: LD_STRING Destroy2
11116: PPUSH
11117: LD_INT 1
11119: PPUSH
11120: CALL_OW 101
// m2 := true ;
11124: LD_ADDR_VAR 0 5
11128: PUSH
11129: LD_INT 1
11131: ST_TO_ADDR
// if tmp >= 15 then
11132: LD_VAR 0 3
11136: PUSH
11137: LD_INT 15
11139: GREATEREQUAL
11140: IFFALSE 11155
// AddMedal ( Destroy3 , - 1 ) else
11142: LD_STRING Destroy3
11144: PPUSH
11145: LD_INT 1
11147: NEG
11148: PPUSH
11149: CALL_OW 101
11153: GO 11173
// begin AddMedal ( Destroy3 , 1 ) ;
11155: LD_STRING Destroy3
11157: PPUSH
11158: LD_INT 1
11160: PPUSH
11161: CALL_OW 101
// m3 := true ;
11165: LD_ADDR_VAR 0 6
11169: PUSH
11170: LD_INT 1
11172: ST_TO_ADDR
// end ; end ; end ; if tick <= 32 32$00 then
11173: LD_OWVAR 1
11177: PUSH
11178: LD_INT 67200
11180: LESSEQUAL
11181: IFFALSE 11190
// SetAchievement ( ACH_ASPEED_7 ) ;
11183: LD_STRING ACH_ASPEED_7
11185: PPUSH
11186: CALL_OW 543
// if m1 and m2 and m3 and Difficulty >= 3 then
11190: LD_VAR 0 4
11194: PUSH
11195: LD_VAR 0 5
11199: AND
11200: PUSH
11201: LD_VAR 0 6
11205: AND
11206: PUSH
11207: LD_OWVAR 67
11211: PUSH
11212: LD_INT 3
11214: GREATEREQUAL
11215: AND
11216: IFFALSE 11228
// SetAchievementEX ( ACH_AMER , 7 ) ;
11218: LD_STRING ACH_AMER
11220: PPUSH
11221: LD_INT 7
11223: PPUSH
11224: CALL_OW 564
// GiveMedals ( MAIN ) ;
11228: LD_STRING MAIN
11230: PPUSH
11231: CALL_OW 102
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] ] ) ;
11235: LD_ADDR_VAR 0 3
11239: PUSH
11240: LD_INT 22
11242: PUSH
11243: LD_INT 1
11245: PUSH
11246: EMPTY
11247: LIST
11248: LIST
11249: PUSH
11250: LD_INT 23
11252: PUSH
11253: LD_INT 1
11255: PUSH
11256: EMPTY
11257: LIST
11258: LIST
11259: PUSH
11260: EMPTY
11261: LIST
11262: LIST
11263: PPUSH
11264: CALL_OW 69
11268: ST_TO_ADDR
// RewardPeople ( tmp ) ;
11269: LD_VAR 0 3
11273: PPUSH
11274: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
11278: LD_EXP 9
11282: PPUSH
11283: LD_EXP 3
11287: PUSH
11288: LD_STRING JMM
11290: STR
11291: PPUSH
11292: CALL_OW 38
// if Brown in tmp then
11296: LD_EXP 10
11300: PUSH
11301: LD_VAR 0 3
11305: IN
11306: IFFALSE 11326
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
11308: LD_EXP 10
11312: PPUSH
11313: LD_EXP 3
11317: PUSH
11318: LD_STRING Brown
11320: STR
11321: PPUSH
11322: CALL_OW 38
// if Donaldson in tmp then
11326: LD_EXP 11
11330: PUSH
11331: LD_VAR 0 3
11335: IN
11336: IFFALSE 11356
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
11338: LD_EXP 11
11342: PPUSH
11343: LD_EXP 3
11347: PUSH
11348: LD_STRING Donaldson
11350: STR
11351: PPUSH
11352: CALL_OW 38
// if Bobby in tmp then
11356: LD_EXP 12
11360: PUSH
11361: LD_VAR 0 3
11365: IN
11366: IFFALSE 11386
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
11368: LD_EXP 12
11372: PPUSH
11373: LD_EXP 3
11377: PUSH
11378: LD_STRING Bobby
11380: STR
11381: PPUSH
11382: CALL_OW 38
// if Cyrus in tmp then
11386: LD_EXP 13
11390: PUSH
11391: LD_VAR 0 3
11395: IN
11396: IFFALSE 11416
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
11398: LD_EXP 13
11402: PPUSH
11403: LD_EXP 3
11407: PUSH
11408: LD_STRING Cyrus
11410: STR
11411: PPUSH
11412: CALL_OW 38
// if Lisa in tmp then
11416: LD_EXP 14
11420: PUSH
11421: LD_VAR 0 3
11425: IN
11426: IFFALSE 11446
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
11428: LD_EXP 14
11432: PPUSH
11433: LD_EXP 3
11437: PUSH
11438: LD_STRING Lisa
11440: STR
11441: PPUSH
11442: CALL_OW 38
// if Frank in tmp then
11446: LD_EXP 15
11450: PUSH
11451: LD_VAR 0 3
11455: IN
11456: IFFALSE 11476
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
11458: LD_EXP 15
11462: PPUSH
11463: LD_EXP 3
11467: PUSH
11468: LD_STRING Frank
11470: STR
11471: PPUSH
11472: CALL_OW 38
// if Gladstone in tmp then
11476: LD_EXP 16
11480: PUSH
11481: LD_VAR 0 3
11485: IN
11486: IFFALSE 11506
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
11488: LD_EXP 16
11492: PPUSH
11493: LD_EXP 3
11497: PUSH
11498: LD_STRING Gladstone
11500: STR
11501: PPUSH
11502: CALL_OW 38
// if Khatam in tmp then
11506: LD_EXP 17
11510: PUSH
11511: LD_VAR 0 3
11515: IN
11516: IFFALSE 11536
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
11518: LD_EXP 17
11522: PPUSH
11523: LD_EXP 3
11527: PUSH
11528: LD_STRING Khatam
11530: STR
11531: PPUSH
11532: CALL_OW 38
// if Kikuchi in tmp then
11536: LD_EXP 18
11540: PUSH
11541: LD_VAR 0 3
11545: IN
11546: IFFALSE 11573
// begin ToLua ( enableBioCharacter(BIO_YAMO) ) ;
11548: LD_STRING enableBioCharacter(BIO_YAMO)
11550: PPUSH
11551: CALL_OW 559
// SaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
11555: LD_EXP 18
11559: PPUSH
11560: LD_EXP 3
11564: PUSH
11565: LD_STRING Kikuchi
11567: STR
11568: PPUSH
11569: CALL_OW 38
// end ; SaveCharacters ( tmp diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] , mission_prefix & others ) ;
11573: LD_VAR 0 3
11577: PUSH
11578: LD_EXP 9
11582: PUSH
11583: LD_EXP 10
11587: PUSH
11588: LD_EXP 11
11592: PUSH
11593: LD_EXP 12
11597: PUSH
11598: LD_EXP 13
11602: PUSH
11603: LD_EXP 14
11607: PUSH
11608: LD_EXP 15
11612: PUSH
11613: LD_EXP 16
11617: PUSH
11618: LD_EXP 18
11622: PUSH
11623: LD_EXP 17
11627: PUSH
11628: EMPTY
11629: LIST
11630: LIST
11631: LIST
11632: LIST
11633: LIST
11634: LIST
11635: LIST
11636: LIST
11637: LIST
11638: LIST
11639: DIFF
11640: PPUSH
11641: LD_EXP 3
11645: PUSH
11646: LD_STRING others
11648: STR
11649: PPUSH
11650: CALL_OW 38
// SaveVariable ( tick , 07_time ) ;
11654: LD_OWVAR 1
11658: PPUSH
11659: LD_STRING 07_time
11661: PPUSH
11662: CALL_OW 39
// tmp := [ ] ;
11666: LD_ADDR_VAR 0 3
11670: PUSH
11671: EMPTY
11672: ST_TO_ADDR
// for i in FilterUnitsInArea ( endArea , [ [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] ] ] ) do
11673: LD_ADDR_VAR 0 2
11677: PUSH
11678: LD_INT 9
11680: PPUSH
11681: LD_INT 22
11683: PUSH
11684: LD_INT 1
11686: PUSH
11687: EMPTY
11688: LIST
11689: LIST
11690: PUSH
11691: LD_INT 23
11693: PUSH
11694: LD_INT 1
11696: PUSH
11697: EMPTY
11698: LIST
11699: LIST
11700: PUSH
11701: LD_INT 21
11703: PUSH
11704: LD_INT 2
11706: PUSH
11707: EMPTY
11708: LIST
11709: LIST
11710: PUSH
11711: EMPTY
11712: LIST
11713: LIST
11714: LIST
11715: PUSH
11716: EMPTY
11717: LIST
11718: PPUSH
11719: CALL_OW 70
11723: PUSH
11724: FOR_IN
11725: IFFALSE 11790
// tmp := Join ( tmp , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ) ;
11727: LD_ADDR_VAR 0 3
11731: PUSH
11732: LD_VAR 0 3
11736: PPUSH
11737: LD_VAR 0 2
11741: PPUSH
11742: CALL_OW 265
11746: PUSH
11747: LD_VAR 0 2
11751: PPUSH
11752: CALL_OW 262
11756: PUSH
11757: LD_VAR 0 2
11761: PPUSH
11762: CALL_OW 263
11766: PUSH
11767: LD_VAR 0 2
11771: PPUSH
11772: CALL_OW 264
11776: PUSH
11777: EMPTY
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: PPUSH
11783: CALL 70705 0 2
11787: ST_TO_ADDR
11788: GO 11724
11790: POP
11791: POP
// SaveVariable ( tmp , 07_vehicles ) ;
11792: LD_VAR 0 3
11796: PPUSH
11797: LD_STRING 07_vehicles
11799: PPUSH
11800: CALL_OW 39
// YouWin ;
11804: CALL_OW 103
// end ; end_of_file
11808: PPOPN 6
11810: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
11811: LD_VAR 0 1
11815: PPUSH
11816: CALL 28120 0 1
// if un = JMM then
11820: LD_VAR 0 1
11824: PUSH
11825: LD_EXP 9
11829: EQUAL
11830: IFFALSE 11839
// YouLost ( JMM ) ;
11832: LD_STRING JMM
11834: PPUSH
11835: CALL_OW 104
// if GetType ( un ) = unit_building then
11839: LD_VAR 0 1
11843: PPUSH
11844: CALL_OW 247
11848: PUSH
11849: LD_INT 3
11851: EQUAL
11852: IFFALSE 11868
// buildings_counter := buildings_counter + 1 ;
11854: LD_ADDR_EXP 4
11858: PUSH
11859: LD_EXP 4
11863: PUSH
11864: LD_INT 1
11866: PLUS
11867: ST_TO_ADDR
// if un in FilterUnitsInArea ( baseArea , [ f_or , [ f_btype , b_turret ] , [ f_btype , b_bunker ] ] ) then
11868: LD_VAR 0 1
11872: PUSH
11873: LD_INT 6
11875: PPUSH
11876: LD_INT 2
11878: PUSH
11879: LD_INT 30
11881: PUSH
11882: LD_INT 33
11884: PUSH
11885: EMPTY
11886: LIST
11887: LIST
11888: PUSH
11889: LD_INT 30
11891: PUSH
11892: LD_INT 32
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: PUSH
11899: EMPTY
11900: LIST
11901: LIST
11902: LIST
11903: PPUSH
11904: CALL_OW 70
11908: IN
11909: IFFALSE 11968
// ru_rebuild_list := ru_rebuild_list ^ [ GetBType ( un ) , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ;
11911: LD_ADDR_EXP 20
11915: PUSH
11916: LD_EXP 20
11920: PUSH
11921: LD_VAR 0 1
11925: PPUSH
11926: CALL_OW 266
11930: PUSH
11931: LD_VAR 0 1
11935: PPUSH
11936: CALL_OW 250
11940: PUSH
11941: LD_VAR 0 1
11945: PPUSH
11946: CALL_OW 251
11950: PUSH
11951: LD_VAR 0 1
11955: PPUSH
11956: CALL_OW 254
11960: PUSH
11961: EMPTY
11962: LIST
11963: LIST
11964: LIST
11965: LIST
11966: ADD
11967: ST_TO_ADDR
// if un = ru_dep_main then
11968: LD_VAR 0 1
11972: PUSH
11973: LD_INT 16
11975: EQUAL
11976: IFFALSE 11985
// ChangeMissionObjectives ( M1a ) ;
11978: LD_STRING M1a
11980: PPUSH
11981: CALL_OW 337
// if GetType ( un ) = unit_human and GetSide ( un ) = 3 then
11985: LD_VAR 0 1
11989: PPUSH
11990: CALL_OW 247
11994: PUSH
11995: LD_INT 1
11997: EQUAL
11998: PUSH
11999: LD_VAR 0 1
12003: PPUSH
12004: CALL_OW 255
12008: PUSH
12009: LD_INT 3
12011: EQUAL
12012: AND
12013: IFFALSE 12029
// kill_counter := kill_counter + 1 ;
12015: LD_ADDR_EXP 8
12019: PUSH
12020: LD_EXP 8
12024: PUSH
12025: LD_INT 1
12027: PLUS
12028: ST_TO_ADDR
// end ;
12029: PPOPN 1
12031: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
12032: LD_VAR 0 1
12036: PPUSH
12037: LD_VAR 0 2
12041: PPUSH
12042: CALL 28240 0 2
// end ;
12046: PPOPN 2
12048: END
// on UnitGoesToRed ( un ) do begin if GetBType ( un ) = b_bunker and GetTag ( un ) = 7 then
12049: LD_VAR 0 1
12053: PPUSH
12054: CALL_OW 266
12058: PUSH
12059: LD_INT 32
12061: EQUAL
12062: PUSH
12063: LD_VAR 0 1
12067: PPUSH
12068: CALL_OW 110
12072: PUSH
12073: LD_INT 7
12075: EQUAL
12076: AND
12077: IFFALSE 12091
// SetTag ( un , 0 ) ;
12079: LD_VAR 0 1
12083: PPUSH
12084: LD_INT 0
12086: PPUSH
12087: CALL_OW 109
// end ;
12091: PPOPN 1
12093: END
// on BuildingStarted ( b , builder ) do var i ;
12094: LD_INT 0
12096: PPUSH
// begin if GetSide ( b ) = 3 then
12097: LD_VAR 0 1
12101: PPUSH
12102: CALL_OW 255
12106: PUSH
12107: LD_INT 3
12109: EQUAL
12110: IFFALSE 12150
// for i = 1 to 4 do
12112: LD_ADDR_VAR 0 3
12116: PUSH
12117: DOUBLE
12118: LD_INT 1
12120: DEC
12121: ST_TO_ADDR
12122: LD_INT 4
12124: PUSH
12125: FOR_TO
12126: IFFALSE 12148
// ru_rebuild_list := Delete ( ru_rebuild_list , 1 ) ;
12128: LD_ADDR_EXP 20
12132: PUSH
12133: LD_EXP 20
12137: PPUSH
12138: LD_INT 1
12140: PPUSH
12141: CALL_OW 3
12145: ST_TO_ADDR
12146: GO 12125
12148: POP
12149: POP
// end ;
12150: PPOPN 3
12152: END
// on BuildingComplete ( b ) do if GetBType ( b ) in [ b_bunker , b_turret ] then
12153: LD_VAR 0 1
12157: PPUSH
12158: CALL_OW 266
12162: PUSH
12163: LD_INT 32
12165: PUSH
12166: LD_INT 33
12168: PUSH
12169: EMPTY
12170: LIST
12171: LIST
12172: IN
12173: IFFALSE 12187
// ComPlaceWeapon ( b , ru_gatling_gun ) ;
12175: LD_VAR 0 1
12179: PPUSH
12180: LD_INT 43
12182: PPUSH
12183: CALL_OW 148
12187: PPOPN 1
12189: END
// on LeaveBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
12190: LD_VAR 0 1
12194: PUSH
12195: LD_INT 22
12197: PUSH
12198: LD_INT 3
12200: PUSH
12201: EMPTY
12202: LIST
12203: LIST
12204: PUSH
12205: LD_INT 2
12207: PUSH
12208: LD_INT 30
12210: PUSH
12211: LD_INT 31
12213: PUSH
12214: EMPTY
12215: LIST
12216: LIST
12217: PUSH
12218: LD_INT 30
12220: PUSH
12221: LD_INT 32
12223: PUSH
12224: EMPTY
12225: LIST
12226: LIST
12227: PUSH
12228: EMPTY
12229: LIST
12230: LIST
12231: LIST
12232: PUSH
12233: EMPTY
12234: LIST
12235: LIST
12236: PPUSH
12237: CALL_OW 69
12241: IN
12242: IFFALSE 12264
// GoToAnotherTower ( un , b , 134 , 136 ) ;
12244: LD_VAR 0 2
12248: PPUSH
12249: LD_VAR 0 1
12253: PPUSH
12254: LD_INT 134
12256: PPUSH
12257: LD_INT 136
12259: PPUSH
12260: CALL 838 0 4
// end ;
12264: PPOPN 2
12266: END
// on EnterBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) then
12267: LD_VAR 0 1
12271: PUSH
12272: LD_INT 22
12274: PUSH
12275: LD_INT 3
12277: PUSH
12278: EMPTY
12279: LIST
12280: LIST
12281: PUSH
12282: LD_INT 30
12284: PUSH
12285: LD_INT 32
12287: PUSH
12288: EMPTY
12289: LIST
12290: LIST
12291: PUSH
12292: EMPTY
12293: LIST
12294: LIST
12295: PPUSH
12296: CALL_OW 69
12300: IN
12301: IFFALSE 12315
// SetTag ( b , 0 ) ;
12303: LD_VAR 0 1
12307: PPUSH
12308: LD_INT 0
12310: PPUSH
12311: CALL_OW 109
// end ; end_of_file end_of_file
12315: PPOPN 2
12317: END
// export globalGameSaveCounter ; every 0 0$1 do
12318: GO 12320
12320: DISABLE
// begin enable ;
12321: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
12322: LD_STRING updateTimer(
12324: PUSH
12325: LD_OWVAR 1
12329: STR
12330: PUSH
12331: LD_STRING );
12333: STR
12334: PPUSH
12335: CALL_OW 559
// end ;
12339: END
// every 0 0$1 do
12340: GO 12342
12342: DISABLE
// begin globalGameSaveCounter := 0 ;
12343: LD_ADDR_EXP 21
12347: PUSH
12348: LD_INT 0
12350: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
12351: LD_STRING setGameSaveCounter(0)
12353: PPUSH
12354: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
12358: LD_STRING initStreamRollete();
12360: PPUSH
12361: CALL_OW 559
// InitStreamMode ;
12365: CALL 13691 0 0
// DefineStreamItems ( false ) ;
12369: LD_INT 0
12371: PPUSH
12372: CALL 14155 0 1
// end ;
12376: END
// export function SOS_MapStart ( ) ; begin
12377: LD_INT 0
12379: PPUSH
// if streamModeActive then
12380: LD_EXP 22
12384: IFFALSE 12393
// DefineStreamItems ( true ) ;
12386: LD_INT 1
12388: PPUSH
12389: CALL 14155 0 1
// UpdateLuaVariables ( ) ;
12393: CALL 12410 0 0
// UpdateFactoryWaypoints ( ) ;
12397: CALL 27024 0 0
// UpdateWarehouseGatheringPoints ( ) ;
12401: CALL 27281 0 0
// end ;
12405: LD_VAR 0 1
12409: RET
// function UpdateLuaVariables ( ) ; begin
12410: LD_INT 0
12412: PPUSH
// if globalGameSaveCounter then
12413: LD_EXP 21
12417: IFFALSE 12451
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
12419: LD_ADDR_EXP 21
12423: PUSH
12424: LD_EXP 21
12428: PPUSH
12429: CALL 72066 0 1
12433: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
12434: LD_STRING setGameSaveCounter(
12436: PUSH
12437: LD_EXP 21
12441: STR
12442: PUSH
12443: LD_STRING )
12445: STR
12446: PPUSH
12447: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
12451: LD_STRING setGameDifficulty(
12453: PUSH
12454: LD_OWVAR 67
12458: STR
12459: PUSH
12460: LD_STRING )
12462: STR
12463: PPUSH
12464: CALL_OW 559
// end ;
12468: LD_VAR 0 1
12472: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
12473: LD_INT 0
12475: PPUSH
// if p2 = stream_mode then
12476: LD_VAR 0 2
12480: PUSH
12481: LD_INT 100
12483: EQUAL
12484: IFFALSE 13487
// begin if not StreamModeActive then
12486: LD_EXP 22
12490: NOT
12491: IFFALSE 12501
// StreamModeActive := true ;
12493: LD_ADDR_EXP 22
12497: PUSH
12498: LD_INT 1
12500: ST_TO_ADDR
// if p3 = 0 then
12501: LD_VAR 0 3
12505: PUSH
12506: LD_INT 0
12508: EQUAL
12509: IFFALSE 12515
// InitStreamMode ;
12511: CALL 13691 0 0
// if p3 = 1 then
12515: LD_VAR 0 3
12519: PUSH
12520: LD_INT 1
12522: EQUAL
12523: IFFALSE 12533
// sRocket := true ;
12525: LD_ADDR_EXP 27
12529: PUSH
12530: LD_INT 1
12532: ST_TO_ADDR
// if p3 = 2 then
12533: LD_VAR 0 3
12537: PUSH
12538: LD_INT 2
12540: EQUAL
12541: IFFALSE 12551
// sSpeed := true ;
12543: LD_ADDR_EXP 26
12547: PUSH
12548: LD_INT 1
12550: ST_TO_ADDR
// if p3 = 3 then
12551: LD_VAR 0 3
12555: PUSH
12556: LD_INT 3
12558: EQUAL
12559: IFFALSE 12569
// sEngine := true ;
12561: LD_ADDR_EXP 28
12565: PUSH
12566: LD_INT 1
12568: ST_TO_ADDR
// if p3 = 4 then
12569: LD_VAR 0 3
12573: PUSH
12574: LD_INT 4
12576: EQUAL
12577: IFFALSE 12587
// sSpec := true ;
12579: LD_ADDR_EXP 25
12583: PUSH
12584: LD_INT 1
12586: ST_TO_ADDR
// if p3 = 5 then
12587: LD_VAR 0 3
12591: PUSH
12592: LD_INT 5
12594: EQUAL
12595: IFFALSE 12605
// sLevel := true ;
12597: LD_ADDR_EXP 29
12601: PUSH
12602: LD_INT 1
12604: ST_TO_ADDR
// if p3 = 6 then
12605: LD_VAR 0 3
12609: PUSH
12610: LD_INT 6
12612: EQUAL
12613: IFFALSE 12623
// sArmoury := true ;
12615: LD_ADDR_EXP 30
12619: PUSH
12620: LD_INT 1
12622: ST_TO_ADDR
// if p3 = 7 then
12623: LD_VAR 0 3
12627: PUSH
12628: LD_INT 7
12630: EQUAL
12631: IFFALSE 12641
// sRadar := true ;
12633: LD_ADDR_EXP 31
12637: PUSH
12638: LD_INT 1
12640: ST_TO_ADDR
// if p3 = 8 then
12641: LD_VAR 0 3
12645: PUSH
12646: LD_INT 8
12648: EQUAL
12649: IFFALSE 12659
// sBunker := true ;
12651: LD_ADDR_EXP 32
12655: PUSH
12656: LD_INT 1
12658: ST_TO_ADDR
// if p3 = 9 then
12659: LD_VAR 0 3
12663: PUSH
12664: LD_INT 9
12666: EQUAL
12667: IFFALSE 12677
// sHack := true ;
12669: LD_ADDR_EXP 33
12673: PUSH
12674: LD_INT 1
12676: ST_TO_ADDR
// if p3 = 10 then
12677: LD_VAR 0 3
12681: PUSH
12682: LD_INT 10
12684: EQUAL
12685: IFFALSE 12695
// sFire := true ;
12687: LD_ADDR_EXP 34
12691: PUSH
12692: LD_INT 1
12694: ST_TO_ADDR
// if p3 = 11 then
12695: LD_VAR 0 3
12699: PUSH
12700: LD_INT 11
12702: EQUAL
12703: IFFALSE 12713
// sRefresh := true ;
12705: LD_ADDR_EXP 35
12709: PUSH
12710: LD_INT 1
12712: ST_TO_ADDR
// if p3 = 12 then
12713: LD_VAR 0 3
12717: PUSH
12718: LD_INT 12
12720: EQUAL
12721: IFFALSE 12731
// sExp := true ;
12723: LD_ADDR_EXP 36
12727: PUSH
12728: LD_INT 1
12730: ST_TO_ADDR
// if p3 = 13 then
12731: LD_VAR 0 3
12735: PUSH
12736: LD_INT 13
12738: EQUAL
12739: IFFALSE 12749
// sDepot := true ;
12741: LD_ADDR_EXP 37
12745: PUSH
12746: LD_INT 1
12748: ST_TO_ADDR
// if p3 = 14 then
12749: LD_VAR 0 3
12753: PUSH
12754: LD_INT 14
12756: EQUAL
12757: IFFALSE 12767
// sFlag := true ;
12759: LD_ADDR_EXP 38
12763: PUSH
12764: LD_INT 1
12766: ST_TO_ADDR
// if p3 = 15 then
12767: LD_VAR 0 3
12771: PUSH
12772: LD_INT 15
12774: EQUAL
12775: IFFALSE 12785
// sKamikadze := true ;
12777: LD_ADDR_EXP 46
12781: PUSH
12782: LD_INT 1
12784: ST_TO_ADDR
// if p3 = 16 then
12785: LD_VAR 0 3
12789: PUSH
12790: LD_INT 16
12792: EQUAL
12793: IFFALSE 12803
// sTroll := true ;
12795: LD_ADDR_EXP 47
12799: PUSH
12800: LD_INT 1
12802: ST_TO_ADDR
// if p3 = 17 then
12803: LD_VAR 0 3
12807: PUSH
12808: LD_INT 17
12810: EQUAL
12811: IFFALSE 12821
// sSlow := true ;
12813: LD_ADDR_EXP 48
12817: PUSH
12818: LD_INT 1
12820: ST_TO_ADDR
// if p3 = 18 then
12821: LD_VAR 0 3
12825: PUSH
12826: LD_INT 18
12828: EQUAL
12829: IFFALSE 12839
// sLack := true ;
12831: LD_ADDR_EXP 49
12835: PUSH
12836: LD_INT 1
12838: ST_TO_ADDR
// if p3 = 19 then
12839: LD_VAR 0 3
12843: PUSH
12844: LD_INT 19
12846: EQUAL
12847: IFFALSE 12857
// sTank := true ;
12849: LD_ADDR_EXP 51
12853: PUSH
12854: LD_INT 1
12856: ST_TO_ADDR
// if p3 = 20 then
12857: LD_VAR 0 3
12861: PUSH
12862: LD_INT 20
12864: EQUAL
12865: IFFALSE 12875
// sRemote := true ;
12867: LD_ADDR_EXP 52
12871: PUSH
12872: LD_INT 1
12874: ST_TO_ADDR
// if p3 = 21 then
12875: LD_VAR 0 3
12879: PUSH
12880: LD_INT 21
12882: EQUAL
12883: IFFALSE 12893
// sPowell := true ;
12885: LD_ADDR_EXP 53
12889: PUSH
12890: LD_INT 1
12892: ST_TO_ADDR
// if p3 = 22 then
12893: LD_VAR 0 3
12897: PUSH
12898: LD_INT 22
12900: EQUAL
12901: IFFALSE 12911
// sTeleport := true ;
12903: LD_ADDR_EXP 56
12907: PUSH
12908: LD_INT 1
12910: ST_TO_ADDR
// if p3 = 23 then
12911: LD_VAR 0 3
12915: PUSH
12916: LD_INT 23
12918: EQUAL
12919: IFFALSE 12929
// sOilTower := true ;
12921: LD_ADDR_EXP 58
12925: PUSH
12926: LD_INT 1
12928: ST_TO_ADDR
// if p3 = 24 then
12929: LD_VAR 0 3
12933: PUSH
12934: LD_INT 24
12936: EQUAL
12937: IFFALSE 12947
// sShovel := true ;
12939: LD_ADDR_EXP 59
12943: PUSH
12944: LD_INT 1
12946: ST_TO_ADDR
// if p3 = 25 then
12947: LD_VAR 0 3
12951: PUSH
12952: LD_INT 25
12954: EQUAL
12955: IFFALSE 12965
// sSheik := true ;
12957: LD_ADDR_EXP 60
12961: PUSH
12962: LD_INT 1
12964: ST_TO_ADDR
// if p3 = 26 then
12965: LD_VAR 0 3
12969: PUSH
12970: LD_INT 26
12972: EQUAL
12973: IFFALSE 12983
// sEarthquake := true ;
12975: LD_ADDR_EXP 62
12979: PUSH
12980: LD_INT 1
12982: ST_TO_ADDR
// if p3 = 27 then
12983: LD_VAR 0 3
12987: PUSH
12988: LD_INT 27
12990: EQUAL
12991: IFFALSE 13001
// sAI := true ;
12993: LD_ADDR_EXP 63
12997: PUSH
12998: LD_INT 1
13000: ST_TO_ADDR
// if p3 = 28 then
13001: LD_VAR 0 3
13005: PUSH
13006: LD_INT 28
13008: EQUAL
13009: IFFALSE 13019
// sCargo := true ;
13011: LD_ADDR_EXP 66
13015: PUSH
13016: LD_INT 1
13018: ST_TO_ADDR
// if p3 = 29 then
13019: LD_VAR 0 3
13023: PUSH
13024: LD_INT 29
13026: EQUAL
13027: IFFALSE 13037
// sDLaser := true ;
13029: LD_ADDR_EXP 67
13033: PUSH
13034: LD_INT 1
13036: ST_TO_ADDR
// if p3 = 30 then
13037: LD_VAR 0 3
13041: PUSH
13042: LD_INT 30
13044: EQUAL
13045: IFFALSE 13055
// sExchange := true ;
13047: LD_ADDR_EXP 68
13051: PUSH
13052: LD_INT 1
13054: ST_TO_ADDR
// if p3 = 31 then
13055: LD_VAR 0 3
13059: PUSH
13060: LD_INT 31
13062: EQUAL
13063: IFFALSE 13073
// sFac := true ;
13065: LD_ADDR_EXP 69
13069: PUSH
13070: LD_INT 1
13072: ST_TO_ADDR
// if p3 = 32 then
13073: LD_VAR 0 3
13077: PUSH
13078: LD_INT 32
13080: EQUAL
13081: IFFALSE 13091
// sPower := true ;
13083: LD_ADDR_EXP 70
13087: PUSH
13088: LD_INT 1
13090: ST_TO_ADDR
// if p3 = 33 then
13091: LD_VAR 0 3
13095: PUSH
13096: LD_INT 33
13098: EQUAL
13099: IFFALSE 13109
// sRandom := true ;
13101: LD_ADDR_EXP 71
13105: PUSH
13106: LD_INT 1
13108: ST_TO_ADDR
// if p3 = 34 then
13109: LD_VAR 0 3
13113: PUSH
13114: LD_INT 34
13116: EQUAL
13117: IFFALSE 13127
// sShield := true ;
13119: LD_ADDR_EXP 72
13123: PUSH
13124: LD_INT 1
13126: ST_TO_ADDR
// if p3 = 35 then
13127: LD_VAR 0 3
13131: PUSH
13132: LD_INT 35
13134: EQUAL
13135: IFFALSE 13145
// sTime := true ;
13137: LD_ADDR_EXP 73
13141: PUSH
13142: LD_INT 1
13144: ST_TO_ADDR
// if p3 = 36 then
13145: LD_VAR 0 3
13149: PUSH
13150: LD_INT 36
13152: EQUAL
13153: IFFALSE 13163
// sTools := true ;
13155: LD_ADDR_EXP 74
13159: PUSH
13160: LD_INT 1
13162: ST_TO_ADDR
// if p3 = 101 then
13163: LD_VAR 0 3
13167: PUSH
13168: LD_INT 101
13170: EQUAL
13171: IFFALSE 13181
// sSold := true ;
13173: LD_ADDR_EXP 39
13177: PUSH
13178: LD_INT 1
13180: ST_TO_ADDR
// if p3 = 102 then
13181: LD_VAR 0 3
13185: PUSH
13186: LD_INT 102
13188: EQUAL
13189: IFFALSE 13199
// sDiff := true ;
13191: LD_ADDR_EXP 40
13195: PUSH
13196: LD_INT 1
13198: ST_TO_ADDR
// if p3 = 103 then
13199: LD_VAR 0 3
13203: PUSH
13204: LD_INT 103
13206: EQUAL
13207: IFFALSE 13217
// sFog := true ;
13209: LD_ADDR_EXP 43
13213: PUSH
13214: LD_INT 1
13216: ST_TO_ADDR
// if p3 = 104 then
13217: LD_VAR 0 3
13221: PUSH
13222: LD_INT 104
13224: EQUAL
13225: IFFALSE 13235
// sReset := true ;
13227: LD_ADDR_EXP 44
13231: PUSH
13232: LD_INT 1
13234: ST_TO_ADDR
// if p3 = 105 then
13235: LD_VAR 0 3
13239: PUSH
13240: LD_INT 105
13242: EQUAL
13243: IFFALSE 13253
// sSun := true ;
13245: LD_ADDR_EXP 45
13249: PUSH
13250: LD_INT 1
13252: ST_TO_ADDR
// if p3 = 106 then
13253: LD_VAR 0 3
13257: PUSH
13258: LD_INT 106
13260: EQUAL
13261: IFFALSE 13271
// sTiger := true ;
13263: LD_ADDR_EXP 41
13267: PUSH
13268: LD_INT 1
13270: ST_TO_ADDR
// if p3 = 107 then
13271: LD_VAR 0 3
13275: PUSH
13276: LD_INT 107
13278: EQUAL
13279: IFFALSE 13289
// sBomb := true ;
13281: LD_ADDR_EXP 42
13285: PUSH
13286: LD_INT 1
13288: ST_TO_ADDR
// if p3 = 108 then
13289: LD_VAR 0 3
13293: PUSH
13294: LD_INT 108
13296: EQUAL
13297: IFFALSE 13307
// sWound := true ;
13299: LD_ADDR_EXP 50
13303: PUSH
13304: LD_INT 1
13306: ST_TO_ADDR
// if p3 = 109 then
13307: LD_VAR 0 3
13311: PUSH
13312: LD_INT 109
13314: EQUAL
13315: IFFALSE 13325
// sBetray := true ;
13317: LD_ADDR_EXP 54
13321: PUSH
13322: LD_INT 1
13324: ST_TO_ADDR
// if p3 = 110 then
13325: LD_VAR 0 3
13329: PUSH
13330: LD_INT 110
13332: EQUAL
13333: IFFALSE 13343
// sContamin := true ;
13335: LD_ADDR_EXP 55
13339: PUSH
13340: LD_INT 1
13342: ST_TO_ADDR
// if p3 = 111 then
13343: LD_VAR 0 3
13347: PUSH
13348: LD_INT 111
13350: EQUAL
13351: IFFALSE 13361
// sOil := true ;
13353: LD_ADDR_EXP 57
13357: PUSH
13358: LD_INT 1
13360: ST_TO_ADDR
// if p3 = 112 then
13361: LD_VAR 0 3
13365: PUSH
13366: LD_INT 112
13368: EQUAL
13369: IFFALSE 13379
// sStu := true ;
13371: LD_ADDR_EXP 61
13375: PUSH
13376: LD_INT 1
13378: ST_TO_ADDR
// if p3 = 113 then
13379: LD_VAR 0 3
13383: PUSH
13384: LD_INT 113
13386: EQUAL
13387: IFFALSE 13397
// sBazooka := true ;
13389: LD_ADDR_EXP 64
13393: PUSH
13394: LD_INT 1
13396: ST_TO_ADDR
// if p3 = 114 then
13397: LD_VAR 0 3
13401: PUSH
13402: LD_INT 114
13404: EQUAL
13405: IFFALSE 13415
// sMortar := true ;
13407: LD_ADDR_EXP 65
13411: PUSH
13412: LD_INT 1
13414: ST_TO_ADDR
// if p3 = 115 then
13415: LD_VAR 0 3
13419: PUSH
13420: LD_INT 115
13422: EQUAL
13423: IFFALSE 13433
// sRanger := true ;
13425: LD_ADDR_EXP 75
13429: PUSH
13430: LD_INT 1
13432: ST_TO_ADDR
// if p3 = 116 then
13433: LD_VAR 0 3
13437: PUSH
13438: LD_INT 116
13440: EQUAL
13441: IFFALSE 13451
// sComputer := true ;
13443: LD_ADDR_EXP 76
13447: PUSH
13448: LD_INT 1
13450: ST_TO_ADDR
// if p3 = 117 then
13451: LD_VAR 0 3
13455: PUSH
13456: LD_INT 117
13458: EQUAL
13459: IFFALSE 13469
// s30 := true ;
13461: LD_ADDR_EXP 77
13465: PUSH
13466: LD_INT 1
13468: ST_TO_ADDR
// if p3 = 118 then
13469: LD_VAR 0 3
13473: PUSH
13474: LD_INT 118
13476: EQUAL
13477: IFFALSE 13487
// s60 := true ;
13479: LD_ADDR_EXP 78
13483: PUSH
13484: LD_INT 1
13486: ST_TO_ADDR
// end ; if p2 = hack_mode then
13487: LD_VAR 0 2
13491: PUSH
13492: LD_INT 101
13494: EQUAL
13495: IFFALSE 13623
// begin case p3 of 1 :
13497: LD_VAR 0 3
13501: PUSH
13502: LD_INT 1
13504: DOUBLE
13505: EQUAL
13506: IFTRUE 13510
13508: GO 13517
13510: POP
// hHackUnlimitedResources ; 2 :
13511: CALL 25770 0 0
13515: GO 13623
13517: LD_INT 2
13519: DOUBLE
13520: EQUAL
13521: IFTRUE 13525
13523: GO 13532
13525: POP
// hHackSetLevel10 ; 3 :
13526: CALL 25903 0 0
13530: GO 13623
13532: LD_INT 3
13534: DOUBLE
13535: EQUAL
13536: IFTRUE 13540
13538: GO 13547
13540: POP
// hHackSetLevel10YourUnits ; 4 :
13541: CALL 25988 0 0
13545: GO 13623
13547: LD_INT 4
13549: DOUBLE
13550: EQUAL
13551: IFTRUE 13555
13553: GO 13562
13555: POP
// hHackInvincible ; 5 :
13556: CALL 26436 0 0
13560: GO 13623
13562: LD_INT 5
13564: DOUBLE
13565: EQUAL
13566: IFTRUE 13570
13568: GO 13577
13570: POP
// hHackInvisible ; 6 :
13571: CALL 26547 0 0
13575: GO 13623
13577: LD_INT 6
13579: DOUBLE
13580: EQUAL
13581: IFTRUE 13585
13583: GO 13592
13585: POP
// hHackChangeYourSide ; 7 :
13586: CALL 26604 0 0
13590: GO 13623
13592: LD_INT 7
13594: DOUBLE
13595: EQUAL
13596: IFTRUE 13600
13598: GO 13607
13600: POP
// hHackChangeUnitSide ; 8 :
13601: CALL 26646 0 0
13605: GO 13623
13607: LD_INT 8
13609: DOUBLE
13610: EQUAL
13611: IFTRUE 13615
13613: GO 13622
13615: POP
// hHackFog ; end ;
13616: CALL 26747 0 0
13620: GO 13623
13622: POP
// end ; if p2 = game_save_mode then
13623: LD_VAR 0 2
13627: PUSH
13628: LD_INT 102
13630: EQUAL
13631: IFFALSE 13686
// begin if p3 = 1 then
13633: LD_VAR 0 3
13637: PUSH
13638: LD_INT 1
13640: EQUAL
13641: IFFALSE 13653
// globalGameSaveCounter := p4 ;
13643: LD_ADDR_EXP 21
13647: PUSH
13648: LD_VAR 0 4
13652: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
13653: LD_VAR 0 3
13657: PUSH
13658: LD_INT 2
13660: EQUAL
13661: PUSH
13662: LD_EXP 21
13666: AND
13667: IFFALSE 13686
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
13669: LD_STRING setGameSaveCounter(
13671: PUSH
13672: LD_EXP 21
13676: STR
13677: PUSH
13678: LD_STRING )
13680: STR
13681: PPUSH
13682: CALL_OW 559
// end ; end ;
13686: LD_VAR 0 7
13690: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
13691: LD_INT 0
13693: PPUSH
// streamModeActive := false ;
13694: LD_ADDR_EXP 22
13698: PUSH
13699: LD_INT 0
13701: ST_TO_ADDR
// normalCounter := 36 ;
13702: LD_ADDR_EXP 23
13706: PUSH
13707: LD_INT 36
13709: ST_TO_ADDR
// hardcoreCounter := 18 ;
13710: LD_ADDR_EXP 24
13714: PUSH
13715: LD_INT 18
13717: ST_TO_ADDR
// sRocket := false ;
13718: LD_ADDR_EXP 27
13722: PUSH
13723: LD_INT 0
13725: ST_TO_ADDR
// sSpeed := false ;
13726: LD_ADDR_EXP 26
13730: PUSH
13731: LD_INT 0
13733: ST_TO_ADDR
// sEngine := false ;
13734: LD_ADDR_EXP 28
13738: PUSH
13739: LD_INT 0
13741: ST_TO_ADDR
// sSpec := false ;
13742: LD_ADDR_EXP 25
13746: PUSH
13747: LD_INT 0
13749: ST_TO_ADDR
// sLevel := false ;
13750: LD_ADDR_EXP 29
13754: PUSH
13755: LD_INT 0
13757: ST_TO_ADDR
// sArmoury := false ;
13758: LD_ADDR_EXP 30
13762: PUSH
13763: LD_INT 0
13765: ST_TO_ADDR
// sRadar := false ;
13766: LD_ADDR_EXP 31
13770: PUSH
13771: LD_INT 0
13773: ST_TO_ADDR
// sBunker := false ;
13774: LD_ADDR_EXP 32
13778: PUSH
13779: LD_INT 0
13781: ST_TO_ADDR
// sHack := false ;
13782: LD_ADDR_EXP 33
13786: PUSH
13787: LD_INT 0
13789: ST_TO_ADDR
// sFire := false ;
13790: LD_ADDR_EXP 34
13794: PUSH
13795: LD_INT 0
13797: ST_TO_ADDR
// sRefresh := false ;
13798: LD_ADDR_EXP 35
13802: PUSH
13803: LD_INT 0
13805: ST_TO_ADDR
// sExp := false ;
13806: LD_ADDR_EXP 36
13810: PUSH
13811: LD_INT 0
13813: ST_TO_ADDR
// sDepot := false ;
13814: LD_ADDR_EXP 37
13818: PUSH
13819: LD_INT 0
13821: ST_TO_ADDR
// sFlag := false ;
13822: LD_ADDR_EXP 38
13826: PUSH
13827: LD_INT 0
13829: ST_TO_ADDR
// sKamikadze := false ;
13830: LD_ADDR_EXP 46
13834: PUSH
13835: LD_INT 0
13837: ST_TO_ADDR
// sTroll := false ;
13838: LD_ADDR_EXP 47
13842: PUSH
13843: LD_INT 0
13845: ST_TO_ADDR
// sSlow := false ;
13846: LD_ADDR_EXP 48
13850: PUSH
13851: LD_INT 0
13853: ST_TO_ADDR
// sLack := false ;
13854: LD_ADDR_EXP 49
13858: PUSH
13859: LD_INT 0
13861: ST_TO_ADDR
// sTank := false ;
13862: LD_ADDR_EXP 51
13866: PUSH
13867: LD_INT 0
13869: ST_TO_ADDR
// sRemote := false ;
13870: LD_ADDR_EXP 52
13874: PUSH
13875: LD_INT 0
13877: ST_TO_ADDR
// sPowell := false ;
13878: LD_ADDR_EXP 53
13882: PUSH
13883: LD_INT 0
13885: ST_TO_ADDR
// sTeleport := false ;
13886: LD_ADDR_EXP 56
13890: PUSH
13891: LD_INT 0
13893: ST_TO_ADDR
// sOilTower := false ;
13894: LD_ADDR_EXP 58
13898: PUSH
13899: LD_INT 0
13901: ST_TO_ADDR
// sShovel := false ;
13902: LD_ADDR_EXP 59
13906: PUSH
13907: LD_INT 0
13909: ST_TO_ADDR
// sSheik := false ;
13910: LD_ADDR_EXP 60
13914: PUSH
13915: LD_INT 0
13917: ST_TO_ADDR
// sEarthquake := false ;
13918: LD_ADDR_EXP 62
13922: PUSH
13923: LD_INT 0
13925: ST_TO_ADDR
// sAI := false ;
13926: LD_ADDR_EXP 63
13930: PUSH
13931: LD_INT 0
13933: ST_TO_ADDR
// sCargo := false ;
13934: LD_ADDR_EXP 66
13938: PUSH
13939: LD_INT 0
13941: ST_TO_ADDR
// sDLaser := false ;
13942: LD_ADDR_EXP 67
13946: PUSH
13947: LD_INT 0
13949: ST_TO_ADDR
// sExchange := false ;
13950: LD_ADDR_EXP 68
13954: PUSH
13955: LD_INT 0
13957: ST_TO_ADDR
// sFac := false ;
13958: LD_ADDR_EXP 69
13962: PUSH
13963: LD_INT 0
13965: ST_TO_ADDR
// sPower := false ;
13966: LD_ADDR_EXP 70
13970: PUSH
13971: LD_INT 0
13973: ST_TO_ADDR
// sRandom := false ;
13974: LD_ADDR_EXP 71
13978: PUSH
13979: LD_INT 0
13981: ST_TO_ADDR
// sShield := false ;
13982: LD_ADDR_EXP 72
13986: PUSH
13987: LD_INT 0
13989: ST_TO_ADDR
// sTime := false ;
13990: LD_ADDR_EXP 73
13994: PUSH
13995: LD_INT 0
13997: ST_TO_ADDR
// sTools := false ;
13998: LD_ADDR_EXP 74
14002: PUSH
14003: LD_INT 0
14005: ST_TO_ADDR
// sSold := false ;
14006: LD_ADDR_EXP 39
14010: PUSH
14011: LD_INT 0
14013: ST_TO_ADDR
// sDiff := false ;
14014: LD_ADDR_EXP 40
14018: PUSH
14019: LD_INT 0
14021: ST_TO_ADDR
// sFog := false ;
14022: LD_ADDR_EXP 43
14026: PUSH
14027: LD_INT 0
14029: ST_TO_ADDR
// sReset := false ;
14030: LD_ADDR_EXP 44
14034: PUSH
14035: LD_INT 0
14037: ST_TO_ADDR
// sSun := false ;
14038: LD_ADDR_EXP 45
14042: PUSH
14043: LD_INT 0
14045: ST_TO_ADDR
// sTiger := false ;
14046: LD_ADDR_EXP 41
14050: PUSH
14051: LD_INT 0
14053: ST_TO_ADDR
// sBomb := false ;
14054: LD_ADDR_EXP 42
14058: PUSH
14059: LD_INT 0
14061: ST_TO_ADDR
// sWound := false ;
14062: LD_ADDR_EXP 50
14066: PUSH
14067: LD_INT 0
14069: ST_TO_ADDR
// sBetray := false ;
14070: LD_ADDR_EXP 54
14074: PUSH
14075: LD_INT 0
14077: ST_TO_ADDR
// sContamin := false ;
14078: LD_ADDR_EXP 55
14082: PUSH
14083: LD_INT 0
14085: ST_TO_ADDR
// sOil := false ;
14086: LD_ADDR_EXP 57
14090: PUSH
14091: LD_INT 0
14093: ST_TO_ADDR
// sStu := false ;
14094: LD_ADDR_EXP 61
14098: PUSH
14099: LD_INT 0
14101: ST_TO_ADDR
// sBazooka := false ;
14102: LD_ADDR_EXP 64
14106: PUSH
14107: LD_INT 0
14109: ST_TO_ADDR
// sMortar := false ;
14110: LD_ADDR_EXP 65
14114: PUSH
14115: LD_INT 0
14117: ST_TO_ADDR
// sRanger := false ;
14118: LD_ADDR_EXP 75
14122: PUSH
14123: LD_INT 0
14125: ST_TO_ADDR
// sComputer := false ;
14126: LD_ADDR_EXP 76
14130: PUSH
14131: LD_INT 0
14133: ST_TO_ADDR
// s30 := false ;
14134: LD_ADDR_EXP 77
14138: PUSH
14139: LD_INT 0
14141: ST_TO_ADDR
// s60 := false ;
14142: LD_ADDR_EXP 78
14146: PUSH
14147: LD_INT 0
14149: ST_TO_ADDR
// end ;
14150: LD_VAR 0 1
14154: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
14155: LD_INT 0
14157: PPUSH
14158: PPUSH
14159: PPUSH
14160: PPUSH
14161: PPUSH
14162: PPUSH
14163: PPUSH
// result := [ ] ;
14164: LD_ADDR_VAR 0 2
14168: PUSH
14169: EMPTY
14170: ST_TO_ADDR
// if campaign_id = 1 then
14171: LD_OWVAR 69
14175: PUSH
14176: LD_INT 1
14178: EQUAL
14179: IFFALSE 17345
// begin case mission_number of 1 :
14181: LD_OWVAR 70
14185: PUSH
14186: LD_INT 1
14188: DOUBLE
14189: EQUAL
14190: IFTRUE 14194
14192: GO 14270
14194: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
14195: LD_ADDR_VAR 0 2
14199: PUSH
14200: LD_INT 2
14202: PUSH
14203: LD_INT 4
14205: PUSH
14206: LD_INT 11
14208: PUSH
14209: LD_INT 12
14211: PUSH
14212: LD_INT 15
14214: PUSH
14215: LD_INT 16
14217: PUSH
14218: LD_INT 22
14220: PUSH
14221: LD_INT 23
14223: PUSH
14224: LD_INT 26
14226: PUSH
14227: EMPTY
14228: LIST
14229: LIST
14230: LIST
14231: LIST
14232: LIST
14233: LIST
14234: LIST
14235: LIST
14236: LIST
14237: PUSH
14238: LD_INT 101
14240: PUSH
14241: LD_INT 102
14243: PUSH
14244: LD_INT 106
14246: PUSH
14247: LD_INT 116
14249: PUSH
14250: LD_INT 117
14252: PUSH
14253: LD_INT 118
14255: PUSH
14256: EMPTY
14257: LIST
14258: LIST
14259: LIST
14260: LIST
14261: LIST
14262: LIST
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: ST_TO_ADDR
14268: GO 17343
14270: LD_INT 2
14272: DOUBLE
14273: EQUAL
14274: IFTRUE 14278
14276: GO 14362
14278: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
14279: LD_ADDR_VAR 0 2
14283: PUSH
14284: LD_INT 2
14286: PUSH
14287: LD_INT 4
14289: PUSH
14290: LD_INT 11
14292: PUSH
14293: LD_INT 12
14295: PUSH
14296: LD_INT 15
14298: PUSH
14299: LD_INT 16
14301: PUSH
14302: LD_INT 22
14304: PUSH
14305: LD_INT 23
14307: PUSH
14308: LD_INT 26
14310: PUSH
14311: EMPTY
14312: LIST
14313: LIST
14314: LIST
14315: LIST
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: LIST
14321: PUSH
14322: LD_INT 101
14324: PUSH
14325: LD_INT 102
14327: PUSH
14328: LD_INT 105
14330: PUSH
14331: LD_INT 106
14333: PUSH
14334: LD_INT 108
14336: PUSH
14337: LD_INT 116
14339: PUSH
14340: LD_INT 117
14342: PUSH
14343: LD_INT 118
14345: PUSH
14346: EMPTY
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: LIST
14354: LIST
14355: PUSH
14356: EMPTY
14357: LIST
14358: LIST
14359: ST_TO_ADDR
14360: GO 17343
14362: LD_INT 3
14364: DOUBLE
14365: EQUAL
14366: IFTRUE 14370
14368: GO 14458
14370: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
14371: LD_ADDR_VAR 0 2
14375: PUSH
14376: LD_INT 2
14378: PUSH
14379: LD_INT 4
14381: PUSH
14382: LD_INT 5
14384: PUSH
14385: LD_INT 11
14387: PUSH
14388: LD_INT 12
14390: PUSH
14391: LD_INT 15
14393: PUSH
14394: LD_INT 16
14396: PUSH
14397: LD_INT 22
14399: PUSH
14400: LD_INT 26
14402: PUSH
14403: LD_INT 36
14405: PUSH
14406: EMPTY
14407: LIST
14408: LIST
14409: LIST
14410: LIST
14411: LIST
14412: LIST
14413: LIST
14414: LIST
14415: LIST
14416: LIST
14417: PUSH
14418: LD_INT 101
14420: PUSH
14421: LD_INT 102
14423: PUSH
14424: LD_INT 105
14426: PUSH
14427: LD_INT 106
14429: PUSH
14430: LD_INT 108
14432: PUSH
14433: LD_INT 116
14435: PUSH
14436: LD_INT 117
14438: PUSH
14439: LD_INT 118
14441: PUSH
14442: EMPTY
14443: LIST
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: PUSH
14452: EMPTY
14453: LIST
14454: LIST
14455: ST_TO_ADDR
14456: GO 17343
14458: LD_INT 4
14460: DOUBLE
14461: EQUAL
14462: IFTRUE 14466
14464: GO 14562
14466: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
14467: LD_ADDR_VAR 0 2
14471: PUSH
14472: LD_INT 2
14474: PUSH
14475: LD_INT 4
14477: PUSH
14478: LD_INT 5
14480: PUSH
14481: LD_INT 8
14483: PUSH
14484: LD_INT 11
14486: PUSH
14487: LD_INT 12
14489: PUSH
14490: LD_INT 15
14492: PUSH
14493: LD_INT 16
14495: PUSH
14496: LD_INT 22
14498: PUSH
14499: LD_INT 23
14501: PUSH
14502: LD_INT 26
14504: PUSH
14505: LD_INT 36
14507: PUSH
14508: EMPTY
14509: LIST
14510: LIST
14511: LIST
14512: LIST
14513: LIST
14514: LIST
14515: LIST
14516: LIST
14517: LIST
14518: LIST
14519: LIST
14520: LIST
14521: PUSH
14522: LD_INT 101
14524: PUSH
14525: LD_INT 102
14527: PUSH
14528: LD_INT 105
14530: PUSH
14531: LD_INT 106
14533: PUSH
14534: LD_INT 108
14536: PUSH
14537: LD_INT 116
14539: PUSH
14540: LD_INT 117
14542: PUSH
14543: LD_INT 118
14545: PUSH
14546: EMPTY
14547: LIST
14548: LIST
14549: LIST
14550: LIST
14551: LIST
14552: LIST
14553: LIST
14554: LIST
14555: PUSH
14556: EMPTY
14557: LIST
14558: LIST
14559: ST_TO_ADDR
14560: GO 17343
14562: LD_INT 5
14564: DOUBLE
14565: EQUAL
14566: IFTRUE 14570
14568: GO 14682
14570: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
14571: LD_ADDR_VAR 0 2
14575: PUSH
14576: LD_INT 2
14578: PUSH
14579: LD_INT 4
14581: PUSH
14582: LD_INT 5
14584: PUSH
14585: LD_INT 6
14587: PUSH
14588: LD_INT 8
14590: PUSH
14591: LD_INT 11
14593: PUSH
14594: LD_INT 12
14596: PUSH
14597: LD_INT 15
14599: PUSH
14600: LD_INT 16
14602: PUSH
14603: LD_INT 22
14605: PUSH
14606: LD_INT 23
14608: PUSH
14609: LD_INT 25
14611: PUSH
14612: LD_INT 26
14614: PUSH
14615: LD_INT 36
14617: PUSH
14618: EMPTY
14619: LIST
14620: LIST
14621: LIST
14622: LIST
14623: LIST
14624: LIST
14625: LIST
14626: LIST
14627: LIST
14628: LIST
14629: LIST
14630: LIST
14631: LIST
14632: LIST
14633: PUSH
14634: LD_INT 101
14636: PUSH
14637: LD_INT 102
14639: PUSH
14640: LD_INT 105
14642: PUSH
14643: LD_INT 106
14645: PUSH
14646: LD_INT 108
14648: PUSH
14649: LD_INT 109
14651: PUSH
14652: LD_INT 112
14654: PUSH
14655: LD_INT 116
14657: PUSH
14658: LD_INT 117
14660: PUSH
14661: LD_INT 118
14663: PUSH
14664: EMPTY
14665: LIST
14666: LIST
14667: LIST
14668: LIST
14669: LIST
14670: LIST
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: PUSH
14676: EMPTY
14677: LIST
14678: LIST
14679: ST_TO_ADDR
14680: GO 17343
14682: LD_INT 6
14684: DOUBLE
14685: EQUAL
14686: IFTRUE 14690
14688: GO 14822
14690: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
14691: LD_ADDR_VAR 0 2
14695: PUSH
14696: LD_INT 2
14698: PUSH
14699: LD_INT 4
14701: PUSH
14702: LD_INT 5
14704: PUSH
14705: LD_INT 6
14707: PUSH
14708: LD_INT 8
14710: PUSH
14711: LD_INT 11
14713: PUSH
14714: LD_INT 12
14716: PUSH
14717: LD_INT 15
14719: PUSH
14720: LD_INT 16
14722: PUSH
14723: LD_INT 20
14725: PUSH
14726: LD_INT 21
14728: PUSH
14729: LD_INT 22
14731: PUSH
14732: LD_INT 23
14734: PUSH
14735: LD_INT 25
14737: PUSH
14738: LD_INT 26
14740: PUSH
14741: LD_INT 30
14743: PUSH
14744: LD_INT 31
14746: PUSH
14747: LD_INT 32
14749: PUSH
14750: LD_INT 36
14752: PUSH
14753: EMPTY
14754: LIST
14755: LIST
14756: LIST
14757: LIST
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: LIST
14763: LIST
14764: LIST
14765: LIST
14766: LIST
14767: LIST
14768: LIST
14769: LIST
14770: LIST
14771: LIST
14772: LIST
14773: PUSH
14774: LD_INT 101
14776: PUSH
14777: LD_INT 102
14779: PUSH
14780: LD_INT 105
14782: PUSH
14783: LD_INT 106
14785: PUSH
14786: LD_INT 108
14788: PUSH
14789: LD_INT 109
14791: PUSH
14792: LD_INT 112
14794: PUSH
14795: LD_INT 116
14797: PUSH
14798: LD_INT 117
14800: PUSH
14801: LD_INT 118
14803: PUSH
14804: EMPTY
14805: LIST
14806: LIST
14807: LIST
14808: LIST
14809: LIST
14810: LIST
14811: LIST
14812: LIST
14813: LIST
14814: LIST
14815: PUSH
14816: EMPTY
14817: LIST
14818: LIST
14819: ST_TO_ADDR
14820: GO 17343
14822: LD_INT 7
14824: DOUBLE
14825: EQUAL
14826: IFTRUE 14830
14828: GO 14942
14830: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
14831: LD_ADDR_VAR 0 2
14835: PUSH
14836: LD_INT 2
14838: PUSH
14839: LD_INT 4
14841: PUSH
14842: LD_INT 5
14844: PUSH
14845: LD_INT 7
14847: PUSH
14848: LD_INT 11
14850: PUSH
14851: LD_INT 12
14853: PUSH
14854: LD_INT 15
14856: PUSH
14857: LD_INT 16
14859: PUSH
14860: LD_INT 20
14862: PUSH
14863: LD_INT 21
14865: PUSH
14866: LD_INT 22
14868: PUSH
14869: LD_INT 23
14871: PUSH
14872: LD_INT 25
14874: PUSH
14875: LD_INT 26
14877: PUSH
14878: EMPTY
14879: LIST
14880: LIST
14881: LIST
14882: LIST
14883: LIST
14884: LIST
14885: LIST
14886: LIST
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: PUSH
14894: LD_INT 101
14896: PUSH
14897: LD_INT 102
14899: PUSH
14900: LD_INT 103
14902: PUSH
14903: LD_INT 105
14905: PUSH
14906: LD_INT 106
14908: PUSH
14909: LD_INT 108
14911: PUSH
14912: LD_INT 112
14914: PUSH
14915: LD_INT 116
14917: PUSH
14918: LD_INT 117
14920: PUSH
14921: LD_INT 118
14923: PUSH
14924: EMPTY
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: LIST
14932: LIST
14933: LIST
14934: LIST
14935: PUSH
14936: EMPTY
14937: LIST
14938: LIST
14939: ST_TO_ADDR
14940: GO 17343
14942: LD_INT 8
14944: DOUBLE
14945: EQUAL
14946: IFTRUE 14950
14948: GO 15090
14950: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
14951: LD_ADDR_VAR 0 2
14955: PUSH
14956: LD_INT 2
14958: PUSH
14959: LD_INT 4
14961: PUSH
14962: LD_INT 5
14964: PUSH
14965: LD_INT 6
14967: PUSH
14968: LD_INT 7
14970: PUSH
14971: LD_INT 8
14973: PUSH
14974: LD_INT 11
14976: PUSH
14977: LD_INT 12
14979: PUSH
14980: LD_INT 15
14982: PUSH
14983: LD_INT 16
14985: PUSH
14986: LD_INT 20
14988: PUSH
14989: LD_INT 21
14991: PUSH
14992: LD_INT 22
14994: PUSH
14995: LD_INT 23
14997: PUSH
14998: LD_INT 25
15000: PUSH
15001: LD_INT 26
15003: PUSH
15004: LD_INT 30
15006: PUSH
15007: LD_INT 31
15009: PUSH
15010: LD_INT 32
15012: PUSH
15013: LD_INT 36
15015: PUSH
15016: EMPTY
15017: LIST
15018: LIST
15019: LIST
15020: LIST
15021: LIST
15022: LIST
15023: LIST
15024: LIST
15025: LIST
15026: LIST
15027: LIST
15028: LIST
15029: LIST
15030: LIST
15031: LIST
15032: LIST
15033: LIST
15034: LIST
15035: LIST
15036: LIST
15037: PUSH
15038: LD_INT 101
15040: PUSH
15041: LD_INT 102
15043: PUSH
15044: LD_INT 103
15046: PUSH
15047: LD_INT 105
15049: PUSH
15050: LD_INT 106
15052: PUSH
15053: LD_INT 108
15055: PUSH
15056: LD_INT 109
15058: PUSH
15059: LD_INT 112
15061: PUSH
15062: LD_INT 116
15064: PUSH
15065: LD_INT 117
15067: PUSH
15068: LD_INT 118
15070: PUSH
15071: EMPTY
15072: LIST
15073: LIST
15074: LIST
15075: LIST
15076: LIST
15077: LIST
15078: LIST
15079: LIST
15080: LIST
15081: LIST
15082: LIST
15083: PUSH
15084: EMPTY
15085: LIST
15086: LIST
15087: ST_TO_ADDR
15088: GO 17343
15090: LD_INT 9
15092: DOUBLE
15093: EQUAL
15094: IFTRUE 15098
15096: GO 15246
15098: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
15099: LD_ADDR_VAR 0 2
15103: PUSH
15104: LD_INT 2
15106: PUSH
15107: LD_INT 4
15109: PUSH
15110: LD_INT 5
15112: PUSH
15113: LD_INT 6
15115: PUSH
15116: LD_INT 7
15118: PUSH
15119: LD_INT 8
15121: PUSH
15122: LD_INT 11
15124: PUSH
15125: LD_INT 12
15127: PUSH
15128: LD_INT 15
15130: PUSH
15131: LD_INT 16
15133: PUSH
15134: LD_INT 20
15136: PUSH
15137: LD_INT 21
15139: PUSH
15140: LD_INT 22
15142: PUSH
15143: LD_INT 23
15145: PUSH
15146: LD_INT 25
15148: PUSH
15149: LD_INT 26
15151: PUSH
15152: LD_INT 28
15154: PUSH
15155: LD_INT 30
15157: PUSH
15158: LD_INT 31
15160: PUSH
15161: LD_INT 32
15163: PUSH
15164: LD_INT 36
15166: PUSH
15167: EMPTY
15168: LIST
15169: LIST
15170: LIST
15171: LIST
15172: LIST
15173: LIST
15174: LIST
15175: LIST
15176: LIST
15177: LIST
15178: LIST
15179: LIST
15180: LIST
15181: LIST
15182: LIST
15183: LIST
15184: LIST
15185: LIST
15186: LIST
15187: LIST
15188: LIST
15189: PUSH
15190: LD_INT 101
15192: PUSH
15193: LD_INT 102
15195: PUSH
15196: LD_INT 103
15198: PUSH
15199: LD_INT 105
15201: PUSH
15202: LD_INT 106
15204: PUSH
15205: LD_INT 108
15207: PUSH
15208: LD_INT 109
15210: PUSH
15211: LD_INT 112
15213: PUSH
15214: LD_INT 114
15216: PUSH
15217: LD_INT 116
15219: PUSH
15220: LD_INT 117
15222: PUSH
15223: LD_INT 118
15225: PUSH
15226: EMPTY
15227: LIST
15228: LIST
15229: LIST
15230: LIST
15231: LIST
15232: LIST
15233: LIST
15234: LIST
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: PUSH
15240: EMPTY
15241: LIST
15242: LIST
15243: ST_TO_ADDR
15244: GO 17343
15246: LD_INT 10
15248: DOUBLE
15249: EQUAL
15250: IFTRUE 15254
15252: GO 15450
15254: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
15255: LD_ADDR_VAR 0 2
15259: PUSH
15260: LD_INT 2
15262: PUSH
15263: LD_INT 4
15265: PUSH
15266: LD_INT 5
15268: PUSH
15269: LD_INT 6
15271: PUSH
15272: LD_INT 7
15274: PUSH
15275: LD_INT 8
15277: PUSH
15278: LD_INT 9
15280: PUSH
15281: LD_INT 10
15283: PUSH
15284: LD_INT 11
15286: PUSH
15287: LD_INT 12
15289: PUSH
15290: LD_INT 13
15292: PUSH
15293: LD_INT 14
15295: PUSH
15296: LD_INT 15
15298: PUSH
15299: LD_INT 16
15301: PUSH
15302: LD_INT 17
15304: PUSH
15305: LD_INT 18
15307: PUSH
15308: LD_INT 19
15310: PUSH
15311: LD_INT 20
15313: PUSH
15314: LD_INT 21
15316: PUSH
15317: LD_INT 22
15319: PUSH
15320: LD_INT 23
15322: PUSH
15323: LD_INT 24
15325: PUSH
15326: LD_INT 25
15328: PUSH
15329: LD_INT 26
15331: PUSH
15332: LD_INT 28
15334: PUSH
15335: LD_INT 30
15337: PUSH
15338: LD_INT 31
15340: PUSH
15341: LD_INT 32
15343: PUSH
15344: LD_INT 36
15346: PUSH
15347: EMPTY
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: LIST
15376: LIST
15377: PUSH
15378: LD_INT 101
15380: PUSH
15381: LD_INT 102
15383: PUSH
15384: LD_INT 103
15386: PUSH
15387: LD_INT 104
15389: PUSH
15390: LD_INT 105
15392: PUSH
15393: LD_INT 106
15395: PUSH
15396: LD_INT 107
15398: PUSH
15399: LD_INT 108
15401: PUSH
15402: LD_INT 109
15404: PUSH
15405: LD_INT 110
15407: PUSH
15408: LD_INT 111
15410: PUSH
15411: LD_INT 112
15413: PUSH
15414: LD_INT 114
15416: PUSH
15417: LD_INT 116
15419: PUSH
15420: LD_INT 117
15422: PUSH
15423: LD_INT 118
15425: PUSH
15426: EMPTY
15427: LIST
15428: LIST
15429: LIST
15430: LIST
15431: LIST
15432: LIST
15433: LIST
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: LIST
15439: LIST
15440: LIST
15441: LIST
15442: LIST
15443: PUSH
15444: EMPTY
15445: LIST
15446: LIST
15447: ST_TO_ADDR
15448: GO 17343
15450: LD_INT 11
15452: DOUBLE
15453: EQUAL
15454: IFTRUE 15458
15456: GO 15662
15458: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
15459: LD_ADDR_VAR 0 2
15463: PUSH
15464: LD_INT 2
15466: PUSH
15467: LD_INT 3
15469: PUSH
15470: LD_INT 4
15472: PUSH
15473: LD_INT 5
15475: PUSH
15476: LD_INT 6
15478: PUSH
15479: LD_INT 7
15481: PUSH
15482: LD_INT 8
15484: PUSH
15485: LD_INT 9
15487: PUSH
15488: LD_INT 10
15490: PUSH
15491: LD_INT 11
15493: PUSH
15494: LD_INT 12
15496: PUSH
15497: LD_INT 13
15499: PUSH
15500: LD_INT 14
15502: PUSH
15503: LD_INT 15
15505: PUSH
15506: LD_INT 16
15508: PUSH
15509: LD_INT 17
15511: PUSH
15512: LD_INT 18
15514: PUSH
15515: LD_INT 19
15517: PUSH
15518: LD_INT 20
15520: PUSH
15521: LD_INT 21
15523: PUSH
15524: LD_INT 22
15526: PUSH
15527: LD_INT 23
15529: PUSH
15530: LD_INT 24
15532: PUSH
15533: LD_INT 25
15535: PUSH
15536: LD_INT 26
15538: PUSH
15539: LD_INT 28
15541: PUSH
15542: LD_INT 30
15544: PUSH
15545: LD_INT 31
15547: PUSH
15548: LD_INT 32
15550: PUSH
15551: LD_INT 34
15553: PUSH
15554: LD_INT 36
15556: PUSH
15557: EMPTY
15558: LIST
15559: LIST
15560: LIST
15561: LIST
15562: LIST
15563: LIST
15564: LIST
15565: LIST
15566: LIST
15567: LIST
15568: LIST
15569: LIST
15570: LIST
15571: LIST
15572: LIST
15573: LIST
15574: LIST
15575: LIST
15576: LIST
15577: LIST
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: LIST
15588: LIST
15589: PUSH
15590: LD_INT 101
15592: PUSH
15593: LD_INT 102
15595: PUSH
15596: LD_INT 103
15598: PUSH
15599: LD_INT 104
15601: PUSH
15602: LD_INT 105
15604: PUSH
15605: LD_INT 106
15607: PUSH
15608: LD_INT 107
15610: PUSH
15611: LD_INT 108
15613: PUSH
15614: LD_INT 109
15616: PUSH
15617: LD_INT 110
15619: PUSH
15620: LD_INT 111
15622: PUSH
15623: LD_INT 112
15625: PUSH
15626: LD_INT 114
15628: PUSH
15629: LD_INT 116
15631: PUSH
15632: LD_INT 117
15634: PUSH
15635: LD_INT 118
15637: PUSH
15638: EMPTY
15639: LIST
15640: LIST
15641: LIST
15642: LIST
15643: LIST
15644: LIST
15645: LIST
15646: LIST
15647: LIST
15648: LIST
15649: LIST
15650: LIST
15651: LIST
15652: LIST
15653: LIST
15654: LIST
15655: PUSH
15656: EMPTY
15657: LIST
15658: LIST
15659: ST_TO_ADDR
15660: GO 17343
15662: LD_INT 12
15664: DOUBLE
15665: EQUAL
15666: IFTRUE 15670
15668: GO 15890
15670: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
15671: LD_ADDR_VAR 0 2
15675: PUSH
15676: LD_INT 1
15678: PUSH
15679: LD_INT 2
15681: PUSH
15682: LD_INT 3
15684: PUSH
15685: LD_INT 4
15687: PUSH
15688: LD_INT 5
15690: PUSH
15691: LD_INT 6
15693: PUSH
15694: LD_INT 7
15696: PUSH
15697: LD_INT 8
15699: PUSH
15700: LD_INT 9
15702: PUSH
15703: LD_INT 10
15705: PUSH
15706: LD_INT 11
15708: PUSH
15709: LD_INT 12
15711: PUSH
15712: LD_INT 13
15714: PUSH
15715: LD_INT 14
15717: PUSH
15718: LD_INT 15
15720: PUSH
15721: LD_INT 16
15723: PUSH
15724: LD_INT 17
15726: PUSH
15727: LD_INT 18
15729: PUSH
15730: LD_INT 19
15732: PUSH
15733: LD_INT 20
15735: PUSH
15736: LD_INT 21
15738: PUSH
15739: LD_INT 22
15741: PUSH
15742: LD_INT 23
15744: PUSH
15745: LD_INT 24
15747: PUSH
15748: LD_INT 25
15750: PUSH
15751: LD_INT 26
15753: PUSH
15754: LD_INT 27
15756: PUSH
15757: LD_INT 28
15759: PUSH
15760: LD_INT 30
15762: PUSH
15763: LD_INT 31
15765: PUSH
15766: LD_INT 32
15768: PUSH
15769: LD_INT 33
15771: PUSH
15772: LD_INT 34
15774: PUSH
15775: LD_INT 36
15777: PUSH
15778: EMPTY
15779: LIST
15780: LIST
15781: LIST
15782: LIST
15783: LIST
15784: LIST
15785: LIST
15786: LIST
15787: LIST
15788: LIST
15789: LIST
15790: LIST
15791: LIST
15792: LIST
15793: LIST
15794: LIST
15795: LIST
15796: LIST
15797: LIST
15798: LIST
15799: LIST
15800: LIST
15801: LIST
15802: LIST
15803: LIST
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: LIST
15809: LIST
15810: LIST
15811: LIST
15812: LIST
15813: PUSH
15814: LD_INT 101
15816: PUSH
15817: LD_INT 102
15819: PUSH
15820: LD_INT 103
15822: PUSH
15823: LD_INT 104
15825: PUSH
15826: LD_INT 105
15828: PUSH
15829: LD_INT 106
15831: PUSH
15832: LD_INT 107
15834: PUSH
15835: LD_INT 108
15837: PUSH
15838: LD_INT 109
15840: PUSH
15841: LD_INT 110
15843: PUSH
15844: LD_INT 111
15846: PUSH
15847: LD_INT 112
15849: PUSH
15850: LD_INT 113
15852: PUSH
15853: LD_INT 114
15855: PUSH
15856: LD_INT 116
15858: PUSH
15859: LD_INT 117
15861: PUSH
15862: LD_INT 118
15864: PUSH
15865: EMPTY
15866: LIST
15867: LIST
15868: LIST
15869: LIST
15870: LIST
15871: LIST
15872: LIST
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: LIST
15878: LIST
15879: LIST
15880: LIST
15881: LIST
15882: LIST
15883: PUSH
15884: EMPTY
15885: LIST
15886: LIST
15887: ST_TO_ADDR
15888: GO 17343
15890: LD_INT 13
15892: DOUBLE
15893: EQUAL
15894: IFTRUE 15898
15896: GO 16106
15898: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
15899: LD_ADDR_VAR 0 2
15903: PUSH
15904: LD_INT 1
15906: PUSH
15907: LD_INT 2
15909: PUSH
15910: LD_INT 3
15912: PUSH
15913: LD_INT 4
15915: PUSH
15916: LD_INT 5
15918: PUSH
15919: LD_INT 8
15921: PUSH
15922: LD_INT 9
15924: PUSH
15925: LD_INT 10
15927: PUSH
15928: LD_INT 11
15930: PUSH
15931: LD_INT 12
15933: PUSH
15934: LD_INT 14
15936: PUSH
15937: LD_INT 15
15939: PUSH
15940: LD_INT 16
15942: PUSH
15943: LD_INT 17
15945: PUSH
15946: LD_INT 18
15948: PUSH
15949: LD_INT 19
15951: PUSH
15952: LD_INT 20
15954: PUSH
15955: LD_INT 21
15957: PUSH
15958: LD_INT 22
15960: PUSH
15961: LD_INT 23
15963: PUSH
15964: LD_INT 24
15966: PUSH
15967: LD_INT 25
15969: PUSH
15970: LD_INT 26
15972: PUSH
15973: LD_INT 27
15975: PUSH
15976: LD_INT 28
15978: PUSH
15979: LD_INT 30
15981: PUSH
15982: LD_INT 31
15984: PUSH
15985: LD_INT 32
15987: PUSH
15988: LD_INT 33
15990: PUSH
15991: LD_INT 34
15993: PUSH
15994: LD_INT 36
15996: PUSH
15997: EMPTY
15998: LIST
15999: LIST
16000: LIST
16001: LIST
16002: LIST
16003: LIST
16004: LIST
16005: LIST
16006: LIST
16007: LIST
16008: LIST
16009: LIST
16010: LIST
16011: LIST
16012: LIST
16013: LIST
16014: LIST
16015: LIST
16016: LIST
16017: LIST
16018: LIST
16019: LIST
16020: LIST
16021: LIST
16022: LIST
16023: LIST
16024: LIST
16025: LIST
16026: LIST
16027: LIST
16028: LIST
16029: PUSH
16030: LD_INT 101
16032: PUSH
16033: LD_INT 102
16035: PUSH
16036: LD_INT 103
16038: PUSH
16039: LD_INT 104
16041: PUSH
16042: LD_INT 105
16044: PUSH
16045: LD_INT 106
16047: PUSH
16048: LD_INT 107
16050: PUSH
16051: LD_INT 108
16053: PUSH
16054: LD_INT 109
16056: PUSH
16057: LD_INT 110
16059: PUSH
16060: LD_INT 111
16062: PUSH
16063: LD_INT 112
16065: PUSH
16066: LD_INT 113
16068: PUSH
16069: LD_INT 114
16071: PUSH
16072: LD_INT 116
16074: PUSH
16075: LD_INT 117
16077: PUSH
16078: LD_INT 118
16080: PUSH
16081: EMPTY
16082: LIST
16083: LIST
16084: LIST
16085: LIST
16086: LIST
16087: LIST
16088: LIST
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: LIST
16096: LIST
16097: LIST
16098: LIST
16099: PUSH
16100: EMPTY
16101: LIST
16102: LIST
16103: ST_TO_ADDR
16104: GO 17343
16106: LD_INT 14
16108: DOUBLE
16109: EQUAL
16110: IFTRUE 16114
16112: GO 16338
16114: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
16115: LD_ADDR_VAR 0 2
16119: PUSH
16120: LD_INT 1
16122: PUSH
16123: LD_INT 2
16125: PUSH
16126: LD_INT 3
16128: PUSH
16129: LD_INT 4
16131: PUSH
16132: LD_INT 5
16134: PUSH
16135: LD_INT 6
16137: PUSH
16138: LD_INT 7
16140: PUSH
16141: LD_INT 8
16143: PUSH
16144: LD_INT 9
16146: PUSH
16147: LD_INT 10
16149: PUSH
16150: LD_INT 11
16152: PUSH
16153: LD_INT 12
16155: PUSH
16156: LD_INT 13
16158: PUSH
16159: LD_INT 14
16161: PUSH
16162: LD_INT 15
16164: PUSH
16165: LD_INT 16
16167: PUSH
16168: LD_INT 17
16170: PUSH
16171: LD_INT 18
16173: PUSH
16174: LD_INT 19
16176: PUSH
16177: LD_INT 20
16179: PUSH
16180: LD_INT 21
16182: PUSH
16183: LD_INT 22
16185: PUSH
16186: LD_INT 23
16188: PUSH
16189: LD_INT 24
16191: PUSH
16192: LD_INT 25
16194: PUSH
16195: LD_INT 26
16197: PUSH
16198: LD_INT 27
16200: PUSH
16201: LD_INT 28
16203: PUSH
16204: LD_INT 29
16206: PUSH
16207: LD_INT 30
16209: PUSH
16210: LD_INT 31
16212: PUSH
16213: LD_INT 32
16215: PUSH
16216: LD_INT 33
16218: PUSH
16219: LD_INT 34
16221: PUSH
16222: LD_INT 36
16224: PUSH
16225: EMPTY
16226: LIST
16227: LIST
16228: LIST
16229: LIST
16230: LIST
16231: LIST
16232: LIST
16233: LIST
16234: LIST
16235: LIST
16236: LIST
16237: LIST
16238: LIST
16239: LIST
16240: LIST
16241: LIST
16242: LIST
16243: LIST
16244: LIST
16245: LIST
16246: LIST
16247: LIST
16248: LIST
16249: LIST
16250: LIST
16251: LIST
16252: LIST
16253: LIST
16254: LIST
16255: LIST
16256: LIST
16257: LIST
16258: LIST
16259: LIST
16260: LIST
16261: PUSH
16262: LD_INT 101
16264: PUSH
16265: LD_INT 102
16267: PUSH
16268: LD_INT 103
16270: PUSH
16271: LD_INT 104
16273: PUSH
16274: LD_INT 105
16276: PUSH
16277: LD_INT 106
16279: PUSH
16280: LD_INT 107
16282: PUSH
16283: LD_INT 108
16285: PUSH
16286: LD_INT 109
16288: PUSH
16289: LD_INT 110
16291: PUSH
16292: LD_INT 111
16294: PUSH
16295: LD_INT 112
16297: PUSH
16298: LD_INT 113
16300: PUSH
16301: LD_INT 114
16303: PUSH
16304: LD_INT 116
16306: PUSH
16307: LD_INT 117
16309: PUSH
16310: LD_INT 118
16312: PUSH
16313: EMPTY
16314: LIST
16315: LIST
16316: LIST
16317: LIST
16318: LIST
16319: LIST
16320: LIST
16321: LIST
16322: LIST
16323: LIST
16324: LIST
16325: LIST
16326: LIST
16327: LIST
16328: LIST
16329: LIST
16330: LIST
16331: PUSH
16332: EMPTY
16333: LIST
16334: LIST
16335: ST_TO_ADDR
16336: GO 17343
16338: LD_INT 15
16340: DOUBLE
16341: EQUAL
16342: IFTRUE 16346
16344: GO 16570
16346: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
16347: LD_ADDR_VAR 0 2
16351: PUSH
16352: LD_INT 1
16354: PUSH
16355: LD_INT 2
16357: PUSH
16358: LD_INT 3
16360: PUSH
16361: LD_INT 4
16363: PUSH
16364: LD_INT 5
16366: PUSH
16367: LD_INT 6
16369: PUSH
16370: LD_INT 7
16372: PUSH
16373: LD_INT 8
16375: PUSH
16376: LD_INT 9
16378: PUSH
16379: LD_INT 10
16381: PUSH
16382: LD_INT 11
16384: PUSH
16385: LD_INT 12
16387: PUSH
16388: LD_INT 13
16390: PUSH
16391: LD_INT 14
16393: PUSH
16394: LD_INT 15
16396: PUSH
16397: LD_INT 16
16399: PUSH
16400: LD_INT 17
16402: PUSH
16403: LD_INT 18
16405: PUSH
16406: LD_INT 19
16408: PUSH
16409: LD_INT 20
16411: PUSH
16412: LD_INT 21
16414: PUSH
16415: LD_INT 22
16417: PUSH
16418: LD_INT 23
16420: PUSH
16421: LD_INT 24
16423: PUSH
16424: LD_INT 25
16426: PUSH
16427: LD_INT 26
16429: PUSH
16430: LD_INT 27
16432: PUSH
16433: LD_INT 28
16435: PUSH
16436: LD_INT 29
16438: PUSH
16439: LD_INT 30
16441: PUSH
16442: LD_INT 31
16444: PUSH
16445: LD_INT 32
16447: PUSH
16448: LD_INT 33
16450: PUSH
16451: LD_INT 34
16453: PUSH
16454: LD_INT 36
16456: PUSH
16457: EMPTY
16458: LIST
16459: LIST
16460: LIST
16461: LIST
16462: LIST
16463: LIST
16464: LIST
16465: LIST
16466: LIST
16467: LIST
16468: LIST
16469: LIST
16470: LIST
16471: LIST
16472: LIST
16473: LIST
16474: LIST
16475: LIST
16476: LIST
16477: LIST
16478: LIST
16479: LIST
16480: LIST
16481: LIST
16482: LIST
16483: LIST
16484: LIST
16485: LIST
16486: LIST
16487: LIST
16488: LIST
16489: LIST
16490: LIST
16491: LIST
16492: LIST
16493: PUSH
16494: LD_INT 101
16496: PUSH
16497: LD_INT 102
16499: PUSH
16500: LD_INT 103
16502: PUSH
16503: LD_INT 104
16505: PUSH
16506: LD_INT 105
16508: PUSH
16509: LD_INT 106
16511: PUSH
16512: LD_INT 107
16514: PUSH
16515: LD_INT 108
16517: PUSH
16518: LD_INT 109
16520: PUSH
16521: LD_INT 110
16523: PUSH
16524: LD_INT 111
16526: PUSH
16527: LD_INT 112
16529: PUSH
16530: LD_INT 113
16532: PUSH
16533: LD_INT 114
16535: PUSH
16536: LD_INT 116
16538: PUSH
16539: LD_INT 117
16541: PUSH
16542: LD_INT 118
16544: PUSH
16545: EMPTY
16546: LIST
16547: LIST
16548: LIST
16549: LIST
16550: LIST
16551: LIST
16552: LIST
16553: LIST
16554: LIST
16555: LIST
16556: LIST
16557: LIST
16558: LIST
16559: LIST
16560: LIST
16561: LIST
16562: LIST
16563: PUSH
16564: EMPTY
16565: LIST
16566: LIST
16567: ST_TO_ADDR
16568: GO 17343
16570: LD_INT 16
16572: DOUBLE
16573: EQUAL
16574: IFTRUE 16578
16576: GO 16714
16578: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
16579: LD_ADDR_VAR 0 2
16583: PUSH
16584: LD_INT 2
16586: PUSH
16587: LD_INT 4
16589: PUSH
16590: LD_INT 5
16592: PUSH
16593: LD_INT 7
16595: PUSH
16596: LD_INT 11
16598: PUSH
16599: LD_INT 12
16601: PUSH
16602: LD_INT 15
16604: PUSH
16605: LD_INT 16
16607: PUSH
16608: LD_INT 20
16610: PUSH
16611: LD_INT 21
16613: PUSH
16614: LD_INT 22
16616: PUSH
16617: LD_INT 23
16619: PUSH
16620: LD_INT 25
16622: PUSH
16623: LD_INT 26
16625: PUSH
16626: LD_INT 30
16628: PUSH
16629: LD_INT 31
16631: PUSH
16632: LD_INT 32
16634: PUSH
16635: LD_INT 33
16637: PUSH
16638: LD_INT 34
16640: PUSH
16641: EMPTY
16642: LIST
16643: LIST
16644: LIST
16645: LIST
16646: LIST
16647: LIST
16648: LIST
16649: LIST
16650: LIST
16651: LIST
16652: LIST
16653: LIST
16654: LIST
16655: LIST
16656: LIST
16657: LIST
16658: LIST
16659: LIST
16660: LIST
16661: PUSH
16662: LD_INT 101
16664: PUSH
16665: LD_INT 102
16667: PUSH
16668: LD_INT 103
16670: PUSH
16671: LD_INT 106
16673: PUSH
16674: LD_INT 108
16676: PUSH
16677: LD_INT 112
16679: PUSH
16680: LD_INT 113
16682: PUSH
16683: LD_INT 114
16685: PUSH
16686: LD_INT 116
16688: PUSH
16689: LD_INT 117
16691: PUSH
16692: LD_INT 118
16694: PUSH
16695: EMPTY
16696: LIST
16697: LIST
16698: LIST
16699: LIST
16700: LIST
16701: LIST
16702: LIST
16703: LIST
16704: LIST
16705: LIST
16706: LIST
16707: PUSH
16708: EMPTY
16709: LIST
16710: LIST
16711: ST_TO_ADDR
16712: GO 17343
16714: LD_INT 17
16716: DOUBLE
16717: EQUAL
16718: IFTRUE 16722
16720: GO 16946
16722: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
16723: LD_ADDR_VAR 0 2
16727: PUSH
16728: LD_INT 1
16730: PUSH
16731: LD_INT 2
16733: PUSH
16734: LD_INT 3
16736: PUSH
16737: LD_INT 4
16739: PUSH
16740: LD_INT 5
16742: PUSH
16743: LD_INT 6
16745: PUSH
16746: LD_INT 7
16748: PUSH
16749: LD_INT 8
16751: PUSH
16752: LD_INT 9
16754: PUSH
16755: LD_INT 10
16757: PUSH
16758: LD_INT 11
16760: PUSH
16761: LD_INT 12
16763: PUSH
16764: LD_INT 13
16766: PUSH
16767: LD_INT 14
16769: PUSH
16770: LD_INT 15
16772: PUSH
16773: LD_INT 16
16775: PUSH
16776: LD_INT 17
16778: PUSH
16779: LD_INT 18
16781: PUSH
16782: LD_INT 19
16784: PUSH
16785: LD_INT 20
16787: PUSH
16788: LD_INT 21
16790: PUSH
16791: LD_INT 22
16793: PUSH
16794: LD_INT 23
16796: PUSH
16797: LD_INT 24
16799: PUSH
16800: LD_INT 25
16802: PUSH
16803: LD_INT 26
16805: PUSH
16806: LD_INT 27
16808: PUSH
16809: LD_INT 28
16811: PUSH
16812: LD_INT 29
16814: PUSH
16815: LD_INT 30
16817: PUSH
16818: LD_INT 31
16820: PUSH
16821: LD_INT 32
16823: PUSH
16824: LD_INT 33
16826: PUSH
16827: LD_INT 34
16829: PUSH
16830: LD_INT 36
16832: PUSH
16833: EMPTY
16834: LIST
16835: LIST
16836: LIST
16837: LIST
16838: LIST
16839: LIST
16840: LIST
16841: LIST
16842: LIST
16843: LIST
16844: LIST
16845: LIST
16846: LIST
16847: LIST
16848: LIST
16849: LIST
16850: LIST
16851: LIST
16852: LIST
16853: LIST
16854: LIST
16855: LIST
16856: LIST
16857: LIST
16858: LIST
16859: LIST
16860: LIST
16861: LIST
16862: LIST
16863: LIST
16864: LIST
16865: LIST
16866: LIST
16867: LIST
16868: LIST
16869: PUSH
16870: LD_INT 101
16872: PUSH
16873: LD_INT 102
16875: PUSH
16876: LD_INT 103
16878: PUSH
16879: LD_INT 104
16881: PUSH
16882: LD_INT 105
16884: PUSH
16885: LD_INT 106
16887: PUSH
16888: LD_INT 107
16890: PUSH
16891: LD_INT 108
16893: PUSH
16894: LD_INT 109
16896: PUSH
16897: LD_INT 110
16899: PUSH
16900: LD_INT 111
16902: PUSH
16903: LD_INT 112
16905: PUSH
16906: LD_INT 113
16908: PUSH
16909: LD_INT 114
16911: PUSH
16912: LD_INT 116
16914: PUSH
16915: LD_INT 117
16917: PUSH
16918: LD_INT 118
16920: PUSH
16921: EMPTY
16922: LIST
16923: LIST
16924: LIST
16925: LIST
16926: LIST
16927: LIST
16928: LIST
16929: LIST
16930: LIST
16931: LIST
16932: LIST
16933: LIST
16934: LIST
16935: LIST
16936: LIST
16937: LIST
16938: LIST
16939: PUSH
16940: EMPTY
16941: LIST
16942: LIST
16943: ST_TO_ADDR
16944: GO 17343
16946: LD_INT 18
16948: DOUBLE
16949: EQUAL
16950: IFTRUE 16954
16952: GO 17102
16954: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
16955: LD_ADDR_VAR 0 2
16959: PUSH
16960: LD_INT 2
16962: PUSH
16963: LD_INT 4
16965: PUSH
16966: LD_INT 5
16968: PUSH
16969: LD_INT 7
16971: PUSH
16972: LD_INT 11
16974: PUSH
16975: LD_INT 12
16977: PUSH
16978: LD_INT 15
16980: PUSH
16981: LD_INT 16
16983: PUSH
16984: LD_INT 20
16986: PUSH
16987: LD_INT 21
16989: PUSH
16990: LD_INT 22
16992: PUSH
16993: LD_INT 23
16995: PUSH
16996: LD_INT 25
16998: PUSH
16999: LD_INT 26
17001: PUSH
17002: LD_INT 30
17004: PUSH
17005: LD_INT 31
17007: PUSH
17008: LD_INT 32
17010: PUSH
17011: LD_INT 33
17013: PUSH
17014: LD_INT 34
17016: PUSH
17017: LD_INT 35
17019: PUSH
17020: LD_INT 36
17022: PUSH
17023: EMPTY
17024: LIST
17025: LIST
17026: LIST
17027: LIST
17028: LIST
17029: LIST
17030: LIST
17031: LIST
17032: LIST
17033: LIST
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: PUSH
17046: LD_INT 101
17048: PUSH
17049: LD_INT 102
17051: PUSH
17052: LD_INT 103
17054: PUSH
17055: LD_INT 106
17057: PUSH
17058: LD_INT 108
17060: PUSH
17061: LD_INT 112
17063: PUSH
17064: LD_INT 113
17066: PUSH
17067: LD_INT 114
17069: PUSH
17070: LD_INT 115
17072: PUSH
17073: LD_INT 116
17075: PUSH
17076: LD_INT 117
17078: PUSH
17079: LD_INT 118
17081: PUSH
17082: EMPTY
17083: LIST
17084: LIST
17085: LIST
17086: LIST
17087: LIST
17088: LIST
17089: LIST
17090: LIST
17091: LIST
17092: LIST
17093: LIST
17094: LIST
17095: PUSH
17096: EMPTY
17097: LIST
17098: LIST
17099: ST_TO_ADDR
17100: GO 17343
17102: LD_INT 19
17104: DOUBLE
17105: EQUAL
17106: IFTRUE 17110
17108: GO 17342
17110: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
17111: LD_ADDR_VAR 0 2
17115: PUSH
17116: LD_INT 1
17118: PUSH
17119: LD_INT 2
17121: PUSH
17122: LD_INT 3
17124: PUSH
17125: LD_INT 4
17127: PUSH
17128: LD_INT 5
17130: PUSH
17131: LD_INT 6
17133: PUSH
17134: LD_INT 7
17136: PUSH
17137: LD_INT 8
17139: PUSH
17140: LD_INT 9
17142: PUSH
17143: LD_INT 10
17145: PUSH
17146: LD_INT 11
17148: PUSH
17149: LD_INT 12
17151: PUSH
17152: LD_INT 13
17154: PUSH
17155: LD_INT 14
17157: PUSH
17158: LD_INT 15
17160: PUSH
17161: LD_INT 16
17163: PUSH
17164: LD_INT 17
17166: PUSH
17167: LD_INT 18
17169: PUSH
17170: LD_INT 19
17172: PUSH
17173: LD_INT 20
17175: PUSH
17176: LD_INT 21
17178: PUSH
17179: LD_INT 22
17181: PUSH
17182: LD_INT 23
17184: PUSH
17185: LD_INT 24
17187: PUSH
17188: LD_INT 25
17190: PUSH
17191: LD_INT 26
17193: PUSH
17194: LD_INT 27
17196: PUSH
17197: LD_INT 28
17199: PUSH
17200: LD_INT 29
17202: PUSH
17203: LD_INT 30
17205: PUSH
17206: LD_INT 31
17208: PUSH
17209: LD_INT 32
17211: PUSH
17212: LD_INT 33
17214: PUSH
17215: LD_INT 34
17217: PUSH
17218: LD_INT 35
17220: PUSH
17221: LD_INT 36
17223: PUSH
17224: EMPTY
17225: LIST
17226: LIST
17227: LIST
17228: LIST
17229: LIST
17230: LIST
17231: LIST
17232: LIST
17233: LIST
17234: LIST
17235: LIST
17236: LIST
17237: LIST
17238: LIST
17239: LIST
17240: LIST
17241: LIST
17242: LIST
17243: LIST
17244: LIST
17245: LIST
17246: LIST
17247: LIST
17248: LIST
17249: LIST
17250: LIST
17251: LIST
17252: LIST
17253: LIST
17254: LIST
17255: LIST
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: LIST
17261: PUSH
17262: LD_INT 101
17264: PUSH
17265: LD_INT 102
17267: PUSH
17268: LD_INT 103
17270: PUSH
17271: LD_INT 104
17273: PUSH
17274: LD_INT 105
17276: PUSH
17277: LD_INT 106
17279: PUSH
17280: LD_INT 107
17282: PUSH
17283: LD_INT 108
17285: PUSH
17286: LD_INT 109
17288: PUSH
17289: LD_INT 110
17291: PUSH
17292: LD_INT 111
17294: PUSH
17295: LD_INT 112
17297: PUSH
17298: LD_INT 113
17300: PUSH
17301: LD_INT 114
17303: PUSH
17304: LD_INT 115
17306: PUSH
17307: LD_INT 116
17309: PUSH
17310: LD_INT 117
17312: PUSH
17313: LD_INT 118
17315: PUSH
17316: EMPTY
17317: LIST
17318: LIST
17319: LIST
17320: LIST
17321: LIST
17322: LIST
17323: LIST
17324: LIST
17325: LIST
17326: LIST
17327: LIST
17328: LIST
17329: LIST
17330: LIST
17331: LIST
17332: LIST
17333: LIST
17334: LIST
17335: PUSH
17336: EMPTY
17337: LIST
17338: LIST
17339: ST_TO_ADDR
17340: GO 17343
17342: POP
// end else
17343: GO 17574
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
17345: LD_ADDR_VAR 0 2
17349: PUSH
17350: LD_INT 1
17352: PUSH
17353: LD_INT 2
17355: PUSH
17356: LD_INT 3
17358: PUSH
17359: LD_INT 4
17361: PUSH
17362: LD_INT 5
17364: PUSH
17365: LD_INT 6
17367: PUSH
17368: LD_INT 7
17370: PUSH
17371: LD_INT 8
17373: PUSH
17374: LD_INT 9
17376: PUSH
17377: LD_INT 10
17379: PUSH
17380: LD_INT 11
17382: PUSH
17383: LD_INT 12
17385: PUSH
17386: LD_INT 13
17388: PUSH
17389: LD_INT 14
17391: PUSH
17392: LD_INT 15
17394: PUSH
17395: LD_INT 16
17397: PUSH
17398: LD_INT 17
17400: PUSH
17401: LD_INT 18
17403: PUSH
17404: LD_INT 19
17406: PUSH
17407: LD_INT 20
17409: PUSH
17410: LD_INT 21
17412: PUSH
17413: LD_INT 22
17415: PUSH
17416: LD_INT 23
17418: PUSH
17419: LD_INT 24
17421: PUSH
17422: LD_INT 25
17424: PUSH
17425: LD_INT 26
17427: PUSH
17428: LD_INT 27
17430: PUSH
17431: LD_INT 28
17433: PUSH
17434: LD_INT 29
17436: PUSH
17437: LD_INT 30
17439: PUSH
17440: LD_INT 31
17442: PUSH
17443: LD_INT 32
17445: PUSH
17446: LD_INT 33
17448: PUSH
17449: LD_INT 34
17451: PUSH
17452: LD_INT 35
17454: PUSH
17455: LD_INT 36
17457: PUSH
17458: EMPTY
17459: LIST
17460: LIST
17461: LIST
17462: LIST
17463: LIST
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: LIST
17481: LIST
17482: LIST
17483: LIST
17484: LIST
17485: LIST
17486: LIST
17487: LIST
17488: LIST
17489: LIST
17490: LIST
17491: LIST
17492: LIST
17493: LIST
17494: LIST
17495: PUSH
17496: LD_INT 101
17498: PUSH
17499: LD_INT 102
17501: PUSH
17502: LD_INT 103
17504: PUSH
17505: LD_INT 104
17507: PUSH
17508: LD_INT 105
17510: PUSH
17511: LD_INT 106
17513: PUSH
17514: LD_INT 107
17516: PUSH
17517: LD_INT 108
17519: PUSH
17520: LD_INT 109
17522: PUSH
17523: LD_INT 110
17525: PUSH
17526: LD_INT 111
17528: PUSH
17529: LD_INT 112
17531: PUSH
17532: LD_INT 113
17534: PUSH
17535: LD_INT 114
17537: PUSH
17538: LD_INT 115
17540: PUSH
17541: LD_INT 116
17543: PUSH
17544: LD_INT 117
17546: PUSH
17547: LD_INT 118
17549: PUSH
17550: EMPTY
17551: LIST
17552: LIST
17553: LIST
17554: LIST
17555: LIST
17556: LIST
17557: LIST
17558: LIST
17559: LIST
17560: LIST
17561: LIST
17562: LIST
17563: LIST
17564: LIST
17565: LIST
17566: LIST
17567: LIST
17568: LIST
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: ST_TO_ADDR
// if result then
17574: LD_VAR 0 2
17578: IFFALSE 18364
// begin normal :=  ;
17580: LD_ADDR_VAR 0 5
17584: PUSH
17585: LD_STRING 
17587: ST_TO_ADDR
// hardcore :=  ;
17588: LD_ADDR_VAR 0 6
17592: PUSH
17593: LD_STRING 
17595: ST_TO_ADDR
// active :=  ;
17596: LD_ADDR_VAR 0 7
17600: PUSH
17601: LD_STRING 
17603: ST_TO_ADDR
// for i = 1 to normalCounter do
17604: LD_ADDR_VAR 0 8
17608: PUSH
17609: DOUBLE
17610: LD_INT 1
17612: DEC
17613: ST_TO_ADDR
17614: LD_EXP 23
17618: PUSH
17619: FOR_TO
17620: IFFALSE 17721
// begin tmp := 0 ;
17622: LD_ADDR_VAR 0 3
17626: PUSH
17627: LD_STRING 0
17629: ST_TO_ADDR
// if result [ 1 ] then
17630: LD_VAR 0 2
17634: PUSH
17635: LD_INT 1
17637: ARRAY
17638: IFFALSE 17703
// if result [ 1 ] [ 1 ] = i then
17640: LD_VAR 0 2
17644: PUSH
17645: LD_INT 1
17647: ARRAY
17648: PUSH
17649: LD_INT 1
17651: ARRAY
17652: PUSH
17653: LD_VAR 0 8
17657: EQUAL
17658: IFFALSE 17703
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
17660: LD_ADDR_VAR 0 2
17664: PUSH
17665: LD_VAR 0 2
17669: PPUSH
17670: LD_INT 1
17672: PPUSH
17673: LD_VAR 0 2
17677: PUSH
17678: LD_INT 1
17680: ARRAY
17681: PPUSH
17682: LD_INT 1
17684: PPUSH
17685: CALL_OW 3
17689: PPUSH
17690: CALL_OW 1
17694: ST_TO_ADDR
// tmp := 1 ;
17695: LD_ADDR_VAR 0 3
17699: PUSH
17700: LD_STRING 1
17702: ST_TO_ADDR
// end ; normal := normal & tmp ;
17703: LD_ADDR_VAR 0 5
17707: PUSH
17708: LD_VAR 0 5
17712: PUSH
17713: LD_VAR 0 3
17717: STR
17718: ST_TO_ADDR
// end ;
17719: GO 17619
17721: POP
17722: POP
// for i = 1 to hardcoreCounter do
17723: LD_ADDR_VAR 0 8
17727: PUSH
17728: DOUBLE
17729: LD_INT 1
17731: DEC
17732: ST_TO_ADDR
17733: LD_EXP 24
17737: PUSH
17738: FOR_TO
17739: IFFALSE 17844
// begin tmp := 0 ;
17741: LD_ADDR_VAR 0 3
17745: PUSH
17746: LD_STRING 0
17748: ST_TO_ADDR
// if result [ 2 ] then
17749: LD_VAR 0 2
17753: PUSH
17754: LD_INT 2
17756: ARRAY
17757: IFFALSE 17826
// if result [ 2 ] [ 1 ] = 100 + i then
17759: LD_VAR 0 2
17763: PUSH
17764: LD_INT 2
17766: ARRAY
17767: PUSH
17768: LD_INT 1
17770: ARRAY
17771: PUSH
17772: LD_INT 100
17774: PUSH
17775: LD_VAR 0 8
17779: PLUS
17780: EQUAL
17781: IFFALSE 17826
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
17783: LD_ADDR_VAR 0 2
17787: PUSH
17788: LD_VAR 0 2
17792: PPUSH
17793: LD_INT 2
17795: PPUSH
17796: LD_VAR 0 2
17800: PUSH
17801: LD_INT 2
17803: ARRAY
17804: PPUSH
17805: LD_INT 1
17807: PPUSH
17808: CALL_OW 3
17812: PPUSH
17813: CALL_OW 1
17817: ST_TO_ADDR
// tmp := 1 ;
17818: LD_ADDR_VAR 0 3
17822: PUSH
17823: LD_STRING 1
17825: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
17826: LD_ADDR_VAR 0 6
17830: PUSH
17831: LD_VAR 0 6
17835: PUSH
17836: LD_VAR 0 3
17840: STR
17841: ST_TO_ADDR
// end ;
17842: GO 17738
17844: POP
17845: POP
// if isGameLoad then
17846: LD_VAR 0 1
17850: IFFALSE 18325
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
17852: LD_ADDR_VAR 0 4
17856: PUSH
17857: LD_EXP 27
17861: PUSH
17862: LD_EXP 26
17866: PUSH
17867: LD_EXP 28
17871: PUSH
17872: LD_EXP 25
17876: PUSH
17877: LD_EXP 29
17881: PUSH
17882: LD_EXP 30
17886: PUSH
17887: LD_EXP 31
17891: PUSH
17892: LD_EXP 32
17896: PUSH
17897: LD_EXP 33
17901: PUSH
17902: LD_EXP 34
17906: PUSH
17907: LD_EXP 35
17911: PUSH
17912: LD_EXP 36
17916: PUSH
17917: LD_EXP 37
17921: PUSH
17922: LD_EXP 38
17926: PUSH
17927: LD_EXP 46
17931: PUSH
17932: LD_EXP 47
17936: PUSH
17937: LD_EXP 48
17941: PUSH
17942: LD_EXP 49
17946: PUSH
17947: LD_EXP 51
17951: PUSH
17952: LD_EXP 52
17956: PUSH
17957: LD_EXP 53
17961: PUSH
17962: LD_EXP 56
17966: PUSH
17967: LD_EXP 58
17971: PUSH
17972: LD_EXP 59
17976: PUSH
17977: LD_EXP 60
17981: PUSH
17982: LD_EXP 62
17986: PUSH
17987: LD_EXP 63
17991: PUSH
17992: LD_EXP 66
17996: PUSH
17997: LD_EXP 67
18001: PUSH
18002: LD_EXP 68
18006: PUSH
18007: LD_EXP 69
18011: PUSH
18012: LD_EXP 70
18016: PUSH
18017: LD_EXP 71
18021: PUSH
18022: LD_EXP 72
18026: PUSH
18027: LD_EXP 73
18031: PUSH
18032: LD_EXP 74
18036: PUSH
18037: LD_EXP 39
18041: PUSH
18042: LD_EXP 40
18046: PUSH
18047: LD_EXP 43
18051: PUSH
18052: LD_EXP 44
18056: PUSH
18057: LD_EXP 45
18061: PUSH
18062: LD_EXP 41
18066: PUSH
18067: LD_EXP 42
18071: PUSH
18072: LD_EXP 50
18076: PUSH
18077: LD_EXP 54
18081: PUSH
18082: LD_EXP 55
18086: PUSH
18087: LD_EXP 57
18091: PUSH
18092: LD_EXP 61
18096: PUSH
18097: LD_EXP 64
18101: PUSH
18102: LD_EXP 65
18106: PUSH
18107: LD_EXP 75
18111: PUSH
18112: LD_EXP 76
18116: PUSH
18117: LD_EXP 77
18121: PUSH
18122: LD_EXP 78
18126: PUSH
18127: EMPTY
18128: LIST
18129: LIST
18130: LIST
18131: LIST
18132: LIST
18133: LIST
18134: LIST
18135: LIST
18136: LIST
18137: LIST
18138: LIST
18139: LIST
18140: LIST
18141: LIST
18142: LIST
18143: LIST
18144: LIST
18145: LIST
18146: LIST
18147: LIST
18148: LIST
18149: LIST
18150: LIST
18151: LIST
18152: LIST
18153: LIST
18154: LIST
18155: LIST
18156: LIST
18157: LIST
18158: LIST
18159: LIST
18160: LIST
18161: LIST
18162: LIST
18163: LIST
18164: LIST
18165: LIST
18166: LIST
18167: LIST
18168: LIST
18169: LIST
18170: LIST
18171: LIST
18172: LIST
18173: LIST
18174: LIST
18175: LIST
18176: LIST
18177: LIST
18178: LIST
18179: LIST
18180: LIST
18181: LIST
18182: ST_TO_ADDR
// tmp :=  ;
18183: LD_ADDR_VAR 0 3
18187: PUSH
18188: LD_STRING 
18190: ST_TO_ADDR
// for i = 1 to normalCounter do
18191: LD_ADDR_VAR 0 8
18195: PUSH
18196: DOUBLE
18197: LD_INT 1
18199: DEC
18200: ST_TO_ADDR
18201: LD_EXP 23
18205: PUSH
18206: FOR_TO
18207: IFFALSE 18243
// begin if flags [ i ] then
18209: LD_VAR 0 4
18213: PUSH
18214: LD_VAR 0 8
18218: ARRAY
18219: IFFALSE 18241
// tmp := tmp & i & ; ;
18221: LD_ADDR_VAR 0 3
18225: PUSH
18226: LD_VAR 0 3
18230: PUSH
18231: LD_VAR 0 8
18235: STR
18236: PUSH
18237: LD_STRING ;
18239: STR
18240: ST_TO_ADDR
// end ;
18241: GO 18206
18243: POP
18244: POP
// for i = 1 to hardcoreCounter do
18245: LD_ADDR_VAR 0 8
18249: PUSH
18250: DOUBLE
18251: LD_INT 1
18253: DEC
18254: ST_TO_ADDR
18255: LD_EXP 24
18259: PUSH
18260: FOR_TO
18261: IFFALSE 18307
// begin if flags [ normalCounter + i ] then
18263: LD_VAR 0 4
18267: PUSH
18268: LD_EXP 23
18272: PUSH
18273: LD_VAR 0 8
18277: PLUS
18278: ARRAY
18279: IFFALSE 18305
// tmp := tmp & ( 100 + i ) & ; ;
18281: LD_ADDR_VAR 0 3
18285: PUSH
18286: LD_VAR 0 3
18290: PUSH
18291: LD_INT 100
18293: PUSH
18294: LD_VAR 0 8
18298: PLUS
18299: STR
18300: PUSH
18301: LD_STRING ;
18303: STR
18304: ST_TO_ADDR
// end ;
18305: GO 18260
18307: POP
18308: POP
// if tmp then
18309: LD_VAR 0 3
18313: IFFALSE 18325
// active := tmp ;
18315: LD_ADDR_VAR 0 7
18319: PUSH
18320: LD_VAR 0 3
18324: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
18325: LD_STRING getStreamItemsFromMission("
18327: PUSH
18328: LD_VAR 0 5
18332: STR
18333: PUSH
18334: LD_STRING ","
18336: STR
18337: PUSH
18338: LD_VAR 0 6
18342: STR
18343: PUSH
18344: LD_STRING ","
18346: STR
18347: PUSH
18348: LD_VAR 0 7
18352: STR
18353: PUSH
18354: LD_STRING ")
18356: STR
18357: PPUSH
18358: CALL_OW 559
// end else
18362: GO 18371
// ToLua ( getStreamItemsFromMission("","","") ) ;
18364: LD_STRING getStreamItemsFromMission("","","")
18366: PPUSH
18367: CALL_OW 559
// end ;
18371: LD_VAR 0 2
18375: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
18376: LD_EXP 22
18380: PUSH
18381: LD_EXP 27
18385: AND
18386: IFFALSE 18510
18388: GO 18390
18390: DISABLE
18391: LD_INT 0
18393: PPUSH
18394: PPUSH
// begin enable ;
18395: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
18396: LD_ADDR_VAR 0 2
18400: PUSH
18401: LD_INT 22
18403: PUSH
18404: LD_OWVAR 2
18408: PUSH
18409: EMPTY
18410: LIST
18411: LIST
18412: PUSH
18413: LD_INT 2
18415: PUSH
18416: LD_INT 34
18418: PUSH
18419: LD_INT 7
18421: PUSH
18422: EMPTY
18423: LIST
18424: LIST
18425: PUSH
18426: LD_INT 34
18428: PUSH
18429: LD_INT 45
18431: PUSH
18432: EMPTY
18433: LIST
18434: LIST
18435: PUSH
18436: LD_INT 34
18438: PUSH
18439: LD_INT 28
18441: PUSH
18442: EMPTY
18443: LIST
18444: LIST
18445: PUSH
18446: LD_INT 34
18448: PUSH
18449: LD_INT 47
18451: PUSH
18452: EMPTY
18453: LIST
18454: LIST
18455: PUSH
18456: EMPTY
18457: LIST
18458: LIST
18459: LIST
18460: LIST
18461: LIST
18462: PUSH
18463: EMPTY
18464: LIST
18465: LIST
18466: PPUSH
18467: CALL_OW 69
18471: ST_TO_ADDR
// if not tmp then
18472: LD_VAR 0 2
18476: NOT
18477: IFFALSE 18481
// exit ;
18479: GO 18510
// for i in tmp do
18481: LD_ADDR_VAR 0 1
18485: PUSH
18486: LD_VAR 0 2
18490: PUSH
18491: FOR_IN
18492: IFFALSE 18508
// begin SetLives ( i , 0 ) ;
18494: LD_VAR 0 1
18498: PPUSH
18499: LD_INT 0
18501: PPUSH
18502: CALL_OW 234
// end ;
18506: GO 18491
18508: POP
18509: POP
// end ;
18510: PPOPN 2
18512: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
18513: LD_EXP 22
18517: PUSH
18518: LD_EXP 28
18522: AND
18523: IFFALSE 18607
18525: GO 18527
18527: DISABLE
18528: LD_INT 0
18530: PPUSH
18531: PPUSH
// begin enable ;
18532: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
18533: LD_ADDR_VAR 0 2
18537: PUSH
18538: LD_INT 22
18540: PUSH
18541: LD_OWVAR 2
18545: PUSH
18546: EMPTY
18547: LIST
18548: LIST
18549: PUSH
18550: LD_INT 32
18552: PUSH
18553: LD_INT 3
18555: PUSH
18556: EMPTY
18557: LIST
18558: LIST
18559: PUSH
18560: EMPTY
18561: LIST
18562: LIST
18563: PPUSH
18564: CALL_OW 69
18568: ST_TO_ADDR
// if not tmp then
18569: LD_VAR 0 2
18573: NOT
18574: IFFALSE 18578
// exit ;
18576: GO 18607
// for i in tmp do
18578: LD_ADDR_VAR 0 1
18582: PUSH
18583: LD_VAR 0 2
18587: PUSH
18588: FOR_IN
18589: IFFALSE 18605
// begin SetLives ( i , 0 ) ;
18591: LD_VAR 0 1
18595: PPUSH
18596: LD_INT 0
18598: PPUSH
18599: CALL_OW 234
// end ;
18603: GO 18588
18605: POP
18606: POP
// end ;
18607: PPOPN 2
18609: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
18610: LD_EXP 22
18614: PUSH
18615: LD_EXP 25
18619: AND
18620: IFFALSE 18713
18622: GO 18624
18624: DISABLE
18625: LD_INT 0
18627: PPUSH
// begin enable ;
18628: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
18629: LD_ADDR_VAR 0 1
18633: PUSH
18634: LD_INT 22
18636: PUSH
18637: LD_OWVAR 2
18641: PUSH
18642: EMPTY
18643: LIST
18644: LIST
18645: PUSH
18646: LD_INT 2
18648: PUSH
18649: LD_INT 25
18651: PUSH
18652: LD_INT 5
18654: PUSH
18655: EMPTY
18656: LIST
18657: LIST
18658: PUSH
18659: LD_INT 25
18661: PUSH
18662: LD_INT 9
18664: PUSH
18665: EMPTY
18666: LIST
18667: LIST
18668: PUSH
18669: LD_INT 25
18671: PUSH
18672: LD_INT 8
18674: PUSH
18675: EMPTY
18676: LIST
18677: LIST
18678: PUSH
18679: EMPTY
18680: LIST
18681: LIST
18682: LIST
18683: LIST
18684: PUSH
18685: EMPTY
18686: LIST
18687: LIST
18688: PPUSH
18689: CALL_OW 69
18693: PUSH
18694: FOR_IN
18695: IFFALSE 18711
// begin SetClass ( i , 1 ) ;
18697: LD_VAR 0 1
18701: PPUSH
18702: LD_INT 1
18704: PPUSH
18705: CALL_OW 336
// end ;
18709: GO 18694
18711: POP
18712: POP
// end ;
18713: PPOPN 1
18715: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
18716: LD_EXP 22
18720: PUSH
18721: LD_EXP 26
18725: AND
18726: PUSH
18727: LD_OWVAR 65
18731: PUSH
18732: LD_INT 7
18734: LESS
18735: AND
18736: IFFALSE 18750
18738: GO 18740
18740: DISABLE
// begin enable ;
18741: ENABLE
// game_speed := 7 ;
18742: LD_ADDR_OWVAR 65
18746: PUSH
18747: LD_INT 7
18749: ST_TO_ADDR
// end ;
18750: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
18751: LD_EXP 22
18755: PUSH
18756: LD_EXP 29
18760: AND
18761: IFFALSE 18963
18763: GO 18765
18765: DISABLE
18766: LD_INT 0
18768: PPUSH
18769: PPUSH
18770: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18771: LD_ADDR_VAR 0 3
18775: PUSH
18776: LD_INT 81
18778: PUSH
18779: LD_OWVAR 2
18783: PUSH
18784: EMPTY
18785: LIST
18786: LIST
18787: PUSH
18788: LD_INT 21
18790: PUSH
18791: LD_INT 1
18793: PUSH
18794: EMPTY
18795: LIST
18796: LIST
18797: PUSH
18798: EMPTY
18799: LIST
18800: LIST
18801: PPUSH
18802: CALL_OW 69
18806: ST_TO_ADDR
// if not tmp then
18807: LD_VAR 0 3
18811: NOT
18812: IFFALSE 18816
// exit ;
18814: GO 18963
// if tmp > 5 then
18816: LD_VAR 0 3
18820: PUSH
18821: LD_INT 5
18823: GREATER
18824: IFFALSE 18836
// k := 5 else
18826: LD_ADDR_VAR 0 2
18830: PUSH
18831: LD_INT 5
18833: ST_TO_ADDR
18834: GO 18846
// k := tmp ;
18836: LD_ADDR_VAR 0 2
18840: PUSH
18841: LD_VAR 0 3
18845: ST_TO_ADDR
// for i := 1 to k do
18846: LD_ADDR_VAR 0 1
18850: PUSH
18851: DOUBLE
18852: LD_INT 1
18854: DEC
18855: ST_TO_ADDR
18856: LD_VAR 0 2
18860: PUSH
18861: FOR_TO
18862: IFFALSE 18961
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
18864: LD_VAR 0 3
18868: PUSH
18869: LD_VAR 0 1
18873: ARRAY
18874: PPUSH
18875: LD_VAR 0 1
18879: PUSH
18880: LD_INT 4
18882: MOD
18883: PUSH
18884: LD_INT 1
18886: PLUS
18887: PPUSH
18888: CALL_OW 259
18892: PUSH
18893: LD_INT 10
18895: LESS
18896: IFFALSE 18959
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
18898: LD_VAR 0 3
18902: PUSH
18903: LD_VAR 0 1
18907: ARRAY
18908: PPUSH
18909: LD_VAR 0 1
18913: PUSH
18914: LD_INT 4
18916: MOD
18917: PUSH
18918: LD_INT 1
18920: PLUS
18921: PPUSH
18922: LD_VAR 0 3
18926: PUSH
18927: LD_VAR 0 1
18931: ARRAY
18932: PPUSH
18933: LD_VAR 0 1
18937: PUSH
18938: LD_INT 4
18940: MOD
18941: PUSH
18942: LD_INT 1
18944: PLUS
18945: PPUSH
18946: CALL_OW 259
18950: PUSH
18951: LD_INT 1
18953: PLUS
18954: PPUSH
18955: CALL_OW 237
18959: GO 18861
18961: POP
18962: POP
// end ;
18963: PPOPN 3
18965: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
18966: LD_EXP 22
18970: PUSH
18971: LD_EXP 30
18975: AND
18976: IFFALSE 18996
18978: GO 18980
18980: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
18981: LD_INT 4
18983: PPUSH
18984: LD_OWVAR 2
18988: PPUSH
18989: LD_INT 0
18991: PPUSH
18992: CALL_OW 324
18996: END
// every 0 0$1 trigger StreamModeActive and sShovel do
18997: LD_EXP 22
19001: PUSH
19002: LD_EXP 59
19006: AND
19007: IFFALSE 19027
19009: GO 19011
19011: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
19012: LD_INT 19
19014: PPUSH
19015: LD_OWVAR 2
19019: PPUSH
19020: LD_INT 0
19022: PPUSH
19023: CALL_OW 324
19027: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
19028: LD_EXP 22
19032: PUSH
19033: LD_EXP 31
19037: AND
19038: IFFALSE 19140
19040: GO 19042
19042: DISABLE
19043: LD_INT 0
19045: PPUSH
19046: PPUSH
// begin enable ;
19047: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
19048: LD_ADDR_VAR 0 2
19052: PUSH
19053: LD_INT 22
19055: PUSH
19056: LD_OWVAR 2
19060: PUSH
19061: EMPTY
19062: LIST
19063: LIST
19064: PUSH
19065: LD_INT 2
19067: PUSH
19068: LD_INT 34
19070: PUSH
19071: LD_INT 11
19073: PUSH
19074: EMPTY
19075: LIST
19076: LIST
19077: PUSH
19078: LD_INT 34
19080: PUSH
19081: LD_INT 30
19083: PUSH
19084: EMPTY
19085: LIST
19086: LIST
19087: PUSH
19088: EMPTY
19089: LIST
19090: LIST
19091: LIST
19092: PUSH
19093: EMPTY
19094: LIST
19095: LIST
19096: PPUSH
19097: CALL_OW 69
19101: ST_TO_ADDR
// if not tmp then
19102: LD_VAR 0 2
19106: NOT
19107: IFFALSE 19111
// exit ;
19109: GO 19140
// for i in tmp do
19111: LD_ADDR_VAR 0 1
19115: PUSH
19116: LD_VAR 0 2
19120: PUSH
19121: FOR_IN
19122: IFFALSE 19138
// begin SetLives ( i , 0 ) ;
19124: LD_VAR 0 1
19128: PPUSH
19129: LD_INT 0
19131: PPUSH
19132: CALL_OW 234
// end ;
19136: GO 19121
19138: POP
19139: POP
// end ;
19140: PPOPN 2
19142: END
// every 0 0$1 trigger StreamModeActive and sBunker do
19143: LD_EXP 22
19147: PUSH
19148: LD_EXP 32
19152: AND
19153: IFFALSE 19173
19155: GO 19157
19157: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
19158: LD_INT 32
19160: PPUSH
19161: LD_OWVAR 2
19165: PPUSH
19166: LD_INT 0
19168: PPUSH
19169: CALL_OW 324
19173: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
19174: LD_EXP 22
19178: PUSH
19179: LD_EXP 33
19183: AND
19184: IFFALSE 19365
19186: GO 19188
19188: DISABLE
19189: LD_INT 0
19191: PPUSH
19192: PPUSH
19193: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
19194: LD_ADDR_VAR 0 2
19198: PUSH
19199: LD_INT 22
19201: PUSH
19202: LD_OWVAR 2
19206: PUSH
19207: EMPTY
19208: LIST
19209: LIST
19210: PUSH
19211: LD_INT 33
19213: PUSH
19214: LD_INT 3
19216: PUSH
19217: EMPTY
19218: LIST
19219: LIST
19220: PUSH
19221: EMPTY
19222: LIST
19223: LIST
19224: PPUSH
19225: CALL_OW 69
19229: ST_TO_ADDR
// if not tmp then
19230: LD_VAR 0 2
19234: NOT
19235: IFFALSE 19239
// exit ;
19237: GO 19365
// side := 0 ;
19239: LD_ADDR_VAR 0 3
19243: PUSH
19244: LD_INT 0
19246: ST_TO_ADDR
// for i := 1 to 8 do
19247: LD_ADDR_VAR 0 1
19251: PUSH
19252: DOUBLE
19253: LD_INT 1
19255: DEC
19256: ST_TO_ADDR
19257: LD_INT 8
19259: PUSH
19260: FOR_TO
19261: IFFALSE 19309
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
19263: LD_OWVAR 2
19267: PUSH
19268: LD_VAR 0 1
19272: NONEQUAL
19273: PUSH
19274: LD_OWVAR 2
19278: PPUSH
19279: LD_VAR 0 1
19283: PPUSH
19284: CALL_OW 81
19288: PUSH
19289: LD_INT 2
19291: EQUAL
19292: AND
19293: IFFALSE 19307
// begin side := i ;
19295: LD_ADDR_VAR 0 3
19299: PUSH
19300: LD_VAR 0 1
19304: ST_TO_ADDR
// break ;
19305: GO 19309
// end ;
19307: GO 19260
19309: POP
19310: POP
// if not side then
19311: LD_VAR 0 3
19315: NOT
19316: IFFALSE 19320
// exit ;
19318: GO 19365
// for i := 1 to tmp do
19320: LD_ADDR_VAR 0 1
19324: PUSH
19325: DOUBLE
19326: LD_INT 1
19328: DEC
19329: ST_TO_ADDR
19330: LD_VAR 0 2
19334: PUSH
19335: FOR_TO
19336: IFFALSE 19363
// if Prob ( 60 ) then
19338: LD_INT 60
19340: PPUSH
19341: CALL_OW 13
19345: IFFALSE 19361
// SetSide ( i , side ) ;
19347: LD_VAR 0 1
19351: PPUSH
19352: LD_VAR 0 3
19356: PPUSH
19357: CALL_OW 235
19361: GO 19335
19363: POP
19364: POP
// end ;
19365: PPOPN 3
19367: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
19368: LD_EXP 22
19372: PUSH
19373: LD_EXP 35
19377: AND
19378: IFFALSE 19497
19380: GO 19382
19382: DISABLE
19383: LD_INT 0
19385: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
19386: LD_ADDR_VAR 0 1
19390: PUSH
19391: LD_INT 22
19393: PUSH
19394: LD_OWVAR 2
19398: PUSH
19399: EMPTY
19400: LIST
19401: LIST
19402: PUSH
19403: LD_INT 21
19405: PUSH
19406: LD_INT 1
19408: PUSH
19409: EMPTY
19410: LIST
19411: LIST
19412: PUSH
19413: LD_INT 3
19415: PUSH
19416: LD_INT 23
19418: PUSH
19419: LD_INT 0
19421: PUSH
19422: EMPTY
19423: LIST
19424: LIST
19425: PUSH
19426: EMPTY
19427: LIST
19428: LIST
19429: PUSH
19430: EMPTY
19431: LIST
19432: LIST
19433: LIST
19434: PPUSH
19435: CALL_OW 69
19439: PUSH
19440: FOR_IN
19441: IFFALSE 19495
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
19443: LD_VAR 0 1
19447: PPUSH
19448: CALL_OW 257
19452: PUSH
19453: LD_INT 1
19455: PUSH
19456: LD_INT 2
19458: PUSH
19459: LD_INT 3
19461: PUSH
19462: LD_INT 4
19464: PUSH
19465: EMPTY
19466: LIST
19467: LIST
19468: LIST
19469: LIST
19470: IN
19471: IFFALSE 19493
// SetClass ( un , rand ( 1 , 4 ) ) ;
19473: LD_VAR 0 1
19477: PPUSH
19478: LD_INT 1
19480: PPUSH
19481: LD_INT 4
19483: PPUSH
19484: CALL_OW 12
19488: PPUSH
19489: CALL_OW 336
19493: GO 19440
19495: POP
19496: POP
// end ;
19497: PPOPN 1
19499: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
19500: LD_EXP 22
19504: PUSH
19505: LD_EXP 34
19509: AND
19510: IFFALSE 19589
19512: GO 19514
19514: DISABLE
19515: LD_INT 0
19517: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19518: LD_ADDR_VAR 0 1
19522: PUSH
19523: LD_INT 22
19525: PUSH
19526: LD_OWVAR 2
19530: PUSH
19531: EMPTY
19532: LIST
19533: LIST
19534: PUSH
19535: LD_INT 21
19537: PUSH
19538: LD_INT 3
19540: PUSH
19541: EMPTY
19542: LIST
19543: LIST
19544: PUSH
19545: EMPTY
19546: LIST
19547: LIST
19548: PPUSH
19549: CALL_OW 69
19553: ST_TO_ADDR
// if not tmp then
19554: LD_VAR 0 1
19558: NOT
19559: IFFALSE 19563
// exit ;
19561: GO 19589
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
19563: LD_VAR 0 1
19567: PUSH
19568: LD_INT 1
19570: PPUSH
19571: LD_VAR 0 1
19575: PPUSH
19576: CALL_OW 12
19580: ARRAY
19581: PPUSH
19582: LD_INT 100
19584: PPUSH
19585: CALL_OW 234
// end ;
19589: PPOPN 1
19591: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
19592: LD_EXP 22
19596: PUSH
19597: LD_EXP 36
19601: AND
19602: IFFALSE 19700
19604: GO 19606
19606: DISABLE
19607: LD_INT 0
19609: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19610: LD_ADDR_VAR 0 1
19614: PUSH
19615: LD_INT 22
19617: PUSH
19618: LD_OWVAR 2
19622: PUSH
19623: EMPTY
19624: LIST
19625: LIST
19626: PUSH
19627: LD_INT 21
19629: PUSH
19630: LD_INT 1
19632: PUSH
19633: EMPTY
19634: LIST
19635: LIST
19636: PUSH
19637: EMPTY
19638: LIST
19639: LIST
19640: PPUSH
19641: CALL_OW 69
19645: ST_TO_ADDR
// if not tmp then
19646: LD_VAR 0 1
19650: NOT
19651: IFFALSE 19655
// exit ;
19653: GO 19700
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
19655: LD_VAR 0 1
19659: PUSH
19660: LD_INT 1
19662: PPUSH
19663: LD_VAR 0 1
19667: PPUSH
19668: CALL_OW 12
19672: ARRAY
19673: PPUSH
19674: LD_INT 1
19676: PPUSH
19677: LD_INT 4
19679: PPUSH
19680: CALL_OW 12
19684: PPUSH
19685: LD_INT 3000
19687: PPUSH
19688: LD_INT 9000
19690: PPUSH
19691: CALL_OW 12
19695: PPUSH
19696: CALL_OW 492
// end ;
19700: PPOPN 1
19702: END
// every 0 0$1 trigger StreamModeActive and sDepot do
19703: LD_EXP 22
19707: PUSH
19708: LD_EXP 37
19712: AND
19713: IFFALSE 19733
19715: GO 19717
19717: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
19718: LD_INT 1
19720: PPUSH
19721: LD_OWVAR 2
19725: PPUSH
19726: LD_INT 0
19728: PPUSH
19729: CALL_OW 324
19733: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
19734: LD_EXP 22
19738: PUSH
19739: LD_EXP 38
19743: AND
19744: IFFALSE 19827
19746: GO 19748
19748: DISABLE
19749: LD_INT 0
19751: PPUSH
19752: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19753: LD_ADDR_VAR 0 2
19757: PUSH
19758: LD_INT 22
19760: PUSH
19761: LD_OWVAR 2
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: PUSH
19770: LD_INT 21
19772: PUSH
19773: LD_INT 3
19775: PUSH
19776: EMPTY
19777: LIST
19778: LIST
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: PPUSH
19784: CALL_OW 69
19788: ST_TO_ADDR
// if not tmp then
19789: LD_VAR 0 2
19793: NOT
19794: IFFALSE 19798
// exit ;
19796: GO 19827
// for i in tmp do
19798: LD_ADDR_VAR 0 1
19802: PUSH
19803: LD_VAR 0 2
19807: PUSH
19808: FOR_IN
19809: IFFALSE 19825
// SetBLevel ( i , 10 ) ;
19811: LD_VAR 0 1
19815: PPUSH
19816: LD_INT 10
19818: PPUSH
19819: CALL_OW 241
19823: GO 19808
19825: POP
19826: POP
// end ;
19827: PPOPN 2
19829: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
19830: LD_EXP 22
19834: PUSH
19835: LD_EXP 39
19839: AND
19840: IFFALSE 19951
19842: GO 19844
19844: DISABLE
19845: LD_INT 0
19847: PPUSH
19848: PPUSH
19849: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19850: LD_ADDR_VAR 0 3
19854: PUSH
19855: LD_INT 22
19857: PUSH
19858: LD_OWVAR 2
19862: PUSH
19863: EMPTY
19864: LIST
19865: LIST
19866: PUSH
19867: LD_INT 25
19869: PUSH
19870: LD_INT 1
19872: PUSH
19873: EMPTY
19874: LIST
19875: LIST
19876: PUSH
19877: EMPTY
19878: LIST
19879: LIST
19880: PPUSH
19881: CALL_OW 69
19885: ST_TO_ADDR
// if not tmp then
19886: LD_VAR 0 3
19890: NOT
19891: IFFALSE 19895
// exit ;
19893: GO 19951
// un := tmp [ rand ( 1 , tmp ) ] ;
19895: LD_ADDR_VAR 0 2
19899: PUSH
19900: LD_VAR 0 3
19904: PUSH
19905: LD_INT 1
19907: PPUSH
19908: LD_VAR 0 3
19912: PPUSH
19913: CALL_OW 12
19917: ARRAY
19918: ST_TO_ADDR
// if Crawls ( un ) then
19919: LD_VAR 0 2
19923: PPUSH
19924: CALL_OW 318
19928: IFFALSE 19939
// ComWalk ( un ) ;
19930: LD_VAR 0 2
19934: PPUSH
19935: CALL_OW 138
// SetClass ( un , class_sniper ) ;
19939: LD_VAR 0 2
19943: PPUSH
19944: LD_INT 5
19946: PPUSH
19947: CALL_OW 336
// end ;
19951: PPOPN 3
19953: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
19954: LD_EXP 22
19958: PUSH
19959: LD_EXP 40
19963: AND
19964: PUSH
19965: LD_OWVAR 67
19969: PUSH
19970: LD_INT 4
19972: LESS
19973: AND
19974: IFFALSE 19993
19976: GO 19978
19978: DISABLE
// begin Difficulty := Difficulty + 1 ;
19979: LD_ADDR_OWVAR 67
19983: PUSH
19984: LD_OWVAR 67
19988: PUSH
19989: LD_INT 1
19991: PLUS
19992: ST_TO_ADDR
// end ;
19993: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
19994: LD_EXP 22
19998: PUSH
19999: LD_EXP 41
20003: AND
20004: IFFALSE 20107
20006: GO 20008
20008: DISABLE
20009: LD_INT 0
20011: PPUSH
// begin for i := 1 to 5 do
20012: LD_ADDR_VAR 0 1
20016: PUSH
20017: DOUBLE
20018: LD_INT 1
20020: DEC
20021: ST_TO_ADDR
20022: LD_INT 5
20024: PUSH
20025: FOR_TO
20026: IFFALSE 20105
// begin uc_nation := nation_nature ;
20028: LD_ADDR_OWVAR 21
20032: PUSH
20033: LD_INT 0
20035: ST_TO_ADDR
// uc_side := 0 ;
20036: LD_ADDR_OWVAR 20
20040: PUSH
20041: LD_INT 0
20043: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20044: LD_ADDR_OWVAR 29
20048: PUSH
20049: LD_INT 12
20051: PUSH
20052: LD_INT 12
20054: PUSH
20055: EMPTY
20056: LIST
20057: LIST
20058: ST_TO_ADDR
// hc_agressivity := 20 ;
20059: LD_ADDR_OWVAR 35
20063: PUSH
20064: LD_INT 20
20066: ST_TO_ADDR
// hc_class := class_tiger ;
20067: LD_ADDR_OWVAR 28
20071: PUSH
20072: LD_INT 14
20074: ST_TO_ADDR
// hc_gallery :=  ;
20075: LD_ADDR_OWVAR 33
20079: PUSH
20080: LD_STRING 
20082: ST_TO_ADDR
// hc_name :=  ;
20083: LD_ADDR_OWVAR 26
20087: PUSH
20088: LD_STRING 
20090: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
20091: CALL_OW 44
20095: PPUSH
20096: LD_INT 0
20098: PPUSH
20099: CALL_OW 51
// end ;
20103: GO 20025
20105: POP
20106: POP
// end ;
20107: PPOPN 1
20109: END
// every 0 0$1 trigger StreamModeActive and sBomb do
20110: LD_EXP 22
20114: PUSH
20115: LD_EXP 42
20119: AND
20120: IFFALSE 20129
20122: GO 20124
20124: DISABLE
// StreamSibBomb ;
20125: CALL 20130 0 0
20129: END
// export function StreamSibBomb ; var i , x , y ; begin
20130: LD_INT 0
20132: PPUSH
20133: PPUSH
20134: PPUSH
20135: PPUSH
// result := false ;
20136: LD_ADDR_VAR 0 1
20140: PUSH
20141: LD_INT 0
20143: ST_TO_ADDR
// for i := 1 to 16 do
20144: LD_ADDR_VAR 0 2
20148: PUSH
20149: DOUBLE
20150: LD_INT 1
20152: DEC
20153: ST_TO_ADDR
20154: LD_INT 16
20156: PUSH
20157: FOR_TO
20158: IFFALSE 20357
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20160: LD_ADDR_VAR 0 3
20164: PUSH
20165: LD_INT 10
20167: PUSH
20168: LD_INT 20
20170: PUSH
20171: LD_INT 30
20173: PUSH
20174: LD_INT 40
20176: PUSH
20177: LD_INT 50
20179: PUSH
20180: LD_INT 60
20182: PUSH
20183: LD_INT 70
20185: PUSH
20186: LD_INT 80
20188: PUSH
20189: LD_INT 90
20191: PUSH
20192: LD_INT 100
20194: PUSH
20195: LD_INT 110
20197: PUSH
20198: LD_INT 120
20200: PUSH
20201: LD_INT 130
20203: PUSH
20204: LD_INT 140
20206: PUSH
20207: LD_INT 150
20209: PUSH
20210: EMPTY
20211: LIST
20212: LIST
20213: LIST
20214: LIST
20215: LIST
20216: LIST
20217: LIST
20218: LIST
20219: LIST
20220: LIST
20221: LIST
20222: LIST
20223: LIST
20224: LIST
20225: LIST
20226: PUSH
20227: LD_INT 1
20229: PPUSH
20230: LD_INT 15
20232: PPUSH
20233: CALL_OW 12
20237: ARRAY
20238: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20239: LD_ADDR_VAR 0 4
20243: PUSH
20244: LD_INT 10
20246: PUSH
20247: LD_INT 20
20249: PUSH
20250: LD_INT 30
20252: PUSH
20253: LD_INT 40
20255: PUSH
20256: LD_INT 50
20258: PUSH
20259: LD_INT 60
20261: PUSH
20262: LD_INT 70
20264: PUSH
20265: LD_INT 80
20267: PUSH
20268: LD_INT 90
20270: PUSH
20271: LD_INT 100
20273: PUSH
20274: LD_INT 110
20276: PUSH
20277: LD_INT 120
20279: PUSH
20280: LD_INT 130
20282: PUSH
20283: LD_INT 140
20285: PUSH
20286: LD_INT 150
20288: PUSH
20289: EMPTY
20290: LIST
20291: LIST
20292: LIST
20293: LIST
20294: LIST
20295: LIST
20296: LIST
20297: LIST
20298: LIST
20299: LIST
20300: LIST
20301: LIST
20302: LIST
20303: LIST
20304: LIST
20305: PUSH
20306: LD_INT 1
20308: PPUSH
20309: LD_INT 15
20311: PPUSH
20312: CALL_OW 12
20316: ARRAY
20317: ST_TO_ADDR
// if ValidHex ( x , y ) then
20318: LD_VAR 0 3
20322: PPUSH
20323: LD_VAR 0 4
20327: PPUSH
20328: CALL_OW 488
20332: IFFALSE 20355
// begin result := [ x , y ] ;
20334: LD_ADDR_VAR 0 1
20338: PUSH
20339: LD_VAR 0 3
20343: PUSH
20344: LD_VAR 0 4
20348: PUSH
20349: EMPTY
20350: LIST
20351: LIST
20352: ST_TO_ADDR
// break ;
20353: GO 20357
// end ; end ;
20355: GO 20157
20357: POP
20358: POP
// if result then
20359: LD_VAR 0 1
20363: IFFALSE 20423
// begin ToLua ( playSibBomb() ) ;
20365: LD_STRING playSibBomb()
20367: PPUSH
20368: CALL_OW 559
// wait ( 0 0$14 ) ;
20372: LD_INT 490
20374: PPUSH
20375: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
20379: LD_VAR 0 1
20383: PUSH
20384: LD_INT 1
20386: ARRAY
20387: PPUSH
20388: LD_VAR 0 1
20392: PUSH
20393: LD_INT 2
20395: ARRAY
20396: PPUSH
20397: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
20401: LD_VAR 0 1
20405: PUSH
20406: LD_INT 1
20408: ARRAY
20409: PPUSH
20410: LD_VAR 0 1
20414: PUSH
20415: LD_INT 2
20417: ARRAY
20418: PPUSH
20419: CALL_OW 429
// end ; end ;
20423: LD_VAR 0 1
20427: RET
// every 0 0$1 trigger StreamModeActive and sReset do
20428: LD_EXP 22
20432: PUSH
20433: LD_EXP 44
20437: AND
20438: IFFALSE 20450
20440: GO 20442
20442: DISABLE
// YouLost (  ) ;
20443: LD_STRING 
20445: PPUSH
20446: CALL_OW 104
20450: END
// every 0 0$1 trigger StreamModeActive and sFog do
20451: LD_EXP 22
20455: PUSH
20456: LD_EXP 43
20460: AND
20461: IFFALSE 20475
20463: GO 20465
20465: DISABLE
// FogOff ( your_side ) ;
20466: LD_OWVAR 2
20470: PPUSH
20471: CALL_OW 344
20475: END
// every 0 0$1 trigger StreamModeActive and sSun do
20476: LD_EXP 22
20480: PUSH
20481: LD_EXP 45
20485: AND
20486: IFFALSE 20514
20488: GO 20490
20490: DISABLE
// begin solar_recharge_percent := 0 ;
20491: LD_ADDR_OWVAR 79
20495: PUSH
20496: LD_INT 0
20498: ST_TO_ADDR
// wait ( 5 5$00 ) ;
20499: LD_INT 10500
20501: PPUSH
20502: CALL_OW 67
// solar_recharge_percent := 100 ;
20506: LD_ADDR_OWVAR 79
20510: PUSH
20511: LD_INT 100
20513: ST_TO_ADDR
// end ;
20514: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
20515: LD_EXP 22
20519: PUSH
20520: LD_EXP 46
20524: AND
20525: IFFALSE 20764
20527: GO 20529
20529: DISABLE
20530: LD_INT 0
20532: PPUSH
20533: PPUSH
20534: PPUSH
// begin tmp := [ ] ;
20535: LD_ADDR_VAR 0 3
20539: PUSH
20540: EMPTY
20541: ST_TO_ADDR
// for i := 1 to 6 do
20542: LD_ADDR_VAR 0 1
20546: PUSH
20547: DOUBLE
20548: LD_INT 1
20550: DEC
20551: ST_TO_ADDR
20552: LD_INT 6
20554: PUSH
20555: FOR_TO
20556: IFFALSE 20661
// begin uc_nation := nation_nature ;
20558: LD_ADDR_OWVAR 21
20562: PUSH
20563: LD_INT 0
20565: ST_TO_ADDR
// uc_side := 0 ;
20566: LD_ADDR_OWVAR 20
20570: PUSH
20571: LD_INT 0
20573: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20574: LD_ADDR_OWVAR 29
20578: PUSH
20579: LD_INT 12
20581: PUSH
20582: LD_INT 12
20584: PUSH
20585: EMPTY
20586: LIST
20587: LIST
20588: ST_TO_ADDR
// hc_agressivity := 20 ;
20589: LD_ADDR_OWVAR 35
20593: PUSH
20594: LD_INT 20
20596: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
20597: LD_ADDR_OWVAR 28
20601: PUSH
20602: LD_INT 17
20604: ST_TO_ADDR
// hc_gallery :=  ;
20605: LD_ADDR_OWVAR 33
20609: PUSH
20610: LD_STRING 
20612: ST_TO_ADDR
// hc_name :=  ;
20613: LD_ADDR_OWVAR 26
20617: PUSH
20618: LD_STRING 
20620: ST_TO_ADDR
// un := CreateHuman ;
20621: LD_ADDR_VAR 0 2
20625: PUSH
20626: CALL_OW 44
20630: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
20631: LD_VAR 0 2
20635: PPUSH
20636: LD_INT 1
20638: PPUSH
20639: CALL_OW 51
// tmp := tmp ^ un ;
20643: LD_ADDR_VAR 0 3
20647: PUSH
20648: LD_VAR 0 3
20652: PUSH
20653: LD_VAR 0 2
20657: ADD
20658: ST_TO_ADDR
// end ;
20659: GO 20555
20661: POP
20662: POP
// repeat wait ( 0 0$1 ) ;
20663: LD_INT 35
20665: PPUSH
20666: CALL_OW 67
// for un in tmp do
20670: LD_ADDR_VAR 0 2
20674: PUSH
20675: LD_VAR 0 3
20679: PUSH
20680: FOR_IN
20681: IFFALSE 20755
// begin if IsDead ( un ) then
20683: LD_VAR 0 2
20687: PPUSH
20688: CALL_OW 301
20692: IFFALSE 20712
// begin tmp := tmp diff un ;
20694: LD_ADDR_VAR 0 3
20698: PUSH
20699: LD_VAR 0 3
20703: PUSH
20704: LD_VAR 0 2
20708: DIFF
20709: ST_TO_ADDR
// continue ;
20710: GO 20680
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
20712: LD_VAR 0 2
20716: PPUSH
20717: LD_INT 3
20719: PUSH
20720: LD_INT 22
20722: PUSH
20723: LD_INT 0
20725: PUSH
20726: EMPTY
20727: LIST
20728: LIST
20729: PUSH
20730: EMPTY
20731: LIST
20732: LIST
20733: PPUSH
20734: CALL_OW 69
20738: PPUSH
20739: LD_VAR 0 2
20743: PPUSH
20744: CALL_OW 74
20748: PPUSH
20749: CALL_OW 115
// end ;
20753: GO 20680
20755: POP
20756: POP
// until not tmp ;
20757: LD_VAR 0 3
20761: NOT
20762: IFFALSE 20663
// end ;
20764: PPOPN 3
20766: END
// every 0 0$1 trigger StreamModeActive and sTroll do
20767: LD_EXP 22
20771: PUSH
20772: LD_EXP 47
20776: AND
20777: IFFALSE 20831
20779: GO 20781
20781: DISABLE
// begin ToLua ( displayTroll(); ) ;
20782: LD_STRING displayTroll();
20784: PPUSH
20785: CALL_OW 559
// wait ( 3 3$00 ) ;
20789: LD_INT 6300
20791: PPUSH
20792: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20796: LD_STRING hideTroll();
20798: PPUSH
20799: CALL_OW 559
// wait ( 1 1$00 ) ;
20803: LD_INT 2100
20805: PPUSH
20806: CALL_OW 67
// ToLua ( displayTroll(); ) ;
20810: LD_STRING displayTroll();
20812: PPUSH
20813: CALL_OW 559
// wait ( 1 1$00 ) ;
20817: LD_INT 2100
20819: PPUSH
20820: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20824: LD_STRING hideTroll();
20826: PPUSH
20827: CALL_OW 559
// end ;
20831: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
20832: LD_EXP 22
20836: PUSH
20837: LD_EXP 48
20841: AND
20842: IFFALSE 20905
20844: GO 20846
20846: DISABLE
20847: LD_INT 0
20849: PPUSH
// begin p := 0 ;
20850: LD_ADDR_VAR 0 1
20854: PUSH
20855: LD_INT 0
20857: ST_TO_ADDR
// repeat game_speed := 1 ;
20858: LD_ADDR_OWVAR 65
20862: PUSH
20863: LD_INT 1
20865: ST_TO_ADDR
// wait ( 0 0$1 ) ;
20866: LD_INT 35
20868: PPUSH
20869: CALL_OW 67
// p := p + 1 ;
20873: LD_ADDR_VAR 0 1
20877: PUSH
20878: LD_VAR 0 1
20882: PUSH
20883: LD_INT 1
20885: PLUS
20886: ST_TO_ADDR
// until p >= 60 ;
20887: LD_VAR 0 1
20891: PUSH
20892: LD_INT 60
20894: GREATEREQUAL
20895: IFFALSE 20858
// game_speed := 4 ;
20897: LD_ADDR_OWVAR 65
20901: PUSH
20902: LD_INT 4
20904: ST_TO_ADDR
// end ;
20905: PPOPN 1
20907: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
20908: LD_EXP 22
20912: PUSH
20913: LD_EXP 49
20917: AND
20918: IFFALSE 21064
20920: GO 20922
20922: DISABLE
20923: LD_INT 0
20925: PPUSH
20926: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20927: LD_ADDR_VAR 0 1
20931: PUSH
20932: LD_INT 22
20934: PUSH
20935: LD_OWVAR 2
20939: PUSH
20940: EMPTY
20941: LIST
20942: LIST
20943: PUSH
20944: LD_INT 2
20946: PUSH
20947: LD_INT 30
20949: PUSH
20950: LD_INT 0
20952: PUSH
20953: EMPTY
20954: LIST
20955: LIST
20956: PUSH
20957: LD_INT 30
20959: PUSH
20960: LD_INT 1
20962: PUSH
20963: EMPTY
20964: LIST
20965: LIST
20966: PUSH
20967: EMPTY
20968: LIST
20969: LIST
20970: LIST
20971: PUSH
20972: EMPTY
20973: LIST
20974: LIST
20975: PPUSH
20976: CALL_OW 69
20980: ST_TO_ADDR
// if not depot then
20981: LD_VAR 0 1
20985: NOT
20986: IFFALSE 20990
// exit ;
20988: GO 21064
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20990: LD_ADDR_VAR 0 2
20994: PUSH
20995: LD_VAR 0 1
20999: PUSH
21000: LD_INT 1
21002: PPUSH
21003: LD_VAR 0 1
21007: PPUSH
21008: CALL_OW 12
21012: ARRAY
21013: PPUSH
21014: CALL_OW 274
21018: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
21019: LD_VAR 0 2
21023: PPUSH
21024: LD_INT 1
21026: PPUSH
21027: LD_INT 0
21029: PPUSH
21030: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
21034: LD_VAR 0 2
21038: PPUSH
21039: LD_INT 2
21041: PPUSH
21042: LD_INT 0
21044: PPUSH
21045: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
21049: LD_VAR 0 2
21053: PPUSH
21054: LD_INT 3
21056: PPUSH
21057: LD_INT 0
21059: PPUSH
21060: CALL_OW 277
// end ;
21064: PPOPN 2
21066: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
21067: LD_EXP 22
21071: PUSH
21072: LD_EXP 50
21076: AND
21077: IFFALSE 21174
21079: GO 21081
21081: DISABLE
21082: LD_INT 0
21084: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21085: LD_ADDR_VAR 0 1
21089: PUSH
21090: LD_INT 22
21092: PUSH
21093: LD_OWVAR 2
21097: PUSH
21098: EMPTY
21099: LIST
21100: LIST
21101: PUSH
21102: LD_INT 21
21104: PUSH
21105: LD_INT 1
21107: PUSH
21108: EMPTY
21109: LIST
21110: LIST
21111: PUSH
21112: LD_INT 3
21114: PUSH
21115: LD_INT 23
21117: PUSH
21118: LD_INT 0
21120: PUSH
21121: EMPTY
21122: LIST
21123: LIST
21124: PUSH
21125: EMPTY
21126: LIST
21127: LIST
21128: PUSH
21129: EMPTY
21130: LIST
21131: LIST
21132: LIST
21133: PPUSH
21134: CALL_OW 69
21138: ST_TO_ADDR
// if not tmp then
21139: LD_VAR 0 1
21143: NOT
21144: IFFALSE 21148
// exit ;
21146: GO 21174
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
21148: LD_VAR 0 1
21152: PUSH
21153: LD_INT 1
21155: PPUSH
21156: LD_VAR 0 1
21160: PPUSH
21161: CALL_OW 12
21165: ARRAY
21166: PPUSH
21167: LD_INT 200
21169: PPUSH
21170: CALL_OW 234
// end ;
21174: PPOPN 1
21176: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
21177: LD_EXP 22
21181: PUSH
21182: LD_EXP 51
21186: AND
21187: IFFALSE 21266
21189: GO 21191
21191: DISABLE
21192: LD_INT 0
21194: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
21195: LD_ADDR_VAR 0 1
21199: PUSH
21200: LD_INT 22
21202: PUSH
21203: LD_OWVAR 2
21207: PUSH
21208: EMPTY
21209: LIST
21210: LIST
21211: PUSH
21212: LD_INT 21
21214: PUSH
21215: LD_INT 2
21217: PUSH
21218: EMPTY
21219: LIST
21220: LIST
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: PPUSH
21226: CALL_OW 69
21230: ST_TO_ADDR
// if not tmp then
21231: LD_VAR 0 1
21235: NOT
21236: IFFALSE 21240
// exit ;
21238: GO 21266
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
21240: LD_VAR 0 1
21244: PUSH
21245: LD_INT 1
21247: PPUSH
21248: LD_VAR 0 1
21252: PPUSH
21253: CALL_OW 12
21257: ARRAY
21258: PPUSH
21259: LD_INT 60
21261: PPUSH
21262: CALL_OW 234
// end ;
21266: PPOPN 1
21268: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
21269: LD_EXP 22
21273: PUSH
21274: LD_EXP 52
21278: AND
21279: IFFALSE 21378
21281: GO 21283
21283: DISABLE
21284: LD_INT 0
21286: PPUSH
21287: PPUSH
// begin enable ;
21288: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
21289: LD_ADDR_VAR 0 1
21293: PUSH
21294: LD_INT 22
21296: PUSH
21297: LD_OWVAR 2
21301: PUSH
21302: EMPTY
21303: LIST
21304: LIST
21305: PUSH
21306: LD_INT 61
21308: PUSH
21309: EMPTY
21310: LIST
21311: PUSH
21312: LD_INT 33
21314: PUSH
21315: LD_INT 2
21317: PUSH
21318: EMPTY
21319: LIST
21320: LIST
21321: PUSH
21322: EMPTY
21323: LIST
21324: LIST
21325: LIST
21326: PPUSH
21327: CALL_OW 69
21331: ST_TO_ADDR
// if not tmp then
21332: LD_VAR 0 1
21336: NOT
21337: IFFALSE 21341
// exit ;
21339: GO 21378
// for i in tmp do
21341: LD_ADDR_VAR 0 2
21345: PUSH
21346: LD_VAR 0 1
21350: PUSH
21351: FOR_IN
21352: IFFALSE 21376
// if IsControledBy ( i ) then
21354: LD_VAR 0 2
21358: PPUSH
21359: CALL_OW 312
21363: IFFALSE 21374
// ComUnlink ( i ) ;
21365: LD_VAR 0 2
21369: PPUSH
21370: CALL_OW 136
21374: GO 21351
21376: POP
21377: POP
// end ;
21378: PPOPN 2
21380: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
21381: LD_EXP 22
21385: PUSH
21386: LD_EXP 53
21390: AND
21391: IFFALSE 21531
21393: GO 21395
21395: DISABLE
21396: LD_INT 0
21398: PPUSH
21399: PPUSH
// begin ToLua ( displayPowell(); ) ;
21400: LD_STRING displayPowell();
21402: PPUSH
21403: CALL_OW 559
// uc_side := 0 ;
21407: LD_ADDR_OWVAR 20
21411: PUSH
21412: LD_INT 0
21414: ST_TO_ADDR
// uc_nation := 2 ;
21415: LD_ADDR_OWVAR 21
21419: PUSH
21420: LD_INT 2
21422: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
21423: LD_ADDR_OWVAR 37
21427: PUSH
21428: LD_INT 14
21430: ST_TO_ADDR
// vc_engine := engine_siberite ;
21431: LD_ADDR_OWVAR 39
21435: PUSH
21436: LD_INT 3
21438: ST_TO_ADDR
// vc_control := control_apeman ;
21439: LD_ADDR_OWVAR 38
21443: PUSH
21444: LD_INT 5
21446: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
21447: LD_ADDR_OWVAR 40
21451: PUSH
21452: LD_INT 29
21454: ST_TO_ADDR
// un := CreateVehicle ;
21455: LD_ADDR_VAR 0 2
21459: PUSH
21460: CALL_OW 45
21464: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21465: LD_VAR 0 2
21469: PPUSH
21470: LD_INT 1
21472: PPUSH
21473: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21477: LD_INT 35
21479: PPUSH
21480: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21484: LD_VAR 0 2
21488: PPUSH
21489: LD_INT 22
21491: PUSH
21492: LD_OWVAR 2
21496: PUSH
21497: EMPTY
21498: LIST
21499: LIST
21500: PPUSH
21501: CALL_OW 69
21505: PPUSH
21506: LD_VAR 0 2
21510: PPUSH
21511: CALL_OW 74
21515: PPUSH
21516: CALL_OW 115
// until IsDead ( un ) ;
21520: LD_VAR 0 2
21524: PPUSH
21525: CALL_OW 301
21529: IFFALSE 21477
// end ;
21531: PPOPN 2
21533: END
// every 0 0$1 trigger StreamModeActive and sStu do
21534: LD_EXP 22
21538: PUSH
21539: LD_EXP 61
21543: AND
21544: IFFALSE 21560
21546: GO 21548
21548: DISABLE
// begin ToLua ( displayStucuk(); ) ;
21549: LD_STRING displayStucuk();
21551: PPUSH
21552: CALL_OW 559
// ResetFog ;
21556: CALL_OW 335
// end ;
21560: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
21561: LD_EXP 22
21565: PUSH
21566: LD_EXP 54
21570: AND
21571: IFFALSE 21712
21573: GO 21575
21575: DISABLE
21576: LD_INT 0
21578: PPUSH
21579: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21580: LD_ADDR_VAR 0 2
21584: PUSH
21585: LD_INT 22
21587: PUSH
21588: LD_OWVAR 2
21592: PUSH
21593: EMPTY
21594: LIST
21595: LIST
21596: PUSH
21597: LD_INT 21
21599: PUSH
21600: LD_INT 1
21602: PUSH
21603: EMPTY
21604: LIST
21605: LIST
21606: PUSH
21607: EMPTY
21608: LIST
21609: LIST
21610: PPUSH
21611: CALL_OW 69
21615: ST_TO_ADDR
// if not tmp then
21616: LD_VAR 0 2
21620: NOT
21621: IFFALSE 21625
// exit ;
21623: GO 21712
// un := tmp [ rand ( 1 , tmp ) ] ;
21625: LD_ADDR_VAR 0 1
21629: PUSH
21630: LD_VAR 0 2
21634: PUSH
21635: LD_INT 1
21637: PPUSH
21638: LD_VAR 0 2
21642: PPUSH
21643: CALL_OW 12
21647: ARRAY
21648: ST_TO_ADDR
// SetSide ( un , 0 ) ;
21649: LD_VAR 0 1
21653: PPUSH
21654: LD_INT 0
21656: PPUSH
21657: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
21661: LD_VAR 0 1
21665: PPUSH
21666: LD_OWVAR 3
21670: PUSH
21671: LD_VAR 0 1
21675: DIFF
21676: PPUSH
21677: LD_VAR 0 1
21681: PPUSH
21682: CALL_OW 74
21686: PPUSH
21687: CALL_OW 115
// wait ( 0 0$20 ) ;
21691: LD_INT 700
21693: PPUSH
21694: CALL_OW 67
// SetSide ( un , your_side ) ;
21698: LD_VAR 0 1
21702: PPUSH
21703: LD_OWVAR 2
21707: PPUSH
21708: CALL_OW 235
// end ;
21712: PPOPN 2
21714: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
21715: LD_EXP 22
21719: PUSH
21720: LD_EXP 55
21724: AND
21725: IFFALSE 21831
21727: GO 21729
21729: DISABLE
21730: LD_INT 0
21732: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21733: LD_ADDR_VAR 0 1
21737: PUSH
21738: LD_INT 22
21740: PUSH
21741: LD_OWVAR 2
21745: PUSH
21746: EMPTY
21747: LIST
21748: LIST
21749: PUSH
21750: LD_INT 2
21752: PUSH
21753: LD_INT 30
21755: PUSH
21756: LD_INT 0
21758: PUSH
21759: EMPTY
21760: LIST
21761: LIST
21762: PUSH
21763: LD_INT 30
21765: PUSH
21766: LD_INT 1
21768: PUSH
21769: EMPTY
21770: LIST
21771: LIST
21772: PUSH
21773: EMPTY
21774: LIST
21775: LIST
21776: LIST
21777: PUSH
21778: EMPTY
21779: LIST
21780: LIST
21781: PPUSH
21782: CALL_OW 69
21786: ST_TO_ADDR
// if not depot then
21787: LD_VAR 0 1
21791: NOT
21792: IFFALSE 21796
// exit ;
21794: GO 21831
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
21796: LD_VAR 0 1
21800: PUSH
21801: LD_INT 1
21803: ARRAY
21804: PPUSH
21805: CALL_OW 250
21809: PPUSH
21810: LD_VAR 0 1
21814: PUSH
21815: LD_INT 1
21817: ARRAY
21818: PPUSH
21819: CALL_OW 251
21823: PPUSH
21824: LD_INT 70
21826: PPUSH
21827: CALL_OW 495
// end ;
21831: PPOPN 1
21833: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
21834: LD_EXP 22
21838: PUSH
21839: LD_EXP 56
21843: AND
21844: IFFALSE 22055
21846: GO 21848
21848: DISABLE
21849: LD_INT 0
21851: PPUSH
21852: PPUSH
21853: PPUSH
21854: PPUSH
21855: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21856: LD_ADDR_VAR 0 5
21860: PUSH
21861: LD_INT 22
21863: PUSH
21864: LD_OWVAR 2
21868: PUSH
21869: EMPTY
21870: LIST
21871: LIST
21872: PUSH
21873: LD_INT 21
21875: PUSH
21876: LD_INT 1
21878: PUSH
21879: EMPTY
21880: LIST
21881: LIST
21882: PUSH
21883: EMPTY
21884: LIST
21885: LIST
21886: PPUSH
21887: CALL_OW 69
21891: ST_TO_ADDR
// if not tmp then
21892: LD_VAR 0 5
21896: NOT
21897: IFFALSE 21901
// exit ;
21899: GO 22055
// for i in tmp do
21901: LD_ADDR_VAR 0 1
21905: PUSH
21906: LD_VAR 0 5
21910: PUSH
21911: FOR_IN
21912: IFFALSE 22053
// begin d := rand ( 0 , 5 ) ;
21914: LD_ADDR_VAR 0 4
21918: PUSH
21919: LD_INT 0
21921: PPUSH
21922: LD_INT 5
21924: PPUSH
21925: CALL_OW 12
21929: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
21930: LD_ADDR_VAR 0 2
21934: PUSH
21935: LD_VAR 0 1
21939: PPUSH
21940: CALL_OW 250
21944: PPUSH
21945: LD_VAR 0 4
21949: PPUSH
21950: LD_INT 3
21952: PPUSH
21953: LD_INT 12
21955: PPUSH
21956: CALL_OW 12
21960: PPUSH
21961: CALL_OW 272
21965: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
21966: LD_ADDR_VAR 0 3
21970: PUSH
21971: LD_VAR 0 1
21975: PPUSH
21976: CALL_OW 251
21980: PPUSH
21981: LD_VAR 0 4
21985: PPUSH
21986: LD_INT 3
21988: PPUSH
21989: LD_INT 12
21991: PPUSH
21992: CALL_OW 12
21996: PPUSH
21997: CALL_OW 273
22001: ST_TO_ADDR
// if ValidHex ( x , y ) then
22002: LD_VAR 0 2
22006: PPUSH
22007: LD_VAR 0 3
22011: PPUSH
22012: CALL_OW 488
22016: IFFALSE 22051
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
22018: LD_VAR 0 1
22022: PPUSH
22023: LD_VAR 0 2
22027: PPUSH
22028: LD_VAR 0 3
22032: PPUSH
22033: LD_INT 3
22035: PPUSH
22036: LD_INT 6
22038: PPUSH
22039: CALL_OW 12
22043: PPUSH
22044: LD_INT 1
22046: PPUSH
22047: CALL_OW 483
// end ;
22051: GO 21911
22053: POP
22054: POP
// end ;
22055: PPOPN 5
22057: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
22058: LD_EXP 22
22062: PUSH
22063: LD_EXP 57
22067: AND
22068: IFFALSE 22162
22070: GO 22072
22072: DISABLE
22073: LD_INT 0
22075: PPUSH
22076: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
22077: LD_ADDR_VAR 0 2
22081: PUSH
22082: LD_INT 22
22084: PUSH
22085: LD_OWVAR 2
22089: PUSH
22090: EMPTY
22091: LIST
22092: LIST
22093: PUSH
22094: LD_INT 32
22096: PUSH
22097: LD_INT 1
22099: PUSH
22100: EMPTY
22101: LIST
22102: LIST
22103: PUSH
22104: LD_INT 21
22106: PUSH
22107: LD_INT 2
22109: PUSH
22110: EMPTY
22111: LIST
22112: LIST
22113: PUSH
22114: EMPTY
22115: LIST
22116: LIST
22117: LIST
22118: PPUSH
22119: CALL_OW 69
22123: ST_TO_ADDR
// if not tmp then
22124: LD_VAR 0 2
22128: NOT
22129: IFFALSE 22133
// exit ;
22131: GO 22162
// for i in tmp do
22133: LD_ADDR_VAR 0 1
22137: PUSH
22138: LD_VAR 0 2
22142: PUSH
22143: FOR_IN
22144: IFFALSE 22160
// SetFuel ( i , 0 ) ;
22146: LD_VAR 0 1
22150: PPUSH
22151: LD_INT 0
22153: PPUSH
22154: CALL_OW 240
22158: GO 22143
22160: POP
22161: POP
// end ;
22162: PPOPN 2
22164: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
22165: LD_EXP 22
22169: PUSH
22170: LD_EXP 58
22174: AND
22175: IFFALSE 22241
22177: GO 22179
22179: DISABLE
22180: LD_INT 0
22182: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22183: LD_ADDR_VAR 0 1
22187: PUSH
22188: LD_INT 22
22190: PUSH
22191: LD_OWVAR 2
22195: PUSH
22196: EMPTY
22197: LIST
22198: LIST
22199: PUSH
22200: LD_INT 30
22202: PUSH
22203: LD_INT 29
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: PUSH
22210: EMPTY
22211: LIST
22212: LIST
22213: PPUSH
22214: CALL_OW 69
22218: ST_TO_ADDR
// if not tmp then
22219: LD_VAR 0 1
22223: NOT
22224: IFFALSE 22228
// exit ;
22226: GO 22241
// DestroyUnit ( tmp [ 1 ] ) ;
22228: LD_VAR 0 1
22232: PUSH
22233: LD_INT 1
22235: ARRAY
22236: PPUSH
22237: CALL_OW 65
// end ;
22241: PPOPN 1
22243: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
22244: LD_EXP 22
22248: PUSH
22249: LD_EXP 60
22253: AND
22254: IFFALSE 22383
22256: GO 22258
22258: DISABLE
22259: LD_INT 0
22261: PPUSH
// begin uc_side := 0 ;
22262: LD_ADDR_OWVAR 20
22266: PUSH
22267: LD_INT 0
22269: ST_TO_ADDR
// uc_nation := nation_arabian ;
22270: LD_ADDR_OWVAR 21
22274: PUSH
22275: LD_INT 2
22277: ST_TO_ADDR
// hc_gallery :=  ;
22278: LD_ADDR_OWVAR 33
22282: PUSH
22283: LD_STRING 
22285: ST_TO_ADDR
// hc_name :=  ;
22286: LD_ADDR_OWVAR 26
22290: PUSH
22291: LD_STRING 
22293: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
22294: LD_INT 1
22296: PPUSH
22297: LD_INT 11
22299: PPUSH
22300: LD_INT 10
22302: PPUSH
22303: CALL_OW 380
// un := CreateHuman ;
22307: LD_ADDR_VAR 0 1
22311: PUSH
22312: CALL_OW 44
22316: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22317: LD_VAR 0 1
22321: PPUSH
22322: LD_INT 1
22324: PPUSH
22325: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
22329: LD_INT 35
22331: PPUSH
22332: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
22336: LD_VAR 0 1
22340: PPUSH
22341: LD_INT 22
22343: PUSH
22344: LD_OWVAR 2
22348: PUSH
22349: EMPTY
22350: LIST
22351: LIST
22352: PPUSH
22353: CALL_OW 69
22357: PPUSH
22358: LD_VAR 0 1
22362: PPUSH
22363: CALL_OW 74
22367: PPUSH
22368: CALL_OW 115
// until IsDead ( un ) ;
22372: LD_VAR 0 1
22376: PPUSH
22377: CALL_OW 301
22381: IFFALSE 22329
// end ;
22383: PPOPN 1
22385: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
22386: LD_EXP 22
22390: PUSH
22391: LD_EXP 62
22395: AND
22396: IFFALSE 22408
22398: GO 22400
22400: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
22401: LD_STRING earthquake(getX(game), 0, 32)
22403: PPUSH
22404: CALL_OW 559
22408: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
22409: LD_EXP 22
22413: PUSH
22414: LD_EXP 63
22418: AND
22419: IFFALSE 22510
22421: GO 22423
22423: DISABLE
22424: LD_INT 0
22426: PPUSH
// begin enable ;
22427: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
22428: LD_ADDR_VAR 0 1
22432: PUSH
22433: LD_INT 22
22435: PUSH
22436: LD_OWVAR 2
22440: PUSH
22441: EMPTY
22442: LIST
22443: LIST
22444: PUSH
22445: LD_INT 21
22447: PUSH
22448: LD_INT 2
22450: PUSH
22451: EMPTY
22452: LIST
22453: LIST
22454: PUSH
22455: LD_INT 33
22457: PUSH
22458: LD_INT 3
22460: PUSH
22461: EMPTY
22462: LIST
22463: LIST
22464: PUSH
22465: EMPTY
22466: LIST
22467: LIST
22468: LIST
22469: PPUSH
22470: CALL_OW 69
22474: ST_TO_ADDR
// if not tmp then
22475: LD_VAR 0 1
22479: NOT
22480: IFFALSE 22484
// exit ;
22482: GO 22510
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22484: LD_VAR 0 1
22488: PUSH
22489: LD_INT 1
22491: PPUSH
22492: LD_VAR 0 1
22496: PPUSH
22497: CALL_OW 12
22501: ARRAY
22502: PPUSH
22503: LD_INT 1
22505: PPUSH
22506: CALL_OW 234
// end ;
22510: PPOPN 1
22512: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
22513: LD_EXP 22
22517: PUSH
22518: LD_EXP 64
22522: AND
22523: IFFALSE 22664
22525: GO 22527
22527: DISABLE
22528: LD_INT 0
22530: PPUSH
22531: PPUSH
22532: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22533: LD_ADDR_VAR 0 3
22537: PUSH
22538: LD_INT 22
22540: PUSH
22541: LD_OWVAR 2
22545: PUSH
22546: EMPTY
22547: LIST
22548: LIST
22549: PUSH
22550: LD_INT 25
22552: PUSH
22553: LD_INT 1
22555: PUSH
22556: EMPTY
22557: LIST
22558: LIST
22559: PUSH
22560: EMPTY
22561: LIST
22562: LIST
22563: PPUSH
22564: CALL_OW 69
22568: ST_TO_ADDR
// if not tmp then
22569: LD_VAR 0 3
22573: NOT
22574: IFFALSE 22578
// exit ;
22576: GO 22664
// un := tmp [ rand ( 1 , tmp ) ] ;
22578: LD_ADDR_VAR 0 2
22582: PUSH
22583: LD_VAR 0 3
22587: PUSH
22588: LD_INT 1
22590: PPUSH
22591: LD_VAR 0 3
22595: PPUSH
22596: CALL_OW 12
22600: ARRAY
22601: ST_TO_ADDR
// if Crawls ( un ) then
22602: LD_VAR 0 2
22606: PPUSH
22607: CALL_OW 318
22611: IFFALSE 22622
// ComWalk ( un ) ;
22613: LD_VAR 0 2
22617: PPUSH
22618: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
22622: LD_VAR 0 2
22626: PPUSH
22627: LD_INT 9
22629: PPUSH
22630: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
22634: LD_INT 28
22636: PPUSH
22637: LD_OWVAR 2
22641: PPUSH
22642: LD_INT 2
22644: PPUSH
22645: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
22649: LD_INT 29
22651: PPUSH
22652: LD_OWVAR 2
22656: PPUSH
22657: LD_INT 2
22659: PPUSH
22660: CALL_OW 322
// end ;
22664: PPOPN 3
22666: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
22667: LD_EXP 22
22671: PUSH
22672: LD_EXP 65
22676: AND
22677: IFFALSE 22788
22679: GO 22681
22681: DISABLE
22682: LD_INT 0
22684: PPUSH
22685: PPUSH
22686: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22687: LD_ADDR_VAR 0 3
22691: PUSH
22692: LD_INT 22
22694: PUSH
22695: LD_OWVAR 2
22699: PUSH
22700: EMPTY
22701: LIST
22702: LIST
22703: PUSH
22704: LD_INT 25
22706: PUSH
22707: LD_INT 1
22709: PUSH
22710: EMPTY
22711: LIST
22712: LIST
22713: PUSH
22714: EMPTY
22715: LIST
22716: LIST
22717: PPUSH
22718: CALL_OW 69
22722: ST_TO_ADDR
// if not tmp then
22723: LD_VAR 0 3
22727: NOT
22728: IFFALSE 22732
// exit ;
22730: GO 22788
// un := tmp [ rand ( 1 , tmp ) ] ;
22732: LD_ADDR_VAR 0 2
22736: PUSH
22737: LD_VAR 0 3
22741: PUSH
22742: LD_INT 1
22744: PPUSH
22745: LD_VAR 0 3
22749: PPUSH
22750: CALL_OW 12
22754: ARRAY
22755: ST_TO_ADDR
// if Crawls ( un ) then
22756: LD_VAR 0 2
22760: PPUSH
22761: CALL_OW 318
22765: IFFALSE 22776
// ComWalk ( un ) ;
22767: LD_VAR 0 2
22771: PPUSH
22772: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22776: LD_VAR 0 2
22780: PPUSH
22781: LD_INT 8
22783: PPUSH
22784: CALL_OW 336
// end ;
22788: PPOPN 3
22790: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
22791: LD_EXP 22
22795: PUSH
22796: LD_EXP 66
22800: AND
22801: IFFALSE 22945
22803: GO 22805
22805: DISABLE
22806: LD_INT 0
22808: PPUSH
22809: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
22810: LD_ADDR_VAR 0 2
22814: PUSH
22815: LD_INT 22
22817: PUSH
22818: LD_OWVAR 2
22822: PUSH
22823: EMPTY
22824: LIST
22825: LIST
22826: PUSH
22827: LD_INT 21
22829: PUSH
22830: LD_INT 2
22832: PUSH
22833: EMPTY
22834: LIST
22835: LIST
22836: PUSH
22837: LD_INT 2
22839: PUSH
22840: LD_INT 34
22842: PUSH
22843: LD_INT 12
22845: PUSH
22846: EMPTY
22847: LIST
22848: LIST
22849: PUSH
22850: LD_INT 34
22852: PUSH
22853: LD_INT 51
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: PUSH
22860: LD_INT 34
22862: PUSH
22863: LD_INT 32
22865: PUSH
22866: EMPTY
22867: LIST
22868: LIST
22869: PUSH
22870: EMPTY
22871: LIST
22872: LIST
22873: LIST
22874: LIST
22875: PUSH
22876: EMPTY
22877: LIST
22878: LIST
22879: LIST
22880: PPUSH
22881: CALL_OW 69
22885: ST_TO_ADDR
// if not tmp then
22886: LD_VAR 0 2
22890: NOT
22891: IFFALSE 22895
// exit ;
22893: GO 22945
// for i in tmp do
22895: LD_ADDR_VAR 0 1
22899: PUSH
22900: LD_VAR 0 2
22904: PUSH
22905: FOR_IN
22906: IFFALSE 22943
// if GetCargo ( i , mat_artifact ) = 0 then
22908: LD_VAR 0 1
22912: PPUSH
22913: LD_INT 4
22915: PPUSH
22916: CALL_OW 289
22920: PUSH
22921: LD_INT 0
22923: EQUAL
22924: IFFALSE 22941
// SetCargo ( i , mat_siberit , 100 ) ;
22926: LD_VAR 0 1
22930: PPUSH
22931: LD_INT 3
22933: PPUSH
22934: LD_INT 100
22936: PPUSH
22937: CALL_OW 290
22941: GO 22905
22943: POP
22944: POP
// end ;
22945: PPOPN 2
22947: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
22948: LD_EXP 22
22952: PUSH
22953: LD_EXP 67
22957: AND
22958: IFFALSE 23141
22960: GO 22962
22962: DISABLE
22963: LD_INT 0
22965: PPUSH
22966: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22967: LD_ADDR_VAR 0 2
22971: PUSH
22972: LD_INT 22
22974: PUSH
22975: LD_OWVAR 2
22979: PUSH
22980: EMPTY
22981: LIST
22982: LIST
22983: PPUSH
22984: CALL_OW 69
22988: ST_TO_ADDR
// if not tmp then
22989: LD_VAR 0 2
22993: NOT
22994: IFFALSE 22998
// exit ;
22996: GO 23141
// for i := 1 to 2 do
22998: LD_ADDR_VAR 0 1
23002: PUSH
23003: DOUBLE
23004: LD_INT 1
23006: DEC
23007: ST_TO_ADDR
23008: LD_INT 2
23010: PUSH
23011: FOR_TO
23012: IFFALSE 23139
// begin uc_side := your_side ;
23014: LD_ADDR_OWVAR 20
23018: PUSH
23019: LD_OWVAR 2
23023: ST_TO_ADDR
// uc_nation := nation_american ;
23024: LD_ADDR_OWVAR 21
23028: PUSH
23029: LD_INT 1
23031: ST_TO_ADDR
// vc_chassis := us_morphling ;
23032: LD_ADDR_OWVAR 37
23036: PUSH
23037: LD_INT 5
23039: ST_TO_ADDR
// vc_engine := engine_siberite ;
23040: LD_ADDR_OWVAR 39
23044: PUSH
23045: LD_INT 3
23047: ST_TO_ADDR
// vc_control := control_computer ;
23048: LD_ADDR_OWVAR 38
23052: PUSH
23053: LD_INT 3
23055: ST_TO_ADDR
// vc_weapon := us_double_laser ;
23056: LD_ADDR_OWVAR 40
23060: PUSH
23061: LD_INT 10
23063: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
23064: LD_VAR 0 2
23068: PUSH
23069: LD_INT 1
23071: ARRAY
23072: PPUSH
23073: CALL_OW 310
23077: NOT
23078: IFFALSE 23125
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
23080: CALL_OW 45
23084: PPUSH
23085: LD_VAR 0 2
23089: PUSH
23090: LD_INT 1
23092: ARRAY
23093: PPUSH
23094: CALL_OW 250
23098: PPUSH
23099: LD_VAR 0 2
23103: PUSH
23104: LD_INT 1
23106: ARRAY
23107: PPUSH
23108: CALL_OW 251
23112: PPUSH
23113: LD_INT 12
23115: PPUSH
23116: LD_INT 1
23118: PPUSH
23119: CALL_OW 50
23123: GO 23137
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
23125: CALL_OW 45
23129: PPUSH
23130: LD_INT 1
23132: PPUSH
23133: CALL_OW 51
// end ;
23137: GO 23011
23139: POP
23140: POP
// end ;
23141: PPOPN 2
23143: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
23144: LD_EXP 22
23148: PUSH
23149: LD_EXP 68
23153: AND
23154: IFFALSE 23376
23156: GO 23158
23158: DISABLE
23159: LD_INT 0
23161: PPUSH
23162: PPUSH
23163: PPUSH
23164: PPUSH
23165: PPUSH
23166: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23167: LD_ADDR_VAR 0 6
23171: PUSH
23172: LD_INT 22
23174: PUSH
23175: LD_OWVAR 2
23179: PUSH
23180: EMPTY
23181: LIST
23182: LIST
23183: PUSH
23184: LD_INT 21
23186: PUSH
23187: LD_INT 1
23189: PUSH
23190: EMPTY
23191: LIST
23192: LIST
23193: PUSH
23194: LD_INT 3
23196: PUSH
23197: LD_INT 23
23199: PUSH
23200: LD_INT 0
23202: PUSH
23203: EMPTY
23204: LIST
23205: LIST
23206: PUSH
23207: EMPTY
23208: LIST
23209: LIST
23210: PUSH
23211: EMPTY
23212: LIST
23213: LIST
23214: LIST
23215: PPUSH
23216: CALL_OW 69
23220: ST_TO_ADDR
// if not tmp then
23221: LD_VAR 0 6
23225: NOT
23226: IFFALSE 23230
// exit ;
23228: GO 23376
// s1 := rand ( 1 , 4 ) ;
23230: LD_ADDR_VAR 0 2
23234: PUSH
23235: LD_INT 1
23237: PPUSH
23238: LD_INT 4
23240: PPUSH
23241: CALL_OW 12
23245: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
23246: LD_ADDR_VAR 0 4
23250: PUSH
23251: LD_VAR 0 6
23255: PUSH
23256: LD_INT 1
23258: ARRAY
23259: PPUSH
23260: LD_VAR 0 2
23264: PPUSH
23265: CALL_OW 259
23269: ST_TO_ADDR
// if s1 = 1 then
23270: LD_VAR 0 2
23274: PUSH
23275: LD_INT 1
23277: EQUAL
23278: IFFALSE 23298
// s2 := rand ( 2 , 4 ) else
23280: LD_ADDR_VAR 0 3
23284: PUSH
23285: LD_INT 2
23287: PPUSH
23288: LD_INT 4
23290: PPUSH
23291: CALL_OW 12
23295: ST_TO_ADDR
23296: GO 23306
// s2 := 1 ;
23298: LD_ADDR_VAR 0 3
23302: PUSH
23303: LD_INT 1
23305: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
23306: LD_ADDR_VAR 0 5
23310: PUSH
23311: LD_VAR 0 6
23315: PUSH
23316: LD_INT 1
23318: ARRAY
23319: PPUSH
23320: LD_VAR 0 3
23324: PPUSH
23325: CALL_OW 259
23329: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
23330: LD_VAR 0 6
23334: PUSH
23335: LD_INT 1
23337: ARRAY
23338: PPUSH
23339: LD_VAR 0 2
23343: PPUSH
23344: LD_VAR 0 5
23348: PPUSH
23349: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
23353: LD_VAR 0 6
23357: PUSH
23358: LD_INT 1
23360: ARRAY
23361: PPUSH
23362: LD_VAR 0 3
23366: PPUSH
23367: LD_VAR 0 4
23371: PPUSH
23372: CALL_OW 237
// end ;
23376: PPOPN 6
23378: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
23379: LD_EXP 22
23383: PUSH
23384: LD_EXP 69
23388: AND
23389: IFFALSE 23468
23391: GO 23393
23393: DISABLE
23394: LD_INT 0
23396: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
23397: LD_ADDR_VAR 0 1
23401: PUSH
23402: LD_INT 22
23404: PUSH
23405: LD_OWVAR 2
23409: PUSH
23410: EMPTY
23411: LIST
23412: LIST
23413: PUSH
23414: LD_INT 30
23416: PUSH
23417: LD_INT 3
23419: PUSH
23420: EMPTY
23421: LIST
23422: LIST
23423: PUSH
23424: EMPTY
23425: LIST
23426: LIST
23427: PPUSH
23428: CALL_OW 69
23432: ST_TO_ADDR
// if not tmp then
23433: LD_VAR 0 1
23437: NOT
23438: IFFALSE 23442
// exit ;
23440: GO 23468
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
23442: LD_VAR 0 1
23446: PUSH
23447: LD_INT 1
23449: PPUSH
23450: LD_VAR 0 1
23454: PPUSH
23455: CALL_OW 12
23459: ARRAY
23460: PPUSH
23461: LD_INT 1
23463: PPUSH
23464: CALL_OW 234
// end ;
23468: PPOPN 1
23470: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
23471: LD_EXP 22
23475: PUSH
23476: LD_EXP 70
23480: AND
23481: IFFALSE 23593
23483: GO 23485
23485: DISABLE
23486: LD_INT 0
23488: PPUSH
23489: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
23490: LD_ADDR_VAR 0 2
23494: PUSH
23495: LD_INT 22
23497: PUSH
23498: LD_OWVAR 2
23502: PUSH
23503: EMPTY
23504: LIST
23505: LIST
23506: PUSH
23507: LD_INT 2
23509: PUSH
23510: LD_INT 30
23512: PUSH
23513: LD_INT 27
23515: PUSH
23516: EMPTY
23517: LIST
23518: LIST
23519: PUSH
23520: LD_INT 30
23522: PUSH
23523: LD_INT 26
23525: PUSH
23526: EMPTY
23527: LIST
23528: LIST
23529: PUSH
23530: LD_INT 30
23532: PUSH
23533: LD_INT 28
23535: PUSH
23536: EMPTY
23537: LIST
23538: LIST
23539: PUSH
23540: EMPTY
23541: LIST
23542: LIST
23543: LIST
23544: LIST
23545: PUSH
23546: EMPTY
23547: LIST
23548: LIST
23549: PPUSH
23550: CALL_OW 69
23554: ST_TO_ADDR
// if not tmp then
23555: LD_VAR 0 2
23559: NOT
23560: IFFALSE 23564
// exit ;
23562: GO 23593
// for i in tmp do
23564: LD_ADDR_VAR 0 1
23568: PUSH
23569: LD_VAR 0 2
23573: PUSH
23574: FOR_IN
23575: IFFALSE 23591
// SetLives ( i , 1 ) ;
23577: LD_VAR 0 1
23581: PPUSH
23582: LD_INT 1
23584: PPUSH
23585: CALL_OW 234
23589: GO 23574
23591: POP
23592: POP
// end ;
23593: PPOPN 2
23595: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
23596: LD_EXP 22
23600: PUSH
23601: LD_EXP 71
23605: AND
23606: IFFALSE 23893
23608: GO 23610
23610: DISABLE
23611: LD_INT 0
23613: PPUSH
23614: PPUSH
23615: PPUSH
// begin i := rand ( 1 , 7 ) ;
23616: LD_ADDR_VAR 0 1
23620: PUSH
23621: LD_INT 1
23623: PPUSH
23624: LD_INT 7
23626: PPUSH
23627: CALL_OW 12
23631: ST_TO_ADDR
// case i of 1 :
23632: LD_VAR 0 1
23636: PUSH
23637: LD_INT 1
23639: DOUBLE
23640: EQUAL
23641: IFTRUE 23645
23643: GO 23655
23645: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
23646: LD_STRING earthquake(getX(game), 0, 32)
23648: PPUSH
23649: CALL_OW 559
23653: GO 23893
23655: LD_INT 2
23657: DOUBLE
23658: EQUAL
23659: IFTRUE 23663
23661: GO 23677
23663: POP
// begin ToLua ( displayStucuk(); ) ;
23664: LD_STRING displayStucuk();
23666: PPUSH
23667: CALL_OW 559
// ResetFog ;
23671: CALL_OW 335
// end ; 3 :
23675: GO 23893
23677: LD_INT 3
23679: DOUBLE
23680: EQUAL
23681: IFTRUE 23685
23683: GO 23789
23685: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23686: LD_ADDR_VAR 0 2
23690: PUSH
23691: LD_INT 22
23693: PUSH
23694: LD_OWVAR 2
23698: PUSH
23699: EMPTY
23700: LIST
23701: LIST
23702: PUSH
23703: LD_INT 25
23705: PUSH
23706: LD_INT 1
23708: PUSH
23709: EMPTY
23710: LIST
23711: LIST
23712: PUSH
23713: EMPTY
23714: LIST
23715: LIST
23716: PPUSH
23717: CALL_OW 69
23721: ST_TO_ADDR
// if not tmp then
23722: LD_VAR 0 2
23726: NOT
23727: IFFALSE 23731
// exit ;
23729: GO 23893
// un := tmp [ rand ( 1 , tmp ) ] ;
23731: LD_ADDR_VAR 0 3
23735: PUSH
23736: LD_VAR 0 2
23740: PUSH
23741: LD_INT 1
23743: PPUSH
23744: LD_VAR 0 2
23748: PPUSH
23749: CALL_OW 12
23753: ARRAY
23754: ST_TO_ADDR
// if Crawls ( un ) then
23755: LD_VAR 0 3
23759: PPUSH
23760: CALL_OW 318
23764: IFFALSE 23775
// ComWalk ( un ) ;
23766: LD_VAR 0 3
23770: PPUSH
23771: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23775: LD_VAR 0 3
23779: PPUSH
23780: LD_INT 8
23782: PPUSH
23783: CALL_OW 336
// end ; 4 :
23787: GO 23893
23789: LD_INT 4
23791: DOUBLE
23792: EQUAL
23793: IFTRUE 23797
23795: GO 23871
23797: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23798: LD_ADDR_VAR 0 2
23802: PUSH
23803: LD_INT 22
23805: PUSH
23806: LD_OWVAR 2
23810: PUSH
23811: EMPTY
23812: LIST
23813: LIST
23814: PUSH
23815: LD_INT 30
23817: PUSH
23818: LD_INT 29
23820: PUSH
23821: EMPTY
23822: LIST
23823: LIST
23824: PUSH
23825: EMPTY
23826: LIST
23827: LIST
23828: PPUSH
23829: CALL_OW 69
23833: ST_TO_ADDR
// if not tmp then
23834: LD_VAR 0 2
23838: NOT
23839: IFFALSE 23843
// exit ;
23841: GO 23893
// CenterNowOnUnits ( tmp [ 1 ] ) ;
23843: LD_VAR 0 2
23847: PUSH
23848: LD_INT 1
23850: ARRAY
23851: PPUSH
23852: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
23856: LD_VAR 0 2
23860: PUSH
23861: LD_INT 1
23863: ARRAY
23864: PPUSH
23865: CALL_OW 65
// end ; 5 .. 7 :
23869: GO 23893
23871: LD_INT 5
23873: DOUBLE
23874: GREATEREQUAL
23875: IFFALSE 23883
23877: LD_INT 7
23879: DOUBLE
23880: LESSEQUAL
23881: IFTRUE 23885
23883: GO 23892
23885: POP
// StreamSibBomb ; end ;
23886: CALL 20130 0 0
23890: GO 23893
23892: POP
// end ;
23893: PPOPN 3
23895: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
23896: LD_EXP 22
23900: PUSH
23901: LD_EXP 72
23905: AND
23906: IFFALSE 24062
23908: GO 23910
23910: DISABLE
23911: LD_INT 0
23913: PPUSH
23914: PPUSH
23915: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23916: LD_ADDR_VAR 0 2
23920: PUSH
23921: LD_INT 81
23923: PUSH
23924: LD_OWVAR 2
23928: PUSH
23929: EMPTY
23930: LIST
23931: LIST
23932: PUSH
23933: LD_INT 2
23935: PUSH
23936: LD_INT 21
23938: PUSH
23939: LD_INT 1
23941: PUSH
23942: EMPTY
23943: LIST
23944: LIST
23945: PUSH
23946: LD_INT 21
23948: PUSH
23949: LD_INT 2
23951: PUSH
23952: EMPTY
23953: LIST
23954: LIST
23955: PUSH
23956: EMPTY
23957: LIST
23958: LIST
23959: LIST
23960: PUSH
23961: EMPTY
23962: LIST
23963: LIST
23964: PPUSH
23965: CALL_OW 69
23969: ST_TO_ADDR
// if not tmp then
23970: LD_VAR 0 2
23974: NOT
23975: IFFALSE 23979
// exit ;
23977: GO 24062
// p := 0 ;
23979: LD_ADDR_VAR 0 3
23983: PUSH
23984: LD_INT 0
23986: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23987: LD_INT 35
23989: PPUSH
23990: CALL_OW 67
// p := p + 1 ;
23994: LD_ADDR_VAR 0 3
23998: PUSH
23999: LD_VAR 0 3
24003: PUSH
24004: LD_INT 1
24006: PLUS
24007: ST_TO_ADDR
// for i in tmp do
24008: LD_ADDR_VAR 0 1
24012: PUSH
24013: LD_VAR 0 2
24017: PUSH
24018: FOR_IN
24019: IFFALSE 24050
// if GetLives ( i ) < 1000 then
24021: LD_VAR 0 1
24025: PPUSH
24026: CALL_OW 256
24030: PUSH
24031: LD_INT 1000
24033: LESS
24034: IFFALSE 24048
// SetLives ( i , 1000 ) ;
24036: LD_VAR 0 1
24040: PPUSH
24041: LD_INT 1000
24043: PPUSH
24044: CALL_OW 234
24048: GO 24018
24050: POP
24051: POP
// until p > 20 ;
24052: LD_VAR 0 3
24056: PUSH
24057: LD_INT 20
24059: GREATER
24060: IFFALSE 23987
// end ;
24062: PPOPN 3
24064: END
// every 0 0$1 trigger StreamModeActive and sTime do
24065: LD_EXP 22
24069: PUSH
24070: LD_EXP 73
24074: AND
24075: IFFALSE 24110
24077: GO 24079
24079: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
24080: LD_INT 28
24082: PPUSH
24083: LD_OWVAR 2
24087: PPUSH
24088: LD_INT 2
24090: PPUSH
24091: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
24095: LD_INT 30
24097: PPUSH
24098: LD_OWVAR 2
24102: PPUSH
24103: LD_INT 2
24105: PPUSH
24106: CALL_OW 322
// end ;
24110: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
24111: LD_EXP 22
24115: PUSH
24116: LD_EXP 74
24120: AND
24121: IFFALSE 24242
24123: GO 24125
24125: DISABLE
24126: LD_INT 0
24128: PPUSH
24129: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24130: LD_ADDR_VAR 0 2
24134: PUSH
24135: LD_INT 22
24137: PUSH
24138: LD_OWVAR 2
24142: PUSH
24143: EMPTY
24144: LIST
24145: LIST
24146: PUSH
24147: LD_INT 21
24149: PUSH
24150: LD_INT 1
24152: PUSH
24153: EMPTY
24154: LIST
24155: LIST
24156: PUSH
24157: LD_INT 3
24159: PUSH
24160: LD_INT 23
24162: PUSH
24163: LD_INT 0
24165: PUSH
24166: EMPTY
24167: LIST
24168: LIST
24169: PUSH
24170: EMPTY
24171: LIST
24172: LIST
24173: PUSH
24174: EMPTY
24175: LIST
24176: LIST
24177: LIST
24178: PPUSH
24179: CALL_OW 69
24183: ST_TO_ADDR
// if not tmp then
24184: LD_VAR 0 2
24188: NOT
24189: IFFALSE 24193
// exit ;
24191: GO 24242
// for i in tmp do
24193: LD_ADDR_VAR 0 1
24197: PUSH
24198: LD_VAR 0 2
24202: PUSH
24203: FOR_IN
24204: IFFALSE 24240
// begin if Crawls ( i ) then
24206: LD_VAR 0 1
24210: PPUSH
24211: CALL_OW 318
24215: IFFALSE 24226
// ComWalk ( i ) ;
24217: LD_VAR 0 1
24221: PPUSH
24222: CALL_OW 138
// SetClass ( i , 2 ) ;
24226: LD_VAR 0 1
24230: PPUSH
24231: LD_INT 2
24233: PPUSH
24234: CALL_OW 336
// end ;
24238: GO 24203
24240: POP
24241: POP
// end ;
24242: PPOPN 2
24244: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
24245: LD_EXP 22
24249: PUSH
24250: LD_EXP 75
24254: AND
24255: IFFALSE 24543
24257: GO 24259
24259: DISABLE
24260: LD_INT 0
24262: PPUSH
24263: PPUSH
24264: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
24265: LD_OWVAR 2
24269: PPUSH
24270: LD_INT 9
24272: PPUSH
24273: LD_INT 1
24275: PPUSH
24276: LD_INT 1
24278: PPUSH
24279: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
24283: LD_INT 9
24285: PPUSH
24286: LD_OWVAR 2
24290: PPUSH
24291: CALL_OW 343
// uc_side := 9 ;
24295: LD_ADDR_OWVAR 20
24299: PUSH
24300: LD_INT 9
24302: ST_TO_ADDR
// uc_nation := 2 ;
24303: LD_ADDR_OWVAR 21
24307: PUSH
24308: LD_INT 2
24310: ST_TO_ADDR
// hc_name := Dark Warrior ;
24311: LD_ADDR_OWVAR 26
24315: PUSH
24316: LD_STRING Dark Warrior
24318: ST_TO_ADDR
// hc_gallery :=  ;
24319: LD_ADDR_OWVAR 33
24323: PUSH
24324: LD_STRING 
24326: ST_TO_ADDR
// hc_noskilllimit := true ;
24327: LD_ADDR_OWVAR 76
24331: PUSH
24332: LD_INT 1
24334: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
24335: LD_ADDR_OWVAR 31
24339: PUSH
24340: LD_INT 30
24342: PUSH
24343: LD_INT 30
24345: PUSH
24346: LD_INT 30
24348: PUSH
24349: LD_INT 30
24351: PUSH
24352: EMPTY
24353: LIST
24354: LIST
24355: LIST
24356: LIST
24357: ST_TO_ADDR
// un := CreateHuman ;
24358: LD_ADDR_VAR 0 3
24362: PUSH
24363: CALL_OW 44
24367: ST_TO_ADDR
// hc_noskilllimit := false ;
24368: LD_ADDR_OWVAR 76
24372: PUSH
24373: LD_INT 0
24375: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24376: LD_VAR 0 3
24380: PPUSH
24381: LD_INT 1
24383: PPUSH
24384: CALL_OW 51
// ToLua ( playRanger() ) ;
24388: LD_STRING playRanger()
24390: PPUSH
24391: CALL_OW 559
// p := 0 ;
24395: LD_ADDR_VAR 0 2
24399: PUSH
24400: LD_INT 0
24402: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24403: LD_INT 35
24405: PPUSH
24406: CALL_OW 67
// p := p + 1 ;
24410: LD_ADDR_VAR 0 2
24414: PUSH
24415: LD_VAR 0 2
24419: PUSH
24420: LD_INT 1
24422: PLUS
24423: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
24424: LD_VAR 0 3
24428: PPUSH
24429: CALL_OW 256
24433: PUSH
24434: LD_INT 1000
24436: LESS
24437: IFFALSE 24451
// SetLives ( un , 1000 ) ;
24439: LD_VAR 0 3
24443: PPUSH
24444: LD_INT 1000
24446: PPUSH
24447: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
24451: LD_VAR 0 3
24455: PPUSH
24456: LD_INT 81
24458: PUSH
24459: LD_OWVAR 2
24463: PUSH
24464: EMPTY
24465: LIST
24466: LIST
24467: PUSH
24468: LD_INT 91
24470: PUSH
24471: LD_VAR 0 3
24475: PUSH
24476: LD_INT 30
24478: PUSH
24479: EMPTY
24480: LIST
24481: LIST
24482: LIST
24483: PUSH
24484: EMPTY
24485: LIST
24486: LIST
24487: PPUSH
24488: CALL_OW 69
24492: PPUSH
24493: LD_VAR 0 3
24497: PPUSH
24498: CALL_OW 74
24502: PPUSH
24503: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
24507: LD_VAR 0 2
24511: PUSH
24512: LD_INT 80
24514: GREATER
24515: PUSH
24516: LD_VAR 0 3
24520: PPUSH
24521: CALL_OW 301
24525: OR
24526: IFFALSE 24403
// if un then
24528: LD_VAR 0 3
24532: IFFALSE 24543
// RemoveUnit ( un ) ;
24534: LD_VAR 0 3
24538: PPUSH
24539: CALL_OW 64
// end ;
24543: PPOPN 3
24545: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
24546: LD_EXP 76
24550: IFFALSE 24666
24552: GO 24554
24554: DISABLE
24555: LD_INT 0
24557: PPUSH
24558: PPUSH
24559: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24560: LD_ADDR_VAR 0 2
24564: PUSH
24565: LD_INT 81
24567: PUSH
24568: LD_OWVAR 2
24572: PUSH
24573: EMPTY
24574: LIST
24575: LIST
24576: PUSH
24577: LD_INT 21
24579: PUSH
24580: LD_INT 1
24582: PUSH
24583: EMPTY
24584: LIST
24585: LIST
24586: PUSH
24587: EMPTY
24588: LIST
24589: LIST
24590: PPUSH
24591: CALL_OW 69
24595: ST_TO_ADDR
// ToLua ( playComputer() ) ;
24596: LD_STRING playComputer()
24598: PPUSH
24599: CALL_OW 559
// if not tmp then
24603: LD_VAR 0 2
24607: NOT
24608: IFFALSE 24612
// exit ;
24610: GO 24666
// for i in tmp do
24612: LD_ADDR_VAR 0 1
24616: PUSH
24617: LD_VAR 0 2
24621: PUSH
24622: FOR_IN
24623: IFFALSE 24664
// for j := 1 to 4 do
24625: LD_ADDR_VAR 0 3
24629: PUSH
24630: DOUBLE
24631: LD_INT 1
24633: DEC
24634: ST_TO_ADDR
24635: LD_INT 4
24637: PUSH
24638: FOR_TO
24639: IFFALSE 24660
// SetSkill ( i , j , 10 ) ;
24641: LD_VAR 0 1
24645: PPUSH
24646: LD_VAR 0 3
24650: PPUSH
24651: LD_INT 10
24653: PPUSH
24654: CALL_OW 237
24658: GO 24638
24660: POP
24661: POP
24662: GO 24622
24664: POP
24665: POP
// end ;
24666: PPOPN 3
24668: END
// every 0 0$1 trigger s30 do var i , tmp ;
24669: LD_EXP 77
24673: IFFALSE 24742
24675: GO 24677
24677: DISABLE
24678: LD_INT 0
24680: PPUSH
24681: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24682: LD_ADDR_VAR 0 2
24686: PUSH
24687: LD_INT 22
24689: PUSH
24690: LD_OWVAR 2
24694: PUSH
24695: EMPTY
24696: LIST
24697: LIST
24698: PPUSH
24699: CALL_OW 69
24703: ST_TO_ADDR
// if not tmp then
24704: LD_VAR 0 2
24708: NOT
24709: IFFALSE 24713
// exit ;
24711: GO 24742
// for i in tmp do
24713: LD_ADDR_VAR 0 1
24717: PUSH
24718: LD_VAR 0 2
24722: PUSH
24723: FOR_IN
24724: IFFALSE 24740
// SetLives ( i , 300 ) ;
24726: LD_VAR 0 1
24730: PPUSH
24731: LD_INT 300
24733: PPUSH
24734: CALL_OW 234
24738: GO 24723
24740: POP
24741: POP
// end ;
24742: PPOPN 2
24744: END
// every 0 0$1 trigger s60 do var i , tmp ;
24745: LD_EXP 78
24749: IFFALSE 24818
24751: GO 24753
24753: DISABLE
24754: LD_INT 0
24756: PPUSH
24757: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24758: LD_ADDR_VAR 0 2
24762: PUSH
24763: LD_INT 22
24765: PUSH
24766: LD_OWVAR 2
24770: PUSH
24771: EMPTY
24772: LIST
24773: LIST
24774: PPUSH
24775: CALL_OW 69
24779: ST_TO_ADDR
// if not tmp then
24780: LD_VAR 0 2
24784: NOT
24785: IFFALSE 24789
// exit ;
24787: GO 24818
// for i in tmp do
24789: LD_ADDR_VAR 0 1
24793: PUSH
24794: LD_VAR 0 2
24798: PUSH
24799: FOR_IN
24800: IFFALSE 24816
// SetLives ( i , 600 ) ;
24802: LD_VAR 0 1
24806: PPUSH
24807: LD_INT 600
24809: PPUSH
24810: CALL_OW 234
24814: GO 24799
24816: POP
24817: POP
// end ;
24818: PPOPN 2
24820: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
24821: LD_INT 0
24823: PPUSH
// case cmd of 301 :
24824: LD_VAR 0 1
24828: PUSH
24829: LD_INT 301
24831: DOUBLE
24832: EQUAL
24833: IFTRUE 24837
24835: GO 24869
24837: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
24838: LD_VAR 0 6
24842: PPUSH
24843: LD_VAR 0 7
24847: PPUSH
24848: LD_VAR 0 8
24852: PPUSH
24853: LD_VAR 0 4
24857: PPUSH
24858: LD_VAR 0 5
24862: PPUSH
24863: CALL 26078 0 5
24867: GO 24990
24869: LD_INT 302
24871: DOUBLE
24872: EQUAL
24873: IFTRUE 24877
24875: GO 24914
24877: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
24878: LD_VAR 0 6
24882: PPUSH
24883: LD_VAR 0 7
24887: PPUSH
24888: LD_VAR 0 8
24892: PPUSH
24893: LD_VAR 0 9
24897: PPUSH
24898: LD_VAR 0 4
24902: PPUSH
24903: LD_VAR 0 5
24907: PPUSH
24908: CALL 26169 0 6
24912: GO 24990
24914: LD_INT 303
24916: DOUBLE
24917: EQUAL
24918: IFTRUE 24922
24920: GO 24959
24922: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
24923: LD_VAR 0 6
24927: PPUSH
24928: LD_VAR 0 7
24932: PPUSH
24933: LD_VAR 0 8
24937: PPUSH
24938: LD_VAR 0 9
24942: PPUSH
24943: LD_VAR 0 4
24947: PPUSH
24948: LD_VAR 0 5
24952: PPUSH
24953: CALL 24995 0 6
24957: GO 24990
24959: LD_INT 304
24961: DOUBLE
24962: EQUAL
24963: IFTRUE 24967
24965: GO 24989
24967: POP
// hHackTeleport ( unit , x , y ) ; end ;
24968: LD_VAR 0 2
24972: PPUSH
24973: LD_VAR 0 4
24977: PPUSH
24978: LD_VAR 0 5
24982: PPUSH
24983: CALL 26762 0 3
24987: GO 24990
24989: POP
// end ;
24990: LD_VAR 0 12
24994: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
24995: LD_INT 0
24997: PPUSH
24998: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
24999: LD_VAR 0 1
25003: PUSH
25004: LD_INT 1
25006: LESS
25007: PUSH
25008: LD_VAR 0 1
25012: PUSH
25013: LD_INT 3
25015: GREATER
25016: OR
25017: PUSH
25018: LD_VAR 0 5
25022: PPUSH
25023: LD_VAR 0 6
25027: PPUSH
25028: CALL_OW 428
25032: OR
25033: IFFALSE 25037
// exit ;
25035: GO 25765
// uc_side := your_side ;
25037: LD_ADDR_OWVAR 20
25041: PUSH
25042: LD_OWVAR 2
25046: ST_TO_ADDR
// uc_nation := nation ;
25047: LD_ADDR_OWVAR 21
25051: PUSH
25052: LD_VAR 0 1
25056: ST_TO_ADDR
// bc_level = 1 ;
25057: LD_ADDR_OWVAR 43
25061: PUSH
25062: LD_INT 1
25064: ST_TO_ADDR
// case btype of 1 :
25065: LD_VAR 0 2
25069: PUSH
25070: LD_INT 1
25072: DOUBLE
25073: EQUAL
25074: IFTRUE 25078
25076: GO 25089
25078: POP
// bc_type := b_depot ; 2 :
25079: LD_ADDR_OWVAR 42
25083: PUSH
25084: LD_INT 0
25086: ST_TO_ADDR
25087: GO 25709
25089: LD_INT 2
25091: DOUBLE
25092: EQUAL
25093: IFTRUE 25097
25095: GO 25108
25097: POP
// bc_type := b_warehouse ; 3 :
25098: LD_ADDR_OWVAR 42
25102: PUSH
25103: LD_INT 1
25105: ST_TO_ADDR
25106: GO 25709
25108: LD_INT 3
25110: DOUBLE
25111: EQUAL
25112: IFTRUE 25116
25114: GO 25127
25116: POP
// bc_type := b_lab ; 4 .. 9 :
25117: LD_ADDR_OWVAR 42
25121: PUSH
25122: LD_INT 6
25124: ST_TO_ADDR
25125: GO 25709
25127: LD_INT 4
25129: DOUBLE
25130: GREATEREQUAL
25131: IFFALSE 25139
25133: LD_INT 9
25135: DOUBLE
25136: LESSEQUAL
25137: IFTRUE 25141
25139: GO 25201
25141: POP
// begin bc_type := b_lab_half ;
25142: LD_ADDR_OWVAR 42
25146: PUSH
25147: LD_INT 7
25149: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
25150: LD_ADDR_OWVAR 44
25154: PUSH
25155: LD_INT 10
25157: PUSH
25158: LD_INT 11
25160: PUSH
25161: LD_INT 12
25163: PUSH
25164: LD_INT 15
25166: PUSH
25167: LD_INT 14
25169: PUSH
25170: LD_INT 13
25172: PUSH
25173: EMPTY
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: PUSH
25181: LD_VAR 0 2
25185: PUSH
25186: LD_INT 3
25188: MINUS
25189: ARRAY
25190: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
25191: LD_ADDR_OWVAR 45
25195: PUSH
25196: LD_INT 9
25198: ST_TO_ADDR
// end ; 10 .. 13 :
25199: GO 25709
25201: LD_INT 10
25203: DOUBLE
25204: GREATEREQUAL
25205: IFFALSE 25213
25207: LD_INT 13
25209: DOUBLE
25210: LESSEQUAL
25211: IFTRUE 25215
25213: GO 25292
25215: POP
// begin bc_type := b_lab_full ;
25216: LD_ADDR_OWVAR 42
25220: PUSH
25221: LD_INT 8
25223: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
25224: LD_ADDR_OWVAR 44
25228: PUSH
25229: LD_INT 10
25231: PUSH
25232: LD_INT 12
25234: PUSH
25235: LD_INT 14
25237: PUSH
25238: LD_INT 13
25240: PUSH
25241: EMPTY
25242: LIST
25243: LIST
25244: LIST
25245: LIST
25246: PUSH
25247: LD_VAR 0 2
25251: PUSH
25252: LD_INT 9
25254: MINUS
25255: ARRAY
25256: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
25257: LD_ADDR_OWVAR 45
25261: PUSH
25262: LD_INT 11
25264: PUSH
25265: LD_INT 15
25267: PUSH
25268: LD_INT 12
25270: PUSH
25271: LD_INT 15
25273: PUSH
25274: EMPTY
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: PUSH
25280: LD_VAR 0 2
25284: PUSH
25285: LD_INT 9
25287: MINUS
25288: ARRAY
25289: ST_TO_ADDR
// end ; 14 :
25290: GO 25709
25292: LD_INT 14
25294: DOUBLE
25295: EQUAL
25296: IFTRUE 25300
25298: GO 25311
25300: POP
// bc_type := b_workshop ; 15 :
25301: LD_ADDR_OWVAR 42
25305: PUSH
25306: LD_INT 2
25308: ST_TO_ADDR
25309: GO 25709
25311: LD_INT 15
25313: DOUBLE
25314: EQUAL
25315: IFTRUE 25319
25317: GO 25330
25319: POP
// bc_type := b_factory ; 16 :
25320: LD_ADDR_OWVAR 42
25324: PUSH
25325: LD_INT 3
25327: ST_TO_ADDR
25328: GO 25709
25330: LD_INT 16
25332: DOUBLE
25333: EQUAL
25334: IFTRUE 25338
25336: GO 25349
25338: POP
// bc_type := b_ext_gun ; 17 :
25339: LD_ADDR_OWVAR 42
25343: PUSH
25344: LD_INT 17
25346: ST_TO_ADDR
25347: GO 25709
25349: LD_INT 17
25351: DOUBLE
25352: EQUAL
25353: IFTRUE 25357
25355: GO 25385
25357: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
25358: LD_ADDR_OWVAR 42
25362: PUSH
25363: LD_INT 19
25365: PUSH
25366: LD_INT 23
25368: PUSH
25369: LD_INT 19
25371: PUSH
25372: EMPTY
25373: LIST
25374: LIST
25375: LIST
25376: PUSH
25377: LD_VAR 0 1
25381: ARRAY
25382: ST_TO_ADDR
25383: GO 25709
25385: LD_INT 18
25387: DOUBLE
25388: EQUAL
25389: IFTRUE 25393
25391: GO 25404
25393: POP
// bc_type := b_ext_radar ; 19 :
25394: LD_ADDR_OWVAR 42
25398: PUSH
25399: LD_INT 20
25401: ST_TO_ADDR
25402: GO 25709
25404: LD_INT 19
25406: DOUBLE
25407: EQUAL
25408: IFTRUE 25412
25410: GO 25423
25412: POP
// bc_type := b_ext_radio ; 20 :
25413: LD_ADDR_OWVAR 42
25417: PUSH
25418: LD_INT 22
25420: ST_TO_ADDR
25421: GO 25709
25423: LD_INT 20
25425: DOUBLE
25426: EQUAL
25427: IFTRUE 25431
25429: GO 25442
25431: POP
// bc_type := b_ext_siberium ; 21 :
25432: LD_ADDR_OWVAR 42
25436: PUSH
25437: LD_INT 21
25439: ST_TO_ADDR
25440: GO 25709
25442: LD_INT 21
25444: DOUBLE
25445: EQUAL
25446: IFTRUE 25450
25448: GO 25461
25450: POP
// bc_type := b_ext_computer ; 22 :
25451: LD_ADDR_OWVAR 42
25455: PUSH
25456: LD_INT 24
25458: ST_TO_ADDR
25459: GO 25709
25461: LD_INT 22
25463: DOUBLE
25464: EQUAL
25465: IFTRUE 25469
25467: GO 25480
25469: POP
// bc_type := b_ext_track ; 23 :
25470: LD_ADDR_OWVAR 42
25474: PUSH
25475: LD_INT 16
25477: ST_TO_ADDR
25478: GO 25709
25480: LD_INT 23
25482: DOUBLE
25483: EQUAL
25484: IFTRUE 25488
25486: GO 25499
25488: POP
// bc_type := b_ext_laser ; 24 :
25489: LD_ADDR_OWVAR 42
25493: PUSH
25494: LD_INT 25
25496: ST_TO_ADDR
25497: GO 25709
25499: LD_INT 24
25501: DOUBLE
25502: EQUAL
25503: IFTRUE 25507
25505: GO 25518
25507: POP
// bc_type := b_control_tower ; 25 :
25508: LD_ADDR_OWVAR 42
25512: PUSH
25513: LD_INT 36
25515: ST_TO_ADDR
25516: GO 25709
25518: LD_INT 25
25520: DOUBLE
25521: EQUAL
25522: IFTRUE 25526
25524: GO 25537
25526: POP
// bc_type := b_breastwork ; 26 :
25527: LD_ADDR_OWVAR 42
25531: PUSH
25532: LD_INT 31
25534: ST_TO_ADDR
25535: GO 25709
25537: LD_INT 26
25539: DOUBLE
25540: EQUAL
25541: IFTRUE 25545
25543: GO 25556
25545: POP
// bc_type := b_bunker ; 27 :
25546: LD_ADDR_OWVAR 42
25550: PUSH
25551: LD_INT 32
25553: ST_TO_ADDR
25554: GO 25709
25556: LD_INT 27
25558: DOUBLE
25559: EQUAL
25560: IFTRUE 25564
25562: GO 25575
25564: POP
// bc_type := b_turret ; 28 :
25565: LD_ADDR_OWVAR 42
25569: PUSH
25570: LD_INT 33
25572: ST_TO_ADDR
25573: GO 25709
25575: LD_INT 28
25577: DOUBLE
25578: EQUAL
25579: IFTRUE 25583
25581: GO 25594
25583: POP
// bc_type := b_armoury ; 29 :
25584: LD_ADDR_OWVAR 42
25588: PUSH
25589: LD_INT 4
25591: ST_TO_ADDR
25592: GO 25709
25594: LD_INT 29
25596: DOUBLE
25597: EQUAL
25598: IFTRUE 25602
25600: GO 25613
25602: POP
// bc_type := b_barracks ; 30 :
25603: LD_ADDR_OWVAR 42
25607: PUSH
25608: LD_INT 5
25610: ST_TO_ADDR
25611: GO 25709
25613: LD_INT 30
25615: DOUBLE
25616: EQUAL
25617: IFTRUE 25621
25619: GO 25632
25621: POP
// bc_type := b_solar_power ; 31 :
25622: LD_ADDR_OWVAR 42
25626: PUSH
25627: LD_INT 27
25629: ST_TO_ADDR
25630: GO 25709
25632: LD_INT 31
25634: DOUBLE
25635: EQUAL
25636: IFTRUE 25640
25638: GO 25651
25640: POP
// bc_type := b_oil_power ; 32 :
25641: LD_ADDR_OWVAR 42
25645: PUSH
25646: LD_INT 26
25648: ST_TO_ADDR
25649: GO 25709
25651: LD_INT 32
25653: DOUBLE
25654: EQUAL
25655: IFTRUE 25659
25657: GO 25670
25659: POP
// bc_type := b_siberite_power ; 33 :
25660: LD_ADDR_OWVAR 42
25664: PUSH
25665: LD_INT 28
25667: ST_TO_ADDR
25668: GO 25709
25670: LD_INT 33
25672: DOUBLE
25673: EQUAL
25674: IFTRUE 25678
25676: GO 25689
25678: POP
// bc_type := b_oil_mine ; 34 :
25679: LD_ADDR_OWVAR 42
25683: PUSH
25684: LD_INT 29
25686: ST_TO_ADDR
25687: GO 25709
25689: LD_INT 34
25691: DOUBLE
25692: EQUAL
25693: IFTRUE 25697
25695: GO 25708
25697: POP
// bc_type := b_siberite_mine ; end ;
25698: LD_ADDR_OWVAR 42
25702: PUSH
25703: LD_INT 30
25705: ST_TO_ADDR
25706: GO 25709
25708: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
25709: LD_ADDR_VAR 0 8
25713: PUSH
25714: LD_VAR 0 5
25718: PPUSH
25719: LD_VAR 0 6
25723: PPUSH
25724: LD_VAR 0 3
25728: PPUSH
25729: CALL_OW 47
25733: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
25734: LD_OWVAR 42
25738: PUSH
25739: LD_INT 32
25741: PUSH
25742: LD_INT 33
25744: PUSH
25745: EMPTY
25746: LIST
25747: LIST
25748: IN
25749: IFFALSE 25765
// PlaceWeaponTurret ( b , weapon ) ;
25751: LD_VAR 0 8
25755: PPUSH
25756: LD_VAR 0 4
25760: PPUSH
25761: CALL_OW 431
// end ;
25765: LD_VAR 0 7
25769: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
25770: LD_INT 0
25772: PPUSH
25773: PPUSH
25774: PPUSH
25775: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25776: LD_ADDR_VAR 0 4
25780: PUSH
25781: LD_INT 22
25783: PUSH
25784: LD_OWVAR 2
25788: PUSH
25789: EMPTY
25790: LIST
25791: LIST
25792: PUSH
25793: LD_INT 2
25795: PUSH
25796: LD_INT 30
25798: PUSH
25799: LD_INT 0
25801: PUSH
25802: EMPTY
25803: LIST
25804: LIST
25805: PUSH
25806: LD_INT 30
25808: PUSH
25809: LD_INT 1
25811: PUSH
25812: EMPTY
25813: LIST
25814: LIST
25815: PUSH
25816: EMPTY
25817: LIST
25818: LIST
25819: LIST
25820: PUSH
25821: EMPTY
25822: LIST
25823: LIST
25824: PPUSH
25825: CALL_OW 69
25829: ST_TO_ADDR
// if not tmp then
25830: LD_VAR 0 4
25834: NOT
25835: IFFALSE 25839
// exit ;
25837: GO 25898
// for i in tmp do
25839: LD_ADDR_VAR 0 2
25843: PUSH
25844: LD_VAR 0 4
25848: PUSH
25849: FOR_IN
25850: IFFALSE 25896
// for j = 1 to 3 do
25852: LD_ADDR_VAR 0 3
25856: PUSH
25857: DOUBLE
25858: LD_INT 1
25860: DEC
25861: ST_TO_ADDR
25862: LD_INT 3
25864: PUSH
25865: FOR_TO
25866: IFFALSE 25892
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
25868: LD_VAR 0 2
25872: PPUSH
25873: CALL_OW 274
25877: PPUSH
25878: LD_VAR 0 3
25882: PPUSH
25883: LD_INT 99999
25885: PPUSH
25886: CALL_OW 277
25890: GO 25865
25892: POP
25893: POP
25894: GO 25849
25896: POP
25897: POP
// end ;
25898: LD_VAR 0 1
25902: RET
// export function hHackSetLevel10 ; var i , j ; begin
25903: LD_INT 0
25905: PPUSH
25906: PPUSH
25907: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25908: LD_ADDR_VAR 0 2
25912: PUSH
25913: LD_INT 21
25915: PUSH
25916: LD_INT 1
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: PPUSH
25923: CALL_OW 69
25927: PUSH
25928: FOR_IN
25929: IFFALSE 25981
// if IsSelected ( i ) then
25931: LD_VAR 0 2
25935: PPUSH
25936: CALL_OW 306
25940: IFFALSE 25979
// begin for j := 1 to 4 do
25942: LD_ADDR_VAR 0 3
25946: PUSH
25947: DOUBLE
25948: LD_INT 1
25950: DEC
25951: ST_TO_ADDR
25952: LD_INT 4
25954: PUSH
25955: FOR_TO
25956: IFFALSE 25977
// SetSkill ( i , j , 10 ) ;
25958: LD_VAR 0 2
25962: PPUSH
25963: LD_VAR 0 3
25967: PPUSH
25968: LD_INT 10
25970: PPUSH
25971: CALL_OW 237
25975: GO 25955
25977: POP
25978: POP
// end ;
25979: GO 25928
25981: POP
25982: POP
// end ;
25983: LD_VAR 0 1
25987: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
25988: LD_INT 0
25990: PPUSH
25991: PPUSH
25992: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
25993: LD_ADDR_VAR 0 2
25997: PUSH
25998: LD_INT 22
26000: PUSH
26001: LD_OWVAR 2
26005: PUSH
26006: EMPTY
26007: LIST
26008: LIST
26009: PUSH
26010: LD_INT 21
26012: PUSH
26013: LD_INT 1
26015: PUSH
26016: EMPTY
26017: LIST
26018: LIST
26019: PUSH
26020: EMPTY
26021: LIST
26022: LIST
26023: PPUSH
26024: CALL_OW 69
26028: PUSH
26029: FOR_IN
26030: IFFALSE 26071
// begin for j := 1 to 4 do
26032: LD_ADDR_VAR 0 3
26036: PUSH
26037: DOUBLE
26038: LD_INT 1
26040: DEC
26041: ST_TO_ADDR
26042: LD_INT 4
26044: PUSH
26045: FOR_TO
26046: IFFALSE 26067
// SetSkill ( i , j , 10 ) ;
26048: LD_VAR 0 2
26052: PPUSH
26053: LD_VAR 0 3
26057: PPUSH
26058: LD_INT 10
26060: PPUSH
26061: CALL_OW 237
26065: GO 26045
26067: POP
26068: POP
// end ;
26069: GO 26029
26071: POP
26072: POP
// end ;
26073: LD_VAR 0 1
26077: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
26078: LD_INT 0
26080: PPUSH
// uc_side := your_side ;
26081: LD_ADDR_OWVAR 20
26085: PUSH
26086: LD_OWVAR 2
26090: ST_TO_ADDR
// uc_nation := nation ;
26091: LD_ADDR_OWVAR 21
26095: PUSH
26096: LD_VAR 0 1
26100: ST_TO_ADDR
// InitHc ;
26101: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
26105: LD_INT 0
26107: PPUSH
26108: LD_VAR 0 2
26112: PPUSH
26113: LD_VAR 0 3
26117: PPUSH
26118: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
26122: LD_VAR 0 4
26126: PPUSH
26127: LD_VAR 0 5
26131: PPUSH
26132: CALL_OW 428
26136: PUSH
26137: LD_INT 0
26139: EQUAL
26140: IFFALSE 26164
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
26142: CALL_OW 44
26146: PPUSH
26147: LD_VAR 0 4
26151: PPUSH
26152: LD_VAR 0 5
26156: PPUSH
26157: LD_INT 1
26159: PPUSH
26160: CALL_OW 48
// end ;
26164: LD_VAR 0 6
26168: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
26169: LD_INT 0
26171: PPUSH
26172: PPUSH
// uc_side := your_side ;
26173: LD_ADDR_OWVAR 20
26177: PUSH
26178: LD_OWVAR 2
26182: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
26183: LD_VAR 0 1
26187: PUSH
26188: LD_INT 1
26190: PUSH
26191: LD_INT 2
26193: PUSH
26194: LD_INT 3
26196: PUSH
26197: LD_INT 4
26199: PUSH
26200: LD_INT 5
26202: PUSH
26203: EMPTY
26204: LIST
26205: LIST
26206: LIST
26207: LIST
26208: LIST
26209: IN
26210: IFFALSE 26222
// uc_nation := nation_american else
26212: LD_ADDR_OWVAR 21
26216: PUSH
26217: LD_INT 1
26219: ST_TO_ADDR
26220: GO 26265
// if chassis in [ 11 , 12 , 13 , 14 ] then
26222: LD_VAR 0 1
26226: PUSH
26227: LD_INT 11
26229: PUSH
26230: LD_INT 12
26232: PUSH
26233: LD_INT 13
26235: PUSH
26236: LD_INT 14
26238: PUSH
26239: EMPTY
26240: LIST
26241: LIST
26242: LIST
26243: LIST
26244: IN
26245: IFFALSE 26257
// uc_nation := nation_arabian else
26247: LD_ADDR_OWVAR 21
26251: PUSH
26252: LD_INT 2
26254: ST_TO_ADDR
26255: GO 26265
// uc_nation := nation_russian ;
26257: LD_ADDR_OWVAR 21
26261: PUSH
26262: LD_INT 3
26264: ST_TO_ADDR
// vc_chassis := chassis ;
26265: LD_ADDR_OWVAR 37
26269: PUSH
26270: LD_VAR 0 1
26274: ST_TO_ADDR
// vc_engine := engine ;
26275: LD_ADDR_OWVAR 39
26279: PUSH
26280: LD_VAR 0 2
26284: ST_TO_ADDR
// vc_control := control ;
26285: LD_ADDR_OWVAR 38
26289: PUSH
26290: LD_VAR 0 3
26294: ST_TO_ADDR
// vc_weapon := weapon ;
26295: LD_ADDR_OWVAR 40
26299: PUSH
26300: LD_VAR 0 4
26304: ST_TO_ADDR
// un := CreateVehicle ;
26305: LD_ADDR_VAR 0 8
26309: PUSH
26310: CALL_OW 45
26314: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
26315: LD_VAR 0 8
26319: PPUSH
26320: LD_INT 0
26322: PPUSH
26323: LD_INT 5
26325: PPUSH
26326: CALL_OW 12
26330: PPUSH
26331: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
26335: LD_VAR 0 8
26339: PPUSH
26340: LD_VAR 0 5
26344: PPUSH
26345: LD_VAR 0 6
26349: PPUSH
26350: LD_INT 1
26352: PPUSH
26353: CALL_OW 48
// end ;
26357: LD_VAR 0 7
26361: RET
// export hInvincible ; every 1 do
26362: GO 26364
26364: DISABLE
// hInvincible := [ ] ;
26365: LD_ADDR_EXP 79
26369: PUSH
26370: EMPTY
26371: ST_TO_ADDR
26372: END
// every 10 do var i ;
26373: GO 26375
26375: DISABLE
26376: LD_INT 0
26378: PPUSH
// begin enable ;
26379: ENABLE
// if not hInvincible then
26380: LD_EXP 79
26384: NOT
26385: IFFALSE 26389
// exit ;
26387: GO 26433
// for i in hInvincible do
26389: LD_ADDR_VAR 0 1
26393: PUSH
26394: LD_EXP 79
26398: PUSH
26399: FOR_IN
26400: IFFALSE 26431
// if GetLives ( i ) < 1000 then
26402: LD_VAR 0 1
26406: PPUSH
26407: CALL_OW 256
26411: PUSH
26412: LD_INT 1000
26414: LESS
26415: IFFALSE 26429
// SetLives ( i , 1000 ) ;
26417: LD_VAR 0 1
26421: PPUSH
26422: LD_INT 1000
26424: PPUSH
26425: CALL_OW 234
26429: GO 26399
26431: POP
26432: POP
// end ;
26433: PPOPN 1
26435: END
// export function hHackInvincible ; var i ; begin
26436: LD_INT 0
26438: PPUSH
26439: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
26440: LD_ADDR_VAR 0 2
26444: PUSH
26445: LD_INT 2
26447: PUSH
26448: LD_INT 21
26450: PUSH
26451: LD_INT 1
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: PUSH
26458: LD_INT 21
26460: PUSH
26461: LD_INT 2
26463: PUSH
26464: EMPTY
26465: LIST
26466: LIST
26467: PUSH
26468: EMPTY
26469: LIST
26470: LIST
26471: LIST
26472: PPUSH
26473: CALL_OW 69
26477: PUSH
26478: FOR_IN
26479: IFFALSE 26540
// if IsSelected ( i ) then
26481: LD_VAR 0 2
26485: PPUSH
26486: CALL_OW 306
26490: IFFALSE 26538
// begin if i in hInvincible then
26492: LD_VAR 0 2
26496: PUSH
26497: LD_EXP 79
26501: IN
26502: IFFALSE 26522
// hInvincible := hInvincible diff i else
26504: LD_ADDR_EXP 79
26508: PUSH
26509: LD_EXP 79
26513: PUSH
26514: LD_VAR 0 2
26518: DIFF
26519: ST_TO_ADDR
26520: GO 26538
// hInvincible := hInvincible union i ;
26522: LD_ADDR_EXP 79
26526: PUSH
26527: LD_EXP 79
26531: PUSH
26532: LD_VAR 0 2
26536: UNION
26537: ST_TO_ADDR
// end ;
26538: GO 26478
26540: POP
26541: POP
// end ;
26542: LD_VAR 0 1
26546: RET
// export function hHackInvisible ; var i , j ; begin
26547: LD_INT 0
26549: PPUSH
26550: PPUSH
26551: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
26552: LD_ADDR_VAR 0 2
26556: PUSH
26557: LD_INT 21
26559: PUSH
26560: LD_INT 1
26562: PUSH
26563: EMPTY
26564: LIST
26565: LIST
26566: PPUSH
26567: CALL_OW 69
26571: PUSH
26572: FOR_IN
26573: IFFALSE 26597
// if IsSelected ( i ) then
26575: LD_VAR 0 2
26579: PPUSH
26580: CALL_OW 306
26584: IFFALSE 26595
// ComForceInvisible ( i ) ;
26586: LD_VAR 0 2
26590: PPUSH
26591: CALL_OW 496
26595: GO 26572
26597: POP
26598: POP
// end ;
26599: LD_VAR 0 1
26603: RET
// export function hHackChangeYourSide ; begin
26604: LD_INT 0
26606: PPUSH
// if your_side = 8 then
26607: LD_OWVAR 2
26611: PUSH
26612: LD_INT 8
26614: EQUAL
26615: IFFALSE 26627
// your_side := 0 else
26617: LD_ADDR_OWVAR 2
26621: PUSH
26622: LD_INT 0
26624: ST_TO_ADDR
26625: GO 26641
// your_side := your_side + 1 ;
26627: LD_ADDR_OWVAR 2
26631: PUSH
26632: LD_OWVAR 2
26636: PUSH
26637: LD_INT 1
26639: PLUS
26640: ST_TO_ADDR
// end ;
26641: LD_VAR 0 1
26645: RET
// export function hHackChangeUnitSide ; var i , j ; begin
26646: LD_INT 0
26648: PPUSH
26649: PPUSH
26650: PPUSH
// for i in all_units do
26651: LD_ADDR_VAR 0 2
26655: PUSH
26656: LD_OWVAR 3
26660: PUSH
26661: FOR_IN
26662: IFFALSE 26740
// if IsSelected ( i ) then
26664: LD_VAR 0 2
26668: PPUSH
26669: CALL_OW 306
26673: IFFALSE 26738
// begin j := GetSide ( i ) ;
26675: LD_ADDR_VAR 0 3
26679: PUSH
26680: LD_VAR 0 2
26684: PPUSH
26685: CALL_OW 255
26689: ST_TO_ADDR
// if j = 8 then
26690: LD_VAR 0 3
26694: PUSH
26695: LD_INT 8
26697: EQUAL
26698: IFFALSE 26710
// j := 0 else
26700: LD_ADDR_VAR 0 3
26704: PUSH
26705: LD_INT 0
26707: ST_TO_ADDR
26708: GO 26724
// j := j + 1 ;
26710: LD_ADDR_VAR 0 3
26714: PUSH
26715: LD_VAR 0 3
26719: PUSH
26720: LD_INT 1
26722: PLUS
26723: ST_TO_ADDR
// SetSide ( i , j ) ;
26724: LD_VAR 0 2
26728: PPUSH
26729: LD_VAR 0 3
26733: PPUSH
26734: CALL_OW 235
// end ;
26738: GO 26661
26740: POP
26741: POP
// end ;
26742: LD_VAR 0 1
26746: RET
// export function hHackFog ; begin
26747: LD_INT 0
26749: PPUSH
// FogOff ( true ) ;
26750: LD_INT 1
26752: PPUSH
26753: CALL_OW 344
// end ;
26757: LD_VAR 0 1
26761: RET
// export function hHackTeleport ( unit , x , y ) ; begin
26762: LD_INT 0
26764: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
26765: LD_VAR 0 1
26769: PPUSH
26770: LD_VAR 0 2
26774: PPUSH
26775: LD_VAR 0 3
26779: PPUSH
26780: LD_INT 1
26782: PPUSH
26783: LD_INT 1
26785: PPUSH
26786: CALL_OW 483
// CenterOnXY ( x , y ) ;
26790: LD_VAR 0 2
26794: PPUSH
26795: LD_VAR 0 3
26799: PPUSH
26800: CALL_OW 84
// end ;
26804: LD_VAR 0 4
26808: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
26809: LD_INT 0
26811: PPUSH
26812: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
26813: LD_VAR 0 1
26817: NOT
26818: PUSH
26819: LD_VAR 0 2
26823: PPUSH
26824: LD_VAR 0 3
26828: PPUSH
26829: CALL_OW 488
26833: NOT
26834: OR
26835: PUSH
26836: LD_VAR 0 1
26840: PPUSH
26841: CALL_OW 266
26845: PUSH
26846: LD_INT 3
26848: NONEQUAL
26849: PUSH
26850: LD_VAR 0 1
26854: PPUSH
26855: CALL_OW 247
26859: PUSH
26860: LD_INT 1
26862: EQUAL
26863: NOT
26864: AND
26865: OR
26866: IFFALSE 26870
// exit ;
26868: GO 27019
// if GetType ( factory ) = unit_human then
26870: LD_VAR 0 1
26874: PPUSH
26875: CALL_OW 247
26879: PUSH
26880: LD_INT 1
26882: EQUAL
26883: IFFALSE 26900
// factory := IsInUnit ( factory ) ;
26885: LD_ADDR_VAR 0 1
26889: PUSH
26890: LD_VAR 0 1
26894: PPUSH
26895: CALL_OW 310
26899: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
26900: LD_VAR 0 1
26904: PPUSH
26905: CALL_OW 266
26909: PUSH
26910: LD_INT 3
26912: NONEQUAL
26913: IFFALSE 26917
// exit ;
26915: GO 27019
// if HexInfo ( x , y ) = factory then
26917: LD_VAR 0 2
26921: PPUSH
26922: LD_VAR 0 3
26926: PPUSH
26927: CALL_OW 428
26931: PUSH
26932: LD_VAR 0 1
26936: EQUAL
26937: IFFALSE 26964
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
26939: LD_ADDR_EXP 80
26943: PUSH
26944: LD_EXP 80
26948: PPUSH
26949: LD_VAR 0 1
26953: PPUSH
26954: LD_INT 0
26956: PPUSH
26957: CALL_OW 1
26961: ST_TO_ADDR
26962: GO 27015
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
26964: LD_ADDR_EXP 80
26968: PUSH
26969: LD_EXP 80
26973: PPUSH
26974: LD_VAR 0 1
26978: PPUSH
26979: LD_VAR 0 1
26983: PPUSH
26984: CALL_OW 255
26988: PUSH
26989: LD_VAR 0 1
26993: PUSH
26994: LD_VAR 0 2
26998: PUSH
26999: LD_VAR 0 3
27003: PUSH
27004: EMPTY
27005: LIST
27006: LIST
27007: LIST
27008: LIST
27009: PPUSH
27010: CALL_OW 1
27014: ST_TO_ADDR
// UpdateFactoryWaypoints ;
27015: CALL 27024 0 0
// end ;
27019: LD_VAR 0 4
27023: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
27024: LD_INT 0
27026: PPUSH
27027: PPUSH
27028: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
27029: LD_STRING resetFactoryWaypoint();
27031: PPUSH
27032: CALL_OW 559
// if factoryWaypoints then
27036: LD_EXP 80
27040: IFFALSE 27166
// begin list := PrepareArray ( factoryWaypoints ) ;
27042: LD_ADDR_VAR 0 3
27046: PUSH
27047: LD_EXP 80
27051: PPUSH
27052: CALL 74463 0 1
27056: ST_TO_ADDR
// for i := 1 to list do
27057: LD_ADDR_VAR 0 2
27061: PUSH
27062: DOUBLE
27063: LD_INT 1
27065: DEC
27066: ST_TO_ADDR
27067: LD_VAR 0 3
27071: PUSH
27072: FOR_TO
27073: IFFALSE 27164
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
27075: LD_STRING setFactoryWaypointXY(
27077: PUSH
27078: LD_VAR 0 3
27082: PUSH
27083: LD_VAR 0 2
27087: ARRAY
27088: PUSH
27089: LD_INT 1
27091: ARRAY
27092: STR
27093: PUSH
27094: LD_STRING ,
27096: STR
27097: PUSH
27098: LD_VAR 0 3
27102: PUSH
27103: LD_VAR 0 2
27107: ARRAY
27108: PUSH
27109: LD_INT 2
27111: ARRAY
27112: STR
27113: PUSH
27114: LD_STRING ,
27116: STR
27117: PUSH
27118: LD_VAR 0 3
27122: PUSH
27123: LD_VAR 0 2
27127: ARRAY
27128: PUSH
27129: LD_INT 3
27131: ARRAY
27132: STR
27133: PUSH
27134: LD_STRING ,
27136: STR
27137: PUSH
27138: LD_VAR 0 3
27142: PUSH
27143: LD_VAR 0 2
27147: ARRAY
27148: PUSH
27149: LD_INT 4
27151: ARRAY
27152: STR
27153: PUSH
27154: LD_STRING )
27156: STR
27157: PPUSH
27158: CALL_OW 559
27162: GO 27072
27164: POP
27165: POP
// end ; end ;
27166: LD_VAR 0 1
27170: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
27171: LD_INT 0
27173: PPUSH
// if HexInfo ( x , y ) = warehouse then
27174: LD_VAR 0 2
27178: PPUSH
27179: LD_VAR 0 3
27183: PPUSH
27184: CALL_OW 428
27188: PUSH
27189: LD_VAR 0 1
27193: EQUAL
27194: IFFALSE 27221
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
27196: LD_ADDR_EXP 81
27200: PUSH
27201: LD_EXP 81
27205: PPUSH
27206: LD_VAR 0 1
27210: PPUSH
27211: LD_INT 0
27213: PPUSH
27214: CALL_OW 1
27218: ST_TO_ADDR
27219: GO 27272
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
27221: LD_ADDR_EXP 81
27225: PUSH
27226: LD_EXP 81
27230: PPUSH
27231: LD_VAR 0 1
27235: PPUSH
27236: LD_VAR 0 1
27240: PPUSH
27241: CALL_OW 255
27245: PUSH
27246: LD_VAR 0 1
27250: PUSH
27251: LD_VAR 0 2
27255: PUSH
27256: LD_VAR 0 3
27260: PUSH
27261: EMPTY
27262: LIST
27263: LIST
27264: LIST
27265: LIST
27266: PPUSH
27267: CALL_OW 1
27271: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
27272: CALL 27281 0 0
// end ;
27276: LD_VAR 0 4
27280: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
27281: LD_INT 0
27283: PPUSH
27284: PPUSH
27285: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
27286: LD_STRING resetWarehouseGatheringPoints();
27288: PPUSH
27289: CALL_OW 559
// if warehouseGatheringPoints then
27293: LD_EXP 81
27297: IFFALSE 27423
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
27299: LD_ADDR_VAR 0 3
27303: PUSH
27304: LD_EXP 81
27308: PPUSH
27309: CALL 74463 0 1
27313: ST_TO_ADDR
// for i := 1 to list do
27314: LD_ADDR_VAR 0 2
27318: PUSH
27319: DOUBLE
27320: LD_INT 1
27322: DEC
27323: ST_TO_ADDR
27324: LD_VAR 0 3
27328: PUSH
27329: FOR_TO
27330: IFFALSE 27421
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
27332: LD_STRING setWarehouseGatheringPointXY(
27334: PUSH
27335: LD_VAR 0 3
27339: PUSH
27340: LD_VAR 0 2
27344: ARRAY
27345: PUSH
27346: LD_INT 1
27348: ARRAY
27349: STR
27350: PUSH
27351: LD_STRING ,
27353: STR
27354: PUSH
27355: LD_VAR 0 3
27359: PUSH
27360: LD_VAR 0 2
27364: ARRAY
27365: PUSH
27366: LD_INT 2
27368: ARRAY
27369: STR
27370: PUSH
27371: LD_STRING ,
27373: STR
27374: PUSH
27375: LD_VAR 0 3
27379: PUSH
27380: LD_VAR 0 2
27384: ARRAY
27385: PUSH
27386: LD_INT 3
27388: ARRAY
27389: STR
27390: PUSH
27391: LD_STRING ,
27393: STR
27394: PUSH
27395: LD_VAR 0 3
27399: PUSH
27400: LD_VAR 0 2
27404: ARRAY
27405: PUSH
27406: LD_INT 4
27408: ARRAY
27409: STR
27410: PUSH
27411: LD_STRING )
27413: STR
27414: PPUSH
27415: CALL_OW 559
27419: GO 27329
27421: POP
27422: POP
// end ; end ;
27423: LD_VAR 0 1
27427: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
27428: LD_EXP 81
27432: IFFALSE 28117
27434: GO 27436
27436: DISABLE
27437: LD_INT 0
27439: PPUSH
27440: PPUSH
27441: PPUSH
27442: PPUSH
27443: PPUSH
27444: PPUSH
27445: PPUSH
27446: PPUSH
27447: PPUSH
// begin enable ;
27448: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
27449: LD_ADDR_VAR 0 3
27453: PUSH
27454: LD_EXP 81
27458: PPUSH
27459: CALL 74463 0 1
27463: ST_TO_ADDR
// if not list then
27464: LD_VAR 0 3
27468: NOT
27469: IFFALSE 27473
// exit ;
27471: GO 28117
// for i := 1 to list do
27473: LD_ADDR_VAR 0 1
27477: PUSH
27478: DOUBLE
27479: LD_INT 1
27481: DEC
27482: ST_TO_ADDR
27483: LD_VAR 0 3
27487: PUSH
27488: FOR_TO
27489: IFFALSE 28115
// begin depot := list [ i ] [ 2 ] ;
27491: LD_ADDR_VAR 0 8
27495: PUSH
27496: LD_VAR 0 3
27500: PUSH
27501: LD_VAR 0 1
27505: ARRAY
27506: PUSH
27507: LD_INT 2
27509: ARRAY
27510: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
27511: LD_ADDR_VAR 0 5
27515: PUSH
27516: LD_VAR 0 3
27520: PUSH
27521: LD_VAR 0 1
27525: ARRAY
27526: PUSH
27527: LD_INT 1
27529: ARRAY
27530: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
27531: LD_VAR 0 8
27535: PPUSH
27536: CALL_OW 301
27540: PUSH
27541: LD_VAR 0 5
27545: PUSH
27546: LD_VAR 0 8
27550: PPUSH
27551: CALL_OW 255
27555: NONEQUAL
27556: OR
27557: IFFALSE 27586
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
27559: LD_ADDR_EXP 81
27563: PUSH
27564: LD_EXP 81
27568: PPUSH
27569: LD_VAR 0 8
27573: PPUSH
27574: LD_INT 0
27576: PPUSH
27577: CALL_OW 1
27581: ST_TO_ADDR
// exit ;
27582: POP
27583: POP
27584: GO 28117
// end ; x := list [ i ] [ 3 ] ;
27586: LD_ADDR_VAR 0 6
27590: PUSH
27591: LD_VAR 0 3
27595: PUSH
27596: LD_VAR 0 1
27600: ARRAY
27601: PUSH
27602: LD_INT 3
27604: ARRAY
27605: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
27606: LD_ADDR_VAR 0 7
27610: PUSH
27611: LD_VAR 0 3
27615: PUSH
27616: LD_VAR 0 1
27620: ARRAY
27621: PUSH
27622: LD_INT 4
27624: ARRAY
27625: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
27626: LD_ADDR_VAR 0 9
27630: PUSH
27631: LD_VAR 0 6
27635: PPUSH
27636: LD_VAR 0 7
27640: PPUSH
27641: LD_INT 16
27643: PPUSH
27644: CALL 73051 0 3
27648: ST_TO_ADDR
// if not cratesNearbyPoint then
27649: LD_VAR 0 9
27653: NOT
27654: IFFALSE 27660
// exit ;
27656: POP
27657: POP
27658: GO 28117
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
27660: LD_ADDR_VAR 0 4
27664: PUSH
27665: LD_INT 22
27667: PUSH
27668: LD_VAR 0 5
27672: PUSH
27673: EMPTY
27674: LIST
27675: LIST
27676: PUSH
27677: LD_INT 3
27679: PUSH
27680: LD_INT 60
27682: PUSH
27683: EMPTY
27684: LIST
27685: PUSH
27686: EMPTY
27687: LIST
27688: LIST
27689: PUSH
27690: LD_INT 91
27692: PUSH
27693: LD_VAR 0 8
27697: PUSH
27698: LD_INT 6
27700: PUSH
27701: EMPTY
27702: LIST
27703: LIST
27704: LIST
27705: PUSH
27706: LD_INT 2
27708: PUSH
27709: LD_INT 25
27711: PUSH
27712: LD_INT 2
27714: PUSH
27715: EMPTY
27716: LIST
27717: LIST
27718: PUSH
27719: LD_INT 25
27721: PUSH
27722: LD_INT 16
27724: PUSH
27725: EMPTY
27726: LIST
27727: LIST
27728: PUSH
27729: EMPTY
27730: LIST
27731: LIST
27732: LIST
27733: PUSH
27734: EMPTY
27735: LIST
27736: LIST
27737: LIST
27738: LIST
27739: PPUSH
27740: CALL_OW 69
27744: PUSH
27745: LD_VAR 0 8
27749: PPUSH
27750: CALL_OW 313
27754: PPUSH
27755: LD_INT 3
27757: PUSH
27758: LD_INT 60
27760: PUSH
27761: EMPTY
27762: LIST
27763: PUSH
27764: EMPTY
27765: LIST
27766: LIST
27767: PUSH
27768: LD_INT 2
27770: PUSH
27771: LD_INT 25
27773: PUSH
27774: LD_INT 2
27776: PUSH
27777: EMPTY
27778: LIST
27779: LIST
27780: PUSH
27781: LD_INT 25
27783: PUSH
27784: LD_INT 16
27786: PUSH
27787: EMPTY
27788: LIST
27789: LIST
27790: PUSH
27791: EMPTY
27792: LIST
27793: LIST
27794: LIST
27795: PUSH
27796: EMPTY
27797: LIST
27798: LIST
27799: PPUSH
27800: CALL_OW 72
27804: UNION
27805: ST_TO_ADDR
// if tmp then
27806: LD_VAR 0 4
27810: IFFALSE 27890
// begin tmp := ShrinkArray ( tmp , 3 ) ;
27812: LD_ADDR_VAR 0 4
27816: PUSH
27817: LD_VAR 0 4
27821: PPUSH
27822: LD_INT 3
27824: PPUSH
27825: CALL 71020 0 2
27829: ST_TO_ADDR
// for j in tmp do
27830: LD_ADDR_VAR 0 2
27834: PUSH
27835: LD_VAR 0 4
27839: PUSH
27840: FOR_IN
27841: IFFALSE 27884
// begin if IsInUnit ( j ) then
27843: LD_VAR 0 2
27847: PPUSH
27848: CALL_OW 310
27852: IFFALSE 27863
// ComExit ( j ) ;
27854: LD_VAR 0 2
27858: PPUSH
27859: CALL 71103 0 1
// AddComCollect ( j , x , y ) ;
27863: LD_VAR 0 2
27867: PPUSH
27868: LD_VAR 0 6
27872: PPUSH
27873: LD_VAR 0 7
27877: PPUSH
27878: CALL_OW 177
// end ;
27882: GO 27840
27884: POP
27885: POP
// exit ;
27886: POP
27887: POP
27888: GO 28117
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
27890: LD_ADDR_VAR 0 4
27894: PUSH
27895: LD_INT 22
27897: PUSH
27898: LD_VAR 0 5
27902: PUSH
27903: EMPTY
27904: LIST
27905: LIST
27906: PUSH
27907: LD_INT 91
27909: PUSH
27910: LD_VAR 0 8
27914: PUSH
27915: LD_INT 8
27917: PUSH
27918: EMPTY
27919: LIST
27920: LIST
27921: LIST
27922: PUSH
27923: LD_INT 2
27925: PUSH
27926: LD_INT 34
27928: PUSH
27929: LD_INT 12
27931: PUSH
27932: EMPTY
27933: LIST
27934: LIST
27935: PUSH
27936: LD_INT 34
27938: PUSH
27939: LD_INT 51
27941: PUSH
27942: EMPTY
27943: LIST
27944: LIST
27945: PUSH
27946: LD_INT 34
27948: PUSH
27949: LD_INT 32
27951: PUSH
27952: EMPTY
27953: LIST
27954: LIST
27955: PUSH
27956: LD_INT 34
27958: PUSH
27959: LD_INT 89
27961: PUSH
27962: EMPTY
27963: LIST
27964: LIST
27965: PUSH
27966: EMPTY
27967: LIST
27968: LIST
27969: LIST
27970: LIST
27971: LIST
27972: PUSH
27973: EMPTY
27974: LIST
27975: LIST
27976: LIST
27977: PPUSH
27978: CALL_OW 69
27982: ST_TO_ADDR
// if tmp then
27983: LD_VAR 0 4
27987: IFFALSE 28113
// begin for j in tmp do
27989: LD_ADDR_VAR 0 2
27993: PUSH
27994: LD_VAR 0 4
27998: PUSH
27999: FOR_IN
28000: IFFALSE 28111
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
28002: LD_VAR 0 2
28006: PPUSH
28007: CALL_OW 262
28011: PUSH
28012: LD_INT 3
28014: EQUAL
28015: PUSH
28016: LD_VAR 0 2
28020: PPUSH
28021: CALL_OW 261
28025: PUSH
28026: LD_INT 20
28028: GREATER
28029: OR
28030: PUSH
28031: LD_VAR 0 2
28035: PPUSH
28036: CALL_OW 314
28040: NOT
28041: AND
28042: PUSH
28043: LD_VAR 0 2
28047: PPUSH
28048: CALL_OW 263
28052: PUSH
28053: LD_INT 1
28055: NONEQUAL
28056: PUSH
28057: LD_VAR 0 2
28061: PPUSH
28062: CALL_OW 311
28066: OR
28067: AND
28068: IFFALSE 28109
// begin ComCollect ( j , x , y ) ;
28070: LD_VAR 0 2
28074: PPUSH
28075: LD_VAR 0 6
28079: PPUSH
28080: LD_VAR 0 7
28084: PPUSH
28085: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
28089: LD_VAR 0 2
28093: PPUSH
28094: LD_VAR 0 8
28098: PPUSH
28099: CALL_OW 172
// exit ;
28103: POP
28104: POP
28105: POP
28106: POP
28107: GO 28117
// end ;
28109: GO 27999
28111: POP
28112: POP
// end ; end ;
28113: GO 27488
28115: POP
28116: POP
// end ; end_of_file
28117: PPOPN 9
28119: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
28120: LD_INT 0
28122: PPUSH
28123: PPUSH
28124: PPUSH
28125: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
28126: LD_VAR 0 1
28130: PPUSH
28131: CALL_OW 264
28135: PUSH
28136: LD_INT 91
28138: EQUAL
28139: IFFALSE 28211
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
28141: LD_INT 68
28143: PPUSH
28144: LD_VAR 0 1
28148: PPUSH
28149: CALL_OW 255
28153: PPUSH
28154: CALL_OW 321
28158: PUSH
28159: LD_INT 2
28161: EQUAL
28162: IFFALSE 28174
// eff := 70 else
28164: LD_ADDR_VAR 0 4
28168: PUSH
28169: LD_INT 70
28171: ST_TO_ADDR
28172: GO 28182
// eff := 30 ;
28174: LD_ADDR_VAR 0 4
28178: PUSH
28179: LD_INT 30
28181: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
28182: LD_VAR 0 1
28186: PPUSH
28187: CALL_OW 250
28191: PPUSH
28192: LD_VAR 0 1
28196: PPUSH
28197: CALL_OW 251
28201: PPUSH
28202: LD_VAR 0 4
28206: PPUSH
28207: CALL_OW 495
// end ; end ;
28211: LD_VAR 0 2
28215: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
28216: LD_INT 0
28218: PPUSH
// end ;
28219: LD_VAR 0 4
28223: RET
// export function SOS_Command ( cmd ) ; begin
28224: LD_INT 0
28226: PPUSH
// end ;
28227: LD_VAR 0 2
28231: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
28232: LD_INT 0
28234: PPUSH
// end ;
28235: LD_VAR 0 6
28239: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
28240: LD_INT 0
28242: PPUSH
28243: PPUSH
// if not vehicle or not factory then
28244: LD_VAR 0 1
28248: NOT
28249: PUSH
28250: LD_VAR 0 2
28254: NOT
28255: OR
28256: IFFALSE 28260
// exit ;
28258: GO 28491
// if factoryWaypoints >= factory then
28260: LD_EXP 80
28264: PUSH
28265: LD_VAR 0 2
28269: GREATEREQUAL
28270: IFFALSE 28491
// if factoryWaypoints [ factory ] then
28272: LD_EXP 80
28276: PUSH
28277: LD_VAR 0 2
28281: ARRAY
28282: IFFALSE 28491
// begin if GetControl ( vehicle ) = control_manual then
28284: LD_VAR 0 1
28288: PPUSH
28289: CALL_OW 263
28293: PUSH
28294: LD_INT 1
28296: EQUAL
28297: IFFALSE 28378
// begin driver := IsDrivenBy ( vehicle ) ;
28299: LD_ADDR_VAR 0 4
28303: PUSH
28304: LD_VAR 0 1
28308: PPUSH
28309: CALL_OW 311
28313: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28314: LD_VAR 0 4
28318: PPUSH
28319: LD_EXP 80
28323: PUSH
28324: LD_VAR 0 2
28328: ARRAY
28329: PUSH
28330: LD_INT 3
28332: ARRAY
28333: PPUSH
28334: LD_EXP 80
28338: PUSH
28339: LD_VAR 0 2
28343: ARRAY
28344: PUSH
28345: LD_INT 4
28347: ARRAY
28348: PPUSH
28349: CALL_OW 171
// AddComExitVehicle ( driver ) ;
28353: LD_VAR 0 4
28357: PPUSH
28358: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
28362: LD_VAR 0 4
28366: PPUSH
28367: LD_VAR 0 2
28371: PPUSH
28372: CALL_OW 180
// end else
28376: GO 28491
// if GetControl ( vehicle ) = control_remote then
28378: LD_VAR 0 1
28382: PPUSH
28383: CALL_OW 263
28387: PUSH
28388: LD_INT 2
28390: EQUAL
28391: IFFALSE 28452
// begin wait ( 0 0$2 ) ;
28393: LD_INT 70
28395: PPUSH
28396: CALL_OW 67
// if Connect ( vehicle ) then
28400: LD_VAR 0 1
28404: PPUSH
28405: CALL 41322 0 1
28409: IFFALSE 28450
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28411: LD_VAR 0 1
28415: PPUSH
28416: LD_EXP 80
28420: PUSH
28421: LD_VAR 0 2
28425: ARRAY
28426: PUSH
28427: LD_INT 3
28429: ARRAY
28430: PPUSH
28431: LD_EXP 80
28435: PUSH
28436: LD_VAR 0 2
28440: ARRAY
28441: PUSH
28442: LD_INT 4
28444: ARRAY
28445: PPUSH
28446: CALL_OW 171
// end else
28450: GO 28491
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28452: LD_VAR 0 1
28456: PPUSH
28457: LD_EXP 80
28461: PUSH
28462: LD_VAR 0 2
28466: ARRAY
28467: PUSH
28468: LD_INT 3
28470: ARRAY
28471: PPUSH
28472: LD_EXP 80
28476: PUSH
28477: LD_VAR 0 2
28481: ARRAY
28482: PUSH
28483: LD_INT 4
28485: ARRAY
28486: PPUSH
28487: CALL_OW 171
// end ; end ;
28491: LD_VAR 0 3
28495: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
28496: LD_INT 0
28498: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
28499: LD_VAR 0 1
28503: PUSH
28504: LD_INT 250
28506: EQUAL
28507: PUSH
28508: LD_VAR 0 2
28512: PPUSH
28513: CALL_OW 264
28517: PUSH
28518: LD_INT 81
28520: EQUAL
28521: AND
28522: IFFALSE 28543
// MinerPlaceMine ( unit , x , y ) ;
28524: LD_VAR 0 2
28528: PPUSH
28529: LD_VAR 0 4
28533: PPUSH
28534: LD_VAR 0 5
28538: PPUSH
28539: CALL 31533 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
28543: LD_VAR 0 1
28547: PUSH
28548: LD_INT 251
28550: EQUAL
28551: PUSH
28552: LD_VAR 0 2
28556: PPUSH
28557: CALL_OW 264
28561: PUSH
28562: LD_INT 81
28564: EQUAL
28565: AND
28566: IFFALSE 28587
// MinerDetonateMine ( unit , x , y ) ;
28568: LD_VAR 0 2
28572: PPUSH
28573: LD_VAR 0 4
28577: PPUSH
28578: LD_VAR 0 5
28582: PPUSH
28583: CALL 31808 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
28587: LD_VAR 0 1
28591: PUSH
28592: LD_INT 252
28594: EQUAL
28595: PUSH
28596: LD_VAR 0 2
28600: PPUSH
28601: CALL_OW 264
28605: PUSH
28606: LD_INT 81
28608: EQUAL
28609: AND
28610: IFFALSE 28631
// MinerCreateMinefield ( unit , x , y ) ;
28612: LD_VAR 0 2
28616: PPUSH
28617: LD_VAR 0 4
28621: PPUSH
28622: LD_VAR 0 5
28626: PPUSH
28627: CALL 32225 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
28631: LD_VAR 0 1
28635: PUSH
28636: LD_INT 253
28638: EQUAL
28639: PUSH
28640: LD_VAR 0 2
28644: PPUSH
28645: CALL_OW 257
28649: PUSH
28650: LD_INT 5
28652: EQUAL
28653: AND
28654: IFFALSE 28675
// ComBinocular ( unit , x , y ) ;
28656: LD_VAR 0 2
28660: PPUSH
28661: LD_VAR 0 4
28665: PPUSH
28666: LD_VAR 0 5
28670: PPUSH
28671: CALL 32594 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
28675: LD_VAR 0 1
28679: PUSH
28680: LD_INT 254
28682: EQUAL
28683: PUSH
28684: LD_VAR 0 2
28688: PPUSH
28689: CALL_OW 264
28693: PUSH
28694: LD_INT 99
28696: EQUAL
28697: AND
28698: PUSH
28699: LD_VAR 0 3
28703: PPUSH
28704: CALL_OW 263
28708: PUSH
28709: LD_INT 3
28711: EQUAL
28712: AND
28713: IFFALSE 28729
// HackDestroyVehicle ( unit , selectedUnit ) ;
28715: LD_VAR 0 2
28719: PPUSH
28720: LD_VAR 0 3
28724: PPUSH
28725: CALL 30897 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
28729: LD_VAR 0 1
28733: PUSH
28734: LD_INT 255
28736: EQUAL
28737: PUSH
28738: LD_VAR 0 2
28742: PPUSH
28743: CALL_OW 264
28747: PUSH
28748: LD_INT 14
28750: PUSH
28751: LD_INT 53
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: IN
28758: AND
28759: PUSH
28760: LD_VAR 0 4
28764: PPUSH
28765: LD_VAR 0 5
28769: PPUSH
28770: CALL_OW 488
28774: AND
28775: IFFALSE 28799
// CutTreeXYR ( unit , x , y , 12 ) ;
28777: LD_VAR 0 2
28781: PPUSH
28782: LD_VAR 0 4
28786: PPUSH
28787: LD_VAR 0 5
28791: PPUSH
28792: LD_INT 12
28794: PPUSH
28795: CALL 28894 0 4
// if cmd = 256 then
28799: LD_VAR 0 1
28803: PUSH
28804: LD_INT 256
28806: EQUAL
28807: IFFALSE 28828
// SetFactoryWaypoint ( unit , x , y ) ;
28809: LD_VAR 0 2
28813: PPUSH
28814: LD_VAR 0 4
28818: PPUSH
28819: LD_VAR 0 5
28823: PPUSH
28824: CALL 26809 0 3
// if cmd = 257 then
28828: LD_VAR 0 1
28832: PUSH
28833: LD_INT 257
28835: EQUAL
28836: IFFALSE 28857
// SetWarehouseGatheringPoint ( unit , x , y ) ;
28838: LD_VAR 0 2
28842: PPUSH
28843: LD_VAR 0 4
28847: PPUSH
28848: LD_VAR 0 5
28852: PPUSH
28853: CALL 27171 0 3
// if cmd = 258 then
28857: LD_VAR 0 1
28861: PUSH
28862: LD_INT 258
28864: EQUAL
28865: IFFALSE 28889
// BurnTreeXYR ( unit , x , y , 8 ) ;
28867: LD_VAR 0 2
28871: PPUSH
28872: LD_VAR 0 4
28876: PPUSH
28877: LD_VAR 0 5
28881: PPUSH
28882: LD_INT 8
28884: PPUSH
28885: CALL 29288 0 4
// end ;
28889: LD_VAR 0 6
28893: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
28894: LD_INT 0
28896: PPUSH
28897: PPUSH
28898: PPUSH
28899: PPUSH
28900: PPUSH
28901: PPUSH
28902: PPUSH
28903: PPUSH
28904: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
28905: LD_VAR 0 1
28909: PPUSH
28910: CALL_OW 302
28914: NOT
28915: PUSH
28916: LD_VAR 0 2
28920: PPUSH
28921: LD_VAR 0 3
28925: PPUSH
28926: CALL_OW 488
28930: NOT
28931: OR
28932: PUSH
28933: LD_VAR 0 4
28937: NOT
28938: OR
28939: IFFALSE 28943
// exit ;
28941: GO 29283
// list := [ ] ;
28943: LD_ADDR_VAR 0 13
28947: PUSH
28948: EMPTY
28949: ST_TO_ADDR
// if x - r < 0 then
28950: LD_VAR 0 2
28954: PUSH
28955: LD_VAR 0 4
28959: MINUS
28960: PUSH
28961: LD_INT 0
28963: LESS
28964: IFFALSE 28976
// min_x := 0 else
28966: LD_ADDR_VAR 0 7
28970: PUSH
28971: LD_INT 0
28973: ST_TO_ADDR
28974: GO 28992
// min_x := x - r ;
28976: LD_ADDR_VAR 0 7
28980: PUSH
28981: LD_VAR 0 2
28985: PUSH
28986: LD_VAR 0 4
28990: MINUS
28991: ST_TO_ADDR
// if y - r < 0 then
28992: LD_VAR 0 3
28996: PUSH
28997: LD_VAR 0 4
29001: MINUS
29002: PUSH
29003: LD_INT 0
29005: LESS
29006: IFFALSE 29018
// min_y := 0 else
29008: LD_ADDR_VAR 0 8
29012: PUSH
29013: LD_INT 0
29015: ST_TO_ADDR
29016: GO 29034
// min_y := y - r ;
29018: LD_ADDR_VAR 0 8
29022: PUSH
29023: LD_VAR 0 3
29027: PUSH
29028: LD_VAR 0 4
29032: MINUS
29033: ST_TO_ADDR
// max_x := x + r ;
29034: LD_ADDR_VAR 0 9
29038: PUSH
29039: LD_VAR 0 2
29043: PUSH
29044: LD_VAR 0 4
29048: PLUS
29049: ST_TO_ADDR
// max_y := y + r ;
29050: LD_ADDR_VAR 0 10
29054: PUSH
29055: LD_VAR 0 3
29059: PUSH
29060: LD_VAR 0 4
29064: PLUS
29065: ST_TO_ADDR
// for _x = min_x to max_x do
29066: LD_ADDR_VAR 0 11
29070: PUSH
29071: DOUBLE
29072: LD_VAR 0 7
29076: DEC
29077: ST_TO_ADDR
29078: LD_VAR 0 9
29082: PUSH
29083: FOR_TO
29084: IFFALSE 29201
// for _y = min_y to max_y do
29086: LD_ADDR_VAR 0 12
29090: PUSH
29091: DOUBLE
29092: LD_VAR 0 8
29096: DEC
29097: ST_TO_ADDR
29098: LD_VAR 0 10
29102: PUSH
29103: FOR_TO
29104: IFFALSE 29197
// begin if not ValidHex ( _x , _y ) then
29106: LD_VAR 0 11
29110: PPUSH
29111: LD_VAR 0 12
29115: PPUSH
29116: CALL_OW 488
29120: NOT
29121: IFFALSE 29125
// continue ;
29123: GO 29103
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
29125: LD_VAR 0 11
29129: PPUSH
29130: LD_VAR 0 12
29134: PPUSH
29135: CALL_OW 351
29139: PUSH
29140: LD_VAR 0 11
29144: PPUSH
29145: LD_VAR 0 12
29149: PPUSH
29150: CALL_OW 554
29154: AND
29155: IFFALSE 29195
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
29157: LD_ADDR_VAR 0 13
29161: PUSH
29162: LD_VAR 0 13
29166: PPUSH
29167: LD_VAR 0 13
29171: PUSH
29172: LD_INT 1
29174: PLUS
29175: PPUSH
29176: LD_VAR 0 11
29180: PUSH
29181: LD_VAR 0 12
29185: PUSH
29186: EMPTY
29187: LIST
29188: LIST
29189: PPUSH
29190: CALL_OW 2
29194: ST_TO_ADDR
// end ;
29195: GO 29103
29197: POP
29198: POP
29199: GO 29083
29201: POP
29202: POP
// if not list then
29203: LD_VAR 0 13
29207: NOT
29208: IFFALSE 29212
// exit ;
29210: GO 29283
// for i in list do
29212: LD_ADDR_VAR 0 6
29216: PUSH
29217: LD_VAR 0 13
29221: PUSH
29222: FOR_IN
29223: IFFALSE 29281
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
29225: LD_VAR 0 1
29229: PPUSH
29230: LD_STRING M
29232: PUSH
29233: LD_VAR 0 6
29237: PUSH
29238: LD_INT 1
29240: ARRAY
29241: PUSH
29242: LD_VAR 0 6
29246: PUSH
29247: LD_INT 2
29249: ARRAY
29250: PUSH
29251: LD_INT 0
29253: PUSH
29254: LD_INT 0
29256: PUSH
29257: LD_INT 0
29259: PUSH
29260: LD_INT 0
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: LIST
29267: LIST
29268: LIST
29269: LIST
29270: LIST
29271: PUSH
29272: EMPTY
29273: LIST
29274: PPUSH
29275: CALL_OW 447
29279: GO 29222
29281: POP
29282: POP
// end ;
29283: LD_VAR 0 5
29287: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
29288: LD_INT 0
29290: PPUSH
29291: PPUSH
29292: PPUSH
29293: PPUSH
29294: PPUSH
29295: PPUSH
29296: PPUSH
29297: PPUSH
29298: PPUSH
29299: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
29300: LD_VAR 0 1
29304: PPUSH
29305: CALL_OW 302
29309: NOT
29310: PUSH
29311: LD_VAR 0 2
29315: PPUSH
29316: LD_VAR 0 3
29320: PPUSH
29321: CALL_OW 488
29325: NOT
29326: OR
29327: PUSH
29328: LD_VAR 0 4
29332: NOT
29333: OR
29334: IFFALSE 29338
// exit ;
29336: GO 29851
// list := [ ] ;
29338: LD_ADDR_VAR 0 13
29342: PUSH
29343: EMPTY
29344: ST_TO_ADDR
// if x - r < 0 then
29345: LD_VAR 0 2
29349: PUSH
29350: LD_VAR 0 4
29354: MINUS
29355: PUSH
29356: LD_INT 0
29358: LESS
29359: IFFALSE 29371
// min_x := 0 else
29361: LD_ADDR_VAR 0 7
29365: PUSH
29366: LD_INT 0
29368: ST_TO_ADDR
29369: GO 29387
// min_x := x - r ;
29371: LD_ADDR_VAR 0 7
29375: PUSH
29376: LD_VAR 0 2
29380: PUSH
29381: LD_VAR 0 4
29385: MINUS
29386: ST_TO_ADDR
// if y - r < 0 then
29387: LD_VAR 0 3
29391: PUSH
29392: LD_VAR 0 4
29396: MINUS
29397: PUSH
29398: LD_INT 0
29400: LESS
29401: IFFALSE 29413
// min_y := 0 else
29403: LD_ADDR_VAR 0 8
29407: PUSH
29408: LD_INT 0
29410: ST_TO_ADDR
29411: GO 29429
// min_y := y - r ;
29413: LD_ADDR_VAR 0 8
29417: PUSH
29418: LD_VAR 0 3
29422: PUSH
29423: LD_VAR 0 4
29427: MINUS
29428: ST_TO_ADDR
// max_x := x + r ;
29429: LD_ADDR_VAR 0 9
29433: PUSH
29434: LD_VAR 0 2
29438: PUSH
29439: LD_VAR 0 4
29443: PLUS
29444: ST_TO_ADDR
// max_y := y + r ;
29445: LD_ADDR_VAR 0 10
29449: PUSH
29450: LD_VAR 0 3
29454: PUSH
29455: LD_VAR 0 4
29459: PLUS
29460: ST_TO_ADDR
// for _x = min_x to max_x do
29461: LD_ADDR_VAR 0 11
29465: PUSH
29466: DOUBLE
29467: LD_VAR 0 7
29471: DEC
29472: ST_TO_ADDR
29473: LD_VAR 0 9
29477: PUSH
29478: FOR_TO
29479: IFFALSE 29596
// for _y = min_y to max_y do
29481: LD_ADDR_VAR 0 12
29485: PUSH
29486: DOUBLE
29487: LD_VAR 0 8
29491: DEC
29492: ST_TO_ADDR
29493: LD_VAR 0 10
29497: PUSH
29498: FOR_TO
29499: IFFALSE 29592
// begin if not ValidHex ( _x , _y ) then
29501: LD_VAR 0 11
29505: PPUSH
29506: LD_VAR 0 12
29510: PPUSH
29511: CALL_OW 488
29515: NOT
29516: IFFALSE 29520
// continue ;
29518: GO 29498
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
29520: LD_VAR 0 11
29524: PPUSH
29525: LD_VAR 0 12
29529: PPUSH
29530: CALL_OW 351
29534: PUSH
29535: LD_VAR 0 11
29539: PPUSH
29540: LD_VAR 0 12
29544: PPUSH
29545: CALL_OW 554
29549: AND
29550: IFFALSE 29590
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
29552: LD_ADDR_VAR 0 13
29556: PUSH
29557: LD_VAR 0 13
29561: PPUSH
29562: LD_VAR 0 13
29566: PUSH
29567: LD_INT 1
29569: PLUS
29570: PPUSH
29571: LD_VAR 0 11
29575: PUSH
29576: LD_VAR 0 12
29580: PUSH
29581: EMPTY
29582: LIST
29583: LIST
29584: PPUSH
29585: CALL_OW 2
29589: ST_TO_ADDR
// end ;
29590: GO 29498
29592: POP
29593: POP
29594: GO 29478
29596: POP
29597: POP
// if not list then
29598: LD_VAR 0 13
29602: NOT
29603: IFFALSE 29607
// exit ;
29605: GO 29851
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
29607: LD_ADDR_VAR 0 13
29611: PUSH
29612: LD_VAR 0 1
29616: PPUSH
29617: LD_VAR 0 13
29621: PPUSH
29622: LD_INT 1
29624: PPUSH
29625: LD_INT 1
29627: PPUSH
29628: CALL 38464 0 4
29632: ST_TO_ADDR
// ComStop ( flame ) ;
29633: LD_VAR 0 1
29637: PPUSH
29638: CALL_OW 141
// for i in list do
29642: LD_ADDR_VAR 0 6
29646: PUSH
29647: LD_VAR 0 13
29651: PUSH
29652: FOR_IN
29653: IFFALSE 29684
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
29655: LD_VAR 0 1
29659: PPUSH
29660: LD_VAR 0 6
29664: PUSH
29665: LD_INT 1
29667: ARRAY
29668: PPUSH
29669: LD_VAR 0 6
29673: PUSH
29674: LD_INT 2
29676: ARRAY
29677: PPUSH
29678: CALL_OW 176
29682: GO 29652
29684: POP
29685: POP
// repeat wait ( 0 0$1 ) ;
29686: LD_INT 35
29688: PPUSH
29689: CALL_OW 67
// task := GetTaskList ( flame ) ;
29693: LD_ADDR_VAR 0 14
29697: PUSH
29698: LD_VAR 0 1
29702: PPUSH
29703: CALL_OW 437
29707: ST_TO_ADDR
// if not task then
29708: LD_VAR 0 14
29712: NOT
29713: IFFALSE 29717
// exit ;
29715: GO 29851
// if task [ 1 ] [ 1 ] <> | then
29717: LD_VAR 0 14
29721: PUSH
29722: LD_INT 1
29724: ARRAY
29725: PUSH
29726: LD_INT 1
29728: ARRAY
29729: PUSH
29730: LD_STRING |
29732: NONEQUAL
29733: IFFALSE 29737
// exit ;
29735: GO 29851
// _x := task [ 1 ] [ 2 ] ;
29737: LD_ADDR_VAR 0 11
29741: PUSH
29742: LD_VAR 0 14
29746: PUSH
29747: LD_INT 1
29749: ARRAY
29750: PUSH
29751: LD_INT 2
29753: ARRAY
29754: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
29755: LD_ADDR_VAR 0 12
29759: PUSH
29760: LD_VAR 0 14
29764: PUSH
29765: LD_INT 1
29767: ARRAY
29768: PUSH
29769: LD_INT 3
29771: ARRAY
29772: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
29773: LD_VAR 0 11
29777: PPUSH
29778: LD_VAR 0 12
29782: PPUSH
29783: CALL_OW 351
29787: NOT
29788: PUSH
29789: LD_VAR 0 11
29793: PPUSH
29794: LD_VAR 0 12
29798: PPUSH
29799: CALL_OW 554
29803: NOT
29804: OR
29805: IFFALSE 29839
// begin task := Delete ( task , 1 ) ;
29807: LD_ADDR_VAR 0 14
29811: PUSH
29812: LD_VAR 0 14
29816: PPUSH
29817: LD_INT 1
29819: PPUSH
29820: CALL_OW 3
29824: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
29825: LD_VAR 0 1
29829: PPUSH
29830: LD_VAR 0 14
29834: PPUSH
29835: CALL_OW 446
// end ; until not HasTask ( flame ) ;
29839: LD_VAR 0 1
29843: PPUSH
29844: CALL_OW 314
29848: NOT
29849: IFFALSE 29686
// end ;
29851: LD_VAR 0 5
29855: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
29856: LD_EXP 83
29860: NOT
29861: IFFALSE 29911
29863: GO 29865
29865: DISABLE
// begin initHack := true ;
29866: LD_ADDR_EXP 83
29870: PUSH
29871: LD_INT 1
29873: ST_TO_ADDR
// hackTanks := [ ] ;
29874: LD_ADDR_EXP 84
29878: PUSH
29879: EMPTY
29880: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
29881: LD_ADDR_EXP 85
29885: PUSH
29886: EMPTY
29887: ST_TO_ADDR
// hackLimit := 3 ;
29888: LD_ADDR_EXP 86
29892: PUSH
29893: LD_INT 3
29895: ST_TO_ADDR
// hackDist := 12 ;
29896: LD_ADDR_EXP 87
29900: PUSH
29901: LD_INT 12
29903: ST_TO_ADDR
// hackCounter := [ ] ;
29904: LD_ADDR_EXP 88
29908: PUSH
29909: EMPTY
29910: ST_TO_ADDR
// end ;
29911: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
29912: LD_EXP 83
29916: PUSH
29917: LD_INT 34
29919: PUSH
29920: LD_INT 99
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: PPUSH
29927: CALL_OW 69
29931: AND
29932: IFFALSE 30185
29934: GO 29936
29936: DISABLE
29937: LD_INT 0
29939: PPUSH
29940: PPUSH
// begin enable ;
29941: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
29942: LD_ADDR_VAR 0 1
29946: PUSH
29947: LD_INT 34
29949: PUSH
29950: LD_INT 99
29952: PUSH
29953: EMPTY
29954: LIST
29955: LIST
29956: PPUSH
29957: CALL_OW 69
29961: PUSH
29962: FOR_IN
29963: IFFALSE 30183
// begin if not i in hackTanks then
29965: LD_VAR 0 1
29969: PUSH
29970: LD_EXP 84
29974: IN
29975: NOT
29976: IFFALSE 30059
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
29978: LD_ADDR_EXP 84
29982: PUSH
29983: LD_EXP 84
29987: PPUSH
29988: LD_EXP 84
29992: PUSH
29993: LD_INT 1
29995: PLUS
29996: PPUSH
29997: LD_VAR 0 1
30001: PPUSH
30002: CALL_OW 1
30006: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
30007: LD_ADDR_EXP 85
30011: PUSH
30012: LD_EXP 85
30016: PPUSH
30017: LD_EXP 85
30021: PUSH
30022: LD_INT 1
30024: PLUS
30025: PPUSH
30026: EMPTY
30027: PPUSH
30028: CALL_OW 1
30032: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
30033: LD_ADDR_EXP 88
30037: PUSH
30038: LD_EXP 88
30042: PPUSH
30043: LD_EXP 88
30047: PUSH
30048: LD_INT 1
30050: PLUS
30051: PPUSH
30052: EMPTY
30053: PPUSH
30054: CALL_OW 1
30058: ST_TO_ADDR
// end ; if not IsOk ( i ) then
30059: LD_VAR 0 1
30063: PPUSH
30064: CALL_OW 302
30068: NOT
30069: IFFALSE 30082
// begin HackUnlinkAll ( i ) ;
30071: LD_VAR 0 1
30075: PPUSH
30076: CALL 30188 0 1
// continue ;
30080: GO 29962
// end ; HackCheckCapturedStatus ( i ) ;
30082: LD_VAR 0 1
30086: PPUSH
30087: CALL 30631 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
30091: LD_ADDR_VAR 0 2
30095: PUSH
30096: LD_INT 81
30098: PUSH
30099: LD_VAR 0 1
30103: PPUSH
30104: CALL_OW 255
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: PUSH
30113: LD_INT 33
30115: PUSH
30116: LD_INT 3
30118: PUSH
30119: EMPTY
30120: LIST
30121: LIST
30122: PUSH
30123: LD_INT 91
30125: PUSH
30126: LD_VAR 0 1
30130: PUSH
30131: LD_EXP 87
30135: PUSH
30136: EMPTY
30137: LIST
30138: LIST
30139: LIST
30140: PUSH
30141: LD_INT 50
30143: PUSH
30144: EMPTY
30145: LIST
30146: PUSH
30147: EMPTY
30148: LIST
30149: LIST
30150: LIST
30151: LIST
30152: PPUSH
30153: CALL_OW 69
30157: ST_TO_ADDR
// if not tmp then
30158: LD_VAR 0 2
30162: NOT
30163: IFFALSE 30167
// continue ;
30165: GO 29962
// HackLink ( i , tmp ) ;
30167: LD_VAR 0 1
30171: PPUSH
30172: LD_VAR 0 2
30176: PPUSH
30177: CALL 30324 0 2
// end ;
30181: GO 29962
30183: POP
30184: POP
// end ;
30185: PPOPN 2
30187: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
30188: LD_INT 0
30190: PPUSH
30191: PPUSH
30192: PPUSH
// if not hack in hackTanks then
30193: LD_VAR 0 1
30197: PUSH
30198: LD_EXP 84
30202: IN
30203: NOT
30204: IFFALSE 30208
// exit ;
30206: GO 30319
// index := GetElementIndex ( hackTanks , hack ) ;
30208: LD_ADDR_VAR 0 4
30212: PUSH
30213: LD_EXP 84
30217: PPUSH
30218: LD_VAR 0 1
30222: PPUSH
30223: CALL 37761 0 2
30227: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
30228: LD_EXP 85
30232: PUSH
30233: LD_VAR 0 4
30237: ARRAY
30238: IFFALSE 30319
// begin for i in hackTanksCaptured [ index ] do
30240: LD_ADDR_VAR 0 3
30244: PUSH
30245: LD_EXP 85
30249: PUSH
30250: LD_VAR 0 4
30254: ARRAY
30255: PUSH
30256: FOR_IN
30257: IFFALSE 30283
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
30259: LD_VAR 0 3
30263: PUSH
30264: LD_INT 1
30266: ARRAY
30267: PPUSH
30268: LD_VAR 0 3
30272: PUSH
30273: LD_INT 2
30275: ARRAY
30276: PPUSH
30277: CALL_OW 235
30281: GO 30256
30283: POP
30284: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
30285: LD_ADDR_EXP 85
30289: PUSH
30290: LD_EXP 85
30294: PPUSH
30295: LD_VAR 0 4
30299: PPUSH
30300: EMPTY
30301: PPUSH
30302: CALL_OW 1
30306: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
30307: LD_VAR 0 1
30311: PPUSH
30312: LD_INT 0
30314: PPUSH
30315: CALL_OW 505
// end ; end ;
30319: LD_VAR 0 2
30323: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
30324: LD_INT 0
30326: PPUSH
30327: PPUSH
30328: PPUSH
// if not hack in hackTanks or not vehicles then
30329: LD_VAR 0 1
30333: PUSH
30334: LD_EXP 84
30338: IN
30339: NOT
30340: PUSH
30341: LD_VAR 0 2
30345: NOT
30346: OR
30347: IFFALSE 30351
// exit ;
30349: GO 30626
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
30351: LD_ADDR_VAR 0 2
30355: PUSH
30356: LD_VAR 0 1
30360: PPUSH
30361: LD_VAR 0 2
30365: PPUSH
30366: LD_INT 1
30368: PPUSH
30369: LD_INT 1
30371: PPUSH
30372: CALL 38411 0 4
30376: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
30377: LD_ADDR_VAR 0 5
30381: PUSH
30382: LD_EXP 84
30386: PPUSH
30387: LD_VAR 0 1
30391: PPUSH
30392: CALL 37761 0 2
30396: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
30397: LD_EXP 85
30401: PUSH
30402: LD_VAR 0 5
30406: ARRAY
30407: PUSH
30408: LD_EXP 86
30412: LESS
30413: IFFALSE 30602
// begin for i := 1 to vehicles do
30415: LD_ADDR_VAR 0 4
30419: PUSH
30420: DOUBLE
30421: LD_INT 1
30423: DEC
30424: ST_TO_ADDR
30425: LD_VAR 0 2
30429: PUSH
30430: FOR_TO
30431: IFFALSE 30600
// begin if hackTanksCaptured [ index ] = hackLimit then
30433: LD_EXP 85
30437: PUSH
30438: LD_VAR 0 5
30442: ARRAY
30443: PUSH
30444: LD_EXP 86
30448: EQUAL
30449: IFFALSE 30453
// break ;
30451: GO 30600
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
30453: LD_ADDR_EXP 88
30457: PUSH
30458: LD_EXP 88
30462: PPUSH
30463: LD_VAR 0 5
30467: PPUSH
30468: LD_EXP 88
30472: PUSH
30473: LD_VAR 0 5
30477: ARRAY
30478: PUSH
30479: LD_INT 1
30481: PLUS
30482: PPUSH
30483: CALL_OW 1
30487: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
30488: LD_ADDR_EXP 85
30492: PUSH
30493: LD_EXP 85
30497: PPUSH
30498: LD_VAR 0 5
30502: PUSH
30503: LD_EXP 85
30507: PUSH
30508: LD_VAR 0 5
30512: ARRAY
30513: PUSH
30514: LD_INT 1
30516: PLUS
30517: PUSH
30518: EMPTY
30519: LIST
30520: LIST
30521: PPUSH
30522: LD_VAR 0 2
30526: PUSH
30527: LD_VAR 0 4
30531: ARRAY
30532: PUSH
30533: LD_VAR 0 2
30537: PUSH
30538: LD_VAR 0 4
30542: ARRAY
30543: PPUSH
30544: CALL_OW 255
30548: PUSH
30549: EMPTY
30550: LIST
30551: LIST
30552: PPUSH
30553: CALL 37976 0 3
30557: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
30558: LD_VAR 0 2
30562: PUSH
30563: LD_VAR 0 4
30567: ARRAY
30568: PPUSH
30569: LD_VAR 0 1
30573: PPUSH
30574: CALL_OW 255
30578: PPUSH
30579: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
30583: LD_VAR 0 2
30587: PUSH
30588: LD_VAR 0 4
30592: ARRAY
30593: PPUSH
30594: CALL_OW 141
// end ;
30598: GO 30430
30600: POP
30601: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30602: LD_VAR 0 1
30606: PPUSH
30607: LD_EXP 85
30611: PUSH
30612: LD_VAR 0 5
30616: ARRAY
30617: PUSH
30618: LD_INT 0
30620: PLUS
30621: PPUSH
30622: CALL_OW 505
// end ;
30626: LD_VAR 0 3
30630: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
30631: LD_INT 0
30633: PPUSH
30634: PPUSH
30635: PPUSH
30636: PPUSH
// if not hack in hackTanks then
30637: LD_VAR 0 1
30641: PUSH
30642: LD_EXP 84
30646: IN
30647: NOT
30648: IFFALSE 30652
// exit ;
30650: GO 30892
// index := GetElementIndex ( hackTanks , hack ) ;
30652: LD_ADDR_VAR 0 4
30656: PUSH
30657: LD_EXP 84
30661: PPUSH
30662: LD_VAR 0 1
30666: PPUSH
30667: CALL 37761 0 2
30671: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
30672: LD_ADDR_VAR 0 3
30676: PUSH
30677: DOUBLE
30678: LD_EXP 85
30682: PUSH
30683: LD_VAR 0 4
30687: ARRAY
30688: INC
30689: ST_TO_ADDR
30690: LD_INT 1
30692: PUSH
30693: FOR_DOWNTO
30694: IFFALSE 30866
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
30696: LD_ADDR_VAR 0 5
30700: PUSH
30701: LD_EXP 85
30705: PUSH
30706: LD_VAR 0 4
30710: ARRAY
30711: PUSH
30712: LD_VAR 0 3
30716: ARRAY
30717: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
30718: LD_VAR 0 5
30722: PUSH
30723: LD_INT 1
30725: ARRAY
30726: PPUSH
30727: CALL_OW 302
30731: NOT
30732: PUSH
30733: LD_VAR 0 5
30737: PUSH
30738: LD_INT 1
30740: ARRAY
30741: PPUSH
30742: CALL_OW 255
30746: PUSH
30747: LD_VAR 0 1
30751: PPUSH
30752: CALL_OW 255
30756: NONEQUAL
30757: OR
30758: IFFALSE 30864
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
30760: LD_VAR 0 5
30764: PUSH
30765: LD_INT 1
30767: ARRAY
30768: PPUSH
30769: CALL_OW 305
30773: PUSH
30774: LD_VAR 0 5
30778: PUSH
30779: LD_INT 1
30781: ARRAY
30782: PPUSH
30783: CALL_OW 255
30787: PUSH
30788: LD_VAR 0 1
30792: PPUSH
30793: CALL_OW 255
30797: EQUAL
30798: AND
30799: IFFALSE 30823
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
30801: LD_VAR 0 5
30805: PUSH
30806: LD_INT 1
30808: ARRAY
30809: PPUSH
30810: LD_VAR 0 5
30814: PUSH
30815: LD_INT 2
30817: ARRAY
30818: PPUSH
30819: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
30823: LD_ADDR_EXP 85
30827: PUSH
30828: LD_EXP 85
30832: PPUSH
30833: LD_VAR 0 4
30837: PPUSH
30838: LD_EXP 85
30842: PUSH
30843: LD_VAR 0 4
30847: ARRAY
30848: PPUSH
30849: LD_VAR 0 3
30853: PPUSH
30854: CALL_OW 3
30858: PPUSH
30859: CALL_OW 1
30863: ST_TO_ADDR
// end ; end ;
30864: GO 30693
30866: POP
30867: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30868: LD_VAR 0 1
30872: PPUSH
30873: LD_EXP 85
30877: PUSH
30878: LD_VAR 0 4
30882: ARRAY
30883: PUSH
30884: LD_INT 0
30886: PLUS
30887: PPUSH
30888: CALL_OW 505
// end ;
30892: LD_VAR 0 2
30896: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
30897: LD_INT 0
30899: PPUSH
30900: PPUSH
30901: PPUSH
30902: PPUSH
// if not hack in hackTanks then
30903: LD_VAR 0 1
30907: PUSH
30908: LD_EXP 84
30912: IN
30913: NOT
30914: IFFALSE 30918
// exit ;
30916: GO 31003
// index := GetElementIndex ( hackTanks , hack ) ;
30918: LD_ADDR_VAR 0 5
30922: PUSH
30923: LD_EXP 84
30927: PPUSH
30928: LD_VAR 0 1
30932: PPUSH
30933: CALL 37761 0 2
30937: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
30938: LD_ADDR_VAR 0 4
30942: PUSH
30943: DOUBLE
30944: LD_INT 1
30946: DEC
30947: ST_TO_ADDR
30948: LD_EXP 85
30952: PUSH
30953: LD_VAR 0 5
30957: ARRAY
30958: PUSH
30959: FOR_TO
30960: IFFALSE 31001
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
30962: LD_EXP 85
30966: PUSH
30967: LD_VAR 0 5
30971: ARRAY
30972: PUSH
30973: LD_VAR 0 4
30977: ARRAY
30978: PUSH
30979: LD_INT 1
30981: ARRAY
30982: PUSH
30983: LD_VAR 0 2
30987: EQUAL
30988: IFFALSE 30999
// KillUnit ( vehicle ) ;
30990: LD_VAR 0 2
30994: PPUSH
30995: CALL_OW 66
30999: GO 30959
31001: POP
31002: POP
// end ;
31003: LD_VAR 0 3
31007: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
31008: LD_EXP 89
31012: NOT
31013: IFFALSE 31048
31015: GO 31017
31017: DISABLE
// begin initMiner := true ;
31018: LD_ADDR_EXP 89
31022: PUSH
31023: LD_INT 1
31025: ST_TO_ADDR
// minersList := [ ] ;
31026: LD_ADDR_EXP 90
31030: PUSH
31031: EMPTY
31032: ST_TO_ADDR
// minerMinesList := [ ] ;
31033: LD_ADDR_EXP 91
31037: PUSH
31038: EMPTY
31039: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
31040: LD_ADDR_EXP 92
31044: PUSH
31045: LD_INT 5
31047: ST_TO_ADDR
// end ;
31048: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
31049: LD_EXP 89
31053: PUSH
31054: LD_INT 34
31056: PUSH
31057: LD_INT 81
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: PPUSH
31064: CALL_OW 69
31068: AND
31069: IFFALSE 31530
31071: GO 31073
31073: DISABLE
31074: LD_INT 0
31076: PPUSH
31077: PPUSH
31078: PPUSH
31079: PPUSH
// begin enable ;
31080: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
31081: LD_ADDR_VAR 0 1
31085: PUSH
31086: LD_INT 34
31088: PUSH
31089: LD_INT 81
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: PPUSH
31096: CALL_OW 69
31100: PUSH
31101: FOR_IN
31102: IFFALSE 31174
// begin if not i in minersList then
31104: LD_VAR 0 1
31108: PUSH
31109: LD_EXP 90
31113: IN
31114: NOT
31115: IFFALSE 31172
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
31117: LD_ADDR_EXP 90
31121: PUSH
31122: LD_EXP 90
31126: PPUSH
31127: LD_EXP 90
31131: PUSH
31132: LD_INT 1
31134: PLUS
31135: PPUSH
31136: LD_VAR 0 1
31140: PPUSH
31141: CALL_OW 1
31145: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
31146: LD_ADDR_EXP 91
31150: PUSH
31151: LD_EXP 91
31155: PPUSH
31156: LD_EXP 91
31160: PUSH
31161: LD_INT 1
31163: PLUS
31164: PPUSH
31165: EMPTY
31166: PPUSH
31167: CALL_OW 1
31171: ST_TO_ADDR
// end end ;
31172: GO 31101
31174: POP
31175: POP
// for i := minerMinesList downto 1 do
31176: LD_ADDR_VAR 0 1
31180: PUSH
31181: DOUBLE
31182: LD_EXP 91
31186: INC
31187: ST_TO_ADDR
31188: LD_INT 1
31190: PUSH
31191: FOR_DOWNTO
31192: IFFALSE 31528
// begin if IsLive ( minersList [ i ] ) then
31194: LD_EXP 90
31198: PUSH
31199: LD_VAR 0 1
31203: ARRAY
31204: PPUSH
31205: CALL_OW 300
31209: IFFALSE 31237
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
31211: LD_EXP 90
31215: PUSH
31216: LD_VAR 0 1
31220: ARRAY
31221: PPUSH
31222: LD_EXP 91
31226: PUSH
31227: LD_VAR 0 1
31231: ARRAY
31232: PPUSH
31233: CALL_OW 505
// if not minerMinesList [ i ] then
31237: LD_EXP 91
31241: PUSH
31242: LD_VAR 0 1
31246: ARRAY
31247: NOT
31248: IFFALSE 31252
// continue ;
31250: GO 31191
// for j := minerMinesList [ i ] downto 1 do
31252: LD_ADDR_VAR 0 2
31256: PUSH
31257: DOUBLE
31258: LD_EXP 91
31262: PUSH
31263: LD_VAR 0 1
31267: ARRAY
31268: INC
31269: ST_TO_ADDR
31270: LD_INT 1
31272: PUSH
31273: FOR_DOWNTO
31274: IFFALSE 31524
// begin side := GetSide ( minersList [ i ] ) ;
31276: LD_ADDR_VAR 0 3
31280: PUSH
31281: LD_EXP 90
31285: PUSH
31286: LD_VAR 0 1
31290: ARRAY
31291: PPUSH
31292: CALL_OW 255
31296: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
31297: LD_ADDR_VAR 0 4
31301: PUSH
31302: LD_EXP 91
31306: PUSH
31307: LD_VAR 0 1
31311: ARRAY
31312: PUSH
31313: LD_VAR 0 2
31317: ARRAY
31318: PUSH
31319: LD_INT 1
31321: ARRAY
31322: PPUSH
31323: LD_EXP 91
31327: PUSH
31328: LD_VAR 0 1
31332: ARRAY
31333: PUSH
31334: LD_VAR 0 2
31338: ARRAY
31339: PUSH
31340: LD_INT 2
31342: ARRAY
31343: PPUSH
31344: CALL_OW 428
31348: ST_TO_ADDR
// if not tmp then
31349: LD_VAR 0 4
31353: NOT
31354: IFFALSE 31358
// continue ;
31356: GO 31273
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
31358: LD_VAR 0 4
31362: PUSH
31363: LD_INT 81
31365: PUSH
31366: LD_VAR 0 3
31370: PUSH
31371: EMPTY
31372: LIST
31373: LIST
31374: PPUSH
31375: CALL_OW 69
31379: IN
31380: PUSH
31381: LD_EXP 91
31385: PUSH
31386: LD_VAR 0 1
31390: ARRAY
31391: PUSH
31392: LD_VAR 0 2
31396: ARRAY
31397: PUSH
31398: LD_INT 1
31400: ARRAY
31401: PPUSH
31402: LD_EXP 91
31406: PUSH
31407: LD_VAR 0 1
31411: ARRAY
31412: PUSH
31413: LD_VAR 0 2
31417: ARRAY
31418: PUSH
31419: LD_INT 2
31421: ARRAY
31422: PPUSH
31423: CALL_OW 458
31427: AND
31428: IFFALSE 31522
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
31430: LD_EXP 91
31434: PUSH
31435: LD_VAR 0 1
31439: ARRAY
31440: PUSH
31441: LD_VAR 0 2
31445: ARRAY
31446: PUSH
31447: LD_INT 1
31449: ARRAY
31450: PPUSH
31451: LD_EXP 91
31455: PUSH
31456: LD_VAR 0 1
31460: ARRAY
31461: PUSH
31462: LD_VAR 0 2
31466: ARRAY
31467: PUSH
31468: LD_INT 2
31470: ARRAY
31471: PPUSH
31472: LD_VAR 0 3
31476: PPUSH
31477: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
31481: LD_ADDR_EXP 91
31485: PUSH
31486: LD_EXP 91
31490: PPUSH
31491: LD_VAR 0 1
31495: PPUSH
31496: LD_EXP 91
31500: PUSH
31501: LD_VAR 0 1
31505: ARRAY
31506: PPUSH
31507: LD_VAR 0 2
31511: PPUSH
31512: CALL_OW 3
31516: PPUSH
31517: CALL_OW 1
31521: ST_TO_ADDR
// end ; end ;
31522: GO 31273
31524: POP
31525: POP
// end ;
31526: GO 31191
31528: POP
31529: POP
// end ;
31530: PPOPN 4
31532: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
31533: LD_INT 0
31535: PPUSH
31536: PPUSH
// result := false ;
31537: LD_ADDR_VAR 0 4
31541: PUSH
31542: LD_INT 0
31544: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
31545: LD_VAR 0 1
31549: PPUSH
31550: CALL_OW 264
31554: PUSH
31555: LD_INT 81
31557: EQUAL
31558: NOT
31559: IFFALSE 31563
// exit ;
31561: GO 31803
// index := GetElementIndex ( minersList , unit ) ;
31563: LD_ADDR_VAR 0 5
31567: PUSH
31568: LD_EXP 90
31572: PPUSH
31573: LD_VAR 0 1
31577: PPUSH
31578: CALL 37761 0 2
31582: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
31583: LD_EXP 91
31587: PUSH
31588: LD_VAR 0 5
31592: ARRAY
31593: PUSH
31594: LD_EXP 92
31598: GREATEREQUAL
31599: IFFALSE 31603
// exit ;
31601: GO 31803
// ComMoveXY ( unit , x , y ) ;
31603: LD_VAR 0 1
31607: PPUSH
31608: LD_VAR 0 2
31612: PPUSH
31613: LD_VAR 0 3
31617: PPUSH
31618: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31622: LD_INT 35
31624: PPUSH
31625: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
31629: LD_VAR 0 1
31633: PPUSH
31634: LD_VAR 0 2
31638: PPUSH
31639: LD_VAR 0 3
31643: PPUSH
31644: CALL 69502 0 3
31648: NOT
31649: PUSH
31650: LD_VAR 0 1
31654: PPUSH
31655: CALL_OW 314
31659: AND
31660: IFFALSE 31664
// exit ;
31662: GO 31803
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
31664: LD_VAR 0 2
31668: PPUSH
31669: LD_VAR 0 3
31673: PPUSH
31674: CALL_OW 428
31678: PUSH
31679: LD_VAR 0 1
31683: EQUAL
31684: PUSH
31685: LD_VAR 0 1
31689: PPUSH
31690: CALL_OW 314
31694: NOT
31695: AND
31696: IFFALSE 31622
// PlaySoundXY ( x , y , PlantMine ) ;
31698: LD_VAR 0 2
31702: PPUSH
31703: LD_VAR 0 3
31707: PPUSH
31708: LD_STRING PlantMine
31710: PPUSH
31711: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
31715: LD_VAR 0 2
31719: PPUSH
31720: LD_VAR 0 3
31724: PPUSH
31725: LD_VAR 0 1
31729: PPUSH
31730: CALL_OW 255
31734: PPUSH
31735: LD_INT 0
31737: PPUSH
31738: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
31742: LD_ADDR_EXP 91
31746: PUSH
31747: LD_EXP 91
31751: PPUSH
31752: LD_VAR 0 5
31756: PUSH
31757: LD_EXP 91
31761: PUSH
31762: LD_VAR 0 5
31766: ARRAY
31767: PUSH
31768: LD_INT 1
31770: PLUS
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: PPUSH
31776: LD_VAR 0 2
31780: PUSH
31781: LD_VAR 0 3
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: PPUSH
31790: CALL 37976 0 3
31794: ST_TO_ADDR
// result := true ;
31795: LD_ADDR_VAR 0 4
31799: PUSH
31800: LD_INT 1
31802: ST_TO_ADDR
// end ;
31803: LD_VAR 0 4
31807: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
31808: LD_INT 0
31810: PPUSH
31811: PPUSH
31812: PPUSH
// if not unit in minersList then
31813: LD_VAR 0 1
31817: PUSH
31818: LD_EXP 90
31822: IN
31823: NOT
31824: IFFALSE 31828
// exit ;
31826: GO 32220
// index := GetElementIndex ( minersList , unit ) ;
31828: LD_ADDR_VAR 0 6
31832: PUSH
31833: LD_EXP 90
31837: PPUSH
31838: LD_VAR 0 1
31842: PPUSH
31843: CALL 37761 0 2
31847: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
31848: LD_ADDR_VAR 0 5
31852: PUSH
31853: DOUBLE
31854: LD_EXP 91
31858: PUSH
31859: LD_VAR 0 6
31863: ARRAY
31864: INC
31865: ST_TO_ADDR
31866: LD_INT 1
31868: PUSH
31869: FOR_DOWNTO
31870: IFFALSE 32031
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
31872: LD_EXP 91
31876: PUSH
31877: LD_VAR 0 6
31881: ARRAY
31882: PUSH
31883: LD_VAR 0 5
31887: ARRAY
31888: PUSH
31889: LD_INT 1
31891: ARRAY
31892: PUSH
31893: LD_VAR 0 2
31897: EQUAL
31898: PUSH
31899: LD_EXP 91
31903: PUSH
31904: LD_VAR 0 6
31908: ARRAY
31909: PUSH
31910: LD_VAR 0 5
31914: ARRAY
31915: PUSH
31916: LD_INT 2
31918: ARRAY
31919: PUSH
31920: LD_VAR 0 3
31924: EQUAL
31925: AND
31926: IFFALSE 32029
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31928: LD_EXP 91
31932: PUSH
31933: LD_VAR 0 6
31937: ARRAY
31938: PUSH
31939: LD_VAR 0 5
31943: ARRAY
31944: PUSH
31945: LD_INT 1
31947: ARRAY
31948: PPUSH
31949: LD_EXP 91
31953: PUSH
31954: LD_VAR 0 6
31958: ARRAY
31959: PUSH
31960: LD_VAR 0 5
31964: ARRAY
31965: PUSH
31966: LD_INT 2
31968: ARRAY
31969: PPUSH
31970: LD_VAR 0 1
31974: PPUSH
31975: CALL_OW 255
31979: PPUSH
31980: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31984: LD_ADDR_EXP 91
31988: PUSH
31989: LD_EXP 91
31993: PPUSH
31994: LD_VAR 0 6
31998: PPUSH
31999: LD_EXP 91
32003: PUSH
32004: LD_VAR 0 6
32008: ARRAY
32009: PPUSH
32010: LD_VAR 0 5
32014: PPUSH
32015: CALL_OW 3
32019: PPUSH
32020: CALL_OW 1
32024: ST_TO_ADDR
// exit ;
32025: POP
32026: POP
32027: GO 32220
// end ; end ;
32029: GO 31869
32031: POP
32032: POP
// for i := minerMinesList [ index ] downto 1 do
32033: LD_ADDR_VAR 0 5
32037: PUSH
32038: DOUBLE
32039: LD_EXP 91
32043: PUSH
32044: LD_VAR 0 6
32048: ARRAY
32049: INC
32050: ST_TO_ADDR
32051: LD_INT 1
32053: PUSH
32054: FOR_DOWNTO
32055: IFFALSE 32218
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
32057: LD_EXP 91
32061: PUSH
32062: LD_VAR 0 6
32066: ARRAY
32067: PUSH
32068: LD_VAR 0 5
32072: ARRAY
32073: PUSH
32074: LD_INT 1
32076: ARRAY
32077: PPUSH
32078: LD_EXP 91
32082: PUSH
32083: LD_VAR 0 6
32087: ARRAY
32088: PUSH
32089: LD_VAR 0 5
32093: ARRAY
32094: PUSH
32095: LD_INT 2
32097: ARRAY
32098: PPUSH
32099: LD_VAR 0 2
32103: PPUSH
32104: LD_VAR 0 3
32108: PPUSH
32109: CALL_OW 298
32113: PUSH
32114: LD_INT 6
32116: LESS
32117: IFFALSE 32216
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
32119: LD_EXP 91
32123: PUSH
32124: LD_VAR 0 6
32128: ARRAY
32129: PUSH
32130: LD_VAR 0 5
32134: ARRAY
32135: PUSH
32136: LD_INT 1
32138: ARRAY
32139: PPUSH
32140: LD_EXP 91
32144: PUSH
32145: LD_VAR 0 6
32149: ARRAY
32150: PUSH
32151: LD_VAR 0 5
32155: ARRAY
32156: PUSH
32157: LD_INT 2
32159: ARRAY
32160: PPUSH
32161: LD_VAR 0 1
32165: PPUSH
32166: CALL_OW 255
32170: PPUSH
32171: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
32175: LD_ADDR_EXP 91
32179: PUSH
32180: LD_EXP 91
32184: PPUSH
32185: LD_VAR 0 6
32189: PPUSH
32190: LD_EXP 91
32194: PUSH
32195: LD_VAR 0 6
32199: ARRAY
32200: PPUSH
32201: LD_VAR 0 5
32205: PPUSH
32206: CALL_OW 3
32210: PPUSH
32211: CALL_OW 1
32215: ST_TO_ADDR
// end ; end ;
32216: GO 32054
32218: POP
32219: POP
// end ;
32220: LD_VAR 0 4
32224: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
32225: LD_INT 0
32227: PPUSH
32228: PPUSH
32229: PPUSH
32230: PPUSH
32231: PPUSH
32232: PPUSH
32233: PPUSH
32234: PPUSH
32235: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
32236: LD_VAR 0 1
32240: PPUSH
32241: CALL_OW 264
32245: PUSH
32246: LD_INT 81
32248: EQUAL
32249: NOT
32250: PUSH
32251: LD_VAR 0 1
32255: PUSH
32256: LD_EXP 90
32260: IN
32261: NOT
32262: OR
32263: IFFALSE 32267
// exit ;
32265: GO 32589
// index := GetElementIndex ( minersList , unit ) ;
32267: LD_ADDR_VAR 0 6
32271: PUSH
32272: LD_EXP 90
32276: PPUSH
32277: LD_VAR 0 1
32281: PPUSH
32282: CALL 37761 0 2
32286: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
32287: LD_ADDR_VAR 0 8
32291: PUSH
32292: LD_EXP 92
32296: PUSH
32297: LD_EXP 91
32301: PUSH
32302: LD_VAR 0 6
32306: ARRAY
32307: MINUS
32308: ST_TO_ADDR
// if not minesFreeAmount then
32309: LD_VAR 0 8
32313: NOT
32314: IFFALSE 32318
// exit ;
32316: GO 32589
// tmp := [ ] ;
32318: LD_ADDR_VAR 0 7
32322: PUSH
32323: EMPTY
32324: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
32325: LD_ADDR_VAR 0 5
32329: PUSH
32330: DOUBLE
32331: LD_INT 1
32333: DEC
32334: ST_TO_ADDR
32335: LD_VAR 0 8
32339: PUSH
32340: FOR_TO
32341: IFFALSE 32536
// begin _d := rand ( 0 , 5 ) ;
32343: LD_ADDR_VAR 0 11
32347: PUSH
32348: LD_INT 0
32350: PPUSH
32351: LD_INT 5
32353: PPUSH
32354: CALL_OW 12
32358: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
32359: LD_ADDR_VAR 0 12
32363: PUSH
32364: LD_INT 2
32366: PPUSH
32367: LD_INT 6
32369: PPUSH
32370: CALL_OW 12
32374: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
32375: LD_ADDR_VAR 0 9
32379: PUSH
32380: LD_VAR 0 2
32384: PPUSH
32385: LD_VAR 0 11
32389: PPUSH
32390: LD_VAR 0 12
32394: PPUSH
32395: CALL_OW 272
32399: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
32400: LD_ADDR_VAR 0 10
32404: PUSH
32405: LD_VAR 0 3
32409: PPUSH
32410: LD_VAR 0 11
32414: PPUSH
32415: LD_VAR 0 12
32419: PPUSH
32420: CALL_OW 273
32424: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
32425: LD_VAR 0 9
32429: PPUSH
32430: LD_VAR 0 10
32434: PPUSH
32435: CALL_OW 488
32439: PUSH
32440: LD_VAR 0 9
32444: PUSH
32445: LD_VAR 0 10
32449: PUSH
32450: EMPTY
32451: LIST
32452: LIST
32453: PUSH
32454: LD_VAR 0 7
32458: IN
32459: NOT
32460: AND
32461: PUSH
32462: LD_VAR 0 9
32466: PPUSH
32467: LD_VAR 0 10
32471: PPUSH
32472: CALL_OW 458
32476: NOT
32477: AND
32478: IFFALSE 32520
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
32480: LD_ADDR_VAR 0 7
32484: PUSH
32485: LD_VAR 0 7
32489: PPUSH
32490: LD_VAR 0 7
32494: PUSH
32495: LD_INT 1
32497: PLUS
32498: PPUSH
32499: LD_VAR 0 9
32503: PUSH
32504: LD_VAR 0 10
32508: PUSH
32509: EMPTY
32510: LIST
32511: LIST
32512: PPUSH
32513: CALL_OW 1
32517: ST_TO_ADDR
32518: GO 32534
// i := i - 1 ;
32520: LD_ADDR_VAR 0 5
32524: PUSH
32525: LD_VAR 0 5
32529: PUSH
32530: LD_INT 1
32532: MINUS
32533: ST_TO_ADDR
// end ;
32534: GO 32340
32536: POP
32537: POP
// for i in tmp do
32538: LD_ADDR_VAR 0 5
32542: PUSH
32543: LD_VAR 0 7
32547: PUSH
32548: FOR_IN
32549: IFFALSE 32587
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
32551: LD_VAR 0 1
32555: PPUSH
32556: LD_VAR 0 5
32560: PUSH
32561: LD_INT 1
32563: ARRAY
32564: PPUSH
32565: LD_VAR 0 5
32569: PUSH
32570: LD_INT 2
32572: ARRAY
32573: PPUSH
32574: CALL 31533 0 3
32578: NOT
32579: IFFALSE 32585
// exit ;
32581: POP
32582: POP
32583: GO 32589
32585: GO 32548
32587: POP
32588: POP
// end ;
32589: LD_VAR 0 4
32593: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
32594: LD_INT 0
32596: PPUSH
32597: PPUSH
32598: PPUSH
32599: PPUSH
32600: PPUSH
32601: PPUSH
32602: PPUSH
// if not GetClass ( unit ) = class_sniper then
32603: LD_VAR 0 1
32607: PPUSH
32608: CALL_OW 257
32612: PUSH
32613: LD_INT 5
32615: EQUAL
32616: NOT
32617: IFFALSE 32621
// exit ;
32619: GO 33009
// dist := 8 ;
32621: LD_ADDR_VAR 0 5
32625: PUSH
32626: LD_INT 8
32628: ST_TO_ADDR
// viewRange := 12 ;
32629: LD_ADDR_VAR 0 7
32633: PUSH
32634: LD_INT 12
32636: ST_TO_ADDR
// side := GetSide ( unit ) ;
32637: LD_ADDR_VAR 0 6
32641: PUSH
32642: LD_VAR 0 1
32646: PPUSH
32647: CALL_OW 255
32651: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
32652: LD_INT 61
32654: PPUSH
32655: LD_VAR 0 6
32659: PPUSH
32660: CALL_OW 321
32664: PUSH
32665: LD_INT 2
32667: EQUAL
32668: IFFALSE 32678
// viewRange := 16 ;
32670: LD_ADDR_VAR 0 7
32674: PUSH
32675: LD_INT 16
32677: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
32678: LD_VAR 0 1
32682: PPUSH
32683: LD_VAR 0 2
32687: PPUSH
32688: LD_VAR 0 3
32692: PPUSH
32693: CALL_OW 297
32697: PUSH
32698: LD_VAR 0 5
32702: GREATER
32703: IFFALSE 32782
// begin ComMoveXY ( unit , x , y ) ;
32705: LD_VAR 0 1
32709: PPUSH
32710: LD_VAR 0 2
32714: PPUSH
32715: LD_VAR 0 3
32719: PPUSH
32720: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32724: LD_INT 35
32726: PPUSH
32727: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
32731: LD_VAR 0 1
32735: PPUSH
32736: LD_VAR 0 2
32740: PPUSH
32741: LD_VAR 0 3
32745: PPUSH
32746: CALL 69502 0 3
32750: NOT
32751: IFFALSE 32755
// exit ;
32753: GO 33009
// until GetDistUnitXY ( unit , x , y ) < dist ;
32755: LD_VAR 0 1
32759: PPUSH
32760: LD_VAR 0 2
32764: PPUSH
32765: LD_VAR 0 3
32769: PPUSH
32770: CALL_OW 297
32774: PUSH
32775: LD_VAR 0 5
32779: LESS
32780: IFFALSE 32724
// end ; ComTurnXY ( unit , x , y ) ;
32782: LD_VAR 0 1
32786: PPUSH
32787: LD_VAR 0 2
32791: PPUSH
32792: LD_VAR 0 3
32796: PPUSH
32797: CALL_OW 118
// wait ( 5 ) ;
32801: LD_INT 5
32803: PPUSH
32804: CALL_OW 67
// _d := GetDir ( unit ) ;
32808: LD_ADDR_VAR 0 10
32812: PUSH
32813: LD_VAR 0 1
32817: PPUSH
32818: CALL_OW 254
32822: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
32823: LD_ADDR_VAR 0 8
32827: PUSH
32828: LD_VAR 0 1
32832: PPUSH
32833: CALL_OW 250
32837: PPUSH
32838: LD_VAR 0 10
32842: PPUSH
32843: LD_VAR 0 5
32847: PPUSH
32848: CALL_OW 272
32852: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
32853: LD_ADDR_VAR 0 9
32857: PUSH
32858: LD_VAR 0 1
32862: PPUSH
32863: CALL_OW 251
32867: PPUSH
32868: LD_VAR 0 10
32872: PPUSH
32873: LD_VAR 0 5
32877: PPUSH
32878: CALL_OW 273
32882: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32883: LD_VAR 0 8
32887: PPUSH
32888: LD_VAR 0 9
32892: PPUSH
32893: CALL_OW 488
32897: NOT
32898: IFFALSE 32902
// exit ;
32900: GO 33009
// ComAnimCustom ( unit , 1 ) ;
32902: LD_VAR 0 1
32906: PPUSH
32907: LD_INT 1
32909: PPUSH
32910: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
32914: LD_VAR 0 8
32918: PPUSH
32919: LD_VAR 0 9
32923: PPUSH
32924: LD_VAR 0 6
32928: PPUSH
32929: LD_VAR 0 7
32933: PPUSH
32934: CALL_OW 330
// repeat wait ( 1 ) ;
32938: LD_INT 1
32940: PPUSH
32941: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
32945: LD_VAR 0 1
32949: PPUSH
32950: CALL_OW 316
32954: PUSH
32955: LD_VAR 0 1
32959: PPUSH
32960: CALL_OW 314
32964: OR
32965: PUSH
32966: LD_VAR 0 1
32970: PPUSH
32971: CALL_OW 302
32975: NOT
32976: OR
32977: PUSH
32978: LD_VAR 0 1
32982: PPUSH
32983: CALL_OW 301
32987: OR
32988: IFFALSE 32938
// RemoveSeeing ( _x , _y , side ) ;
32990: LD_VAR 0 8
32994: PPUSH
32995: LD_VAR 0 9
32999: PPUSH
33000: LD_VAR 0 6
33004: PPUSH
33005: CALL_OW 331
// end ; end_of_file
33009: LD_VAR 0 4
33013: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
33014: LD_INT 0
33016: PPUSH
33017: PPUSH
// if exist_mode then
33018: LD_VAR 0 2
33022: IFFALSE 33047
// unit := CreateCharacter ( prefix & ident ) else
33024: LD_ADDR_VAR 0 5
33028: PUSH
33029: LD_VAR 0 3
33033: PUSH
33034: LD_VAR 0 1
33038: STR
33039: PPUSH
33040: CALL_OW 34
33044: ST_TO_ADDR
33045: GO 33062
// unit := NewCharacter ( ident ) ;
33047: LD_ADDR_VAR 0 5
33051: PUSH
33052: LD_VAR 0 1
33056: PPUSH
33057: CALL_OW 25
33061: ST_TO_ADDR
// result := unit ;
33062: LD_ADDR_VAR 0 4
33066: PUSH
33067: LD_VAR 0 5
33071: ST_TO_ADDR
// end ;
33072: LD_VAR 0 4
33076: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
33077: LD_INT 0
33079: PPUSH
33080: PPUSH
// if not side or not nation then
33081: LD_VAR 0 1
33085: NOT
33086: PUSH
33087: LD_VAR 0 2
33091: NOT
33092: OR
33093: IFFALSE 33097
// exit ;
33095: GO 33865
// case nation of nation_american :
33097: LD_VAR 0 2
33101: PUSH
33102: LD_INT 1
33104: DOUBLE
33105: EQUAL
33106: IFTRUE 33110
33108: GO 33324
33110: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
33111: LD_ADDR_VAR 0 4
33115: PUSH
33116: LD_INT 35
33118: PUSH
33119: LD_INT 45
33121: PUSH
33122: LD_INT 46
33124: PUSH
33125: LD_INT 47
33127: PUSH
33128: LD_INT 82
33130: PUSH
33131: LD_INT 83
33133: PUSH
33134: LD_INT 84
33136: PUSH
33137: LD_INT 85
33139: PUSH
33140: LD_INT 86
33142: PUSH
33143: LD_INT 1
33145: PUSH
33146: LD_INT 2
33148: PUSH
33149: LD_INT 6
33151: PUSH
33152: LD_INT 15
33154: PUSH
33155: LD_INT 16
33157: PUSH
33158: LD_INT 7
33160: PUSH
33161: LD_INT 12
33163: PUSH
33164: LD_INT 13
33166: PUSH
33167: LD_INT 10
33169: PUSH
33170: LD_INT 14
33172: PUSH
33173: LD_INT 20
33175: PUSH
33176: LD_INT 21
33178: PUSH
33179: LD_INT 22
33181: PUSH
33182: LD_INT 25
33184: PUSH
33185: LD_INT 32
33187: PUSH
33188: LD_INT 27
33190: PUSH
33191: LD_INT 36
33193: PUSH
33194: LD_INT 69
33196: PUSH
33197: LD_INT 39
33199: PUSH
33200: LD_INT 34
33202: PUSH
33203: LD_INT 40
33205: PUSH
33206: LD_INT 48
33208: PUSH
33209: LD_INT 49
33211: PUSH
33212: LD_INT 50
33214: PUSH
33215: LD_INT 51
33217: PUSH
33218: LD_INT 52
33220: PUSH
33221: LD_INT 53
33223: PUSH
33224: LD_INT 54
33226: PUSH
33227: LD_INT 55
33229: PUSH
33230: LD_INT 56
33232: PUSH
33233: LD_INT 57
33235: PUSH
33236: LD_INT 58
33238: PUSH
33239: LD_INT 59
33241: PUSH
33242: LD_INT 60
33244: PUSH
33245: LD_INT 61
33247: PUSH
33248: LD_INT 62
33250: PUSH
33251: LD_INT 80
33253: PUSH
33254: LD_INT 82
33256: PUSH
33257: LD_INT 83
33259: PUSH
33260: LD_INT 84
33262: PUSH
33263: LD_INT 85
33265: PUSH
33266: LD_INT 86
33268: PUSH
33269: EMPTY
33270: LIST
33271: LIST
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: LIST
33280: LIST
33281: LIST
33282: LIST
33283: LIST
33284: LIST
33285: LIST
33286: LIST
33287: LIST
33288: LIST
33289: LIST
33290: LIST
33291: LIST
33292: LIST
33293: LIST
33294: LIST
33295: LIST
33296: LIST
33297: LIST
33298: LIST
33299: LIST
33300: LIST
33301: LIST
33302: LIST
33303: LIST
33304: LIST
33305: LIST
33306: LIST
33307: LIST
33308: LIST
33309: LIST
33310: LIST
33311: LIST
33312: LIST
33313: LIST
33314: LIST
33315: LIST
33316: LIST
33317: LIST
33318: LIST
33319: LIST
33320: LIST
33321: ST_TO_ADDR
33322: GO 33789
33324: LD_INT 2
33326: DOUBLE
33327: EQUAL
33328: IFTRUE 33332
33330: GO 33558
33332: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
33333: LD_ADDR_VAR 0 4
33337: PUSH
33338: LD_INT 35
33340: PUSH
33341: LD_INT 45
33343: PUSH
33344: LD_INT 46
33346: PUSH
33347: LD_INT 47
33349: PUSH
33350: LD_INT 82
33352: PUSH
33353: LD_INT 83
33355: PUSH
33356: LD_INT 84
33358: PUSH
33359: LD_INT 85
33361: PUSH
33362: LD_INT 87
33364: PUSH
33365: LD_INT 70
33367: PUSH
33368: LD_INT 1
33370: PUSH
33371: LD_INT 11
33373: PUSH
33374: LD_INT 3
33376: PUSH
33377: LD_INT 4
33379: PUSH
33380: LD_INT 5
33382: PUSH
33383: LD_INT 6
33385: PUSH
33386: LD_INT 15
33388: PUSH
33389: LD_INT 18
33391: PUSH
33392: LD_INT 7
33394: PUSH
33395: LD_INT 17
33397: PUSH
33398: LD_INT 8
33400: PUSH
33401: LD_INT 20
33403: PUSH
33404: LD_INT 21
33406: PUSH
33407: LD_INT 22
33409: PUSH
33410: LD_INT 72
33412: PUSH
33413: LD_INT 26
33415: PUSH
33416: LD_INT 69
33418: PUSH
33419: LD_INT 39
33421: PUSH
33422: LD_INT 40
33424: PUSH
33425: LD_INT 41
33427: PUSH
33428: LD_INT 42
33430: PUSH
33431: LD_INT 43
33433: PUSH
33434: LD_INT 48
33436: PUSH
33437: LD_INT 49
33439: PUSH
33440: LD_INT 50
33442: PUSH
33443: LD_INT 51
33445: PUSH
33446: LD_INT 52
33448: PUSH
33449: LD_INT 53
33451: PUSH
33452: LD_INT 54
33454: PUSH
33455: LD_INT 55
33457: PUSH
33458: LD_INT 56
33460: PUSH
33461: LD_INT 60
33463: PUSH
33464: LD_INT 61
33466: PUSH
33467: LD_INT 62
33469: PUSH
33470: LD_INT 66
33472: PUSH
33473: LD_INT 67
33475: PUSH
33476: LD_INT 68
33478: PUSH
33479: LD_INT 81
33481: PUSH
33482: LD_INT 82
33484: PUSH
33485: LD_INT 83
33487: PUSH
33488: LD_INT 84
33490: PUSH
33491: LD_INT 85
33493: PUSH
33494: LD_INT 87
33496: PUSH
33497: LD_INT 88
33499: PUSH
33500: EMPTY
33501: LIST
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: LIST
33507: LIST
33508: LIST
33509: LIST
33510: LIST
33511: LIST
33512: LIST
33513: LIST
33514: LIST
33515: LIST
33516: LIST
33517: LIST
33518: LIST
33519: LIST
33520: LIST
33521: LIST
33522: LIST
33523: LIST
33524: LIST
33525: LIST
33526: LIST
33527: LIST
33528: LIST
33529: LIST
33530: LIST
33531: LIST
33532: LIST
33533: LIST
33534: LIST
33535: LIST
33536: LIST
33537: LIST
33538: LIST
33539: LIST
33540: LIST
33541: LIST
33542: LIST
33543: LIST
33544: LIST
33545: LIST
33546: LIST
33547: LIST
33548: LIST
33549: LIST
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: ST_TO_ADDR
33556: GO 33789
33558: LD_INT 3
33560: DOUBLE
33561: EQUAL
33562: IFTRUE 33566
33564: GO 33788
33566: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
33567: LD_ADDR_VAR 0 4
33571: PUSH
33572: LD_INT 46
33574: PUSH
33575: LD_INT 47
33577: PUSH
33578: LD_INT 1
33580: PUSH
33581: LD_INT 2
33583: PUSH
33584: LD_INT 82
33586: PUSH
33587: LD_INT 83
33589: PUSH
33590: LD_INT 84
33592: PUSH
33593: LD_INT 85
33595: PUSH
33596: LD_INT 86
33598: PUSH
33599: LD_INT 11
33601: PUSH
33602: LD_INT 9
33604: PUSH
33605: LD_INT 20
33607: PUSH
33608: LD_INT 19
33610: PUSH
33611: LD_INT 21
33613: PUSH
33614: LD_INT 24
33616: PUSH
33617: LD_INT 22
33619: PUSH
33620: LD_INT 25
33622: PUSH
33623: LD_INT 28
33625: PUSH
33626: LD_INT 29
33628: PUSH
33629: LD_INT 30
33631: PUSH
33632: LD_INT 31
33634: PUSH
33635: LD_INT 37
33637: PUSH
33638: LD_INT 38
33640: PUSH
33641: LD_INT 32
33643: PUSH
33644: LD_INT 27
33646: PUSH
33647: LD_INT 33
33649: PUSH
33650: LD_INT 69
33652: PUSH
33653: LD_INT 39
33655: PUSH
33656: LD_INT 34
33658: PUSH
33659: LD_INT 40
33661: PUSH
33662: LD_INT 71
33664: PUSH
33665: LD_INT 23
33667: PUSH
33668: LD_INT 44
33670: PUSH
33671: LD_INT 48
33673: PUSH
33674: LD_INT 49
33676: PUSH
33677: LD_INT 50
33679: PUSH
33680: LD_INT 51
33682: PUSH
33683: LD_INT 52
33685: PUSH
33686: LD_INT 53
33688: PUSH
33689: LD_INT 54
33691: PUSH
33692: LD_INT 55
33694: PUSH
33695: LD_INT 56
33697: PUSH
33698: LD_INT 57
33700: PUSH
33701: LD_INT 58
33703: PUSH
33704: LD_INT 59
33706: PUSH
33707: LD_INT 63
33709: PUSH
33710: LD_INT 64
33712: PUSH
33713: LD_INT 65
33715: PUSH
33716: LD_INT 82
33718: PUSH
33719: LD_INT 83
33721: PUSH
33722: LD_INT 84
33724: PUSH
33725: LD_INT 85
33727: PUSH
33728: LD_INT 86
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: LIST
33735: LIST
33736: LIST
33737: LIST
33738: LIST
33739: LIST
33740: LIST
33741: LIST
33742: LIST
33743: LIST
33744: LIST
33745: LIST
33746: LIST
33747: LIST
33748: LIST
33749: LIST
33750: LIST
33751: LIST
33752: LIST
33753: LIST
33754: LIST
33755: LIST
33756: LIST
33757: LIST
33758: LIST
33759: LIST
33760: LIST
33761: LIST
33762: LIST
33763: LIST
33764: LIST
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: LIST
33770: LIST
33771: LIST
33772: LIST
33773: LIST
33774: LIST
33775: LIST
33776: LIST
33777: LIST
33778: LIST
33779: LIST
33780: LIST
33781: LIST
33782: LIST
33783: LIST
33784: LIST
33785: ST_TO_ADDR
33786: GO 33789
33788: POP
// if state > - 1 and state < 3 then
33789: LD_VAR 0 3
33793: PUSH
33794: LD_INT 1
33796: NEG
33797: GREATER
33798: PUSH
33799: LD_VAR 0 3
33803: PUSH
33804: LD_INT 3
33806: LESS
33807: AND
33808: IFFALSE 33865
// for i in result do
33810: LD_ADDR_VAR 0 5
33814: PUSH
33815: LD_VAR 0 4
33819: PUSH
33820: FOR_IN
33821: IFFALSE 33863
// if GetTech ( i , side ) <> state then
33823: LD_VAR 0 5
33827: PPUSH
33828: LD_VAR 0 1
33832: PPUSH
33833: CALL_OW 321
33837: PUSH
33838: LD_VAR 0 3
33842: NONEQUAL
33843: IFFALSE 33861
// result := result diff i ;
33845: LD_ADDR_VAR 0 4
33849: PUSH
33850: LD_VAR 0 4
33854: PUSH
33855: LD_VAR 0 5
33859: DIFF
33860: ST_TO_ADDR
33861: GO 33820
33863: POP
33864: POP
// end ;
33865: LD_VAR 0 4
33869: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
33870: LD_INT 0
33872: PPUSH
33873: PPUSH
33874: PPUSH
// result := true ;
33875: LD_ADDR_VAR 0 3
33879: PUSH
33880: LD_INT 1
33882: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
33883: LD_ADDR_VAR 0 5
33887: PUSH
33888: LD_VAR 0 2
33892: PPUSH
33893: CALL_OW 480
33897: ST_TO_ADDR
// if not tmp then
33898: LD_VAR 0 5
33902: NOT
33903: IFFALSE 33907
// exit ;
33905: GO 33956
// for i in tmp do
33907: LD_ADDR_VAR 0 4
33911: PUSH
33912: LD_VAR 0 5
33916: PUSH
33917: FOR_IN
33918: IFFALSE 33954
// if GetTech ( i , side ) <> state_researched then
33920: LD_VAR 0 4
33924: PPUSH
33925: LD_VAR 0 1
33929: PPUSH
33930: CALL_OW 321
33934: PUSH
33935: LD_INT 2
33937: NONEQUAL
33938: IFFALSE 33952
// begin result := false ;
33940: LD_ADDR_VAR 0 3
33944: PUSH
33945: LD_INT 0
33947: ST_TO_ADDR
// exit ;
33948: POP
33949: POP
33950: GO 33956
// end ;
33952: GO 33917
33954: POP
33955: POP
// end ;
33956: LD_VAR 0 3
33960: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
33961: LD_INT 0
33963: PPUSH
33964: PPUSH
33965: PPUSH
33966: PPUSH
33967: PPUSH
33968: PPUSH
33969: PPUSH
33970: PPUSH
33971: PPUSH
33972: PPUSH
33973: PPUSH
33974: PPUSH
33975: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
33976: LD_VAR 0 1
33980: NOT
33981: PUSH
33982: LD_VAR 0 1
33986: PPUSH
33987: CALL_OW 257
33991: PUSH
33992: LD_INT 9
33994: NONEQUAL
33995: OR
33996: IFFALSE 34000
// exit ;
33998: GO 34573
// side := GetSide ( unit ) ;
34000: LD_ADDR_VAR 0 9
34004: PUSH
34005: LD_VAR 0 1
34009: PPUSH
34010: CALL_OW 255
34014: ST_TO_ADDR
// tech_space := tech_spacanom ;
34015: LD_ADDR_VAR 0 12
34019: PUSH
34020: LD_INT 29
34022: ST_TO_ADDR
// tech_time := tech_taurad ;
34023: LD_ADDR_VAR 0 13
34027: PUSH
34028: LD_INT 28
34030: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
34031: LD_ADDR_VAR 0 11
34035: PUSH
34036: LD_VAR 0 1
34040: PPUSH
34041: CALL_OW 310
34045: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
34046: LD_VAR 0 11
34050: PPUSH
34051: CALL_OW 247
34055: PUSH
34056: LD_INT 2
34058: EQUAL
34059: IFFALSE 34063
// exit ;
34061: GO 34573
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34063: LD_ADDR_VAR 0 8
34067: PUSH
34068: LD_INT 81
34070: PUSH
34071: LD_VAR 0 9
34075: PUSH
34076: EMPTY
34077: LIST
34078: LIST
34079: PUSH
34080: LD_INT 3
34082: PUSH
34083: LD_INT 21
34085: PUSH
34086: LD_INT 3
34088: PUSH
34089: EMPTY
34090: LIST
34091: LIST
34092: PUSH
34093: EMPTY
34094: LIST
34095: LIST
34096: PUSH
34097: EMPTY
34098: LIST
34099: LIST
34100: PPUSH
34101: CALL_OW 69
34105: ST_TO_ADDR
// if not tmp then
34106: LD_VAR 0 8
34110: NOT
34111: IFFALSE 34115
// exit ;
34113: GO 34573
// if in_unit then
34115: LD_VAR 0 11
34119: IFFALSE 34143
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
34121: LD_ADDR_VAR 0 10
34125: PUSH
34126: LD_VAR 0 8
34130: PPUSH
34131: LD_VAR 0 11
34135: PPUSH
34136: CALL_OW 74
34140: ST_TO_ADDR
34141: GO 34163
// enemy := NearestUnitToUnit ( tmp , unit ) ;
34143: LD_ADDR_VAR 0 10
34147: PUSH
34148: LD_VAR 0 8
34152: PPUSH
34153: LD_VAR 0 1
34157: PPUSH
34158: CALL_OW 74
34162: ST_TO_ADDR
// if not enemy then
34163: LD_VAR 0 10
34167: NOT
34168: IFFALSE 34172
// exit ;
34170: GO 34573
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
34172: LD_VAR 0 11
34176: PUSH
34177: LD_VAR 0 11
34181: PPUSH
34182: LD_VAR 0 10
34186: PPUSH
34187: CALL_OW 296
34191: PUSH
34192: LD_INT 13
34194: GREATER
34195: AND
34196: PUSH
34197: LD_VAR 0 1
34201: PPUSH
34202: LD_VAR 0 10
34206: PPUSH
34207: CALL_OW 296
34211: PUSH
34212: LD_INT 12
34214: GREATER
34215: OR
34216: IFFALSE 34220
// exit ;
34218: GO 34573
// missile := [ 1 ] ;
34220: LD_ADDR_VAR 0 14
34224: PUSH
34225: LD_INT 1
34227: PUSH
34228: EMPTY
34229: LIST
34230: ST_TO_ADDR
// if Researched ( side , tech_space ) then
34231: LD_VAR 0 9
34235: PPUSH
34236: LD_VAR 0 12
34240: PPUSH
34241: CALL_OW 325
34245: IFFALSE 34274
// missile := Replace ( missile , missile + 1 , 2 ) ;
34247: LD_ADDR_VAR 0 14
34251: PUSH
34252: LD_VAR 0 14
34256: PPUSH
34257: LD_VAR 0 14
34261: PUSH
34262: LD_INT 1
34264: PLUS
34265: PPUSH
34266: LD_INT 2
34268: PPUSH
34269: CALL_OW 1
34273: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
34274: LD_VAR 0 9
34278: PPUSH
34279: LD_VAR 0 13
34283: PPUSH
34284: CALL_OW 325
34288: PUSH
34289: LD_VAR 0 10
34293: PPUSH
34294: CALL_OW 255
34298: PPUSH
34299: LD_VAR 0 13
34303: PPUSH
34304: CALL_OW 325
34308: NOT
34309: AND
34310: IFFALSE 34339
// missile := Replace ( missile , missile + 1 , 3 ) ;
34312: LD_ADDR_VAR 0 14
34316: PUSH
34317: LD_VAR 0 14
34321: PPUSH
34322: LD_VAR 0 14
34326: PUSH
34327: LD_INT 1
34329: PLUS
34330: PPUSH
34331: LD_INT 3
34333: PPUSH
34334: CALL_OW 1
34338: ST_TO_ADDR
// if missile < 2 then
34339: LD_VAR 0 14
34343: PUSH
34344: LD_INT 2
34346: LESS
34347: IFFALSE 34351
// exit ;
34349: GO 34573
// x := GetX ( enemy ) ;
34351: LD_ADDR_VAR 0 4
34355: PUSH
34356: LD_VAR 0 10
34360: PPUSH
34361: CALL_OW 250
34365: ST_TO_ADDR
// y := GetY ( enemy ) ;
34366: LD_ADDR_VAR 0 5
34370: PUSH
34371: LD_VAR 0 10
34375: PPUSH
34376: CALL_OW 251
34380: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
34381: LD_ADDR_VAR 0 6
34385: PUSH
34386: LD_VAR 0 4
34390: PUSH
34391: LD_INT 1
34393: NEG
34394: PPUSH
34395: LD_INT 1
34397: PPUSH
34398: CALL_OW 12
34402: PLUS
34403: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
34404: LD_ADDR_VAR 0 7
34408: PUSH
34409: LD_VAR 0 5
34413: PUSH
34414: LD_INT 1
34416: NEG
34417: PPUSH
34418: LD_INT 1
34420: PPUSH
34421: CALL_OW 12
34425: PLUS
34426: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34427: LD_VAR 0 6
34431: PPUSH
34432: LD_VAR 0 7
34436: PPUSH
34437: CALL_OW 488
34441: NOT
34442: IFFALSE 34464
// begin _x := x ;
34444: LD_ADDR_VAR 0 6
34448: PUSH
34449: LD_VAR 0 4
34453: ST_TO_ADDR
// _y := y ;
34454: LD_ADDR_VAR 0 7
34458: PUSH
34459: LD_VAR 0 5
34463: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
34464: LD_ADDR_VAR 0 3
34468: PUSH
34469: LD_INT 1
34471: PPUSH
34472: LD_VAR 0 14
34476: PPUSH
34477: CALL_OW 12
34481: ST_TO_ADDR
// case i of 1 :
34482: LD_VAR 0 3
34486: PUSH
34487: LD_INT 1
34489: DOUBLE
34490: EQUAL
34491: IFTRUE 34495
34493: GO 34512
34495: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
34496: LD_VAR 0 1
34500: PPUSH
34501: LD_VAR 0 10
34505: PPUSH
34506: CALL_OW 115
34510: GO 34573
34512: LD_INT 2
34514: DOUBLE
34515: EQUAL
34516: IFTRUE 34520
34518: GO 34542
34520: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
34521: LD_VAR 0 1
34525: PPUSH
34526: LD_VAR 0 6
34530: PPUSH
34531: LD_VAR 0 7
34535: PPUSH
34536: CALL_OW 153
34540: GO 34573
34542: LD_INT 3
34544: DOUBLE
34545: EQUAL
34546: IFTRUE 34550
34548: GO 34572
34550: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
34551: LD_VAR 0 1
34555: PPUSH
34556: LD_VAR 0 6
34560: PPUSH
34561: LD_VAR 0 7
34565: PPUSH
34566: CALL_OW 154
34570: GO 34573
34572: POP
// end ;
34573: LD_VAR 0 2
34577: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
34578: LD_INT 0
34580: PPUSH
34581: PPUSH
34582: PPUSH
34583: PPUSH
34584: PPUSH
34585: PPUSH
// if not unit or not building then
34586: LD_VAR 0 1
34590: NOT
34591: PUSH
34592: LD_VAR 0 2
34596: NOT
34597: OR
34598: IFFALSE 34602
// exit ;
34600: GO 34760
// x := GetX ( building ) ;
34602: LD_ADDR_VAR 0 5
34606: PUSH
34607: LD_VAR 0 2
34611: PPUSH
34612: CALL_OW 250
34616: ST_TO_ADDR
// y := GetY ( building ) ;
34617: LD_ADDR_VAR 0 6
34621: PUSH
34622: LD_VAR 0 2
34626: PPUSH
34627: CALL_OW 251
34631: ST_TO_ADDR
// for i = 0 to 5 do
34632: LD_ADDR_VAR 0 4
34636: PUSH
34637: DOUBLE
34638: LD_INT 0
34640: DEC
34641: ST_TO_ADDR
34642: LD_INT 5
34644: PUSH
34645: FOR_TO
34646: IFFALSE 34758
// begin _x := ShiftX ( x , i , 3 ) ;
34648: LD_ADDR_VAR 0 7
34652: PUSH
34653: LD_VAR 0 5
34657: PPUSH
34658: LD_VAR 0 4
34662: PPUSH
34663: LD_INT 3
34665: PPUSH
34666: CALL_OW 272
34670: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
34671: LD_ADDR_VAR 0 8
34675: PUSH
34676: LD_VAR 0 6
34680: PPUSH
34681: LD_VAR 0 4
34685: PPUSH
34686: LD_INT 3
34688: PPUSH
34689: CALL_OW 273
34693: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34694: LD_VAR 0 7
34698: PPUSH
34699: LD_VAR 0 8
34703: PPUSH
34704: CALL_OW 488
34708: NOT
34709: IFFALSE 34713
// continue ;
34711: GO 34645
// if HexInfo ( _x , _y ) = 0 then
34713: LD_VAR 0 7
34717: PPUSH
34718: LD_VAR 0 8
34722: PPUSH
34723: CALL_OW 428
34727: PUSH
34728: LD_INT 0
34730: EQUAL
34731: IFFALSE 34756
// begin ComMoveXY ( unit , _x , _y ) ;
34733: LD_VAR 0 1
34737: PPUSH
34738: LD_VAR 0 7
34742: PPUSH
34743: LD_VAR 0 8
34747: PPUSH
34748: CALL_OW 111
// exit ;
34752: POP
34753: POP
34754: GO 34760
// end ; end ;
34756: GO 34645
34758: POP
34759: POP
// end ;
34760: LD_VAR 0 3
34764: RET
// export function ScanBase ( side , base_area ) ; begin
34765: LD_INT 0
34767: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
34768: LD_ADDR_VAR 0 3
34772: PUSH
34773: LD_VAR 0 2
34777: PPUSH
34778: LD_INT 81
34780: PUSH
34781: LD_VAR 0 1
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: PPUSH
34790: CALL_OW 70
34794: ST_TO_ADDR
// end ;
34795: LD_VAR 0 3
34799: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
34800: LD_INT 0
34802: PPUSH
34803: PPUSH
34804: PPUSH
34805: PPUSH
// result := false ;
34806: LD_ADDR_VAR 0 2
34810: PUSH
34811: LD_INT 0
34813: ST_TO_ADDR
// side := GetSide ( unit ) ;
34814: LD_ADDR_VAR 0 3
34818: PUSH
34819: LD_VAR 0 1
34823: PPUSH
34824: CALL_OW 255
34828: ST_TO_ADDR
// nat := GetNation ( unit ) ;
34829: LD_ADDR_VAR 0 4
34833: PUSH
34834: LD_VAR 0 1
34838: PPUSH
34839: CALL_OW 248
34843: ST_TO_ADDR
// case nat of 1 :
34844: LD_VAR 0 4
34848: PUSH
34849: LD_INT 1
34851: DOUBLE
34852: EQUAL
34853: IFTRUE 34857
34855: GO 34868
34857: POP
// tech := tech_lassight ; 2 :
34858: LD_ADDR_VAR 0 5
34862: PUSH
34863: LD_INT 12
34865: ST_TO_ADDR
34866: GO 34907
34868: LD_INT 2
34870: DOUBLE
34871: EQUAL
34872: IFTRUE 34876
34874: GO 34887
34876: POP
// tech := tech_mortar ; 3 :
34877: LD_ADDR_VAR 0 5
34881: PUSH
34882: LD_INT 41
34884: ST_TO_ADDR
34885: GO 34907
34887: LD_INT 3
34889: DOUBLE
34890: EQUAL
34891: IFTRUE 34895
34893: GO 34906
34895: POP
// tech := tech_bazooka ; end ;
34896: LD_ADDR_VAR 0 5
34900: PUSH
34901: LD_INT 44
34903: ST_TO_ADDR
34904: GO 34907
34906: POP
// if Researched ( side , tech ) then
34907: LD_VAR 0 3
34911: PPUSH
34912: LD_VAR 0 5
34916: PPUSH
34917: CALL_OW 325
34921: IFFALSE 34948
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
34923: LD_ADDR_VAR 0 2
34927: PUSH
34928: LD_INT 5
34930: PUSH
34931: LD_INT 8
34933: PUSH
34934: LD_INT 9
34936: PUSH
34937: EMPTY
34938: LIST
34939: LIST
34940: LIST
34941: PUSH
34942: LD_VAR 0 4
34946: ARRAY
34947: ST_TO_ADDR
// end ;
34948: LD_VAR 0 2
34952: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
34953: LD_INT 0
34955: PPUSH
34956: PPUSH
34957: PPUSH
// if not mines then
34958: LD_VAR 0 2
34962: NOT
34963: IFFALSE 34967
// exit ;
34965: GO 35111
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34967: LD_ADDR_VAR 0 5
34971: PUSH
34972: LD_INT 81
34974: PUSH
34975: LD_VAR 0 1
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: PUSH
34984: LD_INT 3
34986: PUSH
34987: LD_INT 21
34989: PUSH
34990: LD_INT 3
34992: PUSH
34993: EMPTY
34994: LIST
34995: LIST
34996: PUSH
34997: EMPTY
34998: LIST
34999: LIST
35000: PUSH
35001: EMPTY
35002: LIST
35003: LIST
35004: PPUSH
35005: CALL_OW 69
35009: ST_TO_ADDR
// for i in mines do
35010: LD_ADDR_VAR 0 4
35014: PUSH
35015: LD_VAR 0 2
35019: PUSH
35020: FOR_IN
35021: IFFALSE 35109
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
35023: LD_VAR 0 4
35027: PUSH
35028: LD_INT 1
35030: ARRAY
35031: PPUSH
35032: LD_VAR 0 4
35036: PUSH
35037: LD_INT 2
35039: ARRAY
35040: PPUSH
35041: CALL_OW 458
35045: NOT
35046: IFFALSE 35050
// continue ;
35048: GO 35020
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
35050: LD_VAR 0 4
35054: PUSH
35055: LD_INT 1
35057: ARRAY
35058: PPUSH
35059: LD_VAR 0 4
35063: PUSH
35064: LD_INT 2
35066: ARRAY
35067: PPUSH
35068: CALL_OW 428
35072: PUSH
35073: LD_VAR 0 5
35077: IN
35078: IFFALSE 35107
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
35080: LD_VAR 0 4
35084: PUSH
35085: LD_INT 1
35087: ARRAY
35088: PPUSH
35089: LD_VAR 0 4
35093: PUSH
35094: LD_INT 2
35096: ARRAY
35097: PPUSH
35098: LD_VAR 0 1
35102: PPUSH
35103: CALL_OW 456
// end ;
35107: GO 35020
35109: POP
35110: POP
// end ;
35111: LD_VAR 0 3
35115: RET
// export function Count ( array ) ; begin
35116: LD_INT 0
35118: PPUSH
// result := array + 0 ;
35119: LD_ADDR_VAR 0 2
35123: PUSH
35124: LD_VAR 0 1
35128: PUSH
35129: LD_INT 0
35131: PLUS
35132: ST_TO_ADDR
// end ;
35133: LD_VAR 0 2
35137: RET
// export function IsEmpty ( building ) ; begin
35138: LD_INT 0
35140: PPUSH
// if not building then
35141: LD_VAR 0 1
35145: NOT
35146: IFFALSE 35150
// exit ;
35148: GO 35193
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
35150: LD_ADDR_VAR 0 2
35154: PUSH
35155: LD_VAR 0 1
35159: PUSH
35160: LD_INT 22
35162: PUSH
35163: LD_VAR 0 1
35167: PPUSH
35168: CALL_OW 255
35172: PUSH
35173: EMPTY
35174: LIST
35175: LIST
35176: PUSH
35177: LD_INT 58
35179: PUSH
35180: EMPTY
35181: LIST
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: PPUSH
35187: CALL_OW 69
35191: IN
35192: ST_TO_ADDR
// end ;
35193: LD_VAR 0 2
35197: RET
// export function IsNotFull ( building ) ; var places ; begin
35198: LD_INT 0
35200: PPUSH
35201: PPUSH
// if not building then
35202: LD_VAR 0 1
35206: NOT
35207: IFFALSE 35211
// exit ;
35209: GO 35239
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
35211: LD_ADDR_VAR 0 2
35215: PUSH
35216: LD_VAR 0 1
35220: PPUSH
35221: LD_INT 3
35223: PUSH
35224: LD_INT 62
35226: PUSH
35227: EMPTY
35228: LIST
35229: PUSH
35230: EMPTY
35231: LIST
35232: LIST
35233: PPUSH
35234: CALL_OW 72
35238: ST_TO_ADDR
// end ;
35239: LD_VAR 0 2
35243: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
35244: LD_INT 0
35246: PPUSH
35247: PPUSH
35248: PPUSH
35249: PPUSH
// tmp := [ ] ;
35250: LD_ADDR_VAR 0 3
35254: PUSH
35255: EMPTY
35256: ST_TO_ADDR
// list := [ ] ;
35257: LD_ADDR_VAR 0 5
35261: PUSH
35262: EMPTY
35263: ST_TO_ADDR
// for i = 16 to 25 do
35264: LD_ADDR_VAR 0 4
35268: PUSH
35269: DOUBLE
35270: LD_INT 16
35272: DEC
35273: ST_TO_ADDR
35274: LD_INT 25
35276: PUSH
35277: FOR_TO
35278: IFFALSE 35351
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
35280: LD_ADDR_VAR 0 3
35284: PUSH
35285: LD_VAR 0 3
35289: PUSH
35290: LD_INT 22
35292: PUSH
35293: LD_VAR 0 1
35297: PPUSH
35298: CALL_OW 255
35302: PUSH
35303: EMPTY
35304: LIST
35305: LIST
35306: PUSH
35307: LD_INT 91
35309: PUSH
35310: LD_VAR 0 1
35314: PUSH
35315: LD_INT 6
35317: PUSH
35318: EMPTY
35319: LIST
35320: LIST
35321: LIST
35322: PUSH
35323: LD_INT 30
35325: PUSH
35326: LD_VAR 0 4
35330: PUSH
35331: EMPTY
35332: LIST
35333: LIST
35334: PUSH
35335: EMPTY
35336: LIST
35337: LIST
35338: LIST
35339: PUSH
35340: EMPTY
35341: LIST
35342: PPUSH
35343: CALL_OW 69
35347: ADD
35348: ST_TO_ADDR
35349: GO 35277
35351: POP
35352: POP
// for i = 1 to tmp do
35353: LD_ADDR_VAR 0 4
35357: PUSH
35358: DOUBLE
35359: LD_INT 1
35361: DEC
35362: ST_TO_ADDR
35363: LD_VAR 0 3
35367: PUSH
35368: FOR_TO
35369: IFFALSE 35457
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
35371: LD_ADDR_VAR 0 5
35375: PUSH
35376: LD_VAR 0 5
35380: PUSH
35381: LD_VAR 0 3
35385: PUSH
35386: LD_VAR 0 4
35390: ARRAY
35391: PPUSH
35392: CALL_OW 266
35396: PUSH
35397: LD_VAR 0 3
35401: PUSH
35402: LD_VAR 0 4
35406: ARRAY
35407: PPUSH
35408: CALL_OW 250
35412: PUSH
35413: LD_VAR 0 3
35417: PUSH
35418: LD_VAR 0 4
35422: ARRAY
35423: PPUSH
35424: CALL_OW 251
35428: PUSH
35429: LD_VAR 0 3
35433: PUSH
35434: LD_VAR 0 4
35438: ARRAY
35439: PPUSH
35440: CALL_OW 254
35444: PUSH
35445: EMPTY
35446: LIST
35447: LIST
35448: LIST
35449: LIST
35450: PUSH
35451: EMPTY
35452: LIST
35453: ADD
35454: ST_TO_ADDR
35455: GO 35368
35457: POP
35458: POP
// result := list ;
35459: LD_ADDR_VAR 0 2
35463: PUSH
35464: LD_VAR 0 5
35468: ST_TO_ADDR
// end ;
35469: LD_VAR 0 2
35473: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
35474: LD_INT 0
35476: PPUSH
35477: PPUSH
35478: PPUSH
35479: PPUSH
35480: PPUSH
35481: PPUSH
35482: PPUSH
// if not factory then
35483: LD_VAR 0 1
35487: NOT
35488: IFFALSE 35492
// exit ;
35490: GO 36085
// if control = control_apeman then
35492: LD_VAR 0 4
35496: PUSH
35497: LD_INT 5
35499: EQUAL
35500: IFFALSE 35609
// begin tmp := UnitsInside ( factory ) ;
35502: LD_ADDR_VAR 0 8
35506: PUSH
35507: LD_VAR 0 1
35511: PPUSH
35512: CALL_OW 313
35516: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
35517: LD_VAR 0 8
35521: PPUSH
35522: LD_INT 25
35524: PUSH
35525: LD_INT 12
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: PPUSH
35532: CALL_OW 72
35536: NOT
35537: IFFALSE 35547
// control := control_manual ;
35539: LD_ADDR_VAR 0 4
35543: PUSH
35544: LD_INT 1
35546: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
35547: LD_ADDR_VAR 0 8
35551: PUSH
35552: LD_VAR 0 1
35556: PPUSH
35557: CALL 35244 0 1
35561: ST_TO_ADDR
// if tmp then
35562: LD_VAR 0 8
35566: IFFALSE 35609
// begin for i in tmp do
35568: LD_ADDR_VAR 0 7
35572: PUSH
35573: LD_VAR 0 8
35577: PUSH
35578: FOR_IN
35579: IFFALSE 35607
// if i [ 1 ] = b_ext_radio then
35581: LD_VAR 0 7
35585: PUSH
35586: LD_INT 1
35588: ARRAY
35589: PUSH
35590: LD_INT 22
35592: EQUAL
35593: IFFALSE 35605
// begin control := control_remote ;
35595: LD_ADDR_VAR 0 4
35599: PUSH
35600: LD_INT 2
35602: ST_TO_ADDR
// break ;
35603: GO 35607
// end ;
35605: GO 35578
35607: POP
35608: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35609: LD_VAR 0 1
35613: PPUSH
35614: LD_VAR 0 2
35618: PPUSH
35619: LD_VAR 0 3
35623: PPUSH
35624: LD_VAR 0 4
35628: PPUSH
35629: LD_VAR 0 5
35633: PPUSH
35634: CALL_OW 448
35638: IFFALSE 35673
// begin result := [ chassis , engine , control , weapon ] ;
35640: LD_ADDR_VAR 0 6
35644: PUSH
35645: LD_VAR 0 2
35649: PUSH
35650: LD_VAR 0 3
35654: PUSH
35655: LD_VAR 0 4
35659: PUSH
35660: LD_VAR 0 5
35664: PUSH
35665: EMPTY
35666: LIST
35667: LIST
35668: LIST
35669: LIST
35670: ST_TO_ADDR
// exit ;
35671: GO 36085
// end ; _chassis := AvailableChassisList ( factory ) ;
35673: LD_ADDR_VAR 0 9
35677: PUSH
35678: LD_VAR 0 1
35682: PPUSH
35683: CALL_OW 475
35687: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
35688: LD_ADDR_VAR 0 11
35692: PUSH
35693: LD_VAR 0 1
35697: PPUSH
35698: CALL_OW 476
35702: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
35703: LD_ADDR_VAR 0 12
35707: PUSH
35708: LD_VAR 0 1
35712: PPUSH
35713: CALL_OW 477
35717: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
35718: LD_ADDR_VAR 0 10
35722: PUSH
35723: LD_VAR 0 1
35727: PPUSH
35728: CALL_OW 478
35732: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
35733: LD_VAR 0 9
35737: NOT
35738: PUSH
35739: LD_VAR 0 11
35743: NOT
35744: OR
35745: PUSH
35746: LD_VAR 0 12
35750: NOT
35751: OR
35752: PUSH
35753: LD_VAR 0 10
35757: NOT
35758: OR
35759: IFFALSE 35794
// begin result := [ chassis , engine , control , weapon ] ;
35761: LD_ADDR_VAR 0 6
35765: PUSH
35766: LD_VAR 0 2
35770: PUSH
35771: LD_VAR 0 3
35775: PUSH
35776: LD_VAR 0 4
35780: PUSH
35781: LD_VAR 0 5
35785: PUSH
35786: EMPTY
35787: LIST
35788: LIST
35789: LIST
35790: LIST
35791: ST_TO_ADDR
// exit ;
35792: GO 36085
// end ; if not chassis in _chassis then
35794: LD_VAR 0 2
35798: PUSH
35799: LD_VAR 0 9
35803: IN
35804: NOT
35805: IFFALSE 35831
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
35807: LD_ADDR_VAR 0 2
35811: PUSH
35812: LD_VAR 0 9
35816: PUSH
35817: LD_INT 1
35819: PPUSH
35820: LD_VAR 0 9
35824: PPUSH
35825: CALL_OW 12
35829: ARRAY
35830: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
35831: LD_VAR 0 2
35835: PPUSH
35836: LD_VAR 0 3
35840: PPUSH
35841: CALL 36090 0 2
35845: NOT
35846: IFFALSE 35905
// repeat engine := _engine [ 1 ] ;
35848: LD_ADDR_VAR 0 3
35852: PUSH
35853: LD_VAR 0 11
35857: PUSH
35858: LD_INT 1
35860: ARRAY
35861: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
35862: LD_ADDR_VAR 0 11
35866: PUSH
35867: LD_VAR 0 11
35871: PPUSH
35872: LD_INT 1
35874: PPUSH
35875: CALL_OW 3
35879: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
35880: LD_VAR 0 2
35884: PPUSH
35885: LD_VAR 0 3
35889: PPUSH
35890: CALL 36090 0 2
35894: PUSH
35895: LD_VAR 0 11
35899: PUSH
35900: EMPTY
35901: EQUAL
35902: OR
35903: IFFALSE 35848
// if not control in _control then
35905: LD_VAR 0 4
35909: PUSH
35910: LD_VAR 0 12
35914: IN
35915: NOT
35916: IFFALSE 35942
// control := _control [ rand ( 1 , _control ) ] ;
35918: LD_ADDR_VAR 0 4
35922: PUSH
35923: LD_VAR 0 12
35927: PUSH
35928: LD_INT 1
35930: PPUSH
35931: LD_VAR 0 12
35935: PPUSH
35936: CALL_OW 12
35940: ARRAY
35941: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
35942: LD_VAR 0 2
35946: PPUSH
35947: LD_VAR 0 5
35951: PPUSH
35952: CALL 36310 0 2
35956: NOT
35957: IFFALSE 36016
// repeat weapon := _weapon [ 1 ] ;
35959: LD_ADDR_VAR 0 5
35963: PUSH
35964: LD_VAR 0 10
35968: PUSH
35969: LD_INT 1
35971: ARRAY
35972: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
35973: LD_ADDR_VAR 0 10
35977: PUSH
35978: LD_VAR 0 10
35982: PPUSH
35983: LD_INT 1
35985: PPUSH
35986: CALL_OW 3
35990: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
35991: LD_VAR 0 2
35995: PPUSH
35996: LD_VAR 0 5
36000: PPUSH
36001: CALL 36310 0 2
36005: PUSH
36006: LD_VAR 0 10
36010: PUSH
36011: EMPTY
36012: EQUAL
36013: OR
36014: IFFALSE 35959
// result := [ ] ;
36016: LD_ADDR_VAR 0 6
36020: PUSH
36021: EMPTY
36022: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36023: LD_VAR 0 1
36027: PPUSH
36028: LD_VAR 0 2
36032: PPUSH
36033: LD_VAR 0 3
36037: PPUSH
36038: LD_VAR 0 4
36042: PPUSH
36043: LD_VAR 0 5
36047: PPUSH
36048: CALL_OW 448
36052: IFFALSE 36085
// result := [ chassis , engine , control , weapon ] ;
36054: LD_ADDR_VAR 0 6
36058: PUSH
36059: LD_VAR 0 2
36063: PUSH
36064: LD_VAR 0 3
36068: PUSH
36069: LD_VAR 0 4
36073: PUSH
36074: LD_VAR 0 5
36078: PUSH
36079: EMPTY
36080: LIST
36081: LIST
36082: LIST
36083: LIST
36084: ST_TO_ADDR
// end ;
36085: LD_VAR 0 6
36089: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
36090: LD_INT 0
36092: PPUSH
// if not chassis or not engine then
36093: LD_VAR 0 1
36097: NOT
36098: PUSH
36099: LD_VAR 0 2
36103: NOT
36104: OR
36105: IFFALSE 36109
// exit ;
36107: GO 36305
// case engine of engine_solar :
36109: LD_VAR 0 2
36113: PUSH
36114: LD_INT 2
36116: DOUBLE
36117: EQUAL
36118: IFTRUE 36122
36120: GO 36160
36122: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
36123: LD_ADDR_VAR 0 3
36127: PUSH
36128: LD_INT 11
36130: PUSH
36131: LD_INT 12
36133: PUSH
36134: LD_INT 13
36136: PUSH
36137: LD_INT 14
36139: PUSH
36140: LD_INT 1
36142: PUSH
36143: LD_INT 2
36145: PUSH
36146: LD_INT 3
36148: PUSH
36149: EMPTY
36150: LIST
36151: LIST
36152: LIST
36153: LIST
36154: LIST
36155: LIST
36156: LIST
36157: ST_TO_ADDR
36158: GO 36289
36160: LD_INT 1
36162: DOUBLE
36163: EQUAL
36164: IFTRUE 36168
36166: GO 36230
36168: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
36169: LD_ADDR_VAR 0 3
36173: PUSH
36174: LD_INT 11
36176: PUSH
36177: LD_INT 12
36179: PUSH
36180: LD_INT 13
36182: PUSH
36183: LD_INT 14
36185: PUSH
36186: LD_INT 1
36188: PUSH
36189: LD_INT 2
36191: PUSH
36192: LD_INT 3
36194: PUSH
36195: LD_INT 4
36197: PUSH
36198: LD_INT 5
36200: PUSH
36201: LD_INT 21
36203: PUSH
36204: LD_INT 23
36206: PUSH
36207: LD_INT 22
36209: PUSH
36210: LD_INT 24
36212: PUSH
36213: EMPTY
36214: LIST
36215: LIST
36216: LIST
36217: LIST
36218: LIST
36219: LIST
36220: LIST
36221: LIST
36222: LIST
36223: LIST
36224: LIST
36225: LIST
36226: LIST
36227: ST_TO_ADDR
36228: GO 36289
36230: LD_INT 3
36232: DOUBLE
36233: EQUAL
36234: IFTRUE 36238
36236: GO 36288
36238: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36239: LD_ADDR_VAR 0 3
36243: PUSH
36244: LD_INT 13
36246: PUSH
36247: LD_INT 14
36249: PUSH
36250: LD_INT 2
36252: PUSH
36253: LD_INT 3
36255: PUSH
36256: LD_INT 4
36258: PUSH
36259: LD_INT 5
36261: PUSH
36262: LD_INT 21
36264: PUSH
36265: LD_INT 22
36267: PUSH
36268: LD_INT 23
36270: PUSH
36271: LD_INT 24
36273: PUSH
36274: EMPTY
36275: LIST
36276: LIST
36277: LIST
36278: LIST
36279: LIST
36280: LIST
36281: LIST
36282: LIST
36283: LIST
36284: LIST
36285: ST_TO_ADDR
36286: GO 36289
36288: POP
// result := ( chassis in result ) ;
36289: LD_ADDR_VAR 0 3
36293: PUSH
36294: LD_VAR 0 1
36298: PUSH
36299: LD_VAR 0 3
36303: IN
36304: ST_TO_ADDR
// end ;
36305: LD_VAR 0 3
36309: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
36310: LD_INT 0
36312: PPUSH
// if not chassis or not weapon then
36313: LD_VAR 0 1
36317: NOT
36318: PUSH
36319: LD_VAR 0 2
36323: NOT
36324: OR
36325: IFFALSE 36329
// exit ;
36327: GO 37389
// case weapon of us_machine_gun :
36329: LD_VAR 0 2
36333: PUSH
36334: LD_INT 2
36336: DOUBLE
36337: EQUAL
36338: IFTRUE 36342
36340: GO 36372
36342: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
36343: LD_ADDR_VAR 0 3
36347: PUSH
36348: LD_INT 1
36350: PUSH
36351: LD_INT 2
36353: PUSH
36354: LD_INT 3
36356: PUSH
36357: LD_INT 4
36359: PUSH
36360: LD_INT 5
36362: PUSH
36363: EMPTY
36364: LIST
36365: LIST
36366: LIST
36367: LIST
36368: LIST
36369: ST_TO_ADDR
36370: GO 37373
36372: LD_INT 3
36374: DOUBLE
36375: EQUAL
36376: IFTRUE 36380
36378: GO 36410
36380: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
36381: LD_ADDR_VAR 0 3
36385: PUSH
36386: LD_INT 1
36388: PUSH
36389: LD_INT 2
36391: PUSH
36392: LD_INT 3
36394: PUSH
36395: LD_INT 4
36397: PUSH
36398: LD_INT 5
36400: PUSH
36401: EMPTY
36402: LIST
36403: LIST
36404: LIST
36405: LIST
36406: LIST
36407: ST_TO_ADDR
36408: GO 37373
36410: LD_INT 11
36412: DOUBLE
36413: EQUAL
36414: IFTRUE 36418
36416: GO 36448
36418: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
36419: LD_ADDR_VAR 0 3
36423: PUSH
36424: LD_INT 1
36426: PUSH
36427: LD_INT 2
36429: PUSH
36430: LD_INT 3
36432: PUSH
36433: LD_INT 4
36435: PUSH
36436: LD_INT 5
36438: PUSH
36439: EMPTY
36440: LIST
36441: LIST
36442: LIST
36443: LIST
36444: LIST
36445: ST_TO_ADDR
36446: GO 37373
36448: LD_INT 4
36450: DOUBLE
36451: EQUAL
36452: IFTRUE 36456
36454: GO 36482
36456: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
36457: LD_ADDR_VAR 0 3
36461: PUSH
36462: LD_INT 2
36464: PUSH
36465: LD_INT 3
36467: PUSH
36468: LD_INT 4
36470: PUSH
36471: LD_INT 5
36473: PUSH
36474: EMPTY
36475: LIST
36476: LIST
36477: LIST
36478: LIST
36479: ST_TO_ADDR
36480: GO 37373
36482: LD_INT 5
36484: DOUBLE
36485: EQUAL
36486: IFTRUE 36490
36488: GO 36516
36490: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
36491: LD_ADDR_VAR 0 3
36495: PUSH
36496: LD_INT 2
36498: PUSH
36499: LD_INT 3
36501: PUSH
36502: LD_INT 4
36504: PUSH
36505: LD_INT 5
36507: PUSH
36508: EMPTY
36509: LIST
36510: LIST
36511: LIST
36512: LIST
36513: ST_TO_ADDR
36514: GO 37373
36516: LD_INT 9
36518: DOUBLE
36519: EQUAL
36520: IFTRUE 36524
36522: GO 36550
36524: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
36525: LD_ADDR_VAR 0 3
36529: PUSH
36530: LD_INT 2
36532: PUSH
36533: LD_INT 3
36535: PUSH
36536: LD_INT 4
36538: PUSH
36539: LD_INT 5
36541: PUSH
36542: EMPTY
36543: LIST
36544: LIST
36545: LIST
36546: LIST
36547: ST_TO_ADDR
36548: GO 37373
36550: LD_INT 7
36552: DOUBLE
36553: EQUAL
36554: IFTRUE 36558
36556: GO 36584
36558: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
36559: LD_ADDR_VAR 0 3
36563: PUSH
36564: LD_INT 2
36566: PUSH
36567: LD_INT 3
36569: PUSH
36570: LD_INT 4
36572: PUSH
36573: LD_INT 5
36575: PUSH
36576: EMPTY
36577: LIST
36578: LIST
36579: LIST
36580: LIST
36581: ST_TO_ADDR
36582: GO 37373
36584: LD_INT 12
36586: DOUBLE
36587: EQUAL
36588: IFTRUE 36592
36590: GO 36618
36592: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
36593: LD_ADDR_VAR 0 3
36597: PUSH
36598: LD_INT 2
36600: PUSH
36601: LD_INT 3
36603: PUSH
36604: LD_INT 4
36606: PUSH
36607: LD_INT 5
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: LIST
36614: LIST
36615: ST_TO_ADDR
36616: GO 37373
36618: LD_INT 13
36620: DOUBLE
36621: EQUAL
36622: IFTRUE 36626
36624: GO 36652
36626: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
36627: LD_ADDR_VAR 0 3
36631: PUSH
36632: LD_INT 2
36634: PUSH
36635: LD_INT 3
36637: PUSH
36638: LD_INT 4
36640: PUSH
36641: LD_INT 5
36643: PUSH
36644: EMPTY
36645: LIST
36646: LIST
36647: LIST
36648: LIST
36649: ST_TO_ADDR
36650: GO 37373
36652: LD_INT 14
36654: DOUBLE
36655: EQUAL
36656: IFTRUE 36660
36658: GO 36678
36660: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
36661: LD_ADDR_VAR 0 3
36665: PUSH
36666: LD_INT 4
36668: PUSH
36669: LD_INT 5
36671: PUSH
36672: EMPTY
36673: LIST
36674: LIST
36675: ST_TO_ADDR
36676: GO 37373
36678: LD_INT 6
36680: DOUBLE
36681: EQUAL
36682: IFTRUE 36686
36684: GO 36704
36686: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
36687: LD_ADDR_VAR 0 3
36691: PUSH
36692: LD_INT 4
36694: PUSH
36695: LD_INT 5
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: ST_TO_ADDR
36702: GO 37373
36704: LD_INT 10
36706: DOUBLE
36707: EQUAL
36708: IFTRUE 36712
36710: GO 36730
36712: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
36713: LD_ADDR_VAR 0 3
36717: PUSH
36718: LD_INT 4
36720: PUSH
36721: LD_INT 5
36723: PUSH
36724: EMPTY
36725: LIST
36726: LIST
36727: ST_TO_ADDR
36728: GO 37373
36730: LD_INT 22
36732: DOUBLE
36733: EQUAL
36734: IFTRUE 36738
36736: GO 36764
36738: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
36739: LD_ADDR_VAR 0 3
36743: PUSH
36744: LD_INT 11
36746: PUSH
36747: LD_INT 12
36749: PUSH
36750: LD_INT 13
36752: PUSH
36753: LD_INT 14
36755: PUSH
36756: EMPTY
36757: LIST
36758: LIST
36759: LIST
36760: LIST
36761: ST_TO_ADDR
36762: GO 37373
36764: LD_INT 23
36766: DOUBLE
36767: EQUAL
36768: IFTRUE 36772
36770: GO 36798
36772: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
36773: LD_ADDR_VAR 0 3
36777: PUSH
36778: LD_INT 11
36780: PUSH
36781: LD_INT 12
36783: PUSH
36784: LD_INT 13
36786: PUSH
36787: LD_INT 14
36789: PUSH
36790: EMPTY
36791: LIST
36792: LIST
36793: LIST
36794: LIST
36795: ST_TO_ADDR
36796: GO 37373
36798: LD_INT 24
36800: DOUBLE
36801: EQUAL
36802: IFTRUE 36806
36804: GO 36832
36806: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
36807: LD_ADDR_VAR 0 3
36811: PUSH
36812: LD_INT 11
36814: PUSH
36815: LD_INT 12
36817: PUSH
36818: LD_INT 13
36820: PUSH
36821: LD_INT 14
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: LIST
36828: LIST
36829: ST_TO_ADDR
36830: GO 37373
36832: LD_INT 30
36834: DOUBLE
36835: EQUAL
36836: IFTRUE 36840
36838: GO 36866
36840: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
36841: LD_ADDR_VAR 0 3
36845: PUSH
36846: LD_INT 11
36848: PUSH
36849: LD_INT 12
36851: PUSH
36852: LD_INT 13
36854: PUSH
36855: LD_INT 14
36857: PUSH
36858: EMPTY
36859: LIST
36860: LIST
36861: LIST
36862: LIST
36863: ST_TO_ADDR
36864: GO 37373
36866: LD_INT 25
36868: DOUBLE
36869: EQUAL
36870: IFTRUE 36874
36872: GO 36892
36874: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
36875: LD_ADDR_VAR 0 3
36879: PUSH
36880: LD_INT 13
36882: PUSH
36883: LD_INT 14
36885: PUSH
36886: EMPTY
36887: LIST
36888: LIST
36889: ST_TO_ADDR
36890: GO 37373
36892: LD_INT 27
36894: DOUBLE
36895: EQUAL
36896: IFTRUE 36900
36898: GO 36918
36900: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
36901: LD_ADDR_VAR 0 3
36905: PUSH
36906: LD_INT 13
36908: PUSH
36909: LD_INT 14
36911: PUSH
36912: EMPTY
36913: LIST
36914: LIST
36915: ST_TO_ADDR
36916: GO 37373
36918: LD_INT 92
36920: DOUBLE
36921: EQUAL
36922: IFTRUE 36926
36924: GO 36952
36926: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
36927: LD_ADDR_VAR 0 3
36931: PUSH
36932: LD_INT 11
36934: PUSH
36935: LD_INT 12
36937: PUSH
36938: LD_INT 13
36940: PUSH
36941: LD_INT 14
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: LIST
36948: LIST
36949: ST_TO_ADDR
36950: GO 37373
36952: LD_INT 28
36954: DOUBLE
36955: EQUAL
36956: IFTRUE 36960
36958: GO 36978
36960: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
36961: LD_ADDR_VAR 0 3
36965: PUSH
36966: LD_INT 13
36968: PUSH
36969: LD_INT 14
36971: PUSH
36972: EMPTY
36973: LIST
36974: LIST
36975: ST_TO_ADDR
36976: GO 37373
36978: LD_INT 29
36980: DOUBLE
36981: EQUAL
36982: IFTRUE 36986
36984: GO 37004
36986: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
36987: LD_ADDR_VAR 0 3
36991: PUSH
36992: LD_INT 13
36994: PUSH
36995: LD_INT 14
36997: PUSH
36998: EMPTY
36999: LIST
37000: LIST
37001: ST_TO_ADDR
37002: GO 37373
37004: LD_INT 31
37006: DOUBLE
37007: EQUAL
37008: IFTRUE 37012
37010: GO 37030
37012: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
37013: LD_ADDR_VAR 0 3
37017: PUSH
37018: LD_INT 13
37020: PUSH
37021: LD_INT 14
37023: PUSH
37024: EMPTY
37025: LIST
37026: LIST
37027: ST_TO_ADDR
37028: GO 37373
37030: LD_INT 26
37032: DOUBLE
37033: EQUAL
37034: IFTRUE 37038
37036: GO 37056
37038: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
37039: LD_ADDR_VAR 0 3
37043: PUSH
37044: LD_INT 13
37046: PUSH
37047: LD_INT 14
37049: PUSH
37050: EMPTY
37051: LIST
37052: LIST
37053: ST_TO_ADDR
37054: GO 37373
37056: LD_INT 42
37058: DOUBLE
37059: EQUAL
37060: IFTRUE 37064
37062: GO 37090
37064: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
37065: LD_ADDR_VAR 0 3
37069: PUSH
37070: LD_INT 21
37072: PUSH
37073: LD_INT 22
37075: PUSH
37076: LD_INT 23
37078: PUSH
37079: LD_INT 24
37081: PUSH
37082: EMPTY
37083: LIST
37084: LIST
37085: LIST
37086: LIST
37087: ST_TO_ADDR
37088: GO 37373
37090: LD_INT 43
37092: DOUBLE
37093: EQUAL
37094: IFTRUE 37098
37096: GO 37124
37098: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
37099: LD_ADDR_VAR 0 3
37103: PUSH
37104: LD_INT 21
37106: PUSH
37107: LD_INT 22
37109: PUSH
37110: LD_INT 23
37112: PUSH
37113: LD_INT 24
37115: PUSH
37116: EMPTY
37117: LIST
37118: LIST
37119: LIST
37120: LIST
37121: ST_TO_ADDR
37122: GO 37373
37124: LD_INT 44
37126: DOUBLE
37127: EQUAL
37128: IFTRUE 37132
37130: GO 37158
37132: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
37133: LD_ADDR_VAR 0 3
37137: PUSH
37138: LD_INT 21
37140: PUSH
37141: LD_INT 22
37143: PUSH
37144: LD_INT 23
37146: PUSH
37147: LD_INT 24
37149: PUSH
37150: EMPTY
37151: LIST
37152: LIST
37153: LIST
37154: LIST
37155: ST_TO_ADDR
37156: GO 37373
37158: LD_INT 45
37160: DOUBLE
37161: EQUAL
37162: IFTRUE 37166
37164: GO 37192
37166: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
37167: LD_ADDR_VAR 0 3
37171: PUSH
37172: LD_INT 21
37174: PUSH
37175: LD_INT 22
37177: PUSH
37178: LD_INT 23
37180: PUSH
37181: LD_INT 24
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: LIST
37188: LIST
37189: ST_TO_ADDR
37190: GO 37373
37192: LD_INT 49
37194: DOUBLE
37195: EQUAL
37196: IFTRUE 37200
37198: GO 37226
37200: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
37201: LD_ADDR_VAR 0 3
37205: PUSH
37206: LD_INT 21
37208: PUSH
37209: LD_INT 22
37211: PUSH
37212: LD_INT 23
37214: PUSH
37215: LD_INT 24
37217: PUSH
37218: EMPTY
37219: LIST
37220: LIST
37221: LIST
37222: LIST
37223: ST_TO_ADDR
37224: GO 37373
37226: LD_INT 51
37228: DOUBLE
37229: EQUAL
37230: IFTRUE 37234
37232: GO 37260
37234: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
37235: LD_ADDR_VAR 0 3
37239: PUSH
37240: LD_INT 21
37242: PUSH
37243: LD_INT 22
37245: PUSH
37246: LD_INT 23
37248: PUSH
37249: LD_INT 24
37251: PUSH
37252: EMPTY
37253: LIST
37254: LIST
37255: LIST
37256: LIST
37257: ST_TO_ADDR
37258: GO 37373
37260: LD_INT 52
37262: DOUBLE
37263: EQUAL
37264: IFTRUE 37268
37266: GO 37294
37268: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
37269: LD_ADDR_VAR 0 3
37273: PUSH
37274: LD_INT 21
37276: PUSH
37277: LD_INT 22
37279: PUSH
37280: LD_INT 23
37282: PUSH
37283: LD_INT 24
37285: PUSH
37286: EMPTY
37287: LIST
37288: LIST
37289: LIST
37290: LIST
37291: ST_TO_ADDR
37292: GO 37373
37294: LD_INT 53
37296: DOUBLE
37297: EQUAL
37298: IFTRUE 37302
37300: GO 37320
37302: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
37303: LD_ADDR_VAR 0 3
37307: PUSH
37308: LD_INT 23
37310: PUSH
37311: LD_INT 24
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: ST_TO_ADDR
37318: GO 37373
37320: LD_INT 46
37322: DOUBLE
37323: EQUAL
37324: IFTRUE 37328
37326: GO 37346
37328: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
37329: LD_ADDR_VAR 0 3
37333: PUSH
37334: LD_INT 23
37336: PUSH
37337: LD_INT 24
37339: PUSH
37340: EMPTY
37341: LIST
37342: LIST
37343: ST_TO_ADDR
37344: GO 37373
37346: LD_INT 47
37348: DOUBLE
37349: EQUAL
37350: IFTRUE 37354
37352: GO 37372
37354: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37355: LD_ADDR_VAR 0 3
37359: PUSH
37360: LD_INT 23
37362: PUSH
37363: LD_INT 24
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: ST_TO_ADDR
37370: GO 37373
37372: POP
// result := ( chassis in result ) ;
37373: LD_ADDR_VAR 0 3
37377: PUSH
37378: LD_VAR 0 1
37382: PUSH
37383: LD_VAR 0 3
37387: IN
37388: ST_TO_ADDR
// end ;
37389: LD_VAR 0 3
37393: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
37394: LD_INT 0
37396: PPUSH
37397: PPUSH
37398: PPUSH
37399: PPUSH
37400: PPUSH
37401: PPUSH
37402: PPUSH
// result := array ;
37403: LD_ADDR_VAR 0 5
37407: PUSH
37408: LD_VAR 0 1
37412: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
37413: LD_VAR 0 1
37417: NOT
37418: PUSH
37419: LD_VAR 0 2
37423: NOT
37424: OR
37425: PUSH
37426: LD_VAR 0 3
37430: NOT
37431: OR
37432: PUSH
37433: LD_VAR 0 2
37437: PUSH
37438: LD_VAR 0 1
37442: GREATER
37443: OR
37444: PUSH
37445: LD_VAR 0 3
37449: PUSH
37450: LD_VAR 0 1
37454: GREATER
37455: OR
37456: IFFALSE 37460
// exit ;
37458: GO 37756
// if direction then
37460: LD_VAR 0 4
37464: IFFALSE 37528
// begin d := 1 ;
37466: LD_ADDR_VAR 0 9
37470: PUSH
37471: LD_INT 1
37473: ST_TO_ADDR
// if i_from > i_to then
37474: LD_VAR 0 2
37478: PUSH
37479: LD_VAR 0 3
37483: GREATER
37484: IFFALSE 37510
// length := ( array - i_from ) + i_to else
37486: LD_ADDR_VAR 0 11
37490: PUSH
37491: LD_VAR 0 1
37495: PUSH
37496: LD_VAR 0 2
37500: MINUS
37501: PUSH
37502: LD_VAR 0 3
37506: PLUS
37507: ST_TO_ADDR
37508: GO 37526
// length := i_to - i_from ;
37510: LD_ADDR_VAR 0 11
37514: PUSH
37515: LD_VAR 0 3
37519: PUSH
37520: LD_VAR 0 2
37524: MINUS
37525: ST_TO_ADDR
// end else
37526: GO 37589
// begin d := - 1 ;
37528: LD_ADDR_VAR 0 9
37532: PUSH
37533: LD_INT 1
37535: NEG
37536: ST_TO_ADDR
// if i_from > i_to then
37537: LD_VAR 0 2
37541: PUSH
37542: LD_VAR 0 3
37546: GREATER
37547: IFFALSE 37567
// length := i_from - i_to else
37549: LD_ADDR_VAR 0 11
37553: PUSH
37554: LD_VAR 0 2
37558: PUSH
37559: LD_VAR 0 3
37563: MINUS
37564: ST_TO_ADDR
37565: GO 37589
// length := ( array - i_to ) + i_from ;
37567: LD_ADDR_VAR 0 11
37571: PUSH
37572: LD_VAR 0 1
37576: PUSH
37577: LD_VAR 0 3
37581: MINUS
37582: PUSH
37583: LD_VAR 0 2
37587: PLUS
37588: ST_TO_ADDR
// end ; if not length then
37589: LD_VAR 0 11
37593: NOT
37594: IFFALSE 37598
// exit ;
37596: GO 37756
// tmp := array ;
37598: LD_ADDR_VAR 0 10
37602: PUSH
37603: LD_VAR 0 1
37607: ST_TO_ADDR
// for i = 1 to length do
37608: LD_ADDR_VAR 0 6
37612: PUSH
37613: DOUBLE
37614: LD_INT 1
37616: DEC
37617: ST_TO_ADDR
37618: LD_VAR 0 11
37622: PUSH
37623: FOR_TO
37624: IFFALSE 37744
// begin for j = 1 to array do
37626: LD_ADDR_VAR 0 7
37630: PUSH
37631: DOUBLE
37632: LD_INT 1
37634: DEC
37635: ST_TO_ADDR
37636: LD_VAR 0 1
37640: PUSH
37641: FOR_TO
37642: IFFALSE 37730
// begin k := j + d ;
37644: LD_ADDR_VAR 0 8
37648: PUSH
37649: LD_VAR 0 7
37653: PUSH
37654: LD_VAR 0 9
37658: PLUS
37659: ST_TO_ADDR
// if k > array then
37660: LD_VAR 0 8
37664: PUSH
37665: LD_VAR 0 1
37669: GREATER
37670: IFFALSE 37680
// k := 1 ;
37672: LD_ADDR_VAR 0 8
37676: PUSH
37677: LD_INT 1
37679: ST_TO_ADDR
// if not k then
37680: LD_VAR 0 8
37684: NOT
37685: IFFALSE 37697
// k := array ;
37687: LD_ADDR_VAR 0 8
37691: PUSH
37692: LD_VAR 0 1
37696: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
37697: LD_ADDR_VAR 0 10
37701: PUSH
37702: LD_VAR 0 10
37706: PPUSH
37707: LD_VAR 0 8
37711: PPUSH
37712: LD_VAR 0 1
37716: PUSH
37717: LD_VAR 0 7
37721: ARRAY
37722: PPUSH
37723: CALL_OW 1
37727: ST_TO_ADDR
// end ;
37728: GO 37641
37730: POP
37731: POP
// array := tmp ;
37732: LD_ADDR_VAR 0 1
37736: PUSH
37737: LD_VAR 0 10
37741: ST_TO_ADDR
// end ;
37742: GO 37623
37744: POP
37745: POP
// result := array ;
37746: LD_ADDR_VAR 0 5
37750: PUSH
37751: LD_VAR 0 1
37755: ST_TO_ADDR
// end ;
37756: LD_VAR 0 5
37760: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
37761: LD_INT 0
37763: PPUSH
37764: PPUSH
// result := 0 ;
37765: LD_ADDR_VAR 0 3
37769: PUSH
37770: LD_INT 0
37772: ST_TO_ADDR
// if not array or not value in array then
37773: LD_VAR 0 1
37777: NOT
37778: PUSH
37779: LD_VAR 0 2
37783: PUSH
37784: LD_VAR 0 1
37788: IN
37789: NOT
37790: OR
37791: IFFALSE 37795
// exit ;
37793: GO 37849
// for i = 1 to array do
37795: LD_ADDR_VAR 0 4
37799: PUSH
37800: DOUBLE
37801: LD_INT 1
37803: DEC
37804: ST_TO_ADDR
37805: LD_VAR 0 1
37809: PUSH
37810: FOR_TO
37811: IFFALSE 37847
// if value = array [ i ] then
37813: LD_VAR 0 2
37817: PUSH
37818: LD_VAR 0 1
37822: PUSH
37823: LD_VAR 0 4
37827: ARRAY
37828: EQUAL
37829: IFFALSE 37845
// begin result := i ;
37831: LD_ADDR_VAR 0 3
37835: PUSH
37836: LD_VAR 0 4
37840: ST_TO_ADDR
// exit ;
37841: POP
37842: POP
37843: GO 37849
// end ;
37845: GO 37810
37847: POP
37848: POP
// end ;
37849: LD_VAR 0 3
37853: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
37854: LD_INT 0
37856: PPUSH
// vc_chassis := chassis ;
37857: LD_ADDR_OWVAR 37
37861: PUSH
37862: LD_VAR 0 1
37866: ST_TO_ADDR
// vc_engine := engine ;
37867: LD_ADDR_OWVAR 39
37871: PUSH
37872: LD_VAR 0 2
37876: ST_TO_ADDR
// vc_control := control ;
37877: LD_ADDR_OWVAR 38
37881: PUSH
37882: LD_VAR 0 3
37886: ST_TO_ADDR
// vc_weapon := weapon ;
37887: LD_ADDR_OWVAR 40
37891: PUSH
37892: LD_VAR 0 4
37896: ST_TO_ADDR
// vc_fuel_battery := fuel ;
37897: LD_ADDR_OWVAR 41
37901: PUSH
37902: LD_VAR 0 5
37906: ST_TO_ADDR
// end ;
37907: LD_VAR 0 6
37911: RET
// export function WantPlant ( unit ) ; var task ; begin
37912: LD_INT 0
37914: PPUSH
37915: PPUSH
// result := false ;
37916: LD_ADDR_VAR 0 2
37920: PUSH
37921: LD_INT 0
37923: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
37924: LD_ADDR_VAR 0 3
37928: PUSH
37929: LD_VAR 0 1
37933: PPUSH
37934: CALL_OW 437
37938: ST_TO_ADDR
// if task then
37939: LD_VAR 0 3
37943: IFFALSE 37971
// if task [ 1 ] [ 1 ] = p then
37945: LD_VAR 0 3
37949: PUSH
37950: LD_INT 1
37952: ARRAY
37953: PUSH
37954: LD_INT 1
37956: ARRAY
37957: PUSH
37958: LD_STRING p
37960: EQUAL
37961: IFFALSE 37971
// result := true ;
37963: LD_ADDR_VAR 0 2
37967: PUSH
37968: LD_INT 1
37970: ST_TO_ADDR
// end ;
37971: LD_VAR 0 2
37975: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
37976: LD_INT 0
37978: PPUSH
37979: PPUSH
37980: PPUSH
37981: PPUSH
// if pos < 1 then
37982: LD_VAR 0 2
37986: PUSH
37987: LD_INT 1
37989: LESS
37990: IFFALSE 37994
// exit ;
37992: GO 38297
// if pos = 1 then
37994: LD_VAR 0 2
37998: PUSH
37999: LD_INT 1
38001: EQUAL
38002: IFFALSE 38035
// result := Replace ( arr , pos [ 1 ] , value ) else
38004: LD_ADDR_VAR 0 4
38008: PUSH
38009: LD_VAR 0 1
38013: PPUSH
38014: LD_VAR 0 2
38018: PUSH
38019: LD_INT 1
38021: ARRAY
38022: PPUSH
38023: LD_VAR 0 3
38027: PPUSH
38028: CALL_OW 1
38032: ST_TO_ADDR
38033: GO 38297
// begin tmp := arr ;
38035: LD_ADDR_VAR 0 6
38039: PUSH
38040: LD_VAR 0 1
38044: ST_TO_ADDR
// s_arr := [ tmp ] ;
38045: LD_ADDR_VAR 0 7
38049: PUSH
38050: LD_VAR 0 6
38054: PUSH
38055: EMPTY
38056: LIST
38057: ST_TO_ADDR
// for i = 1 to pos - 1 do
38058: LD_ADDR_VAR 0 5
38062: PUSH
38063: DOUBLE
38064: LD_INT 1
38066: DEC
38067: ST_TO_ADDR
38068: LD_VAR 0 2
38072: PUSH
38073: LD_INT 1
38075: MINUS
38076: PUSH
38077: FOR_TO
38078: IFFALSE 38123
// begin tmp := tmp [ pos [ i ] ] ;
38080: LD_ADDR_VAR 0 6
38084: PUSH
38085: LD_VAR 0 6
38089: PUSH
38090: LD_VAR 0 2
38094: PUSH
38095: LD_VAR 0 5
38099: ARRAY
38100: ARRAY
38101: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
38102: LD_ADDR_VAR 0 7
38106: PUSH
38107: LD_VAR 0 7
38111: PUSH
38112: LD_VAR 0 6
38116: PUSH
38117: EMPTY
38118: LIST
38119: ADD
38120: ST_TO_ADDR
// end ;
38121: GO 38077
38123: POP
38124: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
38125: LD_ADDR_VAR 0 6
38129: PUSH
38130: LD_VAR 0 6
38134: PPUSH
38135: LD_VAR 0 2
38139: PUSH
38140: LD_VAR 0 2
38144: ARRAY
38145: PPUSH
38146: LD_VAR 0 3
38150: PPUSH
38151: CALL_OW 1
38155: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
38156: LD_ADDR_VAR 0 7
38160: PUSH
38161: LD_VAR 0 7
38165: PPUSH
38166: LD_VAR 0 7
38170: PPUSH
38171: LD_VAR 0 6
38175: PPUSH
38176: CALL_OW 1
38180: ST_TO_ADDR
// for i = s_arr downto 2 do
38181: LD_ADDR_VAR 0 5
38185: PUSH
38186: DOUBLE
38187: LD_VAR 0 7
38191: INC
38192: ST_TO_ADDR
38193: LD_INT 2
38195: PUSH
38196: FOR_DOWNTO
38197: IFFALSE 38281
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
38199: LD_ADDR_VAR 0 6
38203: PUSH
38204: LD_VAR 0 7
38208: PUSH
38209: LD_VAR 0 5
38213: PUSH
38214: LD_INT 1
38216: MINUS
38217: ARRAY
38218: PPUSH
38219: LD_VAR 0 2
38223: PUSH
38224: LD_VAR 0 5
38228: PUSH
38229: LD_INT 1
38231: MINUS
38232: ARRAY
38233: PPUSH
38234: LD_VAR 0 7
38238: PUSH
38239: LD_VAR 0 5
38243: ARRAY
38244: PPUSH
38245: CALL_OW 1
38249: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
38250: LD_ADDR_VAR 0 7
38254: PUSH
38255: LD_VAR 0 7
38259: PPUSH
38260: LD_VAR 0 5
38264: PUSH
38265: LD_INT 1
38267: MINUS
38268: PPUSH
38269: LD_VAR 0 6
38273: PPUSH
38274: CALL_OW 1
38278: ST_TO_ADDR
// end ;
38279: GO 38196
38281: POP
38282: POP
// result := s_arr [ 1 ] ;
38283: LD_ADDR_VAR 0 4
38287: PUSH
38288: LD_VAR 0 7
38292: PUSH
38293: LD_INT 1
38295: ARRAY
38296: ST_TO_ADDR
// end ; end ;
38297: LD_VAR 0 4
38301: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
38302: LD_INT 0
38304: PPUSH
38305: PPUSH
// if not list then
38306: LD_VAR 0 1
38310: NOT
38311: IFFALSE 38315
// exit ;
38313: GO 38406
// i := list [ pos1 ] ;
38315: LD_ADDR_VAR 0 5
38319: PUSH
38320: LD_VAR 0 1
38324: PUSH
38325: LD_VAR 0 2
38329: ARRAY
38330: ST_TO_ADDR
// if not i then
38331: LD_VAR 0 5
38335: NOT
38336: IFFALSE 38340
// exit ;
38338: GO 38406
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
38340: LD_ADDR_VAR 0 1
38344: PUSH
38345: LD_VAR 0 1
38349: PPUSH
38350: LD_VAR 0 2
38354: PPUSH
38355: LD_VAR 0 1
38359: PUSH
38360: LD_VAR 0 3
38364: ARRAY
38365: PPUSH
38366: CALL_OW 1
38370: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
38371: LD_ADDR_VAR 0 1
38375: PUSH
38376: LD_VAR 0 1
38380: PPUSH
38381: LD_VAR 0 3
38385: PPUSH
38386: LD_VAR 0 5
38390: PPUSH
38391: CALL_OW 1
38395: ST_TO_ADDR
// result := list ;
38396: LD_ADDR_VAR 0 4
38400: PUSH
38401: LD_VAR 0 1
38405: ST_TO_ADDR
// end ;
38406: LD_VAR 0 4
38410: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
38411: LD_INT 0
38413: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
38414: LD_ADDR_VAR 0 5
38418: PUSH
38419: LD_VAR 0 1
38423: PPUSH
38424: CALL_OW 250
38428: PPUSH
38429: LD_VAR 0 1
38433: PPUSH
38434: CALL_OW 251
38438: PPUSH
38439: LD_VAR 0 2
38443: PPUSH
38444: LD_VAR 0 3
38448: PPUSH
38449: LD_VAR 0 4
38453: PPUSH
38454: CALL 38832 0 5
38458: ST_TO_ADDR
// end ;
38459: LD_VAR 0 5
38463: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
38464: LD_INT 0
38466: PPUSH
38467: PPUSH
38468: PPUSH
38469: PPUSH
// if not list or not unit then
38470: LD_VAR 0 2
38474: NOT
38475: PUSH
38476: LD_VAR 0 1
38480: NOT
38481: OR
38482: IFFALSE 38486
// exit ;
38484: GO 38827
// result := [ ] ;
38486: LD_ADDR_VAR 0 5
38490: PUSH
38491: EMPTY
38492: ST_TO_ADDR
// for i in list do
38493: LD_ADDR_VAR 0 6
38497: PUSH
38498: LD_VAR 0 2
38502: PUSH
38503: FOR_IN
38504: IFFALSE 38722
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
38506: LD_ADDR_VAR 0 8
38510: PUSH
38511: LD_VAR 0 1
38515: PPUSH
38516: LD_VAR 0 6
38520: PUSH
38521: LD_INT 1
38523: ARRAY
38524: PPUSH
38525: LD_VAR 0 6
38529: PUSH
38530: LD_INT 2
38532: ARRAY
38533: PPUSH
38534: CALL_OW 297
38538: ST_TO_ADDR
// if not Count ( result ) then
38539: LD_VAR 0 5
38543: PPUSH
38544: CALL 35116 0 1
38548: NOT
38549: IFFALSE 38582
// begin result := Join ( result , [ i , tmp ] ) ;
38551: LD_ADDR_VAR 0 5
38555: PUSH
38556: LD_VAR 0 5
38560: PPUSH
38561: LD_VAR 0 6
38565: PUSH
38566: LD_VAR 0 8
38570: PUSH
38571: EMPTY
38572: LIST
38573: LIST
38574: PPUSH
38575: CALL 70705 0 2
38579: ST_TO_ADDR
// continue ;
38580: GO 38503
// end ; if result [ result ] [ 2 ] <= tmp then
38582: LD_VAR 0 5
38586: PUSH
38587: LD_VAR 0 5
38591: ARRAY
38592: PUSH
38593: LD_INT 2
38595: ARRAY
38596: PUSH
38597: LD_VAR 0 8
38601: LESSEQUAL
38602: IFFALSE 38635
// result := Join ( result , [ i , tmp ] ) else
38604: LD_ADDR_VAR 0 5
38608: PUSH
38609: LD_VAR 0 5
38613: PPUSH
38614: LD_VAR 0 6
38618: PUSH
38619: LD_VAR 0 8
38623: PUSH
38624: EMPTY
38625: LIST
38626: LIST
38627: PPUSH
38628: CALL 70705 0 2
38632: ST_TO_ADDR
38633: GO 38720
// begin for j := 1 to Count ( result ) do
38635: LD_ADDR_VAR 0 7
38639: PUSH
38640: DOUBLE
38641: LD_INT 1
38643: DEC
38644: ST_TO_ADDR
38645: LD_VAR 0 5
38649: PPUSH
38650: CALL 35116 0 1
38654: PUSH
38655: FOR_TO
38656: IFFALSE 38718
// begin if tmp < result [ j ] [ 2 ] then
38658: LD_VAR 0 8
38662: PUSH
38663: LD_VAR 0 5
38667: PUSH
38668: LD_VAR 0 7
38672: ARRAY
38673: PUSH
38674: LD_INT 2
38676: ARRAY
38677: LESS
38678: IFFALSE 38716
// begin result := Insert ( result , j , [ i , tmp ] ) ;
38680: LD_ADDR_VAR 0 5
38684: PUSH
38685: LD_VAR 0 5
38689: PPUSH
38690: LD_VAR 0 7
38694: PPUSH
38695: LD_VAR 0 6
38699: PUSH
38700: LD_VAR 0 8
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: PPUSH
38709: CALL_OW 2
38713: ST_TO_ADDR
// break ;
38714: GO 38718
// end ; end ;
38716: GO 38655
38718: POP
38719: POP
// end ; end ;
38720: GO 38503
38722: POP
38723: POP
// if result and not asc then
38724: LD_VAR 0 5
38728: PUSH
38729: LD_VAR 0 3
38733: NOT
38734: AND
38735: IFFALSE 38752
// result := ReverseArray ( result ) ;
38737: LD_ADDR_VAR 0 5
38741: PUSH
38742: LD_VAR 0 5
38746: PPUSH
38747: CALL 65992 0 1
38751: ST_TO_ADDR
// tmp := [ ] ;
38752: LD_ADDR_VAR 0 8
38756: PUSH
38757: EMPTY
38758: ST_TO_ADDR
// if mode then
38759: LD_VAR 0 4
38763: IFFALSE 38827
// begin for i := 1 to result do
38765: LD_ADDR_VAR 0 6
38769: PUSH
38770: DOUBLE
38771: LD_INT 1
38773: DEC
38774: ST_TO_ADDR
38775: LD_VAR 0 5
38779: PUSH
38780: FOR_TO
38781: IFFALSE 38815
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
38783: LD_ADDR_VAR 0 8
38787: PUSH
38788: LD_VAR 0 8
38792: PPUSH
38793: LD_VAR 0 5
38797: PUSH
38798: LD_VAR 0 6
38802: ARRAY
38803: PUSH
38804: LD_INT 1
38806: ARRAY
38807: PPUSH
38808: CALL 70705 0 2
38812: ST_TO_ADDR
38813: GO 38780
38815: POP
38816: POP
// result := tmp ;
38817: LD_ADDR_VAR 0 5
38821: PUSH
38822: LD_VAR 0 8
38826: ST_TO_ADDR
// end ; end ;
38827: LD_VAR 0 5
38831: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
38832: LD_INT 0
38834: PPUSH
38835: PPUSH
38836: PPUSH
38837: PPUSH
// if not list then
38838: LD_VAR 0 3
38842: NOT
38843: IFFALSE 38847
// exit ;
38845: GO 39235
// result := [ ] ;
38847: LD_ADDR_VAR 0 6
38851: PUSH
38852: EMPTY
38853: ST_TO_ADDR
// for i in list do
38854: LD_ADDR_VAR 0 7
38858: PUSH
38859: LD_VAR 0 3
38863: PUSH
38864: FOR_IN
38865: IFFALSE 39067
// begin tmp := GetDistUnitXY ( i , x , y ) ;
38867: LD_ADDR_VAR 0 9
38871: PUSH
38872: LD_VAR 0 7
38876: PPUSH
38877: LD_VAR 0 1
38881: PPUSH
38882: LD_VAR 0 2
38886: PPUSH
38887: CALL_OW 297
38891: ST_TO_ADDR
// if not result then
38892: LD_VAR 0 6
38896: NOT
38897: IFFALSE 38923
// result := [ [ i , tmp ] ] else
38899: LD_ADDR_VAR 0 6
38903: PUSH
38904: LD_VAR 0 7
38908: PUSH
38909: LD_VAR 0 9
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: PUSH
38918: EMPTY
38919: LIST
38920: ST_TO_ADDR
38921: GO 39065
// begin if result [ result ] [ 2 ] < tmp then
38923: LD_VAR 0 6
38927: PUSH
38928: LD_VAR 0 6
38932: ARRAY
38933: PUSH
38934: LD_INT 2
38936: ARRAY
38937: PUSH
38938: LD_VAR 0 9
38942: LESS
38943: IFFALSE 38985
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
38945: LD_ADDR_VAR 0 6
38949: PUSH
38950: LD_VAR 0 6
38954: PPUSH
38955: LD_VAR 0 6
38959: PUSH
38960: LD_INT 1
38962: PLUS
38963: PPUSH
38964: LD_VAR 0 7
38968: PUSH
38969: LD_VAR 0 9
38973: PUSH
38974: EMPTY
38975: LIST
38976: LIST
38977: PPUSH
38978: CALL_OW 2
38982: ST_TO_ADDR
38983: GO 39065
// for j = 1 to result do
38985: LD_ADDR_VAR 0 8
38989: PUSH
38990: DOUBLE
38991: LD_INT 1
38993: DEC
38994: ST_TO_ADDR
38995: LD_VAR 0 6
38999: PUSH
39000: FOR_TO
39001: IFFALSE 39063
// begin if tmp < result [ j ] [ 2 ] then
39003: LD_VAR 0 9
39007: PUSH
39008: LD_VAR 0 6
39012: PUSH
39013: LD_VAR 0 8
39017: ARRAY
39018: PUSH
39019: LD_INT 2
39021: ARRAY
39022: LESS
39023: IFFALSE 39061
// begin result := Insert ( result , j , [ i , tmp ] ) ;
39025: LD_ADDR_VAR 0 6
39029: PUSH
39030: LD_VAR 0 6
39034: PPUSH
39035: LD_VAR 0 8
39039: PPUSH
39040: LD_VAR 0 7
39044: PUSH
39045: LD_VAR 0 9
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: PPUSH
39054: CALL_OW 2
39058: ST_TO_ADDR
// break ;
39059: GO 39063
// end ; end ;
39061: GO 39000
39063: POP
39064: POP
// end ; end ;
39065: GO 38864
39067: POP
39068: POP
// if result and not asc then
39069: LD_VAR 0 6
39073: PUSH
39074: LD_VAR 0 4
39078: NOT
39079: AND
39080: IFFALSE 39155
// begin tmp := result ;
39082: LD_ADDR_VAR 0 9
39086: PUSH
39087: LD_VAR 0 6
39091: ST_TO_ADDR
// for i = tmp downto 1 do
39092: LD_ADDR_VAR 0 7
39096: PUSH
39097: DOUBLE
39098: LD_VAR 0 9
39102: INC
39103: ST_TO_ADDR
39104: LD_INT 1
39106: PUSH
39107: FOR_DOWNTO
39108: IFFALSE 39153
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
39110: LD_ADDR_VAR 0 6
39114: PUSH
39115: LD_VAR 0 6
39119: PPUSH
39120: LD_VAR 0 9
39124: PUSH
39125: LD_VAR 0 7
39129: MINUS
39130: PUSH
39131: LD_INT 1
39133: PLUS
39134: PPUSH
39135: LD_VAR 0 9
39139: PUSH
39140: LD_VAR 0 7
39144: ARRAY
39145: PPUSH
39146: CALL_OW 1
39150: ST_TO_ADDR
39151: GO 39107
39153: POP
39154: POP
// end ; tmp := [ ] ;
39155: LD_ADDR_VAR 0 9
39159: PUSH
39160: EMPTY
39161: ST_TO_ADDR
// if mode then
39162: LD_VAR 0 5
39166: IFFALSE 39235
// begin for i = 1 to result do
39168: LD_ADDR_VAR 0 7
39172: PUSH
39173: DOUBLE
39174: LD_INT 1
39176: DEC
39177: ST_TO_ADDR
39178: LD_VAR 0 6
39182: PUSH
39183: FOR_TO
39184: IFFALSE 39223
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
39186: LD_ADDR_VAR 0 9
39190: PUSH
39191: LD_VAR 0 9
39195: PPUSH
39196: LD_VAR 0 7
39200: PPUSH
39201: LD_VAR 0 6
39205: PUSH
39206: LD_VAR 0 7
39210: ARRAY
39211: PUSH
39212: LD_INT 1
39214: ARRAY
39215: PPUSH
39216: CALL_OW 1
39220: ST_TO_ADDR
39221: GO 39183
39223: POP
39224: POP
// result := tmp ;
39225: LD_ADDR_VAR 0 6
39229: PUSH
39230: LD_VAR 0 9
39234: ST_TO_ADDR
// end ; end ;
39235: LD_VAR 0 6
39239: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
39240: LD_INT 0
39242: PPUSH
39243: PPUSH
39244: PPUSH
39245: PPUSH
39246: PPUSH
39247: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
39248: LD_ADDR_VAR 0 5
39252: PUSH
39253: LD_INT 0
39255: PUSH
39256: LD_INT 0
39258: PUSH
39259: LD_INT 0
39261: PUSH
39262: EMPTY
39263: PUSH
39264: EMPTY
39265: LIST
39266: LIST
39267: LIST
39268: LIST
39269: ST_TO_ADDR
// if not x or not y then
39270: LD_VAR 0 2
39274: NOT
39275: PUSH
39276: LD_VAR 0 3
39280: NOT
39281: OR
39282: IFFALSE 39286
// exit ;
39284: GO 40936
// if not range then
39286: LD_VAR 0 4
39290: NOT
39291: IFFALSE 39301
// range := 10 ;
39293: LD_ADDR_VAR 0 4
39297: PUSH
39298: LD_INT 10
39300: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39301: LD_ADDR_VAR 0 8
39305: PUSH
39306: LD_INT 81
39308: PUSH
39309: LD_VAR 0 1
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: PUSH
39318: LD_INT 92
39320: PUSH
39321: LD_VAR 0 2
39325: PUSH
39326: LD_VAR 0 3
39330: PUSH
39331: LD_VAR 0 4
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: LIST
39340: LIST
39341: PUSH
39342: LD_INT 3
39344: PUSH
39345: LD_INT 21
39347: PUSH
39348: LD_INT 3
39350: PUSH
39351: EMPTY
39352: LIST
39353: LIST
39354: PUSH
39355: EMPTY
39356: LIST
39357: LIST
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: LIST
39363: PPUSH
39364: CALL_OW 69
39368: ST_TO_ADDR
// if not tmp then
39369: LD_VAR 0 8
39373: NOT
39374: IFFALSE 39378
// exit ;
39376: GO 40936
// for i in tmp do
39378: LD_ADDR_VAR 0 6
39382: PUSH
39383: LD_VAR 0 8
39387: PUSH
39388: FOR_IN
39389: IFFALSE 40911
// begin points := [ 0 , 0 , 0 ] ;
39391: LD_ADDR_VAR 0 9
39395: PUSH
39396: LD_INT 0
39398: PUSH
39399: LD_INT 0
39401: PUSH
39402: LD_INT 0
39404: PUSH
39405: EMPTY
39406: LIST
39407: LIST
39408: LIST
39409: ST_TO_ADDR
// bpoints := 1 ;
39410: LD_ADDR_VAR 0 10
39414: PUSH
39415: LD_INT 1
39417: ST_TO_ADDR
// case GetType ( i ) of unit_human :
39418: LD_VAR 0 6
39422: PPUSH
39423: CALL_OW 247
39427: PUSH
39428: LD_INT 1
39430: DOUBLE
39431: EQUAL
39432: IFTRUE 39436
39434: GO 40014
39436: POP
// begin if GetClass ( i ) = 1 then
39437: LD_VAR 0 6
39441: PPUSH
39442: CALL_OW 257
39446: PUSH
39447: LD_INT 1
39449: EQUAL
39450: IFFALSE 39471
// points := [ 10 , 5 , 3 ] ;
39452: LD_ADDR_VAR 0 9
39456: PUSH
39457: LD_INT 10
39459: PUSH
39460: LD_INT 5
39462: PUSH
39463: LD_INT 3
39465: PUSH
39466: EMPTY
39467: LIST
39468: LIST
39469: LIST
39470: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
39471: LD_VAR 0 6
39475: PPUSH
39476: CALL_OW 257
39480: PUSH
39481: LD_INT 2
39483: PUSH
39484: LD_INT 3
39486: PUSH
39487: LD_INT 4
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: LIST
39494: IN
39495: IFFALSE 39516
// points := [ 3 , 2 , 1 ] ;
39497: LD_ADDR_VAR 0 9
39501: PUSH
39502: LD_INT 3
39504: PUSH
39505: LD_INT 2
39507: PUSH
39508: LD_INT 1
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: LIST
39515: ST_TO_ADDR
// if GetClass ( i ) = 5 then
39516: LD_VAR 0 6
39520: PPUSH
39521: CALL_OW 257
39525: PUSH
39526: LD_INT 5
39528: EQUAL
39529: IFFALSE 39550
// points := [ 130 , 5 , 2 ] ;
39531: LD_ADDR_VAR 0 9
39535: PUSH
39536: LD_INT 130
39538: PUSH
39539: LD_INT 5
39541: PUSH
39542: LD_INT 2
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: LIST
39549: ST_TO_ADDR
// if GetClass ( i ) = 8 then
39550: LD_VAR 0 6
39554: PPUSH
39555: CALL_OW 257
39559: PUSH
39560: LD_INT 8
39562: EQUAL
39563: IFFALSE 39584
// points := [ 35 , 35 , 30 ] ;
39565: LD_ADDR_VAR 0 9
39569: PUSH
39570: LD_INT 35
39572: PUSH
39573: LD_INT 35
39575: PUSH
39576: LD_INT 30
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: LIST
39583: ST_TO_ADDR
// if GetClass ( i ) = 9 then
39584: LD_VAR 0 6
39588: PPUSH
39589: CALL_OW 257
39593: PUSH
39594: LD_INT 9
39596: EQUAL
39597: IFFALSE 39618
// points := [ 20 , 55 , 40 ] ;
39599: LD_ADDR_VAR 0 9
39603: PUSH
39604: LD_INT 20
39606: PUSH
39607: LD_INT 55
39609: PUSH
39610: LD_INT 40
39612: PUSH
39613: EMPTY
39614: LIST
39615: LIST
39616: LIST
39617: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
39618: LD_VAR 0 6
39622: PPUSH
39623: CALL_OW 257
39627: PUSH
39628: LD_INT 12
39630: PUSH
39631: LD_INT 16
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: IN
39638: IFFALSE 39659
// points := [ 5 , 3 , 2 ] ;
39640: LD_ADDR_VAR 0 9
39644: PUSH
39645: LD_INT 5
39647: PUSH
39648: LD_INT 3
39650: PUSH
39651: LD_INT 2
39653: PUSH
39654: EMPTY
39655: LIST
39656: LIST
39657: LIST
39658: ST_TO_ADDR
// if GetClass ( i ) = 17 then
39659: LD_VAR 0 6
39663: PPUSH
39664: CALL_OW 257
39668: PUSH
39669: LD_INT 17
39671: EQUAL
39672: IFFALSE 39693
// points := [ 100 , 50 , 75 ] ;
39674: LD_ADDR_VAR 0 9
39678: PUSH
39679: LD_INT 100
39681: PUSH
39682: LD_INT 50
39684: PUSH
39685: LD_INT 75
39687: PUSH
39688: EMPTY
39689: LIST
39690: LIST
39691: LIST
39692: ST_TO_ADDR
// if GetClass ( i ) = 15 then
39693: LD_VAR 0 6
39697: PPUSH
39698: CALL_OW 257
39702: PUSH
39703: LD_INT 15
39705: EQUAL
39706: IFFALSE 39727
// points := [ 10 , 5 , 3 ] ;
39708: LD_ADDR_VAR 0 9
39712: PUSH
39713: LD_INT 10
39715: PUSH
39716: LD_INT 5
39718: PUSH
39719: LD_INT 3
39721: PUSH
39722: EMPTY
39723: LIST
39724: LIST
39725: LIST
39726: ST_TO_ADDR
// if GetClass ( i ) = 14 then
39727: LD_VAR 0 6
39731: PPUSH
39732: CALL_OW 257
39736: PUSH
39737: LD_INT 14
39739: EQUAL
39740: IFFALSE 39761
// points := [ 10 , 0 , 0 ] ;
39742: LD_ADDR_VAR 0 9
39746: PUSH
39747: LD_INT 10
39749: PUSH
39750: LD_INT 0
39752: PUSH
39753: LD_INT 0
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: LIST
39760: ST_TO_ADDR
// if GetClass ( i ) = 11 then
39761: LD_VAR 0 6
39765: PPUSH
39766: CALL_OW 257
39770: PUSH
39771: LD_INT 11
39773: EQUAL
39774: IFFALSE 39795
// points := [ 30 , 10 , 5 ] ;
39776: LD_ADDR_VAR 0 9
39780: PUSH
39781: LD_INT 30
39783: PUSH
39784: LD_INT 10
39786: PUSH
39787: LD_INT 5
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: LIST
39794: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
39795: LD_VAR 0 1
39799: PPUSH
39800: LD_INT 5
39802: PPUSH
39803: CALL_OW 321
39807: PUSH
39808: LD_INT 2
39810: EQUAL
39811: IFFALSE 39828
// bpoints := bpoints * 1.8 ;
39813: LD_ADDR_VAR 0 10
39817: PUSH
39818: LD_VAR 0 10
39822: PUSH
39823: LD_REAL  1.80000000000000E+0000
39826: MUL
39827: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
39828: LD_VAR 0 6
39832: PPUSH
39833: CALL_OW 257
39837: PUSH
39838: LD_INT 1
39840: PUSH
39841: LD_INT 2
39843: PUSH
39844: LD_INT 3
39846: PUSH
39847: LD_INT 4
39849: PUSH
39850: EMPTY
39851: LIST
39852: LIST
39853: LIST
39854: LIST
39855: IN
39856: PUSH
39857: LD_VAR 0 1
39861: PPUSH
39862: LD_INT 51
39864: PPUSH
39865: CALL_OW 321
39869: PUSH
39870: LD_INT 2
39872: EQUAL
39873: AND
39874: IFFALSE 39891
// bpoints := bpoints * 1.2 ;
39876: LD_ADDR_VAR 0 10
39880: PUSH
39881: LD_VAR 0 10
39885: PUSH
39886: LD_REAL  1.20000000000000E+0000
39889: MUL
39890: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
39891: LD_VAR 0 6
39895: PPUSH
39896: CALL_OW 257
39900: PUSH
39901: LD_INT 5
39903: PUSH
39904: LD_INT 7
39906: PUSH
39907: LD_INT 9
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: LIST
39914: IN
39915: PUSH
39916: LD_VAR 0 1
39920: PPUSH
39921: LD_INT 52
39923: PPUSH
39924: CALL_OW 321
39928: PUSH
39929: LD_INT 2
39931: EQUAL
39932: AND
39933: IFFALSE 39950
// bpoints := bpoints * 1.5 ;
39935: LD_ADDR_VAR 0 10
39939: PUSH
39940: LD_VAR 0 10
39944: PUSH
39945: LD_REAL  1.50000000000000E+0000
39948: MUL
39949: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
39950: LD_VAR 0 1
39954: PPUSH
39955: LD_INT 66
39957: PPUSH
39958: CALL_OW 321
39962: PUSH
39963: LD_INT 2
39965: EQUAL
39966: IFFALSE 39983
// bpoints := bpoints * 1.1 ;
39968: LD_ADDR_VAR 0 10
39972: PUSH
39973: LD_VAR 0 10
39977: PUSH
39978: LD_REAL  1.10000000000000E+0000
39981: MUL
39982: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
39983: LD_ADDR_VAR 0 10
39987: PUSH
39988: LD_VAR 0 10
39992: PUSH
39993: LD_VAR 0 6
39997: PPUSH
39998: LD_INT 1
40000: PPUSH
40001: CALL_OW 259
40005: PUSH
40006: LD_REAL  1.15000000000000E+0000
40009: MUL
40010: MUL
40011: ST_TO_ADDR
// end ; unit_vehicle :
40012: GO 40840
40014: LD_INT 2
40016: DOUBLE
40017: EQUAL
40018: IFTRUE 40022
40020: GO 40828
40022: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
40023: LD_VAR 0 6
40027: PPUSH
40028: CALL_OW 264
40032: PUSH
40033: LD_INT 2
40035: PUSH
40036: LD_INT 42
40038: PUSH
40039: LD_INT 24
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: LIST
40046: IN
40047: IFFALSE 40068
// points := [ 25 , 5 , 3 ] ;
40049: LD_ADDR_VAR 0 9
40053: PUSH
40054: LD_INT 25
40056: PUSH
40057: LD_INT 5
40059: PUSH
40060: LD_INT 3
40062: PUSH
40063: EMPTY
40064: LIST
40065: LIST
40066: LIST
40067: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
40068: LD_VAR 0 6
40072: PPUSH
40073: CALL_OW 264
40077: PUSH
40078: LD_INT 4
40080: PUSH
40081: LD_INT 43
40083: PUSH
40084: LD_INT 25
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: LIST
40091: IN
40092: IFFALSE 40113
// points := [ 40 , 15 , 5 ] ;
40094: LD_ADDR_VAR 0 9
40098: PUSH
40099: LD_INT 40
40101: PUSH
40102: LD_INT 15
40104: PUSH
40105: LD_INT 5
40107: PUSH
40108: EMPTY
40109: LIST
40110: LIST
40111: LIST
40112: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
40113: LD_VAR 0 6
40117: PPUSH
40118: CALL_OW 264
40122: PUSH
40123: LD_INT 3
40125: PUSH
40126: LD_INT 23
40128: PUSH
40129: EMPTY
40130: LIST
40131: LIST
40132: IN
40133: IFFALSE 40154
// points := [ 7 , 25 , 8 ] ;
40135: LD_ADDR_VAR 0 9
40139: PUSH
40140: LD_INT 7
40142: PUSH
40143: LD_INT 25
40145: PUSH
40146: LD_INT 8
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: LIST
40153: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
40154: LD_VAR 0 6
40158: PPUSH
40159: CALL_OW 264
40163: PUSH
40164: LD_INT 5
40166: PUSH
40167: LD_INT 27
40169: PUSH
40170: LD_INT 44
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: LIST
40177: IN
40178: IFFALSE 40199
// points := [ 14 , 50 , 16 ] ;
40180: LD_ADDR_VAR 0 9
40184: PUSH
40185: LD_INT 14
40187: PUSH
40188: LD_INT 50
40190: PUSH
40191: LD_INT 16
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: LIST
40198: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
40199: LD_VAR 0 6
40203: PPUSH
40204: CALL_OW 264
40208: PUSH
40209: LD_INT 6
40211: PUSH
40212: LD_INT 46
40214: PUSH
40215: EMPTY
40216: LIST
40217: LIST
40218: IN
40219: IFFALSE 40240
// points := [ 32 , 120 , 70 ] ;
40221: LD_ADDR_VAR 0 9
40225: PUSH
40226: LD_INT 32
40228: PUSH
40229: LD_INT 120
40231: PUSH
40232: LD_INT 70
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: LIST
40239: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
40240: LD_VAR 0 6
40244: PPUSH
40245: CALL_OW 264
40249: PUSH
40250: LD_INT 7
40252: PUSH
40253: LD_INT 28
40255: PUSH
40256: LD_INT 45
40258: PUSH
40259: LD_INT 92
40261: PUSH
40262: EMPTY
40263: LIST
40264: LIST
40265: LIST
40266: LIST
40267: IN
40268: IFFALSE 40289
// points := [ 35 , 20 , 45 ] ;
40270: LD_ADDR_VAR 0 9
40274: PUSH
40275: LD_INT 35
40277: PUSH
40278: LD_INT 20
40280: PUSH
40281: LD_INT 45
40283: PUSH
40284: EMPTY
40285: LIST
40286: LIST
40287: LIST
40288: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
40289: LD_VAR 0 6
40293: PPUSH
40294: CALL_OW 264
40298: PUSH
40299: LD_INT 47
40301: PUSH
40302: EMPTY
40303: LIST
40304: IN
40305: IFFALSE 40326
// points := [ 67 , 45 , 75 ] ;
40307: LD_ADDR_VAR 0 9
40311: PUSH
40312: LD_INT 67
40314: PUSH
40315: LD_INT 45
40317: PUSH
40318: LD_INT 75
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: LIST
40325: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
40326: LD_VAR 0 6
40330: PPUSH
40331: CALL_OW 264
40335: PUSH
40336: LD_INT 26
40338: PUSH
40339: EMPTY
40340: LIST
40341: IN
40342: IFFALSE 40363
// points := [ 120 , 30 , 80 ] ;
40344: LD_ADDR_VAR 0 9
40348: PUSH
40349: LD_INT 120
40351: PUSH
40352: LD_INT 30
40354: PUSH
40355: LD_INT 80
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: LIST
40362: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
40363: LD_VAR 0 6
40367: PPUSH
40368: CALL_OW 264
40372: PUSH
40373: LD_INT 22
40375: PUSH
40376: EMPTY
40377: LIST
40378: IN
40379: IFFALSE 40400
// points := [ 40 , 1 , 1 ] ;
40381: LD_ADDR_VAR 0 9
40385: PUSH
40386: LD_INT 40
40388: PUSH
40389: LD_INT 1
40391: PUSH
40392: LD_INT 1
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: LIST
40399: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
40400: LD_VAR 0 6
40404: PPUSH
40405: CALL_OW 264
40409: PUSH
40410: LD_INT 29
40412: PUSH
40413: EMPTY
40414: LIST
40415: IN
40416: IFFALSE 40437
// points := [ 70 , 200 , 400 ] ;
40418: LD_ADDR_VAR 0 9
40422: PUSH
40423: LD_INT 70
40425: PUSH
40426: LD_INT 200
40428: PUSH
40429: LD_INT 400
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: LIST
40436: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
40437: LD_VAR 0 6
40441: PPUSH
40442: CALL_OW 264
40446: PUSH
40447: LD_INT 14
40449: PUSH
40450: LD_INT 53
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: IN
40457: IFFALSE 40478
// points := [ 40 , 10 , 20 ] ;
40459: LD_ADDR_VAR 0 9
40463: PUSH
40464: LD_INT 40
40466: PUSH
40467: LD_INT 10
40469: PUSH
40470: LD_INT 20
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: LIST
40477: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
40478: LD_VAR 0 6
40482: PPUSH
40483: CALL_OW 264
40487: PUSH
40488: LD_INT 9
40490: PUSH
40491: EMPTY
40492: LIST
40493: IN
40494: IFFALSE 40515
// points := [ 5 , 70 , 20 ] ;
40496: LD_ADDR_VAR 0 9
40500: PUSH
40501: LD_INT 5
40503: PUSH
40504: LD_INT 70
40506: PUSH
40507: LD_INT 20
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: LIST
40514: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
40515: LD_VAR 0 6
40519: PPUSH
40520: CALL_OW 264
40524: PUSH
40525: LD_INT 10
40527: PUSH
40528: EMPTY
40529: LIST
40530: IN
40531: IFFALSE 40552
// points := [ 35 , 110 , 70 ] ;
40533: LD_ADDR_VAR 0 9
40537: PUSH
40538: LD_INT 35
40540: PUSH
40541: LD_INT 110
40543: PUSH
40544: LD_INT 70
40546: PUSH
40547: EMPTY
40548: LIST
40549: LIST
40550: LIST
40551: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
40552: LD_VAR 0 6
40556: PPUSH
40557: CALL_OW 265
40561: PUSH
40562: LD_INT 25
40564: EQUAL
40565: IFFALSE 40586
// points := [ 80 , 65 , 100 ] ;
40567: LD_ADDR_VAR 0 9
40571: PUSH
40572: LD_INT 80
40574: PUSH
40575: LD_INT 65
40577: PUSH
40578: LD_INT 100
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: LIST
40585: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
40586: LD_VAR 0 6
40590: PPUSH
40591: CALL_OW 263
40595: PUSH
40596: LD_INT 1
40598: EQUAL
40599: IFFALSE 40634
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
40601: LD_ADDR_VAR 0 10
40605: PUSH
40606: LD_VAR 0 10
40610: PUSH
40611: LD_VAR 0 6
40615: PPUSH
40616: CALL_OW 311
40620: PPUSH
40621: LD_INT 3
40623: PPUSH
40624: CALL_OW 259
40628: PUSH
40629: LD_INT 4
40631: MUL
40632: MUL
40633: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
40634: LD_VAR 0 6
40638: PPUSH
40639: CALL_OW 263
40643: PUSH
40644: LD_INT 2
40646: EQUAL
40647: IFFALSE 40698
// begin j := IsControledBy ( i ) ;
40649: LD_ADDR_VAR 0 7
40653: PUSH
40654: LD_VAR 0 6
40658: PPUSH
40659: CALL_OW 312
40663: ST_TO_ADDR
// if j then
40664: LD_VAR 0 7
40668: IFFALSE 40698
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
40670: LD_ADDR_VAR 0 10
40674: PUSH
40675: LD_VAR 0 10
40679: PUSH
40680: LD_VAR 0 7
40684: PPUSH
40685: LD_INT 3
40687: PPUSH
40688: CALL_OW 259
40692: PUSH
40693: LD_INT 3
40695: MUL
40696: MUL
40697: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
40698: LD_VAR 0 6
40702: PPUSH
40703: CALL_OW 264
40707: PUSH
40708: LD_INT 5
40710: PUSH
40711: LD_INT 6
40713: PUSH
40714: LD_INT 46
40716: PUSH
40717: LD_INT 44
40719: PUSH
40720: LD_INT 47
40722: PUSH
40723: LD_INT 45
40725: PUSH
40726: LD_INT 28
40728: PUSH
40729: LD_INT 7
40731: PUSH
40732: LD_INT 27
40734: PUSH
40735: LD_INT 29
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: LIST
40742: LIST
40743: LIST
40744: LIST
40745: LIST
40746: LIST
40747: LIST
40748: LIST
40749: IN
40750: PUSH
40751: LD_VAR 0 1
40755: PPUSH
40756: LD_INT 52
40758: PPUSH
40759: CALL_OW 321
40763: PUSH
40764: LD_INT 2
40766: EQUAL
40767: AND
40768: IFFALSE 40785
// bpoints := bpoints * 1.2 ;
40770: LD_ADDR_VAR 0 10
40774: PUSH
40775: LD_VAR 0 10
40779: PUSH
40780: LD_REAL  1.20000000000000E+0000
40783: MUL
40784: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
40785: LD_VAR 0 6
40789: PPUSH
40790: CALL_OW 264
40794: PUSH
40795: LD_INT 6
40797: PUSH
40798: LD_INT 46
40800: PUSH
40801: LD_INT 47
40803: PUSH
40804: EMPTY
40805: LIST
40806: LIST
40807: LIST
40808: IN
40809: IFFALSE 40826
// bpoints := bpoints * 1.2 ;
40811: LD_ADDR_VAR 0 10
40815: PUSH
40816: LD_VAR 0 10
40820: PUSH
40821: LD_REAL  1.20000000000000E+0000
40824: MUL
40825: ST_TO_ADDR
// end ; unit_building :
40826: GO 40840
40828: LD_INT 3
40830: DOUBLE
40831: EQUAL
40832: IFTRUE 40836
40834: GO 40839
40836: POP
// ; end ;
40837: GO 40840
40839: POP
// for j = 1 to 3 do
40840: LD_ADDR_VAR 0 7
40844: PUSH
40845: DOUBLE
40846: LD_INT 1
40848: DEC
40849: ST_TO_ADDR
40850: LD_INT 3
40852: PUSH
40853: FOR_TO
40854: IFFALSE 40907
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
40856: LD_ADDR_VAR 0 5
40860: PUSH
40861: LD_VAR 0 5
40865: PPUSH
40866: LD_VAR 0 7
40870: PPUSH
40871: LD_VAR 0 5
40875: PUSH
40876: LD_VAR 0 7
40880: ARRAY
40881: PUSH
40882: LD_VAR 0 9
40886: PUSH
40887: LD_VAR 0 7
40891: ARRAY
40892: PUSH
40893: LD_VAR 0 10
40897: MUL
40898: PLUS
40899: PPUSH
40900: CALL_OW 1
40904: ST_TO_ADDR
40905: GO 40853
40907: POP
40908: POP
// end ;
40909: GO 39388
40911: POP
40912: POP
// result := Replace ( result , 4 , tmp ) ;
40913: LD_ADDR_VAR 0 5
40917: PUSH
40918: LD_VAR 0 5
40922: PPUSH
40923: LD_INT 4
40925: PPUSH
40926: LD_VAR 0 8
40930: PPUSH
40931: CALL_OW 1
40935: ST_TO_ADDR
// end ;
40936: LD_VAR 0 5
40940: RET
// export function DangerAtRange ( unit , range ) ; begin
40941: LD_INT 0
40943: PPUSH
// if not unit then
40944: LD_VAR 0 1
40948: NOT
40949: IFFALSE 40953
// exit ;
40951: GO 40998
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
40953: LD_ADDR_VAR 0 3
40957: PUSH
40958: LD_VAR 0 1
40962: PPUSH
40963: CALL_OW 255
40967: PPUSH
40968: LD_VAR 0 1
40972: PPUSH
40973: CALL_OW 250
40977: PPUSH
40978: LD_VAR 0 1
40982: PPUSH
40983: CALL_OW 251
40987: PPUSH
40988: LD_VAR 0 2
40992: PPUSH
40993: CALL 39240 0 4
40997: ST_TO_ADDR
// end ;
40998: LD_VAR 0 3
41002: RET
// export function DangerInArea ( side , area ) ; begin
41003: LD_INT 0
41005: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
41006: LD_ADDR_VAR 0 3
41010: PUSH
41011: LD_VAR 0 2
41015: PPUSH
41016: LD_INT 81
41018: PUSH
41019: LD_VAR 0 1
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: PPUSH
41028: CALL_OW 70
41032: ST_TO_ADDR
// end ;
41033: LD_VAR 0 3
41037: RET
// export function IsExtension ( b ) ; begin
41038: LD_INT 0
41040: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
41041: LD_ADDR_VAR 0 2
41045: PUSH
41046: LD_VAR 0 1
41050: PUSH
41051: LD_INT 23
41053: PUSH
41054: LD_INT 20
41056: PUSH
41057: LD_INT 22
41059: PUSH
41060: LD_INT 17
41062: PUSH
41063: LD_INT 24
41065: PUSH
41066: LD_INT 21
41068: PUSH
41069: LD_INT 19
41071: PUSH
41072: LD_INT 16
41074: PUSH
41075: LD_INT 25
41077: PUSH
41078: LD_INT 18
41080: PUSH
41081: EMPTY
41082: LIST
41083: LIST
41084: LIST
41085: LIST
41086: LIST
41087: LIST
41088: LIST
41089: LIST
41090: LIST
41091: LIST
41092: IN
41093: ST_TO_ADDR
// end ;
41094: LD_VAR 0 2
41098: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
41099: LD_INT 0
41101: PPUSH
41102: PPUSH
41103: PPUSH
// result := [ ] ;
41104: LD_ADDR_VAR 0 4
41108: PUSH
41109: EMPTY
41110: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
41111: LD_ADDR_VAR 0 5
41115: PUSH
41116: LD_VAR 0 2
41120: PPUSH
41121: LD_INT 21
41123: PUSH
41124: LD_INT 3
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: PPUSH
41131: CALL_OW 70
41135: ST_TO_ADDR
// if not tmp then
41136: LD_VAR 0 5
41140: NOT
41141: IFFALSE 41145
// exit ;
41143: GO 41209
// if checkLink then
41145: LD_VAR 0 3
41149: IFFALSE 41199
// begin for i in tmp do
41151: LD_ADDR_VAR 0 6
41155: PUSH
41156: LD_VAR 0 5
41160: PUSH
41161: FOR_IN
41162: IFFALSE 41197
// if GetBase ( i ) <> base then
41164: LD_VAR 0 6
41168: PPUSH
41169: CALL_OW 274
41173: PUSH
41174: LD_VAR 0 1
41178: NONEQUAL
41179: IFFALSE 41195
// ComLinkToBase ( base , i ) ;
41181: LD_VAR 0 1
41185: PPUSH
41186: LD_VAR 0 6
41190: PPUSH
41191: CALL_OW 169
41195: GO 41161
41197: POP
41198: POP
// end ; result := tmp ;
41199: LD_ADDR_VAR 0 4
41203: PUSH
41204: LD_VAR 0 5
41208: ST_TO_ADDR
// end ;
41209: LD_VAR 0 4
41213: RET
// export function ComComplete ( units , b ) ; var i ; begin
41214: LD_INT 0
41216: PPUSH
41217: PPUSH
// if not units then
41218: LD_VAR 0 1
41222: NOT
41223: IFFALSE 41227
// exit ;
41225: GO 41317
// for i in units do
41227: LD_ADDR_VAR 0 4
41231: PUSH
41232: LD_VAR 0 1
41236: PUSH
41237: FOR_IN
41238: IFFALSE 41315
// if BuildingStatus ( b ) = bs_build then
41240: LD_VAR 0 2
41244: PPUSH
41245: CALL_OW 461
41249: PUSH
41250: LD_INT 1
41252: EQUAL
41253: IFFALSE 41313
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
41255: LD_VAR 0 4
41259: PPUSH
41260: LD_STRING h
41262: PUSH
41263: LD_VAR 0 2
41267: PPUSH
41268: CALL_OW 250
41272: PUSH
41273: LD_VAR 0 2
41277: PPUSH
41278: CALL_OW 251
41282: PUSH
41283: LD_VAR 0 2
41287: PUSH
41288: LD_INT 0
41290: PUSH
41291: LD_INT 0
41293: PUSH
41294: LD_INT 0
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: LIST
41301: LIST
41302: LIST
41303: LIST
41304: LIST
41305: PUSH
41306: EMPTY
41307: LIST
41308: PPUSH
41309: CALL_OW 446
41313: GO 41237
41315: POP
41316: POP
// end ;
41317: LD_VAR 0 3
41321: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
41322: LD_INT 0
41324: PPUSH
41325: PPUSH
41326: PPUSH
41327: PPUSH
41328: PPUSH
41329: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
41330: LD_VAR 0 1
41334: NOT
41335: PUSH
41336: LD_VAR 0 1
41340: PPUSH
41341: CALL_OW 263
41345: PUSH
41346: LD_INT 2
41348: NONEQUAL
41349: OR
41350: IFFALSE 41354
// exit ;
41352: GO 41670
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
41354: LD_ADDR_VAR 0 6
41358: PUSH
41359: LD_INT 22
41361: PUSH
41362: LD_VAR 0 1
41366: PPUSH
41367: CALL_OW 255
41371: PUSH
41372: EMPTY
41373: LIST
41374: LIST
41375: PUSH
41376: LD_INT 2
41378: PUSH
41379: LD_INT 30
41381: PUSH
41382: LD_INT 36
41384: PUSH
41385: EMPTY
41386: LIST
41387: LIST
41388: PUSH
41389: LD_INT 34
41391: PUSH
41392: LD_INT 31
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: LIST
41403: PUSH
41404: EMPTY
41405: LIST
41406: LIST
41407: PPUSH
41408: CALL_OW 69
41412: ST_TO_ADDR
// if not tmp then
41413: LD_VAR 0 6
41417: NOT
41418: IFFALSE 41422
// exit ;
41420: GO 41670
// result := [ ] ;
41422: LD_ADDR_VAR 0 2
41426: PUSH
41427: EMPTY
41428: ST_TO_ADDR
// for i in tmp do
41429: LD_ADDR_VAR 0 3
41433: PUSH
41434: LD_VAR 0 6
41438: PUSH
41439: FOR_IN
41440: IFFALSE 41511
// begin t := UnitsInside ( i ) ;
41442: LD_ADDR_VAR 0 4
41446: PUSH
41447: LD_VAR 0 3
41451: PPUSH
41452: CALL_OW 313
41456: ST_TO_ADDR
// if t then
41457: LD_VAR 0 4
41461: IFFALSE 41509
// for j in t do
41463: LD_ADDR_VAR 0 7
41467: PUSH
41468: LD_VAR 0 4
41472: PUSH
41473: FOR_IN
41474: IFFALSE 41507
// result := Replace ( result , result + 1 , j ) ;
41476: LD_ADDR_VAR 0 2
41480: PUSH
41481: LD_VAR 0 2
41485: PPUSH
41486: LD_VAR 0 2
41490: PUSH
41491: LD_INT 1
41493: PLUS
41494: PPUSH
41495: LD_VAR 0 7
41499: PPUSH
41500: CALL_OW 1
41504: ST_TO_ADDR
41505: GO 41473
41507: POP
41508: POP
// end ;
41509: GO 41439
41511: POP
41512: POP
// if not result then
41513: LD_VAR 0 2
41517: NOT
41518: IFFALSE 41522
// exit ;
41520: GO 41670
// mech := result [ 1 ] ;
41522: LD_ADDR_VAR 0 5
41526: PUSH
41527: LD_VAR 0 2
41531: PUSH
41532: LD_INT 1
41534: ARRAY
41535: ST_TO_ADDR
// if result > 1 then
41536: LD_VAR 0 2
41540: PUSH
41541: LD_INT 1
41543: GREATER
41544: IFFALSE 41656
// begin for i = 2 to result do
41546: LD_ADDR_VAR 0 3
41550: PUSH
41551: DOUBLE
41552: LD_INT 2
41554: DEC
41555: ST_TO_ADDR
41556: LD_VAR 0 2
41560: PUSH
41561: FOR_TO
41562: IFFALSE 41654
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
41564: LD_ADDR_VAR 0 4
41568: PUSH
41569: LD_VAR 0 2
41573: PUSH
41574: LD_VAR 0 3
41578: ARRAY
41579: PPUSH
41580: LD_INT 3
41582: PPUSH
41583: CALL_OW 259
41587: PUSH
41588: LD_VAR 0 2
41592: PUSH
41593: LD_VAR 0 3
41597: ARRAY
41598: PPUSH
41599: CALL_OW 432
41603: MINUS
41604: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
41605: LD_VAR 0 4
41609: PUSH
41610: LD_VAR 0 5
41614: PPUSH
41615: LD_INT 3
41617: PPUSH
41618: CALL_OW 259
41622: PUSH
41623: LD_VAR 0 5
41627: PPUSH
41628: CALL_OW 432
41632: MINUS
41633: GREATEREQUAL
41634: IFFALSE 41652
// mech := result [ i ] ;
41636: LD_ADDR_VAR 0 5
41640: PUSH
41641: LD_VAR 0 2
41645: PUSH
41646: LD_VAR 0 3
41650: ARRAY
41651: ST_TO_ADDR
// end ;
41652: GO 41561
41654: POP
41655: POP
// end ; ComLinkTo ( vehicle , mech ) ;
41656: LD_VAR 0 1
41660: PPUSH
41661: LD_VAR 0 5
41665: PPUSH
41666: CALL_OW 135
// end ;
41670: LD_VAR 0 2
41674: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
41675: LD_INT 0
41677: PPUSH
41678: PPUSH
41679: PPUSH
41680: PPUSH
41681: PPUSH
41682: PPUSH
41683: PPUSH
41684: PPUSH
41685: PPUSH
41686: PPUSH
41687: PPUSH
41688: PPUSH
41689: PPUSH
// result := [ ] ;
41690: LD_ADDR_VAR 0 7
41694: PUSH
41695: EMPTY
41696: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
41697: LD_VAR 0 1
41701: PPUSH
41702: CALL_OW 266
41706: PUSH
41707: LD_INT 0
41709: PUSH
41710: LD_INT 1
41712: PUSH
41713: EMPTY
41714: LIST
41715: LIST
41716: IN
41717: NOT
41718: IFFALSE 41722
// exit ;
41720: GO 43356
// if name then
41722: LD_VAR 0 3
41726: IFFALSE 41742
// SetBName ( base_dep , name ) ;
41728: LD_VAR 0 1
41732: PPUSH
41733: LD_VAR 0 3
41737: PPUSH
41738: CALL_OW 500
// base := GetBase ( base_dep ) ;
41742: LD_ADDR_VAR 0 15
41746: PUSH
41747: LD_VAR 0 1
41751: PPUSH
41752: CALL_OW 274
41756: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
41757: LD_ADDR_VAR 0 16
41761: PUSH
41762: LD_VAR 0 1
41766: PPUSH
41767: CALL_OW 255
41771: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
41772: LD_ADDR_VAR 0 17
41776: PUSH
41777: LD_VAR 0 1
41781: PPUSH
41782: CALL_OW 248
41786: ST_TO_ADDR
// if sources then
41787: LD_VAR 0 5
41791: IFFALSE 41838
// for i = 1 to 3 do
41793: LD_ADDR_VAR 0 8
41797: PUSH
41798: DOUBLE
41799: LD_INT 1
41801: DEC
41802: ST_TO_ADDR
41803: LD_INT 3
41805: PUSH
41806: FOR_TO
41807: IFFALSE 41836
// AddResourceType ( base , i , sources [ i ] ) ;
41809: LD_VAR 0 15
41813: PPUSH
41814: LD_VAR 0 8
41818: PPUSH
41819: LD_VAR 0 5
41823: PUSH
41824: LD_VAR 0 8
41828: ARRAY
41829: PPUSH
41830: CALL_OW 276
41834: GO 41806
41836: POP
41837: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
41838: LD_ADDR_VAR 0 18
41842: PUSH
41843: LD_VAR 0 15
41847: PPUSH
41848: LD_VAR 0 2
41852: PPUSH
41853: LD_INT 1
41855: PPUSH
41856: CALL 41099 0 3
41860: ST_TO_ADDR
// InitHc ;
41861: CALL_OW 19
// InitUc ;
41865: CALL_OW 18
// uc_side := side ;
41869: LD_ADDR_OWVAR 20
41873: PUSH
41874: LD_VAR 0 16
41878: ST_TO_ADDR
// uc_nation := nation ;
41879: LD_ADDR_OWVAR 21
41883: PUSH
41884: LD_VAR 0 17
41888: ST_TO_ADDR
// if buildings then
41889: LD_VAR 0 18
41893: IFFALSE 43215
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
41895: LD_ADDR_VAR 0 19
41899: PUSH
41900: LD_VAR 0 18
41904: PPUSH
41905: LD_INT 2
41907: PUSH
41908: LD_INT 30
41910: PUSH
41911: LD_INT 29
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: LD_INT 30
41920: PUSH
41921: LD_INT 30
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: PUSH
41928: EMPTY
41929: LIST
41930: LIST
41931: LIST
41932: PPUSH
41933: CALL_OW 72
41937: ST_TO_ADDR
// if tmp then
41938: LD_VAR 0 19
41942: IFFALSE 41990
// for i in tmp do
41944: LD_ADDR_VAR 0 8
41948: PUSH
41949: LD_VAR 0 19
41953: PUSH
41954: FOR_IN
41955: IFFALSE 41988
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
41957: LD_VAR 0 8
41961: PPUSH
41962: CALL_OW 250
41966: PPUSH
41967: LD_VAR 0 8
41971: PPUSH
41972: CALL_OW 251
41976: PPUSH
41977: LD_VAR 0 16
41981: PPUSH
41982: CALL_OW 441
41986: GO 41954
41988: POP
41989: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
41990: LD_VAR 0 18
41994: PPUSH
41995: LD_INT 2
41997: PUSH
41998: LD_INT 30
42000: PUSH
42001: LD_INT 32
42003: PUSH
42004: EMPTY
42005: LIST
42006: LIST
42007: PUSH
42008: LD_INT 30
42010: PUSH
42011: LD_INT 33
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: LIST
42022: PPUSH
42023: CALL_OW 72
42027: IFFALSE 42115
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
42029: LD_ADDR_VAR 0 8
42033: PUSH
42034: LD_VAR 0 18
42038: PPUSH
42039: LD_INT 2
42041: PUSH
42042: LD_INT 30
42044: PUSH
42045: LD_INT 32
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: PUSH
42052: LD_INT 30
42054: PUSH
42055: LD_INT 33
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: EMPTY
42063: LIST
42064: LIST
42065: LIST
42066: PPUSH
42067: CALL_OW 72
42071: PUSH
42072: FOR_IN
42073: IFFALSE 42113
// begin if not GetBWeapon ( i ) then
42075: LD_VAR 0 8
42079: PPUSH
42080: CALL_OW 269
42084: NOT
42085: IFFALSE 42111
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
42087: LD_VAR 0 8
42091: PPUSH
42092: LD_VAR 0 8
42096: PPUSH
42097: LD_VAR 0 2
42101: PPUSH
42102: CALL 43361 0 2
42106: PPUSH
42107: CALL_OW 431
// end ;
42111: GO 42072
42113: POP
42114: POP
// end ; for i = 1 to personel do
42115: LD_ADDR_VAR 0 8
42119: PUSH
42120: DOUBLE
42121: LD_INT 1
42123: DEC
42124: ST_TO_ADDR
42125: LD_VAR 0 6
42129: PUSH
42130: FOR_TO
42131: IFFALSE 43195
// begin if i > 4 then
42133: LD_VAR 0 8
42137: PUSH
42138: LD_INT 4
42140: GREATER
42141: IFFALSE 42145
// break ;
42143: GO 43195
// case i of 1 :
42145: LD_VAR 0 8
42149: PUSH
42150: LD_INT 1
42152: DOUBLE
42153: EQUAL
42154: IFTRUE 42158
42156: GO 42238
42158: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
42159: LD_ADDR_VAR 0 12
42163: PUSH
42164: LD_VAR 0 18
42168: PPUSH
42169: LD_INT 22
42171: PUSH
42172: LD_VAR 0 16
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: PUSH
42181: LD_INT 58
42183: PUSH
42184: EMPTY
42185: LIST
42186: PUSH
42187: LD_INT 2
42189: PUSH
42190: LD_INT 30
42192: PUSH
42193: LD_INT 32
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: PUSH
42200: LD_INT 30
42202: PUSH
42203: LD_INT 4
42205: PUSH
42206: EMPTY
42207: LIST
42208: LIST
42209: PUSH
42210: LD_INT 30
42212: PUSH
42213: LD_INT 5
42215: PUSH
42216: EMPTY
42217: LIST
42218: LIST
42219: PUSH
42220: EMPTY
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: PUSH
42226: EMPTY
42227: LIST
42228: LIST
42229: LIST
42230: PPUSH
42231: CALL_OW 72
42235: ST_TO_ADDR
42236: GO 42460
42238: LD_INT 2
42240: DOUBLE
42241: EQUAL
42242: IFTRUE 42246
42244: GO 42308
42246: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
42247: LD_ADDR_VAR 0 12
42251: PUSH
42252: LD_VAR 0 18
42256: PPUSH
42257: LD_INT 22
42259: PUSH
42260: LD_VAR 0 16
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: PUSH
42269: LD_INT 2
42271: PUSH
42272: LD_INT 30
42274: PUSH
42275: LD_INT 0
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: PUSH
42282: LD_INT 30
42284: PUSH
42285: LD_INT 1
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: LIST
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: PPUSH
42301: CALL_OW 72
42305: ST_TO_ADDR
42306: GO 42460
42308: LD_INT 3
42310: DOUBLE
42311: EQUAL
42312: IFTRUE 42316
42314: GO 42378
42316: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
42317: LD_ADDR_VAR 0 12
42321: PUSH
42322: LD_VAR 0 18
42326: PPUSH
42327: LD_INT 22
42329: PUSH
42330: LD_VAR 0 16
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: PUSH
42339: LD_INT 2
42341: PUSH
42342: LD_INT 30
42344: PUSH
42345: LD_INT 2
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: LD_INT 30
42354: PUSH
42355: LD_INT 3
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: LIST
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PPUSH
42371: CALL_OW 72
42375: ST_TO_ADDR
42376: GO 42460
42378: LD_INT 4
42380: DOUBLE
42381: EQUAL
42382: IFTRUE 42386
42384: GO 42459
42386: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
42387: LD_ADDR_VAR 0 12
42391: PUSH
42392: LD_VAR 0 18
42396: PPUSH
42397: LD_INT 22
42399: PUSH
42400: LD_VAR 0 16
42404: PUSH
42405: EMPTY
42406: LIST
42407: LIST
42408: PUSH
42409: LD_INT 2
42411: PUSH
42412: LD_INT 30
42414: PUSH
42415: LD_INT 6
42417: PUSH
42418: EMPTY
42419: LIST
42420: LIST
42421: PUSH
42422: LD_INT 30
42424: PUSH
42425: LD_INT 7
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: PUSH
42432: LD_INT 30
42434: PUSH
42435: LD_INT 8
42437: PUSH
42438: EMPTY
42439: LIST
42440: LIST
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: LIST
42446: LIST
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: PPUSH
42452: CALL_OW 72
42456: ST_TO_ADDR
42457: GO 42460
42459: POP
// if i = 1 then
42460: LD_VAR 0 8
42464: PUSH
42465: LD_INT 1
42467: EQUAL
42468: IFFALSE 42579
// begin tmp := [ ] ;
42470: LD_ADDR_VAR 0 19
42474: PUSH
42475: EMPTY
42476: ST_TO_ADDR
// for j in f do
42477: LD_ADDR_VAR 0 9
42481: PUSH
42482: LD_VAR 0 12
42486: PUSH
42487: FOR_IN
42488: IFFALSE 42561
// if GetBType ( j ) = b_bunker then
42490: LD_VAR 0 9
42494: PPUSH
42495: CALL_OW 266
42499: PUSH
42500: LD_INT 32
42502: EQUAL
42503: IFFALSE 42530
// tmp := Insert ( tmp , 1 , j ) else
42505: LD_ADDR_VAR 0 19
42509: PUSH
42510: LD_VAR 0 19
42514: PPUSH
42515: LD_INT 1
42517: PPUSH
42518: LD_VAR 0 9
42522: PPUSH
42523: CALL_OW 2
42527: ST_TO_ADDR
42528: GO 42559
// tmp := Insert ( tmp , tmp + 1 , j ) ;
42530: LD_ADDR_VAR 0 19
42534: PUSH
42535: LD_VAR 0 19
42539: PPUSH
42540: LD_VAR 0 19
42544: PUSH
42545: LD_INT 1
42547: PLUS
42548: PPUSH
42549: LD_VAR 0 9
42553: PPUSH
42554: CALL_OW 2
42558: ST_TO_ADDR
42559: GO 42487
42561: POP
42562: POP
// if tmp then
42563: LD_VAR 0 19
42567: IFFALSE 42579
// f := tmp ;
42569: LD_ADDR_VAR 0 12
42573: PUSH
42574: LD_VAR 0 19
42578: ST_TO_ADDR
// end ; x := personel [ i ] ;
42579: LD_ADDR_VAR 0 13
42583: PUSH
42584: LD_VAR 0 6
42588: PUSH
42589: LD_VAR 0 8
42593: ARRAY
42594: ST_TO_ADDR
// if x = - 1 then
42595: LD_VAR 0 13
42599: PUSH
42600: LD_INT 1
42602: NEG
42603: EQUAL
42604: IFFALSE 42813
// begin for j in f do
42606: LD_ADDR_VAR 0 9
42610: PUSH
42611: LD_VAR 0 12
42615: PUSH
42616: FOR_IN
42617: IFFALSE 42809
// repeat InitHc ;
42619: CALL_OW 19
// if GetBType ( j ) = b_barracks then
42623: LD_VAR 0 9
42627: PPUSH
42628: CALL_OW 266
42632: PUSH
42633: LD_INT 5
42635: EQUAL
42636: IFFALSE 42706
// begin if UnitsInside ( j ) < 3 then
42638: LD_VAR 0 9
42642: PPUSH
42643: CALL_OW 313
42647: PUSH
42648: LD_INT 3
42650: LESS
42651: IFFALSE 42687
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42653: LD_INT 0
42655: PPUSH
42656: LD_INT 5
42658: PUSH
42659: LD_INT 8
42661: PUSH
42662: LD_INT 9
42664: PUSH
42665: EMPTY
42666: LIST
42667: LIST
42668: LIST
42669: PUSH
42670: LD_VAR 0 17
42674: ARRAY
42675: PPUSH
42676: LD_VAR 0 4
42680: PPUSH
42681: CALL_OW 380
42685: GO 42704
// PrepareHuman ( false , i , skill ) ;
42687: LD_INT 0
42689: PPUSH
42690: LD_VAR 0 8
42694: PPUSH
42695: LD_VAR 0 4
42699: PPUSH
42700: CALL_OW 380
// end else
42704: GO 42723
// PrepareHuman ( false , i , skill ) ;
42706: LD_INT 0
42708: PPUSH
42709: LD_VAR 0 8
42713: PPUSH
42714: LD_VAR 0 4
42718: PPUSH
42719: CALL_OW 380
// un := CreateHuman ;
42723: LD_ADDR_VAR 0 14
42727: PUSH
42728: CALL_OW 44
42732: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42733: LD_ADDR_VAR 0 7
42737: PUSH
42738: LD_VAR 0 7
42742: PPUSH
42743: LD_INT 1
42745: PPUSH
42746: LD_VAR 0 14
42750: PPUSH
42751: CALL_OW 2
42755: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
42756: LD_VAR 0 14
42760: PPUSH
42761: LD_VAR 0 9
42765: PPUSH
42766: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
42770: LD_VAR 0 9
42774: PPUSH
42775: CALL_OW 313
42779: PUSH
42780: LD_INT 6
42782: EQUAL
42783: PUSH
42784: LD_VAR 0 9
42788: PPUSH
42789: CALL_OW 266
42793: PUSH
42794: LD_INT 32
42796: PUSH
42797: LD_INT 31
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: IN
42804: OR
42805: IFFALSE 42619
42807: GO 42616
42809: POP
42810: POP
// end else
42811: GO 43193
// for j = 1 to x do
42813: LD_ADDR_VAR 0 9
42817: PUSH
42818: DOUBLE
42819: LD_INT 1
42821: DEC
42822: ST_TO_ADDR
42823: LD_VAR 0 13
42827: PUSH
42828: FOR_TO
42829: IFFALSE 43191
// begin InitHc ;
42831: CALL_OW 19
// if not f then
42835: LD_VAR 0 12
42839: NOT
42840: IFFALSE 42929
// begin PrepareHuman ( false , i , skill ) ;
42842: LD_INT 0
42844: PPUSH
42845: LD_VAR 0 8
42849: PPUSH
42850: LD_VAR 0 4
42854: PPUSH
42855: CALL_OW 380
// un := CreateHuman ;
42859: LD_ADDR_VAR 0 14
42863: PUSH
42864: CALL_OW 44
42868: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42869: LD_ADDR_VAR 0 7
42873: PUSH
42874: LD_VAR 0 7
42878: PPUSH
42879: LD_INT 1
42881: PPUSH
42882: LD_VAR 0 14
42886: PPUSH
42887: CALL_OW 2
42891: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42892: LD_VAR 0 14
42896: PPUSH
42897: LD_VAR 0 1
42901: PPUSH
42902: CALL_OW 250
42906: PPUSH
42907: LD_VAR 0 1
42911: PPUSH
42912: CALL_OW 251
42916: PPUSH
42917: LD_INT 10
42919: PPUSH
42920: LD_INT 0
42922: PPUSH
42923: CALL_OW 50
// continue ;
42927: GO 42828
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
42929: LD_VAR 0 12
42933: PUSH
42934: LD_INT 1
42936: ARRAY
42937: PPUSH
42938: CALL_OW 313
42942: PUSH
42943: LD_VAR 0 12
42947: PUSH
42948: LD_INT 1
42950: ARRAY
42951: PPUSH
42952: CALL_OW 266
42956: PUSH
42957: LD_INT 32
42959: PUSH
42960: LD_INT 31
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: IN
42967: AND
42968: PUSH
42969: LD_VAR 0 12
42973: PUSH
42974: LD_INT 1
42976: ARRAY
42977: PPUSH
42978: CALL_OW 313
42982: PUSH
42983: LD_INT 6
42985: EQUAL
42986: OR
42987: IFFALSE 43007
// f := Delete ( f , 1 ) ;
42989: LD_ADDR_VAR 0 12
42993: PUSH
42994: LD_VAR 0 12
42998: PPUSH
42999: LD_INT 1
43001: PPUSH
43002: CALL_OW 3
43006: ST_TO_ADDR
// if not f then
43007: LD_VAR 0 12
43011: NOT
43012: IFFALSE 43030
// begin x := x + 2 ;
43014: LD_ADDR_VAR 0 13
43018: PUSH
43019: LD_VAR 0 13
43023: PUSH
43024: LD_INT 2
43026: PLUS
43027: ST_TO_ADDR
// continue ;
43028: GO 42828
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
43030: LD_VAR 0 12
43034: PUSH
43035: LD_INT 1
43037: ARRAY
43038: PPUSH
43039: CALL_OW 266
43043: PUSH
43044: LD_INT 5
43046: EQUAL
43047: IFFALSE 43121
// begin if UnitsInside ( f [ 1 ] ) < 3 then
43049: LD_VAR 0 12
43053: PUSH
43054: LD_INT 1
43056: ARRAY
43057: PPUSH
43058: CALL_OW 313
43062: PUSH
43063: LD_INT 3
43065: LESS
43066: IFFALSE 43102
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43068: LD_INT 0
43070: PPUSH
43071: LD_INT 5
43073: PUSH
43074: LD_INT 8
43076: PUSH
43077: LD_INT 9
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: LIST
43084: PUSH
43085: LD_VAR 0 17
43089: ARRAY
43090: PPUSH
43091: LD_VAR 0 4
43095: PPUSH
43096: CALL_OW 380
43100: GO 43119
// PrepareHuman ( false , i , skill ) ;
43102: LD_INT 0
43104: PPUSH
43105: LD_VAR 0 8
43109: PPUSH
43110: LD_VAR 0 4
43114: PPUSH
43115: CALL_OW 380
// end else
43119: GO 43138
// PrepareHuman ( false , i , skill ) ;
43121: LD_INT 0
43123: PPUSH
43124: LD_VAR 0 8
43128: PPUSH
43129: LD_VAR 0 4
43133: PPUSH
43134: CALL_OW 380
// un := CreateHuman ;
43138: LD_ADDR_VAR 0 14
43142: PUSH
43143: CALL_OW 44
43147: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43148: LD_ADDR_VAR 0 7
43152: PUSH
43153: LD_VAR 0 7
43157: PPUSH
43158: LD_INT 1
43160: PPUSH
43161: LD_VAR 0 14
43165: PPUSH
43166: CALL_OW 2
43170: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
43171: LD_VAR 0 14
43175: PPUSH
43176: LD_VAR 0 12
43180: PUSH
43181: LD_INT 1
43183: ARRAY
43184: PPUSH
43185: CALL_OW 52
// end ;
43189: GO 42828
43191: POP
43192: POP
// end ;
43193: GO 42130
43195: POP
43196: POP
// result := result ^ buildings ;
43197: LD_ADDR_VAR 0 7
43201: PUSH
43202: LD_VAR 0 7
43206: PUSH
43207: LD_VAR 0 18
43211: ADD
43212: ST_TO_ADDR
// end else
43213: GO 43356
// begin for i = 1 to personel do
43215: LD_ADDR_VAR 0 8
43219: PUSH
43220: DOUBLE
43221: LD_INT 1
43223: DEC
43224: ST_TO_ADDR
43225: LD_VAR 0 6
43229: PUSH
43230: FOR_TO
43231: IFFALSE 43354
// begin if i > 4 then
43233: LD_VAR 0 8
43237: PUSH
43238: LD_INT 4
43240: GREATER
43241: IFFALSE 43245
// break ;
43243: GO 43354
// x := personel [ i ] ;
43245: LD_ADDR_VAR 0 13
43249: PUSH
43250: LD_VAR 0 6
43254: PUSH
43255: LD_VAR 0 8
43259: ARRAY
43260: ST_TO_ADDR
// if x = - 1 then
43261: LD_VAR 0 13
43265: PUSH
43266: LD_INT 1
43268: NEG
43269: EQUAL
43270: IFFALSE 43274
// continue ;
43272: GO 43230
// PrepareHuman ( false , i , skill ) ;
43274: LD_INT 0
43276: PPUSH
43277: LD_VAR 0 8
43281: PPUSH
43282: LD_VAR 0 4
43286: PPUSH
43287: CALL_OW 380
// un := CreateHuman ;
43291: LD_ADDR_VAR 0 14
43295: PUSH
43296: CALL_OW 44
43300: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43301: LD_VAR 0 14
43305: PPUSH
43306: LD_VAR 0 1
43310: PPUSH
43311: CALL_OW 250
43315: PPUSH
43316: LD_VAR 0 1
43320: PPUSH
43321: CALL_OW 251
43325: PPUSH
43326: LD_INT 10
43328: PPUSH
43329: LD_INT 0
43331: PPUSH
43332: CALL_OW 50
// result := result ^ un ;
43336: LD_ADDR_VAR 0 7
43340: PUSH
43341: LD_VAR 0 7
43345: PUSH
43346: LD_VAR 0 14
43350: ADD
43351: ST_TO_ADDR
// end ;
43352: GO 43230
43354: POP
43355: POP
// end ; end ;
43356: LD_VAR 0 7
43360: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
43361: LD_INT 0
43363: PPUSH
43364: PPUSH
43365: PPUSH
43366: PPUSH
43367: PPUSH
43368: PPUSH
43369: PPUSH
43370: PPUSH
43371: PPUSH
43372: PPUSH
43373: PPUSH
43374: PPUSH
43375: PPUSH
43376: PPUSH
43377: PPUSH
43378: PPUSH
// result := false ;
43379: LD_ADDR_VAR 0 3
43383: PUSH
43384: LD_INT 0
43386: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
43387: LD_VAR 0 1
43391: NOT
43392: PUSH
43393: LD_VAR 0 1
43397: PPUSH
43398: CALL_OW 266
43402: PUSH
43403: LD_INT 32
43405: PUSH
43406: LD_INT 33
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: IN
43413: NOT
43414: OR
43415: IFFALSE 43419
// exit ;
43417: GO 44528
// nat := GetNation ( tower ) ;
43419: LD_ADDR_VAR 0 12
43423: PUSH
43424: LD_VAR 0 1
43428: PPUSH
43429: CALL_OW 248
43433: ST_TO_ADDR
// side := GetSide ( tower ) ;
43434: LD_ADDR_VAR 0 16
43438: PUSH
43439: LD_VAR 0 1
43443: PPUSH
43444: CALL_OW 255
43448: ST_TO_ADDR
// x := GetX ( tower ) ;
43449: LD_ADDR_VAR 0 10
43453: PUSH
43454: LD_VAR 0 1
43458: PPUSH
43459: CALL_OW 250
43463: ST_TO_ADDR
// y := GetY ( tower ) ;
43464: LD_ADDR_VAR 0 11
43468: PUSH
43469: LD_VAR 0 1
43473: PPUSH
43474: CALL_OW 251
43478: ST_TO_ADDR
// if not x or not y then
43479: LD_VAR 0 10
43483: NOT
43484: PUSH
43485: LD_VAR 0 11
43489: NOT
43490: OR
43491: IFFALSE 43495
// exit ;
43493: GO 44528
// weapon := 0 ;
43495: LD_ADDR_VAR 0 18
43499: PUSH
43500: LD_INT 0
43502: ST_TO_ADDR
// fac_list := [ ] ;
43503: LD_ADDR_VAR 0 17
43507: PUSH
43508: EMPTY
43509: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
43510: LD_ADDR_VAR 0 6
43514: PUSH
43515: LD_VAR 0 1
43519: PPUSH
43520: CALL_OW 274
43524: PPUSH
43525: LD_VAR 0 2
43529: PPUSH
43530: LD_INT 0
43532: PPUSH
43533: CALL 41099 0 3
43537: PPUSH
43538: LD_INT 30
43540: PUSH
43541: LD_INT 3
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PPUSH
43548: CALL_OW 72
43552: ST_TO_ADDR
// if not factories then
43553: LD_VAR 0 6
43557: NOT
43558: IFFALSE 43562
// exit ;
43560: GO 44528
// for i in factories do
43562: LD_ADDR_VAR 0 8
43566: PUSH
43567: LD_VAR 0 6
43571: PUSH
43572: FOR_IN
43573: IFFALSE 43598
// fac_list := fac_list union AvailableWeaponList ( i ) ;
43575: LD_ADDR_VAR 0 17
43579: PUSH
43580: LD_VAR 0 17
43584: PUSH
43585: LD_VAR 0 8
43589: PPUSH
43590: CALL_OW 478
43594: UNION
43595: ST_TO_ADDR
43596: GO 43572
43598: POP
43599: POP
// if not fac_list then
43600: LD_VAR 0 17
43604: NOT
43605: IFFALSE 43609
// exit ;
43607: GO 44528
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
43609: LD_ADDR_VAR 0 5
43613: PUSH
43614: LD_INT 4
43616: PUSH
43617: LD_INT 5
43619: PUSH
43620: LD_INT 9
43622: PUSH
43623: LD_INT 10
43625: PUSH
43626: LD_INT 6
43628: PUSH
43629: LD_INT 7
43631: PUSH
43632: LD_INT 11
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: LIST
43639: LIST
43640: LIST
43641: LIST
43642: LIST
43643: PUSH
43644: LD_INT 27
43646: PUSH
43647: LD_INT 28
43649: PUSH
43650: LD_INT 26
43652: PUSH
43653: LD_INT 30
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: LIST
43660: LIST
43661: PUSH
43662: LD_INT 43
43664: PUSH
43665: LD_INT 44
43667: PUSH
43668: LD_INT 46
43670: PUSH
43671: LD_INT 45
43673: PUSH
43674: LD_INT 47
43676: PUSH
43677: LD_INT 49
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: LIST
43684: LIST
43685: LIST
43686: LIST
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: LIST
43692: PUSH
43693: LD_VAR 0 12
43697: ARRAY
43698: ST_TO_ADDR
// list := list isect fac_list ;
43699: LD_ADDR_VAR 0 5
43703: PUSH
43704: LD_VAR 0 5
43708: PUSH
43709: LD_VAR 0 17
43713: ISECT
43714: ST_TO_ADDR
// if not list then
43715: LD_VAR 0 5
43719: NOT
43720: IFFALSE 43724
// exit ;
43722: GO 44528
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
43724: LD_VAR 0 12
43728: PUSH
43729: LD_INT 3
43731: EQUAL
43732: PUSH
43733: LD_INT 49
43735: PUSH
43736: LD_VAR 0 5
43740: IN
43741: AND
43742: PUSH
43743: LD_INT 31
43745: PPUSH
43746: LD_VAR 0 16
43750: PPUSH
43751: CALL_OW 321
43755: PUSH
43756: LD_INT 2
43758: EQUAL
43759: AND
43760: IFFALSE 43820
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
43762: LD_INT 22
43764: PUSH
43765: LD_VAR 0 16
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 35
43776: PUSH
43777: LD_INT 49
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PUSH
43784: LD_INT 91
43786: PUSH
43787: LD_VAR 0 1
43791: PUSH
43792: LD_INT 10
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: LIST
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: LIST
43804: PPUSH
43805: CALL_OW 69
43809: NOT
43810: IFFALSE 43820
// weapon := ru_time_lapser ;
43812: LD_ADDR_VAR 0 18
43816: PUSH
43817: LD_INT 49
43819: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
43820: LD_VAR 0 12
43824: PUSH
43825: LD_INT 1
43827: PUSH
43828: LD_INT 2
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: IN
43835: PUSH
43836: LD_INT 11
43838: PUSH
43839: LD_VAR 0 5
43843: IN
43844: PUSH
43845: LD_INT 30
43847: PUSH
43848: LD_VAR 0 5
43852: IN
43853: OR
43854: AND
43855: PUSH
43856: LD_INT 6
43858: PPUSH
43859: LD_VAR 0 16
43863: PPUSH
43864: CALL_OW 321
43868: PUSH
43869: LD_INT 2
43871: EQUAL
43872: AND
43873: IFFALSE 44038
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
43875: LD_INT 22
43877: PUSH
43878: LD_VAR 0 16
43882: PUSH
43883: EMPTY
43884: LIST
43885: LIST
43886: PUSH
43887: LD_INT 2
43889: PUSH
43890: LD_INT 35
43892: PUSH
43893: LD_INT 11
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: PUSH
43900: LD_INT 35
43902: PUSH
43903: LD_INT 30
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: LIST
43914: PUSH
43915: LD_INT 91
43917: PUSH
43918: LD_VAR 0 1
43922: PUSH
43923: LD_INT 18
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: LIST
43930: PUSH
43931: EMPTY
43932: LIST
43933: LIST
43934: LIST
43935: PPUSH
43936: CALL_OW 69
43940: NOT
43941: PUSH
43942: LD_INT 22
43944: PUSH
43945: LD_VAR 0 16
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PUSH
43954: LD_INT 2
43956: PUSH
43957: LD_INT 30
43959: PUSH
43960: LD_INT 32
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 30
43969: PUSH
43970: LD_INT 33
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: PUSH
43977: EMPTY
43978: LIST
43979: LIST
43980: LIST
43981: PUSH
43982: LD_INT 91
43984: PUSH
43985: LD_VAR 0 1
43989: PUSH
43990: LD_INT 12
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: LIST
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: LIST
44002: PUSH
44003: EMPTY
44004: LIST
44005: PPUSH
44006: CALL_OW 69
44010: PUSH
44011: LD_INT 2
44013: GREATER
44014: AND
44015: IFFALSE 44038
// weapon := [ us_radar , ar_radar ] [ nat ] ;
44017: LD_ADDR_VAR 0 18
44021: PUSH
44022: LD_INT 11
44024: PUSH
44025: LD_INT 30
44027: PUSH
44028: EMPTY
44029: LIST
44030: LIST
44031: PUSH
44032: LD_VAR 0 12
44036: ARRAY
44037: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
44038: LD_VAR 0 18
44042: NOT
44043: PUSH
44044: LD_INT 40
44046: PPUSH
44047: LD_VAR 0 16
44051: PPUSH
44052: CALL_OW 321
44056: PUSH
44057: LD_INT 2
44059: EQUAL
44060: AND
44061: PUSH
44062: LD_INT 7
44064: PUSH
44065: LD_VAR 0 5
44069: IN
44070: PUSH
44071: LD_INT 28
44073: PUSH
44074: LD_VAR 0 5
44078: IN
44079: OR
44080: PUSH
44081: LD_INT 45
44083: PUSH
44084: LD_VAR 0 5
44088: IN
44089: OR
44090: AND
44091: IFFALSE 44345
// begin hex := GetHexInfo ( x , y ) ;
44093: LD_ADDR_VAR 0 4
44097: PUSH
44098: LD_VAR 0 10
44102: PPUSH
44103: LD_VAR 0 11
44107: PPUSH
44108: CALL_OW 546
44112: ST_TO_ADDR
// if hex [ 1 ] then
44113: LD_VAR 0 4
44117: PUSH
44118: LD_INT 1
44120: ARRAY
44121: IFFALSE 44125
// exit ;
44123: GO 44528
// height := hex [ 2 ] ;
44125: LD_ADDR_VAR 0 15
44129: PUSH
44130: LD_VAR 0 4
44134: PUSH
44135: LD_INT 2
44137: ARRAY
44138: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
44139: LD_ADDR_VAR 0 14
44143: PUSH
44144: LD_INT 0
44146: PUSH
44147: LD_INT 2
44149: PUSH
44150: LD_INT 3
44152: PUSH
44153: LD_INT 5
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: ST_TO_ADDR
// for i in tmp do
44162: LD_ADDR_VAR 0 8
44166: PUSH
44167: LD_VAR 0 14
44171: PUSH
44172: FOR_IN
44173: IFFALSE 44343
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
44175: LD_ADDR_VAR 0 9
44179: PUSH
44180: LD_VAR 0 10
44184: PPUSH
44185: LD_VAR 0 8
44189: PPUSH
44190: LD_INT 5
44192: PPUSH
44193: CALL_OW 272
44197: PUSH
44198: LD_VAR 0 11
44202: PPUSH
44203: LD_VAR 0 8
44207: PPUSH
44208: LD_INT 5
44210: PPUSH
44211: CALL_OW 273
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
44220: LD_VAR 0 9
44224: PUSH
44225: LD_INT 1
44227: ARRAY
44228: PPUSH
44229: LD_VAR 0 9
44233: PUSH
44234: LD_INT 2
44236: ARRAY
44237: PPUSH
44238: CALL_OW 488
44242: IFFALSE 44341
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
44244: LD_ADDR_VAR 0 4
44248: PUSH
44249: LD_VAR 0 9
44253: PUSH
44254: LD_INT 1
44256: ARRAY
44257: PPUSH
44258: LD_VAR 0 9
44262: PUSH
44263: LD_INT 2
44265: ARRAY
44266: PPUSH
44267: CALL_OW 546
44271: ST_TO_ADDR
// if hex [ 1 ] then
44272: LD_VAR 0 4
44276: PUSH
44277: LD_INT 1
44279: ARRAY
44280: IFFALSE 44284
// continue ;
44282: GO 44172
// h := hex [ 2 ] ;
44284: LD_ADDR_VAR 0 13
44288: PUSH
44289: LD_VAR 0 4
44293: PUSH
44294: LD_INT 2
44296: ARRAY
44297: ST_TO_ADDR
// if h + 7 < height then
44298: LD_VAR 0 13
44302: PUSH
44303: LD_INT 7
44305: PLUS
44306: PUSH
44307: LD_VAR 0 15
44311: LESS
44312: IFFALSE 44341
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
44314: LD_ADDR_VAR 0 18
44318: PUSH
44319: LD_INT 7
44321: PUSH
44322: LD_INT 28
44324: PUSH
44325: LD_INT 45
44327: PUSH
44328: EMPTY
44329: LIST
44330: LIST
44331: LIST
44332: PUSH
44333: LD_VAR 0 12
44337: ARRAY
44338: ST_TO_ADDR
// break ;
44339: GO 44343
// end ; end ; end ;
44341: GO 44172
44343: POP
44344: POP
// end ; if not weapon then
44345: LD_VAR 0 18
44349: NOT
44350: IFFALSE 44410
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
44352: LD_ADDR_VAR 0 5
44356: PUSH
44357: LD_VAR 0 5
44361: PUSH
44362: LD_INT 11
44364: PUSH
44365: LD_INT 30
44367: PUSH
44368: LD_INT 49
44370: PUSH
44371: EMPTY
44372: LIST
44373: LIST
44374: LIST
44375: DIFF
44376: ST_TO_ADDR
// if not list then
44377: LD_VAR 0 5
44381: NOT
44382: IFFALSE 44386
// exit ;
44384: GO 44528
// weapon := list [ rand ( 1 , list ) ] ;
44386: LD_ADDR_VAR 0 18
44390: PUSH
44391: LD_VAR 0 5
44395: PUSH
44396: LD_INT 1
44398: PPUSH
44399: LD_VAR 0 5
44403: PPUSH
44404: CALL_OW 12
44408: ARRAY
44409: ST_TO_ADDR
// end ; if weapon then
44410: LD_VAR 0 18
44414: IFFALSE 44528
// begin tmp := CostOfWeapon ( weapon ) ;
44416: LD_ADDR_VAR 0 14
44420: PUSH
44421: LD_VAR 0 18
44425: PPUSH
44426: CALL_OW 451
44430: ST_TO_ADDR
// j := GetBase ( tower ) ;
44431: LD_ADDR_VAR 0 9
44435: PUSH
44436: LD_VAR 0 1
44440: PPUSH
44441: CALL_OW 274
44445: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
44446: LD_VAR 0 9
44450: PPUSH
44451: LD_INT 1
44453: PPUSH
44454: CALL_OW 275
44458: PUSH
44459: LD_VAR 0 14
44463: PUSH
44464: LD_INT 1
44466: ARRAY
44467: GREATEREQUAL
44468: PUSH
44469: LD_VAR 0 9
44473: PPUSH
44474: LD_INT 2
44476: PPUSH
44477: CALL_OW 275
44481: PUSH
44482: LD_VAR 0 14
44486: PUSH
44487: LD_INT 2
44489: ARRAY
44490: GREATEREQUAL
44491: AND
44492: PUSH
44493: LD_VAR 0 9
44497: PPUSH
44498: LD_INT 3
44500: PPUSH
44501: CALL_OW 275
44505: PUSH
44506: LD_VAR 0 14
44510: PUSH
44511: LD_INT 3
44513: ARRAY
44514: GREATEREQUAL
44515: AND
44516: IFFALSE 44528
// result := weapon ;
44518: LD_ADDR_VAR 0 3
44522: PUSH
44523: LD_VAR 0 18
44527: ST_TO_ADDR
// end ; end ;
44528: LD_VAR 0 3
44532: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
44533: LD_INT 0
44535: PPUSH
44536: PPUSH
// result := true ;
44537: LD_ADDR_VAR 0 3
44541: PUSH
44542: LD_INT 1
44544: ST_TO_ADDR
// if array1 = array2 then
44545: LD_VAR 0 1
44549: PUSH
44550: LD_VAR 0 2
44554: EQUAL
44555: IFFALSE 44615
// begin for i = 1 to array1 do
44557: LD_ADDR_VAR 0 4
44561: PUSH
44562: DOUBLE
44563: LD_INT 1
44565: DEC
44566: ST_TO_ADDR
44567: LD_VAR 0 1
44571: PUSH
44572: FOR_TO
44573: IFFALSE 44611
// if array1 [ i ] <> array2 [ i ] then
44575: LD_VAR 0 1
44579: PUSH
44580: LD_VAR 0 4
44584: ARRAY
44585: PUSH
44586: LD_VAR 0 2
44590: PUSH
44591: LD_VAR 0 4
44595: ARRAY
44596: NONEQUAL
44597: IFFALSE 44609
// begin result := false ;
44599: LD_ADDR_VAR 0 3
44603: PUSH
44604: LD_INT 0
44606: ST_TO_ADDR
// break ;
44607: GO 44611
// end ;
44609: GO 44572
44611: POP
44612: POP
// end else
44613: GO 44623
// result := false ;
44615: LD_ADDR_VAR 0 3
44619: PUSH
44620: LD_INT 0
44622: ST_TO_ADDR
// end ;
44623: LD_VAR 0 3
44627: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
44628: LD_INT 0
44630: PPUSH
44631: PPUSH
// if not array1 or not array2 then
44632: LD_VAR 0 1
44636: NOT
44637: PUSH
44638: LD_VAR 0 2
44642: NOT
44643: OR
44644: IFFALSE 44648
// exit ;
44646: GO 44712
// result := true ;
44648: LD_ADDR_VAR 0 3
44652: PUSH
44653: LD_INT 1
44655: ST_TO_ADDR
// for i = 1 to array1 do
44656: LD_ADDR_VAR 0 4
44660: PUSH
44661: DOUBLE
44662: LD_INT 1
44664: DEC
44665: ST_TO_ADDR
44666: LD_VAR 0 1
44670: PUSH
44671: FOR_TO
44672: IFFALSE 44710
// if array1 [ i ] <> array2 [ i ] then
44674: LD_VAR 0 1
44678: PUSH
44679: LD_VAR 0 4
44683: ARRAY
44684: PUSH
44685: LD_VAR 0 2
44689: PUSH
44690: LD_VAR 0 4
44694: ARRAY
44695: NONEQUAL
44696: IFFALSE 44708
// begin result := false ;
44698: LD_ADDR_VAR 0 3
44702: PUSH
44703: LD_INT 0
44705: ST_TO_ADDR
// break ;
44706: GO 44710
// end ;
44708: GO 44671
44710: POP
44711: POP
// end ;
44712: LD_VAR 0 3
44716: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
44717: LD_INT 0
44719: PPUSH
44720: PPUSH
44721: PPUSH
// pom := GetBase ( fac ) ;
44722: LD_ADDR_VAR 0 5
44726: PUSH
44727: LD_VAR 0 1
44731: PPUSH
44732: CALL_OW 274
44736: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
44737: LD_ADDR_VAR 0 4
44741: PUSH
44742: LD_VAR 0 2
44746: PUSH
44747: LD_INT 1
44749: ARRAY
44750: PPUSH
44751: LD_VAR 0 2
44755: PUSH
44756: LD_INT 2
44758: ARRAY
44759: PPUSH
44760: LD_VAR 0 2
44764: PUSH
44765: LD_INT 3
44767: ARRAY
44768: PPUSH
44769: LD_VAR 0 2
44773: PUSH
44774: LD_INT 4
44776: ARRAY
44777: PPUSH
44778: CALL_OW 449
44782: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44783: LD_ADDR_VAR 0 3
44787: PUSH
44788: LD_VAR 0 5
44792: PPUSH
44793: LD_INT 1
44795: PPUSH
44796: CALL_OW 275
44800: PUSH
44801: LD_VAR 0 4
44805: PUSH
44806: LD_INT 1
44808: ARRAY
44809: GREATEREQUAL
44810: PUSH
44811: LD_VAR 0 5
44815: PPUSH
44816: LD_INT 2
44818: PPUSH
44819: CALL_OW 275
44823: PUSH
44824: LD_VAR 0 4
44828: PUSH
44829: LD_INT 2
44831: ARRAY
44832: GREATEREQUAL
44833: AND
44834: PUSH
44835: LD_VAR 0 5
44839: PPUSH
44840: LD_INT 3
44842: PPUSH
44843: CALL_OW 275
44847: PUSH
44848: LD_VAR 0 4
44852: PUSH
44853: LD_INT 3
44855: ARRAY
44856: GREATEREQUAL
44857: AND
44858: ST_TO_ADDR
// end ;
44859: LD_VAR 0 3
44863: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
44864: LD_INT 0
44866: PPUSH
44867: PPUSH
44868: PPUSH
44869: PPUSH
// pom := GetBase ( building ) ;
44870: LD_ADDR_VAR 0 3
44874: PUSH
44875: LD_VAR 0 1
44879: PPUSH
44880: CALL_OW 274
44884: ST_TO_ADDR
// if not pom then
44885: LD_VAR 0 3
44889: NOT
44890: IFFALSE 44894
// exit ;
44892: GO 45064
// btype := GetBType ( building ) ;
44894: LD_ADDR_VAR 0 5
44898: PUSH
44899: LD_VAR 0 1
44903: PPUSH
44904: CALL_OW 266
44908: ST_TO_ADDR
// if btype = b_armoury then
44909: LD_VAR 0 5
44913: PUSH
44914: LD_INT 4
44916: EQUAL
44917: IFFALSE 44927
// btype := b_barracks ;
44919: LD_ADDR_VAR 0 5
44923: PUSH
44924: LD_INT 5
44926: ST_TO_ADDR
// if btype = b_depot then
44927: LD_VAR 0 5
44931: PUSH
44932: LD_INT 0
44934: EQUAL
44935: IFFALSE 44945
// btype := b_warehouse ;
44937: LD_ADDR_VAR 0 5
44941: PUSH
44942: LD_INT 1
44944: ST_TO_ADDR
// if btype = b_workshop then
44945: LD_VAR 0 5
44949: PUSH
44950: LD_INT 2
44952: EQUAL
44953: IFFALSE 44963
// btype := b_factory ;
44955: LD_ADDR_VAR 0 5
44959: PUSH
44960: LD_INT 3
44962: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44963: LD_ADDR_VAR 0 4
44967: PUSH
44968: LD_VAR 0 5
44972: PPUSH
44973: LD_VAR 0 1
44977: PPUSH
44978: CALL_OW 248
44982: PPUSH
44983: CALL_OW 450
44987: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44988: LD_ADDR_VAR 0 2
44992: PUSH
44993: LD_VAR 0 3
44997: PPUSH
44998: LD_INT 1
45000: PPUSH
45001: CALL_OW 275
45005: PUSH
45006: LD_VAR 0 4
45010: PUSH
45011: LD_INT 1
45013: ARRAY
45014: GREATEREQUAL
45015: PUSH
45016: LD_VAR 0 3
45020: PPUSH
45021: LD_INT 2
45023: PPUSH
45024: CALL_OW 275
45028: PUSH
45029: LD_VAR 0 4
45033: PUSH
45034: LD_INT 2
45036: ARRAY
45037: GREATEREQUAL
45038: AND
45039: PUSH
45040: LD_VAR 0 3
45044: PPUSH
45045: LD_INT 3
45047: PPUSH
45048: CALL_OW 275
45052: PUSH
45053: LD_VAR 0 4
45057: PUSH
45058: LD_INT 3
45060: ARRAY
45061: GREATEREQUAL
45062: AND
45063: ST_TO_ADDR
// end ;
45064: LD_VAR 0 2
45068: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
45069: LD_INT 0
45071: PPUSH
45072: PPUSH
45073: PPUSH
// pom := GetBase ( building ) ;
45074: LD_ADDR_VAR 0 4
45078: PUSH
45079: LD_VAR 0 1
45083: PPUSH
45084: CALL_OW 274
45088: ST_TO_ADDR
// if not pom then
45089: LD_VAR 0 4
45093: NOT
45094: IFFALSE 45098
// exit ;
45096: GO 45199
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45098: LD_ADDR_VAR 0 5
45102: PUSH
45103: LD_VAR 0 2
45107: PPUSH
45108: LD_VAR 0 1
45112: PPUSH
45113: CALL_OW 248
45117: PPUSH
45118: CALL_OW 450
45122: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45123: LD_ADDR_VAR 0 3
45127: PUSH
45128: LD_VAR 0 4
45132: PPUSH
45133: LD_INT 1
45135: PPUSH
45136: CALL_OW 275
45140: PUSH
45141: LD_VAR 0 5
45145: PUSH
45146: LD_INT 1
45148: ARRAY
45149: GREATEREQUAL
45150: PUSH
45151: LD_VAR 0 4
45155: PPUSH
45156: LD_INT 2
45158: PPUSH
45159: CALL_OW 275
45163: PUSH
45164: LD_VAR 0 5
45168: PUSH
45169: LD_INT 2
45171: ARRAY
45172: GREATEREQUAL
45173: AND
45174: PUSH
45175: LD_VAR 0 4
45179: PPUSH
45180: LD_INT 3
45182: PPUSH
45183: CALL_OW 275
45187: PUSH
45188: LD_VAR 0 5
45192: PUSH
45193: LD_INT 3
45195: ARRAY
45196: GREATEREQUAL
45197: AND
45198: ST_TO_ADDR
// end ;
45199: LD_VAR 0 3
45203: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
45204: LD_INT 0
45206: PPUSH
45207: PPUSH
45208: PPUSH
45209: PPUSH
45210: PPUSH
45211: PPUSH
45212: PPUSH
45213: PPUSH
45214: PPUSH
45215: PPUSH
45216: PPUSH
// result := false ;
45217: LD_ADDR_VAR 0 8
45221: PUSH
45222: LD_INT 0
45224: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
45225: LD_VAR 0 5
45229: NOT
45230: PUSH
45231: LD_VAR 0 1
45235: NOT
45236: OR
45237: PUSH
45238: LD_VAR 0 2
45242: NOT
45243: OR
45244: PUSH
45245: LD_VAR 0 3
45249: NOT
45250: OR
45251: IFFALSE 45255
// exit ;
45253: GO 46069
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
45255: LD_ADDR_VAR 0 14
45259: PUSH
45260: LD_VAR 0 1
45264: PPUSH
45265: LD_VAR 0 2
45269: PPUSH
45270: LD_VAR 0 3
45274: PPUSH
45275: LD_VAR 0 4
45279: PPUSH
45280: LD_VAR 0 5
45284: PUSH
45285: LD_INT 1
45287: ARRAY
45288: PPUSH
45289: CALL_OW 248
45293: PPUSH
45294: LD_INT 0
45296: PPUSH
45297: CALL 47322 0 6
45301: ST_TO_ADDR
// if not hexes then
45302: LD_VAR 0 14
45306: NOT
45307: IFFALSE 45311
// exit ;
45309: GO 46069
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
45311: LD_ADDR_VAR 0 17
45315: PUSH
45316: LD_VAR 0 5
45320: PPUSH
45321: LD_INT 22
45323: PUSH
45324: LD_VAR 0 13
45328: PPUSH
45329: CALL_OW 255
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: PUSH
45338: LD_INT 2
45340: PUSH
45341: LD_INT 30
45343: PUSH
45344: LD_INT 0
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: LD_INT 30
45353: PUSH
45354: LD_INT 1
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: LIST
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PPUSH
45370: CALL_OW 72
45374: ST_TO_ADDR
// for i = 1 to hexes do
45375: LD_ADDR_VAR 0 9
45379: PUSH
45380: DOUBLE
45381: LD_INT 1
45383: DEC
45384: ST_TO_ADDR
45385: LD_VAR 0 14
45389: PUSH
45390: FOR_TO
45391: IFFALSE 46067
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45393: LD_ADDR_VAR 0 13
45397: PUSH
45398: LD_VAR 0 14
45402: PUSH
45403: LD_VAR 0 9
45407: ARRAY
45408: PUSH
45409: LD_INT 1
45411: ARRAY
45412: PPUSH
45413: LD_VAR 0 14
45417: PUSH
45418: LD_VAR 0 9
45422: ARRAY
45423: PUSH
45424: LD_INT 2
45426: ARRAY
45427: PPUSH
45428: CALL_OW 428
45432: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
45433: LD_VAR 0 14
45437: PUSH
45438: LD_VAR 0 9
45442: ARRAY
45443: PUSH
45444: LD_INT 1
45446: ARRAY
45447: PPUSH
45448: LD_VAR 0 14
45452: PUSH
45453: LD_VAR 0 9
45457: ARRAY
45458: PUSH
45459: LD_INT 2
45461: ARRAY
45462: PPUSH
45463: CALL_OW 351
45467: PUSH
45468: LD_VAR 0 14
45472: PUSH
45473: LD_VAR 0 9
45477: ARRAY
45478: PUSH
45479: LD_INT 1
45481: ARRAY
45482: PPUSH
45483: LD_VAR 0 14
45487: PUSH
45488: LD_VAR 0 9
45492: ARRAY
45493: PUSH
45494: LD_INT 2
45496: ARRAY
45497: PPUSH
45498: CALL_OW 488
45502: NOT
45503: OR
45504: PUSH
45505: LD_VAR 0 13
45509: PPUSH
45510: CALL_OW 247
45514: PUSH
45515: LD_INT 3
45517: EQUAL
45518: OR
45519: IFFALSE 45525
// exit ;
45521: POP
45522: POP
45523: GO 46069
// if not tmp then
45525: LD_VAR 0 13
45529: NOT
45530: IFFALSE 45534
// continue ;
45532: GO 45390
// result := true ;
45534: LD_ADDR_VAR 0 8
45538: PUSH
45539: LD_INT 1
45541: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
45542: LD_VAR 0 6
45546: PUSH
45547: LD_VAR 0 13
45551: PPUSH
45552: CALL_OW 247
45556: PUSH
45557: LD_INT 2
45559: EQUAL
45560: AND
45561: PUSH
45562: LD_VAR 0 13
45566: PPUSH
45567: CALL_OW 263
45571: PUSH
45572: LD_INT 1
45574: EQUAL
45575: AND
45576: IFFALSE 45740
// begin if IsDrivenBy ( tmp ) then
45578: LD_VAR 0 13
45582: PPUSH
45583: CALL_OW 311
45587: IFFALSE 45591
// continue ;
45589: GO 45390
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
45591: LD_VAR 0 6
45595: PPUSH
45596: LD_INT 3
45598: PUSH
45599: LD_INT 60
45601: PUSH
45602: EMPTY
45603: LIST
45604: PUSH
45605: EMPTY
45606: LIST
45607: LIST
45608: PUSH
45609: LD_INT 3
45611: PUSH
45612: LD_INT 55
45614: PUSH
45615: EMPTY
45616: LIST
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PPUSH
45626: CALL_OW 72
45630: IFFALSE 45738
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
45632: LD_ADDR_VAR 0 18
45636: PUSH
45637: LD_VAR 0 6
45641: PPUSH
45642: LD_INT 3
45644: PUSH
45645: LD_INT 60
45647: PUSH
45648: EMPTY
45649: LIST
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: PUSH
45655: LD_INT 3
45657: PUSH
45658: LD_INT 55
45660: PUSH
45661: EMPTY
45662: LIST
45663: PUSH
45664: EMPTY
45665: LIST
45666: LIST
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PPUSH
45672: CALL_OW 72
45676: PUSH
45677: LD_INT 1
45679: ARRAY
45680: ST_TO_ADDR
// if IsInUnit ( driver ) then
45681: LD_VAR 0 18
45685: PPUSH
45686: CALL_OW 310
45690: IFFALSE 45701
// ComExit ( driver ) ;
45692: LD_VAR 0 18
45696: PPUSH
45697: CALL 71103 0 1
// AddComEnterUnit ( driver , tmp ) ;
45701: LD_VAR 0 18
45705: PPUSH
45706: LD_VAR 0 13
45710: PPUSH
45711: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
45715: LD_VAR 0 18
45719: PPUSH
45720: LD_VAR 0 7
45724: PPUSH
45725: CALL_OW 173
// AddComExitVehicle ( driver ) ;
45729: LD_VAR 0 18
45733: PPUSH
45734: CALL_OW 181
// end ; continue ;
45738: GO 45390
// end ; if not cleaners or not tmp in cleaners then
45740: LD_VAR 0 6
45744: NOT
45745: PUSH
45746: LD_VAR 0 13
45750: PUSH
45751: LD_VAR 0 6
45755: IN
45756: NOT
45757: OR
45758: IFFALSE 46065
// begin if dep then
45760: LD_VAR 0 17
45764: IFFALSE 45900
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
45766: LD_ADDR_VAR 0 16
45770: PUSH
45771: LD_VAR 0 17
45775: PUSH
45776: LD_INT 1
45778: ARRAY
45779: PPUSH
45780: CALL_OW 250
45784: PPUSH
45785: LD_VAR 0 17
45789: PUSH
45790: LD_INT 1
45792: ARRAY
45793: PPUSH
45794: CALL_OW 254
45798: PPUSH
45799: LD_INT 5
45801: PPUSH
45802: CALL_OW 272
45806: PUSH
45807: LD_VAR 0 17
45811: PUSH
45812: LD_INT 1
45814: ARRAY
45815: PPUSH
45816: CALL_OW 251
45820: PPUSH
45821: LD_VAR 0 17
45825: PUSH
45826: LD_INT 1
45828: ARRAY
45829: PPUSH
45830: CALL_OW 254
45834: PPUSH
45835: LD_INT 5
45837: PPUSH
45838: CALL_OW 273
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
45847: LD_VAR 0 16
45851: PUSH
45852: LD_INT 1
45854: ARRAY
45855: PPUSH
45856: LD_VAR 0 16
45860: PUSH
45861: LD_INT 2
45863: ARRAY
45864: PPUSH
45865: CALL_OW 488
45869: IFFALSE 45900
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
45871: LD_VAR 0 13
45875: PPUSH
45876: LD_VAR 0 16
45880: PUSH
45881: LD_INT 1
45883: ARRAY
45884: PPUSH
45885: LD_VAR 0 16
45889: PUSH
45890: LD_INT 2
45892: ARRAY
45893: PPUSH
45894: CALL_OW 111
// continue ;
45898: GO 45390
// end ; end ; r := GetDir ( tmp ) ;
45900: LD_ADDR_VAR 0 15
45904: PUSH
45905: LD_VAR 0 13
45909: PPUSH
45910: CALL_OW 254
45914: ST_TO_ADDR
// if r = 5 then
45915: LD_VAR 0 15
45919: PUSH
45920: LD_INT 5
45922: EQUAL
45923: IFFALSE 45933
// r := 0 ;
45925: LD_ADDR_VAR 0 15
45929: PUSH
45930: LD_INT 0
45932: ST_TO_ADDR
// for j = r to 5 do
45933: LD_ADDR_VAR 0 10
45937: PUSH
45938: DOUBLE
45939: LD_VAR 0 15
45943: DEC
45944: ST_TO_ADDR
45945: LD_INT 5
45947: PUSH
45948: FOR_TO
45949: IFFALSE 46063
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
45951: LD_ADDR_VAR 0 11
45955: PUSH
45956: LD_VAR 0 13
45960: PPUSH
45961: CALL_OW 250
45965: PPUSH
45966: LD_VAR 0 10
45970: PPUSH
45971: LD_INT 2
45973: PPUSH
45974: CALL_OW 272
45978: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
45979: LD_ADDR_VAR 0 12
45983: PUSH
45984: LD_VAR 0 13
45988: PPUSH
45989: CALL_OW 251
45993: PPUSH
45994: LD_VAR 0 10
45998: PPUSH
45999: LD_INT 2
46001: PPUSH
46002: CALL_OW 273
46006: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
46007: LD_VAR 0 11
46011: PPUSH
46012: LD_VAR 0 12
46016: PPUSH
46017: CALL_OW 488
46021: PUSH
46022: LD_VAR 0 11
46026: PPUSH
46027: LD_VAR 0 12
46031: PPUSH
46032: CALL_OW 428
46036: NOT
46037: AND
46038: IFFALSE 46061
// begin ComMoveXY ( tmp , _x , _y ) ;
46040: LD_VAR 0 13
46044: PPUSH
46045: LD_VAR 0 11
46049: PPUSH
46050: LD_VAR 0 12
46054: PPUSH
46055: CALL_OW 111
// break ;
46059: GO 46063
// end ; end ;
46061: GO 45948
46063: POP
46064: POP
// end ; end ;
46065: GO 45390
46067: POP
46068: POP
// end ;
46069: LD_VAR 0 8
46073: RET
// export function BuildingTechInvented ( side , btype ) ; begin
46074: LD_INT 0
46076: PPUSH
// result := true ;
46077: LD_ADDR_VAR 0 3
46081: PUSH
46082: LD_INT 1
46084: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
46085: LD_VAR 0 2
46089: PUSH
46090: LD_INT 24
46092: DOUBLE
46093: EQUAL
46094: IFTRUE 46104
46096: LD_INT 33
46098: DOUBLE
46099: EQUAL
46100: IFTRUE 46104
46102: GO 46129
46104: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
46105: LD_ADDR_VAR 0 3
46109: PUSH
46110: LD_INT 32
46112: PPUSH
46113: LD_VAR 0 1
46117: PPUSH
46118: CALL_OW 321
46122: PUSH
46123: LD_INT 2
46125: EQUAL
46126: ST_TO_ADDR
46127: GO 46445
46129: LD_INT 20
46131: DOUBLE
46132: EQUAL
46133: IFTRUE 46137
46135: GO 46162
46137: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
46138: LD_ADDR_VAR 0 3
46142: PUSH
46143: LD_INT 6
46145: PPUSH
46146: LD_VAR 0 1
46150: PPUSH
46151: CALL_OW 321
46155: PUSH
46156: LD_INT 2
46158: EQUAL
46159: ST_TO_ADDR
46160: GO 46445
46162: LD_INT 22
46164: DOUBLE
46165: EQUAL
46166: IFTRUE 46176
46168: LD_INT 36
46170: DOUBLE
46171: EQUAL
46172: IFTRUE 46176
46174: GO 46201
46176: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
46177: LD_ADDR_VAR 0 3
46181: PUSH
46182: LD_INT 15
46184: PPUSH
46185: LD_VAR 0 1
46189: PPUSH
46190: CALL_OW 321
46194: PUSH
46195: LD_INT 2
46197: EQUAL
46198: ST_TO_ADDR
46199: GO 46445
46201: LD_INT 30
46203: DOUBLE
46204: EQUAL
46205: IFTRUE 46209
46207: GO 46234
46209: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
46210: LD_ADDR_VAR 0 3
46214: PUSH
46215: LD_INT 20
46217: PPUSH
46218: LD_VAR 0 1
46222: PPUSH
46223: CALL_OW 321
46227: PUSH
46228: LD_INT 2
46230: EQUAL
46231: ST_TO_ADDR
46232: GO 46445
46234: LD_INT 28
46236: DOUBLE
46237: EQUAL
46238: IFTRUE 46248
46240: LD_INT 21
46242: DOUBLE
46243: EQUAL
46244: IFTRUE 46248
46246: GO 46273
46248: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
46249: LD_ADDR_VAR 0 3
46253: PUSH
46254: LD_INT 21
46256: PPUSH
46257: LD_VAR 0 1
46261: PPUSH
46262: CALL_OW 321
46266: PUSH
46267: LD_INT 2
46269: EQUAL
46270: ST_TO_ADDR
46271: GO 46445
46273: LD_INT 16
46275: DOUBLE
46276: EQUAL
46277: IFTRUE 46281
46279: GO 46306
46281: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
46282: LD_ADDR_VAR 0 3
46286: PUSH
46287: LD_INT 84
46289: PPUSH
46290: LD_VAR 0 1
46294: PPUSH
46295: CALL_OW 321
46299: PUSH
46300: LD_INT 2
46302: EQUAL
46303: ST_TO_ADDR
46304: GO 46445
46306: LD_INT 19
46308: DOUBLE
46309: EQUAL
46310: IFTRUE 46320
46312: LD_INT 23
46314: DOUBLE
46315: EQUAL
46316: IFTRUE 46320
46318: GO 46345
46320: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
46321: LD_ADDR_VAR 0 3
46325: PUSH
46326: LD_INT 83
46328: PPUSH
46329: LD_VAR 0 1
46333: PPUSH
46334: CALL_OW 321
46338: PUSH
46339: LD_INT 2
46341: EQUAL
46342: ST_TO_ADDR
46343: GO 46445
46345: LD_INT 17
46347: DOUBLE
46348: EQUAL
46349: IFTRUE 46353
46351: GO 46378
46353: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
46354: LD_ADDR_VAR 0 3
46358: PUSH
46359: LD_INT 39
46361: PPUSH
46362: LD_VAR 0 1
46366: PPUSH
46367: CALL_OW 321
46371: PUSH
46372: LD_INT 2
46374: EQUAL
46375: ST_TO_ADDR
46376: GO 46445
46378: LD_INT 18
46380: DOUBLE
46381: EQUAL
46382: IFTRUE 46386
46384: GO 46411
46386: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
46387: LD_ADDR_VAR 0 3
46391: PUSH
46392: LD_INT 40
46394: PPUSH
46395: LD_VAR 0 1
46399: PPUSH
46400: CALL_OW 321
46404: PUSH
46405: LD_INT 2
46407: EQUAL
46408: ST_TO_ADDR
46409: GO 46445
46411: LD_INT 27
46413: DOUBLE
46414: EQUAL
46415: IFTRUE 46419
46417: GO 46444
46419: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
46420: LD_ADDR_VAR 0 3
46424: PUSH
46425: LD_INT 35
46427: PPUSH
46428: LD_VAR 0 1
46432: PPUSH
46433: CALL_OW 321
46437: PUSH
46438: LD_INT 2
46440: EQUAL
46441: ST_TO_ADDR
46442: GO 46445
46444: POP
// end ;
46445: LD_VAR 0 3
46449: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
46450: LD_INT 0
46452: PPUSH
46453: PPUSH
46454: PPUSH
46455: PPUSH
46456: PPUSH
46457: PPUSH
46458: PPUSH
46459: PPUSH
46460: PPUSH
46461: PPUSH
46462: PPUSH
// result := false ;
46463: LD_ADDR_VAR 0 6
46467: PUSH
46468: LD_INT 0
46470: ST_TO_ADDR
// if btype = b_depot then
46471: LD_VAR 0 2
46475: PUSH
46476: LD_INT 0
46478: EQUAL
46479: IFFALSE 46491
// begin result := true ;
46481: LD_ADDR_VAR 0 6
46485: PUSH
46486: LD_INT 1
46488: ST_TO_ADDR
// exit ;
46489: GO 47317
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
46491: LD_VAR 0 1
46495: NOT
46496: PUSH
46497: LD_VAR 0 1
46501: PPUSH
46502: CALL_OW 266
46506: PUSH
46507: LD_INT 0
46509: PUSH
46510: LD_INT 1
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: IN
46517: NOT
46518: OR
46519: PUSH
46520: LD_VAR 0 2
46524: NOT
46525: OR
46526: PUSH
46527: LD_VAR 0 5
46531: PUSH
46532: LD_INT 0
46534: PUSH
46535: LD_INT 1
46537: PUSH
46538: LD_INT 2
46540: PUSH
46541: LD_INT 3
46543: PUSH
46544: LD_INT 4
46546: PUSH
46547: LD_INT 5
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: IN
46558: NOT
46559: OR
46560: PUSH
46561: LD_VAR 0 3
46565: PPUSH
46566: LD_VAR 0 4
46570: PPUSH
46571: CALL_OW 488
46575: NOT
46576: OR
46577: IFFALSE 46581
// exit ;
46579: GO 47317
// side := GetSide ( depot ) ;
46581: LD_ADDR_VAR 0 9
46585: PUSH
46586: LD_VAR 0 1
46590: PPUSH
46591: CALL_OW 255
46595: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
46596: LD_VAR 0 9
46600: PPUSH
46601: LD_VAR 0 2
46605: PPUSH
46606: CALL 46074 0 2
46610: NOT
46611: IFFALSE 46615
// exit ;
46613: GO 47317
// pom := GetBase ( depot ) ;
46615: LD_ADDR_VAR 0 10
46619: PUSH
46620: LD_VAR 0 1
46624: PPUSH
46625: CALL_OW 274
46629: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
46630: LD_ADDR_VAR 0 11
46634: PUSH
46635: LD_VAR 0 2
46639: PPUSH
46640: LD_VAR 0 1
46644: PPUSH
46645: CALL_OW 248
46649: PPUSH
46650: CALL_OW 450
46654: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
46655: LD_VAR 0 10
46659: PPUSH
46660: LD_INT 1
46662: PPUSH
46663: CALL_OW 275
46667: PUSH
46668: LD_VAR 0 11
46672: PUSH
46673: LD_INT 1
46675: ARRAY
46676: GREATEREQUAL
46677: PUSH
46678: LD_VAR 0 10
46682: PPUSH
46683: LD_INT 2
46685: PPUSH
46686: CALL_OW 275
46690: PUSH
46691: LD_VAR 0 11
46695: PUSH
46696: LD_INT 2
46698: ARRAY
46699: GREATEREQUAL
46700: AND
46701: PUSH
46702: LD_VAR 0 10
46706: PPUSH
46707: LD_INT 3
46709: PPUSH
46710: CALL_OW 275
46714: PUSH
46715: LD_VAR 0 11
46719: PUSH
46720: LD_INT 3
46722: ARRAY
46723: GREATEREQUAL
46724: AND
46725: NOT
46726: IFFALSE 46730
// exit ;
46728: GO 47317
// if GetBType ( depot ) = b_depot then
46730: LD_VAR 0 1
46734: PPUSH
46735: CALL_OW 266
46739: PUSH
46740: LD_INT 0
46742: EQUAL
46743: IFFALSE 46755
// dist := 28 else
46745: LD_ADDR_VAR 0 14
46749: PUSH
46750: LD_INT 28
46752: ST_TO_ADDR
46753: GO 46763
// dist := 36 ;
46755: LD_ADDR_VAR 0 14
46759: PUSH
46760: LD_INT 36
46762: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
46763: LD_VAR 0 1
46767: PPUSH
46768: LD_VAR 0 3
46772: PPUSH
46773: LD_VAR 0 4
46777: PPUSH
46778: CALL_OW 297
46782: PUSH
46783: LD_VAR 0 14
46787: GREATER
46788: IFFALSE 46792
// exit ;
46790: GO 47317
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
46792: LD_ADDR_VAR 0 12
46796: PUSH
46797: LD_VAR 0 2
46801: PPUSH
46802: LD_VAR 0 3
46806: PPUSH
46807: LD_VAR 0 4
46811: PPUSH
46812: LD_VAR 0 5
46816: PPUSH
46817: LD_VAR 0 1
46821: PPUSH
46822: CALL_OW 248
46826: PPUSH
46827: LD_INT 0
46829: PPUSH
46830: CALL 47322 0 6
46834: ST_TO_ADDR
// if not hexes then
46835: LD_VAR 0 12
46839: NOT
46840: IFFALSE 46844
// exit ;
46842: GO 47317
// hex := GetHexInfo ( x , y ) ;
46844: LD_ADDR_VAR 0 15
46848: PUSH
46849: LD_VAR 0 3
46853: PPUSH
46854: LD_VAR 0 4
46858: PPUSH
46859: CALL_OW 546
46863: ST_TO_ADDR
// if hex [ 1 ] then
46864: LD_VAR 0 15
46868: PUSH
46869: LD_INT 1
46871: ARRAY
46872: IFFALSE 46876
// exit ;
46874: GO 47317
// height := hex [ 2 ] ;
46876: LD_ADDR_VAR 0 13
46880: PUSH
46881: LD_VAR 0 15
46885: PUSH
46886: LD_INT 2
46888: ARRAY
46889: ST_TO_ADDR
// for i = 1 to hexes do
46890: LD_ADDR_VAR 0 7
46894: PUSH
46895: DOUBLE
46896: LD_INT 1
46898: DEC
46899: ST_TO_ADDR
46900: LD_VAR 0 12
46904: PUSH
46905: FOR_TO
46906: IFFALSE 47236
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
46908: LD_VAR 0 12
46912: PUSH
46913: LD_VAR 0 7
46917: ARRAY
46918: PUSH
46919: LD_INT 1
46921: ARRAY
46922: PPUSH
46923: LD_VAR 0 12
46927: PUSH
46928: LD_VAR 0 7
46932: ARRAY
46933: PUSH
46934: LD_INT 2
46936: ARRAY
46937: PPUSH
46938: CALL_OW 488
46942: NOT
46943: PUSH
46944: LD_VAR 0 12
46948: PUSH
46949: LD_VAR 0 7
46953: ARRAY
46954: PUSH
46955: LD_INT 1
46957: ARRAY
46958: PPUSH
46959: LD_VAR 0 12
46963: PUSH
46964: LD_VAR 0 7
46968: ARRAY
46969: PUSH
46970: LD_INT 2
46972: ARRAY
46973: PPUSH
46974: CALL_OW 428
46978: PUSH
46979: LD_INT 0
46981: GREATER
46982: OR
46983: PUSH
46984: LD_VAR 0 12
46988: PUSH
46989: LD_VAR 0 7
46993: ARRAY
46994: PUSH
46995: LD_INT 1
46997: ARRAY
46998: PPUSH
46999: LD_VAR 0 12
47003: PUSH
47004: LD_VAR 0 7
47008: ARRAY
47009: PUSH
47010: LD_INT 2
47012: ARRAY
47013: PPUSH
47014: CALL_OW 351
47018: OR
47019: IFFALSE 47025
// exit ;
47021: POP
47022: POP
47023: GO 47317
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47025: LD_ADDR_VAR 0 8
47029: PUSH
47030: LD_VAR 0 12
47034: PUSH
47035: LD_VAR 0 7
47039: ARRAY
47040: PUSH
47041: LD_INT 1
47043: ARRAY
47044: PPUSH
47045: LD_VAR 0 12
47049: PUSH
47050: LD_VAR 0 7
47054: ARRAY
47055: PUSH
47056: LD_INT 2
47058: ARRAY
47059: PPUSH
47060: CALL_OW 546
47064: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
47065: LD_VAR 0 8
47069: PUSH
47070: LD_INT 1
47072: ARRAY
47073: PUSH
47074: LD_VAR 0 8
47078: PUSH
47079: LD_INT 2
47081: ARRAY
47082: PUSH
47083: LD_VAR 0 13
47087: PUSH
47088: LD_INT 2
47090: PLUS
47091: GREATER
47092: OR
47093: PUSH
47094: LD_VAR 0 8
47098: PUSH
47099: LD_INT 2
47101: ARRAY
47102: PUSH
47103: LD_VAR 0 13
47107: PUSH
47108: LD_INT 2
47110: MINUS
47111: LESS
47112: OR
47113: PUSH
47114: LD_VAR 0 8
47118: PUSH
47119: LD_INT 3
47121: ARRAY
47122: PUSH
47123: LD_INT 0
47125: PUSH
47126: LD_INT 8
47128: PUSH
47129: LD_INT 9
47131: PUSH
47132: LD_INT 10
47134: PUSH
47135: LD_INT 11
47137: PUSH
47138: LD_INT 12
47140: PUSH
47141: LD_INT 13
47143: PUSH
47144: LD_INT 16
47146: PUSH
47147: LD_INT 17
47149: PUSH
47150: LD_INT 18
47152: PUSH
47153: LD_INT 19
47155: PUSH
47156: LD_INT 20
47158: PUSH
47159: LD_INT 21
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: LIST
47174: LIST
47175: LIST
47176: IN
47177: NOT
47178: OR
47179: PUSH
47180: LD_VAR 0 8
47184: PUSH
47185: LD_INT 5
47187: ARRAY
47188: NOT
47189: OR
47190: PUSH
47191: LD_VAR 0 8
47195: PUSH
47196: LD_INT 6
47198: ARRAY
47199: PUSH
47200: LD_INT 1
47202: PUSH
47203: LD_INT 2
47205: PUSH
47206: LD_INT 7
47208: PUSH
47209: LD_INT 9
47211: PUSH
47212: LD_INT 10
47214: PUSH
47215: LD_INT 11
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: LIST
47222: LIST
47223: LIST
47224: LIST
47225: IN
47226: NOT
47227: OR
47228: IFFALSE 47234
// exit ;
47230: POP
47231: POP
47232: GO 47317
// end ;
47234: GO 46905
47236: POP
47237: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
47238: LD_VAR 0 9
47242: PPUSH
47243: LD_VAR 0 3
47247: PPUSH
47248: LD_VAR 0 4
47252: PPUSH
47253: LD_INT 20
47255: PPUSH
47256: CALL 39240 0 4
47260: PUSH
47261: LD_INT 4
47263: ARRAY
47264: IFFALSE 47268
// exit ;
47266: GO 47317
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
47268: LD_VAR 0 2
47272: PUSH
47273: LD_INT 29
47275: PUSH
47276: LD_INT 30
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: IN
47283: PUSH
47284: LD_VAR 0 3
47288: PPUSH
47289: LD_VAR 0 4
47293: PPUSH
47294: LD_VAR 0 9
47298: PPUSH
47299: CALL_OW 440
47303: NOT
47304: AND
47305: IFFALSE 47309
// exit ;
47307: GO 47317
// result := true ;
47309: LD_ADDR_VAR 0 6
47313: PUSH
47314: LD_INT 1
47316: ST_TO_ADDR
// end ;
47317: LD_VAR 0 6
47321: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
47322: LD_INT 0
47324: PPUSH
47325: PPUSH
47326: PPUSH
47327: PPUSH
47328: PPUSH
47329: PPUSH
47330: PPUSH
47331: PPUSH
47332: PPUSH
47333: PPUSH
47334: PPUSH
47335: PPUSH
47336: PPUSH
47337: PPUSH
47338: PPUSH
47339: PPUSH
47340: PPUSH
47341: PPUSH
47342: PPUSH
47343: PPUSH
47344: PPUSH
47345: PPUSH
47346: PPUSH
47347: PPUSH
47348: PPUSH
47349: PPUSH
47350: PPUSH
47351: PPUSH
47352: PPUSH
47353: PPUSH
47354: PPUSH
47355: PPUSH
47356: PPUSH
47357: PPUSH
47358: PPUSH
47359: PPUSH
47360: PPUSH
47361: PPUSH
47362: PPUSH
47363: PPUSH
47364: PPUSH
47365: PPUSH
47366: PPUSH
47367: PPUSH
47368: PPUSH
47369: PPUSH
47370: PPUSH
47371: PPUSH
47372: PPUSH
47373: PPUSH
47374: PPUSH
47375: PPUSH
47376: PPUSH
47377: PPUSH
47378: PPUSH
47379: PPUSH
47380: PPUSH
47381: PPUSH
// result = [ ] ;
47382: LD_ADDR_VAR 0 7
47386: PUSH
47387: EMPTY
47388: ST_TO_ADDR
// temp_list = [ ] ;
47389: LD_ADDR_VAR 0 9
47393: PUSH
47394: EMPTY
47395: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
47396: LD_VAR 0 4
47400: PUSH
47401: LD_INT 0
47403: PUSH
47404: LD_INT 1
47406: PUSH
47407: LD_INT 2
47409: PUSH
47410: LD_INT 3
47412: PUSH
47413: LD_INT 4
47415: PUSH
47416: LD_INT 5
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: IN
47427: NOT
47428: PUSH
47429: LD_VAR 0 1
47433: PUSH
47434: LD_INT 0
47436: PUSH
47437: LD_INT 1
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: IN
47444: PUSH
47445: LD_VAR 0 5
47449: PUSH
47450: LD_INT 1
47452: PUSH
47453: LD_INT 2
47455: PUSH
47456: LD_INT 3
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: LIST
47463: IN
47464: NOT
47465: AND
47466: OR
47467: IFFALSE 47471
// exit ;
47469: GO 65862
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
47471: LD_VAR 0 1
47475: PUSH
47476: LD_INT 6
47478: PUSH
47479: LD_INT 7
47481: PUSH
47482: LD_INT 8
47484: PUSH
47485: LD_INT 13
47487: PUSH
47488: LD_INT 12
47490: PUSH
47491: LD_INT 15
47493: PUSH
47494: LD_INT 11
47496: PUSH
47497: LD_INT 14
47499: PUSH
47500: LD_INT 10
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: LIST
47507: LIST
47508: LIST
47509: LIST
47510: LIST
47511: LIST
47512: LIST
47513: IN
47514: IFFALSE 47524
// btype = b_lab ;
47516: LD_ADDR_VAR 0 1
47520: PUSH
47521: LD_INT 6
47523: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
47524: LD_VAR 0 6
47528: PUSH
47529: LD_INT 0
47531: PUSH
47532: LD_INT 1
47534: PUSH
47535: LD_INT 2
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: LIST
47542: IN
47543: NOT
47544: PUSH
47545: LD_VAR 0 1
47549: PUSH
47550: LD_INT 0
47552: PUSH
47553: LD_INT 1
47555: PUSH
47556: LD_INT 2
47558: PUSH
47559: LD_INT 3
47561: PUSH
47562: LD_INT 6
47564: PUSH
47565: LD_INT 36
47567: PUSH
47568: LD_INT 4
47570: PUSH
47571: LD_INT 5
47573: PUSH
47574: LD_INT 31
47576: PUSH
47577: LD_INT 32
47579: PUSH
47580: LD_INT 33
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: LIST
47587: LIST
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: LIST
47594: LIST
47595: IN
47596: NOT
47597: PUSH
47598: LD_VAR 0 6
47602: PUSH
47603: LD_INT 1
47605: EQUAL
47606: AND
47607: OR
47608: PUSH
47609: LD_VAR 0 1
47613: PUSH
47614: LD_INT 2
47616: PUSH
47617: LD_INT 3
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: IN
47624: NOT
47625: PUSH
47626: LD_VAR 0 6
47630: PUSH
47631: LD_INT 2
47633: EQUAL
47634: AND
47635: OR
47636: IFFALSE 47646
// mode = 0 ;
47638: LD_ADDR_VAR 0 6
47642: PUSH
47643: LD_INT 0
47645: ST_TO_ADDR
// case mode of 0 :
47646: LD_VAR 0 6
47650: PUSH
47651: LD_INT 0
47653: DOUBLE
47654: EQUAL
47655: IFTRUE 47659
47657: GO 59112
47659: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47660: LD_ADDR_VAR 0 11
47664: PUSH
47665: LD_INT 0
47667: PUSH
47668: LD_INT 0
47670: PUSH
47671: EMPTY
47672: LIST
47673: LIST
47674: PUSH
47675: LD_INT 0
47677: PUSH
47678: LD_INT 1
47680: NEG
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 1
47688: PUSH
47689: LD_INT 0
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 1
47698: PUSH
47699: LD_INT 1
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: LD_INT 0
47708: PUSH
47709: LD_INT 1
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: PUSH
47716: LD_INT 1
47718: NEG
47719: PUSH
47720: LD_INT 0
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: LD_INT 1
47729: NEG
47730: PUSH
47731: LD_INT 1
47733: NEG
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: LD_INT 1
47741: NEG
47742: PUSH
47743: LD_INT 2
47745: NEG
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 0
47753: PUSH
47754: LD_INT 2
47756: NEG
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: LD_INT 1
47764: PUSH
47765: LD_INT 1
47767: NEG
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: PUSH
47773: LD_INT 1
47775: PUSH
47776: LD_INT 2
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 0
47785: PUSH
47786: LD_INT 2
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: PUSH
47793: LD_INT 1
47795: NEG
47796: PUSH
47797: LD_INT 1
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 1
47806: PUSH
47807: LD_INT 3
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: LD_INT 0
47816: PUSH
47817: LD_INT 3
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: LD_INT 1
47826: NEG
47827: PUSH
47828: LD_INT 2
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47853: LD_ADDR_VAR 0 12
47857: PUSH
47858: LD_INT 0
47860: PUSH
47861: LD_INT 0
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: LD_INT 0
47870: PUSH
47871: LD_INT 1
47873: NEG
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 1
47881: PUSH
47882: LD_INT 0
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 1
47891: PUSH
47892: LD_INT 1
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 0
47901: PUSH
47902: LD_INT 1
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 1
47911: NEG
47912: PUSH
47913: LD_INT 0
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 1
47922: NEG
47923: PUSH
47924: LD_INT 1
47926: NEG
47927: PUSH
47928: EMPTY
47929: LIST
47930: LIST
47931: PUSH
47932: LD_INT 1
47934: PUSH
47935: LD_INT 1
47937: NEG
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: PUSH
47943: LD_INT 2
47945: PUSH
47946: LD_INT 0
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 2
47955: PUSH
47956: LD_INT 1
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 1
47965: NEG
47966: PUSH
47967: LD_INT 1
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 2
47976: NEG
47977: PUSH
47978: LD_INT 0
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 2
47987: NEG
47988: PUSH
47989: LD_INT 1
47991: NEG
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 2
47999: NEG
48000: PUSH
48001: LD_INT 1
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 3
48010: NEG
48011: PUSH
48012: LD_INT 0
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 3
48021: NEG
48022: PUSH
48023: LD_INT 1
48025: NEG
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48049: LD_ADDR_VAR 0 13
48053: PUSH
48054: LD_INT 0
48056: PUSH
48057: LD_INT 0
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 0
48066: PUSH
48067: LD_INT 1
48069: NEG
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: LD_INT 1
48077: PUSH
48078: LD_INT 0
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 1
48087: PUSH
48088: LD_INT 1
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: LD_INT 0
48097: PUSH
48098: LD_INT 1
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 1
48107: NEG
48108: PUSH
48109: LD_INT 0
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 1
48118: NEG
48119: PUSH
48120: LD_INT 1
48122: NEG
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 1
48130: NEG
48131: PUSH
48132: LD_INT 2
48134: NEG
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 2
48142: PUSH
48143: LD_INT 1
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 2
48152: PUSH
48153: LD_INT 2
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 1
48162: PUSH
48163: LD_INT 2
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 2
48172: NEG
48173: PUSH
48174: LD_INT 1
48176: NEG
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 2
48184: NEG
48185: PUSH
48186: LD_INT 2
48188: NEG
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: LD_INT 2
48196: NEG
48197: PUSH
48198: LD_INT 3
48200: NEG
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 3
48208: NEG
48209: PUSH
48210: LD_INT 2
48212: NEG
48213: PUSH
48214: EMPTY
48215: LIST
48216: LIST
48217: PUSH
48218: LD_INT 3
48220: NEG
48221: PUSH
48222: LD_INT 3
48224: NEG
48225: PUSH
48226: EMPTY
48227: LIST
48228: LIST
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: LIST
48240: LIST
48241: LIST
48242: LIST
48243: LIST
48244: LIST
48245: LIST
48246: LIST
48247: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48248: LD_ADDR_VAR 0 14
48252: PUSH
48253: LD_INT 0
48255: PUSH
48256: LD_INT 0
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PUSH
48263: LD_INT 0
48265: PUSH
48266: LD_INT 1
48268: NEG
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: PUSH
48274: LD_INT 1
48276: PUSH
48277: LD_INT 0
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 1
48286: PUSH
48287: LD_INT 1
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: PUSH
48294: LD_INT 0
48296: PUSH
48297: LD_INT 1
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: LD_INT 1
48306: NEG
48307: PUSH
48308: LD_INT 0
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: LD_INT 1
48317: NEG
48318: PUSH
48319: LD_INT 1
48321: NEG
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: LD_INT 1
48329: NEG
48330: PUSH
48331: LD_INT 2
48333: NEG
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: LD_INT 0
48341: PUSH
48342: LD_INT 2
48344: NEG
48345: PUSH
48346: EMPTY
48347: LIST
48348: LIST
48349: PUSH
48350: LD_INT 1
48352: PUSH
48353: LD_INT 1
48355: NEG
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 1
48363: PUSH
48364: LD_INT 2
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 0
48373: PUSH
48374: LD_INT 2
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: LD_INT 1
48383: NEG
48384: PUSH
48385: LD_INT 1
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: PUSH
48392: LD_INT 1
48394: NEG
48395: PUSH
48396: LD_INT 3
48398: NEG
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: LD_INT 0
48406: PUSH
48407: LD_INT 3
48409: NEG
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 1
48417: PUSH
48418: LD_INT 2
48420: NEG
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48444: LD_ADDR_VAR 0 15
48448: PUSH
48449: LD_INT 0
48451: PUSH
48452: LD_INT 0
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 0
48461: PUSH
48462: LD_INT 1
48464: NEG
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: LD_INT 1
48472: PUSH
48473: LD_INT 0
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: PUSH
48480: LD_INT 1
48482: PUSH
48483: LD_INT 1
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: PUSH
48490: LD_INT 0
48492: PUSH
48493: LD_INT 1
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 1
48502: NEG
48503: PUSH
48504: LD_INT 0
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 1
48513: NEG
48514: PUSH
48515: LD_INT 1
48517: NEG
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 1
48525: PUSH
48526: LD_INT 1
48528: NEG
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 2
48536: PUSH
48537: LD_INT 0
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: LD_INT 2
48546: PUSH
48547: LD_INT 1
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 1
48556: NEG
48557: PUSH
48558: LD_INT 1
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 2
48567: NEG
48568: PUSH
48569: LD_INT 0
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 2
48578: NEG
48579: PUSH
48580: LD_INT 1
48582: NEG
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 2
48590: PUSH
48591: LD_INT 1
48593: NEG
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 3
48601: PUSH
48602: LD_INT 0
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 3
48611: PUSH
48612: LD_INT 1
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: EMPTY
48620: LIST
48621: LIST
48622: LIST
48623: LIST
48624: LIST
48625: LIST
48626: LIST
48627: LIST
48628: LIST
48629: LIST
48630: LIST
48631: LIST
48632: LIST
48633: LIST
48634: LIST
48635: LIST
48636: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48637: LD_ADDR_VAR 0 16
48641: PUSH
48642: LD_INT 0
48644: PUSH
48645: LD_INT 0
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 0
48654: PUSH
48655: LD_INT 1
48657: NEG
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 1
48665: PUSH
48666: LD_INT 0
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: LD_INT 1
48675: PUSH
48676: LD_INT 1
48678: PUSH
48679: EMPTY
48680: LIST
48681: LIST
48682: PUSH
48683: LD_INT 0
48685: PUSH
48686: LD_INT 1
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 1
48695: NEG
48696: PUSH
48697: LD_INT 0
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: LD_INT 1
48706: NEG
48707: PUSH
48708: LD_INT 1
48710: NEG
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 1
48718: NEG
48719: PUSH
48720: LD_INT 2
48722: NEG
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 2
48730: PUSH
48731: LD_INT 1
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 2
48740: PUSH
48741: LD_INT 2
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 1
48750: PUSH
48751: LD_INT 2
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 2
48760: NEG
48761: PUSH
48762: LD_INT 1
48764: NEG
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: PUSH
48770: LD_INT 2
48772: NEG
48773: PUSH
48774: LD_INT 2
48776: NEG
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 3
48784: PUSH
48785: LD_INT 2
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 3
48794: PUSH
48795: LD_INT 3
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 2
48804: PUSH
48805: LD_INT 3
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48830: LD_ADDR_VAR 0 17
48834: PUSH
48835: LD_INT 0
48837: PUSH
48838: LD_INT 0
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 0
48847: PUSH
48848: LD_INT 1
48850: NEG
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 1
48858: PUSH
48859: LD_INT 0
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 1
48868: PUSH
48869: LD_INT 1
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 0
48878: PUSH
48879: LD_INT 1
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 1
48888: NEG
48889: PUSH
48890: LD_INT 0
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 1
48899: NEG
48900: PUSH
48901: LD_INT 1
48903: NEG
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 1
48911: NEG
48912: PUSH
48913: LD_INT 2
48915: NEG
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 0
48923: PUSH
48924: LD_INT 2
48926: NEG
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 1
48934: PUSH
48935: LD_INT 1
48937: NEG
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 2
48945: PUSH
48946: LD_INT 0
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 2
48955: PUSH
48956: LD_INT 1
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 2
48965: PUSH
48966: LD_INT 2
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 1
48975: PUSH
48976: LD_INT 2
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 0
48985: PUSH
48986: LD_INT 2
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 1
48995: NEG
48996: PUSH
48997: LD_INT 1
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: LD_INT 2
49006: NEG
49007: PUSH
49008: LD_INT 0
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 2
49017: NEG
49018: PUSH
49019: LD_INT 1
49021: NEG
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 2
49029: NEG
49030: PUSH
49031: LD_INT 2
49033: NEG
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: LIST
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49060: LD_ADDR_VAR 0 18
49064: PUSH
49065: LD_INT 0
49067: PUSH
49068: LD_INT 0
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: PUSH
49075: LD_INT 0
49077: PUSH
49078: LD_INT 1
49080: NEG
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 1
49088: PUSH
49089: LD_INT 0
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 1
49098: PUSH
49099: LD_INT 1
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 0
49108: PUSH
49109: LD_INT 1
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 1
49118: NEG
49119: PUSH
49120: LD_INT 0
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: LD_INT 1
49129: NEG
49130: PUSH
49131: LD_INT 1
49133: NEG
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 1
49141: NEG
49142: PUSH
49143: LD_INT 2
49145: NEG
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 0
49153: PUSH
49154: LD_INT 2
49156: NEG
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 1
49164: PUSH
49165: LD_INT 1
49167: NEG
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 2
49175: PUSH
49176: LD_INT 0
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 2
49185: PUSH
49186: LD_INT 1
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 2
49195: PUSH
49196: LD_INT 2
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 1
49205: PUSH
49206: LD_INT 2
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 0
49215: PUSH
49216: LD_INT 2
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 1
49225: NEG
49226: PUSH
49227: LD_INT 1
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 2
49236: NEG
49237: PUSH
49238: LD_INT 0
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 2
49247: NEG
49248: PUSH
49249: LD_INT 1
49251: NEG
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: LD_INT 2
49259: NEG
49260: PUSH
49261: LD_INT 2
49263: NEG
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49290: LD_ADDR_VAR 0 19
49294: PUSH
49295: LD_INT 0
49297: PUSH
49298: LD_INT 0
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 0
49307: PUSH
49308: LD_INT 1
49310: NEG
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 1
49318: PUSH
49319: LD_INT 0
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 1
49328: PUSH
49329: LD_INT 1
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 0
49338: PUSH
49339: LD_INT 1
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 1
49348: NEG
49349: PUSH
49350: LD_INT 0
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 1
49359: NEG
49360: PUSH
49361: LD_INT 1
49363: NEG
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 1
49371: NEG
49372: PUSH
49373: LD_INT 2
49375: NEG
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: LD_INT 0
49383: PUSH
49384: LD_INT 2
49386: NEG
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: PUSH
49392: LD_INT 1
49394: PUSH
49395: LD_INT 1
49397: NEG
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: LD_INT 2
49405: PUSH
49406: LD_INT 0
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 2
49415: PUSH
49416: LD_INT 1
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 2
49425: PUSH
49426: LD_INT 2
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 1
49435: PUSH
49436: LD_INT 2
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 0
49445: PUSH
49446: LD_INT 2
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: LD_INT 1
49455: NEG
49456: PUSH
49457: LD_INT 1
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 2
49466: NEG
49467: PUSH
49468: LD_INT 0
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: PUSH
49475: LD_INT 2
49477: NEG
49478: PUSH
49479: LD_INT 1
49481: NEG
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 2
49489: NEG
49490: PUSH
49491: LD_INT 2
49493: NEG
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49520: LD_ADDR_VAR 0 20
49524: PUSH
49525: LD_INT 0
49527: PUSH
49528: LD_INT 0
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 0
49537: PUSH
49538: LD_INT 1
49540: NEG
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: LD_INT 1
49548: PUSH
49549: LD_INT 0
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 1
49558: PUSH
49559: LD_INT 1
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: LD_INT 0
49568: PUSH
49569: LD_INT 1
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_INT 1
49578: NEG
49579: PUSH
49580: LD_INT 0
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: LD_INT 1
49589: NEG
49590: PUSH
49591: LD_INT 1
49593: NEG
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 1
49601: NEG
49602: PUSH
49603: LD_INT 2
49605: NEG
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 0
49613: PUSH
49614: LD_INT 2
49616: NEG
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 1
49624: PUSH
49625: LD_INT 1
49627: NEG
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: LD_INT 2
49635: PUSH
49636: LD_INT 0
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 2
49645: PUSH
49646: LD_INT 1
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 2
49655: PUSH
49656: LD_INT 2
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 1
49665: PUSH
49666: LD_INT 2
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 0
49675: PUSH
49676: LD_INT 2
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 1
49685: NEG
49686: PUSH
49687: LD_INT 1
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 2
49696: NEG
49697: PUSH
49698: LD_INT 0
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: PUSH
49705: LD_INT 2
49707: NEG
49708: PUSH
49709: LD_INT 1
49711: NEG
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: LD_INT 2
49719: NEG
49720: PUSH
49721: LD_INT 2
49723: NEG
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: LIST
49733: LIST
49734: LIST
49735: LIST
49736: LIST
49737: LIST
49738: LIST
49739: LIST
49740: LIST
49741: LIST
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: LIST
49749: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49750: LD_ADDR_VAR 0 21
49754: PUSH
49755: LD_INT 0
49757: PUSH
49758: LD_INT 0
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 0
49767: PUSH
49768: LD_INT 1
49770: NEG
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 1
49778: PUSH
49779: LD_INT 0
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 1
49788: PUSH
49789: LD_INT 1
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 0
49798: PUSH
49799: LD_INT 1
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 1
49808: NEG
49809: PUSH
49810: LD_INT 0
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: PUSH
49817: LD_INT 1
49819: NEG
49820: PUSH
49821: LD_INT 1
49823: NEG
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 1
49831: NEG
49832: PUSH
49833: LD_INT 2
49835: NEG
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 0
49843: PUSH
49844: LD_INT 2
49846: NEG
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 1
49854: PUSH
49855: LD_INT 1
49857: NEG
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 2
49865: PUSH
49866: LD_INT 0
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 2
49875: PUSH
49876: LD_INT 1
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 2
49885: PUSH
49886: LD_INT 2
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 1
49895: PUSH
49896: LD_INT 2
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 0
49905: PUSH
49906: LD_INT 2
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 1
49915: NEG
49916: PUSH
49917: LD_INT 1
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: LD_INT 2
49926: NEG
49927: PUSH
49928: LD_INT 0
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 2
49937: NEG
49938: PUSH
49939: LD_INT 1
49941: NEG
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 2
49949: NEG
49950: PUSH
49951: LD_INT 2
49953: NEG
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49980: LD_ADDR_VAR 0 22
49984: PUSH
49985: LD_INT 0
49987: PUSH
49988: LD_INT 0
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 0
49997: PUSH
49998: LD_INT 1
50000: NEG
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 1
50008: PUSH
50009: LD_INT 0
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 1
50018: PUSH
50019: LD_INT 1
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: LD_INT 0
50028: PUSH
50029: LD_INT 1
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: LD_INT 1
50038: NEG
50039: PUSH
50040: LD_INT 0
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: LD_INT 1
50049: NEG
50050: PUSH
50051: LD_INT 1
50053: NEG
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: LD_INT 1
50061: NEG
50062: PUSH
50063: LD_INT 2
50065: NEG
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 0
50073: PUSH
50074: LD_INT 2
50076: NEG
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: LD_INT 1
50084: PUSH
50085: LD_INT 1
50087: NEG
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 2
50095: PUSH
50096: LD_INT 0
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: LD_INT 2
50105: PUSH
50106: LD_INT 1
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: LD_INT 2
50115: PUSH
50116: LD_INT 2
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: PUSH
50123: LD_INT 1
50125: PUSH
50126: LD_INT 2
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: PUSH
50133: LD_INT 0
50135: PUSH
50136: LD_INT 2
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: LD_INT 1
50145: NEG
50146: PUSH
50147: LD_INT 1
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 2
50156: NEG
50157: PUSH
50158: LD_INT 0
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 2
50167: NEG
50168: PUSH
50169: LD_INT 1
50171: NEG
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 2
50179: NEG
50180: PUSH
50181: LD_INT 2
50183: NEG
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50210: LD_ADDR_VAR 0 23
50214: PUSH
50215: LD_INT 0
50217: PUSH
50218: LD_INT 0
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 0
50227: PUSH
50228: LD_INT 1
50230: NEG
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 1
50238: PUSH
50239: LD_INT 0
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 1
50248: PUSH
50249: LD_INT 1
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PUSH
50256: LD_INT 0
50258: PUSH
50259: LD_INT 1
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 1
50268: NEG
50269: PUSH
50270: LD_INT 0
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 1
50279: NEG
50280: PUSH
50281: LD_INT 1
50283: NEG
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 1
50291: NEG
50292: PUSH
50293: LD_INT 2
50295: NEG
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 0
50303: PUSH
50304: LD_INT 2
50306: NEG
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 1
50314: PUSH
50315: LD_INT 1
50317: NEG
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 2
50325: PUSH
50326: LD_INT 0
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 2
50335: PUSH
50336: LD_INT 1
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 2
50345: PUSH
50346: LD_INT 2
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 1
50355: PUSH
50356: LD_INT 2
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 0
50365: PUSH
50366: LD_INT 2
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: LD_INT 1
50375: NEG
50376: PUSH
50377: LD_INT 1
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 2
50386: NEG
50387: PUSH
50388: LD_INT 0
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 2
50397: NEG
50398: PUSH
50399: LD_INT 1
50401: NEG
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 2
50409: NEG
50410: PUSH
50411: LD_INT 2
50413: NEG
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 2
50421: NEG
50422: PUSH
50423: LD_INT 3
50425: NEG
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 1
50433: NEG
50434: PUSH
50435: LD_INT 3
50437: NEG
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 1
50445: PUSH
50446: LD_INT 2
50448: NEG
50449: PUSH
50450: EMPTY
50451: LIST
50452: LIST
50453: PUSH
50454: LD_INT 2
50456: PUSH
50457: LD_INT 1
50459: NEG
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: LIST
50489: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
50490: LD_ADDR_VAR 0 24
50494: PUSH
50495: LD_INT 0
50497: PUSH
50498: LD_INT 0
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: PUSH
50505: LD_INT 0
50507: PUSH
50508: LD_INT 1
50510: NEG
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: PUSH
50516: LD_INT 1
50518: PUSH
50519: LD_INT 0
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: LD_INT 1
50528: PUSH
50529: LD_INT 1
50531: PUSH
50532: EMPTY
50533: LIST
50534: LIST
50535: PUSH
50536: LD_INT 0
50538: PUSH
50539: LD_INT 1
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: LD_INT 1
50548: NEG
50549: PUSH
50550: LD_INT 0
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: PUSH
50557: LD_INT 1
50559: NEG
50560: PUSH
50561: LD_INT 1
50563: NEG
50564: PUSH
50565: EMPTY
50566: LIST
50567: LIST
50568: PUSH
50569: LD_INT 1
50571: NEG
50572: PUSH
50573: LD_INT 2
50575: NEG
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 0
50583: PUSH
50584: LD_INT 2
50586: NEG
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 1
50594: PUSH
50595: LD_INT 1
50597: NEG
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 2
50605: PUSH
50606: LD_INT 0
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: LD_INT 2
50615: PUSH
50616: LD_INT 1
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 2
50625: PUSH
50626: LD_INT 2
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 1
50635: PUSH
50636: LD_INT 2
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 0
50645: PUSH
50646: LD_INT 2
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 1
50655: NEG
50656: PUSH
50657: LD_INT 1
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 2
50666: NEG
50667: PUSH
50668: LD_INT 0
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: PUSH
50675: LD_INT 2
50677: NEG
50678: PUSH
50679: LD_INT 1
50681: NEG
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: LD_INT 2
50689: NEG
50690: PUSH
50691: LD_INT 2
50693: NEG
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: LD_INT 1
50701: PUSH
50702: LD_INT 2
50704: NEG
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 2
50712: PUSH
50713: LD_INT 1
50715: NEG
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 3
50723: PUSH
50724: LD_INT 1
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 3
50733: PUSH
50734: LD_INT 2
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
50766: LD_ADDR_VAR 0 25
50770: PUSH
50771: LD_INT 0
50773: PUSH
50774: LD_INT 0
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 0
50783: PUSH
50784: LD_INT 1
50786: NEG
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 1
50794: PUSH
50795: LD_INT 0
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: LD_INT 1
50804: PUSH
50805: LD_INT 1
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: LD_INT 0
50814: PUSH
50815: LD_INT 1
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 1
50824: NEG
50825: PUSH
50826: LD_INT 0
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 1
50835: NEG
50836: PUSH
50837: LD_INT 1
50839: NEG
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 1
50847: NEG
50848: PUSH
50849: LD_INT 2
50851: NEG
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 0
50859: PUSH
50860: LD_INT 2
50862: NEG
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 1
50870: PUSH
50871: LD_INT 1
50873: NEG
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: LD_INT 2
50881: PUSH
50882: LD_INT 0
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 2
50891: PUSH
50892: LD_INT 1
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 2
50901: PUSH
50902: LD_INT 2
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 1
50911: PUSH
50912: LD_INT 2
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 0
50921: PUSH
50922: LD_INT 2
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 1
50931: NEG
50932: PUSH
50933: LD_INT 1
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 2
50942: NEG
50943: PUSH
50944: LD_INT 0
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 2
50953: NEG
50954: PUSH
50955: LD_INT 1
50957: NEG
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 2
50965: NEG
50966: PUSH
50967: LD_INT 2
50969: NEG
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 3
50977: PUSH
50978: LD_INT 1
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 3
50987: PUSH
50988: LD_INT 2
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 2
50997: PUSH
50998: LD_INT 3
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 1
51007: PUSH
51008: LD_INT 3
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51040: LD_ADDR_VAR 0 26
51044: PUSH
51045: LD_INT 0
51047: PUSH
51048: LD_INT 0
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: LD_INT 0
51057: PUSH
51058: LD_INT 1
51060: NEG
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 1
51068: PUSH
51069: LD_INT 0
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 1
51078: PUSH
51079: LD_INT 1
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 0
51088: PUSH
51089: LD_INT 1
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 1
51098: NEG
51099: PUSH
51100: LD_INT 0
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 1
51109: NEG
51110: PUSH
51111: LD_INT 1
51113: NEG
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 1
51121: NEG
51122: PUSH
51123: LD_INT 2
51125: NEG
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 0
51133: PUSH
51134: LD_INT 2
51136: NEG
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: PUSH
51142: LD_INT 1
51144: PUSH
51145: LD_INT 1
51147: NEG
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: PUSH
51153: LD_INT 2
51155: PUSH
51156: LD_INT 0
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 2
51165: PUSH
51166: LD_INT 1
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 2
51175: PUSH
51176: LD_INT 2
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 1
51185: PUSH
51186: LD_INT 2
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 0
51195: PUSH
51196: LD_INT 2
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 1
51205: NEG
51206: PUSH
51207: LD_INT 1
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 2
51216: NEG
51217: PUSH
51218: LD_INT 0
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 2
51227: NEG
51228: PUSH
51229: LD_INT 1
51231: NEG
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 2
51239: NEG
51240: PUSH
51241: LD_INT 2
51243: NEG
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 2
51251: PUSH
51252: LD_INT 3
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 1
51261: PUSH
51262: LD_INT 3
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 1
51271: NEG
51272: PUSH
51273: LD_INT 2
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 2
51282: NEG
51283: PUSH
51284: LD_INT 1
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51316: LD_ADDR_VAR 0 27
51320: PUSH
51321: LD_INT 0
51323: PUSH
51324: LD_INT 0
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 0
51333: PUSH
51334: LD_INT 1
51336: NEG
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 1
51344: PUSH
51345: LD_INT 0
51347: PUSH
51348: EMPTY
51349: LIST
51350: LIST
51351: PUSH
51352: LD_INT 1
51354: PUSH
51355: LD_INT 1
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 0
51364: PUSH
51365: LD_INT 1
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 1
51374: NEG
51375: PUSH
51376: LD_INT 0
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 1
51385: NEG
51386: PUSH
51387: LD_INT 1
51389: NEG
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: LD_INT 1
51397: NEG
51398: PUSH
51399: LD_INT 2
51401: NEG
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 0
51409: PUSH
51410: LD_INT 2
51412: NEG
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 1
51420: PUSH
51421: LD_INT 1
51423: NEG
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: PUSH
51429: LD_INT 2
51431: PUSH
51432: LD_INT 0
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 2
51441: PUSH
51442: LD_INT 1
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: PUSH
51449: LD_INT 2
51451: PUSH
51452: LD_INT 2
51454: PUSH
51455: EMPTY
51456: LIST
51457: LIST
51458: PUSH
51459: LD_INT 1
51461: PUSH
51462: LD_INT 2
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 0
51471: PUSH
51472: LD_INT 2
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 1
51481: NEG
51482: PUSH
51483: LD_INT 1
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 2
51492: NEG
51493: PUSH
51494: LD_INT 0
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 2
51503: NEG
51504: PUSH
51505: LD_INT 1
51507: NEG
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 2
51515: NEG
51516: PUSH
51517: LD_INT 2
51519: NEG
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 1
51527: NEG
51528: PUSH
51529: LD_INT 2
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 2
51538: NEG
51539: PUSH
51540: LD_INT 1
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 3
51549: NEG
51550: PUSH
51551: LD_INT 1
51553: NEG
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: LD_INT 3
51561: NEG
51562: PUSH
51563: LD_INT 2
51565: NEG
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: LIST
51577: LIST
51578: LIST
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51596: LD_ADDR_VAR 0 28
51600: PUSH
51601: LD_INT 0
51603: PUSH
51604: LD_INT 0
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 0
51613: PUSH
51614: LD_INT 1
51616: NEG
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 1
51624: PUSH
51625: LD_INT 0
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 1
51634: PUSH
51635: LD_INT 1
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 0
51644: PUSH
51645: LD_INT 1
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: PUSH
51652: LD_INT 1
51654: NEG
51655: PUSH
51656: LD_INT 0
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 1
51665: NEG
51666: PUSH
51667: LD_INT 1
51669: NEG
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 1
51677: NEG
51678: PUSH
51679: LD_INT 2
51681: NEG
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 0
51689: PUSH
51690: LD_INT 2
51692: NEG
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 1
51700: PUSH
51701: LD_INT 1
51703: NEG
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 2
51711: PUSH
51712: LD_INT 0
51714: PUSH
51715: EMPTY
51716: LIST
51717: LIST
51718: PUSH
51719: LD_INT 2
51721: PUSH
51722: LD_INT 1
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 2
51731: PUSH
51732: LD_INT 2
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 1
51741: PUSH
51742: LD_INT 2
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 0
51751: PUSH
51752: LD_INT 2
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 1
51761: NEG
51762: PUSH
51763: LD_INT 1
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 2
51772: NEG
51773: PUSH
51774: LD_INT 0
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 2
51783: NEG
51784: PUSH
51785: LD_INT 1
51787: NEG
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 2
51795: NEG
51796: PUSH
51797: LD_INT 2
51799: NEG
51800: PUSH
51801: EMPTY
51802: LIST
51803: LIST
51804: PUSH
51805: LD_INT 2
51807: NEG
51808: PUSH
51809: LD_INT 3
51811: NEG
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 1
51819: NEG
51820: PUSH
51821: LD_INT 3
51823: NEG
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 3
51831: NEG
51832: PUSH
51833: LD_INT 1
51835: NEG
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 3
51843: NEG
51844: PUSH
51845: LD_INT 2
51847: NEG
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51878: LD_ADDR_VAR 0 29
51882: PUSH
51883: LD_INT 0
51885: PUSH
51886: LD_INT 0
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 0
51895: PUSH
51896: LD_INT 1
51898: NEG
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 1
51906: PUSH
51907: LD_INT 0
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 1
51916: PUSH
51917: LD_INT 1
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 0
51926: PUSH
51927: LD_INT 1
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 1
51936: NEG
51937: PUSH
51938: LD_INT 0
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 1
51947: NEG
51948: PUSH
51949: LD_INT 1
51951: NEG
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 1
51959: NEG
51960: PUSH
51961: LD_INT 2
51963: NEG
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 0
51971: PUSH
51972: LD_INT 2
51974: NEG
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 1
51982: PUSH
51983: LD_INT 1
51985: NEG
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 2
51993: PUSH
51994: LD_INT 0
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 2
52003: PUSH
52004: LD_INT 1
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 1
52013: PUSH
52014: LD_INT 2
52016: PUSH
52017: EMPTY
52018: LIST
52019: LIST
52020: PUSH
52021: LD_INT 0
52023: PUSH
52024: LD_INT 2
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: LD_INT 1
52033: NEG
52034: PUSH
52035: LD_INT 1
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: LD_INT 2
52044: NEG
52045: PUSH
52046: LD_INT 1
52048: NEG
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 2
52056: NEG
52057: PUSH
52058: LD_INT 2
52060: NEG
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 2
52068: NEG
52069: PUSH
52070: LD_INT 3
52072: NEG
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: LD_INT 2
52080: PUSH
52081: LD_INT 1
52083: NEG
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 3
52091: PUSH
52092: LD_INT 1
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 1
52101: PUSH
52102: LD_INT 3
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 1
52111: NEG
52112: PUSH
52113: LD_INT 2
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 3
52122: NEG
52123: PUSH
52124: LD_INT 2
52126: NEG
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: LIST
52136: LIST
52137: LIST
52138: LIST
52139: LIST
52140: LIST
52141: LIST
52142: LIST
52143: LIST
52144: LIST
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52157: LD_ADDR_VAR 0 30
52161: PUSH
52162: LD_INT 0
52164: PUSH
52165: LD_INT 0
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 0
52174: PUSH
52175: LD_INT 1
52177: NEG
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 1
52185: PUSH
52186: LD_INT 0
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 1
52195: PUSH
52196: LD_INT 1
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 0
52205: PUSH
52206: LD_INT 1
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: LD_INT 1
52215: NEG
52216: PUSH
52217: LD_INT 0
52219: PUSH
52220: EMPTY
52221: LIST
52222: LIST
52223: PUSH
52224: LD_INT 1
52226: NEG
52227: PUSH
52228: LD_INT 1
52230: NEG
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 1
52238: NEG
52239: PUSH
52240: LD_INT 2
52242: NEG
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 0
52250: PUSH
52251: LD_INT 2
52253: NEG
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 1
52261: PUSH
52262: LD_INT 1
52264: NEG
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: LD_INT 2
52272: PUSH
52273: LD_INT 0
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 2
52282: PUSH
52283: LD_INT 1
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 2
52292: PUSH
52293: LD_INT 2
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 1
52302: PUSH
52303: LD_INT 2
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 1
52312: NEG
52313: PUSH
52314: LD_INT 1
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 2
52323: NEG
52324: PUSH
52325: LD_INT 0
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 2
52334: NEG
52335: PUSH
52336: LD_INT 1
52338: NEG
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 1
52346: NEG
52347: PUSH
52348: LD_INT 3
52350: NEG
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 1
52358: PUSH
52359: LD_INT 2
52361: NEG
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 3
52369: PUSH
52370: LD_INT 2
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 2
52379: PUSH
52380: LD_INT 3
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 2
52389: NEG
52390: PUSH
52391: LD_INT 1
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 3
52400: NEG
52401: PUSH
52402: LD_INT 1
52404: NEG
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52435: LD_ADDR_VAR 0 31
52439: PUSH
52440: LD_INT 0
52442: PUSH
52443: LD_INT 0
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: LD_INT 0
52452: PUSH
52453: LD_INT 1
52455: NEG
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: LD_INT 1
52463: PUSH
52464: LD_INT 0
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: LD_INT 1
52473: PUSH
52474: LD_INT 1
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 0
52483: PUSH
52484: LD_INT 1
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: LD_INT 1
52493: NEG
52494: PUSH
52495: LD_INT 0
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 1
52504: NEG
52505: PUSH
52506: LD_INT 1
52508: NEG
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: LD_INT 1
52516: NEG
52517: PUSH
52518: LD_INT 2
52520: NEG
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 1
52528: PUSH
52529: LD_INT 1
52531: NEG
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: PUSH
52537: LD_INT 2
52539: PUSH
52540: LD_INT 0
52542: PUSH
52543: EMPTY
52544: LIST
52545: LIST
52546: PUSH
52547: LD_INT 2
52549: PUSH
52550: LD_INT 1
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 2
52559: PUSH
52560: LD_INT 2
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 1
52569: PUSH
52570: LD_INT 2
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 0
52579: PUSH
52580: LD_INT 2
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 1
52589: NEG
52590: PUSH
52591: LD_INT 1
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: LD_INT 2
52600: NEG
52601: PUSH
52602: LD_INT 1
52604: NEG
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 2
52612: NEG
52613: PUSH
52614: LD_INT 2
52616: NEG
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: PUSH
52622: LD_INT 2
52624: NEG
52625: PUSH
52626: LD_INT 3
52628: NEG
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 2
52636: PUSH
52637: LD_INT 1
52639: NEG
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: LD_INT 3
52647: PUSH
52648: LD_INT 1
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: LD_INT 1
52657: PUSH
52658: LD_INT 3
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: LD_INT 1
52667: NEG
52668: PUSH
52669: LD_INT 2
52671: PUSH
52672: EMPTY
52673: LIST
52674: LIST
52675: PUSH
52676: LD_INT 3
52678: NEG
52679: PUSH
52680: LD_INT 2
52682: NEG
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: LIST
52702: LIST
52703: LIST
52704: LIST
52705: LIST
52706: LIST
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52713: LD_ADDR_VAR 0 32
52717: PUSH
52718: LD_INT 0
52720: PUSH
52721: LD_INT 0
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 0
52730: PUSH
52731: LD_INT 1
52733: NEG
52734: PUSH
52735: EMPTY
52736: LIST
52737: LIST
52738: PUSH
52739: LD_INT 1
52741: PUSH
52742: LD_INT 0
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: LD_INT 1
52751: PUSH
52752: LD_INT 1
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: LD_INT 0
52761: PUSH
52762: LD_INT 1
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: LD_INT 1
52771: NEG
52772: PUSH
52773: LD_INT 0
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 1
52782: NEG
52783: PUSH
52784: LD_INT 1
52786: NEG
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: LD_INT 1
52794: NEG
52795: PUSH
52796: LD_INT 2
52798: NEG
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 0
52806: PUSH
52807: LD_INT 2
52809: NEG
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 1
52817: PUSH
52818: LD_INT 1
52820: NEG
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 2
52828: PUSH
52829: LD_INT 1
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 2
52838: PUSH
52839: LD_INT 2
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 1
52848: PUSH
52849: LD_INT 2
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: LD_INT 0
52858: PUSH
52859: LD_INT 2
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: LD_INT 1
52868: NEG
52869: PUSH
52870: LD_INT 1
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 2
52879: NEG
52880: PUSH
52881: LD_INT 0
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 2
52890: NEG
52891: PUSH
52892: LD_INT 1
52894: NEG
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 1
52902: NEG
52903: PUSH
52904: LD_INT 3
52906: NEG
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 1
52914: PUSH
52915: LD_INT 2
52917: NEG
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 3
52925: PUSH
52926: LD_INT 2
52928: PUSH
52929: EMPTY
52930: LIST
52931: LIST
52932: PUSH
52933: LD_INT 2
52935: PUSH
52936: LD_INT 3
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 2
52945: NEG
52946: PUSH
52947: LD_INT 1
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 3
52956: NEG
52957: PUSH
52958: LD_INT 1
52960: NEG
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: LIST
52980: LIST
52981: LIST
52982: LIST
52983: LIST
52984: LIST
52985: LIST
52986: LIST
52987: LIST
52988: LIST
52989: LIST
52990: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52991: LD_ADDR_VAR 0 33
52995: PUSH
52996: LD_INT 0
52998: PUSH
52999: LD_INT 0
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 0
53008: PUSH
53009: LD_INT 1
53011: NEG
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: LD_INT 1
53019: PUSH
53020: LD_INT 0
53022: PUSH
53023: EMPTY
53024: LIST
53025: LIST
53026: PUSH
53027: LD_INT 1
53029: PUSH
53030: LD_INT 1
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 0
53039: PUSH
53040: LD_INT 1
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 1
53049: NEG
53050: PUSH
53051: LD_INT 0
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: LD_INT 1
53060: NEG
53061: PUSH
53062: LD_INT 1
53064: NEG
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 1
53072: NEG
53073: PUSH
53074: LD_INT 2
53076: NEG
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 1
53084: PUSH
53085: LD_INT 1
53087: NEG
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: PUSH
53093: LD_INT 2
53095: PUSH
53096: LD_INT 0
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 2
53105: PUSH
53106: LD_INT 1
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 1
53115: PUSH
53116: LD_INT 2
53118: PUSH
53119: EMPTY
53120: LIST
53121: LIST
53122: PUSH
53123: LD_INT 0
53125: PUSH
53126: LD_INT 2
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: LD_INT 1
53135: NEG
53136: PUSH
53137: LD_INT 1
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 2
53146: NEG
53147: PUSH
53148: LD_INT 0
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: LD_INT 2
53157: NEG
53158: PUSH
53159: LD_INT 1
53161: NEG
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 2
53169: NEG
53170: PUSH
53171: LD_INT 2
53173: NEG
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 2
53181: NEG
53182: PUSH
53183: LD_INT 3
53185: NEG
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: LD_INT 2
53193: PUSH
53194: LD_INT 1
53196: NEG
53197: PUSH
53198: EMPTY
53199: LIST
53200: LIST
53201: PUSH
53202: LD_INT 3
53204: PUSH
53205: LD_INT 1
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: LD_INT 1
53214: PUSH
53215: LD_INT 3
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 1
53224: NEG
53225: PUSH
53226: LD_INT 2
53228: PUSH
53229: EMPTY
53230: LIST
53231: LIST
53232: PUSH
53233: LD_INT 3
53235: NEG
53236: PUSH
53237: LD_INT 2
53239: NEG
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: LIST
53269: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53270: LD_ADDR_VAR 0 34
53274: PUSH
53275: LD_INT 0
53277: PUSH
53278: LD_INT 0
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: LD_INT 0
53287: PUSH
53288: LD_INT 1
53290: NEG
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 1
53298: PUSH
53299: LD_INT 0
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 1
53308: PUSH
53309: LD_INT 1
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: LD_INT 0
53318: PUSH
53319: LD_INT 1
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: LD_INT 1
53328: NEG
53329: PUSH
53330: LD_INT 0
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: PUSH
53337: LD_INT 1
53339: NEG
53340: PUSH
53341: LD_INT 1
53343: NEG
53344: PUSH
53345: EMPTY
53346: LIST
53347: LIST
53348: PUSH
53349: LD_INT 1
53351: NEG
53352: PUSH
53353: LD_INT 2
53355: NEG
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 0
53363: PUSH
53364: LD_INT 2
53366: NEG
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 1
53374: PUSH
53375: LD_INT 1
53377: NEG
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 2
53385: PUSH
53386: LD_INT 1
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 2
53395: PUSH
53396: LD_INT 2
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 1
53405: PUSH
53406: LD_INT 2
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 1
53415: NEG
53416: PUSH
53417: LD_INT 1
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 2
53426: NEG
53427: PUSH
53428: LD_INT 0
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 2
53437: NEG
53438: PUSH
53439: LD_INT 1
53441: NEG
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 2
53449: NEG
53450: PUSH
53451: LD_INT 2
53453: NEG
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 1
53461: NEG
53462: PUSH
53463: LD_INT 3
53465: NEG
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: PUSH
53471: LD_INT 1
53473: PUSH
53474: LD_INT 2
53476: NEG
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 3
53484: PUSH
53485: LD_INT 2
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 2
53494: PUSH
53495: LD_INT 3
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 2
53504: NEG
53505: PUSH
53506: LD_INT 1
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: LD_INT 3
53515: NEG
53516: PUSH
53517: LD_INT 1
53519: NEG
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: LIST
53532: LIST
53533: LIST
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: LIST
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: LIST
53544: LIST
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53550: LD_ADDR_VAR 0 35
53554: PUSH
53555: LD_INT 0
53557: PUSH
53558: LD_INT 0
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 0
53567: PUSH
53568: LD_INT 1
53570: NEG
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 1
53578: PUSH
53579: LD_INT 0
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: LD_INT 1
53588: PUSH
53589: LD_INT 1
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 0
53598: PUSH
53599: LD_INT 1
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 1
53608: NEG
53609: PUSH
53610: LD_INT 0
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 1
53619: NEG
53620: PUSH
53621: LD_INT 1
53623: NEG
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 2
53631: PUSH
53632: LD_INT 1
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: PUSH
53639: LD_INT 2
53641: NEG
53642: PUSH
53643: LD_INT 1
53645: NEG
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53662: LD_ADDR_VAR 0 36
53666: PUSH
53667: LD_INT 0
53669: PUSH
53670: LD_INT 0
53672: PUSH
53673: EMPTY
53674: LIST
53675: LIST
53676: PUSH
53677: LD_INT 0
53679: PUSH
53680: LD_INT 1
53682: NEG
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 1
53690: PUSH
53691: LD_INT 0
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 1
53700: PUSH
53701: LD_INT 1
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 0
53710: PUSH
53711: LD_INT 1
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 1
53720: NEG
53721: PUSH
53722: LD_INT 0
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 1
53731: NEG
53732: PUSH
53733: LD_INT 1
53735: NEG
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: PUSH
53741: LD_INT 1
53743: NEG
53744: PUSH
53745: LD_INT 2
53747: NEG
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: PUSH
53753: LD_INT 1
53755: PUSH
53756: LD_INT 2
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53774: LD_ADDR_VAR 0 37
53778: PUSH
53779: LD_INT 0
53781: PUSH
53782: LD_INT 0
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 0
53791: PUSH
53792: LD_INT 1
53794: NEG
53795: PUSH
53796: EMPTY
53797: LIST
53798: LIST
53799: PUSH
53800: LD_INT 1
53802: PUSH
53803: LD_INT 0
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 1
53812: PUSH
53813: LD_INT 1
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 0
53822: PUSH
53823: LD_INT 1
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 1
53832: NEG
53833: PUSH
53834: LD_INT 0
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: PUSH
53841: LD_INT 1
53843: NEG
53844: PUSH
53845: LD_INT 1
53847: NEG
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: PUSH
53853: LD_INT 1
53855: PUSH
53856: LD_INT 1
53858: NEG
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 1
53866: NEG
53867: PUSH
53868: LD_INT 1
53870: PUSH
53871: EMPTY
53872: LIST
53873: LIST
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53886: LD_ADDR_VAR 0 38
53890: PUSH
53891: LD_INT 0
53893: PUSH
53894: LD_INT 0
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 0
53903: PUSH
53904: LD_INT 1
53906: NEG
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 1
53914: PUSH
53915: LD_INT 0
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 1
53924: PUSH
53925: LD_INT 1
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 0
53934: PUSH
53935: LD_INT 1
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: PUSH
53942: LD_INT 1
53944: NEG
53945: PUSH
53946: LD_INT 0
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 1
53955: NEG
53956: PUSH
53957: LD_INT 1
53959: NEG
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 2
53967: PUSH
53968: LD_INT 1
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 2
53977: NEG
53978: PUSH
53979: LD_INT 1
53981: NEG
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53998: LD_ADDR_VAR 0 39
54002: PUSH
54003: LD_INT 0
54005: PUSH
54006: LD_INT 0
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 0
54015: PUSH
54016: LD_INT 1
54018: NEG
54019: PUSH
54020: EMPTY
54021: LIST
54022: LIST
54023: PUSH
54024: LD_INT 1
54026: PUSH
54027: LD_INT 0
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 1
54036: PUSH
54037: LD_INT 1
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 0
54046: PUSH
54047: LD_INT 1
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 1
54056: NEG
54057: PUSH
54058: LD_INT 0
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: LD_INT 1
54067: NEG
54068: PUSH
54069: LD_INT 1
54071: NEG
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 1
54079: NEG
54080: PUSH
54081: LD_INT 2
54083: NEG
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 1
54091: PUSH
54092: LD_INT 2
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54110: LD_ADDR_VAR 0 40
54114: PUSH
54115: LD_INT 0
54117: PUSH
54118: LD_INT 0
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 0
54127: PUSH
54128: LD_INT 1
54130: NEG
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: PUSH
54136: LD_INT 1
54138: PUSH
54139: LD_INT 0
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: PUSH
54146: LD_INT 1
54148: PUSH
54149: LD_INT 1
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: LD_INT 0
54158: PUSH
54159: LD_INT 1
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PUSH
54166: LD_INT 1
54168: NEG
54169: PUSH
54170: LD_INT 0
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 1
54179: NEG
54180: PUSH
54181: LD_INT 1
54183: NEG
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 1
54191: PUSH
54192: LD_INT 1
54194: NEG
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: PUSH
54200: LD_INT 1
54202: NEG
54203: PUSH
54204: LD_INT 1
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: LIST
54215: LIST
54216: LIST
54217: LIST
54218: LIST
54219: LIST
54220: LIST
54221: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54222: LD_ADDR_VAR 0 41
54226: PUSH
54227: LD_INT 0
54229: PUSH
54230: LD_INT 0
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 0
54239: PUSH
54240: LD_INT 1
54242: NEG
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 1
54250: PUSH
54251: LD_INT 0
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 1
54260: PUSH
54261: LD_INT 1
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: LD_INT 0
54270: PUSH
54271: LD_INT 1
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: LD_INT 1
54280: NEG
54281: PUSH
54282: LD_INT 0
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 1
54291: NEG
54292: PUSH
54293: LD_INT 1
54295: NEG
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 1
54303: NEG
54304: PUSH
54305: LD_INT 2
54307: NEG
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 1
54315: PUSH
54316: LD_INT 1
54318: NEG
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 2
54326: PUSH
54327: LD_INT 0
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 2
54336: PUSH
54337: LD_INT 1
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: PUSH
54344: LD_INT 2
54346: PUSH
54347: LD_INT 2
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: LD_INT 1
54356: PUSH
54357: LD_INT 2
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 1
54366: NEG
54367: PUSH
54368: LD_INT 1
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 2
54377: NEG
54378: PUSH
54379: LD_INT 0
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: PUSH
54386: LD_INT 2
54388: NEG
54389: PUSH
54390: LD_INT 1
54392: NEG
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: LD_INT 2
54400: NEG
54401: PUSH
54402: LD_INT 2
54404: NEG
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 2
54412: NEG
54413: PUSH
54414: LD_INT 3
54416: NEG
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 2
54424: PUSH
54425: LD_INT 1
54427: NEG
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 3
54435: PUSH
54436: LD_INT 0
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 3
54445: PUSH
54446: LD_INT 1
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 3
54455: PUSH
54456: LD_INT 2
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 3
54465: PUSH
54466: LD_INT 3
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 2
54475: PUSH
54476: LD_INT 3
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 2
54485: NEG
54486: PUSH
54487: LD_INT 1
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_INT 3
54496: NEG
54497: PUSH
54498: LD_INT 0
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: PUSH
54505: LD_INT 3
54507: NEG
54508: PUSH
54509: LD_INT 1
54511: NEG
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 3
54519: NEG
54520: PUSH
54521: LD_INT 2
54523: NEG
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 3
54531: NEG
54532: PUSH
54533: LD_INT 3
54535: NEG
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: LIST
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54572: LD_ADDR_VAR 0 42
54576: PUSH
54577: LD_INT 0
54579: PUSH
54580: LD_INT 0
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: LD_INT 0
54589: PUSH
54590: LD_INT 1
54592: NEG
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 1
54600: PUSH
54601: LD_INT 0
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 1
54610: PUSH
54611: LD_INT 1
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 0
54620: PUSH
54621: LD_INT 1
54623: PUSH
54624: EMPTY
54625: LIST
54626: LIST
54627: PUSH
54628: LD_INT 1
54630: NEG
54631: PUSH
54632: LD_INT 0
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 1
54641: NEG
54642: PUSH
54643: LD_INT 1
54645: NEG
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: LD_INT 1
54653: NEG
54654: PUSH
54655: LD_INT 2
54657: NEG
54658: PUSH
54659: EMPTY
54660: LIST
54661: LIST
54662: PUSH
54663: LD_INT 0
54665: PUSH
54666: LD_INT 2
54668: NEG
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 1
54676: PUSH
54677: LD_INT 1
54679: NEG
54680: PUSH
54681: EMPTY
54682: LIST
54683: LIST
54684: PUSH
54685: LD_INT 2
54687: PUSH
54688: LD_INT 1
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: LD_INT 2
54697: PUSH
54698: LD_INT 2
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: PUSH
54705: LD_INT 1
54707: PUSH
54708: LD_INT 2
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: LD_INT 0
54717: PUSH
54718: LD_INT 2
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 1
54727: NEG
54728: PUSH
54729: LD_INT 1
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: LD_INT 2
54738: NEG
54739: PUSH
54740: LD_INT 1
54742: NEG
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 2
54750: NEG
54751: PUSH
54752: LD_INT 2
54754: NEG
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 2
54762: NEG
54763: PUSH
54764: LD_INT 3
54766: NEG
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PUSH
54772: LD_INT 1
54774: NEG
54775: PUSH
54776: LD_INT 3
54778: NEG
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 0
54786: PUSH
54787: LD_INT 3
54789: NEG
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 1
54797: PUSH
54798: LD_INT 2
54800: NEG
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 3
54808: PUSH
54809: LD_INT 2
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: LD_INT 3
54818: PUSH
54819: LD_INT 3
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 2
54828: PUSH
54829: LD_INT 3
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 1
54838: PUSH
54839: LD_INT 3
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 0
54848: PUSH
54849: LD_INT 3
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 1
54858: NEG
54859: PUSH
54860: LD_INT 2
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 3
54869: NEG
54870: PUSH
54871: LD_INT 2
54873: NEG
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: LD_INT 3
54881: NEG
54882: PUSH
54883: LD_INT 3
54885: NEG
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54922: LD_ADDR_VAR 0 43
54926: PUSH
54927: LD_INT 0
54929: PUSH
54930: LD_INT 0
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 0
54939: PUSH
54940: LD_INT 1
54942: NEG
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 1
54950: PUSH
54951: LD_INT 0
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 1
54960: PUSH
54961: LD_INT 1
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 0
54970: PUSH
54971: LD_INT 1
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 1
54980: NEG
54981: PUSH
54982: LD_INT 0
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: PUSH
54989: LD_INT 1
54991: NEG
54992: PUSH
54993: LD_INT 1
54995: NEG
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: LD_INT 1
55003: NEG
55004: PUSH
55005: LD_INT 2
55007: NEG
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 0
55015: PUSH
55016: LD_INT 2
55018: NEG
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 1
55026: PUSH
55027: LD_INT 1
55029: NEG
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: LD_INT 2
55037: PUSH
55038: LD_INT 0
55040: PUSH
55041: EMPTY
55042: LIST
55043: LIST
55044: PUSH
55045: LD_INT 2
55047: PUSH
55048: LD_INT 1
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 1
55057: PUSH
55058: LD_INT 2
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 0
55067: PUSH
55068: LD_INT 2
55070: PUSH
55071: EMPTY
55072: LIST
55073: LIST
55074: PUSH
55075: LD_INT 1
55077: NEG
55078: PUSH
55079: LD_INT 1
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 2
55088: NEG
55089: PUSH
55090: LD_INT 0
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 2
55099: NEG
55100: PUSH
55101: LD_INT 1
55103: NEG
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: LD_INT 1
55111: NEG
55112: PUSH
55113: LD_INT 3
55115: NEG
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 0
55123: PUSH
55124: LD_INT 3
55126: NEG
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 1
55134: PUSH
55135: LD_INT 2
55137: NEG
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 2
55145: PUSH
55146: LD_INT 1
55148: NEG
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 3
55156: PUSH
55157: LD_INT 0
55159: PUSH
55160: EMPTY
55161: LIST
55162: LIST
55163: PUSH
55164: LD_INT 3
55166: PUSH
55167: LD_INT 1
55169: PUSH
55170: EMPTY
55171: LIST
55172: LIST
55173: PUSH
55174: LD_INT 1
55176: PUSH
55177: LD_INT 3
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 0
55186: PUSH
55187: LD_INT 3
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: PUSH
55194: LD_INT 1
55196: NEG
55197: PUSH
55198: LD_INT 2
55200: PUSH
55201: EMPTY
55202: LIST
55203: LIST
55204: PUSH
55205: LD_INT 2
55207: NEG
55208: PUSH
55209: LD_INT 1
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 3
55218: NEG
55219: PUSH
55220: LD_INT 0
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 3
55229: NEG
55230: PUSH
55231: LD_INT 1
55233: NEG
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55270: LD_ADDR_VAR 0 44
55274: PUSH
55275: LD_INT 0
55277: PUSH
55278: LD_INT 0
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 0
55287: PUSH
55288: LD_INT 1
55290: NEG
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_INT 1
55298: PUSH
55299: LD_INT 0
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 1
55308: PUSH
55309: LD_INT 1
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 0
55318: PUSH
55319: LD_INT 1
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 1
55328: NEG
55329: PUSH
55330: LD_INT 0
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_INT 1
55339: NEG
55340: PUSH
55341: LD_INT 1
55343: NEG
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PUSH
55349: LD_INT 1
55351: NEG
55352: PUSH
55353: LD_INT 2
55355: NEG
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: PUSH
55361: LD_INT 1
55363: PUSH
55364: LD_INT 1
55366: NEG
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 2
55374: PUSH
55375: LD_INT 0
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 2
55384: PUSH
55385: LD_INT 1
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: PUSH
55392: LD_INT 2
55394: PUSH
55395: LD_INT 2
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: PUSH
55402: LD_INT 1
55404: PUSH
55405: LD_INT 2
55407: PUSH
55408: EMPTY
55409: LIST
55410: LIST
55411: PUSH
55412: LD_INT 1
55414: NEG
55415: PUSH
55416: LD_INT 1
55418: PUSH
55419: EMPTY
55420: LIST
55421: LIST
55422: PUSH
55423: LD_INT 2
55425: NEG
55426: PUSH
55427: LD_INT 0
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 2
55436: NEG
55437: PUSH
55438: LD_INT 1
55440: NEG
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 2
55448: NEG
55449: PUSH
55450: LD_INT 2
55452: NEG
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 2
55460: NEG
55461: PUSH
55462: LD_INT 3
55464: NEG
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 2
55472: PUSH
55473: LD_INT 1
55475: NEG
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 3
55483: PUSH
55484: LD_INT 0
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 3
55493: PUSH
55494: LD_INT 1
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: PUSH
55501: LD_INT 3
55503: PUSH
55504: LD_INT 2
55506: PUSH
55507: EMPTY
55508: LIST
55509: LIST
55510: PUSH
55511: LD_INT 3
55513: PUSH
55514: LD_INT 3
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 2
55523: PUSH
55524: LD_INT 3
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 2
55533: NEG
55534: PUSH
55535: LD_INT 1
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 3
55544: NEG
55545: PUSH
55546: LD_INT 0
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 3
55555: NEG
55556: PUSH
55557: LD_INT 1
55559: NEG
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 3
55567: NEG
55568: PUSH
55569: LD_INT 2
55571: NEG
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: PUSH
55577: LD_INT 3
55579: NEG
55580: PUSH
55581: LD_INT 3
55583: NEG
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55620: LD_ADDR_VAR 0 45
55624: PUSH
55625: LD_INT 0
55627: PUSH
55628: LD_INT 0
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 0
55637: PUSH
55638: LD_INT 1
55640: NEG
55641: PUSH
55642: EMPTY
55643: LIST
55644: LIST
55645: PUSH
55646: LD_INT 1
55648: PUSH
55649: LD_INT 0
55651: PUSH
55652: EMPTY
55653: LIST
55654: LIST
55655: PUSH
55656: LD_INT 1
55658: PUSH
55659: LD_INT 1
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: PUSH
55666: LD_INT 0
55668: PUSH
55669: LD_INT 1
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 1
55678: NEG
55679: PUSH
55680: LD_INT 0
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 1
55689: NEG
55690: PUSH
55691: LD_INT 1
55693: NEG
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: PUSH
55699: LD_INT 1
55701: NEG
55702: PUSH
55703: LD_INT 2
55705: NEG
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 0
55713: PUSH
55714: LD_INT 2
55716: NEG
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: LD_INT 1
55724: PUSH
55725: LD_INT 1
55727: NEG
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: PUSH
55733: LD_INT 2
55735: PUSH
55736: LD_INT 1
55738: PUSH
55739: EMPTY
55740: LIST
55741: LIST
55742: PUSH
55743: LD_INT 2
55745: PUSH
55746: LD_INT 2
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 1
55755: PUSH
55756: LD_INT 2
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 0
55765: PUSH
55766: LD_INT 2
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 1
55775: NEG
55776: PUSH
55777: LD_INT 1
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: LD_INT 2
55786: NEG
55787: PUSH
55788: LD_INT 1
55790: NEG
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 2
55798: NEG
55799: PUSH
55800: LD_INT 2
55802: NEG
55803: PUSH
55804: EMPTY
55805: LIST
55806: LIST
55807: PUSH
55808: LD_INT 2
55810: NEG
55811: PUSH
55812: LD_INT 3
55814: NEG
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 1
55822: NEG
55823: PUSH
55824: LD_INT 3
55826: NEG
55827: PUSH
55828: EMPTY
55829: LIST
55830: LIST
55831: PUSH
55832: LD_INT 0
55834: PUSH
55835: LD_INT 3
55837: NEG
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: LD_INT 1
55845: PUSH
55846: LD_INT 2
55848: NEG
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 3
55856: PUSH
55857: LD_INT 2
55859: PUSH
55860: EMPTY
55861: LIST
55862: LIST
55863: PUSH
55864: LD_INT 3
55866: PUSH
55867: LD_INT 3
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: PUSH
55874: LD_INT 2
55876: PUSH
55877: LD_INT 3
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PUSH
55884: LD_INT 1
55886: PUSH
55887: LD_INT 3
55889: PUSH
55890: EMPTY
55891: LIST
55892: LIST
55893: PUSH
55894: LD_INT 0
55896: PUSH
55897: LD_INT 3
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 1
55906: NEG
55907: PUSH
55908: LD_INT 2
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 3
55917: NEG
55918: PUSH
55919: LD_INT 2
55921: NEG
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 3
55929: NEG
55930: PUSH
55931: LD_INT 3
55933: NEG
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: LIST
55957: LIST
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55970: LD_ADDR_VAR 0 46
55974: PUSH
55975: LD_INT 0
55977: PUSH
55978: LD_INT 0
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 0
55987: PUSH
55988: LD_INT 1
55990: NEG
55991: PUSH
55992: EMPTY
55993: LIST
55994: LIST
55995: PUSH
55996: LD_INT 1
55998: PUSH
55999: LD_INT 0
56001: PUSH
56002: EMPTY
56003: LIST
56004: LIST
56005: PUSH
56006: LD_INT 1
56008: PUSH
56009: LD_INT 1
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 0
56018: PUSH
56019: LD_INT 1
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: LD_INT 1
56028: NEG
56029: PUSH
56030: LD_INT 0
56032: PUSH
56033: EMPTY
56034: LIST
56035: LIST
56036: PUSH
56037: LD_INT 1
56039: NEG
56040: PUSH
56041: LD_INT 1
56043: NEG
56044: PUSH
56045: EMPTY
56046: LIST
56047: LIST
56048: PUSH
56049: LD_INT 1
56051: NEG
56052: PUSH
56053: LD_INT 2
56055: NEG
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 0
56063: PUSH
56064: LD_INT 2
56066: NEG
56067: PUSH
56068: EMPTY
56069: LIST
56070: LIST
56071: PUSH
56072: LD_INT 1
56074: PUSH
56075: LD_INT 1
56077: NEG
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 2
56085: PUSH
56086: LD_INT 0
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PUSH
56093: LD_INT 2
56095: PUSH
56096: LD_INT 1
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: LD_INT 1
56105: PUSH
56106: LD_INT 2
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: PUSH
56113: LD_INT 0
56115: PUSH
56116: LD_INT 2
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 1
56125: NEG
56126: PUSH
56127: LD_INT 1
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 2
56136: NEG
56137: PUSH
56138: LD_INT 0
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PUSH
56145: LD_INT 2
56147: NEG
56148: PUSH
56149: LD_INT 1
56151: NEG
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: PUSH
56157: LD_INT 1
56159: NEG
56160: PUSH
56161: LD_INT 3
56163: NEG
56164: PUSH
56165: EMPTY
56166: LIST
56167: LIST
56168: PUSH
56169: LD_INT 0
56171: PUSH
56172: LD_INT 3
56174: NEG
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: LD_INT 1
56182: PUSH
56183: LD_INT 2
56185: NEG
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 2
56193: PUSH
56194: LD_INT 1
56196: NEG
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 3
56204: PUSH
56205: LD_INT 0
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 3
56214: PUSH
56215: LD_INT 1
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 1
56224: PUSH
56225: LD_INT 3
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 0
56234: PUSH
56235: LD_INT 3
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 1
56244: NEG
56245: PUSH
56246: LD_INT 2
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 2
56255: NEG
56256: PUSH
56257: LD_INT 1
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 3
56266: NEG
56267: PUSH
56268: LD_INT 0
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 3
56277: NEG
56278: PUSH
56279: LD_INT 1
56281: NEG
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: LIST
56316: LIST
56317: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56318: LD_ADDR_VAR 0 47
56322: PUSH
56323: LD_INT 0
56325: PUSH
56326: LD_INT 0
56328: PUSH
56329: EMPTY
56330: LIST
56331: LIST
56332: PUSH
56333: LD_INT 0
56335: PUSH
56336: LD_INT 1
56338: NEG
56339: PUSH
56340: EMPTY
56341: LIST
56342: LIST
56343: PUSH
56344: LD_INT 1
56346: PUSH
56347: LD_INT 0
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: LD_INT 1
56356: PUSH
56357: LD_INT 1
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: PUSH
56364: LD_INT 0
56366: PUSH
56367: LD_INT 1
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: PUSH
56374: LD_INT 1
56376: NEG
56377: PUSH
56378: LD_INT 0
56380: PUSH
56381: EMPTY
56382: LIST
56383: LIST
56384: PUSH
56385: LD_INT 1
56387: NEG
56388: PUSH
56389: LD_INT 1
56391: NEG
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 1
56399: NEG
56400: PUSH
56401: LD_INT 2
56403: NEG
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 0
56411: PUSH
56412: LD_INT 2
56414: NEG
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 1
56422: PUSH
56423: LD_INT 1
56425: NEG
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 2
56433: NEG
56434: PUSH
56435: LD_INT 1
56437: NEG
56438: PUSH
56439: EMPTY
56440: LIST
56441: LIST
56442: PUSH
56443: LD_INT 2
56445: NEG
56446: PUSH
56447: LD_INT 2
56449: NEG
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: LIST
56459: LIST
56460: LIST
56461: LIST
56462: LIST
56463: LIST
56464: LIST
56465: LIST
56466: LIST
56467: LIST
56468: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56469: LD_ADDR_VAR 0 48
56473: PUSH
56474: LD_INT 0
56476: PUSH
56477: LD_INT 0
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 0
56486: PUSH
56487: LD_INT 1
56489: NEG
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: PUSH
56495: LD_INT 1
56497: PUSH
56498: LD_INT 0
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: LD_INT 1
56507: PUSH
56508: LD_INT 1
56510: PUSH
56511: EMPTY
56512: LIST
56513: LIST
56514: PUSH
56515: LD_INT 0
56517: PUSH
56518: LD_INT 1
56520: PUSH
56521: EMPTY
56522: LIST
56523: LIST
56524: PUSH
56525: LD_INT 1
56527: NEG
56528: PUSH
56529: LD_INT 0
56531: PUSH
56532: EMPTY
56533: LIST
56534: LIST
56535: PUSH
56536: LD_INT 1
56538: NEG
56539: PUSH
56540: LD_INT 1
56542: NEG
56543: PUSH
56544: EMPTY
56545: LIST
56546: LIST
56547: PUSH
56548: LD_INT 1
56550: NEG
56551: PUSH
56552: LD_INT 2
56554: NEG
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 0
56562: PUSH
56563: LD_INT 2
56565: NEG
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: PUSH
56571: LD_INT 1
56573: PUSH
56574: LD_INT 1
56576: NEG
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: PUSH
56582: LD_INT 2
56584: PUSH
56585: LD_INT 0
56587: PUSH
56588: EMPTY
56589: LIST
56590: LIST
56591: PUSH
56592: LD_INT 2
56594: PUSH
56595: LD_INT 1
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: LIST
56613: LIST
56614: LIST
56615: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56616: LD_ADDR_VAR 0 49
56620: PUSH
56621: LD_INT 0
56623: PUSH
56624: LD_INT 0
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 0
56633: PUSH
56634: LD_INT 1
56636: NEG
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 1
56644: PUSH
56645: LD_INT 0
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 1
56654: PUSH
56655: LD_INT 1
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 0
56664: PUSH
56665: LD_INT 1
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 1
56674: NEG
56675: PUSH
56676: LD_INT 0
56678: PUSH
56679: EMPTY
56680: LIST
56681: LIST
56682: PUSH
56683: LD_INT 1
56685: NEG
56686: PUSH
56687: LD_INT 1
56689: NEG
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 1
56697: PUSH
56698: LD_INT 1
56700: NEG
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: PUSH
56706: LD_INT 2
56708: PUSH
56709: LD_INT 0
56711: PUSH
56712: EMPTY
56713: LIST
56714: LIST
56715: PUSH
56716: LD_INT 2
56718: PUSH
56719: LD_INT 1
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 2
56728: PUSH
56729: LD_INT 2
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: PUSH
56736: LD_INT 1
56738: PUSH
56739: LD_INT 2
56741: PUSH
56742: EMPTY
56743: LIST
56744: LIST
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: LIST
56759: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56760: LD_ADDR_VAR 0 50
56764: PUSH
56765: LD_INT 0
56767: PUSH
56768: LD_INT 0
56770: PUSH
56771: EMPTY
56772: LIST
56773: LIST
56774: PUSH
56775: LD_INT 0
56777: PUSH
56778: LD_INT 1
56780: NEG
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: PUSH
56786: LD_INT 1
56788: PUSH
56789: LD_INT 0
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: LD_INT 1
56798: PUSH
56799: LD_INT 1
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 0
56808: PUSH
56809: LD_INT 1
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 1
56818: NEG
56819: PUSH
56820: LD_INT 0
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 1
56829: NEG
56830: PUSH
56831: LD_INT 1
56833: NEG
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: LD_INT 2
56841: PUSH
56842: LD_INT 1
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 2
56851: PUSH
56852: LD_INT 2
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 1
56861: PUSH
56862: LD_INT 2
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 0
56871: PUSH
56872: LD_INT 2
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 1
56881: NEG
56882: PUSH
56883: LD_INT 1
56885: PUSH
56886: EMPTY
56887: LIST
56888: LIST
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: LIST
56899: LIST
56900: LIST
56901: LIST
56902: LIST
56903: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56904: LD_ADDR_VAR 0 51
56908: PUSH
56909: LD_INT 0
56911: PUSH
56912: LD_INT 0
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 0
56921: PUSH
56922: LD_INT 1
56924: NEG
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: LD_INT 1
56932: PUSH
56933: LD_INT 0
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: PUSH
56940: LD_INT 1
56942: PUSH
56943: LD_INT 1
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 0
56952: PUSH
56953: LD_INT 1
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: LD_INT 1
56962: NEG
56963: PUSH
56964: LD_INT 0
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PUSH
56971: LD_INT 1
56973: NEG
56974: PUSH
56975: LD_INT 1
56977: NEG
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: PUSH
56983: LD_INT 1
56985: PUSH
56986: LD_INT 2
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 0
56995: PUSH
56996: LD_INT 2
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 1
57005: NEG
57006: PUSH
57007: LD_INT 1
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: LD_INT 2
57016: NEG
57017: PUSH
57018: LD_INT 0
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 2
57027: NEG
57028: PUSH
57029: LD_INT 1
57031: NEG
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: LIST
57044: LIST
57045: LIST
57046: LIST
57047: LIST
57048: LIST
57049: LIST
57050: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57051: LD_ADDR_VAR 0 52
57055: PUSH
57056: LD_INT 0
57058: PUSH
57059: LD_INT 0
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: PUSH
57066: LD_INT 0
57068: PUSH
57069: LD_INT 1
57071: NEG
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 1
57079: PUSH
57080: LD_INT 0
57082: PUSH
57083: EMPTY
57084: LIST
57085: LIST
57086: PUSH
57087: LD_INT 1
57089: PUSH
57090: LD_INT 1
57092: PUSH
57093: EMPTY
57094: LIST
57095: LIST
57096: PUSH
57097: LD_INT 0
57099: PUSH
57100: LD_INT 1
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: LD_INT 1
57109: NEG
57110: PUSH
57111: LD_INT 0
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 1
57120: NEG
57121: PUSH
57122: LD_INT 1
57124: NEG
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 1
57132: NEG
57133: PUSH
57134: LD_INT 2
57136: NEG
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: LD_INT 1
57144: NEG
57145: PUSH
57146: LD_INT 1
57148: PUSH
57149: EMPTY
57150: LIST
57151: LIST
57152: PUSH
57153: LD_INT 2
57155: NEG
57156: PUSH
57157: LD_INT 0
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 2
57166: NEG
57167: PUSH
57168: LD_INT 1
57170: NEG
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 2
57178: NEG
57179: PUSH
57180: LD_INT 2
57182: NEG
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: EMPTY
57189: LIST
57190: LIST
57191: LIST
57192: LIST
57193: LIST
57194: LIST
57195: LIST
57196: LIST
57197: LIST
57198: LIST
57199: LIST
57200: LIST
57201: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57202: LD_ADDR_VAR 0 53
57206: PUSH
57207: LD_INT 0
57209: PUSH
57210: LD_INT 0
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 0
57219: PUSH
57220: LD_INT 1
57222: NEG
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 1
57230: PUSH
57231: LD_INT 0
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 1
57240: PUSH
57241: LD_INT 1
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 0
57250: PUSH
57251: LD_INT 1
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 1
57260: NEG
57261: PUSH
57262: LD_INT 0
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: PUSH
57269: LD_INT 1
57271: NEG
57272: PUSH
57273: LD_INT 1
57275: NEG
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 1
57283: NEG
57284: PUSH
57285: LD_INT 2
57287: NEG
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: LD_INT 0
57295: PUSH
57296: LD_INT 2
57298: NEG
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 1
57306: PUSH
57307: LD_INT 1
57309: NEG
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: LD_INT 2
57317: PUSH
57318: LD_INT 0
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: LD_INT 2
57327: PUSH
57328: LD_INT 1
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 2
57337: PUSH
57338: LD_INT 2
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: LD_INT 1
57347: PUSH
57348: LD_INT 2
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: LD_INT 0
57357: PUSH
57358: LD_INT 2
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: LD_INT 1
57367: NEG
57368: PUSH
57369: LD_INT 1
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 2
57378: NEG
57379: PUSH
57380: LD_INT 0
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_INT 2
57389: NEG
57390: PUSH
57391: LD_INT 1
57393: NEG
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: LD_INT 2
57401: NEG
57402: PUSH
57403: LD_INT 2
57405: NEG
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: LIST
57415: LIST
57416: LIST
57417: LIST
57418: LIST
57419: LIST
57420: LIST
57421: LIST
57422: LIST
57423: LIST
57424: LIST
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57432: LD_ADDR_VAR 0 54
57436: PUSH
57437: LD_INT 0
57439: PUSH
57440: LD_INT 0
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 0
57449: PUSH
57450: LD_INT 1
57452: NEG
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 1
57460: PUSH
57461: LD_INT 0
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 1
57470: PUSH
57471: LD_INT 1
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 0
57480: PUSH
57481: LD_INT 1
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: LD_INT 1
57490: NEG
57491: PUSH
57492: LD_INT 0
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: LD_INT 1
57501: NEG
57502: PUSH
57503: LD_INT 1
57505: NEG
57506: PUSH
57507: EMPTY
57508: LIST
57509: LIST
57510: PUSH
57511: LD_INT 1
57513: NEG
57514: PUSH
57515: LD_INT 2
57517: NEG
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PUSH
57523: LD_INT 0
57525: PUSH
57526: LD_INT 2
57528: NEG
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 1
57536: PUSH
57537: LD_INT 1
57539: NEG
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 2
57547: PUSH
57548: LD_INT 0
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 2
57557: PUSH
57558: LD_INT 1
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 2
57567: PUSH
57568: LD_INT 2
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 1
57577: PUSH
57578: LD_INT 2
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 0
57587: PUSH
57588: LD_INT 2
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 1
57597: NEG
57598: PUSH
57599: LD_INT 1
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 2
57608: NEG
57609: PUSH
57610: LD_INT 0
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: LD_INT 2
57619: NEG
57620: PUSH
57621: LD_INT 1
57623: NEG
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 2
57631: NEG
57632: PUSH
57633: LD_INT 2
57635: NEG
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57662: LD_ADDR_VAR 0 55
57666: PUSH
57667: LD_INT 0
57669: PUSH
57670: LD_INT 0
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: LD_INT 0
57679: PUSH
57680: LD_INT 1
57682: NEG
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: LD_INT 1
57690: PUSH
57691: LD_INT 0
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 1
57700: PUSH
57701: LD_INT 1
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 0
57710: PUSH
57711: LD_INT 1
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: LD_INT 1
57720: NEG
57721: PUSH
57722: LD_INT 0
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: LD_INT 1
57731: NEG
57732: PUSH
57733: LD_INT 1
57735: NEG
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: LD_INT 1
57743: NEG
57744: PUSH
57745: LD_INT 2
57747: NEG
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: LD_INT 0
57755: PUSH
57756: LD_INT 2
57758: NEG
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 1
57766: PUSH
57767: LD_INT 1
57769: NEG
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PUSH
57775: LD_INT 2
57777: PUSH
57778: LD_INT 0
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 2
57787: PUSH
57788: LD_INT 1
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: LD_INT 2
57797: PUSH
57798: LD_INT 2
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 1
57807: PUSH
57808: LD_INT 2
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 0
57817: PUSH
57818: LD_INT 2
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 1
57827: NEG
57828: PUSH
57829: LD_INT 1
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 2
57838: NEG
57839: PUSH
57840: LD_INT 0
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: PUSH
57847: LD_INT 2
57849: NEG
57850: PUSH
57851: LD_INT 1
57853: NEG
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: LD_INT 2
57861: NEG
57862: PUSH
57863: LD_INT 2
57865: NEG
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: LIST
57891: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57892: LD_ADDR_VAR 0 56
57896: PUSH
57897: LD_INT 0
57899: PUSH
57900: LD_INT 0
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 0
57909: PUSH
57910: LD_INT 1
57912: NEG
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: LD_INT 1
57920: PUSH
57921: LD_INT 0
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 1
57930: PUSH
57931: LD_INT 1
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: LD_INT 0
57940: PUSH
57941: LD_INT 1
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: LD_INT 1
57950: NEG
57951: PUSH
57952: LD_INT 0
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 1
57961: NEG
57962: PUSH
57963: LD_INT 1
57965: NEG
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: LD_INT 1
57973: NEG
57974: PUSH
57975: LD_INT 2
57977: NEG
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: LD_INT 0
57985: PUSH
57986: LD_INT 2
57988: NEG
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 1
57996: PUSH
57997: LD_INT 1
57999: NEG
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: LD_INT 2
58007: PUSH
58008: LD_INT 0
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 2
58017: PUSH
58018: LD_INT 1
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 2
58027: PUSH
58028: LD_INT 2
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 1
58037: PUSH
58038: LD_INT 2
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 0
58047: PUSH
58048: LD_INT 2
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 1
58057: NEG
58058: PUSH
58059: LD_INT 1
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 2
58068: NEG
58069: PUSH
58070: LD_INT 0
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 2
58079: NEG
58080: PUSH
58081: LD_INT 1
58083: NEG
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 2
58091: NEG
58092: PUSH
58093: LD_INT 2
58095: NEG
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: LIST
58115: LIST
58116: LIST
58117: LIST
58118: LIST
58119: LIST
58120: LIST
58121: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58122: LD_ADDR_VAR 0 57
58126: PUSH
58127: LD_INT 0
58129: PUSH
58130: LD_INT 0
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: LD_INT 0
58139: PUSH
58140: LD_INT 1
58142: NEG
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 1
58150: PUSH
58151: LD_INT 0
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 1
58160: PUSH
58161: LD_INT 1
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 0
58170: PUSH
58171: LD_INT 1
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: LD_INT 1
58180: NEG
58181: PUSH
58182: LD_INT 0
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 1
58191: NEG
58192: PUSH
58193: LD_INT 1
58195: NEG
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: PUSH
58201: LD_INT 1
58203: NEG
58204: PUSH
58205: LD_INT 2
58207: NEG
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: LD_INT 0
58215: PUSH
58216: LD_INT 2
58218: NEG
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 1
58226: PUSH
58227: LD_INT 1
58229: NEG
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 2
58237: PUSH
58238: LD_INT 0
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PUSH
58245: LD_INT 2
58247: PUSH
58248: LD_INT 1
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: LD_INT 2
58257: PUSH
58258: LD_INT 2
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: LD_INT 1
58267: PUSH
58268: LD_INT 2
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 0
58277: PUSH
58278: LD_INT 2
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: LD_INT 1
58287: NEG
58288: PUSH
58289: LD_INT 1
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 2
58298: NEG
58299: PUSH
58300: LD_INT 0
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 2
58309: NEG
58310: PUSH
58311: LD_INT 1
58313: NEG
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 2
58321: NEG
58322: PUSH
58323: LD_INT 2
58325: NEG
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: LIST
58335: LIST
58336: LIST
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: LIST
58346: LIST
58347: LIST
58348: LIST
58349: LIST
58350: LIST
58351: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58352: LD_ADDR_VAR 0 58
58356: PUSH
58357: LD_INT 0
58359: PUSH
58360: LD_INT 0
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: LD_INT 0
58369: PUSH
58370: LD_INT 1
58372: NEG
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 1
58380: PUSH
58381: LD_INT 0
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 1
58390: PUSH
58391: LD_INT 1
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 0
58400: PUSH
58401: LD_INT 1
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: LD_INT 1
58410: NEG
58411: PUSH
58412: LD_INT 0
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 1
58421: NEG
58422: PUSH
58423: LD_INT 1
58425: NEG
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: PUSH
58431: LD_INT 1
58433: NEG
58434: PUSH
58435: LD_INT 2
58437: NEG
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: LD_INT 0
58445: PUSH
58446: LD_INT 2
58448: NEG
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_INT 1
58456: PUSH
58457: LD_INT 1
58459: NEG
58460: PUSH
58461: EMPTY
58462: LIST
58463: LIST
58464: PUSH
58465: LD_INT 2
58467: PUSH
58468: LD_INT 0
58470: PUSH
58471: EMPTY
58472: LIST
58473: LIST
58474: PUSH
58475: LD_INT 2
58477: PUSH
58478: LD_INT 1
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: LD_INT 2
58487: PUSH
58488: LD_INT 2
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: PUSH
58495: LD_INT 1
58497: PUSH
58498: LD_INT 2
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: PUSH
58505: LD_INT 0
58507: PUSH
58508: LD_INT 2
58510: PUSH
58511: EMPTY
58512: LIST
58513: LIST
58514: PUSH
58515: LD_INT 1
58517: NEG
58518: PUSH
58519: LD_INT 1
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: LD_INT 2
58528: NEG
58529: PUSH
58530: LD_INT 0
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 2
58539: NEG
58540: PUSH
58541: LD_INT 1
58543: NEG
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: LD_INT 2
58551: NEG
58552: PUSH
58553: LD_INT 2
58555: NEG
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: PUSH
58561: EMPTY
58562: LIST
58563: LIST
58564: LIST
58565: LIST
58566: LIST
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: LIST
58572: LIST
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: LIST
58581: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58582: LD_ADDR_VAR 0 59
58586: PUSH
58587: LD_INT 0
58589: PUSH
58590: LD_INT 0
58592: PUSH
58593: EMPTY
58594: LIST
58595: LIST
58596: PUSH
58597: LD_INT 0
58599: PUSH
58600: LD_INT 1
58602: NEG
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: PUSH
58608: LD_INT 1
58610: PUSH
58611: LD_INT 0
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 1
58620: PUSH
58621: LD_INT 1
58623: PUSH
58624: EMPTY
58625: LIST
58626: LIST
58627: PUSH
58628: LD_INT 0
58630: PUSH
58631: LD_INT 1
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: LD_INT 1
58640: NEG
58641: PUSH
58642: LD_INT 0
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 1
58651: NEG
58652: PUSH
58653: LD_INT 1
58655: NEG
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: LIST
58665: LIST
58666: LIST
58667: LIST
58668: LIST
58669: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58670: LD_ADDR_VAR 0 60
58674: PUSH
58675: LD_INT 0
58677: PUSH
58678: LD_INT 0
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 0
58687: PUSH
58688: LD_INT 1
58690: NEG
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 1
58698: PUSH
58699: LD_INT 0
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 1
58708: PUSH
58709: LD_INT 1
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 0
58718: PUSH
58719: LD_INT 1
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: LD_INT 1
58728: NEG
58729: PUSH
58730: LD_INT 0
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: LD_INT 1
58739: NEG
58740: PUSH
58741: LD_INT 1
58743: NEG
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: LIST
58753: LIST
58754: LIST
58755: LIST
58756: LIST
58757: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58758: LD_ADDR_VAR 0 61
58762: PUSH
58763: LD_INT 0
58765: PUSH
58766: LD_INT 0
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_INT 0
58775: PUSH
58776: LD_INT 1
58778: NEG
58779: PUSH
58780: EMPTY
58781: LIST
58782: LIST
58783: PUSH
58784: LD_INT 1
58786: PUSH
58787: LD_INT 0
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 1
58796: PUSH
58797: LD_INT 1
58799: PUSH
58800: EMPTY
58801: LIST
58802: LIST
58803: PUSH
58804: LD_INT 0
58806: PUSH
58807: LD_INT 1
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 1
58816: NEG
58817: PUSH
58818: LD_INT 0
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 1
58827: NEG
58828: PUSH
58829: LD_INT 1
58831: NEG
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: EMPTY
58838: LIST
58839: LIST
58840: LIST
58841: LIST
58842: LIST
58843: LIST
58844: LIST
58845: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58846: LD_ADDR_VAR 0 62
58850: PUSH
58851: LD_INT 0
58853: PUSH
58854: LD_INT 0
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: PUSH
58861: LD_INT 0
58863: PUSH
58864: LD_INT 1
58866: NEG
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 1
58874: PUSH
58875: LD_INT 0
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: PUSH
58882: LD_INT 1
58884: PUSH
58885: LD_INT 1
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: PUSH
58892: LD_INT 0
58894: PUSH
58895: LD_INT 1
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 1
58904: NEG
58905: PUSH
58906: LD_INT 0
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 1
58915: NEG
58916: PUSH
58917: LD_INT 1
58919: NEG
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: LIST
58933: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58934: LD_ADDR_VAR 0 63
58938: PUSH
58939: LD_INT 0
58941: PUSH
58942: LD_INT 0
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 0
58951: PUSH
58952: LD_INT 1
58954: NEG
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: PUSH
58960: LD_INT 1
58962: PUSH
58963: LD_INT 0
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: PUSH
58970: LD_INT 1
58972: PUSH
58973: LD_INT 1
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: LD_INT 0
58982: PUSH
58983: LD_INT 1
58985: PUSH
58986: EMPTY
58987: LIST
58988: LIST
58989: PUSH
58990: LD_INT 1
58992: NEG
58993: PUSH
58994: LD_INT 0
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PUSH
59001: LD_INT 1
59003: NEG
59004: PUSH
59005: LD_INT 1
59007: NEG
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: LIST
59017: LIST
59018: LIST
59019: LIST
59020: LIST
59021: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59022: LD_ADDR_VAR 0 64
59026: PUSH
59027: LD_INT 0
59029: PUSH
59030: LD_INT 0
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: LD_INT 0
59039: PUSH
59040: LD_INT 1
59042: NEG
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 1
59050: PUSH
59051: LD_INT 0
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 1
59060: PUSH
59061: LD_INT 1
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: LD_INT 0
59070: PUSH
59071: LD_INT 1
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 1
59080: NEG
59081: PUSH
59082: LD_INT 0
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: LD_INT 1
59091: NEG
59092: PUSH
59093: LD_INT 1
59095: NEG
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: LIST
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: ST_TO_ADDR
// end ; 1 :
59110: GO 65007
59112: LD_INT 1
59114: DOUBLE
59115: EQUAL
59116: IFTRUE 59120
59118: GO 61743
59120: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59121: LD_ADDR_VAR 0 11
59125: PUSH
59126: LD_INT 1
59128: NEG
59129: PUSH
59130: LD_INT 3
59132: NEG
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 0
59140: PUSH
59141: LD_INT 3
59143: NEG
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: LD_INT 1
59151: PUSH
59152: LD_INT 2
59154: NEG
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: LIST
59164: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59165: LD_ADDR_VAR 0 12
59169: PUSH
59170: LD_INT 2
59172: PUSH
59173: LD_INT 1
59175: NEG
59176: PUSH
59177: EMPTY
59178: LIST
59179: LIST
59180: PUSH
59181: LD_INT 3
59183: PUSH
59184: LD_INT 0
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 3
59193: PUSH
59194: LD_INT 1
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: LIST
59205: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59206: LD_ADDR_VAR 0 13
59210: PUSH
59211: LD_INT 3
59213: PUSH
59214: LD_INT 2
59216: PUSH
59217: EMPTY
59218: LIST
59219: LIST
59220: PUSH
59221: LD_INT 3
59223: PUSH
59224: LD_INT 3
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: PUSH
59231: LD_INT 2
59233: PUSH
59234: LD_INT 3
59236: PUSH
59237: EMPTY
59238: LIST
59239: LIST
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: LIST
59245: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59246: LD_ADDR_VAR 0 14
59250: PUSH
59251: LD_INT 1
59253: PUSH
59254: LD_INT 3
59256: PUSH
59257: EMPTY
59258: LIST
59259: LIST
59260: PUSH
59261: LD_INT 0
59263: PUSH
59264: LD_INT 3
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 1
59273: NEG
59274: PUSH
59275: LD_INT 2
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: LIST
59286: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59287: LD_ADDR_VAR 0 15
59291: PUSH
59292: LD_INT 2
59294: NEG
59295: PUSH
59296: LD_INT 1
59298: PUSH
59299: EMPTY
59300: LIST
59301: LIST
59302: PUSH
59303: LD_INT 3
59305: NEG
59306: PUSH
59307: LD_INT 0
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: LD_INT 3
59316: NEG
59317: PUSH
59318: LD_INT 1
59320: NEG
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: PUSH
59326: EMPTY
59327: LIST
59328: LIST
59329: LIST
59330: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59331: LD_ADDR_VAR 0 16
59335: PUSH
59336: LD_INT 2
59338: NEG
59339: PUSH
59340: LD_INT 3
59342: NEG
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: PUSH
59348: LD_INT 3
59350: NEG
59351: PUSH
59352: LD_INT 2
59354: NEG
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: LD_INT 3
59362: NEG
59363: PUSH
59364: LD_INT 3
59366: NEG
59367: PUSH
59368: EMPTY
59369: LIST
59370: LIST
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: LIST
59376: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59377: LD_ADDR_VAR 0 17
59381: PUSH
59382: LD_INT 1
59384: NEG
59385: PUSH
59386: LD_INT 3
59388: NEG
59389: PUSH
59390: EMPTY
59391: LIST
59392: LIST
59393: PUSH
59394: LD_INT 0
59396: PUSH
59397: LD_INT 3
59399: NEG
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 1
59407: PUSH
59408: LD_INT 2
59410: NEG
59411: PUSH
59412: EMPTY
59413: LIST
59414: LIST
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: LIST
59420: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59421: LD_ADDR_VAR 0 18
59425: PUSH
59426: LD_INT 2
59428: PUSH
59429: LD_INT 1
59431: NEG
59432: PUSH
59433: EMPTY
59434: LIST
59435: LIST
59436: PUSH
59437: LD_INT 3
59439: PUSH
59440: LD_INT 0
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: LD_INT 3
59449: PUSH
59450: LD_INT 1
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: LIST
59461: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59462: LD_ADDR_VAR 0 19
59466: PUSH
59467: LD_INT 3
59469: PUSH
59470: LD_INT 2
59472: PUSH
59473: EMPTY
59474: LIST
59475: LIST
59476: PUSH
59477: LD_INT 3
59479: PUSH
59480: LD_INT 3
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PUSH
59487: LD_INT 2
59489: PUSH
59490: LD_INT 3
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: LIST
59501: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59502: LD_ADDR_VAR 0 20
59506: PUSH
59507: LD_INT 1
59509: PUSH
59510: LD_INT 3
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: LD_INT 0
59519: PUSH
59520: LD_INT 3
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 1
59529: NEG
59530: PUSH
59531: LD_INT 2
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: LIST
59542: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59543: LD_ADDR_VAR 0 21
59547: PUSH
59548: LD_INT 2
59550: NEG
59551: PUSH
59552: LD_INT 1
59554: PUSH
59555: EMPTY
59556: LIST
59557: LIST
59558: PUSH
59559: LD_INT 3
59561: NEG
59562: PUSH
59563: LD_INT 0
59565: PUSH
59566: EMPTY
59567: LIST
59568: LIST
59569: PUSH
59570: LD_INT 3
59572: NEG
59573: PUSH
59574: LD_INT 1
59576: NEG
59577: PUSH
59578: EMPTY
59579: LIST
59580: LIST
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: LIST
59586: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59587: LD_ADDR_VAR 0 22
59591: PUSH
59592: LD_INT 2
59594: NEG
59595: PUSH
59596: LD_INT 3
59598: NEG
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 3
59606: NEG
59607: PUSH
59608: LD_INT 2
59610: NEG
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: LD_INT 3
59618: NEG
59619: PUSH
59620: LD_INT 3
59622: NEG
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: LIST
59632: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
59633: LD_ADDR_VAR 0 23
59637: PUSH
59638: LD_INT 0
59640: PUSH
59641: LD_INT 3
59643: NEG
59644: PUSH
59645: EMPTY
59646: LIST
59647: LIST
59648: PUSH
59649: LD_INT 1
59651: NEG
59652: PUSH
59653: LD_INT 4
59655: NEG
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: LD_INT 1
59663: PUSH
59664: LD_INT 3
59666: NEG
59667: PUSH
59668: EMPTY
59669: LIST
59670: LIST
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: LIST
59676: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
59677: LD_ADDR_VAR 0 24
59681: PUSH
59682: LD_INT 3
59684: PUSH
59685: LD_INT 0
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: PUSH
59692: LD_INT 3
59694: PUSH
59695: LD_INT 1
59697: NEG
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: LD_INT 4
59705: PUSH
59706: LD_INT 1
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: LIST
59717: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
59718: LD_ADDR_VAR 0 25
59722: PUSH
59723: LD_INT 3
59725: PUSH
59726: LD_INT 3
59728: PUSH
59729: EMPTY
59730: LIST
59731: LIST
59732: PUSH
59733: LD_INT 4
59735: PUSH
59736: LD_INT 3
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: PUSH
59743: LD_INT 3
59745: PUSH
59746: LD_INT 4
59748: PUSH
59749: EMPTY
59750: LIST
59751: LIST
59752: PUSH
59753: EMPTY
59754: LIST
59755: LIST
59756: LIST
59757: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
59758: LD_ADDR_VAR 0 26
59762: PUSH
59763: LD_INT 0
59765: PUSH
59766: LD_INT 3
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: PUSH
59773: LD_INT 1
59775: PUSH
59776: LD_INT 4
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: PUSH
59783: LD_INT 1
59785: NEG
59786: PUSH
59787: LD_INT 3
59789: PUSH
59790: EMPTY
59791: LIST
59792: LIST
59793: PUSH
59794: EMPTY
59795: LIST
59796: LIST
59797: LIST
59798: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
59799: LD_ADDR_VAR 0 27
59803: PUSH
59804: LD_INT 3
59806: NEG
59807: PUSH
59808: LD_INT 0
59810: PUSH
59811: EMPTY
59812: LIST
59813: LIST
59814: PUSH
59815: LD_INT 3
59817: NEG
59818: PUSH
59819: LD_INT 1
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: LD_INT 4
59828: NEG
59829: PUSH
59830: LD_INT 1
59832: NEG
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: LIST
59842: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
59843: LD_ADDR_VAR 0 28
59847: PUSH
59848: LD_INT 3
59850: NEG
59851: PUSH
59852: LD_INT 3
59854: NEG
59855: PUSH
59856: EMPTY
59857: LIST
59858: LIST
59859: PUSH
59860: LD_INT 3
59862: NEG
59863: PUSH
59864: LD_INT 4
59866: NEG
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: PUSH
59872: LD_INT 4
59874: NEG
59875: PUSH
59876: LD_INT 3
59878: NEG
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PUSH
59884: EMPTY
59885: LIST
59886: LIST
59887: LIST
59888: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
59889: LD_ADDR_VAR 0 29
59893: PUSH
59894: LD_INT 1
59896: NEG
59897: PUSH
59898: LD_INT 3
59900: NEG
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PUSH
59906: LD_INT 0
59908: PUSH
59909: LD_INT 3
59911: NEG
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: PUSH
59917: LD_INT 1
59919: PUSH
59920: LD_INT 2
59922: NEG
59923: PUSH
59924: EMPTY
59925: LIST
59926: LIST
59927: PUSH
59928: LD_INT 1
59930: NEG
59931: PUSH
59932: LD_INT 4
59934: NEG
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 0
59942: PUSH
59943: LD_INT 4
59945: NEG
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 1
59953: PUSH
59954: LD_INT 3
59956: NEG
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 1
59964: NEG
59965: PUSH
59966: LD_INT 5
59968: NEG
59969: PUSH
59970: EMPTY
59971: LIST
59972: LIST
59973: PUSH
59974: LD_INT 0
59976: PUSH
59977: LD_INT 5
59979: NEG
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: PUSH
59985: LD_INT 1
59987: PUSH
59988: LD_INT 4
59990: NEG
59991: PUSH
59992: EMPTY
59993: LIST
59994: LIST
59995: PUSH
59996: LD_INT 1
59998: NEG
59999: PUSH
60000: LD_INT 6
60002: NEG
60003: PUSH
60004: EMPTY
60005: LIST
60006: LIST
60007: PUSH
60008: LD_INT 0
60010: PUSH
60011: LD_INT 6
60013: NEG
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: LD_INT 1
60021: PUSH
60022: LD_INT 5
60024: NEG
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: PUSH
60030: EMPTY
60031: LIST
60032: LIST
60033: LIST
60034: LIST
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: LIST
60042: LIST
60043: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
60044: LD_ADDR_VAR 0 30
60048: PUSH
60049: LD_INT 2
60051: PUSH
60052: LD_INT 1
60054: NEG
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: PUSH
60060: LD_INT 3
60062: PUSH
60063: LD_INT 0
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: PUSH
60070: LD_INT 3
60072: PUSH
60073: LD_INT 1
60075: PUSH
60076: EMPTY
60077: LIST
60078: LIST
60079: PUSH
60080: LD_INT 3
60082: PUSH
60083: LD_INT 1
60085: NEG
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 4
60093: PUSH
60094: LD_INT 0
60096: PUSH
60097: EMPTY
60098: LIST
60099: LIST
60100: PUSH
60101: LD_INT 4
60103: PUSH
60104: LD_INT 1
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 4
60113: PUSH
60114: LD_INT 1
60116: NEG
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: PUSH
60122: LD_INT 5
60124: PUSH
60125: LD_INT 0
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 5
60134: PUSH
60135: LD_INT 1
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 5
60144: PUSH
60145: LD_INT 1
60147: NEG
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PUSH
60153: LD_INT 6
60155: PUSH
60156: LD_INT 0
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: LD_INT 6
60165: PUSH
60166: LD_INT 1
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: LIST
60177: LIST
60178: LIST
60179: LIST
60180: LIST
60181: LIST
60182: LIST
60183: LIST
60184: LIST
60185: LIST
60186: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
60187: LD_ADDR_VAR 0 31
60191: PUSH
60192: LD_INT 3
60194: PUSH
60195: LD_INT 2
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: PUSH
60202: LD_INT 3
60204: PUSH
60205: LD_INT 3
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: PUSH
60212: LD_INT 2
60214: PUSH
60215: LD_INT 3
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: LD_INT 4
60224: PUSH
60225: LD_INT 3
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: PUSH
60232: LD_INT 4
60234: PUSH
60235: LD_INT 4
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: PUSH
60242: LD_INT 3
60244: PUSH
60245: LD_INT 4
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PUSH
60252: LD_INT 5
60254: PUSH
60255: LD_INT 4
60257: PUSH
60258: EMPTY
60259: LIST
60260: LIST
60261: PUSH
60262: LD_INT 5
60264: PUSH
60265: LD_INT 5
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: LD_INT 4
60274: PUSH
60275: LD_INT 5
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: PUSH
60282: LD_INT 6
60284: PUSH
60285: LD_INT 5
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: LD_INT 6
60294: PUSH
60295: LD_INT 6
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 5
60304: PUSH
60305: LD_INT 6
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: LIST
60316: LIST
60317: LIST
60318: LIST
60319: LIST
60320: LIST
60321: LIST
60322: LIST
60323: LIST
60324: LIST
60325: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
60326: LD_ADDR_VAR 0 32
60330: PUSH
60331: LD_INT 1
60333: PUSH
60334: LD_INT 3
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: LD_INT 0
60343: PUSH
60344: LD_INT 3
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: PUSH
60351: LD_INT 1
60353: NEG
60354: PUSH
60355: LD_INT 2
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: LD_INT 1
60364: PUSH
60365: LD_INT 4
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 0
60374: PUSH
60375: LD_INT 4
60377: PUSH
60378: EMPTY
60379: LIST
60380: LIST
60381: PUSH
60382: LD_INT 1
60384: NEG
60385: PUSH
60386: LD_INT 3
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PUSH
60393: LD_INT 1
60395: PUSH
60396: LD_INT 5
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: LD_INT 0
60405: PUSH
60406: LD_INT 5
60408: PUSH
60409: EMPTY
60410: LIST
60411: LIST
60412: PUSH
60413: LD_INT 1
60415: NEG
60416: PUSH
60417: LD_INT 4
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PUSH
60424: LD_INT 1
60426: PUSH
60427: LD_INT 6
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: LD_INT 0
60436: PUSH
60437: LD_INT 6
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: LD_INT 1
60446: NEG
60447: PUSH
60448: LD_INT 5
60450: PUSH
60451: EMPTY
60452: LIST
60453: LIST
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: LIST
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: LIST
60468: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
60469: LD_ADDR_VAR 0 33
60473: PUSH
60474: LD_INT 2
60476: NEG
60477: PUSH
60478: LD_INT 1
60480: PUSH
60481: EMPTY
60482: LIST
60483: LIST
60484: PUSH
60485: LD_INT 3
60487: NEG
60488: PUSH
60489: LD_INT 0
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: PUSH
60496: LD_INT 3
60498: NEG
60499: PUSH
60500: LD_INT 1
60502: NEG
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: PUSH
60508: LD_INT 3
60510: NEG
60511: PUSH
60512: LD_INT 1
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 4
60521: NEG
60522: PUSH
60523: LD_INT 0
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: PUSH
60530: LD_INT 4
60532: NEG
60533: PUSH
60534: LD_INT 1
60536: NEG
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: LD_INT 4
60544: NEG
60545: PUSH
60546: LD_INT 1
60548: PUSH
60549: EMPTY
60550: LIST
60551: LIST
60552: PUSH
60553: LD_INT 5
60555: NEG
60556: PUSH
60557: LD_INT 0
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: PUSH
60564: LD_INT 5
60566: NEG
60567: PUSH
60568: LD_INT 1
60570: NEG
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PUSH
60576: LD_INT 5
60578: NEG
60579: PUSH
60580: LD_INT 1
60582: PUSH
60583: EMPTY
60584: LIST
60585: LIST
60586: PUSH
60587: LD_INT 6
60589: NEG
60590: PUSH
60591: LD_INT 0
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: PUSH
60598: LD_INT 6
60600: NEG
60601: PUSH
60602: LD_INT 1
60604: NEG
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: PUSH
60610: EMPTY
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: LIST
60617: LIST
60618: LIST
60619: LIST
60620: LIST
60621: LIST
60622: LIST
60623: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
60624: LD_ADDR_VAR 0 34
60628: PUSH
60629: LD_INT 2
60631: NEG
60632: PUSH
60633: LD_INT 3
60635: NEG
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: PUSH
60641: LD_INT 3
60643: NEG
60644: PUSH
60645: LD_INT 2
60647: NEG
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: PUSH
60653: LD_INT 3
60655: NEG
60656: PUSH
60657: LD_INT 3
60659: NEG
60660: PUSH
60661: EMPTY
60662: LIST
60663: LIST
60664: PUSH
60665: LD_INT 3
60667: NEG
60668: PUSH
60669: LD_INT 4
60671: NEG
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: PUSH
60677: LD_INT 4
60679: NEG
60680: PUSH
60681: LD_INT 3
60683: NEG
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: PUSH
60689: LD_INT 4
60691: NEG
60692: PUSH
60693: LD_INT 4
60695: NEG
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: PUSH
60701: LD_INT 4
60703: NEG
60704: PUSH
60705: LD_INT 5
60707: NEG
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: PUSH
60713: LD_INT 5
60715: NEG
60716: PUSH
60717: LD_INT 4
60719: NEG
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: LD_INT 5
60727: NEG
60728: PUSH
60729: LD_INT 5
60731: NEG
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: PUSH
60737: LD_INT 5
60739: NEG
60740: PUSH
60741: LD_INT 6
60743: NEG
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: PUSH
60749: LD_INT 6
60751: NEG
60752: PUSH
60753: LD_INT 5
60755: NEG
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 6
60763: NEG
60764: PUSH
60765: LD_INT 6
60767: NEG
60768: PUSH
60769: EMPTY
60770: LIST
60771: LIST
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: LIST
60777: LIST
60778: LIST
60779: LIST
60780: LIST
60781: LIST
60782: LIST
60783: LIST
60784: LIST
60785: LIST
60786: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
60787: LD_ADDR_VAR 0 41
60791: PUSH
60792: LD_INT 0
60794: PUSH
60795: LD_INT 2
60797: NEG
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: PUSH
60803: LD_INT 1
60805: NEG
60806: PUSH
60807: LD_INT 3
60809: NEG
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PUSH
60815: LD_INT 1
60817: PUSH
60818: LD_INT 2
60820: NEG
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: LIST
60830: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
60831: LD_ADDR_VAR 0 42
60835: PUSH
60836: LD_INT 2
60838: PUSH
60839: LD_INT 0
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PUSH
60846: LD_INT 2
60848: PUSH
60849: LD_INT 1
60851: NEG
60852: PUSH
60853: EMPTY
60854: LIST
60855: LIST
60856: PUSH
60857: LD_INT 3
60859: PUSH
60860: LD_INT 1
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: LIST
60871: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
60872: LD_ADDR_VAR 0 43
60876: PUSH
60877: LD_INT 2
60879: PUSH
60880: LD_INT 2
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: PUSH
60887: LD_INT 3
60889: PUSH
60890: LD_INT 2
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: PUSH
60897: LD_INT 2
60899: PUSH
60900: LD_INT 3
60902: PUSH
60903: EMPTY
60904: LIST
60905: LIST
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: LIST
60911: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
60912: LD_ADDR_VAR 0 44
60916: PUSH
60917: LD_INT 0
60919: PUSH
60920: LD_INT 2
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PUSH
60927: LD_INT 1
60929: PUSH
60930: LD_INT 3
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: PUSH
60937: LD_INT 1
60939: NEG
60940: PUSH
60941: LD_INT 2
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: EMPTY
60949: LIST
60950: LIST
60951: LIST
60952: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60953: LD_ADDR_VAR 0 45
60957: PUSH
60958: LD_INT 2
60960: NEG
60961: PUSH
60962: LD_INT 0
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: PUSH
60969: LD_INT 2
60971: NEG
60972: PUSH
60973: LD_INT 1
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: PUSH
60980: LD_INT 3
60982: NEG
60983: PUSH
60984: LD_INT 1
60986: NEG
60987: PUSH
60988: EMPTY
60989: LIST
60990: LIST
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: LIST
60996: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
60997: LD_ADDR_VAR 0 46
61001: PUSH
61002: LD_INT 2
61004: NEG
61005: PUSH
61006: LD_INT 2
61008: NEG
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: LD_INT 2
61016: NEG
61017: PUSH
61018: LD_INT 3
61020: NEG
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 3
61028: NEG
61029: PUSH
61030: LD_INT 2
61032: NEG
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: LIST
61042: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
61043: LD_ADDR_VAR 0 47
61047: PUSH
61048: LD_INT 2
61050: NEG
61051: PUSH
61052: LD_INT 3
61054: NEG
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: PUSH
61060: LD_INT 1
61062: NEG
61063: PUSH
61064: LD_INT 3
61066: NEG
61067: PUSH
61068: EMPTY
61069: LIST
61070: LIST
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
61076: LD_ADDR_VAR 0 48
61080: PUSH
61081: LD_INT 1
61083: PUSH
61084: LD_INT 2
61086: NEG
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: PUSH
61092: LD_INT 2
61094: PUSH
61095: LD_INT 1
61097: NEG
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: PUSH
61103: EMPTY
61104: LIST
61105: LIST
61106: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
61107: LD_ADDR_VAR 0 49
61111: PUSH
61112: LD_INT 3
61114: PUSH
61115: LD_INT 1
61117: PUSH
61118: EMPTY
61119: LIST
61120: LIST
61121: PUSH
61122: LD_INT 3
61124: PUSH
61125: LD_INT 2
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
61136: LD_ADDR_VAR 0 50
61140: PUSH
61141: LD_INT 2
61143: PUSH
61144: LD_INT 3
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: PUSH
61151: LD_INT 1
61153: PUSH
61154: LD_INT 3
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
61165: LD_ADDR_VAR 0 51
61169: PUSH
61170: LD_INT 1
61172: NEG
61173: PUSH
61174: LD_INT 2
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 2
61183: NEG
61184: PUSH
61185: LD_INT 1
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: EMPTY
61193: LIST
61194: LIST
61195: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61196: LD_ADDR_VAR 0 52
61200: PUSH
61201: LD_INT 3
61203: NEG
61204: PUSH
61205: LD_INT 1
61207: NEG
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: PUSH
61213: LD_INT 3
61215: NEG
61216: PUSH
61217: LD_INT 2
61219: NEG
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61229: LD_ADDR_VAR 0 53
61233: PUSH
61234: LD_INT 1
61236: NEG
61237: PUSH
61238: LD_INT 3
61240: NEG
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: PUSH
61246: LD_INT 0
61248: PUSH
61249: LD_INT 3
61251: NEG
61252: PUSH
61253: EMPTY
61254: LIST
61255: LIST
61256: PUSH
61257: LD_INT 1
61259: PUSH
61260: LD_INT 2
61262: NEG
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: PUSH
61268: EMPTY
61269: LIST
61270: LIST
61271: LIST
61272: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61273: LD_ADDR_VAR 0 54
61277: PUSH
61278: LD_INT 2
61280: PUSH
61281: LD_INT 1
61283: NEG
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PUSH
61289: LD_INT 3
61291: PUSH
61292: LD_INT 0
61294: PUSH
61295: EMPTY
61296: LIST
61297: LIST
61298: PUSH
61299: LD_INT 3
61301: PUSH
61302: LD_INT 1
61304: PUSH
61305: EMPTY
61306: LIST
61307: LIST
61308: PUSH
61309: EMPTY
61310: LIST
61311: LIST
61312: LIST
61313: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61314: LD_ADDR_VAR 0 55
61318: PUSH
61319: LD_INT 3
61321: PUSH
61322: LD_INT 2
61324: PUSH
61325: EMPTY
61326: LIST
61327: LIST
61328: PUSH
61329: LD_INT 3
61331: PUSH
61332: LD_INT 3
61334: PUSH
61335: EMPTY
61336: LIST
61337: LIST
61338: PUSH
61339: LD_INT 2
61341: PUSH
61342: LD_INT 3
61344: PUSH
61345: EMPTY
61346: LIST
61347: LIST
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: LIST
61353: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61354: LD_ADDR_VAR 0 56
61358: PUSH
61359: LD_INT 1
61361: PUSH
61362: LD_INT 3
61364: PUSH
61365: EMPTY
61366: LIST
61367: LIST
61368: PUSH
61369: LD_INT 0
61371: PUSH
61372: LD_INT 3
61374: PUSH
61375: EMPTY
61376: LIST
61377: LIST
61378: PUSH
61379: LD_INT 1
61381: NEG
61382: PUSH
61383: LD_INT 2
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: EMPTY
61391: LIST
61392: LIST
61393: LIST
61394: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61395: LD_ADDR_VAR 0 57
61399: PUSH
61400: LD_INT 2
61402: NEG
61403: PUSH
61404: LD_INT 1
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: PUSH
61411: LD_INT 3
61413: NEG
61414: PUSH
61415: LD_INT 0
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: PUSH
61422: LD_INT 3
61424: NEG
61425: PUSH
61426: LD_INT 1
61428: NEG
61429: PUSH
61430: EMPTY
61431: LIST
61432: LIST
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: LIST
61438: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61439: LD_ADDR_VAR 0 58
61443: PUSH
61444: LD_INT 2
61446: NEG
61447: PUSH
61448: LD_INT 3
61450: NEG
61451: PUSH
61452: EMPTY
61453: LIST
61454: LIST
61455: PUSH
61456: LD_INT 3
61458: NEG
61459: PUSH
61460: LD_INT 2
61462: NEG
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: PUSH
61468: LD_INT 3
61470: NEG
61471: PUSH
61472: LD_INT 3
61474: NEG
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: LIST
61484: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
61485: LD_ADDR_VAR 0 59
61489: PUSH
61490: LD_INT 1
61492: NEG
61493: PUSH
61494: LD_INT 2
61496: NEG
61497: PUSH
61498: EMPTY
61499: LIST
61500: LIST
61501: PUSH
61502: LD_INT 0
61504: PUSH
61505: LD_INT 2
61507: NEG
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: PUSH
61513: LD_INT 1
61515: PUSH
61516: LD_INT 1
61518: NEG
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: EMPTY
61525: LIST
61526: LIST
61527: LIST
61528: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61529: LD_ADDR_VAR 0 60
61533: PUSH
61534: LD_INT 1
61536: PUSH
61537: LD_INT 1
61539: NEG
61540: PUSH
61541: EMPTY
61542: LIST
61543: LIST
61544: PUSH
61545: LD_INT 2
61547: PUSH
61548: LD_INT 0
61550: PUSH
61551: EMPTY
61552: LIST
61553: LIST
61554: PUSH
61555: LD_INT 2
61557: PUSH
61558: LD_INT 1
61560: PUSH
61561: EMPTY
61562: LIST
61563: LIST
61564: PUSH
61565: EMPTY
61566: LIST
61567: LIST
61568: LIST
61569: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61570: LD_ADDR_VAR 0 61
61574: PUSH
61575: LD_INT 2
61577: PUSH
61578: LD_INT 1
61580: PUSH
61581: EMPTY
61582: LIST
61583: LIST
61584: PUSH
61585: LD_INT 2
61587: PUSH
61588: LD_INT 2
61590: PUSH
61591: EMPTY
61592: LIST
61593: LIST
61594: PUSH
61595: LD_INT 1
61597: PUSH
61598: LD_INT 2
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: LIST
61609: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61610: LD_ADDR_VAR 0 62
61614: PUSH
61615: LD_INT 1
61617: PUSH
61618: LD_INT 2
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: PUSH
61625: LD_INT 0
61627: PUSH
61628: LD_INT 2
61630: PUSH
61631: EMPTY
61632: LIST
61633: LIST
61634: PUSH
61635: LD_INT 1
61637: NEG
61638: PUSH
61639: LD_INT 1
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: PUSH
61646: EMPTY
61647: LIST
61648: LIST
61649: LIST
61650: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61651: LD_ADDR_VAR 0 63
61655: PUSH
61656: LD_INT 1
61658: NEG
61659: PUSH
61660: LD_INT 1
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: PUSH
61667: LD_INT 2
61669: NEG
61670: PUSH
61671: LD_INT 0
61673: PUSH
61674: EMPTY
61675: LIST
61676: LIST
61677: PUSH
61678: LD_INT 2
61680: NEG
61681: PUSH
61682: LD_INT 1
61684: NEG
61685: PUSH
61686: EMPTY
61687: LIST
61688: LIST
61689: PUSH
61690: EMPTY
61691: LIST
61692: LIST
61693: LIST
61694: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61695: LD_ADDR_VAR 0 64
61699: PUSH
61700: LD_INT 1
61702: NEG
61703: PUSH
61704: LD_INT 2
61706: NEG
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: PUSH
61712: LD_INT 2
61714: NEG
61715: PUSH
61716: LD_INT 1
61718: NEG
61719: PUSH
61720: EMPTY
61721: LIST
61722: LIST
61723: PUSH
61724: LD_INT 2
61726: NEG
61727: PUSH
61728: LD_INT 2
61730: NEG
61731: PUSH
61732: EMPTY
61733: LIST
61734: LIST
61735: PUSH
61736: EMPTY
61737: LIST
61738: LIST
61739: LIST
61740: ST_TO_ADDR
// end ; 2 :
61741: GO 65007
61743: LD_INT 2
61745: DOUBLE
61746: EQUAL
61747: IFTRUE 61751
61749: GO 65006
61751: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
61752: LD_ADDR_VAR 0 29
61756: PUSH
61757: LD_INT 4
61759: PUSH
61760: LD_INT 0
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: LD_INT 4
61769: PUSH
61770: LD_INT 1
61772: NEG
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 5
61780: PUSH
61781: LD_INT 0
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: PUSH
61788: LD_INT 5
61790: PUSH
61791: LD_INT 1
61793: PUSH
61794: EMPTY
61795: LIST
61796: LIST
61797: PUSH
61798: LD_INT 4
61800: PUSH
61801: LD_INT 1
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: LD_INT 3
61810: PUSH
61811: LD_INT 0
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: PUSH
61818: LD_INT 3
61820: PUSH
61821: LD_INT 1
61823: NEG
61824: PUSH
61825: EMPTY
61826: LIST
61827: LIST
61828: PUSH
61829: LD_INT 3
61831: PUSH
61832: LD_INT 2
61834: NEG
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PUSH
61840: LD_INT 5
61842: PUSH
61843: LD_INT 2
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: LD_INT 3
61852: PUSH
61853: LD_INT 3
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: PUSH
61860: LD_INT 3
61862: PUSH
61863: LD_INT 2
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: PUSH
61870: LD_INT 4
61872: PUSH
61873: LD_INT 3
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: LD_INT 4
61882: PUSH
61883: LD_INT 4
61885: PUSH
61886: EMPTY
61887: LIST
61888: LIST
61889: PUSH
61890: LD_INT 3
61892: PUSH
61893: LD_INT 4
61895: PUSH
61896: EMPTY
61897: LIST
61898: LIST
61899: PUSH
61900: LD_INT 2
61902: PUSH
61903: LD_INT 3
61905: PUSH
61906: EMPTY
61907: LIST
61908: LIST
61909: PUSH
61910: LD_INT 2
61912: PUSH
61913: LD_INT 2
61915: PUSH
61916: EMPTY
61917: LIST
61918: LIST
61919: PUSH
61920: LD_INT 4
61922: PUSH
61923: LD_INT 2
61925: PUSH
61926: EMPTY
61927: LIST
61928: LIST
61929: PUSH
61930: LD_INT 2
61932: PUSH
61933: LD_INT 4
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: PUSH
61940: LD_INT 0
61942: PUSH
61943: LD_INT 4
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: PUSH
61950: LD_INT 0
61952: PUSH
61953: LD_INT 3
61955: PUSH
61956: EMPTY
61957: LIST
61958: LIST
61959: PUSH
61960: LD_INT 1
61962: PUSH
61963: LD_INT 4
61965: PUSH
61966: EMPTY
61967: LIST
61968: LIST
61969: PUSH
61970: LD_INT 1
61972: PUSH
61973: LD_INT 5
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: PUSH
61980: LD_INT 0
61982: PUSH
61983: LD_INT 5
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: PUSH
61990: LD_INT 1
61992: NEG
61993: PUSH
61994: LD_INT 4
61996: PUSH
61997: EMPTY
61998: LIST
61999: LIST
62000: PUSH
62001: LD_INT 1
62003: NEG
62004: PUSH
62005: LD_INT 3
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: PUSH
62012: LD_INT 2
62014: PUSH
62015: LD_INT 5
62017: PUSH
62018: EMPTY
62019: LIST
62020: LIST
62021: PUSH
62022: LD_INT 2
62024: NEG
62025: PUSH
62026: LD_INT 3
62028: PUSH
62029: EMPTY
62030: LIST
62031: LIST
62032: PUSH
62033: LD_INT 3
62035: NEG
62036: PUSH
62037: LD_INT 0
62039: PUSH
62040: EMPTY
62041: LIST
62042: LIST
62043: PUSH
62044: LD_INT 3
62046: NEG
62047: PUSH
62048: LD_INT 1
62050: NEG
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: PUSH
62056: LD_INT 2
62058: NEG
62059: PUSH
62060: LD_INT 0
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: LD_INT 2
62069: NEG
62070: PUSH
62071: LD_INT 1
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: PUSH
62078: LD_INT 3
62080: NEG
62081: PUSH
62082: LD_INT 1
62084: PUSH
62085: EMPTY
62086: LIST
62087: LIST
62088: PUSH
62089: LD_INT 4
62091: NEG
62092: PUSH
62093: LD_INT 0
62095: PUSH
62096: EMPTY
62097: LIST
62098: LIST
62099: PUSH
62100: LD_INT 4
62102: NEG
62103: PUSH
62104: LD_INT 1
62106: NEG
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: LD_INT 4
62114: NEG
62115: PUSH
62116: LD_INT 2
62118: NEG
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: PUSH
62124: LD_INT 2
62126: NEG
62127: PUSH
62128: LD_INT 2
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: PUSH
62135: LD_INT 4
62137: NEG
62138: PUSH
62139: LD_INT 4
62141: NEG
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: PUSH
62147: LD_INT 4
62149: NEG
62150: PUSH
62151: LD_INT 5
62153: NEG
62154: PUSH
62155: EMPTY
62156: LIST
62157: LIST
62158: PUSH
62159: LD_INT 3
62161: NEG
62162: PUSH
62163: LD_INT 4
62165: NEG
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: PUSH
62171: LD_INT 3
62173: NEG
62174: PUSH
62175: LD_INT 3
62177: NEG
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: PUSH
62183: LD_INT 4
62185: NEG
62186: PUSH
62187: LD_INT 3
62189: NEG
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: PUSH
62195: LD_INT 5
62197: NEG
62198: PUSH
62199: LD_INT 4
62201: NEG
62202: PUSH
62203: EMPTY
62204: LIST
62205: LIST
62206: PUSH
62207: LD_INT 5
62209: NEG
62210: PUSH
62211: LD_INT 5
62213: NEG
62214: PUSH
62215: EMPTY
62216: LIST
62217: LIST
62218: PUSH
62219: LD_INT 3
62221: NEG
62222: PUSH
62223: LD_INT 5
62225: NEG
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: PUSH
62231: LD_INT 5
62233: NEG
62234: PUSH
62235: LD_INT 3
62237: NEG
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PUSH
62243: EMPTY
62244: LIST
62245: LIST
62246: LIST
62247: LIST
62248: LIST
62249: LIST
62250: LIST
62251: LIST
62252: LIST
62253: LIST
62254: LIST
62255: LIST
62256: LIST
62257: LIST
62258: LIST
62259: LIST
62260: LIST
62261: LIST
62262: LIST
62263: LIST
62264: LIST
62265: LIST
62266: LIST
62267: LIST
62268: LIST
62269: LIST
62270: LIST
62271: LIST
62272: LIST
62273: LIST
62274: LIST
62275: LIST
62276: LIST
62277: LIST
62278: LIST
62279: LIST
62280: LIST
62281: LIST
62282: LIST
62283: LIST
62284: LIST
62285: LIST
62286: LIST
62287: LIST
62288: LIST
62289: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
62290: LD_ADDR_VAR 0 30
62294: PUSH
62295: LD_INT 4
62297: PUSH
62298: LD_INT 4
62300: PUSH
62301: EMPTY
62302: LIST
62303: LIST
62304: PUSH
62305: LD_INT 4
62307: PUSH
62308: LD_INT 3
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: PUSH
62315: LD_INT 5
62317: PUSH
62318: LD_INT 4
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: PUSH
62325: LD_INT 5
62327: PUSH
62328: LD_INT 5
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PUSH
62335: LD_INT 4
62337: PUSH
62338: LD_INT 5
62340: PUSH
62341: EMPTY
62342: LIST
62343: LIST
62344: PUSH
62345: LD_INT 3
62347: PUSH
62348: LD_INT 4
62350: PUSH
62351: EMPTY
62352: LIST
62353: LIST
62354: PUSH
62355: LD_INT 3
62357: PUSH
62358: LD_INT 3
62360: PUSH
62361: EMPTY
62362: LIST
62363: LIST
62364: PUSH
62365: LD_INT 5
62367: PUSH
62368: LD_INT 3
62370: PUSH
62371: EMPTY
62372: LIST
62373: LIST
62374: PUSH
62375: LD_INT 3
62377: PUSH
62378: LD_INT 5
62380: PUSH
62381: EMPTY
62382: LIST
62383: LIST
62384: PUSH
62385: LD_INT 0
62387: PUSH
62388: LD_INT 3
62390: PUSH
62391: EMPTY
62392: LIST
62393: LIST
62394: PUSH
62395: LD_INT 0
62397: PUSH
62398: LD_INT 2
62400: PUSH
62401: EMPTY
62402: LIST
62403: LIST
62404: PUSH
62405: LD_INT 1
62407: PUSH
62408: LD_INT 3
62410: PUSH
62411: EMPTY
62412: LIST
62413: LIST
62414: PUSH
62415: LD_INT 1
62417: PUSH
62418: LD_INT 4
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: PUSH
62425: LD_INT 0
62427: PUSH
62428: LD_INT 4
62430: PUSH
62431: EMPTY
62432: LIST
62433: LIST
62434: PUSH
62435: LD_INT 1
62437: NEG
62438: PUSH
62439: LD_INT 3
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: PUSH
62446: LD_INT 1
62448: NEG
62449: PUSH
62450: LD_INT 2
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: PUSH
62457: LD_INT 2
62459: PUSH
62460: LD_INT 4
62462: PUSH
62463: EMPTY
62464: LIST
62465: LIST
62466: PUSH
62467: LD_INT 2
62469: NEG
62470: PUSH
62471: LD_INT 2
62473: PUSH
62474: EMPTY
62475: LIST
62476: LIST
62477: PUSH
62478: LD_INT 4
62480: NEG
62481: PUSH
62482: LD_INT 0
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: PUSH
62489: LD_INT 4
62491: NEG
62492: PUSH
62493: LD_INT 1
62495: NEG
62496: PUSH
62497: EMPTY
62498: LIST
62499: LIST
62500: PUSH
62501: LD_INT 3
62503: NEG
62504: PUSH
62505: LD_INT 0
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PUSH
62512: LD_INT 3
62514: NEG
62515: PUSH
62516: LD_INT 1
62518: PUSH
62519: EMPTY
62520: LIST
62521: LIST
62522: PUSH
62523: LD_INT 4
62525: NEG
62526: PUSH
62527: LD_INT 1
62529: PUSH
62530: EMPTY
62531: LIST
62532: LIST
62533: PUSH
62534: LD_INT 5
62536: NEG
62537: PUSH
62538: LD_INT 0
62540: PUSH
62541: EMPTY
62542: LIST
62543: LIST
62544: PUSH
62545: LD_INT 5
62547: NEG
62548: PUSH
62549: LD_INT 1
62551: NEG
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: PUSH
62557: LD_INT 5
62559: NEG
62560: PUSH
62561: LD_INT 2
62563: NEG
62564: PUSH
62565: EMPTY
62566: LIST
62567: LIST
62568: PUSH
62569: LD_INT 3
62571: NEG
62572: PUSH
62573: LD_INT 2
62575: PUSH
62576: EMPTY
62577: LIST
62578: LIST
62579: PUSH
62580: LD_INT 3
62582: NEG
62583: PUSH
62584: LD_INT 3
62586: NEG
62587: PUSH
62588: EMPTY
62589: LIST
62590: LIST
62591: PUSH
62592: LD_INT 3
62594: NEG
62595: PUSH
62596: LD_INT 4
62598: NEG
62599: PUSH
62600: EMPTY
62601: LIST
62602: LIST
62603: PUSH
62604: LD_INT 2
62606: NEG
62607: PUSH
62608: LD_INT 3
62610: NEG
62611: PUSH
62612: EMPTY
62613: LIST
62614: LIST
62615: PUSH
62616: LD_INT 2
62618: NEG
62619: PUSH
62620: LD_INT 2
62622: NEG
62623: PUSH
62624: EMPTY
62625: LIST
62626: LIST
62627: PUSH
62628: LD_INT 3
62630: NEG
62631: PUSH
62632: LD_INT 2
62634: NEG
62635: PUSH
62636: EMPTY
62637: LIST
62638: LIST
62639: PUSH
62640: LD_INT 4
62642: NEG
62643: PUSH
62644: LD_INT 3
62646: NEG
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: PUSH
62652: LD_INT 4
62654: NEG
62655: PUSH
62656: LD_INT 4
62658: NEG
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: PUSH
62664: LD_INT 2
62666: NEG
62667: PUSH
62668: LD_INT 4
62670: NEG
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: PUSH
62676: LD_INT 4
62678: NEG
62679: PUSH
62680: LD_INT 2
62682: NEG
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: PUSH
62688: LD_INT 0
62690: PUSH
62691: LD_INT 4
62693: NEG
62694: PUSH
62695: EMPTY
62696: LIST
62697: LIST
62698: PUSH
62699: LD_INT 0
62701: PUSH
62702: LD_INT 5
62704: NEG
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: PUSH
62710: LD_INT 1
62712: PUSH
62713: LD_INT 4
62715: NEG
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: PUSH
62721: LD_INT 1
62723: PUSH
62724: LD_INT 3
62726: NEG
62727: PUSH
62728: EMPTY
62729: LIST
62730: LIST
62731: PUSH
62732: LD_INT 0
62734: PUSH
62735: LD_INT 3
62737: NEG
62738: PUSH
62739: EMPTY
62740: LIST
62741: LIST
62742: PUSH
62743: LD_INT 1
62745: NEG
62746: PUSH
62747: LD_INT 4
62749: NEG
62750: PUSH
62751: EMPTY
62752: LIST
62753: LIST
62754: PUSH
62755: LD_INT 1
62757: NEG
62758: PUSH
62759: LD_INT 5
62761: NEG
62762: PUSH
62763: EMPTY
62764: LIST
62765: LIST
62766: PUSH
62767: LD_INT 2
62769: PUSH
62770: LD_INT 3
62772: NEG
62773: PUSH
62774: EMPTY
62775: LIST
62776: LIST
62777: PUSH
62778: LD_INT 2
62780: NEG
62781: PUSH
62782: LD_INT 5
62784: NEG
62785: PUSH
62786: EMPTY
62787: LIST
62788: LIST
62789: PUSH
62790: EMPTY
62791: LIST
62792: LIST
62793: LIST
62794: LIST
62795: LIST
62796: LIST
62797: LIST
62798: LIST
62799: LIST
62800: LIST
62801: LIST
62802: LIST
62803: LIST
62804: LIST
62805: LIST
62806: LIST
62807: LIST
62808: LIST
62809: LIST
62810: LIST
62811: LIST
62812: LIST
62813: LIST
62814: LIST
62815: LIST
62816: LIST
62817: LIST
62818: LIST
62819: LIST
62820: LIST
62821: LIST
62822: LIST
62823: LIST
62824: LIST
62825: LIST
62826: LIST
62827: LIST
62828: LIST
62829: LIST
62830: LIST
62831: LIST
62832: LIST
62833: LIST
62834: LIST
62835: LIST
62836: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
62837: LD_ADDR_VAR 0 31
62841: PUSH
62842: LD_INT 0
62844: PUSH
62845: LD_INT 4
62847: PUSH
62848: EMPTY
62849: LIST
62850: LIST
62851: PUSH
62852: LD_INT 0
62854: PUSH
62855: LD_INT 3
62857: PUSH
62858: EMPTY
62859: LIST
62860: LIST
62861: PUSH
62862: LD_INT 1
62864: PUSH
62865: LD_INT 4
62867: PUSH
62868: EMPTY
62869: LIST
62870: LIST
62871: PUSH
62872: LD_INT 1
62874: PUSH
62875: LD_INT 5
62877: PUSH
62878: EMPTY
62879: LIST
62880: LIST
62881: PUSH
62882: LD_INT 0
62884: PUSH
62885: LD_INT 5
62887: PUSH
62888: EMPTY
62889: LIST
62890: LIST
62891: PUSH
62892: LD_INT 1
62894: NEG
62895: PUSH
62896: LD_INT 4
62898: PUSH
62899: EMPTY
62900: LIST
62901: LIST
62902: PUSH
62903: LD_INT 1
62905: NEG
62906: PUSH
62907: LD_INT 3
62909: PUSH
62910: EMPTY
62911: LIST
62912: LIST
62913: PUSH
62914: LD_INT 2
62916: PUSH
62917: LD_INT 5
62919: PUSH
62920: EMPTY
62921: LIST
62922: LIST
62923: PUSH
62924: LD_INT 2
62926: NEG
62927: PUSH
62928: LD_INT 3
62930: PUSH
62931: EMPTY
62932: LIST
62933: LIST
62934: PUSH
62935: LD_INT 3
62937: NEG
62938: PUSH
62939: LD_INT 0
62941: PUSH
62942: EMPTY
62943: LIST
62944: LIST
62945: PUSH
62946: LD_INT 3
62948: NEG
62949: PUSH
62950: LD_INT 1
62952: NEG
62953: PUSH
62954: EMPTY
62955: LIST
62956: LIST
62957: PUSH
62958: LD_INT 2
62960: NEG
62961: PUSH
62962: LD_INT 0
62964: PUSH
62965: EMPTY
62966: LIST
62967: LIST
62968: PUSH
62969: LD_INT 2
62971: NEG
62972: PUSH
62973: LD_INT 1
62975: PUSH
62976: EMPTY
62977: LIST
62978: LIST
62979: PUSH
62980: LD_INT 3
62982: NEG
62983: PUSH
62984: LD_INT 1
62986: PUSH
62987: EMPTY
62988: LIST
62989: LIST
62990: PUSH
62991: LD_INT 4
62993: NEG
62994: PUSH
62995: LD_INT 0
62997: PUSH
62998: EMPTY
62999: LIST
63000: LIST
63001: PUSH
63002: LD_INT 4
63004: NEG
63005: PUSH
63006: LD_INT 1
63008: NEG
63009: PUSH
63010: EMPTY
63011: LIST
63012: LIST
63013: PUSH
63014: LD_INT 4
63016: NEG
63017: PUSH
63018: LD_INT 2
63020: NEG
63021: PUSH
63022: EMPTY
63023: LIST
63024: LIST
63025: PUSH
63026: LD_INT 2
63028: NEG
63029: PUSH
63030: LD_INT 2
63032: PUSH
63033: EMPTY
63034: LIST
63035: LIST
63036: PUSH
63037: LD_INT 4
63039: NEG
63040: PUSH
63041: LD_INT 4
63043: NEG
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: PUSH
63049: LD_INT 4
63051: NEG
63052: PUSH
63053: LD_INT 5
63055: NEG
63056: PUSH
63057: EMPTY
63058: LIST
63059: LIST
63060: PUSH
63061: LD_INT 3
63063: NEG
63064: PUSH
63065: LD_INT 4
63067: NEG
63068: PUSH
63069: EMPTY
63070: LIST
63071: LIST
63072: PUSH
63073: LD_INT 3
63075: NEG
63076: PUSH
63077: LD_INT 3
63079: NEG
63080: PUSH
63081: EMPTY
63082: LIST
63083: LIST
63084: PUSH
63085: LD_INT 4
63087: NEG
63088: PUSH
63089: LD_INT 3
63091: NEG
63092: PUSH
63093: EMPTY
63094: LIST
63095: LIST
63096: PUSH
63097: LD_INT 5
63099: NEG
63100: PUSH
63101: LD_INT 4
63103: NEG
63104: PUSH
63105: EMPTY
63106: LIST
63107: LIST
63108: PUSH
63109: LD_INT 5
63111: NEG
63112: PUSH
63113: LD_INT 5
63115: NEG
63116: PUSH
63117: EMPTY
63118: LIST
63119: LIST
63120: PUSH
63121: LD_INT 3
63123: NEG
63124: PUSH
63125: LD_INT 5
63127: NEG
63128: PUSH
63129: EMPTY
63130: LIST
63131: LIST
63132: PUSH
63133: LD_INT 5
63135: NEG
63136: PUSH
63137: LD_INT 3
63139: NEG
63140: PUSH
63141: EMPTY
63142: LIST
63143: LIST
63144: PUSH
63145: LD_INT 0
63147: PUSH
63148: LD_INT 3
63150: NEG
63151: PUSH
63152: EMPTY
63153: LIST
63154: LIST
63155: PUSH
63156: LD_INT 0
63158: PUSH
63159: LD_INT 4
63161: NEG
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: PUSH
63167: LD_INT 1
63169: PUSH
63170: LD_INT 3
63172: NEG
63173: PUSH
63174: EMPTY
63175: LIST
63176: LIST
63177: PUSH
63178: LD_INT 1
63180: PUSH
63181: LD_INT 2
63183: NEG
63184: PUSH
63185: EMPTY
63186: LIST
63187: LIST
63188: PUSH
63189: LD_INT 0
63191: PUSH
63192: LD_INT 2
63194: NEG
63195: PUSH
63196: EMPTY
63197: LIST
63198: LIST
63199: PUSH
63200: LD_INT 1
63202: NEG
63203: PUSH
63204: LD_INT 3
63206: NEG
63207: PUSH
63208: EMPTY
63209: LIST
63210: LIST
63211: PUSH
63212: LD_INT 1
63214: NEG
63215: PUSH
63216: LD_INT 4
63218: NEG
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: PUSH
63224: LD_INT 2
63226: PUSH
63227: LD_INT 2
63229: NEG
63230: PUSH
63231: EMPTY
63232: LIST
63233: LIST
63234: PUSH
63235: LD_INT 2
63237: NEG
63238: PUSH
63239: LD_INT 4
63241: NEG
63242: PUSH
63243: EMPTY
63244: LIST
63245: LIST
63246: PUSH
63247: LD_INT 4
63249: PUSH
63250: LD_INT 0
63252: PUSH
63253: EMPTY
63254: LIST
63255: LIST
63256: PUSH
63257: LD_INT 4
63259: PUSH
63260: LD_INT 1
63262: NEG
63263: PUSH
63264: EMPTY
63265: LIST
63266: LIST
63267: PUSH
63268: LD_INT 5
63270: PUSH
63271: LD_INT 0
63273: PUSH
63274: EMPTY
63275: LIST
63276: LIST
63277: PUSH
63278: LD_INT 5
63280: PUSH
63281: LD_INT 1
63283: PUSH
63284: EMPTY
63285: LIST
63286: LIST
63287: PUSH
63288: LD_INT 4
63290: PUSH
63291: LD_INT 1
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: PUSH
63298: LD_INT 3
63300: PUSH
63301: LD_INT 0
63303: PUSH
63304: EMPTY
63305: LIST
63306: LIST
63307: PUSH
63308: LD_INT 3
63310: PUSH
63311: LD_INT 1
63313: NEG
63314: PUSH
63315: EMPTY
63316: LIST
63317: LIST
63318: PUSH
63319: LD_INT 3
63321: PUSH
63322: LD_INT 2
63324: NEG
63325: PUSH
63326: EMPTY
63327: LIST
63328: LIST
63329: PUSH
63330: LD_INT 5
63332: PUSH
63333: LD_INT 2
63335: PUSH
63336: EMPTY
63337: LIST
63338: LIST
63339: PUSH
63340: EMPTY
63341: LIST
63342: LIST
63343: LIST
63344: LIST
63345: LIST
63346: LIST
63347: LIST
63348: LIST
63349: LIST
63350: LIST
63351: LIST
63352: LIST
63353: LIST
63354: LIST
63355: LIST
63356: LIST
63357: LIST
63358: LIST
63359: LIST
63360: LIST
63361: LIST
63362: LIST
63363: LIST
63364: LIST
63365: LIST
63366: LIST
63367: LIST
63368: LIST
63369: LIST
63370: LIST
63371: LIST
63372: LIST
63373: LIST
63374: LIST
63375: LIST
63376: LIST
63377: LIST
63378: LIST
63379: LIST
63380: LIST
63381: LIST
63382: LIST
63383: LIST
63384: LIST
63385: LIST
63386: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
63387: LD_ADDR_VAR 0 32
63391: PUSH
63392: LD_INT 4
63394: NEG
63395: PUSH
63396: LD_INT 0
63398: PUSH
63399: EMPTY
63400: LIST
63401: LIST
63402: PUSH
63403: LD_INT 4
63405: NEG
63406: PUSH
63407: LD_INT 1
63409: NEG
63410: PUSH
63411: EMPTY
63412: LIST
63413: LIST
63414: PUSH
63415: LD_INT 3
63417: NEG
63418: PUSH
63419: LD_INT 0
63421: PUSH
63422: EMPTY
63423: LIST
63424: LIST
63425: PUSH
63426: LD_INT 3
63428: NEG
63429: PUSH
63430: LD_INT 1
63432: PUSH
63433: EMPTY
63434: LIST
63435: LIST
63436: PUSH
63437: LD_INT 4
63439: NEG
63440: PUSH
63441: LD_INT 1
63443: PUSH
63444: EMPTY
63445: LIST
63446: LIST
63447: PUSH
63448: LD_INT 5
63450: NEG
63451: PUSH
63452: LD_INT 0
63454: PUSH
63455: EMPTY
63456: LIST
63457: LIST
63458: PUSH
63459: LD_INT 5
63461: NEG
63462: PUSH
63463: LD_INT 1
63465: NEG
63466: PUSH
63467: EMPTY
63468: LIST
63469: LIST
63470: PUSH
63471: LD_INT 5
63473: NEG
63474: PUSH
63475: LD_INT 2
63477: NEG
63478: PUSH
63479: EMPTY
63480: LIST
63481: LIST
63482: PUSH
63483: LD_INT 3
63485: NEG
63486: PUSH
63487: LD_INT 2
63489: PUSH
63490: EMPTY
63491: LIST
63492: LIST
63493: PUSH
63494: LD_INT 3
63496: NEG
63497: PUSH
63498: LD_INT 3
63500: NEG
63501: PUSH
63502: EMPTY
63503: LIST
63504: LIST
63505: PUSH
63506: LD_INT 3
63508: NEG
63509: PUSH
63510: LD_INT 4
63512: NEG
63513: PUSH
63514: EMPTY
63515: LIST
63516: LIST
63517: PUSH
63518: LD_INT 2
63520: NEG
63521: PUSH
63522: LD_INT 3
63524: NEG
63525: PUSH
63526: EMPTY
63527: LIST
63528: LIST
63529: PUSH
63530: LD_INT 2
63532: NEG
63533: PUSH
63534: LD_INT 2
63536: NEG
63537: PUSH
63538: EMPTY
63539: LIST
63540: LIST
63541: PUSH
63542: LD_INT 3
63544: NEG
63545: PUSH
63546: LD_INT 2
63548: NEG
63549: PUSH
63550: EMPTY
63551: LIST
63552: LIST
63553: PUSH
63554: LD_INT 4
63556: NEG
63557: PUSH
63558: LD_INT 3
63560: NEG
63561: PUSH
63562: EMPTY
63563: LIST
63564: LIST
63565: PUSH
63566: LD_INT 4
63568: NEG
63569: PUSH
63570: LD_INT 4
63572: NEG
63573: PUSH
63574: EMPTY
63575: LIST
63576: LIST
63577: PUSH
63578: LD_INT 2
63580: NEG
63581: PUSH
63582: LD_INT 4
63584: NEG
63585: PUSH
63586: EMPTY
63587: LIST
63588: LIST
63589: PUSH
63590: LD_INT 4
63592: NEG
63593: PUSH
63594: LD_INT 2
63596: NEG
63597: PUSH
63598: EMPTY
63599: LIST
63600: LIST
63601: PUSH
63602: LD_INT 0
63604: PUSH
63605: LD_INT 4
63607: NEG
63608: PUSH
63609: EMPTY
63610: LIST
63611: LIST
63612: PUSH
63613: LD_INT 0
63615: PUSH
63616: LD_INT 5
63618: NEG
63619: PUSH
63620: EMPTY
63621: LIST
63622: LIST
63623: PUSH
63624: LD_INT 1
63626: PUSH
63627: LD_INT 4
63629: NEG
63630: PUSH
63631: EMPTY
63632: LIST
63633: LIST
63634: PUSH
63635: LD_INT 1
63637: PUSH
63638: LD_INT 3
63640: NEG
63641: PUSH
63642: EMPTY
63643: LIST
63644: LIST
63645: PUSH
63646: LD_INT 0
63648: PUSH
63649: LD_INT 3
63651: NEG
63652: PUSH
63653: EMPTY
63654: LIST
63655: LIST
63656: PUSH
63657: LD_INT 1
63659: NEG
63660: PUSH
63661: LD_INT 4
63663: NEG
63664: PUSH
63665: EMPTY
63666: LIST
63667: LIST
63668: PUSH
63669: LD_INT 1
63671: NEG
63672: PUSH
63673: LD_INT 5
63675: NEG
63676: PUSH
63677: EMPTY
63678: LIST
63679: LIST
63680: PUSH
63681: LD_INT 2
63683: PUSH
63684: LD_INT 3
63686: NEG
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: PUSH
63692: LD_INT 2
63694: NEG
63695: PUSH
63696: LD_INT 5
63698: NEG
63699: PUSH
63700: EMPTY
63701: LIST
63702: LIST
63703: PUSH
63704: LD_INT 3
63706: PUSH
63707: LD_INT 0
63709: PUSH
63710: EMPTY
63711: LIST
63712: LIST
63713: PUSH
63714: LD_INT 3
63716: PUSH
63717: LD_INT 1
63719: NEG
63720: PUSH
63721: EMPTY
63722: LIST
63723: LIST
63724: PUSH
63725: LD_INT 4
63727: PUSH
63728: LD_INT 0
63730: PUSH
63731: EMPTY
63732: LIST
63733: LIST
63734: PUSH
63735: LD_INT 4
63737: PUSH
63738: LD_INT 1
63740: PUSH
63741: EMPTY
63742: LIST
63743: LIST
63744: PUSH
63745: LD_INT 3
63747: PUSH
63748: LD_INT 1
63750: PUSH
63751: EMPTY
63752: LIST
63753: LIST
63754: PUSH
63755: LD_INT 2
63757: PUSH
63758: LD_INT 0
63760: PUSH
63761: EMPTY
63762: LIST
63763: LIST
63764: PUSH
63765: LD_INT 2
63767: PUSH
63768: LD_INT 1
63770: NEG
63771: PUSH
63772: EMPTY
63773: LIST
63774: LIST
63775: PUSH
63776: LD_INT 2
63778: PUSH
63779: LD_INT 2
63781: NEG
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: PUSH
63787: LD_INT 4
63789: PUSH
63790: LD_INT 2
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: PUSH
63797: LD_INT 4
63799: PUSH
63800: LD_INT 4
63802: PUSH
63803: EMPTY
63804: LIST
63805: LIST
63806: PUSH
63807: LD_INT 4
63809: PUSH
63810: LD_INT 3
63812: PUSH
63813: EMPTY
63814: LIST
63815: LIST
63816: PUSH
63817: LD_INT 5
63819: PUSH
63820: LD_INT 4
63822: PUSH
63823: EMPTY
63824: LIST
63825: LIST
63826: PUSH
63827: LD_INT 5
63829: PUSH
63830: LD_INT 5
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: PUSH
63837: LD_INT 4
63839: PUSH
63840: LD_INT 5
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: PUSH
63847: LD_INT 3
63849: PUSH
63850: LD_INT 4
63852: PUSH
63853: EMPTY
63854: LIST
63855: LIST
63856: PUSH
63857: LD_INT 3
63859: PUSH
63860: LD_INT 3
63862: PUSH
63863: EMPTY
63864: LIST
63865: LIST
63866: PUSH
63867: LD_INT 5
63869: PUSH
63870: LD_INT 3
63872: PUSH
63873: EMPTY
63874: LIST
63875: LIST
63876: PUSH
63877: LD_INT 3
63879: PUSH
63880: LD_INT 5
63882: PUSH
63883: EMPTY
63884: LIST
63885: LIST
63886: PUSH
63887: EMPTY
63888: LIST
63889: LIST
63890: LIST
63891: LIST
63892: LIST
63893: LIST
63894: LIST
63895: LIST
63896: LIST
63897: LIST
63898: LIST
63899: LIST
63900: LIST
63901: LIST
63902: LIST
63903: LIST
63904: LIST
63905: LIST
63906: LIST
63907: LIST
63908: LIST
63909: LIST
63910: LIST
63911: LIST
63912: LIST
63913: LIST
63914: LIST
63915: LIST
63916: LIST
63917: LIST
63918: LIST
63919: LIST
63920: LIST
63921: LIST
63922: LIST
63923: LIST
63924: LIST
63925: LIST
63926: LIST
63927: LIST
63928: LIST
63929: LIST
63930: LIST
63931: LIST
63932: LIST
63933: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
63934: LD_ADDR_VAR 0 33
63938: PUSH
63939: LD_INT 4
63941: NEG
63942: PUSH
63943: LD_INT 4
63945: NEG
63946: PUSH
63947: EMPTY
63948: LIST
63949: LIST
63950: PUSH
63951: LD_INT 4
63953: NEG
63954: PUSH
63955: LD_INT 5
63957: NEG
63958: PUSH
63959: EMPTY
63960: LIST
63961: LIST
63962: PUSH
63963: LD_INT 3
63965: NEG
63966: PUSH
63967: LD_INT 4
63969: NEG
63970: PUSH
63971: EMPTY
63972: LIST
63973: LIST
63974: PUSH
63975: LD_INT 3
63977: NEG
63978: PUSH
63979: LD_INT 3
63981: NEG
63982: PUSH
63983: EMPTY
63984: LIST
63985: LIST
63986: PUSH
63987: LD_INT 4
63989: NEG
63990: PUSH
63991: LD_INT 3
63993: NEG
63994: PUSH
63995: EMPTY
63996: LIST
63997: LIST
63998: PUSH
63999: LD_INT 5
64001: NEG
64002: PUSH
64003: LD_INT 4
64005: NEG
64006: PUSH
64007: EMPTY
64008: LIST
64009: LIST
64010: PUSH
64011: LD_INT 5
64013: NEG
64014: PUSH
64015: LD_INT 5
64017: NEG
64018: PUSH
64019: EMPTY
64020: LIST
64021: LIST
64022: PUSH
64023: LD_INT 3
64025: NEG
64026: PUSH
64027: LD_INT 5
64029: NEG
64030: PUSH
64031: EMPTY
64032: LIST
64033: LIST
64034: PUSH
64035: LD_INT 5
64037: NEG
64038: PUSH
64039: LD_INT 3
64041: NEG
64042: PUSH
64043: EMPTY
64044: LIST
64045: LIST
64046: PUSH
64047: LD_INT 0
64049: PUSH
64050: LD_INT 3
64052: NEG
64053: PUSH
64054: EMPTY
64055: LIST
64056: LIST
64057: PUSH
64058: LD_INT 0
64060: PUSH
64061: LD_INT 4
64063: NEG
64064: PUSH
64065: EMPTY
64066: LIST
64067: LIST
64068: PUSH
64069: LD_INT 1
64071: PUSH
64072: LD_INT 3
64074: NEG
64075: PUSH
64076: EMPTY
64077: LIST
64078: LIST
64079: PUSH
64080: LD_INT 1
64082: PUSH
64083: LD_INT 2
64085: NEG
64086: PUSH
64087: EMPTY
64088: LIST
64089: LIST
64090: PUSH
64091: LD_INT 0
64093: PUSH
64094: LD_INT 2
64096: NEG
64097: PUSH
64098: EMPTY
64099: LIST
64100: LIST
64101: PUSH
64102: LD_INT 1
64104: NEG
64105: PUSH
64106: LD_INT 3
64108: NEG
64109: PUSH
64110: EMPTY
64111: LIST
64112: LIST
64113: PUSH
64114: LD_INT 1
64116: NEG
64117: PUSH
64118: LD_INT 4
64120: NEG
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: PUSH
64126: LD_INT 2
64128: PUSH
64129: LD_INT 2
64131: NEG
64132: PUSH
64133: EMPTY
64134: LIST
64135: LIST
64136: PUSH
64137: LD_INT 2
64139: NEG
64140: PUSH
64141: LD_INT 4
64143: NEG
64144: PUSH
64145: EMPTY
64146: LIST
64147: LIST
64148: PUSH
64149: LD_INT 4
64151: PUSH
64152: LD_INT 0
64154: PUSH
64155: EMPTY
64156: LIST
64157: LIST
64158: PUSH
64159: LD_INT 4
64161: PUSH
64162: LD_INT 1
64164: NEG
64165: PUSH
64166: EMPTY
64167: LIST
64168: LIST
64169: PUSH
64170: LD_INT 5
64172: PUSH
64173: LD_INT 0
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: PUSH
64180: LD_INT 5
64182: PUSH
64183: LD_INT 1
64185: PUSH
64186: EMPTY
64187: LIST
64188: LIST
64189: PUSH
64190: LD_INT 4
64192: PUSH
64193: LD_INT 1
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: PUSH
64200: LD_INT 3
64202: PUSH
64203: LD_INT 0
64205: PUSH
64206: EMPTY
64207: LIST
64208: LIST
64209: PUSH
64210: LD_INT 3
64212: PUSH
64213: LD_INT 1
64215: NEG
64216: PUSH
64217: EMPTY
64218: LIST
64219: LIST
64220: PUSH
64221: LD_INT 3
64223: PUSH
64224: LD_INT 2
64226: NEG
64227: PUSH
64228: EMPTY
64229: LIST
64230: LIST
64231: PUSH
64232: LD_INT 5
64234: PUSH
64235: LD_INT 2
64237: PUSH
64238: EMPTY
64239: LIST
64240: LIST
64241: PUSH
64242: LD_INT 3
64244: PUSH
64245: LD_INT 3
64247: PUSH
64248: EMPTY
64249: LIST
64250: LIST
64251: PUSH
64252: LD_INT 3
64254: PUSH
64255: LD_INT 2
64257: PUSH
64258: EMPTY
64259: LIST
64260: LIST
64261: PUSH
64262: LD_INT 4
64264: PUSH
64265: LD_INT 3
64267: PUSH
64268: EMPTY
64269: LIST
64270: LIST
64271: PUSH
64272: LD_INT 4
64274: PUSH
64275: LD_INT 4
64277: PUSH
64278: EMPTY
64279: LIST
64280: LIST
64281: PUSH
64282: LD_INT 3
64284: PUSH
64285: LD_INT 4
64287: PUSH
64288: EMPTY
64289: LIST
64290: LIST
64291: PUSH
64292: LD_INT 2
64294: PUSH
64295: LD_INT 3
64297: PUSH
64298: EMPTY
64299: LIST
64300: LIST
64301: PUSH
64302: LD_INT 2
64304: PUSH
64305: LD_INT 2
64307: PUSH
64308: EMPTY
64309: LIST
64310: LIST
64311: PUSH
64312: LD_INT 4
64314: PUSH
64315: LD_INT 2
64317: PUSH
64318: EMPTY
64319: LIST
64320: LIST
64321: PUSH
64322: LD_INT 2
64324: PUSH
64325: LD_INT 4
64327: PUSH
64328: EMPTY
64329: LIST
64330: LIST
64331: PUSH
64332: LD_INT 0
64334: PUSH
64335: LD_INT 4
64337: PUSH
64338: EMPTY
64339: LIST
64340: LIST
64341: PUSH
64342: LD_INT 0
64344: PUSH
64345: LD_INT 3
64347: PUSH
64348: EMPTY
64349: LIST
64350: LIST
64351: PUSH
64352: LD_INT 1
64354: PUSH
64355: LD_INT 4
64357: PUSH
64358: EMPTY
64359: LIST
64360: LIST
64361: PUSH
64362: LD_INT 1
64364: PUSH
64365: LD_INT 5
64367: PUSH
64368: EMPTY
64369: LIST
64370: LIST
64371: PUSH
64372: LD_INT 0
64374: PUSH
64375: LD_INT 5
64377: PUSH
64378: EMPTY
64379: LIST
64380: LIST
64381: PUSH
64382: LD_INT 1
64384: NEG
64385: PUSH
64386: LD_INT 4
64388: PUSH
64389: EMPTY
64390: LIST
64391: LIST
64392: PUSH
64393: LD_INT 1
64395: NEG
64396: PUSH
64397: LD_INT 3
64399: PUSH
64400: EMPTY
64401: LIST
64402: LIST
64403: PUSH
64404: LD_INT 2
64406: PUSH
64407: LD_INT 5
64409: PUSH
64410: EMPTY
64411: LIST
64412: LIST
64413: PUSH
64414: LD_INT 2
64416: NEG
64417: PUSH
64418: LD_INT 3
64420: PUSH
64421: EMPTY
64422: LIST
64423: LIST
64424: PUSH
64425: EMPTY
64426: LIST
64427: LIST
64428: LIST
64429: LIST
64430: LIST
64431: LIST
64432: LIST
64433: LIST
64434: LIST
64435: LIST
64436: LIST
64437: LIST
64438: LIST
64439: LIST
64440: LIST
64441: LIST
64442: LIST
64443: LIST
64444: LIST
64445: LIST
64446: LIST
64447: LIST
64448: LIST
64449: LIST
64450: LIST
64451: LIST
64452: LIST
64453: LIST
64454: LIST
64455: LIST
64456: LIST
64457: LIST
64458: LIST
64459: LIST
64460: LIST
64461: LIST
64462: LIST
64463: LIST
64464: LIST
64465: LIST
64466: LIST
64467: LIST
64468: LIST
64469: LIST
64470: LIST
64471: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
64472: LD_ADDR_VAR 0 34
64476: PUSH
64477: LD_INT 0
64479: PUSH
64480: LD_INT 4
64482: NEG
64483: PUSH
64484: EMPTY
64485: LIST
64486: LIST
64487: PUSH
64488: LD_INT 0
64490: PUSH
64491: LD_INT 5
64493: NEG
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: PUSH
64499: LD_INT 1
64501: PUSH
64502: LD_INT 4
64504: NEG
64505: PUSH
64506: EMPTY
64507: LIST
64508: LIST
64509: PUSH
64510: LD_INT 1
64512: PUSH
64513: LD_INT 3
64515: NEG
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: PUSH
64521: LD_INT 0
64523: PUSH
64524: LD_INT 3
64526: NEG
64527: PUSH
64528: EMPTY
64529: LIST
64530: LIST
64531: PUSH
64532: LD_INT 1
64534: NEG
64535: PUSH
64536: LD_INT 4
64538: NEG
64539: PUSH
64540: EMPTY
64541: LIST
64542: LIST
64543: PUSH
64544: LD_INT 1
64546: NEG
64547: PUSH
64548: LD_INT 5
64550: NEG
64551: PUSH
64552: EMPTY
64553: LIST
64554: LIST
64555: PUSH
64556: LD_INT 2
64558: PUSH
64559: LD_INT 3
64561: NEG
64562: PUSH
64563: EMPTY
64564: LIST
64565: LIST
64566: PUSH
64567: LD_INT 2
64569: NEG
64570: PUSH
64571: LD_INT 5
64573: NEG
64574: PUSH
64575: EMPTY
64576: LIST
64577: LIST
64578: PUSH
64579: LD_INT 3
64581: PUSH
64582: LD_INT 0
64584: PUSH
64585: EMPTY
64586: LIST
64587: LIST
64588: PUSH
64589: LD_INT 3
64591: PUSH
64592: LD_INT 1
64594: NEG
64595: PUSH
64596: EMPTY
64597: LIST
64598: LIST
64599: PUSH
64600: LD_INT 4
64602: PUSH
64603: LD_INT 0
64605: PUSH
64606: EMPTY
64607: LIST
64608: LIST
64609: PUSH
64610: LD_INT 4
64612: PUSH
64613: LD_INT 1
64615: PUSH
64616: EMPTY
64617: LIST
64618: LIST
64619: PUSH
64620: LD_INT 3
64622: PUSH
64623: LD_INT 1
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: PUSH
64630: LD_INT 2
64632: PUSH
64633: LD_INT 0
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: PUSH
64640: LD_INT 2
64642: PUSH
64643: LD_INT 1
64645: NEG
64646: PUSH
64647: EMPTY
64648: LIST
64649: LIST
64650: PUSH
64651: LD_INT 2
64653: PUSH
64654: LD_INT 2
64656: NEG
64657: PUSH
64658: EMPTY
64659: LIST
64660: LIST
64661: PUSH
64662: LD_INT 4
64664: PUSH
64665: LD_INT 2
64667: PUSH
64668: EMPTY
64669: LIST
64670: LIST
64671: PUSH
64672: LD_INT 4
64674: PUSH
64675: LD_INT 4
64677: PUSH
64678: EMPTY
64679: LIST
64680: LIST
64681: PUSH
64682: LD_INT 4
64684: PUSH
64685: LD_INT 3
64687: PUSH
64688: EMPTY
64689: LIST
64690: LIST
64691: PUSH
64692: LD_INT 5
64694: PUSH
64695: LD_INT 4
64697: PUSH
64698: EMPTY
64699: LIST
64700: LIST
64701: PUSH
64702: LD_INT 5
64704: PUSH
64705: LD_INT 5
64707: PUSH
64708: EMPTY
64709: LIST
64710: LIST
64711: PUSH
64712: LD_INT 4
64714: PUSH
64715: LD_INT 5
64717: PUSH
64718: EMPTY
64719: LIST
64720: LIST
64721: PUSH
64722: LD_INT 3
64724: PUSH
64725: LD_INT 4
64727: PUSH
64728: EMPTY
64729: LIST
64730: LIST
64731: PUSH
64732: LD_INT 3
64734: PUSH
64735: LD_INT 3
64737: PUSH
64738: EMPTY
64739: LIST
64740: LIST
64741: PUSH
64742: LD_INT 5
64744: PUSH
64745: LD_INT 3
64747: PUSH
64748: EMPTY
64749: LIST
64750: LIST
64751: PUSH
64752: LD_INT 3
64754: PUSH
64755: LD_INT 5
64757: PUSH
64758: EMPTY
64759: LIST
64760: LIST
64761: PUSH
64762: LD_INT 0
64764: PUSH
64765: LD_INT 3
64767: PUSH
64768: EMPTY
64769: LIST
64770: LIST
64771: PUSH
64772: LD_INT 0
64774: PUSH
64775: LD_INT 2
64777: PUSH
64778: EMPTY
64779: LIST
64780: LIST
64781: PUSH
64782: LD_INT 1
64784: PUSH
64785: LD_INT 3
64787: PUSH
64788: EMPTY
64789: LIST
64790: LIST
64791: PUSH
64792: LD_INT 1
64794: PUSH
64795: LD_INT 4
64797: PUSH
64798: EMPTY
64799: LIST
64800: LIST
64801: PUSH
64802: LD_INT 0
64804: PUSH
64805: LD_INT 4
64807: PUSH
64808: EMPTY
64809: LIST
64810: LIST
64811: PUSH
64812: LD_INT 1
64814: NEG
64815: PUSH
64816: LD_INT 3
64818: PUSH
64819: EMPTY
64820: LIST
64821: LIST
64822: PUSH
64823: LD_INT 1
64825: NEG
64826: PUSH
64827: LD_INT 2
64829: PUSH
64830: EMPTY
64831: LIST
64832: LIST
64833: PUSH
64834: LD_INT 2
64836: PUSH
64837: LD_INT 4
64839: PUSH
64840: EMPTY
64841: LIST
64842: LIST
64843: PUSH
64844: LD_INT 2
64846: NEG
64847: PUSH
64848: LD_INT 2
64850: PUSH
64851: EMPTY
64852: LIST
64853: LIST
64854: PUSH
64855: LD_INT 4
64857: NEG
64858: PUSH
64859: LD_INT 0
64861: PUSH
64862: EMPTY
64863: LIST
64864: LIST
64865: PUSH
64866: LD_INT 4
64868: NEG
64869: PUSH
64870: LD_INT 1
64872: NEG
64873: PUSH
64874: EMPTY
64875: LIST
64876: LIST
64877: PUSH
64878: LD_INT 3
64880: NEG
64881: PUSH
64882: LD_INT 0
64884: PUSH
64885: EMPTY
64886: LIST
64887: LIST
64888: PUSH
64889: LD_INT 3
64891: NEG
64892: PUSH
64893: LD_INT 1
64895: PUSH
64896: EMPTY
64897: LIST
64898: LIST
64899: PUSH
64900: LD_INT 4
64902: NEG
64903: PUSH
64904: LD_INT 1
64906: PUSH
64907: EMPTY
64908: LIST
64909: LIST
64910: PUSH
64911: LD_INT 5
64913: NEG
64914: PUSH
64915: LD_INT 0
64917: PUSH
64918: EMPTY
64919: LIST
64920: LIST
64921: PUSH
64922: LD_INT 5
64924: NEG
64925: PUSH
64926: LD_INT 1
64928: NEG
64929: PUSH
64930: EMPTY
64931: LIST
64932: LIST
64933: PUSH
64934: LD_INT 5
64936: NEG
64937: PUSH
64938: LD_INT 2
64940: NEG
64941: PUSH
64942: EMPTY
64943: LIST
64944: LIST
64945: PUSH
64946: LD_INT 3
64948: NEG
64949: PUSH
64950: LD_INT 2
64952: PUSH
64953: EMPTY
64954: LIST
64955: LIST
64956: PUSH
64957: EMPTY
64958: LIST
64959: LIST
64960: LIST
64961: LIST
64962: LIST
64963: LIST
64964: LIST
64965: LIST
64966: LIST
64967: LIST
64968: LIST
64969: LIST
64970: LIST
64971: LIST
64972: LIST
64973: LIST
64974: LIST
64975: LIST
64976: LIST
64977: LIST
64978: LIST
64979: LIST
64980: LIST
64981: LIST
64982: LIST
64983: LIST
64984: LIST
64985: LIST
64986: LIST
64987: LIST
64988: LIST
64989: LIST
64990: LIST
64991: LIST
64992: LIST
64993: LIST
64994: LIST
64995: LIST
64996: LIST
64997: LIST
64998: LIST
64999: LIST
65000: LIST
65001: LIST
65002: LIST
65003: ST_TO_ADDR
// end ; end ;
65004: GO 65007
65006: POP
// case btype of b_depot , b_warehouse :
65007: LD_VAR 0 1
65011: PUSH
65012: LD_INT 0
65014: DOUBLE
65015: EQUAL
65016: IFTRUE 65026
65018: LD_INT 1
65020: DOUBLE
65021: EQUAL
65022: IFTRUE 65026
65024: GO 65227
65026: POP
// case nation of nation_american :
65027: LD_VAR 0 5
65031: PUSH
65032: LD_INT 1
65034: DOUBLE
65035: EQUAL
65036: IFTRUE 65040
65038: GO 65096
65040: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
65041: LD_ADDR_VAR 0 9
65045: PUSH
65046: LD_VAR 0 11
65050: PUSH
65051: LD_VAR 0 12
65055: PUSH
65056: LD_VAR 0 13
65060: PUSH
65061: LD_VAR 0 14
65065: PUSH
65066: LD_VAR 0 15
65070: PUSH
65071: LD_VAR 0 16
65075: PUSH
65076: EMPTY
65077: LIST
65078: LIST
65079: LIST
65080: LIST
65081: LIST
65082: LIST
65083: PUSH
65084: LD_VAR 0 4
65088: PUSH
65089: LD_INT 1
65091: PLUS
65092: ARRAY
65093: ST_TO_ADDR
65094: GO 65225
65096: LD_INT 2
65098: DOUBLE
65099: EQUAL
65100: IFTRUE 65104
65102: GO 65160
65104: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
65105: LD_ADDR_VAR 0 9
65109: PUSH
65110: LD_VAR 0 17
65114: PUSH
65115: LD_VAR 0 18
65119: PUSH
65120: LD_VAR 0 19
65124: PUSH
65125: LD_VAR 0 20
65129: PUSH
65130: LD_VAR 0 21
65134: PUSH
65135: LD_VAR 0 22
65139: PUSH
65140: EMPTY
65141: LIST
65142: LIST
65143: LIST
65144: LIST
65145: LIST
65146: LIST
65147: PUSH
65148: LD_VAR 0 4
65152: PUSH
65153: LD_INT 1
65155: PLUS
65156: ARRAY
65157: ST_TO_ADDR
65158: GO 65225
65160: LD_INT 3
65162: DOUBLE
65163: EQUAL
65164: IFTRUE 65168
65166: GO 65224
65168: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
65169: LD_ADDR_VAR 0 9
65173: PUSH
65174: LD_VAR 0 23
65178: PUSH
65179: LD_VAR 0 24
65183: PUSH
65184: LD_VAR 0 25
65188: PUSH
65189: LD_VAR 0 26
65193: PUSH
65194: LD_VAR 0 27
65198: PUSH
65199: LD_VAR 0 28
65203: PUSH
65204: EMPTY
65205: LIST
65206: LIST
65207: LIST
65208: LIST
65209: LIST
65210: LIST
65211: PUSH
65212: LD_VAR 0 4
65216: PUSH
65217: LD_INT 1
65219: PLUS
65220: ARRAY
65221: ST_TO_ADDR
65222: GO 65225
65224: POP
65225: GO 65780
65227: LD_INT 2
65229: DOUBLE
65230: EQUAL
65231: IFTRUE 65241
65233: LD_INT 3
65235: DOUBLE
65236: EQUAL
65237: IFTRUE 65241
65239: GO 65297
65241: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
65242: LD_ADDR_VAR 0 9
65246: PUSH
65247: LD_VAR 0 29
65251: PUSH
65252: LD_VAR 0 30
65256: PUSH
65257: LD_VAR 0 31
65261: PUSH
65262: LD_VAR 0 32
65266: PUSH
65267: LD_VAR 0 33
65271: PUSH
65272: LD_VAR 0 34
65276: PUSH
65277: EMPTY
65278: LIST
65279: LIST
65280: LIST
65281: LIST
65282: LIST
65283: LIST
65284: PUSH
65285: LD_VAR 0 4
65289: PUSH
65290: LD_INT 1
65292: PLUS
65293: ARRAY
65294: ST_TO_ADDR
65295: GO 65780
65297: LD_INT 16
65299: DOUBLE
65300: EQUAL
65301: IFTRUE 65359
65303: LD_INT 17
65305: DOUBLE
65306: EQUAL
65307: IFTRUE 65359
65309: LD_INT 18
65311: DOUBLE
65312: EQUAL
65313: IFTRUE 65359
65315: LD_INT 19
65317: DOUBLE
65318: EQUAL
65319: IFTRUE 65359
65321: LD_INT 22
65323: DOUBLE
65324: EQUAL
65325: IFTRUE 65359
65327: LD_INT 20
65329: DOUBLE
65330: EQUAL
65331: IFTRUE 65359
65333: LD_INT 21
65335: DOUBLE
65336: EQUAL
65337: IFTRUE 65359
65339: LD_INT 23
65341: DOUBLE
65342: EQUAL
65343: IFTRUE 65359
65345: LD_INT 24
65347: DOUBLE
65348: EQUAL
65349: IFTRUE 65359
65351: LD_INT 25
65353: DOUBLE
65354: EQUAL
65355: IFTRUE 65359
65357: GO 65415
65359: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
65360: LD_ADDR_VAR 0 9
65364: PUSH
65365: LD_VAR 0 35
65369: PUSH
65370: LD_VAR 0 36
65374: PUSH
65375: LD_VAR 0 37
65379: PUSH
65380: LD_VAR 0 38
65384: PUSH
65385: LD_VAR 0 39
65389: PUSH
65390: LD_VAR 0 40
65394: PUSH
65395: EMPTY
65396: LIST
65397: LIST
65398: LIST
65399: LIST
65400: LIST
65401: LIST
65402: PUSH
65403: LD_VAR 0 4
65407: PUSH
65408: LD_INT 1
65410: PLUS
65411: ARRAY
65412: ST_TO_ADDR
65413: GO 65780
65415: LD_INT 6
65417: DOUBLE
65418: EQUAL
65419: IFTRUE 65471
65421: LD_INT 7
65423: DOUBLE
65424: EQUAL
65425: IFTRUE 65471
65427: LD_INT 8
65429: DOUBLE
65430: EQUAL
65431: IFTRUE 65471
65433: LD_INT 13
65435: DOUBLE
65436: EQUAL
65437: IFTRUE 65471
65439: LD_INT 12
65441: DOUBLE
65442: EQUAL
65443: IFTRUE 65471
65445: LD_INT 15
65447: DOUBLE
65448: EQUAL
65449: IFTRUE 65471
65451: LD_INT 11
65453: DOUBLE
65454: EQUAL
65455: IFTRUE 65471
65457: LD_INT 14
65459: DOUBLE
65460: EQUAL
65461: IFTRUE 65471
65463: LD_INT 10
65465: DOUBLE
65466: EQUAL
65467: IFTRUE 65471
65469: GO 65527
65471: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
65472: LD_ADDR_VAR 0 9
65476: PUSH
65477: LD_VAR 0 41
65481: PUSH
65482: LD_VAR 0 42
65486: PUSH
65487: LD_VAR 0 43
65491: PUSH
65492: LD_VAR 0 44
65496: PUSH
65497: LD_VAR 0 45
65501: PUSH
65502: LD_VAR 0 46
65506: PUSH
65507: EMPTY
65508: LIST
65509: LIST
65510: LIST
65511: LIST
65512: LIST
65513: LIST
65514: PUSH
65515: LD_VAR 0 4
65519: PUSH
65520: LD_INT 1
65522: PLUS
65523: ARRAY
65524: ST_TO_ADDR
65525: GO 65780
65527: LD_INT 36
65529: DOUBLE
65530: EQUAL
65531: IFTRUE 65535
65533: GO 65591
65535: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
65536: LD_ADDR_VAR 0 9
65540: PUSH
65541: LD_VAR 0 47
65545: PUSH
65546: LD_VAR 0 48
65550: PUSH
65551: LD_VAR 0 49
65555: PUSH
65556: LD_VAR 0 50
65560: PUSH
65561: LD_VAR 0 51
65565: PUSH
65566: LD_VAR 0 52
65570: PUSH
65571: EMPTY
65572: LIST
65573: LIST
65574: LIST
65575: LIST
65576: LIST
65577: LIST
65578: PUSH
65579: LD_VAR 0 4
65583: PUSH
65584: LD_INT 1
65586: PLUS
65587: ARRAY
65588: ST_TO_ADDR
65589: GO 65780
65591: LD_INT 4
65593: DOUBLE
65594: EQUAL
65595: IFTRUE 65617
65597: LD_INT 5
65599: DOUBLE
65600: EQUAL
65601: IFTRUE 65617
65603: LD_INT 34
65605: DOUBLE
65606: EQUAL
65607: IFTRUE 65617
65609: LD_INT 37
65611: DOUBLE
65612: EQUAL
65613: IFTRUE 65617
65615: GO 65673
65617: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
65618: LD_ADDR_VAR 0 9
65622: PUSH
65623: LD_VAR 0 53
65627: PUSH
65628: LD_VAR 0 54
65632: PUSH
65633: LD_VAR 0 55
65637: PUSH
65638: LD_VAR 0 56
65642: PUSH
65643: LD_VAR 0 57
65647: PUSH
65648: LD_VAR 0 58
65652: PUSH
65653: EMPTY
65654: LIST
65655: LIST
65656: LIST
65657: LIST
65658: LIST
65659: LIST
65660: PUSH
65661: LD_VAR 0 4
65665: PUSH
65666: LD_INT 1
65668: PLUS
65669: ARRAY
65670: ST_TO_ADDR
65671: GO 65780
65673: LD_INT 31
65675: DOUBLE
65676: EQUAL
65677: IFTRUE 65723
65679: LD_INT 32
65681: DOUBLE
65682: EQUAL
65683: IFTRUE 65723
65685: LD_INT 33
65687: DOUBLE
65688: EQUAL
65689: IFTRUE 65723
65691: LD_INT 27
65693: DOUBLE
65694: EQUAL
65695: IFTRUE 65723
65697: LD_INT 26
65699: DOUBLE
65700: EQUAL
65701: IFTRUE 65723
65703: LD_INT 28
65705: DOUBLE
65706: EQUAL
65707: IFTRUE 65723
65709: LD_INT 29
65711: DOUBLE
65712: EQUAL
65713: IFTRUE 65723
65715: LD_INT 30
65717: DOUBLE
65718: EQUAL
65719: IFTRUE 65723
65721: GO 65779
65723: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
65724: LD_ADDR_VAR 0 9
65728: PUSH
65729: LD_VAR 0 59
65733: PUSH
65734: LD_VAR 0 60
65738: PUSH
65739: LD_VAR 0 61
65743: PUSH
65744: LD_VAR 0 62
65748: PUSH
65749: LD_VAR 0 63
65753: PUSH
65754: LD_VAR 0 64
65758: PUSH
65759: EMPTY
65760: LIST
65761: LIST
65762: LIST
65763: LIST
65764: LIST
65765: LIST
65766: PUSH
65767: LD_VAR 0 4
65771: PUSH
65772: LD_INT 1
65774: PLUS
65775: ARRAY
65776: ST_TO_ADDR
65777: GO 65780
65779: POP
// temp_list2 = [ ] ;
65780: LD_ADDR_VAR 0 10
65784: PUSH
65785: EMPTY
65786: ST_TO_ADDR
// for i in temp_list do
65787: LD_ADDR_VAR 0 8
65791: PUSH
65792: LD_VAR 0 9
65796: PUSH
65797: FOR_IN
65798: IFFALSE 65850
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
65800: LD_ADDR_VAR 0 10
65804: PUSH
65805: LD_VAR 0 10
65809: PUSH
65810: LD_VAR 0 8
65814: PUSH
65815: LD_INT 1
65817: ARRAY
65818: PUSH
65819: LD_VAR 0 2
65823: PLUS
65824: PUSH
65825: LD_VAR 0 8
65829: PUSH
65830: LD_INT 2
65832: ARRAY
65833: PUSH
65834: LD_VAR 0 3
65838: PLUS
65839: PUSH
65840: EMPTY
65841: LIST
65842: LIST
65843: PUSH
65844: EMPTY
65845: LIST
65846: ADD
65847: ST_TO_ADDR
65848: GO 65797
65850: POP
65851: POP
// result = temp_list2 ;
65852: LD_ADDR_VAR 0 7
65856: PUSH
65857: LD_VAR 0 10
65861: ST_TO_ADDR
// end ;
65862: LD_VAR 0 7
65866: RET
// export function EnemyInRange ( unit , dist ) ; begin
65867: LD_INT 0
65869: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
65870: LD_ADDR_VAR 0 3
65874: PUSH
65875: LD_VAR 0 1
65879: PPUSH
65880: CALL_OW 255
65884: PPUSH
65885: LD_VAR 0 1
65889: PPUSH
65890: CALL_OW 250
65894: PPUSH
65895: LD_VAR 0 1
65899: PPUSH
65900: CALL_OW 251
65904: PPUSH
65905: LD_VAR 0 2
65909: PPUSH
65910: CALL 39240 0 4
65914: PUSH
65915: LD_INT 4
65917: ARRAY
65918: ST_TO_ADDR
// end ;
65919: LD_VAR 0 3
65923: RET
// export function PlayerSeeMe ( unit ) ; begin
65924: LD_INT 0
65926: PPUSH
// result := See ( your_side , unit ) ;
65927: LD_ADDR_VAR 0 2
65931: PUSH
65932: LD_OWVAR 2
65936: PPUSH
65937: LD_VAR 0 1
65941: PPUSH
65942: CALL_OW 292
65946: ST_TO_ADDR
// end ;
65947: LD_VAR 0 2
65951: RET
// export function ReverseDir ( unit ) ; begin
65952: LD_INT 0
65954: PPUSH
// if not unit then
65955: LD_VAR 0 1
65959: NOT
65960: IFFALSE 65964
// exit ;
65962: GO 65987
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
65964: LD_ADDR_VAR 0 2
65968: PUSH
65969: LD_VAR 0 1
65973: PPUSH
65974: CALL_OW 254
65978: PUSH
65979: LD_INT 3
65981: PLUS
65982: PUSH
65983: LD_INT 6
65985: MOD
65986: ST_TO_ADDR
// end ;
65987: LD_VAR 0 2
65991: RET
// export function ReverseArray ( array ) ; var i ; begin
65992: LD_INT 0
65994: PPUSH
65995: PPUSH
// if not array then
65996: LD_VAR 0 1
66000: NOT
66001: IFFALSE 66005
// exit ;
66003: GO 66060
// result := [ ] ;
66005: LD_ADDR_VAR 0 2
66009: PUSH
66010: EMPTY
66011: ST_TO_ADDR
// for i := array downto 1 do
66012: LD_ADDR_VAR 0 3
66016: PUSH
66017: DOUBLE
66018: LD_VAR 0 1
66022: INC
66023: ST_TO_ADDR
66024: LD_INT 1
66026: PUSH
66027: FOR_DOWNTO
66028: IFFALSE 66058
// result := Join ( result , array [ i ] ) ;
66030: LD_ADDR_VAR 0 2
66034: PUSH
66035: LD_VAR 0 2
66039: PPUSH
66040: LD_VAR 0 1
66044: PUSH
66045: LD_VAR 0 3
66049: ARRAY
66050: PPUSH
66051: CALL 70705 0 2
66055: ST_TO_ADDR
66056: GO 66027
66058: POP
66059: POP
// end ;
66060: LD_VAR 0 2
66064: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
66065: LD_INT 0
66067: PPUSH
66068: PPUSH
66069: PPUSH
66070: PPUSH
66071: PPUSH
66072: PPUSH
// if not unit or not hexes then
66073: LD_VAR 0 1
66077: NOT
66078: PUSH
66079: LD_VAR 0 2
66083: NOT
66084: OR
66085: IFFALSE 66089
// exit ;
66087: GO 66212
// dist := 9999 ;
66089: LD_ADDR_VAR 0 5
66093: PUSH
66094: LD_INT 9999
66096: ST_TO_ADDR
// for i = 1 to hexes do
66097: LD_ADDR_VAR 0 4
66101: PUSH
66102: DOUBLE
66103: LD_INT 1
66105: DEC
66106: ST_TO_ADDR
66107: LD_VAR 0 2
66111: PUSH
66112: FOR_TO
66113: IFFALSE 66200
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
66115: LD_ADDR_VAR 0 6
66119: PUSH
66120: LD_VAR 0 1
66124: PPUSH
66125: LD_VAR 0 2
66129: PUSH
66130: LD_VAR 0 4
66134: ARRAY
66135: PUSH
66136: LD_INT 1
66138: ARRAY
66139: PPUSH
66140: LD_VAR 0 2
66144: PUSH
66145: LD_VAR 0 4
66149: ARRAY
66150: PUSH
66151: LD_INT 2
66153: ARRAY
66154: PPUSH
66155: CALL_OW 297
66159: ST_TO_ADDR
// if tdist < dist then
66160: LD_VAR 0 6
66164: PUSH
66165: LD_VAR 0 5
66169: LESS
66170: IFFALSE 66198
// begin hex := hexes [ i ] ;
66172: LD_ADDR_VAR 0 8
66176: PUSH
66177: LD_VAR 0 2
66181: PUSH
66182: LD_VAR 0 4
66186: ARRAY
66187: ST_TO_ADDR
// dist := tdist ;
66188: LD_ADDR_VAR 0 5
66192: PUSH
66193: LD_VAR 0 6
66197: ST_TO_ADDR
// end ; end ;
66198: GO 66112
66200: POP
66201: POP
// result := hex ;
66202: LD_ADDR_VAR 0 3
66206: PUSH
66207: LD_VAR 0 8
66211: ST_TO_ADDR
// end ;
66212: LD_VAR 0 3
66216: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
66217: LD_INT 0
66219: PPUSH
66220: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
66221: LD_VAR 0 1
66225: NOT
66226: PUSH
66227: LD_VAR 0 1
66231: PUSH
66232: LD_INT 21
66234: PUSH
66235: LD_INT 2
66237: PUSH
66238: EMPTY
66239: LIST
66240: LIST
66241: PUSH
66242: LD_INT 23
66244: PUSH
66245: LD_INT 2
66247: PUSH
66248: EMPTY
66249: LIST
66250: LIST
66251: PUSH
66252: EMPTY
66253: LIST
66254: LIST
66255: PPUSH
66256: CALL_OW 69
66260: IN
66261: NOT
66262: OR
66263: IFFALSE 66267
// exit ;
66265: GO 66314
// for i = 1 to 3 do
66267: LD_ADDR_VAR 0 3
66271: PUSH
66272: DOUBLE
66273: LD_INT 1
66275: DEC
66276: ST_TO_ADDR
66277: LD_INT 3
66279: PUSH
66280: FOR_TO
66281: IFFALSE 66312
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
66283: LD_VAR 0 1
66287: PPUSH
66288: CALL_OW 250
66292: PPUSH
66293: LD_VAR 0 1
66297: PPUSH
66298: CALL_OW 251
66302: PPUSH
66303: LD_INT 1
66305: PPUSH
66306: CALL_OW 453
66310: GO 66280
66312: POP
66313: POP
// end ;
66314: LD_VAR 0 2
66318: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
66319: LD_INT 0
66321: PPUSH
66322: PPUSH
66323: PPUSH
66324: PPUSH
66325: PPUSH
66326: PPUSH
// if not unit or not enemy_unit then
66327: LD_VAR 0 1
66331: NOT
66332: PUSH
66333: LD_VAR 0 2
66337: NOT
66338: OR
66339: IFFALSE 66343
// exit ;
66341: GO 66810
// if GetLives ( i ) < 250 then
66343: LD_VAR 0 4
66347: PPUSH
66348: CALL_OW 256
66352: PUSH
66353: LD_INT 250
66355: LESS
66356: IFFALSE 66369
// begin ComAutodestruct ( i ) ;
66358: LD_VAR 0 4
66362: PPUSH
66363: CALL 66217 0 1
// exit ;
66367: GO 66810
// end ; x := GetX ( enemy_unit ) ;
66369: LD_ADDR_VAR 0 7
66373: PUSH
66374: LD_VAR 0 2
66378: PPUSH
66379: CALL_OW 250
66383: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
66384: LD_ADDR_VAR 0 8
66388: PUSH
66389: LD_VAR 0 2
66393: PPUSH
66394: CALL_OW 251
66398: ST_TO_ADDR
// if not x or not y then
66399: LD_VAR 0 7
66403: NOT
66404: PUSH
66405: LD_VAR 0 8
66409: NOT
66410: OR
66411: IFFALSE 66415
// exit ;
66413: GO 66810
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
66415: LD_ADDR_VAR 0 6
66419: PUSH
66420: LD_VAR 0 7
66424: PPUSH
66425: LD_INT 0
66427: PPUSH
66428: LD_INT 4
66430: PPUSH
66431: CALL_OW 272
66435: PUSH
66436: LD_VAR 0 8
66440: PPUSH
66441: LD_INT 0
66443: PPUSH
66444: LD_INT 4
66446: PPUSH
66447: CALL_OW 273
66451: PUSH
66452: EMPTY
66453: LIST
66454: LIST
66455: PUSH
66456: LD_VAR 0 7
66460: PPUSH
66461: LD_INT 1
66463: PPUSH
66464: LD_INT 4
66466: PPUSH
66467: CALL_OW 272
66471: PUSH
66472: LD_VAR 0 8
66476: PPUSH
66477: LD_INT 1
66479: PPUSH
66480: LD_INT 4
66482: PPUSH
66483: CALL_OW 273
66487: PUSH
66488: EMPTY
66489: LIST
66490: LIST
66491: PUSH
66492: LD_VAR 0 7
66496: PPUSH
66497: LD_INT 2
66499: PPUSH
66500: LD_INT 4
66502: PPUSH
66503: CALL_OW 272
66507: PUSH
66508: LD_VAR 0 8
66512: PPUSH
66513: LD_INT 2
66515: PPUSH
66516: LD_INT 4
66518: PPUSH
66519: CALL_OW 273
66523: PUSH
66524: EMPTY
66525: LIST
66526: LIST
66527: PUSH
66528: LD_VAR 0 7
66532: PPUSH
66533: LD_INT 3
66535: PPUSH
66536: LD_INT 4
66538: PPUSH
66539: CALL_OW 272
66543: PUSH
66544: LD_VAR 0 8
66548: PPUSH
66549: LD_INT 3
66551: PPUSH
66552: LD_INT 4
66554: PPUSH
66555: CALL_OW 273
66559: PUSH
66560: EMPTY
66561: LIST
66562: LIST
66563: PUSH
66564: LD_VAR 0 7
66568: PPUSH
66569: LD_INT 4
66571: PPUSH
66572: LD_INT 4
66574: PPUSH
66575: CALL_OW 272
66579: PUSH
66580: LD_VAR 0 8
66584: PPUSH
66585: LD_INT 4
66587: PPUSH
66588: LD_INT 4
66590: PPUSH
66591: CALL_OW 273
66595: PUSH
66596: EMPTY
66597: LIST
66598: LIST
66599: PUSH
66600: LD_VAR 0 7
66604: PPUSH
66605: LD_INT 5
66607: PPUSH
66608: LD_INT 4
66610: PPUSH
66611: CALL_OW 272
66615: PUSH
66616: LD_VAR 0 8
66620: PPUSH
66621: LD_INT 5
66623: PPUSH
66624: LD_INT 4
66626: PPUSH
66627: CALL_OW 273
66631: PUSH
66632: EMPTY
66633: LIST
66634: LIST
66635: PUSH
66636: EMPTY
66637: LIST
66638: LIST
66639: LIST
66640: LIST
66641: LIST
66642: LIST
66643: ST_TO_ADDR
// for i = tmp downto 1 do
66644: LD_ADDR_VAR 0 4
66648: PUSH
66649: DOUBLE
66650: LD_VAR 0 6
66654: INC
66655: ST_TO_ADDR
66656: LD_INT 1
66658: PUSH
66659: FOR_DOWNTO
66660: IFFALSE 66761
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
66662: LD_VAR 0 6
66666: PUSH
66667: LD_VAR 0 4
66671: ARRAY
66672: PUSH
66673: LD_INT 1
66675: ARRAY
66676: PPUSH
66677: LD_VAR 0 6
66681: PUSH
66682: LD_VAR 0 4
66686: ARRAY
66687: PUSH
66688: LD_INT 2
66690: ARRAY
66691: PPUSH
66692: CALL_OW 488
66696: NOT
66697: PUSH
66698: LD_VAR 0 6
66702: PUSH
66703: LD_VAR 0 4
66707: ARRAY
66708: PUSH
66709: LD_INT 1
66711: ARRAY
66712: PPUSH
66713: LD_VAR 0 6
66717: PUSH
66718: LD_VAR 0 4
66722: ARRAY
66723: PUSH
66724: LD_INT 2
66726: ARRAY
66727: PPUSH
66728: CALL_OW 428
66732: PUSH
66733: LD_INT 0
66735: NONEQUAL
66736: OR
66737: IFFALSE 66759
// tmp := Delete ( tmp , i ) ;
66739: LD_ADDR_VAR 0 6
66743: PUSH
66744: LD_VAR 0 6
66748: PPUSH
66749: LD_VAR 0 4
66753: PPUSH
66754: CALL_OW 3
66758: ST_TO_ADDR
66759: GO 66659
66761: POP
66762: POP
// j := GetClosestHex ( unit , tmp ) ;
66763: LD_ADDR_VAR 0 5
66767: PUSH
66768: LD_VAR 0 1
66772: PPUSH
66773: LD_VAR 0 6
66777: PPUSH
66778: CALL 66065 0 2
66782: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
66783: LD_VAR 0 1
66787: PPUSH
66788: LD_VAR 0 5
66792: PUSH
66793: LD_INT 1
66795: ARRAY
66796: PPUSH
66797: LD_VAR 0 5
66801: PUSH
66802: LD_INT 2
66804: ARRAY
66805: PPUSH
66806: CALL_OW 111
// end ;
66810: LD_VAR 0 3
66814: RET
// export function PrepareApemanSoldier ( ) ; begin
66815: LD_INT 0
66817: PPUSH
// uc_nation := 0 ;
66818: LD_ADDR_OWVAR 21
66822: PUSH
66823: LD_INT 0
66825: ST_TO_ADDR
// hc_sex := sex_male ;
66826: LD_ADDR_OWVAR 27
66830: PUSH
66831: LD_INT 1
66833: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
66834: LD_ADDR_OWVAR 28
66838: PUSH
66839: LD_INT 15
66841: ST_TO_ADDR
// hc_gallery :=  ;
66842: LD_ADDR_OWVAR 33
66846: PUSH
66847: LD_STRING 
66849: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66850: LD_ADDR_OWVAR 31
66854: PUSH
66855: LD_INT 0
66857: PPUSH
66858: LD_INT 3
66860: PPUSH
66861: CALL_OW 12
66865: PUSH
66866: LD_INT 0
66868: PPUSH
66869: LD_INT 3
66871: PPUSH
66872: CALL_OW 12
66876: PUSH
66877: LD_INT 0
66879: PUSH
66880: LD_INT 0
66882: PUSH
66883: EMPTY
66884: LIST
66885: LIST
66886: LIST
66887: LIST
66888: ST_TO_ADDR
// end ;
66889: LD_VAR 0 1
66893: RET
// export function PrepareApemanEngineer ( ) ; begin
66894: LD_INT 0
66896: PPUSH
// uc_nation := 0 ;
66897: LD_ADDR_OWVAR 21
66901: PUSH
66902: LD_INT 0
66904: ST_TO_ADDR
// hc_sex := sex_male ;
66905: LD_ADDR_OWVAR 27
66909: PUSH
66910: LD_INT 1
66912: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
66913: LD_ADDR_OWVAR 28
66917: PUSH
66918: LD_INT 16
66920: ST_TO_ADDR
// hc_gallery :=  ;
66921: LD_ADDR_OWVAR 33
66925: PUSH
66926: LD_STRING 
66928: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66929: LD_ADDR_OWVAR 31
66933: PUSH
66934: LD_INT 0
66936: PPUSH
66937: LD_INT 3
66939: PPUSH
66940: CALL_OW 12
66944: PUSH
66945: LD_INT 0
66947: PPUSH
66948: LD_INT 3
66950: PPUSH
66951: CALL_OW 12
66955: PUSH
66956: LD_INT 0
66958: PUSH
66959: LD_INT 0
66961: PUSH
66962: EMPTY
66963: LIST
66964: LIST
66965: LIST
66966: LIST
66967: ST_TO_ADDR
// end ;
66968: LD_VAR 0 1
66972: RET
// export function PrepareApeman ( agressivity ) ; begin
66973: LD_INT 0
66975: PPUSH
// uc_side := 0 ;
66976: LD_ADDR_OWVAR 20
66980: PUSH
66981: LD_INT 0
66983: ST_TO_ADDR
// uc_nation := 0 ;
66984: LD_ADDR_OWVAR 21
66988: PUSH
66989: LD_INT 0
66991: ST_TO_ADDR
// hc_sex := sex_male ;
66992: LD_ADDR_OWVAR 27
66996: PUSH
66997: LD_INT 1
66999: ST_TO_ADDR
// hc_class := class_apeman ;
67000: LD_ADDR_OWVAR 28
67004: PUSH
67005: LD_INT 12
67007: ST_TO_ADDR
// hc_gallery :=  ;
67008: LD_ADDR_OWVAR 33
67012: PUSH
67013: LD_STRING 
67015: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
67016: LD_ADDR_OWVAR 35
67020: PUSH
67021: LD_VAR 0 1
67025: NEG
67026: PPUSH
67027: LD_VAR 0 1
67031: PPUSH
67032: CALL_OW 12
67036: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
67037: LD_ADDR_OWVAR 31
67041: PUSH
67042: LD_INT 0
67044: PPUSH
67045: LD_INT 3
67047: PPUSH
67048: CALL_OW 12
67052: PUSH
67053: LD_INT 0
67055: PPUSH
67056: LD_INT 3
67058: PPUSH
67059: CALL_OW 12
67063: PUSH
67064: LD_INT 0
67066: PUSH
67067: LD_INT 0
67069: PUSH
67070: EMPTY
67071: LIST
67072: LIST
67073: LIST
67074: LIST
67075: ST_TO_ADDR
// end ;
67076: LD_VAR 0 2
67080: RET
// export function PrepareTiger ( agressivity ) ; begin
67081: LD_INT 0
67083: PPUSH
// uc_side := 0 ;
67084: LD_ADDR_OWVAR 20
67088: PUSH
67089: LD_INT 0
67091: ST_TO_ADDR
// uc_nation := 0 ;
67092: LD_ADDR_OWVAR 21
67096: PUSH
67097: LD_INT 0
67099: ST_TO_ADDR
// hc_class := class_tiger ;
67100: LD_ADDR_OWVAR 28
67104: PUSH
67105: LD_INT 14
67107: ST_TO_ADDR
// hc_gallery :=  ;
67108: LD_ADDR_OWVAR 33
67112: PUSH
67113: LD_STRING 
67115: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
67116: LD_ADDR_OWVAR 35
67120: PUSH
67121: LD_VAR 0 1
67125: NEG
67126: PPUSH
67127: LD_VAR 0 1
67131: PPUSH
67132: CALL_OW 12
67136: ST_TO_ADDR
// end ;
67137: LD_VAR 0 2
67141: RET
// export function PrepareEnchidna ( ) ; begin
67142: LD_INT 0
67144: PPUSH
// uc_side := 0 ;
67145: LD_ADDR_OWVAR 20
67149: PUSH
67150: LD_INT 0
67152: ST_TO_ADDR
// uc_nation := 0 ;
67153: LD_ADDR_OWVAR 21
67157: PUSH
67158: LD_INT 0
67160: ST_TO_ADDR
// hc_class := class_baggie ;
67161: LD_ADDR_OWVAR 28
67165: PUSH
67166: LD_INT 13
67168: ST_TO_ADDR
// hc_gallery :=  ;
67169: LD_ADDR_OWVAR 33
67173: PUSH
67174: LD_STRING 
67176: ST_TO_ADDR
// end ;
67177: LD_VAR 0 1
67181: RET
// export function PrepareFrog ( ) ; begin
67182: LD_INT 0
67184: PPUSH
// uc_side := 0 ;
67185: LD_ADDR_OWVAR 20
67189: PUSH
67190: LD_INT 0
67192: ST_TO_ADDR
// uc_nation := 0 ;
67193: LD_ADDR_OWVAR 21
67197: PUSH
67198: LD_INT 0
67200: ST_TO_ADDR
// hc_class := class_frog ;
67201: LD_ADDR_OWVAR 28
67205: PUSH
67206: LD_INT 19
67208: ST_TO_ADDR
// hc_gallery :=  ;
67209: LD_ADDR_OWVAR 33
67213: PUSH
67214: LD_STRING 
67216: ST_TO_ADDR
// end ;
67217: LD_VAR 0 1
67221: RET
// export function PrepareFish ( ) ; begin
67222: LD_INT 0
67224: PPUSH
// uc_side := 0 ;
67225: LD_ADDR_OWVAR 20
67229: PUSH
67230: LD_INT 0
67232: ST_TO_ADDR
// uc_nation := 0 ;
67233: LD_ADDR_OWVAR 21
67237: PUSH
67238: LD_INT 0
67240: ST_TO_ADDR
// hc_class := class_fish ;
67241: LD_ADDR_OWVAR 28
67245: PUSH
67246: LD_INT 20
67248: ST_TO_ADDR
// hc_gallery :=  ;
67249: LD_ADDR_OWVAR 33
67253: PUSH
67254: LD_STRING 
67256: ST_TO_ADDR
// end ;
67257: LD_VAR 0 1
67261: RET
// export function PrepareBird ( ) ; begin
67262: LD_INT 0
67264: PPUSH
// uc_side := 0 ;
67265: LD_ADDR_OWVAR 20
67269: PUSH
67270: LD_INT 0
67272: ST_TO_ADDR
// uc_nation := 0 ;
67273: LD_ADDR_OWVAR 21
67277: PUSH
67278: LD_INT 0
67280: ST_TO_ADDR
// hc_class := class_phororhacos ;
67281: LD_ADDR_OWVAR 28
67285: PUSH
67286: LD_INT 18
67288: ST_TO_ADDR
// hc_gallery :=  ;
67289: LD_ADDR_OWVAR 33
67293: PUSH
67294: LD_STRING 
67296: ST_TO_ADDR
// end ;
67297: LD_VAR 0 1
67301: RET
// export function PrepareHorse ( ) ; begin
67302: LD_INT 0
67304: PPUSH
// uc_side := 0 ;
67305: LD_ADDR_OWVAR 20
67309: PUSH
67310: LD_INT 0
67312: ST_TO_ADDR
// uc_nation := 0 ;
67313: LD_ADDR_OWVAR 21
67317: PUSH
67318: LD_INT 0
67320: ST_TO_ADDR
// hc_class := class_horse ;
67321: LD_ADDR_OWVAR 28
67325: PUSH
67326: LD_INT 21
67328: ST_TO_ADDR
// hc_gallery :=  ;
67329: LD_ADDR_OWVAR 33
67333: PUSH
67334: LD_STRING 
67336: ST_TO_ADDR
// end ;
67337: LD_VAR 0 1
67341: RET
// export function PrepareMastodont ( ) ; begin
67342: LD_INT 0
67344: PPUSH
// uc_side := 0 ;
67345: LD_ADDR_OWVAR 20
67349: PUSH
67350: LD_INT 0
67352: ST_TO_ADDR
// uc_nation := 0 ;
67353: LD_ADDR_OWVAR 21
67357: PUSH
67358: LD_INT 0
67360: ST_TO_ADDR
// vc_chassis := class_mastodont ;
67361: LD_ADDR_OWVAR 37
67365: PUSH
67366: LD_INT 31
67368: ST_TO_ADDR
// vc_control := control_rider ;
67369: LD_ADDR_OWVAR 38
67373: PUSH
67374: LD_INT 4
67376: ST_TO_ADDR
// end ;
67377: LD_VAR 0 1
67381: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
67382: LD_INT 0
67384: PPUSH
67385: PPUSH
67386: PPUSH
// uc_side = 0 ;
67387: LD_ADDR_OWVAR 20
67391: PUSH
67392: LD_INT 0
67394: ST_TO_ADDR
// uc_nation = 0 ;
67395: LD_ADDR_OWVAR 21
67399: PUSH
67400: LD_INT 0
67402: ST_TO_ADDR
// InitHc_All ( ) ;
67403: CALL_OW 584
// InitVc ;
67407: CALL_OW 20
// if mastodonts then
67411: LD_VAR 0 6
67415: IFFALSE 67482
// for i = 1 to mastodonts do
67417: LD_ADDR_VAR 0 11
67421: PUSH
67422: DOUBLE
67423: LD_INT 1
67425: DEC
67426: ST_TO_ADDR
67427: LD_VAR 0 6
67431: PUSH
67432: FOR_TO
67433: IFFALSE 67480
// begin vc_chassis := 31 ;
67435: LD_ADDR_OWVAR 37
67439: PUSH
67440: LD_INT 31
67442: ST_TO_ADDR
// vc_control := control_rider ;
67443: LD_ADDR_OWVAR 38
67447: PUSH
67448: LD_INT 4
67450: ST_TO_ADDR
// animal := CreateVehicle ;
67451: LD_ADDR_VAR 0 12
67455: PUSH
67456: CALL_OW 45
67460: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67461: LD_VAR 0 12
67465: PPUSH
67466: LD_VAR 0 8
67470: PPUSH
67471: LD_INT 0
67473: PPUSH
67474: CALL 69610 0 3
// end ;
67478: GO 67432
67480: POP
67481: POP
// if horses then
67482: LD_VAR 0 5
67486: IFFALSE 67553
// for i = 1 to horses do
67488: LD_ADDR_VAR 0 11
67492: PUSH
67493: DOUBLE
67494: LD_INT 1
67496: DEC
67497: ST_TO_ADDR
67498: LD_VAR 0 5
67502: PUSH
67503: FOR_TO
67504: IFFALSE 67551
// begin hc_class := 21 ;
67506: LD_ADDR_OWVAR 28
67510: PUSH
67511: LD_INT 21
67513: ST_TO_ADDR
// hc_gallery :=  ;
67514: LD_ADDR_OWVAR 33
67518: PUSH
67519: LD_STRING 
67521: ST_TO_ADDR
// animal := CreateHuman ;
67522: LD_ADDR_VAR 0 12
67526: PUSH
67527: CALL_OW 44
67531: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67532: LD_VAR 0 12
67536: PPUSH
67537: LD_VAR 0 8
67541: PPUSH
67542: LD_INT 0
67544: PPUSH
67545: CALL 69610 0 3
// end ;
67549: GO 67503
67551: POP
67552: POP
// if birds then
67553: LD_VAR 0 1
67557: IFFALSE 67624
// for i = 1 to birds do
67559: LD_ADDR_VAR 0 11
67563: PUSH
67564: DOUBLE
67565: LD_INT 1
67567: DEC
67568: ST_TO_ADDR
67569: LD_VAR 0 1
67573: PUSH
67574: FOR_TO
67575: IFFALSE 67622
// begin hc_class := 18 ;
67577: LD_ADDR_OWVAR 28
67581: PUSH
67582: LD_INT 18
67584: ST_TO_ADDR
// hc_gallery =  ;
67585: LD_ADDR_OWVAR 33
67589: PUSH
67590: LD_STRING 
67592: ST_TO_ADDR
// animal := CreateHuman ;
67593: LD_ADDR_VAR 0 12
67597: PUSH
67598: CALL_OW 44
67602: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67603: LD_VAR 0 12
67607: PPUSH
67608: LD_VAR 0 8
67612: PPUSH
67613: LD_INT 0
67615: PPUSH
67616: CALL 69610 0 3
// end ;
67620: GO 67574
67622: POP
67623: POP
// if tigers then
67624: LD_VAR 0 2
67628: IFFALSE 67712
// for i = 1 to tigers do
67630: LD_ADDR_VAR 0 11
67634: PUSH
67635: DOUBLE
67636: LD_INT 1
67638: DEC
67639: ST_TO_ADDR
67640: LD_VAR 0 2
67644: PUSH
67645: FOR_TO
67646: IFFALSE 67710
// begin hc_class = class_tiger ;
67648: LD_ADDR_OWVAR 28
67652: PUSH
67653: LD_INT 14
67655: ST_TO_ADDR
// hc_gallery =  ;
67656: LD_ADDR_OWVAR 33
67660: PUSH
67661: LD_STRING 
67663: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
67664: LD_ADDR_OWVAR 35
67668: PUSH
67669: LD_INT 7
67671: NEG
67672: PPUSH
67673: LD_INT 7
67675: PPUSH
67676: CALL_OW 12
67680: ST_TO_ADDR
// animal := CreateHuman ;
67681: LD_ADDR_VAR 0 12
67685: PUSH
67686: CALL_OW 44
67690: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67691: LD_VAR 0 12
67695: PPUSH
67696: LD_VAR 0 8
67700: PPUSH
67701: LD_INT 0
67703: PPUSH
67704: CALL 69610 0 3
// end ;
67708: GO 67645
67710: POP
67711: POP
// if apemans then
67712: LD_VAR 0 3
67716: IFFALSE 67839
// for i = 1 to apemans do
67718: LD_ADDR_VAR 0 11
67722: PUSH
67723: DOUBLE
67724: LD_INT 1
67726: DEC
67727: ST_TO_ADDR
67728: LD_VAR 0 3
67732: PUSH
67733: FOR_TO
67734: IFFALSE 67837
// begin hc_class = class_apeman ;
67736: LD_ADDR_OWVAR 28
67740: PUSH
67741: LD_INT 12
67743: ST_TO_ADDR
// hc_gallery =  ;
67744: LD_ADDR_OWVAR 33
67748: PUSH
67749: LD_STRING 
67751: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
67752: LD_ADDR_OWVAR 35
67756: PUSH
67757: LD_INT 2
67759: NEG
67760: PPUSH
67761: LD_INT 2
67763: PPUSH
67764: CALL_OW 12
67768: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
67769: LD_ADDR_OWVAR 31
67773: PUSH
67774: LD_INT 1
67776: PPUSH
67777: LD_INT 3
67779: PPUSH
67780: CALL_OW 12
67784: PUSH
67785: LD_INT 1
67787: PPUSH
67788: LD_INT 3
67790: PPUSH
67791: CALL_OW 12
67795: PUSH
67796: LD_INT 0
67798: PUSH
67799: LD_INT 0
67801: PUSH
67802: EMPTY
67803: LIST
67804: LIST
67805: LIST
67806: LIST
67807: ST_TO_ADDR
// animal := CreateHuman ;
67808: LD_ADDR_VAR 0 12
67812: PUSH
67813: CALL_OW 44
67817: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67818: LD_VAR 0 12
67822: PPUSH
67823: LD_VAR 0 8
67827: PPUSH
67828: LD_INT 0
67830: PPUSH
67831: CALL 69610 0 3
// end ;
67835: GO 67733
67837: POP
67838: POP
// if enchidnas then
67839: LD_VAR 0 4
67843: IFFALSE 67910
// for i = 1 to enchidnas do
67845: LD_ADDR_VAR 0 11
67849: PUSH
67850: DOUBLE
67851: LD_INT 1
67853: DEC
67854: ST_TO_ADDR
67855: LD_VAR 0 4
67859: PUSH
67860: FOR_TO
67861: IFFALSE 67908
// begin hc_class = 13 ;
67863: LD_ADDR_OWVAR 28
67867: PUSH
67868: LD_INT 13
67870: ST_TO_ADDR
// hc_gallery =  ;
67871: LD_ADDR_OWVAR 33
67875: PUSH
67876: LD_STRING 
67878: ST_TO_ADDR
// animal := CreateHuman ;
67879: LD_ADDR_VAR 0 12
67883: PUSH
67884: CALL_OW 44
67888: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67889: LD_VAR 0 12
67893: PPUSH
67894: LD_VAR 0 8
67898: PPUSH
67899: LD_INT 0
67901: PPUSH
67902: CALL 69610 0 3
// end ;
67906: GO 67860
67908: POP
67909: POP
// if fishes then
67910: LD_VAR 0 7
67914: IFFALSE 67981
// for i = 1 to fishes do
67916: LD_ADDR_VAR 0 11
67920: PUSH
67921: DOUBLE
67922: LD_INT 1
67924: DEC
67925: ST_TO_ADDR
67926: LD_VAR 0 7
67930: PUSH
67931: FOR_TO
67932: IFFALSE 67979
// begin hc_class = 20 ;
67934: LD_ADDR_OWVAR 28
67938: PUSH
67939: LD_INT 20
67941: ST_TO_ADDR
// hc_gallery =  ;
67942: LD_ADDR_OWVAR 33
67946: PUSH
67947: LD_STRING 
67949: ST_TO_ADDR
// animal := CreateHuman ;
67950: LD_ADDR_VAR 0 12
67954: PUSH
67955: CALL_OW 44
67959: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
67960: LD_VAR 0 12
67964: PPUSH
67965: LD_VAR 0 9
67969: PPUSH
67970: LD_INT 0
67972: PPUSH
67973: CALL 69610 0 3
// end ;
67977: GO 67931
67979: POP
67980: POP
// end ;
67981: LD_VAR 0 10
67985: RET
// export function WantHeal ( sci , unit ) ; begin
67986: LD_INT 0
67988: PPUSH
// if GetTaskList ( sci ) > 0 then
67989: LD_VAR 0 1
67993: PPUSH
67994: CALL_OW 437
67998: PUSH
67999: LD_INT 0
68001: GREATER
68002: IFFALSE 68072
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
68004: LD_VAR 0 1
68008: PPUSH
68009: CALL_OW 437
68013: PUSH
68014: LD_INT 1
68016: ARRAY
68017: PUSH
68018: LD_INT 1
68020: ARRAY
68021: PUSH
68022: LD_STRING l
68024: EQUAL
68025: PUSH
68026: LD_VAR 0 1
68030: PPUSH
68031: CALL_OW 437
68035: PUSH
68036: LD_INT 1
68038: ARRAY
68039: PUSH
68040: LD_INT 4
68042: ARRAY
68043: PUSH
68044: LD_VAR 0 2
68048: EQUAL
68049: AND
68050: IFFALSE 68062
// result := true else
68052: LD_ADDR_VAR 0 3
68056: PUSH
68057: LD_INT 1
68059: ST_TO_ADDR
68060: GO 68070
// result := false ;
68062: LD_ADDR_VAR 0 3
68066: PUSH
68067: LD_INT 0
68069: ST_TO_ADDR
// end else
68070: GO 68080
// result := false ;
68072: LD_ADDR_VAR 0 3
68076: PUSH
68077: LD_INT 0
68079: ST_TO_ADDR
// end ;
68080: LD_VAR 0 3
68084: RET
// export function HealTarget ( sci ) ; begin
68085: LD_INT 0
68087: PPUSH
// if not sci then
68088: LD_VAR 0 1
68092: NOT
68093: IFFALSE 68097
// exit ;
68095: GO 68162
// result := 0 ;
68097: LD_ADDR_VAR 0 2
68101: PUSH
68102: LD_INT 0
68104: ST_TO_ADDR
// if GetTaskList ( sci ) then
68105: LD_VAR 0 1
68109: PPUSH
68110: CALL_OW 437
68114: IFFALSE 68162
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
68116: LD_VAR 0 1
68120: PPUSH
68121: CALL_OW 437
68125: PUSH
68126: LD_INT 1
68128: ARRAY
68129: PUSH
68130: LD_INT 1
68132: ARRAY
68133: PUSH
68134: LD_STRING l
68136: EQUAL
68137: IFFALSE 68162
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
68139: LD_ADDR_VAR 0 2
68143: PUSH
68144: LD_VAR 0 1
68148: PPUSH
68149: CALL_OW 437
68153: PUSH
68154: LD_INT 1
68156: ARRAY
68157: PUSH
68158: LD_INT 4
68160: ARRAY
68161: ST_TO_ADDR
// end ;
68162: LD_VAR 0 2
68166: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
68167: LD_INT 0
68169: PPUSH
68170: PPUSH
68171: PPUSH
68172: PPUSH
// if not base_units then
68173: LD_VAR 0 1
68177: NOT
68178: IFFALSE 68182
// exit ;
68180: GO 68269
// result := false ;
68182: LD_ADDR_VAR 0 2
68186: PUSH
68187: LD_INT 0
68189: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
68190: LD_ADDR_VAR 0 5
68194: PUSH
68195: LD_VAR 0 1
68199: PPUSH
68200: LD_INT 21
68202: PUSH
68203: LD_INT 3
68205: PUSH
68206: EMPTY
68207: LIST
68208: LIST
68209: PPUSH
68210: CALL_OW 72
68214: ST_TO_ADDR
// if not tmp then
68215: LD_VAR 0 5
68219: NOT
68220: IFFALSE 68224
// exit ;
68222: GO 68269
// for i in tmp do
68224: LD_ADDR_VAR 0 3
68228: PUSH
68229: LD_VAR 0 5
68233: PUSH
68234: FOR_IN
68235: IFFALSE 68267
// begin result := EnemyInRange ( i , 22 ) ;
68237: LD_ADDR_VAR 0 2
68241: PUSH
68242: LD_VAR 0 3
68246: PPUSH
68247: LD_INT 22
68249: PPUSH
68250: CALL 65867 0 2
68254: ST_TO_ADDR
// if result then
68255: LD_VAR 0 2
68259: IFFALSE 68265
// exit ;
68261: POP
68262: POP
68263: GO 68269
// end ;
68265: GO 68234
68267: POP
68268: POP
// end ;
68269: LD_VAR 0 2
68273: RET
// export function FilterByTag ( units , tag ) ; begin
68274: LD_INT 0
68276: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
68277: LD_ADDR_VAR 0 3
68281: PUSH
68282: LD_VAR 0 1
68286: PPUSH
68287: LD_INT 120
68289: PUSH
68290: LD_VAR 0 2
68294: PUSH
68295: EMPTY
68296: LIST
68297: LIST
68298: PPUSH
68299: CALL_OW 72
68303: ST_TO_ADDR
// end ;
68304: LD_VAR 0 3
68308: RET
// export function IsDriver ( un ) ; begin
68309: LD_INT 0
68311: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
68312: LD_ADDR_VAR 0 2
68316: PUSH
68317: LD_VAR 0 1
68321: PUSH
68322: LD_INT 55
68324: PUSH
68325: EMPTY
68326: LIST
68327: PPUSH
68328: CALL_OW 69
68332: IN
68333: ST_TO_ADDR
// end ;
68334: LD_VAR 0 2
68338: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
68339: LD_INT 0
68341: PPUSH
68342: PPUSH
// list := [ ] ;
68343: LD_ADDR_VAR 0 5
68347: PUSH
68348: EMPTY
68349: ST_TO_ADDR
// case d of 0 :
68350: LD_VAR 0 3
68354: PUSH
68355: LD_INT 0
68357: DOUBLE
68358: EQUAL
68359: IFTRUE 68363
68361: GO 68496
68363: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
68364: LD_ADDR_VAR 0 5
68368: PUSH
68369: LD_VAR 0 1
68373: PUSH
68374: LD_INT 4
68376: MINUS
68377: PUSH
68378: LD_VAR 0 2
68382: PUSH
68383: LD_INT 4
68385: MINUS
68386: PUSH
68387: LD_INT 2
68389: PUSH
68390: EMPTY
68391: LIST
68392: LIST
68393: LIST
68394: PUSH
68395: LD_VAR 0 1
68399: PUSH
68400: LD_INT 3
68402: MINUS
68403: PUSH
68404: LD_VAR 0 2
68408: PUSH
68409: LD_INT 1
68411: PUSH
68412: EMPTY
68413: LIST
68414: LIST
68415: LIST
68416: PUSH
68417: LD_VAR 0 1
68421: PUSH
68422: LD_INT 4
68424: PLUS
68425: PUSH
68426: LD_VAR 0 2
68430: PUSH
68431: LD_INT 4
68433: PUSH
68434: EMPTY
68435: LIST
68436: LIST
68437: LIST
68438: PUSH
68439: LD_VAR 0 1
68443: PUSH
68444: LD_INT 3
68446: PLUS
68447: PUSH
68448: LD_VAR 0 2
68452: PUSH
68453: LD_INT 3
68455: PLUS
68456: PUSH
68457: LD_INT 5
68459: PUSH
68460: EMPTY
68461: LIST
68462: LIST
68463: LIST
68464: PUSH
68465: LD_VAR 0 1
68469: PUSH
68470: LD_VAR 0 2
68474: PUSH
68475: LD_INT 4
68477: PLUS
68478: PUSH
68479: LD_INT 0
68481: PUSH
68482: EMPTY
68483: LIST
68484: LIST
68485: LIST
68486: PUSH
68487: EMPTY
68488: LIST
68489: LIST
68490: LIST
68491: LIST
68492: LIST
68493: ST_TO_ADDR
// end ; 1 :
68494: GO 69194
68496: LD_INT 1
68498: DOUBLE
68499: EQUAL
68500: IFTRUE 68504
68502: GO 68637
68504: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
68505: LD_ADDR_VAR 0 5
68509: PUSH
68510: LD_VAR 0 1
68514: PUSH
68515: LD_VAR 0 2
68519: PUSH
68520: LD_INT 4
68522: MINUS
68523: PUSH
68524: LD_INT 3
68526: PUSH
68527: EMPTY
68528: LIST
68529: LIST
68530: LIST
68531: PUSH
68532: LD_VAR 0 1
68536: PUSH
68537: LD_INT 3
68539: MINUS
68540: PUSH
68541: LD_VAR 0 2
68545: PUSH
68546: LD_INT 3
68548: MINUS
68549: PUSH
68550: LD_INT 2
68552: PUSH
68553: EMPTY
68554: LIST
68555: LIST
68556: LIST
68557: PUSH
68558: LD_VAR 0 1
68562: PUSH
68563: LD_INT 4
68565: MINUS
68566: PUSH
68567: LD_VAR 0 2
68571: PUSH
68572: LD_INT 1
68574: PUSH
68575: EMPTY
68576: LIST
68577: LIST
68578: LIST
68579: PUSH
68580: LD_VAR 0 1
68584: PUSH
68585: LD_VAR 0 2
68589: PUSH
68590: LD_INT 3
68592: PLUS
68593: PUSH
68594: LD_INT 0
68596: PUSH
68597: EMPTY
68598: LIST
68599: LIST
68600: LIST
68601: PUSH
68602: LD_VAR 0 1
68606: PUSH
68607: LD_INT 4
68609: PLUS
68610: PUSH
68611: LD_VAR 0 2
68615: PUSH
68616: LD_INT 4
68618: PLUS
68619: PUSH
68620: LD_INT 5
68622: PUSH
68623: EMPTY
68624: LIST
68625: LIST
68626: LIST
68627: PUSH
68628: EMPTY
68629: LIST
68630: LIST
68631: LIST
68632: LIST
68633: LIST
68634: ST_TO_ADDR
// end ; 2 :
68635: GO 69194
68637: LD_INT 2
68639: DOUBLE
68640: EQUAL
68641: IFTRUE 68645
68643: GO 68774
68645: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
68646: LD_ADDR_VAR 0 5
68650: PUSH
68651: LD_VAR 0 1
68655: PUSH
68656: LD_VAR 0 2
68660: PUSH
68661: LD_INT 3
68663: MINUS
68664: PUSH
68665: LD_INT 3
68667: PUSH
68668: EMPTY
68669: LIST
68670: LIST
68671: LIST
68672: PUSH
68673: LD_VAR 0 1
68677: PUSH
68678: LD_INT 4
68680: PLUS
68681: PUSH
68682: LD_VAR 0 2
68686: PUSH
68687: LD_INT 4
68689: PUSH
68690: EMPTY
68691: LIST
68692: LIST
68693: LIST
68694: PUSH
68695: LD_VAR 0 1
68699: PUSH
68700: LD_VAR 0 2
68704: PUSH
68705: LD_INT 4
68707: PLUS
68708: PUSH
68709: LD_INT 0
68711: PUSH
68712: EMPTY
68713: LIST
68714: LIST
68715: LIST
68716: PUSH
68717: LD_VAR 0 1
68721: PUSH
68722: LD_INT 3
68724: MINUS
68725: PUSH
68726: LD_VAR 0 2
68730: PUSH
68731: LD_INT 1
68733: PUSH
68734: EMPTY
68735: LIST
68736: LIST
68737: LIST
68738: PUSH
68739: LD_VAR 0 1
68743: PUSH
68744: LD_INT 4
68746: MINUS
68747: PUSH
68748: LD_VAR 0 2
68752: PUSH
68753: LD_INT 4
68755: MINUS
68756: PUSH
68757: LD_INT 2
68759: PUSH
68760: EMPTY
68761: LIST
68762: LIST
68763: LIST
68764: PUSH
68765: EMPTY
68766: LIST
68767: LIST
68768: LIST
68769: LIST
68770: LIST
68771: ST_TO_ADDR
// end ; 3 :
68772: GO 69194
68774: LD_INT 3
68776: DOUBLE
68777: EQUAL
68778: IFTRUE 68782
68780: GO 68915
68782: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
68783: LD_ADDR_VAR 0 5
68787: PUSH
68788: LD_VAR 0 1
68792: PUSH
68793: LD_INT 3
68795: PLUS
68796: PUSH
68797: LD_VAR 0 2
68801: PUSH
68802: LD_INT 4
68804: PUSH
68805: EMPTY
68806: LIST
68807: LIST
68808: LIST
68809: PUSH
68810: LD_VAR 0 1
68814: PUSH
68815: LD_INT 4
68817: PLUS
68818: PUSH
68819: LD_VAR 0 2
68823: PUSH
68824: LD_INT 4
68826: PLUS
68827: PUSH
68828: LD_INT 5
68830: PUSH
68831: EMPTY
68832: LIST
68833: LIST
68834: LIST
68835: PUSH
68836: LD_VAR 0 1
68840: PUSH
68841: LD_INT 4
68843: MINUS
68844: PUSH
68845: LD_VAR 0 2
68849: PUSH
68850: LD_INT 1
68852: PUSH
68853: EMPTY
68854: LIST
68855: LIST
68856: LIST
68857: PUSH
68858: LD_VAR 0 1
68862: PUSH
68863: LD_VAR 0 2
68867: PUSH
68868: LD_INT 4
68870: MINUS
68871: PUSH
68872: LD_INT 3
68874: PUSH
68875: EMPTY
68876: LIST
68877: LIST
68878: LIST
68879: PUSH
68880: LD_VAR 0 1
68884: PUSH
68885: LD_INT 3
68887: MINUS
68888: PUSH
68889: LD_VAR 0 2
68893: PUSH
68894: LD_INT 3
68896: MINUS
68897: PUSH
68898: LD_INT 2
68900: PUSH
68901: EMPTY
68902: LIST
68903: LIST
68904: LIST
68905: PUSH
68906: EMPTY
68907: LIST
68908: LIST
68909: LIST
68910: LIST
68911: LIST
68912: ST_TO_ADDR
// end ; 4 :
68913: GO 69194
68915: LD_INT 4
68917: DOUBLE
68918: EQUAL
68919: IFTRUE 68923
68921: GO 69056
68923: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
68924: LD_ADDR_VAR 0 5
68928: PUSH
68929: LD_VAR 0 1
68933: PUSH
68934: LD_VAR 0 2
68938: PUSH
68939: LD_INT 4
68941: PLUS
68942: PUSH
68943: LD_INT 0
68945: PUSH
68946: EMPTY
68947: LIST
68948: LIST
68949: LIST
68950: PUSH
68951: LD_VAR 0 1
68955: PUSH
68956: LD_INT 3
68958: PLUS
68959: PUSH
68960: LD_VAR 0 2
68964: PUSH
68965: LD_INT 3
68967: PLUS
68968: PUSH
68969: LD_INT 5
68971: PUSH
68972: EMPTY
68973: LIST
68974: LIST
68975: LIST
68976: PUSH
68977: LD_VAR 0 1
68981: PUSH
68982: LD_INT 4
68984: PLUS
68985: PUSH
68986: LD_VAR 0 2
68990: PUSH
68991: LD_INT 4
68993: PUSH
68994: EMPTY
68995: LIST
68996: LIST
68997: LIST
68998: PUSH
68999: LD_VAR 0 1
69003: PUSH
69004: LD_VAR 0 2
69008: PUSH
69009: LD_INT 3
69011: MINUS
69012: PUSH
69013: LD_INT 3
69015: PUSH
69016: EMPTY
69017: LIST
69018: LIST
69019: LIST
69020: PUSH
69021: LD_VAR 0 1
69025: PUSH
69026: LD_INT 4
69028: MINUS
69029: PUSH
69030: LD_VAR 0 2
69034: PUSH
69035: LD_INT 4
69037: MINUS
69038: PUSH
69039: LD_INT 2
69041: PUSH
69042: EMPTY
69043: LIST
69044: LIST
69045: LIST
69046: PUSH
69047: EMPTY
69048: LIST
69049: LIST
69050: LIST
69051: LIST
69052: LIST
69053: ST_TO_ADDR
// end ; 5 :
69054: GO 69194
69056: LD_INT 5
69058: DOUBLE
69059: EQUAL
69060: IFTRUE 69064
69062: GO 69193
69064: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
69065: LD_ADDR_VAR 0 5
69069: PUSH
69070: LD_VAR 0 1
69074: PUSH
69075: LD_INT 4
69077: MINUS
69078: PUSH
69079: LD_VAR 0 2
69083: PUSH
69084: LD_INT 1
69086: PUSH
69087: EMPTY
69088: LIST
69089: LIST
69090: LIST
69091: PUSH
69092: LD_VAR 0 1
69096: PUSH
69097: LD_VAR 0 2
69101: PUSH
69102: LD_INT 4
69104: MINUS
69105: PUSH
69106: LD_INT 3
69108: PUSH
69109: EMPTY
69110: LIST
69111: LIST
69112: LIST
69113: PUSH
69114: LD_VAR 0 1
69118: PUSH
69119: LD_INT 4
69121: PLUS
69122: PUSH
69123: LD_VAR 0 2
69127: PUSH
69128: LD_INT 4
69130: PLUS
69131: PUSH
69132: LD_INT 5
69134: PUSH
69135: EMPTY
69136: LIST
69137: LIST
69138: LIST
69139: PUSH
69140: LD_VAR 0 1
69144: PUSH
69145: LD_INT 3
69147: PLUS
69148: PUSH
69149: LD_VAR 0 2
69153: PUSH
69154: LD_INT 4
69156: PUSH
69157: EMPTY
69158: LIST
69159: LIST
69160: LIST
69161: PUSH
69162: LD_VAR 0 1
69166: PUSH
69167: LD_VAR 0 2
69171: PUSH
69172: LD_INT 3
69174: PLUS
69175: PUSH
69176: LD_INT 0
69178: PUSH
69179: EMPTY
69180: LIST
69181: LIST
69182: LIST
69183: PUSH
69184: EMPTY
69185: LIST
69186: LIST
69187: LIST
69188: LIST
69189: LIST
69190: ST_TO_ADDR
// end ; end ;
69191: GO 69194
69193: POP
// result := list ;
69194: LD_ADDR_VAR 0 4
69198: PUSH
69199: LD_VAR 0 5
69203: ST_TO_ADDR
// end ;
69204: LD_VAR 0 4
69208: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
69209: LD_INT 0
69211: PPUSH
69212: PPUSH
69213: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
69214: LD_VAR 0 1
69218: NOT
69219: PUSH
69220: LD_VAR 0 2
69224: PUSH
69225: LD_INT 1
69227: PUSH
69228: LD_INT 2
69230: PUSH
69231: LD_INT 3
69233: PUSH
69234: LD_INT 4
69236: PUSH
69237: EMPTY
69238: LIST
69239: LIST
69240: LIST
69241: LIST
69242: IN
69243: NOT
69244: OR
69245: IFFALSE 69249
// exit ;
69247: GO 69332
// tmp := [ ] ;
69249: LD_ADDR_VAR 0 5
69253: PUSH
69254: EMPTY
69255: ST_TO_ADDR
// for i in units do
69256: LD_ADDR_VAR 0 4
69260: PUSH
69261: LD_VAR 0 1
69265: PUSH
69266: FOR_IN
69267: IFFALSE 69301
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
69269: LD_ADDR_VAR 0 5
69273: PUSH
69274: LD_VAR 0 5
69278: PPUSH
69279: LD_VAR 0 4
69283: PPUSH
69284: LD_VAR 0 2
69288: PPUSH
69289: CALL_OW 259
69293: PPUSH
69294: CALL 70705 0 2
69298: ST_TO_ADDR
69299: GO 69266
69301: POP
69302: POP
// if not tmp then
69303: LD_VAR 0 5
69307: NOT
69308: IFFALSE 69312
// exit ;
69310: GO 69332
// result := SortListByListDesc ( units , tmp ) ;
69312: LD_ADDR_VAR 0 3
69316: PUSH
69317: LD_VAR 0 1
69321: PPUSH
69322: LD_VAR 0 5
69326: PPUSH
69327: CALL_OW 77
69331: ST_TO_ADDR
// end ;
69332: LD_VAR 0 3
69336: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
69337: LD_INT 0
69339: PPUSH
69340: PPUSH
69341: PPUSH
// result := false ;
69342: LD_ADDR_VAR 0 3
69346: PUSH
69347: LD_INT 0
69349: ST_TO_ADDR
// if not building then
69350: LD_VAR 0 2
69354: NOT
69355: IFFALSE 69359
// exit ;
69357: GO 69497
// x := GetX ( building ) ;
69359: LD_ADDR_VAR 0 4
69363: PUSH
69364: LD_VAR 0 2
69368: PPUSH
69369: CALL_OW 250
69373: ST_TO_ADDR
// y := GetY ( building ) ;
69374: LD_ADDR_VAR 0 5
69378: PUSH
69379: LD_VAR 0 2
69383: PPUSH
69384: CALL_OW 251
69388: ST_TO_ADDR
// if not x or not y then
69389: LD_VAR 0 4
69393: NOT
69394: PUSH
69395: LD_VAR 0 5
69399: NOT
69400: OR
69401: IFFALSE 69405
// exit ;
69403: GO 69497
// if GetTaskList ( unit ) then
69405: LD_VAR 0 1
69409: PPUSH
69410: CALL_OW 437
69414: IFFALSE 69497
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69416: LD_STRING e
69418: PUSH
69419: LD_VAR 0 1
69423: PPUSH
69424: CALL_OW 437
69428: PUSH
69429: LD_INT 1
69431: ARRAY
69432: PUSH
69433: LD_INT 1
69435: ARRAY
69436: EQUAL
69437: PUSH
69438: LD_VAR 0 4
69442: PUSH
69443: LD_VAR 0 1
69447: PPUSH
69448: CALL_OW 437
69452: PUSH
69453: LD_INT 1
69455: ARRAY
69456: PUSH
69457: LD_INT 2
69459: ARRAY
69460: EQUAL
69461: AND
69462: PUSH
69463: LD_VAR 0 5
69467: PUSH
69468: LD_VAR 0 1
69472: PPUSH
69473: CALL_OW 437
69477: PUSH
69478: LD_INT 1
69480: ARRAY
69481: PUSH
69482: LD_INT 3
69484: ARRAY
69485: EQUAL
69486: AND
69487: IFFALSE 69497
// result := true end ;
69489: LD_ADDR_VAR 0 3
69493: PUSH
69494: LD_INT 1
69496: ST_TO_ADDR
// end ;
69497: LD_VAR 0 3
69501: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
69502: LD_INT 0
69504: PPUSH
// result := false ;
69505: LD_ADDR_VAR 0 4
69509: PUSH
69510: LD_INT 0
69512: ST_TO_ADDR
// if GetTaskList ( unit ) then
69513: LD_VAR 0 1
69517: PPUSH
69518: CALL_OW 437
69522: IFFALSE 69605
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69524: LD_STRING M
69526: PUSH
69527: LD_VAR 0 1
69531: PPUSH
69532: CALL_OW 437
69536: PUSH
69537: LD_INT 1
69539: ARRAY
69540: PUSH
69541: LD_INT 1
69543: ARRAY
69544: EQUAL
69545: PUSH
69546: LD_VAR 0 2
69550: PUSH
69551: LD_VAR 0 1
69555: PPUSH
69556: CALL_OW 437
69560: PUSH
69561: LD_INT 1
69563: ARRAY
69564: PUSH
69565: LD_INT 2
69567: ARRAY
69568: EQUAL
69569: AND
69570: PUSH
69571: LD_VAR 0 3
69575: PUSH
69576: LD_VAR 0 1
69580: PPUSH
69581: CALL_OW 437
69585: PUSH
69586: LD_INT 1
69588: ARRAY
69589: PUSH
69590: LD_INT 3
69592: ARRAY
69593: EQUAL
69594: AND
69595: IFFALSE 69605
// result := true ;
69597: LD_ADDR_VAR 0 4
69601: PUSH
69602: LD_INT 1
69604: ST_TO_ADDR
// end ; end ;
69605: LD_VAR 0 4
69609: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
69610: LD_INT 0
69612: PPUSH
69613: PPUSH
69614: PPUSH
69615: PPUSH
// if not unit or not area then
69616: LD_VAR 0 1
69620: NOT
69621: PUSH
69622: LD_VAR 0 2
69626: NOT
69627: OR
69628: IFFALSE 69632
// exit ;
69630: GO 69808
// tmp := AreaToList ( area , i ) ;
69632: LD_ADDR_VAR 0 6
69636: PUSH
69637: LD_VAR 0 2
69641: PPUSH
69642: LD_VAR 0 5
69646: PPUSH
69647: CALL_OW 517
69651: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
69652: LD_ADDR_VAR 0 5
69656: PUSH
69657: DOUBLE
69658: LD_INT 1
69660: DEC
69661: ST_TO_ADDR
69662: LD_VAR 0 6
69666: PUSH
69667: LD_INT 1
69669: ARRAY
69670: PUSH
69671: FOR_TO
69672: IFFALSE 69806
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
69674: LD_ADDR_VAR 0 7
69678: PUSH
69679: LD_VAR 0 6
69683: PUSH
69684: LD_INT 1
69686: ARRAY
69687: PUSH
69688: LD_VAR 0 5
69692: ARRAY
69693: PUSH
69694: LD_VAR 0 6
69698: PUSH
69699: LD_INT 2
69701: ARRAY
69702: PUSH
69703: LD_VAR 0 5
69707: ARRAY
69708: PUSH
69709: EMPTY
69710: LIST
69711: LIST
69712: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
69713: LD_INT 92
69715: PUSH
69716: LD_VAR 0 7
69720: PUSH
69721: LD_INT 1
69723: ARRAY
69724: PUSH
69725: LD_VAR 0 7
69729: PUSH
69730: LD_INT 2
69732: ARRAY
69733: PUSH
69734: LD_INT 2
69736: PUSH
69737: EMPTY
69738: LIST
69739: LIST
69740: LIST
69741: LIST
69742: PPUSH
69743: CALL_OW 69
69747: PUSH
69748: LD_INT 0
69750: EQUAL
69751: IFFALSE 69804
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
69753: LD_VAR 0 1
69757: PPUSH
69758: LD_VAR 0 7
69762: PUSH
69763: LD_INT 1
69765: ARRAY
69766: PPUSH
69767: LD_VAR 0 7
69771: PUSH
69772: LD_INT 2
69774: ARRAY
69775: PPUSH
69776: LD_VAR 0 3
69780: PPUSH
69781: CALL_OW 48
// result := IsPlaced ( unit ) ;
69785: LD_ADDR_VAR 0 4
69789: PUSH
69790: LD_VAR 0 1
69794: PPUSH
69795: CALL_OW 305
69799: ST_TO_ADDR
// exit ;
69800: POP
69801: POP
69802: GO 69808
// end ; end ;
69804: GO 69671
69806: POP
69807: POP
// end ;
69808: LD_VAR 0 4
69812: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
69813: LD_INT 0
69815: PPUSH
69816: PPUSH
69817: PPUSH
// if not side or side > 8 then
69818: LD_VAR 0 1
69822: NOT
69823: PUSH
69824: LD_VAR 0 1
69828: PUSH
69829: LD_INT 8
69831: GREATER
69832: OR
69833: IFFALSE 69837
// exit ;
69835: GO 70024
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
69837: LD_ADDR_VAR 0 4
69841: PUSH
69842: LD_INT 22
69844: PUSH
69845: LD_VAR 0 1
69849: PUSH
69850: EMPTY
69851: LIST
69852: LIST
69853: PUSH
69854: LD_INT 21
69856: PUSH
69857: LD_INT 3
69859: PUSH
69860: EMPTY
69861: LIST
69862: LIST
69863: PUSH
69864: EMPTY
69865: LIST
69866: LIST
69867: PPUSH
69868: CALL_OW 69
69872: ST_TO_ADDR
// if not tmp then
69873: LD_VAR 0 4
69877: NOT
69878: IFFALSE 69882
// exit ;
69880: GO 70024
// enable_addtolog := true ;
69882: LD_ADDR_OWVAR 81
69886: PUSH
69887: LD_INT 1
69889: ST_TO_ADDR
// AddToLog ( [ ) ;
69890: LD_STRING [
69892: PPUSH
69893: CALL_OW 561
// for i in tmp do
69897: LD_ADDR_VAR 0 3
69901: PUSH
69902: LD_VAR 0 4
69906: PUSH
69907: FOR_IN
69908: IFFALSE 70015
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
69910: LD_STRING [
69912: PUSH
69913: LD_VAR 0 3
69917: PPUSH
69918: CALL_OW 266
69922: STR
69923: PUSH
69924: LD_STRING , 
69926: STR
69927: PUSH
69928: LD_VAR 0 3
69932: PPUSH
69933: CALL_OW 250
69937: STR
69938: PUSH
69939: LD_STRING , 
69941: STR
69942: PUSH
69943: LD_VAR 0 3
69947: PPUSH
69948: CALL_OW 251
69952: STR
69953: PUSH
69954: LD_STRING , 
69956: STR
69957: PUSH
69958: LD_VAR 0 3
69962: PPUSH
69963: CALL_OW 254
69967: STR
69968: PUSH
69969: LD_STRING , 
69971: STR
69972: PUSH
69973: LD_VAR 0 3
69977: PPUSH
69978: LD_INT 1
69980: PPUSH
69981: CALL_OW 268
69985: STR
69986: PUSH
69987: LD_STRING , 
69989: STR
69990: PUSH
69991: LD_VAR 0 3
69995: PPUSH
69996: LD_INT 2
69998: PPUSH
69999: CALL_OW 268
70003: STR
70004: PUSH
70005: LD_STRING ],
70007: STR
70008: PPUSH
70009: CALL_OW 561
// end ;
70013: GO 69907
70015: POP
70016: POP
// AddToLog ( ]; ) ;
70017: LD_STRING ];
70019: PPUSH
70020: CALL_OW 561
// end ;
70024: LD_VAR 0 2
70028: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
70029: LD_INT 0
70031: PPUSH
70032: PPUSH
70033: PPUSH
70034: PPUSH
70035: PPUSH
// if not area or not rate or not max then
70036: LD_VAR 0 1
70040: NOT
70041: PUSH
70042: LD_VAR 0 2
70046: NOT
70047: OR
70048: PUSH
70049: LD_VAR 0 4
70053: NOT
70054: OR
70055: IFFALSE 70059
// exit ;
70057: GO 70248
// while 1 do
70059: LD_INT 1
70061: IFFALSE 70248
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
70063: LD_ADDR_VAR 0 9
70067: PUSH
70068: LD_VAR 0 1
70072: PPUSH
70073: LD_INT 1
70075: PPUSH
70076: CALL_OW 287
70080: PUSH
70081: LD_INT 10
70083: MUL
70084: ST_TO_ADDR
// r := rate / 10 ;
70085: LD_ADDR_VAR 0 7
70089: PUSH
70090: LD_VAR 0 2
70094: PUSH
70095: LD_INT 10
70097: DIVREAL
70098: ST_TO_ADDR
// time := 1 1$00 ;
70099: LD_ADDR_VAR 0 8
70103: PUSH
70104: LD_INT 2100
70106: ST_TO_ADDR
// if amount < min then
70107: LD_VAR 0 9
70111: PUSH
70112: LD_VAR 0 3
70116: LESS
70117: IFFALSE 70135
// r := r * 2 else
70119: LD_ADDR_VAR 0 7
70123: PUSH
70124: LD_VAR 0 7
70128: PUSH
70129: LD_INT 2
70131: MUL
70132: ST_TO_ADDR
70133: GO 70161
// if amount > max then
70135: LD_VAR 0 9
70139: PUSH
70140: LD_VAR 0 4
70144: GREATER
70145: IFFALSE 70161
// r := r / 2 ;
70147: LD_ADDR_VAR 0 7
70151: PUSH
70152: LD_VAR 0 7
70156: PUSH
70157: LD_INT 2
70159: DIVREAL
70160: ST_TO_ADDR
// time := time / r ;
70161: LD_ADDR_VAR 0 8
70165: PUSH
70166: LD_VAR 0 8
70170: PUSH
70171: LD_VAR 0 7
70175: DIVREAL
70176: ST_TO_ADDR
// if time < 0 then
70177: LD_VAR 0 8
70181: PUSH
70182: LD_INT 0
70184: LESS
70185: IFFALSE 70202
// time := time * - 1 ;
70187: LD_ADDR_VAR 0 8
70191: PUSH
70192: LD_VAR 0 8
70196: PUSH
70197: LD_INT 1
70199: NEG
70200: MUL
70201: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
70202: LD_VAR 0 8
70206: PUSH
70207: LD_INT 35
70209: PPUSH
70210: LD_INT 875
70212: PPUSH
70213: CALL_OW 12
70217: PLUS
70218: PPUSH
70219: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
70223: LD_INT 1
70225: PPUSH
70226: LD_INT 5
70228: PPUSH
70229: CALL_OW 12
70233: PPUSH
70234: LD_VAR 0 1
70238: PPUSH
70239: LD_INT 1
70241: PPUSH
70242: CALL_OW 55
// end ;
70246: GO 70059
// end ;
70248: LD_VAR 0 5
70252: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
70253: LD_INT 0
70255: PPUSH
70256: PPUSH
70257: PPUSH
70258: PPUSH
70259: PPUSH
70260: PPUSH
70261: PPUSH
70262: PPUSH
// if not turrets or not factories then
70263: LD_VAR 0 1
70267: NOT
70268: PUSH
70269: LD_VAR 0 2
70273: NOT
70274: OR
70275: IFFALSE 70279
// exit ;
70277: GO 70586
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
70279: LD_ADDR_VAR 0 10
70283: PUSH
70284: LD_INT 5
70286: PUSH
70287: LD_INT 6
70289: PUSH
70290: EMPTY
70291: LIST
70292: LIST
70293: PUSH
70294: LD_INT 2
70296: PUSH
70297: LD_INT 4
70299: PUSH
70300: EMPTY
70301: LIST
70302: LIST
70303: PUSH
70304: LD_INT 3
70306: PUSH
70307: LD_INT 5
70309: PUSH
70310: EMPTY
70311: LIST
70312: LIST
70313: PUSH
70314: EMPTY
70315: LIST
70316: LIST
70317: LIST
70318: PUSH
70319: LD_INT 24
70321: PUSH
70322: LD_INT 25
70324: PUSH
70325: EMPTY
70326: LIST
70327: LIST
70328: PUSH
70329: LD_INT 23
70331: PUSH
70332: LD_INT 27
70334: PUSH
70335: EMPTY
70336: LIST
70337: LIST
70338: PUSH
70339: EMPTY
70340: LIST
70341: LIST
70342: PUSH
70343: LD_INT 42
70345: PUSH
70346: LD_INT 43
70348: PUSH
70349: EMPTY
70350: LIST
70351: LIST
70352: PUSH
70353: LD_INT 44
70355: PUSH
70356: LD_INT 46
70358: PUSH
70359: EMPTY
70360: LIST
70361: LIST
70362: PUSH
70363: LD_INT 45
70365: PUSH
70366: LD_INT 47
70368: PUSH
70369: EMPTY
70370: LIST
70371: LIST
70372: PUSH
70373: EMPTY
70374: LIST
70375: LIST
70376: LIST
70377: PUSH
70378: EMPTY
70379: LIST
70380: LIST
70381: LIST
70382: ST_TO_ADDR
// result := [ ] ;
70383: LD_ADDR_VAR 0 3
70387: PUSH
70388: EMPTY
70389: ST_TO_ADDR
// for i in turrets do
70390: LD_ADDR_VAR 0 4
70394: PUSH
70395: LD_VAR 0 1
70399: PUSH
70400: FOR_IN
70401: IFFALSE 70584
// begin nat := GetNation ( i ) ;
70403: LD_ADDR_VAR 0 7
70407: PUSH
70408: LD_VAR 0 4
70412: PPUSH
70413: CALL_OW 248
70417: ST_TO_ADDR
// weapon := 0 ;
70418: LD_ADDR_VAR 0 8
70422: PUSH
70423: LD_INT 0
70425: ST_TO_ADDR
// if not nat then
70426: LD_VAR 0 7
70430: NOT
70431: IFFALSE 70435
// continue ;
70433: GO 70400
// for j in list [ nat ] do
70435: LD_ADDR_VAR 0 5
70439: PUSH
70440: LD_VAR 0 10
70444: PUSH
70445: LD_VAR 0 7
70449: ARRAY
70450: PUSH
70451: FOR_IN
70452: IFFALSE 70493
// if GetBWeapon ( i ) = j [ 1 ] then
70454: LD_VAR 0 4
70458: PPUSH
70459: CALL_OW 269
70463: PUSH
70464: LD_VAR 0 5
70468: PUSH
70469: LD_INT 1
70471: ARRAY
70472: EQUAL
70473: IFFALSE 70491
// begin weapon := j [ 2 ] ;
70475: LD_ADDR_VAR 0 8
70479: PUSH
70480: LD_VAR 0 5
70484: PUSH
70485: LD_INT 2
70487: ARRAY
70488: ST_TO_ADDR
// break ;
70489: GO 70493
// end ;
70491: GO 70451
70493: POP
70494: POP
// if not weapon then
70495: LD_VAR 0 8
70499: NOT
70500: IFFALSE 70504
// continue ;
70502: GO 70400
// for k in factories do
70504: LD_ADDR_VAR 0 6
70508: PUSH
70509: LD_VAR 0 2
70513: PUSH
70514: FOR_IN
70515: IFFALSE 70580
// begin weapons := AvailableWeaponList ( k ) ;
70517: LD_ADDR_VAR 0 9
70521: PUSH
70522: LD_VAR 0 6
70526: PPUSH
70527: CALL_OW 478
70531: ST_TO_ADDR
// if not weapons then
70532: LD_VAR 0 9
70536: NOT
70537: IFFALSE 70541
// continue ;
70539: GO 70514
// if weapon in weapons then
70541: LD_VAR 0 8
70545: PUSH
70546: LD_VAR 0 9
70550: IN
70551: IFFALSE 70578
// begin result := [ i , weapon ] ;
70553: LD_ADDR_VAR 0 3
70557: PUSH
70558: LD_VAR 0 4
70562: PUSH
70563: LD_VAR 0 8
70567: PUSH
70568: EMPTY
70569: LIST
70570: LIST
70571: ST_TO_ADDR
// exit ;
70572: POP
70573: POP
70574: POP
70575: POP
70576: GO 70586
// end ; end ;
70578: GO 70514
70580: POP
70581: POP
// end ;
70582: GO 70400
70584: POP
70585: POP
// end ;
70586: LD_VAR 0 3
70590: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
70591: LD_INT 0
70593: PPUSH
// if not side or side > 8 then
70594: LD_VAR 0 3
70598: NOT
70599: PUSH
70600: LD_VAR 0 3
70604: PUSH
70605: LD_INT 8
70607: GREATER
70608: OR
70609: IFFALSE 70613
// exit ;
70611: GO 70672
// if not range then
70613: LD_VAR 0 4
70617: NOT
70618: IFFALSE 70629
// range := - 12 ;
70620: LD_ADDR_VAR 0 4
70624: PUSH
70625: LD_INT 12
70627: NEG
70628: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
70629: LD_VAR 0 1
70633: PPUSH
70634: LD_VAR 0 2
70638: PPUSH
70639: LD_VAR 0 3
70643: PPUSH
70644: LD_VAR 0 4
70648: PPUSH
70649: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
70653: LD_VAR 0 1
70657: PPUSH
70658: LD_VAR 0 2
70662: PPUSH
70663: LD_VAR 0 3
70667: PPUSH
70668: CALL_OW 331
// end ;
70672: LD_VAR 0 5
70676: RET
// export function Video ( mode ) ; begin
70677: LD_INT 0
70679: PPUSH
// ingame_video = mode ;
70680: LD_ADDR_OWVAR 52
70684: PUSH
70685: LD_VAR 0 1
70689: ST_TO_ADDR
// interface_hidden = mode ;
70690: LD_ADDR_OWVAR 54
70694: PUSH
70695: LD_VAR 0 1
70699: ST_TO_ADDR
// end ;
70700: LD_VAR 0 2
70704: RET
// export function Join ( array , element ) ; begin
70705: LD_INT 0
70707: PPUSH
// result := Replace ( array , array + 1 , element ) ;
70708: LD_ADDR_VAR 0 3
70712: PUSH
70713: LD_VAR 0 1
70717: PPUSH
70718: LD_VAR 0 1
70722: PUSH
70723: LD_INT 1
70725: PLUS
70726: PPUSH
70727: LD_VAR 0 2
70731: PPUSH
70732: CALL_OW 1
70736: ST_TO_ADDR
// end ;
70737: LD_VAR 0 3
70741: RET
// export function JoinUnion ( array , element ) ; begin
70742: LD_INT 0
70744: PPUSH
// result := array union element ;
70745: LD_ADDR_VAR 0 3
70749: PUSH
70750: LD_VAR 0 1
70754: PUSH
70755: LD_VAR 0 2
70759: UNION
70760: ST_TO_ADDR
// end ;
70761: LD_VAR 0 3
70765: RET
// export function GetBehemoths ( side ) ; begin
70766: LD_INT 0
70768: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
70769: LD_ADDR_VAR 0 2
70773: PUSH
70774: LD_INT 22
70776: PUSH
70777: LD_VAR 0 1
70781: PUSH
70782: EMPTY
70783: LIST
70784: LIST
70785: PUSH
70786: LD_INT 31
70788: PUSH
70789: LD_INT 25
70791: PUSH
70792: EMPTY
70793: LIST
70794: LIST
70795: PUSH
70796: EMPTY
70797: LIST
70798: LIST
70799: PPUSH
70800: CALL_OW 69
70804: ST_TO_ADDR
// end ;
70805: LD_VAR 0 2
70809: RET
// export function Shuffle ( array ) ; var i , index ; begin
70810: LD_INT 0
70812: PPUSH
70813: PPUSH
70814: PPUSH
// result := [ ] ;
70815: LD_ADDR_VAR 0 2
70819: PUSH
70820: EMPTY
70821: ST_TO_ADDR
// if not array then
70822: LD_VAR 0 1
70826: NOT
70827: IFFALSE 70831
// exit ;
70829: GO 70930
// Randomize ;
70831: CALL_OW 10
// for i = array downto 1 do
70835: LD_ADDR_VAR 0 3
70839: PUSH
70840: DOUBLE
70841: LD_VAR 0 1
70845: INC
70846: ST_TO_ADDR
70847: LD_INT 1
70849: PUSH
70850: FOR_DOWNTO
70851: IFFALSE 70928
// begin index := rand ( 1 , array ) ;
70853: LD_ADDR_VAR 0 4
70857: PUSH
70858: LD_INT 1
70860: PPUSH
70861: LD_VAR 0 1
70865: PPUSH
70866: CALL_OW 12
70870: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
70871: LD_ADDR_VAR 0 2
70875: PUSH
70876: LD_VAR 0 2
70880: PPUSH
70881: LD_VAR 0 2
70885: PUSH
70886: LD_INT 1
70888: PLUS
70889: PPUSH
70890: LD_VAR 0 1
70894: PUSH
70895: LD_VAR 0 4
70899: ARRAY
70900: PPUSH
70901: CALL_OW 2
70905: ST_TO_ADDR
// array := Delete ( array , index ) ;
70906: LD_ADDR_VAR 0 1
70910: PUSH
70911: LD_VAR 0 1
70915: PPUSH
70916: LD_VAR 0 4
70920: PPUSH
70921: CALL_OW 3
70925: ST_TO_ADDR
// end ;
70926: GO 70850
70928: POP
70929: POP
// end ;
70930: LD_VAR 0 2
70934: RET
// export function GetBaseMaterials ( base ) ; begin
70935: LD_INT 0
70937: PPUSH
// result := [ 0 , 0 , 0 ] ;
70938: LD_ADDR_VAR 0 2
70942: PUSH
70943: LD_INT 0
70945: PUSH
70946: LD_INT 0
70948: PUSH
70949: LD_INT 0
70951: PUSH
70952: EMPTY
70953: LIST
70954: LIST
70955: LIST
70956: ST_TO_ADDR
// if not base then
70957: LD_VAR 0 1
70961: NOT
70962: IFFALSE 70966
// exit ;
70964: GO 71015
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
70966: LD_ADDR_VAR 0 2
70970: PUSH
70971: LD_VAR 0 1
70975: PPUSH
70976: LD_INT 1
70978: PPUSH
70979: CALL_OW 275
70983: PUSH
70984: LD_VAR 0 1
70988: PPUSH
70989: LD_INT 2
70991: PPUSH
70992: CALL_OW 275
70996: PUSH
70997: LD_VAR 0 1
71001: PPUSH
71002: LD_INT 3
71004: PPUSH
71005: CALL_OW 275
71009: PUSH
71010: EMPTY
71011: LIST
71012: LIST
71013: LIST
71014: ST_TO_ADDR
// end ;
71015: LD_VAR 0 2
71019: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
71020: LD_INT 0
71022: PPUSH
71023: PPUSH
// result := array ;
71024: LD_ADDR_VAR 0 3
71028: PUSH
71029: LD_VAR 0 1
71033: ST_TO_ADDR
// if size >= result then
71034: LD_VAR 0 2
71038: PUSH
71039: LD_VAR 0 3
71043: GREATEREQUAL
71044: IFFALSE 71048
// exit ;
71046: GO 71098
// if size then
71048: LD_VAR 0 2
71052: IFFALSE 71098
// for i := array downto size do
71054: LD_ADDR_VAR 0 4
71058: PUSH
71059: DOUBLE
71060: LD_VAR 0 1
71064: INC
71065: ST_TO_ADDR
71066: LD_VAR 0 2
71070: PUSH
71071: FOR_DOWNTO
71072: IFFALSE 71096
// result := Delete ( result , result ) ;
71074: LD_ADDR_VAR 0 3
71078: PUSH
71079: LD_VAR 0 3
71083: PPUSH
71084: LD_VAR 0 3
71088: PPUSH
71089: CALL_OW 3
71093: ST_TO_ADDR
71094: GO 71071
71096: POP
71097: POP
// end ;
71098: LD_VAR 0 3
71102: RET
// export function ComExit ( unit ) ; var tmp ; begin
71103: LD_INT 0
71105: PPUSH
71106: PPUSH
// if not IsInUnit ( unit ) then
71107: LD_VAR 0 1
71111: PPUSH
71112: CALL_OW 310
71116: NOT
71117: IFFALSE 71121
// exit ;
71119: GO 71181
// tmp := IsInUnit ( unit ) ;
71121: LD_ADDR_VAR 0 3
71125: PUSH
71126: LD_VAR 0 1
71130: PPUSH
71131: CALL_OW 310
71135: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
71136: LD_VAR 0 3
71140: PPUSH
71141: CALL_OW 247
71145: PUSH
71146: LD_INT 2
71148: EQUAL
71149: IFFALSE 71162
// ComExitVehicle ( unit ) else
71151: LD_VAR 0 1
71155: PPUSH
71156: CALL_OW 121
71160: GO 71171
// ComExitBuilding ( unit ) ;
71162: LD_VAR 0 1
71166: PPUSH
71167: CALL_OW 122
// result := tmp ;
71171: LD_ADDR_VAR 0 2
71175: PUSH
71176: LD_VAR 0 3
71180: ST_TO_ADDR
// end ;
71181: LD_VAR 0 2
71185: RET
// export function ComExitAll ( units ) ; var i ; begin
71186: LD_INT 0
71188: PPUSH
71189: PPUSH
// if not units then
71190: LD_VAR 0 1
71194: NOT
71195: IFFALSE 71199
// exit ;
71197: GO 71225
// for i in units do
71199: LD_ADDR_VAR 0 3
71203: PUSH
71204: LD_VAR 0 1
71208: PUSH
71209: FOR_IN
71210: IFFALSE 71223
// ComExit ( i ) ;
71212: LD_VAR 0 3
71216: PPUSH
71217: CALL 71103 0 1
71221: GO 71209
71223: POP
71224: POP
// end ;
71225: LD_VAR 0 2
71229: RET
// export function ResetHc ; begin
71230: LD_INT 0
71232: PPUSH
// InitHc ;
71233: CALL_OW 19
// hc_importance := 0 ;
71237: LD_ADDR_OWVAR 32
71241: PUSH
71242: LD_INT 0
71244: ST_TO_ADDR
// end ;
71245: LD_VAR 0 1
71249: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
71250: LD_INT 0
71252: PPUSH
71253: PPUSH
71254: PPUSH
// _x := ( x1 + x2 ) div 2 ;
71255: LD_ADDR_VAR 0 6
71259: PUSH
71260: LD_VAR 0 1
71264: PUSH
71265: LD_VAR 0 3
71269: PLUS
71270: PUSH
71271: LD_INT 2
71273: DIV
71274: ST_TO_ADDR
// if _x < 0 then
71275: LD_VAR 0 6
71279: PUSH
71280: LD_INT 0
71282: LESS
71283: IFFALSE 71300
// _x := _x * - 1 ;
71285: LD_ADDR_VAR 0 6
71289: PUSH
71290: LD_VAR 0 6
71294: PUSH
71295: LD_INT 1
71297: NEG
71298: MUL
71299: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
71300: LD_ADDR_VAR 0 7
71304: PUSH
71305: LD_VAR 0 2
71309: PUSH
71310: LD_VAR 0 4
71314: PLUS
71315: PUSH
71316: LD_INT 2
71318: DIV
71319: ST_TO_ADDR
// if _y < 0 then
71320: LD_VAR 0 7
71324: PUSH
71325: LD_INT 0
71327: LESS
71328: IFFALSE 71345
// _y := _y * - 1 ;
71330: LD_ADDR_VAR 0 7
71334: PUSH
71335: LD_VAR 0 7
71339: PUSH
71340: LD_INT 1
71342: NEG
71343: MUL
71344: ST_TO_ADDR
// result := [ _x , _y ] ;
71345: LD_ADDR_VAR 0 5
71349: PUSH
71350: LD_VAR 0 6
71354: PUSH
71355: LD_VAR 0 7
71359: PUSH
71360: EMPTY
71361: LIST
71362: LIST
71363: ST_TO_ADDR
// end ;
71364: LD_VAR 0 5
71368: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
71369: LD_INT 0
71371: PPUSH
71372: PPUSH
71373: PPUSH
71374: PPUSH
// task := GetTaskList ( unit ) ;
71375: LD_ADDR_VAR 0 7
71379: PUSH
71380: LD_VAR 0 1
71384: PPUSH
71385: CALL_OW 437
71389: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
71390: LD_VAR 0 7
71394: NOT
71395: PUSH
71396: LD_VAR 0 1
71400: PPUSH
71401: LD_VAR 0 2
71405: PPUSH
71406: CALL_OW 308
71410: NOT
71411: AND
71412: IFFALSE 71416
// exit ;
71414: GO 71534
// if IsInArea ( unit , area ) then
71416: LD_VAR 0 1
71420: PPUSH
71421: LD_VAR 0 2
71425: PPUSH
71426: CALL_OW 308
71430: IFFALSE 71448
// begin ComMoveToArea ( unit , goAway ) ;
71432: LD_VAR 0 1
71436: PPUSH
71437: LD_VAR 0 3
71441: PPUSH
71442: CALL_OW 113
// exit ;
71446: GO 71534
// end ; if task [ 1 ] [ 1 ] <> M then
71448: LD_VAR 0 7
71452: PUSH
71453: LD_INT 1
71455: ARRAY
71456: PUSH
71457: LD_INT 1
71459: ARRAY
71460: PUSH
71461: LD_STRING M
71463: NONEQUAL
71464: IFFALSE 71468
// exit ;
71466: GO 71534
// x := task [ 1 ] [ 2 ] ;
71468: LD_ADDR_VAR 0 5
71472: PUSH
71473: LD_VAR 0 7
71477: PUSH
71478: LD_INT 1
71480: ARRAY
71481: PUSH
71482: LD_INT 2
71484: ARRAY
71485: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
71486: LD_ADDR_VAR 0 6
71490: PUSH
71491: LD_VAR 0 7
71495: PUSH
71496: LD_INT 1
71498: ARRAY
71499: PUSH
71500: LD_INT 3
71502: ARRAY
71503: ST_TO_ADDR
// if InArea ( x , y , area ) then
71504: LD_VAR 0 5
71508: PPUSH
71509: LD_VAR 0 6
71513: PPUSH
71514: LD_VAR 0 2
71518: PPUSH
71519: CALL_OW 309
71523: IFFALSE 71534
// ComStop ( unit ) ;
71525: LD_VAR 0 1
71529: PPUSH
71530: CALL_OW 141
// end ;
71534: LD_VAR 0 4
71538: RET
// export function Abs ( value ) ; begin
71539: LD_INT 0
71541: PPUSH
// result := value ;
71542: LD_ADDR_VAR 0 2
71546: PUSH
71547: LD_VAR 0 1
71551: ST_TO_ADDR
// if value < 0 then
71552: LD_VAR 0 1
71556: PUSH
71557: LD_INT 0
71559: LESS
71560: IFFALSE 71577
// result := value * - 1 ;
71562: LD_ADDR_VAR 0 2
71566: PUSH
71567: LD_VAR 0 1
71571: PUSH
71572: LD_INT 1
71574: NEG
71575: MUL
71576: ST_TO_ADDR
// end ;
71577: LD_VAR 0 2
71581: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
71582: LD_INT 0
71584: PPUSH
71585: PPUSH
71586: PPUSH
71587: PPUSH
71588: PPUSH
71589: PPUSH
71590: PPUSH
71591: PPUSH
// if not unit or not building then
71592: LD_VAR 0 1
71596: NOT
71597: PUSH
71598: LD_VAR 0 2
71602: NOT
71603: OR
71604: IFFALSE 71608
// exit ;
71606: GO 71834
// x := GetX ( building ) ;
71608: LD_ADDR_VAR 0 4
71612: PUSH
71613: LD_VAR 0 2
71617: PPUSH
71618: CALL_OW 250
71622: ST_TO_ADDR
// y := GetY ( building ) ;
71623: LD_ADDR_VAR 0 6
71627: PUSH
71628: LD_VAR 0 2
71632: PPUSH
71633: CALL_OW 251
71637: ST_TO_ADDR
// d := GetDir ( building ) ;
71638: LD_ADDR_VAR 0 8
71642: PUSH
71643: LD_VAR 0 2
71647: PPUSH
71648: CALL_OW 254
71652: ST_TO_ADDR
// r := 4 ;
71653: LD_ADDR_VAR 0 9
71657: PUSH
71658: LD_INT 4
71660: ST_TO_ADDR
// for i := 1 to 5 do
71661: LD_ADDR_VAR 0 10
71665: PUSH
71666: DOUBLE
71667: LD_INT 1
71669: DEC
71670: ST_TO_ADDR
71671: LD_INT 5
71673: PUSH
71674: FOR_TO
71675: IFFALSE 71832
// begin _x := ShiftX ( x , d , r + i ) ;
71677: LD_ADDR_VAR 0 5
71681: PUSH
71682: LD_VAR 0 4
71686: PPUSH
71687: LD_VAR 0 8
71691: PPUSH
71692: LD_VAR 0 9
71696: PUSH
71697: LD_VAR 0 10
71701: PLUS
71702: PPUSH
71703: CALL_OW 272
71707: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
71708: LD_ADDR_VAR 0 7
71712: PUSH
71713: LD_VAR 0 6
71717: PPUSH
71718: LD_VAR 0 8
71722: PPUSH
71723: LD_VAR 0 9
71727: PUSH
71728: LD_VAR 0 10
71732: PLUS
71733: PPUSH
71734: CALL_OW 273
71738: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
71739: LD_VAR 0 5
71743: PPUSH
71744: LD_VAR 0 7
71748: PPUSH
71749: CALL_OW 488
71753: PUSH
71754: LD_VAR 0 5
71758: PPUSH
71759: LD_VAR 0 7
71763: PPUSH
71764: CALL_OW 428
71768: PPUSH
71769: CALL_OW 247
71773: PUSH
71774: LD_INT 3
71776: PUSH
71777: LD_INT 2
71779: PUSH
71780: EMPTY
71781: LIST
71782: LIST
71783: IN
71784: NOT
71785: AND
71786: IFFALSE 71830
// begin ComMoveXY ( unit , _x , _y ) ;
71788: LD_VAR 0 1
71792: PPUSH
71793: LD_VAR 0 5
71797: PPUSH
71798: LD_VAR 0 7
71802: PPUSH
71803: CALL_OW 111
// result := [ _x , _y ] ;
71807: LD_ADDR_VAR 0 3
71811: PUSH
71812: LD_VAR 0 5
71816: PUSH
71817: LD_VAR 0 7
71821: PUSH
71822: EMPTY
71823: LIST
71824: LIST
71825: ST_TO_ADDR
// exit ;
71826: POP
71827: POP
71828: GO 71834
// end ; end ;
71830: GO 71674
71832: POP
71833: POP
// end ;
71834: LD_VAR 0 3
71838: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
71839: LD_INT 0
71841: PPUSH
71842: PPUSH
71843: PPUSH
// result := 0 ;
71844: LD_ADDR_VAR 0 3
71848: PUSH
71849: LD_INT 0
71851: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
71852: LD_VAR 0 1
71856: PUSH
71857: LD_INT 0
71859: LESS
71860: PUSH
71861: LD_VAR 0 1
71865: PUSH
71866: LD_INT 8
71868: GREATER
71869: OR
71870: PUSH
71871: LD_VAR 0 2
71875: PUSH
71876: LD_INT 0
71878: LESS
71879: OR
71880: PUSH
71881: LD_VAR 0 2
71885: PUSH
71886: LD_INT 8
71888: GREATER
71889: OR
71890: IFFALSE 71894
// exit ;
71892: GO 71969
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
71894: LD_ADDR_VAR 0 4
71898: PUSH
71899: LD_INT 22
71901: PUSH
71902: LD_VAR 0 2
71906: PUSH
71907: EMPTY
71908: LIST
71909: LIST
71910: PPUSH
71911: CALL_OW 69
71915: PUSH
71916: FOR_IN
71917: IFFALSE 71967
// begin un := UnitShoot ( i ) ;
71919: LD_ADDR_VAR 0 5
71923: PUSH
71924: LD_VAR 0 4
71928: PPUSH
71929: CALL_OW 504
71933: ST_TO_ADDR
// if GetSide ( un ) = side1 then
71934: LD_VAR 0 5
71938: PPUSH
71939: CALL_OW 255
71943: PUSH
71944: LD_VAR 0 1
71948: EQUAL
71949: IFFALSE 71965
// begin result := un ;
71951: LD_ADDR_VAR 0 3
71955: PUSH
71956: LD_VAR 0 5
71960: ST_TO_ADDR
// exit ;
71961: POP
71962: POP
71963: GO 71969
// end ; end ;
71965: GO 71916
71967: POP
71968: POP
// end ;
71969: LD_VAR 0 3
71973: RET
// export function GetCargoBay ( units ) ; begin
71974: LD_INT 0
71976: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
71977: LD_ADDR_VAR 0 2
71981: PUSH
71982: LD_VAR 0 1
71986: PPUSH
71987: LD_INT 2
71989: PUSH
71990: LD_INT 34
71992: PUSH
71993: LD_INT 12
71995: PUSH
71996: EMPTY
71997: LIST
71998: LIST
71999: PUSH
72000: LD_INT 34
72002: PUSH
72003: LD_INT 51
72005: PUSH
72006: EMPTY
72007: LIST
72008: LIST
72009: PUSH
72010: LD_INT 34
72012: PUSH
72013: LD_INT 32
72015: PUSH
72016: EMPTY
72017: LIST
72018: LIST
72019: PUSH
72020: LD_INT 34
72022: PUSH
72023: LD_INT 89
72025: PUSH
72026: EMPTY
72027: LIST
72028: LIST
72029: PUSH
72030: EMPTY
72031: LIST
72032: LIST
72033: LIST
72034: LIST
72035: LIST
72036: PPUSH
72037: CALL_OW 72
72041: ST_TO_ADDR
// end ;
72042: LD_VAR 0 2
72046: RET
// export function Negate ( value ) ; begin
72047: LD_INT 0
72049: PPUSH
// result := not value ;
72050: LD_ADDR_VAR 0 2
72054: PUSH
72055: LD_VAR 0 1
72059: NOT
72060: ST_TO_ADDR
// end ;
72061: LD_VAR 0 2
72065: RET
// export function Inc ( value ) ; begin
72066: LD_INT 0
72068: PPUSH
// result := value + 1 ;
72069: LD_ADDR_VAR 0 2
72073: PUSH
72074: LD_VAR 0 1
72078: PUSH
72079: LD_INT 1
72081: PLUS
72082: ST_TO_ADDR
// end ;
72083: LD_VAR 0 2
72087: RET
// export function Dec ( value ) ; begin
72088: LD_INT 0
72090: PPUSH
// result := value - 1 ;
72091: LD_ADDR_VAR 0 2
72095: PUSH
72096: LD_VAR 0 1
72100: PUSH
72101: LD_INT 1
72103: MINUS
72104: ST_TO_ADDR
// end ;
72105: LD_VAR 0 2
72109: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
72110: LD_INT 0
72112: PPUSH
72113: PPUSH
72114: PPUSH
72115: PPUSH
72116: PPUSH
72117: PPUSH
72118: PPUSH
72119: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
72120: LD_VAR 0 1
72124: PPUSH
72125: LD_VAR 0 2
72129: PPUSH
72130: CALL_OW 488
72134: NOT
72135: PUSH
72136: LD_VAR 0 3
72140: PPUSH
72141: LD_VAR 0 4
72145: PPUSH
72146: CALL_OW 488
72150: NOT
72151: OR
72152: IFFALSE 72165
// begin result := - 1 ;
72154: LD_ADDR_VAR 0 5
72158: PUSH
72159: LD_INT 1
72161: NEG
72162: ST_TO_ADDR
// exit ;
72163: GO 72400
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
72165: LD_ADDR_VAR 0 12
72169: PUSH
72170: LD_VAR 0 1
72174: PPUSH
72175: LD_VAR 0 2
72179: PPUSH
72180: LD_VAR 0 3
72184: PPUSH
72185: LD_VAR 0 4
72189: PPUSH
72190: CALL 71250 0 4
72194: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
72195: LD_ADDR_VAR 0 11
72199: PUSH
72200: LD_VAR 0 1
72204: PPUSH
72205: LD_VAR 0 2
72209: PPUSH
72210: LD_VAR 0 12
72214: PUSH
72215: LD_INT 1
72217: ARRAY
72218: PPUSH
72219: LD_VAR 0 12
72223: PUSH
72224: LD_INT 2
72226: ARRAY
72227: PPUSH
72228: CALL_OW 298
72232: ST_TO_ADDR
// distance := 9999 ;
72233: LD_ADDR_VAR 0 10
72237: PUSH
72238: LD_INT 9999
72240: ST_TO_ADDR
// for i := 0 to 5 do
72241: LD_ADDR_VAR 0 6
72245: PUSH
72246: DOUBLE
72247: LD_INT 0
72249: DEC
72250: ST_TO_ADDR
72251: LD_INT 5
72253: PUSH
72254: FOR_TO
72255: IFFALSE 72398
// begin _x := ShiftX ( x1 , i , centerDist ) ;
72257: LD_ADDR_VAR 0 7
72261: PUSH
72262: LD_VAR 0 1
72266: PPUSH
72267: LD_VAR 0 6
72271: PPUSH
72272: LD_VAR 0 11
72276: PPUSH
72277: CALL_OW 272
72281: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
72282: LD_ADDR_VAR 0 8
72286: PUSH
72287: LD_VAR 0 2
72291: PPUSH
72292: LD_VAR 0 6
72296: PPUSH
72297: LD_VAR 0 11
72301: PPUSH
72302: CALL_OW 273
72306: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
72307: LD_VAR 0 7
72311: PPUSH
72312: LD_VAR 0 8
72316: PPUSH
72317: CALL_OW 488
72321: NOT
72322: IFFALSE 72326
// continue ;
72324: GO 72254
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
72326: LD_ADDR_VAR 0 9
72330: PUSH
72331: LD_VAR 0 12
72335: PUSH
72336: LD_INT 1
72338: ARRAY
72339: PPUSH
72340: LD_VAR 0 12
72344: PUSH
72345: LD_INT 2
72347: ARRAY
72348: PPUSH
72349: LD_VAR 0 7
72353: PPUSH
72354: LD_VAR 0 8
72358: PPUSH
72359: CALL_OW 298
72363: ST_TO_ADDR
// if tmp < distance then
72364: LD_VAR 0 9
72368: PUSH
72369: LD_VAR 0 10
72373: LESS
72374: IFFALSE 72396
// begin result := i ;
72376: LD_ADDR_VAR 0 5
72380: PUSH
72381: LD_VAR 0 6
72385: ST_TO_ADDR
// distance := tmp ;
72386: LD_ADDR_VAR 0 10
72390: PUSH
72391: LD_VAR 0 9
72395: ST_TO_ADDR
// end ; end ;
72396: GO 72254
72398: POP
72399: POP
// end ;
72400: LD_VAR 0 5
72404: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
72405: LD_INT 0
72407: PPUSH
72408: PPUSH
// if not driver or not IsInUnit ( driver ) then
72409: LD_VAR 0 1
72413: NOT
72414: PUSH
72415: LD_VAR 0 1
72419: PPUSH
72420: CALL_OW 310
72424: NOT
72425: OR
72426: IFFALSE 72430
// exit ;
72428: GO 72520
// vehicle := IsInUnit ( driver ) ;
72430: LD_ADDR_VAR 0 3
72434: PUSH
72435: LD_VAR 0 1
72439: PPUSH
72440: CALL_OW 310
72444: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72445: LD_VAR 0 1
72449: PPUSH
72450: LD_STRING \
72452: PUSH
72453: LD_INT 0
72455: PUSH
72456: LD_INT 0
72458: PUSH
72459: LD_INT 0
72461: PUSH
72462: LD_INT 0
72464: PUSH
72465: LD_INT 0
72467: PUSH
72468: LD_INT 0
72470: PUSH
72471: EMPTY
72472: LIST
72473: LIST
72474: LIST
72475: LIST
72476: LIST
72477: LIST
72478: LIST
72479: PUSH
72480: LD_STRING E
72482: PUSH
72483: LD_INT 0
72485: PUSH
72486: LD_INT 0
72488: PUSH
72489: LD_VAR 0 3
72493: PUSH
72494: LD_INT 0
72496: PUSH
72497: LD_INT 0
72499: PUSH
72500: LD_INT 0
72502: PUSH
72503: EMPTY
72504: LIST
72505: LIST
72506: LIST
72507: LIST
72508: LIST
72509: LIST
72510: LIST
72511: PUSH
72512: EMPTY
72513: LIST
72514: LIST
72515: PPUSH
72516: CALL_OW 446
// end ;
72520: LD_VAR 0 2
72524: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
72525: LD_INT 0
72527: PPUSH
72528: PPUSH
// if not driver or not IsInUnit ( driver ) then
72529: LD_VAR 0 1
72533: NOT
72534: PUSH
72535: LD_VAR 0 1
72539: PPUSH
72540: CALL_OW 310
72544: NOT
72545: OR
72546: IFFALSE 72550
// exit ;
72548: GO 72640
// vehicle := IsInUnit ( driver ) ;
72550: LD_ADDR_VAR 0 3
72554: PUSH
72555: LD_VAR 0 1
72559: PPUSH
72560: CALL_OW 310
72564: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72565: LD_VAR 0 1
72569: PPUSH
72570: LD_STRING \
72572: PUSH
72573: LD_INT 0
72575: PUSH
72576: LD_INT 0
72578: PUSH
72579: LD_INT 0
72581: PUSH
72582: LD_INT 0
72584: PUSH
72585: LD_INT 0
72587: PUSH
72588: LD_INT 0
72590: PUSH
72591: EMPTY
72592: LIST
72593: LIST
72594: LIST
72595: LIST
72596: LIST
72597: LIST
72598: LIST
72599: PUSH
72600: LD_STRING E
72602: PUSH
72603: LD_INT 0
72605: PUSH
72606: LD_INT 0
72608: PUSH
72609: LD_VAR 0 3
72613: PUSH
72614: LD_INT 0
72616: PUSH
72617: LD_INT 0
72619: PUSH
72620: LD_INT 0
72622: PUSH
72623: EMPTY
72624: LIST
72625: LIST
72626: LIST
72627: LIST
72628: LIST
72629: LIST
72630: LIST
72631: PUSH
72632: EMPTY
72633: LIST
72634: LIST
72635: PPUSH
72636: CALL_OW 447
// end ;
72640: LD_VAR 0 2
72644: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
72645: LD_INT 0
72647: PPUSH
72648: PPUSH
72649: PPUSH
// tmp := [ ] ;
72650: LD_ADDR_VAR 0 5
72654: PUSH
72655: EMPTY
72656: ST_TO_ADDR
// for i in units do
72657: LD_ADDR_VAR 0 4
72661: PUSH
72662: LD_VAR 0 1
72666: PUSH
72667: FOR_IN
72668: IFFALSE 72706
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
72670: LD_ADDR_VAR 0 5
72674: PUSH
72675: LD_VAR 0 5
72679: PPUSH
72680: LD_VAR 0 5
72684: PUSH
72685: LD_INT 1
72687: PLUS
72688: PPUSH
72689: LD_VAR 0 4
72693: PPUSH
72694: CALL_OW 256
72698: PPUSH
72699: CALL_OW 2
72703: ST_TO_ADDR
72704: GO 72667
72706: POP
72707: POP
// if not tmp then
72708: LD_VAR 0 5
72712: NOT
72713: IFFALSE 72717
// exit ;
72715: GO 72765
// if asc then
72717: LD_VAR 0 2
72721: IFFALSE 72745
// result := SortListByListAsc ( units , tmp ) else
72723: LD_ADDR_VAR 0 3
72727: PUSH
72728: LD_VAR 0 1
72732: PPUSH
72733: LD_VAR 0 5
72737: PPUSH
72738: CALL_OW 76
72742: ST_TO_ADDR
72743: GO 72765
// result := SortListByListDesc ( units , tmp ) ;
72745: LD_ADDR_VAR 0 3
72749: PUSH
72750: LD_VAR 0 1
72754: PPUSH
72755: LD_VAR 0 5
72759: PPUSH
72760: CALL_OW 77
72764: ST_TO_ADDR
// end ;
72765: LD_VAR 0 3
72769: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
72770: LD_INT 0
72772: PPUSH
72773: PPUSH
// task := GetTaskList ( mech ) ;
72774: LD_ADDR_VAR 0 4
72778: PUSH
72779: LD_VAR 0 1
72783: PPUSH
72784: CALL_OW 437
72788: ST_TO_ADDR
// if not task then
72789: LD_VAR 0 4
72793: NOT
72794: IFFALSE 72798
// exit ;
72796: GO 72840
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
72798: LD_ADDR_VAR 0 3
72802: PUSH
72803: LD_VAR 0 4
72807: PUSH
72808: LD_INT 1
72810: ARRAY
72811: PUSH
72812: LD_INT 1
72814: ARRAY
72815: PUSH
72816: LD_STRING r
72818: EQUAL
72819: PUSH
72820: LD_VAR 0 4
72824: PUSH
72825: LD_INT 1
72827: ARRAY
72828: PUSH
72829: LD_INT 4
72831: ARRAY
72832: PUSH
72833: LD_VAR 0 2
72837: EQUAL
72838: AND
72839: ST_TO_ADDR
// end ;
72840: LD_VAR 0 3
72844: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
72845: LD_INT 0
72847: PPUSH
// SetDir ( unit , d ) ;
72848: LD_VAR 0 1
72852: PPUSH
72853: LD_VAR 0 4
72857: PPUSH
72858: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
72862: LD_VAR 0 1
72866: PPUSH
72867: LD_VAR 0 2
72871: PPUSH
72872: LD_VAR 0 3
72876: PPUSH
72877: LD_VAR 0 5
72881: PPUSH
72882: CALL_OW 48
// end ;
72886: LD_VAR 0 6
72890: RET
// export function ToNaturalNumber ( number ) ; begin
72891: LD_INT 0
72893: PPUSH
// result := number div 1 ;
72894: LD_ADDR_VAR 0 2
72898: PUSH
72899: LD_VAR 0 1
72903: PUSH
72904: LD_INT 1
72906: DIV
72907: ST_TO_ADDR
// if number < 0 then
72908: LD_VAR 0 1
72912: PUSH
72913: LD_INT 0
72915: LESS
72916: IFFALSE 72926
// result := 0 ;
72918: LD_ADDR_VAR 0 2
72922: PUSH
72923: LD_INT 0
72925: ST_TO_ADDR
// end ;
72926: LD_VAR 0 2
72930: RET
// export function SortByClass ( units , class ) ; var un ; begin
72931: LD_INT 0
72933: PPUSH
72934: PPUSH
// if not units or not class then
72935: LD_VAR 0 1
72939: NOT
72940: PUSH
72941: LD_VAR 0 2
72945: NOT
72946: OR
72947: IFFALSE 72951
// exit ;
72949: GO 73046
// result := [ ] ;
72951: LD_ADDR_VAR 0 3
72955: PUSH
72956: EMPTY
72957: ST_TO_ADDR
// for un in units do
72958: LD_ADDR_VAR 0 4
72962: PUSH
72963: LD_VAR 0 1
72967: PUSH
72968: FOR_IN
72969: IFFALSE 73044
// if GetClass ( un ) = class then
72971: LD_VAR 0 4
72975: PPUSH
72976: CALL_OW 257
72980: PUSH
72981: LD_VAR 0 2
72985: EQUAL
72986: IFFALSE 73013
// result := Insert ( result , 1 , un ) else
72988: LD_ADDR_VAR 0 3
72992: PUSH
72993: LD_VAR 0 3
72997: PPUSH
72998: LD_INT 1
73000: PPUSH
73001: LD_VAR 0 4
73005: PPUSH
73006: CALL_OW 2
73010: ST_TO_ADDR
73011: GO 73042
// result := Replace ( result , result + 1 , un ) ;
73013: LD_ADDR_VAR 0 3
73017: PUSH
73018: LD_VAR 0 3
73022: PPUSH
73023: LD_VAR 0 3
73027: PUSH
73028: LD_INT 1
73030: PLUS
73031: PPUSH
73032: LD_VAR 0 4
73036: PPUSH
73037: CALL_OW 1
73041: ST_TO_ADDR
73042: GO 72968
73044: POP
73045: POP
// end ;
73046: LD_VAR 0 3
73050: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
73051: LD_INT 0
73053: PPUSH
73054: PPUSH
73055: PPUSH
73056: PPUSH
73057: PPUSH
73058: PPUSH
73059: PPUSH
// result := [ ] ;
73060: LD_ADDR_VAR 0 4
73064: PUSH
73065: EMPTY
73066: ST_TO_ADDR
// if x - r < 0 then
73067: LD_VAR 0 1
73071: PUSH
73072: LD_VAR 0 3
73076: MINUS
73077: PUSH
73078: LD_INT 0
73080: LESS
73081: IFFALSE 73093
// min_x := 0 else
73083: LD_ADDR_VAR 0 8
73087: PUSH
73088: LD_INT 0
73090: ST_TO_ADDR
73091: GO 73109
// min_x := x - r ;
73093: LD_ADDR_VAR 0 8
73097: PUSH
73098: LD_VAR 0 1
73102: PUSH
73103: LD_VAR 0 3
73107: MINUS
73108: ST_TO_ADDR
// if y - r < 0 then
73109: LD_VAR 0 2
73113: PUSH
73114: LD_VAR 0 3
73118: MINUS
73119: PUSH
73120: LD_INT 0
73122: LESS
73123: IFFALSE 73135
// min_y := 0 else
73125: LD_ADDR_VAR 0 7
73129: PUSH
73130: LD_INT 0
73132: ST_TO_ADDR
73133: GO 73151
// min_y := y - r ;
73135: LD_ADDR_VAR 0 7
73139: PUSH
73140: LD_VAR 0 2
73144: PUSH
73145: LD_VAR 0 3
73149: MINUS
73150: ST_TO_ADDR
// max_x := x + r ;
73151: LD_ADDR_VAR 0 9
73155: PUSH
73156: LD_VAR 0 1
73160: PUSH
73161: LD_VAR 0 3
73165: PLUS
73166: ST_TO_ADDR
// max_y := y + r ;
73167: LD_ADDR_VAR 0 10
73171: PUSH
73172: LD_VAR 0 2
73176: PUSH
73177: LD_VAR 0 3
73181: PLUS
73182: ST_TO_ADDR
// for _x = min_x to max_x do
73183: LD_ADDR_VAR 0 5
73187: PUSH
73188: DOUBLE
73189: LD_VAR 0 8
73193: DEC
73194: ST_TO_ADDR
73195: LD_VAR 0 9
73199: PUSH
73200: FOR_TO
73201: IFFALSE 73302
// for _y = min_y to max_y do
73203: LD_ADDR_VAR 0 6
73207: PUSH
73208: DOUBLE
73209: LD_VAR 0 7
73213: DEC
73214: ST_TO_ADDR
73215: LD_VAR 0 10
73219: PUSH
73220: FOR_TO
73221: IFFALSE 73298
// begin if not ValidHex ( _x , _y ) then
73223: LD_VAR 0 5
73227: PPUSH
73228: LD_VAR 0 6
73232: PPUSH
73233: CALL_OW 488
73237: NOT
73238: IFFALSE 73242
// continue ;
73240: GO 73220
// if GetResourceTypeXY ( _x , _y ) then
73242: LD_VAR 0 5
73246: PPUSH
73247: LD_VAR 0 6
73251: PPUSH
73252: CALL_OW 283
73256: IFFALSE 73296
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
73258: LD_ADDR_VAR 0 4
73262: PUSH
73263: LD_VAR 0 4
73267: PPUSH
73268: LD_VAR 0 4
73272: PUSH
73273: LD_INT 1
73275: PLUS
73276: PPUSH
73277: LD_VAR 0 5
73281: PUSH
73282: LD_VAR 0 6
73286: PUSH
73287: EMPTY
73288: LIST
73289: LIST
73290: PPUSH
73291: CALL_OW 1
73295: ST_TO_ADDR
// end ;
73296: GO 73220
73298: POP
73299: POP
73300: GO 73200
73302: POP
73303: POP
// end ;
73304: LD_VAR 0 4
73308: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
73309: LD_INT 0
73311: PPUSH
73312: PPUSH
73313: PPUSH
73314: PPUSH
73315: PPUSH
73316: PPUSH
73317: PPUSH
73318: PPUSH
// if not units then
73319: LD_VAR 0 1
73323: NOT
73324: IFFALSE 73328
// exit ;
73326: GO 73852
// result := UnitFilter ( units , [ f_ok ] ) ;
73328: LD_ADDR_VAR 0 3
73332: PUSH
73333: LD_VAR 0 1
73337: PPUSH
73338: LD_INT 50
73340: PUSH
73341: EMPTY
73342: LIST
73343: PPUSH
73344: CALL_OW 72
73348: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
73349: LD_ADDR_VAR 0 8
73353: PUSH
73354: LD_VAR 0 1
73358: PUSH
73359: LD_INT 1
73361: ARRAY
73362: PPUSH
73363: CALL_OW 255
73367: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
73368: LD_ADDR_VAR 0 10
73372: PUSH
73373: LD_INT 29
73375: PUSH
73376: LD_INT 91
73378: PUSH
73379: LD_INT 49
73381: PUSH
73382: EMPTY
73383: LIST
73384: LIST
73385: LIST
73386: ST_TO_ADDR
// if not result then
73387: LD_VAR 0 3
73391: NOT
73392: IFFALSE 73396
// exit ;
73394: GO 73852
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
73396: LD_ADDR_VAR 0 5
73400: PUSH
73401: LD_INT 81
73403: PUSH
73404: LD_VAR 0 8
73408: PUSH
73409: EMPTY
73410: LIST
73411: LIST
73412: PPUSH
73413: CALL_OW 69
73417: ST_TO_ADDR
// for i in result do
73418: LD_ADDR_VAR 0 4
73422: PUSH
73423: LD_VAR 0 3
73427: PUSH
73428: FOR_IN
73429: IFFALSE 73850
// begin tag := GetTag ( i ) + 1 ;
73431: LD_ADDR_VAR 0 9
73435: PUSH
73436: LD_VAR 0 4
73440: PPUSH
73441: CALL_OW 110
73445: PUSH
73446: LD_INT 1
73448: PLUS
73449: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
73450: LD_ADDR_VAR 0 7
73454: PUSH
73455: LD_VAR 0 4
73459: PPUSH
73460: CALL_OW 250
73464: PPUSH
73465: LD_VAR 0 4
73469: PPUSH
73470: CALL_OW 251
73474: PPUSH
73475: LD_INT 6
73477: PPUSH
73478: CALL 73051 0 3
73482: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
73483: LD_VAR 0 4
73487: PPUSH
73488: CALL_OW 247
73492: PUSH
73493: LD_INT 2
73495: EQUAL
73496: PUSH
73497: LD_VAR 0 7
73501: AND
73502: PUSH
73503: LD_VAR 0 4
73507: PPUSH
73508: CALL_OW 264
73512: PUSH
73513: LD_VAR 0 10
73517: IN
73518: NOT
73519: AND
73520: IFFALSE 73559
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
73522: LD_VAR 0 4
73526: PPUSH
73527: LD_VAR 0 7
73531: PUSH
73532: LD_INT 1
73534: ARRAY
73535: PUSH
73536: LD_INT 1
73538: ARRAY
73539: PPUSH
73540: LD_VAR 0 7
73544: PUSH
73545: LD_INT 1
73547: ARRAY
73548: PUSH
73549: LD_INT 2
73551: ARRAY
73552: PPUSH
73553: CALL_OW 116
73557: GO 73848
// if path > tag then
73559: LD_VAR 0 2
73563: PUSH
73564: LD_VAR 0 9
73568: GREATER
73569: IFFALSE 73777
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
73571: LD_ADDR_VAR 0 6
73575: PUSH
73576: LD_VAR 0 5
73580: PPUSH
73581: LD_INT 91
73583: PUSH
73584: LD_VAR 0 4
73588: PUSH
73589: LD_INT 8
73591: PUSH
73592: EMPTY
73593: LIST
73594: LIST
73595: LIST
73596: PPUSH
73597: CALL_OW 72
73601: ST_TO_ADDR
// if nearEnemy then
73602: LD_VAR 0 6
73606: IFFALSE 73675
// begin if GetWeapon ( i ) = ru_time_lapser then
73608: LD_VAR 0 4
73612: PPUSH
73613: CALL_OW 264
73617: PUSH
73618: LD_INT 49
73620: EQUAL
73621: IFFALSE 73649
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
73623: LD_VAR 0 4
73627: PPUSH
73628: LD_VAR 0 6
73632: PPUSH
73633: LD_VAR 0 4
73637: PPUSH
73638: CALL_OW 74
73642: PPUSH
73643: CALL_OW 112
73647: GO 73673
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
73649: LD_VAR 0 4
73653: PPUSH
73654: LD_VAR 0 6
73658: PPUSH
73659: LD_VAR 0 4
73663: PPUSH
73664: CALL_OW 74
73668: PPUSH
73669: CALL 74777 0 2
// end else
73673: GO 73775
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
73675: LD_VAR 0 4
73679: PPUSH
73680: LD_VAR 0 2
73684: PUSH
73685: LD_VAR 0 9
73689: ARRAY
73690: PUSH
73691: LD_INT 1
73693: ARRAY
73694: PPUSH
73695: LD_VAR 0 2
73699: PUSH
73700: LD_VAR 0 9
73704: ARRAY
73705: PUSH
73706: LD_INT 2
73708: ARRAY
73709: PPUSH
73710: CALL_OW 297
73714: PUSH
73715: LD_INT 6
73717: GREATER
73718: IFFALSE 73761
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
73720: LD_VAR 0 4
73724: PPUSH
73725: LD_VAR 0 2
73729: PUSH
73730: LD_VAR 0 9
73734: ARRAY
73735: PUSH
73736: LD_INT 1
73738: ARRAY
73739: PPUSH
73740: LD_VAR 0 2
73744: PUSH
73745: LD_VAR 0 9
73749: ARRAY
73750: PUSH
73751: LD_INT 2
73753: ARRAY
73754: PPUSH
73755: CALL_OW 114
73759: GO 73775
// SetTag ( i , tag ) ;
73761: LD_VAR 0 4
73765: PPUSH
73766: LD_VAR 0 9
73770: PPUSH
73771: CALL_OW 109
// end else
73775: GO 73848
// if enemy then
73777: LD_VAR 0 5
73781: IFFALSE 73848
// begin if GetWeapon ( i ) = ru_time_lapser then
73783: LD_VAR 0 4
73787: PPUSH
73788: CALL_OW 264
73792: PUSH
73793: LD_INT 49
73795: EQUAL
73796: IFFALSE 73824
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
73798: LD_VAR 0 4
73802: PPUSH
73803: LD_VAR 0 5
73807: PPUSH
73808: LD_VAR 0 4
73812: PPUSH
73813: CALL_OW 74
73817: PPUSH
73818: CALL_OW 112
73822: GO 73848
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
73824: LD_VAR 0 4
73828: PPUSH
73829: LD_VAR 0 5
73833: PPUSH
73834: LD_VAR 0 4
73838: PPUSH
73839: CALL_OW 74
73843: PPUSH
73844: CALL 74777 0 2
// end ; end ;
73848: GO 73428
73850: POP
73851: POP
// end ;
73852: LD_VAR 0 3
73856: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
73857: LD_INT 0
73859: PPUSH
73860: PPUSH
73861: PPUSH
// if not unit or IsInUnit ( unit ) then
73862: LD_VAR 0 1
73866: NOT
73867: PUSH
73868: LD_VAR 0 1
73872: PPUSH
73873: CALL_OW 310
73877: OR
73878: IFFALSE 73882
// exit ;
73880: GO 73973
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
73882: LD_ADDR_VAR 0 4
73886: PUSH
73887: LD_VAR 0 1
73891: PPUSH
73892: CALL_OW 250
73896: PPUSH
73897: LD_VAR 0 2
73901: PPUSH
73902: LD_INT 1
73904: PPUSH
73905: CALL_OW 272
73909: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
73910: LD_ADDR_VAR 0 5
73914: PUSH
73915: LD_VAR 0 1
73919: PPUSH
73920: CALL_OW 251
73924: PPUSH
73925: LD_VAR 0 2
73929: PPUSH
73930: LD_INT 1
73932: PPUSH
73933: CALL_OW 273
73937: ST_TO_ADDR
// if ValidHex ( x , y ) then
73938: LD_VAR 0 4
73942: PPUSH
73943: LD_VAR 0 5
73947: PPUSH
73948: CALL_OW 488
73952: IFFALSE 73973
// ComTurnXY ( unit , x , y ) ;
73954: LD_VAR 0 1
73958: PPUSH
73959: LD_VAR 0 4
73963: PPUSH
73964: LD_VAR 0 5
73968: PPUSH
73969: CALL_OW 118
// end ;
73973: LD_VAR 0 3
73977: RET
// export function SeeUnits ( side , units ) ; var i ; begin
73978: LD_INT 0
73980: PPUSH
73981: PPUSH
// result := false ;
73982: LD_ADDR_VAR 0 3
73986: PUSH
73987: LD_INT 0
73989: ST_TO_ADDR
// if not units then
73990: LD_VAR 0 2
73994: NOT
73995: IFFALSE 73999
// exit ;
73997: GO 74044
// for i in units do
73999: LD_ADDR_VAR 0 4
74003: PUSH
74004: LD_VAR 0 2
74008: PUSH
74009: FOR_IN
74010: IFFALSE 74042
// if See ( side , i ) then
74012: LD_VAR 0 1
74016: PPUSH
74017: LD_VAR 0 4
74021: PPUSH
74022: CALL_OW 292
74026: IFFALSE 74040
// begin result := true ;
74028: LD_ADDR_VAR 0 3
74032: PUSH
74033: LD_INT 1
74035: ST_TO_ADDR
// exit ;
74036: POP
74037: POP
74038: GO 74044
// end ;
74040: GO 74009
74042: POP
74043: POP
// end ;
74044: LD_VAR 0 3
74048: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
74049: LD_INT 0
74051: PPUSH
74052: PPUSH
74053: PPUSH
74054: PPUSH
// if not unit or not points then
74055: LD_VAR 0 1
74059: NOT
74060: PUSH
74061: LD_VAR 0 2
74065: NOT
74066: OR
74067: IFFALSE 74071
// exit ;
74069: GO 74161
// dist := 99999 ;
74071: LD_ADDR_VAR 0 5
74075: PUSH
74076: LD_INT 99999
74078: ST_TO_ADDR
// for i in points do
74079: LD_ADDR_VAR 0 4
74083: PUSH
74084: LD_VAR 0 2
74088: PUSH
74089: FOR_IN
74090: IFFALSE 74159
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
74092: LD_ADDR_VAR 0 6
74096: PUSH
74097: LD_VAR 0 1
74101: PPUSH
74102: LD_VAR 0 4
74106: PUSH
74107: LD_INT 1
74109: ARRAY
74110: PPUSH
74111: LD_VAR 0 4
74115: PUSH
74116: LD_INT 2
74118: ARRAY
74119: PPUSH
74120: CALL_OW 297
74124: ST_TO_ADDR
// if tmpDist < dist then
74125: LD_VAR 0 6
74129: PUSH
74130: LD_VAR 0 5
74134: LESS
74135: IFFALSE 74157
// begin result := i ;
74137: LD_ADDR_VAR 0 3
74141: PUSH
74142: LD_VAR 0 4
74146: ST_TO_ADDR
// dist := tmpDist ;
74147: LD_ADDR_VAR 0 5
74151: PUSH
74152: LD_VAR 0 6
74156: ST_TO_ADDR
// end ; end ;
74157: GO 74089
74159: POP
74160: POP
// end ;
74161: LD_VAR 0 3
74165: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
74166: LD_INT 0
74168: PPUSH
// uc_side := side ;
74169: LD_ADDR_OWVAR 20
74173: PUSH
74174: LD_VAR 0 1
74178: ST_TO_ADDR
// uc_nation := 3 ;
74179: LD_ADDR_OWVAR 21
74183: PUSH
74184: LD_INT 3
74186: ST_TO_ADDR
// vc_chassis := 25 ;
74187: LD_ADDR_OWVAR 37
74191: PUSH
74192: LD_INT 25
74194: ST_TO_ADDR
// vc_engine := engine_siberite ;
74195: LD_ADDR_OWVAR 39
74199: PUSH
74200: LD_INT 3
74202: ST_TO_ADDR
// vc_control := control_computer ;
74203: LD_ADDR_OWVAR 38
74207: PUSH
74208: LD_INT 3
74210: ST_TO_ADDR
// vc_weapon := 59 ;
74211: LD_ADDR_OWVAR 40
74215: PUSH
74216: LD_INT 59
74218: ST_TO_ADDR
// result := CreateVehicle ;
74219: LD_ADDR_VAR 0 5
74223: PUSH
74224: CALL_OW 45
74228: ST_TO_ADDR
// SetDir ( result , d ) ;
74229: LD_VAR 0 5
74233: PPUSH
74234: LD_VAR 0 4
74238: PPUSH
74239: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
74243: LD_VAR 0 5
74247: PPUSH
74248: LD_VAR 0 2
74252: PPUSH
74253: LD_VAR 0 3
74257: PPUSH
74258: LD_INT 0
74260: PPUSH
74261: CALL_OW 48
// end ;
74265: LD_VAR 0 5
74269: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
74270: LD_INT 0
74272: PPUSH
74273: PPUSH
74274: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
74275: LD_ADDR_VAR 0 2
74279: PUSH
74280: LD_INT 0
74282: PUSH
74283: LD_INT 0
74285: PUSH
74286: LD_INT 0
74288: PUSH
74289: LD_INT 0
74291: PUSH
74292: EMPTY
74293: LIST
74294: LIST
74295: LIST
74296: LIST
74297: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
74298: LD_VAR 0 1
74302: NOT
74303: PUSH
74304: LD_VAR 0 1
74308: PPUSH
74309: CALL_OW 264
74313: PUSH
74314: LD_INT 12
74316: PUSH
74317: LD_INT 51
74319: PUSH
74320: LD_INT 32
74322: PUSH
74323: LD_INT 89
74325: PUSH
74326: EMPTY
74327: LIST
74328: LIST
74329: LIST
74330: LIST
74331: IN
74332: NOT
74333: OR
74334: IFFALSE 74338
// exit ;
74336: GO 74436
// for i := 1 to 3 do
74338: LD_ADDR_VAR 0 3
74342: PUSH
74343: DOUBLE
74344: LD_INT 1
74346: DEC
74347: ST_TO_ADDR
74348: LD_INT 3
74350: PUSH
74351: FOR_TO
74352: IFFALSE 74434
// begin tmp := GetCargo ( cargo , i ) ;
74354: LD_ADDR_VAR 0 4
74358: PUSH
74359: LD_VAR 0 1
74363: PPUSH
74364: LD_VAR 0 3
74368: PPUSH
74369: CALL_OW 289
74373: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
74374: LD_ADDR_VAR 0 2
74378: PUSH
74379: LD_VAR 0 2
74383: PPUSH
74384: LD_VAR 0 3
74388: PPUSH
74389: LD_VAR 0 4
74393: PPUSH
74394: CALL_OW 1
74398: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
74399: LD_ADDR_VAR 0 2
74403: PUSH
74404: LD_VAR 0 2
74408: PPUSH
74409: LD_INT 4
74411: PPUSH
74412: LD_VAR 0 2
74416: PUSH
74417: LD_INT 4
74419: ARRAY
74420: PUSH
74421: LD_VAR 0 4
74425: PLUS
74426: PPUSH
74427: CALL_OW 1
74431: ST_TO_ADDR
// end ;
74432: GO 74351
74434: POP
74435: POP
// end ;
74436: LD_VAR 0 2
74440: RET
// export function Length ( array ) ; begin
74441: LD_INT 0
74443: PPUSH
// result := array + 0 ;
74444: LD_ADDR_VAR 0 2
74448: PUSH
74449: LD_VAR 0 1
74453: PUSH
74454: LD_INT 0
74456: PLUS
74457: ST_TO_ADDR
// end ;
74458: LD_VAR 0 2
74462: RET
// export function PrepareArray ( array ) ; begin
74463: LD_INT 0
74465: PPUSH
// result := array diff 0 ;
74466: LD_ADDR_VAR 0 2
74470: PUSH
74471: LD_VAR 0 1
74475: PUSH
74476: LD_INT 0
74478: DIFF
74479: ST_TO_ADDR
// if not result [ 1 ] then
74480: LD_VAR 0 2
74484: PUSH
74485: LD_INT 1
74487: ARRAY
74488: NOT
74489: IFFALSE 74509
// result := Delete ( result , 1 ) ;
74491: LD_ADDR_VAR 0 2
74495: PUSH
74496: LD_VAR 0 2
74500: PPUSH
74501: LD_INT 1
74503: PPUSH
74504: CALL_OW 3
74508: ST_TO_ADDR
// end ;
74509: LD_VAR 0 2
74513: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
74514: LD_INT 0
74516: PPUSH
74517: PPUSH
74518: PPUSH
74519: PPUSH
// sibRocketRange := 25 ;
74520: LD_ADDR_VAR 0 6
74524: PUSH
74525: LD_INT 25
74527: ST_TO_ADDR
// result := false ;
74528: LD_ADDR_VAR 0 4
74532: PUSH
74533: LD_INT 0
74535: ST_TO_ADDR
// for i := 0 to 5 do
74536: LD_ADDR_VAR 0 5
74540: PUSH
74541: DOUBLE
74542: LD_INT 0
74544: DEC
74545: ST_TO_ADDR
74546: LD_INT 5
74548: PUSH
74549: FOR_TO
74550: IFFALSE 74617
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
74552: LD_VAR 0 1
74556: PPUSH
74557: LD_VAR 0 5
74561: PPUSH
74562: LD_VAR 0 6
74566: PPUSH
74567: CALL_OW 272
74571: PPUSH
74572: LD_VAR 0 2
74576: PPUSH
74577: LD_VAR 0 5
74581: PPUSH
74582: LD_VAR 0 6
74586: PPUSH
74587: CALL_OW 273
74591: PPUSH
74592: LD_VAR 0 3
74596: PPUSH
74597: CALL_OW 309
74601: IFFALSE 74615
// begin result := true ;
74603: LD_ADDR_VAR 0 4
74607: PUSH
74608: LD_INT 1
74610: ST_TO_ADDR
// exit ;
74611: POP
74612: POP
74613: GO 74619
// end ;
74615: GO 74549
74617: POP
74618: POP
// end ;
74619: LD_VAR 0 4
74623: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
74624: LD_INT 0
74626: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
74627: LD_VAR 0 1
74631: PPUSH
74632: LD_VAR 0 2
74636: PPUSH
74637: LD_INT 0
74639: PPUSH
74640: LD_INT 0
74642: PPUSH
74643: LD_INT 1
74645: PPUSH
74646: LD_INT 0
74648: PPUSH
74649: CALL_OW 587
// end ;
74653: LD_VAR 0 3
74657: RET
// export function CenterOnNow ( unit ) ; begin
74658: LD_INT 0
74660: PPUSH
// result := IsInUnit ( unit ) ;
74661: LD_ADDR_VAR 0 2
74665: PUSH
74666: LD_VAR 0 1
74670: PPUSH
74671: CALL_OW 310
74675: ST_TO_ADDR
// if not result then
74676: LD_VAR 0 2
74680: NOT
74681: IFFALSE 74693
// result := unit ;
74683: LD_ADDR_VAR 0 2
74687: PUSH
74688: LD_VAR 0 1
74692: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
74693: LD_VAR 0 1
74697: PPUSH
74698: CALL_OW 87
// end ;
74702: LD_VAR 0 2
74706: RET
// export function ComMoveHex ( unit , hex ) ; begin
74707: LD_INT 0
74709: PPUSH
// if not hex then
74710: LD_VAR 0 2
74714: NOT
74715: IFFALSE 74719
// exit ;
74717: GO 74772
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
74719: LD_VAR 0 2
74723: PUSH
74724: LD_INT 1
74726: ARRAY
74727: PPUSH
74728: LD_VAR 0 2
74732: PUSH
74733: LD_INT 2
74735: ARRAY
74736: PPUSH
74737: CALL_OW 428
74741: IFFALSE 74745
// exit ;
74743: GO 74772
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
74745: LD_VAR 0 1
74749: PPUSH
74750: LD_VAR 0 2
74754: PUSH
74755: LD_INT 1
74757: ARRAY
74758: PPUSH
74759: LD_VAR 0 2
74763: PUSH
74764: LD_INT 2
74766: ARRAY
74767: PPUSH
74768: CALL_OW 111
// end ;
74772: LD_VAR 0 3
74776: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
74777: LD_INT 0
74779: PPUSH
74780: PPUSH
74781: PPUSH
// if not unit or not enemy then
74782: LD_VAR 0 1
74786: NOT
74787: PUSH
74788: LD_VAR 0 2
74792: NOT
74793: OR
74794: IFFALSE 74798
// exit ;
74796: GO 74922
// x := GetX ( enemy ) ;
74798: LD_ADDR_VAR 0 4
74802: PUSH
74803: LD_VAR 0 2
74807: PPUSH
74808: CALL_OW 250
74812: ST_TO_ADDR
// y := GetY ( enemy ) ;
74813: LD_ADDR_VAR 0 5
74817: PUSH
74818: LD_VAR 0 2
74822: PPUSH
74823: CALL_OW 251
74827: ST_TO_ADDR
// if ValidHex ( x , y ) then
74828: LD_VAR 0 4
74832: PPUSH
74833: LD_VAR 0 5
74837: PPUSH
74838: CALL_OW 488
74842: IFFALSE 74922
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
74844: LD_VAR 0 2
74848: PPUSH
74849: CALL_OW 247
74853: PUSH
74854: LD_INT 3
74856: PUSH
74857: LD_INT 2
74859: PUSH
74860: EMPTY
74861: LIST
74862: LIST
74863: IN
74864: PUSH
74865: LD_VAR 0 1
74869: PPUSH
74870: CALL_OW 255
74874: PPUSH
74875: LD_VAR 0 2
74879: PPUSH
74880: CALL_OW 292
74884: AND
74885: IFFALSE 74903
// ComAttackUnit ( unit , enemy ) else
74887: LD_VAR 0 1
74891: PPUSH
74892: LD_VAR 0 2
74896: PPUSH
74897: CALL_OW 115
74901: GO 74922
// ComAgressiveMove ( unit , x , y ) ;
74903: LD_VAR 0 1
74907: PPUSH
74908: LD_VAR 0 4
74912: PPUSH
74913: LD_VAR 0 5
74917: PPUSH
74918: CALL_OW 114
// end ;
74922: LD_VAR 0 3
74926: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
74927: LD_INT 0
74929: PPUSH
74930: PPUSH
74931: PPUSH
// list := AreaToList ( area , 0 ) ;
74932: LD_ADDR_VAR 0 5
74936: PUSH
74937: LD_VAR 0 1
74941: PPUSH
74942: LD_INT 0
74944: PPUSH
74945: CALL_OW 517
74949: ST_TO_ADDR
// if not list then
74950: LD_VAR 0 5
74954: NOT
74955: IFFALSE 74959
// exit ;
74957: GO 75089
// if all then
74959: LD_VAR 0 2
74963: IFFALSE 75051
// begin for i := 1 to list [ 1 ] do
74965: LD_ADDR_VAR 0 4
74969: PUSH
74970: DOUBLE
74971: LD_INT 1
74973: DEC
74974: ST_TO_ADDR
74975: LD_VAR 0 5
74979: PUSH
74980: LD_INT 1
74982: ARRAY
74983: PUSH
74984: FOR_TO
74985: IFFALSE 75047
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
74987: LD_ADDR_VAR 0 3
74991: PUSH
74992: LD_VAR 0 3
74996: PPUSH
74997: LD_VAR 0 3
75001: PUSH
75002: LD_INT 1
75004: PLUS
75005: PPUSH
75006: LD_VAR 0 5
75010: PUSH
75011: LD_INT 1
75013: ARRAY
75014: PUSH
75015: LD_VAR 0 4
75019: ARRAY
75020: PUSH
75021: LD_VAR 0 5
75025: PUSH
75026: LD_INT 2
75028: ARRAY
75029: PUSH
75030: LD_VAR 0 4
75034: ARRAY
75035: PUSH
75036: EMPTY
75037: LIST
75038: LIST
75039: PPUSH
75040: CALL_OW 1
75044: ST_TO_ADDR
75045: GO 74984
75047: POP
75048: POP
// exit ;
75049: GO 75089
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
75051: LD_ADDR_VAR 0 3
75055: PUSH
75056: LD_VAR 0 5
75060: PUSH
75061: LD_INT 1
75063: ARRAY
75064: PUSH
75065: LD_INT 1
75067: ARRAY
75068: PUSH
75069: LD_VAR 0 5
75073: PUSH
75074: LD_INT 2
75076: ARRAY
75077: PUSH
75078: LD_INT 1
75080: ARRAY
75081: PUSH
75082: EMPTY
75083: LIST
75084: LIST
75085: PUSH
75086: EMPTY
75087: LIST
75088: ST_TO_ADDR
// end ;
75089: LD_VAR 0 3
75093: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
75094: LD_INT 0
75096: PPUSH
75097: PPUSH
// list := AreaToList ( area , 0 ) ;
75098: LD_ADDR_VAR 0 4
75102: PUSH
75103: LD_VAR 0 1
75107: PPUSH
75108: LD_INT 0
75110: PPUSH
75111: CALL_OW 517
75115: ST_TO_ADDR
// if not list then
75116: LD_VAR 0 4
75120: NOT
75121: IFFALSE 75125
// exit ;
75123: GO 75166
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
75125: LD_ADDR_VAR 0 3
75129: PUSH
75130: LD_VAR 0 4
75134: PUSH
75135: LD_INT 1
75137: ARRAY
75138: PUSH
75139: LD_INT 1
75141: ARRAY
75142: PUSH
75143: LD_VAR 0 4
75147: PUSH
75148: LD_INT 2
75150: ARRAY
75151: PUSH
75152: LD_INT 1
75154: ARRAY
75155: PUSH
75156: LD_VAR 0 2
75160: PUSH
75161: EMPTY
75162: LIST
75163: LIST
75164: LIST
75165: ST_TO_ADDR
// end ;
75166: LD_VAR 0 3
75170: RET
// export function First ( array ) ; begin
75171: LD_INT 0
75173: PPUSH
// if not array then
75174: LD_VAR 0 1
75178: NOT
75179: IFFALSE 75183
// exit ;
75181: GO 75197
// result := array [ 1 ] ;
75183: LD_ADDR_VAR 0 2
75187: PUSH
75188: LD_VAR 0 1
75192: PUSH
75193: LD_INT 1
75195: ARRAY
75196: ST_TO_ADDR
// end ;
75197: LD_VAR 0 2
75201: RET
// export function Last ( array ) ; begin
75202: LD_INT 0
75204: PPUSH
// if not array then
75205: LD_VAR 0 1
75209: NOT
75210: IFFALSE 75214
// exit ;
75212: GO 75230
// result := array [ array ] ;
75214: LD_ADDR_VAR 0 2
75218: PUSH
75219: LD_VAR 0 1
75223: PUSH
75224: LD_VAR 0 1
75228: ARRAY
75229: ST_TO_ADDR
// end ;
75230: LD_VAR 0 2
75234: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
75235: LD_INT 0
75237: PPUSH
75238: PPUSH
// result := [ ] ;
75239: LD_ADDR_VAR 0 5
75243: PUSH
75244: EMPTY
75245: ST_TO_ADDR
// if not array then
75246: LD_VAR 0 1
75250: NOT
75251: IFFALSE 75255
// exit ;
75253: GO 75367
// for i := 1 to array do
75255: LD_ADDR_VAR 0 6
75259: PUSH
75260: DOUBLE
75261: LD_INT 1
75263: DEC
75264: ST_TO_ADDR
75265: LD_VAR 0 1
75269: PUSH
75270: FOR_TO
75271: IFFALSE 75365
// if array [ i ] [ index ] = value then
75273: LD_VAR 0 1
75277: PUSH
75278: LD_VAR 0 6
75282: ARRAY
75283: PUSH
75284: LD_VAR 0 2
75288: ARRAY
75289: PUSH
75290: LD_VAR 0 3
75294: EQUAL
75295: IFFALSE 75363
// begin if indexColumn then
75297: LD_VAR 0 4
75301: IFFALSE 75337
// result := Join ( result , array [ i ] [ indexColumn ] ) else
75303: LD_ADDR_VAR 0 5
75307: PUSH
75308: LD_VAR 0 5
75312: PPUSH
75313: LD_VAR 0 1
75317: PUSH
75318: LD_VAR 0 6
75322: ARRAY
75323: PUSH
75324: LD_VAR 0 4
75328: ARRAY
75329: PPUSH
75330: CALL 70705 0 2
75334: ST_TO_ADDR
75335: GO 75363
// result := Join ( result , array [ i ] ) ;
75337: LD_ADDR_VAR 0 5
75341: PUSH
75342: LD_VAR 0 5
75346: PPUSH
75347: LD_VAR 0 1
75351: PUSH
75352: LD_VAR 0 6
75356: ARRAY
75357: PPUSH
75358: CALL 70705 0 2
75362: ST_TO_ADDR
// end ;
75363: GO 75270
75365: POP
75366: POP
// end ;
75367: LD_VAR 0 5
75371: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
75372: LD_INT 0
75374: PPUSH
75375: PPUSH
75376: PPUSH
// if btype = b_depot then
75377: LD_VAR 0 2
75381: PUSH
75382: LD_INT 0
75384: EQUAL
75385: IFFALSE 75397
// begin result := true ;
75387: LD_ADDR_VAR 0 3
75391: PUSH
75392: LD_INT 1
75394: ST_TO_ADDR
// exit ;
75395: GO 75513
// end ; pom := GetBase ( depot ) ;
75397: LD_ADDR_VAR 0 4
75401: PUSH
75402: LD_VAR 0 1
75406: PPUSH
75407: CALL_OW 274
75411: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
75412: LD_ADDR_VAR 0 5
75416: PUSH
75417: LD_VAR 0 2
75421: PPUSH
75422: LD_VAR 0 1
75426: PPUSH
75427: CALL_OW 248
75431: PPUSH
75432: CALL_OW 450
75436: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
75437: LD_ADDR_VAR 0 3
75441: PUSH
75442: LD_VAR 0 4
75446: PPUSH
75447: LD_INT 1
75449: PPUSH
75450: CALL_OW 275
75454: PUSH
75455: LD_VAR 0 5
75459: PUSH
75460: LD_INT 1
75462: ARRAY
75463: GREATEREQUAL
75464: PUSH
75465: LD_VAR 0 4
75469: PPUSH
75470: LD_INT 2
75472: PPUSH
75473: CALL_OW 275
75477: PUSH
75478: LD_VAR 0 5
75482: PUSH
75483: LD_INT 2
75485: ARRAY
75486: GREATEREQUAL
75487: AND
75488: PUSH
75489: LD_VAR 0 4
75493: PPUSH
75494: LD_INT 3
75496: PPUSH
75497: CALL_OW 275
75501: PUSH
75502: LD_VAR 0 5
75506: PUSH
75507: LD_INT 3
75509: ARRAY
75510: GREATEREQUAL
75511: AND
75512: ST_TO_ADDR
// end ;
75513: LD_VAR 0 3
75517: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
75518: LD_INT 0
75520: PPUSH
// if not vehicles or not parkingPoint then
75521: LD_VAR 0 1
75525: NOT
75526: PUSH
75527: LD_VAR 0 2
75531: NOT
75532: OR
75533: IFFALSE 75537
// exit ;
75535: GO 75635
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
75537: LD_ADDR_VAR 0 1
75541: PUSH
75542: LD_VAR 0 1
75546: PPUSH
75547: LD_INT 50
75549: PUSH
75550: EMPTY
75551: LIST
75552: PUSH
75553: LD_INT 3
75555: PUSH
75556: LD_INT 92
75558: PUSH
75559: LD_VAR 0 2
75563: PUSH
75564: LD_INT 1
75566: ARRAY
75567: PUSH
75568: LD_VAR 0 2
75572: PUSH
75573: LD_INT 2
75575: ARRAY
75576: PUSH
75577: LD_INT 8
75579: PUSH
75580: EMPTY
75581: LIST
75582: LIST
75583: LIST
75584: LIST
75585: PUSH
75586: EMPTY
75587: LIST
75588: LIST
75589: PUSH
75590: EMPTY
75591: LIST
75592: LIST
75593: PPUSH
75594: CALL_OW 72
75598: ST_TO_ADDR
// if not vehicles then
75599: LD_VAR 0 1
75603: NOT
75604: IFFALSE 75608
// exit ;
75606: GO 75635
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
75608: LD_VAR 0 1
75612: PPUSH
75613: LD_VAR 0 2
75617: PUSH
75618: LD_INT 1
75620: ARRAY
75621: PPUSH
75622: LD_VAR 0 2
75626: PUSH
75627: LD_INT 2
75629: ARRAY
75630: PPUSH
75631: CALL_OW 111
// end ; end_of_file
75635: LD_VAR 0 3
75639: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
75640: LD_VAR 0 1
75644: PUSH
75645: LD_INT 200
75647: DOUBLE
75648: GREATEREQUAL
75649: IFFALSE 75657
75651: LD_INT 299
75653: DOUBLE
75654: LESSEQUAL
75655: IFTRUE 75659
75657: GO 75691
75659: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
75660: LD_VAR 0 1
75664: PPUSH
75665: LD_VAR 0 2
75669: PPUSH
75670: LD_VAR 0 3
75674: PPUSH
75675: LD_VAR 0 4
75679: PPUSH
75680: LD_VAR 0 5
75684: PPUSH
75685: CALL 28496 0 5
75689: GO 75768
75691: LD_INT 300
75693: DOUBLE
75694: GREATEREQUAL
75695: IFFALSE 75703
75697: LD_INT 399
75699: DOUBLE
75700: LESSEQUAL
75701: IFTRUE 75705
75703: GO 75767
75705: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
75706: LD_VAR 0 1
75710: PPUSH
75711: LD_VAR 0 2
75715: PPUSH
75716: LD_VAR 0 3
75720: PPUSH
75721: LD_VAR 0 4
75725: PPUSH
75726: LD_VAR 0 5
75730: PPUSH
75731: LD_VAR 0 6
75735: PPUSH
75736: LD_VAR 0 7
75740: PPUSH
75741: LD_VAR 0 8
75745: PPUSH
75746: LD_VAR 0 9
75750: PPUSH
75751: LD_VAR 0 10
75755: PPUSH
75756: LD_VAR 0 11
75760: PPUSH
75761: CALL 24821 0 11
75765: GO 75768
75767: POP
// end ;
75768: PPOPN 11
75770: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
75771: LD_VAR 0 1
75775: PPUSH
75776: LD_VAR 0 2
75780: PPUSH
75781: LD_VAR 0 3
75785: PPUSH
75786: LD_VAR 0 4
75790: PPUSH
75791: LD_VAR 0 5
75795: PPUSH
75796: CALL 28232 0 5
// end ; end_of_file
75800: PPOPN 5
75802: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
75803: LD_VAR 0 1
75807: PPUSH
75808: LD_VAR 0 2
75812: PPUSH
75813: LD_VAR 0 3
75817: PPUSH
75818: LD_VAR 0 4
75822: PPUSH
75823: LD_VAR 0 5
75827: PPUSH
75828: LD_VAR 0 6
75832: PPUSH
75833: CALL 12473 0 6
// end ;
75837: PPOPN 6
75839: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
75840: LD_INT 0
75842: PPUSH
// begin if not units then
75843: LD_VAR 0 1
75847: NOT
75848: IFFALSE 75852
// exit ;
75850: GO 75852
// end ;
75852: PPOPN 7
75854: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
75855: CALL 12377 0 0
// end ;
75859: PPOPN 1
75861: END
