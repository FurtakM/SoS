// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// Init ;
   8: CALL 44 0 0
// DebugMode ;
  12: CALL 265 0 0
// AnimateTrees ( true ) ;
  16: LD_INT 1
  18: PPUSH
  19: CALL_OW 573
// CreateNature ;
  23: CALL 1568 0 0
// PrepareRussians ;
  27: CALL 4578 0 0
// PrepareAmericans ;
  31: CALL 3448 0 0
// Action ;
  35: CALL 8696 0 0
// SaveForQuickRestart ;
  39: CALL_OW 22
// end ;
  43: END
// export debug ; export mission_prev_prefix , mission_prefix ; export buildings_counter , time_to_end , can_end , must_end , kill_counter ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// mission_prefix := 07c_ ;
  55: LD_ADDR_EXP 3
  59: PUSH
  60: LD_STRING 07c_
  62: ST_TO_ADDR
// mission_prev_prefix := 07_ ;
  63: LD_ADDR_EXP 2
  67: PUSH
  68: LD_STRING 07_
  70: ST_TO_ADDR
// buildings_counter := 0 ;
  71: LD_ADDR_EXP 4
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// time_to_end := [ [ 32 32$00 , 29 29$00 , 26 26$00 , 23 23$00 ] [ Difficulty ] , [ 38 38$00 , 36 36$00 , 34 34$00 , 32 32$00 ] [ Difficulty ] , [ 43 43$00 , 41 41$00 , 39 39$00 , 37 37$00 ] [ Difficulty ] ] ;
  79: LD_ADDR_EXP 5
  83: PUSH
  84: LD_INT 67200
  86: PUSH
  87: LD_INT 60900
  89: PUSH
  90: LD_INT 54600
  92: PUSH
  93: LD_INT 48300
  95: PUSH
  96: EMPTY
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: PUSH
 102: LD_OWVAR 67
 106: ARRAY
 107: PUSH
 108: LD_INT 79800
 110: PUSH
 111: LD_INT 75600
 113: PUSH
 114: LD_INT 71400
 116: PUSH
 117: LD_INT 67200
 119: PUSH
 120: EMPTY
 121: LIST
 122: LIST
 123: LIST
 124: LIST
 125: PUSH
 126: LD_OWVAR 67
 130: ARRAY
 131: PUSH
 132: LD_INT 90300
 134: PUSH
 135: LD_INT 86100
 137: PUSH
 138: LD_INT 81900
 140: PUSH
 141: LD_INT 77700
 143: PUSH
 144: EMPTY
 145: LIST
 146: LIST
 147: LIST
 148: LIST
 149: PUSH
 150: LD_OWVAR 67
 154: ARRAY
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: ST_TO_ADDR
// can_end := false ;
 161: LD_ADDR_EXP 6
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// must_end := false ;
 169: LD_ADDR_EXP 7
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// kill_counter := 0 ;
 177: LD_ADDR_EXP 8
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// end ;
 185: LD_VAR 0 1
 189: RET
// every 0 0$01 trigger not debug do
 190: LD_EXP 1
 194: NOT
 195: IFFALSE 264
 197: GO 199
 199: DISABLE
// begin enable ;
 200: ENABLE
// if not must_end then
 201: LD_EXP 7
 205: NOT
 206: IFFALSE 227
// display_strings := [ #Am07-1 , tick ] else
 208: LD_ADDR_OWVAR 47
 212: PUSH
 213: LD_STRING #Am07-1
 215: PUSH
 216: LD_OWVAR 1
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: ST_TO_ADDR
 225: GO 264
// display_strings := [ #Am07-1 , tick , #Am07-2 , time_to_end [ 3 ] - tick ] ;
 227: LD_ADDR_OWVAR 47
 231: PUSH
 232: LD_STRING #Am07-1
 234: PUSH
 235: LD_OWVAR 1
 239: PUSH
 240: LD_STRING #Am07-2
 242: PUSH
 243: LD_EXP 5
 247: PUSH
 248: LD_INT 3
 250: ARRAY
 251: PUSH
 252: LD_OWVAR 1
 256: MINUS
 257: PUSH
 258: EMPTY
 259: LIST
 260: LIST
 261: LIST
 262: LIST
 263: ST_TO_ADDR
// end ;
 264: END
// function DebugMode ; var i ; begin
 265: LD_INT 0
 267: PPUSH
 268: PPUSH
// if not debug then
 269: LD_EXP 1
 273: NOT
 274: IFFALSE 278
// exit ;
 276: GO 293
// Difficulty := 4 ;
 278: LD_ADDR_OWVAR 67
 282: PUSH
 283: LD_INT 4
 285: ST_TO_ADDR
// FogOff ( 1 ) ;
 286: LD_INT 1
 288: PPUSH
 289: CALL_OW 344
// end ;
 293: LD_VAR 0 1
 297: RET
// every 3 trigger debug do var i , filter ;
 298: LD_EXP 1
 302: IFFALSE 391
 304: GO 306
 306: DISABLE
 307: LD_INT 0
 309: PPUSH
 310: PPUSH
// begin enable ;
 311: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 500 ] ] ] ) ;
 312: LD_ADDR_VAR 0 2
 316: PUSH
 317: LD_INT 22
 319: PUSH
 320: LD_INT 1
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PUSH
 327: LD_INT 3
 329: PUSH
 330: LD_INT 24
 332: PUSH
 333: LD_INT 500
 335: PUSH
 336: EMPTY
 337: LIST
 338: LIST
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: PPUSH
 348: CALL_OW 69
 352: ST_TO_ADDR
// if not filter then
 353: LD_VAR 0 2
 357: NOT
 358: IFFALSE 362
// exit ;
 360: GO 391
// for i in filter do
 362: LD_ADDR_VAR 0 1
 366: PUSH
 367: LD_VAR 0 2
 371: PUSH
 372: FOR_IN
 373: IFFALSE 389
// SetLives ( i , 1000 ) ;
 375: LD_VAR 0 1
 379: PPUSH
 380: LD_INT 1000
 382: PPUSH
 383: CALL_OW 234
 387: GO 372
 389: POP
 390: POP
// end ;
 391: PPOPN 2
 393: END
// every 0 0$1 trigger kill_counter >= 20 do
 394: LD_EXP 8
 398: PUSH
 399: LD_INT 20
 401: GREATEREQUAL
 402: IFFALSE 414
 404: GO 406
 406: DISABLE
// SetAchievement ( ACH_HITMAN ) ;
 407: LD_STRING ACH_HITMAN
 409: PPUSH
 410: CALL_OW 543
 414: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) >= 3 do
 415: LD_INT 22
 417: PUSH
 418: LD_INT 1
 420: PUSH
 421: EMPTY
 422: LIST
 423: LIST
 424: PUSH
 425: LD_INT 23
 427: PUSH
 428: LD_INT 3
 430: PUSH
 431: EMPTY
 432: LIST
 433: LIST
 434: PUSH
 435: LD_INT 21
 437: PUSH
 438: LD_INT 2
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: LIST
 449: PPUSH
 450: CALL_OW 69
 454: PUSH
 455: LD_INT 3
 457: GREATEREQUAL
 458: IFFALSE 470
 460: GO 462
 462: DISABLE
// SetAchievement ( ACH_TANKACE ) ;
 463: LD_STRING ACH_TANKACE
 465: PPUSH
 466: CALL_OW 543
 470: END
// every 0 0$1 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) = 0 do
 471: LD_INT 2
 473: PUSH
 474: LD_INT 30
 476: PUSH
 477: LD_INT 0
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PUSH
 484: LD_INT 30
 486: PUSH
 487: LD_INT 1
 489: PUSH
 490: EMPTY
 491: LIST
 492: LIST
 493: PUSH
 494: EMPTY
 495: LIST
 496: LIST
 497: LIST
 498: PPUSH
 499: CALL_OW 69
 503: PUSH
 504: LD_INT 0
 506: EQUAL
 507: IFFALSE 519
 509: GO 511
 511: DISABLE
// SetAchievement ( ACH_COMMANDO ) ; end_of_file
 512: LD_STRING ACH_COMMANDO
 514: PPUSH
 515: CALL_OW 543
 519: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 520: LD_INT 0
 522: PPUSH
// uc_side := side ;
 523: LD_ADDR_OWVAR 20
 527: PUSH
 528: LD_VAR 0 1
 532: ST_TO_ADDR
// uc_nation := nation ;
 533: LD_ADDR_OWVAR 21
 537: PUSH
 538: LD_VAR 0 2
 542: ST_TO_ADDR
// vc_chassis := chassis ;
 543: LD_ADDR_OWVAR 37
 547: PUSH
 548: LD_VAR 0 3
 552: ST_TO_ADDR
// vc_engine := engine ;
 553: LD_ADDR_OWVAR 39
 557: PUSH
 558: LD_VAR 0 4
 562: ST_TO_ADDR
// vc_control := control ;
 563: LD_ADDR_OWVAR 38
 567: PUSH
 568: LD_VAR 0 5
 572: ST_TO_ADDR
// vc_weapon := weapon ;
 573: LD_ADDR_OWVAR 40
 577: PUSH
 578: LD_VAR 0 6
 582: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 583: LD_ADDR_OWVAR 41
 587: PUSH
 588: LD_VAR 0 7
 592: ST_TO_ADDR
// result := CreateVehicle ;
 593: LD_ADDR_VAR 0 8
 597: PUSH
 598: CALL_OW 45
 602: ST_TO_ADDR
// end ;
 603: LD_VAR 0 8
 607: RET
// export function GetRandom ( sex ) ; var i , filter ; begin
 608: LD_INT 0
 610: PPUSH
 611: PPUSH
 612: PPUSH
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] ;
 613: LD_ADDR_VAR 0 4
 617: PUSH
 618: LD_INT 22
 620: PUSH
 621: LD_INT 1
 623: PUSH
 624: EMPTY
 625: LIST
 626: LIST
 627: PUSH
 628: LD_INT 21
 630: PUSH
 631: LD_INT 1
 633: PUSH
 634: EMPTY
 635: LIST
 636: LIST
 637: PUSH
 638: LD_INT 50
 640: PUSH
 641: EMPTY
 642: LIST
 643: PUSH
 644: EMPTY
 645: LIST
 646: LIST
 647: LIST
 648: PPUSH
 649: CALL_OW 69
 653: PUSH
 654: LD_EXP 9
 658: PUSH
 659: LD_EXP 10
 663: PUSH
 664: LD_EXP 11
 668: PUSH
 669: LD_EXP 12
 673: PUSH
 674: LD_EXP 13
 678: PUSH
 679: LD_EXP 14
 683: PUSH
 684: LD_EXP 15
 688: PUSH
 689: LD_EXP 16
 693: PUSH
 694: LD_EXP 18
 698: PUSH
 699: LD_EXP 17
 703: PUSH
 704: EMPTY
 705: LIST
 706: LIST
 707: LIST
 708: LIST
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: DIFF
 716: ST_TO_ADDR
// if not filter then
 717: LD_VAR 0 4
 721: NOT
 722: IFFALSE 726
// exit ;
 724: GO 753
// result := UnitFilter ( filter , [ f_sex , sex ] ) ;
 726: LD_ADDR_VAR 0 2
 730: PUSH
 731: LD_VAR 0 4
 735: PPUSH
 736: LD_INT 26
 738: PUSH
 739: LD_VAR 0 1
 743: PUSH
 744: EMPTY
 745: LIST
 746: LIST
 747: PPUSH
 748: CALL_OW 72
 752: ST_TO_ADDR
// end ;
 753: LD_VAR 0 2
 757: RET
// export function SayX ( units , ident ) ; var i ; begin
 758: LD_INT 0
 760: PPUSH
 761: PPUSH
// result := false ;
 762: LD_ADDR_VAR 0 3
 766: PUSH
 767: LD_INT 0
 769: ST_TO_ADDR
// if not units then
 770: LD_VAR 0 1
 774: NOT
 775: IFFALSE 779
// exit ;
 777: GO 833
// for i in units do
 779: LD_ADDR_VAR 0 4
 783: PUSH
 784: LD_VAR 0 1
 788: PUSH
 789: FOR_IN
 790: IFFALSE 831
// if IsOk ( i ) then
 792: LD_VAR 0 4
 796: PPUSH
 797: CALL_OW 302
 801: IFFALSE 829
// begin Say ( i , ident ) ;
 803: LD_VAR 0 4
 807: PPUSH
 808: LD_VAR 0 2
 812: PPUSH
 813: CALL_OW 88
// result := i ;
 817: LD_ADDR_VAR 0 3
 821: PUSH
 822: LD_VAR 0 4
 826: ST_TO_ADDR
// break ;
 827: GO 831
// end ;
 829: GO 789
 831: POP
 832: POP
// end ;
 833: LD_VAR 0 3
 837: RET
// export function GoToAnotherTower ( un , b , x , y ) ; var i , filter , barracks , side ; begin
 838: LD_INT 0
 840: PPUSH
 841: PPUSH
 842: PPUSH
 843: PPUSH
 844: PPUSH
// if not un or not IsOk ( un ) then
 845: LD_VAR 0 1
 849: NOT
 850: PUSH
 851: LD_VAR 0 1
 855: PPUSH
 856: CALL_OW 302
 860: NOT
 861: OR
 862: IFFALSE 866
// exit ;
 864: GO 1173
// side := GetSide ( un ) ;
 866: LD_ADDR_VAR 0 9
 870: PUSH
 871: LD_VAR 0 1
 875: PPUSH
 876: CALL_OW 255
 880: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_not , [ f_tag , 7 ] ] , [ f_ok ] , [ f_empty ] ] ) diff b ;
 881: LD_ADDR_VAR 0 7
 885: PUSH
 886: LD_INT 22
 888: PUSH
 889: LD_VAR 0 9
 893: PUSH
 894: EMPTY
 895: LIST
 896: LIST
 897: PUSH
 898: LD_INT 30
 900: PUSH
 901: LD_INT 32
 903: PUSH
 904: EMPTY
 905: LIST
 906: LIST
 907: PUSH
 908: LD_INT 3
 910: PUSH
 911: LD_INT 120
 913: PUSH
 914: LD_INT 7
 916: PUSH
 917: EMPTY
 918: LIST
 919: LIST
 920: PUSH
 921: EMPTY
 922: LIST
 923: LIST
 924: PUSH
 925: LD_INT 50
 927: PUSH
 928: EMPTY
 929: LIST
 930: PUSH
 931: LD_INT 58
 933: PUSH
 934: EMPTY
 935: LIST
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: LIST
 941: LIST
 942: LIST
 943: PPUSH
 944: CALL_OW 69
 948: PUSH
 949: LD_VAR 0 2
 953: DIFF
 954: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_barracks ] ] ) ;
 955: LD_ADDR_VAR 0 8
 959: PUSH
 960: LD_INT 22
 962: PUSH
 963: LD_VAR 0 9
 967: PUSH
 968: EMPTY
 969: LIST
 970: LIST
 971: PUSH
 972: LD_INT 30
 974: PUSH
 975: LD_INT 5
 977: PUSH
 978: EMPTY
 979: LIST
 980: LIST
 981: PUSH
 982: EMPTY
 983: LIST
 984: LIST
 985: PPUSH
 986: CALL_OW 69
 990: ST_TO_ADDR
// if not filter then
 991: LD_VAR 0 7
 995: NOT
 996: IFFALSE 1086
// begin if barracks then
 998: LD_VAR 0 8
1002: IFFALSE 1065
// for i in barracks do
1004: LD_ADDR_VAR 0 6
1008: PUSH
1009: LD_VAR 0 8
1013: PUSH
1014: FOR_IN
1015: IFFALSE 1063
// begin if UnitsInside ( i ) < 6 and IsOk ( i ) then
1017: LD_VAR 0 6
1021: PPUSH
1022: CALL_OW 313
1026: PUSH
1027: LD_INT 6
1029: LESS
1030: PUSH
1031: LD_VAR 0 6
1035: PPUSH
1036: CALL_OW 302
1040: AND
1041: IFFALSE 1061
// begin ComEnterUnit ( un , i ) ;
1043: LD_VAR 0 1
1047: PPUSH
1048: LD_VAR 0 6
1052: PPUSH
1053: CALL_OW 120
// exit ;
1057: POP
1058: POP
1059: GO 1173
// end ; end ;
1061: GO 1014
1063: POP
1064: POP
// ComMoveXY ( un , x , y ) ;
1065: LD_VAR 0 1
1069: PPUSH
1070: LD_VAR 0 3
1074: PPUSH
1075: LD_VAR 0 4
1079: PPUSH
1080: CALL_OW 111
// end else
1084: GO 1173
// begin filter := SortByDistanceUnit ( un , filter , true , true ) ;
1086: LD_ADDR_VAR 0 7
1090: PUSH
1091: LD_VAR 0 1
1095: PPUSH
1096: LD_VAR 0 7
1100: PPUSH
1101: LD_INT 1
1103: PPUSH
1104: LD_INT 1
1106: PPUSH
1107: CALL 37902 0 4
1111: ST_TO_ADDR
// if filter then
1112: LD_VAR 0 7
1116: IFFALSE 1154
// begin SetTag ( filter [ 1 ] , 7 ) ;
1118: LD_VAR 0 7
1122: PUSH
1123: LD_INT 1
1125: ARRAY
1126: PPUSH
1127: LD_INT 7
1129: PPUSH
1130: CALL_OW 109
// ComEnterUnit ( un , filter [ 1 ] ) ;
1134: LD_VAR 0 1
1138: PPUSH
1139: LD_VAR 0 7
1143: PUSH
1144: LD_INT 1
1146: ARRAY
1147: PPUSH
1148: CALL_OW 120
// end else
1152: GO 1173
// ComMoveXY ( un , x , y ) ;
1154: LD_VAR 0 1
1158: PPUSH
1159: LD_VAR 0 3
1163: PPUSH
1164: LD_VAR 0 4
1168: PPUSH
1169: CALL_OW 111
// end ; end ;
1173: LD_VAR 0 5
1177: RET
// export function BaseNeedEnergy ( base ) ; var i , tmp ; begin
1178: LD_INT 0
1180: PPUSH
1181: PPUSH
1182: PPUSH
// if not base then
1183: LD_VAR 0 1
1187: NOT
1188: IFFALSE 1192
// exit ;
1190: GO 1250
// tmp := GetEnergy ( GetBase ( base ) ) ;
1192: LD_ADDR_VAR 0 4
1196: PUSH
1197: LD_VAR 0 1
1201: PPUSH
1202: CALL_OW 274
1206: PPUSH
1207: CALL_OW 278
1211: ST_TO_ADDR
// if tmp [ 1 ] > tmp [ 4 ] then
1212: LD_VAR 0 4
1216: PUSH
1217: LD_INT 1
1219: ARRAY
1220: PUSH
1221: LD_VAR 0 4
1225: PUSH
1226: LD_INT 4
1228: ARRAY
1229: GREATER
1230: IFFALSE 1242
// result := true else
1232: LD_ADDR_VAR 0 2
1236: PUSH
1237: LD_INT 1
1239: ST_TO_ADDR
1240: GO 1250
// result := false ;
1242: LD_ADDR_VAR 0 2
1246: PUSH
1247: LD_INT 0
1249: ST_TO_ADDR
// end ;
1250: LD_VAR 0 2
1254: RET
// export function FilterPeople ( side ) ; begin
1255: LD_INT 0
1257: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) ;
1258: LD_ADDR_VAR 0 2
1262: PUSH
1263: LD_INT 22
1265: PUSH
1266: LD_VAR 0 1
1270: PUSH
1271: EMPTY
1272: LIST
1273: LIST
1274: PUSH
1275: LD_INT 21
1277: PUSH
1278: LD_INT 1
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: PPUSH
1289: CALL_OW 69
1293: ST_TO_ADDR
// end ;
1294: LD_VAR 0 2
1298: RET
// export function FilterDrivers ( side ) ; begin
1299: LD_INT 0
1301: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_outside ] ] ] ) ;
1302: LD_ADDR_VAR 0 2
1306: PUSH
1307: LD_INT 22
1309: PUSH
1310: LD_VAR 0 1
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: PUSH
1319: LD_INT 3
1321: PUSH
1322: LD_INT 56
1324: PUSH
1325: EMPTY
1326: LIST
1327: PUSH
1328: EMPTY
1329: LIST
1330: LIST
1331: PUSH
1332: EMPTY
1333: LIST
1334: LIST
1335: PPUSH
1336: CALL_OW 69
1340: ST_TO_ADDR
// end ;
1341: LD_VAR 0 2
1345: RET
// export function FilterPeopleArea ( side , area ) ; begin
1346: LD_INT 0
1348: PPUSH
// result := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
1349: LD_ADDR_VAR 0 3
1353: PUSH
1354: LD_VAR 0 2
1358: PPUSH
1359: LD_INT 22
1361: PUSH
1362: LD_INT 1
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: PUSH
1369: LD_INT 21
1371: PUSH
1372: LD_INT 1
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: PUSH
1379: EMPTY
1380: LIST
1381: LIST
1382: PPUSH
1383: CALL_OW 70
1387: ST_TO_ADDR
// end ;
1388: LD_VAR 0 3
1392: RET
// export function FilterDriversArea ( side , area ) ; var i , tmp ; begin
1393: LD_INT 0
1395: PPUSH
1396: PPUSH
1397: PPUSH
// tmp := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
1398: LD_ADDR_VAR 0 5
1402: PUSH
1403: LD_VAR 0 2
1407: PPUSH
1408: LD_INT 22
1410: PUSH
1411: LD_INT 1
1413: PUSH
1414: EMPTY
1415: LIST
1416: LIST
1417: PUSH
1418: LD_INT 21
1420: PUSH
1421: LD_INT 2
1423: PUSH
1424: EMPTY
1425: LIST
1426: LIST
1427: PUSH
1428: LD_INT 3
1430: PUSH
1431: LD_INT 58
1433: PUSH
1434: EMPTY
1435: LIST
1436: PUSH
1437: EMPTY
1438: LIST
1439: LIST
1440: PUSH
1441: EMPTY
1442: LIST
1443: LIST
1444: LIST
1445: PPUSH
1446: CALL_OW 70
1450: ST_TO_ADDR
// result := [ ] ;
1451: LD_ADDR_VAR 0 3
1455: PUSH
1456: EMPTY
1457: ST_TO_ADDR
// if not tmp then
1458: LD_VAR 0 5
1462: NOT
1463: IFFALSE 1467
// exit ;
1465: GO 1519
// for i in tmp do
1467: LD_ADDR_VAR 0 4
1471: PUSH
1472: LD_VAR 0 5
1476: PUSH
1477: FOR_IN
1478: IFFALSE 1503
// result := result union IsDrivenBy ( i ) ;
1480: LD_ADDR_VAR 0 3
1484: PUSH
1485: LD_VAR 0 3
1489: PUSH
1490: LD_VAR 0 4
1494: PPUSH
1495: CALL_OW 311
1499: UNION
1500: ST_TO_ADDR
1501: GO 1477
1503: POP
1504: POP
// result := result diff 0 ;
1505: LD_ADDR_VAR 0 3
1509: PUSH
1510: LD_VAR 0 3
1514: PUSH
1515: LD_INT 0
1517: DIFF
1518: ST_TO_ADDR
// end ;
1519: LD_VAR 0 3
1523: RET
// export function FilterBuildings ( side ) ; begin
1524: LD_INT 0
1526: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
1527: LD_ADDR_VAR 0 2
1531: PUSH
1532: LD_INT 22
1534: PUSH
1535: LD_VAR 0 1
1539: PUSH
1540: EMPTY
1541: LIST
1542: LIST
1543: PUSH
1544: LD_INT 21
1546: PUSH
1547: LD_INT 3
1549: PUSH
1550: EMPTY
1551: LIST
1552: LIST
1553: PUSH
1554: EMPTY
1555: LIST
1556: LIST
1557: PPUSH
1558: CALL_OW 69
1562: ST_TO_ADDR
// end ;
1563: LD_VAR 0 2
1567: RET
// export function CreateNature ; var i , animal , nat_area ; begin
1568: LD_INT 0
1570: PPUSH
1571: PPUSH
1572: PPUSH
1573: PPUSH
// uc_side = 0 ;
1574: LD_ADDR_OWVAR 20
1578: PUSH
1579: LD_INT 0
1581: ST_TO_ADDR
// uc_nation = 0 ;
1582: LD_ADDR_OWVAR 21
1586: PUSH
1587: LD_INT 0
1589: ST_TO_ADDR
// nat_area := wildArea ;
1590: LD_ADDR_VAR 0 4
1594: PUSH
1595: LD_INT 3
1597: ST_TO_ADDR
// InitHc ;
1598: CALL_OW 19
// for i = 1 to 4 do
1602: LD_ADDR_VAR 0 2
1606: PUSH
1607: DOUBLE
1608: LD_INT 1
1610: DEC
1611: ST_TO_ADDR
1612: LD_INT 4
1614: PUSH
1615: FOR_TO
1616: IFFALSE 1671
// begin hc_class = 18 ;
1618: LD_ADDR_OWVAR 28
1622: PUSH
1623: LD_INT 18
1625: ST_TO_ADDR
// hc_gallery =  ;
1626: LD_ADDR_OWVAR 33
1630: PUSH
1631: LD_STRING 
1633: ST_TO_ADDR
// hc_face_number = 1 ;
1634: LD_ADDR_OWVAR 34
1638: PUSH
1639: LD_INT 1
1641: ST_TO_ADDR
// animal := CreateHuman ;
1642: LD_ADDR_VAR 0 3
1646: PUSH
1647: CALL_OW 44
1651: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1652: LD_VAR 0 3
1656: PPUSH
1657: LD_VAR 0 4
1661: PPUSH
1662: LD_INT 0
1664: PPUSH
1665: CALL_OW 49
// end ;
1669: GO 1615
1671: POP
1672: POP
// for i = 1 to 6 do
1673: LD_ADDR_VAR 0 2
1677: PUSH
1678: DOUBLE
1679: LD_INT 1
1681: DEC
1682: ST_TO_ADDR
1683: LD_INT 6
1685: PUSH
1686: FOR_TO
1687: IFFALSE 1758
// begin hc_class = class_tiger ;
1689: LD_ADDR_OWVAR 28
1693: PUSH
1694: LD_INT 14
1696: ST_TO_ADDR
// hc_gallery =  ;
1697: LD_ADDR_OWVAR 33
1701: PUSH
1702: LD_STRING 
1704: ST_TO_ADDR
// hc_agressivity = Rand ( 0 , 10 ) ;
1705: LD_ADDR_OWVAR 35
1709: PUSH
1710: LD_INT 0
1712: PPUSH
1713: LD_INT 10
1715: PPUSH
1716: CALL_OW 12
1720: ST_TO_ADDR
// hc_face_number = 3 ;
1721: LD_ADDR_OWVAR 34
1725: PUSH
1726: LD_INT 3
1728: ST_TO_ADDR
// animal := CreateHuman ;
1729: LD_ADDR_VAR 0 3
1733: PUSH
1734: CALL_OW 44
1738: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1739: LD_VAR 0 3
1743: PPUSH
1744: LD_VAR 0 4
1748: PPUSH
1749: LD_INT 0
1751: PPUSH
1752: CALL_OW 49
// end ;
1756: GO 1686
1758: POP
1759: POP
// for i = 1 to 2 do
1760: LD_ADDR_VAR 0 2
1764: PUSH
1765: DOUBLE
1766: LD_INT 1
1768: DEC
1769: ST_TO_ADDR
1770: LD_INT 2
1772: PUSH
1773: FOR_TO
1774: IFFALSE 1837
// begin hc_class = 21 ;
1776: LD_ADDR_OWVAR 28
1780: PUSH
1781: LD_INT 21
1783: ST_TO_ADDR
// hc_gallery =  ;
1784: LD_ADDR_OWVAR 33
1788: PUSH
1789: LD_STRING 
1791: ST_TO_ADDR
// hc_agressivity = 0 ;
1792: LD_ADDR_OWVAR 35
1796: PUSH
1797: LD_INT 0
1799: ST_TO_ADDR
// hc_face_number = 5 ;
1800: LD_ADDR_OWVAR 34
1804: PUSH
1805: LD_INT 5
1807: ST_TO_ADDR
// animal := CreateHuman ;
1808: LD_ADDR_VAR 0 3
1812: PUSH
1813: CALL_OW 44
1817: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1818: LD_VAR 0 3
1822: PPUSH
1823: LD_VAR 0 4
1827: PPUSH
1828: LD_INT 0
1830: PPUSH
1831: CALL_OW 49
// end ;
1835: GO 1773
1837: POP
1838: POP
// for i = 1 to 6 do
1839: LD_ADDR_VAR 0 2
1843: PUSH
1844: DOUBLE
1845: LD_INT 1
1847: DEC
1848: ST_TO_ADDR
1849: LD_INT 6
1851: PUSH
1852: FOR_TO
1853: IFFALSE 1908
// begin hc_class = 13 ;
1855: LD_ADDR_OWVAR 28
1859: PUSH
1860: LD_INT 13
1862: ST_TO_ADDR
// hc_gallery =  ;
1863: LD_ADDR_OWVAR 33
1867: PUSH
1868: LD_STRING 
1870: ST_TO_ADDR
// hc_face_number = 4 ;
1871: LD_ADDR_OWVAR 34
1875: PUSH
1876: LD_INT 4
1878: ST_TO_ADDR
// animal := CreateHuman ;
1879: LD_ADDR_VAR 0 3
1883: PUSH
1884: CALL_OW 44
1888: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1889: LD_VAR 0 3
1893: PPUSH
1894: LD_VAR 0 4
1898: PPUSH
1899: LD_INT 0
1901: PPUSH
1902: CALL_OW 49
// end ;
1906: GO 1852
1908: POP
1909: POP
// for i = 1 to 2 do
1910: LD_ADDR_VAR 0 2
1914: PUSH
1915: DOUBLE
1916: LD_INT 1
1918: DEC
1919: ST_TO_ADDR
1920: LD_INT 2
1922: PUSH
1923: FOR_TO
1924: IFFALSE 1983
// begin hc_class = 20 ;
1926: LD_ADDR_OWVAR 28
1930: PUSH
1931: LD_INT 20
1933: ST_TO_ADDR
// hc_gallery =  ;
1934: LD_ADDR_OWVAR 33
1938: PUSH
1939: LD_STRING 
1941: ST_TO_ADDR
// hc_face_number = 2 ;
1942: LD_ADDR_OWVAR 34
1946: PUSH
1947: LD_INT 2
1949: ST_TO_ADDR
// animal := CreateHuman ;
1950: LD_ADDR_VAR 0 3
1954: PUSH
1955: CALL_OW 44
1959: ST_TO_ADDR
// PlaceUnitXYR ( animal , 101 , 37 , 3 , false ) ;
1960: LD_VAR 0 3
1964: PPUSH
1965: LD_INT 101
1967: PPUSH
1968: LD_INT 37
1970: PPUSH
1971: LD_INT 3
1973: PPUSH
1974: LD_INT 0
1976: PPUSH
1977: CALL_OW 50
// end ;
1981: GO 1923
1983: POP
1984: POP
// for i = 1 to 1 do
1985: LD_ADDR_VAR 0 2
1989: PUSH
1990: DOUBLE
1991: LD_INT 1
1993: DEC
1994: ST_TO_ADDR
1995: LD_INT 1
1997: PUSH
1998: FOR_TO
1999: IFFALSE 2046
// begin vc_chassis := 31 ;
2001: LD_ADDR_OWVAR 37
2005: PUSH
2006: LD_INT 31
2008: ST_TO_ADDR
// vc_control := control_rider ;
2009: LD_ADDR_OWVAR 38
2013: PUSH
2014: LD_INT 4
2016: ST_TO_ADDR
// animal := CreateVehicle ;
2017: LD_ADDR_VAR 0 3
2021: PUSH
2022: CALL_OW 45
2026: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
2027: LD_VAR 0 3
2031: PPUSH
2032: LD_VAR 0 4
2036: PPUSH
2037: LD_INT 0
2039: PPUSH
2040: CALL_OW 49
// end ;
2044: GO 1998
2046: POP
2047: POP
// end ;
2048: LD_VAR 0 1
2052: RET
// export function NearbyTowerHasEnergy ( unit ) ; var i , tmp , energy ; begin
2053: LD_INT 0
2055: PPUSH
2056: PPUSH
2057: PPUSH
2058: PPUSH
// result := [ ] ;
2059: LD_ADDR_VAR 0 2
2063: PUSH
2064: EMPTY
2065: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_dist , unit , 15 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
2066: LD_ADDR_VAR 0 4
2070: PUSH
2071: LD_INT 81
2073: PUSH
2074: LD_VAR 0 1
2078: PPUSH
2079: CALL_OW 255
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: PUSH
2088: LD_INT 91
2090: PUSH
2091: LD_VAR 0 1
2095: PUSH
2096: LD_INT 15
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: LIST
2103: PUSH
2104: LD_INT 2
2106: PUSH
2107: LD_INT 30
2109: PUSH
2110: LD_INT 32
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: PUSH
2117: LD_INT 30
2119: PUSH
2120: LD_INT 33
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: PUSH
2127: EMPTY
2128: LIST
2129: LIST
2130: LIST
2131: PUSH
2132: EMPTY
2133: LIST
2134: LIST
2135: LIST
2136: PPUSH
2137: CALL_OW 69
2141: ST_TO_ADDR
// if not tmp then
2142: LD_VAR 0 4
2146: NOT
2147: IFFALSE 2151
// exit ;
2149: GO 2220
// for i in tmp do
2151: LD_ADDR_VAR 0 3
2155: PUSH
2156: LD_VAR 0 4
2160: PUSH
2161: FOR_IN
2162: IFFALSE 2218
// begin energy := GetEnergy ( GetBase ( i ) ) ;
2164: LD_ADDR_VAR 0 5
2168: PUSH
2169: LD_VAR 0 3
2173: PPUSH
2174: CALL_OW 274
2178: PPUSH
2179: CALL_OW 278
2183: ST_TO_ADDR
// if energy [ 4 ] > energy [ 1 ] then
2184: LD_VAR 0 5
2188: PUSH
2189: LD_INT 4
2191: ARRAY
2192: PUSH
2193: LD_VAR 0 5
2197: PUSH
2198: LD_INT 1
2200: ARRAY
2201: GREATER
2202: IFFALSE 2216
// begin result := i ;
2204: LD_ADDR_VAR 0 2
2208: PUSH
2209: LD_VAR 0 3
2213: ST_TO_ADDR
// break ;
2214: GO 2218
// end ; end ;
2216: GO 2161
2218: POP
2219: POP
// end ;
2220: LD_VAR 0 2
2224: RET
// export function GetTurretWeaponBase ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
2225: LD_INT 0
2227: PPUSH
2228: PPUSH
2229: PPUSH
2230: PPUSH
2231: PPUSH
2232: PPUSH
2233: PPUSH
2234: PPUSH
2235: PPUSH
2236: PPUSH
2237: PPUSH
2238: PPUSH
2239: PPUSH
2240: PPUSH
2241: PPUSH
2242: PPUSH
// result := false ;
2243: LD_ADDR_VAR 0 2
2247: PUSH
2248: LD_INT 0
2250: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
2251: LD_VAR 0 1
2255: NOT
2256: PUSH
2257: LD_VAR 0 1
2261: PPUSH
2262: CALL_OW 266
2266: PUSH
2267: LD_INT 32
2269: PUSH
2270: LD_INT 33
2272: PUSH
2273: EMPTY
2274: LIST
2275: LIST
2276: IN
2277: NOT
2278: OR
2279: IFFALSE 2283
// exit ;
2281: GO 3443
// nat := GetNation ( tower ) ;
2283: LD_ADDR_VAR 0 11
2287: PUSH
2288: LD_VAR 0 1
2292: PPUSH
2293: CALL_OW 248
2297: ST_TO_ADDR
// side := GetSide ( tower ) ;
2298: LD_ADDR_VAR 0 15
2302: PUSH
2303: LD_VAR 0 1
2307: PPUSH
2308: CALL_OW 255
2312: ST_TO_ADDR
// x := GetX ( tower ) ;
2313: LD_ADDR_VAR 0 9
2317: PUSH
2318: LD_VAR 0 1
2322: PPUSH
2323: CALL_OW 250
2327: ST_TO_ADDR
// y := GetY ( tower ) ;
2328: LD_ADDR_VAR 0 10
2332: PUSH
2333: LD_VAR 0 1
2337: PPUSH
2338: CALL_OW 251
2342: ST_TO_ADDR
// if not x or not y then
2343: LD_VAR 0 9
2347: NOT
2348: PUSH
2349: LD_VAR 0 10
2353: NOT
2354: OR
2355: IFFALSE 2359
// exit ;
2357: GO 3443
// weapon := 0 ;
2359: LD_ADDR_VAR 0 17
2363: PUSH
2364: LD_INT 0
2366: ST_TO_ADDR
// fac_list := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
2367: LD_ADDR_VAR 0 16
2371: PUSH
2372: LD_INT 42
2374: PUSH
2375: LD_INT 43
2377: PUSH
2378: LD_INT 44
2380: PUSH
2381: LD_INT 46
2383: PUSH
2384: EMPTY
2385: LIST
2386: LIST
2387: LIST
2388: LIST
2389: ST_TO_ADDR
// if not fac_list then
2390: LD_VAR 0 16
2394: NOT
2395: IFFALSE 2399
// exit ;
2397: GO 3443
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
2399: LD_ADDR_VAR 0 4
2403: PUSH
2404: LD_INT 4
2406: PUSH
2407: LD_INT 5
2409: PUSH
2410: LD_INT 9
2412: PUSH
2413: LD_INT 10
2415: PUSH
2416: LD_INT 6
2418: PUSH
2419: LD_INT 7
2421: PUSH
2422: LD_INT 11
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: LIST
2429: LIST
2430: LIST
2431: LIST
2432: LIST
2433: PUSH
2434: LD_INT 27
2436: PUSH
2437: LD_INT 28
2439: PUSH
2440: LD_INT 26
2442: PUSH
2443: LD_INT 30
2445: PUSH
2446: EMPTY
2447: LIST
2448: LIST
2449: LIST
2450: LIST
2451: PUSH
2452: LD_INT 43
2454: PUSH
2455: LD_INT 44
2457: PUSH
2458: LD_INT 46
2460: PUSH
2461: LD_INT 45
2463: PUSH
2464: LD_INT 47
2466: PUSH
2467: LD_INT 49
2469: PUSH
2470: EMPTY
2471: LIST
2472: LIST
2473: LIST
2474: LIST
2475: LIST
2476: LIST
2477: PUSH
2478: EMPTY
2479: LIST
2480: LIST
2481: LIST
2482: PUSH
2483: LD_VAR 0 11
2487: ARRAY
2488: ST_TO_ADDR
// for i in list do
2489: LD_ADDR_VAR 0 7
2493: PUSH
2494: LD_VAR 0 4
2498: PUSH
2499: FOR_IN
2500: IFFALSE 2533
// if not i in fac_list then
2502: LD_VAR 0 7
2506: PUSH
2507: LD_VAR 0 16
2511: IN
2512: NOT
2513: IFFALSE 2531
// list := list diff i ;
2515: LD_ADDR_VAR 0 4
2519: PUSH
2520: LD_VAR 0 4
2524: PUSH
2525: LD_VAR 0 7
2529: DIFF
2530: ST_TO_ADDR
2531: GO 2499
2533: POP
2534: POP
// if not list then
2535: LD_VAR 0 4
2539: NOT
2540: IFFALSE 2544
// exit ;
2542: GO 3443
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
2544: LD_VAR 0 11
2548: PUSH
2549: LD_INT 3
2551: EQUAL
2552: PUSH
2553: LD_INT 49
2555: PUSH
2556: LD_VAR 0 4
2560: IN
2561: AND
2562: PUSH
2563: LD_INT 31
2565: PPUSH
2566: LD_VAR 0 15
2570: PPUSH
2571: CALL_OW 321
2575: PUSH
2576: LD_INT 2
2578: EQUAL
2579: AND
2580: IFFALSE 2640
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
2582: LD_INT 22
2584: PUSH
2585: LD_VAR 0 15
2589: PUSH
2590: EMPTY
2591: LIST
2592: LIST
2593: PUSH
2594: LD_INT 35
2596: PUSH
2597: LD_INT 49
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: PUSH
2604: LD_INT 91
2606: PUSH
2607: LD_VAR 0 1
2611: PUSH
2612: LD_INT 10
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: LIST
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: LIST
2624: PPUSH
2625: CALL_OW 69
2629: NOT
2630: IFFALSE 2640
// weapon := ru_time_lapser ;
2632: LD_ADDR_VAR 0 17
2636: PUSH
2637: LD_INT 49
2639: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
2640: LD_VAR 0 11
2644: PUSH
2645: LD_INT 1
2647: PUSH
2648: LD_INT 2
2650: PUSH
2651: EMPTY
2652: LIST
2653: LIST
2654: IN
2655: PUSH
2656: LD_INT 11
2658: PUSH
2659: LD_VAR 0 4
2663: IN
2664: PUSH
2665: LD_INT 30
2667: PUSH
2668: LD_VAR 0 4
2672: IN
2673: OR
2674: AND
2675: PUSH
2676: LD_INT 6
2678: PPUSH
2679: LD_VAR 0 15
2683: PPUSH
2684: CALL_OW 321
2688: PUSH
2689: LD_INT 2
2691: EQUAL
2692: AND
2693: IFFALSE 2858
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
2695: LD_INT 22
2697: PUSH
2698: LD_VAR 0 15
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: PUSH
2707: LD_INT 2
2709: PUSH
2710: LD_INT 35
2712: PUSH
2713: LD_INT 11
2715: PUSH
2716: EMPTY
2717: LIST
2718: LIST
2719: PUSH
2720: LD_INT 35
2722: PUSH
2723: LD_INT 30
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: LIST
2734: PUSH
2735: LD_INT 91
2737: PUSH
2738: LD_VAR 0 1
2742: PUSH
2743: LD_INT 18
2745: PUSH
2746: EMPTY
2747: LIST
2748: LIST
2749: LIST
2750: PUSH
2751: EMPTY
2752: LIST
2753: LIST
2754: LIST
2755: PPUSH
2756: CALL_OW 69
2760: NOT
2761: PUSH
2762: LD_INT 22
2764: PUSH
2765: LD_VAR 0 15
2769: PUSH
2770: EMPTY
2771: LIST
2772: LIST
2773: PUSH
2774: LD_INT 2
2776: PUSH
2777: LD_INT 30
2779: PUSH
2780: LD_INT 32
2782: PUSH
2783: EMPTY
2784: LIST
2785: LIST
2786: PUSH
2787: LD_INT 30
2789: PUSH
2790: LD_INT 33
2792: PUSH
2793: EMPTY
2794: LIST
2795: LIST
2796: PUSH
2797: EMPTY
2798: LIST
2799: LIST
2800: LIST
2801: PUSH
2802: LD_INT 91
2804: PUSH
2805: LD_VAR 0 1
2809: PUSH
2810: LD_INT 12
2812: PUSH
2813: EMPTY
2814: LIST
2815: LIST
2816: LIST
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: LIST
2822: PUSH
2823: EMPTY
2824: LIST
2825: PPUSH
2826: CALL_OW 69
2830: PUSH
2831: LD_INT 2
2833: GREATER
2834: AND
2835: IFFALSE 2858
// weapon := [ us_radar , ar_radar ] [ nat ] ;
2837: LD_ADDR_VAR 0 17
2841: PUSH
2842: LD_INT 11
2844: PUSH
2845: LD_INT 30
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: PUSH
2852: LD_VAR 0 11
2856: ARRAY
2857: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
2858: LD_VAR 0 17
2862: NOT
2863: PUSH
2864: LD_INT 40
2866: PPUSH
2867: LD_VAR 0 15
2871: PPUSH
2872: CALL_OW 321
2876: PUSH
2877: LD_INT 2
2879: EQUAL
2880: AND
2881: PUSH
2882: LD_INT 7
2884: PUSH
2885: LD_VAR 0 4
2889: IN
2890: PUSH
2891: LD_INT 28
2893: PUSH
2894: LD_VAR 0 4
2898: IN
2899: OR
2900: PUSH
2901: LD_INT 45
2903: PUSH
2904: LD_VAR 0 4
2908: IN
2909: OR
2910: AND
2911: IFFALSE 3165
// begin hex := GetHexInfo ( x , y ) ;
2913: LD_ADDR_VAR 0 3
2917: PUSH
2918: LD_VAR 0 9
2922: PPUSH
2923: LD_VAR 0 10
2927: PPUSH
2928: CALL_OW 546
2932: ST_TO_ADDR
// if hex [ 1 ] then
2933: LD_VAR 0 3
2937: PUSH
2938: LD_INT 1
2940: ARRAY
2941: IFFALSE 2945
// exit ;
2943: GO 3443
// height := hex [ 2 ] ;
2945: LD_ADDR_VAR 0 14
2949: PUSH
2950: LD_VAR 0 3
2954: PUSH
2955: LD_INT 2
2957: ARRAY
2958: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
2959: LD_ADDR_VAR 0 13
2963: PUSH
2964: LD_INT 0
2966: PUSH
2967: LD_INT 2
2969: PUSH
2970: LD_INT 3
2972: PUSH
2973: LD_INT 5
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: LIST
2980: LIST
2981: ST_TO_ADDR
// for i in tmp do
2982: LD_ADDR_VAR 0 7
2986: PUSH
2987: LD_VAR 0 13
2991: PUSH
2992: FOR_IN
2993: IFFALSE 3163
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
2995: LD_ADDR_VAR 0 8
2999: PUSH
3000: LD_VAR 0 9
3004: PPUSH
3005: LD_VAR 0 7
3009: PPUSH
3010: LD_INT 5
3012: PPUSH
3013: CALL_OW 272
3017: PUSH
3018: LD_VAR 0 10
3022: PPUSH
3023: LD_VAR 0 7
3027: PPUSH
3028: LD_INT 5
3030: PPUSH
3031: CALL_OW 273
3035: PUSH
3036: EMPTY
3037: LIST
3038: LIST
3039: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
3040: LD_VAR 0 8
3044: PUSH
3045: LD_INT 1
3047: ARRAY
3048: PPUSH
3049: LD_VAR 0 8
3053: PUSH
3054: LD_INT 2
3056: ARRAY
3057: PPUSH
3058: CALL_OW 488
3062: IFFALSE 3161
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
3064: LD_ADDR_VAR 0 3
3068: PUSH
3069: LD_VAR 0 8
3073: PUSH
3074: LD_INT 1
3076: ARRAY
3077: PPUSH
3078: LD_VAR 0 8
3082: PUSH
3083: LD_INT 2
3085: ARRAY
3086: PPUSH
3087: CALL_OW 546
3091: ST_TO_ADDR
// if hex [ 1 ] then
3092: LD_VAR 0 3
3096: PUSH
3097: LD_INT 1
3099: ARRAY
3100: IFFALSE 3104
// continue ;
3102: GO 2992
// h := hex [ 2 ] ;
3104: LD_ADDR_VAR 0 12
3108: PUSH
3109: LD_VAR 0 3
3113: PUSH
3114: LD_INT 2
3116: ARRAY
3117: ST_TO_ADDR
// if h + 7 < height then
3118: LD_VAR 0 12
3122: PUSH
3123: LD_INT 7
3125: PLUS
3126: PUSH
3127: LD_VAR 0 14
3131: LESS
3132: IFFALSE 3161
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
3134: LD_ADDR_VAR 0 17
3138: PUSH
3139: LD_INT 7
3141: PUSH
3142: LD_INT 28
3144: PUSH
3145: LD_INT 45
3147: PUSH
3148: EMPTY
3149: LIST
3150: LIST
3151: LIST
3152: PUSH
3153: LD_VAR 0 11
3157: ARRAY
3158: ST_TO_ADDR
// break ;
3159: GO 3163
// end ; end ; end ;
3161: GO 2992
3163: POP
3164: POP
// end ; if not weapon then
3165: LD_VAR 0 17
3169: NOT
3170: IFFALSE 3325
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
3172: LD_ADDR_VAR 0 4
3176: PUSH
3177: LD_VAR 0 4
3181: PUSH
3182: LD_INT 11
3184: PUSH
3185: LD_INT 30
3187: PUSH
3188: LD_INT 49
3190: PUSH
3191: EMPTY
3192: LIST
3193: LIST
3194: LIST
3195: DIFF
3196: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , tower , 6 ] , [ f_not , [ f_bweapon , 0 ] ] ] ) ;
3197: LD_ADDR_VAR 0 13
3201: PUSH
3202: LD_INT 22
3204: PUSH
3205: LD_VAR 0 15
3209: PUSH
3210: EMPTY
3211: LIST
3212: LIST
3213: PUSH
3214: LD_INT 91
3216: PUSH
3217: LD_VAR 0 1
3221: PUSH
3222: LD_INT 6
3224: PUSH
3225: EMPTY
3226: LIST
3227: LIST
3228: LIST
3229: PUSH
3230: LD_INT 3
3232: PUSH
3233: LD_INT 35
3235: PUSH
3236: LD_INT 0
3238: PUSH
3239: EMPTY
3240: LIST
3241: LIST
3242: PUSH
3243: EMPTY
3244: LIST
3245: LIST
3246: PUSH
3247: EMPTY
3248: LIST
3249: LIST
3250: LIST
3251: PPUSH
3252: CALL_OW 69
3256: ST_TO_ADDR
// for i in tmp do
3257: LD_ADDR_VAR 0 7
3261: PUSH
3262: LD_VAR 0 13
3266: PUSH
3267: FOR_IN
3268: IFFALSE 3293
// list := list diff GetBWeapon ( i ) ;
3270: LD_ADDR_VAR 0 4
3274: PUSH
3275: LD_VAR 0 4
3279: PUSH
3280: LD_VAR 0 7
3284: PPUSH
3285: CALL_OW 269
3289: DIFF
3290: ST_TO_ADDR
3291: GO 3267
3293: POP
3294: POP
// if list then
3295: LD_VAR 0 4
3299: IFFALSE 3325
// weapon := list [ rand ( 1 , list ) ] ;
3301: LD_ADDR_VAR 0 17
3305: PUSH
3306: LD_VAR 0 4
3310: PUSH
3311: LD_INT 1
3313: PPUSH
3314: LD_VAR 0 4
3318: PPUSH
3319: CALL_OW 12
3323: ARRAY
3324: ST_TO_ADDR
// end ; if weapon then
3325: LD_VAR 0 17
3329: IFFALSE 3443
// begin tmp := CostOfWeapon ( weapon ) ;
3331: LD_ADDR_VAR 0 13
3335: PUSH
3336: LD_VAR 0 17
3340: PPUSH
3341: CALL_OW 451
3345: ST_TO_ADDR
// j := GetBase ( tower ) ;
3346: LD_ADDR_VAR 0 8
3350: PUSH
3351: LD_VAR 0 1
3355: PPUSH
3356: CALL_OW 274
3360: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
3361: LD_VAR 0 8
3365: PPUSH
3366: LD_INT 1
3368: PPUSH
3369: CALL_OW 275
3373: PUSH
3374: LD_VAR 0 13
3378: PUSH
3379: LD_INT 1
3381: ARRAY
3382: GREATEREQUAL
3383: PUSH
3384: LD_VAR 0 8
3388: PPUSH
3389: LD_INT 2
3391: PPUSH
3392: CALL_OW 275
3396: PUSH
3397: LD_VAR 0 13
3401: PUSH
3402: LD_INT 2
3404: ARRAY
3405: GREATEREQUAL
3406: AND
3407: PUSH
3408: LD_VAR 0 8
3412: PPUSH
3413: LD_INT 3
3415: PPUSH
3416: CALL_OW 275
3420: PUSH
3421: LD_VAR 0 13
3425: PUSH
3426: LD_INT 3
3428: ARRAY
3429: GREATEREQUAL
3430: AND
3431: IFFALSE 3443
// result := weapon ;
3433: LD_ADDR_VAR 0 2
3437: PUSH
3438: LD_VAR 0 17
3442: ST_TO_ADDR
// end ; end ; end_of_file
3443: LD_VAR 0 2
3447: RET
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Khatam , Kikuchi , Harisson ; export function PrepareAmericans ; var i , team , others , veh , m ; begin
3448: LD_INT 0
3450: PPUSH
3451: PPUSH
3452: PPUSH
3453: PPUSH
3454: PPUSH
3455: PPUSH
// uc_side := 1 ;
3456: LD_ADDR_OWVAR 20
3460: PUSH
3461: LD_INT 1
3463: ST_TO_ADDR
// uc_nation := 1 ;
3464: LD_ADDR_OWVAR 21
3468: PUSH
3469: LD_INT 1
3471: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prev_prefix ) ;
3472: LD_ADDR_EXP 9
3476: PUSH
3477: LD_STRING JMM
3479: PPUSH
3480: LD_EXP 1
3484: NOT
3485: PPUSH
3486: LD_EXP 2
3490: PPUSH
3491: CALL 32330 0 3
3495: ST_TO_ADDR
// team := [ JMM ] ;
3496: LD_ADDR_VAR 0 3
3500: PUSH
3501: LD_EXP 9
3505: PUSH
3506: EMPTY
3507: LIST
3508: ST_TO_ADDR
// if LoadVariable ( BrownIn07 , debug ) then
3509: LD_STRING BrownIn07
3511: PPUSH
3512: LD_EXP 1
3516: PPUSH
3517: CALL_OW 30
3521: IFFALSE 3547
// Brown := PrepareUnit ( Brown , ( not debug ) , mission_prev_prefix ) ;
3523: LD_ADDR_EXP 10
3527: PUSH
3528: LD_STRING Brown
3530: PPUSH
3531: LD_EXP 1
3535: NOT
3536: PPUSH
3537: LD_EXP 2
3541: PPUSH
3542: CALL 32330 0 3
3546: ST_TO_ADDR
// if Brown then
3547: LD_EXP 10
3551: IFFALSE 3569
// team := team ^ Brown ;
3553: LD_ADDR_VAR 0 3
3557: PUSH
3558: LD_VAR 0 3
3562: PUSH
3563: LD_EXP 10
3567: ADD
3568: ST_TO_ADDR
// if LoadVariable ( DonaldsonIn07 , debug ) then
3569: LD_STRING DonaldsonIn07
3571: PPUSH
3572: LD_EXP 1
3576: PPUSH
3577: CALL_OW 30
3581: IFFALSE 3607
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prev_prefix ) ;
3583: LD_ADDR_EXP 11
3587: PUSH
3588: LD_STRING Donaldson
3590: PPUSH
3591: LD_EXP 1
3595: NOT
3596: PPUSH
3597: LD_EXP 2
3601: PPUSH
3602: CALL 32330 0 3
3606: ST_TO_ADDR
// if Donaldson then
3607: LD_EXP 11
3611: IFFALSE 3629
// team := team ^ Donaldson ;
3613: LD_ADDR_VAR 0 3
3617: PUSH
3618: LD_VAR 0 3
3622: PUSH
3623: LD_EXP 11
3627: ADD
3628: ST_TO_ADDR
// if LoadVariable ( BobbyIn07 , debug ) then
3629: LD_STRING BobbyIn07
3631: PPUSH
3632: LD_EXP 1
3636: PPUSH
3637: CALL_OW 30
3641: IFFALSE 3667
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prev_prefix ) ;
3643: LD_ADDR_EXP 12
3647: PUSH
3648: LD_STRING Bobby
3650: PPUSH
3651: LD_EXP 1
3655: NOT
3656: PPUSH
3657: LD_EXP 2
3661: PPUSH
3662: CALL 32330 0 3
3666: ST_TO_ADDR
// if Bobby then
3667: LD_EXP 12
3671: IFFALSE 3689
// team := team ^ Bobby ;
3673: LD_ADDR_VAR 0 3
3677: PUSH
3678: LD_VAR 0 3
3682: PUSH
3683: LD_EXP 12
3687: ADD
3688: ST_TO_ADDR
// if LoadVariable ( CyrusIn07 , debug ) then
3689: LD_STRING CyrusIn07
3691: PPUSH
3692: LD_EXP 1
3696: PPUSH
3697: CALL_OW 30
3701: IFFALSE 3727
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prev_prefix ) ;
3703: LD_ADDR_EXP 13
3707: PUSH
3708: LD_STRING Cyrus
3710: PPUSH
3711: LD_EXP 1
3715: NOT
3716: PPUSH
3717: LD_EXP 2
3721: PPUSH
3722: CALL 32330 0 3
3726: ST_TO_ADDR
// if Cyrus then
3727: LD_EXP 13
3731: IFFALSE 3749
// team := team ^ Cyrus ;
3733: LD_ADDR_VAR 0 3
3737: PUSH
3738: LD_VAR 0 3
3742: PUSH
3743: LD_EXP 13
3747: ADD
3748: ST_TO_ADDR
// if LoadVariable ( LisaIn07 , debug ) then
3749: LD_STRING LisaIn07
3751: PPUSH
3752: LD_EXP 1
3756: PPUSH
3757: CALL_OW 30
3761: IFFALSE 3787
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prev_prefix ) ;
3763: LD_ADDR_EXP 14
3767: PUSH
3768: LD_STRING Lisa
3770: PPUSH
3771: LD_EXP 1
3775: NOT
3776: PPUSH
3777: LD_EXP 2
3781: PPUSH
3782: CALL 32330 0 3
3786: ST_TO_ADDR
// if Lisa then
3787: LD_EXP 14
3791: IFFALSE 3809
// team := team ^ Lisa ;
3793: LD_ADDR_VAR 0 3
3797: PUSH
3798: LD_VAR 0 3
3802: PUSH
3803: LD_EXP 14
3807: ADD
3808: ST_TO_ADDR
// if LoadVariable ( GladstoneIn07 , debug ) then
3809: LD_STRING GladstoneIn07
3811: PPUSH
3812: LD_EXP 1
3816: PPUSH
3817: CALL_OW 30
3821: IFFALSE 3847
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , mission_prev_prefix ) ;
3823: LD_ADDR_EXP 16
3827: PUSH
3828: LD_STRING Gladstone
3830: PPUSH
3831: LD_EXP 1
3835: NOT
3836: PPUSH
3837: LD_EXP 2
3841: PPUSH
3842: CALL 32330 0 3
3846: ST_TO_ADDR
// if Gladstone then
3847: LD_EXP 16
3851: IFFALSE 3869
// team := team ^ Gladstone ;
3853: LD_ADDR_VAR 0 3
3857: PUSH
3858: LD_VAR 0 3
3862: PUSH
3863: LD_EXP 16
3867: ADD
3868: ST_TO_ADDR
// if LoadVariable ( KhatamIn07 , debug ) then
3869: LD_STRING KhatamIn07
3871: PPUSH
3872: LD_EXP 1
3876: PPUSH
3877: CALL_OW 30
3881: IFFALSE 3907
// Khatam := PrepareUnit ( Khatam , ( not debug ) , mission_prev_prefix ) ;
3883: LD_ADDR_EXP 17
3887: PUSH
3888: LD_STRING Khatam
3890: PPUSH
3891: LD_EXP 1
3895: NOT
3896: PPUSH
3897: LD_EXP 2
3901: PPUSH
3902: CALL 32330 0 3
3906: ST_TO_ADDR
// if Khatam then
3907: LD_EXP 17
3911: IFFALSE 3929
// team := team ^ Khatam ;
3913: LD_ADDR_VAR 0 3
3917: PUSH
3918: LD_VAR 0 3
3922: PUSH
3923: LD_EXP 17
3927: ADD
3928: ST_TO_ADDR
// others := CreateCharacterSet ( 07_others ) ;
3929: LD_ADDR_VAR 0 4
3933: PUSH
3934: LD_STRING 07_others
3936: PPUSH
3937: CALL_OW 31
3941: ST_TO_ADDR
// if others then
3942: LD_VAR 0 4
3946: IFFALSE 3964
// team := team ^ others ;
3948: LD_ADDR_VAR 0 3
3952: PUSH
3953: LD_VAR 0 3
3957: PUSH
3958: LD_VAR 0 4
3962: ADD
3963: ST_TO_ADDR
// if debug then
3964: LD_EXP 1
3968: IFFALSE 4042
// begin InitHc ;
3970: CALL_OW 19
// for i = 1 to 4 do
3974: LD_ADDR_VAR 0 2
3978: PUSH
3979: DOUBLE
3980: LD_INT 1
3982: DEC
3983: ST_TO_ADDR
3984: LD_INT 4
3986: PUSH
3987: FOR_TO
3988: IFFALSE 4040
// begin PrepareHuman ( false , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , 4 ) ;
3990: LD_INT 0
3992: PPUSH
3993: LD_INT 1
3995: PUSH
3996: LD_INT 3
3998: PUSH
3999: EMPTY
4000: LIST
4001: LIST
4002: PUSH
4003: LD_INT 1
4005: PPUSH
4006: LD_INT 2
4008: PPUSH
4009: CALL_OW 12
4013: ARRAY
4014: PPUSH
4015: LD_INT 4
4017: PPUSH
4018: CALL_OW 380
// team := team ^ CreateHuman ;
4022: LD_ADDR_VAR 0 3
4026: PUSH
4027: LD_VAR 0 3
4031: PUSH
4032: CALL_OW 44
4036: ADD
4037: ST_TO_ADDR
// end ;
4038: GO 3987
4040: POP
4041: POP
// end ; m := 0 ;
4042: LD_ADDR_VAR 0 6
4046: PUSH
4047: LD_INT 0
4049: ST_TO_ADDR
// for i in team do
4050: LD_ADDR_VAR 0 2
4054: PUSH
4055: LD_VAR 0 3
4059: PUSH
4060: FOR_IN
4061: IFFALSE 4268
// if GetClass ( i ) = 3 then
4063: LD_VAR 0 2
4067: PPUSH
4068: CALL_OW 257
4072: PUSH
4073: LD_INT 3
4075: EQUAL
4076: IFFALSE 4224
// begin m := m + 1 ;
4078: LD_ADDR_VAR 0 6
4082: PUSH
4083: LD_VAR 0 6
4087: PUSH
4088: LD_INT 1
4090: PLUS
4091: ST_TO_ADDR
// veh := PrepareTank ( 1 , 1 , [ us_medium_wheeled , us_medium_tracked , us_medium_wheeled , us_light_wheeled ] [ m mod 4 + 1 ] , engine_solar , control_manual , [ us_gatling_gun , us_double_gun , us_light_gun , us_radar ] [ m mod 4 + 1 ] , 60 ) ;
4092: LD_ADDR_VAR 0 5
4096: PUSH
4097: LD_INT 1
4099: PPUSH
4100: LD_INT 1
4102: PPUSH
4103: LD_INT 2
4105: PUSH
4106: LD_INT 3
4108: PUSH
4109: LD_INT 2
4111: PUSH
4112: LD_INT 1
4114: PUSH
4115: EMPTY
4116: LIST
4117: LIST
4118: LIST
4119: LIST
4120: PUSH
4121: LD_VAR 0 6
4125: PUSH
4126: LD_INT 4
4128: MOD
4129: PUSH
4130: LD_INT 1
4132: PLUS
4133: ARRAY
4134: PPUSH
4135: LD_INT 2
4137: PPUSH
4138: LD_INT 1
4140: PPUSH
4141: LD_INT 4
4143: PUSH
4144: LD_INT 5
4146: PUSH
4147: LD_INT 3
4149: PUSH
4150: LD_INT 11
4152: PUSH
4153: EMPTY
4154: LIST
4155: LIST
4156: LIST
4157: LIST
4158: PUSH
4159: LD_VAR 0 6
4163: PUSH
4164: LD_INT 4
4166: MOD
4167: PUSH
4168: LD_INT 1
4170: PLUS
4171: ARRAY
4172: PPUSH
4173: LD_INT 60
4175: PPUSH
4176: CALL 520 0 7
4180: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
4181: LD_VAR 0 5
4185: PPUSH
4186: LD_INT 2
4188: PPUSH
4189: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
4193: LD_VAR 0 5
4197: PPUSH
4198: LD_INT 1
4200: PPUSH
4201: LD_INT 0
4203: PPUSH
4204: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
4208: LD_VAR 0 2
4212: PPUSH
4213: LD_VAR 0 5
4217: PPUSH
4218: CALL_OW 52
// end else
4222: GO 4266
// begin if GetClass ( i ) = 2 then
4224: LD_VAR 0 2
4228: PPUSH
4229: CALL_OW 257
4233: PUSH
4234: LD_INT 2
4236: EQUAL
4237: IFFALSE 4251
// SetClass ( i , 1 ) ;
4239: LD_VAR 0 2
4243: PPUSH
4244: LD_INT 1
4246: PPUSH
4247: CALL_OW 336
// PlaceUnitArea ( i , startArea , false ) ;
4251: LD_VAR 0 2
4255: PPUSH
4256: LD_INT 1
4258: PPUSH
4259: LD_INT 0
4261: PPUSH
4262: CALL_OW 49
// end ;
4266: GO 4060
4268: POP
4269: POP
// uc_side := 4 ;
4270: LD_ADDR_OWVAR 20
4274: PUSH
4275: LD_INT 4
4277: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
4278: LD_ADDR_EXP 19
4282: PUSH
4283: LD_STRING Harisson
4285: PPUSH
4286: LD_INT 0
4288: PPUSH
4289: LD_STRING 
4291: PPUSH
4292: CALL 32330 0 3
4296: ST_TO_ADDR
// PrepareScout ;
4297: CALL 4306 0 0
// end ;
4301: LD_VAR 0 1
4305: RET
// function PrepareScout ; var ape ; begin
4306: LD_INT 0
4308: PPUSH
4309: PPUSH
// uc_side := 4 ;
4310: LD_ADDR_OWVAR 20
4314: PUSH
4315: LD_INT 4
4317: ST_TO_ADDR
// uc_nation := 1 ;
4318: LD_ADDR_OWVAR 21
4322: PUSH
4323: LD_INT 1
4325: ST_TO_ADDR
// if LoadVariable ( FrankIn06 , 0 ) then
4326: LD_STRING FrankIn06
4328: PPUSH
4329: LD_INT 0
4331: PPUSH
4332: CALL_OW 30
4336: IFFALSE 4353
// Frank := CreateCharacter ( 06c_Frank ) else
4338: LD_ADDR_EXP 15
4342: PUSH
4343: LD_STRING 06c_Frank
4345: PPUSH
4346: CALL_OW 34
4350: ST_TO_ADDR
4351: GO 4393
// if LoadVariable ( FrankInDelta , 0 ) then
4353: LD_STRING FrankInDelta
4355: PPUSH
4356: LD_INT 0
4358: PPUSH
4359: CALL_OW 30
4363: IFFALSE 4380
// Frank := CreateCharacter ( 05_Frank ) else
4365: LD_ADDR_EXP 15
4369: PUSH
4370: LD_STRING 05_Frank
4372: PPUSH
4373: CALL_OW 34
4377: ST_TO_ADDR
4378: GO 4393
// Frank := CreateCharacter ( 04_Frank ) ;
4380: LD_ADDR_EXP 15
4384: PUSH
4385: LD_STRING 04_Frank
4387: PPUSH
4388: CALL_OW 34
4392: ST_TO_ADDR
// if Frank then
4393: LD_EXP 15
4397: IFFALSE 4530
// begin PlaceUnitArea ( Frank , scoutArea , false ) ;
4399: LD_EXP 15
4403: PPUSH
4404: LD_INT 2
4406: PPUSH
4407: LD_INT 0
4409: PPUSH
4410: CALL_OW 49
// SetClass ( Frank , 1 ) ;
4414: LD_EXP 15
4418: PPUSH
4419: LD_INT 1
4421: PPUSH
4422: CALL_OW 336
// uc_side := 0 ;
4426: LD_ADDR_OWVAR 20
4430: PUSH
4431: LD_INT 0
4433: ST_TO_ADDR
// uc_nation := 0 ;
4434: LD_ADDR_OWVAR 21
4438: PUSH
4439: LD_INT 0
4441: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 0 ) ;
4442: LD_INT 0
4444: PPUSH
4445: LD_INT 12
4447: PPUSH
4448: LD_INT 0
4450: PPUSH
4451: CALL_OW 380
// ape := CreateHuman ;
4455: LD_ADDR_VAR 0 2
4459: PUSH
4460: CALL_OW 44
4464: ST_TO_ADDR
// PlaceUnitXYR ( ape , GetX ( Frank ) , GetY ( Frank ) , 5 , false ) ;
4465: LD_VAR 0 2
4469: PPUSH
4470: LD_EXP 15
4474: PPUSH
4475: CALL_OW 250
4479: PPUSH
4480: LD_EXP 15
4484: PPUSH
4485: CALL_OW 251
4489: PPUSH
4490: LD_INT 5
4492: PPUSH
4493: LD_INT 0
4495: PPUSH
4496: CALL_OW 50
// ComTurnUnit ( ape , Frank ) ;
4500: LD_VAR 0 2
4504: PPUSH
4505: LD_EXP 15
4509: PPUSH
4510: CALL_OW 119
// ComTurnUnit ( Frank , ape ) ;
4514: LD_EXP 15
4518: PPUSH
4519: LD_VAR 0 2
4523: PPUSH
4524: CALL_OW 119
// exit ;
4528: GO 4573
// end ; Kikuchi := PrepareUnit ( Yamoko , false ,  ) ;
4530: LD_ADDR_EXP 18
4534: PUSH
4535: LD_STRING Yamoko
4537: PPUSH
4538: LD_INT 0
4540: PPUSH
4541: LD_STRING 
4543: PPUSH
4544: CALL 32330 0 3
4548: ST_TO_ADDR
// PlaceUnitArea ( Kikuchi , scoutArea , false ) ;
4549: LD_EXP 18
4553: PPUSH
4554: LD_INT 2
4556: PPUSH
4557: LD_INT 0
4559: PPUSH
4560: CALL_OW 49
// ComHold ( Kikuchi ) ;
4564: LD_EXP 18
4568: PPUSH
4569: CALL_OW 140
// end ; end_of_file
4573: LD_VAR 0 1
4577: RET
// export ru_rebuild_list ; export function PrepareRussians ; var i , j , r , un , skill , filter , tmp , dep_list , lab_list , fac_list , breastworks_list , bunker_list , turret_list , weapons_list , personel_counter ; begin
4578: LD_INT 0
4580: PPUSH
4581: PPUSH
4582: PPUSH
4583: PPUSH
4584: PPUSH
4585: PPUSH
4586: PPUSH
4587: PPUSH
4588: PPUSH
4589: PPUSH
4590: PPUSH
4591: PPUSH
4592: PPUSH
4593: PPUSH
4594: PPUSH
4595: PPUSH
// ru_rebuild_list := [ ] ;
4596: LD_ADDR_EXP 20
4600: PUSH
4601: EMPTY
4602: ST_TO_ADDR
// uc_side := 3 ;
4603: LD_ADDR_OWVAR 20
4607: PUSH
4608: LD_INT 3
4610: ST_TO_ADDR
// uc_nation := 3 ;
4611: LD_ADDR_OWVAR 21
4615: PUSH
4616: LD_INT 3
4618: ST_TO_ADDR
// if Difficulty > 1 then
4619: LD_OWVAR 67
4623: PUSH
4624: LD_INT 1
4626: GREATER
4627: IFFALSE 4794
// begin bc_type := b_breastwork ;
4629: LD_ADDR_OWVAR 42
4633: PUSH
4634: LD_INT 31
4636: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 78 , 74 , 2 ) ;
4637: LD_INT 78
4639: PPUSH
4640: LD_INT 74
4642: PPUSH
4643: LD_INT 2
4645: PPUSH
4646: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 171 , 193 , 4 ) ;
4650: LD_INT 171
4652: PPUSH
4653: LD_INT 193
4655: PPUSH
4656: LD_INT 4
4658: PPUSH
4659: CALL_OW 47
// bc_type := b_turret ;
4663: LD_ADDR_OWVAR 42
4667: PUSH
4668: LD_INT 33
4670: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 129 , 96 , 3 ) ;
4671: LD_INT 129
4673: PPUSH
4674: LD_INT 96
4676: PPUSH
4677: LD_INT 3
4679: PPUSH
4680: CALL_OW 47
// if Difficulty > 2 then
4684: LD_OWVAR 67
4688: PUSH
4689: LD_INT 2
4691: GREATER
4692: IFFALSE 4763
// begin RemoveUnit ( HexInfo ( 83 , 141 ) ) ;
4694: LD_INT 83
4696: PPUSH
4697: LD_INT 141
4699: PPUSH
4700: CALL_OW 428
4704: PPUSH
4705: CALL_OW 64
// RemoveUnit ( HexInfo ( 78 , 133 ) ) ;
4709: LD_INT 78
4711: PPUSH
4712: LD_INT 133
4714: PPUSH
4715: CALL_OW 428
4719: PPUSH
4720: CALL_OW 64
// CreateAndPlaceBuildingXYD ( 83 , 141 , 2 ) ;
4724: LD_INT 83
4726: PPUSH
4727: LD_INT 141
4729: PPUSH
4730: LD_INT 2
4732: PPUSH
4733: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 78 , 133 , 2 ) ;
4737: LD_INT 78
4739: PPUSH
4740: LD_INT 133
4742: PPUSH
4743: LD_INT 2
4745: PPUSH
4746: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 145 , 112 , 3 ) ;
4750: LD_INT 145
4752: PPUSH
4753: LD_INT 112
4755: PPUSH
4756: LD_INT 3
4758: PPUSH
4759: CALL_OW 47
// end ; if Difficulty > 3 then
4763: LD_OWVAR 67
4767: PUSH
4768: LD_INT 3
4770: GREATER
4771: IFFALSE 4794
// begin bc_type := b_bunker ;
4773: LD_ADDR_OWVAR 42
4777: PUSH
4778: LD_INT 32
4780: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 44 , 50 , 4 ) ;
4781: LD_INT 44
4783: PPUSH
4784: LD_INT 50
4786: PPUSH
4787: LD_INT 4
4789: PPUSH
4790: CALL_OW 47
// end ; end ; dep_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
4794: LD_ADDR_VAR 0 9
4798: PUSH
4799: LD_INT 22
4801: PUSH
4802: LD_INT 3
4804: PUSH
4805: EMPTY
4806: LIST
4807: LIST
4808: PUSH
4809: LD_INT 2
4811: PUSH
4812: LD_INT 30
4814: PUSH
4815: LD_INT 0
4817: PUSH
4818: EMPTY
4819: LIST
4820: LIST
4821: PUSH
4822: LD_INT 30
4824: PUSH
4825: LD_INT 1
4827: PUSH
4828: EMPTY
4829: LIST
4830: LIST
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: LIST
4836: PUSH
4837: EMPTY
4838: LIST
4839: LIST
4840: PPUSH
4841: CALL_OW 69
4845: ST_TO_ADDR
// lab_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
4846: LD_ADDR_VAR 0 10
4850: PUSH
4851: LD_INT 22
4853: PUSH
4854: LD_INT 3
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PUSH
4861: LD_INT 2
4863: PUSH
4864: LD_INT 30
4866: PUSH
4867: LD_INT 6
4869: PUSH
4870: EMPTY
4871: LIST
4872: LIST
4873: PUSH
4874: LD_INT 30
4876: PUSH
4877: LD_INT 7
4879: PUSH
4880: EMPTY
4881: LIST
4882: LIST
4883: PUSH
4884: LD_INT 30
4886: PUSH
4887: LD_INT 8
4889: PUSH
4890: EMPTY
4891: LIST
4892: LIST
4893: PUSH
4894: EMPTY
4895: LIST
4896: LIST
4897: LIST
4898: LIST
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: PPUSH
4904: CALL_OW 69
4908: ST_TO_ADDR
// fac_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
4909: LD_ADDR_VAR 0 11
4913: PUSH
4914: LD_INT 22
4916: PUSH
4917: LD_INT 3
4919: PUSH
4920: EMPTY
4921: LIST
4922: LIST
4923: PUSH
4924: LD_INT 30
4926: PUSH
4927: LD_INT 3
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: PUSH
4934: EMPTY
4935: LIST
4936: LIST
4937: PPUSH
4938: CALL_OW 69
4942: ST_TO_ADDR
// breastworks_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
4943: LD_ADDR_VAR 0 12
4947: PUSH
4948: LD_INT 22
4950: PUSH
4951: LD_INT 3
4953: PUSH
4954: EMPTY
4955: LIST
4956: LIST
4957: PUSH
4958: LD_INT 30
4960: PUSH
4961: LD_INT 31
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: PUSH
4968: EMPTY
4969: LIST
4970: LIST
4971: PPUSH
4972: CALL_OW 69
4976: ST_TO_ADDR
// bunker_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
4977: LD_ADDR_VAR 0 13
4981: PUSH
4982: LD_INT 22
4984: PUSH
4985: LD_INT 3
4987: PUSH
4988: EMPTY
4989: LIST
4990: LIST
4991: PUSH
4992: LD_INT 30
4994: PUSH
4995: LD_INT 32
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: PUSH
5002: EMPTY
5003: LIST
5004: LIST
5005: PPUSH
5006: CALL_OW 69
5010: ST_TO_ADDR
// turret_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
5011: LD_ADDR_VAR 0 14
5015: PUSH
5016: LD_INT 22
5018: PUSH
5019: LD_INT 3
5021: PUSH
5022: EMPTY
5023: LIST
5024: LIST
5025: PUSH
5026: LD_INT 30
5028: PUSH
5029: LD_INT 33
5031: PUSH
5032: EMPTY
5033: LIST
5034: LIST
5035: PUSH
5036: EMPTY
5037: LIST
5038: LIST
5039: PPUSH
5040: CALL_OW 69
5044: ST_TO_ADDR
// weapons_list := [ [ ru_heavy_machine_gun , 5 ] , [ ru_gatling_gun , 50 ] , [ ru_gun , 30 ] , [ ru_heavy_gun , 15 ] ] ;
5045: LD_ADDR_VAR 0 15
5049: PUSH
5050: LD_INT 42
5052: PUSH
5053: LD_INT 5
5055: PUSH
5056: EMPTY
5057: LIST
5058: LIST
5059: PUSH
5060: LD_INT 43
5062: PUSH
5063: LD_INT 50
5065: PUSH
5066: EMPTY
5067: LIST
5068: LIST
5069: PUSH
5070: LD_INT 44
5072: PUSH
5073: LD_INT 30
5075: PUSH
5076: EMPTY
5077: LIST
5078: LIST
5079: PUSH
5080: LD_INT 46
5082: PUSH
5083: LD_INT 15
5085: PUSH
5086: EMPTY
5087: LIST
5088: LIST
5089: PUSH
5090: EMPTY
5091: LIST
5092: LIST
5093: LIST
5094: LIST
5095: ST_TO_ADDR
// personel_counter := [ 0 , 4 , 6 , 3 ] ;
5096: LD_ADDR_VAR 0 16
5100: PUSH
5101: LD_INT 0
5103: PUSH
5104: LD_INT 4
5106: PUSH
5107: LD_INT 6
5109: PUSH
5110: LD_INT 3
5112: PUSH
5113: EMPTY
5114: LIST
5115: LIST
5116: LIST
5117: LIST
5118: ST_TO_ADDR
// skill := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
5119: LD_ADDR_VAR 0 6
5123: PUSH
5124: LD_INT 4
5126: PUSH
5127: LD_INT 5
5129: PUSH
5130: LD_INT 6
5132: PUSH
5133: LD_INT 7
5135: PUSH
5136: EMPTY
5137: LIST
5138: LIST
5139: LIST
5140: LIST
5141: PUSH
5142: LD_OWVAR 67
5146: ARRAY
5147: ST_TO_ADDR
// SetBName ( ru_dep_main , am_tukh ) ;
5148: LD_INT 16
5150: PPUSH
5151: LD_STRING am_tukh
5153: PPUSH
5154: CALL_OW 500
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
5158: LD_ADDR_VAR 0 2
5162: PUSH
5163: LD_INT 21
5165: PUSH
5166: LD_INT 3
5168: PUSH
5169: EMPTY
5170: LIST
5171: LIST
5172: PPUSH
5173: CALL_OW 69
5177: PUSH
5178: FOR_IN
5179: IFFALSE 5216
// SetBLevel ( i , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5181: LD_VAR 0 2
5185: PPUSH
5186: LD_INT 4
5188: PUSH
5189: LD_INT 5
5191: PUSH
5192: LD_INT 6
5194: PUSH
5195: LD_INT 7
5197: PUSH
5198: EMPTY
5199: LIST
5200: LIST
5201: LIST
5202: LIST
5203: PUSH
5204: LD_OWVAR 67
5208: ARRAY
5209: PPUSH
5210: CALL_OW 241
5214: GO 5178
5216: POP
5217: POP
// for i in dep_list do
5218: LD_ADDR_VAR 0 2
5222: PUSH
5223: LD_VAR 0 9
5227: PUSH
5228: FOR_IN
5229: IFFALSE 5273
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
5231: LD_VAR 0 2
5235: PPUSH
5236: CALL_OW 274
5240: PPUSH
5241: LD_INT 1
5243: PPUSH
5244: LD_INT 1000
5246: PPUSH
5247: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
5251: LD_VAR 0 2
5255: PPUSH
5256: CALL_OW 274
5260: PPUSH
5261: LD_INT 2
5263: PPUSH
5264: LD_INT 1000
5266: PPUSH
5267: CALL_OW 277
// end ;
5271: GO 5228
5273: POP
5274: POP
// InitHc ;
5275: CALL_OW 19
// tmp := bunker_list * [ 45 , 60 , 75 , 80 ] [ Difficulty ] div 100 ;
5279: LD_ADDR_VAR 0 8
5283: PUSH
5284: LD_VAR 0 13
5288: PUSH
5289: LD_INT 45
5291: PUSH
5292: LD_INT 60
5294: PUSH
5295: LD_INT 75
5297: PUSH
5298: LD_INT 80
5300: PUSH
5301: EMPTY
5302: LIST
5303: LIST
5304: LIST
5305: LIST
5306: PUSH
5307: LD_OWVAR 67
5311: ARRAY
5312: MUL
5313: PUSH
5314: LD_INT 100
5316: DIV
5317: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , tmp ) ;
5318: LD_ADDR_VAR 0 16
5322: PUSH
5323: LD_VAR 0 16
5327: PPUSH
5328: LD_INT 1
5330: PPUSH
5331: LD_VAR 0 8
5335: PPUSH
5336: CALL_OW 1
5340: ST_TO_ADDR
// tmp := [ ] ;
5341: LD_ADDR_VAR 0 8
5345: PUSH
5346: EMPTY
5347: ST_TO_ADDR
// for i in bunker_list do
5348: LD_ADDR_VAR 0 2
5352: PUSH
5353: LD_VAR 0 13
5357: PUSH
5358: FOR_IN
5359: IFFALSE 5455
// if i mod 10 + 1 < tmp then
5361: LD_VAR 0 2
5365: PUSH
5366: LD_INT 10
5368: MOD
5369: PUSH
5370: LD_INT 1
5372: PLUS
5373: PUSH
5374: LD_VAR 0 8
5378: LESS
5379: IFFALSE 5424
// tmp := Insert ( tmp , i mod rand ( 3 , 5 ) + 1 , i ) else
5381: LD_ADDR_VAR 0 8
5385: PUSH
5386: LD_VAR 0 8
5390: PPUSH
5391: LD_VAR 0 2
5395: PUSH
5396: LD_INT 3
5398: PPUSH
5399: LD_INT 5
5401: PPUSH
5402: CALL_OW 12
5406: MOD
5407: PUSH
5408: LD_INT 1
5410: PLUS
5411: PPUSH
5412: LD_VAR 0 2
5416: PPUSH
5417: CALL_OW 2
5421: ST_TO_ADDR
5422: GO 5453
// tmp := Insert ( tmp , tmp + 1 , i ) ;
5424: LD_ADDR_VAR 0 8
5428: PUSH
5429: LD_VAR 0 8
5433: PPUSH
5434: LD_VAR 0 8
5438: PUSH
5439: LD_INT 1
5441: PLUS
5442: PPUSH
5443: LD_VAR 0 2
5447: PPUSH
5448: CALL_OW 2
5452: ST_TO_ADDR
5453: GO 5358
5455: POP
5456: POP
// bunker_list := tmp ;
5457: LD_ADDR_VAR 0 13
5461: PUSH
5462: LD_VAR 0 8
5466: ST_TO_ADDR
// for i in bunker_list ^ turret_list do
5467: LD_ADDR_VAR 0 2
5471: PUSH
5472: LD_VAR 0 13
5476: PUSH
5477: LD_VAR 0 14
5481: ADD
5482: PUSH
5483: FOR_IN
5484: IFFALSE 5507
// PlaceWeaponTurret ( i , GetTurretWeaponBase ( i ) ) ;
5486: LD_VAR 0 2
5490: PPUSH
5491: LD_VAR 0 2
5495: PPUSH
5496: CALL 2225 0 1
5500: PPUSH
5501: CALL_OW 431
5505: GO 5483
5507: POP
5508: POP
// while ( personel_counter [ 1 ] ) do
5509: LD_VAR 0 16
5513: PUSH
5514: LD_INT 1
5516: ARRAY
5517: IFFALSE 5625
// begin i := rand ( 1 , bunker_list ) ;
5519: LD_ADDR_VAR 0 2
5523: PUSH
5524: LD_INT 1
5526: PPUSH
5527: LD_VAR 0 13
5531: PPUSH
5532: CALL_OW 12
5536: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5537: LD_INT 0
5539: PPUSH
5540: LD_INT 1
5542: PPUSH
5543: LD_VAR 0 6
5547: PPUSH
5548: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , bunker_list [ i ] ) ;
5552: CALL_OW 44
5556: PPUSH
5557: LD_VAR 0 13
5561: PUSH
5562: LD_VAR 0 2
5566: ARRAY
5567: PPUSH
5568: CALL_OW 52
// bunker_list := Delete ( bunker_list , i ) ;
5572: LD_ADDR_VAR 0 13
5576: PUSH
5577: LD_VAR 0 13
5581: PPUSH
5582: LD_VAR 0 2
5586: PPUSH
5587: CALL_OW 3
5591: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , personel_counter [ 1 ] - 1 ) ;
5592: LD_ADDR_VAR 0 16
5596: PUSH
5597: LD_VAR 0 16
5601: PPUSH
5602: LD_INT 1
5604: PPUSH
5605: LD_VAR 0 16
5609: PUSH
5610: LD_INT 1
5612: ARRAY
5613: PUSH
5614: LD_INT 1
5616: MINUS
5617: PPUSH
5618: CALL_OW 1
5622: ST_TO_ADDR
// end ;
5623: GO 5509
// for i = 1 to personel_counter [ 2 ] do
5625: LD_ADDR_VAR 0 2
5629: PUSH
5630: DOUBLE
5631: LD_INT 1
5633: DEC
5634: ST_TO_ADDR
5635: LD_VAR 0 16
5639: PUSH
5640: LD_INT 2
5642: ARRAY
5643: PUSH
5644: FOR_TO
5645: IFFALSE 5676
// begin PrepareHuman ( false , 2 , skill ) ;
5647: LD_INT 0
5649: PPUSH
5650: LD_INT 2
5652: PPUSH
5653: LD_VAR 0 6
5657: PPUSH
5658: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru_dep_main ) ;
5662: CALL_OW 44
5666: PPUSH
5667: LD_INT 16
5669: PPUSH
5670: CALL_OW 52
// end ;
5674: GO 5644
5676: POP
5677: POP
// for i = 1 to personel_counter [ 3 ] do
5678: LD_ADDR_VAR 0 2
5682: PUSH
5683: DOUBLE
5684: LD_INT 1
5686: DEC
5687: ST_TO_ADDR
5688: LD_VAR 0 16
5692: PUSH
5693: LD_INT 3
5695: ARRAY
5696: PUSH
5697: FOR_TO
5698: IFFALSE 5745
// begin PrepareHuman ( false , 3 , skill ) ;
5700: LD_INT 0
5702: PPUSH
5703: LD_INT 3
5705: PPUSH
5706: LD_VAR 0 6
5710: PPUSH
5711: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , fac_list [ i mod 2 + 1 ] ) ;
5715: CALL_OW 44
5719: PPUSH
5720: LD_VAR 0 11
5724: PUSH
5725: LD_VAR 0 2
5729: PUSH
5730: LD_INT 2
5732: MOD
5733: PUSH
5734: LD_INT 1
5736: PLUS
5737: ARRAY
5738: PPUSH
5739: CALL_OW 52
// end ;
5743: GO 5697
5745: POP
5746: POP
// for i = 1 to personel_counter [ 4 ] do
5747: LD_ADDR_VAR 0 2
5751: PUSH
5752: DOUBLE
5753: LD_INT 1
5755: DEC
5756: ST_TO_ADDR
5757: LD_VAR 0 16
5761: PUSH
5762: LD_INT 4
5764: ARRAY
5765: PUSH
5766: FOR_TO
5767: IFFALSE 5804
// begin PrepareHuman ( false , 4 , skill ) ;
5769: LD_INT 0
5771: PPUSH
5772: LD_INT 4
5774: PPUSH
5775: LD_VAR 0 6
5779: PPUSH
5780: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , lab_list [ 1 ] ) ;
5784: CALL_OW 44
5788: PPUSH
5789: LD_VAR 0 10
5793: PUSH
5794: LD_INT 1
5796: ARRAY
5797: PPUSH
5798: CALL_OW 52
// end ;
5802: GO 5766
5804: POP
5805: POP
// for i in breastworks_list do
5806: LD_ADDR_VAR 0 2
5810: PUSH
5811: LD_VAR 0 12
5815: PUSH
5816: FOR_IN
5817: IFFALSE 5929
// begin r := GetDir ( i ) ;
5819: LD_ADDR_VAR 0 4
5823: PUSH
5824: LD_VAR 0 2
5828: PPUSH
5829: CALL_OW 254
5833: ST_TO_ADDR
// if r > 3 then
5834: LD_VAR 0 4
5838: PUSH
5839: LD_INT 3
5841: GREATER
5842: IFFALSE 5860
// r := r - 3 else
5844: LD_ADDR_VAR 0 4
5848: PUSH
5849: LD_VAR 0 4
5853: PUSH
5854: LD_INT 3
5856: MINUS
5857: ST_TO_ADDR
5858: GO 5874
// r := r + 3 ;
5860: LD_ADDR_VAR 0 4
5864: PUSH
5865: LD_VAR 0 4
5869: PUSH
5870: LD_INT 3
5872: PLUS
5873: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5874: LD_INT 0
5876: PPUSH
5877: LD_INT 1
5879: PPUSH
5880: LD_VAR 0 6
5884: PPUSH
5885: CALL_OW 380
// un := CreateHuman ;
5889: LD_ADDR_VAR 0 5
5893: PUSH
5894: CALL_OW 44
5898: ST_TO_ADDR
// SetDir ( un , r ) ;
5899: LD_VAR 0 5
5903: PPUSH
5904: LD_VAR 0 4
5908: PPUSH
5909: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
5913: LD_VAR 0 5
5917: PPUSH
5918: LD_VAR 0 2
5922: PPUSH
5923: CALL_OW 52
// end ;
5927: GO 5816
5929: POP
5930: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) ;
5931: LD_ADDR_VAR 0 8
5935: PUSH
5936: LD_INT 22
5938: PUSH
5939: LD_INT 3
5941: PUSH
5942: EMPTY
5943: LIST
5944: LIST
5945: PUSH
5946: LD_INT 25
5948: PUSH
5949: LD_INT 3
5951: PUSH
5952: EMPTY
5953: LIST
5954: LIST
5955: PUSH
5956: EMPTY
5957: LIST
5958: LIST
5959: PPUSH
5960: CALL_OW 69
5964: ST_TO_ADDR
// r := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
5965: LD_ADDR_VAR 0 4
5969: PUSH
5970: LD_INT 4
5972: PUSH
5973: LD_INT 5
5975: PUSH
5976: LD_INT 6
5978: PUSH
5979: LD_INT 6
5981: PUSH
5982: EMPTY
5983: LIST
5984: LIST
5985: LIST
5986: LIST
5987: PUSH
5988: LD_OWVAR 67
5992: ARRAY
5993: ST_TO_ADDR
// for i = 1 to r do
5994: LD_ADDR_VAR 0 2
5998: PUSH
5999: DOUBLE
6000: LD_INT 1
6002: DEC
6003: ST_TO_ADDR
6004: LD_VAR 0 4
6008: PUSH
6009: FOR_TO
6010: IFFALSE 6183
// begin un := PrepareTank ( 3 , 3 , [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked ] [ i mod 3 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
6012: LD_ADDR_VAR 0 5
6016: PUSH
6017: LD_INT 3
6019: PPUSH
6020: LD_INT 3
6022: PPUSH
6023: LD_INT 22
6025: PUSH
6026: LD_INT 22
6028: PUSH
6029: LD_INT 24
6031: PUSH
6032: EMPTY
6033: LIST
6034: LIST
6035: LIST
6036: PUSH
6037: LD_VAR 0 2
6041: PUSH
6042: LD_INT 3
6044: MOD
6045: PUSH
6046: LD_INT 1
6048: PLUS
6049: ARRAY
6050: PPUSH
6051: LD_INT 1
6053: PPUSH
6054: LD_INT 1
6056: PPUSH
6057: LD_INT 43
6059: PUSH
6060: LD_INT 44
6062: PUSH
6063: LD_INT 42
6065: PUSH
6066: EMPTY
6067: LIST
6068: LIST
6069: LIST
6070: PUSH
6071: LD_VAR 0 2
6075: PUSH
6076: LD_INT 3
6078: MOD
6079: PUSH
6080: LD_INT 1
6082: PLUS
6083: ARRAY
6084: PPUSH
6085: LD_INT 100
6087: PPUSH
6088: CALL 520 0 7
6092: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
6093: LD_VAR 0 5
6097: PPUSH
6098: LD_INT 0
6100: PPUSH
6101: LD_INT 5
6103: PPUSH
6104: CALL_OW 12
6108: PPUSH
6109: CALL_OW 233
// PlaceUnitArea ( un , parkingArea , false ) ;
6113: LD_VAR 0 5
6117: PPUSH
6118: LD_INT 5
6120: PPUSH
6121: LD_INT 0
6123: PPUSH
6124: CALL_OW 49
// if i > tmp - 2 then
6128: LD_VAR 0 2
6132: PUSH
6133: LD_VAR 0 8
6137: PUSH
6138: LD_INT 2
6140: MINUS
6141: GREATER
6142: IFFALSE 6146
// continue ;
6144: GO 6009
// ComExitBuilding ( tmp [ i ] ) ;
6146: LD_VAR 0 8
6150: PUSH
6151: LD_VAR 0 2
6155: ARRAY
6156: PPUSH
6157: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , un ) ;
6161: LD_VAR 0 8
6165: PUSH
6166: LD_VAR 0 2
6170: ARRAY
6171: PPUSH
6172: LD_VAR 0 5
6176: PPUSH
6177: CALL_OW 180
// end ;
6181: GO 6009
6183: POP
6184: POP
// end ;
6185: LD_VAR 0 1
6189: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) do var i , filter , tmp , engs , enemy ;
6190: LD_INT 22
6192: PUSH
6193: LD_INT 3
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: PUSH
6200: LD_INT 25
6202: PUSH
6203: LD_INT 2
6205: PUSH
6206: EMPTY
6207: LIST
6208: LIST
6209: PUSH
6210: EMPTY
6211: LIST
6212: LIST
6213: PPUSH
6214: CALL_OW 69
6218: IFFALSE 6950
6220: GO 6222
6222: DISABLE
6223: LD_INT 0
6225: PPUSH
6226: PPUSH
6227: PPUSH
6228: PPUSH
6229: PPUSH
// begin enable ;
6230: ENABLE
// filter := FilterUnitsInArea ( baseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
6231: LD_ADDR_VAR 0 2
6235: PUSH
6236: LD_INT 6
6238: PPUSH
6239: LD_INT 3
6241: PUSH
6242: LD_INT 24
6244: PUSH
6245: LD_INT 1000
6247: PUSH
6248: EMPTY
6249: LIST
6250: LIST
6251: PUSH
6252: EMPTY
6253: LIST
6254: LIST
6255: PUSH
6256: LD_INT 21
6258: PUSH
6259: LD_INT 3
6261: PUSH
6262: EMPTY
6263: LIST
6264: LIST
6265: PUSH
6266: EMPTY
6267: LIST
6268: LIST
6269: PPUSH
6270: CALL_OW 70
6274: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
6275: LD_ADDR_VAR 0 4
6279: PUSH
6280: LD_INT 22
6282: PUSH
6283: LD_INT 3
6285: PUSH
6286: EMPTY
6287: LIST
6288: LIST
6289: PUSH
6290: LD_INT 25
6292: PUSH
6293: LD_INT 2
6295: PUSH
6296: EMPTY
6297: LIST
6298: LIST
6299: PUSH
6300: EMPTY
6301: LIST
6302: LIST
6303: PPUSH
6304: CALL_OW 69
6308: ST_TO_ADDR
// if not filter and not ru_rebuild_list then
6309: LD_VAR 0 2
6313: NOT
6314: PUSH
6315: LD_EXP 20
6319: NOT
6320: AND
6321: IFFALSE 6391
// begin for i in engs do
6323: LD_ADDR_VAR 0 1
6327: PUSH
6328: LD_VAR 0 4
6332: PUSH
6333: FOR_IN
6334: IFFALSE 6389
// if GetLives ( i ) = 1000 and not HasTask ( i ) and not IsInUnit ( i ) then
6336: LD_VAR 0 1
6340: PPUSH
6341: CALL_OW 256
6345: PUSH
6346: LD_INT 1000
6348: EQUAL
6349: PUSH
6350: LD_VAR 0 1
6354: PPUSH
6355: CALL_OW 314
6359: NOT
6360: AND
6361: PUSH
6362: LD_VAR 0 1
6366: PPUSH
6367: CALL_OW 310
6371: NOT
6372: AND
6373: IFFALSE 6387
// ComEnterUnit ( i , ru_dep_main ) ;
6375: LD_VAR 0 1
6379: PPUSH
6380: LD_INT 16
6382: PPUSH
6383: CALL_OW 120
6387: GO 6333
6389: POP
6390: POP
// end ; if UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) then
6391: LD_VAR 0 4
6395: PPUSH
6396: LD_INT 3
6398: PUSH
6399: LD_INT 24
6401: PUSH
6402: LD_INT 650
6404: PUSH
6405: EMPTY
6406: LIST
6407: LIST
6408: PUSH
6409: EMPTY
6410: LIST
6411: LIST
6412: PPUSH
6413: CALL_OW 72
6417: IFFALSE 6510
// begin tmp := UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) ;
6419: LD_ADDR_VAR 0 3
6423: PUSH
6424: LD_VAR 0 4
6428: PPUSH
6429: LD_INT 3
6431: PUSH
6432: LD_INT 24
6434: PUSH
6435: LD_INT 650
6437: PUSH
6438: EMPTY
6439: LIST
6440: LIST
6441: PUSH
6442: EMPTY
6443: LIST
6444: LIST
6445: PPUSH
6446: CALL_OW 72
6450: ST_TO_ADDR
// for i in tmp do
6451: LD_ADDR_VAR 0 1
6455: PUSH
6456: LD_VAR 0 3
6460: PUSH
6461: FOR_IN
6462: IFFALSE 6508
// if not IsInArea ( i , mainBaseArea ) then
6464: LD_VAR 0 1
6468: PPUSH
6469: LD_INT 14
6471: PPUSH
6472: CALL_OW 308
6476: NOT
6477: IFFALSE 6506
// begin ComMoveXY ( i , 129 , 125 ) ;
6479: LD_VAR 0 1
6483: PPUSH
6484: LD_INT 129
6486: PPUSH
6487: LD_INT 125
6489: PPUSH
6490: CALL_OW 111
// AddComWait ( i , 0 0$30 ) ;
6494: LD_VAR 0 1
6498: PPUSH
6499: LD_INT 1050
6501: PPUSH
6502: CALL_OW 202
// end ;
6506: GO 6461
6508: POP
6509: POP
// end ; engs := UnitFilter ( engs , [ f_lives , 650 ] ) ;
6510: LD_ADDR_VAR 0 4
6514: PUSH
6515: LD_VAR 0 4
6519: PPUSH
6520: LD_INT 24
6522: PUSH
6523: LD_INT 650
6525: PUSH
6526: EMPTY
6527: LIST
6528: LIST
6529: PPUSH
6530: CALL_OW 72
6534: ST_TO_ADDR
// if not engs then
6535: LD_VAR 0 4
6539: NOT
6540: IFFALSE 6544
// exit ;
6542: GO 6950
// if filter then
6544: LD_VAR 0 2
6548: IFFALSE 6807
// begin for i in engs do
6550: LD_ADDR_VAR 0 1
6554: PUSH
6555: LD_VAR 0 4
6559: PUSH
6560: FOR_IN
6561: IFFALSE 6585
// if IsInUnit ( i ) then
6563: LD_VAR 0 1
6567: PPUSH
6568: CALL_OW 310
6572: IFFALSE 6583
// ComExitBuilding ( i ) ;
6574: LD_VAR 0 1
6578: PPUSH
6579: CALL_OW 122
6583: GO 6560
6585: POP
6586: POP
// wait ( 3 ) ;
6587: LD_INT 3
6589: PPUSH
6590: CALL_OW 67
// if filter >= 2 and engs >= 2 then
6594: LD_VAR 0 2
6598: PUSH
6599: LD_INT 2
6601: GREATEREQUAL
6602: PUSH
6603: LD_VAR 0 4
6607: PUSH
6608: LD_INT 2
6610: GREATEREQUAL
6611: AND
6612: IFFALSE 6760
// begin for i = 1 to engs / 2 do
6614: LD_ADDR_VAR 0 1
6618: PUSH
6619: DOUBLE
6620: LD_INT 1
6622: DEC
6623: ST_TO_ADDR
6624: LD_VAR 0 4
6628: PUSH
6629: LD_INT 2
6631: DIVREAL
6632: PUSH
6633: FOR_TO
6634: IFFALSE 6680
// if not HasTask ( engs [ i ] ) then
6636: LD_VAR 0 4
6640: PUSH
6641: LD_VAR 0 1
6645: ARRAY
6646: PPUSH
6647: CALL_OW 314
6651: NOT
6652: IFFALSE 6678
// ComRepairBuilding ( engs [ i ] , filter [ 1 ] ) ;
6654: LD_VAR 0 4
6658: PUSH
6659: LD_VAR 0 1
6663: ARRAY
6664: PPUSH
6665: LD_VAR 0 2
6669: PUSH
6670: LD_INT 1
6672: ARRAY
6673: PPUSH
6674: CALL_OW 130
6678: GO 6633
6680: POP
6681: POP
// for i = engs / 2 + 1 to engs do
6682: LD_ADDR_VAR 0 1
6686: PUSH
6687: DOUBLE
6688: LD_VAR 0 4
6692: PUSH
6693: LD_INT 2
6695: DIVREAL
6696: PUSH
6697: LD_INT 1
6699: PLUS
6700: DEC
6701: ST_TO_ADDR
6702: LD_VAR 0 4
6706: PUSH
6707: FOR_TO
6708: IFFALSE 6756
// if not HasTask ( engs [ i ] ) then
6710: LD_VAR 0 4
6714: PUSH
6715: LD_VAR 0 1
6719: ARRAY
6720: PPUSH
6721: CALL_OW 314
6725: NOT
6726: IFFALSE 6754
// ComRepairBuilding ( engs [ i ] , filter [ filter ] ) ;
6728: LD_VAR 0 4
6732: PUSH
6733: LD_VAR 0 1
6737: ARRAY
6738: PPUSH
6739: LD_VAR 0 2
6743: PUSH
6744: LD_VAR 0 2
6748: ARRAY
6749: PPUSH
6750: CALL_OW 130
6754: GO 6707
6756: POP
6757: POP
// end else
6758: GO 6807
// for i in engs do
6760: LD_ADDR_VAR 0 1
6764: PUSH
6765: LD_VAR 0 4
6769: PUSH
6770: FOR_IN
6771: IFFALSE 6805
// if not HasTask ( i ) then
6773: LD_VAR 0 1
6777: PPUSH
6778: CALL_OW 314
6782: NOT
6783: IFFALSE 6803
// ComRepairBuilding ( i , filter [ 1 ] ) ;
6785: LD_VAR 0 1
6789: PPUSH
6790: LD_VAR 0 2
6794: PUSH
6795: LD_INT 1
6797: ARRAY
6798: PPUSH
6799: CALL_OW 130
6803: GO 6770
6805: POP
6806: POP
// end ; enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
6807: LD_ADDR_VAR 0 5
6811: PUSH
6812: LD_INT 81
6814: PUSH
6815: LD_INT 3
6817: PUSH
6818: EMPTY
6819: LIST
6820: LIST
6821: PPUSH
6822: CALL_OW 69
6826: ST_TO_ADDR
// if ru_rebuild_list and not filter then
6827: LD_EXP 20
6831: PUSH
6832: LD_VAR 0 2
6836: NOT
6837: AND
6838: IFFALSE 6950
// begin ComExitBuilding ( engs ) ;
6840: LD_VAR 0 4
6844: PPUSH
6845: CALL_OW 122
// if GetDistUnitXY ( NearestUnitToXY ( enemy , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) > 10 then
6849: LD_VAR 0 5
6853: PPUSH
6854: LD_EXP 20
6858: PUSH
6859: LD_INT 2
6861: ARRAY
6862: PPUSH
6863: LD_EXP 20
6867: PUSH
6868: LD_INT 3
6870: ARRAY
6871: PPUSH
6872: CALL_OW 73
6876: PPUSH
6877: LD_EXP 20
6881: PUSH
6882: LD_INT 2
6884: ARRAY
6885: PPUSH
6886: LD_EXP 20
6890: PUSH
6891: LD_INT 3
6893: ARRAY
6894: PPUSH
6895: CALL_OW 297
6899: PUSH
6900: LD_INT 10
6902: GREATER
6903: IFFALSE 6950
// ComBuild ( engs , ru_rebuild_list [ 1 ] , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] , ru_rebuild_list [ 4 ] ) ;
6905: LD_VAR 0 4
6909: PPUSH
6910: LD_EXP 20
6914: PUSH
6915: LD_INT 1
6917: ARRAY
6918: PPUSH
6919: LD_EXP 20
6923: PUSH
6924: LD_INT 2
6926: ARRAY
6927: PPUSH
6928: LD_EXP 20
6932: PUSH
6933: LD_INT 3
6935: ARRAY
6936: PPUSH
6937: LD_EXP 20
6941: PUSH
6942: LD_INT 4
6944: ARRAY
6945: PPUSH
6946: CALL_OW 145
// end ; end ;
6950: PPOPN 5
6952: END
// every 0 0$1 trigger GetLives ( ru_dep_main ) < 250 do var i , tmp ;
6953: LD_INT 16
6955: PPUSH
6956: CALL_OW 256
6960: PUSH
6961: LD_INT 250
6963: LESS
6964: IFFALSE 7154
6966: GO 6968
6968: DISABLE
6969: LD_INT 0
6971: PPUSH
6972: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
6973: LD_ADDR_VAR 0 2
6977: PUSH
6978: LD_INT 22
6980: PUSH
6981: LD_INT 3
6983: PUSH
6984: EMPTY
6985: LIST
6986: LIST
6987: PUSH
6988: LD_INT 2
6990: PUSH
6991: LD_INT 25
6993: PUSH
6994: LD_INT 1
6996: PUSH
6997: EMPTY
6998: LIST
6999: LIST
7000: PUSH
7001: LD_INT 25
7003: PUSH
7004: LD_INT 3
7006: PUSH
7007: EMPTY
7008: LIST
7009: LIST
7010: PUSH
7011: LD_INT 25
7013: PUSH
7014: LD_INT 4
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: LIST
7025: LIST
7026: PUSH
7027: EMPTY
7028: LIST
7029: LIST
7030: PPUSH
7031: CALL_OW 69
7035: ST_TO_ADDR
// ComExitBuilding ( tmp ) ;
7036: LD_VAR 0 2
7040: PPUSH
7041: CALL_OW 122
// wait ( 3 ) ;
7045: LD_INT 3
7047: PPUSH
7048: CALL_OW 67
// ComMoveXY ( tmp , 156 , 211 ) ;
7052: LD_VAR 0 2
7056: PPUSH
7057: LD_INT 156
7059: PPUSH
7060: LD_INT 211
7062: PPUSH
7063: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7067: LD_INT 35
7069: PPUSH
7070: CALL_OW 67
// for i in tmp do
7074: LD_ADDR_VAR 0 1
7078: PUSH
7079: LD_VAR 0 2
7083: PUSH
7084: FOR_IN
7085: IFFALSE 7145
// if IsInArea ( i , escapeArea ) then
7087: LD_VAR 0 1
7091: PPUSH
7092: LD_INT 15
7094: PPUSH
7095: CALL_OW 308
7099: IFFALSE 7128
// begin RemoveUnit ( i ) ;
7101: LD_VAR 0 1
7105: PPUSH
7106: CALL_OW 64
// tmp := tmp diff i ;
7110: LD_ADDR_VAR 0 2
7114: PUSH
7115: LD_VAR 0 2
7119: PUSH
7120: LD_VAR 0 1
7124: DIFF
7125: ST_TO_ADDR
// end else
7126: GO 7143
// ComMoveXY ( i , 156 , 211 ) ;
7128: LD_VAR 0 1
7132: PPUSH
7133: LD_INT 156
7135: PPUSH
7136: LD_INT 211
7138: PPUSH
7139: CALL_OW 111
7143: GO 7084
7145: POP
7146: POP
// until not tmp ;
7147: LD_VAR 0 2
7151: NOT
7152: IFFALSE 7067
// end ;
7154: PPOPN 2
7156: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do var i , tmp , doc ;
7157: LD_INT 22
7159: PUSH
7160: LD_INT 3
7162: PUSH
7163: EMPTY
7164: LIST
7165: LIST
7166: PUSH
7167: LD_INT 25
7169: PUSH
7170: LD_INT 4
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: PUSH
7177: EMPTY
7178: LIST
7179: LIST
7180: PPUSH
7181: CALL_OW 69
7185: IFFALSE 7439
7187: GO 7189
7189: DISABLE
7190: LD_INT 0
7192: PPUSH
7193: PPUSH
7194: PPUSH
// begin enable ;
7195: ENABLE
// tmp := FilterUnitsInArea ( mainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7196: LD_ADDR_VAR 0 2
7200: PUSH
7201: LD_INT 14
7203: PPUSH
7204: LD_INT 22
7206: PUSH
7207: LD_INT 3
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: PUSH
7214: LD_INT 21
7216: PUSH
7217: LD_INT 1
7219: PUSH
7220: EMPTY
7221: LIST
7222: LIST
7223: PUSH
7224: LD_INT 3
7226: PUSH
7227: LD_INT 24
7229: PUSH
7230: LD_INT 1000
7232: PUSH
7233: EMPTY
7234: LIST
7235: LIST
7236: PUSH
7237: EMPTY
7238: LIST
7239: LIST
7240: PUSH
7241: EMPTY
7242: LIST
7243: LIST
7244: LIST
7245: PPUSH
7246: CALL_OW 70
7250: ST_TO_ADDR
// doc := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
7251: LD_ADDR_VAR 0 3
7255: PUSH
7256: LD_INT 22
7258: PUSH
7259: LD_INT 3
7261: PUSH
7262: EMPTY
7263: LIST
7264: LIST
7265: PUSH
7266: LD_INT 25
7268: PUSH
7269: LD_INT 4
7271: PUSH
7272: EMPTY
7273: LIST
7274: LIST
7275: PUSH
7276: EMPTY
7277: LIST
7278: LIST
7279: PPUSH
7280: CALL_OW 69
7284: ST_TO_ADDR
// if not doc then
7285: LD_VAR 0 3
7289: NOT
7290: IFFALSE 7294
// exit ;
7292: GO 7439
// if not tmp then
7294: LD_VAR 0 2
7298: NOT
7299: IFFALSE 7390
// begin if not IsInUnit ( doc [ 1 ] ) then
7301: LD_VAR 0 3
7305: PUSH
7306: LD_INT 1
7308: ARRAY
7309: PPUSH
7310: CALL_OW 310
7314: NOT
7315: IFFALSE 7388
// ComEnterUnit ( doc , FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ) ;
7317: LD_VAR 0 3
7321: PPUSH
7322: LD_INT 22
7324: PUSH
7325: LD_INT 3
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: PUSH
7332: LD_INT 2
7334: PUSH
7335: LD_INT 30
7337: PUSH
7338: LD_INT 6
7340: PUSH
7341: EMPTY
7342: LIST
7343: LIST
7344: PUSH
7345: LD_INT 30
7347: PUSH
7348: LD_INT 7
7350: PUSH
7351: EMPTY
7352: LIST
7353: LIST
7354: PUSH
7355: LD_INT 30
7357: PUSH
7358: LD_INT 8
7360: PUSH
7361: EMPTY
7362: LIST
7363: LIST
7364: PUSH
7365: EMPTY
7366: LIST
7367: LIST
7368: LIST
7369: LIST
7370: PUSH
7371: EMPTY
7372: LIST
7373: LIST
7374: PPUSH
7375: CALL_OW 69
7379: PUSH
7380: LD_INT 1
7382: ARRAY
7383: PPUSH
7384: CALL_OW 120
// exit ;
7388: GO 7439
// end ; if IsInUnit ( doc [ 1 ] ) then
7390: LD_VAR 0 3
7394: PUSH
7395: LD_INT 1
7397: ARRAY
7398: PPUSH
7399: CALL_OW 310
7403: IFFALSE 7414
// ComExitBuilding ( doc ) ;
7405: LD_VAR 0 3
7409: PPUSH
7410: CALL_OW 122
// wait ( 3 ) ;
7414: LD_INT 3
7416: PPUSH
7417: CALL_OW 67
// ComHeal ( doc , tmp [ 1 ] ) ;
7421: LD_VAR 0 3
7425: PPUSH
7426: LD_VAR 0 2
7430: PUSH
7431: LD_INT 1
7433: ARRAY
7434: PPUSH
7435: CALL_OW 128
// end ;
7439: PPOPN 3
7441: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do var i , tmp , attacking , areas , area , mech ;
7442: LD_INT 22
7444: PUSH
7445: LD_INT 3
7447: PUSH
7448: EMPTY
7449: LIST
7450: LIST
7451: PUSH
7452: LD_INT 25
7454: PUSH
7455: LD_INT 3
7457: PUSH
7458: EMPTY
7459: LIST
7460: LIST
7461: PUSH
7462: EMPTY
7463: LIST
7464: LIST
7465: PPUSH
7466: CALL_OW 69
7470: PUSH
7471: LD_INT 22
7473: PUSH
7474: LD_INT 3
7476: PUSH
7477: EMPTY
7478: LIST
7479: LIST
7480: PUSH
7481: LD_INT 21
7483: PUSH
7484: LD_INT 2
7486: PUSH
7487: EMPTY
7488: LIST
7489: LIST
7490: PUSH
7491: EMPTY
7492: LIST
7493: LIST
7494: PPUSH
7495: CALL_OW 69
7499: AND
7500: IFFALSE 8259
7502: GO 7504
7504: DISABLE
7505: LD_INT 0
7507: PPUSH
7508: PPUSH
7509: PPUSH
7510: PPUSH
7511: PPUSH
7512: PPUSH
// begin enable ;
7513: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
7514: LD_ADDR_VAR 0 2
7518: PUSH
7519: LD_INT 22
7521: PUSH
7522: LD_INT 3
7524: PUSH
7525: EMPTY
7526: LIST
7527: LIST
7528: PUSH
7529: LD_INT 21
7531: PUSH
7532: LD_INT 2
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: PUSH
7539: LD_INT 3
7541: PUSH
7542: LD_INT 58
7544: PUSH
7545: EMPTY
7546: LIST
7547: PUSH
7548: EMPTY
7549: LIST
7550: LIST
7551: PUSH
7552: EMPTY
7553: LIST
7554: LIST
7555: LIST
7556: PPUSH
7557: CALL_OW 69
7561: ST_TO_ADDR
// areas := [ sectorAlpha , sectorBeta , sectorDelta , mainBaseArea ] ;
7562: LD_ADDR_VAR 0 4
7566: PUSH
7567: LD_INT 10
7569: PUSH
7570: LD_INT 11
7572: PUSH
7573: LD_INT 12
7575: PUSH
7576: LD_INT 14
7578: PUSH
7579: EMPTY
7580: LIST
7581: LIST
7582: LIST
7583: LIST
7584: ST_TO_ADDR
// area := 0 ;
7585: LD_ADDR_VAR 0 5
7589: PUSH
7590: LD_INT 0
7592: ST_TO_ADDR
// attacking := false ;
7593: LD_ADDR_VAR 0 3
7597: PUSH
7598: LD_INT 0
7600: ST_TO_ADDR
// for i in tmp do
7601: LD_ADDR_VAR 0 1
7605: PUSH
7606: LD_VAR 0 2
7610: PUSH
7611: FOR_IN
7612: IFFALSE 8040
// begin if GetDistUnits ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) < 10 and not HasTask ( i ) and not GetTag ( i ) and GetLives ( i ) > 650 then
7614: LD_VAR 0 1
7618: PPUSH
7619: LD_INT 22
7621: PUSH
7622: LD_INT 1
7624: PUSH
7625: EMPTY
7626: LIST
7627: LIST
7628: PPUSH
7629: CALL_OW 69
7633: PPUSH
7634: LD_VAR 0 1
7638: PPUSH
7639: CALL_OW 74
7643: PPUSH
7644: CALL_OW 296
7648: PUSH
7649: LD_INT 10
7651: LESS
7652: PUSH
7653: LD_VAR 0 1
7657: PPUSH
7658: CALL_OW 314
7662: NOT
7663: AND
7664: PUSH
7665: LD_VAR 0 1
7669: PPUSH
7670: CALL_OW 110
7674: NOT
7675: AND
7676: PUSH
7677: LD_VAR 0 1
7681: PPUSH
7682: CALL_OW 256
7686: PUSH
7687: LD_INT 650
7689: GREATER
7690: AND
7691: IFFALSE 7735
// begin ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
7693: LD_VAR 0 1
7697: PPUSH
7698: LD_INT 22
7700: PUSH
7701: LD_INT 1
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: PPUSH
7708: CALL_OW 69
7712: PPUSH
7713: LD_VAR 0 1
7717: PPUSH
7718: CALL_OW 74
7722: PPUSH
7723: CALL_OW 115
// attacking := true ;
7727: LD_ADDR_VAR 0 3
7731: PUSH
7732: LD_INT 1
7734: ST_TO_ADDR
// end ; if not GetTag ( i ) and GetLives ( i ) < 650 and GetType ( i ) = unit_vehicle then
7735: LD_VAR 0 1
7739: PPUSH
7740: CALL_OW 110
7744: NOT
7745: PUSH
7746: LD_VAR 0 1
7750: PPUSH
7751: CALL_OW 256
7755: PUSH
7756: LD_INT 650
7758: LESS
7759: AND
7760: PUSH
7761: LD_VAR 0 1
7765: PPUSH
7766: CALL_OW 247
7770: PUSH
7771: LD_INT 2
7773: EQUAL
7774: AND
7775: IFFALSE 7804
// begin SetTag ( i , 1 ) ;
7777: LD_VAR 0 1
7781: PPUSH
7782: LD_INT 1
7784: PPUSH
7785: CALL_OW 109
// ComMoveXY ( i , 130 , 139 ) ;
7789: LD_VAR 0 1
7793: PPUSH
7794: LD_INT 130
7796: PPUSH
7797: LD_INT 139
7799: PPUSH
7800: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 130 , 139 ) < 6 then
7804: LD_VAR 0 1
7808: PPUSH
7809: CALL_OW 110
7813: PUSH
7814: LD_INT 1
7816: EQUAL
7817: PUSH
7818: LD_VAR 0 1
7822: PPUSH
7823: LD_INT 130
7825: PPUSH
7826: LD_INT 139
7828: PPUSH
7829: CALL_OW 297
7833: PUSH
7834: LD_INT 6
7836: LESS
7837: AND
7838: IFFALSE 7852
// SetTag ( i , 2 ) ;
7840: LD_VAR 0 1
7844: PPUSH
7845: LD_INT 2
7847: PPUSH
7848: CALL_OW 109
// if GetTag ( i ) = 2 then
7852: LD_VAR 0 1
7856: PPUSH
7857: CALL_OW 110
7861: PUSH
7862: LD_INT 2
7864: EQUAL
7865: IFFALSE 8000
// begin if GetLives ( i ) = 1000 then
7867: LD_VAR 0 1
7871: PPUSH
7872: CALL_OW 256
7876: PUSH
7877: LD_INT 1000
7879: EQUAL
7880: IFFALSE 7896
// SetTag ( i , 3 ) else
7882: LD_VAR 0 1
7886: PPUSH
7887: LD_INT 3
7889: PPUSH
7890: CALL_OW 109
7894: GO 8000
// if IsDrivenBy ( i ) then
7896: LD_VAR 0 1
7900: PPUSH
7901: CALL_OW 311
7905: IFFALSE 8000
// begin mech := IsDrivenBy ( i ) ;
7907: LD_ADDR_VAR 0 6
7911: PUSH
7912: LD_VAR 0 1
7916: PPUSH
7917: CALL_OW 311
7921: ST_TO_ADDR
// if not See ( 1 , mech ) and GetLives ( mech ) < 1000 then
7922: LD_INT 1
7924: PPUSH
7925: LD_VAR 0 6
7929: PPUSH
7930: CALL_OW 292
7934: NOT
7935: PUSH
7936: LD_VAR 0 6
7940: PPUSH
7941: CALL_OW 256
7945: PUSH
7946: LD_INT 1000
7948: LESS
7949: AND
7950: IFFALSE 7964
// SetLives ( mech , 1000 ) ;
7952: LD_VAR 0 6
7956: PPUSH
7957: LD_INT 1000
7959: PPUSH
7960: CALL_OW 234
// if not See ( 1 , i ) then
7964: LD_INT 1
7966: PPUSH
7967: LD_VAR 0 1
7971: PPUSH
7972: CALL_OW 292
7976: NOT
7977: IFFALSE 7991
// SetFuel ( i , 100 ) ;
7979: LD_VAR 0 1
7983: PPUSH
7984: LD_INT 100
7986: PPUSH
7987: CALL_OW 240
// ComRepairVehicleAndReturn ( mech ) ;
7991: LD_VAR 0 6
7995: PPUSH
7996: CALL 71498 0 1
// end ; end ; if GetTag ( i ) = 3 and IsDrivenBy ( i ) then
8000: LD_VAR 0 1
8004: PPUSH
8005: CALL_OW 110
8009: PUSH
8010: LD_INT 3
8012: EQUAL
8013: PUSH
8014: LD_VAR 0 1
8018: PPUSH
8019: CALL_OW 311
8023: AND
8024: IFFALSE 8038
// SetTag ( i , 0 ) ;
8026: LD_VAR 0 1
8030: PPUSH
8031: LD_INT 0
8033: PPUSH
8034: CALL_OW 109
// end ;
8038: GO 7611
8040: POP
8041: POP
// if attacking then
8042: LD_VAR 0 3
8046: IFFALSE 8050
// exit ;
8048: GO 8259
// if can_end and tmp then
8050: LD_EXP 6
8054: PUSH
8055: LD_VAR 0 2
8059: AND
8060: IFFALSE 8115
// begin for i in tmp do
8062: LD_ADDR_VAR 0 1
8066: PUSH
8067: LD_VAR 0 2
8071: PUSH
8072: FOR_IN
8073: IFFALSE 8111
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
8075: LD_VAR 0 1
8079: PPUSH
8080: LD_INT 22
8082: PUSH
8083: LD_INT 1
8085: PUSH
8086: EMPTY
8087: LIST
8088: LIST
8089: PPUSH
8090: CALL_OW 69
8094: PPUSH
8095: LD_VAR 0 1
8099: PPUSH
8100: CALL_OW 74
8104: PPUSH
8105: CALL_OW 115
8109: GO 8072
8111: POP
8112: POP
// exit ;
8113: GO 8259
// end ; for i in areas do
8115: LD_ADDR_VAR 0 1
8119: PUSH
8120: LD_VAR 0 4
8124: PUSH
8125: FOR_IN
8126: IFFALSE 8163
// if FilterUnitsInArea ( i , [ f_side , 1 ] ) then
8128: LD_VAR 0 1
8132: PPUSH
8133: LD_INT 22
8135: PUSH
8136: LD_INT 1
8138: PUSH
8139: EMPTY
8140: LIST
8141: LIST
8142: PPUSH
8143: CALL_OW 70
8147: IFFALSE 8161
// begin area := i ;
8149: LD_ADDR_VAR 0 5
8153: PUSH
8154: LD_VAR 0 1
8158: ST_TO_ADDR
// break ;
8159: GO 8163
// end ;
8161: GO 8125
8163: POP
8164: POP
// if area then
8165: LD_VAR 0 5
8169: IFFALSE 8259
// begin for i in tmp do
8171: LD_ADDR_VAR 0 1
8175: PUSH
8176: LD_VAR 0 2
8180: PUSH
8181: FOR_IN
8182: IFFALSE 8257
// begin if GetTag ( i ) then
8184: LD_VAR 0 1
8188: PPUSH
8189: CALL_OW 110
8193: IFFALSE 8197
// continue ;
8195: GO 8181
// if GetFuel ( i ) < 33 then
8197: LD_VAR 0 1
8201: PPUSH
8202: CALL_OW 261
8206: PUSH
8207: LD_INT 33
8209: LESS
8210: IFFALSE 8224
// SetFuel ( i , 33 ) ;
8212: LD_VAR 0 1
8216: PPUSH
8217: LD_INT 33
8219: PPUSH
8220: CALL_OW 240
// if not IsInArea ( i , area ) then
8224: LD_VAR 0 1
8228: PPUSH
8229: LD_VAR 0 5
8233: PPUSH
8234: CALL_OW 308
8238: NOT
8239: IFFALSE 8255
// ComMoveToArea ( i , area ) ;
8241: LD_VAR 0 1
8245: PPUSH
8246: LD_VAR 0 5
8250: PPUSH
8251: CALL_OW 113
// end ;
8255: GO 8181
8257: POP
8258: POP
// end ; end ;
8259: PPOPN 6
8261: END
// every 15 15$00 trigger Difficulty > 1 do var i , j , un , veh , time , count ;
8262: LD_OWVAR 67
8266: PUSH
8267: LD_INT 1
8269: GREATER
8270: IFFALSE 8559
8272: GO 8274
8274: DISABLE
8275: LD_INT 0
8277: PPUSH
8278: PPUSH
8279: PPUSH
8280: PPUSH
8281: PPUSH
8282: PPUSH
// begin uc_side := 3 ;
8283: LD_ADDR_OWVAR 20
8287: PUSH
8288: LD_INT 3
8290: ST_TO_ADDR
// uc_nation := 3 ;
8291: LD_ADDR_OWVAR 21
8295: PUSH
8296: LD_INT 3
8298: ST_TO_ADDR
// time := [ 9 9$00 , 7 7$00 , 6 6$00 , 5 5$30 ] [ Difficulty ] ;
8299: LD_ADDR_VAR 0 5
8303: PUSH
8304: LD_INT 18900
8306: PUSH
8307: LD_INT 14700
8309: PUSH
8310: LD_INT 12600
8312: PUSH
8313: LD_INT 11550
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: LIST
8320: LIST
8321: PUSH
8322: LD_OWVAR 67
8326: ARRAY
8327: ST_TO_ADDR
// count := [ 2 , 2 , 3 , 3 ] [ Difficulty ] ;
8328: LD_ADDR_VAR 0 6
8332: PUSH
8333: LD_INT 2
8335: PUSH
8336: LD_INT 2
8338: PUSH
8339: LD_INT 3
8341: PUSH
8342: LD_INT 3
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: LIST
8349: LIST
8350: PUSH
8351: LD_OWVAR 67
8355: ARRAY
8356: ST_TO_ADDR
// for i = 1 to count do
8357: LD_ADDR_VAR 0 1
8361: PUSH
8362: DOUBLE
8363: LD_INT 1
8365: DEC
8366: ST_TO_ADDR
8367: LD_VAR 0 6
8371: PUSH
8372: FOR_TO
8373: IFFALSE 8557
// begin wait ( time ) ;
8375: LD_VAR 0 5
8379: PPUSH
8380: CALL_OW 67
// for j = 1 to rand ( 1 , Difficulty ) do
8384: LD_ADDR_VAR 0 2
8388: PUSH
8389: DOUBLE
8390: LD_INT 1
8392: DEC
8393: ST_TO_ADDR
8394: LD_INT 1
8396: PPUSH
8397: LD_OWVAR 67
8401: PPUSH
8402: CALL_OW 12
8406: PUSH
8407: FOR_TO
8408: IFFALSE 8553
// begin veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 80 ) ;
8410: LD_ADDR_VAR 0 4
8414: PUSH
8415: LD_INT 3
8417: PPUSH
8418: LD_INT 3
8420: PPUSH
8421: LD_INT 22
8423: PPUSH
8424: LD_INT 1
8426: PPUSH
8427: LD_INT 1
8429: PPUSH
8430: LD_INT 43
8432: PUSH
8433: LD_INT 44
8435: PUSH
8436: LD_INT 42
8438: PUSH
8439: EMPTY
8440: LIST
8441: LIST
8442: LIST
8443: PUSH
8444: LD_VAR 0 1
8448: PUSH
8449: LD_INT 3
8451: MOD
8452: PUSH
8453: LD_INT 1
8455: PLUS
8456: ARRAY
8457: PPUSH
8458: LD_INT 80
8460: PPUSH
8461: CALL 520 0 7
8465: ST_TO_ADDR
// PlaceUnitArea ( veh , southArea , false ) ;
8466: LD_VAR 0 4
8470: PPUSH
8471: LD_INT 13
8473: PPUSH
8474: LD_INT 0
8476: PPUSH
8477: CALL_OW 49
// PrepareHuman ( false , 3 , [ 4 , 5 , 5 , 7 ] [ Difficulty ] ) ;
8481: LD_INT 0
8483: PPUSH
8484: LD_INT 3
8486: PPUSH
8487: LD_INT 4
8489: PUSH
8490: LD_INT 5
8492: PUSH
8493: LD_INT 5
8495: PUSH
8496: LD_INT 7
8498: PUSH
8499: EMPTY
8500: LIST
8501: LIST
8502: LIST
8503: LIST
8504: PUSH
8505: LD_OWVAR 67
8509: ARRAY
8510: PPUSH
8511: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
8515: CALL_OW 44
8519: PPUSH
8520: LD_VAR 0 4
8524: PPUSH
8525: CALL_OW 52
// wait ( 0 0$01 ) ;
8529: LD_INT 35
8531: PPUSH
8532: CALL_OW 67
// ComMoveXY ( veh , 143 , 143 ) ;
8536: LD_VAR 0 4
8540: PPUSH
8541: LD_INT 143
8543: PPUSH
8544: LD_INT 143
8546: PPUSH
8547: CALL_OW 111
// end ;
8551: GO 8407
8553: POP
8554: POP
// end ;
8555: GO 8372
8557: POP
8558: POP
// end ;
8559: PPOPN 6
8561: END
// every 8 8$00 do var i , un , time ;
8562: GO 8564
8564: DISABLE
8565: LD_INT 0
8567: PPUSH
8568: PPUSH
8569: PPUSH
// begin time := [ 3 3$00 , 1 1$00 , 0 0$30 ] ;
8570: LD_ADDR_VAR 0 3
8574: PUSH
8575: LD_INT 6300
8577: PUSH
8578: LD_INT 2100
8580: PUSH
8581: LD_INT 1050
8583: PUSH
8584: EMPTY
8585: LIST
8586: LIST
8587: LIST
8588: ST_TO_ADDR
// wait ( time ) ;
8589: LD_VAR 0 3
8593: PPUSH
8594: CALL_OW 67
// uc_side := 3 ;
8598: LD_ADDR_OWVAR 20
8602: PUSH
8603: LD_INT 3
8605: ST_TO_ADDR
// uc_nation := 3 ;
8606: LD_ADDR_OWVAR 21
8610: PUSH
8611: LD_INT 3
8613: ST_TO_ADDR
// for i = 1 to 2 do
8614: LD_ADDR_VAR 0 1
8618: PUSH
8619: DOUBLE
8620: LD_INT 1
8622: DEC
8623: ST_TO_ADDR
8624: LD_INT 2
8626: PUSH
8627: FOR_TO
8628: IFFALSE 8691
// begin PrepareHuman ( false , 1 , 4 ) ;
8630: LD_INT 0
8632: PPUSH
8633: LD_INT 1
8635: PPUSH
8636: LD_INT 4
8638: PPUSH
8639: CALL_OW 380
// un := CreateHuman ;
8643: LD_ADDR_VAR 0 2
8647: PUSH
8648: CALL_OW 44
8652: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_dep_main ) ;
8653: LD_VAR 0 2
8657: PPUSH
8658: LD_INT 16
8660: PPUSH
8661: CALL_OW 52
// ComExitBuilding ( un ) ;
8665: LD_VAR 0 2
8669: PPUSH
8670: CALL_OW 122
// AddComAgressiveMove ( un , 41 , 76 ) ;
8674: LD_VAR 0 2
8678: PPUSH
8679: LD_INT 41
8681: PPUSH
8682: LD_INT 76
8684: PPUSH
8685: CALL_OW 174
// end ;
8689: GO 8627
8691: POP
8692: POP
// end ; end_of_file
8693: PPOPN 3
8695: END
// export function Action ; begin
8696: LD_INT 0
8698: PPUSH
// CenterNowOnXY ( 28 , 3 ) ;
8699: LD_INT 28
8701: PPUSH
8702: LD_INT 3
8704: PPUSH
8705: CALL_OW 86
// PlaceSeeing ( 41 , 76 , 1 , 10 ) ;
8709: LD_INT 41
8711: PPUSH
8712: LD_INT 76
8714: PPUSH
8715: LD_INT 1
8717: PPUSH
8718: LD_INT 10
8720: PPUSH
8721: CALL_OW 330
// RemoveSeeing ( 41 , 76 , 1 ) ;
8725: LD_INT 41
8727: PPUSH
8728: LD_INT 76
8730: PPUSH
8731: LD_INT 1
8733: PPUSH
8734: CALL_OW 331
// InGameOn ;
8738: CALL_OW 8
// SayRadio ( Harisson , D2-Har-1 ) ;
8742: LD_EXP 19
8746: PPUSH
8747: LD_STRING D2-Har-1
8749: PPUSH
8750: CALL_OW 94
// InGameOff ;
8754: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
8758: LD_STRING M1
8760: PPUSH
8761: CALL_OW 337
// end ;
8765: LD_VAR 0 1
8769: RET
// every 0 0$1 trigger buildings_counter > 1 do var un ;
8770: LD_EXP 4
8774: PUSH
8775: LD_INT 1
8777: GREATER
8778: IFFALSE 8869
8780: GO 8782
8782: DISABLE
8783: LD_INT 0
8785: PPUSH
// begin un := GetRandom ( sex_male ) [ 1 ] ;
8786: LD_ADDR_VAR 0 1
8790: PUSH
8791: LD_INT 1
8793: PPUSH
8794: CALL 608 0 1
8798: PUSH
8799: LD_INT 1
8801: ARRAY
8802: ST_TO_ADDR
// Say ( un , D2a-Sol1-1 ) ;
8803: LD_VAR 0 1
8807: PPUSH
8808: LD_STRING D2a-Sol1-1
8810: PPUSH
8811: CALL_OW 88
// if not un then
8815: LD_VAR 0 1
8819: NOT
8820: IFFALSE 8851
// begin un := GetRandom ( sex_female ) [ 1 ] ;
8822: LD_ADDR_VAR 0 1
8826: PUSH
8827: LD_INT 2
8829: PPUSH
8830: CALL 608 0 1
8834: PUSH
8835: LD_INT 1
8837: ARRAY
8838: ST_TO_ADDR
// Say ( un , D2a-FSol1-1 ) ;
8839: LD_VAR 0 1
8843: PPUSH
8844: LD_STRING D2a-FSol1-1
8846: PPUSH
8847: CALL_OW 88
// end ; if Khatam then
8851: LD_EXP 17
8855: IFFALSE 8869
// Say ( Khatam , D3b-Khat-3 ) ;
8857: LD_EXP 17
8861: PPUSH
8862: LD_STRING D3b-Khat-3
8864: PPUSH
8865: CALL_OW 88
// end ;
8869: PPOPN 1
8871: END
// every 0 0$1 trigger Frank and not Kikuchi and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Frank , 7 ] ] ) and IsOk ( Frank ) and not InBattle ( 1 ) and not InBattle ( 4 ) do var i , ape ;
8872: LD_EXP 15
8876: PUSH
8877: LD_EXP 18
8881: NOT
8882: AND
8883: PUSH
8884: LD_INT 22
8886: PUSH
8887: LD_INT 1
8889: PUSH
8890: EMPTY
8891: LIST
8892: LIST
8893: PUSH
8894: LD_INT 91
8896: PUSH
8897: LD_EXP 15
8901: PUSH
8902: LD_INT 7
8904: PUSH
8905: EMPTY
8906: LIST
8907: LIST
8908: LIST
8909: PUSH
8910: EMPTY
8911: LIST
8912: LIST
8913: PPUSH
8914: CALL_OW 69
8918: AND
8919: PUSH
8920: LD_EXP 15
8924: PPUSH
8925: CALL_OW 302
8929: AND
8930: PUSH
8931: LD_INT 1
8933: PPUSH
8934: CALL_OW 463
8938: NOT
8939: AND
8940: PUSH
8941: LD_INT 4
8943: PPUSH
8944: CALL_OW 463
8948: NOT
8949: AND
8950: IFFALSE 9537
8952: GO 8954
8954: DISABLE
8955: LD_INT 0
8957: PPUSH
8958: PPUSH
// begin InGameOn ;
8959: CALL_OW 8
// ape := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
8963: LD_ADDR_VAR 0 2
8967: PUSH
8968: LD_INT 22
8970: PUSH
8971: LD_INT 0
8973: PUSH
8974: EMPTY
8975: LIST
8976: LIST
8977: PUSH
8978: LD_INT 25
8980: PUSH
8981: LD_INT 12
8983: PUSH
8984: EMPTY
8985: LIST
8986: LIST
8987: PUSH
8988: EMPTY
8989: LIST
8990: LIST
8991: PPUSH
8992: CALL_OW 69
8996: ST_TO_ADDR
// ape := NearestUnitToUnit ( ape , Frank ) ;
8997: LD_ADDR_VAR 0 2
9001: PUSH
9002: LD_VAR 0 2
9006: PPUSH
9007: LD_EXP 15
9011: PPUSH
9012: CALL_OW 74
9016: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , Frank , 20 ] ] ) do
9017: LD_ADDR_VAR 0 1
9021: PUSH
9022: LD_INT 22
9024: PUSH
9025: LD_INT 1
9027: PUSH
9028: EMPTY
9029: LIST
9030: LIST
9031: PUSH
9032: LD_INT 21
9034: PUSH
9035: LD_INT 1
9037: PUSH
9038: EMPTY
9039: LIST
9040: LIST
9041: PUSH
9042: LD_INT 91
9044: PUSH
9045: LD_EXP 15
9049: PUSH
9050: LD_INT 20
9052: PUSH
9053: EMPTY
9054: LIST
9055: LIST
9056: LIST
9057: PUSH
9058: EMPTY
9059: LIST
9060: LIST
9061: LIST
9062: PPUSH
9063: CALL_OW 69
9067: PUSH
9068: FOR_IN
9069: IFFALSE 9087
// ComTurnUnit ( i , Frank ) ;
9071: LD_VAR 0 1
9075: PPUSH
9076: LD_EXP 15
9080: PPUSH
9081: CALL_OW 119
9085: GO 9068
9087: POP
9088: POP
// SetSide ( Frank , 1 ) ;
9089: LD_EXP 15
9093: PPUSH
9094: LD_INT 1
9096: PPUSH
9097: CALL_OW 235
// ComMoveUnit ( JMM , Frank ) ;
9101: LD_EXP 9
9105: PPUSH
9106: LD_EXP 15
9110: PPUSH
9111: CALL_OW 112
// AddComTurnUnit ( JMM , Frank ) ;
9115: LD_EXP 9
9119: PPUSH
9120: LD_EXP 15
9124: PPUSH
9125: CALL_OW 179
// CenterOnUnits ( Frank ) ;
9129: LD_EXP 15
9133: PPUSH
9134: CALL_OW 85
// Say ( Frank , D3a-Frank-1 ) ;
9138: LD_EXP 15
9142: PPUSH
9143: LD_STRING D3a-Frank-1
9145: PPUSH
9146: CALL_OW 88
// ComMoveXY ( ape , 42 , 78 ) ;
9150: LD_VAR 0 2
9154: PPUSH
9155: LD_INT 42
9157: PPUSH
9158: LD_INT 78
9160: PPUSH
9161: CALL_OW 111
// AddComTurnUnit ( ape , Frank ) ;
9165: LD_VAR 0 2
9169: PPUSH
9170: LD_EXP 15
9174: PPUSH
9175: CALL_OW 179
// if Lisa then
9179: LD_EXP 14
9183: IFFALSE 9197
// Say ( Lisa , D3a-Lisa-1 ) ;
9185: LD_EXP 14
9189: PPUSH
9190: LD_STRING D3a-Lisa-1
9192: PPUSH
9193: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
9197: LD_EXP 9
9201: PPUSH
9202: LD_STRING D3a-JMM-1
9204: PPUSH
9205: CALL_OW 88
// if Cyrus then
9209: LD_EXP 13
9213: IFFALSE 9227
// Say ( Cyrus , D3a-Cyrus-1 ) ;
9215: LD_EXP 13
9219: PPUSH
9220: LD_STRING D3a-Cyrus-1
9222: PPUSH
9223: CALL_OW 88
// if GetRandom ( sex_male ) then
9227: LD_INT 1
9229: PPUSH
9230: CALL 608 0 1
9234: IFFALSE 9255
// Say ( GetRandom ( sex_male ) [ 1 ] , D3a-Sol1-1 ) ;
9236: LD_INT 1
9238: PPUSH
9239: CALL 608 0 1
9243: PUSH
9244: LD_INT 1
9246: ARRAY
9247: PPUSH
9248: LD_STRING D3a-Sol1-1
9250: PPUSH
9251: CALL_OW 88
// if GetRandom ( sex_female ) then
9255: LD_INT 2
9257: PPUSH
9258: CALL 608 0 1
9262: IFFALSE 9283
// Say ( GetRandom ( sex_female ) [ 1 ] , D3a-FSol1-1 ) ;
9264: LD_INT 2
9266: PPUSH
9267: CALL 608 0 1
9271: PUSH
9272: LD_INT 1
9274: ARRAY
9275: PPUSH
9276: LD_STRING D3a-FSol1-1
9278: PPUSH
9279: CALL_OW 88
// if Gladstone then
9283: LD_EXP 16
9287: IFFALSE 9301
// Say ( Gladstone , D3a-Glad-1 ) ;
9289: LD_EXP 16
9293: PPUSH
9294: LD_STRING D3a-Glad-1
9296: PPUSH
9297: CALL_OW 88
// ComMoveXY ( ape , 60 , 113 ) ;
9301: LD_VAR 0 2
9305: PPUSH
9306: LD_INT 60
9308: PPUSH
9309: LD_INT 113
9311: PPUSH
9312: CALL_OW 111
// Say ( Frank , D3a-Frank-2 ) ;
9316: LD_EXP 15
9320: PPUSH
9321: LD_STRING D3a-Frank-2
9323: PPUSH
9324: CALL_OW 88
// ComTurnUnit ( Frank , JMM ) ;
9328: LD_EXP 15
9332: PPUSH
9333: LD_EXP 9
9337: PPUSH
9338: CALL_OW 119
// Say ( JMM , D3a-JMM-2 ) ;
9342: LD_EXP 9
9346: PPUSH
9347: LD_STRING D3a-JMM-2
9349: PPUSH
9350: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9354: LD_INT 1
9356: PPUSH
9357: LD_INT 4
9359: PPUSH
9360: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9364: LD_INT 85
9366: PPUSH
9367: LD_INT 134
9369: PPUSH
9370: CALL_OW 84
// Say ( Frank , D3a-Frank-3 ) ;
9374: LD_EXP 15
9378: PPUSH
9379: LD_STRING D3a-Frank-3
9381: PPUSH
9382: CALL_OW 88
// Wait ( 0 0$01 ) ;
9386: LD_INT 35
9388: PPUSH
9389: CALL_OW 67
// CenterOnXY ( 166 , 136 ) ;
9393: LD_INT 166
9395: PPUSH
9396: LD_INT 136
9398: PPUSH
9399: CALL_OW 84
// Say ( JMM , D3a-JMM-3 ) ;
9403: LD_EXP 9
9407: PPUSH
9408: LD_STRING D3a-JMM-3
9410: PPUSH
9411: CALL_OW 88
// Wait ( 0 0$01 ) ;
9415: LD_INT 35
9417: PPUSH
9418: CALL_OW 67
// CenterNowOnUnits ( Frank ) ;
9422: LD_EXP 15
9426: PPUSH
9427: CALL_OW 87
// Say ( Frank , D3a-Frank-4 ) ;
9431: LD_EXP 15
9435: PPUSH
9436: LD_STRING D3a-Frank-4
9438: PPUSH
9439: CALL_OW 88
// if Lisa then
9443: LD_EXP 14
9447: IFFALSE 9461
// Say ( Lisa , D3a-Lisa-4 ) ;
9449: LD_EXP 14
9453: PPUSH
9454: LD_STRING D3a-Lisa-4
9456: PPUSH
9457: CALL_OW 88
// Say ( JMM , D3a-JMM-4 ) ;
9461: LD_EXP 9
9465: PPUSH
9466: LD_STRING D3a-JMM-4
9468: PPUSH
9469: CALL_OW 88
// Say ( Frank , D3a-Frank-5 ) ;
9473: LD_EXP 15
9477: PPUSH
9478: LD_STRING D3a-Frank-5
9480: PPUSH
9481: CALL_OW 88
// Say ( JMM , D3a-JMM-5 ) ;
9485: LD_EXP 9
9489: PPUSH
9490: LD_STRING D3a-JMM-5
9492: PPUSH
9493: CALL_OW 88
// Say ( Frank , D3a-Frank-6 ) ;
9497: LD_EXP 15
9501: PPUSH
9502: LD_STRING D3a-Frank-6
9504: PPUSH
9505: CALL_OW 88
// Say ( JMM , D3a-JMM-6 ) ;
9509: LD_EXP 9
9513: PPUSH
9514: LD_STRING D3a-JMM-6
9516: PPUSH
9517: CALL_OW 88
// Say ( Frank , D3a-Frank-7 ) ;
9521: LD_EXP 15
9525: PPUSH
9526: LD_STRING D3a-Frank-7
9528: PPUSH
9529: CALL_OW 88
// InGameOff ;
9533: CALL_OW 9
// end ;
9537: PPOPN 2
9539: END
// every 0 0$1 trigger Kikuchi and not Frank and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Kikuchi , 7 ] ] ) and IsOk ( Kikuchi ) and not InBattle ( 1 ) and not InBattle ( 4 ) do
9540: LD_EXP 18
9544: PUSH
9545: LD_EXP 15
9549: NOT
9550: AND
9551: PUSH
9552: LD_INT 22
9554: PUSH
9555: LD_INT 1
9557: PUSH
9558: EMPTY
9559: LIST
9560: LIST
9561: PUSH
9562: LD_INT 91
9564: PUSH
9565: LD_EXP 18
9569: PUSH
9570: LD_INT 7
9572: PUSH
9573: EMPTY
9574: LIST
9575: LIST
9576: LIST
9577: PUSH
9578: EMPTY
9579: LIST
9580: LIST
9581: PPUSH
9582: CALL_OW 69
9586: AND
9587: PUSH
9588: LD_EXP 18
9592: PPUSH
9593: CALL_OW 302
9597: AND
9598: PUSH
9599: LD_INT 1
9601: PPUSH
9602: CALL_OW 463
9606: NOT
9607: AND
9608: PUSH
9609: LD_INT 4
9611: PPUSH
9612: CALL_OW 463
9616: NOT
9617: AND
9618: IFFALSE 9798
9620: GO 9622
9622: DISABLE
// begin InGameOn ;
9623: CALL_OW 8
// ComTurnUnit ( JMM , Kikuchi ) ;
9627: LD_EXP 9
9631: PPUSH
9632: LD_EXP 18
9636: PPUSH
9637: CALL_OW 119
// ComTurnUnit ( Kikuchi , JMM ) ;
9641: LD_EXP 18
9645: PPUSH
9646: LD_EXP 9
9650: PPUSH
9651: CALL_OW 119
// CenterOnUnits ( Kikuchi ) ;
9655: LD_EXP 18
9659: PPUSH
9660: CALL_OW 85
// Say ( Kikuchi , D3b-Yam-1 ) ;
9664: LD_EXP 18
9668: PPUSH
9669: LD_STRING D3b-Yam-1
9671: PPUSH
9672: CALL_OW 88
// Say ( JMM , D3b-JMM-1 ) ;
9676: LD_EXP 9
9680: PPUSH
9681: LD_STRING D3b-JMM-1
9683: PPUSH
9684: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9688: LD_INT 1
9690: PPUSH
9691: LD_INT 4
9693: PPUSH
9694: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9698: LD_INT 85
9700: PPUSH
9701: LD_INT 134
9703: PPUSH
9704: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-2 ) ;
9708: LD_EXP 18
9712: PPUSH
9713: LD_STRING D3b-Yam-2
9715: PPUSH
9716: CALL_OW 88
// Wait ( 0 0$01 ) ;
9720: LD_INT 35
9722: PPUSH
9723: CALL_OW 67
// Say ( JMM , D3b-JMM-2 ) ;
9727: LD_EXP 9
9731: PPUSH
9732: LD_STRING D3b-JMM-2
9734: PPUSH
9735: CALL_OW 88
// CenterOnXY ( 166 , 136 ) ;
9739: LD_INT 166
9741: PPUSH
9742: LD_INT 136
9744: PPUSH
9745: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-3 ) ;
9749: LD_EXP 18
9753: PPUSH
9754: LD_STRING D3b-Yam-3
9756: PPUSH
9757: CALL_OW 88
// CenterNowOnUnits ( JMM ) ;
9761: LD_EXP 9
9765: PPUSH
9766: CALL_OW 87
// Say ( JMM , D3b-JMM-3a ) ;
9770: LD_EXP 9
9774: PPUSH
9775: LD_STRING D3b-JMM-3a
9777: PPUSH
9778: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
9782: LD_EXP 18
9786: PPUSH
9787: LD_INT 1
9789: PPUSH
9790: CALL_OW 235
// InGameOff ;
9794: CALL_OW 9
// end ;
9798: END
// every 0 0$1 trigger FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var un , x , tw , i ;
9799: LD_INT 7
9801: PPUSH
9802: LD_INT 22
9804: PUSH
9805: LD_INT 1
9807: PUSH
9808: EMPTY
9809: LIST
9810: LIST
9811: PUSH
9812: LD_INT 3
9814: PUSH
9815: LD_INT 24
9817: PUSH
9818: LD_INT 1000
9820: PUSH
9821: EMPTY
9822: LIST
9823: LIST
9824: PUSH
9825: EMPTY
9826: LIST
9827: LIST
9828: PUSH
9829: EMPTY
9830: LIST
9831: LIST
9832: PPUSH
9833: CALL_OW 70
9837: IFFALSE 10293
9839: GO 9841
9841: DISABLE
9842: LD_INT 0
9844: PPUSH
9845: PPUSH
9846: PPUSH
9847: PPUSH
// begin repeat wait ( 0 0$1 ) ;
9848: LD_INT 35
9850: PPUSH
9851: CALL_OW 67
// un := FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
9855: LD_ADDR_VAR 0 1
9859: PUSH
9860: LD_INT 7
9862: PPUSH
9863: LD_INT 22
9865: PUSH
9866: LD_INT 1
9868: PUSH
9869: EMPTY
9870: LIST
9871: LIST
9872: PUSH
9873: LD_INT 3
9875: PUSH
9876: LD_INT 24
9878: PUSH
9879: LD_INT 1000
9881: PUSH
9882: EMPTY
9883: LIST
9884: LIST
9885: PUSH
9886: EMPTY
9887: LIST
9888: LIST
9889: PUSH
9890: EMPTY
9891: LIST
9892: LIST
9893: PPUSH
9894: CALL_OW 70
9898: ST_TO_ADDR
// if not un then
9899: LD_VAR 0 1
9903: NOT
9904: IFFALSE 9908
// continue ;
9906: GO 9848
// tw := NearbyTowerHasEnergy ( un [ 1 ] ) ;
9908: LD_ADDR_VAR 0 3
9912: PUSH
9913: LD_VAR 0 1
9917: PUSH
9918: LD_INT 1
9920: ARRAY
9921: PPUSH
9922: CALL 2053 0 1
9926: ST_TO_ADDR
// until tw ;
9927: LD_VAR 0 3
9931: IFFALSE 9848
// DialogueOn ;
9933: CALL_OW 6
// CenterNowOnUnits ( tw ) ;
9937: LD_VAR 0 3
9941: PPUSH
9942: CALL_OW 87
// if Lisa then
9946: LD_EXP 14
9950: IFFALSE 9978
// begin Say ( Lisa , D5-Lisa-1 ) ;
9952: LD_EXP 14
9956: PPUSH
9957: LD_STRING D5-Lisa-1
9959: PPUSH
9960: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
9964: LD_EXP 9
9968: PPUSH
9969: LD_STRING D5-JMM-1a
9971: PPUSH
9972: CALL_OW 88
// end else
9976: GO 9990
// Say ( JMM , D5-JMM-1 ) ;
9978: LD_EXP 9
9982: PPUSH
9983: LD_STRING D5-JMM-1
9985: PPUSH
9986: CALL_OW 88
// DialogueOff ;
9990: CALL_OW 7
// while ( true ) do
9994: LD_INT 1
9996: IFFALSE 10052
// begin wait ( 0 0$01 ) ;
9998: LD_INT 35
10000: PPUSH
10001: CALL_OW 67
// x := FilterUnitsExceptArea ( northElectro , [ [ f_btype , b_oil_power ] , [ f_see , 1 ] ] ) ;
10005: LD_ADDR_VAR 0 2
10009: PUSH
10010: LD_INT 8
10012: PPUSH
10013: LD_INT 30
10015: PUSH
10016: LD_INT 26
10018: PUSH
10019: EMPTY
10020: LIST
10021: LIST
10022: PUSH
10023: LD_INT 101
10025: PUSH
10026: LD_INT 1
10028: PUSH
10029: EMPTY
10030: LIST
10031: LIST
10032: PUSH
10033: EMPTY
10034: LIST
10035: LIST
10036: PPUSH
10037: CALL_OW 71
10041: ST_TO_ADDR
// if x then
10042: LD_VAR 0 2
10046: IFFALSE 10050
// break ;
10048: GO 10052
// end ;
10050: GO 9994
// CenterOnUnits ( x [ 1 ] ) ;
10052: LD_VAR 0 2
10056: PUSH
10057: LD_INT 1
10059: ARRAY
10060: PPUSH
10061: CALL_OW 85
// if Frank and GetSide ( Frank ) = 1 then
10065: LD_EXP 15
10069: PUSH
10070: LD_EXP 15
10074: PPUSH
10075: CALL_OW 255
10079: PUSH
10080: LD_INT 1
10082: EQUAL
10083: AND
10084: IFFALSE 10100
// Say ( Frank , D5a-Frank-1 ) else
10086: LD_EXP 15
10090: PPUSH
10091: LD_STRING D5a-Frank-1
10093: PPUSH
10094: CALL_OW 88
10098: GO 10154
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
10100: LD_EXP 18
10104: PUSH
10105: LD_EXP 18
10109: PPUSH
10110: CALL_OW 255
10114: PUSH
10115: LD_INT 1
10117: EQUAL
10118: AND
10119: IFFALSE 10135
// Say ( Kikuchi , D5a-Yam-1 ) else
10121: LD_EXP 18
10125: PPUSH
10126: LD_STRING D5a-Yam-1
10128: PPUSH
10129: CALL_OW 88
10133: GO 10154
// Say ( GetRandom ( sex_male ) [ 1 ] , D5a-Sol1-1 ) ;
10135: LD_INT 1
10137: PPUSH
10138: CALL 608 0 1
10142: PUSH
10143: LD_INT 1
10145: ARRAY
10146: PPUSH
10147: LD_STRING D5a-Sol1-1
10149: PPUSH
10150: CALL_OW 88
// Say ( JMM , D5a-JMM-1 ) ;
10154: LD_EXP 9
10158: PPUSH
10159: LD_STRING D5a-JMM-1
10161: PPUSH
10162: CALL_OW 88
// if Cyrus then
10166: LD_EXP 13
10170: IFFALSE 10184
// Say ( Cyrus , D5a-Cyrus-1 ) ;
10172: LD_EXP 13
10176: PPUSH
10177: LD_STRING D5a-Cyrus-1
10179: PPUSH
10180: CALL_OW 88
// x := false ;
10184: LD_ADDR_VAR 0 2
10188: PUSH
10189: LD_INT 0
10191: ST_TO_ADDR
// while ( true ) do
10192: LD_INT 1
10194: IFFALSE 10281
// begin wait ( 0 0$01 ) ;
10196: LD_INT 35
10198: PPUSH
10199: CALL_OW 67
// for i in FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) diff ru_dep_west do
10203: LD_ADDR_VAR 0 4
10207: PUSH
10208: LD_INT 2
10210: PUSH
10211: LD_INT 30
10213: PUSH
10214: LD_INT 0
10216: PUSH
10217: EMPTY
10218: LIST
10219: LIST
10220: PUSH
10221: LD_INT 30
10223: PUSH
10224: LD_INT 1
10226: PUSH
10227: EMPTY
10228: LIST
10229: LIST
10230: PUSH
10231: EMPTY
10232: LIST
10233: LIST
10234: LIST
10235: PPUSH
10236: CALL_OW 69
10240: PUSH
10241: LD_INT 1
10243: DIFF
10244: PUSH
10245: FOR_IN
10246: IFFALSE 10269
// if BaseNeedEnergy ( i ) then
10248: LD_VAR 0 4
10252: PPUSH
10253: CALL 1178 0 1
10257: IFFALSE 10267
// x := true ;
10259: LD_ADDR_VAR 0 2
10263: PUSH
10264: LD_INT 1
10266: ST_TO_ADDR
10267: GO 10245
10269: POP
10270: POP
// if x then
10271: LD_VAR 0 2
10275: IFFALSE 10279
// break ;
10277: GO 10281
// end ;
10279: GO 10192
// Say ( JMM , D5b-JMM-1 ) ;
10281: LD_EXP 9
10285: PPUSH
10286: LD_STRING D5b-JMM-1
10288: PPUSH
10289: CALL_OW 88
// end ;
10293: PPOPN 4
10295: END
// every 0 0$1 trigger time_to_end [ 1 ] < tick or FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) < 10 do
10296: LD_EXP 5
10300: PUSH
10301: LD_INT 1
10303: ARRAY
10304: PUSH
10305: LD_OWVAR 1
10309: LESS
10310: PUSH
10311: LD_INT 22
10313: PUSH
10314: LD_INT 3
10316: PUSH
10317: EMPTY
10318: LIST
10319: LIST
10320: PUSH
10321: LD_INT 21
10323: PUSH
10324: LD_INT 3
10326: PUSH
10327: EMPTY
10328: LIST
10329: LIST
10330: PUSH
10331: EMPTY
10332: LIST
10333: LIST
10334: PPUSH
10335: CALL_OW 69
10339: PUSH
10340: LD_INT 10
10342: LESS
10343: OR
10344: IFFALSE 10544
10346: GO 10348
10348: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10349: LD_INT 16
10351: PPUSH
10352: CALL_OW 301
10356: NOT
10357: IFFALSE 10380
// begin SayRadio ( Harisson , D3b-Har-3 ) ;
10359: LD_EXP 19
10363: PPUSH
10364: LD_STRING D3b-Har-3
10366: PPUSH
10367: CALL_OW 94
// ChangeMissionObjectives ( M2a ) ;
10371: LD_STRING M2a
10373: PPUSH
10374: CALL_OW 337
// end else
10378: GO 10399
// begin SayRadio ( Harisson , D3b-Har-3a ) ;
10380: LD_EXP 19
10384: PPUSH
10385: LD_STRING D3b-Har-3a
10387: PPUSH
10388: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
10392: LD_STRING M2
10394: PPUSH
10395: CALL_OW 337
// end ; can_end := true ;
10399: LD_ADDR_EXP 6
10403: PUSH
10404: LD_INT 1
10406: ST_TO_ADDR
// SetAreaMapShow ( endArea , 1 ) ;
10407: LD_INT 9
10409: PPUSH
10410: LD_INT 1
10412: PPUSH
10413: CALL_OW 424
// Wait ( 0 0$02 ) ;
10417: LD_INT 70
10419: PPUSH
10420: CALL_OW 67
// if Lisa then
10424: LD_EXP 14
10428: IFFALSE 10442
// Say ( Lisa , D3b-Lisa ) ;
10430: LD_EXP 14
10434: PPUSH
10435: LD_STRING D3b-Lisa
10437: PPUSH
10438: CALL_OW 88
// if Bobby then
10442: LD_EXP 12
10446: IFFALSE 10460
// Say ( Bobby , D3b-Bobby-3 ) ;
10448: LD_EXP 12
10452: PPUSH
10453: LD_STRING D3b-Bobby-3
10455: PPUSH
10456: CALL_OW 88
// if Cyrus then
10460: LD_EXP 13
10464: IFFALSE 10478
// Say ( Cyrus , D3b-Cyrus-3 ) ;
10466: LD_EXP 13
10470: PPUSH
10471: LD_STRING D3b-Cyrus-3
10473: PPUSH
10474: CALL_OW 88
// if Frank and GetSide ( Frank ) = 1 then
10478: LD_EXP 15
10482: PUSH
10483: LD_EXP 15
10487: PPUSH
10488: CALL_OW 255
10492: PUSH
10493: LD_INT 1
10495: EQUAL
10496: AND
10497: IFFALSE 10511
// Say ( Frank , D3b-Frank-3 ) ;
10499: LD_EXP 15
10503: PPUSH
10504: LD_STRING D3b-Frank-3
10506: PPUSH
10507: CALL_OW 88
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
10511: LD_EXP 18
10515: PUSH
10516: LD_EXP 18
10520: PPUSH
10521: CALL_OW 255
10525: PUSH
10526: LD_INT 1
10528: EQUAL
10529: AND
10530: IFFALSE 10544
// Say ( Kikuchi , D3b-Yam-4 ) ;
10532: LD_EXP 18
10536: PPUSH
10537: LD_STRING D3b-Yam-4
10539: PPUSH
10540: CALL_OW 88
// end ;
10544: END
// every 0 0$1 trigger time_to_end [ 2 ] < tick do
10545: LD_EXP 5
10549: PUSH
10550: LD_INT 2
10552: ARRAY
10553: PUSH
10554: LD_OWVAR 1
10558: LESS
10559: IFFALSE 10591
10561: GO 10563
10563: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
10564: LD_EXP 19
10568: PPUSH
10569: LD_STRING D4-Har-1
10571: PPUSH
10572: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
10576: LD_STRING M3
10578: PPUSH
10579: CALL_OW 337
// must_end := true ;
10583: LD_ADDR_EXP 7
10587: PUSH
10588: LD_INT 1
10590: ST_TO_ADDR
// end ;
10591: END
// every 0 0$01 trigger time_to_end [ 3 ] < tick do
10592: LD_EXP 5
10596: PUSH
10597: LD_INT 3
10599: ARRAY
10600: PUSH
10601: LD_OWVAR 1
10605: LESS
10606: IFFALSE 10637
10608: GO 10610
10610: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10611: LD_INT 16
10613: PPUSH
10614: CALL_OW 301
10618: NOT
10619: IFFALSE 10630
// YouLost ( TimeOut1 ) else
10621: LD_STRING TimeOut1
10623: PPUSH
10624: CALL_OW 104
10628: GO 10637
// YouLost ( TimeOut2 ) ;
10630: LD_STRING TimeOut2
10632: PPUSH
10633: CALL_OW 104
// end ;
10637: END
// every 0 0$1 trigger IsInArea ( JMM , endArea ) and can_end do var wait_on , i , tmp , m1 , m2 , m3 ;
10638: LD_EXP 9
10642: PPUSH
10643: LD_INT 9
10645: PPUSH
10646: CALL_OW 308
10650: PUSH
10651: LD_EXP 6
10655: AND
10656: IFFALSE 11737
10658: GO 10660
10660: DISABLE
10661: LD_INT 0
10663: PPUSH
10664: PPUSH
10665: PPUSH
10666: PPUSH
10667: PPUSH
10668: PPUSH
// begin wait_on := false ;
10669: LD_ADDR_VAR 0 1
10673: PUSH
10674: LD_INT 0
10676: ST_TO_ADDR
// if Count ( FilterPeople ( 1 ) ) > Count ( FilterPeopleArea ( 1 , endArea ) ^ FilterDriversArea ( 1 , endArea ) ) then
10677: LD_INT 1
10679: PPUSH
10680: CALL 1255 0 1
10684: PPUSH
10685: CALL 34432 0 1
10689: PUSH
10690: LD_INT 1
10692: PPUSH
10693: LD_INT 9
10695: PPUSH
10696: CALL 1346 0 2
10700: PUSH
10701: LD_INT 1
10703: PPUSH
10704: LD_INT 9
10706: PPUSH
10707: CALL 1393 0 2
10711: ADD
10712: PPUSH
10713: CALL 34432 0 1
10717: GREATER
10718: IFFALSE 10741
// if Query ( Q1 ) = 1 then
10720: LD_STRING Q1
10722: PPUSH
10723: CALL_OW 97
10727: PUSH
10728: LD_INT 1
10730: EQUAL
10731: IFFALSE 10741
// wait_on := true ;
10733: LD_ADDR_VAR 0 1
10737: PUSH
10738: LD_INT 1
10740: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
10741: LD_INT 35
10743: PPUSH
10744: CALL_OW 67
// until Count ( FilterPeople ( 1 ) ) = Count ( FilterPeopleArea ( 1 , endArea ) union FilterDriversArea ( 1 , endArea ) ) ;
10748: LD_INT 1
10750: PPUSH
10751: CALL 1255 0 1
10755: PPUSH
10756: CALL 34432 0 1
10760: PUSH
10761: LD_INT 1
10763: PPUSH
10764: LD_INT 9
10766: PPUSH
10767: CALL 1346 0 2
10771: PUSH
10772: LD_INT 1
10774: PPUSH
10775: LD_INT 9
10777: PPUSH
10778: CALL 1393 0 2
10782: UNION
10783: PPUSH
10784: CALL 34432 0 1
10788: EQUAL
10789: IFFALSE 10741
// DialogueOn ;
10791: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
10795: LD_EXP 9
10799: PPUSH
10800: CALL_OW 87
// Say ( JMM , D6-JMM-1 ) ;
10804: LD_EXP 9
10808: PPUSH
10809: LD_STRING D6-JMM-1
10811: PPUSH
10812: CALL_OW 88
// SayRadio ( Harisson , D6-Har-1 ) ;
10816: LD_EXP 19
10820: PPUSH
10821: LD_STRING D6-Har-1
10823: PPUSH
10824: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
10828: LD_EXP 9
10832: PPUSH
10833: LD_STRING D6-JMM-2
10835: PPUSH
10836: CALL_OW 88
// SayRadio ( Harisson , D6-Har-2 ) ;
10840: LD_EXP 19
10844: PPUSH
10845: LD_STRING D6-Har-2
10847: PPUSH
10848: CALL_OW 94
// Say ( JMM , D6-JMM-3 ) ;
10852: LD_EXP 9
10856: PPUSH
10857: LD_STRING D6-JMM-3
10859: PPUSH
10860: CALL_OW 88
// SayRadio ( Harisson , D6-Har-3 ) ;
10864: LD_EXP 19
10868: PPUSH
10869: LD_STRING D6-Har-3
10871: PPUSH
10872: CALL_OW 94
// Say ( JMM , D6-JMM-4 ) ;
10876: LD_EXP 9
10880: PPUSH
10881: LD_STRING D6-JMM-4
10883: PPUSH
10884: CALL_OW 88
// SayRadio ( Harisson , D6-Har-4 ) ;
10888: LD_EXP 19
10892: PPUSH
10893: LD_STRING D6-Har-4
10895: PPUSH
10896: CALL_OW 94
// Say ( JMM , D6-JMM-5 ) ;
10900: LD_EXP 9
10904: PPUSH
10905: LD_STRING D6-JMM-5
10907: PPUSH
10908: CALL_OW 88
// DialogueOff ;
10912: CALL_OW 7
// m1 := false ;
10916: LD_ADDR_VAR 0 4
10920: PUSH
10921: LD_INT 0
10923: ST_TO_ADDR
// m2 := false ;
10924: LD_ADDR_VAR 0 5
10928: PUSH
10929: LD_INT 0
10931: ST_TO_ADDR
// m3 := false ;
10932: LD_ADDR_VAR 0 6
10936: PUSH
10937: LD_INT 0
10939: ST_TO_ADDR
// tmp := FilterBuildings ( 3 ) ;
10940: LD_ADDR_VAR 0 3
10944: PUSH
10945: LD_INT 3
10947: PPUSH
10948: CALL 1524 0 1
10952: ST_TO_ADDR
// if tmp >= 35 then
10953: LD_VAR 0 3
10957: PUSH
10958: LD_INT 35
10960: GREATEREQUAL
10961: IFFALSE 10998
// begin AddMedal ( Destroy1 , - 1 ) ;
10963: LD_STRING Destroy1
10965: PPUSH
10966: LD_INT 1
10968: NEG
10969: PPUSH
10970: CALL_OW 101
// AddMedal ( Destroy2 , - 1 ) ;
10974: LD_STRING Destroy2
10976: PPUSH
10977: LD_INT 1
10979: NEG
10980: PPUSH
10981: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
10985: LD_STRING Destroy3
10987: PPUSH
10988: LD_INT 1
10990: NEG
10991: PPUSH
10992: CALL_OW 101
// end else
10996: GO 11109
// begin AddMedal ( Destroy1 , 1 ) ;
10998: LD_STRING Destroy1
11000: PPUSH
11001: LD_INT 1
11003: PPUSH
11004: CALL_OW 101
// m1 := true ;
11008: LD_ADDR_VAR 0 4
11012: PUSH
11013: LD_INT 1
11015: ST_TO_ADDR
// if tmp >= 25 then
11016: LD_VAR 0 3
11020: PUSH
11021: LD_INT 25
11023: GREATEREQUAL
11024: IFFALSE 11050
// begin AddMedal ( Destroy2 , - 1 ) ;
11026: LD_STRING Destroy2
11028: PPUSH
11029: LD_INT 1
11031: NEG
11032: PPUSH
11033: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
11037: LD_STRING Destroy3
11039: PPUSH
11040: LD_INT 1
11042: NEG
11043: PPUSH
11044: CALL_OW 101
// end else
11048: GO 11109
// begin AddMedal ( Destroy2 , 1 ) ;
11050: LD_STRING Destroy2
11052: PPUSH
11053: LD_INT 1
11055: PPUSH
11056: CALL_OW 101
// m2 := true ;
11060: LD_ADDR_VAR 0 5
11064: PUSH
11065: LD_INT 1
11067: ST_TO_ADDR
// if tmp >= 15 then
11068: LD_VAR 0 3
11072: PUSH
11073: LD_INT 15
11075: GREATEREQUAL
11076: IFFALSE 11091
// AddMedal ( Destroy3 , - 1 ) else
11078: LD_STRING Destroy3
11080: PPUSH
11081: LD_INT 1
11083: NEG
11084: PPUSH
11085: CALL_OW 101
11089: GO 11109
// begin AddMedal ( Destroy3 , 1 ) ;
11091: LD_STRING Destroy3
11093: PPUSH
11094: LD_INT 1
11096: PPUSH
11097: CALL_OW 101
// m3 := true ;
11101: LD_ADDR_VAR 0 6
11105: PUSH
11106: LD_INT 1
11108: ST_TO_ADDR
// end ; end ; end ; if tick <= 32 32$00 then
11109: LD_OWVAR 1
11113: PUSH
11114: LD_INT 67200
11116: LESSEQUAL
11117: IFFALSE 11126
// SetAchievement ( ACH_ASPEED_7 ) ;
11119: LD_STRING ACH_ASPEED_7
11121: PPUSH
11122: CALL_OW 543
// if m1 and m2 and m3 and Difficulty >= 3 then
11126: LD_VAR 0 4
11130: PUSH
11131: LD_VAR 0 5
11135: AND
11136: PUSH
11137: LD_VAR 0 6
11141: AND
11142: PUSH
11143: LD_OWVAR 67
11147: PUSH
11148: LD_INT 3
11150: GREATEREQUAL
11151: AND
11152: IFFALSE 11164
// SetAchievementEX ( ACH_AMER , 7 ) ;
11154: LD_STRING ACH_AMER
11156: PPUSH
11157: LD_INT 7
11159: PPUSH
11160: CALL_OW 564
// GiveMedals ( MAIN ) ;
11164: LD_STRING MAIN
11166: PPUSH
11167: CALL_OW 102
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] ] ) ;
11171: LD_ADDR_VAR 0 3
11175: PUSH
11176: LD_INT 22
11178: PUSH
11179: LD_INT 1
11181: PUSH
11182: EMPTY
11183: LIST
11184: LIST
11185: PUSH
11186: LD_INT 23
11188: PUSH
11189: LD_INT 1
11191: PUSH
11192: EMPTY
11193: LIST
11194: LIST
11195: PUSH
11196: EMPTY
11197: LIST
11198: LIST
11199: PPUSH
11200: CALL_OW 69
11204: ST_TO_ADDR
// RewardPeople ( tmp ) ;
11205: LD_VAR 0 3
11209: PPUSH
11210: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
11214: LD_EXP 9
11218: PPUSH
11219: LD_EXP 3
11223: PUSH
11224: LD_STRING JMM
11226: STR
11227: PPUSH
11228: CALL_OW 38
// if Brown in tmp then
11232: LD_EXP 10
11236: PUSH
11237: LD_VAR 0 3
11241: IN
11242: IFFALSE 11262
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
11244: LD_EXP 10
11248: PPUSH
11249: LD_EXP 3
11253: PUSH
11254: LD_STRING Brown
11256: STR
11257: PPUSH
11258: CALL_OW 38
// if Donaldson in tmp then
11262: LD_EXP 11
11266: PUSH
11267: LD_VAR 0 3
11271: IN
11272: IFFALSE 11292
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
11274: LD_EXP 11
11278: PPUSH
11279: LD_EXP 3
11283: PUSH
11284: LD_STRING Donaldson
11286: STR
11287: PPUSH
11288: CALL_OW 38
// if Bobby in tmp then
11292: LD_EXP 12
11296: PUSH
11297: LD_VAR 0 3
11301: IN
11302: IFFALSE 11322
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
11304: LD_EXP 12
11308: PPUSH
11309: LD_EXP 3
11313: PUSH
11314: LD_STRING Bobby
11316: STR
11317: PPUSH
11318: CALL_OW 38
// if Cyrus in tmp then
11322: LD_EXP 13
11326: PUSH
11327: LD_VAR 0 3
11331: IN
11332: IFFALSE 11352
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
11334: LD_EXP 13
11338: PPUSH
11339: LD_EXP 3
11343: PUSH
11344: LD_STRING Cyrus
11346: STR
11347: PPUSH
11348: CALL_OW 38
// if Lisa in tmp then
11352: LD_EXP 14
11356: PUSH
11357: LD_VAR 0 3
11361: IN
11362: IFFALSE 11382
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
11364: LD_EXP 14
11368: PPUSH
11369: LD_EXP 3
11373: PUSH
11374: LD_STRING Lisa
11376: STR
11377: PPUSH
11378: CALL_OW 38
// if Frank in tmp then
11382: LD_EXP 15
11386: PUSH
11387: LD_VAR 0 3
11391: IN
11392: IFFALSE 11412
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
11394: LD_EXP 15
11398: PPUSH
11399: LD_EXP 3
11403: PUSH
11404: LD_STRING Frank
11406: STR
11407: PPUSH
11408: CALL_OW 38
// if Gladstone in tmp then
11412: LD_EXP 16
11416: PUSH
11417: LD_VAR 0 3
11421: IN
11422: IFFALSE 11442
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
11424: LD_EXP 16
11428: PPUSH
11429: LD_EXP 3
11433: PUSH
11434: LD_STRING Gladstone
11436: STR
11437: PPUSH
11438: CALL_OW 38
// if Khatam in tmp then
11442: LD_EXP 17
11446: PUSH
11447: LD_VAR 0 3
11451: IN
11452: IFFALSE 11472
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
11454: LD_EXP 17
11458: PPUSH
11459: LD_EXP 3
11463: PUSH
11464: LD_STRING Khatam
11466: STR
11467: PPUSH
11468: CALL_OW 38
// if Kikuchi in tmp then
11472: LD_EXP 18
11476: PUSH
11477: LD_VAR 0 3
11481: IN
11482: IFFALSE 11502
// SaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
11484: LD_EXP 18
11488: PPUSH
11489: LD_EXP 3
11493: PUSH
11494: LD_STRING Kikuchi
11496: STR
11497: PPUSH
11498: CALL_OW 38
// SaveCharacters ( tmp diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] , mission_prefix & others ) ;
11502: LD_VAR 0 3
11506: PUSH
11507: LD_EXP 9
11511: PUSH
11512: LD_EXP 10
11516: PUSH
11517: LD_EXP 11
11521: PUSH
11522: LD_EXP 12
11526: PUSH
11527: LD_EXP 13
11531: PUSH
11532: LD_EXP 14
11536: PUSH
11537: LD_EXP 15
11541: PUSH
11542: LD_EXP 16
11546: PUSH
11547: LD_EXP 18
11551: PUSH
11552: LD_EXP 17
11556: PUSH
11557: EMPTY
11558: LIST
11559: LIST
11560: LIST
11561: LIST
11562: LIST
11563: LIST
11564: LIST
11565: LIST
11566: LIST
11567: LIST
11568: DIFF
11569: PPUSH
11570: LD_EXP 3
11574: PUSH
11575: LD_STRING others
11577: STR
11578: PPUSH
11579: CALL_OW 38
// SaveVariable ( tick , 07_time ) ;
11583: LD_OWVAR 1
11587: PPUSH
11588: LD_STRING 07_time
11590: PPUSH
11591: CALL_OW 39
// tmp := [ ] ;
11595: LD_ADDR_VAR 0 3
11599: PUSH
11600: EMPTY
11601: ST_TO_ADDR
// for i in FilterUnitsInArea ( endArea , [ [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] ] ] ) do
11602: LD_ADDR_VAR 0 2
11606: PUSH
11607: LD_INT 9
11609: PPUSH
11610: LD_INT 22
11612: PUSH
11613: LD_INT 1
11615: PUSH
11616: EMPTY
11617: LIST
11618: LIST
11619: PUSH
11620: LD_INT 23
11622: PUSH
11623: LD_INT 1
11625: PUSH
11626: EMPTY
11627: LIST
11628: LIST
11629: PUSH
11630: LD_INT 21
11632: PUSH
11633: LD_INT 2
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: PUSH
11640: EMPTY
11641: LIST
11642: LIST
11643: LIST
11644: PUSH
11645: EMPTY
11646: LIST
11647: PPUSH
11648: CALL_OW 70
11652: PUSH
11653: FOR_IN
11654: IFFALSE 11719
// tmp := Join ( tmp , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ) ;
11656: LD_ADDR_VAR 0 3
11660: PUSH
11661: LD_VAR 0 3
11665: PPUSH
11666: LD_VAR 0 2
11670: PPUSH
11671: CALL_OW 265
11675: PUSH
11676: LD_VAR 0 2
11680: PPUSH
11681: CALL_OW 262
11685: PUSH
11686: LD_VAR 0 2
11690: PPUSH
11691: CALL_OW 263
11695: PUSH
11696: LD_VAR 0 2
11700: PPUSH
11701: CALL_OW 264
11705: PUSH
11706: EMPTY
11707: LIST
11708: LIST
11709: LIST
11710: LIST
11711: PPUSH
11712: CALL 69798 0 2
11716: ST_TO_ADDR
11717: GO 11653
11719: POP
11720: POP
// SaveVariable ( tmp , 07_vehicles ) ;
11721: LD_VAR 0 3
11725: PPUSH
11726: LD_STRING 07_vehicles
11728: PPUSH
11729: CALL_OW 39
// YouWin ;
11733: CALL_OW 103
// end ; end_of_file
11737: PPOPN 6
11739: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
11740: LD_VAR 0 1
11744: PPUSH
11745: CALL 28041 0 1
// if un = JMM then
11749: LD_VAR 0 1
11753: PUSH
11754: LD_EXP 9
11758: EQUAL
11759: IFFALSE 11768
// YouLost ( JMM ) ;
11761: LD_STRING JMM
11763: PPUSH
11764: CALL_OW 104
// if GetType ( un ) = unit_building then
11768: LD_VAR 0 1
11772: PPUSH
11773: CALL_OW 247
11777: PUSH
11778: LD_INT 3
11780: EQUAL
11781: IFFALSE 11797
// buildings_counter := buildings_counter + 1 ;
11783: LD_ADDR_EXP 4
11787: PUSH
11788: LD_EXP 4
11792: PUSH
11793: LD_INT 1
11795: PLUS
11796: ST_TO_ADDR
// if un in FilterUnitsInArea ( baseArea , [ f_or , [ f_btype , b_turret ] , [ f_btype , b_bunker ] ] ) then
11797: LD_VAR 0 1
11801: PUSH
11802: LD_INT 6
11804: PPUSH
11805: LD_INT 2
11807: PUSH
11808: LD_INT 30
11810: PUSH
11811: LD_INT 33
11813: PUSH
11814: EMPTY
11815: LIST
11816: LIST
11817: PUSH
11818: LD_INT 30
11820: PUSH
11821: LD_INT 32
11823: PUSH
11824: EMPTY
11825: LIST
11826: LIST
11827: PUSH
11828: EMPTY
11829: LIST
11830: LIST
11831: LIST
11832: PPUSH
11833: CALL_OW 70
11837: IN
11838: IFFALSE 11897
// ru_rebuild_list := ru_rebuild_list ^ [ GetBType ( un ) , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ;
11840: LD_ADDR_EXP 20
11844: PUSH
11845: LD_EXP 20
11849: PUSH
11850: LD_VAR 0 1
11854: PPUSH
11855: CALL_OW 266
11859: PUSH
11860: LD_VAR 0 1
11864: PPUSH
11865: CALL_OW 250
11869: PUSH
11870: LD_VAR 0 1
11874: PPUSH
11875: CALL_OW 251
11879: PUSH
11880: LD_VAR 0 1
11884: PPUSH
11885: CALL_OW 254
11889: PUSH
11890: EMPTY
11891: LIST
11892: LIST
11893: LIST
11894: LIST
11895: ADD
11896: ST_TO_ADDR
// if un = ru_dep_main then
11897: LD_VAR 0 1
11901: PUSH
11902: LD_INT 16
11904: EQUAL
11905: IFFALSE 11914
// ChangeMissionObjectives ( M1a ) ;
11907: LD_STRING M1a
11909: PPUSH
11910: CALL_OW 337
// if GetType ( un ) = unit_human and GetSide ( un ) = 3 then
11914: LD_VAR 0 1
11918: PPUSH
11919: CALL_OW 247
11923: PUSH
11924: LD_INT 1
11926: EQUAL
11927: PUSH
11928: LD_VAR 0 1
11932: PPUSH
11933: CALL_OW 255
11937: PUSH
11938: LD_INT 3
11940: EQUAL
11941: AND
11942: IFFALSE 11958
// kill_counter := kill_counter + 1 ;
11944: LD_ADDR_EXP 8
11948: PUSH
11949: LD_EXP 8
11953: PUSH
11954: LD_INT 1
11956: PLUS
11957: ST_TO_ADDR
// end ;
11958: PPOPN 1
11960: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
11961: LD_VAR 0 1
11965: PPUSH
11966: LD_VAR 0 2
11970: PPUSH
11971: CALL 28161 0 2
// end ;
11975: PPOPN 2
11977: END
// on UnitGoesToRed ( un ) do begin if GetBType ( un ) = b_bunker and GetTag ( un ) = 7 then
11978: LD_VAR 0 1
11982: PPUSH
11983: CALL_OW 266
11987: PUSH
11988: LD_INT 32
11990: EQUAL
11991: PUSH
11992: LD_VAR 0 1
11996: PPUSH
11997: CALL_OW 110
12001: PUSH
12002: LD_INT 7
12004: EQUAL
12005: AND
12006: IFFALSE 12020
// SetTag ( un , 0 ) ;
12008: LD_VAR 0 1
12012: PPUSH
12013: LD_INT 0
12015: PPUSH
12016: CALL_OW 109
// end ;
12020: PPOPN 1
12022: END
// on BuildingStarted ( b , builder ) do var i ;
12023: LD_INT 0
12025: PPUSH
// begin if GetSide ( b ) = 3 then
12026: LD_VAR 0 1
12030: PPUSH
12031: CALL_OW 255
12035: PUSH
12036: LD_INT 3
12038: EQUAL
12039: IFFALSE 12079
// for i = 1 to 4 do
12041: LD_ADDR_VAR 0 3
12045: PUSH
12046: DOUBLE
12047: LD_INT 1
12049: DEC
12050: ST_TO_ADDR
12051: LD_INT 4
12053: PUSH
12054: FOR_TO
12055: IFFALSE 12077
// ru_rebuild_list := Delete ( ru_rebuild_list , 1 ) ;
12057: LD_ADDR_EXP 20
12061: PUSH
12062: LD_EXP 20
12066: PPUSH
12067: LD_INT 1
12069: PPUSH
12070: CALL_OW 3
12074: ST_TO_ADDR
12075: GO 12054
12077: POP
12078: POP
// end ;
12079: PPOPN 3
12081: END
// on BuildingComplete ( b ) do if GetBType ( b ) in [ b_bunker , b_turret ] then
12082: LD_VAR 0 1
12086: PPUSH
12087: CALL_OW 266
12091: PUSH
12092: LD_INT 32
12094: PUSH
12095: LD_INT 33
12097: PUSH
12098: EMPTY
12099: LIST
12100: LIST
12101: IN
12102: IFFALSE 12116
// ComPlaceWeapon ( b , ru_gatling_gun ) ;
12104: LD_VAR 0 1
12108: PPUSH
12109: LD_INT 43
12111: PPUSH
12112: CALL_OW 148
12116: PPOPN 1
12118: END
// on LeaveBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
12119: LD_VAR 0 1
12123: PUSH
12124: LD_INT 22
12126: PUSH
12127: LD_INT 3
12129: PUSH
12130: EMPTY
12131: LIST
12132: LIST
12133: PUSH
12134: LD_INT 2
12136: PUSH
12137: LD_INT 30
12139: PUSH
12140: LD_INT 31
12142: PUSH
12143: EMPTY
12144: LIST
12145: LIST
12146: PUSH
12147: LD_INT 30
12149: PUSH
12150: LD_INT 32
12152: PUSH
12153: EMPTY
12154: LIST
12155: LIST
12156: PUSH
12157: EMPTY
12158: LIST
12159: LIST
12160: LIST
12161: PUSH
12162: EMPTY
12163: LIST
12164: LIST
12165: PPUSH
12166: CALL_OW 69
12170: IN
12171: IFFALSE 12193
// GoToAnotherTower ( un , b , 134 , 136 ) ;
12173: LD_VAR 0 2
12177: PPUSH
12178: LD_VAR 0 1
12182: PPUSH
12183: LD_INT 134
12185: PPUSH
12186: LD_INT 136
12188: PPUSH
12189: CALL 838 0 4
// end ;
12193: PPOPN 2
12195: END
// on EnterBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) then
12196: LD_VAR 0 1
12200: PUSH
12201: LD_INT 22
12203: PUSH
12204: LD_INT 3
12206: PUSH
12207: EMPTY
12208: LIST
12209: LIST
12210: PUSH
12211: LD_INT 30
12213: PUSH
12214: LD_INT 32
12216: PUSH
12217: EMPTY
12218: LIST
12219: LIST
12220: PUSH
12221: EMPTY
12222: LIST
12223: LIST
12224: PPUSH
12225: CALL_OW 69
12229: IN
12230: IFFALSE 12244
// SetTag ( b , 0 ) ;
12232: LD_VAR 0 1
12236: PPUSH
12237: LD_INT 0
12239: PPUSH
12240: CALL_OW 109
// end ; end_of_file end_of_file
12244: PPOPN 2
12246: END
// export globalGameSaveCounter ; every 0 0$1 do
12247: GO 12249
12249: DISABLE
// begin enable ;
12250: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
12251: LD_STRING updateTimer(
12253: PUSH
12254: LD_OWVAR 1
12258: STR
12259: PUSH
12260: LD_STRING );
12262: STR
12263: PPUSH
12264: CALL_OW 559
// end ;
12268: END
// every 0 0$1 do
12269: GO 12271
12271: DISABLE
// begin globalGameSaveCounter := 0 ;
12272: LD_ADDR_EXP 21
12276: PUSH
12277: LD_INT 0
12279: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
12280: LD_STRING setGameSaveCounter(0)
12282: PPUSH
12283: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
12287: LD_STRING initStreamRollete();
12289: PPUSH
12290: CALL_OW 559
// InitStreamMode ;
12294: CALL 13620 0 0
// DefineStreamItems ( false ) ;
12298: LD_INT 0
12300: PPUSH
12301: CALL 14084 0 1
// end ;
12305: END
// export function SOS_MapStart ( ) ; begin
12306: LD_INT 0
12308: PPUSH
// if streamModeActive then
12309: LD_EXP 22
12313: IFFALSE 12322
// DefineStreamItems ( true ) ;
12315: LD_INT 1
12317: PPUSH
12318: CALL 14084 0 1
// UpdateLuaVariables ( ) ;
12322: CALL 12339 0 0
// UpdateFactoryWaypoints ( ) ;
12326: CALL 26945 0 0
// UpdateWarehouseGatheringPoints ( ) ;
12330: CALL 27202 0 0
// end ;
12334: LD_VAR 0 1
12338: RET
// function UpdateLuaVariables ( ) ; begin
12339: LD_INT 0
12341: PPUSH
// if globalGameSaveCounter then
12342: LD_EXP 21
12346: IFFALSE 12380
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
12348: LD_ADDR_EXP 21
12352: PUSH
12353: LD_EXP 21
12357: PPUSH
12358: CALL 71159 0 1
12362: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
12363: LD_STRING setGameSaveCounter(
12365: PUSH
12366: LD_EXP 21
12370: STR
12371: PUSH
12372: LD_STRING )
12374: STR
12375: PPUSH
12376: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
12380: LD_STRING setGameDifficulty(
12382: PUSH
12383: LD_OWVAR 67
12387: STR
12388: PUSH
12389: LD_STRING )
12391: STR
12392: PPUSH
12393: CALL_OW 559
// end ;
12397: LD_VAR 0 1
12401: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
12402: LD_INT 0
12404: PPUSH
// if p2 = stream_mode then
12405: LD_VAR 0 2
12409: PUSH
12410: LD_INT 100
12412: EQUAL
12413: IFFALSE 13416
// begin if not StreamModeActive then
12415: LD_EXP 22
12419: NOT
12420: IFFALSE 12430
// StreamModeActive := true ;
12422: LD_ADDR_EXP 22
12426: PUSH
12427: LD_INT 1
12429: ST_TO_ADDR
// if p3 = 0 then
12430: LD_VAR 0 3
12434: PUSH
12435: LD_INT 0
12437: EQUAL
12438: IFFALSE 12444
// InitStreamMode ;
12440: CALL 13620 0 0
// if p3 = 1 then
12444: LD_VAR 0 3
12448: PUSH
12449: LD_INT 1
12451: EQUAL
12452: IFFALSE 12462
// sRocket := true ;
12454: LD_ADDR_EXP 27
12458: PUSH
12459: LD_INT 1
12461: ST_TO_ADDR
// if p3 = 2 then
12462: LD_VAR 0 3
12466: PUSH
12467: LD_INT 2
12469: EQUAL
12470: IFFALSE 12480
// sSpeed := true ;
12472: LD_ADDR_EXP 26
12476: PUSH
12477: LD_INT 1
12479: ST_TO_ADDR
// if p3 = 3 then
12480: LD_VAR 0 3
12484: PUSH
12485: LD_INT 3
12487: EQUAL
12488: IFFALSE 12498
// sEngine := true ;
12490: LD_ADDR_EXP 28
12494: PUSH
12495: LD_INT 1
12497: ST_TO_ADDR
// if p3 = 4 then
12498: LD_VAR 0 3
12502: PUSH
12503: LD_INT 4
12505: EQUAL
12506: IFFALSE 12516
// sSpec := true ;
12508: LD_ADDR_EXP 25
12512: PUSH
12513: LD_INT 1
12515: ST_TO_ADDR
// if p3 = 5 then
12516: LD_VAR 0 3
12520: PUSH
12521: LD_INT 5
12523: EQUAL
12524: IFFALSE 12534
// sLevel := true ;
12526: LD_ADDR_EXP 29
12530: PUSH
12531: LD_INT 1
12533: ST_TO_ADDR
// if p3 = 6 then
12534: LD_VAR 0 3
12538: PUSH
12539: LD_INT 6
12541: EQUAL
12542: IFFALSE 12552
// sArmoury := true ;
12544: LD_ADDR_EXP 30
12548: PUSH
12549: LD_INT 1
12551: ST_TO_ADDR
// if p3 = 7 then
12552: LD_VAR 0 3
12556: PUSH
12557: LD_INT 7
12559: EQUAL
12560: IFFALSE 12570
// sRadar := true ;
12562: LD_ADDR_EXP 31
12566: PUSH
12567: LD_INT 1
12569: ST_TO_ADDR
// if p3 = 8 then
12570: LD_VAR 0 3
12574: PUSH
12575: LD_INT 8
12577: EQUAL
12578: IFFALSE 12588
// sBunker := true ;
12580: LD_ADDR_EXP 32
12584: PUSH
12585: LD_INT 1
12587: ST_TO_ADDR
// if p3 = 9 then
12588: LD_VAR 0 3
12592: PUSH
12593: LD_INT 9
12595: EQUAL
12596: IFFALSE 12606
// sHack := true ;
12598: LD_ADDR_EXP 33
12602: PUSH
12603: LD_INT 1
12605: ST_TO_ADDR
// if p3 = 10 then
12606: LD_VAR 0 3
12610: PUSH
12611: LD_INT 10
12613: EQUAL
12614: IFFALSE 12624
// sFire := true ;
12616: LD_ADDR_EXP 34
12620: PUSH
12621: LD_INT 1
12623: ST_TO_ADDR
// if p3 = 11 then
12624: LD_VAR 0 3
12628: PUSH
12629: LD_INT 11
12631: EQUAL
12632: IFFALSE 12642
// sRefresh := true ;
12634: LD_ADDR_EXP 35
12638: PUSH
12639: LD_INT 1
12641: ST_TO_ADDR
// if p3 = 12 then
12642: LD_VAR 0 3
12646: PUSH
12647: LD_INT 12
12649: EQUAL
12650: IFFALSE 12660
// sExp := true ;
12652: LD_ADDR_EXP 36
12656: PUSH
12657: LD_INT 1
12659: ST_TO_ADDR
// if p3 = 13 then
12660: LD_VAR 0 3
12664: PUSH
12665: LD_INT 13
12667: EQUAL
12668: IFFALSE 12678
// sDepot := true ;
12670: LD_ADDR_EXP 37
12674: PUSH
12675: LD_INT 1
12677: ST_TO_ADDR
// if p3 = 14 then
12678: LD_VAR 0 3
12682: PUSH
12683: LD_INT 14
12685: EQUAL
12686: IFFALSE 12696
// sFlag := true ;
12688: LD_ADDR_EXP 38
12692: PUSH
12693: LD_INT 1
12695: ST_TO_ADDR
// if p3 = 15 then
12696: LD_VAR 0 3
12700: PUSH
12701: LD_INT 15
12703: EQUAL
12704: IFFALSE 12714
// sKamikadze := true ;
12706: LD_ADDR_EXP 46
12710: PUSH
12711: LD_INT 1
12713: ST_TO_ADDR
// if p3 = 16 then
12714: LD_VAR 0 3
12718: PUSH
12719: LD_INT 16
12721: EQUAL
12722: IFFALSE 12732
// sTroll := true ;
12724: LD_ADDR_EXP 47
12728: PUSH
12729: LD_INT 1
12731: ST_TO_ADDR
// if p3 = 17 then
12732: LD_VAR 0 3
12736: PUSH
12737: LD_INT 17
12739: EQUAL
12740: IFFALSE 12750
// sSlow := true ;
12742: LD_ADDR_EXP 48
12746: PUSH
12747: LD_INT 1
12749: ST_TO_ADDR
// if p3 = 18 then
12750: LD_VAR 0 3
12754: PUSH
12755: LD_INT 18
12757: EQUAL
12758: IFFALSE 12768
// sLack := true ;
12760: LD_ADDR_EXP 49
12764: PUSH
12765: LD_INT 1
12767: ST_TO_ADDR
// if p3 = 19 then
12768: LD_VAR 0 3
12772: PUSH
12773: LD_INT 19
12775: EQUAL
12776: IFFALSE 12786
// sTank := true ;
12778: LD_ADDR_EXP 51
12782: PUSH
12783: LD_INT 1
12785: ST_TO_ADDR
// if p3 = 20 then
12786: LD_VAR 0 3
12790: PUSH
12791: LD_INT 20
12793: EQUAL
12794: IFFALSE 12804
// sRemote := true ;
12796: LD_ADDR_EXP 52
12800: PUSH
12801: LD_INT 1
12803: ST_TO_ADDR
// if p3 = 21 then
12804: LD_VAR 0 3
12808: PUSH
12809: LD_INT 21
12811: EQUAL
12812: IFFALSE 12822
// sPowell := true ;
12814: LD_ADDR_EXP 53
12818: PUSH
12819: LD_INT 1
12821: ST_TO_ADDR
// if p3 = 22 then
12822: LD_VAR 0 3
12826: PUSH
12827: LD_INT 22
12829: EQUAL
12830: IFFALSE 12840
// sTeleport := true ;
12832: LD_ADDR_EXP 56
12836: PUSH
12837: LD_INT 1
12839: ST_TO_ADDR
// if p3 = 23 then
12840: LD_VAR 0 3
12844: PUSH
12845: LD_INT 23
12847: EQUAL
12848: IFFALSE 12858
// sOilTower := true ;
12850: LD_ADDR_EXP 58
12854: PUSH
12855: LD_INT 1
12857: ST_TO_ADDR
// if p3 = 24 then
12858: LD_VAR 0 3
12862: PUSH
12863: LD_INT 24
12865: EQUAL
12866: IFFALSE 12876
// sShovel := true ;
12868: LD_ADDR_EXP 59
12872: PUSH
12873: LD_INT 1
12875: ST_TO_ADDR
// if p3 = 25 then
12876: LD_VAR 0 3
12880: PUSH
12881: LD_INT 25
12883: EQUAL
12884: IFFALSE 12894
// sSheik := true ;
12886: LD_ADDR_EXP 60
12890: PUSH
12891: LD_INT 1
12893: ST_TO_ADDR
// if p3 = 26 then
12894: LD_VAR 0 3
12898: PUSH
12899: LD_INT 26
12901: EQUAL
12902: IFFALSE 12912
// sEarthquake := true ;
12904: LD_ADDR_EXP 62
12908: PUSH
12909: LD_INT 1
12911: ST_TO_ADDR
// if p3 = 27 then
12912: LD_VAR 0 3
12916: PUSH
12917: LD_INT 27
12919: EQUAL
12920: IFFALSE 12930
// sAI := true ;
12922: LD_ADDR_EXP 63
12926: PUSH
12927: LD_INT 1
12929: ST_TO_ADDR
// if p3 = 28 then
12930: LD_VAR 0 3
12934: PUSH
12935: LD_INT 28
12937: EQUAL
12938: IFFALSE 12948
// sCargo := true ;
12940: LD_ADDR_EXP 66
12944: PUSH
12945: LD_INT 1
12947: ST_TO_ADDR
// if p3 = 29 then
12948: LD_VAR 0 3
12952: PUSH
12953: LD_INT 29
12955: EQUAL
12956: IFFALSE 12966
// sDLaser := true ;
12958: LD_ADDR_EXP 67
12962: PUSH
12963: LD_INT 1
12965: ST_TO_ADDR
// if p3 = 30 then
12966: LD_VAR 0 3
12970: PUSH
12971: LD_INT 30
12973: EQUAL
12974: IFFALSE 12984
// sExchange := true ;
12976: LD_ADDR_EXP 68
12980: PUSH
12981: LD_INT 1
12983: ST_TO_ADDR
// if p3 = 31 then
12984: LD_VAR 0 3
12988: PUSH
12989: LD_INT 31
12991: EQUAL
12992: IFFALSE 13002
// sFac := true ;
12994: LD_ADDR_EXP 69
12998: PUSH
12999: LD_INT 1
13001: ST_TO_ADDR
// if p3 = 32 then
13002: LD_VAR 0 3
13006: PUSH
13007: LD_INT 32
13009: EQUAL
13010: IFFALSE 13020
// sPower := true ;
13012: LD_ADDR_EXP 70
13016: PUSH
13017: LD_INT 1
13019: ST_TO_ADDR
// if p3 = 33 then
13020: LD_VAR 0 3
13024: PUSH
13025: LD_INT 33
13027: EQUAL
13028: IFFALSE 13038
// sRandom := true ;
13030: LD_ADDR_EXP 71
13034: PUSH
13035: LD_INT 1
13037: ST_TO_ADDR
// if p3 = 34 then
13038: LD_VAR 0 3
13042: PUSH
13043: LD_INT 34
13045: EQUAL
13046: IFFALSE 13056
// sShield := true ;
13048: LD_ADDR_EXP 72
13052: PUSH
13053: LD_INT 1
13055: ST_TO_ADDR
// if p3 = 35 then
13056: LD_VAR 0 3
13060: PUSH
13061: LD_INT 35
13063: EQUAL
13064: IFFALSE 13074
// sTime := true ;
13066: LD_ADDR_EXP 73
13070: PUSH
13071: LD_INT 1
13073: ST_TO_ADDR
// if p3 = 36 then
13074: LD_VAR 0 3
13078: PUSH
13079: LD_INT 36
13081: EQUAL
13082: IFFALSE 13092
// sTools := true ;
13084: LD_ADDR_EXP 74
13088: PUSH
13089: LD_INT 1
13091: ST_TO_ADDR
// if p3 = 101 then
13092: LD_VAR 0 3
13096: PUSH
13097: LD_INT 101
13099: EQUAL
13100: IFFALSE 13110
// sSold := true ;
13102: LD_ADDR_EXP 39
13106: PUSH
13107: LD_INT 1
13109: ST_TO_ADDR
// if p3 = 102 then
13110: LD_VAR 0 3
13114: PUSH
13115: LD_INT 102
13117: EQUAL
13118: IFFALSE 13128
// sDiff := true ;
13120: LD_ADDR_EXP 40
13124: PUSH
13125: LD_INT 1
13127: ST_TO_ADDR
// if p3 = 103 then
13128: LD_VAR 0 3
13132: PUSH
13133: LD_INT 103
13135: EQUAL
13136: IFFALSE 13146
// sFog := true ;
13138: LD_ADDR_EXP 43
13142: PUSH
13143: LD_INT 1
13145: ST_TO_ADDR
// if p3 = 104 then
13146: LD_VAR 0 3
13150: PUSH
13151: LD_INT 104
13153: EQUAL
13154: IFFALSE 13164
// sReset := true ;
13156: LD_ADDR_EXP 44
13160: PUSH
13161: LD_INT 1
13163: ST_TO_ADDR
// if p3 = 105 then
13164: LD_VAR 0 3
13168: PUSH
13169: LD_INT 105
13171: EQUAL
13172: IFFALSE 13182
// sSun := true ;
13174: LD_ADDR_EXP 45
13178: PUSH
13179: LD_INT 1
13181: ST_TO_ADDR
// if p3 = 106 then
13182: LD_VAR 0 3
13186: PUSH
13187: LD_INT 106
13189: EQUAL
13190: IFFALSE 13200
// sTiger := true ;
13192: LD_ADDR_EXP 41
13196: PUSH
13197: LD_INT 1
13199: ST_TO_ADDR
// if p3 = 107 then
13200: LD_VAR 0 3
13204: PUSH
13205: LD_INT 107
13207: EQUAL
13208: IFFALSE 13218
// sBomb := true ;
13210: LD_ADDR_EXP 42
13214: PUSH
13215: LD_INT 1
13217: ST_TO_ADDR
// if p3 = 108 then
13218: LD_VAR 0 3
13222: PUSH
13223: LD_INT 108
13225: EQUAL
13226: IFFALSE 13236
// sWound := true ;
13228: LD_ADDR_EXP 50
13232: PUSH
13233: LD_INT 1
13235: ST_TO_ADDR
// if p3 = 109 then
13236: LD_VAR 0 3
13240: PUSH
13241: LD_INT 109
13243: EQUAL
13244: IFFALSE 13254
// sBetray := true ;
13246: LD_ADDR_EXP 54
13250: PUSH
13251: LD_INT 1
13253: ST_TO_ADDR
// if p3 = 110 then
13254: LD_VAR 0 3
13258: PUSH
13259: LD_INT 110
13261: EQUAL
13262: IFFALSE 13272
// sContamin := true ;
13264: LD_ADDR_EXP 55
13268: PUSH
13269: LD_INT 1
13271: ST_TO_ADDR
// if p3 = 111 then
13272: LD_VAR 0 3
13276: PUSH
13277: LD_INT 111
13279: EQUAL
13280: IFFALSE 13290
// sOil := true ;
13282: LD_ADDR_EXP 57
13286: PUSH
13287: LD_INT 1
13289: ST_TO_ADDR
// if p3 = 112 then
13290: LD_VAR 0 3
13294: PUSH
13295: LD_INT 112
13297: EQUAL
13298: IFFALSE 13308
// sStu := true ;
13300: LD_ADDR_EXP 61
13304: PUSH
13305: LD_INT 1
13307: ST_TO_ADDR
// if p3 = 113 then
13308: LD_VAR 0 3
13312: PUSH
13313: LD_INT 113
13315: EQUAL
13316: IFFALSE 13326
// sBazooka := true ;
13318: LD_ADDR_EXP 64
13322: PUSH
13323: LD_INT 1
13325: ST_TO_ADDR
// if p3 = 114 then
13326: LD_VAR 0 3
13330: PUSH
13331: LD_INT 114
13333: EQUAL
13334: IFFALSE 13344
// sMortar := true ;
13336: LD_ADDR_EXP 65
13340: PUSH
13341: LD_INT 1
13343: ST_TO_ADDR
// if p3 = 115 then
13344: LD_VAR 0 3
13348: PUSH
13349: LD_INT 115
13351: EQUAL
13352: IFFALSE 13362
// sRanger := true ;
13354: LD_ADDR_EXP 75
13358: PUSH
13359: LD_INT 1
13361: ST_TO_ADDR
// if p3 = 116 then
13362: LD_VAR 0 3
13366: PUSH
13367: LD_INT 116
13369: EQUAL
13370: IFFALSE 13380
// sComputer := true ;
13372: LD_ADDR_EXP 76
13376: PUSH
13377: LD_INT 1
13379: ST_TO_ADDR
// if p3 = 117 then
13380: LD_VAR 0 3
13384: PUSH
13385: LD_INT 117
13387: EQUAL
13388: IFFALSE 13398
// s30 := true ;
13390: LD_ADDR_EXP 77
13394: PUSH
13395: LD_INT 1
13397: ST_TO_ADDR
// if p3 = 118 then
13398: LD_VAR 0 3
13402: PUSH
13403: LD_INT 118
13405: EQUAL
13406: IFFALSE 13416
// s60 := true ;
13408: LD_ADDR_EXP 78
13412: PUSH
13413: LD_INT 1
13415: ST_TO_ADDR
// end ; if p2 = hack_mode then
13416: LD_VAR 0 2
13420: PUSH
13421: LD_INT 101
13423: EQUAL
13424: IFFALSE 13552
// begin case p3 of 1 :
13426: LD_VAR 0 3
13430: PUSH
13431: LD_INT 1
13433: DOUBLE
13434: EQUAL
13435: IFTRUE 13439
13437: GO 13446
13439: POP
// hHackUnlimitedResources ; 2 :
13440: CALL 25691 0 0
13444: GO 13552
13446: LD_INT 2
13448: DOUBLE
13449: EQUAL
13450: IFTRUE 13454
13452: GO 13461
13454: POP
// hHackSetLevel10 ; 3 :
13455: CALL 25824 0 0
13459: GO 13552
13461: LD_INT 3
13463: DOUBLE
13464: EQUAL
13465: IFTRUE 13469
13467: GO 13476
13469: POP
// hHackSetLevel10YourUnits ; 4 :
13470: CALL 25909 0 0
13474: GO 13552
13476: LD_INT 4
13478: DOUBLE
13479: EQUAL
13480: IFTRUE 13484
13482: GO 13491
13484: POP
// hHackInvincible ; 5 :
13485: CALL 26357 0 0
13489: GO 13552
13491: LD_INT 5
13493: DOUBLE
13494: EQUAL
13495: IFTRUE 13499
13497: GO 13506
13499: POP
// hHackInvisible ; 6 :
13500: CALL 26468 0 0
13504: GO 13552
13506: LD_INT 6
13508: DOUBLE
13509: EQUAL
13510: IFTRUE 13514
13512: GO 13521
13514: POP
// hHackChangeYourSide ; 7 :
13515: CALL 26525 0 0
13519: GO 13552
13521: LD_INT 7
13523: DOUBLE
13524: EQUAL
13525: IFTRUE 13529
13527: GO 13536
13529: POP
// hHackChangeUnitSide ; 8 :
13530: CALL 26567 0 0
13534: GO 13552
13536: LD_INT 8
13538: DOUBLE
13539: EQUAL
13540: IFTRUE 13544
13542: GO 13551
13544: POP
// hHackFog ; end ;
13545: CALL 26668 0 0
13549: GO 13552
13551: POP
// end ; if p2 = game_save_mode then
13552: LD_VAR 0 2
13556: PUSH
13557: LD_INT 102
13559: EQUAL
13560: IFFALSE 13615
// begin if p3 = 1 then
13562: LD_VAR 0 3
13566: PUSH
13567: LD_INT 1
13569: EQUAL
13570: IFFALSE 13582
// globalGameSaveCounter := p4 ;
13572: LD_ADDR_EXP 21
13576: PUSH
13577: LD_VAR 0 4
13581: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
13582: LD_VAR 0 3
13586: PUSH
13587: LD_INT 2
13589: EQUAL
13590: PUSH
13591: LD_EXP 21
13595: AND
13596: IFFALSE 13615
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
13598: LD_STRING setGameSaveCounter(
13600: PUSH
13601: LD_EXP 21
13605: STR
13606: PUSH
13607: LD_STRING )
13609: STR
13610: PPUSH
13611: CALL_OW 559
// end ; end ;
13615: LD_VAR 0 7
13619: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
13620: LD_INT 0
13622: PPUSH
// streamModeActive := false ;
13623: LD_ADDR_EXP 22
13627: PUSH
13628: LD_INT 0
13630: ST_TO_ADDR
// normalCounter := 36 ;
13631: LD_ADDR_EXP 23
13635: PUSH
13636: LD_INT 36
13638: ST_TO_ADDR
// hardcoreCounter := 18 ;
13639: LD_ADDR_EXP 24
13643: PUSH
13644: LD_INT 18
13646: ST_TO_ADDR
// sRocket := false ;
13647: LD_ADDR_EXP 27
13651: PUSH
13652: LD_INT 0
13654: ST_TO_ADDR
// sSpeed := false ;
13655: LD_ADDR_EXP 26
13659: PUSH
13660: LD_INT 0
13662: ST_TO_ADDR
// sEngine := false ;
13663: LD_ADDR_EXP 28
13667: PUSH
13668: LD_INT 0
13670: ST_TO_ADDR
// sSpec := false ;
13671: LD_ADDR_EXP 25
13675: PUSH
13676: LD_INT 0
13678: ST_TO_ADDR
// sLevel := false ;
13679: LD_ADDR_EXP 29
13683: PUSH
13684: LD_INT 0
13686: ST_TO_ADDR
// sArmoury := false ;
13687: LD_ADDR_EXP 30
13691: PUSH
13692: LD_INT 0
13694: ST_TO_ADDR
// sRadar := false ;
13695: LD_ADDR_EXP 31
13699: PUSH
13700: LD_INT 0
13702: ST_TO_ADDR
// sBunker := false ;
13703: LD_ADDR_EXP 32
13707: PUSH
13708: LD_INT 0
13710: ST_TO_ADDR
// sHack := false ;
13711: LD_ADDR_EXP 33
13715: PUSH
13716: LD_INT 0
13718: ST_TO_ADDR
// sFire := false ;
13719: LD_ADDR_EXP 34
13723: PUSH
13724: LD_INT 0
13726: ST_TO_ADDR
// sRefresh := false ;
13727: LD_ADDR_EXP 35
13731: PUSH
13732: LD_INT 0
13734: ST_TO_ADDR
// sExp := false ;
13735: LD_ADDR_EXP 36
13739: PUSH
13740: LD_INT 0
13742: ST_TO_ADDR
// sDepot := false ;
13743: LD_ADDR_EXP 37
13747: PUSH
13748: LD_INT 0
13750: ST_TO_ADDR
// sFlag := false ;
13751: LD_ADDR_EXP 38
13755: PUSH
13756: LD_INT 0
13758: ST_TO_ADDR
// sKamikadze := false ;
13759: LD_ADDR_EXP 46
13763: PUSH
13764: LD_INT 0
13766: ST_TO_ADDR
// sTroll := false ;
13767: LD_ADDR_EXP 47
13771: PUSH
13772: LD_INT 0
13774: ST_TO_ADDR
// sSlow := false ;
13775: LD_ADDR_EXP 48
13779: PUSH
13780: LD_INT 0
13782: ST_TO_ADDR
// sLack := false ;
13783: LD_ADDR_EXP 49
13787: PUSH
13788: LD_INT 0
13790: ST_TO_ADDR
// sTank := false ;
13791: LD_ADDR_EXP 51
13795: PUSH
13796: LD_INT 0
13798: ST_TO_ADDR
// sRemote := false ;
13799: LD_ADDR_EXP 52
13803: PUSH
13804: LD_INT 0
13806: ST_TO_ADDR
// sPowell := false ;
13807: LD_ADDR_EXP 53
13811: PUSH
13812: LD_INT 0
13814: ST_TO_ADDR
// sTeleport := false ;
13815: LD_ADDR_EXP 56
13819: PUSH
13820: LD_INT 0
13822: ST_TO_ADDR
// sOilTower := false ;
13823: LD_ADDR_EXP 58
13827: PUSH
13828: LD_INT 0
13830: ST_TO_ADDR
// sShovel := false ;
13831: LD_ADDR_EXP 59
13835: PUSH
13836: LD_INT 0
13838: ST_TO_ADDR
// sSheik := false ;
13839: LD_ADDR_EXP 60
13843: PUSH
13844: LD_INT 0
13846: ST_TO_ADDR
// sEarthquake := false ;
13847: LD_ADDR_EXP 62
13851: PUSH
13852: LD_INT 0
13854: ST_TO_ADDR
// sAI := false ;
13855: LD_ADDR_EXP 63
13859: PUSH
13860: LD_INT 0
13862: ST_TO_ADDR
// sCargo := false ;
13863: LD_ADDR_EXP 66
13867: PUSH
13868: LD_INT 0
13870: ST_TO_ADDR
// sDLaser := false ;
13871: LD_ADDR_EXP 67
13875: PUSH
13876: LD_INT 0
13878: ST_TO_ADDR
// sExchange := false ;
13879: LD_ADDR_EXP 68
13883: PUSH
13884: LD_INT 0
13886: ST_TO_ADDR
// sFac := false ;
13887: LD_ADDR_EXP 69
13891: PUSH
13892: LD_INT 0
13894: ST_TO_ADDR
// sPower := false ;
13895: LD_ADDR_EXP 70
13899: PUSH
13900: LD_INT 0
13902: ST_TO_ADDR
// sRandom := false ;
13903: LD_ADDR_EXP 71
13907: PUSH
13908: LD_INT 0
13910: ST_TO_ADDR
// sShield := false ;
13911: LD_ADDR_EXP 72
13915: PUSH
13916: LD_INT 0
13918: ST_TO_ADDR
// sTime := false ;
13919: LD_ADDR_EXP 73
13923: PUSH
13924: LD_INT 0
13926: ST_TO_ADDR
// sTools := false ;
13927: LD_ADDR_EXP 74
13931: PUSH
13932: LD_INT 0
13934: ST_TO_ADDR
// sSold := false ;
13935: LD_ADDR_EXP 39
13939: PUSH
13940: LD_INT 0
13942: ST_TO_ADDR
// sDiff := false ;
13943: LD_ADDR_EXP 40
13947: PUSH
13948: LD_INT 0
13950: ST_TO_ADDR
// sFog := false ;
13951: LD_ADDR_EXP 43
13955: PUSH
13956: LD_INT 0
13958: ST_TO_ADDR
// sReset := false ;
13959: LD_ADDR_EXP 44
13963: PUSH
13964: LD_INT 0
13966: ST_TO_ADDR
// sSun := false ;
13967: LD_ADDR_EXP 45
13971: PUSH
13972: LD_INT 0
13974: ST_TO_ADDR
// sTiger := false ;
13975: LD_ADDR_EXP 41
13979: PUSH
13980: LD_INT 0
13982: ST_TO_ADDR
// sBomb := false ;
13983: LD_ADDR_EXP 42
13987: PUSH
13988: LD_INT 0
13990: ST_TO_ADDR
// sWound := false ;
13991: LD_ADDR_EXP 50
13995: PUSH
13996: LD_INT 0
13998: ST_TO_ADDR
// sBetray := false ;
13999: LD_ADDR_EXP 54
14003: PUSH
14004: LD_INT 0
14006: ST_TO_ADDR
// sContamin := false ;
14007: LD_ADDR_EXP 55
14011: PUSH
14012: LD_INT 0
14014: ST_TO_ADDR
// sOil := false ;
14015: LD_ADDR_EXP 57
14019: PUSH
14020: LD_INT 0
14022: ST_TO_ADDR
// sStu := false ;
14023: LD_ADDR_EXP 61
14027: PUSH
14028: LD_INT 0
14030: ST_TO_ADDR
// sBazooka := false ;
14031: LD_ADDR_EXP 64
14035: PUSH
14036: LD_INT 0
14038: ST_TO_ADDR
// sMortar := false ;
14039: LD_ADDR_EXP 65
14043: PUSH
14044: LD_INT 0
14046: ST_TO_ADDR
// sRanger := false ;
14047: LD_ADDR_EXP 75
14051: PUSH
14052: LD_INT 0
14054: ST_TO_ADDR
// sComputer := false ;
14055: LD_ADDR_EXP 76
14059: PUSH
14060: LD_INT 0
14062: ST_TO_ADDR
// s30 := false ;
14063: LD_ADDR_EXP 77
14067: PUSH
14068: LD_INT 0
14070: ST_TO_ADDR
// s60 := false ;
14071: LD_ADDR_EXP 78
14075: PUSH
14076: LD_INT 0
14078: ST_TO_ADDR
// end ;
14079: LD_VAR 0 1
14083: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
14084: LD_INT 0
14086: PPUSH
14087: PPUSH
14088: PPUSH
14089: PPUSH
14090: PPUSH
14091: PPUSH
14092: PPUSH
// result := [ ] ;
14093: LD_ADDR_VAR 0 2
14097: PUSH
14098: EMPTY
14099: ST_TO_ADDR
// if campaign_id = 1 then
14100: LD_OWVAR 69
14104: PUSH
14105: LD_INT 1
14107: EQUAL
14108: IFFALSE 17274
// begin case mission_number of 1 :
14110: LD_OWVAR 70
14114: PUSH
14115: LD_INT 1
14117: DOUBLE
14118: EQUAL
14119: IFTRUE 14123
14121: GO 14199
14123: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
14124: LD_ADDR_VAR 0 2
14128: PUSH
14129: LD_INT 2
14131: PUSH
14132: LD_INT 4
14134: PUSH
14135: LD_INT 11
14137: PUSH
14138: LD_INT 12
14140: PUSH
14141: LD_INT 15
14143: PUSH
14144: LD_INT 16
14146: PUSH
14147: LD_INT 22
14149: PUSH
14150: LD_INT 23
14152: PUSH
14153: LD_INT 26
14155: PUSH
14156: EMPTY
14157: LIST
14158: LIST
14159: LIST
14160: LIST
14161: LIST
14162: LIST
14163: LIST
14164: LIST
14165: LIST
14166: PUSH
14167: LD_INT 101
14169: PUSH
14170: LD_INT 102
14172: PUSH
14173: LD_INT 106
14175: PUSH
14176: LD_INT 116
14178: PUSH
14179: LD_INT 117
14181: PUSH
14182: LD_INT 118
14184: PUSH
14185: EMPTY
14186: LIST
14187: LIST
14188: LIST
14189: LIST
14190: LIST
14191: LIST
14192: PUSH
14193: EMPTY
14194: LIST
14195: LIST
14196: ST_TO_ADDR
14197: GO 17272
14199: LD_INT 2
14201: DOUBLE
14202: EQUAL
14203: IFTRUE 14207
14205: GO 14291
14207: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
14208: LD_ADDR_VAR 0 2
14212: PUSH
14213: LD_INT 2
14215: PUSH
14216: LD_INT 4
14218: PUSH
14219: LD_INT 11
14221: PUSH
14222: LD_INT 12
14224: PUSH
14225: LD_INT 15
14227: PUSH
14228: LD_INT 16
14230: PUSH
14231: LD_INT 22
14233: PUSH
14234: LD_INT 23
14236: PUSH
14237: LD_INT 26
14239: PUSH
14240: EMPTY
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: LIST
14247: LIST
14248: LIST
14249: LIST
14250: PUSH
14251: LD_INT 101
14253: PUSH
14254: LD_INT 102
14256: PUSH
14257: LD_INT 105
14259: PUSH
14260: LD_INT 106
14262: PUSH
14263: LD_INT 108
14265: PUSH
14266: LD_INT 116
14268: PUSH
14269: LD_INT 117
14271: PUSH
14272: LD_INT 118
14274: PUSH
14275: EMPTY
14276: LIST
14277: LIST
14278: LIST
14279: LIST
14280: LIST
14281: LIST
14282: LIST
14283: LIST
14284: PUSH
14285: EMPTY
14286: LIST
14287: LIST
14288: ST_TO_ADDR
14289: GO 17272
14291: LD_INT 3
14293: DOUBLE
14294: EQUAL
14295: IFTRUE 14299
14297: GO 14387
14299: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
14300: LD_ADDR_VAR 0 2
14304: PUSH
14305: LD_INT 2
14307: PUSH
14308: LD_INT 4
14310: PUSH
14311: LD_INT 5
14313: PUSH
14314: LD_INT 11
14316: PUSH
14317: LD_INT 12
14319: PUSH
14320: LD_INT 15
14322: PUSH
14323: LD_INT 16
14325: PUSH
14326: LD_INT 22
14328: PUSH
14329: LD_INT 26
14331: PUSH
14332: LD_INT 36
14334: PUSH
14335: EMPTY
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: LIST
14341: LIST
14342: LIST
14343: LIST
14344: LIST
14345: LIST
14346: PUSH
14347: LD_INT 101
14349: PUSH
14350: LD_INT 102
14352: PUSH
14353: LD_INT 105
14355: PUSH
14356: LD_INT 106
14358: PUSH
14359: LD_INT 108
14361: PUSH
14362: LD_INT 116
14364: PUSH
14365: LD_INT 117
14367: PUSH
14368: LD_INT 118
14370: PUSH
14371: EMPTY
14372: LIST
14373: LIST
14374: LIST
14375: LIST
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: PUSH
14381: EMPTY
14382: LIST
14383: LIST
14384: ST_TO_ADDR
14385: GO 17272
14387: LD_INT 4
14389: DOUBLE
14390: EQUAL
14391: IFTRUE 14395
14393: GO 14491
14395: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
14396: LD_ADDR_VAR 0 2
14400: PUSH
14401: LD_INT 2
14403: PUSH
14404: LD_INT 4
14406: PUSH
14407: LD_INT 5
14409: PUSH
14410: LD_INT 8
14412: PUSH
14413: LD_INT 11
14415: PUSH
14416: LD_INT 12
14418: PUSH
14419: LD_INT 15
14421: PUSH
14422: LD_INT 16
14424: PUSH
14425: LD_INT 22
14427: PUSH
14428: LD_INT 23
14430: PUSH
14431: LD_INT 26
14433: PUSH
14434: LD_INT 36
14436: PUSH
14437: EMPTY
14438: LIST
14439: LIST
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: PUSH
14451: LD_INT 101
14453: PUSH
14454: LD_INT 102
14456: PUSH
14457: LD_INT 105
14459: PUSH
14460: LD_INT 106
14462: PUSH
14463: LD_INT 108
14465: PUSH
14466: LD_INT 116
14468: PUSH
14469: LD_INT 117
14471: PUSH
14472: LD_INT 118
14474: PUSH
14475: EMPTY
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: PUSH
14485: EMPTY
14486: LIST
14487: LIST
14488: ST_TO_ADDR
14489: GO 17272
14491: LD_INT 5
14493: DOUBLE
14494: EQUAL
14495: IFTRUE 14499
14497: GO 14611
14499: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
14500: LD_ADDR_VAR 0 2
14504: PUSH
14505: LD_INT 2
14507: PUSH
14508: LD_INT 4
14510: PUSH
14511: LD_INT 5
14513: PUSH
14514: LD_INT 6
14516: PUSH
14517: LD_INT 8
14519: PUSH
14520: LD_INT 11
14522: PUSH
14523: LD_INT 12
14525: PUSH
14526: LD_INT 15
14528: PUSH
14529: LD_INT 16
14531: PUSH
14532: LD_INT 22
14534: PUSH
14535: LD_INT 23
14537: PUSH
14538: LD_INT 25
14540: PUSH
14541: LD_INT 26
14543: PUSH
14544: LD_INT 36
14546: PUSH
14547: EMPTY
14548: LIST
14549: LIST
14550: LIST
14551: LIST
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: PUSH
14563: LD_INT 101
14565: PUSH
14566: LD_INT 102
14568: PUSH
14569: LD_INT 105
14571: PUSH
14572: LD_INT 106
14574: PUSH
14575: LD_INT 108
14577: PUSH
14578: LD_INT 109
14580: PUSH
14581: LD_INT 112
14583: PUSH
14584: LD_INT 116
14586: PUSH
14587: LD_INT 117
14589: PUSH
14590: LD_INT 118
14592: PUSH
14593: EMPTY
14594: LIST
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: LIST
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: PUSH
14605: EMPTY
14606: LIST
14607: LIST
14608: ST_TO_ADDR
14609: GO 17272
14611: LD_INT 6
14613: DOUBLE
14614: EQUAL
14615: IFTRUE 14619
14617: GO 14751
14619: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
14620: LD_ADDR_VAR 0 2
14624: PUSH
14625: LD_INT 2
14627: PUSH
14628: LD_INT 4
14630: PUSH
14631: LD_INT 5
14633: PUSH
14634: LD_INT 6
14636: PUSH
14637: LD_INT 8
14639: PUSH
14640: LD_INT 11
14642: PUSH
14643: LD_INT 12
14645: PUSH
14646: LD_INT 15
14648: PUSH
14649: LD_INT 16
14651: PUSH
14652: LD_INT 20
14654: PUSH
14655: LD_INT 21
14657: PUSH
14658: LD_INT 22
14660: PUSH
14661: LD_INT 23
14663: PUSH
14664: LD_INT 25
14666: PUSH
14667: LD_INT 26
14669: PUSH
14670: LD_INT 30
14672: PUSH
14673: LD_INT 31
14675: PUSH
14676: LD_INT 32
14678: PUSH
14679: LD_INT 36
14681: PUSH
14682: EMPTY
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: PUSH
14703: LD_INT 101
14705: PUSH
14706: LD_INT 102
14708: PUSH
14709: LD_INT 105
14711: PUSH
14712: LD_INT 106
14714: PUSH
14715: LD_INT 108
14717: PUSH
14718: LD_INT 109
14720: PUSH
14721: LD_INT 112
14723: PUSH
14724: LD_INT 116
14726: PUSH
14727: LD_INT 117
14729: PUSH
14730: LD_INT 118
14732: PUSH
14733: EMPTY
14734: LIST
14735: LIST
14736: LIST
14737: LIST
14738: LIST
14739: LIST
14740: LIST
14741: LIST
14742: LIST
14743: LIST
14744: PUSH
14745: EMPTY
14746: LIST
14747: LIST
14748: ST_TO_ADDR
14749: GO 17272
14751: LD_INT 7
14753: DOUBLE
14754: EQUAL
14755: IFTRUE 14759
14757: GO 14871
14759: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
14760: LD_ADDR_VAR 0 2
14764: PUSH
14765: LD_INT 2
14767: PUSH
14768: LD_INT 4
14770: PUSH
14771: LD_INT 5
14773: PUSH
14774: LD_INT 7
14776: PUSH
14777: LD_INT 11
14779: PUSH
14780: LD_INT 12
14782: PUSH
14783: LD_INT 15
14785: PUSH
14786: LD_INT 16
14788: PUSH
14789: LD_INT 20
14791: PUSH
14792: LD_INT 21
14794: PUSH
14795: LD_INT 22
14797: PUSH
14798: LD_INT 23
14800: PUSH
14801: LD_INT 25
14803: PUSH
14804: LD_INT 26
14806: PUSH
14807: EMPTY
14808: LIST
14809: LIST
14810: LIST
14811: LIST
14812: LIST
14813: LIST
14814: LIST
14815: LIST
14816: LIST
14817: LIST
14818: LIST
14819: LIST
14820: LIST
14821: LIST
14822: PUSH
14823: LD_INT 101
14825: PUSH
14826: LD_INT 102
14828: PUSH
14829: LD_INT 103
14831: PUSH
14832: LD_INT 105
14834: PUSH
14835: LD_INT 106
14837: PUSH
14838: LD_INT 108
14840: PUSH
14841: LD_INT 112
14843: PUSH
14844: LD_INT 116
14846: PUSH
14847: LD_INT 117
14849: PUSH
14850: LD_INT 118
14852: PUSH
14853: EMPTY
14854: LIST
14855: LIST
14856: LIST
14857: LIST
14858: LIST
14859: LIST
14860: LIST
14861: LIST
14862: LIST
14863: LIST
14864: PUSH
14865: EMPTY
14866: LIST
14867: LIST
14868: ST_TO_ADDR
14869: GO 17272
14871: LD_INT 8
14873: DOUBLE
14874: EQUAL
14875: IFTRUE 14879
14877: GO 15019
14879: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
14880: LD_ADDR_VAR 0 2
14884: PUSH
14885: LD_INT 2
14887: PUSH
14888: LD_INT 4
14890: PUSH
14891: LD_INT 5
14893: PUSH
14894: LD_INT 6
14896: PUSH
14897: LD_INT 7
14899: PUSH
14900: LD_INT 8
14902: PUSH
14903: LD_INT 11
14905: PUSH
14906: LD_INT 12
14908: PUSH
14909: LD_INT 15
14911: PUSH
14912: LD_INT 16
14914: PUSH
14915: LD_INT 20
14917: PUSH
14918: LD_INT 21
14920: PUSH
14921: LD_INT 22
14923: PUSH
14924: LD_INT 23
14926: PUSH
14927: LD_INT 25
14929: PUSH
14930: LD_INT 26
14932: PUSH
14933: LD_INT 30
14935: PUSH
14936: LD_INT 31
14938: PUSH
14939: LD_INT 32
14941: PUSH
14942: LD_INT 36
14944: PUSH
14945: EMPTY
14946: LIST
14947: LIST
14948: LIST
14949: LIST
14950: LIST
14951: LIST
14952: LIST
14953: LIST
14954: LIST
14955: LIST
14956: LIST
14957: LIST
14958: LIST
14959: LIST
14960: LIST
14961: LIST
14962: LIST
14963: LIST
14964: LIST
14965: LIST
14966: PUSH
14967: LD_INT 101
14969: PUSH
14970: LD_INT 102
14972: PUSH
14973: LD_INT 103
14975: PUSH
14976: LD_INT 105
14978: PUSH
14979: LD_INT 106
14981: PUSH
14982: LD_INT 108
14984: PUSH
14985: LD_INT 109
14987: PUSH
14988: LD_INT 112
14990: PUSH
14991: LD_INT 116
14993: PUSH
14994: LD_INT 117
14996: PUSH
14997: LD_INT 118
14999: PUSH
15000: EMPTY
15001: LIST
15002: LIST
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: LIST
15009: LIST
15010: LIST
15011: LIST
15012: PUSH
15013: EMPTY
15014: LIST
15015: LIST
15016: ST_TO_ADDR
15017: GO 17272
15019: LD_INT 9
15021: DOUBLE
15022: EQUAL
15023: IFTRUE 15027
15025: GO 15175
15027: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
15028: LD_ADDR_VAR 0 2
15032: PUSH
15033: LD_INT 2
15035: PUSH
15036: LD_INT 4
15038: PUSH
15039: LD_INT 5
15041: PUSH
15042: LD_INT 6
15044: PUSH
15045: LD_INT 7
15047: PUSH
15048: LD_INT 8
15050: PUSH
15051: LD_INT 11
15053: PUSH
15054: LD_INT 12
15056: PUSH
15057: LD_INT 15
15059: PUSH
15060: LD_INT 16
15062: PUSH
15063: LD_INT 20
15065: PUSH
15066: LD_INT 21
15068: PUSH
15069: LD_INT 22
15071: PUSH
15072: LD_INT 23
15074: PUSH
15075: LD_INT 25
15077: PUSH
15078: LD_INT 26
15080: PUSH
15081: LD_INT 28
15083: PUSH
15084: LD_INT 30
15086: PUSH
15087: LD_INT 31
15089: PUSH
15090: LD_INT 32
15092: PUSH
15093: LD_INT 36
15095: PUSH
15096: EMPTY
15097: LIST
15098: LIST
15099: LIST
15100: LIST
15101: LIST
15102: LIST
15103: LIST
15104: LIST
15105: LIST
15106: LIST
15107: LIST
15108: LIST
15109: LIST
15110: LIST
15111: LIST
15112: LIST
15113: LIST
15114: LIST
15115: LIST
15116: LIST
15117: LIST
15118: PUSH
15119: LD_INT 101
15121: PUSH
15122: LD_INT 102
15124: PUSH
15125: LD_INT 103
15127: PUSH
15128: LD_INT 105
15130: PUSH
15131: LD_INT 106
15133: PUSH
15134: LD_INT 108
15136: PUSH
15137: LD_INT 109
15139: PUSH
15140: LD_INT 112
15142: PUSH
15143: LD_INT 114
15145: PUSH
15146: LD_INT 116
15148: PUSH
15149: LD_INT 117
15151: PUSH
15152: LD_INT 118
15154: PUSH
15155: EMPTY
15156: LIST
15157: LIST
15158: LIST
15159: LIST
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: LIST
15165: LIST
15166: LIST
15167: LIST
15168: PUSH
15169: EMPTY
15170: LIST
15171: LIST
15172: ST_TO_ADDR
15173: GO 17272
15175: LD_INT 10
15177: DOUBLE
15178: EQUAL
15179: IFTRUE 15183
15181: GO 15379
15183: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
15184: LD_ADDR_VAR 0 2
15188: PUSH
15189: LD_INT 2
15191: PUSH
15192: LD_INT 4
15194: PUSH
15195: LD_INT 5
15197: PUSH
15198: LD_INT 6
15200: PUSH
15201: LD_INT 7
15203: PUSH
15204: LD_INT 8
15206: PUSH
15207: LD_INT 9
15209: PUSH
15210: LD_INT 10
15212: PUSH
15213: LD_INT 11
15215: PUSH
15216: LD_INT 12
15218: PUSH
15219: LD_INT 13
15221: PUSH
15222: LD_INT 14
15224: PUSH
15225: LD_INT 15
15227: PUSH
15228: LD_INT 16
15230: PUSH
15231: LD_INT 17
15233: PUSH
15234: LD_INT 18
15236: PUSH
15237: LD_INT 19
15239: PUSH
15240: LD_INT 20
15242: PUSH
15243: LD_INT 21
15245: PUSH
15246: LD_INT 22
15248: PUSH
15249: LD_INT 23
15251: PUSH
15252: LD_INT 24
15254: PUSH
15255: LD_INT 25
15257: PUSH
15258: LD_INT 26
15260: PUSH
15261: LD_INT 28
15263: PUSH
15264: LD_INT 30
15266: PUSH
15267: LD_INT 31
15269: PUSH
15270: LD_INT 32
15272: PUSH
15273: LD_INT 36
15275: PUSH
15276: EMPTY
15277: LIST
15278: LIST
15279: LIST
15280: LIST
15281: LIST
15282: LIST
15283: LIST
15284: LIST
15285: LIST
15286: LIST
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: LIST
15298: LIST
15299: LIST
15300: LIST
15301: LIST
15302: LIST
15303: LIST
15304: LIST
15305: LIST
15306: PUSH
15307: LD_INT 101
15309: PUSH
15310: LD_INT 102
15312: PUSH
15313: LD_INT 103
15315: PUSH
15316: LD_INT 104
15318: PUSH
15319: LD_INT 105
15321: PUSH
15322: LD_INT 106
15324: PUSH
15325: LD_INT 107
15327: PUSH
15328: LD_INT 108
15330: PUSH
15331: LD_INT 109
15333: PUSH
15334: LD_INT 110
15336: PUSH
15337: LD_INT 111
15339: PUSH
15340: LD_INT 112
15342: PUSH
15343: LD_INT 114
15345: PUSH
15346: LD_INT 116
15348: PUSH
15349: LD_INT 117
15351: PUSH
15352: LD_INT 118
15354: PUSH
15355: EMPTY
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: PUSH
15373: EMPTY
15374: LIST
15375: LIST
15376: ST_TO_ADDR
15377: GO 17272
15379: LD_INT 11
15381: DOUBLE
15382: EQUAL
15383: IFTRUE 15387
15385: GO 15591
15387: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
15388: LD_ADDR_VAR 0 2
15392: PUSH
15393: LD_INT 2
15395: PUSH
15396: LD_INT 3
15398: PUSH
15399: LD_INT 4
15401: PUSH
15402: LD_INT 5
15404: PUSH
15405: LD_INT 6
15407: PUSH
15408: LD_INT 7
15410: PUSH
15411: LD_INT 8
15413: PUSH
15414: LD_INT 9
15416: PUSH
15417: LD_INT 10
15419: PUSH
15420: LD_INT 11
15422: PUSH
15423: LD_INT 12
15425: PUSH
15426: LD_INT 13
15428: PUSH
15429: LD_INT 14
15431: PUSH
15432: LD_INT 15
15434: PUSH
15435: LD_INT 16
15437: PUSH
15438: LD_INT 17
15440: PUSH
15441: LD_INT 18
15443: PUSH
15444: LD_INT 19
15446: PUSH
15447: LD_INT 20
15449: PUSH
15450: LD_INT 21
15452: PUSH
15453: LD_INT 22
15455: PUSH
15456: LD_INT 23
15458: PUSH
15459: LD_INT 24
15461: PUSH
15462: LD_INT 25
15464: PUSH
15465: LD_INT 26
15467: PUSH
15468: LD_INT 28
15470: PUSH
15471: LD_INT 30
15473: PUSH
15474: LD_INT 31
15476: PUSH
15477: LD_INT 32
15479: PUSH
15480: LD_INT 34
15482: PUSH
15483: LD_INT 36
15485: PUSH
15486: EMPTY
15487: LIST
15488: LIST
15489: LIST
15490: LIST
15491: LIST
15492: LIST
15493: LIST
15494: LIST
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: LIST
15502: LIST
15503: LIST
15504: LIST
15505: LIST
15506: LIST
15507: LIST
15508: LIST
15509: LIST
15510: LIST
15511: LIST
15512: LIST
15513: LIST
15514: LIST
15515: LIST
15516: LIST
15517: LIST
15518: PUSH
15519: LD_INT 101
15521: PUSH
15522: LD_INT 102
15524: PUSH
15525: LD_INT 103
15527: PUSH
15528: LD_INT 104
15530: PUSH
15531: LD_INT 105
15533: PUSH
15534: LD_INT 106
15536: PUSH
15537: LD_INT 107
15539: PUSH
15540: LD_INT 108
15542: PUSH
15543: LD_INT 109
15545: PUSH
15546: LD_INT 110
15548: PUSH
15549: LD_INT 111
15551: PUSH
15552: LD_INT 112
15554: PUSH
15555: LD_INT 114
15557: PUSH
15558: LD_INT 116
15560: PUSH
15561: LD_INT 117
15563: PUSH
15564: LD_INT 118
15566: PUSH
15567: EMPTY
15568: LIST
15569: LIST
15570: LIST
15571: LIST
15572: LIST
15573: LIST
15574: LIST
15575: LIST
15576: LIST
15577: LIST
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: LIST
15584: PUSH
15585: EMPTY
15586: LIST
15587: LIST
15588: ST_TO_ADDR
15589: GO 17272
15591: LD_INT 12
15593: DOUBLE
15594: EQUAL
15595: IFTRUE 15599
15597: GO 15819
15599: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
15600: LD_ADDR_VAR 0 2
15604: PUSH
15605: LD_INT 1
15607: PUSH
15608: LD_INT 2
15610: PUSH
15611: LD_INT 3
15613: PUSH
15614: LD_INT 4
15616: PUSH
15617: LD_INT 5
15619: PUSH
15620: LD_INT 6
15622: PUSH
15623: LD_INT 7
15625: PUSH
15626: LD_INT 8
15628: PUSH
15629: LD_INT 9
15631: PUSH
15632: LD_INT 10
15634: PUSH
15635: LD_INT 11
15637: PUSH
15638: LD_INT 12
15640: PUSH
15641: LD_INT 13
15643: PUSH
15644: LD_INT 14
15646: PUSH
15647: LD_INT 15
15649: PUSH
15650: LD_INT 16
15652: PUSH
15653: LD_INT 17
15655: PUSH
15656: LD_INT 18
15658: PUSH
15659: LD_INT 19
15661: PUSH
15662: LD_INT 20
15664: PUSH
15665: LD_INT 21
15667: PUSH
15668: LD_INT 22
15670: PUSH
15671: LD_INT 23
15673: PUSH
15674: LD_INT 24
15676: PUSH
15677: LD_INT 25
15679: PUSH
15680: LD_INT 26
15682: PUSH
15683: LD_INT 27
15685: PUSH
15686: LD_INT 28
15688: PUSH
15689: LD_INT 30
15691: PUSH
15692: LD_INT 31
15694: PUSH
15695: LD_INT 32
15697: PUSH
15698: LD_INT 33
15700: PUSH
15701: LD_INT 34
15703: PUSH
15704: LD_INT 36
15706: PUSH
15707: EMPTY
15708: LIST
15709: LIST
15710: LIST
15711: LIST
15712: LIST
15713: LIST
15714: LIST
15715: LIST
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: PUSH
15743: LD_INT 101
15745: PUSH
15746: LD_INT 102
15748: PUSH
15749: LD_INT 103
15751: PUSH
15752: LD_INT 104
15754: PUSH
15755: LD_INT 105
15757: PUSH
15758: LD_INT 106
15760: PUSH
15761: LD_INT 107
15763: PUSH
15764: LD_INT 108
15766: PUSH
15767: LD_INT 109
15769: PUSH
15770: LD_INT 110
15772: PUSH
15773: LD_INT 111
15775: PUSH
15776: LD_INT 112
15778: PUSH
15779: LD_INT 113
15781: PUSH
15782: LD_INT 114
15784: PUSH
15785: LD_INT 116
15787: PUSH
15788: LD_INT 117
15790: PUSH
15791: LD_INT 118
15793: PUSH
15794: EMPTY
15795: LIST
15796: LIST
15797: LIST
15798: LIST
15799: LIST
15800: LIST
15801: LIST
15802: LIST
15803: LIST
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: LIST
15809: LIST
15810: LIST
15811: LIST
15812: PUSH
15813: EMPTY
15814: LIST
15815: LIST
15816: ST_TO_ADDR
15817: GO 17272
15819: LD_INT 13
15821: DOUBLE
15822: EQUAL
15823: IFTRUE 15827
15825: GO 16035
15827: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
15828: LD_ADDR_VAR 0 2
15832: PUSH
15833: LD_INT 1
15835: PUSH
15836: LD_INT 2
15838: PUSH
15839: LD_INT 3
15841: PUSH
15842: LD_INT 4
15844: PUSH
15845: LD_INT 5
15847: PUSH
15848: LD_INT 8
15850: PUSH
15851: LD_INT 9
15853: PUSH
15854: LD_INT 10
15856: PUSH
15857: LD_INT 11
15859: PUSH
15860: LD_INT 12
15862: PUSH
15863: LD_INT 14
15865: PUSH
15866: LD_INT 15
15868: PUSH
15869: LD_INT 16
15871: PUSH
15872: LD_INT 17
15874: PUSH
15875: LD_INT 18
15877: PUSH
15878: LD_INT 19
15880: PUSH
15881: LD_INT 20
15883: PUSH
15884: LD_INT 21
15886: PUSH
15887: LD_INT 22
15889: PUSH
15890: LD_INT 23
15892: PUSH
15893: LD_INT 24
15895: PUSH
15896: LD_INT 25
15898: PUSH
15899: LD_INT 26
15901: PUSH
15902: LD_INT 27
15904: PUSH
15905: LD_INT 28
15907: PUSH
15908: LD_INT 30
15910: PUSH
15911: LD_INT 31
15913: PUSH
15914: LD_INT 32
15916: PUSH
15917: LD_INT 33
15919: PUSH
15920: LD_INT 34
15922: PUSH
15923: LD_INT 36
15925: PUSH
15926: EMPTY
15927: LIST
15928: LIST
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: PUSH
15959: LD_INT 101
15961: PUSH
15962: LD_INT 102
15964: PUSH
15965: LD_INT 103
15967: PUSH
15968: LD_INT 104
15970: PUSH
15971: LD_INT 105
15973: PUSH
15974: LD_INT 106
15976: PUSH
15977: LD_INT 107
15979: PUSH
15980: LD_INT 108
15982: PUSH
15983: LD_INT 109
15985: PUSH
15986: LD_INT 110
15988: PUSH
15989: LD_INT 111
15991: PUSH
15992: LD_INT 112
15994: PUSH
15995: LD_INT 113
15997: PUSH
15998: LD_INT 114
16000: PUSH
16001: LD_INT 116
16003: PUSH
16004: LD_INT 117
16006: PUSH
16007: LD_INT 118
16009: PUSH
16010: EMPTY
16011: LIST
16012: LIST
16013: LIST
16014: LIST
16015: LIST
16016: LIST
16017: LIST
16018: LIST
16019: LIST
16020: LIST
16021: LIST
16022: LIST
16023: LIST
16024: LIST
16025: LIST
16026: LIST
16027: LIST
16028: PUSH
16029: EMPTY
16030: LIST
16031: LIST
16032: ST_TO_ADDR
16033: GO 17272
16035: LD_INT 14
16037: DOUBLE
16038: EQUAL
16039: IFTRUE 16043
16041: GO 16267
16043: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
16044: LD_ADDR_VAR 0 2
16048: PUSH
16049: LD_INT 1
16051: PUSH
16052: LD_INT 2
16054: PUSH
16055: LD_INT 3
16057: PUSH
16058: LD_INT 4
16060: PUSH
16061: LD_INT 5
16063: PUSH
16064: LD_INT 6
16066: PUSH
16067: LD_INT 7
16069: PUSH
16070: LD_INT 8
16072: PUSH
16073: LD_INT 9
16075: PUSH
16076: LD_INT 10
16078: PUSH
16079: LD_INT 11
16081: PUSH
16082: LD_INT 12
16084: PUSH
16085: LD_INT 13
16087: PUSH
16088: LD_INT 14
16090: PUSH
16091: LD_INT 15
16093: PUSH
16094: LD_INT 16
16096: PUSH
16097: LD_INT 17
16099: PUSH
16100: LD_INT 18
16102: PUSH
16103: LD_INT 19
16105: PUSH
16106: LD_INT 20
16108: PUSH
16109: LD_INT 21
16111: PUSH
16112: LD_INT 22
16114: PUSH
16115: LD_INT 23
16117: PUSH
16118: LD_INT 24
16120: PUSH
16121: LD_INT 25
16123: PUSH
16124: LD_INT 26
16126: PUSH
16127: LD_INT 27
16129: PUSH
16130: LD_INT 28
16132: PUSH
16133: LD_INT 29
16135: PUSH
16136: LD_INT 30
16138: PUSH
16139: LD_INT 31
16141: PUSH
16142: LD_INT 32
16144: PUSH
16145: LD_INT 33
16147: PUSH
16148: LD_INT 34
16150: PUSH
16151: LD_INT 36
16153: PUSH
16154: EMPTY
16155: LIST
16156: LIST
16157: LIST
16158: LIST
16159: LIST
16160: LIST
16161: LIST
16162: LIST
16163: LIST
16164: LIST
16165: LIST
16166: LIST
16167: LIST
16168: LIST
16169: LIST
16170: LIST
16171: LIST
16172: LIST
16173: LIST
16174: LIST
16175: LIST
16176: LIST
16177: LIST
16178: LIST
16179: LIST
16180: LIST
16181: LIST
16182: LIST
16183: LIST
16184: LIST
16185: LIST
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: PUSH
16191: LD_INT 101
16193: PUSH
16194: LD_INT 102
16196: PUSH
16197: LD_INT 103
16199: PUSH
16200: LD_INT 104
16202: PUSH
16203: LD_INT 105
16205: PUSH
16206: LD_INT 106
16208: PUSH
16209: LD_INT 107
16211: PUSH
16212: LD_INT 108
16214: PUSH
16215: LD_INT 109
16217: PUSH
16218: LD_INT 110
16220: PUSH
16221: LD_INT 111
16223: PUSH
16224: LD_INT 112
16226: PUSH
16227: LD_INT 113
16229: PUSH
16230: LD_INT 114
16232: PUSH
16233: LD_INT 116
16235: PUSH
16236: LD_INT 117
16238: PUSH
16239: LD_INT 118
16241: PUSH
16242: EMPTY
16243: LIST
16244: LIST
16245: LIST
16246: LIST
16247: LIST
16248: LIST
16249: LIST
16250: LIST
16251: LIST
16252: LIST
16253: LIST
16254: LIST
16255: LIST
16256: LIST
16257: LIST
16258: LIST
16259: LIST
16260: PUSH
16261: EMPTY
16262: LIST
16263: LIST
16264: ST_TO_ADDR
16265: GO 17272
16267: LD_INT 15
16269: DOUBLE
16270: EQUAL
16271: IFTRUE 16275
16273: GO 16499
16275: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
16276: LD_ADDR_VAR 0 2
16280: PUSH
16281: LD_INT 1
16283: PUSH
16284: LD_INT 2
16286: PUSH
16287: LD_INT 3
16289: PUSH
16290: LD_INT 4
16292: PUSH
16293: LD_INT 5
16295: PUSH
16296: LD_INT 6
16298: PUSH
16299: LD_INT 7
16301: PUSH
16302: LD_INT 8
16304: PUSH
16305: LD_INT 9
16307: PUSH
16308: LD_INT 10
16310: PUSH
16311: LD_INT 11
16313: PUSH
16314: LD_INT 12
16316: PUSH
16317: LD_INT 13
16319: PUSH
16320: LD_INT 14
16322: PUSH
16323: LD_INT 15
16325: PUSH
16326: LD_INT 16
16328: PUSH
16329: LD_INT 17
16331: PUSH
16332: LD_INT 18
16334: PUSH
16335: LD_INT 19
16337: PUSH
16338: LD_INT 20
16340: PUSH
16341: LD_INT 21
16343: PUSH
16344: LD_INT 22
16346: PUSH
16347: LD_INT 23
16349: PUSH
16350: LD_INT 24
16352: PUSH
16353: LD_INT 25
16355: PUSH
16356: LD_INT 26
16358: PUSH
16359: LD_INT 27
16361: PUSH
16362: LD_INT 28
16364: PUSH
16365: LD_INT 29
16367: PUSH
16368: LD_INT 30
16370: PUSH
16371: LD_INT 31
16373: PUSH
16374: LD_INT 32
16376: PUSH
16377: LD_INT 33
16379: PUSH
16380: LD_INT 34
16382: PUSH
16383: LD_INT 36
16385: PUSH
16386: EMPTY
16387: LIST
16388: LIST
16389: LIST
16390: LIST
16391: LIST
16392: LIST
16393: LIST
16394: LIST
16395: LIST
16396: LIST
16397: LIST
16398: LIST
16399: LIST
16400: LIST
16401: LIST
16402: LIST
16403: LIST
16404: LIST
16405: LIST
16406: LIST
16407: LIST
16408: LIST
16409: LIST
16410: LIST
16411: LIST
16412: LIST
16413: LIST
16414: LIST
16415: LIST
16416: LIST
16417: LIST
16418: LIST
16419: LIST
16420: LIST
16421: LIST
16422: PUSH
16423: LD_INT 101
16425: PUSH
16426: LD_INT 102
16428: PUSH
16429: LD_INT 103
16431: PUSH
16432: LD_INT 104
16434: PUSH
16435: LD_INT 105
16437: PUSH
16438: LD_INT 106
16440: PUSH
16441: LD_INT 107
16443: PUSH
16444: LD_INT 108
16446: PUSH
16447: LD_INT 109
16449: PUSH
16450: LD_INT 110
16452: PUSH
16453: LD_INT 111
16455: PUSH
16456: LD_INT 112
16458: PUSH
16459: LD_INT 113
16461: PUSH
16462: LD_INT 114
16464: PUSH
16465: LD_INT 116
16467: PUSH
16468: LD_INT 117
16470: PUSH
16471: LD_INT 118
16473: PUSH
16474: EMPTY
16475: LIST
16476: LIST
16477: LIST
16478: LIST
16479: LIST
16480: LIST
16481: LIST
16482: LIST
16483: LIST
16484: LIST
16485: LIST
16486: LIST
16487: LIST
16488: LIST
16489: LIST
16490: LIST
16491: LIST
16492: PUSH
16493: EMPTY
16494: LIST
16495: LIST
16496: ST_TO_ADDR
16497: GO 17272
16499: LD_INT 16
16501: DOUBLE
16502: EQUAL
16503: IFTRUE 16507
16505: GO 16643
16507: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
16508: LD_ADDR_VAR 0 2
16512: PUSH
16513: LD_INT 2
16515: PUSH
16516: LD_INT 4
16518: PUSH
16519: LD_INT 5
16521: PUSH
16522: LD_INT 7
16524: PUSH
16525: LD_INT 11
16527: PUSH
16528: LD_INT 12
16530: PUSH
16531: LD_INT 15
16533: PUSH
16534: LD_INT 16
16536: PUSH
16537: LD_INT 20
16539: PUSH
16540: LD_INT 21
16542: PUSH
16543: LD_INT 22
16545: PUSH
16546: LD_INT 23
16548: PUSH
16549: LD_INT 25
16551: PUSH
16552: LD_INT 26
16554: PUSH
16555: LD_INT 30
16557: PUSH
16558: LD_INT 31
16560: PUSH
16561: LD_INT 32
16563: PUSH
16564: LD_INT 33
16566: PUSH
16567: LD_INT 34
16569: PUSH
16570: EMPTY
16571: LIST
16572: LIST
16573: LIST
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: LIST
16582: LIST
16583: LIST
16584: LIST
16585: LIST
16586: LIST
16587: LIST
16588: LIST
16589: LIST
16590: PUSH
16591: LD_INT 101
16593: PUSH
16594: LD_INT 102
16596: PUSH
16597: LD_INT 103
16599: PUSH
16600: LD_INT 106
16602: PUSH
16603: LD_INT 108
16605: PUSH
16606: LD_INT 112
16608: PUSH
16609: LD_INT 113
16611: PUSH
16612: LD_INT 114
16614: PUSH
16615: LD_INT 116
16617: PUSH
16618: LD_INT 117
16620: PUSH
16621: LD_INT 118
16623: PUSH
16624: EMPTY
16625: LIST
16626: LIST
16627: LIST
16628: LIST
16629: LIST
16630: LIST
16631: LIST
16632: LIST
16633: LIST
16634: LIST
16635: LIST
16636: PUSH
16637: EMPTY
16638: LIST
16639: LIST
16640: ST_TO_ADDR
16641: GO 17272
16643: LD_INT 17
16645: DOUBLE
16646: EQUAL
16647: IFTRUE 16651
16649: GO 16875
16651: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
16652: LD_ADDR_VAR 0 2
16656: PUSH
16657: LD_INT 1
16659: PUSH
16660: LD_INT 2
16662: PUSH
16663: LD_INT 3
16665: PUSH
16666: LD_INT 4
16668: PUSH
16669: LD_INT 5
16671: PUSH
16672: LD_INT 6
16674: PUSH
16675: LD_INT 7
16677: PUSH
16678: LD_INT 8
16680: PUSH
16681: LD_INT 9
16683: PUSH
16684: LD_INT 10
16686: PUSH
16687: LD_INT 11
16689: PUSH
16690: LD_INT 12
16692: PUSH
16693: LD_INT 13
16695: PUSH
16696: LD_INT 14
16698: PUSH
16699: LD_INT 15
16701: PUSH
16702: LD_INT 16
16704: PUSH
16705: LD_INT 17
16707: PUSH
16708: LD_INT 18
16710: PUSH
16711: LD_INT 19
16713: PUSH
16714: LD_INT 20
16716: PUSH
16717: LD_INT 21
16719: PUSH
16720: LD_INT 22
16722: PUSH
16723: LD_INT 23
16725: PUSH
16726: LD_INT 24
16728: PUSH
16729: LD_INT 25
16731: PUSH
16732: LD_INT 26
16734: PUSH
16735: LD_INT 27
16737: PUSH
16738: LD_INT 28
16740: PUSH
16741: LD_INT 29
16743: PUSH
16744: LD_INT 30
16746: PUSH
16747: LD_INT 31
16749: PUSH
16750: LD_INT 32
16752: PUSH
16753: LD_INT 33
16755: PUSH
16756: LD_INT 34
16758: PUSH
16759: LD_INT 36
16761: PUSH
16762: EMPTY
16763: LIST
16764: LIST
16765: LIST
16766: LIST
16767: LIST
16768: LIST
16769: LIST
16770: LIST
16771: LIST
16772: LIST
16773: LIST
16774: LIST
16775: LIST
16776: LIST
16777: LIST
16778: LIST
16779: LIST
16780: LIST
16781: LIST
16782: LIST
16783: LIST
16784: LIST
16785: LIST
16786: LIST
16787: LIST
16788: LIST
16789: LIST
16790: LIST
16791: LIST
16792: LIST
16793: LIST
16794: LIST
16795: LIST
16796: LIST
16797: LIST
16798: PUSH
16799: LD_INT 101
16801: PUSH
16802: LD_INT 102
16804: PUSH
16805: LD_INT 103
16807: PUSH
16808: LD_INT 104
16810: PUSH
16811: LD_INT 105
16813: PUSH
16814: LD_INT 106
16816: PUSH
16817: LD_INT 107
16819: PUSH
16820: LD_INT 108
16822: PUSH
16823: LD_INT 109
16825: PUSH
16826: LD_INT 110
16828: PUSH
16829: LD_INT 111
16831: PUSH
16832: LD_INT 112
16834: PUSH
16835: LD_INT 113
16837: PUSH
16838: LD_INT 114
16840: PUSH
16841: LD_INT 116
16843: PUSH
16844: LD_INT 117
16846: PUSH
16847: LD_INT 118
16849: PUSH
16850: EMPTY
16851: LIST
16852: LIST
16853: LIST
16854: LIST
16855: LIST
16856: LIST
16857: LIST
16858: LIST
16859: LIST
16860: LIST
16861: LIST
16862: LIST
16863: LIST
16864: LIST
16865: LIST
16866: LIST
16867: LIST
16868: PUSH
16869: EMPTY
16870: LIST
16871: LIST
16872: ST_TO_ADDR
16873: GO 17272
16875: LD_INT 18
16877: DOUBLE
16878: EQUAL
16879: IFTRUE 16883
16881: GO 17031
16883: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
16884: LD_ADDR_VAR 0 2
16888: PUSH
16889: LD_INT 2
16891: PUSH
16892: LD_INT 4
16894: PUSH
16895: LD_INT 5
16897: PUSH
16898: LD_INT 7
16900: PUSH
16901: LD_INT 11
16903: PUSH
16904: LD_INT 12
16906: PUSH
16907: LD_INT 15
16909: PUSH
16910: LD_INT 16
16912: PUSH
16913: LD_INT 20
16915: PUSH
16916: LD_INT 21
16918: PUSH
16919: LD_INT 22
16921: PUSH
16922: LD_INT 23
16924: PUSH
16925: LD_INT 25
16927: PUSH
16928: LD_INT 26
16930: PUSH
16931: LD_INT 30
16933: PUSH
16934: LD_INT 31
16936: PUSH
16937: LD_INT 32
16939: PUSH
16940: LD_INT 33
16942: PUSH
16943: LD_INT 34
16945: PUSH
16946: LD_INT 35
16948: PUSH
16949: LD_INT 36
16951: PUSH
16952: EMPTY
16953: LIST
16954: LIST
16955: LIST
16956: LIST
16957: LIST
16958: LIST
16959: LIST
16960: LIST
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: LIST
16966: LIST
16967: LIST
16968: LIST
16969: LIST
16970: LIST
16971: LIST
16972: LIST
16973: LIST
16974: PUSH
16975: LD_INT 101
16977: PUSH
16978: LD_INT 102
16980: PUSH
16981: LD_INT 103
16983: PUSH
16984: LD_INT 106
16986: PUSH
16987: LD_INT 108
16989: PUSH
16990: LD_INT 112
16992: PUSH
16993: LD_INT 113
16995: PUSH
16996: LD_INT 114
16998: PUSH
16999: LD_INT 115
17001: PUSH
17002: LD_INT 116
17004: PUSH
17005: LD_INT 117
17007: PUSH
17008: LD_INT 118
17010: PUSH
17011: EMPTY
17012: LIST
17013: LIST
17014: LIST
17015: LIST
17016: LIST
17017: LIST
17018: LIST
17019: LIST
17020: LIST
17021: LIST
17022: LIST
17023: LIST
17024: PUSH
17025: EMPTY
17026: LIST
17027: LIST
17028: ST_TO_ADDR
17029: GO 17272
17031: LD_INT 19
17033: DOUBLE
17034: EQUAL
17035: IFTRUE 17039
17037: GO 17271
17039: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
17040: LD_ADDR_VAR 0 2
17044: PUSH
17045: LD_INT 1
17047: PUSH
17048: LD_INT 2
17050: PUSH
17051: LD_INT 3
17053: PUSH
17054: LD_INT 4
17056: PUSH
17057: LD_INT 5
17059: PUSH
17060: LD_INT 6
17062: PUSH
17063: LD_INT 7
17065: PUSH
17066: LD_INT 8
17068: PUSH
17069: LD_INT 9
17071: PUSH
17072: LD_INT 10
17074: PUSH
17075: LD_INT 11
17077: PUSH
17078: LD_INT 12
17080: PUSH
17081: LD_INT 13
17083: PUSH
17084: LD_INT 14
17086: PUSH
17087: LD_INT 15
17089: PUSH
17090: LD_INT 16
17092: PUSH
17093: LD_INT 17
17095: PUSH
17096: LD_INT 18
17098: PUSH
17099: LD_INT 19
17101: PUSH
17102: LD_INT 20
17104: PUSH
17105: LD_INT 21
17107: PUSH
17108: LD_INT 22
17110: PUSH
17111: LD_INT 23
17113: PUSH
17114: LD_INT 24
17116: PUSH
17117: LD_INT 25
17119: PUSH
17120: LD_INT 26
17122: PUSH
17123: LD_INT 27
17125: PUSH
17126: LD_INT 28
17128: PUSH
17129: LD_INT 29
17131: PUSH
17132: LD_INT 30
17134: PUSH
17135: LD_INT 31
17137: PUSH
17138: LD_INT 32
17140: PUSH
17141: LD_INT 33
17143: PUSH
17144: LD_INT 34
17146: PUSH
17147: LD_INT 35
17149: PUSH
17150: LD_INT 36
17152: PUSH
17153: EMPTY
17154: LIST
17155: LIST
17156: LIST
17157: LIST
17158: LIST
17159: LIST
17160: LIST
17161: LIST
17162: LIST
17163: LIST
17164: LIST
17165: LIST
17166: LIST
17167: LIST
17168: LIST
17169: LIST
17170: LIST
17171: LIST
17172: LIST
17173: LIST
17174: LIST
17175: LIST
17176: LIST
17177: LIST
17178: LIST
17179: LIST
17180: LIST
17181: LIST
17182: LIST
17183: LIST
17184: LIST
17185: LIST
17186: LIST
17187: LIST
17188: LIST
17189: LIST
17190: PUSH
17191: LD_INT 101
17193: PUSH
17194: LD_INT 102
17196: PUSH
17197: LD_INT 103
17199: PUSH
17200: LD_INT 104
17202: PUSH
17203: LD_INT 105
17205: PUSH
17206: LD_INT 106
17208: PUSH
17209: LD_INT 107
17211: PUSH
17212: LD_INT 108
17214: PUSH
17215: LD_INT 109
17217: PUSH
17218: LD_INT 110
17220: PUSH
17221: LD_INT 111
17223: PUSH
17224: LD_INT 112
17226: PUSH
17227: LD_INT 113
17229: PUSH
17230: LD_INT 114
17232: PUSH
17233: LD_INT 115
17235: PUSH
17236: LD_INT 116
17238: PUSH
17239: LD_INT 117
17241: PUSH
17242: LD_INT 118
17244: PUSH
17245: EMPTY
17246: LIST
17247: LIST
17248: LIST
17249: LIST
17250: LIST
17251: LIST
17252: LIST
17253: LIST
17254: LIST
17255: LIST
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: PUSH
17265: EMPTY
17266: LIST
17267: LIST
17268: ST_TO_ADDR
17269: GO 17272
17271: POP
// end else
17272: GO 17503
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
17274: LD_ADDR_VAR 0 2
17278: PUSH
17279: LD_INT 1
17281: PUSH
17282: LD_INT 2
17284: PUSH
17285: LD_INT 3
17287: PUSH
17288: LD_INT 4
17290: PUSH
17291: LD_INT 5
17293: PUSH
17294: LD_INT 6
17296: PUSH
17297: LD_INT 7
17299: PUSH
17300: LD_INT 8
17302: PUSH
17303: LD_INT 9
17305: PUSH
17306: LD_INT 10
17308: PUSH
17309: LD_INT 11
17311: PUSH
17312: LD_INT 12
17314: PUSH
17315: LD_INT 13
17317: PUSH
17318: LD_INT 14
17320: PUSH
17321: LD_INT 15
17323: PUSH
17324: LD_INT 16
17326: PUSH
17327: LD_INT 17
17329: PUSH
17330: LD_INT 18
17332: PUSH
17333: LD_INT 19
17335: PUSH
17336: LD_INT 20
17338: PUSH
17339: LD_INT 21
17341: PUSH
17342: LD_INT 22
17344: PUSH
17345: LD_INT 23
17347: PUSH
17348: LD_INT 24
17350: PUSH
17351: LD_INT 25
17353: PUSH
17354: LD_INT 26
17356: PUSH
17357: LD_INT 27
17359: PUSH
17360: LD_INT 28
17362: PUSH
17363: LD_INT 29
17365: PUSH
17366: LD_INT 30
17368: PUSH
17369: LD_INT 31
17371: PUSH
17372: LD_INT 32
17374: PUSH
17375: LD_INT 33
17377: PUSH
17378: LD_INT 34
17380: PUSH
17381: LD_INT 35
17383: PUSH
17384: LD_INT 36
17386: PUSH
17387: EMPTY
17388: LIST
17389: LIST
17390: LIST
17391: LIST
17392: LIST
17393: LIST
17394: LIST
17395: LIST
17396: LIST
17397: LIST
17398: LIST
17399: LIST
17400: LIST
17401: LIST
17402: LIST
17403: LIST
17404: LIST
17405: LIST
17406: LIST
17407: LIST
17408: LIST
17409: LIST
17410: LIST
17411: LIST
17412: LIST
17413: LIST
17414: LIST
17415: LIST
17416: LIST
17417: LIST
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: LIST
17424: PUSH
17425: LD_INT 101
17427: PUSH
17428: LD_INT 102
17430: PUSH
17431: LD_INT 103
17433: PUSH
17434: LD_INT 104
17436: PUSH
17437: LD_INT 105
17439: PUSH
17440: LD_INT 106
17442: PUSH
17443: LD_INT 107
17445: PUSH
17446: LD_INT 108
17448: PUSH
17449: LD_INT 109
17451: PUSH
17452: LD_INT 110
17454: PUSH
17455: LD_INT 111
17457: PUSH
17458: LD_INT 112
17460: PUSH
17461: LD_INT 113
17463: PUSH
17464: LD_INT 114
17466: PUSH
17467: LD_INT 115
17469: PUSH
17470: LD_INT 116
17472: PUSH
17473: LD_INT 117
17475: PUSH
17476: LD_INT 118
17478: PUSH
17479: EMPTY
17480: LIST
17481: LIST
17482: LIST
17483: LIST
17484: LIST
17485: LIST
17486: LIST
17487: LIST
17488: LIST
17489: LIST
17490: LIST
17491: LIST
17492: LIST
17493: LIST
17494: LIST
17495: LIST
17496: LIST
17497: LIST
17498: PUSH
17499: EMPTY
17500: LIST
17501: LIST
17502: ST_TO_ADDR
// if result then
17503: LD_VAR 0 2
17507: IFFALSE 18293
// begin normal :=  ;
17509: LD_ADDR_VAR 0 5
17513: PUSH
17514: LD_STRING 
17516: ST_TO_ADDR
// hardcore :=  ;
17517: LD_ADDR_VAR 0 6
17521: PUSH
17522: LD_STRING 
17524: ST_TO_ADDR
// active :=  ;
17525: LD_ADDR_VAR 0 7
17529: PUSH
17530: LD_STRING 
17532: ST_TO_ADDR
// for i = 1 to normalCounter do
17533: LD_ADDR_VAR 0 8
17537: PUSH
17538: DOUBLE
17539: LD_INT 1
17541: DEC
17542: ST_TO_ADDR
17543: LD_EXP 23
17547: PUSH
17548: FOR_TO
17549: IFFALSE 17650
// begin tmp := 0 ;
17551: LD_ADDR_VAR 0 3
17555: PUSH
17556: LD_STRING 0
17558: ST_TO_ADDR
// if result [ 1 ] then
17559: LD_VAR 0 2
17563: PUSH
17564: LD_INT 1
17566: ARRAY
17567: IFFALSE 17632
// if result [ 1 ] [ 1 ] = i then
17569: LD_VAR 0 2
17573: PUSH
17574: LD_INT 1
17576: ARRAY
17577: PUSH
17578: LD_INT 1
17580: ARRAY
17581: PUSH
17582: LD_VAR 0 8
17586: EQUAL
17587: IFFALSE 17632
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
17589: LD_ADDR_VAR 0 2
17593: PUSH
17594: LD_VAR 0 2
17598: PPUSH
17599: LD_INT 1
17601: PPUSH
17602: LD_VAR 0 2
17606: PUSH
17607: LD_INT 1
17609: ARRAY
17610: PPUSH
17611: LD_INT 1
17613: PPUSH
17614: CALL_OW 3
17618: PPUSH
17619: CALL_OW 1
17623: ST_TO_ADDR
// tmp := 1 ;
17624: LD_ADDR_VAR 0 3
17628: PUSH
17629: LD_STRING 1
17631: ST_TO_ADDR
// end ; normal := normal & tmp ;
17632: LD_ADDR_VAR 0 5
17636: PUSH
17637: LD_VAR 0 5
17641: PUSH
17642: LD_VAR 0 3
17646: STR
17647: ST_TO_ADDR
// end ;
17648: GO 17548
17650: POP
17651: POP
// for i = 1 to hardcoreCounter do
17652: LD_ADDR_VAR 0 8
17656: PUSH
17657: DOUBLE
17658: LD_INT 1
17660: DEC
17661: ST_TO_ADDR
17662: LD_EXP 24
17666: PUSH
17667: FOR_TO
17668: IFFALSE 17773
// begin tmp := 0 ;
17670: LD_ADDR_VAR 0 3
17674: PUSH
17675: LD_STRING 0
17677: ST_TO_ADDR
// if result [ 2 ] then
17678: LD_VAR 0 2
17682: PUSH
17683: LD_INT 2
17685: ARRAY
17686: IFFALSE 17755
// if result [ 2 ] [ 1 ] = 100 + i then
17688: LD_VAR 0 2
17692: PUSH
17693: LD_INT 2
17695: ARRAY
17696: PUSH
17697: LD_INT 1
17699: ARRAY
17700: PUSH
17701: LD_INT 100
17703: PUSH
17704: LD_VAR 0 8
17708: PLUS
17709: EQUAL
17710: IFFALSE 17755
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
17712: LD_ADDR_VAR 0 2
17716: PUSH
17717: LD_VAR 0 2
17721: PPUSH
17722: LD_INT 2
17724: PPUSH
17725: LD_VAR 0 2
17729: PUSH
17730: LD_INT 2
17732: ARRAY
17733: PPUSH
17734: LD_INT 1
17736: PPUSH
17737: CALL_OW 3
17741: PPUSH
17742: CALL_OW 1
17746: ST_TO_ADDR
// tmp := 1 ;
17747: LD_ADDR_VAR 0 3
17751: PUSH
17752: LD_STRING 1
17754: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
17755: LD_ADDR_VAR 0 6
17759: PUSH
17760: LD_VAR 0 6
17764: PUSH
17765: LD_VAR 0 3
17769: STR
17770: ST_TO_ADDR
// end ;
17771: GO 17667
17773: POP
17774: POP
// if isGameLoad then
17775: LD_VAR 0 1
17779: IFFALSE 18254
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
17781: LD_ADDR_VAR 0 4
17785: PUSH
17786: LD_EXP 27
17790: PUSH
17791: LD_EXP 26
17795: PUSH
17796: LD_EXP 28
17800: PUSH
17801: LD_EXP 25
17805: PUSH
17806: LD_EXP 29
17810: PUSH
17811: LD_EXP 30
17815: PUSH
17816: LD_EXP 31
17820: PUSH
17821: LD_EXP 32
17825: PUSH
17826: LD_EXP 33
17830: PUSH
17831: LD_EXP 34
17835: PUSH
17836: LD_EXP 35
17840: PUSH
17841: LD_EXP 36
17845: PUSH
17846: LD_EXP 37
17850: PUSH
17851: LD_EXP 38
17855: PUSH
17856: LD_EXP 46
17860: PUSH
17861: LD_EXP 47
17865: PUSH
17866: LD_EXP 48
17870: PUSH
17871: LD_EXP 49
17875: PUSH
17876: LD_EXP 51
17880: PUSH
17881: LD_EXP 52
17885: PUSH
17886: LD_EXP 53
17890: PUSH
17891: LD_EXP 56
17895: PUSH
17896: LD_EXP 58
17900: PUSH
17901: LD_EXP 59
17905: PUSH
17906: LD_EXP 60
17910: PUSH
17911: LD_EXP 62
17915: PUSH
17916: LD_EXP 63
17920: PUSH
17921: LD_EXP 66
17925: PUSH
17926: LD_EXP 67
17930: PUSH
17931: LD_EXP 68
17935: PUSH
17936: LD_EXP 69
17940: PUSH
17941: LD_EXP 70
17945: PUSH
17946: LD_EXP 71
17950: PUSH
17951: LD_EXP 72
17955: PUSH
17956: LD_EXP 73
17960: PUSH
17961: LD_EXP 74
17965: PUSH
17966: LD_EXP 39
17970: PUSH
17971: LD_EXP 40
17975: PUSH
17976: LD_EXP 43
17980: PUSH
17981: LD_EXP 44
17985: PUSH
17986: LD_EXP 45
17990: PUSH
17991: LD_EXP 41
17995: PUSH
17996: LD_EXP 42
18000: PUSH
18001: LD_EXP 50
18005: PUSH
18006: LD_EXP 54
18010: PUSH
18011: LD_EXP 55
18015: PUSH
18016: LD_EXP 57
18020: PUSH
18021: LD_EXP 61
18025: PUSH
18026: LD_EXP 64
18030: PUSH
18031: LD_EXP 65
18035: PUSH
18036: LD_EXP 75
18040: PUSH
18041: LD_EXP 76
18045: PUSH
18046: LD_EXP 77
18050: PUSH
18051: LD_EXP 78
18055: PUSH
18056: EMPTY
18057: LIST
18058: LIST
18059: LIST
18060: LIST
18061: LIST
18062: LIST
18063: LIST
18064: LIST
18065: LIST
18066: LIST
18067: LIST
18068: LIST
18069: LIST
18070: LIST
18071: LIST
18072: LIST
18073: LIST
18074: LIST
18075: LIST
18076: LIST
18077: LIST
18078: LIST
18079: LIST
18080: LIST
18081: LIST
18082: LIST
18083: LIST
18084: LIST
18085: LIST
18086: LIST
18087: LIST
18088: LIST
18089: LIST
18090: LIST
18091: LIST
18092: LIST
18093: LIST
18094: LIST
18095: LIST
18096: LIST
18097: LIST
18098: LIST
18099: LIST
18100: LIST
18101: LIST
18102: LIST
18103: LIST
18104: LIST
18105: LIST
18106: LIST
18107: LIST
18108: LIST
18109: LIST
18110: LIST
18111: ST_TO_ADDR
// tmp :=  ;
18112: LD_ADDR_VAR 0 3
18116: PUSH
18117: LD_STRING 
18119: ST_TO_ADDR
// for i = 1 to normalCounter do
18120: LD_ADDR_VAR 0 8
18124: PUSH
18125: DOUBLE
18126: LD_INT 1
18128: DEC
18129: ST_TO_ADDR
18130: LD_EXP 23
18134: PUSH
18135: FOR_TO
18136: IFFALSE 18172
// begin if flags [ i ] then
18138: LD_VAR 0 4
18142: PUSH
18143: LD_VAR 0 8
18147: ARRAY
18148: IFFALSE 18170
// tmp := tmp & i & ; ;
18150: LD_ADDR_VAR 0 3
18154: PUSH
18155: LD_VAR 0 3
18159: PUSH
18160: LD_VAR 0 8
18164: STR
18165: PUSH
18166: LD_STRING ;
18168: STR
18169: ST_TO_ADDR
// end ;
18170: GO 18135
18172: POP
18173: POP
// for i = 1 to hardcoreCounter do
18174: LD_ADDR_VAR 0 8
18178: PUSH
18179: DOUBLE
18180: LD_INT 1
18182: DEC
18183: ST_TO_ADDR
18184: LD_EXP 24
18188: PUSH
18189: FOR_TO
18190: IFFALSE 18236
// begin if flags [ normalCounter + i ] then
18192: LD_VAR 0 4
18196: PUSH
18197: LD_EXP 23
18201: PUSH
18202: LD_VAR 0 8
18206: PLUS
18207: ARRAY
18208: IFFALSE 18234
// tmp := tmp & ( 100 + i ) & ; ;
18210: LD_ADDR_VAR 0 3
18214: PUSH
18215: LD_VAR 0 3
18219: PUSH
18220: LD_INT 100
18222: PUSH
18223: LD_VAR 0 8
18227: PLUS
18228: STR
18229: PUSH
18230: LD_STRING ;
18232: STR
18233: ST_TO_ADDR
// end ;
18234: GO 18189
18236: POP
18237: POP
// if tmp then
18238: LD_VAR 0 3
18242: IFFALSE 18254
// active := tmp ;
18244: LD_ADDR_VAR 0 7
18248: PUSH
18249: LD_VAR 0 3
18253: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
18254: LD_STRING getStreamItemsFromMission("
18256: PUSH
18257: LD_VAR 0 5
18261: STR
18262: PUSH
18263: LD_STRING ","
18265: STR
18266: PUSH
18267: LD_VAR 0 6
18271: STR
18272: PUSH
18273: LD_STRING ","
18275: STR
18276: PUSH
18277: LD_VAR 0 7
18281: STR
18282: PUSH
18283: LD_STRING ")
18285: STR
18286: PPUSH
18287: CALL_OW 559
// end else
18291: GO 18300
// ToLua ( getStreamItemsFromMission("","","") ) ;
18293: LD_STRING getStreamItemsFromMission("","","")
18295: PPUSH
18296: CALL_OW 559
// end ;
18300: LD_VAR 0 2
18304: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
18305: LD_EXP 22
18309: PUSH
18310: LD_EXP 27
18314: AND
18315: IFFALSE 18439
18317: GO 18319
18319: DISABLE
18320: LD_INT 0
18322: PPUSH
18323: PPUSH
// begin enable ;
18324: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
18325: LD_ADDR_VAR 0 2
18329: PUSH
18330: LD_INT 22
18332: PUSH
18333: LD_OWVAR 2
18337: PUSH
18338: EMPTY
18339: LIST
18340: LIST
18341: PUSH
18342: LD_INT 2
18344: PUSH
18345: LD_INT 34
18347: PUSH
18348: LD_INT 7
18350: PUSH
18351: EMPTY
18352: LIST
18353: LIST
18354: PUSH
18355: LD_INT 34
18357: PUSH
18358: LD_INT 45
18360: PUSH
18361: EMPTY
18362: LIST
18363: LIST
18364: PUSH
18365: LD_INT 34
18367: PUSH
18368: LD_INT 28
18370: PUSH
18371: EMPTY
18372: LIST
18373: LIST
18374: PUSH
18375: LD_INT 34
18377: PUSH
18378: LD_INT 47
18380: PUSH
18381: EMPTY
18382: LIST
18383: LIST
18384: PUSH
18385: EMPTY
18386: LIST
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: PUSH
18392: EMPTY
18393: LIST
18394: LIST
18395: PPUSH
18396: CALL_OW 69
18400: ST_TO_ADDR
// if not tmp then
18401: LD_VAR 0 2
18405: NOT
18406: IFFALSE 18410
// exit ;
18408: GO 18439
// for i in tmp do
18410: LD_ADDR_VAR 0 1
18414: PUSH
18415: LD_VAR 0 2
18419: PUSH
18420: FOR_IN
18421: IFFALSE 18437
// begin SetLives ( i , 0 ) ;
18423: LD_VAR 0 1
18427: PPUSH
18428: LD_INT 0
18430: PPUSH
18431: CALL_OW 234
// end ;
18435: GO 18420
18437: POP
18438: POP
// end ;
18439: PPOPN 2
18441: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
18442: LD_EXP 22
18446: PUSH
18447: LD_EXP 28
18451: AND
18452: IFFALSE 18536
18454: GO 18456
18456: DISABLE
18457: LD_INT 0
18459: PPUSH
18460: PPUSH
// begin enable ;
18461: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
18462: LD_ADDR_VAR 0 2
18466: PUSH
18467: LD_INT 22
18469: PUSH
18470: LD_OWVAR 2
18474: PUSH
18475: EMPTY
18476: LIST
18477: LIST
18478: PUSH
18479: LD_INT 32
18481: PUSH
18482: LD_INT 3
18484: PUSH
18485: EMPTY
18486: LIST
18487: LIST
18488: PUSH
18489: EMPTY
18490: LIST
18491: LIST
18492: PPUSH
18493: CALL_OW 69
18497: ST_TO_ADDR
// if not tmp then
18498: LD_VAR 0 2
18502: NOT
18503: IFFALSE 18507
// exit ;
18505: GO 18536
// for i in tmp do
18507: LD_ADDR_VAR 0 1
18511: PUSH
18512: LD_VAR 0 2
18516: PUSH
18517: FOR_IN
18518: IFFALSE 18534
// begin SetLives ( i , 0 ) ;
18520: LD_VAR 0 1
18524: PPUSH
18525: LD_INT 0
18527: PPUSH
18528: CALL_OW 234
// end ;
18532: GO 18517
18534: POP
18535: POP
// end ;
18536: PPOPN 2
18538: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
18539: LD_EXP 22
18543: PUSH
18544: LD_EXP 25
18548: AND
18549: IFFALSE 18642
18551: GO 18553
18553: DISABLE
18554: LD_INT 0
18556: PPUSH
// begin enable ;
18557: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
18558: LD_ADDR_VAR 0 1
18562: PUSH
18563: LD_INT 22
18565: PUSH
18566: LD_OWVAR 2
18570: PUSH
18571: EMPTY
18572: LIST
18573: LIST
18574: PUSH
18575: LD_INT 2
18577: PUSH
18578: LD_INT 25
18580: PUSH
18581: LD_INT 5
18583: PUSH
18584: EMPTY
18585: LIST
18586: LIST
18587: PUSH
18588: LD_INT 25
18590: PUSH
18591: LD_INT 9
18593: PUSH
18594: EMPTY
18595: LIST
18596: LIST
18597: PUSH
18598: LD_INT 25
18600: PUSH
18601: LD_INT 8
18603: PUSH
18604: EMPTY
18605: LIST
18606: LIST
18607: PUSH
18608: EMPTY
18609: LIST
18610: LIST
18611: LIST
18612: LIST
18613: PUSH
18614: EMPTY
18615: LIST
18616: LIST
18617: PPUSH
18618: CALL_OW 69
18622: PUSH
18623: FOR_IN
18624: IFFALSE 18640
// begin SetClass ( i , 1 ) ;
18626: LD_VAR 0 1
18630: PPUSH
18631: LD_INT 1
18633: PPUSH
18634: CALL_OW 336
// end ;
18638: GO 18623
18640: POP
18641: POP
// end ;
18642: PPOPN 1
18644: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
18645: LD_EXP 22
18649: PUSH
18650: LD_EXP 26
18654: AND
18655: PUSH
18656: LD_OWVAR 65
18660: PUSH
18661: LD_INT 7
18663: LESS
18664: AND
18665: IFFALSE 18679
18667: GO 18669
18669: DISABLE
// begin enable ;
18670: ENABLE
// game_speed := 7 ;
18671: LD_ADDR_OWVAR 65
18675: PUSH
18676: LD_INT 7
18678: ST_TO_ADDR
// end ;
18679: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
18680: LD_EXP 22
18684: PUSH
18685: LD_EXP 29
18689: AND
18690: IFFALSE 18892
18692: GO 18694
18694: DISABLE
18695: LD_INT 0
18697: PPUSH
18698: PPUSH
18699: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18700: LD_ADDR_VAR 0 3
18704: PUSH
18705: LD_INT 81
18707: PUSH
18708: LD_OWVAR 2
18712: PUSH
18713: EMPTY
18714: LIST
18715: LIST
18716: PUSH
18717: LD_INT 21
18719: PUSH
18720: LD_INT 1
18722: PUSH
18723: EMPTY
18724: LIST
18725: LIST
18726: PUSH
18727: EMPTY
18728: LIST
18729: LIST
18730: PPUSH
18731: CALL_OW 69
18735: ST_TO_ADDR
// if not tmp then
18736: LD_VAR 0 3
18740: NOT
18741: IFFALSE 18745
// exit ;
18743: GO 18892
// if tmp > 5 then
18745: LD_VAR 0 3
18749: PUSH
18750: LD_INT 5
18752: GREATER
18753: IFFALSE 18765
// k := 5 else
18755: LD_ADDR_VAR 0 2
18759: PUSH
18760: LD_INT 5
18762: ST_TO_ADDR
18763: GO 18775
// k := tmp ;
18765: LD_ADDR_VAR 0 2
18769: PUSH
18770: LD_VAR 0 3
18774: ST_TO_ADDR
// for i := 1 to k do
18775: LD_ADDR_VAR 0 1
18779: PUSH
18780: DOUBLE
18781: LD_INT 1
18783: DEC
18784: ST_TO_ADDR
18785: LD_VAR 0 2
18789: PUSH
18790: FOR_TO
18791: IFFALSE 18890
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
18793: LD_VAR 0 3
18797: PUSH
18798: LD_VAR 0 1
18802: ARRAY
18803: PPUSH
18804: LD_VAR 0 1
18808: PUSH
18809: LD_INT 4
18811: MOD
18812: PUSH
18813: LD_INT 1
18815: PLUS
18816: PPUSH
18817: CALL_OW 259
18821: PUSH
18822: LD_INT 10
18824: LESS
18825: IFFALSE 18888
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
18827: LD_VAR 0 3
18831: PUSH
18832: LD_VAR 0 1
18836: ARRAY
18837: PPUSH
18838: LD_VAR 0 1
18842: PUSH
18843: LD_INT 4
18845: MOD
18846: PUSH
18847: LD_INT 1
18849: PLUS
18850: PPUSH
18851: LD_VAR 0 3
18855: PUSH
18856: LD_VAR 0 1
18860: ARRAY
18861: PPUSH
18862: LD_VAR 0 1
18866: PUSH
18867: LD_INT 4
18869: MOD
18870: PUSH
18871: LD_INT 1
18873: PLUS
18874: PPUSH
18875: CALL_OW 259
18879: PUSH
18880: LD_INT 1
18882: PLUS
18883: PPUSH
18884: CALL_OW 237
18888: GO 18790
18890: POP
18891: POP
// end ;
18892: PPOPN 3
18894: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
18895: LD_EXP 22
18899: PUSH
18900: LD_EXP 30
18904: AND
18905: IFFALSE 18925
18907: GO 18909
18909: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
18910: LD_INT 4
18912: PPUSH
18913: LD_OWVAR 2
18917: PPUSH
18918: LD_INT 0
18920: PPUSH
18921: CALL_OW 324
18925: END
// every 0 0$1 trigger StreamModeActive and sShovel do
18926: LD_EXP 22
18930: PUSH
18931: LD_EXP 59
18935: AND
18936: IFFALSE 18956
18938: GO 18940
18940: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
18941: LD_INT 19
18943: PPUSH
18944: LD_OWVAR 2
18948: PPUSH
18949: LD_INT 0
18951: PPUSH
18952: CALL_OW 324
18956: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
18957: LD_EXP 22
18961: PUSH
18962: LD_EXP 31
18966: AND
18967: IFFALSE 19069
18969: GO 18971
18971: DISABLE
18972: LD_INT 0
18974: PPUSH
18975: PPUSH
// begin enable ;
18976: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
18977: LD_ADDR_VAR 0 2
18981: PUSH
18982: LD_INT 22
18984: PUSH
18985: LD_OWVAR 2
18989: PUSH
18990: EMPTY
18991: LIST
18992: LIST
18993: PUSH
18994: LD_INT 2
18996: PUSH
18997: LD_INT 34
18999: PUSH
19000: LD_INT 11
19002: PUSH
19003: EMPTY
19004: LIST
19005: LIST
19006: PUSH
19007: LD_INT 34
19009: PUSH
19010: LD_INT 30
19012: PUSH
19013: EMPTY
19014: LIST
19015: LIST
19016: PUSH
19017: EMPTY
19018: LIST
19019: LIST
19020: LIST
19021: PUSH
19022: EMPTY
19023: LIST
19024: LIST
19025: PPUSH
19026: CALL_OW 69
19030: ST_TO_ADDR
// if not tmp then
19031: LD_VAR 0 2
19035: NOT
19036: IFFALSE 19040
// exit ;
19038: GO 19069
// for i in tmp do
19040: LD_ADDR_VAR 0 1
19044: PUSH
19045: LD_VAR 0 2
19049: PUSH
19050: FOR_IN
19051: IFFALSE 19067
// begin SetLives ( i , 0 ) ;
19053: LD_VAR 0 1
19057: PPUSH
19058: LD_INT 0
19060: PPUSH
19061: CALL_OW 234
// end ;
19065: GO 19050
19067: POP
19068: POP
// end ;
19069: PPOPN 2
19071: END
// every 0 0$1 trigger StreamModeActive and sBunker do
19072: LD_EXP 22
19076: PUSH
19077: LD_EXP 32
19081: AND
19082: IFFALSE 19102
19084: GO 19086
19086: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
19087: LD_INT 32
19089: PPUSH
19090: LD_OWVAR 2
19094: PPUSH
19095: LD_INT 0
19097: PPUSH
19098: CALL_OW 324
19102: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
19103: LD_EXP 22
19107: PUSH
19108: LD_EXP 33
19112: AND
19113: IFFALSE 19294
19115: GO 19117
19117: DISABLE
19118: LD_INT 0
19120: PPUSH
19121: PPUSH
19122: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
19123: LD_ADDR_VAR 0 2
19127: PUSH
19128: LD_INT 22
19130: PUSH
19131: LD_OWVAR 2
19135: PUSH
19136: EMPTY
19137: LIST
19138: LIST
19139: PUSH
19140: LD_INT 33
19142: PUSH
19143: LD_INT 3
19145: PUSH
19146: EMPTY
19147: LIST
19148: LIST
19149: PUSH
19150: EMPTY
19151: LIST
19152: LIST
19153: PPUSH
19154: CALL_OW 69
19158: ST_TO_ADDR
// if not tmp then
19159: LD_VAR 0 2
19163: NOT
19164: IFFALSE 19168
// exit ;
19166: GO 19294
// side := 0 ;
19168: LD_ADDR_VAR 0 3
19172: PUSH
19173: LD_INT 0
19175: ST_TO_ADDR
// for i := 1 to 8 do
19176: LD_ADDR_VAR 0 1
19180: PUSH
19181: DOUBLE
19182: LD_INT 1
19184: DEC
19185: ST_TO_ADDR
19186: LD_INT 8
19188: PUSH
19189: FOR_TO
19190: IFFALSE 19238
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
19192: LD_OWVAR 2
19196: PUSH
19197: LD_VAR 0 1
19201: NONEQUAL
19202: PUSH
19203: LD_OWVAR 2
19207: PPUSH
19208: LD_VAR 0 1
19212: PPUSH
19213: CALL_OW 81
19217: PUSH
19218: LD_INT 2
19220: EQUAL
19221: AND
19222: IFFALSE 19236
// begin side := i ;
19224: LD_ADDR_VAR 0 3
19228: PUSH
19229: LD_VAR 0 1
19233: ST_TO_ADDR
// break ;
19234: GO 19238
// end ;
19236: GO 19189
19238: POP
19239: POP
// if not side then
19240: LD_VAR 0 3
19244: NOT
19245: IFFALSE 19249
// exit ;
19247: GO 19294
// for i := 1 to tmp do
19249: LD_ADDR_VAR 0 1
19253: PUSH
19254: DOUBLE
19255: LD_INT 1
19257: DEC
19258: ST_TO_ADDR
19259: LD_VAR 0 2
19263: PUSH
19264: FOR_TO
19265: IFFALSE 19292
// if Prob ( 60 ) then
19267: LD_INT 60
19269: PPUSH
19270: CALL_OW 13
19274: IFFALSE 19290
// SetSide ( i , side ) ;
19276: LD_VAR 0 1
19280: PPUSH
19281: LD_VAR 0 3
19285: PPUSH
19286: CALL_OW 235
19290: GO 19264
19292: POP
19293: POP
// end ;
19294: PPOPN 3
19296: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
19297: LD_EXP 22
19301: PUSH
19302: LD_EXP 35
19306: AND
19307: IFFALSE 19426
19309: GO 19311
19311: DISABLE
19312: LD_INT 0
19314: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
19315: LD_ADDR_VAR 0 1
19319: PUSH
19320: LD_INT 22
19322: PUSH
19323: LD_OWVAR 2
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: PUSH
19332: LD_INT 21
19334: PUSH
19335: LD_INT 1
19337: PUSH
19338: EMPTY
19339: LIST
19340: LIST
19341: PUSH
19342: LD_INT 3
19344: PUSH
19345: LD_INT 23
19347: PUSH
19348: LD_INT 0
19350: PUSH
19351: EMPTY
19352: LIST
19353: LIST
19354: PUSH
19355: EMPTY
19356: LIST
19357: LIST
19358: PUSH
19359: EMPTY
19360: LIST
19361: LIST
19362: LIST
19363: PPUSH
19364: CALL_OW 69
19368: PUSH
19369: FOR_IN
19370: IFFALSE 19424
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
19372: LD_VAR 0 1
19376: PPUSH
19377: CALL_OW 257
19381: PUSH
19382: LD_INT 1
19384: PUSH
19385: LD_INT 2
19387: PUSH
19388: LD_INT 3
19390: PUSH
19391: LD_INT 4
19393: PUSH
19394: EMPTY
19395: LIST
19396: LIST
19397: LIST
19398: LIST
19399: IN
19400: IFFALSE 19422
// SetClass ( un , rand ( 1 , 4 ) ) ;
19402: LD_VAR 0 1
19406: PPUSH
19407: LD_INT 1
19409: PPUSH
19410: LD_INT 4
19412: PPUSH
19413: CALL_OW 12
19417: PPUSH
19418: CALL_OW 336
19422: GO 19369
19424: POP
19425: POP
// end ;
19426: PPOPN 1
19428: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
19429: LD_EXP 22
19433: PUSH
19434: LD_EXP 34
19438: AND
19439: IFFALSE 19518
19441: GO 19443
19443: DISABLE
19444: LD_INT 0
19446: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19447: LD_ADDR_VAR 0 1
19451: PUSH
19452: LD_INT 22
19454: PUSH
19455: LD_OWVAR 2
19459: PUSH
19460: EMPTY
19461: LIST
19462: LIST
19463: PUSH
19464: LD_INT 21
19466: PUSH
19467: LD_INT 3
19469: PUSH
19470: EMPTY
19471: LIST
19472: LIST
19473: PUSH
19474: EMPTY
19475: LIST
19476: LIST
19477: PPUSH
19478: CALL_OW 69
19482: ST_TO_ADDR
// if not tmp then
19483: LD_VAR 0 1
19487: NOT
19488: IFFALSE 19492
// exit ;
19490: GO 19518
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
19492: LD_VAR 0 1
19496: PUSH
19497: LD_INT 1
19499: PPUSH
19500: LD_VAR 0 1
19504: PPUSH
19505: CALL_OW 12
19509: ARRAY
19510: PPUSH
19511: LD_INT 100
19513: PPUSH
19514: CALL_OW 234
// end ;
19518: PPOPN 1
19520: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
19521: LD_EXP 22
19525: PUSH
19526: LD_EXP 36
19530: AND
19531: IFFALSE 19629
19533: GO 19535
19535: DISABLE
19536: LD_INT 0
19538: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19539: LD_ADDR_VAR 0 1
19543: PUSH
19544: LD_INT 22
19546: PUSH
19547: LD_OWVAR 2
19551: PUSH
19552: EMPTY
19553: LIST
19554: LIST
19555: PUSH
19556: LD_INT 21
19558: PUSH
19559: LD_INT 1
19561: PUSH
19562: EMPTY
19563: LIST
19564: LIST
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: PPUSH
19570: CALL_OW 69
19574: ST_TO_ADDR
// if not tmp then
19575: LD_VAR 0 1
19579: NOT
19580: IFFALSE 19584
// exit ;
19582: GO 19629
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
19584: LD_VAR 0 1
19588: PUSH
19589: LD_INT 1
19591: PPUSH
19592: LD_VAR 0 1
19596: PPUSH
19597: CALL_OW 12
19601: ARRAY
19602: PPUSH
19603: LD_INT 1
19605: PPUSH
19606: LD_INT 4
19608: PPUSH
19609: CALL_OW 12
19613: PPUSH
19614: LD_INT 3000
19616: PPUSH
19617: LD_INT 9000
19619: PPUSH
19620: CALL_OW 12
19624: PPUSH
19625: CALL_OW 492
// end ;
19629: PPOPN 1
19631: END
// every 0 0$1 trigger StreamModeActive and sDepot do
19632: LD_EXP 22
19636: PUSH
19637: LD_EXP 37
19641: AND
19642: IFFALSE 19662
19644: GO 19646
19646: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
19647: LD_INT 1
19649: PPUSH
19650: LD_OWVAR 2
19654: PPUSH
19655: LD_INT 0
19657: PPUSH
19658: CALL_OW 324
19662: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
19663: LD_EXP 22
19667: PUSH
19668: LD_EXP 38
19672: AND
19673: IFFALSE 19756
19675: GO 19677
19677: DISABLE
19678: LD_INT 0
19680: PPUSH
19681: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19682: LD_ADDR_VAR 0 2
19686: PUSH
19687: LD_INT 22
19689: PUSH
19690: LD_OWVAR 2
19694: PUSH
19695: EMPTY
19696: LIST
19697: LIST
19698: PUSH
19699: LD_INT 21
19701: PUSH
19702: LD_INT 3
19704: PUSH
19705: EMPTY
19706: LIST
19707: LIST
19708: PUSH
19709: EMPTY
19710: LIST
19711: LIST
19712: PPUSH
19713: CALL_OW 69
19717: ST_TO_ADDR
// if not tmp then
19718: LD_VAR 0 2
19722: NOT
19723: IFFALSE 19727
// exit ;
19725: GO 19756
// for i in tmp do
19727: LD_ADDR_VAR 0 1
19731: PUSH
19732: LD_VAR 0 2
19736: PUSH
19737: FOR_IN
19738: IFFALSE 19754
// SetBLevel ( i , 10 ) ;
19740: LD_VAR 0 1
19744: PPUSH
19745: LD_INT 10
19747: PPUSH
19748: CALL_OW 241
19752: GO 19737
19754: POP
19755: POP
// end ;
19756: PPOPN 2
19758: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
19759: LD_EXP 22
19763: PUSH
19764: LD_EXP 39
19768: AND
19769: IFFALSE 19880
19771: GO 19773
19773: DISABLE
19774: LD_INT 0
19776: PPUSH
19777: PPUSH
19778: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19779: LD_ADDR_VAR 0 3
19783: PUSH
19784: LD_INT 22
19786: PUSH
19787: LD_OWVAR 2
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: PUSH
19796: LD_INT 25
19798: PUSH
19799: LD_INT 1
19801: PUSH
19802: EMPTY
19803: LIST
19804: LIST
19805: PUSH
19806: EMPTY
19807: LIST
19808: LIST
19809: PPUSH
19810: CALL_OW 69
19814: ST_TO_ADDR
// if not tmp then
19815: LD_VAR 0 3
19819: NOT
19820: IFFALSE 19824
// exit ;
19822: GO 19880
// un := tmp [ rand ( 1 , tmp ) ] ;
19824: LD_ADDR_VAR 0 2
19828: PUSH
19829: LD_VAR 0 3
19833: PUSH
19834: LD_INT 1
19836: PPUSH
19837: LD_VAR 0 3
19841: PPUSH
19842: CALL_OW 12
19846: ARRAY
19847: ST_TO_ADDR
// if Crawls ( un ) then
19848: LD_VAR 0 2
19852: PPUSH
19853: CALL_OW 318
19857: IFFALSE 19868
// ComWalk ( un ) ;
19859: LD_VAR 0 2
19863: PPUSH
19864: CALL_OW 138
// SetClass ( un , class_sniper ) ;
19868: LD_VAR 0 2
19872: PPUSH
19873: LD_INT 5
19875: PPUSH
19876: CALL_OW 336
// end ;
19880: PPOPN 3
19882: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
19883: LD_EXP 22
19887: PUSH
19888: LD_EXP 40
19892: AND
19893: PUSH
19894: LD_OWVAR 67
19898: PUSH
19899: LD_INT 4
19901: LESS
19902: AND
19903: IFFALSE 19922
19905: GO 19907
19907: DISABLE
// begin Difficulty := Difficulty + 1 ;
19908: LD_ADDR_OWVAR 67
19912: PUSH
19913: LD_OWVAR 67
19917: PUSH
19918: LD_INT 1
19920: PLUS
19921: ST_TO_ADDR
// end ;
19922: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
19923: LD_EXP 22
19927: PUSH
19928: LD_EXP 41
19932: AND
19933: IFFALSE 20036
19935: GO 19937
19937: DISABLE
19938: LD_INT 0
19940: PPUSH
// begin for i := 1 to 5 do
19941: LD_ADDR_VAR 0 1
19945: PUSH
19946: DOUBLE
19947: LD_INT 1
19949: DEC
19950: ST_TO_ADDR
19951: LD_INT 5
19953: PUSH
19954: FOR_TO
19955: IFFALSE 20034
// begin uc_nation := nation_nature ;
19957: LD_ADDR_OWVAR 21
19961: PUSH
19962: LD_INT 0
19964: ST_TO_ADDR
// uc_side := 0 ;
19965: LD_ADDR_OWVAR 20
19969: PUSH
19970: LD_INT 0
19972: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19973: LD_ADDR_OWVAR 29
19977: PUSH
19978: LD_INT 12
19980: PUSH
19981: LD_INT 12
19983: PUSH
19984: EMPTY
19985: LIST
19986: LIST
19987: ST_TO_ADDR
// hc_agressivity := 20 ;
19988: LD_ADDR_OWVAR 35
19992: PUSH
19993: LD_INT 20
19995: ST_TO_ADDR
// hc_class := class_tiger ;
19996: LD_ADDR_OWVAR 28
20000: PUSH
20001: LD_INT 14
20003: ST_TO_ADDR
// hc_gallery :=  ;
20004: LD_ADDR_OWVAR 33
20008: PUSH
20009: LD_STRING 
20011: ST_TO_ADDR
// hc_name :=  ;
20012: LD_ADDR_OWVAR 26
20016: PUSH
20017: LD_STRING 
20019: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
20020: CALL_OW 44
20024: PPUSH
20025: LD_INT 0
20027: PPUSH
20028: CALL_OW 51
// end ;
20032: GO 19954
20034: POP
20035: POP
// end ;
20036: PPOPN 1
20038: END
// every 0 0$1 trigger StreamModeActive and sBomb do
20039: LD_EXP 22
20043: PUSH
20044: LD_EXP 42
20048: AND
20049: IFFALSE 20058
20051: GO 20053
20053: DISABLE
// StreamSibBomb ;
20054: CALL 20059 0 0
20058: END
// export function StreamSibBomb ; var i , x , y ; begin
20059: LD_INT 0
20061: PPUSH
20062: PPUSH
20063: PPUSH
20064: PPUSH
// result := false ;
20065: LD_ADDR_VAR 0 1
20069: PUSH
20070: LD_INT 0
20072: ST_TO_ADDR
// for i := 1 to 16 do
20073: LD_ADDR_VAR 0 2
20077: PUSH
20078: DOUBLE
20079: LD_INT 1
20081: DEC
20082: ST_TO_ADDR
20083: LD_INT 16
20085: PUSH
20086: FOR_TO
20087: IFFALSE 20286
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20089: LD_ADDR_VAR 0 3
20093: PUSH
20094: LD_INT 10
20096: PUSH
20097: LD_INT 20
20099: PUSH
20100: LD_INT 30
20102: PUSH
20103: LD_INT 40
20105: PUSH
20106: LD_INT 50
20108: PUSH
20109: LD_INT 60
20111: PUSH
20112: LD_INT 70
20114: PUSH
20115: LD_INT 80
20117: PUSH
20118: LD_INT 90
20120: PUSH
20121: LD_INT 100
20123: PUSH
20124: LD_INT 110
20126: PUSH
20127: LD_INT 120
20129: PUSH
20130: LD_INT 130
20132: PUSH
20133: LD_INT 140
20135: PUSH
20136: LD_INT 150
20138: PUSH
20139: EMPTY
20140: LIST
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: PUSH
20156: LD_INT 1
20158: PPUSH
20159: LD_INT 15
20161: PPUSH
20162: CALL_OW 12
20166: ARRAY
20167: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20168: LD_ADDR_VAR 0 4
20172: PUSH
20173: LD_INT 10
20175: PUSH
20176: LD_INT 20
20178: PUSH
20179: LD_INT 30
20181: PUSH
20182: LD_INT 40
20184: PUSH
20185: LD_INT 50
20187: PUSH
20188: LD_INT 60
20190: PUSH
20191: LD_INT 70
20193: PUSH
20194: LD_INT 80
20196: PUSH
20197: LD_INT 90
20199: PUSH
20200: LD_INT 100
20202: PUSH
20203: LD_INT 110
20205: PUSH
20206: LD_INT 120
20208: PUSH
20209: LD_INT 130
20211: PUSH
20212: LD_INT 140
20214: PUSH
20215: LD_INT 150
20217: PUSH
20218: EMPTY
20219: LIST
20220: LIST
20221: LIST
20222: LIST
20223: LIST
20224: LIST
20225: LIST
20226: LIST
20227: LIST
20228: LIST
20229: LIST
20230: LIST
20231: LIST
20232: LIST
20233: LIST
20234: PUSH
20235: LD_INT 1
20237: PPUSH
20238: LD_INT 15
20240: PPUSH
20241: CALL_OW 12
20245: ARRAY
20246: ST_TO_ADDR
// if ValidHex ( x , y ) then
20247: LD_VAR 0 3
20251: PPUSH
20252: LD_VAR 0 4
20256: PPUSH
20257: CALL_OW 488
20261: IFFALSE 20284
// begin result := [ x , y ] ;
20263: LD_ADDR_VAR 0 1
20267: PUSH
20268: LD_VAR 0 3
20272: PUSH
20273: LD_VAR 0 4
20277: PUSH
20278: EMPTY
20279: LIST
20280: LIST
20281: ST_TO_ADDR
// break ;
20282: GO 20286
// end ; end ;
20284: GO 20086
20286: POP
20287: POP
// if result then
20288: LD_VAR 0 1
20292: IFFALSE 20352
// begin ToLua ( playSibBomb() ) ;
20294: LD_STRING playSibBomb()
20296: PPUSH
20297: CALL_OW 559
// wait ( 0 0$14 ) ;
20301: LD_INT 490
20303: PPUSH
20304: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
20308: LD_VAR 0 1
20312: PUSH
20313: LD_INT 1
20315: ARRAY
20316: PPUSH
20317: LD_VAR 0 1
20321: PUSH
20322: LD_INT 2
20324: ARRAY
20325: PPUSH
20326: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
20330: LD_VAR 0 1
20334: PUSH
20335: LD_INT 1
20337: ARRAY
20338: PPUSH
20339: LD_VAR 0 1
20343: PUSH
20344: LD_INT 2
20346: ARRAY
20347: PPUSH
20348: CALL_OW 429
// end ; end ;
20352: LD_VAR 0 1
20356: RET
// every 0 0$1 trigger StreamModeActive and sReset do
20357: LD_EXP 22
20361: PUSH
20362: LD_EXP 44
20366: AND
20367: IFFALSE 20379
20369: GO 20371
20371: DISABLE
// YouLost (  ) ;
20372: LD_STRING 
20374: PPUSH
20375: CALL_OW 104
20379: END
// every 0 0$1 trigger StreamModeActive and sFog do
20380: LD_EXP 22
20384: PUSH
20385: LD_EXP 43
20389: AND
20390: IFFALSE 20404
20392: GO 20394
20394: DISABLE
// FogOff ( your_side ) ;
20395: LD_OWVAR 2
20399: PPUSH
20400: CALL_OW 344
20404: END
// every 0 0$1 trigger StreamModeActive and sSun do
20405: LD_EXP 22
20409: PUSH
20410: LD_EXP 45
20414: AND
20415: IFFALSE 20443
20417: GO 20419
20419: DISABLE
// begin solar_recharge_percent := 0 ;
20420: LD_ADDR_OWVAR 79
20424: PUSH
20425: LD_INT 0
20427: ST_TO_ADDR
// wait ( 5 5$00 ) ;
20428: LD_INT 10500
20430: PPUSH
20431: CALL_OW 67
// solar_recharge_percent := 100 ;
20435: LD_ADDR_OWVAR 79
20439: PUSH
20440: LD_INT 100
20442: ST_TO_ADDR
// end ;
20443: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
20444: LD_EXP 22
20448: PUSH
20449: LD_EXP 46
20453: AND
20454: IFFALSE 20693
20456: GO 20458
20458: DISABLE
20459: LD_INT 0
20461: PPUSH
20462: PPUSH
20463: PPUSH
// begin tmp := [ ] ;
20464: LD_ADDR_VAR 0 3
20468: PUSH
20469: EMPTY
20470: ST_TO_ADDR
// for i := 1 to 6 do
20471: LD_ADDR_VAR 0 1
20475: PUSH
20476: DOUBLE
20477: LD_INT 1
20479: DEC
20480: ST_TO_ADDR
20481: LD_INT 6
20483: PUSH
20484: FOR_TO
20485: IFFALSE 20590
// begin uc_nation := nation_nature ;
20487: LD_ADDR_OWVAR 21
20491: PUSH
20492: LD_INT 0
20494: ST_TO_ADDR
// uc_side := 0 ;
20495: LD_ADDR_OWVAR 20
20499: PUSH
20500: LD_INT 0
20502: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20503: LD_ADDR_OWVAR 29
20507: PUSH
20508: LD_INT 12
20510: PUSH
20511: LD_INT 12
20513: PUSH
20514: EMPTY
20515: LIST
20516: LIST
20517: ST_TO_ADDR
// hc_agressivity := 20 ;
20518: LD_ADDR_OWVAR 35
20522: PUSH
20523: LD_INT 20
20525: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
20526: LD_ADDR_OWVAR 28
20530: PUSH
20531: LD_INT 17
20533: ST_TO_ADDR
// hc_gallery :=  ;
20534: LD_ADDR_OWVAR 33
20538: PUSH
20539: LD_STRING 
20541: ST_TO_ADDR
// hc_name :=  ;
20542: LD_ADDR_OWVAR 26
20546: PUSH
20547: LD_STRING 
20549: ST_TO_ADDR
// un := CreateHuman ;
20550: LD_ADDR_VAR 0 2
20554: PUSH
20555: CALL_OW 44
20559: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
20560: LD_VAR 0 2
20564: PPUSH
20565: LD_INT 1
20567: PPUSH
20568: CALL_OW 51
// tmp := tmp ^ un ;
20572: LD_ADDR_VAR 0 3
20576: PUSH
20577: LD_VAR 0 3
20581: PUSH
20582: LD_VAR 0 2
20586: ADD
20587: ST_TO_ADDR
// end ;
20588: GO 20484
20590: POP
20591: POP
// repeat wait ( 0 0$1 ) ;
20592: LD_INT 35
20594: PPUSH
20595: CALL_OW 67
// for un in tmp do
20599: LD_ADDR_VAR 0 2
20603: PUSH
20604: LD_VAR 0 3
20608: PUSH
20609: FOR_IN
20610: IFFALSE 20684
// begin if IsDead ( un ) then
20612: LD_VAR 0 2
20616: PPUSH
20617: CALL_OW 301
20621: IFFALSE 20641
// begin tmp := tmp diff un ;
20623: LD_ADDR_VAR 0 3
20627: PUSH
20628: LD_VAR 0 3
20632: PUSH
20633: LD_VAR 0 2
20637: DIFF
20638: ST_TO_ADDR
// continue ;
20639: GO 20609
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
20641: LD_VAR 0 2
20645: PPUSH
20646: LD_INT 3
20648: PUSH
20649: LD_INT 22
20651: PUSH
20652: LD_INT 0
20654: PUSH
20655: EMPTY
20656: LIST
20657: LIST
20658: PUSH
20659: EMPTY
20660: LIST
20661: LIST
20662: PPUSH
20663: CALL_OW 69
20667: PPUSH
20668: LD_VAR 0 2
20672: PPUSH
20673: CALL_OW 74
20677: PPUSH
20678: CALL_OW 115
// end ;
20682: GO 20609
20684: POP
20685: POP
// until not tmp ;
20686: LD_VAR 0 3
20690: NOT
20691: IFFALSE 20592
// end ;
20693: PPOPN 3
20695: END
// every 0 0$1 trigger StreamModeActive and sTroll do
20696: LD_EXP 22
20700: PUSH
20701: LD_EXP 47
20705: AND
20706: IFFALSE 20760
20708: GO 20710
20710: DISABLE
// begin ToLua ( displayTroll(); ) ;
20711: LD_STRING displayTroll();
20713: PPUSH
20714: CALL_OW 559
// wait ( 3 3$00 ) ;
20718: LD_INT 6300
20720: PPUSH
20721: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20725: LD_STRING hideTroll();
20727: PPUSH
20728: CALL_OW 559
// wait ( 1 1$00 ) ;
20732: LD_INT 2100
20734: PPUSH
20735: CALL_OW 67
// ToLua ( displayTroll(); ) ;
20739: LD_STRING displayTroll();
20741: PPUSH
20742: CALL_OW 559
// wait ( 1 1$00 ) ;
20746: LD_INT 2100
20748: PPUSH
20749: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20753: LD_STRING hideTroll();
20755: PPUSH
20756: CALL_OW 559
// end ;
20760: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
20761: LD_EXP 22
20765: PUSH
20766: LD_EXP 48
20770: AND
20771: IFFALSE 20834
20773: GO 20775
20775: DISABLE
20776: LD_INT 0
20778: PPUSH
// begin p := 0 ;
20779: LD_ADDR_VAR 0 1
20783: PUSH
20784: LD_INT 0
20786: ST_TO_ADDR
// repeat game_speed := 1 ;
20787: LD_ADDR_OWVAR 65
20791: PUSH
20792: LD_INT 1
20794: ST_TO_ADDR
// wait ( 0 0$1 ) ;
20795: LD_INT 35
20797: PPUSH
20798: CALL_OW 67
// p := p + 1 ;
20802: LD_ADDR_VAR 0 1
20806: PUSH
20807: LD_VAR 0 1
20811: PUSH
20812: LD_INT 1
20814: PLUS
20815: ST_TO_ADDR
// until p >= 60 ;
20816: LD_VAR 0 1
20820: PUSH
20821: LD_INT 60
20823: GREATEREQUAL
20824: IFFALSE 20787
// game_speed := 4 ;
20826: LD_ADDR_OWVAR 65
20830: PUSH
20831: LD_INT 4
20833: ST_TO_ADDR
// end ;
20834: PPOPN 1
20836: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
20837: LD_EXP 22
20841: PUSH
20842: LD_EXP 49
20846: AND
20847: IFFALSE 20993
20849: GO 20851
20851: DISABLE
20852: LD_INT 0
20854: PPUSH
20855: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20856: LD_ADDR_VAR 0 1
20860: PUSH
20861: LD_INT 22
20863: PUSH
20864: LD_OWVAR 2
20868: PUSH
20869: EMPTY
20870: LIST
20871: LIST
20872: PUSH
20873: LD_INT 2
20875: PUSH
20876: LD_INT 30
20878: PUSH
20879: LD_INT 0
20881: PUSH
20882: EMPTY
20883: LIST
20884: LIST
20885: PUSH
20886: LD_INT 30
20888: PUSH
20889: LD_INT 1
20891: PUSH
20892: EMPTY
20893: LIST
20894: LIST
20895: PUSH
20896: EMPTY
20897: LIST
20898: LIST
20899: LIST
20900: PUSH
20901: EMPTY
20902: LIST
20903: LIST
20904: PPUSH
20905: CALL_OW 69
20909: ST_TO_ADDR
// if not depot then
20910: LD_VAR 0 1
20914: NOT
20915: IFFALSE 20919
// exit ;
20917: GO 20993
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20919: LD_ADDR_VAR 0 2
20923: PUSH
20924: LD_VAR 0 1
20928: PUSH
20929: LD_INT 1
20931: PPUSH
20932: LD_VAR 0 1
20936: PPUSH
20937: CALL_OW 12
20941: ARRAY
20942: PPUSH
20943: CALL_OW 274
20947: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
20948: LD_VAR 0 2
20952: PPUSH
20953: LD_INT 1
20955: PPUSH
20956: LD_INT 0
20958: PPUSH
20959: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
20963: LD_VAR 0 2
20967: PPUSH
20968: LD_INT 2
20970: PPUSH
20971: LD_INT 0
20973: PPUSH
20974: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
20978: LD_VAR 0 2
20982: PPUSH
20983: LD_INT 3
20985: PPUSH
20986: LD_INT 0
20988: PPUSH
20989: CALL_OW 277
// end ;
20993: PPOPN 2
20995: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
20996: LD_EXP 22
21000: PUSH
21001: LD_EXP 50
21005: AND
21006: IFFALSE 21103
21008: GO 21010
21010: DISABLE
21011: LD_INT 0
21013: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21014: LD_ADDR_VAR 0 1
21018: PUSH
21019: LD_INT 22
21021: PUSH
21022: LD_OWVAR 2
21026: PUSH
21027: EMPTY
21028: LIST
21029: LIST
21030: PUSH
21031: LD_INT 21
21033: PUSH
21034: LD_INT 1
21036: PUSH
21037: EMPTY
21038: LIST
21039: LIST
21040: PUSH
21041: LD_INT 3
21043: PUSH
21044: LD_INT 23
21046: PUSH
21047: LD_INT 0
21049: PUSH
21050: EMPTY
21051: LIST
21052: LIST
21053: PUSH
21054: EMPTY
21055: LIST
21056: LIST
21057: PUSH
21058: EMPTY
21059: LIST
21060: LIST
21061: LIST
21062: PPUSH
21063: CALL_OW 69
21067: ST_TO_ADDR
// if not tmp then
21068: LD_VAR 0 1
21072: NOT
21073: IFFALSE 21077
// exit ;
21075: GO 21103
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
21077: LD_VAR 0 1
21081: PUSH
21082: LD_INT 1
21084: PPUSH
21085: LD_VAR 0 1
21089: PPUSH
21090: CALL_OW 12
21094: ARRAY
21095: PPUSH
21096: LD_INT 200
21098: PPUSH
21099: CALL_OW 234
// end ;
21103: PPOPN 1
21105: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
21106: LD_EXP 22
21110: PUSH
21111: LD_EXP 51
21115: AND
21116: IFFALSE 21195
21118: GO 21120
21120: DISABLE
21121: LD_INT 0
21123: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
21124: LD_ADDR_VAR 0 1
21128: PUSH
21129: LD_INT 22
21131: PUSH
21132: LD_OWVAR 2
21136: PUSH
21137: EMPTY
21138: LIST
21139: LIST
21140: PUSH
21141: LD_INT 21
21143: PUSH
21144: LD_INT 2
21146: PUSH
21147: EMPTY
21148: LIST
21149: LIST
21150: PUSH
21151: EMPTY
21152: LIST
21153: LIST
21154: PPUSH
21155: CALL_OW 69
21159: ST_TO_ADDR
// if not tmp then
21160: LD_VAR 0 1
21164: NOT
21165: IFFALSE 21169
// exit ;
21167: GO 21195
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
21169: LD_VAR 0 1
21173: PUSH
21174: LD_INT 1
21176: PPUSH
21177: LD_VAR 0 1
21181: PPUSH
21182: CALL_OW 12
21186: ARRAY
21187: PPUSH
21188: LD_INT 60
21190: PPUSH
21191: CALL_OW 234
// end ;
21195: PPOPN 1
21197: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
21198: LD_EXP 22
21202: PUSH
21203: LD_EXP 52
21207: AND
21208: IFFALSE 21307
21210: GO 21212
21212: DISABLE
21213: LD_INT 0
21215: PPUSH
21216: PPUSH
// begin enable ;
21217: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
21218: LD_ADDR_VAR 0 1
21222: PUSH
21223: LD_INT 22
21225: PUSH
21226: LD_OWVAR 2
21230: PUSH
21231: EMPTY
21232: LIST
21233: LIST
21234: PUSH
21235: LD_INT 61
21237: PUSH
21238: EMPTY
21239: LIST
21240: PUSH
21241: LD_INT 33
21243: PUSH
21244: LD_INT 2
21246: PUSH
21247: EMPTY
21248: LIST
21249: LIST
21250: PUSH
21251: EMPTY
21252: LIST
21253: LIST
21254: LIST
21255: PPUSH
21256: CALL_OW 69
21260: ST_TO_ADDR
// if not tmp then
21261: LD_VAR 0 1
21265: NOT
21266: IFFALSE 21270
// exit ;
21268: GO 21307
// for i in tmp do
21270: LD_ADDR_VAR 0 2
21274: PUSH
21275: LD_VAR 0 1
21279: PUSH
21280: FOR_IN
21281: IFFALSE 21305
// if IsControledBy ( i ) then
21283: LD_VAR 0 2
21287: PPUSH
21288: CALL_OW 312
21292: IFFALSE 21303
// ComUnlink ( i ) ;
21294: LD_VAR 0 2
21298: PPUSH
21299: CALL_OW 136
21303: GO 21280
21305: POP
21306: POP
// end ;
21307: PPOPN 2
21309: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
21310: LD_EXP 22
21314: PUSH
21315: LD_EXP 53
21319: AND
21320: IFFALSE 21460
21322: GO 21324
21324: DISABLE
21325: LD_INT 0
21327: PPUSH
21328: PPUSH
// begin ToLua ( displayPowell(); ) ;
21329: LD_STRING displayPowell();
21331: PPUSH
21332: CALL_OW 559
// uc_side := 0 ;
21336: LD_ADDR_OWVAR 20
21340: PUSH
21341: LD_INT 0
21343: ST_TO_ADDR
// uc_nation := 2 ;
21344: LD_ADDR_OWVAR 21
21348: PUSH
21349: LD_INT 2
21351: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
21352: LD_ADDR_OWVAR 37
21356: PUSH
21357: LD_INT 14
21359: ST_TO_ADDR
// vc_engine := engine_siberite ;
21360: LD_ADDR_OWVAR 39
21364: PUSH
21365: LD_INT 3
21367: ST_TO_ADDR
// vc_control := control_apeman ;
21368: LD_ADDR_OWVAR 38
21372: PUSH
21373: LD_INT 5
21375: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
21376: LD_ADDR_OWVAR 40
21380: PUSH
21381: LD_INT 29
21383: ST_TO_ADDR
// un := CreateVehicle ;
21384: LD_ADDR_VAR 0 2
21388: PUSH
21389: CALL_OW 45
21393: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21394: LD_VAR 0 2
21398: PPUSH
21399: LD_INT 1
21401: PPUSH
21402: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21406: LD_INT 35
21408: PPUSH
21409: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21413: LD_VAR 0 2
21417: PPUSH
21418: LD_INT 22
21420: PUSH
21421: LD_OWVAR 2
21425: PUSH
21426: EMPTY
21427: LIST
21428: LIST
21429: PPUSH
21430: CALL_OW 69
21434: PPUSH
21435: LD_VAR 0 2
21439: PPUSH
21440: CALL_OW 74
21444: PPUSH
21445: CALL_OW 115
// until IsDead ( un ) ;
21449: LD_VAR 0 2
21453: PPUSH
21454: CALL_OW 301
21458: IFFALSE 21406
// end ;
21460: PPOPN 2
21462: END
// every 0 0$1 trigger StreamModeActive and sStu do
21463: LD_EXP 22
21467: PUSH
21468: LD_EXP 61
21472: AND
21473: IFFALSE 21489
21475: GO 21477
21477: DISABLE
// begin ToLua ( displayStucuk(); ) ;
21478: LD_STRING displayStucuk();
21480: PPUSH
21481: CALL_OW 559
// ResetFog ;
21485: CALL_OW 335
// end ;
21489: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
21490: LD_EXP 22
21494: PUSH
21495: LD_EXP 54
21499: AND
21500: IFFALSE 21641
21502: GO 21504
21504: DISABLE
21505: LD_INT 0
21507: PPUSH
21508: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21509: LD_ADDR_VAR 0 2
21513: PUSH
21514: LD_INT 22
21516: PUSH
21517: LD_OWVAR 2
21521: PUSH
21522: EMPTY
21523: LIST
21524: LIST
21525: PUSH
21526: LD_INT 21
21528: PUSH
21529: LD_INT 1
21531: PUSH
21532: EMPTY
21533: LIST
21534: LIST
21535: PUSH
21536: EMPTY
21537: LIST
21538: LIST
21539: PPUSH
21540: CALL_OW 69
21544: ST_TO_ADDR
// if not tmp then
21545: LD_VAR 0 2
21549: NOT
21550: IFFALSE 21554
// exit ;
21552: GO 21641
// un := tmp [ rand ( 1 , tmp ) ] ;
21554: LD_ADDR_VAR 0 1
21558: PUSH
21559: LD_VAR 0 2
21563: PUSH
21564: LD_INT 1
21566: PPUSH
21567: LD_VAR 0 2
21571: PPUSH
21572: CALL_OW 12
21576: ARRAY
21577: ST_TO_ADDR
// SetSide ( un , 0 ) ;
21578: LD_VAR 0 1
21582: PPUSH
21583: LD_INT 0
21585: PPUSH
21586: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
21590: LD_VAR 0 1
21594: PPUSH
21595: LD_OWVAR 3
21599: PUSH
21600: LD_VAR 0 1
21604: DIFF
21605: PPUSH
21606: LD_VAR 0 1
21610: PPUSH
21611: CALL_OW 74
21615: PPUSH
21616: CALL_OW 115
// wait ( 0 0$20 ) ;
21620: LD_INT 700
21622: PPUSH
21623: CALL_OW 67
// SetSide ( un , your_side ) ;
21627: LD_VAR 0 1
21631: PPUSH
21632: LD_OWVAR 2
21636: PPUSH
21637: CALL_OW 235
// end ;
21641: PPOPN 2
21643: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
21644: LD_EXP 22
21648: PUSH
21649: LD_EXP 55
21653: AND
21654: IFFALSE 21760
21656: GO 21658
21658: DISABLE
21659: LD_INT 0
21661: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21662: LD_ADDR_VAR 0 1
21666: PUSH
21667: LD_INT 22
21669: PUSH
21670: LD_OWVAR 2
21674: PUSH
21675: EMPTY
21676: LIST
21677: LIST
21678: PUSH
21679: LD_INT 2
21681: PUSH
21682: LD_INT 30
21684: PUSH
21685: LD_INT 0
21687: PUSH
21688: EMPTY
21689: LIST
21690: LIST
21691: PUSH
21692: LD_INT 30
21694: PUSH
21695: LD_INT 1
21697: PUSH
21698: EMPTY
21699: LIST
21700: LIST
21701: PUSH
21702: EMPTY
21703: LIST
21704: LIST
21705: LIST
21706: PUSH
21707: EMPTY
21708: LIST
21709: LIST
21710: PPUSH
21711: CALL_OW 69
21715: ST_TO_ADDR
// if not depot then
21716: LD_VAR 0 1
21720: NOT
21721: IFFALSE 21725
// exit ;
21723: GO 21760
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
21725: LD_VAR 0 1
21729: PUSH
21730: LD_INT 1
21732: ARRAY
21733: PPUSH
21734: CALL_OW 250
21738: PPUSH
21739: LD_VAR 0 1
21743: PUSH
21744: LD_INT 1
21746: ARRAY
21747: PPUSH
21748: CALL_OW 251
21752: PPUSH
21753: LD_INT 70
21755: PPUSH
21756: CALL_OW 495
// end ;
21760: PPOPN 1
21762: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
21763: LD_EXP 22
21767: PUSH
21768: LD_EXP 56
21772: AND
21773: IFFALSE 21984
21775: GO 21777
21777: DISABLE
21778: LD_INT 0
21780: PPUSH
21781: PPUSH
21782: PPUSH
21783: PPUSH
21784: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21785: LD_ADDR_VAR 0 5
21789: PUSH
21790: LD_INT 22
21792: PUSH
21793: LD_OWVAR 2
21797: PUSH
21798: EMPTY
21799: LIST
21800: LIST
21801: PUSH
21802: LD_INT 21
21804: PUSH
21805: LD_INT 1
21807: PUSH
21808: EMPTY
21809: LIST
21810: LIST
21811: PUSH
21812: EMPTY
21813: LIST
21814: LIST
21815: PPUSH
21816: CALL_OW 69
21820: ST_TO_ADDR
// if not tmp then
21821: LD_VAR 0 5
21825: NOT
21826: IFFALSE 21830
// exit ;
21828: GO 21984
// for i in tmp do
21830: LD_ADDR_VAR 0 1
21834: PUSH
21835: LD_VAR 0 5
21839: PUSH
21840: FOR_IN
21841: IFFALSE 21982
// begin d := rand ( 0 , 5 ) ;
21843: LD_ADDR_VAR 0 4
21847: PUSH
21848: LD_INT 0
21850: PPUSH
21851: LD_INT 5
21853: PPUSH
21854: CALL_OW 12
21858: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
21859: LD_ADDR_VAR 0 2
21863: PUSH
21864: LD_VAR 0 1
21868: PPUSH
21869: CALL_OW 250
21873: PPUSH
21874: LD_VAR 0 4
21878: PPUSH
21879: LD_INT 3
21881: PPUSH
21882: LD_INT 12
21884: PPUSH
21885: CALL_OW 12
21889: PPUSH
21890: CALL_OW 272
21894: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
21895: LD_ADDR_VAR 0 3
21899: PUSH
21900: LD_VAR 0 1
21904: PPUSH
21905: CALL_OW 251
21909: PPUSH
21910: LD_VAR 0 4
21914: PPUSH
21915: LD_INT 3
21917: PPUSH
21918: LD_INT 12
21920: PPUSH
21921: CALL_OW 12
21925: PPUSH
21926: CALL_OW 273
21930: ST_TO_ADDR
// if ValidHex ( x , y ) then
21931: LD_VAR 0 2
21935: PPUSH
21936: LD_VAR 0 3
21940: PPUSH
21941: CALL_OW 488
21945: IFFALSE 21980
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
21947: LD_VAR 0 1
21951: PPUSH
21952: LD_VAR 0 2
21956: PPUSH
21957: LD_VAR 0 3
21961: PPUSH
21962: LD_INT 3
21964: PPUSH
21965: LD_INT 6
21967: PPUSH
21968: CALL_OW 12
21972: PPUSH
21973: LD_INT 1
21975: PPUSH
21976: CALL_OW 483
// end ;
21980: GO 21840
21982: POP
21983: POP
// end ;
21984: PPOPN 5
21986: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
21987: LD_EXP 22
21991: PUSH
21992: LD_EXP 57
21996: AND
21997: IFFALSE 22091
21999: GO 22001
22001: DISABLE
22002: LD_INT 0
22004: PPUSH
22005: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
22006: LD_ADDR_VAR 0 2
22010: PUSH
22011: LD_INT 22
22013: PUSH
22014: LD_OWVAR 2
22018: PUSH
22019: EMPTY
22020: LIST
22021: LIST
22022: PUSH
22023: LD_INT 32
22025: PUSH
22026: LD_INT 1
22028: PUSH
22029: EMPTY
22030: LIST
22031: LIST
22032: PUSH
22033: LD_INT 21
22035: PUSH
22036: LD_INT 2
22038: PUSH
22039: EMPTY
22040: LIST
22041: LIST
22042: PUSH
22043: EMPTY
22044: LIST
22045: LIST
22046: LIST
22047: PPUSH
22048: CALL_OW 69
22052: ST_TO_ADDR
// if not tmp then
22053: LD_VAR 0 2
22057: NOT
22058: IFFALSE 22062
// exit ;
22060: GO 22091
// for i in tmp do
22062: LD_ADDR_VAR 0 1
22066: PUSH
22067: LD_VAR 0 2
22071: PUSH
22072: FOR_IN
22073: IFFALSE 22089
// SetFuel ( i , 0 ) ;
22075: LD_VAR 0 1
22079: PPUSH
22080: LD_INT 0
22082: PPUSH
22083: CALL_OW 240
22087: GO 22072
22089: POP
22090: POP
// end ;
22091: PPOPN 2
22093: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
22094: LD_EXP 22
22098: PUSH
22099: LD_EXP 58
22103: AND
22104: IFFALSE 22170
22106: GO 22108
22108: DISABLE
22109: LD_INT 0
22111: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22112: LD_ADDR_VAR 0 1
22116: PUSH
22117: LD_INT 22
22119: PUSH
22120: LD_OWVAR 2
22124: PUSH
22125: EMPTY
22126: LIST
22127: LIST
22128: PUSH
22129: LD_INT 30
22131: PUSH
22132: LD_INT 29
22134: PUSH
22135: EMPTY
22136: LIST
22137: LIST
22138: PUSH
22139: EMPTY
22140: LIST
22141: LIST
22142: PPUSH
22143: CALL_OW 69
22147: ST_TO_ADDR
// if not tmp then
22148: LD_VAR 0 1
22152: NOT
22153: IFFALSE 22157
// exit ;
22155: GO 22170
// DestroyUnit ( tmp [ 1 ] ) ;
22157: LD_VAR 0 1
22161: PUSH
22162: LD_INT 1
22164: ARRAY
22165: PPUSH
22166: CALL_OW 65
// end ;
22170: PPOPN 1
22172: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
22173: LD_EXP 22
22177: PUSH
22178: LD_EXP 60
22182: AND
22183: IFFALSE 22312
22185: GO 22187
22187: DISABLE
22188: LD_INT 0
22190: PPUSH
// begin uc_side := 0 ;
22191: LD_ADDR_OWVAR 20
22195: PUSH
22196: LD_INT 0
22198: ST_TO_ADDR
// uc_nation := nation_arabian ;
22199: LD_ADDR_OWVAR 21
22203: PUSH
22204: LD_INT 2
22206: ST_TO_ADDR
// hc_gallery :=  ;
22207: LD_ADDR_OWVAR 33
22211: PUSH
22212: LD_STRING 
22214: ST_TO_ADDR
// hc_name :=  ;
22215: LD_ADDR_OWVAR 26
22219: PUSH
22220: LD_STRING 
22222: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
22223: LD_INT 1
22225: PPUSH
22226: LD_INT 11
22228: PPUSH
22229: LD_INT 10
22231: PPUSH
22232: CALL_OW 380
// un := CreateHuman ;
22236: LD_ADDR_VAR 0 1
22240: PUSH
22241: CALL_OW 44
22245: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22246: LD_VAR 0 1
22250: PPUSH
22251: LD_INT 1
22253: PPUSH
22254: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
22258: LD_INT 35
22260: PPUSH
22261: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
22265: LD_VAR 0 1
22269: PPUSH
22270: LD_INT 22
22272: PUSH
22273: LD_OWVAR 2
22277: PUSH
22278: EMPTY
22279: LIST
22280: LIST
22281: PPUSH
22282: CALL_OW 69
22286: PPUSH
22287: LD_VAR 0 1
22291: PPUSH
22292: CALL_OW 74
22296: PPUSH
22297: CALL_OW 115
// until IsDead ( un ) ;
22301: LD_VAR 0 1
22305: PPUSH
22306: CALL_OW 301
22310: IFFALSE 22258
// end ;
22312: PPOPN 1
22314: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
22315: LD_EXP 22
22319: PUSH
22320: LD_EXP 62
22324: AND
22325: IFFALSE 22337
22327: GO 22329
22329: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
22330: LD_STRING earthquake(getX(game), 0, 32)
22332: PPUSH
22333: CALL_OW 559
22337: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
22338: LD_EXP 22
22342: PUSH
22343: LD_EXP 63
22347: AND
22348: IFFALSE 22439
22350: GO 22352
22352: DISABLE
22353: LD_INT 0
22355: PPUSH
// begin enable ;
22356: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
22357: LD_ADDR_VAR 0 1
22361: PUSH
22362: LD_INT 22
22364: PUSH
22365: LD_OWVAR 2
22369: PUSH
22370: EMPTY
22371: LIST
22372: LIST
22373: PUSH
22374: LD_INT 21
22376: PUSH
22377: LD_INT 2
22379: PUSH
22380: EMPTY
22381: LIST
22382: LIST
22383: PUSH
22384: LD_INT 33
22386: PUSH
22387: LD_INT 3
22389: PUSH
22390: EMPTY
22391: LIST
22392: LIST
22393: PUSH
22394: EMPTY
22395: LIST
22396: LIST
22397: LIST
22398: PPUSH
22399: CALL_OW 69
22403: ST_TO_ADDR
// if not tmp then
22404: LD_VAR 0 1
22408: NOT
22409: IFFALSE 22413
// exit ;
22411: GO 22439
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22413: LD_VAR 0 1
22417: PUSH
22418: LD_INT 1
22420: PPUSH
22421: LD_VAR 0 1
22425: PPUSH
22426: CALL_OW 12
22430: ARRAY
22431: PPUSH
22432: LD_INT 1
22434: PPUSH
22435: CALL_OW 234
// end ;
22439: PPOPN 1
22441: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
22442: LD_EXP 22
22446: PUSH
22447: LD_EXP 64
22451: AND
22452: IFFALSE 22593
22454: GO 22456
22456: DISABLE
22457: LD_INT 0
22459: PPUSH
22460: PPUSH
22461: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22462: LD_ADDR_VAR 0 3
22466: PUSH
22467: LD_INT 22
22469: PUSH
22470: LD_OWVAR 2
22474: PUSH
22475: EMPTY
22476: LIST
22477: LIST
22478: PUSH
22479: LD_INT 25
22481: PUSH
22482: LD_INT 1
22484: PUSH
22485: EMPTY
22486: LIST
22487: LIST
22488: PUSH
22489: EMPTY
22490: LIST
22491: LIST
22492: PPUSH
22493: CALL_OW 69
22497: ST_TO_ADDR
// if not tmp then
22498: LD_VAR 0 3
22502: NOT
22503: IFFALSE 22507
// exit ;
22505: GO 22593
// un := tmp [ rand ( 1 , tmp ) ] ;
22507: LD_ADDR_VAR 0 2
22511: PUSH
22512: LD_VAR 0 3
22516: PUSH
22517: LD_INT 1
22519: PPUSH
22520: LD_VAR 0 3
22524: PPUSH
22525: CALL_OW 12
22529: ARRAY
22530: ST_TO_ADDR
// if Crawls ( un ) then
22531: LD_VAR 0 2
22535: PPUSH
22536: CALL_OW 318
22540: IFFALSE 22551
// ComWalk ( un ) ;
22542: LD_VAR 0 2
22546: PPUSH
22547: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
22551: LD_VAR 0 2
22555: PPUSH
22556: LD_INT 9
22558: PPUSH
22559: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
22563: LD_INT 28
22565: PPUSH
22566: LD_OWVAR 2
22570: PPUSH
22571: LD_INT 2
22573: PPUSH
22574: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
22578: LD_INT 29
22580: PPUSH
22581: LD_OWVAR 2
22585: PPUSH
22586: LD_INT 2
22588: PPUSH
22589: CALL_OW 322
// end ;
22593: PPOPN 3
22595: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
22596: LD_EXP 22
22600: PUSH
22601: LD_EXP 65
22605: AND
22606: IFFALSE 22717
22608: GO 22610
22610: DISABLE
22611: LD_INT 0
22613: PPUSH
22614: PPUSH
22615: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22616: LD_ADDR_VAR 0 3
22620: PUSH
22621: LD_INT 22
22623: PUSH
22624: LD_OWVAR 2
22628: PUSH
22629: EMPTY
22630: LIST
22631: LIST
22632: PUSH
22633: LD_INT 25
22635: PUSH
22636: LD_INT 1
22638: PUSH
22639: EMPTY
22640: LIST
22641: LIST
22642: PUSH
22643: EMPTY
22644: LIST
22645: LIST
22646: PPUSH
22647: CALL_OW 69
22651: ST_TO_ADDR
// if not tmp then
22652: LD_VAR 0 3
22656: NOT
22657: IFFALSE 22661
// exit ;
22659: GO 22717
// un := tmp [ rand ( 1 , tmp ) ] ;
22661: LD_ADDR_VAR 0 2
22665: PUSH
22666: LD_VAR 0 3
22670: PUSH
22671: LD_INT 1
22673: PPUSH
22674: LD_VAR 0 3
22678: PPUSH
22679: CALL_OW 12
22683: ARRAY
22684: ST_TO_ADDR
// if Crawls ( un ) then
22685: LD_VAR 0 2
22689: PPUSH
22690: CALL_OW 318
22694: IFFALSE 22705
// ComWalk ( un ) ;
22696: LD_VAR 0 2
22700: PPUSH
22701: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22705: LD_VAR 0 2
22709: PPUSH
22710: LD_INT 8
22712: PPUSH
22713: CALL_OW 336
// end ;
22717: PPOPN 3
22719: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
22720: LD_EXP 22
22724: PUSH
22725: LD_EXP 66
22729: AND
22730: IFFALSE 22874
22732: GO 22734
22734: DISABLE
22735: LD_INT 0
22737: PPUSH
22738: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
22739: LD_ADDR_VAR 0 2
22743: PUSH
22744: LD_INT 22
22746: PUSH
22747: LD_OWVAR 2
22751: PUSH
22752: EMPTY
22753: LIST
22754: LIST
22755: PUSH
22756: LD_INT 21
22758: PUSH
22759: LD_INT 2
22761: PUSH
22762: EMPTY
22763: LIST
22764: LIST
22765: PUSH
22766: LD_INT 2
22768: PUSH
22769: LD_INT 34
22771: PUSH
22772: LD_INT 12
22774: PUSH
22775: EMPTY
22776: LIST
22777: LIST
22778: PUSH
22779: LD_INT 34
22781: PUSH
22782: LD_INT 51
22784: PUSH
22785: EMPTY
22786: LIST
22787: LIST
22788: PUSH
22789: LD_INT 34
22791: PUSH
22792: LD_INT 32
22794: PUSH
22795: EMPTY
22796: LIST
22797: LIST
22798: PUSH
22799: EMPTY
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: PUSH
22805: EMPTY
22806: LIST
22807: LIST
22808: LIST
22809: PPUSH
22810: CALL_OW 69
22814: ST_TO_ADDR
// if not tmp then
22815: LD_VAR 0 2
22819: NOT
22820: IFFALSE 22824
// exit ;
22822: GO 22874
// for i in tmp do
22824: LD_ADDR_VAR 0 1
22828: PUSH
22829: LD_VAR 0 2
22833: PUSH
22834: FOR_IN
22835: IFFALSE 22872
// if GetCargo ( i , mat_artifact ) = 0 then
22837: LD_VAR 0 1
22841: PPUSH
22842: LD_INT 4
22844: PPUSH
22845: CALL_OW 289
22849: PUSH
22850: LD_INT 0
22852: EQUAL
22853: IFFALSE 22870
// SetCargo ( i , mat_siberit , 100 ) ;
22855: LD_VAR 0 1
22859: PPUSH
22860: LD_INT 3
22862: PPUSH
22863: LD_INT 100
22865: PPUSH
22866: CALL_OW 290
22870: GO 22834
22872: POP
22873: POP
// end ;
22874: PPOPN 2
22876: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
22877: LD_EXP 22
22881: PUSH
22882: LD_EXP 67
22886: AND
22887: IFFALSE 23070
22889: GO 22891
22891: DISABLE
22892: LD_INT 0
22894: PPUSH
22895: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22896: LD_ADDR_VAR 0 2
22900: PUSH
22901: LD_INT 22
22903: PUSH
22904: LD_OWVAR 2
22908: PUSH
22909: EMPTY
22910: LIST
22911: LIST
22912: PPUSH
22913: CALL_OW 69
22917: ST_TO_ADDR
// if not tmp then
22918: LD_VAR 0 2
22922: NOT
22923: IFFALSE 22927
// exit ;
22925: GO 23070
// for i := 1 to 2 do
22927: LD_ADDR_VAR 0 1
22931: PUSH
22932: DOUBLE
22933: LD_INT 1
22935: DEC
22936: ST_TO_ADDR
22937: LD_INT 2
22939: PUSH
22940: FOR_TO
22941: IFFALSE 23068
// begin uc_side := your_side ;
22943: LD_ADDR_OWVAR 20
22947: PUSH
22948: LD_OWVAR 2
22952: ST_TO_ADDR
// uc_nation := nation_american ;
22953: LD_ADDR_OWVAR 21
22957: PUSH
22958: LD_INT 1
22960: ST_TO_ADDR
// vc_chassis := us_morphling ;
22961: LD_ADDR_OWVAR 37
22965: PUSH
22966: LD_INT 5
22968: ST_TO_ADDR
// vc_engine := engine_siberite ;
22969: LD_ADDR_OWVAR 39
22973: PUSH
22974: LD_INT 3
22976: ST_TO_ADDR
// vc_control := control_computer ;
22977: LD_ADDR_OWVAR 38
22981: PUSH
22982: LD_INT 3
22984: ST_TO_ADDR
// vc_weapon := us_double_laser ;
22985: LD_ADDR_OWVAR 40
22989: PUSH
22990: LD_INT 10
22992: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
22993: LD_VAR 0 2
22997: PUSH
22998: LD_INT 1
23000: ARRAY
23001: PPUSH
23002: CALL_OW 310
23006: NOT
23007: IFFALSE 23054
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
23009: CALL_OW 45
23013: PPUSH
23014: LD_VAR 0 2
23018: PUSH
23019: LD_INT 1
23021: ARRAY
23022: PPUSH
23023: CALL_OW 250
23027: PPUSH
23028: LD_VAR 0 2
23032: PUSH
23033: LD_INT 1
23035: ARRAY
23036: PPUSH
23037: CALL_OW 251
23041: PPUSH
23042: LD_INT 12
23044: PPUSH
23045: LD_INT 1
23047: PPUSH
23048: CALL_OW 50
23052: GO 23066
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
23054: CALL_OW 45
23058: PPUSH
23059: LD_INT 1
23061: PPUSH
23062: CALL_OW 51
// end ;
23066: GO 22940
23068: POP
23069: POP
// end ;
23070: PPOPN 2
23072: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
23073: LD_EXP 22
23077: PUSH
23078: LD_EXP 68
23082: AND
23083: IFFALSE 23305
23085: GO 23087
23087: DISABLE
23088: LD_INT 0
23090: PPUSH
23091: PPUSH
23092: PPUSH
23093: PPUSH
23094: PPUSH
23095: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23096: LD_ADDR_VAR 0 6
23100: PUSH
23101: LD_INT 22
23103: PUSH
23104: LD_OWVAR 2
23108: PUSH
23109: EMPTY
23110: LIST
23111: LIST
23112: PUSH
23113: LD_INT 21
23115: PUSH
23116: LD_INT 1
23118: PUSH
23119: EMPTY
23120: LIST
23121: LIST
23122: PUSH
23123: LD_INT 3
23125: PUSH
23126: LD_INT 23
23128: PUSH
23129: LD_INT 0
23131: PUSH
23132: EMPTY
23133: LIST
23134: LIST
23135: PUSH
23136: EMPTY
23137: LIST
23138: LIST
23139: PUSH
23140: EMPTY
23141: LIST
23142: LIST
23143: LIST
23144: PPUSH
23145: CALL_OW 69
23149: ST_TO_ADDR
// if not tmp then
23150: LD_VAR 0 6
23154: NOT
23155: IFFALSE 23159
// exit ;
23157: GO 23305
// s1 := rand ( 1 , 4 ) ;
23159: LD_ADDR_VAR 0 2
23163: PUSH
23164: LD_INT 1
23166: PPUSH
23167: LD_INT 4
23169: PPUSH
23170: CALL_OW 12
23174: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
23175: LD_ADDR_VAR 0 4
23179: PUSH
23180: LD_VAR 0 6
23184: PUSH
23185: LD_INT 1
23187: ARRAY
23188: PPUSH
23189: LD_VAR 0 2
23193: PPUSH
23194: CALL_OW 259
23198: ST_TO_ADDR
// if s1 = 1 then
23199: LD_VAR 0 2
23203: PUSH
23204: LD_INT 1
23206: EQUAL
23207: IFFALSE 23227
// s2 := rand ( 2 , 4 ) else
23209: LD_ADDR_VAR 0 3
23213: PUSH
23214: LD_INT 2
23216: PPUSH
23217: LD_INT 4
23219: PPUSH
23220: CALL_OW 12
23224: ST_TO_ADDR
23225: GO 23235
// s2 := 1 ;
23227: LD_ADDR_VAR 0 3
23231: PUSH
23232: LD_INT 1
23234: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
23235: LD_ADDR_VAR 0 5
23239: PUSH
23240: LD_VAR 0 6
23244: PUSH
23245: LD_INT 1
23247: ARRAY
23248: PPUSH
23249: LD_VAR 0 3
23253: PPUSH
23254: CALL_OW 259
23258: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
23259: LD_VAR 0 6
23263: PUSH
23264: LD_INT 1
23266: ARRAY
23267: PPUSH
23268: LD_VAR 0 2
23272: PPUSH
23273: LD_VAR 0 5
23277: PPUSH
23278: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
23282: LD_VAR 0 6
23286: PUSH
23287: LD_INT 1
23289: ARRAY
23290: PPUSH
23291: LD_VAR 0 3
23295: PPUSH
23296: LD_VAR 0 4
23300: PPUSH
23301: CALL_OW 237
// end ;
23305: PPOPN 6
23307: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
23308: LD_EXP 22
23312: PUSH
23313: LD_EXP 69
23317: AND
23318: IFFALSE 23397
23320: GO 23322
23322: DISABLE
23323: LD_INT 0
23325: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
23326: LD_ADDR_VAR 0 1
23330: PUSH
23331: LD_INT 22
23333: PUSH
23334: LD_OWVAR 2
23338: PUSH
23339: EMPTY
23340: LIST
23341: LIST
23342: PUSH
23343: LD_INT 30
23345: PUSH
23346: LD_INT 3
23348: PUSH
23349: EMPTY
23350: LIST
23351: LIST
23352: PUSH
23353: EMPTY
23354: LIST
23355: LIST
23356: PPUSH
23357: CALL_OW 69
23361: ST_TO_ADDR
// if not tmp then
23362: LD_VAR 0 1
23366: NOT
23367: IFFALSE 23371
// exit ;
23369: GO 23397
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
23371: LD_VAR 0 1
23375: PUSH
23376: LD_INT 1
23378: PPUSH
23379: LD_VAR 0 1
23383: PPUSH
23384: CALL_OW 12
23388: ARRAY
23389: PPUSH
23390: LD_INT 1
23392: PPUSH
23393: CALL_OW 234
// end ;
23397: PPOPN 1
23399: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
23400: LD_EXP 22
23404: PUSH
23405: LD_EXP 70
23409: AND
23410: IFFALSE 23522
23412: GO 23414
23414: DISABLE
23415: LD_INT 0
23417: PPUSH
23418: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
23419: LD_ADDR_VAR 0 2
23423: PUSH
23424: LD_INT 22
23426: PUSH
23427: LD_OWVAR 2
23431: PUSH
23432: EMPTY
23433: LIST
23434: LIST
23435: PUSH
23436: LD_INT 2
23438: PUSH
23439: LD_INT 30
23441: PUSH
23442: LD_INT 27
23444: PUSH
23445: EMPTY
23446: LIST
23447: LIST
23448: PUSH
23449: LD_INT 30
23451: PUSH
23452: LD_INT 26
23454: PUSH
23455: EMPTY
23456: LIST
23457: LIST
23458: PUSH
23459: LD_INT 30
23461: PUSH
23462: LD_INT 28
23464: PUSH
23465: EMPTY
23466: LIST
23467: LIST
23468: PUSH
23469: EMPTY
23470: LIST
23471: LIST
23472: LIST
23473: LIST
23474: PUSH
23475: EMPTY
23476: LIST
23477: LIST
23478: PPUSH
23479: CALL_OW 69
23483: ST_TO_ADDR
// if not tmp then
23484: LD_VAR 0 2
23488: NOT
23489: IFFALSE 23493
// exit ;
23491: GO 23522
// for i in tmp do
23493: LD_ADDR_VAR 0 1
23497: PUSH
23498: LD_VAR 0 2
23502: PUSH
23503: FOR_IN
23504: IFFALSE 23520
// SetLives ( i , 1 ) ;
23506: LD_VAR 0 1
23510: PPUSH
23511: LD_INT 1
23513: PPUSH
23514: CALL_OW 234
23518: GO 23503
23520: POP
23521: POP
// end ;
23522: PPOPN 2
23524: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
23525: LD_EXP 22
23529: PUSH
23530: LD_EXP 71
23534: AND
23535: IFFALSE 23822
23537: GO 23539
23539: DISABLE
23540: LD_INT 0
23542: PPUSH
23543: PPUSH
23544: PPUSH
// begin i := rand ( 1 , 7 ) ;
23545: LD_ADDR_VAR 0 1
23549: PUSH
23550: LD_INT 1
23552: PPUSH
23553: LD_INT 7
23555: PPUSH
23556: CALL_OW 12
23560: ST_TO_ADDR
// case i of 1 :
23561: LD_VAR 0 1
23565: PUSH
23566: LD_INT 1
23568: DOUBLE
23569: EQUAL
23570: IFTRUE 23574
23572: GO 23584
23574: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
23575: LD_STRING earthquake(getX(game), 0, 32)
23577: PPUSH
23578: CALL_OW 559
23582: GO 23822
23584: LD_INT 2
23586: DOUBLE
23587: EQUAL
23588: IFTRUE 23592
23590: GO 23606
23592: POP
// begin ToLua ( displayStucuk(); ) ;
23593: LD_STRING displayStucuk();
23595: PPUSH
23596: CALL_OW 559
// ResetFog ;
23600: CALL_OW 335
// end ; 3 :
23604: GO 23822
23606: LD_INT 3
23608: DOUBLE
23609: EQUAL
23610: IFTRUE 23614
23612: GO 23718
23614: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23615: LD_ADDR_VAR 0 2
23619: PUSH
23620: LD_INT 22
23622: PUSH
23623: LD_OWVAR 2
23627: PUSH
23628: EMPTY
23629: LIST
23630: LIST
23631: PUSH
23632: LD_INT 25
23634: PUSH
23635: LD_INT 1
23637: PUSH
23638: EMPTY
23639: LIST
23640: LIST
23641: PUSH
23642: EMPTY
23643: LIST
23644: LIST
23645: PPUSH
23646: CALL_OW 69
23650: ST_TO_ADDR
// if not tmp then
23651: LD_VAR 0 2
23655: NOT
23656: IFFALSE 23660
// exit ;
23658: GO 23822
// un := tmp [ rand ( 1 , tmp ) ] ;
23660: LD_ADDR_VAR 0 3
23664: PUSH
23665: LD_VAR 0 2
23669: PUSH
23670: LD_INT 1
23672: PPUSH
23673: LD_VAR 0 2
23677: PPUSH
23678: CALL_OW 12
23682: ARRAY
23683: ST_TO_ADDR
// if Crawls ( un ) then
23684: LD_VAR 0 3
23688: PPUSH
23689: CALL_OW 318
23693: IFFALSE 23704
// ComWalk ( un ) ;
23695: LD_VAR 0 3
23699: PPUSH
23700: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23704: LD_VAR 0 3
23708: PPUSH
23709: LD_INT 8
23711: PPUSH
23712: CALL_OW 336
// end ; 4 :
23716: GO 23822
23718: LD_INT 4
23720: DOUBLE
23721: EQUAL
23722: IFTRUE 23726
23724: GO 23800
23726: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23727: LD_ADDR_VAR 0 2
23731: PUSH
23732: LD_INT 22
23734: PUSH
23735: LD_OWVAR 2
23739: PUSH
23740: EMPTY
23741: LIST
23742: LIST
23743: PUSH
23744: LD_INT 30
23746: PUSH
23747: LD_INT 29
23749: PUSH
23750: EMPTY
23751: LIST
23752: LIST
23753: PUSH
23754: EMPTY
23755: LIST
23756: LIST
23757: PPUSH
23758: CALL_OW 69
23762: ST_TO_ADDR
// if not tmp then
23763: LD_VAR 0 2
23767: NOT
23768: IFFALSE 23772
// exit ;
23770: GO 23822
// CenterNowOnUnits ( tmp [ 1 ] ) ;
23772: LD_VAR 0 2
23776: PUSH
23777: LD_INT 1
23779: ARRAY
23780: PPUSH
23781: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
23785: LD_VAR 0 2
23789: PUSH
23790: LD_INT 1
23792: ARRAY
23793: PPUSH
23794: CALL_OW 65
// end ; 5 .. 7 :
23798: GO 23822
23800: LD_INT 5
23802: DOUBLE
23803: GREATEREQUAL
23804: IFFALSE 23812
23806: LD_INT 7
23808: DOUBLE
23809: LESSEQUAL
23810: IFTRUE 23814
23812: GO 23821
23814: POP
// StreamSibBomb ; end ;
23815: CALL 20059 0 0
23819: GO 23822
23821: POP
// end ;
23822: PPOPN 3
23824: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
23825: LD_EXP 22
23829: PUSH
23830: LD_EXP 72
23834: AND
23835: IFFALSE 23991
23837: GO 23839
23839: DISABLE
23840: LD_INT 0
23842: PPUSH
23843: PPUSH
23844: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23845: LD_ADDR_VAR 0 2
23849: PUSH
23850: LD_INT 81
23852: PUSH
23853: LD_OWVAR 2
23857: PUSH
23858: EMPTY
23859: LIST
23860: LIST
23861: PUSH
23862: LD_INT 2
23864: PUSH
23865: LD_INT 21
23867: PUSH
23868: LD_INT 1
23870: PUSH
23871: EMPTY
23872: LIST
23873: LIST
23874: PUSH
23875: LD_INT 21
23877: PUSH
23878: LD_INT 2
23880: PUSH
23881: EMPTY
23882: LIST
23883: LIST
23884: PUSH
23885: EMPTY
23886: LIST
23887: LIST
23888: LIST
23889: PUSH
23890: EMPTY
23891: LIST
23892: LIST
23893: PPUSH
23894: CALL_OW 69
23898: ST_TO_ADDR
// if not tmp then
23899: LD_VAR 0 2
23903: NOT
23904: IFFALSE 23908
// exit ;
23906: GO 23991
// p := 0 ;
23908: LD_ADDR_VAR 0 3
23912: PUSH
23913: LD_INT 0
23915: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23916: LD_INT 35
23918: PPUSH
23919: CALL_OW 67
// p := p + 1 ;
23923: LD_ADDR_VAR 0 3
23927: PUSH
23928: LD_VAR 0 3
23932: PUSH
23933: LD_INT 1
23935: PLUS
23936: ST_TO_ADDR
// for i in tmp do
23937: LD_ADDR_VAR 0 1
23941: PUSH
23942: LD_VAR 0 2
23946: PUSH
23947: FOR_IN
23948: IFFALSE 23979
// if GetLives ( i ) < 1000 then
23950: LD_VAR 0 1
23954: PPUSH
23955: CALL_OW 256
23959: PUSH
23960: LD_INT 1000
23962: LESS
23963: IFFALSE 23977
// SetLives ( i , 1000 ) ;
23965: LD_VAR 0 1
23969: PPUSH
23970: LD_INT 1000
23972: PPUSH
23973: CALL_OW 234
23977: GO 23947
23979: POP
23980: POP
// until p > 20 ;
23981: LD_VAR 0 3
23985: PUSH
23986: LD_INT 20
23988: GREATER
23989: IFFALSE 23916
// end ;
23991: PPOPN 3
23993: END
// every 0 0$1 trigger StreamModeActive and sTime do
23994: LD_EXP 22
23998: PUSH
23999: LD_EXP 73
24003: AND
24004: IFFALSE 24039
24006: GO 24008
24008: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
24009: LD_INT 28
24011: PPUSH
24012: LD_OWVAR 2
24016: PPUSH
24017: LD_INT 2
24019: PPUSH
24020: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
24024: LD_INT 30
24026: PPUSH
24027: LD_OWVAR 2
24031: PPUSH
24032: LD_INT 2
24034: PPUSH
24035: CALL_OW 322
// end ;
24039: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
24040: LD_EXP 22
24044: PUSH
24045: LD_EXP 74
24049: AND
24050: IFFALSE 24171
24052: GO 24054
24054: DISABLE
24055: LD_INT 0
24057: PPUSH
24058: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24059: LD_ADDR_VAR 0 2
24063: PUSH
24064: LD_INT 22
24066: PUSH
24067: LD_OWVAR 2
24071: PUSH
24072: EMPTY
24073: LIST
24074: LIST
24075: PUSH
24076: LD_INT 21
24078: PUSH
24079: LD_INT 1
24081: PUSH
24082: EMPTY
24083: LIST
24084: LIST
24085: PUSH
24086: LD_INT 3
24088: PUSH
24089: LD_INT 23
24091: PUSH
24092: LD_INT 0
24094: PUSH
24095: EMPTY
24096: LIST
24097: LIST
24098: PUSH
24099: EMPTY
24100: LIST
24101: LIST
24102: PUSH
24103: EMPTY
24104: LIST
24105: LIST
24106: LIST
24107: PPUSH
24108: CALL_OW 69
24112: ST_TO_ADDR
// if not tmp then
24113: LD_VAR 0 2
24117: NOT
24118: IFFALSE 24122
// exit ;
24120: GO 24171
// for i in tmp do
24122: LD_ADDR_VAR 0 1
24126: PUSH
24127: LD_VAR 0 2
24131: PUSH
24132: FOR_IN
24133: IFFALSE 24169
// begin if Crawls ( i ) then
24135: LD_VAR 0 1
24139: PPUSH
24140: CALL_OW 318
24144: IFFALSE 24155
// ComWalk ( i ) ;
24146: LD_VAR 0 1
24150: PPUSH
24151: CALL_OW 138
// SetClass ( i , 2 ) ;
24155: LD_VAR 0 1
24159: PPUSH
24160: LD_INT 2
24162: PPUSH
24163: CALL_OW 336
// end ;
24167: GO 24132
24169: POP
24170: POP
// end ;
24171: PPOPN 2
24173: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
24174: LD_EXP 22
24178: PUSH
24179: LD_EXP 75
24183: AND
24184: IFFALSE 24472
24186: GO 24188
24188: DISABLE
24189: LD_INT 0
24191: PPUSH
24192: PPUSH
24193: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
24194: LD_OWVAR 2
24198: PPUSH
24199: LD_INT 9
24201: PPUSH
24202: LD_INT 1
24204: PPUSH
24205: LD_INT 1
24207: PPUSH
24208: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
24212: LD_INT 9
24214: PPUSH
24215: LD_OWVAR 2
24219: PPUSH
24220: CALL_OW 343
// uc_side := 9 ;
24224: LD_ADDR_OWVAR 20
24228: PUSH
24229: LD_INT 9
24231: ST_TO_ADDR
// uc_nation := 2 ;
24232: LD_ADDR_OWVAR 21
24236: PUSH
24237: LD_INT 2
24239: ST_TO_ADDR
// hc_name := Dark Warrior ;
24240: LD_ADDR_OWVAR 26
24244: PUSH
24245: LD_STRING Dark Warrior
24247: ST_TO_ADDR
// hc_gallery :=  ;
24248: LD_ADDR_OWVAR 33
24252: PUSH
24253: LD_STRING 
24255: ST_TO_ADDR
// hc_noskilllimit := true ;
24256: LD_ADDR_OWVAR 76
24260: PUSH
24261: LD_INT 1
24263: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
24264: LD_ADDR_OWVAR 31
24268: PUSH
24269: LD_INT 30
24271: PUSH
24272: LD_INT 30
24274: PUSH
24275: LD_INT 30
24277: PUSH
24278: LD_INT 30
24280: PUSH
24281: EMPTY
24282: LIST
24283: LIST
24284: LIST
24285: LIST
24286: ST_TO_ADDR
// un := CreateHuman ;
24287: LD_ADDR_VAR 0 3
24291: PUSH
24292: CALL_OW 44
24296: ST_TO_ADDR
// hc_noskilllimit := false ;
24297: LD_ADDR_OWVAR 76
24301: PUSH
24302: LD_INT 0
24304: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24305: LD_VAR 0 3
24309: PPUSH
24310: LD_INT 1
24312: PPUSH
24313: CALL_OW 51
// ToLua ( playRanger() ) ;
24317: LD_STRING playRanger()
24319: PPUSH
24320: CALL_OW 559
// p := 0 ;
24324: LD_ADDR_VAR 0 2
24328: PUSH
24329: LD_INT 0
24331: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24332: LD_INT 35
24334: PPUSH
24335: CALL_OW 67
// p := p + 1 ;
24339: LD_ADDR_VAR 0 2
24343: PUSH
24344: LD_VAR 0 2
24348: PUSH
24349: LD_INT 1
24351: PLUS
24352: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
24353: LD_VAR 0 3
24357: PPUSH
24358: CALL_OW 256
24362: PUSH
24363: LD_INT 1000
24365: LESS
24366: IFFALSE 24380
// SetLives ( un , 1000 ) ;
24368: LD_VAR 0 3
24372: PPUSH
24373: LD_INT 1000
24375: PPUSH
24376: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
24380: LD_VAR 0 3
24384: PPUSH
24385: LD_INT 81
24387: PUSH
24388: LD_OWVAR 2
24392: PUSH
24393: EMPTY
24394: LIST
24395: LIST
24396: PUSH
24397: LD_INT 91
24399: PUSH
24400: LD_VAR 0 3
24404: PUSH
24405: LD_INT 30
24407: PUSH
24408: EMPTY
24409: LIST
24410: LIST
24411: LIST
24412: PUSH
24413: EMPTY
24414: LIST
24415: LIST
24416: PPUSH
24417: CALL_OW 69
24421: PPUSH
24422: LD_VAR 0 3
24426: PPUSH
24427: CALL_OW 74
24431: PPUSH
24432: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
24436: LD_VAR 0 2
24440: PUSH
24441: LD_INT 80
24443: GREATER
24444: PUSH
24445: LD_VAR 0 3
24449: PPUSH
24450: CALL_OW 301
24454: OR
24455: IFFALSE 24332
// if un then
24457: LD_VAR 0 3
24461: IFFALSE 24472
// RemoveUnit ( un ) ;
24463: LD_VAR 0 3
24467: PPUSH
24468: CALL_OW 64
// end ;
24472: PPOPN 3
24474: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
24475: LD_EXP 76
24479: IFFALSE 24595
24481: GO 24483
24483: DISABLE
24484: LD_INT 0
24486: PPUSH
24487: PPUSH
24488: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24489: LD_ADDR_VAR 0 2
24493: PUSH
24494: LD_INT 81
24496: PUSH
24497: LD_OWVAR 2
24501: PUSH
24502: EMPTY
24503: LIST
24504: LIST
24505: PUSH
24506: LD_INT 21
24508: PUSH
24509: LD_INT 1
24511: PUSH
24512: EMPTY
24513: LIST
24514: LIST
24515: PUSH
24516: EMPTY
24517: LIST
24518: LIST
24519: PPUSH
24520: CALL_OW 69
24524: ST_TO_ADDR
// ToLua ( playComputer() ) ;
24525: LD_STRING playComputer()
24527: PPUSH
24528: CALL_OW 559
// if not tmp then
24532: LD_VAR 0 2
24536: NOT
24537: IFFALSE 24541
// exit ;
24539: GO 24595
// for i in tmp do
24541: LD_ADDR_VAR 0 1
24545: PUSH
24546: LD_VAR 0 2
24550: PUSH
24551: FOR_IN
24552: IFFALSE 24593
// for j := 1 to 4 do
24554: LD_ADDR_VAR 0 3
24558: PUSH
24559: DOUBLE
24560: LD_INT 1
24562: DEC
24563: ST_TO_ADDR
24564: LD_INT 4
24566: PUSH
24567: FOR_TO
24568: IFFALSE 24589
// SetSkill ( i , j , 10 ) ;
24570: LD_VAR 0 1
24574: PPUSH
24575: LD_VAR 0 3
24579: PPUSH
24580: LD_INT 10
24582: PPUSH
24583: CALL_OW 237
24587: GO 24567
24589: POP
24590: POP
24591: GO 24551
24593: POP
24594: POP
// end ;
24595: PPOPN 3
24597: END
// every 0 0$1 trigger s30 do var i , tmp ;
24598: LD_EXP 77
24602: IFFALSE 24671
24604: GO 24606
24606: DISABLE
24607: LD_INT 0
24609: PPUSH
24610: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24611: LD_ADDR_VAR 0 2
24615: PUSH
24616: LD_INT 22
24618: PUSH
24619: LD_OWVAR 2
24623: PUSH
24624: EMPTY
24625: LIST
24626: LIST
24627: PPUSH
24628: CALL_OW 69
24632: ST_TO_ADDR
// if not tmp then
24633: LD_VAR 0 2
24637: NOT
24638: IFFALSE 24642
// exit ;
24640: GO 24671
// for i in tmp do
24642: LD_ADDR_VAR 0 1
24646: PUSH
24647: LD_VAR 0 2
24651: PUSH
24652: FOR_IN
24653: IFFALSE 24669
// SetLives ( i , 300 ) ;
24655: LD_VAR 0 1
24659: PPUSH
24660: LD_INT 300
24662: PPUSH
24663: CALL_OW 234
24667: GO 24652
24669: POP
24670: POP
// end ;
24671: PPOPN 2
24673: END
// every 0 0$1 trigger s60 do var i , tmp ;
24674: LD_EXP 78
24678: IFFALSE 24747
24680: GO 24682
24682: DISABLE
24683: LD_INT 0
24685: PPUSH
24686: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24687: LD_ADDR_VAR 0 2
24691: PUSH
24692: LD_INT 22
24694: PUSH
24695: LD_OWVAR 2
24699: PUSH
24700: EMPTY
24701: LIST
24702: LIST
24703: PPUSH
24704: CALL_OW 69
24708: ST_TO_ADDR
// if not tmp then
24709: LD_VAR 0 2
24713: NOT
24714: IFFALSE 24718
// exit ;
24716: GO 24747
// for i in tmp do
24718: LD_ADDR_VAR 0 1
24722: PUSH
24723: LD_VAR 0 2
24727: PUSH
24728: FOR_IN
24729: IFFALSE 24745
// SetLives ( i , 600 ) ;
24731: LD_VAR 0 1
24735: PPUSH
24736: LD_INT 600
24738: PPUSH
24739: CALL_OW 234
24743: GO 24728
24745: POP
24746: POP
// end ;
24747: PPOPN 2
24749: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
24750: LD_INT 0
24752: PPUSH
// case cmd of 301 :
24753: LD_VAR 0 1
24757: PUSH
24758: LD_INT 301
24760: DOUBLE
24761: EQUAL
24762: IFTRUE 24766
24764: GO 24798
24766: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
24767: LD_VAR 0 6
24771: PPUSH
24772: LD_VAR 0 7
24776: PPUSH
24777: LD_VAR 0 8
24781: PPUSH
24782: LD_VAR 0 4
24786: PPUSH
24787: LD_VAR 0 5
24791: PPUSH
24792: CALL 25999 0 5
24796: GO 24919
24798: LD_INT 302
24800: DOUBLE
24801: EQUAL
24802: IFTRUE 24806
24804: GO 24843
24806: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
24807: LD_VAR 0 6
24811: PPUSH
24812: LD_VAR 0 7
24816: PPUSH
24817: LD_VAR 0 8
24821: PPUSH
24822: LD_VAR 0 9
24826: PPUSH
24827: LD_VAR 0 4
24831: PPUSH
24832: LD_VAR 0 5
24836: PPUSH
24837: CALL 26090 0 6
24841: GO 24919
24843: LD_INT 303
24845: DOUBLE
24846: EQUAL
24847: IFTRUE 24851
24849: GO 24888
24851: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
24852: LD_VAR 0 6
24856: PPUSH
24857: LD_VAR 0 7
24861: PPUSH
24862: LD_VAR 0 8
24866: PPUSH
24867: LD_VAR 0 9
24871: PPUSH
24872: LD_VAR 0 4
24876: PPUSH
24877: LD_VAR 0 5
24881: PPUSH
24882: CALL 24924 0 6
24886: GO 24919
24888: LD_INT 304
24890: DOUBLE
24891: EQUAL
24892: IFTRUE 24896
24894: GO 24918
24896: POP
// hHackTeleport ( unit , x , y ) ; end ;
24897: LD_VAR 0 2
24901: PPUSH
24902: LD_VAR 0 4
24906: PPUSH
24907: LD_VAR 0 5
24911: PPUSH
24912: CALL 26683 0 3
24916: GO 24919
24918: POP
// end ;
24919: LD_VAR 0 12
24923: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
24924: LD_INT 0
24926: PPUSH
24927: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
24928: LD_VAR 0 1
24932: PUSH
24933: LD_INT 1
24935: LESS
24936: PUSH
24937: LD_VAR 0 1
24941: PUSH
24942: LD_INT 3
24944: GREATER
24945: OR
24946: PUSH
24947: LD_VAR 0 5
24951: PPUSH
24952: LD_VAR 0 6
24956: PPUSH
24957: CALL_OW 428
24961: OR
24962: IFFALSE 24966
// exit ;
24964: GO 25686
// uc_side := your_side ;
24966: LD_ADDR_OWVAR 20
24970: PUSH
24971: LD_OWVAR 2
24975: ST_TO_ADDR
// uc_nation := nation ;
24976: LD_ADDR_OWVAR 21
24980: PUSH
24981: LD_VAR 0 1
24985: ST_TO_ADDR
// bc_level = 1 ;
24986: LD_ADDR_OWVAR 43
24990: PUSH
24991: LD_INT 1
24993: ST_TO_ADDR
// case btype of 1 :
24994: LD_VAR 0 2
24998: PUSH
24999: LD_INT 1
25001: DOUBLE
25002: EQUAL
25003: IFTRUE 25007
25005: GO 25018
25007: POP
// bc_type := b_depot ; 2 :
25008: LD_ADDR_OWVAR 42
25012: PUSH
25013: LD_INT 0
25015: ST_TO_ADDR
25016: GO 25630
25018: LD_INT 2
25020: DOUBLE
25021: EQUAL
25022: IFTRUE 25026
25024: GO 25037
25026: POP
// bc_type := b_warehouse ; 3 :
25027: LD_ADDR_OWVAR 42
25031: PUSH
25032: LD_INT 1
25034: ST_TO_ADDR
25035: GO 25630
25037: LD_INT 3
25039: DOUBLE
25040: EQUAL
25041: IFTRUE 25045
25043: GO 25056
25045: POP
// bc_type := b_lab ; 4 .. 9 :
25046: LD_ADDR_OWVAR 42
25050: PUSH
25051: LD_INT 6
25053: ST_TO_ADDR
25054: GO 25630
25056: LD_INT 4
25058: DOUBLE
25059: GREATEREQUAL
25060: IFFALSE 25068
25062: LD_INT 9
25064: DOUBLE
25065: LESSEQUAL
25066: IFTRUE 25070
25068: GO 25122
25070: POP
// begin bc_type := b_lab_half ;
25071: LD_ADDR_OWVAR 42
25075: PUSH
25076: LD_INT 7
25078: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
25079: LD_ADDR_OWVAR 44
25083: PUSH
25084: LD_INT 10
25086: PUSH
25087: LD_INT 11
25089: PUSH
25090: LD_INT 12
25092: PUSH
25093: LD_INT 15
25095: PUSH
25096: LD_INT 14
25098: PUSH
25099: LD_INT 13
25101: PUSH
25102: EMPTY
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: LIST
25108: LIST
25109: PUSH
25110: LD_VAR 0 2
25114: PUSH
25115: LD_INT 3
25117: MINUS
25118: ARRAY
25119: ST_TO_ADDR
// end ; 10 .. 13 :
25120: GO 25630
25122: LD_INT 10
25124: DOUBLE
25125: GREATEREQUAL
25126: IFFALSE 25134
25128: LD_INT 13
25130: DOUBLE
25131: LESSEQUAL
25132: IFTRUE 25136
25134: GO 25213
25136: POP
// begin bc_type := b_lab_full ;
25137: LD_ADDR_OWVAR 42
25141: PUSH
25142: LD_INT 8
25144: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
25145: LD_ADDR_OWVAR 44
25149: PUSH
25150: LD_INT 10
25152: PUSH
25153: LD_INT 12
25155: PUSH
25156: LD_INT 14
25158: PUSH
25159: LD_INT 13
25161: PUSH
25162: EMPTY
25163: LIST
25164: LIST
25165: LIST
25166: LIST
25167: PUSH
25168: LD_VAR 0 2
25172: PUSH
25173: LD_INT 9
25175: MINUS
25176: ARRAY
25177: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
25178: LD_ADDR_OWVAR 45
25182: PUSH
25183: LD_INT 11
25185: PUSH
25186: LD_INT 15
25188: PUSH
25189: LD_INT 12
25191: PUSH
25192: LD_INT 15
25194: PUSH
25195: EMPTY
25196: LIST
25197: LIST
25198: LIST
25199: LIST
25200: PUSH
25201: LD_VAR 0 2
25205: PUSH
25206: LD_INT 9
25208: MINUS
25209: ARRAY
25210: ST_TO_ADDR
// end ; 14 :
25211: GO 25630
25213: LD_INT 14
25215: DOUBLE
25216: EQUAL
25217: IFTRUE 25221
25219: GO 25232
25221: POP
// bc_type := b_workshop ; 15 :
25222: LD_ADDR_OWVAR 42
25226: PUSH
25227: LD_INT 2
25229: ST_TO_ADDR
25230: GO 25630
25232: LD_INT 15
25234: DOUBLE
25235: EQUAL
25236: IFTRUE 25240
25238: GO 25251
25240: POP
// bc_type := b_factory ; 16 :
25241: LD_ADDR_OWVAR 42
25245: PUSH
25246: LD_INT 3
25248: ST_TO_ADDR
25249: GO 25630
25251: LD_INT 16
25253: DOUBLE
25254: EQUAL
25255: IFTRUE 25259
25257: GO 25270
25259: POP
// bc_type := b_ext_gun ; 17 :
25260: LD_ADDR_OWVAR 42
25264: PUSH
25265: LD_INT 17
25267: ST_TO_ADDR
25268: GO 25630
25270: LD_INT 17
25272: DOUBLE
25273: EQUAL
25274: IFTRUE 25278
25276: GO 25306
25278: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
25279: LD_ADDR_OWVAR 42
25283: PUSH
25284: LD_INT 19
25286: PUSH
25287: LD_INT 23
25289: PUSH
25290: LD_INT 19
25292: PUSH
25293: EMPTY
25294: LIST
25295: LIST
25296: LIST
25297: PUSH
25298: LD_VAR 0 1
25302: ARRAY
25303: ST_TO_ADDR
25304: GO 25630
25306: LD_INT 18
25308: DOUBLE
25309: EQUAL
25310: IFTRUE 25314
25312: GO 25325
25314: POP
// bc_type := b_ext_radar ; 19 :
25315: LD_ADDR_OWVAR 42
25319: PUSH
25320: LD_INT 20
25322: ST_TO_ADDR
25323: GO 25630
25325: LD_INT 19
25327: DOUBLE
25328: EQUAL
25329: IFTRUE 25333
25331: GO 25344
25333: POP
// bc_type := b_ext_radio ; 20 :
25334: LD_ADDR_OWVAR 42
25338: PUSH
25339: LD_INT 22
25341: ST_TO_ADDR
25342: GO 25630
25344: LD_INT 20
25346: DOUBLE
25347: EQUAL
25348: IFTRUE 25352
25350: GO 25363
25352: POP
// bc_type := b_ext_siberium ; 21 :
25353: LD_ADDR_OWVAR 42
25357: PUSH
25358: LD_INT 21
25360: ST_TO_ADDR
25361: GO 25630
25363: LD_INT 21
25365: DOUBLE
25366: EQUAL
25367: IFTRUE 25371
25369: GO 25382
25371: POP
// bc_type := b_ext_computer ; 22 :
25372: LD_ADDR_OWVAR 42
25376: PUSH
25377: LD_INT 24
25379: ST_TO_ADDR
25380: GO 25630
25382: LD_INT 22
25384: DOUBLE
25385: EQUAL
25386: IFTRUE 25390
25388: GO 25401
25390: POP
// bc_type := b_ext_track ; 23 :
25391: LD_ADDR_OWVAR 42
25395: PUSH
25396: LD_INT 16
25398: ST_TO_ADDR
25399: GO 25630
25401: LD_INT 23
25403: DOUBLE
25404: EQUAL
25405: IFTRUE 25409
25407: GO 25420
25409: POP
// bc_type := b_ext_laser ; 24 :
25410: LD_ADDR_OWVAR 42
25414: PUSH
25415: LD_INT 25
25417: ST_TO_ADDR
25418: GO 25630
25420: LD_INT 24
25422: DOUBLE
25423: EQUAL
25424: IFTRUE 25428
25426: GO 25439
25428: POP
// bc_type := b_control_tower ; 25 :
25429: LD_ADDR_OWVAR 42
25433: PUSH
25434: LD_INT 36
25436: ST_TO_ADDR
25437: GO 25630
25439: LD_INT 25
25441: DOUBLE
25442: EQUAL
25443: IFTRUE 25447
25445: GO 25458
25447: POP
// bc_type := b_breastwork ; 26 :
25448: LD_ADDR_OWVAR 42
25452: PUSH
25453: LD_INT 31
25455: ST_TO_ADDR
25456: GO 25630
25458: LD_INT 26
25460: DOUBLE
25461: EQUAL
25462: IFTRUE 25466
25464: GO 25477
25466: POP
// bc_type := b_bunker ; 27 :
25467: LD_ADDR_OWVAR 42
25471: PUSH
25472: LD_INT 32
25474: ST_TO_ADDR
25475: GO 25630
25477: LD_INT 27
25479: DOUBLE
25480: EQUAL
25481: IFTRUE 25485
25483: GO 25496
25485: POP
// bc_type := b_turret ; 28 :
25486: LD_ADDR_OWVAR 42
25490: PUSH
25491: LD_INT 33
25493: ST_TO_ADDR
25494: GO 25630
25496: LD_INT 28
25498: DOUBLE
25499: EQUAL
25500: IFTRUE 25504
25502: GO 25515
25504: POP
// bc_type := b_armoury ; 29 :
25505: LD_ADDR_OWVAR 42
25509: PUSH
25510: LD_INT 4
25512: ST_TO_ADDR
25513: GO 25630
25515: LD_INT 29
25517: DOUBLE
25518: EQUAL
25519: IFTRUE 25523
25521: GO 25534
25523: POP
// bc_type := b_barracks ; 30 :
25524: LD_ADDR_OWVAR 42
25528: PUSH
25529: LD_INT 5
25531: ST_TO_ADDR
25532: GO 25630
25534: LD_INT 30
25536: DOUBLE
25537: EQUAL
25538: IFTRUE 25542
25540: GO 25553
25542: POP
// bc_type := b_solar_power ; 31 :
25543: LD_ADDR_OWVAR 42
25547: PUSH
25548: LD_INT 27
25550: ST_TO_ADDR
25551: GO 25630
25553: LD_INT 31
25555: DOUBLE
25556: EQUAL
25557: IFTRUE 25561
25559: GO 25572
25561: POP
// bc_type := b_oil_power ; 32 :
25562: LD_ADDR_OWVAR 42
25566: PUSH
25567: LD_INT 26
25569: ST_TO_ADDR
25570: GO 25630
25572: LD_INT 32
25574: DOUBLE
25575: EQUAL
25576: IFTRUE 25580
25578: GO 25591
25580: POP
// bc_type := b_siberite_power ; 33 :
25581: LD_ADDR_OWVAR 42
25585: PUSH
25586: LD_INT 28
25588: ST_TO_ADDR
25589: GO 25630
25591: LD_INT 33
25593: DOUBLE
25594: EQUAL
25595: IFTRUE 25599
25597: GO 25610
25599: POP
// bc_type := b_oil_mine ; 34 :
25600: LD_ADDR_OWVAR 42
25604: PUSH
25605: LD_INT 29
25607: ST_TO_ADDR
25608: GO 25630
25610: LD_INT 34
25612: DOUBLE
25613: EQUAL
25614: IFTRUE 25618
25616: GO 25629
25618: POP
// bc_type := b_siberite_mine ; end ;
25619: LD_ADDR_OWVAR 42
25623: PUSH
25624: LD_INT 30
25626: ST_TO_ADDR
25627: GO 25630
25629: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
25630: LD_ADDR_VAR 0 8
25634: PUSH
25635: LD_VAR 0 5
25639: PPUSH
25640: LD_VAR 0 6
25644: PPUSH
25645: LD_VAR 0 3
25649: PPUSH
25650: CALL_OW 47
25654: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
25655: LD_OWVAR 42
25659: PUSH
25660: LD_INT 32
25662: PUSH
25663: LD_INT 33
25665: PUSH
25666: EMPTY
25667: LIST
25668: LIST
25669: IN
25670: IFFALSE 25686
// PlaceWeaponTurret ( b , weapon ) ;
25672: LD_VAR 0 8
25676: PPUSH
25677: LD_VAR 0 4
25681: PPUSH
25682: CALL_OW 431
// end ;
25686: LD_VAR 0 7
25690: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
25691: LD_INT 0
25693: PPUSH
25694: PPUSH
25695: PPUSH
25696: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25697: LD_ADDR_VAR 0 4
25701: PUSH
25702: LD_INT 22
25704: PUSH
25705: LD_OWVAR 2
25709: PUSH
25710: EMPTY
25711: LIST
25712: LIST
25713: PUSH
25714: LD_INT 2
25716: PUSH
25717: LD_INT 30
25719: PUSH
25720: LD_INT 0
25722: PUSH
25723: EMPTY
25724: LIST
25725: LIST
25726: PUSH
25727: LD_INT 30
25729: PUSH
25730: LD_INT 1
25732: PUSH
25733: EMPTY
25734: LIST
25735: LIST
25736: PUSH
25737: EMPTY
25738: LIST
25739: LIST
25740: LIST
25741: PUSH
25742: EMPTY
25743: LIST
25744: LIST
25745: PPUSH
25746: CALL_OW 69
25750: ST_TO_ADDR
// if not tmp then
25751: LD_VAR 0 4
25755: NOT
25756: IFFALSE 25760
// exit ;
25758: GO 25819
// for i in tmp do
25760: LD_ADDR_VAR 0 2
25764: PUSH
25765: LD_VAR 0 4
25769: PUSH
25770: FOR_IN
25771: IFFALSE 25817
// for j = 1 to 3 do
25773: LD_ADDR_VAR 0 3
25777: PUSH
25778: DOUBLE
25779: LD_INT 1
25781: DEC
25782: ST_TO_ADDR
25783: LD_INT 3
25785: PUSH
25786: FOR_TO
25787: IFFALSE 25813
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
25789: LD_VAR 0 2
25793: PPUSH
25794: CALL_OW 274
25798: PPUSH
25799: LD_VAR 0 3
25803: PPUSH
25804: LD_INT 99999
25806: PPUSH
25807: CALL_OW 277
25811: GO 25786
25813: POP
25814: POP
25815: GO 25770
25817: POP
25818: POP
// end ;
25819: LD_VAR 0 1
25823: RET
// export function hHackSetLevel10 ; var i , j ; begin
25824: LD_INT 0
25826: PPUSH
25827: PPUSH
25828: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25829: LD_ADDR_VAR 0 2
25833: PUSH
25834: LD_INT 21
25836: PUSH
25837: LD_INT 1
25839: PUSH
25840: EMPTY
25841: LIST
25842: LIST
25843: PPUSH
25844: CALL_OW 69
25848: PUSH
25849: FOR_IN
25850: IFFALSE 25902
// if IsSelected ( i ) then
25852: LD_VAR 0 2
25856: PPUSH
25857: CALL_OW 306
25861: IFFALSE 25900
// begin for j := 1 to 4 do
25863: LD_ADDR_VAR 0 3
25867: PUSH
25868: DOUBLE
25869: LD_INT 1
25871: DEC
25872: ST_TO_ADDR
25873: LD_INT 4
25875: PUSH
25876: FOR_TO
25877: IFFALSE 25898
// SetSkill ( i , j , 10 ) ;
25879: LD_VAR 0 2
25883: PPUSH
25884: LD_VAR 0 3
25888: PPUSH
25889: LD_INT 10
25891: PPUSH
25892: CALL_OW 237
25896: GO 25876
25898: POP
25899: POP
// end ;
25900: GO 25849
25902: POP
25903: POP
// end ;
25904: LD_VAR 0 1
25908: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
25909: LD_INT 0
25911: PPUSH
25912: PPUSH
25913: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
25914: LD_ADDR_VAR 0 2
25918: PUSH
25919: LD_INT 22
25921: PUSH
25922: LD_OWVAR 2
25926: PUSH
25927: EMPTY
25928: LIST
25929: LIST
25930: PUSH
25931: LD_INT 21
25933: PUSH
25934: LD_INT 1
25936: PUSH
25937: EMPTY
25938: LIST
25939: LIST
25940: PUSH
25941: EMPTY
25942: LIST
25943: LIST
25944: PPUSH
25945: CALL_OW 69
25949: PUSH
25950: FOR_IN
25951: IFFALSE 25992
// begin for j := 1 to 4 do
25953: LD_ADDR_VAR 0 3
25957: PUSH
25958: DOUBLE
25959: LD_INT 1
25961: DEC
25962: ST_TO_ADDR
25963: LD_INT 4
25965: PUSH
25966: FOR_TO
25967: IFFALSE 25988
// SetSkill ( i , j , 10 ) ;
25969: LD_VAR 0 2
25973: PPUSH
25974: LD_VAR 0 3
25978: PPUSH
25979: LD_INT 10
25981: PPUSH
25982: CALL_OW 237
25986: GO 25966
25988: POP
25989: POP
// end ;
25990: GO 25950
25992: POP
25993: POP
// end ;
25994: LD_VAR 0 1
25998: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
25999: LD_INT 0
26001: PPUSH
// uc_side := your_side ;
26002: LD_ADDR_OWVAR 20
26006: PUSH
26007: LD_OWVAR 2
26011: ST_TO_ADDR
// uc_nation := nation ;
26012: LD_ADDR_OWVAR 21
26016: PUSH
26017: LD_VAR 0 1
26021: ST_TO_ADDR
// InitHc ;
26022: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
26026: LD_INT 0
26028: PPUSH
26029: LD_VAR 0 2
26033: PPUSH
26034: LD_VAR 0 3
26038: PPUSH
26039: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
26043: LD_VAR 0 4
26047: PPUSH
26048: LD_VAR 0 5
26052: PPUSH
26053: CALL_OW 428
26057: PUSH
26058: LD_INT 0
26060: EQUAL
26061: IFFALSE 26085
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
26063: CALL_OW 44
26067: PPUSH
26068: LD_VAR 0 4
26072: PPUSH
26073: LD_VAR 0 5
26077: PPUSH
26078: LD_INT 1
26080: PPUSH
26081: CALL_OW 48
// end ;
26085: LD_VAR 0 6
26089: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
26090: LD_INT 0
26092: PPUSH
26093: PPUSH
// uc_side := your_side ;
26094: LD_ADDR_OWVAR 20
26098: PUSH
26099: LD_OWVAR 2
26103: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
26104: LD_VAR 0 1
26108: PUSH
26109: LD_INT 1
26111: PUSH
26112: LD_INT 2
26114: PUSH
26115: LD_INT 3
26117: PUSH
26118: LD_INT 4
26120: PUSH
26121: LD_INT 5
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: LIST
26128: LIST
26129: LIST
26130: IN
26131: IFFALSE 26143
// uc_nation := nation_american else
26133: LD_ADDR_OWVAR 21
26137: PUSH
26138: LD_INT 1
26140: ST_TO_ADDR
26141: GO 26186
// if chassis in [ 11 , 12 , 13 , 14 ] then
26143: LD_VAR 0 1
26147: PUSH
26148: LD_INT 11
26150: PUSH
26151: LD_INT 12
26153: PUSH
26154: LD_INT 13
26156: PUSH
26157: LD_INT 14
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: LIST
26164: LIST
26165: IN
26166: IFFALSE 26178
// uc_nation := nation_arabian else
26168: LD_ADDR_OWVAR 21
26172: PUSH
26173: LD_INT 2
26175: ST_TO_ADDR
26176: GO 26186
// uc_nation := nation_russian ;
26178: LD_ADDR_OWVAR 21
26182: PUSH
26183: LD_INT 3
26185: ST_TO_ADDR
// vc_chassis := chassis ;
26186: LD_ADDR_OWVAR 37
26190: PUSH
26191: LD_VAR 0 1
26195: ST_TO_ADDR
// vc_engine := engine ;
26196: LD_ADDR_OWVAR 39
26200: PUSH
26201: LD_VAR 0 2
26205: ST_TO_ADDR
// vc_control := control ;
26206: LD_ADDR_OWVAR 38
26210: PUSH
26211: LD_VAR 0 3
26215: ST_TO_ADDR
// vc_weapon := weapon ;
26216: LD_ADDR_OWVAR 40
26220: PUSH
26221: LD_VAR 0 4
26225: ST_TO_ADDR
// un := CreateVehicle ;
26226: LD_ADDR_VAR 0 8
26230: PUSH
26231: CALL_OW 45
26235: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
26236: LD_VAR 0 8
26240: PPUSH
26241: LD_INT 0
26243: PPUSH
26244: LD_INT 5
26246: PPUSH
26247: CALL_OW 12
26251: PPUSH
26252: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
26256: LD_VAR 0 8
26260: PPUSH
26261: LD_VAR 0 5
26265: PPUSH
26266: LD_VAR 0 6
26270: PPUSH
26271: LD_INT 1
26273: PPUSH
26274: CALL_OW 48
// end ;
26278: LD_VAR 0 7
26282: RET
// export hInvincible ; every 1 do
26283: GO 26285
26285: DISABLE
// hInvincible := [ ] ;
26286: LD_ADDR_EXP 79
26290: PUSH
26291: EMPTY
26292: ST_TO_ADDR
26293: END
// every 10 do var i ;
26294: GO 26296
26296: DISABLE
26297: LD_INT 0
26299: PPUSH
// begin enable ;
26300: ENABLE
// if not hInvincible then
26301: LD_EXP 79
26305: NOT
26306: IFFALSE 26310
// exit ;
26308: GO 26354
// for i in hInvincible do
26310: LD_ADDR_VAR 0 1
26314: PUSH
26315: LD_EXP 79
26319: PUSH
26320: FOR_IN
26321: IFFALSE 26352
// if GetLives ( i ) < 1000 then
26323: LD_VAR 0 1
26327: PPUSH
26328: CALL_OW 256
26332: PUSH
26333: LD_INT 1000
26335: LESS
26336: IFFALSE 26350
// SetLives ( i , 1000 ) ;
26338: LD_VAR 0 1
26342: PPUSH
26343: LD_INT 1000
26345: PPUSH
26346: CALL_OW 234
26350: GO 26320
26352: POP
26353: POP
// end ;
26354: PPOPN 1
26356: END
// export function hHackInvincible ; var i ; begin
26357: LD_INT 0
26359: PPUSH
26360: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
26361: LD_ADDR_VAR 0 2
26365: PUSH
26366: LD_INT 2
26368: PUSH
26369: LD_INT 21
26371: PUSH
26372: LD_INT 1
26374: PUSH
26375: EMPTY
26376: LIST
26377: LIST
26378: PUSH
26379: LD_INT 21
26381: PUSH
26382: LD_INT 2
26384: PUSH
26385: EMPTY
26386: LIST
26387: LIST
26388: PUSH
26389: EMPTY
26390: LIST
26391: LIST
26392: LIST
26393: PPUSH
26394: CALL_OW 69
26398: PUSH
26399: FOR_IN
26400: IFFALSE 26461
// if IsSelected ( i ) then
26402: LD_VAR 0 2
26406: PPUSH
26407: CALL_OW 306
26411: IFFALSE 26459
// begin if i in hInvincible then
26413: LD_VAR 0 2
26417: PUSH
26418: LD_EXP 79
26422: IN
26423: IFFALSE 26443
// hInvincible := hInvincible diff i else
26425: LD_ADDR_EXP 79
26429: PUSH
26430: LD_EXP 79
26434: PUSH
26435: LD_VAR 0 2
26439: DIFF
26440: ST_TO_ADDR
26441: GO 26459
// hInvincible := hInvincible union i ;
26443: LD_ADDR_EXP 79
26447: PUSH
26448: LD_EXP 79
26452: PUSH
26453: LD_VAR 0 2
26457: UNION
26458: ST_TO_ADDR
// end ;
26459: GO 26399
26461: POP
26462: POP
// end ;
26463: LD_VAR 0 1
26467: RET
// export function hHackInvisible ; var i , j ; begin
26468: LD_INT 0
26470: PPUSH
26471: PPUSH
26472: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
26473: LD_ADDR_VAR 0 2
26477: PUSH
26478: LD_INT 21
26480: PUSH
26481: LD_INT 1
26483: PUSH
26484: EMPTY
26485: LIST
26486: LIST
26487: PPUSH
26488: CALL_OW 69
26492: PUSH
26493: FOR_IN
26494: IFFALSE 26518
// if IsSelected ( i ) then
26496: LD_VAR 0 2
26500: PPUSH
26501: CALL_OW 306
26505: IFFALSE 26516
// ComForceInvisible ( i ) ;
26507: LD_VAR 0 2
26511: PPUSH
26512: CALL_OW 496
26516: GO 26493
26518: POP
26519: POP
// end ;
26520: LD_VAR 0 1
26524: RET
// export function hHackChangeYourSide ; begin
26525: LD_INT 0
26527: PPUSH
// if your_side = 8 then
26528: LD_OWVAR 2
26532: PUSH
26533: LD_INT 8
26535: EQUAL
26536: IFFALSE 26548
// your_side := 0 else
26538: LD_ADDR_OWVAR 2
26542: PUSH
26543: LD_INT 0
26545: ST_TO_ADDR
26546: GO 26562
// your_side := your_side + 1 ;
26548: LD_ADDR_OWVAR 2
26552: PUSH
26553: LD_OWVAR 2
26557: PUSH
26558: LD_INT 1
26560: PLUS
26561: ST_TO_ADDR
// end ;
26562: LD_VAR 0 1
26566: RET
// export function hHackChangeUnitSide ; var i , j ; begin
26567: LD_INT 0
26569: PPUSH
26570: PPUSH
26571: PPUSH
// for i in all_units do
26572: LD_ADDR_VAR 0 2
26576: PUSH
26577: LD_OWVAR 3
26581: PUSH
26582: FOR_IN
26583: IFFALSE 26661
// if IsSelected ( i ) then
26585: LD_VAR 0 2
26589: PPUSH
26590: CALL_OW 306
26594: IFFALSE 26659
// begin j := GetSide ( i ) ;
26596: LD_ADDR_VAR 0 3
26600: PUSH
26601: LD_VAR 0 2
26605: PPUSH
26606: CALL_OW 255
26610: ST_TO_ADDR
// if j = 8 then
26611: LD_VAR 0 3
26615: PUSH
26616: LD_INT 8
26618: EQUAL
26619: IFFALSE 26631
// j := 0 else
26621: LD_ADDR_VAR 0 3
26625: PUSH
26626: LD_INT 0
26628: ST_TO_ADDR
26629: GO 26645
// j := j + 1 ;
26631: LD_ADDR_VAR 0 3
26635: PUSH
26636: LD_VAR 0 3
26640: PUSH
26641: LD_INT 1
26643: PLUS
26644: ST_TO_ADDR
// SetSide ( i , j ) ;
26645: LD_VAR 0 2
26649: PPUSH
26650: LD_VAR 0 3
26654: PPUSH
26655: CALL_OW 235
// end ;
26659: GO 26582
26661: POP
26662: POP
// end ;
26663: LD_VAR 0 1
26667: RET
// export function hHackFog ; begin
26668: LD_INT 0
26670: PPUSH
// FogOff ( true ) ;
26671: LD_INT 1
26673: PPUSH
26674: CALL_OW 344
// end ;
26678: LD_VAR 0 1
26682: RET
// export function hHackTeleport ( unit , x , y ) ; begin
26683: LD_INT 0
26685: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
26686: LD_VAR 0 1
26690: PPUSH
26691: LD_VAR 0 2
26695: PPUSH
26696: LD_VAR 0 3
26700: PPUSH
26701: LD_INT 1
26703: PPUSH
26704: LD_INT 1
26706: PPUSH
26707: CALL_OW 483
// CenterOnXY ( x , y ) ;
26711: LD_VAR 0 2
26715: PPUSH
26716: LD_VAR 0 3
26720: PPUSH
26721: CALL_OW 84
// end ;
26725: LD_VAR 0 4
26729: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
26730: LD_INT 0
26732: PPUSH
26733: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
26734: LD_VAR 0 1
26738: NOT
26739: PUSH
26740: LD_VAR 0 2
26744: PPUSH
26745: LD_VAR 0 3
26749: PPUSH
26750: CALL_OW 488
26754: NOT
26755: OR
26756: PUSH
26757: LD_VAR 0 1
26761: PPUSH
26762: CALL_OW 266
26766: PUSH
26767: LD_INT 3
26769: NONEQUAL
26770: PUSH
26771: LD_VAR 0 1
26775: PPUSH
26776: CALL_OW 247
26780: PUSH
26781: LD_INT 1
26783: EQUAL
26784: NOT
26785: AND
26786: OR
26787: IFFALSE 26791
// exit ;
26789: GO 26940
// if GetType ( factory ) = unit_human then
26791: LD_VAR 0 1
26795: PPUSH
26796: CALL_OW 247
26800: PUSH
26801: LD_INT 1
26803: EQUAL
26804: IFFALSE 26821
// factory := IsInUnit ( factory ) ;
26806: LD_ADDR_VAR 0 1
26810: PUSH
26811: LD_VAR 0 1
26815: PPUSH
26816: CALL_OW 310
26820: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
26821: LD_VAR 0 1
26825: PPUSH
26826: CALL_OW 266
26830: PUSH
26831: LD_INT 3
26833: NONEQUAL
26834: IFFALSE 26838
// exit ;
26836: GO 26940
// if HexInfo ( x , y ) = factory then
26838: LD_VAR 0 2
26842: PPUSH
26843: LD_VAR 0 3
26847: PPUSH
26848: CALL_OW 428
26852: PUSH
26853: LD_VAR 0 1
26857: EQUAL
26858: IFFALSE 26885
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
26860: LD_ADDR_EXP 80
26864: PUSH
26865: LD_EXP 80
26869: PPUSH
26870: LD_VAR 0 1
26874: PPUSH
26875: LD_INT 0
26877: PPUSH
26878: CALL_OW 1
26882: ST_TO_ADDR
26883: GO 26936
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
26885: LD_ADDR_EXP 80
26889: PUSH
26890: LD_EXP 80
26894: PPUSH
26895: LD_VAR 0 1
26899: PPUSH
26900: LD_VAR 0 1
26904: PPUSH
26905: CALL_OW 255
26909: PUSH
26910: LD_VAR 0 1
26914: PUSH
26915: LD_VAR 0 2
26919: PUSH
26920: LD_VAR 0 3
26924: PUSH
26925: EMPTY
26926: LIST
26927: LIST
26928: LIST
26929: LIST
26930: PPUSH
26931: CALL_OW 1
26935: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26936: CALL 26945 0 0
// end ;
26940: LD_VAR 0 4
26944: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
26945: LD_INT 0
26947: PPUSH
26948: PPUSH
26949: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
26950: LD_STRING resetFactoryWaypoint();
26952: PPUSH
26953: CALL_OW 559
// if factoryWaypoints then
26957: LD_EXP 80
26961: IFFALSE 27087
// begin list := PrepareArray ( factoryWaypoints ) ;
26963: LD_ADDR_VAR 0 3
26967: PUSH
26968: LD_EXP 80
26972: PPUSH
26973: CALL 73556 0 1
26977: ST_TO_ADDR
// for i := 1 to list do
26978: LD_ADDR_VAR 0 2
26982: PUSH
26983: DOUBLE
26984: LD_INT 1
26986: DEC
26987: ST_TO_ADDR
26988: LD_VAR 0 3
26992: PUSH
26993: FOR_TO
26994: IFFALSE 27085
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26996: LD_STRING setFactoryWaypointXY(
26998: PUSH
26999: LD_VAR 0 3
27003: PUSH
27004: LD_VAR 0 2
27008: ARRAY
27009: PUSH
27010: LD_INT 1
27012: ARRAY
27013: STR
27014: PUSH
27015: LD_STRING ,
27017: STR
27018: PUSH
27019: LD_VAR 0 3
27023: PUSH
27024: LD_VAR 0 2
27028: ARRAY
27029: PUSH
27030: LD_INT 2
27032: ARRAY
27033: STR
27034: PUSH
27035: LD_STRING ,
27037: STR
27038: PUSH
27039: LD_VAR 0 3
27043: PUSH
27044: LD_VAR 0 2
27048: ARRAY
27049: PUSH
27050: LD_INT 3
27052: ARRAY
27053: STR
27054: PUSH
27055: LD_STRING ,
27057: STR
27058: PUSH
27059: LD_VAR 0 3
27063: PUSH
27064: LD_VAR 0 2
27068: ARRAY
27069: PUSH
27070: LD_INT 4
27072: ARRAY
27073: STR
27074: PUSH
27075: LD_STRING )
27077: STR
27078: PPUSH
27079: CALL_OW 559
27083: GO 26993
27085: POP
27086: POP
// end ; end ;
27087: LD_VAR 0 1
27091: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
27092: LD_INT 0
27094: PPUSH
// if HexInfo ( x , y ) = warehouse then
27095: LD_VAR 0 2
27099: PPUSH
27100: LD_VAR 0 3
27104: PPUSH
27105: CALL_OW 428
27109: PUSH
27110: LD_VAR 0 1
27114: EQUAL
27115: IFFALSE 27142
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
27117: LD_ADDR_EXP 81
27121: PUSH
27122: LD_EXP 81
27126: PPUSH
27127: LD_VAR 0 1
27131: PPUSH
27132: LD_INT 0
27134: PPUSH
27135: CALL_OW 1
27139: ST_TO_ADDR
27140: GO 27193
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
27142: LD_ADDR_EXP 81
27146: PUSH
27147: LD_EXP 81
27151: PPUSH
27152: LD_VAR 0 1
27156: PPUSH
27157: LD_VAR 0 1
27161: PPUSH
27162: CALL_OW 255
27166: PUSH
27167: LD_VAR 0 1
27171: PUSH
27172: LD_VAR 0 2
27176: PUSH
27177: LD_VAR 0 3
27181: PUSH
27182: EMPTY
27183: LIST
27184: LIST
27185: LIST
27186: LIST
27187: PPUSH
27188: CALL_OW 1
27192: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
27193: CALL 27202 0 0
// end ;
27197: LD_VAR 0 4
27201: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
27202: LD_INT 0
27204: PPUSH
27205: PPUSH
27206: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
27207: LD_STRING resetWarehouseGatheringPoints();
27209: PPUSH
27210: CALL_OW 559
// if warehouseGatheringPoints then
27214: LD_EXP 81
27218: IFFALSE 27344
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
27220: LD_ADDR_VAR 0 3
27224: PUSH
27225: LD_EXP 81
27229: PPUSH
27230: CALL 73556 0 1
27234: ST_TO_ADDR
// for i := 1 to list do
27235: LD_ADDR_VAR 0 2
27239: PUSH
27240: DOUBLE
27241: LD_INT 1
27243: DEC
27244: ST_TO_ADDR
27245: LD_VAR 0 3
27249: PUSH
27250: FOR_TO
27251: IFFALSE 27342
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
27253: LD_STRING setWarehouseGatheringPointXY(
27255: PUSH
27256: LD_VAR 0 3
27260: PUSH
27261: LD_VAR 0 2
27265: ARRAY
27266: PUSH
27267: LD_INT 1
27269: ARRAY
27270: STR
27271: PUSH
27272: LD_STRING ,
27274: STR
27275: PUSH
27276: LD_VAR 0 3
27280: PUSH
27281: LD_VAR 0 2
27285: ARRAY
27286: PUSH
27287: LD_INT 2
27289: ARRAY
27290: STR
27291: PUSH
27292: LD_STRING ,
27294: STR
27295: PUSH
27296: LD_VAR 0 3
27300: PUSH
27301: LD_VAR 0 2
27305: ARRAY
27306: PUSH
27307: LD_INT 3
27309: ARRAY
27310: STR
27311: PUSH
27312: LD_STRING ,
27314: STR
27315: PUSH
27316: LD_VAR 0 3
27320: PUSH
27321: LD_VAR 0 2
27325: ARRAY
27326: PUSH
27327: LD_INT 4
27329: ARRAY
27330: STR
27331: PUSH
27332: LD_STRING )
27334: STR
27335: PPUSH
27336: CALL_OW 559
27340: GO 27250
27342: POP
27343: POP
// end ; end ;
27344: LD_VAR 0 1
27348: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
27349: LD_EXP 81
27353: IFFALSE 28038
27355: GO 27357
27357: DISABLE
27358: LD_INT 0
27360: PPUSH
27361: PPUSH
27362: PPUSH
27363: PPUSH
27364: PPUSH
27365: PPUSH
27366: PPUSH
27367: PPUSH
27368: PPUSH
// begin enable ;
27369: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
27370: LD_ADDR_VAR 0 3
27374: PUSH
27375: LD_EXP 81
27379: PPUSH
27380: CALL 73556 0 1
27384: ST_TO_ADDR
// if not list then
27385: LD_VAR 0 3
27389: NOT
27390: IFFALSE 27394
// exit ;
27392: GO 28038
// for i := 1 to list do
27394: LD_ADDR_VAR 0 1
27398: PUSH
27399: DOUBLE
27400: LD_INT 1
27402: DEC
27403: ST_TO_ADDR
27404: LD_VAR 0 3
27408: PUSH
27409: FOR_TO
27410: IFFALSE 28036
// begin depot := list [ i ] [ 2 ] ;
27412: LD_ADDR_VAR 0 8
27416: PUSH
27417: LD_VAR 0 3
27421: PUSH
27422: LD_VAR 0 1
27426: ARRAY
27427: PUSH
27428: LD_INT 2
27430: ARRAY
27431: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
27432: LD_ADDR_VAR 0 5
27436: PUSH
27437: LD_VAR 0 3
27441: PUSH
27442: LD_VAR 0 1
27446: ARRAY
27447: PUSH
27448: LD_INT 1
27450: ARRAY
27451: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
27452: LD_VAR 0 8
27456: PPUSH
27457: CALL_OW 301
27461: PUSH
27462: LD_VAR 0 5
27466: PUSH
27467: LD_VAR 0 8
27471: PPUSH
27472: CALL_OW 255
27476: NONEQUAL
27477: OR
27478: IFFALSE 27507
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
27480: LD_ADDR_EXP 81
27484: PUSH
27485: LD_EXP 81
27489: PPUSH
27490: LD_VAR 0 8
27494: PPUSH
27495: LD_INT 0
27497: PPUSH
27498: CALL_OW 1
27502: ST_TO_ADDR
// exit ;
27503: POP
27504: POP
27505: GO 28038
// end ; x := list [ i ] [ 3 ] ;
27507: LD_ADDR_VAR 0 6
27511: PUSH
27512: LD_VAR 0 3
27516: PUSH
27517: LD_VAR 0 1
27521: ARRAY
27522: PUSH
27523: LD_INT 3
27525: ARRAY
27526: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
27527: LD_ADDR_VAR 0 7
27531: PUSH
27532: LD_VAR 0 3
27536: PUSH
27537: LD_VAR 0 1
27541: ARRAY
27542: PUSH
27543: LD_INT 4
27545: ARRAY
27546: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
27547: LD_ADDR_VAR 0 9
27551: PUSH
27552: LD_VAR 0 6
27556: PPUSH
27557: LD_VAR 0 7
27561: PPUSH
27562: LD_INT 16
27564: PPUSH
27565: CALL 72144 0 3
27569: ST_TO_ADDR
// if not cratesNearbyPoint then
27570: LD_VAR 0 9
27574: NOT
27575: IFFALSE 27581
// exit ;
27577: POP
27578: POP
27579: GO 28038
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
27581: LD_ADDR_VAR 0 4
27585: PUSH
27586: LD_INT 22
27588: PUSH
27589: LD_VAR 0 5
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: PUSH
27598: LD_INT 3
27600: PUSH
27601: LD_INT 60
27603: PUSH
27604: EMPTY
27605: LIST
27606: PUSH
27607: EMPTY
27608: LIST
27609: LIST
27610: PUSH
27611: LD_INT 91
27613: PUSH
27614: LD_VAR 0 8
27618: PUSH
27619: LD_INT 6
27621: PUSH
27622: EMPTY
27623: LIST
27624: LIST
27625: LIST
27626: PUSH
27627: LD_INT 2
27629: PUSH
27630: LD_INT 25
27632: PUSH
27633: LD_INT 2
27635: PUSH
27636: EMPTY
27637: LIST
27638: LIST
27639: PUSH
27640: LD_INT 25
27642: PUSH
27643: LD_INT 16
27645: PUSH
27646: EMPTY
27647: LIST
27648: LIST
27649: PUSH
27650: EMPTY
27651: LIST
27652: LIST
27653: LIST
27654: PUSH
27655: EMPTY
27656: LIST
27657: LIST
27658: LIST
27659: LIST
27660: PPUSH
27661: CALL_OW 69
27665: PUSH
27666: LD_VAR 0 8
27670: PPUSH
27671: CALL_OW 313
27675: PPUSH
27676: LD_INT 3
27678: PUSH
27679: LD_INT 60
27681: PUSH
27682: EMPTY
27683: LIST
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: PUSH
27689: LD_INT 2
27691: PUSH
27692: LD_INT 25
27694: PUSH
27695: LD_INT 2
27697: PUSH
27698: EMPTY
27699: LIST
27700: LIST
27701: PUSH
27702: LD_INT 25
27704: PUSH
27705: LD_INT 16
27707: PUSH
27708: EMPTY
27709: LIST
27710: LIST
27711: PUSH
27712: EMPTY
27713: LIST
27714: LIST
27715: LIST
27716: PUSH
27717: EMPTY
27718: LIST
27719: LIST
27720: PPUSH
27721: CALL_OW 72
27725: UNION
27726: ST_TO_ADDR
// if tmp then
27727: LD_VAR 0 4
27731: IFFALSE 27811
// begin tmp := ShrinkArray ( tmp , 3 ) ;
27733: LD_ADDR_VAR 0 4
27737: PUSH
27738: LD_VAR 0 4
27742: PPUSH
27743: LD_INT 3
27745: PPUSH
27746: CALL 70113 0 2
27750: ST_TO_ADDR
// for j in tmp do
27751: LD_ADDR_VAR 0 2
27755: PUSH
27756: LD_VAR 0 4
27760: PUSH
27761: FOR_IN
27762: IFFALSE 27805
// begin if IsInUnit ( j ) then
27764: LD_VAR 0 2
27768: PPUSH
27769: CALL_OW 310
27773: IFFALSE 27784
// ComExit ( j ) ;
27775: LD_VAR 0 2
27779: PPUSH
27780: CALL 70196 0 1
// AddComCollect ( j , x , y ) ;
27784: LD_VAR 0 2
27788: PPUSH
27789: LD_VAR 0 6
27793: PPUSH
27794: LD_VAR 0 7
27798: PPUSH
27799: CALL_OW 177
// end ;
27803: GO 27761
27805: POP
27806: POP
// exit ;
27807: POP
27808: POP
27809: GO 28038
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
27811: LD_ADDR_VAR 0 4
27815: PUSH
27816: LD_INT 22
27818: PUSH
27819: LD_VAR 0 5
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: PUSH
27828: LD_INT 91
27830: PUSH
27831: LD_VAR 0 8
27835: PUSH
27836: LD_INT 8
27838: PUSH
27839: EMPTY
27840: LIST
27841: LIST
27842: LIST
27843: PUSH
27844: LD_INT 2
27846: PUSH
27847: LD_INT 34
27849: PUSH
27850: LD_INT 12
27852: PUSH
27853: EMPTY
27854: LIST
27855: LIST
27856: PUSH
27857: LD_INT 34
27859: PUSH
27860: LD_INT 51
27862: PUSH
27863: EMPTY
27864: LIST
27865: LIST
27866: PUSH
27867: LD_INT 34
27869: PUSH
27870: LD_INT 32
27872: PUSH
27873: EMPTY
27874: LIST
27875: LIST
27876: PUSH
27877: LD_INT 34
27879: PUSH
27880: LD_INT 89
27882: PUSH
27883: EMPTY
27884: LIST
27885: LIST
27886: PUSH
27887: EMPTY
27888: LIST
27889: LIST
27890: LIST
27891: LIST
27892: LIST
27893: PUSH
27894: EMPTY
27895: LIST
27896: LIST
27897: LIST
27898: PPUSH
27899: CALL_OW 69
27903: ST_TO_ADDR
// if tmp then
27904: LD_VAR 0 4
27908: IFFALSE 28034
// begin for j in tmp do
27910: LD_ADDR_VAR 0 2
27914: PUSH
27915: LD_VAR 0 4
27919: PUSH
27920: FOR_IN
27921: IFFALSE 28032
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
27923: LD_VAR 0 2
27927: PPUSH
27928: CALL_OW 262
27932: PUSH
27933: LD_INT 3
27935: EQUAL
27936: PUSH
27937: LD_VAR 0 2
27941: PPUSH
27942: CALL_OW 261
27946: PUSH
27947: LD_INT 20
27949: GREATER
27950: OR
27951: PUSH
27952: LD_VAR 0 2
27956: PPUSH
27957: CALL_OW 314
27961: NOT
27962: AND
27963: PUSH
27964: LD_VAR 0 2
27968: PPUSH
27969: CALL_OW 263
27973: PUSH
27974: LD_INT 1
27976: NONEQUAL
27977: PUSH
27978: LD_VAR 0 2
27982: PPUSH
27983: CALL_OW 311
27987: OR
27988: AND
27989: IFFALSE 28030
// begin ComCollect ( j , x , y ) ;
27991: LD_VAR 0 2
27995: PPUSH
27996: LD_VAR 0 6
28000: PPUSH
28001: LD_VAR 0 7
28005: PPUSH
28006: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
28010: LD_VAR 0 2
28014: PPUSH
28015: LD_VAR 0 8
28019: PPUSH
28020: CALL_OW 172
// exit ;
28024: POP
28025: POP
28026: POP
28027: POP
28028: GO 28038
// end ;
28030: GO 27920
28032: POP
28033: POP
// end ; end ;
28034: GO 27409
28036: POP
28037: POP
// end ; end_of_file
28038: PPOPN 9
28040: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
28041: LD_INT 0
28043: PPUSH
28044: PPUSH
28045: PPUSH
28046: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
28047: LD_VAR 0 1
28051: PPUSH
28052: CALL_OW 264
28056: PUSH
28057: LD_INT 91
28059: EQUAL
28060: IFFALSE 28132
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
28062: LD_INT 68
28064: PPUSH
28065: LD_VAR 0 1
28069: PPUSH
28070: CALL_OW 255
28074: PPUSH
28075: CALL_OW 321
28079: PUSH
28080: LD_INT 2
28082: EQUAL
28083: IFFALSE 28095
// eff := 70 else
28085: LD_ADDR_VAR 0 4
28089: PUSH
28090: LD_INT 70
28092: ST_TO_ADDR
28093: GO 28103
// eff := 30 ;
28095: LD_ADDR_VAR 0 4
28099: PUSH
28100: LD_INT 30
28102: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
28103: LD_VAR 0 1
28107: PPUSH
28108: CALL_OW 250
28112: PPUSH
28113: LD_VAR 0 1
28117: PPUSH
28118: CALL_OW 251
28122: PPUSH
28123: LD_VAR 0 4
28127: PPUSH
28128: CALL_OW 495
// end ; end ;
28132: LD_VAR 0 2
28136: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
28137: LD_INT 0
28139: PPUSH
// end ;
28140: LD_VAR 0 4
28144: RET
// export function SOS_Command ( cmd ) ; begin
28145: LD_INT 0
28147: PPUSH
// end ;
28148: LD_VAR 0 2
28152: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
28153: LD_INT 0
28155: PPUSH
// end ;
28156: LD_VAR 0 6
28160: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
28161: LD_INT 0
28163: PPUSH
28164: PPUSH
// if not vehicle or not factory then
28165: LD_VAR 0 1
28169: NOT
28170: PUSH
28171: LD_VAR 0 2
28175: NOT
28176: OR
28177: IFFALSE 28181
// exit ;
28179: GO 28412
// if factoryWaypoints >= factory then
28181: LD_EXP 80
28185: PUSH
28186: LD_VAR 0 2
28190: GREATEREQUAL
28191: IFFALSE 28412
// if factoryWaypoints [ factory ] then
28193: LD_EXP 80
28197: PUSH
28198: LD_VAR 0 2
28202: ARRAY
28203: IFFALSE 28412
// begin if GetControl ( vehicle ) = control_manual then
28205: LD_VAR 0 1
28209: PPUSH
28210: CALL_OW 263
28214: PUSH
28215: LD_INT 1
28217: EQUAL
28218: IFFALSE 28299
// begin driver := IsDrivenBy ( vehicle ) ;
28220: LD_ADDR_VAR 0 4
28224: PUSH
28225: LD_VAR 0 1
28229: PPUSH
28230: CALL_OW 311
28234: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28235: LD_VAR 0 4
28239: PPUSH
28240: LD_EXP 80
28244: PUSH
28245: LD_VAR 0 2
28249: ARRAY
28250: PUSH
28251: LD_INT 3
28253: ARRAY
28254: PPUSH
28255: LD_EXP 80
28259: PUSH
28260: LD_VAR 0 2
28264: ARRAY
28265: PUSH
28266: LD_INT 4
28268: ARRAY
28269: PPUSH
28270: CALL_OW 171
// AddComExitVehicle ( driver ) ;
28274: LD_VAR 0 4
28278: PPUSH
28279: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
28283: LD_VAR 0 4
28287: PPUSH
28288: LD_VAR 0 2
28292: PPUSH
28293: CALL_OW 180
// end else
28297: GO 28412
// if GetControl ( vehicle ) = control_remote then
28299: LD_VAR 0 1
28303: PPUSH
28304: CALL_OW 263
28308: PUSH
28309: LD_INT 2
28311: EQUAL
28312: IFFALSE 28373
// begin wait ( 0 0$2 ) ;
28314: LD_INT 70
28316: PPUSH
28317: CALL_OW 67
// if Connect ( vehicle ) then
28321: LD_VAR 0 1
28325: PPUSH
28326: CALL 40436 0 1
28330: IFFALSE 28371
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28332: LD_VAR 0 1
28336: PPUSH
28337: LD_EXP 80
28341: PUSH
28342: LD_VAR 0 2
28346: ARRAY
28347: PUSH
28348: LD_INT 3
28350: ARRAY
28351: PPUSH
28352: LD_EXP 80
28356: PUSH
28357: LD_VAR 0 2
28361: ARRAY
28362: PUSH
28363: LD_INT 4
28365: ARRAY
28366: PPUSH
28367: CALL_OW 171
// end else
28371: GO 28412
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28373: LD_VAR 0 1
28377: PPUSH
28378: LD_EXP 80
28382: PUSH
28383: LD_VAR 0 2
28387: ARRAY
28388: PUSH
28389: LD_INT 3
28391: ARRAY
28392: PPUSH
28393: LD_EXP 80
28397: PUSH
28398: LD_VAR 0 2
28402: ARRAY
28403: PUSH
28404: LD_INT 4
28406: ARRAY
28407: PPUSH
28408: CALL_OW 171
// end ; end ;
28412: LD_VAR 0 3
28416: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
28417: LD_INT 0
28419: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
28420: LD_VAR 0 1
28424: PUSH
28425: LD_INT 250
28427: EQUAL
28428: PUSH
28429: LD_VAR 0 2
28433: PPUSH
28434: CALL_OW 264
28438: PUSH
28439: LD_INT 81
28441: EQUAL
28442: AND
28443: IFFALSE 28464
// MinerPlaceMine ( unit , x , y ) ;
28445: LD_VAR 0 2
28449: PPUSH
28450: LD_VAR 0 4
28454: PPUSH
28455: LD_VAR 0 5
28459: PPUSH
28460: CALL 30849 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
28464: LD_VAR 0 1
28468: PUSH
28469: LD_INT 251
28471: EQUAL
28472: PUSH
28473: LD_VAR 0 2
28477: PPUSH
28478: CALL_OW 264
28482: PUSH
28483: LD_INT 81
28485: EQUAL
28486: AND
28487: IFFALSE 28508
// MinerDetonateMine ( unit , x , y ) ;
28489: LD_VAR 0 2
28493: PPUSH
28494: LD_VAR 0 4
28498: PPUSH
28499: LD_VAR 0 5
28503: PPUSH
28504: CALL 31124 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
28508: LD_VAR 0 1
28512: PUSH
28513: LD_INT 252
28515: EQUAL
28516: PUSH
28517: LD_VAR 0 2
28521: PPUSH
28522: CALL_OW 264
28526: PUSH
28527: LD_INT 81
28529: EQUAL
28530: AND
28531: IFFALSE 28552
// MinerCreateMinefield ( unit , x , y ) ;
28533: LD_VAR 0 2
28537: PPUSH
28538: LD_VAR 0 4
28542: PPUSH
28543: LD_VAR 0 5
28547: PPUSH
28548: CALL 31541 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
28552: LD_VAR 0 1
28556: PUSH
28557: LD_INT 253
28559: EQUAL
28560: PUSH
28561: LD_VAR 0 2
28565: PPUSH
28566: CALL_OW 257
28570: PUSH
28571: LD_INT 5
28573: EQUAL
28574: AND
28575: IFFALSE 28596
// ComBinocular ( unit , x , y ) ;
28577: LD_VAR 0 2
28581: PPUSH
28582: LD_VAR 0 4
28586: PPUSH
28587: LD_VAR 0 5
28591: PPUSH
28592: CALL 31910 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
28596: LD_VAR 0 1
28600: PUSH
28601: LD_INT 254
28603: EQUAL
28604: PUSH
28605: LD_VAR 0 2
28609: PPUSH
28610: CALL_OW 264
28614: PUSH
28615: LD_INT 99
28617: EQUAL
28618: AND
28619: PUSH
28620: LD_VAR 0 3
28624: PPUSH
28625: CALL_OW 263
28629: PUSH
28630: LD_INT 3
28632: EQUAL
28633: AND
28634: IFFALSE 28650
// HackDestroyVehicle ( unit , selectedUnit ) ;
28636: LD_VAR 0 2
28640: PPUSH
28641: LD_VAR 0 3
28645: PPUSH
28646: CALL 30213 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
28650: LD_VAR 0 1
28654: PUSH
28655: LD_INT 255
28657: EQUAL
28658: PUSH
28659: LD_VAR 0 2
28663: PPUSH
28664: CALL_OW 264
28668: PUSH
28669: LD_INT 14
28671: PUSH
28672: LD_INT 53
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: IN
28679: AND
28680: PUSH
28681: LD_VAR 0 4
28685: PPUSH
28686: LD_VAR 0 5
28690: PPUSH
28691: CALL_OW 488
28695: AND
28696: IFFALSE 28720
// CutTreeXYR ( unit , x , y , 12 ) ;
28698: LD_VAR 0 2
28702: PPUSH
28703: LD_VAR 0 4
28707: PPUSH
28708: LD_VAR 0 5
28712: PPUSH
28713: LD_INT 12
28715: PPUSH
28716: CALL 28783 0 4
// if cmd = 256 then
28720: LD_VAR 0 1
28724: PUSH
28725: LD_INT 256
28727: EQUAL
28728: IFFALSE 28749
// SetFactoryWaypoint ( unit , x , y ) ;
28730: LD_VAR 0 2
28734: PPUSH
28735: LD_VAR 0 4
28739: PPUSH
28740: LD_VAR 0 5
28744: PPUSH
28745: CALL 26730 0 3
// if cmd = 257 then
28749: LD_VAR 0 1
28753: PUSH
28754: LD_INT 257
28756: EQUAL
28757: IFFALSE 28778
// SetWarehouseGatheringPoint ( unit , x , y ) ;
28759: LD_VAR 0 2
28763: PPUSH
28764: LD_VAR 0 4
28768: PPUSH
28769: LD_VAR 0 5
28773: PPUSH
28774: CALL 27092 0 3
// end ;
28778: LD_VAR 0 6
28782: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
28783: LD_INT 0
28785: PPUSH
28786: PPUSH
28787: PPUSH
28788: PPUSH
28789: PPUSH
28790: PPUSH
28791: PPUSH
28792: PPUSH
28793: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
28794: LD_VAR 0 1
28798: NOT
28799: PUSH
28800: LD_VAR 0 2
28804: PPUSH
28805: LD_VAR 0 3
28809: PPUSH
28810: CALL_OW 488
28814: NOT
28815: OR
28816: PUSH
28817: LD_VAR 0 4
28821: NOT
28822: OR
28823: IFFALSE 28827
// exit ;
28825: GO 29167
// list := [ ] ;
28827: LD_ADDR_VAR 0 13
28831: PUSH
28832: EMPTY
28833: ST_TO_ADDR
// if x - r < 0 then
28834: LD_VAR 0 2
28838: PUSH
28839: LD_VAR 0 4
28843: MINUS
28844: PUSH
28845: LD_INT 0
28847: LESS
28848: IFFALSE 28860
// min_x := 0 else
28850: LD_ADDR_VAR 0 7
28854: PUSH
28855: LD_INT 0
28857: ST_TO_ADDR
28858: GO 28876
// min_x := x - r ;
28860: LD_ADDR_VAR 0 7
28864: PUSH
28865: LD_VAR 0 2
28869: PUSH
28870: LD_VAR 0 4
28874: MINUS
28875: ST_TO_ADDR
// if y - r < 0 then
28876: LD_VAR 0 3
28880: PUSH
28881: LD_VAR 0 4
28885: MINUS
28886: PUSH
28887: LD_INT 0
28889: LESS
28890: IFFALSE 28902
// min_y := 0 else
28892: LD_ADDR_VAR 0 8
28896: PUSH
28897: LD_INT 0
28899: ST_TO_ADDR
28900: GO 28918
// min_y := y - r ;
28902: LD_ADDR_VAR 0 8
28906: PUSH
28907: LD_VAR 0 3
28911: PUSH
28912: LD_VAR 0 4
28916: MINUS
28917: ST_TO_ADDR
// max_x := x + r ;
28918: LD_ADDR_VAR 0 9
28922: PUSH
28923: LD_VAR 0 2
28927: PUSH
28928: LD_VAR 0 4
28932: PLUS
28933: ST_TO_ADDR
// max_y := y + r ;
28934: LD_ADDR_VAR 0 10
28938: PUSH
28939: LD_VAR 0 3
28943: PUSH
28944: LD_VAR 0 4
28948: PLUS
28949: ST_TO_ADDR
// for _x = min_x to max_x do
28950: LD_ADDR_VAR 0 11
28954: PUSH
28955: DOUBLE
28956: LD_VAR 0 7
28960: DEC
28961: ST_TO_ADDR
28962: LD_VAR 0 9
28966: PUSH
28967: FOR_TO
28968: IFFALSE 29085
// for _y = min_y to max_y do
28970: LD_ADDR_VAR 0 12
28974: PUSH
28975: DOUBLE
28976: LD_VAR 0 8
28980: DEC
28981: ST_TO_ADDR
28982: LD_VAR 0 10
28986: PUSH
28987: FOR_TO
28988: IFFALSE 29081
// begin if not ValidHex ( _x , _y ) then
28990: LD_VAR 0 11
28994: PPUSH
28995: LD_VAR 0 12
28999: PPUSH
29000: CALL_OW 488
29004: NOT
29005: IFFALSE 29009
// continue ;
29007: GO 28987
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
29009: LD_VAR 0 11
29013: PPUSH
29014: LD_VAR 0 12
29018: PPUSH
29019: CALL_OW 351
29023: PUSH
29024: LD_VAR 0 11
29028: PPUSH
29029: LD_VAR 0 12
29033: PPUSH
29034: CALL_OW 554
29038: AND
29039: IFFALSE 29079
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
29041: LD_ADDR_VAR 0 13
29045: PUSH
29046: LD_VAR 0 13
29050: PPUSH
29051: LD_VAR 0 13
29055: PUSH
29056: LD_INT 1
29058: PLUS
29059: PPUSH
29060: LD_VAR 0 11
29064: PUSH
29065: LD_VAR 0 12
29069: PUSH
29070: EMPTY
29071: LIST
29072: LIST
29073: PPUSH
29074: CALL_OW 2
29078: ST_TO_ADDR
// end ;
29079: GO 28987
29081: POP
29082: POP
29083: GO 28967
29085: POP
29086: POP
// if not list then
29087: LD_VAR 0 13
29091: NOT
29092: IFFALSE 29096
// exit ;
29094: GO 29167
// for i in list do
29096: LD_ADDR_VAR 0 6
29100: PUSH
29101: LD_VAR 0 13
29105: PUSH
29106: FOR_IN
29107: IFFALSE 29165
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
29109: LD_VAR 0 1
29113: PPUSH
29114: LD_STRING M
29116: PUSH
29117: LD_VAR 0 6
29121: PUSH
29122: LD_INT 1
29124: ARRAY
29125: PUSH
29126: LD_VAR 0 6
29130: PUSH
29131: LD_INT 2
29133: ARRAY
29134: PUSH
29135: LD_INT 0
29137: PUSH
29138: LD_INT 0
29140: PUSH
29141: LD_INT 0
29143: PUSH
29144: LD_INT 0
29146: PUSH
29147: EMPTY
29148: LIST
29149: LIST
29150: LIST
29151: LIST
29152: LIST
29153: LIST
29154: LIST
29155: PUSH
29156: EMPTY
29157: LIST
29158: PPUSH
29159: CALL_OW 447
29163: GO 29106
29165: POP
29166: POP
// end ;
29167: LD_VAR 0 5
29171: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
29172: LD_EXP 83
29176: NOT
29177: IFFALSE 29227
29179: GO 29181
29181: DISABLE
// begin initHack := true ;
29182: LD_ADDR_EXP 83
29186: PUSH
29187: LD_INT 1
29189: ST_TO_ADDR
// hackTanks := [ ] ;
29190: LD_ADDR_EXP 84
29194: PUSH
29195: EMPTY
29196: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
29197: LD_ADDR_EXP 85
29201: PUSH
29202: EMPTY
29203: ST_TO_ADDR
// hackLimit := 3 ;
29204: LD_ADDR_EXP 86
29208: PUSH
29209: LD_INT 3
29211: ST_TO_ADDR
// hackDist := 12 ;
29212: LD_ADDR_EXP 87
29216: PUSH
29217: LD_INT 12
29219: ST_TO_ADDR
// hackCounter := [ ] ;
29220: LD_ADDR_EXP 88
29224: PUSH
29225: EMPTY
29226: ST_TO_ADDR
// end ;
29227: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
29228: LD_EXP 83
29232: PUSH
29233: LD_INT 34
29235: PUSH
29236: LD_INT 99
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: PPUSH
29243: CALL_OW 69
29247: AND
29248: IFFALSE 29501
29250: GO 29252
29252: DISABLE
29253: LD_INT 0
29255: PPUSH
29256: PPUSH
// begin enable ;
29257: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
29258: LD_ADDR_VAR 0 1
29262: PUSH
29263: LD_INT 34
29265: PUSH
29266: LD_INT 99
29268: PUSH
29269: EMPTY
29270: LIST
29271: LIST
29272: PPUSH
29273: CALL_OW 69
29277: PUSH
29278: FOR_IN
29279: IFFALSE 29499
// begin if not i in hackTanks then
29281: LD_VAR 0 1
29285: PUSH
29286: LD_EXP 84
29290: IN
29291: NOT
29292: IFFALSE 29375
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
29294: LD_ADDR_EXP 84
29298: PUSH
29299: LD_EXP 84
29303: PPUSH
29304: LD_EXP 84
29308: PUSH
29309: LD_INT 1
29311: PLUS
29312: PPUSH
29313: LD_VAR 0 1
29317: PPUSH
29318: CALL_OW 1
29322: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
29323: LD_ADDR_EXP 85
29327: PUSH
29328: LD_EXP 85
29332: PPUSH
29333: LD_EXP 85
29337: PUSH
29338: LD_INT 1
29340: PLUS
29341: PPUSH
29342: EMPTY
29343: PPUSH
29344: CALL_OW 1
29348: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
29349: LD_ADDR_EXP 88
29353: PUSH
29354: LD_EXP 88
29358: PPUSH
29359: LD_EXP 88
29363: PUSH
29364: LD_INT 1
29366: PLUS
29367: PPUSH
29368: EMPTY
29369: PPUSH
29370: CALL_OW 1
29374: ST_TO_ADDR
// end ; if not IsOk ( i ) then
29375: LD_VAR 0 1
29379: PPUSH
29380: CALL_OW 302
29384: NOT
29385: IFFALSE 29398
// begin HackUnlinkAll ( i ) ;
29387: LD_VAR 0 1
29391: PPUSH
29392: CALL 29504 0 1
// continue ;
29396: GO 29278
// end ; HackCheckCapturedStatus ( i ) ;
29398: LD_VAR 0 1
29402: PPUSH
29403: CALL 29947 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
29407: LD_ADDR_VAR 0 2
29411: PUSH
29412: LD_INT 81
29414: PUSH
29415: LD_VAR 0 1
29419: PPUSH
29420: CALL_OW 255
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: PUSH
29429: LD_INT 33
29431: PUSH
29432: LD_INT 3
29434: PUSH
29435: EMPTY
29436: LIST
29437: LIST
29438: PUSH
29439: LD_INT 91
29441: PUSH
29442: LD_VAR 0 1
29446: PUSH
29447: LD_EXP 87
29451: PUSH
29452: EMPTY
29453: LIST
29454: LIST
29455: LIST
29456: PUSH
29457: LD_INT 50
29459: PUSH
29460: EMPTY
29461: LIST
29462: PUSH
29463: EMPTY
29464: LIST
29465: LIST
29466: LIST
29467: LIST
29468: PPUSH
29469: CALL_OW 69
29473: ST_TO_ADDR
// if not tmp then
29474: LD_VAR 0 2
29478: NOT
29479: IFFALSE 29483
// continue ;
29481: GO 29278
// HackLink ( i , tmp ) ;
29483: LD_VAR 0 1
29487: PPUSH
29488: LD_VAR 0 2
29492: PPUSH
29493: CALL 29640 0 2
// end ;
29497: GO 29278
29499: POP
29500: POP
// end ;
29501: PPOPN 2
29503: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
29504: LD_INT 0
29506: PPUSH
29507: PPUSH
29508: PPUSH
// if not hack in hackTanks then
29509: LD_VAR 0 1
29513: PUSH
29514: LD_EXP 84
29518: IN
29519: NOT
29520: IFFALSE 29524
// exit ;
29522: GO 29635
// index := GetElementIndex ( hackTanks , hack ) ;
29524: LD_ADDR_VAR 0 4
29528: PUSH
29529: LD_EXP 84
29533: PPUSH
29534: LD_VAR 0 1
29538: PPUSH
29539: CALL 37252 0 2
29543: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
29544: LD_EXP 85
29548: PUSH
29549: LD_VAR 0 4
29553: ARRAY
29554: IFFALSE 29635
// begin for i in hackTanksCaptured [ index ] do
29556: LD_ADDR_VAR 0 3
29560: PUSH
29561: LD_EXP 85
29565: PUSH
29566: LD_VAR 0 4
29570: ARRAY
29571: PUSH
29572: FOR_IN
29573: IFFALSE 29599
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
29575: LD_VAR 0 3
29579: PUSH
29580: LD_INT 1
29582: ARRAY
29583: PPUSH
29584: LD_VAR 0 3
29588: PUSH
29589: LD_INT 2
29591: ARRAY
29592: PPUSH
29593: CALL_OW 235
29597: GO 29572
29599: POP
29600: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
29601: LD_ADDR_EXP 85
29605: PUSH
29606: LD_EXP 85
29610: PPUSH
29611: LD_VAR 0 4
29615: PPUSH
29616: EMPTY
29617: PPUSH
29618: CALL_OW 1
29622: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
29623: LD_VAR 0 1
29627: PPUSH
29628: LD_INT 0
29630: PPUSH
29631: CALL_OW 505
// end ; end ;
29635: LD_VAR 0 2
29639: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
29640: LD_INT 0
29642: PPUSH
29643: PPUSH
29644: PPUSH
// if not hack in hackTanks or not vehicles then
29645: LD_VAR 0 1
29649: PUSH
29650: LD_EXP 84
29654: IN
29655: NOT
29656: PUSH
29657: LD_VAR 0 2
29661: NOT
29662: OR
29663: IFFALSE 29667
// exit ;
29665: GO 29942
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
29667: LD_ADDR_VAR 0 2
29671: PUSH
29672: LD_VAR 0 1
29676: PPUSH
29677: LD_VAR 0 2
29681: PPUSH
29682: LD_INT 1
29684: PPUSH
29685: LD_INT 1
29687: PPUSH
29688: CALL 37902 0 4
29692: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
29693: LD_ADDR_VAR 0 5
29697: PUSH
29698: LD_EXP 84
29702: PPUSH
29703: LD_VAR 0 1
29707: PPUSH
29708: CALL 37252 0 2
29712: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
29713: LD_EXP 85
29717: PUSH
29718: LD_VAR 0 5
29722: ARRAY
29723: PUSH
29724: LD_EXP 86
29728: LESS
29729: IFFALSE 29918
// begin for i := 1 to vehicles do
29731: LD_ADDR_VAR 0 4
29735: PUSH
29736: DOUBLE
29737: LD_INT 1
29739: DEC
29740: ST_TO_ADDR
29741: LD_VAR 0 2
29745: PUSH
29746: FOR_TO
29747: IFFALSE 29916
// begin if hackTanksCaptured [ index ] = hackLimit then
29749: LD_EXP 85
29753: PUSH
29754: LD_VAR 0 5
29758: ARRAY
29759: PUSH
29760: LD_EXP 86
29764: EQUAL
29765: IFFALSE 29769
// break ;
29767: GO 29916
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
29769: LD_ADDR_EXP 88
29773: PUSH
29774: LD_EXP 88
29778: PPUSH
29779: LD_VAR 0 5
29783: PPUSH
29784: LD_EXP 88
29788: PUSH
29789: LD_VAR 0 5
29793: ARRAY
29794: PUSH
29795: LD_INT 1
29797: PLUS
29798: PPUSH
29799: CALL_OW 1
29803: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
29804: LD_ADDR_EXP 85
29808: PUSH
29809: LD_EXP 85
29813: PPUSH
29814: LD_VAR 0 5
29818: PUSH
29819: LD_EXP 85
29823: PUSH
29824: LD_VAR 0 5
29828: ARRAY
29829: PUSH
29830: LD_INT 1
29832: PLUS
29833: PUSH
29834: EMPTY
29835: LIST
29836: LIST
29837: PPUSH
29838: LD_VAR 0 2
29842: PUSH
29843: LD_VAR 0 4
29847: ARRAY
29848: PUSH
29849: LD_VAR 0 2
29853: PUSH
29854: LD_VAR 0 4
29858: ARRAY
29859: PPUSH
29860: CALL_OW 255
29864: PUSH
29865: EMPTY
29866: LIST
29867: LIST
29868: PPUSH
29869: CALL 37467 0 3
29873: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
29874: LD_VAR 0 2
29878: PUSH
29879: LD_VAR 0 4
29883: ARRAY
29884: PPUSH
29885: LD_VAR 0 1
29889: PPUSH
29890: CALL_OW 255
29894: PPUSH
29895: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
29899: LD_VAR 0 2
29903: PUSH
29904: LD_VAR 0 4
29908: ARRAY
29909: PPUSH
29910: CALL_OW 141
// end ;
29914: GO 29746
29916: POP
29917: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29918: LD_VAR 0 1
29922: PPUSH
29923: LD_EXP 85
29927: PUSH
29928: LD_VAR 0 5
29932: ARRAY
29933: PUSH
29934: LD_INT 0
29936: PLUS
29937: PPUSH
29938: CALL_OW 505
// end ;
29942: LD_VAR 0 3
29946: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
29947: LD_INT 0
29949: PPUSH
29950: PPUSH
29951: PPUSH
29952: PPUSH
// if not hack in hackTanks then
29953: LD_VAR 0 1
29957: PUSH
29958: LD_EXP 84
29962: IN
29963: NOT
29964: IFFALSE 29968
// exit ;
29966: GO 30208
// index := GetElementIndex ( hackTanks , hack ) ;
29968: LD_ADDR_VAR 0 4
29972: PUSH
29973: LD_EXP 84
29977: PPUSH
29978: LD_VAR 0 1
29982: PPUSH
29983: CALL 37252 0 2
29987: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
29988: LD_ADDR_VAR 0 3
29992: PUSH
29993: DOUBLE
29994: LD_EXP 85
29998: PUSH
29999: LD_VAR 0 4
30003: ARRAY
30004: INC
30005: ST_TO_ADDR
30006: LD_INT 1
30008: PUSH
30009: FOR_DOWNTO
30010: IFFALSE 30182
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
30012: LD_ADDR_VAR 0 5
30016: PUSH
30017: LD_EXP 85
30021: PUSH
30022: LD_VAR 0 4
30026: ARRAY
30027: PUSH
30028: LD_VAR 0 3
30032: ARRAY
30033: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
30034: LD_VAR 0 5
30038: PUSH
30039: LD_INT 1
30041: ARRAY
30042: PPUSH
30043: CALL_OW 302
30047: NOT
30048: PUSH
30049: LD_VAR 0 5
30053: PUSH
30054: LD_INT 1
30056: ARRAY
30057: PPUSH
30058: CALL_OW 255
30062: PUSH
30063: LD_VAR 0 1
30067: PPUSH
30068: CALL_OW 255
30072: NONEQUAL
30073: OR
30074: IFFALSE 30180
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
30076: LD_VAR 0 5
30080: PUSH
30081: LD_INT 1
30083: ARRAY
30084: PPUSH
30085: CALL_OW 305
30089: PUSH
30090: LD_VAR 0 5
30094: PUSH
30095: LD_INT 1
30097: ARRAY
30098: PPUSH
30099: CALL_OW 255
30103: PUSH
30104: LD_VAR 0 1
30108: PPUSH
30109: CALL_OW 255
30113: EQUAL
30114: AND
30115: IFFALSE 30139
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
30117: LD_VAR 0 5
30121: PUSH
30122: LD_INT 1
30124: ARRAY
30125: PPUSH
30126: LD_VAR 0 5
30130: PUSH
30131: LD_INT 2
30133: ARRAY
30134: PPUSH
30135: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
30139: LD_ADDR_EXP 85
30143: PUSH
30144: LD_EXP 85
30148: PPUSH
30149: LD_VAR 0 4
30153: PPUSH
30154: LD_EXP 85
30158: PUSH
30159: LD_VAR 0 4
30163: ARRAY
30164: PPUSH
30165: LD_VAR 0 3
30169: PPUSH
30170: CALL_OW 3
30174: PPUSH
30175: CALL_OW 1
30179: ST_TO_ADDR
// end ; end ;
30180: GO 30009
30182: POP
30183: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30184: LD_VAR 0 1
30188: PPUSH
30189: LD_EXP 85
30193: PUSH
30194: LD_VAR 0 4
30198: ARRAY
30199: PUSH
30200: LD_INT 0
30202: PLUS
30203: PPUSH
30204: CALL_OW 505
// end ;
30208: LD_VAR 0 2
30212: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
30213: LD_INT 0
30215: PPUSH
30216: PPUSH
30217: PPUSH
30218: PPUSH
// if not hack in hackTanks then
30219: LD_VAR 0 1
30223: PUSH
30224: LD_EXP 84
30228: IN
30229: NOT
30230: IFFALSE 30234
// exit ;
30232: GO 30319
// index := GetElementIndex ( hackTanks , hack ) ;
30234: LD_ADDR_VAR 0 5
30238: PUSH
30239: LD_EXP 84
30243: PPUSH
30244: LD_VAR 0 1
30248: PPUSH
30249: CALL 37252 0 2
30253: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
30254: LD_ADDR_VAR 0 4
30258: PUSH
30259: DOUBLE
30260: LD_INT 1
30262: DEC
30263: ST_TO_ADDR
30264: LD_EXP 85
30268: PUSH
30269: LD_VAR 0 5
30273: ARRAY
30274: PUSH
30275: FOR_TO
30276: IFFALSE 30317
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
30278: LD_EXP 85
30282: PUSH
30283: LD_VAR 0 5
30287: ARRAY
30288: PUSH
30289: LD_VAR 0 4
30293: ARRAY
30294: PUSH
30295: LD_INT 1
30297: ARRAY
30298: PUSH
30299: LD_VAR 0 2
30303: EQUAL
30304: IFFALSE 30315
// KillUnit ( vehicle ) ;
30306: LD_VAR 0 2
30310: PPUSH
30311: CALL_OW 66
30315: GO 30275
30317: POP
30318: POP
// end ;
30319: LD_VAR 0 3
30323: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
30324: LD_EXP 89
30328: NOT
30329: IFFALSE 30364
30331: GO 30333
30333: DISABLE
// begin initMiner := true ;
30334: LD_ADDR_EXP 89
30338: PUSH
30339: LD_INT 1
30341: ST_TO_ADDR
// minersList := [ ] ;
30342: LD_ADDR_EXP 90
30346: PUSH
30347: EMPTY
30348: ST_TO_ADDR
// minerMinesList := [ ] ;
30349: LD_ADDR_EXP 91
30353: PUSH
30354: EMPTY
30355: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
30356: LD_ADDR_EXP 92
30360: PUSH
30361: LD_INT 5
30363: ST_TO_ADDR
// end ;
30364: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
30365: LD_EXP 89
30369: PUSH
30370: LD_INT 34
30372: PUSH
30373: LD_INT 81
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: PPUSH
30380: CALL_OW 69
30384: AND
30385: IFFALSE 30846
30387: GO 30389
30389: DISABLE
30390: LD_INT 0
30392: PPUSH
30393: PPUSH
30394: PPUSH
30395: PPUSH
// begin enable ;
30396: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
30397: LD_ADDR_VAR 0 1
30401: PUSH
30402: LD_INT 34
30404: PUSH
30405: LD_INT 81
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: PPUSH
30412: CALL_OW 69
30416: PUSH
30417: FOR_IN
30418: IFFALSE 30490
// begin if not i in minersList then
30420: LD_VAR 0 1
30424: PUSH
30425: LD_EXP 90
30429: IN
30430: NOT
30431: IFFALSE 30488
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
30433: LD_ADDR_EXP 90
30437: PUSH
30438: LD_EXP 90
30442: PPUSH
30443: LD_EXP 90
30447: PUSH
30448: LD_INT 1
30450: PLUS
30451: PPUSH
30452: LD_VAR 0 1
30456: PPUSH
30457: CALL_OW 1
30461: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
30462: LD_ADDR_EXP 91
30466: PUSH
30467: LD_EXP 91
30471: PPUSH
30472: LD_EXP 91
30476: PUSH
30477: LD_INT 1
30479: PLUS
30480: PPUSH
30481: EMPTY
30482: PPUSH
30483: CALL_OW 1
30487: ST_TO_ADDR
// end end ;
30488: GO 30417
30490: POP
30491: POP
// for i := minerMinesList downto 1 do
30492: LD_ADDR_VAR 0 1
30496: PUSH
30497: DOUBLE
30498: LD_EXP 91
30502: INC
30503: ST_TO_ADDR
30504: LD_INT 1
30506: PUSH
30507: FOR_DOWNTO
30508: IFFALSE 30844
// begin if IsLive ( minersList [ i ] ) then
30510: LD_EXP 90
30514: PUSH
30515: LD_VAR 0 1
30519: ARRAY
30520: PPUSH
30521: CALL_OW 300
30525: IFFALSE 30553
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
30527: LD_EXP 90
30531: PUSH
30532: LD_VAR 0 1
30536: ARRAY
30537: PPUSH
30538: LD_EXP 91
30542: PUSH
30543: LD_VAR 0 1
30547: ARRAY
30548: PPUSH
30549: CALL_OW 505
// if not minerMinesList [ i ] then
30553: LD_EXP 91
30557: PUSH
30558: LD_VAR 0 1
30562: ARRAY
30563: NOT
30564: IFFALSE 30568
// continue ;
30566: GO 30507
// for j := minerMinesList [ i ] downto 1 do
30568: LD_ADDR_VAR 0 2
30572: PUSH
30573: DOUBLE
30574: LD_EXP 91
30578: PUSH
30579: LD_VAR 0 1
30583: ARRAY
30584: INC
30585: ST_TO_ADDR
30586: LD_INT 1
30588: PUSH
30589: FOR_DOWNTO
30590: IFFALSE 30840
// begin side := GetSide ( minersList [ i ] ) ;
30592: LD_ADDR_VAR 0 3
30596: PUSH
30597: LD_EXP 90
30601: PUSH
30602: LD_VAR 0 1
30606: ARRAY
30607: PPUSH
30608: CALL_OW 255
30612: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
30613: LD_ADDR_VAR 0 4
30617: PUSH
30618: LD_EXP 91
30622: PUSH
30623: LD_VAR 0 1
30627: ARRAY
30628: PUSH
30629: LD_VAR 0 2
30633: ARRAY
30634: PUSH
30635: LD_INT 1
30637: ARRAY
30638: PPUSH
30639: LD_EXP 91
30643: PUSH
30644: LD_VAR 0 1
30648: ARRAY
30649: PUSH
30650: LD_VAR 0 2
30654: ARRAY
30655: PUSH
30656: LD_INT 2
30658: ARRAY
30659: PPUSH
30660: CALL_OW 428
30664: ST_TO_ADDR
// if not tmp then
30665: LD_VAR 0 4
30669: NOT
30670: IFFALSE 30674
// continue ;
30672: GO 30589
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
30674: LD_VAR 0 4
30678: PUSH
30679: LD_INT 81
30681: PUSH
30682: LD_VAR 0 3
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: PPUSH
30691: CALL_OW 69
30695: IN
30696: PUSH
30697: LD_EXP 91
30701: PUSH
30702: LD_VAR 0 1
30706: ARRAY
30707: PUSH
30708: LD_VAR 0 2
30712: ARRAY
30713: PUSH
30714: LD_INT 1
30716: ARRAY
30717: PPUSH
30718: LD_EXP 91
30722: PUSH
30723: LD_VAR 0 1
30727: ARRAY
30728: PUSH
30729: LD_VAR 0 2
30733: ARRAY
30734: PUSH
30735: LD_INT 2
30737: ARRAY
30738: PPUSH
30739: CALL_OW 458
30743: AND
30744: IFFALSE 30838
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
30746: LD_EXP 91
30750: PUSH
30751: LD_VAR 0 1
30755: ARRAY
30756: PUSH
30757: LD_VAR 0 2
30761: ARRAY
30762: PUSH
30763: LD_INT 1
30765: ARRAY
30766: PPUSH
30767: LD_EXP 91
30771: PUSH
30772: LD_VAR 0 1
30776: ARRAY
30777: PUSH
30778: LD_VAR 0 2
30782: ARRAY
30783: PUSH
30784: LD_INT 2
30786: ARRAY
30787: PPUSH
30788: LD_VAR 0 3
30792: PPUSH
30793: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
30797: LD_ADDR_EXP 91
30801: PUSH
30802: LD_EXP 91
30806: PPUSH
30807: LD_VAR 0 1
30811: PPUSH
30812: LD_EXP 91
30816: PUSH
30817: LD_VAR 0 1
30821: ARRAY
30822: PPUSH
30823: LD_VAR 0 2
30827: PPUSH
30828: CALL_OW 3
30832: PPUSH
30833: CALL_OW 1
30837: ST_TO_ADDR
// end ; end ;
30838: GO 30589
30840: POP
30841: POP
// end ;
30842: GO 30507
30844: POP
30845: POP
// end ;
30846: PPOPN 4
30848: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
30849: LD_INT 0
30851: PPUSH
30852: PPUSH
// result := false ;
30853: LD_ADDR_VAR 0 4
30857: PUSH
30858: LD_INT 0
30860: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
30861: LD_VAR 0 1
30865: PPUSH
30866: CALL_OW 264
30870: PUSH
30871: LD_INT 81
30873: EQUAL
30874: NOT
30875: IFFALSE 30879
// exit ;
30877: GO 31119
// index := GetElementIndex ( minersList , unit ) ;
30879: LD_ADDR_VAR 0 5
30883: PUSH
30884: LD_EXP 90
30888: PPUSH
30889: LD_VAR 0 1
30893: PPUSH
30894: CALL 37252 0 2
30898: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
30899: LD_EXP 91
30903: PUSH
30904: LD_VAR 0 5
30908: ARRAY
30909: PUSH
30910: LD_EXP 92
30914: GREATEREQUAL
30915: IFFALSE 30919
// exit ;
30917: GO 31119
// ComMoveXY ( unit , x , y ) ;
30919: LD_VAR 0 1
30923: PPUSH
30924: LD_VAR 0 2
30928: PPUSH
30929: LD_VAR 0 3
30933: PPUSH
30934: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30938: LD_INT 35
30940: PPUSH
30941: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
30945: LD_VAR 0 1
30949: PPUSH
30950: LD_VAR 0 2
30954: PPUSH
30955: LD_VAR 0 3
30959: PPUSH
30960: CALL 68607 0 3
30964: NOT
30965: PUSH
30966: LD_VAR 0 1
30970: PPUSH
30971: CALL_OW 314
30975: AND
30976: IFFALSE 30980
// exit ;
30978: GO 31119
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
30980: LD_VAR 0 2
30984: PPUSH
30985: LD_VAR 0 3
30989: PPUSH
30990: CALL_OW 428
30994: PUSH
30995: LD_VAR 0 1
30999: EQUAL
31000: PUSH
31001: LD_VAR 0 1
31005: PPUSH
31006: CALL_OW 314
31010: NOT
31011: AND
31012: IFFALSE 30938
// PlaySoundXY ( x , y , PlantMine ) ;
31014: LD_VAR 0 2
31018: PPUSH
31019: LD_VAR 0 3
31023: PPUSH
31024: LD_STRING PlantMine
31026: PPUSH
31027: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
31031: LD_VAR 0 2
31035: PPUSH
31036: LD_VAR 0 3
31040: PPUSH
31041: LD_VAR 0 1
31045: PPUSH
31046: CALL_OW 255
31050: PPUSH
31051: LD_INT 0
31053: PPUSH
31054: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
31058: LD_ADDR_EXP 91
31062: PUSH
31063: LD_EXP 91
31067: PPUSH
31068: LD_VAR 0 5
31072: PUSH
31073: LD_EXP 91
31077: PUSH
31078: LD_VAR 0 5
31082: ARRAY
31083: PUSH
31084: LD_INT 1
31086: PLUS
31087: PUSH
31088: EMPTY
31089: LIST
31090: LIST
31091: PPUSH
31092: LD_VAR 0 2
31096: PUSH
31097: LD_VAR 0 3
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: PPUSH
31106: CALL 37467 0 3
31110: ST_TO_ADDR
// result := true ;
31111: LD_ADDR_VAR 0 4
31115: PUSH
31116: LD_INT 1
31118: ST_TO_ADDR
// end ;
31119: LD_VAR 0 4
31123: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
31124: LD_INT 0
31126: PPUSH
31127: PPUSH
31128: PPUSH
// if not unit in minersList then
31129: LD_VAR 0 1
31133: PUSH
31134: LD_EXP 90
31138: IN
31139: NOT
31140: IFFALSE 31144
// exit ;
31142: GO 31536
// index := GetElementIndex ( minersList , unit ) ;
31144: LD_ADDR_VAR 0 6
31148: PUSH
31149: LD_EXP 90
31153: PPUSH
31154: LD_VAR 0 1
31158: PPUSH
31159: CALL 37252 0 2
31163: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
31164: LD_ADDR_VAR 0 5
31168: PUSH
31169: DOUBLE
31170: LD_EXP 91
31174: PUSH
31175: LD_VAR 0 6
31179: ARRAY
31180: INC
31181: ST_TO_ADDR
31182: LD_INT 1
31184: PUSH
31185: FOR_DOWNTO
31186: IFFALSE 31347
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
31188: LD_EXP 91
31192: PUSH
31193: LD_VAR 0 6
31197: ARRAY
31198: PUSH
31199: LD_VAR 0 5
31203: ARRAY
31204: PUSH
31205: LD_INT 1
31207: ARRAY
31208: PUSH
31209: LD_VAR 0 2
31213: EQUAL
31214: PUSH
31215: LD_EXP 91
31219: PUSH
31220: LD_VAR 0 6
31224: ARRAY
31225: PUSH
31226: LD_VAR 0 5
31230: ARRAY
31231: PUSH
31232: LD_INT 2
31234: ARRAY
31235: PUSH
31236: LD_VAR 0 3
31240: EQUAL
31241: AND
31242: IFFALSE 31345
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31244: LD_EXP 91
31248: PUSH
31249: LD_VAR 0 6
31253: ARRAY
31254: PUSH
31255: LD_VAR 0 5
31259: ARRAY
31260: PUSH
31261: LD_INT 1
31263: ARRAY
31264: PPUSH
31265: LD_EXP 91
31269: PUSH
31270: LD_VAR 0 6
31274: ARRAY
31275: PUSH
31276: LD_VAR 0 5
31280: ARRAY
31281: PUSH
31282: LD_INT 2
31284: ARRAY
31285: PPUSH
31286: LD_VAR 0 1
31290: PPUSH
31291: CALL_OW 255
31295: PPUSH
31296: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31300: LD_ADDR_EXP 91
31304: PUSH
31305: LD_EXP 91
31309: PPUSH
31310: LD_VAR 0 6
31314: PPUSH
31315: LD_EXP 91
31319: PUSH
31320: LD_VAR 0 6
31324: ARRAY
31325: PPUSH
31326: LD_VAR 0 5
31330: PPUSH
31331: CALL_OW 3
31335: PPUSH
31336: CALL_OW 1
31340: ST_TO_ADDR
// exit ;
31341: POP
31342: POP
31343: GO 31536
// end ; end ;
31345: GO 31185
31347: POP
31348: POP
// for i := minerMinesList [ index ] downto 1 do
31349: LD_ADDR_VAR 0 5
31353: PUSH
31354: DOUBLE
31355: LD_EXP 91
31359: PUSH
31360: LD_VAR 0 6
31364: ARRAY
31365: INC
31366: ST_TO_ADDR
31367: LD_INT 1
31369: PUSH
31370: FOR_DOWNTO
31371: IFFALSE 31534
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
31373: LD_EXP 91
31377: PUSH
31378: LD_VAR 0 6
31382: ARRAY
31383: PUSH
31384: LD_VAR 0 5
31388: ARRAY
31389: PUSH
31390: LD_INT 1
31392: ARRAY
31393: PPUSH
31394: LD_EXP 91
31398: PUSH
31399: LD_VAR 0 6
31403: ARRAY
31404: PUSH
31405: LD_VAR 0 5
31409: ARRAY
31410: PUSH
31411: LD_INT 2
31413: ARRAY
31414: PPUSH
31415: LD_VAR 0 2
31419: PPUSH
31420: LD_VAR 0 3
31424: PPUSH
31425: CALL_OW 298
31429: PUSH
31430: LD_INT 6
31432: LESS
31433: IFFALSE 31532
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31435: LD_EXP 91
31439: PUSH
31440: LD_VAR 0 6
31444: ARRAY
31445: PUSH
31446: LD_VAR 0 5
31450: ARRAY
31451: PUSH
31452: LD_INT 1
31454: ARRAY
31455: PPUSH
31456: LD_EXP 91
31460: PUSH
31461: LD_VAR 0 6
31465: ARRAY
31466: PUSH
31467: LD_VAR 0 5
31471: ARRAY
31472: PUSH
31473: LD_INT 2
31475: ARRAY
31476: PPUSH
31477: LD_VAR 0 1
31481: PPUSH
31482: CALL_OW 255
31486: PPUSH
31487: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31491: LD_ADDR_EXP 91
31495: PUSH
31496: LD_EXP 91
31500: PPUSH
31501: LD_VAR 0 6
31505: PPUSH
31506: LD_EXP 91
31510: PUSH
31511: LD_VAR 0 6
31515: ARRAY
31516: PPUSH
31517: LD_VAR 0 5
31521: PPUSH
31522: CALL_OW 3
31526: PPUSH
31527: CALL_OW 1
31531: ST_TO_ADDR
// end ; end ;
31532: GO 31370
31534: POP
31535: POP
// end ;
31536: LD_VAR 0 4
31540: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
31541: LD_INT 0
31543: PPUSH
31544: PPUSH
31545: PPUSH
31546: PPUSH
31547: PPUSH
31548: PPUSH
31549: PPUSH
31550: PPUSH
31551: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
31552: LD_VAR 0 1
31556: PPUSH
31557: CALL_OW 264
31561: PUSH
31562: LD_INT 81
31564: EQUAL
31565: NOT
31566: PUSH
31567: LD_VAR 0 1
31571: PUSH
31572: LD_EXP 90
31576: IN
31577: NOT
31578: OR
31579: IFFALSE 31583
// exit ;
31581: GO 31905
// index := GetElementIndex ( minersList , unit ) ;
31583: LD_ADDR_VAR 0 6
31587: PUSH
31588: LD_EXP 90
31592: PPUSH
31593: LD_VAR 0 1
31597: PPUSH
31598: CALL 37252 0 2
31602: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
31603: LD_ADDR_VAR 0 8
31607: PUSH
31608: LD_EXP 92
31612: PUSH
31613: LD_EXP 91
31617: PUSH
31618: LD_VAR 0 6
31622: ARRAY
31623: MINUS
31624: ST_TO_ADDR
// if not minesFreeAmount then
31625: LD_VAR 0 8
31629: NOT
31630: IFFALSE 31634
// exit ;
31632: GO 31905
// tmp := [ ] ;
31634: LD_ADDR_VAR 0 7
31638: PUSH
31639: EMPTY
31640: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
31641: LD_ADDR_VAR 0 5
31645: PUSH
31646: DOUBLE
31647: LD_INT 1
31649: DEC
31650: ST_TO_ADDR
31651: LD_VAR 0 8
31655: PUSH
31656: FOR_TO
31657: IFFALSE 31852
// begin _d := rand ( 0 , 5 ) ;
31659: LD_ADDR_VAR 0 11
31663: PUSH
31664: LD_INT 0
31666: PPUSH
31667: LD_INT 5
31669: PPUSH
31670: CALL_OW 12
31674: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
31675: LD_ADDR_VAR 0 12
31679: PUSH
31680: LD_INT 2
31682: PPUSH
31683: LD_INT 6
31685: PPUSH
31686: CALL_OW 12
31690: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
31691: LD_ADDR_VAR 0 9
31695: PUSH
31696: LD_VAR 0 2
31700: PPUSH
31701: LD_VAR 0 11
31705: PPUSH
31706: LD_VAR 0 12
31710: PPUSH
31711: CALL_OW 272
31715: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
31716: LD_ADDR_VAR 0 10
31720: PUSH
31721: LD_VAR 0 3
31725: PPUSH
31726: LD_VAR 0 11
31730: PPUSH
31731: LD_VAR 0 12
31735: PPUSH
31736: CALL_OW 273
31740: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
31741: LD_VAR 0 9
31745: PPUSH
31746: LD_VAR 0 10
31750: PPUSH
31751: CALL_OW 488
31755: PUSH
31756: LD_VAR 0 9
31760: PUSH
31761: LD_VAR 0 10
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: PUSH
31770: LD_VAR 0 7
31774: IN
31775: NOT
31776: AND
31777: PUSH
31778: LD_VAR 0 9
31782: PPUSH
31783: LD_VAR 0 10
31787: PPUSH
31788: CALL_OW 458
31792: NOT
31793: AND
31794: IFFALSE 31836
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
31796: LD_ADDR_VAR 0 7
31800: PUSH
31801: LD_VAR 0 7
31805: PPUSH
31806: LD_VAR 0 7
31810: PUSH
31811: LD_INT 1
31813: PLUS
31814: PPUSH
31815: LD_VAR 0 9
31819: PUSH
31820: LD_VAR 0 10
31824: PUSH
31825: EMPTY
31826: LIST
31827: LIST
31828: PPUSH
31829: CALL_OW 1
31833: ST_TO_ADDR
31834: GO 31850
// i := i - 1 ;
31836: LD_ADDR_VAR 0 5
31840: PUSH
31841: LD_VAR 0 5
31845: PUSH
31846: LD_INT 1
31848: MINUS
31849: ST_TO_ADDR
// end ;
31850: GO 31656
31852: POP
31853: POP
// for i in tmp do
31854: LD_ADDR_VAR 0 5
31858: PUSH
31859: LD_VAR 0 7
31863: PUSH
31864: FOR_IN
31865: IFFALSE 31903
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
31867: LD_VAR 0 1
31871: PPUSH
31872: LD_VAR 0 5
31876: PUSH
31877: LD_INT 1
31879: ARRAY
31880: PPUSH
31881: LD_VAR 0 5
31885: PUSH
31886: LD_INT 2
31888: ARRAY
31889: PPUSH
31890: CALL 30849 0 3
31894: NOT
31895: IFFALSE 31901
// exit ;
31897: POP
31898: POP
31899: GO 31905
31901: GO 31864
31903: POP
31904: POP
// end ;
31905: LD_VAR 0 4
31909: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
31910: LD_INT 0
31912: PPUSH
31913: PPUSH
31914: PPUSH
31915: PPUSH
31916: PPUSH
31917: PPUSH
31918: PPUSH
// if not GetClass ( unit ) = class_sniper then
31919: LD_VAR 0 1
31923: PPUSH
31924: CALL_OW 257
31928: PUSH
31929: LD_INT 5
31931: EQUAL
31932: NOT
31933: IFFALSE 31937
// exit ;
31935: GO 32325
// dist := 8 ;
31937: LD_ADDR_VAR 0 5
31941: PUSH
31942: LD_INT 8
31944: ST_TO_ADDR
// viewRange := 12 ;
31945: LD_ADDR_VAR 0 7
31949: PUSH
31950: LD_INT 12
31952: ST_TO_ADDR
// side := GetSide ( unit ) ;
31953: LD_ADDR_VAR 0 6
31957: PUSH
31958: LD_VAR 0 1
31962: PPUSH
31963: CALL_OW 255
31967: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
31968: LD_INT 61
31970: PPUSH
31971: LD_VAR 0 6
31975: PPUSH
31976: CALL_OW 321
31980: PUSH
31981: LD_INT 2
31983: EQUAL
31984: IFFALSE 31994
// viewRange := 16 ;
31986: LD_ADDR_VAR 0 7
31990: PUSH
31991: LD_INT 16
31993: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
31994: LD_VAR 0 1
31998: PPUSH
31999: LD_VAR 0 2
32003: PPUSH
32004: LD_VAR 0 3
32008: PPUSH
32009: CALL_OW 297
32013: PUSH
32014: LD_VAR 0 5
32018: GREATER
32019: IFFALSE 32098
// begin ComMoveXY ( unit , x , y ) ;
32021: LD_VAR 0 1
32025: PPUSH
32026: LD_VAR 0 2
32030: PPUSH
32031: LD_VAR 0 3
32035: PPUSH
32036: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32040: LD_INT 35
32042: PPUSH
32043: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
32047: LD_VAR 0 1
32051: PPUSH
32052: LD_VAR 0 2
32056: PPUSH
32057: LD_VAR 0 3
32061: PPUSH
32062: CALL 68607 0 3
32066: NOT
32067: IFFALSE 32071
// exit ;
32069: GO 32325
// until GetDistUnitXY ( unit , x , y ) < dist ;
32071: LD_VAR 0 1
32075: PPUSH
32076: LD_VAR 0 2
32080: PPUSH
32081: LD_VAR 0 3
32085: PPUSH
32086: CALL_OW 297
32090: PUSH
32091: LD_VAR 0 5
32095: LESS
32096: IFFALSE 32040
// end ; ComTurnXY ( unit , x , y ) ;
32098: LD_VAR 0 1
32102: PPUSH
32103: LD_VAR 0 2
32107: PPUSH
32108: LD_VAR 0 3
32112: PPUSH
32113: CALL_OW 118
// wait ( 5 ) ;
32117: LD_INT 5
32119: PPUSH
32120: CALL_OW 67
// _d := GetDir ( unit ) ;
32124: LD_ADDR_VAR 0 10
32128: PUSH
32129: LD_VAR 0 1
32133: PPUSH
32134: CALL_OW 254
32138: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
32139: LD_ADDR_VAR 0 8
32143: PUSH
32144: LD_VAR 0 1
32148: PPUSH
32149: CALL_OW 250
32153: PPUSH
32154: LD_VAR 0 10
32158: PPUSH
32159: LD_VAR 0 5
32163: PPUSH
32164: CALL_OW 272
32168: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
32169: LD_ADDR_VAR 0 9
32173: PUSH
32174: LD_VAR 0 1
32178: PPUSH
32179: CALL_OW 251
32183: PPUSH
32184: LD_VAR 0 10
32188: PPUSH
32189: LD_VAR 0 5
32193: PPUSH
32194: CALL_OW 273
32198: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32199: LD_VAR 0 8
32203: PPUSH
32204: LD_VAR 0 9
32208: PPUSH
32209: CALL_OW 488
32213: NOT
32214: IFFALSE 32218
// exit ;
32216: GO 32325
// ComAnimCustom ( unit , 1 ) ;
32218: LD_VAR 0 1
32222: PPUSH
32223: LD_INT 1
32225: PPUSH
32226: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
32230: LD_VAR 0 8
32234: PPUSH
32235: LD_VAR 0 9
32239: PPUSH
32240: LD_VAR 0 6
32244: PPUSH
32245: LD_VAR 0 7
32249: PPUSH
32250: CALL_OW 330
// repeat wait ( 1 ) ;
32254: LD_INT 1
32256: PPUSH
32257: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
32261: LD_VAR 0 1
32265: PPUSH
32266: CALL_OW 316
32270: PUSH
32271: LD_VAR 0 1
32275: PPUSH
32276: CALL_OW 314
32280: OR
32281: PUSH
32282: LD_VAR 0 1
32286: PPUSH
32287: CALL_OW 302
32291: NOT
32292: OR
32293: PUSH
32294: LD_VAR 0 1
32298: PPUSH
32299: CALL_OW 301
32303: OR
32304: IFFALSE 32254
// RemoveSeeing ( _x , _y , side ) ;
32306: LD_VAR 0 8
32310: PPUSH
32311: LD_VAR 0 9
32315: PPUSH
32316: LD_VAR 0 6
32320: PPUSH
32321: CALL_OW 331
// end ; end_of_file
32325: LD_VAR 0 4
32329: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
32330: LD_INT 0
32332: PPUSH
32333: PPUSH
// if exist_mode then
32334: LD_VAR 0 2
32338: IFFALSE 32363
// unit := CreateCharacter ( prefix & ident ) else
32340: LD_ADDR_VAR 0 5
32344: PUSH
32345: LD_VAR 0 3
32349: PUSH
32350: LD_VAR 0 1
32354: STR
32355: PPUSH
32356: CALL_OW 34
32360: ST_TO_ADDR
32361: GO 32378
// unit := NewCharacter ( ident ) ;
32363: LD_ADDR_VAR 0 5
32367: PUSH
32368: LD_VAR 0 1
32372: PPUSH
32373: CALL_OW 25
32377: ST_TO_ADDR
// result := unit ;
32378: LD_ADDR_VAR 0 4
32382: PUSH
32383: LD_VAR 0 5
32387: ST_TO_ADDR
// end ;
32388: LD_VAR 0 4
32392: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
32393: LD_INT 0
32395: PPUSH
32396: PPUSH
// if not side or not nation then
32397: LD_VAR 0 1
32401: NOT
32402: PUSH
32403: LD_VAR 0 2
32407: NOT
32408: OR
32409: IFFALSE 32413
// exit ;
32411: GO 33181
// case nation of nation_american :
32413: LD_VAR 0 2
32417: PUSH
32418: LD_INT 1
32420: DOUBLE
32421: EQUAL
32422: IFTRUE 32426
32424: GO 32640
32426: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
32427: LD_ADDR_VAR 0 4
32431: PUSH
32432: LD_INT 35
32434: PUSH
32435: LD_INT 45
32437: PUSH
32438: LD_INT 46
32440: PUSH
32441: LD_INT 47
32443: PUSH
32444: LD_INT 82
32446: PUSH
32447: LD_INT 83
32449: PUSH
32450: LD_INT 84
32452: PUSH
32453: LD_INT 85
32455: PUSH
32456: LD_INT 86
32458: PUSH
32459: LD_INT 1
32461: PUSH
32462: LD_INT 2
32464: PUSH
32465: LD_INT 6
32467: PUSH
32468: LD_INT 15
32470: PUSH
32471: LD_INT 16
32473: PUSH
32474: LD_INT 7
32476: PUSH
32477: LD_INT 12
32479: PUSH
32480: LD_INT 13
32482: PUSH
32483: LD_INT 10
32485: PUSH
32486: LD_INT 14
32488: PUSH
32489: LD_INT 20
32491: PUSH
32492: LD_INT 21
32494: PUSH
32495: LD_INT 22
32497: PUSH
32498: LD_INT 25
32500: PUSH
32501: LD_INT 32
32503: PUSH
32504: LD_INT 27
32506: PUSH
32507: LD_INT 36
32509: PUSH
32510: LD_INT 69
32512: PUSH
32513: LD_INT 39
32515: PUSH
32516: LD_INT 34
32518: PUSH
32519: LD_INT 40
32521: PUSH
32522: LD_INT 48
32524: PUSH
32525: LD_INT 49
32527: PUSH
32528: LD_INT 50
32530: PUSH
32531: LD_INT 51
32533: PUSH
32534: LD_INT 52
32536: PUSH
32537: LD_INT 53
32539: PUSH
32540: LD_INT 54
32542: PUSH
32543: LD_INT 55
32545: PUSH
32546: LD_INT 56
32548: PUSH
32549: LD_INT 57
32551: PUSH
32552: LD_INT 58
32554: PUSH
32555: LD_INT 59
32557: PUSH
32558: LD_INT 60
32560: PUSH
32561: LD_INT 61
32563: PUSH
32564: LD_INT 62
32566: PUSH
32567: LD_INT 80
32569: PUSH
32570: LD_INT 82
32572: PUSH
32573: LD_INT 83
32575: PUSH
32576: LD_INT 84
32578: PUSH
32579: LD_INT 85
32581: PUSH
32582: LD_INT 86
32584: PUSH
32585: EMPTY
32586: LIST
32587: LIST
32588: LIST
32589: LIST
32590: LIST
32591: LIST
32592: LIST
32593: LIST
32594: LIST
32595: LIST
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: LIST
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: LIST
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: LIST
32622: LIST
32623: LIST
32624: LIST
32625: LIST
32626: LIST
32627: LIST
32628: LIST
32629: LIST
32630: LIST
32631: LIST
32632: LIST
32633: LIST
32634: LIST
32635: LIST
32636: LIST
32637: ST_TO_ADDR
32638: GO 33105
32640: LD_INT 2
32642: DOUBLE
32643: EQUAL
32644: IFTRUE 32648
32646: GO 32874
32648: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
32649: LD_ADDR_VAR 0 4
32653: PUSH
32654: LD_INT 35
32656: PUSH
32657: LD_INT 45
32659: PUSH
32660: LD_INT 46
32662: PUSH
32663: LD_INT 47
32665: PUSH
32666: LD_INT 82
32668: PUSH
32669: LD_INT 83
32671: PUSH
32672: LD_INT 84
32674: PUSH
32675: LD_INT 85
32677: PUSH
32678: LD_INT 87
32680: PUSH
32681: LD_INT 70
32683: PUSH
32684: LD_INT 1
32686: PUSH
32687: LD_INT 11
32689: PUSH
32690: LD_INT 3
32692: PUSH
32693: LD_INT 4
32695: PUSH
32696: LD_INT 5
32698: PUSH
32699: LD_INT 6
32701: PUSH
32702: LD_INT 15
32704: PUSH
32705: LD_INT 18
32707: PUSH
32708: LD_INT 7
32710: PUSH
32711: LD_INT 17
32713: PUSH
32714: LD_INT 8
32716: PUSH
32717: LD_INT 20
32719: PUSH
32720: LD_INT 21
32722: PUSH
32723: LD_INT 22
32725: PUSH
32726: LD_INT 72
32728: PUSH
32729: LD_INT 26
32731: PUSH
32732: LD_INT 69
32734: PUSH
32735: LD_INT 39
32737: PUSH
32738: LD_INT 40
32740: PUSH
32741: LD_INT 41
32743: PUSH
32744: LD_INT 42
32746: PUSH
32747: LD_INT 43
32749: PUSH
32750: LD_INT 48
32752: PUSH
32753: LD_INT 49
32755: PUSH
32756: LD_INT 50
32758: PUSH
32759: LD_INT 51
32761: PUSH
32762: LD_INT 52
32764: PUSH
32765: LD_INT 53
32767: PUSH
32768: LD_INT 54
32770: PUSH
32771: LD_INT 55
32773: PUSH
32774: LD_INT 56
32776: PUSH
32777: LD_INT 60
32779: PUSH
32780: LD_INT 61
32782: PUSH
32783: LD_INT 62
32785: PUSH
32786: LD_INT 66
32788: PUSH
32789: LD_INT 67
32791: PUSH
32792: LD_INT 68
32794: PUSH
32795: LD_INT 81
32797: PUSH
32798: LD_INT 82
32800: PUSH
32801: LD_INT 83
32803: PUSH
32804: LD_INT 84
32806: PUSH
32807: LD_INT 85
32809: PUSH
32810: LD_INT 87
32812: PUSH
32813: LD_INT 88
32815: PUSH
32816: EMPTY
32817: LIST
32818: LIST
32819: LIST
32820: LIST
32821: LIST
32822: LIST
32823: LIST
32824: LIST
32825: LIST
32826: LIST
32827: LIST
32828: LIST
32829: LIST
32830: LIST
32831: LIST
32832: LIST
32833: LIST
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: LIST
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: LIST
32845: LIST
32846: LIST
32847: LIST
32848: LIST
32849: LIST
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: LIST
32855: LIST
32856: LIST
32857: LIST
32858: LIST
32859: LIST
32860: LIST
32861: LIST
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: LIST
32869: LIST
32870: LIST
32871: ST_TO_ADDR
32872: GO 33105
32874: LD_INT 3
32876: DOUBLE
32877: EQUAL
32878: IFTRUE 32882
32880: GO 33104
32882: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
32883: LD_ADDR_VAR 0 4
32887: PUSH
32888: LD_INT 46
32890: PUSH
32891: LD_INT 47
32893: PUSH
32894: LD_INT 1
32896: PUSH
32897: LD_INT 2
32899: PUSH
32900: LD_INT 82
32902: PUSH
32903: LD_INT 83
32905: PUSH
32906: LD_INT 84
32908: PUSH
32909: LD_INT 85
32911: PUSH
32912: LD_INT 86
32914: PUSH
32915: LD_INT 11
32917: PUSH
32918: LD_INT 9
32920: PUSH
32921: LD_INT 20
32923: PUSH
32924: LD_INT 19
32926: PUSH
32927: LD_INT 21
32929: PUSH
32930: LD_INT 24
32932: PUSH
32933: LD_INT 22
32935: PUSH
32936: LD_INT 25
32938: PUSH
32939: LD_INT 28
32941: PUSH
32942: LD_INT 29
32944: PUSH
32945: LD_INT 30
32947: PUSH
32948: LD_INT 31
32950: PUSH
32951: LD_INT 37
32953: PUSH
32954: LD_INT 38
32956: PUSH
32957: LD_INT 32
32959: PUSH
32960: LD_INT 27
32962: PUSH
32963: LD_INT 33
32965: PUSH
32966: LD_INT 69
32968: PUSH
32969: LD_INT 39
32971: PUSH
32972: LD_INT 34
32974: PUSH
32975: LD_INT 40
32977: PUSH
32978: LD_INT 71
32980: PUSH
32981: LD_INT 23
32983: PUSH
32984: LD_INT 44
32986: PUSH
32987: LD_INT 48
32989: PUSH
32990: LD_INT 49
32992: PUSH
32993: LD_INT 50
32995: PUSH
32996: LD_INT 51
32998: PUSH
32999: LD_INT 52
33001: PUSH
33002: LD_INT 53
33004: PUSH
33005: LD_INT 54
33007: PUSH
33008: LD_INT 55
33010: PUSH
33011: LD_INT 56
33013: PUSH
33014: LD_INT 57
33016: PUSH
33017: LD_INT 58
33019: PUSH
33020: LD_INT 59
33022: PUSH
33023: LD_INT 63
33025: PUSH
33026: LD_INT 64
33028: PUSH
33029: LD_INT 65
33031: PUSH
33032: LD_INT 82
33034: PUSH
33035: LD_INT 83
33037: PUSH
33038: LD_INT 84
33040: PUSH
33041: LD_INT 85
33043: PUSH
33044: LD_INT 86
33046: PUSH
33047: EMPTY
33048: LIST
33049: LIST
33050: LIST
33051: LIST
33052: LIST
33053: LIST
33054: LIST
33055: LIST
33056: LIST
33057: LIST
33058: LIST
33059: LIST
33060: LIST
33061: LIST
33062: LIST
33063: LIST
33064: LIST
33065: LIST
33066: LIST
33067: LIST
33068: LIST
33069: LIST
33070: LIST
33071: LIST
33072: LIST
33073: LIST
33074: LIST
33075: LIST
33076: LIST
33077: LIST
33078: LIST
33079: LIST
33080: LIST
33081: LIST
33082: LIST
33083: LIST
33084: LIST
33085: LIST
33086: LIST
33087: LIST
33088: LIST
33089: LIST
33090: LIST
33091: LIST
33092: LIST
33093: LIST
33094: LIST
33095: LIST
33096: LIST
33097: LIST
33098: LIST
33099: LIST
33100: LIST
33101: ST_TO_ADDR
33102: GO 33105
33104: POP
// if state > - 1 and state < 3 then
33105: LD_VAR 0 3
33109: PUSH
33110: LD_INT 1
33112: NEG
33113: GREATER
33114: PUSH
33115: LD_VAR 0 3
33119: PUSH
33120: LD_INT 3
33122: LESS
33123: AND
33124: IFFALSE 33181
// for i in result do
33126: LD_ADDR_VAR 0 5
33130: PUSH
33131: LD_VAR 0 4
33135: PUSH
33136: FOR_IN
33137: IFFALSE 33179
// if GetTech ( i , side ) <> state then
33139: LD_VAR 0 5
33143: PPUSH
33144: LD_VAR 0 1
33148: PPUSH
33149: CALL_OW 321
33153: PUSH
33154: LD_VAR 0 3
33158: NONEQUAL
33159: IFFALSE 33177
// result := result diff i ;
33161: LD_ADDR_VAR 0 4
33165: PUSH
33166: LD_VAR 0 4
33170: PUSH
33171: LD_VAR 0 5
33175: DIFF
33176: ST_TO_ADDR
33177: GO 33136
33179: POP
33180: POP
// end ;
33181: LD_VAR 0 4
33185: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
33186: LD_INT 0
33188: PPUSH
33189: PPUSH
33190: PPUSH
// result := true ;
33191: LD_ADDR_VAR 0 3
33195: PUSH
33196: LD_INT 1
33198: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
33199: LD_ADDR_VAR 0 5
33203: PUSH
33204: LD_VAR 0 2
33208: PPUSH
33209: CALL_OW 480
33213: ST_TO_ADDR
// if not tmp then
33214: LD_VAR 0 5
33218: NOT
33219: IFFALSE 33223
// exit ;
33221: GO 33272
// for i in tmp do
33223: LD_ADDR_VAR 0 4
33227: PUSH
33228: LD_VAR 0 5
33232: PUSH
33233: FOR_IN
33234: IFFALSE 33270
// if GetTech ( i , side ) <> state_researched then
33236: LD_VAR 0 4
33240: PPUSH
33241: LD_VAR 0 1
33245: PPUSH
33246: CALL_OW 321
33250: PUSH
33251: LD_INT 2
33253: NONEQUAL
33254: IFFALSE 33268
// begin result := false ;
33256: LD_ADDR_VAR 0 3
33260: PUSH
33261: LD_INT 0
33263: ST_TO_ADDR
// exit ;
33264: POP
33265: POP
33266: GO 33272
// end ;
33268: GO 33233
33270: POP
33271: POP
// end ;
33272: LD_VAR 0 3
33276: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
33277: LD_INT 0
33279: PPUSH
33280: PPUSH
33281: PPUSH
33282: PPUSH
33283: PPUSH
33284: PPUSH
33285: PPUSH
33286: PPUSH
33287: PPUSH
33288: PPUSH
33289: PPUSH
33290: PPUSH
33291: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
33292: LD_VAR 0 1
33296: NOT
33297: PUSH
33298: LD_VAR 0 1
33302: PPUSH
33303: CALL_OW 257
33307: PUSH
33308: LD_INT 9
33310: NONEQUAL
33311: OR
33312: IFFALSE 33316
// exit ;
33314: GO 33889
// side := GetSide ( unit ) ;
33316: LD_ADDR_VAR 0 9
33320: PUSH
33321: LD_VAR 0 1
33325: PPUSH
33326: CALL_OW 255
33330: ST_TO_ADDR
// tech_space := tech_spacanom ;
33331: LD_ADDR_VAR 0 12
33335: PUSH
33336: LD_INT 29
33338: ST_TO_ADDR
// tech_time := tech_taurad ;
33339: LD_ADDR_VAR 0 13
33343: PUSH
33344: LD_INT 28
33346: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
33347: LD_ADDR_VAR 0 11
33351: PUSH
33352: LD_VAR 0 1
33356: PPUSH
33357: CALL_OW 310
33361: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
33362: LD_VAR 0 11
33366: PPUSH
33367: CALL_OW 247
33371: PUSH
33372: LD_INT 2
33374: EQUAL
33375: IFFALSE 33379
// exit ;
33377: GO 33889
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33379: LD_ADDR_VAR 0 8
33383: PUSH
33384: LD_INT 81
33386: PUSH
33387: LD_VAR 0 9
33391: PUSH
33392: EMPTY
33393: LIST
33394: LIST
33395: PUSH
33396: LD_INT 3
33398: PUSH
33399: LD_INT 21
33401: PUSH
33402: LD_INT 3
33404: PUSH
33405: EMPTY
33406: LIST
33407: LIST
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: PUSH
33413: EMPTY
33414: LIST
33415: LIST
33416: PPUSH
33417: CALL_OW 69
33421: ST_TO_ADDR
// if not tmp then
33422: LD_VAR 0 8
33426: NOT
33427: IFFALSE 33431
// exit ;
33429: GO 33889
// if in_unit then
33431: LD_VAR 0 11
33435: IFFALSE 33459
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
33437: LD_ADDR_VAR 0 10
33441: PUSH
33442: LD_VAR 0 8
33446: PPUSH
33447: LD_VAR 0 11
33451: PPUSH
33452: CALL_OW 74
33456: ST_TO_ADDR
33457: GO 33479
// enemy := NearestUnitToUnit ( tmp , unit ) ;
33459: LD_ADDR_VAR 0 10
33463: PUSH
33464: LD_VAR 0 8
33468: PPUSH
33469: LD_VAR 0 1
33473: PPUSH
33474: CALL_OW 74
33478: ST_TO_ADDR
// if not enemy then
33479: LD_VAR 0 10
33483: NOT
33484: IFFALSE 33488
// exit ;
33486: GO 33889
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
33488: LD_VAR 0 11
33492: PUSH
33493: LD_VAR 0 11
33497: PPUSH
33498: LD_VAR 0 10
33502: PPUSH
33503: CALL_OW 296
33507: PUSH
33508: LD_INT 13
33510: GREATER
33511: AND
33512: PUSH
33513: LD_VAR 0 1
33517: PPUSH
33518: LD_VAR 0 10
33522: PPUSH
33523: CALL_OW 296
33527: PUSH
33528: LD_INT 12
33530: GREATER
33531: OR
33532: IFFALSE 33536
// exit ;
33534: GO 33889
// missile := [ 1 ] ;
33536: LD_ADDR_VAR 0 14
33540: PUSH
33541: LD_INT 1
33543: PUSH
33544: EMPTY
33545: LIST
33546: ST_TO_ADDR
// if Researched ( side , tech_space ) then
33547: LD_VAR 0 9
33551: PPUSH
33552: LD_VAR 0 12
33556: PPUSH
33557: CALL_OW 325
33561: IFFALSE 33590
// missile := Replace ( missile , missile + 1 , 2 ) ;
33563: LD_ADDR_VAR 0 14
33567: PUSH
33568: LD_VAR 0 14
33572: PPUSH
33573: LD_VAR 0 14
33577: PUSH
33578: LD_INT 1
33580: PLUS
33581: PPUSH
33582: LD_INT 2
33584: PPUSH
33585: CALL_OW 1
33589: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
33590: LD_VAR 0 9
33594: PPUSH
33595: LD_VAR 0 13
33599: PPUSH
33600: CALL_OW 325
33604: PUSH
33605: LD_VAR 0 10
33609: PPUSH
33610: CALL_OW 255
33614: PPUSH
33615: LD_VAR 0 13
33619: PPUSH
33620: CALL_OW 325
33624: NOT
33625: AND
33626: IFFALSE 33655
// missile := Replace ( missile , missile + 1 , 3 ) ;
33628: LD_ADDR_VAR 0 14
33632: PUSH
33633: LD_VAR 0 14
33637: PPUSH
33638: LD_VAR 0 14
33642: PUSH
33643: LD_INT 1
33645: PLUS
33646: PPUSH
33647: LD_INT 3
33649: PPUSH
33650: CALL_OW 1
33654: ST_TO_ADDR
// if missile < 2 then
33655: LD_VAR 0 14
33659: PUSH
33660: LD_INT 2
33662: LESS
33663: IFFALSE 33667
// exit ;
33665: GO 33889
// x := GetX ( enemy ) ;
33667: LD_ADDR_VAR 0 4
33671: PUSH
33672: LD_VAR 0 10
33676: PPUSH
33677: CALL_OW 250
33681: ST_TO_ADDR
// y := GetY ( enemy ) ;
33682: LD_ADDR_VAR 0 5
33686: PUSH
33687: LD_VAR 0 10
33691: PPUSH
33692: CALL_OW 251
33696: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
33697: LD_ADDR_VAR 0 6
33701: PUSH
33702: LD_VAR 0 4
33706: PUSH
33707: LD_INT 1
33709: NEG
33710: PPUSH
33711: LD_INT 1
33713: PPUSH
33714: CALL_OW 12
33718: PLUS
33719: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
33720: LD_ADDR_VAR 0 7
33724: PUSH
33725: LD_VAR 0 5
33729: PUSH
33730: LD_INT 1
33732: NEG
33733: PPUSH
33734: LD_INT 1
33736: PPUSH
33737: CALL_OW 12
33741: PLUS
33742: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33743: LD_VAR 0 6
33747: PPUSH
33748: LD_VAR 0 7
33752: PPUSH
33753: CALL_OW 488
33757: NOT
33758: IFFALSE 33780
// begin _x := x ;
33760: LD_ADDR_VAR 0 6
33764: PUSH
33765: LD_VAR 0 4
33769: ST_TO_ADDR
// _y := y ;
33770: LD_ADDR_VAR 0 7
33774: PUSH
33775: LD_VAR 0 5
33779: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
33780: LD_ADDR_VAR 0 3
33784: PUSH
33785: LD_INT 1
33787: PPUSH
33788: LD_VAR 0 14
33792: PPUSH
33793: CALL_OW 12
33797: ST_TO_ADDR
// case i of 1 :
33798: LD_VAR 0 3
33802: PUSH
33803: LD_INT 1
33805: DOUBLE
33806: EQUAL
33807: IFTRUE 33811
33809: GO 33828
33811: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
33812: LD_VAR 0 1
33816: PPUSH
33817: LD_VAR 0 10
33821: PPUSH
33822: CALL_OW 115
33826: GO 33889
33828: LD_INT 2
33830: DOUBLE
33831: EQUAL
33832: IFTRUE 33836
33834: GO 33858
33836: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
33837: LD_VAR 0 1
33841: PPUSH
33842: LD_VAR 0 6
33846: PPUSH
33847: LD_VAR 0 7
33851: PPUSH
33852: CALL_OW 153
33856: GO 33889
33858: LD_INT 3
33860: DOUBLE
33861: EQUAL
33862: IFTRUE 33866
33864: GO 33888
33866: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
33867: LD_VAR 0 1
33871: PPUSH
33872: LD_VAR 0 6
33876: PPUSH
33877: LD_VAR 0 7
33881: PPUSH
33882: CALL_OW 154
33886: GO 33889
33888: POP
// end ;
33889: LD_VAR 0 2
33893: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
33894: LD_INT 0
33896: PPUSH
33897: PPUSH
33898: PPUSH
33899: PPUSH
33900: PPUSH
33901: PPUSH
// if not unit or not building then
33902: LD_VAR 0 1
33906: NOT
33907: PUSH
33908: LD_VAR 0 2
33912: NOT
33913: OR
33914: IFFALSE 33918
// exit ;
33916: GO 34076
// x := GetX ( building ) ;
33918: LD_ADDR_VAR 0 5
33922: PUSH
33923: LD_VAR 0 2
33927: PPUSH
33928: CALL_OW 250
33932: ST_TO_ADDR
// y := GetY ( building ) ;
33933: LD_ADDR_VAR 0 6
33937: PUSH
33938: LD_VAR 0 2
33942: PPUSH
33943: CALL_OW 251
33947: ST_TO_ADDR
// for i = 0 to 5 do
33948: LD_ADDR_VAR 0 4
33952: PUSH
33953: DOUBLE
33954: LD_INT 0
33956: DEC
33957: ST_TO_ADDR
33958: LD_INT 5
33960: PUSH
33961: FOR_TO
33962: IFFALSE 34074
// begin _x := ShiftX ( x , i , 3 ) ;
33964: LD_ADDR_VAR 0 7
33968: PUSH
33969: LD_VAR 0 5
33973: PPUSH
33974: LD_VAR 0 4
33978: PPUSH
33979: LD_INT 3
33981: PPUSH
33982: CALL_OW 272
33986: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
33987: LD_ADDR_VAR 0 8
33991: PUSH
33992: LD_VAR 0 6
33996: PPUSH
33997: LD_VAR 0 4
34001: PPUSH
34002: LD_INT 3
34004: PPUSH
34005: CALL_OW 273
34009: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34010: LD_VAR 0 7
34014: PPUSH
34015: LD_VAR 0 8
34019: PPUSH
34020: CALL_OW 488
34024: NOT
34025: IFFALSE 34029
// continue ;
34027: GO 33961
// if HexInfo ( _x , _y ) = 0 then
34029: LD_VAR 0 7
34033: PPUSH
34034: LD_VAR 0 8
34038: PPUSH
34039: CALL_OW 428
34043: PUSH
34044: LD_INT 0
34046: EQUAL
34047: IFFALSE 34072
// begin ComMoveXY ( unit , _x , _y ) ;
34049: LD_VAR 0 1
34053: PPUSH
34054: LD_VAR 0 7
34058: PPUSH
34059: LD_VAR 0 8
34063: PPUSH
34064: CALL_OW 111
// exit ;
34068: POP
34069: POP
34070: GO 34076
// end ; end ;
34072: GO 33961
34074: POP
34075: POP
// end ;
34076: LD_VAR 0 3
34080: RET
// export function ScanBase ( side , base_area ) ; begin
34081: LD_INT 0
34083: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
34084: LD_ADDR_VAR 0 3
34088: PUSH
34089: LD_VAR 0 2
34093: PPUSH
34094: LD_INT 81
34096: PUSH
34097: LD_VAR 0 1
34101: PUSH
34102: EMPTY
34103: LIST
34104: LIST
34105: PPUSH
34106: CALL_OW 70
34110: ST_TO_ADDR
// end ;
34111: LD_VAR 0 3
34115: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
34116: LD_INT 0
34118: PPUSH
34119: PPUSH
34120: PPUSH
34121: PPUSH
// result := false ;
34122: LD_ADDR_VAR 0 2
34126: PUSH
34127: LD_INT 0
34129: ST_TO_ADDR
// side := GetSide ( unit ) ;
34130: LD_ADDR_VAR 0 3
34134: PUSH
34135: LD_VAR 0 1
34139: PPUSH
34140: CALL_OW 255
34144: ST_TO_ADDR
// nat := GetNation ( unit ) ;
34145: LD_ADDR_VAR 0 4
34149: PUSH
34150: LD_VAR 0 1
34154: PPUSH
34155: CALL_OW 248
34159: ST_TO_ADDR
// case nat of 1 :
34160: LD_VAR 0 4
34164: PUSH
34165: LD_INT 1
34167: DOUBLE
34168: EQUAL
34169: IFTRUE 34173
34171: GO 34184
34173: POP
// tech := tech_lassight ; 2 :
34174: LD_ADDR_VAR 0 5
34178: PUSH
34179: LD_INT 12
34181: ST_TO_ADDR
34182: GO 34223
34184: LD_INT 2
34186: DOUBLE
34187: EQUAL
34188: IFTRUE 34192
34190: GO 34203
34192: POP
// tech := tech_mortar ; 3 :
34193: LD_ADDR_VAR 0 5
34197: PUSH
34198: LD_INT 41
34200: ST_TO_ADDR
34201: GO 34223
34203: LD_INT 3
34205: DOUBLE
34206: EQUAL
34207: IFTRUE 34211
34209: GO 34222
34211: POP
// tech := tech_bazooka ; end ;
34212: LD_ADDR_VAR 0 5
34216: PUSH
34217: LD_INT 44
34219: ST_TO_ADDR
34220: GO 34223
34222: POP
// if Researched ( side , tech ) then
34223: LD_VAR 0 3
34227: PPUSH
34228: LD_VAR 0 5
34232: PPUSH
34233: CALL_OW 325
34237: IFFALSE 34264
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
34239: LD_ADDR_VAR 0 2
34243: PUSH
34244: LD_INT 5
34246: PUSH
34247: LD_INT 8
34249: PUSH
34250: LD_INT 9
34252: PUSH
34253: EMPTY
34254: LIST
34255: LIST
34256: LIST
34257: PUSH
34258: LD_VAR 0 4
34262: ARRAY
34263: ST_TO_ADDR
// end ;
34264: LD_VAR 0 2
34268: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
34269: LD_INT 0
34271: PPUSH
34272: PPUSH
34273: PPUSH
// if not mines then
34274: LD_VAR 0 2
34278: NOT
34279: IFFALSE 34283
// exit ;
34281: GO 34427
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34283: LD_ADDR_VAR 0 5
34287: PUSH
34288: LD_INT 81
34290: PUSH
34291: LD_VAR 0 1
34295: PUSH
34296: EMPTY
34297: LIST
34298: LIST
34299: PUSH
34300: LD_INT 3
34302: PUSH
34303: LD_INT 21
34305: PUSH
34306: LD_INT 3
34308: PUSH
34309: EMPTY
34310: LIST
34311: LIST
34312: PUSH
34313: EMPTY
34314: LIST
34315: LIST
34316: PUSH
34317: EMPTY
34318: LIST
34319: LIST
34320: PPUSH
34321: CALL_OW 69
34325: ST_TO_ADDR
// for i in mines do
34326: LD_ADDR_VAR 0 4
34330: PUSH
34331: LD_VAR 0 2
34335: PUSH
34336: FOR_IN
34337: IFFALSE 34425
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
34339: LD_VAR 0 4
34343: PUSH
34344: LD_INT 1
34346: ARRAY
34347: PPUSH
34348: LD_VAR 0 4
34352: PUSH
34353: LD_INT 2
34355: ARRAY
34356: PPUSH
34357: CALL_OW 458
34361: NOT
34362: IFFALSE 34366
// continue ;
34364: GO 34336
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
34366: LD_VAR 0 4
34370: PUSH
34371: LD_INT 1
34373: ARRAY
34374: PPUSH
34375: LD_VAR 0 4
34379: PUSH
34380: LD_INT 2
34382: ARRAY
34383: PPUSH
34384: CALL_OW 428
34388: PUSH
34389: LD_VAR 0 5
34393: IN
34394: IFFALSE 34423
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
34396: LD_VAR 0 4
34400: PUSH
34401: LD_INT 1
34403: ARRAY
34404: PPUSH
34405: LD_VAR 0 4
34409: PUSH
34410: LD_INT 2
34412: ARRAY
34413: PPUSH
34414: LD_VAR 0 1
34418: PPUSH
34419: CALL_OW 456
// end ;
34423: GO 34336
34425: POP
34426: POP
// end ;
34427: LD_VAR 0 3
34431: RET
// export function Count ( array ) ; var i ; begin
34432: LD_INT 0
34434: PPUSH
34435: PPUSH
// result := 0 ;
34436: LD_ADDR_VAR 0 2
34440: PUSH
34441: LD_INT 0
34443: ST_TO_ADDR
// for i in array do
34444: LD_ADDR_VAR 0 3
34448: PUSH
34449: LD_VAR 0 1
34453: PUSH
34454: FOR_IN
34455: IFFALSE 34479
// if i then
34457: LD_VAR 0 3
34461: IFFALSE 34477
// result := result + 1 ;
34463: LD_ADDR_VAR 0 2
34467: PUSH
34468: LD_VAR 0 2
34472: PUSH
34473: LD_INT 1
34475: PLUS
34476: ST_TO_ADDR
34477: GO 34454
34479: POP
34480: POP
// end ;
34481: LD_VAR 0 2
34485: RET
// export function IsEmpty ( building ) ; begin
34486: LD_INT 0
34488: PPUSH
// if not building then
34489: LD_VAR 0 1
34493: NOT
34494: IFFALSE 34498
// exit ;
34496: GO 34541
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
34498: LD_ADDR_VAR 0 2
34502: PUSH
34503: LD_VAR 0 1
34507: PUSH
34508: LD_INT 22
34510: PUSH
34511: LD_VAR 0 1
34515: PPUSH
34516: CALL_OW 255
34520: PUSH
34521: EMPTY
34522: LIST
34523: LIST
34524: PUSH
34525: LD_INT 58
34527: PUSH
34528: EMPTY
34529: LIST
34530: PUSH
34531: EMPTY
34532: LIST
34533: LIST
34534: PPUSH
34535: CALL_OW 69
34539: IN
34540: ST_TO_ADDR
// end ;
34541: LD_VAR 0 2
34545: RET
// export function IsNotFull ( building ) ; var places ; begin
34546: LD_INT 0
34548: PPUSH
34549: PPUSH
// if not building then
34550: LD_VAR 0 1
34554: NOT
34555: IFFALSE 34559
// exit ;
34557: GO 34730
// result := false ;
34559: LD_ADDR_VAR 0 2
34563: PUSH
34564: LD_INT 0
34566: ST_TO_ADDR
// places := 0 ;
34567: LD_ADDR_VAR 0 3
34571: PUSH
34572: LD_INT 0
34574: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
34575: LD_VAR 0 1
34579: PPUSH
34580: CALL_OW 266
34584: PUSH
34585: LD_INT 0
34587: DOUBLE
34588: EQUAL
34589: IFTRUE 34647
34591: LD_INT 1
34593: DOUBLE
34594: EQUAL
34595: IFTRUE 34647
34597: LD_INT 6
34599: DOUBLE
34600: EQUAL
34601: IFTRUE 34647
34603: LD_INT 7
34605: DOUBLE
34606: EQUAL
34607: IFTRUE 34647
34609: LD_INT 8
34611: DOUBLE
34612: EQUAL
34613: IFTRUE 34647
34615: LD_INT 4
34617: DOUBLE
34618: EQUAL
34619: IFTRUE 34647
34621: LD_INT 5
34623: DOUBLE
34624: EQUAL
34625: IFTRUE 34647
34627: LD_INT 2
34629: DOUBLE
34630: EQUAL
34631: IFTRUE 34647
34633: LD_INT 3
34635: DOUBLE
34636: EQUAL
34637: IFTRUE 34647
34639: LD_INT 35
34641: DOUBLE
34642: EQUAL
34643: IFTRUE 34647
34645: GO 34658
34647: POP
// places := 6 ; b_bunker , b_breastwork :
34648: LD_ADDR_VAR 0 3
34652: PUSH
34653: LD_INT 6
34655: ST_TO_ADDR
34656: GO 34703
34658: LD_INT 32
34660: DOUBLE
34661: EQUAL
34662: IFTRUE 34672
34664: LD_INT 31
34666: DOUBLE
34667: EQUAL
34668: IFTRUE 34672
34670: GO 34683
34672: POP
// places := 1 ; b_control_tower :
34673: LD_ADDR_VAR 0 3
34677: PUSH
34678: LD_INT 1
34680: ST_TO_ADDR
34681: GO 34703
34683: LD_INT 36
34685: DOUBLE
34686: EQUAL
34687: IFTRUE 34691
34689: GO 34702
34691: POP
// places := 3 ; end ;
34692: LD_ADDR_VAR 0 3
34696: PUSH
34697: LD_INT 3
34699: ST_TO_ADDR
34700: GO 34703
34702: POP
// if places then
34703: LD_VAR 0 3
34707: IFFALSE 34730
// result := UnitsInside ( building ) < places ;
34709: LD_ADDR_VAR 0 2
34713: PUSH
34714: LD_VAR 0 1
34718: PPUSH
34719: CALL_OW 313
34723: PUSH
34724: LD_VAR 0 3
34728: LESS
34729: ST_TO_ADDR
// end ;
34730: LD_VAR 0 2
34734: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
34735: LD_INT 0
34737: PPUSH
34738: PPUSH
34739: PPUSH
34740: PPUSH
// tmp := [ ] ;
34741: LD_ADDR_VAR 0 3
34745: PUSH
34746: EMPTY
34747: ST_TO_ADDR
// list := [ ] ;
34748: LD_ADDR_VAR 0 5
34752: PUSH
34753: EMPTY
34754: ST_TO_ADDR
// for i = 16 to 25 do
34755: LD_ADDR_VAR 0 4
34759: PUSH
34760: DOUBLE
34761: LD_INT 16
34763: DEC
34764: ST_TO_ADDR
34765: LD_INT 25
34767: PUSH
34768: FOR_TO
34769: IFFALSE 34842
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
34771: LD_ADDR_VAR 0 3
34775: PUSH
34776: LD_VAR 0 3
34780: PUSH
34781: LD_INT 22
34783: PUSH
34784: LD_VAR 0 1
34788: PPUSH
34789: CALL_OW 255
34793: PUSH
34794: EMPTY
34795: LIST
34796: LIST
34797: PUSH
34798: LD_INT 91
34800: PUSH
34801: LD_VAR 0 1
34805: PUSH
34806: LD_INT 6
34808: PUSH
34809: EMPTY
34810: LIST
34811: LIST
34812: LIST
34813: PUSH
34814: LD_INT 30
34816: PUSH
34817: LD_VAR 0 4
34821: PUSH
34822: EMPTY
34823: LIST
34824: LIST
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: LIST
34830: PUSH
34831: EMPTY
34832: LIST
34833: PPUSH
34834: CALL_OW 69
34838: ADD
34839: ST_TO_ADDR
34840: GO 34768
34842: POP
34843: POP
// for i = 1 to tmp do
34844: LD_ADDR_VAR 0 4
34848: PUSH
34849: DOUBLE
34850: LD_INT 1
34852: DEC
34853: ST_TO_ADDR
34854: LD_VAR 0 3
34858: PUSH
34859: FOR_TO
34860: IFFALSE 34948
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
34862: LD_ADDR_VAR 0 5
34866: PUSH
34867: LD_VAR 0 5
34871: PUSH
34872: LD_VAR 0 3
34876: PUSH
34877: LD_VAR 0 4
34881: ARRAY
34882: PPUSH
34883: CALL_OW 266
34887: PUSH
34888: LD_VAR 0 3
34892: PUSH
34893: LD_VAR 0 4
34897: ARRAY
34898: PPUSH
34899: CALL_OW 250
34903: PUSH
34904: LD_VAR 0 3
34908: PUSH
34909: LD_VAR 0 4
34913: ARRAY
34914: PPUSH
34915: CALL_OW 251
34919: PUSH
34920: LD_VAR 0 3
34924: PUSH
34925: LD_VAR 0 4
34929: ARRAY
34930: PPUSH
34931: CALL_OW 254
34935: PUSH
34936: EMPTY
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: PUSH
34942: EMPTY
34943: LIST
34944: ADD
34945: ST_TO_ADDR
34946: GO 34859
34948: POP
34949: POP
// result := list ;
34950: LD_ADDR_VAR 0 2
34954: PUSH
34955: LD_VAR 0 5
34959: ST_TO_ADDR
// end ;
34960: LD_VAR 0 2
34964: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
34965: LD_INT 0
34967: PPUSH
34968: PPUSH
34969: PPUSH
34970: PPUSH
34971: PPUSH
34972: PPUSH
34973: PPUSH
// if not factory then
34974: LD_VAR 0 1
34978: NOT
34979: IFFALSE 34983
// exit ;
34981: GO 35576
// if control = control_apeman then
34983: LD_VAR 0 4
34987: PUSH
34988: LD_INT 5
34990: EQUAL
34991: IFFALSE 35100
// begin tmp := UnitsInside ( factory ) ;
34993: LD_ADDR_VAR 0 8
34997: PUSH
34998: LD_VAR 0 1
35002: PPUSH
35003: CALL_OW 313
35007: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
35008: LD_VAR 0 8
35012: PPUSH
35013: LD_INT 25
35015: PUSH
35016: LD_INT 12
35018: PUSH
35019: EMPTY
35020: LIST
35021: LIST
35022: PPUSH
35023: CALL_OW 72
35027: NOT
35028: IFFALSE 35038
// control := control_manual ;
35030: LD_ADDR_VAR 0 4
35034: PUSH
35035: LD_INT 1
35037: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
35038: LD_ADDR_VAR 0 8
35042: PUSH
35043: LD_VAR 0 1
35047: PPUSH
35048: CALL 34735 0 1
35052: ST_TO_ADDR
// if tmp then
35053: LD_VAR 0 8
35057: IFFALSE 35100
// begin for i in tmp do
35059: LD_ADDR_VAR 0 7
35063: PUSH
35064: LD_VAR 0 8
35068: PUSH
35069: FOR_IN
35070: IFFALSE 35098
// if i [ 1 ] = b_ext_radio then
35072: LD_VAR 0 7
35076: PUSH
35077: LD_INT 1
35079: ARRAY
35080: PUSH
35081: LD_INT 22
35083: EQUAL
35084: IFFALSE 35096
// begin control := control_remote ;
35086: LD_ADDR_VAR 0 4
35090: PUSH
35091: LD_INT 2
35093: ST_TO_ADDR
// break ;
35094: GO 35098
// end ;
35096: GO 35069
35098: POP
35099: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35100: LD_VAR 0 1
35104: PPUSH
35105: LD_VAR 0 2
35109: PPUSH
35110: LD_VAR 0 3
35114: PPUSH
35115: LD_VAR 0 4
35119: PPUSH
35120: LD_VAR 0 5
35124: PPUSH
35125: CALL_OW 448
35129: IFFALSE 35164
// begin result := [ chassis , engine , control , weapon ] ;
35131: LD_ADDR_VAR 0 6
35135: PUSH
35136: LD_VAR 0 2
35140: PUSH
35141: LD_VAR 0 3
35145: PUSH
35146: LD_VAR 0 4
35150: PUSH
35151: LD_VAR 0 5
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: LIST
35160: LIST
35161: ST_TO_ADDR
// exit ;
35162: GO 35576
// end ; _chassis := AvailableChassisList ( factory ) ;
35164: LD_ADDR_VAR 0 9
35168: PUSH
35169: LD_VAR 0 1
35173: PPUSH
35174: CALL_OW 475
35178: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
35179: LD_ADDR_VAR 0 11
35183: PUSH
35184: LD_VAR 0 1
35188: PPUSH
35189: CALL_OW 476
35193: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
35194: LD_ADDR_VAR 0 12
35198: PUSH
35199: LD_VAR 0 1
35203: PPUSH
35204: CALL_OW 477
35208: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
35209: LD_ADDR_VAR 0 10
35213: PUSH
35214: LD_VAR 0 1
35218: PPUSH
35219: CALL_OW 478
35223: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
35224: LD_VAR 0 9
35228: NOT
35229: PUSH
35230: LD_VAR 0 11
35234: NOT
35235: OR
35236: PUSH
35237: LD_VAR 0 12
35241: NOT
35242: OR
35243: PUSH
35244: LD_VAR 0 10
35248: NOT
35249: OR
35250: IFFALSE 35285
// begin result := [ chassis , engine , control , weapon ] ;
35252: LD_ADDR_VAR 0 6
35256: PUSH
35257: LD_VAR 0 2
35261: PUSH
35262: LD_VAR 0 3
35266: PUSH
35267: LD_VAR 0 4
35271: PUSH
35272: LD_VAR 0 5
35276: PUSH
35277: EMPTY
35278: LIST
35279: LIST
35280: LIST
35281: LIST
35282: ST_TO_ADDR
// exit ;
35283: GO 35576
// end ; if not chassis in _chassis then
35285: LD_VAR 0 2
35289: PUSH
35290: LD_VAR 0 9
35294: IN
35295: NOT
35296: IFFALSE 35322
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
35298: LD_ADDR_VAR 0 2
35302: PUSH
35303: LD_VAR 0 9
35307: PUSH
35308: LD_INT 1
35310: PPUSH
35311: LD_VAR 0 9
35315: PPUSH
35316: CALL_OW 12
35320: ARRAY
35321: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
35322: LD_VAR 0 2
35326: PPUSH
35327: LD_VAR 0 3
35331: PPUSH
35332: CALL 35581 0 2
35336: NOT
35337: IFFALSE 35396
// repeat engine := _engine [ 1 ] ;
35339: LD_ADDR_VAR 0 3
35343: PUSH
35344: LD_VAR 0 11
35348: PUSH
35349: LD_INT 1
35351: ARRAY
35352: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
35353: LD_ADDR_VAR 0 11
35357: PUSH
35358: LD_VAR 0 11
35362: PPUSH
35363: LD_INT 1
35365: PPUSH
35366: CALL_OW 3
35370: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
35371: LD_VAR 0 2
35375: PPUSH
35376: LD_VAR 0 3
35380: PPUSH
35381: CALL 35581 0 2
35385: PUSH
35386: LD_VAR 0 11
35390: PUSH
35391: EMPTY
35392: EQUAL
35393: OR
35394: IFFALSE 35339
// if not control in _control then
35396: LD_VAR 0 4
35400: PUSH
35401: LD_VAR 0 12
35405: IN
35406: NOT
35407: IFFALSE 35433
// control := _control [ rand ( 1 , _control ) ] ;
35409: LD_ADDR_VAR 0 4
35413: PUSH
35414: LD_VAR 0 12
35418: PUSH
35419: LD_INT 1
35421: PPUSH
35422: LD_VAR 0 12
35426: PPUSH
35427: CALL_OW 12
35431: ARRAY
35432: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
35433: LD_VAR 0 2
35437: PPUSH
35438: LD_VAR 0 5
35442: PPUSH
35443: CALL 35801 0 2
35447: NOT
35448: IFFALSE 35507
// repeat weapon := _weapon [ 1 ] ;
35450: LD_ADDR_VAR 0 5
35454: PUSH
35455: LD_VAR 0 10
35459: PUSH
35460: LD_INT 1
35462: ARRAY
35463: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
35464: LD_ADDR_VAR 0 10
35468: PUSH
35469: LD_VAR 0 10
35473: PPUSH
35474: LD_INT 1
35476: PPUSH
35477: CALL_OW 3
35481: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
35482: LD_VAR 0 2
35486: PPUSH
35487: LD_VAR 0 5
35491: PPUSH
35492: CALL 35801 0 2
35496: PUSH
35497: LD_VAR 0 10
35501: PUSH
35502: EMPTY
35503: EQUAL
35504: OR
35505: IFFALSE 35450
// result := [ ] ;
35507: LD_ADDR_VAR 0 6
35511: PUSH
35512: EMPTY
35513: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35514: LD_VAR 0 1
35518: PPUSH
35519: LD_VAR 0 2
35523: PPUSH
35524: LD_VAR 0 3
35528: PPUSH
35529: LD_VAR 0 4
35533: PPUSH
35534: LD_VAR 0 5
35538: PPUSH
35539: CALL_OW 448
35543: IFFALSE 35576
// result := [ chassis , engine , control , weapon ] ;
35545: LD_ADDR_VAR 0 6
35549: PUSH
35550: LD_VAR 0 2
35554: PUSH
35555: LD_VAR 0 3
35559: PUSH
35560: LD_VAR 0 4
35564: PUSH
35565: LD_VAR 0 5
35569: PUSH
35570: EMPTY
35571: LIST
35572: LIST
35573: LIST
35574: LIST
35575: ST_TO_ADDR
// end ;
35576: LD_VAR 0 6
35580: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
35581: LD_INT 0
35583: PPUSH
// if not chassis or not engine then
35584: LD_VAR 0 1
35588: NOT
35589: PUSH
35590: LD_VAR 0 2
35594: NOT
35595: OR
35596: IFFALSE 35600
// exit ;
35598: GO 35796
// case engine of engine_solar :
35600: LD_VAR 0 2
35604: PUSH
35605: LD_INT 2
35607: DOUBLE
35608: EQUAL
35609: IFTRUE 35613
35611: GO 35651
35613: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
35614: LD_ADDR_VAR 0 3
35618: PUSH
35619: LD_INT 11
35621: PUSH
35622: LD_INT 12
35624: PUSH
35625: LD_INT 13
35627: PUSH
35628: LD_INT 14
35630: PUSH
35631: LD_INT 1
35633: PUSH
35634: LD_INT 2
35636: PUSH
35637: LD_INT 3
35639: PUSH
35640: EMPTY
35641: LIST
35642: LIST
35643: LIST
35644: LIST
35645: LIST
35646: LIST
35647: LIST
35648: ST_TO_ADDR
35649: GO 35780
35651: LD_INT 1
35653: DOUBLE
35654: EQUAL
35655: IFTRUE 35659
35657: GO 35721
35659: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
35660: LD_ADDR_VAR 0 3
35664: PUSH
35665: LD_INT 11
35667: PUSH
35668: LD_INT 12
35670: PUSH
35671: LD_INT 13
35673: PUSH
35674: LD_INT 14
35676: PUSH
35677: LD_INT 1
35679: PUSH
35680: LD_INT 2
35682: PUSH
35683: LD_INT 3
35685: PUSH
35686: LD_INT 4
35688: PUSH
35689: LD_INT 5
35691: PUSH
35692: LD_INT 21
35694: PUSH
35695: LD_INT 23
35697: PUSH
35698: LD_INT 22
35700: PUSH
35701: LD_INT 24
35703: PUSH
35704: EMPTY
35705: LIST
35706: LIST
35707: LIST
35708: LIST
35709: LIST
35710: LIST
35711: LIST
35712: LIST
35713: LIST
35714: LIST
35715: LIST
35716: LIST
35717: LIST
35718: ST_TO_ADDR
35719: GO 35780
35721: LD_INT 3
35723: DOUBLE
35724: EQUAL
35725: IFTRUE 35729
35727: GO 35779
35729: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35730: LD_ADDR_VAR 0 3
35734: PUSH
35735: LD_INT 13
35737: PUSH
35738: LD_INT 14
35740: PUSH
35741: LD_INT 2
35743: PUSH
35744: LD_INT 3
35746: PUSH
35747: LD_INT 4
35749: PUSH
35750: LD_INT 5
35752: PUSH
35753: LD_INT 21
35755: PUSH
35756: LD_INT 22
35758: PUSH
35759: LD_INT 23
35761: PUSH
35762: LD_INT 24
35764: PUSH
35765: EMPTY
35766: LIST
35767: LIST
35768: LIST
35769: LIST
35770: LIST
35771: LIST
35772: LIST
35773: LIST
35774: LIST
35775: LIST
35776: ST_TO_ADDR
35777: GO 35780
35779: POP
// result := ( chassis in result ) ;
35780: LD_ADDR_VAR 0 3
35784: PUSH
35785: LD_VAR 0 1
35789: PUSH
35790: LD_VAR 0 3
35794: IN
35795: ST_TO_ADDR
// end ;
35796: LD_VAR 0 3
35800: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
35801: LD_INT 0
35803: PPUSH
// if not chassis or not weapon then
35804: LD_VAR 0 1
35808: NOT
35809: PUSH
35810: LD_VAR 0 2
35814: NOT
35815: OR
35816: IFFALSE 35820
// exit ;
35818: GO 36880
// case weapon of us_machine_gun :
35820: LD_VAR 0 2
35824: PUSH
35825: LD_INT 2
35827: DOUBLE
35828: EQUAL
35829: IFTRUE 35833
35831: GO 35863
35833: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
35834: LD_ADDR_VAR 0 3
35838: PUSH
35839: LD_INT 1
35841: PUSH
35842: LD_INT 2
35844: PUSH
35845: LD_INT 3
35847: PUSH
35848: LD_INT 4
35850: PUSH
35851: LD_INT 5
35853: PUSH
35854: EMPTY
35855: LIST
35856: LIST
35857: LIST
35858: LIST
35859: LIST
35860: ST_TO_ADDR
35861: GO 36864
35863: LD_INT 3
35865: DOUBLE
35866: EQUAL
35867: IFTRUE 35871
35869: GO 35901
35871: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
35872: LD_ADDR_VAR 0 3
35876: PUSH
35877: LD_INT 1
35879: PUSH
35880: LD_INT 2
35882: PUSH
35883: LD_INT 3
35885: PUSH
35886: LD_INT 4
35888: PUSH
35889: LD_INT 5
35891: PUSH
35892: EMPTY
35893: LIST
35894: LIST
35895: LIST
35896: LIST
35897: LIST
35898: ST_TO_ADDR
35899: GO 36864
35901: LD_INT 11
35903: DOUBLE
35904: EQUAL
35905: IFTRUE 35909
35907: GO 35939
35909: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
35910: LD_ADDR_VAR 0 3
35914: PUSH
35915: LD_INT 1
35917: PUSH
35918: LD_INT 2
35920: PUSH
35921: LD_INT 3
35923: PUSH
35924: LD_INT 4
35926: PUSH
35927: LD_INT 5
35929: PUSH
35930: EMPTY
35931: LIST
35932: LIST
35933: LIST
35934: LIST
35935: LIST
35936: ST_TO_ADDR
35937: GO 36864
35939: LD_INT 4
35941: DOUBLE
35942: EQUAL
35943: IFTRUE 35947
35945: GO 35973
35947: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
35948: LD_ADDR_VAR 0 3
35952: PUSH
35953: LD_INT 2
35955: PUSH
35956: LD_INT 3
35958: PUSH
35959: LD_INT 4
35961: PUSH
35962: LD_INT 5
35964: PUSH
35965: EMPTY
35966: LIST
35967: LIST
35968: LIST
35969: LIST
35970: ST_TO_ADDR
35971: GO 36864
35973: LD_INT 5
35975: DOUBLE
35976: EQUAL
35977: IFTRUE 35981
35979: GO 36007
35981: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
35982: LD_ADDR_VAR 0 3
35986: PUSH
35987: LD_INT 2
35989: PUSH
35990: LD_INT 3
35992: PUSH
35993: LD_INT 4
35995: PUSH
35996: LD_INT 5
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: LIST
36003: LIST
36004: ST_TO_ADDR
36005: GO 36864
36007: LD_INT 9
36009: DOUBLE
36010: EQUAL
36011: IFTRUE 36015
36013: GO 36041
36015: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
36016: LD_ADDR_VAR 0 3
36020: PUSH
36021: LD_INT 2
36023: PUSH
36024: LD_INT 3
36026: PUSH
36027: LD_INT 4
36029: PUSH
36030: LD_INT 5
36032: PUSH
36033: EMPTY
36034: LIST
36035: LIST
36036: LIST
36037: LIST
36038: ST_TO_ADDR
36039: GO 36864
36041: LD_INT 7
36043: DOUBLE
36044: EQUAL
36045: IFTRUE 36049
36047: GO 36075
36049: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
36050: LD_ADDR_VAR 0 3
36054: PUSH
36055: LD_INT 2
36057: PUSH
36058: LD_INT 3
36060: PUSH
36061: LD_INT 4
36063: PUSH
36064: LD_INT 5
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: LIST
36071: LIST
36072: ST_TO_ADDR
36073: GO 36864
36075: LD_INT 12
36077: DOUBLE
36078: EQUAL
36079: IFTRUE 36083
36081: GO 36109
36083: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
36084: LD_ADDR_VAR 0 3
36088: PUSH
36089: LD_INT 2
36091: PUSH
36092: LD_INT 3
36094: PUSH
36095: LD_INT 4
36097: PUSH
36098: LD_INT 5
36100: PUSH
36101: EMPTY
36102: LIST
36103: LIST
36104: LIST
36105: LIST
36106: ST_TO_ADDR
36107: GO 36864
36109: LD_INT 13
36111: DOUBLE
36112: EQUAL
36113: IFTRUE 36117
36115: GO 36143
36117: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
36118: LD_ADDR_VAR 0 3
36122: PUSH
36123: LD_INT 2
36125: PUSH
36126: LD_INT 3
36128: PUSH
36129: LD_INT 4
36131: PUSH
36132: LD_INT 5
36134: PUSH
36135: EMPTY
36136: LIST
36137: LIST
36138: LIST
36139: LIST
36140: ST_TO_ADDR
36141: GO 36864
36143: LD_INT 14
36145: DOUBLE
36146: EQUAL
36147: IFTRUE 36151
36149: GO 36169
36151: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
36152: LD_ADDR_VAR 0 3
36156: PUSH
36157: LD_INT 4
36159: PUSH
36160: LD_INT 5
36162: PUSH
36163: EMPTY
36164: LIST
36165: LIST
36166: ST_TO_ADDR
36167: GO 36864
36169: LD_INT 6
36171: DOUBLE
36172: EQUAL
36173: IFTRUE 36177
36175: GO 36195
36177: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
36178: LD_ADDR_VAR 0 3
36182: PUSH
36183: LD_INT 4
36185: PUSH
36186: LD_INT 5
36188: PUSH
36189: EMPTY
36190: LIST
36191: LIST
36192: ST_TO_ADDR
36193: GO 36864
36195: LD_INT 10
36197: DOUBLE
36198: EQUAL
36199: IFTRUE 36203
36201: GO 36221
36203: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
36204: LD_ADDR_VAR 0 3
36208: PUSH
36209: LD_INT 4
36211: PUSH
36212: LD_INT 5
36214: PUSH
36215: EMPTY
36216: LIST
36217: LIST
36218: ST_TO_ADDR
36219: GO 36864
36221: LD_INT 22
36223: DOUBLE
36224: EQUAL
36225: IFTRUE 36229
36227: GO 36255
36229: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
36230: LD_ADDR_VAR 0 3
36234: PUSH
36235: LD_INT 11
36237: PUSH
36238: LD_INT 12
36240: PUSH
36241: LD_INT 13
36243: PUSH
36244: LD_INT 14
36246: PUSH
36247: EMPTY
36248: LIST
36249: LIST
36250: LIST
36251: LIST
36252: ST_TO_ADDR
36253: GO 36864
36255: LD_INT 23
36257: DOUBLE
36258: EQUAL
36259: IFTRUE 36263
36261: GO 36289
36263: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
36264: LD_ADDR_VAR 0 3
36268: PUSH
36269: LD_INT 11
36271: PUSH
36272: LD_INT 12
36274: PUSH
36275: LD_INT 13
36277: PUSH
36278: LD_INT 14
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: LIST
36285: LIST
36286: ST_TO_ADDR
36287: GO 36864
36289: LD_INT 24
36291: DOUBLE
36292: EQUAL
36293: IFTRUE 36297
36295: GO 36323
36297: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
36298: LD_ADDR_VAR 0 3
36302: PUSH
36303: LD_INT 11
36305: PUSH
36306: LD_INT 12
36308: PUSH
36309: LD_INT 13
36311: PUSH
36312: LD_INT 14
36314: PUSH
36315: EMPTY
36316: LIST
36317: LIST
36318: LIST
36319: LIST
36320: ST_TO_ADDR
36321: GO 36864
36323: LD_INT 30
36325: DOUBLE
36326: EQUAL
36327: IFTRUE 36331
36329: GO 36357
36331: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
36332: LD_ADDR_VAR 0 3
36336: PUSH
36337: LD_INT 11
36339: PUSH
36340: LD_INT 12
36342: PUSH
36343: LD_INT 13
36345: PUSH
36346: LD_INT 14
36348: PUSH
36349: EMPTY
36350: LIST
36351: LIST
36352: LIST
36353: LIST
36354: ST_TO_ADDR
36355: GO 36864
36357: LD_INT 25
36359: DOUBLE
36360: EQUAL
36361: IFTRUE 36365
36363: GO 36383
36365: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
36366: LD_ADDR_VAR 0 3
36370: PUSH
36371: LD_INT 13
36373: PUSH
36374: LD_INT 14
36376: PUSH
36377: EMPTY
36378: LIST
36379: LIST
36380: ST_TO_ADDR
36381: GO 36864
36383: LD_INT 27
36385: DOUBLE
36386: EQUAL
36387: IFTRUE 36391
36389: GO 36409
36391: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
36392: LD_ADDR_VAR 0 3
36396: PUSH
36397: LD_INT 13
36399: PUSH
36400: LD_INT 14
36402: PUSH
36403: EMPTY
36404: LIST
36405: LIST
36406: ST_TO_ADDR
36407: GO 36864
36409: LD_INT 92
36411: DOUBLE
36412: EQUAL
36413: IFTRUE 36417
36415: GO 36443
36417: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
36418: LD_ADDR_VAR 0 3
36422: PUSH
36423: LD_INT 11
36425: PUSH
36426: LD_INT 12
36428: PUSH
36429: LD_INT 13
36431: PUSH
36432: LD_INT 14
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: LIST
36439: LIST
36440: ST_TO_ADDR
36441: GO 36864
36443: LD_INT 28
36445: DOUBLE
36446: EQUAL
36447: IFTRUE 36451
36449: GO 36469
36451: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
36452: LD_ADDR_VAR 0 3
36456: PUSH
36457: LD_INT 13
36459: PUSH
36460: LD_INT 14
36462: PUSH
36463: EMPTY
36464: LIST
36465: LIST
36466: ST_TO_ADDR
36467: GO 36864
36469: LD_INT 29
36471: DOUBLE
36472: EQUAL
36473: IFTRUE 36477
36475: GO 36495
36477: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
36478: LD_ADDR_VAR 0 3
36482: PUSH
36483: LD_INT 13
36485: PUSH
36486: LD_INT 14
36488: PUSH
36489: EMPTY
36490: LIST
36491: LIST
36492: ST_TO_ADDR
36493: GO 36864
36495: LD_INT 31
36497: DOUBLE
36498: EQUAL
36499: IFTRUE 36503
36501: GO 36521
36503: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
36504: LD_ADDR_VAR 0 3
36508: PUSH
36509: LD_INT 13
36511: PUSH
36512: LD_INT 14
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: ST_TO_ADDR
36519: GO 36864
36521: LD_INT 26
36523: DOUBLE
36524: EQUAL
36525: IFTRUE 36529
36527: GO 36547
36529: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
36530: LD_ADDR_VAR 0 3
36534: PUSH
36535: LD_INT 13
36537: PUSH
36538: LD_INT 14
36540: PUSH
36541: EMPTY
36542: LIST
36543: LIST
36544: ST_TO_ADDR
36545: GO 36864
36547: LD_INT 42
36549: DOUBLE
36550: EQUAL
36551: IFTRUE 36555
36553: GO 36581
36555: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
36556: LD_ADDR_VAR 0 3
36560: PUSH
36561: LD_INT 21
36563: PUSH
36564: LD_INT 22
36566: PUSH
36567: LD_INT 23
36569: PUSH
36570: LD_INT 24
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: LIST
36577: LIST
36578: ST_TO_ADDR
36579: GO 36864
36581: LD_INT 43
36583: DOUBLE
36584: EQUAL
36585: IFTRUE 36589
36587: GO 36615
36589: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
36590: LD_ADDR_VAR 0 3
36594: PUSH
36595: LD_INT 21
36597: PUSH
36598: LD_INT 22
36600: PUSH
36601: LD_INT 23
36603: PUSH
36604: LD_INT 24
36606: PUSH
36607: EMPTY
36608: LIST
36609: LIST
36610: LIST
36611: LIST
36612: ST_TO_ADDR
36613: GO 36864
36615: LD_INT 44
36617: DOUBLE
36618: EQUAL
36619: IFTRUE 36623
36621: GO 36649
36623: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
36624: LD_ADDR_VAR 0 3
36628: PUSH
36629: LD_INT 21
36631: PUSH
36632: LD_INT 22
36634: PUSH
36635: LD_INT 23
36637: PUSH
36638: LD_INT 24
36640: PUSH
36641: EMPTY
36642: LIST
36643: LIST
36644: LIST
36645: LIST
36646: ST_TO_ADDR
36647: GO 36864
36649: LD_INT 45
36651: DOUBLE
36652: EQUAL
36653: IFTRUE 36657
36655: GO 36683
36657: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
36658: LD_ADDR_VAR 0 3
36662: PUSH
36663: LD_INT 21
36665: PUSH
36666: LD_INT 22
36668: PUSH
36669: LD_INT 23
36671: PUSH
36672: LD_INT 24
36674: PUSH
36675: EMPTY
36676: LIST
36677: LIST
36678: LIST
36679: LIST
36680: ST_TO_ADDR
36681: GO 36864
36683: LD_INT 49
36685: DOUBLE
36686: EQUAL
36687: IFTRUE 36691
36689: GO 36717
36691: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
36692: LD_ADDR_VAR 0 3
36696: PUSH
36697: LD_INT 21
36699: PUSH
36700: LD_INT 22
36702: PUSH
36703: LD_INT 23
36705: PUSH
36706: LD_INT 24
36708: PUSH
36709: EMPTY
36710: LIST
36711: LIST
36712: LIST
36713: LIST
36714: ST_TO_ADDR
36715: GO 36864
36717: LD_INT 51
36719: DOUBLE
36720: EQUAL
36721: IFTRUE 36725
36723: GO 36751
36725: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
36726: LD_ADDR_VAR 0 3
36730: PUSH
36731: LD_INT 21
36733: PUSH
36734: LD_INT 22
36736: PUSH
36737: LD_INT 23
36739: PUSH
36740: LD_INT 24
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: LIST
36747: LIST
36748: ST_TO_ADDR
36749: GO 36864
36751: LD_INT 52
36753: DOUBLE
36754: EQUAL
36755: IFTRUE 36759
36757: GO 36785
36759: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
36760: LD_ADDR_VAR 0 3
36764: PUSH
36765: LD_INT 21
36767: PUSH
36768: LD_INT 22
36770: PUSH
36771: LD_INT 23
36773: PUSH
36774: LD_INT 24
36776: PUSH
36777: EMPTY
36778: LIST
36779: LIST
36780: LIST
36781: LIST
36782: ST_TO_ADDR
36783: GO 36864
36785: LD_INT 53
36787: DOUBLE
36788: EQUAL
36789: IFTRUE 36793
36791: GO 36811
36793: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
36794: LD_ADDR_VAR 0 3
36798: PUSH
36799: LD_INT 23
36801: PUSH
36802: LD_INT 24
36804: PUSH
36805: EMPTY
36806: LIST
36807: LIST
36808: ST_TO_ADDR
36809: GO 36864
36811: LD_INT 46
36813: DOUBLE
36814: EQUAL
36815: IFTRUE 36819
36817: GO 36837
36819: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
36820: LD_ADDR_VAR 0 3
36824: PUSH
36825: LD_INT 23
36827: PUSH
36828: LD_INT 24
36830: PUSH
36831: EMPTY
36832: LIST
36833: LIST
36834: ST_TO_ADDR
36835: GO 36864
36837: LD_INT 47
36839: DOUBLE
36840: EQUAL
36841: IFTRUE 36845
36843: GO 36863
36845: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36846: LD_ADDR_VAR 0 3
36850: PUSH
36851: LD_INT 23
36853: PUSH
36854: LD_INT 24
36856: PUSH
36857: EMPTY
36858: LIST
36859: LIST
36860: ST_TO_ADDR
36861: GO 36864
36863: POP
// result := ( chassis in result ) ;
36864: LD_ADDR_VAR 0 3
36868: PUSH
36869: LD_VAR 0 1
36873: PUSH
36874: LD_VAR 0 3
36878: IN
36879: ST_TO_ADDR
// end ;
36880: LD_VAR 0 3
36884: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
36885: LD_INT 0
36887: PPUSH
36888: PPUSH
36889: PPUSH
36890: PPUSH
36891: PPUSH
36892: PPUSH
36893: PPUSH
// result := array ;
36894: LD_ADDR_VAR 0 5
36898: PUSH
36899: LD_VAR 0 1
36903: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
36904: LD_VAR 0 1
36908: NOT
36909: PUSH
36910: LD_VAR 0 2
36914: NOT
36915: OR
36916: PUSH
36917: LD_VAR 0 3
36921: NOT
36922: OR
36923: PUSH
36924: LD_VAR 0 2
36928: PUSH
36929: LD_VAR 0 1
36933: GREATER
36934: OR
36935: PUSH
36936: LD_VAR 0 3
36940: PUSH
36941: LD_VAR 0 1
36945: GREATER
36946: OR
36947: IFFALSE 36951
// exit ;
36949: GO 37247
// if direction then
36951: LD_VAR 0 4
36955: IFFALSE 37019
// begin d := 1 ;
36957: LD_ADDR_VAR 0 9
36961: PUSH
36962: LD_INT 1
36964: ST_TO_ADDR
// if i_from > i_to then
36965: LD_VAR 0 2
36969: PUSH
36970: LD_VAR 0 3
36974: GREATER
36975: IFFALSE 37001
// length := ( array - i_from ) + i_to else
36977: LD_ADDR_VAR 0 11
36981: PUSH
36982: LD_VAR 0 1
36986: PUSH
36987: LD_VAR 0 2
36991: MINUS
36992: PUSH
36993: LD_VAR 0 3
36997: PLUS
36998: ST_TO_ADDR
36999: GO 37017
// length := i_to - i_from ;
37001: LD_ADDR_VAR 0 11
37005: PUSH
37006: LD_VAR 0 3
37010: PUSH
37011: LD_VAR 0 2
37015: MINUS
37016: ST_TO_ADDR
// end else
37017: GO 37080
// begin d := - 1 ;
37019: LD_ADDR_VAR 0 9
37023: PUSH
37024: LD_INT 1
37026: NEG
37027: ST_TO_ADDR
// if i_from > i_to then
37028: LD_VAR 0 2
37032: PUSH
37033: LD_VAR 0 3
37037: GREATER
37038: IFFALSE 37058
// length := i_from - i_to else
37040: LD_ADDR_VAR 0 11
37044: PUSH
37045: LD_VAR 0 2
37049: PUSH
37050: LD_VAR 0 3
37054: MINUS
37055: ST_TO_ADDR
37056: GO 37080
// length := ( array - i_to ) + i_from ;
37058: LD_ADDR_VAR 0 11
37062: PUSH
37063: LD_VAR 0 1
37067: PUSH
37068: LD_VAR 0 3
37072: MINUS
37073: PUSH
37074: LD_VAR 0 2
37078: PLUS
37079: ST_TO_ADDR
// end ; if not length then
37080: LD_VAR 0 11
37084: NOT
37085: IFFALSE 37089
// exit ;
37087: GO 37247
// tmp := array ;
37089: LD_ADDR_VAR 0 10
37093: PUSH
37094: LD_VAR 0 1
37098: ST_TO_ADDR
// for i = 1 to length do
37099: LD_ADDR_VAR 0 6
37103: PUSH
37104: DOUBLE
37105: LD_INT 1
37107: DEC
37108: ST_TO_ADDR
37109: LD_VAR 0 11
37113: PUSH
37114: FOR_TO
37115: IFFALSE 37235
// begin for j = 1 to array do
37117: LD_ADDR_VAR 0 7
37121: PUSH
37122: DOUBLE
37123: LD_INT 1
37125: DEC
37126: ST_TO_ADDR
37127: LD_VAR 0 1
37131: PUSH
37132: FOR_TO
37133: IFFALSE 37221
// begin k := j + d ;
37135: LD_ADDR_VAR 0 8
37139: PUSH
37140: LD_VAR 0 7
37144: PUSH
37145: LD_VAR 0 9
37149: PLUS
37150: ST_TO_ADDR
// if k > array then
37151: LD_VAR 0 8
37155: PUSH
37156: LD_VAR 0 1
37160: GREATER
37161: IFFALSE 37171
// k := 1 ;
37163: LD_ADDR_VAR 0 8
37167: PUSH
37168: LD_INT 1
37170: ST_TO_ADDR
// if not k then
37171: LD_VAR 0 8
37175: NOT
37176: IFFALSE 37188
// k := array ;
37178: LD_ADDR_VAR 0 8
37182: PUSH
37183: LD_VAR 0 1
37187: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
37188: LD_ADDR_VAR 0 10
37192: PUSH
37193: LD_VAR 0 10
37197: PPUSH
37198: LD_VAR 0 8
37202: PPUSH
37203: LD_VAR 0 1
37207: PUSH
37208: LD_VAR 0 7
37212: ARRAY
37213: PPUSH
37214: CALL_OW 1
37218: ST_TO_ADDR
// end ;
37219: GO 37132
37221: POP
37222: POP
// array := tmp ;
37223: LD_ADDR_VAR 0 1
37227: PUSH
37228: LD_VAR 0 10
37232: ST_TO_ADDR
// end ;
37233: GO 37114
37235: POP
37236: POP
// result := array ;
37237: LD_ADDR_VAR 0 5
37241: PUSH
37242: LD_VAR 0 1
37246: ST_TO_ADDR
// end ;
37247: LD_VAR 0 5
37251: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
37252: LD_INT 0
37254: PPUSH
37255: PPUSH
// result := 0 ;
37256: LD_ADDR_VAR 0 3
37260: PUSH
37261: LD_INT 0
37263: ST_TO_ADDR
// if not array or not value in array then
37264: LD_VAR 0 1
37268: NOT
37269: PUSH
37270: LD_VAR 0 2
37274: PUSH
37275: LD_VAR 0 1
37279: IN
37280: NOT
37281: OR
37282: IFFALSE 37286
// exit ;
37284: GO 37340
// for i = 1 to array do
37286: LD_ADDR_VAR 0 4
37290: PUSH
37291: DOUBLE
37292: LD_INT 1
37294: DEC
37295: ST_TO_ADDR
37296: LD_VAR 0 1
37300: PUSH
37301: FOR_TO
37302: IFFALSE 37338
// if value = array [ i ] then
37304: LD_VAR 0 2
37308: PUSH
37309: LD_VAR 0 1
37313: PUSH
37314: LD_VAR 0 4
37318: ARRAY
37319: EQUAL
37320: IFFALSE 37336
// begin result := i ;
37322: LD_ADDR_VAR 0 3
37326: PUSH
37327: LD_VAR 0 4
37331: ST_TO_ADDR
// exit ;
37332: POP
37333: POP
37334: GO 37340
// end ;
37336: GO 37301
37338: POP
37339: POP
// end ;
37340: LD_VAR 0 3
37344: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
37345: LD_INT 0
37347: PPUSH
// vc_chassis := chassis ;
37348: LD_ADDR_OWVAR 37
37352: PUSH
37353: LD_VAR 0 1
37357: ST_TO_ADDR
// vc_engine := engine ;
37358: LD_ADDR_OWVAR 39
37362: PUSH
37363: LD_VAR 0 2
37367: ST_TO_ADDR
// vc_control := control ;
37368: LD_ADDR_OWVAR 38
37372: PUSH
37373: LD_VAR 0 3
37377: ST_TO_ADDR
// vc_weapon := weapon ;
37378: LD_ADDR_OWVAR 40
37382: PUSH
37383: LD_VAR 0 4
37387: ST_TO_ADDR
// vc_fuel_battery := fuel ;
37388: LD_ADDR_OWVAR 41
37392: PUSH
37393: LD_VAR 0 5
37397: ST_TO_ADDR
// end ;
37398: LD_VAR 0 6
37402: RET
// export function WantPlant ( unit ) ; var task ; begin
37403: LD_INT 0
37405: PPUSH
37406: PPUSH
// result := false ;
37407: LD_ADDR_VAR 0 2
37411: PUSH
37412: LD_INT 0
37414: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
37415: LD_ADDR_VAR 0 3
37419: PUSH
37420: LD_VAR 0 1
37424: PPUSH
37425: CALL_OW 437
37429: ST_TO_ADDR
// if task then
37430: LD_VAR 0 3
37434: IFFALSE 37462
// if task [ 1 ] [ 1 ] = p then
37436: LD_VAR 0 3
37440: PUSH
37441: LD_INT 1
37443: ARRAY
37444: PUSH
37445: LD_INT 1
37447: ARRAY
37448: PUSH
37449: LD_STRING p
37451: EQUAL
37452: IFFALSE 37462
// result := true ;
37454: LD_ADDR_VAR 0 2
37458: PUSH
37459: LD_INT 1
37461: ST_TO_ADDR
// end ;
37462: LD_VAR 0 2
37466: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
37467: LD_INT 0
37469: PPUSH
37470: PPUSH
37471: PPUSH
37472: PPUSH
// if pos < 1 then
37473: LD_VAR 0 2
37477: PUSH
37478: LD_INT 1
37480: LESS
37481: IFFALSE 37485
// exit ;
37483: GO 37788
// if pos = 1 then
37485: LD_VAR 0 2
37489: PUSH
37490: LD_INT 1
37492: EQUAL
37493: IFFALSE 37526
// result := Replace ( arr , pos [ 1 ] , value ) else
37495: LD_ADDR_VAR 0 4
37499: PUSH
37500: LD_VAR 0 1
37504: PPUSH
37505: LD_VAR 0 2
37509: PUSH
37510: LD_INT 1
37512: ARRAY
37513: PPUSH
37514: LD_VAR 0 3
37518: PPUSH
37519: CALL_OW 1
37523: ST_TO_ADDR
37524: GO 37788
// begin tmp := arr ;
37526: LD_ADDR_VAR 0 6
37530: PUSH
37531: LD_VAR 0 1
37535: ST_TO_ADDR
// s_arr := [ tmp ] ;
37536: LD_ADDR_VAR 0 7
37540: PUSH
37541: LD_VAR 0 6
37545: PUSH
37546: EMPTY
37547: LIST
37548: ST_TO_ADDR
// for i = 1 to pos - 1 do
37549: LD_ADDR_VAR 0 5
37553: PUSH
37554: DOUBLE
37555: LD_INT 1
37557: DEC
37558: ST_TO_ADDR
37559: LD_VAR 0 2
37563: PUSH
37564: LD_INT 1
37566: MINUS
37567: PUSH
37568: FOR_TO
37569: IFFALSE 37614
// begin tmp := tmp [ pos [ i ] ] ;
37571: LD_ADDR_VAR 0 6
37575: PUSH
37576: LD_VAR 0 6
37580: PUSH
37581: LD_VAR 0 2
37585: PUSH
37586: LD_VAR 0 5
37590: ARRAY
37591: ARRAY
37592: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
37593: LD_ADDR_VAR 0 7
37597: PUSH
37598: LD_VAR 0 7
37602: PUSH
37603: LD_VAR 0 6
37607: PUSH
37608: EMPTY
37609: LIST
37610: ADD
37611: ST_TO_ADDR
// end ;
37612: GO 37568
37614: POP
37615: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
37616: LD_ADDR_VAR 0 6
37620: PUSH
37621: LD_VAR 0 6
37625: PPUSH
37626: LD_VAR 0 2
37630: PUSH
37631: LD_VAR 0 2
37635: ARRAY
37636: PPUSH
37637: LD_VAR 0 3
37641: PPUSH
37642: CALL_OW 1
37646: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
37647: LD_ADDR_VAR 0 7
37651: PUSH
37652: LD_VAR 0 7
37656: PPUSH
37657: LD_VAR 0 7
37661: PPUSH
37662: LD_VAR 0 6
37666: PPUSH
37667: CALL_OW 1
37671: ST_TO_ADDR
// for i = s_arr downto 2 do
37672: LD_ADDR_VAR 0 5
37676: PUSH
37677: DOUBLE
37678: LD_VAR 0 7
37682: INC
37683: ST_TO_ADDR
37684: LD_INT 2
37686: PUSH
37687: FOR_DOWNTO
37688: IFFALSE 37772
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
37690: LD_ADDR_VAR 0 6
37694: PUSH
37695: LD_VAR 0 7
37699: PUSH
37700: LD_VAR 0 5
37704: PUSH
37705: LD_INT 1
37707: MINUS
37708: ARRAY
37709: PPUSH
37710: LD_VAR 0 2
37714: PUSH
37715: LD_VAR 0 5
37719: PUSH
37720: LD_INT 1
37722: MINUS
37723: ARRAY
37724: PPUSH
37725: LD_VAR 0 7
37729: PUSH
37730: LD_VAR 0 5
37734: ARRAY
37735: PPUSH
37736: CALL_OW 1
37740: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
37741: LD_ADDR_VAR 0 7
37745: PUSH
37746: LD_VAR 0 7
37750: PPUSH
37751: LD_VAR 0 5
37755: PUSH
37756: LD_INT 1
37758: MINUS
37759: PPUSH
37760: LD_VAR 0 6
37764: PPUSH
37765: CALL_OW 1
37769: ST_TO_ADDR
// end ;
37770: GO 37687
37772: POP
37773: POP
// result := s_arr [ 1 ] ;
37774: LD_ADDR_VAR 0 4
37778: PUSH
37779: LD_VAR 0 7
37783: PUSH
37784: LD_INT 1
37786: ARRAY
37787: ST_TO_ADDR
// end ; end ;
37788: LD_VAR 0 4
37792: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
37793: LD_INT 0
37795: PPUSH
37796: PPUSH
// if not list then
37797: LD_VAR 0 1
37801: NOT
37802: IFFALSE 37806
// exit ;
37804: GO 37897
// i := list [ pos1 ] ;
37806: LD_ADDR_VAR 0 5
37810: PUSH
37811: LD_VAR 0 1
37815: PUSH
37816: LD_VAR 0 2
37820: ARRAY
37821: ST_TO_ADDR
// if not i then
37822: LD_VAR 0 5
37826: NOT
37827: IFFALSE 37831
// exit ;
37829: GO 37897
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
37831: LD_ADDR_VAR 0 1
37835: PUSH
37836: LD_VAR 0 1
37840: PPUSH
37841: LD_VAR 0 2
37845: PPUSH
37846: LD_VAR 0 1
37850: PUSH
37851: LD_VAR 0 3
37855: ARRAY
37856: PPUSH
37857: CALL_OW 1
37861: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
37862: LD_ADDR_VAR 0 1
37866: PUSH
37867: LD_VAR 0 1
37871: PPUSH
37872: LD_VAR 0 3
37876: PPUSH
37877: LD_VAR 0 5
37881: PPUSH
37882: CALL_OW 1
37886: ST_TO_ADDR
// result := list ;
37887: LD_ADDR_VAR 0 4
37891: PUSH
37892: LD_VAR 0 1
37896: ST_TO_ADDR
// end ;
37897: LD_VAR 0 4
37901: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
37902: LD_INT 0
37904: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
37905: LD_ADDR_VAR 0 5
37909: PUSH
37910: LD_VAR 0 1
37914: PPUSH
37915: CALL_OW 250
37919: PPUSH
37920: LD_VAR 0 1
37924: PPUSH
37925: CALL_OW 251
37929: PPUSH
37930: LD_VAR 0 2
37934: PPUSH
37935: LD_VAR 0 3
37939: PPUSH
37940: LD_VAR 0 4
37944: PPUSH
37945: CALL 37955 0 5
37949: ST_TO_ADDR
// end ;
37950: LD_VAR 0 5
37954: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
37955: LD_INT 0
37957: PPUSH
37958: PPUSH
37959: PPUSH
37960: PPUSH
// if not list then
37961: LD_VAR 0 3
37965: NOT
37966: IFFALSE 37970
// exit ;
37968: GO 38358
// result := [ ] ;
37970: LD_ADDR_VAR 0 6
37974: PUSH
37975: EMPTY
37976: ST_TO_ADDR
// for i in list do
37977: LD_ADDR_VAR 0 7
37981: PUSH
37982: LD_VAR 0 3
37986: PUSH
37987: FOR_IN
37988: IFFALSE 38190
// begin tmp := GetDistUnitXY ( i , x , y ) ;
37990: LD_ADDR_VAR 0 9
37994: PUSH
37995: LD_VAR 0 7
37999: PPUSH
38000: LD_VAR 0 1
38004: PPUSH
38005: LD_VAR 0 2
38009: PPUSH
38010: CALL_OW 297
38014: ST_TO_ADDR
// if not result then
38015: LD_VAR 0 6
38019: NOT
38020: IFFALSE 38046
// result := [ [ i , tmp ] ] else
38022: LD_ADDR_VAR 0 6
38026: PUSH
38027: LD_VAR 0 7
38031: PUSH
38032: LD_VAR 0 9
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: PUSH
38041: EMPTY
38042: LIST
38043: ST_TO_ADDR
38044: GO 38188
// begin if result [ result ] [ 2 ] < tmp then
38046: LD_VAR 0 6
38050: PUSH
38051: LD_VAR 0 6
38055: ARRAY
38056: PUSH
38057: LD_INT 2
38059: ARRAY
38060: PUSH
38061: LD_VAR 0 9
38065: LESS
38066: IFFALSE 38108
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
38068: LD_ADDR_VAR 0 6
38072: PUSH
38073: LD_VAR 0 6
38077: PPUSH
38078: LD_VAR 0 6
38082: PUSH
38083: LD_INT 1
38085: PLUS
38086: PPUSH
38087: LD_VAR 0 7
38091: PUSH
38092: LD_VAR 0 9
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: PPUSH
38101: CALL_OW 2
38105: ST_TO_ADDR
38106: GO 38188
// for j = 1 to result do
38108: LD_ADDR_VAR 0 8
38112: PUSH
38113: DOUBLE
38114: LD_INT 1
38116: DEC
38117: ST_TO_ADDR
38118: LD_VAR 0 6
38122: PUSH
38123: FOR_TO
38124: IFFALSE 38186
// begin if tmp < result [ j ] [ 2 ] then
38126: LD_VAR 0 9
38130: PUSH
38131: LD_VAR 0 6
38135: PUSH
38136: LD_VAR 0 8
38140: ARRAY
38141: PUSH
38142: LD_INT 2
38144: ARRAY
38145: LESS
38146: IFFALSE 38184
// begin result := Insert ( result , j , [ i , tmp ] ) ;
38148: LD_ADDR_VAR 0 6
38152: PUSH
38153: LD_VAR 0 6
38157: PPUSH
38158: LD_VAR 0 8
38162: PPUSH
38163: LD_VAR 0 7
38167: PUSH
38168: LD_VAR 0 9
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: PPUSH
38177: CALL_OW 2
38181: ST_TO_ADDR
// break ;
38182: GO 38186
// end ; end ;
38184: GO 38123
38186: POP
38187: POP
// end ; end ;
38188: GO 37987
38190: POP
38191: POP
// if result and not asc then
38192: LD_VAR 0 6
38196: PUSH
38197: LD_VAR 0 4
38201: NOT
38202: AND
38203: IFFALSE 38278
// begin tmp := result ;
38205: LD_ADDR_VAR 0 9
38209: PUSH
38210: LD_VAR 0 6
38214: ST_TO_ADDR
// for i = tmp downto 1 do
38215: LD_ADDR_VAR 0 7
38219: PUSH
38220: DOUBLE
38221: LD_VAR 0 9
38225: INC
38226: ST_TO_ADDR
38227: LD_INT 1
38229: PUSH
38230: FOR_DOWNTO
38231: IFFALSE 38276
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
38233: LD_ADDR_VAR 0 6
38237: PUSH
38238: LD_VAR 0 6
38242: PPUSH
38243: LD_VAR 0 9
38247: PUSH
38248: LD_VAR 0 7
38252: MINUS
38253: PUSH
38254: LD_INT 1
38256: PLUS
38257: PPUSH
38258: LD_VAR 0 9
38262: PUSH
38263: LD_VAR 0 7
38267: ARRAY
38268: PPUSH
38269: CALL_OW 1
38273: ST_TO_ADDR
38274: GO 38230
38276: POP
38277: POP
// end ; tmp := [ ] ;
38278: LD_ADDR_VAR 0 9
38282: PUSH
38283: EMPTY
38284: ST_TO_ADDR
// if mode then
38285: LD_VAR 0 5
38289: IFFALSE 38358
// begin for i = 1 to result do
38291: LD_ADDR_VAR 0 7
38295: PUSH
38296: DOUBLE
38297: LD_INT 1
38299: DEC
38300: ST_TO_ADDR
38301: LD_VAR 0 6
38305: PUSH
38306: FOR_TO
38307: IFFALSE 38346
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
38309: LD_ADDR_VAR 0 9
38313: PUSH
38314: LD_VAR 0 9
38318: PPUSH
38319: LD_VAR 0 7
38323: PPUSH
38324: LD_VAR 0 6
38328: PUSH
38329: LD_VAR 0 7
38333: ARRAY
38334: PUSH
38335: LD_INT 1
38337: ARRAY
38338: PPUSH
38339: CALL_OW 1
38343: ST_TO_ADDR
38344: GO 38306
38346: POP
38347: POP
// result := tmp ;
38348: LD_ADDR_VAR 0 6
38352: PUSH
38353: LD_VAR 0 9
38357: ST_TO_ADDR
// end ; end ;
38358: LD_VAR 0 6
38362: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
38363: LD_INT 0
38365: PPUSH
38366: PPUSH
38367: PPUSH
38368: PPUSH
38369: PPUSH
38370: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
38371: LD_ADDR_VAR 0 5
38375: PUSH
38376: LD_INT 0
38378: PUSH
38379: LD_INT 0
38381: PUSH
38382: LD_INT 0
38384: PUSH
38385: EMPTY
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: LIST
38391: LIST
38392: ST_TO_ADDR
// if not x or not y then
38393: LD_VAR 0 2
38397: NOT
38398: PUSH
38399: LD_VAR 0 3
38403: NOT
38404: OR
38405: IFFALSE 38409
// exit ;
38407: GO 40059
// if not range then
38409: LD_VAR 0 4
38413: NOT
38414: IFFALSE 38424
// range := 10 ;
38416: LD_ADDR_VAR 0 4
38420: PUSH
38421: LD_INT 10
38423: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38424: LD_ADDR_VAR 0 8
38428: PUSH
38429: LD_INT 81
38431: PUSH
38432: LD_VAR 0 1
38436: PUSH
38437: EMPTY
38438: LIST
38439: LIST
38440: PUSH
38441: LD_INT 92
38443: PUSH
38444: LD_VAR 0 2
38448: PUSH
38449: LD_VAR 0 3
38453: PUSH
38454: LD_VAR 0 4
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: PUSH
38465: LD_INT 3
38467: PUSH
38468: LD_INT 21
38470: PUSH
38471: LD_INT 3
38473: PUSH
38474: EMPTY
38475: LIST
38476: LIST
38477: PUSH
38478: EMPTY
38479: LIST
38480: LIST
38481: PUSH
38482: EMPTY
38483: LIST
38484: LIST
38485: LIST
38486: PPUSH
38487: CALL_OW 69
38491: ST_TO_ADDR
// if not tmp then
38492: LD_VAR 0 8
38496: NOT
38497: IFFALSE 38501
// exit ;
38499: GO 40059
// for i in tmp do
38501: LD_ADDR_VAR 0 6
38505: PUSH
38506: LD_VAR 0 8
38510: PUSH
38511: FOR_IN
38512: IFFALSE 40034
// begin points := [ 0 , 0 , 0 ] ;
38514: LD_ADDR_VAR 0 9
38518: PUSH
38519: LD_INT 0
38521: PUSH
38522: LD_INT 0
38524: PUSH
38525: LD_INT 0
38527: PUSH
38528: EMPTY
38529: LIST
38530: LIST
38531: LIST
38532: ST_TO_ADDR
// bpoints := 1 ;
38533: LD_ADDR_VAR 0 10
38537: PUSH
38538: LD_INT 1
38540: ST_TO_ADDR
// case GetType ( i ) of unit_human :
38541: LD_VAR 0 6
38545: PPUSH
38546: CALL_OW 247
38550: PUSH
38551: LD_INT 1
38553: DOUBLE
38554: EQUAL
38555: IFTRUE 38559
38557: GO 39137
38559: POP
// begin if GetClass ( i ) = 1 then
38560: LD_VAR 0 6
38564: PPUSH
38565: CALL_OW 257
38569: PUSH
38570: LD_INT 1
38572: EQUAL
38573: IFFALSE 38594
// points := [ 10 , 5 , 3 ] ;
38575: LD_ADDR_VAR 0 9
38579: PUSH
38580: LD_INT 10
38582: PUSH
38583: LD_INT 5
38585: PUSH
38586: LD_INT 3
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: LIST
38593: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
38594: LD_VAR 0 6
38598: PPUSH
38599: CALL_OW 257
38603: PUSH
38604: LD_INT 2
38606: PUSH
38607: LD_INT 3
38609: PUSH
38610: LD_INT 4
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: LIST
38617: IN
38618: IFFALSE 38639
// points := [ 3 , 2 , 1 ] ;
38620: LD_ADDR_VAR 0 9
38624: PUSH
38625: LD_INT 3
38627: PUSH
38628: LD_INT 2
38630: PUSH
38631: LD_INT 1
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: LIST
38638: ST_TO_ADDR
// if GetClass ( i ) = 5 then
38639: LD_VAR 0 6
38643: PPUSH
38644: CALL_OW 257
38648: PUSH
38649: LD_INT 5
38651: EQUAL
38652: IFFALSE 38673
// points := [ 130 , 5 , 2 ] ;
38654: LD_ADDR_VAR 0 9
38658: PUSH
38659: LD_INT 130
38661: PUSH
38662: LD_INT 5
38664: PUSH
38665: LD_INT 2
38667: PUSH
38668: EMPTY
38669: LIST
38670: LIST
38671: LIST
38672: ST_TO_ADDR
// if GetClass ( i ) = 8 then
38673: LD_VAR 0 6
38677: PPUSH
38678: CALL_OW 257
38682: PUSH
38683: LD_INT 8
38685: EQUAL
38686: IFFALSE 38707
// points := [ 35 , 35 , 30 ] ;
38688: LD_ADDR_VAR 0 9
38692: PUSH
38693: LD_INT 35
38695: PUSH
38696: LD_INT 35
38698: PUSH
38699: LD_INT 30
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: LIST
38706: ST_TO_ADDR
// if GetClass ( i ) = 9 then
38707: LD_VAR 0 6
38711: PPUSH
38712: CALL_OW 257
38716: PUSH
38717: LD_INT 9
38719: EQUAL
38720: IFFALSE 38741
// points := [ 20 , 55 , 40 ] ;
38722: LD_ADDR_VAR 0 9
38726: PUSH
38727: LD_INT 20
38729: PUSH
38730: LD_INT 55
38732: PUSH
38733: LD_INT 40
38735: PUSH
38736: EMPTY
38737: LIST
38738: LIST
38739: LIST
38740: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
38741: LD_VAR 0 6
38745: PPUSH
38746: CALL_OW 257
38750: PUSH
38751: LD_INT 12
38753: PUSH
38754: LD_INT 16
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: IN
38761: IFFALSE 38782
// points := [ 5 , 3 , 2 ] ;
38763: LD_ADDR_VAR 0 9
38767: PUSH
38768: LD_INT 5
38770: PUSH
38771: LD_INT 3
38773: PUSH
38774: LD_INT 2
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: LIST
38781: ST_TO_ADDR
// if GetClass ( i ) = 17 then
38782: LD_VAR 0 6
38786: PPUSH
38787: CALL_OW 257
38791: PUSH
38792: LD_INT 17
38794: EQUAL
38795: IFFALSE 38816
// points := [ 100 , 50 , 75 ] ;
38797: LD_ADDR_VAR 0 9
38801: PUSH
38802: LD_INT 100
38804: PUSH
38805: LD_INT 50
38807: PUSH
38808: LD_INT 75
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: LIST
38815: ST_TO_ADDR
// if GetClass ( i ) = 15 then
38816: LD_VAR 0 6
38820: PPUSH
38821: CALL_OW 257
38825: PUSH
38826: LD_INT 15
38828: EQUAL
38829: IFFALSE 38850
// points := [ 10 , 5 , 3 ] ;
38831: LD_ADDR_VAR 0 9
38835: PUSH
38836: LD_INT 10
38838: PUSH
38839: LD_INT 5
38841: PUSH
38842: LD_INT 3
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: LIST
38849: ST_TO_ADDR
// if GetClass ( i ) = 14 then
38850: LD_VAR 0 6
38854: PPUSH
38855: CALL_OW 257
38859: PUSH
38860: LD_INT 14
38862: EQUAL
38863: IFFALSE 38884
// points := [ 10 , 0 , 0 ] ;
38865: LD_ADDR_VAR 0 9
38869: PUSH
38870: LD_INT 10
38872: PUSH
38873: LD_INT 0
38875: PUSH
38876: LD_INT 0
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: LIST
38883: ST_TO_ADDR
// if GetClass ( i ) = 11 then
38884: LD_VAR 0 6
38888: PPUSH
38889: CALL_OW 257
38893: PUSH
38894: LD_INT 11
38896: EQUAL
38897: IFFALSE 38918
// points := [ 30 , 10 , 5 ] ;
38899: LD_ADDR_VAR 0 9
38903: PUSH
38904: LD_INT 30
38906: PUSH
38907: LD_INT 10
38909: PUSH
38910: LD_INT 5
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: LIST
38917: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
38918: LD_VAR 0 1
38922: PPUSH
38923: LD_INT 5
38925: PPUSH
38926: CALL_OW 321
38930: PUSH
38931: LD_INT 2
38933: EQUAL
38934: IFFALSE 38951
// bpoints := bpoints * 1.8 ;
38936: LD_ADDR_VAR 0 10
38940: PUSH
38941: LD_VAR 0 10
38945: PUSH
38946: LD_REAL  1.80000000000000E+0000
38949: MUL
38950: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
38951: LD_VAR 0 6
38955: PPUSH
38956: CALL_OW 257
38960: PUSH
38961: LD_INT 1
38963: PUSH
38964: LD_INT 2
38966: PUSH
38967: LD_INT 3
38969: PUSH
38970: LD_INT 4
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: LIST
38977: LIST
38978: IN
38979: PUSH
38980: LD_VAR 0 1
38984: PPUSH
38985: LD_INT 51
38987: PPUSH
38988: CALL_OW 321
38992: PUSH
38993: LD_INT 2
38995: EQUAL
38996: AND
38997: IFFALSE 39014
// bpoints := bpoints * 1.2 ;
38999: LD_ADDR_VAR 0 10
39003: PUSH
39004: LD_VAR 0 10
39008: PUSH
39009: LD_REAL  1.20000000000000E+0000
39012: MUL
39013: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
39014: LD_VAR 0 6
39018: PPUSH
39019: CALL_OW 257
39023: PUSH
39024: LD_INT 5
39026: PUSH
39027: LD_INT 7
39029: PUSH
39030: LD_INT 9
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: LIST
39037: IN
39038: PUSH
39039: LD_VAR 0 1
39043: PPUSH
39044: LD_INT 52
39046: PPUSH
39047: CALL_OW 321
39051: PUSH
39052: LD_INT 2
39054: EQUAL
39055: AND
39056: IFFALSE 39073
// bpoints := bpoints * 1.5 ;
39058: LD_ADDR_VAR 0 10
39062: PUSH
39063: LD_VAR 0 10
39067: PUSH
39068: LD_REAL  1.50000000000000E+0000
39071: MUL
39072: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
39073: LD_VAR 0 1
39077: PPUSH
39078: LD_INT 66
39080: PPUSH
39081: CALL_OW 321
39085: PUSH
39086: LD_INT 2
39088: EQUAL
39089: IFFALSE 39106
// bpoints := bpoints * 1.1 ;
39091: LD_ADDR_VAR 0 10
39095: PUSH
39096: LD_VAR 0 10
39100: PUSH
39101: LD_REAL  1.10000000000000E+0000
39104: MUL
39105: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
39106: LD_ADDR_VAR 0 10
39110: PUSH
39111: LD_VAR 0 10
39115: PUSH
39116: LD_VAR 0 6
39120: PPUSH
39121: LD_INT 1
39123: PPUSH
39124: CALL_OW 259
39128: PUSH
39129: LD_REAL  1.15000000000000E+0000
39132: MUL
39133: MUL
39134: ST_TO_ADDR
// end ; unit_vehicle :
39135: GO 39963
39137: LD_INT 2
39139: DOUBLE
39140: EQUAL
39141: IFTRUE 39145
39143: GO 39951
39145: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
39146: LD_VAR 0 6
39150: PPUSH
39151: CALL_OW 264
39155: PUSH
39156: LD_INT 2
39158: PUSH
39159: LD_INT 42
39161: PUSH
39162: LD_INT 24
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: LIST
39169: IN
39170: IFFALSE 39191
// points := [ 25 , 5 , 3 ] ;
39172: LD_ADDR_VAR 0 9
39176: PUSH
39177: LD_INT 25
39179: PUSH
39180: LD_INT 5
39182: PUSH
39183: LD_INT 3
39185: PUSH
39186: EMPTY
39187: LIST
39188: LIST
39189: LIST
39190: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
39191: LD_VAR 0 6
39195: PPUSH
39196: CALL_OW 264
39200: PUSH
39201: LD_INT 4
39203: PUSH
39204: LD_INT 43
39206: PUSH
39207: LD_INT 25
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: LIST
39214: IN
39215: IFFALSE 39236
// points := [ 40 , 15 , 5 ] ;
39217: LD_ADDR_VAR 0 9
39221: PUSH
39222: LD_INT 40
39224: PUSH
39225: LD_INT 15
39227: PUSH
39228: LD_INT 5
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: LIST
39235: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
39236: LD_VAR 0 6
39240: PPUSH
39241: CALL_OW 264
39245: PUSH
39246: LD_INT 3
39248: PUSH
39249: LD_INT 23
39251: PUSH
39252: EMPTY
39253: LIST
39254: LIST
39255: IN
39256: IFFALSE 39277
// points := [ 7 , 25 , 8 ] ;
39258: LD_ADDR_VAR 0 9
39262: PUSH
39263: LD_INT 7
39265: PUSH
39266: LD_INT 25
39268: PUSH
39269: LD_INT 8
39271: PUSH
39272: EMPTY
39273: LIST
39274: LIST
39275: LIST
39276: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
39277: LD_VAR 0 6
39281: PPUSH
39282: CALL_OW 264
39286: PUSH
39287: LD_INT 5
39289: PUSH
39290: LD_INT 27
39292: PUSH
39293: LD_INT 44
39295: PUSH
39296: EMPTY
39297: LIST
39298: LIST
39299: LIST
39300: IN
39301: IFFALSE 39322
// points := [ 14 , 50 , 16 ] ;
39303: LD_ADDR_VAR 0 9
39307: PUSH
39308: LD_INT 14
39310: PUSH
39311: LD_INT 50
39313: PUSH
39314: LD_INT 16
39316: PUSH
39317: EMPTY
39318: LIST
39319: LIST
39320: LIST
39321: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
39322: LD_VAR 0 6
39326: PPUSH
39327: CALL_OW 264
39331: PUSH
39332: LD_INT 6
39334: PUSH
39335: LD_INT 46
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: IN
39342: IFFALSE 39363
// points := [ 32 , 120 , 70 ] ;
39344: LD_ADDR_VAR 0 9
39348: PUSH
39349: LD_INT 32
39351: PUSH
39352: LD_INT 120
39354: PUSH
39355: LD_INT 70
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: LIST
39362: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
39363: LD_VAR 0 6
39367: PPUSH
39368: CALL_OW 264
39372: PUSH
39373: LD_INT 7
39375: PUSH
39376: LD_INT 28
39378: PUSH
39379: LD_INT 45
39381: PUSH
39382: LD_INT 92
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: LIST
39389: LIST
39390: IN
39391: IFFALSE 39412
// points := [ 35 , 20 , 45 ] ;
39393: LD_ADDR_VAR 0 9
39397: PUSH
39398: LD_INT 35
39400: PUSH
39401: LD_INT 20
39403: PUSH
39404: LD_INT 45
39406: PUSH
39407: EMPTY
39408: LIST
39409: LIST
39410: LIST
39411: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
39412: LD_VAR 0 6
39416: PPUSH
39417: CALL_OW 264
39421: PUSH
39422: LD_INT 47
39424: PUSH
39425: EMPTY
39426: LIST
39427: IN
39428: IFFALSE 39449
// points := [ 67 , 45 , 75 ] ;
39430: LD_ADDR_VAR 0 9
39434: PUSH
39435: LD_INT 67
39437: PUSH
39438: LD_INT 45
39440: PUSH
39441: LD_INT 75
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: LIST
39448: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
39449: LD_VAR 0 6
39453: PPUSH
39454: CALL_OW 264
39458: PUSH
39459: LD_INT 26
39461: PUSH
39462: EMPTY
39463: LIST
39464: IN
39465: IFFALSE 39486
// points := [ 120 , 30 , 80 ] ;
39467: LD_ADDR_VAR 0 9
39471: PUSH
39472: LD_INT 120
39474: PUSH
39475: LD_INT 30
39477: PUSH
39478: LD_INT 80
39480: PUSH
39481: EMPTY
39482: LIST
39483: LIST
39484: LIST
39485: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
39486: LD_VAR 0 6
39490: PPUSH
39491: CALL_OW 264
39495: PUSH
39496: LD_INT 22
39498: PUSH
39499: EMPTY
39500: LIST
39501: IN
39502: IFFALSE 39523
// points := [ 40 , 1 , 1 ] ;
39504: LD_ADDR_VAR 0 9
39508: PUSH
39509: LD_INT 40
39511: PUSH
39512: LD_INT 1
39514: PUSH
39515: LD_INT 1
39517: PUSH
39518: EMPTY
39519: LIST
39520: LIST
39521: LIST
39522: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
39523: LD_VAR 0 6
39527: PPUSH
39528: CALL_OW 264
39532: PUSH
39533: LD_INT 29
39535: PUSH
39536: EMPTY
39537: LIST
39538: IN
39539: IFFALSE 39560
// points := [ 70 , 200 , 400 ] ;
39541: LD_ADDR_VAR 0 9
39545: PUSH
39546: LD_INT 70
39548: PUSH
39549: LD_INT 200
39551: PUSH
39552: LD_INT 400
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: LIST
39559: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
39560: LD_VAR 0 6
39564: PPUSH
39565: CALL_OW 264
39569: PUSH
39570: LD_INT 14
39572: PUSH
39573: LD_INT 53
39575: PUSH
39576: EMPTY
39577: LIST
39578: LIST
39579: IN
39580: IFFALSE 39601
// points := [ 40 , 10 , 20 ] ;
39582: LD_ADDR_VAR 0 9
39586: PUSH
39587: LD_INT 40
39589: PUSH
39590: LD_INT 10
39592: PUSH
39593: LD_INT 20
39595: PUSH
39596: EMPTY
39597: LIST
39598: LIST
39599: LIST
39600: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
39601: LD_VAR 0 6
39605: PPUSH
39606: CALL_OW 264
39610: PUSH
39611: LD_INT 9
39613: PUSH
39614: EMPTY
39615: LIST
39616: IN
39617: IFFALSE 39638
// points := [ 5 , 70 , 20 ] ;
39619: LD_ADDR_VAR 0 9
39623: PUSH
39624: LD_INT 5
39626: PUSH
39627: LD_INT 70
39629: PUSH
39630: LD_INT 20
39632: PUSH
39633: EMPTY
39634: LIST
39635: LIST
39636: LIST
39637: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
39638: LD_VAR 0 6
39642: PPUSH
39643: CALL_OW 264
39647: PUSH
39648: LD_INT 10
39650: PUSH
39651: EMPTY
39652: LIST
39653: IN
39654: IFFALSE 39675
// points := [ 35 , 110 , 70 ] ;
39656: LD_ADDR_VAR 0 9
39660: PUSH
39661: LD_INT 35
39663: PUSH
39664: LD_INT 110
39666: PUSH
39667: LD_INT 70
39669: PUSH
39670: EMPTY
39671: LIST
39672: LIST
39673: LIST
39674: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
39675: LD_VAR 0 6
39679: PPUSH
39680: CALL_OW 265
39684: PUSH
39685: LD_INT 25
39687: EQUAL
39688: IFFALSE 39709
// points := [ 80 , 65 , 100 ] ;
39690: LD_ADDR_VAR 0 9
39694: PUSH
39695: LD_INT 80
39697: PUSH
39698: LD_INT 65
39700: PUSH
39701: LD_INT 100
39703: PUSH
39704: EMPTY
39705: LIST
39706: LIST
39707: LIST
39708: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
39709: LD_VAR 0 6
39713: PPUSH
39714: CALL_OW 263
39718: PUSH
39719: LD_INT 1
39721: EQUAL
39722: IFFALSE 39757
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
39724: LD_ADDR_VAR 0 10
39728: PUSH
39729: LD_VAR 0 10
39733: PUSH
39734: LD_VAR 0 6
39738: PPUSH
39739: CALL_OW 311
39743: PPUSH
39744: LD_INT 3
39746: PPUSH
39747: CALL_OW 259
39751: PUSH
39752: LD_INT 4
39754: MUL
39755: MUL
39756: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
39757: LD_VAR 0 6
39761: PPUSH
39762: CALL_OW 263
39766: PUSH
39767: LD_INT 2
39769: EQUAL
39770: IFFALSE 39821
// begin j := IsControledBy ( i ) ;
39772: LD_ADDR_VAR 0 7
39776: PUSH
39777: LD_VAR 0 6
39781: PPUSH
39782: CALL_OW 312
39786: ST_TO_ADDR
// if j then
39787: LD_VAR 0 7
39791: IFFALSE 39821
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
39793: LD_ADDR_VAR 0 10
39797: PUSH
39798: LD_VAR 0 10
39802: PUSH
39803: LD_VAR 0 7
39807: PPUSH
39808: LD_INT 3
39810: PPUSH
39811: CALL_OW 259
39815: PUSH
39816: LD_INT 3
39818: MUL
39819: MUL
39820: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
39821: LD_VAR 0 6
39825: PPUSH
39826: CALL_OW 264
39830: PUSH
39831: LD_INT 5
39833: PUSH
39834: LD_INT 6
39836: PUSH
39837: LD_INT 46
39839: PUSH
39840: LD_INT 44
39842: PUSH
39843: LD_INT 47
39845: PUSH
39846: LD_INT 45
39848: PUSH
39849: LD_INT 28
39851: PUSH
39852: LD_INT 7
39854: PUSH
39855: LD_INT 27
39857: PUSH
39858: LD_INT 29
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: LIST
39869: LIST
39870: LIST
39871: LIST
39872: IN
39873: PUSH
39874: LD_VAR 0 1
39878: PPUSH
39879: LD_INT 52
39881: PPUSH
39882: CALL_OW 321
39886: PUSH
39887: LD_INT 2
39889: EQUAL
39890: AND
39891: IFFALSE 39908
// bpoints := bpoints * 1.2 ;
39893: LD_ADDR_VAR 0 10
39897: PUSH
39898: LD_VAR 0 10
39902: PUSH
39903: LD_REAL  1.20000000000000E+0000
39906: MUL
39907: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
39908: LD_VAR 0 6
39912: PPUSH
39913: CALL_OW 264
39917: PUSH
39918: LD_INT 6
39920: PUSH
39921: LD_INT 46
39923: PUSH
39924: LD_INT 47
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: LIST
39931: IN
39932: IFFALSE 39949
// bpoints := bpoints * 1.2 ;
39934: LD_ADDR_VAR 0 10
39938: PUSH
39939: LD_VAR 0 10
39943: PUSH
39944: LD_REAL  1.20000000000000E+0000
39947: MUL
39948: ST_TO_ADDR
// end ; unit_building :
39949: GO 39963
39951: LD_INT 3
39953: DOUBLE
39954: EQUAL
39955: IFTRUE 39959
39957: GO 39962
39959: POP
// ; end ;
39960: GO 39963
39962: POP
// for j = 1 to 3 do
39963: LD_ADDR_VAR 0 7
39967: PUSH
39968: DOUBLE
39969: LD_INT 1
39971: DEC
39972: ST_TO_ADDR
39973: LD_INT 3
39975: PUSH
39976: FOR_TO
39977: IFFALSE 40030
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
39979: LD_ADDR_VAR 0 5
39983: PUSH
39984: LD_VAR 0 5
39988: PPUSH
39989: LD_VAR 0 7
39993: PPUSH
39994: LD_VAR 0 5
39998: PUSH
39999: LD_VAR 0 7
40003: ARRAY
40004: PUSH
40005: LD_VAR 0 9
40009: PUSH
40010: LD_VAR 0 7
40014: ARRAY
40015: PUSH
40016: LD_VAR 0 10
40020: MUL
40021: PLUS
40022: PPUSH
40023: CALL_OW 1
40027: ST_TO_ADDR
40028: GO 39976
40030: POP
40031: POP
// end ;
40032: GO 38511
40034: POP
40035: POP
// result := Replace ( result , 4 , tmp ) ;
40036: LD_ADDR_VAR 0 5
40040: PUSH
40041: LD_VAR 0 5
40045: PPUSH
40046: LD_INT 4
40048: PPUSH
40049: LD_VAR 0 8
40053: PPUSH
40054: CALL_OW 1
40058: ST_TO_ADDR
// end ;
40059: LD_VAR 0 5
40063: RET
// export function DangerAtRange ( unit , range ) ; begin
40064: LD_INT 0
40066: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
40067: LD_ADDR_VAR 0 3
40071: PUSH
40072: LD_VAR 0 1
40076: PPUSH
40077: CALL_OW 255
40081: PPUSH
40082: LD_VAR 0 1
40086: PPUSH
40087: CALL_OW 250
40091: PPUSH
40092: LD_VAR 0 1
40096: PPUSH
40097: CALL_OW 251
40101: PPUSH
40102: LD_VAR 0 2
40106: PPUSH
40107: CALL 38363 0 4
40111: ST_TO_ADDR
// end ;
40112: LD_VAR 0 3
40116: RET
// export function DangerInArea ( side , area ) ; begin
40117: LD_INT 0
40119: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
40120: LD_ADDR_VAR 0 3
40124: PUSH
40125: LD_VAR 0 2
40129: PPUSH
40130: LD_INT 81
40132: PUSH
40133: LD_VAR 0 1
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PPUSH
40142: CALL_OW 70
40146: ST_TO_ADDR
// end ;
40147: LD_VAR 0 3
40151: RET
// export function IsExtension ( b ) ; begin
40152: LD_INT 0
40154: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
40155: LD_ADDR_VAR 0 2
40159: PUSH
40160: LD_VAR 0 1
40164: PUSH
40165: LD_INT 23
40167: PUSH
40168: LD_INT 20
40170: PUSH
40171: LD_INT 22
40173: PUSH
40174: LD_INT 17
40176: PUSH
40177: LD_INT 24
40179: PUSH
40180: LD_INT 21
40182: PUSH
40183: LD_INT 19
40185: PUSH
40186: LD_INT 16
40188: PUSH
40189: LD_INT 25
40191: PUSH
40192: LD_INT 18
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: LIST
40199: LIST
40200: LIST
40201: LIST
40202: LIST
40203: LIST
40204: LIST
40205: LIST
40206: IN
40207: ST_TO_ADDR
// end ;
40208: LD_VAR 0 2
40212: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
40213: LD_INT 0
40215: PPUSH
40216: PPUSH
40217: PPUSH
// result := [ ] ;
40218: LD_ADDR_VAR 0 4
40222: PUSH
40223: EMPTY
40224: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
40225: LD_ADDR_VAR 0 5
40229: PUSH
40230: LD_VAR 0 2
40234: PPUSH
40235: LD_INT 21
40237: PUSH
40238: LD_INT 3
40240: PUSH
40241: EMPTY
40242: LIST
40243: LIST
40244: PPUSH
40245: CALL_OW 70
40249: ST_TO_ADDR
// if not tmp then
40250: LD_VAR 0 5
40254: NOT
40255: IFFALSE 40259
// exit ;
40257: GO 40323
// if checkLink then
40259: LD_VAR 0 3
40263: IFFALSE 40313
// begin for i in tmp do
40265: LD_ADDR_VAR 0 6
40269: PUSH
40270: LD_VAR 0 5
40274: PUSH
40275: FOR_IN
40276: IFFALSE 40311
// if GetBase ( i ) <> base then
40278: LD_VAR 0 6
40282: PPUSH
40283: CALL_OW 274
40287: PUSH
40288: LD_VAR 0 1
40292: NONEQUAL
40293: IFFALSE 40309
// ComLinkToBase ( base , i ) ;
40295: LD_VAR 0 1
40299: PPUSH
40300: LD_VAR 0 6
40304: PPUSH
40305: CALL_OW 169
40309: GO 40275
40311: POP
40312: POP
// end ; result := tmp ;
40313: LD_ADDR_VAR 0 4
40317: PUSH
40318: LD_VAR 0 5
40322: ST_TO_ADDR
// end ;
40323: LD_VAR 0 4
40327: RET
// export function ComComplete ( units , b ) ; var i ; begin
40328: LD_INT 0
40330: PPUSH
40331: PPUSH
// if not units then
40332: LD_VAR 0 1
40336: NOT
40337: IFFALSE 40341
// exit ;
40339: GO 40431
// for i in units do
40341: LD_ADDR_VAR 0 4
40345: PUSH
40346: LD_VAR 0 1
40350: PUSH
40351: FOR_IN
40352: IFFALSE 40429
// if BuildingStatus ( b ) = bs_build then
40354: LD_VAR 0 2
40358: PPUSH
40359: CALL_OW 461
40363: PUSH
40364: LD_INT 1
40366: EQUAL
40367: IFFALSE 40427
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
40369: LD_VAR 0 4
40373: PPUSH
40374: LD_STRING h
40376: PUSH
40377: LD_VAR 0 2
40381: PPUSH
40382: CALL_OW 250
40386: PUSH
40387: LD_VAR 0 2
40391: PPUSH
40392: CALL_OW 251
40396: PUSH
40397: LD_VAR 0 2
40401: PUSH
40402: LD_INT 0
40404: PUSH
40405: LD_INT 0
40407: PUSH
40408: LD_INT 0
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: LIST
40415: LIST
40416: LIST
40417: LIST
40418: LIST
40419: PUSH
40420: EMPTY
40421: LIST
40422: PPUSH
40423: CALL_OW 446
40427: GO 40351
40429: POP
40430: POP
// end ;
40431: LD_VAR 0 3
40435: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
40436: LD_INT 0
40438: PPUSH
40439: PPUSH
40440: PPUSH
40441: PPUSH
40442: PPUSH
40443: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
40444: LD_VAR 0 1
40448: NOT
40449: PUSH
40450: LD_VAR 0 1
40454: PPUSH
40455: CALL_OW 263
40459: PUSH
40460: LD_INT 2
40462: NONEQUAL
40463: OR
40464: IFFALSE 40468
// exit ;
40466: GO 40784
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
40468: LD_ADDR_VAR 0 6
40472: PUSH
40473: LD_INT 22
40475: PUSH
40476: LD_VAR 0 1
40480: PPUSH
40481: CALL_OW 255
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PUSH
40490: LD_INT 2
40492: PUSH
40493: LD_INT 30
40495: PUSH
40496: LD_INT 36
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: PUSH
40503: LD_INT 34
40505: PUSH
40506: LD_INT 31
40508: PUSH
40509: EMPTY
40510: LIST
40511: LIST
40512: PUSH
40513: EMPTY
40514: LIST
40515: LIST
40516: LIST
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: PPUSH
40522: CALL_OW 69
40526: ST_TO_ADDR
// if not tmp then
40527: LD_VAR 0 6
40531: NOT
40532: IFFALSE 40536
// exit ;
40534: GO 40784
// result := [ ] ;
40536: LD_ADDR_VAR 0 2
40540: PUSH
40541: EMPTY
40542: ST_TO_ADDR
// for i in tmp do
40543: LD_ADDR_VAR 0 3
40547: PUSH
40548: LD_VAR 0 6
40552: PUSH
40553: FOR_IN
40554: IFFALSE 40625
// begin t := UnitsInside ( i ) ;
40556: LD_ADDR_VAR 0 4
40560: PUSH
40561: LD_VAR 0 3
40565: PPUSH
40566: CALL_OW 313
40570: ST_TO_ADDR
// if t then
40571: LD_VAR 0 4
40575: IFFALSE 40623
// for j in t do
40577: LD_ADDR_VAR 0 7
40581: PUSH
40582: LD_VAR 0 4
40586: PUSH
40587: FOR_IN
40588: IFFALSE 40621
// result := Replace ( result , result + 1 , j ) ;
40590: LD_ADDR_VAR 0 2
40594: PUSH
40595: LD_VAR 0 2
40599: PPUSH
40600: LD_VAR 0 2
40604: PUSH
40605: LD_INT 1
40607: PLUS
40608: PPUSH
40609: LD_VAR 0 7
40613: PPUSH
40614: CALL_OW 1
40618: ST_TO_ADDR
40619: GO 40587
40621: POP
40622: POP
// end ;
40623: GO 40553
40625: POP
40626: POP
// if not result then
40627: LD_VAR 0 2
40631: NOT
40632: IFFALSE 40636
// exit ;
40634: GO 40784
// mech := result [ 1 ] ;
40636: LD_ADDR_VAR 0 5
40640: PUSH
40641: LD_VAR 0 2
40645: PUSH
40646: LD_INT 1
40648: ARRAY
40649: ST_TO_ADDR
// if result > 1 then
40650: LD_VAR 0 2
40654: PUSH
40655: LD_INT 1
40657: GREATER
40658: IFFALSE 40770
// begin for i = 2 to result do
40660: LD_ADDR_VAR 0 3
40664: PUSH
40665: DOUBLE
40666: LD_INT 2
40668: DEC
40669: ST_TO_ADDR
40670: LD_VAR 0 2
40674: PUSH
40675: FOR_TO
40676: IFFALSE 40768
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
40678: LD_ADDR_VAR 0 4
40682: PUSH
40683: LD_VAR 0 2
40687: PUSH
40688: LD_VAR 0 3
40692: ARRAY
40693: PPUSH
40694: LD_INT 3
40696: PPUSH
40697: CALL_OW 259
40701: PUSH
40702: LD_VAR 0 2
40706: PUSH
40707: LD_VAR 0 3
40711: ARRAY
40712: PPUSH
40713: CALL_OW 432
40717: MINUS
40718: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
40719: LD_VAR 0 4
40723: PUSH
40724: LD_VAR 0 5
40728: PPUSH
40729: LD_INT 3
40731: PPUSH
40732: CALL_OW 259
40736: PUSH
40737: LD_VAR 0 5
40741: PPUSH
40742: CALL_OW 432
40746: MINUS
40747: GREATEREQUAL
40748: IFFALSE 40766
// mech := result [ i ] ;
40750: LD_ADDR_VAR 0 5
40754: PUSH
40755: LD_VAR 0 2
40759: PUSH
40760: LD_VAR 0 3
40764: ARRAY
40765: ST_TO_ADDR
// end ;
40766: GO 40675
40768: POP
40769: POP
// end ; ComLinkTo ( vehicle , mech ) ;
40770: LD_VAR 0 1
40774: PPUSH
40775: LD_VAR 0 5
40779: PPUSH
40780: CALL_OW 135
// end ;
40784: LD_VAR 0 2
40788: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
40789: LD_INT 0
40791: PPUSH
40792: PPUSH
40793: PPUSH
40794: PPUSH
40795: PPUSH
40796: PPUSH
40797: PPUSH
40798: PPUSH
40799: PPUSH
40800: PPUSH
40801: PPUSH
40802: PPUSH
40803: PPUSH
// result := [ ] ;
40804: LD_ADDR_VAR 0 7
40808: PUSH
40809: EMPTY
40810: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
40811: LD_VAR 0 1
40815: PPUSH
40816: CALL_OW 266
40820: PUSH
40821: LD_INT 0
40823: PUSH
40824: LD_INT 1
40826: PUSH
40827: EMPTY
40828: LIST
40829: LIST
40830: IN
40831: NOT
40832: IFFALSE 40836
// exit ;
40834: GO 42470
// if name then
40836: LD_VAR 0 3
40840: IFFALSE 40856
// SetBName ( base_dep , name ) ;
40842: LD_VAR 0 1
40846: PPUSH
40847: LD_VAR 0 3
40851: PPUSH
40852: CALL_OW 500
// base := GetBase ( base_dep ) ;
40856: LD_ADDR_VAR 0 15
40860: PUSH
40861: LD_VAR 0 1
40865: PPUSH
40866: CALL_OW 274
40870: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
40871: LD_ADDR_VAR 0 16
40875: PUSH
40876: LD_VAR 0 1
40880: PPUSH
40881: CALL_OW 255
40885: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
40886: LD_ADDR_VAR 0 17
40890: PUSH
40891: LD_VAR 0 1
40895: PPUSH
40896: CALL_OW 248
40900: ST_TO_ADDR
// if sources then
40901: LD_VAR 0 5
40905: IFFALSE 40952
// for i = 1 to 3 do
40907: LD_ADDR_VAR 0 8
40911: PUSH
40912: DOUBLE
40913: LD_INT 1
40915: DEC
40916: ST_TO_ADDR
40917: LD_INT 3
40919: PUSH
40920: FOR_TO
40921: IFFALSE 40950
// AddResourceType ( base , i , sources [ i ] ) ;
40923: LD_VAR 0 15
40927: PPUSH
40928: LD_VAR 0 8
40932: PPUSH
40933: LD_VAR 0 5
40937: PUSH
40938: LD_VAR 0 8
40942: ARRAY
40943: PPUSH
40944: CALL_OW 276
40948: GO 40920
40950: POP
40951: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
40952: LD_ADDR_VAR 0 18
40956: PUSH
40957: LD_VAR 0 15
40961: PPUSH
40962: LD_VAR 0 2
40966: PPUSH
40967: LD_INT 1
40969: PPUSH
40970: CALL 40213 0 3
40974: ST_TO_ADDR
// InitHc ;
40975: CALL_OW 19
// InitUc ;
40979: CALL_OW 18
// uc_side := side ;
40983: LD_ADDR_OWVAR 20
40987: PUSH
40988: LD_VAR 0 16
40992: ST_TO_ADDR
// uc_nation := nation ;
40993: LD_ADDR_OWVAR 21
40997: PUSH
40998: LD_VAR 0 17
41002: ST_TO_ADDR
// if buildings then
41003: LD_VAR 0 18
41007: IFFALSE 42329
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
41009: LD_ADDR_VAR 0 19
41013: PUSH
41014: LD_VAR 0 18
41018: PPUSH
41019: LD_INT 2
41021: PUSH
41022: LD_INT 30
41024: PUSH
41025: LD_INT 29
41027: PUSH
41028: EMPTY
41029: LIST
41030: LIST
41031: PUSH
41032: LD_INT 30
41034: PUSH
41035: LD_INT 30
41037: PUSH
41038: EMPTY
41039: LIST
41040: LIST
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: LIST
41046: PPUSH
41047: CALL_OW 72
41051: ST_TO_ADDR
// if tmp then
41052: LD_VAR 0 19
41056: IFFALSE 41104
// for i in tmp do
41058: LD_ADDR_VAR 0 8
41062: PUSH
41063: LD_VAR 0 19
41067: PUSH
41068: FOR_IN
41069: IFFALSE 41102
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
41071: LD_VAR 0 8
41075: PPUSH
41076: CALL_OW 250
41080: PPUSH
41081: LD_VAR 0 8
41085: PPUSH
41086: CALL_OW 251
41090: PPUSH
41091: LD_VAR 0 16
41095: PPUSH
41096: CALL_OW 441
41100: GO 41068
41102: POP
41103: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
41104: LD_VAR 0 18
41108: PPUSH
41109: LD_INT 2
41111: PUSH
41112: LD_INT 30
41114: PUSH
41115: LD_INT 32
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: PUSH
41122: LD_INT 30
41124: PUSH
41125: LD_INT 33
41127: PUSH
41128: EMPTY
41129: LIST
41130: LIST
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: LIST
41136: PPUSH
41137: CALL_OW 72
41141: IFFALSE 41229
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
41143: LD_ADDR_VAR 0 8
41147: PUSH
41148: LD_VAR 0 18
41152: PPUSH
41153: LD_INT 2
41155: PUSH
41156: LD_INT 30
41158: PUSH
41159: LD_INT 32
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: PUSH
41166: LD_INT 30
41168: PUSH
41169: LD_INT 33
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: PUSH
41176: EMPTY
41177: LIST
41178: LIST
41179: LIST
41180: PPUSH
41181: CALL_OW 72
41185: PUSH
41186: FOR_IN
41187: IFFALSE 41227
// begin if not GetBWeapon ( i ) then
41189: LD_VAR 0 8
41193: PPUSH
41194: CALL_OW 269
41198: NOT
41199: IFFALSE 41225
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
41201: LD_VAR 0 8
41205: PPUSH
41206: LD_VAR 0 8
41210: PPUSH
41211: LD_VAR 0 2
41215: PPUSH
41216: CALL 42475 0 2
41220: PPUSH
41221: CALL_OW 431
// end ;
41225: GO 41186
41227: POP
41228: POP
// end ; for i = 1 to personel do
41229: LD_ADDR_VAR 0 8
41233: PUSH
41234: DOUBLE
41235: LD_INT 1
41237: DEC
41238: ST_TO_ADDR
41239: LD_VAR 0 6
41243: PUSH
41244: FOR_TO
41245: IFFALSE 42309
// begin if i > 4 then
41247: LD_VAR 0 8
41251: PUSH
41252: LD_INT 4
41254: GREATER
41255: IFFALSE 41259
// break ;
41257: GO 42309
// case i of 1 :
41259: LD_VAR 0 8
41263: PUSH
41264: LD_INT 1
41266: DOUBLE
41267: EQUAL
41268: IFTRUE 41272
41270: GO 41352
41272: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
41273: LD_ADDR_VAR 0 12
41277: PUSH
41278: LD_VAR 0 18
41282: PPUSH
41283: LD_INT 22
41285: PUSH
41286: LD_VAR 0 16
41290: PUSH
41291: EMPTY
41292: LIST
41293: LIST
41294: PUSH
41295: LD_INT 58
41297: PUSH
41298: EMPTY
41299: LIST
41300: PUSH
41301: LD_INT 2
41303: PUSH
41304: LD_INT 30
41306: PUSH
41307: LD_INT 32
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: PUSH
41314: LD_INT 30
41316: PUSH
41317: LD_INT 4
41319: PUSH
41320: EMPTY
41321: LIST
41322: LIST
41323: PUSH
41324: LD_INT 30
41326: PUSH
41327: LD_INT 5
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: PUSH
41334: EMPTY
41335: LIST
41336: LIST
41337: LIST
41338: LIST
41339: PUSH
41340: EMPTY
41341: LIST
41342: LIST
41343: LIST
41344: PPUSH
41345: CALL_OW 72
41349: ST_TO_ADDR
41350: GO 41574
41352: LD_INT 2
41354: DOUBLE
41355: EQUAL
41356: IFTRUE 41360
41358: GO 41422
41360: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
41361: LD_ADDR_VAR 0 12
41365: PUSH
41366: LD_VAR 0 18
41370: PPUSH
41371: LD_INT 22
41373: PUSH
41374: LD_VAR 0 16
41378: PUSH
41379: EMPTY
41380: LIST
41381: LIST
41382: PUSH
41383: LD_INT 2
41385: PUSH
41386: LD_INT 30
41388: PUSH
41389: LD_INT 0
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: LD_INT 30
41398: PUSH
41399: LD_INT 1
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: LIST
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PPUSH
41415: CALL_OW 72
41419: ST_TO_ADDR
41420: GO 41574
41422: LD_INT 3
41424: DOUBLE
41425: EQUAL
41426: IFTRUE 41430
41428: GO 41492
41430: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
41431: LD_ADDR_VAR 0 12
41435: PUSH
41436: LD_VAR 0 18
41440: PPUSH
41441: LD_INT 22
41443: PUSH
41444: LD_VAR 0 16
41448: PUSH
41449: EMPTY
41450: LIST
41451: LIST
41452: PUSH
41453: LD_INT 2
41455: PUSH
41456: LD_INT 30
41458: PUSH
41459: LD_INT 2
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: PUSH
41466: LD_INT 30
41468: PUSH
41469: LD_INT 3
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: PUSH
41476: EMPTY
41477: LIST
41478: LIST
41479: LIST
41480: PUSH
41481: EMPTY
41482: LIST
41483: LIST
41484: PPUSH
41485: CALL_OW 72
41489: ST_TO_ADDR
41490: GO 41574
41492: LD_INT 4
41494: DOUBLE
41495: EQUAL
41496: IFTRUE 41500
41498: GO 41573
41500: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
41501: LD_ADDR_VAR 0 12
41505: PUSH
41506: LD_VAR 0 18
41510: PPUSH
41511: LD_INT 22
41513: PUSH
41514: LD_VAR 0 16
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: PUSH
41523: LD_INT 2
41525: PUSH
41526: LD_INT 30
41528: PUSH
41529: LD_INT 6
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: PUSH
41536: LD_INT 30
41538: PUSH
41539: LD_INT 7
41541: PUSH
41542: EMPTY
41543: LIST
41544: LIST
41545: PUSH
41546: LD_INT 30
41548: PUSH
41549: LD_INT 8
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: LIST
41560: LIST
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: PPUSH
41566: CALL_OW 72
41570: ST_TO_ADDR
41571: GO 41574
41573: POP
// if i = 1 then
41574: LD_VAR 0 8
41578: PUSH
41579: LD_INT 1
41581: EQUAL
41582: IFFALSE 41693
// begin tmp := [ ] ;
41584: LD_ADDR_VAR 0 19
41588: PUSH
41589: EMPTY
41590: ST_TO_ADDR
// for j in f do
41591: LD_ADDR_VAR 0 9
41595: PUSH
41596: LD_VAR 0 12
41600: PUSH
41601: FOR_IN
41602: IFFALSE 41675
// if GetBType ( j ) = b_bunker then
41604: LD_VAR 0 9
41608: PPUSH
41609: CALL_OW 266
41613: PUSH
41614: LD_INT 32
41616: EQUAL
41617: IFFALSE 41644
// tmp := Insert ( tmp , 1 , j ) else
41619: LD_ADDR_VAR 0 19
41623: PUSH
41624: LD_VAR 0 19
41628: PPUSH
41629: LD_INT 1
41631: PPUSH
41632: LD_VAR 0 9
41636: PPUSH
41637: CALL_OW 2
41641: ST_TO_ADDR
41642: GO 41673
// tmp := Insert ( tmp , tmp + 1 , j ) ;
41644: LD_ADDR_VAR 0 19
41648: PUSH
41649: LD_VAR 0 19
41653: PPUSH
41654: LD_VAR 0 19
41658: PUSH
41659: LD_INT 1
41661: PLUS
41662: PPUSH
41663: LD_VAR 0 9
41667: PPUSH
41668: CALL_OW 2
41672: ST_TO_ADDR
41673: GO 41601
41675: POP
41676: POP
// if tmp then
41677: LD_VAR 0 19
41681: IFFALSE 41693
// f := tmp ;
41683: LD_ADDR_VAR 0 12
41687: PUSH
41688: LD_VAR 0 19
41692: ST_TO_ADDR
// end ; x := personel [ i ] ;
41693: LD_ADDR_VAR 0 13
41697: PUSH
41698: LD_VAR 0 6
41702: PUSH
41703: LD_VAR 0 8
41707: ARRAY
41708: ST_TO_ADDR
// if x = - 1 then
41709: LD_VAR 0 13
41713: PUSH
41714: LD_INT 1
41716: NEG
41717: EQUAL
41718: IFFALSE 41927
// begin for j in f do
41720: LD_ADDR_VAR 0 9
41724: PUSH
41725: LD_VAR 0 12
41729: PUSH
41730: FOR_IN
41731: IFFALSE 41923
// repeat InitHc ;
41733: CALL_OW 19
// if GetBType ( j ) = b_barracks then
41737: LD_VAR 0 9
41741: PPUSH
41742: CALL_OW 266
41746: PUSH
41747: LD_INT 5
41749: EQUAL
41750: IFFALSE 41820
// begin if UnitsInside ( j ) < 3 then
41752: LD_VAR 0 9
41756: PPUSH
41757: CALL_OW 313
41761: PUSH
41762: LD_INT 3
41764: LESS
41765: IFFALSE 41801
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41767: LD_INT 0
41769: PPUSH
41770: LD_INT 5
41772: PUSH
41773: LD_INT 8
41775: PUSH
41776: LD_INT 9
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: LIST
41783: PUSH
41784: LD_VAR 0 17
41788: ARRAY
41789: PPUSH
41790: LD_VAR 0 4
41794: PPUSH
41795: CALL_OW 380
41799: GO 41818
// PrepareHuman ( false , i , skill ) ;
41801: LD_INT 0
41803: PPUSH
41804: LD_VAR 0 8
41808: PPUSH
41809: LD_VAR 0 4
41813: PPUSH
41814: CALL_OW 380
// end else
41818: GO 41837
// PrepareHuman ( false , i , skill ) ;
41820: LD_INT 0
41822: PPUSH
41823: LD_VAR 0 8
41827: PPUSH
41828: LD_VAR 0 4
41832: PPUSH
41833: CALL_OW 380
// un := CreateHuman ;
41837: LD_ADDR_VAR 0 14
41841: PUSH
41842: CALL_OW 44
41846: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41847: LD_ADDR_VAR 0 7
41851: PUSH
41852: LD_VAR 0 7
41856: PPUSH
41857: LD_INT 1
41859: PPUSH
41860: LD_VAR 0 14
41864: PPUSH
41865: CALL_OW 2
41869: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
41870: LD_VAR 0 14
41874: PPUSH
41875: LD_VAR 0 9
41879: PPUSH
41880: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
41884: LD_VAR 0 9
41888: PPUSH
41889: CALL_OW 313
41893: PUSH
41894: LD_INT 6
41896: EQUAL
41897: PUSH
41898: LD_VAR 0 9
41902: PPUSH
41903: CALL_OW 266
41907: PUSH
41908: LD_INT 32
41910: PUSH
41911: LD_INT 31
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: IN
41918: OR
41919: IFFALSE 41733
41921: GO 41730
41923: POP
41924: POP
// end else
41925: GO 42307
// for j = 1 to x do
41927: LD_ADDR_VAR 0 9
41931: PUSH
41932: DOUBLE
41933: LD_INT 1
41935: DEC
41936: ST_TO_ADDR
41937: LD_VAR 0 13
41941: PUSH
41942: FOR_TO
41943: IFFALSE 42305
// begin InitHc ;
41945: CALL_OW 19
// if not f then
41949: LD_VAR 0 12
41953: NOT
41954: IFFALSE 42043
// begin PrepareHuman ( false , i , skill ) ;
41956: LD_INT 0
41958: PPUSH
41959: LD_VAR 0 8
41963: PPUSH
41964: LD_VAR 0 4
41968: PPUSH
41969: CALL_OW 380
// un := CreateHuman ;
41973: LD_ADDR_VAR 0 14
41977: PUSH
41978: CALL_OW 44
41982: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41983: LD_ADDR_VAR 0 7
41987: PUSH
41988: LD_VAR 0 7
41992: PPUSH
41993: LD_INT 1
41995: PPUSH
41996: LD_VAR 0 14
42000: PPUSH
42001: CALL_OW 2
42005: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42006: LD_VAR 0 14
42010: PPUSH
42011: LD_VAR 0 1
42015: PPUSH
42016: CALL_OW 250
42020: PPUSH
42021: LD_VAR 0 1
42025: PPUSH
42026: CALL_OW 251
42030: PPUSH
42031: LD_INT 10
42033: PPUSH
42034: LD_INT 0
42036: PPUSH
42037: CALL_OW 50
// continue ;
42041: GO 41942
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
42043: LD_VAR 0 12
42047: PUSH
42048: LD_INT 1
42050: ARRAY
42051: PPUSH
42052: CALL_OW 313
42056: PUSH
42057: LD_VAR 0 12
42061: PUSH
42062: LD_INT 1
42064: ARRAY
42065: PPUSH
42066: CALL_OW 266
42070: PUSH
42071: LD_INT 32
42073: PUSH
42074: LD_INT 31
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: IN
42081: AND
42082: PUSH
42083: LD_VAR 0 12
42087: PUSH
42088: LD_INT 1
42090: ARRAY
42091: PPUSH
42092: CALL_OW 313
42096: PUSH
42097: LD_INT 6
42099: EQUAL
42100: OR
42101: IFFALSE 42121
// f := Delete ( f , 1 ) ;
42103: LD_ADDR_VAR 0 12
42107: PUSH
42108: LD_VAR 0 12
42112: PPUSH
42113: LD_INT 1
42115: PPUSH
42116: CALL_OW 3
42120: ST_TO_ADDR
// if not f then
42121: LD_VAR 0 12
42125: NOT
42126: IFFALSE 42144
// begin x := x + 2 ;
42128: LD_ADDR_VAR 0 13
42132: PUSH
42133: LD_VAR 0 13
42137: PUSH
42138: LD_INT 2
42140: PLUS
42141: ST_TO_ADDR
// continue ;
42142: GO 41942
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
42144: LD_VAR 0 12
42148: PUSH
42149: LD_INT 1
42151: ARRAY
42152: PPUSH
42153: CALL_OW 266
42157: PUSH
42158: LD_INT 5
42160: EQUAL
42161: IFFALSE 42235
// begin if UnitsInside ( f [ 1 ] ) < 3 then
42163: LD_VAR 0 12
42167: PUSH
42168: LD_INT 1
42170: ARRAY
42171: PPUSH
42172: CALL_OW 313
42176: PUSH
42177: LD_INT 3
42179: LESS
42180: IFFALSE 42216
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42182: LD_INT 0
42184: PPUSH
42185: LD_INT 5
42187: PUSH
42188: LD_INT 8
42190: PUSH
42191: LD_INT 9
42193: PUSH
42194: EMPTY
42195: LIST
42196: LIST
42197: LIST
42198: PUSH
42199: LD_VAR 0 17
42203: ARRAY
42204: PPUSH
42205: LD_VAR 0 4
42209: PPUSH
42210: CALL_OW 380
42214: GO 42233
// PrepareHuman ( false , i , skill ) ;
42216: LD_INT 0
42218: PPUSH
42219: LD_VAR 0 8
42223: PPUSH
42224: LD_VAR 0 4
42228: PPUSH
42229: CALL_OW 380
// end else
42233: GO 42252
// PrepareHuman ( false , i , skill ) ;
42235: LD_INT 0
42237: PPUSH
42238: LD_VAR 0 8
42242: PPUSH
42243: LD_VAR 0 4
42247: PPUSH
42248: CALL_OW 380
// un := CreateHuman ;
42252: LD_ADDR_VAR 0 14
42256: PUSH
42257: CALL_OW 44
42261: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42262: LD_ADDR_VAR 0 7
42266: PUSH
42267: LD_VAR 0 7
42271: PPUSH
42272: LD_INT 1
42274: PPUSH
42275: LD_VAR 0 14
42279: PPUSH
42280: CALL_OW 2
42284: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
42285: LD_VAR 0 14
42289: PPUSH
42290: LD_VAR 0 12
42294: PUSH
42295: LD_INT 1
42297: ARRAY
42298: PPUSH
42299: CALL_OW 52
// end ;
42303: GO 41942
42305: POP
42306: POP
// end ;
42307: GO 41244
42309: POP
42310: POP
// result := result ^ buildings ;
42311: LD_ADDR_VAR 0 7
42315: PUSH
42316: LD_VAR 0 7
42320: PUSH
42321: LD_VAR 0 18
42325: ADD
42326: ST_TO_ADDR
// end else
42327: GO 42470
// begin for i = 1 to personel do
42329: LD_ADDR_VAR 0 8
42333: PUSH
42334: DOUBLE
42335: LD_INT 1
42337: DEC
42338: ST_TO_ADDR
42339: LD_VAR 0 6
42343: PUSH
42344: FOR_TO
42345: IFFALSE 42468
// begin if i > 4 then
42347: LD_VAR 0 8
42351: PUSH
42352: LD_INT 4
42354: GREATER
42355: IFFALSE 42359
// break ;
42357: GO 42468
// x := personel [ i ] ;
42359: LD_ADDR_VAR 0 13
42363: PUSH
42364: LD_VAR 0 6
42368: PUSH
42369: LD_VAR 0 8
42373: ARRAY
42374: ST_TO_ADDR
// if x = - 1 then
42375: LD_VAR 0 13
42379: PUSH
42380: LD_INT 1
42382: NEG
42383: EQUAL
42384: IFFALSE 42388
// continue ;
42386: GO 42344
// PrepareHuman ( false , i , skill ) ;
42388: LD_INT 0
42390: PPUSH
42391: LD_VAR 0 8
42395: PPUSH
42396: LD_VAR 0 4
42400: PPUSH
42401: CALL_OW 380
// un := CreateHuman ;
42405: LD_ADDR_VAR 0 14
42409: PUSH
42410: CALL_OW 44
42414: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42415: LD_VAR 0 14
42419: PPUSH
42420: LD_VAR 0 1
42424: PPUSH
42425: CALL_OW 250
42429: PPUSH
42430: LD_VAR 0 1
42434: PPUSH
42435: CALL_OW 251
42439: PPUSH
42440: LD_INT 10
42442: PPUSH
42443: LD_INT 0
42445: PPUSH
42446: CALL_OW 50
// result := result ^ un ;
42450: LD_ADDR_VAR 0 7
42454: PUSH
42455: LD_VAR 0 7
42459: PUSH
42460: LD_VAR 0 14
42464: ADD
42465: ST_TO_ADDR
// end ;
42466: GO 42344
42468: POP
42469: POP
// end ; end ;
42470: LD_VAR 0 7
42474: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
42475: LD_INT 0
42477: PPUSH
42478: PPUSH
42479: PPUSH
42480: PPUSH
42481: PPUSH
42482: PPUSH
42483: PPUSH
42484: PPUSH
42485: PPUSH
42486: PPUSH
42487: PPUSH
42488: PPUSH
42489: PPUSH
42490: PPUSH
42491: PPUSH
42492: PPUSH
// result := false ;
42493: LD_ADDR_VAR 0 3
42497: PUSH
42498: LD_INT 0
42500: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
42501: LD_VAR 0 1
42505: NOT
42506: PUSH
42507: LD_VAR 0 1
42511: PPUSH
42512: CALL_OW 266
42516: PUSH
42517: LD_INT 32
42519: PUSH
42520: LD_INT 33
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: IN
42527: NOT
42528: OR
42529: IFFALSE 42533
// exit ;
42531: GO 43642
// nat := GetNation ( tower ) ;
42533: LD_ADDR_VAR 0 12
42537: PUSH
42538: LD_VAR 0 1
42542: PPUSH
42543: CALL_OW 248
42547: ST_TO_ADDR
// side := GetSide ( tower ) ;
42548: LD_ADDR_VAR 0 16
42552: PUSH
42553: LD_VAR 0 1
42557: PPUSH
42558: CALL_OW 255
42562: ST_TO_ADDR
// x := GetX ( tower ) ;
42563: LD_ADDR_VAR 0 10
42567: PUSH
42568: LD_VAR 0 1
42572: PPUSH
42573: CALL_OW 250
42577: ST_TO_ADDR
// y := GetY ( tower ) ;
42578: LD_ADDR_VAR 0 11
42582: PUSH
42583: LD_VAR 0 1
42587: PPUSH
42588: CALL_OW 251
42592: ST_TO_ADDR
// if not x or not y then
42593: LD_VAR 0 10
42597: NOT
42598: PUSH
42599: LD_VAR 0 11
42603: NOT
42604: OR
42605: IFFALSE 42609
// exit ;
42607: GO 43642
// weapon := 0 ;
42609: LD_ADDR_VAR 0 18
42613: PUSH
42614: LD_INT 0
42616: ST_TO_ADDR
// fac_list := [ ] ;
42617: LD_ADDR_VAR 0 17
42621: PUSH
42622: EMPTY
42623: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
42624: LD_ADDR_VAR 0 6
42628: PUSH
42629: LD_VAR 0 1
42633: PPUSH
42634: CALL_OW 274
42638: PPUSH
42639: LD_VAR 0 2
42643: PPUSH
42644: LD_INT 0
42646: PPUSH
42647: CALL 40213 0 3
42651: PPUSH
42652: LD_INT 30
42654: PUSH
42655: LD_INT 3
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: PPUSH
42662: CALL_OW 72
42666: ST_TO_ADDR
// if not factories then
42667: LD_VAR 0 6
42671: NOT
42672: IFFALSE 42676
// exit ;
42674: GO 43642
// for i in factories do
42676: LD_ADDR_VAR 0 8
42680: PUSH
42681: LD_VAR 0 6
42685: PUSH
42686: FOR_IN
42687: IFFALSE 42712
// fac_list := fac_list union AvailableWeaponList ( i ) ;
42689: LD_ADDR_VAR 0 17
42693: PUSH
42694: LD_VAR 0 17
42698: PUSH
42699: LD_VAR 0 8
42703: PPUSH
42704: CALL_OW 478
42708: UNION
42709: ST_TO_ADDR
42710: GO 42686
42712: POP
42713: POP
// if not fac_list then
42714: LD_VAR 0 17
42718: NOT
42719: IFFALSE 42723
// exit ;
42721: GO 43642
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
42723: LD_ADDR_VAR 0 5
42727: PUSH
42728: LD_INT 4
42730: PUSH
42731: LD_INT 5
42733: PUSH
42734: LD_INT 9
42736: PUSH
42737: LD_INT 10
42739: PUSH
42740: LD_INT 6
42742: PUSH
42743: LD_INT 7
42745: PUSH
42746: LD_INT 11
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: LIST
42753: LIST
42754: LIST
42755: LIST
42756: LIST
42757: PUSH
42758: LD_INT 27
42760: PUSH
42761: LD_INT 28
42763: PUSH
42764: LD_INT 26
42766: PUSH
42767: LD_INT 30
42769: PUSH
42770: EMPTY
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: PUSH
42776: LD_INT 43
42778: PUSH
42779: LD_INT 44
42781: PUSH
42782: LD_INT 46
42784: PUSH
42785: LD_INT 45
42787: PUSH
42788: LD_INT 47
42790: PUSH
42791: LD_INT 49
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: LIST
42798: LIST
42799: LIST
42800: LIST
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: LIST
42806: PUSH
42807: LD_VAR 0 12
42811: ARRAY
42812: ST_TO_ADDR
// list := list isect fac_list ;
42813: LD_ADDR_VAR 0 5
42817: PUSH
42818: LD_VAR 0 5
42822: PUSH
42823: LD_VAR 0 17
42827: ISECT
42828: ST_TO_ADDR
// if not list then
42829: LD_VAR 0 5
42833: NOT
42834: IFFALSE 42838
// exit ;
42836: GO 43642
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
42838: LD_VAR 0 12
42842: PUSH
42843: LD_INT 3
42845: EQUAL
42846: PUSH
42847: LD_INT 49
42849: PUSH
42850: LD_VAR 0 5
42854: IN
42855: AND
42856: PUSH
42857: LD_INT 31
42859: PPUSH
42860: LD_VAR 0 16
42864: PPUSH
42865: CALL_OW 321
42869: PUSH
42870: LD_INT 2
42872: EQUAL
42873: AND
42874: IFFALSE 42934
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
42876: LD_INT 22
42878: PUSH
42879: LD_VAR 0 16
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: LD_INT 35
42890: PUSH
42891: LD_INT 49
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: LD_INT 91
42900: PUSH
42901: LD_VAR 0 1
42905: PUSH
42906: LD_INT 10
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: LIST
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: LIST
42918: PPUSH
42919: CALL_OW 69
42923: NOT
42924: IFFALSE 42934
// weapon := ru_time_lapser ;
42926: LD_ADDR_VAR 0 18
42930: PUSH
42931: LD_INT 49
42933: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
42934: LD_VAR 0 12
42938: PUSH
42939: LD_INT 1
42941: PUSH
42942: LD_INT 2
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: IN
42949: PUSH
42950: LD_INT 11
42952: PUSH
42953: LD_VAR 0 5
42957: IN
42958: PUSH
42959: LD_INT 30
42961: PUSH
42962: LD_VAR 0 5
42966: IN
42967: OR
42968: AND
42969: PUSH
42970: LD_INT 6
42972: PPUSH
42973: LD_VAR 0 16
42977: PPUSH
42978: CALL_OW 321
42982: PUSH
42983: LD_INT 2
42985: EQUAL
42986: AND
42987: IFFALSE 43152
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
42989: LD_INT 22
42991: PUSH
42992: LD_VAR 0 16
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: PUSH
43001: LD_INT 2
43003: PUSH
43004: LD_INT 35
43006: PUSH
43007: LD_INT 11
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 35
43016: PUSH
43017: LD_INT 30
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: LIST
43028: PUSH
43029: LD_INT 91
43031: PUSH
43032: LD_VAR 0 1
43036: PUSH
43037: LD_INT 18
43039: PUSH
43040: EMPTY
43041: LIST
43042: LIST
43043: LIST
43044: PUSH
43045: EMPTY
43046: LIST
43047: LIST
43048: LIST
43049: PPUSH
43050: CALL_OW 69
43054: NOT
43055: PUSH
43056: LD_INT 22
43058: PUSH
43059: LD_VAR 0 16
43063: PUSH
43064: EMPTY
43065: LIST
43066: LIST
43067: PUSH
43068: LD_INT 2
43070: PUSH
43071: LD_INT 30
43073: PUSH
43074: LD_INT 32
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: PUSH
43081: LD_INT 30
43083: PUSH
43084: LD_INT 33
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: LIST
43095: PUSH
43096: LD_INT 91
43098: PUSH
43099: LD_VAR 0 1
43103: PUSH
43104: LD_INT 12
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: LIST
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: LIST
43116: PUSH
43117: EMPTY
43118: LIST
43119: PPUSH
43120: CALL_OW 69
43124: PUSH
43125: LD_INT 2
43127: GREATER
43128: AND
43129: IFFALSE 43152
// weapon := [ us_radar , ar_radar ] [ nat ] ;
43131: LD_ADDR_VAR 0 18
43135: PUSH
43136: LD_INT 11
43138: PUSH
43139: LD_INT 30
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: PUSH
43146: LD_VAR 0 12
43150: ARRAY
43151: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
43152: LD_VAR 0 18
43156: NOT
43157: PUSH
43158: LD_INT 40
43160: PPUSH
43161: LD_VAR 0 16
43165: PPUSH
43166: CALL_OW 321
43170: PUSH
43171: LD_INT 2
43173: EQUAL
43174: AND
43175: PUSH
43176: LD_INT 7
43178: PUSH
43179: LD_VAR 0 5
43183: IN
43184: PUSH
43185: LD_INT 28
43187: PUSH
43188: LD_VAR 0 5
43192: IN
43193: OR
43194: PUSH
43195: LD_INT 45
43197: PUSH
43198: LD_VAR 0 5
43202: IN
43203: OR
43204: AND
43205: IFFALSE 43459
// begin hex := GetHexInfo ( x , y ) ;
43207: LD_ADDR_VAR 0 4
43211: PUSH
43212: LD_VAR 0 10
43216: PPUSH
43217: LD_VAR 0 11
43221: PPUSH
43222: CALL_OW 546
43226: ST_TO_ADDR
// if hex [ 1 ] then
43227: LD_VAR 0 4
43231: PUSH
43232: LD_INT 1
43234: ARRAY
43235: IFFALSE 43239
// exit ;
43237: GO 43642
// height := hex [ 2 ] ;
43239: LD_ADDR_VAR 0 15
43243: PUSH
43244: LD_VAR 0 4
43248: PUSH
43249: LD_INT 2
43251: ARRAY
43252: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
43253: LD_ADDR_VAR 0 14
43257: PUSH
43258: LD_INT 0
43260: PUSH
43261: LD_INT 2
43263: PUSH
43264: LD_INT 3
43266: PUSH
43267: LD_INT 5
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: LIST
43274: LIST
43275: ST_TO_ADDR
// for i in tmp do
43276: LD_ADDR_VAR 0 8
43280: PUSH
43281: LD_VAR 0 14
43285: PUSH
43286: FOR_IN
43287: IFFALSE 43457
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
43289: LD_ADDR_VAR 0 9
43293: PUSH
43294: LD_VAR 0 10
43298: PPUSH
43299: LD_VAR 0 8
43303: PPUSH
43304: LD_INT 5
43306: PPUSH
43307: CALL_OW 272
43311: PUSH
43312: LD_VAR 0 11
43316: PPUSH
43317: LD_VAR 0 8
43321: PPUSH
43322: LD_INT 5
43324: PPUSH
43325: CALL_OW 273
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
43334: LD_VAR 0 9
43338: PUSH
43339: LD_INT 1
43341: ARRAY
43342: PPUSH
43343: LD_VAR 0 9
43347: PUSH
43348: LD_INT 2
43350: ARRAY
43351: PPUSH
43352: CALL_OW 488
43356: IFFALSE 43455
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
43358: LD_ADDR_VAR 0 4
43362: PUSH
43363: LD_VAR 0 9
43367: PUSH
43368: LD_INT 1
43370: ARRAY
43371: PPUSH
43372: LD_VAR 0 9
43376: PUSH
43377: LD_INT 2
43379: ARRAY
43380: PPUSH
43381: CALL_OW 546
43385: ST_TO_ADDR
// if hex [ 1 ] then
43386: LD_VAR 0 4
43390: PUSH
43391: LD_INT 1
43393: ARRAY
43394: IFFALSE 43398
// continue ;
43396: GO 43286
// h := hex [ 2 ] ;
43398: LD_ADDR_VAR 0 13
43402: PUSH
43403: LD_VAR 0 4
43407: PUSH
43408: LD_INT 2
43410: ARRAY
43411: ST_TO_ADDR
// if h + 7 < height then
43412: LD_VAR 0 13
43416: PUSH
43417: LD_INT 7
43419: PLUS
43420: PUSH
43421: LD_VAR 0 15
43425: LESS
43426: IFFALSE 43455
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
43428: LD_ADDR_VAR 0 18
43432: PUSH
43433: LD_INT 7
43435: PUSH
43436: LD_INT 28
43438: PUSH
43439: LD_INT 45
43441: PUSH
43442: EMPTY
43443: LIST
43444: LIST
43445: LIST
43446: PUSH
43447: LD_VAR 0 12
43451: ARRAY
43452: ST_TO_ADDR
// break ;
43453: GO 43457
// end ; end ; end ;
43455: GO 43286
43457: POP
43458: POP
// end ; if not weapon then
43459: LD_VAR 0 18
43463: NOT
43464: IFFALSE 43524
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
43466: LD_ADDR_VAR 0 5
43470: PUSH
43471: LD_VAR 0 5
43475: PUSH
43476: LD_INT 11
43478: PUSH
43479: LD_INT 30
43481: PUSH
43482: LD_INT 49
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: LIST
43489: DIFF
43490: ST_TO_ADDR
// if not list then
43491: LD_VAR 0 5
43495: NOT
43496: IFFALSE 43500
// exit ;
43498: GO 43642
// weapon := list [ rand ( 1 , list ) ] ;
43500: LD_ADDR_VAR 0 18
43504: PUSH
43505: LD_VAR 0 5
43509: PUSH
43510: LD_INT 1
43512: PPUSH
43513: LD_VAR 0 5
43517: PPUSH
43518: CALL_OW 12
43522: ARRAY
43523: ST_TO_ADDR
// end ; if weapon then
43524: LD_VAR 0 18
43528: IFFALSE 43642
// begin tmp := CostOfWeapon ( weapon ) ;
43530: LD_ADDR_VAR 0 14
43534: PUSH
43535: LD_VAR 0 18
43539: PPUSH
43540: CALL_OW 451
43544: ST_TO_ADDR
// j := GetBase ( tower ) ;
43545: LD_ADDR_VAR 0 9
43549: PUSH
43550: LD_VAR 0 1
43554: PPUSH
43555: CALL_OW 274
43559: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
43560: LD_VAR 0 9
43564: PPUSH
43565: LD_INT 1
43567: PPUSH
43568: CALL_OW 275
43572: PUSH
43573: LD_VAR 0 14
43577: PUSH
43578: LD_INT 1
43580: ARRAY
43581: GREATEREQUAL
43582: PUSH
43583: LD_VAR 0 9
43587: PPUSH
43588: LD_INT 2
43590: PPUSH
43591: CALL_OW 275
43595: PUSH
43596: LD_VAR 0 14
43600: PUSH
43601: LD_INT 2
43603: ARRAY
43604: GREATEREQUAL
43605: AND
43606: PUSH
43607: LD_VAR 0 9
43611: PPUSH
43612: LD_INT 3
43614: PPUSH
43615: CALL_OW 275
43619: PUSH
43620: LD_VAR 0 14
43624: PUSH
43625: LD_INT 3
43627: ARRAY
43628: GREATEREQUAL
43629: AND
43630: IFFALSE 43642
// result := weapon ;
43632: LD_ADDR_VAR 0 3
43636: PUSH
43637: LD_VAR 0 18
43641: ST_TO_ADDR
// end ; end ;
43642: LD_VAR 0 3
43646: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
43647: LD_INT 0
43649: PPUSH
43650: PPUSH
// result := true ;
43651: LD_ADDR_VAR 0 3
43655: PUSH
43656: LD_INT 1
43658: ST_TO_ADDR
// if array1 = array2 then
43659: LD_VAR 0 1
43663: PUSH
43664: LD_VAR 0 2
43668: EQUAL
43669: IFFALSE 43729
// begin for i = 1 to array1 do
43671: LD_ADDR_VAR 0 4
43675: PUSH
43676: DOUBLE
43677: LD_INT 1
43679: DEC
43680: ST_TO_ADDR
43681: LD_VAR 0 1
43685: PUSH
43686: FOR_TO
43687: IFFALSE 43725
// if array1 [ i ] <> array2 [ i ] then
43689: LD_VAR 0 1
43693: PUSH
43694: LD_VAR 0 4
43698: ARRAY
43699: PUSH
43700: LD_VAR 0 2
43704: PUSH
43705: LD_VAR 0 4
43709: ARRAY
43710: NONEQUAL
43711: IFFALSE 43723
// begin result := false ;
43713: LD_ADDR_VAR 0 3
43717: PUSH
43718: LD_INT 0
43720: ST_TO_ADDR
// break ;
43721: GO 43725
// end ;
43723: GO 43686
43725: POP
43726: POP
// end else
43727: GO 43737
// result := false ;
43729: LD_ADDR_VAR 0 3
43733: PUSH
43734: LD_INT 0
43736: ST_TO_ADDR
// end ;
43737: LD_VAR 0 3
43741: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
43742: LD_INT 0
43744: PPUSH
43745: PPUSH
// if not array1 or not array2 then
43746: LD_VAR 0 1
43750: NOT
43751: PUSH
43752: LD_VAR 0 2
43756: NOT
43757: OR
43758: IFFALSE 43762
// exit ;
43760: GO 43826
// result := true ;
43762: LD_ADDR_VAR 0 3
43766: PUSH
43767: LD_INT 1
43769: ST_TO_ADDR
// for i = 1 to array1 do
43770: LD_ADDR_VAR 0 4
43774: PUSH
43775: DOUBLE
43776: LD_INT 1
43778: DEC
43779: ST_TO_ADDR
43780: LD_VAR 0 1
43784: PUSH
43785: FOR_TO
43786: IFFALSE 43824
// if array1 [ i ] <> array2 [ i ] then
43788: LD_VAR 0 1
43792: PUSH
43793: LD_VAR 0 4
43797: ARRAY
43798: PUSH
43799: LD_VAR 0 2
43803: PUSH
43804: LD_VAR 0 4
43808: ARRAY
43809: NONEQUAL
43810: IFFALSE 43822
// begin result := false ;
43812: LD_ADDR_VAR 0 3
43816: PUSH
43817: LD_INT 0
43819: ST_TO_ADDR
// break ;
43820: GO 43824
// end ;
43822: GO 43785
43824: POP
43825: POP
// end ;
43826: LD_VAR 0 3
43830: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
43831: LD_INT 0
43833: PPUSH
43834: PPUSH
43835: PPUSH
// pom := GetBase ( fac ) ;
43836: LD_ADDR_VAR 0 5
43840: PUSH
43841: LD_VAR 0 1
43845: PPUSH
43846: CALL_OW 274
43850: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
43851: LD_ADDR_VAR 0 4
43855: PUSH
43856: LD_VAR 0 2
43860: PUSH
43861: LD_INT 1
43863: ARRAY
43864: PPUSH
43865: LD_VAR 0 2
43869: PUSH
43870: LD_INT 2
43872: ARRAY
43873: PPUSH
43874: LD_VAR 0 2
43878: PUSH
43879: LD_INT 3
43881: ARRAY
43882: PPUSH
43883: LD_VAR 0 2
43887: PUSH
43888: LD_INT 4
43890: ARRAY
43891: PPUSH
43892: CALL_OW 449
43896: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43897: LD_ADDR_VAR 0 3
43901: PUSH
43902: LD_VAR 0 5
43906: PPUSH
43907: LD_INT 1
43909: PPUSH
43910: CALL_OW 275
43914: PUSH
43915: LD_VAR 0 4
43919: PUSH
43920: LD_INT 1
43922: ARRAY
43923: GREATEREQUAL
43924: PUSH
43925: LD_VAR 0 5
43929: PPUSH
43930: LD_INT 2
43932: PPUSH
43933: CALL_OW 275
43937: PUSH
43938: LD_VAR 0 4
43942: PUSH
43943: LD_INT 2
43945: ARRAY
43946: GREATEREQUAL
43947: AND
43948: PUSH
43949: LD_VAR 0 5
43953: PPUSH
43954: LD_INT 3
43956: PPUSH
43957: CALL_OW 275
43961: PUSH
43962: LD_VAR 0 4
43966: PUSH
43967: LD_INT 3
43969: ARRAY
43970: GREATEREQUAL
43971: AND
43972: ST_TO_ADDR
// end ;
43973: LD_VAR 0 3
43977: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
43978: LD_INT 0
43980: PPUSH
43981: PPUSH
43982: PPUSH
43983: PPUSH
// pom := GetBase ( building ) ;
43984: LD_ADDR_VAR 0 3
43988: PUSH
43989: LD_VAR 0 1
43993: PPUSH
43994: CALL_OW 274
43998: ST_TO_ADDR
// if not pom then
43999: LD_VAR 0 3
44003: NOT
44004: IFFALSE 44008
// exit ;
44006: GO 44178
// btype := GetBType ( building ) ;
44008: LD_ADDR_VAR 0 5
44012: PUSH
44013: LD_VAR 0 1
44017: PPUSH
44018: CALL_OW 266
44022: ST_TO_ADDR
// if btype = b_armoury then
44023: LD_VAR 0 5
44027: PUSH
44028: LD_INT 4
44030: EQUAL
44031: IFFALSE 44041
// btype := b_barracks ;
44033: LD_ADDR_VAR 0 5
44037: PUSH
44038: LD_INT 5
44040: ST_TO_ADDR
// if btype = b_depot then
44041: LD_VAR 0 5
44045: PUSH
44046: LD_INT 0
44048: EQUAL
44049: IFFALSE 44059
// btype := b_warehouse ;
44051: LD_ADDR_VAR 0 5
44055: PUSH
44056: LD_INT 1
44058: ST_TO_ADDR
// if btype = b_workshop then
44059: LD_VAR 0 5
44063: PUSH
44064: LD_INT 2
44066: EQUAL
44067: IFFALSE 44077
// btype := b_factory ;
44069: LD_ADDR_VAR 0 5
44073: PUSH
44074: LD_INT 3
44076: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44077: LD_ADDR_VAR 0 4
44081: PUSH
44082: LD_VAR 0 5
44086: PPUSH
44087: LD_VAR 0 1
44091: PPUSH
44092: CALL_OW 248
44096: PPUSH
44097: CALL_OW 450
44101: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44102: LD_ADDR_VAR 0 2
44106: PUSH
44107: LD_VAR 0 3
44111: PPUSH
44112: LD_INT 1
44114: PPUSH
44115: CALL_OW 275
44119: PUSH
44120: LD_VAR 0 4
44124: PUSH
44125: LD_INT 1
44127: ARRAY
44128: GREATEREQUAL
44129: PUSH
44130: LD_VAR 0 3
44134: PPUSH
44135: LD_INT 2
44137: PPUSH
44138: CALL_OW 275
44142: PUSH
44143: LD_VAR 0 4
44147: PUSH
44148: LD_INT 2
44150: ARRAY
44151: GREATEREQUAL
44152: AND
44153: PUSH
44154: LD_VAR 0 3
44158: PPUSH
44159: LD_INT 3
44161: PPUSH
44162: CALL_OW 275
44166: PUSH
44167: LD_VAR 0 4
44171: PUSH
44172: LD_INT 3
44174: ARRAY
44175: GREATEREQUAL
44176: AND
44177: ST_TO_ADDR
// end ;
44178: LD_VAR 0 2
44182: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
44183: LD_INT 0
44185: PPUSH
44186: PPUSH
44187: PPUSH
// pom := GetBase ( building ) ;
44188: LD_ADDR_VAR 0 4
44192: PUSH
44193: LD_VAR 0 1
44197: PPUSH
44198: CALL_OW 274
44202: ST_TO_ADDR
// if not pom then
44203: LD_VAR 0 4
44207: NOT
44208: IFFALSE 44212
// exit ;
44210: GO 44313
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44212: LD_ADDR_VAR 0 5
44216: PUSH
44217: LD_VAR 0 2
44221: PPUSH
44222: LD_VAR 0 1
44226: PPUSH
44227: CALL_OW 248
44231: PPUSH
44232: CALL_OW 450
44236: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44237: LD_ADDR_VAR 0 3
44241: PUSH
44242: LD_VAR 0 4
44246: PPUSH
44247: LD_INT 1
44249: PPUSH
44250: CALL_OW 275
44254: PUSH
44255: LD_VAR 0 5
44259: PUSH
44260: LD_INT 1
44262: ARRAY
44263: GREATEREQUAL
44264: PUSH
44265: LD_VAR 0 4
44269: PPUSH
44270: LD_INT 2
44272: PPUSH
44273: CALL_OW 275
44277: PUSH
44278: LD_VAR 0 5
44282: PUSH
44283: LD_INT 2
44285: ARRAY
44286: GREATEREQUAL
44287: AND
44288: PUSH
44289: LD_VAR 0 4
44293: PPUSH
44294: LD_INT 3
44296: PPUSH
44297: CALL_OW 275
44301: PUSH
44302: LD_VAR 0 5
44306: PUSH
44307: LD_INT 3
44309: ARRAY
44310: GREATEREQUAL
44311: AND
44312: ST_TO_ADDR
// end ;
44313: LD_VAR 0 3
44317: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
44318: LD_INT 0
44320: PPUSH
44321: PPUSH
44322: PPUSH
44323: PPUSH
44324: PPUSH
44325: PPUSH
44326: PPUSH
44327: PPUSH
44328: PPUSH
44329: PPUSH
44330: PPUSH
// result := false ;
44331: LD_ADDR_VAR 0 8
44335: PUSH
44336: LD_INT 0
44338: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
44339: LD_VAR 0 5
44343: NOT
44344: PUSH
44345: LD_VAR 0 1
44349: NOT
44350: OR
44351: PUSH
44352: LD_VAR 0 2
44356: NOT
44357: OR
44358: PUSH
44359: LD_VAR 0 3
44363: NOT
44364: OR
44365: IFFALSE 44369
// exit ;
44367: GO 45183
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
44369: LD_ADDR_VAR 0 14
44373: PUSH
44374: LD_VAR 0 1
44378: PPUSH
44379: LD_VAR 0 2
44383: PPUSH
44384: LD_VAR 0 3
44388: PPUSH
44389: LD_VAR 0 4
44393: PPUSH
44394: LD_VAR 0 5
44398: PUSH
44399: LD_INT 1
44401: ARRAY
44402: PPUSH
44403: CALL_OW 248
44407: PPUSH
44408: LD_INT 0
44410: PPUSH
44411: CALL 46416 0 6
44415: ST_TO_ADDR
// if not hexes then
44416: LD_VAR 0 14
44420: NOT
44421: IFFALSE 44425
// exit ;
44423: GO 45183
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
44425: LD_ADDR_VAR 0 17
44429: PUSH
44430: LD_VAR 0 5
44434: PPUSH
44435: LD_INT 22
44437: PUSH
44438: LD_VAR 0 13
44442: PPUSH
44443: CALL_OW 255
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: PUSH
44452: LD_INT 2
44454: PUSH
44455: LD_INT 30
44457: PUSH
44458: LD_INT 0
44460: PUSH
44461: EMPTY
44462: LIST
44463: LIST
44464: PUSH
44465: LD_INT 30
44467: PUSH
44468: LD_INT 1
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: LIST
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: PPUSH
44484: CALL_OW 72
44488: ST_TO_ADDR
// for i = 1 to hexes do
44489: LD_ADDR_VAR 0 9
44493: PUSH
44494: DOUBLE
44495: LD_INT 1
44497: DEC
44498: ST_TO_ADDR
44499: LD_VAR 0 14
44503: PUSH
44504: FOR_TO
44505: IFFALSE 45181
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44507: LD_ADDR_VAR 0 13
44511: PUSH
44512: LD_VAR 0 14
44516: PUSH
44517: LD_VAR 0 9
44521: ARRAY
44522: PUSH
44523: LD_INT 1
44525: ARRAY
44526: PPUSH
44527: LD_VAR 0 14
44531: PUSH
44532: LD_VAR 0 9
44536: ARRAY
44537: PUSH
44538: LD_INT 2
44540: ARRAY
44541: PPUSH
44542: CALL_OW 428
44546: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
44547: LD_VAR 0 14
44551: PUSH
44552: LD_VAR 0 9
44556: ARRAY
44557: PUSH
44558: LD_INT 1
44560: ARRAY
44561: PPUSH
44562: LD_VAR 0 14
44566: PUSH
44567: LD_VAR 0 9
44571: ARRAY
44572: PUSH
44573: LD_INT 2
44575: ARRAY
44576: PPUSH
44577: CALL_OW 351
44581: PUSH
44582: LD_VAR 0 14
44586: PUSH
44587: LD_VAR 0 9
44591: ARRAY
44592: PUSH
44593: LD_INT 1
44595: ARRAY
44596: PPUSH
44597: LD_VAR 0 14
44601: PUSH
44602: LD_VAR 0 9
44606: ARRAY
44607: PUSH
44608: LD_INT 2
44610: ARRAY
44611: PPUSH
44612: CALL_OW 488
44616: NOT
44617: OR
44618: PUSH
44619: LD_VAR 0 13
44623: PPUSH
44624: CALL_OW 247
44628: PUSH
44629: LD_INT 3
44631: EQUAL
44632: OR
44633: IFFALSE 44639
// exit ;
44635: POP
44636: POP
44637: GO 45183
// if not tmp then
44639: LD_VAR 0 13
44643: NOT
44644: IFFALSE 44648
// continue ;
44646: GO 44504
// result := true ;
44648: LD_ADDR_VAR 0 8
44652: PUSH
44653: LD_INT 1
44655: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
44656: LD_VAR 0 6
44660: PUSH
44661: LD_VAR 0 13
44665: PPUSH
44666: CALL_OW 247
44670: PUSH
44671: LD_INT 2
44673: EQUAL
44674: AND
44675: PUSH
44676: LD_VAR 0 13
44680: PPUSH
44681: CALL_OW 263
44685: PUSH
44686: LD_INT 1
44688: EQUAL
44689: AND
44690: IFFALSE 44854
// begin if IsDrivenBy ( tmp ) then
44692: LD_VAR 0 13
44696: PPUSH
44697: CALL_OW 311
44701: IFFALSE 44705
// continue ;
44703: GO 44504
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
44705: LD_VAR 0 6
44709: PPUSH
44710: LD_INT 3
44712: PUSH
44713: LD_INT 60
44715: PUSH
44716: EMPTY
44717: LIST
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: PUSH
44723: LD_INT 3
44725: PUSH
44726: LD_INT 55
44728: PUSH
44729: EMPTY
44730: LIST
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PPUSH
44740: CALL_OW 72
44744: IFFALSE 44852
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
44746: LD_ADDR_VAR 0 18
44750: PUSH
44751: LD_VAR 0 6
44755: PPUSH
44756: LD_INT 3
44758: PUSH
44759: LD_INT 60
44761: PUSH
44762: EMPTY
44763: LIST
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: PUSH
44769: LD_INT 3
44771: PUSH
44772: LD_INT 55
44774: PUSH
44775: EMPTY
44776: LIST
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: PPUSH
44786: CALL_OW 72
44790: PUSH
44791: LD_INT 1
44793: ARRAY
44794: ST_TO_ADDR
// if IsInUnit ( driver ) then
44795: LD_VAR 0 18
44799: PPUSH
44800: CALL_OW 310
44804: IFFALSE 44815
// ComExit ( driver ) ;
44806: LD_VAR 0 18
44810: PPUSH
44811: CALL 70196 0 1
// AddComEnterUnit ( driver , tmp ) ;
44815: LD_VAR 0 18
44819: PPUSH
44820: LD_VAR 0 13
44824: PPUSH
44825: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
44829: LD_VAR 0 18
44833: PPUSH
44834: LD_VAR 0 7
44838: PPUSH
44839: CALL_OW 173
// AddComExitVehicle ( driver ) ;
44843: LD_VAR 0 18
44847: PPUSH
44848: CALL_OW 181
// end ; continue ;
44852: GO 44504
// end ; if not cleaners or not tmp in cleaners then
44854: LD_VAR 0 6
44858: NOT
44859: PUSH
44860: LD_VAR 0 13
44864: PUSH
44865: LD_VAR 0 6
44869: IN
44870: NOT
44871: OR
44872: IFFALSE 45179
// begin if dep then
44874: LD_VAR 0 17
44878: IFFALSE 45014
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
44880: LD_ADDR_VAR 0 16
44884: PUSH
44885: LD_VAR 0 17
44889: PUSH
44890: LD_INT 1
44892: ARRAY
44893: PPUSH
44894: CALL_OW 250
44898: PPUSH
44899: LD_VAR 0 17
44903: PUSH
44904: LD_INT 1
44906: ARRAY
44907: PPUSH
44908: CALL_OW 254
44912: PPUSH
44913: LD_INT 5
44915: PPUSH
44916: CALL_OW 272
44920: PUSH
44921: LD_VAR 0 17
44925: PUSH
44926: LD_INT 1
44928: ARRAY
44929: PPUSH
44930: CALL_OW 251
44934: PPUSH
44935: LD_VAR 0 17
44939: PUSH
44940: LD_INT 1
44942: ARRAY
44943: PPUSH
44944: CALL_OW 254
44948: PPUSH
44949: LD_INT 5
44951: PPUSH
44952: CALL_OW 273
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
44961: LD_VAR 0 16
44965: PUSH
44966: LD_INT 1
44968: ARRAY
44969: PPUSH
44970: LD_VAR 0 16
44974: PUSH
44975: LD_INT 2
44977: ARRAY
44978: PPUSH
44979: CALL_OW 488
44983: IFFALSE 45014
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
44985: LD_VAR 0 13
44989: PPUSH
44990: LD_VAR 0 16
44994: PUSH
44995: LD_INT 1
44997: ARRAY
44998: PPUSH
44999: LD_VAR 0 16
45003: PUSH
45004: LD_INT 2
45006: ARRAY
45007: PPUSH
45008: CALL_OW 111
// continue ;
45012: GO 44504
// end ; end ; r := GetDir ( tmp ) ;
45014: LD_ADDR_VAR 0 15
45018: PUSH
45019: LD_VAR 0 13
45023: PPUSH
45024: CALL_OW 254
45028: ST_TO_ADDR
// if r = 5 then
45029: LD_VAR 0 15
45033: PUSH
45034: LD_INT 5
45036: EQUAL
45037: IFFALSE 45047
// r := 0 ;
45039: LD_ADDR_VAR 0 15
45043: PUSH
45044: LD_INT 0
45046: ST_TO_ADDR
// for j = r to 5 do
45047: LD_ADDR_VAR 0 10
45051: PUSH
45052: DOUBLE
45053: LD_VAR 0 15
45057: DEC
45058: ST_TO_ADDR
45059: LD_INT 5
45061: PUSH
45062: FOR_TO
45063: IFFALSE 45177
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
45065: LD_ADDR_VAR 0 11
45069: PUSH
45070: LD_VAR 0 13
45074: PPUSH
45075: CALL_OW 250
45079: PPUSH
45080: LD_VAR 0 10
45084: PPUSH
45085: LD_INT 2
45087: PPUSH
45088: CALL_OW 272
45092: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
45093: LD_ADDR_VAR 0 12
45097: PUSH
45098: LD_VAR 0 13
45102: PPUSH
45103: CALL_OW 251
45107: PPUSH
45108: LD_VAR 0 10
45112: PPUSH
45113: LD_INT 2
45115: PPUSH
45116: CALL_OW 273
45120: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
45121: LD_VAR 0 11
45125: PPUSH
45126: LD_VAR 0 12
45130: PPUSH
45131: CALL_OW 488
45135: PUSH
45136: LD_VAR 0 11
45140: PPUSH
45141: LD_VAR 0 12
45145: PPUSH
45146: CALL_OW 428
45150: NOT
45151: AND
45152: IFFALSE 45175
// begin ComMoveXY ( tmp , _x , _y ) ;
45154: LD_VAR 0 13
45158: PPUSH
45159: LD_VAR 0 11
45163: PPUSH
45164: LD_VAR 0 12
45168: PPUSH
45169: CALL_OW 111
// break ;
45173: GO 45177
// end ; end ;
45175: GO 45062
45177: POP
45178: POP
// end ; end ;
45179: GO 44504
45181: POP
45182: POP
// end ;
45183: LD_VAR 0 8
45187: RET
// export function BuildingTechInvented ( side , btype ) ; begin
45188: LD_INT 0
45190: PPUSH
// result := true ;
45191: LD_ADDR_VAR 0 3
45195: PUSH
45196: LD_INT 1
45198: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
45199: LD_VAR 0 2
45203: PUSH
45204: LD_INT 24
45206: DOUBLE
45207: EQUAL
45208: IFTRUE 45218
45210: LD_INT 33
45212: DOUBLE
45213: EQUAL
45214: IFTRUE 45218
45216: GO 45243
45218: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
45219: LD_ADDR_VAR 0 3
45223: PUSH
45224: LD_INT 32
45226: PPUSH
45227: LD_VAR 0 1
45231: PPUSH
45232: CALL_OW 321
45236: PUSH
45237: LD_INT 2
45239: EQUAL
45240: ST_TO_ADDR
45241: GO 45559
45243: LD_INT 20
45245: DOUBLE
45246: EQUAL
45247: IFTRUE 45251
45249: GO 45276
45251: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
45252: LD_ADDR_VAR 0 3
45256: PUSH
45257: LD_INT 6
45259: PPUSH
45260: LD_VAR 0 1
45264: PPUSH
45265: CALL_OW 321
45269: PUSH
45270: LD_INT 2
45272: EQUAL
45273: ST_TO_ADDR
45274: GO 45559
45276: LD_INT 22
45278: DOUBLE
45279: EQUAL
45280: IFTRUE 45290
45282: LD_INT 36
45284: DOUBLE
45285: EQUAL
45286: IFTRUE 45290
45288: GO 45315
45290: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
45291: LD_ADDR_VAR 0 3
45295: PUSH
45296: LD_INT 15
45298: PPUSH
45299: LD_VAR 0 1
45303: PPUSH
45304: CALL_OW 321
45308: PUSH
45309: LD_INT 2
45311: EQUAL
45312: ST_TO_ADDR
45313: GO 45559
45315: LD_INT 30
45317: DOUBLE
45318: EQUAL
45319: IFTRUE 45323
45321: GO 45348
45323: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
45324: LD_ADDR_VAR 0 3
45328: PUSH
45329: LD_INT 20
45331: PPUSH
45332: LD_VAR 0 1
45336: PPUSH
45337: CALL_OW 321
45341: PUSH
45342: LD_INT 2
45344: EQUAL
45345: ST_TO_ADDR
45346: GO 45559
45348: LD_INT 28
45350: DOUBLE
45351: EQUAL
45352: IFTRUE 45362
45354: LD_INT 21
45356: DOUBLE
45357: EQUAL
45358: IFTRUE 45362
45360: GO 45387
45362: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
45363: LD_ADDR_VAR 0 3
45367: PUSH
45368: LD_INT 21
45370: PPUSH
45371: LD_VAR 0 1
45375: PPUSH
45376: CALL_OW 321
45380: PUSH
45381: LD_INT 2
45383: EQUAL
45384: ST_TO_ADDR
45385: GO 45559
45387: LD_INT 16
45389: DOUBLE
45390: EQUAL
45391: IFTRUE 45395
45393: GO 45420
45395: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
45396: LD_ADDR_VAR 0 3
45400: PUSH
45401: LD_INT 84
45403: PPUSH
45404: LD_VAR 0 1
45408: PPUSH
45409: CALL_OW 321
45413: PUSH
45414: LD_INT 2
45416: EQUAL
45417: ST_TO_ADDR
45418: GO 45559
45420: LD_INT 19
45422: DOUBLE
45423: EQUAL
45424: IFTRUE 45434
45426: LD_INT 23
45428: DOUBLE
45429: EQUAL
45430: IFTRUE 45434
45432: GO 45459
45434: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
45435: LD_ADDR_VAR 0 3
45439: PUSH
45440: LD_INT 83
45442: PPUSH
45443: LD_VAR 0 1
45447: PPUSH
45448: CALL_OW 321
45452: PUSH
45453: LD_INT 2
45455: EQUAL
45456: ST_TO_ADDR
45457: GO 45559
45459: LD_INT 17
45461: DOUBLE
45462: EQUAL
45463: IFTRUE 45467
45465: GO 45492
45467: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
45468: LD_ADDR_VAR 0 3
45472: PUSH
45473: LD_INT 39
45475: PPUSH
45476: LD_VAR 0 1
45480: PPUSH
45481: CALL_OW 321
45485: PUSH
45486: LD_INT 2
45488: EQUAL
45489: ST_TO_ADDR
45490: GO 45559
45492: LD_INT 18
45494: DOUBLE
45495: EQUAL
45496: IFTRUE 45500
45498: GO 45525
45500: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
45501: LD_ADDR_VAR 0 3
45505: PUSH
45506: LD_INT 40
45508: PPUSH
45509: LD_VAR 0 1
45513: PPUSH
45514: CALL_OW 321
45518: PUSH
45519: LD_INT 2
45521: EQUAL
45522: ST_TO_ADDR
45523: GO 45559
45525: LD_INT 27
45527: DOUBLE
45528: EQUAL
45529: IFTRUE 45533
45531: GO 45558
45533: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
45534: LD_ADDR_VAR 0 3
45538: PUSH
45539: LD_INT 35
45541: PPUSH
45542: LD_VAR 0 1
45546: PPUSH
45547: CALL_OW 321
45551: PUSH
45552: LD_INT 2
45554: EQUAL
45555: ST_TO_ADDR
45556: GO 45559
45558: POP
// end ;
45559: LD_VAR 0 3
45563: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
45564: LD_INT 0
45566: PPUSH
45567: PPUSH
45568: PPUSH
45569: PPUSH
45570: PPUSH
45571: PPUSH
45572: PPUSH
45573: PPUSH
45574: PPUSH
45575: PPUSH
45576: PPUSH
// result := false ;
45577: LD_ADDR_VAR 0 6
45581: PUSH
45582: LD_INT 0
45584: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
45585: LD_VAR 0 1
45589: NOT
45590: PUSH
45591: LD_VAR 0 1
45595: PPUSH
45596: CALL_OW 266
45600: PUSH
45601: LD_INT 0
45603: PUSH
45604: LD_INT 1
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: IN
45611: NOT
45612: OR
45613: PUSH
45614: LD_VAR 0 2
45618: NOT
45619: OR
45620: PUSH
45621: LD_VAR 0 5
45625: PUSH
45626: LD_INT 0
45628: PUSH
45629: LD_INT 1
45631: PUSH
45632: LD_INT 2
45634: PUSH
45635: LD_INT 3
45637: PUSH
45638: LD_INT 4
45640: PUSH
45641: LD_INT 5
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: LIST
45648: LIST
45649: LIST
45650: LIST
45651: IN
45652: NOT
45653: OR
45654: PUSH
45655: LD_VAR 0 3
45659: PPUSH
45660: LD_VAR 0 4
45664: PPUSH
45665: CALL_OW 488
45669: NOT
45670: OR
45671: IFFALSE 45675
// exit ;
45673: GO 46411
// side := GetSide ( depot ) ;
45675: LD_ADDR_VAR 0 9
45679: PUSH
45680: LD_VAR 0 1
45684: PPUSH
45685: CALL_OW 255
45689: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
45690: LD_VAR 0 9
45694: PPUSH
45695: LD_VAR 0 2
45699: PPUSH
45700: CALL 45188 0 2
45704: NOT
45705: IFFALSE 45709
// exit ;
45707: GO 46411
// pom := GetBase ( depot ) ;
45709: LD_ADDR_VAR 0 10
45713: PUSH
45714: LD_VAR 0 1
45718: PPUSH
45719: CALL_OW 274
45723: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45724: LD_ADDR_VAR 0 11
45728: PUSH
45729: LD_VAR 0 2
45733: PPUSH
45734: LD_VAR 0 1
45738: PPUSH
45739: CALL_OW 248
45743: PPUSH
45744: CALL_OW 450
45748: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
45749: LD_VAR 0 10
45753: PPUSH
45754: LD_INT 1
45756: PPUSH
45757: CALL_OW 275
45761: PUSH
45762: LD_VAR 0 11
45766: PUSH
45767: LD_INT 1
45769: ARRAY
45770: GREATEREQUAL
45771: PUSH
45772: LD_VAR 0 10
45776: PPUSH
45777: LD_INT 2
45779: PPUSH
45780: CALL_OW 275
45784: PUSH
45785: LD_VAR 0 11
45789: PUSH
45790: LD_INT 2
45792: ARRAY
45793: GREATEREQUAL
45794: AND
45795: PUSH
45796: LD_VAR 0 10
45800: PPUSH
45801: LD_INT 3
45803: PPUSH
45804: CALL_OW 275
45808: PUSH
45809: LD_VAR 0 11
45813: PUSH
45814: LD_INT 3
45816: ARRAY
45817: GREATEREQUAL
45818: AND
45819: NOT
45820: IFFALSE 45824
// exit ;
45822: GO 46411
// if GetBType ( depot ) = b_depot then
45824: LD_VAR 0 1
45828: PPUSH
45829: CALL_OW 266
45833: PUSH
45834: LD_INT 0
45836: EQUAL
45837: IFFALSE 45849
// dist := 28 else
45839: LD_ADDR_VAR 0 14
45843: PUSH
45844: LD_INT 28
45846: ST_TO_ADDR
45847: GO 45857
// dist := 36 ;
45849: LD_ADDR_VAR 0 14
45853: PUSH
45854: LD_INT 36
45856: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
45857: LD_VAR 0 1
45861: PPUSH
45862: LD_VAR 0 3
45866: PPUSH
45867: LD_VAR 0 4
45871: PPUSH
45872: CALL_OW 297
45876: PUSH
45877: LD_VAR 0 14
45881: GREATER
45882: IFFALSE 45886
// exit ;
45884: GO 46411
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
45886: LD_ADDR_VAR 0 12
45890: PUSH
45891: LD_VAR 0 2
45895: PPUSH
45896: LD_VAR 0 3
45900: PPUSH
45901: LD_VAR 0 4
45905: PPUSH
45906: LD_VAR 0 5
45910: PPUSH
45911: LD_VAR 0 1
45915: PPUSH
45916: CALL_OW 248
45920: PPUSH
45921: LD_INT 0
45923: PPUSH
45924: CALL 46416 0 6
45928: ST_TO_ADDR
// if not hexes then
45929: LD_VAR 0 12
45933: NOT
45934: IFFALSE 45938
// exit ;
45936: GO 46411
// hex := GetHexInfo ( x , y ) ;
45938: LD_ADDR_VAR 0 15
45942: PUSH
45943: LD_VAR 0 3
45947: PPUSH
45948: LD_VAR 0 4
45952: PPUSH
45953: CALL_OW 546
45957: ST_TO_ADDR
// if hex [ 1 ] then
45958: LD_VAR 0 15
45962: PUSH
45963: LD_INT 1
45965: ARRAY
45966: IFFALSE 45970
// exit ;
45968: GO 46411
// height := hex [ 2 ] ;
45970: LD_ADDR_VAR 0 13
45974: PUSH
45975: LD_VAR 0 15
45979: PUSH
45980: LD_INT 2
45982: ARRAY
45983: ST_TO_ADDR
// for i = 1 to hexes do
45984: LD_ADDR_VAR 0 7
45988: PUSH
45989: DOUBLE
45990: LD_INT 1
45992: DEC
45993: ST_TO_ADDR
45994: LD_VAR 0 12
45998: PUSH
45999: FOR_TO
46000: IFFALSE 46330
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
46002: LD_VAR 0 12
46006: PUSH
46007: LD_VAR 0 7
46011: ARRAY
46012: PUSH
46013: LD_INT 1
46015: ARRAY
46016: PPUSH
46017: LD_VAR 0 12
46021: PUSH
46022: LD_VAR 0 7
46026: ARRAY
46027: PUSH
46028: LD_INT 2
46030: ARRAY
46031: PPUSH
46032: CALL_OW 488
46036: NOT
46037: PUSH
46038: LD_VAR 0 12
46042: PUSH
46043: LD_VAR 0 7
46047: ARRAY
46048: PUSH
46049: LD_INT 1
46051: ARRAY
46052: PPUSH
46053: LD_VAR 0 12
46057: PUSH
46058: LD_VAR 0 7
46062: ARRAY
46063: PUSH
46064: LD_INT 2
46066: ARRAY
46067: PPUSH
46068: CALL_OW 428
46072: PUSH
46073: LD_INT 0
46075: GREATER
46076: OR
46077: PUSH
46078: LD_VAR 0 12
46082: PUSH
46083: LD_VAR 0 7
46087: ARRAY
46088: PUSH
46089: LD_INT 1
46091: ARRAY
46092: PPUSH
46093: LD_VAR 0 12
46097: PUSH
46098: LD_VAR 0 7
46102: ARRAY
46103: PUSH
46104: LD_INT 2
46106: ARRAY
46107: PPUSH
46108: CALL_OW 351
46112: OR
46113: IFFALSE 46119
// exit ;
46115: POP
46116: POP
46117: GO 46411
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46119: LD_ADDR_VAR 0 8
46123: PUSH
46124: LD_VAR 0 12
46128: PUSH
46129: LD_VAR 0 7
46133: ARRAY
46134: PUSH
46135: LD_INT 1
46137: ARRAY
46138: PPUSH
46139: LD_VAR 0 12
46143: PUSH
46144: LD_VAR 0 7
46148: ARRAY
46149: PUSH
46150: LD_INT 2
46152: ARRAY
46153: PPUSH
46154: CALL_OW 546
46158: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
46159: LD_VAR 0 8
46163: PUSH
46164: LD_INT 1
46166: ARRAY
46167: PUSH
46168: LD_VAR 0 8
46172: PUSH
46173: LD_INT 2
46175: ARRAY
46176: PUSH
46177: LD_VAR 0 13
46181: PUSH
46182: LD_INT 2
46184: PLUS
46185: GREATER
46186: OR
46187: PUSH
46188: LD_VAR 0 8
46192: PUSH
46193: LD_INT 2
46195: ARRAY
46196: PUSH
46197: LD_VAR 0 13
46201: PUSH
46202: LD_INT 2
46204: MINUS
46205: LESS
46206: OR
46207: PUSH
46208: LD_VAR 0 8
46212: PUSH
46213: LD_INT 3
46215: ARRAY
46216: PUSH
46217: LD_INT 0
46219: PUSH
46220: LD_INT 8
46222: PUSH
46223: LD_INT 9
46225: PUSH
46226: LD_INT 10
46228: PUSH
46229: LD_INT 11
46231: PUSH
46232: LD_INT 12
46234: PUSH
46235: LD_INT 13
46237: PUSH
46238: LD_INT 16
46240: PUSH
46241: LD_INT 17
46243: PUSH
46244: LD_INT 18
46246: PUSH
46247: LD_INT 19
46249: PUSH
46250: LD_INT 20
46252: PUSH
46253: LD_INT 21
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: LIST
46260: LIST
46261: LIST
46262: LIST
46263: LIST
46264: LIST
46265: LIST
46266: LIST
46267: LIST
46268: LIST
46269: LIST
46270: IN
46271: NOT
46272: OR
46273: PUSH
46274: LD_VAR 0 8
46278: PUSH
46279: LD_INT 5
46281: ARRAY
46282: NOT
46283: OR
46284: PUSH
46285: LD_VAR 0 8
46289: PUSH
46290: LD_INT 6
46292: ARRAY
46293: PUSH
46294: LD_INT 1
46296: PUSH
46297: LD_INT 2
46299: PUSH
46300: LD_INT 7
46302: PUSH
46303: LD_INT 9
46305: PUSH
46306: LD_INT 10
46308: PUSH
46309: LD_INT 11
46311: PUSH
46312: EMPTY
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: IN
46320: NOT
46321: OR
46322: IFFALSE 46328
// exit ;
46324: POP
46325: POP
46326: GO 46411
// end ;
46328: GO 45999
46330: POP
46331: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
46332: LD_VAR 0 9
46336: PPUSH
46337: LD_VAR 0 3
46341: PPUSH
46342: LD_VAR 0 4
46346: PPUSH
46347: LD_INT 20
46349: PPUSH
46350: CALL 38363 0 4
46354: PUSH
46355: LD_INT 4
46357: ARRAY
46358: IFFALSE 46362
// exit ;
46360: GO 46411
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
46362: LD_VAR 0 2
46366: PUSH
46367: LD_INT 29
46369: PUSH
46370: LD_INT 30
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: IN
46377: PUSH
46378: LD_VAR 0 3
46382: PPUSH
46383: LD_VAR 0 4
46387: PPUSH
46388: LD_VAR 0 9
46392: PPUSH
46393: CALL_OW 440
46397: NOT
46398: AND
46399: IFFALSE 46403
// exit ;
46401: GO 46411
// result := true ;
46403: LD_ADDR_VAR 0 6
46407: PUSH
46408: LD_INT 1
46410: ST_TO_ADDR
// end ;
46411: LD_VAR 0 6
46415: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
46416: LD_INT 0
46418: PPUSH
46419: PPUSH
46420: PPUSH
46421: PPUSH
46422: PPUSH
46423: PPUSH
46424: PPUSH
46425: PPUSH
46426: PPUSH
46427: PPUSH
46428: PPUSH
46429: PPUSH
46430: PPUSH
46431: PPUSH
46432: PPUSH
46433: PPUSH
46434: PPUSH
46435: PPUSH
46436: PPUSH
46437: PPUSH
46438: PPUSH
46439: PPUSH
46440: PPUSH
46441: PPUSH
46442: PPUSH
46443: PPUSH
46444: PPUSH
46445: PPUSH
46446: PPUSH
46447: PPUSH
46448: PPUSH
46449: PPUSH
46450: PPUSH
46451: PPUSH
46452: PPUSH
46453: PPUSH
46454: PPUSH
46455: PPUSH
46456: PPUSH
46457: PPUSH
46458: PPUSH
46459: PPUSH
46460: PPUSH
46461: PPUSH
46462: PPUSH
46463: PPUSH
46464: PPUSH
46465: PPUSH
46466: PPUSH
46467: PPUSH
46468: PPUSH
46469: PPUSH
46470: PPUSH
46471: PPUSH
46472: PPUSH
46473: PPUSH
46474: PPUSH
46475: PPUSH
// result = [ ] ;
46476: LD_ADDR_VAR 0 7
46480: PUSH
46481: EMPTY
46482: ST_TO_ADDR
// temp_list = [ ] ;
46483: LD_ADDR_VAR 0 9
46487: PUSH
46488: EMPTY
46489: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
46490: LD_VAR 0 4
46494: PUSH
46495: LD_INT 0
46497: PUSH
46498: LD_INT 1
46500: PUSH
46501: LD_INT 2
46503: PUSH
46504: LD_INT 3
46506: PUSH
46507: LD_INT 4
46509: PUSH
46510: LD_INT 5
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: IN
46521: NOT
46522: PUSH
46523: LD_VAR 0 1
46527: PUSH
46528: LD_INT 0
46530: PUSH
46531: LD_INT 1
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: IN
46538: PUSH
46539: LD_VAR 0 5
46543: PUSH
46544: LD_INT 1
46546: PUSH
46547: LD_INT 2
46549: PUSH
46550: LD_INT 3
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: LIST
46557: IN
46558: NOT
46559: AND
46560: OR
46561: IFFALSE 46565
// exit ;
46563: GO 64956
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
46565: LD_VAR 0 1
46569: PUSH
46570: LD_INT 6
46572: PUSH
46573: LD_INT 7
46575: PUSH
46576: LD_INT 8
46578: PUSH
46579: LD_INT 13
46581: PUSH
46582: LD_INT 12
46584: PUSH
46585: LD_INT 15
46587: PUSH
46588: LD_INT 11
46590: PUSH
46591: LD_INT 14
46593: PUSH
46594: LD_INT 10
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: LIST
46601: LIST
46602: LIST
46603: LIST
46604: LIST
46605: LIST
46606: LIST
46607: IN
46608: IFFALSE 46618
// btype = b_lab ;
46610: LD_ADDR_VAR 0 1
46614: PUSH
46615: LD_INT 6
46617: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
46618: LD_VAR 0 6
46622: PUSH
46623: LD_INT 0
46625: PUSH
46626: LD_INT 1
46628: PUSH
46629: LD_INT 2
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: LIST
46636: IN
46637: NOT
46638: PUSH
46639: LD_VAR 0 1
46643: PUSH
46644: LD_INT 0
46646: PUSH
46647: LD_INT 1
46649: PUSH
46650: LD_INT 2
46652: PUSH
46653: LD_INT 3
46655: PUSH
46656: LD_INT 6
46658: PUSH
46659: LD_INT 36
46661: PUSH
46662: LD_INT 4
46664: PUSH
46665: LD_INT 5
46667: PUSH
46668: LD_INT 31
46670: PUSH
46671: LD_INT 32
46673: PUSH
46674: LD_INT 33
46676: PUSH
46677: EMPTY
46678: LIST
46679: LIST
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: IN
46690: NOT
46691: PUSH
46692: LD_VAR 0 6
46696: PUSH
46697: LD_INT 1
46699: EQUAL
46700: AND
46701: OR
46702: PUSH
46703: LD_VAR 0 1
46707: PUSH
46708: LD_INT 2
46710: PUSH
46711: LD_INT 3
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: IN
46718: NOT
46719: PUSH
46720: LD_VAR 0 6
46724: PUSH
46725: LD_INT 2
46727: EQUAL
46728: AND
46729: OR
46730: IFFALSE 46740
// mode = 0 ;
46732: LD_ADDR_VAR 0 6
46736: PUSH
46737: LD_INT 0
46739: ST_TO_ADDR
// case mode of 0 :
46740: LD_VAR 0 6
46744: PUSH
46745: LD_INT 0
46747: DOUBLE
46748: EQUAL
46749: IFTRUE 46753
46751: GO 58206
46753: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46754: LD_ADDR_VAR 0 11
46758: PUSH
46759: LD_INT 0
46761: PUSH
46762: LD_INT 0
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 0
46771: PUSH
46772: LD_INT 1
46774: NEG
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 1
46782: PUSH
46783: LD_INT 0
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 1
46792: PUSH
46793: LD_INT 1
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 0
46802: PUSH
46803: LD_INT 1
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 1
46812: NEG
46813: PUSH
46814: LD_INT 0
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 1
46823: NEG
46824: PUSH
46825: LD_INT 1
46827: NEG
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 1
46835: NEG
46836: PUSH
46837: LD_INT 2
46839: NEG
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 0
46847: PUSH
46848: LD_INT 2
46850: NEG
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 1
46858: PUSH
46859: LD_INT 1
46861: NEG
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 1
46869: PUSH
46870: LD_INT 2
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 0
46879: PUSH
46880: LD_INT 2
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: PUSH
46887: LD_INT 1
46889: NEG
46890: PUSH
46891: LD_INT 1
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 1
46900: PUSH
46901: LD_INT 3
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 0
46910: PUSH
46911: LD_INT 3
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 1
46920: NEG
46921: PUSH
46922: LD_INT 2
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: LIST
46941: LIST
46942: LIST
46943: LIST
46944: LIST
46945: LIST
46946: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46947: LD_ADDR_VAR 0 12
46951: PUSH
46952: LD_INT 0
46954: PUSH
46955: LD_INT 0
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 0
46964: PUSH
46965: LD_INT 1
46967: NEG
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 1
46975: PUSH
46976: LD_INT 0
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 1
46985: PUSH
46986: LD_INT 1
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 0
46995: PUSH
46996: LD_INT 1
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: PUSH
47003: LD_INT 1
47005: NEG
47006: PUSH
47007: LD_INT 0
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: PUSH
47014: LD_INT 1
47016: NEG
47017: PUSH
47018: LD_INT 1
47020: NEG
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 1
47028: PUSH
47029: LD_INT 1
47031: NEG
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 2
47039: PUSH
47040: LD_INT 0
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 2
47049: PUSH
47050: LD_INT 1
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: LD_INT 1
47059: NEG
47060: PUSH
47061: LD_INT 1
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 2
47070: NEG
47071: PUSH
47072: LD_INT 0
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 2
47081: NEG
47082: PUSH
47083: LD_INT 1
47085: NEG
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 2
47093: NEG
47094: PUSH
47095: LD_INT 1
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 3
47104: NEG
47105: PUSH
47106: LD_INT 0
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 3
47115: NEG
47116: PUSH
47117: LD_INT 1
47119: NEG
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: EMPTY
47126: LIST
47127: LIST
47128: LIST
47129: LIST
47130: LIST
47131: LIST
47132: LIST
47133: LIST
47134: LIST
47135: LIST
47136: LIST
47137: LIST
47138: LIST
47139: LIST
47140: LIST
47141: LIST
47142: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47143: LD_ADDR_VAR 0 13
47147: PUSH
47148: LD_INT 0
47150: PUSH
47151: LD_INT 0
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 0
47160: PUSH
47161: LD_INT 1
47163: NEG
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: LD_INT 1
47171: PUSH
47172: LD_INT 0
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 1
47181: PUSH
47182: LD_INT 1
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: LD_INT 0
47191: PUSH
47192: LD_INT 1
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: PUSH
47199: LD_INT 1
47201: NEG
47202: PUSH
47203: LD_INT 0
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 1
47212: NEG
47213: PUSH
47214: LD_INT 1
47216: NEG
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 1
47224: NEG
47225: PUSH
47226: LD_INT 2
47228: NEG
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 2
47236: PUSH
47237: LD_INT 1
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 2
47246: PUSH
47247: LD_INT 2
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 1
47256: PUSH
47257: LD_INT 2
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: LD_INT 2
47266: NEG
47267: PUSH
47268: LD_INT 1
47270: NEG
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 2
47278: NEG
47279: PUSH
47280: LD_INT 2
47282: NEG
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: LD_INT 2
47290: NEG
47291: PUSH
47292: LD_INT 3
47294: NEG
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 3
47302: NEG
47303: PUSH
47304: LD_INT 2
47306: NEG
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 3
47314: NEG
47315: PUSH
47316: LD_INT 3
47318: NEG
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: LIST
47328: LIST
47329: LIST
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: LIST
47338: LIST
47339: LIST
47340: LIST
47341: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47342: LD_ADDR_VAR 0 14
47346: PUSH
47347: LD_INT 0
47349: PUSH
47350: LD_INT 0
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_INT 0
47359: PUSH
47360: LD_INT 1
47362: NEG
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 1
47370: PUSH
47371: LD_INT 0
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 1
47380: PUSH
47381: LD_INT 1
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 0
47390: PUSH
47391: LD_INT 1
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 1
47400: NEG
47401: PUSH
47402: LD_INT 0
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: LD_INT 1
47411: NEG
47412: PUSH
47413: LD_INT 1
47415: NEG
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 1
47423: NEG
47424: PUSH
47425: LD_INT 2
47427: NEG
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 0
47435: PUSH
47436: LD_INT 2
47438: NEG
47439: PUSH
47440: EMPTY
47441: LIST
47442: LIST
47443: PUSH
47444: LD_INT 1
47446: PUSH
47447: LD_INT 1
47449: NEG
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: LD_INT 1
47457: PUSH
47458: LD_INT 2
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: LD_INT 0
47467: PUSH
47468: LD_INT 2
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 1
47477: NEG
47478: PUSH
47479: LD_INT 1
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 1
47488: NEG
47489: PUSH
47490: LD_INT 3
47492: NEG
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 0
47500: PUSH
47501: LD_INT 3
47503: NEG
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 1
47511: PUSH
47512: LD_INT 2
47514: NEG
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: LIST
47524: LIST
47525: LIST
47526: LIST
47527: LIST
47528: LIST
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: LIST
47537: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47538: LD_ADDR_VAR 0 15
47542: PUSH
47543: LD_INT 0
47545: PUSH
47546: LD_INT 0
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 0
47555: PUSH
47556: LD_INT 1
47558: NEG
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 1
47566: PUSH
47567: LD_INT 0
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 1
47576: PUSH
47577: LD_INT 1
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 0
47586: PUSH
47587: LD_INT 1
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 1
47596: NEG
47597: PUSH
47598: LD_INT 0
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 1
47607: NEG
47608: PUSH
47609: LD_INT 1
47611: NEG
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 1
47619: PUSH
47620: LD_INT 1
47622: NEG
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 2
47630: PUSH
47631: LD_INT 0
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PUSH
47638: LD_INT 2
47640: PUSH
47641: LD_INT 1
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 1
47650: NEG
47651: PUSH
47652: LD_INT 1
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 2
47661: NEG
47662: PUSH
47663: LD_INT 0
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: PUSH
47670: LD_INT 2
47672: NEG
47673: PUSH
47674: LD_INT 1
47676: NEG
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 2
47684: PUSH
47685: LD_INT 1
47687: NEG
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 3
47695: PUSH
47696: LD_INT 0
47698: PUSH
47699: EMPTY
47700: LIST
47701: LIST
47702: PUSH
47703: LD_INT 3
47705: PUSH
47706: LD_INT 1
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47731: LD_ADDR_VAR 0 16
47735: PUSH
47736: LD_INT 0
47738: PUSH
47739: LD_INT 0
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 0
47748: PUSH
47749: LD_INT 1
47751: NEG
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: PUSH
47757: LD_INT 1
47759: PUSH
47760: LD_INT 0
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 1
47769: PUSH
47770: LD_INT 1
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 0
47779: PUSH
47780: LD_INT 1
47782: PUSH
47783: EMPTY
47784: LIST
47785: LIST
47786: PUSH
47787: LD_INT 1
47789: NEG
47790: PUSH
47791: LD_INT 0
47793: PUSH
47794: EMPTY
47795: LIST
47796: LIST
47797: PUSH
47798: LD_INT 1
47800: NEG
47801: PUSH
47802: LD_INT 1
47804: NEG
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 1
47812: NEG
47813: PUSH
47814: LD_INT 2
47816: NEG
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 2
47824: PUSH
47825: LD_INT 1
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 2
47834: PUSH
47835: LD_INT 2
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 1
47844: PUSH
47845: LD_INT 2
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 2
47854: NEG
47855: PUSH
47856: LD_INT 1
47858: NEG
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 2
47866: NEG
47867: PUSH
47868: LD_INT 2
47870: NEG
47871: PUSH
47872: EMPTY
47873: LIST
47874: LIST
47875: PUSH
47876: LD_INT 3
47878: PUSH
47879: LD_INT 2
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 3
47888: PUSH
47889: LD_INT 3
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 2
47898: PUSH
47899: LD_INT 3
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47924: LD_ADDR_VAR 0 17
47928: PUSH
47929: LD_INT 0
47931: PUSH
47932: LD_INT 0
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 0
47941: PUSH
47942: LD_INT 1
47944: NEG
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 1
47952: PUSH
47953: LD_INT 0
47955: PUSH
47956: EMPTY
47957: LIST
47958: LIST
47959: PUSH
47960: LD_INT 1
47962: PUSH
47963: LD_INT 1
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 0
47972: PUSH
47973: LD_INT 1
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PUSH
47980: LD_INT 1
47982: NEG
47983: PUSH
47984: LD_INT 0
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 1
47993: NEG
47994: PUSH
47995: LD_INT 1
47997: NEG
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: LD_INT 1
48005: NEG
48006: PUSH
48007: LD_INT 2
48009: NEG
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 0
48017: PUSH
48018: LD_INT 2
48020: NEG
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 1
48028: PUSH
48029: LD_INT 1
48031: NEG
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 2
48039: PUSH
48040: LD_INT 0
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: PUSH
48047: LD_INT 2
48049: PUSH
48050: LD_INT 1
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PUSH
48057: LD_INT 2
48059: PUSH
48060: LD_INT 2
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: PUSH
48067: LD_INT 1
48069: PUSH
48070: LD_INT 2
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 0
48079: PUSH
48080: LD_INT 2
48082: PUSH
48083: EMPTY
48084: LIST
48085: LIST
48086: PUSH
48087: LD_INT 1
48089: NEG
48090: PUSH
48091: LD_INT 1
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 2
48100: NEG
48101: PUSH
48102: LD_INT 0
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 2
48111: NEG
48112: PUSH
48113: LD_INT 1
48115: NEG
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 2
48123: NEG
48124: PUSH
48125: LD_INT 2
48127: NEG
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: LIST
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48154: LD_ADDR_VAR 0 18
48158: PUSH
48159: LD_INT 0
48161: PUSH
48162: LD_INT 0
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: LD_INT 0
48171: PUSH
48172: LD_INT 1
48174: NEG
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 1
48182: PUSH
48183: LD_INT 0
48185: PUSH
48186: EMPTY
48187: LIST
48188: LIST
48189: PUSH
48190: LD_INT 1
48192: PUSH
48193: LD_INT 1
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: LD_INT 0
48202: PUSH
48203: LD_INT 1
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 1
48212: NEG
48213: PUSH
48214: LD_INT 0
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 1
48223: NEG
48224: PUSH
48225: LD_INT 1
48227: NEG
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 1
48235: NEG
48236: PUSH
48237: LD_INT 2
48239: NEG
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 0
48247: PUSH
48248: LD_INT 2
48250: NEG
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 1
48258: PUSH
48259: LD_INT 1
48261: NEG
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 2
48269: PUSH
48270: LD_INT 0
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: LD_INT 2
48279: PUSH
48280: LD_INT 1
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 2
48289: PUSH
48290: LD_INT 2
48292: PUSH
48293: EMPTY
48294: LIST
48295: LIST
48296: PUSH
48297: LD_INT 1
48299: PUSH
48300: LD_INT 2
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 0
48309: PUSH
48310: LD_INT 2
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: LD_INT 1
48319: NEG
48320: PUSH
48321: LD_INT 1
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 2
48330: NEG
48331: PUSH
48332: LD_INT 0
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: LD_INT 2
48341: NEG
48342: PUSH
48343: LD_INT 1
48345: NEG
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 2
48353: NEG
48354: PUSH
48355: LD_INT 2
48357: NEG
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: LIST
48367: LIST
48368: LIST
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48384: LD_ADDR_VAR 0 19
48388: PUSH
48389: LD_INT 0
48391: PUSH
48392: LD_INT 0
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 0
48401: PUSH
48402: LD_INT 1
48404: NEG
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 1
48412: PUSH
48413: LD_INT 0
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 1
48422: PUSH
48423: LD_INT 1
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 0
48432: PUSH
48433: LD_INT 1
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 1
48442: NEG
48443: PUSH
48444: LD_INT 0
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 1
48453: NEG
48454: PUSH
48455: LD_INT 1
48457: NEG
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 1
48465: NEG
48466: PUSH
48467: LD_INT 2
48469: NEG
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 0
48477: PUSH
48478: LD_INT 2
48480: NEG
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 1
48488: PUSH
48489: LD_INT 1
48491: NEG
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 2
48499: PUSH
48500: LD_INT 0
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 2
48509: PUSH
48510: LD_INT 1
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 2
48519: PUSH
48520: LD_INT 2
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 1
48529: PUSH
48530: LD_INT 2
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: PUSH
48537: LD_INT 0
48539: PUSH
48540: LD_INT 2
48542: PUSH
48543: EMPTY
48544: LIST
48545: LIST
48546: PUSH
48547: LD_INT 1
48549: NEG
48550: PUSH
48551: LD_INT 1
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 2
48560: NEG
48561: PUSH
48562: LD_INT 0
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 2
48571: NEG
48572: PUSH
48573: LD_INT 1
48575: NEG
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 2
48583: NEG
48584: PUSH
48585: LD_INT 2
48587: NEG
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: LIST
48611: LIST
48612: LIST
48613: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48614: LD_ADDR_VAR 0 20
48618: PUSH
48619: LD_INT 0
48621: PUSH
48622: LD_INT 0
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 0
48631: PUSH
48632: LD_INT 1
48634: NEG
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 1
48642: PUSH
48643: LD_INT 0
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 1
48652: PUSH
48653: LD_INT 1
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 0
48662: PUSH
48663: LD_INT 1
48665: PUSH
48666: EMPTY
48667: LIST
48668: LIST
48669: PUSH
48670: LD_INT 1
48672: NEG
48673: PUSH
48674: LD_INT 0
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 1
48683: NEG
48684: PUSH
48685: LD_INT 1
48687: NEG
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 1
48695: NEG
48696: PUSH
48697: LD_INT 2
48699: NEG
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 0
48707: PUSH
48708: LD_INT 2
48710: NEG
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 1
48718: PUSH
48719: LD_INT 1
48721: NEG
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 2
48729: PUSH
48730: LD_INT 0
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 2
48739: PUSH
48740: LD_INT 1
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 2
48749: PUSH
48750: LD_INT 2
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: LD_INT 1
48759: PUSH
48760: LD_INT 2
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: PUSH
48767: LD_INT 0
48769: PUSH
48770: LD_INT 2
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 1
48779: NEG
48780: PUSH
48781: LD_INT 1
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 2
48790: NEG
48791: PUSH
48792: LD_INT 0
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 2
48801: NEG
48802: PUSH
48803: LD_INT 1
48805: NEG
48806: PUSH
48807: EMPTY
48808: LIST
48809: LIST
48810: PUSH
48811: LD_INT 2
48813: NEG
48814: PUSH
48815: LD_INT 2
48817: NEG
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: LIST
48841: LIST
48842: LIST
48843: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48844: LD_ADDR_VAR 0 21
48848: PUSH
48849: LD_INT 0
48851: PUSH
48852: LD_INT 0
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: LD_INT 0
48861: PUSH
48862: LD_INT 1
48864: NEG
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PUSH
48870: LD_INT 1
48872: PUSH
48873: LD_INT 0
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: LD_INT 1
48882: PUSH
48883: LD_INT 1
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 0
48892: PUSH
48893: LD_INT 1
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 1
48902: NEG
48903: PUSH
48904: LD_INT 0
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: LD_INT 1
48913: NEG
48914: PUSH
48915: LD_INT 1
48917: NEG
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: LD_INT 1
48925: NEG
48926: PUSH
48927: LD_INT 2
48929: NEG
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PUSH
48935: LD_INT 0
48937: PUSH
48938: LD_INT 2
48940: NEG
48941: PUSH
48942: EMPTY
48943: LIST
48944: LIST
48945: PUSH
48946: LD_INT 1
48948: PUSH
48949: LD_INT 1
48951: NEG
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: PUSH
48957: LD_INT 2
48959: PUSH
48960: LD_INT 0
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 2
48969: PUSH
48970: LD_INT 1
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 2
48979: PUSH
48980: LD_INT 2
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 1
48989: PUSH
48990: LD_INT 2
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 0
48999: PUSH
49000: LD_INT 2
49002: PUSH
49003: EMPTY
49004: LIST
49005: LIST
49006: PUSH
49007: LD_INT 1
49009: NEG
49010: PUSH
49011: LD_INT 1
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: PUSH
49018: LD_INT 2
49020: NEG
49021: PUSH
49022: LD_INT 0
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 2
49031: NEG
49032: PUSH
49033: LD_INT 1
49035: NEG
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: LD_INT 2
49043: NEG
49044: PUSH
49045: LD_INT 2
49047: NEG
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: LIST
49071: LIST
49072: LIST
49073: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49074: LD_ADDR_VAR 0 22
49078: PUSH
49079: LD_INT 0
49081: PUSH
49082: LD_INT 0
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: LD_INT 0
49091: PUSH
49092: LD_INT 1
49094: NEG
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: LD_INT 1
49102: PUSH
49103: LD_INT 0
49105: PUSH
49106: EMPTY
49107: LIST
49108: LIST
49109: PUSH
49110: LD_INT 1
49112: PUSH
49113: LD_INT 1
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: LD_INT 0
49122: PUSH
49123: LD_INT 1
49125: PUSH
49126: EMPTY
49127: LIST
49128: LIST
49129: PUSH
49130: LD_INT 1
49132: NEG
49133: PUSH
49134: LD_INT 0
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: LD_INT 1
49143: NEG
49144: PUSH
49145: LD_INT 1
49147: NEG
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: LD_INT 1
49155: NEG
49156: PUSH
49157: LD_INT 2
49159: NEG
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 0
49167: PUSH
49168: LD_INT 2
49170: NEG
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 1
49178: PUSH
49179: LD_INT 1
49181: NEG
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 2
49189: PUSH
49190: LD_INT 0
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 2
49199: PUSH
49200: LD_INT 1
49202: PUSH
49203: EMPTY
49204: LIST
49205: LIST
49206: PUSH
49207: LD_INT 2
49209: PUSH
49210: LD_INT 2
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 1
49219: PUSH
49220: LD_INT 2
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 0
49229: PUSH
49230: LD_INT 2
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: LD_INT 1
49239: NEG
49240: PUSH
49241: LD_INT 1
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: LD_INT 2
49250: NEG
49251: PUSH
49252: LD_INT 0
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: LD_INT 2
49261: NEG
49262: PUSH
49263: LD_INT 1
49265: NEG
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 2
49273: NEG
49274: PUSH
49275: LD_INT 2
49277: NEG
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: LIST
49292: LIST
49293: LIST
49294: LIST
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: LIST
49301: LIST
49302: LIST
49303: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49304: LD_ADDR_VAR 0 23
49308: PUSH
49309: LD_INT 0
49311: PUSH
49312: LD_INT 0
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: PUSH
49319: LD_INT 0
49321: PUSH
49322: LD_INT 1
49324: NEG
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 1
49332: PUSH
49333: LD_INT 0
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 1
49342: PUSH
49343: LD_INT 1
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 0
49352: PUSH
49353: LD_INT 1
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 1
49362: NEG
49363: PUSH
49364: LD_INT 0
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 1
49373: NEG
49374: PUSH
49375: LD_INT 1
49377: NEG
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: PUSH
49383: LD_INT 1
49385: NEG
49386: PUSH
49387: LD_INT 2
49389: NEG
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: PUSH
49395: LD_INT 0
49397: PUSH
49398: LD_INT 2
49400: NEG
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 1
49408: PUSH
49409: LD_INT 1
49411: NEG
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 2
49419: PUSH
49420: LD_INT 0
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 2
49429: PUSH
49430: LD_INT 1
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 2
49439: PUSH
49440: LD_INT 2
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: PUSH
49447: LD_INT 1
49449: PUSH
49450: LD_INT 2
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 0
49459: PUSH
49460: LD_INT 2
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 1
49469: NEG
49470: PUSH
49471: LD_INT 1
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 2
49480: NEG
49481: PUSH
49482: LD_INT 0
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: PUSH
49489: LD_INT 2
49491: NEG
49492: PUSH
49493: LD_INT 1
49495: NEG
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 2
49503: NEG
49504: PUSH
49505: LD_INT 2
49507: NEG
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 2
49515: NEG
49516: PUSH
49517: LD_INT 3
49519: NEG
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: LD_INT 1
49527: NEG
49528: PUSH
49529: LD_INT 3
49531: NEG
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: PUSH
49537: LD_INT 1
49539: PUSH
49540: LD_INT 2
49542: NEG
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 2
49550: PUSH
49551: LD_INT 1
49553: NEG
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: LIST
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
49584: LD_ADDR_VAR 0 24
49588: PUSH
49589: LD_INT 0
49591: PUSH
49592: LD_INT 0
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 0
49601: PUSH
49602: LD_INT 1
49604: NEG
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 1
49612: PUSH
49613: LD_INT 0
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 1
49622: PUSH
49623: LD_INT 1
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 0
49632: PUSH
49633: LD_INT 1
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 1
49642: NEG
49643: PUSH
49644: LD_INT 0
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 1
49653: NEG
49654: PUSH
49655: LD_INT 1
49657: NEG
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 1
49665: NEG
49666: PUSH
49667: LD_INT 2
49669: NEG
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 0
49677: PUSH
49678: LD_INT 2
49680: NEG
49681: PUSH
49682: EMPTY
49683: LIST
49684: LIST
49685: PUSH
49686: LD_INT 1
49688: PUSH
49689: LD_INT 1
49691: NEG
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 2
49699: PUSH
49700: LD_INT 0
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 2
49709: PUSH
49710: LD_INT 1
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: LD_INT 2
49719: PUSH
49720: LD_INT 2
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: PUSH
49727: LD_INT 1
49729: PUSH
49730: LD_INT 2
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: PUSH
49737: LD_INT 0
49739: PUSH
49740: LD_INT 2
49742: PUSH
49743: EMPTY
49744: LIST
49745: LIST
49746: PUSH
49747: LD_INT 1
49749: NEG
49750: PUSH
49751: LD_INT 1
49753: PUSH
49754: EMPTY
49755: LIST
49756: LIST
49757: PUSH
49758: LD_INT 2
49760: NEG
49761: PUSH
49762: LD_INT 0
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 2
49771: NEG
49772: PUSH
49773: LD_INT 1
49775: NEG
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 2
49783: NEG
49784: PUSH
49785: LD_INT 2
49787: NEG
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PUSH
49793: LD_INT 1
49795: PUSH
49796: LD_INT 2
49798: NEG
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: PUSH
49804: LD_INT 2
49806: PUSH
49807: LD_INT 1
49809: NEG
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 3
49817: PUSH
49818: LD_INT 1
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 3
49827: PUSH
49828: LD_INT 2
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: LIST
49839: LIST
49840: LIST
49841: LIST
49842: LIST
49843: LIST
49844: LIST
49845: LIST
49846: LIST
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
49860: LD_ADDR_VAR 0 25
49864: PUSH
49865: LD_INT 0
49867: PUSH
49868: LD_INT 0
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 0
49877: PUSH
49878: LD_INT 1
49880: NEG
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 1
49888: PUSH
49889: LD_INT 0
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 1
49898: PUSH
49899: LD_INT 1
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 0
49908: PUSH
49909: LD_INT 1
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 1
49918: NEG
49919: PUSH
49920: LD_INT 0
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 1
49929: NEG
49930: PUSH
49931: LD_INT 1
49933: NEG
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 1
49941: NEG
49942: PUSH
49943: LD_INT 2
49945: NEG
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 0
49953: PUSH
49954: LD_INT 2
49956: NEG
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 1
49964: PUSH
49965: LD_INT 1
49967: NEG
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 2
49975: PUSH
49976: LD_INT 0
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 2
49985: PUSH
49986: LD_INT 1
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: LD_INT 2
49995: PUSH
49996: LD_INT 2
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: PUSH
50003: LD_INT 1
50005: PUSH
50006: LD_INT 2
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 0
50015: PUSH
50016: LD_INT 2
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 1
50025: NEG
50026: PUSH
50027: LD_INT 1
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PUSH
50034: LD_INT 2
50036: NEG
50037: PUSH
50038: LD_INT 0
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: LD_INT 2
50047: NEG
50048: PUSH
50049: LD_INT 1
50051: NEG
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 2
50059: NEG
50060: PUSH
50061: LD_INT 2
50063: NEG
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: LD_INT 3
50071: PUSH
50072: LD_INT 1
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 3
50081: PUSH
50082: LD_INT 2
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 2
50091: PUSH
50092: LD_INT 3
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 1
50101: PUSH
50102: LD_INT 3
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50134: LD_ADDR_VAR 0 26
50138: PUSH
50139: LD_INT 0
50141: PUSH
50142: LD_INT 0
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 0
50151: PUSH
50152: LD_INT 1
50154: NEG
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 1
50162: PUSH
50163: LD_INT 0
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 1
50172: PUSH
50173: LD_INT 1
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 0
50182: PUSH
50183: LD_INT 1
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: LD_INT 1
50192: NEG
50193: PUSH
50194: LD_INT 0
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 1
50203: NEG
50204: PUSH
50205: LD_INT 1
50207: NEG
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 1
50215: NEG
50216: PUSH
50217: LD_INT 2
50219: NEG
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 0
50227: PUSH
50228: LD_INT 2
50230: NEG
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 1
50238: PUSH
50239: LD_INT 1
50241: NEG
50242: PUSH
50243: EMPTY
50244: LIST
50245: LIST
50246: PUSH
50247: LD_INT 2
50249: PUSH
50250: LD_INT 0
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 2
50259: PUSH
50260: LD_INT 1
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 2
50269: PUSH
50270: LD_INT 2
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: PUSH
50277: LD_INT 1
50279: PUSH
50280: LD_INT 2
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 0
50289: PUSH
50290: LD_INT 2
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: PUSH
50297: LD_INT 1
50299: NEG
50300: PUSH
50301: LD_INT 1
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: PUSH
50308: LD_INT 2
50310: NEG
50311: PUSH
50312: LD_INT 0
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: LD_INT 2
50321: NEG
50322: PUSH
50323: LD_INT 1
50325: NEG
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PUSH
50331: LD_INT 2
50333: NEG
50334: PUSH
50335: LD_INT 2
50337: NEG
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 2
50345: PUSH
50346: LD_INT 3
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 1
50355: PUSH
50356: LD_INT 3
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 1
50365: NEG
50366: PUSH
50367: LD_INT 2
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 2
50376: NEG
50377: PUSH
50378: LD_INT 1
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50410: LD_ADDR_VAR 0 27
50414: PUSH
50415: LD_INT 0
50417: PUSH
50418: LD_INT 0
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: LD_INT 0
50427: PUSH
50428: LD_INT 1
50430: NEG
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: LD_INT 1
50438: PUSH
50439: LD_INT 0
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 1
50448: PUSH
50449: LD_INT 1
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 0
50458: PUSH
50459: LD_INT 1
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 1
50468: NEG
50469: PUSH
50470: LD_INT 0
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 1
50479: NEG
50480: PUSH
50481: LD_INT 1
50483: NEG
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 1
50491: NEG
50492: PUSH
50493: LD_INT 2
50495: NEG
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 0
50503: PUSH
50504: LD_INT 2
50506: NEG
50507: PUSH
50508: EMPTY
50509: LIST
50510: LIST
50511: PUSH
50512: LD_INT 1
50514: PUSH
50515: LD_INT 1
50517: NEG
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 2
50525: PUSH
50526: LD_INT 0
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 2
50535: PUSH
50536: LD_INT 1
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 2
50545: PUSH
50546: LD_INT 2
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: PUSH
50553: LD_INT 1
50555: PUSH
50556: LD_INT 2
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: LD_INT 0
50565: PUSH
50566: LD_INT 2
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 1
50575: NEG
50576: PUSH
50577: LD_INT 1
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 2
50586: NEG
50587: PUSH
50588: LD_INT 0
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 2
50597: NEG
50598: PUSH
50599: LD_INT 1
50601: NEG
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 2
50609: NEG
50610: PUSH
50611: LD_INT 2
50613: NEG
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 1
50621: NEG
50622: PUSH
50623: LD_INT 2
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 2
50632: NEG
50633: PUSH
50634: LD_INT 1
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: LD_INT 3
50643: NEG
50644: PUSH
50645: LD_INT 1
50647: NEG
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 3
50655: NEG
50656: PUSH
50657: LD_INT 2
50659: NEG
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50690: LD_ADDR_VAR 0 28
50694: PUSH
50695: LD_INT 0
50697: PUSH
50698: LD_INT 0
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 0
50707: PUSH
50708: LD_INT 1
50710: NEG
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 1
50718: PUSH
50719: LD_INT 0
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 1
50728: PUSH
50729: LD_INT 1
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: PUSH
50736: LD_INT 0
50738: PUSH
50739: LD_INT 1
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 1
50748: NEG
50749: PUSH
50750: LD_INT 0
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 1
50759: NEG
50760: PUSH
50761: LD_INT 1
50763: NEG
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: LD_INT 1
50771: NEG
50772: PUSH
50773: LD_INT 2
50775: NEG
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 0
50783: PUSH
50784: LD_INT 2
50786: NEG
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 1
50794: PUSH
50795: LD_INT 1
50797: NEG
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 2
50805: PUSH
50806: LD_INT 0
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 2
50815: PUSH
50816: LD_INT 1
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 2
50825: PUSH
50826: LD_INT 2
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 1
50835: PUSH
50836: LD_INT 2
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 0
50845: PUSH
50846: LD_INT 2
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 1
50855: NEG
50856: PUSH
50857: LD_INT 1
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 2
50866: NEG
50867: PUSH
50868: LD_INT 0
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 2
50877: NEG
50878: PUSH
50879: LD_INT 1
50881: NEG
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 2
50889: NEG
50890: PUSH
50891: LD_INT 2
50893: NEG
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 2
50901: NEG
50902: PUSH
50903: LD_INT 3
50905: NEG
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: LD_INT 1
50913: NEG
50914: PUSH
50915: LD_INT 3
50917: NEG
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: LD_INT 3
50925: NEG
50926: PUSH
50927: LD_INT 1
50929: NEG
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 3
50937: NEG
50938: PUSH
50939: LD_INT 2
50941: NEG
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: LIST
50964: LIST
50965: LIST
50966: LIST
50967: LIST
50968: LIST
50969: LIST
50970: LIST
50971: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50972: LD_ADDR_VAR 0 29
50976: PUSH
50977: LD_INT 0
50979: PUSH
50980: LD_INT 0
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 0
50989: PUSH
50990: LD_INT 1
50992: NEG
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: LD_INT 1
51000: PUSH
51001: LD_INT 0
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 1
51010: PUSH
51011: LD_INT 1
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 0
51020: PUSH
51021: LD_INT 1
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: LD_INT 1
51030: NEG
51031: PUSH
51032: LD_INT 0
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 1
51041: NEG
51042: PUSH
51043: LD_INT 1
51045: NEG
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: PUSH
51051: LD_INT 1
51053: NEG
51054: PUSH
51055: LD_INT 2
51057: NEG
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 0
51065: PUSH
51066: LD_INT 2
51068: NEG
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 1
51076: PUSH
51077: LD_INT 1
51079: NEG
51080: PUSH
51081: EMPTY
51082: LIST
51083: LIST
51084: PUSH
51085: LD_INT 2
51087: PUSH
51088: LD_INT 0
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: LD_INT 2
51097: PUSH
51098: LD_INT 1
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 1
51107: PUSH
51108: LD_INT 2
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 0
51117: PUSH
51118: LD_INT 2
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 1
51127: NEG
51128: PUSH
51129: LD_INT 1
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 2
51138: NEG
51139: PUSH
51140: LD_INT 1
51142: NEG
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 2
51150: NEG
51151: PUSH
51152: LD_INT 2
51154: NEG
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 2
51162: NEG
51163: PUSH
51164: LD_INT 3
51166: NEG
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 2
51174: PUSH
51175: LD_INT 1
51177: NEG
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 3
51185: PUSH
51186: LD_INT 1
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 1
51195: PUSH
51196: LD_INT 3
51198: PUSH
51199: EMPTY
51200: LIST
51201: LIST
51202: PUSH
51203: LD_INT 1
51205: NEG
51206: PUSH
51207: LD_INT 2
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 3
51216: NEG
51217: PUSH
51218: LD_INT 2
51220: NEG
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: LIST
51246: LIST
51247: LIST
51248: LIST
51249: LIST
51250: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51251: LD_ADDR_VAR 0 30
51255: PUSH
51256: LD_INT 0
51258: PUSH
51259: LD_INT 0
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 0
51268: PUSH
51269: LD_INT 1
51271: NEG
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 1
51279: PUSH
51280: LD_INT 0
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 1
51289: PUSH
51290: LD_INT 1
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: PUSH
51297: LD_INT 0
51299: PUSH
51300: LD_INT 1
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 1
51309: NEG
51310: PUSH
51311: LD_INT 0
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 1
51320: NEG
51321: PUSH
51322: LD_INT 1
51324: NEG
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 1
51332: NEG
51333: PUSH
51334: LD_INT 2
51336: NEG
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: LD_INT 0
51344: PUSH
51345: LD_INT 2
51347: NEG
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: LD_INT 1
51355: PUSH
51356: LD_INT 1
51358: NEG
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: LD_INT 2
51366: PUSH
51367: LD_INT 0
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: LD_INT 2
51376: PUSH
51377: LD_INT 1
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: PUSH
51384: LD_INT 2
51386: PUSH
51387: LD_INT 2
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 1
51396: PUSH
51397: LD_INT 2
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: LD_INT 1
51406: NEG
51407: PUSH
51408: LD_INT 1
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: LD_INT 2
51417: NEG
51418: PUSH
51419: LD_INT 0
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: PUSH
51426: LD_INT 2
51428: NEG
51429: PUSH
51430: LD_INT 1
51432: NEG
51433: PUSH
51434: EMPTY
51435: LIST
51436: LIST
51437: PUSH
51438: LD_INT 1
51440: NEG
51441: PUSH
51442: LD_INT 3
51444: NEG
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 1
51452: PUSH
51453: LD_INT 2
51455: NEG
51456: PUSH
51457: EMPTY
51458: LIST
51459: LIST
51460: PUSH
51461: LD_INT 3
51463: PUSH
51464: LD_INT 2
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: PUSH
51471: LD_INT 2
51473: PUSH
51474: LD_INT 3
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 2
51483: NEG
51484: PUSH
51485: LD_INT 1
51487: PUSH
51488: EMPTY
51489: LIST
51490: LIST
51491: PUSH
51492: LD_INT 3
51494: NEG
51495: PUSH
51496: LD_INT 1
51498: NEG
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51529: LD_ADDR_VAR 0 31
51533: PUSH
51534: LD_INT 0
51536: PUSH
51537: LD_INT 0
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 0
51546: PUSH
51547: LD_INT 1
51549: NEG
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 1
51557: PUSH
51558: LD_INT 0
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 1
51567: PUSH
51568: LD_INT 1
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 0
51577: PUSH
51578: LD_INT 1
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: LD_INT 1
51587: NEG
51588: PUSH
51589: LD_INT 0
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 1
51598: NEG
51599: PUSH
51600: LD_INT 1
51602: NEG
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: LD_INT 1
51610: NEG
51611: PUSH
51612: LD_INT 2
51614: NEG
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 1
51622: PUSH
51623: LD_INT 1
51625: NEG
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 2
51633: PUSH
51634: LD_INT 0
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: LD_INT 2
51643: PUSH
51644: LD_INT 1
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 2
51653: PUSH
51654: LD_INT 2
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 1
51663: PUSH
51664: LD_INT 2
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: LD_INT 0
51673: PUSH
51674: LD_INT 2
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 1
51683: NEG
51684: PUSH
51685: LD_INT 1
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 2
51694: NEG
51695: PUSH
51696: LD_INT 1
51698: NEG
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 2
51706: NEG
51707: PUSH
51708: LD_INT 2
51710: NEG
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 2
51718: NEG
51719: PUSH
51720: LD_INT 3
51722: NEG
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 2
51730: PUSH
51731: LD_INT 1
51733: NEG
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 3
51741: PUSH
51742: LD_INT 1
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 1
51751: PUSH
51752: LD_INT 3
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 1
51761: NEG
51762: PUSH
51763: LD_INT 2
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 3
51772: NEG
51773: PUSH
51774: LD_INT 2
51776: NEG
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51807: LD_ADDR_VAR 0 32
51811: PUSH
51812: LD_INT 0
51814: PUSH
51815: LD_INT 0
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 0
51824: PUSH
51825: LD_INT 1
51827: NEG
51828: PUSH
51829: EMPTY
51830: LIST
51831: LIST
51832: PUSH
51833: LD_INT 1
51835: PUSH
51836: LD_INT 0
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 1
51845: PUSH
51846: LD_INT 1
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 0
51855: PUSH
51856: LD_INT 1
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 1
51865: NEG
51866: PUSH
51867: LD_INT 0
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 1
51876: NEG
51877: PUSH
51878: LD_INT 1
51880: NEG
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 1
51888: NEG
51889: PUSH
51890: LD_INT 2
51892: NEG
51893: PUSH
51894: EMPTY
51895: LIST
51896: LIST
51897: PUSH
51898: LD_INT 0
51900: PUSH
51901: LD_INT 2
51903: NEG
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: LD_INT 1
51911: PUSH
51912: LD_INT 1
51914: NEG
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: LD_INT 2
51922: PUSH
51923: LD_INT 1
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 2
51932: PUSH
51933: LD_INT 2
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: LD_INT 1
51942: PUSH
51943: LD_INT 2
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 0
51952: PUSH
51953: LD_INT 2
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: LD_INT 1
51962: NEG
51963: PUSH
51964: LD_INT 1
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: LD_INT 2
51973: NEG
51974: PUSH
51975: LD_INT 0
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 2
51984: NEG
51985: PUSH
51986: LD_INT 1
51988: NEG
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: LD_INT 1
51996: NEG
51997: PUSH
51998: LD_INT 3
52000: NEG
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: LD_INT 1
52008: PUSH
52009: LD_INT 2
52011: NEG
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 3
52019: PUSH
52020: LD_INT 2
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 2
52029: PUSH
52030: LD_INT 3
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 2
52039: NEG
52040: PUSH
52041: LD_INT 1
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 3
52050: NEG
52051: PUSH
52052: LD_INT 1
52054: NEG
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52085: LD_ADDR_VAR 0 33
52089: PUSH
52090: LD_INT 0
52092: PUSH
52093: LD_INT 0
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 0
52102: PUSH
52103: LD_INT 1
52105: NEG
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: LD_INT 1
52113: PUSH
52114: LD_INT 0
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PUSH
52121: LD_INT 1
52123: PUSH
52124: LD_INT 1
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 0
52133: PUSH
52134: LD_INT 1
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 1
52143: NEG
52144: PUSH
52145: LD_INT 0
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 1
52154: NEG
52155: PUSH
52156: LD_INT 1
52158: NEG
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 1
52166: NEG
52167: PUSH
52168: LD_INT 2
52170: NEG
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 1
52178: PUSH
52179: LD_INT 1
52181: NEG
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: PUSH
52187: LD_INT 2
52189: PUSH
52190: LD_INT 0
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: LD_INT 2
52199: PUSH
52200: LD_INT 1
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PUSH
52207: LD_INT 1
52209: PUSH
52210: LD_INT 2
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: LD_INT 0
52219: PUSH
52220: LD_INT 2
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: LD_INT 1
52229: NEG
52230: PUSH
52231: LD_INT 1
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 2
52240: NEG
52241: PUSH
52242: LD_INT 0
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 2
52251: NEG
52252: PUSH
52253: LD_INT 1
52255: NEG
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: LD_INT 2
52263: NEG
52264: PUSH
52265: LD_INT 2
52267: NEG
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 2
52275: NEG
52276: PUSH
52277: LD_INT 3
52279: NEG
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 2
52287: PUSH
52288: LD_INT 1
52290: NEG
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: LD_INT 3
52298: PUSH
52299: LD_INT 1
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: LD_INT 1
52308: PUSH
52309: LD_INT 3
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: LD_INT 1
52318: NEG
52319: PUSH
52320: LD_INT 2
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: PUSH
52327: LD_INT 3
52329: NEG
52330: PUSH
52331: LD_INT 2
52333: NEG
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52364: LD_ADDR_VAR 0 34
52368: PUSH
52369: LD_INT 0
52371: PUSH
52372: LD_INT 0
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 0
52381: PUSH
52382: LD_INT 1
52384: NEG
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: LD_INT 1
52392: PUSH
52393: LD_INT 0
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: LD_INT 1
52402: PUSH
52403: LD_INT 1
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 0
52412: PUSH
52413: LD_INT 1
52415: PUSH
52416: EMPTY
52417: LIST
52418: LIST
52419: PUSH
52420: LD_INT 1
52422: NEG
52423: PUSH
52424: LD_INT 0
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: LD_INT 1
52433: NEG
52434: PUSH
52435: LD_INT 1
52437: NEG
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 1
52445: NEG
52446: PUSH
52447: LD_INT 2
52449: NEG
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 0
52457: PUSH
52458: LD_INT 2
52460: NEG
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 1
52468: PUSH
52469: LD_INT 1
52471: NEG
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 2
52479: PUSH
52480: LD_INT 1
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 2
52489: PUSH
52490: LD_INT 2
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 1
52499: PUSH
52500: LD_INT 2
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 1
52509: NEG
52510: PUSH
52511: LD_INT 1
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 2
52520: NEG
52521: PUSH
52522: LD_INT 0
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 2
52531: NEG
52532: PUSH
52533: LD_INT 1
52535: NEG
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 2
52543: NEG
52544: PUSH
52545: LD_INT 2
52547: NEG
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 1
52555: NEG
52556: PUSH
52557: LD_INT 3
52559: NEG
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 1
52567: PUSH
52568: LD_INT 2
52570: NEG
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 3
52578: PUSH
52579: LD_INT 2
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: LD_INT 2
52588: PUSH
52589: LD_INT 3
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 2
52598: NEG
52599: PUSH
52600: LD_INT 1
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: LD_INT 3
52609: NEG
52610: PUSH
52611: LD_INT 1
52613: NEG
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52644: LD_ADDR_VAR 0 35
52648: PUSH
52649: LD_INT 0
52651: PUSH
52652: LD_INT 0
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 0
52661: PUSH
52662: LD_INT 1
52664: NEG
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: PUSH
52670: LD_INT 1
52672: PUSH
52673: LD_INT 0
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 1
52682: PUSH
52683: LD_INT 1
52685: PUSH
52686: EMPTY
52687: LIST
52688: LIST
52689: PUSH
52690: LD_INT 0
52692: PUSH
52693: LD_INT 1
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_INT 1
52702: NEG
52703: PUSH
52704: LD_INT 0
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 1
52713: NEG
52714: PUSH
52715: LD_INT 1
52717: NEG
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 2
52725: PUSH
52726: LD_INT 1
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 2
52735: NEG
52736: PUSH
52737: LD_INT 1
52739: NEG
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52756: LD_ADDR_VAR 0 36
52760: PUSH
52761: LD_INT 0
52763: PUSH
52764: LD_INT 0
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 0
52773: PUSH
52774: LD_INT 1
52776: NEG
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 1
52784: PUSH
52785: LD_INT 0
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: LD_INT 1
52794: PUSH
52795: LD_INT 1
52797: PUSH
52798: EMPTY
52799: LIST
52800: LIST
52801: PUSH
52802: LD_INT 0
52804: PUSH
52805: LD_INT 1
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 1
52814: NEG
52815: PUSH
52816: LD_INT 0
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: LD_INT 1
52825: NEG
52826: PUSH
52827: LD_INT 1
52829: NEG
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: LD_INT 1
52837: NEG
52838: PUSH
52839: LD_INT 2
52841: NEG
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 1
52849: PUSH
52850: LD_INT 2
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52868: LD_ADDR_VAR 0 37
52872: PUSH
52873: LD_INT 0
52875: PUSH
52876: LD_INT 0
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 0
52885: PUSH
52886: LD_INT 1
52888: NEG
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: PUSH
52894: LD_INT 1
52896: PUSH
52897: LD_INT 0
52899: PUSH
52900: EMPTY
52901: LIST
52902: LIST
52903: PUSH
52904: LD_INT 1
52906: PUSH
52907: LD_INT 1
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 0
52916: PUSH
52917: LD_INT 1
52919: PUSH
52920: EMPTY
52921: LIST
52922: LIST
52923: PUSH
52924: LD_INT 1
52926: NEG
52927: PUSH
52928: LD_INT 0
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 1
52937: NEG
52938: PUSH
52939: LD_INT 1
52941: NEG
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 1
52949: PUSH
52950: LD_INT 1
52952: NEG
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: LD_INT 1
52960: NEG
52961: PUSH
52962: LD_INT 1
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: LIST
52979: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52980: LD_ADDR_VAR 0 38
52984: PUSH
52985: LD_INT 0
52987: PUSH
52988: LD_INT 0
52990: PUSH
52991: EMPTY
52992: LIST
52993: LIST
52994: PUSH
52995: LD_INT 0
52997: PUSH
52998: LD_INT 1
53000: NEG
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 1
53008: PUSH
53009: LD_INT 0
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: LD_INT 1
53018: PUSH
53019: LD_INT 1
53021: PUSH
53022: EMPTY
53023: LIST
53024: LIST
53025: PUSH
53026: LD_INT 0
53028: PUSH
53029: LD_INT 1
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: LD_INT 1
53038: NEG
53039: PUSH
53040: LD_INT 0
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 1
53049: NEG
53050: PUSH
53051: LD_INT 1
53053: NEG
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 2
53061: PUSH
53062: LD_INT 1
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 2
53071: NEG
53072: PUSH
53073: LD_INT 1
53075: NEG
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53092: LD_ADDR_VAR 0 39
53096: PUSH
53097: LD_INT 0
53099: PUSH
53100: LD_INT 0
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 0
53109: PUSH
53110: LD_INT 1
53112: NEG
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 1
53120: PUSH
53121: LD_INT 0
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 1
53130: PUSH
53131: LD_INT 1
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 0
53140: PUSH
53141: LD_INT 1
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 1
53150: NEG
53151: PUSH
53152: LD_INT 0
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: PUSH
53159: LD_INT 1
53161: NEG
53162: PUSH
53163: LD_INT 1
53165: NEG
53166: PUSH
53167: EMPTY
53168: LIST
53169: LIST
53170: PUSH
53171: LD_INT 1
53173: NEG
53174: PUSH
53175: LD_INT 2
53177: NEG
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 1
53185: PUSH
53186: LD_INT 2
53188: PUSH
53189: EMPTY
53190: LIST
53191: LIST
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: LIST
53201: LIST
53202: LIST
53203: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53204: LD_ADDR_VAR 0 40
53208: PUSH
53209: LD_INT 0
53211: PUSH
53212: LD_INT 0
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: PUSH
53219: LD_INT 0
53221: PUSH
53222: LD_INT 1
53224: NEG
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: LD_INT 1
53232: PUSH
53233: LD_INT 0
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PUSH
53240: LD_INT 1
53242: PUSH
53243: LD_INT 1
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 0
53252: PUSH
53253: LD_INT 1
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 1
53262: NEG
53263: PUSH
53264: LD_INT 0
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 1
53273: NEG
53274: PUSH
53275: LD_INT 1
53277: NEG
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 1
53285: PUSH
53286: LD_INT 1
53288: NEG
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 1
53296: NEG
53297: PUSH
53298: LD_INT 1
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53316: LD_ADDR_VAR 0 41
53320: PUSH
53321: LD_INT 0
53323: PUSH
53324: LD_INT 0
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: LD_INT 0
53333: PUSH
53334: LD_INT 1
53336: NEG
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 1
53344: PUSH
53345: LD_INT 0
53347: PUSH
53348: EMPTY
53349: LIST
53350: LIST
53351: PUSH
53352: LD_INT 1
53354: PUSH
53355: LD_INT 1
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 0
53364: PUSH
53365: LD_INT 1
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 1
53374: NEG
53375: PUSH
53376: LD_INT 0
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 1
53385: NEG
53386: PUSH
53387: LD_INT 1
53389: NEG
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 1
53397: NEG
53398: PUSH
53399: LD_INT 2
53401: NEG
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: LD_INT 1
53409: PUSH
53410: LD_INT 1
53412: NEG
53413: PUSH
53414: EMPTY
53415: LIST
53416: LIST
53417: PUSH
53418: LD_INT 2
53420: PUSH
53421: LD_INT 0
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 2
53430: PUSH
53431: LD_INT 1
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 2
53440: PUSH
53441: LD_INT 2
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 1
53450: PUSH
53451: LD_INT 2
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 1
53460: NEG
53461: PUSH
53462: LD_INT 1
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: LD_INT 2
53471: NEG
53472: PUSH
53473: LD_INT 0
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 2
53482: NEG
53483: PUSH
53484: LD_INT 1
53486: NEG
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 2
53494: NEG
53495: PUSH
53496: LD_INT 2
53498: NEG
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 2
53506: NEG
53507: PUSH
53508: LD_INT 3
53510: NEG
53511: PUSH
53512: EMPTY
53513: LIST
53514: LIST
53515: PUSH
53516: LD_INT 2
53518: PUSH
53519: LD_INT 1
53521: NEG
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: PUSH
53527: LD_INT 3
53529: PUSH
53530: LD_INT 0
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 3
53539: PUSH
53540: LD_INT 1
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 3
53549: PUSH
53550: LD_INT 2
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 3
53559: PUSH
53560: LD_INT 3
53562: PUSH
53563: EMPTY
53564: LIST
53565: LIST
53566: PUSH
53567: LD_INT 2
53569: PUSH
53570: LD_INT 3
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 2
53579: NEG
53580: PUSH
53581: LD_INT 1
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: LD_INT 3
53590: NEG
53591: PUSH
53592: LD_INT 0
53594: PUSH
53595: EMPTY
53596: LIST
53597: LIST
53598: PUSH
53599: LD_INT 3
53601: NEG
53602: PUSH
53603: LD_INT 1
53605: NEG
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 3
53613: NEG
53614: PUSH
53615: LD_INT 2
53617: NEG
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: LD_INT 3
53625: NEG
53626: PUSH
53627: LD_INT 3
53629: NEG
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: EMPTY
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53666: LD_ADDR_VAR 0 42
53670: PUSH
53671: LD_INT 0
53673: PUSH
53674: LD_INT 0
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 0
53683: PUSH
53684: LD_INT 1
53686: NEG
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: LD_INT 1
53694: PUSH
53695: LD_INT 0
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 1
53704: PUSH
53705: LD_INT 1
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 0
53714: PUSH
53715: LD_INT 1
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 1
53724: NEG
53725: PUSH
53726: LD_INT 0
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: LD_INT 1
53735: NEG
53736: PUSH
53737: LD_INT 1
53739: NEG
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 1
53747: NEG
53748: PUSH
53749: LD_INT 2
53751: NEG
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: LD_INT 0
53759: PUSH
53760: LD_INT 2
53762: NEG
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 1
53770: PUSH
53771: LD_INT 1
53773: NEG
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 2
53781: PUSH
53782: LD_INT 1
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 2
53791: PUSH
53792: LD_INT 2
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 1
53801: PUSH
53802: LD_INT 2
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 0
53811: PUSH
53812: LD_INT 2
53814: PUSH
53815: EMPTY
53816: LIST
53817: LIST
53818: PUSH
53819: LD_INT 1
53821: NEG
53822: PUSH
53823: LD_INT 1
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 2
53832: NEG
53833: PUSH
53834: LD_INT 1
53836: NEG
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 2
53844: NEG
53845: PUSH
53846: LD_INT 2
53848: NEG
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 2
53856: NEG
53857: PUSH
53858: LD_INT 3
53860: NEG
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 1
53868: NEG
53869: PUSH
53870: LD_INT 3
53872: NEG
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: LD_INT 0
53880: PUSH
53881: LD_INT 3
53883: NEG
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 1
53891: PUSH
53892: LD_INT 2
53894: NEG
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 3
53902: PUSH
53903: LD_INT 2
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 3
53912: PUSH
53913: LD_INT 3
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: LD_INT 2
53922: PUSH
53923: LD_INT 3
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 1
53932: PUSH
53933: LD_INT 3
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 0
53942: PUSH
53943: LD_INT 3
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 1
53952: NEG
53953: PUSH
53954: LD_INT 2
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 3
53963: NEG
53964: PUSH
53965: LD_INT 2
53967: NEG
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 3
53975: NEG
53976: PUSH
53977: LD_INT 3
53979: NEG
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: LIST
54000: LIST
54001: LIST
54002: LIST
54003: LIST
54004: LIST
54005: LIST
54006: LIST
54007: LIST
54008: LIST
54009: LIST
54010: LIST
54011: LIST
54012: LIST
54013: LIST
54014: LIST
54015: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54016: LD_ADDR_VAR 0 43
54020: PUSH
54021: LD_INT 0
54023: PUSH
54024: LD_INT 0
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 0
54033: PUSH
54034: LD_INT 1
54036: NEG
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 1
54044: PUSH
54045: LD_INT 0
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: LD_INT 1
54054: PUSH
54055: LD_INT 1
54057: PUSH
54058: EMPTY
54059: LIST
54060: LIST
54061: PUSH
54062: LD_INT 0
54064: PUSH
54065: LD_INT 1
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: PUSH
54072: LD_INT 1
54074: NEG
54075: PUSH
54076: LD_INT 0
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: LD_INT 1
54085: NEG
54086: PUSH
54087: LD_INT 1
54089: NEG
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 1
54097: NEG
54098: PUSH
54099: LD_INT 2
54101: NEG
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: LD_INT 0
54109: PUSH
54110: LD_INT 2
54112: NEG
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: LD_INT 1
54120: PUSH
54121: LD_INT 1
54123: NEG
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 2
54131: PUSH
54132: LD_INT 0
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 2
54141: PUSH
54142: LD_INT 1
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 1
54151: PUSH
54152: LD_INT 2
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 0
54161: PUSH
54162: LD_INT 2
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: LD_INT 1
54171: NEG
54172: PUSH
54173: LD_INT 1
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 2
54182: NEG
54183: PUSH
54184: LD_INT 0
54186: PUSH
54187: EMPTY
54188: LIST
54189: LIST
54190: PUSH
54191: LD_INT 2
54193: NEG
54194: PUSH
54195: LD_INT 1
54197: NEG
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 1
54205: NEG
54206: PUSH
54207: LD_INT 3
54209: NEG
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 0
54217: PUSH
54218: LD_INT 3
54220: NEG
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 1
54228: PUSH
54229: LD_INT 2
54231: NEG
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 2
54239: PUSH
54240: LD_INT 1
54242: NEG
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: PUSH
54248: LD_INT 3
54250: PUSH
54251: LD_INT 0
54253: PUSH
54254: EMPTY
54255: LIST
54256: LIST
54257: PUSH
54258: LD_INT 3
54260: PUSH
54261: LD_INT 1
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: LD_INT 1
54270: PUSH
54271: LD_INT 3
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: LD_INT 0
54280: PUSH
54281: LD_INT 3
54283: PUSH
54284: EMPTY
54285: LIST
54286: LIST
54287: PUSH
54288: LD_INT 1
54290: NEG
54291: PUSH
54292: LD_INT 2
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: LD_INT 2
54301: NEG
54302: PUSH
54303: LD_INT 1
54305: PUSH
54306: EMPTY
54307: LIST
54308: LIST
54309: PUSH
54310: LD_INT 3
54312: NEG
54313: PUSH
54314: LD_INT 0
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: PUSH
54321: LD_INT 3
54323: NEG
54324: PUSH
54325: LD_INT 1
54327: NEG
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: LIST
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: LIST
54362: LIST
54363: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54364: LD_ADDR_VAR 0 44
54368: PUSH
54369: LD_INT 0
54371: PUSH
54372: LD_INT 0
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 0
54381: PUSH
54382: LD_INT 1
54384: NEG
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 1
54392: PUSH
54393: LD_INT 0
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: PUSH
54400: LD_INT 1
54402: PUSH
54403: LD_INT 1
54405: PUSH
54406: EMPTY
54407: LIST
54408: LIST
54409: PUSH
54410: LD_INT 0
54412: PUSH
54413: LD_INT 1
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: LD_INT 1
54422: NEG
54423: PUSH
54424: LD_INT 0
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 1
54433: NEG
54434: PUSH
54435: LD_INT 1
54437: NEG
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 1
54445: NEG
54446: PUSH
54447: LD_INT 2
54449: NEG
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 1
54457: PUSH
54458: LD_INT 1
54460: NEG
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_INT 2
54468: PUSH
54469: LD_INT 0
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 2
54478: PUSH
54479: LD_INT 1
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 2
54488: PUSH
54489: LD_INT 2
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: PUSH
54496: LD_INT 1
54498: PUSH
54499: LD_INT 2
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 1
54508: NEG
54509: PUSH
54510: LD_INT 1
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 2
54519: NEG
54520: PUSH
54521: LD_INT 0
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: LD_INT 2
54530: NEG
54531: PUSH
54532: LD_INT 1
54534: NEG
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 2
54542: NEG
54543: PUSH
54544: LD_INT 2
54546: NEG
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 2
54554: NEG
54555: PUSH
54556: LD_INT 3
54558: NEG
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 2
54566: PUSH
54567: LD_INT 1
54569: NEG
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 3
54577: PUSH
54578: LD_INT 0
54580: PUSH
54581: EMPTY
54582: LIST
54583: LIST
54584: PUSH
54585: LD_INT 3
54587: PUSH
54588: LD_INT 1
54590: PUSH
54591: EMPTY
54592: LIST
54593: LIST
54594: PUSH
54595: LD_INT 3
54597: PUSH
54598: LD_INT 2
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 3
54607: PUSH
54608: LD_INT 3
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 2
54617: PUSH
54618: LD_INT 3
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 2
54627: NEG
54628: PUSH
54629: LD_INT 1
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 3
54638: NEG
54639: PUSH
54640: LD_INT 0
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: PUSH
54647: LD_INT 3
54649: NEG
54650: PUSH
54651: LD_INT 1
54653: NEG
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 3
54661: NEG
54662: PUSH
54663: LD_INT 2
54665: NEG
54666: PUSH
54667: EMPTY
54668: LIST
54669: LIST
54670: PUSH
54671: LD_INT 3
54673: NEG
54674: PUSH
54675: LD_INT 3
54677: NEG
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: LIST
54709: LIST
54710: LIST
54711: LIST
54712: LIST
54713: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54714: LD_ADDR_VAR 0 45
54718: PUSH
54719: LD_INT 0
54721: PUSH
54722: LD_INT 0
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: PUSH
54729: LD_INT 0
54731: PUSH
54732: LD_INT 1
54734: NEG
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 1
54742: PUSH
54743: LD_INT 0
54745: PUSH
54746: EMPTY
54747: LIST
54748: LIST
54749: PUSH
54750: LD_INT 1
54752: PUSH
54753: LD_INT 1
54755: PUSH
54756: EMPTY
54757: LIST
54758: LIST
54759: PUSH
54760: LD_INT 0
54762: PUSH
54763: LD_INT 1
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 1
54772: NEG
54773: PUSH
54774: LD_INT 0
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: PUSH
54781: LD_INT 1
54783: NEG
54784: PUSH
54785: LD_INT 1
54787: NEG
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 1
54795: NEG
54796: PUSH
54797: LD_INT 2
54799: NEG
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 0
54807: PUSH
54808: LD_INT 2
54810: NEG
54811: PUSH
54812: EMPTY
54813: LIST
54814: LIST
54815: PUSH
54816: LD_INT 1
54818: PUSH
54819: LD_INT 1
54821: NEG
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: LD_INT 2
54829: PUSH
54830: LD_INT 1
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 2
54839: PUSH
54840: LD_INT 2
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 1
54849: PUSH
54850: LD_INT 2
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PUSH
54857: LD_INT 0
54859: PUSH
54860: LD_INT 2
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 1
54869: NEG
54870: PUSH
54871: LD_INT 1
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 2
54880: NEG
54881: PUSH
54882: LD_INT 1
54884: NEG
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 2
54892: NEG
54893: PUSH
54894: LD_INT 2
54896: NEG
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 2
54904: NEG
54905: PUSH
54906: LD_INT 3
54908: NEG
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 1
54916: NEG
54917: PUSH
54918: LD_INT 3
54920: NEG
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: PUSH
54926: LD_INT 0
54928: PUSH
54929: LD_INT 3
54931: NEG
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 1
54939: PUSH
54940: LD_INT 2
54942: NEG
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 3
54950: PUSH
54951: LD_INT 2
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 3
54960: PUSH
54961: LD_INT 3
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 2
54970: PUSH
54971: LD_INT 3
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 1
54980: PUSH
54981: LD_INT 3
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 0
54990: PUSH
54991: LD_INT 3
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 1
55000: NEG
55001: PUSH
55002: LD_INT 2
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 3
55011: NEG
55012: PUSH
55013: LD_INT 2
55015: NEG
55016: PUSH
55017: EMPTY
55018: LIST
55019: LIST
55020: PUSH
55021: LD_INT 3
55023: NEG
55024: PUSH
55025: LD_INT 3
55027: NEG
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: LIST
55037: LIST
55038: LIST
55039: LIST
55040: LIST
55041: LIST
55042: LIST
55043: LIST
55044: LIST
55045: LIST
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55064: LD_ADDR_VAR 0 46
55068: PUSH
55069: LD_INT 0
55071: PUSH
55072: LD_INT 0
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: PUSH
55079: LD_INT 0
55081: PUSH
55082: LD_INT 1
55084: NEG
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 1
55092: PUSH
55093: LD_INT 0
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 1
55102: PUSH
55103: LD_INT 1
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 0
55112: PUSH
55113: LD_INT 1
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 1
55122: NEG
55123: PUSH
55124: LD_INT 0
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 1
55133: NEG
55134: PUSH
55135: LD_INT 1
55137: NEG
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 1
55145: NEG
55146: PUSH
55147: LD_INT 2
55149: NEG
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: LD_INT 0
55157: PUSH
55158: LD_INT 2
55160: NEG
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: LD_INT 1
55168: PUSH
55169: LD_INT 1
55171: NEG
55172: PUSH
55173: EMPTY
55174: LIST
55175: LIST
55176: PUSH
55177: LD_INT 2
55179: PUSH
55180: LD_INT 0
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: PUSH
55187: LD_INT 2
55189: PUSH
55190: LD_INT 1
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_INT 1
55199: PUSH
55200: LD_INT 2
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 0
55209: PUSH
55210: LD_INT 2
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: PUSH
55217: LD_INT 1
55219: NEG
55220: PUSH
55221: LD_INT 1
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 2
55230: NEG
55231: PUSH
55232: LD_INT 0
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 2
55241: NEG
55242: PUSH
55243: LD_INT 1
55245: NEG
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 1
55253: NEG
55254: PUSH
55255: LD_INT 3
55257: NEG
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 0
55265: PUSH
55266: LD_INT 3
55268: NEG
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 1
55276: PUSH
55277: LD_INT 2
55279: NEG
55280: PUSH
55281: EMPTY
55282: LIST
55283: LIST
55284: PUSH
55285: LD_INT 2
55287: PUSH
55288: LD_INT 1
55290: NEG
55291: PUSH
55292: EMPTY
55293: LIST
55294: LIST
55295: PUSH
55296: LD_INT 3
55298: PUSH
55299: LD_INT 0
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: PUSH
55306: LD_INT 3
55308: PUSH
55309: LD_INT 1
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 1
55318: PUSH
55319: LD_INT 3
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: LD_INT 0
55328: PUSH
55329: LD_INT 3
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: PUSH
55336: LD_INT 1
55338: NEG
55339: PUSH
55340: LD_INT 2
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 2
55349: NEG
55350: PUSH
55351: LD_INT 1
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: LD_INT 3
55360: NEG
55361: PUSH
55362: LD_INT 0
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 3
55371: NEG
55372: PUSH
55373: LD_INT 1
55375: NEG
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: LIST
55404: LIST
55405: LIST
55406: LIST
55407: LIST
55408: LIST
55409: LIST
55410: LIST
55411: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55412: LD_ADDR_VAR 0 47
55416: PUSH
55417: LD_INT 0
55419: PUSH
55420: LD_INT 0
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: LD_INT 0
55429: PUSH
55430: LD_INT 1
55432: NEG
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 1
55440: PUSH
55441: LD_INT 0
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 1
55450: PUSH
55451: LD_INT 1
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 0
55460: PUSH
55461: LD_INT 1
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 1
55470: NEG
55471: PUSH
55472: LD_INT 0
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 1
55481: NEG
55482: PUSH
55483: LD_INT 1
55485: NEG
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 1
55493: NEG
55494: PUSH
55495: LD_INT 2
55497: NEG
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 0
55505: PUSH
55506: LD_INT 2
55508: NEG
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: LD_INT 1
55516: PUSH
55517: LD_INT 1
55519: NEG
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 2
55527: NEG
55528: PUSH
55529: LD_INT 1
55531: NEG
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 2
55539: NEG
55540: PUSH
55541: LD_INT 2
55543: NEG
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55563: LD_ADDR_VAR 0 48
55567: PUSH
55568: LD_INT 0
55570: PUSH
55571: LD_INT 0
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 0
55580: PUSH
55581: LD_INT 1
55583: NEG
55584: PUSH
55585: EMPTY
55586: LIST
55587: LIST
55588: PUSH
55589: LD_INT 1
55591: PUSH
55592: LD_INT 0
55594: PUSH
55595: EMPTY
55596: LIST
55597: LIST
55598: PUSH
55599: LD_INT 1
55601: PUSH
55602: LD_INT 1
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 0
55611: PUSH
55612: LD_INT 1
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 1
55621: NEG
55622: PUSH
55623: LD_INT 0
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 1
55632: NEG
55633: PUSH
55634: LD_INT 1
55636: NEG
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 1
55644: NEG
55645: PUSH
55646: LD_INT 2
55648: NEG
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 0
55656: PUSH
55657: LD_INT 2
55659: NEG
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 1
55667: PUSH
55668: LD_INT 1
55670: NEG
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 2
55678: PUSH
55679: LD_INT 0
55681: PUSH
55682: EMPTY
55683: LIST
55684: LIST
55685: PUSH
55686: LD_INT 2
55688: PUSH
55689: LD_INT 1
55691: PUSH
55692: EMPTY
55693: LIST
55694: LIST
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: LIST
55703: LIST
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55710: LD_ADDR_VAR 0 49
55714: PUSH
55715: LD_INT 0
55717: PUSH
55718: LD_INT 0
55720: PUSH
55721: EMPTY
55722: LIST
55723: LIST
55724: PUSH
55725: LD_INT 0
55727: PUSH
55728: LD_INT 1
55730: NEG
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 1
55738: PUSH
55739: LD_INT 0
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 1
55748: PUSH
55749: LD_INT 1
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 0
55758: PUSH
55759: LD_INT 1
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 1
55768: NEG
55769: PUSH
55770: LD_INT 0
55772: PUSH
55773: EMPTY
55774: LIST
55775: LIST
55776: PUSH
55777: LD_INT 1
55779: NEG
55780: PUSH
55781: LD_INT 1
55783: NEG
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 1
55791: PUSH
55792: LD_INT 1
55794: NEG
55795: PUSH
55796: EMPTY
55797: LIST
55798: LIST
55799: PUSH
55800: LD_INT 2
55802: PUSH
55803: LD_INT 0
55805: PUSH
55806: EMPTY
55807: LIST
55808: LIST
55809: PUSH
55810: LD_INT 2
55812: PUSH
55813: LD_INT 1
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: PUSH
55820: LD_INT 2
55822: PUSH
55823: LD_INT 2
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: LD_INT 1
55832: PUSH
55833: LD_INT 2
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55854: LD_ADDR_VAR 0 50
55858: PUSH
55859: LD_INT 0
55861: PUSH
55862: LD_INT 0
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 0
55871: PUSH
55872: LD_INT 1
55874: NEG
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: LD_INT 1
55882: PUSH
55883: LD_INT 0
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 1
55892: PUSH
55893: LD_INT 1
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: PUSH
55900: LD_INT 0
55902: PUSH
55903: LD_INT 1
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 1
55912: NEG
55913: PUSH
55914: LD_INT 0
55916: PUSH
55917: EMPTY
55918: LIST
55919: LIST
55920: PUSH
55921: LD_INT 1
55923: NEG
55924: PUSH
55925: LD_INT 1
55927: NEG
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: LD_INT 2
55935: PUSH
55936: LD_INT 1
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: LD_INT 2
55945: PUSH
55946: LD_INT 2
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 1
55955: PUSH
55956: LD_INT 2
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 0
55965: PUSH
55966: LD_INT 2
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: PUSH
55973: LD_INT 1
55975: NEG
55976: PUSH
55977: LD_INT 1
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55998: LD_ADDR_VAR 0 51
56002: PUSH
56003: LD_INT 0
56005: PUSH
56006: LD_INT 0
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 0
56015: PUSH
56016: LD_INT 1
56018: NEG
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 1
56026: PUSH
56027: LD_INT 0
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 1
56036: PUSH
56037: LD_INT 1
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 0
56046: PUSH
56047: LD_INT 1
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: PUSH
56054: LD_INT 1
56056: NEG
56057: PUSH
56058: LD_INT 0
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: LD_INT 1
56067: NEG
56068: PUSH
56069: LD_INT 1
56071: NEG
56072: PUSH
56073: EMPTY
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 1
56079: PUSH
56080: LD_INT 2
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 0
56089: PUSH
56090: LD_INT 2
56092: PUSH
56093: EMPTY
56094: LIST
56095: LIST
56096: PUSH
56097: LD_INT 1
56099: NEG
56100: PUSH
56101: LD_INT 1
56103: PUSH
56104: EMPTY
56105: LIST
56106: LIST
56107: PUSH
56108: LD_INT 2
56110: NEG
56111: PUSH
56112: LD_INT 0
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 2
56121: NEG
56122: PUSH
56123: LD_INT 1
56125: NEG
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: LIST
56137: LIST
56138: LIST
56139: LIST
56140: LIST
56141: LIST
56142: LIST
56143: LIST
56144: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56145: LD_ADDR_VAR 0 52
56149: PUSH
56150: LD_INT 0
56152: PUSH
56153: LD_INT 0
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 0
56162: PUSH
56163: LD_INT 1
56165: NEG
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 1
56173: PUSH
56174: LD_INT 0
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 1
56183: PUSH
56184: LD_INT 1
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 0
56193: PUSH
56194: LD_INT 1
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 1
56203: NEG
56204: PUSH
56205: LD_INT 0
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 1
56214: NEG
56215: PUSH
56216: LD_INT 1
56218: NEG
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 1
56226: NEG
56227: PUSH
56228: LD_INT 2
56230: NEG
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: LD_INT 1
56238: NEG
56239: PUSH
56240: LD_INT 1
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 2
56249: NEG
56250: PUSH
56251: LD_INT 0
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: LD_INT 2
56260: NEG
56261: PUSH
56262: LD_INT 1
56264: NEG
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: LD_INT 2
56272: NEG
56273: PUSH
56274: LD_INT 2
56276: NEG
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: PUSH
56282: EMPTY
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56296: LD_ADDR_VAR 0 53
56300: PUSH
56301: LD_INT 0
56303: PUSH
56304: LD_INT 0
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 0
56313: PUSH
56314: LD_INT 1
56316: NEG
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 1
56324: PUSH
56325: LD_INT 0
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 1
56334: PUSH
56335: LD_INT 1
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 0
56344: PUSH
56345: LD_INT 1
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 1
56354: NEG
56355: PUSH
56356: LD_INT 0
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: LD_INT 1
56365: NEG
56366: PUSH
56367: LD_INT 1
56369: NEG
56370: PUSH
56371: EMPTY
56372: LIST
56373: LIST
56374: PUSH
56375: LD_INT 1
56377: NEG
56378: PUSH
56379: LD_INT 2
56381: NEG
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 0
56389: PUSH
56390: LD_INT 2
56392: NEG
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 1
56400: PUSH
56401: LD_INT 1
56403: NEG
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 2
56411: PUSH
56412: LD_INT 0
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: LD_INT 2
56421: PUSH
56422: LD_INT 1
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 2
56431: PUSH
56432: LD_INT 2
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: PUSH
56439: LD_INT 1
56441: PUSH
56442: LD_INT 2
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 0
56451: PUSH
56452: LD_INT 2
56454: PUSH
56455: EMPTY
56456: LIST
56457: LIST
56458: PUSH
56459: LD_INT 1
56461: NEG
56462: PUSH
56463: LD_INT 1
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 2
56472: NEG
56473: PUSH
56474: LD_INT 0
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: LD_INT 2
56483: NEG
56484: PUSH
56485: LD_INT 1
56487: NEG
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: LD_INT 2
56495: NEG
56496: PUSH
56497: LD_INT 2
56499: NEG
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: LIST
56509: LIST
56510: LIST
56511: LIST
56512: LIST
56513: LIST
56514: LIST
56515: LIST
56516: LIST
56517: LIST
56518: LIST
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56526: LD_ADDR_VAR 0 54
56530: PUSH
56531: LD_INT 0
56533: PUSH
56534: LD_INT 0
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 0
56543: PUSH
56544: LD_INT 1
56546: NEG
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 1
56554: PUSH
56555: LD_INT 0
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: PUSH
56562: LD_INT 1
56564: PUSH
56565: LD_INT 1
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 0
56574: PUSH
56575: LD_INT 1
56577: PUSH
56578: EMPTY
56579: LIST
56580: LIST
56581: PUSH
56582: LD_INT 1
56584: NEG
56585: PUSH
56586: LD_INT 0
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PUSH
56593: LD_INT 1
56595: NEG
56596: PUSH
56597: LD_INT 1
56599: NEG
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: LD_INT 1
56607: NEG
56608: PUSH
56609: LD_INT 2
56611: NEG
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 0
56619: PUSH
56620: LD_INT 2
56622: NEG
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: LD_INT 1
56630: PUSH
56631: LD_INT 1
56633: NEG
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 2
56641: PUSH
56642: LD_INT 0
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 2
56651: PUSH
56652: LD_INT 1
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: LD_INT 2
56661: PUSH
56662: LD_INT 2
56664: PUSH
56665: EMPTY
56666: LIST
56667: LIST
56668: PUSH
56669: LD_INT 1
56671: PUSH
56672: LD_INT 2
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 0
56681: PUSH
56682: LD_INT 2
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 1
56691: NEG
56692: PUSH
56693: LD_INT 1
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 2
56702: NEG
56703: PUSH
56704: LD_INT 0
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: LD_INT 2
56713: NEG
56714: PUSH
56715: LD_INT 1
56717: NEG
56718: PUSH
56719: EMPTY
56720: LIST
56721: LIST
56722: PUSH
56723: LD_INT 2
56725: NEG
56726: PUSH
56727: LD_INT 2
56729: NEG
56730: PUSH
56731: EMPTY
56732: LIST
56733: LIST
56734: PUSH
56735: EMPTY
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56756: LD_ADDR_VAR 0 55
56760: PUSH
56761: LD_INT 0
56763: PUSH
56764: LD_INT 0
56766: PUSH
56767: EMPTY
56768: LIST
56769: LIST
56770: PUSH
56771: LD_INT 0
56773: PUSH
56774: LD_INT 1
56776: NEG
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 1
56784: PUSH
56785: LD_INT 0
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: LD_INT 1
56794: PUSH
56795: LD_INT 1
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 0
56804: PUSH
56805: LD_INT 1
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PUSH
56812: LD_INT 1
56814: NEG
56815: PUSH
56816: LD_INT 0
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: PUSH
56823: LD_INT 1
56825: NEG
56826: PUSH
56827: LD_INT 1
56829: NEG
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PUSH
56835: LD_INT 1
56837: NEG
56838: PUSH
56839: LD_INT 2
56841: NEG
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 0
56849: PUSH
56850: LD_INT 2
56852: NEG
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 1
56860: PUSH
56861: LD_INT 1
56863: NEG
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 2
56871: PUSH
56872: LD_INT 0
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: PUSH
56879: LD_INT 2
56881: PUSH
56882: LD_INT 1
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: PUSH
56889: LD_INT 2
56891: PUSH
56892: LD_INT 2
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: PUSH
56899: LD_INT 1
56901: PUSH
56902: LD_INT 2
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 0
56911: PUSH
56912: LD_INT 2
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 1
56921: NEG
56922: PUSH
56923: LD_INT 1
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: LD_INT 2
56932: NEG
56933: PUSH
56934: LD_INT 0
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: PUSH
56941: LD_INT 2
56943: NEG
56944: PUSH
56945: LD_INT 1
56947: NEG
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: LD_INT 2
56955: NEG
56956: PUSH
56957: LD_INT 2
56959: NEG
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: PUSH
56965: EMPTY
56966: LIST
56967: LIST
56968: LIST
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56986: LD_ADDR_VAR 0 56
56990: PUSH
56991: LD_INT 0
56993: PUSH
56994: LD_INT 0
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: LD_INT 0
57003: PUSH
57004: LD_INT 1
57006: NEG
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: LD_INT 1
57014: PUSH
57015: LD_INT 0
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 1
57024: PUSH
57025: LD_INT 1
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: LD_INT 0
57034: PUSH
57035: LD_INT 1
57037: PUSH
57038: EMPTY
57039: LIST
57040: LIST
57041: PUSH
57042: LD_INT 1
57044: NEG
57045: PUSH
57046: LD_INT 0
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 1
57055: NEG
57056: PUSH
57057: LD_INT 1
57059: NEG
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 1
57067: NEG
57068: PUSH
57069: LD_INT 2
57071: NEG
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 0
57079: PUSH
57080: LD_INT 2
57082: NEG
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: PUSH
57088: LD_INT 1
57090: PUSH
57091: LD_INT 1
57093: NEG
57094: PUSH
57095: EMPTY
57096: LIST
57097: LIST
57098: PUSH
57099: LD_INT 2
57101: PUSH
57102: LD_INT 0
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: LD_INT 2
57111: PUSH
57112: LD_INT 1
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 2
57121: PUSH
57122: LD_INT 2
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 1
57131: PUSH
57132: LD_INT 2
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 0
57141: PUSH
57142: LD_INT 2
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 1
57151: NEG
57152: PUSH
57153: LD_INT 1
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PUSH
57160: LD_INT 2
57162: NEG
57163: PUSH
57164: LD_INT 0
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: LD_INT 2
57173: NEG
57174: PUSH
57175: LD_INT 1
57177: NEG
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 2
57185: NEG
57186: PUSH
57187: LD_INT 2
57189: NEG
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: LIST
57199: LIST
57200: LIST
57201: LIST
57202: LIST
57203: LIST
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: LIST
57209: LIST
57210: LIST
57211: LIST
57212: LIST
57213: LIST
57214: LIST
57215: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57216: LD_ADDR_VAR 0 57
57220: PUSH
57221: LD_INT 0
57223: PUSH
57224: LD_INT 0
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 0
57233: PUSH
57234: LD_INT 1
57236: NEG
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: LD_INT 1
57244: PUSH
57245: LD_INT 0
57247: PUSH
57248: EMPTY
57249: LIST
57250: LIST
57251: PUSH
57252: LD_INT 1
57254: PUSH
57255: LD_INT 1
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: LD_INT 0
57264: PUSH
57265: LD_INT 1
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 1
57274: NEG
57275: PUSH
57276: LD_INT 0
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 1
57285: NEG
57286: PUSH
57287: LD_INT 1
57289: NEG
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 1
57297: NEG
57298: PUSH
57299: LD_INT 2
57301: NEG
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 0
57309: PUSH
57310: LD_INT 2
57312: NEG
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: LD_INT 1
57320: PUSH
57321: LD_INT 1
57323: NEG
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: PUSH
57329: LD_INT 2
57331: PUSH
57332: LD_INT 0
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: LD_INT 2
57341: PUSH
57342: LD_INT 1
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: LD_INT 2
57351: PUSH
57352: LD_INT 2
57354: PUSH
57355: EMPTY
57356: LIST
57357: LIST
57358: PUSH
57359: LD_INT 1
57361: PUSH
57362: LD_INT 2
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 0
57371: PUSH
57372: LD_INT 2
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: PUSH
57379: LD_INT 1
57381: NEG
57382: PUSH
57383: LD_INT 1
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 2
57392: NEG
57393: PUSH
57394: LD_INT 0
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: LD_INT 2
57403: NEG
57404: PUSH
57405: LD_INT 1
57407: NEG
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 2
57415: NEG
57416: PUSH
57417: LD_INT 2
57419: NEG
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: LIST
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57446: LD_ADDR_VAR 0 58
57450: PUSH
57451: LD_INT 0
57453: PUSH
57454: LD_INT 0
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: LD_INT 0
57463: PUSH
57464: LD_INT 1
57466: NEG
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: LD_INT 1
57474: PUSH
57475: LD_INT 0
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 1
57484: PUSH
57485: LD_INT 1
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: LD_INT 0
57494: PUSH
57495: LD_INT 1
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: LD_INT 1
57504: NEG
57505: PUSH
57506: LD_INT 0
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: LD_INT 1
57515: NEG
57516: PUSH
57517: LD_INT 1
57519: NEG
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 1
57527: NEG
57528: PUSH
57529: LD_INT 2
57531: NEG
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 0
57539: PUSH
57540: LD_INT 2
57542: NEG
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: PUSH
57548: LD_INT 1
57550: PUSH
57551: LD_INT 1
57553: NEG
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: PUSH
57559: LD_INT 2
57561: PUSH
57562: LD_INT 0
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: LD_INT 2
57571: PUSH
57572: LD_INT 1
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: LD_INT 2
57581: PUSH
57582: LD_INT 2
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_INT 1
57591: PUSH
57592: LD_INT 2
57594: PUSH
57595: EMPTY
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 0
57601: PUSH
57602: LD_INT 2
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 1
57611: NEG
57612: PUSH
57613: LD_INT 1
57615: PUSH
57616: EMPTY
57617: LIST
57618: LIST
57619: PUSH
57620: LD_INT 2
57622: NEG
57623: PUSH
57624: LD_INT 0
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: PUSH
57631: LD_INT 2
57633: NEG
57634: PUSH
57635: LD_INT 1
57637: NEG
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: PUSH
57643: LD_INT 2
57645: NEG
57646: PUSH
57647: LD_INT 2
57649: NEG
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: LIST
57669: LIST
57670: LIST
57671: LIST
57672: LIST
57673: LIST
57674: LIST
57675: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57676: LD_ADDR_VAR 0 59
57680: PUSH
57681: LD_INT 0
57683: PUSH
57684: LD_INT 0
57686: PUSH
57687: EMPTY
57688: LIST
57689: LIST
57690: PUSH
57691: LD_INT 0
57693: PUSH
57694: LD_INT 1
57696: NEG
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: LD_INT 1
57704: PUSH
57705: LD_INT 0
57707: PUSH
57708: EMPTY
57709: LIST
57710: LIST
57711: PUSH
57712: LD_INT 1
57714: PUSH
57715: LD_INT 1
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: PUSH
57722: LD_INT 0
57724: PUSH
57725: LD_INT 1
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PUSH
57732: LD_INT 1
57734: NEG
57735: PUSH
57736: LD_INT 0
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: LD_INT 1
57745: NEG
57746: PUSH
57747: LD_INT 1
57749: NEG
57750: PUSH
57751: EMPTY
57752: LIST
57753: LIST
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: LIST
57759: LIST
57760: LIST
57761: LIST
57762: LIST
57763: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57764: LD_ADDR_VAR 0 60
57768: PUSH
57769: LD_INT 0
57771: PUSH
57772: LD_INT 0
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 0
57781: PUSH
57782: LD_INT 1
57784: NEG
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: LD_INT 1
57792: PUSH
57793: LD_INT 0
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: LD_INT 1
57802: PUSH
57803: LD_INT 1
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 0
57812: PUSH
57813: LD_INT 1
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 1
57822: NEG
57823: PUSH
57824: LD_INT 0
57826: PUSH
57827: EMPTY
57828: LIST
57829: LIST
57830: PUSH
57831: LD_INT 1
57833: NEG
57834: PUSH
57835: LD_INT 1
57837: NEG
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: LIST
57847: LIST
57848: LIST
57849: LIST
57850: LIST
57851: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57852: LD_ADDR_VAR 0 61
57856: PUSH
57857: LD_INT 0
57859: PUSH
57860: LD_INT 0
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: PUSH
57867: LD_INT 0
57869: PUSH
57870: LD_INT 1
57872: NEG
57873: PUSH
57874: EMPTY
57875: LIST
57876: LIST
57877: PUSH
57878: LD_INT 1
57880: PUSH
57881: LD_INT 0
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: PUSH
57888: LD_INT 1
57890: PUSH
57891: LD_INT 1
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: PUSH
57898: LD_INT 0
57900: PUSH
57901: LD_INT 1
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: LD_INT 1
57910: NEG
57911: PUSH
57912: LD_INT 0
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: LD_INT 1
57921: NEG
57922: PUSH
57923: LD_INT 1
57925: NEG
57926: PUSH
57927: EMPTY
57928: LIST
57929: LIST
57930: PUSH
57931: EMPTY
57932: LIST
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57940: LD_ADDR_VAR 0 62
57944: PUSH
57945: LD_INT 0
57947: PUSH
57948: LD_INT 0
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: PUSH
57955: LD_INT 0
57957: PUSH
57958: LD_INT 1
57960: NEG
57961: PUSH
57962: EMPTY
57963: LIST
57964: LIST
57965: PUSH
57966: LD_INT 1
57968: PUSH
57969: LD_INT 0
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: LD_INT 1
57978: PUSH
57979: LD_INT 1
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: LD_INT 0
57988: PUSH
57989: LD_INT 1
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 1
57998: NEG
57999: PUSH
58000: LD_INT 0
58002: PUSH
58003: EMPTY
58004: LIST
58005: LIST
58006: PUSH
58007: LD_INT 1
58009: NEG
58010: PUSH
58011: LD_INT 1
58013: NEG
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: EMPTY
58020: LIST
58021: LIST
58022: LIST
58023: LIST
58024: LIST
58025: LIST
58026: LIST
58027: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58028: LD_ADDR_VAR 0 63
58032: PUSH
58033: LD_INT 0
58035: PUSH
58036: LD_INT 0
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: PUSH
58043: LD_INT 0
58045: PUSH
58046: LD_INT 1
58048: NEG
58049: PUSH
58050: EMPTY
58051: LIST
58052: LIST
58053: PUSH
58054: LD_INT 1
58056: PUSH
58057: LD_INT 0
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: LD_INT 1
58066: PUSH
58067: LD_INT 1
58069: PUSH
58070: EMPTY
58071: LIST
58072: LIST
58073: PUSH
58074: LD_INT 0
58076: PUSH
58077: LD_INT 1
58079: PUSH
58080: EMPTY
58081: LIST
58082: LIST
58083: PUSH
58084: LD_INT 1
58086: NEG
58087: PUSH
58088: LD_INT 0
58090: PUSH
58091: EMPTY
58092: LIST
58093: LIST
58094: PUSH
58095: LD_INT 1
58097: NEG
58098: PUSH
58099: LD_INT 1
58101: NEG
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: LIST
58115: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58116: LD_ADDR_VAR 0 64
58120: PUSH
58121: LD_INT 0
58123: PUSH
58124: LD_INT 0
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 0
58133: PUSH
58134: LD_INT 1
58136: NEG
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: PUSH
58142: LD_INT 1
58144: PUSH
58145: LD_INT 0
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: PUSH
58152: LD_INT 1
58154: PUSH
58155: LD_INT 1
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: LD_INT 0
58164: PUSH
58165: LD_INT 1
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: LD_INT 1
58174: NEG
58175: PUSH
58176: LD_INT 0
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: PUSH
58183: LD_INT 1
58185: NEG
58186: PUSH
58187: LD_INT 1
58189: NEG
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: PUSH
58195: EMPTY
58196: LIST
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: ST_TO_ADDR
// end ; 1 :
58204: GO 64101
58206: LD_INT 1
58208: DOUBLE
58209: EQUAL
58210: IFTRUE 58214
58212: GO 60837
58214: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58215: LD_ADDR_VAR 0 11
58219: PUSH
58220: LD_INT 1
58222: NEG
58223: PUSH
58224: LD_INT 3
58226: NEG
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 0
58234: PUSH
58235: LD_INT 3
58237: NEG
58238: PUSH
58239: EMPTY
58240: LIST
58241: LIST
58242: PUSH
58243: LD_INT 1
58245: PUSH
58246: LD_INT 2
58248: NEG
58249: PUSH
58250: EMPTY
58251: LIST
58252: LIST
58253: PUSH
58254: EMPTY
58255: LIST
58256: LIST
58257: LIST
58258: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58259: LD_ADDR_VAR 0 12
58263: PUSH
58264: LD_INT 2
58266: PUSH
58267: LD_INT 1
58269: NEG
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 3
58277: PUSH
58278: LD_INT 0
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: LD_INT 3
58287: PUSH
58288: LD_INT 1
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: LIST
58299: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58300: LD_ADDR_VAR 0 13
58304: PUSH
58305: LD_INT 3
58307: PUSH
58308: LD_INT 2
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: PUSH
58315: LD_INT 3
58317: PUSH
58318: LD_INT 3
58320: PUSH
58321: EMPTY
58322: LIST
58323: LIST
58324: PUSH
58325: LD_INT 2
58327: PUSH
58328: LD_INT 3
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: LIST
58339: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58340: LD_ADDR_VAR 0 14
58344: PUSH
58345: LD_INT 1
58347: PUSH
58348: LD_INT 3
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: LD_INT 0
58357: PUSH
58358: LD_INT 3
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PUSH
58365: LD_INT 1
58367: NEG
58368: PUSH
58369: LD_INT 2
58371: PUSH
58372: EMPTY
58373: LIST
58374: LIST
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: LIST
58380: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58381: LD_ADDR_VAR 0 15
58385: PUSH
58386: LD_INT 2
58388: NEG
58389: PUSH
58390: LD_INT 1
58392: PUSH
58393: EMPTY
58394: LIST
58395: LIST
58396: PUSH
58397: LD_INT 3
58399: NEG
58400: PUSH
58401: LD_INT 0
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: LD_INT 3
58410: NEG
58411: PUSH
58412: LD_INT 1
58414: NEG
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: LIST
58424: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58425: LD_ADDR_VAR 0 16
58429: PUSH
58430: LD_INT 2
58432: NEG
58433: PUSH
58434: LD_INT 3
58436: NEG
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PUSH
58442: LD_INT 3
58444: NEG
58445: PUSH
58446: LD_INT 2
58448: NEG
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_INT 3
58456: NEG
58457: PUSH
58458: LD_INT 3
58460: NEG
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: LIST
58470: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58471: LD_ADDR_VAR 0 17
58475: PUSH
58476: LD_INT 1
58478: NEG
58479: PUSH
58480: LD_INT 3
58482: NEG
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: PUSH
58488: LD_INT 0
58490: PUSH
58491: LD_INT 3
58493: NEG
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 1
58501: PUSH
58502: LD_INT 2
58504: NEG
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: LIST
58514: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58515: LD_ADDR_VAR 0 18
58519: PUSH
58520: LD_INT 2
58522: PUSH
58523: LD_INT 1
58525: NEG
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: LD_INT 3
58533: PUSH
58534: LD_INT 0
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: PUSH
58541: LD_INT 3
58543: PUSH
58544: LD_INT 1
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: LIST
58555: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58556: LD_ADDR_VAR 0 19
58560: PUSH
58561: LD_INT 3
58563: PUSH
58564: LD_INT 2
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: LD_INT 3
58573: PUSH
58574: LD_INT 3
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: LD_INT 2
58583: PUSH
58584: LD_INT 3
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: LIST
58595: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58596: LD_ADDR_VAR 0 20
58600: PUSH
58601: LD_INT 1
58603: PUSH
58604: LD_INT 3
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: PUSH
58611: LD_INT 0
58613: PUSH
58614: LD_INT 3
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: LD_INT 1
58623: NEG
58624: PUSH
58625: LD_INT 2
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: LIST
58636: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58637: LD_ADDR_VAR 0 21
58641: PUSH
58642: LD_INT 2
58644: NEG
58645: PUSH
58646: LD_INT 1
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: PUSH
58653: LD_INT 3
58655: NEG
58656: PUSH
58657: LD_INT 0
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PUSH
58664: LD_INT 3
58666: NEG
58667: PUSH
58668: LD_INT 1
58670: NEG
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: EMPTY
58677: LIST
58678: LIST
58679: LIST
58680: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58681: LD_ADDR_VAR 0 22
58685: PUSH
58686: LD_INT 2
58688: NEG
58689: PUSH
58690: LD_INT 3
58692: NEG
58693: PUSH
58694: EMPTY
58695: LIST
58696: LIST
58697: PUSH
58698: LD_INT 3
58700: NEG
58701: PUSH
58702: LD_INT 2
58704: NEG
58705: PUSH
58706: EMPTY
58707: LIST
58708: LIST
58709: PUSH
58710: LD_INT 3
58712: NEG
58713: PUSH
58714: LD_INT 3
58716: NEG
58717: PUSH
58718: EMPTY
58719: LIST
58720: LIST
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: LIST
58726: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
58727: LD_ADDR_VAR 0 23
58731: PUSH
58732: LD_INT 0
58734: PUSH
58735: LD_INT 3
58737: NEG
58738: PUSH
58739: EMPTY
58740: LIST
58741: LIST
58742: PUSH
58743: LD_INT 1
58745: NEG
58746: PUSH
58747: LD_INT 4
58749: NEG
58750: PUSH
58751: EMPTY
58752: LIST
58753: LIST
58754: PUSH
58755: LD_INT 1
58757: PUSH
58758: LD_INT 3
58760: NEG
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: PUSH
58766: EMPTY
58767: LIST
58768: LIST
58769: LIST
58770: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
58771: LD_ADDR_VAR 0 24
58775: PUSH
58776: LD_INT 3
58778: PUSH
58779: LD_INT 0
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: PUSH
58786: LD_INT 3
58788: PUSH
58789: LD_INT 1
58791: NEG
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: LD_INT 4
58799: PUSH
58800: LD_INT 1
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: LIST
58811: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
58812: LD_ADDR_VAR 0 25
58816: PUSH
58817: LD_INT 3
58819: PUSH
58820: LD_INT 3
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: LD_INT 4
58829: PUSH
58830: LD_INT 3
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 3
58839: PUSH
58840: LD_INT 4
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: LIST
58851: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
58852: LD_ADDR_VAR 0 26
58856: PUSH
58857: LD_INT 0
58859: PUSH
58860: LD_INT 3
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 1
58869: PUSH
58870: LD_INT 4
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 1
58879: NEG
58880: PUSH
58881: LD_INT 3
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: EMPTY
58889: LIST
58890: LIST
58891: LIST
58892: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
58893: LD_ADDR_VAR 0 27
58897: PUSH
58898: LD_INT 3
58900: NEG
58901: PUSH
58902: LD_INT 0
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 3
58911: NEG
58912: PUSH
58913: LD_INT 1
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: PUSH
58920: LD_INT 4
58922: NEG
58923: PUSH
58924: LD_INT 1
58926: NEG
58927: PUSH
58928: EMPTY
58929: LIST
58930: LIST
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: LIST
58936: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
58937: LD_ADDR_VAR 0 28
58941: PUSH
58942: LD_INT 3
58944: NEG
58945: PUSH
58946: LD_INT 3
58948: NEG
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 3
58956: NEG
58957: PUSH
58958: LD_INT 4
58960: NEG
58961: PUSH
58962: EMPTY
58963: LIST
58964: LIST
58965: PUSH
58966: LD_INT 4
58968: NEG
58969: PUSH
58970: LD_INT 3
58972: NEG
58973: PUSH
58974: EMPTY
58975: LIST
58976: LIST
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: LIST
58982: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
58983: LD_ADDR_VAR 0 29
58987: PUSH
58988: LD_INT 1
58990: NEG
58991: PUSH
58992: LD_INT 3
58994: NEG
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: LD_INT 0
59002: PUSH
59003: LD_INT 3
59005: NEG
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: PUSH
59011: LD_INT 1
59013: PUSH
59014: LD_INT 2
59016: NEG
59017: PUSH
59018: EMPTY
59019: LIST
59020: LIST
59021: PUSH
59022: LD_INT 1
59024: NEG
59025: PUSH
59026: LD_INT 4
59028: NEG
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: PUSH
59034: LD_INT 0
59036: PUSH
59037: LD_INT 4
59039: NEG
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: PUSH
59045: LD_INT 1
59047: PUSH
59048: LD_INT 3
59050: NEG
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 1
59058: NEG
59059: PUSH
59060: LD_INT 5
59062: NEG
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: LD_INT 0
59070: PUSH
59071: LD_INT 5
59073: NEG
59074: PUSH
59075: EMPTY
59076: LIST
59077: LIST
59078: PUSH
59079: LD_INT 1
59081: PUSH
59082: LD_INT 4
59084: NEG
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: PUSH
59090: LD_INT 1
59092: NEG
59093: PUSH
59094: LD_INT 6
59096: NEG
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 0
59104: PUSH
59105: LD_INT 6
59107: NEG
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 1
59115: PUSH
59116: LD_INT 5
59118: NEG
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: LIST
59137: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
59138: LD_ADDR_VAR 0 30
59142: PUSH
59143: LD_INT 2
59145: PUSH
59146: LD_INT 1
59148: NEG
59149: PUSH
59150: EMPTY
59151: LIST
59152: LIST
59153: PUSH
59154: LD_INT 3
59156: PUSH
59157: LD_INT 0
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 3
59166: PUSH
59167: LD_INT 1
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: PUSH
59174: LD_INT 3
59176: PUSH
59177: LD_INT 1
59179: NEG
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: LD_INT 4
59187: PUSH
59188: LD_INT 0
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: LD_INT 4
59197: PUSH
59198: LD_INT 1
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: LD_INT 4
59207: PUSH
59208: LD_INT 1
59210: NEG
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: PUSH
59216: LD_INT 5
59218: PUSH
59219: LD_INT 0
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: PUSH
59226: LD_INT 5
59228: PUSH
59229: LD_INT 1
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: PUSH
59236: LD_INT 5
59238: PUSH
59239: LD_INT 1
59241: NEG
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: PUSH
59247: LD_INT 6
59249: PUSH
59250: LD_INT 0
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: PUSH
59257: LD_INT 6
59259: PUSH
59260: LD_INT 1
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: LIST
59271: LIST
59272: LIST
59273: LIST
59274: LIST
59275: LIST
59276: LIST
59277: LIST
59278: LIST
59279: LIST
59280: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
59281: LD_ADDR_VAR 0 31
59285: PUSH
59286: LD_INT 3
59288: PUSH
59289: LD_INT 2
59291: PUSH
59292: EMPTY
59293: LIST
59294: LIST
59295: PUSH
59296: LD_INT 3
59298: PUSH
59299: LD_INT 3
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: LD_INT 2
59308: PUSH
59309: LD_INT 3
59311: PUSH
59312: EMPTY
59313: LIST
59314: LIST
59315: PUSH
59316: LD_INT 4
59318: PUSH
59319: LD_INT 3
59321: PUSH
59322: EMPTY
59323: LIST
59324: LIST
59325: PUSH
59326: LD_INT 4
59328: PUSH
59329: LD_INT 4
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: PUSH
59336: LD_INT 3
59338: PUSH
59339: LD_INT 4
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: LD_INT 5
59348: PUSH
59349: LD_INT 4
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: LD_INT 5
59358: PUSH
59359: LD_INT 5
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 4
59368: PUSH
59369: LD_INT 5
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: LD_INT 6
59378: PUSH
59379: LD_INT 5
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 6
59388: PUSH
59389: LD_INT 6
59391: PUSH
59392: EMPTY
59393: LIST
59394: LIST
59395: PUSH
59396: LD_INT 5
59398: PUSH
59399: LD_INT 6
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: PUSH
59406: EMPTY
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: LIST
59412: LIST
59413: LIST
59414: LIST
59415: LIST
59416: LIST
59417: LIST
59418: LIST
59419: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
59420: LD_ADDR_VAR 0 32
59424: PUSH
59425: LD_INT 1
59427: PUSH
59428: LD_INT 3
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: PUSH
59435: LD_INT 0
59437: PUSH
59438: LD_INT 3
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: PUSH
59445: LD_INT 1
59447: NEG
59448: PUSH
59449: LD_INT 2
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: PUSH
59456: LD_INT 1
59458: PUSH
59459: LD_INT 4
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: PUSH
59466: LD_INT 0
59468: PUSH
59469: LD_INT 4
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PUSH
59476: LD_INT 1
59478: NEG
59479: PUSH
59480: LD_INT 3
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PUSH
59487: LD_INT 1
59489: PUSH
59490: LD_INT 5
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: PUSH
59497: LD_INT 0
59499: PUSH
59500: LD_INT 5
59502: PUSH
59503: EMPTY
59504: LIST
59505: LIST
59506: PUSH
59507: LD_INT 1
59509: NEG
59510: PUSH
59511: LD_INT 4
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 1
59520: PUSH
59521: LD_INT 6
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: PUSH
59528: LD_INT 0
59530: PUSH
59531: LD_INT 6
59533: PUSH
59534: EMPTY
59535: LIST
59536: LIST
59537: PUSH
59538: LD_INT 1
59540: NEG
59541: PUSH
59542: LD_INT 5
59544: PUSH
59545: EMPTY
59546: LIST
59547: LIST
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: LIST
59553: LIST
59554: LIST
59555: LIST
59556: LIST
59557: LIST
59558: LIST
59559: LIST
59560: LIST
59561: LIST
59562: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
59563: LD_ADDR_VAR 0 33
59567: PUSH
59568: LD_INT 2
59570: NEG
59571: PUSH
59572: LD_INT 1
59574: PUSH
59575: EMPTY
59576: LIST
59577: LIST
59578: PUSH
59579: LD_INT 3
59581: NEG
59582: PUSH
59583: LD_INT 0
59585: PUSH
59586: EMPTY
59587: LIST
59588: LIST
59589: PUSH
59590: LD_INT 3
59592: NEG
59593: PUSH
59594: LD_INT 1
59596: NEG
59597: PUSH
59598: EMPTY
59599: LIST
59600: LIST
59601: PUSH
59602: LD_INT 3
59604: NEG
59605: PUSH
59606: LD_INT 1
59608: PUSH
59609: EMPTY
59610: LIST
59611: LIST
59612: PUSH
59613: LD_INT 4
59615: NEG
59616: PUSH
59617: LD_INT 0
59619: PUSH
59620: EMPTY
59621: LIST
59622: LIST
59623: PUSH
59624: LD_INT 4
59626: NEG
59627: PUSH
59628: LD_INT 1
59630: NEG
59631: PUSH
59632: EMPTY
59633: LIST
59634: LIST
59635: PUSH
59636: LD_INT 4
59638: NEG
59639: PUSH
59640: LD_INT 1
59642: PUSH
59643: EMPTY
59644: LIST
59645: LIST
59646: PUSH
59647: LD_INT 5
59649: NEG
59650: PUSH
59651: LD_INT 0
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: PUSH
59658: LD_INT 5
59660: NEG
59661: PUSH
59662: LD_INT 1
59664: NEG
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: LD_INT 5
59672: NEG
59673: PUSH
59674: LD_INT 1
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: PUSH
59681: LD_INT 6
59683: NEG
59684: PUSH
59685: LD_INT 0
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: PUSH
59692: LD_INT 6
59694: NEG
59695: PUSH
59696: LD_INT 1
59698: NEG
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: LIST
59710: LIST
59711: LIST
59712: LIST
59713: LIST
59714: LIST
59715: LIST
59716: LIST
59717: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
59718: LD_ADDR_VAR 0 34
59722: PUSH
59723: LD_INT 2
59725: NEG
59726: PUSH
59727: LD_INT 3
59729: NEG
59730: PUSH
59731: EMPTY
59732: LIST
59733: LIST
59734: PUSH
59735: LD_INT 3
59737: NEG
59738: PUSH
59739: LD_INT 2
59741: NEG
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: PUSH
59747: LD_INT 3
59749: NEG
59750: PUSH
59751: LD_INT 3
59753: NEG
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: LD_INT 3
59761: NEG
59762: PUSH
59763: LD_INT 4
59765: NEG
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: LD_INT 4
59773: NEG
59774: PUSH
59775: LD_INT 3
59777: NEG
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: PUSH
59783: LD_INT 4
59785: NEG
59786: PUSH
59787: LD_INT 4
59789: NEG
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: LD_INT 4
59797: NEG
59798: PUSH
59799: LD_INT 5
59801: NEG
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: PUSH
59807: LD_INT 5
59809: NEG
59810: PUSH
59811: LD_INT 4
59813: NEG
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: PUSH
59819: LD_INT 5
59821: NEG
59822: PUSH
59823: LD_INT 5
59825: NEG
59826: PUSH
59827: EMPTY
59828: LIST
59829: LIST
59830: PUSH
59831: LD_INT 5
59833: NEG
59834: PUSH
59835: LD_INT 6
59837: NEG
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: PUSH
59843: LD_INT 6
59845: NEG
59846: PUSH
59847: LD_INT 5
59849: NEG
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PUSH
59855: LD_INT 6
59857: NEG
59858: PUSH
59859: LD_INT 6
59861: NEG
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: LIST
59871: LIST
59872: LIST
59873: LIST
59874: LIST
59875: LIST
59876: LIST
59877: LIST
59878: LIST
59879: LIST
59880: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
59881: LD_ADDR_VAR 0 41
59885: PUSH
59886: LD_INT 0
59888: PUSH
59889: LD_INT 2
59891: NEG
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: PUSH
59897: LD_INT 1
59899: NEG
59900: PUSH
59901: LD_INT 3
59903: NEG
59904: PUSH
59905: EMPTY
59906: LIST
59907: LIST
59908: PUSH
59909: LD_INT 1
59911: PUSH
59912: LD_INT 2
59914: NEG
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: PUSH
59920: EMPTY
59921: LIST
59922: LIST
59923: LIST
59924: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
59925: LD_ADDR_VAR 0 42
59929: PUSH
59930: LD_INT 2
59932: PUSH
59933: LD_INT 0
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 2
59942: PUSH
59943: LD_INT 1
59945: NEG
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 3
59953: PUSH
59954: LD_INT 1
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: LIST
59965: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
59966: LD_ADDR_VAR 0 43
59970: PUSH
59971: LD_INT 2
59973: PUSH
59974: LD_INT 2
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: PUSH
59981: LD_INT 3
59983: PUSH
59984: LD_INT 2
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: PUSH
59991: LD_INT 2
59993: PUSH
59994: LD_INT 3
59996: PUSH
59997: EMPTY
59998: LIST
59999: LIST
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: LIST
60005: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
60006: LD_ADDR_VAR 0 44
60010: PUSH
60011: LD_INT 0
60013: PUSH
60014: LD_INT 2
60016: PUSH
60017: EMPTY
60018: LIST
60019: LIST
60020: PUSH
60021: LD_INT 1
60023: PUSH
60024: LD_INT 3
60026: PUSH
60027: EMPTY
60028: LIST
60029: LIST
60030: PUSH
60031: LD_INT 1
60033: NEG
60034: PUSH
60035: LD_INT 2
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: LIST
60046: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60047: LD_ADDR_VAR 0 45
60051: PUSH
60052: LD_INT 2
60054: NEG
60055: PUSH
60056: LD_INT 0
60058: PUSH
60059: EMPTY
60060: LIST
60061: LIST
60062: PUSH
60063: LD_INT 2
60065: NEG
60066: PUSH
60067: LD_INT 1
60069: PUSH
60070: EMPTY
60071: LIST
60072: LIST
60073: PUSH
60074: LD_INT 3
60076: NEG
60077: PUSH
60078: LD_INT 1
60080: NEG
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: EMPTY
60087: LIST
60088: LIST
60089: LIST
60090: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
60091: LD_ADDR_VAR 0 46
60095: PUSH
60096: LD_INT 2
60098: NEG
60099: PUSH
60100: LD_INT 2
60102: NEG
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 2
60110: NEG
60111: PUSH
60112: LD_INT 3
60114: NEG
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 3
60122: NEG
60123: PUSH
60124: LD_INT 2
60126: NEG
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: LIST
60136: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
60137: LD_ADDR_VAR 0 47
60141: PUSH
60142: LD_INT 2
60144: NEG
60145: PUSH
60146: LD_INT 3
60148: NEG
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 1
60156: NEG
60157: PUSH
60158: LD_INT 3
60160: NEG
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: PUSH
60166: EMPTY
60167: LIST
60168: LIST
60169: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
60170: LD_ADDR_VAR 0 48
60174: PUSH
60175: LD_INT 1
60177: PUSH
60178: LD_INT 2
60180: NEG
60181: PUSH
60182: EMPTY
60183: LIST
60184: LIST
60185: PUSH
60186: LD_INT 2
60188: PUSH
60189: LD_INT 1
60191: NEG
60192: PUSH
60193: EMPTY
60194: LIST
60195: LIST
60196: PUSH
60197: EMPTY
60198: LIST
60199: LIST
60200: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
60201: LD_ADDR_VAR 0 49
60205: PUSH
60206: LD_INT 3
60208: PUSH
60209: LD_INT 1
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: PUSH
60216: LD_INT 3
60218: PUSH
60219: LD_INT 2
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: EMPTY
60227: LIST
60228: LIST
60229: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
60230: LD_ADDR_VAR 0 50
60234: PUSH
60235: LD_INT 2
60237: PUSH
60238: LD_INT 3
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: PUSH
60245: LD_INT 1
60247: PUSH
60248: LD_INT 3
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60259: LD_ADDR_VAR 0 51
60263: PUSH
60264: LD_INT 1
60266: NEG
60267: PUSH
60268: LD_INT 2
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: PUSH
60275: LD_INT 2
60277: NEG
60278: PUSH
60279: LD_INT 1
60281: PUSH
60282: EMPTY
60283: LIST
60284: LIST
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60290: LD_ADDR_VAR 0 52
60294: PUSH
60295: LD_INT 3
60297: NEG
60298: PUSH
60299: LD_INT 1
60301: NEG
60302: PUSH
60303: EMPTY
60304: LIST
60305: LIST
60306: PUSH
60307: LD_INT 3
60309: NEG
60310: PUSH
60311: LD_INT 2
60313: NEG
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60323: LD_ADDR_VAR 0 53
60327: PUSH
60328: LD_INT 1
60330: NEG
60331: PUSH
60332: LD_INT 3
60334: NEG
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: PUSH
60340: LD_INT 0
60342: PUSH
60343: LD_INT 3
60345: NEG
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: PUSH
60351: LD_INT 1
60353: PUSH
60354: LD_INT 2
60356: NEG
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: EMPTY
60363: LIST
60364: LIST
60365: LIST
60366: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60367: LD_ADDR_VAR 0 54
60371: PUSH
60372: LD_INT 2
60374: PUSH
60375: LD_INT 1
60377: NEG
60378: PUSH
60379: EMPTY
60380: LIST
60381: LIST
60382: PUSH
60383: LD_INT 3
60385: PUSH
60386: LD_INT 0
60388: PUSH
60389: EMPTY
60390: LIST
60391: LIST
60392: PUSH
60393: LD_INT 3
60395: PUSH
60396: LD_INT 1
60398: PUSH
60399: EMPTY
60400: LIST
60401: LIST
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: LIST
60407: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60408: LD_ADDR_VAR 0 55
60412: PUSH
60413: LD_INT 3
60415: PUSH
60416: LD_INT 2
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: LD_INT 3
60425: PUSH
60426: LD_INT 3
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: LD_INT 2
60435: PUSH
60436: LD_INT 3
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: LIST
60447: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60448: LD_ADDR_VAR 0 56
60452: PUSH
60453: LD_INT 1
60455: PUSH
60456: LD_INT 3
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: LD_INT 0
60465: PUSH
60466: LD_INT 3
60468: PUSH
60469: EMPTY
60470: LIST
60471: LIST
60472: PUSH
60473: LD_INT 1
60475: NEG
60476: PUSH
60477: LD_INT 2
60479: PUSH
60480: EMPTY
60481: LIST
60482: LIST
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: LIST
60488: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60489: LD_ADDR_VAR 0 57
60493: PUSH
60494: LD_INT 2
60496: NEG
60497: PUSH
60498: LD_INT 1
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: PUSH
60505: LD_INT 3
60507: NEG
60508: PUSH
60509: LD_INT 0
60511: PUSH
60512: EMPTY
60513: LIST
60514: LIST
60515: PUSH
60516: LD_INT 3
60518: NEG
60519: PUSH
60520: LD_INT 1
60522: NEG
60523: PUSH
60524: EMPTY
60525: LIST
60526: LIST
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: LIST
60532: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60533: LD_ADDR_VAR 0 58
60537: PUSH
60538: LD_INT 2
60540: NEG
60541: PUSH
60542: LD_INT 3
60544: NEG
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: PUSH
60550: LD_INT 3
60552: NEG
60553: PUSH
60554: LD_INT 2
60556: NEG
60557: PUSH
60558: EMPTY
60559: LIST
60560: LIST
60561: PUSH
60562: LD_INT 3
60564: NEG
60565: PUSH
60566: LD_INT 3
60568: NEG
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: LIST
60578: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
60579: LD_ADDR_VAR 0 59
60583: PUSH
60584: LD_INT 1
60586: NEG
60587: PUSH
60588: LD_INT 2
60590: NEG
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: PUSH
60596: LD_INT 0
60598: PUSH
60599: LD_INT 2
60601: NEG
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: PUSH
60607: LD_INT 1
60609: PUSH
60610: LD_INT 1
60612: NEG
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: LIST
60622: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60623: LD_ADDR_VAR 0 60
60627: PUSH
60628: LD_INT 1
60630: PUSH
60631: LD_INT 1
60633: NEG
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: PUSH
60639: LD_INT 2
60641: PUSH
60642: LD_INT 0
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: PUSH
60649: LD_INT 2
60651: PUSH
60652: LD_INT 1
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: PUSH
60659: EMPTY
60660: LIST
60661: LIST
60662: LIST
60663: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60664: LD_ADDR_VAR 0 61
60668: PUSH
60669: LD_INT 2
60671: PUSH
60672: LD_INT 1
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: PUSH
60679: LD_INT 2
60681: PUSH
60682: LD_INT 2
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: PUSH
60689: LD_INT 1
60691: PUSH
60692: LD_INT 2
60694: PUSH
60695: EMPTY
60696: LIST
60697: LIST
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: LIST
60703: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60704: LD_ADDR_VAR 0 62
60708: PUSH
60709: LD_INT 1
60711: PUSH
60712: LD_INT 2
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: PUSH
60719: LD_INT 0
60721: PUSH
60722: LD_INT 2
60724: PUSH
60725: EMPTY
60726: LIST
60727: LIST
60728: PUSH
60729: LD_INT 1
60731: NEG
60732: PUSH
60733: LD_INT 1
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: LIST
60744: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60745: LD_ADDR_VAR 0 63
60749: PUSH
60750: LD_INT 1
60752: NEG
60753: PUSH
60754: LD_INT 1
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 2
60763: NEG
60764: PUSH
60765: LD_INT 0
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: PUSH
60772: LD_INT 2
60774: NEG
60775: PUSH
60776: LD_INT 1
60778: NEG
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: PUSH
60784: EMPTY
60785: LIST
60786: LIST
60787: LIST
60788: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60789: LD_ADDR_VAR 0 64
60793: PUSH
60794: LD_INT 1
60796: NEG
60797: PUSH
60798: LD_INT 2
60800: NEG
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PUSH
60806: LD_INT 2
60808: NEG
60809: PUSH
60810: LD_INT 1
60812: NEG
60813: PUSH
60814: EMPTY
60815: LIST
60816: LIST
60817: PUSH
60818: LD_INT 2
60820: NEG
60821: PUSH
60822: LD_INT 2
60824: NEG
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: PUSH
60830: EMPTY
60831: LIST
60832: LIST
60833: LIST
60834: ST_TO_ADDR
// end ; 2 :
60835: GO 64101
60837: LD_INT 2
60839: DOUBLE
60840: EQUAL
60841: IFTRUE 60845
60843: GO 64100
60845: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
60846: LD_ADDR_VAR 0 29
60850: PUSH
60851: LD_INT 4
60853: PUSH
60854: LD_INT 0
60856: PUSH
60857: EMPTY
60858: LIST
60859: LIST
60860: PUSH
60861: LD_INT 4
60863: PUSH
60864: LD_INT 1
60866: NEG
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: PUSH
60872: LD_INT 5
60874: PUSH
60875: LD_INT 0
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: PUSH
60882: LD_INT 5
60884: PUSH
60885: LD_INT 1
60887: PUSH
60888: EMPTY
60889: LIST
60890: LIST
60891: PUSH
60892: LD_INT 4
60894: PUSH
60895: LD_INT 1
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: PUSH
60902: LD_INT 3
60904: PUSH
60905: LD_INT 0
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: LD_INT 3
60914: PUSH
60915: LD_INT 1
60917: NEG
60918: PUSH
60919: EMPTY
60920: LIST
60921: LIST
60922: PUSH
60923: LD_INT 3
60925: PUSH
60926: LD_INT 2
60928: NEG
60929: PUSH
60930: EMPTY
60931: LIST
60932: LIST
60933: PUSH
60934: LD_INT 5
60936: PUSH
60937: LD_INT 2
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: PUSH
60944: LD_INT 3
60946: PUSH
60947: LD_INT 3
60949: PUSH
60950: EMPTY
60951: LIST
60952: LIST
60953: PUSH
60954: LD_INT 3
60956: PUSH
60957: LD_INT 2
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: PUSH
60964: LD_INT 4
60966: PUSH
60967: LD_INT 3
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: PUSH
60974: LD_INT 4
60976: PUSH
60977: LD_INT 4
60979: PUSH
60980: EMPTY
60981: LIST
60982: LIST
60983: PUSH
60984: LD_INT 3
60986: PUSH
60987: LD_INT 4
60989: PUSH
60990: EMPTY
60991: LIST
60992: LIST
60993: PUSH
60994: LD_INT 2
60996: PUSH
60997: LD_INT 3
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: LD_INT 2
61006: PUSH
61007: LD_INT 2
61009: PUSH
61010: EMPTY
61011: LIST
61012: LIST
61013: PUSH
61014: LD_INT 4
61016: PUSH
61017: LD_INT 2
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: PUSH
61024: LD_INT 2
61026: PUSH
61027: LD_INT 4
61029: PUSH
61030: EMPTY
61031: LIST
61032: LIST
61033: PUSH
61034: LD_INT 0
61036: PUSH
61037: LD_INT 4
61039: PUSH
61040: EMPTY
61041: LIST
61042: LIST
61043: PUSH
61044: LD_INT 0
61046: PUSH
61047: LD_INT 3
61049: PUSH
61050: EMPTY
61051: LIST
61052: LIST
61053: PUSH
61054: LD_INT 1
61056: PUSH
61057: LD_INT 4
61059: PUSH
61060: EMPTY
61061: LIST
61062: LIST
61063: PUSH
61064: LD_INT 1
61066: PUSH
61067: LD_INT 5
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: PUSH
61074: LD_INT 0
61076: PUSH
61077: LD_INT 5
61079: PUSH
61080: EMPTY
61081: LIST
61082: LIST
61083: PUSH
61084: LD_INT 1
61086: NEG
61087: PUSH
61088: LD_INT 4
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: PUSH
61095: LD_INT 1
61097: NEG
61098: PUSH
61099: LD_INT 3
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: PUSH
61106: LD_INT 2
61108: PUSH
61109: LD_INT 5
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: PUSH
61116: LD_INT 2
61118: NEG
61119: PUSH
61120: LD_INT 3
61122: PUSH
61123: EMPTY
61124: LIST
61125: LIST
61126: PUSH
61127: LD_INT 3
61129: NEG
61130: PUSH
61131: LD_INT 0
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: PUSH
61138: LD_INT 3
61140: NEG
61141: PUSH
61142: LD_INT 1
61144: NEG
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: PUSH
61150: LD_INT 2
61152: NEG
61153: PUSH
61154: LD_INT 0
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PUSH
61161: LD_INT 2
61163: NEG
61164: PUSH
61165: LD_INT 1
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: PUSH
61172: LD_INT 3
61174: NEG
61175: PUSH
61176: LD_INT 1
61178: PUSH
61179: EMPTY
61180: LIST
61181: LIST
61182: PUSH
61183: LD_INT 4
61185: NEG
61186: PUSH
61187: LD_INT 0
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: PUSH
61194: LD_INT 4
61196: NEG
61197: PUSH
61198: LD_INT 1
61200: NEG
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: PUSH
61206: LD_INT 4
61208: NEG
61209: PUSH
61210: LD_INT 2
61212: NEG
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: PUSH
61218: LD_INT 2
61220: NEG
61221: PUSH
61222: LD_INT 2
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: PUSH
61229: LD_INT 4
61231: NEG
61232: PUSH
61233: LD_INT 4
61235: NEG
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PUSH
61241: LD_INT 4
61243: NEG
61244: PUSH
61245: LD_INT 5
61247: NEG
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: PUSH
61253: LD_INT 3
61255: NEG
61256: PUSH
61257: LD_INT 4
61259: NEG
61260: PUSH
61261: EMPTY
61262: LIST
61263: LIST
61264: PUSH
61265: LD_INT 3
61267: NEG
61268: PUSH
61269: LD_INT 3
61271: NEG
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: PUSH
61277: LD_INT 4
61279: NEG
61280: PUSH
61281: LD_INT 3
61283: NEG
61284: PUSH
61285: EMPTY
61286: LIST
61287: LIST
61288: PUSH
61289: LD_INT 5
61291: NEG
61292: PUSH
61293: LD_INT 4
61295: NEG
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: PUSH
61301: LD_INT 5
61303: NEG
61304: PUSH
61305: LD_INT 5
61307: NEG
61308: PUSH
61309: EMPTY
61310: LIST
61311: LIST
61312: PUSH
61313: LD_INT 3
61315: NEG
61316: PUSH
61317: LD_INT 5
61319: NEG
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: PUSH
61325: LD_INT 5
61327: NEG
61328: PUSH
61329: LD_INT 3
61331: NEG
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: LIST
61341: LIST
61342: LIST
61343: LIST
61344: LIST
61345: LIST
61346: LIST
61347: LIST
61348: LIST
61349: LIST
61350: LIST
61351: LIST
61352: LIST
61353: LIST
61354: LIST
61355: LIST
61356: LIST
61357: LIST
61358: LIST
61359: LIST
61360: LIST
61361: LIST
61362: LIST
61363: LIST
61364: LIST
61365: LIST
61366: LIST
61367: LIST
61368: LIST
61369: LIST
61370: LIST
61371: LIST
61372: LIST
61373: LIST
61374: LIST
61375: LIST
61376: LIST
61377: LIST
61378: LIST
61379: LIST
61380: LIST
61381: LIST
61382: LIST
61383: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
61384: LD_ADDR_VAR 0 30
61388: PUSH
61389: LD_INT 4
61391: PUSH
61392: LD_INT 4
61394: PUSH
61395: EMPTY
61396: LIST
61397: LIST
61398: PUSH
61399: LD_INT 4
61401: PUSH
61402: LD_INT 3
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: PUSH
61409: LD_INT 5
61411: PUSH
61412: LD_INT 4
61414: PUSH
61415: EMPTY
61416: LIST
61417: LIST
61418: PUSH
61419: LD_INT 5
61421: PUSH
61422: LD_INT 5
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: PUSH
61429: LD_INT 4
61431: PUSH
61432: LD_INT 5
61434: PUSH
61435: EMPTY
61436: LIST
61437: LIST
61438: PUSH
61439: LD_INT 3
61441: PUSH
61442: LD_INT 4
61444: PUSH
61445: EMPTY
61446: LIST
61447: LIST
61448: PUSH
61449: LD_INT 3
61451: PUSH
61452: LD_INT 3
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: PUSH
61459: LD_INT 5
61461: PUSH
61462: LD_INT 3
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: PUSH
61469: LD_INT 3
61471: PUSH
61472: LD_INT 5
61474: PUSH
61475: EMPTY
61476: LIST
61477: LIST
61478: PUSH
61479: LD_INT 0
61481: PUSH
61482: LD_INT 3
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: PUSH
61489: LD_INT 0
61491: PUSH
61492: LD_INT 2
61494: PUSH
61495: EMPTY
61496: LIST
61497: LIST
61498: PUSH
61499: LD_INT 1
61501: PUSH
61502: LD_INT 3
61504: PUSH
61505: EMPTY
61506: LIST
61507: LIST
61508: PUSH
61509: LD_INT 1
61511: PUSH
61512: LD_INT 4
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: LD_INT 0
61521: PUSH
61522: LD_INT 4
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: PUSH
61529: LD_INT 1
61531: NEG
61532: PUSH
61533: LD_INT 3
61535: PUSH
61536: EMPTY
61537: LIST
61538: LIST
61539: PUSH
61540: LD_INT 1
61542: NEG
61543: PUSH
61544: LD_INT 2
61546: PUSH
61547: EMPTY
61548: LIST
61549: LIST
61550: PUSH
61551: LD_INT 2
61553: PUSH
61554: LD_INT 4
61556: PUSH
61557: EMPTY
61558: LIST
61559: LIST
61560: PUSH
61561: LD_INT 2
61563: NEG
61564: PUSH
61565: LD_INT 2
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: LD_INT 4
61574: NEG
61575: PUSH
61576: LD_INT 0
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: PUSH
61583: LD_INT 4
61585: NEG
61586: PUSH
61587: LD_INT 1
61589: NEG
61590: PUSH
61591: EMPTY
61592: LIST
61593: LIST
61594: PUSH
61595: LD_INT 3
61597: NEG
61598: PUSH
61599: LD_INT 0
61601: PUSH
61602: EMPTY
61603: LIST
61604: LIST
61605: PUSH
61606: LD_INT 3
61608: NEG
61609: PUSH
61610: LD_INT 1
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: LD_INT 4
61619: NEG
61620: PUSH
61621: LD_INT 1
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PUSH
61628: LD_INT 5
61630: NEG
61631: PUSH
61632: LD_INT 0
61634: PUSH
61635: EMPTY
61636: LIST
61637: LIST
61638: PUSH
61639: LD_INT 5
61641: NEG
61642: PUSH
61643: LD_INT 1
61645: NEG
61646: PUSH
61647: EMPTY
61648: LIST
61649: LIST
61650: PUSH
61651: LD_INT 5
61653: NEG
61654: PUSH
61655: LD_INT 2
61657: NEG
61658: PUSH
61659: EMPTY
61660: LIST
61661: LIST
61662: PUSH
61663: LD_INT 3
61665: NEG
61666: PUSH
61667: LD_INT 2
61669: PUSH
61670: EMPTY
61671: LIST
61672: LIST
61673: PUSH
61674: LD_INT 3
61676: NEG
61677: PUSH
61678: LD_INT 3
61680: NEG
61681: PUSH
61682: EMPTY
61683: LIST
61684: LIST
61685: PUSH
61686: LD_INT 3
61688: NEG
61689: PUSH
61690: LD_INT 4
61692: NEG
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: PUSH
61698: LD_INT 2
61700: NEG
61701: PUSH
61702: LD_INT 3
61704: NEG
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: PUSH
61710: LD_INT 2
61712: NEG
61713: PUSH
61714: LD_INT 2
61716: NEG
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: PUSH
61722: LD_INT 3
61724: NEG
61725: PUSH
61726: LD_INT 2
61728: NEG
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: PUSH
61734: LD_INT 4
61736: NEG
61737: PUSH
61738: LD_INT 3
61740: NEG
61741: PUSH
61742: EMPTY
61743: LIST
61744: LIST
61745: PUSH
61746: LD_INT 4
61748: NEG
61749: PUSH
61750: LD_INT 4
61752: NEG
61753: PUSH
61754: EMPTY
61755: LIST
61756: LIST
61757: PUSH
61758: LD_INT 2
61760: NEG
61761: PUSH
61762: LD_INT 4
61764: NEG
61765: PUSH
61766: EMPTY
61767: LIST
61768: LIST
61769: PUSH
61770: LD_INT 4
61772: NEG
61773: PUSH
61774: LD_INT 2
61776: NEG
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: PUSH
61782: LD_INT 0
61784: PUSH
61785: LD_INT 4
61787: NEG
61788: PUSH
61789: EMPTY
61790: LIST
61791: LIST
61792: PUSH
61793: LD_INT 0
61795: PUSH
61796: LD_INT 5
61798: NEG
61799: PUSH
61800: EMPTY
61801: LIST
61802: LIST
61803: PUSH
61804: LD_INT 1
61806: PUSH
61807: LD_INT 4
61809: NEG
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: PUSH
61815: LD_INT 1
61817: PUSH
61818: LD_INT 3
61820: NEG
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: PUSH
61826: LD_INT 0
61828: PUSH
61829: LD_INT 3
61831: NEG
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: PUSH
61837: LD_INT 1
61839: NEG
61840: PUSH
61841: LD_INT 4
61843: NEG
61844: PUSH
61845: EMPTY
61846: LIST
61847: LIST
61848: PUSH
61849: LD_INT 1
61851: NEG
61852: PUSH
61853: LD_INT 5
61855: NEG
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: PUSH
61861: LD_INT 2
61863: PUSH
61864: LD_INT 3
61866: NEG
61867: PUSH
61868: EMPTY
61869: LIST
61870: LIST
61871: PUSH
61872: LD_INT 2
61874: NEG
61875: PUSH
61876: LD_INT 5
61878: NEG
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: LIST
61888: LIST
61889: LIST
61890: LIST
61891: LIST
61892: LIST
61893: LIST
61894: LIST
61895: LIST
61896: LIST
61897: LIST
61898: LIST
61899: LIST
61900: LIST
61901: LIST
61902: LIST
61903: LIST
61904: LIST
61905: LIST
61906: LIST
61907: LIST
61908: LIST
61909: LIST
61910: LIST
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: LIST
61918: LIST
61919: LIST
61920: LIST
61921: LIST
61922: LIST
61923: LIST
61924: LIST
61925: LIST
61926: LIST
61927: LIST
61928: LIST
61929: LIST
61930: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
61931: LD_ADDR_VAR 0 31
61935: PUSH
61936: LD_INT 0
61938: PUSH
61939: LD_INT 4
61941: PUSH
61942: EMPTY
61943: LIST
61944: LIST
61945: PUSH
61946: LD_INT 0
61948: PUSH
61949: LD_INT 3
61951: PUSH
61952: EMPTY
61953: LIST
61954: LIST
61955: PUSH
61956: LD_INT 1
61958: PUSH
61959: LD_INT 4
61961: PUSH
61962: EMPTY
61963: LIST
61964: LIST
61965: PUSH
61966: LD_INT 1
61968: PUSH
61969: LD_INT 5
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: PUSH
61976: LD_INT 0
61978: PUSH
61979: LD_INT 5
61981: PUSH
61982: EMPTY
61983: LIST
61984: LIST
61985: PUSH
61986: LD_INT 1
61988: NEG
61989: PUSH
61990: LD_INT 4
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: PUSH
61997: LD_INT 1
61999: NEG
62000: PUSH
62001: LD_INT 3
62003: PUSH
62004: EMPTY
62005: LIST
62006: LIST
62007: PUSH
62008: LD_INT 2
62010: PUSH
62011: LD_INT 5
62013: PUSH
62014: EMPTY
62015: LIST
62016: LIST
62017: PUSH
62018: LD_INT 2
62020: NEG
62021: PUSH
62022: LD_INT 3
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: PUSH
62029: LD_INT 3
62031: NEG
62032: PUSH
62033: LD_INT 0
62035: PUSH
62036: EMPTY
62037: LIST
62038: LIST
62039: PUSH
62040: LD_INT 3
62042: NEG
62043: PUSH
62044: LD_INT 1
62046: NEG
62047: PUSH
62048: EMPTY
62049: LIST
62050: LIST
62051: PUSH
62052: LD_INT 2
62054: NEG
62055: PUSH
62056: LD_INT 0
62058: PUSH
62059: EMPTY
62060: LIST
62061: LIST
62062: PUSH
62063: LD_INT 2
62065: NEG
62066: PUSH
62067: LD_INT 1
62069: PUSH
62070: EMPTY
62071: LIST
62072: LIST
62073: PUSH
62074: LD_INT 3
62076: NEG
62077: PUSH
62078: LD_INT 1
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: LD_INT 4
62087: NEG
62088: PUSH
62089: LD_INT 0
62091: PUSH
62092: EMPTY
62093: LIST
62094: LIST
62095: PUSH
62096: LD_INT 4
62098: NEG
62099: PUSH
62100: LD_INT 1
62102: NEG
62103: PUSH
62104: EMPTY
62105: LIST
62106: LIST
62107: PUSH
62108: LD_INT 4
62110: NEG
62111: PUSH
62112: LD_INT 2
62114: NEG
62115: PUSH
62116: EMPTY
62117: LIST
62118: LIST
62119: PUSH
62120: LD_INT 2
62122: NEG
62123: PUSH
62124: LD_INT 2
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: PUSH
62131: LD_INT 4
62133: NEG
62134: PUSH
62135: LD_INT 4
62137: NEG
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: PUSH
62143: LD_INT 4
62145: NEG
62146: PUSH
62147: LD_INT 5
62149: NEG
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: PUSH
62155: LD_INT 3
62157: NEG
62158: PUSH
62159: LD_INT 4
62161: NEG
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: PUSH
62167: LD_INT 3
62169: NEG
62170: PUSH
62171: LD_INT 3
62173: NEG
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: PUSH
62179: LD_INT 4
62181: NEG
62182: PUSH
62183: LD_INT 3
62185: NEG
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PUSH
62191: LD_INT 5
62193: NEG
62194: PUSH
62195: LD_INT 4
62197: NEG
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: PUSH
62203: LD_INT 5
62205: NEG
62206: PUSH
62207: LD_INT 5
62209: NEG
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: PUSH
62215: LD_INT 3
62217: NEG
62218: PUSH
62219: LD_INT 5
62221: NEG
62222: PUSH
62223: EMPTY
62224: LIST
62225: LIST
62226: PUSH
62227: LD_INT 5
62229: NEG
62230: PUSH
62231: LD_INT 3
62233: NEG
62234: PUSH
62235: EMPTY
62236: LIST
62237: LIST
62238: PUSH
62239: LD_INT 0
62241: PUSH
62242: LD_INT 3
62244: NEG
62245: PUSH
62246: EMPTY
62247: LIST
62248: LIST
62249: PUSH
62250: LD_INT 0
62252: PUSH
62253: LD_INT 4
62255: NEG
62256: PUSH
62257: EMPTY
62258: LIST
62259: LIST
62260: PUSH
62261: LD_INT 1
62263: PUSH
62264: LD_INT 3
62266: NEG
62267: PUSH
62268: EMPTY
62269: LIST
62270: LIST
62271: PUSH
62272: LD_INT 1
62274: PUSH
62275: LD_INT 2
62277: NEG
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: PUSH
62283: LD_INT 0
62285: PUSH
62286: LD_INT 2
62288: NEG
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: PUSH
62294: LD_INT 1
62296: NEG
62297: PUSH
62298: LD_INT 3
62300: NEG
62301: PUSH
62302: EMPTY
62303: LIST
62304: LIST
62305: PUSH
62306: LD_INT 1
62308: NEG
62309: PUSH
62310: LD_INT 4
62312: NEG
62313: PUSH
62314: EMPTY
62315: LIST
62316: LIST
62317: PUSH
62318: LD_INT 2
62320: PUSH
62321: LD_INT 2
62323: NEG
62324: PUSH
62325: EMPTY
62326: LIST
62327: LIST
62328: PUSH
62329: LD_INT 2
62331: NEG
62332: PUSH
62333: LD_INT 4
62335: NEG
62336: PUSH
62337: EMPTY
62338: LIST
62339: LIST
62340: PUSH
62341: LD_INT 4
62343: PUSH
62344: LD_INT 0
62346: PUSH
62347: EMPTY
62348: LIST
62349: LIST
62350: PUSH
62351: LD_INT 4
62353: PUSH
62354: LD_INT 1
62356: NEG
62357: PUSH
62358: EMPTY
62359: LIST
62360: LIST
62361: PUSH
62362: LD_INT 5
62364: PUSH
62365: LD_INT 0
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: PUSH
62372: LD_INT 5
62374: PUSH
62375: LD_INT 1
62377: PUSH
62378: EMPTY
62379: LIST
62380: LIST
62381: PUSH
62382: LD_INT 4
62384: PUSH
62385: LD_INT 1
62387: PUSH
62388: EMPTY
62389: LIST
62390: LIST
62391: PUSH
62392: LD_INT 3
62394: PUSH
62395: LD_INT 0
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: PUSH
62402: LD_INT 3
62404: PUSH
62405: LD_INT 1
62407: NEG
62408: PUSH
62409: EMPTY
62410: LIST
62411: LIST
62412: PUSH
62413: LD_INT 3
62415: PUSH
62416: LD_INT 2
62418: NEG
62419: PUSH
62420: EMPTY
62421: LIST
62422: LIST
62423: PUSH
62424: LD_INT 5
62426: PUSH
62427: LD_INT 2
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: LIST
62438: LIST
62439: LIST
62440: LIST
62441: LIST
62442: LIST
62443: LIST
62444: LIST
62445: LIST
62446: LIST
62447: LIST
62448: LIST
62449: LIST
62450: LIST
62451: LIST
62452: LIST
62453: LIST
62454: LIST
62455: LIST
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: LIST
62463: LIST
62464: LIST
62465: LIST
62466: LIST
62467: LIST
62468: LIST
62469: LIST
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: LIST
62475: LIST
62476: LIST
62477: LIST
62478: LIST
62479: LIST
62480: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
62481: LD_ADDR_VAR 0 32
62485: PUSH
62486: LD_INT 4
62488: NEG
62489: PUSH
62490: LD_INT 0
62492: PUSH
62493: EMPTY
62494: LIST
62495: LIST
62496: PUSH
62497: LD_INT 4
62499: NEG
62500: PUSH
62501: LD_INT 1
62503: NEG
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: PUSH
62509: LD_INT 3
62511: NEG
62512: PUSH
62513: LD_INT 0
62515: PUSH
62516: EMPTY
62517: LIST
62518: LIST
62519: PUSH
62520: LD_INT 3
62522: NEG
62523: PUSH
62524: LD_INT 1
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: PUSH
62531: LD_INT 4
62533: NEG
62534: PUSH
62535: LD_INT 1
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: PUSH
62542: LD_INT 5
62544: NEG
62545: PUSH
62546: LD_INT 0
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: PUSH
62553: LD_INT 5
62555: NEG
62556: PUSH
62557: LD_INT 1
62559: NEG
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: PUSH
62565: LD_INT 5
62567: NEG
62568: PUSH
62569: LD_INT 2
62571: NEG
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PUSH
62577: LD_INT 3
62579: NEG
62580: PUSH
62581: LD_INT 2
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: PUSH
62588: LD_INT 3
62590: NEG
62591: PUSH
62592: LD_INT 3
62594: NEG
62595: PUSH
62596: EMPTY
62597: LIST
62598: LIST
62599: PUSH
62600: LD_INT 3
62602: NEG
62603: PUSH
62604: LD_INT 4
62606: NEG
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: PUSH
62612: LD_INT 2
62614: NEG
62615: PUSH
62616: LD_INT 3
62618: NEG
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: PUSH
62624: LD_INT 2
62626: NEG
62627: PUSH
62628: LD_INT 2
62630: NEG
62631: PUSH
62632: EMPTY
62633: LIST
62634: LIST
62635: PUSH
62636: LD_INT 3
62638: NEG
62639: PUSH
62640: LD_INT 2
62642: NEG
62643: PUSH
62644: EMPTY
62645: LIST
62646: LIST
62647: PUSH
62648: LD_INT 4
62650: NEG
62651: PUSH
62652: LD_INT 3
62654: NEG
62655: PUSH
62656: EMPTY
62657: LIST
62658: LIST
62659: PUSH
62660: LD_INT 4
62662: NEG
62663: PUSH
62664: LD_INT 4
62666: NEG
62667: PUSH
62668: EMPTY
62669: LIST
62670: LIST
62671: PUSH
62672: LD_INT 2
62674: NEG
62675: PUSH
62676: LD_INT 4
62678: NEG
62679: PUSH
62680: EMPTY
62681: LIST
62682: LIST
62683: PUSH
62684: LD_INT 4
62686: NEG
62687: PUSH
62688: LD_INT 2
62690: NEG
62691: PUSH
62692: EMPTY
62693: LIST
62694: LIST
62695: PUSH
62696: LD_INT 0
62698: PUSH
62699: LD_INT 4
62701: NEG
62702: PUSH
62703: EMPTY
62704: LIST
62705: LIST
62706: PUSH
62707: LD_INT 0
62709: PUSH
62710: LD_INT 5
62712: NEG
62713: PUSH
62714: EMPTY
62715: LIST
62716: LIST
62717: PUSH
62718: LD_INT 1
62720: PUSH
62721: LD_INT 4
62723: NEG
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: PUSH
62729: LD_INT 1
62731: PUSH
62732: LD_INT 3
62734: NEG
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 0
62742: PUSH
62743: LD_INT 3
62745: NEG
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: LD_INT 1
62753: NEG
62754: PUSH
62755: LD_INT 4
62757: NEG
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: PUSH
62763: LD_INT 1
62765: NEG
62766: PUSH
62767: LD_INT 5
62769: NEG
62770: PUSH
62771: EMPTY
62772: LIST
62773: LIST
62774: PUSH
62775: LD_INT 2
62777: PUSH
62778: LD_INT 3
62780: NEG
62781: PUSH
62782: EMPTY
62783: LIST
62784: LIST
62785: PUSH
62786: LD_INT 2
62788: NEG
62789: PUSH
62790: LD_INT 5
62792: NEG
62793: PUSH
62794: EMPTY
62795: LIST
62796: LIST
62797: PUSH
62798: LD_INT 3
62800: PUSH
62801: LD_INT 0
62803: PUSH
62804: EMPTY
62805: LIST
62806: LIST
62807: PUSH
62808: LD_INT 3
62810: PUSH
62811: LD_INT 1
62813: NEG
62814: PUSH
62815: EMPTY
62816: LIST
62817: LIST
62818: PUSH
62819: LD_INT 4
62821: PUSH
62822: LD_INT 0
62824: PUSH
62825: EMPTY
62826: LIST
62827: LIST
62828: PUSH
62829: LD_INT 4
62831: PUSH
62832: LD_INT 1
62834: PUSH
62835: EMPTY
62836: LIST
62837: LIST
62838: PUSH
62839: LD_INT 3
62841: PUSH
62842: LD_INT 1
62844: PUSH
62845: EMPTY
62846: LIST
62847: LIST
62848: PUSH
62849: LD_INT 2
62851: PUSH
62852: LD_INT 0
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: PUSH
62859: LD_INT 2
62861: PUSH
62862: LD_INT 1
62864: NEG
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: PUSH
62870: LD_INT 2
62872: PUSH
62873: LD_INT 2
62875: NEG
62876: PUSH
62877: EMPTY
62878: LIST
62879: LIST
62880: PUSH
62881: LD_INT 4
62883: PUSH
62884: LD_INT 2
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: PUSH
62891: LD_INT 4
62893: PUSH
62894: LD_INT 4
62896: PUSH
62897: EMPTY
62898: LIST
62899: LIST
62900: PUSH
62901: LD_INT 4
62903: PUSH
62904: LD_INT 3
62906: PUSH
62907: EMPTY
62908: LIST
62909: LIST
62910: PUSH
62911: LD_INT 5
62913: PUSH
62914: LD_INT 4
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: PUSH
62921: LD_INT 5
62923: PUSH
62924: LD_INT 5
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: PUSH
62931: LD_INT 4
62933: PUSH
62934: LD_INT 5
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PUSH
62941: LD_INT 3
62943: PUSH
62944: LD_INT 4
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: PUSH
62951: LD_INT 3
62953: PUSH
62954: LD_INT 3
62956: PUSH
62957: EMPTY
62958: LIST
62959: LIST
62960: PUSH
62961: LD_INT 5
62963: PUSH
62964: LD_INT 3
62966: PUSH
62967: EMPTY
62968: LIST
62969: LIST
62970: PUSH
62971: LD_INT 3
62973: PUSH
62974: LD_INT 5
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PUSH
62981: EMPTY
62982: LIST
62983: LIST
62984: LIST
62985: LIST
62986: LIST
62987: LIST
62988: LIST
62989: LIST
62990: LIST
62991: LIST
62992: LIST
62993: LIST
62994: LIST
62995: LIST
62996: LIST
62997: LIST
62998: LIST
62999: LIST
63000: LIST
63001: LIST
63002: LIST
63003: LIST
63004: LIST
63005: LIST
63006: LIST
63007: LIST
63008: LIST
63009: LIST
63010: LIST
63011: LIST
63012: LIST
63013: LIST
63014: LIST
63015: LIST
63016: LIST
63017: LIST
63018: LIST
63019: LIST
63020: LIST
63021: LIST
63022: LIST
63023: LIST
63024: LIST
63025: LIST
63026: LIST
63027: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
63028: LD_ADDR_VAR 0 33
63032: PUSH
63033: LD_INT 4
63035: NEG
63036: PUSH
63037: LD_INT 4
63039: NEG
63040: PUSH
63041: EMPTY
63042: LIST
63043: LIST
63044: PUSH
63045: LD_INT 4
63047: NEG
63048: PUSH
63049: LD_INT 5
63051: NEG
63052: PUSH
63053: EMPTY
63054: LIST
63055: LIST
63056: PUSH
63057: LD_INT 3
63059: NEG
63060: PUSH
63061: LD_INT 4
63063: NEG
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: PUSH
63069: LD_INT 3
63071: NEG
63072: PUSH
63073: LD_INT 3
63075: NEG
63076: PUSH
63077: EMPTY
63078: LIST
63079: LIST
63080: PUSH
63081: LD_INT 4
63083: NEG
63084: PUSH
63085: LD_INT 3
63087: NEG
63088: PUSH
63089: EMPTY
63090: LIST
63091: LIST
63092: PUSH
63093: LD_INT 5
63095: NEG
63096: PUSH
63097: LD_INT 4
63099: NEG
63100: PUSH
63101: EMPTY
63102: LIST
63103: LIST
63104: PUSH
63105: LD_INT 5
63107: NEG
63108: PUSH
63109: LD_INT 5
63111: NEG
63112: PUSH
63113: EMPTY
63114: LIST
63115: LIST
63116: PUSH
63117: LD_INT 3
63119: NEG
63120: PUSH
63121: LD_INT 5
63123: NEG
63124: PUSH
63125: EMPTY
63126: LIST
63127: LIST
63128: PUSH
63129: LD_INT 5
63131: NEG
63132: PUSH
63133: LD_INT 3
63135: NEG
63136: PUSH
63137: EMPTY
63138: LIST
63139: LIST
63140: PUSH
63141: LD_INT 0
63143: PUSH
63144: LD_INT 3
63146: NEG
63147: PUSH
63148: EMPTY
63149: LIST
63150: LIST
63151: PUSH
63152: LD_INT 0
63154: PUSH
63155: LD_INT 4
63157: NEG
63158: PUSH
63159: EMPTY
63160: LIST
63161: LIST
63162: PUSH
63163: LD_INT 1
63165: PUSH
63166: LD_INT 3
63168: NEG
63169: PUSH
63170: EMPTY
63171: LIST
63172: LIST
63173: PUSH
63174: LD_INT 1
63176: PUSH
63177: LD_INT 2
63179: NEG
63180: PUSH
63181: EMPTY
63182: LIST
63183: LIST
63184: PUSH
63185: LD_INT 0
63187: PUSH
63188: LD_INT 2
63190: NEG
63191: PUSH
63192: EMPTY
63193: LIST
63194: LIST
63195: PUSH
63196: LD_INT 1
63198: NEG
63199: PUSH
63200: LD_INT 3
63202: NEG
63203: PUSH
63204: EMPTY
63205: LIST
63206: LIST
63207: PUSH
63208: LD_INT 1
63210: NEG
63211: PUSH
63212: LD_INT 4
63214: NEG
63215: PUSH
63216: EMPTY
63217: LIST
63218: LIST
63219: PUSH
63220: LD_INT 2
63222: PUSH
63223: LD_INT 2
63225: NEG
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: PUSH
63231: LD_INT 2
63233: NEG
63234: PUSH
63235: LD_INT 4
63237: NEG
63238: PUSH
63239: EMPTY
63240: LIST
63241: LIST
63242: PUSH
63243: LD_INT 4
63245: PUSH
63246: LD_INT 0
63248: PUSH
63249: EMPTY
63250: LIST
63251: LIST
63252: PUSH
63253: LD_INT 4
63255: PUSH
63256: LD_INT 1
63258: NEG
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: PUSH
63264: LD_INT 5
63266: PUSH
63267: LD_INT 0
63269: PUSH
63270: EMPTY
63271: LIST
63272: LIST
63273: PUSH
63274: LD_INT 5
63276: PUSH
63277: LD_INT 1
63279: PUSH
63280: EMPTY
63281: LIST
63282: LIST
63283: PUSH
63284: LD_INT 4
63286: PUSH
63287: LD_INT 1
63289: PUSH
63290: EMPTY
63291: LIST
63292: LIST
63293: PUSH
63294: LD_INT 3
63296: PUSH
63297: LD_INT 0
63299: PUSH
63300: EMPTY
63301: LIST
63302: LIST
63303: PUSH
63304: LD_INT 3
63306: PUSH
63307: LD_INT 1
63309: NEG
63310: PUSH
63311: EMPTY
63312: LIST
63313: LIST
63314: PUSH
63315: LD_INT 3
63317: PUSH
63318: LD_INT 2
63320: NEG
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: PUSH
63326: LD_INT 5
63328: PUSH
63329: LD_INT 2
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: PUSH
63336: LD_INT 3
63338: PUSH
63339: LD_INT 3
63341: PUSH
63342: EMPTY
63343: LIST
63344: LIST
63345: PUSH
63346: LD_INT 3
63348: PUSH
63349: LD_INT 2
63351: PUSH
63352: EMPTY
63353: LIST
63354: LIST
63355: PUSH
63356: LD_INT 4
63358: PUSH
63359: LD_INT 3
63361: PUSH
63362: EMPTY
63363: LIST
63364: LIST
63365: PUSH
63366: LD_INT 4
63368: PUSH
63369: LD_INT 4
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: PUSH
63376: LD_INT 3
63378: PUSH
63379: LD_INT 4
63381: PUSH
63382: EMPTY
63383: LIST
63384: LIST
63385: PUSH
63386: LD_INT 2
63388: PUSH
63389: LD_INT 3
63391: PUSH
63392: EMPTY
63393: LIST
63394: LIST
63395: PUSH
63396: LD_INT 2
63398: PUSH
63399: LD_INT 2
63401: PUSH
63402: EMPTY
63403: LIST
63404: LIST
63405: PUSH
63406: LD_INT 4
63408: PUSH
63409: LD_INT 2
63411: PUSH
63412: EMPTY
63413: LIST
63414: LIST
63415: PUSH
63416: LD_INT 2
63418: PUSH
63419: LD_INT 4
63421: PUSH
63422: EMPTY
63423: LIST
63424: LIST
63425: PUSH
63426: LD_INT 0
63428: PUSH
63429: LD_INT 4
63431: PUSH
63432: EMPTY
63433: LIST
63434: LIST
63435: PUSH
63436: LD_INT 0
63438: PUSH
63439: LD_INT 3
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: PUSH
63446: LD_INT 1
63448: PUSH
63449: LD_INT 4
63451: PUSH
63452: EMPTY
63453: LIST
63454: LIST
63455: PUSH
63456: LD_INT 1
63458: PUSH
63459: LD_INT 5
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: PUSH
63466: LD_INT 0
63468: PUSH
63469: LD_INT 5
63471: PUSH
63472: EMPTY
63473: LIST
63474: LIST
63475: PUSH
63476: LD_INT 1
63478: NEG
63479: PUSH
63480: LD_INT 4
63482: PUSH
63483: EMPTY
63484: LIST
63485: LIST
63486: PUSH
63487: LD_INT 1
63489: NEG
63490: PUSH
63491: LD_INT 3
63493: PUSH
63494: EMPTY
63495: LIST
63496: LIST
63497: PUSH
63498: LD_INT 2
63500: PUSH
63501: LD_INT 5
63503: PUSH
63504: EMPTY
63505: LIST
63506: LIST
63507: PUSH
63508: LD_INT 2
63510: NEG
63511: PUSH
63512: LD_INT 3
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: PUSH
63519: EMPTY
63520: LIST
63521: LIST
63522: LIST
63523: LIST
63524: LIST
63525: LIST
63526: LIST
63527: LIST
63528: LIST
63529: LIST
63530: LIST
63531: LIST
63532: LIST
63533: LIST
63534: LIST
63535: LIST
63536: LIST
63537: LIST
63538: LIST
63539: LIST
63540: LIST
63541: LIST
63542: LIST
63543: LIST
63544: LIST
63545: LIST
63546: LIST
63547: LIST
63548: LIST
63549: LIST
63550: LIST
63551: LIST
63552: LIST
63553: LIST
63554: LIST
63555: LIST
63556: LIST
63557: LIST
63558: LIST
63559: LIST
63560: LIST
63561: LIST
63562: LIST
63563: LIST
63564: LIST
63565: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
63566: LD_ADDR_VAR 0 34
63570: PUSH
63571: LD_INT 0
63573: PUSH
63574: LD_INT 4
63576: NEG
63577: PUSH
63578: EMPTY
63579: LIST
63580: LIST
63581: PUSH
63582: LD_INT 0
63584: PUSH
63585: LD_INT 5
63587: NEG
63588: PUSH
63589: EMPTY
63590: LIST
63591: LIST
63592: PUSH
63593: LD_INT 1
63595: PUSH
63596: LD_INT 4
63598: NEG
63599: PUSH
63600: EMPTY
63601: LIST
63602: LIST
63603: PUSH
63604: LD_INT 1
63606: PUSH
63607: LD_INT 3
63609: NEG
63610: PUSH
63611: EMPTY
63612: LIST
63613: LIST
63614: PUSH
63615: LD_INT 0
63617: PUSH
63618: LD_INT 3
63620: NEG
63621: PUSH
63622: EMPTY
63623: LIST
63624: LIST
63625: PUSH
63626: LD_INT 1
63628: NEG
63629: PUSH
63630: LD_INT 4
63632: NEG
63633: PUSH
63634: EMPTY
63635: LIST
63636: LIST
63637: PUSH
63638: LD_INT 1
63640: NEG
63641: PUSH
63642: LD_INT 5
63644: NEG
63645: PUSH
63646: EMPTY
63647: LIST
63648: LIST
63649: PUSH
63650: LD_INT 2
63652: PUSH
63653: LD_INT 3
63655: NEG
63656: PUSH
63657: EMPTY
63658: LIST
63659: LIST
63660: PUSH
63661: LD_INT 2
63663: NEG
63664: PUSH
63665: LD_INT 5
63667: NEG
63668: PUSH
63669: EMPTY
63670: LIST
63671: LIST
63672: PUSH
63673: LD_INT 3
63675: PUSH
63676: LD_INT 0
63678: PUSH
63679: EMPTY
63680: LIST
63681: LIST
63682: PUSH
63683: LD_INT 3
63685: PUSH
63686: LD_INT 1
63688: NEG
63689: PUSH
63690: EMPTY
63691: LIST
63692: LIST
63693: PUSH
63694: LD_INT 4
63696: PUSH
63697: LD_INT 0
63699: PUSH
63700: EMPTY
63701: LIST
63702: LIST
63703: PUSH
63704: LD_INT 4
63706: PUSH
63707: LD_INT 1
63709: PUSH
63710: EMPTY
63711: LIST
63712: LIST
63713: PUSH
63714: LD_INT 3
63716: PUSH
63717: LD_INT 1
63719: PUSH
63720: EMPTY
63721: LIST
63722: LIST
63723: PUSH
63724: LD_INT 2
63726: PUSH
63727: LD_INT 0
63729: PUSH
63730: EMPTY
63731: LIST
63732: LIST
63733: PUSH
63734: LD_INT 2
63736: PUSH
63737: LD_INT 1
63739: NEG
63740: PUSH
63741: EMPTY
63742: LIST
63743: LIST
63744: PUSH
63745: LD_INT 2
63747: PUSH
63748: LD_INT 2
63750: NEG
63751: PUSH
63752: EMPTY
63753: LIST
63754: LIST
63755: PUSH
63756: LD_INT 4
63758: PUSH
63759: LD_INT 2
63761: PUSH
63762: EMPTY
63763: LIST
63764: LIST
63765: PUSH
63766: LD_INT 4
63768: PUSH
63769: LD_INT 4
63771: PUSH
63772: EMPTY
63773: LIST
63774: LIST
63775: PUSH
63776: LD_INT 4
63778: PUSH
63779: LD_INT 3
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: PUSH
63786: LD_INT 5
63788: PUSH
63789: LD_INT 4
63791: PUSH
63792: EMPTY
63793: LIST
63794: LIST
63795: PUSH
63796: LD_INT 5
63798: PUSH
63799: LD_INT 5
63801: PUSH
63802: EMPTY
63803: LIST
63804: LIST
63805: PUSH
63806: LD_INT 4
63808: PUSH
63809: LD_INT 5
63811: PUSH
63812: EMPTY
63813: LIST
63814: LIST
63815: PUSH
63816: LD_INT 3
63818: PUSH
63819: LD_INT 4
63821: PUSH
63822: EMPTY
63823: LIST
63824: LIST
63825: PUSH
63826: LD_INT 3
63828: PUSH
63829: LD_INT 3
63831: PUSH
63832: EMPTY
63833: LIST
63834: LIST
63835: PUSH
63836: LD_INT 5
63838: PUSH
63839: LD_INT 3
63841: PUSH
63842: EMPTY
63843: LIST
63844: LIST
63845: PUSH
63846: LD_INT 3
63848: PUSH
63849: LD_INT 5
63851: PUSH
63852: EMPTY
63853: LIST
63854: LIST
63855: PUSH
63856: LD_INT 0
63858: PUSH
63859: LD_INT 3
63861: PUSH
63862: EMPTY
63863: LIST
63864: LIST
63865: PUSH
63866: LD_INT 0
63868: PUSH
63869: LD_INT 2
63871: PUSH
63872: EMPTY
63873: LIST
63874: LIST
63875: PUSH
63876: LD_INT 1
63878: PUSH
63879: LD_INT 3
63881: PUSH
63882: EMPTY
63883: LIST
63884: LIST
63885: PUSH
63886: LD_INT 1
63888: PUSH
63889: LD_INT 4
63891: PUSH
63892: EMPTY
63893: LIST
63894: LIST
63895: PUSH
63896: LD_INT 0
63898: PUSH
63899: LD_INT 4
63901: PUSH
63902: EMPTY
63903: LIST
63904: LIST
63905: PUSH
63906: LD_INT 1
63908: NEG
63909: PUSH
63910: LD_INT 3
63912: PUSH
63913: EMPTY
63914: LIST
63915: LIST
63916: PUSH
63917: LD_INT 1
63919: NEG
63920: PUSH
63921: LD_INT 2
63923: PUSH
63924: EMPTY
63925: LIST
63926: LIST
63927: PUSH
63928: LD_INT 2
63930: PUSH
63931: LD_INT 4
63933: PUSH
63934: EMPTY
63935: LIST
63936: LIST
63937: PUSH
63938: LD_INT 2
63940: NEG
63941: PUSH
63942: LD_INT 2
63944: PUSH
63945: EMPTY
63946: LIST
63947: LIST
63948: PUSH
63949: LD_INT 4
63951: NEG
63952: PUSH
63953: LD_INT 0
63955: PUSH
63956: EMPTY
63957: LIST
63958: LIST
63959: PUSH
63960: LD_INT 4
63962: NEG
63963: PUSH
63964: LD_INT 1
63966: NEG
63967: PUSH
63968: EMPTY
63969: LIST
63970: LIST
63971: PUSH
63972: LD_INT 3
63974: NEG
63975: PUSH
63976: LD_INT 0
63978: PUSH
63979: EMPTY
63980: LIST
63981: LIST
63982: PUSH
63983: LD_INT 3
63985: NEG
63986: PUSH
63987: LD_INT 1
63989: PUSH
63990: EMPTY
63991: LIST
63992: LIST
63993: PUSH
63994: LD_INT 4
63996: NEG
63997: PUSH
63998: LD_INT 1
64000: PUSH
64001: EMPTY
64002: LIST
64003: LIST
64004: PUSH
64005: LD_INT 5
64007: NEG
64008: PUSH
64009: LD_INT 0
64011: PUSH
64012: EMPTY
64013: LIST
64014: LIST
64015: PUSH
64016: LD_INT 5
64018: NEG
64019: PUSH
64020: LD_INT 1
64022: NEG
64023: PUSH
64024: EMPTY
64025: LIST
64026: LIST
64027: PUSH
64028: LD_INT 5
64030: NEG
64031: PUSH
64032: LD_INT 2
64034: NEG
64035: PUSH
64036: EMPTY
64037: LIST
64038: LIST
64039: PUSH
64040: LD_INT 3
64042: NEG
64043: PUSH
64044: LD_INT 2
64046: PUSH
64047: EMPTY
64048: LIST
64049: LIST
64050: PUSH
64051: EMPTY
64052: LIST
64053: LIST
64054: LIST
64055: LIST
64056: LIST
64057: LIST
64058: LIST
64059: LIST
64060: LIST
64061: LIST
64062: LIST
64063: LIST
64064: LIST
64065: LIST
64066: LIST
64067: LIST
64068: LIST
64069: LIST
64070: LIST
64071: LIST
64072: LIST
64073: LIST
64074: LIST
64075: LIST
64076: LIST
64077: LIST
64078: LIST
64079: LIST
64080: LIST
64081: LIST
64082: LIST
64083: LIST
64084: LIST
64085: LIST
64086: LIST
64087: LIST
64088: LIST
64089: LIST
64090: LIST
64091: LIST
64092: LIST
64093: LIST
64094: LIST
64095: LIST
64096: LIST
64097: ST_TO_ADDR
// end ; end ;
64098: GO 64101
64100: POP
// case btype of b_depot , b_warehouse :
64101: LD_VAR 0 1
64105: PUSH
64106: LD_INT 0
64108: DOUBLE
64109: EQUAL
64110: IFTRUE 64120
64112: LD_INT 1
64114: DOUBLE
64115: EQUAL
64116: IFTRUE 64120
64118: GO 64321
64120: POP
// case nation of nation_american :
64121: LD_VAR 0 5
64125: PUSH
64126: LD_INT 1
64128: DOUBLE
64129: EQUAL
64130: IFTRUE 64134
64132: GO 64190
64134: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
64135: LD_ADDR_VAR 0 9
64139: PUSH
64140: LD_VAR 0 11
64144: PUSH
64145: LD_VAR 0 12
64149: PUSH
64150: LD_VAR 0 13
64154: PUSH
64155: LD_VAR 0 14
64159: PUSH
64160: LD_VAR 0 15
64164: PUSH
64165: LD_VAR 0 16
64169: PUSH
64170: EMPTY
64171: LIST
64172: LIST
64173: LIST
64174: LIST
64175: LIST
64176: LIST
64177: PUSH
64178: LD_VAR 0 4
64182: PUSH
64183: LD_INT 1
64185: PLUS
64186: ARRAY
64187: ST_TO_ADDR
64188: GO 64319
64190: LD_INT 2
64192: DOUBLE
64193: EQUAL
64194: IFTRUE 64198
64196: GO 64254
64198: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
64199: LD_ADDR_VAR 0 9
64203: PUSH
64204: LD_VAR 0 17
64208: PUSH
64209: LD_VAR 0 18
64213: PUSH
64214: LD_VAR 0 19
64218: PUSH
64219: LD_VAR 0 20
64223: PUSH
64224: LD_VAR 0 21
64228: PUSH
64229: LD_VAR 0 22
64233: PUSH
64234: EMPTY
64235: LIST
64236: LIST
64237: LIST
64238: LIST
64239: LIST
64240: LIST
64241: PUSH
64242: LD_VAR 0 4
64246: PUSH
64247: LD_INT 1
64249: PLUS
64250: ARRAY
64251: ST_TO_ADDR
64252: GO 64319
64254: LD_INT 3
64256: DOUBLE
64257: EQUAL
64258: IFTRUE 64262
64260: GO 64318
64262: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
64263: LD_ADDR_VAR 0 9
64267: PUSH
64268: LD_VAR 0 23
64272: PUSH
64273: LD_VAR 0 24
64277: PUSH
64278: LD_VAR 0 25
64282: PUSH
64283: LD_VAR 0 26
64287: PUSH
64288: LD_VAR 0 27
64292: PUSH
64293: LD_VAR 0 28
64297: PUSH
64298: EMPTY
64299: LIST
64300: LIST
64301: LIST
64302: LIST
64303: LIST
64304: LIST
64305: PUSH
64306: LD_VAR 0 4
64310: PUSH
64311: LD_INT 1
64313: PLUS
64314: ARRAY
64315: ST_TO_ADDR
64316: GO 64319
64318: POP
64319: GO 64874
64321: LD_INT 2
64323: DOUBLE
64324: EQUAL
64325: IFTRUE 64335
64327: LD_INT 3
64329: DOUBLE
64330: EQUAL
64331: IFTRUE 64335
64333: GO 64391
64335: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
64336: LD_ADDR_VAR 0 9
64340: PUSH
64341: LD_VAR 0 29
64345: PUSH
64346: LD_VAR 0 30
64350: PUSH
64351: LD_VAR 0 31
64355: PUSH
64356: LD_VAR 0 32
64360: PUSH
64361: LD_VAR 0 33
64365: PUSH
64366: LD_VAR 0 34
64370: PUSH
64371: EMPTY
64372: LIST
64373: LIST
64374: LIST
64375: LIST
64376: LIST
64377: LIST
64378: PUSH
64379: LD_VAR 0 4
64383: PUSH
64384: LD_INT 1
64386: PLUS
64387: ARRAY
64388: ST_TO_ADDR
64389: GO 64874
64391: LD_INT 16
64393: DOUBLE
64394: EQUAL
64395: IFTRUE 64453
64397: LD_INT 17
64399: DOUBLE
64400: EQUAL
64401: IFTRUE 64453
64403: LD_INT 18
64405: DOUBLE
64406: EQUAL
64407: IFTRUE 64453
64409: LD_INT 19
64411: DOUBLE
64412: EQUAL
64413: IFTRUE 64453
64415: LD_INT 22
64417: DOUBLE
64418: EQUAL
64419: IFTRUE 64453
64421: LD_INT 20
64423: DOUBLE
64424: EQUAL
64425: IFTRUE 64453
64427: LD_INT 21
64429: DOUBLE
64430: EQUAL
64431: IFTRUE 64453
64433: LD_INT 23
64435: DOUBLE
64436: EQUAL
64437: IFTRUE 64453
64439: LD_INT 24
64441: DOUBLE
64442: EQUAL
64443: IFTRUE 64453
64445: LD_INT 25
64447: DOUBLE
64448: EQUAL
64449: IFTRUE 64453
64451: GO 64509
64453: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
64454: LD_ADDR_VAR 0 9
64458: PUSH
64459: LD_VAR 0 35
64463: PUSH
64464: LD_VAR 0 36
64468: PUSH
64469: LD_VAR 0 37
64473: PUSH
64474: LD_VAR 0 38
64478: PUSH
64479: LD_VAR 0 39
64483: PUSH
64484: LD_VAR 0 40
64488: PUSH
64489: EMPTY
64490: LIST
64491: LIST
64492: LIST
64493: LIST
64494: LIST
64495: LIST
64496: PUSH
64497: LD_VAR 0 4
64501: PUSH
64502: LD_INT 1
64504: PLUS
64505: ARRAY
64506: ST_TO_ADDR
64507: GO 64874
64509: LD_INT 6
64511: DOUBLE
64512: EQUAL
64513: IFTRUE 64565
64515: LD_INT 7
64517: DOUBLE
64518: EQUAL
64519: IFTRUE 64565
64521: LD_INT 8
64523: DOUBLE
64524: EQUAL
64525: IFTRUE 64565
64527: LD_INT 13
64529: DOUBLE
64530: EQUAL
64531: IFTRUE 64565
64533: LD_INT 12
64535: DOUBLE
64536: EQUAL
64537: IFTRUE 64565
64539: LD_INT 15
64541: DOUBLE
64542: EQUAL
64543: IFTRUE 64565
64545: LD_INT 11
64547: DOUBLE
64548: EQUAL
64549: IFTRUE 64565
64551: LD_INT 14
64553: DOUBLE
64554: EQUAL
64555: IFTRUE 64565
64557: LD_INT 10
64559: DOUBLE
64560: EQUAL
64561: IFTRUE 64565
64563: GO 64621
64565: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
64566: LD_ADDR_VAR 0 9
64570: PUSH
64571: LD_VAR 0 41
64575: PUSH
64576: LD_VAR 0 42
64580: PUSH
64581: LD_VAR 0 43
64585: PUSH
64586: LD_VAR 0 44
64590: PUSH
64591: LD_VAR 0 45
64595: PUSH
64596: LD_VAR 0 46
64600: PUSH
64601: EMPTY
64602: LIST
64603: LIST
64604: LIST
64605: LIST
64606: LIST
64607: LIST
64608: PUSH
64609: LD_VAR 0 4
64613: PUSH
64614: LD_INT 1
64616: PLUS
64617: ARRAY
64618: ST_TO_ADDR
64619: GO 64874
64621: LD_INT 36
64623: DOUBLE
64624: EQUAL
64625: IFTRUE 64629
64627: GO 64685
64629: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
64630: LD_ADDR_VAR 0 9
64634: PUSH
64635: LD_VAR 0 47
64639: PUSH
64640: LD_VAR 0 48
64644: PUSH
64645: LD_VAR 0 49
64649: PUSH
64650: LD_VAR 0 50
64654: PUSH
64655: LD_VAR 0 51
64659: PUSH
64660: LD_VAR 0 52
64664: PUSH
64665: EMPTY
64666: LIST
64667: LIST
64668: LIST
64669: LIST
64670: LIST
64671: LIST
64672: PUSH
64673: LD_VAR 0 4
64677: PUSH
64678: LD_INT 1
64680: PLUS
64681: ARRAY
64682: ST_TO_ADDR
64683: GO 64874
64685: LD_INT 4
64687: DOUBLE
64688: EQUAL
64689: IFTRUE 64711
64691: LD_INT 5
64693: DOUBLE
64694: EQUAL
64695: IFTRUE 64711
64697: LD_INT 34
64699: DOUBLE
64700: EQUAL
64701: IFTRUE 64711
64703: LD_INT 37
64705: DOUBLE
64706: EQUAL
64707: IFTRUE 64711
64709: GO 64767
64711: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
64712: LD_ADDR_VAR 0 9
64716: PUSH
64717: LD_VAR 0 53
64721: PUSH
64722: LD_VAR 0 54
64726: PUSH
64727: LD_VAR 0 55
64731: PUSH
64732: LD_VAR 0 56
64736: PUSH
64737: LD_VAR 0 57
64741: PUSH
64742: LD_VAR 0 58
64746: PUSH
64747: EMPTY
64748: LIST
64749: LIST
64750: LIST
64751: LIST
64752: LIST
64753: LIST
64754: PUSH
64755: LD_VAR 0 4
64759: PUSH
64760: LD_INT 1
64762: PLUS
64763: ARRAY
64764: ST_TO_ADDR
64765: GO 64874
64767: LD_INT 31
64769: DOUBLE
64770: EQUAL
64771: IFTRUE 64817
64773: LD_INT 32
64775: DOUBLE
64776: EQUAL
64777: IFTRUE 64817
64779: LD_INT 33
64781: DOUBLE
64782: EQUAL
64783: IFTRUE 64817
64785: LD_INT 27
64787: DOUBLE
64788: EQUAL
64789: IFTRUE 64817
64791: LD_INT 26
64793: DOUBLE
64794: EQUAL
64795: IFTRUE 64817
64797: LD_INT 28
64799: DOUBLE
64800: EQUAL
64801: IFTRUE 64817
64803: LD_INT 29
64805: DOUBLE
64806: EQUAL
64807: IFTRUE 64817
64809: LD_INT 30
64811: DOUBLE
64812: EQUAL
64813: IFTRUE 64817
64815: GO 64873
64817: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
64818: LD_ADDR_VAR 0 9
64822: PUSH
64823: LD_VAR 0 59
64827: PUSH
64828: LD_VAR 0 60
64832: PUSH
64833: LD_VAR 0 61
64837: PUSH
64838: LD_VAR 0 62
64842: PUSH
64843: LD_VAR 0 63
64847: PUSH
64848: LD_VAR 0 64
64852: PUSH
64853: EMPTY
64854: LIST
64855: LIST
64856: LIST
64857: LIST
64858: LIST
64859: LIST
64860: PUSH
64861: LD_VAR 0 4
64865: PUSH
64866: LD_INT 1
64868: PLUS
64869: ARRAY
64870: ST_TO_ADDR
64871: GO 64874
64873: POP
// temp_list2 = [ ] ;
64874: LD_ADDR_VAR 0 10
64878: PUSH
64879: EMPTY
64880: ST_TO_ADDR
// for i in temp_list do
64881: LD_ADDR_VAR 0 8
64885: PUSH
64886: LD_VAR 0 9
64890: PUSH
64891: FOR_IN
64892: IFFALSE 64944
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
64894: LD_ADDR_VAR 0 10
64898: PUSH
64899: LD_VAR 0 10
64903: PUSH
64904: LD_VAR 0 8
64908: PUSH
64909: LD_INT 1
64911: ARRAY
64912: PUSH
64913: LD_VAR 0 2
64917: PLUS
64918: PUSH
64919: LD_VAR 0 8
64923: PUSH
64924: LD_INT 2
64926: ARRAY
64927: PUSH
64928: LD_VAR 0 3
64932: PLUS
64933: PUSH
64934: EMPTY
64935: LIST
64936: LIST
64937: PUSH
64938: EMPTY
64939: LIST
64940: ADD
64941: ST_TO_ADDR
64942: GO 64891
64944: POP
64945: POP
// result = temp_list2 ;
64946: LD_ADDR_VAR 0 7
64950: PUSH
64951: LD_VAR 0 10
64955: ST_TO_ADDR
// end ;
64956: LD_VAR 0 7
64960: RET
// export function EnemyInRange ( unit , dist ) ; begin
64961: LD_INT 0
64963: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
64964: LD_ADDR_VAR 0 3
64968: PUSH
64969: LD_VAR 0 1
64973: PPUSH
64974: CALL_OW 255
64978: PPUSH
64979: LD_VAR 0 1
64983: PPUSH
64984: CALL_OW 250
64988: PPUSH
64989: LD_VAR 0 1
64993: PPUSH
64994: CALL_OW 251
64998: PPUSH
64999: LD_VAR 0 2
65003: PPUSH
65004: CALL 38363 0 4
65008: PUSH
65009: LD_INT 4
65011: ARRAY
65012: ST_TO_ADDR
// end ;
65013: LD_VAR 0 3
65017: RET
// export function PlayerSeeMe ( unit ) ; begin
65018: LD_INT 0
65020: PPUSH
// result := See ( your_side , unit ) ;
65021: LD_ADDR_VAR 0 2
65025: PUSH
65026: LD_OWVAR 2
65030: PPUSH
65031: LD_VAR 0 1
65035: PPUSH
65036: CALL_OW 292
65040: ST_TO_ADDR
// end ;
65041: LD_VAR 0 2
65045: RET
// export function ReverseDir ( unit ) ; begin
65046: LD_INT 0
65048: PPUSH
// if not unit then
65049: LD_VAR 0 1
65053: NOT
65054: IFFALSE 65058
// exit ;
65056: GO 65081
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
65058: LD_ADDR_VAR 0 2
65062: PUSH
65063: LD_VAR 0 1
65067: PPUSH
65068: CALL_OW 254
65072: PUSH
65073: LD_INT 3
65075: PLUS
65076: PUSH
65077: LD_INT 6
65079: MOD
65080: ST_TO_ADDR
// end ;
65081: LD_VAR 0 2
65085: RET
// export function ReverseArray ( array ) ; var i ; begin
65086: LD_INT 0
65088: PPUSH
65089: PPUSH
// if not array then
65090: LD_VAR 0 1
65094: NOT
65095: IFFALSE 65099
// exit ;
65097: GO 65154
// result := [ ] ;
65099: LD_ADDR_VAR 0 2
65103: PUSH
65104: EMPTY
65105: ST_TO_ADDR
// for i := array downto 1 do
65106: LD_ADDR_VAR 0 3
65110: PUSH
65111: DOUBLE
65112: LD_VAR 0 1
65116: INC
65117: ST_TO_ADDR
65118: LD_INT 1
65120: PUSH
65121: FOR_DOWNTO
65122: IFFALSE 65152
// result := Join ( result , array [ i ] ) ;
65124: LD_ADDR_VAR 0 2
65128: PUSH
65129: LD_VAR 0 2
65133: PPUSH
65134: LD_VAR 0 1
65138: PUSH
65139: LD_VAR 0 3
65143: ARRAY
65144: PPUSH
65145: CALL 69798 0 2
65149: ST_TO_ADDR
65150: GO 65121
65152: POP
65153: POP
// end ;
65154: LD_VAR 0 2
65158: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
65159: LD_INT 0
65161: PPUSH
65162: PPUSH
65163: PPUSH
65164: PPUSH
65165: PPUSH
65166: PPUSH
// if not unit or not hexes then
65167: LD_VAR 0 1
65171: NOT
65172: PUSH
65173: LD_VAR 0 2
65177: NOT
65178: OR
65179: IFFALSE 65183
// exit ;
65181: GO 65306
// dist := 9999 ;
65183: LD_ADDR_VAR 0 5
65187: PUSH
65188: LD_INT 9999
65190: ST_TO_ADDR
// for i = 1 to hexes do
65191: LD_ADDR_VAR 0 4
65195: PUSH
65196: DOUBLE
65197: LD_INT 1
65199: DEC
65200: ST_TO_ADDR
65201: LD_VAR 0 2
65205: PUSH
65206: FOR_TO
65207: IFFALSE 65294
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
65209: LD_ADDR_VAR 0 6
65213: PUSH
65214: LD_VAR 0 1
65218: PPUSH
65219: LD_VAR 0 2
65223: PUSH
65224: LD_VAR 0 4
65228: ARRAY
65229: PUSH
65230: LD_INT 1
65232: ARRAY
65233: PPUSH
65234: LD_VAR 0 2
65238: PUSH
65239: LD_VAR 0 4
65243: ARRAY
65244: PUSH
65245: LD_INT 2
65247: ARRAY
65248: PPUSH
65249: CALL_OW 297
65253: ST_TO_ADDR
// if tdist < dist then
65254: LD_VAR 0 6
65258: PUSH
65259: LD_VAR 0 5
65263: LESS
65264: IFFALSE 65292
// begin hex := hexes [ i ] ;
65266: LD_ADDR_VAR 0 8
65270: PUSH
65271: LD_VAR 0 2
65275: PUSH
65276: LD_VAR 0 4
65280: ARRAY
65281: ST_TO_ADDR
// dist := tdist ;
65282: LD_ADDR_VAR 0 5
65286: PUSH
65287: LD_VAR 0 6
65291: ST_TO_ADDR
// end ; end ;
65292: GO 65206
65294: POP
65295: POP
// result := hex ;
65296: LD_ADDR_VAR 0 3
65300: PUSH
65301: LD_VAR 0 8
65305: ST_TO_ADDR
// end ;
65306: LD_VAR 0 3
65310: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
65311: LD_INT 0
65313: PPUSH
65314: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
65315: LD_VAR 0 1
65319: NOT
65320: PUSH
65321: LD_VAR 0 1
65325: PUSH
65326: LD_INT 21
65328: PUSH
65329: LD_INT 2
65331: PUSH
65332: EMPTY
65333: LIST
65334: LIST
65335: PUSH
65336: LD_INT 23
65338: PUSH
65339: LD_INT 2
65341: PUSH
65342: EMPTY
65343: LIST
65344: LIST
65345: PUSH
65346: EMPTY
65347: LIST
65348: LIST
65349: PPUSH
65350: CALL_OW 69
65354: IN
65355: NOT
65356: OR
65357: IFFALSE 65361
// exit ;
65359: GO 65408
// for i = 1 to 3 do
65361: LD_ADDR_VAR 0 3
65365: PUSH
65366: DOUBLE
65367: LD_INT 1
65369: DEC
65370: ST_TO_ADDR
65371: LD_INT 3
65373: PUSH
65374: FOR_TO
65375: IFFALSE 65406
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
65377: LD_VAR 0 1
65381: PPUSH
65382: CALL_OW 250
65386: PPUSH
65387: LD_VAR 0 1
65391: PPUSH
65392: CALL_OW 251
65396: PPUSH
65397: LD_INT 1
65399: PPUSH
65400: CALL_OW 453
65404: GO 65374
65406: POP
65407: POP
// end ;
65408: LD_VAR 0 2
65412: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
65413: LD_INT 0
65415: PPUSH
65416: PPUSH
65417: PPUSH
65418: PPUSH
65419: PPUSH
65420: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
65421: LD_VAR 0 1
65425: NOT
65426: PUSH
65427: LD_VAR 0 2
65431: NOT
65432: OR
65433: PUSH
65434: LD_VAR 0 1
65438: PPUSH
65439: CALL_OW 314
65443: OR
65444: IFFALSE 65448
// exit ;
65446: GO 65915
// if GetLives ( i ) < 250 then
65448: LD_VAR 0 4
65452: PPUSH
65453: CALL_OW 256
65457: PUSH
65458: LD_INT 250
65460: LESS
65461: IFFALSE 65474
// begin ComAutodestruct ( i ) ;
65463: LD_VAR 0 4
65467: PPUSH
65468: CALL 65311 0 1
// exit ;
65472: GO 65915
// end ; x := GetX ( enemy_unit ) ;
65474: LD_ADDR_VAR 0 7
65478: PUSH
65479: LD_VAR 0 2
65483: PPUSH
65484: CALL_OW 250
65488: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
65489: LD_ADDR_VAR 0 8
65493: PUSH
65494: LD_VAR 0 2
65498: PPUSH
65499: CALL_OW 251
65503: ST_TO_ADDR
// if not x or not y then
65504: LD_VAR 0 7
65508: NOT
65509: PUSH
65510: LD_VAR 0 8
65514: NOT
65515: OR
65516: IFFALSE 65520
// exit ;
65518: GO 65915
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
65520: LD_ADDR_VAR 0 6
65524: PUSH
65525: LD_VAR 0 7
65529: PPUSH
65530: LD_INT 0
65532: PPUSH
65533: LD_INT 4
65535: PPUSH
65536: CALL_OW 272
65540: PUSH
65541: LD_VAR 0 8
65545: PPUSH
65546: LD_INT 0
65548: PPUSH
65549: LD_INT 4
65551: PPUSH
65552: CALL_OW 273
65556: PUSH
65557: EMPTY
65558: LIST
65559: LIST
65560: PUSH
65561: LD_VAR 0 7
65565: PPUSH
65566: LD_INT 1
65568: PPUSH
65569: LD_INT 4
65571: PPUSH
65572: CALL_OW 272
65576: PUSH
65577: LD_VAR 0 8
65581: PPUSH
65582: LD_INT 1
65584: PPUSH
65585: LD_INT 4
65587: PPUSH
65588: CALL_OW 273
65592: PUSH
65593: EMPTY
65594: LIST
65595: LIST
65596: PUSH
65597: LD_VAR 0 7
65601: PPUSH
65602: LD_INT 2
65604: PPUSH
65605: LD_INT 4
65607: PPUSH
65608: CALL_OW 272
65612: PUSH
65613: LD_VAR 0 8
65617: PPUSH
65618: LD_INT 2
65620: PPUSH
65621: LD_INT 4
65623: PPUSH
65624: CALL_OW 273
65628: PUSH
65629: EMPTY
65630: LIST
65631: LIST
65632: PUSH
65633: LD_VAR 0 7
65637: PPUSH
65638: LD_INT 3
65640: PPUSH
65641: LD_INT 4
65643: PPUSH
65644: CALL_OW 272
65648: PUSH
65649: LD_VAR 0 8
65653: PPUSH
65654: LD_INT 3
65656: PPUSH
65657: LD_INT 4
65659: PPUSH
65660: CALL_OW 273
65664: PUSH
65665: EMPTY
65666: LIST
65667: LIST
65668: PUSH
65669: LD_VAR 0 7
65673: PPUSH
65674: LD_INT 4
65676: PPUSH
65677: LD_INT 4
65679: PPUSH
65680: CALL_OW 272
65684: PUSH
65685: LD_VAR 0 8
65689: PPUSH
65690: LD_INT 4
65692: PPUSH
65693: LD_INT 4
65695: PPUSH
65696: CALL_OW 273
65700: PUSH
65701: EMPTY
65702: LIST
65703: LIST
65704: PUSH
65705: LD_VAR 0 7
65709: PPUSH
65710: LD_INT 5
65712: PPUSH
65713: LD_INT 4
65715: PPUSH
65716: CALL_OW 272
65720: PUSH
65721: LD_VAR 0 8
65725: PPUSH
65726: LD_INT 5
65728: PPUSH
65729: LD_INT 4
65731: PPUSH
65732: CALL_OW 273
65736: PUSH
65737: EMPTY
65738: LIST
65739: LIST
65740: PUSH
65741: EMPTY
65742: LIST
65743: LIST
65744: LIST
65745: LIST
65746: LIST
65747: LIST
65748: ST_TO_ADDR
// for i = tmp downto 1 do
65749: LD_ADDR_VAR 0 4
65753: PUSH
65754: DOUBLE
65755: LD_VAR 0 6
65759: INC
65760: ST_TO_ADDR
65761: LD_INT 1
65763: PUSH
65764: FOR_DOWNTO
65765: IFFALSE 65866
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
65767: LD_VAR 0 6
65771: PUSH
65772: LD_VAR 0 4
65776: ARRAY
65777: PUSH
65778: LD_INT 1
65780: ARRAY
65781: PPUSH
65782: LD_VAR 0 6
65786: PUSH
65787: LD_VAR 0 4
65791: ARRAY
65792: PUSH
65793: LD_INT 2
65795: ARRAY
65796: PPUSH
65797: CALL_OW 488
65801: NOT
65802: PUSH
65803: LD_VAR 0 6
65807: PUSH
65808: LD_VAR 0 4
65812: ARRAY
65813: PUSH
65814: LD_INT 1
65816: ARRAY
65817: PPUSH
65818: LD_VAR 0 6
65822: PUSH
65823: LD_VAR 0 4
65827: ARRAY
65828: PUSH
65829: LD_INT 2
65831: ARRAY
65832: PPUSH
65833: CALL_OW 428
65837: PUSH
65838: LD_INT 0
65840: NONEQUAL
65841: OR
65842: IFFALSE 65864
// tmp := Delete ( tmp , i ) ;
65844: LD_ADDR_VAR 0 6
65848: PUSH
65849: LD_VAR 0 6
65853: PPUSH
65854: LD_VAR 0 4
65858: PPUSH
65859: CALL_OW 3
65863: ST_TO_ADDR
65864: GO 65764
65866: POP
65867: POP
// j := GetClosestHex ( unit , tmp ) ;
65868: LD_ADDR_VAR 0 5
65872: PUSH
65873: LD_VAR 0 1
65877: PPUSH
65878: LD_VAR 0 6
65882: PPUSH
65883: CALL 65159 0 2
65887: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
65888: LD_VAR 0 1
65892: PPUSH
65893: LD_VAR 0 5
65897: PUSH
65898: LD_INT 1
65900: ARRAY
65901: PPUSH
65902: LD_VAR 0 5
65906: PUSH
65907: LD_INT 2
65909: ARRAY
65910: PPUSH
65911: CALL_OW 111
// end ;
65915: LD_VAR 0 3
65919: RET
// export function PrepareApemanSoldier ( ) ; begin
65920: LD_INT 0
65922: PPUSH
// uc_nation := 0 ;
65923: LD_ADDR_OWVAR 21
65927: PUSH
65928: LD_INT 0
65930: ST_TO_ADDR
// hc_sex := sex_male ;
65931: LD_ADDR_OWVAR 27
65935: PUSH
65936: LD_INT 1
65938: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
65939: LD_ADDR_OWVAR 28
65943: PUSH
65944: LD_INT 15
65946: ST_TO_ADDR
// hc_gallery :=  ;
65947: LD_ADDR_OWVAR 33
65951: PUSH
65952: LD_STRING 
65954: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65955: LD_ADDR_OWVAR 31
65959: PUSH
65960: LD_INT 0
65962: PPUSH
65963: LD_INT 3
65965: PPUSH
65966: CALL_OW 12
65970: PUSH
65971: LD_INT 0
65973: PPUSH
65974: LD_INT 3
65976: PPUSH
65977: CALL_OW 12
65981: PUSH
65982: LD_INT 0
65984: PUSH
65985: LD_INT 0
65987: PUSH
65988: EMPTY
65989: LIST
65990: LIST
65991: LIST
65992: LIST
65993: ST_TO_ADDR
// end ;
65994: LD_VAR 0 1
65998: RET
// export function PrepareApemanEngineer ( ) ; begin
65999: LD_INT 0
66001: PPUSH
// uc_nation := 0 ;
66002: LD_ADDR_OWVAR 21
66006: PUSH
66007: LD_INT 0
66009: ST_TO_ADDR
// hc_sex := sex_male ;
66010: LD_ADDR_OWVAR 27
66014: PUSH
66015: LD_INT 1
66017: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
66018: LD_ADDR_OWVAR 28
66022: PUSH
66023: LD_INT 16
66025: ST_TO_ADDR
// hc_gallery :=  ;
66026: LD_ADDR_OWVAR 33
66030: PUSH
66031: LD_STRING 
66033: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66034: LD_ADDR_OWVAR 31
66038: PUSH
66039: LD_INT 0
66041: PPUSH
66042: LD_INT 3
66044: PPUSH
66045: CALL_OW 12
66049: PUSH
66050: LD_INT 0
66052: PPUSH
66053: LD_INT 3
66055: PPUSH
66056: CALL_OW 12
66060: PUSH
66061: LD_INT 0
66063: PUSH
66064: LD_INT 0
66066: PUSH
66067: EMPTY
66068: LIST
66069: LIST
66070: LIST
66071: LIST
66072: ST_TO_ADDR
// end ;
66073: LD_VAR 0 1
66077: RET
// export function PrepareApeman ( agressivity ) ; begin
66078: LD_INT 0
66080: PPUSH
// uc_side := 0 ;
66081: LD_ADDR_OWVAR 20
66085: PUSH
66086: LD_INT 0
66088: ST_TO_ADDR
// uc_nation := 0 ;
66089: LD_ADDR_OWVAR 21
66093: PUSH
66094: LD_INT 0
66096: ST_TO_ADDR
// hc_sex := sex_male ;
66097: LD_ADDR_OWVAR 27
66101: PUSH
66102: LD_INT 1
66104: ST_TO_ADDR
// hc_class := class_apeman ;
66105: LD_ADDR_OWVAR 28
66109: PUSH
66110: LD_INT 12
66112: ST_TO_ADDR
// hc_gallery :=  ;
66113: LD_ADDR_OWVAR 33
66117: PUSH
66118: LD_STRING 
66120: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
66121: LD_ADDR_OWVAR 35
66125: PUSH
66126: LD_VAR 0 1
66130: NEG
66131: PPUSH
66132: LD_VAR 0 1
66136: PPUSH
66137: CALL_OW 12
66141: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66142: LD_ADDR_OWVAR 31
66146: PUSH
66147: LD_INT 0
66149: PPUSH
66150: LD_INT 3
66152: PPUSH
66153: CALL_OW 12
66157: PUSH
66158: LD_INT 0
66160: PPUSH
66161: LD_INT 3
66163: PPUSH
66164: CALL_OW 12
66168: PUSH
66169: LD_INT 0
66171: PUSH
66172: LD_INT 0
66174: PUSH
66175: EMPTY
66176: LIST
66177: LIST
66178: LIST
66179: LIST
66180: ST_TO_ADDR
// end ;
66181: LD_VAR 0 2
66185: RET
// export function PrepareTiger ( agressivity ) ; begin
66186: LD_INT 0
66188: PPUSH
// uc_side := 0 ;
66189: LD_ADDR_OWVAR 20
66193: PUSH
66194: LD_INT 0
66196: ST_TO_ADDR
// uc_nation := 0 ;
66197: LD_ADDR_OWVAR 21
66201: PUSH
66202: LD_INT 0
66204: ST_TO_ADDR
// hc_class := class_tiger ;
66205: LD_ADDR_OWVAR 28
66209: PUSH
66210: LD_INT 14
66212: ST_TO_ADDR
// hc_gallery :=  ;
66213: LD_ADDR_OWVAR 33
66217: PUSH
66218: LD_STRING 
66220: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
66221: LD_ADDR_OWVAR 35
66225: PUSH
66226: LD_VAR 0 1
66230: NEG
66231: PPUSH
66232: LD_VAR 0 1
66236: PPUSH
66237: CALL_OW 12
66241: ST_TO_ADDR
// end ;
66242: LD_VAR 0 2
66246: RET
// export function PrepareEnchidna ( ) ; begin
66247: LD_INT 0
66249: PPUSH
// uc_side := 0 ;
66250: LD_ADDR_OWVAR 20
66254: PUSH
66255: LD_INT 0
66257: ST_TO_ADDR
// uc_nation := 0 ;
66258: LD_ADDR_OWVAR 21
66262: PUSH
66263: LD_INT 0
66265: ST_TO_ADDR
// hc_class := class_baggie ;
66266: LD_ADDR_OWVAR 28
66270: PUSH
66271: LD_INT 13
66273: ST_TO_ADDR
// hc_gallery :=  ;
66274: LD_ADDR_OWVAR 33
66278: PUSH
66279: LD_STRING 
66281: ST_TO_ADDR
// end ;
66282: LD_VAR 0 1
66286: RET
// export function PrepareFrog ( ) ; begin
66287: LD_INT 0
66289: PPUSH
// uc_side := 0 ;
66290: LD_ADDR_OWVAR 20
66294: PUSH
66295: LD_INT 0
66297: ST_TO_ADDR
// uc_nation := 0 ;
66298: LD_ADDR_OWVAR 21
66302: PUSH
66303: LD_INT 0
66305: ST_TO_ADDR
// hc_class := class_frog ;
66306: LD_ADDR_OWVAR 28
66310: PUSH
66311: LD_INT 19
66313: ST_TO_ADDR
// hc_gallery :=  ;
66314: LD_ADDR_OWVAR 33
66318: PUSH
66319: LD_STRING 
66321: ST_TO_ADDR
// end ;
66322: LD_VAR 0 1
66326: RET
// export function PrepareFish ( ) ; begin
66327: LD_INT 0
66329: PPUSH
// uc_side := 0 ;
66330: LD_ADDR_OWVAR 20
66334: PUSH
66335: LD_INT 0
66337: ST_TO_ADDR
// uc_nation := 0 ;
66338: LD_ADDR_OWVAR 21
66342: PUSH
66343: LD_INT 0
66345: ST_TO_ADDR
// hc_class := class_fish ;
66346: LD_ADDR_OWVAR 28
66350: PUSH
66351: LD_INT 20
66353: ST_TO_ADDR
// hc_gallery :=  ;
66354: LD_ADDR_OWVAR 33
66358: PUSH
66359: LD_STRING 
66361: ST_TO_ADDR
// end ;
66362: LD_VAR 0 1
66366: RET
// export function PrepareBird ( ) ; begin
66367: LD_INT 0
66369: PPUSH
// uc_side := 0 ;
66370: LD_ADDR_OWVAR 20
66374: PUSH
66375: LD_INT 0
66377: ST_TO_ADDR
// uc_nation := 0 ;
66378: LD_ADDR_OWVAR 21
66382: PUSH
66383: LD_INT 0
66385: ST_TO_ADDR
// hc_class := class_phororhacos ;
66386: LD_ADDR_OWVAR 28
66390: PUSH
66391: LD_INT 18
66393: ST_TO_ADDR
// hc_gallery :=  ;
66394: LD_ADDR_OWVAR 33
66398: PUSH
66399: LD_STRING 
66401: ST_TO_ADDR
// end ;
66402: LD_VAR 0 1
66406: RET
// export function PrepareHorse ( ) ; begin
66407: LD_INT 0
66409: PPUSH
// uc_side := 0 ;
66410: LD_ADDR_OWVAR 20
66414: PUSH
66415: LD_INT 0
66417: ST_TO_ADDR
// uc_nation := 0 ;
66418: LD_ADDR_OWVAR 21
66422: PUSH
66423: LD_INT 0
66425: ST_TO_ADDR
// hc_class := class_horse ;
66426: LD_ADDR_OWVAR 28
66430: PUSH
66431: LD_INT 21
66433: ST_TO_ADDR
// hc_gallery :=  ;
66434: LD_ADDR_OWVAR 33
66438: PUSH
66439: LD_STRING 
66441: ST_TO_ADDR
// end ;
66442: LD_VAR 0 1
66446: RET
// export function PrepareMastodont ( ) ; begin
66447: LD_INT 0
66449: PPUSH
// uc_side := 0 ;
66450: LD_ADDR_OWVAR 20
66454: PUSH
66455: LD_INT 0
66457: ST_TO_ADDR
// uc_nation := 0 ;
66458: LD_ADDR_OWVAR 21
66462: PUSH
66463: LD_INT 0
66465: ST_TO_ADDR
// vc_chassis := class_mastodont ;
66466: LD_ADDR_OWVAR 37
66470: PUSH
66471: LD_INT 31
66473: ST_TO_ADDR
// vc_control := control_rider ;
66474: LD_ADDR_OWVAR 38
66478: PUSH
66479: LD_INT 4
66481: ST_TO_ADDR
// end ;
66482: LD_VAR 0 1
66486: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
66487: LD_INT 0
66489: PPUSH
66490: PPUSH
66491: PPUSH
// uc_side = 0 ;
66492: LD_ADDR_OWVAR 20
66496: PUSH
66497: LD_INT 0
66499: ST_TO_ADDR
// uc_nation = 0 ;
66500: LD_ADDR_OWVAR 21
66504: PUSH
66505: LD_INT 0
66507: ST_TO_ADDR
// InitHc_All ( ) ;
66508: CALL_OW 584
// InitVc ;
66512: CALL_OW 20
// if mastodonts then
66516: LD_VAR 0 6
66520: IFFALSE 66587
// for i = 1 to mastodonts do
66522: LD_ADDR_VAR 0 11
66526: PUSH
66527: DOUBLE
66528: LD_INT 1
66530: DEC
66531: ST_TO_ADDR
66532: LD_VAR 0 6
66536: PUSH
66537: FOR_TO
66538: IFFALSE 66585
// begin vc_chassis := 31 ;
66540: LD_ADDR_OWVAR 37
66544: PUSH
66545: LD_INT 31
66547: ST_TO_ADDR
// vc_control := control_rider ;
66548: LD_ADDR_OWVAR 38
66552: PUSH
66553: LD_INT 4
66555: ST_TO_ADDR
// animal := CreateVehicle ;
66556: LD_ADDR_VAR 0 12
66560: PUSH
66561: CALL_OW 45
66565: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66566: LD_VAR 0 12
66570: PPUSH
66571: LD_VAR 0 8
66575: PPUSH
66576: LD_INT 0
66578: PPUSH
66579: CALL 68715 0 3
// end ;
66583: GO 66537
66585: POP
66586: POP
// if horses then
66587: LD_VAR 0 5
66591: IFFALSE 66658
// for i = 1 to horses do
66593: LD_ADDR_VAR 0 11
66597: PUSH
66598: DOUBLE
66599: LD_INT 1
66601: DEC
66602: ST_TO_ADDR
66603: LD_VAR 0 5
66607: PUSH
66608: FOR_TO
66609: IFFALSE 66656
// begin hc_class := 21 ;
66611: LD_ADDR_OWVAR 28
66615: PUSH
66616: LD_INT 21
66618: ST_TO_ADDR
// hc_gallery :=  ;
66619: LD_ADDR_OWVAR 33
66623: PUSH
66624: LD_STRING 
66626: ST_TO_ADDR
// animal := CreateHuman ;
66627: LD_ADDR_VAR 0 12
66631: PUSH
66632: CALL_OW 44
66636: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66637: LD_VAR 0 12
66641: PPUSH
66642: LD_VAR 0 8
66646: PPUSH
66647: LD_INT 0
66649: PPUSH
66650: CALL 68715 0 3
// end ;
66654: GO 66608
66656: POP
66657: POP
// if birds then
66658: LD_VAR 0 1
66662: IFFALSE 66729
// for i = 1 to birds do
66664: LD_ADDR_VAR 0 11
66668: PUSH
66669: DOUBLE
66670: LD_INT 1
66672: DEC
66673: ST_TO_ADDR
66674: LD_VAR 0 1
66678: PUSH
66679: FOR_TO
66680: IFFALSE 66727
// begin hc_class = 18 ;
66682: LD_ADDR_OWVAR 28
66686: PUSH
66687: LD_INT 18
66689: ST_TO_ADDR
// hc_gallery =  ;
66690: LD_ADDR_OWVAR 33
66694: PUSH
66695: LD_STRING 
66697: ST_TO_ADDR
// animal := CreateHuman ;
66698: LD_ADDR_VAR 0 12
66702: PUSH
66703: CALL_OW 44
66707: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66708: LD_VAR 0 12
66712: PPUSH
66713: LD_VAR 0 8
66717: PPUSH
66718: LD_INT 0
66720: PPUSH
66721: CALL 68715 0 3
// end ;
66725: GO 66679
66727: POP
66728: POP
// if tigers then
66729: LD_VAR 0 2
66733: IFFALSE 66817
// for i = 1 to tigers do
66735: LD_ADDR_VAR 0 11
66739: PUSH
66740: DOUBLE
66741: LD_INT 1
66743: DEC
66744: ST_TO_ADDR
66745: LD_VAR 0 2
66749: PUSH
66750: FOR_TO
66751: IFFALSE 66815
// begin hc_class = class_tiger ;
66753: LD_ADDR_OWVAR 28
66757: PUSH
66758: LD_INT 14
66760: ST_TO_ADDR
// hc_gallery =  ;
66761: LD_ADDR_OWVAR 33
66765: PUSH
66766: LD_STRING 
66768: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
66769: LD_ADDR_OWVAR 35
66773: PUSH
66774: LD_INT 7
66776: NEG
66777: PPUSH
66778: LD_INT 7
66780: PPUSH
66781: CALL_OW 12
66785: ST_TO_ADDR
// animal := CreateHuman ;
66786: LD_ADDR_VAR 0 12
66790: PUSH
66791: CALL_OW 44
66795: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66796: LD_VAR 0 12
66800: PPUSH
66801: LD_VAR 0 8
66805: PPUSH
66806: LD_INT 0
66808: PPUSH
66809: CALL 68715 0 3
// end ;
66813: GO 66750
66815: POP
66816: POP
// if apemans then
66817: LD_VAR 0 3
66821: IFFALSE 66944
// for i = 1 to apemans do
66823: LD_ADDR_VAR 0 11
66827: PUSH
66828: DOUBLE
66829: LD_INT 1
66831: DEC
66832: ST_TO_ADDR
66833: LD_VAR 0 3
66837: PUSH
66838: FOR_TO
66839: IFFALSE 66942
// begin hc_class = class_apeman ;
66841: LD_ADDR_OWVAR 28
66845: PUSH
66846: LD_INT 12
66848: ST_TO_ADDR
// hc_gallery =  ;
66849: LD_ADDR_OWVAR 33
66853: PUSH
66854: LD_STRING 
66856: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
66857: LD_ADDR_OWVAR 35
66861: PUSH
66862: LD_INT 2
66864: NEG
66865: PPUSH
66866: LD_INT 2
66868: PPUSH
66869: CALL_OW 12
66873: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
66874: LD_ADDR_OWVAR 31
66878: PUSH
66879: LD_INT 1
66881: PPUSH
66882: LD_INT 3
66884: PPUSH
66885: CALL_OW 12
66889: PUSH
66890: LD_INT 1
66892: PPUSH
66893: LD_INT 3
66895: PPUSH
66896: CALL_OW 12
66900: PUSH
66901: LD_INT 0
66903: PUSH
66904: LD_INT 0
66906: PUSH
66907: EMPTY
66908: LIST
66909: LIST
66910: LIST
66911: LIST
66912: ST_TO_ADDR
// animal := CreateHuman ;
66913: LD_ADDR_VAR 0 12
66917: PUSH
66918: CALL_OW 44
66922: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66923: LD_VAR 0 12
66927: PPUSH
66928: LD_VAR 0 8
66932: PPUSH
66933: LD_INT 0
66935: PPUSH
66936: CALL 68715 0 3
// end ;
66940: GO 66838
66942: POP
66943: POP
// if enchidnas then
66944: LD_VAR 0 4
66948: IFFALSE 67015
// for i = 1 to enchidnas do
66950: LD_ADDR_VAR 0 11
66954: PUSH
66955: DOUBLE
66956: LD_INT 1
66958: DEC
66959: ST_TO_ADDR
66960: LD_VAR 0 4
66964: PUSH
66965: FOR_TO
66966: IFFALSE 67013
// begin hc_class = 13 ;
66968: LD_ADDR_OWVAR 28
66972: PUSH
66973: LD_INT 13
66975: ST_TO_ADDR
// hc_gallery =  ;
66976: LD_ADDR_OWVAR 33
66980: PUSH
66981: LD_STRING 
66983: ST_TO_ADDR
// animal := CreateHuman ;
66984: LD_ADDR_VAR 0 12
66988: PUSH
66989: CALL_OW 44
66993: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66994: LD_VAR 0 12
66998: PPUSH
66999: LD_VAR 0 8
67003: PPUSH
67004: LD_INT 0
67006: PPUSH
67007: CALL 68715 0 3
// end ;
67011: GO 66965
67013: POP
67014: POP
// if fishes then
67015: LD_VAR 0 7
67019: IFFALSE 67086
// for i = 1 to fishes do
67021: LD_ADDR_VAR 0 11
67025: PUSH
67026: DOUBLE
67027: LD_INT 1
67029: DEC
67030: ST_TO_ADDR
67031: LD_VAR 0 7
67035: PUSH
67036: FOR_TO
67037: IFFALSE 67084
// begin hc_class = 20 ;
67039: LD_ADDR_OWVAR 28
67043: PUSH
67044: LD_INT 20
67046: ST_TO_ADDR
// hc_gallery =  ;
67047: LD_ADDR_OWVAR 33
67051: PUSH
67052: LD_STRING 
67054: ST_TO_ADDR
// animal := CreateHuman ;
67055: LD_ADDR_VAR 0 12
67059: PUSH
67060: CALL_OW 44
67064: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
67065: LD_VAR 0 12
67069: PPUSH
67070: LD_VAR 0 9
67074: PPUSH
67075: LD_INT 0
67077: PPUSH
67078: CALL 68715 0 3
// end ;
67082: GO 67036
67084: POP
67085: POP
// end ;
67086: LD_VAR 0 10
67090: RET
// export function WantHeal ( sci , unit ) ; begin
67091: LD_INT 0
67093: PPUSH
// if GetTaskList ( sci ) > 0 then
67094: LD_VAR 0 1
67098: PPUSH
67099: CALL_OW 437
67103: PUSH
67104: LD_INT 0
67106: GREATER
67107: IFFALSE 67177
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
67109: LD_VAR 0 1
67113: PPUSH
67114: CALL_OW 437
67118: PUSH
67119: LD_INT 1
67121: ARRAY
67122: PUSH
67123: LD_INT 1
67125: ARRAY
67126: PUSH
67127: LD_STRING l
67129: EQUAL
67130: PUSH
67131: LD_VAR 0 1
67135: PPUSH
67136: CALL_OW 437
67140: PUSH
67141: LD_INT 1
67143: ARRAY
67144: PUSH
67145: LD_INT 4
67147: ARRAY
67148: PUSH
67149: LD_VAR 0 2
67153: EQUAL
67154: AND
67155: IFFALSE 67167
// result := true else
67157: LD_ADDR_VAR 0 3
67161: PUSH
67162: LD_INT 1
67164: ST_TO_ADDR
67165: GO 67175
// result := false ;
67167: LD_ADDR_VAR 0 3
67171: PUSH
67172: LD_INT 0
67174: ST_TO_ADDR
// end else
67175: GO 67185
// result := false ;
67177: LD_ADDR_VAR 0 3
67181: PUSH
67182: LD_INT 0
67184: ST_TO_ADDR
// end ;
67185: LD_VAR 0 3
67189: RET
// export function HealTarget ( sci ) ; begin
67190: LD_INT 0
67192: PPUSH
// if not sci then
67193: LD_VAR 0 1
67197: NOT
67198: IFFALSE 67202
// exit ;
67200: GO 67267
// result := 0 ;
67202: LD_ADDR_VAR 0 2
67206: PUSH
67207: LD_INT 0
67209: ST_TO_ADDR
// if GetTaskList ( sci ) then
67210: LD_VAR 0 1
67214: PPUSH
67215: CALL_OW 437
67219: IFFALSE 67267
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
67221: LD_VAR 0 1
67225: PPUSH
67226: CALL_OW 437
67230: PUSH
67231: LD_INT 1
67233: ARRAY
67234: PUSH
67235: LD_INT 1
67237: ARRAY
67238: PUSH
67239: LD_STRING l
67241: EQUAL
67242: IFFALSE 67267
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
67244: LD_ADDR_VAR 0 2
67248: PUSH
67249: LD_VAR 0 1
67253: PPUSH
67254: CALL_OW 437
67258: PUSH
67259: LD_INT 1
67261: ARRAY
67262: PUSH
67263: LD_INT 4
67265: ARRAY
67266: ST_TO_ADDR
// end ;
67267: LD_VAR 0 2
67271: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
67272: LD_INT 0
67274: PPUSH
67275: PPUSH
67276: PPUSH
67277: PPUSH
// if not base_units then
67278: LD_VAR 0 1
67282: NOT
67283: IFFALSE 67287
// exit ;
67285: GO 67374
// result := false ;
67287: LD_ADDR_VAR 0 2
67291: PUSH
67292: LD_INT 0
67294: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
67295: LD_ADDR_VAR 0 5
67299: PUSH
67300: LD_VAR 0 1
67304: PPUSH
67305: LD_INT 21
67307: PUSH
67308: LD_INT 3
67310: PUSH
67311: EMPTY
67312: LIST
67313: LIST
67314: PPUSH
67315: CALL_OW 72
67319: ST_TO_ADDR
// if not tmp then
67320: LD_VAR 0 5
67324: NOT
67325: IFFALSE 67329
// exit ;
67327: GO 67374
// for i in tmp do
67329: LD_ADDR_VAR 0 3
67333: PUSH
67334: LD_VAR 0 5
67338: PUSH
67339: FOR_IN
67340: IFFALSE 67372
// begin result := EnemyInRange ( i , 22 ) ;
67342: LD_ADDR_VAR 0 2
67346: PUSH
67347: LD_VAR 0 3
67351: PPUSH
67352: LD_INT 22
67354: PPUSH
67355: CALL 64961 0 2
67359: ST_TO_ADDR
// if result then
67360: LD_VAR 0 2
67364: IFFALSE 67370
// exit ;
67366: POP
67367: POP
67368: GO 67374
// end ;
67370: GO 67339
67372: POP
67373: POP
// end ;
67374: LD_VAR 0 2
67378: RET
// export function FilterByTag ( units , tag ) ; begin
67379: LD_INT 0
67381: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
67382: LD_ADDR_VAR 0 3
67386: PUSH
67387: LD_VAR 0 1
67391: PPUSH
67392: LD_INT 120
67394: PUSH
67395: LD_VAR 0 2
67399: PUSH
67400: EMPTY
67401: LIST
67402: LIST
67403: PPUSH
67404: CALL_OW 72
67408: ST_TO_ADDR
// end ;
67409: LD_VAR 0 3
67413: RET
// export function IsDriver ( un ) ; begin
67414: LD_INT 0
67416: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
67417: LD_ADDR_VAR 0 2
67421: PUSH
67422: LD_VAR 0 1
67426: PUSH
67427: LD_INT 55
67429: PUSH
67430: EMPTY
67431: LIST
67432: PPUSH
67433: CALL_OW 69
67437: IN
67438: ST_TO_ADDR
// end ;
67439: LD_VAR 0 2
67443: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
67444: LD_INT 0
67446: PPUSH
67447: PPUSH
// list := [ ] ;
67448: LD_ADDR_VAR 0 5
67452: PUSH
67453: EMPTY
67454: ST_TO_ADDR
// case d of 0 :
67455: LD_VAR 0 3
67459: PUSH
67460: LD_INT 0
67462: DOUBLE
67463: EQUAL
67464: IFTRUE 67468
67466: GO 67601
67468: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
67469: LD_ADDR_VAR 0 5
67473: PUSH
67474: LD_VAR 0 1
67478: PUSH
67479: LD_INT 4
67481: MINUS
67482: PUSH
67483: LD_VAR 0 2
67487: PUSH
67488: LD_INT 4
67490: MINUS
67491: PUSH
67492: LD_INT 2
67494: PUSH
67495: EMPTY
67496: LIST
67497: LIST
67498: LIST
67499: PUSH
67500: LD_VAR 0 1
67504: PUSH
67505: LD_INT 3
67507: MINUS
67508: PUSH
67509: LD_VAR 0 2
67513: PUSH
67514: LD_INT 1
67516: PUSH
67517: EMPTY
67518: LIST
67519: LIST
67520: LIST
67521: PUSH
67522: LD_VAR 0 1
67526: PUSH
67527: LD_INT 4
67529: PLUS
67530: PUSH
67531: LD_VAR 0 2
67535: PUSH
67536: LD_INT 4
67538: PUSH
67539: EMPTY
67540: LIST
67541: LIST
67542: LIST
67543: PUSH
67544: LD_VAR 0 1
67548: PUSH
67549: LD_INT 3
67551: PLUS
67552: PUSH
67553: LD_VAR 0 2
67557: PUSH
67558: LD_INT 3
67560: PLUS
67561: PUSH
67562: LD_INT 5
67564: PUSH
67565: EMPTY
67566: LIST
67567: LIST
67568: LIST
67569: PUSH
67570: LD_VAR 0 1
67574: PUSH
67575: LD_VAR 0 2
67579: PUSH
67580: LD_INT 4
67582: PLUS
67583: PUSH
67584: LD_INT 0
67586: PUSH
67587: EMPTY
67588: LIST
67589: LIST
67590: LIST
67591: PUSH
67592: EMPTY
67593: LIST
67594: LIST
67595: LIST
67596: LIST
67597: LIST
67598: ST_TO_ADDR
// end ; 1 :
67599: GO 68299
67601: LD_INT 1
67603: DOUBLE
67604: EQUAL
67605: IFTRUE 67609
67607: GO 67742
67609: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
67610: LD_ADDR_VAR 0 5
67614: PUSH
67615: LD_VAR 0 1
67619: PUSH
67620: LD_VAR 0 2
67624: PUSH
67625: LD_INT 4
67627: MINUS
67628: PUSH
67629: LD_INT 3
67631: PUSH
67632: EMPTY
67633: LIST
67634: LIST
67635: LIST
67636: PUSH
67637: LD_VAR 0 1
67641: PUSH
67642: LD_INT 3
67644: MINUS
67645: PUSH
67646: LD_VAR 0 2
67650: PUSH
67651: LD_INT 3
67653: MINUS
67654: PUSH
67655: LD_INT 2
67657: PUSH
67658: EMPTY
67659: LIST
67660: LIST
67661: LIST
67662: PUSH
67663: LD_VAR 0 1
67667: PUSH
67668: LD_INT 4
67670: MINUS
67671: PUSH
67672: LD_VAR 0 2
67676: PUSH
67677: LD_INT 1
67679: PUSH
67680: EMPTY
67681: LIST
67682: LIST
67683: LIST
67684: PUSH
67685: LD_VAR 0 1
67689: PUSH
67690: LD_VAR 0 2
67694: PUSH
67695: LD_INT 3
67697: PLUS
67698: PUSH
67699: LD_INT 0
67701: PUSH
67702: EMPTY
67703: LIST
67704: LIST
67705: LIST
67706: PUSH
67707: LD_VAR 0 1
67711: PUSH
67712: LD_INT 4
67714: PLUS
67715: PUSH
67716: LD_VAR 0 2
67720: PUSH
67721: LD_INT 4
67723: PLUS
67724: PUSH
67725: LD_INT 5
67727: PUSH
67728: EMPTY
67729: LIST
67730: LIST
67731: LIST
67732: PUSH
67733: EMPTY
67734: LIST
67735: LIST
67736: LIST
67737: LIST
67738: LIST
67739: ST_TO_ADDR
// end ; 2 :
67740: GO 68299
67742: LD_INT 2
67744: DOUBLE
67745: EQUAL
67746: IFTRUE 67750
67748: GO 67879
67750: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
67751: LD_ADDR_VAR 0 5
67755: PUSH
67756: LD_VAR 0 1
67760: PUSH
67761: LD_VAR 0 2
67765: PUSH
67766: LD_INT 3
67768: MINUS
67769: PUSH
67770: LD_INT 3
67772: PUSH
67773: EMPTY
67774: LIST
67775: LIST
67776: LIST
67777: PUSH
67778: LD_VAR 0 1
67782: PUSH
67783: LD_INT 4
67785: PLUS
67786: PUSH
67787: LD_VAR 0 2
67791: PUSH
67792: LD_INT 4
67794: PUSH
67795: EMPTY
67796: LIST
67797: LIST
67798: LIST
67799: PUSH
67800: LD_VAR 0 1
67804: PUSH
67805: LD_VAR 0 2
67809: PUSH
67810: LD_INT 4
67812: PLUS
67813: PUSH
67814: LD_INT 0
67816: PUSH
67817: EMPTY
67818: LIST
67819: LIST
67820: LIST
67821: PUSH
67822: LD_VAR 0 1
67826: PUSH
67827: LD_INT 3
67829: MINUS
67830: PUSH
67831: LD_VAR 0 2
67835: PUSH
67836: LD_INT 1
67838: PUSH
67839: EMPTY
67840: LIST
67841: LIST
67842: LIST
67843: PUSH
67844: LD_VAR 0 1
67848: PUSH
67849: LD_INT 4
67851: MINUS
67852: PUSH
67853: LD_VAR 0 2
67857: PUSH
67858: LD_INT 4
67860: MINUS
67861: PUSH
67862: LD_INT 2
67864: PUSH
67865: EMPTY
67866: LIST
67867: LIST
67868: LIST
67869: PUSH
67870: EMPTY
67871: LIST
67872: LIST
67873: LIST
67874: LIST
67875: LIST
67876: ST_TO_ADDR
// end ; 3 :
67877: GO 68299
67879: LD_INT 3
67881: DOUBLE
67882: EQUAL
67883: IFTRUE 67887
67885: GO 68020
67887: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
67888: LD_ADDR_VAR 0 5
67892: PUSH
67893: LD_VAR 0 1
67897: PUSH
67898: LD_INT 3
67900: PLUS
67901: PUSH
67902: LD_VAR 0 2
67906: PUSH
67907: LD_INT 4
67909: PUSH
67910: EMPTY
67911: LIST
67912: LIST
67913: LIST
67914: PUSH
67915: LD_VAR 0 1
67919: PUSH
67920: LD_INT 4
67922: PLUS
67923: PUSH
67924: LD_VAR 0 2
67928: PUSH
67929: LD_INT 4
67931: PLUS
67932: PUSH
67933: LD_INT 5
67935: PUSH
67936: EMPTY
67937: LIST
67938: LIST
67939: LIST
67940: PUSH
67941: LD_VAR 0 1
67945: PUSH
67946: LD_INT 4
67948: MINUS
67949: PUSH
67950: LD_VAR 0 2
67954: PUSH
67955: LD_INT 1
67957: PUSH
67958: EMPTY
67959: LIST
67960: LIST
67961: LIST
67962: PUSH
67963: LD_VAR 0 1
67967: PUSH
67968: LD_VAR 0 2
67972: PUSH
67973: LD_INT 4
67975: MINUS
67976: PUSH
67977: LD_INT 3
67979: PUSH
67980: EMPTY
67981: LIST
67982: LIST
67983: LIST
67984: PUSH
67985: LD_VAR 0 1
67989: PUSH
67990: LD_INT 3
67992: MINUS
67993: PUSH
67994: LD_VAR 0 2
67998: PUSH
67999: LD_INT 3
68001: MINUS
68002: PUSH
68003: LD_INT 2
68005: PUSH
68006: EMPTY
68007: LIST
68008: LIST
68009: LIST
68010: PUSH
68011: EMPTY
68012: LIST
68013: LIST
68014: LIST
68015: LIST
68016: LIST
68017: ST_TO_ADDR
// end ; 4 :
68018: GO 68299
68020: LD_INT 4
68022: DOUBLE
68023: EQUAL
68024: IFTRUE 68028
68026: GO 68161
68028: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
68029: LD_ADDR_VAR 0 5
68033: PUSH
68034: LD_VAR 0 1
68038: PUSH
68039: LD_VAR 0 2
68043: PUSH
68044: LD_INT 4
68046: PLUS
68047: PUSH
68048: LD_INT 0
68050: PUSH
68051: EMPTY
68052: LIST
68053: LIST
68054: LIST
68055: PUSH
68056: LD_VAR 0 1
68060: PUSH
68061: LD_INT 3
68063: PLUS
68064: PUSH
68065: LD_VAR 0 2
68069: PUSH
68070: LD_INT 3
68072: PLUS
68073: PUSH
68074: LD_INT 5
68076: PUSH
68077: EMPTY
68078: LIST
68079: LIST
68080: LIST
68081: PUSH
68082: LD_VAR 0 1
68086: PUSH
68087: LD_INT 4
68089: PLUS
68090: PUSH
68091: LD_VAR 0 2
68095: PUSH
68096: LD_INT 4
68098: PUSH
68099: EMPTY
68100: LIST
68101: LIST
68102: LIST
68103: PUSH
68104: LD_VAR 0 1
68108: PUSH
68109: LD_VAR 0 2
68113: PUSH
68114: LD_INT 3
68116: MINUS
68117: PUSH
68118: LD_INT 3
68120: PUSH
68121: EMPTY
68122: LIST
68123: LIST
68124: LIST
68125: PUSH
68126: LD_VAR 0 1
68130: PUSH
68131: LD_INT 4
68133: MINUS
68134: PUSH
68135: LD_VAR 0 2
68139: PUSH
68140: LD_INT 4
68142: MINUS
68143: PUSH
68144: LD_INT 2
68146: PUSH
68147: EMPTY
68148: LIST
68149: LIST
68150: LIST
68151: PUSH
68152: EMPTY
68153: LIST
68154: LIST
68155: LIST
68156: LIST
68157: LIST
68158: ST_TO_ADDR
// end ; 5 :
68159: GO 68299
68161: LD_INT 5
68163: DOUBLE
68164: EQUAL
68165: IFTRUE 68169
68167: GO 68298
68169: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
68170: LD_ADDR_VAR 0 5
68174: PUSH
68175: LD_VAR 0 1
68179: PUSH
68180: LD_INT 4
68182: MINUS
68183: PUSH
68184: LD_VAR 0 2
68188: PUSH
68189: LD_INT 1
68191: PUSH
68192: EMPTY
68193: LIST
68194: LIST
68195: LIST
68196: PUSH
68197: LD_VAR 0 1
68201: PUSH
68202: LD_VAR 0 2
68206: PUSH
68207: LD_INT 4
68209: MINUS
68210: PUSH
68211: LD_INT 3
68213: PUSH
68214: EMPTY
68215: LIST
68216: LIST
68217: LIST
68218: PUSH
68219: LD_VAR 0 1
68223: PUSH
68224: LD_INT 4
68226: PLUS
68227: PUSH
68228: LD_VAR 0 2
68232: PUSH
68233: LD_INT 4
68235: PLUS
68236: PUSH
68237: LD_INT 5
68239: PUSH
68240: EMPTY
68241: LIST
68242: LIST
68243: LIST
68244: PUSH
68245: LD_VAR 0 1
68249: PUSH
68250: LD_INT 3
68252: PLUS
68253: PUSH
68254: LD_VAR 0 2
68258: PUSH
68259: LD_INT 4
68261: PUSH
68262: EMPTY
68263: LIST
68264: LIST
68265: LIST
68266: PUSH
68267: LD_VAR 0 1
68271: PUSH
68272: LD_VAR 0 2
68276: PUSH
68277: LD_INT 3
68279: PLUS
68280: PUSH
68281: LD_INT 0
68283: PUSH
68284: EMPTY
68285: LIST
68286: LIST
68287: LIST
68288: PUSH
68289: EMPTY
68290: LIST
68291: LIST
68292: LIST
68293: LIST
68294: LIST
68295: ST_TO_ADDR
// end ; end ;
68296: GO 68299
68298: POP
// result := list ;
68299: LD_ADDR_VAR 0 4
68303: PUSH
68304: LD_VAR 0 5
68308: ST_TO_ADDR
// end ;
68309: LD_VAR 0 4
68313: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
68314: LD_INT 0
68316: PPUSH
68317: PPUSH
68318: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
68319: LD_VAR 0 1
68323: NOT
68324: PUSH
68325: LD_VAR 0 2
68329: PUSH
68330: LD_INT 1
68332: PUSH
68333: LD_INT 2
68335: PUSH
68336: LD_INT 3
68338: PUSH
68339: LD_INT 4
68341: PUSH
68342: EMPTY
68343: LIST
68344: LIST
68345: LIST
68346: LIST
68347: IN
68348: NOT
68349: OR
68350: IFFALSE 68354
// exit ;
68352: GO 68437
// tmp := [ ] ;
68354: LD_ADDR_VAR 0 5
68358: PUSH
68359: EMPTY
68360: ST_TO_ADDR
// for i in units do
68361: LD_ADDR_VAR 0 4
68365: PUSH
68366: LD_VAR 0 1
68370: PUSH
68371: FOR_IN
68372: IFFALSE 68406
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
68374: LD_ADDR_VAR 0 5
68378: PUSH
68379: LD_VAR 0 5
68383: PPUSH
68384: LD_VAR 0 4
68388: PPUSH
68389: LD_VAR 0 2
68393: PPUSH
68394: CALL_OW 259
68398: PPUSH
68399: CALL 69798 0 2
68403: ST_TO_ADDR
68404: GO 68371
68406: POP
68407: POP
// if not tmp then
68408: LD_VAR 0 5
68412: NOT
68413: IFFALSE 68417
// exit ;
68415: GO 68437
// result := SortListByListDesc ( units , tmp ) ;
68417: LD_ADDR_VAR 0 3
68421: PUSH
68422: LD_VAR 0 1
68426: PPUSH
68427: LD_VAR 0 5
68431: PPUSH
68432: CALL_OW 77
68436: ST_TO_ADDR
// end ;
68437: LD_VAR 0 3
68441: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
68442: LD_INT 0
68444: PPUSH
68445: PPUSH
68446: PPUSH
// result := false ;
68447: LD_ADDR_VAR 0 3
68451: PUSH
68452: LD_INT 0
68454: ST_TO_ADDR
// if not building then
68455: LD_VAR 0 2
68459: NOT
68460: IFFALSE 68464
// exit ;
68462: GO 68602
// x := GetX ( building ) ;
68464: LD_ADDR_VAR 0 4
68468: PUSH
68469: LD_VAR 0 2
68473: PPUSH
68474: CALL_OW 250
68478: ST_TO_ADDR
// y := GetY ( building ) ;
68479: LD_ADDR_VAR 0 5
68483: PUSH
68484: LD_VAR 0 2
68488: PPUSH
68489: CALL_OW 251
68493: ST_TO_ADDR
// if not x or not y then
68494: LD_VAR 0 4
68498: NOT
68499: PUSH
68500: LD_VAR 0 5
68504: NOT
68505: OR
68506: IFFALSE 68510
// exit ;
68508: GO 68602
// if GetTaskList ( unit ) then
68510: LD_VAR 0 1
68514: PPUSH
68515: CALL_OW 437
68519: IFFALSE 68602
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68521: LD_STRING e
68523: PUSH
68524: LD_VAR 0 1
68528: PPUSH
68529: CALL_OW 437
68533: PUSH
68534: LD_INT 1
68536: ARRAY
68537: PUSH
68538: LD_INT 1
68540: ARRAY
68541: EQUAL
68542: PUSH
68543: LD_VAR 0 4
68547: PUSH
68548: LD_VAR 0 1
68552: PPUSH
68553: CALL_OW 437
68557: PUSH
68558: LD_INT 1
68560: ARRAY
68561: PUSH
68562: LD_INT 2
68564: ARRAY
68565: EQUAL
68566: AND
68567: PUSH
68568: LD_VAR 0 5
68572: PUSH
68573: LD_VAR 0 1
68577: PPUSH
68578: CALL_OW 437
68582: PUSH
68583: LD_INT 1
68585: ARRAY
68586: PUSH
68587: LD_INT 3
68589: ARRAY
68590: EQUAL
68591: AND
68592: IFFALSE 68602
// result := true end ;
68594: LD_ADDR_VAR 0 3
68598: PUSH
68599: LD_INT 1
68601: ST_TO_ADDR
// end ;
68602: LD_VAR 0 3
68606: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
68607: LD_INT 0
68609: PPUSH
// result := false ;
68610: LD_ADDR_VAR 0 4
68614: PUSH
68615: LD_INT 0
68617: ST_TO_ADDR
// if GetTaskList ( unit ) then
68618: LD_VAR 0 1
68622: PPUSH
68623: CALL_OW 437
68627: IFFALSE 68710
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68629: LD_STRING M
68631: PUSH
68632: LD_VAR 0 1
68636: PPUSH
68637: CALL_OW 437
68641: PUSH
68642: LD_INT 1
68644: ARRAY
68645: PUSH
68646: LD_INT 1
68648: ARRAY
68649: EQUAL
68650: PUSH
68651: LD_VAR 0 2
68655: PUSH
68656: LD_VAR 0 1
68660: PPUSH
68661: CALL_OW 437
68665: PUSH
68666: LD_INT 1
68668: ARRAY
68669: PUSH
68670: LD_INT 2
68672: ARRAY
68673: EQUAL
68674: AND
68675: PUSH
68676: LD_VAR 0 3
68680: PUSH
68681: LD_VAR 0 1
68685: PPUSH
68686: CALL_OW 437
68690: PUSH
68691: LD_INT 1
68693: ARRAY
68694: PUSH
68695: LD_INT 3
68697: ARRAY
68698: EQUAL
68699: AND
68700: IFFALSE 68710
// result := true ;
68702: LD_ADDR_VAR 0 4
68706: PUSH
68707: LD_INT 1
68709: ST_TO_ADDR
// end ; end ;
68710: LD_VAR 0 4
68714: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
68715: LD_INT 0
68717: PPUSH
68718: PPUSH
68719: PPUSH
68720: PPUSH
// if not unit or not area then
68721: LD_VAR 0 1
68725: NOT
68726: PUSH
68727: LD_VAR 0 2
68731: NOT
68732: OR
68733: IFFALSE 68737
// exit ;
68735: GO 68901
// tmp := AreaToList ( area , i ) ;
68737: LD_ADDR_VAR 0 6
68741: PUSH
68742: LD_VAR 0 2
68746: PPUSH
68747: LD_VAR 0 5
68751: PPUSH
68752: CALL_OW 517
68756: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
68757: LD_ADDR_VAR 0 5
68761: PUSH
68762: DOUBLE
68763: LD_INT 1
68765: DEC
68766: ST_TO_ADDR
68767: LD_VAR 0 6
68771: PUSH
68772: LD_INT 1
68774: ARRAY
68775: PUSH
68776: FOR_TO
68777: IFFALSE 68899
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
68779: LD_ADDR_VAR 0 7
68783: PUSH
68784: LD_VAR 0 6
68788: PUSH
68789: LD_INT 1
68791: ARRAY
68792: PUSH
68793: LD_VAR 0 5
68797: ARRAY
68798: PUSH
68799: LD_VAR 0 6
68803: PUSH
68804: LD_INT 2
68806: ARRAY
68807: PUSH
68808: LD_VAR 0 5
68812: ARRAY
68813: PUSH
68814: EMPTY
68815: LIST
68816: LIST
68817: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
68818: LD_VAR 0 7
68822: PUSH
68823: LD_INT 1
68825: ARRAY
68826: PPUSH
68827: LD_VAR 0 7
68831: PUSH
68832: LD_INT 2
68834: ARRAY
68835: PPUSH
68836: CALL_OW 428
68840: PUSH
68841: LD_INT 0
68843: EQUAL
68844: IFFALSE 68897
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
68846: LD_VAR 0 1
68850: PPUSH
68851: LD_VAR 0 7
68855: PUSH
68856: LD_INT 1
68858: ARRAY
68859: PPUSH
68860: LD_VAR 0 7
68864: PUSH
68865: LD_INT 2
68867: ARRAY
68868: PPUSH
68869: LD_VAR 0 3
68873: PPUSH
68874: CALL_OW 48
// result := IsPlaced ( unit ) ;
68878: LD_ADDR_VAR 0 4
68882: PUSH
68883: LD_VAR 0 1
68887: PPUSH
68888: CALL_OW 305
68892: ST_TO_ADDR
// exit ;
68893: POP
68894: POP
68895: GO 68901
// end ; end ;
68897: GO 68776
68899: POP
68900: POP
// end ;
68901: LD_VAR 0 4
68905: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
68906: LD_INT 0
68908: PPUSH
68909: PPUSH
68910: PPUSH
// if not side or side > 8 then
68911: LD_VAR 0 1
68915: NOT
68916: PUSH
68917: LD_VAR 0 1
68921: PUSH
68922: LD_INT 8
68924: GREATER
68925: OR
68926: IFFALSE 68930
// exit ;
68928: GO 69117
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
68930: LD_ADDR_VAR 0 4
68934: PUSH
68935: LD_INT 22
68937: PUSH
68938: LD_VAR 0 1
68942: PUSH
68943: EMPTY
68944: LIST
68945: LIST
68946: PUSH
68947: LD_INT 21
68949: PUSH
68950: LD_INT 3
68952: PUSH
68953: EMPTY
68954: LIST
68955: LIST
68956: PUSH
68957: EMPTY
68958: LIST
68959: LIST
68960: PPUSH
68961: CALL_OW 69
68965: ST_TO_ADDR
// if not tmp then
68966: LD_VAR 0 4
68970: NOT
68971: IFFALSE 68975
// exit ;
68973: GO 69117
// enable_addtolog := true ;
68975: LD_ADDR_OWVAR 81
68979: PUSH
68980: LD_INT 1
68982: ST_TO_ADDR
// AddToLog ( [ ) ;
68983: LD_STRING [
68985: PPUSH
68986: CALL_OW 561
// for i in tmp do
68990: LD_ADDR_VAR 0 3
68994: PUSH
68995: LD_VAR 0 4
68999: PUSH
69000: FOR_IN
69001: IFFALSE 69108
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
69003: LD_STRING [
69005: PUSH
69006: LD_VAR 0 3
69010: PPUSH
69011: CALL_OW 266
69015: STR
69016: PUSH
69017: LD_STRING , 
69019: STR
69020: PUSH
69021: LD_VAR 0 3
69025: PPUSH
69026: CALL_OW 250
69030: STR
69031: PUSH
69032: LD_STRING , 
69034: STR
69035: PUSH
69036: LD_VAR 0 3
69040: PPUSH
69041: CALL_OW 251
69045: STR
69046: PUSH
69047: LD_STRING , 
69049: STR
69050: PUSH
69051: LD_VAR 0 3
69055: PPUSH
69056: CALL_OW 254
69060: STR
69061: PUSH
69062: LD_STRING , 
69064: STR
69065: PUSH
69066: LD_VAR 0 3
69070: PPUSH
69071: LD_INT 1
69073: PPUSH
69074: CALL_OW 268
69078: STR
69079: PUSH
69080: LD_STRING , 
69082: STR
69083: PUSH
69084: LD_VAR 0 3
69088: PPUSH
69089: LD_INT 2
69091: PPUSH
69092: CALL_OW 268
69096: STR
69097: PUSH
69098: LD_STRING ],
69100: STR
69101: PPUSH
69102: CALL_OW 561
// end ;
69106: GO 69000
69108: POP
69109: POP
// AddToLog ( ]; ) ;
69110: LD_STRING ];
69112: PPUSH
69113: CALL_OW 561
// end ;
69117: LD_VAR 0 2
69121: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
69122: LD_INT 0
69124: PPUSH
69125: PPUSH
69126: PPUSH
69127: PPUSH
69128: PPUSH
// if not area or not rate or not max then
69129: LD_VAR 0 1
69133: NOT
69134: PUSH
69135: LD_VAR 0 2
69139: NOT
69140: OR
69141: PUSH
69142: LD_VAR 0 4
69146: NOT
69147: OR
69148: IFFALSE 69152
// exit ;
69150: GO 69341
// while 1 do
69152: LD_INT 1
69154: IFFALSE 69341
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
69156: LD_ADDR_VAR 0 9
69160: PUSH
69161: LD_VAR 0 1
69165: PPUSH
69166: LD_INT 1
69168: PPUSH
69169: CALL_OW 287
69173: PUSH
69174: LD_INT 10
69176: MUL
69177: ST_TO_ADDR
// r := rate / 10 ;
69178: LD_ADDR_VAR 0 7
69182: PUSH
69183: LD_VAR 0 2
69187: PUSH
69188: LD_INT 10
69190: DIVREAL
69191: ST_TO_ADDR
// time := 1 1$00 ;
69192: LD_ADDR_VAR 0 8
69196: PUSH
69197: LD_INT 2100
69199: ST_TO_ADDR
// if amount < min then
69200: LD_VAR 0 9
69204: PUSH
69205: LD_VAR 0 3
69209: LESS
69210: IFFALSE 69228
// r := r * 2 else
69212: LD_ADDR_VAR 0 7
69216: PUSH
69217: LD_VAR 0 7
69221: PUSH
69222: LD_INT 2
69224: MUL
69225: ST_TO_ADDR
69226: GO 69254
// if amount > max then
69228: LD_VAR 0 9
69232: PUSH
69233: LD_VAR 0 4
69237: GREATER
69238: IFFALSE 69254
// r := r / 2 ;
69240: LD_ADDR_VAR 0 7
69244: PUSH
69245: LD_VAR 0 7
69249: PUSH
69250: LD_INT 2
69252: DIVREAL
69253: ST_TO_ADDR
// time := time / r ;
69254: LD_ADDR_VAR 0 8
69258: PUSH
69259: LD_VAR 0 8
69263: PUSH
69264: LD_VAR 0 7
69268: DIVREAL
69269: ST_TO_ADDR
// if time < 0 then
69270: LD_VAR 0 8
69274: PUSH
69275: LD_INT 0
69277: LESS
69278: IFFALSE 69295
// time := time * - 1 ;
69280: LD_ADDR_VAR 0 8
69284: PUSH
69285: LD_VAR 0 8
69289: PUSH
69290: LD_INT 1
69292: NEG
69293: MUL
69294: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
69295: LD_VAR 0 8
69299: PUSH
69300: LD_INT 35
69302: PPUSH
69303: LD_INT 875
69305: PPUSH
69306: CALL_OW 12
69310: PLUS
69311: PPUSH
69312: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
69316: LD_INT 1
69318: PPUSH
69319: LD_INT 5
69321: PPUSH
69322: CALL_OW 12
69326: PPUSH
69327: LD_VAR 0 1
69331: PPUSH
69332: LD_INT 1
69334: PPUSH
69335: CALL_OW 55
// end ;
69339: GO 69152
// end ;
69341: LD_VAR 0 5
69345: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
69346: LD_INT 0
69348: PPUSH
69349: PPUSH
69350: PPUSH
69351: PPUSH
69352: PPUSH
69353: PPUSH
69354: PPUSH
69355: PPUSH
// if not turrets or not factories then
69356: LD_VAR 0 1
69360: NOT
69361: PUSH
69362: LD_VAR 0 2
69366: NOT
69367: OR
69368: IFFALSE 69372
// exit ;
69370: GO 69679
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
69372: LD_ADDR_VAR 0 10
69376: PUSH
69377: LD_INT 5
69379: PUSH
69380: LD_INT 6
69382: PUSH
69383: EMPTY
69384: LIST
69385: LIST
69386: PUSH
69387: LD_INT 2
69389: PUSH
69390: LD_INT 4
69392: PUSH
69393: EMPTY
69394: LIST
69395: LIST
69396: PUSH
69397: LD_INT 3
69399: PUSH
69400: LD_INT 5
69402: PUSH
69403: EMPTY
69404: LIST
69405: LIST
69406: PUSH
69407: EMPTY
69408: LIST
69409: LIST
69410: LIST
69411: PUSH
69412: LD_INT 24
69414: PUSH
69415: LD_INT 25
69417: PUSH
69418: EMPTY
69419: LIST
69420: LIST
69421: PUSH
69422: LD_INT 23
69424: PUSH
69425: LD_INT 27
69427: PUSH
69428: EMPTY
69429: LIST
69430: LIST
69431: PUSH
69432: EMPTY
69433: LIST
69434: LIST
69435: PUSH
69436: LD_INT 42
69438: PUSH
69439: LD_INT 43
69441: PUSH
69442: EMPTY
69443: LIST
69444: LIST
69445: PUSH
69446: LD_INT 44
69448: PUSH
69449: LD_INT 46
69451: PUSH
69452: EMPTY
69453: LIST
69454: LIST
69455: PUSH
69456: LD_INT 45
69458: PUSH
69459: LD_INT 47
69461: PUSH
69462: EMPTY
69463: LIST
69464: LIST
69465: PUSH
69466: EMPTY
69467: LIST
69468: LIST
69469: LIST
69470: PUSH
69471: EMPTY
69472: LIST
69473: LIST
69474: LIST
69475: ST_TO_ADDR
// result := [ ] ;
69476: LD_ADDR_VAR 0 3
69480: PUSH
69481: EMPTY
69482: ST_TO_ADDR
// for i in turrets do
69483: LD_ADDR_VAR 0 4
69487: PUSH
69488: LD_VAR 0 1
69492: PUSH
69493: FOR_IN
69494: IFFALSE 69677
// begin nat := GetNation ( i ) ;
69496: LD_ADDR_VAR 0 7
69500: PUSH
69501: LD_VAR 0 4
69505: PPUSH
69506: CALL_OW 248
69510: ST_TO_ADDR
// weapon := 0 ;
69511: LD_ADDR_VAR 0 8
69515: PUSH
69516: LD_INT 0
69518: ST_TO_ADDR
// if not nat then
69519: LD_VAR 0 7
69523: NOT
69524: IFFALSE 69528
// continue ;
69526: GO 69493
// for j in list [ nat ] do
69528: LD_ADDR_VAR 0 5
69532: PUSH
69533: LD_VAR 0 10
69537: PUSH
69538: LD_VAR 0 7
69542: ARRAY
69543: PUSH
69544: FOR_IN
69545: IFFALSE 69586
// if GetBWeapon ( i ) = j [ 1 ] then
69547: LD_VAR 0 4
69551: PPUSH
69552: CALL_OW 269
69556: PUSH
69557: LD_VAR 0 5
69561: PUSH
69562: LD_INT 1
69564: ARRAY
69565: EQUAL
69566: IFFALSE 69584
// begin weapon := j [ 2 ] ;
69568: LD_ADDR_VAR 0 8
69572: PUSH
69573: LD_VAR 0 5
69577: PUSH
69578: LD_INT 2
69580: ARRAY
69581: ST_TO_ADDR
// break ;
69582: GO 69586
// end ;
69584: GO 69544
69586: POP
69587: POP
// if not weapon then
69588: LD_VAR 0 8
69592: NOT
69593: IFFALSE 69597
// continue ;
69595: GO 69493
// for k in factories do
69597: LD_ADDR_VAR 0 6
69601: PUSH
69602: LD_VAR 0 2
69606: PUSH
69607: FOR_IN
69608: IFFALSE 69673
// begin weapons := AvailableWeaponList ( k ) ;
69610: LD_ADDR_VAR 0 9
69614: PUSH
69615: LD_VAR 0 6
69619: PPUSH
69620: CALL_OW 478
69624: ST_TO_ADDR
// if not weapons then
69625: LD_VAR 0 9
69629: NOT
69630: IFFALSE 69634
// continue ;
69632: GO 69607
// if weapon in weapons then
69634: LD_VAR 0 8
69638: PUSH
69639: LD_VAR 0 9
69643: IN
69644: IFFALSE 69671
// begin result := [ i , weapon ] ;
69646: LD_ADDR_VAR 0 3
69650: PUSH
69651: LD_VAR 0 4
69655: PUSH
69656: LD_VAR 0 8
69660: PUSH
69661: EMPTY
69662: LIST
69663: LIST
69664: ST_TO_ADDR
// exit ;
69665: POP
69666: POP
69667: POP
69668: POP
69669: GO 69679
// end ; end ;
69671: GO 69607
69673: POP
69674: POP
// end ;
69675: GO 69493
69677: POP
69678: POP
// end ;
69679: LD_VAR 0 3
69683: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
69684: LD_INT 0
69686: PPUSH
// if not side or side > 8 then
69687: LD_VAR 0 3
69691: NOT
69692: PUSH
69693: LD_VAR 0 3
69697: PUSH
69698: LD_INT 8
69700: GREATER
69701: OR
69702: IFFALSE 69706
// exit ;
69704: GO 69765
// if not range then
69706: LD_VAR 0 4
69710: NOT
69711: IFFALSE 69722
// range := - 12 ;
69713: LD_ADDR_VAR 0 4
69717: PUSH
69718: LD_INT 12
69720: NEG
69721: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
69722: LD_VAR 0 1
69726: PPUSH
69727: LD_VAR 0 2
69731: PPUSH
69732: LD_VAR 0 3
69736: PPUSH
69737: LD_VAR 0 4
69741: PPUSH
69742: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
69746: LD_VAR 0 1
69750: PPUSH
69751: LD_VAR 0 2
69755: PPUSH
69756: LD_VAR 0 3
69760: PPUSH
69761: CALL_OW 331
// end ;
69765: LD_VAR 0 5
69769: RET
// export function Video ( mode ) ; begin
69770: LD_INT 0
69772: PPUSH
// ingame_video = mode ;
69773: LD_ADDR_OWVAR 52
69777: PUSH
69778: LD_VAR 0 1
69782: ST_TO_ADDR
// interface_hidden = mode ;
69783: LD_ADDR_OWVAR 54
69787: PUSH
69788: LD_VAR 0 1
69792: ST_TO_ADDR
// end ;
69793: LD_VAR 0 2
69797: RET
// export function Join ( array , element ) ; begin
69798: LD_INT 0
69800: PPUSH
// result := Replace ( array , array + 1 , element ) ;
69801: LD_ADDR_VAR 0 3
69805: PUSH
69806: LD_VAR 0 1
69810: PPUSH
69811: LD_VAR 0 1
69815: PUSH
69816: LD_INT 1
69818: PLUS
69819: PPUSH
69820: LD_VAR 0 2
69824: PPUSH
69825: CALL_OW 1
69829: ST_TO_ADDR
// end ;
69830: LD_VAR 0 3
69834: RET
// export function JoinUnion ( array , element ) ; begin
69835: LD_INT 0
69837: PPUSH
// result := array union element ;
69838: LD_ADDR_VAR 0 3
69842: PUSH
69843: LD_VAR 0 1
69847: PUSH
69848: LD_VAR 0 2
69852: UNION
69853: ST_TO_ADDR
// end ;
69854: LD_VAR 0 3
69858: RET
// export function GetBehemoths ( side ) ; begin
69859: LD_INT 0
69861: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
69862: LD_ADDR_VAR 0 2
69866: PUSH
69867: LD_INT 22
69869: PUSH
69870: LD_VAR 0 1
69874: PUSH
69875: EMPTY
69876: LIST
69877: LIST
69878: PUSH
69879: LD_INT 31
69881: PUSH
69882: LD_INT 25
69884: PUSH
69885: EMPTY
69886: LIST
69887: LIST
69888: PUSH
69889: EMPTY
69890: LIST
69891: LIST
69892: PPUSH
69893: CALL_OW 69
69897: ST_TO_ADDR
// end ;
69898: LD_VAR 0 2
69902: RET
// export function Shuffle ( array ) ; var i , index ; begin
69903: LD_INT 0
69905: PPUSH
69906: PPUSH
69907: PPUSH
// result := [ ] ;
69908: LD_ADDR_VAR 0 2
69912: PUSH
69913: EMPTY
69914: ST_TO_ADDR
// if not array then
69915: LD_VAR 0 1
69919: NOT
69920: IFFALSE 69924
// exit ;
69922: GO 70023
// Randomize ;
69924: CALL_OW 10
// for i = array downto 1 do
69928: LD_ADDR_VAR 0 3
69932: PUSH
69933: DOUBLE
69934: LD_VAR 0 1
69938: INC
69939: ST_TO_ADDR
69940: LD_INT 1
69942: PUSH
69943: FOR_DOWNTO
69944: IFFALSE 70021
// begin index := rand ( 1 , array ) ;
69946: LD_ADDR_VAR 0 4
69950: PUSH
69951: LD_INT 1
69953: PPUSH
69954: LD_VAR 0 1
69958: PPUSH
69959: CALL_OW 12
69963: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
69964: LD_ADDR_VAR 0 2
69968: PUSH
69969: LD_VAR 0 2
69973: PPUSH
69974: LD_VAR 0 2
69978: PUSH
69979: LD_INT 1
69981: PLUS
69982: PPUSH
69983: LD_VAR 0 1
69987: PUSH
69988: LD_VAR 0 4
69992: ARRAY
69993: PPUSH
69994: CALL_OW 2
69998: ST_TO_ADDR
// array := Delete ( array , index ) ;
69999: LD_ADDR_VAR 0 1
70003: PUSH
70004: LD_VAR 0 1
70008: PPUSH
70009: LD_VAR 0 4
70013: PPUSH
70014: CALL_OW 3
70018: ST_TO_ADDR
// end ;
70019: GO 69943
70021: POP
70022: POP
// end ;
70023: LD_VAR 0 2
70027: RET
// export function GetBaseMaterials ( base ) ; begin
70028: LD_INT 0
70030: PPUSH
// result := [ 0 , 0 , 0 ] ;
70031: LD_ADDR_VAR 0 2
70035: PUSH
70036: LD_INT 0
70038: PUSH
70039: LD_INT 0
70041: PUSH
70042: LD_INT 0
70044: PUSH
70045: EMPTY
70046: LIST
70047: LIST
70048: LIST
70049: ST_TO_ADDR
// if not base then
70050: LD_VAR 0 1
70054: NOT
70055: IFFALSE 70059
// exit ;
70057: GO 70108
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
70059: LD_ADDR_VAR 0 2
70063: PUSH
70064: LD_VAR 0 1
70068: PPUSH
70069: LD_INT 1
70071: PPUSH
70072: CALL_OW 275
70076: PUSH
70077: LD_VAR 0 1
70081: PPUSH
70082: LD_INT 2
70084: PPUSH
70085: CALL_OW 275
70089: PUSH
70090: LD_VAR 0 1
70094: PPUSH
70095: LD_INT 3
70097: PPUSH
70098: CALL_OW 275
70102: PUSH
70103: EMPTY
70104: LIST
70105: LIST
70106: LIST
70107: ST_TO_ADDR
// end ;
70108: LD_VAR 0 2
70112: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
70113: LD_INT 0
70115: PPUSH
70116: PPUSH
// result := array ;
70117: LD_ADDR_VAR 0 3
70121: PUSH
70122: LD_VAR 0 1
70126: ST_TO_ADDR
// if size >= result then
70127: LD_VAR 0 2
70131: PUSH
70132: LD_VAR 0 3
70136: GREATEREQUAL
70137: IFFALSE 70141
// exit ;
70139: GO 70191
// if size then
70141: LD_VAR 0 2
70145: IFFALSE 70191
// for i := array downto size do
70147: LD_ADDR_VAR 0 4
70151: PUSH
70152: DOUBLE
70153: LD_VAR 0 1
70157: INC
70158: ST_TO_ADDR
70159: LD_VAR 0 2
70163: PUSH
70164: FOR_DOWNTO
70165: IFFALSE 70189
// result := Delete ( result , result ) ;
70167: LD_ADDR_VAR 0 3
70171: PUSH
70172: LD_VAR 0 3
70176: PPUSH
70177: LD_VAR 0 3
70181: PPUSH
70182: CALL_OW 3
70186: ST_TO_ADDR
70187: GO 70164
70189: POP
70190: POP
// end ;
70191: LD_VAR 0 3
70195: RET
// export function ComExit ( unit ) ; var tmp ; begin
70196: LD_INT 0
70198: PPUSH
70199: PPUSH
// if not IsInUnit ( unit ) then
70200: LD_VAR 0 1
70204: PPUSH
70205: CALL_OW 310
70209: NOT
70210: IFFALSE 70214
// exit ;
70212: GO 70274
// tmp := IsInUnit ( unit ) ;
70214: LD_ADDR_VAR 0 3
70218: PUSH
70219: LD_VAR 0 1
70223: PPUSH
70224: CALL_OW 310
70228: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
70229: LD_VAR 0 3
70233: PPUSH
70234: CALL_OW 247
70238: PUSH
70239: LD_INT 2
70241: EQUAL
70242: IFFALSE 70255
// ComExitVehicle ( unit ) else
70244: LD_VAR 0 1
70248: PPUSH
70249: CALL_OW 121
70253: GO 70264
// ComExitBuilding ( unit ) ;
70255: LD_VAR 0 1
70259: PPUSH
70260: CALL_OW 122
// result := tmp ;
70264: LD_ADDR_VAR 0 2
70268: PUSH
70269: LD_VAR 0 3
70273: ST_TO_ADDR
// end ;
70274: LD_VAR 0 2
70278: RET
// export function ComExitAll ( units ) ; var i ; begin
70279: LD_INT 0
70281: PPUSH
70282: PPUSH
// if not units then
70283: LD_VAR 0 1
70287: NOT
70288: IFFALSE 70292
// exit ;
70290: GO 70318
// for i in units do
70292: LD_ADDR_VAR 0 3
70296: PUSH
70297: LD_VAR 0 1
70301: PUSH
70302: FOR_IN
70303: IFFALSE 70316
// ComExit ( i ) ;
70305: LD_VAR 0 3
70309: PPUSH
70310: CALL 70196 0 1
70314: GO 70302
70316: POP
70317: POP
// end ;
70318: LD_VAR 0 2
70322: RET
// export function ResetHc ; begin
70323: LD_INT 0
70325: PPUSH
// InitHc ;
70326: CALL_OW 19
// hc_importance := 0 ;
70330: LD_ADDR_OWVAR 32
70334: PUSH
70335: LD_INT 0
70337: ST_TO_ADDR
// end ;
70338: LD_VAR 0 1
70342: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
70343: LD_INT 0
70345: PPUSH
70346: PPUSH
70347: PPUSH
// _x := ( x1 + x2 ) div 2 ;
70348: LD_ADDR_VAR 0 6
70352: PUSH
70353: LD_VAR 0 1
70357: PUSH
70358: LD_VAR 0 3
70362: PLUS
70363: PUSH
70364: LD_INT 2
70366: DIV
70367: ST_TO_ADDR
// if _x < 0 then
70368: LD_VAR 0 6
70372: PUSH
70373: LD_INT 0
70375: LESS
70376: IFFALSE 70393
// _x := _x * - 1 ;
70378: LD_ADDR_VAR 0 6
70382: PUSH
70383: LD_VAR 0 6
70387: PUSH
70388: LD_INT 1
70390: NEG
70391: MUL
70392: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
70393: LD_ADDR_VAR 0 7
70397: PUSH
70398: LD_VAR 0 2
70402: PUSH
70403: LD_VAR 0 4
70407: PLUS
70408: PUSH
70409: LD_INT 2
70411: DIV
70412: ST_TO_ADDR
// if _y < 0 then
70413: LD_VAR 0 7
70417: PUSH
70418: LD_INT 0
70420: LESS
70421: IFFALSE 70438
// _y := _y * - 1 ;
70423: LD_ADDR_VAR 0 7
70427: PUSH
70428: LD_VAR 0 7
70432: PUSH
70433: LD_INT 1
70435: NEG
70436: MUL
70437: ST_TO_ADDR
// result := [ _x , _y ] ;
70438: LD_ADDR_VAR 0 5
70442: PUSH
70443: LD_VAR 0 6
70447: PUSH
70448: LD_VAR 0 7
70452: PUSH
70453: EMPTY
70454: LIST
70455: LIST
70456: ST_TO_ADDR
// end ;
70457: LD_VAR 0 5
70461: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
70462: LD_INT 0
70464: PPUSH
70465: PPUSH
70466: PPUSH
70467: PPUSH
// task := GetTaskList ( unit ) ;
70468: LD_ADDR_VAR 0 7
70472: PUSH
70473: LD_VAR 0 1
70477: PPUSH
70478: CALL_OW 437
70482: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
70483: LD_VAR 0 7
70487: NOT
70488: PUSH
70489: LD_VAR 0 1
70493: PPUSH
70494: LD_VAR 0 2
70498: PPUSH
70499: CALL_OW 308
70503: NOT
70504: AND
70505: IFFALSE 70509
// exit ;
70507: GO 70627
// if IsInArea ( unit , area ) then
70509: LD_VAR 0 1
70513: PPUSH
70514: LD_VAR 0 2
70518: PPUSH
70519: CALL_OW 308
70523: IFFALSE 70541
// begin ComMoveToArea ( unit , goAway ) ;
70525: LD_VAR 0 1
70529: PPUSH
70530: LD_VAR 0 3
70534: PPUSH
70535: CALL_OW 113
// exit ;
70539: GO 70627
// end ; if task [ 1 ] [ 1 ] <> M then
70541: LD_VAR 0 7
70545: PUSH
70546: LD_INT 1
70548: ARRAY
70549: PUSH
70550: LD_INT 1
70552: ARRAY
70553: PUSH
70554: LD_STRING M
70556: NONEQUAL
70557: IFFALSE 70561
// exit ;
70559: GO 70627
// x := task [ 1 ] [ 2 ] ;
70561: LD_ADDR_VAR 0 5
70565: PUSH
70566: LD_VAR 0 7
70570: PUSH
70571: LD_INT 1
70573: ARRAY
70574: PUSH
70575: LD_INT 2
70577: ARRAY
70578: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
70579: LD_ADDR_VAR 0 6
70583: PUSH
70584: LD_VAR 0 7
70588: PUSH
70589: LD_INT 1
70591: ARRAY
70592: PUSH
70593: LD_INT 3
70595: ARRAY
70596: ST_TO_ADDR
// if InArea ( x , y , area ) then
70597: LD_VAR 0 5
70601: PPUSH
70602: LD_VAR 0 6
70606: PPUSH
70607: LD_VAR 0 2
70611: PPUSH
70612: CALL_OW 309
70616: IFFALSE 70627
// ComStop ( unit ) ;
70618: LD_VAR 0 1
70622: PPUSH
70623: CALL_OW 141
// end ;
70627: LD_VAR 0 4
70631: RET
// export function Abs ( value ) ; begin
70632: LD_INT 0
70634: PPUSH
// result := value ;
70635: LD_ADDR_VAR 0 2
70639: PUSH
70640: LD_VAR 0 1
70644: ST_TO_ADDR
// if value < 0 then
70645: LD_VAR 0 1
70649: PUSH
70650: LD_INT 0
70652: LESS
70653: IFFALSE 70670
// result := value * - 1 ;
70655: LD_ADDR_VAR 0 2
70659: PUSH
70660: LD_VAR 0 1
70664: PUSH
70665: LD_INT 1
70667: NEG
70668: MUL
70669: ST_TO_ADDR
// end ;
70670: LD_VAR 0 2
70674: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
70675: LD_INT 0
70677: PPUSH
70678: PPUSH
70679: PPUSH
70680: PPUSH
70681: PPUSH
70682: PPUSH
70683: PPUSH
70684: PPUSH
// if not unit or not building then
70685: LD_VAR 0 1
70689: NOT
70690: PUSH
70691: LD_VAR 0 2
70695: NOT
70696: OR
70697: IFFALSE 70701
// exit ;
70699: GO 70927
// x := GetX ( building ) ;
70701: LD_ADDR_VAR 0 4
70705: PUSH
70706: LD_VAR 0 2
70710: PPUSH
70711: CALL_OW 250
70715: ST_TO_ADDR
// y := GetY ( building ) ;
70716: LD_ADDR_VAR 0 6
70720: PUSH
70721: LD_VAR 0 2
70725: PPUSH
70726: CALL_OW 251
70730: ST_TO_ADDR
// d := GetDir ( building ) ;
70731: LD_ADDR_VAR 0 8
70735: PUSH
70736: LD_VAR 0 2
70740: PPUSH
70741: CALL_OW 254
70745: ST_TO_ADDR
// r := 4 ;
70746: LD_ADDR_VAR 0 9
70750: PUSH
70751: LD_INT 4
70753: ST_TO_ADDR
// for i := 1 to 5 do
70754: LD_ADDR_VAR 0 10
70758: PUSH
70759: DOUBLE
70760: LD_INT 1
70762: DEC
70763: ST_TO_ADDR
70764: LD_INT 5
70766: PUSH
70767: FOR_TO
70768: IFFALSE 70925
// begin _x := ShiftX ( x , d , r + i ) ;
70770: LD_ADDR_VAR 0 5
70774: PUSH
70775: LD_VAR 0 4
70779: PPUSH
70780: LD_VAR 0 8
70784: PPUSH
70785: LD_VAR 0 9
70789: PUSH
70790: LD_VAR 0 10
70794: PLUS
70795: PPUSH
70796: CALL_OW 272
70800: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
70801: LD_ADDR_VAR 0 7
70805: PUSH
70806: LD_VAR 0 6
70810: PPUSH
70811: LD_VAR 0 8
70815: PPUSH
70816: LD_VAR 0 9
70820: PUSH
70821: LD_VAR 0 10
70825: PLUS
70826: PPUSH
70827: CALL_OW 273
70831: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
70832: LD_VAR 0 5
70836: PPUSH
70837: LD_VAR 0 7
70841: PPUSH
70842: CALL_OW 488
70846: PUSH
70847: LD_VAR 0 5
70851: PPUSH
70852: LD_VAR 0 7
70856: PPUSH
70857: CALL_OW 428
70861: PPUSH
70862: CALL_OW 247
70866: PUSH
70867: LD_INT 3
70869: PUSH
70870: LD_INT 2
70872: PUSH
70873: EMPTY
70874: LIST
70875: LIST
70876: IN
70877: NOT
70878: AND
70879: IFFALSE 70923
// begin ComMoveXY ( unit , _x , _y ) ;
70881: LD_VAR 0 1
70885: PPUSH
70886: LD_VAR 0 5
70890: PPUSH
70891: LD_VAR 0 7
70895: PPUSH
70896: CALL_OW 111
// result := [ _x , _y ] ;
70900: LD_ADDR_VAR 0 3
70904: PUSH
70905: LD_VAR 0 5
70909: PUSH
70910: LD_VAR 0 7
70914: PUSH
70915: EMPTY
70916: LIST
70917: LIST
70918: ST_TO_ADDR
// exit ;
70919: POP
70920: POP
70921: GO 70927
// end ; end ;
70923: GO 70767
70925: POP
70926: POP
// end ;
70927: LD_VAR 0 3
70931: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
70932: LD_INT 0
70934: PPUSH
70935: PPUSH
70936: PPUSH
// result := 0 ;
70937: LD_ADDR_VAR 0 3
70941: PUSH
70942: LD_INT 0
70944: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
70945: LD_VAR 0 1
70949: PUSH
70950: LD_INT 0
70952: LESS
70953: PUSH
70954: LD_VAR 0 1
70958: PUSH
70959: LD_INT 8
70961: GREATER
70962: OR
70963: PUSH
70964: LD_VAR 0 2
70968: PUSH
70969: LD_INT 0
70971: LESS
70972: OR
70973: PUSH
70974: LD_VAR 0 2
70978: PUSH
70979: LD_INT 8
70981: GREATER
70982: OR
70983: IFFALSE 70987
// exit ;
70985: GO 71062
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
70987: LD_ADDR_VAR 0 4
70991: PUSH
70992: LD_INT 22
70994: PUSH
70995: LD_VAR 0 2
70999: PUSH
71000: EMPTY
71001: LIST
71002: LIST
71003: PPUSH
71004: CALL_OW 69
71008: PUSH
71009: FOR_IN
71010: IFFALSE 71060
// begin un := UnitShoot ( i ) ;
71012: LD_ADDR_VAR 0 5
71016: PUSH
71017: LD_VAR 0 4
71021: PPUSH
71022: CALL_OW 504
71026: ST_TO_ADDR
// if GetSide ( un ) = side1 then
71027: LD_VAR 0 5
71031: PPUSH
71032: CALL_OW 255
71036: PUSH
71037: LD_VAR 0 1
71041: EQUAL
71042: IFFALSE 71058
// begin result := un ;
71044: LD_ADDR_VAR 0 3
71048: PUSH
71049: LD_VAR 0 5
71053: ST_TO_ADDR
// exit ;
71054: POP
71055: POP
71056: GO 71062
// end ; end ;
71058: GO 71009
71060: POP
71061: POP
// end ;
71062: LD_VAR 0 3
71066: RET
// export function GetCargoBay ( units ) ; begin
71067: LD_INT 0
71069: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
71070: LD_ADDR_VAR 0 2
71074: PUSH
71075: LD_VAR 0 1
71079: PPUSH
71080: LD_INT 2
71082: PUSH
71083: LD_INT 34
71085: PUSH
71086: LD_INT 12
71088: PUSH
71089: EMPTY
71090: LIST
71091: LIST
71092: PUSH
71093: LD_INT 34
71095: PUSH
71096: LD_INT 51
71098: PUSH
71099: EMPTY
71100: LIST
71101: LIST
71102: PUSH
71103: LD_INT 34
71105: PUSH
71106: LD_INT 32
71108: PUSH
71109: EMPTY
71110: LIST
71111: LIST
71112: PUSH
71113: LD_INT 34
71115: PUSH
71116: LD_INT 89
71118: PUSH
71119: EMPTY
71120: LIST
71121: LIST
71122: PUSH
71123: EMPTY
71124: LIST
71125: LIST
71126: LIST
71127: LIST
71128: LIST
71129: PPUSH
71130: CALL_OW 72
71134: ST_TO_ADDR
// end ;
71135: LD_VAR 0 2
71139: RET
// export function Negate ( value ) ; begin
71140: LD_INT 0
71142: PPUSH
// result := not value ;
71143: LD_ADDR_VAR 0 2
71147: PUSH
71148: LD_VAR 0 1
71152: NOT
71153: ST_TO_ADDR
// end ;
71154: LD_VAR 0 2
71158: RET
// export function Inc ( value ) ; begin
71159: LD_INT 0
71161: PPUSH
// result := value + 1 ;
71162: LD_ADDR_VAR 0 2
71166: PUSH
71167: LD_VAR 0 1
71171: PUSH
71172: LD_INT 1
71174: PLUS
71175: ST_TO_ADDR
// end ;
71176: LD_VAR 0 2
71180: RET
// export function Dec ( value ) ; begin
71181: LD_INT 0
71183: PPUSH
// result := value - 1 ;
71184: LD_ADDR_VAR 0 2
71188: PUSH
71189: LD_VAR 0 1
71193: PUSH
71194: LD_INT 1
71196: MINUS
71197: ST_TO_ADDR
// end ;
71198: LD_VAR 0 2
71202: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
71203: LD_INT 0
71205: PPUSH
71206: PPUSH
71207: PPUSH
71208: PPUSH
71209: PPUSH
71210: PPUSH
71211: PPUSH
71212: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
71213: LD_VAR 0 1
71217: PPUSH
71218: LD_VAR 0 2
71222: PPUSH
71223: CALL_OW 488
71227: NOT
71228: PUSH
71229: LD_VAR 0 3
71233: PPUSH
71234: LD_VAR 0 4
71238: PPUSH
71239: CALL_OW 488
71243: NOT
71244: OR
71245: IFFALSE 71258
// begin result := - 1 ;
71247: LD_ADDR_VAR 0 5
71251: PUSH
71252: LD_INT 1
71254: NEG
71255: ST_TO_ADDR
// exit ;
71256: GO 71493
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
71258: LD_ADDR_VAR 0 12
71262: PUSH
71263: LD_VAR 0 1
71267: PPUSH
71268: LD_VAR 0 2
71272: PPUSH
71273: LD_VAR 0 3
71277: PPUSH
71278: LD_VAR 0 4
71282: PPUSH
71283: CALL 70343 0 4
71287: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
71288: LD_ADDR_VAR 0 11
71292: PUSH
71293: LD_VAR 0 1
71297: PPUSH
71298: LD_VAR 0 2
71302: PPUSH
71303: LD_VAR 0 12
71307: PUSH
71308: LD_INT 1
71310: ARRAY
71311: PPUSH
71312: LD_VAR 0 12
71316: PUSH
71317: LD_INT 2
71319: ARRAY
71320: PPUSH
71321: CALL_OW 298
71325: ST_TO_ADDR
// distance := 9999 ;
71326: LD_ADDR_VAR 0 10
71330: PUSH
71331: LD_INT 9999
71333: ST_TO_ADDR
// for i := 0 to 5 do
71334: LD_ADDR_VAR 0 6
71338: PUSH
71339: DOUBLE
71340: LD_INT 0
71342: DEC
71343: ST_TO_ADDR
71344: LD_INT 5
71346: PUSH
71347: FOR_TO
71348: IFFALSE 71491
// begin _x := ShiftX ( x1 , i , centerDist ) ;
71350: LD_ADDR_VAR 0 7
71354: PUSH
71355: LD_VAR 0 1
71359: PPUSH
71360: LD_VAR 0 6
71364: PPUSH
71365: LD_VAR 0 11
71369: PPUSH
71370: CALL_OW 272
71374: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
71375: LD_ADDR_VAR 0 8
71379: PUSH
71380: LD_VAR 0 2
71384: PPUSH
71385: LD_VAR 0 6
71389: PPUSH
71390: LD_VAR 0 11
71394: PPUSH
71395: CALL_OW 273
71399: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
71400: LD_VAR 0 7
71404: PPUSH
71405: LD_VAR 0 8
71409: PPUSH
71410: CALL_OW 488
71414: NOT
71415: IFFALSE 71419
// continue ;
71417: GO 71347
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
71419: LD_ADDR_VAR 0 9
71423: PUSH
71424: LD_VAR 0 12
71428: PUSH
71429: LD_INT 1
71431: ARRAY
71432: PPUSH
71433: LD_VAR 0 12
71437: PUSH
71438: LD_INT 2
71440: ARRAY
71441: PPUSH
71442: LD_VAR 0 7
71446: PPUSH
71447: LD_VAR 0 8
71451: PPUSH
71452: CALL_OW 298
71456: ST_TO_ADDR
// if tmp < distance then
71457: LD_VAR 0 9
71461: PUSH
71462: LD_VAR 0 10
71466: LESS
71467: IFFALSE 71489
// begin result := i ;
71469: LD_ADDR_VAR 0 5
71473: PUSH
71474: LD_VAR 0 6
71478: ST_TO_ADDR
// distance := tmp ;
71479: LD_ADDR_VAR 0 10
71483: PUSH
71484: LD_VAR 0 9
71488: ST_TO_ADDR
// end ; end ;
71489: GO 71347
71491: POP
71492: POP
// end ;
71493: LD_VAR 0 5
71497: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71498: LD_INT 0
71500: PPUSH
71501: PPUSH
// if not driver or not IsInUnit ( driver ) then
71502: LD_VAR 0 1
71506: NOT
71507: PUSH
71508: LD_VAR 0 1
71512: PPUSH
71513: CALL_OW 310
71517: NOT
71518: OR
71519: IFFALSE 71523
// exit ;
71521: GO 71613
// vehicle := IsInUnit ( driver ) ;
71523: LD_ADDR_VAR 0 3
71527: PUSH
71528: LD_VAR 0 1
71532: PPUSH
71533: CALL_OW 310
71537: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71538: LD_VAR 0 1
71542: PPUSH
71543: LD_STRING \
71545: PUSH
71546: LD_INT 0
71548: PUSH
71549: LD_INT 0
71551: PUSH
71552: LD_INT 0
71554: PUSH
71555: LD_INT 0
71557: PUSH
71558: LD_INT 0
71560: PUSH
71561: LD_INT 0
71563: PUSH
71564: EMPTY
71565: LIST
71566: LIST
71567: LIST
71568: LIST
71569: LIST
71570: LIST
71571: LIST
71572: PUSH
71573: LD_STRING E
71575: PUSH
71576: LD_INT 0
71578: PUSH
71579: LD_INT 0
71581: PUSH
71582: LD_VAR 0 3
71586: PUSH
71587: LD_INT 0
71589: PUSH
71590: LD_INT 0
71592: PUSH
71593: LD_INT 0
71595: PUSH
71596: EMPTY
71597: LIST
71598: LIST
71599: LIST
71600: LIST
71601: LIST
71602: LIST
71603: LIST
71604: PUSH
71605: EMPTY
71606: LIST
71607: LIST
71608: PPUSH
71609: CALL_OW 446
// end ;
71613: LD_VAR 0 2
71617: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71618: LD_INT 0
71620: PPUSH
71621: PPUSH
// if not driver or not IsInUnit ( driver ) then
71622: LD_VAR 0 1
71626: NOT
71627: PUSH
71628: LD_VAR 0 1
71632: PPUSH
71633: CALL_OW 310
71637: NOT
71638: OR
71639: IFFALSE 71643
// exit ;
71641: GO 71733
// vehicle := IsInUnit ( driver ) ;
71643: LD_ADDR_VAR 0 3
71647: PUSH
71648: LD_VAR 0 1
71652: PPUSH
71653: CALL_OW 310
71657: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71658: LD_VAR 0 1
71662: PPUSH
71663: LD_STRING \
71665: PUSH
71666: LD_INT 0
71668: PUSH
71669: LD_INT 0
71671: PUSH
71672: LD_INT 0
71674: PUSH
71675: LD_INT 0
71677: PUSH
71678: LD_INT 0
71680: PUSH
71681: LD_INT 0
71683: PUSH
71684: EMPTY
71685: LIST
71686: LIST
71687: LIST
71688: LIST
71689: LIST
71690: LIST
71691: LIST
71692: PUSH
71693: LD_STRING E
71695: PUSH
71696: LD_INT 0
71698: PUSH
71699: LD_INT 0
71701: PUSH
71702: LD_VAR 0 3
71706: PUSH
71707: LD_INT 0
71709: PUSH
71710: LD_INT 0
71712: PUSH
71713: LD_INT 0
71715: PUSH
71716: EMPTY
71717: LIST
71718: LIST
71719: LIST
71720: LIST
71721: LIST
71722: LIST
71723: LIST
71724: PUSH
71725: EMPTY
71726: LIST
71727: LIST
71728: PPUSH
71729: CALL_OW 447
// end ;
71733: LD_VAR 0 2
71737: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
71738: LD_INT 0
71740: PPUSH
71741: PPUSH
71742: PPUSH
// tmp := [ ] ;
71743: LD_ADDR_VAR 0 5
71747: PUSH
71748: EMPTY
71749: ST_TO_ADDR
// for i in units do
71750: LD_ADDR_VAR 0 4
71754: PUSH
71755: LD_VAR 0 1
71759: PUSH
71760: FOR_IN
71761: IFFALSE 71799
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
71763: LD_ADDR_VAR 0 5
71767: PUSH
71768: LD_VAR 0 5
71772: PPUSH
71773: LD_VAR 0 5
71777: PUSH
71778: LD_INT 1
71780: PLUS
71781: PPUSH
71782: LD_VAR 0 4
71786: PPUSH
71787: CALL_OW 256
71791: PPUSH
71792: CALL_OW 2
71796: ST_TO_ADDR
71797: GO 71760
71799: POP
71800: POP
// if not tmp then
71801: LD_VAR 0 5
71805: NOT
71806: IFFALSE 71810
// exit ;
71808: GO 71858
// if asc then
71810: LD_VAR 0 2
71814: IFFALSE 71838
// result := SortListByListAsc ( units , tmp ) else
71816: LD_ADDR_VAR 0 3
71820: PUSH
71821: LD_VAR 0 1
71825: PPUSH
71826: LD_VAR 0 5
71830: PPUSH
71831: CALL_OW 76
71835: ST_TO_ADDR
71836: GO 71858
// result := SortListByListDesc ( units , tmp ) ;
71838: LD_ADDR_VAR 0 3
71842: PUSH
71843: LD_VAR 0 1
71847: PPUSH
71848: LD_VAR 0 5
71852: PPUSH
71853: CALL_OW 77
71857: ST_TO_ADDR
// end ;
71858: LD_VAR 0 3
71862: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
71863: LD_INT 0
71865: PPUSH
71866: PPUSH
// task := GetTaskList ( mech ) ;
71867: LD_ADDR_VAR 0 4
71871: PUSH
71872: LD_VAR 0 1
71876: PPUSH
71877: CALL_OW 437
71881: ST_TO_ADDR
// if not task then
71882: LD_VAR 0 4
71886: NOT
71887: IFFALSE 71891
// exit ;
71889: GO 71933
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
71891: LD_ADDR_VAR 0 3
71895: PUSH
71896: LD_VAR 0 4
71900: PUSH
71901: LD_INT 1
71903: ARRAY
71904: PUSH
71905: LD_INT 1
71907: ARRAY
71908: PUSH
71909: LD_STRING r
71911: EQUAL
71912: PUSH
71913: LD_VAR 0 4
71917: PUSH
71918: LD_INT 1
71920: ARRAY
71921: PUSH
71922: LD_INT 4
71924: ARRAY
71925: PUSH
71926: LD_VAR 0 2
71930: EQUAL
71931: AND
71932: ST_TO_ADDR
// end ;
71933: LD_VAR 0 3
71937: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
71938: LD_INT 0
71940: PPUSH
// SetDir ( unit , d ) ;
71941: LD_VAR 0 1
71945: PPUSH
71946: LD_VAR 0 4
71950: PPUSH
71951: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
71955: LD_VAR 0 1
71959: PPUSH
71960: LD_VAR 0 2
71964: PPUSH
71965: LD_VAR 0 3
71969: PPUSH
71970: LD_VAR 0 5
71974: PPUSH
71975: CALL_OW 48
// end ;
71979: LD_VAR 0 6
71983: RET
// export function ToNaturalNumber ( number ) ; begin
71984: LD_INT 0
71986: PPUSH
// result := number div 1 ;
71987: LD_ADDR_VAR 0 2
71991: PUSH
71992: LD_VAR 0 1
71996: PUSH
71997: LD_INT 1
71999: DIV
72000: ST_TO_ADDR
// if number < 0 then
72001: LD_VAR 0 1
72005: PUSH
72006: LD_INT 0
72008: LESS
72009: IFFALSE 72019
// result := 0 ;
72011: LD_ADDR_VAR 0 2
72015: PUSH
72016: LD_INT 0
72018: ST_TO_ADDR
// end ;
72019: LD_VAR 0 2
72023: RET
// export function SortByClass ( units , class ) ; var un ; begin
72024: LD_INT 0
72026: PPUSH
72027: PPUSH
// if not units or not class then
72028: LD_VAR 0 1
72032: NOT
72033: PUSH
72034: LD_VAR 0 2
72038: NOT
72039: OR
72040: IFFALSE 72044
// exit ;
72042: GO 72139
// result := [ ] ;
72044: LD_ADDR_VAR 0 3
72048: PUSH
72049: EMPTY
72050: ST_TO_ADDR
// for un in units do
72051: LD_ADDR_VAR 0 4
72055: PUSH
72056: LD_VAR 0 1
72060: PUSH
72061: FOR_IN
72062: IFFALSE 72137
// if GetClass ( un ) = class then
72064: LD_VAR 0 4
72068: PPUSH
72069: CALL_OW 257
72073: PUSH
72074: LD_VAR 0 2
72078: EQUAL
72079: IFFALSE 72106
// result := Insert ( result , 1 , un ) else
72081: LD_ADDR_VAR 0 3
72085: PUSH
72086: LD_VAR 0 3
72090: PPUSH
72091: LD_INT 1
72093: PPUSH
72094: LD_VAR 0 4
72098: PPUSH
72099: CALL_OW 2
72103: ST_TO_ADDR
72104: GO 72135
// result := Replace ( result , result + 1 , un ) ;
72106: LD_ADDR_VAR 0 3
72110: PUSH
72111: LD_VAR 0 3
72115: PPUSH
72116: LD_VAR 0 3
72120: PUSH
72121: LD_INT 1
72123: PLUS
72124: PPUSH
72125: LD_VAR 0 4
72129: PPUSH
72130: CALL_OW 1
72134: ST_TO_ADDR
72135: GO 72061
72137: POP
72138: POP
// end ;
72139: LD_VAR 0 3
72143: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
72144: LD_INT 0
72146: PPUSH
72147: PPUSH
72148: PPUSH
72149: PPUSH
72150: PPUSH
72151: PPUSH
72152: PPUSH
// result := [ ] ;
72153: LD_ADDR_VAR 0 4
72157: PUSH
72158: EMPTY
72159: ST_TO_ADDR
// if x - r < 0 then
72160: LD_VAR 0 1
72164: PUSH
72165: LD_VAR 0 3
72169: MINUS
72170: PUSH
72171: LD_INT 0
72173: LESS
72174: IFFALSE 72186
// min_x := 0 else
72176: LD_ADDR_VAR 0 8
72180: PUSH
72181: LD_INT 0
72183: ST_TO_ADDR
72184: GO 72202
// min_x := x - r ;
72186: LD_ADDR_VAR 0 8
72190: PUSH
72191: LD_VAR 0 1
72195: PUSH
72196: LD_VAR 0 3
72200: MINUS
72201: ST_TO_ADDR
// if y - r < 0 then
72202: LD_VAR 0 2
72206: PUSH
72207: LD_VAR 0 3
72211: MINUS
72212: PUSH
72213: LD_INT 0
72215: LESS
72216: IFFALSE 72228
// min_y := 0 else
72218: LD_ADDR_VAR 0 7
72222: PUSH
72223: LD_INT 0
72225: ST_TO_ADDR
72226: GO 72244
// min_y := y - r ;
72228: LD_ADDR_VAR 0 7
72232: PUSH
72233: LD_VAR 0 2
72237: PUSH
72238: LD_VAR 0 3
72242: MINUS
72243: ST_TO_ADDR
// max_x := x + r ;
72244: LD_ADDR_VAR 0 9
72248: PUSH
72249: LD_VAR 0 1
72253: PUSH
72254: LD_VAR 0 3
72258: PLUS
72259: ST_TO_ADDR
// max_y := y + r ;
72260: LD_ADDR_VAR 0 10
72264: PUSH
72265: LD_VAR 0 2
72269: PUSH
72270: LD_VAR 0 3
72274: PLUS
72275: ST_TO_ADDR
// for _x = min_x to max_x do
72276: LD_ADDR_VAR 0 5
72280: PUSH
72281: DOUBLE
72282: LD_VAR 0 8
72286: DEC
72287: ST_TO_ADDR
72288: LD_VAR 0 9
72292: PUSH
72293: FOR_TO
72294: IFFALSE 72395
// for _y = min_y to max_y do
72296: LD_ADDR_VAR 0 6
72300: PUSH
72301: DOUBLE
72302: LD_VAR 0 7
72306: DEC
72307: ST_TO_ADDR
72308: LD_VAR 0 10
72312: PUSH
72313: FOR_TO
72314: IFFALSE 72391
// begin if not ValidHex ( _x , _y ) then
72316: LD_VAR 0 5
72320: PPUSH
72321: LD_VAR 0 6
72325: PPUSH
72326: CALL_OW 488
72330: NOT
72331: IFFALSE 72335
// continue ;
72333: GO 72313
// if GetResourceTypeXY ( _x , _y ) then
72335: LD_VAR 0 5
72339: PPUSH
72340: LD_VAR 0 6
72344: PPUSH
72345: CALL_OW 283
72349: IFFALSE 72389
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
72351: LD_ADDR_VAR 0 4
72355: PUSH
72356: LD_VAR 0 4
72360: PPUSH
72361: LD_VAR 0 4
72365: PUSH
72366: LD_INT 1
72368: PLUS
72369: PPUSH
72370: LD_VAR 0 5
72374: PUSH
72375: LD_VAR 0 6
72379: PUSH
72380: EMPTY
72381: LIST
72382: LIST
72383: PPUSH
72384: CALL_OW 1
72388: ST_TO_ADDR
// end ;
72389: GO 72313
72391: POP
72392: POP
72393: GO 72293
72395: POP
72396: POP
// end ;
72397: LD_VAR 0 4
72401: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
72402: LD_INT 0
72404: PPUSH
72405: PPUSH
72406: PPUSH
72407: PPUSH
72408: PPUSH
72409: PPUSH
72410: PPUSH
72411: PPUSH
// if not units then
72412: LD_VAR 0 1
72416: NOT
72417: IFFALSE 72421
// exit ;
72419: GO 72945
// result := UnitFilter ( units , [ f_ok ] ) ;
72421: LD_ADDR_VAR 0 3
72425: PUSH
72426: LD_VAR 0 1
72430: PPUSH
72431: LD_INT 50
72433: PUSH
72434: EMPTY
72435: LIST
72436: PPUSH
72437: CALL_OW 72
72441: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
72442: LD_ADDR_VAR 0 8
72446: PUSH
72447: LD_VAR 0 1
72451: PUSH
72452: LD_INT 1
72454: ARRAY
72455: PPUSH
72456: CALL_OW 255
72460: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
72461: LD_ADDR_VAR 0 10
72465: PUSH
72466: LD_INT 29
72468: PUSH
72469: LD_INT 91
72471: PUSH
72472: LD_INT 49
72474: PUSH
72475: EMPTY
72476: LIST
72477: LIST
72478: LIST
72479: ST_TO_ADDR
// if not result then
72480: LD_VAR 0 3
72484: NOT
72485: IFFALSE 72489
// exit ;
72487: GO 72945
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
72489: LD_ADDR_VAR 0 5
72493: PUSH
72494: LD_INT 81
72496: PUSH
72497: LD_VAR 0 8
72501: PUSH
72502: EMPTY
72503: LIST
72504: LIST
72505: PPUSH
72506: CALL_OW 69
72510: ST_TO_ADDR
// for i in result do
72511: LD_ADDR_VAR 0 4
72515: PUSH
72516: LD_VAR 0 3
72520: PUSH
72521: FOR_IN
72522: IFFALSE 72943
// begin tag := GetTag ( i ) + 1 ;
72524: LD_ADDR_VAR 0 9
72528: PUSH
72529: LD_VAR 0 4
72533: PPUSH
72534: CALL_OW 110
72538: PUSH
72539: LD_INT 1
72541: PLUS
72542: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
72543: LD_ADDR_VAR 0 7
72547: PUSH
72548: LD_VAR 0 4
72552: PPUSH
72553: CALL_OW 250
72557: PPUSH
72558: LD_VAR 0 4
72562: PPUSH
72563: CALL_OW 251
72567: PPUSH
72568: LD_INT 6
72570: PPUSH
72571: CALL 72144 0 3
72575: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
72576: LD_VAR 0 4
72580: PPUSH
72581: CALL_OW 247
72585: PUSH
72586: LD_INT 2
72588: EQUAL
72589: PUSH
72590: LD_VAR 0 7
72594: AND
72595: PUSH
72596: LD_VAR 0 4
72600: PPUSH
72601: CALL_OW 264
72605: PUSH
72606: LD_VAR 0 10
72610: IN
72611: NOT
72612: AND
72613: IFFALSE 72652
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
72615: LD_VAR 0 4
72619: PPUSH
72620: LD_VAR 0 7
72624: PUSH
72625: LD_INT 1
72627: ARRAY
72628: PUSH
72629: LD_INT 1
72631: ARRAY
72632: PPUSH
72633: LD_VAR 0 7
72637: PUSH
72638: LD_INT 1
72640: ARRAY
72641: PUSH
72642: LD_INT 2
72644: ARRAY
72645: PPUSH
72646: CALL_OW 116
72650: GO 72941
// if path > tag then
72652: LD_VAR 0 2
72656: PUSH
72657: LD_VAR 0 9
72661: GREATER
72662: IFFALSE 72870
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
72664: LD_ADDR_VAR 0 6
72668: PUSH
72669: LD_VAR 0 5
72673: PPUSH
72674: LD_INT 91
72676: PUSH
72677: LD_VAR 0 4
72681: PUSH
72682: LD_INT 8
72684: PUSH
72685: EMPTY
72686: LIST
72687: LIST
72688: LIST
72689: PPUSH
72690: CALL_OW 72
72694: ST_TO_ADDR
// if nearEnemy then
72695: LD_VAR 0 6
72699: IFFALSE 72768
// begin if GetWeapon ( i ) = ru_time_lapser then
72701: LD_VAR 0 4
72705: PPUSH
72706: CALL_OW 264
72710: PUSH
72711: LD_INT 49
72713: EQUAL
72714: IFFALSE 72742
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
72716: LD_VAR 0 4
72720: PPUSH
72721: LD_VAR 0 6
72725: PPUSH
72726: LD_VAR 0 4
72730: PPUSH
72731: CALL_OW 74
72735: PPUSH
72736: CALL_OW 112
72740: GO 72766
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
72742: LD_VAR 0 4
72746: PPUSH
72747: LD_VAR 0 6
72751: PPUSH
72752: LD_VAR 0 4
72756: PPUSH
72757: CALL_OW 74
72761: PPUSH
72762: CALL_OW 115
// end else
72766: GO 72868
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
72768: LD_VAR 0 4
72772: PPUSH
72773: LD_VAR 0 2
72777: PUSH
72778: LD_VAR 0 9
72782: ARRAY
72783: PUSH
72784: LD_INT 1
72786: ARRAY
72787: PPUSH
72788: LD_VAR 0 2
72792: PUSH
72793: LD_VAR 0 9
72797: ARRAY
72798: PUSH
72799: LD_INT 2
72801: ARRAY
72802: PPUSH
72803: CALL_OW 297
72807: PUSH
72808: LD_INT 6
72810: GREATER
72811: IFFALSE 72854
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
72813: LD_VAR 0 4
72817: PPUSH
72818: LD_VAR 0 2
72822: PUSH
72823: LD_VAR 0 9
72827: ARRAY
72828: PUSH
72829: LD_INT 1
72831: ARRAY
72832: PPUSH
72833: LD_VAR 0 2
72837: PUSH
72838: LD_VAR 0 9
72842: ARRAY
72843: PUSH
72844: LD_INT 2
72846: ARRAY
72847: PPUSH
72848: CALL_OW 114
72852: GO 72868
// SetTag ( i , tag ) ;
72854: LD_VAR 0 4
72858: PPUSH
72859: LD_VAR 0 9
72863: PPUSH
72864: CALL_OW 109
// end else
72868: GO 72941
// if enemy then
72870: LD_VAR 0 5
72874: IFFALSE 72941
// begin if GetWeapon ( i ) = ru_time_lapser then
72876: LD_VAR 0 4
72880: PPUSH
72881: CALL_OW 264
72885: PUSH
72886: LD_INT 49
72888: EQUAL
72889: IFFALSE 72917
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
72891: LD_VAR 0 4
72895: PPUSH
72896: LD_VAR 0 5
72900: PPUSH
72901: LD_VAR 0 4
72905: PPUSH
72906: CALL_OW 74
72910: PPUSH
72911: CALL_OW 112
72915: GO 72941
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
72917: LD_VAR 0 4
72921: PPUSH
72922: LD_VAR 0 5
72926: PPUSH
72927: LD_VAR 0 4
72931: PPUSH
72932: CALL_OW 74
72936: PPUSH
72937: CALL_OW 115
// end ; end ;
72941: GO 72521
72943: POP
72944: POP
// end ;
72945: LD_VAR 0 3
72949: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
72950: LD_INT 0
72952: PPUSH
72953: PPUSH
72954: PPUSH
// if not unit or IsInUnit ( unit ) then
72955: LD_VAR 0 1
72959: NOT
72960: PUSH
72961: LD_VAR 0 1
72965: PPUSH
72966: CALL_OW 310
72970: OR
72971: IFFALSE 72975
// exit ;
72973: GO 73066
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
72975: LD_ADDR_VAR 0 4
72979: PUSH
72980: LD_VAR 0 1
72984: PPUSH
72985: CALL_OW 250
72989: PPUSH
72990: LD_VAR 0 2
72994: PPUSH
72995: LD_INT 1
72997: PPUSH
72998: CALL_OW 272
73002: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
73003: LD_ADDR_VAR 0 5
73007: PUSH
73008: LD_VAR 0 1
73012: PPUSH
73013: CALL_OW 251
73017: PPUSH
73018: LD_VAR 0 2
73022: PPUSH
73023: LD_INT 1
73025: PPUSH
73026: CALL_OW 273
73030: ST_TO_ADDR
// if ValidHex ( x , y ) then
73031: LD_VAR 0 4
73035: PPUSH
73036: LD_VAR 0 5
73040: PPUSH
73041: CALL_OW 488
73045: IFFALSE 73066
// ComTurnXY ( unit , x , y ) ;
73047: LD_VAR 0 1
73051: PPUSH
73052: LD_VAR 0 4
73056: PPUSH
73057: LD_VAR 0 5
73061: PPUSH
73062: CALL_OW 118
// end ;
73066: LD_VAR 0 3
73070: RET
// export function SeeUnits ( side , units ) ; var i ; begin
73071: LD_INT 0
73073: PPUSH
73074: PPUSH
// result := false ;
73075: LD_ADDR_VAR 0 3
73079: PUSH
73080: LD_INT 0
73082: ST_TO_ADDR
// if not units then
73083: LD_VAR 0 2
73087: NOT
73088: IFFALSE 73092
// exit ;
73090: GO 73137
// for i in units do
73092: LD_ADDR_VAR 0 4
73096: PUSH
73097: LD_VAR 0 2
73101: PUSH
73102: FOR_IN
73103: IFFALSE 73135
// if See ( side , i ) then
73105: LD_VAR 0 1
73109: PPUSH
73110: LD_VAR 0 4
73114: PPUSH
73115: CALL_OW 292
73119: IFFALSE 73133
// begin result := true ;
73121: LD_ADDR_VAR 0 3
73125: PUSH
73126: LD_INT 1
73128: ST_TO_ADDR
// exit ;
73129: POP
73130: POP
73131: GO 73137
// end ;
73133: GO 73102
73135: POP
73136: POP
// end ;
73137: LD_VAR 0 3
73141: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
73142: LD_INT 0
73144: PPUSH
73145: PPUSH
73146: PPUSH
73147: PPUSH
// if not unit or not points then
73148: LD_VAR 0 1
73152: NOT
73153: PUSH
73154: LD_VAR 0 2
73158: NOT
73159: OR
73160: IFFALSE 73164
// exit ;
73162: GO 73254
// dist := 99999 ;
73164: LD_ADDR_VAR 0 5
73168: PUSH
73169: LD_INT 99999
73171: ST_TO_ADDR
// for i in points do
73172: LD_ADDR_VAR 0 4
73176: PUSH
73177: LD_VAR 0 2
73181: PUSH
73182: FOR_IN
73183: IFFALSE 73252
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
73185: LD_ADDR_VAR 0 6
73189: PUSH
73190: LD_VAR 0 1
73194: PPUSH
73195: LD_VAR 0 4
73199: PUSH
73200: LD_INT 1
73202: ARRAY
73203: PPUSH
73204: LD_VAR 0 4
73208: PUSH
73209: LD_INT 2
73211: ARRAY
73212: PPUSH
73213: CALL_OW 297
73217: ST_TO_ADDR
// if tmpDist < dist then
73218: LD_VAR 0 6
73222: PUSH
73223: LD_VAR 0 5
73227: LESS
73228: IFFALSE 73250
// begin result := i ;
73230: LD_ADDR_VAR 0 3
73234: PUSH
73235: LD_VAR 0 4
73239: ST_TO_ADDR
// dist := tmpDist ;
73240: LD_ADDR_VAR 0 5
73244: PUSH
73245: LD_VAR 0 6
73249: ST_TO_ADDR
// end ; end ;
73250: GO 73182
73252: POP
73253: POP
// end ;
73254: LD_VAR 0 3
73258: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
73259: LD_INT 0
73261: PPUSH
// uc_side := side ;
73262: LD_ADDR_OWVAR 20
73266: PUSH
73267: LD_VAR 0 1
73271: ST_TO_ADDR
// uc_nation := 3 ;
73272: LD_ADDR_OWVAR 21
73276: PUSH
73277: LD_INT 3
73279: ST_TO_ADDR
// vc_chassis := 25 ;
73280: LD_ADDR_OWVAR 37
73284: PUSH
73285: LD_INT 25
73287: ST_TO_ADDR
// vc_engine := engine_siberite ;
73288: LD_ADDR_OWVAR 39
73292: PUSH
73293: LD_INT 3
73295: ST_TO_ADDR
// vc_control := control_computer ;
73296: LD_ADDR_OWVAR 38
73300: PUSH
73301: LD_INT 3
73303: ST_TO_ADDR
// vc_weapon := 59 ;
73304: LD_ADDR_OWVAR 40
73308: PUSH
73309: LD_INT 59
73311: ST_TO_ADDR
// result := CreateVehicle ;
73312: LD_ADDR_VAR 0 5
73316: PUSH
73317: CALL_OW 45
73321: ST_TO_ADDR
// SetDir ( result , d ) ;
73322: LD_VAR 0 5
73326: PPUSH
73327: LD_VAR 0 4
73331: PPUSH
73332: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
73336: LD_VAR 0 5
73340: PPUSH
73341: LD_VAR 0 2
73345: PPUSH
73346: LD_VAR 0 3
73350: PPUSH
73351: LD_INT 0
73353: PPUSH
73354: CALL_OW 48
// end ;
73358: LD_VAR 0 5
73362: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
73363: LD_INT 0
73365: PPUSH
73366: PPUSH
73367: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
73368: LD_ADDR_VAR 0 2
73372: PUSH
73373: LD_INT 0
73375: PUSH
73376: LD_INT 0
73378: PUSH
73379: LD_INT 0
73381: PUSH
73382: LD_INT 0
73384: PUSH
73385: EMPTY
73386: LIST
73387: LIST
73388: LIST
73389: LIST
73390: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
73391: LD_VAR 0 1
73395: NOT
73396: PUSH
73397: LD_VAR 0 1
73401: PPUSH
73402: CALL_OW 264
73406: PUSH
73407: LD_INT 12
73409: PUSH
73410: LD_INT 51
73412: PUSH
73413: LD_INT 32
73415: PUSH
73416: LD_INT 89
73418: PUSH
73419: EMPTY
73420: LIST
73421: LIST
73422: LIST
73423: LIST
73424: IN
73425: NOT
73426: OR
73427: IFFALSE 73431
// exit ;
73429: GO 73529
// for i := 1 to 3 do
73431: LD_ADDR_VAR 0 3
73435: PUSH
73436: DOUBLE
73437: LD_INT 1
73439: DEC
73440: ST_TO_ADDR
73441: LD_INT 3
73443: PUSH
73444: FOR_TO
73445: IFFALSE 73527
// begin tmp := GetCargo ( cargo , i ) ;
73447: LD_ADDR_VAR 0 4
73451: PUSH
73452: LD_VAR 0 1
73456: PPUSH
73457: LD_VAR 0 3
73461: PPUSH
73462: CALL_OW 289
73466: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
73467: LD_ADDR_VAR 0 2
73471: PUSH
73472: LD_VAR 0 2
73476: PPUSH
73477: LD_VAR 0 3
73481: PPUSH
73482: LD_VAR 0 4
73486: PPUSH
73487: CALL_OW 1
73491: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
73492: LD_ADDR_VAR 0 2
73496: PUSH
73497: LD_VAR 0 2
73501: PPUSH
73502: LD_INT 4
73504: PPUSH
73505: LD_VAR 0 2
73509: PUSH
73510: LD_INT 4
73512: ARRAY
73513: PUSH
73514: LD_VAR 0 4
73518: PLUS
73519: PPUSH
73520: CALL_OW 1
73524: ST_TO_ADDR
// end ;
73525: GO 73444
73527: POP
73528: POP
// end ;
73529: LD_VAR 0 2
73533: RET
// export function Length ( array ) ; begin
73534: LD_INT 0
73536: PPUSH
// result := array + 0 ;
73537: LD_ADDR_VAR 0 2
73541: PUSH
73542: LD_VAR 0 1
73546: PUSH
73547: LD_INT 0
73549: PLUS
73550: ST_TO_ADDR
// end ;
73551: LD_VAR 0 2
73555: RET
// export function PrepareArray ( array ) ; begin
73556: LD_INT 0
73558: PPUSH
// result := array diff 0 ;
73559: LD_ADDR_VAR 0 2
73563: PUSH
73564: LD_VAR 0 1
73568: PUSH
73569: LD_INT 0
73571: DIFF
73572: ST_TO_ADDR
// if not result [ 1 ] then
73573: LD_VAR 0 2
73577: PUSH
73578: LD_INT 1
73580: ARRAY
73581: NOT
73582: IFFALSE 73602
// result := Delete ( result , 1 ) ;
73584: LD_ADDR_VAR 0 2
73588: PUSH
73589: LD_VAR 0 2
73593: PPUSH
73594: LD_INT 1
73596: PPUSH
73597: CALL_OW 3
73601: ST_TO_ADDR
// end ;
73602: LD_VAR 0 2
73606: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
73607: LD_INT 0
73609: PPUSH
73610: PPUSH
73611: PPUSH
73612: PPUSH
// sibRocketRange := 25 ;
73613: LD_ADDR_VAR 0 6
73617: PUSH
73618: LD_INT 25
73620: ST_TO_ADDR
// result := false ;
73621: LD_ADDR_VAR 0 4
73625: PUSH
73626: LD_INT 0
73628: ST_TO_ADDR
// for i := 0 to 5 do
73629: LD_ADDR_VAR 0 5
73633: PUSH
73634: DOUBLE
73635: LD_INT 0
73637: DEC
73638: ST_TO_ADDR
73639: LD_INT 5
73641: PUSH
73642: FOR_TO
73643: IFFALSE 73710
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
73645: LD_VAR 0 1
73649: PPUSH
73650: LD_VAR 0 5
73654: PPUSH
73655: LD_VAR 0 6
73659: PPUSH
73660: CALL_OW 272
73664: PPUSH
73665: LD_VAR 0 2
73669: PPUSH
73670: LD_VAR 0 5
73674: PPUSH
73675: LD_VAR 0 6
73679: PPUSH
73680: CALL_OW 273
73684: PPUSH
73685: LD_VAR 0 3
73689: PPUSH
73690: CALL_OW 309
73694: IFFALSE 73708
// begin result := true ;
73696: LD_ADDR_VAR 0 4
73700: PUSH
73701: LD_INT 1
73703: ST_TO_ADDR
// exit ;
73704: POP
73705: POP
73706: GO 73712
// end ;
73708: GO 73642
73710: POP
73711: POP
// end ;
73712: LD_VAR 0 4
73716: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
73717: LD_INT 0
73719: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
73720: LD_VAR 0 1
73724: PPUSH
73725: LD_VAR 0 2
73729: PPUSH
73730: LD_INT 0
73732: PPUSH
73733: LD_INT 0
73735: PPUSH
73736: LD_INT 1
73738: PPUSH
73739: LD_INT 0
73741: PPUSH
73742: CALL_OW 587
// end ; end_of_file
73746: LD_VAR 0 3
73750: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
73751: LD_VAR 0 1
73755: PUSH
73756: LD_INT 200
73758: DOUBLE
73759: GREATEREQUAL
73760: IFFALSE 73768
73762: LD_INT 299
73764: DOUBLE
73765: LESSEQUAL
73766: IFTRUE 73770
73768: GO 73802
73770: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
73771: LD_VAR 0 1
73775: PPUSH
73776: LD_VAR 0 2
73780: PPUSH
73781: LD_VAR 0 3
73785: PPUSH
73786: LD_VAR 0 4
73790: PPUSH
73791: LD_VAR 0 5
73795: PPUSH
73796: CALL 28417 0 5
73800: GO 73879
73802: LD_INT 300
73804: DOUBLE
73805: GREATEREQUAL
73806: IFFALSE 73814
73808: LD_INT 399
73810: DOUBLE
73811: LESSEQUAL
73812: IFTRUE 73816
73814: GO 73878
73816: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
73817: LD_VAR 0 1
73821: PPUSH
73822: LD_VAR 0 2
73826: PPUSH
73827: LD_VAR 0 3
73831: PPUSH
73832: LD_VAR 0 4
73836: PPUSH
73837: LD_VAR 0 5
73841: PPUSH
73842: LD_VAR 0 6
73846: PPUSH
73847: LD_VAR 0 7
73851: PPUSH
73852: LD_VAR 0 8
73856: PPUSH
73857: LD_VAR 0 9
73861: PPUSH
73862: LD_VAR 0 10
73866: PPUSH
73867: LD_VAR 0 11
73871: PPUSH
73872: CALL 24750 0 11
73876: GO 73879
73878: POP
// end ;
73879: PPOPN 11
73881: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
73882: LD_VAR 0 1
73886: PPUSH
73887: LD_VAR 0 2
73891: PPUSH
73892: LD_VAR 0 3
73896: PPUSH
73897: LD_VAR 0 4
73901: PPUSH
73902: LD_VAR 0 5
73906: PPUSH
73907: CALL 28153 0 5
// end ; end_of_file
73911: PPOPN 5
73913: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
73914: LD_VAR 0 1
73918: PPUSH
73919: LD_VAR 0 2
73923: PPUSH
73924: LD_VAR 0 3
73928: PPUSH
73929: LD_VAR 0 4
73933: PPUSH
73934: LD_VAR 0 5
73938: PPUSH
73939: LD_VAR 0 6
73943: PPUSH
73944: CALL 12402 0 6
// end ;
73948: PPOPN 6
73950: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
73951: LD_INT 0
73953: PPUSH
// begin if not units then
73954: LD_VAR 0 1
73958: NOT
73959: IFFALSE 73963
// exit ;
73961: GO 73963
// end ;
73963: PPOPN 7
73965: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
73966: CALL 12306 0 0
// end ;
73970: PPOPN 1
73972: END
