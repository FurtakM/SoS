// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// Init ;
   8: CALL 44 0 0
// DebugMode ;
  12: CALL 265 0 0
// AnimateTrees ( true ) ;
  16: LD_INT 1
  18: PPUSH
  19: CALL_OW 573
// CreateNature ;
  23: CALL 1568 0 0
// PrepareRussians ;
  27: CALL 4578 0 0
// PrepareAmericans ;
  31: CALL 3448 0 0
// Action ;
  35: CALL 8696 0 0
// SaveForQuickRestart ;
  39: CALL_OW 22
// end ;
  43: END
// export debug ; export mission_prev_prefix , mission_prefix ; export buildings_counter , time_to_end , can_end , must_end , kill_counter ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// mission_prefix := 07c_ ;
  55: LD_ADDR_EXP 3
  59: PUSH
  60: LD_STRING 07c_
  62: ST_TO_ADDR
// mission_prev_prefix := 07_ ;
  63: LD_ADDR_EXP 2
  67: PUSH
  68: LD_STRING 07_
  70: ST_TO_ADDR
// buildings_counter := 0 ;
  71: LD_ADDR_EXP 4
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// time_to_end := [ [ 32 32$00 , 29 29$00 , 26 26$00 , 23 23$00 ] [ Difficulty ] , [ 38 38$00 , 36 36$00 , 34 34$00 , 32 32$00 ] [ Difficulty ] , [ 43 43$00 , 41 41$00 , 39 39$00 , 37 37$00 ] [ Difficulty ] ] ;
  79: LD_ADDR_EXP 5
  83: PUSH
  84: LD_INT 67200
  86: PUSH
  87: LD_INT 60900
  89: PUSH
  90: LD_INT 54600
  92: PUSH
  93: LD_INT 48300
  95: PUSH
  96: EMPTY
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: PUSH
 102: LD_OWVAR 67
 106: ARRAY
 107: PUSH
 108: LD_INT 79800
 110: PUSH
 111: LD_INT 75600
 113: PUSH
 114: LD_INT 71400
 116: PUSH
 117: LD_INT 67200
 119: PUSH
 120: EMPTY
 121: LIST
 122: LIST
 123: LIST
 124: LIST
 125: PUSH
 126: LD_OWVAR 67
 130: ARRAY
 131: PUSH
 132: LD_INT 90300
 134: PUSH
 135: LD_INT 86100
 137: PUSH
 138: LD_INT 81900
 140: PUSH
 141: LD_INT 77700
 143: PUSH
 144: EMPTY
 145: LIST
 146: LIST
 147: LIST
 148: LIST
 149: PUSH
 150: LD_OWVAR 67
 154: ARRAY
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: ST_TO_ADDR
// can_end := false ;
 161: LD_ADDR_EXP 6
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// must_end := false ;
 169: LD_ADDR_EXP 7
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// kill_counter := 0 ;
 177: LD_ADDR_EXP 8
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// end ;
 185: LD_VAR 0 1
 189: RET
// every 0 0$01 trigger not debug do
 190: LD_EXP 1
 194: NOT
 195: IFFALSE 264
 197: GO 199
 199: DISABLE
// begin enable ;
 200: ENABLE
// if not must_end then
 201: LD_EXP 7
 205: NOT
 206: IFFALSE 227
// display_strings := [ #Am07-1 , tick ] else
 208: LD_ADDR_OWVAR 47
 212: PUSH
 213: LD_STRING #Am07-1
 215: PUSH
 216: LD_OWVAR 1
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: ST_TO_ADDR
 225: GO 264
// display_strings := [ #Am07-1 , tick , #Am07-2 , time_to_end [ 3 ] - tick ] ;
 227: LD_ADDR_OWVAR 47
 231: PUSH
 232: LD_STRING #Am07-1
 234: PUSH
 235: LD_OWVAR 1
 239: PUSH
 240: LD_STRING #Am07-2
 242: PUSH
 243: LD_EXP 5
 247: PUSH
 248: LD_INT 3
 250: ARRAY
 251: PUSH
 252: LD_OWVAR 1
 256: MINUS
 257: PUSH
 258: EMPTY
 259: LIST
 260: LIST
 261: LIST
 262: LIST
 263: ST_TO_ADDR
// end ;
 264: END
// function DebugMode ; var i ; begin
 265: LD_INT 0
 267: PPUSH
 268: PPUSH
// if not debug then
 269: LD_EXP 1
 273: NOT
 274: IFFALSE 278
// exit ;
 276: GO 293
// Difficulty := 4 ;
 278: LD_ADDR_OWVAR 67
 282: PUSH
 283: LD_INT 4
 285: ST_TO_ADDR
// FogOff ( 1 ) ;
 286: LD_INT 1
 288: PPUSH
 289: CALL_OW 344
// end ;
 293: LD_VAR 0 1
 297: RET
// every 3 trigger debug do var i , filter ;
 298: LD_EXP 1
 302: IFFALSE 391
 304: GO 306
 306: DISABLE
 307: LD_INT 0
 309: PPUSH
 310: PPUSH
// begin enable ;
 311: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 500 ] ] ] ) ;
 312: LD_ADDR_VAR 0 2
 316: PUSH
 317: LD_INT 22
 319: PUSH
 320: LD_INT 1
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PUSH
 327: LD_INT 3
 329: PUSH
 330: LD_INT 24
 332: PUSH
 333: LD_INT 500
 335: PUSH
 336: EMPTY
 337: LIST
 338: LIST
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: PPUSH
 348: CALL_OW 69
 352: ST_TO_ADDR
// if not filter then
 353: LD_VAR 0 2
 357: NOT
 358: IFFALSE 362
// exit ;
 360: GO 391
// for i in filter do
 362: LD_ADDR_VAR 0 1
 366: PUSH
 367: LD_VAR 0 2
 371: PUSH
 372: FOR_IN
 373: IFFALSE 389
// SetLives ( i , 1000 ) ;
 375: LD_VAR 0 1
 379: PPUSH
 380: LD_INT 1000
 382: PPUSH
 383: CALL_OW 234
 387: GO 372
 389: POP
 390: POP
// end ;
 391: PPOPN 2
 393: END
// every 0 0$1 trigger kill_counter >= 20 do
 394: LD_EXP 8
 398: PUSH
 399: LD_INT 20
 401: GREATEREQUAL
 402: IFFALSE 414
 404: GO 406
 406: DISABLE
// SetAchievement ( ACH_HITMAN ) ;
 407: LD_STRING ACH_HITMAN
 409: PPUSH
 410: CALL_OW 543
 414: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) >= 3 do
 415: LD_INT 22
 417: PUSH
 418: LD_INT 1
 420: PUSH
 421: EMPTY
 422: LIST
 423: LIST
 424: PUSH
 425: LD_INT 23
 427: PUSH
 428: LD_INT 3
 430: PUSH
 431: EMPTY
 432: LIST
 433: LIST
 434: PUSH
 435: LD_INT 21
 437: PUSH
 438: LD_INT 2
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: LIST
 449: PPUSH
 450: CALL_OW 69
 454: PUSH
 455: LD_INT 3
 457: GREATEREQUAL
 458: IFFALSE 470
 460: GO 462
 462: DISABLE
// SetAchievement ( ACH_TANKACE ) ;
 463: LD_STRING ACH_TANKACE
 465: PPUSH
 466: CALL_OW 543
 470: END
// every 0 0$1 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) = 0 do
 471: LD_INT 2
 473: PUSH
 474: LD_INT 30
 476: PUSH
 477: LD_INT 0
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PUSH
 484: LD_INT 30
 486: PUSH
 487: LD_INT 1
 489: PUSH
 490: EMPTY
 491: LIST
 492: LIST
 493: PUSH
 494: EMPTY
 495: LIST
 496: LIST
 497: LIST
 498: PPUSH
 499: CALL_OW 69
 503: PUSH
 504: LD_INT 0
 506: EQUAL
 507: IFFALSE 519
 509: GO 511
 511: DISABLE
// SetAchievement ( ACH_COMMANDO ) ; end_of_file
 512: LD_STRING ACH_COMMANDO
 514: PPUSH
 515: CALL_OW 543
 519: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 520: LD_INT 0
 522: PPUSH
// uc_side := side ;
 523: LD_ADDR_OWVAR 20
 527: PUSH
 528: LD_VAR 0 1
 532: ST_TO_ADDR
// uc_nation := nation ;
 533: LD_ADDR_OWVAR 21
 537: PUSH
 538: LD_VAR 0 2
 542: ST_TO_ADDR
// vc_chassis := chassis ;
 543: LD_ADDR_OWVAR 37
 547: PUSH
 548: LD_VAR 0 3
 552: ST_TO_ADDR
// vc_engine := engine ;
 553: LD_ADDR_OWVAR 39
 557: PUSH
 558: LD_VAR 0 4
 562: ST_TO_ADDR
// vc_control := control ;
 563: LD_ADDR_OWVAR 38
 567: PUSH
 568: LD_VAR 0 5
 572: ST_TO_ADDR
// vc_weapon := weapon ;
 573: LD_ADDR_OWVAR 40
 577: PUSH
 578: LD_VAR 0 6
 582: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 583: LD_ADDR_OWVAR 41
 587: PUSH
 588: LD_VAR 0 7
 592: ST_TO_ADDR
// result := CreateVehicle ;
 593: LD_ADDR_VAR 0 8
 597: PUSH
 598: CALL_OW 45
 602: ST_TO_ADDR
// end ;
 603: LD_VAR 0 8
 607: RET
// export function GetRandom ( sex ) ; var i , filter ; begin
 608: LD_INT 0
 610: PPUSH
 611: PPUSH
 612: PPUSH
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] ;
 613: LD_ADDR_VAR 0 4
 617: PUSH
 618: LD_INT 22
 620: PUSH
 621: LD_INT 1
 623: PUSH
 624: EMPTY
 625: LIST
 626: LIST
 627: PUSH
 628: LD_INT 21
 630: PUSH
 631: LD_INT 1
 633: PUSH
 634: EMPTY
 635: LIST
 636: LIST
 637: PUSH
 638: LD_INT 50
 640: PUSH
 641: EMPTY
 642: LIST
 643: PUSH
 644: EMPTY
 645: LIST
 646: LIST
 647: LIST
 648: PPUSH
 649: CALL_OW 69
 653: PUSH
 654: LD_EXP 9
 658: PUSH
 659: LD_EXP 10
 663: PUSH
 664: LD_EXP 11
 668: PUSH
 669: LD_EXP 12
 673: PUSH
 674: LD_EXP 13
 678: PUSH
 679: LD_EXP 14
 683: PUSH
 684: LD_EXP 15
 688: PUSH
 689: LD_EXP 16
 693: PUSH
 694: LD_EXP 18
 698: PUSH
 699: LD_EXP 17
 703: PUSH
 704: EMPTY
 705: LIST
 706: LIST
 707: LIST
 708: LIST
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: DIFF
 716: ST_TO_ADDR
// if not filter then
 717: LD_VAR 0 4
 721: NOT
 722: IFFALSE 726
// exit ;
 724: GO 753
// result := UnitFilter ( filter , [ f_sex , sex ] ) ;
 726: LD_ADDR_VAR 0 2
 730: PUSH
 731: LD_VAR 0 4
 735: PPUSH
 736: LD_INT 26
 738: PUSH
 739: LD_VAR 0 1
 743: PUSH
 744: EMPTY
 745: LIST
 746: LIST
 747: PPUSH
 748: CALL_OW 72
 752: ST_TO_ADDR
// end ;
 753: LD_VAR 0 2
 757: RET
// export function SayX ( units , ident ) ; var i ; begin
 758: LD_INT 0
 760: PPUSH
 761: PPUSH
// result := false ;
 762: LD_ADDR_VAR 0 3
 766: PUSH
 767: LD_INT 0
 769: ST_TO_ADDR
// if not units then
 770: LD_VAR 0 1
 774: NOT
 775: IFFALSE 779
// exit ;
 777: GO 833
// for i in units do
 779: LD_ADDR_VAR 0 4
 783: PUSH
 784: LD_VAR 0 1
 788: PUSH
 789: FOR_IN
 790: IFFALSE 831
// if IsOk ( i ) then
 792: LD_VAR 0 4
 796: PPUSH
 797: CALL_OW 302
 801: IFFALSE 829
// begin Say ( i , ident ) ;
 803: LD_VAR 0 4
 807: PPUSH
 808: LD_VAR 0 2
 812: PPUSH
 813: CALL_OW 88
// result := i ;
 817: LD_ADDR_VAR 0 3
 821: PUSH
 822: LD_VAR 0 4
 826: ST_TO_ADDR
// break ;
 827: GO 831
// end ;
 829: GO 789
 831: POP
 832: POP
// end ;
 833: LD_VAR 0 3
 837: RET
// export function GoToAnotherTower ( un , b , x , y ) ; var i , filter , barracks , side ; begin
 838: LD_INT 0
 840: PPUSH
 841: PPUSH
 842: PPUSH
 843: PPUSH
 844: PPUSH
// if not un or not IsOk ( un ) then
 845: LD_VAR 0 1
 849: NOT
 850: PUSH
 851: LD_VAR 0 1
 855: PPUSH
 856: CALL_OW 302
 860: NOT
 861: OR
 862: IFFALSE 866
// exit ;
 864: GO 1173
// side := GetSide ( un ) ;
 866: LD_ADDR_VAR 0 9
 870: PUSH
 871: LD_VAR 0 1
 875: PPUSH
 876: CALL_OW 255
 880: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_not , [ f_tag , 7 ] ] , [ f_ok ] , [ f_empty ] ] ) diff b ;
 881: LD_ADDR_VAR 0 7
 885: PUSH
 886: LD_INT 22
 888: PUSH
 889: LD_VAR 0 9
 893: PUSH
 894: EMPTY
 895: LIST
 896: LIST
 897: PUSH
 898: LD_INT 30
 900: PUSH
 901: LD_INT 32
 903: PUSH
 904: EMPTY
 905: LIST
 906: LIST
 907: PUSH
 908: LD_INT 3
 910: PUSH
 911: LD_INT 120
 913: PUSH
 914: LD_INT 7
 916: PUSH
 917: EMPTY
 918: LIST
 919: LIST
 920: PUSH
 921: EMPTY
 922: LIST
 923: LIST
 924: PUSH
 925: LD_INT 50
 927: PUSH
 928: EMPTY
 929: LIST
 930: PUSH
 931: LD_INT 58
 933: PUSH
 934: EMPTY
 935: LIST
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: LIST
 941: LIST
 942: LIST
 943: PPUSH
 944: CALL_OW 69
 948: PUSH
 949: LD_VAR 0 2
 953: DIFF
 954: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_barracks ] ] ) ;
 955: LD_ADDR_VAR 0 8
 959: PUSH
 960: LD_INT 22
 962: PUSH
 963: LD_VAR 0 9
 967: PUSH
 968: EMPTY
 969: LIST
 970: LIST
 971: PUSH
 972: LD_INT 30
 974: PUSH
 975: LD_INT 5
 977: PUSH
 978: EMPTY
 979: LIST
 980: LIST
 981: PUSH
 982: EMPTY
 983: LIST
 984: LIST
 985: PPUSH
 986: CALL_OW 69
 990: ST_TO_ADDR
// if not filter then
 991: LD_VAR 0 7
 995: NOT
 996: IFFALSE 1086
// begin if barracks then
 998: LD_VAR 0 8
1002: IFFALSE 1065
// for i in barracks do
1004: LD_ADDR_VAR 0 6
1008: PUSH
1009: LD_VAR 0 8
1013: PUSH
1014: FOR_IN
1015: IFFALSE 1063
// begin if UnitsInside ( i ) < 6 and IsOk ( i ) then
1017: LD_VAR 0 6
1021: PPUSH
1022: CALL_OW 313
1026: PUSH
1027: LD_INT 6
1029: LESS
1030: PUSH
1031: LD_VAR 0 6
1035: PPUSH
1036: CALL_OW 302
1040: AND
1041: IFFALSE 1061
// begin ComEnterUnit ( un , i ) ;
1043: LD_VAR 0 1
1047: PPUSH
1048: LD_VAR 0 6
1052: PPUSH
1053: CALL_OW 120
// exit ;
1057: POP
1058: POP
1059: GO 1173
// end ; end ;
1061: GO 1014
1063: POP
1064: POP
// ComMoveXY ( un , x , y ) ;
1065: LD_VAR 0 1
1069: PPUSH
1070: LD_VAR 0 3
1074: PPUSH
1075: LD_VAR 0 4
1079: PPUSH
1080: CALL_OW 111
// end else
1084: GO 1173
// begin filter := SortByDistanceUnit ( un , filter , true , true ) ;
1086: LD_ADDR_VAR 0 7
1090: PUSH
1091: LD_VAR 0 1
1095: PPUSH
1096: LD_VAR 0 7
1100: PPUSH
1101: LD_INT 1
1103: PPUSH
1104: LD_INT 1
1106: PPUSH
1107: CALL 37734 0 4
1111: ST_TO_ADDR
// if filter then
1112: LD_VAR 0 7
1116: IFFALSE 1154
// begin SetTag ( filter [ 1 ] , 7 ) ;
1118: LD_VAR 0 7
1122: PUSH
1123: LD_INT 1
1125: ARRAY
1126: PPUSH
1127: LD_INT 7
1129: PPUSH
1130: CALL_OW 109
// ComEnterUnit ( un , filter [ 1 ] ) ;
1134: LD_VAR 0 1
1138: PPUSH
1139: LD_VAR 0 7
1143: PUSH
1144: LD_INT 1
1146: ARRAY
1147: PPUSH
1148: CALL_OW 120
// end else
1152: GO 1173
// ComMoveXY ( un , x , y ) ;
1154: LD_VAR 0 1
1158: PPUSH
1159: LD_VAR 0 3
1163: PPUSH
1164: LD_VAR 0 4
1168: PPUSH
1169: CALL_OW 111
// end ; end ;
1173: LD_VAR 0 5
1177: RET
// export function BaseNeedEnergy ( base ) ; var i , tmp ; begin
1178: LD_INT 0
1180: PPUSH
1181: PPUSH
1182: PPUSH
// if not base then
1183: LD_VAR 0 1
1187: NOT
1188: IFFALSE 1192
// exit ;
1190: GO 1250
// tmp := GetEnergy ( GetBase ( base ) ) ;
1192: LD_ADDR_VAR 0 4
1196: PUSH
1197: LD_VAR 0 1
1201: PPUSH
1202: CALL_OW 274
1206: PPUSH
1207: CALL_OW 278
1211: ST_TO_ADDR
// if tmp [ 1 ] > tmp [ 4 ] then
1212: LD_VAR 0 4
1216: PUSH
1217: LD_INT 1
1219: ARRAY
1220: PUSH
1221: LD_VAR 0 4
1225: PUSH
1226: LD_INT 4
1228: ARRAY
1229: GREATER
1230: IFFALSE 1242
// result := true else
1232: LD_ADDR_VAR 0 2
1236: PUSH
1237: LD_INT 1
1239: ST_TO_ADDR
1240: GO 1250
// result := false ;
1242: LD_ADDR_VAR 0 2
1246: PUSH
1247: LD_INT 0
1249: ST_TO_ADDR
// end ;
1250: LD_VAR 0 2
1254: RET
// export function FilterPeople ( side ) ; begin
1255: LD_INT 0
1257: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) ;
1258: LD_ADDR_VAR 0 2
1262: PUSH
1263: LD_INT 22
1265: PUSH
1266: LD_VAR 0 1
1270: PUSH
1271: EMPTY
1272: LIST
1273: LIST
1274: PUSH
1275: LD_INT 21
1277: PUSH
1278: LD_INT 1
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: PPUSH
1289: CALL_OW 69
1293: ST_TO_ADDR
// end ;
1294: LD_VAR 0 2
1298: RET
// export function FilterDrivers ( side ) ; begin
1299: LD_INT 0
1301: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_outside ] ] ] ) ;
1302: LD_ADDR_VAR 0 2
1306: PUSH
1307: LD_INT 22
1309: PUSH
1310: LD_VAR 0 1
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: PUSH
1319: LD_INT 3
1321: PUSH
1322: LD_INT 56
1324: PUSH
1325: EMPTY
1326: LIST
1327: PUSH
1328: EMPTY
1329: LIST
1330: LIST
1331: PUSH
1332: EMPTY
1333: LIST
1334: LIST
1335: PPUSH
1336: CALL_OW 69
1340: ST_TO_ADDR
// end ;
1341: LD_VAR 0 2
1345: RET
// export function FilterPeopleArea ( side , area ) ; begin
1346: LD_INT 0
1348: PPUSH
// result := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
1349: LD_ADDR_VAR 0 3
1353: PUSH
1354: LD_VAR 0 2
1358: PPUSH
1359: LD_INT 22
1361: PUSH
1362: LD_INT 1
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: PUSH
1369: LD_INT 21
1371: PUSH
1372: LD_INT 1
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: PUSH
1379: EMPTY
1380: LIST
1381: LIST
1382: PPUSH
1383: CALL_OW 70
1387: ST_TO_ADDR
// end ;
1388: LD_VAR 0 3
1392: RET
// export function FilterDriversArea ( side , area ) ; var i , tmp ; begin
1393: LD_INT 0
1395: PPUSH
1396: PPUSH
1397: PPUSH
// tmp := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
1398: LD_ADDR_VAR 0 5
1402: PUSH
1403: LD_VAR 0 2
1407: PPUSH
1408: LD_INT 22
1410: PUSH
1411: LD_INT 1
1413: PUSH
1414: EMPTY
1415: LIST
1416: LIST
1417: PUSH
1418: LD_INT 21
1420: PUSH
1421: LD_INT 2
1423: PUSH
1424: EMPTY
1425: LIST
1426: LIST
1427: PUSH
1428: LD_INT 3
1430: PUSH
1431: LD_INT 58
1433: PUSH
1434: EMPTY
1435: LIST
1436: PUSH
1437: EMPTY
1438: LIST
1439: LIST
1440: PUSH
1441: EMPTY
1442: LIST
1443: LIST
1444: LIST
1445: PPUSH
1446: CALL_OW 70
1450: ST_TO_ADDR
// result := [ ] ;
1451: LD_ADDR_VAR 0 3
1455: PUSH
1456: EMPTY
1457: ST_TO_ADDR
// if not tmp then
1458: LD_VAR 0 5
1462: NOT
1463: IFFALSE 1467
// exit ;
1465: GO 1519
// for i in tmp do
1467: LD_ADDR_VAR 0 4
1471: PUSH
1472: LD_VAR 0 5
1476: PUSH
1477: FOR_IN
1478: IFFALSE 1503
// result := result union IsDrivenBy ( i ) ;
1480: LD_ADDR_VAR 0 3
1484: PUSH
1485: LD_VAR 0 3
1489: PUSH
1490: LD_VAR 0 4
1494: PPUSH
1495: CALL_OW 311
1499: UNION
1500: ST_TO_ADDR
1501: GO 1477
1503: POP
1504: POP
// result := result diff 0 ;
1505: LD_ADDR_VAR 0 3
1509: PUSH
1510: LD_VAR 0 3
1514: PUSH
1515: LD_INT 0
1517: DIFF
1518: ST_TO_ADDR
// end ;
1519: LD_VAR 0 3
1523: RET
// export function FilterBuildings ( side ) ; begin
1524: LD_INT 0
1526: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
1527: LD_ADDR_VAR 0 2
1531: PUSH
1532: LD_INT 22
1534: PUSH
1535: LD_VAR 0 1
1539: PUSH
1540: EMPTY
1541: LIST
1542: LIST
1543: PUSH
1544: LD_INT 21
1546: PUSH
1547: LD_INT 3
1549: PUSH
1550: EMPTY
1551: LIST
1552: LIST
1553: PUSH
1554: EMPTY
1555: LIST
1556: LIST
1557: PPUSH
1558: CALL_OW 69
1562: ST_TO_ADDR
// end ;
1563: LD_VAR 0 2
1567: RET
// export function CreateNature ; var i , animal , nat_area ; begin
1568: LD_INT 0
1570: PPUSH
1571: PPUSH
1572: PPUSH
1573: PPUSH
// uc_side = 0 ;
1574: LD_ADDR_OWVAR 20
1578: PUSH
1579: LD_INT 0
1581: ST_TO_ADDR
// uc_nation = 0 ;
1582: LD_ADDR_OWVAR 21
1586: PUSH
1587: LD_INT 0
1589: ST_TO_ADDR
// nat_area := wildArea ;
1590: LD_ADDR_VAR 0 4
1594: PUSH
1595: LD_INT 3
1597: ST_TO_ADDR
// InitHc ;
1598: CALL_OW 19
// for i = 1 to 4 do
1602: LD_ADDR_VAR 0 2
1606: PUSH
1607: DOUBLE
1608: LD_INT 1
1610: DEC
1611: ST_TO_ADDR
1612: LD_INT 4
1614: PUSH
1615: FOR_TO
1616: IFFALSE 1671
// begin hc_class = 18 ;
1618: LD_ADDR_OWVAR 28
1622: PUSH
1623: LD_INT 18
1625: ST_TO_ADDR
// hc_gallery =  ;
1626: LD_ADDR_OWVAR 33
1630: PUSH
1631: LD_STRING 
1633: ST_TO_ADDR
// hc_face_number = 1 ;
1634: LD_ADDR_OWVAR 34
1638: PUSH
1639: LD_INT 1
1641: ST_TO_ADDR
// animal := CreateHuman ;
1642: LD_ADDR_VAR 0 3
1646: PUSH
1647: CALL_OW 44
1651: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1652: LD_VAR 0 3
1656: PPUSH
1657: LD_VAR 0 4
1661: PPUSH
1662: LD_INT 0
1664: PPUSH
1665: CALL_OW 49
// end ;
1669: GO 1615
1671: POP
1672: POP
// for i = 1 to 6 do
1673: LD_ADDR_VAR 0 2
1677: PUSH
1678: DOUBLE
1679: LD_INT 1
1681: DEC
1682: ST_TO_ADDR
1683: LD_INT 6
1685: PUSH
1686: FOR_TO
1687: IFFALSE 1758
// begin hc_class = class_tiger ;
1689: LD_ADDR_OWVAR 28
1693: PUSH
1694: LD_INT 14
1696: ST_TO_ADDR
// hc_gallery =  ;
1697: LD_ADDR_OWVAR 33
1701: PUSH
1702: LD_STRING 
1704: ST_TO_ADDR
// hc_agressivity = Rand ( 0 , 10 ) ;
1705: LD_ADDR_OWVAR 35
1709: PUSH
1710: LD_INT 0
1712: PPUSH
1713: LD_INT 10
1715: PPUSH
1716: CALL_OW 12
1720: ST_TO_ADDR
// hc_face_number = 3 ;
1721: LD_ADDR_OWVAR 34
1725: PUSH
1726: LD_INT 3
1728: ST_TO_ADDR
// animal := CreateHuman ;
1729: LD_ADDR_VAR 0 3
1733: PUSH
1734: CALL_OW 44
1738: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1739: LD_VAR 0 3
1743: PPUSH
1744: LD_VAR 0 4
1748: PPUSH
1749: LD_INT 0
1751: PPUSH
1752: CALL_OW 49
// end ;
1756: GO 1686
1758: POP
1759: POP
// for i = 1 to 2 do
1760: LD_ADDR_VAR 0 2
1764: PUSH
1765: DOUBLE
1766: LD_INT 1
1768: DEC
1769: ST_TO_ADDR
1770: LD_INT 2
1772: PUSH
1773: FOR_TO
1774: IFFALSE 1837
// begin hc_class = 21 ;
1776: LD_ADDR_OWVAR 28
1780: PUSH
1781: LD_INT 21
1783: ST_TO_ADDR
// hc_gallery =  ;
1784: LD_ADDR_OWVAR 33
1788: PUSH
1789: LD_STRING 
1791: ST_TO_ADDR
// hc_agressivity = 0 ;
1792: LD_ADDR_OWVAR 35
1796: PUSH
1797: LD_INT 0
1799: ST_TO_ADDR
// hc_face_number = 5 ;
1800: LD_ADDR_OWVAR 34
1804: PUSH
1805: LD_INT 5
1807: ST_TO_ADDR
// animal := CreateHuman ;
1808: LD_ADDR_VAR 0 3
1812: PUSH
1813: CALL_OW 44
1817: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1818: LD_VAR 0 3
1822: PPUSH
1823: LD_VAR 0 4
1827: PPUSH
1828: LD_INT 0
1830: PPUSH
1831: CALL_OW 49
// end ;
1835: GO 1773
1837: POP
1838: POP
// for i = 1 to 6 do
1839: LD_ADDR_VAR 0 2
1843: PUSH
1844: DOUBLE
1845: LD_INT 1
1847: DEC
1848: ST_TO_ADDR
1849: LD_INT 6
1851: PUSH
1852: FOR_TO
1853: IFFALSE 1908
// begin hc_class = 13 ;
1855: LD_ADDR_OWVAR 28
1859: PUSH
1860: LD_INT 13
1862: ST_TO_ADDR
// hc_gallery =  ;
1863: LD_ADDR_OWVAR 33
1867: PUSH
1868: LD_STRING 
1870: ST_TO_ADDR
// hc_face_number = 4 ;
1871: LD_ADDR_OWVAR 34
1875: PUSH
1876: LD_INT 4
1878: ST_TO_ADDR
// animal := CreateHuman ;
1879: LD_ADDR_VAR 0 3
1883: PUSH
1884: CALL_OW 44
1888: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1889: LD_VAR 0 3
1893: PPUSH
1894: LD_VAR 0 4
1898: PPUSH
1899: LD_INT 0
1901: PPUSH
1902: CALL_OW 49
// end ;
1906: GO 1852
1908: POP
1909: POP
// for i = 1 to 2 do
1910: LD_ADDR_VAR 0 2
1914: PUSH
1915: DOUBLE
1916: LD_INT 1
1918: DEC
1919: ST_TO_ADDR
1920: LD_INT 2
1922: PUSH
1923: FOR_TO
1924: IFFALSE 1983
// begin hc_class = 20 ;
1926: LD_ADDR_OWVAR 28
1930: PUSH
1931: LD_INT 20
1933: ST_TO_ADDR
// hc_gallery =  ;
1934: LD_ADDR_OWVAR 33
1938: PUSH
1939: LD_STRING 
1941: ST_TO_ADDR
// hc_face_number = 2 ;
1942: LD_ADDR_OWVAR 34
1946: PUSH
1947: LD_INT 2
1949: ST_TO_ADDR
// animal := CreateHuman ;
1950: LD_ADDR_VAR 0 3
1954: PUSH
1955: CALL_OW 44
1959: ST_TO_ADDR
// PlaceUnitXYR ( animal , 101 , 37 , 3 , false ) ;
1960: LD_VAR 0 3
1964: PPUSH
1965: LD_INT 101
1967: PPUSH
1968: LD_INT 37
1970: PPUSH
1971: LD_INT 3
1973: PPUSH
1974: LD_INT 0
1976: PPUSH
1977: CALL_OW 50
// end ;
1981: GO 1923
1983: POP
1984: POP
// for i = 1 to 1 do
1985: LD_ADDR_VAR 0 2
1989: PUSH
1990: DOUBLE
1991: LD_INT 1
1993: DEC
1994: ST_TO_ADDR
1995: LD_INT 1
1997: PUSH
1998: FOR_TO
1999: IFFALSE 2046
// begin vc_chassis := 31 ;
2001: LD_ADDR_OWVAR 37
2005: PUSH
2006: LD_INT 31
2008: ST_TO_ADDR
// vc_control := control_rider ;
2009: LD_ADDR_OWVAR 38
2013: PUSH
2014: LD_INT 4
2016: ST_TO_ADDR
// animal := CreateVehicle ;
2017: LD_ADDR_VAR 0 3
2021: PUSH
2022: CALL_OW 45
2026: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
2027: LD_VAR 0 3
2031: PPUSH
2032: LD_VAR 0 4
2036: PPUSH
2037: LD_INT 0
2039: PPUSH
2040: CALL_OW 49
// end ;
2044: GO 1998
2046: POP
2047: POP
// end ;
2048: LD_VAR 0 1
2052: RET
// export function NearbyTowerHasEnergy ( unit ) ; var i , tmp , energy ; begin
2053: LD_INT 0
2055: PPUSH
2056: PPUSH
2057: PPUSH
2058: PPUSH
// result := [ ] ;
2059: LD_ADDR_VAR 0 2
2063: PUSH
2064: EMPTY
2065: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_dist , unit , 15 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
2066: LD_ADDR_VAR 0 4
2070: PUSH
2071: LD_INT 81
2073: PUSH
2074: LD_VAR 0 1
2078: PPUSH
2079: CALL_OW 255
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: PUSH
2088: LD_INT 91
2090: PUSH
2091: LD_VAR 0 1
2095: PUSH
2096: LD_INT 15
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: LIST
2103: PUSH
2104: LD_INT 2
2106: PUSH
2107: LD_INT 30
2109: PUSH
2110: LD_INT 32
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: PUSH
2117: LD_INT 30
2119: PUSH
2120: LD_INT 33
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: PUSH
2127: EMPTY
2128: LIST
2129: LIST
2130: LIST
2131: PUSH
2132: EMPTY
2133: LIST
2134: LIST
2135: LIST
2136: PPUSH
2137: CALL_OW 69
2141: ST_TO_ADDR
// if not tmp then
2142: LD_VAR 0 4
2146: NOT
2147: IFFALSE 2151
// exit ;
2149: GO 2220
// for i in tmp do
2151: LD_ADDR_VAR 0 3
2155: PUSH
2156: LD_VAR 0 4
2160: PUSH
2161: FOR_IN
2162: IFFALSE 2218
// begin energy := GetEnergy ( GetBase ( i ) ) ;
2164: LD_ADDR_VAR 0 5
2168: PUSH
2169: LD_VAR 0 3
2173: PPUSH
2174: CALL_OW 274
2178: PPUSH
2179: CALL_OW 278
2183: ST_TO_ADDR
// if energy [ 4 ] > energy [ 1 ] then
2184: LD_VAR 0 5
2188: PUSH
2189: LD_INT 4
2191: ARRAY
2192: PUSH
2193: LD_VAR 0 5
2197: PUSH
2198: LD_INT 1
2200: ARRAY
2201: GREATER
2202: IFFALSE 2216
// begin result := i ;
2204: LD_ADDR_VAR 0 2
2208: PUSH
2209: LD_VAR 0 3
2213: ST_TO_ADDR
// break ;
2214: GO 2218
// end ; end ;
2216: GO 2161
2218: POP
2219: POP
// end ;
2220: LD_VAR 0 2
2224: RET
// export function GetTurretWeaponBase ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
2225: LD_INT 0
2227: PPUSH
2228: PPUSH
2229: PPUSH
2230: PPUSH
2231: PPUSH
2232: PPUSH
2233: PPUSH
2234: PPUSH
2235: PPUSH
2236: PPUSH
2237: PPUSH
2238: PPUSH
2239: PPUSH
2240: PPUSH
2241: PPUSH
2242: PPUSH
// result := false ;
2243: LD_ADDR_VAR 0 2
2247: PUSH
2248: LD_INT 0
2250: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
2251: LD_VAR 0 1
2255: NOT
2256: PUSH
2257: LD_VAR 0 1
2261: PPUSH
2262: CALL_OW 266
2266: PUSH
2267: LD_INT 32
2269: PUSH
2270: LD_INT 33
2272: PUSH
2273: EMPTY
2274: LIST
2275: LIST
2276: IN
2277: NOT
2278: OR
2279: IFFALSE 2283
// exit ;
2281: GO 3443
// nat := GetNation ( tower ) ;
2283: LD_ADDR_VAR 0 11
2287: PUSH
2288: LD_VAR 0 1
2292: PPUSH
2293: CALL_OW 248
2297: ST_TO_ADDR
// side := GetSide ( tower ) ;
2298: LD_ADDR_VAR 0 15
2302: PUSH
2303: LD_VAR 0 1
2307: PPUSH
2308: CALL_OW 255
2312: ST_TO_ADDR
// x := GetX ( tower ) ;
2313: LD_ADDR_VAR 0 9
2317: PUSH
2318: LD_VAR 0 1
2322: PPUSH
2323: CALL_OW 250
2327: ST_TO_ADDR
// y := GetY ( tower ) ;
2328: LD_ADDR_VAR 0 10
2332: PUSH
2333: LD_VAR 0 1
2337: PPUSH
2338: CALL_OW 251
2342: ST_TO_ADDR
// if not x or not y then
2343: LD_VAR 0 9
2347: NOT
2348: PUSH
2349: LD_VAR 0 10
2353: NOT
2354: OR
2355: IFFALSE 2359
// exit ;
2357: GO 3443
// weapon := 0 ;
2359: LD_ADDR_VAR 0 17
2363: PUSH
2364: LD_INT 0
2366: ST_TO_ADDR
// fac_list := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
2367: LD_ADDR_VAR 0 16
2371: PUSH
2372: LD_INT 42
2374: PUSH
2375: LD_INT 43
2377: PUSH
2378: LD_INT 44
2380: PUSH
2381: LD_INT 46
2383: PUSH
2384: EMPTY
2385: LIST
2386: LIST
2387: LIST
2388: LIST
2389: ST_TO_ADDR
// if not fac_list then
2390: LD_VAR 0 16
2394: NOT
2395: IFFALSE 2399
// exit ;
2397: GO 3443
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
2399: LD_ADDR_VAR 0 4
2403: PUSH
2404: LD_INT 4
2406: PUSH
2407: LD_INT 5
2409: PUSH
2410: LD_INT 9
2412: PUSH
2413: LD_INT 10
2415: PUSH
2416: LD_INT 6
2418: PUSH
2419: LD_INT 7
2421: PUSH
2422: LD_INT 11
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: LIST
2429: LIST
2430: LIST
2431: LIST
2432: LIST
2433: PUSH
2434: LD_INT 27
2436: PUSH
2437: LD_INT 28
2439: PUSH
2440: LD_INT 26
2442: PUSH
2443: LD_INT 30
2445: PUSH
2446: EMPTY
2447: LIST
2448: LIST
2449: LIST
2450: LIST
2451: PUSH
2452: LD_INT 43
2454: PUSH
2455: LD_INT 44
2457: PUSH
2458: LD_INT 46
2460: PUSH
2461: LD_INT 45
2463: PUSH
2464: LD_INT 47
2466: PUSH
2467: LD_INT 49
2469: PUSH
2470: EMPTY
2471: LIST
2472: LIST
2473: LIST
2474: LIST
2475: LIST
2476: LIST
2477: PUSH
2478: EMPTY
2479: LIST
2480: LIST
2481: LIST
2482: PUSH
2483: LD_VAR 0 11
2487: ARRAY
2488: ST_TO_ADDR
// for i in list do
2489: LD_ADDR_VAR 0 7
2493: PUSH
2494: LD_VAR 0 4
2498: PUSH
2499: FOR_IN
2500: IFFALSE 2533
// if not i in fac_list then
2502: LD_VAR 0 7
2506: PUSH
2507: LD_VAR 0 16
2511: IN
2512: NOT
2513: IFFALSE 2531
// list := list diff i ;
2515: LD_ADDR_VAR 0 4
2519: PUSH
2520: LD_VAR 0 4
2524: PUSH
2525: LD_VAR 0 7
2529: DIFF
2530: ST_TO_ADDR
2531: GO 2499
2533: POP
2534: POP
// if not list then
2535: LD_VAR 0 4
2539: NOT
2540: IFFALSE 2544
// exit ;
2542: GO 3443
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
2544: LD_VAR 0 11
2548: PUSH
2549: LD_INT 3
2551: EQUAL
2552: PUSH
2553: LD_INT 49
2555: PUSH
2556: LD_VAR 0 4
2560: IN
2561: AND
2562: PUSH
2563: LD_INT 31
2565: PPUSH
2566: LD_VAR 0 15
2570: PPUSH
2571: CALL_OW 321
2575: PUSH
2576: LD_INT 2
2578: EQUAL
2579: AND
2580: IFFALSE 2640
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
2582: LD_INT 22
2584: PUSH
2585: LD_VAR 0 15
2589: PUSH
2590: EMPTY
2591: LIST
2592: LIST
2593: PUSH
2594: LD_INT 35
2596: PUSH
2597: LD_INT 49
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: PUSH
2604: LD_INT 91
2606: PUSH
2607: LD_VAR 0 1
2611: PUSH
2612: LD_INT 10
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: LIST
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: LIST
2624: PPUSH
2625: CALL_OW 69
2629: NOT
2630: IFFALSE 2640
// weapon := ru_time_lapser ;
2632: LD_ADDR_VAR 0 17
2636: PUSH
2637: LD_INT 49
2639: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
2640: LD_VAR 0 11
2644: PUSH
2645: LD_INT 1
2647: PUSH
2648: LD_INT 2
2650: PUSH
2651: EMPTY
2652: LIST
2653: LIST
2654: IN
2655: PUSH
2656: LD_INT 11
2658: PUSH
2659: LD_VAR 0 4
2663: IN
2664: PUSH
2665: LD_INT 30
2667: PUSH
2668: LD_VAR 0 4
2672: IN
2673: OR
2674: AND
2675: PUSH
2676: LD_INT 6
2678: PPUSH
2679: LD_VAR 0 15
2683: PPUSH
2684: CALL_OW 321
2688: PUSH
2689: LD_INT 2
2691: EQUAL
2692: AND
2693: IFFALSE 2858
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
2695: LD_INT 22
2697: PUSH
2698: LD_VAR 0 15
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: PUSH
2707: LD_INT 2
2709: PUSH
2710: LD_INT 35
2712: PUSH
2713: LD_INT 11
2715: PUSH
2716: EMPTY
2717: LIST
2718: LIST
2719: PUSH
2720: LD_INT 35
2722: PUSH
2723: LD_INT 30
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: LIST
2734: PUSH
2735: LD_INT 91
2737: PUSH
2738: LD_VAR 0 1
2742: PUSH
2743: LD_INT 18
2745: PUSH
2746: EMPTY
2747: LIST
2748: LIST
2749: LIST
2750: PUSH
2751: EMPTY
2752: LIST
2753: LIST
2754: LIST
2755: PPUSH
2756: CALL_OW 69
2760: NOT
2761: PUSH
2762: LD_INT 22
2764: PUSH
2765: LD_VAR 0 15
2769: PUSH
2770: EMPTY
2771: LIST
2772: LIST
2773: PUSH
2774: LD_INT 2
2776: PUSH
2777: LD_INT 30
2779: PUSH
2780: LD_INT 32
2782: PUSH
2783: EMPTY
2784: LIST
2785: LIST
2786: PUSH
2787: LD_INT 30
2789: PUSH
2790: LD_INT 33
2792: PUSH
2793: EMPTY
2794: LIST
2795: LIST
2796: PUSH
2797: EMPTY
2798: LIST
2799: LIST
2800: LIST
2801: PUSH
2802: LD_INT 91
2804: PUSH
2805: LD_VAR 0 1
2809: PUSH
2810: LD_INT 12
2812: PUSH
2813: EMPTY
2814: LIST
2815: LIST
2816: LIST
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: LIST
2822: PUSH
2823: EMPTY
2824: LIST
2825: PPUSH
2826: CALL_OW 69
2830: PUSH
2831: LD_INT 2
2833: GREATER
2834: AND
2835: IFFALSE 2858
// weapon := [ us_radar , ar_radar ] [ nat ] ;
2837: LD_ADDR_VAR 0 17
2841: PUSH
2842: LD_INT 11
2844: PUSH
2845: LD_INT 30
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: PUSH
2852: LD_VAR 0 11
2856: ARRAY
2857: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
2858: LD_VAR 0 17
2862: NOT
2863: PUSH
2864: LD_INT 40
2866: PPUSH
2867: LD_VAR 0 15
2871: PPUSH
2872: CALL_OW 321
2876: PUSH
2877: LD_INT 2
2879: EQUAL
2880: AND
2881: PUSH
2882: LD_INT 7
2884: PUSH
2885: LD_VAR 0 4
2889: IN
2890: PUSH
2891: LD_INT 28
2893: PUSH
2894: LD_VAR 0 4
2898: IN
2899: OR
2900: PUSH
2901: LD_INT 45
2903: PUSH
2904: LD_VAR 0 4
2908: IN
2909: OR
2910: AND
2911: IFFALSE 3165
// begin hex := GetHexInfo ( x , y ) ;
2913: LD_ADDR_VAR 0 3
2917: PUSH
2918: LD_VAR 0 9
2922: PPUSH
2923: LD_VAR 0 10
2927: PPUSH
2928: CALL_OW 546
2932: ST_TO_ADDR
// if hex [ 1 ] then
2933: LD_VAR 0 3
2937: PUSH
2938: LD_INT 1
2940: ARRAY
2941: IFFALSE 2945
// exit ;
2943: GO 3443
// height := hex [ 2 ] ;
2945: LD_ADDR_VAR 0 14
2949: PUSH
2950: LD_VAR 0 3
2954: PUSH
2955: LD_INT 2
2957: ARRAY
2958: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
2959: LD_ADDR_VAR 0 13
2963: PUSH
2964: LD_INT 0
2966: PUSH
2967: LD_INT 2
2969: PUSH
2970: LD_INT 3
2972: PUSH
2973: LD_INT 5
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: LIST
2980: LIST
2981: ST_TO_ADDR
// for i in tmp do
2982: LD_ADDR_VAR 0 7
2986: PUSH
2987: LD_VAR 0 13
2991: PUSH
2992: FOR_IN
2993: IFFALSE 3163
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
2995: LD_ADDR_VAR 0 8
2999: PUSH
3000: LD_VAR 0 9
3004: PPUSH
3005: LD_VAR 0 7
3009: PPUSH
3010: LD_INT 5
3012: PPUSH
3013: CALL_OW 272
3017: PUSH
3018: LD_VAR 0 10
3022: PPUSH
3023: LD_VAR 0 7
3027: PPUSH
3028: LD_INT 5
3030: PPUSH
3031: CALL_OW 273
3035: PUSH
3036: EMPTY
3037: LIST
3038: LIST
3039: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
3040: LD_VAR 0 8
3044: PUSH
3045: LD_INT 1
3047: ARRAY
3048: PPUSH
3049: LD_VAR 0 8
3053: PUSH
3054: LD_INT 2
3056: ARRAY
3057: PPUSH
3058: CALL_OW 488
3062: IFFALSE 3161
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
3064: LD_ADDR_VAR 0 3
3068: PUSH
3069: LD_VAR 0 8
3073: PUSH
3074: LD_INT 1
3076: ARRAY
3077: PPUSH
3078: LD_VAR 0 8
3082: PUSH
3083: LD_INT 2
3085: ARRAY
3086: PPUSH
3087: CALL_OW 546
3091: ST_TO_ADDR
// if hex [ 1 ] then
3092: LD_VAR 0 3
3096: PUSH
3097: LD_INT 1
3099: ARRAY
3100: IFFALSE 3104
// continue ;
3102: GO 2992
// h := hex [ 2 ] ;
3104: LD_ADDR_VAR 0 12
3108: PUSH
3109: LD_VAR 0 3
3113: PUSH
3114: LD_INT 2
3116: ARRAY
3117: ST_TO_ADDR
// if h + 7 < height then
3118: LD_VAR 0 12
3122: PUSH
3123: LD_INT 7
3125: PLUS
3126: PUSH
3127: LD_VAR 0 14
3131: LESS
3132: IFFALSE 3161
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
3134: LD_ADDR_VAR 0 17
3138: PUSH
3139: LD_INT 7
3141: PUSH
3142: LD_INT 28
3144: PUSH
3145: LD_INT 45
3147: PUSH
3148: EMPTY
3149: LIST
3150: LIST
3151: LIST
3152: PUSH
3153: LD_VAR 0 11
3157: ARRAY
3158: ST_TO_ADDR
// break ;
3159: GO 3163
// end ; end ; end ;
3161: GO 2992
3163: POP
3164: POP
// end ; if not weapon then
3165: LD_VAR 0 17
3169: NOT
3170: IFFALSE 3325
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
3172: LD_ADDR_VAR 0 4
3176: PUSH
3177: LD_VAR 0 4
3181: PUSH
3182: LD_INT 11
3184: PUSH
3185: LD_INT 30
3187: PUSH
3188: LD_INT 49
3190: PUSH
3191: EMPTY
3192: LIST
3193: LIST
3194: LIST
3195: DIFF
3196: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , tower , 6 ] , [ f_not , [ f_bweapon , 0 ] ] ] ) ;
3197: LD_ADDR_VAR 0 13
3201: PUSH
3202: LD_INT 22
3204: PUSH
3205: LD_VAR 0 15
3209: PUSH
3210: EMPTY
3211: LIST
3212: LIST
3213: PUSH
3214: LD_INT 91
3216: PUSH
3217: LD_VAR 0 1
3221: PUSH
3222: LD_INT 6
3224: PUSH
3225: EMPTY
3226: LIST
3227: LIST
3228: LIST
3229: PUSH
3230: LD_INT 3
3232: PUSH
3233: LD_INT 35
3235: PUSH
3236: LD_INT 0
3238: PUSH
3239: EMPTY
3240: LIST
3241: LIST
3242: PUSH
3243: EMPTY
3244: LIST
3245: LIST
3246: PUSH
3247: EMPTY
3248: LIST
3249: LIST
3250: LIST
3251: PPUSH
3252: CALL_OW 69
3256: ST_TO_ADDR
// for i in tmp do
3257: LD_ADDR_VAR 0 7
3261: PUSH
3262: LD_VAR 0 13
3266: PUSH
3267: FOR_IN
3268: IFFALSE 3293
// list := list diff GetBWeapon ( i ) ;
3270: LD_ADDR_VAR 0 4
3274: PUSH
3275: LD_VAR 0 4
3279: PUSH
3280: LD_VAR 0 7
3284: PPUSH
3285: CALL_OW 269
3289: DIFF
3290: ST_TO_ADDR
3291: GO 3267
3293: POP
3294: POP
// if list then
3295: LD_VAR 0 4
3299: IFFALSE 3325
// weapon := list [ rand ( 1 , list ) ] ;
3301: LD_ADDR_VAR 0 17
3305: PUSH
3306: LD_VAR 0 4
3310: PUSH
3311: LD_INT 1
3313: PPUSH
3314: LD_VAR 0 4
3318: PPUSH
3319: CALL_OW 12
3323: ARRAY
3324: ST_TO_ADDR
// end ; if weapon then
3325: LD_VAR 0 17
3329: IFFALSE 3443
// begin tmp := CostOfWeapon ( weapon ) ;
3331: LD_ADDR_VAR 0 13
3335: PUSH
3336: LD_VAR 0 17
3340: PPUSH
3341: CALL_OW 451
3345: ST_TO_ADDR
// j := GetBase ( tower ) ;
3346: LD_ADDR_VAR 0 8
3350: PUSH
3351: LD_VAR 0 1
3355: PPUSH
3356: CALL_OW 274
3360: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
3361: LD_VAR 0 8
3365: PPUSH
3366: LD_INT 1
3368: PPUSH
3369: CALL_OW 275
3373: PUSH
3374: LD_VAR 0 13
3378: PUSH
3379: LD_INT 1
3381: ARRAY
3382: GREATEREQUAL
3383: PUSH
3384: LD_VAR 0 8
3388: PPUSH
3389: LD_INT 2
3391: PPUSH
3392: CALL_OW 275
3396: PUSH
3397: LD_VAR 0 13
3401: PUSH
3402: LD_INT 2
3404: ARRAY
3405: GREATEREQUAL
3406: AND
3407: PUSH
3408: LD_VAR 0 8
3412: PPUSH
3413: LD_INT 3
3415: PPUSH
3416: CALL_OW 275
3420: PUSH
3421: LD_VAR 0 13
3425: PUSH
3426: LD_INT 3
3428: ARRAY
3429: GREATEREQUAL
3430: AND
3431: IFFALSE 3443
// result := weapon ;
3433: LD_ADDR_VAR 0 2
3437: PUSH
3438: LD_VAR 0 17
3442: ST_TO_ADDR
// end ; end ; end_of_file
3443: LD_VAR 0 2
3447: RET
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Khatam , Kikuchi , Harisson ; export function PrepareAmericans ; var i , team , others , veh , m ; begin
3448: LD_INT 0
3450: PPUSH
3451: PPUSH
3452: PPUSH
3453: PPUSH
3454: PPUSH
3455: PPUSH
// uc_side := 1 ;
3456: LD_ADDR_OWVAR 20
3460: PUSH
3461: LD_INT 1
3463: ST_TO_ADDR
// uc_nation := 1 ;
3464: LD_ADDR_OWVAR 21
3468: PUSH
3469: LD_INT 1
3471: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prev_prefix ) ;
3472: LD_ADDR_EXP 9
3476: PUSH
3477: LD_STRING JMM
3479: PPUSH
3480: LD_EXP 1
3484: NOT
3485: PPUSH
3486: LD_EXP 2
3490: PPUSH
3491: CALL 32337 0 3
3495: ST_TO_ADDR
// team := [ JMM ] ;
3496: LD_ADDR_VAR 0 3
3500: PUSH
3501: LD_EXP 9
3505: PUSH
3506: EMPTY
3507: LIST
3508: ST_TO_ADDR
// if LoadVariable ( BrownIn07 , debug ) then
3509: LD_STRING BrownIn07
3511: PPUSH
3512: LD_EXP 1
3516: PPUSH
3517: CALL_OW 30
3521: IFFALSE 3547
// Brown := PrepareUnit ( Brown , ( not debug ) , mission_prev_prefix ) ;
3523: LD_ADDR_EXP 10
3527: PUSH
3528: LD_STRING Brown
3530: PPUSH
3531: LD_EXP 1
3535: NOT
3536: PPUSH
3537: LD_EXP 2
3541: PPUSH
3542: CALL 32337 0 3
3546: ST_TO_ADDR
// if Brown then
3547: LD_EXP 10
3551: IFFALSE 3569
// team := team ^ Brown ;
3553: LD_ADDR_VAR 0 3
3557: PUSH
3558: LD_VAR 0 3
3562: PUSH
3563: LD_EXP 10
3567: ADD
3568: ST_TO_ADDR
// if LoadVariable ( DonaldsonIn07 , debug ) then
3569: LD_STRING DonaldsonIn07
3571: PPUSH
3572: LD_EXP 1
3576: PPUSH
3577: CALL_OW 30
3581: IFFALSE 3607
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prev_prefix ) ;
3583: LD_ADDR_EXP 11
3587: PUSH
3588: LD_STRING Donaldson
3590: PPUSH
3591: LD_EXP 1
3595: NOT
3596: PPUSH
3597: LD_EXP 2
3601: PPUSH
3602: CALL 32337 0 3
3606: ST_TO_ADDR
// if Donaldson then
3607: LD_EXP 11
3611: IFFALSE 3629
// team := team ^ Donaldson ;
3613: LD_ADDR_VAR 0 3
3617: PUSH
3618: LD_VAR 0 3
3622: PUSH
3623: LD_EXP 11
3627: ADD
3628: ST_TO_ADDR
// if LoadVariable ( BobbyIn07 , debug ) then
3629: LD_STRING BobbyIn07
3631: PPUSH
3632: LD_EXP 1
3636: PPUSH
3637: CALL_OW 30
3641: IFFALSE 3667
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prev_prefix ) ;
3643: LD_ADDR_EXP 12
3647: PUSH
3648: LD_STRING Bobby
3650: PPUSH
3651: LD_EXP 1
3655: NOT
3656: PPUSH
3657: LD_EXP 2
3661: PPUSH
3662: CALL 32337 0 3
3666: ST_TO_ADDR
// if Bobby then
3667: LD_EXP 12
3671: IFFALSE 3689
// team := team ^ Bobby ;
3673: LD_ADDR_VAR 0 3
3677: PUSH
3678: LD_VAR 0 3
3682: PUSH
3683: LD_EXP 12
3687: ADD
3688: ST_TO_ADDR
// if LoadVariable ( CyrusIn07 , debug ) then
3689: LD_STRING CyrusIn07
3691: PPUSH
3692: LD_EXP 1
3696: PPUSH
3697: CALL_OW 30
3701: IFFALSE 3727
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prev_prefix ) ;
3703: LD_ADDR_EXP 13
3707: PUSH
3708: LD_STRING Cyrus
3710: PPUSH
3711: LD_EXP 1
3715: NOT
3716: PPUSH
3717: LD_EXP 2
3721: PPUSH
3722: CALL 32337 0 3
3726: ST_TO_ADDR
// if Cyrus then
3727: LD_EXP 13
3731: IFFALSE 3749
// team := team ^ Cyrus ;
3733: LD_ADDR_VAR 0 3
3737: PUSH
3738: LD_VAR 0 3
3742: PUSH
3743: LD_EXP 13
3747: ADD
3748: ST_TO_ADDR
// if LoadVariable ( LisaIn07 , debug ) then
3749: LD_STRING LisaIn07
3751: PPUSH
3752: LD_EXP 1
3756: PPUSH
3757: CALL_OW 30
3761: IFFALSE 3787
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prev_prefix ) ;
3763: LD_ADDR_EXP 14
3767: PUSH
3768: LD_STRING Lisa
3770: PPUSH
3771: LD_EXP 1
3775: NOT
3776: PPUSH
3777: LD_EXP 2
3781: PPUSH
3782: CALL 32337 0 3
3786: ST_TO_ADDR
// if Lisa then
3787: LD_EXP 14
3791: IFFALSE 3809
// team := team ^ Lisa ;
3793: LD_ADDR_VAR 0 3
3797: PUSH
3798: LD_VAR 0 3
3802: PUSH
3803: LD_EXP 14
3807: ADD
3808: ST_TO_ADDR
// if LoadVariable ( GladstoneIn07 , debug ) then
3809: LD_STRING GladstoneIn07
3811: PPUSH
3812: LD_EXP 1
3816: PPUSH
3817: CALL_OW 30
3821: IFFALSE 3847
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , mission_prev_prefix ) ;
3823: LD_ADDR_EXP 16
3827: PUSH
3828: LD_STRING Gladstone
3830: PPUSH
3831: LD_EXP 1
3835: NOT
3836: PPUSH
3837: LD_EXP 2
3841: PPUSH
3842: CALL 32337 0 3
3846: ST_TO_ADDR
// if Gladstone then
3847: LD_EXP 16
3851: IFFALSE 3869
// team := team ^ Gladstone ;
3853: LD_ADDR_VAR 0 3
3857: PUSH
3858: LD_VAR 0 3
3862: PUSH
3863: LD_EXP 16
3867: ADD
3868: ST_TO_ADDR
// if LoadVariable ( KhatamIn07 , debug ) then
3869: LD_STRING KhatamIn07
3871: PPUSH
3872: LD_EXP 1
3876: PPUSH
3877: CALL_OW 30
3881: IFFALSE 3907
// Khatam := PrepareUnit ( Khatam , ( not debug ) , mission_prev_prefix ) ;
3883: LD_ADDR_EXP 17
3887: PUSH
3888: LD_STRING Khatam
3890: PPUSH
3891: LD_EXP 1
3895: NOT
3896: PPUSH
3897: LD_EXP 2
3901: PPUSH
3902: CALL 32337 0 3
3906: ST_TO_ADDR
// if Khatam then
3907: LD_EXP 17
3911: IFFALSE 3929
// team := team ^ Khatam ;
3913: LD_ADDR_VAR 0 3
3917: PUSH
3918: LD_VAR 0 3
3922: PUSH
3923: LD_EXP 17
3927: ADD
3928: ST_TO_ADDR
// others := CreateCharacterSet ( 07_others ) ;
3929: LD_ADDR_VAR 0 4
3933: PUSH
3934: LD_STRING 07_others
3936: PPUSH
3937: CALL_OW 31
3941: ST_TO_ADDR
// if others then
3942: LD_VAR 0 4
3946: IFFALSE 3964
// team := team ^ others ;
3948: LD_ADDR_VAR 0 3
3952: PUSH
3953: LD_VAR 0 3
3957: PUSH
3958: LD_VAR 0 4
3962: ADD
3963: ST_TO_ADDR
// if debug then
3964: LD_EXP 1
3968: IFFALSE 4042
// begin InitHc ;
3970: CALL_OW 19
// for i = 1 to 4 do
3974: LD_ADDR_VAR 0 2
3978: PUSH
3979: DOUBLE
3980: LD_INT 1
3982: DEC
3983: ST_TO_ADDR
3984: LD_INT 4
3986: PUSH
3987: FOR_TO
3988: IFFALSE 4040
// begin PrepareHuman ( false , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , 4 ) ;
3990: LD_INT 0
3992: PPUSH
3993: LD_INT 1
3995: PUSH
3996: LD_INT 3
3998: PUSH
3999: EMPTY
4000: LIST
4001: LIST
4002: PUSH
4003: LD_INT 1
4005: PPUSH
4006: LD_INT 2
4008: PPUSH
4009: CALL_OW 12
4013: ARRAY
4014: PPUSH
4015: LD_INT 4
4017: PPUSH
4018: CALL_OW 380
// team := team ^ CreateHuman ;
4022: LD_ADDR_VAR 0 3
4026: PUSH
4027: LD_VAR 0 3
4031: PUSH
4032: CALL_OW 44
4036: ADD
4037: ST_TO_ADDR
// end ;
4038: GO 3987
4040: POP
4041: POP
// end ; m := 0 ;
4042: LD_ADDR_VAR 0 6
4046: PUSH
4047: LD_INT 0
4049: ST_TO_ADDR
// for i in team do
4050: LD_ADDR_VAR 0 2
4054: PUSH
4055: LD_VAR 0 3
4059: PUSH
4060: FOR_IN
4061: IFFALSE 4268
// if GetClass ( i ) = 3 then
4063: LD_VAR 0 2
4067: PPUSH
4068: CALL_OW 257
4072: PUSH
4073: LD_INT 3
4075: EQUAL
4076: IFFALSE 4224
// begin m := m + 1 ;
4078: LD_ADDR_VAR 0 6
4082: PUSH
4083: LD_VAR 0 6
4087: PUSH
4088: LD_INT 1
4090: PLUS
4091: ST_TO_ADDR
// veh := PrepareTank ( 1 , 1 , [ us_medium_wheeled , us_medium_tracked , us_medium_wheeled , us_light_wheeled ] [ m mod 4 + 1 ] , engine_solar , control_manual , [ us_gatling_gun , us_double_gun , us_light_gun , us_radar ] [ m mod 4 + 1 ] , 60 ) ;
4092: LD_ADDR_VAR 0 5
4096: PUSH
4097: LD_INT 1
4099: PPUSH
4100: LD_INT 1
4102: PPUSH
4103: LD_INT 2
4105: PUSH
4106: LD_INT 3
4108: PUSH
4109: LD_INT 2
4111: PUSH
4112: LD_INT 1
4114: PUSH
4115: EMPTY
4116: LIST
4117: LIST
4118: LIST
4119: LIST
4120: PUSH
4121: LD_VAR 0 6
4125: PUSH
4126: LD_INT 4
4128: MOD
4129: PUSH
4130: LD_INT 1
4132: PLUS
4133: ARRAY
4134: PPUSH
4135: LD_INT 2
4137: PPUSH
4138: LD_INT 1
4140: PPUSH
4141: LD_INT 4
4143: PUSH
4144: LD_INT 5
4146: PUSH
4147: LD_INT 3
4149: PUSH
4150: LD_INT 11
4152: PUSH
4153: EMPTY
4154: LIST
4155: LIST
4156: LIST
4157: LIST
4158: PUSH
4159: LD_VAR 0 6
4163: PUSH
4164: LD_INT 4
4166: MOD
4167: PUSH
4168: LD_INT 1
4170: PLUS
4171: ARRAY
4172: PPUSH
4173: LD_INT 60
4175: PPUSH
4176: CALL 520 0 7
4180: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
4181: LD_VAR 0 5
4185: PPUSH
4186: LD_INT 2
4188: PPUSH
4189: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
4193: LD_VAR 0 5
4197: PPUSH
4198: LD_INT 1
4200: PPUSH
4201: LD_INT 0
4203: PPUSH
4204: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
4208: LD_VAR 0 2
4212: PPUSH
4213: LD_VAR 0 5
4217: PPUSH
4218: CALL_OW 52
// end else
4222: GO 4266
// begin if GetClass ( i ) = 2 then
4224: LD_VAR 0 2
4228: PPUSH
4229: CALL_OW 257
4233: PUSH
4234: LD_INT 2
4236: EQUAL
4237: IFFALSE 4251
// SetClass ( i , 1 ) ;
4239: LD_VAR 0 2
4243: PPUSH
4244: LD_INT 1
4246: PPUSH
4247: CALL_OW 336
// PlaceUnitArea ( i , startArea , false ) ;
4251: LD_VAR 0 2
4255: PPUSH
4256: LD_INT 1
4258: PPUSH
4259: LD_INT 0
4261: PPUSH
4262: CALL_OW 49
// end ;
4266: GO 4060
4268: POP
4269: POP
// uc_side := 4 ;
4270: LD_ADDR_OWVAR 20
4274: PUSH
4275: LD_INT 4
4277: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
4278: LD_ADDR_EXP 19
4282: PUSH
4283: LD_STRING Harisson
4285: PPUSH
4286: LD_INT 0
4288: PPUSH
4289: LD_STRING 
4291: PPUSH
4292: CALL 32337 0 3
4296: ST_TO_ADDR
// PrepareScout ;
4297: CALL 4306 0 0
// end ;
4301: LD_VAR 0 1
4305: RET
// function PrepareScout ; var ape ; begin
4306: LD_INT 0
4308: PPUSH
4309: PPUSH
// uc_side := 4 ;
4310: LD_ADDR_OWVAR 20
4314: PUSH
4315: LD_INT 4
4317: ST_TO_ADDR
// uc_nation := 1 ;
4318: LD_ADDR_OWVAR 21
4322: PUSH
4323: LD_INT 1
4325: ST_TO_ADDR
// if LoadVariable ( FrankIn06 , 0 ) then
4326: LD_STRING FrankIn06
4328: PPUSH
4329: LD_INT 0
4331: PPUSH
4332: CALL_OW 30
4336: IFFALSE 4353
// Frank := CreateCharacter ( 06c_Frank ) else
4338: LD_ADDR_EXP 15
4342: PUSH
4343: LD_STRING 06c_Frank
4345: PPUSH
4346: CALL_OW 34
4350: ST_TO_ADDR
4351: GO 4393
// if LoadVariable ( FrankInDelta , 0 ) then
4353: LD_STRING FrankInDelta
4355: PPUSH
4356: LD_INT 0
4358: PPUSH
4359: CALL_OW 30
4363: IFFALSE 4380
// Frank := CreateCharacter ( 05_Frank ) else
4365: LD_ADDR_EXP 15
4369: PUSH
4370: LD_STRING 05_Frank
4372: PPUSH
4373: CALL_OW 34
4377: ST_TO_ADDR
4378: GO 4393
// Frank := CreateCharacter ( 04_Frank ) ;
4380: LD_ADDR_EXP 15
4384: PUSH
4385: LD_STRING 04_Frank
4387: PPUSH
4388: CALL_OW 34
4392: ST_TO_ADDR
// if Frank then
4393: LD_EXP 15
4397: IFFALSE 4530
// begin PlaceUnitArea ( Frank , scoutArea , false ) ;
4399: LD_EXP 15
4403: PPUSH
4404: LD_INT 2
4406: PPUSH
4407: LD_INT 0
4409: PPUSH
4410: CALL_OW 49
// SetClass ( Frank , 1 ) ;
4414: LD_EXP 15
4418: PPUSH
4419: LD_INT 1
4421: PPUSH
4422: CALL_OW 336
// uc_side := 0 ;
4426: LD_ADDR_OWVAR 20
4430: PUSH
4431: LD_INT 0
4433: ST_TO_ADDR
// uc_nation := 0 ;
4434: LD_ADDR_OWVAR 21
4438: PUSH
4439: LD_INT 0
4441: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 0 ) ;
4442: LD_INT 0
4444: PPUSH
4445: LD_INT 12
4447: PPUSH
4448: LD_INT 0
4450: PPUSH
4451: CALL_OW 380
// ape := CreateHuman ;
4455: LD_ADDR_VAR 0 2
4459: PUSH
4460: CALL_OW 44
4464: ST_TO_ADDR
// PlaceUnitXYR ( ape , GetX ( Frank ) , GetY ( Frank ) , 5 , false ) ;
4465: LD_VAR 0 2
4469: PPUSH
4470: LD_EXP 15
4474: PPUSH
4475: CALL_OW 250
4479: PPUSH
4480: LD_EXP 15
4484: PPUSH
4485: CALL_OW 251
4489: PPUSH
4490: LD_INT 5
4492: PPUSH
4493: LD_INT 0
4495: PPUSH
4496: CALL_OW 50
// ComTurnUnit ( ape , Frank ) ;
4500: LD_VAR 0 2
4504: PPUSH
4505: LD_EXP 15
4509: PPUSH
4510: CALL_OW 119
// ComTurnUnit ( Frank , ape ) ;
4514: LD_EXP 15
4518: PPUSH
4519: LD_VAR 0 2
4523: PPUSH
4524: CALL_OW 119
// exit ;
4528: GO 4573
// end ; Kikuchi := PrepareUnit ( Yamoko , false ,  ) ;
4530: LD_ADDR_EXP 18
4534: PUSH
4535: LD_STRING Yamoko
4537: PPUSH
4538: LD_INT 0
4540: PPUSH
4541: LD_STRING 
4543: PPUSH
4544: CALL 32337 0 3
4548: ST_TO_ADDR
// PlaceUnitArea ( Kikuchi , scoutArea , false ) ;
4549: LD_EXP 18
4553: PPUSH
4554: LD_INT 2
4556: PPUSH
4557: LD_INT 0
4559: PPUSH
4560: CALL_OW 49
// ComHold ( Kikuchi ) ;
4564: LD_EXP 18
4568: PPUSH
4569: CALL_OW 140
// end ; end_of_file
4573: LD_VAR 0 1
4577: RET
// export ru_rebuild_list ; export function PrepareRussians ; var i , j , r , un , skill , filter , tmp , dep_list , lab_list , fac_list , breastworks_list , bunker_list , turret_list , weapons_list , personel_counter ; begin
4578: LD_INT 0
4580: PPUSH
4581: PPUSH
4582: PPUSH
4583: PPUSH
4584: PPUSH
4585: PPUSH
4586: PPUSH
4587: PPUSH
4588: PPUSH
4589: PPUSH
4590: PPUSH
4591: PPUSH
4592: PPUSH
4593: PPUSH
4594: PPUSH
4595: PPUSH
// ru_rebuild_list := [ ] ;
4596: LD_ADDR_EXP 20
4600: PUSH
4601: EMPTY
4602: ST_TO_ADDR
// uc_side := 3 ;
4603: LD_ADDR_OWVAR 20
4607: PUSH
4608: LD_INT 3
4610: ST_TO_ADDR
// uc_nation := 3 ;
4611: LD_ADDR_OWVAR 21
4615: PUSH
4616: LD_INT 3
4618: ST_TO_ADDR
// if Difficulty > 1 then
4619: LD_OWVAR 67
4623: PUSH
4624: LD_INT 1
4626: GREATER
4627: IFFALSE 4794
// begin bc_type := b_breastwork ;
4629: LD_ADDR_OWVAR 42
4633: PUSH
4634: LD_INT 31
4636: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 78 , 74 , 2 ) ;
4637: LD_INT 78
4639: PPUSH
4640: LD_INT 74
4642: PPUSH
4643: LD_INT 2
4645: PPUSH
4646: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 171 , 193 , 4 ) ;
4650: LD_INT 171
4652: PPUSH
4653: LD_INT 193
4655: PPUSH
4656: LD_INT 4
4658: PPUSH
4659: CALL_OW 47
// bc_type := b_turret ;
4663: LD_ADDR_OWVAR 42
4667: PUSH
4668: LD_INT 33
4670: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 129 , 96 , 3 ) ;
4671: LD_INT 129
4673: PPUSH
4674: LD_INT 96
4676: PPUSH
4677: LD_INT 3
4679: PPUSH
4680: CALL_OW 47
// if Difficulty > 2 then
4684: LD_OWVAR 67
4688: PUSH
4689: LD_INT 2
4691: GREATER
4692: IFFALSE 4763
// begin RemoveUnit ( HexInfo ( 83 , 141 ) ) ;
4694: LD_INT 83
4696: PPUSH
4697: LD_INT 141
4699: PPUSH
4700: CALL_OW 428
4704: PPUSH
4705: CALL_OW 64
// RemoveUnit ( HexInfo ( 78 , 133 ) ) ;
4709: LD_INT 78
4711: PPUSH
4712: LD_INT 133
4714: PPUSH
4715: CALL_OW 428
4719: PPUSH
4720: CALL_OW 64
// CreateAndPlaceBuildingXYD ( 83 , 141 , 2 ) ;
4724: LD_INT 83
4726: PPUSH
4727: LD_INT 141
4729: PPUSH
4730: LD_INT 2
4732: PPUSH
4733: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 78 , 133 , 2 ) ;
4737: LD_INT 78
4739: PPUSH
4740: LD_INT 133
4742: PPUSH
4743: LD_INT 2
4745: PPUSH
4746: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 145 , 112 , 3 ) ;
4750: LD_INT 145
4752: PPUSH
4753: LD_INT 112
4755: PPUSH
4756: LD_INT 3
4758: PPUSH
4759: CALL_OW 47
// end ; if Difficulty > 3 then
4763: LD_OWVAR 67
4767: PUSH
4768: LD_INT 3
4770: GREATER
4771: IFFALSE 4794
// begin bc_type := b_bunker ;
4773: LD_ADDR_OWVAR 42
4777: PUSH
4778: LD_INT 32
4780: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 44 , 50 , 4 ) ;
4781: LD_INT 44
4783: PPUSH
4784: LD_INT 50
4786: PPUSH
4787: LD_INT 4
4789: PPUSH
4790: CALL_OW 47
// end ; end ; dep_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
4794: LD_ADDR_VAR 0 9
4798: PUSH
4799: LD_INT 22
4801: PUSH
4802: LD_INT 3
4804: PUSH
4805: EMPTY
4806: LIST
4807: LIST
4808: PUSH
4809: LD_INT 2
4811: PUSH
4812: LD_INT 30
4814: PUSH
4815: LD_INT 0
4817: PUSH
4818: EMPTY
4819: LIST
4820: LIST
4821: PUSH
4822: LD_INT 30
4824: PUSH
4825: LD_INT 1
4827: PUSH
4828: EMPTY
4829: LIST
4830: LIST
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: LIST
4836: PUSH
4837: EMPTY
4838: LIST
4839: LIST
4840: PPUSH
4841: CALL_OW 69
4845: ST_TO_ADDR
// lab_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
4846: LD_ADDR_VAR 0 10
4850: PUSH
4851: LD_INT 22
4853: PUSH
4854: LD_INT 3
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PUSH
4861: LD_INT 2
4863: PUSH
4864: LD_INT 30
4866: PUSH
4867: LD_INT 6
4869: PUSH
4870: EMPTY
4871: LIST
4872: LIST
4873: PUSH
4874: LD_INT 30
4876: PUSH
4877: LD_INT 7
4879: PUSH
4880: EMPTY
4881: LIST
4882: LIST
4883: PUSH
4884: LD_INT 30
4886: PUSH
4887: LD_INT 8
4889: PUSH
4890: EMPTY
4891: LIST
4892: LIST
4893: PUSH
4894: EMPTY
4895: LIST
4896: LIST
4897: LIST
4898: LIST
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: PPUSH
4904: CALL_OW 69
4908: ST_TO_ADDR
// fac_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
4909: LD_ADDR_VAR 0 11
4913: PUSH
4914: LD_INT 22
4916: PUSH
4917: LD_INT 3
4919: PUSH
4920: EMPTY
4921: LIST
4922: LIST
4923: PUSH
4924: LD_INT 30
4926: PUSH
4927: LD_INT 3
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: PUSH
4934: EMPTY
4935: LIST
4936: LIST
4937: PPUSH
4938: CALL_OW 69
4942: ST_TO_ADDR
// breastworks_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
4943: LD_ADDR_VAR 0 12
4947: PUSH
4948: LD_INT 22
4950: PUSH
4951: LD_INT 3
4953: PUSH
4954: EMPTY
4955: LIST
4956: LIST
4957: PUSH
4958: LD_INT 30
4960: PUSH
4961: LD_INT 31
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: PUSH
4968: EMPTY
4969: LIST
4970: LIST
4971: PPUSH
4972: CALL_OW 69
4976: ST_TO_ADDR
// bunker_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
4977: LD_ADDR_VAR 0 13
4981: PUSH
4982: LD_INT 22
4984: PUSH
4985: LD_INT 3
4987: PUSH
4988: EMPTY
4989: LIST
4990: LIST
4991: PUSH
4992: LD_INT 30
4994: PUSH
4995: LD_INT 32
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: PUSH
5002: EMPTY
5003: LIST
5004: LIST
5005: PPUSH
5006: CALL_OW 69
5010: ST_TO_ADDR
// turret_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
5011: LD_ADDR_VAR 0 14
5015: PUSH
5016: LD_INT 22
5018: PUSH
5019: LD_INT 3
5021: PUSH
5022: EMPTY
5023: LIST
5024: LIST
5025: PUSH
5026: LD_INT 30
5028: PUSH
5029: LD_INT 33
5031: PUSH
5032: EMPTY
5033: LIST
5034: LIST
5035: PUSH
5036: EMPTY
5037: LIST
5038: LIST
5039: PPUSH
5040: CALL_OW 69
5044: ST_TO_ADDR
// weapons_list := [ [ ru_heavy_machine_gun , 5 ] , [ ru_gatling_gun , 50 ] , [ ru_gun , 30 ] , [ ru_heavy_gun , 15 ] ] ;
5045: LD_ADDR_VAR 0 15
5049: PUSH
5050: LD_INT 42
5052: PUSH
5053: LD_INT 5
5055: PUSH
5056: EMPTY
5057: LIST
5058: LIST
5059: PUSH
5060: LD_INT 43
5062: PUSH
5063: LD_INT 50
5065: PUSH
5066: EMPTY
5067: LIST
5068: LIST
5069: PUSH
5070: LD_INT 44
5072: PUSH
5073: LD_INT 30
5075: PUSH
5076: EMPTY
5077: LIST
5078: LIST
5079: PUSH
5080: LD_INT 46
5082: PUSH
5083: LD_INT 15
5085: PUSH
5086: EMPTY
5087: LIST
5088: LIST
5089: PUSH
5090: EMPTY
5091: LIST
5092: LIST
5093: LIST
5094: LIST
5095: ST_TO_ADDR
// personel_counter := [ 0 , 4 , 6 , 3 ] ;
5096: LD_ADDR_VAR 0 16
5100: PUSH
5101: LD_INT 0
5103: PUSH
5104: LD_INT 4
5106: PUSH
5107: LD_INT 6
5109: PUSH
5110: LD_INT 3
5112: PUSH
5113: EMPTY
5114: LIST
5115: LIST
5116: LIST
5117: LIST
5118: ST_TO_ADDR
// skill := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
5119: LD_ADDR_VAR 0 6
5123: PUSH
5124: LD_INT 4
5126: PUSH
5127: LD_INT 5
5129: PUSH
5130: LD_INT 6
5132: PUSH
5133: LD_INT 7
5135: PUSH
5136: EMPTY
5137: LIST
5138: LIST
5139: LIST
5140: LIST
5141: PUSH
5142: LD_OWVAR 67
5146: ARRAY
5147: ST_TO_ADDR
// SetBName ( ru_dep_main , am_tukh ) ;
5148: LD_INT 16
5150: PPUSH
5151: LD_STRING am_tukh
5153: PPUSH
5154: CALL_OW 500
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
5158: LD_ADDR_VAR 0 2
5162: PUSH
5163: LD_INT 21
5165: PUSH
5166: LD_INT 3
5168: PUSH
5169: EMPTY
5170: LIST
5171: LIST
5172: PPUSH
5173: CALL_OW 69
5177: PUSH
5178: FOR_IN
5179: IFFALSE 5216
// SetBLevel ( i , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5181: LD_VAR 0 2
5185: PPUSH
5186: LD_INT 4
5188: PUSH
5189: LD_INT 5
5191: PUSH
5192: LD_INT 6
5194: PUSH
5195: LD_INT 7
5197: PUSH
5198: EMPTY
5199: LIST
5200: LIST
5201: LIST
5202: LIST
5203: PUSH
5204: LD_OWVAR 67
5208: ARRAY
5209: PPUSH
5210: CALL_OW 241
5214: GO 5178
5216: POP
5217: POP
// for i in dep_list do
5218: LD_ADDR_VAR 0 2
5222: PUSH
5223: LD_VAR 0 9
5227: PUSH
5228: FOR_IN
5229: IFFALSE 5273
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
5231: LD_VAR 0 2
5235: PPUSH
5236: CALL_OW 274
5240: PPUSH
5241: LD_INT 1
5243: PPUSH
5244: LD_INT 1000
5246: PPUSH
5247: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
5251: LD_VAR 0 2
5255: PPUSH
5256: CALL_OW 274
5260: PPUSH
5261: LD_INT 2
5263: PPUSH
5264: LD_INT 1000
5266: PPUSH
5267: CALL_OW 277
// end ;
5271: GO 5228
5273: POP
5274: POP
// InitHc ;
5275: CALL_OW 19
// tmp := bunker_list * [ 45 , 60 , 75 , 80 ] [ Difficulty ] div 100 ;
5279: LD_ADDR_VAR 0 8
5283: PUSH
5284: LD_VAR 0 13
5288: PUSH
5289: LD_INT 45
5291: PUSH
5292: LD_INT 60
5294: PUSH
5295: LD_INT 75
5297: PUSH
5298: LD_INT 80
5300: PUSH
5301: EMPTY
5302: LIST
5303: LIST
5304: LIST
5305: LIST
5306: PUSH
5307: LD_OWVAR 67
5311: ARRAY
5312: MUL
5313: PUSH
5314: LD_INT 100
5316: DIV
5317: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , tmp ) ;
5318: LD_ADDR_VAR 0 16
5322: PUSH
5323: LD_VAR 0 16
5327: PPUSH
5328: LD_INT 1
5330: PPUSH
5331: LD_VAR 0 8
5335: PPUSH
5336: CALL_OW 1
5340: ST_TO_ADDR
// tmp := [ ] ;
5341: LD_ADDR_VAR 0 8
5345: PUSH
5346: EMPTY
5347: ST_TO_ADDR
// for i in bunker_list do
5348: LD_ADDR_VAR 0 2
5352: PUSH
5353: LD_VAR 0 13
5357: PUSH
5358: FOR_IN
5359: IFFALSE 5455
// if i mod 10 + 1 < tmp then
5361: LD_VAR 0 2
5365: PUSH
5366: LD_INT 10
5368: MOD
5369: PUSH
5370: LD_INT 1
5372: PLUS
5373: PUSH
5374: LD_VAR 0 8
5378: LESS
5379: IFFALSE 5424
// tmp := Insert ( tmp , i mod rand ( 3 , 5 ) + 1 , i ) else
5381: LD_ADDR_VAR 0 8
5385: PUSH
5386: LD_VAR 0 8
5390: PPUSH
5391: LD_VAR 0 2
5395: PUSH
5396: LD_INT 3
5398: PPUSH
5399: LD_INT 5
5401: PPUSH
5402: CALL_OW 12
5406: MOD
5407: PUSH
5408: LD_INT 1
5410: PLUS
5411: PPUSH
5412: LD_VAR 0 2
5416: PPUSH
5417: CALL_OW 2
5421: ST_TO_ADDR
5422: GO 5453
// tmp := Insert ( tmp , tmp + 1 , i ) ;
5424: LD_ADDR_VAR 0 8
5428: PUSH
5429: LD_VAR 0 8
5433: PPUSH
5434: LD_VAR 0 8
5438: PUSH
5439: LD_INT 1
5441: PLUS
5442: PPUSH
5443: LD_VAR 0 2
5447: PPUSH
5448: CALL_OW 2
5452: ST_TO_ADDR
5453: GO 5358
5455: POP
5456: POP
// bunker_list := tmp ;
5457: LD_ADDR_VAR 0 13
5461: PUSH
5462: LD_VAR 0 8
5466: ST_TO_ADDR
// for i in bunker_list ^ turret_list do
5467: LD_ADDR_VAR 0 2
5471: PUSH
5472: LD_VAR 0 13
5476: PUSH
5477: LD_VAR 0 14
5481: ADD
5482: PUSH
5483: FOR_IN
5484: IFFALSE 5507
// PlaceWeaponTurret ( i , GetTurretWeaponBase ( i ) ) ;
5486: LD_VAR 0 2
5490: PPUSH
5491: LD_VAR 0 2
5495: PPUSH
5496: CALL 2225 0 1
5500: PPUSH
5501: CALL_OW 431
5505: GO 5483
5507: POP
5508: POP
// while ( personel_counter [ 1 ] ) do
5509: LD_VAR 0 16
5513: PUSH
5514: LD_INT 1
5516: ARRAY
5517: IFFALSE 5625
// begin i := rand ( 1 , bunker_list ) ;
5519: LD_ADDR_VAR 0 2
5523: PUSH
5524: LD_INT 1
5526: PPUSH
5527: LD_VAR 0 13
5531: PPUSH
5532: CALL_OW 12
5536: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5537: LD_INT 0
5539: PPUSH
5540: LD_INT 1
5542: PPUSH
5543: LD_VAR 0 6
5547: PPUSH
5548: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , bunker_list [ i ] ) ;
5552: CALL_OW 44
5556: PPUSH
5557: LD_VAR 0 13
5561: PUSH
5562: LD_VAR 0 2
5566: ARRAY
5567: PPUSH
5568: CALL_OW 52
// bunker_list := Delete ( bunker_list , i ) ;
5572: LD_ADDR_VAR 0 13
5576: PUSH
5577: LD_VAR 0 13
5581: PPUSH
5582: LD_VAR 0 2
5586: PPUSH
5587: CALL_OW 3
5591: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , personel_counter [ 1 ] - 1 ) ;
5592: LD_ADDR_VAR 0 16
5596: PUSH
5597: LD_VAR 0 16
5601: PPUSH
5602: LD_INT 1
5604: PPUSH
5605: LD_VAR 0 16
5609: PUSH
5610: LD_INT 1
5612: ARRAY
5613: PUSH
5614: LD_INT 1
5616: MINUS
5617: PPUSH
5618: CALL_OW 1
5622: ST_TO_ADDR
// end ;
5623: GO 5509
// for i = 1 to personel_counter [ 2 ] do
5625: LD_ADDR_VAR 0 2
5629: PUSH
5630: DOUBLE
5631: LD_INT 1
5633: DEC
5634: ST_TO_ADDR
5635: LD_VAR 0 16
5639: PUSH
5640: LD_INT 2
5642: ARRAY
5643: PUSH
5644: FOR_TO
5645: IFFALSE 5676
// begin PrepareHuman ( false , 2 , skill ) ;
5647: LD_INT 0
5649: PPUSH
5650: LD_INT 2
5652: PPUSH
5653: LD_VAR 0 6
5657: PPUSH
5658: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru_dep_main ) ;
5662: CALL_OW 44
5666: PPUSH
5667: LD_INT 16
5669: PPUSH
5670: CALL_OW 52
// end ;
5674: GO 5644
5676: POP
5677: POP
// for i = 1 to personel_counter [ 3 ] do
5678: LD_ADDR_VAR 0 2
5682: PUSH
5683: DOUBLE
5684: LD_INT 1
5686: DEC
5687: ST_TO_ADDR
5688: LD_VAR 0 16
5692: PUSH
5693: LD_INT 3
5695: ARRAY
5696: PUSH
5697: FOR_TO
5698: IFFALSE 5745
// begin PrepareHuman ( false , 3 , skill ) ;
5700: LD_INT 0
5702: PPUSH
5703: LD_INT 3
5705: PPUSH
5706: LD_VAR 0 6
5710: PPUSH
5711: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , fac_list [ i mod 2 + 1 ] ) ;
5715: CALL_OW 44
5719: PPUSH
5720: LD_VAR 0 11
5724: PUSH
5725: LD_VAR 0 2
5729: PUSH
5730: LD_INT 2
5732: MOD
5733: PUSH
5734: LD_INT 1
5736: PLUS
5737: ARRAY
5738: PPUSH
5739: CALL_OW 52
// end ;
5743: GO 5697
5745: POP
5746: POP
// for i = 1 to personel_counter [ 4 ] do
5747: LD_ADDR_VAR 0 2
5751: PUSH
5752: DOUBLE
5753: LD_INT 1
5755: DEC
5756: ST_TO_ADDR
5757: LD_VAR 0 16
5761: PUSH
5762: LD_INT 4
5764: ARRAY
5765: PUSH
5766: FOR_TO
5767: IFFALSE 5804
// begin PrepareHuman ( false , 4 , skill ) ;
5769: LD_INT 0
5771: PPUSH
5772: LD_INT 4
5774: PPUSH
5775: LD_VAR 0 6
5779: PPUSH
5780: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , lab_list [ 1 ] ) ;
5784: CALL_OW 44
5788: PPUSH
5789: LD_VAR 0 10
5793: PUSH
5794: LD_INT 1
5796: ARRAY
5797: PPUSH
5798: CALL_OW 52
// end ;
5802: GO 5766
5804: POP
5805: POP
// for i in breastworks_list do
5806: LD_ADDR_VAR 0 2
5810: PUSH
5811: LD_VAR 0 12
5815: PUSH
5816: FOR_IN
5817: IFFALSE 5929
// begin r := GetDir ( i ) ;
5819: LD_ADDR_VAR 0 4
5823: PUSH
5824: LD_VAR 0 2
5828: PPUSH
5829: CALL_OW 254
5833: ST_TO_ADDR
// if r > 3 then
5834: LD_VAR 0 4
5838: PUSH
5839: LD_INT 3
5841: GREATER
5842: IFFALSE 5860
// r := r - 3 else
5844: LD_ADDR_VAR 0 4
5848: PUSH
5849: LD_VAR 0 4
5853: PUSH
5854: LD_INT 3
5856: MINUS
5857: ST_TO_ADDR
5858: GO 5874
// r := r + 3 ;
5860: LD_ADDR_VAR 0 4
5864: PUSH
5865: LD_VAR 0 4
5869: PUSH
5870: LD_INT 3
5872: PLUS
5873: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5874: LD_INT 0
5876: PPUSH
5877: LD_INT 1
5879: PPUSH
5880: LD_VAR 0 6
5884: PPUSH
5885: CALL_OW 380
// un := CreateHuman ;
5889: LD_ADDR_VAR 0 5
5893: PUSH
5894: CALL_OW 44
5898: ST_TO_ADDR
// SetDir ( un , r ) ;
5899: LD_VAR 0 5
5903: PPUSH
5904: LD_VAR 0 4
5908: PPUSH
5909: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
5913: LD_VAR 0 5
5917: PPUSH
5918: LD_VAR 0 2
5922: PPUSH
5923: CALL_OW 52
// end ;
5927: GO 5816
5929: POP
5930: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) ;
5931: LD_ADDR_VAR 0 8
5935: PUSH
5936: LD_INT 22
5938: PUSH
5939: LD_INT 3
5941: PUSH
5942: EMPTY
5943: LIST
5944: LIST
5945: PUSH
5946: LD_INT 25
5948: PUSH
5949: LD_INT 3
5951: PUSH
5952: EMPTY
5953: LIST
5954: LIST
5955: PUSH
5956: EMPTY
5957: LIST
5958: LIST
5959: PPUSH
5960: CALL_OW 69
5964: ST_TO_ADDR
// r := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
5965: LD_ADDR_VAR 0 4
5969: PUSH
5970: LD_INT 4
5972: PUSH
5973: LD_INT 5
5975: PUSH
5976: LD_INT 6
5978: PUSH
5979: LD_INT 6
5981: PUSH
5982: EMPTY
5983: LIST
5984: LIST
5985: LIST
5986: LIST
5987: PUSH
5988: LD_OWVAR 67
5992: ARRAY
5993: ST_TO_ADDR
// for i = 1 to r do
5994: LD_ADDR_VAR 0 2
5998: PUSH
5999: DOUBLE
6000: LD_INT 1
6002: DEC
6003: ST_TO_ADDR
6004: LD_VAR 0 4
6008: PUSH
6009: FOR_TO
6010: IFFALSE 6183
// begin un := PrepareTank ( 3 , 3 , [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked ] [ i mod 3 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
6012: LD_ADDR_VAR 0 5
6016: PUSH
6017: LD_INT 3
6019: PPUSH
6020: LD_INT 3
6022: PPUSH
6023: LD_INT 22
6025: PUSH
6026: LD_INT 22
6028: PUSH
6029: LD_INT 24
6031: PUSH
6032: EMPTY
6033: LIST
6034: LIST
6035: LIST
6036: PUSH
6037: LD_VAR 0 2
6041: PUSH
6042: LD_INT 3
6044: MOD
6045: PUSH
6046: LD_INT 1
6048: PLUS
6049: ARRAY
6050: PPUSH
6051: LD_INT 1
6053: PPUSH
6054: LD_INT 1
6056: PPUSH
6057: LD_INT 43
6059: PUSH
6060: LD_INT 44
6062: PUSH
6063: LD_INT 42
6065: PUSH
6066: EMPTY
6067: LIST
6068: LIST
6069: LIST
6070: PUSH
6071: LD_VAR 0 2
6075: PUSH
6076: LD_INT 3
6078: MOD
6079: PUSH
6080: LD_INT 1
6082: PLUS
6083: ARRAY
6084: PPUSH
6085: LD_INT 100
6087: PPUSH
6088: CALL 520 0 7
6092: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
6093: LD_VAR 0 5
6097: PPUSH
6098: LD_INT 0
6100: PPUSH
6101: LD_INT 5
6103: PPUSH
6104: CALL_OW 12
6108: PPUSH
6109: CALL_OW 233
// PlaceUnitArea ( un , parkingArea , false ) ;
6113: LD_VAR 0 5
6117: PPUSH
6118: LD_INT 5
6120: PPUSH
6121: LD_INT 0
6123: PPUSH
6124: CALL_OW 49
// if i > tmp - 2 then
6128: LD_VAR 0 2
6132: PUSH
6133: LD_VAR 0 8
6137: PUSH
6138: LD_INT 2
6140: MINUS
6141: GREATER
6142: IFFALSE 6146
// continue ;
6144: GO 6009
// ComExitBuilding ( tmp [ i ] ) ;
6146: LD_VAR 0 8
6150: PUSH
6151: LD_VAR 0 2
6155: ARRAY
6156: PPUSH
6157: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , un ) ;
6161: LD_VAR 0 8
6165: PUSH
6166: LD_VAR 0 2
6170: ARRAY
6171: PPUSH
6172: LD_VAR 0 5
6176: PPUSH
6177: CALL_OW 180
// end ;
6181: GO 6009
6183: POP
6184: POP
// end ;
6185: LD_VAR 0 1
6189: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) do var i , filter , tmp , engs , enemy ;
6190: LD_INT 22
6192: PUSH
6193: LD_INT 3
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: PUSH
6200: LD_INT 25
6202: PUSH
6203: LD_INT 2
6205: PUSH
6206: EMPTY
6207: LIST
6208: LIST
6209: PUSH
6210: EMPTY
6211: LIST
6212: LIST
6213: PPUSH
6214: CALL_OW 69
6218: IFFALSE 6950
6220: GO 6222
6222: DISABLE
6223: LD_INT 0
6225: PPUSH
6226: PPUSH
6227: PPUSH
6228: PPUSH
6229: PPUSH
// begin enable ;
6230: ENABLE
// filter := FilterUnitsInArea ( baseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
6231: LD_ADDR_VAR 0 2
6235: PUSH
6236: LD_INT 6
6238: PPUSH
6239: LD_INT 3
6241: PUSH
6242: LD_INT 24
6244: PUSH
6245: LD_INT 1000
6247: PUSH
6248: EMPTY
6249: LIST
6250: LIST
6251: PUSH
6252: EMPTY
6253: LIST
6254: LIST
6255: PUSH
6256: LD_INT 21
6258: PUSH
6259: LD_INT 3
6261: PUSH
6262: EMPTY
6263: LIST
6264: LIST
6265: PUSH
6266: EMPTY
6267: LIST
6268: LIST
6269: PPUSH
6270: CALL_OW 70
6274: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
6275: LD_ADDR_VAR 0 4
6279: PUSH
6280: LD_INT 22
6282: PUSH
6283: LD_INT 3
6285: PUSH
6286: EMPTY
6287: LIST
6288: LIST
6289: PUSH
6290: LD_INT 25
6292: PUSH
6293: LD_INT 2
6295: PUSH
6296: EMPTY
6297: LIST
6298: LIST
6299: PUSH
6300: EMPTY
6301: LIST
6302: LIST
6303: PPUSH
6304: CALL_OW 69
6308: ST_TO_ADDR
// if not filter and not ru_rebuild_list then
6309: LD_VAR 0 2
6313: NOT
6314: PUSH
6315: LD_EXP 20
6319: NOT
6320: AND
6321: IFFALSE 6391
// begin for i in engs do
6323: LD_ADDR_VAR 0 1
6327: PUSH
6328: LD_VAR 0 4
6332: PUSH
6333: FOR_IN
6334: IFFALSE 6389
// if GetLives ( i ) = 1000 and not HasTask ( i ) and not IsInUnit ( i ) then
6336: LD_VAR 0 1
6340: PPUSH
6341: CALL_OW 256
6345: PUSH
6346: LD_INT 1000
6348: EQUAL
6349: PUSH
6350: LD_VAR 0 1
6354: PPUSH
6355: CALL_OW 314
6359: NOT
6360: AND
6361: PUSH
6362: LD_VAR 0 1
6366: PPUSH
6367: CALL_OW 310
6371: NOT
6372: AND
6373: IFFALSE 6387
// ComEnterUnit ( i , ru_dep_main ) ;
6375: LD_VAR 0 1
6379: PPUSH
6380: LD_INT 16
6382: PPUSH
6383: CALL_OW 120
6387: GO 6333
6389: POP
6390: POP
// end ; if UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) then
6391: LD_VAR 0 4
6395: PPUSH
6396: LD_INT 3
6398: PUSH
6399: LD_INT 24
6401: PUSH
6402: LD_INT 650
6404: PUSH
6405: EMPTY
6406: LIST
6407: LIST
6408: PUSH
6409: EMPTY
6410: LIST
6411: LIST
6412: PPUSH
6413: CALL_OW 72
6417: IFFALSE 6510
// begin tmp := UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) ;
6419: LD_ADDR_VAR 0 3
6423: PUSH
6424: LD_VAR 0 4
6428: PPUSH
6429: LD_INT 3
6431: PUSH
6432: LD_INT 24
6434: PUSH
6435: LD_INT 650
6437: PUSH
6438: EMPTY
6439: LIST
6440: LIST
6441: PUSH
6442: EMPTY
6443: LIST
6444: LIST
6445: PPUSH
6446: CALL_OW 72
6450: ST_TO_ADDR
// for i in tmp do
6451: LD_ADDR_VAR 0 1
6455: PUSH
6456: LD_VAR 0 3
6460: PUSH
6461: FOR_IN
6462: IFFALSE 6508
// if not IsInArea ( i , mainBaseArea ) then
6464: LD_VAR 0 1
6468: PPUSH
6469: LD_INT 14
6471: PPUSH
6472: CALL_OW 308
6476: NOT
6477: IFFALSE 6506
// begin ComMoveXY ( i , 129 , 125 ) ;
6479: LD_VAR 0 1
6483: PPUSH
6484: LD_INT 129
6486: PPUSH
6487: LD_INT 125
6489: PPUSH
6490: CALL_OW 111
// AddComWait ( i , 0 0$30 ) ;
6494: LD_VAR 0 1
6498: PPUSH
6499: LD_INT 1050
6501: PPUSH
6502: CALL_OW 202
// end ;
6506: GO 6461
6508: POP
6509: POP
// end ; engs := UnitFilter ( engs , [ f_lives , 650 ] ) ;
6510: LD_ADDR_VAR 0 4
6514: PUSH
6515: LD_VAR 0 4
6519: PPUSH
6520: LD_INT 24
6522: PUSH
6523: LD_INT 650
6525: PUSH
6526: EMPTY
6527: LIST
6528: LIST
6529: PPUSH
6530: CALL_OW 72
6534: ST_TO_ADDR
// if not engs then
6535: LD_VAR 0 4
6539: NOT
6540: IFFALSE 6544
// exit ;
6542: GO 6950
// if filter then
6544: LD_VAR 0 2
6548: IFFALSE 6807
// begin for i in engs do
6550: LD_ADDR_VAR 0 1
6554: PUSH
6555: LD_VAR 0 4
6559: PUSH
6560: FOR_IN
6561: IFFALSE 6585
// if IsInUnit ( i ) then
6563: LD_VAR 0 1
6567: PPUSH
6568: CALL_OW 310
6572: IFFALSE 6583
// ComExitBuilding ( i ) ;
6574: LD_VAR 0 1
6578: PPUSH
6579: CALL_OW 122
6583: GO 6560
6585: POP
6586: POP
// wait ( 3 ) ;
6587: LD_INT 3
6589: PPUSH
6590: CALL_OW 67
// if filter >= 2 and engs >= 2 then
6594: LD_VAR 0 2
6598: PUSH
6599: LD_INT 2
6601: GREATEREQUAL
6602: PUSH
6603: LD_VAR 0 4
6607: PUSH
6608: LD_INT 2
6610: GREATEREQUAL
6611: AND
6612: IFFALSE 6760
// begin for i = 1 to engs / 2 do
6614: LD_ADDR_VAR 0 1
6618: PUSH
6619: DOUBLE
6620: LD_INT 1
6622: DEC
6623: ST_TO_ADDR
6624: LD_VAR 0 4
6628: PUSH
6629: LD_INT 2
6631: DIVREAL
6632: PUSH
6633: FOR_TO
6634: IFFALSE 6680
// if not HasTask ( engs [ i ] ) then
6636: LD_VAR 0 4
6640: PUSH
6641: LD_VAR 0 1
6645: ARRAY
6646: PPUSH
6647: CALL_OW 314
6651: NOT
6652: IFFALSE 6678
// ComRepairBuilding ( engs [ i ] , filter [ 1 ] ) ;
6654: LD_VAR 0 4
6658: PUSH
6659: LD_VAR 0 1
6663: ARRAY
6664: PPUSH
6665: LD_VAR 0 2
6669: PUSH
6670: LD_INT 1
6672: ARRAY
6673: PPUSH
6674: CALL_OW 130
6678: GO 6633
6680: POP
6681: POP
// for i = engs / 2 + 1 to engs do
6682: LD_ADDR_VAR 0 1
6686: PUSH
6687: DOUBLE
6688: LD_VAR 0 4
6692: PUSH
6693: LD_INT 2
6695: DIVREAL
6696: PUSH
6697: LD_INT 1
6699: PLUS
6700: DEC
6701: ST_TO_ADDR
6702: LD_VAR 0 4
6706: PUSH
6707: FOR_TO
6708: IFFALSE 6756
// if not HasTask ( engs [ i ] ) then
6710: LD_VAR 0 4
6714: PUSH
6715: LD_VAR 0 1
6719: ARRAY
6720: PPUSH
6721: CALL_OW 314
6725: NOT
6726: IFFALSE 6754
// ComRepairBuilding ( engs [ i ] , filter [ filter ] ) ;
6728: LD_VAR 0 4
6732: PUSH
6733: LD_VAR 0 1
6737: ARRAY
6738: PPUSH
6739: LD_VAR 0 2
6743: PUSH
6744: LD_VAR 0 2
6748: ARRAY
6749: PPUSH
6750: CALL_OW 130
6754: GO 6707
6756: POP
6757: POP
// end else
6758: GO 6807
// for i in engs do
6760: LD_ADDR_VAR 0 1
6764: PUSH
6765: LD_VAR 0 4
6769: PUSH
6770: FOR_IN
6771: IFFALSE 6805
// if not HasTask ( i ) then
6773: LD_VAR 0 1
6777: PPUSH
6778: CALL_OW 314
6782: NOT
6783: IFFALSE 6803
// ComRepairBuilding ( i , filter [ 1 ] ) ;
6785: LD_VAR 0 1
6789: PPUSH
6790: LD_VAR 0 2
6794: PUSH
6795: LD_INT 1
6797: ARRAY
6798: PPUSH
6799: CALL_OW 130
6803: GO 6770
6805: POP
6806: POP
// end ; enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
6807: LD_ADDR_VAR 0 5
6811: PUSH
6812: LD_INT 81
6814: PUSH
6815: LD_INT 3
6817: PUSH
6818: EMPTY
6819: LIST
6820: LIST
6821: PPUSH
6822: CALL_OW 69
6826: ST_TO_ADDR
// if ru_rebuild_list and not filter then
6827: LD_EXP 20
6831: PUSH
6832: LD_VAR 0 2
6836: NOT
6837: AND
6838: IFFALSE 6950
// begin ComExitBuilding ( engs ) ;
6840: LD_VAR 0 4
6844: PPUSH
6845: CALL_OW 122
// if GetDistUnitXY ( NearestUnitToXY ( enemy , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) > 10 then
6849: LD_VAR 0 5
6853: PPUSH
6854: LD_EXP 20
6858: PUSH
6859: LD_INT 2
6861: ARRAY
6862: PPUSH
6863: LD_EXP 20
6867: PUSH
6868: LD_INT 3
6870: ARRAY
6871: PPUSH
6872: CALL_OW 73
6876: PPUSH
6877: LD_EXP 20
6881: PUSH
6882: LD_INT 2
6884: ARRAY
6885: PPUSH
6886: LD_EXP 20
6890: PUSH
6891: LD_INT 3
6893: ARRAY
6894: PPUSH
6895: CALL_OW 297
6899: PUSH
6900: LD_INT 10
6902: GREATER
6903: IFFALSE 6950
// ComBuild ( engs , ru_rebuild_list [ 1 ] , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] , ru_rebuild_list [ 4 ] ) ;
6905: LD_VAR 0 4
6909: PPUSH
6910: LD_EXP 20
6914: PUSH
6915: LD_INT 1
6917: ARRAY
6918: PPUSH
6919: LD_EXP 20
6923: PUSH
6924: LD_INT 2
6926: ARRAY
6927: PPUSH
6928: LD_EXP 20
6932: PUSH
6933: LD_INT 3
6935: ARRAY
6936: PPUSH
6937: LD_EXP 20
6941: PUSH
6942: LD_INT 4
6944: ARRAY
6945: PPUSH
6946: CALL_OW 145
// end ; end ;
6950: PPOPN 5
6952: END
// every 0 0$1 trigger GetLives ( ru_dep_main ) < 250 do var i , tmp ;
6953: LD_INT 16
6955: PPUSH
6956: CALL_OW 256
6960: PUSH
6961: LD_INT 250
6963: LESS
6964: IFFALSE 7154
6966: GO 6968
6968: DISABLE
6969: LD_INT 0
6971: PPUSH
6972: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
6973: LD_ADDR_VAR 0 2
6977: PUSH
6978: LD_INT 22
6980: PUSH
6981: LD_INT 3
6983: PUSH
6984: EMPTY
6985: LIST
6986: LIST
6987: PUSH
6988: LD_INT 2
6990: PUSH
6991: LD_INT 25
6993: PUSH
6994: LD_INT 1
6996: PUSH
6997: EMPTY
6998: LIST
6999: LIST
7000: PUSH
7001: LD_INT 25
7003: PUSH
7004: LD_INT 3
7006: PUSH
7007: EMPTY
7008: LIST
7009: LIST
7010: PUSH
7011: LD_INT 25
7013: PUSH
7014: LD_INT 4
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: LIST
7025: LIST
7026: PUSH
7027: EMPTY
7028: LIST
7029: LIST
7030: PPUSH
7031: CALL_OW 69
7035: ST_TO_ADDR
// ComExitBuilding ( tmp ) ;
7036: LD_VAR 0 2
7040: PPUSH
7041: CALL_OW 122
// wait ( 3 ) ;
7045: LD_INT 3
7047: PPUSH
7048: CALL_OW 67
// ComMoveXY ( tmp , 156 , 211 ) ;
7052: LD_VAR 0 2
7056: PPUSH
7057: LD_INT 156
7059: PPUSH
7060: LD_INT 211
7062: PPUSH
7063: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7067: LD_INT 35
7069: PPUSH
7070: CALL_OW 67
// for i in tmp do
7074: LD_ADDR_VAR 0 1
7078: PUSH
7079: LD_VAR 0 2
7083: PUSH
7084: FOR_IN
7085: IFFALSE 7145
// if IsInArea ( i , escapeArea ) then
7087: LD_VAR 0 1
7091: PPUSH
7092: LD_INT 15
7094: PPUSH
7095: CALL_OW 308
7099: IFFALSE 7128
// begin RemoveUnit ( i ) ;
7101: LD_VAR 0 1
7105: PPUSH
7106: CALL_OW 64
// tmp := tmp diff i ;
7110: LD_ADDR_VAR 0 2
7114: PUSH
7115: LD_VAR 0 2
7119: PUSH
7120: LD_VAR 0 1
7124: DIFF
7125: ST_TO_ADDR
// end else
7126: GO 7143
// ComMoveXY ( i , 156 , 211 ) ;
7128: LD_VAR 0 1
7132: PPUSH
7133: LD_INT 156
7135: PPUSH
7136: LD_INT 211
7138: PPUSH
7139: CALL_OW 111
7143: GO 7084
7145: POP
7146: POP
// until not tmp ;
7147: LD_VAR 0 2
7151: NOT
7152: IFFALSE 7067
// end ;
7154: PPOPN 2
7156: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do var i , tmp , doc ;
7157: LD_INT 22
7159: PUSH
7160: LD_INT 3
7162: PUSH
7163: EMPTY
7164: LIST
7165: LIST
7166: PUSH
7167: LD_INT 25
7169: PUSH
7170: LD_INT 4
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: PUSH
7177: EMPTY
7178: LIST
7179: LIST
7180: PPUSH
7181: CALL_OW 69
7185: IFFALSE 7439
7187: GO 7189
7189: DISABLE
7190: LD_INT 0
7192: PPUSH
7193: PPUSH
7194: PPUSH
// begin enable ;
7195: ENABLE
// tmp := FilterUnitsInArea ( mainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7196: LD_ADDR_VAR 0 2
7200: PUSH
7201: LD_INT 14
7203: PPUSH
7204: LD_INT 22
7206: PUSH
7207: LD_INT 3
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: PUSH
7214: LD_INT 21
7216: PUSH
7217: LD_INT 1
7219: PUSH
7220: EMPTY
7221: LIST
7222: LIST
7223: PUSH
7224: LD_INT 3
7226: PUSH
7227: LD_INT 24
7229: PUSH
7230: LD_INT 1000
7232: PUSH
7233: EMPTY
7234: LIST
7235: LIST
7236: PUSH
7237: EMPTY
7238: LIST
7239: LIST
7240: PUSH
7241: EMPTY
7242: LIST
7243: LIST
7244: LIST
7245: PPUSH
7246: CALL_OW 70
7250: ST_TO_ADDR
// doc := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
7251: LD_ADDR_VAR 0 3
7255: PUSH
7256: LD_INT 22
7258: PUSH
7259: LD_INT 3
7261: PUSH
7262: EMPTY
7263: LIST
7264: LIST
7265: PUSH
7266: LD_INT 25
7268: PUSH
7269: LD_INT 4
7271: PUSH
7272: EMPTY
7273: LIST
7274: LIST
7275: PUSH
7276: EMPTY
7277: LIST
7278: LIST
7279: PPUSH
7280: CALL_OW 69
7284: ST_TO_ADDR
// if not doc then
7285: LD_VAR 0 3
7289: NOT
7290: IFFALSE 7294
// exit ;
7292: GO 7439
// if not tmp then
7294: LD_VAR 0 2
7298: NOT
7299: IFFALSE 7390
// begin if not IsInUnit ( doc [ 1 ] ) then
7301: LD_VAR 0 3
7305: PUSH
7306: LD_INT 1
7308: ARRAY
7309: PPUSH
7310: CALL_OW 310
7314: NOT
7315: IFFALSE 7388
// ComEnterUnit ( doc , FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ) ;
7317: LD_VAR 0 3
7321: PPUSH
7322: LD_INT 22
7324: PUSH
7325: LD_INT 3
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: PUSH
7332: LD_INT 2
7334: PUSH
7335: LD_INT 30
7337: PUSH
7338: LD_INT 6
7340: PUSH
7341: EMPTY
7342: LIST
7343: LIST
7344: PUSH
7345: LD_INT 30
7347: PUSH
7348: LD_INT 7
7350: PUSH
7351: EMPTY
7352: LIST
7353: LIST
7354: PUSH
7355: LD_INT 30
7357: PUSH
7358: LD_INT 8
7360: PUSH
7361: EMPTY
7362: LIST
7363: LIST
7364: PUSH
7365: EMPTY
7366: LIST
7367: LIST
7368: LIST
7369: LIST
7370: PUSH
7371: EMPTY
7372: LIST
7373: LIST
7374: PPUSH
7375: CALL_OW 69
7379: PUSH
7380: LD_INT 1
7382: ARRAY
7383: PPUSH
7384: CALL_OW 120
// exit ;
7388: GO 7439
// end ; if IsInUnit ( doc [ 1 ] ) then
7390: LD_VAR 0 3
7394: PUSH
7395: LD_INT 1
7397: ARRAY
7398: PPUSH
7399: CALL_OW 310
7403: IFFALSE 7414
// ComExitBuilding ( doc ) ;
7405: LD_VAR 0 3
7409: PPUSH
7410: CALL_OW 122
// wait ( 3 ) ;
7414: LD_INT 3
7416: PPUSH
7417: CALL_OW 67
// ComHeal ( doc , tmp [ 1 ] ) ;
7421: LD_VAR 0 3
7425: PPUSH
7426: LD_VAR 0 2
7430: PUSH
7431: LD_INT 1
7433: ARRAY
7434: PPUSH
7435: CALL_OW 128
// end ;
7439: PPOPN 3
7441: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do var i , tmp , attacking , areas , area , mech ;
7442: LD_INT 22
7444: PUSH
7445: LD_INT 3
7447: PUSH
7448: EMPTY
7449: LIST
7450: LIST
7451: PUSH
7452: LD_INT 25
7454: PUSH
7455: LD_INT 3
7457: PUSH
7458: EMPTY
7459: LIST
7460: LIST
7461: PUSH
7462: EMPTY
7463: LIST
7464: LIST
7465: PPUSH
7466: CALL_OW 69
7470: PUSH
7471: LD_INT 22
7473: PUSH
7474: LD_INT 3
7476: PUSH
7477: EMPTY
7478: LIST
7479: LIST
7480: PUSH
7481: LD_INT 21
7483: PUSH
7484: LD_INT 2
7486: PUSH
7487: EMPTY
7488: LIST
7489: LIST
7490: PUSH
7491: EMPTY
7492: LIST
7493: LIST
7494: PPUSH
7495: CALL_OW 69
7499: AND
7500: IFFALSE 8259
7502: GO 7504
7504: DISABLE
7505: LD_INT 0
7507: PPUSH
7508: PPUSH
7509: PPUSH
7510: PPUSH
7511: PPUSH
7512: PPUSH
// begin enable ;
7513: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
7514: LD_ADDR_VAR 0 2
7518: PUSH
7519: LD_INT 22
7521: PUSH
7522: LD_INT 3
7524: PUSH
7525: EMPTY
7526: LIST
7527: LIST
7528: PUSH
7529: LD_INT 21
7531: PUSH
7532: LD_INT 2
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: PUSH
7539: LD_INT 3
7541: PUSH
7542: LD_INT 58
7544: PUSH
7545: EMPTY
7546: LIST
7547: PUSH
7548: EMPTY
7549: LIST
7550: LIST
7551: PUSH
7552: EMPTY
7553: LIST
7554: LIST
7555: LIST
7556: PPUSH
7557: CALL_OW 69
7561: ST_TO_ADDR
// areas := [ sectorAlpha , sectorBeta , sectorDelta , mainBaseArea ] ;
7562: LD_ADDR_VAR 0 4
7566: PUSH
7567: LD_INT 10
7569: PUSH
7570: LD_INT 11
7572: PUSH
7573: LD_INT 12
7575: PUSH
7576: LD_INT 14
7578: PUSH
7579: EMPTY
7580: LIST
7581: LIST
7582: LIST
7583: LIST
7584: ST_TO_ADDR
// area := 0 ;
7585: LD_ADDR_VAR 0 5
7589: PUSH
7590: LD_INT 0
7592: ST_TO_ADDR
// attacking := false ;
7593: LD_ADDR_VAR 0 3
7597: PUSH
7598: LD_INT 0
7600: ST_TO_ADDR
// for i in tmp do
7601: LD_ADDR_VAR 0 1
7605: PUSH
7606: LD_VAR 0 2
7610: PUSH
7611: FOR_IN
7612: IFFALSE 8040
// begin if GetDistUnits ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) < 10 and not HasTask ( i ) and not GetTag ( i ) and GetLives ( i ) > 650 then
7614: LD_VAR 0 1
7618: PPUSH
7619: LD_INT 22
7621: PUSH
7622: LD_INT 1
7624: PUSH
7625: EMPTY
7626: LIST
7627: LIST
7628: PPUSH
7629: CALL_OW 69
7633: PPUSH
7634: LD_VAR 0 1
7638: PPUSH
7639: CALL_OW 74
7643: PPUSH
7644: CALL_OW 296
7648: PUSH
7649: LD_INT 10
7651: LESS
7652: PUSH
7653: LD_VAR 0 1
7657: PPUSH
7658: CALL_OW 314
7662: NOT
7663: AND
7664: PUSH
7665: LD_VAR 0 1
7669: PPUSH
7670: CALL_OW 110
7674: NOT
7675: AND
7676: PUSH
7677: LD_VAR 0 1
7681: PPUSH
7682: CALL_OW 256
7686: PUSH
7687: LD_INT 650
7689: GREATER
7690: AND
7691: IFFALSE 7735
// begin ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
7693: LD_VAR 0 1
7697: PPUSH
7698: LD_INT 22
7700: PUSH
7701: LD_INT 1
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: PPUSH
7708: CALL_OW 69
7712: PPUSH
7713: LD_VAR 0 1
7717: PPUSH
7718: CALL_OW 74
7722: PPUSH
7723: CALL_OW 115
// attacking := true ;
7727: LD_ADDR_VAR 0 3
7731: PUSH
7732: LD_INT 1
7734: ST_TO_ADDR
// end ; if not GetTag ( i ) and GetLives ( i ) < 650 and GetType ( i ) = unit_vehicle then
7735: LD_VAR 0 1
7739: PPUSH
7740: CALL_OW 110
7744: NOT
7745: PUSH
7746: LD_VAR 0 1
7750: PPUSH
7751: CALL_OW 256
7755: PUSH
7756: LD_INT 650
7758: LESS
7759: AND
7760: PUSH
7761: LD_VAR 0 1
7765: PPUSH
7766: CALL_OW 247
7770: PUSH
7771: LD_INT 2
7773: EQUAL
7774: AND
7775: IFFALSE 7804
// begin SetTag ( i , 1 ) ;
7777: LD_VAR 0 1
7781: PPUSH
7782: LD_INT 1
7784: PPUSH
7785: CALL_OW 109
// ComMoveXY ( i , 130 , 139 ) ;
7789: LD_VAR 0 1
7793: PPUSH
7794: LD_INT 130
7796: PPUSH
7797: LD_INT 139
7799: PPUSH
7800: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 130 , 139 ) < 6 then
7804: LD_VAR 0 1
7808: PPUSH
7809: CALL_OW 110
7813: PUSH
7814: LD_INT 1
7816: EQUAL
7817: PUSH
7818: LD_VAR 0 1
7822: PPUSH
7823: LD_INT 130
7825: PPUSH
7826: LD_INT 139
7828: PPUSH
7829: CALL_OW 297
7833: PUSH
7834: LD_INT 6
7836: LESS
7837: AND
7838: IFFALSE 7852
// SetTag ( i , 2 ) ;
7840: LD_VAR 0 1
7844: PPUSH
7845: LD_INT 2
7847: PPUSH
7848: CALL_OW 109
// if GetTag ( i ) = 2 then
7852: LD_VAR 0 1
7856: PPUSH
7857: CALL_OW 110
7861: PUSH
7862: LD_INT 2
7864: EQUAL
7865: IFFALSE 8000
// begin if GetLives ( i ) = 1000 then
7867: LD_VAR 0 1
7871: PPUSH
7872: CALL_OW 256
7876: PUSH
7877: LD_INT 1000
7879: EQUAL
7880: IFFALSE 7896
// SetTag ( i , 3 ) else
7882: LD_VAR 0 1
7886: PPUSH
7887: LD_INT 3
7889: PPUSH
7890: CALL_OW 109
7894: GO 8000
// if IsDrivenBy ( i ) then
7896: LD_VAR 0 1
7900: PPUSH
7901: CALL_OW 311
7905: IFFALSE 8000
// begin mech := IsDrivenBy ( i ) ;
7907: LD_ADDR_VAR 0 6
7911: PUSH
7912: LD_VAR 0 1
7916: PPUSH
7917: CALL_OW 311
7921: ST_TO_ADDR
// if not See ( 1 , mech ) and GetLives ( mech ) < 1000 then
7922: LD_INT 1
7924: PPUSH
7925: LD_VAR 0 6
7929: PPUSH
7930: CALL_OW 292
7934: NOT
7935: PUSH
7936: LD_VAR 0 6
7940: PPUSH
7941: CALL_OW 256
7945: PUSH
7946: LD_INT 1000
7948: LESS
7949: AND
7950: IFFALSE 7964
// SetLives ( mech , 1000 ) ;
7952: LD_VAR 0 6
7956: PPUSH
7957: LD_INT 1000
7959: PPUSH
7960: CALL_OW 234
// if not See ( 1 , i ) then
7964: LD_INT 1
7966: PPUSH
7967: LD_VAR 0 1
7971: PPUSH
7972: CALL_OW 292
7976: NOT
7977: IFFALSE 7991
// SetFuel ( i , 100 ) ;
7979: LD_VAR 0 1
7983: PPUSH
7984: LD_INT 100
7986: PPUSH
7987: CALL_OW 240
// ComRepairVehicleAndReturn ( mech ) ;
7991: LD_VAR 0 6
7995: PPUSH
7996: CALL 71329 0 1
// end ; end ; if GetTag ( i ) = 3 and IsDrivenBy ( i ) then
8000: LD_VAR 0 1
8004: PPUSH
8005: CALL_OW 110
8009: PUSH
8010: LD_INT 3
8012: EQUAL
8013: PUSH
8014: LD_VAR 0 1
8018: PPUSH
8019: CALL_OW 311
8023: AND
8024: IFFALSE 8038
// SetTag ( i , 0 ) ;
8026: LD_VAR 0 1
8030: PPUSH
8031: LD_INT 0
8033: PPUSH
8034: CALL_OW 109
// end ;
8038: GO 7611
8040: POP
8041: POP
// if attacking then
8042: LD_VAR 0 3
8046: IFFALSE 8050
// exit ;
8048: GO 8259
// if can_end and tmp then
8050: LD_EXP 6
8054: PUSH
8055: LD_VAR 0 2
8059: AND
8060: IFFALSE 8115
// begin for i in tmp do
8062: LD_ADDR_VAR 0 1
8066: PUSH
8067: LD_VAR 0 2
8071: PUSH
8072: FOR_IN
8073: IFFALSE 8111
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
8075: LD_VAR 0 1
8079: PPUSH
8080: LD_INT 22
8082: PUSH
8083: LD_INT 1
8085: PUSH
8086: EMPTY
8087: LIST
8088: LIST
8089: PPUSH
8090: CALL_OW 69
8094: PPUSH
8095: LD_VAR 0 1
8099: PPUSH
8100: CALL_OW 74
8104: PPUSH
8105: CALL_OW 115
8109: GO 8072
8111: POP
8112: POP
// exit ;
8113: GO 8259
// end ; for i in areas do
8115: LD_ADDR_VAR 0 1
8119: PUSH
8120: LD_VAR 0 4
8124: PUSH
8125: FOR_IN
8126: IFFALSE 8163
// if FilterUnitsInArea ( i , [ f_side , 1 ] ) then
8128: LD_VAR 0 1
8132: PPUSH
8133: LD_INT 22
8135: PUSH
8136: LD_INT 1
8138: PUSH
8139: EMPTY
8140: LIST
8141: LIST
8142: PPUSH
8143: CALL_OW 70
8147: IFFALSE 8161
// begin area := i ;
8149: LD_ADDR_VAR 0 5
8153: PUSH
8154: LD_VAR 0 1
8158: ST_TO_ADDR
// break ;
8159: GO 8163
// end ;
8161: GO 8125
8163: POP
8164: POP
// if area then
8165: LD_VAR 0 5
8169: IFFALSE 8259
// begin for i in tmp do
8171: LD_ADDR_VAR 0 1
8175: PUSH
8176: LD_VAR 0 2
8180: PUSH
8181: FOR_IN
8182: IFFALSE 8257
// begin if GetTag ( i ) then
8184: LD_VAR 0 1
8188: PPUSH
8189: CALL_OW 110
8193: IFFALSE 8197
// continue ;
8195: GO 8181
// if GetFuel ( i ) < 33 then
8197: LD_VAR 0 1
8201: PPUSH
8202: CALL_OW 261
8206: PUSH
8207: LD_INT 33
8209: LESS
8210: IFFALSE 8224
// SetFuel ( i , 33 ) ;
8212: LD_VAR 0 1
8216: PPUSH
8217: LD_INT 33
8219: PPUSH
8220: CALL_OW 240
// if not IsInArea ( i , area ) then
8224: LD_VAR 0 1
8228: PPUSH
8229: LD_VAR 0 5
8233: PPUSH
8234: CALL_OW 308
8238: NOT
8239: IFFALSE 8255
// ComMoveToArea ( i , area ) ;
8241: LD_VAR 0 1
8245: PPUSH
8246: LD_VAR 0 5
8250: PPUSH
8251: CALL_OW 113
// end ;
8255: GO 8181
8257: POP
8258: POP
// end ; end ;
8259: PPOPN 6
8261: END
// every 15 15$00 trigger Difficulty > 1 do var i , j , un , veh , time , count ;
8262: LD_OWVAR 67
8266: PUSH
8267: LD_INT 1
8269: GREATER
8270: IFFALSE 8559
8272: GO 8274
8274: DISABLE
8275: LD_INT 0
8277: PPUSH
8278: PPUSH
8279: PPUSH
8280: PPUSH
8281: PPUSH
8282: PPUSH
// begin uc_side := 3 ;
8283: LD_ADDR_OWVAR 20
8287: PUSH
8288: LD_INT 3
8290: ST_TO_ADDR
// uc_nation := 3 ;
8291: LD_ADDR_OWVAR 21
8295: PUSH
8296: LD_INT 3
8298: ST_TO_ADDR
// time := [ 9 9$00 , 7 7$00 , 6 6$00 , 5 5$30 ] [ Difficulty ] ;
8299: LD_ADDR_VAR 0 5
8303: PUSH
8304: LD_INT 18900
8306: PUSH
8307: LD_INT 14700
8309: PUSH
8310: LD_INT 12600
8312: PUSH
8313: LD_INT 11550
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: LIST
8320: LIST
8321: PUSH
8322: LD_OWVAR 67
8326: ARRAY
8327: ST_TO_ADDR
// count := [ 2 , 2 , 3 , 3 ] [ Difficulty ] ;
8328: LD_ADDR_VAR 0 6
8332: PUSH
8333: LD_INT 2
8335: PUSH
8336: LD_INT 2
8338: PUSH
8339: LD_INT 3
8341: PUSH
8342: LD_INT 3
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: LIST
8349: LIST
8350: PUSH
8351: LD_OWVAR 67
8355: ARRAY
8356: ST_TO_ADDR
// for i = 1 to count do
8357: LD_ADDR_VAR 0 1
8361: PUSH
8362: DOUBLE
8363: LD_INT 1
8365: DEC
8366: ST_TO_ADDR
8367: LD_VAR 0 6
8371: PUSH
8372: FOR_TO
8373: IFFALSE 8557
// begin wait ( time ) ;
8375: LD_VAR 0 5
8379: PPUSH
8380: CALL_OW 67
// for j = 1 to rand ( 1 , Difficulty ) do
8384: LD_ADDR_VAR 0 2
8388: PUSH
8389: DOUBLE
8390: LD_INT 1
8392: DEC
8393: ST_TO_ADDR
8394: LD_INT 1
8396: PPUSH
8397: LD_OWVAR 67
8401: PPUSH
8402: CALL_OW 12
8406: PUSH
8407: FOR_TO
8408: IFFALSE 8553
// begin veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 80 ) ;
8410: LD_ADDR_VAR 0 4
8414: PUSH
8415: LD_INT 3
8417: PPUSH
8418: LD_INT 3
8420: PPUSH
8421: LD_INT 22
8423: PPUSH
8424: LD_INT 1
8426: PPUSH
8427: LD_INT 1
8429: PPUSH
8430: LD_INT 43
8432: PUSH
8433: LD_INT 44
8435: PUSH
8436: LD_INT 42
8438: PUSH
8439: EMPTY
8440: LIST
8441: LIST
8442: LIST
8443: PUSH
8444: LD_VAR 0 1
8448: PUSH
8449: LD_INT 3
8451: MOD
8452: PUSH
8453: LD_INT 1
8455: PLUS
8456: ARRAY
8457: PPUSH
8458: LD_INT 80
8460: PPUSH
8461: CALL 520 0 7
8465: ST_TO_ADDR
// PlaceUnitArea ( veh , southArea , false ) ;
8466: LD_VAR 0 4
8470: PPUSH
8471: LD_INT 13
8473: PPUSH
8474: LD_INT 0
8476: PPUSH
8477: CALL_OW 49
// PrepareHuman ( false , 3 , [ 4 , 5 , 5 , 7 ] [ Difficulty ] ) ;
8481: LD_INT 0
8483: PPUSH
8484: LD_INT 3
8486: PPUSH
8487: LD_INT 4
8489: PUSH
8490: LD_INT 5
8492: PUSH
8493: LD_INT 5
8495: PUSH
8496: LD_INT 7
8498: PUSH
8499: EMPTY
8500: LIST
8501: LIST
8502: LIST
8503: LIST
8504: PUSH
8505: LD_OWVAR 67
8509: ARRAY
8510: PPUSH
8511: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
8515: CALL_OW 44
8519: PPUSH
8520: LD_VAR 0 4
8524: PPUSH
8525: CALL_OW 52
// wait ( 0 0$01 ) ;
8529: LD_INT 35
8531: PPUSH
8532: CALL_OW 67
// ComMoveXY ( veh , 143 , 143 ) ;
8536: LD_VAR 0 4
8540: PPUSH
8541: LD_INT 143
8543: PPUSH
8544: LD_INT 143
8546: PPUSH
8547: CALL_OW 111
// end ;
8551: GO 8407
8553: POP
8554: POP
// end ;
8555: GO 8372
8557: POP
8558: POP
// end ;
8559: PPOPN 6
8561: END
// every 8 8$00 do var i , un , time ;
8562: GO 8564
8564: DISABLE
8565: LD_INT 0
8567: PPUSH
8568: PPUSH
8569: PPUSH
// begin time := [ 3 3$00 , 1 1$00 , 0 0$30 ] ;
8570: LD_ADDR_VAR 0 3
8574: PUSH
8575: LD_INT 6300
8577: PUSH
8578: LD_INT 2100
8580: PUSH
8581: LD_INT 1050
8583: PUSH
8584: EMPTY
8585: LIST
8586: LIST
8587: LIST
8588: ST_TO_ADDR
// wait ( time ) ;
8589: LD_VAR 0 3
8593: PPUSH
8594: CALL_OW 67
// uc_side := 3 ;
8598: LD_ADDR_OWVAR 20
8602: PUSH
8603: LD_INT 3
8605: ST_TO_ADDR
// uc_nation := 3 ;
8606: LD_ADDR_OWVAR 21
8610: PUSH
8611: LD_INT 3
8613: ST_TO_ADDR
// for i = 1 to 2 do
8614: LD_ADDR_VAR 0 1
8618: PUSH
8619: DOUBLE
8620: LD_INT 1
8622: DEC
8623: ST_TO_ADDR
8624: LD_INT 2
8626: PUSH
8627: FOR_TO
8628: IFFALSE 8691
// begin PrepareHuman ( false , 1 , 4 ) ;
8630: LD_INT 0
8632: PPUSH
8633: LD_INT 1
8635: PPUSH
8636: LD_INT 4
8638: PPUSH
8639: CALL_OW 380
// un := CreateHuman ;
8643: LD_ADDR_VAR 0 2
8647: PUSH
8648: CALL_OW 44
8652: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_dep_main ) ;
8653: LD_VAR 0 2
8657: PPUSH
8658: LD_INT 16
8660: PPUSH
8661: CALL_OW 52
// ComExitBuilding ( un ) ;
8665: LD_VAR 0 2
8669: PPUSH
8670: CALL_OW 122
// AddComAgressiveMove ( un , 41 , 76 ) ;
8674: LD_VAR 0 2
8678: PPUSH
8679: LD_INT 41
8681: PPUSH
8682: LD_INT 76
8684: PPUSH
8685: CALL_OW 174
// end ;
8689: GO 8627
8691: POP
8692: POP
// end ; end_of_file
8693: PPOPN 3
8695: END
// export function Action ; begin
8696: LD_INT 0
8698: PPUSH
// CenterNowOnXY ( 28 , 3 ) ;
8699: LD_INT 28
8701: PPUSH
8702: LD_INT 3
8704: PPUSH
8705: CALL_OW 86
// PlaceSeeing ( 41 , 76 , 1 , 10 ) ;
8709: LD_INT 41
8711: PPUSH
8712: LD_INT 76
8714: PPUSH
8715: LD_INT 1
8717: PPUSH
8718: LD_INT 10
8720: PPUSH
8721: CALL_OW 330
// RemoveSeeing ( 41 , 76 , 1 ) ;
8725: LD_INT 41
8727: PPUSH
8728: LD_INT 76
8730: PPUSH
8731: LD_INT 1
8733: PPUSH
8734: CALL_OW 331
// InGameOn ;
8738: CALL_OW 8
// SayRadio ( Harisson , D2-Har-1 ) ;
8742: LD_EXP 19
8746: PPUSH
8747: LD_STRING D2-Har-1
8749: PPUSH
8750: CALL_OW 94
// InGameOff ;
8754: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
8758: LD_STRING M1
8760: PPUSH
8761: CALL_OW 337
// end ;
8765: LD_VAR 0 1
8769: RET
// every 0 0$1 trigger buildings_counter > 1 do var un ;
8770: LD_EXP 4
8774: PUSH
8775: LD_INT 1
8777: GREATER
8778: IFFALSE 8869
8780: GO 8782
8782: DISABLE
8783: LD_INT 0
8785: PPUSH
// begin un := GetRandom ( sex_male ) [ 1 ] ;
8786: LD_ADDR_VAR 0 1
8790: PUSH
8791: LD_INT 1
8793: PPUSH
8794: CALL 608 0 1
8798: PUSH
8799: LD_INT 1
8801: ARRAY
8802: ST_TO_ADDR
// Say ( un , D2a-Sol1-1 ) ;
8803: LD_VAR 0 1
8807: PPUSH
8808: LD_STRING D2a-Sol1-1
8810: PPUSH
8811: CALL_OW 88
// if not un then
8815: LD_VAR 0 1
8819: NOT
8820: IFFALSE 8851
// begin un := GetRandom ( sex_female ) [ 1 ] ;
8822: LD_ADDR_VAR 0 1
8826: PUSH
8827: LD_INT 2
8829: PPUSH
8830: CALL 608 0 1
8834: PUSH
8835: LD_INT 1
8837: ARRAY
8838: ST_TO_ADDR
// Say ( un , D2a-FSol1-1 ) ;
8839: LD_VAR 0 1
8843: PPUSH
8844: LD_STRING D2a-FSol1-1
8846: PPUSH
8847: CALL_OW 88
// end ; if Khatam then
8851: LD_EXP 17
8855: IFFALSE 8869
// Say ( Khatam , D3b-Khat-3 ) ;
8857: LD_EXP 17
8861: PPUSH
8862: LD_STRING D3b-Khat-3
8864: PPUSH
8865: CALL_OW 88
// end ;
8869: PPOPN 1
8871: END
// every 0 0$1 trigger Frank and not Kikuchi and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Frank , 7 ] ] ) and IsOk ( Frank ) and not InBattle ( 1 ) and not InBattle ( 4 ) do var i , ape ;
8872: LD_EXP 15
8876: PUSH
8877: LD_EXP 18
8881: NOT
8882: AND
8883: PUSH
8884: LD_INT 22
8886: PUSH
8887: LD_INT 1
8889: PUSH
8890: EMPTY
8891: LIST
8892: LIST
8893: PUSH
8894: LD_INT 91
8896: PUSH
8897: LD_EXP 15
8901: PUSH
8902: LD_INT 7
8904: PUSH
8905: EMPTY
8906: LIST
8907: LIST
8908: LIST
8909: PUSH
8910: EMPTY
8911: LIST
8912: LIST
8913: PPUSH
8914: CALL_OW 69
8918: AND
8919: PUSH
8920: LD_EXP 15
8924: PPUSH
8925: CALL_OW 302
8929: AND
8930: PUSH
8931: LD_INT 1
8933: PPUSH
8934: CALL_OW 463
8938: NOT
8939: AND
8940: PUSH
8941: LD_INT 4
8943: PPUSH
8944: CALL_OW 463
8948: NOT
8949: AND
8950: IFFALSE 9537
8952: GO 8954
8954: DISABLE
8955: LD_INT 0
8957: PPUSH
8958: PPUSH
// begin InGameOn ;
8959: CALL_OW 8
// ape := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
8963: LD_ADDR_VAR 0 2
8967: PUSH
8968: LD_INT 22
8970: PUSH
8971: LD_INT 0
8973: PUSH
8974: EMPTY
8975: LIST
8976: LIST
8977: PUSH
8978: LD_INT 25
8980: PUSH
8981: LD_INT 12
8983: PUSH
8984: EMPTY
8985: LIST
8986: LIST
8987: PUSH
8988: EMPTY
8989: LIST
8990: LIST
8991: PPUSH
8992: CALL_OW 69
8996: ST_TO_ADDR
// ape := NearestUnitToUnit ( ape , Frank ) ;
8997: LD_ADDR_VAR 0 2
9001: PUSH
9002: LD_VAR 0 2
9006: PPUSH
9007: LD_EXP 15
9011: PPUSH
9012: CALL_OW 74
9016: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , Frank , 20 ] ] ) do
9017: LD_ADDR_VAR 0 1
9021: PUSH
9022: LD_INT 22
9024: PUSH
9025: LD_INT 1
9027: PUSH
9028: EMPTY
9029: LIST
9030: LIST
9031: PUSH
9032: LD_INT 21
9034: PUSH
9035: LD_INT 1
9037: PUSH
9038: EMPTY
9039: LIST
9040: LIST
9041: PUSH
9042: LD_INT 91
9044: PUSH
9045: LD_EXP 15
9049: PUSH
9050: LD_INT 20
9052: PUSH
9053: EMPTY
9054: LIST
9055: LIST
9056: LIST
9057: PUSH
9058: EMPTY
9059: LIST
9060: LIST
9061: LIST
9062: PPUSH
9063: CALL_OW 69
9067: PUSH
9068: FOR_IN
9069: IFFALSE 9087
// ComTurnUnit ( i , Frank ) ;
9071: LD_VAR 0 1
9075: PPUSH
9076: LD_EXP 15
9080: PPUSH
9081: CALL_OW 119
9085: GO 9068
9087: POP
9088: POP
// SetSide ( Frank , 1 ) ;
9089: LD_EXP 15
9093: PPUSH
9094: LD_INT 1
9096: PPUSH
9097: CALL_OW 235
// ComMoveUnit ( JMM , Frank ) ;
9101: LD_EXP 9
9105: PPUSH
9106: LD_EXP 15
9110: PPUSH
9111: CALL_OW 112
// AddComTurnUnit ( JMM , Frank ) ;
9115: LD_EXP 9
9119: PPUSH
9120: LD_EXP 15
9124: PPUSH
9125: CALL_OW 179
// CenterOnUnits ( Frank ) ;
9129: LD_EXP 15
9133: PPUSH
9134: CALL_OW 85
// Say ( Frank , D3a-Frank-1 ) ;
9138: LD_EXP 15
9142: PPUSH
9143: LD_STRING D3a-Frank-1
9145: PPUSH
9146: CALL_OW 88
// ComMoveXY ( ape , 42 , 78 ) ;
9150: LD_VAR 0 2
9154: PPUSH
9155: LD_INT 42
9157: PPUSH
9158: LD_INT 78
9160: PPUSH
9161: CALL_OW 111
// AddComTurnUnit ( ape , Frank ) ;
9165: LD_VAR 0 2
9169: PPUSH
9170: LD_EXP 15
9174: PPUSH
9175: CALL_OW 179
// if Lisa then
9179: LD_EXP 14
9183: IFFALSE 9197
// Say ( Lisa , D3a-Lisa-1 ) ;
9185: LD_EXP 14
9189: PPUSH
9190: LD_STRING D3a-Lisa-1
9192: PPUSH
9193: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
9197: LD_EXP 9
9201: PPUSH
9202: LD_STRING D3a-JMM-1
9204: PPUSH
9205: CALL_OW 88
// if Cyrus then
9209: LD_EXP 13
9213: IFFALSE 9227
// Say ( Cyrus , D3a-Cyrus-1 ) ;
9215: LD_EXP 13
9219: PPUSH
9220: LD_STRING D3a-Cyrus-1
9222: PPUSH
9223: CALL_OW 88
// if GetRandom ( sex_male ) then
9227: LD_INT 1
9229: PPUSH
9230: CALL 608 0 1
9234: IFFALSE 9255
// Say ( GetRandom ( sex_male ) [ 1 ] , D3a-Sol1-1 ) ;
9236: LD_INT 1
9238: PPUSH
9239: CALL 608 0 1
9243: PUSH
9244: LD_INT 1
9246: ARRAY
9247: PPUSH
9248: LD_STRING D3a-Sol1-1
9250: PPUSH
9251: CALL_OW 88
// if GetRandom ( sex_female ) then
9255: LD_INT 2
9257: PPUSH
9258: CALL 608 0 1
9262: IFFALSE 9283
// Say ( GetRandom ( sex_female ) [ 1 ] , D3a-FSol1-1 ) ;
9264: LD_INT 2
9266: PPUSH
9267: CALL 608 0 1
9271: PUSH
9272: LD_INT 1
9274: ARRAY
9275: PPUSH
9276: LD_STRING D3a-FSol1-1
9278: PPUSH
9279: CALL_OW 88
// if Gladstone then
9283: LD_EXP 16
9287: IFFALSE 9301
// Say ( Gladstone , D3a-Glad-1 ) ;
9289: LD_EXP 16
9293: PPUSH
9294: LD_STRING D3a-Glad-1
9296: PPUSH
9297: CALL_OW 88
// ComMoveXY ( ape , 60 , 113 ) ;
9301: LD_VAR 0 2
9305: PPUSH
9306: LD_INT 60
9308: PPUSH
9309: LD_INT 113
9311: PPUSH
9312: CALL_OW 111
// Say ( Frank , D3a-Frank-2 ) ;
9316: LD_EXP 15
9320: PPUSH
9321: LD_STRING D3a-Frank-2
9323: PPUSH
9324: CALL_OW 88
// ComTurnUnit ( Frank , JMM ) ;
9328: LD_EXP 15
9332: PPUSH
9333: LD_EXP 9
9337: PPUSH
9338: CALL_OW 119
// Say ( JMM , D3a-JMM-2 ) ;
9342: LD_EXP 9
9346: PPUSH
9347: LD_STRING D3a-JMM-2
9349: PPUSH
9350: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9354: LD_INT 1
9356: PPUSH
9357: LD_INT 4
9359: PPUSH
9360: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9364: LD_INT 85
9366: PPUSH
9367: LD_INT 134
9369: PPUSH
9370: CALL_OW 84
// Say ( Frank , D3a-Frank-3 ) ;
9374: LD_EXP 15
9378: PPUSH
9379: LD_STRING D3a-Frank-3
9381: PPUSH
9382: CALL_OW 88
// Wait ( 0 0$01 ) ;
9386: LD_INT 35
9388: PPUSH
9389: CALL_OW 67
// CenterOnXY ( 166 , 136 ) ;
9393: LD_INT 166
9395: PPUSH
9396: LD_INT 136
9398: PPUSH
9399: CALL_OW 84
// Say ( JMM , D3a-JMM-3 ) ;
9403: LD_EXP 9
9407: PPUSH
9408: LD_STRING D3a-JMM-3
9410: PPUSH
9411: CALL_OW 88
// Wait ( 0 0$01 ) ;
9415: LD_INT 35
9417: PPUSH
9418: CALL_OW 67
// CenterNowOnUnits ( Frank ) ;
9422: LD_EXP 15
9426: PPUSH
9427: CALL_OW 87
// Say ( Frank , D3a-Frank-4 ) ;
9431: LD_EXP 15
9435: PPUSH
9436: LD_STRING D3a-Frank-4
9438: PPUSH
9439: CALL_OW 88
// if Lisa then
9443: LD_EXP 14
9447: IFFALSE 9461
// Say ( Lisa , D3a-Lisa-4 ) ;
9449: LD_EXP 14
9453: PPUSH
9454: LD_STRING D3a-Lisa-4
9456: PPUSH
9457: CALL_OW 88
// Say ( JMM , D3a-JMM-4 ) ;
9461: LD_EXP 9
9465: PPUSH
9466: LD_STRING D3a-JMM-4
9468: PPUSH
9469: CALL_OW 88
// Say ( Frank , D3a-Frank-5 ) ;
9473: LD_EXP 15
9477: PPUSH
9478: LD_STRING D3a-Frank-5
9480: PPUSH
9481: CALL_OW 88
// Say ( JMM , D3a-JMM-5 ) ;
9485: LD_EXP 9
9489: PPUSH
9490: LD_STRING D3a-JMM-5
9492: PPUSH
9493: CALL_OW 88
// Say ( Frank , D3a-Frank-6 ) ;
9497: LD_EXP 15
9501: PPUSH
9502: LD_STRING D3a-Frank-6
9504: PPUSH
9505: CALL_OW 88
// Say ( JMM , D3a-JMM-6 ) ;
9509: LD_EXP 9
9513: PPUSH
9514: LD_STRING D3a-JMM-6
9516: PPUSH
9517: CALL_OW 88
// Say ( Frank , D3a-Frank-7 ) ;
9521: LD_EXP 15
9525: PPUSH
9526: LD_STRING D3a-Frank-7
9528: PPUSH
9529: CALL_OW 88
// InGameOff ;
9533: CALL_OW 9
// end ;
9537: PPOPN 2
9539: END
// every 0 0$1 trigger Kikuchi and not Frank and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Kikuchi , 7 ] ] ) and IsOk ( Kikuchi ) and not InBattle ( 1 ) and not InBattle ( 4 ) do
9540: LD_EXP 18
9544: PUSH
9545: LD_EXP 15
9549: NOT
9550: AND
9551: PUSH
9552: LD_INT 22
9554: PUSH
9555: LD_INT 1
9557: PUSH
9558: EMPTY
9559: LIST
9560: LIST
9561: PUSH
9562: LD_INT 91
9564: PUSH
9565: LD_EXP 18
9569: PUSH
9570: LD_INT 7
9572: PUSH
9573: EMPTY
9574: LIST
9575: LIST
9576: LIST
9577: PUSH
9578: EMPTY
9579: LIST
9580: LIST
9581: PPUSH
9582: CALL_OW 69
9586: AND
9587: PUSH
9588: LD_EXP 18
9592: PPUSH
9593: CALL_OW 302
9597: AND
9598: PUSH
9599: LD_INT 1
9601: PPUSH
9602: CALL_OW 463
9606: NOT
9607: AND
9608: PUSH
9609: LD_INT 4
9611: PPUSH
9612: CALL_OW 463
9616: NOT
9617: AND
9618: IFFALSE 9798
9620: GO 9622
9622: DISABLE
// begin InGameOn ;
9623: CALL_OW 8
// ComTurnUnit ( JMM , Kikuchi ) ;
9627: LD_EXP 9
9631: PPUSH
9632: LD_EXP 18
9636: PPUSH
9637: CALL_OW 119
// ComTurnUnit ( Kikuchi , JMM ) ;
9641: LD_EXP 18
9645: PPUSH
9646: LD_EXP 9
9650: PPUSH
9651: CALL_OW 119
// CenterOnUnits ( Kikuchi ) ;
9655: LD_EXP 18
9659: PPUSH
9660: CALL_OW 85
// Say ( Kikuchi , D3b-Yam-1 ) ;
9664: LD_EXP 18
9668: PPUSH
9669: LD_STRING D3b-Yam-1
9671: PPUSH
9672: CALL_OW 88
// Say ( JMM , D3b-JMM-1 ) ;
9676: LD_EXP 9
9680: PPUSH
9681: LD_STRING D3b-JMM-1
9683: PPUSH
9684: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9688: LD_INT 1
9690: PPUSH
9691: LD_INT 4
9693: PPUSH
9694: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9698: LD_INT 85
9700: PPUSH
9701: LD_INT 134
9703: PPUSH
9704: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-2 ) ;
9708: LD_EXP 18
9712: PPUSH
9713: LD_STRING D3b-Yam-2
9715: PPUSH
9716: CALL_OW 88
// Wait ( 0 0$01 ) ;
9720: LD_INT 35
9722: PPUSH
9723: CALL_OW 67
// Say ( JMM , D3b-JMM-2 ) ;
9727: LD_EXP 9
9731: PPUSH
9732: LD_STRING D3b-JMM-2
9734: PPUSH
9735: CALL_OW 88
// CenterOnXY ( 166 , 136 ) ;
9739: LD_INT 166
9741: PPUSH
9742: LD_INT 136
9744: PPUSH
9745: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-3 ) ;
9749: LD_EXP 18
9753: PPUSH
9754: LD_STRING D3b-Yam-3
9756: PPUSH
9757: CALL_OW 88
// CenterNowOnUnits ( JMM ) ;
9761: LD_EXP 9
9765: PPUSH
9766: CALL_OW 87
// Say ( JMM , D3b-JMM-3a ) ;
9770: LD_EXP 9
9774: PPUSH
9775: LD_STRING D3b-JMM-3a
9777: PPUSH
9778: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
9782: LD_EXP 18
9786: PPUSH
9787: LD_INT 1
9789: PPUSH
9790: CALL_OW 235
// InGameOff ;
9794: CALL_OW 9
// end ;
9798: END
// every 0 0$1 trigger FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var un , x , tw , i ;
9799: LD_INT 7
9801: PPUSH
9802: LD_INT 22
9804: PUSH
9805: LD_INT 1
9807: PUSH
9808: EMPTY
9809: LIST
9810: LIST
9811: PUSH
9812: LD_INT 3
9814: PUSH
9815: LD_INT 24
9817: PUSH
9818: LD_INT 1000
9820: PUSH
9821: EMPTY
9822: LIST
9823: LIST
9824: PUSH
9825: EMPTY
9826: LIST
9827: LIST
9828: PUSH
9829: EMPTY
9830: LIST
9831: LIST
9832: PPUSH
9833: CALL_OW 70
9837: IFFALSE 10293
9839: GO 9841
9841: DISABLE
9842: LD_INT 0
9844: PPUSH
9845: PPUSH
9846: PPUSH
9847: PPUSH
// begin repeat wait ( 0 0$1 ) ;
9848: LD_INT 35
9850: PPUSH
9851: CALL_OW 67
// un := FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
9855: LD_ADDR_VAR 0 1
9859: PUSH
9860: LD_INT 7
9862: PPUSH
9863: LD_INT 22
9865: PUSH
9866: LD_INT 1
9868: PUSH
9869: EMPTY
9870: LIST
9871: LIST
9872: PUSH
9873: LD_INT 3
9875: PUSH
9876: LD_INT 24
9878: PUSH
9879: LD_INT 1000
9881: PUSH
9882: EMPTY
9883: LIST
9884: LIST
9885: PUSH
9886: EMPTY
9887: LIST
9888: LIST
9889: PUSH
9890: EMPTY
9891: LIST
9892: LIST
9893: PPUSH
9894: CALL_OW 70
9898: ST_TO_ADDR
// if not un then
9899: LD_VAR 0 1
9903: NOT
9904: IFFALSE 9908
// continue ;
9906: GO 9848
// tw := NearbyTowerHasEnergy ( un [ 1 ] ) ;
9908: LD_ADDR_VAR 0 3
9912: PUSH
9913: LD_VAR 0 1
9917: PUSH
9918: LD_INT 1
9920: ARRAY
9921: PPUSH
9922: CALL 2053 0 1
9926: ST_TO_ADDR
// until tw ;
9927: LD_VAR 0 3
9931: IFFALSE 9848
// DialogueOn ;
9933: CALL_OW 6
// CenterNowOnUnits ( tw ) ;
9937: LD_VAR 0 3
9941: PPUSH
9942: CALL_OW 87
// if Lisa then
9946: LD_EXP 14
9950: IFFALSE 9978
// begin Say ( Lisa , D5-Lisa-1 ) ;
9952: LD_EXP 14
9956: PPUSH
9957: LD_STRING D5-Lisa-1
9959: PPUSH
9960: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
9964: LD_EXP 9
9968: PPUSH
9969: LD_STRING D5-JMM-1a
9971: PPUSH
9972: CALL_OW 88
// end else
9976: GO 9990
// Say ( JMM , D5-JMM-1 ) ;
9978: LD_EXP 9
9982: PPUSH
9983: LD_STRING D5-JMM-1
9985: PPUSH
9986: CALL_OW 88
// DialogueOff ;
9990: CALL_OW 7
// while ( true ) do
9994: LD_INT 1
9996: IFFALSE 10052
// begin wait ( 0 0$01 ) ;
9998: LD_INT 35
10000: PPUSH
10001: CALL_OW 67
// x := FilterUnitsExceptArea ( northElectro , [ [ f_btype , b_oil_power ] , [ f_see , 1 ] ] ) ;
10005: LD_ADDR_VAR 0 2
10009: PUSH
10010: LD_INT 8
10012: PPUSH
10013: LD_INT 30
10015: PUSH
10016: LD_INT 26
10018: PUSH
10019: EMPTY
10020: LIST
10021: LIST
10022: PUSH
10023: LD_INT 101
10025: PUSH
10026: LD_INT 1
10028: PUSH
10029: EMPTY
10030: LIST
10031: LIST
10032: PUSH
10033: EMPTY
10034: LIST
10035: LIST
10036: PPUSH
10037: CALL_OW 71
10041: ST_TO_ADDR
// if x then
10042: LD_VAR 0 2
10046: IFFALSE 10050
// break ;
10048: GO 10052
// end ;
10050: GO 9994
// CenterOnUnits ( x [ 1 ] ) ;
10052: LD_VAR 0 2
10056: PUSH
10057: LD_INT 1
10059: ARRAY
10060: PPUSH
10061: CALL_OW 85
// if Frank and GetSide ( Frank ) = 1 then
10065: LD_EXP 15
10069: PUSH
10070: LD_EXP 15
10074: PPUSH
10075: CALL_OW 255
10079: PUSH
10080: LD_INT 1
10082: EQUAL
10083: AND
10084: IFFALSE 10100
// Say ( Frank , D5a-Frank-1 ) else
10086: LD_EXP 15
10090: PPUSH
10091: LD_STRING D5a-Frank-1
10093: PPUSH
10094: CALL_OW 88
10098: GO 10154
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
10100: LD_EXP 18
10104: PUSH
10105: LD_EXP 18
10109: PPUSH
10110: CALL_OW 255
10114: PUSH
10115: LD_INT 1
10117: EQUAL
10118: AND
10119: IFFALSE 10135
// Say ( Kikuchi , D5a-Yam-1 ) else
10121: LD_EXP 18
10125: PPUSH
10126: LD_STRING D5a-Yam-1
10128: PPUSH
10129: CALL_OW 88
10133: GO 10154
// Say ( GetRandom ( sex_male ) [ 1 ] , D5a-Sol1-1 ) ;
10135: LD_INT 1
10137: PPUSH
10138: CALL 608 0 1
10142: PUSH
10143: LD_INT 1
10145: ARRAY
10146: PPUSH
10147: LD_STRING D5a-Sol1-1
10149: PPUSH
10150: CALL_OW 88
// Say ( JMM , D5a-JMM-1 ) ;
10154: LD_EXP 9
10158: PPUSH
10159: LD_STRING D5a-JMM-1
10161: PPUSH
10162: CALL_OW 88
// if Cyrus then
10166: LD_EXP 13
10170: IFFALSE 10184
// Say ( Cyrus , D5a-Cyrus-1 ) ;
10172: LD_EXP 13
10176: PPUSH
10177: LD_STRING D5a-Cyrus-1
10179: PPUSH
10180: CALL_OW 88
// x := false ;
10184: LD_ADDR_VAR 0 2
10188: PUSH
10189: LD_INT 0
10191: ST_TO_ADDR
// while ( true ) do
10192: LD_INT 1
10194: IFFALSE 10281
// begin wait ( 0 0$01 ) ;
10196: LD_INT 35
10198: PPUSH
10199: CALL_OW 67
// for i in FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) diff ru_dep_west do
10203: LD_ADDR_VAR 0 4
10207: PUSH
10208: LD_INT 2
10210: PUSH
10211: LD_INT 30
10213: PUSH
10214: LD_INT 0
10216: PUSH
10217: EMPTY
10218: LIST
10219: LIST
10220: PUSH
10221: LD_INT 30
10223: PUSH
10224: LD_INT 1
10226: PUSH
10227: EMPTY
10228: LIST
10229: LIST
10230: PUSH
10231: EMPTY
10232: LIST
10233: LIST
10234: LIST
10235: PPUSH
10236: CALL_OW 69
10240: PUSH
10241: LD_INT 1
10243: DIFF
10244: PUSH
10245: FOR_IN
10246: IFFALSE 10269
// if BaseNeedEnergy ( i ) then
10248: LD_VAR 0 4
10252: PPUSH
10253: CALL 1178 0 1
10257: IFFALSE 10267
// x := true ;
10259: LD_ADDR_VAR 0 2
10263: PUSH
10264: LD_INT 1
10266: ST_TO_ADDR
10267: GO 10245
10269: POP
10270: POP
// if x then
10271: LD_VAR 0 2
10275: IFFALSE 10279
// break ;
10277: GO 10281
// end ;
10279: GO 10192
// Say ( JMM , D5b-JMM-1 ) ;
10281: LD_EXP 9
10285: PPUSH
10286: LD_STRING D5b-JMM-1
10288: PPUSH
10289: CALL_OW 88
// end ;
10293: PPOPN 4
10295: END
// every 0 0$1 trigger time_to_end [ 1 ] < tick or FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) < 10 do
10296: LD_EXP 5
10300: PUSH
10301: LD_INT 1
10303: ARRAY
10304: PUSH
10305: LD_OWVAR 1
10309: LESS
10310: PUSH
10311: LD_INT 22
10313: PUSH
10314: LD_INT 3
10316: PUSH
10317: EMPTY
10318: LIST
10319: LIST
10320: PUSH
10321: LD_INT 21
10323: PUSH
10324: LD_INT 3
10326: PUSH
10327: EMPTY
10328: LIST
10329: LIST
10330: PUSH
10331: EMPTY
10332: LIST
10333: LIST
10334: PPUSH
10335: CALL_OW 69
10339: PUSH
10340: LD_INT 10
10342: LESS
10343: OR
10344: IFFALSE 10544
10346: GO 10348
10348: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10349: LD_INT 16
10351: PPUSH
10352: CALL_OW 301
10356: NOT
10357: IFFALSE 10380
// begin SayRadio ( Harisson , D3b-Har-3 ) ;
10359: LD_EXP 19
10363: PPUSH
10364: LD_STRING D3b-Har-3
10366: PPUSH
10367: CALL_OW 94
// ChangeMissionObjectives ( M2a ) ;
10371: LD_STRING M2a
10373: PPUSH
10374: CALL_OW 337
// end else
10378: GO 10399
// begin SayRadio ( Harisson , D3b-Har-3a ) ;
10380: LD_EXP 19
10384: PPUSH
10385: LD_STRING D3b-Har-3a
10387: PPUSH
10388: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
10392: LD_STRING M2
10394: PPUSH
10395: CALL_OW 337
// end ; can_end := true ;
10399: LD_ADDR_EXP 6
10403: PUSH
10404: LD_INT 1
10406: ST_TO_ADDR
// SetAreaMapShow ( endArea , 1 ) ;
10407: LD_INT 9
10409: PPUSH
10410: LD_INT 1
10412: PPUSH
10413: CALL_OW 424
// Wait ( 0 0$02 ) ;
10417: LD_INT 70
10419: PPUSH
10420: CALL_OW 67
// if Lisa then
10424: LD_EXP 14
10428: IFFALSE 10442
// Say ( Lisa , D3b-Lisa ) ;
10430: LD_EXP 14
10434: PPUSH
10435: LD_STRING D3b-Lisa
10437: PPUSH
10438: CALL_OW 88
// if Bobby then
10442: LD_EXP 12
10446: IFFALSE 10460
// Say ( Bobby , D3b-Bobby-3 ) ;
10448: LD_EXP 12
10452: PPUSH
10453: LD_STRING D3b-Bobby-3
10455: PPUSH
10456: CALL_OW 88
// if Cyrus then
10460: LD_EXP 13
10464: IFFALSE 10478
// Say ( Cyrus , D3b-Cyrus-3 ) ;
10466: LD_EXP 13
10470: PPUSH
10471: LD_STRING D3b-Cyrus-3
10473: PPUSH
10474: CALL_OW 88
// if Frank and GetSide ( Frank ) = 1 then
10478: LD_EXP 15
10482: PUSH
10483: LD_EXP 15
10487: PPUSH
10488: CALL_OW 255
10492: PUSH
10493: LD_INT 1
10495: EQUAL
10496: AND
10497: IFFALSE 10511
// Say ( Frank , D3b-Frank-3 ) ;
10499: LD_EXP 15
10503: PPUSH
10504: LD_STRING D3b-Frank-3
10506: PPUSH
10507: CALL_OW 88
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
10511: LD_EXP 18
10515: PUSH
10516: LD_EXP 18
10520: PPUSH
10521: CALL_OW 255
10525: PUSH
10526: LD_INT 1
10528: EQUAL
10529: AND
10530: IFFALSE 10544
// Say ( Kikuchi , D3b-Yam-4 ) ;
10532: LD_EXP 18
10536: PPUSH
10537: LD_STRING D3b-Yam-4
10539: PPUSH
10540: CALL_OW 88
// end ;
10544: END
// every 0 0$1 trigger time_to_end [ 2 ] < tick do
10545: LD_EXP 5
10549: PUSH
10550: LD_INT 2
10552: ARRAY
10553: PUSH
10554: LD_OWVAR 1
10558: LESS
10559: IFFALSE 10591
10561: GO 10563
10563: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
10564: LD_EXP 19
10568: PPUSH
10569: LD_STRING D4-Har-1
10571: PPUSH
10572: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
10576: LD_STRING M3
10578: PPUSH
10579: CALL_OW 337
// must_end := true ;
10583: LD_ADDR_EXP 7
10587: PUSH
10588: LD_INT 1
10590: ST_TO_ADDR
// end ;
10591: END
// every 0 0$01 trigger time_to_end [ 3 ] < tick do
10592: LD_EXP 5
10596: PUSH
10597: LD_INT 3
10599: ARRAY
10600: PUSH
10601: LD_OWVAR 1
10605: LESS
10606: IFFALSE 10637
10608: GO 10610
10610: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10611: LD_INT 16
10613: PPUSH
10614: CALL_OW 301
10618: NOT
10619: IFFALSE 10630
// YouLost ( TimeOut1 ) else
10621: LD_STRING TimeOut1
10623: PPUSH
10624: CALL_OW 104
10628: GO 10637
// YouLost ( TimeOut2 ) ;
10630: LD_STRING TimeOut2
10632: PPUSH
10633: CALL_OW 104
// end ;
10637: END
// every 0 0$1 trigger IsInArea ( JMM , endArea ) and can_end do var wait_on , i , tmp , m1 , m2 , m3 ;
10638: LD_EXP 9
10642: PPUSH
10643: LD_INT 9
10645: PPUSH
10646: CALL_OW 308
10650: PUSH
10651: LD_EXP 6
10655: AND
10656: IFFALSE 11744
10658: GO 10660
10660: DISABLE
10661: LD_INT 0
10663: PPUSH
10664: PPUSH
10665: PPUSH
10666: PPUSH
10667: PPUSH
10668: PPUSH
// begin wait_on := false ;
10669: LD_ADDR_VAR 0 1
10673: PUSH
10674: LD_INT 0
10676: ST_TO_ADDR
// if Count ( FilterPeople ( 1 ) ) > Count ( FilterPeopleArea ( 1 , endArea ) ^ FilterDriversArea ( 1 , endArea ) ) then
10677: LD_INT 1
10679: PPUSH
10680: CALL 1255 0 1
10684: PPUSH
10685: CALL 34439 0 1
10689: PUSH
10690: LD_INT 1
10692: PPUSH
10693: LD_INT 9
10695: PPUSH
10696: CALL 1346 0 2
10700: PUSH
10701: LD_INT 1
10703: PPUSH
10704: LD_INT 9
10706: PPUSH
10707: CALL 1393 0 2
10711: ADD
10712: PPUSH
10713: CALL 34439 0 1
10717: GREATER
10718: IFFALSE 10741
// if Query ( Q1 ) = 1 then
10720: LD_STRING Q1
10722: PPUSH
10723: CALL_OW 97
10727: PUSH
10728: LD_INT 1
10730: EQUAL
10731: IFFALSE 10741
// wait_on := true ;
10733: LD_ADDR_VAR 0 1
10737: PUSH
10738: LD_INT 1
10740: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
10741: LD_INT 35
10743: PPUSH
10744: CALL_OW 67
// until Count ( FilterPeople ( 1 ) ) = Count ( FilterPeopleArea ( 1 , endArea ) union FilterDriversArea ( 1 , endArea ) ) ;
10748: LD_INT 1
10750: PPUSH
10751: CALL 1255 0 1
10755: PPUSH
10756: CALL 34439 0 1
10760: PUSH
10761: LD_INT 1
10763: PPUSH
10764: LD_INT 9
10766: PPUSH
10767: CALL 1346 0 2
10771: PUSH
10772: LD_INT 1
10774: PPUSH
10775: LD_INT 9
10777: PPUSH
10778: CALL 1393 0 2
10782: UNION
10783: PPUSH
10784: CALL 34439 0 1
10788: EQUAL
10789: IFFALSE 10741
// DialogueOn ;
10791: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
10795: LD_EXP 9
10799: PPUSH
10800: CALL_OW 87
// Say ( JMM , D6-JMM-1 ) ;
10804: LD_EXP 9
10808: PPUSH
10809: LD_STRING D6-JMM-1
10811: PPUSH
10812: CALL_OW 88
// SayRadio ( Harisson , D6-Har-1 ) ;
10816: LD_EXP 19
10820: PPUSH
10821: LD_STRING D6-Har-1
10823: PPUSH
10824: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
10828: LD_EXP 9
10832: PPUSH
10833: LD_STRING D6-JMM-2
10835: PPUSH
10836: CALL_OW 88
// SayRadio ( Harisson , D6-Har-2 ) ;
10840: LD_EXP 19
10844: PPUSH
10845: LD_STRING D6-Har-2
10847: PPUSH
10848: CALL_OW 94
// Say ( JMM , D6-JMM-3 ) ;
10852: LD_EXP 9
10856: PPUSH
10857: LD_STRING D6-JMM-3
10859: PPUSH
10860: CALL_OW 88
// SayRadio ( Harisson , D6-Har-3 ) ;
10864: LD_EXP 19
10868: PPUSH
10869: LD_STRING D6-Har-3
10871: PPUSH
10872: CALL_OW 94
// Say ( JMM , D6-JMM-4 ) ;
10876: LD_EXP 9
10880: PPUSH
10881: LD_STRING D6-JMM-4
10883: PPUSH
10884: CALL_OW 88
// SayRadio ( Harisson , D6-Har-4 ) ;
10888: LD_EXP 19
10892: PPUSH
10893: LD_STRING D6-Har-4
10895: PPUSH
10896: CALL_OW 94
// Say ( JMM , D6-JMM-5 ) ;
10900: LD_EXP 9
10904: PPUSH
10905: LD_STRING D6-JMM-5
10907: PPUSH
10908: CALL_OW 88
// DialogueOff ;
10912: CALL_OW 7
// m1 := false ;
10916: LD_ADDR_VAR 0 4
10920: PUSH
10921: LD_INT 0
10923: ST_TO_ADDR
// m2 := false ;
10924: LD_ADDR_VAR 0 5
10928: PUSH
10929: LD_INT 0
10931: ST_TO_ADDR
// m3 := false ;
10932: LD_ADDR_VAR 0 6
10936: PUSH
10937: LD_INT 0
10939: ST_TO_ADDR
// tmp := FilterBuildings ( 3 ) ;
10940: LD_ADDR_VAR 0 3
10944: PUSH
10945: LD_INT 3
10947: PPUSH
10948: CALL 1524 0 1
10952: ST_TO_ADDR
// if tmp >= 35 then
10953: LD_VAR 0 3
10957: PUSH
10958: LD_INT 35
10960: GREATEREQUAL
10961: IFFALSE 10998
// begin AddMedal ( Destroy1 , - 1 ) ;
10963: LD_STRING Destroy1
10965: PPUSH
10966: LD_INT 1
10968: NEG
10969: PPUSH
10970: CALL_OW 101
// AddMedal ( Destroy2 , - 1 ) ;
10974: LD_STRING Destroy2
10976: PPUSH
10977: LD_INT 1
10979: NEG
10980: PPUSH
10981: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
10985: LD_STRING Destroy3
10987: PPUSH
10988: LD_INT 1
10990: NEG
10991: PPUSH
10992: CALL_OW 101
// end else
10996: GO 11109
// begin AddMedal ( Destroy1 , 1 ) ;
10998: LD_STRING Destroy1
11000: PPUSH
11001: LD_INT 1
11003: PPUSH
11004: CALL_OW 101
// m1 := true ;
11008: LD_ADDR_VAR 0 4
11012: PUSH
11013: LD_INT 1
11015: ST_TO_ADDR
// if tmp >= 25 then
11016: LD_VAR 0 3
11020: PUSH
11021: LD_INT 25
11023: GREATEREQUAL
11024: IFFALSE 11050
// begin AddMedal ( Destroy2 , - 1 ) ;
11026: LD_STRING Destroy2
11028: PPUSH
11029: LD_INT 1
11031: NEG
11032: PPUSH
11033: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
11037: LD_STRING Destroy3
11039: PPUSH
11040: LD_INT 1
11042: NEG
11043: PPUSH
11044: CALL_OW 101
// end else
11048: GO 11109
// begin AddMedal ( Destroy2 , 1 ) ;
11050: LD_STRING Destroy2
11052: PPUSH
11053: LD_INT 1
11055: PPUSH
11056: CALL_OW 101
// m2 := true ;
11060: LD_ADDR_VAR 0 5
11064: PUSH
11065: LD_INT 1
11067: ST_TO_ADDR
// if tmp >= 15 then
11068: LD_VAR 0 3
11072: PUSH
11073: LD_INT 15
11075: GREATEREQUAL
11076: IFFALSE 11091
// AddMedal ( Destroy3 , - 1 ) else
11078: LD_STRING Destroy3
11080: PPUSH
11081: LD_INT 1
11083: NEG
11084: PPUSH
11085: CALL_OW 101
11089: GO 11109
// begin AddMedal ( Destroy3 , 1 ) ;
11091: LD_STRING Destroy3
11093: PPUSH
11094: LD_INT 1
11096: PPUSH
11097: CALL_OW 101
// m3 := true ;
11101: LD_ADDR_VAR 0 6
11105: PUSH
11106: LD_INT 1
11108: ST_TO_ADDR
// end ; end ; end ; if tick <= 32 32$00 then
11109: LD_OWVAR 1
11113: PUSH
11114: LD_INT 67200
11116: LESSEQUAL
11117: IFFALSE 11126
// SetAchievement ( ACH_ASPEED_7 ) ;
11119: LD_STRING ACH_ASPEED_7
11121: PPUSH
11122: CALL_OW 543
// if m1 and m2 and m3 and Difficulty >= 3 then
11126: LD_VAR 0 4
11130: PUSH
11131: LD_VAR 0 5
11135: AND
11136: PUSH
11137: LD_VAR 0 6
11141: AND
11142: PUSH
11143: LD_OWVAR 67
11147: PUSH
11148: LD_INT 3
11150: GREATEREQUAL
11151: AND
11152: IFFALSE 11164
// SetAchievementEX ( ACH_AMER , 7 ) ;
11154: LD_STRING ACH_AMER
11156: PPUSH
11157: LD_INT 7
11159: PPUSH
11160: CALL_OW 564
// GiveMedals ( MAIN ) ;
11164: LD_STRING MAIN
11166: PPUSH
11167: CALL_OW 102
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] ] ) ;
11171: LD_ADDR_VAR 0 3
11175: PUSH
11176: LD_INT 22
11178: PUSH
11179: LD_INT 1
11181: PUSH
11182: EMPTY
11183: LIST
11184: LIST
11185: PUSH
11186: LD_INT 23
11188: PUSH
11189: LD_INT 1
11191: PUSH
11192: EMPTY
11193: LIST
11194: LIST
11195: PUSH
11196: EMPTY
11197: LIST
11198: LIST
11199: PPUSH
11200: CALL_OW 69
11204: ST_TO_ADDR
// RewardPeople ( tmp ) ;
11205: LD_VAR 0 3
11209: PPUSH
11210: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
11214: LD_EXP 9
11218: PPUSH
11219: LD_EXP 3
11223: PUSH
11224: LD_STRING JMM
11226: STR
11227: PPUSH
11228: CALL_OW 38
// if Brown in tmp then
11232: LD_EXP 10
11236: PUSH
11237: LD_VAR 0 3
11241: IN
11242: IFFALSE 11262
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
11244: LD_EXP 10
11248: PPUSH
11249: LD_EXP 3
11253: PUSH
11254: LD_STRING Brown
11256: STR
11257: PPUSH
11258: CALL_OW 38
// if Donaldson in tmp then
11262: LD_EXP 11
11266: PUSH
11267: LD_VAR 0 3
11271: IN
11272: IFFALSE 11292
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
11274: LD_EXP 11
11278: PPUSH
11279: LD_EXP 3
11283: PUSH
11284: LD_STRING Donaldson
11286: STR
11287: PPUSH
11288: CALL_OW 38
// if Bobby in tmp then
11292: LD_EXP 12
11296: PUSH
11297: LD_VAR 0 3
11301: IN
11302: IFFALSE 11322
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
11304: LD_EXP 12
11308: PPUSH
11309: LD_EXP 3
11313: PUSH
11314: LD_STRING Bobby
11316: STR
11317: PPUSH
11318: CALL_OW 38
// if Cyrus in tmp then
11322: LD_EXP 13
11326: PUSH
11327: LD_VAR 0 3
11331: IN
11332: IFFALSE 11352
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
11334: LD_EXP 13
11338: PPUSH
11339: LD_EXP 3
11343: PUSH
11344: LD_STRING Cyrus
11346: STR
11347: PPUSH
11348: CALL_OW 38
// if Lisa in tmp then
11352: LD_EXP 14
11356: PUSH
11357: LD_VAR 0 3
11361: IN
11362: IFFALSE 11382
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
11364: LD_EXP 14
11368: PPUSH
11369: LD_EXP 3
11373: PUSH
11374: LD_STRING Lisa
11376: STR
11377: PPUSH
11378: CALL_OW 38
// if Frank in tmp then
11382: LD_EXP 15
11386: PUSH
11387: LD_VAR 0 3
11391: IN
11392: IFFALSE 11412
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
11394: LD_EXP 15
11398: PPUSH
11399: LD_EXP 3
11403: PUSH
11404: LD_STRING Frank
11406: STR
11407: PPUSH
11408: CALL_OW 38
// if Gladstone in tmp then
11412: LD_EXP 16
11416: PUSH
11417: LD_VAR 0 3
11421: IN
11422: IFFALSE 11442
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
11424: LD_EXP 16
11428: PPUSH
11429: LD_EXP 3
11433: PUSH
11434: LD_STRING Gladstone
11436: STR
11437: PPUSH
11438: CALL_OW 38
// if Khatam in tmp then
11442: LD_EXP 17
11446: PUSH
11447: LD_VAR 0 3
11451: IN
11452: IFFALSE 11472
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
11454: LD_EXP 17
11458: PPUSH
11459: LD_EXP 3
11463: PUSH
11464: LD_STRING Khatam
11466: STR
11467: PPUSH
11468: CALL_OW 38
// if Kikuchi in tmp then
11472: LD_EXP 18
11476: PUSH
11477: LD_VAR 0 3
11481: IN
11482: IFFALSE 11509
// begin ToLua ( enableBioCharacter(BIO_YAMO) ) ;
11484: LD_STRING enableBioCharacter(BIO_YAMO)
11486: PPUSH
11487: CALL_OW 559
// SaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
11491: LD_EXP 18
11495: PPUSH
11496: LD_EXP 3
11500: PUSH
11501: LD_STRING Kikuchi
11503: STR
11504: PPUSH
11505: CALL_OW 38
// end ; SaveCharacters ( tmp diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] , mission_prefix & others ) ;
11509: LD_VAR 0 3
11513: PUSH
11514: LD_EXP 9
11518: PUSH
11519: LD_EXP 10
11523: PUSH
11524: LD_EXP 11
11528: PUSH
11529: LD_EXP 12
11533: PUSH
11534: LD_EXP 13
11538: PUSH
11539: LD_EXP 14
11543: PUSH
11544: LD_EXP 15
11548: PUSH
11549: LD_EXP 16
11553: PUSH
11554: LD_EXP 18
11558: PUSH
11559: LD_EXP 17
11563: PUSH
11564: EMPTY
11565: LIST
11566: LIST
11567: LIST
11568: LIST
11569: LIST
11570: LIST
11571: LIST
11572: LIST
11573: LIST
11574: LIST
11575: DIFF
11576: PPUSH
11577: LD_EXP 3
11581: PUSH
11582: LD_STRING others
11584: STR
11585: PPUSH
11586: CALL_OW 38
// SaveVariable ( tick , 07_time ) ;
11590: LD_OWVAR 1
11594: PPUSH
11595: LD_STRING 07_time
11597: PPUSH
11598: CALL_OW 39
// tmp := [ ] ;
11602: LD_ADDR_VAR 0 3
11606: PUSH
11607: EMPTY
11608: ST_TO_ADDR
// for i in FilterUnitsInArea ( endArea , [ [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] ] ] ) do
11609: LD_ADDR_VAR 0 2
11613: PUSH
11614: LD_INT 9
11616: PPUSH
11617: LD_INT 22
11619: PUSH
11620: LD_INT 1
11622: PUSH
11623: EMPTY
11624: LIST
11625: LIST
11626: PUSH
11627: LD_INT 23
11629: PUSH
11630: LD_INT 1
11632: PUSH
11633: EMPTY
11634: LIST
11635: LIST
11636: PUSH
11637: LD_INT 21
11639: PUSH
11640: LD_INT 2
11642: PUSH
11643: EMPTY
11644: LIST
11645: LIST
11646: PUSH
11647: EMPTY
11648: LIST
11649: LIST
11650: LIST
11651: PUSH
11652: EMPTY
11653: LIST
11654: PPUSH
11655: CALL_OW 70
11659: PUSH
11660: FOR_IN
11661: IFFALSE 11726
// tmp := Join ( tmp , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ) ;
11663: LD_ADDR_VAR 0 3
11667: PUSH
11668: LD_VAR 0 3
11672: PPUSH
11673: LD_VAR 0 2
11677: PPUSH
11678: CALL_OW 265
11682: PUSH
11683: LD_VAR 0 2
11687: PPUSH
11688: CALL_OW 262
11692: PUSH
11693: LD_VAR 0 2
11697: PPUSH
11698: CALL_OW 263
11702: PUSH
11703: LD_VAR 0 2
11707: PPUSH
11708: CALL_OW 264
11712: PUSH
11713: EMPTY
11714: LIST
11715: LIST
11716: LIST
11717: LIST
11718: PPUSH
11719: CALL 69629 0 2
11723: ST_TO_ADDR
11724: GO 11660
11726: POP
11727: POP
// SaveVariable ( tmp , 07_vehicles ) ;
11728: LD_VAR 0 3
11732: PPUSH
11733: LD_STRING 07_vehicles
11735: PPUSH
11736: CALL_OW 39
// YouWin ;
11740: CALL_OW 103
// end ; end_of_file
11744: PPOPN 6
11746: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
11747: LD_VAR 0 1
11751: PPUSH
11752: CALL 28048 0 1
// if un = JMM then
11756: LD_VAR 0 1
11760: PUSH
11761: LD_EXP 9
11765: EQUAL
11766: IFFALSE 11775
// YouLost ( JMM ) ;
11768: LD_STRING JMM
11770: PPUSH
11771: CALL_OW 104
// if GetType ( un ) = unit_building then
11775: LD_VAR 0 1
11779: PPUSH
11780: CALL_OW 247
11784: PUSH
11785: LD_INT 3
11787: EQUAL
11788: IFFALSE 11804
// buildings_counter := buildings_counter + 1 ;
11790: LD_ADDR_EXP 4
11794: PUSH
11795: LD_EXP 4
11799: PUSH
11800: LD_INT 1
11802: PLUS
11803: ST_TO_ADDR
// if un in FilterUnitsInArea ( baseArea , [ f_or , [ f_btype , b_turret ] , [ f_btype , b_bunker ] ] ) then
11804: LD_VAR 0 1
11808: PUSH
11809: LD_INT 6
11811: PPUSH
11812: LD_INT 2
11814: PUSH
11815: LD_INT 30
11817: PUSH
11818: LD_INT 33
11820: PUSH
11821: EMPTY
11822: LIST
11823: LIST
11824: PUSH
11825: LD_INT 30
11827: PUSH
11828: LD_INT 32
11830: PUSH
11831: EMPTY
11832: LIST
11833: LIST
11834: PUSH
11835: EMPTY
11836: LIST
11837: LIST
11838: LIST
11839: PPUSH
11840: CALL_OW 70
11844: IN
11845: IFFALSE 11904
// ru_rebuild_list := ru_rebuild_list ^ [ GetBType ( un ) , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ;
11847: LD_ADDR_EXP 20
11851: PUSH
11852: LD_EXP 20
11856: PUSH
11857: LD_VAR 0 1
11861: PPUSH
11862: CALL_OW 266
11866: PUSH
11867: LD_VAR 0 1
11871: PPUSH
11872: CALL_OW 250
11876: PUSH
11877: LD_VAR 0 1
11881: PPUSH
11882: CALL_OW 251
11886: PUSH
11887: LD_VAR 0 1
11891: PPUSH
11892: CALL_OW 254
11896: PUSH
11897: EMPTY
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: ADD
11903: ST_TO_ADDR
// if un = ru_dep_main then
11904: LD_VAR 0 1
11908: PUSH
11909: LD_INT 16
11911: EQUAL
11912: IFFALSE 11921
// ChangeMissionObjectives ( M1a ) ;
11914: LD_STRING M1a
11916: PPUSH
11917: CALL_OW 337
// if GetType ( un ) = unit_human and GetSide ( un ) = 3 then
11921: LD_VAR 0 1
11925: PPUSH
11926: CALL_OW 247
11930: PUSH
11931: LD_INT 1
11933: EQUAL
11934: PUSH
11935: LD_VAR 0 1
11939: PPUSH
11940: CALL_OW 255
11944: PUSH
11945: LD_INT 3
11947: EQUAL
11948: AND
11949: IFFALSE 11965
// kill_counter := kill_counter + 1 ;
11951: LD_ADDR_EXP 8
11955: PUSH
11956: LD_EXP 8
11960: PUSH
11961: LD_INT 1
11963: PLUS
11964: ST_TO_ADDR
// end ;
11965: PPOPN 1
11967: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
11968: LD_VAR 0 1
11972: PPUSH
11973: LD_VAR 0 2
11977: PPUSH
11978: CALL 28168 0 2
// end ;
11982: PPOPN 2
11984: END
// on UnitGoesToRed ( un ) do begin if GetBType ( un ) = b_bunker and GetTag ( un ) = 7 then
11985: LD_VAR 0 1
11989: PPUSH
11990: CALL_OW 266
11994: PUSH
11995: LD_INT 32
11997: EQUAL
11998: PUSH
11999: LD_VAR 0 1
12003: PPUSH
12004: CALL_OW 110
12008: PUSH
12009: LD_INT 7
12011: EQUAL
12012: AND
12013: IFFALSE 12027
// SetTag ( un , 0 ) ;
12015: LD_VAR 0 1
12019: PPUSH
12020: LD_INT 0
12022: PPUSH
12023: CALL_OW 109
// end ;
12027: PPOPN 1
12029: END
// on BuildingStarted ( b , builder ) do var i ;
12030: LD_INT 0
12032: PPUSH
// begin if GetSide ( b ) = 3 then
12033: LD_VAR 0 1
12037: PPUSH
12038: CALL_OW 255
12042: PUSH
12043: LD_INT 3
12045: EQUAL
12046: IFFALSE 12086
// for i = 1 to 4 do
12048: LD_ADDR_VAR 0 3
12052: PUSH
12053: DOUBLE
12054: LD_INT 1
12056: DEC
12057: ST_TO_ADDR
12058: LD_INT 4
12060: PUSH
12061: FOR_TO
12062: IFFALSE 12084
// ru_rebuild_list := Delete ( ru_rebuild_list , 1 ) ;
12064: LD_ADDR_EXP 20
12068: PUSH
12069: LD_EXP 20
12073: PPUSH
12074: LD_INT 1
12076: PPUSH
12077: CALL_OW 3
12081: ST_TO_ADDR
12082: GO 12061
12084: POP
12085: POP
// end ;
12086: PPOPN 3
12088: END
// on BuildingComplete ( b ) do if GetBType ( b ) in [ b_bunker , b_turret ] then
12089: LD_VAR 0 1
12093: PPUSH
12094: CALL_OW 266
12098: PUSH
12099: LD_INT 32
12101: PUSH
12102: LD_INT 33
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: IN
12109: IFFALSE 12123
// ComPlaceWeapon ( b , ru_gatling_gun ) ;
12111: LD_VAR 0 1
12115: PPUSH
12116: LD_INT 43
12118: PPUSH
12119: CALL_OW 148
12123: PPOPN 1
12125: END
// on LeaveBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
12126: LD_VAR 0 1
12130: PUSH
12131: LD_INT 22
12133: PUSH
12134: LD_INT 3
12136: PUSH
12137: EMPTY
12138: LIST
12139: LIST
12140: PUSH
12141: LD_INT 2
12143: PUSH
12144: LD_INT 30
12146: PUSH
12147: LD_INT 31
12149: PUSH
12150: EMPTY
12151: LIST
12152: LIST
12153: PUSH
12154: LD_INT 30
12156: PUSH
12157: LD_INT 32
12159: PUSH
12160: EMPTY
12161: LIST
12162: LIST
12163: PUSH
12164: EMPTY
12165: LIST
12166: LIST
12167: LIST
12168: PUSH
12169: EMPTY
12170: LIST
12171: LIST
12172: PPUSH
12173: CALL_OW 69
12177: IN
12178: IFFALSE 12200
// GoToAnotherTower ( un , b , 134 , 136 ) ;
12180: LD_VAR 0 2
12184: PPUSH
12185: LD_VAR 0 1
12189: PPUSH
12190: LD_INT 134
12192: PPUSH
12193: LD_INT 136
12195: PPUSH
12196: CALL 838 0 4
// end ;
12200: PPOPN 2
12202: END
// on EnterBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) then
12203: LD_VAR 0 1
12207: PUSH
12208: LD_INT 22
12210: PUSH
12211: LD_INT 3
12213: PUSH
12214: EMPTY
12215: LIST
12216: LIST
12217: PUSH
12218: LD_INT 30
12220: PUSH
12221: LD_INT 32
12223: PUSH
12224: EMPTY
12225: LIST
12226: LIST
12227: PUSH
12228: EMPTY
12229: LIST
12230: LIST
12231: PPUSH
12232: CALL_OW 69
12236: IN
12237: IFFALSE 12251
// SetTag ( b , 0 ) ;
12239: LD_VAR 0 1
12243: PPUSH
12244: LD_INT 0
12246: PPUSH
12247: CALL_OW 109
// end ; end_of_file end_of_file
12251: PPOPN 2
12253: END
// export globalGameSaveCounter ; every 0 0$1 do
12254: GO 12256
12256: DISABLE
// begin enable ;
12257: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
12258: LD_STRING updateTimer(
12260: PUSH
12261: LD_OWVAR 1
12265: STR
12266: PUSH
12267: LD_STRING );
12269: STR
12270: PPUSH
12271: CALL_OW 559
// end ;
12275: END
// every 0 0$1 do
12276: GO 12278
12278: DISABLE
// begin globalGameSaveCounter := 0 ;
12279: LD_ADDR_EXP 21
12283: PUSH
12284: LD_INT 0
12286: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
12287: LD_STRING setGameSaveCounter(0)
12289: PPUSH
12290: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
12294: LD_STRING initStreamRollete();
12296: PPUSH
12297: CALL_OW 559
// InitStreamMode ;
12301: CALL 13627 0 0
// DefineStreamItems ( false ) ;
12305: LD_INT 0
12307: PPUSH
12308: CALL 14091 0 1
// end ;
12312: END
// export function SOS_MapStart ( ) ; begin
12313: LD_INT 0
12315: PPUSH
// if streamModeActive then
12316: LD_EXP 22
12320: IFFALSE 12329
// DefineStreamItems ( true ) ;
12322: LD_INT 1
12324: PPUSH
12325: CALL 14091 0 1
// UpdateLuaVariables ( ) ;
12329: CALL 12346 0 0
// UpdateFactoryWaypoints ( ) ;
12333: CALL 26952 0 0
// UpdateWarehouseGatheringPoints ( ) ;
12337: CALL 27209 0 0
// end ;
12341: LD_VAR 0 1
12345: RET
// function UpdateLuaVariables ( ) ; begin
12346: LD_INT 0
12348: PPUSH
// if globalGameSaveCounter then
12349: LD_EXP 21
12353: IFFALSE 12387
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
12355: LD_ADDR_EXP 21
12359: PUSH
12360: LD_EXP 21
12364: PPUSH
12365: CALL 70990 0 1
12369: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
12370: LD_STRING setGameSaveCounter(
12372: PUSH
12373: LD_EXP 21
12377: STR
12378: PUSH
12379: LD_STRING )
12381: STR
12382: PPUSH
12383: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
12387: LD_STRING setGameDifficulty(
12389: PUSH
12390: LD_OWVAR 67
12394: STR
12395: PUSH
12396: LD_STRING )
12398: STR
12399: PPUSH
12400: CALL_OW 559
// end ;
12404: LD_VAR 0 1
12408: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
12409: LD_INT 0
12411: PPUSH
// if p2 = stream_mode then
12412: LD_VAR 0 2
12416: PUSH
12417: LD_INT 100
12419: EQUAL
12420: IFFALSE 13423
// begin if not StreamModeActive then
12422: LD_EXP 22
12426: NOT
12427: IFFALSE 12437
// StreamModeActive := true ;
12429: LD_ADDR_EXP 22
12433: PUSH
12434: LD_INT 1
12436: ST_TO_ADDR
// if p3 = 0 then
12437: LD_VAR 0 3
12441: PUSH
12442: LD_INT 0
12444: EQUAL
12445: IFFALSE 12451
// InitStreamMode ;
12447: CALL 13627 0 0
// if p3 = 1 then
12451: LD_VAR 0 3
12455: PUSH
12456: LD_INT 1
12458: EQUAL
12459: IFFALSE 12469
// sRocket := true ;
12461: LD_ADDR_EXP 27
12465: PUSH
12466: LD_INT 1
12468: ST_TO_ADDR
// if p3 = 2 then
12469: LD_VAR 0 3
12473: PUSH
12474: LD_INT 2
12476: EQUAL
12477: IFFALSE 12487
// sSpeed := true ;
12479: LD_ADDR_EXP 26
12483: PUSH
12484: LD_INT 1
12486: ST_TO_ADDR
// if p3 = 3 then
12487: LD_VAR 0 3
12491: PUSH
12492: LD_INT 3
12494: EQUAL
12495: IFFALSE 12505
// sEngine := true ;
12497: LD_ADDR_EXP 28
12501: PUSH
12502: LD_INT 1
12504: ST_TO_ADDR
// if p3 = 4 then
12505: LD_VAR 0 3
12509: PUSH
12510: LD_INT 4
12512: EQUAL
12513: IFFALSE 12523
// sSpec := true ;
12515: LD_ADDR_EXP 25
12519: PUSH
12520: LD_INT 1
12522: ST_TO_ADDR
// if p3 = 5 then
12523: LD_VAR 0 3
12527: PUSH
12528: LD_INT 5
12530: EQUAL
12531: IFFALSE 12541
// sLevel := true ;
12533: LD_ADDR_EXP 29
12537: PUSH
12538: LD_INT 1
12540: ST_TO_ADDR
// if p3 = 6 then
12541: LD_VAR 0 3
12545: PUSH
12546: LD_INT 6
12548: EQUAL
12549: IFFALSE 12559
// sArmoury := true ;
12551: LD_ADDR_EXP 30
12555: PUSH
12556: LD_INT 1
12558: ST_TO_ADDR
// if p3 = 7 then
12559: LD_VAR 0 3
12563: PUSH
12564: LD_INT 7
12566: EQUAL
12567: IFFALSE 12577
// sRadar := true ;
12569: LD_ADDR_EXP 31
12573: PUSH
12574: LD_INT 1
12576: ST_TO_ADDR
// if p3 = 8 then
12577: LD_VAR 0 3
12581: PUSH
12582: LD_INT 8
12584: EQUAL
12585: IFFALSE 12595
// sBunker := true ;
12587: LD_ADDR_EXP 32
12591: PUSH
12592: LD_INT 1
12594: ST_TO_ADDR
// if p3 = 9 then
12595: LD_VAR 0 3
12599: PUSH
12600: LD_INT 9
12602: EQUAL
12603: IFFALSE 12613
// sHack := true ;
12605: LD_ADDR_EXP 33
12609: PUSH
12610: LD_INT 1
12612: ST_TO_ADDR
// if p3 = 10 then
12613: LD_VAR 0 3
12617: PUSH
12618: LD_INT 10
12620: EQUAL
12621: IFFALSE 12631
// sFire := true ;
12623: LD_ADDR_EXP 34
12627: PUSH
12628: LD_INT 1
12630: ST_TO_ADDR
// if p3 = 11 then
12631: LD_VAR 0 3
12635: PUSH
12636: LD_INT 11
12638: EQUAL
12639: IFFALSE 12649
// sRefresh := true ;
12641: LD_ADDR_EXP 35
12645: PUSH
12646: LD_INT 1
12648: ST_TO_ADDR
// if p3 = 12 then
12649: LD_VAR 0 3
12653: PUSH
12654: LD_INT 12
12656: EQUAL
12657: IFFALSE 12667
// sExp := true ;
12659: LD_ADDR_EXP 36
12663: PUSH
12664: LD_INT 1
12666: ST_TO_ADDR
// if p3 = 13 then
12667: LD_VAR 0 3
12671: PUSH
12672: LD_INT 13
12674: EQUAL
12675: IFFALSE 12685
// sDepot := true ;
12677: LD_ADDR_EXP 37
12681: PUSH
12682: LD_INT 1
12684: ST_TO_ADDR
// if p3 = 14 then
12685: LD_VAR 0 3
12689: PUSH
12690: LD_INT 14
12692: EQUAL
12693: IFFALSE 12703
// sFlag := true ;
12695: LD_ADDR_EXP 38
12699: PUSH
12700: LD_INT 1
12702: ST_TO_ADDR
// if p3 = 15 then
12703: LD_VAR 0 3
12707: PUSH
12708: LD_INT 15
12710: EQUAL
12711: IFFALSE 12721
// sKamikadze := true ;
12713: LD_ADDR_EXP 46
12717: PUSH
12718: LD_INT 1
12720: ST_TO_ADDR
// if p3 = 16 then
12721: LD_VAR 0 3
12725: PUSH
12726: LD_INT 16
12728: EQUAL
12729: IFFALSE 12739
// sTroll := true ;
12731: LD_ADDR_EXP 47
12735: PUSH
12736: LD_INT 1
12738: ST_TO_ADDR
// if p3 = 17 then
12739: LD_VAR 0 3
12743: PUSH
12744: LD_INT 17
12746: EQUAL
12747: IFFALSE 12757
// sSlow := true ;
12749: LD_ADDR_EXP 48
12753: PUSH
12754: LD_INT 1
12756: ST_TO_ADDR
// if p3 = 18 then
12757: LD_VAR 0 3
12761: PUSH
12762: LD_INT 18
12764: EQUAL
12765: IFFALSE 12775
// sLack := true ;
12767: LD_ADDR_EXP 49
12771: PUSH
12772: LD_INT 1
12774: ST_TO_ADDR
// if p3 = 19 then
12775: LD_VAR 0 3
12779: PUSH
12780: LD_INT 19
12782: EQUAL
12783: IFFALSE 12793
// sTank := true ;
12785: LD_ADDR_EXP 51
12789: PUSH
12790: LD_INT 1
12792: ST_TO_ADDR
// if p3 = 20 then
12793: LD_VAR 0 3
12797: PUSH
12798: LD_INT 20
12800: EQUAL
12801: IFFALSE 12811
// sRemote := true ;
12803: LD_ADDR_EXP 52
12807: PUSH
12808: LD_INT 1
12810: ST_TO_ADDR
// if p3 = 21 then
12811: LD_VAR 0 3
12815: PUSH
12816: LD_INT 21
12818: EQUAL
12819: IFFALSE 12829
// sPowell := true ;
12821: LD_ADDR_EXP 53
12825: PUSH
12826: LD_INT 1
12828: ST_TO_ADDR
// if p3 = 22 then
12829: LD_VAR 0 3
12833: PUSH
12834: LD_INT 22
12836: EQUAL
12837: IFFALSE 12847
// sTeleport := true ;
12839: LD_ADDR_EXP 56
12843: PUSH
12844: LD_INT 1
12846: ST_TO_ADDR
// if p3 = 23 then
12847: LD_VAR 0 3
12851: PUSH
12852: LD_INT 23
12854: EQUAL
12855: IFFALSE 12865
// sOilTower := true ;
12857: LD_ADDR_EXP 58
12861: PUSH
12862: LD_INT 1
12864: ST_TO_ADDR
// if p3 = 24 then
12865: LD_VAR 0 3
12869: PUSH
12870: LD_INT 24
12872: EQUAL
12873: IFFALSE 12883
// sShovel := true ;
12875: LD_ADDR_EXP 59
12879: PUSH
12880: LD_INT 1
12882: ST_TO_ADDR
// if p3 = 25 then
12883: LD_VAR 0 3
12887: PUSH
12888: LD_INT 25
12890: EQUAL
12891: IFFALSE 12901
// sSheik := true ;
12893: LD_ADDR_EXP 60
12897: PUSH
12898: LD_INT 1
12900: ST_TO_ADDR
// if p3 = 26 then
12901: LD_VAR 0 3
12905: PUSH
12906: LD_INT 26
12908: EQUAL
12909: IFFALSE 12919
// sEarthquake := true ;
12911: LD_ADDR_EXP 62
12915: PUSH
12916: LD_INT 1
12918: ST_TO_ADDR
// if p3 = 27 then
12919: LD_VAR 0 3
12923: PUSH
12924: LD_INT 27
12926: EQUAL
12927: IFFALSE 12937
// sAI := true ;
12929: LD_ADDR_EXP 63
12933: PUSH
12934: LD_INT 1
12936: ST_TO_ADDR
// if p3 = 28 then
12937: LD_VAR 0 3
12941: PUSH
12942: LD_INT 28
12944: EQUAL
12945: IFFALSE 12955
// sCargo := true ;
12947: LD_ADDR_EXP 66
12951: PUSH
12952: LD_INT 1
12954: ST_TO_ADDR
// if p3 = 29 then
12955: LD_VAR 0 3
12959: PUSH
12960: LD_INT 29
12962: EQUAL
12963: IFFALSE 12973
// sDLaser := true ;
12965: LD_ADDR_EXP 67
12969: PUSH
12970: LD_INT 1
12972: ST_TO_ADDR
// if p3 = 30 then
12973: LD_VAR 0 3
12977: PUSH
12978: LD_INT 30
12980: EQUAL
12981: IFFALSE 12991
// sExchange := true ;
12983: LD_ADDR_EXP 68
12987: PUSH
12988: LD_INT 1
12990: ST_TO_ADDR
// if p3 = 31 then
12991: LD_VAR 0 3
12995: PUSH
12996: LD_INT 31
12998: EQUAL
12999: IFFALSE 13009
// sFac := true ;
13001: LD_ADDR_EXP 69
13005: PUSH
13006: LD_INT 1
13008: ST_TO_ADDR
// if p3 = 32 then
13009: LD_VAR 0 3
13013: PUSH
13014: LD_INT 32
13016: EQUAL
13017: IFFALSE 13027
// sPower := true ;
13019: LD_ADDR_EXP 70
13023: PUSH
13024: LD_INT 1
13026: ST_TO_ADDR
// if p3 = 33 then
13027: LD_VAR 0 3
13031: PUSH
13032: LD_INT 33
13034: EQUAL
13035: IFFALSE 13045
// sRandom := true ;
13037: LD_ADDR_EXP 71
13041: PUSH
13042: LD_INT 1
13044: ST_TO_ADDR
// if p3 = 34 then
13045: LD_VAR 0 3
13049: PUSH
13050: LD_INT 34
13052: EQUAL
13053: IFFALSE 13063
// sShield := true ;
13055: LD_ADDR_EXP 72
13059: PUSH
13060: LD_INT 1
13062: ST_TO_ADDR
// if p3 = 35 then
13063: LD_VAR 0 3
13067: PUSH
13068: LD_INT 35
13070: EQUAL
13071: IFFALSE 13081
// sTime := true ;
13073: LD_ADDR_EXP 73
13077: PUSH
13078: LD_INT 1
13080: ST_TO_ADDR
// if p3 = 36 then
13081: LD_VAR 0 3
13085: PUSH
13086: LD_INT 36
13088: EQUAL
13089: IFFALSE 13099
// sTools := true ;
13091: LD_ADDR_EXP 74
13095: PUSH
13096: LD_INT 1
13098: ST_TO_ADDR
// if p3 = 101 then
13099: LD_VAR 0 3
13103: PUSH
13104: LD_INT 101
13106: EQUAL
13107: IFFALSE 13117
// sSold := true ;
13109: LD_ADDR_EXP 39
13113: PUSH
13114: LD_INT 1
13116: ST_TO_ADDR
// if p3 = 102 then
13117: LD_VAR 0 3
13121: PUSH
13122: LD_INT 102
13124: EQUAL
13125: IFFALSE 13135
// sDiff := true ;
13127: LD_ADDR_EXP 40
13131: PUSH
13132: LD_INT 1
13134: ST_TO_ADDR
// if p3 = 103 then
13135: LD_VAR 0 3
13139: PUSH
13140: LD_INT 103
13142: EQUAL
13143: IFFALSE 13153
// sFog := true ;
13145: LD_ADDR_EXP 43
13149: PUSH
13150: LD_INT 1
13152: ST_TO_ADDR
// if p3 = 104 then
13153: LD_VAR 0 3
13157: PUSH
13158: LD_INT 104
13160: EQUAL
13161: IFFALSE 13171
// sReset := true ;
13163: LD_ADDR_EXP 44
13167: PUSH
13168: LD_INT 1
13170: ST_TO_ADDR
// if p3 = 105 then
13171: LD_VAR 0 3
13175: PUSH
13176: LD_INT 105
13178: EQUAL
13179: IFFALSE 13189
// sSun := true ;
13181: LD_ADDR_EXP 45
13185: PUSH
13186: LD_INT 1
13188: ST_TO_ADDR
// if p3 = 106 then
13189: LD_VAR 0 3
13193: PUSH
13194: LD_INT 106
13196: EQUAL
13197: IFFALSE 13207
// sTiger := true ;
13199: LD_ADDR_EXP 41
13203: PUSH
13204: LD_INT 1
13206: ST_TO_ADDR
// if p3 = 107 then
13207: LD_VAR 0 3
13211: PUSH
13212: LD_INT 107
13214: EQUAL
13215: IFFALSE 13225
// sBomb := true ;
13217: LD_ADDR_EXP 42
13221: PUSH
13222: LD_INT 1
13224: ST_TO_ADDR
// if p3 = 108 then
13225: LD_VAR 0 3
13229: PUSH
13230: LD_INT 108
13232: EQUAL
13233: IFFALSE 13243
// sWound := true ;
13235: LD_ADDR_EXP 50
13239: PUSH
13240: LD_INT 1
13242: ST_TO_ADDR
// if p3 = 109 then
13243: LD_VAR 0 3
13247: PUSH
13248: LD_INT 109
13250: EQUAL
13251: IFFALSE 13261
// sBetray := true ;
13253: LD_ADDR_EXP 54
13257: PUSH
13258: LD_INT 1
13260: ST_TO_ADDR
// if p3 = 110 then
13261: LD_VAR 0 3
13265: PUSH
13266: LD_INT 110
13268: EQUAL
13269: IFFALSE 13279
// sContamin := true ;
13271: LD_ADDR_EXP 55
13275: PUSH
13276: LD_INT 1
13278: ST_TO_ADDR
// if p3 = 111 then
13279: LD_VAR 0 3
13283: PUSH
13284: LD_INT 111
13286: EQUAL
13287: IFFALSE 13297
// sOil := true ;
13289: LD_ADDR_EXP 57
13293: PUSH
13294: LD_INT 1
13296: ST_TO_ADDR
// if p3 = 112 then
13297: LD_VAR 0 3
13301: PUSH
13302: LD_INT 112
13304: EQUAL
13305: IFFALSE 13315
// sStu := true ;
13307: LD_ADDR_EXP 61
13311: PUSH
13312: LD_INT 1
13314: ST_TO_ADDR
// if p3 = 113 then
13315: LD_VAR 0 3
13319: PUSH
13320: LD_INT 113
13322: EQUAL
13323: IFFALSE 13333
// sBazooka := true ;
13325: LD_ADDR_EXP 64
13329: PUSH
13330: LD_INT 1
13332: ST_TO_ADDR
// if p3 = 114 then
13333: LD_VAR 0 3
13337: PUSH
13338: LD_INT 114
13340: EQUAL
13341: IFFALSE 13351
// sMortar := true ;
13343: LD_ADDR_EXP 65
13347: PUSH
13348: LD_INT 1
13350: ST_TO_ADDR
// if p3 = 115 then
13351: LD_VAR 0 3
13355: PUSH
13356: LD_INT 115
13358: EQUAL
13359: IFFALSE 13369
// sRanger := true ;
13361: LD_ADDR_EXP 75
13365: PUSH
13366: LD_INT 1
13368: ST_TO_ADDR
// if p3 = 116 then
13369: LD_VAR 0 3
13373: PUSH
13374: LD_INT 116
13376: EQUAL
13377: IFFALSE 13387
// sComputer := true ;
13379: LD_ADDR_EXP 76
13383: PUSH
13384: LD_INT 1
13386: ST_TO_ADDR
// if p3 = 117 then
13387: LD_VAR 0 3
13391: PUSH
13392: LD_INT 117
13394: EQUAL
13395: IFFALSE 13405
// s30 := true ;
13397: LD_ADDR_EXP 77
13401: PUSH
13402: LD_INT 1
13404: ST_TO_ADDR
// if p3 = 118 then
13405: LD_VAR 0 3
13409: PUSH
13410: LD_INT 118
13412: EQUAL
13413: IFFALSE 13423
// s60 := true ;
13415: LD_ADDR_EXP 78
13419: PUSH
13420: LD_INT 1
13422: ST_TO_ADDR
// end ; if p2 = hack_mode then
13423: LD_VAR 0 2
13427: PUSH
13428: LD_INT 101
13430: EQUAL
13431: IFFALSE 13559
// begin case p3 of 1 :
13433: LD_VAR 0 3
13437: PUSH
13438: LD_INT 1
13440: DOUBLE
13441: EQUAL
13442: IFTRUE 13446
13444: GO 13453
13446: POP
// hHackUnlimitedResources ; 2 :
13447: CALL 25698 0 0
13451: GO 13559
13453: LD_INT 2
13455: DOUBLE
13456: EQUAL
13457: IFTRUE 13461
13459: GO 13468
13461: POP
// hHackSetLevel10 ; 3 :
13462: CALL 25831 0 0
13466: GO 13559
13468: LD_INT 3
13470: DOUBLE
13471: EQUAL
13472: IFTRUE 13476
13474: GO 13483
13476: POP
// hHackSetLevel10YourUnits ; 4 :
13477: CALL 25916 0 0
13481: GO 13559
13483: LD_INT 4
13485: DOUBLE
13486: EQUAL
13487: IFTRUE 13491
13489: GO 13498
13491: POP
// hHackInvincible ; 5 :
13492: CALL 26364 0 0
13496: GO 13559
13498: LD_INT 5
13500: DOUBLE
13501: EQUAL
13502: IFTRUE 13506
13504: GO 13513
13506: POP
// hHackInvisible ; 6 :
13507: CALL 26475 0 0
13511: GO 13559
13513: LD_INT 6
13515: DOUBLE
13516: EQUAL
13517: IFTRUE 13521
13519: GO 13528
13521: POP
// hHackChangeYourSide ; 7 :
13522: CALL 26532 0 0
13526: GO 13559
13528: LD_INT 7
13530: DOUBLE
13531: EQUAL
13532: IFTRUE 13536
13534: GO 13543
13536: POP
// hHackChangeUnitSide ; 8 :
13537: CALL 26574 0 0
13541: GO 13559
13543: LD_INT 8
13545: DOUBLE
13546: EQUAL
13547: IFTRUE 13551
13549: GO 13558
13551: POP
// hHackFog ; end ;
13552: CALL 26675 0 0
13556: GO 13559
13558: POP
// end ; if p2 = game_save_mode then
13559: LD_VAR 0 2
13563: PUSH
13564: LD_INT 102
13566: EQUAL
13567: IFFALSE 13622
// begin if p3 = 1 then
13569: LD_VAR 0 3
13573: PUSH
13574: LD_INT 1
13576: EQUAL
13577: IFFALSE 13589
// globalGameSaveCounter := p4 ;
13579: LD_ADDR_EXP 21
13583: PUSH
13584: LD_VAR 0 4
13588: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
13589: LD_VAR 0 3
13593: PUSH
13594: LD_INT 2
13596: EQUAL
13597: PUSH
13598: LD_EXP 21
13602: AND
13603: IFFALSE 13622
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
13605: LD_STRING setGameSaveCounter(
13607: PUSH
13608: LD_EXP 21
13612: STR
13613: PUSH
13614: LD_STRING )
13616: STR
13617: PPUSH
13618: CALL_OW 559
// end ; end ;
13622: LD_VAR 0 7
13626: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
13627: LD_INT 0
13629: PPUSH
// streamModeActive := false ;
13630: LD_ADDR_EXP 22
13634: PUSH
13635: LD_INT 0
13637: ST_TO_ADDR
// normalCounter := 36 ;
13638: LD_ADDR_EXP 23
13642: PUSH
13643: LD_INT 36
13645: ST_TO_ADDR
// hardcoreCounter := 18 ;
13646: LD_ADDR_EXP 24
13650: PUSH
13651: LD_INT 18
13653: ST_TO_ADDR
// sRocket := false ;
13654: LD_ADDR_EXP 27
13658: PUSH
13659: LD_INT 0
13661: ST_TO_ADDR
// sSpeed := false ;
13662: LD_ADDR_EXP 26
13666: PUSH
13667: LD_INT 0
13669: ST_TO_ADDR
// sEngine := false ;
13670: LD_ADDR_EXP 28
13674: PUSH
13675: LD_INT 0
13677: ST_TO_ADDR
// sSpec := false ;
13678: LD_ADDR_EXP 25
13682: PUSH
13683: LD_INT 0
13685: ST_TO_ADDR
// sLevel := false ;
13686: LD_ADDR_EXP 29
13690: PUSH
13691: LD_INT 0
13693: ST_TO_ADDR
// sArmoury := false ;
13694: LD_ADDR_EXP 30
13698: PUSH
13699: LD_INT 0
13701: ST_TO_ADDR
// sRadar := false ;
13702: LD_ADDR_EXP 31
13706: PUSH
13707: LD_INT 0
13709: ST_TO_ADDR
// sBunker := false ;
13710: LD_ADDR_EXP 32
13714: PUSH
13715: LD_INT 0
13717: ST_TO_ADDR
// sHack := false ;
13718: LD_ADDR_EXP 33
13722: PUSH
13723: LD_INT 0
13725: ST_TO_ADDR
// sFire := false ;
13726: LD_ADDR_EXP 34
13730: PUSH
13731: LD_INT 0
13733: ST_TO_ADDR
// sRefresh := false ;
13734: LD_ADDR_EXP 35
13738: PUSH
13739: LD_INT 0
13741: ST_TO_ADDR
// sExp := false ;
13742: LD_ADDR_EXP 36
13746: PUSH
13747: LD_INT 0
13749: ST_TO_ADDR
// sDepot := false ;
13750: LD_ADDR_EXP 37
13754: PUSH
13755: LD_INT 0
13757: ST_TO_ADDR
// sFlag := false ;
13758: LD_ADDR_EXP 38
13762: PUSH
13763: LD_INT 0
13765: ST_TO_ADDR
// sKamikadze := false ;
13766: LD_ADDR_EXP 46
13770: PUSH
13771: LD_INT 0
13773: ST_TO_ADDR
// sTroll := false ;
13774: LD_ADDR_EXP 47
13778: PUSH
13779: LD_INT 0
13781: ST_TO_ADDR
// sSlow := false ;
13782: LD_ADDR_EXP 48
13786: PUSH
13787: LD_INT 0
13789: ST_TO_ADDR
// sLack := false ;
13790: LD_ADDR_EXP 49
13794: PUSH
13795: LD_INT 0
13797: ST_TO_ADDR
// sTank := false ;
13798: LD_ADDR_EXP 51
13802: PUSH
13803: LD_INT 0
13805: ST_TO_ADDR
// sRemote := false ;
13806: LD_ADDR_EXP 52
13810: PUSH
13811: LD_INT 0
13813: ST_TO_ADDR
// sPowell := false ;
13814: LD_ADDR_EXP 53
13818: PUSH
13819: LD_INT 0
13821: ST_TO_ADDR
// sTeleport := false ;
13822: LD_ADDR_EXP 56
13826: PUSH
13827: LD_INT 0
13829: ST_TO_ADDR
// sOilTower := false ;
13830: LD_ADDR_EXP 58
13834: PUSH
13835: LD_INT 0
13837: ST_TO_ADDR
// sShovel := false ;
13838: LD_ADDR_EXP 59
13842: PUSH
13843: LD_INT 0
13845: ST_TO_ADDR
// sSheik := false ;
13846: LD_ADDR_EXP 60
13850: PUSH
13851: LD_INT 0
13853: ST_TO_ADDR
// sEarthquake := false ;
13854: LD_ADDR_EXP 62
13858: PUSH
13859: LD_INT 0
13861: ST_TO_ADDR
// sAI := false ;
13862: LD_ADDR_EXP 63
13866: PUSH
13867: LD_INT 0
13869: ST_TO_ADDR
// sCargo := false ;
13870: LD_ADDR_EXP 66
13874: PUSH
13875: LD_INT 0
13877: ST_TO_ADDR
// sDLaser := false ;
13878: LD_ADDR_EXP 67
13882: PUSH
13883: LD_INT 0
13885: ST_TO_ADDR
// sExchange := false ;
13886: LD_ADDR_EXP 68
13890: PUSH
13891: LD_INT 0
13893: ST_TO_ADDR
// sFac := false ;
13894: LD_ADDR_EXP 69
13898: PUSH
13899: LD_INT 0
13901: ST_TO_ADDR
// sPower := false ;
13902: LD_ADDR_EXP 70
13906: PUSH
13907: LD_INT 0
13909: ST_TO_ADDR
// sRandom := false ;
13910: LD_ADDR_EXP 71
13914: PUSH
13915: LD_INT 0
13917: ST_TO_ADDR
// sShield := false ;
13918: LD_ADDR_EXP 72
13922: PUSH
13923: LD_INT 0
13925: ST_TO_ADDR
// sTime := false ;
13926: LD_ADDR_EXP 73
13930: PUSH
13931: LD_INT 0
13933: ST_TO_ADDR
// sTools := false ;
13934: LD_ADDR_EXP 74
13938: PUSH
13939: LD_INT 0
13941: ST_TO_ADDR
// sSold := false ;
13942: LD_ADDR_EXP 39
13946: PUSH
13947: LD_INT 0
13949: ST_TO_ADDR
// sDiff := false ;
13950: LD_ADDR_EXP 40
13954: PUSH
13955: LD_INT 0
13957: ST_TO_ADDR
// sFog := false ;
13958: LD_ADDR_EXP 43
13962: PUSH
13963: LD_INT 0
13965: ST_TO_ADDR
// sReset := false ;
13966: LD_ADDR_EXP 44
13970: PUSH
13971: LD_INT 0
13973: ST_TO_ADDR
// sSun := false ;
13974: LD_ADDR_EXP 45
13978: PUSH
13979: LD_INT 0
13981: ST_TO_ADDR
// sTiger := false ;
13982: LD_ADDR_EXP 41
13986: PUSH
13987: LD_INT 0
13989: ST_TO_ADDR
// sBomb := false ;
13990: LD_ADDR_EXP 42
13994: PUSH
13995: LD_INT 0
13997: ST_TO_ADDR
// sWound := false ;
13998: LD_ADDR_EXP 50
14002: PUSH
14003: LD_INT 0
14005: ST_TO_ADDR
// sBetray := false ;
14006: LD_ADDR_EXP 54
14010: PUSH
14011: LD_INT 0
14013: ST_TO_ADDR
// sContamin := false ;
14014: LD_ADDR_EXP 55
14018: PUSH
14019: LD_INT 0
14021: ST_TO_ADDR
// sOil := false ;
14022: LD_ADDR_EXP 57
14026: PUSH
14027: LD_INT 0
14029: ST_TO_ADDR
// sStu := false ;
14030: LD_ADDR_EXP 61
14034: PUSH
14035: LD_INT 0
14037: ST_TO_ADDR
// sBazooka := false ;
14038: LD_ADDR_EXP 64
14042: PUSH
14043: LD_INT 0
14045: ST_TO_ADDR
// sMortar := false ;
14046: LD_ADDR_EXP 65
14050: PUSH
14051: LD_INT 0
14053: ST_TO_ADDR
// sRanger := false ;
14054: LD_ADDR_EXP 75
14058: PUSH
14059: LD_INT 0
14061: ST_TO_ADDR
// sComputer := false ;
14062: LD_ADDR_EXP 76
14066: PUSH
14067: LD_INT 0
14069: ST_TO_ADDR
// s30 := false ;
14070: LD_ADDR_EXP 77
14074: PUSH
14075: LD_INT 0
14077: ST_TO_ADDR
// s60 := false ;
14078: LD_ADDR_EXP 78
14082: PUSH
14083: LD_INT 0
14085: ST_TO_ADDR
// end ;
14086: LD_VAR 0 1
14090: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
14091: LD_INT 0
14093: PPUSH
14094: PPUSH
14095: PPUSH
14096: PPUSH
14097: PPUSH
14098: PPUSH
14099: PPUSH
// result := [ ] ;
14100: LD_ADDR_VAR 0 2
14104: PUSH
14105: EMPTY
14106: ST_TO_ADDR
// if campaign_id = 1 then
14107: LD_OWVAR 69
14111: PUSH
14112: LD_INT 1
14114: EQUAL
14115: IFFALSE 17281
// begin case mission_number of 1 :
14117: LD_OWVAR 70
14121: PUSH
14122: LD_INT 1
14124: DOUBLE
14125: EQUAL
14126: IFTRUE 14130
14128: GO 14206
14130: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
14131: LD_ADDR_VAR 0 2
14135: PUSH
14136: LD_INT 2
14138: PUSH
14139: LD_INT 4
14141: PUSH
14142: LD_INT 11
14144: PUSH
14145: LD_INT 12
14147: PUSH
14148: LD_INT 15
14150: PUSH
14151: LD_INT 16
14153: PUSH
14154: LD_INT 22
14156: PUSH
14157: LD_INT 23
14159: PUSH
14160: LD_INT 26
14162: PUSH
14163: EMPTY
14164: LIST
14165: LIST
14166: LIST
14167: LIST
14168: LIST
14169: LIST
14170: LIST
14171: LIST
14172: LIST
14173: PUSH
14174: LD_INT 101
14176: PUSH
14177: LD_INT 102
14179: PUSH
14180: LD_INT 106
14182: PUSH
14183: LD_INT 116
14185: PUSH
14186: LD_INT 117
14188: PUSH
14189: LD_INT 118
14191: PUSH
14192: EMPTY
14193: LIST
14194: LIST
14195: LIST
14196: LIST
14197: LIST
14198: LIST
14199: PUSH
14200: EMPTY
14201: LIST
14202: LIST
14203: ST_TO_ADDR
14204: GO 17279
14206: LD_INT 2
14208: DOUBLE
14209: EQUAL
14210: IFTRUE 14214
14212: GO 14298
14214: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
14215: LD_ADDR_VAR 0 2
14219: PUSH
14220: LD_INT 2
14222: PUSH
14223: LD_INT 4
14225: PUSH
14226: LD_INT 11
14228: PUSH
14229: LD_INT 12
14231: PUSH
14232: LD_INT 15
14234: PUSH
14235: LD_INT 16
14237: PUSH
14238: LD_INT 22
14240: PUSH
14241: LD_INT 23
14243: PUSH
14244: LD_INT 26
14246: PUSH
14247: EMPTY
14248: LIST
14249: LIST
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: PUSH
14258: LD_INT 101
14260: PUSH
14261: LD_INT 102
14263: PUSH
14264: LD_INT 105
14266: PUSH
14267: LD_INT 106
14269: PUSH
14270: LD_INT 108
14272: PUSH
14273: LD_INT 116
14275: PUSH
14276: LD_INT 117
14278: PUSH
14279: LD_INT 118
14281: PUSH
14282: EMPTY
14283: LIST
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: LIST
14291: PUSH
14292: EMPTY
14293: LIST
14294: LIST
14295: ST_TO_ADDR
14296: GO 17279
14298: LD_INT 3
14300: DOUBLE
14301: EQUAL
14302: IFTRUE 14306
14304: GO 14394
14306: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
14307: LD_ADDR_VAR 0 2
14311: PUSH
14312: LD_INT 2
14314: PUSH
14315: LD_INT 4
14317: PUSH
14318: LD_INT 5
14320: PUSH
14321: LD_INT 11
14323: PUSH
14324: LD_INT 12
14326: PUSH
14327: LD_INT 15
14329: PUSH
14330: LD_INT 16
14332: PUSH
14333: LD_INT 22
14335: PUSH
14336: LD_INT 26
14338: PUSH
14339: LD_INT 36
14341: PUSH
14342: EMPTY
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: PUSH
14354: LD_INT 101
14356: PUSH
14357: LD_INT 102
14359: PUSH
14360: LD_INT 105
14362: PUSH
14363: LD_INT 106
14365: PUSH
14366: LD_INT 108
14368: PUSH
14369: LD_INT 116
14371: PUSH
14372: LD_INT 117
14374: PUSH
14375: LD_INT 118
14377: PUSH
14378: EMPTY
14379: LIST
14380: LIST
14381: LIST
14382: LIST
14383: LIST
14384: LIST
14385: LIST
14386: LIST
14387: PUSH
14388: EMPTY
14389: LIST
14390: LIST
14391: ST_TO_ADDR
14392: GO 17279
14394: LD_INT 4
14396: DOUBLE
14397: EQUAL
14398: IFTRUE 14402
14400: GO 14498
14402: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
14403: LD_ADDR_VAR 0 2
14407: PUSH
14408: LD_INT 2
14410: PUSH
14411: LD_INT 4
14413: PUSH
14414: LD_INT 5
14416: PUSH
14417: LD_INT 8
14419: PUSH
14420: LD_INT 11
14422: PUSH
14423: LD_INT 12
14425: PUSH
14426: LD_INT 15
14428: PUSH
14429: LD_INT 16
14431: PUSH
14432: LD_INT 22
14434: PUSH
14435: LD_INT 23
14437: PUSH
14438: LD_INT 26
14440: PUSH
14441: LD_INT 36
14443: PUSH
14444: EMPTY
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: PUSH
14458: LD_INT 101
14460: PUSH
14461: LD_INT 102
14463: PUSH
14464: LD_INT 105
14466: PUSH
14467: LD_INT 106
14469: PUSH
14470: LD_INT 108
14472: PUSH
14473: LD_INT 116
14475: PUSH
14476: LD_INT 117
14478: PUSH
14479: LD_INT 118
14481: PUSH
14482: EMPTY
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: PUSH
14492: EMPTY
14493: LIST
14494: LIST
14495: ST_TO_ADDR
14496: GO 17279
14498: LD_INT 5
14500: DOUBLE
14501: EQUAL
14502: IFTRUE 14506
14504: GO 14618
14506: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
14507: LD_ADDR_VAR 0 2
14511: PUSH
14512: LD_INT 2
14514: PUSH
14515: LD_INT 4
14517: PUSH
14518: LD_INT 5
14520: PUSH
14521: LD_INT 6
14523: PUSH
14524: LD_INT 8
14526: PUSH
14527: LD_INT 11
14529: PUSH
14530: LD_INT 12
14532: PUSH
14533: LD_INT 15
14535: PUSH
14536: LD_INT 16
14538: PUSH
14539: LD_INT 22
14541: PUSH
14542: LD_INT 23
14544: PUSH
14545: LD_INT 25
14547: PUSH
14548: LD_INT 26
14550: PUSH
14551: LD_INT 36
14553: PUSH
14554: EMPTY
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: LIST
14568: LIST
14569: PUSH
14570: LD_INT 101
14572: PUSH
14573: LD_INT 102
14575: PUSH
14576: LD_INT 105
14578: PUSH
14579: LD_INT 106
14581: PUSH
14582: LD_INT 108
14584: PUSH
14585: LD_INT 109
14587: PUSH
14588: LD_INT 112
14590: PUSH
14591: LD_INT 116
14593: PUSH
14594: LD_INT 117
14596: PUSH
14597: LD_INT 118
14599: PUSH
14600: EMPTY
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: LIST
14606: LIST
14607: LIST
14608: LIST
14609: LIST
14610: LIST
14611: PUSH
14612: EMPTY
14613: LIST
14614: LIST
14615: ST_TO_ADDR
14616: GO 17279
14618: LD_INT 6
14620: DOUBLE
14621: EQUAL
14622: IFTRUE 14626
14624: GO 14758
14626: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
14627: LD_ADDR_VAR 0 2
14631: PUSH
14632: LD_INT 2
14634: PUSH
14635: LD_INT 4
14637: PUSH
14638: LD_INT 5
14640: PUSH
14641: LD_INT 6
14643: PUSH
14644: LD_INT 8
14646: PUSH
14647: LD_INT 11
14649: PUSH
14650: LD_INT 12
14652: PUSH
14653: LD_INT 15
14655: PUSH
14656: LD_INT 16
14658: PUSH
14659: LD_INT 20
14661: PUSH
14662: LD_INT 21
14664: PUSH
14665: LD_INT 22
14667: PUSH
14668: LD_INT 23
14670: PUSH
14671: LD_INT 25
14673: PUSH
14674: LD_INT 26
14676: PUSH
14677: LD_INT 30
14679: PUSH
14680: LD_INT 31
14682: PUSH
14683: LD_INT 32
14685: PUSH
14686: LD_INT 36
14688: PUSH
14689: EMPTY
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: PUSH
14710: LD_INT 101
14712: PUSH
14713: LD_INT 102
14715: PUSH
14716: LD_INT 105
14718: PUSH
14719: LD_INT 106
14721: PUSH
14722: LD_INT 108
14724: PUSH
14725: LD_INT 109
14727: PUSH
14728: LD_INT 112
14730: PUSH
14731: LD_INT 116
14733: PUSH
14734: LD_INT 117
14736: PUSH
14737: LD_INT 118
14739: PUSH
14740: EMPTY
14741: LIST
14742: LIST
14743: LIST
14744: LIST
14745: LIST
14746: LIST
14747: LIST
14748: LIST
14749: LIST
14750: LIST
14751: PUSH
14752: EMPTY
14753: LIST
14754: LIST
14755: ST_TO_ADDR
14756: GO 17279
14758: LD_INT 7
14760: DOUBLE
14761: EQUAL
14762: IFTRUE 14766
14764: GO 14878
14766: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
14767: LD_ADDR_VAR 0 2
14771: PUSH
14772: LD_INT 2
14774: PUSH
14775: LD_INT 4
14777: PUSH
14778: LD_INT 5
14780: PUSH
14781: LD_INT 7
14783: PUSH
14784: LD_INT 11
14786: PUSH
14787: LD_INT 12
14789: PUSH
14790: LD_INT 15
14792: PUSH
14793: LD_INT 16
14795: PUSH
14796: LD_INT 20
14798: PUSH
14799: LD_INT 21
14801: PUSH
14802: LD_INT 22
14804: PUSH
14805: LD_INT 23
14807: PUSH
14808: LD_INT 25
14810: PUSH
14811: LD_INT 26
14813: PUSH
14814: EMPTY
14815: LIST
14816: LIST
14817: LIST
14818: LIST
14819: LIST
14820: LIST
14821: LIST
14822: LIST
14823: LIST
14824: LIST
14825: LIST
14826: LIST
14827: LIST
14828: LIST
14829: PUSH
14830: LD_INT 101
14832: PUSH
14833: LD_INT 102
14835: PUSH
14836: LD_INT 103
14838: PUSH
14839: LD_INT 105
14841: PUSH
14842: LD_INT 106
14844: PUSH
14845: LD_INT 108
14847: PUSH
14848: LD_INT 112
14850: PUSH
14851: LD_INT 116
14853: PUSH
14854: LD_INT 117
14856: PUSH
14857: LD_INT 118
14859: PUSH
14860: EMPTY
14861: LIST
14862: LIST
14863: LIST
14864: LIST
14865: LIST
14866: LIST
14867: LIST
14868: LIST
14869: LIST
14870: LIST
14871: PUSH
14872: EMPTY
14873: LIST
14874: LIST
14875: ST_TO_ADDR
14876: GO 17279
14878: LD_INT 8
14880: DOUBLE
14881: EQUAL
14882: IFTRUE 14886
14884: GO 15026
14886: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
14887: LD_ADDR_VAR 0 2
14891: PUSH
14892: LD_INT 2
14894: PUSH
14895: LD_INT 4
14897: PUSH
14898: LD_INT 5
14900: PUSH
14901: LD_INT 6
14903: PUSH
14904: LD_INT 7
14906: PUSH
14907: LD_INT 8
14909: PUSH
14910: LD_INT 11
14912: PUSH
14913: LD_INT 12
14915: PUSH
14916: LD_INT 15
14918: PUSH
14919: LD_INT 16
14921: PUSH
14922: LD_INT 20
14924: PUSH
14925: LD_INT 21
14927: PUSH
14928: LD_INT 22
14930: PUSH
14931: LD_INT 23
14933: PUSH
14934: LD_INT 25
14936: PUSH
14937: LD_INT 26
14939: PUSH
14940: LD_INT 30
14942: PUSH
14943: LD_INT 31
14945: PUSH
14946: LD_INT 32
14948: PUSH
14949: LD_INT 36
14951: PUSH
14952: EMPTY
14953: LIST
14954: LIST
14955: LIST
14956: LIST
14957: LIST
14958: LIST
14959: LIST
14960: LIST
14961: LIST
14962: LIST
14963: LIST
14964: LIST
14965: LIST
14966: LIST
14967: LIST
14968: LIST
14969: LIST
14970: LIST
14971: LIST
14972: LIST
14973: PUSH
14974: LD_INT 101
14976: PUSH
14977: LD_INT 102
14979: PUSH
14980: LD_INT 103
14982: PUSH
14983: LD_INT 105
14985: PUSH
14986: LD_INT 106
14988: PUSH
14989: LD_INT 108
14991: PUSH
14992: LD_INT 109
14994: PUSH
14995: LD_INT 112
14997: PUSH
14998: LD_INT 116
15000: PUSH
15001: LD_INT 117
15003: PUSH
15004: LD_INT 118
15006: PUSH
15007: EMPTY
15008: LIST
15009: LIST
15010: LIST
15011: LIST
15012: LIST
15013: LIST
15014: LIST
15015: LIST
15016: LIST
15017: LIST
15018: LIST
15019: PUSH
15020: EMPTY
15021: LIST
15022: LIST
15023: ST_TO_ADDR
15024: GO 17279
15026: LD_INT 9
15028: DOUBLE
15029: EQUAL
15030: IFTRUE 15034
15032: GO 15182
15034: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
15035: LD_ADDR_VAR 0 2
15039: PUSH
15040: LD_INT 2
15042: PUSH
15043: LD_INT 4
15045: PUSH
15046: LD_INT 5
15048: PUSH
15049: LD_INT 6
15051: PUSH
15052: LD_INT 7
15054: PUSH
15055: LD_INT 8
15057: PUSH
15058: LD_INT 11
15060: PUSH
15061: LD_INT 12
15063: PUSH
15064: LD_INT 15
15066: PUSH
15067: LD_INT 16
15069: PUSH
15070: LD_INT 20
15072: PUSH
15073: LD_INT 21
15075: PUSH
15076: LD_INT 22
15078: PUSH
15079: LD_INT 23
15081: PUSH
15082: LD_INT 25
15084: PUSH
15085: LD_INT 26
15087: PUSH
15088: LD_INT 28
15090: PUSH
15091: LD_INT 30
15093: PUSH
15094: LD_INT 31
15096: PUSH
15097: LD_INT 32
15099: PUSH
15100: LD_INT 36
15102: PUSH
15103: EMPTY
15104: LIST
15105: LIST
15106: LIST
15107: LIST
15108: LIST
15109: LIST
15110: LIST
15111: LIST
15112: LIST
15113: LIST
15114: LIST
15115: LIST
15116: LIST
15117: LIST
15118: LIST
15119: LIST
15120: LIST
15121: LIST
15122: LIST
15123: LIST
15124: LIST
15125: PUSH
15126: LD_INT 101
15128: PUSH
15129: LD_INT 102
15131: PUSH
15132: LD_INT 103
15134: PUSH
15135: LD_INT 105
15137: PUSH
15138: LD_INT 106
15140: PUSH
15141: LD_INT 108
15143: PUSH
15144: LD_INT 109
15146: PUSH
15147: LD_INT 112
15149: PUSH
15150: LD_INT 114
15152: PUSH
15153: LD_INT 116
15155: PUSH
15156: LD_INT 117
15158: PUSH
15159: LD_INT 118
15161: PUSH
15162: EMPTY
15163: LIST
15164: LIST
15165: LIST
15166: LIST
15167: LIST
15168: LIST
15169: LIST
15170: LIST
15171: LIST
15172: LIST
15173: LIST
15174: LIST
15175: PUSH
15176: EMPTY
15177: LIST
15178: LIST
15179: ST_TO_ADDR
15180: GO 17279
15182: LD_INT 10
15184: DOUBLE
15185: EQUAL
15186: IFTRUE 15190
15188: GO 15386
15190: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
15191: LD_ADDR_VAR 0 2
15195: PUSH
15196: LD_INT 2
15198: PUSH
15199: LD_INT 4
15201: PUSH
15202: LD_INT 5
15204: PUSH
15205: LD_INT 6
15207: PUSH
15208: LD_INT 7
15210: PUSH
15211: LD_INT 8
15213: PUSH
15214: LD_INT 9
15216: PUSH
15217: LD_INT 10
15219: PUSH
15220: LD_INT 11
15222: PUSH
15223: LD_INT 12
15225: PUSH
15226: LD_INT 13
15228: PUSH
15229: LD_INT 14
15231: PUSH
15232: LD_INT 15
15234: PUSH
15235: LD_INT 16
15237: PUSH
15238: LD_INT 17
15240: PUSH
15241: LD_INT 18
15243: PUSH
15244: LD_INT 19
15246: PUSH
15247: LD_INT 20
15249: PUSH
15250: LD_INT 21
15252: PUSH
15253: LD_INT 22
15255: PUSH
15256: LD_INT 23
15258: PUSH
15259: LD_INT 24
15261: PUSH
15262: LD_INT 25
15264: PUSH
15265: LD_INT 26
15267: PUSH
15268: LD_INT 28
15270: PUSH
15271: LD_INT 30
15273: PUSH
15274: LD_INT 31
15276: PUSH
15277: LD_INT 32
15279: PUSH
15280: LD_INT 36
15282: PUSH
15283: EMPTY
15284: LIST
15285: LIST
15286: LIST
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: LIST
15298: LIST
15299: LIST
15300: LIST
15301: LIST
15302: LIST
15303: LIST
15304: LIST
15305: LIST
15306: LIST
15307: LIST
15308: LIST
15309: LIST
15310: LIST
15311: LIST
15312: LIST
15313: PUSH
15314: LD_INT 101
15316: PUSH
15317: LD_INT 102
15319: PUSH
15320: LD_INT 103
15322: PUSH
15323: LD_INT 104
15325: PUSH
15326: LD_INT 105
15328: PUSH
15329: LD_INT 106
15331: PUSH
15332: LD_INT 107
15334: PUSH
15335: LD_INT 108
15337: PUSH
15338: LD_INT 109
15340: PUSH
15341: LD_INT 110
15343: PUSH
15344: LD_INT 111
15346: PUSH
15347: LD_INT 112
15349: PUSH
15350: LD_INT 114
15352: PUSH
15353: LD_INT 116
15355: PUSH
15356: LD_INT 117
15358: PUSH
15359: LD_INT 118
15361: PUSH
15362: EMPTY
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: LIST
15376: LIST
15377: LIST
15378: LIST
15379: PUSH
15380: EMPTY
15381: LIST
15382: LIST
15383: ST_TO_ADDR
15384: GO 17279
15386: LD_INT 11
15388: DOUBLE
15389: EQUAL
15390: IFTRUE 15394
15392: GO 15598
15394: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
15395: LD_ADDR_VAR 0 2
15399: PUSH
15400: LD_INT 2
15402: PUSH
15403: LD_INT 3
15405: PUSH
15406: LD_INT 4
15408: PUSH
15409: LD_INT 5
15411: PUSH
15412: LD_INT 6
15414: PUSH
15415: LD_INT 7
15417: PUSH
15418: LD_INT 8
15420: PUSH
15421: LD_INT 9
15423: PUSH
15424: LD_INT 10
15426: PUSH
15427: LD_INT 11
15429: PUSH
15430: LD_INT 12
15432: PUSH
15433: LD_INT 13
15435: PUSH
15436: LD_INT 14
15438: PUSH
15439: LD_INT 15
15441: PUSH
15442: LD_INT 16
15444: PUSH
15445: LD_INT 17
15447: PUSH
15448: LD_INT 18
15450: PUSH
15451: LD_INT 19
15453: PUSH
15454: LD_INT 20
15456: PUSH
15457: LD_INT 21
15459: PUSH
15460: LD_INT 22
15462: PUSH
15463: LD_INT 23
15465: PUSH
15466: LD_INT 24
15468: PUSH
15469: LD_INT 25
15471: PUSH
15472: LD_INT 26
15474: PUSH
15475: LD_INT 28
15477: PUSH
15478: LD_INT 30
15480: PUSH
15481: LD_INT 31
15483: PUSH
15484: LD_INT 32
15486: PUSH
15487: LD_INT 34
15489: PUSH
15490: LD_INT 36
15492: PUSH
15493: EMPTY
15494: LIST
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: LIST
15502: LIST
15503: LIST
15504: LIST
15505: LIST
15506: LIST
15507: LIST
15508: LIST
15509: LIST
15510: LIST
15511: LIST
15512: LIST
15513: LIST
15514: LIST
15515: LIST
15516: LIST
15517: LIST
15518: LIST
15519: LIST
15520: LIST
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: PUSH
15526: LD_INT 101
15528: PUSH
15529: LD_INT 102
15531: PUSH
15532: LD_INT 103
15534: PUSH
15535: LD_INT 104
15537: PUSH
15538: LD_INT 105
15540: PUSH
15541: LD_INT 106
15543: PUSH
15544: LD_INT 107
15546: PUSH
15547: LD_INT 108
15549: PUSH
15550: LD_INT 109
15552: PUSH
15553: LD_INT 110
15555: PUSH
15556: LD_INT 111
15558: PUSH
15559: LD_INT 112
15561: PUSH
15562: LD_INT 114
15564: PUSH
15565: LD_INT 116
15567: PUSH
15568: LD_INT 117
15570: PUSH
15571: LD_INT 118
15573: PUSH
15574: EMPTY
15575: LIST
15576: LIST
15577: LIST
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: LIST
15588: LIST
15589: LIST
15590: LIST
15591: PUSH
15592: EMPTY
15593: LIST
15594: LIST
15595: ST_TO_ADDR
15596: GO 17279
15598: LD_INT 12
15600: DOUBLE
15601: EQUAL
15602: IFTRUE 15606
15604: GO 15826
15606: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
15607: LD_ADDR_VAR 0 2
15611: PUSH
15612: LD_INT 1
15614: PUSH
15615: LD_INT 2
15617: PUSH
15618: LD_INT 3
15620: PUSH
15621: LD_INT 4
15623: PUSH
15624: LD_INT 5
15626: PUSH
15627: LD_INT 6
15629: PUSH
15630: LD_INT 7
15632: PUSH
15633: LD_INT 8
15635: PUSH
15636: LD_INT 9
15638: PUSH
15639: LD_INT 10
15641: PUSH
15642: LD_INT 11
15644: PUSH
15645: LD_INT 12
15647: PUSH
15648: LD_INT 13
15650: PUSH
15651: LD_INT 14
15653: PUSH
15654: LD_INT 15
15656: PUSH
15657: LD_INT 16
15659: PUSH
15660: LD_INT 17
15662: PUSH
15663: LD_INT 18
15665: PUSH
15666: LD_INT 19
15668: PUSH
15669: LD_INT 20
15671: PUSH
15672: LD_INT 21
15674: PUSH
15675: LD_INT 22
15677: PUSH
15678: LD_INT 23
15680: PUSH
15681: LD_INT 24
15683: PUSH
15684: LD_INT 25
15686: PUSH
15687: LD_INT 26
15689: PUSH
15690: LD_INT 27
15692: PUSH
15693: LD_INT 28
15695: PUSH
15696: LD_INT 30
15698: PUSH
15699: LD_INT 31
15701: PUSH
15702: LD_INT 32
15704: PUSH
15705: LD_INT 33
15707: PUSH
15708: LD_INT 34
15710: PUSH
15711: LD_INT 36
15713: PUSH
15714: EMPTY
15715: LIST
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: PUSH
15750: LD_INT 101
15752: PUSH
15753: LD_INT 102
15755: PUSH
15756: LD_INT 103
15758: PUSH
15759: LD_INT 104
15761: PUSH
15762: LD_INT 105
15764: PUSH
15765: LD_INT 106
15767: PUSH
15768: LD_INT 107
15770: PUSH
15771: LD_INT 108
15773: PUSH
15774: LD_INT 109
15776: PUSH
15777: LD_INT 110
15779: PUSH
15780: LD_INT 111
15782: PUSH
15783: LD_INT 112
15785: PUSH
15786: LD_INT 113
15788: PUSH
15789: LD_INT 114
15791: PUSH
15792: LD_INT 116
15794: PUSH
15795: LD_INT 117
15797: PUSH
15798: LD_INT 118
15800: PUSH
15801: EMPTY
15802: LIST
15803: LIST
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: LIST
15809: LIST
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: LIST
15815: LIST
15816: LIST
15817: LIST
15818: LIST
15819: PUSH
15820: EMPTY
15821: LIST
15822: LIST
15823: ST_TO_ADDR
15824: GO 17279
15826: LD_INT 13
15828: DOUBLE
15829: EQUAL
15830: IFTRUE 15834
15832: GO 16042
15834: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
15835: LD_ADDR_VAR 0 2
15839: PUSH
15840: LD_INT 1
15842: PUSH
15843: LD_INT 2
15845: PUSH
15846: LD_INT 3
15848: PUSH
15849: LD_INT 4
15851: PUSH
15852: LD_INT 5
15854: PUSH
15855: LD_INT 8
15857: PUSH
15858: LD_INT 9
15860: PUSH
15861: LD_INT 10
15863: PUSH
15864: LD_INT 11
15866: PUSH
15867: LD_INT 12
15869: PUSH
15870: LD_INT 14
15872: PUSH
15873: LD_INT 15
15875: PUSH
15876: LD_INT 16
15878: PUSH
15879: LD_INT 17
15881: PUSH
15882: LD_INT 18
15884: PUSH
15885: LD_INT 19
15887: PUSH
15888: LD_INT 20
15890: PUSH
15891: LD_INT 21
15893: PUSH
15894: LD_INT 22
15896: PUSH
15897: LD_INT 23
15899: PUSH
15900: LD_INT 24
15902: PUSH
15903: LD_INT 25
15905: PUSH
15906: LD_INT 26
15908: PUSH
15909: LD_INT 27
15911: PUSH
15912: LD_INT 28
15914: PUSH
15915: LD_INT 30
15917: PUSH
15918: LD_INT 31
15920: PUSH
15921: LD_INT 32
15923: PUSH
15924: LD_INT 33
15926: PUSH
15927: LD_INT 34
15929: PUSH
15930: LD_INT 36
15932: PUSH
15933: EMPTY
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: PUSH
15966: LD_INT 101
15968: PUSH
15969: LD_INT 102
15971: PUSH
15972: LD_INT 103
15974: PUSH
15975: LD_INT 104
15977: PUSH
15978: LD_INT 105
15980: PUSH
15981: LD_INT 106
15983: PUSH
15984: LD_INT 107
15986: PUSH
15987: LD_INT 108
15989: PUSH
15990: LD_INT 109
15992: PUSH
15993: LD_INT 110
15995: PUSH
15996: LD_INT 111
15998: PUSH
15999: LD_INT 112
16001: PUSH
16002: LD_INT 113
16004: PUSH
16005: LD_INT 114
16007: PUSH
16008: LD_INT 116
16010: PUSH
16011: LD_INT 117
16013: PUSH
16014: LD_INT 118
16016: PUSH
16017: EMPTY
16018: LIST
16019: LIST
16020: LIST
16021: LIST
16022: LIST
16023: LIST
16024: LIST
16025: LIST
16026: LIST
16027: LIST
16028: LIST
16029: LIST
16030: LIST
16031: LIST
16032: LIST
16033: LIST
16034: LIST
16035: PUSH
16036: EMPTY
16037: LIST
16038: LIST
16039: ST_TO_ADDR
16040: GO 17279
16042: LD_INT 14
16044: DOUBLE
16045: EQUAL
16046: IFTRUE 16050
16048: GO 16274
16050: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
16051: LD_ADDR_VAR 0 2
16055: PUSH
16056: LD_INT 1
16058: PUSH
16059: LD_INT 2
16061: PUSH
16062: LD_INT 3
16064: PUSH
16065: LD_INT 4
16067: PUSH
16068: LD_INT 5
16070: PUSH
16071: LD_INT 6
16073: PUSH
16074: LD_INT 7
16076: PUSH
16077: LD_INT 8
16079: PUSH
16080: LD_INT 9
16082: PUSH
16083: LD_INT 10
16085: PUSH
16086: LD_INT 11
16088: PUSH
16089: LD_INT 12
16091: PUSH
16092: LD_INT 13
16094: PUSH
16095: LD_INT 14
16097: PUSH
16098: LD_INT 15
16100: PUSH
16101: LD_INT 16
16103: PUSH
16104: LD_INT 17
16106: PUSH
16107: LD_INT 18
16109: PUSH
16110: LD_INT 19
16112: PUSH
16113: LD_INT 20
16115: PUSH
16116: LD_INT 21
16118: PUSH
16119: LD_INT 22
16121: PUSH
16122: LD_INT 23
16124: PUSH
16125: LD_INT 24
16127: PUSH
16128: LD_INT 25
16130: PUSH
16131: LD_INT 26
16133: PUSH
16134: LD_INT 27
16136: PUSH
16137: LD_INT 28
16139: PUSH
16140: LD_INT 29
16142: PUSH
16143: LD_INT 30
16145: PUSH
16146: LD_INT 31
16148: PUSH
16149: LD_INT 32
16151: PUSH
16152: LD_INT 33
16154: PUSH
16155: LD_INT 34
16157: PUSH
16158: LD_INT 36
16160: PUSH
16161: EMPTY
16162: LIST
16163: LIST
16164: LIST
16165: LIST
16166: LIST
16167: LIST
16168: LIST
16169: LIST
16170: LIST
16171: LIST
16172: LIST
16173: LIST
16174: LIST
16175: LIST
16176: LIST
16177: LIST
16178: LIST
16179: LIST
16180: LIST
16181: LIST
16182: LIST
16183: LIST
16184: LIST
16185: LIST
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: LIST
16191: LIST
16192: LIST
16193: LIST
16194: LIST
16195: LIST
16196: LIST
16197: PUSH
16198: LD_INT 101
16200: PUSH
16201: LD_INT 102
16203: PUSH
16204: LD_INT 103
16206: PUSH
16207: LD_INT 104
16209: PUSH
16210: LD_INT 105
16212: PUSH
16213: LD_INT 106
16215: PUSH
16216: LD_INT 107
16218: PUSH
16219: LD_INT 108
16221: PUSH
16222: LD_INT 109
16224: PUSH
16225: LD_INT 110
16227: PUSH
16228: LD_INT 111
16230: PUSH
16231: LD_INT 112
16233: PUSH
16234: LD_INT 113
16236: PUSH
16237: LD_INT 114
16239: PUSH
16240: LD_INT 116
16242: PUSH
16243: LD_INT 117
16245: PUSH
16246: LD_INT 118
16248: PUSH
16249: EMPTY
16250: LIST
16251: LIST
16252: LIST
16253: LIST
16254: LIST
16255: LIST
16256: LIST
16257: LIST
16258: LIST
16259: LIST
16260: LIST
16261: LIST
16262: LIST
16263: LIST
16264: LIST
16265: LIST
16266: LIST
16267: PUSH
16268: EMPTY
16269: LIST
16270: LIST
16271: ST_TO_ADDR
16272: GO 17279
16274: LD_INT 15
16276: DOUBLE
16277: EQUAL
16278: IFTRUE 16282
16280: GO 16506
16282: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
16283: LD_ADDR_VAR 0 2
16287: PUSH
16288: LD_INT 1
16290: PUSH
16291: LD_INT 2
16293: PUSH
16294: LD_INT 3
16296: PUSH
16297: LD_INT 4
16299: PUSH
16300: LD_INT 5
16302: PUSH
16303: LD_INT 6
16305: PUSH
16306: LD_INT 7
16308: PUSH
16309: LD_INT 8
16311: PUSH
16312: LD_INT 9
16314: PUSH
16315: LD_INT 10
16317: PUSH
16318: LD_INT 11
16320: PUSH
16321: LD_INT 12
16323: PUSH
16324: LD_INT 13
16326: PUSH
16327: LD_INT 14
16329: PUSH
16330: LD_INT 15
16332: PUSH
16333: LD_INT 16
16335: PUSH
16336: LD_INT 17
16338: PUSH
16339: LD_INT 18
16341: PUSH
16342: LD_INT 19
16344: PUSH
16345: LD_INT 20
16347: PUSH
16348: LD_INT 21
16350: PUSH
16351: LD_INT 22
16353: PUSH
16354: LD_INT 23
16356: PUSH
16357: LD_INT 24
16359: PUSH
16360: LD_INT 25
16362: PUSH
16363: LD_INT 26
16365: PUSH
16366: LD_INT 27
16368: PUSH
16369: LD_INT 28
16371: PUSH
16372: LD_INT 29
16374: PUSH
16375: LD_INT 30
16377: PUSH
16378: LD_INT 31
16380: PUSH
16381: LD_INT 32
16383: PUSH
16384: LD_INT 33
16386: PUSH
16387: LD_INT 34
16389: PUSH
16390: LD_INT 36
16392: PUSH
16393: EMPTY
16394: LIST
16395: LIST
16396: LIST
16397: LIST
16398: LIST
16399: LIST
16400: LIST
16401: LIST
16402: LIST
16403: LIST
16404: LIST
16405: LIST
16406: LIST
16407: LIST
16408: LIST
16409: LIST
16410: LIST
16411: LIST
16412: LIST
16413: LIST
16414: LIST
16415: LIST
16416: LIST
16417: LIST
16418: LIST
16419: LIST
16420: LIST
16421: LIST
16422: LIST
16423: LIST
16424: LIST
16425: LIST
16426: LIST
16427: LIST
16428: LIST
16429: PUSH
16430: LD_INT 101
16432: PUSH
16433: LD_INT 102
16435: PUSH
16436: LD_INT 103
16438: PUSH
16439: LD_INT 104
16441: PUSH
16442: LD_INT 105
16444: PUSH
16445: LD_INT 106
16447: PUSH
16448: LD_INT 107
16450: PUSH
16451: LD_INT 108
16453: PUSH
16454: LD_INT 109
16456: PUSH
16457: LD_INT 110
16459: PUSH
16460: LD_INT 111
16462: PUSH
16463: LD_INT 112
16465: PUSH
16466: LD_INT 113
16468: PUSH
16469: LD_INT 114
16471: PUSH
16472: LD_INT 116
16474: PUSH
16475: LD_INT 117
16477: PUSH
16478: LD_INT 118
16480: PUSH
16481: EMPTY
16482: LIST
16483: LIST
16484: LIST
16485: LIST
16486: LIST
16487: LIST
16488: LIST
16489: LIST
16490: LIST
16491: LIST
16492: LIST
16493: LIST
16494: LIST
16495: LIST
16496: LIST
16497: LIST
16498: LIST
16499: PUSH
16500: EMPTY
16501: LIST
16502: LIST
16503: ST_TO_ADDR
16504: GO 17279
16506: LD_INT 16
16508: DOUBLE
16509: EQUAL
16510: IFTRUE 16514
16512: GO 16650
16514: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
16515: LD_ADDR_VAR 0 2
16519: PUSH
16520: LD_INT 2
16522: PUSH
16523: LD_INT 4
16525: PUSH
16526: LD_INT 5
16528: PUSH
16529: LD_INT 7
16531: PUSH
16532: LD_INT 11
16534: PUSH
16535: LD_INT 12
16537: PUSH
16538: LD_INT 15
16540: PUSH
16541: LD_INT 16
16543: PUSH
16544: LD_INT 20
16546: PUSH
16547: LD_INT 21
16549: PUSH
16550: LD_INT 22
16552: PUSH
16553: LD_INT 23
16555: PUSH
16556: LD_INT 25
16558: PUSH
16559: LD_INT 26
16561: PUSH
16562: LD_INT 30
16564: PUSH
16565: LD_INT 31
16567: PUSH
16568: LD_INT 32
16570: PUSH
16571: LD_INT 33
16573: PUSH
16574: LD_INT 34
16576: PUSH
16577: EMPTY
16578: LIST
16579: LIST
16580: LIST
16581: LIST
16582: LIST
16583: LIST
16584: LIST
16585: LIST
16586: LIST
16587: LIST
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: LIST
16597: PUSH
16598: LD_INT 101
16600: PUSH
16601: LD_INT 102
16603: PUSH
16604: LD_INT 103
16606: PUSH
16607: LD_INT 106
16609: PUSH
16610: LD_INT 108
16612: PUSH
16613: LD_INT 112
16615: PUSH
16616: LD_INT 113
16618: PUSH
16619: LD_INT 114
16621: PUSH
16622: LD_INT 116
16624: PUSH
16625: LD_INT 117
16627: PUSH
16628: LD_INT 118
16630: PUSH
16631: EMPTY
16632: LIST
16633: LIST
16634: LIST
16635: LIST
16636: LIST
16637: LIST
16638: LIST
16639: LIST
16640: LIST
16641: LIST
16642: LIST
16643: PUSH
16644: EMPTY
16645: LIST
16646: LIST
16647: ST_TO_ADDR
16648: GO 17279
16650: LD_INT 17
16652: DOUBLE
16653: EQUAL
16654: IFTRUE 16658
16656: GO 16882
16658: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
16659: LD_ADDR_VAR 0 2
16663: PUSH
16664: LD_INT 1
16666: PUSH
16667: LD_INT 2
16669: PUSH
16670: LD_INT 3
16672: PUSH
16673: LD_INT 4
16675: PUSH
16676: LD_INT 5
16678: PUSH
16679: LD_INT 6
16681: PUSH
16682: LD_INT 7
16684: PUSH
16685: LD_INT 8
16687: PUSH
16688: LD_INT 9
16690: PUSH
16691: LD_INT 10
16693: PUSH
16694: LD_INT 11
16696: PUSH
16697: LD_INT 12
16699: PUSH
16700: LD_INT 13
16702: PUSH
16703: LD_INT 14
16705: PUSH
16706: LD_INT 15
16708: PUSH
16709: LD_INT 16
16711: PUSH
16712: LD_INT 17
16714: PUSH
16715: LD_INT 18
16717: PUSH
16718: LD_INT 19
16720: PUSH
16721: LD_INT 20
16723: PUSH
16724: LD_INT 21
16726: PUSH
16727: LD_INT 22
16729: PUSH
16730: LD_INT 23
16732: PUSH
16733: LD_INT 24
16735: PUSH
16736: LD_INT 25
16738: PUSH
16739: LD_INT 26
16741: PUSH
16742: LD_INT 27
16744: PUSH
16745: LD_INT 28
16747: PUSH
16748: LD_INT 29
16750: PUSH
16751: LD_INT 30
16753: PUSH
16754: LD_INT 31
16756: PUSH
16757: LD_INT 32
16759: PUSH
16760: LD_INT 33
16762: PUSH
16763: LD_INT 34
16765: PUSH
16766: LD_INT 36
16768: PUSH
16769: EMPTY
16770: LIST
16771: LIST
16772: LIST
16773: LIST
16774: LIST
16775: LIST
16776: LIST
16777: LIST
16778: LIST
16779: LIST
16780: LIST
16781: LIST
16782: LIST
16783: LIST
16784: LIST
16785: LIST
16786: LIST
16787: LIST
16788: LIST
16789: LIST
16790: LIST
16791: LIST
16792: LIST
16793: LIST
16794: LIST
16795: LIST
16796: LIST
16797: LIST
16798: LIST
16799: LIST
16800: LIST
16801: LIST
16802: LIST
16803: LIST
16804: LIST
16805: PUSH
16806: LD_INT 101
16808: PUSH
16809: LD_INT 102
16811: PUSH
16812: LD_INT 103
16814: PUSH
16815: LD_INT 104
16817: PUSH
16818: LD_INT 105
16820: PUSH
16821: LD_INT 106
16823: PUSH
16824: LD_INT 107
16826: PUSH
16827: LD_INT 108
16829: PUSH
16830: LD_INT 109
16832: PUSH
16833: LD_INT 110
16835: PUSH
16836: LD_INT 111
16838: PUSH
16839: LD_INT 112
16841: PUSH
16842: LD_INT 113
16844: PUSH
16845: LD_INT 114
16847: PUSH
16848: LD_INT 116
16850: PUSH
16851: LD_INT 117
16853: PUSH
16854: LD_INT 118
16856: PUSH
16857: EMPTY
16858: LIST
16859: LIST
16860: LIST
16861: LIST
16862: LIST
16863: LIST
16864: LIST
16865: LIST
16866: LIST
16867: LIST
16868: LIST
16869: LIST
16870: LIST
16871: LIST
16872: LIST
16873: LIST
16874: LIST
16875: PUSH
16876: EMPTY
16877: LIST
16878: LIST
16879: ST_TO_ADDR
16880: GO 17279
16882: LD_INT 18
16884: DOUBLE
16885: EQUAL
16886: IFTRUE 16890
16888: GO 17038
16890: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
16891: LD_ADDR_VAR 0 2
16895: PUSH
16896: LD_INT 2
16898: PUSH
16899: LD_INT 4
16901: PUSH
16902: LD_INT 5
16904: PUSH
16905: LD_INT 7
16907: PUSH
16908: LD_INT 11
16910: PUSH
16911: LD_INT 12
16913: PUSH
16914: LD_INT 15
16916: PUSH
16917: LD_INT 16
16919: PUSH
16920: LD_INT 20
16922: PUSH
16923: LD_INT 21
16925: PUSH
16926: LD_INT 22
16928: PUSH
16929: LD_INT 23
16931: PUSH
16932: LD_INT 25
16934: PUSH
16935: LD_INT 26
16937: PUSH
16938: LD_INT 30
16940: PUSH
16941: LD_INT 31
16943: PUSH
16944: LD_INT 32
16946: PUSH
16947: LD_INT 33
16949: PUSH
16950: LD_INT 34
16952: PUSH
16953: LD_INT 35
16955: PUSH
16956: LD_INT 36
16958: PUSH
16959: EMPTY
16960: LIST
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: LIST
16966: LIST
16967: LIST
16968: LIST
16969: LIST
16970: LIST
16971: LIST
16972: LIST
16973: LIST
16974: LIST
16975: LIST
16976: LIST
16977: LIST
16978: LIST
16979: LIST
16980: LIST
16981: PUSH
16982: LD_INT 101
16984: PUSH
16985: LD_INT 102
16987: PUSH
16988: LD_INT 103
16990: PUSH
16991: LD_INT 106
16993: PUSH
16994: LD_INT 108
16996: PUSH
16997: LD_INT 112
16999: PUSH
17000: LD_INT 113
17002: PUSH
17003: LD_INT 114
17005: PUSH
17006: LD_INT 115
17008: PUSH
17009: LD_INT 116
17011: PUSH
17012: LD_INT 117
17014: PUSH
17015: LD_INT 118
17017: PUSH
17018: EMPTY
17019: LIST
17020: LIST
17021: LIST
17022: LIST
17023: LIST
17024: LIST
17025: LIST
17026: LIST
17027: LIST
17028: LIST
17029: LIST
17030: LIST
17031: PUSH
17032: EMPTY
17033: LIST
17034: LIST
17035: ST_TO_ADDR
17036: GO 17279
17038: LD_INT 19
17040: DOUBLE
17041: EQUAL
17042: IFTRUE 17046
17044: GO 17278
17046: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
17047: LD_ADDR_VAR 0 2
17051: PUSH
17052: LD_INT 1
17054: PUSH
17055: LD_INT 2
17057: PUSH
17058: LD_INT 3
17060: PUSH
17061: LD_INT 4
17063: PUSH
17064: LD_INT 5
17066: PUSH
17067: LD_INT 6
17069: PUSH
17070: LD_INT 7
17072: PUSH
17073: LD_INT 8
17075: PUSH
17076: LD_INT 9
17078: PUSH
17079: LD_INT 10
17081: PUSH
17082: LD_INT 11
17084: PUSH
17085: LD_INT 12
17087: PUSH
17088: LD_INT 13
17090: PUSH
17091: LD_INT 14
17093: PUSH
17094: LD_INT 15
17096: PUSH
17097: LD_INT 16
17099: PUSH
17100: LD_INT 17
17102: PUSH
17103: LD_INT 18
17105: PUSH
17106: LD_INT 19
17108: PUSH
17109: LD_INT 20
17111: PUSH
17112: LD_INT 21
17114: PUSH
17115: LD_INT 22
17117: PUSH
17118: LD_INT 23
17120: PUSH
17121: LD_INT 24
17123: PUSH
17124: LD_INT 25
17126: PUSH
17127: LD_INT 26
17129: PUSH
17130: LD_INT 27
17132: PUSH
17133: LD_INT 28
17135: PUSH
17136: LD_INT 29
17138: PUSH
17139: LD_INT 30
17141: PUSH
17142: LD_INT 31
17144: PUSH
17145: LD_INT 32
17147: PUSH
17148: LD_INT 33
17150: PUSH
17151: LD_INT 34
17153: PUSH
17154: LD_INT 35
17156: PUSH
17157: LD_INT 36
17159: PUSH
17160: EMPTY
17161: LIST
17162: LIST
17163: LIST
17164: LIST
17165: LIST
17166: LIST
17167: LIST
17168: LIST
17169: LIST
17170: LIST
17171: LIST
17172: LIST
17173: LIST
17174: LIST
17175: LIST
17176: LIST
17177: LIST
17178: LIST
17179: LIST
17180: LIST
17181: LIST
17182: LIST
17183: LIST
17184: LIST
17185: LIST
17186: LIST
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: LIST
17197: PUSH
17198: LD_INT 101
17200: PUSH
17201: LD_INT 102
17203: PUSH
17204: LD_INT 103
17206: PUSH
17207: LD_INT 104
17209: PUSH
17210: LD_INT 105
17212: PUSH
17213: LD_INT 106
17215: PUSH
17216: LD_INT 107
17218: PUSH
17219: LD_INT 108
17221: PUSH
17222: LD_INT 109
17224: PUSH
17225: LD_INT 110
17227: PUSH
17228: LD_INT 111
17230: PUSH
17231: LD_INT 112
17233: PUSH
17234: LD_INT 113
17236: PUSH
17237: LD_INT 114
17239: PUSH
17240: LD_INT 115
17242: PUSH
17243: LD_INT 116
17245: PUSH
17246: LD_INT 117
17248: PUSH
17249: LD_INT 118
17251: PUSH
17252: EMPTY
17253: LIST
17254: LIST
17255: LIST
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: PUSH
17272: EMPTY
17273: LIST
17274: LIST
17275: ST_TO_ADDR
17276: GO 17279
17278: POP
// end else
17279: GO 17510
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
17281: LD_ADDR_VAR 0 2
17285: PUSH
17286: LD_INT 1
17288: PUSH
17289: LD_INT 2
17291: PUSH
17292: LD_INT 3
17294: PUSH
17295: LD_INT 4
17297: PUSH
17298: LD_INT 5
17300: PUSH
17301: LD_INT 6
17303: PUSH
17304: LD_INT 7
17306: PUSH
17307: LD_INT 8
17309: PUSH
17310: LD_INT 9
17312: PUSH
17313: LD_INT 10
17315: PUSH
17316: LD_INT 11
17318: PUSH
17319: LD_INT 12
17321: PUSH
17322: LD_INT 13
17324: PUSH
17325: LD_INT 14
17327: PUSH
17328: LD_INT 15
17330: PUSH
17331: LD_INT 16
17333: PUSH
17334: LD_INT 17
17336: PUSH
17337: LD_INT 18
17339: PUSH
17340: LD_INT 19
17342: PUSH
17343: LD_INT 20
17345: PUSH
17346: LD_INT 21
17348: PUSH
17349: LD_INT 22
17351: PUSH
17352: LD_INT 23
17354: PUSH
17355: LD_INT 24
17357: PUSH
17358: LD_INT 25
17360: PUSH
17361: LD_INT 26
17363: PUSH
17364: LD_INT 27
17366: PUSH
17367: LD_INT 28
17369: PUSH
17370: LD_INT 29
17372: PUSH
17373: LD_INT 30
17375: PUSH
17376: LD_INT 31
17378: PUSH
17379: LD_INT 32
17381: PUSH
17382: LD_INT 33
17384: PUSH
17385: LD_INT 34
17387: PUSH
17388: LD_INT 35
17390: PUSH
17391: LD_INT 36
17393: PUSH
17394: EMPTY
17395: LIST
17396: LIST
17397: LIST
17398: LIST
17399: LIST
17400: LIST
17401: LIST
17402: LIST
17403: LIST
17404: LIST
17405: LIST
17406: LIST
17407: LIST
17408: LIST
17409: LIST
17410: LIST
17411: LIST
17412: LIST
17413: LIST
17414: LIST
17415: LIST
17416: LIST
17417: LIST
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: LIST
17424: LIST
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: PUSH
17432: LD_INT 101
17434: PUSH
17435: LD_INT 102
17437: PUSH
17438: LD_INT 103
17440: PUSH
17441: LD_INT 104
17443: PUSH
17444: LD_INT 105
17446: PUSH
17447: LD_INT 106
17449: PUSH
17450: LD_INT 107
17452: PUSH
17453: LD_INT 108
17455: PUSH
17456: LD_INT 109
17458: PUSH
17459: LD_INT 110
17461: PUSH
17462: LD_INT 111
17464: PUSH
17465: LD_INT 112
17467: PUSH
17468: LD_INT 113
17470: PUSH
17471: LD_INT 114
17473: PUSH
17474: LD_INT 115
17476: PUSH
17477: LD_INT 116
17479: PUSH
17480: LD_INT 117
17482: PUSH
17483: LD_INT 118
17485: PUSH
17486: EMPTY
17487: LIST
17488: LIST
17489: LIST
17490: LIST
17491: LIST
17492: LIST
17493: LIST
17494: LIST
17495: LIST
17496: LIST
17497: LIST
17498: LIST
17499: LIST
17500: LIST
17501: LIST
17502: LIST
17503: LIST
17504: LIST
17505: PUSH
17506: EMPTY
17507: LIST
17508: LIST
17509: ST_TO_ADDR
// if result then
17510: LD_VAR 0 2
17514: IFFALSE 18300
// begin normal :=  ;
17516: LD_ADDR_VAR 0 5
17520: PUSH
17521: LD_STRING 
17523: ST_TO_ADDR
// hardcore :=  ;
17524: LD_ADDR_VAR 0 6
17528: PUSH
17529: LD_STRING 
17531: ST_TO_ADDR
// active :=  ;
17532: LD_ADDR_VAR 0 7
17536: PUSH
17537: LD_STRING 
17539: ST_TO_ADDR
// for i = 1 to normalCounter do
17540: LD_ADDR_VAR 0 8
17544: PUSH
17545: DOUBLE
17546: LD_INT 1
17548: DEC
17549: ST_TO_ADDR
17550: LD_EXP 23
17554: PUSH
17555: FOR_TO
17556: IFFALSE 17657
// begin tmp := 0 ;
17558: LD_ADDR_VAR 0 3
17562: PUSH
17563: LD_STRING 0
17565: ST_TO_ADDR
// if result [ 1 ] then
17566: LD_VAR 0 2
17570: PUSH
17571: LD_INT 1
17573: ARRAY
17574: IFFALSE 17639
// if result [ 1 ] [ 1 ] = i then
17576: LD_VAR 0 2
17580: PUSH
17581: LD_INT 1
17583: ARRAY
17584: PUSH
17585: LD_INT 1
17587: ARRAY
17588: PUSH
17589: LD_VAR 0 8
17593: EQUAL
17594: IFFALSE 17639
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
17596: LD_ADDR_VAR 0 2
17600: PUSH
17601: LD_VAR 0 2
17605: PPUSH
17606: LD_INT 1
17608: PPUSH
17609: LD_VAR 0 2
17613: PUSH
17614: LD_INT 1
17616: ARRAY
17617: PPUSH
17618: LD_INT 1
17620: PPUSH
17621: CALL_OW 3
17625: PPUSH
17626: CALL_OW 1
17630: ST_TO_ADDR
// tmp := 1 ;
17631: LD_ADDR_VAR 0 3
17635: PUSH
17636: LD_STRING 1
17638: ST_TO_ADDR
// end ; normal := normal & tmp ;
17639: LD_ADDR_VAR 0 5
17643: PUSH
17644: LD_VAR 0 5
17648: PUSH
17649: LD_VAR 0 3
17653: STR
17654: ST_TO_ADDR
// end ;
17655: GO 17555
17657: POP
17658: POP
// for i = 1 to hardcoreCounter do
17659: LD_ADDR_VAR 0 8
17663: PUSH
17664: DOUBLE
17665: LD_INT 1
17667: DEC
17668: ST_TO_ADDR
17669: LD_EXP 24
17673: PUSH
17674: FOR_TO
17675: IFFALSE 17780
// begin tmp := 0 ;
17677: LD_ADDR_VAR 0 3
17681: PUSH
17682: LD_STRING 0
17684: ST_TO_ADDR
// if result [ 2 ] then
17685: LD_VAR 0 2
17689: PUSH
17690: LD_INT 2
17692: ARRAY
17693: IFFALSE 17762
// if result [ 2 ] [ 1 ] = 100 + i then
17695: LD_VAR 0 2
17699: PUSH
17700: LD_INT 2
17702: ARRAY
17703: PUSH
17704: LD_INT 1
17706: ARRAY
17707: PUSH
17708: LD_INT 100
17710: PUSH
17711: LD_VAR 0 8
17715: PLUS
17716: EQUAL
17717: IFFALSE 17762
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
17719: LD_ADDR_VAR 0 2
17723: PUSH
17724: LD_VAR 0 2
17728: PPUSH
17729: LD_INT 2
17731: PPUSH
17732: LD_VAR 0 2
17736: PUSH
17737: LD_INT 2
17739: ARRAY
17740: PPUSH
17741: LD_INT 1
17743: PPUSH
17744: CALL_OW 3
17748: PPUSH
17749: CALL_OW 1
17753: ST_TO_ADDR
// tmp := 1 ;
17754: LD_ADDR_VAR 0 3
17758: PUSH
17759: LD_STRING 1
17761: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
17762: LD_ADDR_VAR 0 6
17766: PUSH
17767: LD_VAR 0 6
17771: PUSH
17772: LD_VAR 0 3
17776: STR
17777: ST_TO_ADDR
// end ;
17778: GO 17674
17780: POP
17781: POP
// if isGameLoad then
17782: LD_VAR 0 1
17786: IFFALSE 18261
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
17788: LD_ADDR_VAR 0 4
17792: PUSH
17793: LD_EXP 27
17797: PUSH
17798: LD_EXP 26
17802: PUSH
17803: LD_EXP 28
17807: PUSH
17808: LD_EXP 25
17812: PUSH
17813: LD_EXP 29
17817: PUSH
17818: LD_EXP 30
17822: PUSH
17823: LD_EXP 31
17827: PUSH
17828: LD_EXP 32
17832: PUSH
17833: LD_EXP 33
17837: PUSH
17838: LD_EXP 34
17842: PUSH
17843: LD_EXP 35
17847: PUSH
17848: LD_EXP 36
17852: PUSH
17853: LD_EXP 37
17857: PUSH
17858: LD_EXP 38
17862: PUSH
17863: LD_EXP 46
17867: PUSH
17868: LD_EXP 47
17872: PUSH
17873: LD_EXP 48
17877: PUSH
17878: LD_EXP 49
17882: PUSH
17883: LD_EXP 51
17887: PUSH
17888: LD_EXP 52
17892: PUSH
17893: LD_EXP 53
17897: PUSH
17898: LD_EXP 56
17902: PUSH
17903: LD_EXP 58
17907: PUSH
17908: LD_EXP 59
17912: PUSH
17913: LD_EXP 60
17917: PUSH
17918: LD_EXP 62
17922: PUSH
17923: LD_EXP 63
17927: PUSH
17928: LD_EXP 66
17932: PUSH
17933: LD_EXP 67
17937: PUSH
17938: LD_EXP 68
17942: PUSH
17943: LD_EXP 69
17947: PUSH
17948: LD_EXP 70
17952: PUSH
17953: LD_EXP 71
17957: PUSH
17958: LD_EXP 72
17962: PUSH
17963: LD_EXP 73
17967: PUSH
17968: LD_EXP 74
17972: PUSH
17973: LD_EXP 39
17977: PUSH
17978: LD_EXP 40
17982: PUSH
17983: LD_EXP 43
17987: PUSH
17988: LD_EXP 44
17992: PUSH
17993: LD_EXP 45
17997: PUSH
17998: LD_EXP 41
18002: PUSH
18003: LD_EXP 42
18007: PUSH
18008: LD_EXP 50
18012: PUSH
18013: LD_EXP 54
18017: PUSH
18018: LD_EXP 55
18022: PUSH
18023: LD_EXP 57
18027: PUSH
18028: LD_EXP 61
18032: PUSH
18033: LD_EXP 64
18037: PUSH
18038: LD_EXP 65
18042: PUSH
18043: LD_EXP 75
18047: PUSH
18048: LD_EXP 76
18052: PUSH
18053: LD_EXP 77
18057: PUSH
18058: LD_EXP 78
18062: PUSH
18063: EMPTY
18064: LIST
18065: LIST
18066: LIST
18067: LIST
18068: LIST
18069: LIST
18070: LIST
18071: LIST
18072: LIST
18073: LIST
18074: LIST
18075: LIST
18076: LIST
18077: LIST
18078: LIST
18079: LIST
18080: LIST
18081: LIST
18082: LIST
18083: LIST
18084: LIST
18085: LIST
18086: LIST
18087: LIST
18088: LIST
18089: LIST
18090: LIST
18091: LIST
18092: LIST
18093: LIST
18094: LIST
18095: LIST
18096: LIST
18097: LIST
18098: LIST
18099: LIST
18100: LIST
18101: LIST
18102: LIST
18103: LIST
18104: LIST
18105: LIST
18106: LIST
18107: LIST
18108: LIST
18109: LIST
18110: LIST
18111: LIST
18112: LIST
18113: LIST
18114: LIST
18115: LIST
18116: LIST
18117: LIST
18118: ST_TO_ADDR
// tmp :=  ;
18119: LD_ADDR_VAR 0 3
18123: PUSH
18124: LD_STRING 
18126: ST_TO_ADDR
// for i = 1 to normalCounter do
18127: LD_ADDR_VAR 0 8
18131: PUSH
18132: DOUBLE
18133: LD_INT 1
18135: DEC
18136: ST_TO_ADDR
18137: LD_EXP 23
18141: PUSH
18142: FOR_TO
18143: IFFALSE 18179
// begin if flags [ i ] then
18145: LD_VAR 0 4
18149: PUSH
18150: LD_VAR 0 8
18154: ARRAY
18155: IFFALSE 18177
// tmp := tmp & i & ; ;
18157: LD_ADDR_VAR 0 3
18161: PUSH
18162: LD_VAR 0 3
18166: PUSH
18167: LD_VAR 0 8
18171: STR
18172: PUSH
18173: LD_STRING ;
18175: STR
18176: ST_TO_ADDR
// end ;
18177: GO 18142
18179: POP
18180: POP
// for i = 1 to hardcoreCounter do
18181: LD_ADDR_VAR 0 8
18185: PUSH
18186: DOUBLE
18187: LD_INT 1
18189: DEC
18190: ST_TO_ADDR
18191: LD_EXP 24
18195: PUSH
18196: FOR_TO
18197: IFFALSE 18243
// begin if flags [ normalCounter + i ] then
18199: LD_VAR 0 4
18203: PUSH
18204: LD_EXP 23
18208: PUSH
18209: LD_VAR 0 8
18213: PLUS
18214: ARRAY
18215: IFFALSE 18241
// tmp := tmp & ( 100 + i ) & ; ;
18217: LD_ADDR_VAR 0 3
18221: PUSH
18222: LD_VAR 0 3
18226: PUSH
18227: LD_INT 100
18229: PUSH
18230: LD_VAR 0 8
18234: PLUS
18235: STR
18236: PUSH
18237: LD_STRING ;
18239: STR
18240: ST_TO_ADDR
// end ;
18241: GO 18196
18243: POP
18244: POP
// if tmp then
18245: LD_VAR 0 3
18249: IFFALSE 18261
// active := tmp ;
18251: LD_ADDR_VAR 0 7
18255: PUSH
18256: LD_VAR 0 3
18260: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
18261: LD_STRING getStreamItemsFromMission("
18263: PUSH
18264: LD_VAR 0 5
18268: STR
18269: PUSH
18270: LD_STRING ","
18272: STR
18273: PUSH
18274: LD_VAR 0 6
18278: STR
18279: PUSH
18280: LD_STRING ","
18282: STR
18283: PUSH
18284: LD_VAR 0 7
18288: STR
18289: PUSH
18290: LD_STRING ")
18292: STR
18293: PPUSH
18294: CALL_OW 559
// end else
18298: GO 18307
// ToLua ( getStreamItemsFromMission("","","") ) ;
18300: LD_STRING getStreamItemsFromMission("","","")
18302: PPUSH
18303: CALL_OW 559
// end ;
18307: LD_VAR 0 2
18311: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
18312: LD_EXP 22
18316: PUSH
18317: LD_EXP 27
18321: AND
18322: IFFALSE 18446
18324: GO 18326
18326: DISABLE
18327: LD_INT 0
18329: PPUSH
18330: PPUSH
// begin enable ;
18331: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
18332: LD_ADDR_VAR 0 2
18336: PUSH
18337: LD_INT 22
18339: PUSH
18340: LD_OWVAR 2
18344: PUSH
18345: EMPTY
18346: LIST
18347: LIST
18348: PUSH
18349: LD_INT 2
18351: PUSH
18352: LD_INT 34
18354: PUSH
18355: LD_INT 7
18357: PUSH
18358: EMPTY
18359: LIST
18360: LIST
18361: PUSH
18362: LD_INT 34
18364: PUSH
18365: LD_INT 45
18367: PUSH
18368: EMPTY
18369: LIST
18370: LIST
18371: PUSH
18372: LD_INT 34
18374: PUSH
18375: LD_INT 28
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: PUSH
18382: LD_INT 34
18384: PUSH
18385: LD_INT 47
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: PUSH
18392: EMPTY
18393: LIST
18394: LIST
18395: LIST
18396: LIST
18397: LIST
18398: PUSH
18399: EMPTY
18400: LIST
18401: LIST
18402: PPUSH
18403: CALL_OW 69
18407: ST_TO_ADDR
// if not tmp then
18408: LD_VAR 0 2
18412: NOT
18413: IFFALSE 18417
// exit ;
18415: GO 18446
// for i in tmp do
18417: LD_ADDR_VAR 0 1
18421: PUSH
18422: LD_VAR 0 2
18426: PUSH
18427: FOR_IN
18428: IFFALSE 18444
// begin SetLives ( i , 0 ) ;
18430: LD_VAR 0 1
18434: PPUSH
18435: LD_INT 0
18437: PPUSH
18438: CALL_OW 234
// end ;
18442: GO 18427
18444: POP
18445: POP
// end ;
18446: PPOPN 2
18448: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
18449: LD_EXP 22
18453: PUSH
18454: LD_EXP 28
18458: AND
18459: IFFALSE 18543
18461: GO 18463
18463: DISABLE
18464: LD_INT 0
18466: PPUSH
18467: PPUSH
// begin enable ;
18468: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
18469: LD_ADDR_VAR 0 2
18473: PUSH
18474: LD_INT 22
18476: PUSH
18477: LD_OWVAR 2
18481: PUSH
18482: EMPTY
18483: LIST
18484: LIST
18485: PUSH
18486: LD_INT 32
18488: PUSH
18489: LD_INT 3
18491: PUSH
18492: EMPTY
18493: LIST
18494: LIST
18495: PUSH
18496: EMPTY
18497: LIST
18498: LIST
18499: PPUSH
18500: CALL_OW 69
18504: ST_TO_ADDR
// if not tmp then
18505: LD_VAR 0 2
18509: NOT
18510: IFFALSE 18514
// exit ;
18512: GO 18543
// for i in tmp do
18514: LD_ADDR_VAR 0 1
18518: PUSH
18519: LD_VAR 0 2
18523: PUSH
18524: FOR_IN
18525: IFFALSE 18541
// begin SetLives ( i , 0 ) ;
18527: LD_VAR 0 1
18531: PPUSH
18532: LD_INT 0
18534: PPUSH
18535: CALL_OW 234
// end ;
18539: GO 18524
18541: POP
18542: POP
// end ;
18543: PPOPN 2
18545: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
18546: LD_EXP 22
18550: PUSH
18551: LD_EXP 25
18555: AND
18556: IFFALSE 18649
18558: GO 18560
18560: DISABLE
18561: LD_INT 0
18563: PPUSH
// begin enable ;
18564: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
18565: LD_ADDR_VAR 0 1
18569: PUSH
18570: LD_INT 22
18572: PUSH
18573: LD_OWVAR 2
18577: PUSH
18578: EMPTY
18579: LIST
18580: LIST
18581: PUSH
18582: LD_INT 2
18584: PUSH
18585: LD_INT 25
18587: PUSH
18588: LD_INT 5
18590: PUSH
18591: EMPTY
18592: LIST
18593: LIST
18594: PUSH
18595: LD_INT 25
18597: PUSH
18598: LD_INT 9
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: PUSH
18605: LD_INT 25
18607: PUSH
18608: LD_INT 8
18610: PUSH
18611: EMPTY
18612: LIST
18613: LIST
18614: PUSH
18615: EMPTY
18616: LIST
18617: LIST
18618: LIST
18619: LIST
18620: PUSH
18621: EMPTY
18622: LIST
18623: LIST
18624: PPUSH
18625: CALL_OW 69
18629: PUSH
18630: FOR_IN
18631: IFFALSE 18647
// begin SetClass ( i , 1 ) ;
18633: LD_VAR 0 1
18637: PPUSH
18638: LD_INT 1
18640: PPUSH
18641: CALL_OW 336
// end ;
18645: GO 18630
18647: POP
18648: POP
// end ;
18649: PPOPN 1
18651: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
18652: LD_EXP 22
18656: PUSH
18657: LD_EXP 26
18661: AND
18662: PUSH
18663: LD_OWVAR 65
18667: PUSH
18668: LD_INT 7
18670: LESS
18671: AND
18672: IFFALSE 18686
18674: GO 18676
18676: DISABLE
// begin enable ;
18677: ENABLE
// game_speed := 7 ;
18678: LD_ADDR_OWVAR 65
18682: PUSH
18683: LD_INT 7
18685: ST_TO_ADDR
// end ;
18686: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
18687: LD_EXP 22
18691: PUSH
18692: LD_EXP 29
18696: AND
18697: IFFALSE 18899
18699: GO 18701
18701: DISABLE
18702: LD_INT 0
18704: PPUSH
18705: PPUSH
18706: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18707: LD_ADDR_VAR 0 3
18711: PUSH
18712: LD_INT 81
18714: PUSH
18715: LD_OWVAR 2
18719: PUSH
18720: EMPTY
18721: LIST
18722: LIST
18723: PUSH
18724: LD_INT 21
18726: PUSH
18727: LD_INT 1
18729: PUSH
18730: EMPTY
18731: LIST
18732: LIST
18733: PUSH
18734: EMPTY
18735: LIST
18736: LIST
18737: PPUSH
18738: CALL_OW 69
18742: ST_TO_ADDR
// if not tmp then
18743: LD_VAR 0 3
18747: NOT
18748: IFFALSE 18752
// exit ;
18750: GO 18899
// if tmp > 5 then
18752: LD_VAR 0 3
18756: PUSH
18757: LD_INT 5
18759: GREATER
18760: IFFALSE 18772
// k := 5 else
18762: LD_ADDR_VAR 0 2
18766: PUSH
18767: LD_INT 5
18769: ST_TO_ADDR
18770: GO 18782
// k := tmp ;
18772: LD_ADDR_VAR 0 2
18776: PUSH
18777: LD_VAR 0 3
18781: ST_TO_ADDR
// for i := 1 to k do
18782: LD_ADDR_VAR 0 1
18786: PUSH
18787: DOUBLE
18788: LD_INT 1
18790: DEC
18791: ST_TO_ADDR
18792: LD_VAR 0 2
18796: PUSH
18797: FOR_TO
18798: IFFALSE 18897
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
18800: LD_VAR 0 3
18804: PUSH
18805: LD_VAR 0 1
18809: ARRAY
18810: PPUSH
18811: LD_VAR 0 1
18815: PUSH
18816: LD_INT 4
18818: MOD
18819: PUSH
18820: LD_INT 1
18822: PLUS
18823: PPUSH
18824: CALL_OW 259
18828: PUSH
18829: LD_INT 10
18831: LESS
18832: IFFALSE 18895
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
18834: LD_VAR 0 3
18838: PUSH
18839: LD_VAR 0 1
18843: ARRAY
18844: PPUSH
18845: LD_VAR 0 1
18849: PUSH
18850: LD_INT 4
18852: MOD
18853: PUSH
18854: LD_INT 1
18856: PLUS
18857: PPUSH
18858: LD_VAR 0 3
18862: PUSH
18863: LD_VAR 0 1
18867: ARRAY
18868: PPUSH
18869: LD_VAR 0 1
18873: PUSH
18874: LD_INT 4
18876: MOD
18877: PUSH
18878: LD_INT 1
18880: PLUS
18881: PPUSH
18882: CALL_OW 259
18886: PUSH
18887: LD_INT 1
18889: PLUS
18890: PPUSH
18891: CALL_OW 237
18895: GO 18797
18897: POP
18898: POP
// end ;
18899: PPOPN 3
18901: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
18902: LD_EXP 22
18906: PUSH
18907: LD_EXP 30
18911: AND
18912: IFFALSE 18932
18914: GO 18916
18916: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
18917: LD_INT 4
18919: PPUSH
18920: LD_OWVAR 2
18924: PPUSH
18925: LD_INT 0
18927: PPUSH
18928: CALL_OW 324
18932: END
// every 0 0$1 trigger StreamModeActive and sShovel do
18933: LD_EXP 22
18937: PUSH
18938: LD_EXP 59
18942: AND
18943: IFFALSE 18963
18945: GO 18947
18947: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
18948: LD_INT 19
18950: PPUSH
18951: LD_OWVAR 2
18955: PPUSH
18956: LD_INT 0
18958: PPUSH
18959: CALL_OW 324
18963: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
18964: LD_EXP 22
18968: PUSH
18969: LD_EXP 31
18973: AND
18974: IFFALSE 19076
18976: GO 18978
18978: DISABLE
18979: LD_INT 0
18981: PPUSH
18982: PPUSH
// begin enable ;
18983: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
18984: LD_ADDR_VAR 0 2
18988: PUSH
18989: LD_INT 22
18991: PUSH
18992: LD_OWVAR 2
18996: PUSH
18997: EMPTY
18998: LIST
18999: LIST
19000: PUSH
19001: LD_INT 2
19003: PUSH
19004: LD_INT 34
19006: PUSH
19007: LD_INT 11
19009: PUSH
19010: EMPTY
19011: LIST
19012: LIST
19013: PUSH
19014: LD_INT 34
19016: PUSH
19017: LD_INT 30
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: LIST
19028: PUSH
19029: EMPTY
19030: LIST
19031: LIST
19032: PPUSH
19033: CALL_OW 69
19037: ST_TO_ADDR
// if not tmp then
19038: LD_VAR 0 2
19042: NOT
19043: IFFALSE 19047
// exit ;
19045: GO 19076
// for i in tmp do
19047: LD_ADDR_VAR 0 1
19051: PUSH
19052: LD_VAR 0 2
19056: PUSH
19057: FOR_IN
19058: IFFALSE 19074
// begin SetLives ( i , 0 ) ;
19060: LD_VAR 0 1
19064: PPUSH
19065: LD_INT 0
19067: PPUSH
19068: CALL_OW 234
// end ;
19072: GO 19057
19074: POP
19075: POP
// end ;
19076: PPOPN 2
19078: END
// every 0 0$1 trigger StreamModeActive and sBunker do
19079: LD_EXP 22
19083: PUSH
19084: LD_EXP 32
19088: AND
19089: IFFALSE 19109
19091: GO 19093
19093: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
19094: LD_INT 32
19096: PPUSH
19097: LD_OWVAR 2
19101: PPUSH
19102: LD_INT 0
19104: PPUSH
19105: CALL_OW 324
19109: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
19110: LD_EXP 22
19114: PUSH
19115: LD_EXP 33
19119: AND
19120: IFFALSE 19301
19122: GO 19124
19124: DISABLE
19125: LD_INT 0
19127: PPUSH
19128: PPUSH
19129: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
19130: LD_ADDR_VAR 0 2
19134: PUSH
19135: LD_INT 22
19137: PUSH
19138: LD_OWVAR 2
19142: PUSH
19143: EMPTY
19144: LIST
19145: LIST
19146: PUSH
19147: LD_INT 33
19149: PUSH
19150: LD_INT 3
19152: PUSH
19153: EMPTY
19154: LIST
19155: LIST
19156: PUSH
19157: EMPTY
19158: LIST
19159: LIST
19160: PPUSH
19161: CALL_OW 69
19165: ST_TO_ADDR
// if not tmp then
19166: LD_VAR 0 2
19170: NOT
19171: IFFALSE 19175
// exit ;
19173: GO 19301
// side := 0 ;
19175: LD_ADDR_VAR 0 3
19179: PUSH
19180: LD_INT 0
19182: ST_TO_ADDR
// for i := 1 to 8 do
19183: LD_ADDR_VAR 0 1
19187: PUSH
19188: DOUBLE
19189: LD_INT 1
19191: DEC
19192: ST_TO_ADDR
19193: LD_INT 8
19195: PUSH
19196: FOR_TO
19197: IFFALSE 19245
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
19199: LD_OWVAR 2
19203: PUSH
19204: LD_VAR 0 1
19208: NONEQUAL
19209: PUSH
19210: LD_OWVAR 2
19214: PPUSH
19215: LD_VAR 0 1
19219: PPUSH
19220: CALL_OW 81
19224: PUSH
19225: LD_INT 2
19227: EQUAL
19228: AND
19229: IFFALSE 19243
// begin side := i ;
19231: LD_ADDR_VAR 0 3
19235: PUSH
19236: LD_VAR 0 1
19240: ST_TO_ADDR
// break ;
19241: GO 19245
// end ;
19243: GO 19196
19245: POP
19246: POP
// if not side then
19247: LD_VAR 0 3
19251: NOT
19252: IFFALSE 19256
// exit ;
19254: GO 19301
// for i := 1 to tmp do
19256: LD_ADDR_VAR 0 1
19260: PUSH
19261: DOUBLE
19262: LD_INT 1
19264: DEC
19265: ST_TO_ADDR
19266: LD_VAR 0 2
19270: PUSH
19271: FOR_TO
19272: IFFALSE 19299
// if Prob ( 60 ) then
19274: LD_INT 60
19276: PPUSH
19277: CALL_OW 13
19281: IFFALSE 19297
// SetSide ( i , side ) ;
19283: LD_VAR 0 1
19287: PPUSH
19288: LD_VAR 0 3
19292: PPUSH
19293: CALL_OW 235
19297: GO 19271
19299: POP
19300: POP
// end ;
19301: PPOPN 3
19303: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
19304: LD_EXP 22
19308: PUSH
19309: LD_EXP 35
19313: AND
19314: IFFALSE 19433
19316: GO 19318
19318: DISABLE
19319: LD_INT 0
19321: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
19322: LD_ADDR_VAR 0 1
19326: PUSH
19327: LD_INT 22
19329: PUSH
19330: LD_OWVAR 2
19334: PUSH
19335: EMPTY
19336: LIST
19337: LIST
19338: PUSH
19339: LD_INT 21
19341: PUSH
19342: LD_INT 1
19344: PUSH
19345: EMPTY
19346: LIST
19347: LIST
19348: PUSH
19349: LD_INT 3
19351: PUSH
19352: LD_INT 23
19354: PUSH
19355: LD_INT 0
19357: PUSH
19358: EMPTY
19359: LIST
19360: LIST
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: PUSH
19366: EMPTY
19367: LIST
19368: LIST
19369: LIST
19370: PPUSH
19371: CALL_OW 69
19375: PUSH
19376: FOR_IN
19377: IFFALSE 19431
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
19379: LD_VAR 0 1
19383: PPUSH
19384: CALL_OW 257
19388: PUSH
19389: LD_INT 1
19391: PUSH
19392: LD_INT 2
19394: PUSH
19395: LD_INT 3
19397: PUSH
19398: LD_INT 4
19400: PUSH
19401: EMPTY
19402: LIST
19403: LIST
19404: LIST
19405: LIST
19406: IN
19407: IFFALSE 19429
// SetClass ( un , rand ( 1 , 4 ) ) ;
19409: LD_VAR 0 1
19413: PPUSH
19414: LD_INT 1
19416: PPUSH
19417: LD_INT 4
19419: PPUSH
19420: CALL_OW 12
19424: PPUSH
19425: CALL_OW 336
19429: GO 19376
19431: POP
19432: POP
// end ;
19433: PPOPN 1
19435: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
19436: LD_EXP 22
19440: PUSH
19441: LD_EXP 34
19445: AND
19446: IFFALSE 19525
19448: GO 19450
19450: DISABLE
19451: LD_INT 0
19453: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19454: LD_ADDR_VAR 0 1
19458: PUSH
19459: LD_INT 22
19461: PUSH
19462: LD_OWVAR 2
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: PUSH
19471: LD_INT 21
19473: PUSH
19474: LD_INT 3
19476: PUSH
19477: EMPTY
19478: LIST
19479: LIST
19480: PUSH
19481: EMPTY
19482: LIST
19483: LIST
19484: PPUSH
19485: CALL_OW 69
19489: ST_TO_ADDR
// if not tmp then
19490: LD_VAR 0 1
19494: NOT
19495: IFFALSE 19499
// exit ;
19497: GO 19525
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
19499: LD_VAR 0 1
19503: PUSH
19504: LD_INT 1
19506: PPUSH
19507: LD_VAR 0 1
19511: PPUSH
19512: CALL_OW 12
19516: ARRAY
19517: PPUSH
19518: LD_INT 100
19520: PPUSH
19521: CALL_OW 234
// end ;
19525: PPOPN 1
19527: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
19528: LD_EXP 22
19532: PUSH
19533: LD_EXP 36
19537: AND
19538: IFFALSE 19636
19540: GO 19542
19542: DISABLE
19543: LD_INT 0
19545: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19546: LD_ADDR_VAR 0 1
19550: PUSH
19551: LD_INT 22
19553: PUSH
19554: LD_OWVAR 2
19558: PUSH
19559: EMPTY
19560: LIST
19561: LIST
19562: PUSH
19563: LD_INT 21
19565: PUSH
19566: LD_INT 1
19568: PUSH
19569: EMPTY
19570: LIST
19571: LIST
19572: PUSH
19573: EMPTY
19574: LIST
19575: LIST
19576: PPUSH
19577: CALL_OW 69
19581: ST_TO_ADDR
// if not tmp then
19582: LD_VAR 0 1
19586: NOT
19587: IFFALSE 19591
// exit ;
19589: GO 19636
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
19591: LD_VAR 0 1
19595: PUSH
19596: LD_INT 1
19598: PPUSH
19599: LD_VAR 0 1
19603: PPUSH
19604: CALL_OW 12
19608: ARRAY
19609: PPUSH
19610: LD_INT 1
19612: PPUSH
19613: LD_INT 4
19615: PPUSH
19616: CALL_OW 12
19620: PPUSH
19621: LD_INT 3000
19623: PPUSH
19624: LD_INT 9000
19626: PPUSH
19627: CALL_OW 12
19631: PPUSH
19632: CALL_OW 492
// end ;
19636: PPOPN 1
19638: END
// every 0 0$1 trigger StreamModeActive and sDepot do
19639: LD_EXP 22
19643: PUSH
19644: LD_EXP 37
19648: AND
19649: IFFALSE 19669
19651: GO 19653
19653: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
19654: LD_INT 1
19656: PPUSH
19657: LD_OWVAR 2
19661: PPUSH
19662: LD_INT 0
19664: PPUSH
19665: CALL_OW 324
19669: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
19670: LD_EXP 22
19674: PUSH
19675: LD_EXP 38
19679: AND
19680: IFFALSE 19763
19682: GO 19684
19684: DISABLE
19685: LD_INT 0
19687: PPUSH
19688: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19689: LD_ADDR_VAR 0 2
19693: PUSH
19694: LD_INT 22
19696: PUSH
19697: LD_OWVAR 2
19701: PUSH
19702: EMPTY
19703: LIST
19704: LIST
19705: PUSH
19706: LD_INT 21
19708: PUSH
19709: LD_INT 3
19711: PUSH
19712: EMPTY
19713: LIST
19714: LIST
19715: PUSH
19716: EMPTY
19717: LIST
19718: LIST
19719: PPUSH
19720: CALL_OW 69
19724: ST_TO_ADDR
// if not tmp then
19725: LD_VAR 0 2
19729: NOT
19730: IFFALSE 19734
// exit ;
19732: GO 19763
// for i in tmp do
19734: LD_ADDR_VAR 0 1
19738: PUSH
19739: LD_VAR 0 2
19743: PUSH
19744: FOR_IN
19745: IFFALSE 19761
// SetBLevel ( i , 10 ) ;
19747: LD_VAR 0 1
19751: PPUSH
19752: LD_INT 10
19754: PPUSH
19755: CALL_OW 241
19759: GO 19744
19761: POP
19762: POP
// end ;
19763: PPOPN 2
19765: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
19766: LD_EXP 22
19770: PUSH
19771: LD_EXP 39
19775: AND
19776: IFFALSE 19887
19778: GO 19780
19780: DISABLE
19781: LD_INT 0
19783: PPUSH
19784: PPUSH
19785: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19786: LD_ADDR_VAR 0 3
19790: PUSH
19791: LD_INT 22
19793: PUSH
19794: LD_OWVAR 2
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: PUSH
19803: LD_INT 25
19805: PUSH
19806: LD_INT 1
19808: PUSH
19809: EMPTY
19810: LIST
19811: LIST
19812: PUSH
19813: EMPTY
19814: LIST
19815: LIST
19816: PPUSH
19817: CALL_OW 69
19821: ST_TO_ADDR
// if not tmp then
19822: LD_VAR 0 3
19826: NOT
19827: IFFALSE 19831
// exit ;
19829: GO 19887
// un := tmp [ rand ( 1 , tmp ) ] ;
19831: LD_ADDR_VAR 0 2
19835: PUSH
19836: LD_VAR 0 3
19840: PUSH
19841: LD_INT 1
19843: PPUSH
19844: LD_VAR 0 3
19848: PPUSH
19849: CALL_OW 12
19853: ARRAY
19854: ST_TO_ADDR
// if Crawls ( un ) then
19855: LD_VAR 0 2
19859: PPUSH
19860: CALL_OW 318
19864: IFFALSE 19875
// ComWalk ( un ) ;
19866: LD_VAR 0 2
19870: PPUSH
19871: CALL_OW 138
// SetClass ( un , class_sniper ) ;
19875: LD_VAR 0 2
19879: PPUSH
19880: LD_INT 5
19882: PPUSH
19883: CALL_OW 336
// end ;
19887: PPOPN 3
19889: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
19890: LD_EXP 22
19894: PUSH
19895: LD_EXP 40
19899: AND
19900: PUSH
19901: LD_OWVAR 67
19905: PUSH
19906: LD_INT 4
19908: LESS
19909: AND
19910: IFFALSE 19929
19912: GO 19914
19914: DISABLE
// begin Difficulty := Difficulty + 1 ;
19915: LD_ADDR_OWVAR 67
19919: PUSH
19920: LD_OWVAR 67
19924: PUSH
19925: LD_INT 1
19927: PLUS
19928: ST_TO_ADDR
// end ;
19929: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
19930: LD_EXP 22
19934: PUSH
19935: LD_EXP 41
19939: AND
19940: IFFALSE 20043
19942: GO 19944
19944: DISABLE
19945: LD_INT 0
19947: PPUSH
// begin for i := 1 to 5 do
19948: LD_ADDR_VAR 0 1
19952: PUSH
19953: DOUBLE
19954: LD_INT 1
19956: DEC
19957: ST_TO_ADDR
19958: LD_INT 5
19960: PUSH
19961: FOR_TO
19962: IFFALSE 20041
// begin uc_nation := nation_nature ;
19964: LD_ADDR_OWVAR 21
19968: PUSH
19969: LD_INT 0
19971: ST_TO_ADDR
// uc_side := 0 ;
19972: LD_ADDR_OWVAR 20
19976: PUSH
19977: LD_INT 0
19979: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19980: LD_ADDR_OWVAR 29
19984: PUSH
19985: LD_INT 12
19987: PUSH
19988: LD_INT 12
19990: PUSH
19991: EMPTY
19992: LIST
19993: LIST
19994: ST_TO_ADDR
// hc_agressivity := 20 ;
19995: LD_ADDR_OWVAR 35
19999: PUSH
20000: LD_INT 20
20002: ST_TO_ADDR
// hc_class := class_tiger ;
20003: LD_ADDR_OWVAR 28
20007: PUSH
20008: LD_INT 14
20010: ST_TO_ADDR
// hc_gallery :=  ;
20011: LD_ADDR_OWVAR 33
20015: PUSH
20016: LD_STRING 
20018: ST_TO_ADDR
// hc_name :=  ;
20019: LD_ADDR_OWVAR 26
20023: PUSH
20024: LD_STRING 
20026: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
20027: CALL_OW 44
20031: PPUSH
20032: LD_INT 0
20034: PPUSH
20035: CALL_OW 51
// end ;
20039: GO 19961
20041: POP
20042: POP
// end ;
20043: PPOPN 1
20045: END
// every 0 0$1 trigger StreamModeActive and sBomb do
20046: LD_EXP 22
20050: PUSH
20051: LD_EXP 42
20055: AND
20056: IFFALSE 20065
20058: GO 20060
20060: DISABLE
// StreamSibBomb ;
20061: CALL 20066 0 0
20065: END
// export function StreamSibBomb ; var i , x , y ; begin
20066: LD_INT 0
20068: PPUSH
20069: PPUSH
20070: PPUSH
20071: PPUSH
// result := false ;
20072: LD_ADDR_VAR 0 1
20076: PUSH
20077: LD_INT 0
20079: ST_TO_ADDR
// for i := 1 to 16 do
20080: LD_ADDR_VAR 0 2
20084: PUSH
20085: DOUBLE
20086: LD_INT 1
20088: DEC
20089: ST_TO_ADDR
20090: LD_INT 16
20092: PUSH
20093: FOR_TO
20094: IFFALSE 20293
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20096: LD_ADDR_VAR 0 3
20100: PUSH
20101: LD_INT 10
20103: PUSH
20104: LD_INT 20
20106: PUSH
20107: LD_INT 30
20109: PUSH
20110: LD_INT 40
20112: PUSH
20113: LD_INT 50
20115: PUSH
20116: LD_INT 60
20118: PUSH
20119: LD_INT 70
20121: PUSH
20122: LD_INT 80
20124: PUSH
20125: LD_INT 90
20127: PUSH
20128: LD_INT 100
20130: PUSH
20131: LD_INT 110
20133: PUSH
20134: LD_INT 120
20136: PUSH
20137: LD_INT 130
20139: PUSH
20140: LD_INT 140
20142: PUSH
20143: LD_INT 150
20145: PUSH
20146: EMPTY
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: LIST
20162: PUSH
20163: LD_INT 1
20165: PPUSH
20166: LD_INT 15
20168: PPUSH
20169: CALL_OW 12
20173: ARRAY
20174: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20175: LD_ADDR_VAR 0 4
20179: PUSH
20180: LD_INT 10
20182: PUSH
20183: LD_INT 20
20185: PUSH
20186: LD_INT 30
20188: PUSH
20189: LD_INT 40
20191: PUSH
20192: LD_INT 50
20194: PUSH
20195: LD_INT 60
20197: PUSH
20198: LD_INT 70
20200: PUSH
20201: LD_INT 80
20203: PUSH
20204: LD_INT 90
20206: PUSH
20207: LD_INT 100
20209: PUSH
20210: LD_INT 110
20212: PUSH
20213: LD_INT 120
20215: PUSH
20216: LD_INT 130
20218: PUSH
20219: LD_INT 140
20221: PUSH
20222: LD_INT 150
20224: PUSH
20225: EMPTY
20226: LIST
20227: LIST
20228: LIST
20229: LIST
20230: LIST
20231: LIST
20232: LIST
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: PUSH
20242: LD_INT 1
20244: PPUSH
20245: LD_INT 15
20247: PPUSH
20248: CALL_OW 12
20252: ARRAY
20253: ST_TO_ADDR
// if ValidHex ( x , y ) then
20254: LD_VAR 0 3
20258: PPUSH
20259: LD_VAR 0 4
20263: PPUSH
20264: CALL_OW 488
20268: IFFALSE 20291
// begin result := [ x , y ] ;
20270: LD_ADDR_VAR 0 1
20274: PUSH
20275: LD_VAR 0 3
20279: PUSH
20280: LD_VAR 0 4
20284: PUSH
20285: EMPTY
20286: LIST
20287: LIST
20288: ST_TO_ADDR
// break ;
20289: GO 20293
// end ; end ;
20291: GO 20093
20293: POP
20294: POP
// if result then
20295: LD_VAR 0 1
20299: IFFALSE 20359
// begin ToLua ( playSibBomb() ) ;
20301: LD_STRING playSibBomb()
20303: PPUSH
20304: CALL_OW 559
// wait ( 0 0$14 ) ;
20308: LD_INT 490
20310: PPUSH
20311: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
20315: LD_VAR 0 1
20319: PUSH
20320: LD_INT 1
20322: ARRAY
20323: PPUSH
20324: LD_VAR 0 1
20328: PUSH
20329: LD_INT 2
20331: ARRAY
20332: PPUSH
20333: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
20337: LD_VAR 0 1
20341: PUSH
20342: LD_INT 1
20344: ARRAY
20345: PPUSH
20346: LD_VAR 0 1
20350: PUSH
20351: LD_INT 2
20353: ARRAY
20354: PPUSH
20355: CALL_OW 429
// end ; end ;
20359: LD_VAR 0 1
20363: RET
// every 0 0$1 trigger StreamModeActive and sReset do
20364: LD_EXP 22
20368: PUSH
20369: LD_EXP 44
20373: AND
20374: IFFALSE 20386
20376: GO 20378
20378: DISABLE
// YouLost (  ) ;
20379: LD_STRING 
20381: PPUSH
20382: CALL_OW 104
20386: END
// every 0 0$1 trigger StreamModeActive and sFog do
20387: LD_EXP 22
20391: PUSH
20392: LD_EXP 43
20396: AND
20397: IFFALSE 20411
20399: GO 20401
20401: DISABLE
// FogOff ( your_side ) ;
20402: LD_OWVAR 2
20406: PPUSH
20407: CALL_OW 344
20411: END
// every 0 0$1 trigger StreamModeActive and sSun do
20412: LD_EXP 22
20416: PUSH
20417: LD_EXP 45
20421: AND
20422: IFFALSE 20450
20424: GO 20426
20426: DISABLE
// begin solar_recharge_percent := 0 ;
20427: LD_ADDR_OWVAR 79
20431: PUSH
20432: LD_INT 0
20434: ST_TO_ADDR
// wait ( 5 5$00 ) ;
20435: LD_INT 10500
20437: PPUSH
20438: CALL_OW 67
// solar_recharge_percent := 100 ;
20442: LD_ADDR_OWVAR 79
20446: PUSH
20447: LD_INT 100
20449: ST_TO_ADDR
// end ;
20450: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
20451: LD_EXP 22
20455: PUSH
20456: LD_EXP 46
20460: AND
20461: IFFALSE 20700
20463: GO 20465
20465: DISABLE
20466: LD_INT 0
20468: PPUSH
20469: PPUSH
20470: PPUSH
// begin tmp := [ ] ;
20471: LD_ADDR_VAR 0 3
20475: PUSH
20476: EMPTY
20477: ST_TO_ADDR
// for i := 1 to 6 do
20478: LD_ADDR_VAR 0 1
20482: PUSH
20483: DOUBLE
20484: LD_INT 1
20486: DEC
20487: ST_TO_ADDR
20488: LD_INT 6
20490: PUSH
20491: FOR_TO
20492: IFFALSE 20597
// begin uc_nation := nation_nature ;
20494: LD_ADDR_OWVAR 21
20498: PUSH
20499: LD_INT 0
20501: ST_TO_ADDR
// uc_side := 0 ;
20502: LD_ADDR_OWVAR 20
20506: PUSH
20507: LD_INT 0
20509: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20510: LD_ADDR_OWVAR 29
20514: PUSH
20515: LD_INT 12
20517: PUSH
20518: LD_INT 12
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: ST_TO_ADDR
// hc_agressivity := 20 ;
20525: LD_ADDR_OWVAR 35
20529: PUSH
20530: LD_INT 20
20532: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
20533: LD_ADDR_OWVAR 28
20537: PUSH
20538: LD_INT 17
20540: ST_TO_ADDR
// hc_gallery :=  ;
20541: LD_ADDR_OWVAR 33
20545: PUSH
20546: LD_STRING 
20548: ST_TO_ADDR
// hc_name :=  ;
20549: LD_ADDR_OWVAR 26
20553: PUSH
20554: LD_STRING 
20556: ST_TO_ADDR
// un := CreateHuman ;
20557: LD_ADDR_VAR 0 2
20561: PUSH
20562: CALL_OW 44
20566: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
20567: LD_VAR 0 2
20571: PPUSH
20572: LD_INT 1
20574: PPUSH
20575: CALL_OW 51
// tmp := tmp ^ un ;
20579: LD_ADDR_VAR 0 3
20583: PUSH
20584: LD_VAR 0 3
20588: PUSH
20589: LD_VAR 0 2
20593: ADD
20594: ST_TO_ADDR
// end ;
20595: GO 20491
20597: POP
20598: POP
// repeat wait ( 0 0$1 ) ;
20599: LD_INT 35
20601: PPUSH
20602: CALL_OW 67
// for un in tmp do
20606: LD_ADDR_VAR 0 2
20610: PUSH
20611: LD_VAR 0 3
20615: PUSH
20616: FOR_IN
20617: IFFALSE 20691
// begin if IsDead ( un ) then
20619: LD_VAR 0 2
20623: PPUSH
20624: CALL_OW 301
20628: IFFALSE 20648
// begin tmp := tmp diff un ;
20630: LD_ADDR_VAR 0 3
20634: PUSH
20635: LD_VAR 0 3
20639: PUSH
20640: LD_VAR 0 2
20644: DIFF
20645: ST_TO_ADDR
// continue ;
20646: GO 20616
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
20648: LD_VAR 0 2
20652: PPUSH
20653: LD_INT 3
20655: PUSH
20656: LD_INT 22
20658: PUSH
20659: LD_INT 0
20661: PUSH
20662: EMPTY
20663: LIST
20664: LIST
20665: PUSH
20666: EMPTY
20667: LIST
20668: LIST
20669: PPUSH
20670: CALL_OW 69
20674: PPUSH
20675: LD_VAR 0 2
20679: PPUSH
20680: CALL_OW 74
20684: PPUSH
20685: CALL_OW 115
// end ;
20689: GO 20616
20691: POP
20692: POP
// until not tmp ;
20693: LD_VAR 0 3
20697: NOT
20698: IFFALSE 20599
// end ;
20700: PPOPN 3
20702: END
// every 0 0$1 trigger StreamModeActive and sTroll do
20703: LD_EXP 22
20707: PUSH
20708: LD_EXP 47
20712: AND
20713: IFFALSE 20767
20715: GO 20717
20717: DISABLE
// begin ToLua ( displayTroll(); ) ;
20718: LD_STRING displayTroll();
20720: PPUSH
20721: CALL_OW 559
// wait ( 3 3$00 ) ;
20725: LD_INT 6300
20727: PPUSH
20728: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20732: LD_STRING hideTroll();
20734: PPUSH
20735: CALL_OW 559
// wait ( 1 1$00 ) ;
20739: LD_INT 2100
20741: PPUSH
20742: CALL_OW 67
// ToLua ( displayTroll(); ) ;
20746: LD_STRING displayTroll();
20748: PPUSH
20749: CALL_OW 559
// wait ( 1 1$00 ) ;
20753: LD_INT 2100
20755: PPUSH
20756: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20760: LD_STRING hideTroll();
20762: PPUSH
20763: CALL_OW 559
// end ;
20767: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
20768: LD_EXP 22
20772: PUSH
20773: LD_EXP 48
20777: AND
20778: IFFALSE 20841
20780: GO 20782
20782: DISABLE
20783: LD_INT 0
20785: PPUSH
// begin p := 0 ;
20786: LD_ADDR_VAR 0 1
20790: PUSH
20791: LD_INT 0
20793: ST_TO_ADDR
// repeat game_speed := 1 ;
20794: LD_ADDR_OWVAR 65
20798: PUSH
20799: LD_INT 1
20801: ST_TO_ADDR
// wait ( 0 0$1 ) ;
20802: LD_INT 35
20804: PPUSH
20805: CALL_OW 67
// p := p + 1 ;
20809: LD_ADDR_VAR 0 1
20813: PUSH
20814: LD_VAR 0 1
20818: PUSH
20819: LD_INT 1
20821: PLUS
20822: ST_TO_ADDR
// until p >= 60 ;
20823: LD_VAR 0 1
20827: PUSH
20828: LD_INT 60
20830: GREATEREQUAL
20831: IFFALSE 20794
// game_speed := 4 ;
20833: LD_ADDR_OWVAR 65
20837: PUSH
20838: LD_INT 4
20840: ST_TO_ADDR
// end ;
20841: PPOPN 1
20843: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
20844: LD_EXP 22
20848: PUSH
20849: LD_EXP 49
20853: AND
20854: IFFALSE 21000
20856: GO 20858
20858: DISABLE
20859: LD_INT 0
20861: PPUSH
20862: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20863: LD_ADDR_VAR 0 1
20867: PUSH
20868: LD_INT 22
20870: PUSH
20871: LD_OWVAR 2
20875: PUSH
20876: EMPTY
20877: LIST
20878: LIST
20879: PUSH
20880: LD_INT 2
20882: PUSH
20883: LD_INT 30
20885: PUSH
20886: LD_INT 0
20888: PUSH
20889: EMPTY
20890: LIST
20891: LIST
20892: PUSH
20893: LD_INT 30
20895: PUSH
20896: LD_INT 1
20898: PUSH
20899: EMPTY
20900: LIST
20901: LIST
20902: PUSH
20903: EMPTY
20904: LIST
20905: LIST
20906: LIST
20907: PUSH
20908: EMPTY
20909: LIST
20910: LIST
20911: PPUSH
20912: CALL_OW 69
20916: ST_TO_ADDR
// if not depot then
20917: LD_VAR 0 1
20921: NOT
20922: IFFALSE 20926
// exit ;
20924: GO 21000
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20926: LD_ADDR_VAR 0 2
20930: PUSH
20931: LD_VAR 0 1
20935: PUSH
20936: LD_INT 1
20938: PPUSH
20939: LD_VAR 0 1
20943: PPUSH
20944: CALL_OW 12
20948: ARRAY
20949: PPUSH
20950: CALL_OW 274
20954: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
20955: LD_VAR 0 2
20959: PPUSH
20960: LD_INT 1
20962: PPUSH
20963: LD_INT 0
20965: PPUSH
20966: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
20970: LD_VAR 0 2
20974: PPUSH
20975: LD_INT 2
20977: PPUSH
20978: LD_INT 0
20980: PPUSH
20981: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
20985: LD_VAR 0 2
20989: PPUSH
20990: LD_INT 3
20992: PPUSH
20993: LD_INT 0
20995: PPUSH
20996: CALL_OW 277
// end ;
21000: PPOPN 2
21002: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
21003: LD_EXP 22
21007: PUSH
21008: LD_EXP 50
21012: AND
21013: IFFALSE 21110
21015: GO 21017
21017: DISABLE
21018: LD_INT 0
21020: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21021: LD_ADDR_VAR 0 1
21025: PUSH
21026: LD_INT 22
21028: PUSH
21029: LD_OWVAR 2
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: PUSH
21038: LD_INT 21
21040: PUSH
21041: LD_INT 1
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: PUSH
21048: LD_INT 3
21050: PUSH
21051: LD_INT 23
21053: PUSH
21054: LD_INT 0
21056: PUSH
21057: EMPTY
21058: LIST
21059: LIST
21060: PUSH
21061: EMPTY
21062: LIST
21063: LIST
21064: PUSH
21065: EMPTY
21066: LIST
21067: LIST
21068: LIST
21069: PPUSH
21070: CALL_OW 69
21074: ST_TO_ADDR
// if not tmp then
21075: LD_VAR 0 1
21079: NOT
21080: IFFALSE 21084
// exit ;
21082: GO 21110
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
21084: LD_VAR 0 1
21088: PUSH
21089: LD_INT 1
21091: PPUSH
21092: LD_VAR 0 1
21096: PPUSH
21097: CALL_OW 12
21101: ARRAY
21102: PPUSH
21103: LD_INT 200
21105: PPUSH
21106: CALL_OW 234
// end ;
21110: PPOPN 1
21112: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
21113: LD_EXP 22
21117: PUSH
21118: LD_EXP 51
21122: AND
21123: IFFALSE 21202
21125: GO 21127
21127: DISABLE
21128: LD_INT 0
21130: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
21131: LD_ADDR_VAR 0 1
21135: PUSH
21136: LD_INT 22
21138: PUSH
21139: LD_OWVAR 2
21143: PUSH
21144: EMPTY
21145: LIST
21146: LIST
21147: PUSH
21148: LD_INT 21
21150: PUSH
21151: LD_INT 2
21153: PUSH
21154: EMPTY
21155: LIST
21156: LIST
21157: PUSH
21158: EMPTY
21159: LIST
21160: LIST
21161: PPUSH
21162: CALL_OW 69
21166: ST_TO_ADDR
// if not tmp then
21167: LD_VAR 0 1
21171: NOT
21172: IFFALSE 21176
// exit ;
21174: GO 21202
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
21176: LD_VAR 0 1
21180: PUSH
21181: LD_INT 1
21183: PPUSH
21184: LD_VAR 0 1
21188: PPUSH
21189: CALL_OW 12
21193: ARRAY
21194: PPUSH
21195: LD_INT 60
21197: PPUSH
21198: CALL_OW 234
// end ;
21202: PPOPN 1
21204: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
21205: LD_EXP 22
21209: PUSH
21210: LD_EXP 52
21214: AND
21215: IFFALSE 21314
21217: GO 21219
21219: DISABLE
21220: LD_INT 0
21222: PPUSH
21223: PPUSH
// begin enable ;
21224: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
21225: LD_ADDR_VAR 0 1
21229: PUSH
21230: LD_INT 22
21232: PUSH
21233: LD_OWVAR 2
21237: PUSH
21238: EMPTY
21239: LIST
21240: LIST
21241: PUSH
21242: LD_INT 61
21244: PUSH
21245: EMPTY
21246: LIST
21247: PUSH
21248: LD_INT 33
21250: PUSH
21251: LD_INT 2
21253: PUSH
21254: EMPTY
21255: LIST
21256: LIST
21257: PUSH
21258: EMPTY
21259: LIST
21260: LIST
21261: LIST
21262: PPUSH
21263: CALL_OW 69
21267: ST_TO_ADDR
// if not tmp then
21268: LD_VAR 0 1
21272: NOT
21273: IFFALSE 21277
// exit ;
21275: GO 21314
// for i in tmp do
21277: LD_ADDR_VAR 0 2
21281: PUSH
21282: LD_VAR 0 1
21286: PUSH
21287: FOR_IN
21288: IFFALSE 21312
// if IsControledBy ( i ) then
21290: LD_VAR 0 2
21294: PPUSH
21295: CALL_OW 312
21299: IFFALSE 21310
// ComUnlink ( i ) ;
21301: LD_VAR 0 2
21305: PPUSH
21306: CALL_OW 136
21310: GO 21287
21312: POP
21313: POP
// end ;
21314: PPOPN 2
21316: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
21317: LD_EXP 22
21321: PUSH
21322: LD_EXP 53
21326: AND
21327: IFFALSE 21467
21329: GO 21331
21331: DISABLE
21332: LD_INT 0
21334: PPUSH
21335: PPUSH
// begin ToLua ( displayPowell(); ) ;
21336: LD_STRING displayPowell();
21338: PPUSH
21339: CALL_OW 559
// uc_side := 0 ;
21343: LD_ADDR_OWVAR 20
21347: PUSH
21348: LD_INT 0
21350: ST_TO_ADDR
// uc_nation := 2 ;
21351: LD_ADDR_OWVAR 21
21355: PUSH
21356: LD_INT 2
21358: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
21359: LD_ADDR_OWVAR 37
21363: PUSH
21364: LD_INT 14
21366: ST_TO_ADDR
// vc_engine := engine_siberite ;
21367: LD_ADDR_OWVAR 39
21371: PUSH
21372: LD_INT 3
21374: ST_TO_ADDR
// vc_control := control_apeman ;
21375: LD_ADDR_OWVAR 38
21379: PUSH
21380: LD_INT 5
21382: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
21383: LD_ADDR_OWVAR 40
21387: PUSH
21388: LD_INT 29
21390: ST_TO_ADDR
// un := CreateVehicle ;
21391: LD_ADDR_VAR 0 2
21395: PUSH
21396: CALL_OW 45
21400: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21401: LD_VAR 0 2
21405: PPUSH
21406: LD_INT 1
21408: PPUSH
21409: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21413: LD_INT 35
21415: PPUSH
21416: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21420: LD_VAR 0 2
21424: PPUSH
21425: LD_INT 22
21427: PUSH
21428: LD_OWVAR 2
21432: PUSH
21433: EMPTY
21434: LIST
21435: LIST
21436: PPUSH
21437: CALL_OW 69
21441: PPUSH
21442: LD_VAR 0 2
21446: PPUSH
21447: CALL_OW 74
21451: PPUSH
21452: CALL_OW 115
// until IsDead ( un ) ;
21456: LD_VAR 0 2
21460: PPUSH
21461: CALL_OW 301
21465: IFFALSE 21413
// end ;
21467: PPOPN 2
21469: END
// every 0 0$1 trigger StreamModeActive and sStu do
21470: LD_EXP 22
21474: PUSH
21475: LD_EXP 61
21479: AND
21480: IFFALSE 21496
21482: GO 21484
21484: DISABLE
// begin ToLua ( displayStucuk(); ) ;
21485: LD_STRING displayStucuk();
21487: PPUSH
21488: CALL_OW 559
// ResetFog ;
21492: CALL_OW 335
// end ;
21496: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
21497: LD_EXP 22
21501: PUSH
21502: LD_EXP 54
21506: AND
21507: IFFALSE 21648
21509: GO 21511
21511: DISABLE
21512: LD_INT 0
21514: PPUSH
21515: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21516: LD_ADDR_VAR 0 2
21520: PUSH
21521: LD_INT 22
21523: PUSH
21524: LD_OWVAR 2
21528: PUSH
21529: EMPTY
21530: LIST
21531: LIST
21532: PUSH
21533: LD_INT 21
21535: PUSH
21536: LD_INT 1
21538: PUSH
21539: EMPTY
21540: LIST
21541: LIST
21542: PUSH
21543: EMPTY
21544: LIST
21545: LIST
21546: PPUSH
21547: CALL_OW 69
21551: ST_TO_ADDR
// if not tmp then
21552: LD_VAR 0 2
21556: NOT
21557: IFFALSE 21561
// exit ;
21559: GO 21648
// un := tmp [ rand ( 1 , tmp ) ] ;
21561: LD_ADDR_VAR 0 1
21565: PUSH
21566: LD_VAR 0 2
21570: PUSH
21571: LD_INT 1
21573: PPUSH
21574: LD_VAR 0 2
21578: PPUSH
21579: CALL_OW 12
21583: ARRAY
21584: ST_TO_ADDR
// SetSide ( un , 0 ) ;
21585: LD_VAR 0 1
21589: PPUSH
21590: LD_INT 0
21592: PPUSH
21593: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
21597: LD_VAR 0 1
21601: PPUSH
21602: LD_OWVAR 3
21606: PUSH
21607: LD_VAR 0 1
21611: DIFF
21612: PPUSH
21613: LD_VAR 0 1
21617: PPUSH
21618: CALL_OW 74
21622: PPUSH
21623: CALL_OW 115
// wait ( 0 0$20 ) ;
21627: LD_INT 700
21629: PPUSH
21630: CALL_OW 67
// SetSide ( un , your_side ) ;
21634: LD_VAR 0 1
21638: PPUSH
21639: LD_OWVAR 2
21643: PPUSH
21644: CALL_OW 235
// end ;
21648: PPOPN 2
21650: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
21651: LD_EXP 22
21655: PUSH
21656: LD_EXP 55
21660: AND
21661: IFFALSE 21767
21663: GO 21665
21665: DISABLE
21666: LD_INT 0
21668: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21669: LD_ADDR_VAR 0 1
21673: PUSH
21674: LD_INT 22
21676: PUSH
21677: LD_OWVAR 2
21681: PUSH
21682: EMPTY
21683: LIST
21684: LIST
21685: PUSH
21686: LD_INT 2
21688: PUSH
21689: LD_INT 30
21691: PUSH
21692: LD_INT 0
21694: PUSH
21695: EMPTY
21696: LIST
21697: LIST
21698: PUSH
21699: LD_INT 30
21701: PUSH
21702: LD_INT 1
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: PUSH
21709: EMPTY
21710: LIST
21711: LIST
21712: LIST
21713: PUSH
21714: EMPTY
21715: LIST
21716: LIST
21717: PPUSH
21718: CALL_OW 69
21722: ST_TO_ADDR
// if not depot then
21723: LD_VAR 0 1
21727: NOT
21728: IFFALSE 21732
// exit ;
21730: GO 21767
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
21732: LD_VAR 0 1
21736: PUSH
21737: LD_INT 1
21739: ARRAY
21740: PPUSH
21741: CALL_OW 250
21745: PPUSH
21746: LD_VAR 0 1
21750: PUSH
21751: LD_INT 1
21753: ARRAY
21754: PPUSH
21755: CALL_OW 251
21759: PPUSH
21760: LD_INT 70
21762: PPUSH
21763: CALL_OW 495
// end ;
21767: PPOPN 1
21769: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
21770: LD_EXP 22
21774: PUSH
21775: LD_EXP 56
21779: AND
21780: IFFALSE 21991
21782: GO 21784
21784: DISABLE
21785: LD_INT 0
21787: PPUSH
21788: PPUSH
21789: PPUSH
21790: PPUSH
21791: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21792: LD_ADDR_VAR 0 5
21796: PUSH
21797: LD_INT 22
21799: PUSH
21800: LD_OWVAR 2
21804: PUSH
21805: EMPTY
21806: LIST
21807: LIST
21808: PUSH
21809: LD_INT 21
21811: PUSH
21812: LD_INT 1
21814: PUSH
21815: EMPTY
21816: LIST
21817: LIST
21818: PUSH
21819: EMPTY
21820: LIST
21821: LIST
21822: PPUSH
21823: CALL_OW 69
21827: ST_TO_ADDR
// if not tmp then
21828: LD_VAR 0 5
21832: NOT
21833: IFFALSE 21837
// exit ;
21835: GO 21991
// for i in tmp do
21837: LD_ADDR_VAR 0 1
21841: PUSH
21842: LD_VAR 0 5
21846: PUSH
21847: FOR_IN
21848: IFFALSE 21989
// begin d := rand ( 0 , 5 ) ;
21850: LD_ADDR_VAR 0 4
21854: PUSH
21855: LD_INT 0
21857: PPUSH
21858: LD_INT 5
21860: PPUSH
21861: CALL_OW 12
21865: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
21866: LD_ADDR_VAR 0 2
21870: PUSH
21871: LD_VAR 0 1
21875: PPUSH
21876: CALL_OW 250
21880: PPUSH
21881: LD_VAR 0 4
21885: PPUSH
21886: LD_INT 3
21888: PPUSH
21889: LD_INT 12
21891: PPUSH
21892: CALL_OW 12
21896: PPUSH
21897: CALL_OW 272
21901: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
21902: LD_ADDR_VAR 0 3
21906: PUSH
21907: LD_VAR 0 1
21911: PPUSH
21912: CALL_OW 251
21916: PPUSH
21917: LD_VAR 0 4
21921: PPUSH
21922: LD_INT 3
21924: PPUSH
21925: LD_INT 12
21927: PPUSH
21928: CALL_OW 12
21932: PPUSH
21933: CALL_OW 273
21937: ST_TO_ADDR
// if ValidHex ( x , y ) then
21938: LD_VAR 0 2
21942: PPUSH
21943: LD_VAR 0 3
21947: PPUSH
21948: CALL_OW 488
21952: IFFALSE 21987
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
21954: LD_VAR 0 1
21958: PPUSH
21959: LD_VAR 0 2
21963: PPUSH
21964: LD_VAR 0 3
21968: PPUSH
21969: LD_INT 3
21971: PPUSH
21972: LD_INT 6
21974: PPUSH
21975: CALL_OW 12
21979: PPUSH
21980: LD_INT 1
21982: PPUSH
21983: CALL_OW 483
// end ;
21987: GO 21847
21989: POP
21990: POP
// end ;
21991: PPOPN 5
21993: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
21994: LD_EXP 22
21998: PUSH
21999: LD_EXP 57
22003: AND
22004: IFFALSE 22098
22006: GO 22008
22008: DISABLE
22009: LD_INT 0
22011: PPUSH
22012: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
22013: LD_ADDR_VAR 0 2
22017: PUSH
22018: LD_INT 22
22020: PUSH
22021: LD_OWVAR 2
22025: PUSH
22026: EMPTY
22027: LIST
22028: LIST
22029: PUSH
22030: LD_INT 32
22032: PUSH
22033: LD_INT 1
22035: PUSH
22036: EMPTY
22037: LIST
22038: LIST
22039: PUSH
22040: LD_INT 21
22042: PUSH
22043: LD_INT 2
22045: PUSH
22046: EMPTY
22047: LIST
22048: LIST
22049: PUSH
22050: EMPTY
22051: LIST
22052: LIST
22053: LIST
22054: PPUSH
22055: CALL_OW 69
22059: ST_TO_ADDR
// if not tmp then
22060: LD_VAR 0 2
22064: NOT
22065: IFFALSE 22069
// exit ;
22067: GO 22098
// for i in tmp do
22069: LD_ADDR_VAR 0 1
22073: PUSH
22074: LD_VAR 0 2
22078: PUSH
22079: FOR_IN
22080: IFFALSE 22096
// SetFuel ( i , 0 ) ;
22082: LD_VAR 0 1
22086: PPUSH
22087: LD_INT 0
22089: PPUSH
22090: CALL_OW 240
22094: GO 22079
22096: POP
22097: POP
// end ;
22098: PPOPN 2
22100: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
22101: LD_EXP 22
22105: PUSH
22106: LD_EXP 58
22110: AND
22111: IFFALSE 22177
22113: GO 22115
22115: DISABLE
22116: LD_INT 0
22118: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22119: LD_ADDR_VAR 0 1
22123: PUSH
22124: LD_INT 22
22126: PUSH
22127: LD_OWVAR 2
22131: PUSH
22132: EMPTY
22133: LIST
22134: LIST
22135: PUSH
22136: LD_INT 30
22138: PUSH
22139: LD_INT 29
22141: PUSH
22142: EMPTY
22143: LIST
22144: LIST
22145: PUSH
22146: EMPTY
22147: LIST
22148: LIST
22149: PPUSH
22150: CALL_OW 69
22154: ST_TO_ADDR
// if not tmp then
22155: LD_VAR 0 1
22159: NOT
22160: IFFALSE 22164
// exit ;
22162: GO 22177
// DestroyUnit ( tmp [ 1 ] ) ;
22164: LD_VAR 0 1
22168: PUSH
22169: LD_INT 1
22171: ARRAY
22172: PPUSH
22173: CALL_OW 65
// end ;
22177: PPOPN 1
22179: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
22180: LD_EXP 22
22184: PUSH
22185: LD_EXP 60
22189: AND
22190: IFFALSE 22319
22192: GO 22194
22194: DISABLE
22195: LD_INT 0
22197: PPUSH
// begin uc_side := 0 ;
22198: LD_ADDR_OWVAR 20
22202: PUSH
22203: LD_INT 0
22205: ST_TO_ADDR
// uc_nation := nation_arabian ;
22206: LD_ADDR_OWVAR 21
22210: PUSH
22211: LD_INT 2
22213: ST_TO_ADDR
// hc_gallery :=  ;
22214: LD_ADDR_OWVAR 33
22218: PUSH
22219: LD_STRING 
22221: ST_TO_ADDR
// hc_name :=  ;
22222: LD_ADDR_OWVAR 26
22226: PUSH
22227: LD_STRING 
22229: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
22230: LD_INT 1
22232: PPUSH
22233: LD_INT 11
22235: PPUSH
22236: LD_INT 10
22238: PPUSH
22239: CALL_OW 380
// un := CreateHuman ;
22243: LD_ADDR_VAR 0 1
22247: PUSH
22248: CALL_OW 44
22252: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22253: LD_VAR 0 1
22257: PPUSH
22258: LD_INT 1
22260: PPUSH
22261: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
22265: LD_INT 35
22267: PPUSH
22268: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
22272: LD_VAR 0 1
22276: PPUSH
22277: LD_INT 22
22279: PUSH
22280: LD_OWVAR 2
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: PPUSH
22289: CALL_OW 69
22293: PPUSH
22294: LD_VAR 0 1
22298: PPUSH
22299: CALL_OW 74
22303: PPUSH
22304: CALL_OW 115
// until IsDead ( un ) ;
22308: LD_VAR 0 1
22312: PPUSH
22313: CALL_OW 301
22317: IFFALSE 22265
// end ;
22319: PPOPN 1
22321: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
22322: LD_EXP 22
22326: PUSH
22327: LD_EXP 62
22331: AND
22332: IFFALSE 22344
22334: GO 22336
22336: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
22337: LD_STRING earthquake(getX(game), 0, 32)
22339: PPUSH
22340: CALL_OW 559
22344: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
22345: LD_EXP 22
22349: PUSH
22350: LD_EXP 63
22354: AND
22355: IFFALSE 22446
22357: GO 22359
22359: DISABLE
22360: LD_INT 0
22362: PPUSH
// begin enable ;
22363: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
22364: LD_ADDR_VAR 0 1
22368: PUSH
22369: LD_INT 22
22371: PUSH
22372: LD_OWVAR 2
22376: PUSH
22377: EMPTY
22378: LIST
22379: LIST
22380: PUSH
22381: LD_INT 21
22383: PUSH
22384: LD_INT 2
22386: PUSH
22387: EMPTY
22388: LIST
22389: LIST
22390: PUSH
22391: LD_INT 33
22393: PUSH
22394: LD_INT 3
22396: PUSH
22397: EMPTY
22398: LIST
22399: LIST
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: LIST
22405: PPUSH
22406: CALL_OW 69
22410: ST_TO_ADDR
// if not tmp then
22411: LD_VAR 0 1
22415: NOT
22416: IFFALSE 22420
// exit ;
22418: GO 22446
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22420: LD_VAR 0 1
22424: PUSH
22425: LD_INT 1
22427: PPUSH
22428: LD_VAR 0 1
22432: PPUSH
22433: CALL_OW 12
22437: ARRAY
22438: PPUSH
22439: LD_INT 1
22441: PPUSH
22442: CALL_OW 234
// end ;
22446: PPOPN 1
22448: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
22449: LD_EXP 22
22453: PUSH
22454: LD_EXP 64
22458: AND
22459: IFFALSE 22600
22461: GO 22463
22463: DISABLE
22464: LD_INT 0
22466: PPUSH
22467: PPUSH
22468: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22469: LD_ADDR_VAR 0 3
22473: PUSH
22474: LD_INT 22
22476: PUSH
22477: LD_OWVAR 2
22481: PUSH
22482: EMPTY
22483: LIST
22484: LIST
22485: PUSH
22486: LD_INT 25
22488: PUSH
22489: LD_INT 1
22491: PUSH
22492: EMPTY
22493: LIST
22494: LIST
22495: PUSH
22496: EMPTY
22497: LIST
22498: LIST
22499: PPUSH
22500: CALL_OW 69
22504: ST_TO_ADDR
// if not tmp then
22505: LD_VAR 0 3
22509: NOT
22510: IFFALSE 22514
// exit ;
22512: GO 22600
// un := tmp [ rand ( 1 , tmp ) ] ;
22514: LD_ADDR_VAR 0 2
22518: PUSH
22519: LD_VAR 0 3
22523: PUSH
22524: LD_INT 1
22526: PPUSH
22527: LD_VAR 0 3
22531: PPUSH
22532: CALL_OW 12
22536: ARRAY
22537: ST_TO_ADDR
// if Crawls ( un ) then
22538: LD_VAR 0 2
22542: PPUSH
22543: CALL_OW 318
22547: IFFALSE 22558
// ComWalk ( un ) ;
22549: LD_VAR 0 2
22553: PPUSH
22554: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
22558: LD_VAR 0 2
22562: PPUSH
22563: LD_INT 9
22565: PPUSH
22566: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
22570: LD_INT 28
22572: PPUSH
22573: LD_OWVAR 2
22577: PPUSH
22578: LD_INT 2
22580: PPUSH
22581: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
22585: LD_INT 29
22587: PPUSH
22588: LD_OWVAR 2
22592: PPUSH
22593: LD_INT 2
22595: PPUSH
22596: CALL_OW 322
// end ;
22600: PPOPN 3
22602: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
22603: LD_EXP 22
22607: PUSH
22608: LD_EXP 65
22612: AND
22613: IFFALSE 22724
22615: GO 22617
22617: DISABLE
22618: LD_INT 0
22620: PPUSH
22621: PPUSH
22622: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22623: LD_ADDR_VAR 0 3
22627: PUSH
22628: LD_INT 22
22630: PUSH
22631: LD_OWVAR 2
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: PUSH
22640: LD_INT 25
22642: PUSH
22643: LD_INT 1
22645: PUSH
22646: EMPTY
22647: LIST
22648: LIST
22649: PUSH
22650: EMPTY
22651: LIST
22652: LIST
22653: PPUSH
22654: CALL_OW 69
22658: ST_TO_ADDR
// if not tmp then
22659: LD_VAR 0 3
22663: NOT
22664: IFFALSE 22668
// exit ;
22666: GO 22724
// un := tmp [ rand ( 1 , tmp ) ] ;
22668: LD_ADDR_VAR 0 2
22672: PUSH
22673: LD_VAR 0 3
22677: PUSH
22678: LD_INT 1
22680: PPUSH
22681: LD_VAR 0 3
22685: PPUSH
22686: CALL_OW 12
22690: ARRAY
22691: ST_TO_ADDR
// if Crawls ( un ) then
22692: LD_VAR 0 2
22696: PPUSH
22697: CALL_OW 318
22701: IFFALSE 22712
// ComWalk ( un ) ;
22703: LD_VAR 0 2
22707: PPUSH
22708: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22712: LD_VAR 0 2
22716: PPUSH
22717: LD_INT 8
22719: PPUSH
22720: CALL_OW 336
// end ;
22724: PPOPN 3
22726: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
22727: LD_EXP 22
22731: PUSH
22732: LD_EXP 66
22736: AND
22737: IFFALSE 22881
22739: GO 22741
22741: DISABLE
22742: LD_INT 0
22744: PPUSH
22745: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
22746: LD_ADDR_VAR 0 2
22750: PUSH
22751: LD_INT 22
22753: PUSH
22754: LD_OWVAR 2
22758: PUSH
22759: EMPTY
22760: LIST
22761: LIST
22762: PUSH
22763: LD_INT 21
22765: PUSH
22766: LD_INT 2
22768: PUSH
22769: EMPTY
22770: LIST
22771: LIST
22772: PUSH
22773: LD_INT 2
22775: PUSH
22776: LD_INT 34
22778: PUSH
22779: LD_INT 12
22781: PUSH
22782: EMPTY
22783: LIST
22784: LIST
22785: PUSH
22786: LD_INT 34
22788: PUSH
22789: LD_INT 51
22791: PUSH
22792: EMPTY
22793: LIST
22794: LIST
22795: PUSH
22796: LD_INT 34
22798: PUSH
22799: LD_INT 32
22801: PUSH
22802: EMPTY
22803: LIST
22804: LIST
22805: PUSH
22806: EMPTY
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: PUSH
22812: EMPTY
22813: LIST
22814: LIST
22815: LIST
22816: PPUSH
22817: CALL_OW 69
22821: ST_TO_ADDR
// if not tmp then
22822: LD_VAR 0 2
22826: NOT
22827: IFFALSE 22831
// exit ;
22829: GO 22881
// for i in tmp do
22831: LD_ADDR_VAR 0 1
22835: PUSH
22836: LD_VAR 0 2
22840: PUSH
22841: FOR_IN
22842: IFFALSE 22879
// if GetCargo ( i , mat_artifact ) = 0 then
22844: LD_VAR 0 1
22848: PPUSH
22849: LD_INT 4
22851: PPUSH
22852: CALL_OW 289
22856: PUSH
22857: LD_INT 0
22859: EQUAL
22860: IFFALSE 22877
// SetCargo ( i , mat_siberit , 100 ) ;
22862: LD_VAR 0 1
22866: PPUSH
22867: LD_INT 3
22869: PPUSH
22870: LD_INT 100
22872: PPUSH
22873: CALL_OW 290
22877: GO 22841
22879: POP
22880: POP
// end ;
22881: PPOPN 2
22883: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
22884: LD_EXP 22
22888: PUSH
22889: LD_EXP 67
22893: AND
22894: IFFALSE 23077
22896: GO 22898
22898: DISABLE
22899: LD_INT 0
22901: PPUSH
22902: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22903: LD_ADDR_VAR 0 2
22907: PUSH
22908: LD_INT 22
22910: PUSH
22911: LD_OWVAR 2
22915: PUSH
22916: EMPTY
22917: LIST
22918: LIST
22919: PPUSH
22920: CALL_OW 69
22924: ST_TO_ADDR
// if not tmp then
22925: LD_VAR 0 2
22929: NOT
22930: IFFALSE 22934
// exit ;
22932: GO 23077
// for i := 1 to 2 do
22934: LD_ADDR_VAR 0 1
22938: PUSH
22939: DOUBLE
22940: LD_INT 1
22942: DEC
22943: ST_TO_ADDR
22944: LD_INT 2
22946: PUSH
22947: FOR_TO
22948: IFFALSE 23075
// begin uc_side := your_side ;
22950: LD_ADDR_OWVAR 20
22954: PUSH
22955: LD_OWVAR 2
22959: ST_TO_ADDR
// uc_nation := nation_american ;
22960: LD_ADDR_OWVAR 21
22964: PUSH
22965: LD_INT 1
22967: ST_TO_ADDR
// vc_chassis := us_morphling ;
22968: LD_ADDR_OWVAR 37
22972: PUSH
22973: LD_INT 5
22975: ST_TO_ADDR
// vc_engine := engine_siberite ;
22976: LD_ADDR_OWVAR 39
22980: PUSH
22981: LD_INT 3
22983: ST_TO_ADDR
// vc_control := control_computer ;
22984: LD_ADDR_OWVAR 38
22988: PUSH
22989: LD_INT 3
22991: ST_TO_ADDR
// vc_weapon := us_double_laser ;
22992: LD_ADDR_OWVAR 40
22996: PUSH
22997: LD_INT 10
22999: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
23000: LD_VAR 0 2
23004: PUSH
23005: LD_INT 1
23007: ARRAY
23008: PPUSH
23009: CALL_OW 310
23013: NOT
23014: IFFALSE 23061
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
23016: CALL_OW 45
23020: PPUSH
23021: LD_VAR 0 2
23025: PUSH
23026: LD_INT 1
23028: ARRAY
23029: PPUSH
23030: CALL_OW 250
23034: PPUSH
23035: LD_VAR 0 2
23039: PUSH
23040: LD_INT 1
23042: ARRAY
23043: PPUSH
23044: CALL_OW 251
23048: PPUSH
23049: LD_INT 12
23051: PPUSH
23052: LD_INT 1
23054: PPUSH
23055: CALL_OW 50
23059: GO 23073
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
23061: CALL_OW 45
23065: PPUSH
23066: LD_INT 1
23068: PPUSH
23069: CALL_OW 51
// end ;
23073: GO 22947
23075: POP
23076: POP
// end ;
23077: PPOPN 2
23079: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
23080: LD_EXP 22
23084: PUSH
23085: LD_EXP 68
23089: AND
23090: IFFALSE 23312
23092: GO 23094
23094: DISABLE
23095: LD_INT 0
23097: PPUSH
23098: PPUSH
23099: PPUSH
23100: PPUSH
23101: PPUSH
23102: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23103: LD_ADDR_VAR 0 6
23107: PUSH
23108: LD_INT 22
23110: PUSH
23111: LD_OWVAR 2
23115: PUSH
23116: EMPTY
23117: LIST
23118: LIST
23119: PUSH
23120: LD_INT 21
23122: PUSH
23123: LD_INT 1
23125: PUSH
23126: EMPTY
23127: LIST
23128: LIST
23129: PUSH
23130: LD_INT 3
23132: PUSH
23133: LD_INT 23
23135: PUSH
23136: LD_INT 0
23138: PUSH
23139: EMPTY
23140: LIST
23141: LIST
23142: PUSH
23143: EMPTY
23144: LIST
23145: LIST
23146: PUSH
23147: EMPTY
23148: LIST
23149: LIST
23150: LIST
23151: PPUSH
23152: CALL_OW 69
23156: ST_TO_ADDR
// if not tmp then
23157: LD_VAR 0 6
23161: NOT
23162: IFFALSE 23166
// exit ;
23164: GO 23312
// s1 := rand ( 1 , 4 ) ;
23166: LD_ADDR_VAR 0 2
23170: PUSH
23171: LD_INT 1
23173: PPUSH
23174: LD_INT 4
23176: PPUSH
23177: CALL_OW 12
23181: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
23182: LD_ADDR_VAR 0 4
23186: PUSH
23187: LD_VAR 0 6
23191: PUSH
23192: LD_INT 1
23194: ARRAY
23195: PPUSH
23196: LD_VAR 0 2
23200: PPUSH
23201: CALL_OW 259
23205: ST_TO_ADDR
// if s1 = 1 then
23206: LD_VAR 0 2
23210: PUSH
23211: LD_INT 1
23213: EQUAL
23214: IFFALSE 23234
// s2 := rand ( 2 , 4 ) else
23216: LD_ADDR_VAR 0 3
23220: PUSH
23221: LD_INT 2
23223: PPUSH
23224: LD_INT 4
23226: PPUSH
23227: CALL_OW 12
23231: ST_TO_ADDR
23232: GO 23242
// s2 := 1 ;
23234: LD_ADDR_VAR 0 3
23238: PUSH
23239: LD_INT 1
23241: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
23242: LD_ADDR_VAR 0 5
23246: PUSH
23247: LD_VAR 0 6
23251: PUSH
23252: LD_INT 1
23254: ARRAY
23255: PPUSH
23256: LD_VAR 0 3
23260: PPUSH
23261: CALL_OW 259
23265: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
23266: LD_VAR 0 6
23270: PUSH
23271: LD_INT 1
23273: ARRAY
23274: PPUSH
23275: LD_VAR 0 2
23279: PPUSH
23280: LD_VAR 0 5
23284: PPUSH
23285: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
23289: LD_VAR 0 6
23293: PUSH
23294: LD_INT 1
23296: ARRAY
23297: PPUSH
23298: LD_VAR 0 3
23302: PPUSH
23303: LD_VAR 0 4
23307: PPUSH
23308: CALL_OW 237
// end ;
23312: PPOPN 6
23314: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
23315: LD_EXP 22
23319: PUSH
23320: LD_EXP 69
23324: AND
23325: IFFALSE 23404
23327: GO 23329
23329: DISABLE
23330: LD_INT 0
23332: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
23333: LD_ADDR_VAR 0 1
23337: PUSH
23338: LD_INT 22
23340: PUSH
23341: LD_OWVAR 2
23345: PUSH
23346: EMPTY
23347: LIST
23348: LIST
23349: PUSH
23350: LD_INT 30
23352: PUSH
23353: LD_INT 3
23355: PUSH
23356: EMPTY
23357: LIST
23358: LIST
23359: PUSH
23360: EMPTY
23361: LIST
23362: LIST
23363: PPUSH
23364: CALL_OW 69
23368: ST_TO_ADDR
// if not tmp then
23369: LD_VAR 0 1
23373: NOT
23374: IFFALSE 23378
// exit ;
23376: GO 23404
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
23378: LD_VAR 0 1
23382: PUSH
23383: LD_INT 1
23385: PPUSH
23386: LD_VAR 0 1
23390: PPUSH
23391: CALL_OW 12
23395: ARRAY
23396: PPUSH
23397: LD_INT 1
23399: PPUSH
23400: CALL_OW 234
// end ;
23404: PPOPN 1
23406: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
23407: LD_EXP 22
23411: PUSH
23412: LD_EXP 70
23416: AND
23417: IFFALSE 23529
23419: GO 23421
23421: DISABLE
23422: LD_INT 0
23424: PPUSH
23425: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
23426: LD_ADDR_VAR 0 2
23430: PUSH
23431: LD_INT 22
23433: PUSH
23434: LD_OWVAR 2
23438: PUSH
23439: EMPTY
23440: LIST
23441: LIST
23442: PUSH
23443: LD_INT 2
23445: PUSH
23446: LD_INT 30
23448: PUSH
23449: LD_INT 27
23451: PUSH
23452: EMPTY
23453: LIST
23454: LIST
23455: PUSH
23456: LD_INT 30
23458: PUSH
23459: LD_INT 26
23461: PUSH
23462: EMPTY
23463: LIST
23464: LIST
23465: PUSH
23466: LD_INT 30
23468: PUSH
23469: LD_INT 28
23471: PUSH
23472: EMPTY
23473: LIST
23474: LIST
23475: PUSH
23476: EMPTY
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: PUSH
23482: EMPTY
23483: LIST
23484: LIST
23485: PPUSH
23486: CALL_OW 69
23490: ST_TO_ADDR
// if not tmp then
23491: LD_VAR 0 2
23495: NOT
23496: IFFALSE 23500
// exit ;
23498: GO 23529
// for i in tmp do
23500: LD_ADDR_VAR 0 1
23504: PUSH
23505: LD_VAR 0 2
23509: PUSH
23510: FOR_IN
23511: IFFALSE 23527
// SetLives ( i , 1 ) ;
23513: LD_VAR 0 1
23517: PPUSH
23518: LD_INT 1
23520: PPUSH
23521: CALL_OW 234
23525: GO 23510
23527: POP
23528: POP
// end ;
23529: PPOPN 2
23531: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
23532: LD_EXP 22
23536: PUSH
23537: LD_EXP 71
23541: AND
23542: IFFALSE 23829
23544: GO 23546
23546: DISABLE
23547: LD_INT 0
23549: PPUSH
23550: PPUSH
23551: PPUSH
// begin i := rand ( 1 , 7 ) ;
23552: LD_ADDR_VAR 0 1
23556: PUSH
23557: LD_INT 1
23559: PPUSH
23560: LD_INT 7
23562: PPUSH
23563: CALL_OW 12
23567: ST_TO_ADDR
// case i of 1 :
23568: LD_VAR 0 1
23572: PUSH
23573: LD_INT 1
23575: DOUBLE
23576: EQUAL
23577: IFTRUE 23581
23579: GO 23591
23581: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
23582: LD_STRING earthquake(getX(game), 0, 32)
23584: PPUSH
23585: CALL_OW 559
23589: GO 23829
23591: LD_INT 2
23593: DOUBLE
23594: EQUAL
23595: IFTRUE 23599
23597: GO 23613
23599: POP
// begin ToLua ( displayStucuk(); ) ;
23600: LD_STRING displayStucuk();
23602: PPUSH
23603: CALL_OW 559
// ResetFog ;
23607: CALL_OW 335
// end ; 3 :
23611: GO 23829
23613: LD_INT 3
23615: DOUBLE
23616: EQUAL
23617: IFTRUE 23621
23619: GO 23725
23621: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23622: LD_ADDR_VAR 0 2
23626: PUSH
23627: LD_INT 22
23629: PUSH
23630: LD_OWVAR 2
23634: PUSH
23635: EMPTY
23636: LIST
23637: LIST
23638: PUSH
23639: LD_INT 25
23641: PUSH
23642: LD_INT 1
23644: PUSH
23645: EMPTY
23646: LIST
23647: LIST
23648: PUSH
23649: EMPTY
23650: LIST
23651: LIST
23652: PPUSH
23653: CALL_OW 69
23657: ST_TO_ADDR
// if not tmp then
23658: LD_VAR 0 2
23662: NOT
23663: IFFALSE 23667
// exit ;
23665: GO 23829
// un := tmp [ rand ( 1 , tmp ) ] ;
23667: LD_ADDR_VAR 0 3
23671: PUSH
23672: LD_VAR 0 2
23676: PUSH
23677: LD_INT 1
23679: PPUSH
23680: LD_VAR 0 2
23684: PPUSH
23685: CALL_OW 12
23689: ARRAY
23690: ST_TO_ADDR
// if Crawls ( un ) then
23691: LD_VAR 0 3
23695: PPUSH
23696: CALL_OW 318
23700: IFFALSE 23711
// ComWalk ( un ) ;
23702: LD_VAR 0 3
23706: PPUSH
23707: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23711: LD_VAR 0 3
23715: PPUSH
23716: LD_INT 8
23718: PPUSH
23719: CALL_OW 336
// end ; 4 :
23723: GO 23829
23725: LD_INT 4
23727: DOUBLE
23728: EQUAL
23729: IFTRUE 23733
23731: GO 23807
23733: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23734: LD_ADDR_VAR 0 2
23738: PUSH
23739: LD_INT 22
23741: PUSH
23742: LD_OWVAR 2
23746: PUSH
23747: EMPTY
23748: LIST
23749: LIST
23750: PUSH
23751: LD_INT 30
23753: PUSH
23754: LD_INT 29
23756: PUSH
23757: EMPTY
23758: LIST
23759: LIST
23760: PUSH
23761: EMPTY
23762: LIST
23763: LIST
23764: PPUSH
23765: CALL_OW 69
23769: ST_TO_ADDR
// if not tmp then
23770: LD_VAR 0 2
23774: NOT
23775: IFFALSE 23779
// exit ;
23777: GO 23829
// CenterNowOnUnits ( tmp [ 1 ] ) ;
23779: LD_VAR 0 2
23783: PUSH
23784: LD_INT 1
23786: ARRAY
23787: PPUSH
23788: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
23792: LD_VAR 0 2
23796: PUSH
23797: LD_INT 1
23799: ARRAY
23800: PPUSH
23801: CALL_OW 65
// end ; 5 .. 7 :
23805: GO 23829
23807: LD_INT 5
23809: DOUBLE
23810: GREATEREQUAL
23811: IFFALSE 23819
23813: LD_INT 7
23815: DOUBLE
23816: LESSEQUAL
23817: IFTRUE 23821
23819: GO 23828
23821: POP
// StreamSibBomb ; end ;
23822: CALL 20066 0 0
23826: GO 23829
23828: POP
// end ;
23829: PPOPN 3
23831: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
23832: LD_EXP 22
23836: PUSH
23837: LD_EXP 72
23841: AND
23842: IFFALSE 23998
23844: GO 23846
23846: DISABLE
23847: LD_INT 0
23849: PPUSH
23850: PPUSH
23851: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23852: LD_ADDR_VAR 0 2
23856: PUSH
23857: LD_INT 81
23859: PUSH
23860: LD_OWVAR 2
23864: PUSH
23865: EMPTY
23866: LIST
23867: LIST
23868: PUSH
23869: LD_INT 2
23871: PUSH
23872: LD_INT 21
23874: PUSH
23875: LD_INT 1
23877: PUSH
23878: EMPTY
23879: LIST
23880: LIST
23881: PUSH
23882: LD_INT 21
23884: PUSH
23885: LD_INT 2
23887: PUSH
23888: EMPTY
23889: LIST
23890: LIST
23891: PUSH
23892: EMPTY
23893: LIST
23894: LIST
23895: LIST
23896: PUSH
23897: EMPTY
23898: LIST
23899: LIST
23900: PPUSH
23901: CALL_OW 69
23905: ST_TO_ADDR
// if not tmp then
23906: LD_VAR 0 2
23910: NOT
23911: IFFALSE 23915
// exit ;
23913: GO 23998
// p := 0 ;
23915: LD_ADDR_VAR 0 3
23919: PUSH
23920: LD_INT 0
23922: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23923: LD_INT 35
23925: PPUSH
23926: CALL_OW 67
// p := p + 1 ;
23930: LD_ADDR_VAR 0 3
23934: PUSH
23935: LD_VAR 0 3
23939: PUSH
23940: LD_INT 1
23942: PLUS
23943: ST_TO_ADDR
// for i in tmp do
23944: LD_ADDR_VAR 0 1
23948: PUSH
23949: LD_VAR 0 2
23953: PUSH
23954: FOR_IN
23955: IFFALSE 23986
// if GetLives ( i ) < 1000 then
23957: LD_VAR 0 1
23961: PPUSH
23962: CALL_OW 256
23966: PUSH
23967: LD_INT 1000
23969: LESS
23970: IFFALSE 23984
// SetLives ( i , 1000 ) ;
23972: LD_VAR 0 1
23976: PPUSH
23977: LD_INT 1000
23979: PPUSH
23980: CALL_OW 234
23984: GO 23954
23986: POP
23987: POP
// until p > 20 ;
23988: LD_VAR 0 3
23992: PUSH
23993: LD_INT 20
23995: GREATER
23996: IFFALSE 23923
// end ;
23998: PPOPN 3
24000: END
// every 0 0$1 trigger StreamModeActive and sTime do
24001: LD_EXP 22
24005: PUSH
24006: LD_EXP 73
24010: AND
24011: IFFALSE 24046
24013: GO 24015
24015: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
24016: LD_INT 28
24018: PPUSH
24019: LD_OWVAR 2
24023: PPUSH
24024: LD_INT 2
24026: PPUSH
24027: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
24031: LD_INT 30
24033: PPUSH
24034: LD_OWVAR 2
24038: PPUSH
24039: LD_INT 2
24041: PPUSH
24042: CALL_OW 322
// end ;
24046: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
24047: LD_EXP 22
24051: PUSH
24052: LD_EXP 74
24056: AND
24057: IFFALSE 24178
24059: GO 24061
24061: DISABLE
24062: LD_INT 0
24064: PPUSH
24065: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24066: LD_ADDR_VAR 0 2
24070: PUSH
24071: LD_INT 22
24073: PUSH
24074: LD_OWVAR 2
24078: PUSH
24079: EMPTY
24080: LIST
24081: LIST
24082: PUSH
24083: LD_INT 21
24085: PUSH
24086: LD_INT 1
24088: PUSH
24089: EMPTY
24090: LIST
24091: LIST
24092: PUSH
24093: LD_INT 3
24095: PUSH
24096: LD_INT 23
24098: PUSH
24099: LD_INT 0
24101: PUSH
24102: EMPTY
24103: LIST
24104: LIST
24105: PUSH
24106: EMPTY
24107: LIST
24108: LIST
24109: PUSH
24110: EMPTY
24111: LIST
24112: LIST
24113: LIST
24114: PPUSH
24115: CALL_OW 69
24119: ST_TO_ADDR
// if not tmp then
24120: LD_VAR 0 2
24124: NOT
24125: IFFALSE 24129
// exit ;
24127: GO 24178
// for i in tmp do
24129: LD_ADDR_VAR 0 1
24133: PUSH
24134: LD_VAR 0 2
24138: PUSH
24139: FOR_IN
24140: IFFALSE 24176
// begin if Crawls ( i ) then
24142: LD_VAR 0 1
24146: PPUSH
24147: CALL_OW 318
24151: IFFALSE 24162
// ComWalk ( i ) ;
24153: LD_VAR 0 1
24157: PPUSH
24158: CALL_OW 138
// SetClass ( i , 2 ) ;
24162: LD_VAR 0 1
24166: PPUSH
24167: LD_INT 2
24169: PPUSH
24170: CALL_OW 336
// end ;
24174: GO 24139
24176: POP
24177: POP
// end ;
24178: PPOPN 2
24180: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
24181: LD_EXP 22
24185: PUSH
24186: LD_EXP 75
24190: AND
24191: IFFALSE 24479
24193: GO 24195
24195: DISABLE
24196: LD_INT 0
24198: PPUSH
24199: PPUSH
24200: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
24201: LD_OWVAR 2
24205: PPUSH
24206: LD_INT 9
24208: PPUSH
24209: LD_INT 1
24211: PPUSH
24212: LD_INT 1
24214: PPUSH
24215: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
24219: LD_INT 9
24221: PPUSH
24222: LD_OWVAR 2
24226: PPUSH
24227: CALL_OW 343
// uc_side := 9 ;
24231: LD_ADDR_OWVAR 20
24235: PUSH
24236: LD_INT 9
24238: ST_TO_ADDR
// uc_nation := 2 ;
24239: LD_ADDR_OWVAR 21
24243: PUSH
24244: LD_INT 2
24246: ST_TO_ADDR
// hc_name := Dark Warrior ;
24247: LD_ADDR_OWVAR 26
24251: PUSH
24252: LD_STRING Dark Warrior
24254: ST_TO_ADDR
// hc_gallery :=  ;
24255: LD_ADDR_OWVAR 33
24259: PUSH
24260: LD_STRING 
24262: ST_TO_ADDR
// hc_noskilllimit := true ;
24263: LD_ADDR_OWVAR 76
24267: PUSH
24268: LD_INT 1
24270: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
24271: LD_ADDR_OWVAR 31
24275: PUSH
24276: LD_INT 30
24278: PUSH
24279: LD_INT 30
24281: PUSH
24282: LD_INT 30
24284: PUSH
24285: LD_INT 30
24287: PUSH
24288: EMPTY
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: ST_TO_ADDR
// un := CreateHuman ;
24294: LD_ADDR_VAR 0 3
24298: PUSH
24299: CALL_OW 44
24303: ST_TO_ADDR
// hc_noskilllimit := false ;
24304: LD_ADDR_OWVAR 76
24308: PUSH
24309: LD_INT 0
24311: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24312: LD_VAR 0 3
24316: PPUSH
24317: LD_INT 1
24319: PPUSH
24320: CALL_OW 51
// ToLua ( playRanger() ) ;
24324: LD_STRING playRanger()
24326: PPUSH
24327: CALL_OW 559
// p := 0 ;
24331: LD_ADDR_VAR 0 2
24335: PUSH
24336: LD_INT 0
24338: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24339: LD_INT 35
24341: PPUSH
24342: CALL_OW 67
// p := p + 1 ;
24346: LD_ADDR_VAR 0 2
24350: PUSH
24351: LD_VAR 0 2
24355: PUSH
24356: LD_INT 1
24358: PLUS
24359: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
24360: LD_VAR 0 3
24364: PPUSH
24365: CALL_OW 256
24369: PUSH
24370: LD_INT 1000
24372: LESS
24373: IFFALSE 24387
// SetLives ( un , 1000 ) ;
24375: LD_VAR 0 3
24379: PPUSH
24380: LD_INT 1000
24382: PPUSH
24383: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
24387: LD_VAR 0 3
24391: PPUSH
24392: LD_INT 81
24394: PUSH
24395: LD_OWVAR 2
24399: PUSH
24400: EMPTY
24401: LIST
24402: LIST
24403: PUSH
24404: LD_INT 91
24406: PUSH
24407: LD_VAR 0 3
24411: PUSH
24412: LD_INT 30
24414: PUSH
24415: EMPTY
24416: LIST
24417: LIST
24418: LIST
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: PPUSH
24424: CALL_OW 69
24428: PPUSH
24429: LD_VAR 0 3
24433: PPUSH
24434: CALL_OW 74
24438: PPUSH
24439: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
24443: LD_VAR 0 2
24447: PUSH
24448: LD_INT 80
24450: GREATER
24451: PUSH
24452: LD_VAR 0 3
24456: PPUSH
24457: CALL_OW 301
24461: OR
24462: IFFALSE 24339
// if un then
24464: LD_VAR 0 3
24468: IFFALSE 24479
// RemoveUnit ( un ) ;
24470: LD_VAR 0 3
24474: PPUSH
24475: CALL_OW 64
// end ;
24479: PPOPN 3
24481: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
24482: LD_EXP 76
24486: IFFALSE 24602
24488: GO 24490
24490: DISABLE
24491: LD_INT 0
24493: PPUSH
24494: PPUSH
24495: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24496: LD_ADDR_VAR 0 2
24500: PUSH
24501: LD_INT 81
24503: PUSH
24504: LD_OWVAR 2
24508: PUSH
24509: EMPTY
24510: LIST
24511: LIST
24512: PUSH
24513: LD_INT 21
24515: PUSH
24516: LD_INT 1
24518: PUSH
24519: EMPTY
24520: LIST
24521: LIST
24522: PUSH
24523: EMPTY
24524: LIST
24525: LIST
24526: PPUSH
24527: CALL_OW 69
24531: ST_TO_ADDR
// ToLua ( playComputer() ) ;
24532: LD_STRING playComputer()
24534: PPUSH
24535: CALL_OW 559
// if not tmp then
24539: LD_VAR 0 2
24543: NOT
24544: IFFALSE 24548
// exit ;
24546: GO 24602
// for i in tmp do
24548: LD_ADDR_VAR 0 1
24552: PUSH
24553: LD_VAR 0 2
24557: PUSH
24558: FOR_IN
24559: IFFALSE 24600
// for j := 1 to 4 do
24561: LD_ADDR_VAR 0 3
24565: PUSH
24566: DOUBLE
24567: LD_INT 1
24569: DEC
24570: ST_TO_ADDR
24571: LD_INT 4
24573: PUSH
24574: FOR_TO
24575: IFFALSE 24596
// SetSkill ( i , j , 10 ) ;
24577: LD_VAR 0 1
24581: PPUSH
24582: LD_VAR 0 3
24586: PPUSH
24587: LD_INT 10
24589: PPUSH
24590: CALL_OW 237
24594: GO 24574
24596: POP
24597: POP
24598: GO 24558
24600: POP
24601: POP
// end ;
24602: PPOPN 3
24604: END
// every 0 0$1 trigger s30 do var i , tmp ;
24605: LD_EXP 77
24609: IFFALSE 24678
24611: GO 24613
24613: DISABLE
24614: LD_INT 0
24616: PPUSH
24617: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24618: LD_ADDR_VAR 0 2
24622: PUSH
24623: LD_INT 22
24625: PUSH
24626: LD_OWVAR 2
24630: PUSH
24631: EMPTY
24632: LIST
24633: LIST
24634: PPUSH
24635: CALL_OW 69
24639: ST_TO_ADDR
// if not tmp then
24640: LD_VAR 0 2
24644: NOT
24645: IFFALSE 24649
// exit ;
24647: GO 24678
// for i in tmp do
24649: LD_ADDR_VAR 0 1
24653: PUSH
24654: LD_VAR 0 2
24658: PUSH
24659: FOR_IN
24660: IFFALSE 24676
// SetLives ( i , 300 ) ;
24662: LD_VAR 0 1
24666: PPUSH
24667: LD_INT 300
24669: PPUSH
24670: CALL_OW 234
24674: GO 24659
24676: POP
24677: POP
// end ;
24678: PPOPN 2
24680: END
// every 0 0$1 trigger s60 do var i , tmp ;
24681: LD_EXP 78
24685: IFFALSE 24754
24687: GO 24689
24689: DISABLE
24690: LD_INT 0
24692: PPUSH
24693: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24694: LD_ADDR_VAR 0 2
24698: PUSH
24699: LD_INT 22
24701: PUSH
24702: LD_OWVAR 2
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: PPUSH
24711: CALL_OW 69
24715: ST_TO_ADDR
// if not tmp then
24716: LD_VAR 0 2
24720: NOT
24721: IFFALSE 24725
// exit ;
24723: GO 24754
// for i in tmp do
24725: LD_ADDR_VAR 0 1
24729: PUSH
24730: LD_VAR 0 2
24734: PUSH
24735: FOR_IN
24736: IFFALSE 24752
// SetLives ( i , 600 ) ;
24738: LD_VAR 0 1
24742: PPUSH
24743: LD_INT 600
24745: PPUSH
24746: CALL_OW 234
24750: GO 24735
24752: POP
24753: POP
// end ;
24754: PPOPN 2
24756: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
24757: LD_INT 0
24759: PPUSH
// case cmd of 301 :
24760: LD_VAR 0 1
24764: PUSH
24765: LD_INT 301
24767: DOUBLE
24768: EQUAL
24769: IFTRUE 24773
24771: GO 24805
24773: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
24774: LD_VAR 0 6
24778: PPUSH
24779: LD_VAR 0 7
24783: PPUSH
24784: LD_VAR 0 8
24788: PPUSH
24789: LD_VAR 0 4
24793: PPUSH
24794: LD_VAR 0 5
24798: PPUSH
24799: CALL 26006 0 5
24803: GO 24926
24805: LD_INT 302
24807: DOUBLE
24808: EQUAL
24809: IFTRUE 24813
24811: GO 24850
24813: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
24814: LD_VAR 0 6
24818: PPUSH
24819: LD_VAR 0 7
24823: PPUSH
24824: LD_VAR 0 8
24828: PPUSH
24829: LD_VAR 0 9
24833: PPUSH
24834: LD_VAR 0 4
24838: PPUSH
24839: LD_VAR 0 5
24843: PPUSH
24844: CALL 26097 0 6
24848: GO 24926
24850: LD_INT 303
24852: DOUBLE
24853: EQUAL
24854: IFTRUE 24858
24856: GO 24895
24858: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
24859: LD_VAR 0 6
24863: PPUSH
24864: LD_VAR 0 7
24868: PPUSH
24869: LD_VAR 0 8
24873: PPUSH
24874: LD_VAR 0 9
24878: PPUSH
24879: LD_VAR 0 4
24883: PPUSH
24884: LD_VAR 0 5
24888: PPUSH
24889: CALL 24931 0 6
24893: GO 24926
24895: LD_INT 304
24897: DOUBLE
24898: EQUAL
24899: IFTRUE 24903
24901: GO 24925
24903: POP
// hHackTeleport ( unit , x , y ) ; end ;
24904: LD_VAR 0 2
24908: PPUSH
24909: LD_VAR 0 4
24913: PPUSH
24914: LD_VAR 0 5
24918: PPUSH
24919: CALL 26690 0 3
24923: GO 24926
24925: POP
// end ;
24926: LD_VAR 0 12
24930: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
24931: LD_INT 0
24933: PPUSH
24934: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
24935: LD_VAR 0 1
24939: PUSH
24940: LD_INT 1
24942: LESS
24943: PUSH
24944: LD_VAR 0 1
24948: PUSH
24949: LD_INT 3
24951: GREATER
24952: OR
24953: PUSH
24954: LD_VAR 0 5
24958: PPUSH
24959: LD_VAR 0 6
24963: PPUSH
24964: CALL_OW 428
24968: OR
24969: IFFALSE 24973
// exit ;
24971: GO 25693
// uc_side := your_side ;
24973: LD_ADDR_OWVAR 20
24977: PUSH
24978: LD_OWVAR 2
24982: ST_TO_ADDR
// uc_nation := nation ;
24983: LD_ADDR_OWVAR 21
24987: PUSH
24988: LD_VAR 0 1
24992: ST_TO_ADDR
// bc_level = 1 ;
24993: LD_ADDR_OWVAR 43
24997: PUSH
24998: LD_INT 1
25000: ST_TO_ADDR
// case btype of 1 :
25001: LD_VAR 0 2
25005: PUSH
25006: LD_INT 1
25008: DOUBLE
25009: EQUAL
25010: IFTRUE 25014
25012: GO 25025
25014: POP
// bc_type := b_depot ; 2 :
25015: LD_ADDR_OWVAR 42
25019: PUSH
25020: LD_INT 0
25022: ST_TO_ADDR
25023: GO 25637
25025: LD_INT 2
25027: DOUBLE
25028: EQUAL
25029: IFTRUE 25033
25031: GO 25044
25033: POP
// bc_type := b_warehouse ; 3 :
25034: LD_ADDR_OWVAR 42
25038: PUSH
25039: LD_INT 1
25041: ST_TO_ADDR
25042: GO 25637
25044: LD_INT 3
25046: DOUBLE
25047: EQUAL
25048: IFTRUE 25052
25050: GO 25063
25052: POP
// bc_type := b_lab ; 4 .. 9 :
25053: LD_ADDR_OWVAR 42
25057: PUSH
25058: LD_INT 6
25060: ST_TO_ADDR
25061: GO 25637
25063: LD_INT 4
25065: DOUBLE
25066: GREATEREQUAL
25067: IFFALSE 25075
25069: LD_INT 9
25071: DOUBLE
25072: LESSEQUAL
25073: IFTRUE 25077
25075: GO 25129
25077: POP
// begin bc_type := b_lab_half ;
25078: LD_ADDR_OWVAR 42
25082: PUSH
25083: LD_INT 7
25085: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
25086: LD_ADDR_OWVAR 44
25090: PUSH
25091: LD_INT 10
25093: PUSH
25094: LD_INT 11
25096: PUSH
25097: LD_INT 12
25099: PUSH
25100: LD_INT 15
25102: PUSH
25103: LD_INT 14
25105: PUSH
25106: LD_INT 13
25108: PUSH
25109: EMPTY
25110: LIST
25111: LIST
25112: LIST
25113: LIST
25114: LIST
25115: LIST
25116: PUSH
25117: LD_VAR 0 2
25121: PUSH
25122: LD_INT 3
25124: MINUS
25125: ARRAY
25126: ST_TO_ADDR
// end ; 10 .. 13 :
25127: GO 25637
25129: LD_INT 10
25131: DOUBLE
25132: GREATEREQUAL
25133: IFFALSE 25141
25135: LD_INT 13
25137: DOUBLE
25138: LESSEQUAL
25139: IFTRUE 25143
25141: GO 25220
25143: POP
// begin bc_type := b_lab_full ;
25144: LD_ADDR_OWVAR 42
25148: PUSH
25149: LD_INT 8
25151: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
25152: LD_ADDR_OWVAR 44
25156: PUSH
25157: LD_INT 10
25159: PUSH
25160: LD_INT 12
25162: PUSH
25163: LD_INT 14
25165: PUSH
25166: LD_INT 13
25168: PUSH
25169: EMPTY
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: PUSH
25175: LD_VAR 0 2
25179: PUSH
25180: LD_INT 9
25182: MINUS
25183: ARRAY
25184: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
25185: LD_ADDR_OWVAR 45
25189: PUSH
25190: LD_INT 11
25192: PUSH
25193: LD_INT 15
25195: PUSH
25196: LD_INT 12
25198: PUSH
25199: LD_INT 15
25201: PUSH
25202: EMPTY
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: PUSH
25208: LD_VAR 0 2
25212: PUSH
25213: LD_INT 9
25215: MINUS
25216: ARRAY
25217: ST_TO_ADDR
// end ; 14 :
25218: GO 25637
25220: LD_INT 14
25222: DOUBLE
25223: EQUAL
25224: IFTRUE 25228
25226: GO 25239
25228: POP
// bc_type := b_workshop ; 15 :
25229: LD_ADDR_OWVAR 42
25233: PUSH
25234: LD_INT 2
25236: ST_TO_ADDR
25237: GO 25637
25239: LD_INT 15
25241: DOUBLE
25242: EQUAL
25243: IFTRUE 25247
25245: GO 25258
25247: POP
// bc_type := b_factory ; 16 :
25248: LD_ADDR_OWVAR 42
25252: PUSH
25253: LD_INT 3
25255: ST_TO_ADDR
25256: GO 25637
25258: LD_INT 16
25260: DOUBLE
25261: EQUAL
25262: IFTRUE 25266
25264: GO 25277
25266: POP
// bc_type := b_ext_gun ; 17 :
25267: LD_ADDR_OWVAR 42
25271: PUSH
25272: LD_INT 17
25274: ST_TO_ADDR
25275: GO 25637
25277: LD_INT 17
25279: DOUBLE
25280: EQUAL
25281: IFTRUE 25285
25283: GO 25313
25285: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
25286: LD_ADDR_OWVAR 42
25290: PUSH
25291: LD_INT 19
25293: PUSH
25294: LD_INT 23
25296: PUSH
25297: LD_INT 19
25299: PUSH
25300: EMPTY
25301: LIST
25302: LIST
25303: LIST
25304: PUSH
25305: LD_VAR 0 1
25309: ARRAY
25310: ST_TO_ADDR
25311: GO 25637
25313: LD_INT 18
25315: DOUBLE
25316: EQUAL
25317: IFTRUE 25321
25319: GO 25332
25321: POP
// bc_type := b_ext_radar ; 19 :
25322: LD_ADDR_OWVAR 42
25326: PUSH
25327: LD_INT 20
25329: ST_TO_ADDR
25330: GO 25637
25332: LD_INT 19
25334: DOUBLE
25335: EQUAL
25336: IFTRUE 25340
25338: GO 25351
25340: POP
// bc_type := b_ext_radio ; 20 :
25341: LD_ADDR_OWVAR 42
25345: PUSH
25346: LD_INT 22
25348: ST_TO_ADDR
25349: GO 25637
25351: LD_INT 20
25353: DOUBLE
25354: EQUAL
25355: IFTRUE 25359
25357: GO 25370
25359: POP
// bc_type := b_ext_siberium ; 21 :
25360: LD_ADDR_OWVAR 42
25364: PUSH
25365: LD_INT 21
25367: ST_TO_ADDR
25368: GO 25637
25370: LD_INT 21
25372: DOUBLE
25373: EQUAL
25374: IFTRUE 25378
25376: GO 25389
25378: POP
// bc_type := b_ext_computer ; 22 :
25379: LD_ADDR_OWVAR 42
25383: PUSH
25384: LD_INT 24
25386: ST_TO_ADDR
25387: GO 25637
25389: LD_INT 22
25391: DOUBLE
25392: EQUAL
25393: IFTRUE 25397
25395: GO 25408
25397: POP
// bc_type := b_ext_track ; 23 :
25398: LD_ADDR_OWVAR 42
25402: PUSH
25403: LD_INT 16
25405: ST_TO_ADDR
25406: GO 25637
25408: LD_INT 23
25410: DOUBLE
25411: EQUAL
25412: IFTRUE 25416
25414: GO 25427
25416: POP
// bc_type := b_ext_laser ; 24 :
25417: LD_ADDR_OWVAR 42
25421: PUSH
25422: LD_INT 25
25424: ST_TO_ADDR
25425: GO 25637
25427: LD_INT 24
25429: DOUBLE
25430: EQUAL
25431: IFTRUE 25435
25433: GO 25446
25435: POP
// bc_type := b_control_tower ; 25 :
25436: LD_ADDR_OWVAR 42
25440: PUSH
25441: LD_INT 36
25443: ST_TO_ADDR
25444: GO 25637
25446: LD_INT 25
25448: DOUBLE
25449: EQUAL
25450: IFTRUE 25454
25452: GO 25465
25454: POP
// bc_type := b_breastwork ; 26 :
25455: LD_ADDR_OWVAR 42
25459: PUSH
25460: LD_INT 31
25462: ST_TO_ADDR
25463: GO 25637
25465: LD_INT 26
25467: DOUBLE
25468: EQUAL
25469: IFTRUE 25473
25471: GO 25484
25473: POP
// bc_type := b_bunker ; 27 :
25474: LD_ADDR_OWVAR 42
25478: PUSH
25479: LD_INT 32
25481: ST_TO_ADDR
25482: GO 25637
25484: LD_INT 27
25486: DOUBLE
25487: EQUAL
25488: IFTRUE 25492
25490: GO 25503
25492: POP
// bc_type := b_turret ; 28 :
25493: LD_ADDR_OWVAR 42
25497: PUSH
25498: LD_INT 33
25500: ST_TO_ADDR
25501: GO 25637
25503: LD_INT 28
25505: DOUBLE
25506: EQUAL
25507: IFTRUE 25511
25509: GO 25522
25511: POP
// bc_type := b_armoury ; 29 :
25512: LD_ADDR_OWVAR 42
25516: PUSH
25517: LD_INT 4
25519: ST_TO_ADDR
25520: GO 25637
25522: LD_INT 29
25524: DOUBLE
25525: EQUAL
25526: IFTRUE 25530
25528: GO 25541
25530: POP
// bc_type := b_barracks ; 30 :
25531: LD_ADDR_OWVAR 42
25535: PUSH
25536: LD_INT 5
25538: ST_TO_ADDR
25539: GO 25637
25541: LD_INT 30
25543: DOUBLE
25544: EQUAL
25545: IFTRUE 25549
25547: GO 25560
25549: POP
// bc_type := b_solar_power ; 31 :
25550: LD_ADDR_OWVAR 42
25554: PUSH
25555: LD_INT 27
25557: ST_TO_ADDR
25558: GO 25637
25560: LD_INT 31
25562: DOUBLE
25563: EQUAL
25564: IFTRUE 25568
25566: GO 25579
25568: POP
// bc_type := b_oil_power ; 32 :
25569: LD_ADDR_OWVAR 42
25573: PUSH
25574: LD_INT 26
25576: ST_TO_ADDR
25577: GO 25637
25579: LD_INT 32
25581: DOUBLE
25582: EQUAL
25583: IFTRUE 25587
25585: GO 25598
25587: POP
// bc_type := b_siberite_power ; 33 :
25588: LD_ADDR_OWVAR 42
25592: PUSH
25593: LD_INT 28
25595: ST_TO_ADDR
25596: GO 25637
25598: LD_INT 33
25600: DOUBLE
25601: EQUAL
25602: IFTRUE 25606
25604: GO 25617
25606: POP
// bc_type := b_oil_mine ; 34 :
25607: LD_ADDR_OWVAR 42
25611: PUSH
25612: LD_INT 29
25614: ST_TO_ADDR
25615: GO 25637
25617: LD_INT 34
25619: DOUBLE
25620: EQUAL
25621: IFTRUE 25625
25623: GO 25636
25625: POP
// bc_type := b_siberite_mine ; end ;
25626: LD_ADDR_OWVAR 42
25630: PUSH
25631: LD_INT 30
25633: ST_TO_ADDR
25634: GO 25637
25636: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
25637: LD_ADDR_VAR 0 8
25641: PUSH
25642: LD_VAR 0 5
25646: PPUSH
25647: LD_VAR 0 6
25651: PPUSH
25652: LD_VAR 0 3
25656: PPUSH
25657: CALL_OW 47
25661: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
25662: LD_OWVAR 42
25666: PUSH
25667: LD_INT 32
25669: PUSH
25670: LD_INT 33
25672: PUSH
25673: EMPTY
25674: LIST
25675: LIST
25676: IN
25677: IFFALSE 25693
// PlaceWeaponTurret ( b , weapon ) ;
25679: LD_VAR 0 8
25683: PPUSH
25684: LD_VAR 0 4
25688: PPUSH
25689: CALL_OW 431
// end ;
25693: LD_VAR 0 7
25697: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
25698: LD_INT 0
25700: PPUSH
25701: PPUSH
25702: PPUSH
25703: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25704: LD_ADDR_VAR 0 4
25708: PUSH
25709: LD_INT 22
25711: PUSH
25712: LD_OWVAR 2
25716: PUSH
25717: EMPTY
25718: LIST
25719: LIST
25720: PUSH
25721: LD_INT 2
25723: PUSH
25724: LD_INT 30
25726: PUSH
25727: LD_INT 0
25729: PUSH
25730: EMPTY
25731: LIST
25732: LIST
25733: PUSH
25734: LD_INT 30
25736: PUSH
25737: LD_INT 1
25739: PUSH
25740: EMPTY
25741: LIST
25742: LIST
25743: PUSH
25744: EMPTY
25745: LIST
25746: LIST
25747: LIST
25748: PUSH
25749: EMPTY
25750: LIST
25751: LIST
25752: PPUSH
25753: CALL_OW 69
25757: ST_TO_ADDR
// if not tmp then
25758: LD_VAR 0 4
25762: NOT
25763: IFFALSE 25767
// exit ;
25765: GO 25826
// for i in tmp do
25767: LD_ADDR_VAR 0 2
25771: PUSH
25772: LD_VAR 0 4
25776: PUSH
25777: FOR_IN
25778: IFFALSE 25824
// for j = 1 to 3 do
25780: LD_ADDR_VAR 0 3
25784: PUSH
25785: DOUBLE
25786: LD_INT 1
25788: DEC
25789: ST_TO_ADDR
25790: LD_INT 3
25792: PUSH
25793: FOR_TO
25794: IFFALSE 25820
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
25796: LD_VAR 0 2
25800: PPUSH
25801: CALL_OW 274
25805: PPUSH
25806: LD_VAR 0 3
25810: PPUSH
25811: LD_INT 99999
25813: PPUSH
25814: CALL_OW 277
25818: GO 25793
25820: POP
25821: POP
25822: GO 25777
25824: POP
25825: POP
// end ;
25826: LD_VAR 0 1
25830: RET
// export function hHackSetLevel10 ; var i , j ; begin
25831: LD_INT 0
25833: PPUSH
25834: PPUSH
25835: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25836: LD_ADDR_VAR 0 2
25840: PUSH
25841: LD_INT 21
25843: PUSH
25844: LD_INT 1
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: PPUSH
25851: CALL_OW 69
25855: PUSH
25856: FOR_IN
25857: IFFALSE 25909
// if IsSelected ( i ) then
25859: LD_VAR 0 2
25863: PPUSH
25864: CALL_OW 306
25868: IFFALSE 25907
// begin for j := 1 to 4 do
25870: LD_ADDR_VAR 0 3
25874: PUSH
25875: DOUBLE
25876: LD_INT 1
25878: DEC
25879: ST_TO_ADDR
25880: LD_INT 4
25882: PUSH
25883: FOR_TO
25884: IFFALSE 25905
// SetSkill ( i , j , 10 ) ;
25886: LD_VAR 0 2
25890: PPUSH
25891: LD_VAR 0 3
25895: PPUSH
25896: LD_INT 10
25898: PPUSH
25899: CALL_OW 237
25903: GO 25883
25905: POP
25906: POP
// end ;
25907: GO 25856
25909: POP
25910: POP
// end ;
25911: LD_VAR 0 1
25915: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
25916: LD_INT 0
25918: PPUSH
25919: PPUSH
25920: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
25921: LD_ADDR_VAR 0 2
25925: PUSH
25926: LD_INT 22
25928: PUSH
25929: LD_OWVAR 2
25933: PUSH
25934: EMPTY
25935: LIST
25936: LIST
25937: PUSH
25938: LD_INT 21
25940: PUSH
25941: LD_INT 1
25943: PUSH
25944: EMPTY
25945: LIST
25946: LIST
25947: PUSH
25948: EMPTY
25949: LIST
25950: LIST
25951: PPUSH
25952: CALL_OW 69
25956: PUSH
25957: FOR_IN
25958: IFFALSE 25999
// begin for j := 1 to 4 do
25960: LD_ADDR_VAR 0 3
25964: PUSH
25965: DOUBLE
25966: LD_INT 1
25968: DEC
25969: ST_TO_ADDR
25970: LD_INT 4
25972: PUSH
25973: FOR_TO
25974: IFFALSE 25995
// SetSkill ( i , j , 10 ) ;
25976: LD_VAR 0 2
25980: PPUSH
25981: LD_VAR 0 3
25985: PPUSH
25986: LD_INT 10
25988: PPUSH
25989: CALL_OW 237
25993: GO 25973
25995: POP
25996: POP
// end ;
25997: GO 25957
25999: POP
26000: POP
// end ;
26001: LD_VAR 0 1
26005: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
26006: LD_INT 0
26008: PPUSH
// uc_side := your_side ;
26009: LD_ADDR_OWVAR 20
26013: PUSH
26014: LD_OWVAR 2
26018: ST_TO_ADDR
// uc_nation := nation ;
26019: LD_ADDR_OWVAR 21
26023: PUSH
26024: LD_VAR 0 1
26028: ST_TO_ADDR
// InitHc ;
26029: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
26033: LD_INT 0
26035: PPUSH
26036: LD_VAR 0 2
26040: PPUSH
26041: LD_VAR 0 3
26045: PPUSH
26046: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
26050: LD_VAR 0 4
26054: PPUSH
26055: LD_VAR 0 5
26059: PPUSH
26060: CALL_OW 428
26064: PUSH
26065: LD_INT 0
26067: EQUAL
26068: IFFALSE 26092
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
26070: CALL_OW 44
26074: PPUSH
26075: LD_VAR 0 4
26079: PPUSH
26080: LD_VAR 0 5
26084: PPUSH
26085: LD_INT 1
26087: PPUSH
26088: CALL_OW 48
// end ;
26092: LD_VAR 0 6
26096: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
26097: LD_INT 0
26099: PPUSH
26100: PPUSH
// uc_side := your_side ;
26101: LD_ADDR_OWVAR 20
26105: PUSH
26106: LD_OWVAR 2
26110: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
26111: LD_VAR 0 1
26115: PUSH
26116: LD_INT 1
26118: PUSH
26119: LD_INT 2
26121: PUSH
26122: LD_INT 3
26124: PUSH
26125: LD_INT 4
26127: PUSH
26128: LD_INT 5
26130: PUSH
26131: EMPTY
26132: LIST
26133: LIST
26134: LIST
26135: LIST
26136: LIST
26137: IN
26138: IFFALSE 26150
// uc_nation := nation_american else
26140: LD_ADDR_OWVAR 21
26144: PUSH
26145: LD_INT 1
26147: ST_TO_ADDR
26148: GO 26193
// if chassis in [ 11 , 12 , 13 , 14 ] then
26150: LD_VAR 0 1
26154: PUSH
26155: LD_INT 11
26157: PUSH
26158: LD_INT 12
26160: PUSH
26161: LD_INT 13
26163: PUSH
26164: LD_INT 14
26166: PUSH
26167: EMPTY
26168: LIST
26169: LIST
26170: LIST
26171: LIST
26172: IN
26173: IFFALSE 26185
// uc_nation := nation_arabian else
26175: LD_ADDR_OWVAR 21
26179: PUSH
26180: LD_INT 2
26182: ST_TO_ADDR
26183: GO 26193
// uc_nation := nation_russian ;
26185: LD_ADDR_OWVAR 21
26189: PUSH
26190: LD_INT 3
26192: ST_TO_ADDR
// vc_chassis := chassis ;
26193: LD_ADDR_OWVAR 37
26197: PUSH
26198: LD_VAR 0 1
26202: ST_TO_ADDR
// vc_engine := engine ;
26203: LD_ADDR_OWVAR 39
26207: PUSH
26208: LD_VAR 0 2
26212: ST_TO_ADDR
// vc_control := control ;
26213: LD_ADDR_OWVAR 38
26217: PUSH
26218: LD_VAR 0 3
26222: ST_TO_ADDR
// vc_weapon := weapon ;
26223: LD_ADDR_OWVAR 40
26227: PUSH
26228: LD_VAR 0 4
26232: ST_TO_ADDR
// un := CreateVehicle ;
26233: LD_ADDR_VAR 0 8
26237: PUSH
26238: CALL_OW 45
26242: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
26243: LD_VAR 0 8
26247: PPUSH
26248: LD_INT 0
26250: PPUSH
26251: LD_INT 5
26253: PPUSH
26254: CALL_OW 12
26258: PPUSH
26259: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
26263: LD_VAR 0 8
26267: PPUSH
26268: LD_VAR 0 5
26272: PPUSH
26273: LD_VAR 0 6
26277: PPUSH
26278: LD_INT 1
26280: PPUSH
26281: CALL_OW 48
// end ;
26285: LD_VAR 0 7
26289: RET
// export hInvincible ; every 1 do
26290: GO 26292
26292: DISABLE
// hInvincible := [ ] ;
26293: LD_ADDR_EXP 79
26297: PUSH
26298: EMPTY
26299: ST_TO_ADDR
26300: END
// every 10 do var i ;
26301: GO 26303
26303: DISABLE
26304: LD_INT 0
26306: PPUSH
// begin enable ;
26307: ENABLE
// if not hInvincible then
26308: LD_EXP 79
26312: NOT
26313: IFFALSE 26317
// exit ;
26315: GO 26361
// for i in hInvincible do
26317: LD_ADDR_VAR 0 1
26321: PUSH
26322: LD_EXP 79
26326: PUSH
26327: FOR_IN
26328: IFFALSE 26359
// if GetLives ( i ) < 1000 then
26330: LD_VAR 0 1
26334: PPUSH
26335: CALL_OW 256
26339: PUSH
26340: LD_INT 1000
26342: LESS
26343: IFFALSE 26357
// SetLives ( i , 1000 ) ;
26345: LD_VAR 0 1
26349: PPUSH
26350: LD_INT 1000
26352: PPUSH
26353: CALL_OW 234
26357: GO 26327
26359: POP
26360: POP
// end ;
26361: PPOPN 1
26363: END
// export function hHackInvincible ; var i ; begin
26364: LD_INT 0
26366: PPUSH
26367: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
26368: LD_ADDR_VAR 0 2
26372: PUSH
26373: LD_INT 2
26375: PUSH
26376: LD_INT 21
26378: PUSH
26379: LD_INT 1
26381: PUSH
26382: EMPTY
26383: LIST
26384: LIST
26385: PUSH
26386: LD_INT 21
26388: PUSH
26389: LD_INT 2
26391: PUSH
26392: EMPTY
26393: LIST
26394: LIST
26395: PUSH
26396: EMPTY
26397: LIST
26398: LIST
26399: LIST
26400: PPUSH
26401: CALL_OW 69
26405: PUSH
26406: FOR_IN
26407: IFFALSE 26468
// if IsSelected ( i ) then
26409: LD_VAR 0 2
26413: PPUSH
26414: CALL_OW 306
26418: IFFALSE 26466
// begin if i in hInvincible then
26420: LD_VAR 0 2
26424: PUSH
26425: LD_EXP 79
26429: IN
26430: IFFALSE 26450
// hInvincible := hInvincible diff i else
26432: LD_ADDR_EXP 79
26436: PUSH
26437: LD_EXP 79
26441: PUSH
26442: LD_VAR 0 2
26446: DIFF
26447: ST_TO_ADDR
26448: GO 26466
// hInvincible := hInvincible union i ;
26450: LD_ADDR_EXP 79
26454: PUSH
26455: LD_EXP 79
26459: PUSH
26460: LD_VAR 0 2
26464: UNION
26465: ST_TO_ADDR
// end ;
26466: GO 26406
26468: POP
26469: POP
// end ;
26470: LD_VAR 0 1
26474: RET
// export function hHackInvisible ; var i , j ; begin
26475: LD_INT 0
26477: PPUSH
26478: PPUSH
26479: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
26480: LD_ADDR_VAR 0 2
26484: PUSH
26485: LD_INT 21
26487: PUSH
26488: LD_INT 1
26490: PUSH
26491: EMPTY
26492: LIST
26493: LIST
26494: PPUSH
26495: CALL_OW 69
26499: PUSH
26500: FOR_IN
26501: IFFALSE 26525
// if IsSelected ( i ) then
26503: LD_VAR 0 2
26507: PPUSH
26508: CALL_OW 306
26512: IFFALSE 26523
// ComForceInvisible ( i ) ;
26514: LD_VAR 0 2
26518: PPUSH
26519: CALL_OW 496
26523: GO 26500
26525: POP
26526: POP
// end ;
26527: LD_VAR 0 1
26531: RET
// export function hHackChangeYourSide ; begin
26532: LD_INT 0
26534: PPUSH
// if your_side = 8 then
26535: LD_OWVAR 2
26539: PUSH
26540: LD_INT 8
26542: EQUAL
26543: IFFALSE 26555
// your_side := 0 else
26545: LD_ADDR_OWVAR 2
26549: PUSH
26550: LD_INT 0
26552: ST_TO_ADDR
26553: GO 26569
// your_side := your_side + 1 ;
26555: LD_ADDR_OWVAR 2
26559: PUSH
26560: LD_OWVAR 2
26564: PUSH
26565: LD_INT 1
26567: PLUS
26568: ST_TO_ADDR
// end ;
26569: LD_VAR 0 1
26573: RET
// export function hHackChangeUnitSide ; var i , j ; begin
26574: LD_INT 0
26576: PPUSH
26577: PPUSH
26578: PPUSH
// for i in all_units do
26579: LD_ADDR_VAR 0 2
26583: PUSH
26584: LD_OWVAR 3
26588: PUSH
26589: FOR_IN
26590: IFFALSE 26668
// if IsSelected ( i ) then
26592: LD_VAR 0 2
26596: PPUSH
26597: CALL_OW 306
26601: IFFALSE 26666
// begin j := GetSide ( i ) ;
26603: LD_ADDR_VAR 0 3
26607: PUSH
26608: LD_VAR 0 2
26612: PPUSH
26613: CALL_OW 255
26617: ST_TO_ADDR
// if j = 8 then
26618: LD_VAR 0 3
26622: PUSH
26623: LD_INT 8
26625: EQUAL
26626: IFFALSE 26638
// j := 0 else
26628: LD_ADDR_VAR 0 3
26632: PUSH
26633: LD_INT 0
26635: ST_TO_ADDR
26636: GO 26652
// j := j + 1 ;
26638: LD_ADDR_VAR 0 3
26642: PUSH
26643: LD_VAR 0 3
26647: PUSH
26648: LD_INT 1
26650: PLUS
26651: ST_TO_ADDR
// SetSide ( i , j ) ;
26652: LD_VAR 0 2
26656: PPUSH
26657: LD_VAR 0 3
26661: PPUSH
26662: CALL_OW 235
// end ;
26666: GO 26589
26668: POP
26669: POP
// end ;
26670: LD_VAR 0 1
26674: RET
// export function hHackFog ; begin
26675: LD_INT 0
26677: PPUSH
// FogOff ( true ) ;
26678: LD_INT 1
26680: PPUSH
26681: CALL_OW 344
// end ;
26685: LD_VAR 0 1
26689: RET
// export function hHackTeleport ( unit , x , y ) ; begin
26690: LD_INT 0
26692: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
26693: LD_VAR 0 1
26697: PPUSH
26698: LD_VAR 0 2
26702: PPUSH
26703: LD_VAR 0 3
26707: PPUSH
26708: LD_INT 1
26710: PPUSH
26711: LD_INT 1
26713: PPUSH
26714: CALL_OW 483
// CenterOnXY ( x , y ) ;
26718: LD_VAR 0 2
26722: PPUSH
26723: LD_VAR 0 3
26727: PPUSH
26728: CALL_OW 84
// end ;
26732: LD_VAR 0 4
26736: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
26737: LD_INT 0
26739: PPUSH
26740: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
26741: LD_VAR 0 1
26745: NOT
26746: PUSH
26747: LD_VAR 0 2
26751: PPUSH
26752: LD_VAR 0 3
26756: PPUSH
26757: CALL_OW 488
26761: NOT
26762: OR
26763: PUSH
26764: LD_VAR 0 1
26768: PPUSH
26769: CALL_OW 266
26773: PUSH
26774: LD_INT 3
26776: NONEQUAL
26777: PUSH
26778: LD_VAR 0 1
26782: PPUSH
26783: CALL_OW 247
26787: PUSH
26788: LD_INT 1
26790: EQUAL
26791: NOT
26792: AND
26793: OR
26794: IFFALSE 26798
// exit ;
26796: GO 26947
// if GetType ( factory ) = unit_human then
26798: LD_VAR 0 1
26802: PPUSH
26803: CALL_OW 247
26807: PUSH
26808: LD_INT 1
26810: EQUAL
26811: IFFALSE 26828
// factory := IsInUnit ( factory ) ;
26813: LD_ADDR_VAR 0 1
26817: PUSH
26818: LD_VAR 0 1
26822: PPUSH
26823: CALL_OW 310
26827: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
26828: LD_VAR 0 1
26832: PPUSH
26833: CALL_OW 266
26837: PUSH
26838: LD_INT 3
26840: NONEQUAL
26841: IFFALSE 26845
// exit ;
26843: GO 26947
// if HexInfo ( x , y ) = factory then
26845: LD_VAR 0 2
26849: PPUSH
26850: LD_VAR 0 3
26854: PPUSH
26855: CALL_OW 428
26859: PUSH
26860: LD_VAR 0 1
26864: EQUAL
26865: IFFALSE 26892
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
26867: LD_ADDR_EXP 80
26871: PUSH
26872: LD_EXP 80
26876: PPUSH
26877: LD_VAR 0 1
26881: PPUSH
26882: LD_INT 0
26884: PPUSH
26885: CALL_OW 1
26889: ST_TO_ADDR
26890: GO 26943
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
26892: LD_ADDR_EXP 80
26896: PUSH
26897: LD_EXP 80
26901: PPUSH
26902: LD_VAR 0 1
26906: PPUSH
26907: LD_VAR 0 1
26911: PPUSH
26912: CALL_OW 255
26916: PUSH
26917: LD_VAR 0 1
26921: PUSH
26922: LD_VAR 0 2
26926: PUSH
26927: LD_VAR 0 3
26931: PUSH
26932: EMPTY
26933: LIST
26934: LIST
26935: LIST
26936: LIST
26937: PPUSH
26938: CALL_OW 1
26942: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26943: CALL 26952 0 0
// end ;
26947: LD_VAR 0 4
26951: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
26952: LD_INT 0
26954: PPUSH
26955: PPUSH
26956: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
26957: LD_STRING resetFactoryWaypoint();
26959: PPUSH
26960: CALL_OW 559
// if factoryWaypoints then
26964: LD_EXP 80
26968: IFFALSE 27094
// begin list := PrepareArray ( factoryWaypoints ) ;
26970: LD_ADDR_VAR 0 3
26974: PUSH
26975: LD_EXP 80
26979: PPUSH
26980: CALL 73387 0 1
26984: ST_TO_ADDR
// for i := 1 to list do
26985: LD_ADDR_VAR 0 2
26989: PUSH
26990: DOUBLE
26991: LD_INT 1
26993: DEC
26994: ST_TO_ADDR
26995: LD_VAR 0 3
26999: PUSH
27000: FOR_TO
27001: IFFALSE 27092
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
27003: LD_STRING setFactoryWaypointXY(
27005: PUSH
27006: LD_VAR 0 3
27010: PUSH
27011: LD_VAR 0 2
27015: ARRAY
27016: PUSH
27017: LD_INT 1
27019: ARRAY
27020: STR
27021: PUSH
27022: LD_STRING ,
27024: STR
27025: PUSH
27026: LD_VAR 0 3
27030: PUSH
27031: LD_VAR 0 2
27035: ARRAY
27036: PUSH
27037: LD_INT 2
27039: ARRAY
27040: STR
27041: PUSH
27042: LD_STRING ,
27044: STR
27045: PUSH
27046: LD_VAR 0 3
27050: PUSH
27051: LD_VAR 0 2
27055: ARRAY
27056: PUSH
27057: LD_INT 3
27059: ARRAY
27060: STR
27061: PUSH
27062: LD_STRING ,
27064: STR
27065: PUSH
27066: LD_VAR 0 3
27070: PUSH
27071: LD_VAR 0 2
27075: ARRAY
27076: PUSH
27077: LD_INT 4
27079: ARRAY
27080: STR
27081: PUSH
27082: LD_STRING )
27084: STR
27085: PPUSH
27086: CALL_OW 559
27090: GO 27000
27092: POP
27093: POP
// end ; end ;
27094: LD_VAR 0 1
27098: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
27099: LD_INT 0
27101: PPUSH
// if HexInfo ( x , y ) = warehouse then
27102: LD_VAR 0 2
27106: PPUSH
27107: LD_VAR 0 3
27111: PPUSH
27112: CALL_OW 428
27116: PUSH
27117: LD_VAR 0 1
27121: EQUAL
27122: IFFALSE 27149
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
27124: LD_ADDR_EXP 81
27128: PUSH
27129: LD_EXP 81
27133: PPUSH
27134: LD_VAR 0 1
27138: PPUSH
27139: LD_INT 0
27141: PPUSH
27142: CALL_OW 1
27146: ST_TO_ADDR
27147: GO 27200
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
27149: LD_ADDR_EXP 81
27153: PUSH
27154: LD_EXP 81
27158: PPUSH
27159: LD_VAR 0 1
27163: PPUSH
27164: LD_VAR 0 1
27168: PPUSH
27169: CALL_OW 255
27173: PUSH
27174: LD_VAR 0 1
27178: PUSH
27179: LD_VAR 0 2
27183: PUSH
27184: LD_VAR 0 3
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: LIST
27193: LIST
27194: PPUSH
27195: CALL_OW 1
27199: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
27200: CALL 27209 0 0
// end ;
27204: LD_VAR 0 4
27208: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
27209: LD_INT 0
27211: PPUSH
27212: PPUSH
27213: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
27214: LD_STRING resetWarehouseGatheringPoints();
27216: PPUSH
27217: CALL_OW 559
// if warehouseGatheringPoints then
27221: LD_EXP 81
27225: IFFALSE 27351
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
27227: LD_ADDR_VAR 0 3
27231: PUSH
27232: LD_EXP 81
27236: PPUSH
27237: CALL 73387 0 1
27241: ST_TO_ADDR
// for i := 1 to list do
27242: LD_ADDR_VAR 0 2
27246: PUSH
27247: DOUBLE
27248: LD_INT 1
27250: DEC
27251: ST_TO_ADDR
27252: LD_VAR 0 3
27256: PUSH
27257: FOR_TO
27258: IFFALSE 27349
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
27260: LD_STRING setWarehouseGatheringPointXY(
27262: PUSH
27263: LD_VAR 0 3
27267: PUSH
27268: LD_VAR 0 2
27272: ARRAY
27273: PUSH
27274: LD_INT 1
27276: ARRAY
27277: STR
27278: PUSH
27279: LD_STRING ,
27281: STR
27282: PUSH
27283: LD_VAR 0 3
27287: PUSH
27288: LD_VAR 0 2
27292: ARRAY
27293: PUSH
27294: LD_INT 2
27296: ARRAY
27297: STR
27298: PUSH
27299: LD_STRING ,
27301: STR
27302: PUSH
27303: LD_VAR 0 3
27307: PUSH
27308: LD_VAR 0 2
27312: ARRAY
27313: PUSH
27314: LD_INT 3
27316: ARRAY
27317: STR
27318: PUSH
27319: LD_STRING ,
27321: STR
27322: PUSH
27323: LD_VAR 0 3
27327: PUSH
27328: LD_VAR 0 2
27332: ARRAY
27333: PUSH
27334: LD_INT 4
27336: ARRAY
27337: STR
27338: PUSH
27339: LD_STRING )
27341: STR
27342: PPUSH
27343: CALL_OW 559
27347: GO 27257
27349: POP
27350: POP
// end ; end ;
27351: LD_VAR 0 1
27355: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
27356: LD_EXP 81
27360: IFFALSE 28045
27362: GO 27364
27364: DISABLE
27365: LD_INT 0
27367: PPUSH
27368: PPUSH
27369: PPUSH
27370: PPUSH
27371: PPUSH
27372: PPUSH
27373: PPUSH
27374: PPUSH
27375: PPUSH
// begin enable ;
27376: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
27377: LD_ADDR_VAR 0 3
27381: PUSH
27382: LD_EXP 81
27386: PPUSH
27387: CALL 73387 0 1
27391: ST_TO_ADDR
// if not list then
27392: LD_VAR 0 3
27396: NOT
27397: IFFALSE 27401
// exit ;
27399: GO 28045
// for i := 1 to list do
27401: LD_ADDR_VAR 0 1
27405: PUSH
27406: DOUBLE
27407: LD_INT 1
27409: DEC
27410: ST_TO_ADDR
27411: LD_VAR 0 3
27415: PUSH
27416: FOR_TO
27417: IFFALSE 28043
// begin depot := list [ i ] [ 2 ] ;
27419: LD_ADDR_VAR 0 8
27423: PUSH
27424: LD_VAR 0 3
27428: PUSH
27429: LD_VAR 0 1
27433: ARRAY
27434: PUSH
27435: LD_INT 2
27437: ARRAY
27438: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
27439: LD_ADDR_VAR 0 5
27443: PUSH
27444: LD_VAR 0 3
27448: PUSH
27449: LD_VAR 0 1
27453: ARRAY
27454: PUSH
27455: LD_INT 1
27457: ARRAY
27458: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
27459: LD_VAR 0 8
27463: PPUSH
27464: CALL_OW 301
27468: PUSH
27469: LD_VAR 0 5
27473: PUSH
27474: LD_VAR 0 8
27478: PPUSH
27479: CALL_OW 255
27483: NONEQUAL
27484: OR
27485: IFFALSE 27514
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
27487: LD_ADDR_EXP 81
27491: PUSH
27492: LD_EXP 81
27496: PPUSH
27497: LD_VAR 0 8
27501: PPUSH
27502: LD_INT 0
27504: PPUSH
27505: CALL_OW 1
27509: ST_TO_ADDR
// exit ;
27510: POP
27511: POP
27512: GO 28045
// end ; x := list [ i ] [ 3 ] ;
27514: LD_ADDR_VAR 0 6
27518: PUSH
27519: LD_VAR 0 3
27523: PUSH
27524: LD_VAR 0 1
27528: ARRAY
27529: PUSH
27530: LD_INT 3
27532: ARRAY
27533: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
27534: LD_ADDR_VAR 0 7
27538: PUSH
27539: LD_VAR 0 3
27543: PUSH
27544: LD_VAR 0 1
27548: ARRAY
27549: PUSH
27550: LD_INT 4
27552: ARRAY
27553: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
27554: LD_ADDR_VAR 0 9
27558: PUSH
27559: LD_VAR 0 6
27563: PPUSH
27564: LD_VAR 0 7
27568: PPUSH
27569: LD_INT 16
27571: PPUSH
27572: CALL 71975 0 3
27576: ST_TO_ADDR
// if not cratesNearbyPoint then
27577: LD_VAR 0 9
27581: NOT
27582: IFFALSE 27588
// exit ;
27584: POP
27585: POP
27586: GO 28045
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
27588: LD_ADDR_VAR 0 4
27592: PUSH
27593: LD_INT 22
27595: PUSH
27596: LD_VAR 0 5
27600: PUSH
27601: EMPTY
27602: LIST
27603: LIST
27604: PUSH
27605: LD_INT 3
27607: PUSH
27608: LD_INT 60
27610: PUSH
27611: EMPTY
27612: LIST
27613: PUSH
27614: EMPTY
27615: LIST
27616: LIST
27617: PUSH
27618: LD_INT 91
27620: PUSH
27621: LD_VAR 0 8
27625: PUSH
27626: LD_INT 6
27628: PUSH
27629: EMPTY
27630: LIST
27631: LIST
27632: LIST
27633: PUSH
27634: LD_INT 2
27636: PUSH
27637: LD_INT 25
27639: PUSH
27640: LD_INT 2
27642: PUSH
27643: EMPTY
27644: LIST
27645: LIST
27646: PUSH
27647: LD_INT 25
27649: PUSH
27650: LD_INT 16
27652: PUSH
27653: EMPTY
27654: LIST
27655: LIST
27656: PUSH
27657: EMPTY
27658: LIST
27659: LIST
27660: LIST
27661: PUSH
27662: EMPTY
27663: LIST
27664: LIST
27665: LIST
27666: LIST
27667: PPUSH
27668: CALL_OW 69
27672: PUSH
27673: LD_VAR 0 8
27677: PPUSH
27678: CALL_OW 313
27682: PPUSH
27683: LD_INT 3
27685: PUSH
27686: LD_INT 60
27688: PUSH
27689: EMPTY
27690: LIST
27691: PUSH
27692: EMPTY
27693: LIST
27694: LIST
27695: PUSH
27696: LD_INT 2
27698: PUSH
27699: LD_INT 25
27701: PUSH
27702: LD_INT 2
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: PUSH
27709: LD_INT 25
27711: PUSH
27712: LD_INT 16
27714: PUSH
27715: EMPTY
27716: LIST
27717: LIST
27718: PUSH
27719: EMPTY
27720: LIST
27721: LIST
27722: LIST
27723: PUSH
27724: EMPTY
27725: LIST
27726: LIST
27727: PPUSH
27728: CALL_OW 72
27732: UNION
27733: ST_TO_ADDR
// if tmp then
27734: LD_VAR 0 4
27738: IFFALSE 27818
// begin tmp := ShrinkArray ( tmp , 3 ) ;
27740: LD_ADDR_VAR 0 4
27744: PUSH
27745: LD_VAR 0 4
27749: PPUSH
27750: LD_INT 3
27752: PPUSH
27753: CALL 69944 0 2
27757: ST_TO_ADDR
// for j in tmp do
27758: LD_ADDR_VAR 0 2
27762: PUSH
27763: LD_VAR 0 4
27767: PUSH
27768: FOR_IN
27769: IFFALSE 27812
// begin if IsInUnit ( j ) then
27771: LD_VAR 0 2
27775: PPUSH
27776: CALL_OW 310
27780: IFFALSE 27791
// ComExit ( j ) ;
27782: LD_VAR 0 2
27786: PPUSH
27787: CALL 70027 0 1
// AddComCollect ( j , x , y ) ;
27791: LD_VAR 0 2
27795: PPUSH
27796: LD_VAR 0 6
27800: PPUSH
27801: LD_VAR 0 7
27805: PPUSH
27806: CALL_OW 177
// end ;
27810: GO 27768
27812: POP
27813: POP
// exit ;
27814: POP
27815: POP
27816: GO 28045
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
27818: LD_ADDR_VAR 0 4
27822: PUSH
27823: LD_INT 22
27825: PUSH
27826: LD_VAR 0 5
27830: PUSH
27831: EMPTY
27832: LIST
27833: LIST
27834: PUSH
27835: LD_INT 91
27837: PUSH
27838: LD_VAR 0 8
27842: PUSH
27843: LD_INT 8
27845: PUSH
27846: EMPTY
27847: LIST
27848: LIST
27849: LIST
27850: PUSH
27851: LD_INT 2
27853: PUSH
27854: LD_INT 34
27856: PUSH
27857: LD_INT 12
27859: PUSH
27860: EMPTY
27861: LIST
27862: LIST
27863: PUSH
27864: LD_INT 34
27866: PUSH
27867: LD_INT 51
27869: PUSH
27870: EMPTY
27871: LIST
27872: LIST
27873: PUSH
27874: LD_INT 34
27876: PUSH
27877: LD_INT 32
27879: PUSH
27880: EMPTY
27881: LIST
27882: LIST
27883: PUSH
27884: LD_INT 34
27886: PUSH
27887: LD_INT 89
27889: PUSH
27890: EMPTY
27891: LIST
27892: LIST
27893: PUSH
27894: EMPTY
27895: LIST
27896: LIST
27897: LIST
27898: LIST
27899: LIST
27900: PUSH
27901: EMPTY
27902: LIST
27903: LIST
27904: LIST
27905: PPUSH
27906: CALL_OW 69
27910: ST_TO_ADDR
// if tmp then
27911: LD_VAR 0 4
27915: IFFALSE 28041
// begin for j in tmp do
27917: LD_ADDR_VAR 0 2
27921: PUSH
27922: LD_VAR 0 4
27926: PUSH
27927: FOR_IN
27928: IFFALSE 28039
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
27930: LD_VAR 0 2
27934: PPUSH
27935: CALL_OW 262
27939: PUSH
27940: LD_INT 3
27942: EQUAL
27943: PUSH
27944: LD_VAR 0 2
27948: PPUSH
27949: CALL_OW 261
27953: PUSH
27954: LD_INT 20
27956: GREATER
27957: OR
27958: PUSH
27959: LD_VAR 0 2
27963: PPUSH
27964: CALL_OW 314
27968: NOT
27969: AND
27970: PUSH
27971: LD_VAR 0 2
27975: PPUSH
27976: CALL_OW 263
27980: PUSH
27981: LD_INT 1
27983: NONEQUAL
27984: PUSH
27985: LD_VAR 0 2
27989: PPUSH
27990: CALL_OW 311
27994: OR
27995: AND
27996: IFFALSE 28037
// begin ComCollect ( j , x , y ) ;
27998: LD_VAR 0 2
28002: PPUSH
28003: LD_VAR 0 6
28007: PPUSH
28008: LD_VAR 0 7
28012: PPUSH
28013: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
28017: LD_VAR 0 2
28021: PPUSH
28022: LD_VAR 0 8
28026: PPUSH
28027: CALL_OW 172
// exit ;
28031: POP
28032: POP
28033: POP
28034: POP
28035: GO 28045
// end ;
28037: GO 27927
28039: POP
28040: POP
// end ; end ;
28041: GO 27416
28043: POP
28044: POP
// end ; end_of_file
28045: PPOPN 9
28047: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
28048: LD_INT 0
28050: PPUSH
28051: PPUSH
28052: PPUSH
28053: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
28054: LD_VAR 0 1
28058: PPUSH
28059: CALL_OW 264
28063: PUSH
28064: LD_INT 91
28066: EQUAL
28067: IFFALSE 28139
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
28069: LD_INT 68
28071: PPUSH
28072: LD_VAR 0 1
28076: PPUSH
28077: CALL_OW 255
28081: PPUSH
28082: CALL_OW 321
28086: PUSH
28087: LD_INT 2
28089: EQUAL
28090: IFFALSE 28102
// eff := 70 else
28092: LD_ADDR_VAR 0 4
28096: PUSH
28097: LD_INT 70
28099: ST_TO_ADDR
28100: GO 28110
// eff := 30 ;
28102: LD_ADDR_VAR 0 4
28106: PUSH
28107: LD_INT 30
28109: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
28110: LD_VAR 0 1
28114: PPUSH
28115: CALL_OW 250
28119: PPUSH
28120: LD_VAR 0 1
28124: PPUSH
28125: CALL_OW 251
28129: PPUSH
28130: LD_VAR 0 4
28134: PPUSH
28135: CALL_OW 495
// end ; end ;
28139: LD_VAR 0 2
28143: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
28144: LD_INT 0
28146: PPUSH
// end ;
28147: LD_VAR 0 4
28151: RET
// export function SOS_Command ( cmd ) ; begin
28152: LD_INT 0
28154: PPUSH
// end ;
28155: LD_VAR 0 2
28159: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
28160: LD_INT 0
28162: PPUSH
// end ;
28163: LD_VAR 0 6
28167: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
28168: LD_INT 0
28170: PPUSH
28171: PPUSH
// if not vehicle or not factory then
28172: LD_VAR 0 1
28176: NOT
28177: PUSH
28178: LD_VAR 0 2
28182: NOT
28183: OR
28184: IFFALSE 28188
// exit ;
28186: GO 28419
// if factoryWaypoints >= factory then
28188: LD_EXP 80
28192: PUSH
28193: LD_VAR 0 2
28197: GREATEREQUAL
28198: IFFALSE 28419
// if factoryWaypoints [ factory ] then
28200: LD_EXP 80
28204: PUSH
28205: LD_VAR 0 2
28209: ARRAY
28210: IFFALSE 28419
// begin if GetControl ( vehicle ) = control_manual then
28212: LD_VAR 0 1
28216: PPUSH
28217: CALL_OW 263
28221: PUSH
28222: LD_INT 1
28224: EQUAL
28225: IFFALSE 28306
// begin driver := IsDrivenBy ( vehicle ) ;
28227: LD_ADDR_VAR 0 4
28231: PUSH
28232: LD_VAR 0 1
28236: PPUSH
28237: CALL_OW 311
28241: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28242: LD_VAR 0 4
28246: PPUSH
28247: LD_EXP 80
28251: PUSH
28252: LD_VAR 0 2
28256: ARRAY
28257: PUSH
28258: LD_INT 3
28260: ARRAY
28261: PPUSH
28262: LD_EXP 80
28266: PUSH
28267: LD_VAR 0 2
28271: ARRAY
28272: PUSH
28273: LD_INT 4
28275: ARRAY
28276: PPUSH
28277: CALL_OW 171
// AddComExitVehicle ( driver ) ;
28281: LD_VAR 0 4
28285: PPUSH
28286: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
28290: LD_VAR 0 4
28294: PPUSH
28295: LD_VAR 0 2
28299: PPUSH
28300: CALL_OW 180
// end else
28304: GO 28419
// if GetControl ( vehicle ) = control_remote then
28306: LD_VAR 0 1
28310: PPUSH
28311: CALL_OW 263
28315: PUSH
28316: LD_INT 2
28318: EQUAL
28319: IFFALSE 28380
// begin wait ( 0 0$2 ) ;
28321: LD_INT 70
28323: PPUSH
28324: CALL_OW 67
// if Connect ( vehicle ) then
28328: LD_VAR 0 1
28332: PPUSH
28333: CALL 40268 0 1
28337: IFFALSE 28378
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28339: LD_VAR 0 1
28343: PPUSH
28344: LD_EXP 80
28348: PUSH
28349: LD_VAR 0 2
28353: ARRAY
28354: PUSH
28355: LD_INT 3
28357: ARRAY
28358: PPUSH
28359: LD_EXP 80
28363: PUSH
28364: LD_VAR 0 2
28368: ARRAY
28369: PUSH
28370: LD_INT 4
28372: ARRAY
28373: PPUSH
28374: CALL_OW 171
// end else
28378: GO 28419
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28380: LD_VAR 0 1
28384: PPUSH
28385: LD_EXP 80
28389: PUSH
28390: LD_VAR 0 2
28394: ARRAY
28395: PUSH
28396: LD_INT 3
28398: ARRAY
28399: PPUSH
28400: LD_EXP 80
28404: PUSH
28405: LD_VAR 0 2
28409: ARRAY
28410: PUSH
28411: LD_INT 4
28413: ARRAY
28414: PPUSH
28415: CALL_OW 171
// end ; end ;
28419: LD_VAR 0 3
28423: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
28424: LD_INT 0
28426: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
28427: LD_VAR 0 1
28431: PUSH
28432: LD_INT 250
28434: EQUAL
28435: PUSH
28436: LD_VAR 0 2
28440: PPUSH
28441: CALL_OW 264
28445: PUSH
28446: LD_INT 81
28448: EQUAL
28449: AND
28450: IFFALSE 28471
// MinerPlaceMine ( unit , x , y ) ;
28452: LD_VAR 0 2
28456: PPUSH
28457: LD_VAR 0 4
28461: PPUSH
28462: LD_VAR 0 5
28466: PPUSH
28467: CALL 30856 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
28471: LD_VAR 0 1
28475: PUSH
28476: LD_INT 251
28478: EQUAL
28479: PUSH
28480: LD_VAR 0 2
28484: PPUSH
28485: CALL_OW 264
28489: PUSH
28490: LD_INT 81
28492: EQUAL
28493: AND
28494: IFFALSE 28515
// MinerDetonateMine ( unit , x , y ) ;
28496: LD_VAR 0 2
28500: PPUSH
28501: LD_VAR 0 4
28505: PPUSH
28506: LD_VAR 0 5
28510: PPUSH
28511: CALL 31131 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
28515: LD_VAR 0 1
28519: PUSH
28520: LD_INT 252
28522: EQUAL
28523: PUSH
28524: LD_VAR 0 2
28528: PPUSH
28529: CALL_OW 264
28533: PUSH
28534: LD_INT 81
28536: EQUAL
28537: AND
28538: IFFALSE 28559
// MinerCreateMinefield ( unit , x , y ) ;
28540: LD_VAR 0 2
28544: PPUSH
28545: LD_VAR 0 4
28549: PPUSH
28550: LD_VAR 0 5
28554: PPUSH
28555: CALL 31548 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
28559: LD_VAR 0 1
28563: PUSH
28564: LD_INT 253
28566: EQUAL
28567: PUSH
28568: LD_VAR 0 2
28572: PPUSH
28573: CALL_OW 257
28577: PUSH
28578: LD_INT 5
28580: EQUAL
28581: AND
28582: IFFALSE 28603
// ComBinocular ( unit , x , y ) ;
28584: LD_VAR 0 2
28588: PPUSH
28589: LD_VAR 0 4
28593: PPUSH
28594: LD_VAR 0 5
28598: PPUSH
28599: CALL 31917 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
28603: LD_VAR 0 1
28607: PUSH
28608: LD_INT 254
28610: EQUAL
28611: PUSH
28612: LD_VAR 0 2
28616: PPUSH
28617: CALL_OW 264
28621: PUSH
28622: LD_INT 99
28624: EQUAL
28625: AND
28626: PUSH
28627: LD_VAR 0 3
28631: PPUSH
28632: CALL_OW 263
28636: PUSH
28637: LD_INT 3
28639: EQUAL
28640: AND
28641: IFFALSE 28657
// HackDestroyVehicle ( unit , selectedUnit ) ;
28643: LD_VAR 0 2
28647: PPUSH
28648: LD_VAR 0 3
28652: PPUSH
28653: CALL 30220 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
28657: LD_VAR 0 1
28661: PUSH
28662: LD_INT 255
28664: EQUAL
28665: PUSH
28666: LD_VAR 0 2
28670: PPUSH
28671: CALL_OW 264
28675: PUSH
28676: LD_INT 14
28678: PUSH
28679: LD_INT 53
28681: PUSH
28682: EMPTY
28683: LIST
28684: LIST
28685: IN
28686: AND
28687: PUSH
28688: LD_VAR 0 4
28692: PPUSH
28693: LD_VAR 0 5
28697: PPUSH
28698: CALL_OW 488
28702: AND
28703: IFFALSE 28727
// CutTreeXYR ( unit , x , y , 12 ) ;
28705: LD_VAR 0 2
28709: PPUSH
28710: LD_VAR 0 4
28714: PPUSH
28715: LD_VAR 0 5
28719: PPUSH
28720: LD_INT 12
28722: PPUSH
28723: CALL 28790 0 4
// if cmd = 256 then
28727: LD_VAR 0 1
28731: PUSH
28732: LD_INT 256
28734: EQUAL
28735: IFFALSE 28756
// SetFactoryWaypoint ( unit , x , y ) ;
28737: LD_VAR 0 2
28741: PPUSH
28742: LD_VAR 0 4
28746: PPUSH
28747: LD_VAR 0 5
28751: PPUSH
28752: CALL 26737 0 3
// if cmd = 257 then
28756: LD_VAR 0 1
28760: PUSH
28761: LD_INT 257
28763: EQUAL
28764: IFFALSE 28785
// SetWarehouseGatheringPoint ( unit , x , y ) ;
28766: LD_VAR 0 2
28770: PPUSH
28771: LD_VAR 0 4
28775: PPUSH
28776: LD_VAR 0 5
28780: PPUSH
28781: CALL 27099 0 3
// end ;
28785: LD_VAR 0 6
28789: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
28790: LD_INT 0
28792: PPUSH
28793: PPUSH
28794: PPUSH
28795: PPUSH
28796: PPUSH
28797: PPUSH
28798: PPUSH
28799: PPUSH
28800: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
28801: LD_VAR 0 1
28805: NOT
28806: PUSH
28807: LD_VAR 0 2
28811: PPUSH
28812: LD_VAR 0 3
28816: PPUSH
28817: CALL_OW 488
28821: NOT
28822: OR
28823: PUSH
28824: LD_VAR 0 4
28828: NOT
28829: OR
28830: IFFALSE 28834
// exit ;
28832: GO 29174
// list := [ ] ;
28834: LD_ADDR_VAR 0 13
28838: PUSH
28839: EMPTY
28840: ST_TO_ADDR
// if x - r < 0 then
28841: LD_VAR 0 2
28845: PUSH
28846: LD_VAR 0 4
28850: MINUS
28851: PUSH
28852: LD_INT 0
28854: LESS
28855: IFFALSE 28867
// min_x := 0 else
28857: LD_ADDR_VAR 0 7
28861: PUSH
28862: LD_INT 0
28864: ST_TO_ADDR
28865: GO 28883
// min_x := x - r ;
28867: LD_ADDR_VAR 0 7
28871: PUSH
28872: LD_VAR 0 2
28876: PUSH
28877: LD_VAR 0 4
28881: MINUS
28882: ST_TO_ADDR
// if y - r < 0 then
28883: LD_VAR 0 3
28887: PUSH
28888: LD_VAR 0 4
28892: MINUS
28893: PUSH
28894: LD_INT 0
28896: LESS
28897: IFFALSE 28909
// min_y := 0 else
28899: LD_ADDR_VAR 0 8
28903: PUSH
28904: LD_INT 0
28906: ST_TO_ADDR
28907: GO 28925
// min_y := y - r ;
28909: LD_ADDR_VAR 0 8
28913: PUSH
28914: LD_VAR 0 3
28918: PUSH
28919: LD_VAR 0 4
28923: MINUS
28924: ST_TO_ADDR
// max_x := x + r ;
28925: LD_ADDR_VAR 0 9
28929: PUSH
28930: LD_VAR 0 2
28934: PUSH
28935: LD_VAR 0 4
28939: PLUS
28940: ST_TO_ADDR
// max_y := y + r ;
28941: LD_ADDR_VAR 0 10
28945: PUSH
28946: LD_VAR 0 3
28950: PUSH
28951: LD_VAR 0 4
28955: PLUS
28956: ST_TO_ADDR
// for _x = min_x to max_x do
28957: LD_ADDR_VAR 0 11
28961: PUSH
28962: DOUBLE
28963: LD_VAR 0 7
28967: DEC
28968: ST_TO_ADDR
28969: LD_VAR 0 9
28973: PUSH
28974: FOR_TO
28975: IFFALSE 29092
// for _y = min_y to max_y do
28977: LD_ADDR_VAR 0 12
28981: PUSH
28982: DOUBLE
28983: LD_VAR 0 8
28987: DEC
28988: ST_TO_ADDR
28989: LD_VAR 0 10
28993: PUSH
28994: FOR_TO
28995: IFFALSE 29088
// begin if not ValidHex ( _x , _y ) then
28997: LD_VAR 0 11
29001: PPUSH
29002: LD_VAR 0 12
29006: PPUSH
29007: CALL_OW 488
29011: NOT
29012: IFFALSE 29016
// continue ;
29014: GO 28994
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
29016: LD_VAR 0 11
29020: PPUSH
29021: LD_VAR 0 12
29025: PPUSH
29026: CALL_OW 351
29030: PUSH
29031: LD_VAR 0 11
29035: PPUSH
29036: LD_VAR 0 12
29040: PPUSH
29041: CALL_OW 554
29045: AND
29046: IFFALSE 29086
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
29048: LD_ADDR_VAR 0 13
29052: PUSH
29053: LD_VAR 0 13
29057: PPUSH
29058: LD_VAR 0 13
29062: PUSH
29063: LD_INT 1
29065: PLUS
29066: PPUSH
29067: LD_VAR 0 11
29071: PUSH
29072: LD_VAR 0 12
29076: PUSH
29077: EMPTY
29078: LIST
29079: LIST
29080: PPUSH
29081: CALL_OW 2
29085: ST_TO_ADDR
// end ;
29086: GO 28994
29088: POP
29089: POP
29090: GO 28974
29092: POP
29093: POP
// if not list then
29094: LD_VAR 0 13
29098: NOT
29099: IFFALSE 29103
// exit ;
29101: GO 29174
// for i in list do
29103: LD_ADDR_VAR 0 6
29107: PUSH
29108: LD_VAR 0 13
29112: PUSH
29113: FOR_IN
29114: IFFALSE 29172
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
29116: LD_VAR 0 1
29120: PPUSH
29121: LD_STRING M
29123: PUSH
29124: LD_VAR 0 6
29128: PUSH
29129: LD_INT 1
29131: ARRAY
29132: PUSH
29133: LD_VAR 0 6
29137: PUSH
29138: LD_INT 2
29140: ARRAY
29141: PUSH
29142: LD_INT 0
29144: PUSH
29145: LD_INT 0
29147: PUSH
29148: LD_INT 0
29150: PUSH
29151: LD_INT 0
29153: PUSH
29154: EMPTY
29155: LIST
29156: LIST
29157: LIST
29158: LIST
29159: LIST
29160: LIST
29161: LIST
29162: PUSH
29163: EMPTY
29164: LIST
29165: PPUSH
29166: CALL_OW 447
29170: GO 29113
29172: POP
29173: POP
// end ;
29174: LD_VAR 0 5
29178: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
29179: LD_EXP 83
29183: NOT
29184: IFFALSE 29234
29186: GO 29188
29188: DISABLE
// begin initHack := true ;
29189: LD_ADDR_EXP 83
29193: PUSH
29194: LD_INT 1
29196: ST_TO_ADDR
// hackTanks := [ ] ;
29197: LD_ADDR_EXP 84
29201: PUSH
29202: EMPTY
29203: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
29204: LD_ADDR_EXP 85
29208: PUSH
29209: EMPTY
29210: ST_TO_ADDR
// hackLimit := 3 ;
29211: LD_ADDR_EXP 86
29215: PUSH
29216: LD_INT 3
29218: ST_TO_ADDR
// hackDist := 12 ;
29219: LD_ADDR_EXP 87
29223: PUSH
29224: LD_INT 12
29226: ST_TO_ADDR
// hackCounter := [ ] ;
29227: LD_ADDR_EXP 88
29231: PUSH
29232: EMPTY
29233: ST_TO_ADDR
// end ;
29234: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
29235: LD_EXP 83
29239: PUSH
29240: LD_INT 34
29242: PUSH
29243: LD_INT 99
29245: PUSH
29246: EMPTY
29247: LIST
29248: LIST
29249: PPUSH
29250: CALL_OW 69
29254: AND
29255: IFFALSE 29508
29257: GO 29259
29259: DISABLE
29260: LD_INT 0
29262: PPUSH
29263: PPUSH
// begin enable ;
29264: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
29265: LD_ADDR_VAR 0 1
29269: PUSH
29270: LD_INT 34
29272: PUSH
29273: LD_INT 99
29275: PUSH
29276: EMPTY
29277: LIST
29278: LIST
29279: PPUSH
29280: CALL_OW 69
29284: PUSH
29285: FOR_IN
29286: IFFALSE 29506
// begin if not i in hackTanks then
29288: LD_VAR 0 1
29292: PUSH
29293: LD_EXP 84
29297: IN
29298: NOT
29299: IFFALSE 29382
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
29301: LD_ADDR_EXP 84
29305: PUSH
29306: LD_EXP 84
29310: PPUSH
29311: LD_EXP 84
29315: PUSH
29316: LD_INT 1
29318: PLUS
29319: PPUSH
29320: LD_VAR 0 1
29324: PPUSH
29325: CALL_OW 1
29329: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
29330: LD_ADDR_EXP 85
29334: PUSH
29335: LD_EXP 85
29339: PPUSH
29340: LD_EXP 85
29344: PUSH
29345: LD_INT 1
29347: PLUS
29348: PPUSH
29349: EMPTY
29350: PPUSH
29351: CALL_OW 1
29355: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
29356: LD_ADDR_EXP 88
29360: PUSH
29361: LD_EXP 88
29365: PPUSH
29366: LD_EXP 88
29370: PUSH
29371: LD_INT 1
29373: PLUS
29374: PPUSH
29375: EMPTY
29376: PPUSH
29377: CALL_OW 1
29381: ST_TO_ADDR
// end ; if not IsOk ( i ) then
29382: LD_VAR 0 1
29386: PPUSH
29387: CALL_OW 302
29391: NOT
29392: IFFALSE 29405
// begin HackUnlinkAll ( i ) ;
29394: LD_VAR 0 1
29398: PPUSH
29399: CALL 29511 0 1
// continue ;
29403: GO 29285
// end ; HackCheckCapturedStatus ( i ) ;
29405: LD_VAR 0 1
29409: PPUSH
29410: CALL 29954 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
29414: LD_ADDR_VAR 0 2
29418: PUSH
29419: LD_INT 81
29421: PUSH
29422: LD_VAR 0 1
29426: PPUSH
29427: CALL_OW 255
29431: PUSH
29432: EMPTY
29433: LIST
29434: LIST
29435: PUSH
29436: LD_INT 33
29438: PUSH
29439: LD_INT 3
29441: PUSH
29442: EMPTY
29443: LIST
29444: LIST
29445: PUSH
29446: LD_INT 91
29448: PUSH
29449: LD_VAR 0 1
29453: PUSH
29454: LD_EXP 87
29458: PUSH
29459: EMPTY
29460: LIST
29461: LIST
29462: LIST
29463: PUSH
29464: LD_INT 50
29466: PUSH
29467: EMPTY
29468: LIST
29469: PUSH
29470: EMPTY
29471: LIST
29472: LIST
29473: LIST
29474: LIST
29475: PPUSH
29476: CALL_OW 69
29480: ST_TO_ADDR
// if not tmp then
29481: LD_VAR 0 2
29485: NOT
29486: IFFALSE 29490
// continue ;
29488: GO 29285
// HackLink ( i , tmp ) ;
29490: LD_VAR 0 1
29494: PPUSH
29495: LD_VAR 0 2
29499: PPUSH
29500: CALL 29647 0 2
// end ;
29504: GO 29285
29506: POP
29507: POP
// end ;
29508: PPOPN 2
29510: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
29511: LD_INT 0
29513: PPUSH
29514: PPUSH
29515: PPUSH
// if not hack in hackTanks then
29516: LD_VAR 0 1
29520: PUSH
29521: LD_EXP 84
29525: IN
29526: NOT
29527: IFFALSE 29531
// exit ;
29529: GO 29642
// index := GetElementIndex ( hackTanks , hack ) ;
29531: LD_ADDR_VAR 0 4
29535: PUSH
29536: LD_EXP 84
29540: PPUSH
29541: LD_VAR 0 1
29545: PPUSH
29546: CALL 37084 0 2
29550: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
29551: LD_EXP 85
29555: PUSH
29556: LD_VAR 0 4
29560: ARRAY
29561: IFFALSE 29642
// begin for i in hackTanksCaptured [ index ] do
29563: LD_ADDR_VAR 0 3
29567: PUSH
29568: LD_EXP 85
29572: PUSH
29573: LD_VAR 0 4
29577: ARRAY
29578: PUSH
29579: FOR_IN
29580: IFFALSE 29606
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
29582: LD_VAR 0 3
29586: PUSH
29587: LD_INT 1
29589: ARRAY
29590: PPUSH
29591: LD_VAR 0 3
29595: PUSH
29596: LD_INT 2
29598: ARRAY
29599: PPUSH
29600: CALL_OW 235
29604: GO 29579
29606: POP
29607: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
29608: LD_ADDR_EXP 85
29612: PUSH
29613: LD_EXP 85
29617: PPUSH
29618: LD_VAR 0 4
29622: PPUSH
29623: EMPTY
29624: PPUSH
29625: CALL_OW 1
29629: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
29630: LD_VAR 0 1
29634: PPUSH
29635: LD_INT 0
29637: PPUSH
29638: CALL_OW 505
// end ; end ;
29642: LD_VAR 0 2
29646: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
29647: LD_INT 0
29649: PPUSH
29650: PPUSH
29651: PPUSH
// if not hack in hackTanks or not vehicles then
29652: LD_VAR 0 1
29656: PUSH
29657: LD_EXP 84
29661: IN
29662: NOT
29663: PUSH
29664: LD_VAR 0 2
29668: NOT
29669: OR
29670: IFFALSE 29674
// exit ;
29672: GO 29949
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
29674: LD_ADDR_VAR 0 2
29678: PUSH
29679: LD_VAR 0 1
29683: PPUSH
29684: LD_VAR 0 2
29688: PPUSH
29689: LD_INT 1
29691: PPUSH
29692: LD_INT 1
29694: PPUSH
29695: CALL 37734 0 4
29699: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
29700: LD_ADDR_VAR 0 5
29704: PUSH
29705: LD_EXP 84
29709: PPUSH
29710: LD_VAR 0 1
29714: PPUSH
29715: CALL 37084 0 2
29719: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
29720: LD_EXP 85
29724: PUSH
29725: LD_VAR 0 5
29729: ARRAY
29730: PUSH
29731: LD_EXP 86
29735: LESS
29736: IFFALSE 29925
// begin for i := 1 to vehicles do
29738: LD_ADDR_VAR 0 4
29742: PUSH
29743: DOUBLE
29744: LD_INT 1
29746: DEC
29747: ST_TO_ADDR
29748: LD_VAR 0 2
29752: PUSH
29753: FOR_TO
29754: IFFALSE 29923
// begin if hackTanksCaptured [ index ] = hackLimit then
29756: LD_EXP 85
29760: PUSH
29761: LD_VAR 0 5
29765: ARRAY
29766: PUSH
29767: LD_EXP 86
29771: EQUAL
29772: IFFALSE 29776
// break ;
29774: GO 29923
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
29776: LD_ADDR_EXP 88
29780: PUSH
29781: LD_EXP 88
29785: PPUSH
29786: LD_VAR 0 5
29790: PPUSH
29791: LD_EXP 88
29795: PUSH
29796: LD_VAR 0 5
29800: ARRAY
29801: PUSH
29802: LD_INT 1
29804: PLUS
29805: PPUSH
29806: CALL_OW 1
29810: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
29811: LD_ADDR_EXP 85
29815: PUSH
29816: LD_EXP 85
29820: PPUSH
29821: LD_VAR 0 5
29825: PUSH
29826: LD_EXP 85
29830: PUSH
29831: LD_VAR 0 5
29835: ARRAY
29836: PUSH
29837: LD_INT 1
29839: PLUS
29840: PUSH
29841: EMPTY
29842: LIST
29843: LIST
29844: PPUSH
29845: LD_VAR 0 2
29849: PUSH
29850: LD_VAR 0 4
29854: ARRAY
29855: PUSH
29856: LD_VAR 0 2
29860: PUSH
29861: LD_VAR 0 4
29865: ARRAY
29866: PPUSH
29867: CALL_OW 255
29871: PUSH
29872: EMPTY
29873: LIST
29874: LIST
29875: PPUSH
29876: CALL 37299 0 3
29880: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
29881: LD_VAR 0 2
29885: PUSH
29886: LD_VAR 0 4
29890: ARRAY
29891: PPUSH
29892: LD_VAR 0 1
29896: PPUSH
29897: CALL_OW 255
29901: PPUSH
29902: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
29906: LD_VAR 0 2
29910: PUSH
29911: LD_VAR 0 4
29915: ARRAY
29916: PPUSH
29917: CALL_OW 141
// end ;
29921: GO 29753
29923: POP
29924: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29925: LD_VAR 0 1
29929: PPUSH
29930: LD_EXP 85
29934: PUSH
29935: LD_VAR 0 5
29939: ARRAY
29940: PUSH
29941: LD_INT 0
29943: PLUS
29944: PPUSH
29945: CALL_OW 505
// end ;
29949: LD_VAR 0 3
29953: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
29954: LD_INT 0
29956: PPUSH
29957: PPUSH
29958: PPUSH
29959: PPUSH
// if not hack in hackTanks then
29960: LD_VAR 0 1
29964: PUSH
29965: LD_EXP 84
29969: IN
29970: NOT
29971: IFFALSE 29975
// exit ;
29973: GO 30215
// index := GetElementIndex ( hackTanks , hack ) ;
29975: LD_ADDR_VAR 0 4
29979: PUSH
29980: LD_EXP 84
29984: PPUSH
29985: LD_VAR 0 1
29989: PPUSH
29990: CALL 37084 0 2
29994: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
29995: LD_ADDR_VAR 0 3
29999: PUSH
30000: DOUBLE
30001: LD_EXP 85
30005: PUSH
30006: LD_VAR 0 4
30010: ARRAY
30011: INC
30012: ST_TO_ADDR
30013: LD_INT 1
30015: PUSH
30016: FOR_DOWNTO
30017: IFFALSE 30189
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
30019: LD_ADDR_VAR 0 5
30023: PUSH
30024: LD_EXP 85
30028: PUSH
30029: LD_VAR 0 4
30033: ARRAY
30034: PUSH
30035: LD_VAR 0 3
30039: ARRAY
30040: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
30041: LD_VAR 0 5
30045: PUSH
30046: LD_INT 1
30048: ARRAY
30049: PPUSH
30050: CALL_OW 302
30054: NOT
30055: PUSH
30056: LD_VAR 0 5
30060: PUSH
30061: LD_INT 1
30063: ARRAY
30064: PPUSH
30065: CALL_OW 255
30069: PUSH
30070: LD_VAR 0 1
30074: PPUSH
30075: CALL_OW 255
30079: NONEQUAL
30080: OR
30081: IFFALSE 30187
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
30083: LD_VAR 0 5
30087: PUSH
30088: LD_INT 1
30090: ARRAY
30091: PPUSH
30092: CALL_OW 305
30096: PUSH
30097: LD_VAR 0 5
30101: PUSH
30102: LD_INT 1
30104: ARRAY
30105: PPUSH
30106: CALL_OW 255
30110: PUSH
30111: LD_VAR 0 1
30115: PPUSH
30116: CALL_OW 255
30120: EQUAL
30121: AND
30122: IFFALSE 30146
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
30124: LD_VAR 0 5
30128: PUSH
30129: LD_INT 1
30131: ARRAY
30132: PPUSH
30133: LD_VAR 0 5
30137: PUSH
30138: LD_INT 2
30140: ARRAY
30141: PPUSH
30142: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
30146: LD_ADDR_EXP 85
30150: PUSH
30151: LD_EXP 85
30155: PPUSH
30156: LD_VAR 0 4
30160: PPUSH
30161: LD_EXP 85
30165: PUSH
30166: LD_VAR 0 4
30170: ARRAY
30171: PPUSH
30172: LD_VAR 0 3
30176: PPUSH
30177: CALL_OW 3
30181: PPUSH
30182: CALL_OW 1
30186: ST_TO_ADDR
// end ; end ;
30187: GO 30016
30189: POP
30190: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30191: LD_VAR 0 1
30195: PPUSH
30196: LD_EXP 85
30200: PUSH
30201: LD_VAR 0 4
30205: ARRAY
30206: PUSH
30207: LD_INT 0
30209: PLUS
30210: PPUSH
30211: CALL_OW 505
// end ;
30215: LD_VAR 0 2
30219: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
30220: LD_INT 0
30222: PPUSH
30223: PPUSH
30224: PPUSH
30225: PPUSH
// if not hack in hackTanks then
30226: LD_VAR 0 1
30230: PUSH
30231: LD_EXP 84
30235: IN
30236: NOT
30237: IFFALSE 30241
// exit ;
30239: GO 30326
// index := GetElementIndex ( hackTanks , hack ) ;
30241: LD_ADDR_VAR 0 5
30245: PUSH
30246: LD_EXP 84
30250: PPUSH
30251: LD_VAR 0 1
30255: PPUSH
30256: CALL 37084 0 2
30260: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
30261: LD_ADDR_VAR 0 4
30265: PUSH
30266: DOUBLE
30267: LD_INT 1
30269: DEC
30270: ST_TO_ADDR
30271: LD_EXP 85
30275: PUSH
30276: LD_VAR 0 5
30280: ARRAY
30281: PUSH
30282: FOR_TO
30283: IFFALSE 30324
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
30285: LD_EXP 85
30289: PUSH
30290: LD_VAR 0 5
30294: ARRAY
30295: PUSH
30296: LD_VAR 0 4
30300: ARRAY
30301: PUSH
30302: LD_INT 1
30304: ARRAY
30305: PUSH
30306: LD_VAR 0 2
30310: EQUAL
30311: IFFALSE 30322
// KillUnit ( vehicle ) ;
30313: LD_VAR 0 2
30317: PPUSH
30318: CALL_OW 66
30322: GO 30282
30324: POP
30325: POP
// end ;
30326: LD_VAR 0 3
30330: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
30331: LD_EXP 89
30335: NOT
30336: IFFALSE 30371
30338: GO 30340
30340: DISABLE
// begin initMiner := true ;
30341: LD_ADDR_EXP 89
30345: PUSH
30346: LD_INT 1
30348: ST_TO_ADDR
// minersList := [ ] ;
30349: LD_ADDR_EXP 90
30353: PUSH
30354: EMPTY
30355: ST_TO_ADDR
// minerMinesList := [ ] ;
30356: LD_ADDR_EXP 91
30360: PUSH
30361: EMPTY
30362: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
30363: LD_ADDR_EXP 92
30367: PUSH
30368: LD_INT 5
30370: ST_TO_ADDR
// end ;
30371: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
30372: LD_EXP 89
30376: PUSH
30377: LD_INT 34
30379: PUSH
30380: LD_INT 81
30382: PUSH
30383: EMPTY
30384: LIST
30385: LIST
30386: PPUSH
30387: CALL_OW 69
30391: AND
30392: IFFALSE 30853
30394: GO 30396
30396: DISABLE
30397: LD_INT 0
30399: PPUSH
30400: PPUSH
30401: PPUSH
30402: PPUSH
// begin enable ;
30403: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
30404: LD_ADDR_VAR 0 1
30408: PUSH
30409: LD_INT 34
30411: PUSH
30412: LD_INT 81
30414: PUSH
30415: EMPTY
30416: LIST
30417: LIST
30418: PPUSH
30419: CALL_OW 69
30423: PUSH
30424: FOR_IN
30425: IFFALSE 30497
// begin if not i in minersList then
30427: LD_VAR 0 1
30431: PUSH
30432: LD_EXP 90
30436: IN
30437: NOT
30438: IFFALSE 30495
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
30440: LD_ADDR_EXP 90
30444: PUSH
30445: LD_EXP 90
30449: PPUSH
30450: LD_EXP 90
30454: PUSH
30455: LD_INT 1
30457: PLUS
30458: PPUSH
30459: LD_VAR 0 1
30463: PPUSH
30464: CALL_OW 1
30468: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
30469: LD_ADDR_EXP 91
30473: PUSH
30474: LD_EXP 91
30478: PPUSH
30479: LD_EXP 91
30483: PUSH
30484: LD_INT 1
30486: PLUS
30487: PPUSH
30488: EMPTY
30489: PPUSH
30490: CALL_OW 1
30494: ST_TO_ADDR
// end end ;
30495: GO 30424
30497: POP
30498: POP
// for i := minerMinesList downto 1 do
30499: LD_ADDR_VAR 0 1
30503: PUSH
30504: DOUBLE
30505: LD_EXP 91
30509: INC
30510: ST_TO_ADDR
30511: LD_INT 1
30513: PUSH
30514: FOR_DOWNTO
30515: IFFALSE 30851
// begin if IsLive ( minersList [ i ] ) then
30517: LD_EXP 90
30521: PUSH
30522: LD_VAR 0 1
30526: ARRAY
30527: PPUSH
30528: CALL_OW 300
30532: IFFALSE 30560
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
30534: LD_EXP 90
30538: PUSH
30539: LD_VAR 0 1
30543: ARRAY
30544: PPUSH
30545: LD_EXP 91
30549: PUSH
30550: LD_VAR 0 1
30554: ARRAY
30555: PPUSH
30556: CALL_OW 505
// if not minerMinesList [ i ] then
30560: LD_EXP 91
30564: PUSH
30565: LD_VAR 0 1
30569: ARRAY
30570: NOT
30571: IFFALSE 30575
// continue ;
30573: GO 30514
// for j := minerMinesList [ i ] downto 1 do
30575: LD_ADDR_VAR 0 2
30579: PUSH
30580: DOUBLE
30581: LD_EXP 91
30585: PUSH
30586: LD_VAR 0 1
30590: ARRAY
30591: INC
30592: ST_TO_ADDR
30593: LD_INT 1
30595: PUSH
30596: FOR_DOWNTO
30597: IFFALSE 30847
// begin side := GetSide ( minersList [ i ] ) ;
30599: LD_ADDR_VAR 0 3
30603: PUSH
30604: LD_EXP 90
30608: PUSH
30609: LD_VAR 0 1
30613: ARRAY
30614: PPUSH
30615: CALL_OW 255
30619: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
30620: LD_ADDR_VAR 0 4
30624: PUSH
30625: LD_EXP 91
30629: PUSH
30630: LD_VAR 0 1
30634: ARRAY
30635: PUSH
30636: LD_VAR 0 2
30640: ARRAY
30641: PUSH
30642: LD_INT 1
30644: ARRAY
30645: PPUSH
30646: LD_EXP 91
30650: PUSH
30651: LD_VAR 0 1
30655: ARRAY
30656: PUSH
30657: LD_VAR 0 2
30661: ARRAY
30662: PUSH
30663: LD_INT 2
30665: ARRAY
30666: PPUSH
30667: CALL_OW 428
30671: ST_TO_ADDR
// if not tmp then
30672: LD_VAR 0 4
30676: NOT
30677: IFFALSE 30681
// continue ;
30679: GO 30596
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
30681: LD_VAR 0 4
30685: PUSH
30686: LD_INT 81
30688: PUSH
30689: LD_VAR 0 3
30693: PUSH
30694: EMPTY
30695: LIST
30696: LIST
30697: PPUSH
30698: CALL_OW 69
30702: IN
30703: PUSH
30704: LD_EXP 91
30708: PUSH
30709: LD_VAR 0 1
30713: ARRAY
30714: PUSH
30715: LD_VAR 0 2
30719: ARRAY
30720: PUSH
30721: LD_INT 1
30723: ARRAY
30724: PPUSH
30725: LD_EXP 91
30729: PUSH
30730: LD_VAR 0 1
30734: ARRAY
30735: PUSH
30736: LD_VAR 0 2
30740: ARRAY
30741: PUSH
30742: LD_INT 2
30744: ARRAY
30745: PPUSH
30746: CALL_OW 458
30750: AND
30751: IFFALSE 30845
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
30753: LD_EXP 91
30757: PUSH
30758: LD_VAR 0 1
30762: ARRAY
30763: PUSH
30764: LD_VAR 0 2
30768: ARRAY
30769: PUSH
30770: LD_INT 1
30772: ARRAY
30773: PPUSH
30774: LD_EXP 91
30778: PUSH
30779: LD_VAR 0 1
30783: ARRAY
30784: PUSH
30785: LD_VAR 0 2
30789: ARRAY
30790: PUSH
30791: LD_INT 2
30793: ARRAY
30794: PPUSH
30795: LD_VAR 0 3
30799: PPUSH
30800: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
30804: LD_ADDR_EXP 91
30808: PUSH
30809: LD_EXP 91
30813: PPUSH
30814: LD_VAR 0 1
30818: PPUSH
30819: LD_EXP 91
30823: PUSH
30824: LD_VAR 0 1
30828: ARRAY
30829: PPUSH
30830: LD_VAR 0 2
30834: PPUSH
30835: CALL_OW 3
30839: PPUSH
30840: CALL_OW 1
30844: ST_TO_ADDR
// end ; end ;
30845: GO 30596
30847: POP
30848: POP
// end ;
30849: GO 30514
30851: POP
30852: POP
// end ;
30853: PPOPN 4
30855: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
30856: LD_INT 0
30858: PPUSH
30859: PPUSH
// result := false ;
30860: LD_ADDR_VAR 0 4
30864: PUSH
30865: LD_INT 0
30867: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
30868: LD_VAR 0 1
30872: PPUSH
30873: CALL_OW 264
30877: PUSH
30878: LD_INT 81
30880: EQUAL
30881: NOT
30882: IFFALSE 30886
// exit ;
30884: GO 31126
// index := GetElementIndex ( minersList , unit ) ;
30886: LD_ADDR_VAR 0 5
30890: PUSH
30891: LD_EXP 90
30895: PPUSH
30896: LD_VAR 0 1
30900: PPUSH
30901: CALL 37084 0 2
30905: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
30906: LD_EXP 91
30910: PUSH
30911: LD_VAR 0 5
30915: ARRAY
30916: PUSH
30917: LD_EXP 92
30921: GREATEREQUAL
30922: IFFALSE 30926
// exit ;
30924: GO 31126
// ComMoveXY ( unit , x , y ) ;
30926: LD_VAR 0 1
30930: PPUSH
30931: LD_VAR 0 2
30935: PPUSH
30936: LD_VAR 0 3
30940: PPUSH
30941: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30945: LD_INT 35
30947: PPUSH
30948: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
30952: LD_VAR 0 1
30956: PPUSH
30957: LD_VAR 0 2
30961: PPUSH
30962: LD_VAR 0 3
30966: PPUSH
30967: CALL 68439 0 3
30971: NOT
30972: PUSH
30973: LD_VAR 0 1
30977: PPUSH
30978: CALL_OW 314
30982: AND
30983: IFFALSE 30987
// exit ;
30985: GO 31126
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
30987: LD_VAR 0 2
30991: PPUSH
30992: LD_VAR 0 3
30996: PPUSH
30997: CALL_OW 428
31001: PUSH
31002: LD_VAR 0 1
31006: EQUAL
31007: PUSH
31008: LD_VAR 0 1
31012: PPUSH
31013: CALL_OW 314
31017: NOT
31018: AND
31019: IFFALSE 30945
// PlaySoundXY ( x , y , PlantMine ) ;
31021: LD_VAR 0 2
31025: PPUSH
31026: LD_VAR 0 3
31030: PPUSH
31031: LD_STRING PlantMine
31033: PPUSH
31034: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
31038: LD_VAR 0 2
31042: PPUSH
31043: LD_VAR 0 3
31047: PPUSH
31048: LD_VAR 0 1
31052: PPUSH
31053: CALL_OW 255
31057: PPUSH
31058: LD_INT 0
31060: PPUSH
31061: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
31065: LD_ADDR_EXP 91
31069: PUSH
31070: LD_EXP 91
31074: PPUSH
31075: LD_VAR 0 5
31079: PUSH
31080: LD_EXP 91
31084: PUSH
31085: LD_VAR 0 5
31089: ARRAY
31090: PUSH
31091: LD_INT 1
31093: PLUS
31094: PUSH
31095: EMPTY
31096: LIST
31097: LIST
31098: PPUSH
31099: LD_VAR 0 2
31103: PUSH
31104: LD_VAR 0 3
31108: PUSH
31109: EMPTY
31110: LIST
31111: LIST
31112: PPUSH
31113: CALL 37299 0 3
31117: ST_TO_ADDR
// result := true ;
31118: LD_ADDR_VAR 0 4
31122: PUSH
31123: LD_INT 1
31125: ST_TO_ADDR
// end ;
31126: LD_VAR 0 4
31130: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
31131: LD_INT 0
31133: PPUSH
31134: PPUSH
31135: PPUSH
// if not unit in minersList then
31136: LD_VAR 0 1
31140: PUSH
31141: LD_EXP 90
31145: IN
31146: NOT
31147: IFFALSE 31151
// exit ;
31149: GO 31543
// index := GetElementIndex ( minersList , unit ) ;
31151: LD_ADDR_VAR 0 6
31155: PUSH
31156: LD_EXP 90
31160: PPUSH
31161: LD_VAR 0 1
31165: PPUSH
31166: CALL 37084 0 2
31170: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
31171: LD_ADDR_VAR 0 5
31175: PUSH
31176: DOUBLE
31177: LD_EXP 91
31181: PUSH
31182: LD_VAR 0 6
31186: ARRAY
31187: INC
31188: ST_TO_ADDR
31189: LD_INT 1
31191: PUSH
31192: FOR_DOWNTO
31193: IFFALSE 31354
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
31195: LD_EXP 91
31199: PUSH
31200: LD_VAR 0 6
31204: ARRAY
31205: PUSH
31206: LD_VAR 0 5
31210: ARRAY
31211: PUSH
31212: LD_INT 1
31214: ARRAY
31215: PUSH
31216: LD_VAR 0 2
31220: EQUAL
31221: PUSH
31222: LD_EXP 91
31226: PUSH
31227: LD_VAR 0 6
31231: ARRAY
31232: PUSH
31233: LD_VAR 0 5
31237: ARRAY
31238: PUSH
31239: LD_INT 2
31241: ARRAY
31242: PUSH
31243: LD_VAR 0 3
31247: EQUAL
31248: AND
31249: IFFALSE 31352
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31251: LD_EXP 91
31255: PUSH
31256: LD_VAR 0 6
31260: ARRAY
31261: PUSH
31262: LD_VAR 0 5
31266: ARRAY
31267: PUSH
31268: LD_INT 1
31270: ARRAY
31271: PPUSH
31272: LD_EXP 91
31276: PUSH
31277: LD_VAR 0 6
31281: ARRAY
31282: PUSH
31283: LD_VAR 0 5
31287: ARRAY
31288: PUSH
31289: LD_INT 2
31291: ARRAY
31292: PPUSH
31293: LD_VAR 0 1
31297: PPUSH
31298: CALL_OW 255
31302: PPUSH
31303: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31307: LD_ADDR_EXP 91
31311: PUSH
31312: LD_EXP 91
31316: PPUSH
31317: LD_VAR 0 6
31321: PPUSH
31322: LD_EXP 91
31326: PUSH
31327: LD_VAR 0 6
31331: ARRAY
31332: PPUSH
31333: LD_VAR 0 5
31337: PPUSH
31338: CALL_OW 3
31342: PPUSH
31343: CALL_OW 1
31347: ST_TO_ADDR
// exit ;
31348: POP
31349: POP
31350: GO 31543
// end ; end ;
31352: GO 31192
31354: POP
31355: POP
// for i := minerMinesList [ index ] downto 1 do
31356: LD_ADDR_VAR 0 5
31360: PUSH
31361: DOUBLE
31362: LD_EXP 91
31366: PUSH
31367: LD_VAR 0 6
31371: ARRAY
31372: INC
31373: ST_TO_ADDR
31374: LD_INT 1
31376: PUSH
31377: FOR_DOWNTO
31378: IFFALSE 31541
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
31380: LD_EXP 91
31384: PUSH
31385: LD_VAR 0 6
31389: ARRAY
31390: PUSH
31391: LD_VAR 0 5
31395: ARRAY
31396: PUSH
31397: LD_INT 1
31399: ARRAY
31400: PPUSH
31401: LD_EXP 91
31405: PUSH
31406: LD_VAR 0 6
31410: ARRAY
31411: PUSH
31412: LD_VAR 0 5
31416: ARRAY
31417: PUSH
31418: LD_INT 2
31420: ARRAY
31421: PPUSH
31422: LD_VAR 0 2
31426: PPUSH
31427: LD_VAR 0 3
31431: PPUSH
31432: CALL_OW 298
31436: PUSH
31437: LD_INT 6
31439: LESS
31440: IFFALSE 31539
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31442: LD_EXP 91
31446: PUSH
31447: LD_VAR 0 6
31451: ARRAY
31452: PUSH
31453: LD_VAR 0 5
31457: ARRAY
31458: PUSH
31459: LD_INT 1
31461: ARRAY
31462: PPUSH
31463: LD_EXP 91
31467: PUSH
31468: LD_VAR 0 6
31472: ARRAY
31473: PUSH
31474: LD_VAR 0 5
31478: ARRAY
31479: PUSH
31480: LD_INT 2
31482: ARRAY
31483: PPUSH
31484: LD_VAR 0 1
31488: PPUSH
31489: CALL_OW 255
31493: PPUSH
31494: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31498: LD_ADDR_EXP 91
31502: PUSH
31503: LD_EXP 91
31507: PPUSH
31508: LD_VAR 0 6
31512: PPUSH
31513: LD_EXP 91
31517: PUSH
31518: LD_VAR 0 6
31522: ARRAY
31523: PPUSH
31524: LD_VAR 0 5
31528: PPUSH
31529: CALL_OW 3
31533: PPUSH
31534: CALL_OW 1
31538: ST_TO_ADDR
// end ; end ;
31539: GO 31377
31541: POP
31542: POP
// end ;
31543: LD_VAR 0 4
31547: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
31548: LD_INT 0
31550: PPUSH
31551: PPUSH
31552: PPUSH
31553: PPUSH
31554: PPUSH
31555: PPUSH
31556: PPUSH
31557: PPUSH
31558: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
31559: LD_VAR 0 1
31563: PPUSH
31564: CALL_OW 264
31568: PUSH
31569: LD_INT 81
31571: EQUAL
31572: NOT
31573: PUSH
31574: LD_VAR 0 1
31578: PUSH
31579: LD_EXP 90
31583: IN
31584: NOT
31585: OR
31586: IFFALSE 31590
// exit ;
31588: GO 31912
// index := GetElementIndex ( minersList , unit ) ;
31590: LD_ADDR_VAR 0 6
31594: PUSH
31595: LD_EXP 90
31599: PPUSH
31600: LD_VAR 0 1
31604: PPUSH
31605: CALL 37084 0 2
31609: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
31610: LD_ADDR_VAR 0 8
31614: PUSH
31615: LD_EXP 92
31619: PUSH
31620: LD_EXP 91
31624: PUSH
31625: LD_VAR 0 6
31629: ARRAY
31630: MINUS
31631: ST_TO_ADDR
// if not minesFreeAmount then
31632: LD_VAR 0 8
31636: NOT
31637: IFFALSE 31641
// exit ;
31639: GO 31912
// tmp := [ ] ;
31641: LD_ADDR_VAR 0 7
31645: PUSH
31646: EMPTY
31647: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
31648: LD_ADDR_VAR 0 5
31652: PUSH
31653: DOUBLE
31654: LD_INT 1
31656: DEC
31657: ST_TO_ADDR
31658: LD_VAR 0 8
31662: PUSH
31663: FOR_TO
31664: IFFALSE 31859
// begin _d := rand ( 0 , 5 ) ;
31666: LD_ADDR_VAR 0 11
31670: PUSH
31671: LD_INT 0
31673: PPUSH
31674: LD_INT 5
31676: PPUSH
31677: CALL_OW 12
31681: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
31682: LD_ADDR_VAR 0 12
31686: PUSH
31687: LD_INT 2
31689: PPUSH
31690: LD_INT 6
31692: PPUSH
31693: CALL_OW 12
31697: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
31698: LD_ADDR_VAR 0 9
31702: PUSH
31703: LD_VAR 0 2
31707: PPUSH
31708: LD_VAR 0 11
31712: PPUSH
31713: LD_VAR 0 12
31717: PPUSH
31718: CALL_OW 272
31722: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
31723: LD_ADDR_VAR 0 10
31727: PUSH
31728: LD_VAR 0 3
31732: PPUSH
31733: LD_VAR 0 11
31737: PPUSH
31738: LD_VAR 0 12
31742: PPUSH
31743: CALL_OW 273
31747: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
31748: LD_VAR 0 9
31752: PPUSH
31753: LD_VAR 0 10
31757: PPUSH
31758: CALL_OW 488
31762: PUSH
31763: LD_VAR 0 9
31767: PUSH
31768: LD_VAR 0 10
31772: PUSH
31773: EMPTY
31774: LIST
31775: LIST
31776: PUSH
31777: LD_VAR 0 7
31781: IN
31782: NOT
31783: AND
31784: PUSH
31785: LD_VAR 0 9
31789: PPUSH
31790: LD_VAR 0 10
31794: PPUSH
31795: CALL_OW 458
31799: NOT
31800: AND
31801: IFFALSE 31843
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
31803: LD_ADDR_VAR 0 7
31807: PUSH
31808: LD_VAR 0 7
31812: PPUSH
31813: LD_VAR 0 7
31817: PUSH
31818: LD_INT 1
31820: PLUS
31821: PPUSH
31822: LD_VAR 0 9
31826: PUSH
31827: LD_VAR 0 10
31831: PUSH
31832: EMPTY
31833: LIST
31834: LIST
31835: PPUSH
31836: CALL_OW 1
31840: ST_TO_ADDR
31841: GO 31857
// i := i - 1 ;
31843: LD_ADDR_VAR 0 5
31847: PUSH
31848: LD_VAR 0 5
31852: PUSH
31853: LD_INT 1
31855: MINUS
31856: ST_TO_ADDR
// end ;
31857: GO 31663
31859: POP
31860: POP
// for i in tmp do
31861: LD_ADDR_VAR 0 5
31865: PUSH
31866: LD_VAR 0 7
31870: PUSH
31871: FOR_IN
31872: IFFALSE 31910
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
31874: LD_VAR 0 1
31878: PPUSH
31879: LD_VAR 0 5
31883: PUSH
31884: LD_INT 1
31886: ARRAY
31887: PPUSH
31888: LD_VAR 0 5
31892: PUSH
31893: LD_INT 2
31895: ARRAY
31896: PPUSH
31897: CALL 30856 0 3
31901: NOT
31902: IFFALSE 31908
// exit ;
31904: POP
31905: POP
31906: GO 31912
31908: GO 31871
31910: POP
31911: POP
// end ;
31912: LD_VAR 0 4
31916: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
31917: LD_INT 0
31919: PPUSH
31920: PPUSH
31921: PPUSH
31922: PPUSH
31923: PPUSH
31924: PPUSH
31925: PPUSH
// if not GetClass ( unit ) = class_sniper then
31926: LD_VAR 0 1
31930: PPUSH
31931: CALL_OW 257
31935: PUSH
31936: LD_INT 5
31938: EQUAL
31939: NOT
31940: IFFALSE 31944
// exit ;
31942: GO 32332
// dist := 8 ;
31944: LD_ADDR_VAR 0 5
31948: PUSH
31949: LD_INT 8
31951: ST_TO_ADDR
// viewRange := 12 ;
31952: LD_ADDR_VAR 0 7
31956: PUSH
31957: LD_INT 12
31959: ST_TO_ADDR
// side := GetSide ( unit ) ;
31960: LD_ADDR_VAR 0 6
31964: PUSH
31965: LD_VAR 0 1
31969: PPUSH
31970: CALL_OW 255
31974: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
31975: LD_INT 61
31977: PPUSH
31978: LD_VAR 0 6
31982: PPUSH
31983: CALL_OW 321
31987: PUSH
31988: LD_INT 2
31990: EQUAL
31991: IFFALSE 32001
// viewRange := 16 ;
31993: LD_ADDR_VAR 0 7
31997: PUSH
31998: LD_INT 16
32000: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
32001: LD_VAR 0 1
32005: PPUSH
32006: LD_VAR 0 2
32010: PPUSH
32011: LD_VAR 0 3
32015: PPUSH
32016: CALL_OW 297
32020: PUSH
32021: LD_VAR 0 5
32025: GREATER
32026: IFFALSE 32105
// begin ComMoveXY ( unit , x , y ) ;
32028: LD_VAR 0 1
32032: PPUSH
32033: LD_VAR 0 2
32037: PPUSH
32038: LD_VAR 0 3
32042: PPUSH
32043: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32047: LD_INT 35
32049: PPUSH
32050: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
32054: LD_VAR 0 1
32058: PPUSH
32059: LD_VAR 0 2
32063: PPUSH
32064: LD_VAR 0 3
32068: PPUSH
32069: CALL 68439 0 3
32073: NOT
32074: IFFALSE 32078
// exit ;
32076: GO 32332
// until GetDistUnitXY ( unit , x , y ) < dist ;
32078: LD_VAR 0 1
32082: PPUSH
32083: LD_VAR 0 2
32087: PPUSH
32088: LD_VAR 0 3
32092: PPUSH
32093: CALL_OW 297
32097: PUSH
32098: LD_VAR 0 5
32102: LESS
32103: IFFALSE 32047
// end ; ComTurnXY ( unit , x , y ) ;
32105: LD_VAR 0 1
32109: PPUSH
32110: LD_VAR 0 2
32114: PPUSH
32115: LD_VAR 0 3
32119: PPUSH
32120: CALL_OW 118
// wait ( 5 ) ;
32124: LD_INT 5
32126: PPUSH
32127: CALL_OW 67
// _d := GetDir ( unit ) ;
32131: LD_ADDR_VAR 0 10
32135: PUSH
32136: LD_VAR 0 1
32140: PPUSH
32141: CALL_OW 254
32145: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
32146: LD_ADDR_VAR 0 8
32150: PUSH
32151: LD_VAR 0 1
32155: PPUSH
32156: CALL_OW 250
32160: PPUSH
32161: LD_VAR 0 10
32165: PPUSH
32166: LD_VAR 0 5
32170: PPUSH
32171: CALL_OW 272
32175: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
32176: LD_ADDR_VAR 0 9
32180: PUSH
32181: LD_VAR 0 1
32185: PPUSH
32186: CALL_OW 251
32190: PPUSH
32191: LD_VAR 0 10
32195: PPUSH
32196: LD_VAR 0 5
32200: PPUSH
32201: CALL_OW 273
32205: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32206: LD_VAR 0 8
32210: PPUSH
32211: LD_VAR 0 9
32215: PPUSH
32216: CALL_OW 488
32220: NOT
32221: IFFALSE 32225
// exit ;
32223: GO 32332
// ComAnimCustom ( unit , 1 ) ;
32225: LD_VAR 0 1
32229: PPUSH
32230: LD_INT 1
32232: PPUSH
32233: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
32237: LD_VAR 0 8
32241: PPUSH
32242: LD_VAR 0 9
32246: PPUSH
32247: LD_VAR 0 6
32251: PPUSH
32252: LD_VAR 0 7
32256: PPUSH
32257: CALL_OW 330
// repeat wait ( 1 ) ;
32261: LD_INT 1
32263: PPUSH
32264: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
32268: LD_VAR 0 1
32272: PPUSH
32273: CALL_OW 316
32277: PUSH
32278: LD_VAR 0 1
32282: PPUSH
32283: CALL_OW 314
32287: OR
32288: PUSH
32289: LD_VAR 0 1
32293: PPUSH
32294: CALL_OW 302
32298: NOT
32299: OR
32300: PUSH
32301: LD_VAR 0 1
32305: PPUSH
32306: CALL_OW 301
32310: OR
32311: IFFALSE 32261
// RemoveSeeing ( _x , _y , side ) ;
32313: LD_VAR 0 8
32317: PPUSH
32318: LD_VAR 0 9
32322: PPUSH
32323: LD_VAR 0 6
32327: PPUSH
32328: CALL_OW 331
// end ; end_of_file
32332: LD_VAR 0 4
32336: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
32337: LD_INT 0
32339: PPUSH
32340: PPUSH
// if exist_mode then
32341: LD_VAR 0 2
32345: IFFALSE 32370
// unit := CreateCharacter ( prefix & ident ) else
32347: LD_ADDR_VAR 0 5
32351: PUSH
32352: LD_VAR 0 3
32356: PUSH
32357: LD_VAR 0 1
32361: STR
32362: PPUSH
32363: CALL_OW 34
32367: ST_TO_ADDR
32368: GO 32385
// unit := NewCharacter ( ident ) ;
32370: LD_ADDR_VAR 0 5
32374: PUSH
32375: LD_VAR 0 1
32379: PPUSH
32380: CALL_OW 25
32384: ST_TO_ADDR
// result := unit ;
32385: LD_ADDR_VAR 0 4
32389: PUSH
32390: LD_VAR 0 5
32394: ST_TO_ADDR
// end ;
32395: LD_VAR 0 4
32399: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
32400: LD_INT 0
32402: PPUSH
32403: PPUSH
// if not side or not nation then
32404: LD_VAR 0 1
32408: NOT
32409: PUSH
32410: LD_VAR 0 2
32414: NOT
32415: OR
32416: IFFALSE 32420
// exit ;
32418: GO 33188
// case nation of nation_american :
32420: LD_VAR 0 2
32424: PUSH
32425: LD_INT 1
32427: DOUBLE
32428: EQUAL
32429: IFTRUE 32433
32431: GO 32647
32433: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
32434: LD_ADDR_VAR 0 4
32438: PUSH
32439: LD_INT 35
32441: PUSH
32442: LD_INT 45
32444: PUSH
32445: LD_INT 46
32447: PUSH
32448: LD_INT 47
32450: PUSH
32451: LD_INT 82
32453: PUSH
32454: LD_INT 83
32456: PUSH
32457: LD_INT 84
32459: PUSH
32460: LD_INT 85
32462: PUSH
32463: LD_INT 86
32465: PUSH
32466: LD_INT 1
32468: PUSH
32469: LD_INT 2
32471: PUSH
32472: LD_INT 6
32474: PUSH
32475: LD_INT 15
32477: PUSH
32478: LD_INT 16
32480: PUSH
32481: LD_INT 7
32483: PUSH
32484: LD_INT 12
32486: PUSH
32487: LD_INT 13
32489: PUSH
32490: LD_INT 10
32492: PUSH
32493: LD_INT 14
32495: PUSH
32496: LD_INT 20
32498: PUSH
32499: LD_INT 21
32501: PUSH
32502: LD_INT 22
32504: PUSH
32505: LD_INT 25
32507: PUSH
32508: LD_INT 32
32510: PUSH
32511: LD_INT 27
32513: PUSH
32514: LD_INT 36
32516: PUSH
32517: LD_INT 69
32519: PUSH
32520: LD_INT 39
32522: PUSH
32523: LD_INT 34
32525: PUSH
32526: LD_INT 40
32528: PUSH
32529: LD_INT 48
32531: PUSH
32532: LD_INT 49
32534: PUSH
32535: LD_INT 50
32537: PUSH
32538: LD_INT 51
32540: PUSH
32541: LD_INT 52
32543: PUSH
32544: LD_INT 53
32546: PUSH
32547: LD_INT 54
32549: PUSH
32550: LD_INT 55
32552: PUSH
32553: LD_INT 56
32555: PUSH
32556: LD_INT 57
32558: PUSH
32559: LD_INT 58
32561: PUSH
32562: LD_INT 59
32564: PUSH
32565: LD_INT 60
32567: PUSH
32568: LD_INT 61
32570: PUSH
32571: LD_INT 62
32573: PUSH
32574: LD_INT 80
32576: PUSH
32577: LD_INT 82
32579: PUSH
32580: LD_INT 83
32582: PUSH
32583: LD_INT 84
32585: PUSH
32586: LD_INT 85
32588: PUSH
32589: LD_INT 86
32591: PUSH
32592: EMPTY
32593: LIST
32594: LIST
32595: LIST
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: LIST
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: LIST
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: LIST
32622: LIST
32623: LIST
32624: LIST
32625: LIST
32626: LIST
32627: LIST
32628: LIST
32629: LIST
32630: LIST
32631: LIST
32632: LIST
32633: LIST
32634: LIST
32635: LIST
32636: LIST
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: LIST
32643: LIST
32644: ST_TO_ADDR
32645: GO 33112
32647: LD_INT 2
32649: DOUBLE
32650: EQUAL
32651: IFTRUE 32655
32653: GO 32881
32655: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
32656: LD_ADDR_VAR 0 4
32660: PUSH
32661: LD_INT 35
32663: PUSH
32664: LD_INT 45
32666: PUSH
32667: LD_INT 46
32669: PUSH
32670: LD_INT 47
32672: PUSH
32673: LD_INT 82
32675: PUSH
32676: LD_INT 83
32678: PUSH
32679: LD_INT 84
32681: PUSH
32682: LD_INT 85
32684: PUSH
32685: LD_INT 87
32687: PUSH
32688: LD_INT 70
32690: PUSH
32691: LD_INT 1
32693: PUSH
32694: LD_INT 11
32696: PUSH
32697: LD_INT 3
32699: PUSH
32700: LD_INT 4
32702: PUSH
32703: LD_INT 5
32705: PUSH
32706: LD_INT 6
32708: PUSH
32709: LD_INT 15
32711: PUSH
32712: LD_INT 18
32714: PUSH
32715: LD_INT 7
32717: PUSH
32718: LD_INT 17
32720: PUSH
32721: LD_INT 8
32723: PUSH
32724: LD_INT 20
32726: PUSH
32727: LD_INT 21
32729: PUSH
32730: LD_INT 22
32732: PUSH
32733: LD_INT 72
32735: PUSH
32736: LD_INT 26
32738: PUSH
32739: LD_INT 69
32741: PUSH
32742: LD_INT 39
32744: PUSH
32745: LD_INT 40
32747: PUSH
32748: LD_INT 41
32750: PUSH
32751: LD_INT 42
32753: PUSH
32754: LD_INT 43
32756: PUSH
32757: LD_INT 48
32759: PUSH
32760: LD_INT 49
32762: PUSH
32763: LD_INT 50
32765: PUSH
32766: LD_INT 51
32768: PUSH
32769: LD_INT 52
32771: PUSH
32772: LD_INT 53
32774: PUSH
32775: LD_INT 54
32777: PUSH
32778: LD_INT 55
32780: PUSH
32781: LD_INT 56
32783: PUSH
32784: LD_INT 60
32786: PUSH
32787: LD_INT 61
32789: PUSH
32790: LD_INT 62
32792: PUSH
32793: LD_INT 66
32795: PUSH
32796: LD_INT 67
32798: PUSH
32799: LD_INT 68
32801: PUSH
32802: LD_INT 81
32804: PUSH
32805: LD_INT 82
32807: PUSH
32808: LD_INT 83
32810: PUSH
32811: LD_INT 84
32813: PUSH
32814: LD_INT 85
32816: PUSH
32817: LD_INT 87
32819: PUSH
32820: LD_INT 88
32822: PUSH
32823: EMPTY
32824: LIST
32825: LIST
32826: LIST
32827: LIST
32828: LIST
32829: LIST
32830: LIST
32831: LIST
32832: LIST
32833: LIST
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: LIST
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: LIST
32845: LIST
32846: LIST
32847: LIST
32848: LIST
32849: LIST
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: LIST
32855: LIST
32856: LIST
32857: LIST
32858: LIST
32859: LIST
32860: LIST
32861: LIST
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: ST_TO_ADDR
32879: GO 33112
32881: LD_INT 3
32883: DOUBLE
32884: EQUAL
32885: IFTRUE 32889
32887: GO 33111
32889: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
32890: LD_ADDR_VAR 0 4
32894: PUSH
32895: LD_INT 46
32897: PUSH
32898: LD_INT 47
32900: PUSH
32901: LD_INT 1
32903: PUSH
32904: LD_INT 2
32906: PUSH
32907: LD_INT 82
32909: PUSH
32910: LD_INT 83
32912: PUSH
32913: LD_INT 84
32915: PUSH
32916: LD_INT 85
32918: PUSH
32919: LD_INT 86
32921: PUSH
32922: LD_INT 11
32924: PUSH
32925: LD_INT 9
32927: PUSH
32928: LD_INT 20
32930: PUSH
32931: LD_INT 19
32933: PUSH
32934: LD_INT 21
32936: PUSH
32937: LD_INT 24
32939: PUSH
32940: LD_INT 22
32942: PUSH
32943: LD_INT 25
32945: PUSH
32946: LD_INT 28
32948: PUSH
32949: LD_INT 29
32951: PUSH
32952: LD_INT 30
32954: PUSH
32955: LD_INT 31
32957: PUSH
32958: LD_INT 37
32960: PUSH
32961: LD_INT 38
32963: PUSH
32964: LD_INT 32
32966: PUSH
32967: LD_INT 27
32969: PUSH
32970: LD_INT 33
32972: PUSH
32973: LD_INT 69
32975: PUSH
32976: LD_INT 39
32978: PUSH
32979: LD_INT 34
32981: PUSH
32982: LD_INT 40
32984: PUSH
32985: LD_INT 71
32987: PUSH
32988: LD_INT 23
32990: PUSH
32991: LD_INT 44
32993: PUSH
32994: LD_INT 48
32996: PUSH
32997: LD_INT 49
32999: PUSH
33000: LD_INT 50
33002: PUSH
33003: LD_INT 51
33005: PUSH
33006: LD_INT 52
33008: PUSH
33009: LD_INT 53
33011: PUSH
33012: LD_INT 54
33014: PUSH
33015: LD_INT 55
33017: PUSH
33018: LD_INT 56
33020: PUSH
33021: LD_INT 57
33023: PUSH
33024: LD_INT 58
33026: PUSH
33027: LD_INT 59
33029: PUSH
33030: LD_INT 63
33032: PUSH
33033: LD_INT 64
33035: PUSH
33036: LD_INT 65
33038: PUSH
33039: LD_INT 82
33041: PUSH
33042: LD_INT 83
33044: PUSH
33045: LD_INT 84
33047: PUSH
33048: LD_INT 85
33050: PUSH
33051: LD_INT 86
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: LIST
33058: LIST
33059: LIST
33060: LIST
33061: LIST
33062: LIST
33063: LIST
33064: LIST
33065: LIST
33066: LIST
33067: LIST
33068: LIST
33069: LIST
33070: LIST
33071: LIST
33072: LIST
33073: LIST
33074: LIST
33075: LIST
33076: LIST
33077: LIST
33078: LIST
33079: LIST
33080: LIST
33081: LIST
33082: LIST
33083: LIST
33084: LIST
33085: LIST
33086: LIST
33087: LIST
33088: LIST
33089: LIST
33090: LIST
33091: LIST
33092: LIST
33093: LIST
33094: LIST
33095: LIST
33096: LIST
33097: LIST
33098: LIST
33099: LIST
33100: LIST
33101: LIST
33102: LIST
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: ST_TO_ADDR
33109: GO 33112
33111: POP
// if state > - 1 and state < 3 then
33112: LD_VAR 0 3
33116: PUSH
33117: LD_INT 1
33119: NEG
33120: GREATER
33121: PUSH
33122: LD_VAR 0 3
33126: PUSH
33127: LD_INT 3
33129: LESS
33130: AND
33131: IFFALSE 33188
// for i in result do
33133: LD_ADDR_VAR 0 5
33137: PUSH
33138: LD_VAR 0 4
33142: PUSH
33143: FOR_IN
33144: IFFALSE 33186
// if GetTech ( i , side ) <> state then
33146: LD_VAR 0 5
33150: PPUSH
33151: LD_VAR 0 1
33155: PPUSH
33156: CALL_OW 321
33160: PUSH
33161: LD_VAR 0 3
33165: NONEQUAL
33166: IFFALSE 33184
// result := result diff i ;
33168: LD_ADDR_VAR 0 4
33172: PUSH
33173: LD_VAR 0 4
33177: PUSH
33178: LD_VAR 0 5
33182: DIFF
33183: ST_TO_ADDR
33184: GO 33143
33186: POP
33187: POP
// end ;
33188: LD_VAR 0 4
33192: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
33193: LD_INT 0
33195: PPUSH
33196: PPUSH
33197: PPUSH
// result := true ;
33198: LD_ADDR_VAR 0 3
33202: PUSH
33203: LD_INT 1
33205: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
33206: LD_ADDR_VAR 0 5
33210: PUSH
33211: LD_VAR 0 2
33215: PPUSH
33216: CALL_OW 480
33220: ST_TO_ADDR
// if not tmp then
33221: LD_VAR 0 5
33225: NOT
33226: IFFALSE 33230
// exit ;
33228: GO 33279
// for i in tmp do
33230: LD_ADDR_VAR 0 4
33234: PUSH
33235: LD_VAR 0 5
33239: PUSH
33240: FOR_IN
33241: IFFALSE 33277
// if GetTech ( i , side ) <> state_researched then
33243: LD_VAR 0 4
33247: PPUSH
33248: LD_VAR 0 1
33252: PPUSH
33253: CALL_OW 321
33257: PUSH
33258: LD_INT 2
33260: NONEQUAL
33261: IFFALSE 33275
// begin result := false ;
33263: LD_ADDR_VAR 0 3
33267: PUSH
33268: LD_INT 0
33270: ST_TO_ADDR
// exit ;
33271: POP
33272: POP
33273: GO 33279
// end ;
33275: GO 33240
33277: POP
33278: POP
// end ;
33279: LD_VAR 0 3
33283: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
33284: LD_INT 0
33286: PPUSH
33287: PPUSH
33288: PPUSH
33289: PPUSH
33290: PPUSH
33291: PPUSH
33292: PPUSH
33293: PPUSH
33294: PPUSH
33295: PPUSH
33296: PPUSH
33297: PPUSH
33298: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
33299: LD_VAR 0 1
33303: NOT
33304: PUSH
33305: LD_VAR 0 1
33309: PPUSH
33310: CALL_OW 257
33314: PUSH
33315: LD_INT 9
33317: NONEQUAL
33318: OR
33319: IFFALSE 33323
// exit ;
33321: GO 33896
// side := GetSide ( unit ) ;
33323: LD_ADDR_VAR 0 9
33327: PUSH
33328: LD_VAR 0 1
33332: PPUSH
33333: CALL_OW 255
33337: ST_TO_ADDR
// tech_space := tech_spacanom ;
33338: LD_ADDR_VAR 0 12
33342: PUSH
33343: LD_INT 29
33345: ST_TO_ADDR
// tech_time := tech_taurad ;
33346: LD_ADDR_VAR 0 13
33350: PUSH
33351: LD_INT 28
33353: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
33354: LD_ADDR_VAR 0 11
33358: PUSH
33359: LD_VAR 0 1
33363: PPUSH
33364: CALL_OW 310
33368: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
33369: LD_VAR 0 11
33373: PPUSH
33374: CALL_OW 247
33378: PUSH
33379: LD_INT 2
33381: EQUAL
33382: IFFALSE 33386
// exit ;
33384: GO 33896
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33386: LD_ADDR_VAR 0 8
33390: PUSH
33391: LD_INT 81
33393: PUSH
33394: LD_VAR 0 9
33398: PUSH
33399: EMPTY
33400: LIST
33401: LIST
33402: PUSH
33403: LD_INT 3
33405: PUSH
33406: LD_INT 21
33408: PUSH
33409: LD_INT 3
33411: PUSH
33412: EMPTY
33413: LIST
33414: LIST
33415: PUSH
33416: EMPTY
33417: LIST
33418: LIST
33419: PUSH
33420: EMPTY
33421: LIST
33422: LIST
33423: PPUSH
33424: CALL_OW 69
33428: ST_TO_ADDR
// if not tmp then
33429: LD_VAR 0 8
33433: NOT
33434: IFFALSE 33438
// exit ;
33436: GO 33896
// if in_unit then
33438: LD_VAR 0 11
33442: IFFALSE 33466
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
33444: LD_ADDR_VAR 0 10
33448: PUSH
33449: LD_VAR 0 8
33453: PPUSH
33454: LD_VAR 0 11
33458: PPUSH
33459: CALL_OW 74
33463: ST_TO_ADDR
33464: GO 33486
// enemy := NearestUnitToUnit ( tmp , unit ) ;
33466: LD_ADDR_VAR 0 10
33470: PUSH
33471: LD_VAR 0 8
33475: PPUSH
33476: LD_VAR 0 1
33480: PPUSH
33481: CALL_OW 74
33485: ST_TO_ADDR
// if not enemy then
33486: LD_VAR 0 10
33490: NOT
33491: IFFALSE 33495
// exit ;
33493: GO 33896
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
33495: LD_VAR 0 11
33499: PUSH
33500: LD_VAR 0 11
33504: PPUSH
33505: LD_VAR 0 10
33509: PPUSH
33510: CALL_OW 296
33514: PUSH
33515: LD_INT 13
33517: GREATER
33518: AND
33519: PUSH
33520: LD_VAR 0 1
33524: PPUSH
33525: LD_VAR 0 10
33529: PPUSH
33530: CALL_OW 296
33534: PUSH
33535: LD_INT 12
33537: GREATER
33538: OR
33539: IFFALSE 33543
// exit ;
33541: GO 33896
// missile := [ 1 ] ;
33543: LD_ADDR_VAR 0 14
33547: PUSH
33548: LD_INT 1
33550: PUSH
33551: EMPTY
33552: LIST
33553: ST_TO_ADDR
// if Researched ( side , tech_space ) then
33554: LD_VAR 0 9
33558: PPUSH
33559: LD_VAR 0 12
33563: PPUSH
33564: CALL_OW 325
33568: IFFALSE 33597
// missile := Replace ( missile , missile + 1 , 2 ) ;
33570: LD_ADDR_VAR 0 14
33574: PUSH
33575: LD_VAR 0 14
33579: PPUSH
33580: LD_VAR 0 14
33584: PUSH
33585: LD_INT 1
33587: PLUS
33588: PPUSH
33589: LD_INT 2
33591: PPUSH
33592: CALL_OW 1
33596: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
33597: LD_VAR 0 9
33601: PPUSH
33602: LD_VAR 0 13
33606: PPUSH
33607: CALL_OW 325
33611: PUSH
33612: LD_VAR 0 10
33616: PPUSH
33617: CALL_OW 255
33621: PPUSH
33622: LD_VAR 0 13
33626: PPUSH
33627: CALL_OW 325
33631: NOT
33632: AND
33633: IFFALSE 33662
// missile := Replace ( missile , missile + 1 , 3 ) ;
33635: LD_ADDR_VAR 0 14
33639: PUSH
33640: LD_VAR 0 14
33644: PPUSH
33645: LD_VAR 0 14
33649: PUSH
33650: LD_INT 1
33652: PLUS
33653: PPUSH
33654: LD_INT 3
33656: PPUSH
33657: CALL_OW 1
33661: ST_TO_ADDR
// if missile < 2 then
33662: LD_VAR 0 14
33666: PUSH
33667: LD_INT 2
33669: LESS
33670: IFFALSE 33674
// exit ;
33672: GO 33896
// x := GetX ( enemy ) ;
33674: LD_ADDR_VAR 0 4
33678: PUSH
33679: LD_VAR 0 10
33683: PPUSH
33684: CALL_OW 250
33688: ST_TO_ADDR
// y := GetY ( enemy ) ;
33689: LD_ADDR_VAR 0 5
33693: PUSH
33694: LD_VAR 0 10
33698: PPUSH
33699: CALL_OW 251
33703: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
33704: LD_ADDR_VAR 0 6
33708: PUSH
33709: LD_VAR 0 4
33713: PUSH
33714: LD_INT 1
33716: NEG
33717: PPUSH
33718: LD_INT 1
33720: PPUSH
33721: CALL_OW 12
33725: PLUS
33726: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
33727: LD_ADDR_VAR 0 7
33731: PUSH
33732: LD_VAR 0 5
33736: PUSH
33737: LD_INT 1
33739: NEG
33740: PPUSH
33741: LD_INT 1
33743: PPUSH
33744: CALL_OW 12
33748: PLUS
33749: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33750: LD_VAR 0 6
33754: PPUSH
33755: LD_VAR 0 7
33759: PPUSH
33760: CALL_OW 488
33764: NOT
33765: IFFALSE 33787
// begin _x := x ;
33767: LD_ADDR_VAR 0 6
33771: PUSH
33772: LD_VAR 0 4
33776: ST_TO_ADDR
// _y := y ;
33777: LD_ADDR_VAR 0 7
33781: PUSH
33782: LD_VAR 0 5
33786: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
33787: LD_ADDR_VAR 0 3
33791: PUSH
33792: LD_INT 1
33794: PPUSH
33795: LD_VAR 0 14
33799: PPUSH
33800: CALL_OW 12
33804: ST_TO_ADDR
// case i of 1 :
33805: LD_VAR 0 3
33809: PUSH
33810: LD_INT 1
33812: DOUBLE
33813: EQUAL
33814: IFTRUE 33818
33816: GO 33835
33818: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
33819: LD_VAR 0 1
33823: PPUSH
33824: LD_VAR 0 10
33828: PPUSH
33829: CALL_OW 115
33833: GO 33896
33835: LD_INT 2
33837: DOUBLE
33838: EQUAL
33839: IFTRUE 33843
33841: GO 33865
33843: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
33844: LD_VAR 0 1
33848: PPUSH
33849: LD_VAR 0 6
33853: PPUSH
33854: LD_VAR 0 7
33858: PPUSH
33859: CALL_OW 153
33863: GO 33896
33865: LD_INT 3
33867: DOUBLE
33868: EQUAL
33869: IFTRUE 33873
33871: GO 33895
33873: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
33874: LD_VAR 0 1
33878: PPUSH
33879: LD_VAR 0 6
33883: PPUSH
33884: LD_VAR 0 7
33888: PPUSH
33889: CALL_OW 154
33893: GO 33896
33895: POP
// end ;
33896: LD_VAR 0 2
33900: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
33901: LD_INT 0
33903: PPUSH
33904: PPUSH
33905: PPUSH
33906: PPUSH
33907: PPUSH
33908: PPUSH
// if not unit or not building then
33909: LD_VAR 0 1
33913: NOT
33914: PUSH
33915: LD_VAR 0 2
33919: NOT
33920: OR
33921: IFFALSE 33925
// exit ;
33923: GO 34083
// x := GetX ( building ) ;
33925: LD_ADDR_VAR 0 5
33929: PUSH
33930: LD_VAR 0 2
33934: PPUSH
33935: CALL_OW 250
33939: ST_TO_ADDR
// y := GetY ( building ) ;
33940: LD_ADDR_VAR 0 6
33944: PUSH
33945: LD_VAR 0 2
33949: PPUSH
33950: CALL_OW 251
33954: ST_TO_ADDR
// for i = 0 to 5 do
33955: LD_ADDR_VAR 0 4
33959: PUSH
33960: DOUBLE
33961: LD_INT 0
33963: DEC
33964: ST_TO_ADDR
33965: LD_INT 5
33967: PUSH
33968: FOR_TO
33969: IFFALSE 34081
// begin _x := ShiftX ( x , i , 3 ) ;
33971: LD_ADDR_VAR 0 7
33975: PUSH
33976: LD_VAR 0 5
33980: PPUSH
33981: LD_VAR 0 4
33985: PPUSH
33986: LD_INT 3
33988: PPUSH
33989: CALL_OW 272
33993: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
33994: LD_ADDR_VAR 0 8
33998: PUSH
33999: LD_VAR 0 6
34003: PPUSH
34004: LD_VAR 0 4
34008: PPUSH
34009: LD_INT 3
34011: PPUSH
34012: CALL_OW 273
34016: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34017: LD_VAR 0 7
34021: PPUSH
34022: LD_VAR 0 8
34026: PPUSH
34027: CALL_OW 488
34031: NOT
34032: IFFALSE 34036
// continue ;
34034: GO 33968
// if HexInfo ( _x , _y ) = 0 then
34036: LD_VAR 0 7
34040: PPUSH
34041: LD_VAR 0 8
34045: PPUSH
34046: CALL_OW 428
34050: PUSH
34051: LD_INT 0
34053: EQUAL
34054: IFFALSE 34079
// begin ComMoveXY ( unit , _x , _y ) ;
34056: LD_VAR 0 1
34060: PPUSH
34061: LD_VAR 0 7
34065: PPUSH
34066: LD_VAR 0 8
34070: PPUSH
34071: CALL_OW 111
// exit ;
34075: POP
34076: POP
34077: GO 34083
// end ; end ;
34079: GO 33968
34081: POP
34082: POP
// end ;
34083: LD_VAR 0 3
34087: RET
// export function ScanBase ( side , base_area ) ; begin
34088: LD_INT 0
34090: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
34091: LD_ADDR_VAR 0 3
34095: PUSH
34096: LD_VAR 0 2
34100: PPUSH
34101: LD_INT 81
34103: PUSH
34104: LD_VAR 0 1
34108: PUSH
34109: EMPTY
34110: LIST
34111: LIST
34112: PPUSH
34113: CALL_OW 70
34117: ST_TO_ADDR
// end ;
34118: LD_VAR 0 3
34122: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
34123: LD_INT 0
34125: PPUSH
34126: PPUSH
34127: PPUSH
34128: PPUSH
// result := false ;
34129: LD_ADDR_VAR 0 2
34133: PUSH
34134: LD_INT 0
34136: ST_TO_ADDR
// side := GetSide ( unit ) ;
34137: LD_ADDR_VAR 0 3
34141: PUSH
34142: LD_VAR 0 1
34146: PPUSH
34147: CALL_OW 255
34151: ST_TO_ADDR
// nat := GetNation ( unit ) ;
34152: LD_ADDR_VAR 0 4
34156: PUSH
34157: LD_VAR 0 1
34161: PPUSH
34162: CALL_OW 248
34166: ST_TO_ADDR
// case nat of 1 :
34167: LD_VAR 0 4
34171: PUSH
34172: LD_INT 1
34174: DOUBLE
34175: EQUAL
34176: IFTRUE 34180
34178: GO 34191
34180: POP
// tech := tech_lassight ; 2 :
34181: LD_ADDR_VAR 0 5
34185: PUSH
34186: LD_INT 12
34188: ST_TO_ADDR
34189: GO 34230
34191: LD_INT 2
34193: DOUBLE
34194: EQUAL
34195: IFTRUE 34199
34197: GO 34210
34199: POP
// tech := tech_mortar ; 3 :
34200: LD_ADDR_VAR 0 5
34204: PUSH
34205: LD_INT 41
34207: ST_TO_ADDR
34208: GO 34230
34210: LD_INT 3
34212: DOUBLE
34213: EQUAL
34214: IFTRUE 34218
34216: GO 34229
34218: POP
// tech := tech_bazooka ; end ;
34219: LD_ADDR_VAR 0 5
34223: PUSH
34224: LD_INT 44
34226: ST_TO_ADDR
34227: GO 34230
34229: POP
// if Researched ( side , tech ) then
34230: LD_VAR 0 3
34234: PPUSH
34235: LD_VAR 0 5
34239: PPUSH
34240: CALL_OW 325
34244: IFFALSE 34271
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
34246: LD_ADDR_VAR 0 2
34250: PUSH
34251: LD_INT 5
34253: PUSH
34254: LD_INT 8
34256: PUSH
34257: LD_INT 9
34259: PUSH
34260: EMPTY
34261: LIST
34262: LIST
34263: LIST
34264: PUSH
34265: LD_VAR 0 4
34269: ARRAY
34270: ST_TO_ADDR
// end ;
34271: LD_VAR 0 2
34275: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
34276: LD_INT 0
34278: PPUSH
34279: PPUSH
34280: PPUSH
// if not mines then
34281: LD_VAR 0 2
34285: NOT
34286: IFFALSE 34290
// exit ;
34288: GO 34434
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34290: LD_ADDR_VAR 0 5
34294: PUSH
34295: LD_INT 81
34297: PUSH
34298: LD_VAR 0 1
34302: PUSH
34303: EMPTY
34304: LIST
34305: LIST
34306: PUSH
34307: LD_INT 3
34309: PUSH
34310: LD_INT 21
34312: PUSH
34313: LD_INT 3
34315: PUSH
34316: EMPTY
34317: LIST
34318: LIST
34319: PUSH
34320: EMPTY
34321: LIST
34322: LIST
34323: PUSH
34324: EMPTY
34325: LIST
34326: LIST
34327: PPUSH
34328: CALL_OW 69
34332: ST_TO_ADDR
// for i in mines do
34333: LD_ADDR_VAR 0 4
34337: PUSH
34338: LD_VAR 0 2
34342: PUSH
34343: FOR_IN
34344: IFFALSE 34432
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
34346: LD_VAR 0 4
34350: PUSH
34351: LD_INT 1
34353: ARRAY
34354: PPUSH
34355: LD_VAR 0 4
34359: PUSH
34360: LD_INT 2
34362: ARRAY
34363: PPUSH
34364: CALL_OW 458
34368: NOT
34369: IFFALSE 34373
// continue ;
34371: GO 34343
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
34373: LD_VAR 0 4
34377: PUSH
34378: LD_INT 1
34380: ARRAY
34381: PPUSH
34382: LD_VAR 0 4
34386: PUSH
34387: LD_INT 2
34389: ARRAY
34390: PPUSH
34391: CALL_OW 428
34395: PUSH
34396: LD_VAR 0 5
34400: IN
34401: IFFALSE 34430
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
34403: LD_VAR 0 4
34407: PUSH
34408: LD_INT 1
34410: ARRAY
34411: PPUSH
34412: LD_VAR 0 4
34416: PUSH
34417: LD_INT 2
34419: ARRAY
34420: PPUSH
34421: LD_VAR 0 1
34425: PPUSH
34426: CALL_OW 456
// end ;
34430: GO 34343
34432: POP
34433: POP
// end ;
34434: LD_VAR 0 3
34438: RET
// export function Count ( array ) ; begin
34439: LD_INT 0
34441: PPUSH
// result := array + 0 ;
34442: LD_ADDR_VAR 0 2
34446: PUSH
34447: LD_VAR 0 1
34451: PUSH
34452: LD_INT 0
34454: PLUS
34455: ST_TO_ADDR
// end ;
34456: LD_VAR 0 2
34460: RET
// export function IsEmpty ( building ) ; begin
34461: LD_INT 0
34463: PPUSH
// if not building then
34464: LD_VAR 0 1
34468: NOT
34469: IFFALSE 34473
// exit ;
34471: GO 34516
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
34473: LD_ADDR_VAR 0 2
34477: PUSH
34478: LD_VAR 0 1
34482: PUSH
34483: LD_INT 22
34485: PUSH
34486: LD_VAR 0 1
34490: PPUSH
34491: CALL_OW 255
34495: PUSH
34496: EMPTY
34497: LIST
34498: LIST
34499: PUSH
34500: LD_INT 58
34502: PUSH
34503: EMPTY
34504: LIST
34505: PUSH
34506: EMPTY
34507: LIST
34508: LIST
34509: PPUSH
34510: CALL_OW 69
34514: IN
34515: ST_TO_ADDR
// end ;
34516: LD_VAR 0 2
34520: RET
// export function IsNotFull ( building ) ; var places ; begin
34521: LD_INT 0
34523: PPUSH
34524: PPUSH
// if not building then
34525: LD_VAR 0 1
34529: NOT
34530: IFFALSE 34534
// exit ;
34532: GO 34562
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
34534: LD_ADDR_VAR 0 2
34538: PUSH
34539: LD_VAR 0 1
34543: PPUSH
34544: LD_INT 3
34546: PUSH
34547: LD_INT 62
34549: PUSH
34550: EMPTY
34551: LIST
34552: PUSH
34553: EMPTY
34554: LIST
34555: LIST
34556: PPUSH
34557: CALL_OW 72
34561: ST_TO_ADDR
// end ;
34562: LD_VAR 0 2
34566: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
34567: LD_INT 0
34569: PPUSH
34570: PPUSH
34571: PPUSH
34572: PPUSH
// tmp := [ ] ;
34573: LD_ADDR_VAR 0 3
34577: PUSH
34578: EMPTY
34579: ST_TO_ADDR
// list := [ ] ;
34580: LD_ADDR_VAR 0 5
34584: PUSH
34585: EMPTY
34586: ST_TO_ADDR
// for i = 16 to 25 do
34587: LD_ADDR_VAR 0 4
34591: PUSH
34592: DOUBLE
34593: LD_INT 16
34595: DEC
34596: ST_TO_ADDR
34597: LD_INT 25
34599: PUSH
34600: FOR_TO
34601: IFFALSE 34674
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
34603: LD_ADDR_VAR 0 3
34607: PUSH
34608: LD_VAR 0 3
34612: PUSH
34613: LD_INT 22
34615: PUSH
34616: LD_VAR 0 1
34620: PPUSH
34621: CALL_OW 255
34625: PUSH
34626: EMPTY
34627: LIST
34628: LIST
34629: PUSH
34630: LD_INT 91
34632: PUSH
34633: LD_VAR 0 1
34637: PUSH
34638: LD_INT 6
34640: PUSH
34641: EMPTY
34642: LIST
34643: LIST
34644: LIST
34645: PUSH
34646: LD_INT 30
34648: PUSH
34649: LD_VAR 0 4
34653: PUSH
34654: EMPTY
34655: LIST
34656: LIST
34657: PUSH
34658: EMPTY
34659: LIST
34660: LIST
34661: LIST
34662: PUSH
34663: EMPTY
34664: LIST
34665: PPUSH
34666: CALL_OW 69
34670: ADD
34671: ST_TO_ADDR
34672: GO 34600
34674: POP
34675: POP
// for i = 1 to tmp do
34676: LD_ADDR_VAR 0 4
34680: PUSH
34681: DOUBLE
34682: LD_INT 1
34684: DEC
34685: ST_TO_ADDR
34686: LD_VAR 0 3
34690: PUSH
34691: FOR_TO
34692: IFFALSE 34780
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
34694: LD_ADDR_VAR 0 5
34698: PUSH
34699: LD_VAR 0 5
34703: PUSH
34704: LD_VAR 0 3
34708: PUSH
34709: LD_VAR 0 4
34713: ARRAY
34714: PPUSH
34715: CALL_OW 266
34719: PUSH
34720: LD_VAR 0 3
34724: PUSH
34725: LD_VAR 0 4
34729: ARRAY
34730: PPUSH
34731: CALL_OW 250
34735: PUSH
34736: LD_VAR 0 3
34740: PUSH
34741: LD_VAR 0 4
34745: ARRAY
34746: PPUSH
34747: CALL_OW 251
34751: PUSH
34752: LD_VAR 0 3
34756: PUSH
34757: LD_VAR 0 4
34761: ARRAY
34762: PPUSH
34763: CALL_OW 254
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: LIST
34772: LIST
34773: PUSH
34774: EMPTY
34775: LIST
34776: ADD
34777: ST_TO_ADDR
34778: GO 34691
34780: POP
34781: POP
// result := list ;
34782: LD_ADDR_VAR 0 2
34786: PUSH
34787: LD_VAR 0 5
34791: ST_TO_ADDR
// end ;
34792: LD_VAR 0 2
34796: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
34797: LD_INT 0
34799: PPUSH
34800: PPUSH
34801: PPUSH
34802: PPUSH
34803: PPUSH
34804: PPUSH
34805: PPUSH
// if not factory then
34806: LD_VAR 0 1
34810: NOT
34811: IFFALSE 34815
// exit ;
34813: GO 35408
// if control = control_apeman then
34815: LD_VAR 0 4
34819: PUSH
34820: LD_INT 5
34822: EQUAL
34823: IFFALSE 34932
// begin tmp := UnitsInside ( factory ) ;
34825: LD_ADDR_VAR 0 8
34829: PUSH
34830: LD_VAR 0 1
34834: PPUSH
34835: CALL_OW 313
34839: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
34840: LD_VAR 0 8
34844: PPUSH
34845: LD_INT 25
34847: PUSH
34848: LD_INT 12
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: PPUSH
34855: CALL_OW 72
34859: NOT
34860: IFFALSE 34870
// control := control_manual ;
34862: LD_ADDR_VAR 0 4
34866: PUSH
34867: LD_INT 1
34869: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
34870: LD_ADDR_VAR 0 8
34874: PUSH
34875: LD_VAR 0 1
34879: PPUSH
34880: CALL 34567 0 1
34884: ST_TO_ADDR
// if tmp then
34885: LD_VAR 0 8
34889: IFFALSE 34932
// begin for i in tmp do
34891: LD_ADDR_VAR 0 7
34895: PUSH
34896: LD_VAR 0 8
34900: PUSH
34901: FOR_IN
34902: IFFALSE 34930
// if i [ 1 ] = b_ext_radio then
34904: LD_VAR 0 7
34908: PUSH
34909: LD_INT 1
34911: ARRAY
34912: PUSH
34913: LD_INT 22
34915: EQUAL
34916: IFFALSE 34928
// begin control := control_remote ;
34918: LD_ADDR_VAR 0 4
34922: PUSH
34923: LD_INT 2
34925: ST_TO_ADDR
// break ;
34926: GO 34930
// end ;
34928: GO 34901
34930: POP
34931: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34932: LD_VAR 0 1
34936: PPUSH
34937: LD_VAR 0 2
34941: PPUSH
34942: LD_VAR 0 3
34946: PPUSH
34947: LD_VAR 0 4
34951: PPUSH
34952: LD_VAR 0 5
34956: PPUSH
34957: CALL_OW 448
34961: IFFALSE 34996
// begin result := [ chassis , engine , control , weapon ] ;
34963: LD_ADDR_VAR 0 6
34967: PUSH
34968: LD_VAR 0 2
34972: PUSH
34973: LD_VAR 0 3
34977: PUSH
34978: LD_VAR 0 4
34982: PUSH
34983: LD_VAR 0 5
34987: PUSH
34988: EMPTY
34989: LIST
34990: LIST
34991: LIST
34992: LIST
34993: ST_TO_ADDR
// exit ;
34994: GO 35408
// end ; _chassis := AvailableChassisList ( factory ) ;
34996: LD_ADDR_VAR 0 9
35000: PUSH
35001: LD_VAR 0 1
35005: PPUSH
35006: CALL_OW 475
35010: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
35011: LD_ADDR_VAR 0 11
35015: PUSH
35016: LD_VAR 0 1
35020: PPUSH
35021: CALL_OW 476
35025: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
35026: LD_ADDR_VAR 0 12
35030: PUSH
35031: LD_VAR 0 1
35035: PPUSH
35036: CALL_OW 477
35040: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
35041: LD_ADDR_VAR 0 10
35045: PUSH
35046: LD_VAR 0 1
35050: PPUSH
35051: CALL_OW 478
35055: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
35056: LD_VAR 0 9
35060: NOT
35061: PUSH
35062: LD_VAR 0 11
35066: NOT
35067: OR
35068: PUSH
35069: LD_VAR 0 12
35073: NOT
35074: OR
35075: PUSH
35076: LD_VAR 0 10
35080: NOT
35081: OR
35082: IFFALSE 35117
// begin result := [ chassis , engine , control , weapon ] ;
35084: LD_ADDR_VAR 0 6
35088: PUSH
35089: LD_VAR 0 2
35093: PUSH
35094: LD_VAR 0 3
35098: PUSH
35099: LD_VAR 0 4
35103: PUSH
35104: LD_VAR 0 5
35108: PUSH
35109: EMPTY
35110: LIST
35111: LIST
35112: LIST
35113: LIST
35114: ST_TO_ADDR
// exit ;
35115: GO 35408
// end ; if not chassis in _chassis then
35117: LD_VAR 0 2
35121: PUSH
35122: LD_VAR 0 9
35126: IN
35127: NOT
35128: IFFALSE 35154
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
35130: LD_ADDR_VAR 0 2
35134: PUSH
35135: LD_VAR 0 9
35139: PUSH
35140: LD_INT 1
35142: PPUSH
35143: LD_VAR 0 9
35147: PPUSH
35148: CALL_OW 12
35152: ARRAY
35153: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
35154: LD_VAR 0 2
35158: PPUSH
35159: LD_VAR 0 3
35163: PPUSH
35164: CALL 35413 0 2
35168: NOT
35169: IFFALSE 35228
// repeat engine := _engine [ 1 ] ;
35171: LD_ADDR_VAR 0 3
35175: PUSH
35176: LD_VAR 0 11
35180: PUSH
35181: LD_INT 1
35183: ARRAY
35184: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
35185: LD_ADDR_VAR 0 11
35189: PUSH
35190: LD_VAR 0 11
35194: PPUSH
35195: LD_INT 1
35197: PPUSH
35198: CALL_OW 3
35202: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
35203: LD_VAR 0 2
35207: PPUSH
35208: LD_VAR 0 3
35212: PPUSH
35213: CALL 35413 0 2
35217: PUSH
35218: LD_VAR 0 11
35222: PUSH
35223: EMPTY
35224: EQUAL
35225: OR
35226: IFFALSE 35171
// if not control in _control then
35228: LD_VAR 0 4
35232: PUSH
35233: LD_VAR 0 12
35237: IN
35238: NOT
35239: IFFALSE 35265
// control := _control [ rand ( 1 , _control ) ] ;
35241: LD_ADDR_VAR 0 4
35245: PUSH
35246: LD_VAR 0 12
35250: PUSH
35251: LD_INT 1
35253: PPUSH
35254: LD_VAR 0 12
35258: PPUSH
35259: CALL_OW 12
35263: ARRAY
35264: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
35265: LD_VAR 0 2
35269: PPUSH
35270: LD_VAR 0 5
35274: PPUSH
35275: CALL 35633 0 2
35279: NOT
35280: IFFALSE 35339
// repeat weapon := _weapon [ 1 ] ;
35282: LD_ADDR_VAR 0 5
35286: PUSH
35287: LD_VAR 0 10
35291: PUSH
35292: LD_INT 1
35294: ARRAY
35295: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
35296: LD_ADDR_VAR 0 10
35300: PUSH
35301: LD_VAR 0 10
35305: PPUSH
35306: LD_INT 1
35308: PPUSH
35309: CALL_OW 3
35313: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
35314: LD_VAR 0 2
35318: PPUSH
35319: LD_VAR 0 5
35323: PPUSH
35324: CALL 35633 0 2
35328: PUSH
35329: LD_VAR 0 10
35333: PUSH
35334: EMPTY
35335: EQUAL
35336: OR
35337: IFFALSE 35282
// result := [ ] ;
35339: LD_ADDR_VAR 0 6
35343: PUSH
35344: EMPTY
35345: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35346: LD_VAR 0 1
35350: PPUSH
35351: LD_VAR 0 2
35355: PPUSH
35356: LD_VAR 0 3
35360: PPUSH
35361: LD_VAR 0 4
35365: PPUSH
35366: LD_VAR 0 5
35370: PPUSH
35371: CALL_OW 448
35375: IFFALSE 35408
// result := [ chassis , engine , control , weapon ] ;
35377: LD_ADDR_VAR 0 6
35381: PUSH
35382: LD_VAR 0 2
35386: PUSH
35387: LD_VAR 0 3
35391: PUSH
35392: LD_VAR 0 4
35396: PUSH
35397: LD_VAR 0 5
35401: PUSH
35402: EMPTY
35403: LIST
35404: LIST
35405: LIST
35406: LIST
35407: ST_TO_ADDR
// end ;
35408: LD_VAR 0 6
35412: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
35413: LD_INT 0
35415: PPUSH
// if not chassis or not engine then
35416: LD_VAR 0 1
35420: NOT
35421: PUSH
35422: LD_VAR 0 2
35426: NOT
35427: OR
35428: IFFALSE 35432
// exit ;
35430: GO 35628
// case engine of engine_solar :
35432: LD_VAR 0 2
35436: PUSH
35437: LD_INT 2
35439: DOUBLE
35440: EQUAL
35441: IFTRUE 35445
35443: GO 35483
35445: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
35446: LD_ADDR_VAR 0 3
35450: PUSH
35451: LD_INT 11
35453: PUSH
35454: LD_INT 12
35456: PUSH
35457: LD_INT 13
35459: PUSH
35460: LD_INT 14
35462: PUSH
35463: LD_INT 1
35465: PUSH
35466: LD_INT 2
35468: PUSH
35469: LD_INT 3
35471: PUSH
35472: EMPTY
35473: LIST
35474: LIST
35475: LIST
35476: LIST
35477: LIST
35478: LIST
35479: LIST
35480: ST_TO_ADDR
35481: GO 35612
35483: LD_INT 1
35485: DOUBLE
35486: EQUAL
35487: IFTRUE 35491
35489: GO 35553
35491: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
35492: LD_ADDR_VAR 0 3
35496: PUSH
35497: LD_INT 11
35499: PUSH
35500: LD_INT 12
35502: PUSH
35503: LD_INT 13
35505: PUSH
35506: LD_INT 14
35508: PUSH
35509: LD_INT 1
35511: PUSH
35512: LD_INT 2
35514: PUSH
35515: LD_INT 3
35517: PUSH
35518: LD_INT 4
35520: PUSH
35521: LD_INT 5
35523: PUSH
35524: LD_INT 21
35526: PUSH
35527: LD_INT 23
35529: PUSH
35530: LD_INT 22
35532: PUSH
35533: LD_INT 24
35535: PUSH
35536: EMPTY
35537: LIST
35538: LIST
35539: LIST
35540: LIST
35541: LIST
35542: LIST
35543: LIST
35544: LIST
35545: LIST
35546: LIST
35547: LIST
35548: LIST
35549: LIST
35550: ST_TO_ADDR
35551: GO 35612
35553: LD_INT 3
35555: DOUBLE
35556: EQUAL
35557: IFTRUE 35561
35559: GO 35611
35561: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35562: LD_ADDR_VAR 0 3
35566: PUSH
35567: LD_INT 13
35569: PUSH
35570: LD_INT 14
35572: PUSH
35573: LD_INT 2
35575: PUSH
35576: LD_INT 3
35578: PUSH
35579: LD_INT 4
35581: PUSH
35582: LD_INT 5
35584: PUSH
35585: LD_INT 21
35587: PUSH
35588: LD_INT 22
35590: PUSH
35591: LD_INT 23
35593: PUSH
35594: LD_INT 24
35596: PUSH
35597: EMPTY
35598: LIST
35599: LIST
35600: LIST
35601: LIST
35602: LIST
35603: LIST
35604: LIST
35605: LIST
35606: LIST
35607: LIST
35608: ST_TO_ADDR
35609: GO 35612
35611: POP
// result := ( chassis in result ) ;
35612: LD_ADDR_VAR 0 3
35616: PUSH
35617: LD_VAR 0 1
35621: PUSH
35622: LD_VAR 0 3
35626: IN
35627: ST_TO_ADDR
// end ;
35628: LD_VAR 0 3
35632: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
35633: LD_INT 0
35635: PPUSH
// if not chassis or not weapon then
35636: LD_VAR 0 1
35640: NOT
35641: PUSH
35642: LD_VAR 0 2
35646: NOT
35647: OR
35648: IFFALSE 35652
// exit ;
35650: GO 36712
// case weapon of us_machine_gun :
35652: LD_VAR 0 2
35656: PUSH
35657: LD_INT 2
35659: DOUBLE
35660: EQUAL
35661: IFTRUE 35665
35663: GO 35695
35665: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
35666: LD_ADDR_VAR 0 3
35670: PUSH
35671: LD_INT 1
35673: PUSH
35674: LD_INT 2
35676: PUSH
35677: LD_INT 3
35679: PUSH
35680: LD_INT 4
35682: PUSH
35683: LD_INT 5
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: LIST
35690: LIST
35691: LIST
35692: ST_TO_ADDR
35693: GO 36696
35695: LD_INT 3
35697: DOUBLE
35698: EQUAL
35699: IFTRUE 35703
35701: GO 35733
35703: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
35704: LD_ADDR_VAR 0 3
35708: PUSH
35709: LD_INT 1
35711: PUSH
35712: LD_INT 2
35714: PUSH
35715: LD_INT 3
35717: PUSH
35718: LD_INT 4
35720: PUSH
35721: LD_INT 5
35723: PUSH
35724: EMPTY
35725: LIST
35726: LIST
35727: LIST
35728: LIST
35729: LIST
35730: ST_TO_ADDR
35731: GO 36696
35733: LD_INT 11
35735: DOUBLE
35736: EQUAL
35737: IFTRUE 35741
35739: GO 35771
35741: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
35742: LD_ADDR_VAR 0 3
35746: PUSH
35747: LD_INT 1
35749: PUSH
35750: LD_INT 2
35752: PUSH
35753: LD_INT 3
35755: PUSH
35756: LD_INT 4
35758: PUSH
35759: LD_INT 5
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: LIST
35766: LIST
35767: LIST
35768: ST_TO_ADDR
35769: GO 36696
35771: LD_INT 4
35773: DOUBLE
35774: EQUAL
35775: IFTRUE 35779
35777: GO 35805
35779: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
35780: LD_ADDR_VAR 0 3
35784: PUSH
35785: LD_INT 2
35787: PUSH
35788: LD_INT 3
35790: PUSH
35791: LD_INT 4
35793: PUSH
35794: LD_INT 5
35796: PUSH
35797: EMPTY
35798: LIST
35799: LIST
35800: LIST
35801: LIST
35802: ST_TO_ADDR
35803: GO 36696
35805: LD_INT 5
35807: DOUBLE
35808: EQUAL
35809: IFTRUE 35813
35811: GO 35839
35813: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
35814: LD_ADDR_VAR 0 3
35818: PUSH
35819: LD_INT 2
35821: PUSH
35822: LD_INT 3
35824: PUSH
35825: LD_INT 4
35827: PUSH
35828: LD_INT 5
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: LIST
35835: LIST
35836: ST_TO_ADDR
35837: GO 36696
35839: LD_INT 9
35841: DOUBLE
35842: EQUAL
35843: IFTRUE 35847
35845: GO 35873
35847: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
35848: LD_ADDR_VAR 0 3
35852: PUSH
35853: LD_INT 2
35855: PUSH
35856: LD_INT 3
35858: PUSH
35859: LD_INT 4
35861: PUSH
35862: LD_INT 5
35864: PUSH
35865: EMPTY
35866: LIST
35867: LIST
35868: LIST
35869: LIST
35870: ST_TO_ADDR
35871: GO 36696
35873: LD_INT 7
35875: DOUBLE
35876: EQUAL
35877: IFTRUE 35881
35879: GO 35907
35881: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
35882: LD_ADDR_VAR 0 3
35886: PUSH
35887: LD_INT 2
35889: PUSH
35890: LD_INT 3
35892: PUSH
35893: LD_INT 4
35895: PUSH
35896: LD_INT 5
35898: PUSH
35899: EMPTY
35900: LIST
35901: LIST
35902: LIST
35903: LIST
35904: ST_TO_ADDR
35905: GO 36696
35907: LD_INT 12
35909: DOUBLE
35910: EQUAL
35911: IFTRUE 35915
35913: GO 35941
35915: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
35916: LD_ADDR_VAR 0 3
35920: PUSH
35921: LD_INT 2
35923: PUSH
35924: LD_INT 3
35926: PUSH
35927: LD_INT 4
35929: PUSH
35930: LD_INT 5
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: LIST
35937: LIST
35938: ST_TO_ADDR
35939: GO 36696
35941: LD_INT 13
35943: DOUBLE
35944: EQUAL
35945: IFTRUE 35949
35947: GO 35975
35949: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
35950: LD_ADDR_VAR 0 3
35954: PUSH
35955: LD_INT 2
35957: PUSH
35958: LD_INT 3
35960: PUSH
35961: LD_INT 4
35963: PUSH
35964: LD_INT 5
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: LIST
35971: LIST
35972: ST_TO_ADDR
35973: GO 36696
35975: LD_INT 14
35977: DOUBLE
35978: EQUAL
35979: IFTRUE 35983
35981: GO 36001
35983: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
35984: LD_ADDR_VAR 0 3
35988: PUSH
35989: LD_INT 4
35991: PUSH
35992: LD_INT 5
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: ST_TO_ADDR
35999: GO 36696
36001: LD_INT 6
36003: DOUBLE
36004: EQUAL
36005: IFTRUE 36009
36007: GO 36027
36009: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
36010: LD_ADDR_VAR 0 3
36014: PUSH
36015: LD_INT 4
36017: PUSH
36018: LD_INT 5
36020: PUSH
36021: EMPTY
36022: LIST
36023: LIST
36024: ST_TO_ADDR
36025: GO 36696
36027: LD_INT 10
36029: DOUBLE
36030: EQUAL
36031: IFTRUE 36035
36033: GO 36053
36035: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
36036: LD_ADDR_VAR 0 3
36040: PUSH
36041: LD_INT 4
36043: PUSH
36044: LD_INT 5
36046: PUSH
36047: EMPTY
36048: LIST
36049: LIST
36050: ST_TO_ADDR
36051: GO 36696
36053: LD_INT 22
36055: DOUBLE
36056: EQUAL
36057: IFTRUE 36061
36059: GO 36087
36061: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
36062: LD_ADDR_VAR 0 3
36066: PUSH
36067: LD_INT 11
36069: PUSH
36070: LD_INT 12
36072: PUSH
36073: LD_INT 13
36075: PUSH
36076: LD_INT 14
36078: PUSH
36079: EMPTY
36080: LIST
36081: LIST
36082: LIST
36083: LIST
36084: ST_TO_ADDR
36085: GO 36696
36087: LD_INT 23
36089: DOUBLE
36090: EQUAL
36091: IFTRUE 36095
36093: GO 36121
36095: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
36096: LD_ADDR_VAR 0 3
36100: PUSH
36101: LD_INT 11
36103: PUSH
36104: LD_INT 12
36106: PUSH
36107: LD_INT 13
36109: PUSH
36110: LD_INT 14
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: LIST
36117: LIST
36118: ST_TO_ADDR
36119: GO 36696
36121: LD_INT 24
36123: DOUBLE
36124: EQUAL
36125: IFTRUE 36129
36127: GO 36155
36129: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
36130: LD_ADDR_VAR 0 3
36134: PUSH
36135: LD_INT 11
36137: PUSH
36138: LD_INT 12
36140: PUSH
36141: LD_INT 13
36143: PUSH
36144: LD_INT 14
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: LIST
36151: LIST
36152: ST_TO_ADDR
36153: GO 36696
36155: LD_INT 30
36157: DOUBLE
36158: EQUAL
36159: IFTRUE 36163
36161: GO 36189
36163: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
36164: LD_ADDR_VAR 0 3
36168: PUSH
36169: LD_INT 11
36171: PUSH
36172: LD_INT 12
36174: PUSH
36175: LD_INT 13
36177: PUSH
36178: LD_INT 14
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: LIST
36185: LIST
36186: ST_TO_ADDR
36187: GO 36696
36189: LD_INT 25
36191: DOUBLE
36192: EQUAL
36193: IFTRUE 36197
36195: GO 36215
36197: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
36198: LD_ADDR_VAR 0 3
36202: PUSH
36203: LD_INT 13
36205: PUSH
36206: LD_INT 14
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: ST_TO_ADDR
36213: GO 36696
36215: LD_INT 27
36217: DOUBLE
36218: EQUAL
36219: IFTRUE 36223
36221: GO 36241
36223: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
36224: LD_ADDR_VAR 0 3
36228: PUSH
36229: LD_INT 13
36231: PUSH
36232: LD_INT 14
36234: PUSH
36235: EMPTY
36236: LIST
36237: LIST
36238: ST_TO_ADDR
36239: GO 36696
36241: LD_INT 92
36243: DOUBLE
36244: EQUAL
36245: IFTRUE 36249
36247: GO 36275
36249: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
36250: LD_ADDR_VAR 0 3
36254: PUSH
36255: LD_INT 11
36257: PUSH
36258: LD_INT 12
36260: PUSH
36261: LD_INT 13
36263: PUSH
36264: LD_INT 14
36266: PUSH
36267: EMPTY
36268: LIST
36269: LIST
36270: LIST
36271: LIST
36272: ST_TO_ADDR
36273: GO 36696
36275: LD_INT 28
36277: DOUBLE
36278: EQUAL
36279: IFTRUE 36283
36281: GO 36301
36283: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
36284: LD_ADDR_VAR 0 3
36288: PUSH
36289: LD_INT 13
36291: PUSH
36292: LD_INT 14
36294: PUSH
36295: EMPTY
36296: LIST
36297: LIST
36298: ST_TO_ADDR
36299: GO 36696
36301: LD_INT 29
36303: DOUBLE
36304: EQUAL
36305: IFTRUE 36309
36307: GO 36327
36309: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
36310: LD_ADDR_VAR 0 3
36314: PUSH
36315: LD_INT 13
36317: PUSH
36318: LD_INT 14
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: ST_TO_ADDR
36325: GO 36696
36327: LD_INT 31
36329: DOUBLE
36330: EQUAL
36331: IFTRUE 36335
36333: GO 36353
36335: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
36336: LD_ADDR_VAR 0 3
36340: PUSH
36341: LD_INT 13
36343: PUSH
36344: LD_INT 14
36346: PUSH
36347: EMPTY
36348: LIST
36349: LIST
36350: ST_TO_ADDR
36351: GO 36696
36353: LD_INT 26
36355: DOUBLE
36356: EQUAL
36357: IFTRUE 36361
36359: GO 36379
36361: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
36362: LD_ADDR_VAR 0 3
36366: PUSH
36367: LD_INT 13
36369: PUSH
36370: LD_INT 14
36372: PUSH
36373: EMPTY
36374: LIST
36375: LIST
36376: ST_TO_ADDR
36377: GO 36696
36379: LD_INT 42
36381: DOUBLE
36382: EQUAL
36383: IFTRUE 36387
36385: GO 36413
36387: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
36388: LD_ADDR_VAR 0 3
36392: PUSH
36393: LD_INT 21
36395: PUSH
36396: LD_INT 22
36398: PUSH
36399: LD_INT 23
36401: PUSH
36402: LD_INT 24
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: LIST
36409: LIST
36410: ST_TO_ADDR
36411: GO 36696
36413: LD_INT 43
36415: DOUBLE
36416: EQUAL
36417: IFTRUE 36421
36419: GO 36447
36421: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
36422: LD_ADDR_VAR 0 3
36426: PUSH
36427: LD_INT 21
36429: PUSH
36430: LD_INT 22
36432: PUSH
36433: LD_INT 23
36435: PUSH
36436: LD_INT 24
36438: PUSH
36439: EMPTY
36440: LIST
36441: LIST
36442: LIST
36443: LIST
36444: ST_TO_ADDR
36445: GO 36696
36447: LD_INT 44
36449: DOUBLE
36450: EQUAL
36451: IFTRUE 36455
36453: GO 36481
36455: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
36456: LD_ADDR_VAR 0 3
36460: PUSH
36461: LD_INT 21
36463: PUSH
36464: LD_INT 22
36466: PUSH
36467: LD_INT 23
36469: PUSH
36470: LD_INT 24
36472: PUSH
36473: EMPTY
36474: LIST
36475: LIST
36476: LIST
36477: LIST
36478: ST_TO_ADDR
36479: GO 36696
36481: LD_INT 45
36483: DOUBLE
36484: EQUAL
36485: IFTRUE 36489
36487: GO 36515
36489: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
36490: LD_ADDR_VAR 0 3
36494: PUSH
36495: LD_INT 21
36497: PUSH
36498: LD_INT 22
36500: PUSH
36501: LD_INT 23
36503: PUSH
36504: LD_INT 24
36506: PUSH
36507: EMPTY
36508: LIST
36509: LIST
36510: LIST
36511: LIST
36512: ST_TO_ADDR
36513: GO 36696
36515: LD_INT 49
36517: DOUBLE
36518: EQUAL
36519: IFTRUE 36523
36521: GO 36549
36523: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
36524: LD_ADDR_VAR 0 3
36528: PUSH
36529: LD_INT 21
36531: PUSH
36532: LD_INT 22
36534: PUSH
36535: LD_INT 23
36537: PUSH
36538: LD_INT 24
36540: PUSH
36541: EMPTY
36542: LIST
36543: LIST
36544: LIST
36545: LIST
36546: ST_TO_ADDR
36547: GO 36696
36549: LD_INT 51
36551: DOUBLE
36552: EQUAL
36553: IFTRUE 36557
36555: GO 36583
36557: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
36558: LD_ADDR_VAR 0 3
36562: PUSH
36563: LD_INT 21
36565: PUSH
36566: LD_INT 22
36568: PUSH
36569: LD_INT 23
36571: PUSH
36572: LD_INT 24
36574: PUSH
36575: EMPTY
36576: LIST
36577: LIST
36578: LIST
36579: LIST
36580: ST_TO_ADDR
36581: GO 36696
36583: LD_INT 52
36585: DOUBLE
36586: EQUAL
36587: IFTRUE 36591
36589: GO 36617
36591: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
36592: LD_ADDR_VAR 0 3
36596: PUSH
36597: LD_INT 21
36599: PUSH
36600: LD_INT 22
36602: PUSH
36603: LD_INT 23
36605: PUSH
36606: LD_INT 24
36608: PUSH
36609: EMPTY
36610: LIST
36611: LIST
36612: LIST
36613: LIST
36614: ST_TO_ADDR
36615: GO 36696
36617: LD_INT 53
36619: DOUBLE
36620: EQUAL
36621: IFTRUE 36625
36623: GO 36643
36625: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
36626: LD_ADDR_VAR 0 3
36630: PUSH
36631: LD_INT 23
36633: PUSH
36634: LD_INT 24
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: ST_TO_ADDR
36641: GO 36696
36643: LD_INT 46
36645: DOUBLE
36646: EQUAL
36647: IFTRUE 36651
36649: GO 36669
36651: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
36652: LD_ADDR_VAR 0 3
36656: PUSH
36657: LD_INT 23
36659: PUSH
36660: LD_INT 24
36662: PUSH
36663: EMPTY
36664: LIST
36665: LIST
36666: ST_TO_ADDR
36667: GO 36696
36669: LD_INT 47
36671: DOUBLE
36672: EQUAL
36673: IFTRUE 36677
36675: GO 36695
36677: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36678: LD_ADDR_VAR 0 3
36682: PUSH
36683: LD_INT 23
36685: PUSH
36686: LD_INT 24
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: ST_TO_ADDR
36693: GO 36696
36695: POP
// result := ( chassis in result ) ;
36696: LD_ADDR_VAR 0 3
36700: PUSH
36701: LD_VAR 0 1
36705: PUSH
36706: LD_VAR 0 3
36710: IN
36711: ST_TO_ADDR
// end ;
36712: LD_VAR 0 3
36716: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
36717: LD_INT 0
36719: PPUSH
36720: PPUSH
36721: PPUSH
36722: PPUSH
36723: PPUSH
36724: PPUSH
36725: PPUSH
// result := array ;
36726: LD_ADDR_VAR 0 5
36730: PUSH
36731: LD_VAR 0 1
36735: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
36736: LD_VAR 0 1
36740: NOT
36741: PUSH
36742: LD_VAR 0 2
36746: NOT
36747: OR
36748: PUSH
36749: LD_VAR 0 3
36753: NOT
36754: OR
36755: PUSH
36756: LD_VAR 0 2
36760: PUSH
36761: LD_VAR 0 1
36765: GREATER
36766: OR
36767: PUSH
36768: LD_VAR 0 3
36772: PUSH
36773: LD_VAR 0 1
36777: GREATER
36778: OR
36779: IFFALSE 36783
// exit ;
36781: GO 37079
// if direction then
36783: LD_VAR 0 4
36787: IFFALSE 36851
// begin d := 1 ;
36789: LD_ADDR_VAR 0 9
36793: PUSH
36794: LD_INT 1
36796: ST_TO_ADDR
// if i_from > i_to then
36797: LD_VAR 0 2
36801: PUSH
36802: LD_VAR 0 3
36806: GREATER
36807: IFFALSE 36833
// length := ( array - i_from ) + i_to else
36809: LD_ADDR_VAR 0 11
36813: PUSH
36814: LD_VAR 0 1
36818: PUSH
36819: LD_VAR 0 2
36823: MINUS
36824: PUSH
36825: LD_VAR 0 3
36829: PLUS
36830: ST_TO_ADDR
36831: GO 36849
// length := i_to - i_from ;
36833: LD_ADDR_VAR 0 11
36837: PUSH
36838: LD_VAR 0 3
36842: PUSH
36843: LD_VAR 0 2
36847: MINUS
36848: ST_TO_ADDR
// end else
36849: GO 36912
// begin d := - 1 ;
36851: LD_ADDR_VAR 0 9
36855: PUSH
36856: LD_INT 1
36858: NEG
36859: ST_TO_ADDR
// if i_from > i_to then
36860: LD_VAR 0 2
36864: PUSH
36865: LD_VAR 0 3
36869: GREATER
36870: IFFALSE 36890
// length := i_from - i_to else
36872: LD_ADDR_VAR 0 11
36876: PUSH
36877: LD_VAR 0 2
36881: PUSH
36882: LD_VAR 0 3
36886: MINUS
36887: ST_TO_ADDR
36888: GO 36912
// length := ( array - i_to ) + i_from ;
36890: LD_ADDR_VAR 0 11
36894: PUSH
36895: LD_VAR 0 1
36899: PUSH
36900: LD_VAR 0 3
36904: MINUS
36905: PUSH
36906: LD_VAR 0 2
36910: PLUS
36911: ST_TO_ADDR
// end ; if not length then
36912: LD_VAR 0 11
36916: NOT
36917: IFFALSE 36921
// exit ;
36919: GO 37079
// tmp := array ;
36921: LD_ADDR_VAR 0 10
36925: PUSH
36926: LD_VAR 0 1
36930: ST_TO_ADDR
// for i = 1 to length do
36931: LD_ADDR_VAR 0 6
36935: PUSH
36936: DOUBLE
36937: LD_INT 1
36939: DEC
36940: ST_TO_ADDR
36941: LD_VAR 0 11
36945: PUSH
36946: FOR_TO
36947: IFFALSE 37067
// begin for j = 1 to array do
36949: LD_ADDR_VAR 0 7
36953: PUSH
36954: DOUBLE
36955: LD_INT 1
36957: DEC
36958: ST_TO_ADDR
36959: LD_VAR 0 1
36963: PUSH
36964: FOR_TO
36965: IFFALSE 37053
// begin k := j + d ;
36967: LD_ADDR_VAR 0 8
36971: PUSH
36972: LD_VAR 0 7
36976: PUSH
36977: LD_VAR 0 9
36981: PLUS
36982: ST_TO_ADDR
// if k > array then
36983: LD_VAR 0 8
36987: PUSH
36988: LD_VAR 0 1
36992: GREATER
36993: IFFALSE 37003
// k := 1 ;
36995: LD_ADDR_VAR 0 8
36999: PUSH
37000: LD_INT 1
37002: ST_TO_ADDR
// if not k then
37003: LD_VAR 0 8
37007: NOT
37008: IFFALSE 37020
// k := array ;
37010: LD_ADDR_VAR 0 8
37014: PUSH
37015: LD_VAR 0 1
37019: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
37020: LD_ADDR_VAR 0 10
37024: PUSH
37025: LD_VAR 0 10
37029: PPUSH
37030: LD_VAR 0 8
37034: PPUSH
37035: LD_VAR 0 1
37039: PUSH
37040: LD_VAR 0 7
37044: ARRAY
37045: PPUSH
37046: CALL_OW 1
37050: ST_TO_ADDR
// end ;
37051: GO 36964
37053: POP
37054: POP
// array := tmp ;
37055: LD_ADDR_VAR 0 1
37059: PUSH
37060: LD_VAR 0 10
37064: ST_TO_ADDR
// end ;
37065: GO 36946
37067: POP
37068: POP
// result := array ;
37069: LD_ADDR_VAR 0 5
37073: PUSH
37074: LD_VAR 0 1
37078: ST_TO_ADDR
// end ;
37079: LD_VAR 0 5
37083: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
37084: LD_INT 0
37086: PPUSH
37087: PPUSH
// result := 0 ;
37088: LD_ADDR_VAR 0 3
37092: PUSH
37093: LD_INT 0
37095: ST_TO_ADDR
// if not array or not value in array then
37096: LD_VAR 0 1
37100: NOT
37101: PUSH
37102: LD_VAR 0 2
37106: PUSH
37107: LD_VAR 0 1
37111: IN
37112: NOT
37113: OR
37114: IFFALSE 37118
// exit ;
37116: GO 37172
// for i = 1 to array do
37118: LD_ADDR_VAR 0 4
37122: PUSH
37123: DOUBLE
37124: LD_INT 1
37126: DEC
37127: ST_TO_ADDR
37128: LD_VAR 0 1
37132: PUSH
37133: FOR_TO
37134: IFFALSE 37170
// if value = array [ i ] then
37136: LD_VAR 0 2
37140: PUSH
37141: LD_VAR 0 1
37145: PUSH
37146: LD_VAR 0 4
37150: ARRAY
37151: EQUAL
37152: IFFALSE 37168
// begin result := i ;
37154: LD_ADDR_VAR 0 3
37158: PUSH
37159: LD_VAR 0 4
37163: ST_TO_ADDR
// exit ;
37164: POP
37165: POP
37166: GO 37172
// end ;
37168: GO 37133
37170: POP
37171: POP
// end ;
37172: LD_VAR 0 3
37176: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
37177: LD_INT 0
37179: PPUSH
// vc_chassis := chassis ;
37180: LD_ADDR_OWVAR 37
37184: PUSH
37185: LD_VAR 0 1
37189: ST_TO_ADDR
// vc_engine := engine ;
37190: LD_ADDR_OWVAR 39
37194: PUSH
37195: LD_VAR 0 2
37199: ST_TO_ADDR
// vc_control := control ;
37200: LD_ADDR_OWVAR 38
37204: PUSH
37205: LD_VAR 0 3
37209: ST_TO_ADDR
// vc_weapon := weapon ;
37210: LD_ADDR_OWVAR 40
37214: PUSH
37215: LD_VAR 0 4
37219: ST_TO_ADDR
// vc_fuel_battery := fuel ;
37220: LD_ADDR_OWVAR 41
37224: PUSH
37225: LD_VAR 0 5
37229: ST_TO_ADDR
// end ;
37230: LD_VAR 0 6
37234: RET
// export function WantPlant ( unit ) ; var task ; begin
37235: LD_INT 0
37237: PPUSH
37238: PPUSH
// result := false ;
37239: LD_ADDR_VAR 0 2
37243: PUSH
37244: LD_INT 0
37246: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
37247: LD_ADDR_VAR 0 3
37251: PUSH
37252: LD_VAR 0 1
37256: PPUSH
37257: CALL_OW 437
37261: ST_TO_ADDR
// if task then
37262: LD_VAR 0 3
37266: IFFALSE 37294
// if task [ 1 ] [ 1 ] = p then
37268: LD_VAR 0 3
37272: PUSH
37273: LD_INT 1
37275: ARRAY
37276: PUSH
37277: LD_INT 1
37279: ARRAY
37280: PUSH
37281: LD_STRING p
37283: EQUAL
37284: IFFALSE 37294
// result := true ;
37286: LD_ADDR_VAR 0 2
37290: PUSH
37291: LD_INT 1
37293: ST_TO_ADDR
// end ;
37294: LD_VAR 0 2
37298: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
37299: LD_INT 0
37301: PPUSH
37302: PPUSH
37303: PPUSH
37304: PPUSH
// if pos < 1 then
37305: LD_VAR 0 2
37309: PUSH
37310: LD_INT 1
37312: LESS
37313: IFFALSE 37317
// exit ;
37315: GO 37620
// if pos = 1 then
37317: LD_VAR 0 2
37321: PUSH
37322: LD_INT 1
37324: EQUAL
37325: IFFALSE 37358
// result := Replace ( arr , pos [ 1 ] , value ) else
37327: LD_ADDR_VAR 0 4
37331: PUSH
37332: LD_VAR 0 1
37336: PPUSH
37337: LD_VAR 0 2
37341: PUSH
37342: LD_INT 1
37344: ARRAY
37345: PPUSH
37346: LD_VAR 0 3
37350: PPUSH
37351: CALL_OW 1
37355: ST_TO_ADDR
37356: GO 37620
// begin tmp := arr ;
37358: LD_ADDR_VAR 0 6
37362: PUSH
37363: LD_VAR 0 1
37367: ST_TO_ADDR
// s_arr := [ tmp ] ;
37368: LD_ADDR_VAR 0 7
37372: PUSH
37373: LD_VAR 0 6
37377: PUSH
37378: EMPTY
37379: LIST
37380: ST_TO_ADDR
// for i = 1 to pos - 1 do
37381: LD_ADDR_VAR 0 5
37385: PUSH
37386: DOUBLE
37387: LD_INT 1
37389: DEC
37390: ST_TO_ADDR
37391: LD_VAR 0 2
37395: PUSH
37396: LD_INT 1
37398: MINUS
37399: PUSH
37400: FOR_TO
37401: IFFALSE 37446
// begin tmp := tmp [ pos [ i ] ] ;
37403: LD_ADDR_VAR 0 6
37407: PUSH
37408: LD_VAR 0 6
37412: PUSH
37413: LD_VAR 0 2
37417: PUSH
37418: LD_VAR 0 5
37422: ARRAY
37423: ARRAY
37424: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
37425: LD_ADDR_VAR 0 7
37429: PUSH
37430: LD_VAR 0 7
37434: PUSH
37435: LD_VAR 0 6
37439: PUSH
37440: EMPTY
37441: LIST
37442: ADD
37443: ST_TO_ADDR
// end ;
37444: GO 37400
37446: POP
37447: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
37448: LD_ADDR_VAR 0 6
37452: PUSH
37453: LD_VAR 0 6
37457: PPUSH
37458: LD_VAR 0 2
37462: PUSH
37463: LD_VAR 0 2
37467: ARRAY
37468: PPUSH
37469: LD_VAR 0 3
37473: PPUSH
37474: CALL_OW 1
37478: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
37479: LD_ADDR_VAR 0 7
37483: PUSH
37484: LD_VAR 0 7
37488: PPUSH
37489: LD_VAR 0 7
37493: PPUSH
37494: LD_VAR 0 6
37498: PPUSH
37499: CALL_OW 1
37503: ST_TO_ADDR
// for i = s_arr downto 2 do
37504: LD_ADDR_VAR 0 5
37508: PUSH
37509: DOUBLE
37510: LD_VAR 0 7
37514: INC
37515: ST_TO_ADDR
37516: LD_INT 2
37518: PUSH
37519: FOR_DOWNTO
37520: IFFALSE 37604
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
37522: LD_ADDR_VAR 0 6
37526: PUSH
37527: LD_VAR 0 7
37531: PUSH
37532: LD_VAR 0 5
37536: PUSH
37537: LD_INT 1
37539: MINUS
37540: ARRAY
37541: PPUSH
37542: LD_VAR 0 2
37546: PUSH
37547: LD_VAR 0 5
37551: PUSH
37552: LD_INT 1
37554: MINUS
37555: ARRAY
37556: PPUSH
37557: LD_VAR 0 7
37561: PUSH
37562: LD_VAR 0 5
37566: ARRAY
37567: PPUSH
37568: CALL_OW 1
37572: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
37573: LD_ADDR_VAR 0 7
37577: PUSH
37578: LD_VAR 0 7
37582: PPUSH
37583: LD_VAR 0 5
37587: PUSH
37588: LD_INT 1
37590: MINUS
37591: PPUSH
37592: LD_VAR 0 6
37596: PPUSH
37597: CALL_OW 1
37601: ST_TO_ADDR
// end ;
37602: GO 37519
37604: POP
37605: POP
// result := s_arr [ 1 ] ;
37606: LD_ADDR_VAR 0 4
37610: PUSH
37611: LD_VAR 0 7
37615: PUSH
37616: LD_INT 1
37618: ARRAY
37619: ST_TO_ADDR
// end ; end ;
37620: LD_VAR 0 4
37624: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
37625: LD_INT 0
37627: PPUSH
37628: PPUSH
// if not list then
37629: LD_VAR 0 1
37633: NOT
37634: IFFALSE 37638
// exit ;
37636: GO 37729
// i := list [ pos1 ] ;
37638: LD_ADDR_VAR 0 5
37642: PUSH
37643: LD_VAR 0 1
37647: PUSH
37648: LD_VAR 0 2
37652: ARRAY
37653: ST_TO_ADDR
// if not i then
37654: LD_VAR 0 5
37658: NOT
37659: IFFALSE 37663
// exit ;
37661: GO 37729
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
37663: LD_ADDR_VAR 0 1
37667: PUSH
37668: LD_VAR 0 1
37672: PPUSH
37673: LD_VAR 0 2
37677: PPUSH
37678: LD_VAR 0 1
37682: PUSH
37683: LD_VAR 0 3
37687: ARRAY
37688: PPUSH
37689: CALL_OW 1
37693: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
37694: LD_ADDR_VAR 0 1
37698: PUSH
37699: LD_VAR 0 1
37703: PPUSH
37704: LD_VAR 0 3
37708: PPUSH
37709: LD_VAR 0 5
37713: PPUSH
37714: CALL_OW 1
37718: ST_TO_ADDR
// result := list ;
37719: LD_ADDR_VAR 0 4
37723: PUSH
37724: LD_VAR 0 1
37728: ST_TO_ADDR
// end ;
37729: LD_VAR 0 4
37733: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
37734: LD_INT 0
37736: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
37737: LD_ADDR_VAR 0 5
37741: PUSH
37742: LD_VAR 0 1
37746: PPUSH
37747: CALL_OW 250
37751: PPUSH
37752: LD_VAR 0 1
37756: PPUSH
37757: CALL_OW 251
37761: PPUSH
37762: LD_VAR 0 2
37766: PPUSH
37767: LD_VAR 0 3
37771: PPUSH
37772: LD_VAR 0 4
37776: PPUSH
37777: CALL 37787 0 5
37781: ST_TO_ADDR
// end ;
37782: LD_VAR 0 5
37786: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
37787: LD_INT 0
37789: PPUSH
37790: PPUSH
37791: PPUSH
37792: PPUSH
// if not list then
37793: LD_VAR 0 3
37797: NOT
37798: IFFALSE 37802
// exit ;
37800: GO 38190
// result := [ ] ;
37802: LD_ADDR_VAR 0 6
37806: PUSH
37807: EMPTY
37808: ST_TO_ADDR
// for i in list do
37809: LD_ADDR_VAR 0 7
37813: PUSH
37814: LD_VAR 0 3
37818: PUSH
37819: FOR_IN
37820: IFFALSE 38022
// begin tmp := GetDistUnitXY ( i , x , y ) ;
37822: LD_ADDR_VAR 0 9
37826: PUSH
37827: LD_VAR 0 7
37831: PPUSH
37832: LD_VAR 0 1
37836: PPUSH
37837: LD_VAR 0 2
37841: PPUSH
37842: CALL_OW 297
37846: ST_TO_ADDR
// if not result then
37847: LD_VAR 0 6
37851: NOT
37852: IFFALSE 37878
// result := [ [ i , tmp ] ] else
37854: LD_ADDR_VAR 0 6
37858: PUSH
37859: LD_VAR 0 7
37863: PUSH
37864: LD_VAR 0 9
37868: PUSH
37869: EMPTY
37870: LIST
37871: LIST
37872: PUSH
37873: EMPTY
37874: LIST
37875: ST_TO_ADDR
37876: GO 38020
// begin if result [ result ] [ 2 ] < tmp then
37878: LD_VAR 0 6
37882: PUSH
37883: LD_VAR 0 6
37887: ARRAY
37888: PUSH
37889: LD_INT 2
37891: ARRAY
37892: PUSH
37893: LD_VAR 0 9
37897: LESS
37898: IFFALSE 37940
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37900: LD_ADDR_VAR 0 6
37904: PUSH
37905: LD_VAR 0 6
37909: PPUSH
37910: LD_VAR 0 6
37914: PUSH
37915: LD_INT 1
37917: PLUS
37918: PPUSH
37919: LD_VAR 0 7
37923: PUSH
37924: LD_VAR 0 9
37928: PUSH
37929: EMPTY
37930: LIST
37931: LIST
37932: PPUSH
37933: CALL_OW 2
37937: ST_TO_ADDR
37938: GO 38020
// for j = 1 to result do
37940: LD_ADDR_VAR 0 8
37944: PUSH
37945: DOUBLE
37946: LD_INT 1
37948: DEC
37949: ST_TO_ADDR
37950: LD_VAR 0 6
37954: PUSH
37955: FOR_TO
37956: IFFALSE 38018
// begin if tmp < result [ j ] [ 2 ] then
37958: LD_VAR 0 9
37962: PUSH
37963: LD_VAR 0 6
37967: PUSH
37968: LD_VAR 0 8
37972: ARRAY
37973: PUSH
37974: LD_INT 2
37976: ARRAY
37977: LESS
37978: IFFALSE 38016
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37980: LD_ADDR_VAR 0 6
37984: PUSH
37985: LD_VAR 0 6
37989: PPUSH
37990: LD_VAR 0 8
37994: PPUSH
37995: LD_VAR 0 7
37999: PUSH
38000: LD_VAR 0 9
38004: PUSH
38005: EMPTY
38006: LIST
38007: LIST
38008: PPUSH
38009: CALL_OW 2
38013: ST_TO_ADDR
// break ;
38014: GO 38018
// end ; end ;
38016: GO 37955
38018: POP
38019: POP
// end ; end ;
38020: GO 37819
38022: POP
38023: POP
// if result and not asc then
38024: LD_VAR 0 6
38028: PUSH
38029: LD_VAR 0 4
38033: NOT
38034: AND
38035: IFFALSE 38110
// begin tmp := result ;
38037: LD_ADDR_VAR 0 9
38041: PUSH
38042: LD_VAR 0 6
38046: ST_TO_ADDR
// for i = tmp downto 1 do
38047: LD_ADDR_VAR 0 7
38051: PUSH
38052: DOUBLE
38053: LD_VAR 0 9
38057: INC
38058: ST_TO_ADDR
38059: LD_INT 1
38061: PUSH
38062: FOR_DOWNTO
38063: IFFALSE 38108
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
38065: LD_ADDR_VAR 0 6
38069: PUSH
38070: LD_VAR 0 6
38074: PPUSH
38075: LD_VAR 0 9
38079: PUSH
38080: LD_VAR 0 7
38084: MINUS
38085: PUSH
38086: LD_INT 1
38088: PLUS
38089: PPUSH
38090: LD_VAR 0 9
38094: PUSH
38095: LD_VAR 0 7
38099: ARRAY
38100: PPUSH
38101: CALL_OW 1
38105: ST_TO_ADDR
38106: GO 38062
38108: POP
38109: POP
// end ; tmp := [ ] ;
38110: LD_ADDR_VAR 0 9
38114: PUSH
38115: EMPTY
38116: ST_TO_ADDR
// if mode then
38117: LD_VAR 0 5
38121: IFFALSE 38190
// begin for i = 1 to result do
38123: LD_ADDR_VAR 0 7
38127: PUSH
38128: DOUBLE
38129: LD_INT 1
38131: DEC
38132: ST_TO_ADDR
38133: LD_VAR 0 6
38137: PUSH
38138: FOR_TO
38139: IFFALSE 38178
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
38141: LD_ADDR_VAR 0 9
38145: PUSH
38146: LD_VAR 0 9
38150: PPUSH
38151: LD_VAR 0 7
38155: PPUSH
38156: LD_VAR 0 6
38160: PUSH
38161: LD_VAR 0 7
38165: ARRAY
38166: PUSH
38167: LD_INT 1
38169: ARRAY
38170: PPUSH
38171: CALL_OW 1
38175: ST_TO_ADDR
38176: GO 38138
38178: POP
38179: POP
// result := tmp ;
38180: LD_ADDR_VAR 0 6
38184: PUSH
38185: LD_VAR 0 9
38189: ST_TO_ADDR
// end ; end ;
38190: LD_VAR 0 6
38194: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
38195: LD_INT 0
38197: PPUSH
38198: PPUSH
38199: PPUSH
38200: PPUSH
38201: PPUSH
38202: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
38203: LD_ADDR_VAR 0 5
38207: PUSH
38208: LD_INT 0
38210: PUSH
38211: LD_INT 0
38213: PUSH
38214: LD_INT 0
38216: PUSH
38217: EMPTY
38218: PUSH
38219: EMPTY
38220: LIST
38221: LIST
38222: LIST
38223: LIST
38224: ST_TO_ADDR
// if not x or not y then
38225: LD_VAR 0 2
38229: NOT
38230: PUSH
38231: LD_VAR 0 3
38235: NOT
38236: OR
38237: IFFALSE 38241
// exit ;
38239: GO 39891
// if not range then
38241: LD_VAR 0 4
38245: NOT
38246: IFFALSE 38256
// range := 10 ;
38248: LD_ADDR_VAR 0 4
38252: PUSH
38253: LD_INT 10
38255: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38256: LD_ADDR_VAR 0 8
38260: PUSH
38261: LD_INT 81
38263: PUSH
38264: LD_VAR 0 1
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: PUSH
38273: LD_INT 92
38275: PUSH
38276: LD_VAR 0 2
38280: PUSH
38281: LD_VAR 0 3
38285: PUSH
38286: LD_VAR 0 4
38290: PUSH
38291: EMPTY
38292: LIST
38293: LIST
38294: LIST
38295: LIST
38296: PUSH
38297: LD_INT 3
38299: PUSH
38300: LD_INT 21
38302: PUSH
38303: LD_INT 3
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: PUSH
38310: EMPTY
38311: LIST
38312: LIST
38313: PUSH
38314: EMPTY
38315: LIST
38316: LIST
38317: LIST
38318: PPUSH
38319: CALL_OW 69
38323: ST_TO_ADDR
// if not tmp then
38324: LD_VAR 0 8
38328: NOT
38329: IFFALSE 38333
// exit ;
38331: GO 39891
// for i in tmp do
38333: LD_ADDR_VAR 0 6
38337: PUSH
38338: LD_VAR 0 8
38342: PUSH
38343: FOR_IN
38344: IFFALSE 39866
// begin points := [ 0 , 0 , 0 ] ;
38346: LD_ADDR_VAR 0 9
38350: PUSH
38351: LD_INT 0
38353: PUSH
38354: LD_INT 0
38356: PUSH
38357: LD_INT 0
38359: PUSH
38360: EMPTY
38361: LIST
38362: LIST
38363: LIST
38364: ST_TO_ADDR
// bpoints := 1 ;
38365: LD_ADDR_VAR 0 10
38369: PUSH
38370: LD_INT 1
38372: ST_TO_ADDR
// case GetType ( i ) of unit_human :
38373: LD_VAR 0 6
38377: PPUSH
38378: CALL_OW 247
38382: PUSH
38383: LD_INT 1
38385: DOUBLE
38386: EQUAL
38387: IFTRUE 38391
38389: GO 38969
38391: POP
// begin if GetClass ( i ) = 1 then
38392: LD_VAR 0 6
38396: PPUSH
38397: CALL_OW 257
38401: PUSH
38402: LD_INT 1
38404: EQUAL
38405: IFFALSE 38426
// points := [ 10 , 5 , 3 ] ;
38407: LD_ADDR_VAR 0 9
38411: PUSH
38412: LD_INT 10
38414: PUSH
38415: LD_INT 5
38417: PUSH
38418: LD_INT 3
38420: PUSH
38421: EMPTY
38422: LIST
38423: LIST
38424: LIST
38425: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
38426: LD_VAR 0 6
38430: PPUSH
38431: CALL_OW 257
38435: PUSH
38436: LD_INT 2
38438: PUSH
38439: LD_INT 3
38441: PUSH
38442: LD_INT 4
38444: PUSH
38445: EMPTY
38446: LIST
38447: LIST
38448: LIST
38449: IN
38450: IFFALSE 38471
// points := [ 3 , 2 , 1 ] ;
38452: LD_ADDR_VAR 0 9
38456: PUSH
38457: LD_INT 3
38459: PUSH
38460: LD_INT 2
38462: PUSH
38463: LD_INT 1
38465: PUSH
38466: EMPTY
38467: LIST
38468: LIST
38469: LIST
38470: ST_TO_ADDR
// if GetClass ( i ) = 5 then
38471: LD_VAR 0 6
38475: PPUSH
38476: CALL_OW 257
38480: PUSH
38481: LD_INT 5
38483: EQUAL
38484: IFFALSE 38505
// points := [ 130 , 5 , 2 ] ;
38486: LD_ADDR_VAR 0 9
38490: PUSH
38491: LD_INT 130
38493: PUSH
38494: LD_INT 5
38496: PUSH
38497: LD_INT 2
38499: PUSH
38500: EMPTY
38501: LIST
38502: LIST
38503: LIST
38504: ST_TO_ADDR
// if GetClass ( i ) = 8 then
38505: LD_VAR 0 6
38509: PPUSH
38510: CALL_OW 257
38514: PUSH
38515: LD_INT 8
38517: EQUAL
38518: IFFALSE 38539
// points := [ 35 , 35 , 30 ] ;
38520: LD_ADDR_VAR 0 9
38524: PUSH
38525: LD_INT 35
38527: PUSH
38528: LD_INT 35
38530: PUSH
38531: LD_INT 30
38533: PUSH
38534: EMPTY
38535: LIST
38536: LIST
38537: LIST
38538: ST_TO_ADDR
// if GetClass ( i ) = 9 then
38539: LD_VAR 0 6
38543: PPUSH
38544: CALL_OW 257
38548: PUSH
38549: LD_INT 9
38551: EQUAL
38552: IFFALSE 38573
// points := [ 20 , 55 , 40 ] ;
38554: LD_ADDR_VAR 0 9
38558: PUSH
38559: LD_INT 20
38561: PUSH
38562: LD_INT 55
38564: PUSH
38565: LD_INT 40
38567: PUSH
38568: EMPTY
38569: LIST
38570: LIST
38571: LIST
38572: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
38573: LD_VAR 0 6
38577: PPUSH
38578: CALL_OW 257
38582: PUSH
38583: LD_INT 12
38585: PUSH
38586: LD_INT 16
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: IN
38593: IFFALSE 38614
// points := [ 5 , 3 , 2 ] ;
38595: LD_ADDR_VAR 0 9
38599: PUSH
38600: LD_INT 5
38602: PUSH
38603: LD_INT 3
38605: PUSH
38606: LD_INT 2
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: LIST
38613: ST_TO_ADDR
// if GetClass ( i ) = 17 then
38614: LD_VAR 0 6
38618: PPUSH
38619: CALL_OW 257
38623: PUSH
38624: LD_INT 17
38626: EQUAL
38627: IFFALSE 38648
// points := [ 100 , 50 , 75 ] ;
38629: LD_ADDR_VAR 0 9
38633: PUSH
38634: LD_INT 100
38636: PUSH
38637: LD_INT 50
38639: PUSH
38640: LD_INT 75
38642: PUSH
38643: EMPTY
38644: LIST
38645: LIST
38646: LIST
38647: ST_TO_ADDR
// if GetClass ( i ) = 15 then
38648: LD_VAR 0 6
38652: PPUSH
38653: CALL_OW 257
38657: PUSH
38658: LD_INT 15
38660: EQUAL
38661: IFFALSE 38682
// points := [ 10 , 5 , 3 ] ;
38663: LD_ADDR_VAR 0 9
38667: PUSH
38668: LD_INT 10
38670: PUSH
38671: LD_INT 5
38673: PUSH
38674: LD_INT 3
38676: PUSH
38677: EMPTY
38678: LIST
38679: LIST
38680: LIST
38681: ST_TO_ADDR
// if GetClass ( i ) = 14 then
38682: LD_VAR 0 6
38686: PPUSH
38687: CALL_OW 257
38691: PUSH
38692: LD_INT 14
38694: EQUAL
38695: IFFALSE 38716
// points := [ 10 , 0 , 0 ] ;
38697: LD_ADDR_VAR 0 9
38701: PUSH
38702: LD_INT 10
38704: PUSH
38705: LD_INT 0
38707: PUSH
38708: LD_INT 0
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: LIST
38715: ST_TO_ADDR
// if GetClass ( i ) = 11 then
38716: LD_VAR 0 6
38720: PPUSH
38721: CALL_OW 257
38725: PUSH
38726: LD_INT 11
38728: EQUAL
38729: IFFALSE 38750
// points := [ 30 , 10 , 5 ] ;
38731: LD_ADDR_VAR 0 9
38735: PUSH
38736: LD_INT 30
38738: PUSH
38739: LD_INT 10
38741: PUSH
38742: LD_INT 5
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: LIST
38749: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
38750: LD_VAR 0 1
38754: PPUSH
38755: LD_INT 5
38757: PPUSH
38758: CALL_OW 321
38762: PUSH
38763: LD_INT 2
38765: EQUAL
38766: IFFALSE 38783
// bpoints := bpoints * 1.8 ;
38768: LD_ADDR_VAR 0 10
38772: PUSH
38773: LD_VAR 0 10
38777: PUSH
38778: LD_REAL  1.80000000000000E+0000
38781: MUL
38782: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
38783: LD_VAR 0 6
38787: PPUSH
38788: CALL_OW 257
38792: PUSH
38793: LD_INT 1
38795: PUSH
38796: LD_INT 2
38798: PUSH
38799: LD_INT 3
38801: PUSH
38802: LD_INT 4
38804: PUSH
38805: EMPTY
38806: LIST
38807: LIST
38808: LIST
38809: LIST
38810: IN
38811: PUSH
38812: LD_VAR 0 1
38816: PPUSH
38817: LD_INT 51
38819: PPUSH
38820: CALL_OW 321
38824: PUSH
38825: LD_INT 2
38827: EQUAL
38828: AND
38829: IFFALSE 38846
// bpoints := bpoints * 1.2 ;
38831: LD_ADDR_VAR 0 10
38835: PUSH
38836: LD_VAR 0 10
38840: PUSH
38841: LD_REAL  1.20000000000000E+0000
38844: MUL
38845: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
38846: LD_VAR 0 6
38850: PPUSH
38851: CALL_OW 257
38855: PUSH
38856: LD_INT 5
38858: PUSH
38859: LD_INT 7
38861: PUSH
38862: LD_INT 9
38864: PUSH
38865: EMPTY
38866: LIST
38867: LIST
38868: LIST
38869: IN
38870: PUSH
38871: LD_VAR 0 1
38875: PPUSH
38876: LD_INT 52
38878: PPUSH
38879: CALL_OW 321
38883: PUSH
38884: LD_INT 2
38886: EQUAL
38887: AND
38888: IFFALSE 38905
// bpoints := bpoints * 1.5 ;
38890: LD_ADDR_VAR 0 10
38894: PUSH
38895: LD_VAR 0 10
38899: PUSH
38900: LD_REAL  1.50000000000000E+0000
38903: MUL
38904: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38905: LD_VAR 0 1
38909: PPUSH
38910: LD_INT 66
38912: PPUSH
38913: CALL_OW 321
38917: PUSH
38918: LD_INT 2
38920: EQUAL
38921: IFFALSE 38938
// bpoints := bpoints * 1.1 ;
38923: LD_ADDR_VAR 0 10
38927: PUSH
38928: LD_VAR 0 10
38932: PUSH
38933: LD_REAL  1.10000000000000E+0000
38936: MUL
38937: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38938: LD_ADDR_VAR 0 10
38942: PUSH
38943: LD_VAR 0 10
38947: PUSH
38948: LD_VAR 0 6
38952: PPUSH
38953: LD_INT 1
38955: PPUSH
38956: CALL_OW 259
38960: PUSH
38961: LD_REAL  1.15000000000000E+0000
38964: MUL
38965: MUL
38966: ST_TO_ADDR
// end ; unit_vehicle :
38967: GO 39795
38969: LD_INT 2
38971: DOUBLE
38972: EQUAL
38973: IFTRUE 38977
38975: GO 39783
38977: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38978: LD_VAR 0 6
38982: PPUSH
38983: CALL_OW 264
38987: PUSH
38988: LD_INT 2
38990: PUSH
38991: LD_INT 42
38993: PUSH
38994: LD_INT 24
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: LIST
39001: IN
39002: IFFALSE 39023
// points := [ 25 , 5 , 3 ] ;
39004: LD_ADDR_VAR 0 9
39008: PUSH
39009: LD_INT 25
39011: PUSH
39012: LD_INT 5
39014: PUSH
39015: LD_INT 3
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: LIST
39022: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
39023: LD_VAR 0 6
39027: PPUSH
39028: CALL_OW 264
39032: PUSH
39033: LD_INT 4
39035: PUSH
39036: LD_INT 43
39038: PUSH
39039: LD_INT 25
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: LIST
39046: IN
39047: IFFALSE 39068
// points := [ 40 , 15 , 5 ] ;
39049: LD_ADDR_VAR 0 9
39053: PUSH
39054: LD_INT 40
39056: PUSH
39057: LD_INT 15
39059: PUSH
39060: LD_INT 5
39062: PUSH
39063: EMPTY
39064: LIST
39065: LIST
39066: LIST
39067: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
39068: LD_VAR 0 6
39072: PPUSH
39073: CALL_OW 264
39077: PUSH
39078: LD_INT 3
39080: PUSH
39081: LD_INT 23
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: IN
39088: IFFALSE 39109
// points := [ 7 , 25 , 8 ] ;
39090: LD_ADDR_VAR 0 9
39094: PUSH
39095: LD_INT 7
39097: PUSH
39098: LD_INT 25
39100: PUSH
39101: LD_INT 8
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: LIST
39108: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
39109: LD_VAR 0 6
39113: PPUSH
39114: CALL_OW 264
39118: PUSH
39119: LD_INT 5
39121: PUSH
39122: LD_INT 27
39124: PUSH
39125: LD_INT 44
39127: PUSH
39128: EMPTY
39129: LIST
39130: LIST
39131: LIST
39132: IN
39133: IFFALSE 39154
// points := [ 14 , 50 , 16 ] ;
39135: LD_ADDR_VAR 0 9
39139: PUSH
39140: LD_INT 14
39142: PUSH
39143: LD_INT 50
39145: PUSH
39146: LD_INT 16
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: LIST
39153: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
39154: LD_VAR 0 6
39158: PPUSH
39159: CALL_OW 264
39163: PUSH
39164: LD_INT 6
39166: PUSH
39167: LD_INT 46
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: IN
39174: IFFALSE 39195
// points := [ 32 , 120 , 70 ] ;
39176: LD_ADDR_VAR 0 9
39180: PUSH
39181: LD_INT 32
39183: PUSH
39184: LD_INT 120
39186: PUSH
39187: LD_INT 70
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: LIST
39194: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
39195: LD_VAR 0 6
39199: PPUSH
39200: CALL_OW 264
39204: PUSH
39205: LD_INT 7
39207: PUSH
39208: LD_INT 28
39210: PUSH
39211: LD_INT 45
39213: PUSH
39214: LD_INT 92
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: LIST
39221: LIST
39222: IN
39223: IFFALSE 39244
// points := [ 35 , 20 , 45 ] ;
39225: LD_ADDR_VAR 0 9
39229: PUSH
39230: LD_INT 35
39232: PUSH
39233: LD_INT 20
39235: PUSH
39236: LD_INT 45
39238: PUSH
39239: EMPTY
39240: LIST
39241: LIST
39242: LIST
39243: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
39244: LD_VAR 0 6
39248: PPUSH
39249: CALL_OW 264
39253: PUSH
39254: LD_INT 47
39256: PUSH
39257: EMPTY
39258: LIST
39259: IN
39260: IFFALSE 39281
// points := [ 67 , 45 , 75 ] ;
39262: LD_ADDR_VAR 0 9
39266: PUSH
39267: LD_INT 67
39269: PUSH
39270: LD_INT 45
39272: PUSH
39273: LD_INT 75
39275: PUSH
39276: EMPTY
39277: LIST
39278: LIST
39279: LIST
39280: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
39281: LD_VAR 0 6
39285: PPUSH
39286: CALL_OW 264
39290: PUSH
39291: LD_INT 26
39293: PUSH
39294: EMPTY
39295: LIST
39296: IN
39297: IFFALSE 39318
// points := [ 120 , 30 , 80 ] ;
39299: LD_ADDR_VAR 0 9
39303: PUSH
39304: LD_INT 120
39306: PUSH
39307: LD_INT 30
39309: PUSH
39310: LD_INT 80
39312: PUSH
39313: EMPTY
39314: LIST
39315: LIST
39316: LIST
39317: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
39318: LD_VAR 0 6
39322: PPUSH
39323: CALL_OW 264
39327: PUSH
39328: LD_INT 22
39330: PUSH
39331: EMPTY
39332: LIST
39333: IN
39334: IFFALSE 39355
// points := [ 40 , 1 , 1 ] ;
39336: LD_ADDR_VAR 0 9
39340: PUSH
39341: LD_INT 40
39343: PUSH
39344: LD_INT 1
39346: PUSH
39347: LD_INT 1
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: LIST
39354: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
39355: LD_VAR 0 6
39359: PPUSH
39360: CALL_OW 264
39364: PUSH
39365: LD_INT 29
39367: PUSH
39368: EMPTY
39369: LIST
39370: IN
39371: IFFALSE 39392
// points := [ 70 , 200 , 400 ] ;
39373: LD_ADDR_VAR 0 9
39377: PUSH
39378: LD_INT 70
39380: PUSH
39381: LD_INT 200
39383: PUSH
39384: LD_INT 400
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: LIST
39391: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
39392: LD_VAR 0 6
39396: PPUSH
39397: CALL_OW 264
39401: PUSH
39402: LD_INT 14
39404: PUSH
39405: LD_INT 53
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: IN
39412: IFFALSE 39433
// points := [ 40 , 10 , 20 ] ;
39414: LD_ADDR_VAR 0 9
39418: PUSH
39419: LD_INT 40
39421: PUSH
39422: LD_INT 10
39424: PUSH
39425: LD_INT 20
39427: PUSH
39428: EMPTY
39429: LIST
39430: LIST
39431: LIST
39432: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
39433: LD_VAR 0 6
39437: PPUSH
39438: CALL_OW 264
39442: PUSH
39443: LD_INT 9
39445: PUSH
39446: EMPTY
39447: LIST
39448: IN
39449: IFFALSE 39470
// points := [ 5 , 70 , 20 ] ;
39451: LD_ADDR_VAR 0 9
39455: PUSH
39456: LD_INT 5
39458: PUSH
39459: LD_INT 70
39461: PUSH
39462: LD_INT 20
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: LIST
39469: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
39470: LD_VAR 0 6
39474: PPUSH
39475: CALL_OW 264
39479: PUSH
39480: LD_INT 10
39482: PUSH
39483: EMPTY
39484: LIST
39485: IN
39486: IFFALSE 39507
// points := [ 35 , 110 , 70 ] ;
39488: LD_ADDR_VAR 0 9
39492: PUSH
39493: LD_INT 35
39495: PUSH
39496: LD_INT 110
39498: PUSH
39499: LD_INT 70
39501: PUSH
39502: EMPTY
39503: LIST
39504: LIST
39505: LIST
39506: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
39507: LD_VAR 0 6
39511: PPUSH
39512: CALL_OW 265
39516: PUSH
39517: LD_INT 25
39519: EQUAL
39520: IFFALSE 39541
// points := [ 80 , 65 , 100 ] ;
39522: LD_ADDR_VAR 0 9
39526: PUSH
39527: LD_INT 80
39529: PUSH
39530: LD_INT 65
39532: PUSH
39533: LD_INT 100
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: LIST
39540: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
39541: LD_VAR 0 6
39545: PPUSH
39546: CALL_OW 263
39550: PUSH
39551: LD_INT 1
39553: EQUAL
39554: IFFALSE 39589
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
39556: LD_ADDR_VAR 0 10
39560: PUSH
39561: LD_VAR 0 10
39565: PUSH
39566: LD_VAR 0 6
39570: PPUSH
39571: CALL_OW 311
39575: PPUSH
39576: LD_INT 3
39578: PPUSH
39579: CALL_OW 259
39583: PUSH
39584: LD_INT 4
39586: MUL
39587: MUL
39588: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
39589: LD_VAR 0 6
39593: PPUSH
39594: CALL_OW 263
39598: PUSH
39599: LD_INT 2
39601: EQUAL
39602: IFFALSE 39653
// begin j := IsControledBy ( i ) ;
39604: LD_ADDR_VAR 0 7
39608: PUSH
39609: LD_VAR 0 6
39613: PPUSH
39614: CALL_OW 312
39618: ST_TO_ADDR
// if j then
39619: LD_VAR 0 7
39623: IFFALSE 39653
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
39625: LD_ADDR_VAR 0 10
39629: PUSH
39630: LD_VAR 0 10
39634: PUSH
39635: LD_VAR 0 7
39639: PPUSH
39640: LD_INT 3
39642: PPUSH
39643: CALL_OW 259
39647: PUSH
39648: LD_INT 3
39650: MUL
39651: MUL
39652: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
39653: LD_VAR 0 6
39657: PPUSH
39658: CALL_OW 264
39662: PUSH
39663: LD_INT 5
39665: PUSH
39666: LD_INT 6
39668: PUSH
39669: LD_INT 46
39671: PUSH
39672: LD_INT 44
39674: PUSH
39675: LD_INT 47
39677: PUSH
39678: LD_INT 45
39680: PUSH
39681: LD_INT 28
39683: PUSH
39684: LD_INT 7
39686: PUSH
39687: LD_INT 27
39689: PUSH
39690: LD_INT 29
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: LIST
39697: LIST
39698: LIST
39699: LIST
39700: LIST
39701: LIST
39702: LIST
39703: LIST
39704: IN
39705: PUSH
39706: LD_VAR 0 1
39710: PPUSH
39711: LD_INT 52
39713: PPUSH
39714: CALL_OW 321
39718: PUSH
39719: LD_INT 2
39721: EQUAL
39722: AND
39723: IFFALSE 39740
// bpoints := bpoints * 1.2 ;
39725: LD_ADDR_VAR 0 10
39729: PUSH
39730: LD_VAR 0 10
39734: PUSH
39735: LD_REAL  1.20000000000000E+0000
39738: MUL
39739: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
39740: LD_VAR 0 6
39744: PPUSH
39745: CALL_OW 264
39749: PUSH
39750: LD_INT 6
39752: PUSH
39753: LD_INT 46
39755: PUSH
39756: LD_INT 47
39758: PUSH
39759: EMPTY
39760: LIST
39761: LIST
39762: LIST
39763: IN
39764: IFFALSE 39781
// bpoints := bpoints * 1.2 ;
39766: LD_ADDR_VAR 0 10
39770: PUSH
39771: LD_VAR 0 10
39775: PUSH
39776: LD_REAL  1.20000000000000E+0000
39779: MUL
39780: ST_TO_ADDR
// end ; unit_building :
39781: GO 39795
39783: LD_INT 3
39785: DOUBLE
39786: EQUAL
39787: IFTRUE 39791
39789: GO 39794
39791: POP
// ; end ;
39792: GO 39795
39794: POP
// for j = 1 to 3 do
39795: LD_ADDR_VAR 0 7
39799: PUSH
39800: DOUBLE
39801: LD_INT 1
39803: DEC
39804: ST_TO_ADDR
39805: LD_INT 3
39807: PUSH
39808: FOR_TO
39809: IFFALSE 39862
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
39811: LD_ADDR_VAR 0 5
39815: PUSH
39816: LD_VAR 0 5
39820: PPUSH
39821: LD_VAR 0 7
39825: PPUSH
39826: LD_VAR 0 5
39830: PUSH
39831: LD_VAR 0 7
39835: ARRAY
39836: PUSH
39837: LD_VAR 0 9
39841: PUSH
39842: LD_VAR 0 7
39846: ARRAY
39847: PUSH
39848: LD_VAR 0 10
39852: MUL
39853: PLUS
39854: PPUSH
39855: CALL_OW 1
39859: ST_TO_ADDR
39860: GO 39808
39862: POP
39863: POP
// end ;
39864: GO 38343
39866: POP
39867: POP
// result := Replace ( result , 4 , tmp ) ;
39868: LD_ADDR_VAR 0 5
39872: PUSH
39873: LD_VAR 0 5
39877: PPUSH
39878: LD_INT 4
39880: PPUSH
39881: LD_VAR 0 8
39885: PPUSH
39886: CALL_OW 1
39890: ST_TO_ADDR
// end ;
39891: LD_VAR 0 5
39895: RET
// export function DangerAtRange ( unit , range ) ; begin
39896: LD_INT 0
39898: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39899: LD_ADDR_VAR 0 3
39903: PUSH
39904: LD_VAR 0 1
39908: PPUSH
39909: CALL_OW 255
39913: PPUSH
39914: LD_VAR 0 1
39918: PPUSH
39919: CALL_OW 250
39923: PPUSH
39924: LD_VAR 0 1
39928: PPUSH
39929: CALL_OW 251
39933: PPUSH
39934: LD_VAR 0 2
39938: PPUSH
39939: CALL 38195 0 4
39943: ST_TO_ADDR
// end ;
39944: LD_VAR 0 3
39948: RET
// export function DangerInArea ( side , area ) ; begin
39949: LD_INT 0
39951: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39952: LD_ADDR_VAR 0 3
39956: PUSH
39957: LD_VAR 0 2
39961: PPUSH
39962: LD_INT 81
39964: PUSH
39965: LD_VAR 0 1
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: PPUSH
39974: CALL_OW 70
39978: ST_TO_ADDR
// end ;
39979: LD_VAR 0 3
39983: RET
// export function IsExtension ( b ) ; begin
39984: LD_INT 0
39986: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
39987: LD_ADDR_VAR 0 2
39991: PUSH
39992: LD_VAR 0 1
39996: PUSH
39997: LD_INT 23
39999: PUSH
40000: LD_INT 20
40002: PUSH
40003: LD_INT 22
40005: PUSH
40006: LD_INT 17
40008: PUSH
40009: LD_INT 24
40011: PUSH
40012: LD_INT 21
40014: PUSH
40015: LD_INT 19
40017: PUSH
40018: LD_INT 16
40020: PUSH
40021: LD_INT 25
40023: PUSH
40024: LD_INT 18
40026: PUSH
40027: EMPTY
40028: LIST
40029: LIST
40030: LIST
40031: LIST
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: LIST
40037: LIST
40038: IN
40039: ST_TO_ADDR
// end ;
40040: LD_VAR 0 2
40044: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
40045: LD_INT 0
40047: PPUSH
40048: PPUSH
40049: PPUSH
// result := [ ] ;
40050: LD_ADDR_VAR 0 4
40054: PUSH
40055: EMPTY
40056: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
40057: LD_ADDR_VAR 0 5
40061: PUSH
40062: LD_VAR 0 2
40066: PPUSH
40067: LD_INT 21
40069: PUSH
40070: LD_INT 3
40072: PUSH
40073: EMPTY
40074: LIST
40075: LIST
40076: PPUSH
40077: CALL_OW 70
40081: ST_TO_ADDR
// if not tmp then
40082: LD_VAR 0 5
40086: NOT
40087: IFFALSE 40091
// exit ;
40089: GO 40155
// if checkLink then
40091: LD_VAR 0 3
40095: IFFALSE 40145
// begin for i in tmp do
40097: LD_ADDR_VAR 0 6
40101: PUSH
40102: LD_VAR 0 5
40106: PUSH
40107: FOR_IN
40108: IFFALSE 40143
// if GetBase ( i ) <> base then
40110: LD_VAR 0 6
40114: PPUSH
40115: CALL_OW 274
40119: PUSH
40120: LD_VAR 0 1
40124: NONEQUAL
40125: IFFALSE 40141
// ComLinkToBase ( base , i ) ;
40127: LD_VAR 0 1
40131: PPUSH
40132: LD_VAR 0 6
40136: PPUSH
40137: CALL_OW 169
40141: GO 40107
40143: POP
40144: POP
// end ; result := tmp ;
40145: LD_ADDR_VAR 0 4
40149: PUSH
40150: LD_VAR 0 5
40154: ST_TO_ADDR
// end ;
40155: LD_VAR 0 4
40159: RET
// export function ComComplete ( units , b ) ; var i ; begin
40160: LD_INT 0
40162: PPUSH
40163: PPUSH
// if not units then
40164: LD_VAR 0 1
40168: NOT
40169: IFFALSE 40173
// exit ;
40171: GO 40263
// for i in units do
40173: LD_ADDR_VAR 0 4
40177: PUSH
40178: LD_VAR 0 1
40182: PUSH
40183: FOR_IN
40184: IFFALSE 40261
// if BuildingStatus ( b ) = bs_build then
40186: LD_VAR 0 2
40190: PPUSH
40191: CALL_OW 461
40195: PUSH
40196: LD_INT 1
40198: EQUAL
40199: IFFALSE 40259
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
40201: LD_VAR 0 4
40205: PPUSH
40206: LD_STRING h
40208: PUSH
40209: LD_VAR 0 2
40213: PPUSH
40214: CALL_OW 250
40218: PUSH
40219: LD_VAR 0 2
40223: PPUSH
40224: CALL_OW 251
40228: PUSH
40229: LD_VAR 0 2
40233: PUSH
40234: LD_INT 0
40236: PUSH
40237: LD_INT 0
40239: PUSH
40240: LD_INT 0
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: PUSH
40252: EMPTY
40253: LIST
40254: PPUSH
40255: CALL_OW 446
40259: GO 40183
40261: POP
40262: POP
// end ;
40263: LD_VAR 0 3
40267: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
40268: LD_INT 0
40270: PPUSH
40271: PPUSH
40272: PPUSH
40273: PPUSH
40274: PPUSH
40275: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
40276: LD_VAR 0 1
40280: NOT
40281: PUSH
40282: LD_VAR 0 1
40286: PPUSH
40287: CALL_OW 263
40291: PUSH
40292: LD_INT 2
40294: NONEQUAL
40295: OR
40296: IFFALSE 40300
// exit ;
40298: GO 40616
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
40300: LD_ADDR_VAR 0 6
40304: PUSH
40305: LD_INT 22
40307: PUSH
40308: LD_VAR 0 1
40312: PPUSH
40313: CALL_OW 255
40317: PUSH
40318: EMPTY
40319: LIST
40320: LIST
40321: PUSH
40322: LD_INT 2
40324: PUSH
40325: LD_INT 30
40327: PUSH
40328: LD_INT 36
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 34
40337: PUSH
40338: LD_INT 31
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: LIST
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: PPUSH
40354: CALL_OW 69
40358: ST_TO_ADDR
// if not tmp then
40359: LD_VAR 0 6
40363: NOT
40364: IFFALSE 40368
// exit ;
40366: GO 40616
// result := [ ] ;
40368: LD_ADDR_VAR 0 2
40372: PUSH
40373: EMPTY
40374: ST_TO_ADDR
// for i in tmp do
40375: LD_ADDR_VAR 0 3
40379: PUSH
40380: LD_VAR 0 6
40384: PUSH
40385: FOR_IN
40386: IFFALSE 40457
// begin t := UnitsInside ( i ) ;
40388: LD_ADDR_VAR 0 4
40392: PUSH
40393: LD_VAR 0 3
40397: PPUSH
40398: CALL_OW 313
40402: ST_TO_ADDR
// if t then
40403: LD_VAR 0 4
40407: IFFALSE 40455
// for j in t do
40409: LD_ADDR_VAR 0 7
40413: PUSH
40414: LD_VAR 0 4
40418: PUSH
40419: FOR_IN
40420: IFFALSE 40453
// result := Replace ( result , result + 1 , j ) ;
40422: LD_ADDR_VAR 0 2
40426: PUSH
40427: LD_VAR 0 2
40431: PPUSH
40432: LD_VAR 0 2
40436: PUSH
40437: LD_INT 1
40439: PLUS
40440: PPUSH
40441: LD_VAR 0 7
40445: PPUSH
40446: CALL_OW 1
40450: ST_TO_ADDR
40451: GO 40419
40453: POP
40454: POP
// end ;
40455: GO 40385
40457: POP
40458: POP
// if not result then
40459: LD_VAR 0 2
40463: NOT
40464: IFFALSE 40468
// exit ;
40466: GO 40616
// mech := result [ 1 ] ;
40468: LD_ADDR_VAR 0 5
40472: PUSH
40473: LD_VAR 0 2
40477: PUSH
40478: LD_INT 1
40480: ARRAY
40481: ST_TO_ADDR
// if result > 1 then
40482: LD_VAR 0 2
40486: PUSH
40487: LD_INT 1
40489: GREATER
40490: IFFALSE 40602
// begin for i = 2 to result do
40492: LD_ADDR_VAR 0 3
40496: PUSH
40497: DOUBLE
40498: LD_INT 2
40500: DEC
40501: ST_TO_ADDR
40502: LD_VAR 0 2
40506: PUSH
40507: FOR_TO
40508: IFFALSE 40600
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
40510: LD_ADDR_VAR 0 4
40514: PUSH
40515: LD_VAR 0 2
40519: PUSH
40520: LD_VAR 0 3
40524: ARRAY
40525: PPUSH
40526: LD_INT 3
40528: PPUSH
40529: CALL_OW 259
40533: PUSH
40534: LD_VAR 0 2
40538: PUSH
40539: LD_VAR 0 3
40543: ARRAY
40544: PPUSH
40545: CALL_OW 432
40549: MINUS
40550: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
40551: LD_VAR 0 4
40555: PUSH
40556: LD_VAR 0 5
40560: PPUSH
40561: LD_INT 3
40563: PPUSH
40564: CALL_OW 259
40568: PUSH
40569: LD_VAR 0 5
40573: PPUSH
40574: CALL_OW 432
40578: MINUS
40579: GREATEREQUAL
40580: IFFALSE 40598
// mech := result [ i ] ;
40582: LD_ADDR_VAR 0 5
40586: PUSH
40587: LD_VAR 0 2
40591: PUSH
40592: LD_VAR 0 3
40596: ARRAY
40597: ST_TO_ADDR
// end ;
40598: GO 40507
40600: POP
40601: POP
// end ; ComLinkTo ( vehicle , mech ) ;
40602: LD_VAR 0 1
40606: PPUSH
40607: LD_VAR 0 5
40611: PPUSH
40612: CALL_OW 135
// end ;
40616: LD_VAR 0 2
40620: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
40621: LD_INT 0
40623: PPUSH
40624: PPUSH
40625: PPUSH
40626: PPUSH
40627: PPUSH
40628: PPUSH
40629: PPUSH
40630: PPUSH
40631: PPUSH
40632: PPUSH
40633: PPUSH
40634: PPUSH
40635: PPUSH
// result := [ ] ;
40636: LD_ADDR_VAR 0 7
40640: PUSH
40641: EMPTY
40642: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
40643: LD_VAR 0 1
40647: PPUSH
40648: CALL_OW 266
40652: PUSH
40653: LD_INT 0
40655: PUSH
40656: LD_INT 1
40658: PUSH
40659: EMPTY
40660: LIST
40661: LIST
40662: IN
40663: NOT
40664: IFFALSE 40668
// exit ;
40666: GO 42302
// if name then
40668: LD_VAR 0 3
40672: IFFALSE 40688
// SetBName ( base_dep , name ) ;
40674: LD_VAR 0 1
40678: PPUSH
40679: LD_VAR 0 3
40683: PPUSH
40684: CALL_OW 500
// base := GetBase ( base_dep ) ;
40688: LD_ADDR_VAR 0 15
40692: PUSH
40693: LD_VAR 0 1
40697: PPUSH
40698: CALL_OW 274
40702: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
40703: LD_ADDR_VAR 0 16
40707: PUSH
40708: LD_VAR 0 1
40712: PPUSH
40713: CALL_OW 255
40717: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
40718: LD_ADDR_VAR 0 17
40722: PUSH
40723: LD_VAR 0 1
40727: PPUSH
40728: CALL_OW 248
40732: ST_TO_ADDR
// if sources then
40733: LD_VAR 0 5
40737: IFFALSE 40784
// for i = 1 to 3 do
40739: LD_ADDR_VAR 0 8
40743: PUSH
40744: DOUBLE
40745: LD_INT 1
40747: DEC
40748: ST_TO_ADDR
40749: LD_INT 3
40751: PUSH
40752: FOR_TO
40753: IFFALSE 40782
// AddResourceType ( base , i , sources [ i ] ) ;
40755: LD_VAR 0 15
40759: PPUSH
40760: LD_VAR 0 8
40764: PPUSH
40765: LD_VAR 0 5
40769: PUSH
40770: LD_VAR 0 8
40774: ARRAY
40775: PPUSH
40776: CALL_OW 276
40780: GO 40752
40782: POP
40783: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
40784: LD_ADDR_VAR 0 18
40788: PUSH
40789: LD_VAR 0 15
40793: PPUSH
40794: LD_VAR 0 2
40798: PPUSH
40799: LD_INT 1
40801: PPUSH
40802: CALL 40045 0 3
40806: ST_TO_ADDR
// InitHc ;
40807: CALL_OW 19
// InitUc ;
40811: CALL_OW 18
// uc_side := side ;
40815: LD_ADDR_OWVAR 20
40819: PUSH
40820: LD_VAR 0 16
40824: ST_TO_ADDR
// uc_nation := nation ;
40825: LD_ADDR_OWVAR 21
40829: PUSH
40830: LD_VAR 0 17
40834: ST_TO_ADDR
// if buildings then
40835: LD_VAR 0 18
40839: IFFALSE 42161
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
40841: LD_ADDR_VAR 0 19
40845: PUSH
40846: LD_VAR 0 18
40850: PPUSH
40851: LD_INT 2
40853: PUSH
40854: LD_INT 30
40856: PUSH
40857: LD_INT 29
40859: PUSH
40860: EMPTY
40861: LIST
40862: LIST
40863: PUSH
40864: LD_INT 30
40866: PUSH
40867: LD_INT 30
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: PUSH
40874: EMPTY
40875: LIST
40876: LIST
40877: LIST
40878: PPUSH
40879: CALL_OW 72
40883: ST_TO_ADDR
// if tmp then
40884: LD_VAR 0 19
40888: IFFALSE 40936
// for i in tmp do
40890: LD_ADDR_VAR 0 8
40894: PUSH
40895: LD_VAR 0 19
40899: PUSH
40900: FOR_IN
40901: IFFALSE 40934
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40903: LD_VAR 0 8
40907: PPUSH
40908: CALL_OW 250
40912: PPUSH
40913: LD_VAR 0 8
40917: PPUSH
40918: CALL_OW 251
40922: PPUSH
40923: LD_VAR 0 16
40927: PPUSH
40928: CALL_OW 441
40932: GO 40900
40934: POP
40935: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40936: LD_VAR 0 18
40940: PPUSH
40941: LD_INT 2
40943: PUSH
40944: LD_INT 30
40946: PUSH
40947: LD_INT 32
40949: PUSH
40950: EMPTY
40951: LIST
40952: LIST
40953: PUSH
40954: LD_INT 30
40956: PUSH
40957: LD_INT 33
40959: PUSH
40960: EMPTY
40961: LIST
40962: LIST
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: LIST
40968: PPUSH
40969: CALL_OW 72
40973: IFFALSE 41061
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40975: LD_ADDR_VAR 0 8
40979: PUSH
40980: LD_VAR 0 18
40984: PPUSH
40985: LD_INT 2
40987: PUSH
40988: LD_INT 30
40990: PUSH
40991: LD_INT 32
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: PUSH
40998: LD_INT 30
41000: PUSH
41001: LD_INT 33
41003: PUSH
41004: EMPTY
41005: LIST
41006: LIST
41007: PUSH
41008: EMPTY
41009: LIST
41010: LIST
41011: LIST
41012: PPUSH
41013: CALL_OW 72
41017: PUSH
41018: FOR_IN
41019: IFFALSE 41059
// begin if not GetBWeapon ( i ) then
41021: LD_VAR 0 8
41025: PPUSH
41026: CALL_OW 269
41030: NOT
41031: IFFALSE 41057
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
41033: LD_VAR 0 8
41037: PPUSH
41038: LD_VAR 0 8
41042: PPUSH
41043: LD_VAR 0 2
41047: PPUSH
41048: CALL 42307 0 2
41052: PPUSH
41053: CALL_OW 431
// end ;
41057: GO 41018
41059: POP
41060: POP
// end ; for i = 1 to personel do
41061: LD_ADDR_VAR 0 8
41065: PUSH
41066: DOUBLE
41067: LD_INT 1
41069: DEC
41070: ST_TO_ADDR
41071: LD_VAR 0 6
41075: PUSH
41076: FOR_TO
41077: IFFALSE 42141
// begin if i > 4 then
41079: LD_VAR 0 8
41083: PUSH
41084: LD_INT 4
41086: GREATER
41087: IFFALSE 41091
// break ;
41089: GO 42141
// case i of 1 :
41091: LD_VAR 0 8
41095: PUSH
41096: LD_INT 1
41098: DOUBLE
41099: EQUAL
41100: IFTRUE 41104
41102: GO 41184
41104: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
41105: LD_ADDR_VAR 0 12
41109: PUSH
41110: LD_VAR 0 18
41114: PPUSH
41115: LD_INT 22
41117: PUSH
41118: LD_VAR 0 16
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: PUSH
41127: LD_INT 58
41129: PUSH
41130: EMPTY
41131: LIST
41132: PUSH
41133: LD_INT 2
41135: PUSH
41136: LD_INT 30
41138: PUSH
41139: LD_INT 32
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: PUSH
41146: LD_INT 30
41148: PUSH
41149: LD_INT 4
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: PUSH
41156: LD_INT 30
41158: PUSH
41159: LD_INT 5
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: LIST
41176: PPUSH
41177: CALL_OW 72
41181: ST_TO_ADDR
41182: GO 41406
41184: LD_INT 2
41186: DOUBLE
41187: EQUAL
41188: IFTRUE 41192
41190: GO 41254
41192: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
41193: LD_ADDR_VAR 0 12
41197: PUSH
41198: LD_VAR 0 18
41202: PPUSH
41203: LD_INT 22
41205: PUSH
41206: LD_VAR 0 16
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PUSH
41215: LD_INT 2
41217: PUSH
41218: LD_INT 30
41220: PUSH
41221: LD_INT 0
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: PUSH
41228: LD_INT 30
41230: PUSH
41231: LD_INT 1
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: LIST
41242: PUSH
41243: EMPTY
41244: LIST
41245: LIST
41246: PPUSH
41247: CALL_OW 72
41251: ST_TO_ADDR
41252: GO 41406
41254: LD_INT 3
41256: DOUBLE
41257: EQUAL
41258: IFTRUE 41262
41260: GO 41324
41262: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
41263: LD_ADDR_VAR 0 12
41267: PUSH
41268: LD_VAR 0 18
41272: PPUSH
41273: LD_INT 22
41275: PUSH
41276: LD_VAR 0 16
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: PUSH
41285: LD_INT 2
41287: PUSH
41288: LD_INT 30
41290: PUSH
41291: LD_INT 2
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: LD_INT 30
41300: PUSH
41301: LD_INT 3
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: LIST
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: PPUSH
41317: CALL_OW 72
41321: ST_TO_ADDR
41322: GO 41406
41324: LD_INT 4
41326: DOUBLE
41327: EQUAL
41328: IFTRUE 41332
41330: GO 41405
41332: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
41333: LD_ADDR_VAR 0 12
41337: PUSH
41338: LD_VAR 0 18
41342: PPUSH
41343: LD_INT 22
41345: PUSH
41346: LD_VAR 0 16
41350: PUSH
41351: EMPTY
41352: LIST
41353: LIST
41354: PUSH
41355: LD_INT 2
41357: PUSH
41358: LD_INT 30
41360: PUSH
41361: LD_INT 6
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: PUSH
41368: LD_INT 30
41370: PUSH
41371: LD_INT 7
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: PUSH
41378: LD_INT 30
41380: PUSH
41381: LD_INT 8
41383: PUSH
41384: EMPTY
41385: LIST
41386: LIST
41387: PUSH
41388: EMPTY
41389: LIST
41390: LIST
41391: LIST
41392: LIST
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PPUSH
41398: CALL_OW 72
41402: ST_TO_ADDR
41403: GO 41406
41405: POP
// if i = 1 then
41406: LD_VAR 0 8
41410: PUSH
41411: LD_INT 1
41413: EQUAL
41414: IFFALSE 41525
// begin tmp := [ ] ;
41416: LD_ADDR_VAR 0 19
41420: PUSH
41421: EMPTY
41422: ST_TO_ADDR
// for j in f do
41423: LD_ADDR_VAR 0 9
41427: PUSH
41428: LD_VAR 0 12
41432: PUSH
41433: FOR_IN
41434: IFFALSE 41507
// if GetBType ( j ) = b_bunker then
41436: LD_VAR 0 9
41440: PPUSH
41441: CALL_OW 266
41445: PUSH
41446: LD_INT 32
41448: EQUAL
41449: IFFALSE 41476
// tmp := Insert ( tmp , 1 , j ) else
41451: LD_ADDR_VAR 0 19
41455: PUSH
41456: LD_VAR 0 19
41460: PPUSH
41461: LD_INT 1
41463: PPUSH
41464: LD_VAR 0 9
41468: PPUSH
41469: CALL_OW 2
41473: ST_TO_ADDR
41474: GO 41505
// tmp := Insert ( tmp , tmp + 1 , j ) ;
41476: LD_ADDR_VAR 0 19
41480: PUSH
41481: LD_VAR 0 19
41485: PPUSH
41486: LD_VAR 0 19
41490: PUSH
41491: LD_INT 1
41493: PLUS
41494: PPUSH
41495: LD_VAR 0 9
41499: PPUSH
41500: CALL_OW 2
41504: ST_TO_ADDR
41505: GO 41433
41507: POP
41508: POP
// if tmp then
41509: LD_VAR 0 19
41513: IFFALSE 41525
// f := tmp ;
41515: LD_ADDR_VAR 0 12
41519: PUSH
41520: LD_VAR 0 19
41524: ST_TO_ADDR
// end ; x := personel [ i ] ;
41525: LD_ADDR_VAR 0 13
41529: PUSH
41530: LD_VAR 0 6
41534: PUSH
41535: LD_VAR 0 8
41539: ARRAY
41540: ST_TO_ADDR
// if x = - 1 then
41541: LD_VAR 0 13
41545: PUSH
41546: LD_INT 1
41548: NEG
41549: EQUAL
41550: IFFALSE 41759
// begin for j in f do
41552: LD_ADDR_VAR 0 9
41556: PUSH
41557: LD_VAR 0 12
41561: PUSH
41562: FOR_IN
41563: IFFALSE 41755
// repeat InitHc ;
41565: CALL_OW 19
// if GetBType ( j ) = b_barracks then
41569: LD_VAR 0 9
41573: PPUSH
41574: CALL_OW 266
41578: PUSH
41579: LD_INT 5
41581: EQUAL
41582: IFFALSE 41652
// begin if UnitsInside ( j ) < 3 then
41584: LD_VAR 0 9
41588: PPUSH
41589: CALL_OW 313
41593: PUSH
41594: LD_INT 3
41596: LESS
41597: IFFALSE 41633
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41599: LD_INT 0
41601: PPUSH
41602: LD_INT 5
41604: PUSH
41605: LD_INT 8
41607: PUSH
41608: LD_INT 9
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: LIST
41615: PUSH
41616: LD_VAR 0 17
41620: ARRAY
41621: PPUSH
41622: LD_VAR 0 4
41626: PPUSH
41627: CALL_OW 380
41631: GO 41650
// PrepareHuman ( false , i , skill ) ;
41633: LD_INT 0
41635: PPUSH
41636: LD_VAR 0 8
41640: PPUSH
41641: LD_VAR 0 4
41645: PPUSH
41646: CALL_OW 380
// end else
41650: GO 41669
// PrepareHuman ( false , i , skill ) ;
41652: LD_INT 0
41654: PPUSH
41655: LD_VAR 0 8
41659: PPUSH
41660: LD_VAR 0 4
41664: PPUSH
41665: CALL_OW 380
// un := CreateHuman ;
41669: LD_ADDR_VAR 0 14
41673: PUSH
41674: CALL_OW 44
41678: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41679: LD_ADDR_VAR 0 7
41683: PUSH
41684: LD_VAR 0 7
41688: PPUSH
41689: LD_INT 1
41691: PPUSH
41692: LD_VAR 0 14
41696: PPUSH
41697: CALL_OW 2
41701: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
41702: LD_VAR 0 14
41706: PPUSH
41707: LD_VAR 0 9
41711: PPUSH
41712: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
41716: LD_VAR 0 9
41720: PPUSH
41721: CALL_OW 313
41725: PUSH
41726: LD_INT 6
41728: EQUAL
41729: PUSH
41730: LD_VAR 0 9
41734: PPUSH
41735: CALL_OW 266
41739: PUSH
41740: LD_INT 32
41742: PUSH
41743: LD_INT 31
41745: PUSH
41746: EMPTY
41747: LIST
41748: LIST
41749: IN
41750: OR
41751: IFFALSE 41565
41753: GO 41562
41755: POP
41756: POP
// end else
41757: GO 42139
// for j = 1 to x do
41759: LD_ADDR_VAR 0 9
41763: PUSH
41764: DOUBLE
41765: LD_INT 1
41767: DEC
41768: ST_TO_ADDR
41769: LD_VAR 0 13
41773: PUSH
41774: FOR_TO
41775: IFFALSE 42137
// begin InitHc ;
41777: CALL_OW 19
// if not f then
41781: LD_VAR 0 12
41785: NOT
41786: IFFALSE 41875
// begin PrepareHuman ( false , i , skill ) ;
41788: LD_INT 0
41790: PPUSH
41791: LD_VAR 0 8
41795: PPUSH
41796: LD_VAR 0 4
41800: PPUSH
41801: CALL_OW 380
// un := CreateHuman ;
41805: LD_ADDR_VAR 0 14
41809: PUSH
41810: CALL_OW 44
41814: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41815: LD_ADDR_VAR 0 7
41819: PUSH
41820: LD_VAR 0 7
41824: PPUSH
41825: LD_INT 1
41827: PPUSH
41828: LD_VAR 0 14
41832: PPUSH
41833: CALL_OW 2
41837: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41838: LD_VAR 0 14
41842: PPUSH
41843: LD_VAR 0 1
41847: PPUSH
41848: CALL_OW 250
41852: PPUSH
41853: LD_VAR 0 1
41857: PPUSH
41858: CALL_OW 251
41862: PPUSH
41863: LD_INT 10
41865: PPUSH
41866: LD_INT 0
41868: PPUSH
41869: CALL_OW 50
// continue ;
41873: GO 41774
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
41875: LD_VAR 0 12
41879: PUSH
41880: LD_INT 1
41882: ARRAY
41883: PPUSH
41884: CALL_OW 313
41888: PUSH
41889: LD_VAR 0 12
41893: PUSH
41894: LD_INT 1
41896: ARRAY
41897: PPUSH
41898: CALL_OW 266
41902: PUSH
41903: LD_INT 32
41905: PUSH
41906: LD_INT 31
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: IN
41913: AND
41914: PUSH
41915: LD_VAR 0 12
41919: PUSH
41920: LD_INT 1
41922: ARRAY
41923: PPUSH
41924: CALL_OW 313
41928: PUSH
41929: LD_INT 6
41931: EQUAL
41932: OR
41933: IFFALSE 41953
// f := Delete ( f , 1 ) ;
41935: LD_ADDR_VAR 0 12
41939: PUSH
41940: LD_VAR 0 12
41944: PPUSH
41945: LD_INT 1
41947: PPUSH
41948: CALL_OW 3
41952: ST_TO_ADDR
// if not f then
41953: LD_VAR 0 12
41957: NOT
41958: IFFALSE 41976
// begin x := x + 2 ;
41960: LD_ADDR_VAR 0 13
41964: PUSH
41965: LD_VAR 0 13
41969: PUSH
41970: LD_INT 2
41972: PLUS
41973: ST_TO_ADDR
// continue ;
41974: GO 41774
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41976: LD_VAR 0 12
41980: PUSH
41981: LD_INT 1
41983: ARRAY
41984: PPUSH
41985: CALL_OW 266
41989: PUSH
41990: LD_INT 5
41992: EQUAL
41993: IFFALSE 42067
// begin if UnitsInside ( f [ 1 ] ) < 3 then
41995: LD_VAR 0 12
41999: PUSH
42000: LD_INT 1
42002: ARRAY
42003: PPUSH
42004: CALL_OW 313
42008: PUSH
42009: LD_INT 3
42011: LESS
42012: IFFALSE 42048
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42014: LD_INT 0
42016: PPUSH
42017: LD_INT 5
42019: PUSH
42020: LD_INT 8
42022: PUSH
42023: LD_INT 9
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: LIST
42030: PUSH
42031: LD_VAR 0 17
42035: ARRAY
42036: PPUSH
42037: LD_VAR 0 4
42041: PPUSH
42042: CALL_OW 380
42046: GO 42065
// PrepareHuman ( false , i , skill ) ;
42048: LD_INT 0
42050: PPUSH
42051: LD_VAR 0 8
42055: PPUSH
42056: LD_VAR 0 4
42060: PPUSH
42061: CALL_OW 380
// end else
42065: GO 42084
// PrepareHuman ( false , i , skill ) ;
42067: LD_INT 0
42069: PPUSH
42070: LD_VAR 0 8
42074: PPUSH
42075: LD_VAR 0 4
42079: PPUSH
42080: CALL_OW 380
// un := CreateHuman ;
42084: LD_ADDR_VAR 0 14
42088: PUSH
42089: CALL_OW 44
42093: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42094: LD_ADDR_VAR 0 7
42098: PUSH
42099: LD_VAR 0 7
42103: PPUSH
42104: LD_INT 1
42106: PPUSH
42107: LD_VAR 0 14
42111: PPUSH
42112: CALL_OW 2
42116: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
42117: LD_VAR 0 14
42121: PPUSH
42122: LD_VAR 0 12
42126: PUSH
42127: LD_INT 1
42129: ARRAY
42130: PPUSH
42131: CALL_OW 52
// end ;
42135: GO 41774
42137: POP
42138: POP
// end ;
42139: GO 41076
42141: POP
42142: POP
// result := result ^ buildings ;
42143: LD_ADDR_VAR 0 7
42147: PUSH
42148: LD_VAR 0 7
42152: PUSH
42153: LD_VAR 0 18
42157: ADD
42158: ST_TO_ADDR
// end else
42159: GO 42302
// begin for i = 1 to personel do
42161: LD_ADDR_VAR 0 8
42165: PUSH
42166: DOUBLE
42167: LD_INT 1
42169: DEC
42170: ST_TO_ADDR
42171: LD_VAR 0 6
42175: PUSH
42176: FOR_TO
42177: IFFALSE 42300
// begin if i > 4 then
42179: LD_VAR 0 8
42183: PUSH
42184: LD_INT 4
42186: GREATER
42187: IFFALSE 42191
// break ;
42189: GO 42300
// x := personel [ i ] ;
42191: LD_ADDR_VAR 0 13
42195: PUSH
42196: LD_VAR 0 6
42200: PUSH
42201: LD_VAR 0 8
42205: ARRAY
42206: ST_TO_ADDR
// if x = - 1 then
42207: LD_VAR 0 13
42211: PUSH
42212: LD_INT 1
42214: NEG
42215: EQUAL
42216: IFFALSE 42220
// continue ;
42218: GO 42176
// PrepareHuman ( false , i , skill ) ;
42220: LD_INT 0
42222: PPUSH
42223: LD_VAR 0 8
42227: PPUSH
42228: LD_VAR 0 4
42232: PPUSH
42233: CALL_OW 380
// un := CreateHuman ;
42237: LD_ADDR_VAR 0 14
42241: PUSH
42242: CALL_OW 44
42246: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42247: LD_VAR 0 14
42251: PPUSH
42252: LD_VAR 0 1
42256: PPUSH
42257: CALL_OW 250
42261: PPUSH
42262: LD_VAR 0 1
42266: PPUSH
42267: CALL_OW 251
42271: PPUSH
42272: LD_INT 10
42274: PPUSH
42275: LD_INT 0
42277: PPUSH
42278: CALL_OW 50
// result := result ^ un ;
42282: LD_ADDR_VAR 0 7
42286: PUSH
42287: LD_VAR 0 7
42291: PUSH
42292: LD_VAR 0 14
42296: ADD
42297: ST_TO_ADDR
// end ;
42298: GO 42176
42300: POP
42301: POP
// end ; end ;
42302: LD_VAR 0 7
42306: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
42307: LD_INT 0
42309: PPUSH
42310: PPUSH
42311: PPUSH
42312: PPUSH
42313: PPUSH
42314: PPUSH
42315: PPUSH
42316: PPUSH
42317: PPUSH
42318: PPUSH
42319: PPUSH
42320: PPUSH
42321: PPUSH
42322: PPUSH
42323: PPUSH
42324: PPUSH
// result := false ;
42325: LD_ADDR_VAR 0 3
42329: PUSH
42330: LD_INT 0
42332: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
42333: LD_VAR 0 1
42337: NOT
42338: PUSH
42339: LD_VAR 0 1
42343: PPUSH
42344: CALL_OW 266
42348: PUSH
42349: LD_INT 32
42351: PUSH
42352: LD_INT 33
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: IN
42359: NOT
42360: OR
42361: IFFALSE 42365
// exit ;
42363: GO 43474
// nat := GetNation ( tower ) ;
42365: LD_ADDR_VAR 0 12
42369: PUSH
42370: LD_VAR 0 1
42374: PPUSH
42375: CALL_OW 248
42379: ST_TO_ADDR
// side := GetSide ( tower ) ;
42380: LD_ADDR_VAR 0 16
42384: PUSH
42385: LD_VAR 0 1
42389: PPUSH
42390: CALL_OW 255
42394: ST_TO_ADDR
// x := GetX ( tower ) ;
42395: LD_ADDR_VAR 0 10
42399: PUSH
42400: LD_VAR 0 1
42404: PPUSH
42405: CALL_OW 250
42409: ST_TO_ADDR
// y := GetY ( tower ) ;
42410: LD_ADDR_VAR 0 11
42414: PUSH
42415: LD_VAR 0 1
42419: PPUSH
42420: CALL_OW 251
42424: ST_TO_ADDR
// if not x or not y then
42425: LD_VAR 0 10
42429: NOT
42430: PUSH
42431: LD_VAR 0 11
42435: NOT
42436: OR
42437: IFFALSE 42441
// exit ;
42439: GO 43474
// weapon := 0 ;
42441: LD_ADDR_VAR 0 18
42445: PUSH
42446: LD_INT 0
42448: ST_TO_ADDR
// fac_list := [ ] ;
42449: LD_ADDR_VAR 0 17
42453: PUSH
42454: EMPTY
42455: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
42456: LD_ADDR_VAR 0 6
42460: PUSH
42461: LD_VAR 0 1
42465: PPUSH
42466: CALL_OW 274
42470: PPUSH
42471: LD_VAR 0 2
42475: PPUSH
42476: LD_INT 0
42478: PPUSH
42479: CALL 40045 0 3
42483: PPUSH
42484: LD_INT 30
42486: PUSH
42487: LD_INT 3
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: PPUSH
42494: CALL_OW 72
42498: ST_TO_ADDR
// if not factories then
42499: LD_VAR 0 6
42503: NOT
42504: IFFALSE 42508
// exit ;
42506: GO 43474
// for i in factories do
42508: LD_ADDR_VAR 0 8
42512: PUSH
42513: LD_VAR 0 6
42517: PUSH
42518: FOR_IN
42519: IFFALSE 42544
// fac_list := fac_list union AvailableWeaponList ( i ) ;
42521: LD_ADDR_VAR 0 17
42525: PUSH
42526: LD_VAR 0 17
42530: PUSH
42531: LD_VAR 0 8
42535: PPUSH
42536: CALL_OW 478
42540: UNION
42541: ST_TO_ADDR
42542: GO 42518
42544: POP
42545: POP
// if not fac_list then
42546: LD_VAR 0 17
42550: NOT
42551: IFFALSE 42555
// exit ;
42553: GO 43474
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
42555: LD_ADDR_VAR 0 5
42559: PUSH
42560: LD_INT 4
42562: PUSH
42563: LD_INT 5
42565: PUSH
42566: LD_INT 9
42568: PUSH
42569: LD_INT 10
42571: PUSH
42572: LD_INT 6
42574: PUSH
42575: LD_INT 7
42577: PUSH
42578: LD_INT 11
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: LIST
42585: LIST
42586: LIST
42587: LIST
42588: LIST
42589: PUSH
42590: LD_INT 27
42592: PUSH
42593: LD_INT 28
42595: PUSH
42596: LD_INT 26
42598: PUSH
42599: LD_INT 30
42601: PUSH
42602: EMPTY
42603: LIST
42604: LIST
42605: LIST
42606: LIST
42607: PUSH
42608: LD_INT 43
42610: PUSH
42611: LD_INT 44
42613: PUSH
42614: LD_INT 46
42616: PUSH
42617: LD_INT 45
42619: PUSH
42620: LD_INT 47
42622: PUSH
42623: LD_INT 49
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: LIST
42630: LIST
42631: LIST
42632: LIST
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: LIST
42638: PUSH
42639: LD_VAR 0 12
42643: ARRAY
42644: ST_TO_ADDR
// list := list isect fac_list ;
42645: LD_ADDR_VAR 0 5
42649: PUSH
42650: LD_VAR 0 5
42654: PUSH
42655: LD_VAR 0 17
42659: ISECT
42660: ST_TO_ADDR
// if not list then
42661: LD_VAR 0 5
42665: NOT
42666: IFFALSE 42670
// exit ;
42668: GO 43474
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
42670: LD_VAR 0 12
42674: PUSH
42675: LD_INT 3
42677: EQUAL
42678: PUSH
42679: LD_INT 49
42681: PUSH
42682: LD_VAR 0 5
42686: IN
42687: AND
42688: PUSH
42689: LD_INT 31
42691: PPUSH
42692: LD_VAR 0 16
42696: PPUSH
42697: CALL_OW 321
42701: PUSH
42702: LD_INT 2
42704: EQUAL
42705: AND
42706: IFFALSE 42766
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
42708: LD_INT 22
42710: PUSH
42711: LD_VAR 0 16
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: PUSH
42720: LD_INT 35
42722: PUSH
42723: LD_INT 49
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: PUSH
42730: LD_INT 91
42732: PUSH
42733: LD_VAR 0 1
42737: PUSH
42738: LD_INT 10
42740: PUSH
42741: EMPTY
42742: LIST
42743: LIST
42744: LIST
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: LIST
42750: PPUSH
42751: CALL_OW 69
42755: NOT
42756: IFFALSE 42766
// weapon := ru_time_lapser ;
42758: LD_ADDR_VAR 0 18
42762: PUSH
42763: LD_INT 49
42765: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
42766: LD_VAR 0 12
42770: PUSH
42771: LD_INT 1
42773: PUSH
42774: LD_INT 2
42776: PUSH
42777: EMPTY
42778: LIST
42779: LIST
42780: IN
42781: PUSH
42782: LD_INT 11
42784: PUSH
42785: LD_VAR 0 5
42789: IN
42790: PUSH
42791: LD_INT 30
42793: PUSH
42794: LD_VAR 0 5
42798: IN
42799: OR
42800: AND
42801: PUSH
42802: LD_INT 6
42804: PPUSH
42805: LD_VAR 0 16
42809: PPUSH
42810: CALL_OW 321
42814: PUSH
42815: LD_INT 2
42817: EQUAL
42818: AND
42819: IFFALSE 42984
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
42821: LD_INT 22
42823: PUSH
42824: LD_VAR 0 16
42828: PUSH
42829: EMPTY
42830: LIST
42831: LIST
42832: PUSH
42833: LD_INT 2
42835: PUSH
42836: LD_INT 35
42838: PUSH
42839: LD_INT 11
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: PUSH
42846: LD_INT 35
42848: PUSH
42849: LD_INT 30
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: LIST
42860: PUSH
42861: LD_INT 91
42863: PUSH
42864: LD_VAR 0 1
42868: PUSH
42869: LD_INT 18
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: LIST
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: LIST
42881: PPUSH
42882: CALL_OW 69
42886: NOT
42887: PUSH
42888: LD_INT 22
42890: PUSH
42891: LD_VAR 0 16
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: PUSH
42900: LD_INT 2
42902: PUSH
42903: LD_INT 30
42905: PUSH
42906: LD_INT 32
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: PUSH
42913: LD_INT 30
42915: PUSH
42916: LD_INT 33
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: LIST
42927: PUSH
42928: LD_INT 91
42930: PUSH
42931: LD_VAR 0 1
42935: PUSH
42936: LD_INT 12
42938: PUSH
42939: EMPTY
42940: LIST
42941: LIST
42942: LIST
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: LIST
42948: PUSH
42949: EMPTY
42950: LIST
42951: PPUSH
42952: CALL_OW 69
42956: PUSH
42957: LD_INT 2
42959: GREATER
42960: AND
42961: IFFALSE 42984
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42963: LD_ADDR_VAR 0 18
42967: PUSH
42968: LD_INT 11
42970: PUSH
42971: LD_INT 30
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_VAR 0 12
42982: ARRAY
42983: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
42984: LD_VAR 0 18
42988: NOT
42989: PUSH
42990: LD_INT 40
42992: PPUSH
42993: LD_VAR 0 16
42997: PPUSH
42998: CALL_OW 321
43002: PUSH
43003: LD_INT 2
43005: EQUAL
43006: AND
43007: PUSH
43008: LD_INT 7
43010: PUSH
43011: LD_VAR 0 5
43015: IN
43016: PUSH
43017: LD_INT 28
43019: PUSH
43020: LD_VAR 0 5
43024: IN
43025: OR
43026: PUSH
43027: LD_INT 45
43029: PUSH
43030: LD_VAR 0 5
43034: IN
43035: OR
43036: AND
43037: IFFALSE 43291
// begin hex := GetHexInfo ( x , y ) ;
43039: LD_ADDR_VAR 0 4
43043: PUSH
43044: LD_VAR 0 10
43048: PPUSH
43049: LD_VAR 0 11
43053: PPUSH
43054: CALL_OW 546
43058: ST_TO_ADDR
// if hex [ 1 ] then
43059: LD_VAR 0 4
43063: PUSH
43064: LD_INT 1
43066: ARRAY
43067: IFFALSE 43071
// exit ;
43069: GO 43474
// height := hex [ 2 ] ;
43071: LD_ADDR_VAR 0 15
43075: PUSH
43076: LD_VAR 0 4
43080: PUSH
43081: LD_INT 2
43083: ARRAY
43084: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
43085: LD_ADDR_VAR 0 14
43089: PUSH
43090: LD_INT 0
43092: PUSH
43093: LD_INT 2
43095: PUSH
43096: LD_INT 3
43098: PUSH
43099: LD_INT 5
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: ST_TO_ADDR
// for i in tmp do
43108: LD_ADDR_VAR 0 8
43112: PUSH
43113: LD_VAR 0 14
43117: PUSH
43118: FOR_IN
43119: IFFALSE 43289
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
43121: LD_ADDR_VAR 0 9
43125: PUSH
43126: LD_VAR 0 10
43130: PPUSH
43131: LD_VAR 0 8
43135: PPUSH
43136: LD_INT 5
43138: PPUSH
43139: CALL_OW 272
43143: PUSH
43144: LD_VAR 0 11
43148: PPUSH
43149: LD_VAR 0 8
43153: PPUSH
43154: LD_INT 5
43156: PPUSH
43157: CALL_OW 273
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
43166: LD_VAR 0 9
43170: PUSH
43171: LD_INT 1
43173: ARRAY
43174: PPUSH
43175: LD_VAR 0 9
43179: PUSH
43180: LD_INT 2
43182: ARRAY
43183: PPUSH
43184: CALL_OW 488
43188: IFFALSE 43287
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
43190: LD_ADDR_VAR 0 4
43194: PUSH
43195: LD_VAR 0 9
43199: PUSH
43200: LD_INT 1
43202: ARRAY
43203: PPUSH
43204: LD_VAR 0 9
43208: PUSH
43209: LD_INT 2
43211: ARRAY
43212: PPUSH
43213: CALL_OW 546
43217: ST_TO_ADDR
// if hex [ 1 ] then
43218: LD_VAR 0 4
43222: PUSH
43223: LD_INT 1
43225: ARRAY
43226: IFFALSE 43230
// continue ;
43228: GO 43118
// h := hex [ 2 ] ;
43230: LD_ADDR_VAR 0 13
43234: PUSH
43235: LD_VAR 0 4
43239: PUSH
43240: LD_INT 2
43242: ARRAY
43243: ST_TO_ADDR
// if h + 7 < height then
43244: LD_VAR 0 13
43248: PUSH
43249: LD_INT 7
43251: PLUS
43252: PUSH
43253: LD_VAR 0 15
43257: LESS
43258: IFFALSE 43287
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
43260: LD_ADDR_VAR 0 18
43264: PUSH
43265: LD_INT 7
43267: PUSH
43268: LD_INT 28
43270: PUSH
43271: LD_INT 45
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: LIST
43278: PUSH
43279: LD_VAR 0 12
43283: ARRAY
43284: ST_TO_ADDR
// break ;
43285: GO 43289
// end ; end ; end ;
43287: GO 43118
43289: POP
43290: POP
// end ; if not weapon then
43291: LD_VAR 0 18
43295: NOT
43296: IFFALSE 43356
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
43298: LD_ADDR_VAR 0 5
43302: PUSH
43303: LD_VAR 0 5
43307: PUSH
43308: LD_INT 11
43310: PUSH
43311: LD_INT 30
43313: PUSH
43314: LD_INT 49
43316: PUSH
43317: EMPTY
43318: LIST
43319: LIST
43320: LIST
43321: DIFF
43322: ST_TO_ADDR
// if not list then
43323: LD_VAR 0 5
43327: NOT
43328: IFFALSE 43332
// exit ;
43330: GO 43474
// weapon := list [ rand ( 1 , list ) ] ;
43332: LD_ADDR_VAR 0 18
43336: PUSH
43337: LD_VAR 0 5
43341: PUSH
43342: LD_INT 1
43344: PPUSH
43345: LD_VAR 0 5
43349: PPUSH
43350: CALL_OW 12
43354: ARRAY
43355: ST_TO_ADDR
// end ; if weapon then
43356: LD_VAR 0 18
43360: IFFALSE 43474
// begin tmp := CostOfWeapon ( weapon ) ;
43362: LD_ADDR_VAR 0 14
43366: PUSH
43367: LD_VAR 0 18
43371: PPUSH
43372: CALL_OW 451
43376: ST_TO_ADDR
// j := GetBase ( tower ) ;
43377: LD_ADDR_VAR 0 9
43381: PUSH
43382: LD_VAR 0 1
43386: PPUSH
43387: CALL_OW 274
43391: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
43392: LD_VAR 0 9
43396: PPUSH
43397: LD_INT 1
43399: PPUSH
43400: CALL_OW 275
43404: PUSH
43405: LD_VAR 0 14
43409: PUSH
43410: LD_INT 1
43412: ARRAY
43413: GREATEREQUAL
43414: PUSH
43415: LD_VAR 0 9
43419: PPUSH
43420: LD_INT 2
43422: PPUSH
43423: CALL_OW 275
43427: PUSH
43428: LD_VAR 0 14
43432: PUSH
43433: LD_INT 2
43435: ARRAY
43436: GREATEREQUAL
43437: AND
43438: PUSH
43439: LD_VAR 0 9
43443: PPUSH
43444: LD_INT 3
43446: PPUSH
43447: CALL_OW 275
43451: PUSH
43452: LD_VAR 0 14
43456: PUSH
43457: LD_INT 3
43459: ARRAY
43460: GREATEREQUAL
43461: AND
43462: IFFALSE 43474
// result := weapon ;
43464: LD_ADDR_VAR 0 3
43468: PUSH
43469: LD_VAR 0 18
43473: ST_TO_ADDR
// end ; end ;
43474: LD_VAR 0 3
43478: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
43479: LD_INT 0
43481: PPUSH
43482: PPUSH
// result := true ;
43483: LD_ADDR_VAR 0 3
43487: PUSH
43488: LD_INT 1
43490: ST_TO_ADDR
// if array1 = array2 then
43491: LD_VAR 0 1
43495: PUSH
43496: LD_VAR 0 2
43500: EQUAL
43501: IFFALSE 43561
// begin for i = 1 to array1 do
43503: LD_ADDR_VAR 0 4
43507: PUSH
43508: DOUBLE
43509: LD_INT 1
43511: DEC
43512: ST_TO_ADDR
43513: LD_VAR 0 1
43517: PUSH
43518: FOR_TO
43519: IFFALSE 43557
// if array1 [ i ] <> array2 [ i ] then
43521: LD_VAR 0 1
43525: PUSH
43526: LD_VAR 0 4
43530: ARRAY
43531: PUSH
43532: LD_VAR 0 2
43536: PUSH
43537: LD_VAR 0 4
43541: ARRAY
43542: NONEQUAL
43543: IFFALSE 43555
// begin result := false ;
43545: LD_ADDR_VAR 0 3
43549: PUSH
43550: LD_INT 0
43552: ST_TO_ADDR
// break ;
43553: GO 43557
// end ;
43555: GO 43518
43557: POP
43558: POP
// end else
43559: GO 43569
// result := false ;
43561: LD_ADDR_VAR 0 3
43565: PUSH
43566: LD_INT 0
43568: ST_TO_ADDR
// end ;
43569: LD_VAR 0 3
43573: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
43574: LD_INT 0
43576: PPUSH
43577: PPUSH
// if not array1 or not array2 then
43578: LD_VAR 0 1
43582: NOT
43583: PUSH
43584: LD_VAR 0 2
43588: NOT
43589: OR
43590: IFFALSE 43594
// exit ;
43592: GO 43658
// result := true ;
43594: LD_ADDR_VAR 0 3
43598: PUSH
43599: LD_INT 1
43601: ST_TO_ADDR
// for i = 1 to array1 do
43602: LD_ADDR_VAR 0 4
43606: PUSH
43607: DOUBLE
43608: LD_INT 1
43610: DEC
43611: ST_TO_ADDR
43612: LD_VAR 0 1
43616: PUSH
43617: FOR_TO
43618: IFFALSE 43656
// if array1 [ i ] <> array2 [ i ] then
43620: LD_VAR 0 1
43624: PUSH
43625: LD_VAR 0 4
43629: ARRAY
43630: PUSH
43631: LD_VAR 0 2
43635: PUSH
43636: LD_VAR 0 4
43640: ARRAY
43641: NONEQUAL
43642: IFFALSE 43654
// begin result := false ;
43644: LD_ADDR_VAR 0 3
43648: PUSH
43649: LD_INT 0
43651: ST_TO_ADDR
// break ;
43652: GO 43656
// end ;
43654: GO 43617
43656: POP
43657: POP
// end ;
43658: LD_VAR 0 3
43662: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
43663: LD_INT 0
43665: PPUSH
43666: PPUSH
43667: PPUSH
// pom := GetBase ( fac ) ;
43668: LD_ADDR_VAR 0 5
43672: PUSH
43673: LD_VAR 0 1
43677: PPUSH
43678: CALL_OW 274
43682: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
43683: LD_ADDR_VAR 0 4
43687: PUSH
43688: LD_VAR 0 2
43692: PUSH
43693: LD_INT 1
43695: ARRAY
43696: PPUSH
43697: LD_VAR 0 2
43701: PUSH
43702: LD_INT 2
43704: ARRAY
43705: PPUSH
43706: LD_VAR 0 2
43710: PUSH
43711: LD_INT 3
43713: ARRAY
43714: PPUSH
43715: LD_VAR 0 2
43719: PUSH
43720: LD_INT 4
43722: ARRAY
43723: PPUSH
43724: CALL_OW 449
43728: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43729: LD_ADDR_VAR 0 3
43733: PUSH
43734: LD_VAR 0 5
43738: PPUSH
43739: LD_INT 1
43741: PPUSH
43742: CALL_OW 275
43746: PUSH
43747: LD_VAR 0 4
43751: PUSH
43752: LD_INT 1
43754: ARRAY
43755: GREATEREQUAL
43756: PUSH
43757: LD_VAR 0 5
43761: PPUSH
43762: LD_INT 2
43764: PPUSH
43765: CALL_OW 275
43769: PUSH
43770: LD_VAR 0 4
43774: PUSH
43775: LD_INT 2
43777: ARRAY
43778: GREATEREQUAL
43779: AND
43780: PUSH
43781: LD_VAR 0 5
43785: PPUSH
43786: LD_INT 3
43788: PPUSH
43789: CALL_OW 275
43793: PUSH
43794: LD_VAR 0 4
43798: PUSH
43799: LD_INT 3
43801: ARRAY
43802: GREATEREQUAL
43803: AND
43804: ST_TO_ADDR
// end ;
43805: LD_VAR 0 3
43809: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
43810: LD_INT 0
43812: PPUSH
43813: PPUSH
43814: PPUSH
43815: PPUSH
// pom := GetBase ( building ) ;
43816: LD_ADDR_VAR 0 3
43820: PUSH
43821: LD_VAR 0 1
43825: PPUSH
43826: CALL_OW 274
43830: ST_TO_ADDR
// if not pom then
43831: LD_VAR 0 3
43835: NOT
43836: IFFALSE 43840
// exit ;
43838: GO 44010
// btype := GetBType ( building ) ;
43840: LD_ADDR_VAR 0 5
43844: PUSH
43845: LD_VAR 0 1
43849: PPUSH
43850: CALL_OW 266
43854: ST_TO_ADDR
// if btype = b_armoury then
43855: LD_VAR 0 5
43859: PUSH
43860: LD_INT 4
43862: EQUAL
43863: IFFALSE 43873
// btype := b_barracks ;
43865: LD_ADDR_VAR 0 5
43869: PUSH
43870: LD_INT 5
43872: ST_TO_ADDR
// if btype = b_depot then
43873: LD_VAR 0 5
43877: PUSH
43878: LD_INT 0
43880: EQUAL
43881: IFFALSE 43891
// btype := b_warehouse ;
43883: LD_ADDR_VAR 0 5
43887: PUSH
43888: LD_INT 1
43890: ST_TO_ADDR
// if btype = b_workshop then
43891: LD_VAR 0 5
43895: PUSH
43896: LD_INT 2
43898: EQUAL
43899: IFFALSE 43909
// btype := b_factory ;
43901: LD_ADDR_VAR 0 5
43905: PUSH
43906: LD_INT 3
43908: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43909: LD_ADDR_VAR 0 4
43913: PUSH
43914: LD_VAR 0 5
43918: PPUSH
43919: LD_VAR 0 1
43923: PPUSH
43924: CALL_OW 248
43928: PPUSH
43929: CALL_OW 450
43933: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43934: LD_ADDR_VAR 0 2
43938: PUSH
43939: LD_VAR 0 3
43943: PPUSH
43944: LD_INT 1
43946: PPUSH
43947: CALL_OW 275
43951: PUSH
43952: LD_VAR 0 4
43956: PUSH
43957: LD_INT 1
43959: ARRAY
43960: GREATEREQUAL
43961: PUSH
43962: LD_VAR 0 3
43966: PPUSH
43967: LD_INT 2
43969: PPUSH
43970: CALL_OW 275
43974: PUSH
43975: LD_VAR 0 4
43979: PUSH
43980: LD_INT 2
43982: ARRAY
43983: GREATEREQUAL
43984: AND
43985: PUSH
43986: LD_VAR 0 3
43990: PPUSH
43991: LD_INT 3
43993: PPUSH
43994: CALL_OW 275
43998: PUSH
43999: LD_VAR 0 4
44003: PUSH
44004: LD_INT 3
44006: ARRAY
44007: GREATEREQUAL
44008: AND
44009: ST_TO_ADDR
// end ;
44010: LD_VAR 0 2
44014: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
44015: LD_INT 0
44017: PPUSH
44018: PPUSH
44019: PPUSH
// pom := GetBase ( building ) ;
44020: LD_ADDR_VAR 0 4
44024: PUSH
44025: LD_VAR 0 1
44029: PPUSH
44030: CALL_OW 274
44034: ST_TO_ADDR
// if not pom then
44035: LD_VAR 0 4
44039: NOT
44040: IFFALSE 44044
// exit ;
44042: GO 44145
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44044: LD_ADDR_VAR 0 5
44048: PUSH
44049: LD_VAR 0 2
44053: PPUSH
44054: LD_VAR 0 1
44058: PPUSH
44059: CALL_OW 248
44063: PPUSH
44064: CALL_OW 450
44068: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44069: LD_ADDR_VAR 0 3
44073: PUSH
44074: LD_VAR 0 4
44078: PPUSH
44079: LD_INT 1
44081: PPUSH
44082: CALL_OW 275
44086: PUSH
44087: LD_VAR 0 5
44091: PUSH
44092: LD_INT 1
44094: ARRAY
44095: GREATEREQUAL
44096: PUSH
44097: LD_VAR 0 4
44101: PPUSH
44102: LD_INT 2
44104: PPUSH
44105: CALL_OW 275
44109: PUSH
44110: LD_VAR 0 5
44114: PUSH
44115: LD_INT 2
44117: ARRAY
44118: GREATEREQUAL
44119: AND
44120: PUSH
44121: LD_VAR 0 4
44125: PPUSH
44126: LD_INT 3
44128: PPUSH
44129: CALL_OW 275
44133: PUSH
44134: LD_VAR 0 5
44138: PUSH
44139: LD_INT 3
44141: ARRAY
44142: GREATEREQUAL
44143: AND
44144: ST_TO_ADDR
// end ;
44145: LD_VAR 0 3
44149: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
44150: LD_INT 0
44152: PPUSH
44153: PPUSH
44154: PPUSH
44155: PPUSH
44156: PPUSH
44157: PPUSH
44158: PPUSH
44159: PPUSH
44160: PPUSH
44161: PPUSH
44162: PPUSH
// result := false ;
44163: LD_ADDR_VAR 0 8
44167: PUSH
44168: LD_INT 0
44170: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
44171: LD_VAR 0 5
44175: NOT
44176: PUSH
44177: LD_VAR 0 1
44181: NOT
44182: OR
44183: PUSH
44184: LD_VAR 0 2
44188: NOT
44189: OR
44190: PUSH
44191: LD_VAR 0 3
44195: NOT
44196: OR
44197: IFFALSE 44201
// exit ;
44199: GO 45015
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
44201: LD_ADDR_VAR 0 14
44205: PUSH
44206: LD_VAR 0 1
44210: PPUSH
44211: LD_VAR 0 2
44215: PPUSH
44216: LD_VAR 0 3
44220: PPUSH
44221: LD_VAR 0 4
44225: PPUSH
44226: LD_VAR 0 5
44230: PUSH
44231: LD_INT 1
44233: ARRAY
44234: PPUSH
44235: CALL_OW 248
44239: PPUSH
44240: LD_INT 0
44242: PPUSH
44243: CALL 46248 0 6
44247: ST_TO_ADDR
// if not hexes then
44248: LD_VAR 0 14
44252: NOT
44253: IFFALSE 44257
// exit ;
44255: GO 45015
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
44257: LD_ADDR_VAR 0 17
44261: PUSH
44262: LD_VAR 0 5
44266: PPUSH
44267: LD_INT 22
44269: PUSH
44270: LD_VAR 0 13
44274: PPUSH
44275: CALL_OW 255
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: PUSH
44284: LD_INT 2
44286: PUSH
44287: LD_INT 30
44289: PUSH
44290: LD_INT 0
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: LD_INT 30
44299: PUSH
44300: LD_INT 1
44302: PUSH
44303: EMPTY
44304: LIST
44305: LIST
44306: PUSH
44307: EMPTY
44308: LIST
44309: LIST
44310: LIST
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: PPUSH
44316: CALL_OW 72
44320: ST_TO_ADDR
// for i = 1 to hexes do
44321: LD_ADDR_VAR 0 9
44325: PUSH
44326: DOUBLE
44327: LD_INT 1
44329: DEC
44330: ST_TO_ADDR
44331: LD_VAR 0 14
44335: PUSH
44336: FOR_TO
44337: IFFALSE 45013
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44339: LD_ADDR_VAR 0 13
44343: PUSH
44344: LD_VAR 0 14
44348: PUSH
44349: LD_VAR 0 9
44353: ARRAY
44354: PUSH
44355: LD_INT 1
44357: ARRAY
44358: PPUSH
44359: LD_VAR 0 14
44363: PUSH
44364: LD_VAR 0 9
44368: ARRAY
44369: PUSH
44370: LD_INT 2
44372: ARRAY
44373: PPUSH
44374: CALL_OW 428
44378: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
44379: LD_VAR 0 14
44383: PUSH
44384: LD_VAR 0 9
44388: ARRAY
44389: PUSH
44390: LD_INT 1
44392: ARRAY
44393: PPUSH
44394: LD_VAR 0 14
44398: PUSH
44399: LD_VAR 0 9
44403: ARRAY
44404: PUSH
44405: LD_INT 2
44407: ARRAY
44408: PPUSH
44409: CALL_OW 351
44413: PUSH
44414: LD_VAR 0 14
44418: PUSH
44419: LD_VAR 0 9
44423: ARRAY
44424: PUSH
44425: LD_INT 1
44427: ARRAY
44428: PPUSH
44429: LD_VAR 0 14
44433: PUSH
44434: LD_VAR 0 9
44438: ARRAY
44439: PUSH
44440: LD_INT 2
44442: ARRAY
44443: PPUSH
44444: CALL_OW 488
44448: NOT
44449: OR
44450: PUSH
44451: LD_VAR 0 13
44455: PPUSH
44456: CALL_OW 247
44460: PUSH
44461: LD_INT 3
44463: EQUAL
44464: OR
44465: IFFALSE 44471
// exit ;
44467: POP
44468: POP
44469: GO 45015
// if not tmp then
44471: LD_VAR 0 13
44475: NOT
44476: IFFALSE 44480
// continue ;
44478: GO 44336
// result := true ;
44480: LD_ADDR_VAR 0 8
44484: PUSH
44485: LD_INT 1
44487: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
44488: LD_VAR 0 6
44492: PUSH
44493: LD_VAR 0 13
44497: PPUSH
44498: CALL_OW 247
44502: PUSH
44503: LD_INT 2
44505: EQUAL
44506: AND
44507: PUSH
44508: LD_VAR 0 13
44512: PPUSH
44513: CALL_OW 263
44517: PUSH
44518: LD_INT 1
44520: EQUAL
44521: AND
44522: IFFALSE 44686
// begin if IsDrivenBy ( tmp ) then
44524: LD_VAR 0 13
44528: PPUSH
44529: CALL_OW 311
44533: IFFALSE 44537
// continue ;
44535: GO 44336
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
44537: LD_VAR 0 6
44541: PPUSH
44542: LD_INT 3
44544: PUSH
44545: LD_INT 60
44547: PUSH
44548: EMPTY
44549: LIST
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 3
44557: PUSH
44558: LD_INT 55
44560: PUSH
44561: EMPTY
44562: LIST
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PPUSH
44572: CALL_OW 72
44576: IFFALSE 44684
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
44578: LD_ADDR_VAR 0 18
44582: PUSH
44583: LD_VAR 0 6
44587: PPUSH
44588: LD_INT 3
44590: PUSH
44591: LD_INT 60
44593: PUSH
44594: EMPTY
44595: LIST
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: PUSH
44601: LD_INT 3
44603: PUSH
44604: LD_INT 55
44606: PUSH
44607: EMPTY
44608: LIST
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: PPUSH
44618: CALL_OW 72
44622: PUSH
44623: LD_INT 1
44625: ARRAY
44626: ST_TO_ADDR
// if IsInUnit ( driver ) then
44627: LD_VAR 0 18
44631: PPUSH
44632: CALL_OW 310
44636: IFFALSE 44647
// ComExit ( driver ) ;
44638: LD_VAR 0 18
44642: PPUSH
44643: CALL 70027 0 1
// AddComEnterUnit ( driver , tmp ) ;
44647: LD_VAR 0 18
44651: PPUSH
44652: LD_VAR 0 13
44656: PPUSH
44657: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
44661: LD_VAR 0 18
44665: PPUSH
44666: LD_VAR 0 7
44670: PPUSH
44671: CALL_OW 173
// AddComExitVehicle ( driver ) ;
44675: LD_VAR 0 18
44679: PPUSH
44680: CALL_OW 181
// end ; continue ;
44684: GO 44336
// end ; if not cleaners or not tmp in cleaners then
44686: LD_VAR 0 6
44690: NOT
44691: PUSH
44692: LD_VAR 0 13
44696: PUSH
44697: LD_VAR 0 6
44701: IN
44702: NOT
44703: OR
44704: IFFALSE 45011
// begin if dep then
44706: LD_VAR 0 17
44710: IFFALSE 44846
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
44712: LD_ADDR_VAR 0 16
44716: PUSH
44717: LD_VAR 0 17
44721: PUSH
44722: LD_INT 1
44724: ARRAY
44725: PPUSH
44726: CALL_OW 250
44730: PPUSH
44731: LD_VAR 0 17
44735: PUSH
44736: LD_INT 1
44738: ARRAY
44739: PPUSH
44740: CALL_OW 254
44744: PPUSH
44745: LD_INT 5
44747: PPUSH
44748: CALL_OW 272
44752: PUSH
44753: LD_VAR 0 17
44757: PUSH
44758: LD_INT 1
44760: ARRAY
44761: PPUSH
44762: CALL_OW 251
44766: PPUSH
44767: LD_VAR 0 17
44771: PUSH
44772: LD_INT 1
44774: ARRAY
44775: PPUSH
44776: CALL_OW 254
44780: PPUSH
44781: LD_INT 5
44783: PPUSH
44784: CALL_OW 273
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
44793: LD_VAR 0 16
44797: PUSH
44798: LD_INT 1
44800: ARRAY
44801: PPUSH
44802: LD_VAR 0 16
44806: PUSH
44807: LD_INT 2
44809: ARRAY
44810: PPUSH
44811: CALL_OW 488
44815: IFFALSE 44846
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
44817: LD_VAR 0 13
44821: PPUSH
44822: LD_VAR 0 16
44826: PUSH
44827: LD_INT 1
44829: ARRAY
44830: PPUSH
44831: LD_VAR 0 16
44835: PUSH
44836: LD_INT 2
44838: ARRAY
44839: PPUSH
44840: CALL_OW 111
// continue ;
44844: GO 44336
// end ; end ; r := GetDir ( tmp ) ;
44846: LD_ADDR_VAR 0 15
44850: PUSH
44851: LD_VAR 0 13
44855: PPUSH
44856: CALL_OW 254
44860: ST_TO_ADDR
// if r = 5 then
44861: LD_VAR 0 15
44865: PUSH
44866: LD_INT 5
44868: EQUAL
44869: IFFALSE 44879
// r := 0 ;
44871: LD_ADDR_VAR 0 15
44875: PUSH
44876: LD_INT 0
44878: ST_TO_ADDR
// for j = r to 5 do
44879: LD_ADDR_VAR 0 10
44883: PUSH
44884: DOUBLE
44885: LD_VAR 0 15
44889: DEC
44890: ST_TO_ADDR
44891: LD_INT 5
44893: PUSH
44894: FOR_TO
44895: IFFALSE 45009
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
44897: LD_ADDR_VAR 0 11
44901: PUSH
44902: LD_VAR 0 13
44906: PPUSH
44907: CALL_OW 250
44911: PPUSH
44912: LD_VAR 0 10
44916: PPUSH
44917: LD_INT 2
44919: PPUSH
44920: CALL_OW 272
44924: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
44925: LD_ADDR_VAR 0 12
44929: PUSH
44930: LD_VAR 0 13
44934: PPUSH
44935: CALL_OW 251
44939: PPUSH
44940: LD_VAR 0 10
44944: PPUSH
44945: LD_INT 2
44947: PPUSH
44948: CALL_OW 273
44952: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
44953: LD_VAR 0 11
44957: PPUSH
44958: LD_VAR 0 12
44962: PPUSH
44963: CALL_OW 488
44967: PUSH
44968: LD_VAR 0 11
44972: PPUSH
44973: LD_VAR 0 12
44977: PPUSH
44978: CALL_OW 428
44982: NOT
44983: AND
44984: IFFALSE 45007
// begin ComMoveXY ( tmp , _x , _y ) ;
44986: LD_VAR 0 13
44990: PPUSH
44991: LD_VAR 0 11
44995: PPUSH
44996: LD_VAR 0 12
45000: PPUSH
45001: CALL_OW 111
// break ;
45005: GO 45009
// end ; end ;
45007: GO 44894
45009: POP
45010: POP
// end ; end ;
45011: GO 44336
45013: POP
45014: POP
// end ;
45015: LD_VAR 0 8
45019: RET
// export function BuildingTechInvented ( side , btype ) ; begin
45020: LD_INT 0
45022: PPUSH
// result := true ;
45023: LD_ADDR_VAR 0 3
45027: PUSH
45028: LD_INT 1
45030: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
45031: LD_VAR 0 2
45035: PUSH
45036: LD_INT 24
45038: DOUBLE
45039: EQUAL
45040: IFTRUE 45050
45042: LD_INT 33
45044: DOUBLE
45045: EQUAL
45046: IFTRUE 45050
45048: GO 45075
45050: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
45051: LD_ADDR_VAR 0 3
45055: PUSH
45056: LD_INT 32
45058: PPUSH
45059: LD_VAR 0 1
45063: PPUSH
45064: CALL_OW 321
45068: PUSH
45069: LD_INT 2
45071: EQUAL
45072: ST_TO_ADDR
45073: GO 45391
45075: LD_INT 20
45077: DOUBLE
45078: EQUAL
45079: IFTRUE 45083
45081: GO 45108
45083: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
45084: LD_ADDR_VAR 0 3
45088: PUSH
45089: LD_INT 6
45091: PPUSH
45092: LD_VAR 0 1
45096: PPUSH
45097: CALL_OW 321
45101: PUSH
45102: LD_INT 2
45104: EQUAL
45105: ST_TO_ADDR
45106: GO 45391
45108: LD_INT 22
45110: DOUBLE
45111: EQUAL
45112: IFTRUE 45122
45114: LD_INT 36
45116: DOUBLE
45117: EQUAL
45118: IFTRUE 45122
45120: GO 45147
45122: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
45123: LD_ADDR_VAR 0 3
45127: PUSH
45128: LD_INT 15
45130: PPUSH
45131: LD_VAR 0 1
45135: PPUSH
45136: CALL_OW 321
45140: PUSH
45141: LD_INT 2
45143: EQUAL
45144: ST_TO_ADDR
45145: GO 45391
45147: LD_INT 30
45149: DOUBLE
45150: EQUAL
45151: IFTRUE 45155
45153: GO 45180
45155: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
45156: LD_ADDR_VAR 0 3
45160: PUSH
45161: LD_INT 20
45163: PPUSH
45164: LD_VAR 0 1
45168: PPUSH
45169: CALL_OW 321
45173: PUSH
45174: LD_INT 2
45176: EQUAL
45177: ST_TO_ADDR
45178: GO 45391
45180: LD_INT 28
45182: DOUBLE
45183: EQUAL
45184: IFTRUE 45194
45186: LD_INT 21
45188: DOUBLE
45189: EQUAL
45190: IFTRUE 45194
45192: GO 45219
45194: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
45195: LD_ADDR_VAR 0 3
45199: PUSH
45200: LD_INT 21
45202: PPUSH
45203: LD_VAR 0 1
45207: PPUSH
45208: CALL_OW 321
45212: PUSH
45213: LD_INT 2
45215: EQUAL
45216: ST_TO_ADDR
45217: GO 45391
45219: LD_INT 16
45221: DOUBLE
45222: EQUAL
45223: IFTRUE 45227
45225: GO 45252
45227: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
45228: LD_ADDR_VAR 0 3
45232: PUSH
45233: LD_INT 84
45235: PPUSH
45236: LD_VAR 0 1
45240: PPUSH
45241: CALL_OW 321
45245: PUSH
45246: LD_INT 2
45248: EQUAL
45249: ST_TO_ADDR
45250: GO 45391
45252: LD_INT 19
45254: DOUBLE
45255: EQUAL
45256: IFTRUE 45266
45258: LD_INT 23
45260: DOUBLE
45261: EQUAL
45262: IFTRUE 45266
45264: GO 45291
45266: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
45267: LD_ADDR_VAR 0 3
45271: PUSH
45272: LD_INT 83
45274: PPUSH
45275: LD_VAR 0 1
45279: PPUSH
45280: CALL_OW 321
45284: PUSH
45285: LD_INT 2
45287: EQUAL
45288: ST_TO_ADDR
45289: GO 45391
45291: LD_INT 17
45293: DOUBLE
45294: EQUAL
45295: IFTRUE 45299
45297: GO 45324
45299: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
45300: LD_ADDR_VAR 0 3
45304: PUSH
45305: LD_INT 39
45307: PPUSH
45308: LD_VAR 0 1
45312: PPUSH
45313: CALL_OW 321
45317: PUSH
45318: LD_INT 2
45320: EQUAL
45321: ST_TO_ADDR
45322: GO 45391
45324: LD_INT 18
45326: DOUBLE
45327: EQUAL
45328: IFTRUE 45332
45330: GO 45357
45332: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
45333: LD_ADDR_VAR 0 3
45337: PUSH
45338: LD_INT 40
45340: PPUSH
45341: LD_VAR 0 1
45345: PPUSH
45346: CALL_OW 321
45350: PUSH
45351: LD_INT 2
45353: EQUAL
45354: ST_TO_ADDR
45355: GO 45391
45357: LD_INT 27
45359: DOUBLE
45360: EQUAL
45361: IFTRUE 45365
45363: GO 45390
45365: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
45366: LD_ADDR_VAR 0 3
45370: PUSH
45371: LD_INT 35
45373: PPUSH
45374: LD_VAR 0 1
45378: PPUSH
45379: CALL_OW 321
45383: PUSH
45384: LD_INT 2
45386: EQUAL
45387: ST_TO_ADDR
45388: GO 45391
45390: POP
// end ;
45391: LD_VAR 0 3
45395: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
45396: LD_INT 0
45398: PPUSH
45399: PPUSH
45400: PPUSH
45401: PPUSH
45402: PPUSH
45403: PPUSH
45404: PPUSH
45405: PPUSH
45406: PPUSH
45407: PPUSH
45408: PPUSH
// result := false ;
45409: LD_ADDR_VAR 0 6
45413: PUSH
45414: LD_INT 0
45416: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
45417: LD_VAR 0 1
45421: NOT
45422: PUSH
45423: LD_VAR 0 1
45427: PPUSH
45428: CALL_OW 266
45432: PUSH
45433: LD_INT 0
45435: PUSH
45436: LD_INT 1
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: IN
45443: NOT
45444: OR
45445: PUSH
45446: LD_VAR 0 2
45450: NOT
45451: OR
45452: PUSH
45453: LD_VAR 0 5
45457: PUSH
45458: LD_INT 0
45460: PUSH
45461: LD_INT 1
45463: PUSH
45464: LD_INT 2
45466: PUSH
45467: LD_INT 3
45469: PUSH
45470: LD_INT 4
45472: PUSH
45473: LD_INT 5
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: IN
45484: NOT
45485: OR
45486: PUSH
45487: LD_VAR 0 3
45491: PPUSH
45492: LD_VAR 0 4
45496: PPUSH
45497: CALL_OW 488
45501: NOT
45502: OR
45503: IFFALSE 45507
// exit ;
45505: GO 46243
// side := GetSide ( depot ) ;
45507: LD_ADDR_VAR 0 9
45511: PUSH
45512: LD_VAR 0 1
45516: PPUSH
45517: CALL_OW 255
45521: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
45522: LD_VAR 0 9
45526: PPUSH
45527: LD_VAR 0 2
45531: PPUSH
45532: CALL 45020 0 2
45536: NOT
45537: IFFALSE 45541
// exit ;
45539: GO 46243
// pom := GetBase ( depot ) ;
45541: LD_ADDR_VAR 0 10
45545: PUSH
45546: LD_VAR 0 1
45550: PPUSH
45551: CALL_OW 274
45555: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45556: LD_ADDR_VAR 0 11
45560: PUSH
45561: LD_VAR 0 2
45565: PPUSH
45566: LD_VAR 0 1
45570: PPUSH
45571: CALL_OW 248
45575: PPUSH
45576: CALL_OW 450
45580: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
45581: LD_VAR 0 10
45585: PPUSH
45586: LD_INT 1
45588: PPUSH
45589: CALL_OW 275
45593: PUSH
45594: LD_VAR 0 11
45598: PUSH
45599: LD_INT 1
45601: ARRAY
45602: GREATEREQUAL
45603: PUSH
45604: LD_VAR 0 10
45608: PPUSH
45609: LD_INT 2
45611: PPUSH
45612: CALL_OW 275
45616: PUSH
45617: LD_VAR 0 11
45621: PUSH
45622: LD_INT 2
45624: ARRAY
45625: GREATEREQUAL
45626: AND
45627: PUSH
45628: LD_VAR 0 10
45632: PPUSH
45633: LD_INT 3
45635: PPUSH
45636: CALL_OW 275
45640: PUSH
45641: LD_VAR 0 11
45645: PUSH
45646: LD_INT 3
45648: ARRAY
45649: GREATEREQUAL
45650: AND
45651: NOT
45652: IFFALSE 45656
// exit ;
45654: GO 46243
// if GetBType ( depot ) = b_depot then
45656: LD_VAR 0 1
45660: PPUSH
45661: CALL_OW 266
45665: PUSH
45666: LD_INT 0
45668: EQUAL
45669: IFFALSE 45681
// dist := 28 else
45671: LD_ADDR_VAR 0 14
45675: PUSH
45676: LD_INT 28
45678: ST_TO_ADDR
45679: GO 45689
// dist := 36 ;
45681: LD_ADDR_VAR 0 14
45685: PUSH
45686: LD_INT 36
45688: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
45689: LD_VAR 0 1
45693: PPUSH
45694: LD_VAR 0 3
45698: PPUSH
45699: LD_VAR 0 4
45703: PPUSH
45704: CALL_OW 297
45708: PUSH
45709: LD_VAR 0 14
45713: GREATER
45714: IFFALSE 45718
// exit ;
45716: GO 46243
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
45718: LD_ADDR_VAR 0 12
45722: PUSH
45723: LD_VAR 0 2
45727: PPUSH
45728: LD_VAR 0 3
45732: PPUSH
45733: LD_VAR 0 4
45737: PPUSH
45738: LD_VAR 0 5
45742: PPUSH
45743: LD_VAR 0 1
45747: PPUSH
45748: CALL_OW 248
45752: PPUSH
45753: LD_INT 0
45755: PPUSH
45756: CALL 46248 0 6
45760: ST_TO_ADDR
// if not hexes then
45761: LD_VAR 0 12
45765: NOT
45766: IFFALSE 45770
// exit ;
45768: GO 46243
// hex := GetHexInfo ( x , y ) ;
45770: LD_ADDR_VAR 0 15
45774: PUSH
45775: LD_VAR 0 3
45779: PPUSH
45780: LD_VAR 0 4
45784: PPUSH
45785: CALL_OW 546
45789: ST_TO_ADDR
// if hex [ 1 ] then
45790: LD_VAR 0 15
45794: PUSH
45795: LD_INT 1
45797: ARRAY
45798: IFFALSE 45802
// exit ;
45800: GO 46243
// height := hex [ 2 ] ;
45802: LD_ADDR_VAR 0 13
45806: PUSH
45807: LD_VAR 0 15
45811: PUSH
45812: LD_INT 2
45814: ARRAY
45815: ST_TO_ADDR
// for i = 1 to hexes do
45816: LD_ADDR_VAR 0 7
45820: PUSH
45821: DOUBLE
45822: LD_INT 1
45824: DEC
45825: ST_TO_ADDR
45826: LD_VAR 0 12
45830: PUSH
45831: FOR_TO
45832: IFFALSE 46162
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
45834: LD_VAR 0 12
45838: PUSH
45839: LD_VAR 0 7
45843: ARRAY
45844: PUSH
45845: LD_INT 1
45847: ARRAY
45848: PPUSH
45849: LD_VAR 0 12
45853: PUSH
45854: LD_VAR 0 7
45858: ARRAY
45859: PUSH
45860: LD_INT 2
45862: ARRAY
45863: PPUSH
45864: CALL_OW 488
45868: NOT
45869: PUSH
45870: LD_VAR 0 12
45874: PUSH
45875: LD_VAR 0 7
45879: ARRAY
45880: PUSH
45881: LD_INT 1
45883: ARRAY
45884: PPUSH
45885: LD_VAR 0 12
45889: PUSH
45890: LD_VAR 0 7
45894: ARRAY
45895: PUSH
45896: LD_INT 2
45898: ARRAY
45899: PPUSH
45900: CALL_OW 428
45904: PUSH
45905: LD_INT 0
45907: GREATER
45908: OR
45909: PUSH
45910: LD_VAR 0 12
45914: PUSH
45915: LD_VAR 0 7
45919: ARRAY
45920: PUSH
45921: LD_INT 1
45923: ARRAY
45924: PPUSH
45925: LD_VAR 0 12
45929: PUSH
45930: LD_VAR 0 7
45934: ARRAY
45935: PUSH
45936: LD_INT 2
45938: ARRAY
45939: PPUSH
45940: CALL_OW 351
45944: OR
45945: IFFALSE 45951
// exit ;
45947: POP
45948: POP
45949: GO 46243
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45951: LD_ADDR_VAR 0 8
45955: PUSH
45956: LD_VAR 0 12
45960: PUSH
45961: LD_VAR 0 7
45965: ARRAY
45966: PUSH
45967: LD_INT 1
45969: ARRAY
45970: PPUSH
45971: LD_VAR 0 12
45975: PUSH
45976: LD_VAR 0 7
45980: ARRAY
45981: PUSH
45982: LD_INT 2
45984: ARRAY
45985: PPUSH
45986: CALL_OW 546
45990: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
45991: LD_VAR 0 8
45995: PUSH
45996: LD_INT 1
45998: ARRAY
45999: PUSH
46000: LD_VAR 0 8
46004: PUSH
46005: LD_INT 2
46007: ARRAY
46008: PUSH
46009: LD_VAR 0 13
46013: PUSH
46014: LD_INT 2
46016: PLUS
46017: GREATER
46018: OR
46019: PUSH
46020: LD_VAR 0 8
46024: PUSH
46025: LD_INT 2
46027: ARRAY
46028: PUSH
46029: LD_VAR 0 13
46033: PUSH
46034: LD_INT 2
46036: MINUS
46037: LESS
46038: OR
46039: PUSH
46040: LD_VAR 0 8
46044: PUSH
46045: LD_INT 3
46047: ARRAY
46048: PUSH
46049: LD_INT 0
46051: PUSH
46052: LD_INT 8
46054: PUSH
46055: LD_INT 9
46057: PUSH
46058: LD_INT 10
46060: PUSH
46061: LD_INT 11
46063: PUSH
46064: LD_INT 12
46066: PUSH
46067: LD_INT 13
46069: PUSH
46070: LD_INT 16
46072: PUSH
46073: LD_INT 17
46075: PUSH
46076: LD_INT 18
46078: PUSH
46079: LD_INT 19
46081: PUSH
46082: LD_INT 20
46084: PUSH
46085: LD_INT 21
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: LIST
46095: LIST
46096: LIST
46097: LIST
46098: LIST
46099: LIST
46100: LIST
46101: LIST
46102: IN
46103: NOT
46104: OR
46105: PUSH
46106: LD_VAR 0 8
46110: PUSH
46111: LD_INT 5
46113: ARRAY
46114: NOT
46115: OR
46116: PUSH
46117: LD_VAR 0 8
46121: PUSH
46122: LD_INT 6
46124: ARRAY
46125: PUSH
46126: LD_INT 1
46128: PUSH
46129: LD_INT 2
46131: PUSH
46132: LD_INT 7
46134: PUSH
46135: LD_INT 9
46137: PUSH
46138: LD_INT 10
46140: PUSH
46141: LD_INT 11
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: IN
46152: NOT
46153: OR
46154: IFFALSE 46160
// exit ;
46156: POP
46157: POP
46158: GO 46243
// end ;
46160: GO 45831
46162: POP
46163: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
46164: LD_VAR 0 9
46168: PPUSH
46169: LD_VAR 0 3
46173: PPUSH
46174: LD_VAR 0 4
46178: PPUSH
46179: LD_INT 20
46181: PPUSH
46182: CALL 38195 0 4
46186: PUSH
46187: LD_INT 4
46189: ARRAY
46190: IFFALSE 46194
// exit ;
46192: GO 46243
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
46194: LD_VAR 0 2
46198: PUSH
46199: LD_INT 29
46201: PUSH
46202: LD_INT 30
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: IN
46209: PUSH
46210: LD_VAR 0 3
46214: PPUSH
46215: LD_VAR 0 4
46219: PPUSH
46220: LD_VAR 0 9
46224: PPUSH
46225: CALL_OW 440
46229: NOT
46230: AND
46231: IFFALSE 46235
// exit ;
46233: GO 46243
// result := true ;
46235: LD_ADDR_VAR 0 6
46239: PUSH
46240: LD_INT 1
46242: ST_TO_ADDR
// end ;
46243: LD_VAR 0 6
46247: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
46248: LD_INT 0
46250: PPUSH
46251: PPUSH
46252: PPUSH
46253: PPUSH
46254: PPUSH
46255: PPUSH
46256: PPUSH
46257: PPUSH
46258: PPUSH
46259: PPUSH
46260: PPUSH
46261: PPUSH
46262: PPUSH
46263: PPUSH
46264: PPUSH
46265: PPUSH
46266: PPUSH
46267: PPUSH
46268: PPUSH
46269: PPUSH
46270: PPUSH
46271: PPUSH
46272: PPUSH
46273: PPUSH
46274: PPUSH
46275: PPUSH
46276: PPUSH
46277: PPUSH
46278: PPUSH
46279: PPUSH
46280: PPUSH
46281: PPUSH
46282: PPUSH
46283: PPUSH
46284: PPUSH
46285: PPUSH
46286: PPUSH
46287: PPUSH
46288: PPUSH
46289: PPUSH
46290: PPUSH
46291: PPUSH
46292: PPUSH
46293: PPUSH
46294: PPUSH
46295: PPUSH
46296: PPUSH
46297: PPUSH
46298: PPUSH
46299: PPUSH
46300: PPUSH
46301: PPUSH
46302: PPUSH
46303: PPUSH
46304: PPUSH
46305: PPUSH
46306: PPUSH
46307: PPUSH
// result = [ ] ;
46308: LD_ADDR_VAR 0 7
46312: PUSH
46313: EMPTY
46314: ST_TO_ADDR
// temp_list = [ ] ;
46315: LD_ADDR_VAR 0 9
46319: PUSH
46320: EMPTY
46321: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
46322: LD_VAR 0 4
46326: PUSH
46327: LD_INT 0
46329: PUSH
46330: LD_INT 1
46332: PUSH
46333: LD_INT 2
46335: PUSH
46336: LD_INT 3
46338: PUSH
46339: LD_INT 4
46341: PUSH
46342: LD_INT 5
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: LIST
46349: LIST
46350: LIST
46351: LIST
46352: IN
46353: NOT
46354: PUSH
46355: LD_VAR 0 1
46359: PUSH
46360: LD_INT 0
46362: PUSH
46363: LD_INT 1
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: IN
46370: PUSH
46371: LD_VAR 0 5
46375: PUSH
46376: LD_INT 1
46378: PUSH
46379: LD_INT 2
46381: PUSH
46382: LD_INT 3
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: LIST
46389: IN
46390: NOT
46391: AND
46392: OR
46393: IFFALSE 46397
// exit ;
46395: GO 64788
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
46397: LD_VAR 0 1
46401: PUSH
46402: LD_INT 6
46404: PUSH
46405: LD_INT 7
46407: PUSH
46408: LD_INT 8
46410: PUSH
46411: LD_INT 13
46413: PUSH
46414: LD_INT 12
46416: PUSH
46417: LD_INT 15
46419: PUSH
46420: LD_INT 11
46422: PUSH
46423: LD_INT 14
46425: PUSH
46426: LD_INT 10
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: IN
46440: IFFALSE 46450
// btype = b_lab ;
46442: LD_ADDR_VAR 0 1
46446: PUSH
46447: LD_INT 6
46449: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
46450: LD_VAR 0 6
46454: PUSH
46455: LD_INT 0
46457: PUSH
46458: LD_INT 1
46460: PUSH
46461: LD_INT 2
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: LIST
46468: IN
46469: NOT
46470: PUSH
46471: LD_VAR 0 1
46475: PUSH
46476: LD_INT 0
46478: PUSH
46479: LD_INT 1
46481: PUSH
46482: LD_INT 2
46484: PUSH
46485: LD_INT 3
46487: PUSH
46488: LD_INT 6
46490: PUSH
46491: LD_INT 36
46493: PUSH
46494: LD_INT 4
46496: PUSH
46497: LD_INT 5
46499: PUSH
46500: LD_INT 31
46502: PUSH
46503: LD_INT 32
46505: PUSH
46506: LD_INT 33
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: IN
46522: NOT
46523: PUSH
46524: LD_VAR 0 6
46528: PUSH
46529: LD_INT 1
46531: EQUAL
46532: AND
46533: OR
46534: PUSH
46535: LD_VAR 0 1
46539: PUSH
46540: LD_INT 2
46542: PUSH
46543: LD_INT 3
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: IN
46550: NOT
46551: PUSH
46552: LD_VAR 0 6
46556: PUSH
46557: LD_INT 2
46559: EQUAL
46560: AND
46561: OR
46562: IFFALSE 46572
// mode = 0 ;
46564: LD_ADDR_VAR 0 6
46568: PUSH
46569: LD_INT 0
46571: ST_TO_ADDR
// case mode of 0 :
46572: LD_VAR 0 6
46576: PUSH
46577: LD_INT 0
46579: DOUBLE
46580: EQUAL
46581: IFTRUE 46585
46583: GO 58038
46585: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46586: LD_ADDR_VAR 0 11
46590: PUSH
46591: LD_INT 0
46593: PUSH
46594: LD_INT 0
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 0
46603: PUSH
46604: LD_INT 1
46606: NEG
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 1
46614: PUSH
46615: LD_INT 0
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 1
46624: PUSH
46625: LD_INT 1
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 0
46634: PUSH
46635: LD_INT 1
46637: PUSH
46638: EMPTY
46639: LIST
46640: LIST
46641: PUSH
46642: LD_INT 1
46644: NEG
46645: PUSH
46646: LD_INT 0
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: PUSH
46653: LD_INT 1
46655: NEG
46656: PUSH
46657: LD_INT 1
46659: NEG
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: LD_INT 1
46667: NEG
46668: PUSH
46669: LD_INT 2
46671: NEG
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 0
46679: PUSH
46680: LD_INT 2
46682: NEG
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 1
46690: PUSH
46691: LD_INT 1
46693: NEG
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 1
46701: PUSH
46702: LD_INT 2
46704: PUSH
46705: EMPTY
46706: LIST
46707: LIST
46708: PUSH
46709: LD_INT 0
46711: PUSH
46712: LD_INT 2
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: LD_INT 1
46721: NEG
46722: PUSH
46723: LD_INT 1
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: LD_INT 1
46732: PUSH
46733: LD_INT 3
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: LD_INT 0
46742: PUSH
46743: LD_INT 3
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: LD_INT 1
46752: NEG
46753: PUSH
46754: LD_INT 2
46756: PUSH
46757: EMPTY
46758: LIST
46759: LIST
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46779: LD_ADDR_VAR 0 12
46783: PUSH
46784: LD_INT 0
46786: PUSH
46787: LD_INT 0
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: LD_INT 0
46796: PUSH
46797: LD_INT 1
46799: NEG
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: PUSH
46805: LD_INT 1
46807: PUSH
46808: LD_INT 0
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 1
46817: PUSH
46818: LD_INT 1
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PUSH
46825: LD_INT 0
46827: PUSH
46828: LD_INT 1
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 1
46837: NEG
46838: PUSH
46839: LD_INT 0
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 1
46848: NEG
46849: PUSH
46850: LD_INT 1
46852: NEG
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 1
46860: PUSH
46861: LD_INT 1
46863: NEG
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 2
46871: PUSH
46872: LD_INT 0
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 2
46881: PUSH
46882: LD_INT 1
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 1
46891: NEG
46892: PUSH
46893: LD_INT 1
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 2
46902: NEG
46903: PUSH
46904: LD_INT 0
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 2
46913: NEG
46914: PUSH
46915: LD_INT 1
46917: NEG
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 2
46925: NEG
46926: PUSH
46927: LD_INT 1
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 3
46936: NEG
46937: PUSH
46938: LD_INT 0
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: LD_INT 3
46947: NEG
46948: PUSH
46949: LD_INT 1
46951: NEG
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46975: LD_ADDR_VAR 0 13
46979: PUSH
46980: LD_INT 0
46982: PUSH
46983: LD_INT 0
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: PUSH
46990: LD_INT 0
46992: PUSH
46993: LD_INT 1
46995: NEG
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: PUSH
47001: LD_INT 1
47003: PUSH
47004: LD_INT 0
47006: PUSH
47007: EMPTY
47008: LIST
47009: LIST
47010: PUSH
47011: LD_INT 1
47013: PUSH
47014: LD_INT 1
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 0
47023: PUSH
47024: LD_INT 1
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 1
47033: NEG
47034: PUSH
47035: LD_INT 0
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: LD_INT 1
47044: NEG
47045: PUSH
47046: LD_INT 1
47048: NEG
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 1
47056: NEG
47057: PUSH
47058: LD_INT 2
47060: NEG
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 2
47068: PUSH
47069: LD_INT 1
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 2
47078: PUSH
47079: LD_INT 2
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 1
47088: PUSH
47089: LD_INT 2
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 2
47098: NEG
47099: PUSH
47100: LD_INT 1
47102: NEG
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 2
47110: NEG
47111: PUSH
47112: LD_INT 2
47114: NEG
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 2
47122: NEG
47123: PUSH
47124: LD_INT 3
47126: NEG
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 3
47134: NEG
47135: PUSH
47136: LD_INT 2
47138: NEG
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 3
47146: NEG
47147: PUSH
47148: LD_INT 3
47150: NEG
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: LIST
47167: LIST
47168: LIST
47169: LIST
47170: LIST
47171: LIST
47172: LIST
47173: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47174: LD_ADDR_VAR 0 14
47178: PUSH
47179: LD_INT 0
47181: PUSH
47182: LD_INT 0
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PUSH
47189: LD_INT 0
47191: PUSH
47192: LD_INT 1
47194: NEG
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 1
47202: PUSH
47203: LD_INT 0
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 1
47212: PUSH
47213: LD_INT 1
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 0
47222: PUSH
47223: LD_INT 1
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 1
47232: NEG
47233: PUSH
47234: LD_INT 0
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 1
47243: NEG
47244: PUSH
47245: LD_INT 1
47247: NEG
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 1
47255: NEG
47256: PUSH
47257: LD_INT 2
47259: NEG
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 0
47267: PUSH
47268: LD_INT 2
47270: NEG
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 1
47278: PUSH
47279: LD_INT 1
47281: NEG
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 1
47289: PUSH
47290: LD_INT 2
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 0
47299: PUSH
47300: LD_INT 2
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 1
47309: NEG
47310: PUSH
47311: LD_INT 1
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 1
47320: NEG
47321: PUSH
47322: LD_INT 3
47324: NEG
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: PUSH
47330: LD_INT 0
47332: PUSH
47333: LD_INT 3
47335: NEG
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: PUSH
47341: LD_INT 1
47343: PUSH
47344: LD_INT 2
47346: NEG
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47370: LD_ADDR_VAR 0 15
47374: PUSH
47375: LD_INT 0
47377: PUSH
47378: LD_INT 0
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 0
47387: PUSH
47388: LD_INT 1
47390: NEG
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: LD_INT 1
47398: PUSH
47399: LD_INT 0
47401: PUSH
47402: EMPTY
47403: LIST
47404: LIST
47405: PUSH
47406: LD_INT 1
47408: PUSH
47409: LD_INT 1
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 0
47418: PUSH
47419: LD_INT 1
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 1
47428: NEG
47429: PUSH
47430: LD_INT 0
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: LD_INT 1
47439: NEG
47440: PUSH
47441: LD_INT 1
47443: NEG
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 1
47451: PUSH
47452: LD_INT 1
47454: NEG
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: PUSH
47460: LD_INT 2
47462: PUSH
47463: LD_INT 0
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 2
47472: PUSH
47473: LD_INT 1
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 1
47482: NEG
47483: PUSH
47484: LD_INT 1
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: PUSH
47491: LD_INT 2
47493: NEG
47494: PUSH
47495: LD_INT 0
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 2
47504: NEG
47505: PUSH
47506: LD_INT 1
47508: NEG
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 2
47516: PUSH
47517: LD_INT 1
47519: NEG
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 3
47527: PUSH
47528: LD_INT 0
47530: PUSH
47531: EMPTY
47532: LIST
47533: LIST
47534: PUSH
47535: LD_INT 3
47537: PUSH
47538: LD_INT 1
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: LIST
47553: LIST
47554: LIST
47555: LIST
47556: LIST
47557: LIST
47558: LIST
47559: LIST
47560: LIST
47561: LIST
47562: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47563: LD_ADDR_VAR 0 16
47567: PUSH
47568: LD_INT 0
47570: PUSH
47571: LD_INT 0
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 0
47580: PUSH
47581: LD_INT 1
47583: NEG
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 1
47591: PUSH
47592: LD_INT 0
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 1
47601: PUSH
47602: LD_INT 1
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 0
47611: PUSH
47612: LD_INT 1
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: LD_INT 1
47621: NEG
47622: PUSH
47623: LD_INT 0
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 1
47632: NEG
47633: PUSH
47634: LD_INT 1
47636: NEG
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 1
47644: NEG
47645: PUSH
47646: LD_INT 2
47648: NEG
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 2
47656: PUSH
47657: LD_INT 1
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 2
47666: PUSH
47667: LD_INT 2
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 1
47676: PUSH
47677: LD_INT 2
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 2
47686: NEG
47687: PUSH
47688: LD_INT 1
47690: NEG
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 2
47698: NEG
47699: PUSH
47700: LD_INT 2
47702: NEG
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: PUSH
47708: LD_INT 3
47710: PUSH
47711: LD_INT 2
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: LD_INT 3
47720: PUSH
47721: LD_INT 3
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: PUSH
47728: LD_INT 2
47730: PUSH
47731: LD_INT 3
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: LIST
47742: LIST
47743: LIST
47744: LIST
47745: LIST
47746: LIST
47747: LIST
47748: LIST
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: LIST
47754: LIST
47755: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47756: LD_ADDR_VAR 0 17
47760: PUSH
47761: LD_INT 0
47763: PUSH
47764: LD_INT 0
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 0
47773: PUSH
47774: LD_INT 1
47776: NEG
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 1
47784: PUSH
47785: LD_INT 0
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 1
47794: PUSH
47795: LD_INT 1
47797: PUSH
47798: EMPTY
47799: LIST
47800: LIST
47801: PUSH
47802: LD_INT 0
47804: PUSH
47805: LD_INT 1
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 1
47814: NEG
47815: PUSH
47816: LD_INT 0
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 1
47825: NEG
47826: PUSH
47827: LD_INT 1
47829: NEG
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: LD_INT 1
47837: NEG
47838: PUSH
47839: LD_INT 2
47841: NEG
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 0
47849: PUSH
47850: LD_INT 2
47852: NEG
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: LD_INT 1
47860: PUSH
47861: LD_INT 1
47863: NEG
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: LD_INT 2
47871: PUSH
47872: LD_INT 0
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 2
47881: PUSH
47882: LD_INT 1
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 2
47891: PUSH
47892: LD_INT 2
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 1
47901: PUSH
47902: LD_INT 2
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 0
47911: PUSH
47912: LD_INT 2
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 1
47921: NEG
47922: PUSH
47923: LD_INT 1
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 2
47932: NEG
47933: PUSH
47934: LD_INT 0
47936: PUSH
47937: EMPTY
47938: LIST
47939: LIST
47940: PUSH
47941: LD_INT 2
47943: NEG
47944: PUSH
47945: LD_INT 1
47947: NEG
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 2
47955: NEG
47956: PUSH
47957: LD_INT 2
47959: NEG
47960: PUSH
47961: EMPTY
47962: LIST
47963: LIST
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47986: LD_ADDR_VAR 0 18
47990: PUSH
47991: LD_INT 0
47993: PUSH
47994: LD_INT 0
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 0
48003: PUSH
48004: LD_INT 1
48006: NEG
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 1
48014: PUSH
48015: LD_INT 0
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: LD_INT 1
48024: PUSH
48025: LD_INT 1
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 0
48034: PUSH
48035: LD_INT 1
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 1
48044: NEG
48045: PUSH
48046: LD_INT 0
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 1
48055: NEG
48056: PUSH
48057: LD_INT 1
48059: NEG
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 1
48067: NEG
48068: PUSH
48069: LD_INT 2
48071: NEG
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 0
48079: PUSH
48080: LD_INT 2
48082: NEG
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 1
48090: PUSH
48091: LD_INT 1
48093: NEG
48094: PUSH
48095: EMPTY
48096: LIST
48097: LIST
48098: PUSH
48099: LD_INT 2
48101: PUSH
48102: LD_INT 0
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 2
48111: PUSH
48112: LD_INT 1
48114: PUSH
48115: EMPTY
48116: LIST
48117: LIST
48118: PUSH
48119: LD_INT 2
48121: PUSH
48122: LD_INT 2
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: LD_INT 1
48131: PUSH
48132: LD_INT 2
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 0
48141: PUSH
48142: LD_INT 2
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 1
48151: NEG
48152: PUSH
48153: LD_INT 1
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 2
48162: NEG
48163: PUSH
48164: LD_INT 0
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 2
48173: NEG
48174: PUSH
48175: LD_INT 1
48177: NEG
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 2
48185: NEG
48186: PUSH
48187: LD_INT 2
48189: NEG
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: LIST
48214: LIST
48215: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48216: LD_ADDR_VAR 0 19
48220: PUSH
48221: LD_INT 0
48223: PUSH
48224: LD_INT 0
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 0
48233: PUSH
48234: LD_INT 1
48236: NEG
48237: PUSH
48238: EMPTY
48239: LIST
48240: LIST
48241: PUSH
48242: LD_INT 1
48244: PUSH
48245: LD_INT 0
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_INT 1
48254: PUSH
48255: LD_INT 1
48257: PUSH
48258: EMPTY
48259: LIST
48260: LIST
48261: PUSH
48262: LD_INT 0
48264: PUSH
48265: LD_INT 1
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 1
48274: NEG
48275: PUSH
48276: LD_INT 0
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 1
48285: NEG
48286: PUSH
48287: LD_INT 1
48289: NEG
48290: PUSH
48291: EMPTY
48292: LIST
48293: LIST
48294: PUSH
48295: LD_INT 1
48297: NEG
48298: PUSH
48299: LD_INT 2
48301: NEG
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 0
48309: PUSH
48310: LD_INT 2
48312: NEG
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 1
48320: PUSH
48321: LD_INT 1
48323: NEG
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PUSH
48329: LD_INT 2
48331: PUSH
48332: LD_INT 0
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: LD_INT 2
48341: PUSH
48342: LD_INT 1
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: PUSH
48349: LD_INT 2
48351: PUSH
48352: LD_INT 2
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 1
48361: PUSH
48362: LD_INT 2
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 0
48371: PUSH
48372: LD_INT 2
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 1
48381: NEG
48382: PUSH
48383: LD_INT 1
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 2
48392: NEG
48393: PUSH
48394: LD_INT 0
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 2
48403: NEG
48404: PUSH
48405: LD_INT 1
48407: NEG
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 2
48415: NEG
48416: PUSH
48417: LD_INT 2
48419: NEG
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: LIST
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: LIST
48442: LIST
48443: LIST
48444: LIST
48445: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48446: LD_ADDR_VAR 0 20
48450: PUSH
48451: LD_INT 0
48453: PUSH
48454: LD_INT 0
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 0
48463: PUSH
48464: LD_INT 1
48466: NEG
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: PUSH
48472: LD_INT 1
48474: PUSH
48475: LD_INT 0
48477: PUSH
48478: EMPTY
48479: LIST
48480: LIST
48481: PUSH
48482: LD_INT 1
48484: PUSH
48485: LD_INT 1
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: LD_INT 0
48494: PUSH
48495: LD_INT 1
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: PUSH
48502: LD_INT 1
48504: NEG
48505: PUSH
48506: LD_INT 0
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: LD_INT 1
48515: NEG
48516: PUSH
48517: LD_INT 1
48519: NEG
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: PUSH
48525: LD_INT 1
48527: NEG
48528: PUSH
48529: LD_INT 2
48531: NEG
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: PUSH
48537: LD_INT 0
48539: PUSH
48540: LD_INT 2
48542: NEG
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: LD_INT 1
48550: PUSH
48551: LD_INT 1
48553: NEG
48554: PUSH
48555: EMPTY
48556: LIST
48557: LIST
48558: PUSH
48559: LD_INT 2
48561: PUSH
48562: LD_INT 0
48564: PUSH
48565: EMPTY
48566: LIST
48567: LIST
48568: PUSH
48569: LD_INT 2
48571: PUSH
48572: LD_INT 1
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 2
48581: PUSH
48582: LD_INT 2
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PUSH
48589: LD_INT 1
48591: PUSH
48592: LD_INT 2
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 0
48601: PUSH
48602: LD_INT 2
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 1
48611: NEG
48612: PUSH
48613: LD_INT 1
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: LD_INT 2
48622: NEG
48623: PUSH
48624: LD_INT 0
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 2
48633: NEG
48634: PUSH
48635: LD_INT 1
48637: NEG
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: PUSH
48643: LD_INT 2
48645: NEG
48646: PUSH
48647: LD_INT 2
48649: NEG
48650: PUSH
48651: EMPTY
48652: LIST
48653: LIST
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48676: LD_ADDR_VAR 0 21
48680: PUSH
48681: LD_INT 0
48683: PUSH
48684: LD_INT 0
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: PUSH
48691: LD_INT 0
48693: PUSH
48694: LD_INT 1
48696: NEG
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 1
48704: PUSH
48705: LD_INT 0
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 1
48714: PUSH
48715: LD_INT 1
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 0
48724: PUSH
48725: LD_INT 1
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: LD_INT 1
48734: NEG
48735: PUSH
48736: LD_INT 0
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 1
48745: NEG
48746: PUSH
48747: LD_INT 1
48749: NEG
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 1
48757: NEG
48758: PUSH
48759: LD_INT 2
48761: NEG
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: PUSH
48767: LD_INT 0
48769: PUSH
48770: LD_INT 2
48772: NEG
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: PUSH
48778: LD_INT 1
48780: PUSH
48781: LD_INT 1
48783: NEG
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 2
48791: PUSH
48792: LD_INT 0
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 2
48801: PUSH
48802: LD_INT 1
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 2
48811: PUSH
48812: LD_INT 2
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 1
48821: PUSH
48822: LD_INT 2
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 0
48831: PUSH
48832: LD_INT 2
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 1
48841: NEG
48842: PUSH
48843: LD_INT 1
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 2
48852: NEG
48853: PUSH
48854: LD_INT 0
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 2
48863: NEG
48864: PUSH
48865: LD_INT 1
48867: NEG
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 2
48875: NEG
48876: PUSH
48877: LD_INT 2
48879: NEG
48880: PUSH
48881: EMPTY
48882: LIST
48883: LIST
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: LIST
48895: LIST
48896: LIST
48897: LIST
48898: LIST
48899: LIST
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48906: LD_ADDR_VAR 0 22
48910: PUSH
48911: LD_INT 0
48913: PUSH
48914: LD_INT 0
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 0
48923: PUSH
48924: LD_INT 1
48926: NEG
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 1
48934: PUSH
48935: LD_INT 0
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 1
48944: PUSH
48945: LD_INT 1
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 0
48954: PUSH
48955: LD_INT 1
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 1
48964: NEG
48965: PUSH
48966: LD_INT 0
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 1
48975: NEG
48976: PUSH
48977: LD_INT 1
48979: NEG
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: LD_INT 1
48987: NEG
48988: PUSH
48989: LD_INT 2
48991: NEG
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PUSH
48997: LD_INT 0
48999: PUSH
49000: LD_INT 2
49002: NEG
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: LD_INT 1
49010: PUSH
49011: LD_INT 1
49013: NEG
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 2
49021: PUSH
49022: LD_INT 0
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 2
49031: PUSH
49032: LD_INT 1
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 2
49041: PUSH
49042: LD_INT 2
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 1
49051: PUSH
49052: LD_INT 2
49054: PUSH
49055: EMPTY
49056: LIST
49057: LIST
49058: PUSH
49059: LD_INT 0
49061: PUSH
49062: LD_INT 2
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: LD_INT 1
49071: NEG
49072: PUSH
49073: LD_INT 1
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 2
49082: NEG
49083: PUSH
49084: LD_INT 0
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 2
49093: NEG
49094: PUSH
49095: LD_INT 1
49097: NEG
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 2
49105: NEG
49106: PUSH
49107: LD_INT 2
49109: NEG
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49136: LD_ADDR_VAR 0 23
49140: PUSH
49141: LD_INT 0
49143: PUSH
49144: LD_INT 0
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 0
49153: PUSH
49154: LD_INT 1
49156: NEG
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 1
49164: PUSH
49165: LD_INT 0
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 1
49174: PUSH
49175: LD_INT 1
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 0
49184: PUSH
49185: LD_INT 1
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 1
49194: NEG
49195: PUSH
49196: LD_INT 0
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 1
49205: NEG
49206: PUSH
49207: LD_INT 1
49209: NEG
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 1
49217: NEG
49218: PUSH
49219: LD_INT 2
49221: NEG
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 0
49229: PUSH
49230: LD_INT 2
49232: NEG
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 1
49240: PUSH
49241: LD_INT 1
49243: NEG
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: LD_INT 2
49251: PUSH
49252: LD_INT 0
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: LD_INT 2
49261: PUSH
49262: LD_INT 1
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 2
49271: PUSH
49272: LD_INT 2
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 1
49281: PUSH
49282: LD_INT 2
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 0
49291: PUSH
49292: LD_INT 2
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 1
49301: NEG
49302: PUSH
49303: LD_INT 1
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 2
49312: NEG
49313: PUSH
49314: LD_INT 0
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 2
49323: NEG
49324: PUSH
49325: LD_INT 1
49327: NEG
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: LD_INT 2
49335: NEG
49336: PUSH
49337: LD_INT 2
49339: NEG
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 2
49347: NEG
49348: PUSH
49349: LD_INT 3
49351: NEG
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 1
49359: NEG
49360: PUSH
49361: LD_INT 3
49363: NEG
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 1
49371: PUSH
49372: LD_INT 2
49374: NEG
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 2
49382: PUSH
49383: LD_INT 1
49385: NEG
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: LIST
49414: LIST
49415: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
49416: LD_ADDR_VAR 0 24
49420: PUSH
49421: LD_INT 0
49423: PUSH
49424: LD_INT 0
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: PUSH
49431: LD_INT 0
49433: PUSH
49434: LD_INT 1
49436: NEG
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 1
49444: PUSH
49445: LD_INT 0
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 1
49454: PUSH
49455: LD_INT 1
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 0
49464: PUSH
49465: LD_INT 1
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 1
49474: NEG
49475: PUSH
49476: LD_INT 0
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: PUSH
49483: LD_INT 1
49485: NEG
49486: PUSH
49487: LD_INT 1
49489: NEG
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 1
49497: NEG
49498: PUSH
49499: LD_INT 2
49501: NEG
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 0
49509: PUSH
49510: LD_INT 2
49512: NEG
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 1
49520: PUSH
49521: LD_INT 1
49523: NEG
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 2
49531: PUSH
49532: LD_INT 0
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 2
49541: PUSH
49542: LD_INT 1
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 2
49551: PUSH
49552: LD_INT 2
49554: PUSH
49555: EMPTY
49556: LIST
49557: LIST
49558: PUSH
49559: LD_INT 1
49561: PUSH
49562: LD_INT 2
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 0
49571: PUSH
49572: LD_INT 2
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 1
49581: NEG
49582: PUSH
49583: LD_INT 1
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 2
49592: NEG
49593: PUSH
49594: LD_INT 0
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 2
49603: NEG
49604: PUSH
49605: LD_INT 1
49607: NEG
49608: PUSH
49609: EMPTY
49610: LIST
49611: LIST
49612: PUSH
49613: LD_INT 2
49615: NEG
49616: PUSH
49617: LD_INT 2
49619: NEG
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: LD_INT 1
49627: PUSH
49628: LD_INT 2
49630: NEG
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 2
49638: PUSH
49639: LD_INT 1
49641: NEG
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 3
49649: PUSH
49650: LD_INT 1
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: LD_INT 3
49659: PUSH
49660: LD_INT 2
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
49692: LD_ADDR_VAR 0 25
49696: PUSH
49697: LD_INT 0
49699: PUSH
49700: LD_INT 0
49702: PUSH
49703: EMPTY
49704: LIST
49705: LIST
49706: PUSH
49707: LD_INT 0
49709: PUSH
49710: LD_INT 1
49712: NEG
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 1
49720: PUSH
49721: LD_INT 0
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 1
49730: PUSH
49731: LD_INT 1
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 0
49740: PUSH
49741: LD_INT 1
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: LD_INT 1
49750: NEG
49751: PUSH
49752: LD_INT 0
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 1
49761: NEG
49762: PUSH
49763: LD_INT 1
49765: NEG
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 1
49773: NEG
49774: PUSH
49775: LD_INT 2
49777: NEG
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: LD_INT 0
49785: PUSH
49786: LD_INT 2
49788: NEG
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: LD_INT 1
49796: PUSH
49797: LD_INT 1
49799: NEG
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 2
49807: PUSH
49808: LD_INT 0
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 2
49817: PUSH
49818: LD_INT 1
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 2
49827: PUSH
49828: LD_INT 2
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 1
49837: PUSH
49838: LD_INT 2
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: LD_INT 0
49847: PUSH
49848: LD_INT 2
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: LD_INT 1
49857: NEG
49858: PUSH
49859: LD_INT 1
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PUSH
49866: LD_INT 2
49868: NEG
49869: PUSH
49870: LD_INT 0
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: LD_INT 2
49879: NEG
49880: PUSH
49881: LD_INT 1
49883: NEG
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 2
49891: NEG
49892: PUSH
49893: LD_INT 2
49895: NEG
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 3
49903: PUSH
49904: LD_INT 1
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 3
49913: PUSH
49914: LD_INT 2
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 2
49923: PUSH
49924: LD_INT 3
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 1
49933: PUSH
49934: LD_INT 3
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: LIST
49947: LIST
49948: LIST
49949: LIST
49950: LIST
49951: LIST
49952: LIST
49953: LIST
49954: LIST
49955: LIST
49956: LIST
49957: LIST
49958: LIST
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49966: LD_ADDR_VAR 0 26
49970: PUSH
49971: LD_INT 0
49973: PUSH
49974: LD_INT 0
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 0
49983: PUSH
49984: LD_INT 1
49986: NEG
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 1
49994: PUSH
49995: LD_INT 0
49997: PUSH
49998: EMPTY
49999: LIST
50000: LIST
50001: PUSH
50002: LD_INT 1
50004: PUSH
50005: LD_INT 1
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 0
50014: PUSH
50015: LD_INT 1
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 1
50024: NEG
50025: PUSH
50026: LD_INT 0
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 1
50035: NEG
50036: PUSH
50037: LD_INT 1
50039: NEG
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: LD_INT 1
50047: NEG
50048: PUSH
50049: LD_INT 2
50051: NEG
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 0
50059: PUSH
50060: LD_INT 2
50062: NEG
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 1
50070: PUSH
50071: LD_INT 1
50073: NEG
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 2
50081: PUSH
50082: LD_INT 0
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 2
50091: PUSH
50092: LD_INT 1
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 2
50101: PUSH
50102: LD_INT 2
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: LD_INT 1
50111: PUSH
50112: LD_INT 2
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 0
50121: PUSH
50122: LD_INT 2
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 1
50131: NEG
50132: PUSH
50133: LD_INT 1
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 2
50142: NEG
50143: PUSH
50144: LD_INT 0
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 2
50153: NEG
50154: PUSH
50155: LD_INT 1
50157: NEG
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: PUSH
50163: LD_INT 2
50165: NEG
50166: PUSH
50167: LD_INT 2
50169: NEG
50170: PUSH
50171: EMPTY
50172: LIST
50173: LIST
50174: PUSH
50175: LD_INT 2
50177: PUSH
50178: LD_INT 3
50180: PUSH
50181: EMPTY
50182: LIST
50183: LIST
50184: PUSH
50185: LD_INT 1
50187: PUSH
50188: LD_INT 3
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 1
50197: NEG
50198: PUSH
50199: LD_INT 2
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 2
50208: NEG
50209: PUSH
50210: LD_INT 1
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50242: LD_ADDR_VAR 0 27
50246: PUSH
50247: LD_INT 0
50249: PUSH
50250: LD_INT 0
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 0
50259: PUSH
50260: LD_INT 1
50262: NEG
50263: PUSH
50264: EMPTY
50265: LIST
50266: LIST
50267: PUSH
50268: LD_INT 1
50270: PUSH
50271: LD_INT 0
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 1
50280: PUSH
50281: LD_INT 1
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 0
50290: PUSH
50291: LD_INT 1
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 1
50300: NEG
50301: PUSH
50302: LD_INT 0
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: LD_INT 1
50311: NEG
50312: PUSH
50313: LD_INT 1
50315: NEG
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: PUSH
50321: LD_INT 1
50323: NEG
50324: PUSH
50325: LD_INT 2
50327: NEG
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 0
50335: PUSH
50336: LD_INT 2
50338: NEG
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: LD_INT 1
50346: PUSH
50347: LD_INT 1
50349: NEG
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 2
50357: PUSH
50358: LD_INT 0
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 2
50367: PUSH
50368: LD_INT 1
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 2
50377: PUSH
50378: LD_INT 2
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_INT 1
50387: PUSH
50388: LD_INT 2
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 0
50397: PUSH
50398: LD_INT 2
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: PUSH
50405: LD_INT 1
50407: NEG
50408: PUSH
50409: LD_INT 1
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: LD_INT 2
50418: NEG
50419: PUSH
50420: LD_INT 0
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 2
50429: NEG
50430: PUSH
50431: LD_INT 1
50433: NEG
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 2
50441: NEG
50442: PUSH
50443: LD_INT 2
50445: NEG
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 1
50453: NEG
50454: PUSH
50455: LD_INT 2
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: LD_INT 2
50464: NEG
50465: PUSH
50466: LD_INT 1
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 3
50475: NEG
50476: PUSH
50477: LD_INT 1
50479: NEG
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 3
50487: NEG
50488: PUSH
50489: LD_INT 2
50491: NEG
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: LIST
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50522: LD_ADDR_VAR 0 28
50526: PUSH
50527: LD_INT 0
50529: PUSH
50530: LD_INT 0
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 0
50539: PUSH
50540: LD_INT 1
50542: NEG
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 1
50550: PUSH
50551: LD_INT 0
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 1
50560: PUSH
50561: LD_INT 1
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 0
50570: PUSH
50571: LD_INT 1
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 1
50580: NEG
50581: PUSH
50582: LD_INT 0
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 1
50591: NEG
50592: PUSH
50593: LD_INT 1
50595: NEG
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 1
50603: NEG
50604: PUSH
50605: LD_INT 2
50607: NEG
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: LD_INT 0
50615: PUSH
50616: LD_INT 2
50618: NEG
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 1
50626: PUSH
50627: LD_INT 1
50629: NEG
50630: PUSH
50631: EMPTY
50632: LIST
50633: LIST
50634: PUSH
50635: LD_INT 2
50637: PUSH
50638: LD_INT 0
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 2
50647: PUSH
50648: LD_INT 1
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 2
50657: PUSH
50658: LD_INT 2
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: LD_INT 1
50667: PUSH
50668: LD_INT 2
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: PUSH
50675: LD_INT 0
50677: PUSH
50678: LD_INT 2
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: LD_INT 1
50687: NEG
50688: PUSH
50689: LD_INT 1
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 2
50698: NEG
50699: PUSH
50700: LD_INT 0
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: PUSH
50707: LD_INT 2
50709: NEG
50710: PUSH
50711: LD_INT 1
50713: NEG
50714: PUSH
50715: EMPTY
50716: LIST
50717: LIST
50718: PUSH
50719: LD_INT 2
50721: NEG
50722: PUSH
50723: LD_INT 2
50725: NEG
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 2
50733: NEG
50734: PUSH
50735: LD_INT 3
50737: NEG
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 1
50745: NEG
50746: PUSH
50747: LD_INT 3
50749: NEG
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 3
50757: NEG
50758: PUSH
50759: LD_INT 1
50761: NEG
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 3
50769: NEG
50770: PUSH
50771: LD_INT 2
50773: NEG
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50804: LD_ADDR_VAR 0 29
50808: PUSH
50809: LD_INT 0
50811: PUSH
50812: LD_INT 0
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: LD_INT 0
50821: PUSH
50822: LD_INT 1
50824: NEG
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 1
50832: PUSH
50833: LD_INT 0
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 1
50842: PUSH
50843: LD_INT 1
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 0
50852: PUSH
50853: LD_INT 1
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 1
50862: NEG
50863: PUSH
50864: LD_INT 0
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 1
50873: NEG
50874: PUSH
50875: LD_INT 1
50877: NEG
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 1
50885: NEG
50886: PUSH
50887: LD_INT 2
50889: NEG
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: PUSH
50895: LD_INT 0
50897: PUSH
50898: LD_INT 2
50900: NEG
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: LD_INT 1
50908: PUSH
50909: LD_INT 1
50911: NEG
50912: PUSH
50913: EMPTY
50914: LIST
50915: LIST
50916: PUSH
50917: LD_INT 2
50919: PUSH
50920: LD_INT 0
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 2
50929: PUSH
50930: LD_INT 1
50932: PUSH
50933: EMPTY
50934: LIST
50935: LIST
50936: PUSH
50937: LD_INT 1
50939: PUSH
50940: LD_INT 2
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: LD_INT 0
50949: PUSH
50950: LD_INT 2
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: LD_INT 1
50959: NEG
50960: PUSH
50961: LD_INT 1
50963: PUSH
50964: EMPTY
50965: LIST
50966: LIST
50967: PUSH
50968: LD_INT 2
50970: NEG
50971: PUSH
50972: LD_INT 1
50974: NEG
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 2
50982: NEG
50983: PUSH
50984: LD_INT 2
50986: NEG
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 2
50994: NEG
50995: PUSH
50996: LD_INT 3
50998: NEG
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 2
51006: PUSH
51007: LD_INT 1
51009: NEG
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 3
51017: PUSH
51018: LD_INT 1
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: LD_INT 1
51027: PUSH
51028: LD_INT 3
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 1
51037: NEG
51038: PUSH
51039: LD_INT 2
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 3
51048: NEG
51049: PUSH
51050: LD_INT 2
51052: NEG
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51083: LD_ADDR_VAR 0 30
51087: PUSH
51088: LD_INT 0
51090: PUSH
51091: LD_INT 0
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: LD_INT 0
51100: PUSH
51101: LD_INT 1
51103: NEG
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 1
51111: PUSH
51112: LD_INT 0
51114: PUSH
51115: EMPTY
51116: LIST
51117: LIST
51118: PUSH
51119: LD_INT 1
51121: PUSH
51122: LD_INT 1
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 0
51131: PUSH
51132: LD_INT 1
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 1
51141: NEG
51142: PUSH
51143: LD_INT 0
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 1
51152: NEG
51153: PUSH
51154: LD_INT 1
51156: NEG
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 1
51164: NEG
51165: PUSH
51166: LD_INT 2
51168: NEG
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 0
51176: PUSH
51177: LD_INT 2
51179: NEG
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 1
51187: PUSH
51188: LD_INT 1
51190: NEG
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 2
51198: PUSH
51199: LD_INT 0
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: LD_INT 2
51208: PUSH
51209: LD_INT 1
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 2
51218: PUSH
51219: LD_INT 2
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 1
51228: PUSH
51229: LD_INT 2
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 1
51238: NEG
51239: PUSH
51240: LD_INT 1
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 2
51249: NEG
51250: PUSH
51251: LD_INT 0
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 2
51260: NEG
51261: PUSH
51262: LD_INT 1
51264: NEG
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 1
51272: NEG
51273: PUSH
51274: LD_INT 3
51276: NEG
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 1
51284: PUSH
51285: LD_INT 2
51287: NEG
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 3
51295: PUSH
51296: LD_INT 2
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 2
51305: PUSH
51306: LD_INT 3
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 2
51315: NEG
51316: PUSH
51317: LD_INT 1
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 3
51326: NEG
51327: PUSH
51328: LD_INT 1
51330: NEG
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51361: LD_ADDR_VAR 0 31
51365: PUSH
51366: LD_INT 0
51368: PUSH
51369: LD_INT 0
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 0
51378: PUSH
51379: LD_INT 1
51381: NEG
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 1
51389: PUSH
51390: LD_INT 0
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 1
51399: PUSH
51400: LD_INT 1
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 0
51409: PUSH
51410: LD_INT 1
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 1
51419: NEG
51420: PUSH
51421: LD_INT 0
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 1
51430: NEG
51431: PUSH
51432: LD_INT 1
51434: NEG
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: PUSH
51440: LD_INT 1
51442: NEG
51443: PUSH
51444: LD_INT 2
51446: NEG
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: LD_INT 1
51454: PUSH
51455: LD_INT 1
51457: NEG
51458: PUSH
51459: EMPTY
51460: LIST
51461: LIST
51462: PUSH
51463: LD_INT 2
51465: PUSH
51466: LD_INT 0
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: LD_INT 2
51475: PUSH
51476: LD_INT 1
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 2
51485: PUSH
51486: LD_INT 2
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 1
51495: PUSH
51496: LD_INT 2
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 0
51505: PUSH
51506: LD_INT 2
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 1
51515: NEG
51516: PUSH
51517: LD_INT 1
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 2
51526: NEG
51527: PUSH
51528: LD_INT 1
51530: NEG
51531: PUSH
51532: EMPTY
51533: LIST
51534: LIST
51535: PUSH
51536: LD_INT 2
51538: NEG
51539: PUSH
51540: LD_INT 2
51542: NEG
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: LD_INT 2
51550: NEG
51551: PUSH
51552: LD_INT 3
51554: NEG
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: PUSH
51560: LD_INT 2
51562: PUSH
51563: LD_INT 1
51565: NEG
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: LD_INT 3
51573: PUSH
51574: LD_INT 1
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 1
51583: PUSH
51584: LD_INT 3
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 1
51593: NEG
51594: PUSH
51595: LD_INT 2
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 3
51604: NEG
51605: PUSH
51606: LD_INT 2
51608: NEG
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: EMPTY
51615: LIST
51616: LIST
51617: LIST
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51639: LD_ADDR_VAR 0 32
51643: PUSH
51644: LD_INT 0
51646: PUSH
51647: LD_INT 0
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 0
51656: PUSH
51657: LD_INT 1
51659: NEG
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 1
51667: PUSH
51668: LD_INT 0
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 1
51677: PUSH
51678: LD_INT 1
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 0
51687: PUSH
51688: LD_INT 1
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 1
51697: NEG
51698: PUSH
51699: LD_INT 0
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 1
51708: NEG
51709: PUSH
51710: LD_INT 1
51712: NEG
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 1
51720: NEG
51721: PUSH
51722: LD_INT 2
51724: NEG
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PUSH
51730: LD_INT 0
51732: PUSH
51733: LD_INT 2
51735: NEG
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: LD_INT 1
51743: PUSH
51744: LD_INT 1
51746: NEG
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: PUSH
51752: LD_INT 2
51754: PUSH
51755: LD_INT 1
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: LD_INT 2
51764: PUSH
51765: LD_INT 2
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: LD_INT 1
51774: PUSH
51775: LD_INT 2
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: LD_INT 0
51784: PUSH
51785: LD_INT 2
51787: PUSH
51788: EMPTY
51789: LIST
51790: LIST
51791: PUSH
51792: LD_INT 1
51794: NEG
51795: PUSH
51796: LD_INT 1
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 2
51805: NEG
51806: PUSH
51807: LD_INT 0
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 2
51816: NEG
51817: PUSH
51818: LD_INT 1
51820: NEG
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: LD_INT 1
51828: NEG
51829: PUSH
51830: LD_INT 3
51832: NEG
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_INT 1
51840: PUSH
51841: LD_INT 2
51843: NEG
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 3
51851: PUSH
51852: LD_INT 2
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 2
51861: PUSH
51862: LD_INT 3
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 2
51871: NEG
51872: PUSH
51873: LD_INT 1
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 3
51882: NEG
51883: PUSH
51884: LD_INT 1
51886: NEG
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51917: LD_ADDR_VAR 0 33
51921: PUSH
51922: LD_INT 0
51924: PUSH
51925: LD_INT 0
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: PUSH
51932: LD_INT 0
51934: PUSH
51935: LD_INT 1
51937: NEG
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 1
51945: PUSH
51946: LD_INT 0
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 1
51955: PUSH
51956: LD_INT 1
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 0
51965: PUSH
51966: LD_INT 1
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 1
51975: NEG
51976: PUSH
51977: LD_INT 0
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: LD_INT 1
51986: NEG
51987: PUSH
51988: LD_INT 1
51990: NEG
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 1
51998: NEG
51999: PUSH
52000: LD_INT 2
52002: NEG
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: LD_INT 1
52010: PUSH
52011: LD_INT 1
52013: NEG
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 2
52021: PUSH
52022: LD_INT 0
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: LD_INT 2
52031: PUSH
52032: LD_INT 1
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 1
52041: PUSH
52042: LD_INT 2
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 0
52051: PUSH
52052: LD_INT 2
52054: PUSH
52055: EMPTY
52056: LIST
52057: LIST
52058: PUSH
52059: LD_INT 1
52061: NEG
52062: PUSH
52063: LD_INT 1
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 2
52072: NEG
52073: PUSH
52074: LD_INT 0
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: LD_INT 2
52083: NEG
52084: PUSH
52085: LD_INT 1
52087: NEG
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: LD_INT 2
52095: NEG
52096: PUSH
52097: LD_INT 2
52099: NEG
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 2
52107: NEG
52108: PUSH
52109: LD_INT 3
52111: NEG
52112: PUSH
52113: EMPTY
52114: LIST
52115: LIST
52116: PUSH
52117: LD_INT 2
52119: PUSH
52120: LD_INT 1
52122: NEG
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 3
52130: PUSH
52131: LD_INT 1
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 1
52140: PUSH
52141: LD_INT 3
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 1
52150: NEG
52151: PUSH
52152: LD_INT 2
52154: PUSH
52155: EMPTY
52156: LIST
52157: LIST
52158: PUSH
52159: LD_INT 3
52161: NEG
52162: PUSH
52163: LD_INT 2
52165: NEG
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: EMPTY
52172: LIST
52173: LIST
52174: LIST
52175: LIST
52176: LIST
52177: LIST
52178: LIST
52179: LIST
52180: LIST
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52196: LD_ADDR_VAR 0 34
52200: PUSH
52201: LD_INT 0
52203: PUSH
52204: LD_INT 0
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 0
52213: PUSH
52214: LD_INT 1
52216: NEG
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 1
52224: PUSH
52225: LD_INT 0
52227: PUSH
52228: EMPTY
52229: LIST
52230: LIST
52231: PUSH
52232: LD_INT 1
52234: PUSH
52235: LD_INT 1
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 0
52244: PUSH
52245: LD_INT 1
52247: PUSH
52248: EMPTY
52249: LIST
52250: LIST
52251: PUSH
52252: LD_INT 1
52254: NEG
52255: PUSH
52256: LD_INT 0
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 1
52265: NEG
52266: PUSH
52267: LD_INT 1
52269: NEG
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 1
52277: NEG
52278: PUSH
52279: LD_INT 2
52281: NEG
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: PUSH
52287: LD_INT 0
52289: PUSH
52290: LD_INT 2
52292: NEG
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 1
52300: PUSH
52301: LD_INT 1
52303: NEG
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 2
52311: PUSH
52312: LD_INT 1
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 2
52321: PUSH
52322: LD_INT 2
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 1
52331: PUSH
52332: LD_INT 2
52334: PUSH
52335: EMPTY
52336: LIST
52337: LIST
52338: PUSH
52339: LD_INT 1
52341: NEG
52342: PUSH
52343: LD_INT 1
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 2
52352: NEG
52353: PUSH
52354: LD_INT 0
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 2
52363: NEG
52364: PUSH
52365: LD_INT 1
52367: NEG
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 2
52375: NEG
52376: PUSH
52377: LD_INT 2
52379: NEG
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 1
52387: NEG
52388: PUSH
52389: LD_INT 3
52391: NEG
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 1
52399: PUSH
52400: LD_INT 2
52402: NEG
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 3
52410: PUSH
52411: LD_INT 2
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 2
52420: PUSH
52421: LD_INT 3
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 2
52430: NEG
52431: PUSH
52432: LD_INT 1
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 3
52441: NEG
52442: PUSH
52443: LD_INT 1
52445: NEG
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: LIST
52455: LIST
52456: LIST
52457: LIST
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52476: LD_ADDR_VAR 0 35
52480: PUSH
52481: LD_INT 0
52483: PUSH
52484: LD_INT 0
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: LD_INT 0
52493: PUSH
52494: LD_INT 1
52496: NEG
52497: PUSH
52498: EMPTY
52499: LIST
52500: LIST
52501: PUSH
52502: LD_INT 1
52504: PUSH
52505: LD_INT 0
52507: PUSH
52508: EMPTY
52509: LIST
52510: LIST
52511: PUSH
52512: LD_INT 1
52514: PUSH
52515: LD_INT 1
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 0
52524: PUSH
52525: LD_INT 1
52527: PUSH
52528: EMPTY
52529: LIST
52530: LIST
52531: PUSH
52532: LD_INT 1
52534: NEG
52535: PUSH
52536: LD_INT 0
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 1
52545: NEG
52546: PUSH
52547: LD_INT 1
52549: NEG
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 2
52557: PUSH
52558: LD_INT 1
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 2
52567: NEG
52568: PUSH
52569: LD_INT 1
52571: NEG
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52588: LD_ADDR_VAR 0 36
52592: PUSH
52593: LD_INT 0
52595: PUSH
52596: LD_INT 0
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 0
52605: PUSH
52606: LD_INT 1
52608: NEG
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: LD_INT 1
52616: PUSH
52617: LD_INT 0
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 1
52626: PUSH
52627: LD_INT 1
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: PUSH
52634: LD_INT 0
52636: PUSH
52637: LD_INT 1
52639: PUSH
52640: EMPTY
52641: LIST
52642: LIST
52643: PUSH
52644: LD_INT 1
52646: NEG
52647: PUSH
52648: LD_INT 0
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: LD_INT 1
52657: NEG
52658: PUSH
52659: LD_INT 1
52661: NEG
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: LD_INT 1
52669: NEG
52670: PUSH
52671: LD_INT 2
52673: NEG
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 1
52681: PUSH
52682: LD_INT 2
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52700: LD_ADDR_VAR 0 37
52704: PUSH
52705: LD_INT 0
52707: PUSH
52708: LD_INT 0
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: LD_INT 0
52717: PUSH
52718: LD_INT 1
52720: NEG
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 1
52728: PUSH
52729: LD_INT 0
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: LD_INT 1
52738: PUSH
52739: LD_INT 1
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: PUSH
52746: LD_INT 0
52748: PUSH
52749: LD_INT 1
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: PUSH
52756: LD_INT 1
52758: NEG
52759: PUSH
52760: LD_INT 0
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 1
52769: NEG
52770: PUSH
52771: LD_INT 1
52773: NEG
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 1
52781: PUSH
52782: LD_INT 1
52784: NEG
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 1
52792: NEG
52793: PUSH
52794: LD_INT 1
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: LIST
52805: LIST
52806: LIST
52807: LIST
52808: LIST
52809: LIST
52810: LIST
52811: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52812: LD_ADDR_VAR 0 38
52816: PUSH
52817: LD_INT 0
52819: PUSH
52820: LD_INT 0
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 0
52829: PUSH
52830: LD_INT 1
52832: NEG
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 1
52840: PUSH
52841: LD_INT 0
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 1
52850: PUSH
52851: LD_INT 1
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 0
52860: PUSH
52861: LD_INT 1
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 1
52870: NEG
52871: PUSH
52872: LD_INT 0
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 1
52881: NEG
52882: PUSH
52883: LD_INT 1
52885: NEG
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 2
52893: PUSH
52894: LD_INT 1
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: LD_INT 2
52903: NEG
52904: PUSH
52905: LD_INT 1
52907: NEG
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52924: LD_ADDR_VAR 0 39
52928: PUSH
52929: LD_INT 0
52931: PUSH
52932: LD_INT 0
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: PUSH
52939: LD_INT 0
52941: PUSH
52942: LD_INT 1
52944: NEG
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 1
52952: PUSH
52953: LD_INT 0
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 1
52962: PUSH
52963: LD_INT 1
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 0
52972: PUSH
52973: LD_INT 1
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 1
52982: NEG
52983: PUSH
52984: LD_INT 0
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PUSH
52991: LD_INT 1
52993: NEG
52994: PUSH
52995: LD_INT 1
52997: NEG
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 1
53005: NEG
53006: PUSH
53007: LD_INT 2
53009: NEG
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: LD_INT 1
53017: PUSH
53018: LD_INT 2
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53036: LD_ADDR_VAR 0 40
53040: PUSH
53041: LD_INT 0
53043: PUSH
53044: LD_INT 0
53046: PUSH
53047: EMPTY
53048: LIST
53049: LIST
53050: PUSH
53051: LD_INT 0
53053: PUSH
53054: LD_INT 1
53056: NEG
53057: PUSH
53058: EMPTY
53059: LIST
53060: LIST
53061: PUSH
53062: LD_INT 1
53064: PUSH
53065: LD_INT 0
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 1
53074: PUSH
53075: LD_INT 1
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 0
53084: PUSH
53085: LD_INT 1
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 1
53094: NEG
53095: PUSH
53096: LD_INT 0
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 1
53105: NEG
53106: PUSH
53107: LD_INT 1
53109: NEG
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: LD_INT 1
53117: PUSH
53118: LD_INT 1
53120: NEG
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: LD_INT 1
53128: NEG
53129: PUSH
53130: LD_INT 1
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: LIST
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53148: LD_ADDR_VAR 0 41
53152: PUSH
53153: LD_INT 0
53155: PUSH
53156: LD_INT 0
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 0
53165: PUSH
53166: LD_INT 1
53168: NEG
53169: PUSH
53170: EMPTY
53171: LIST
53172: LIST
53173: PUSH
53174: LD_INT 1
53176: PUSH
53177: LD_INT 0
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 1
53186: PUSH
53187: LD_INT 1
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 0
53196: PUSH
53197: LD_INT 1
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 1
53206: NEG
53207: PUSH
53208: LD_INT 0
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 1
53217: NEG
53218: PUSH
53219: LD_INT 1
53221: NEG
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 1
53229: NEG
53230: PUSH
53231: LD_INT 2
53233: NEG
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 1
53241: PUSH
53242: LD_INT 1
53244: NEG
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 2
53252: PUSH
53253: LD_INT 0
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 2
53262: PUSH
53263: LD_INT 1
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 2
53272: PUSH
53273: LD_INT 2
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 1
53282: PUSH
53283: LD_INT 2
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 1
53292: NEG
53293: PUSH
53294: LD_INT 1
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 2
53303: NEG
53304: PUSH
53305: LD_INT 0
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: PUSH
53312: LD_INT 2
53314: NEG
53315: PUSH
53316: LD_INT 1
53318: NEG
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 2
53326: NEG
53327: PUSH
53328: LD_INT 2
53330: NEG
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 2
53338: NEG
53339: PUSH
53340: LD_INT 3
53342: NEG
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 2
53350: PUSH
53351: LD_INT 1
53353: NEG
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 3
53361: PUSH
53362: LD_INT 0
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 3
53371: PUSH
53372: LD_INT 1
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 3
53381: PUSH
53382: LD_INT 2
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 3
53391: PUSH
53392: LD_INT 3
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 2
53401: PUSH
53402: LD_INT 3
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 2
53411: NEG
53412: PUSH
53413: LD_INT 1
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 3
53422: NEG
53423: PUSH
53424: LD_INT 0
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 3
53433: NEG
53434: PUSH
53435: LD_INT 1
53437: NEG
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PUSH
53443: LD_INT 3
53445: NEG
53446: PUSH
53447: LD_INT 2
53449: NEG
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: LD_INT 3
53457: NEG
53458: PUSH
53459: LD_INT 3
53461: NEG
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: EMPTY
53468: LIST
53469: LIST
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: LIST
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53498: LD_ADDR_VAR 0 42
53502: PUSH
53503: LD_INT 0
53505: PUSH
53506: LD_INT 0
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: LD_INT 0
53515: PUSH
53516: LD_INT 1
53518: NEG
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 1
53526: PUSH
53527: LD_INT 0
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 1
53536: PUSH
53537: LD_INT 1
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 0
53546: PUSH
53547: LD_INT 1
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 1
53556: NEG
53557: PUSH
53558: LD_INT 0
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 1
53567: NEG
53568: PUSH
53569: LD_INT 1
53571: NEG
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 1
53579: NEG
53580: PUSH
53581: LD_INT 2
53583: NEG
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 0
53591: PUSH
53592: LD_INT 2
53594: NEG
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 1
53602: PUSH
53603: LD_INT 1
53605: NEG
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 2
53613: PUSH
53614: LD_INT 1
53616: PUSH
53617: EMPTY
53618: LIST
53619: LIST
53620: PUSH
53621: LD_INT 2
53623: PUSH
53624: LD_INT 2
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: PUSH
53631: LD_INT 1
53633: PUSH
53634: LD_INT 2
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: LD_INT 0
53643: PUSH
53644: LD_INT 2
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 1
53653: NEG
53654: PUSH
53655: LD_INT 1
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: LD_INT 2
53664: NEG
53665: PUSH
53666: LD_INT 1
53668: NEG
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 2
53676: NEG
53677: PUSH
53678: LD_INT 2
53680: NEG
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 2
53688: NEG
53689: PUSH
53690: LD_INT 3
53692: NEG
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 1
53700: NEG
53701: PUSH
53702: LD_INT 3
53704: NEG
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: LD_INT 0
53712: PUSH
53713: LD_INT 3
53715: NEG
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: PUSH
53721: LD_INT 1
53723: PUSH
53724: LD_INT 2
53726: NEG
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 3
53734: PUSH
53735: LD_INT 2
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 3
53744: PUSH
53745: LD_INT 3
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: LD_INT 2
53754: PUSH
53755: LD_INT 3
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 1
53764: PUSH
53765: LD_INT 3
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 0
53774: PUSH
53775: LD_INT 3
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 1
53784: NEG
53785: PUSH
53786: LD_INT 2
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 3
53795: NEG
53796: PUSH
53797: LD_INT 2
53799: NEG
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 3
53807: NEG
53808: PUSH
53809: LD_INT 3
53811: NEG
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: LIST
53829: LIST
53830: LIST
53831: LIST
53832: LIST
53833: LIST
53834: LIST
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53848: LD_ADDR_VAR 0 43
53852: PUSH
53853: LD_INT 0
53855: PUSH
53856: LD_INT 0
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 0
53865: PUSH
53866: LD_INT 1
53868: NEG
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 1
53876: PUSH
53877: LD_INT 0
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 1
53886: PUSH
53887: LD_INT 1
53889: PUSH
53890: EMPTY
53891: LIST
53892: LIST
53893: PUSH
53894: LD_INT 0
53896: PUSH
53897: LD_INT 1
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 1
53906: NEG
53907: PUSH
53908: LD_INT 0
53910: PUSH
53911: EMPTY
53912: LIST
53913: LIST
53914: PUSH
53915: LD_INT 1
53917: NEG
53918: PUSH
53919: LD_INT 1
53921: NEG
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 1
53929: NEG
53930: PUSH
53931: LD_INT 2
53933: NEG
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 0
53941: PUSH
53942: LD_INT 2
53944: NEG
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 1
53952: PUSH
53953: LD_INT 1
53955: NEG
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 2
53963: PUSH
53964: LD_INT 0
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 2
53973: PUSH
53974: LD_INT 1
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: LD_INT 1
53983: PUSH
53984: LD_INT 2
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 0
53993: PUSH
53994: LD_INT 2
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 1
54003: NEG
54004: PUSH
54005: LD_INT 1
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 2
54014: NEG
54015: PUSH
54016: LD_INT 0
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 2
54025: NEG
54026: PUSH
54027: LD_INT 1
54029: NEG
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: PUSH
54035: LD_INT 1
54037: NEG
54038: PUSH
54039: LD_INT 3
54041: NEG
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 0
54049: PUSH
54050: LD_INT 3
54052: NEG
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 1
54060: PUSH
54061: LD_INT 2
54063: NEG
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: LD_INT 2
54071: PUSH
54072: LD_INT 1
54074: NEG
54075: PUSH
54076: EMPTY
54077: LIST
54078: LIST
54079: PUSH
54080: LD_INT 3
54082: PUSH
54083: LD_INT 0
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 3
54092: PUSH
54093: LD_INT 1
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 1
54102: PUSH
54103: LD_INT 3
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: LD_INT 0
54112: PUSH
54113: LD_INT 3
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: PUSH
54120: LD_INT 1
54122: NEG
54123: PUSH
54124: LD_INT 2
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 2
54133: NEG
54134: PUSH
54135: LD_INT 1
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PUSH
54142: LD_INT 3
54144: NEG
54145: PUSH
54146: LD_INT 0
54148: PUSH
54149: EMPTY
54150: LIST
54151: LIST
54152: PUSH
54153: LD_INT 3
54155: NEG
54156: PUSH
54157: LD_INT 1
54159: NEG
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: LIST
54173: LIST
54174: LIST
54175: LIST
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54196: LD_ADDR_VAR 0 44
54200: PUSH
54201: LD_INT 0
54203: PUSH
54204: LD_INT 0
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 0
54213: PUSH
54214: LD_INT 1
54216: NEG
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: PUSH
54222: LD_INT 1
54224: PUSH
54225: LD_INT 0
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 1
54234: PUSH
54235: LD_INT 1
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 0
54244: PUSH
54245: LD_INT 1
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PUSH
54252: LD_INT 1
54254: NEG
54255: PUSH
54256: LD_INT 0
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 1
54265: NEG
54266: PUSH
54267: LD_INT 1
54269: NEG
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 1
54277: NEG
54278: PUSH
54279: LD_INT 2
54281: NEG
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: LD_INT 1
54289: PUSH
54290: LD_INT 1
54292: NEG
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: LD_INT 2
54300: PUSH
54301: LD_INT 0
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: LD_INT 2
54310: PUSH
54311: LD_INT 1
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: PUSH
54318: LD_INT 2
54320: PUSH
54321: LD_INT 2
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 1
54330: PUSH
54331: LD_INT 2
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: LD_INT 1
54340: NEG
54341: PUSH
54342: LD_INT 1
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 2
54351: NEG
54352: PUSH
54353: LD_INT 0
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: PUSH
54360: LD_INT 2
54362: NEG
54363: PUSH
54364: LD_INT 1
54366: NEG
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 2
54374: NEG
54375: PUSH
54376: LD_INT 2
54378: NEG
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 2
54386: NEG
54387: PUSH
54388: LD_INT 3
54390: NEG
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 2
54398: PUSH
54399: LD_INT 1
54401: NEG
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 3
54409: PUSH
54410: LD_INT 0
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 3
54419: PUSH
54420: LD_INT 1
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 3
54429: PUSH
54430: LD_INT 2
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 3
54439: PUSH
54440: LD_INT 3
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 2
54449: PUSH
54450: LD_INT 3
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 2
54459: NEG
54460: PUSH
54461: LD_INT 1
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 3
54470: NEG
54471: PUSH
54472: LD_INT 0
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: LD_INT 3
54481: NEG
54482: PUSH
54483: LD_INT 1
54485: NEG
54486: PUSH
54487: EMPTY
54488: LIST
54489: LIST
54490: PUSH
54491: LD_INT 3
54493: NEG
54494: PUSH
54495: LD_INT 2
54497: NEG
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 3
54505: NEG
54506: PUSH
54507: LD_INT 3
54509: NEG
54510: PUSH
54511: EMPTY
54512: LIST
54513: LIST
54514: PUSH
54515: EMPTY
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: LIST
54523: LIST
54524: LIST
54525: LIST
54526: LIST
54527: LIST
54528: LIST
54529: LIST
54530: LIST
54531: LIST
54532: LIST
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: LIST
54543: LIST
54544: LIST
54545: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54546: LD_ADDR_VAR 0 45
54550: PUSH
54551: LD_INT 0
54553: PUSH
54554: LD_INT 0
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 0
54563: PUSH
54564: LD_INT 1
54566: NEG
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 1
54574: PUSH
54575: LD_INT 0
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 1
54584: PUSH
54585: LD_INT 1
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 0
54594: PUSH
54595: LD_INT 1
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 1
54604: NEG
54605: PUSH
54606: LD_INT 0
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: PUSH
54613: LD_INT 1
54615: NEG
54616: PUSH
54617: LD_INT 1
54619: NEG
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 1
54627: NEG
54628: PUSH
54629: LD_INT 2
54631: NEG
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 0
54639: PUSH
54640: LD_INT 2
54642: NEG
54643: PUSH
54644: EMPTY
54645: LIST
54646: LIST
54647: PUSH
54648: LD_INT 1
54650: PUSH
54651: LD_INT 1
54653: NEG
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 2
54661: PUSH
54662: LD_INT 1
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PUSH
54669: LD_INT 2
54671: PUSH
54672: LD_INT 2
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 1
54681: PUSH
54682: LD_INT 2
54684: PUSH
54685: EMPTY
54686: LIST
54687: LIST
54688: PUSH
54689: LD_INT 0
54691: PUSH
54692: LD_INT 2
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 1
54701: NEG
54702: PUSH
54703: LD_INT 1
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 2
54712: NEG
54713: PUSH
54714: LD_INT 1
54716: NEG
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 2
54724: NEG
54725: PUSH
54726: LD_INT 2
54728: NEG
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 2
54736: NEG
54737: PUSH
54738: LD_INT 3
54740: NEG
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: PUSH
54746: LD_INT 1
54748: NEG
54749: PUSH
54750: LD_INT 3
54752: NEG
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 0
54760: PUSH
54761: LD_INT 3
54763: NEG
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 1
54771: PUSH
54772: LD_INT 2
54774: NEG
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: PUSH
54780: LD_INT 3
54782: PUSH
54783: LD_INT 2
54785: PUSH
54786: EMPTY
54787: LIST
54788: LIST
54789: PUSH
54790: LD_INT 3
54792: PUSH
54793: LD_INT 3
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 2
54802: PUSH
54803: LD_INT 3
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: LD_INT 1
54812: PUSH
54813: LD_INT 3
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 0
54822: PUSH
54823: LD_INT 3
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 1
54832: NEG
54833: PUSH
54834: LD_INT 2
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 3
54843: NEG
54844: PUSH
54845: LD_INT 2
54847: NEG
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 3
54855: NEG
54856: PUSH
54857: LD_INT 3
54859: NEG
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: EMPTY
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54896: LD_ADDR_VAR 0 46
54900: PUSH
54901: LD_INT 0
54903: PUSH
54904: LD_INT 0
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: PUSH
54911: LD_INT 0
54913: PUSH
54914: LD_INT 1
54916: NEG
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 1
54924: PUSH
54925: LD_INT 0
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 1
54934: PUSH
54935: LD_INT 1
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 0
54944: PUSH
54945: LD_INT 1
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 1
54954: NEG
54955: PUSH
54956: LD_INT 0
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 1
54965: NEG
54966: PUSH
54967: LD_INT 1
54969: NEG
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 1
54977: NEG
54978: PUSH
54979: LD_INT 2
54981: NEG
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 0
54989: PUSH
54990: LD_INT 2
54992: NEG
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 1
55000: PUSH
55001: LD_INT 1
55003: NEG
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: LD_INT 2
55011: PUSH
55012: LD_INT 0
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 2
55021: PUSH
55022: LD_INT 1
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 1
55031: PUSH
55032: LD_INT 2
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: LD_INT 0
55041: PUSH
55042: LD_INT 2
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 1
55051: NEG
55052: PUSH
55053: LD_INT 1
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: LD_INT 2
55062: NEG
55063: PUSH
55064: LD_INT 0
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 2
55073: NEG
55074: PUSH
55075: LD_INT 1
55077: NEG
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: PUSH
55083: LD_INT 1
55085: NEG
55086: PUSH
55087: LD_INT 3
55089: NEG
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: LD_INT 0
55097: PUSH
55098: LD_INT 3
55100: NEG
55101: PUSH
55102: EMPTY
55103: LIST
55104: LIST
55105: PUSH
55106: LD_INT 1
55108: PUSH
55109: LD_INT 2
55111: NEG
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 2
55119: PUSH
55120: LD_INT 1
55122: NEG
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: PUSH
55128: LD_INT 3
55130: PUSH
55131: LD_INT 0
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 3
55140: PUSH
55141: LD_INT 1
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 1
55150: PUSH
55151: LD_INT 3
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 0
55160: PUSH
55161: LD_INT 3
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 1
55170: NEG
55171: PUSH
55172: LD_INT 2
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: LD_INT 2
55181: NEG
55182: PUSH
55183: LD_INT 1
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: LD_INT 3
55192: NEG
55193: PUSH
55194: LD_INT 0
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: LD_INT 3
55203: NEG
55204: PUSH
55205: LD_INT 1
55207: NEG
55208: PUSH
55209: EMPTY
55210: LIST
55211: LIST
55212: PUSH
55213: EMPTY
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55244: LD_ADDR_VAR 0 47
55248: PUSH
55249: LD_INT 0
55251: PUSH
55252: LD_INT 0
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: LD_INT 0
55261: PUSH
55262: LD_INT 1
55264: NEG
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 1
55272: PUSH
55273: LD_INT 0
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 1
55282: PUSH
55283: LD_INT 1
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 0
55292: PUSH
55293: LD_INT 1
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: LD_INT 1
55302: NEG
55303: PUSH
55304: LD_INT 0
55306: PUSH
55307: EMPTY
55308: LIST
55309: LIST
55310: PUSH
55311: LD_INT 1
55313: NEG
55314: PUSH
55315: LD_INT 1
55317: NEG
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 1
55325: NEG
55326: PUSH
55327: LD_INT 2
55329: NEG
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 0
55337: PUSH
55338: LD_INT 2
55340: NEG
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 1
55348: PUSH
55349: LD_INT 1
55351: NEG
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 2
55359: NEG
55360: PUSH
55361: LD_INT 1
55363: NEG
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: PUSH
55369: LD_INT 2
55371: NEG
55372: PUSH
55373: LD_INT 2
55375: NEG
55376: PUSH
55377: EMPTY
55378: LIST
55379: LIST
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55395: LD_ADDR_VAR 0 48
55399: PUSH
55400: LD_INT 0
55402: PUSH
55403: LD_INT 0
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: PUSH
55410: LD_INT 0
55412: PUSH
55413: LD_INT 1
55415: NEG
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 1
55423: PUSH
55424: LD_INT 0
55426: PUSH
55427: EMPTY
55428: LIST
55429: LIST
55430: PUSH
55431: LD_INT 1
55433: PUSH
55434: LD_INT 1
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: PUSH
55441: LD_INT 0
55443: PUSH
55444: LD_INT 1
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 1
55453: NEG
55454: PUSH
55455: LD_INT 0
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 1
55464: NEG
55465: PUSH
55466: LD_INT 1
55468: NEG
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 1
55476: NEG
55477: PUSH
55478: LD_INT 2
55480: NEG
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: PUSH
55486: LD_INT 0
55488: PUSH
55489: LD_INT 2
55491: NEG
55492: PUSH
55493: EMPTY
55494: LIST
55495: LIST
55496: PUSH
55497: LD_INT 1
55499: PUSH
55500: LD_INT 1
55502: NEG
55503: PUSH
55504: EMPTY
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 2
55510: PUSH
55511: LD_INT 0
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 2
55520: PUSH
55521: LD_INT 1
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55542: LD_ADDR_VAR 0 49
55546: PUSH
55547: LD_INT 0
55549: PUSH
55550: LD_INT 0
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 0
55559: PUSH
55560: LD_INT 1
55562: NEG
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 1
55570: PUSH
55571: LD_INT 0
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 1
55580: PUSH
55581: LD_INT 1
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: LD_INT 0
55590: PUSH
55591: LD_INT 1
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: LD_INT 1
55600: NEG
55601: PUSH
55602: LD_INT 0
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: PUSH
55609: LD_INT 1
55611: NEG
55612: PUSH
55613: LD_INT 1
55615: NEG
55616: PUSH
55617: EMPTY
55618: LIST
55619: LIST
55620: PUSH
55621: LD_INT 1
55623: PUSH
55624: LD_INT 1
55626: NEG
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 2
55634: PUSH
55635: LD_INT 0
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 2
55644: PUSH
55645: LD_INT 1
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 2
55654: PUSH
55655: LD_INT 2
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 1
55664: PUSH
55665: LD_INT 2
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: LIST
55676: LIST
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55686: LD_ADDR_VAR 0 50
55690: PUSH
55691: LD_INT 0
55693: PUSH
55694: LD_INT 0
55696: PUSH
55697: EMPTY
55698: LIST
55699: LIST
55700: PUSH
55701: LD_INT 0
55703: PUSH
55704: LD_INT 1
55706: NEG
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 1
55714: PUSH
55715: LD_INT 0
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: LD_INT 1
55724: PUSH
55725: LD_INT 1
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: LD_INT 0
55734: PUSH
55735: LD_INT 1
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 1
55744: NEG
55745: PUSH
55746: LD_INT 0
55748: PUSH
55749: EMPTY
55750: LIST
55751: LIST
55752: PUSH
55753: LD_INT 1
55755: NEG
55756: PUSH
55757: LD_INT 1
55759: NEG
55760: PUSH
55761: EMPTY
55762: LIST
55763: LIST
55764: PUSH
55765: LD_INT 2
55767: PUSH
55768: LD_INT 1
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 2
55777: PUSH
55778: LD_INT 2
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PUSH
55785: LD_INT 1
55787: PUSH
55788: LD_INT 2
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: PUSH
55795: LD_INT 0
55797: PUSH
55798: LD_INT 2
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: LD_INT 1
55807: NEG
55808: PUSH
55809: LD_INT 1
55811: PUSH
55812: EMPTY
55813: LIST
55814: LIST
55815: PUSH
55816: EMPTY
55817: LIST
55818: LIST
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55830: LD_ADDR_VAR 0 51
55834: PUSH
55835: LD_INT 0
55837: PUSH
55838: LD_INT 0
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: LD_INT 0
55847: PUSH
55848: LD_INT 1
55850: NEG
55851: PUSH
55852: EMPTY
55853: LIST
55854: LIST
55855: PUSH
55856: LD_INT 1
55858: PUSH
55859: LD_INT 0
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: PUSH
55866: LD_INT 1
55868: PUSH
55869: LD_INT 1
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 0
55878: PUSH
55879: LD_INT 1
55881: PUSH
55882: EMPTY
55883: LIST
55884: LIST
55885: PUSH
55886: LD_INT 1
55888: NEG
55889: PUSH
55890: LD_INT 0
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 1
55899: NEG
55900: PUSH
55901: LD_INT 1
55903: NEG
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 1
55911: PUSH
55912: LD_INT 2
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 0
55921: PUSH
55922: LD_INT 2
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 1
55931: NEG
55932: PUSH
55933: LD_INT 1
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 2
55942: NEG
55943: PUSH
55944: LD_INT 0
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: PUSH
55951: LD_INT 2
55953: NEG
55954: PUSH
55955: LD_INT 1
55957: NEG
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55977: LD_ADDR_VAR 0 52
55981: PUSH
55982: LD_INT 0
55984: PUSH
55985: LD_INT 0
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 0
55994: PUSH
55995: LD_INT 1
55997: NEG
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: LD_INT 1
56005: PUSH
56006: LD_INT 0
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 1
56015: PUSH
56016: LD_INT 1
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 0
56025: PUSH
56026: LD_INT 1
56028: PUSH
56029: EMPTY
56030: LIST
56031: LIST
56032: PUSH
56033: LD_INT 1
56035: NEG
56036: PUSH
56037: LD_INT 0
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 1
56046: NEG
56047: PUSH
56048: LD_INT 1
56050: NEG
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: LD_INT 1
56058: NEG
56059: PUSH
56060: LD_INT 2
56062: NEG
56063: PUSH
56064: EMPTY
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 1
56070: NEG
56071: PUSH
56072: LD_INT 1
56074: PUSH
56075: EMPTY
56076: LIST
56077: LIST
56078: PUSH
56079: LD_INT 2
56081: NEG
56082: PUSH
56083: LD_INT 0
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 2
56092: NEG
56093: PUSH
56094: LD_INT 1
56096: NEG
56097: PUSH
56098: EMPTY
56099: LIST
56100: LIST
56101: PUSH
56102: LD_INT 2
56104: NEG
56105: PUSH
56106: LD_INT 2
56108: NEG
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: LIST
56121: LIST
56122: LIST
56123: LIST
56124: LIST
56125: LIST
56126: LIST
56127: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56128: LD_ADDR_VAR 0 53
56132: PUSH
56133: LD_INT 0
56135: PUSH
56136: LD_INT 0
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 0
56145: PUSH
56146: LD_INT 1
56148: NEG
56149: PUSH
56150: EMPTY
56151: LIST
56152: LIST
56153: PUSH
56154: LD_INT 1
56156: PUSH
56157: LD_INT 0
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 1
56166: PUSH
56167: LD_INT 1
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 0
56176: PUSH
56177: LD_INT 1
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 1
56186: NEG
56187: PUSH
56188: LD_INT 0
56190: PUSH
56191: EMPTY
56192: LIST
56193: LIST
56194: PUSH
56195: LD_INT 1
56197: NEG
56198: PUSH
56199: LD_INT 1
56201: NEG
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: PUSH
56207: LD_INT 1
56209: NEG
56210: PUSH
56211: LD_INT 2
56213: NEG
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PUSH
56219: LD_INT 0
56221: PUSH
56222: LD_INT 2
56224: NEG
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 1
56232: PUSH
56233: LD_INT 1
56235: NEG
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PUSH
56241: LD_INT 2
56243: PUSH
56244: LD_INT 0
56246: PUSH
56247: EMPTY
56248: LIST
56249: LIST
56250: PUSH
56251: LD_INT 2
56253: PUSH
56254: LD_INT 1
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 2
56263: PUSH
56264: LD_INT 2
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: LD_INT 1
56273: PUSH
56274: LD_INT 2
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: PUSH
56281: LD_INT 0
56283: PUSH
56284: LD_INT 2
56286: PUSH
56287: EMPTY
56288: LIST
56289: LIST
56290: PUSH
56291: LD_INT 1
56293: NEG
56294: PUSH
56295: LD_INT 1
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 2
56304: NEG
56305: PUSH
56306: LD_INT 0
56308: PUSH
56309: EMPTY
56310: LIST
56311: LIST
56312: PUSH
56313: LD_INT 2
56315: NEG
56316: PUSH
56317: LD_INT 1
56319: NEG
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 2
56327: NEG
56328: PUSH
56329: LD_INT 2
56331: NEG
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: LIST
56341: LIST
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56358: LD_ADDR_VAR 0 54
56362: PUSH
56363: LD_INT 0
56365: PUSH
56366: LD_INT 0
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 0
56375: PUSH
56376: LD_INT 1
56378: NEG
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 1
56386: PUSH
56387: LD_INT 0
56389: PUSH
56390: EMPTY
56391: LIST
56392: LIST
56393: PUSH
56394: LD_INT 1
56396: PUSH
56397: LD_INT 1
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 0
56406: PUSH
56407: LD_INT 1
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 1
56416: NEG
56417: PUSH
56418: LD_INT 0
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 1
56427: NEG
56428: PUSH
56429: LD_INT 1
56431: NEG
56432: PUSH
56433: EMPTY
56434: LIST
56435: LIST
56436: PUSH
56437: LD_INT 1
56439: NEG
56440: PUSH
56441: LD_INT 2
56443: NEG
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 0
56451: PUSH
56452: LD_INT 2
56454: NEG
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 1
56462: PUSH
56463: LD_INT 1
56465: NEG
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 2
56473: PUSH
56474: LD_INT 0
56476: PUSH
56477: EMPTY
56478: LIST
56479: LIST
56480: PUSH
56481: LD_INT 2
56483: PUSH
56484: LD_INT 1
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 2
56493: PUSH
56494: LD_INT 2
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 1
56503: PUSH
56504: LD_INT 2
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 0
56513: PUSH
56514: LD_INT 2
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 1
56523: NEG
56524: PUSH
56525: LD_INT 1
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 2
56534: NEG
56535: PUSH
56536: LD_INT 0
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 2
56545: NEG
56546: PUSH
56547: LD_INT 1
56549: NEG
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 2
56557: NEG
56558: PUSH
56559: LD_INT 2
56561: NEG
56562: PUSH
56563: EMPTY
56564: LIST
56565: LIST
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: LIST
56571: LIST
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: LIST
56582: LIST
56583: LIST
56584: LIST
56585: LIST
56586: LIST
56587: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56588: LD_ADDR_VAR 0 55
56592: PUSH
56593: LD_INT 0
56595: PUSH
56596: LD_INT 0
56598: PUSH
56599: EMPTY
56600: LIST
56601: LIST
56602: PUSH
56603: LD_INT 0
56605: PUSH
56606: LD_INT 1
56608: NEG
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 1
56616: PUSH
56617: LD_INT 0
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: LD_INT 1
56626: PUSH
56627: LD_INT 1
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: LD_INT 0
56636: PUSH
56637: LD_INT 1
56639: PUSH
56640: EMPTY
56641: LIST
56642: LIST
56643: PUSH
56644: LD_INT 1
56646: NEG
56647: PUSH
56648: LD_INT 0
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 1
56657: NEG
56658: PUSH
56659: LD_INT 1
56661: NEG
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 1
56669: NEG
56670: PUSH
56671: LD_INT 2
56673: NEG
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: PUSH
56679: LD_INT 0
56681: PUSH
56682: LD_INT 2
56684: NEG
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: LD_INT 1
56692: PUSH
56693: LD_INT 1
56695: NEG
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 2
56703: PUSH
56704: LD_INT 0
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: LD_INT 2
56713: PUSH
56714: LD_INT 1
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 2
56723: PUSH
56724: LD_INT 2
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 1
56733: PUSH
56734: LD_INT 2
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: LD_INT 0
56743: PUSH
56744: LD_INT 2
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: LD_INT 1
56753: NEG
56754: PUSH
56755: LD_INT 1
56757: PUSH
56758: EMPTY
56759: LIST
56760: LIST
56761: PUSH
56762: LD_INT 2
56764: NEG
56765: PUSH
56766: LD_INT 0
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 2
56775: NEG
56776: PUSH
56777: LD_INT 1
56779: NEG
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 2
56787: NEG
56788: PUSH
56789: LD_INT 2
56791: NEG
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: LIST
56806: LIST
56807: LIST
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56818: LD_ADDR_VAR 0 56
56822: PUSH
56823: LD_INT 0
56825: PUSH
56826: LD_INT 0
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: PUSH
56833: LD_INT 0
56835: PUSH
56836: LD_INT 1
56838: NEG
56839: PUSH
56840: EMPTY
56841: LIST
56842: LIST
56843: PUSH
56844: LD_INT 1
56846: PUSH
56847: LD_INT 0
56849: PUSH
56850: EMPTY
56851: LIST
56852: LIST
56853: PUSH
56854: LD_INT 1
56856: PUSH
56857: LD_INT 1
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: LD_INT 0
56866: PUSH
56867: LD_INT 1
56869: PUSH
56870: EMPTY
56871: LIST
56872: LIST
56873: PUSH
56874: LD_INT 1
56876: NEG
56877: PUSH
56878: LD_INT 0
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: PUSH
56885: LD_INT 1
56887: NEG
56888: PUSH
56889: LD_INT 1
56891: NEG
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: PUSH
56897: LD_INT 1
56899: NEG
56900: PUSH
56901: LD_INT 2
56903: NEG
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 0
56911: PUSH
56912: LD_INT 2
56914: NEG
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PUSH
56920: LD_INT 1
56922: PUSH
56923: LD_INT 1
56925: NEG
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 2
56933: PUSH
56934: LD_INT 0
56936: PUSH
56937: EMPTY
56938: LIST
56939: LIST
56940: PUSH
56941: LD_INT 2
56943: PUSH
56944: LD_INT 1
56946: PUSH
56947: EMPTY
56948: LIST
56949: LIST
56950: PUSH
56951: LD_INT 2
56953: PUSH
56954: LD_INT 2
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 1
56963: PUSH
56964: LD_INT 2
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PUSH
56971: LD_INT 0
56973: PUSH
56974: LD_INT 2
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 1
56983: NEG
56984: PUSH
56985: LD_INT 1
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: PUSH
56992: LD_INT 2
56994: NEG
56995: PUSH
56996: LD_INT 0
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: PUSH
57003: LD_INT 2
57005: NEG
57006: PUSH
57007: LD_INT 1
57009: NEG
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 2
57017: NEG
57018: PUSH
57019: LD_INT 2
57021: NEG
57022: PUSH
57023: EMPTY
57024: LIST
57025: LIST
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: LIST
57031: LIST
57032: LIST
57033: LIST
57034: LIST
57035: LIST
57036: LIST
57037: LIST
57038: LIST
57039: LIST
57040: LIST
57041: LIST
57042: LIST
57043: LIST
57044: LIST
57045: LIST
57046: LIST
57047: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57048: LD_ADDR_VAR 0 57
57052: PUSH
57053: LD_INT 0
57055: PUSH
57056: LD_INT 0
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 0
57065: PUSH
57066: LD_INT 1
57068: NEG
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: LD_INT 1
57076: PUSH
57077: LD_INT 0
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: PUSH
57084: LD_INT 1
57086: PUSH
57087: LD_INT 1
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: LD_INT 0
57096: PUSH
57097: LD_INT 1
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 1
57106: NEG
57107: PUSH
57108: LD_INT 0
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 1
57117: NEG
57118: PUSH
57119: LD_INT 1
57121: NEG
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: PUSH
57127: LD_INT 1
57129: NEG
57130: PUSH
57131: LD_INT 2
57133: NEG
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 0
57141: PUSH
57142: LD_INT 2
57144: NEG
57145: PUSH
57146: EMPTY
57147: LIST
57148: LIST
57149: PUSH
57150: LD_INT 1
57152: PUSH
57153: LD_INT 1
57155: NEG
57156: PUSH
57157: EMPTY
57158: LIST
57159: LIST
57160: PUSH
57161: LD_INT 2
57163: PUSH
57164: LD_INT 0
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: LD_INT 2
57173: PUSH
57174: LD_INT 1
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 2
57183: PUSH
57184: LD_INT 2
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 1
57193: PUSH
57194: LD_INT 2
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 0
57203: PUSH
57204: LD_INT 2
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: PUSH
57211: LD_INT 1
57213: NEG
57214: PUSH
57215: LD_INT 1
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: PUSH
57222: LD_INT 2
57224: NEG
57225: PUSH
57226: LD_INT 0
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: LD_INT 2
57235: NEG
57236: PUSH
57237: LD_INT 1
57239: NEG
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 2
57247: NEG
57248: PUSH
57249: LD_INT 2
57251: NEG
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: LIST
57261: LIST
57262: LIST
57263: LIST
57264: LIST
57265: LIST
57266: LIST
57267: LIST
57268: LIST
57269: LIST
57270: LIST
57271: LIST
57272: LIST
57273: LIST
57274: LIST
57275: LIST
57276: LIST
57277: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57278: LD_ADDR_VAR 0 58
57282: PUSH
57283: LD_INT 0
57285: PUSH
57286: LD_INT 0
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: LD_INT 0
57295: PUSH
57296: LD_INT 1
57298: NEG
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 1
57306: PUSH
57307: LD_INT 0
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 1
57316: PUSH
57317: LD_INT 1
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: PUSH
57324: LD_INT 0
57326: PUSH
57327: LD_INT 1
57329: PUSH
57330: EMPTY
57331: LIST
57332: LIST
57333: PUSH
57334: LD_INT 1
57336: NEG
57337: PUSH
57338: LD_INT 0
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: LD_INT 1
57347: NEG
57348: PUSH
57349: LD_INT 1
57351: NEG
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 1
57359: NEG
57360: PUSH
57361: LD_INT 2
57363: NEG
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 0
57371: PUSH
57372: LD_INT 2
57374: NEG
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 1
57382: PUSH
57383: LD_INT 1
57385: NEG
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: PUSH
57391: LD_INT 2
57393: PUSH
57394: LD_INT 0
57396: PUSH
57397: EMPTY
57398: LIST
57399: LIST
57400: PUSH
57401: LD_INT 2
57403: PUSH
57404: LD_INT 1
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 2
57413: PUSH
57414: LD_INT 2
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: LD_INT 1
57423: PUSH
57424: LD_INT 2
57426: PUSH
57427: EMPTY
57428: LIST
57429: LIST
57430: PUSH
57431: LD_INT 0
57433: PUSH
57434: LD_INT 2
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: LD_INT 1
57443: NEG
57444: PUSH
57445: LD_INT 1
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: LD_INT 2
57454: NEG
57455: PUSH
57456: LD_INT 0
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 2
57465: NEG
57466: PUSH
57467: LD_INT 1
57469: NEG
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: LD_INT 2
57477: NEG
57478: PUSH
57479: LD_INT 2
57481: NEG
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57508: LD_ADDR_VAR 0 59
57512: PUSH
57513: LD_INT 0
57515: PUSH
57516: LD_INT 0
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PUSH
57523: LD_INT 0
57525: PUSH
57526: LD_INT 1
57528: NEG
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 1
57536: PUSH
57537: LD_INT 0
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: LD_INT 1
57546: PUSH
57547: LD_INT 1
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PUSH
57554: LD_INT 0
57556: PUSH
57557: LD_INT 1
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 1
57566: NEG
57567: PUSH
57568: LD_INT 0
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 1
57577: NEG
57578: PUSH
57579: LD_INT 1
57581: NEG
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: LIST
57591: LIST
57592: LIST
57593: LIST
57594: LIST
57595: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57596: LD_ADDR_VAR 0 60
57600: PUSH
57601: LD_INT 0
57603: PUSH
57604: LD_INT 0
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 0
57613: PUSH
57614: LD_INT 1
57616: NEG
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: PUSH
57622: LD_INT 1
57624: PUSH
57625: LD_INT 0
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 1
57634: PUSH
57635: LD_INT 1
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: PUSH
57642: LD_INT 0
57644: PUSH
57645: LD_INT 1
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: LD_INT 1
57654: NEG
57655: PUSH
57656: LD_INT 0
57658: PUSH
57659: EMPTY
57660: LIST
57661: LIST
57662: PUSH
57663: LD_INT 1
57665: NEG
57666: PUSH
57667: LD_INT 1
57669: NEG
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: LIST
57679: LIST
57680: LIST
57681: LIST
57682: LIST
57683: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57684: LD_ADDR_VAR 0 61
57688: PUSH
57689: LD_INT 0
57691: PUSH
57692: LD_INT 0
57694: PUSH
57695: EMPTY
57696: LIST
57697: LIST
57698: PUSH
57699: LD_INT 0
57701: PUSH
57702: LD_INT 1
57704: NEG
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: PUSH
57710: LD_INT 1
57712: PUSH
57713: LD_INT 0
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 1
57722: PUSH
57723: LD_INT 1
57725: PUSH
57726: EMPTY
57727: LIST
57728: LIST
57729: PUSH
57730: LD_INT 0
57732: PUSH
57733: LD_INT 1
57735: PUSH
57736: EMPTY
57737: LIST
57738: LIST
57739: PUSH
57740: LD_INT 1
57742: NEG
57743: PUSH
57744: LD_INT 0
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 1
57753: NEG
57754: PUSH
57755: LD_INT 1
57757: NEG
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: LIST
57767: LIST
57768: LIST
57769: LIST
57770: LIST
57771: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57772: LD_ADDR_VAR 0 62
57776: PUSH
57777: LD_INT 0
57779: PUSH
57780: LD_INT 0
57782: PUSH
57783: EMPTY
57784: LIST
57785: LIST
57786: PUSH
57787: LD_INT 0
57789: PUSH
57790: LD_INT 1
57792: NEG
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: LD_INT 1
57800: PUSH
57801: LD_INT 0
57803: PUSH
57804: EMPTY
57805: LIST
57806: LIST
57807: PUSH
57808: LD_INT 1
57810: PUSH
57811: LD_INT 1
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: PUSH
57818: LD_INT 0
57820: PUSH
57821: LD_INT 1
57823: PUSH
57824: EMPTY
57825: LIST
57826: LIST
57827: PUSH
57828: LD_INT 1
57830: NEG
57831: PUSH
57832: LD_INT 0
57834: PUSH
57835: EMPTY
57836: LIST
57837: LIST
57838: PUSH
57839: LD_INT 1
57841: NEG
57842: PUSH
57843: LD_INT 1
57845: NEG
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: LIST
57855: LIST
57856: LIST
57857: LIST
57858: LIST
57859: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57860: LD_ADDR_VAR 0 63
57864: PUSH
57865: LD_INT 0
57867: PUSH
57868: LD_INT 0
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: PUSH
57875: LD_INT 0
57877: PUSH
57878: LD_INT 1
57880: NEG
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 1
57888: PUSH
57889: LD_INT 0
57891: PUSH
57892: EMPTY
57893: LIST
57894: LIST
57895: PUSH
57896: LD_INT 1
57898: PUSH
57899: LD_INT 1
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 0
57908: PUSH
57909: LD_INT 1
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 1
57918: NEG
57919: PUSH
57920: LD_INT 0
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 1
57929: NEG
57930: PUSH
57931: LD_INT 1
57933: NEG
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57948: LD_ADDR_VAR 0 64
57952: PUSH
57953: LD_INT 0
57955: PUSH
57956: LD_INT 0
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: PUSH
57963: LD_INT 0
57965: PUSH
57966: LD_INT 1
57968: NEG
57969: PUSH
57970: EMPTY
57971: LIST
57972: LIST
57973: PUSH
57974: LD_INT 1
57976: PUSH
57977: LD_INT 0
57979: PUSH
57980: EMPTY
57981: LIST
57982: LIST
57983: PUSH
57984: LD_INT 1
57986: PUSH
57987: LD_INT 1
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 0
57996: PUSH
57997: LD_INT 1
57999: PUSH
58000: EMPTY
58001: LIST
58002: LIST
58003: PUSH
58004: LD_INT 1
58006: NEG
58007: PUSH
58008: LD_INT 0
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 1
58017: NEG
58018: PUSH
58019: LD_INT 1
58021: NEG
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: EMPTY
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: LIST
58035: ST_TO_ADDR
// end ; 1 :
58036: GO 63933
58038: LD_INT 1
58040: DOUBLE
58041: EQUAL
58042: IFTRUE 58046
58044: GO 60669
58046: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58047: LD_ADDR_VAR 0 11
58051: PUSH
58052: LD_INT 1
58054: NEG
58055: PUSH
58056: LD_INT 3
58058: NEG
58059: PUSH
58060: EMPTY
58061: LIST
58062: LIST
58063: PUSH
58064: LD_INT 0
58066: PUSH
58067: LD_INT 3
58069: NEG
58070: PUSH
58071: EMPTY
58072: LIST
58073: LIST
58074: PUSH
58075: LD_INT 1
58077: PUSH
58078: LD_INT 2
58080: NEG
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: LIST
58090: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58091: LD_ADDR_VAR 0 12
58095: PUSH
58096: LD_INT 2
58098: PUSH
58099: LD_INT 1
58101: NEG
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 3
58109: PUSH
58110: LD_INT 0
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 3
58119: PUSH
58120: LD_INT 1
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: LIST
58131: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58132: LD_ADDR_VAR 0 13
58136: PUSH
58137: LD_INT 3
58139: PUSH
58140: LD_INT 2
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: PUSH
58147: LD_INT 3
58149: PUSH
58150: LD_INT 3
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 2
58159: PUSH
58160: LD_INT 3
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: LIST
58171: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58172: LD_ADDR_VAR 0 14
58176: PUSH
58177: LD_INT 1
58179: PUSH
58180: LD_INT 3
58182: PUSH
58183: EMPTY
58184: LIST
58185: LIST
58186: PUSH
58187: LD_INT 0
58189: PUSH
58190: LD_INT 3
58192: PUSH
58193: EMPTY
58194: LIST
58195: LIST
58196: PUSH
58197: LD_INT 1
58199: NEG
58200: PUSH
58201: LD_INT 2
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: EMPTY
58209: LIST
58210: LIST
58211: LIST
58212: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58213: LD_ADDR_VAR 0 15
58217: PUSH
58218: LD_INT 2
58220: NEG
58221: PUSH
58222: LD_INT 1
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: LD_INT 3
58231: NEG
58232: PUSH
58233: LD_INT 0
58235: PUSH
58236: EMPTY
58237: LIST
58238: LIST
58239: PUSH
58240: LD_INT 3
58242: NEG
58243: PUSH
58244: LD_INT 1
58246: NEG
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: EMPTY
58253: LIST
58254: LIST
58255: LIST
58256: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58257: LD_ADDR_VAR 0 16
58261: PUSH
58262: LD_INT 2
58264: NEG
58265: PUSH
58266: LD_INT 3
58268: NEG
58269: PUSH
58270: EMPTY
58271: LIST
58272: LIST
58273: PUSH
58274: LD_INT 3
58276: NEG
58277: PUSH
58278: LD_INT 2
58280: NEG
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 3
58288: NEG
58289: PUSH
58290: LD_INT 3
58292: NEG
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: PUSH
58298: EMPTY
58299: LIST
58300: LIST
58301: LIST
58302: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58303: LD_ADDR_VAR 0 17
58307: PUSH
58308: LD_INT 1
58310: NEG
58311: PUSH
58312: LD_INT 3
58314: NEG
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: PUSH
58320: LD_INT 0
58322: PUSH
58323: LD_INT 3
58325: NEG
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: LD_INT 1
58333: PUSH
58334: LD_INT 2
58336: NEG
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: EMPTY
58343: LIST
58344: LIST
58345: LIST
58346: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58347: LD_ADDR_VAR 0 18
58351: PUSH
58352: LD_INT 2
58354: PUSH
58355: LD_INT 1
58357: NEG
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: PUSH
58363: LD_INT 3
58365: PUSH
58366: LD_INT 0
58368: PUSH
58369: EMPTY
58370: LIST
58371: LIST
58372: PUSH
58373: LD_INT 3
58375: PUSH
58376: LD_INT 1
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: LIST
58387: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58388: LD_ADDR_VAR 0 19
58392: PUSH
58393: LD_INT 3
58395: PUSH
58396: LD_INT 2
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: PUSH
58403: LD_INT 3
58405: PUSH
58406: LD_INT 3
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: LD_INT 2
58415: PUSH
58416: LD_INT 3
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: EMPTY
58424: LIST
58425: LIST
58426: LIST
58427: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58428: LD_ADDR_VAR 0 20
58432: PUSH
58433: LD_INT 1
58435: PUSH
58436: LD_INT 3
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: LD_INT 0
58445: PUSH
58446: LD_INT 3
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 1
58455: NEG
58456: PUSH
58457: LD_INT 2
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: EMPTY
58465: LIST
58466: LIST
58467: LIST
58468: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58469: LD_ADDR_VAR 0 21
58473: PUSH
58474: LD_INT 2
58476: NEG
58477: PUSH
58478: LD_INT 1
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: PUSH
58485: LD_INT 3
58487: NEG
58488: PUSH
58489: LD_INT 0
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 3
58498: NEG
58499: PUSH
58500: LD_INT 1
58502: NEG
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: LIST
58512: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58513: LD_ADDR_VAR 0 22
58517: PUSH
58518: LD_INT 2
58520: NEG
58521: PUSH
58522: LD_INT 3
58524: NEG
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: PUSH
58530: LD_INT 3
58532: NEG
58533: PUSH
58534: LD_INT 2
58536: NEG
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: PUSH
58542: LD_INT 3
58544: NEG
58545: PUSH
58546: LD_INT 3
58548: NEG
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: LIST
58558: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
58559: LD_ADDR_VAR 0 23
58563: PUSH
58564: LD_INT 0
58566: PUSH
58567: LD_INT 3
58569: NEG
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: PUSH
58575: LD_INT 1
58577: NEG
58578: PUSH
58579: LD_INT 4
58581: NEG
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: PUSH
58587: LD_INT 1
58589: PUSH
58590: LD_INT 3
58592: NEG
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: LIST
58602: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
58603: LD_ADDR_VAR 0 24
58607: PUSH
58608: LD_INT 3
58610: PUSH
58611: LD_INT 0
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: PUSH
58618: LD_INT 3
58620: PUSH
58621: LD_INT 1
58623: NEG
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: LD_INT 4
58631: PUSH
58632: LD_INT 1
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: LIST
58643: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
58644: LD_ADDR_VAR 0 25
58648: PUSH
58649: LD_INT 3
58651: PUSH
58652: LD_INT 3
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 4
58661: PUSH
58662: LD_INT 3
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: PUSH
58669: LD_INT 3
58671: PUSH
58672: LD_INT 4
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: LIST
58683: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
58684: LD_ADDR_VAR 0 26
58688: PUSH
58689: LD_INT 0
58691: PUSH
58692: LD_INT 3
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: PUSH
58699: LD_INT 1
58701: PUSH
58702: LD_INT 4
58704: PUSH
58705: EMPTY
58706: LIST
58707: LIST
58708: PUSH
58709: LD_INT 1
58711: NEG
58712: PUSH
58713: LD_INT 3
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: LIST
58724: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
58725: LD_ADDR_VAR 0 27
58729: PUSH
58730: LD_INT 3
58732: NEG
58733: PUSH
58734: LD_INT 0
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 3
58743: NEG
58744: PUSH
58745: LD_INT 1
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: LD_INT 4
58754: NEG
58755: PUSH
58756: LD_INT 1
58758: NEG
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: LIST
58768: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
58769: LD_ADDR_VAR 0 28
58773: PUSH
58774: LD_INT 3
58776: NEG
58777: PUSH
58778: LD_INT 3
58780: NEG
58781: PUSH
58782: EMPTY
58783: LIST
58784: LIST
58785: PUSH
58786: LD_INT 3
58788: NEG
58789: PUSH
58790: LD_INT 4
58792: NEG
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 4
58800: NEG
58801: PUSH
58802: LD_INT 3
58804: NEG
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: LIST
58814: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
58815: LD_ADDR_VAR 0 29
58819: PUSH
58820: LD_INT 1
58822: NEG
58823: PUSH
58824: LD_INT 3
58826: NEG
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: LD_INT 0
58834: PUSH
58835: LD_INT 3
58837: NEG
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: PUSH
58843: LD_INT 1
58845: PUSH
58846: LD_INT 2
58848: NEG
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: LD_INT 1
58856: NEG
58857: PUSH
58858: LD_INT 4
58860: NEG
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 0
58868: PUSH
58869: LD_INT 4
58871: NEG
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: LD_INT 1
58879: PUSH
58880: LD_INT 3
58882: NEG
58883: PUSH
58884: EMPTY
58885: LIST
58886: LIST
58887: PUSH
58888: LD_INT 1
58890: NEG
58891: PUSH
58892: LD_INT 5
58894: NEG
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: PUSH
58900: LD_INT 0
58902: PUSH
58903: LD_INT 5
58905: NEG
58906: PUSH
58907: EMPTY
58908: LIST
58909: LIST
58910: PUSH
58911: LD_INT 1
58913: PUSH
58914: LD_INT 4
58916: NEG
58917: PUSH
58918: EMPTY
58919: LIST
58920: LIST
58921: PUSH
58922: LD_INT 1
58924: NEG
58925: PUSH
58926: LD_INT 6
58928: NEG
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: PUSH
58934: LD_INT 0
58936: PUSH
58937: LD_INT 6
58939: NEG
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: PUSH
58945: LD_INT 1
58947: PUSH
58948: LD_INT 5
58950: NEG
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: LIST
58960: LIST
58961: LIST
58962: LIST
58963: LIST
58964: LIST
58965: LIST
58966: LIST
58967: LIST
58968: LIST
58969: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
58970: LD_ADDR_VAR 0 30
58974: PUSH
58975: LD_INT 2
58977: PUSH
58978: LD_INT 1
58980: NEG
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 3
58988: PUSH
58989: LD_INT 0
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: PUSH
58996: LD_INT 3
58998: PUSH
58999: LD_INT 1
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: LD_INT 3
59008: PUSH
59009: LD_INT 1
59011: NEG
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: PUSH
59017: LD_INT 4
59019: PUSH
59020: LD_INT 0
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: PUSH
59027: LD_INT 4
59029: PUSH
59030: LD_INT 1
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: LD_INT 4
59039: PUSH
59040: LD_INT 1
59042: NEG
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 5
59050: PUSH
59051: LD_INT 0
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 5
59060: PUSH
59061: LD_INT 1
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PUSH
59068: LD_INT 5
59070: PUSH
59071: LD_INT 1
59073: NEG
59074: PUSH
59075: EMPTY
59076: LIST
59077: LIST
59078: PUSH
59079: LD_INT 6
59081: PUSH
59082: LD_INT 0
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: LD_INT 6
59091: PUSH
59092: LD_INT 1
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: LIST
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: LIST
59110: LIST
59111: LIST
59112: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
59113: LD_ADDR_VAR 0 31
59117: PUSH
59118: LD_INT 3
59120: PUSH
59121: LD_INT 2
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: PUSH
59128: LD_INT 3
59130: PUSH
59131: LD_INT 3
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: PUSH
59138: LD_INT 2
59140: PUSH
59141: LD_INT 3
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: LD_INT 4
59150: PUSH
59151: LD_INT 3
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: LD_INT 4
59160: PUSH
59161: LD_INT 4
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 3
59170: PUSH
59171: LD_INT 4
59173: PUSH
59174: EMPTY
59175: LIST
59176: LIST
59177: PUSH
59178: LD_INT 5
59180: PUSH
59181: LD_INT 4
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PUSH
59188: LD_INT 5
59190: PUSH
59191: LD_INT 5
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PUSH
59198: LD_INT 4
59200: PUSH
59201: LD_INT 5
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: PUSH
59208: LD_INT 6
59210: PUSH
59211: LD_INT 5
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 6
59220: PUSH
59221: LD_INT 6
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: PUSH
59228: LD_INT 5
59230: PUSH
59231: LD_INT 6
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: LIST
59242: LIST
59243: LIST
59244: LIST
59245: LIST
59246: LIST
59247: LIST
59248: LIST
59249: LIST
59250: LIST
59251: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
59252: LD_ADDR_VAR 0 32
59256: PUSH
59257: LD_INT 1
59259: PUSH
59260: LD_INT 3
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PUSH
59267: LD_INT 0
59269: PUSH
59270: LD_INT 3
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: PUSH
59277: LD_INT 1
59279: NEG
59280: PUSH
59281: LD_INT 2
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: PUSH
59288: LD_INT 1
59290: PUSH
59291: LD_INT 4
59293: PUSH
59294: EMPTY
59295: LIST
59296: LIST
59297: PUSH
59298: LD_INT 0
59300: PUSH
59301: LD_INT 4
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: LD_INT 1
59310: NEG
59311: PUSH
59312: LD_INT 3
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: LD_INT 1
59321: PUSH
59322: LD_INT 5
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 0
59331: PUSH
59332: LD_INT 5
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PUSH
59339: LD_INT 1
59341: NEG
59342: PUSH
59343: LD_INT 4
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: PUSH
59350: LD_INT 1
59352: PUSH
59353: LD_INT 6
59355: PUSH
59356: EMPTY
59357: LIST
59358: LIST
59359: PUSH
59360: LD_INT 0
59362: PUSH
59363: LD_INT 6
59365: PUSH
59366: EMPTY
59367: LIST
59368: LIST
59369: PUSH
59370: LD_INT 1
59372: NEG
59373: PUSH
59374: LD_INT 5
59376: PUSH
59377: EMPTY
59378: LIST
59379: LIST
59380: PUSH
59381: EMPTY
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
59395: LD_ADDR_VAR 0 33
59399: PUSH
59400: LD_INT 2
59402: NEG
59403: PUSH
59404: LD_INT 1
59406: PUSH
59407: EMPTY
59408: LIST
59409: LIST
59410: PUSH
59411: LD_INT 3
59413: NEG
59414: PUSH
59415: LD_INT 0
59417: PUSH
59418: EMPTY
59419: LIST
59420: LIST
59421: PUSH
59422: LD_INT 3
59424: NEG
59425: PUSH
59426: LD_INT 1
59428: NEG
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: PUSH
59434: LD_INT 3
59436: NEG
59437: PUSH
59438: LD_INT 1
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: PUSH
59445: LD_INT 4
59447: NEG
59448: PUSH
59449: LD_INT 0
59451: PUSH
59452: EMPTY
59453: LIST
59454: LIST
59455: PUSH
59456: LD_INT 4
59458: NEG
59459: PUSH
59460: LD_INT 1
59462: NEG
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 4
59470: NEG
59471: PUSH
59472: LD_INT 1
59474: PUSH
59475: EMPTY
59476: LIST
59477: LIST
59478: PUSH
59479: LD_INT 5
59481: NEG
59482: PUSH
59483: LD_INT 0
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: LD_INT 5
59492: NEG
59493: PUSH
59494: LD_INT 1
59496: NEG
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: PUSH
59502: LD_INT 5
59504: NEG
59505: PUSH
59506: LD_INT 1
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: LD_INT 6
59515: NEG
59516: PUSH
59517: LD_INT 0
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PUSH
59524: LD_INT 6
59526: NEG
59527: PUSH
59528: LD_INT 1
59530: NEG
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: PUSH
59536: EMPTY
59537: LIST
59538: LIST
59539: LIST
59540: LIST
59541: LIST
59542: LIST
59543: LIST
59544: LIST
59545: LIST
59546: LIST
59547: LIST
59548: LIST
59549: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
59550: LD_ADDR_VAR 0 34
59554: PUSH
59555: LD_INT 2
59557: NEG
59558: PUSH
59559: LD_INT 3
59561: NEG
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: PUSH
59567: LD_INT 3
59569: NEG
59570: PUSH
59571: LD_INT 2
59573: NEG
59574: PUSH
59575: EMPTY
59576: LIST
59577: LIST
59578: PUSH
59579: LD_INT 3
59581: NEG
59582: PUSH
59583: LD_INT 3
59585: NEG
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: PUSH
59591: LD_INT 3
59593: NEG
59594: PUSH
59595: LD_INT 4
59597: NEG
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 4
59605: NEG
59606: PUSH
59607: LD_INT 3
59609: NEG
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: PUSH
59615: LD_INT 4
59617: NEG
59618: PUSH
59619: LD_INT 4
59621: NEG
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: LD_INT 4
59629: NEG
59630: PUSH
59631: LD_INT 5
59633: NEG
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: PUSH
59639: LD_INT 5
59641: NEG
59642: PUSH
59643: LD_INT 4
59645: NEG
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: LD_INT 5
59653: NEG
59654: PUSH
59655: LD_INT 5
59657: NEG
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: LD_INT 5
59665: NEG
59666: PUSH
59667: LD_INT 6
59669: NEG
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: LD_INT 6
59677: NEG
59678: PUSH
59679: LD_INT 5
59681: NEG
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 6
59689: NEG
59690: PUSH
59691: LD_INT 6
59693: NEG
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: LIST
59710: LIST
59711: LIST
59712: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
59713: LD_ADDR_VAR 0 41
59717: PUSH
59718: LD_INT 0
59720: PUSH
59721: LD_INT 2
59723: NEG
59724: PUSH
59725: EMPTY
59726: LIST
59727: LIST
59728: PUSH
59729: LD_INT 1
59731: NEG
59732: PUSH
59733: LD_INT 3
59735: NEG
59736: PUSH
59737: EMPTY
59738: LIST
59739: LIST
59740: PUSH
59741: LD_INT 1
59743: PUSH
59744: LD_INT 2
59746: NEG
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: EMPTY
59753: LIST
59754: LIST
59755: LIST
59756: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
59757: LD_ADDR_VAR 0 42
59761: PUSH
59762: LD_INT 2
59764: PUSH
59765: LD_INT 0
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: PUSH
59772: LD_INT 2
59774: PUSH
59775: LD_INT 1
59777: NEG
59778: PUSH
59779: EMPTY
59780: LIST
59781: LIST
59782: PUSH
59783: LD_INT 3
59785: PUSH
59786: LD_INT 1
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: EMPTY
59794: LIST
59795: LIST
59796: LIST
59797: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
59798: LD_ADDR_VAR 0 43
59802: PUSH
59803: LD_INT 2
59805: PUSH
59806: LD_INT 2
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: PUSH
59813: LD_INT 3
59815: PUSH
59816: LD_INT 2
59818: PUSH
59819: EMPTY
59820: LIST
59821: LIST
59822: PUSH
59823: LD_INT 2
59825: PUSH
59826: LD_INT 3
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: PUSH
59833: EMPTY
59834: LIST
59835: LIST
59836: LIST
59837: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
59838: LD_ADDR_VAR 0 44
59842: PUSH
59843: LD_INT 0
59845: PUSH
59846: LD_INT 2
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: PUSH
59853: LD_INT 1
59855: PUSH
59856: LD_INT 3
59858: PUSH
59859: EMPTY
59860: LIST
59861: LIST
59862: PUSH
59863: LD_INT 1
59865: NEG
59866: PUSH
59867: LD_INT 2
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: LIST
59878: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59879: LD_ADDR_VAR 0 45
59883: PUSH
59884: LD_INT 2
59886: NEG
59887: PUSH
59888: LD_INT 0
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: PUSH
59895: LD_INT 2
59897: NEG
59898: PUSH
59899: LD_INT 1
59901: PUSH
59902: EMPTY
59903: LIST
59904: LIST
59905: PUSH
59906: LD_INT 3
59908: NEG
59909: PUSH
59910: LD_INT 1
59912: NEG
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: LIST
59922: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
59923: LD_ADDR_VAR 0 46
59927: PUSH
59928: LD_INT 2
59930: NEG
59931: PUSH
59932: LD_INT 2
59934: NEG
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 2
59942: NEG
59943: PUSH
59944: LD_INT 3
59946: NEG
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 3
59954: NEG
59955: PUSH
59956: LD_INT 2
59958: NEG
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: EMPTY
59965: LIST
59966: LIST
59967: LIST
59968: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
59969: LD_ADDR_VAR 0 47
59973: PUSH
59974: LD_INT 2
59976: NEG
59977: PUSH
59978: LD_INT 3
59980: NEG
59981: PUSH
59982: EMPTY
59983: LIST
59984: LIST
59985: PUSH
59986: LD_INT 1
59988: NEG
59989: PUSH
59990: LD_INT 3
59992: NEG
59993: PUSH
59994: EMPTY
59995: LIST
59996: LIST
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
60002: LD_ADDR_VAR 0 48
60006: PUSH
60007: LD_INT 1
60009: PUSH
60010: LD_INT 2
60012: NEG
60013: PUSH
60014: EMPTY
60015: LIST
60016: LIST
60017: PUSH
60018: LD_INT 2
60020: PUSH
60021: LD_INT 1
60023: NEG
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: EMPTY
60030: LIST
60031: LIST
60032: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
60033: LD_ADDR_VAR 0 49
60037: PUSH
60038: LD_INT 3
60040: PUSH
60041: LD_INT 1
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: PUSH
60048: LD_INT 3
60050: PUSH
60051: LD_INT 2
60053: PUSH
60054: EMPTY
60055: LIST
60056: LIST
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
60062: LD_ADDR_VAR 0 50
60066: PUSH
60067: LD_INT 2
60069: PUSH
60070: LD_INT 3
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: PUSH
60077: LD_INT 1
60079: PUSH
60080: LD_INT 3
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60091: LD_ADDR_VAR 0 51
60095: PUSH
60096: LD_INT 1
60098: NEG
60099: PUSH
60100: LD_INT 2
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: PUSH
60107: LD_INT 2
60109: NEG
60110: PUSH
60111: LD_INT 1
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: PUSH
60118: EMPTY
60119: LIST
60120: LIST
60121: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60122: LD_ADDR_VAR 0 52
60126: PUSH
60127: LD_INT 3
60129: NEG
60130: PUSH
60131: LD_INT 1
60133: NEG
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: PUSH
60139: LD_INT 3
60141: NEG
60142: PUSH
60143: LD_INT 2
60145: NEG
60146: PUSH
60147: EMPTY
60148: LIST
60149: LIST
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60155: LD_ADDR_VAR 0 53
60159: PUSH
60160: LD_INT 1
60162: NEG
60163: PUSH
60164: LD_INT 3
60166: NEG
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: PUSH
60172: LD_INT 0
60174: PUSH
60175: LD_INT 3
60177: NEG
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: PUSH
60183: LD_INT 1
60185: PUSH
60186: LD_INT 2
60188: NEG
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: LIST
60198: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60199: LD_ADDR_VAR 0 54
60203: PUSH
60204: LD_INT 2
60206: PUSH
60207: LD_INT 1
60209: NEG
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_INT 3
60217: PUSH
60218: LD_INT 0
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: PUSH
60225: LD_INT 3
60227: PUSH
60228: LD_INT 1
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: LIST
60239: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60240: LD_ADDR_VAR 0 55
60244: PUSH
60245: LD_INT 3
60247: PUSH
60248: LD_INT 2
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 3
60257: PUSH
60258: LD_INT 3
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PUSH
60265: LD_INT 2
60267: PUSH
60268: LD_INT 3
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: LIST
60279: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60280: LD_ADDR_VAR 0 56
60284: PUSH
60285: LD_INT 1
60287: PUSH
60288: LD_INT 3
60290: PUSH
60291: EMPTY
60292: LIST
60293: LIST
60294: PUSH
60295: LD_INT 0
60297: PUSH
60298: LD_INT 3
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 1
60307: NEG
60308: PUSH
60309: LD_INT 2
60311: PUSH
60312: EMPTY
60313: LIST
60314: LIST
60315: PUSH
60316: EMPTY
60317: LIST
60318: LIST
60319: LIST
60320: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60321: LD_ADDR_VAR 0 57
60325: PUSH
60326: LD_INT 2
60328: NEG
60329: PUSH
60330: LD_INT 1
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 3
60339: NEG
60340: PUSH
60341: LD_INT 0
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: LD_INT 3
60350: NEG
60351: PUSH
60352: LD_INT 1
60354: NEG
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: LIST
60364: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60365: LD_ADDR_VAR 0 58
60369: PUSH
60370: LD_INT 2
60372: NEG
60373: PUSH
60374: LD_INT 3
60376: NEG
60377: PUSH
60378: EMPTY
60379: LIST
60380: LIST
60381: PUSH
60382: LD_INT 3
60384: NEG
60385: PUSH
60386: LD_INT 2
60388: NEG
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: PUSH
60394: LD_INT 3
60396: NEG
60397: PUSH
60398: LD_INT 3
60400: NEG
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: LIST
60410: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
60411: LD_ADDR_VAR 0 59
60415: PUSH
60416: LD_INT 1
60418: NEG
60419: PUSH
60420: LD_INT 2
60422: NEG
60423: PUSH
60424: EMPTY
60425: LIST
60426: LIST
60427: PUSH
60428: LD_INT 0
60430: PUSH
60431: LD_INT 2
60433: NEG
60434: PUSH
60435: EMPTY
60436: LIST
60437: LIST
60438: PUSH
60439: LD_INT 1
60441: PUSH
60442: LD_INT 1
60444: NEG
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: LIST
60454: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60455: LD_ADDR_VAR 0 60
60459: PUSH
60460: LD_INT 1
60462: PUSH
60463: LD_INT 1
60465: NEG
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: PUSH
60471: LD_INT 2
60473: PUSH
60474: LD_INT 0
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: PUSH
60481: LD_INT 2
60483: PUSH
60484: LD_INT 1
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: EMPTY
60492: LIST
60493: LIST
60494: LIST
60495: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60496: LD_ADDR_VAR 0 61
60500: PUSH
60501: LD_INT 2
60503: PUSH
60504: LD_INT 1
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: PUSH
60511: LD_INT 2
60513: PUSH
60514: LD_INT 2
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 1
60523: PUSH
60524: LD_INT 2
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: LIST
60535: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60536: LD_ADDR_VAR 0 62
60540: PUSH
60541: LD_INT 1
60543: PUSH
60544: LD_INT 2
60546: PUSH
60547: EMPTY
60548: LIST
60549: LIST
60550: PUSH
60551: LD_INT 0
60553: PUSH
60554: LD_INT 2
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: PUSH
60561: LD_INT 1
60563: NEG
60564: PUSH
60565: LD_INT 1
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: LIST
60576: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60577: LD_ADDR_VAR 0 63
60581: PUSH
60582: LD_INT 1
60584: NEG
60585: PUSH
60586: LD_INT 1
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: PUSH
60593: LD_INT 2
60595: NEG
60596: PUSH
60597: LD_INT 0
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: PUSH
60604: LD_INT 2
60606: NEG
60607: PUSH
60608: LD_INT 1
60610: NEG
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: PUSH
60616: EMPTY
60617: LIST
60618: LIST
60619: LIST
60620: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60621: LD_ADDR_VAR 0 64
60625: PUSH
60626: LD_INT 1
60628: NEG
60629: PUSH
60630: LD_INT 2
60632: NEG
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PUSH
60638: LD_INT 2
60640: NEG
60641: PUSH
60642: LD_INT 1
60644: NEG
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: PUSH
60650: LD_INT 2
60652: NEG
60653: PUSH
60654: LD_INT 2
60656: NEG
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: LIST
60666: ST_TO_ADDR
// end ; 2 :
60667: GO 63933
60669: LD_INT 2
60671: DOUBLE
60672: EQUAL
60673: IFTRUE 60677
60675: GO 63932
60677: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
60678: LD_ADDR_VAR 0 29
60682: PUSH
60683: LD_INT 4
60685: PUSH
60686: LD_INT 0
60688: PUSH
60689: EMPTY
60690: LIST
60691: LIST
60692: PUSH
60693: LD_INT 4
60695: PUSH
60696: LD_INT 1
60698: NEG
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: PUSH
60704: LD_INT 5
60706: PUSH
60707: LD_INT 0
60709: PUSH
60710: EMPTY
60711: LIST
60712: LIST
60713: PUSH
60714: LD_INT 5
60716: PUSH
60717: LD_INT 1
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: PUSH
60724: LD_INT 4
60726: PUSH
60727: LD_INT 1
60729: PUSH
60730: EMPTY
60731: LIST
60732: LIST
60733: PUSH
60734: LD_INT 3
60736: PUSH
60737: LD_INT 0
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: PUSH
60744: LD_INT 3
60746: PUSH
60747: LD_INT 1
60749: NEG
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: PUSH
60755: LD_INT 3
60757: PUSH
60758: LD_INT 2
60760: NEG
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: PUSH
60766: LD_INT 5
60768: PUSH
60769: LD_INT 2
60771: PUSH
60772: EMPTY
60773: LIST
60774: LIST
60775: PUSH
60776: LD_INT 3
60778: PUSH
60779: LD_INT 3
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 3
60788: PUSH
60789: LD_INT 2
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 4
60798: PUSH
60799: LD_INT 3
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PUSH
60806: LD_INT 4
60808: PUSH
60809: LD_INT 4
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: LD_INT 3
60818: PUSH
60819: LD_INT 4
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 2
60828: PUSH
60829: LD_INT 3
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 2
60838: PUSH
60839: LD_INT 2
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PUSH
60846: LD_INT 4
60848: PUSH
60849: LD_INT 2
60851: PUSH
60852: EMPTY
60853: LIST
60854: LIST
60855: PUSH
60856: LD_INT 2
60858: PUSH
60859: LD_INT 4
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: PUSH
60866: LD_INT 0
60868: PUSH
60869: LD_INT 4
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: PUSH
60876: LD_INT 0
60878: PUSH
60879: LD_INT 3
60881: PUSH
60882: EMPTY
60883: LIST
60884: LIST
60885: PUSH
60886: LD_INT 1
60888: PUSH
60889: LD_INT 4
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: PUSH
60896: LD_INT 1
60898: PUSH
60899: LD_INT 5
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: LD_INT 0
60908: PUSH
60909: LD_INT 5
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: LD_INT 1
60918: NEG
60919: PUSH
60920: LD_INT 4
60922: PUSH
60923: EMPTY
60924: LIST
60925: LIST
60926: PUSH
60927: LD_INT 1
60929: NEG
60930: PUSH
60931: LD_INT 3
60933: PUSH
60934: EMPTY
60935: LIST
60936: LIST
60937: PUSH
60938: LD_INT 2
60940: PUSH
60941: LD_INT 5
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: PUSH
60948: LD_INT 2
60950: NEG
60951: PUSH
60952: LD_INT 3
60954: PUSH
60955: EMPTY
60956: LIST
60957: LIST
60958: PUSH
60959: LD_INT 3
60961: NEG
60962: PUSH
60963: LD_INT 0
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: PUSH
60970: LD_INT 3
60972: NEG
60973: PUSH
60974: LD_INT 1
60976: NEG
60977: PUSH
60978: EMPTY
60979: LIST
60980: LIST
60981: PUSH
60982: LD_INT 2
60984: NEG
60985: PUSH
60986: LD_INT 0
60988: PUSH
60989: EMPTY
60990: LIST
60991: LIST
60992: PUSH
60993: LD_INT 2
60995: NEG
60996: PUSH
60997: LD_INT 1
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: LD_INT 3
61006: NEG
61007: PUSH
61008: LD_INT 1
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 4
61017: NEG
61018: PUSH
61019: LD_INT 0
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: PUSH
61026: LD_INT 4
61028: NEG
61029: PUSH
61030: LD_INT 1
61032: NEG
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: LD_INT 4
61040: NEG
61041: PUSH
61042: LD_INT 2
61044: NEG
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: LD_INT 2
61052: NEG
61053: PUSH
61054: LD_INT 2
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: PUSH
61061: LD_INT 4
61063: NEG
61064: PUSH
61065: LD_INT 4
61067: NEG
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: LD_INT 4
61075: NEG
61076: PUSH
61077: LD_INT 5
61079: NEG
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: LD_INT 3
61087: NEG
61088: PUSH
61089: LD_INT 4
61091: NEG
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 3
61099: NEG
61100: PUSH
61101: LD_INT 3
61103: NEG
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 4
61111: NEG
61112: PUSH
61113: LD_INT 3
61115: NEG
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: LD_INT 5
61123: NEG
61124: PUSH
61125: LD_INT 4
61127: NEG
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: PUSH
61133: LD_INT 5
61135: NEG
61136: PUSH
61137: LD_INT 5
61139: NEG
61140: PUSH
61141: EMPTY
61142: LIST
61143: LIST
61144: PUSH
61145: LD_INT 3
61147: NEG
61148: PUSH
61149: LD_INT 5
61151: NEG
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 5
61159: NEG
61160: PUSH
61161: LD_INT 3
61163: NEG
61164: PUSH
61165: EMPTY
61166: LIST
61167: LIST
61168: PUSH
61169: EMPTY
61170: LIST
61171: LIST
61172: LIST
61173: LIST
61174: LIST
61175: LIST
61176: LIST
61177: LIST
61178: LIST
61179: LIST
61180: LIST
61181: LIST
61182: LIST
61183: LIST
61184: LIST
61185: LIST
61186: LIST
61187: LIST
61188: LIST
61189: LIST
61190: LIST
61191: LIST
61192: LIST
61193: LIST
61194: LIST
61195: LIST
61196: LIST
61197: LIST
61198: LIST
61199: LIST
61200: LIST
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: LIST
61206: LIST
61207: LIST
61208: LIST
61209: LIST
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
61216: LD_ADDR_VAR 0 30
61220: PUSH
61221: LD_INT 4
61223: PUSH
61224: LD_INT 4
61226: PUSH
61227: EMPTY
61228: LIST
61229: LIST
61230: PUSH
61231: LD_INT 4
61233: PUSH
61234: LD_INT 3
61236: PUSH
61237: EMPTY
61238: LIST
61239: LIST
61240: PUSH
61241: LD_INT 5
61243: PUSH
61244: LD_INT 4
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: PUSH
61251: LD_INT 5
61253: PUSH
61254: LD_INT 5
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PUSH
61261: LD_INT 4
61263: PUSH
61264: LD_INT 5
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: LD_INT 3
61273: PUSH
61274: LD_INT 4
61276: PUSH
61277: EMPTY
61278: LIST
61279: LIST
61280: PUSH
61281: LD_INT 3
61283: PUSH
61284: LD_INT 3
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: PUSH
61291: LD_INT 5
61293: PUSH
61294: LD_INT 3
61296: PUSH
61297: EMPTY
61298: LIST
61299: LIST
61300: PUSH
61301: LD_INT 3
61303: PUSH
61304: LD_INT 5
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: LD_INT 0
61313: PUSH
61314: LD_INT 3
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: LD_INT 0
61323: PUSH
61324: LD_INT 2
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: LD_INT 1
61333: PUSH
61334: LD_INT 3
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: LD_INT 1
61343: PUSH
61344: LD_INT 4
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: PUSH
61351: LD_INT 0
61353: PUSH
61354: LD_INT 4
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: LD_INT 1
61363: NEG
61364: PUSH
61365: LD_INT 3
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: PUSH
61372: LD_INT 1
61374: NEG
61375: PUSH
61376: LD_INT 2
61378: PUSH
61379: EMPTY
61380: LIST
61381: LIST
61382: PUSH
61383: LD_INT 2
61385: PUSH
61386: LD_INT 4
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: PUSH
61393: LD_INT 2
61395: NEG
61396: PUSH
61397: LD_INT 2
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: PUSH
61404: LD_INT 4
61406: NEG
61407: PUSH
61408: LD_INT 0
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: PUSH
61415: LD_INT 4
61417: NEG
61418: PUSH
61419: LD_INT 1
61421: NEG
61422: PUSH
61423: EMPTY
61424: LIST
61425: LIST
61426: PUSH
61427: LD_INT 3
61429: NEG
61430: PUSH
61431: LD_INT 0
61433: PUSH
61434: EMPTY
61435: LIST
61436: LIST
61437: PUSH
61438: LD_INT 3
61440: NEG
61441: PUSH
61442: LD_INT 1
61444: PUSH
61445: EMPTY
61446: LIST
61447: LIST
61448: PUSH
61449: LD_INT 4
61451: NEG
61452: PUSH
61453: LD_INT 1
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: LD_INT 5
61462: NEG
61463: PUSH
61464: LD_INT 0
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: LD_INT 5
61473: NEG
61474: PUSH
61475: LD_INT 1
61477: NEG
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 5
61485: NEG
61486: PUSH
61487: LD_INT 2
61489: NEG
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: PUSH
61495: LD_INT 3
61497: NEG
61498: PUSH
61499: LD_INT 2
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PUSH
61506: LD_INT 3
61508: NEG
61509: PUSH
61510: LD_INT 3
61512: NEG
61513: PUSH
61514: EMPTY
61515: LIST
61516: LIST
61517: PUSH
61518: LD_INT 3
61520: NEG
61521: PUSH
61522: LD_INT 4
61524: NEG
61525: PUSH
61526: EMPTY
61527: LIST
61528: LIST
61529: PUSH
61530: LD_INT 2
61532: NEG
61533: PUSH
61534: LD_INT 3
61536: NEG
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: PUSH
61542: LD_INT 2
61544: NEG
61545: PUSH
61546: LD_INT 2
61548: NEG
61549: PUSH
61550: EMPTY
61551: LIST
61552: LIST
61553: PUSH
61554: LD_INT 3
61556: NEG
61557: PUSH
61558: LD_INT 2
61560: NEG
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: PUSH
61566: LD_INT 4
61568: NEG
61569: PUSH
61570: LD_INT 3
61572: NEG
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: PUSH
61578: LD_INT 4
61580: NEG
61581: PUSH
61582: LD_INT 4
61584: NEG
61585: PUSH
61586: EMPTY
61587: LIST
61588: LIST
61589: PUSH
61590: LD_INT 2
61592: NEG
61593: PUSH
61594: LD_INT 4
61596: NEG
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: LD_INT 4
61604: NEG
61605: PUSH
61606: LD_INT 2
61608: NEG
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: PUSH
61614: LD_INT 0
61616: PUSH
61617: LD_INT 4
61619: NEG
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: PUSH
61625: LD_INT 0
61627: PUSH
61628: LD_INT 5
61630: NEG
61631: PUSH
61632: EMPTY
61633: LIST
61634: LIST
61635: PUSH
61636: LD_INT 1
61638: PUSH
61639: LD_INT 4
61641: NEG
61642: PUSH
61643: EMPTY
61644: LIST
61645: LIST
61646: PUSH
61647: LD_INT 1
61649: PUSH
61650: LD_INT 3
61652: NEG
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: PUSH
61658: LD_INT 0
61660: PUSH
61661: LD_INT 3
61663: NEG
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PUSH
61669: LD_INT 1
61671: NEG
61672: PUSH
61673: LD_INT 4
61675: NEG
61676: PUSH
61677: EMPTY
61678: LIST
61679: LIST
61680: PUSH
61681: LD_INT 1
61683: NEG
61684: PUSH
61685: LD_INT 5
61687: NEG
61688: PUSH
61689: EMPTY
61690: LIST
61691: LIST
61692: PUSH
61693: LD_INT 2
61695: PUSH
61696: LD_INT 3
61698: NEG
61699: PUSH
61700: EMPTY
61701: LIST
61702: LIST
61703: PUSH
61704: LD_INT 2
61706: NEG
61707: PUSH
61708: LD_INT 5
61710: NEG
61711: PUSH
61712: EMPTY
61713: LIST
61714: LIST
61715: PUSH
61716: EMPTY
61717: LIST
61718: LIST
61719: LIST
61720: LIST
61721: LIST
61722: LIST
61723: LIST
61724: LIST
61725: LIST
61726: LIST
61727: LIST
61728: LIST
61729: LIST
61730: LIST
61731: LIST
61732: LIST
61733: LIST
61734: LIST
61735: LIST
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: LIST
61741: LIST
61742: LIST
61743: LIST
61744: LIST
61745: LIST
61746: LIST
61747: LIST
61748: LIST
61749: LIST
61750: LIST
61751: LIST
61752: LIST
61753: LIST
61754: LIST
61755: LIST
61756: LIST
61757: LIST
61758: LIST
61759: LIST
61760: LIST
61761: LIST
61762: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
61763: LD_ADDR_VAR 0 31
61767: PUSH
61768: LD_INT 0
61770: PUSH
61771: LD_INT 4
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 0
61780: PUSH
61781: LD_INT 3
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: PUSH
61788: LD_INT 1
61790: PUSH
61791: LD_INT 4
61793: PUSH
61794: EMPTY
61795: LIST
61796: LIST
61797: PUSH
61798: LD_INT 1
61800: PUSH
61801: LD_INT 5
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: LD_INT 0
61810: PUSH
61811: LD_INT 5
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: PUSH
61818: LD_INT 1
61820: NEG
61821: PUSH
61822: LD_INT 4
61824: PUSH
61825: EMPTY
61826: LIST
61827: LIST
61828: PUSH
61829: LD_INT 1
61831: NEG
61832: PUSH
61833: LD_INT 3
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PUSH
61840: LD_INT 2
61842: PUSH
61843: LD_INT 5
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: LD_INT 2
61852: NEG
61853: PUSH
61854: LD_INT 3
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: PUSH
61861: LD_INT 3
61863: NEG
61864: PUSH
61865: LD_INT 0
61867: PUSH
61868: EMPTY
61869: LIST
61870: LIST
61871: PUSH
61872: LD_INT 3
61874: NEG
61875: PUSH
61876: LD_INT 1
61878: NEG
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: PUSH
61884: LD_INT 2
61886: NEG
61887: PUSH
61888: LD_INT 0
61890: PUSH
61891: EMPTY
61892: LIST
61893: LIST
61894: PUSH
61895: LD_INT 2
61897: NEG
61898: PUSH
61899: LD_INT 1
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: PUSH
61906: LD_INT 3
61908: NEG
61909: PUSH
61910: LD_INT 1
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: PUSH
61917: LD_INT 4
61919: NEG
61920: PUSH
61921: LD_INT 0
61923: PUSH
61924: EMPTY
61925: LIST
61926: LIST
61927: PUSH
61928: LD_INT 4
61930: NEG
61931: PUSH
61932: LD_INT 1
61934: NEG
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: PUSH
61940: LD_INT 4
61942: NEG
61943: PUSH
61944: LD_INT 2
61946: NEG
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: PUSH
61952: LD_INT 2
61954: NEG
61955: PUSH
61956: LD_INT 2
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: PUSH
61963: LD_INT 4
61965: NEG
61966: PUSH
61967: LD_INT 4
61969: NEG
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: LD_INT 4
61977: NEG
61978: PUSH
61979: LD_INT 5
61981: NEG
61982: PUSH
61983: EMPTY
61984: LIST
61985: LIST
61986: PUSH
61987: LD_INT 3
61989: NEG
61990: PUSH
61991: LD_INT 4
61993: NEG
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: LD_INT 3
62001: NEG
62002: PUSH
62003: LD_INT 3
62005: NEG
62006: PUSH
62007: EMPTY
62008: LIST
62009: LIST
62010: PUSH
62011: LD_INT 4
62013: NEG
62014: PUSH
62015: LD_INT 3
62017: NEG
62018: PUSH
62019: EMPTY
62020: LIST
62021: LIST
62022: PUSH
62023: LD_INT 5
62025: NEG
62026: PUSH
62027: LD_INT 4
62029: NEG
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 5
62037: NEG
62038: PUSH
62039: LD_INT 5
62041: NEG
62042: PUSH
62043: EMPTY
62044: LIST
62045: LIST
62046: PUSH
62047: LD_INT 3
62049: NEG
62050: PUSH
62051: LD_INT 5
62053: NEG
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: PUSH
62059: LD_INT 5
62061: NEG
62062: PUSH
62063: LD_INT 3
62065: NEG
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: PUSH
62071: LD_INT 0
62073: PUSH
62074: LD_INT 3
62076: NEG
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: PUSH
62082: LD_INT 0
62084: PUSH
62085: LD_INT 4
62087: NEG
62088: PUSH
62089: EMPTY
62090: LIST
62091: LIST
62092: PUSH
62093: LD_INT 1
62095: PUSH
62096: LD_INT 3
62098: NEG
62099: PUSH
62100: EMPTY
62101: LIST
62102: LIST
62103: PUSH
62104: LD_INT 1
62106: PUSH
62107: LD_INT 2
62109: NEG
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: PUSH
62115: LD_INT 0
62117: PUSH
62118: LD_INT 2
62120: NEG
62121: PUSH
62122: EMPTY
62123: LIST
62124: LIST
62125: PUSH
62126: LD_INT 1
62128: NEG
62129: PUSH
62130: LD_INT 3
62132: NEG
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: PUSH
62138: LD_INT 1
62140: NEG
62141: PUSH
62142: LD_INT 4
62144: NEG
62145: PUSH
62146: EMPTY
62147: LIST
62148: LIST
62149: PUSH
62150: LD_INT 2
62152: PUSH
62153: LD_INT 2
62155: NEG
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: PUSH
62161: LD_INT 2
62163: NEG
62164: PUSH
62165: LD_INT 4
62167: NEG
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: LD_INT 4
62175: PUSH
62176: LD_INT 0
62178: PUSH
62179: EMPTY
62180: LIST
62181: LIST
62182: PUSH
62183: LD_INT 4
62185: PUSH
62186: LD_INT 1
62188: NEG
62189: PUSH
62190: EMPTY
62191: LIST
62192: LIST
62193: PUSH
62194: LD_INT 5
62196: PUSH
62197: LD_INT 0
62199: PUSH
62200: EMPTY
62201: LIST
62202: LIST
62203: PUSH
62204: LD_INT 5
62206: PUSH
62207: LD_INT 1
62209: PUSH
62210: EMPTY
62211: LIST
62212: LIST
62213: PUSH
62214: LD_INT 4
62216: PUSH
62217: LD_INT 1
62219: PUSH
62220: EMPTY
62221: LIST
62222: LIST
62223: PUSH
62224: LD_INT 3
62226: PUSH
62227: LD_INT 0
62229: PUSH
62230: EMPTY
62231: LIST
62232: LIST
62233: PUSH
62234: LD_INT 3
62236: PUSH
62237: LD_INT 1
62239: NEG
62240: PUSH
62241: EMPTY
62242: LIST
62243: LIST
62244: PUSH
62245: LD_INT 3
62247: PUSH
62248: LD_INT 2
62250: NEG
62251: PUSH
62252: EMPTY
62253: LIST
62254: LIST
62255: PUSH
62256: LD_INT 5
62258: PUSH
62259: LD_INT 2
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: LIST
62270: LIST
62271: LIST
62272: LIST
62273: LIST
62274: LIST
62275: LIST
62276: LIST
62277: LIST
62278: LIST
62279: LIST
62280: LIST
62281: LIST
62282: LIST
62283: LIST
62284: LIST
62285: LIST
62286: LIST
62287: LIST
62288: LIST
62289: LIST
62290: LIST
62291: LIST
62292: LIST
62293: LIST
62294: LIST
62295: LIST
62296: LIST
62297: LIST
62298: LIST
62299: LIST
62300: LIST
62301: LIST
62302: LIST
62303: LIST
62304: LIST
62305: LIST
62306: LIST
62307: LIST
62308: LIST
62309: LIST
62310: LIST
62311: LIST
62312: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
62313: LD_ADDR_VAR 0 32
62317: PUSH
62318: LD_INT 4
62320: NEG
62321: PUSH
62322: LD_INT 0
62324: PUSH
62325: EMPTY
62326: LIST
62327: LIST
62328: PUSH
62329: LD_INT 4
62331: NEG
62332: PUSH
62333: LD_INT 1
62335: NEG
62336: PUSH
62337: EMPTY
62338: LIST
62339: LIST
62340: PUSH
62341: LD_INT 3
62343: NEG
62344: PUSH
62345: LD_INT 0
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: PUSH
62352: LD_INT 3
62354: NEG
62355: PUSH
62356: LD_INT 1
62358: PUSH
62359: EMPTY
62360: LIST
62361: LIST
62362: PUSH
62363: LD_INT 4
62365: NEG
62366: PUSH
62367: LD_INT 1
62369: PUSH
62370: EMPTY
62371: LIST
62372: LIST
62373: PUSH
62374: LD_INT 5
62376: NEG
62377: PUSH
62378: LD_INT 0
62380: PUSH
62381: EMPTY
62382: LIST
62383: LIST
62384: PUSH
62385: LD_INT 5
62387: NEG
62388: PUSH
62389: LD_INT 1
62391: NEG
62392: PUSH
62393: EMPTY
62394: LIST
62395: LIST
62396: PUSH
62397: LD_INT 5
62399: NEG
62400: PUSH
62401: LD_INT 2
62403: NEG
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PUSH
62409: LD_INT 3
62411: NEG
62412: PUSH
62413: LD_INT 2
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: LD_INT 3
62422: NEG
62423: PUSH
62424: LD_INT 3
62426: NEG
62427: PUSH
62428: EMPTY
62429: LIST
62430: LIST
62431: PUSH
62432: LD_INT 3
62434: NEG
62435: PUSH
62436: LD_INT 4
62438: NEG
62439: PUSH
62440: EMPTY
62441: LIST
62442: LIST
62443: PUSH
62444: LD_INT 2
62446: NEG
62447: PUSH
62448: LD_INT 3
62450: NEG
62451: PUSH
62452: EMPTY
62453: LIST
62454: LIST
62455: PUSH
62456: LD_INT 2
62458: NEG
62459: PUSH
62460: LD_INT 2
62462: NEG
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: LD_INT 3
62470: NEG
62471: PUSH
62472: LD_INT 2
62474: NEG
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: PUSH
62480: LD_INT 4
62482: NEG
62483: PUSH
62484: LD_INT 3
62486: NEG
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: PUSH
62492: LD_INT 4
62494: NEG
62495: PUSH
62496: LD_INT 4
62498: NEG
62499: PUSH
62500: EMPTY
62501: LIST
62502: LIST
62503: PUSH
62504: LD_INT 2
62506: NEG
62507: PUSH
62508: LD_INT 4
62510: NEG
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: PUSH
62516: LD_INT 4
62518: NEG
62519: PUSH
62520: LD_INT 2
62522: NEG
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: PUSH
62528: LD_INT 0
62530: PUSH
62531: LD_INT 4
62533: NEG
62534: PUSH
62535: EMPTY
62536: LIST
62537: LIST
62538: PUSH
62539: LD_INT 0
62541: PUSH
62542: LD_INT 5
62544: NEG
62545: PUSH
62546: EMPTY
62547: LIST
62548: LIST
62549: PUSH
62550: LD_INT 1
62552: PUSH
62553: LD_INT 4
62555: NEG
62556: PUSH
62557: EMPTY
62558: LIST
62559: LIST
62560: PUSH
62561: LD_INT 1
62563: PUSH
62564: LD_INT 3
62566: NEG
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: PUSH
62572: LD_INT 0
62574: PUSH
62575: LD_INT 3
62577: NEG
62578: PUSH
62579: EMPTY
62580: LIST
62581: LIST
62582: PUSH
62583: LD_INT 1
62585: NEG
62586: PUSH
62587: LD_INT 4
62589: NEG
62590: PUSH
62591: EMPTY
62592: LIST
62593: LIST
62594: PUSH
62595: LD_INT 1
62597: NEG
62598: PUSH
62599: LD_INT 5
62601: NEG
62602: PUSH
62603: EMPTY
62604: LIST
62605: LIST
62606: PUSH
62607: LD_INT 2
62609: PUSH
62610: LD_INT 3
62612: NEG
62613: PUSH
62614: EMPTY
62615: LIST
62616: LIST
62617: PUSH
62618: LD_INT 2
62620: NEG
62621: PUSH
62622: LD_INT 5
62624: NEG
62625: PUSH
62626: EMPTY
62627: LIST
62628: LIST
62629: PUSH
62630: LD_INT 3
62632: PUSH
62633: LD_INT 0
62635: PUSH
62636: EMPTY
62637: LIST
62638: LIST
62639: PUSH
62640: LD_INT 3
62642: PUSH
62643: LD_INT 1
62645: NEG
62646: PUSH
62647: EMPTY
62648: LIST
62649: LIST
62650: PUSH
62651: LD_INT 4
62653: PUSH
62654: LD_INT 0
62656: PUSH
62657: EMPTY
62658: LIST
62659: LIST
62660: PUSH
62661: LD_INT 4
62663: PUSH
62664: LD_INT 1
62666: PUSH
62667: EMPTY
62668: LIST
62669: LIST
62670: PUSH
62671: LD_INT 3
62673: PUSH
62674: LD_INT 1
62676: PUSH
62677: EMPTY
62678: LIST
62679: LIST
62680: PUSH
62681: LD_INT 2
62683: PUSH
62684: LD_INT 0
62686: PUSH
62687: EMPTY
62688: LIST
62689: LIST
62690: PUSH
62691: LD_INT 2
62693: PUSH
62694: LD_INT 1
62696: NEG
62697: PUSH
62698: EMPTY
62699: LIST
62700: LIST
62701: PUSH
62702: LD_INT 2
62704: PUSH
62705: LD_INT 2
62707: NEG
62708: PUSH
62709: EMPTY
62710: LIST
62711: LIST
62712: PUSH
62713: LD_INT 4
62715: PUSH
62716: LD_INT 2
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: PUSH
62723: LD_INT 4
62725: PUSH
62726: LD_INT 4
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: LD_INT 4
62735: PUSH
62736: LD_INT 3
62738: PUSH
62739: EMPTY
62740: LIST
62741: LIST
62742: PUSH
62743: LD_INT 5
62745: PUSH
62746: LD_INT 4
62748: PUSH
62749: EMPTY
62750: LIST
62751: LIST
62752: PUSH
62753: LD_INT 5
62755: PUSH
62756: LD_INT 5
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: PUSH
62763: LD_INT 4
62765: PUSH
62766: LD_INT 5
62768: PUSH
62769: EMPTY
62770: LIST
62771: LIST
62772: PUSH
62773: LD_INT 3
62775: PUSH
62776: LD_INT 4
62778: PUSH
62779: EMPTY
62780: LIST
62781: LIST
62782: PUSH
62783: LD_INT 3
62785: PUSH
62786: LD_INT 3
62788: PUSH
62789: EMPTY
62790: LIST
62791: LIST
62792: PUSH
62793: LD_INT 5
62795: PUSH
62796: LD_INT 3
62798: PUSH
62799: EMPTY
62800: LIST
62801: LIST
62802: PUSH
62803: LD_INT 3
62805: PUSH
62806: LD_INT 5
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: LIST
62817: LIST
62818: LIST
62819: LIST
62820: LIST
62821: LIST
62822: LIST
62823: LIST
62824: LIST
62825: LIST
62826: LIST
62827: LIST
62828: LIST
62829: LIST
62830: LIST
62831: LIST
62832: LIST
62833: LIST
62834: LIST
62835: LIST
62836: LIST
62837: LIST
62838: LIST
62839: LIST
62840: LIST
62841: LIST
62842: LIST
62843: LIST
62844: LIST
62845: LIST
62846: LIST
62847: LIST
62848: LIST
62849: LIST
62850: LIST
62851: LIST
62852: LIST
62853: LIST
62854: LIST
62855: LIST
62856: LIST
62857: LIST
62858: LIST
62859: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
62860: LD_ADDR_VAR 0 33
62864: PUSH
62865: LD_INT 4
62867: NEG
62868: PUSH
62869: LD_INT 4
62871: NEG
62872: PUSH
62873: EMPTY
62874: LIST
62875: LIST
62876: PUSH
62877: LD_INT 4
62879: NEG
62880: PUSH
62881: LD_INT 5
62883: NEG
62884: PUSH
62885: EMPTY
62886: LIST
62887: LIST
62888: PUSH
62889: LD_INT 3
62891: NEG
62892: PUSH
62893: LD_INT 4
62895: NEG
62896: PUSH
62897: EMPTY
62898: LIST
62899: LIST
62900: PUSH
62901: LD_INT 3
62903: NEG
62904: PUSH
62905: LD_INT 3
62907: NEG
62908: PUSH
62909: EMPTY
62910: LIST
62911: LIST
62912: PUSH
62913: LD_INT 4
62915: NEG
62916: PUSH
62917: LD_INT 3
62919: NEG
62920: PUSH
62921: EMPTY
62922: LIST
62923: LIST
62924: PUSH
62925: LD_INT 5
62927: NEG
62928: PUSH
62929: LD_INT 4
62931: NEG
62932: PUSH
62933: EMPTY
62934: LIST
62935: LIST
62936: PUSH
62937: LD_INT 5
62939: NEG
62940: PUSH
62941: LD_INT 5
62943: NEG
62944: PUSH
62945: EMPTY
62946: LIST
62947: LIST
62948: PUSH
62949: LD_INT 3
62951: NEG
62952: PUSH
62953: LD_INT 5
62955: NEG
62956: PUSH
62957: EMPTY
62958: LIST
62959: LIST
62960: PUSH
62961: LD_INT 5
62963: NEG
62964: PUSH
62965: LD_INT 3
62967: NEG
62968: PUSH
62969: EMPTY
62970: LIST
62971: LIST
62972: PUSH
62973: LD_INT 0
62975: PUSH
62976: LD_INT 3
62978: NEG
62979: PUSH
62980: EMPTY
62981: LIST
62982: LIST
62983: PUSH
62984: LD_INT 0
62986: PUSH
62987: LD_INT 4
62989: NEG
62990: PUSH
62991: EMPTY
62992: LIST
62993: LIST
62994: PUSH
62995: LD_INT 1
62997: PUSH
62998: LD_INT 3
63000: NEG
63001: PUSH
63002: EMPTY
63003: LIST
63004: LIST
63005: PUSH
63006: LD_INT 1
63008: PUSH
63009: LD_INT 2
63011: NEG
63012: PUSH
63013: EMPTY
63014: LIST
63015: LIST
63016: PUSH
63017: LD_INT 0
63019: PUSH
63020: LD_INT 2
63022: NEG
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: PUSH
63028: LD_INT 1
63030: NEG
63031: PUSH
63032: LD_INT 3
63034: NEG
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: PUSH
63040: LD_INT 1
63042: NEG
63043: PUSH
63044: LD_INT 4
63046: NEG
63047: PUSH
63048: EMPTY
63049: LIST
63050: LIST
63051: PUSH
63052: LD_INT 2
63054: PUSH
63055: LD_INT 2
63057: NEG
63058: PUSH
63059: EMPTY
63060: LIST
63061: LIST
63062: PUSH
63063: LD_INT 2
63065: NEG
63066: PUSH
63067: LD_INT 4
63069: NEG
63070: PUSH
63071: EMPTY
63072: LIST
63073: LIST
63074: PUSH
63075: LD_INT 4
63077: PUSH
63078: LD_INT 0
63080: PUSH
63081: EMPTY
63082: LIST
63083: LIST
63084: PUSH
63085: LD_INT 4
63087: PUSH
63088: LD_INT 1
63090: NEG
63091: PUSH
63092: EMPTY
63093: LIST
63094: LIST
63095: PUSH
63096: LD_INT 5
63098: PUSH
63099: LD_INT 0
63101: PUSH
63102: EMPTY
63103: LIST
63104: LIST
63105: PUSH
63106: LD_INT 5
63108: PUSH
63109: LD_INT 1
63111: PUSH
63112: EMPTY
63113: LIST
63114: LIST
63115: PUSH
63116: LD_INT 4
63118: PUSH
63119: LD_INT 1
63121: PUSH
63122: EMPTY
63123: LIST
63124: LIST
63125: PUSH
63126: LD_INT 3
63128: PUSH
63129: LD_INT 0
63131: PUSH
63132: EMPTY
63133: LIST
63134: LIST
63135: PUSH
63136: LD_INT 3
63138: PUSH
63139: LD_INT 1
63141: NEG
63142: PUSH
63143: EMPTY
63144: LIST
63145: LIST
63146: PUSH
63147: LD_INT 3
63149: PUSH
63150: LD_INT 2
63152: NEG
63153: PUSH
63154: EMPTY
63155: LIST
63156: LIST
63157: PUSH
63158: LD_INT 5
63160: PUSH
63161: LD_INT 2
63163: PUSH
63164: EMPTY
63165: LIST
63166: LIST
63167: PUSH
63168: LD_INT 3
63170: PUSH
63171: LD_INT 3
63173: PUSH
63174: EMPTY
63175: LIST
63176: LIST
63177: PUSH
63178: LD_INT 3
63180: PUSH
63181: LD_INT 2
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: PUSH
63188: LD_INT 4
63190: PUSH
63191: LD_INT 3
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: PUSH
63198: LD_INT 4
63200: PUSH
63201: LD_INT 4
63203: PUSH
63204: EMPTY
63205: LIST
63206: LIST
63207: PUSH
63208: LD_INT 3
63210: PUSH
63211: LD_INT 4
63213: PUSH
63214: EMPTY
63215: LIST
63216: LIST
63217: PUSH
63218: LD_INT 2
63220: PUSH
63221: LD_INT 3
63223: PUSH
63224: EMPTY
63225: LIST
63226: LIST
63227: PUSH
63228: LD_INT 2
63230: PUSH
63231: LD_INT 2
63233: PUSH
63234: EMPTY
63235: LIST
63236: LIST
63237: PUSH
63238: LD_INT 4
63240: PUSH
63241: LD_INT 2
63243: PUSH
63244: EMPTY
63245: LIST
63246: LIST
63247: PUSH
63248: LD_INT 2
63250: PUSH
63251: LD_INT 4
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: PUSH
63258: LD_INT 0
63260: PUSH
63261: LD_INT 4
63263: PUSH
63264: EMPTY
63265: LIST
63266: LIST
63267: PUSH
63268: LD_INT 0
63270: PUSH
63271: LD_INT 3
63273: PUSH
63274: EMPTY
63275: LIST
63276: LIST
63277: PUSH
63278: LD_INT 1
63280: PUSH
63281: LD_INT 4
63283: PUSH
63284: EMPTY
63285: LIST
63286: LIST
63287: PUSH
63288: LD_INT 1
63290: PUSH
63291: LD_INT 5
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: PUSH
63298: LD_INT 0
63300: PUSH
63301: LD_INT 5
63303: PUSH
63304: EMPTY
63305: LIST
63306: LIST
63307: PUSH
63308: LD_INT 1
63310: NEG
63311: PUSH
63312: LD_INT 4
63314: PUSH
63315: EMPTY
63316: LIST
63317: LIST
63318: PUSH
63319: LD_INT 1
63321: NEG
63322: PUSH
63323: LD_INT 3
63325: PUSH
63326: EMPTY
63327: LIST
63328: LIST
63329: PUSH
63330: LD_INT 2
63332: PUSH
63333: LD_INT 5
63335: PUSH
63336: EMPTY
63337: LIST
63338: LIST
63339: PUSH
63340: LD_INT 2
63342: NEG
63343: PUSH
63344: LD_INT 3
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: PUSH
63351: EMPTY
63352: LIST
63353: LIST
63354: LIST
63355: LIST
63356: LIST
63357: LIST
63358: LIST
63359: LIST
63360: LIST
63361: LIST
63362: LIST
63363: LIST
63364: LIST
63365: LIST
63366: LIST
63367: LIST
63368: LIST
63369: LIST
63370: LIST
63371: LIST
63372: LIST
63373: LIST
63374: LIST
63375: LIST
63376: LIST
63377: LIST
63378: LIST
63379: LIST
63380: LIST
63381: LIST
63382: LIST
63383: LIST
63384: LIST
63385: LIST
63386: LIST
63387: LIST
63388: LIST
63389: LIST
63390: LIST
63391: LIST
63392: LIST
63393: LIST
63394: LIST
63395: LIST
63396: LIST
63397: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
63398: LD_ADDR_VAR 0 34
63402: PUSH
63403: LD_INT 0
63405: PUSH
63406: LD_INT 4
63408: NEG
63409: PUSH
63410: EMPTY
63411: LIST
63412: LIST
63413: PUSH
63414: LD_INT 0
63416: PUSH
63417: LD_INT 5
63419: NEG
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: PUSH
63425: LD_INT 1
63427: PUSH
63428: LD_INT 4
63430: NEG
63431: PUSH
63432: EMPTY
63433: LIST
63434: LIST
63435: PUSH
63436: LD_INT 1
63438: PUSH
63439: LD_INT 3
63441: NEG
63442: PUSH
63443: EMPTY
63444: LIST
63445: LIST
63446: PUSH
63447: LD_INT 0
63449: PUSH
63450: LD_INT 3
63452: NEG
63453: PUSH
63454: EMPTY
63455: LIST
63456: LIST
63457: PUSH
63458: LD_INT 1
63460: NEG
63461: PUSH
63462: LD_INT 4
63464: NEG
63465: PUSH
63466: EMPTY
63467: LIST
63468: LIST
63469: PUSH
63470: LD_INT 1
63472: NEG
63473: PUSH
63474: LD_INT 5
63476: NEG
63477: PUSH
63478: EMPTY
63479: LIST
63480: LIST
63481: PUSH
63482: LD_INT 2
63484: PUSH
63485: LD_INT 3
63487: NEG
63488: PUSH
63489: EMPTY
63490: LIST
63491: LIST
63492: PUSH
63493: LD_INT 2
63495: NEG
63496: PUSH
63497: LD_INT 5
63499: NEG
63500: PUSH
63501: EMPTY
63502: LIST
63503: LIST
63504: PUSH
63505: LD_INT 3
63507: PUSH
63508: LD_INT 0
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: PUSH
63515: LD_INT 3
63517: PUSH
63518: LD_INT 1
63520: NEG
63521: PUSH
63522: EMPTY
63523: LIST
63524: LIST
63525: PUSH
63526: LD_INT 4
63528: PUSH
63529: LD_INT 0
63531: PUSH
63532: EMPTY
63533: LIST
63534: LIST
63535: PUSH
63536: LD_INT 4
63538: PUSH
63539: LD_INT 1
63541: PUSH
63542: EMPTY
63543: LIST
63544: LIST
63545: PUSH
63546: LD_INT 3
63548: PUSH
63549: LD_INT 1
63551: PUSH
63552: EMPTY
63553: LIST
63554: LIST
63555: PUSH
63556: LD_INT 2
63558: PUSH
63559: LD_INT 0
63561: PUSH
63562: EMPTY
63563: LIST
63564: LIST
63565: PUSH
63566: LD_INT 2
63568: PUSH
63569: LD_INT 1
63571: NEG
63572: PUSH
63573: EMPTY
63574: LIST
63575: LIST
63576: PUSH
63577: LD_INT 2
63579: PUSH
63580: LD_INT 2
63582: NEG
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: PUSH
63588: LD_INT 4
63590: PUSH
63591: LD_INT 2
63593: PUSH
63594: EMPTY
63595: LIST
63596: LIST
63597: PUSH
63598: LD_INT 4
63600: PUSH
63601: LD_INT 4
63603: PUSH
63604: EMPTY
63605: LIST
63606: LIST
63607: PUSH
63608: LD_INT 4
63610: PUSH
63611: LD_INT 3
63613: PUSH
63614: EMPTY
63615: LIST
63616: LIST
63617: PUSH
63618: LD_INT 5
63620: PUSH
63621: LD_INT 4
63623: PUSH
63624: EMPTY
63625: LIST
63626: LIST
63627: PUSH
63628: LD_INT 5
63630: PUSH
63631: LD_INT 5
63633: PUSH
63634: EMPTY
63635: LIST
63636: LIST
63637: PUSH
63638: LD_INT 4
63640: PUSH
63641: LD_INT 5
63643: PUSH
63644: EMPTY
63645: LIST
63646: LIST
63647: PUSH
63648: LD_INT 3
63650: PUSH
63651: LD_INT 4
63653: PUSH
63654: EMPTY
63655: LIST
63656: LIST
63657: PUSH
63658: LD_INT 3
63660: PUSH
63661: LD_INT 3
63663: PUSH
63664: EMPTY
63665: LIST
63666: LIST
63667: PUSH
63668: LD_INT 5
63670: PUSH
63671: LD_INT 3
63673: PUSH
63674: EMPTY
63675: LIST
63676: LIST
63677: PUSH
63678: LD_INT 3
63680: PUSH
63681: LD_INT 5
63683: PUSH
63684: EMPTY
63685: LIST
63686: LIST
63687: PUSH
63688: LD_INT 0
63690: PUSH
63691: LD_INT 3
63693: PUSH
63694: EMPTY
63695: LIST
63696: LIST
63697: PUSH
63698: LD_INT 0
63700: PUSH
63701: LD_INT 2
63703: PUSH
63704: EMPTY
63705: LIST
63706: LIST
63707: PUSH
63708: LD_INT 1
63710: PUSH
63711: LD_INT 3
63713: PUSH
63714: EMPTY
63715: LIST
63716: LIST
63717: PUSH
63718: LD_INT 1
63720: PUSH
63721: LD_INT 4
63723: PUSH
63724: EMPTY
63725: LIST
63726: LIST
63727: PUSH
63728: LD_INT 0
63730: PUSH
63731: LD_INT 4
63733: PUSH
63734: EMPTY
63735: LIST
63736: LIST
63737: PUSH
63738: LD_INT 1
63740: NEG
63741: PUSH
63742: LD_INT 3
63744: PUSH
63745: EMPTY
63746: LIST
63747: LIST
63748: PUSH
63749: LD_INT 1
63751: NEG
63752: PUSH
63753: LD_INT 2
63755: PUSH
63756: EMPTY
63757: LIST
63758: LIST
63759: PUSH
63760: LD_INT 2
63762: PUSH
63763: LD_INT 4
63765: PUSH
63766: EMPTY
63767: LIST
63768: LIST
63769: PUSH
63770: LD_INT 2
63772: NEG
63773: PUSH
63774: LD_INT 2
63776: PUSH
63777: EMPTY
63778: LIST
63779: LIST
63780: PUSH
63781: LD_INT 4
63783: NEG
63784: PUSH
63785: LD_INT 0
63787: PUSH
63788: EMPTY
63789: LIST
63790: LIST
63791: PUSH
63792: LD_INT 4
63794: NEG
63795: PUSH
63796: LD_INT 1
63798: NEG
63799: PUSH
63800: EMPTY
63801: LIST
63802: LIST
63803: PUSH
63804: LD_INT 3
63806: NEG
63807: PUSH
63808: LD_INT 0
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: PUSH
63815: LD_INT 3
63817: NEG
63818: PUSH
63819: LD_INT 1
63821: PUSH
63822: EMPTY
63823: LIST
63824: LIST
63825: PUSH
63826: LD_INT 4
63828: NEG
63829: PUSH
63830: LD_INT 1
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: PUSH
63837: LD_INT 5
63839: NEG
63840: PUSH
63841: LD_INT 0
63843: PUSH
63844: EMPTY
63845: LIST
63846: LIST
63847: PUSH
63848: LD_INT 5
63850: NEG
63851: PUSH
63852: LD_INT 1
63854: NEG
63855: PUSH
63856: EMPTY
63857: LIST
63858: LIST
63859: PUSH
63860: LD_INT 5
63862: NEG
63863: PUSH
63864: LD_INT 2
63866: NEG
63867: PUSH
63868: EMPTY
63869: LIST
63870: LIST
63871: PUSH
63872: LD_INT 3
63874: NEG
63875: PUSH
63876: LD_INT 2
63878: PUSH
63879: EMPTY
63880: LIST
63881: LIST
63882: PUSH
63883: EMPTY
63884: LIST
63885: LIST
63886: LIST
63887: LIST
63888: LIST
63889: LIST
63890: LIST
63891: LIST
63892: LIST
63893: LIST
63894: LIST
63895: LIST
63896: LIST
63897: LIST
63898: LIST
63899: LIST
63900: LIST
63901: LIST
63902: LIST
63903: LIST
63904: LIST
63905: LIST
63906: LIST
63907: LIST
63908: LIST
63909: LIST
63910: LIST
63911: LIST
63912: LIST
63913: LIST
63914: LIST
63915: LIST
63916: LIST
63917: LIST
63918: LIST
63919: LIST
63920: LIST
63921: LIST
63922: LIST
63923: LIST
63924: LIST
63925: LIST
63926: LIST
63927: LIST
63928: LIST
63929: ST_TO_ADDR
// end ; end ;
63930: GO 63933
63932: POP
// case btype of b_depot , b_warehouse :
63933: LD_VAR 0 1
63937: PUSH
63938: LD_INT 0
63940: DOUBLE
63941: EQUAL
63942: IFTRUE 63952
63944: LD_INT 1
63946: DOUBLE
63947: EQUAL
63948: IFTRUE 63952
63950: GO 64153
63952: POP
// case nation of nation_american :
63953: LD_VAR 0 5
63957: PUSH
63958: LD_INT 1
63960: DOUBLE
63961: EQUAL
63962: IFTRUE 63966
63964: GO 64022
63966: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
63967: LD_ADDR_VAR 0 9
63971: PUSH
63972: LD_VAR 0 11
63976: PUSH
63977: LD_VAR 0 12
63981: PUSH
63982: LD_VAR 0 13
63986: PUSH
63987: LD_VAR 0 14
63991: PUSH
63992: LD_VAR 0 15
63996: PUSH
63997: LD_VAR 0 16
64001: PUSH
64002: EMPTY
64003: LIST
64004: LIST
64005: LIST
64006: LIST
64007: LIST
64008: LIST
64009: PUSH
64010: LD_VAR 0 4
64014: PUSH
64015: LD_INT 1
64017: PLUS
64018: ARRAY
64019: ST_TO_ADDR
64020: GO 64151
64022: LD_INT 2
64024: DOUBLE
64025: EQUAL
64026: IFTRUE 64030
64028: GO 64086
64030: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
64031: LD_ADDR_VAR 0 9
64035: PUSH
64036: LD_VAR 0 17
64040: PUSH
64041: LD_VAR 0 18
64045: PUSH
64046: LD_VAR 0 19
64050: PUSH
64051: LD_VAR 0 20
64055: PUSH
64056: LD_VAR 0 21
64060: PUSH
64061: LD_VAR 0 22
64065: PUSH
64066: EMPTY
64067: LIST
64068: LIST
64069: LIST
64070: LIST
64071: LIST
64072: LIST
64073: PUSH
64074: LD_VAR 0 4
64078: PUSH
64079: LD_INT 1
64081: PLUS
64082: ARRAY
64083: ST_TO_ADDR
64084: GO 64151
64086: LD_INT 3
64088: DOUBLE
64089: EQUAL
64090: IFTRUE 64094
64092: GO 64150
64094: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
64095: LD_ADDR_VAR 0 9
64099: PUSH
64100: LD_VAR 0 23
64104: PUSH
64105: LD_VAR 0 24
64109: PUSH
64110: LD_VAR 0 25
64114: PUSH
64115: LD_VAR 0 26
64119: PUSH
64120: LD_VAR 0 27
64124: PUSH
64125: LD_VAR 0 28
64129: PUSH
64130: EMPTY
64131: LIST
64132: LIST
64133: LIST
64134: LIST
64135: LIST
64136: LIST
64137: PUSH
64138: LD_VAR 0 4
64142: PUSH
64143: LD_INT 1
64145: PLUS
64146: ARRAY
64147: ST_TO_ADDR
64148: GO 64151
64150: POP
64151: GO 64706
64153: LD_INT 2
64155: DOUBLE
64156: EQUAL
64157: IFTRUE 64167
64159: LD_INT 3
64161: DOUBLE
64162: EQUAL
64163: IFTRUE 64167
64165: GO 64223
64167: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
64168: LD_ADDR_VAR 0 9
64172: PUSH
64173: LD_VAR 0 29
64177: PUSH
64178: LD_VAR 0 30
64182: PUSH
64183: LD_VAR 0 31
64187: PUSH
64188: LD_VAR 0 32
64192: PUSH
64193: LD_VAR 0 33
64197: PUSH
64198: LD_VAR 0 34
64202: PUSH
64203: EMPTY
64204: LIST
64205: LIST
64206: LIST
64207: LIST
64208: LIST
64209: LIST
64210: PUSH
64211: LD_VAR 0 4
64215: PUSH
64216: LD_INT 1
64218: PLUS
64219: ARRAY
64220: ST_TO_ADDR
64221: GO 64706
64223: LD_INT 16
64225: DOUBLE
64226: EQUAL
64227: IFTRUE 64285
64229: LD_INT 17
64231: DOUBLE
64232: EQUAL
64233: IFTRUE 64285
64235: LD_INT 18
64237: DOUBLE
64238: EQUAL
64239: IFTRUE 64285
64241: LD_INT 19
64243: DOUBLE
64244: EQUAL
64245: IFTRUE 64285
64247: LD_INT 22
64249: DOUBLE
64250: EQUAL
64251: IFTRUE 64285
64253: LD_INT 20
64255: DOUBLE
64256: EQUAL
64257: IFTRUE 64285
64259: LD_INT 21
64261: DOUBLE
64262: EQUAL
64263: IFTRUE 64285
64265: LD_INT 23
64267: DOUBLE
64268: EQUAL
64269: IFTRUE 64285
64271: LD_INT 24
64273: DOUBLE
64274: EQUAL
64275: IFTRUE 64285
64277: LD_INT 25
64279: DOUBLE
64280: EQUAL
64281: IFTRUE 64285
64283: GO 64341
64285: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
64286: LD_ADDR_VAR 0 9
64290: PUSH
64291: LD_VAR 0 35
64295: PUSH
64296: LD_VAR 0 36
64300: PUSH
64301: LD_VAR 0 37
64305: PUSH
64306: LD_VAR 0 38
64310: PUSH
64311: LD_VAR 0 39
64315: PUSH
64316: LD_VAR 0 40
64320: PUSH
64321: EMPTY
64322: LIST
64323: LIST
64324: LIST
64325: LIST
64326: LIST
64327: LIST
64328: PUSH
64329: LD_VAR 0 4
64333: PUSH
64334: LD_INT 1
64336: PLUS
64337: ARRAY
64338: ST_TO_ADDR
64339: GO 64706
64341: LD_INT 6
64343: DOUBLE
64344: EQUAL
64345: IFTRUE 64397
64347: LD_INT 7
64349: DOUBLE
64350: EQUAL
64351: IFTRUE 64397
64353: LD_INT 8
64355: DOUBLE
64356: EQUAL
64357: IFTRUE 64397
64359: LD_INT 13
64361: DOUBLE
64362: EQUAL
64363: IFTRUE 64397
64365: LD_INT 12
64367: DOUBLE
64368: EQUAL
64369: IFTRUE 64397
64371: LD_INT 15
64373: DOUBLE
64374: EQUAL
64375: IFTRUE 64397
64377: LD_INT 11
64379: DOUBLE
64380: EQUAL
64381: IFTRUE 64397
64383: LD_INT 14
64385: DOUBLE
64386: EQUAL
64387: IFTRUE 64397
64389: LD_INT 10
64391: DOUBLE
64392: EQUAL
64393: IFTRUE 64397
64395: GO 64453
64397: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
64398: LD_ADDR_VAR 0 9
64402: PUSH
64403: LD_VAR 0 41
64407: PUSH
64408: LD_VAR 0 42
64412: PUSH
64413: LD_VAR 0 43
64417: PUSH
64418: LD_VAR 0 44
64422: PUSH
64423: LD_VAR 0 45
64427: PUSH
64428: LD_VAR 0 46
64432: PUSH
64433: EMPTY
64434: LIST
64435: LIST
64436: LIST
64437: LIST
64438: LIST
64439: LIST
64440: PUSH
64441: LD_VAR 0 4
64445: PUSH
64446: LD_INT 1
64448: PLUS
64449: ARRAY
64450: ST_TO_ADDR
64451: GO 64706
64453: LD_INT 36
64455: DOUBLE
64456: EQUAL
64457: IFTRUE 64461
64459: GO 64517
64461: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
64462: LD_ADDR_VAR 0 9
64466: PUSH
64467: LD_VAR 0 47
64471: PUSH
64472: LD_VAR 0 48
64476: PUSH
64477: LD_VAR 0 49
64481: PUSH
64482: LD_VAR 0 50
64486: PUSH
64487: LD_VAR 0 51
64491: PUSH
64492: LD_VAR 0 52
64496: PUSH
64497: EMPTY
64498: LIST
64499: LIST
64500: LIST
64501: LIST
64502: LIST
64503: LIST
64504: PUSH
64505: LD_VAR 0 4
64509: PUSH
64510: LD_INT 1
64512: PLUS
64513: ARRAY
64514: ST_TO_ADDR
64515: GO 64706
64517: LD_INT 4
64519: DOUBLE
64520: EQUAL
64521: IFTRUE 64543
64523: LD_INT 5
64525: DOUBLE
64526: EQUAL
64527: IFTRUE 64543
64529: LD_INT 34
64531: DOUBLE
64532: EQUAL
64533: IFTRUE 64543
64535: LD_INT 37
64537: DOUBLE
64538: EQUAL
64539: IFTRUE 64543
64541: GO 64599
64543: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
64544: LD_ADDR_VAR 0 9
64548: PUSH
64549: LD_VAR 0 53
64553: PUSH
64554: LD_VAR 0 54
64558: PUSH
64559: LD_VAR 0 55
64563: PUSH
64564: LD_VAR 0 56
64568: PUSH
64569: LD_VAR 0 57
64573: PUSH
64574: LD_VAR 0 58
64578: PUSH
64579: EMPTY
64580: LIST
64581: LIST
64582: LIST
64583: LIST
64584: LIST
64585: LIST
64586: PUSH
64587: LD_VAR 0 4
64591: PUSH
64592: LD_INT 1
64594: PLUS
64595: ARRAY
64596: ST_TO_ADDR
64597: GO 64706
64599: LD_INT 31
64601: DOUBLE
64602: EQUAL
64603: IFTRUE 64649
64605: LD_INT 32
64607: DOUBLE
64608: EQUAL
64609: IFTRUE 64649
64611: LD_INT 33
64613: DOUBLE
64614: EQUAL
64615: IFTRUE 64649
64617: LD_INT 27
64619: DOUBLE
64620: EQUAL
64621: IFTRUE 64649
64623: LD_INT 26
64625: DOUBLE
64626: EQUAL
64627: IFTRUE 64649
64629: LD_INT 28
64631: DOUBLE
64632: EQUAL
64633: IFTRUE 64649
64635: LD_INT 29
64637: DOUBLE
64638: EQUAL
64639: IFTRUE 64649
64641: LD_INT 30
64643: DOUBLE
64644: EQUAL
64645: IFTRUE 64649
64647: GO 64705
64649: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
64650: LD_ADDR_VAR 0 9
64654: PUSH
64655: LD_VAR 0 59
64659: PUSH
64660: LD_VAR 0 60
64664: PUSH
64665: LD_VAR 0 61
64669: PUSH
64670: LD_VAR 0 62
64674: PUSH
64675: LD_VAR 0 63
64679: PUSH
64680: LD_VAR 0 64
64684: PUSH
64685: EMPTY
64686: LIST
64687: LIST
64688: LIST
64689: LIST
64690: LIST
64691: LIST
64692: PUSH
64693: LD_VAR 0 4
64697: PUSH
64698: LD_INT 1
64700: PLUS
64701: ARRAY
64702: ST_TO_ADDR
64703: GO 64706
64705: POP
// temp_list2 = [ ] ;
64706: LD_ADDR_VAR 0 10
64710: PUSH
64711: EMPTY
64712: ST_TO_ADDR
// for i in temp_list do
64713: LD_ADDR_VAR 0 8
64717: PUSH
64718: LD_VAR 0 9
64722: PUSH
64723: FOR_IN
64724: IFFALSE 64776
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
64726: LD_ADDR_VAR 0 10
64730: PUSH
64731: LD_VAR 0 10
64735: PUSH
64736: LD_VAR 0 8
64740: PUSH
64741: LD_INT 1
64743: ARRAY
64744: PUSH
64745: LD_VAR 0 2
64749: PLUS
64750: PUSH
64751: LD_VAR 0 8
64755: PUSH
64756: LD_INT 2
64758: ARRAY
64759: PUSH
64760: LD_VAR 0 3
64764: PLUS
64765: PUSH
64766: EMPTY
64767: LIST
64768: LIST
64769: PUSH
64770: EMPTY
64771: LIST
64772: ADD
64773: ST_TO_ADDR
64774: GO 64723
64776: POP
64777: POP
// result = temp_list2 ;
64778: LD_ADDR_VAR 0 7
64782: PUSH
64783: LD_VAR 0 10
64787: ST_TO_ADDR
// end ;
64788: LD_VAR 0 7
64792: RET
// export function EnemyInRange ( unit , dist ) ; begin
64793: LD_INT 0
64795: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
64796: LD_ADDR_VAR 0 3
64800: PUSH
64801: LD_VAR 0 1
64805: PPUSH
64806: CALL_OW 255
64810: PPUSH
64811: LD_VAR 0 1
64815: PPUSH
64816: CALL_OW 250
64820: PPUSH
64821: LD_VAR 0 1
64825: PPUSH
64826: CALL_OW 251
64830: PPUSH
64831: LD_VAR 0 2
64835: PPUSH
64836: CALL 38195 0 4
64840: PUSH
64841: LD_INT 4
64843: ARRAY
64844: ST_TO_ADDR
// end ;
64845: LD_VAR 0 3
64849: RET
// export function PlayerSeeMe ( unit ) ; begin
64850: LD_INT 0
64852: PPUSH
// result := See ( your_side , unit ) ;
64853: LD_ADDR_VAR 0 2
64857: PUSH
64858: LD_OWVAR 2
64862: PPUSH
64863: LD_VAR 0 1
64867: PPUSH
64868: CALL_OW 292
64872: ST_TO_ADDR
// end ;
64873: LD_VAR 0 2
64877: RET
// export function ReverseDir ( unit ) ; begin
64878: LD_INT 0
64880: PPUSH
// if not unit then
64881: LD_VAR 0 1
64885: NOT
64886: IFFALSE 64890
// exit ;
64888: GO 64913
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
64890: LD_ADDR_VAR 0 2
64894: PUSH
64895: LD_VAR 0 1
64899: PPUSH
64900: CALL_OW 254
64904: PUSH
64905: LD_INT 3
64907: PLUS
64908: PUSH
64909: LD_INT 6
64911: MOD
64912: ST_TO_ADDR
// end ;
64913: LD_VAR 0 2
64917: RET
// export function ReverseArray ( array ) ; var i ; begin
64918: LD_INT 0
64920: PPUSH
64921: PPUSH
// if not array then
64922: LD_VAR 0 1
64926: NOT
64927: IFFALSE 64931
// exit ;
64929: GO 64986
// result := [ ] ;
64931: LD_ADDR_VAR 0 2
64935: PUSH
64936: EMPTY
64937: ST_TO_ADDR
// for i := array downto 1 do
64938: LD_ADDR_VAR 0 3
64942: PUSH
64943: DOUBLE
64944: LD_VAR 0 1
64948: INC
64949: ST_TO_ADDR
64950: LD_INT 1
64952: PUSH
64953: FOR_DOWNTO
64954: IFFALSE 64984
// result := Join ( result , array [ i ] ) ;
64956: LD_ADDR_VAR 0 2
64960: PUSH
64961: LD_VAR 0 2
64965: PPUSH
64966: LD_VAR 0 1
64970: PUSH
64971: LD_VAR 0 3
64975: ARRAY
64976: PPUSH
64977: CALL 69629 0 2
64981: ST_TO_ADDR
64982: GO 64953
64984: POP
64985: POP
// end ;
64986: LD_VAR 0 2
64990: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
64991: LD_INT 0
64993: PPUSH
64994: PPUSH
64995: PPUSH
64996: PPUSH
64997: PPUSH
64998: PPUSH
// if not unit or not hexes then
64999: LD_VAR 0 1
65003: NOT
65004: PUSH
65005: LD_VAR 0 2
65009: NOT
65010: OR
65011: IFFALSE 65015
// exit ;
65013: GO 65138
// dist := 9999 ;
65015: LD_ADDR_VAR 0 5
65019: PUSH
65020: LD_INT 9999
65022: ST_TO_ADDR
// for i = 1 to hexes do
65023: LD_ADDR_VAR 0 4
65027: PUSH
65028: DOUBLE
65029: LD_INT 1
65031: DEC
65032: ST_TO_ADDR
65033: LD_VAR 0 2
65037: PUSH
65038: FOR_TO
65039: IFFALSE 65126
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
65041: LD_ADDR_VAR 0 6
65045: PUSH
65046: LD_VAR 0 1
65050: PPUSH
65051: LD_VAR 0 2
65055: PUSH
65056: LD_VAR 0 4
65060: ARRAY
65061: PUSH
65062: LD_INT 1
65064: ARRAY
65065: PPUSH
65066: LD_VAR 0 2
65070: PUSH
65071: LD_VAR 0 4
65075: ARRAY
65076: PUSH
65077: LD_INT 2
65079: ARRAY
65080: PPUSH
65081: CALL_OW 297
65085: ST_TO_ADDR
// if tdist < dist then
65086: LD_VAR 0 6
65090: PUSH
65091: LD_VAR 0 5
65095: LESS
65096: IFFALSE 65124
// begin hex := hexes [ i ] ;
65098: LD_ADDR_VAR 0 8
65102: PUSH
65103: LD_VAR 0 2
65107: PUSH
65108: LD_VAR 0 4
65112: ARRAY
65113: ST_TO_ADDR
// dist := tdist ;
65114: LD_ADDR_VAR 0 5
65118: PUSH
65119: LD_VAR 0 6
65123: ST_TO_ADDR
// end ; end ;
65124: GO 65038
65126: POP
65127: POP
// result := hex ;
65128: LD_ADDR_VAR 0 3
65132: PUSH
65133: LD_VAR 0 8
65137: ST_TO_ADDR
// end ;
65138: LD_VAR 0 3
65142: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
65143: LD_INT 0
65145: PPUSH
65146: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
65147: LD_VAR 0 1
65151: NOT
65152: PUSH
65153: LD_VAR 0 1
65157: PUSH
65158: LD_INT 21
65160: PUSH
65161: LD_INT 2
65163: PUSH
65164: EMPTY
65165: LIST
65166: LIST
65167: PUSH
65168: LD_INT 23
65170: PUSH
65171: LD_INT 2
65173: PUSH
65174: EMPTY
65175: LIST
65176: LIST
65177: PUSH
65178: EMPTY
65179: LIST
65180: LIST
65181: PPUSH
65182: CALL_OW 69
65186: IN
65187: NOT
65188: OR
65189: IFFALSE 65193
// exit ;
65191: GO 65240
// for i = 1 to 3 do
65193: LD_ADDR_VAR 0 3
65197: PUSH
65198: DOUBLE
65199: LD_INT 1
65201: DEC
65202: ST_TO_ADDR
65203: LD_INT 3
65205: PUSH
65206: FOR_TO
65207: IFFALSE 65238
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
65209: LD_VAR 0 1
65213: PPUSH
65214: CALL_OW 250
65218: PPUSH
65219: LD_VAR 0 1
65223: PPUSH
65224: CALL_OW 251
65228: PPUSH
65229: LD_INT 1
65231: PPUSH
65232: CALL_OW 453
65236: GO 65206
65238: POP
65239: POP
// end ;
65240: LD_VAR 0 2
65244: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
65245: LD_INT 0
65247: PPUSH
65248: PPUSH
65249: PPUSH
65250: PPUSH
65251: PPUSH
65252: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
65253: LD_VAR 0 1
65257: NOT
65258: PUSH
65259: LD_VAR 0 2
65263: NOT
65264: OR
65265: PUSH
65266: LD_VAR 0 1
65270: PPUSH
65271: CALL_OW 314
65275: OR
65276: IFFALSE 65280
// exit ;
65278: GO 65747
// if GetLives ( i ) < 250 then
65280: LD_VAR 0 4
65284: PPUSH
65285: CALL_OW 256
65289: PUSH
65290: LD_INT 250
65292: LESS
65293: IFFALSE 65306
// begin ComAutodestruct ( i ) ;
65295: LD_VAR 0 4
65299: PPUSH
65300: CALL 65143 0 1
// exit ;
65304: GO 65747
// end ; x := GetX ( enemy_unit ) ;
65306: LD_ADDR_VAR 0 7
65310: PUSH
65311: LD_VAR 0 2
65315: PPUSH
65316: CALL_OW 250
65320: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
65321: LD_ADDR_VAR 0 8
65325: PUSH
65326: LD_VAR 0 2
65330: PPUSH
65331: CALL_OW 251
65335: ST_TO_ADDR
// if not x or not y then
65336: LD_VAR 0 7
65340: NOT
65341: PUSH
65342: LD_VAR 0 8
65346: NOT
65347: OR
65348: IFFALSE 65352
// exit ;
65350: GO 65747
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
65352: LD_ADDR_VAR 0 6
65356: PUSH
65357: LD_VAR 0 7
65361: PPUSH
65362: LD_INT 0
65364: PPUSH
65365: LD_INT 4
65367: PPUSH
65368: CALL_OW 272
65372: PUSH
65373: LD_VAR 0 8
65377: PPUSH
65378: LD_INT 0
65380: PPUSH
65381: LD_INT 4
65383: PPUSH
65384: CALL_OW 273
65388: PUSH
65389: EMPTY
65390: LIST
65391: LIST
65392: PUSH
65393: LD_VAR 0 7
65397: PPUSH
65398: LD_INT 1
65400: PPUSH
65401: LD_INT 4
65403: PPUSH
65404: CALL_OW 272
65408: PUSH
65409: LD_VAR 0 8
65413: PPUSH
65414: LD_INT 1
65416: PPUSH
65417: LD_INT 4
65419: PPUSH
65420: CALL_OW 273
65424: PUSH
65425: EMPTY
65426: LIST
65427: LIST
65428: PUSH
65429: LD_VAR 0 7
65433: PPUSH
65434: LD_INT 2
65436: PPUSH
65437: LD_INT 4
65439: PPUSH
65440: CALL_OW 272
65444: PUSH
65445: LD_VAR 0 8
65449: PPUSH
65450: LD_INT 2
65452: PPUSH
65453: LD_INT 4
65455: PPUSH
65456: CALL_OW 273
65460: PUSH
65461: EMPTY
65462: LIST
65463: LIST
65464: PUSH
65465: LD_VAR 0 7
65469: PPUSH
65470: LD_INT 3
65472: PPUSH
65473: LD_INT 4
65475: PPUSH
65476: CALL_OW 272
65480: PUSH
65481: LD_VAR 0 8
65485: PPUSH
65486: LD_INT 3
65488: PPUSH
65489: LD_INT 4
65491: PPUSH
65492: CALL_OW 273
65496: PUSH
65497: EMPTY
65498: LIST
65499: LIST
65500: PUSH
65501: LD_VAR 0 7
65505: PPUSH
65506: LD_INT 4
65508: PPUSH
65509: LD_INT 4
65511: PPUSH
65512: CALL_OW 272
65516: PUSH
65517: LD_VAR 0 8
65521: PPUSH
65522: LD_INT 4
65524: PPUSH
65525: LD_INT 4
65527: PPUSH
65528: CALL_OW 273
65532: PUSH
65533: EMPTY
65534: LIST
65535: LIST
65536: PUSH
65537: LD_VAR 0 7
65541: PPUSH
65542: LD_INT 5
65544: PPUSH
65545: LD_INT 4
65547: PPUSH
65548: CALL_OW 272
65552: PUSH
65553: LD_VAR 0 8
65557: PPUSH
65558: LD_INT 5
65560: PPUSH
65561: LD_INT 4
65563: PPUSH
65564: CALL_OW 273
65568: PUSH
65569: EMPTY
65570: LIST
65571: LIST
65572: PUSH
65573: EMPTY
65574: LIST
65575: LIST
65576: LIST
65577: LIST
65578: LIST
65579: LIST
65580: ST_TO_ADDR
// for i = tmp downto 1 do
65581: LD_ADDR_VAR 0 4
65585: PUSH
65586: DOUBLE
65587: LD_VAR 0 6
65591: INC
65592: ST_TO_ADDR
65593: LD_INT 1
65595: PUSH
65596: FOR_DOWNTO
65597: IFFALSE 65698
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
65599: LD_VAR 0 6
65603: PUSH
65604: LD_VAR 0 4
65608: ARRAY
65609: PUSH
65610: LD_INT 1
65612: ARRAY
65613: PPUSH
65614: LD_VAR 0 6
65618: PUSH
65619: LD_VAR 0 4
65623: ARRAY
65624: PUSH
65625: LD_INT 2
65627: ARRAY
65628: PPUSH
65629: CALL_OW 488
65633: NOT
65634: PUSH
65635: LD_VAR 0 6
65639: PUSH
65640: LD_VAR 0 4
65644: ARRAY
65645: PUSH
65646: LD_INT 1
65648: ARRAY
65649: PPUSH
65650: LD_VAR 0 6
65654: PUSH
65655: LD_VAR 0 4
65659: ARRAY
65660: PUSH
65661: LD_INT 2
65663: ARRAY
65664: PPUSH
65665: CALL_OW 428
65669: PUSH
65670: LD_INT 0
65672: NONEQUAL
65673: OR
65674: IFFALSE 65696
// tmp := Delete ( tmp , i ) ;
65676: LD_ADDR_VAR 0 6
65680: PUSH
65681: LD_VAR 0 6
65685: PPUSH
65686: LD_VAR 0 4
65690: PPUSH
65691: CALL_OW 3
65695: ST_TO_ADDR
65696: GO 65596
65698: POP
65699: POP
// j := GetClosestHex ( unit , tmp ) ;
65700: LD_ADDR_VAR 0 5
65704: PUSH
65705: LD_VAR 0 1
65709: PPUSH
65710: LD_VAR 0 6
65714: PPUSH
65715: CALL 64991 0 2
65719: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
65720: LD_VAR 0 1
65724: PPUSH
65725: LD_VAR 0 5
65729: PUSH
65730: LD_INT 1
65732: ARRAY
65733: PPUSH
65734: LD_VAR 0 5
65738: PUSH
65739: LD_INT 2
65741: ARRAY
65742: PPUSH
65743: CALL_OW 111
// end ;
65747: LD_VAR 0 3
65751: RET
// export function PrepareApemanSoldier ( ) ; begin
65752: LD_INT 0
65754: PPUSH
// uc_nation := 0 ;
65755: LD_ADDR_OWVAR 21
65759: PUSH
65760: LD_INT 0
65762: ST_TO_ADDR
// hc_sex := sex_male ;
65763: LD_ADDR_OWVAR 27
65767: PUSH
65768: LD_INT 1
65770: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
65771: LD_ADDR_OWVAR 28
65775: PUSH
65776: LD_INT 15
65778: ST_TO_ADDR
// hc_gallery :=  ;
65779: LD_ADDR_OWVAR 33
65783: PUSH
65784: LD_STRING 
65786: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65787: LD_ADDR_OWVAR 31
65791: PUSH
65792: LD_INT 0
65794: PPUSH
65795: LD_INT 3
65797: PPUSH
65798: CALL_OW 12
65802: PUSH
65803: LD_INT 0
65805: PPUSH
65806: LD_INT 3
65808: PPUSH
65809: CALL_OW 12
65813: PUSH
65814: LD_INT 0
65816: PUSH
65817: LD_INT 0
65819: PUSH
65820: EMPTY
65821: LIST
65822: LIST
65823: LIST
65824: LIST
65825: ST_TO_ADDR
// end ;
65826: LD_VAR 0 1
65830: RET
// export function PrepareApemanEngineer ( ) ; begin
65831: LD_INT 0
65833: PPUSH
// uc_nation := 0 ;
65834: LD_ADDR_OWVAR 21
65838: PUSH
65839: LD_INT 0
65841: ST_TO_ADDR
// hc_sex := sex_male ;
65842: LD_ADDR_OWVAR 27
65846: PUSH
65847: LD_INT 1
65849: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
65850: LD_ADDR_OWVAR 28
65854: PUSH
65855: LD_INT 16
65857: ST_TO_ADDR
// hc_gallery :=  ;
65858: LD_ADDR_OWVAR 33
65862: PUSH
65863: LD_STRING 
65865: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65866: LD_ADDR_OWVAR 31
65870: PUSH
65871: LD_INT 0
65873: PPUSH
65874: LD_INT 3
65876: PPUSH
65877: CALL_OW 12
65881: PUSH
65882: LD_INT 0
65884: PPUSH
65885: LD_INT 3
65887: PPUSH
65888: CALL_OW 12
65892: PUSH
65893: LD_INT 0
65895: PUSH
65896: LD_INT 0
65898: PUSH
65899: EMPTY
65900: LIST
65901: LIST
65902: LIST
65903: LIST
65904: ST_TO_ADDR
// end ;
65905: LD_VAR 0 1
65909: RET
// export function PrepareApeman ( agressivity ) ; begin
65910: LD_INT 0
65912: PPUSH
// uc_side := 0 ;
65913: LD_ADDR_OWVAR 20
65917: PUSH
65918: LD_INT 0
65920: ST_TO_ADDR
// uc_nation := 0 ;
65921: LD_ADDR_OWVAR 21
65925: PUSH
65926: LD_INT 0
65928: ST_TO_ADDR
// hc_sex := sex_male ;
65929: LD_ADDR_OWVAR 27
65933: PUSH
65934: LD_INT 1
65936: ST_TO_ADDR
// hc_class := class_apeman ;
65937: LD_ADDR_OWVAR 28
65941: PUSH
65942: LD_INT 12
65944: ST_TO_ADDR
// hc_gallery :=  ;
65945: LD_ADDR_OWVAR 33
65949: PUSH
65950: LD_STRING 
65952: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65953: LD_ADDR_OWVAR 35
65957: PUSH
65958: LD_VAR 0 1
65962: NEG
65963: PPUSH
65964: LD_VAR 0 1
65968: PPUSH
65969: CALL_OW 12
65973: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65974: LD_ADDR_OWVAR 31
65978: PUSH
65979: LD_INT 0
65981: PPUSH
65982: LD_INT 3
65984: PPUSH
65985: CALL_OW 12
65989: PUSH
65990: LD_INT 0
65992: PPUSH
65993: LD_INT 3
65995: PPUSH
65996: CALL_OW 12
66000: PUSH
66001: LD_INT 0
66003: PUSH
66004: LD_INT 0
66006: PUSH
66007: EMPTY
66008: LIST
66009: LIST
66010: LIST
66011: LIST
66012: ST_TO_ADDR
// end ;
66013: LD_VAR 0 2
66017: RET
// export function PrepareTiger ( agressivity ) ; begin
66018: LD_INT 0
66020: PPUSH
// uc_side := 0 ;
66021: LD_ADDR_OWVAR 20
66025: PUSH
66026: LD_INT 0
66028: ST_TO_ADDR
// uc_nation := 0 ;
66029: LD_ADDR_OWVAR 21
66033: PUSH
66034: LD_INT 0
66036: ST_TO_ADDR
// hc_class := class_tiger ;
66037: LD_ADDR_OWVAR 28
66041: PUSH
66042: LD_INT 14
66044: ST_TO_ADDR
// hc_gallery :=  ;
66045: LD_ADDR_OWVAR 33
66049: PUSH
66050: LD_STRING 
66052: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
66053: LD_ADDR_OWVAR 35
66057: PUSH
66058: LD_VAR 0 1
66062: NEG
66063: PPUSH
66064: LD_VAR 0 1
66068: PPUSH
66069: CALL_OW 12
66073: ST_TO_ADDR
// end ;
66074: LD_VAR 0 2
66078: RET
// export function PrepareEnchidna ( ) ; begin
66079: LD_INT 0
66081: PPUSH
// uc_side := 0 ;
66082: LD_ADDR_OWVAR 20
66086: PUSH
66087: LD_INT 0
66089: ST_TO_ADDR
// uc_nation := 0 ;
66090: LD_ADDR_OWVAR 21
66094: PUSH
66095: LD_INT 0
66097: ST_TO_ADDR
// hc_class := class_baggie ;
66098: LD_ADDR_OWVAR 28
66102: PUSH
66103: LD_INT 13
66105: ST_TO_ADDR
// hc_gallery :=  ;
66106: LD_ADDR_OWVAR 33
66110: PUSH
66111: LD_STRING 
66113: ST_TO_ADDR
// end ;
66114: LD_VAR 0 1
66118: RET
// export function PrepareFrog ( ) ; begin
66119: LD_INT 0
66121: PPUSH
// uc_side := 0 ;
66122: LD_ADDR_OWVAR 20
66126: PUSH
66127: LD_INT 0
66129: ST_TO_ADDR
// uc_nation := 0 ;
66130: LD_ADDR_OWVAR 21
66134: PUSH
66135: LD_INT 0
66137: ST_TO_ADDR
// hc_class := class_frog ;
66138: LD_ADDR_OWVAR 28
66142: PUSH
66143: LD_INT 19
66145: ST_TO_ADDR
// hc_gallery :=  ;
66146: LD_ADDR_OWVAR 33
66150: PUSH
66151: LD_STRING 
66153: ST_TO_ADDR
// end ;
66154: LD_VAR 0 1
66158: RET
// export function PrepareFish ( ) ; begin
66159: LD_INT 0
66161: PPUSH
// uc_side := 0 ;
66162: LD_ADDR_OWVAR 20
66166: PUSH
66167: LD_INT 0
66169: ST_TO_ADDR
// uc_nation := 0 ;
66170: LD_ADDR_OWVAR 21
66174: PUSH
66175: LD_INT 0
66177: ST_TO_ADDR
// hc_class := class_fish ;
66178: LD_ADDR_OWVAR 28
66182: PUSH
66183: LD_INT 20
66185: ST_TO_ADDR
// hc_gallery :=  ;
66186: LD_ADDR_OWVAR 33
66190: PUSH
66191: LD_STRING 
66193: ST_TO_ADDR
// end ;
66194: LD_VAR 0 1
66198: RET
// export function PrepareBird ( ) ; begin
66199: LD_INT 0
66201: PPUSH
// uc_side := 0 ;
66202: LD_ADDR_OWVAR 20
66206: PUSH
66207: LD_INT 0
66209: ST_TO_ADDR
// uc_nation := 0 ;
66210: LD_ADDR_OWVAR 21
66214: PUSH
66215: LD_INT 0
66217: ST_TO_ADDR
// hc_class := class_phororhacos ;
66218: LD_ADDR_OWVAR 28
66222: PUSH
66223: LD_INT 18
66225: ST_TO_ADDR
// hc_gallery :=  ;
66226: LD_ADDR_OWVAR 33
66230: PUSH
66231: LD_STRING 
66233: ST_TO_ADDR
// end ;
66234: LD_VAR 0 1
66238: RET
// export function PrepareHorse ( ) ; begin
66239: LD_INT 0
66241: PPUSH
// uc_side := 0 ;
66242: LD_ADDR_OWVAR 20
66246: PUSH
66247: LD_INT 0
66249: ST_TO_ADDR
// uc_nation := 0 ;
66250: LD_ADDR_OWVAR 21
66254: PUSH
66255: LD_INT 0
66257: ST_TO_ADDR
// hc_class := class_horse ;
66258: LD_ADDR_OWVAR 28
66262: PUSH
66263: LD_INT 21
66265: ST_TO_ADDR
// hc_gallery :=  ;
66266: LD_ADDR_OWVAR 33
66270: PUSH
66271: LD_STRING 
66273: ST_TO_ADDR
// end ;
66274: LD_VAR 0 1
66278: RET
// export function PrepareMastodont ( ) ; begin
66279: LD_INT 0
66281: PPUSH
// uc_side := 0 ;
66282: LD_ADDR_OWVAR 20
66286: PUSH
66287: LD_INT 0
66289: ST_TO_ADDR
// uc_nation := 0 ;
66290: LD_ADDR_OWVAR 21
66294: PUSH
66295: LD_INT 0
66297: ST_TO_ADDR
// vc_chassis := class_mastodont ;
66298: LD_ADDR_OWVAR 37
66302: PUSH
66303: LD_INT 31
66305: ST_TO_ADDR
// vc_control := control_rider ;
66306: LD_ADDR_OWVAR 38
66310: PUSH
66311: LD_INT 4
66313: ST_TO_ADDR
// end ;
66314: LD_VAR 0 1
66318: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
66319: LD_INT 0
66321: PPUSH
66322: PPUSH
66323: PPUSH
// uc_side = 0 ;
66324: LD_ADDR_OWVAR 20
66328: PUSH
66329: LD_INT 0
66331: ST_TO_ADDR
// uc_nation = 0 ;
66332: LD_ADDR_OWVAR 21
66336: PUSH
66337: LD_INT 0
66339: ST_TO_ADDR
// InitHc_All ( ) ;
66340: CALL_OW 584
// InitVc ;
66344: CALL_OW 20
// if mastodonts then
66348: LD_VAR 0 6
66352: IFFALSE 66419
// for i = 1 to mastodonts do
66354: LD_ADDR_VAR 0 11
66358: PUSH
66359: DOUBLE
66360: LD_INT 1
66362: DEC
66363: ST_TO_ADDR
66364: LD_VAR 0 6
66368: PUSH
66369: FOR_TO
66370: IFFALSE 66417
// begin vc_chassis := 31 ;
66372: LD_ADDR_OWVAR 37
66376: PUSH
66377: LD_INT 31
66379: ST_TO_ADDR
// vc_control := control_rider ;
66380: LD_ADDR_OWVAR 38
66384: PUSH
66385: LD_INT 4
66387: ST_TO_ADDR
// animal := CreateVehicle ;
66388: LD_ADDR_VAR 0 12
66392: PUSH
66393: CALL_OW 45
66397: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66398: LD_VAR 0 12
66402: PPUSH
66403: LD_VAR 0 8
66407: PPUSH
66408: LD_INT 0
66410: PPUSH
66411: CALL 68547 0 3
// end ;
66415: GO 66369
66417: POP
66418: POP
// if horses then
66419: LD_VAR 0 5
66423: IFFALSE 66490
// for i = 1 to horses do
66425: LD_ADDR_VAR 0 11
66429: PUSH
66430: DOUBLE
66431: LD_INT 1
66433: DEC
66434: ST_TO_ADDR
66435: LD_VAR 0 5
66439: PUSH
66440: FOR_TO
66441: IFFALSE 66488
// begin hc_class := 21 ;
66443: LD_ADDR_OWVAR 28
66447: PUSH
66448: LD_INT 21
66450: ST_TO_ADDR
// hc_gallery :=  ;
66451: LD_ADDR_OWVAR 33
66455: PUSH
66456: LD_STRING 
66458: ST_TO_ADDR
// animal := CreateHuman ;
66459: LD_ADDR_VAR 0 12
66463: PUSH
66464: CALL_OW 44
66468: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66469: LD_VAR 0 12
66473: PPUSH
66474: LD_VAR 0 8
66478: PPUSH
66479: LD_INT 0
66481: PPUSH
66482: CALL 68547 0 3
// end ;
66486: GO 66440
66488: POP
66489: POP
// if birds then
66490: LD_VAR 0 1
66494: IFFALSE 66561
// for i = 1 to birds do
66496: LD_ADDR_VAR 0 11
66500: PUSH
66501: DOUBLE
66502: LD_INT 1
66504: DEC
66505: ST_TO_ADDR
66506: LD_VAR 0 1
66510: PUSH
66511: FOR_TO
66512: IFFALSE 66559
// begin hc_class = 18 ;
66514: LD_ADDR_OWVAR 28
66518: PUSH
66519: LD_INT 18
66521: ST_TO_ADDR
// hc_gallery =  ;
66522: LD_ADDR_OWVAR 33
66526: PUSH
66527: LD_STRING 
66529: ST_TO_ADDR
// animal := CreateHuman ;
66530: LD_ADDR_VAR 0 12
66534: PUSH
66535: CALL_OW 44
66539: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66540: LD_VAR 0 12
66544: PPUSH
66545: LD_VAR 0 8
66549: PPUSH
66550: LD_INT 0
66552: PPUSH
66553: CALL 68547 0 3
// end ;
66557: GO 66511
66559: POP
66560: POP
// if tigers then
66561: LD_VAR 0 2
66565: IFFALSE 66649
// for i = 1 to tigers do
66567: LD_ADDR_VAR 0 11
66571: PUSH
66572: DOUBLE
66573: LD_INT 1
66575: DEC
66576: ST_TO_ADDR
66577: LD_VAR 0 2
66581: PUSH
66582: FOR_TO
66583: IFFALSE 66647
// begin hc_class = class_tiger ;
66585: LD_ADDR_OWVAR 28
66589: PUSH
66590: LD_INT 14
66592: ST_TO_ADDR
// hc_gallery =  ;
66593: LD_ADDR_OWVAR 33
66597: PUSH
66598: LD_STRING 
66600: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
66601: LD_ADDR_OWVAR 35
66605: PUSH
66606: LD_INT 7
66608: NEG
66609: PPUSH
66610: LD_INT 7
66612: PPUSH
66613: CALL_OW 12
66617: ST_TO_ADDR
// animal := CreateHuman ;
66618: LD_ADDR_VAR 0 12
66622: PUSH
66623: CALL_OW 44
66627: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66628: LD_VAR 0 12
66632: PPUSH
66633: LD_VAR 0 8
66637: PPUSH
66638: LD_INT 0
66640: PPUSH
66641: CALL 68547 0 3
// end ;
66645: GO 66582
66647: POP
66648: POP
// if apemans then
66649: LD_VAR 0 3
66653: IFFALSE 66776
// for i = 1 to apemans do
66655: LD_ADDR_VAR 0 11
66659: PUSH
66660: DOUBLE
66661: LD_INT 1
66663: DEC
66664: ST_TO_ADDR
66665: LD_VAR 0 3
66669: PUSH
66670: FOR_TO
66671: IFFALSE 66774
// begin hc_class = class_apeman ;
66673: LD_ADDR_OWVAR 28
66677: PUSH
66678: LD_INT 12
66680: ST_TO_ADDR
// hc_gallery =  ;
66681: LD_ADDR_OWVAR 33
66685: PUSH
66686: LD_STRING 
66688: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
66689: LD_ADDR_OWVAR 35
66693: PUSH
66694: LD_INT 2
66696: NEG
66697: PPUSH
66698: LD_INT 2
66700: PPUSH
66701: CALL_OW 12
66705: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
66706: LD_ADDR_OWVAR 31
66710: PUSH
66711: LD_INT 1
66713: PPUSH
66714: LD_INT 3
66716: PPUSH
66717: CALL_OW 12
66721: PUSH
66722: LD_INT 1
66724: PPUSH
66725: LD_INT 3
66727: PPUSH
66728: CALL_OW 12
66732: PUSH
66733: LD_INT 0
66735: PUSH
66736: LD_INT 0
66738: PUSH
66739: EMPTY
66740: LIST
66741: LIST
66742: LIST
66743: LIST
66744: ST_TO_ADDR
// animal := CreateHuman ;
66745: LD_ADDR_VAR 0 12
66749: PUSH
66750: CALL_OW 44
66754: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66755: LD_VAR 0 12
66759: PPUSH
66760: LD_VAR 0 8
66764: PPUSH
66765: LD_INT 0
66767: PPUSH
66768: CALL 68547 0 3
// end ;
66772: GO 66670
66774: POP
66775: POP
// if enchidnas then
66776: LD_VAR 0 4
66780: IFFALSE 66847
// for i = 1 to enchidnas do
66782: LD_ADDR_VAR 0 11
66786: PUSH
66787: DOUBLE
66788: LD_INT 1
66790: DEC
66791: ST_TO_ADDR
66792: LD_VAR 0 4
66796: PUSH
66797: FOR_TO
66798: IFFALSE 66845
// begin hc_class = 13 ;
66800: LD_ADDR_OWVAR 28
66804: PUSH
66805: LD_INT 13
66807: ST_TO_ADDR
// hc_gallery =  ;
66808: LD_ADDR_OWVAR 33
66812: PUSH
66813: LD_STRING 
66815: ST_TO_ADDR
// animal := CreateHuman ;
66816: LD_ADDR_VAR 0 12
66820: PUSH
66821: CALL_OW 44
66825: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66826: LD_VAR 0 12
66830: PPUSH
66831: LD_VAR 0 8
66835: PPUSH
66836: LD_INT 0
66838: PPUSH
66839: CALL 68547 0 3
// end ;
66843: GO 66797
66845: POP
66846: POP
// if fishes then
66847: LD_VAR 0 7
66851: IFFALSE 66918
// for i = 1 to fishes do
66853: LD_ADDR_VAR 0 11
66857: PUSH
66858: DOUBLE
66859: LD_INT 1
66861: DEC
66862: ST_TO_ADDR
66863: LD_VAR 0 7
66867: PUSH
66868: FOR_TO
66869: IFFALSE 66916
// begin hc_class = 20 ;
66871: LD_ADDR_OWVAR 28
66875: PUSH
66876: LD_INT 20
66878: ST_TO_ADDR
// hc_gallery =  ;
66879: LD_ADDR_OWVAR 33
66883: PUSH
66884: LD_STRING 
66886: ST_TO_ADDR
// animal := CreateHuman ;
66887: LD_ADDR_VAR 0 12
66891: PUSH
66892: CALL_OW 44
66896: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
66897: LD_VAR 0 12
66901: PPUSH
66902: LD_VAR 0 9
66906: PPUSH
66907: LD_INT 0
66909: PPUSH
66910: CALL 68547 0 3
// end ;
66914: GO 66868
66916: POP
66917: POP
// end ;
66918: LD_VAR 0 10
66922: RET
// export function WantHeal ( sci , unit ) ; begin
66923: LD_INT 0
66925: PPUSH
// if GetTaskList ( sci ) > 0 then
66926: LD_VAR 0 1
66930: PPUSH
66931: CALL_OW 437
66935: PUSH
66936: LD_INT 0
66938: GREATER
66939: IFFALSE 67009
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
66941: LD_VAR 0 1
66945: PPUSH
66946: CALL_OW 437
66950: PUSH
66951: LD_INT 1
66953: ARRAY
66954: PUSH
66955: LD_INT 1
66957: ARRAY
66958: PUSH
66959: LD_STRING l
66961: EQUAL
66962: PUSH
66963: LD_VAR 0 1
66967: PPUSH
66968: CALL_OW 437
66972: PUSH
66973: LD_INT 1
66975: ARRAY
66976: PUSH
66977: LD_INT 4
66979: ARRAY
66980: PUSH
66981: LD_VAR 0 2
66985: EQUAL
66986: AND
66987: IFFALSE 66999
// result := true else
66989: LD_ADDR_VAR 0 3
66993: PUSH
66994: LD_INT 1
66996: ST_TO_ADDR
66997: GO 67007
// result := false ;
66999: LD_ADDR_VAR 0 3
67003: PUSH
67004: LD_INT 0
67006: ST_TO_ADDR
// end else
67007: GO 67017
// result := false ;
67009: LD_ADDR_VAR 0 3
67013: PUSH
67014: LD_INT 0
67016: ST_TO_ADDR
// end ;
67017: LD_VAR 0 3
67021: RET
// export function HealTarget ( sci ) ; begin
67022: LD_INT 0
67024: PPUSH
// if not sci then
67025: LD_VAR 0 1
67029: NOT
67030: IFFALSE 67034
// exit ;
67032: GO 67099
// result := 0 ;
67034: LD_ADDR_VAR 0 2
67038: PUSH
67039: LD_INT 0
67041: ST_TO_ADDR
// if GetTaskList ( sci ) then
67042: LD_VAR 0 1
67046: PPUSH
67047: CALL_OW 437
67051: IFFALSE 67099
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
67053: LD_VAR 0 1
67057: PPUSH
67058: CALL_OW 437
67062: PUSH
67063: LD_INT 1
67065: ARRAY
67066: PUSH
67067: LD_INT 1
67069: ARRAY
67070: PUSH
67071: LD_STRING l
67073: EQUAL
67074: IFFALSE 67099
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
67076: LD_ADDR_VAR 0 2
67080: PUSH
67081: LD_VAR 0 1
67085: PPUSH
67086: CALL_OW 437
67090: PUSH
67091: LD_INT 1
67093: ARRAY
67094: PUSH
67095: LD_INT 4
67097: ARRAY
67098: ST_TO_ADDR
// end ;
67099: LD_VAR 0 2
67103: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
67104: LD_INT 0
67106: PPUSH
67107: PPUSH
67108: PPUSH
67109: PPUSH
// if not base_units then
67110: LD_VAR 0 1
67114: NOT
67115: IFFALSE 67119
// exit ;
67117: GO 67206
// result := false ;
67119: LD_ADDR_VAR 0 2
67123: PUSH
67124: LD_INT 0
67126: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
67127: LD_ADDR_VAR 0 5
67131: PUSH
67132: LD_VAR 0 1
67136: PPUSH
67137: LD_INT 21
67139: PUSH
67140: LD_INT 3
67142: PUSH
67143: EMPTY
67144: LIST
67145: LIST
67146: PPUSH
67147: CALL_OW 72
67151: ST_TO_ADDR
// if not tmp then
67152: LD_VAR 0 5
67156: NOT
67157: IFFALSE 67161
// exit ;
67159: GO 67206
// for i in tmp do
67161: LD_ADDR_VAR 0 3
67165: PUSH
67166: LD_VAR 0 5
67170: PUSH
67171: FOR_IN
67172: IFFALSE 67204
// begin result := EnemyInRange ( i , 22 ) ;
67174: LD_ADDR_VAR 0 2
67178: PUSH
67179: LD_VAR 0 3
67183: PPUSH
67184: LD_INT 22
67186: PPUSH
67187: CALL 64793 0 2
67191: ST_TO_ADDR
// if result then
67192: LD_VAR 0 2
67196: IFFALSE 67202
// exit ;
67198: POP
67199: POP
67200: GO 67206
// end ;
67202: GO 67171
67204: POP
67205: POP
// end ;
67206: LD_VAR 0 2
67210: RET
// export function FilterByTag ( units , tag ) ; begin
67211: LD_INT 0
67213: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
67214: LD_ADDR_VAR 0 3
67218: PUSH
67219: LD_VAR 0 1
67223: PPUSH
67224: LD_INT 120
67226: PUSH
67227: LD_VAR 0 2
67231: PUSH
67232: EMPTY
67233: LIST
67234: LIST
67235: PPUSH
67236: CALL_OW 72
67240: ST_TO_ADDR
// end ;
67241: LD_VAR 0 3
67245: RET
// export function IsDriver ( un ) ; begin
67246: LD_INT 0
67248: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
67249: LD_ADDR_VAR 0 2
67253: PUSH
67254: LD_VAR 0 1
67258: PUSH
67259: LD_INT 55
67261: PUSH
67262: EMPTY
67263: LIST
67264: PPUSH
67265: CALL_OW 69
67269: IN
67270: ST_TO_ADDR
// end ;
67271: LD_VAR 0 2
67275: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
67276: LD_INT 0
67278: PPUSH
67279: PPUSH
// list := [ ] ;
67280: LD_ADDR_VAR 0 5
67284: PUSH
67285: EMPTY
67286: ST_TO_ADDR
// case d of 0 :
67287: LD_VAR 0 3
67291: PUSH
67292: LD_INT 0
67294: DOUBLE
67295: EQUAL
67296: IFTRUE 67300
67298: GO 67433
67300: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
67301: LD_ADDR_VAR 0 5
67305: PUSH
67306: LD_VAR 0 1
67310: PUSH
67311: LD_INT 4
67313: MINUS
67314: PUSH
67315: LD_VAR 0 2
67319: PUSH
67320: LD_INT 4
67322: MINUS
67323: PUSH
67324: LD_INT 2
67326: PUSH
67327: EMPTY
67328: LIST
67329: LIST
67330: LIST
67331: PUSH
67332: LD_VAR 0 1
67336: PUSH
67337: LD_INT 3
67339: MINUS
67340: PUSH
67341: LD_VAR 0 2
67345: PUSH
67346: LD_INT 1
67348: PUSH
67349: EMPTY
67350: LIST
67351: LIST
67352: LIST
67353: PUSH
67354: LD_VAR 0 1
67358: PUSH
67359: LD_INT 4
67361: PLUS
67362: PUSH
67363: LD_VAR 0 2
67367: PUSH
67368: LD_INT 4
67370: PUSH
67371: EMPTY
67372: LIST
67373: LIST
67374: LIST
67375: PUSH
67376: LD_VAR 0 1
67380: PUSH
67381: LD_INT 3
67383: PLUS
67384: PUSH
67385: LD_VAR 0 2
67389: PUSH
67390: LD_INT 3
67392: PLUS
67393: PUSH
67394: LD_INT 5
67396: PUSH
67397: EMPTY
67398: LIST
67399: LIST
67400: LIST
67401: PUSH
67402: LD_VAR 0 1
67406: PUSH
67407: LD_VAR 0 2
67411: PUSH
67412: LD_INT 4
67414: PLUS
67415: PUSH
67416: LD_INT 0
67418: PUSH
67419: EMPTY
67420: LIST
67421: LIST
67422: LIST
67423: PUSH
67424: EMPTY
67425: LIST
67426: LIST
67427: LIST
67428: LIST
67429: LIST
67430: ST_TO_ADDR
// end ; 1 :
67431: GO 68131
67433: LD_INT 1
67435: DOUBLE
67436: EQUAL
67437: IFTRUE 67441
67439: GO 67574
67441: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
67442: LD_ADDR_VAR 0 5
67446: PUSH
67447: LD_VAR 0 1
67451: PUSH
67452: LD_VAR 0 2
67456: PUSH
67457: LD_INT 4
67459: MINUS
67460: PUSH
67461: LD_INT 3
67463: PUSH
67464: EMPTY
67465: LIST
67466: LIST
67467: LIST
67468: PUSH
67469: LD_VAR 0 1
67473: PUSH
67474: LD_INT 3
67476: MINUS
67477: PUSH
67478: LD_VAR 0 2
67482: PUSH
67483: LD_INT 3
67485: MINUS
67486: PUSH
67487: LD_INT 2
67489: PUSH
67490: EMPTY
67491: LIST
67492: LIST
67493: LIST
67494: PUSH
67495: LD_VAR 0 1
67499: PUSH
67500: LD_INT 4
67502: MINUS
67503: PUSH
67504: LD_VAR 0 2
67508: PUSH
67509: LD_INT 1
67511: PUSH
67512: EMPTY
67513: LIST
67514: LIST
67515: LIST
67516: PUSH
67517: LD_VAR 0 1
67521: PUSH
67522: LD_VAR 0 2
67526: PUSH
67527: LD_INT 3
67529: PLUS
67530: PUSH
67531: LD_INT 0
67533: PUSH
67534: EMPTY
67535: LIST
67536: LIST
67537: LIST
67538: PUSH
67539: LD_VAR 0 1
67543: PUSH
67544: LD_INT 4
67546: PLUS
67547: PUSH
67548: LD_VAR 0 2
67552: PUSH
67553: LD_INT 4
67555: PLUS
67556: PUSH
67557: LD_INT 5
67559: PUSH
67560: EMPTY
67561: LIST
67562: LIST
67563: LIST
67564: PUSH
67565: EMPTY
67566: LIST
67567: LIST
67568: LIST
67569: LIST
67570: LIST
67571: ST_TO_ADDR
// end ; 2 :
67572: GO 68131
67574: LD_INT 2
67576: DOUBLE
67577: EQUAL
67578: IFTRUE 67582
67580: GO 67711
67582: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
67583: LD_ADDR_VAR 0 5
67587: PUSH
67588: LD_VAR 0 1
67592: PUSH
67593: LD_VAR 0 2
67597: PUSH
67598: LD_INT 3
67600: MINUS
67601: PUSH
67602: LD_INT 3
67604: PUSH
67605: EMPTY
67606: LIST
67607: LIST
67608: LIST
67609: PUSH
67610: LD_VAR 0 1
67614: PUSH
67615: LD_INT 4
67617: PLUS
67618: PUSH
67619: LD_VAR 0 2
67623: PUSH
67624: LD_INT 4
67626: PUSH
67627: EMPTY
67628: LIST
67629: LIST
67630: LIST
67631: PUSH
67632: LD_VAR 0 1
67636: PUSH
67637: LD_VAR 0 2
67641: PUSH
67642: LD_INT 4
67644: PLUS
67645: PUSH
67646: LD_INT 0
67648: PUSH
67649: EMPTY
67650: LIST
67651: LIST
67652: LIST
67653: PUSH
67654: LD_VAR 0 1
67658: PUSH
67659: LD_INT 3
67661: MINUS
67662: PUSH
67663: LD_VAR 0 2
67667: PUSH
67668: LD_INT 1
67670: PUSH
67671: EMPTY
67672: LIST
67673: LIST
67674: LIST
67675: PUSH
67676: LD_VAR 0 1
67680: PUSH
67681: LD_INT 4
67683: MINUS
67684: PUSH
67685: LD_VAR 0 2
67689: PUSH
67690: LD_INT 4
67692: MINUS
67693: PUSH
67694: LD_INT 2
67696: PUSH
67697: EMPTY
67698: LIST
67699: LIST
67700: LIST
67701: PUSH
67702: EMPTY
67703: LIST
67704: LIST
67705: LIST
67706: LIST
67707: LIST
67708: ST_TO_ADDR
// end ; 3 :
67709: GO 68131
67711: LD_INT 3
67713: DOUBLE
67714: EQUAL
67715: IFTRUE 67719
67717: GO 67852
67719: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
67720: LD_ADDR_VAR 0 5
67724: PUSH
67725: LD_VAR 0 1
67729: PUSH
67730: LD_INT 3
67732: PLUS
67733: PUSH
67734: LD_VAR 0 2
67738: PUSH
67739: LD_INT 4
67741: PUSH
67742: EMPTY
67743: LIST
67744: LIST
67745: LIST
67746: PUSH
67747: LD_VAR 0 1
67751: PUSH
67752: LD_INT 4
67754: PLUS
67755: PUSH
67756: LD_VAR 0 2
67760: PUSH
67761: LD_INT 4
67763: PLUS
67764: PUSH
67765: LD_INT 5
67767: PUSH
67768: EMPTY
67769: LIST
67770: LIST
67771: LIST
67772: PUSH
67773: LD_VAR 0 1
67777: PUSH
67778: LD_INT 4
67780: MINUS
67781: PUSH
67782: LD_VAR 0 2
67786: PUSH
67787: LD_INT 1
67789: PUSH
67790: EMPTY
67791: LIST
67792: LIST
67793: LIST
67794: PUSH
67795: LD_VAR 0 1
67799: PUSH
67800: LD_VAR 0 2
67804: PUSH
67805: LD_INT 4
67807: MINUS
67808: PUSH
67809: LD_INT 3
67811: PUSH
67812: EMPTY
67813: LIST
67814: LIST
67815: LIST
67816: PUSH
67817: LD_VAR 0 1
67821: PUSH
67822: LD_INT 3
67824: MINUS
67825: PUSH
67826: LD_VAR 0 2
67830: PUSH
67831: LD_INT 3
67833: MINUS
67834: PUSH
67835: LD_INT 2
67837: PUSH
67838: EMPTY
67839: LIST
67840: LIST
67841: LIST
67842: PUSH
67843: EMPTY
67844: LIST
67845: LIST
67846: LIST
67847: LIST
67848: LIST
67849: ST_TO_ADDR
// end ; 4 :
67850: GO 68131
67852: LD_INT 4
67854: DOUBLE
67855: EQUAL
67856: IFTRUE 67860
67858: GO 67993
67860: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
67861: LD_ADDR_VAR 0 5
67865: PUSH
67866: LD_VAR 0 1
67870: PUSH
67871: LD_VAR 0 2
67875: PUSH
67876: LD_INT 4
67878: PLUS
67879: PUSH
67880: LD_INT 0
67882: PUSH
67883: EMPTY
67884: LIST
67885: LIST
67886: LIST
67887: PUSH
67888: LD_VAR 0 1
67892: PUSH
67893: LD_INT 3
67895: PLUS
67896: PUSH
67897: LD_VAR 0 2
67901: PUSH
67902: LD_INT 3
67904: PLUS
67905: PUSH
67906: LD_INT 5
67908: PUSH
67909: EMPTY
67910: LIST
67911: LIST
67912: LIST
67913: PUSH
67914: LD_VAR 0 1
67918: PUSH
67919: LD_INT 4
67921: PLUS
67922: PUSH
67923: LD_VAR 0 2
67927: PUSH
67928: LD_INT 4
67930: PUSH
67931: EMPTY
67932: LIST
67933: LIST
67934: LIST
67935: PUSH
67936: LD_VAR 0 1
67940: PUSH
67941: LD_VAR 0 2
67945: PUSH
67946: LD_INT 3
67948: MINUS
67949: PUSH
67950: LD_INT 3
67952: PUSH
67953: EMPTY
67954: LIST
67955: LIST
67956: LIST
67957: PUSH
67958: LD_VAR 0 1
67962: PUSH
67963: LD_INT 4
67965: MINUS
67966: PUSH
67967: LD_VAR 0 2
67971: PUSH
67972: LD_INT 4
67974: MINUS
67975: PUSH
67976: LD_INT 2
67978: PUSH
67979: EMPTY
67980: LIST
67981: LIST
67982: LIST
67983: PUSH
67984: EMPTY
67985: LIST
67986: LIST
67987: LIST
67988: LIST
67989: LIST
67990: ST_TO_ADDR
// end ; 5 :
67991: GO 68131
67993: LD_INT 5
67995: DOUBLE
67996: EQUAL
67997: IFTRUE 68001
67999: GO 68130
68001: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
68002: LD_ADDR_VAR 0 5
68006: PUSH
68007: LD_VAR 0 1
68011: PUSH
68012: LD_INT 4
68014: MINUS
68015: PUSH
68016: LD_VAR 0 2
68020: PUSH
68021: LD_INT 1
68023: PUSH
68024: EMPTY
68025: LIST
68026: LIST
68027: LIST
68028: PUSH
68029: LD_VAR 0 1
68033: PUSH
68034: LD_VAR 0 2
68038: PUSH
68039: LD_INT 4
68041: MINUS
68042: PUSH
68043: LD_INT 3
68045: PUSH
68046: EMPTY
68047: LIST
68048: LIST
68049: LIST
68050: PUSH
68051: LD_VAR 0 1
68055: PUSH
68056: LD_INT 4
68058: PLUS
68059: PUSH
68060: LD_VAR 0 2
68064: PUSH
68065: LD_INT 4
68067: PLUS
68068: PUSH
68069: LD_INT 5
68071: PUSH
68072: EMPTY
68073: LIST
68074: LIST
68075: LIST
68076: PUSH
68077: LD_VAR 0 1
68081: PUSH
68082: LD_INT 3
68084: PLUS
68085: PUSH
68086: LD_VAR 0 2
68090: PUSH
68091: LD_INT 4
68093: PUSH
68094: EMPTY
68095: LIST
68096: LIST
68097: LIST
68098: PUSH
68099: LD_VAR 0 1
68103: PUSH
68104: LD_VAR 0 2
68108: PUSH
68109: LD_INT 3
68111: PLUS
68112: PUSH
68113: LD_INT 0
68115: PUSH
68116: EMPTY
68117: LIST
68118: LIST
68119: LIST
68120: PUSH
68121: EMPTY
68122: LIST
68123: LIST
68124: LIST
68125: LIST
68126: LIST
68127: ST_TO_ADDR
// end ; end ;
68128: GO 68131
68130: POP
// result := list ;
68131: LD_ADDR_VAR 0 4
68135: PUSH
68136: LD_VAR 0 5
68140: ST_TO_ADDR
// end ;
68141: LD_VAR 0 4
68145: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
68146: LD_INT 0
68148: PPUSH
68149: PPUSH
68150: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
68151: LD_VAR 0 1
68155: NOT
68156: PUSH
68157: LD_VAR 0 2
68161: PUSH
68162: LD_INT 1
68164: PUSH
68165: LD_INT 2
68167: PUSH
68168: LD_INT 3
68170: PUSH
68171: LD_INT 4
68173: PUSH
68174: EMPTY
68175: LIST
68176: LIST
68177: LIST
68178: LIST
68179: IN
68180: NOT
68181: OR
68182: IFFALSE 68186
// exit ;
68184: GO 68269
// tmp := [ ] ;
68186: LD_ADDR_VAR 0 5
68190: PUSH
68191: EMPTY
68192: ST_TO_ADDR
// for i in units do
68193: LD_ADDR_VAR 0 4
68197: PUSH
68198: LD_VAR 0 1
68202: PUSH
68203: FOR_IN
68204: IFFALSE 68238
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
68206: LD_ADDR_VAR 0 5
68210: PUSH
68211: LD_VAR 0 5
68215: PPUSH
68216: LD_VAR 0 4
68220: PPUSH
68221: LD_VAR 0 2
68225: PPUSH
68226: CALL_OW 259
68230: PPUSH
68231: CALL 69629 0 2
68235: ST_TO_ADDR
68236: GO 68203
68238: POP
68239: POP
// if not tmp then
68240: LD_VAR 0 5
68244: NOT
68245: IFFALSE 68249
// exit ;
68247: GO 68269
// result := SortListByListDesc ( units , tmp ) ;
68249: LD_ADDR_VAR 0 3
68253: PUSH
68254: LD_VAR 0 1
68258: PPUSH
68259: LD_VAR 0 5
68263: PPUSH
68264: CALL_OW 77
68268: ST_TO_ADDR
// end ;
68269: LD_VAR 0 3
68273: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
68274: LD_INT 0
68276: PPUSH
68277: PPUSH
68278: PPUSH
// result := false ;
68279: LD_ADDR_VAR 0 3
68283: PUSH
68284: LD_INT 0
68286: ST_TO_ADDR
// if not building then
68287: LD_VAR 0 2
68291: NOT
68292: IFFALSE 68296
// exit ;
68294: GO 68434
// x := GetX ( building ) ;
68296: LD_ADDR_VAR 0 4
68300: PUSH
68301: LD_VAR 0 2
68305: PPUSH
68306: CALL_OW 250
68310: ST_TO_ADDR
// y := GetY ( building ) ;
68311: LD_ADDR_VAR 0 5
68315: PUSH
68316: LD_VAR 0 2
68320: PPUSH
68321: CALL_OW 251
68325: ST_TO_ADDR
// if not x or not y then
68326: LD_VAR 0 4
68330: NOT
68331: PUSH
68332: LD_VAR 0 5
68336: NOT
68337: OR
68338: IFFALSE 68342
// exit ;
68340: GO 68434
// if GetTaskList ( unit ) then
68342: LD_VAR 0 1
68346: PPUSH
68347: CALL_OW 437
68351: IFFALSE 68434
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68353: LD_STRING e
68355: PUSH
68356: LD_VAR 0 1
68360: PPUSH
68361: CALL_OW 437
68365: PUSH
68366: LD_INT 1
68368: ARRAY
68369: PUSH
68370: LD_INT 1
68372: ARRAY
68373: EQUAL
68374: PUSH
68375: LD_VAR 0 4
68379: PUSH
68380: LD_VAR 0 1
68384: PPUSH
68385: CALL_OW 437
68389: PUSH
68390: LD_INT 1
68392: ARRAY
68393: PUSH
68394: LD_INT 2
68396: ARRAY
68397: EQUAL
68398: AND
68399: PUSH
68400: LD_VAR 0 5
68404: PUSH
68405: LD_VAR 0 1
68409: PPUSH
68410: CALL_OW 437
68414: PUSH
68415: LD_INT 1
68417: ARRAY
68418: PUSH
68419: LD_INT 3
68421: ARRAY
68422: EQUAL
68423: AND
68424: IFFALSE 68434
// result := true end ;
68426: LD_ADDR_VAR 0 3
68430: PUSH
68431: LD_INT 1
68433: ST_TO_ADDR
// end ;
68434: LD_VAR 0 3
68438: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
68439: LD_INT 0
68441: PPUSH
// result := false ;
68442: LD_ADDR_VAR 0 4
68446: PUSH
68447: LD_INT 0
68449: ST_TO_ADDR
// if GetTaskList ( unit ) then
68450: LD_VAR 0 1
68454: PPUSH
68455: CALL_OW 437
68459: IFFALSE 68542
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68461: LD_STRING M
68463: PUSH
68464: LD_VAR 0 1
68468: PPUSH
68469: CALL_OW 437
68473: PUSH
68474: LD_INT 1
68476: ARRAY
68477: PUSH
68478: LD_INT 1
68480: ARRAY
68481: EQUAL
68482: PUSH
68483: LD_VAR 0 2
68487: PUSH
68488: LD_VAR 0 1
68492: PPUSH
68493: CALL_OW 437
68497: PUSH
68498: LD_INT 1
68500: ARRAY
68501: PUSH
68502: LD_INT 2
68504: ARRAY
68505: EQUAL
68506: AND
68507: PUSH
68508: LD_VAR 0 3
68512: PUSH
68513: LD_VAR 0 1
68517: PPUSH
68518: CALL_OW 437
68522: PUSH
68523: LD_INT 1
68525: ARRAY
68526: PUSH
68527: LD_INT 3
68529: ARRAY
68530: EQUAL
68531: AND
68532: IFFALSE 68542
// result := true ;
68534: LD_ADDR_VAR 0 4
68538: PUSH
68539: LD_INT 1
68541: ST_TO_ADDR
// end ; end ;
68542: LD_VAR 0 4
68546: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
68547: LD_INT 0
68549: PPUSH
68550: PPUSH
68551: PPUSH
68552: PPUSH
// if not unit or not area then
68553: LD_VAR 0 1
68557: NOT
68558: PUSH
68559: LD_VAR 0 2
68563: NOT
68564: OR
68565: IFFALSE 68569
// exit ;
68567: GO 68732
// tmp := AreaToList ( area , i ) ;
68569: LD_ADDR_VAR 0 6
68573: PUSH
68574: LD_VAR 0 2
68578: PPUSH
68579: LD_VAR 0 5
68583: PPUSH
68584: CALL_OW 517
68588: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
68589: LD_ADDR_VAR 0 5
68593: PUSH
68594: DOUBLE
68595: LD_INT 1
68597: DEC
68598: ST_TO_ADDR
68599: LD_VAR 0 6
68603: PUSH
68604: LD_INT 1
68606: ARRAY
68607: PUSH
68608: FOR_TO
68609: IFFALSE 68730
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
68611: LD_ADDR_VAR 0 7
68615: PUSH
68616: LD_VAR 0 6
68620: PUSH
68621: LD_INT 1
68623: ARRAY
68624: PUSH
68625: LD_VAR 0 5
68629: ARRAY
68630: PUSH
68631: LD_VAR 0 6
68635: PUSH
68636: LD_INT 2
68638: ARRAY
68639: PUSH
68640: LD_VAR 0 5
68644: ARRAY
68645: PUSH
68646: EMPTY
68647: LIST
68648: LIST
68649: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
68650: LD_INT 92
68652: PUSH
68653: LD_VAR 0 7
68657: PUSH
68658: LD_INT 1
68660: ARRAY
68661: PUSH
68662: LD_VAR 0 7
68666: PUSH
68667: LD_INT 2
68669: ARRAY
68670: PUSH
68671: LD_INT 3
68673: PUSH
68674: EMPTY
68675: LIST
68676: LIST
68677: LIST
68678: LIST
68679: PPUSH
68680: CALL_OW 69
68684: PUSH
68685: LD_INT 0
68687: EQUAL
68688: IFFALSE 68728
// begin PlaceUnitArea ( unit , area , mode ) ;
68690: LD_VAR 0 1
68694: PPUSH
68695: LD_VAR 0 2
68699: PPUSH
68700: LD_VAR 0 3
68704: PPUSH
68705: CALL_OW 49
// result := IsPlaced ( unit ) ;
68709: LD_ADDR_VAR 0 4
68713: PUSH
68714: LD_VAR 0 1
68718: PPUSH
68719: CALL_OW 305
68723: ST_TO_ADDR
// exit ;
68724: POP
68725: POP
68726: GO 68732
// end ; end ;
68728: GO 68608
68730: POP
68731: POP
// end ;
68732: LD_VAR 0 4
68736: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
68737: LD_INT 0
68739: PPUSH
68740: PPUSH
68741: PPUSH
// if not side or side > 8 then
68742: LD_VAR 0 1
68746: NOT
68747: PUSH
68748: LD_VAR 0 1
68752: PUSH
68753: LD_INT 8
68755: GREATER
68756: OR
68757: IFFALSE 68761
// exit ;
68759: GO 68948
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
68761: LD_ADDR_VAR 0 4
68765: PUSH
68766: LD_INT 22
68768: PUSH
68769: LD_VAR 0 1
68773: PUSH
68774: EMPTY
68775: LIST
68776: LIST
68777: PUSH
68778: LD_INT 21
68780: PUSH
68781: LD_INT 3
68783: PUSH
68784: EMPTY
68785: LIST
68786: LIST
68787: PUSH
68788: EMPTY
68789: LIST
68790: LIST
68791: PPUSH
68792: CALL_OW 69
68796: ST_TO_ADDR
// if not tmp then
68797: LD_VAR 0 4
68801: NOT
68802: IFFALSE 68806
// exit ;
68804: GO 68948
// enable_addtolog := true ;
68806: LD_ADDR_OWVAR 81
68810: PUSH
68811: LD_INT 1
68813: ST_TO_ADDR
// AddToLog ( [ ) ;
68814: LD_STRING [
68816: PPUSH
68817: CALL_OW 561
// for i in tmp do
68821: LD_ADDR_VAR 0 3
68825: PUSH
68826: LD_VAR 0 4
68830: PUSH
68831: FOR_IN
68832: IFFALSE 68939
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
68834: LD_STRING [
68836: PUSH
68837: LD_VAR 0 3
68841: PPUSH
68842: CALL_OW 266
68846: STR
68847: PUSH
68848: LD_STRING , 
68850: STR
68851: PUSH
68852: LD_VAR 0 3
68856: PPUSH
68857: CALL_OW 250
68861: STR
68862: PUSH
68863: LD_STRING , 
68865: STR
68866: PUSH
68867: LD_VAR 0 3
68871: PPUSH
68872: CALL_OW 251
68876: STR
68877: PUSH
68878: LD_STRING , 
68880: STR
68881: PUSH
68882: LD_VAR 0 3
68886: PPUSH
68887: CALL_OW 254
68891: STR
68892: PUSH
68893: LD_STRING , 
68895: STR
68896: PUSH
68897: LD_VAR 0 3
68901: PPUSH
68902: LD_INT 1
68904: PPUSH
68905: CALL_OW 268
68909: STR
68910: PUSH
68911: LD_STRING , 
68913: STR
68914: PUSH
68915: LD_VAR 0 3
68919: PPUSH
68920: LD_INT 2
68922: PPUSH
68923: CALL_OW 268
68927: STR
68928: PUSH
68929: LD_STRING ],
68931: STR
68932: PPUSH
68933: CALL_OW 561
// end ;
68937: GO 68831
68939: POP
68940: POP
// AddToLog ( ]; ) ;
68941: LD_STRING ];
68943: PPUSH
68944: CALL_OW 561
// end ;
68948: LD_VAR 0 2
68952: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
68953: LD_INT 0
68955: PPUSH
68956: PPUSH
68957: PPUSH
68958: PPUSH
68959: PPUSH
// if not area or not rate or not max then
68960: LD_VAR 0 1
68964: NOT
68965: PUSH
68966: LD_VAR 0 2
68970: NOT
68971: OR
68972: PUSH
68973: LD_VAR 0 4
68977: NOT
68978: OR
68979: IFFALSE 68983
// exit ;
68981: GO 69172
// while 1 do
68983: LD_INT 1
68985: IFFALSE 69172
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
68987: LD_ADDR_VAR 0 9
68991: PUSH
68992: LD_VAR 0 1
68996: PPUSH
68997: LD_INT 1
68999: PPUSH
69000: CALL_OW 287
69004: PUSH
69005: LD_INT 10
69007: MUL
69008: ST_TO_ADDR
// r := rate / 10 ;
69009: LD_ADDR_VAR 0 7
69013: PUSH
69014: LD_VAR 0 2
69018: PUSH
69019: LD_INT 10
69021: DIVREAL
69022: ST_TO_ADDR
// time := 1 1$00 ;
69023: LD_ADDR_VAR 0 8
69027: PUSH
69028: LD_INT 2100
69030: ST_TO_ADDR
// if amount < min then
69031: LD_VAR 0 9
69035: PUSH
69036: LD_VAR 0 3
69040: LESS
69041: IFFALSE 69059
// r := r * 2 else
69043: LD_ADDR_VAR 0 7
69047: PUSH
69048: LD_VAR 0 7
69052: PUSH
69053: LD_INT 2
69055: MUL
69056: ST_TO_ADDR
69057: GO 69085
// if amount > max then
69059: LD_VAR 0 9
69063: PUSH
69064: LD_VAR 0 4
69068: GREATER
69069: IFFALSE 69085
// r := r / 2 ;
69071: LD_ADDR_VAR 0 7
69075: PUSH
69076: LD_VAR 0 7
69080: PUSH
69081: LD_INT 2
69083: DIVREAL
69084: ST_TO_ADDR
// time := time / r ;
69085: LD_ADDR_VAR 0 8
69089: PUSH
69090: LD_VAR 0 8
69094: PUSH
69095: LD_VAR 0 7
69099: DIVREAL
69100: ST_TO_ADDR
// if time < 0 then
69101: LD_VAR 0 8
69105: PUSH
69106: LD_INT 0
69108: LESS
69109: IFFALSE 69126
// time := time * - 1 ;
69111: LD_ADDR_VAR 0 8
69115: PUSH
69116: LD_VAR 0 8
69120: PUSH
69121: LD_INT 1
69123: NEG
69124: MUL
69125: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
69126: LD_VAR 0 8
69130: PUSH
69131: LD_INT 35
69133: PPUSH
69134: LD_INT 875
69136: PPUSH
69137: CALL_OW 12
69141: PLUS
69142: PPUSH
69143: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
69147: LD_INT 1
69149: PPUSH
69150: LD_INT 5
69152: PPUSH
69153: CALL_OW 12
69157: PPUSH
69158: LD_VAR 0 1
69162: PPUSH
69163: LD_INT 1
69165: PPUSH
69166: CALL_OW 55
// end ;
69170: GO 68983
// end ;
69172: LD_VAR 0 5
69176: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
69177: LD_INT 0
69179: PPUSH
69180: PPUSH
69181: PPUSH
69182: PPUSH
69183: PPUSH
69184: PPUSH
69185: PPUSH
69186: PPUSH
// if not turrets or not factories then
69187: LD_VAR 0 1
69191: NOT
69192: PUSH
69193: LD_VAR 0 2
69197: NOT
69198: OR
69199: IFFALSE 69203
// exit ;
69201: GO 69510
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
69203: LD_ADDR_VAR 0 10
69207: PUSH
69208: LD_INT 5
69210: PUSH
69211: LD_INT 6
69213: PUSH
69214: EMPTY
69215: LIST
69216: LIST
69217: PUSH
69218: LD_INT 2
69220: PUSH
69221: LD_INT 4
69223: PUSH
69224: EMPTY
69225: LIST
69226: LIST
69227: PUSH
69228: LD_INT 3
69230: PUSH
69231: LD_INT 5
69233: PUSH
69234: EMPTY
69235: LIST
69236: LIST
69237: PUSH
69238: EMPTY
69239: LIST
69240: LIST
69241: LIST
69242: PUSH
69243: LD_INT 24
69245: PUSH
69246: LD_INT 25
69248: PUSH
69249: EMPTY
69250: LIST
69251: LIST
69252: PUSH
69253: LD_INT 23
69255: PUSH
69256: LD_INT 27
69258: PUSH
69259: EMPTY
69260: LIST
69261: LIST
69262: PUSH
69263: EMPTY
69264: LIST
69265: LIST
69266: PUSH
69267: LD_INT 42
69269: PUSH
69270: LD_INT 43
69272: PUSH
69273: EMPTY
69274: LIST
69275: LIST
69276: PUSH
69277: LD_INT 44
69279: PUSH
69280: LD_INT 46
69282: PUSH
69283: EMPTY
69284: LIST
69285: LIST
69286: PUSH
69287: LD_INT 45
69289: PUSH
69290: LD_INT 47
69292: PUSH
69293: EMPTY
69294: LIST
69295: LIST
69296: PUSH
69297: EMPTY
69298: LIST
69299: LIST
69300: LIST
69301: PUSH
69302: EMPTY
69303: LIST
69304: LIST
69305: LIST
69306: ST_TO_ADDR
// result := [ ] ;
69307: LD_ADDR_VAR 0 3
69311: PUSH
69312: EMPTY
69313: ST_TO_ADDR
// for i in turrets do
69314: LD_ADDR_VAR 0 4
69318: PUSH
69319: LD_VAR 0 1
69323: PUSH
69324: FOR_IN
69325: IFFALSE 69508
// begin nat := GetNation ( i ) ;
69327: LD_ADDR_VAR 0 7
69331: PUSH
69332: LD_VAR 0 4
69336: PPUSH
69337: CALL_OW 248
69341: ST_TO_ADDR
// weapon := 0 ;
69342: LD_ADDR_VAR 0 8
69346: PUSH
69347: LD_INT 0
69349: ST_TO_ADDR
// if not nat then
69350: LD_VAR 0 7
69354: NOT
69355: IFFALSE 69359
// continue ;
69357: GO 69324
// for j in list [ nat ] do
69359: LD_ADDR_VAR 0 5
69363: PUSH
69364: LD_VAR 0 10
69368: PUSH
69369: LD_VAR 0 7
69373: ARRAY
69374: PUSH
69375: FOR_IN
69376: IFFALSE 69417
// if GetBWeapon ( i ) = j [ 1 ] then
69378: LD_VAR 0 4
69382: PPUSH
69383: CALL_OW 269
69387: PUSH
69388: LD_VAR 0 5
69392: PUSH
69393: LD_INT 1
69395: ARRAY
69396: EQUAL
69397: IFFALSE 69415
// begin weapon := j [ 2 ] ;
69399: LD_ADDR_VAR 0 8
69403: PUSH
69404: LD_VAR 0 5
69408: PUSH
69409: LD_INT 2
69411: ARRAY
69412: ST_TO_ADDR
// break ;
69413: GO 69417
// end ;
69415: GO 69375
69417: POP
69418: POP
// if not weapon then
69419: LD_VAR 0 8
69423: NOT
69424: IFFALSE 69428
// continue ;
69426: GO 69324
// for k in factories do
69428: LD_ADDR_VAR 0 6
69432: PUSH
69433: LD_VAR 0 2
69437: PUSH
69438: FOR_IN
69439: IFFALSE 69504
// begin weapons := AvailableWeaponList ( k ) ;
69441: LD_ADDR_VAR 0 9
69445: PUSH
69446: LD_VAR 0 6
69450: PPUSH
69451: CALL_OW 478
69455: ST_TO_ADDR
// if not weapons then
69456: LD_VAR 0 9
69460: NOT
69461: IFFALSE 69465
// continue ;
69463: GO 69438
// if weapon in weapons then
69465: LD_VAR 0 8
69469: PUSH
69470: LD_VAR 0 9
69474: IN
69475: IFFALSE 69502
// begin result := [ i , weapon ] ;
69477: LD_ADDR_VAR 0 3
69481: PUSH
69482: LD_VAR 0 4
69486: PUSH
69487: LD_VAR 0 8
69491: PUSH
69492: EMPTY
69493: LIST
69494: LIST
69495: ST_TO_ADDR
// exit ;
69496: POP
69497: POP
69498: POP
69499: POP
69500: GO 69510
// end ; end ;
69502: GO 69438
69504: POP
69505: POP
// end ;
69506: GO 69324
69508: POP
69509: POP
// end ;
69510: LD_VAR 0 3
69514: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
69515: LD_INT 0
69517: PPUSH
// if not side or side > 8 then
69518: LD_VAR 0 3
69522: NOT
69523: PUSH
69524: LD_VAR 0 3
69528: PUSH
69529: LD_INT 8
69531: GREATER
69532: OR
69533: IFFALSE 69537
// exit ;
69535: GO 69596
// if not range then
69537: LD_VAR 0 4
69541: NOT
69542: IFFALSE 69553
// range := - 12 ;
69544: LD_ADDR_VAR 0 4
69548: PUSH
69549: LD_INT 12
69551: NEG
69552: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
69553: LD_VAR 0 1
69557: PPUSH
69558: LD_VAR 0 2
69562: PPUSH
69563: LD_VAR 0 3
69567: PPUSH
69568: LD_VAR 0 4
69572: PPUSH
69573: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
69577: LD_VAR 0 1
69581: PPUSH
69582: LD_VAR 0 2
69586: PPUSH
69587: LD_VAR 0 3
69591: PPUSH
69592: CALL_OW 331
// end ;
69596: LD_VAR 0 5
69600: RET
// export function Video ( mode ) ; begin
69601: LD_INT 0
69603: PPUSH
// ingame_video = mode ;
69604: LD_ADDR_OWVAR 52
69608: PUSH
69609: LD_VAR 0 1
69613: ST_TO_ADDR
// interface_hidden = mode ;
69614: LD_ADDR_OWVAR 54
69618: PUSH
69619: LD_VAR 0 1
69623: ST_TO_ADDR
// end ;
69624: LD_VAR 0 2
69628: RET
// export function Join ( array , element ) ; begin
69629: LD_INT 0
69631: PPUSH
// result := Replace ( array , array + 1 , element ) ;
69632: LD_ADDR_VAR 0 3
69636: PUSH
69637: LD_VAR 0 1
69641: PPUSH
69642: LD_VAR 0 1
69646: PUSH
69647: LD_INT 1
69649: PLUS
69650: PPUSH
69651: LD_VAR 0 2
69655: PPUSH
69656: CALL_OW 1
69660: ST_TO_ADDR
// end ;
69661: LD_VAR 0 3
69665: RET
// export function JoinUnion ( array , element ) ; begin
69666: LD_INT 0
69668: PPUSH
// result := array union element ;
69669: LD_ADDR_VAR 0 3
69673: PUSH
69674: LD_VAR 0 1
69678: PUSH
69679: LD_VAR 0 2
69683: UNION
69684: ST_TO_ADDR
// end ;
69685: LD_VAR 0 3
69689: RET
// export function GetBehemoths ( side ) ; begin
69690: LD_INT 0
69692: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
69693: LD_ADDR_VAR 0 2
69697: PUSH
69698: LD_INT 22
69700: PUSH
69701: LD_VAR 0 1
69705: PUSH
69706: EMPTY
69707: LIST
69708: LIST
69709: PUSH
69710: LD_INT 31
69712: PUSH
69713: LD_INT 25
69715: PUSH
69716: EMPTY
69717: LIST
69718: LIST
69719: PUSH
69720: EMPTY
69721: LIST
69722: LIST
69723: PPUSH
69724: CALL_OW 69
69728: ST_TO_ADDR
// end ;
69729: LD_VAR 0 2
69733: RET
// export function Shuffle ( array ) ; var i , index ; begin
69734: LD_INT 0
69736: PPUSH
69737: PPUSH
69738: PPUSH
// result := [ ] ;
69739: LD_ADDR_VAR 0 2
69743: PUSH
69744: EMPTY
69745: ST_TO_ADDR
// if not array then
69746: LD_VAR 0 1
69750: NOT
69751: IFFALSE 69755
// exit ;
69753: GO 69854
// Randomize ;
69755: CALL_OW 10
// for i = array downto 1 do
69759: LD_ADDR_VAR 0 3
69763: PUSH
69764: DOUBLE
69765: LD_VAR 0 1
69769: INC
69770: ST_TO_ADDR
69771: LD_INT 1
69773: PUSH
69774: FOR_DOWNTO
69775: IFFALSE 69852
// begin index := rand ( 1 , array ) ;
69777: LD_ADDR_VAR 0 4
69781: PUSH
69782: LD_INT 1
69784: PPUSH
69785: LD_VAR 0 1
69789: PPUSH
69790: CALL_OW 12
69794: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
69795: LD_ADDR_VAR 0 2
69799: PUSH
69800: LD_VAR 0 2
69804: PPUSH
69805: LD_VAR 0 2
69809: PUSH
69810: LD_INT 1
69812: PLUS
69813: PPUSH
69814: LD_VAR 0 1
69818: PUSH
69819: LD_VAR 0 4
69823: ARRAY
69824: PPUSH
69825: CALL_OW 2
69829: ST_TO_ADDR
// array := Delete ( array , index ) ;
69830: LD_ADDR_VAR 0 1
69834: PUSH
69835: LD_VAR 0 1
69839: PPUSH
69840: LD_VAR 0 4
69844: PPUSH
69845: CALL_OW 3
69849: ST_TO_ADDR
// end ;
69850: GO 69774
69852: POP
69853: POP
// end ;
69854: LD_VAR 0 2
69858: RET
// export function GetBaseMaterials ( base ) ; begin
69859: LD_INT 0
69861: PPUSH
// result := [ 0 , 0 , 0 ] ;
69862: LD_ADDR_VAR 0 2
69866: PUSH
69867: LD_INT 0
69869: PUSH
69870: LD_INT 0
69872: PUSH
69873: LD_INT 0
69875: PUSH
69876: EMPTY
69877: LIST
69878: LIST
69879: LIST
69880: ST_TO_ADDR
// if not base then
69881: LD_VAR 0 1
69885: NOT
69886: IFFALSE 69890
// exit ;
69888: GO 69939
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
69890: LD_ADDR_VAR 0 2
69894: PUSH
69895: LD_VAR 0 1
69899: PPUSH
69900: LD_INT 1
69902: PPUSH
69903: CALL_OW 275
69907: PUSH
69908: LD_VAR 0 1
69912: PPUSH
69913: LD_INT 2
69915: PPUSH
69916: CALL_OW 275
69920: PUSH
69921: LD_VAR 0 1
69925: PPUSH
69926: LD_INT 3
69928: PPUSH
69929: CALL_OW 275
69933: PUSH
69934: EMPTY
69935: LIST
69936: LIST
69937: LIST
69938: ST_TO_ADDR
// end ;
69939: LD_VAR 0 2
69943: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
69944: LD_INT 0
69946: PPUSH
69947: PPUSH
// result := array ;
69948: LD_ADDR_VAR 0 3
69952: PUSH
69953: LD_VAR 0 1
69957: ST_TO_ADDR
// if size >= result then
69958: LD_VAR 0 2
69962: PUSH
69963: LD_VAR 0 3
69967: GREATEREQUAL
69968: IFFALSE 69972
// exit ;
69970: GO 70022
// if size then
69972: LD_VAR 0 2
69976: IFFALSE 70022
// for i := array downto size do
69978: LD_ADDR_VAR 0 4
69982: PUSH
69983: DOUBLE
69984: LD_VAR 0 1
69988: INC
69989: ST_TO_ADDR
69990: LD_VAR 0 2
69994: PUSH
69995: FOR_DOWNTO
69996: IFFALSE 70020
// result := Delete ( result , result ) ;
69998: LD_ADDR_VAR 0 3
70002: PUSH
70003: LD_VAR 0 3
70007: PPUSH
70008: LD_VAR 0 3
70012: PPUSH
70013: CALL_OW 3
70017: ST_TO_ADDR
70018: GO 69995
70020: POP
70021: POP
// end ;
70022: LD_VAR 0 3
70026: RET
// export function ComExit ( unit ) ; var tmp ; begin
70027: LD_INT 0
70029: PPUSH
70030: PPUSH
// if not IsInUnit ( unit ) then
70031: LD_VAR 0 1
70035: PPUSH
70036: CALL_OW 310
70040: NOT
70041: IFFALSE 70045
// exit ;
70043: GO 70105
// tmp := IsInUnit ( unit ) ;
70045: LD_ADDR_VAR 0 3
70049: PUSH
70050: LD_VAR 0 1
70054: PPUSH
70055: CALL_OW 310
70059: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
70060: LD_VAR 0 3
70064: PPUSH
70065: CALL_OW 247
70069: PUSH
70070: LD_INT 2
70072: EQUAL
70073: IFFALSE 70086
// ComExitVehicle ( unit ) else
70075: LD_VAR 0 1
70079: PPUSH
70080: CALL_OW 121
70084: GO 70095
// ComExitBuilding ( unit ) ;
70086: LD_VAR 0 1
70090: PPUSH
70091: CALL_OW 122
// result := tmp ;
70095: LD_ADDR_VAR 0 2
70099: PUSH
70100: LD_VAR 0 3
70104: ST_TO_ADDR
// end ;
70105: LD_VAR 0 2
70109: RET
// export function ComExitAll ( units ) ; var i ; begin
70110: LD_INT 0
70112: PPUSH
70113: PPUSH
// if not units then
70114: LD_VAR 0 1
70118: NOT
70119: IFFALSE 70123
// exit ;
70121: GO 70149
// for i in units do
70123: LD_ADDR_VAR 0 3
70127: PUSH
70128: LD_VAR 0 1
70132: PUSH
70133: FOR_IN
70134: IFFALSE 70147
// ComExit ( i ) ;
70136: LD_VAR 0 3
70140: PPUSH
70141: CALL 70027 0 1
70145: GO 70133
70147: POP
70148: POP
// end ;
70149: LD_VAR 0 2
70153: RET
// export function ResetHc ; begin
70154: LD_INT 0
70156: PPUSH
// InitHc ;
70157: CALL_OW 19
// hc_importance := 0 ;
70161: LD_ADDR_OWVAR 32
70165: PUSH
70166: LD_INT 0
70168: ST_TO_ADDR
// end ;
70169: LD_VAR 0 1
70173: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
70174: LD_INT 0
70176: PPUSH
70177: PPUSH
70178: PPUSH
// _x := ( x1 + x2 ) div 2 ;
70179: LD_ADDR_VAR 0 6
70183: PUSH
70184: LD_VAR 0 1
70188: PUSH
70189: LD_VAR 0 3
70193: PLUS
70194: PUSH
70195: LD_INT 2
70197: DIV
70198: ST_TO_ADDR
// if _x < 0 then
70199: LD_VAR 0 6
70203: PUSH
70204: LD_INT 0
70206: LESS
70207: IFFALSE 70224
// _x := _x * - 1 ;
70209: LD_ADDR_VAR 0 6
70213: PUSH
70214: LD_VAR 0 6
70218: PUSH
70219: LD_INT 1
70221: NEG
70222: MUL
70223: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
70224: LD_ADDR_VAR 0 7
70228: PUSH
70229: LD_VAR 0 2
70233: PUSH
70234: LD_VAR 0 4
70238: PLUS
70239: PUSH
70240: LD_INT 2
70242: DIV
70243: ST_TO_ADDR
// if _y < 0 then
70244: LD_VAR 0 7
70248: PUSH
70249: LD_INT 0
70251: LESS
70252: IFFALSE 70269
// _y := _y * - 1 ;
70254: LD_ADDR_VAR 0 7
70258: PUSH
70259: LD_VAR 0 7
70263: PUSH
70264: LD_INT 1
70266: NEG
70267: MUL
70268: ST_TO_ADDR
// result := [ _x , _y ] ;
70269: LD_ADDR_VAR 0 5
70273: PUSH
70274: LD_VAR 0 6
70278: PUSH
70279: LD_VAR 0 7
70283: PUSH
70284: EMPTY
70285: LIST
70286: LIST
70287: ST_TO_ADDR
// end ;
70288: LD_VAR 0 5
70292: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
70293: LD_INT 0
70295: PPUSH
70296: PPUSH
70297: PPUSH
70298: PPUSH
// task := GetTaskList ( unit ) ;
70299: LD_ADDR_VAR 0 7
70303: PUSH
70304: LD_VAR 0 1
70308: PPUSH
70309: CALL_OW 437
70313: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
70314: LD_VAR 0 7
70318: NOT
70319: PUSH
70320: LD_VAR 0 1
70324: PPUSH
70325: LD_VAR 0 2
70329: PPUSH
70330: CALL_OW 308
70334: NOT
70335: AND
70336: IFFALSE 70340
// exit ;
70338: GO 70458
// if IsInArea ( unit , area ) then
70340: LD_VAR 0 1
70344: PPUSH
70345: LD_VAR 0 2
70349: PPUSH
70350: CALL_OW 308
70354: IFFALSE 70372
// begin ComMoveToArea ( unit , goAway ) ;
70356: LD_VAR 0 1
70360: PPUSH
70361: LD_VAR 0 3
70365: PPUSH
70366: CALL_OW 113
// exit ;
70370: GO 70458
// end ; if task [ 1 ] [ 1 ] <> M then
70372: LD_VAR 0 7
70376: PUSH
70377: LD_INT 1
70379: ARRAY
70380: PUSH
70381: LD_INT 1
70383: ARRAY
70384: PUSH
70385: LD_STRING M
70387: NONEQUAL
70388: IFFALSE 70392
// exit ;
70390: GO 70458
// x := task [ 1 ] [ 2 ] ;
70392: LD_ADDR_VAR 0 5
70396: PUSH
70397: LD_VAR 0 7
70401: PUSH
70402: LD_INT 1
70404: ARRAY
70405: PUSH
70406: LD_INT 2
70408: ARRAY
70409: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
70410: LD_ADDR_VAR 0 6
70414: PUSH
70415: LD_VAR 0 7
70419: PUSH
70420: LD_INT 1
70422: ARRAY
70423: PUSH
70424: LD_INT 3
70426: ARRAY
70427: ST_TO_ADDR
// if InArea ( x , y , area ) then
70428: LD_VAR 0 5
70432: PPUSH
70433: LD_VAR 0 6
70437: PPUSH
70438: LD_VAR 0 2
70442: PPUSH
70443: CALL_OW 309
70447: IFFALSE 70458
// ComStop ( unit ) ;
70449: LD_VAR 0 1
70453: PPUSH
70454: CALL_OW 141
// end ;
70458: LD_VAR 0 4
70462: RET
// export function Abs ( value ) ; begin
70463: LD_INT 0
70465: PPUSH
// result := value ;
70466: LD_ADDR_VAR 0 2
70470: PUSH
70471: LD_VAR 0 1
70475: ST_TO_ADDR
// if value < 0 then
70476: LD_VAR 0 1
70480: PUSH
70481: LD_INT 0
70483: LESS
70484: IFFALSE 70501
// result := value * - 1 ;
70486: LD_ADDR_VAR 0 2
70490: PUSH
70491: LD_VAR 0 1
70495: PUSH
70496: LD_INT 1
70498: NEG
70499: MUL
70500: ST_TO_ADDR
// end ;
70501: LD_VAR 0 2
70505: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
70506: LD_INT 0
70508: PPUSH
70509: PPUSH
70510: PPUSH
70511: PPUSH
70512: PPUSH
70513: PPUSH
70514: PPUSH
70515: PPUSH
// if not unit or not building then
70516: LD_VAR 0 1
70520: NOT
70521: PUSH
70522: LD_VAR 0 2
70526: NOT
70527: OR
70528: IFFALSE 70532
// exit ;
70530: GO 70758
// x := GetX ( building ) ;
70532: LD_ADDR_VAR 0 4
70536: PUSH
70537: LD_VAR 0 2
70541: PPUSH
70542: CALL_OW 250
70546: ST_TO_ADDR
// y := GetY ( building ) ;
70547: LD_ADDR_VAR 0 6
70551: PUSH
70552: LD_VAR 0 2
70556: PPUSH
70557: CALL_OW 251
70561: ST_TO_ADDR
// d := GetDir ( building ) ;
70562: LD_ADDR_VAR 0 8
70566: PUSH
70567: LD_VAR 0 2
70571: PPUSH
70572: CALL_OW 254
70576: ST_TO_ADDR
// r := 4 ;
70577: LD_ADDR_VAR 0 9
70581: PUSH
70582: LD_INT 4
70584: ST_TO_ADDR
// for i := 1 to 5 do
70585: LD_ADDR_VAR 0 10
70589: PUSH
70590: DOUBLE
70591: LD_INT 1
70593: DEC
70594: ST_TO_ADDR
70595: LD_INT 5
70597: PUSH
70598: FOR_TO
70599: IFFALSE 70756
// begin _x := ShiftX ( x , d , r + i ) ;
70601: LD_ADDR_VAR 0 5
70605: PUSH
70606: LD_VAR 0 4
70610: PPUSH
70611: LD_VAR 0 8
70615: PPUSH
70616: LD_VAR 0 9
70620: PUSH
70621: LD_VAR 0 10
70625: PLUS
70626: PPUSH
70627: CALL_OW 272
70631: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
70632: LD_ADDR_VAR 0 7
70636: PUSH
70637: LD_VAR 0 6
70641: PPUSH
70642: LD_VAR 0 8
70646: PPUSH
70647: LD_VAR 0 9
70651: PUSH
70652: LD_VAR 0 10
70656: PLUS
70657: PPUSH
70658: CALL_OW 273
70662: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
70663: LD_VAR 0 5
70667: PPUSH
70668: LD_VAR 0 7
70672: PPUSH
70673: CALL_OW 488
70677: PUSH
70678: LD_VAR 0 5
70682: PPUSH
70683: LD_VAR 0 7
70687: PPUSH
70688: CALL_OW 428
70692: PPUSH
70693: CALL_OW 247
70697: PUSH
70698: LD_INT 3
70700: PUSH
70701: LD_INT 2
70703: PUSH
70704: EMPTY
70705: LIST
70706: LIST
70707: IN
70708: NOT
70709: AND
70710: IFFALSE 70754
// begin ComMoveXY ( unit , _x , _y ) ;
70712: LD_VAR 0 1
70716: PPUSH
70717: LD_VAR 0 5
70721: PPUSH
70722: LD_VAR 0 7
70726: PPUSH
70727: CALL_OW 111
// result := [ _x , _y ] ;
70731: LD_ADDR_VAR 0 3
70735: PUSH
70736: LD_VAR 0 5
70740: PUSH
70741: LD_VAR 0 7
70745: PUSH
70746: EMPTY
70747: LIST
70748: LIST
70749: ST_TO_ADDR
// exit ;
70750: POP
70751: POP
70752: GO 70758
// end ; end ;
70754: GO 70598
70756: POP
70757: POP
// end ;
70758: LD_VAR 0 3
70762: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
70763: LD_INT 0
70765: PPUSH
70766: PPUSH
70767: PPUSH
// result := 0 ;
70768: LD_ADDR_VAR 0 3
70772: PUSH
70773: LD_INT 0
70775: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
70776: LD_VAR 0 1
70780: PUSH
70781: LD_INT 0
70783: LESS
70784: PUSH
70785: LD_VAR 0 1
70789: PUSH
70790: LD_INT 8
70792: GREATER
70793: OR
70794: PUSH
70795: LD_VAR 0 2
70799: PUSH
70800: LD_INT 0
70802: LESS
70803: OR
70804: PUSH
70805: LD_VAR 0 2
70809: PUSH
70810: LD_INT 8
70812: GREATER
70813: OR
70814: IFFALSE 70818
// exit ;
70816: GO 70893
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
70818: LD_ADDR_VAR 0 4
70822: PUSH
70823: LD_INT 22
70825: PUSH
70826: LD_VAR 0 2
70830: PUSH
70831: EMPTY
70832: LIST
70833: LIST
70834: PPUSH
70835: CALL_OW 69
70839: PUSH
70840: FOR_IN
70841: IFFALSE 70891
// begin un := UnitShoot ( i ) ;
70843: LD_ADDR_VAR 0 5
70847: PUSH
70848: LD_VAR 0 4
70852: PPUSH
70853: CALL_OW 504
70857: ST_TO_ADDR
// if GetSide ( un ) = side1 then
70858: LD_VAR 0 5
70862: PPUSH
70863: CALL_OW 255
70867: PUSH
70868: LD_VAR 0 1
70872: EQUAL
70873: IFFALSE 70889
// begin result := un ;
70875: LD_ADDR_VAR 0 3
70879: PUSH
70880: LD_VAR 0 5
70884: ST_TO_ADDR
// exit ;
70885: POP
70886: POP
70887: GO 70893
// end ; end ;
70889: GO 70840
70891: POP
70892: POP
// end ;
70893: LD_VAR 0 3
70897: RET
// export function GetCargoBay ( units ) ; begin
70898: LD_INT 0
70900: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
70901: LD_ADDR_VAR 0 2
70905: PUSH
70906: LD_VAR 0 1
70910: PPUSH
70911: LD_INT 2
70913: PUSH
70914: LD_INT 34
70916: PUSH
70917: LD_INT 12
70919: PUSH
70920: EMPTY
70921: LIST
70922: LIST
70923: PUSH
70924: LD_INT 34
70926: PUSH
70927: LD_INT 51
70929: PUSH
70930: EMPTY
70931: LIST
70932: LIST
70933: PUSH
70934: LD_INT 34
70936: PUSH
70937: LD_INT 32
70939: PUSH
70940: EMPTY
70941: LIST
70942: LIST
70943: PUSH
70944: LD_INT 34
70946: PUSH
70947: LD_INT 89
70949: PUSH
70950: EMPTY
70951: LIST
70952: LIST
70953: PUSH
70954: EMPTY
70955: LIST
70956: LIST
70957: LIST
70958: LIST
70959: LIST
70960: PPUSH
70961: CALL_OW 72
70965: ST_TO_ADDR
// end ;
70966: LD_VAR 0 2
70970: RET
// export function Negate ( value ) ; begin
70971: LD_INT 0
70973: PPUSH
// result := not value ;
70974: LD_ADDR_VAR 0 2
70978: PUSH
70979: LD_VAR 0 1
70983: NOT
70984: ST_TO_ADDR
// end ;
70985: LD_VAR 0 2
70989: RET
// export function Inc ( value ) ; begin
70990: LD_INT 0
70992: PPUSH
// result := value + 1 ;
70993: LD_ADDR_VAR 0 2
70997: PUSH
70998: LD_VAR 0 1
71002: PUSH
71003: LD_INT 1
71005: PLUS
71006: ST_TO_ADDR
// end ;
71007: LD_VAR 0 2
71011: RET
// export function Dec ( value ) ; begin
71012: LD_INT 0
71014: PPUSH
// result := value - 1 ;
71015: LD_ADDR_VAR 0 2
71019: PUSH
71020: LD_VAR 0 1
71024: PUSH
71025: LD_INT 1
71027: MINUS
71028: ST_TO_ADDR
// end ;
71029: LD_VAR 0 2
71033: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
71034: LD_INT 0
71036: PPUSH
71037: PPUSH
71038: PPUSH
71039: PPUSH
71040: PPUSH
71041: PPUSH
71042: PPUSH
71043: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
71044: LD_VAR 0 1
71048: PPUSH
71049: LD_VAR 0 2
71053: PPUSH
71054: CALL_OW 488
71058: NOT
71059: PUSH
71060: LD_VAR 0 3
71064: PPUSH
71065: LD_VAR 0 4
71069: PPUSH
71070: CALL_OW 488
71074: NOT
71075: OR
71076: IFFALSE 71089
// begin result := - 1 ;
71078: LD_ADDR_VAR 0 5
71082: PUSH
71083: LD_INT 1
71085: NEG
71086: ST_TO_ADDR
// exit ;
71087: GO 71324
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
71089: LD_ADDR_VAR 0 12
71093: PUSH
71094: LD_VAR 0 1
71098: PPUSH
71099: LD_VAR 0 2
71103: PPUSH
71104: LD_VAR 0 3
71108: PPUSH
71109: LD_VAR 0 4
71113: PPUSH
71114: CALL 70174 0 4
71118: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
71119: LD_ADDR_VAR 0 11
71123: PUSH
71124: LD_VAR 0 1
71128: PPUSH
71129: LD_VAR 0 2
71133: PPUSH
71134: LD_VAR 0 12
71138: PUSH
71139: LD_INT 1
71141: ARRAY
71142: PPUSH
71143: LD_VAR 0 12
71147: PUSH
71148: LD_INT 2
71150: ARRAY
71151: PPUSH
71152: CALL_OW 298
71156: ST_TO_ADDR
// distance := 9999 ;
71157: LD_ADDR_VAR 0 10
71161: PUSH
71162: LD_INT 9999
71164: ST_TO_ADDR
// for i := 0 to 5 do
71165: LD_ADDR_VAR 0 6
71169: PUSH
71170: DOUBLE
71171: LD_INT 0
71173: DEC
71174: ST_TO_ADDR
71175: LD_INT 5
71177: PUSH
71178: FOR_TO
71179: IFFALSE 71322
// begin _x := ShiftX ( x1 , i , centerDist ) ;
71181: LD_ADDR_VAR 0 7
71185: PUSH
71186: LD_VAR 0 1
71190: PPUSH
71191: LD_VAR 0 6
71195: PPUSH
71196: LD_VAR 0 11
71200: PPUSH
71201: CALL_OW 272
71205: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
71206: LD_ADDR_VAR 0 8
71210: PUSH
71211: LD_VAR 0 2
71215: PPUSH
71216: LD_VAR 0 6
71220: PPUSH
71221: LD_VAR 0 11
71225: PPUSH
71226: CALL_OW 273
71230: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
71231: LD_VAR 0 7
71235: PPUSH
71236: LD_VAR 0 8
71240: PPUSH
71241: CALL_OW 488
71245: NOT
71246: IFFALSE 71250
// continue ;
71248: GO 71178
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
71250: LD_ADDR_VAR 0 9
71254: PUSH
71255: LD_VAR 0 12
71259: PUSH
71260: LD_INT 1
71262: ARRAY
71263: PPUSH
71264: LD_VAR 0 12
71268: PUSH
71269: LD_INT 2
71271: ARRAY
71272: PPUSH
71273: LD_VAR 0 7
71277: PPUSH
71278: LD_VAR 0 8
71282: PPUSH
71283: CALL_OW 298
71287: ST_TO_ADDR
// if tmp < distance then
71288: LD_VAR 0 9
71292: PUSH
71293: LD_VAR 0 10
71297: LESS
71298: IFFALSE 71320
// begin result := i ;
71300: LD_ADDR_VAR 0 5
71304: PUSH
71305: LD_VAR 0 6
71309: ST_TO_ADDR
// distance := tmp ;
71310: LD_ADDR_VAR 0 10
71314: PUSH
71315: LD_VAR 0 9
71319: ST_TO_ADDR
// end ; end ;
71320: GO 71178
71322: POP
71323: POP
// end ;
71324: LD_VAR 0 5
71328: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71329: LD_INT 0
71331: PPUSH
71332: PPUSH
// if not driver or not IsInUnit ( driver ) then
71333: LD_VAR 0 1
71337: NOT
71338: PUSH
71339: LD_VAR 0 1
71343: PPUSH
71344: CALL_OW 310
71348: NOT
71349: OR
71350: IFFALSE 71354
// exit ;
71352: GO 71444
// vehicle := IsInUnit ( driver ) ;
71354: LD_ADDR_VAR 0 3
71358: PUSH
71359: LD_VAR 0 1
71363: PPUSH
71364: CALL_OW 310
71368: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71369: LD_VAR 0 1
71373: PPUSH
71374: LD_STRING \
71376: PUSH
71377: LD_INT 0
71379: PUSH
71380: LD_INT 0
71382: PUSH
71383: LD_INT 0
71385: PUSH
71386: LD_INT 0
71388: PUSH
71389: LD_INT 0
71391: PUSH
71392: LD_INT 0
71394: PUSH
71395: EMPTY
71396: LIST
71397: LIST
71398: LIST
71399: LIST
71400: LIST
71401: LIST
71402: LIST
71403: PUSH
71404: LD_STRING E
71406: PUSH
71407: LD_INT 0
71409: PUSH
71410: LD_INT 0
71412: PUSH
71413: LD_VAR 0 3
71417: PUSH
71418: LD_INT 0
71420: PUSH
71421: LD_INT 0
71423: PUSH
71424: LD_INT 0
71426: PUSH
71427: EMPTY
71428: LIST
71429: LIST
71430: LIST
71431: LIST
71432: LIST
71433: LIST
71434: LIST
71435: PUSH
71436: EMPTY
71437: LIST
71438: LIST
71439: PPUSH
71440: CALL_OW 446
// end ;
71444: LD_VAR 0 2
71448: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71449: LD_INT 0
71451: PPUSH
71452: PPUSH
// if not driver or not IsInUnit ( driver ) then
71453: LD_VAR 0 1
71457: NOT
71458: PUSH
71459: LD_VAR 0 1
71463: PPUSH
71464: CALL_OW 310
71468: NOT
71469: OR
71470: IFFALSE 71474
// exit ;
71472: GO 71564
// vehicle := IsInUnit ( driver ) ;
71474: LD_ADDR_VAR 0 3
71478: PUSH
71479: LD_VAR 0 1
71483: PPUSH
71484: CALL_OW 310
71488: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71489: LD_VAR 0 1
71493: PPUSH
71494: LD_STRING \
71496: PUSH
71497: LD_INT 0
71499: PUSH
71500: LD_INT 0
71502: PUSH
71503: LD_INT 0
71505: PUSH
71506: LD_INT 0
71508: PUSH
71509: LD_INT 0
71511: PUSH
71512: LD_INT 0
71514: PUSH
71515: EMPTY
71516: LIST
71517: LIST
71518: LIST
71519: LIST
71520: LIST
71521: LIST
71522: LIST
71523: PUSH
71524: LD_STRING E
71526: PUSH
71527: LD_INT 0
71529: PUSH
71530: LD_INT 0
71532: PUSH
71533: LD_VAR 0 3
71537: PUSH
71538: LD_INT 0
71540: PUSH
71541: LD_INT 0
71543: PUSH
71544: LD_INT 0
71546: PUSH
71547: EMPTY
71548: LIST
71549: LIST
71550: LIST
71551: LIST
71552: LIST
71553: LIST
71554: LIST
71555: PUSH
71556: EMPTY
71557: LIST
71558: LIST
71559: PPUSH
71560: CALL_OW 447
// end ;
71564: LD_VAR 0 2
71568: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
71569: LD_INT 0
71571: PPUSH
71572: PPUSH
71573: PPUSH
// tmp := [ ] ;
71574: LD_ADDR_VAR 0 5
71578: PUSH
71579: EMPTY
71580: ST_TO_ADDR
// for i in units do
71581: LD_ADDR_VAR 0 4
71585: PUSH
71586: LD_VAR 0 1
71590: PUSH
71591: FOR_IN
71592: IFFALSE 71630
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
71594: LD_ADDR_VAR 0 5
71598: PUSH
71599: LD_VAR 0 5
71603: PPUSH
71604: LD_VAR 0 5
71608: PUSH
71609: LD_INT 1
71611: PLUS
71612: PPUSH
71613: LD_VAR 0 4
71617: PPUSH
71618: CALL_OW 256
71622: PPUSH
71623: CALL_OW 2
71627: ST_TO_ADDR
71628: GO 71591
71630: POP
71631: POP
// if not tmp then
71632: LD_VAR 0 5
71636: NOT
71637: IFFALSE 71641
// exit ;
71639: GO 71689
// if asc then
71641: LD_VAR 0 2
71645: IFFALSE 71669
// result := SortListByListAsc ( units , tmp ) else
71647: LD_ADDR_VAR 0 3
71651: PUSH
71652: LD_VAR 0 1
71656: PPUSH
71657: LD_VAR 0 5
71661: PPUSH
71662: CALL_OW 76
71666: ST_TO_ADDR
71667: GO 71689
// result := SortListByListDesc ( units , tmp ) ;
71669: LD_ADDR_VAR 0 3
71673: PUSH
71674: LD_VAR 0 1
71678: PPUSH
71679: LD_VAR 0 5
71683: PPUSH
71684: CALL_OW 77
71688: ST_TO_ADDR
// end ;
71689: LD_VAR 0 3
71693: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
71694: LD_INT 0
71696: PPUSH
71697: PPUSH
// task := GetTaskList ( mech ) ;
71698: LD_ADDR_VAR 0 4
71702: PUSH
71703: LD_VAR 0 1
71707: PPUSH
71708: CALL_OW 437
71712: ST_TO_ADDR
// if not task then
71713: LD_VAR 0 4
71717: NOT
71718: IFFALSE 71722
// exit ;
71720: GO 71764
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
71722: LD_ADDR_VAR 0 3
71726: PUSH
71727: LD_VAR 0 4
71731: PUSH
71732: LD_INT 1
71734: ARRAY
71735: PUSH
71736: LD_INT 1
71738: ARRAY
71739: PUSH
71740: LD_STRING r
71742: EQUAL
71743: PUSH
71744: LD_VAR 0 4
71748: PUSH
71749: LD_INT 1
71751: ARRAY
71752: PUSH
71753: LD_INT 4
71755: ARRAY
71756: PUSH
71757: LD_VAR 0 2
71761: EQUAL
71762: AND
71763: ST_TO_ADDR
// end ;
71764: LD_VAR 0 3
71768: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
71769: LD_INT 0
71771: PPUSH
// SetDir ( unit , d ) ;
71772: LD_VAR 0 1
71776: PPUSH
71777: LD_VAR 0 4
71781: PPUSH
71782: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
71786: LD_VAR 0 1
71790: PPUSH
71791: LD_VAR 0 2
71795: PPUSH
71796: LD_VAR 0 3
71800: PPUSH
71801: LD_VAR 0 5
71805: PPUSH
71806: CALL_OW 48
// end ;
71810: LD_VAR 0 6
71814: RET
// export function ToNaturalNumber ( number ) ; begin
71815: LD_INT 0
71817: PPUSH
// result := number div 1 ;
71818: LD_ADDR_VAR 0 2
71822: PUSH
71823: LD_VAR 0 1
71827: PUSH
71828: LD_INT 1
71830: DIV
71831: ST_TO_ADDR
// if number < 0 then
71832: LD_VAR 0 1
71836: PUSH
71837: LD_INT 0
71839: LESS
71840: IFFALSE 71850
// result := 0 ;
71842: LD_ADDR_VAR 0 2
71846: PUSH
71847: LD_INT 0
71849: ST_TO_ADDR
// end ;
71850: LD_VAR 0 2
71854: RET
// export function SortByClass ( units , class ) ; var un ; begin
71855: LD_INT 0
71857: PPUSH
71858: PPUSH
// if not units or not class then
71859: LD_VAR 0 1
71863: NOT
71864: PUSH
71865: LD_VAR 0 2
71869: NOT
71870: OR
71871: IFFALSE 71875
// exit ;
71873: GO 71970
// result := [ ] ;
71875: LD_ADDR_VAR 0 3
71879: PUSH
71880: EMPTY
71881: ST_TO_ADDR
// for un in units do
71882: LD_ADDR_VAR 0 4
71886: PUSH
71887: LD_VAR 0 1
71891: PUSH
71892: FOR_IN
71893: IFFALSE 71968
// if GetClass ( un ) = class then
71895: LD_VAR 0 4
71899: PPUSH
71900: CALL_OW 257
71904: PUSH
71905: LD_VAR 0 2
71909: EQUAL
71910: IFFALSE 71937
// result := Insert ( result , 1 , un ) else
71912: LD_ADDR_VAR 0 3
71916: PUSH
71917: LD_VAR 0 3
71921: PPUSH
71922: LD_INT 1
71924: PPUSH
71925: LD_VAR 0 4
71929: PPUSH
71930: CALL_OW 2
71934: ST_TO_ADDR
71935: GO 71966
// result := Replace ( result , result + 1 , un ) ;
71937: LD_ADDR_VAR 0 3
71941: PUSH
71942: LD_VAR 0 3
71946: PPUSH
71947: LD_VAR 0 3
71951: PUSH
71952: LD_INT 1
71954: PLUS
71955: PPUSH
71956: LD_VAR 0 4
71960: PPUSH
71961: CALL_OW 1
71965: ST_TO_ADDR
71966: GO 71892
71968: POP
71969: POP
// end ;
71970: LD_VAR 0 3
71974: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
71975: LD_INT 0
71977: PPUSH
71978: PPUSH
71979: PPUSH
71980: PPUSH
71981: PPUSH
71982: PPUSH
71983: PPUSH
// result := [ ] ;
71984: LD_ADDR_VAR 0 4
71988: PUSH
71989: EMPTY
71990: ST_TO_ADDR
// if x - r < 0 then
71991: LD_VAR 0 1
71995: PUSH
71996: LD_VAR 0 3
72000: MINUS
72001: PUSH
72002: LD_INT 0
72004: LESS
72005: IFFALSE 72017
// min_x := 0 else
72007: LD_ADDR_VAR 0 8
72011: PUSH
72012: LD_INT 0
72014: ST_TO_ADDR
72015: GO 72033
// min_x := x - r ;
72017: LD_ADDR_VAR 0 8
72021: PUSH
72022: LD_VAR 0 1
72026: PUSH
72027: LD_VAR 0 3
72031: MINUS
72032: ST_TO_ADDR
// if y - r < 0 then
72033: LD_VAR 0 2
72037: PUSH
72038: LD_VAR 0 3
72042: MINUS
72043: PUSH
72044: LD_INT 0
72046: LESS
72047: IFFALSE 72059
// min_y := 0 else
72049: LD_ADDR_VAR 0 7
72053: PUSH
72054: LD_INT 0
72056: ST_TO_ADDR
72057: GO 72075
// min_y := y - r ;
72059: LD_ADDR_VAR 0 7
72063: PUSH
72064: LD_VAR 0 2
72068: PUSH
72069: LD_VAR 0 3
72073: MINUS
72074: ST_TO_ADDR
// max_x := x + r ;
72075: LD_ADDR_VAR 0 9
72079: PUSH
72080: LD_VAR 0 1
72084: PUSH
72085: LD_VAR 0 3
72089: PLUS
72090: ST_TO_ADDR
// max_y := y + r ;
72091: LD_ADDR_VAR 0 10
72095: PUSH
72096: LD_VAR 0 2
72100: PUSH
72101: LD_VAR 0 3
72105: PLUS
72106: ST_TO_ADDR
// for _x = min_x to max_x do
72107: LD_ADDR_VAR 0 5
72111: PUSH
72112: DOUBLE
72113: LD_VAR 0 8
72117: DEC
72118: ST_TO_ADDR
72119: LD_VAR 0 9
72123: PUSH
72124: FOR_TO
72125: IFFALSE 72226
// for _y = min_y to max_y do
72127: LD_ADDR_VAR 0 6
72131: PUSH
72132: DOUBLE
72133: LD_VAR 0 7
72137: DEC
72138: ST_TO_ADDR
72139: LD_VAR 0 10
72143: PUSH
72144: FOR_TO
72145: IFFALSE 72222
// begin if not ValidHex ( _x , _y ) then
72147: LD_VAR 0 5
72151: PPUSH
72152: LD_VAR 0 6
72156: PPUSH
72157: CALL_OW 488
72161: NOT
72162: IFFALSE 72166
// continue ;
72164: GO 72144
// if GetResourceTypeXY ( _x , _y ) then
72166: LD_VAR 0 5
72170: PPUSH
72171: LD_VAR 0 6
72175: PPUSH
72176: CALL_OW 283
72180: IFFALSE 72220
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
72182: LD_ADDR_VAR 0 4
72186: PUSH
72187: LD_VAR 0 4
72191: PPUSH
72192: LD_VAR 0 4
72196: PUSH
72197: LD_INT 1
72199: PLUS
72200: PPUSH
72201: LD_VAR 0 5
72205: PUSH
72206: LD_VAR 0 6
72210: PUSH
72211: EMPTY
72212: LIST
72213: LIST
72214: PPUSH
72215: CALL_OW 1
72219: ST_TO_ADDR
// end ;
72220: GO 72144
72222: POP
72223: POP
72224: GO 72124
72226: POP
72227: POP
// end ;
72228: LD_VAR 0 4
72232: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
72233: LD_INT 0
72235: PPUSH
72236: PPUSH
72237: PPUSH
72238: PPUSH
72239: PPUSH
72240: PPUSH
72241: PPUSH
72242: PPUSH
// if not units then
72243: LD_VAR 0 1
72247: NOT
72248: IFFALSE 72252
// exit ;
72250: GO 72776
// result := UnitFilter ( units , [ f_ok ] ) ;
72252: LD_ADDR_VAR 0 3
72256: PUSH
72257: LD_VAR 0 1
72261: PPUSH
72262: LD_INT 50
72264: PUSH
72265: EMPTY
72266: LIST
72267: PPUSH
72268: CALL_OW 72
72272: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
72273: LD_ADDR_VAR 0 8
72277: PUSH
72278: LD_VAR 0 1
72282: PUSH
72283: LD_INT 1
72285: ARRAY
72286: PPUSH
72287: CALL_OW 255
72291: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
72292: LD_ADDR_VAR 0 10
72296: PUSH
72297: LD_INT 29
72299: PUSH
72300: LD_INT 91
72302: PUSH
72303: LD_INT 49
72305: PUSH
72306: EMPTY
72307: LIST
72308: LIST
72309: LIST
72310: ST_TO_ADDR
// if not result then
72311: LD_VAR 0 3
72315: NOT
72316: IFFALSE 72320
// exit ;
72318: GO 72776
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
72320: LD_ADDR_VAR 0 5
72324: PUSH
72325: LD_INT 81
72327: PUSH
72328: LD_VAR 0 8
72332: PUSH
72333: EMPTY
72334: LIST
72335: LIST
72336: PPUSH
72337: CALL_OW 69
72341: ST_TO_ADDR
// for i in result do
72342: LD_ADDR_VAR 0 4
72346: PUSH
72347: LD_VAR 0 3
72351: PUSH
72352: FOR_IN
72353: IFFALSE 72774
// begin tag := GetTag ( i ) + 1 ;
72355: LD_ADDR_VAR 0 9
72359: PUSH
72360: LD_VAR 0 4
72364: PPUSH
72365: CALL_OW 110
72369: PUSH
72370: LD_INT 1
72372: PLUS
72373: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
72374: LD_ADDR_VAR 0 7
72378: PUSH
72379: LD_VAR 0 4
72383: PPUSH
72384: CALL_OW 250
72388: PPUSH
72389: LD_VAR 0 4
72393: PPUSH
72394: CALL_OW 251
72398: PPUSH
72399: LD_INT 6
72401: PPUSH
72402: CALL 71975 0 3
72406: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
72407: LD_VAR 0 4
72411: PPUSH
72412: CALL_OW 247
72416: PUSH
72417: LD_INT 2
72419: EQUAL
72420: PUSH
72421: LD_VAR 0 7
72425: AND
72426: PUSH
72427: LD_VAR 0 4
72431: PPUSH
72432: CALL_OW 264
72436: PUSH
72437: LD_VAR 0 10
72441: IN
72442: NOT
72443: AND
72444: IFFALSE 72483
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
72446: LD_VAR 0 4
72450: PPUSH
72451: LD_VAR 0 7
72455: PUSH
72456: LD_INT 1
72458: ARRAY
72459: PUSH
72460: LD_INT 1
72462: ARRAY
72463: PPUSH
72464: LD_VAR 0 7
72468: PUSH
72469: LD_INT 1
72471: ARRAY
72472: PUSH
72473: LD_INT 2
72475: ARRAY
72476: PPUSH
72477: CALL_OW 116
72481: GO 72772
// if path > tag then
72483: LD_VAR 0 2
72487: PUSH
72488: LD_VAR 0 9
72492: GREATER
72493: IFFALSE 72701
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
72495: LD_ADDR_VAR 0 6
72499: PUSH
72500: LD_VAR 0 5
72504: PPUSH
72505: LD_INT 91
72507: PUSH
72508: LD_VAR 0 4
72512: PUSH
72513: LD_INT 8
72515: PUSH
72516: EMPTY
72517: LIST
72518: LIST
72519: LIST
72520: PPUSH
72521: CALL_OW 72
72525: ST_TO_ADDR
// if nearEnemy then
72526: LD_VAR 0 6
72530: IFFALSE 72599
// begin if GetWeapon ( i ) = ru_time_lapser then
72532: LD_VAR 0 4
72536: PPUSH
72537: CALL_OW 264
72541: PUSH
72542: LD_INT 49
72544: EQUAL
72545: IFFALSE 72573
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
72547: LD_VAR 0 4
72551: PPUSH
72552: LD_VAR 0 6
72556: PPUSH
72557: LD_VAR 0 4
72561: PPUSH
72562: CALL_OW 74
72566: PPUSH
72567: CALL_OW 112
72571: GO 72597
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
72573: LD_VAR 0 4
72577: PPUSH
72578: LD_VAR 0 6
72582: PPUSH
72583: LD_VAR 0 4
72587: PPUSH
72588: CALL_OW 74
72592: PPUSH
72593: CALL_OW 115
// end else
72597: GO 72699
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
72599: LD_VAR 0 4
72603: PPUSH
72604: LD_VAR 0 2
72608: PUSH
72609: LD_VAR 0 9
72613: ARRAY
72614: PUSH
72615: LD_INT 1
72617: ARRAY
72618: PPUSH
72619: LD_VAR 0 2
72623: PUSH
72624: LD_VAR 0 9
72628: ARRAY
72629: PUSH
72630: LD_INT 2
72632: ARRAY
72633: PPUSH
72634: CALL_OW 297
72638: PUSH
72639: LD_INT 6
72641: GREATER
72642: IFFALSE 72685
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
72644: LD_VAR 0 4
72648: PPUSH
72649: LD_VAR 0 2
72653: PUSH
72654: LD_VAR 0 9
72658: ARRAY
72659: PUSH
72660: LD_INT 1
72662: ARRAY
72663: PPUSH
72664: LD_VAR 0 2
72668: PUSH
72669: LD_VAR 0 9
72673: ARRAY
72674: PUSH
72675: LD_INT 2
72677: ARRAY
72678: PPUSH
72679: CALL_OW 114
72683: GO 72699
// SetTag ( i , tag ) ;
72685: LD_VAR 0 4
72689: PPUSH
72690: LD_VAR 0 9
72694: PPUSH
72695: CALL_OW 109
// end else
72699: GO 72772
// if enemy then
72701: LD_VAR 0 5
72705: IFFALSE 72772
// begin if GetWeapon ( i ) = ru_time_lapser then
72707: LD_VAR 0 4
72711: PPUSH
72712: CALL_OW 264
72716: PUSH
72717: LD_INT 49
72719: EQUAL
72720: IFFALSE 72748
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
72722: LD_VAR 0 4
72726: PPUSH
72727: LD_VAR 0 5
72731: PPUSH
72732: LD_VAR 0 4
72736: PPUSH
72737: CALL_OW 74
72741: PPUSH
72742: CALL_OW 112
72746: GO 72772
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
72748: LD_VAR 0 4
72752: PPUSH
72753: LD_VAR 0 5
72757: PPUSH
72758: LD_VAR 0 4
72762: PPUSH
72763: CALL_OW 74
72767: PPUSH
72768: CALL_OW 115
// end ; end ;
72772: GO 72352
72774: POP
72775: POP
// end ;
72776: LD_VAR 0 3
72780: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
72781: LD_INT 0
72783: PPUSH
72784: PPUSH
72785: PPUSH
// if not unit or IsInUnit ( unit ) then
72786: LD_VAR 0 1
72790: NOT
72791: PUSH
72792: LD_VAR 0 1
72796: PPUSH
72797: CALL_OW 310
72801: OR
72802: IFFALSE 72806
// exit ;
72804: GO 72897
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
72806: LD_ADDR_VAR 0 4
72810: PUSH
72811: LD_VAR 0 1
72815: PPUSH
72816: CALL_OW 250
72820: PPUSH
72821: LD_VAR 0 2
72825: PPUSH
72826: LD_INT 1
72828: PPUSH
72829: CALL_OW 272
72833: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
72834: LD_ADDR_VAR 0 5
72838: PUSH
72839: LD_VAR 0 1
72843: PPUSH
72844: CALL_OW 251
72848: PPUSH
72849: LD_VAR 0 2
72853: PPUSH
72854: LD_INT 1
72856: PPUSH
72857: CALL_OW 273
72861: ST_TO_ADDR
// if ValidHex ( x , y ) then
72862: LD_VAR 0 4
72866: PPUSH
72867: LD_VAR 0 5
72871: PPUSH
72872: CALL_OW 488
72876: IFFALSE 72897
// ComTurnXY ( unit , x , y ) ;
72878: LD_VAR 0 1
72882: PPUSH
72883: LD_VAR 0 4
72887: PPUSH
72888: LD_VAR 0 5
72892: PPUSH
72893: CALL_OW 118
// end ;
72897: LD_VAR 0 3
72901: RET
// export function SeeUnits ( side , units ) ; var i ; begin
72902: LD_INT 0
72904: PPUSH
72905: PPUSH
// result := false ;
72906: LD_ADDR_VAR 0 3
72910: PUSH
72911: LD_INT 0
72913: ST_TO_ADDR
// if not units then
72914: LD_VAR 0 2
72918: NOT
72919: IFFALSE 72923
// exit ;
72921: GO 72968
// for i in units do
72923: LD_ADDR_VAR 0 4
72927: PUSH
72928: LD_VAR 0 2
72932: PUSH
72933: FOR_IN
72934: IFFALSE 72966
// if See ( side , i ) then
72936: LD_VAR 0 1
72940: PPUSH
72941: LD_VAR 0 4
72945: PPUSH
72946: CALL_OW 292
72950: IFFALSE 72964
// begin result := true ;
72952: LD_ADDR_VAR 0 3
72956: PUSH
72957: LD_INT 1
72959: ST_TO_ADDR
// exit ;
72960: POP
72961: POP
72962: GO 72968
// end ;
72964: GO 72933
72966: POP
72967: POP
// end ;
72968: LD_VAR 0 3
72972: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
72973: LD_INT 0
72975: PPUSH
72976: PPUSH
72977: PPUSH
72978: PPUSH
// if not unit or not points then
72979: LD_VAR 0 1
72983: NOT
72984: PUSH
72985: LD_VAR 0 2
72989: NOT
72990: OR
72991: IFFALSE 72995
// exit ;
72993: GO 73085
// dist := 99999 ;
72995: LD_ADDR_VAR 0 5
72999: PUSH
73000: LD_INT 99999
73002: ST_TO_ADDR
// for i in points do
73003: LD_ADDR_VAR 0 4
73007: PUSH
73008: LD_VAR 0 2
73012: PUSH
73013: FOR_IN
73014: IFFALSE 73083
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
73016: LD_ADDR_VAR 0 6
73020: PUSH
73021: LD_VAR 0 1
73025: PPUSH
73026: LD_VAR 0 4
73030: PUSH
73031: LD_INT 1
73033: ARRAY
73034: PPUSH
73035: LD_VAR 0 4
73039: PUSH
73040: LD_INT 2
73042: ARRAY
73043: PPUSH
73044: CALL_OW 297
73048: ST_TO_ADDR
// if tmpDist < dist then
73049: LD_VAR 0 6
73053: PUSH
73054: LD_VAR 0 5
73058: LESS
73059: IFFALSE 73081
// begin result := i ;
73061: LD_ADDR_VAR 0 3
73065: PUSH
73066: LD_VAR 0 4
73070: ST_TO_ADDR
// dist := tmpDist ;
73071: LD_ADDR_VAR 0 5
73075: PUSH
73076: LD_VAR 0 6
73080: ST_TO_ADDR
// end ; end ;
73081: GO 73013
73083: POP
73084: POP
// end ;
73085: LD_VAR 0 3
73089: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
73090: LD_INT 0
73092: PPUSH
// uc_side := side ;
73093: LD_ADDR_OWVAR 20
73097: PUSH
73098: LD_VAR 0 1
73102: ST_TO_ADDR
// uc_nation := 3 ;
73103: LD_ADDR_OWVAR 21
73107: PUSH
73108: LD_INT 3
73110: ST_TO_ADDR
// vc_chassis := 25 ;
73111: LD_ADDR_OWVAR 37
73115: PUSH
73116: LD_INT 25
73118: ST_TO_ADDR
// vc_engine := engine_siberite ;
73119: LD_ADDR_OWVAR 39
73123: PUSH
73124: LD_INT 3
73126: ST_TO_ADDR
// vc_control := control_computer ;
73127: LD_ADDR_OWVAR 38
73131: PUSH
73132: LD_INT 3
73134: ST_TO_ADDR
// vc_weapon := 59 ;
73135: LD_ADDR_OWVAR 40
73139: PUSH
73140: LD_INT 59
73142: ST_TO_ADDR
// result := CreateVehicle ;
73143: LD_ADDR_VAR 0 5
73147: PUSH
73148: CALL_OW 45
73152: ST_TO_ADDR
// SetDir ( result , d ) ;
73153: LD_VAR 0 5
73157: PPUSH
73158: LD_VAR 0 4
73162: PPUSH
73163: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
73167: LD_VAR 0 5
73171: PPUSH
73172: LD_VAR 0 2
73176: PPUSH
73177: LD_VAR 0 3
73181: PPUSH
73182: LD_INT 0
73184: PPUSH
73185: CALL_OW 48
// end ;
73189: LD_VAR 0 5
73193: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
73194: LD_INT 0
73196: PPUSH
73197: PPUSH
73198: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
73199: LD_ADDR_VAR 0 2
73203: PUSH
73204: LD_INT 0
73206: PUSH
73207: LD_INT 0
73209: PUSH
73210: LD_INT 0
73212: PUSH
73213: LD_INT 0
73215: PUSH
73216: EMPTY
73217: LIST
73218: LIST
73219: LIST
73220: LIST
73221: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
73222: LD_VAR 0 1
73226: NOT
73227: PUSH
73228: LD_VAR 0 1
73232: PPUSH
73233: CALL_OW 264
73237: PUSH
73238: LD_INT 12
73240: PUSH
73241: LD_INT 51
73243: PUSH
73244: LD_INT 32
73246: PUSH
73247: LD_INT 89
73249: PUSH
73250: EMPTY
73251: LIST
73252: LIST
73253: LIST
73254: LIST
73255: IN
73256: NOT
73257: OR
73258: IFFALSE 73262
// exit ;
73260: GO 73360
// for i := 1 to 3 do
73262: LD_ADDR_VAR 0 3
73266: PUSH
73267: DOUBLE
73268: LD_INT 1
73270: DEC
73271: ST_TO_ADDR
73272: LD_INT 3
73274: PUSH
73275: FOR_TO
73276: IFFALSE 73358
// begin tmp := GetCargo ( cargo , i ) ;
73278: LD_ADDR_VAR 0 4
73282: PUSH
73283: LD_VAR 0 1
73287: PPUSH
73288: LD_VAR 0 3
73292: PPUSH
73293: CALL_OW 289
73297: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
73298: LD_ADDR_VAR 0 2
73302: PUSH
73303: LD_VAR 0 2
73307: PPUSH
73308: LD_VAR 0 3
73312: PPUSH
73313: LD_VAR 0 4
73317: PPUSH
73318: CALL_OW 1
73322: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
73323: LD_ADDR_VAR 0 2
73327: PUSH
73328: LD_VAR 0 2
73332: PPUSH
73333: LD_INT 4
73335: PPUSH
73336: LD_VAR 0 2
73340: PUSH
73341: LD_INT 4
73343: ARRAY
73344: PUSH
73345: LD_VAR 0 4
73349: PLUS
73350: PPUSH
73351: CALL_OW 1
73355: ST_TO_ADDR
// end ;
73356: GO 73275
73358: POP
73359: POP
// end ;
73360: LD_VAR 0 2
73364: RET
// export function Length ( array ) ; begin
73365: LD_INT 0
73367: PPUSH
// result := array + 0 ;
73368: LD_ADDR_VAR 0 2
73372: PUSH
73373: LD_VAR 0 1
73377: PUSH
73378: LD_INT 0
73380: PLUS
73381: ST_TO_ADDR
// end ;
73382: LD_VAR 0 2
73386: RET
// export function PrepareArray ( array ) ; begin
73387: LD_INT 0
73389: PPUSH
// result := array diff 0 ;
73390: LD_ADDR_VAR 0 2
73394: PUSH
73395: LD_VAR 0 1
73399: PUSH
73400: LD_INT 0
73402: DIFF
73403: ST_TO_ADDR
// if not result [ 1 ] then
73404: LD_VAR 0 2
73408: PUSH
73409: LD_INT 1
73411: ARRAY
73412: NOT
73413: IFFALSE 73433
// result := Delete ( result , 1 ) ;
73415: LD_ADDR_VAR 0 2
73419: PUSH
73420: LD_VAR 0 2
73424: PPUSH
73425: LD_INT 1
73427: PPUSH
73428: CALL_OW 3
73432: ST_TO_ADDR
// end ;
73433: LD_VAR 0 2
73437: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
73438: LD_INT 0
73440: PPUSH
73441: PPUSH
73442: PPUSH
73443: PPUSH
// sibRocketRange := 25 ;
73444: LD_ADDR_VAR 0 6
73448: PUSH
73449: LD_INT 25
73451: ST_TO_ADDR
// result := false ;
73452: LD_ADDR_VAR 0 4
73456: PUSH
73457: LD_INT 0
73459: ST_TO_ADDR
// for i := 0 to 5 do
73460: LD_ADDR_VAR 0 5
73464: PUSH
73465: DOUBLE
73466: LD_INT 0
73468: DEC
73469: ST_TO_ADDR
73470: LD_INT 5
73472: PUSH
73473: FOR_TO
73474: IFFALSE 73541
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
73476: LD_VAR 0 1
73480: PPUSH
73481: LD_VAR 0 5
73485: PPUSH
73486: LD_VAR 0 6
73490: PPUSH
73491: CALL_OW 272
73495: PPUSH
73496: LD_VAR 0 2
73500: PPUSH
73501: LD_VAR 0 5
73505: PPUSH
73506: LD_VAR 0 6
73510: PPUSH
73511: CALL_OW 273
73515: PPUSH
73516: LD_VAR 0 3
73520: PPUSH
73521: CALL_OW 309
73525: IFFALSE 73539
// begin result := true ;
73527: LD_ADDR_VAR 0 4
73531: PUSH
73532: LD_INT 1
73534: ST_TO_ADDR
// exit ;
73535: POP
73536: POP
73537: GO 73543
// end ;
73539: GO 73473
73541: POP
73542: POP
// end ;
73543: LD_VAR 0 4
73547: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
73548: LD_INT 0
73550: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
73551: LD_VAR 0 1
73555: PPUSH
73556: LD_VAR 0 2
73560: PPUSH
73561: LD_INT 0
73563: PPUSH
73564: LD_INT 0
73566: PPUSH
73567: LD_INT 1
73569: PPUSH
73570: LD_INT 0
73572: PPUSH
73573: CALL_OW 587
// end ;
73577: LD_VAR 0 3
73581: RET
// export function CenterOnNow ( unit ) ; begin
73582: LD_INT 0
73584: PPUSH
// result := IsInUnit ( unit ) ;
73585: LD_ADDR_VAR 0 2
73589: PUSH
73590: LD_VAR 0 1
73594: PPUSH
73595: CALL_OW 310
73599: ST_TO_ADDR
// if not result then
73600: LD_VAR 0 2
73604: NOT
73605: IFFALSE 73617
// result := unit ;
73607: LD_ADDR_VAR 0 2
73611: PUSH
73612: LD_VAR 0 1
73616: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
73617: LD_VAR 0 1
73621: PPUSH
73622: CALL_OW 87
// end ;
73626: LD_VAR 0 2
73630: RET
// export function ComMoveHex ( unit , hex ) ; begin
73631: LD_INT 0
73633: PPUSH
// if not hex then
73634: LD_VAR 0 2
73638: NOT
73639: IFFALSE 73643
// exit ;
73641: GO 73696
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
73643: LD_VAR 0 2
73647: PUSH
73648: LD_INT 1
73650: ARRAY
73651: PPUSH
73652: LD_VAR 0 2
73656: PUSH
73657: LD_INT 2
73659: ARRAY
73660: PPUSH
73661: CALL_OW 428
73665: IFFALSE 73669
// exit ;
73667: GO 73696
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
73669: LD_VAR 0 1
73673: PPUSH
73674: LD_VAR 0 2
73678: PUSH
73679: LD_INT 1
73681: ARRAY
73682: PPUSH
73683: LD_VAR 0 2
73687: PUSH
73688: LD_INT 2
73690: ARRAY
73691: PPUSH
73692: CALL_OW 111
// end ; end_of_file
73696: LD_VAR 0 3
73700: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
73701: LD_VAR 0 1
73705: PUSH
73706: LD_INT 200
73708: DOUBLE
73709: GREATEREQUAL
73710: IFFALSE 73718
73712: LD_INT 299
73714: DOUBLE
73715: LESSEQUAL
73716: IFTRUE 73720
73718: GO 73752
73720: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
73721: LD_VAR 0 1
73725: PPUSH
73726: LD_VAR 0 2
73730: PPUSH
73731: LD_VAR 0 3
73735: PPUSH
73736: LD_VAR 0 4
73740: PPUSH
73741: LD_VAR 0 5
73745: PPUSH
73746: CALL 28424 0 5
73750: GO 73829
73752: LD_INT 300
73754: DOUBLE
73755: GREATEREQUAL
73756: IFFALSE 73764
73758: LD_INT 399
73760: DOUBLE
73761: LESSEQUAL
73762: IFTRUE 73766
73764: GO 73828
73766: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
73767: LD_VAR 0 1
73771: PPUSH
73772: LD_VAR 0 2
73776: PPUSH
73777: LD_VAR 0 3
73781: PPUSH
73782: LD_VAR 0 4
73786: PPUSH
73787: LD_VAR 0 5
73791: PPUSH
73792: LD_VAR 0 6
73796: PPUSH
73797: LD_VAR 0 7
73801: PPUSH
73802: LD_VAR 0 8
73806: PPUSH
73807: LD_VAR 0 9
73811: PPUSH
73812: LD_VAR 0 10
73816: PPUSH
73817: LD_VAR 0 11
73821: PPUSH
73822: CALL 24757 0 11
73826: GO 73829
73828: POP
// end ;
73829: PPOPN 11
73831: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
73832: LD_VAR 0 1
73836: PPUSH
73837: LD_VAR 0 2
73841: PPUSH
73842: LD_VAR 0 3
73846: PPUSH
73847: LD_VAR 0 4
73851: PPUSH
73852: LD_VAR 0 5
73856: PPUSH
73857: CALL 28160 0 5
// end ; end_of_file
73861: PPOPN 5
73863: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
73864: LD_VAR 0 1
73868: PPUSH
73869: LD_VAR 0 2
73873: PPUSH
73874: LD_VAR 0 3
73878: PPUSH
73879: LD_VAR 0 4
73883: PPUSH
73884: LD_VAR 0 5
73888: PPUSH
73889: LD_VAR 0 6
73893: PPUSH
73894: CALL 12409 0 6
// end ;
73898: PPOPN 6
73900: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
73901: LD_INT 0
73903: PPUSH
// begin if not units then
73904: LD_VAR 0 1
73908: NOT
73909: IFFALSE 73913
// exit ;
73911: GO 73913
// end ;
73913: PPOPN 7
73915: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
73916: CALL 12313 0 0
// end ;
73920: PPOPN 1
73922: END
