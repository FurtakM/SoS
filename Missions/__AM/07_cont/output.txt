// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// Init ;
   8: CALL 44 0 0
// DebugMode ;
  12: CALL 253 0 0
// AnimateTrees ( true ) ;
  16: LD_INT 1
  18: PPUSH
  19: CALL_OW 573
// PrepareNature ;
  23: CALL 3063 0 0
// PrepareRussians ;
  27: CALL 4804 0 0
// PrepareAmericans ;
  31: CALL 3720 0 0
// Action ;
  35: CALL 8684 0 0
// SaveForQuickRestart ;
  39: CALL_OW 22
// end ;
  43: END
// export debug ; export mission_prev_prefix , mission_prefix ; export buildings_counter , time_to_end , can_end , must_end , kill_counter ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// mission_prefix := 07c_ ;
  55: LD_ADDR_EXP 3
  59: PUSH
  60: LD_STRING 07c_
  62: ST_TO_ADDR
// mission_prev_prefix := 07_ ;
  63: LD_ADDR_EXP 2
  67: PUSH
  68: LD_STRING 07_
  70: ST_TO_ADDR
// buildings_counter := 0 ;
  71: LD_ADDR_EXP 4
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// time_to_end := [ [ 32 32$00 , 29 29$00 , 26 26$00 ] [ Difficulty ] , [ 38 38$00 , 35 35$00 , 32 32$00 ] [ Difficulty ] , [ 44 44$00 , 41 41$00 , 38 38$00 ] [ Difficulty ] ] ;
  79: LD_ADDR_EXP 5
  83: PUSH
  84: LD_INT 67200
  86: PUSH
  87: LD_INT 60900
  89: PUSH
  90: LD_INT 54600
  92: PUSH
  93: EMPTY
  94: LIST
  95: LIST
  96: LIST
  97: PUSH
  98: LD_OWVAR 67
 102: ARRAY
 103: PUSH
 104: LD_INT 79800
 106: PUSH
 107: LD_INT 73500
 109: PUSH
 110: LD_INT 67200
 112: PUSH
 113: EMPTY
 114: LIST
 115: LIST
 116: LIST
 117: PUSH
 118: LD_OWVAR 67
 122: ARRAY
 123: PUSH
 124: LD_INT 92400
 126: PUSH
 127: LD_INT 86100
 129: PUSH
 130: LD_INT 79800
 132: PUSH
 133: EMPTY
 134: LIST
 135: LIST
 136: LIST
 137: PUSH
 138: LD_OWVAR 67
 142: ARRAY
 143: PUSH
 144: EMPTY
 145: LIST
 146: LIST
 147: LIST
 148: ST_TO_ADDR
// can_end := false ;
 149: LD_ADDR_EXP 6
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// must_end := false ;
 157: LD_ADDR_EXP 7
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// kill_counter := 0 ;
 165: LD_ADDR_EXP 8
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// end ;
 173: LD_VAR 0 1
 177: RET
// every 0 0$01 trigger not debug do
 178: LD_EXP 1
 182: NOT
 183: IFFALSE 252
 185: GO 187
 187: DISABLE
// begin enable ;
 188: ENABLE
// if not must_end then
 189: LD_EXP 7
 193: NOT
 194: IFFALSE 215
// display_strings := [ #Am07-1 , tick ] else
 196: LD_ADDR_OWVAR 47
 200: PUSH
 201: LD_STRING #Am07-1
 203: PUSH
 204: LD_OWVAR 1
 208: PUSH
 209: EMPTY
 210: LIST
 211: LIST
 212: ST_TO_ADDR
 213: GO 252
// display_strings := [ #Am07-1 , tick , #Am07-2 , time_to_end [ 3 ] - tick ] ;
 215: LD_ADDR_OWVAR 47
 219: PUSH
 220: LD_STRING #Am07-1
 222: PUSH
 223: LD_OWVAR 1
 227: PUSH
 228: LD_STRING #Am07-2
 230: PUSH
 231: LD_EXP 5
 235: PUSH
 236: LD_INT 3
 238: ARRAY
 239: PUSH
 240: LD_OWVAR 1
 244: MINUS
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: LIST
 250: LIST
 251: ST_TO_ADDR
// end ;
 252: END
// function DebugMode ; var i ; begin
 253: LD_INT 0
 255: PPUSH
 256: PPUSH
// if not debug then
 257: LD_EXP 1
 261: NOT
 262: IFFALSE 266
// exit ;
 264: GO 273
// FogOff ( 1 ) ;
 266: LD_INT 1
 268: PPUSH
 269: CALL_OW 344
// end ;
 273: LD_VAR 0 1
 277: RET
// every 3 trigger debug do var i , filter ;
 278: LD_EXP 1
 282: IFFALSE 371
 284: GO 286
 286: DISABLE
 287: LD_INT 0
 289: PPUSH
 290: PPUSH
// begin enable ;
 291: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 500 ] ] ] ) ;
 292: LD_ADDR_VAR 0 2
 296: PUSH
 297: LD_INT 22
 299: PUSH
 300: LD_INT 1
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: PUSH
 307: LD_INT 3
 309: PUSH
 310: LD_INT 24
 312: PUSH
 313: LD_INT 500
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: PUSH
 320: EMPTY
 321: LIST
 322: LIST
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: PPUSH
 328: CALL_OW 69
 332: ST_TO_ADDR
// if not filter then
 333: LD_VAR 0 2
 337: NOT
 338: IFFALSE 342
// exit ;
 340: GO 371
// for i in filter do
 342: LD_ADDR_VAR 0 1
 346: PUSH
 347: LD_VAR 0 2
 351: PUSH
 352: FOR_IN
 353: IFFALSE 369
// SetLives ( i , 1000 ) ;
 355: LD_VAR 0 1
 359: PPUSH
 360: LD_INT 1000
 362: PPUSH
 363: CALL_OW 234
 367: GO 352
 369: POP
 370: POP
// end ;
 371: PPOPN 2
 373: END
// every 0 0$1 trigger kill_counter >= 20 do
 374: LD_EXP 8
 378: PUSH
 379: LD_INT 20
 381: GREATEREQUAL
 382: IFFALSE 394
 384: GO 386
 386: DISABLE
// SetAchievement ( ACH_HITMAN ) ;
 387: LD_STRING ACH_HITMAN
 389: PPUSH
 390: CALL_OW 543
 394: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) >= 3 do
 395: LD_INT 22
 397: PUSH
 398: LD_INT 1
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: PUSH
 405: LD_INT 23
 407: PUSH
 408: LD_INT 3
 410: PUSH
 411: EMPTY
 412: LIST
 413: LIST
 414: PUSH
 415: LD_INT 21
 417: PUSH
 418: LD_INT 2
 420: PUSH
 421: EMPTY
 422: LIST
 423: LIST
 424: PUSH
 425: EMPTY
 426: LIST
 427: LIST
 428: LIST
 429: PPUSH
 430: CALL_OW 69
 434: PUSH
 435: LD_INT 3
 437: GREATEREQUAL
 438: IFFALSE 450
 440: GO 442
 442: DISABLE
// SetAchievement ( ACH_TANKACE ) ;
 443: LD_STRING ACH_TANKACE
 445: PPUSH
 446: CALL_OW 543
 450: END
// every 0 0$1 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) = 0 do
 451: LD_INT 2
 453: PUSH
 454: LD_INT 30
 456: PUSH
 457: LD_INT 0
 459: PUSH
 460: EMPTY
 461: LIST
 462: LIST
 463: PUSH
 464: LD_INT 30
 466: PUSH
 467: LD_INT 1
 469: PUSH
 470: EMPTY
 471: LIST
 472: LIST
 473: PUSH
 474: EMPTY
 475: LIST
 476: LIST
 477: LIST
 478: PPUSH
 479: CALL_OW 69
 483: PUSH
 484: LD_INT 0
 486: EQUAL
 487: IFFALSE 499
 489: GO 491
 491: DISABLE
// SetAchievement ( ACH_COMMANDO ) ; end_of_file
 492: LD_STRING ACH_COMMANDO
 494: PPUSH
 495: CALL_OW 543
 499: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
 500: LD_INT 0
 502: PPUSH
 503: PPUSH
// if exist_mode then
 504: LD_VAR 0 2
 508: IFFALSE 533
// unit := CreateCharacter ( mission_prev_prefix & ident ) else
 510: LD_ADDR_VAR 0 4
 514: PUSH
 515: LD_EXP 2
 519: PUSH
 520: LD_VAR 0 1
 524: STR
 525: PPUSH
 526: CALL_OW 34
 530: ST_TO_ADDR
 531: GO 548
// unit := NewCharacter ( ident ) ;
 533: LD_ADDR_VAR 0 4
 537: PUSH
 538: LD_VAR 0 1
 542: PPUSH
 543: CALL_OW 25
 547: ST_TO_ADDR
// result := unit ;
 548: LD_ADDR_VAR 0 3
 552: PUSH
 553: LD_VAR 0 4
 557: ST_TO_ADDR
// end ;
 558: LD_VAR 0 3
 562: RET
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 563: LD_INT 0
 565: PPUSH
// uc_side := side ;
 566: LD_ADDR_OWVAR 20
 570: PUSH
 571: LD_VAR 0 1
 575: ST_TO_ADDR
// uc_nation := nation ;
 576: LD_ADDR_OWVAR 21
 580: PUSH
 581: LD_VAR 0 2
 585: ST_TO_ADDR
// vc_chassis := chassis ;
 586: LD_ADDR_OWVAR 37
 590: PUSH
 591: LD_VAR 0 3
 595: ST_TO_ADDR
// vc_engine := engine ;
 596: LD_ADDR_OWVAR 39
 600: PUSH
 601: LD_VAR 0 4
 605: ST_TO_ADDR
// vc_control := control ;
 606: LD_ADDR_OWVAR 38
 610: PUSH
 611: LD_VAR 0 5
 615: ST_TO_ADDR
// vc_weapon := weapon ;
 616: LD_ADDR_OWVAR 40
 620: PUSH
 621: LD_VAR 0 6
 625: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 626: LD_ADDR_OWVAR 41
 630: PUSH
 631: LD_VAR 0 7
 635: ST_TO_ADDR
// result := CreateVehicle ;
 636: LD_ADDR_VAR 0 8
 640: PUSH
 641: CALL_OW 45
 645: ST_TO_ADDR
// end ;
 646: LD_VAR 0 8
 650: RET
// export function GetRandom ( sex ) ; var i , filter ; begin
 651: LD_INT 0
 653: PPUSH
 654: PPUSH
 655: PPUSH
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] ;
 656: LD_ADDR_VAR 0 4
 660: PUSH
 661: LD_INT 22
 663: PUSH
 664: LD_INT 1
 666: PUSH
 667: EMPTY
 668: LIST
 669: LIST
 670: PUSH
 671: LD_INT 21
 673: PUSH
 674: LD_INT 1
 676: PUSH
 677: EMPTY
 678: LIST
 679: LIST
 680: PUSH
 681: LD_INT 50
 683: PUSH
 684: EMPTY
 685: LIST
 686: PUSH
 687: EMPTY
 688: LIST
 689: LIST
 690: LIST
 691: PPUSH
 692: CALL_OW 69
 696: PUSH
 697: LD_EXP 9
 701: PUSH
 702: LD_EXP 10
 706: PUSH
 707: LD_EXP 11
 711: PUSH
 712: LD_EXP 12
 716: PUSH
 717: LD_EXP 13
 721: PUSH
 722: LD_EXP 14
 726: PUSH
 727: LD_EXP 15
 731: PUSH
 732: LD_EXP 16
 736: PUSH
 737: LD_EXP 18
 741: PUSH
 742: LD_EXP 17
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: LIST
 751: LIST
 752: LIST
 753: LIST
 754: LIST
 755: LIST
 756: LIST
 757: LIST
 758: DIFF
 759: ST_TO_ADDR
// if not filter then
 760: LD_VAR 0 4
 764: NOT
 765: IFFALSE 769
// exit ;
 767: GO 796
// result := UnitFilter ( filter , [ f_sex , sex ] ) ;
 769: LD_ADDR_VAR 0 2
 773: PUSH
 774: LD_VAR 0 4
 778: PPUSH
 779: LD_INT 26
 781: PUSH
 782: LD_VAR 0 1
 786: PUSH
 787: EMPTY
 788: LIST
 789: LIST
 790: PPUSH
 791: CALL_OW 72
 795: ST_TO_ADDR
// end ;
 796: LD_VAR 0 2
 800: RET
// export function SayX ( units , ident ) ; var i ; begin
 801: LD_INT 0
 803: PPUSH
 804: PPUSH
// result := false ;
 805: LD_ADDR_VAR 0 3
 809: PUSH
 810: LD_INT 0
 812: ST_TO_ADDR
// if not units then
 813: LD_VAR 0 1
 817: NOT
 818: IFFALSE 822
// exit ;
 820: GO 876
// for i in units do
 822: LD_ADDR_VAR 0 4
 826: PUSH
 827: LD_VAR 0 1
 831: PUSH
 832: FOR_IN
 833: IFFALSE 874
// if IsOk ( i ) then
 835: LD_VAR 0 4
 839: PPUSH
 840: CALL_OW 302
 844: IFFALSE 872
// begin Say ( i , ident ) ;
 846: LD_VAR 0 4
 850: PPUSH
 851: LD_VAR 0 2
 855: PPUSH
 856: CALL_OW 88
// result := i ;
 860: LD_ADDR_VAR 0 3
 864: PUSH
 865: LD_VAR 0 4
 869: ST_TO_ADDR
// break ;
 870: GO 874
// end ;
 872: GO 832
 874: POP
 875: POP
// end ;
 876: LD_VAR 0 3
 880: RET
// export function GetBaseBuildings ( base ) ; var tmp , i ; begin
 881: LD_INT 0
 883: PPUSH
 884: PPUSH
 885: PPUSH
// result := [ ] ;
 886: LD_ADDR_VAR 0 2
 890: PUSH
 891: EMPTY
 892: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_type , unit_building ] ) ;
 893: LD_ADDR_VAR 0 3
 897: PUSH
 898: LD_INT 21
 900: PUSH
 901: LD_INT 3
 903: PUSH
 904: EMPTY
 905: LIST
 906: LIST
 907: PPUSH
 908: CALL_OW 69
 912: ST_TO_ADDR
// if not tmp then
 913: LD_VAR 0 3
 917: NOT
 918: IFFALSE 922
// exit ;
 920: GO 972
// for i in tmp do
 922: LD_ADDR_VAR 0 4
 926: PUSH
 927: LD_VAR 0 3
 931: PUSH
 932: FOR_IN
 933: IFFALSE 970
// if GetBase ( i ) = base then
 935: LD_VAR 0 4
 939: PPUSH
 940: CALL_OW 274
 944: PUSH
 945: LD_VAR 0 1
 949: EQUAL
 950: IFFALSE 968
// result := result ^ i ;
 952: LD_ADDR_VAR 0 2
 956: PUSH
 957: LD_VAR 0 2
 961: PUSH
 962: LD_VAR 0 4
 966: ADD
 967: ST_TO_ADDR
 968: GO 932
 970: POP
 971: POP
// end ;
 972: LD_VAR 0 2
 976: RET
// export function GetTurretWeapon ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
 977: LD_INT 0
 979: PPUSH
 980: PPUSH
 981: PPUSH
 982: PPUSH
 983: PPUSH
 984: PPUSH
 985: PPUSH
 986: PPUSH
 987: PPUSH
 988: PPUSH
 989: PPUSH
 990: PPUSH
 991: PPUSH
 992: PPUSH
 993: PPUSH
 994: PPUSH
// result := false ;
 995: LD_ADDR_VAR 0 2
 999: PUSH
1000: LD_INT 0
1002: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
1003: LD_VAR 0 1
1007: NOT
1008: PUSH
1009: LD_VAR 0 1
1013: PPUSH
1014: CALL_OW 266
1018: PUSH
1019: LD_INT 32
1021: PUSH
1022: LD_INT 33
1024: PUSH
1025: EMPTY
1026: LIST
1027: LIST
1028: IN
1029: NOT
1030: OR
1031: IFFALSE 1035
// exit ;
1033: GO 2195
// nat := GetNation ( tower ) ;
1035: LD_ADDR_VAR 0 11
1039: PUSH
1040: LD_VAR 0 1
1044: PPUSH
1045: CALL_OW 248
1049: ST_TO_ADDR
// side := GetSide ( tower ) ;
1050: LD_ADDR_VAR 0 15
1054: PUSH
1055: LD_VAR 0 1
1059: PPUSH
1060: CALL_OW 255
1064: ST_TO_ADDR
// x := GetX ( tower ) ;
1065: LD_ADDR_VAR 0 9
1069: PUSH
1070: LD_VAR 0 1
1074: PPUSH
1075: CALL_OW 250
1079: ST_TO_ADDR
// y := GetY ( tower ) ;
1080: LD_ADDR_VAR 0 10
1084: PUSH
1085: LD_VAR 0 1
1089: PPUSH
1090: CALL_OW 251
1094: ST_TO_ADDR
// if not x or not y then
1095: LD_VAR 0 9
1099: NOT
1100: PUSH
1101: LD_VAR 0 10
1105: NOT
1106: OR
1107: IFFALSE 1111
// exit ;
1109: GO 2195
// weapon := 0 ;
1111: LD_ADDR_VAR 0 17
1115: PUSH
1116: LD_INT 0
1118: ST_TO_ADDR
// fac_list := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
1119: LD_ADDR_VAR 0 16
1123: PUSH
1124: LD_INT 42
1126: PUSH
1127: LD_INT 43
1129: PUSH
1130: LD_INT 44
1132: PUSH
1133: LD_INT 46
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: LIST
1140: LIST
1141: ST_TO_ADDR
// if not fac_list then
1142: LD_VAR 0 16
1146: NOT
1147: IFFALSE 1151
// exit ;
1149: GO 2195
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
1151: LD_ADDR_VAR 0 4
1155: PUSH
1156: LD_INT 4
1158: PUSH
1159: LD_INT 5
1161: PUSH
1162: LD_INT 9
1164: PUSH
1165: LD_INT 10
1167: PUSH
1168: LD_INT 6
1170: PUSH
1171: LD_INT 7
1173: PUSH
1174: LD_INT 11
1176: PUSH
1177: EMPTY
1178: LIST
1179: LIST
1180: LIST
1181: LIST
1182: LIST
1183: LIST
1184: LIST
1185: PUSH
1186: LD_INT 27
1188: PUSH
1189: LD_INT 28
1191: PUSH
1192: LD_INT 26
1194: PUSH
1195: LD_INT 30
1197: PUSH
1198: EMPTY
1199: LIST
1200: LIST
1201: LIST
1202: LIST
1203: PUSH
1204: LD_INT 43
1206: PUSH
1207: LD_INT 44
1209: PUSH
1210: LD_INT 46
1212: PUSH
1213: LD_INT 45
1215: PUSH
1216: LD_INT 47
1218: PUSH
1219: LD_INT 49
1221: PUSH
1222: EMPTY
1223: LIST
1224: LIST
1225: LIST
1226: LIST
1227: LIST
1228: LIST
1229: PUSH
1230: EMPTY
1231: LIST
1232: LIST
1233: LIST
1234: PUSH
1235: LD_VAR 0 11
1239: ARRAY
1240: ST_TO_ADDR
// for i in list do
1241: LD_ADDR_VAR 0 7
1245: PUSH
1246: LD_VAR 0 4
1250: PUSH
1251: FOR_IN
1252: IFFALSE 1285
// if not i in fac_list then
1254: LD_VAR 0 7
1258: PUSH
1259: LD_VAR 0 16
1263: IN
1264: NOT
1265: IFFALSE 1283
// list := list diff i ;
1267: LD_ADDR_VAR 0 4
1271: PUSH
1272: LD_VAR 0 4
1276: PUSH
1277: LD_VAR 0 7
1281: DIFF
1282: ST_TO_ADDR
1283: GO 1251
1285: POP
1286: POP
// if not list then
1287: LD_VAR 0 4
1291: NOT
1292: IFFALSE 1296
// exit ;
1294: GO 2195
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
1296: LD_VAR 0 11
1300: PUSH
1301: LD_INT 3
1303: EQUAL
1304: PUSH
1305: LD_INT 49
1307: PUSH
1308: LD_VAR 0 4
1312: IN
1313: AND
1314: PUSH
1315: LD_INT 31
1317: PPUSH
1318: LD_VAR 0 15
1322: PPUSH
1323: CALL_OW 321
1327: PUSH
1328: LD_INT 2
1330: EQUAL
1331: AND
1332: IFFALSE 1392
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
1334: LD_INT 22
1336: PUSH
1337: LD_VAR 0 15
1341: PUSH
1342: EMPTY
1343: LIST
1344: LIST
1345: PUSH
1346: LD_INT 35
1348: PUSH
1349: LD_INT 49
1351: PUSH
1352: EMPTY
1353: LIST
1354: LIST
1355: PUSH
1356: LD_INT 91
1358: PUSH
1359: LD_VAR 0 1
1363: PUSH
1364: LD_INT 10
1366: PUSH
1367: EMPTY
1368: LIST
1369: LIST
1370: LIST
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: LIST
1376: PPUSH
1377: CALL_OW 69
1381: NOT
1382: IFFALSE 1392
// weapon := ru_time_lapser ;
1384: LD_ADDR_VAR 0 17
1388: PUSH
1389: LD_INT 49
1391: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
1392: LD_VAR 0 11
1396: PUSH
1397: LD_INT 1
1399: PUSH
1400: LD_INT 2
1402: PUSH
1403: EMPTY
1404: LIST
1405: LIST
1406: IN
1407: PUSH
1408: LD_INT 11
1410: PUSH
1411: LD_VAR 0 4
1415: IN
1416: PUSH
1417: LD_INT 30
1419: PUSH
1420: LD_VAR 0 4
1424: IN
1425: OR
1426: AND
1427: PUSH
1428: LD_INT 6
1430: PPUSH
1431: LD_VAR 0 15
1435: PPUSH
1436: CALL_OW 321
1440: PUSH
1441: LD_INT 2
1443: EQUAL
1444: AND
1445: IFFALSE 1610
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
1447: LD_INT 22
1449: PUSH
1450: LD_VAR 0 15
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: PUSH
1459: LD_INT 2
1461: PUSH
1462: LD_INT 35
1464: PUSH
1465: LD_INT 11
1467: PUSH
1468: EMPTY
1469: LIST
1470: LIST
1471: PUSH
1472: LD_INT 35
1474: PUSH
1475: LD_INT 30
1477: PUSH
1478: EMPTY
1479: LIST
1480: LIST
1481: PUSH
1482: EMPTY
1483: LIST
1484: LIST
1485: LIST
1486: PUSH
1487: LD_INT 91
1489: PUSH
1490: LD_VAR 0 1
1494: PUSH
1495: LD_INT 18
1497: PUSH
1498: EMPTY
1499: LIST
1500: LIST
1501: LIST
1502: PUSH
1503: EMPTY
1504: LIST
1505: LIST
1506: LIST
1507: PPUSH
1508: CALL_OW 69
1512: NOT
1513: PUSH
1514: LD_INT 22
1516: PUSH
1517: LD_VAR 0 15
1521: PUSH
1522: EMPTY
1523: LIST
1524: LIST
1525: PUSH
1526: LD_INT 2
1528: PUSH
1529: LD_INT 30
1531: PUSH
1532: LD_INT 32
1534: PUSH
1535: EMPTY
1536: LIST
1537: LIST
1538: PUSH
1539: LD_INT 30
1541: PUSH
1542: LD_INT 33
1544: PUSH
1545: EMPTY
1546: LIST
1547: LIST
1548: PUSH
1549: EMPTY
1550: LIST
1551: LIST
1552: LIST
1553: PUSH
1554: LD_INT 91
1556: PUSH
1557: LD_VAR 0 1
1561: PUSH
1562: LD_INT 12
1564: PUSH
1565: EMPTY
1566: LIST
1567: LIST
1568: LIST
1569: PUSH
1570: EMPTY
1571: LIST
1572: LIST
1573: LIST
1574: PUSH
1575: EMPTY
1576: LIST
1577: PPUSH
1578: CALL_OW 69
1582: PUSH
1583: LD_INT 2
1585: GREATER
1586: AND
1587: IFFALSE 1610
// weapon := [ us_radar , ar_radar ] [ nat ] ;
1589: LD_ADDR_VAR 0 17
1593: PUSH
1594: LD_INT 11
1596: PUSH
1597: LD_INT 30
1599: PUSH
1600: EMPTY
1601: LIST
1602: LIST
1603: PUSH
1604: LD_VAR 0 11
1608: ARRAY
1609: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
1610: LD_VAR 0 17
1614: NOT
1615: PUSH
1616: LD_INT 40
1618: PPUSH
1619: LD_VAR 0 15
1623: PPUSH
1624: CALL_OW 321
1628: PUSH
1629: LD_INT 2
1631: EQUAL
1632: AND
1633: PUSH
1634: LD_INT 7
1636: PUSH
1637: LD_VAR 0 4
1641: IN
1642: PUSH
1643: LD_INT 28
1645: PUSH
1646: LD_VAR 0 4
1650: IN
1651: OR
1652: PUSH
1653: LD_INT 45
1655: PUSH
1656: LD_VAR 0 4
1660: IN
1661: OR
1662: AND
1663: IFFALSE 1917
// begin hex := GetHexInfo ( x , y ) ;
1665: LD_ADDR_VAR 0 3
1669: PUSH
1670: LD_VAR 0 9
1674: PPUSH
1675: LD_VAR 0 10
1679: PPUSH
1680: CALL_OW 546
1684: ST_TO_ADDR
// if hex [ 1 ] then
1685: LD_VAR 0 3
1689: PUSH
1690: LD_INT 1
1692: ARRAY
1693: IFFALSE 1697
// exit ;
1695: GO 2195
// height := hex [ 2 ] ;
1697: LD_ADDR_VAR 0 14
1701: PUSH
1702: LD_VAR 0 3
1706: PUSH
1707: LD_INT 2
1709: ARRAY
1710: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
1711: LD_ADDR_VAR 0 13
1715: PUSH
1716: LD_INT 0
1718: PUSH
1719: LD_INT 2
1721: PUSH
1722: LD_INT 3
1724: PUSH
1725: LD_INT 5
1727: PUSH
1728: EMPTY
1729: LIST
1730: LIST
1731: LIST
1732: LIST
1733: ST_TO_ADDR
// for i in tmp do
1734: LD_ADDR_VAR 0 7
1738: PUSH
1739: LD_VAR 0 13
1743: PUSH
1744: FOR_IN
1745: IFFALSE 1915
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
1747: LD_ADDR_VAR 0 8
1751: PUSH
1752: LD_VAR 0 9
1756: PPUSH
1757: LD_VAR 0 7
1761: PPUSH
1762: LD_INT 5
1764: PPUSH
1765: CALL_OW 272
1769: PUSH
1770: LD_VAR 0 10
1774: PPUSH
1775: LD_VAR 0 7
1779: PPUSH
1780: LD_INT 5
1782: PPUSH
1783: CALL_OW 273
1787: PUSH
1788: EMPTY
1789: LIST
1790: LIST
1791: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
1792: LD_VAR 0 8
1796: PUSH
1797: LD_INT 1
1799: ARRAY
1800: PPUSH
1801: LD_VAR 0 8
1805: PUSH
1806: LD_INT 2
1808: ARRAY
1809: PPUSH
1810: CALL_OW 488
1814: IFFALSE 1913
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
1816: LD_ADDR_VAR 0 3
1820: PUSH
1821: LD_VAR 0 8
1825: PUSH
1826: LD_INT 1
1828: ARRAY
1829: PPUSH
1830: LD_VAR 0 8
1834: PUSH
1835: LD_INT 2
1837: ARRAY
1838: PPUSH
1839: CALL_OW 546
1843: ST_TO_ADDR
// if hex [ 1 ] then
1844: LD_VAR 0 3
1848: PUSH
1849: LD_INT 1
1851: ARRAY
1852: IFFALSE 1856
// continue ;
1854: GO 1744
// h := hex [ 2 ] ;
1856: LD_ADDR_VAR 0 12
1860: PUSH
1861: LD_VAR 0 3
1865: PUSH
1866: LD_INT 2
1868: ARRAY
1869: ST_TO_ADDR
// if h + 7 < height then
1870: LD_VAR 0 12
1874: PUSH
1875: LD_INT 7
1877: PLUS
1878: PUSH
1879: LD_VAR 0 14
1883: LESS
1884: IFFALSE 1913
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
1886: LD_ADDR_VAR 0 17
1890: PUSH
1891: LD_INT 7
1893: PUSH
1894: LD_INT 28
1896: PUSH
1897: LD_INT 45
1899: PUSH
1900: EMPTY
1901: LIST
1902: LIST
1903: LIST
1904: PUSH
1905: LD_VAR 0 11
1909: ARRAY
1910: ST_TO_ADDR
// break ;
1911: GO 1915
// end ; end ; end ;
1913: GO 1744
1915: POP
1916: POP
// end ; if not weapon then
1917: LD_VAR 0 17
1921: NOT
1922: IFFALSE 2077
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
1924: LD_ADDR_VAR 0 4
1928: PUSH
1929: LD_VAR 0 4
1933: PUSH
1934: LD_INT 11
1936: PUSH
1937: LD_INT 30
1939: PUSH
1940: LD_INT 49
1942: PUSH
1943: EMPTY
1944: LIST
1945: LIST
1946: LIST
1947: DIFF
1948: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , tower , 6 ] , [ f_not , [ f_bweapon , 0 ] ] ] ) ;
1949: LD_ADDR_VAR 0 13
1953: PUSH
1954: LD_INT 22
1956: PUSH
1957: LD_VAR 0 15
1961: PUSH
1962: EMPTY
1963: LIST
1964: LIST
1965: PUSH
1966: LD_INT 91
1968: PUSH
1969: LD_VAR 0 1
1973: PUSH
1974: LD_INT 6
1976: PUSH
1977: EMPTY
1978: LIST
1979: LIST
1980: LIST
1981: PUSH
1982: LD_INT 3
1984: PUSH
1985: LD_INT 35
1987: PUSH
1988: LD_INT 0
1990: PUSH
1991: EMPTY
1992: LIST
1993: LIST
1994: PUSH
1995: EMPTY
1996: LIST
1997: LIST
1998: PUSH
1999: EMPTY
2000: LIST
2001: LIST
2002: LIST
2003: PPUSH
2004: CALL_OW 69
2008: ST_TO_ADDR
// for i in tmp do
2009: LD_ADDR_VAR 0 7
2013: PUSH
2014: LD_VAR 0 13
2018: PUSH
2019: FOR_IN
2020: IFFALSE 2045
// list := list diff GetBWeapon ( i ) ;
2022: LD_ADDR_VAR 0 4
2026: PUSH
2027: LD_VAR 0 4
2031: PUSH
2032: LD_VAR 0 7
2036: PPUSH
2037: CALL_OW 269
2041: DIFF
2042: ST_TO_ADDR
2043: GO 2019
2045: POP
2046: POP
// if list then
2047: LD_VAR 0 4
2051: IFFALSE 2077
// weapon := list [ rand ( 1 , list ) ] ;
2053: LD_ADDR_VAR 0 17
2057: PUSH
2058: LD_VAR 0 4
2062: PUSH
2063: LD_INT 1
2065: PPUSH
2066: LD_VAR 0 4
2070: PPUSH
2071: CALL_OW 12
2075: ARRAY
2076: ST_TO_ADDR
// end ; if weapon then
2077: LD_VAR 0 17
2081: IFFALSE 2195
// begin tmp := CostOfWeapon ( weapon ) ;
2083: LD_ADDR_VAR 0 13
2087: PUSH
2088: LD_VAR 0 17
2092: PPUSH
2093: CALL_OW 451
2097: ST_TO_ADDR
// j := GetBase ( tower ) ;
2098: LD_ADDR_VAR 0 8
2102: PUSH
2103: LD_VAR 0 1
2107: PPUSH
2108: CALL_OW 274
2112: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
2113: LD_VAR 0 8
2117: PPUSH
2118: LD_INT 1
2120: PPUSH
2121: CALL_OW 275
2125: PUSH
2126: LD_VAR 0 13
2130: PUSH
2131: LD_INT 1
2133: ARRAY
2134: GREATEREQUAL
2135: PUSH
2136: LD_VAR 0 8
2140: PPUSH
2141: LD_INT 2
2143: PPUSH
2144: CALL_OW 275
2148: PUSH
2149: LD_VAR 0 13
2153: PUSH
2154: LD_INT 2
2156: ARRAY
2157: GREATEREQUAL
2158: AND
2159: PUSH
2160: LD_VAR 0 8
2164: PPUSH
2165: LD_INT 3
2167: PPUSH
2168: CALL_OW 275
2172: PUSH
2173: LD_VAR 0 13
2177: PUSH
2178: LD_INT 3
2180: ARRAY
2181: GREATEREQUAL
2182: AND
2183: IFFALSE 2195
// result := weapon ;
2185: LD_ADDR_VAR 0 2
2189: PUSH
2190: LD_VAR 0 17
2194: ST_TO_ADDR
// end ; end ;
2195: LD_VAR 0 2
2199: RET
// export function GoToAnotherTower ( un , b , x , y ) ; var i , filter , t , side ; begin
2200: LD_INT 0
2202: PPUSH
2203: PPUSH
2204: PPUSH
2205: PPUSH
2206: PPUSH
// if not un or not IsOk ( un ) then
2207: LD_VAR 0 1
2211: NOT
2212: PUSH
2213: LD_VAR 0 1
2217: PPUSH
2218: CALL_OW 302
2222: NOT
2223: OR
2224: IFFALSE 2228
// exit ;
2226: GO 2668
// side := GetSide ( un ) ;
2228: LD_ADDR_VAR 0 9
2232: PUSH
2233: LD_VAR 0 1
2237: PPUSH
2238: CALL_OW 255
2242: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_ok ] , [ f_empty ] ] ) diff b ;
2243: LD_ADDR_VAR 0 7
2247: PUSH
2248: LD_INT 22
2250: PUSH
2251: LD_VAR 0 9
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: PUSH
2260: LD_INT 30
2262: PUSH
2263: LD_INT 32
2265: PUSH
2266: EMPTY
2267: LIST
2268: LIST
2269: PUSH
2270: LD_INT 50
2272: PUSH
2273: EMPTY
2274: LIST
2275: PUSH
2276: LD_INT 58
2278: PUSH
2279: EMPTY
2280: LIST
2281: PUSH
2282: EMPTY
2283: LIST
2284: LIST
2285: LIST
2286: LIST
2287: PPUSH
2288: CALL_OW 69
2292: PUSH
2293: LD_VAR 0 2
2297: DIFF
2298: ST_TO_ADDR
// if not filter then
2299: LD_VAR 0 7
2303: NOT
2304: IFFALSE 2533
// begin filter := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_barracks ] ] ) ;
2306: LD_ADDR_VAR 0 7
2310: PUSH
2311: LD_INT 22
2313: PUSH
2314: LD_VAR 0 9
2318: PUSH
2319: EMPTY
2320: LIST
2321: LIST
2322: PUSH
2323: LD_INT 30
2325: PUSH
2326: LD_INT 5
2328: PUSH
2329: EMPTY
2330: LIST
2331: LIST
2332: PUSH
2333: EMPTY
2334: LIST
2335: LIST
2336: PPUSH
2337: CALL_OW 69
2341: ST_TO_ADDR
// if debug then
2342: LD_EXP 1
2346: IFFALSE 2365
// display_strings := [ filter , 1 ] ;
2348: LD_ADDR_OWVAR 47
2352: PUSH
2353: LD_VAR 0 7
2357: PUSH
2358: LD_STRING 1
2360: PUSH
2361: EMPTY
2362: LIST
2363: LIST
2364: ST_TO_ADDR
// if not filter then
2365: LD_VAR 0 7
2369: NOT
2370: IFFALSE 2393
// begin ComMoveXY ( un , x , y ) ;
2372: LD_VAR 0 1
2376: PPUSH
2377: LD_VAR 0 3
2381: PPUSH
2382: LD_VAR 0 4
2386: PPUSH
2387: CALL_OW 111
// exit ;
2391: GO 2668
// end ; repeat t := NearestUnitToUnit ( filter , un ) ;
2393: LD_ADDR_VAR 0 8
2397: PUSH
2398: LD_VAR 0 7
2402: PPUSH
2403: LD_VAR 0 1
2407: PPUSH
2408: CALL_OW 74
2412: ST_TO_ADDR
// if UnitsInside ( t ) = 6 then
2413: LD_VAR 0 8
2417: PPUSH
2418: CALL_OW 313
2422: PUSH
2423: LD_INT 6
2425: EQUAL
2426: IFFALSE 2446
// filter := filter diff t else
2428: LD_ADDR_VAR 0 7
2432: PUSH
2433: LD_VAR 0 7
2437: PUSH
2438: LD_VAR 0 8
2442: DIFF
2443: ST_TO_ADDR
2444: GO 2448
// break ;
2446: GO 2470
// until UnitsInside ( t ) < 6 or not filter ;
2448: LD_VAR 0 8
2452: PPUSH
2453: CALL_OW 313
2457: PUSH
2458: LD_INT 6
2460: LESS
2461: PUSH
2462: LD_VAR 0 7
2466: NOT
2467: OR
2468: IFFALSE 2393
// display_strings := [ filter , t ] ;
2470: LD_ADDR_OWVAR 47
2474: PUSH
2475: LD_VAR 0 7
2479: PUSH
2480: LD_VAR 0 8
2484: PUSH
2485: EMPTY
2486: LIST
2487: LIST
2488: ST_TO_ADDR
// if not filter then
2489: LD_VAR 0 7
2493: NOT
2494: IFFALSE 2517
// ComMoveXY ( un , x , y ) else
2496: LD_VAR 0 1
2500: PPUSH
2501: LD_VAR 0 3
2505: PPUSH
2506: LD_VAR 0 4
2510: PPUSH
2511: CALL_OW 111
2515: GO 2531
// ComEnterUnit ( un , t ) ;
2517: LD_VAR 0 1
2521: PPUSH
2522: LD_VAR 0 8
2526: PPUSH
2527: CALL_OW 120
// end else
2531: GO 2668
// begin repeat t := NearestUnitToUnit ( filter , un ) ;
2533: LD_ADDR_VAR 0 8
2537: PUSH
2538: LD_VAR 0 7
2542: PPUSH
2543: LD_VAR 0 1
2547: PPUSH
2548: CALL_OW 74
2552: ST_TO_ADDR
// if ( GetTag ( t ) = 7 ) then
2553: LD_VAR 0 8
2557: PPUSH
2558: CALL_OW 110
2562: PUSH
2563: LD_INT 7
2565: EQUAL
2566: IFFALSE 2584
// filter := filter diff t ;
2568: LD_ADDR_VAR 0 7
2572: PUSH
2573: LD_VAR 0 7
2577: PUSH
2578: LD_VAR 0 8
2582: DIFF
2583: ST_TO_ADDR
// until GetTag ( t ) <> 7 or not filter ;
2584: LD_VAR 0 8
2588: PPUSH
2589: CALL_OW 110
2593: PUSH
2594: LD_INT 7
2596: NONEQUAL
2597: PUSH
2598: LD_VAR 0 7
2602: NOT
2603: OR
2604: IFFALSE 2533
// if GetTag ( t ) <> 7 then
2606: LD_VAR 0 8
2610: PPUSH
2611: CALL_OW 110
2615: PUSH
2616: LD_INT 7
2618: NONEQUAL
2619: IFFALSE 2649
// begin SetTag ( t , 7 ) ;
2621: LD_VAR 0 8
2625: PPUSH
2626: LD_INT 7
2628: PPUSH
2629: CALL_OW 109
// ComEnterUnit ( un , t ) ;
2633: LD_VAR 0 1
2637: PPUSH
2638: LD_VAR 0 8
2642: PPUSH
2643: CALL_OW 120
// end else
2647: GO 2668
// ComMoveXY ( un , x , y ) ;
2649: LD_VAR 0 1
2653: PPUSH
2654: LD_VAR 0 3
2658: PPUSH
2659: LD_VAR 0 4
2663: PPUSH
2664: CALL_OW 111
// end ; end ;
2668: LD_VAR 0 5
2672: RET
// export function BaseNeedEnergy ( base ) ; var i , tmp ; begin
2673: LD_INT 0
2675: PPUSH
2676: PPUSH
2677: PPUSH
// if not base then
2678: LD_VAR 0 1
2682: NOT
2683: IFFALSE 2687
// exit ;
2685: GO 2745
// tmp := GetEnergy ( GetBase ( base ) ) ;
2687: LD_ADDR_VAR 0 4
2691: PUSH
2692: LD_VAR 0 1
2696: PPUSH
2697: CALL_OW 274
2701: PPUSH
2702: CALL_OW 278
2706: ST_TO_ADDR
// if tmp [ 1 ] > tmp [ 4 ] then
2707: LD_VAR 0 4
2711: PUSH
2712: LD_INT 1
2714: ARRAY
2715: PUSH
2716: LD_VAR 0 4
2720: PUSH
2721: LD_INT 4
2723: ARRAY
2724: GREATER
2725: IFFALSE 2737
// result := true else
2727: LD_ADDR_VAR 0 2
2731: PUSH
2732: LD_INT 1
2734: ST_TO_ADDR
2735: GO 2745
// result := false ;
2737: LD_ADDR_VAR 0 2
2741: PUSH
2742: LD_INT 0
2744: ST_TO_ADDR
// end ;
2745: LD_VAR 0 2
2749: RET
// export function FilterPeople ( side ) ; begin
2750: LD_INT 0
2752: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) ;
2753: LD_ADDR_VAR 0 2
2757: PUSH
2758: LD_INT 22
2760: PUSH
2761: LD_VAR 0 1
2765: PUSH
2766: EMPTY
2767: LIST
2768: LIST
2769: PUSH
2770: LD_INT 21
2772: PUSH
2773: LD_INT 1
2775: PUSH
2776: EMPTY
2777: LIST
2778: LIST
2779: PUSH
2780: EMPTY
2781: LIST
2782: LIST
2783: PPUSH
2784: CALL_OW 69
2788: ST_TO_ADDR
// end ;
2789: LD_VAR 0 2
2793: RET
// export function FilterDrivers ( side ) ; begin
2794: LD_INT 0
2796: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_outside ] ] ] ) ;
2797: LD_ADDR_VAR 0 2
2801: PUSH
2802: LD_INT 22
2804: PUSH
2805: LD_VAR 0 1
2809: PUSH
2810: EMPTY
2811: LIST
2812: LIST
2813: PUSH
2814: LD_INT 3
2816: PUSH
2817: LD_INT 56
2819: PUSH
2820: EMPTY
2821: LIST
2822: PUSH
2823: EMPTY
2824: LIST
2825: LIST
2826: PUSH
2827: EMPTY
2828: LIST
2829: LIST
2830: PPUSH
2831: CALL_OW 69
2835: ST_TO_ADDR
// end ;
2836: LD_VAR 0 2
2840: RET
// export function FilterPeopleArea ( side , area ) ; begin
2841: LD_INT 0
2843: PPUSH
// result := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
2844: LD_ADDR_VAR 0 3
2848: PUSH
2849: LD_VAR 0 2
2853: PPUSH
2854: LD_INT 22
2856: PUSH
2857: LD_INT 1
2859: PUSH
2860: EMPTY
2861: LIST
2862: LIST
2863: PUSH
2864: LD_INT 21
2866: PUSH
2867: LD_INT 1
2869: PUSH
2870: EMPTY
2871: LIST
2872: LIST
2873: PUSH
2874: EMPTY
2875: LIST
2876: LIST
2877: PPUSH
2878: CALL_OW 70
2882: ST_TO_ADDR
// end ;
2883: LD_VAR 0 3
2887: RET
// export function FilterDriversArea ( side , area ) ; var i , tmp ; begin
2888: LD_INT 0
2890: PPUSH
2891: PPUSH
2892: PPUSH
// tmp := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
2893: LD_ADDR_VAR 0 5
2897: PUSH
2898: LD_VAR 0 2
2902: PPUSH
2903: LD_INT 22
2905: PUSH
2906: LD_INT 1
2908: PUSH
2909: EMPTY
2910: LIST
2911: LIST
2912: PUSH
2913: LD_INT 21
2915: PUSH
2916: LD_INT 2
2918: PUSH
2919: EMPTY
2920: LIST
2921: LIST
2922: PUSH
2923: LD_INT 3
2925: PUSH
2926: LD_INT 58
2928: PUSH
2929: EMPTY
2930: LIST
2931: PUSH
2932: EMPTY
2933: LIST
2934: LIST
2935: PUSH
2936: EMPTY
2937: LIST
2938: LIST
2939: LIST
2940: PPUSH
2941: CALL_OW 70
2945: ST_TO_ADDR
// result := [ ] ;
2946: LD_ADDR_VAR 0 3
2950: PUSH
2951: EMPTY
2952: ST_TO_ADDR
// if not tmp then
2953: LD_VAR 0 5
2957: NOT
2958: IFFALSE 2962
// exit ;
2960: GO 3014
// for i in tmp do
2962: LD_ADDR_VAR 0 4
2966: PUSH
2967: LD_VAR 0 5
2971: PUSH
2972: FOR_IN
2973: IFFALSE 2998
// result := result union IsDrivenBy ( i ) ;
2975: LD_ADDR_VAR 0 3
2979: PUSH
2980: LD_VAR 0 3
2984: PUSH
2985: LD_VAR 0 4
2989: PPUSH
2990: CALL_OW 311
2994: UNION
2995: ST_TO_ADDR
2996: GO 2972
2998: POP
2999: POP
// result := result diff 0 ;
3000: LD_ADDR_VAR 0 3
3004: PUSH
3005: LD_VAR 0 3
3009: PUSH
3010: LD_INT 0
3012: DIFF
3013: ST_TO_ADDR
// end ;
3014: LD_VAR 0 3
3018: RET
// export function FilterBuildings ( side ) ; begin
3019: LD_INT 0
3021: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
3022: LD_ADDR_VAR 0 2
3026: PUSH
3027: LD_INT 22
3029: PUSH
3030: LD_VAR 0 1
3034: PUSH
3035: EMPTY
3036: LIST
3037: LIST
3038: PUSH
3039: LD_INT 21
3041: PUSH
3042: LD_INT 3
3044: PUSH
3045: EMPTY
3046: LIST
3047: LIST
3048: PUSH
3049: EMPTY
3050: LIST
3051: LIST
3052: PPUSH
3053: CALL_OW 69
3057: ST_TO_ADDR
// end ;
3058: LD_VAR 0 2
3062: RET
// export function PrepareNature ; var i , animal , nat_area ; begin
3063: LD_INT 0
3065: PPUSH
3066: PPUSH
3067: PPUSH
3068: PPUSH
// uc_side = 0 ;
3069: LD_ADDR_OWVAR 20
3073: PUSH
3074: LD_INT 0
3076: ST_TO_ADDR
// uc_nation = 0 ;
3077: LD_ADDR_OWVAR 21
3081: PUSH
3082: LD_INT 0
3084: ST_TO_ADDR
// nat_area := wildArea ;
3085: LD_ADDR_VAR 0 4
3089: PUSH
3090: LD_INT 3
3092: ST_TO_ADDR
// InitHc ;
3093: CALL_OW 19
// for i = 1 to 4 do
3097: LD_ADDR_VAR 0 2
3101: PUSH
3102: DOUBLE
3103: LD_INT 1
3105: DEC
3106: ST_TO_ADDR
3107: LD_INT 4
3109: PUSH
3110: FOR_TO
3111: IFFALSE 3166
// begin hc_class = 18 ;
3113: LD_ADDR_OWVAR 28
3117: PUSH
3118: LD_INT 18
3120: ST_TO_ADDR
// hc_gallery =  ;
3121: LD_ADDR_OWVAR 33
3125: PUSH
3126: LD_STRING 
3128: ST_TO_ADDR
// hc_face_number = 1 ;
3129: LD_ADDR_OWVAR 34
3133: PUSH
3134: LD_INT 1
3136: ST_TO_ADDR
// animal := CreateHuman ;
3137: LD_ADDR_VAR 0 3
3141: PUSH
3142: CALL_OW 44
3146: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
3147: LD_VAR 0 3
3151: PPUSH
3152: LD_VAR 0 4
3156: PPUSH
3157: LD_INT 0
3159: PPUSH
3160: CALL_OW 49
// end ;
3164: GO 3110
3166: POP
3167: POP
// for i = 1 to 6 do
3168: LD_ADDR_VAR 0 2
3172: PUSH
3173: DOUBLE
3174: LD_INT 1
3176: DEC
3177: ST_TO_ADDR
3178: LD_INT 6
3180: PUSH
3181: FOR_TO
3182: IFFALSE 3253
// begin hc_class = class_tiger ;
3184: LD_ADDR_OWVAR 28
3188: PUSH
3189: LD_INT 14
3191: ST_TO_ADDR
// hc_gallery =  ;
3192: LD_ADDR_OWVAR 33
3196: PUSH
3197: LD_STRING 
3199: ST_TO_ADDR
// hc_agressivity = Rand ( 0 , 10 ) ;
3200: LD_ADDR_OWVAR 35
3204: PUSH
3205: LD_INT 0
3207: PPUSH
3208: LD_INT 10
3210: PPUSH
3211: CALL_OW 12
3215: ST_TO_ADDR
// hc_face_number = 3 ;
3216: LD_ADDR_OWVAR 34
3220: PUSH
3221: LD_INT 3
3223: ST_TO_ADDR
// animal := CreateHuman ;
3224: LD_ADDR_VAR 0 3
3228: PUSH
3229: CALL_OW 44
3233: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
3234: LD_VAR 0 3
3238: PPUSH
3239: LD_VAR 0 4
3243: PPUSH
3244: LD_INT 0
3246: PPUSH
3247: CALL_OW 49
// end ;
3251: GO 3181
3253: POP
3254: POP
// for i = 1 to 2 do
3255: LD_ADDR_VAR 0 2
3259: PUSH
3260: DOUBLE
3261: LD_INT 1
3263: DEC
3264: ST_TO_ADDR
3265: LD_INT 2
3267: PUSH
3268: FOR_TO
3269: IFFALSE 3332
// begin hc_class = 21 ;
3271: LD_ADDR_OWVAR 28
3275: PUSH
3276: LD_INT 21
3278: ST_TO_ADDR
// hc_gallery =  ;
3279: LD_ADDR_OWVAR 33
3283: PUSH
3284: LD_STRING 
3286: ST_TO_ADDR
// hc_agressivity = 0 ;
3287: LD_ADDR_OWVAR 35
3291: PUSH
3292: LD_INT 0
3294: ST_TO_ADDR
// hc_face_number = 5 ;
3295: LD_ADDR_OWVAR 34
3299: PUSH
3300: LD_INT 5
3302: ST_TO_ADDR
// animal := CreateHuman ;
3303: LD_ADDR_VAR 0 3
3307: PUSH
3308: CALL_OW 44
3312: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
3313: LD_VAR 0 3
3317: PPUSH
3318: LD_VAR 0 4
3322: PPUSH
3323: LD_INT 0
3325: PPUSH
3326: CALL_OW 49
// end ;
3330: GO 3268
3332: POP
3333: POP
// for i = 1 to 6 do
3334: LD_ADDR_VAR 0 2
3338: PUSH
3339: DOUBLE
3340: LD_INT 1
3342: DEC
3343: ST_TO_ADDR
3344: LD_INT 6
3346: PUSH
3347: FOR_TO
3348: IFFALSE 3403
// begin hc_class = 13 ;
3350: LD_ADDR_OWVAR 28
3354: PUSH
3355: LD_INT 13
3357: ST_TO_ADDR
// hc_gallery =  ;
3358: LD_ADDR_OWVAR 33
3362: PUSH
3363: LD_STRING 
3365: ST_TO_ADDR
// hc_face_number = 4 ;
3366: LD_ADDR_OWVAR 34
3370: PUSH
3371: LD_INT 4
3373: ST_TO_ADDR
// animal := CreateHuman ;
3374: LD_ADDR_VAR 0 3
3378: PUSH
3379: CALL_OW 44
3383: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
3384: LD_VAR 0 3
3388: PPUSH
3389: LD_VAR 0 4
3393: PPUSH
3394: LD_INT 0
3396: PPUSH
3397: CALL_OW 49
// end ;
3401: GO 3347
3403: POP
3404: POP
// for i = 1 to 2 do
3405: LD_ADDR_VAR 0 2
3409: PUSH
3410: DOUBLE
3411: LD_INT 1
3413: DEC
3414: ST_TO_ADDR
3415: LD_INT 2
3417: PUSH
3418: FOR_TO
3419: IFFALSE 3478
// begin hc_class = 20 ;
3421: LD_ADDR_OWVAR 28
3425: PUSH
3426: LD_INT 20
3428: ST_TO_ADDR
// hc_gallery =  ;
3429: LD_ADDR_OWVAR 33
3433: PUSH
3434: LD_STRING 
3436: ST_TO_ADDR
// hc_face_number = 2 ;
3437: LD_ADDR_OWVAR 34
3441: PUSH
3442: LD_INT 2
3444: ST_TO_ADDR
// animal := CreateHuman ;
3445: LD_ADDR_VAR 0 3
3449: PUSH
3450: CALL_OW 44
3454: ST_TO_ADDR
// PlaceUnitXYR ( animal , 101 , 37 , 3 , false ) ;
3455: LD_VAR 0 3
3459: PPUSH
3460: LD_INT 101
3462: PPUSH
3463: LD_INT 37
3465: PPUSH
3466: LD_INT 3
3468: PPUSH
3469: LD_INT 0
3471: PPUSH
3472: CALL_OW 50
// end ;
3476: GO 3418
3478: POP
3479: POP
// for i = 1 to 1 do
3480: LD_ADDR_VAR 0 2
3484: PUSH
3485: DOUBLE
3486: LD_INT 1
3488: DEC
3489: ST_TO_ADDR
3490: LD_INT 1
3492: PUSH
3493: FOR_TO
3494: IFFALSE 3541
// begin vc_chassis := 31 ;
3496: LD_ADDR_OWVAR 37
3500: PUSH
3501: LD_INT 31
3503: ST_TO_ADDR
// vc_control := control_rider ;
3504: LD_ADDR_OWVAR 38
3508: PUSH
3509: LD_INT 4
3511: ST_TO_ADDR
// animal := CreateVehicle ;
3512: LD_ADDR_VAR 0 3
3516: PUSH
3517: CALL_OW 45
3521: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
3522: LD_VAR 0 3
3526: PPUSH
3527: LD_VAR 0 4
3531: PPUSH
3532: LD_INT 0
3534: PPUSH
3535: CALL_OW 49
// end ;
3539: GO 3493
3541: POP
3542: POP
// end ;
3543: LD_VAR 0 1
3547: RET
// export function NearbyTowerHasEnergy ( unit ) ; var i , tmp , energy ; begin
3548: LD_INT 0
3550: PPUSH
3551: PPUSH
3552: PPUSH
3553: PPUSH
// result := [ ] ;
3554: LD_ADDR_VAR 0 2
3558: PUSH
3559: EMPTY
3560: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_dist , unit , 15 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
3561: LD_ADDR_VAR 0 4
3565: PUSH
3566: LD_INT 81
3568: PUSH
3569: LD_VAR 0 1
3573: PPUSH
3574: CALL_OW 255
3578: PUSH
3579: EMPTY
3580: LIST
3581: LIST
3582: PUSH
3583: LD_INT 91
3585: PUSH
3586: LD_VAR 0 1
3590: PUSH
3591: LD_INT 15
3593: PUSH
3594: EMPTY
3595: LIST
3596: LIST
3597: LIST
3598: PUSH
3599: LD_INT 2
3601: PUSH
3602: LD_INT 30
3604: PUSH
3605: LD_INT 32
3607: PUSH
3608: EMPTY
3609: LIST
3610: LIST
3611: PUSH
3612: LD_INT 30
3614: PUSH
3615: LD_INT 33
3617: PUSH
3618: EMPTY
3619: LIST
3620: LIST
3621: PUSH
3622: EMPTY
3623: LIST
3624: LIST
3625: LIST
3626: PUSH
3627: EMPTY
3628: LIST
3629: LIST
3630: LIST
3631: PPUSH
3632: CALL_OW 69
3636: ST_TO_ADDR
// if not tmp then
3637: LD_VAR 0 4
3641: NOT
3642: IFFALSE 3646
// exit ;
3644: GO 3715
// for i in tmp do
3646: LD_ADDR_VAR 0 3
3650: PUSH
3651: LD_VAR 0 4
3655: PUSH
3656: FOR_IN
3657: IFFALSE 3713
// begin energy := GetEnergy ( GetBase ( i ) ) ;
3659: LD_ADDR_VAR 0 5
3663: PUSH
3664: LD_VAR 0 3
3668: PPUSH
3669: CALL_OW 274
3673: PPUSH
3674: CALL_OW 278
3678: ST_TO_ADDR
// if energy [ 4 ] > energy [ 1 ] then
3679: LD_VAR 0 5
3683: PUSH
3684: LD_INT 4
3686: ARRAY
3687: PUSH
3688: LD_VAR 0 5
3692: PUSH
3693: LD_INT 1
3695: ARRAY
3696: GREATER
3697: IFFALSE 3711
// begin result := i ;
3699: LD_ADDR_VAR 0 2
3703: PUSH
3704: LD_VAR 0 3
3708: ST_TO_ADDR
// break ;
3709: GO 3713
// end ; end ;
3711: GO 3656
3713: POP
3714: POP
// end ; end_of_file
3715: LD_VAR 0 2
3719: RET
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Khatam , Kikuchi , Harisson ; export function PrepareAmericans ; var i , team , others , veh , m ; begin
3720: LD_INT 0
3722: PPUSH
3723: PPUSH
3724: PPUSH
3725: PPUSH
3726: PPUSH
3727: PPUSH
// uc_side := 1 ;
3728: LD_ADDR_OWVAR 20
3732: PUSH
3733: LD_INT 1
3735: ST_TO_ADDR
// uc_nation := 1 ;
3736: LD_ADDR_OWVAR 21
3740: PUSH
3741: LD_INT 1
3743: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) ) ;
3744: LD_ADDR_EXP 9
3748: PUSH
3749: LD_STRING JMM
3751: PPUSH
3752: LD_EXP 1
3756: NOT
3757: PPUSH
3758: CALL 500 0 2
3762: ST_TO_ADDR
// team := [ JMM ] ;
3763: LD_ADDR_VAR 0 3
3767: PUSH
3768: LD_EXP 9
3772: PUSH
3773: EMPTY
3774: LIST
3775: ST_TO_ADDR
// if LoadVariable ( BrownIn07 , debug ) then
3776: LD_STRING BrownIn07
3778: PPUSH
3779: LD_EXP 1
3783: PPUSH
3784: CALL_OW 30
3788: IFFALSE 3809
// Brown := PrepareUnit ( Brown , ( not debug ) ) ;
3790: LD_ADDR_EXP 10
3794: PUSH
3795: LD_STRING Brown
3797: PPUSH
3798: LD_EXP 1
3802: NOT
3803: PPUSH
3804: CALL 500 0 2
3808: ST_TO_ADDR
// if Brown then
3809: LD_EXP 10
3813: IFFALSE 3831
// team := team ^ Brown ;
3815: LD_ADDR_VAR 0 3
3819: PUSH
3820: LD_VAR 0 3
3824: PUSH
3825: LD_EXP 10
3829: ADD
3830: ST_TO_ADDR
// if LoadVariable ( DonaldsonIn07 , debug ) then
3831: LD_STRING DonaldsonIn07
3833: PPUSH
3834: LD_EXP 1
3838: PPUSH
3839: CALL_OW 30
3843: IFFALSE 3864
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) ) ;
3845: LD_ADDR_EXP 11
3849: PUSH
3850: LD_STRING Donaldson
3852: PPUSH
3853: LD_EXP 1
3857: NOT
3858: PPUSH
3859: CALL 500 0 2
3863: ST_TO_ADDR
// if Donaldson then
3864: LD_EXP 11
3868: IFFALSE 3886
// team := team ^ Donaldson ;
3870: LD_ADDR_VAR 0 3
3874: PUSH
3875: LD_VAR 0 3
3879: PUSH
3880: LD_EXP 11
3884: ADD
3885: ST_TO_ADDR
// if LoadVariable ( BobbyIn07 , debug ) then
3886: LD_STRING BobbyIn07
3888: PPUSH
3889: LD_EXP 1
3893: PPUSH
3894: CALL_OW 30
3898: IFFALSE 3919
// Bobby := PrepareUnit ( Bobby , ( not debug ) ) ;
3900: LD_ADDR_EXP 12
3904: PUSH
3905: LD_STRING Bobby
3907: PPUSH
3908: LD_EXP 1
3912: NOT
3913: PPUSH
3914: CALL 500 0 2
3918: ST_TO_ADDR
// if Bobby then
3919: LD_EXP 12
3923: IFFALSE 3941
// team := team ^ Bobby ;
3925: LD_ADDR_VAR 0 3
3929: PUSH
3930: LD_VAR 0 3
3934: PUSH
3935: LD_EXP 12
3939: ADD
3940: ST_TO_ADDR
// if LoadVariable ( CyrusIn07 , debug ) then
3941: LD_STRING CyrusIn07
3943: PPUSH
3944: LD_EXP 1
3948: PPUSH
3949: CALL_OW 30
3953: IFFALSE 3974
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) ) ;
3955: LD_ADDR_EXP 13
3959: PUSH
3960: LD_STRING Cyrus
3962: PPUSH
3963: LD_EXP 1
3967: NOT
3968: PPUSH
3969: CALL 500 0 2
3973: ST_TO_ADDR
// if Cyrus then
3974: LD_EXP 13
3978: IFFALSE 3996
// team := team ^ Cyrus ;
3980: LD_ADDR_VAR 0 3
3984: PUSH
3985: LD_VAR 0 3
3989: PUSH
3990: LD_EXP 13
3994: ADD
3995: ST_TO_ADDR
// if LoadVariable ( LisaIn07 , debug ) then
3996: LD_STRING LisaIn07
3998: PPUSH
3999: LD_EXP 1
4003: PPUSH
4004: CALL_OW 30
4008: IFFALSE 4029
// Lisa := PrepareUnit ( Lisa , ( not debug ) ) ;
4010: LD_ADDR_EXP 14
4014: PUSH
4015: LD_STRING Lisa
4017: PPUSH
4018: LD_EXP 1
4022: NOT
4023: PPUSH
4024: CALL 500 0 2
4028: ST_TO_ADDR
// if Lisa then
4029: LD_EXP 14
4033: IFFALSE 4051
// team := team ^ Lisa ;
4035: LD_ADDR_VAR 0 3
4039: PUSH
4040: LD_VAR 0 3
4044: PUSH
4045: LD_EXP 14
4049: ADD
4050: ST_TO_ADDR
// if LoadVariable ( GladstoneIn07 , debug ) then
4051: LD_STRING GladstoneIn07
4053: PPUSH
4054: LD_EXP 1
4058: PPUSH
4059: CALL_OW 30
4063: IFFALSE 4084
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) ) ;
4065: LD_ADDR_EXP 16
4069: PUSH
4070: LD_STRING Gladstone
4072: PPUSH
4073: LD_EXP 1
4077: NOT
4078: PPUSH
4079: CALL 500 0 2
4083: ST_TO_ADDR
// if Gladstone then
4084: LD_EXP 16
4088: IFFALSE 4106
// team := team ^ Gladstone ;
4090: LD_ADDR_VAR 0 3
4094: PUSH
4095: LD_VAR 0 3
4099: PUSH
4100: LD_EXP 16
4104: ADD
4105: ST_TO_ADDR
// if LoadVariable ( KhatamIn07 , debug ) then
4106: LD_STRING KhatamIn07
4108: PPUSH
4109: LD_EXP 1
4113: PPUSH
4114: CALL_OW 30
4118: IFFALSE 4139
// Khatam := PrepareUnit ( Khatam , ( not debug ) ) ;
4120: LD_ADDR_EXP 17
4124: PUSH
4125: LD_STRING Khatam
4127: PPUSH
4128: LD_EXP 1
4132: NOT
4133: PPUSH
4134: CALL 500 0 2
4138: ST_TO_ADDR
// if Khatam then
4139: LD_EXP 17
4143: IFFALSE 4161
// team := team ^ Khatam ;
4145: LD_ADDR_VAR 0 3
4149: PUSH
4150: LD_VAR 0 3
4154: PUSH
4155: LD_EXP 17
4159: ADD
4160: ST_TO_ADDR
// others := CreateCharacterSet ( 07_others ) ;
4161: LD_ADDR_VAR 0 4
4165: PUSH
4166: LD_STRING 07_others
4168: PPUSH
4169: CALL_OW 31
4173: ST_TO_ADDR
// if others then
4174: LD_VAR 0 4
4178: IFFALSE 4196
// team := team ^ others ;
4180: LD_ADDR_VAR 0 3
4184: PUSH
4185: LD_VAR 0 3
4189: PUSH
4190: LD_VAR 0 4
4194: ADD
4195: ST_TO_ADDR
// if debug then
4196: LD_EXP 1
4200: IFFALSE 4274
// begin InitHc ;
4202: CALL_OW 19
// for i = 1 to 4 do
4206: LD_ADDR_VAR 0 2
4210: PUSH
4211: DOUBLE
4212: LD_INT 1
4214: DEC
4215: ST_TO_ADDR
4216: LD_INT 4
4218: PUSH
4219: FOR_TO
4220: IFFALSE 4272
// begin PrepareHuman ( false , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , 4 ) ;
4222: LD_INT 0
4224: PPUSH
4225: LD_INT 1
4227: PUSH
4228: LD_INT 3
4230: PUSH
4231: EMPTY
4232: LIST
4233: LIST
4234: PUSH
4235: LD_INT 1
4237: PPUSH
4238: LD_INT 2
4240: PPUSH
4241: CALL_OW 12
4245: ARRAY
4246: PPUSH
4247: LD_INT 4
4249: PPUSH
4250: CALL_OW 380
// team := team ^ CreateHuman ;
4254: LD_ADDR_VAR 0 3
4258: PUSH
4259: LD_VAR 0 3
4263: PUSH
4264: CALL_OW 44
4268: ADD
4269: ST_TO_ADDR
// end ;
4270: GO 4219
4272: POP
4273: POP
// end ; m := 0 ;
4274: LD_ADDR_VAR 0 6
4278: PUSH
4279: LD_INT 0
4281: ST_TO_ADDR
// for i in team do
4282: LD_ADDR_VAR 0 2
4286: PUSH
4287: LD_VAR 0 3
4291: PUSH
4292: FOR_IN
4293: IFFALSE 4500
// if GetClass ( i ) = 3 then
4295: LD_VAR 0 2
4299: PPUSH
4300: CALL_OW 257
4304: PUSH
4305: LD_INT 3
4307: EQUAL
4308: IFFALSE 4456
// begin m := m + 1 ;
4310: LD_ADDR_VAR 0 6
4314: PUSH
4315: LD_VAR 0 6
4319: PUSH
4320: LD_INT 1
4322: PLUS
4323: ST_TO_ADDR
// veh := PrepareTank ( 1 , 1 , [ us_medium_wheeled , us_medium_tracked , us_medium_wheeled , us_light_wheeled ] [ m mod 4 + 1 ] , engine_solar , control_manual , [ us_gatling_gun , us_double_gun , us_light_gun , us_radar ] [ m mod 4 + 1 ] , 60 ) ;
4324: LD_ADDR_VAR 0 5
4328: PUSH
4329: LD_INT 1
4331: PPUSH
4332: LD_INT 1
4334: PPUSH
4335: LD_INT 2
4337: PUSH
4338: LD_INT 3
4340: PUSH
4341: LD_INT 2
4343: PUSH
4344: LD_INT 1
4346: PUSH
4347: EMPTY
4348: LIST
4349: LIST
4350: LIST
4351: LIST
4352: PUSH
4353: LD_VAR 0 6
4357: PUSH
4358: LD_INT 4
4360: MOD
4361: PUSH
4362: LD_INT 1
4364: PLUS
4365: ARRAY
4366: PPUSH
4367: LD_INT 2
4369: PPUSH
4370: LD_INT 1
4372: PPUSH
4373: LD_INT 4
4375: PUSH
4376: LD_INT 5
4378: PUSH
4379: LD_INT 3
4381: PUSH
4382: LD_INT 11
4384: PUSH
4385: EMPTY
4386: LIST
4387: LIST
4388: LIST
4389: LIST
4390: PUSH
4391: LD_VAR 0 6
4395: PUSH
4396: LD_INT 4
4398: MOD
4399: PUSH
4400: LD_INT 1
4402: PLUS
4403: ARRAY
4404: PPUSH
4405: LD_INT 60
4407: PPUSH
4408: CALL 563 0 7
4412: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
4413: LD_VAR 0 5
4417: PPUSH
4418: LD_INT 2
4420: PPUSH
4421: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
4425: LD_VAR 0 5
4429: PPUSH
4430: LD_INT 1
4432: PPUSH
4433: LD_INT 0
4435: PPUSH
4436: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
4440: LD_VAR 0 2
4444: PPUSH
4445: LD_VAR 0 5
4449: PPUSH
4450: CALL_OW 52
// end else
4454: GO 4498
// begin if GetClass ( i ) = 2 then
4456: LD_VAR 0 2
4460: PPUSH
4461: CALL_OW 257
4465: PUSH
4466: LD_INT 2
4468: EQUAL
4469: IFFALSE 4483
// SetClass ( i , 1 ) ;
4471: LD_VAR 0 2
4475: PPUSH
4476: LD_INT 1
4478: PPUSH
4479: CALL_OW 336
// PlaceUnitArea ( i , startArea , false ) ;
4483: LD_VAR 0 2
4487: PPUSH
4488: LD_INT 1
4490: PPUSH
4491: LD_INT 0
4493: PPUSH
4494: CALL_OW 49
// end ;
4498: GO 4292
4500: POP
4501: POP
// uc_side := 4 ;
4502: LD_ADDR_OWVAR 20
4506: PUSH
4507: LD_INT 4
4509: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ) ;
4510: LD_ADDR_EXP 19
4514: PUSH
4515: LD_STRING Harisson
4517: PPUSH
4518: LD_INT 0
4520: PPUSH
4521: CALL 500 0 2
4525: ST_TO_ADDR
// PrepareScout ;
4526: CALL 4535 0 0
// end ;
4530: LD_VAR 0 1
4534: RET
// function PrepareScout ; var ape ; begin
4535: LD_INT 0
4537: PPUSH
4538: PPUSH
// uc_side := 4 ;
4539: LD_ADDR_OWVAR 20
4543: PUSH
4544: LD_INT 4
4546: ST_TO_ADDR
// uc_nation := 1 ;
4547: LD_ADDR_OWVAR 21
4551: PUSH
4552: LD_INT 1
4554: ST_TO_ADDR
// if LoadVariable ( FrankIn06 , 0 ) then
4555: LD_STRING FrankIn06
4557: PPUSH
4558: LD_INT 0
4560: PPUSH
4561: CALL_OW 30
4565: IFFALSE 4582
// Frank := CreateCharacter ( 06c_Frank ) else
4567: LD_ADDR_EXP 15
4571: PUSH
4572: LD_STRING 06c_Frank
4574: PPUSH
4575: CALL_OW 34
4579: ST_TO_ADDR
4580: GO 4622
// if LoadVariable ( FrankInDelta , 0 ) then
4582: LD_STRING FrankInDelta
4584: PPUSH
4585: LD_INT 0
4587: PPUSH
4588: CALL_OW 30
4592: IFFALSE 4609
// Frank := CreateCharacter ( 05_Frank ) else
4594: LD_ADDR_EXP 15
4598: PUSH
4599: LD_STRING 05_Frank
4601: PPUSH
4602: CALL_OW 34
4606: ST_TO_ADDR
4607: GO 4622
// Frank := CreateCharacter ( 04_Frank ) ;
4609: LD_ADDR_EXP 15
4613: PUSH
4614: LD_STRING 04_Frank
4616: PPUSH
4617: CALL_OW 34
4621: ST_TO_ADDR
// if Frank then
4622: LD_EXP 15
4626: IFFALSE 4759
// begin PlaceUnitArea ( Frank , scoutArea , false ) ;
4628: LD_EXP 15
4632: PPUSH
4633: LD_INT 2
4635: PPUSH
4636: LD_INT 0
4638: PPUSH
4639: CALL_OW 49
// SetClass ( Frank , 1 ) ;
4643: LD_EXP 15
4647: PPUSH
4648: LD_INT 1
4650: PPUSH
4651: CALL_OW 336
// uc_side := 0 ;
4655: LD_ADDR_OWVAR 20
4659: PUSH
4660: LD_INT 0
4662: ST_TO_ADDR
// uc_nation := 0 ;
4663: LD_ADDR_OWVAR 21
4667: PUSH
4668: LD_INT 0
4670: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 0 ) ;
4671: LD_INT 0
4673: PPUSH
4674: LD_INT 12
4676: PPUSH
4677: LD_INT 0
4679: PPUSH
4680: CALL_OW 380
// ape := CreateHuman ;
4684: LD_ADDR_VAR 0 2
4688: PUSH
4689: CALL_OW 44
4693: ST_TO_ADDR
// PlaceUnitXYR ( ape , GetX ( Frank ) , GetY ( Frank ) , 5 , false ) ;
4694: LD_VAR 0 2
4698: PPUSH
4699: LD_EXP 15
4703: PPUSH
4704: CALL_OW 250
4708: PPUSH
4709: LD_EXP 15
4713: PPUSH
4714: CALL_OW 251
4718: PPUSH
4719: LD_INT 5
4721: PPUSH
4722: LD_INT 0
4724: PPUSH
4725: CALL_OW 50
// ComTurnUnit ( ape , Frank ) ;
4729: LD_VAR 0 2
4733: PPUSH
4734: LD_EXP 15
4738: PPUSH
4739: CALL_OW 119
// ComTurnUnit ( Frank , ape ) ;
4743: LD_EXP 15
4747: PPUSH
4748: LD_VAR 0 2
4752: PPUSH
4753: CALL_OW 119
// exit ;
4757: GO 4799
// end ; Kikuchi := PrepareUnit ( Yamoko , false ) ;
4759: LD_ADDR_EXP 18
4763: PUSH
4764: LD_STRING Yamoko
4766: PPUSH
4767: LD_INT 0
4769: PPUSH
4770: CALL 500 0 2
4774: ST_TO_ADDR
// PlaceUnitArea ( Kikuchi , scoutArea , false ) ;
4775: LD_EXP 18
4779: PPUSH
4780: LD_INT 2
4782: PPUSH
4783: LD_INT 0
4785: PPUSH
4786: CALL_OW 49
// ComHold ( Kikuchi ) ;
4790: LD_EXP 18
4794: PPUSH
4795: CALL_OW 140
// end ; end_of_file
4799: LD_VAR 0 1
4803: RET
// export ru_rebuild_list ; export function PrepareRussians ; var i , j , r , un , skill , filter , tmp , dep_list , lab_list , fac_list , breastworks_list , bunker_list , turret_list , weapons_list , personel_counter ; begin
4804: LD_INT 0
4806: PPUSH
4807: PPUSH
4808: PPUSH
4809: PPUSH
4810: PPUSH
4811: PPUSH
4812: PPUSH
4813: PPUSH
4814: PPUSH
4815: PPUSH
4816: PPUSH
4817: PPUSH
4818: PPUSH
4819: PPUSH
4820: PPUSH
4821: PPUSH
// ru_rebuild_list := [ ] ;
4822: LD_ADDR_EXP 20
4826: PUSH
4827: EMPTY
4828: ST_TO_ADDR
// uc_side := 3 ;
4829: LD_ADDR_OWVAR 20
4833: PUSH
4834: LD_INT 3
4836: ST_TO_ADDR
// uc_nation := 3 ;
4837: LD_ADDR_OWVAR 21
4841: PUSH
4842: LD_INT 3
4844: ST_TO_ADDR
// if Difficulty > 1 then
4845: LD_OWVAR 67
4849: PUSH
4850: LD_INT 1
4852: GREATER
4853: IFFALSE 4989
// begin bc_type := b_breastwork ;
4855: LD_ADDR_OWVAR 42
4859: PUSH
4860: LD_INT 31
4862: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 78 , 74 , 2 ) ;
4863: LD_INT 78
4865: PPUSH
4866: LD_INT 74
4868: PPUSH
4869: LD_INT 2
4871: PPUSH
4872: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 171 , 193 , 4 ) ;
4876: LD_INT 171
4878: PPUSH
4879: LD_INT 193
4881: PPUSH
4882: LD_INT 4
4884: PPUSH
4885: CALL_OW 47
// bc_type := b_turret ;
4889: LD_ADDR_OWVAR 42
4893: PUSH
4894: LD_INT 33
4896: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 129 , 96 , 3 ) ;
4897: LD_INT 129
4899: PPUSH
4900: LD_INT 96
4902: PPUSH
4903: LD_INT 3
4905: PPUSH
4906: CALL_OW 47
// if Difficulty > 2 then
4910: LD_OWVAR 67
4914: PUSH
4915: LD_INT 2
4917: GREATER
4918: IFFALSE 4989
// begin RemoveUnit ( HexInfo ( 83 , 141 ) ) ;
4920: LD_INT 83
4922: PPUSH
4923: LD_INT 141
4925: PPUSH
4926: CALL_OW 428
4930: PPUSH
4931: CALL_OW 64
// RemoveUnit ( HexInfo ( 78 , 133 ) ) ;
4935: LD_INT 78
4937: PPUSH
4938: LD_INT 133
4940: PPUSH
4941: CALL_OW 428
4945: PPUSH
4946: CALL_OW 64
// CreateAndPlaceBuildingXYD ( 83 , 141 , 2 ) ;
4950: LD_INT 83
4952: PPUSH
4953: LD_INT 141
4955: PPUSH
4956: LD_INT 2
4958: PPUSH
4959: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 78 , 133 , 2 ) ;
4963: LD_INT 78
4965: PPUSH
4966: LD_INT 133
4968: PPUSH
4969: LD_INT 2
4971: PPUSH
4972: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 145 , 112 , 3 ) ;
4976: LD_INT 145
4978: PPUSH
4979: LD_INT 112
4981: PPUSH
4982: LD_INT 3
4984: PPUSH
4985: CALL_OW 47
// end ; end ; dep_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
4989: LD_ADDR_VAR 0 9
4993: PUSH
4994: LD_INT 22
4996: PUSH
4997: LD_INT 3
4999: PUSH
5000: EMPTY
5001: LIST
5002: LIST
5003: PUSH
5004: LD_INT 2
5006: PUSH
5007: LD_INT 30
5009: PUSH
5010: LD_INT 0
5012: PUSH
5013: EMPTY
5014: LIST
5015: LIST
5016: PUSH
5017: LD_INT 30
5019: PUSH
5020: LD_INT 1
5022: PUSH
5023: EMPTY
5024: LIST
5025: LIST
5026: PUSH
5027: EMPTY
5028: LIST
5029: LIST
5030: LIST
5031: PUSH
5032: EMPTY
5033: LIST
5034: LIST
5035: PPUSH
5036: CALL_OW 69
5040: ST_TO_ADDR
// lab_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
5041: LD_ADDR_VAR 0 10
5045: PUSH
5046: LD_INT 22
5048: PUSH
5049: LD_INT 3
5051: PUSH
5052: EMPTY
5053: LIST
5054: LIST
5055: PUSH
5056: LD_INT 2
5058: PUSH
5059: LD_INT 30
5061: PUSH
5062: LD_INT 6
5064: PUSH
5065: EMPTY
5066: LIST
5067: LIST
5068: PUSH
5069: LD_INT 30
5071: PUSH
5072: LD_INT 7
5074: PUSH
5075: EMPTY
5076: LIST
5077: LIST
5078: PUSH
5079: LD_INT 30
5081: PUSH
5082: LD_INT 8
5084: PUSH
5085: EMPTY
5086: LIST
5087: LIST
5088: PUSH
5089: EMPTY
5090: LIST
5091: LIST
5092: LIST
5093: LIST
5094: PUSH
5095: EMPTY
5096: LIST
5097: LIST
5098: PPUSH
5099: CALL_OW 69
5103: ST_TO_ADDR
// fac_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
5104: LD_ADDR_VAR 0 11
5108: PUSH
5109: LD_INT 22
5111: PUSH
5112: LD_INT 3
5114: PUSH
5115: EMPTY
5116: LIST
5117: LIST
5118: PUSH
5119: LD_INT 30
5121: PUSH
5122: LD_INT 3
5124: PUSH
5125: EMPTY
5126: LIST
5127: LIST
5128: PUSH
5129: EMPTY
5130: LIST
5131: LIST
5132: PPUSH
5133: CALL_OW 69
5137: ST_TO_ADDR
// breastworks_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
5138: LD_ADDR_VAR 0 12
5142: PUSH
5143: LD_INT 22
5145: PUSH
5146: LD_INT 3
5148: PUSH
5149: EMPTY
5150: LIST
5151: LIST
5152: PUSH
5153: LD_INT 30
5155: PUSH
5156: LD_INT 31
5158: PUSH
5159: EMPTY
5160: LIST
5161: LIST
5162: PUSH
5163: EMPTY
5164: LIST
5165: LIST
5166: PPUSH
5167: CALL_OW 69
5171: ST_TO_ADDR
// bunker_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
5172: LD_ADDR_VAR 0 13
5176: PUSH
5177: LD_INT 22
5179: PUSH
5180: LD_INT 3
5182: PUSH
5183: EMPTY
5184: LIST
5185: LIST
5186: PUSH
5187: LD_INT 30
5189: PUSH
5190: LD_INT 32
5192: PUSH
5193: EMPTY
5194: LIST
5195: LIST
5196: PUSH
5197: EMPTY
5198: LIST
5199: LIST
5200: PPUSH
5201: CALL_OW 69
5205: ST_TO_ADDR
// turret_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
5206: LD_ADDR_VAR 0 14
5210: PUSH
5211: LD_INT 22
5213: PUSH
5214: LD_INT 3
5216: PUSH
5217: EMPTY
5218: LIST
5219: LIST
5220: PUSH
5221: LD_INT 30
5223: PUSH
5224: LD_INT 33
5226: PUSH
5227: EMPTY
5228: LIST
5229: LIST
5230: PUSH
5231: EMPTY
5232: LIST
5233: LIST
5234: PPUSH
5235: CALL_OW 69
5239: ST_TO_ADDR
// weapons_list := [ [ ru_heavy_machine_gun , 5 ] , [ ru_gatling_gun , 50 ] , [ ru_gun , 30 ] , [ ru_heavy_gun , 15 ] ] ;
5240: LD_ADDR_VAR 0 15
5244: PUSH
5245: LD_INT 42
5247: PUSH
5248: LD_INT 5
5250: PUSH
5251: EMPTY
5252: LIST
5253: LIST
5254: PUSH
5255: LD_INT 43
5257: PUSH
5258: LD_INT 50
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: PUSH
5265: LD_INT 44
5267: PUSH
5268: LD_INT 30
5270: PUSH
5271: EMPTY
5272: LIST
5273: LIST
5274: PUSH
5275: LD_INT 46
5277: PUSH
5278: LD_INT 15
5280: PUSH
5281: EMPTY
5282: LIST
5283: LIST
5284: PUSH
5285: EMPTY
5286: LIST
5287: LIST
5288: LIST
5289: LIST
5290: ST_TO_ADDR
// personel_counter := [ 0 , 4 , 6 , 3 ] ;
5291: LD_ADDR_VAR 0 16
5295: PUSH
5296: LD_INT 0
5298: PUSH
5299: LD_INT 4
5301: PUSH
5302: LD_INT 6
5304: PUSH
5305: LD_INT 3
5307: PUSH
5308: EMPTY
5309: LIST
5310: LIST
5311: LIST
5312: LIST
5313: ST_TO_ADDR
// skill := [ 4 , 5 , 6 ] [ Difficulty ] ;
5314: LD_ADDR_VAR 0 6
5318: PUSH
5319: LD_INT 4
5321: PUSH
5322: LD_INT 5
5324: PUSH
5325: LD_INT 6
5327: PUSH
5328: EMPTY
5329: LIST
5330: LIST
5331: LIST
5332: PUSH
5333: LD_OWVAR 67
5337: ARRAY
5338: ST_TO_ADDR
// SetBName ( ru_dep_main , am_tukh ) ;
5339: LD_INT 16
5341: PPUSH
5342: LD_STRING am_tukh
5344: PPUSH
5345: CALL_OW 500
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
5349: LD_ADDR_VAR 0 2
5353: PUSH
5354: LD_INT 21
5356: PUSH
5357: LD_INT 3
5359: PUSH
5360: EMPTY
5361: LIST
5362: LIST
5363: PPUSH
5364: CALL_OW 69
5368: PUSH
5369: FOR_IN
5370: IFFALSE 5403
// SetBLevel ( i , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
5372: LD_VAR 0 2
5376: PPUSH
5377: LD_INT 4
5379: PUSH
5380: LD_INT 5
5382: PUSH
5383: LD_INT 6
5385: PUSH
5386: EMPTY
5387: LIST
5388: LIST
5389: LIST
5390: PUSH
5391: LD_OWVAR 67
5395: ARRAY
5396: PPUSH
5397: CALL_OW 241
5401: GO 5369
5403: POP
5404: POP
// for i in dep_list do
5405: LD_ADDR_VAR 0 2
5409: PUSH
5410: LD_VAR 0 9
5414: PUSH
5415: FOR_IN
5416: IFFALSE 5460
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
5418: LD_VAR 0 2
5422: PPUSH
5423: CALL_OW 274
5427: PPUSH
5428: LD_INT 1
5430: PPUSH
5431: LD_INT 1000
5433: PPUSH
5434: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
5438: LD_VAR 0 2
5442: PPUSH
5443: CALL_OW 274
5447: PPUSH
5448: LD_INT 2
5450: PPUSH
5451: LD_INT 1000
5453: PPUSH
5454: CALL_OW 277
// end ;
5458: GO 5415
5460: POP
5461: POP
// InitHc ;
5462: CALL_OW 19
// tmp := bunker_list * [ 45 , 60 , 75 ] [ Difficulty ] div 100 ;
5466: LD_ADDR_VAR 0 8
5470: PUSH
5471: LD_VAR 0 13
5475: PUSH
5476: LD_INT 45
5478: PUSH
5479: LD_INT 60
5481: PUSH
5482: LD_INT 75
5484: PUSH
5485: EMPTY
5486: LIST
5487: LIST
5488: LIST
5489: PUSH
5490: LD_OWVAR 67
5494: ARRAY
5495: MUL
5496: PUSH
5497: LD_INT 100
5499: DIV
5500: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , tmp ) ;
5501: LD_ADDR_VAR 0 16
5505: PUSH
5506: LD_VAR 0 16
5510: PPUSH
5511: LD_INT 1
5513: PPUSH
5514: LD_VAR 0 8
5518: PPUSH
5519: CALL_OW 1
5523: ST_TO_ADDR
// tmp := [ ] ;
5524: LD_ADDR_VAR 0 8
5528: PUSH
5529: EMPTY
5530: ST_TO_ADDR
// for i in bunker_list do
5531: LD_ADDR_VAR 0 2
5535: PUSH
5536: LD_VAR 0 13
5540: PUSH
5541: FOR_IN
5542: IFFALSE 5638
// if i mod 10 + 1 < tmp then
5544: LD_VAR 0 2
5548: PUSH
5549: LD_INT 10
5551: MOD
5552: PUSH
5553: LD_INT 1
5555: PLUS
5556: PUSH
5557: LD_VAR 0 8
5561: LESS
5562: IFFALSE 5607
// tmp := Insert ( tmp , i mod rand ( 3 , 5 ) + 1 , i ) else
5564: LD_ADDR_VAR 0 8
5568: PUSH
5569: LD_VAR 0 8
5573: PPUSH
5574: LD_VAR 0 2
5578: PUSH
5579: LD_INT 3
5581: PPUSH
5582: LD_INT 5
5584: PPUSH
5585: CALL_OW 12
5589: MOD
5590: PUSH
5591: LD_INT 1
5593: PLUS
5594: PPUSH
5595: LD_VAR 0 2
5599: PPUSH
5600: CALL_OW 2
5604: ST_TO_ADDR
5605: GO 5636
// tmp := Insert ( tmp , tmp + 1 , i ) ;
5607: LD_ADDR_VAR 0 8
5611: PUSH
5612: LD_VAR 0 8
5616: PPUSH
5617: LD_VAR 0 8
5621: PUSH
5622: LD_INT 1
5624: PLUS
5625: PPUSH
5626: LD_VAR 0 2
5630: PPUSH
5631: CALL_OW 2
5635: ST_TO_ADDR
5636: GO 5541
5638: POP
5639: POP
// bunker_list := tmp ;
5640: LD_ADDR_VAR 0 13
5644: PUSH
5645: LD_VAR 0 8
5649: ST_TO_ADDR
// for i in bunker_list ^ turret_list do
5650: LD_ADDR_VAR 0 2
5654: PUSH
5655: LD_VAR 0 13
5659: PUSH
5660: LD_VAR 0 14
5664: ADD
5665: PUSH
5666: FOR_IN
5667: IFFALSE 5690
// PlaceWeaponTurret ( i , GetTurretWeapon ( i ) ) ;
5669: LD_VAR 0 2
5673: PPUSH
5674: LD_VAR 0 2
5678: PPUSH
5679: CALL 977 0 1
5683: PPUSH
5684: CALL_OW 431
5688: GO 5666
5690: POP
5691: POP
// while ( personel_counter [ 1 ] ) do
5692: LD_VAR 0 16
5696: PUSH
5697: LD_INT 1
5699: ARRAY
5700: IFFALSE 5808
// begin i := rand ( 1 , bunker_list ) ;
5702: LD_ADDR_VAR 0 2
5706: PUSH
5707: LD_INT 1
5709: PPUSH
5710: LD_VAR 0 13
5714: PPUSH
5715: CALL_OW 12
5719: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5720: LD_INT 0
5722: PPUSH
5723: LD_INT 1
5725: PPUSH
5726: LD_VAR 0 6
5730: PPUSH
5731: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , bunker_list [ i ] ) ;
5735: CALL_OW 44
5739: PPUSH
5740: LD_VAR 0 13
5744: PUSH
5745: LD_VAR 0 2
5749: ARRAY
5750: PPUSH
5751: CALL_OW 52
// bunker_list := Delete ( bunker_list , i ) ;
5755: LD_ADDR_VAR 0 13
5759: PUSH
5760: LD_VAR 0 13
5764: PPUSH
5765: LD_VAR 0 2
5769: PPUSH
5770: CALL_OW 3
5774: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , personel_counter [ 1 ] - 1 ) ;
5775: LD_ADDR_VAR 0 16
5779: PUSH
5780: LD_VAR 0 16
5784: PPUSH
5785: LD_INT 1
5787: PPUSH
5788: LD_VAR 0 16
5792: PUSH
5793: LD_INT 1
5795: ARRAY
5796: PUSH
5797: LD_INT 1
5799: MINUS
5800: PPUSH
5801: CALL_OW 1
5805: ST_TO_ADDR
// end ;
5806: GO 5692
// for i = 1 to personel_counter [ 2 ] do
5808: LD_ADDR_VAR 0 2
5812: PUSH
5813: DOUBLE
5814: LD_INT 1
5816: DEC
5817: ST_TO_ADDR
5818: LD_VAR 0 16
5822: PUSH
5823: LD_INT 2
5825: ARRAY
5826: PUSH
5827: FOR_TO
5828: IFFALSE 5859
// begin PrepareHuman ( false , 2 , skill ) ;
5830: LD_INT 0
5832: PPUSH
5833: LD_INT 2
5835: PPUSH
5836: LD_VAR 0 6
5840: PPUSH
5841: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru_dep_main ) ;
5845: CALL_OW 44
5849: PPUSH
5850: LD_INT 16
5852: PPUSH
5853: CALL_OW 52
// end ;
5857: GO 5827
5859: POP
5860: POP
// for i = 1 to personel_counter [ 3 ] do
5861: LD_ADDR_VAR 0 2
5865: PUSH
5866: DOUBLE
5867: LD_INT 1
5869: DEC
5870: ST_TO_ADDR
5871: LD_VAR 0 16
5875: PUSH
5876: LD_INT 3
5878: ARRAY
5879: PUSH
5880: FOR_TO
5881: IFFALSE 5928
// begin PrepareHuman ( false , 3 , skill ) ;
5883: LD_INT 0
5885: PPUSH
5886: LD_INT 3
5888: PPUSH
5889: LD_VAR 0 6
5893: PPUSH
5894: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , fac_list [ i mod 2 + 1 ] ) ;
5898: CALL_OW 44
5902: PPUSH
5903: LD_VAR 0 11
5907: PUSH
5908: LD_VAR 0 2
5912: PUSH
5913: LD_INT 2
5915: MOD
5916: PUSH
5917: LD_INT 1
5919: PLUS
5920: ARRAY
5921: PPUSH
5922: CALL_OW 52
// end ;
5926: GO 5880
5928: POP
5929: POP
// for i = 1 to personel_counter [ 4 ] do
5930: LD_ADDR_VAR 0 2
5934: PUSH
5935: DOUBLE
5936: LD_INT 1
5938: DEC
5939: ST_TO_ADDR
5940: LD_VAR 0 16
5944: PUSH
5945: LD_INT 4
5947: ARRAY
5948: PUSH
5949: FOR_TO
5950: IFFALSE 5987
// begin PrepareHuman ( false , 4 , skill ) ;
5952: LD_INT 0
5954: PPUSH
5955: LD_INT 4
5957: PPUSH
5958: LD_VAR 0 6
5962: PPUSH
5963: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , lab_list [ 1 ] ) ;
5967: CALL_OW 44
5971: PPUSH
5972: LD_VAR 0 10
5976: PUSH
5977: LD_INT 1
5979: ARRAY
5980: PPUSH
5981: CALL_OW 52
// end ;
5985: GO 5949
5987: POP
5988: POP
// for i in breastworks_list do
5989: LD_ADDR_VAR 0 2
5993: PUSH
5994: LD_VAR 0 12
5998: PUSH
5999: FOR_IN
6000: IFFALSE 6112
// begin r := GetDir ( i ) ;
6002: LD_ADDR_VAR 0 4
6006: PUSH
6007: LD_VAR 0 2
6011: PPUSH
6012: CALL_OW 254
6016: ST_TO_ADDR
// if r > 3 then
6017: LD_VAR 0 4
6021: PUSH
6022: LD_INT 3
6024: GREATER
6025: IFFALSE 6043
// r := r - 3 else
6027: LD_ADDR_VAR 0 4
6031: PUSH
6032: LD_VAR 0 4
6036: PUSH
6037: LD_INT 3
6039: MINUS
6040: ST_TO_ADDR
6041: GO 6057
// r := r + 3 ;
6043: LD_ADDR_VAR 0 4
6047: PUSH
6048: LD_VAR 0 4
6052: PUSH
6053: LD_INT 3
6055: PLUS
6056: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
6057: LD_INT 0
6059: PPUSH
6060: LD_INT 1
6062: PPUSH
6063: LD_VAR 0 6
6067: PPUSH
6068: CALL_OW 380
// un := CreateHuman ;
6072: LD_ADDR_VAR 0 5
6076: PUSH
6077: CALL_OW 44
6081: ST_TO_ADDR
// SetDir ( un , r ) ;
6082: LD_VAR 0 5
6086: PPUSH
6087: LD_VAR 0 4
6091: PPUSH
6092: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
6096: LD_VAR 0 5
6100: PPUSH
6101: LD_VAR 0 2
6105: PPUSH
6106: CALL_OW 52
// end ;
6110: GO 5999
6112: POP
6113: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) ;
6114: LD_ADDR_VAR 0 8
6118: PUSH
6119: LD_INT 22
6121: PUSH
6122: LD_INT 3
6124: PUSH
6125: EMPTY
6126: LIST
6127: LIST
6128: PUSH
6129: LD_INT 25
6131: PUSH
6132: LD_INT 3
6134: PUSH
6135: EMPTY
6136: LIST
6137: LIST
6138: PUSH
6139: EMPTY
6140: LIST
6141: LIST
6142: PPUSH
6143: CALL_OW 69
6147: ST_TO_ADDR
// r := [ 4 , 5 , 6 ] [ Difficulty ] ;
6148: LD_ADDR_VAR 0 4
6152: PUSH
6153: LD_INT 4
6155: PUSH
6156: LD_INT 5
6158: PUSH
6159: LD_INT 6
6161: PUSH
6162: EMPTY
6163: LIST
6164: LIST
6165: LIST
6166: PUSH
6167: LD_OWVAR 67
6171: ARRAY
6172: ST_TO_ADDR
// for i = 1 to r do
6173: LD_ADDR_VAR 0 2
6177: PUSH
6178: DOUBLE
6179: LD_INT 1
6181: DEC
6182: ST_TO_ADDR
6183: LD_VAR 0 4
6187: PUSH
6188: FOR_TO
6189: IFFALSE 6362
// begin un := PrepareTank ( 3 , 3 , [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked ] [ i mod 3 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
6191: LD_ADDR_VAR 0 5
6195: PUSH
6196: LD_INT 3
6198: PPUSH
6199: LD_INT 3
6201: PPUSH
6202: LD_INT 22
6204: PUSH
6205: LD_INT 22
6207: PUSH
6208: LD_INT 24
6210: PUSH
6211: EMPTY
6212: LIST
6213: LIST
6214: LIST
6215: PUSH
6216: LD_VAR 0 2
6220: PUSH
6221: LD_INT 3
6223: MOD
6224: PUSH
6225: LD_INT 1
6227: PLUS
6228: ARRAY
6229: PPUSH
6230: LD_INT 1
6232: PPUSH
6233: LD_INT 1
6235: PPUSH
6236: LD_INT 43
6238: PUSH
6239: LD_INT 44
6241: PUSH
6242: LD_INT 42
6244: PUSH
6245: EMPTY
6246: LIST
6247: LIST
6248: LIST
6249: PUSH
6250: LD_VAR 0 2
6254: PUSH
6255: LD_INT 3
6257: MOD
6258: PUSH
6259: LD_INT 1
6261: PLUS
6262: ARRAY
6263: PPUSH
6264: LD_INT 100
6266: PPUSH
6267: CALL 563 0 7
6271: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
6272: LD_VAR 0 5
6276: PPUSH
6277: LD_INT 0
6279: PPUSH
6280: LD_INT 5
6282: PPUSH
6283: CALL_OW 12
6287: PPUSH
6288: CALL_OW 233
// PlaceUnitArea ( un , parkingArea , false ) ;
6292: LD_VAR 0 5
6296: PPUSH
6297: LD_INT 5
6299: PPUSH
6300: LD_INT 0
6302: PPUSH
6303: CALL_OW 49
// if i > tmp - 2 then
6307: LD_VAR 0 2
6311: PUSH
6312: LD_VAR 0 8
6316: PUSH
6317: LD_INT 2
6319: MINUS
6320: GREATER
6321: IFFALSE 6325
// continue ;
6323: GO 6188
// ComExitBuilding ( tmp [ i ] ) ;
6325: LD_VAR 0 8
6329: PUSH
6330: LD_VAR 0 2
6334: ARRAY
6335: PPUSH
6336: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , un ) ;
6340: LD_VAR 0 8
6344: PUSH
6345: LD_VAR 0 2
6349: ARRAY
6350: PPUSH
6351: LD_VAR 0 5
6355: PPUSH
6356: CALL_OW 180
// end ;
6360: GO 6188
6362: POP
6363: POP
// end ;
6364: LD_VAR 0 1
6368: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) do var i , filter , tmp , engs , enemy ;
6369: LD_INT 22
6371: PUSH
6372: LD_INT 3
6374: PUSH
6375: EMPTY
6376: LIST
6377: LIST
6378: PUSH
6379: LD_INT 25
6381: PUSH
6382: LD_INT 2
6384: PUSH
6385: EMPTY
6386: LIST
6387: LIST
6388: PUSH
6389: EMPTY
6390: LIST
6391: LIST
6392: PPUSH
6393: CALL_OW 69
6397: IFFALSE 7129
6399: GO 6401
6401: DISABLE
6402: LD_INT 0
6404: PPUSH
6405: PPUSH
6406: PPUSH
6407: PPUSH
6408: PPUSH
// begin enable ;
6409: ENABLE
// filter := FilterUnitsInArea ( baseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
6410: LD_ADDR_VAR 0 2
6414: PUSH
6415: LD_INT 6
6417: PPUSH
6418: LD_INT 3
6420: PUSH
6421: LD_INT 24
6423: PUSH
6424: LD_INT 1000
6426: PUSH
6427: EMPTY
6428: LIST
6429: LIST
6430: PUSH
6431: EMPTY
6432: LIST
6433: LIST
6434: PUSH
6435: LD_INT 21
6437: PUSH
6438: LD_INT 3
6440: PUSH
6441: EMPTY
6442: LIST
6443: LIST
6444: PUSH
6445: EMPTY
6446: LIST
6447: LIST
6448: PPUSH
6449: CALL_OW 70
6453: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
6454: LD_ADDR_VAR 0 4
6458: PUSH
6459: LD_INT 22
6461: PUSH
6462: LD_INT 3
6464: PUSH
6465: EMPTY
6466: LIST
6467: LIST
6468: PUSH
6469: LD_INT 25
6471: PUSH
6472: LD_INT 2
6474: PUSH
6475: EMPTY
6476: LIST
6477: LIST
6478: PUSH
6479: EMPTY
6480: LIST
6481: LIST
6482: PPUSH
6483: CALL_OW 69
6487: ST_TO_ADDR
// if not filter and not ru_rebuild_list then
6488: LD_VAR 0 2
6492: NOT
6493: PUSH
6494: LD_EXP 20
6498: NOT
6499: AND
6500: IFFALSE 6570
// begin for i in engs do
6502: LD_ADDR_VAR 0 1
6506: PUSH
6507: LD_VAR 0 4
6511: PUSH
6512: FOR_IN
6513: IFFALSE 6568
// if GetLives ( i ) = 1000 and not HasTask ( i ) and not IsInUnit ( i ) then
6515: LD_VAR 0 1
6519: PPUSH
6520: CALL_OW 256
6524: PUSH
6525: LD_INT 1000
6527: EQUAL
6528: PUSH
6529: LD_VAR 0 1
6533: PPUSH
6534: CALL_OW 314
6538: NOT
6539: AND
6540: PUSH
6541: LD_VAR 0 1
6545: PPUSH
6546: CALL_OW 310
6550: NOT
6551: AND
6552: IFFALSE 6566
// ComEnterUnit ( i , ru_dep_main ) ;
6554: LD_VAR 0 1
6558: PPUSH
6559: LD_INT 16
6561: PPUSH
6562: CALL_OW 120
6566: GO 6512
6568: POP
6569: POP
// end ; if UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) then
6570: LD_VAR 0 4
6574: PPUSH
6575: LD_INT 3
6577: PUSH
6578: LD_INT 24
6580: PUSH
6581: LD_INT 650
6583: PUSH
6584: EMPTY
6585: LIST
6586: LIST
6587: PUSH
6588: EMPTY
6589: LIST
6590: LIST
6591: PPUSH
6592: CALL_OW 72
6596: IFFALSE 6689
// begin tmp := UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) ;
6598: LD_ADDR_VAR 0 3
6602: PUSH
6603: LD_VAR 0 4
6607: PPUSH
6608: LD_INT 3
6610: PUSH
6611: LD_INT 24
6613: PUSH
6614: LD_INT 650
6616: PUSH
6617: EMPTY
6618: LIST
6619: LIST
6620: PUSH
6621: EMPTY
6622: LIST
6623: LIST
6624: PPUSH
6625: CALL_OW 72
6629: ST_TO_ADDR
// for i in tmp do
6630: LD_ADDR_VAR 0 1
6634: PUSH
6635: LD_VAR 0 3
6639: PUSH
6640: FOR_IN
6641: IFFALSE 6687
// if not IsInArea ( i , mainBaseArea ) then
6643: LD_VAR 0 1
6647: PPUSH
6648: LD_INT 14
6650: PPUSH
6651: CALL_OW 308
6655: NOT
6656: IFFALSE 6685
// begin ComMoveXY ( i , 129 , 125 ) ;
6658: LD_VAR 0 1
6662: PPUSH
6663: LD_INT 129
6665: PPUSH
6666: LD_INT 125
6668: PPUSH
6669: CALL_OW 111
// AddComWait ( i , 0 0$30 ) ;
6673: LD_VAR 0 1
6677: PPUSH
6678: LD_INT 1050
6680: PPUSH
6681: CALL_OW 202
// end ;
6685: GO 6640
6687: POP
6688: POP
// end ; engs := UnitFilter ( engs , [ f_lives , 650 ] ) ;
6689: LD_ADDR_VAR 0 4
6693: PUSH
6694: LD_VAR 0 4
6698: PPUSH
6699: LD_INT 24
6701: PUSH
6702: LD_INT 650
6704: PUSH
6705: EMPTY
6706: LIST
6707: LIST
6708: PPUSH
6709: CALL_OW 72
6713: ST_TO_ADDR
// if not engs then
6714: LD_VAR 0 4
6718: NOT
6719: IFFALSE 6723
// exit ;
6721: GO 7129
// if filter then
6723: LD_VAR 0 2
6727: IFFALSE 6986
// begin for i in engs do
6729: LD_ADDR_VAR 0 1
6733: PUSH
6734: LD_VAR 0 4
6738: PUSH
6739: FOR_IN
6740: IFFALSE 6764
// if IsInUnit ( i ) then
6742: LD_VAR 0 1
6746: PPUSH
6747: CALL_OW 310
6751: IFFALSE 6762
// ComExitBuilding ( i ) ;
6753: LD_VAR 0 1
6757: PPUSH
6758: CALL_OW 122
6762: GO 6739
6764: POP
6765: POP
// wait ( 3 ) ;
6766: LD_INT 3
6768: PPUSH
6769: CALL_OW 67
// if filter >= 2 and engs >= 2 then
6773: LD_VAR 0 2
6777: PUSH
6778: LD_INT 2
6780: GREATEREQUAL
6781: PUSH
6782: LD_VAR 0 4
6786: PUSH
6787: LD_INT 2
6789: GREATEREQUAL
6790: AND
6791: IFFALSE 6939
// begin for i = 1 to engs / 2 do
6793: LD_ADDR_VAR 0 1
6797: PUSH
6798: DOUBLE
6799: LD_INT 1
6801: DEC
6802: ST_TO_ADDR
6803: LD_VAR 0 4
6807: PUSH
6808: LD_INT 2
6810: DIVREAL
6811: PUSH
6812: FOR_TO
6813: IFFALSE 6859
// if not HasTask ( engs [ i ] ) then
6815: LD_VAR 0 4
6819: PUSH
6820: LD_VAR 0 1
6824: ARRAY
6825: PPUSH
6826: CALL_OW 314
6830: NOT
6831: IFFALSE 6857
// ComRepairBuilding ( engs [ i ] , filter [ 1 ] ) ;
6833: LD_VAR 0 4
6837: PUSH
6838: LD_VAR 0 1
6842: ARRAY
6843: PPUSH
6844: LD_VAR 0 2
6848: PUSH
6849: LD_INT 1
6851: ARRAY
6852: PPUSH
6853: CALL_OW 130
6857: GO 6812
6859: POP
6860: POP
// for i = engs / 2 + 1 to engs do
6861: LD_ADDR_VAR 0 1
6865: PUSH
6866: DOUBLE
6867: LD_VAR 0 4
6871: PUSH
6872: LD_INT 2
6874: DIVREAL
6875: PUSH
6876: LD_INT 1
6878: PLUS
6879: DEC
6880: ST_TO_ADDR
6881: LD_VAR 0 4
6885: PUSH
6886: FOR_TO
6887: IFFALSE 6935
// if not HasTask ( engs [ i ] ) then
6889: LD_VAR 0 4
6893: PUSH
6894: LD_VAR 0 1
6898: ARRAY
6899: PPUSH
6900: CALL_OW 314
6904: NOT
6905: IFFALSE 6933
// ComRepairBuilding ( engs [ i ] , filter [ filter ] ) ;
6907: LD_VAR 0 4
6911: PUSH
6912: LD_VAR 0 1
6916: ARRAY
6917: PPUSH
6918: LD_VAR 0 2
6922: PUSH
6923: LD_VAR 0 2
6927: ARRAY
6928: PPUSH
6929: CALL_OW 130
6933: GO 6886
6935: POP
6936: POP
// end else
6937: GO 6986
// for i in engs do
6939: LD_ADDR_VAR 0 1
6943: PUSH
6944: LD_VAR 0 4
6948: PUSH
6949: FOR_IN
6950: IFFALSE 6984
// if not HasTask ( i ) then
6952: LD_VAR 0 1
6956: PPUSH
6957: CALL_OW 314
6961: NOT
6962: IFFALSE 6982
// ComRepairBuilding ( i , filter [ 1 ] ) ;
6964: LD_VAR 0 1
6968: PPUSH
6969: LD_VAR 0 2
6973: PUSH
6974: LD_INT 1
6976: ARRAY
6977: PPUSH
6978: CALL_OW 130
6982: GO 6949
6984: POP
6985: POP
// end ; enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
6986: LD_ADDR_VAR 0 5
6990: PUSH
6991: LD_INT 81
6993: PUSH
6994: LD_INT 3
6996: PUSH
6997: EMPTY
6998: LIST
6999: LIST
7000: PPUSH
7001: CALL_OW 69
7005: ST_TO_ADDR
// if ru_rebuild_list and not filter then
7006: LD_EXP 20
7010: PUSH
7011: LD_VAR 0 2
7015: NOT
7016: AND
7017: IFFALSE 7129
// begin ComExitBuilding ( engs ) ;
7019: LD_VAR 0 4
7023: PPUSH
7024: CALL_OW 122
// if GetDistUnitXY ( NearestUnitToXY ( enemy , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) > 10 then
7028: LD_VAR 0 5
7032: PPUSH
7033: LD_EXP 20
7037: PUSH
7038: LD_INT 2
7040: ARRAY
7041: PPUSH
7042: LD_EXP 20
7046: PUSH
7047: LD_INT 3
7049: ARRAY
7050: PPUSH
7051: CALL_OW 73
7055: PPUSH
7056: LD_EXP 20
7060: PUSH
7061: LD_INT 2
7063: ARRAY
7064: PPUSH
7065: LD_EXP 20
7069: PUSH
7070: LD_INT 3
7072: ARRAY
7073: PPUSH
7074: CALL_OW 297
7078: PUSH
7079: LD_INT 10
7081: GREATER
7082: IFFALSE 7129
// ComBuild ( engs , ru_rebuild_list [ 1 ] , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] , ru_rebuild_list [ 4 ] ) ;
7084: LD_VAR 0 4
7088: PPUSH
7089: LD_EXP 20
7093: PUSH
7094: LD_INT 1
7096: ARRAY
7097: PPUSH
7098: LD_EXP 20
7102: PUSH
7103: LD_INT 2
7105: ARRAY
7106: PPUSH
7107: LD_EXP 20
7111: PUSH
7112: LD_INT 3
7114: ARRAY
7115: PPUSH
7116: LD_EXP 20
7120: PUSH
7121: LD_INT 4
7123: ARRAY
7124: PPUSH
7125: CALL_OW 145
// end ; end ;
7129: PPOPN 5
7131: END
// every 0 0$1 trigger GetLives ( ru_dep_main ) < 250 do var i , tmp ;
7132: LD_INT 16
7134: PPUSH
7135: CALL_OW 256
7139: PUSH
7140: LD_INT 250
7142: LESS
7143: IFFALSE 7333
7145: GO 7147
7147: DISABLE
7148: LD_INT 0
7150: PPUSH
7151: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
7152: LD_ADDR_VAR 0 2
7156: PUSH
7157: LD_INT 22
7159: PUSH
7160: LD_INT 3
7162: PUSH
7163: EMPTY
7164: LIST
7165: LIST
7166: PUSH
7167: LD_INT 2
7169: PUSH
7170: LD_INT 25
7172: PUSH
7173: LD_INT 1
7175: PUSH
7176: EMPTY
7177: LIST
7178: LIST
7179: PUSH
7180: LD_INT 25
7182: PUSH
7183: LD_INT 3
7185: PUSH
7186: EMPTY
7187: LIST
7188: LIST
7189: PUSH
7190: LD_INT 25
7192: PUSH
7193: LD_INT 4
7195: PUSH
7196: EMPTY
7197: LIST
7198: LIST
7199: PUSH
7200: EMPTY
7201: LIST
7202: LIST
7203: LIST
7204: LIST
7205: PUSH
7206: EMPTY
7207: LIST
7208: LIST
7209: PPUSH
7210: CALL_OW 69
7214: ST_TO_ADDR
// ComExitBuilding ( tmp ) ;
7215: LD_VAR 0 2
7219: PPUSH
7220: CALL_OW 122
// wait ( 3 ) ;
7224: LD_INT 3
7226: PPUSH
7227: CALL_OW 67
// ComMoveXY ( tmp , 156 , 211 ) ;
7231: LD_VAR 0 2
7235: PPUSH
7236: LD_INT 156
7238: PPUSH
7239: LD_INT 211
7241: PPUSH
7242: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7246: LD_INT 35
7248: PPUSH
7249: CALL_OW 67
// for i in tmp do
7253: LD_ADDR_VAR 0 1
7257: PUSH
7258: LD_VAR 0 2
7262: PUSH
7263: FOR_IN
7264: IFFALSE 7324
// if IsInArea ( i , escapeArea ) then
7266: LD_VAR 0 1
7270: PPUSH
7271: LD_INT 15
7273: PPUSH
7274: CALL_OW 308
7278: IFFALSE 7307
// begin RemoveUnit ( i ) ;
7280: LD_VAR 0 1
7284: PPUSH
7285: CALL_OW 64
// tmp := tmp diff i ;
7289: LD_ADDR_VAR 0 2
7293: PUSH
7294: LD_VAR 0 2
7298: PUSH
7299: LD_VAR 0 1
7303: DIFF
7304: ST_TO_ADDR
// end else
7305: GO 7322
// ComMoveXY ( i , 156 , 211 ) ;
7307: LD_VAR 0 1
7311: PPUSH
7312: LD_INT 156
7314: PPUSH
7315: LD_INT 211
7317: PPUSH
7318: CALL_OW 111
7322: GO 7263
7324: POP
7325: POP
// until not tmp ;
7326: LD_VAR 0 2
7330: NOT
7331: IFFALSE 7246
// end ;
7333: PPOPN 2
7335: END
// every 0 0$01 trigger GetLives ( ru_dep_main ) > 250 and FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_outside ] ] ] ) do var i , tmp ;
7336: LD_INT 16
7338: PPUSH
7339: CALL_OW 256
7343: PUSH
7344: LD_INT 250
7346: GREATER
7347: PUSH
7348: LD_INT 22
7350: PUSH
7351: LD_INT 3
7353: PUSH
7354: EMPTY
7355: LIST
7356: LIST
7357: PUSH
7358: LD_INT 25
7360: PUSH
7361: LD_INT 1
7363: PUSH
7364: EMPTY
7365: LIST
7366: LIST
7367: PUSH
7368: LD_INT 56
7370: PUSH
7371: EMPTY
7372: LIST
7373: PUSH
7374: EMPTY
7375: LIST
7376: LIST
7377: LIST
7378: PUSH
7379: EMPTY
7380: LIST
7381: PPUSH
7382: CALL_OW 69
7386: AND
7387: IFFALSE 7499
7389: GO 7391
7391: DISABLE
7392: LD_INT 0
7394: PPUSH
7395: PPUSH
// begin enable ;
7396: ENABLE
// tmp := FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ] ) ;
7397: LD_ADDR_VAR 0 2
7401: PUSH
7402: LD_INT 22
7404: PUSH
7405: LD_INT 3
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: PUSH
7412: LD_INT 25
7414: PUSH
7415: LD_INT 1
7417: PUSH
7418: EMPTY
7419: LIST
7420: LIST
7421: PUSH
7422: LD_INT 56
7424: PUSH
7425: EMPTY
7426: LIST
7427: PUSH
7428: LD_INT 3
7430: PUSH
7431: LD_INT 60
7433: PUSH
7434: EMPTY
7435: LIST
7436: PUSH
7437: EMPTY
7438: LIST
7439: LIST
7440: PUSH
7441: EMPTY
7442: LIST
7443: LIST
7444: LIST
7445: LIST
7446: PUSH
7447: EMPTY
7448: LIST
7449: PPUSH
7450: CALL_OW 69
7454: ST_TO_ADDR
// if not tmp then
7455: LD_VAR 0 2
7459: NOT
7460: IFFALSE 7464
// exit ;
7462: GO 7499
// for i in tmp do
7464: LD_ADDR_VAR 0 1
7468: PUSH
7469: LD_VAR 0 2
7473: PUSH
7474: FOR_IN
7475: IFFALSE 7497
// GoToAnotherTower ( i , 0 , 143 , 143 ) ;
7477: LD_VAR 0 1
7481: PPUSH
7482: LD_INT 0
7484: PPUSH
7485: LD_INT 143
7487: PPUSH
7488: LD_INT 143
7490: PPUSH
7491: CALL 2200 0 4
7495: GO 7474
7497: POP
7498: POP
// end ;
7499: PPOPN 2
7501: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do var i , tmp , doc ;
7502: LD_INT 22
7504: PUSH
7505: LD_INT 3
7507: PUSH
7508: EMPTY
7509: LIST
7510: LIST
7511: PUSH
7512: LD_INT 25
7514: PUSH
7515: LD_INT 4
7517: PUSH
7518: EMPTY
7519: LIST
7520: LIST
7521: PUSH
7522: EMPTY
7523: LIST
7524: LIST
7525: PPUSH
7526: CALL_OW 69
7530: IFFALSE 7784
7532: GO 7534
7534: DISABLE
7535: LD_INT 0
7537: PPUSH
7538: PPUSH
7539: PPUSH
// begin enable ;
7540: ENABLE
// tmp := FilterUnitsInArea ( mainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7541: LD_ADDR_VAR 0 2
7545: PUSH
7546: LD_INT 14
7548: PPUSH
7549: LD_INT 22
7551: PUSH
7552: LD_INT 3
7554: PUSH
7555: EMPTY
7556: LIST
7557: LIST
7558: PUSH
7559: LD_INT 21
7561: PUSH
7562: LD_INT 1
7564: PUSH
7565: EMPTY
7566: LIST
7567: LIST
7568: PUSH
7569: LD_INT 3
7571: PUSH
7572: LD_INT 24
7574: PUSH
7575: LD_INT 1000
7577: PUSH
7578: EMPTY
7579: LIST
7580: LIST
7581: PUSH
7582: EMPTY
7583: LIST
7584: LIST
7585: PUSH
7586: EMPTY
7587: LIST
7588: LIST
7589: LIST
7590: PPUSH
7591: CALL_OW 70
7595: ST_TO_ADDR
// doc := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
7596: LD_ADDR_VAR 0 3
7600: PUSH
7601: LD_INT 22
7603: PUSH
7604: LD_INT 3
7606: PUSH
7607: EMPTY
7608: LIST
7609: LIST
7610: PUSH
7611: LD_INT 25
7613: PUSH
7614: LD_INT 4
7616: PUSH
7617: EMPTY
7618: LIST
7619: LIST
7620: PUSH
7621: EMPTY
7622: LIST
7623: LIST
7624: PPUSH
7625: CALL_OW 69
7629: ST_TO_ADDR
// if not doc then
7630: LD_VAR 0 3
7634: NOT
7635: IFFALSE 7639
// exit ;
7637: GO 7784
// if not tmp then
7639: LD_VAR 0 2
7643: NOT
7644: IFFALSE 7735
// begin if not IsInUnit ( doc [ 1 ] ) then
7646: LD_VAR 0 3
7650: PUSH
7651: LD_INT 1
7653: ARRAY
7654: PPUSH
7655: CALL_OW 310
7659: NOT
7660: IFFALSE 7733
// ComEnterUnit ( doc , FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ) ;
7662: LD_VAR 0 3
7666: PPUSH
7667: LD_INT 22
7669: PUSH
7670: LD_INT 3
7672: PUSH
7673: EMPTY
7674: LIST
7675: LIST
7676: PUSH
7677: LD_INT 2
7679: PUSH
7680: LD_INT 30
7682: PUSH
7683: LD_INT 6
7685: PUSH
7686: EMPTY
7687: LIST
7688: LIST
7689: PUSH
7690: LD_INT 30
7692: PUSH
7693: LD_INT 7
7695: PUSH
7696: EMPTY
7697: LIST
7698: LIST
7699: PUSH
7700: LD_INT 30
7702: PUSH
7703: LD_INT 8
7705: PUSH
7706: EMPTY
7707: LIST
7708: LIST
7709: PUSH
7710: EMPTY
7711: LIST
7712: LIST
7713: LIST
7714: LIST
7715: PUSH
7716: EMPTY
7717: LIST
7718: LIST
7719: PPUSH
7720: CALL_OW 69
7724: PUSH
7725: LD_INT 1
7727: ARRAY
7728: PPUSH
7729: CALL_OW 120
// exit ;
7733: GO 7784
// end ; if IsInUnit ( doc [ 1 ] ) then
7735: LD_VAR 0 3
7739: PUSH
7740: LD_INT 1
7742: ARRAY
7743: PPUSH
7744: CALL_OW 310
7748: IFFALSE 7759
// ComExitBuilding ( doc ) ;
7750: LD_VAR 0 3
7754: PPUSH
7755: CALL_OW 122
// wait ( 3 ) ;
7759: LD_INT 3
7761: PPUSH
7762: CALL_OW 67
// ComHeal ( doc , tmp [ 1 ] ) ;
7766: LD_VAR 0 3
7770: PPUSH
7771: LD_VAR 0 2
7775: PUSH
7776: LD_INT 1
7778: ARRAY
7779: PPUSH
7780: CALL_OW 128
// end ;
7784: PPOPN 3
7786: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do var i , tmp , attacking , areas , area ;
7787: LD_INT 22
7789: PUSH
7790: LD_INT 3
7792: PUSH
7793: EMPTY
7794: LIST
7795: LIST
7796: PUSH
7797: LD_INT 25
7799: PUSH
7800: LD_INT 3
7802: PUSH
7803: EMPTY
7804: LIST
7805: LIST
7806: PUSH
7807: EMPTY
7808: LIST
7809: LIST
7810: PPUSH
7811: CALL_OW 69
7815: PUSH
7816: LD_INT 22
7818: PUSH
7819: LD_INT 3
7821: PUSH
7822: EMPTY
7823: LIST
7824: LIST
7825: PUSH
7826: LD_INT 21
7828: PUSH
7829: LD_INT 2
7831: PUSH
7832: EMPTY
7833: LIST
7834: LIST
7835: PUSH
7836: EMPTY
7837: LIST
7838: LIST
7839: PPUSH
7840: CALL_OW 69
7844: AND
7845: IFFALSE 8259
7847: GO 7849
7849: DISABLE
7850: LD_INT 0
7852: PPUSH
7853: PPUSH
7854: PPUSH
7855: PPUSH
7856: PPUSH
// begin enable ;
7857: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
7858: LD_ADDR_VAR 0 2
7862: PUSH
7863: LD_INT 22
7865: PUSH
7866: LD_INT 3
7868: PUSH
7869: EMPTY
7870: LIST
7871: LIST
7872: PUSH
7873: LD_INT 21
7875: PUSH
7876: LD_INT 2
7878: PUSH
7879: EMPTY
7880: LIST
7881: LIST
7882: PUSH
7883: LD_INT 3
7885: PUSH
7886: LD_INT 58
7888: PUSH
7889: EMPTY
7890: LIST
7891: PUSH
7892: EMPTY
7893: LIST
7894: LIST
7895: PUSH
7896: EMPTY
7897: LIST
7898: LIST
7899: LIST
7900: PPUSH
7901: CALL_OW 69
7905: ST_TO_ADDR
// areas := [ sectorAlpha , sectorBeta , sectorDelta , mainBaseArea ] ;
7906: LD_ADDR_VAR 0 4
7910: PUSH
7911: LD_INT 10
7913: PUSH
7914: LD_INT 11
7916: PUSH
7917: LD_INT 12
7919: PUSH
7920: LD_INT 14
7922: PUSH
7923: EMPTY
7924: LIST
7925: LIST
7926: LIST
7927: LIST
7928: ST_TO_ADDR
// area := 0 ;
7929: LD_ADDR_VAR 0 5
7933: PUSH
7934: LD_INT 0
7936: ST_TO_ADDR
// attacking := false ;
7937: LD_ADDR_VAR 0 3
7941: PUSH
7942: LD_INT 0
7944: ST_TO_ADDR
// for i in tmp do
7945: LD_ADDR_VAR 0 1
7949: PUSH
7950: LD_VAR 0 2
7954: PUSH
7955: FOR_IN
7956: IFFALSE 8042
// if GetDistUnits ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) < 10 then
7958: LD_VAR 0 1
7962: PPUSH
7963: LD_INT 22
7965: PUSH
7966: LD_INT 1
7968: PUSH
7969: EMPTY
7970: LIST
7971: LIST
7972: PPUSH
7973: CALL_OW 69
7977: PPUSH
7978: LD_VAR 0 1
7982: PPUSH
7983: CALL_OW 74
7987: PPUSH
7988: CALL_OW 296
7992: PUSH
7993: LD_INT 10
7995: LESS
7996: IFFALSE 8040
// begin ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
7998: LD_VAR 0 1
8002: PPUSH
8003: LD_INT 22
8005: PUSH
8006: LD_INT 1
8008: PUSH
8009: EMPTY
8010: LIST
8011: LIST
8012: PPUSH
8013: CALL_OW 69
8017: PPUSH
8018: LD_VAR 0 1
8022: PPUSH
8023: CALL_OW 74
8027: PPUSH
8028: CALL_OW 115
// attacking := true ;
8032: LD_ADDR_VAR 0 3
8036: PUSH
8037: LD_INT 1
8039: ST_TO_ADDR
// end ;
8040: GO 7955
8042: POP
8043: POP
// if attacking then
8044: LD_VAR 0 3
8048: IFFALSE 8052
// exit ;
8050: GO 8259
// for i in areas do
8052: LD_ADDR_VAR 0 1
8056: PUSH
8057: LD_VAR 0 4
8061: PUSH
8062: FOR_IN
8063: IFFALSE 8100
// if FilterUnitsInArea ( i , [ f_side , 1 ] ) then
8065: LD_VAR 0 1
8069: PPUSH
8070: LD_INT 22
8072: PUSH
8073: LD_INT 1
8075: PUSH
8076: EMPTY
8077: LIST
8078: LIST
8079: PPUSH
8080: CALL_OW 70
8084: IFFALSE 8098
// begin area := i ;
8086: LD_ADDR_VAR 0 5
8090: PUSH
8091: LD_VAR 0 1
8095: ST_TO_ADDR
// break ;
8096: GO 8100
// end ;
8098: GO 8062
8100: POP
8101: POP
// if area then
8102: LD_VAR 0 5
8106: IFFALSE 8259
// begin for i in tmp do
8108: LD_ADDR_VAR 0 1
8112: PUSH
8113: LD_VAR 0 2
8117: PUSH
8118: FOR_IN
8119: IFFALSE 8257
// begin if GetFuel ( i ) < 33 then
8121: LD_VAR 0 1
8125: PPUSH
8126: CALL_OW 261
8130: PUSH
8131: LD_INT 33
8133: LESS
8134: IFFALSE 8148
// SetFuel ( i , 33 ) ;
8136: LD_VAR 0 1
8140: PPUSH
8141: LD_INT 33
8143: PPUSH
8144: CALL_OW 240
// if GetDistUnits ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) < 10 then
8148: LD_VAR 0 1
8152: PPUSH
8153: LD_INT 22
8155: PUSH
8156: LD_INT 1
8158: PUSH
8159: EMPTY
8160: LIST
8161: LIST
8162: PPUSH
8163: CALL_OW 69
8167: PPUSH
8168: LD_VAR 0 1
8172: PPUSH
8173: CALL_OW 74
8177: PPUSH
8178: CALL_OW 296
8182: PUSH
8183: LD_INT 10
8185: LESS
8186: IFFALSE 8224
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) else
8188: LD_VAR 0 1
8192: PPUSH
8193: LD_INT 22
8195: PUSH
8196: LD_INT 1
8198: PUSH
8199: EMPTY
8200: LIST
8201: LIST
8202: PPUSH
8203: CALL_OW 69
8207: PPUSH
8208: LD_VAR 0 1
8212: PPUSH
8213: CALL_OW 74
8217: PPUSH
8218: CALL_OW 115
8222: GO 8255
// if not IsInArea ( i , area ) then
8224: LD_VAR 0 1
8228: PPUSH
8229: LD_VAR 0 5
8233: PPUSH
8234: CALL_OW 308
8238: NOT
8239: IFFALSE 8255
// ComMoveToArea ( i , area ) ;
8241: LD_VAR 0 1
8245: PPUSH
8246: LD_VAR 0 5
8250: PPUSH
8251: CALL_OW 113
// end ;
8255: GO 8118
8257: POP
8258: POP
// end ; end ;
8259: PPOPN 5
8261: END
// every 15 15$00 trigger Difficulty > 1 do var i , j , un , veh , time , count ;
8262: LD_OWVAR 67
8266: PUSH
8267: LD_INT 1
8269: GREATER
8270: IFFALSE 8547
8272: GO 8274
8274: DISABLE
8275: LD_INT 0
8277: PPUSH
8278: PPUSH
8279: PPUSH
8280: PPUSH
8281: PPUSH
8282: PPUSH
// begin uc_side := 3 ;
8283: LD_ADDR_OWVAR 20
8287: PUSH
8288: LD_INT 3
8290: ST_TO_ADDR
// uc_nation := 3 ;
8291: LD_ADDR_OWVAR 21
8295: PUSH
8296: LD_INT 3
8298: ST_TO_ADDR
// time := [ 9 9$00 , 7 7$00 , 6 6$00 ] [ Difficulty ] ;
8299: LD_ADDR_VAR 0 5
8303: PUSH
8304: LD_INT 18900
8306: PUSH
8307: LD_INT 14700
8309: PUSH
8310: LD_INT 12600
8312: PUSH
8313: EMPTY
8314: LIST
8315: LIST
8316: LIST
8317: PUSH
8318: LD_OWVAR 67
8322: ARRAY
8323: ST_TO_ADDR
// count := [ 2 , 2 , 3 ] [ Difficulty ] ;
8324: LD_ADDR_VAR 0 6
8328: PUSH
8329: LD_INT 2
8331: PUSH
8332: LD_INT 2
8334: PUSH
8335: LD_INT 3
8337: PUSH
8338: EMPTY
8339: LIST
8340: LIST
8341: LIST
8342: PUSH
8343: LD_OWVAR 67
8347: ARRAY
8348: ST_TO_ADDR
// for i = 1 to count do
8349: LD_ADDR_VAR 0 1
8353: PUSH
8354: DOUBLE
8355: LD_INT 1
8357: DEC
8358: ST_TO_ADDR
8359: LD_VAR 0 6
8363: PUSH
8364: FOR_TO
8365: IFFALSE 8545
// begin wait ( time ) ;
8367: LD_VAR 0 5
8371: PPUSH
8372: CALL_OW 67
// for j = 1 to rand ( 1 , Difficulty ) do
8376: LD_ADDR_VAR 0 2
8380: PUSH
8381: DOUBLE
8382: LD_INT 1
8384: DEC
8385: ST_TO_ADDR
8386: LD_INT 1
8388: PPUSH
8389: LD_OWVAR 67
8393: PPUSH
8394: CALL_OW 12
8398: PUSH
8399: FOR_TO
8400: IFFALSE 8541
// begin veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 80 ) ;
8402: LD_ADDR_VAR 0 4
8406: PUSH
8407: LD_INT 3
8409: PPUSH
8410: LD_INT 3
8412: PPUSH
8413: LD_INT 22
8415: PPUSH
8416: LD_INT 1
8418: PPUSH
8419: LD_INT 1
8421: PPUSH
8422: LD_INT 43
8424: PUSH
8425: LD_INT 44
8427: PUSH
8428: LD_INT 42
8430: PUSH
8431: EMPTY
8432: LIST
8433: LIST
8434: LIST
8435: PUSH
8436: LD_VAR 0 1
8440: PUSH
8441: LD_INT 3
8443: MOD
8444: PUSH
8445: LD_INT 1
8447: PLUS
8448: ARRAY
8449: PPUSH
8450: LD_INT 80
8452: PPUSH
8453: CALL 563 0 7
8457: ST_TO_ADDR
// PlaceUnitArea ( veh , southArea , false ) ;
8458: LD_VAR 0 4
8462: PPUSH
8463: LD_INT 13
8465: PPUSH
8466: LD_INT 0
8468: PPUSH
8469: CALL_OW 49
// PrepareHuman ( false , 3 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
8473: LD_INT 0
8475: PPUSH
8476: LD_INT 3
8478: PPUSH
8479: LD_INT 4
8481: PUSH
8482: LD_INT 5
8484: PUSH
8485: LD_INT 5
8487: PUSH
8488: EMPTY
8489: LIST
8490: LIST
8491: LIST
8492: PUSH
8493: LD_OWVAR 67
8497: ARRAY
8498: PPUSH
8499: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
8503: CALL_OW 44
8507: PPUSH
8508: LD_VAR 0 4
8512: PPUSH
8513: CALL_OW 52
// wait ( 0 0$01 ) ;
8517: LD_INT 35
8519: PPUSH
8520: CALL_OW 67
// ComMoveXY ( veh , 143 , 143 ) ;
8524: LD_VAR 0 4
8528: PPUSH
8529: LD_INT 143
8531: PPUSH
8532: LD_INT 143
8534: PPUSH
8535: CALL_OW 111
// end ;
8539: GO 8399
8541: POP
8542: POP
// end ;
8543: GO 8364
8545: POP
8546: POP
// end ;
8547: PPOPN 6
8549: END
// every 8 8$00 do var i , un , time ;
8550: GO 8552
8552: DISABLE
8553: LD_INT 0
8555: PPUSH
8556: PPUSH
8557: PPUSH
// begin time := [ 3 3$00 , 1 1$00 , 0 0$30 ] ;
8558: LD_ADDR_VAR 0 3
8562: PUSH
8563: LD_INT 6300
8565: PUSH
8566: LD_INT 2100
8568: PUSH
8569: LD_INT 1050
8571: PUSH
8572: EMPTY
8573: LIST
8574: LIST
8575: LIST
8576: ST_TO_ADDR
// wait ( time ) ;
8577: LD_VAR 0 3
8581: PPUSH
8582: CALL_OW 67
// uc_side := 3 ;
8586: LD_ADDR_OWVAR 20
8590: PUSH
8591: LD_INT 3
8593: ST_TO_ADDR
// uc_nation := 3 ;
8594: LD_ADDR_OWVAR 21
8598: PUSH
8599: LD_INT 3
8601: ST_TO_ADDR
// for i = 1 to 2 do
8602: LD_ADDR_VAR 0 1
8606: PUSH
8607: DOUBLE
8608: LD_INT 1
8610: DEC
8611: ST_TO_ADDR
8612: LD_INT 2
8614: PUSH
8615: FOR_TO
8616: IFFALSE 8679
// begin PrepareHuman ( false , 1 , 4 ) ;
8618: LD_INT 0
8620: PPUSH
8621: LD_INT 1
8623: PPUSH
8624: LD_INT 4
8626: PPUSH
8627: CALL_OW 380
// un := CreateHuman ;
8631: LD_ADDR_VAR 0 2
8635: PUSH
8636: CALL_OW 44
8640: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_dep_main ) ;
8641: LD_VAR 0 2
8645: PPUSH
8646: LD_INT 16
8648: PPUSH
8649: CALL_OW 52
// ComExitBuilding ( un ) ;
8653: LD_VAR 0 2
8657: PPUSH
8658: CALL_OW 122
// AddComAgressiveMove ( un , 41 , 76 ) ;
8662: LD_VAR 0 2
8666: PPUSH
8667: LD_INT 41
8669: PPUSH
8670: LD_INT 76
8672: PPUSH
8673: CALL_OW 174
// end ;
8677: GO 8615
8679: POP
8680: POP
// end ; end_of_file
8681: PPOPN 3
8683: END
// export function Action ; begin
8684: LD_INT 0
8686: PPUSH
// CenterNowOnXY ( 28 , 3 ) ;
8687: LD_INT 28
8689: PPUSH
8690: LD_INT 3
8692: PPUSH
8693: CALL_OW 86
// PlaceSeeing ( 41 , 76 , 1 , 10 ) ;
8697: LD_INT 41
8699: PPUSH
8700: LD_INT 76
8702: PPUSH
8703: LD_INT 1
8705: PPUSH
8706: LD_INT 10
8708: PPUSH
8709: CALL_OW 330
// RemoveSeeing ( 41 , 76 , 1 ) ;
8713: LD_INT 41
8715: PPUSH
8716: LD_INT 76
8718: PPUSH
8719: LD_INT 1
8721: PPUSH
8722: CALL_OW 331
// InGameOn ;
8726: CALL_OW 8
// SayRadio ( Harisson , D2-Har-1 ) ;
8730: LD_EXP 19
8734: PPUSH
8735: LD_STRING D2-Har-1
8737: PPUSH
8738: CALL_OW 94
// InGameOff ;
8742: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
8746: LD_STRING M1
8748: PPUSH
8749: CALL_OW 337
// end ;
8753: LD_VAR 0 1
8757: RET
// every 0 0$1 trigger buildings_counter > 1 do var un ;
8758: LD_EXP 4
8762: PUSH
8763: LD_INT 1
8765: GREATER
8766: IFFALSE 8857
8768: GO 8770
8770: DISABLE
8771: LD_INT 0
8773: PPUSH
// begin un := GetRandom ( sex_male ) [ 1 ] ;
8774: LD_ADDR_VAR 0 1
8778: PUSH
8779: LD_INT 1
8781: PPUSH
8782: CALL 651 0 1
8786: PUSH
8787: LD_INT 1
8789: ARRAY
8790: ST_TO_ADDR
// Say ( un , D2a-Sol1-1 ) ;
8791: LD_VAR 0 1
8795: PPUSH
8796: LD_STRING D2a-Sol1-1
8798: PPUSH
8799: CALL_OW 88
// if not un then
8803: LD_VAR 0 1
8807: NOT
8808: IFFALSE 8839
// begin un := GetRandom ( sex_female ) [ 1 ] ;
8810: LD_ADDR_VAR 0 1
8814: PUSH
8815: LD_INT 2
8817: PPUSH
8818: CALL 651 0 1
8822: PUSH
8823: LD_INT 1
8825: ARRAY
8826: ST_TO_ADDR
// Say ( un , D2a-FSol1-1 ) ;
8827: LD_VAR 0 1
8831: PPUSH
8832: LD_STRING D2a-FSol1-1
8834: PPUSH
8835: CALL_OW 88
// end ; if Khatam then
8839: LD_EXP 17
8843: IFFALSE 8857
// Say ( Khatam , D3b-Khat-3 ) ;
8845: LD_EXP 17
8849: PPUSH
8850: LD_STRING D3b-Khat-3
8852: PPUSH
8853: CALL_OW 88
// end ;
8857: PPOPN 1
8859: END
// every 0 0$1 trigger Frank and not Kikuchi and FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , GetX ( Frank ) , GetY ( Frank ) , 7 ] ] ) and not InBattle ( 1 ) do var i , ape ;
8860: LD_EXP 15
8864: PUSH
8865: LD_EXP 18
8869: NOT
8870: AND
8871: PUSH
8872: LD_INT 22
8874: PUSH
8875: LD_INT 1
8877: PUSH
8878: EMPTY
8879: LIST
8880: LIST
8881: PUSH
8882: LD_INT 92
8884: PUSH
8885: LD_EXP 15
8889: PPUSH
8890: CALL_OW 250
8894: PUSH
8895: LD_EXP 15
8899: PPUSH
8900: CALL_OW 251
8904: PUSH
8905: LD_INT 7
8907: PUSH
8908: EMPTY
8909: LIST
8910: LIST
8911: LIST
8912: LIST
8913: PUSH
8914: EMPTY
8915: LIST
8916: LIST
8917: PPUSH
8918: CALL_OW 69
8922: AND
8923: PUSH
8924: LD_INT 1
8926: PPUSH
8927: CALL_OW 463
8931: NOT
8932: AND
8933: IFFALSE 9520
8935: GO 8937
8937: DISABLE
8938: LD_INT 0
8940: PPUSH
8941: PPUSH
// begin InGameOn ;
8942: CALL_OW 8
// ape := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
8946: LD_ADDR_VAR 0 2
8950: PUSH
8951: LD_INT 22
8953: PUSH
8954: LD_INT 0
8956: PUSH
8957: EMPTY
8958: LIST
8959: LIST
8960: PUSH
8961: LD_INT 25
8963: PUSH
8964: LD_INT 12
8966: PUSH
8967: EMPTY
8968: LIST
8969: LIST
8970: PUSH
8971: EMPTY
8972: LIST
8973: LIST
8974: PPUSH
8975: CALL_OW 69
8979: ST_TO_ADDR
// ape := NearestUnitToUnit ( ape , Frank ) ;
8980: LD_ADDR_VAR 0 2
8984: PUSH
8985: LD_VAR 0 2
8989: PPUSH
8990: LD_EXP 15
8994: PPUSH
8995: CALL_OW 74
8999: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , Frank , 20 ] ] ) do
9000: LD_ADDR_VAR 0 1
9004: PUSH
9005: LD_INT 22
9007: PUSH
9008: LD_INT 1
9010: PUSH
9011: EMPTY
9012: LIST
9013: LIST
9014: PUSH
9015: LD_INT 21
9017: PUSH
9018: LD_INT 1
9020: PUSH
9021: EMPTY
9022: LIST
9023: LIST
9024: PUSH
9025: LD_INT 91
9027: PUSH
9028: LD_EXP 15
9032: PUSH
9033: LD_INT 20
9035: PUSH
9036: EMPTY
9037: LIST
9038: LIST
9039: LIST
9040: PUSH
9041: EMPTY
9042: LIST
9043: LIST
9044: LIST
9045: PPUSH
9046: CALL_OW 69
9050: PUSH
9051: FOR_IN
9052: IFFALSE 9070
// ComTurnUnit ( i , Frank ) ;
9054: LD_VAR 0 1
9058: PPUSH
9059: LD_EXP 15
9063: PPUSH
9064: CALL_OW 119
9068: GO 9051
9070: POP
9071: POP
// SetSide ( Frank , 1 ) ;
9072: LD_EXP 15
9076: PPUSH
9077: LD_INT 1
9079: PPUSH
9080: CALL_OW 235
// ComMoveUnit ( JMM , Frank ) ;
9084: LD_EXP 9
9088: PPUSH
9089: LD_EXP 15
9093: PPUSH
9094: CALL_OW 112
// AddComTurnUnit ( JMM , Frank ) ;
9098: LD_EXP 9
9102: PPUSH
9103: LD_EXP 15
9107: PPUSH
9108: CALL_OW 179
// CenterOnUnits ( Frank ) ;
9112: LD_EXP 15
9116: PPUSH
9117: CALL_OW 85
// Say ( Frank , D3a-Frank-1 ) ;
9121: LD_EXP 15
9125: PPUSH
9126: LD_STRING D3a-Frank-1
9128: PPUSH
9129: CALL_OW 88
// ComMoveXY ( ape , 42 , 78 ) ;
9133: LD_VAR 0 2
9137: PPUSH
9138: LD_INT 42
9140: PPUSH
9141: LD_INT 78
9143: PPUSH
9144: CALL_OW 111
// AddComTurnUnit ( ape , Frank ) ;
9148: LD_VAR 0 2
9152: PPUSH
9153: LD_EXP 15
9157: PPUSH
9158: CALL_OW 179
// if Lisa then
9162: LD_EXP 14
9166: IFFALSE 9180
// Say ( Lisa , D3a-Lisa-1 ) ;
9168: LD_EXP 14
9172: PPUSH
9173: LD_STRING D3a-Lisa-1
9175: PPUSH
9176: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
9180: LD_EXP 9
9184: PPUSH
9185: LD_STRING D3a-JMM-1
9187: PPUSH
9188: CALL_OW 88
// if Cyrus then
9192: LD_EXP 13
9196: IFFALSE 9210
// Say ( Cyrus , D3a-Cyrus-1 ) ;
9198: LD_EXP 13
9202: PPUSH
9203: LD_STRING D3a-Cyrus-1
9205: PPUSH
9206: CALL_OW 88
// if GetRandom ( sex_male ) then
9210: LD_INT 1
9212: PPUSH
9213: CALL 651 0 1
9217: IFFALSE 9238
// Say ( GetRandom ( sex_male ) [ 1 ] , D3a-Sol1-1 ) ;
9219: LD_INT 1
9221: PPUSH
9222: CALL 651 0 1
9226: PUSH
9227: LD_INT 1
9229: ARRAY
9230: PPUSH
9231: LD_STRING D3a-Sol1-1
9233: PPUSH
9234: CALL_OW 88
// if GetRandom ( sex_female ) then
9238: LD_INT 2
9240: PPUSH
9241: CALL 651 0 1
9245: IFFALSE 9266
// Say ( GetRandom ( sex_female ) [ 1 ] , D3a-FSol1-1 ) ;
9247: LD_INT 2
9249: PPUSH
9250: CALL 651 0 1
9254: PUSH
9255: LD_INT 1
9257: ARRAY
9258: PPUSH
9259: LD_STRING D3a-FSol1-1
9261: PPUSH
9262: CALL_OW 88
// if Gladstone then
9266: LD_EXP 16
9270: IFFALSE 9284
// Say ( Gladstone , D3a-Glad-1 ) ;
9272: LD_EXP 16
9276: PPUSH
9277: LD_STRING D3a-Glad-1
9279: PPUSH
9280: CALL_OW 88
// ComMoveXY ( ape , 60 , 113 ) ;
9284: LD_VAR 0 2
9288: PPUSH
9289: LD_INT 60
9291: PPUSH
9292: LD_INT 113
9294: PPUSH
9295: CALL_OW 111
// Say ( Frank , D3a-Frank-2 ) ;
9299: LD_EXP 15
9303: PPUSH
9304: LD_STRING D3a-Frank-2
9306: PPUSH
9307: CALL_OW 88
// ComTurnUnit ( Frank , JMM ) ;
9311: LD_EXP 15
9315: PPUSH
9316: LD_EXP 9
9320: PPUSH
9321: CALL_OW 119
// Say ( JMM , D3a-JMM-2 ) ;
9325: LD_EXP 9
9329: PPUSH
9330: LD_STRING D3a-JMM-2
9332: PPUSH
9333: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9337: LD_INT 1
9339: PPUSH
9340: LD_INT 4
9342: PPUSH
9343: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9347: LD_INT 85
9349: PPUSH
9350: LD_INT 134
9352: PPUSH
9353: CALL_OW 84
// Say ( Frank , D3a-Frank-3 ) ;
9357: LD_EXP 15
9361: PPUSH
9362: LD_STRING D3a-Frank-3
9364: PPUSH
9365: CALL_OW 88
// Wait ( 0 0$01 ) ;
9369: LD_INT 35
9371: PPUSH
9372: CALL_OW 67
// CenterOnXY ( 166 , 136 ) ;
9376: LD_INT 166
9378: PPUSH
9379: LD_INT 136
9381: PPUSH
9382: CALL_OW 84
// Say ( JMM , D3a-JMM-3 ) ;
9386: LD_EXP 9
9390: PPUSH
9391: LD_STRING D3a-JMM-3
9393: PPUSH
9394: CALL_OW 88
// Wait ( 0 0$01 ) ;
9398: LD_INT 35
9400: PPUSH
9401: CALL_OW 67
// CenterNowOnUnits ( Frank ) ;
9405: LD_EXP 15
9409: PPUSH
9410: CALL_OW 87
// Say ( Frank , D3a-Frank-4 ) ;
9414: LD_EXP 15
9418: PPUSH
9419: LD_STRING D3a-Frank-4
9421: PPUSH
9422: CALL_OW 88
// if Lisa then
9426: LD_EXP 14
9430: IFFALSE 9444
// Say ( Lisa , D3a-Lisa-4 ) ;
9432: LD_EXP 14
9436: PPUSH
9437: LD_STRING D3a-Lisa-4
9439: PPUSH
9440: CALL_OW 88
// Say ( JMM , D3a-JMM-4 ) ;
9444: LD_EXP 9
9448: PPUSH
9449: LD_STRING D3a-JMM-4
9451: PPUSH
9452: CALL_OW 88
// Say ( Frank , D3a-Frank-5 ) ;
9456: LD_EXP 15
9460: PPUSH
9461: LD_STRING D3a-Frank-5
9463: PPUSH
9464: CALL_OW 88
// Say ( JMM , D3a-JMM-5 ) ;
9468: LD_EXP 9
9472: PPUSH
9473: LD_STRING D3a-JMM-5
9475: PPUSH
9476: CALL_OW 88
// Say ( Frank , D3a-Frank-6 ) ;
9480: LD_EXP 15
9484: PPUSH
9485: LD_STRING D3a-Frank-6
9487: PPUSH
9488: CALL_OW 88
// Say ( JMM , D3a-JMM-6 ) ;
9492: LD_EXP 9
9496: PPUSH
9497: LD_STRING D3a-JMM-6
9499: PPUSH
9500: CALL_OW 88
// Say ( Frank , D3a-Frank-7 ) ;
9504: LD_EXP 15
9508: PPUSH
9509: LD_STRING D3a-Frank-7
9511: PPUSH
9512: CALL_OW 88
// InGameOff ;
9516: CALL_OW 9
// end ;
9520: PPOPN 2
9522: END
// every 0 0$1 trigger Kikuchi and not Frank and FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , GetX ( Kikuchi ) , GetY ( Kikuchi ) , 7 ] ] ) and not InBattle ( 1 ) do
9523: LD_EXP 18
9527: PUSH
9528: LD_EXP 15
9532: NOT
9533: AND
9534: PUSH
9535: LD_INT 22
9537: PUSH
9538: LD_INT 1
9540: PUSH
9541: EMPTY
9542: LIST
9543: LIST
9544: PUSH
9545: LD_INT 92
9547: PUSH
9548: LD_EXP 18
9552: PPUSH
9553: CALL_OW 250
9557: PUSH
9558: LD_EXP 18
9562: PPUSH
9563: CALL_OW 251
9567: PUSH
9568: LD_INT 7
9570: PUSH
9571: EMPTY
9572: LIST
9573: LIST
9574: LIST
9575: LIST
9576: PUSH
9577: EMPTY
9578: LIST
9579: LIST
9580: PPUSH
9581: CALL_OW 69
9585: AND
9586: PUSH
9587: LD_INT 1
9589: PPUSH
9590: CALL_OW 463
9594: NOT
9595: AND
9596: IFFALSE 9776
9598: GO 9600
9600: DISABLE
// begin InGameOn ;
9601: CALL_OW 8
// ComTurnUnit ( JMM , Kikuchi ) ;
9605: LD_EXP 9
9609: PPUSH
9610: LD_EXP 18
9614: PPUSH
9615: CALL_OW 119
// ComTurnUnit ( Kikuchi , JMM ) ;
9619: LD_EXP 18
9623: PPUSH
9624: LD_EXP 9
9628: PPUSH
9629: CALL_OW 119
// CenterOnUnits ( Kikuchi ) ;
9633: LD_EXP 18
9637: PPUSH
9638: CALL_OW 85
// Say ( Kikuchi , D3b-Yam-1 ) ;
9642: LD_EXP 18
9646: PPUSH
9647: LD_STRING D3b-Yam-1
9649: PPUSH
9650: CALL_OW 88
// Say ( JMM , D3b-JMM-1 ) ;
9654: LD_EXP 9
9658: PPUSH
9659: LD_STRING D3b-JMM-1
9661: PPUSH
9662: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9666: LD_INT 1
9668: PPUSH
9669: LD_INT 4
9671: PPUSH
9672: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9676: LD_INT 85
9678: PPUSH
9679: LD_INT 134
9681: PPUSH
9682: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-2 ) ;
9686: LD_EXP 18
9690: PPUSH
9691: LD_STRING D3b-Yam-2
9693: PPUSH
9694: CALL_OW 88
// Wait ( 0 0$01 ) ;
9698: LD_INT 35
9700: PPUSH
9701: CALL_OW 67
// Say ( JMM , D3b-JMM-2 ) ;
9705: LD_EXP 9
9709: PPUSH
9710: LD_STRING D3b-JMM-2
9712: PPUSH
9713: CALL_OW 88
// CenterOnXY ( 166 , 136 ) ;
9717: LD_INT 166
9719: PPUSH
9720: LD_INT 136
9722: PPUSH
9723: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-3 ) ;
9727: LD_EXP 18
9731: PPUSH
9732: LD_STRING D3b-Yam-3
9734: PPUSH
9735: CALL_OW 88
// CenterNowOnUnits ( JMM ) ;
9739: LD_EXP 9
9743: PPUSH
9744: CALL_OW 87
// Say ( JMM , D3b-JMM-3a ) ;
9748: LD_EXP 9
9752: PPUSH
9753: LD_STRING D3b-JMM-3a
9755: PPUSH
9756: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
9760: LD_EXP 18
9764: PPUSH
9765: LD_INT 1
9767: PPUSH
9768: CALL_OW 235
// InGameOff ;
9772: CALL_OW 9
// end ;
9776: END
// every 0 0$1 trigger FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var un , x , tw , i ;
9777: LD_INT 7
9779: PPUSH
9780: LD_INT 22
9782: PUSH
9783: LD_INT 1
9785: PUSH
9786: EMPTY
9787: LIST
9788: LIST
9789: PUSH
9790: LD_INT 3
9792: PUSH
9793: LD_INT 24
9795: PUSH
9796: LD_INT 1000
9798: PUSH
9799: EMPTY
9800: LIST
9801: LIST
9802: PUSH
9803: EMPTY
9804: LIST
9805: LIST
9806: PUSH
9807: EMPTY
9808: LIST
9809: LIST
9810: PPUSH
9811: CALL_OW 70
9815: IFFALSE 10271
9817: GO 9819
9819: DISABLE
9820: LD_INT 0
9822: PPUSH
9823: PPUSH
9824: PPUSH
9825: PPUSH
// begin repeat wait ( 0 0$1 ) ;
9826: LD_INT 35
9828: PPUSH
9829: CALL_OW 67
// un := FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
9833: LD_ADDR_VAR 0 1
9837: PUSH
9838: LD_INT 7
9840: PPUSH
9841: LD_INT 22
9843: PUSH
9844: LD_INT 1
9846: PUSH
9847: EMPTY
9848: LIST
9849: LIST
9850: PUSH
9851: LD_INT 3
9853: PUSH
9854: LD_INT 24
9856: PUSH
9857: LD_INT 1000
9859: PUSH
9860: EMPTY
9861: LIST
9862: LIST
9863: PUSH
9864: EMPTY
9865: LIST
9866: LIST
9867: PUSH
9868: EMPTY
9869: LIST
9870: LIST
9871: PPUSH
9872: CALL_OW 70
9876: ST_TO_ADDR
// if not un then
9877: LD_VAR 0 1
9881: NOT
9882: IFFALSE 9886
// continue ;
9884: GO 9826
// tw := NearbyTowerHasEnergy ( un [ 1 ] ) ;
9886: LD_ADDR_VAR 0 3
9890: PUSH
9891: LD_VAR 0 1
9895: PUSH
9896: LD_INT 1
9898: ARRAY
9899: PPUSH
9900: CALL 3548 0 1
9904: ST_TO_ADDR
// until tw ;
9905: LD_VAR 0 3
9909: IFFALSE 9826
// DialogueOn ;
9911: CALL_OW 6
// CenterNowOnUnits ( tw ) ;
9915: LD_VAR 0 3
9919: PPUSH
9920: CALL_OW 87
// if Lisa then
9924: LD_EXP 14
9928: IFFALSE 9956
// begin Say ( Lisa , D5-Lisa-1 ) ;
9930: LD_EXP 14
9934: PPUSH
9935: LD_STRING D5-Lisa-1
9937: PPUSH
9938: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
9942: LD_EXP 9
9946: PPUSH
9947: LD_STRING D5-JMM-1a
9949: PPUSH
9950: CALL_OW 88
// end else
9954: GO 9968
// Say ( JMM , D5-JMM-1 ) ;
9956: LD_EXP 9
9960: PPUSH
9961: LD_STRING D5-JMM-1
9963: PPUSH
9964: CALL_OW 88
// DialogueOff ;
9968: CALL_OW 7
// while ( true ) do
9972: LD_INT 1
9974: IFFALSE 10030
// begin wait ( 0 0$01 ) ;
9976: LD_INT 35
9978: PPUSH
9979: CALL_OW 67
// x := FilterUnitsExceptArea ( northElectro , [ [ f_btype , b_oil_power ] , [ f_see , 1 ] ] ) ;
9983: LD_ADDR_VAR 0 2
9987: PUSH
9988: LD_INT 8
9990: PPUSH
9991: LD_INT 30
9993: PUSH
9994: LD_INT 26
9996: PUSH
9997: EMPTY
9998: LIST
9999: LIST
10000: PUSH
10001: LD_INT 101
10003: PUSH
10004: LD_INT 1
10006: PUSH
10007: EMPTY
10008: LIST
10009: LIST
10010: PUSH
10011: EMPTY
10012: LIST
10013: LIST
10014: PPUSH
10015: CALL_OW 71
10019: ST_TO_ADDR
// if x then
10020: LD_VAR 0 2
10024: IFFALSE 10028
// break ;
10026: GO 10030
// end ;
10028: GO 9972
// CenterOnUnits ( x [ 1 ] ) ;
10030: LD_VAR 0 2
10034: PUSH
10035: LD_INT 1
10037: ARRAY
10038: PPUSH
10039: CALL_OW 85
// if Frank and GetSide ( Frank ) = 1 then
10043: LD_EXP 15
10047: PUSH
10048: LD_EXP 15
10052: PPUSH
10053: CALL_OW 255
10057: PUSH
10058: LD_INT 1
10060: EQUAL
10061: AND
10062: IFFALSE 10078
// Say ( Frank , D5a-Frank-1 ) else
10064: LD_EXP 15
10068: PPUSH
10069: LD_STRING D5a-Frank-1
10071: PPUSH
10072: CALL_OW 88
10076: GO 10132
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
10078: LD_EXP 18
10082: PUSH
10083: LD_EXP 18
10087: PPUSH
10088: CALL_OW 255
10092: PUSH
10093: LD_INT 1
10095: EQUAL
10096: AND
10097: IFFALSE 10113
// Say ( Kikuchi , D5a-Yam-1 ) else
10099: LD_EXP 18
10103: PPUSH
10104: LD_STRING D5a-Yam-1
10106: PPUSH
10107: CALL_OW 88
10111: GO 10132
// Say ( GetRandom ( sex_male ) [ 1 ] , D5a-Sol1-1 ) ;
10113: LD_INT 1
10115: PPUSH
10116: CALL 651 0 1
10120: PUSH
10121: LD_INT 1
10123: ARRAY
10124: PPUSH
10125: LD_STRING D5a-Sol1-1
10127: PPUSH
10128: CALL_OW 88
// Say ( JMM , D5a-JMM-1 ) ;
10132: LD_EXP 9
10136: PPUSH
10137: LD_STRING D5a-JMM-1
10139: PPUSH
10140: CALL_OW 88
// if Cyrus then
10144: LD_EXP 13
10148: IFFALSE 10162
// Say ( Cyrus , D5a-Cyrus-1 ) ;
10150: LD_EXP 13
10154: PPUSH
10155: LD_STRING D5a-Cyrus-1
10157: PPUSH
10158: CALL_OW 88
// x := false ;
10162: LD_ADDR_VAR 0 2
10166: PUSH
10167: LD_INT 0
10169: ST_TO_ADDR
// while ( true ) do
10170: LD_INT 1
10172: IFFALSE 10259
// begin wait ( 0 0$01 ) ;
10174: LD_INT 35
10176: PPUSH
10177: CALL_OW 67
// for i in FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) diff ru_dep_west do
10181: LD_ADDR_VAR 0 4
10185: PUSH
10186: LD_INT 2
10188: PUSH
10189: LD_INT 30
10191: PUSH
10192: LD_INT 0
10194: PUSH
10195: EMPTY
10196: LIST
10197: LIST
10198: PUSH
10199: LD_INT 30
10201: PUSH
10202: LD_INT 1
10204: PUSH
10205: EMPTY
10206: LIST
10207: LIST
10208: PUSH
10209: EMPTY
10210: LIST
10211: LIST
10212: LIST
10213: PPUSH
10214: CALL_OW 69
10218: PUSH
10219: LD_INT 1
10221: DIFF
10222: PUSH
10223: FOR_IN
10224: IFFALSE 10247
// if BaseNeedEnergy ( i ) then
10226: LD_VAR 0 4
10230: PPUSH
10231: CALL 2673 0 1
10235: IFFALSE 10245
// x := true ;
10237: LD_ADDR_VAR 0 2
10241: PUSH
10242: LD_INT 1
10244: ST_TO_ADDR
10245: GO 10223
10247: POP
10248: POP
// if x then
10249: LD_VAR 0 2
10253: IFFALSE 10257
// break ;
10255: GO 10259
// end ;
10257: GO 10170
// Say ( JMM , D5b-JMM-1 ) ;
10259: LD_EXP 9
10263: PPUSH
10264: LD_STRING D5b-JMM-1
10266: PPUSH
10267: CALL_OW 88
// end ;
10271: PPOPN 4
10273: END
// every 0 0$1 trigger time_to_end [ 1 ] < tick do
10274: LD_EXP 5
10278: PUSH
10279: LD_INT 1
10281: ARRAY
10282: PUSH
10283: LD_OWVAR 1
10287: LESS
10288: IFFALSE 10488
10290: GO 10292
10292: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10293: LD_INT 16
10295: PPUSH
10296: CALL_OW 301
10300: NOT
10301: IFFALSE 10324
// begin SayRadio ( Harisson , D3b-Har-3 ) ;
10303: LD_EXP 19
10307: PPUSH
10308: LD_STRING D3b-Har-3
10310: PPUSH
10311: CALL_OW 94
// ChangeMissionObjectives ( M2a ) ;
10315: LD_STRING M2a
10317: PPUSH
10318: CALL_OW 337
// end else
10322: GO 10343
// begin SayRadio ( Harisson , D3b-Har-3a ) ;
10324: LD_EXP 19
10328: PPUSH
10329: LD_STRING D3b-Har-3a
10331: PPUSH
10332: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
10336: LD_STRING M2
10338: PPUSH
10339: CALL_OW 337
// end ; can_end := true ;
10343: LD_ADDR_EXP 6
10347: PUSH
10348: LD_INT 1
10350: ST_TO_ADDR
// SetAreaMapShow ( endArea , 1 ) ;
10351: LD_INT 9
10353: PPUSH
10354: LD_INT 1
10356: PPUSH
10357: CALL_OW 424
// Wait ( 0 0$02 ) ;
10361: LD_INT 70
10363: PPUSH
10364: CALL_OW 67
// if Lisa then
10368: LD_EXP 14
10372: IFFALSE 10386
// Say ( Lisa , D3b-Lisa ) ;
10374: LD_EXP 14
10378: PPUSH
10379: LD_STRING D3b-Lisa
10381: PPUSH
10382: CALL_OW 88
// if Bobby then
10386: LD_EXP 12
10390: IFFALSE 10404
// Say ( Bobby , D3b-Bobby-3 ) ;
10392: LD_EXP 12
10396: PPUSH
10397: LD_STRING D3b-Bobby-3
10399: PPUSH
10400: CALL_OW 88
// if Cyrus then
10404: LD_EXP 13
10408: IFFALSE 10422
// Say ( Cyrus , D3b-Cyrus-3 ) ;
10410: LD_EXP 13
10414: PPUSH
10415: LD_STRING D3b-Cyrus-3
10417: PPUSH
10418: CALL_OW 88
// if Frank and GetSide ( Frank ) = 1 then
10422: LD_EXP 15
10426: PUSH
10427: LD_EXP 15
10431: PPUSH
10432: CALL_OW 255
10436: PUSH
10437: LD_INT 1
10439: EQUAL
10440: AND
10441: IFFALSE 10455
// Say ( Frank , D3b-Frank-3 ) ;
10443: LD_EXP 15
10447: PPUSH
10448: LD_STRING D3b-Frank-3
10450: PPUSH
10451: CALL_OW 88
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
10455: LD_EXP 18
10459: PUSH
10460: LD_EXP 18
10464: PPUSH
10465: CALL_OW 255
10469: PUSH
10470: LD_INT 1
10472: EQUAL
10473: AND
10474: IFFALSE 10488
// Say ( Kikuchi , D3b-Yam-4 ) ;
10476: LD_EXP 18
10480: PPUSH
10481: LD_STRING D3b-Yam-4
10483: PPUSH
10484: CALL_OW 88
// end ;
10488: END
// every 0 0$1 trigger time_to_end [ 2 ] < tick do
10489: LD_EXP 5
10493: PUSH
10494: LD_INT 2
10496: ARRAY
10497: PUSH
10498: LD_OWVAR 1
10502: LESS
10503: IFFALSE 10535
10505: GO 10507
10507: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
10508: LD_EXP 19
10512: PPUSH
10513: LD_STRING D4-Har-1
10515: PPUSH
10516: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
10520: LD_STRING M3
10522: PPUSH
10523: CALL_OW 337
// must_end := true ;
10527: LD_ADDR_EXP 7
10531: PUSH
10532: LD_INT 1
10534: ST_TO_ADDR
// end ;
10535: END
// every 0 0$01 trigger time_to_end [ 3 ] < tick do
10536: LD_EXP 5
10540: PUSH
10541: LD_INT 3
10543: ARRAY
10544: PUSH
10545: LD_OWVAR 1
10549: LESS
10550: IFFALSE 10581
10552: GO 10554
10554: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10555: LD_INT 16
10557: PPUSH
10558: CALL_OW 301
10562: NOT
10563: IFFALSE 10574
// YouLost ( TimeOut1 ) else
10565: LD_STRING TimeOut1
10567: PPUSH
10568: CALL_OW 104
10572: GO 10581
// YouLost ( TimeOut2 ) ;
10574: LD_STRING TimeOut2
10576: PPUSH
10577: CALL_OW 104
// end ;
10581: END
// every 0 0$1 trigger IsInArea ( JMM , endArea ) and can_end do var wait_on , i , tmp , m1 , m2 , m3 ;
10582: LD_EXP 9
10586: PPUSH
10587: LD_INT 9
10589: PPUSH
10590: CALL_OW 308
10594: PUSH
10595: LD_EXP 6
10599: AND
10600: IFFALSE 11700
10602: GO 10604
10604: DISABLE
10605: LD_INT 0
10607: PPUSH
10608: PPUSH
10609: PPUSH
10610: PPUSH
10611: PPUSH
10612: PPUSH
// begin wait_on := false ;
10613: LD_ADDR_VAR 0 1
10617: PUSH
10618: LD_INT 0
10620: ST_TO_ADDR
// if FilterPeople ( 1 ) + 0 > ( FilterPeopleArea ( 1 , endArea ) ^ FilterDriversArea ( 1 , endArea ) ) + 0 then
10621: LD_INT 1
10623: PPUSH
10624: CALL 2750 0 1
10628: PUSH
10629: LD_INT 0
10631: PLUS
10632: PUSH
10633: LD_INT 1
10635: PPUSH
10636: LD_INT 9
10638: PPUSH
10639: CALL 2841 0 2
10643: PUSH
10644: LD_INT 1
10646: PPUSH
10647: LD_INT 9
10649: PPUSH
10650: CALL 2888 0 2
10654: ADD
10655: PUSH
10656: LD_INT 0
10658: PLUS
10659: GREATER
10660: IFFALSE 10709
// case Query ( Q1 ) of 1 :
10662: LD_STRING Q1
10664: PPUSH
10665: CALL_OW 97
10669: PUSH
10670: LD_INT 1
10672: DOUBLE
10673: EQUAL
10674: IFTRUE 10678
10676: GO 10689
10678: POP
// wait_on := true ; 2 :
10679: LD_ADDR_VAR 0 1
10683: PUSH
10684: LD_INT 1
10686: ST_TO_ADDR
10687: GO 10709
10689: LD_INT 2
10691: DOUBLE
10692: EQUAL
10693: IFTRUE 10697
10695: GO 10708
10697: POP
// wait_on := false ; end ;
10698: LD_ADDR_VAR 0 1
10702: PUSH
10703: LD_INT 0
10705: ST_TO_ADDR
10706: GO 10709
10708: POP
// repeat wait ( 0 0$01 ) ;
10709: LD_INT 35
10711: PPUSH
10712: CALL_OW 67
// until ( not wait_on ) or ( FilterPeople ( 1 ) + 0 ) = ( FilterPeopleArea ( 1 , endArea ) ^ FilterDriversArea ( 1 , endArea ) ) + 0 ;
10716: LD_VAR 0 1
10720: NOT
10721: PUSH
10722: LD_INT 1
10724: PPUSH
10725: CALL 2750 0 1
10729: PUSH
10730: LD_INT 0
10732: PLUS
10733: PUSH
10734: LD_INT 1
10736: PPUSH
10737: LD_INT 9
10739: PPUSH
10740: CALL 2841 0 2
10744: PUSH
10745: LD_INT 1
10747: PPUSH
10748: LD_INT 9
10750: PPUSH
10751: CALL 2888 0 2
10755: ADD
10756: PUSH
10757: LD_INT 0
10759: PLUS
10760: EQUAL
10761: OR
10762: IFFALSE 10709
// DialogueOn ;
10764: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
10768: LD_EXP 9
10772: PPUSH
10773: CALL_OW 87
// Say ( JMM , D6-JMM-1 ) ;
10777: LD_EXP 9
10781: PPUSH
10782: LD_STRING D6-JMM-1
10784: PPUSH
10785: CALL_OW 88
// SayRadio ( Harisson , D6-Har-1 ) ;
10789: LD_EXP 19
10793: PPUSH
10794: LD_STRING D6-Har-1
10796: PPUSH
10797: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
10801: LD_EXP 9
10805: PPUSH
10806: LD_STRING D6-JMM-2
10808: PPUSH
10809: CALL_OW 88
// SayRadio ( Harisson , D6-Har-2 ) ;
10813: LD_EXP 19
10817: PPUSH
10818: LD_STRING D6-Har-2
10820: PPUSH
10821: CALL_OW 94
// Say ( JMM , D6-JMM-3 ) ;
10825: LD_EXP 9
10829: PPUSH
10830: LD_STRING D6-JMM-3
10832: PPUSH
10833: CALL_OW 88
// SayRadio ( Harisson , D6-Har-3 ) ;
10837: LD_EXP 19
10841: PPUSH
10842: LD_STRING D6-Har-3
10844: PPUSH
10845: CALL_OW 94
// Say ( JMM , D6-JMM-4 ) ;
10849: LD_EXP 9
10853: PPUSH
10854: LD_STRING D6-JMM-4
10856: PPUSH
10857: CALL_OW 88
// SayRadio ( Harisson , D6-Har-4 ) ;
10861: LD_EXP 19
10865: PPUSH
10866: LD_STRING D6-Har-4
10868: PPUSH
10869: CALL_OW 94
// Say ( JMM , D6-JMM-5 ) ;
10873: LD_EXP 9
10877: PPUSH
10878: LD_STRING D6-JMM-5
10880: PPUSH
10881: CALL_OW 88
// DialogueOff ;
10885: CALL_OW 7
// m1 := false ;
10889: LD_ADDR_VAR 0 4
10893: PUSH
10894: LD_INT 0
10896: ST_TO_ADDR
// m2 := false ;
10897: LD_ADDR_VAR 0 5
10901: PUSH
10902: LD_INT 0
10904: ST_TO_ADDR
// m3 := false ;
10905: LD_ADDR_VAR 0 6
10909: PUSH
10910: LD_INT 0
10912: ST_TO_ADDR
// tmp := FilterBuildings ( 3 ) ;
10913: LD_ADDR_VAR 0 3
10917: PUSH
10918: LD_INT 3
10920: PPUSH
10921: CALL 3019 0 1
10925: ST_TO_ADDR
// if tmp >= 35 then
10926: LD_VAR 0 3
10930: PUSH
10931: LD_INT 35
10933: GREATEREQUAL
10934: IFFALSE 10971
// begin AddMedal ( Destroy1 , - 1 ) ;
10936: LD_STRING Destroy1
10938: PPUSH
10939: LD_INT 1
10941: NEG
10942: PPUSH
10943: CALL_OW 101
// AddMedal ( Destroy2 , - 1 ) ;
10947: LD_STRING Destroy2
10949: PPUSH
10950: LD_INT 1
10952: NEG
10953: PPUSH
10954: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
10958: LD_STRING Destroy3
10960: PPUSH
10961: LD_INT 1
10963: NEG
10964: PPUSH
10965: CALL_OW 101
// end else
10969: GO 11082
// begin AddMedal ( Destroy1 , 1 ) ;
10971: LD_STRING Destroy1
10973: PPUSH
10974: LD_INT 1
10976: PPUSH
10977: CALL_OW 101
// m1 := true ;
10981: LD_ADDR_VAR 0 4
10985: PUSH
10986: LD_INT 1
10988: ST_TO_ADDR
// if tmp >= 25 then
10989: LD_VAR 0 3
10993: PUSH
10994: LD_INT 25
10996: GREATEREQUAL
10997: IFFALSE 11023
// begin AddMedal ( Destroy2 , - 1 ) ;
10999: LD_STRING Destroy2
11001: PPUSH
11002: LD_INT 1
11004: NEG
11005: PPUSH
11006: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
11010: LD_STRING Destroy3
11012: PPUSH
11013: LD_INT 1
11015: NEG
11016: PPUSH
11017: CALL_OW 101
// end else
11021: GO 11082
// begin AddMedal ( Destroy2 , 1 ) ;
11023: LD_STRING Destroy2
11025: PPUSH
11026: LD_INT 1
11028: PPUSH
11029: CALL_OW 101
// m2 := true ;
11033: LD_ADDR_VAR 0 5
11037: PUSH
11038: LD_INT 1
11040: ST_TO_ADDR
// if tmp >= 15 then
11041: LD_VAR 0 3
11045: PUSH
11046: LD_INT 15
11048: GREATEREQUAL
11049: IFFALSE 11064
// AddMedal ( Destroy3 , - 1 ) else
11051: LD_STRING Destroy3
11053: PPUSH
11054: LD_INT 1
11056: NEG
11057: PPUSH
11058: CALL_OW 101
11062: GO 11082
// begin AddMedal ( Destroy3 , 1 ) ;
11064: LD_STRING Destroy3
11066: PPUSH
11067: LD_INT 1
11069: PPUSH
11070: CALL_OW 101
// m3 := true ;
11074: LD_ADDR_VAR 0 6
11078: PUSH
11079: LD_INT 1
11081: ST_TO_ADDR
// end ; end ; end ; if tick <= 32 32$00 then
11082: LD_OWVAR 1
11086: PUSH
11087: LD_INT 67200
11089: LESSEQUAL
11090: IFFALSE 11099
// SetAchievement ( ACH_ASPEED_7 ) ;
11092: LD_STRING ACH_ASPEED_7
11094: PPUSH
11095: CALL_OW 543
// if m1 and m2 and m3 and Difficulty = 3 then
11099: LD_VAR 0 4
11103: PUSH
11104: LD_VAR 0 5
11108: AND
11109: PUSH
11110: LD_VAR 0 6
11114: AND
11115: PUSH
11116: LD_OWVAR 67
11120: PUSH
11121: LD_INT 3
11123: EQUAL
11124: AND
11125: IFFALSE 11137
// SetAchievementEX ( ACH_AMER , 7 ) ;
11127: LD_STRING ACH_AMER
11129: PPUSH
11130: LD_INT 7
11132: PPUSH
11133: CALL_OW 564
// GiveMedals ( MAIN ) ;
11137: LD_STRING MAIN
11139: PPUSH
11140: CALL_OW 102
// tmp := FilterPeopleArea ( 1 , endArea ) union FilterDriversArea ( 1 , endArea ) ;
11144: LD_ADDR_VAR 0 3
11148: PUSH
11149: LD_INT 1
11151: PPUSH
11152: LD_INT 9
11154: PPUSH
11155: CALL 2841 0 2
11159: PUSH
11160: LD_INT 1
11162: PPUSH
11163: LD_INT 9
11165: PPUSH
11166: CALL 2888 0 2
11170: UNION
11171: ST_TO_ADDR
// RewardPeople ( tmp ) ;
11172: LD_VAR 0 3
11176: PPUSH
11177: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
11181: LD_EXP 9
11185: PPUSH
11186: LD_EXP 3
11190: PUSH
11191: LD_STRING JMM
11193: STR
11194: PPUSH
11195: CALL_OW 38
// if Brown in tmp then
11199: LD_EXP 10
11203: PUSH
11204: LD_VAR 0 3
11208: IN
11209: IFFALSE 11229
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
11211: LD_EXP 10
11215: PPUSH
11216: LD_EXP 3
11220: PUSH
11221: LD_STRING Brown
11223: STR
11224: PPUSH
11225: CALL_OW 38
// if Donaldson in tmp then
11229: LD_EXP 11
11233: PUSH
11234: LD_VAR 0 3
11238: IN
11239: IFFALSE 11259
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
11241: LD_EXP 11
11245: PPUSH
11246: LD_EXP 3
11250: PUSH
11251: LD_STRING Donaldson
11253: STR
11254: PPUSH
11255: CALL_OW 38
// if Bobby in tmp then
11259: LD_EXP 12
11263: PUSH
11264: LD_VAR 0 3
11268: IN
11269: IFFALSE 11289
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
11271: LD_EXP 12
11275: PPUSH
11276: LD_EXP 3
11280: PUSH
11281: LD_STRING Bobby
11283: STR
11284: PPUSH
11285: CALL_OW 38
// if Cyrus in tmp then
11289: LD_EXP 13
11293: PUSH
11294: LD_VAR 0 3
11298: IN
11299: IFFALSE 11319
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
11301: LD_EXP 13
11305: PPUSH
11306: LD_EXP 3
11310: PUSH
11311: LD_STRING Cyrus
11313: STR
11314: PPUSH
11315: CALL_OW 38
// if Lisa in tmp then
11319: LD_EXP 14
11323: PUSH
11324: LD_VAR 0 3
11328: IN
11329: IFFALSE 11349
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
11331: LD_EXP 14
11335: PPUSH
11336: LD_EXP 3
11340: PUSH
11341: LD_STRING Lisa
11343: STR
11344: PPUSH
11345: CALL_OW 38
// if Frank in tmp then
11349: LD_EXP 15
11353: PUSH
11354: LD_VAR 0 3
11358: IN
11359: IFFALSE 11379
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
11361: LD_EXP 15
11365: PPUSH
11366: LD_EXP 3
11370: PUSH
11371: LD_STRING Frank
11373: STR
11374: PPUSH
11375: CALL_OW 38
// if Gladstone in tmp then
11379: LD_EXP 16
11383: PUSH
11384: LD_VAR 0 3
11388: IN
11389: IFFALSE 11409
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
11391: LD_EXP 16
11395: PPUSH
11396: LD_EXP 3
11400: PUSH
11401: LD_STRING Gladstone
11403: STR
11404: PPUSH
11405: CALL_OW 38
// if Khatam in tmp then
11409: LD_EXP 17
11413: PUSH
11414: LD_VAR 0 3
11418: IN
11419: IFFALSE 11439
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
11421: LD_EXP 17
11425: PPUSH
11426: LD_EXP 3
11430: PUSH
11431: LD_STRING Khatam
11433: STR
11434: PPUSH
11435: CALL_OW 38
// if Kikuchi in tmp then
11439: LD_EXP 18
11443: PUSH
11444: LD_VAR 0 3
11448: IN
11449: IFFALSE 11469
// SaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
11451: LD_EXP 18
11455: PPUSH
11456: LD_EXP 3
11460: PUSH
11461: LD_STRING Kikuchi
11463: STR
11464: PPUSH
11465: CALL_OW 38
// SaveCharacters ( tmp diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] , mission_prefix & others ) ;
11469: LD_VAR 0 3
11473: PUSH
11474: LD_EXP 9
11478: PUSH
11479: LD_EXP 10
11483: PUSH
11484: LD_EXP 11
11488: PUSH
11489: LD_EXP 12
11493: PUSH
11494: LD_EXP 13
11498: PUSH
11499: LD_EXP 14
11503: PUSH
11504: LD_EXP 15
11508: PUSH
11509: LD_EXP 16
11513: PUSH
11514: LD_EXP 18
11518: PUSH
11519: LD_EXP 17
11523: PUSH
11524: EMPTY
11525: LIST
11526: LIST
11527: LIST
11528: LIST
11529: LIST
11530: LIST
11531: LIST
11532: LIST
11533: LIST
11534: LIST
11535: DIFF
11536: PPUSH
11537: LD_EXP 3
11541: PUSH
11542: LD_STRING others
11544: STR
11545: PPUSH
11546: CALL_OW 38
// SaveVariable ( tick , 07_time ) ;
11550: LD_OWVAR 1
11554: PPUSH
11555: LD_STRING 07_time
11557: PPUSH
11558: CALL_OW 39
// tmp := [ ] ;
11562: LD_ADDR_VAR 0 3
11566: PUSH
11567: EMPTY
11568: ST_TO_ADDR
// for i in FilterUnitsInArea ( endArea , [ [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] ] ] ) do
11569: LD_ADDR_VAR 0 2
11573: PUSH
11574: LD_INT 9
11576: PPUSH
11577: LD_INT 22
11579: PUSH
11580: LD_INT 1
11582: PUSH
11583: EMPTY
11584: LIST
11585: LIST
11586: PUSH
11587: LD_INT 23
11589: PUSH
11590: LD_INT 1
11592: PUSH
11593: EMPTY
11594: LIST
11595: LIST
11596: PUSH
11597: LD_INT 21
11599: PUSH
11600: LD_INT 2
11602: PUSH
11603: EMPTY
11604: LIST
11605: LIST
11606: PUSH
11607: EMPTY
11608: LIST
11609: LIST
11610: LIST
11611: PUSH
11612: EMPTY
11613: LIST
11614: PPUSH
11615: CALL_OW 70
11619: PUSH
11620: FOR_IN
11621: IFFALSE 11682
// tmp := tmp ^ [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ;
11623: LD_ADDR_VAR 0 3
11627: PUSH
11628: LD_VAR 0 3
11632: PUSH
11633: LD_VAR 0 2
11637: PPUSH
11638: CALL_OW 265
11642: PUSH
11643: LD_VAR 0 2
11647: PPUSH
11648: CALL_OW 262
11652: PUSH
11653: LD_VAR 0 2
11657: PPUSH
11658: CALL_OW 263
11662: PUSH
11663: LD_VAR 0 2
11667: PPUSH
11668: CALL_OW 264
11672: PUSH
11673: EMPTY
11674: LIST
11675: LIST
11676: LIST
11677: LIST
11678: ADD
11679: ST_TO_ADDR
11680: GO 11620
11682: POP
11683: POP
// SaveVariable ( tmp , 07_vehicles ) ;
11684: LD_VAR 0 3
11688: PPUSH
11689: LD_STRING 07_vehicles
11691: PPUSH
11692: CALL_OW 39
// YouWin ;
11696: CALL_OW 103
// end ; end_of_file
11700: PPOPN 6
11702: END
// on UnitDestroyed ( un ) do begin if un = JMM then
11703: LD_VAR 0 1
11707: PUSH
11708: LD_EXP 9
11712: EQUAL
11713: IFFALSE 11722
// YouLost ( JMM ) ;
11715: LD_STRING JMM
11717: PPUSH
11718: CALL_OW 104
// if GetType ( un ) = unit_building then
11722: LD_VAR 0 1
11726: PPUSH
11727: CALL_OW 247
11731: PUSH
11732: LD_INT 3
11734: EQUAL
11735: IFFALSE 11751
// buildings_counter := buildings_counter + 1 ;
11737: LD_ADDR_EXP 4
11741: PUSH
11742: LD_EXP 4
11746: PUSH
11747: LD_INT 1
11749: PLUS
11750: ST_TO_ADDR
// if un in FilterUnitsInArea ( baseArea , [ f_or , [ f_btype , b_turret ] , [ f_btype , b_bunker ] ] ) then
11751: LD_VAR 0 1
11755: PUSH
11756: LD_INT 6
11758: PPUSH
11759: LD_INT 2
11761: PUSH
11762: LD_INT 30
11764: PUSH
11765: LD_INT 33
11767: PUSH
11768: EMPTY
11769: LIST
11770: LIST
11771: PUSH
11772: LD_INT 30
11774: PUSH
11775: LD_INT 32
11777: PUSH
11778: EMPTY
11779: LIST
11780: LIST
11781: PUSH
11782: EMPTY
11783: LIST
11784: LIST
11785: LIST
11786: PPUSH
11787: CALL_OW 70
11791: IN
11792: IFFALSE 11851
// ru_rebuild_list := ru_rebuild_list ^ [ GetBType ( un ) , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ;
11794: LD_ADDR_EXP 20
11798: PUSH
11799: LD_EXP 20
11803: PUSH
11804: LD_VAR 0 1
11808: PPUSH
11809: CALL_OW 266
11813: PUSH
11814: LD_VAR 0 1
11818: PPUSH
11819: CALL_OW 250
11823: PUSH
11824: LD_VAR 0 1
11828: PPUSH
11829: CALL_OW 251
11833: PUSH
11834: LD_VAR 0 1
11838: PPUSH
11839: CALL_OW 254
11843: PUSH
11844: EMPTY
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: ADD
11850: ST_TO_ADDR
// if un = ru_dep_main then
11851: LD_VAR 0 1
11855: PUSH
11856: LD_INT 16
11858: EQUAL
11859: IFFALSE 11868
// ChangeMissionObjectives ( M1a ) ;
11861: LD_STRING M1a
11863: PPUSH
11864: CALL_OW 337
// if GetType ( un ) = unit_human and GetSide ( un ) = 3 then
11868: LD_VAR 0 1
11872: PPUSH
11873: CALL_OW 247
11877: PUSH
11878: LD_INT 1
11880: EQUAL
11881: PUSH
11882: LD_VAR 0 1
11886: PPUSH
11887: CALL_OW 255
11891: PUSH
11892: LD_INT 3
11894: EQUAL
11895: AND
11896: IFFALSE 11912
// kill_counter := kill_counter + 1 ;
11898: LD_ADDR_EXP 8
11902: PUSH
11903: LD_EXP 8
11907: PUSH
11908: LD_INT 1
11910: PLUS
11911: ST_TO_ADDR
// end ;
11912: PPOPN 1
11914: END
// on BuildingStarted ( b , builder ) do var i ;
11915: LD_INT 0
11917: PPUSH
// begin if GetSide ( b ) = 3 then
11918: LD_VAR 0 1
11922: PPUSH
11923: CALL_OW 255
11927: PUSH
11928: LD_INT 3
11930: EQUAL
11931: IFFALSE 11971
// for i = 1 to 4 do
11933: LD_ADDR_VAR 0 3
11937: PUSH
11938: DOUBLE
11939: LD_INT 1
11941: DEC
11942: ST_TO_ADDR
11943: LD_INT 4
11945: PUSH
11946: FOR_TO
11947: IFFALSE 11969
// ru_rebuild_list := Delete ( ru_rebuild_list , 1 ) ;
11949: LD_ADDR_EXP 20
11953: PUSH
11954: LD_EXP 20
11958: PPUSH
11959: LD_INT 1
11961: PPUSH
11962: CALL_OW 3
11966: ST_TO_ADDR
11967: GO 11946
11969: POP
11970: POP
// end ;
11971: PPOPN 3
11973: END
// on BuildingComplete ( b ) do if GetBType ( b ) in [ b_bunker , b_turret ] then
11974: LD_VAR 0 1
11978: PPUSH
11979: CALL_OW 266
11983: PUSH
11984: LD_INT 32
11986: PUSH
11987: LD_INT 33
11989: PUSH
11990: EMPTY
11991: LIST
11992: LIST
11993: IN
11994: IFFALSE 12008
// ComPlaceWeapon ( b , ru_gatling_gun ) ;
11996: LD_VAR 0 1
12000: PPUSH
12001: LD_INT 43
12003: PPUSH
12004: CALL_OW 148
12008: PPOPN 1
12010: END
// on LeaveBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
12011: LD_VAR 0 1
12015: PUSH
12016: LD_INT 22
12018: PUSH
12019: LD_INT 3
12021: PUSH
12022: EMPTY
12023: LIST
12024: LIST
12025: PUSH
12026: LD_INT 2
12028: PUSH
12029: LD_INT 30
12031: PUSH
12032: LD_INT 31
12034: PUSH
12035: EMPTY
12036: LIST
12037: LIST
12038: PUSH
12039: LD_INT 30
12041: PUSH
12042: LD_INT 32
12044: PUSH
12045: EMPTY
12046: LIST
12047: LIST
12048: PUSH
12049: EMPTY
12050: LIST
12051: LIST
12052: LIST
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: PPUSH
12058: CALL_OW 69
12062: IN
12063: IFFALSE 12085
// GoToAnotherTower ( un , b , 143 , 143 ) ;
12065: LD_VAR 0 2
12069: PPUSH
12070: LD_VAR 0 1
12074: PPUSH
12075: LD_INT 143
12077: PPUSH
12078: LD_INT 143
12080: PPUSH
12081: CALL 2200 0 4
// end ;
12085: PPOPN 2
12087: END
// on EnterBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) then
12088: LD_VAR 0 1
12092: PUSH
12093: LD_INT 22
12095: PUSH
12096: LD_INT 3
12098: PUSH
12099: EMPTY
12100: LIST
12101: LIST
12102: PUSH
12103: LD_INT 30
12105: PUSH
12106: LD_INT 32
12108: PUSH
12109: EMPTY
12110: LIST
12111: LIST
12112: PUSH
12113: EMPTY
12114: LIST
12115: LIST
12116: PPUSH
12117: CALL_OW 69
12121: IN
12122: IFFALSE 12136
// SetTag ( b , 0 ) ;
12124: LD_VAR 0 1
12128: PPUSH
12129: LD_INT 0
12131: PPUSH
12132: CALL_OW 109
// end ; end_of_file
12136: PPOPN 2
12138: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
12139: GO 12141
12141: DISABLE
// begin ru_radar := 98 ;
12142: LD_ADDR_EXP 21
12146: PUSH
12147: LD_INT 98
12149: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
12150: LD_ADDR_EXP 22
12154: PUSH
12155: LD_INT 89
12157: ST_TO_ADDR
// us_hack := 99 ;
12158: LD_ADDR_EXP 23
12162: PUSH
12163: LD_INT 99
12165: ST_TO_ADDR
// us_artillery := 97 ;
12166: LD_ADDR_EXP 24
12170: PUSH
12171: LD_INT 97
12173: ST_TO_ADDR
// ar_bio_bomb := 91 ;
12174: LD_ADDR_EXP 25
12178: PUSH
12179: LD_INT 91
12181: ST_TO_ADDR
// end ; end_of_file end_of_file
12182: END
// export StreamModeActive , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu ; every 0 0$1 do
12183: GO 12185
12185: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
12186: LD_STRING initStreamRollete();
12188: PPUSH
12189: CALL_OW 559
// InitStreamMode ;
12193: CALL 12198 0 0
// end ;
12197: END
// function InitStreamMode ; begin
12198: LD_INT 0
12200: PPUSH
// streamModeActive := false ;
12201: LD_ADDR_EXP 26
12205: PUSH
12206: LD_INT 0
12208: ST_TO_ADDR
// sRocket := false ;
12209: LD_ADDR_EXP 29
12213: PUSH
12214: LD_INT 0
12216: ST_TO_ADDR
// sSpeed := false ;
12217: LD_ADDR_EXP 28
12221: PUSH
12222: LD_INT 0
12224: ST_TO_ADDR
// sEngine := false ;
12225: LD_ADDR_EXP 30
12229: PUSH
12230: LD_INT 0
12232: ST_TO_ADDR
// sSpec := false ;
12233: LD_ADDR_EXP 27
12237: PUSH
12238: LD_INT 0
12240: ST_TO_ADDR
// sLevel := false ;
12241: LD_ADDR_EXP 31
12245: PUSH
12246: LD_INT 0
12248: ST_TO_ADDR
// sArmoury := false ;
12249: LD_ADDR_EXP 32
12253: PUSH
12254: LD_INT 0
12256: ST_TO_ADDR
// sRadar := false ;
12257: LD_ADDR_EXP 33
12261: PUSH
12262: LD_INT 0
12264: ST_TO_ADDR
// sBunker := false ;
12265: LD_ADDR_EXP 34
12269: PUSH
12270: LD_INT 0
12272: ST_TO_ADDR
// sHack := false ;
12273: LD_ADDR_EXP 35
12277: PUSH
12278: LD_INT 0
12280: ST_TO_ADDR
// sFire := false ;
12281: LD_ADDR_EXP 36
12285: PUSH
12286: LD_INT 0
12288: ST_TO_ADDR
// sRefresh := false ;
12289: LD_ADDR_EXP 37
12293: PUSH
12294: LD_INT 0
12296: ST_TO_ADDR
// sExp := false ;
12297: LD_ADDR_EXP 38
12301: PUSH
12302: LD_INT 0
12304: ST_TO_ADDR
// sDepot := false ;
12305: LD_ADDR_EXP 39
12309: PUSH
12310: LD_INT 0
12312: ST_TO_ADDR
// sFlag := false ;
12313: LD_ADDR_EXP 40
12317: PUSH
12318: LD_INT 0
12320: ST_TO_ADDR
// sKamikadze := false ;
12321: LD_ADDR_EXP 48
12325: PUSH
12326: LD_INT 0
12328: ST_TO_ADDR
// sTroll := false ;
12329: LD_ADDR_EXP 49
12333: PUSH
12334: LD_INT 0
12336: ST_TO_ADDR
// sSlow := false ;
12337: LD_ADDR_EXP 50
12341: PUSH
12342: LD_INT 0
12344: ST_TO_ADDR
// sLack := false ;
12345: LD_ADDR_EXP 51
12349: PUSH
12350: LD_INT 0
12352: ST_TO_ADDR
// sTank := false ;
12353: LD_ADDR_EXP 53
12357: PUSH
12358: LD_INT 0
12360: ST_TO_ADDR
// sRemote := false ;
12361: LD_ADDR_EXP 54
12365: PUSH
12366: LD_INT 0
12368: ST_TO_ADDR
// sPowell := false ;
12369: LD_ADDR_EXP 55
12373: PUSH
12374: LD_INT 0
12376: ST_TO_ADDR
// sTeleport := false ;
12377: LD_ADDR_EXP 58
12381: PUSH
12382: LD_INT 0
12384: ST_TO_ADDR
// sOilTower := false ;
12385: LD_ADDR_EXP 60
12389: PUSH
12390: LD_INT 0
12392: ST_TO_ADDR
// sShovel := false ;
12393: LD_ADDR_EXP 61
12397: PUSH
12398: LD_INT 0
12400: ST_TO_ADDR
// sSheik := false ;
12401: LD_ADDR_EXP 62
12405: PUSH
12406: LD_INT 0
12408: ST_TO_ADDR
// sSold := false ;
12409: LD_ADDR_EXP 41
12413: PUSH
12414: LD_INT 0
12416: ST_TO_ADDR
// sDiff := false ;
12417: LD_ADDR_EXP 42
12421: PUSH
12422: LD_INT 0
12424: ST_TO_ADDR
// sFog := false ;
12425: LD_ADDR_EXP 45
12429: PUSH
12430: LD_INT 0
12432: ST_TO_ADDR
// sReset := false ;
12433: LD_ADDR_EXP 46
12437: PUSH
12438: LD_INT 0
12440: ST_TO_ADDR
// sSun := false ;
12441: LD_ADDR_EXP 47
12445: PUSH
12446: LD_INT 0
12448: ST_TO_ADDR
// sTiger := false ;
12449: LD_ADDR_EXP 43
12453: PUSH
12454: LD_INT 0
12456: ST_TO_ADDR
// sBomb := false ;
12457: LD_ADDR_EXP 44
12461: PUSH
12462: LD_INT 0
12464: ST_TO_ADDR
// sWound := false ;
12465: LD_ADDR_EXP 52
12469: PUSH
12470: LD_INT 0
12472: ST_TO_ADDR
// sBetray := false ;
12473: LD_ADDR_EXP 56
12477: PUSH
12478: LD_INT 0
12480: ST_TO_ADDR
// sContamin := false ;
12481: LD_ADDR_EXP 57
12485: PUSH
12486: LD_INT 0
12488: ST_TO_ADDR
// sOil := false ;
12489: LD_ADDR_EXP 59
12493: PUSH
12494: LD_INT 0
12496: ST_TO_ADDR
// sStu := false ;
12497: LD_ADDR_EXP 63
12501: PUSH
12502: LD_INT 0
12504: ST_TO_ADDR
// end ;
12505: LD_VAR 0 1
12509: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
12510: LD_VAR 0 2
12514: PUSH
12515: LD_INT 100
12517: EQUAL
12518: IFFALSE 13215
// begin if not StreamModeActive then
12520: LD_EXP 26
12524: NOT
12525: IFFALSE 12535
// StreamModeActive := true ;
12527: LD_ADDR_EXP 26
12531: PUSH
12532: LD_INT 1
12534: ST_TO_ADDR
// if p3 = 0 then
12535: LD_VAR 0 3
12539: PUSH
12540: LD_INT 0
12542: EQUAL
12543: IFFALSE 12549
// InitStreamMode ;
12545: CALL 12198 0 0
// if p3 = 1 then
12549: LD_VAR 0 3
12553: PUSH
12554: LD_INT 1
12556: EQUAL
12557: IFFALSE 12567
// sRocket := true ;
12559: LD_ADDR_EXP 29
12563: PUSH
12564: LD_INT 1
12566: ST_TO_ADDR
// if p3 = 2 then
12567: LD_VAR 0 3
12571: PUSH
12572: LD_INT 2
12574: EQUAL
12575: IFFALSE 12585
// sSpeed := true ;
12577: LD_ADDR_EXP 28
12581: PUSH
12582: LD_INT 1
12584: ST_TO_ADDR
// if p3 = 3 then
12585: LD_VAR 0 3
12589: PUSH
12590: LD_INT 3
12592: EQUAL
12593: IFFALSE 12603
// sEngine := true ;
12595: LD_ADDR_EXP 30
12599: PUSH
12600: LD_INT 1
12602: ST_TO_ADDR
// if p3 = 4 then
12603: LD_VAR 0 3
12607: PUSH
12608: LD_INT 4
12610: EQUAL
12611: IFFALSE 12621
// sSpec := true ;
12613: LD_ADDR_EXP 27
12617: PUSH
12618: LD_INT 1
12620: ST_TO_ADDR
// if p3 = 5 then
12621: LD_VAR 0 3
12625: PUSH
12626: LD_INT 5
12628: EQUAL
12629: IFFALSE 12639
// sLevel := true ;
12631: LD_ADDR_EXP 31
12635: PUSH
12636: LD_INT 1
12638: ST_TO_ADDR
// if p3 = 6 then
12639: LD_VAR 0 3
12643: PUSH
12644: LD_INT 6
12646: EQUAL
12647: IFFALSE 12657
// sArmoury := true ;
12649: LD_ADDR_EXP 32
12653: PUSH
12654: LD_INT 1
12656: ST_TO_ADDR
// if p3 = 7 then
12657: LD_VAR 0 3
12661: PUSH
12662: LD_INT 7
12664: EQUAL
12665: IFFALSE 12675
// sRadar := true ;
12667: LD_ADDR_EXP 33
12671: PUSH
12672: LD_INT 1
12674: ST_TO_ADDR
// if p3 = 8 then
12675: LD_VAR 0 3
12679: PUSH
12680: LD_INT 8
12682: EQUAL
12683: IFFALSE 12693
// sBunker := true ;
12685: LD_ADDR_EXP 34
12689: PUSH
12690: LD_INT 1
12692: ST_TO_ADDR
// if p3 = 9 then
12693: LD_VAR 0 3
12697: PUSH
12698: LD_INT 9
12700: EQUAL
12701: IFFALSE 12711
// sHack := true ;
12703: LD_ADDR_EXP 35
12707: PUSH
12708: LD_INT 1
12710: ST_TO_ADDR
// if p3 = 10 then
12711: LD_VAR 0 3
12715: PUSH
12716: LD_INT 10
12718: EQUAL
12719: IFFALSE 12729
// sFire := true ;
12721: LD_ADDR_EXP 36
12725: PUSH
12726: LD_INT 1
12728: ST_TO_ADDR
// if p3 = 11 then
12729: LD_VAR 0 3
12733: PUSH
12734: LD_INT 11
12736: EQUAL
12737: IFFALSE 12747
// sRefresh := true ;
12739: LD_ADDR_EXP 37
12743: PUSH
12744: LD_INT 1
12746: ST_TO_ADDR
// if p3 = 12 then
12747: LD_VAR 0 3
12751: PUSH
12752: LD_INT 12
12754: EQUAL
12755: IFFALSE 12765
// sExp := true ;
12757: LD_ADDR_EXP 38
12761: PUSH
12762: LD_INT 1
12764: ST_TO_ADDR
// if p3 = 13 then
12765: LD_VAR 0 3
12769: PUSH
12770: LD_INT 13
12772: EQUAL
12773: IFFALSE 12783
// sDepot := true ;
12775: LD_ADDR_EXP 39
12779: PUSH
12780: LD_INT 1
12782: ST_TO_ADDR
// if p3 = 14 then
12783: LD_VAR 0 3
12787: PUSH
12788: LD_INT 14
12790: EQUAL
12791: IFFALSE 12801
// sFlag := true ;
12793: LD_ADDR_EXP 40
12797: PUSH
12798: LD_INT 1
12800: ST_TO_ADDR
// if p3 = 15 then
12801: LD_VAR 0 3
12805: PUSH
12806: LD_INT 15
12808: EQUAL
12809: IFFALSE 12819
// sKamikadze := true ;
12811: LD_ADDR_EXP 48
12815: PUSH
12816: LD_INT 1
12818: ST_TO_ADDR
// if p3 = 16 then
12819: LD_VAR 0 3
12823: PUSH
12824: LD_INT 16
12826: EQUAL
12827: IFFALSE 12837
// sTroll := true ;
12829: LD_ADDR_EXP 49
12833: PUSH
12834: LD_INT 1
12836: ST_TO_ADDR
// if p3 = 17 then
12837: LD_VAR 0 3
12841: PUSH
12842: LD_INT 17
12844: EQUAL
12845: IFFALSE 12855
// sSlow := true ;
12847: LD_ADDR_EXP 50
12851: PUSH
12852: LD_INT 1
12854: ST_TO_ADDR
// if p3 = 18 then
12855: LD_VAR 0 3
12859: PUSH
12860: LD_INT 18
12862: EQUAL
12863: IFFALSE 12873
// sLack := true ;
12865: LD_ADDR_EXP 51
12869: PUSH
12870: LD_INT 1
12872: ST_TO_ADDR
// if p3 = 19 then
12873: LD_VAR 0 3
12877: PUSH
12878: LD_INT 19
12880: EQUAL
12881: IFFALSE 12891
// sTank := true ;
12883: LD_ADDR_EXP 53
12887: PUSH
12888: LD_INT 1
12890: ST_TO_ADDR
// if p3 = 20 then
12891: LD_VAR 0 3
12895: PUSH
12896: LD_INT 20
12898: EQUAL
12899: IFFALSE 12909
// sRemote := true ;
12901: LD_ADDR_EXP 54
12905: PUSH
12906: LD_INT 1
12908: ST_TO_ADDR
// if p3 = 21 then
12909: LD_VAR 0 3
12913: PUSH
12914: LD_INT 21
12916: EQUAL
12917: IFFALSE 12927
// sPowell := true ;
12919: LD_ADDR_EXP 55
12923: PUSH
12924: LD_INT 1
12926: ST_TO_ADDR
// if p3 = 22 then
12927: LD_VAR 0 3
12931: PUSH
12932: LD_INT 22
12934: EQUAL
12935: IFFALSE 12945
// sTeleport := true ;
12937: LD_ADDR_EXP 58
12941: PUSH
12942: LD_INT 1
12944: ST_TO_ADDR
// if p3 = 23 then
12945: LD_VAR 0 3
12949: PUSH
12950: LD_INT 23
12952: EQUAL
12953: IFFALSE 12963
// sOilTower := true ;
12955: LD_ADDR_EXP 60
12959: PUSH
12960: LD_INT 1
12962: ST_TO_ADDR
// if p3 = 24 then
12963: LD_VAR 0 3
12967: PUSH
12968: LD_INT 24
12970: EQUAL
12971: IFFALSE 12981
// sShovel := true ;
12973: LD_ADDR_EXP 61
12977: PUSH
12978: LD_INT 1
12980: ST_TO_ADDR
// if p3 = 25 then
12981: LD_VAR 0 3
12985: PUSH
12986: LD_INT 25
12988: EQUAL
12989: IFFALSE 12999
// sSheik := true ;
12991: LD_ADDR_EXP 62
12995: PUSH
12996: LD_INT 1
12998: ST_TO_ADDR
// if p3 = 101 then
12999: LD_VAR 0 3
13003: PUSH
13004: LD_INT 101
13006: EQUAL
13007: IFFALSE 13017
// sSold := true ;
13009: LD_ADDR_EXP 41
13013: PUSH
13014: LD_INT 1
13016: ST_TO_ADDR
// if p3 = 102 then
13017: LD_VAR 0 3
13021: PUSH
13022: LD_INT 102
13024: EQUAL
13025: IFFALSE 13035
// sDiff := true ;
13027: LD_ADDR_EXP 42
13031: PUSH
13032: LD_INT 1
13034: ST_TO_ADDR
// if p3 = 103 then
13035: LD_VAR 0 3
13039: PUSH
13040: LD_INT 103
13042: EQUAL
13043: IFFALSE 13053
// sFog := true ;
13045: LD_ADDR_EXP 45
13049: PUSH
13050: LD_INT 1
13052: ST_TO_ADDR
// if p3 = 104 then
13053: LD_VAR 0 3
13057: PUSH
13058: LD_INT 104
13060: EQUAL
13061: IFFALSE 13071
// sReset := true ;
13063: LD_ADDR_EXP 46
13067: PUSH
13068: LD_INT 1
13070: ST_TO_ADDR
// if p3 = 105 then
13071: LD_VAR 0 3
13075: PUSH
13076: LD_INT 105
13078: EQUAL
13079: IFFALSE 13089
// sSun := true ;
13081: LD_ADDR_EXP 47
13085: PUSH
13086: LD_INT 1
13088: ST_TO_ADDR
// if p3 = 106 then
13089: LD_VAR 0 3
13093: PUSH
13094: LD_INT 106
13096: EQUAL
13097: IFFALSE 13107
// sTiger := true ;
13099: LD_ADDR_EXP 43
13103: PUSH
13104: LD_INT 1
13106: ST_TO_ADDR
// if p3 = 107 then
13107: LD_VAR 0 3
13111: PUSH
13112: LD_INT 107
13114: EQUAL
13115: IFFALSE 13125
// sBomb := true ;
13117: LD_ADDR_EXP 44
13121: PUSH
13122: LD_INT 1
13124: ST_TO_ADDR
// if p3 = 108 then
13125: LD_VAR 0 3
13129: PUSH
13130: LD_INT 108
13132: EQUAL
13133: IFFALSE 13143
// sWound := true ;
13135: LD_ADDR_EXP 52
13139: PUSH
13140: LD_INT 1
13142: ST_TO_ADDR
// if p3 = 109 then
13143: LD_VAR 0 3
13147: PUSH
13148: LD_INT 109
13150: EQUAL
13151: IFFALSE 13161
// sBetray := true ;
13153: LD_ADDR_EXP 56
13157: PUSH
13158: LD_INT 1
13160: ST_TO_ADDR
// if p3 = 110 then
13161: LD_VAR 0 3
13165: PUSH
13166: LD_INT 110
13168: EQUAL
13169: IFFALSE 13179
// sContamin := true ;
13171: LD_ADDR_EXP 57
13175: PUSH
13176: LD_INT 1
13178: ST_TO_ADDR
// if p3 = 111 then
13179: LD_VAR 0 3
13183: PUSH
13184: LD_INT 111
13186: EQUAL
13187: IFFALSE 13197
// sOil := true ;
13189: LD_ADDR_EXP 59
13193: PUSH
13194: LD_INT 1
13196: ST_TO_ADDR
// if p3 = 112 then
13197: LD_VAR 0 3
13201: PUSH
13202: LD_INT 112
13204: EQUAL
13205: IFFALSE 13215
// sStu := true ;
13207: LD_ADDR_EXP 63
13211: PUSH
13212: LD_INT 1
13214: ST_TO_ADDR
// end ; end ;
13215: PPOPN 6
13217: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13218: LD_EXP 26
13222: PUSH
13223: LD_EXP 29
13227: AND
13228: IFFALSE 13352
13230: GO 13232
13232: DISABLE
13233: LD_INT 0
13235: PPUSH
13236: PPUSH
// begin enable ;
13237: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13238: LD_ADDR_VAR 0 2
13242: PUSH
13243: LD_INT 22
13245: PUSH
13246: LD_OWVAR 2
13250: PUSH
13251: EMPTY
13252: LIST
13253: LIST
13254: PUSH
13255: LD_INT 2
13257: PUSH
13258: LD_INT 34
13260: PUSH
13261: LD_INT 7
13263: PUSH
13264: EMPTY
13265: LIST
13266: LIST
13267: PUSH
13268: LD_INT 34
13270: PUSH
13271: LD_INT 45
13273: PUSH
13274: EMPTY
13275: LIST
13276: LIST
13277: PUSH
13278: LD_INT 34
13280: PUSH
13281: LD_INT 28
13283: PUSH
13284: EMPTY
13285: LIST
13286: LIST
13287: PUSH
13288: LD_INT 34
13290: PUSH
13291: LD_INT 47
13293: PUSH
13294: EMPTY
13295: LIST
13296: LIST
13297: PUSH
13298: EMPTY
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: PUSH
13305: EMPTY
13306: LIST
13307: LIST
13308: PPUSH
13309: CALL_OW 69
13313: ST_TO_ADDR
// if not tmp then
13314: LD_VAR 0 2
13318: NOT
13319: IFFALSE 13323
// exit ;
13321: GO 13352
// for i in tmp do
13323: LD_ADDR_VAR 0 1
13327: PUSH
13328: LD_VAR 0 2
13332: PUSH
13333: FOR_IN
13334: IFFALSE 13350
// begin SetLives ( i , 0 ) ;
13336: LD_VAR 0 1
13340: PPUSH
13341: LD_INT 0
13343: PPUSH
13344: CALL_OW 234
// end ;
13348: GO 13333
13350: POP
13351: POP
// end ;
13352: PPOPN 2
13354: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13355: LD_EXP 26
13359: PUSH
13360: LD_EXP 30
13364: AND
13365: IFFALSE 13446
13367: GO 13369
13369: DISABLE
13370: LD_INT 0
13372: PPUSH
13373: PPUSH
// begin enable ;
13374: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13375: LD_ADDR_VAR 0 2
13379: PUSH
13380: LD_INT 22
13382: PUSH
13383: LD_OWVAR 2
13387: PUSH
13388: EMPTY
13389: LIST
13390: LIST
13391: PUSH
13392: LD_INT 32
13394: PUSH
13395: LD_INT 3
13397: PUSH
13398: EMPTY
13399: LIST
13400: LIST
13401: PUSH
13402: EMPTY
13403: LIST
13404: LIST
13405: PPUSH
13406: CALL_OW 69
13410: ST_TO_ADDR
// if not tmp then
13411: LD_VAR 0 2
13415: NOT
13416: IFFALSE 13420
// exit ;
13418: GO 13446
// for i in tmp do
13420: LD_ADDR_VAR 0 1
13424: PUSH
13425: LD_VAR 0 2
13429: PUSH
13430: FOR_IN
13431: IFFALSE 13444
// begin DestroyUnit ( i ) ;
13433: LD_VAR 0 1
13437: PPUSH
13438: CALL_OW 65
// end ;
13442: GO 13430
13444: POP
13445: POP
// end ;
13446: PPOPN 2
13448: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13449: LD_EXP 26
13453: PUSH
13454: LD_EXP 27
13458: AND
13459: IFFALSE 13552
13461: GO 13463
13463: DISABLE
13464: LD_INT 0
13466: PPUSH
// begin enable ;
13467: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13468: LD_ADDR_VAR 0 1
13472: PUSH
13473: LD_INT 22
13475: PUSH
13476: LD_OWVAR 2
13480: PUSH
13481: EMPTY
13482: LIST
13483: LIST
13484: PUSH
13485: LD_INT 2
13487: PUSH
13488: LD_INT 25
13490: PUSH
13491: LD_INT 5
13493: PUSH
13494: EMPTY
13495: LIST
13496: LIST
13497: PUSH
13498: LD_INT 25
13500: PUSH
13501: LD_INT 9
13503: PUSH
13504: EMPTY
13505: LIST
13506: LIST
13507: PUSH
13508: LD_INT 25
13510: PUSH
13511: LD_INT 8
13513: PUSH
13514: EMPTY
13515: LIST
13516: LIST
13517: PUSH
13518: EMPTY
13519: LIST
13520: LIST
13521: LIST
13522: LIST
13523: PUSH
13524: EMPTY
13525: LIST
13526: LIST
13527: PPUSH
13528: CALL_OW 69
13532: PUSH
13533: FOR_IN
13534: IFFALSE 13550
// begin SetClass ( i , 1 ) ;
13536: LD_VAR 0 1
13540: PPUSH
13541: LD_INT 1
13543: PPUSH
13544: CALL_OW 336
// end ;
13548: GO 13533
13550: POP
13551: POP
// end ;
13552: PPOPN 1
13554: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13555: LD_EXP 26
13559: PUSH
13560: LD_EXP 28
13564: AND
13565: PUSH
13566: LD_OWVAR 65
13570: PUSH
13571: LD_INT 7
13573: LESS
13574: AND
13575: IFFALSE 13589
13577: GO 13579
13579: DISABLE
// begin enable ;
13580: ENABLE
// game_speed := 7 ;
13581: LD_ADDR_OWVAR 65
13585: PUSH
13586: LD_INT 7
13588: ST_TO_ADDR
// end ;
13589: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13590: LD_EXP 26
13594: PUSH
13595: LD_EXP 31
13599: AND
13600: IFFALSE 13802
13602: GO 13604
13604: DISABLE
13605: LD_INT 0
13607: PPUSH
13608: PPUSH
13609: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13610: LD_ADDR_VAR 0 3
13614: PUSH
13615: LD_INT 81
13617: PUSH
13618: LD_OWVAR 2
13622: PUSH
13623: EMPTY
13624: LIST
13625: LIST
13626: PUSH
13627: LD_INT 21
13629: PUSH
13630: LD_INT 1
13632: PUSH
13633: EMPTY
13634: LIST
13635: LIST
13636: PUSH
13637: EMPTY
13638: LIST
13639: LIST
13640: PPUSH
13641: CALL_OW 69
13645: ST_TO_ADDR
// if not tmp then
13646: LD_VAR 0 3
13650: NOT
13651: IFFALSE 13655
// exit ;
13653: GO 13802
// if tmp > 5 then
13655: LD_VAR 0 3
13659: PUSH
13660: LD_INT 5
13662: GREATER
13663: IFFALSE 13675
// k := 5 else
13665: LD_ADDR_VAR 0 2
13669: PUSH
13670: LD_INT 5
13672: ST_TO_ADDR
13673: GO 13685
// k := tmp ;
13675: LD_ADDR_VAR 0 2
13679: PUSH
13680: LD_VAR 0 3
13684: ST_TO_ADDR
// for i := 1 to k do
13685: LD_ADDR_VAR 0 1
13689: PUSH
13690: DOUBLE
13691: LD_INT 1
13693: DEC
13694: ST_TO_ADDR
13695: LD_VAR 0 2
13699: PUSH
13700: FOR_TO
13701: IFFALSE 13800
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13703: LD_VAR 0 3
13707: PUSH
13708: LD_VAR 0 1
13712: ARRAY
13713: PPUSH
13714: LD_VAR 0 1
13718: PUSH
13719: LD_INT 4
13721: MOD
13722: PUSH
13723: LD_INT 1
13725: PLUS
13726: PPUSH
13727: CALL_OW 259
13731: PUSH
13732: LD_INT 10
13734: LESS
13735: IFFALSE 13798
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
13737: LD_VAR 0 3
13741: PUSH
13742: LD_VAR 0 1
13746: ARRAY
13747: PPUSH
13748: LD_VAR 0 1
13752: PUSH
13753: LD_INT 4
13755: MOD
13756: PUSH
13757: LD_INT 1
13759: PLUS
13760: PPUSH
13761: LD_VAR 0 3
13765: PUSH
13766: LD_VAR 0 1
13770: ARRAY
13771: PPUSH
13772: LD_VAR 0 1
13776: PUSH
13777: LD_INT 4
13779: MOD
13780: PUSH
13781: LD_INT 1
13783: PLUS
13784: PPUSH
13785: CALL_OW 259
13789: PUSH
13790: LD_INT 1
13792: PLUS
13793: PPUSH
13794: CALL_OW 237
13798: GO 13700
13800: POP
13801: POP
// end ;
13802: PPOPN 3
13804: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13805: LD_EXP 26
13809: PUSH
13810: LD_EXP 32
13814: AND
13815: IFFALSE 13835
13817: GO 13819
13819: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13820: LD_INT 4
13822: PPUSH
13823: LD_OWVAR 2
13827: PPUSH
13828: LD_INT 0
13830: PPUSH
13831: CALL_OW 324
13835: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13836: LD_EXP 26
13840: PUSH
13841: LD_EXP 61
13845: AND
13846: IFFALSE 13866
13848: GO 13850
13850: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13851: LD_INT 19
13853: PPUSH
13854: LD_OWVAR 2
13858: PPUSH
13859: LD_INT 0
13861: PPUSH
13862: CALL_OW 324
13866: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13867: LD_EXP 26
13871: PUSH
13872: LD_EXP 33
13876: AND
13877: IFFALSE 13976
13879: GO 13881
13881: DISABLE
13882: LD_INT 0
13884: PPUSH
13885: PPUSH
// begin enable ;
13886: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13887: LD_ADDR_VAR 0 2
13891: PUSH
13892: LD_INT 22
13894: PUSH
13895: LD_OWVAR 2
13899: PUSH
13900: EMPTY
13901: LIST
13902: LIST
13903: PUSH
13904: LD_INT 2
13906: PUSH
13907: LD_INT 34
13909: PUSH
13910: LD_INT 11
13912: PUSH
13913: EMPTY
13914: LIST
13915: LIST
13916: PUSH
13917: LD_INT 34
13919: PUSH
13920: LD_INT 30
13922: PUSH
13923: EMPTY
13924: LIST
13925: LIST
13926: PUSH
13927: EMPTY
13928: LIST
13929: LIST
13930: LIST
13931: PUSH
13932: EMPTY
13933: LIST
13934: LIST
13935: PPUSH
13936: CALL_OW 69
13940: ST_TO_ADDR
// if not tmp then
13941: LD_VAR 0 2
13945: NOT
13946: IFFALSE 13950
// exit ;
13948: GO 13976
// for i in tmp do
13950: LD_ADDR_VAR 0 1
13954: PUSH
13955: LD_VAR 0 2
13959: PUSH
13960: FOR_IN
13961: IFFALSE 13974
// begin DestroyUnit ( i ) ;
13963: LD_VAR 0 1
13967: PPUSH
13968: CALL_OW 65
// end ;
13972: GO 13960
13974: POP
13975: POP
// end ;
13976: PPOPN 2
13978: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13979: LD_EXP 26
13983: PUSH
13984: LD_EXP 34
13988: AND
13989: IFFALSE 14009
13991: GO 13993
13993: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13994: LD_INT 32
13996: PPUSH
13997: LD_OWVAR 2
14001: PPUSH
14002: LD_INT 0
14004: PPUSH
14005: CALL_OW 324
14009: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
14010: LD_EXP 26
14014: PUSH
14015: LD_EXP 35
14019: AND
14020: IFFALSE 14201
14022: GO 14024
14024: DISABLE
14025: LD_INT 0
14027: PPUSH
14028: PPUSH
14029: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
14030: LD_ADDR_VAR 0 2
14034: PUSH
14035: LD_INT 22
14037: PUSH
14038: LD_OWVAR 2
14042: PUSH
14043: EMPTY
14044: LIST
14045: LIST
14046: PUSH
14047: LD_INT 33
14049: PUSH
14050: LD_INT 3
14052: PUSH
14053: EMPTY
14054: LIST
14055: LIST
14056: PUSH
14057: EMPTY
14058: LIST
14059: LIST
14060: PPUSH
14061: CALL_OW 69
14065: ST_TO_ADDR
// if not tmp then
14066: LD_VAR 0 2
14070: NOT
14071: IFFALSE 14075
// exit ;
14073: GO 14201
// side := 0 ;
14075: LD_ADDR_VAR 0 3
14079: PUSH
14080: LD_INT 0
14082: ST_TO_ADDR
// for i := 1 to 8 do
14083: LD_ADDR_VAR 0 1
14087: PUSH
14088: DOUBLE
14089: LD_INT 1
14091: DEC
14092: ST_TO_ADDR
14093: LD_INT 8
14095: PUSH
14096: FOR_TO
14097: IFFALSE 14145
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14099: LD_OWVAR 2
14103: PUSH
14104: LD_VAR 0 1
14108: NONEQUAL
14109: PUSH
14110: LD_OWVAR 2
14114: PPUSH
14115: LD_VAR 0 1
14119: PPUSH
14120: CALL_OW 81
14124: PUSH
14125: LD_INT 2
14127: EQUAL
14128: AND
14129: IFFALSE 14143
// begin side := i ;
14131: LD_ADDR_VAR 0 3
14135: PUSH
14136: LD_VAR 0 1
14140: ST_TO_ADDR
// break ;
14141: GO 14145
// end ;
14143: GO 14096
14145: POP
14146: POP
// if not side then
14147: LD_VAR 0 3
14151: NOT
14152: IFFALSE 14156
// exit ;
14154: GO 14201
// for i := 1 to tmp do
14156: LD_ADDR_VAR 0 1
14160: PUSH
14161: DOUBLE
14162: LD_INT 1
14164: DEC
14165: ST_TO_ADDR
14166: LD_VAR 0 2
14170: PUSH
14171: FOR_TO
14172: IFFALSE 14199
// if Prob ( 30 ) then
14174: LD_INT 30
14176: PPUSH
14177: CALL_OW 13
14181: IFFALSE 14197
// SetSide ( i , side ) ;
14183: LD_VAR 0 1
14187: PPUSH
14188: LD_VAR 0 3
14192: PPUSH
14193: CALL_OW 235
14197: GO 14171
14199: POP
14200: POP
// end ;
14201: PPOPN 3
14203: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14204: LD_EXP 26
14208: PUSH
14209: LD_EXP 37
14213: AND
14214: IFFALSE 14333
14216: GO 14218
14218: DISABLE
14219: LD_INT 0
14221: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14222: LD_ADDR_VAR 0 1
14226: PUSH
14227: LD_INT 22
14229: PUSH
14230: LD_OWVAR 2
14234: PUSH
14235: EMPTY
14236: LIST
14237: LIST
14238: PUSH
14239: LD_INT 21
14241: PUSH
14242: LD_INT 1
14244: PUSH
14245: EMPTY
14246: LIST
14247: LIST
14248: PUSH
14249: LD_INT 3
14251: PUSH
14252: LD_INT 23
14254: PUSH
14255: LD_INT 0
14257: PUSH
14258: EMPTY
14259: LIST
14260: LIST
14261: PUSH
14262: EMPTY
14263: LIST
14264: LIST
14265: PUSH
14266: EMPTY
14267: LIST
14268: LIST
14269: LIST
14270: PPUSH
14271: CALL_OW 69
14275: PUSH
14276: FOR_IN
14277: IFFALSE 14331
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14279: LD_VAR 0 1
14283: PPUSH
14284: CALL_OW 257
14288: PUSH
14289: LD_INT 1
14291: PUSH
14292: LD_INT 2
14294: PUSH
14295: LD_INT 3
14297: PUSH
14298: LD_INT 4
14300: PUSH
14301: EMPTY
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: IN
14307: IFFALSE 14329
// SetClass ( un , rand ( 1 , 4 ) ) ;
14309: LD_VAR 0 1
14313: PPUSH
14314: LD_INT 1
14316: PPUSH
14317: LD_INT 4
14319: PPUSH
14320: CALL_OW 12
14324: PPUSH
14325: CALL_OW 336
14329: GO 14276
14331: POP
14332: POP
// end ;
14333: PPOPN 1
14335: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14336: LD_EXP 26
14340: PUSH
14341: LD_EXP 36
14345: AND
14346: IFFALSE 14425
14348: GO 14350
14350: DISABLE
14351: LD_INT 0
14353: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14354: LD_ADDR_VAR 0 1
14358: PUSH
14359: LD_INT 22
14361: PUSH
14362: LD_OWVAR 2
14366: PUSH
14367: EMPTY
14368: LIST
14369: LIST
14370: PUSH
14371: LD_INT 21
14373: PUSH
14374: LD_INT 3
14376: PUSH
14377: EMPTY
14378: LIST
14379: LIST
14380: PUSH
14381: EMPTY
14382: LIST
14383: LIST
14384: PPUSH
14385: CALL_OW 69
14389: ST_TO_ADDR
// if not tmp then
14390: LD_VAR 0 1
14394: NOT
14395: IFFALSE 14399
// exit ;
14397: GO 14425
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14399: LD_VAR 0 1
14403: PUSH
14404: LD_INT 1
14406: PPUSH
14407: LD_VAR 0 1
14411: PPUSH
14412: CALL_OW 12
14416: ARRAY
14417: PPUSH
14418: LD_INT 100
14420: PPUSH
14421: CALL_OW 234
// end ;
14425: PPOPN 1
14427: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14428: LD_EXP 26
14432: PUSH
14433: LD_EXP 38
14437: AND
14438: IFFALSE 14536
14440: GO 14442
14442: DISABLE
14443: LD_INT 0
14445: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14446: LD_ADDR_VAR 0 1
14450: PUSH
14451: LD_INT 22
14453: PUSH
14454: LD_OWVAR 2
14458: PUSH
14459: EMPTY
14460: LIST
14461: LIST
14462: PUSH
14463: LD_INT 21
14465: PUSH
14466: LD_INT 1
14468: PUSH
14469: EMPTY
14470: LIST
14471: LIST
14472: PUSH
14473: EMPTY
14474: LIST
14475: LIST
14476: PPUSH
14477: CALL_OW 69
14481: ST_TO_ADDR
// if not tmp then
14482: LD_VAR 0 1
14486: NOT
14487: IFFALSE 14491
// exit ;
14489: GO 14536
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14491: LD_VAR 0 1
14495: PUSH
14496: LD_INT 1
14498: PPUSH
14499: LD_VAR 0 1
14503: PPUSH
14504: CALL_OW 12
14508: ARRAY
14509: PPUSH
14510: LD_INT 1
14512: PPUSH
14513: LD_INT 4
14515: PPUSH
14516: CALL_OW 12
14520: PPUSH
14521: LD_INT 3000
14523: PPUSH
14524: LD_INT 9000
14526: PPUSH
14527: CALL_OW 12
14531: PPUSH
14532: CALL_OW 492
// end ;
14536: PPOPN 1
14538: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14539: LD_EXP 26
14543: PUSH
14544: LD_EXP 39
14548: AND
14549: IFFALSE 14569
14551: GO 14553
14553: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14554: LD_INT 1
14556: PPUSH
14557: LD_OWVAR 2
14561: PPUSH
14562: LD_INT 0
14564: PPUSH
14565: CALL_OW 324
14569: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14570: LD_EXP 26
14574: PUSH
14575: LD_EXP 40
14579: AND
14580: IFFALSE 14663
14582: GO 14584
14584: DISABLE
14585: LD_INT 0
14587: PPUSH
14588: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14589: LD_ADDR_VAR 0 2
14593: PUSH
14594: LD_INT 22
14596: PUSH
14597: LD_OWVAR 2
14601: PUSH
14602: EMPTY
14603: LIST
14604: LIST
14605: PUSH
14606: LD_INT 21
14608: PUSH
14609: LD_INT 3
14611: PUSH
14612: EMPTY
14613: LIST
14614: LIST
14615: PUSH
14616: EMPTY
14617: LIST
14618: LIST
14619: PPUSH
14620: CALL_OW 69
14624: ST_TO_ADDR
// if not tmp then
14625: LD_VAR 0 2
14629: NOT
14630: IFFALSE 14634
// exit ;
14632: GO 14663
// for i in tmp do
14634: LD_ADDR_VAR 0 1
14638: PUSH
14639: LD_VAR 0 2
14643: PUSH
14644: FOR_IN
14645: IFFALSE 14661
// SetBLevel ( i , 10 ) ;
14647: LD_VAR 0 1
14651: PPUSH
14652: LD_INT 10
14654: PPUSH
14655: CALL_OW 241
14659: GO 14644
14661: POP
14662: POP
// end ;
14663: PPOPN 2
14665: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14666: LD_EXP 26
14670: PUSH
14671: LD_EXP 41
14675: AND
14676: IFFALSE 14787
14678: GO 14680
14680: DISABLE
14681: LD_INT 0
14683: PPUSH
14684: PPUSH
14685: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14686: LD_ADDR_VAR 0 3
14690: PUSH
14691: LD_INT 22
14693: PUSH
14694: LD_OWVAR 2
14698: PUSH
14699: EMPTY
14700: LIST
14701: LIST
14702: PUSH
14703: LD_INT 25
14705: PUSH
14706: LD_INT 1
14708: PUSH
14709: EMPTY
14710: LIST
14711: LIST
14712: PUSH
14713: EMPTY
14714: LIST
14715: LIST
14716: PPUSH
14717: CALL_OW 69
14721: ST_TO_ADDR
// if not tmp then
14722: LD_VAR 0 3
14726: NOT
14727: IFFALSE 14731
// exit ;
14729: GO 14787
// un := tmp [ rand ( 1 , tmp ) ] ;
14731: LD_ADDR_VAR 0 2
14735: PUSH
14736: LD_VAR 0 3
14740: PUSH
14741: LD_INT 1
14743: PPUSH
14744: LD_VAR 0 3
14748: PPUSH
14749: CALL_OW 12
14753: ARRAY
14754: ST_TO_ADDR
// if Crawls ( un ) then
14755: LD_VAR 0 2
14759: PPUSH
14760: CALL_OW 318
14764: IFFALSE 14775
// ComWalk ( un ) ;
14766: LD_VAR 0 2
14770: PPUSH
14771: CALL_OW 138
// SetClass ( un , class_sniper ) ;
14775: LD_VAR 0 2
14779: PPUSH
14780: LD_INT 5
14782: PPUSH
14783: CALL_OW 336
// end ;
14787: PPOPN 3
14789: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
14790: LD_EXP 26
14794: PUSH
14795: LD_EXP 42
14799: AND
14800: PUSH
14801: LD_OWVAR 67
14805: PUSH
14806: LD_INT 3
14808: LESS
14809: AND
14810: IFFALSE 14829
14812: GO 14814
14814: DISABLE
// Difficulty := Difficulty + 1 ;
14815: LD_ADDR_OWVAR 67
14819: PUSH
14820: LD_OWVAR 67
14824: PUSH
14825: LD_INT 1
14827: PLUS
14828: ST_TO_ADDR
14829: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14830: LD_EXP 26
14834: PUSH
14835: LD_EXP 43
14839: AND
14840: IFFALSE 14943
14842: GO 14844
14844: DISABLE
14845: LD_INT 0
14847: PPUSH
// begin for i := 1 to 5 do
14848: LD_ADDR_VAR 0 1
14852: PUSH
14853: DOUBLE
14854: LD_INT 1
14856: DEC
14857: ST_TO_ADDR
14858: LD_INT 5
14860: PUSH
14861: FOR_TO
14862: IFFALSE 14941
// begin uc_nation := nation_nature ;
14864: LD_ADDR_OWVAR 21
14868: PUSH
14869: LD_INT 0
14871: ST_TO_ADDR
// uc_side := 0 ;
14872: LD_ADDR_OWVAR 20
14876: PUSH
14877: LD_INT 0
14879: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14880: LD_ADDR_OWVAR 29
14884: PUSH
14885: LD_INT 12
14887: PUSH
14888: LD_INT 12
14890: PUSH
14891: EMPTY
14892: LIST
14893: LIST
14894: ST_TO_ADDR
// hc_agressivity := 20 ;
14895: LD_ADDR_OWVAR 35
14899: PUSH
14900: LD_INT 20
14902: ST_TO_ADDR
// hc_class := class_tiger ;
14903: LD_ADDR_OWVAR 28
14907: PUSH
14908: LD_INT 14
14910: ST_TO_ADDR
// hc_gallery :=  ;
14911: LD_ADDR_OWVAR 33
14915: PUSH
14916: LD_STRING 
14918: ST_TO_ADDR
// hc_name :=  ;
14919: LD_ADDR_OWVAR 26
14923: PUSH
14924: LD_STRING 
14926: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14927: CALL_OW 44
14931: PPUSH
14932: LD_INT 0
14934: PPUSH
14935: CALL_OW 51
// end ;
14939: GO 14861
14941: POP
14942: POP
// end ;
14943: PPOPN 1
14945: END
// every 0 0$1 trigger StreamModeActive and sBomb do var i , x , y , result ;
14946: LD_EXP 26
14950: PUSH
14951: LD_EXP 44
14955: AND
14956: IFFALSE 15130
14958: GO 14960
14960: DISABLE
14961: LD_INT 0
14963: PPUSH
14964: PPUSH
14965: PPUSH
14966: PPUSH
// begin result := false ;
14967: LD_ADDR_VAR 0 4
14971: PUSH
14972: LD_INT 0
14974: ST_TO_ADDR
// for i := 1 to 8 do
14975: LD_ADDR_VAR 0 1
14979: PUSH
14980: DOUBLE
14981: LD_INT 1
14983: DEC
14984: ST_TO_ADDR
14985: LD_INT 8
14987: PUSH
14988: FOR_TO
14989: IFFALSE 15100
// begin x := [ 10 , 50 , 90 , 140 ] [ rand ( 1 , 4 ) ] ;
14991: LD_ADDR_VAR 0 2
14995: PUSH
14996: LD_INT 10
14998: PUSH
14999: LD_INT 50
15001: PUSH
15002: LD_INT 90
15004: PUSH
15005: LD_INT 140
15007: PUSH
15008: EMPTY
15009: LIST
15010: LIST
15011: LIST
15012: LIST
15013: PUSH
15014: LD_INT 1
15016: PPUSH
15017: LD_INT 4
15019: PPUSH
15020: CALL_OW 12
15024: ARRAY
15025: ST_TO_ADDR
// y := [ 10 , 50 , 90 , 140 ] [ rand ( 1 , 4 ) ] ;
15026: LD_ADDR_VAR 0 3
15030: PUSH
15031: LD_INT 10
15033: PUSH
15034: LD_INT 50
15036: PUSH
15037: LD_INT 90
15039: PUSH
15040: LD_INT 140
15042: PUSH
15043: EMPTY
15044: LIST
15045: LIST
15046: LIST
15047: LIST
15048: PUSH
15049: LD_INT 1
15051: PPUSH
15052: LD_INT 4
15054: PPUSH
15055: CALL_OW 12
15059: ARRAY
15060: ST_TO_ADDR
// if ValidHex ( x , y ) then
15061: LD_VAR 0 2
15065: PPUSH
15066: LD_VAR 0 3
15070: PPUSH
15071: CALL_OW 488
15075: IFFALSE 15098
// begin result := [ x , y ] ;
15077: LD_ADDR_VAR 0 4
15081: PUSH
15082: LD_VAR 0 2
15086: PUSH
15087: LD_VAR 0 3
15091: PUSH
15092: EMPTY
15093: LIST
15094: LIST
15095: ST_TO_ADDR
// break ;
15096: GO 15100
// end ; end ;
15098: GO 14988
15100: POP
15101: POP
// if result then
15102: LD_VAR 0 4
15106: IFFALSE 15130
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15108: LD_VAR 0 4
15112: PUSH
15113: LD_INT 1
15115: ARRAY
15116: PPUSH
15117: LD_VAR 0 4
15121: PUSH
15122: LD_INT 2
15124: ARRAY
15125: PPUSH
15126: CALL_OW 429
// end ;
15130: PPOPN 4
15132: END
// every 0 0$1 trigger StreamModeActive and sReset do
15133: LD_EXP 26
15137: PUSH
15138: LD_EXP 46
15142: AND
15143: IFFALSE 15155
15145: GO 15147
15147: DISABLE
// YouLost (  ) ;
15148: LD_STRING 
15150: PPUSH
15151: CALL_OW 104
15155: END
// every 0 0$1 trigger StreamModeActive and sFog do
15156: LD_EXP 26
15160: PUSH
15161: LD_EXP 45
15165: AND
15166: IFFALSE 15180
15168: GO 15170
15170: DISABLE
// FogOff ( your_side ) ;
15171: LD_OWVAR 2
15175: PPUSH
15176: CALL_OW 344
15180: END
// every 0 0$1 trigger StreamModeActive and sSun do
15181: LD_EXP 26
15185: PUSH
15186: LD_EXP 47
15190: AND
15191: IFFALSE 15219
15193: GO 15195
15195: DISABLE
// begin solar_recharge_percent := 0 ;
15196: LD_ADDR_OWVAR 79
15200: PUSH
15201: LD_INT 0
15203: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15204: LD_INT 10500
15206: PPUSH
15207: CALL_OW 67
// solar_recharge_percent := 100 ;
15211: LD_ADDR_OWVAR 79
15215: PUSH
15216: LD_INT 100
15218: ST_TO_ADDR
// end ;
15219: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15220: LD_EXP 26
15224: PUSH
15225: LD_EXP 48
15229: AND
15230: IFFALSE 15469
15232: GO 15234
15234: DISABLE
15235: LD_INT 0
15237: PPUSH
15238: PPUSH
15239: PPUSH
// begin tmp := [ ] ;
15240: LD_ADDR_VAR 0 3
15244: PUSH
15245: EMPTY
15246: ST_TO_ADDR
// for i := 1 to 6 do
15247: LD_ADDR_VAR 0 1
15251: PUSH
15252: DOUBLE
15253: LD_INT 1
15255: DEC
15256: ST_TO_ADDR
15257: LD_INT 6
15259: PUSH
15260: FOR_TO
15261: IFFALSE 15366
// begin uc_nation := nation_nature ;
15263: LD_ADDR_OWVAR 21
15267: PUSH
15268: LD_INT 0
15270: ST_TO_ADDR
// uc_side := 0 ;
15271: LD_ADDR_OWVAR 20
15275: PUSH
15276: LD_INT 0
15278: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15279: LD_ADDR_OWVAR 29
15283: PUSH
15284: LD_INT 12
15286: PUSH
15287: LD_INT 12
15289: PUSH
15290: EMPTY
15291: LIST
15292: LIST
15293: ST_TO_ADDR
// hc_agressivity := 20 ;
15294: LD_ADDR_OWVAR 35
15298: PUSH
15299: LD_INT 20
15301: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15302: LD_ADDR_OWVAR 28
15306: PUSH
15307: LD_INT 17
15309: ST_TO_ADDR
// hc_gallery :=  ;
15310: LD_ADDR_OWVAR 33
15314: PUSH
15315: LD_STRING 
15317: ST_TO_ADDR
// hc_name :=  ;
15318: LD_ADDR_OWVAR 26
15322: PUSH
15323: LD_STRING 
15325: ST_TO_ADDR
// un := CreateHuman ;
15326: LD_ADDR_VAR 0 2
15330: PUSH
15331: CALL_OW 44
15335: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15336: LD_VAR 0 2
15340: PPUSH
15341: LD_INT 1
15343: PPUSH
15344: CALL_OW 51
// tmp := tmp * un ;
15348: LD_ADDR_VAR 0 3
15352: PUSH
15353: LD_VAR 0 3
15357: PUSH
15358: LD_VAR 0 2
15362: MUL
15363: ST_TO_ADDR
// end ;
15364: GO 15260
15366: POP
15367: POP
// repeat wait ( 0 0$1 ) ;
15368: LD_INT 35
15370: PPUSH
15371: CALL_OW 67
// for un in tmp do
15375: LD_ADDR_VAR 0 2
15379: PUSH
15380: LD_VAR 0 3
15384: PUSH
15385: FOR_IN
15386: IFFALSE 15460
// begin if IsDead ( un ) then
15388: LD_VAR 0 2
15392: PPUSH
15393: CALL_OW 301
15397: IFFALSE 15417
// begin tmp := tmp diff un ;
15399: LD_ADDR_VAR 0 3
15403: PUSH
15404: LD_VAR 0 3
15408: PUSH
15409: LD_VAR 0 2
15413: DIFF
15414: ST_TO_ADDR
// continue ;
15415: GO 15385
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15417: LD_VAR 0 2
15421: PPUSH
15422: LD_INT 3
15424: PUSH
15425: LD_INT 22
15427: PUSH
15428: LD_INT 0
15430: PUSH
15431: EMPTY
15432: LIST
15433: LIST
15434: PUSH
15435: EMPTY
15436: LIST
15437: LIST
15438: PPUSH
15439: CALL_OW 69
15443: PPUSH
15444: LD_VAR 0 2
15448: PPUSH
15449: CALL_OW 74
15453: PPUSH
15454: CALL_OW 115
// end ;
15458: GO 15385
15460: POP
15461: POP
// until not tmp ;
15462: LD_VAR 0 3
15466: NOT
15467: IFFALSE 15368
// end ;
15469: PPOPN 3
15471: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15472: LD_EXP 26
15476: PUSH
15477: LD_EXP 49
15481: AND
15482: IFFALSE 15508
15484: GO 15486
15486: DISABLE
// begin ToLua ( displayTroll(); ) ;
15487: LD_STRING displayTroll();
15489: PPUSH
15490: CALL_OW 559
// wait ( 3 3$00 ) ;
15494: LD_INT 6300
15496: PPUSH
15497: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15501: LD_STRING hideTroll();
15503: PPUSH
15504: CALL_OW 559
// end ;
15508: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15509: LD_EXP 26
15513: PUSH
15514: LD_EXP 50
15518: AND
15519: IFFALSE 15582
15521: GO 15523
15523: DISABLE
15524: LD_INT 0
15526: PPUSH
// begin p := 0 ;
15527: LD_ADDR_VAR 0 1
15531: PUSH
15532: LD_INT 0
15534: ST_TO_ADDR
// repeat game_speed := 1 ;
15535: LD_ADDR_OWVAR 65
15539: PUSH
15540: LD_INT 1
15542: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15543: LD_INT 35
15545: PPUSH
15546: CALL_OW 67
// p := p + 1 ;
15550: LD_ADDR_VAR 0 1
15554: PUSH
15555: LD_VAR 0 1
15559: PUSH
15560: LD_INT 1
15562: PLUS
15563: ST_TO_ADDR
// until p >= 60 ;
15564: LD_VAR 0 1
15568: PUSH
15569: LD_INT 60
15571: GREATEREQUAL
15572: IFFALSE 15535
// game_speed := 4 ;
15574: LD_ADDR_OWVAR 65
15578: PUSH
15579: LD_INT 4
15581: ST_TO_ADDR
// end ;
15582: PPOPN 1
15584: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
15585: LD_EXP 26
15589: PUSH
15590: LD_EXP 51
15594: AND
15595: IFFALSE 15741
15597: GO 15599
15599: DISABLE
15600: LD_INT 0
15602: PPUSH
15603: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15604: LD_ADDR_VAR 0 1
15608: PUSH
15609: LD_INT 22
15611: PUSH
15612: LD_OWVAR 2
15616: PUSH
15617: EMPTY
15618: LIST
15619: LIST
15620: PUSH
15621: LD_INT 2
15623: PUSH
15624: LD_INT 30
15626: PUSH
15627: LD_INT 0
15629: PUSH
15630: EMPTY
15631: LIST
15632: LIST
15633: PUSH
15634: LD_INT 30
15636: PUSH
15637: LD_INT 1
15639: PUSH
15640: EMPTY
15641: LIST
15642: LIST
15643: PUSH
15644: EMPTY
15645: LIST
15646: LIST
15647: LIST
15648: PUSH
15649: EMPTY
15650: LIST
15651: LIST
15652: PPUSH
15653: CALL_OW 69
15657: ST_TO_ADDR
// if not depot then
15658: LD_VAR 0 1
15662: NOT
15663: IFFALSE 15667
// exit ;
15665: GO 15741
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15667: LD_ADDR_VAR 0 2
15671: PUSH
15672: LD_VAR 0 1
15676: PUSH
15677: LD_INT 1
15679: PPUSH
15680: LD_VAR 0 1
15684: PPUSH
15685: CALL_OW 12
15689: ARRAY
15690: PPUSH
15691: CALL_OW 274
15695: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15696: LD_VAR 0 2
15700: PPUSH
15701: LD_INT 1
15703: PPUSH
15704: LD_INT 0
15706: PPUSH
15707: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15711: LD_VAR 0 2
15715: PPUSH
15716: LD_INT 2
15718: PPUSH
15719: LD_INT 0
15721: PPUSH
15722: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15726: LD_VAR 0 2
15730: PPUSH
15731: LD_INT 3
15733: PPUSH
15734: LD_INT 0
15736: PPUSH
15737: CALL_OW 277
// end ;
15741: PPOPN 2
15743: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15744: LD_EXP 26
15748: PUSH
15749: LD_EXP 52
15753: AND
15754: IFFALSE 15851
15756: GO 15758
15758: DISABLE
15759: LD_INT 0
15761: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15762: LD_ADDR_VAR 0 1
15766: PUSH
15767: LD_INT 22
15769: PUSH
15770: LD_OWVAR 2
15774: PUSH
15775: EMPTY
15776: LIST
15777: LIST
15778: PUSH
15779: LD_INT 21
15781: PUSH
15782: LD_INT 1
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: PUSH
15789: LD_INT 3
15791: PUSH
15792: LD_INT 23
15794: PUSH
15795: LD_INT 0
15797: PUSH
15798: EMPTY
15799: LIST
15800: LIST
15801: PUSH
15802: EMPTY
15803: LIST
15804: LIST
15805: PUSH
15806: EMPTY
15807: LIST
15808: LIST
15809: LIST
15810: PPUSH
15811: CALL_OW 69
15815: ST_TO_ADDR
// if not tmp then
15816: LD_VAR 0 1
15820: NOT
15821: IFFALSE 15825
// exit ;
15823: GO 15851
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15825: LD_VAR 0 1
15829: PUSH
15830: LD_INT 1
15832: PPUSH
15833: LD_VAR 0 1
15837: PPUSH
15838: CALL_OW 12
15842: ARRAY
15843: PPUSH
15844: LD_INT 200
15846: PPUSH
15847: CALL_OW 234
// end ;
15851: PPOPN 1
15853: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
15854: LD_EXP 26
15858: PUSH
15859: LD_EXP 53
15863: AND
15864: IFFALSE 15943
15866: GO 15868
15868: DISABLE
15869: LD_INT 0
15871: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15872: LD_ADDR_VAR 0 1
15876: PUSH
15877: LD_INT 22
15879: PUSH
15880: LD_OWVAR 2
15884: PUSH
15885: EMPTY
15886: LIST
15887: LIST
15888: PUSH
15889: LD_INT 21
15891: PUSH
15892: LD_INT 2
15894: PUSH
15895: EMPTY
15896: LIST
15897: LIST
15898: PUSH
15899: EMPTY
15900: LIST
15901: LIST
15902: PPUSH
15903: CALL_OW 69
15907: ST_TO_ADDR
// if not tmp then
15908: LD_VAR 0 1
15912: NOT
15913: IFFALSE 15917
// exit ;
15915: GO 15943
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
15917: LD_VAR 0 1
15921: PUSH
15922: LD_INT 1
15924: PPUSH
15925: LD_VAR 0 1
15929: PPUSH
15930: CALL_OW 12
15934: ARRAY
15935: PPUSH
15936: LD_INT 60
15938: PPUSH
15939: CALL_OW 234
// end ;
15943: PPOPN 1
15945: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
15946: LD_EXP 26
15950: PUSH
15951: LD_EXP 54
15955: AND
15956: IFFALSE 16055
15958: GO 15960
15960: DISABLE
15961: LD_INT 0
15963: PPUSH
15964: PPUSH
// begin enable ;
15965: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
15966: LD_ADDR_VAR 0 1
15970: PUSH
15971: LD_INT 22
15973: PUSH
15974: LD_OWVAR 2
15978: PUSH
15979: EMPTY
15980: LIST
15981: LIST
15982: PUSH
15983: LD_INT 61
15985: PUSH
15986: EMPTY
15987: LIST
15988: PUSH
15989: LD_INT 33
15991: PUSH
15992: LD_INT 2
15994: PUSH
15995: EMPTY
15996: LIST
15997: LIST
15998: PUSH
15999: EMPTY
16000: LIST
16001: LIST
16002: LIST
16003: PPUSH
16004: CALL_OW 69
16008: ST_TO_ADDR
// if not tmp then
16009: LD_VAR 0 1
16013: NOT
16014: IFFALSE 16018
// exit ;
16016: GO 16055
// for i in tmp do
16018: LD_ADDR_VAR 0 2
16022: PUSH
16023: LD_VAR 0 1
16027: PUSH
16028: FOR_IN
16029: IFFALSE 16053
// if IsControledBy ( i ) then
16031: LD_VAR 0 2
16035: PPUSH
16036: CALL_OW 312
16040: IFFALSE 16051
// ComUnlink ( i ) ;
16042: LD_VAR 0 2
16046: PPUSH
16047: CALL_OW 136
16051: GO 16028
16053: POP
16054: POP
// end ;
16055: PPOPN 2
16057: END
// every 0 0$1 trigger StreamModeActive and sPowell do
16058: LD_EXP 26
16062: PUSH
16063: LD_EXP 55
16067: AND
16068: IFFALSE 16108
16070: GO 16072
16072: DISABLE
// begin ToLua ( displayPowell(); ) ;
16073: LD_STRING displayPowell();
16075: PPUSH
16076: CALL_OW 559
// wait ( 0 0$20 ) ;
16080: LD_INT 700
16082: PPUSH
16083: CALL_OW 67
// ToLua ( displayPowell(); ) ;
16087: LD_STRING displayPowell();
16089: PPUSH
16090: CALL_OW 559
// wait ( 0 0$40 ) ;
16094: LD_INT 1400
16096: PPUSH
16097: CALL_OW 67
// ToLua ( displayPowell(); ) ;
16101: LD_STRING displayPowell();
16103: PPUSH
16104: CALL_OW 559
// end ;
16108: END
// every 0 0$1 trigger StreamModeActive and sStu do
16109: LD_EXP 26
16113: PUSH
16114: LD_EXP 63
16118: AND
16119: IFFALSE 16131
16121: GO 16123
16123: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16124: LD_STRING displayStucuk();
16126: PPUSH
16127: CALL_OW 559
// end ;
16131: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16132: LD_EXP 26
16136: PUSH
16137: LD_EXP 56
16141: AND
16142: IFFALSE 16283
16144: GO 16146
16146: DISABLE
16147: LD_INT 0
16149: PPUSH
16150: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16151: LD_ADDR_VAR 0 2
16155: PUSH
16156: LD_INT 22
16158: PUSH
16159: LD_OWVAR 2
16163: PUSH
16164: EMPTY
16165: LIST
16166: LIST
16167: PUSH
16168: LD_INT 21
16170: PUSH
16171: LD_INT 1
16173: PUSH
16174: EMPTY
16175: LIST
16176: LIST
16177: PUSH
16178: EMPTY
16179: LIST
16180: LIST
16181: PPUSH
16182: CALL_OW 69
16186: ST_TO_ADDR
// if not tmp then
16187: LD_VAR 0 2
16191: NOT
16192: IFFALSE 16196
// exit ;
16194: GO 16283
// un := tmp [ rand ( 1 , tmp ) ] ;
16196: LD_ADDR_VAR 0 1
16200: PUSH
16201: LD_VAR 0 2
16205: PUSH
16206: LD_INT 1
16208: PPUSH
16209: LD_VAR 0 2
16213: PPUSH
16214: CALL_OW 12
16218: ARRAY
16219: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16220: LD_VAR 0 1
16224: PPUSH
16225: LD_INT 0
16227: PPUSH
16228: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16232: LD_VAR 0 1
16236: PPUSH
16237: LD_OWVAR 3
16241: PUSH
16242: LD_VAR 0 1
16246: DIFF
16247: PPUSH
16248: LD_VAR 0 1
16252: PPUSH
16253: CALL_OW 74
16257: PPUSH
16258: CALL_OW 115
// wait ( 0 0$20 ) ;
16262: LD_INT 700
16264: PPUSH
16265: CALL_OW 67
// SetSide ( un , your_side ) ;
16269: LD_VAR 0 1
16273: PPUSH
16274: LD_OWVAR 2
16278: PPUSH
16279: CALL_OW 235
// end ;
16283: PPOPN 2
16285: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16286: LD_EXP 26
16290: PUSH
16291: LD_EXP 57
16295: AND
16296: IFFALSE 16402
16298: GO 16300
16300: DISABLE
16301: LD_INT 0
16303: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16304: LD_ADDR_VAR 0 1
16308: PUSH
16309: LD_INT 22
16311: PUSH
16312: LD_OWVAR 2
16316: PUSH
16317: EMPTY
16318: LIST
16319: LIST
16320: PUSH
16321: LD_INT 2
16323: PUSH
16324: LD_INT 30
16326: PUSH
16327: LD_INT 0
16329: PUSH
16330: EMPTY
16331: LIST
16332: LIST
16333: PUSH
16334: LD_INT 30
16336: PUSH
16337: LD_INT 1
16339: PUSH
16340: EMPTY
16341: LIST
16342: LIST
16343: PUSH
16344: EMPTY
16345: LIST
16346: LIST
16347: LIST
16348: PUSH
16349: EMPTY
16350: LIST
16351: LIST
16352: PPUSH
16353: CALL_OW 69
16357: ST_TO_ADDR
// if not depot then
16358: LD_VAR 0 1
16362: NOT
16363: IFFALSE 16367
// exit ;
16365: GO 16402
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16367: LD_VAR 0 1
16371: PUSH
16372: LD_INT 1
16374: ARRAY
16375: PPUSH
16376: CALL_OW 250
16380: PPUSH
16381: LD_VAR 0 1
16385: PUSH
16386: LD_INT 1
16388: ARRAY
16389: PPUSH
16390: CALL_OW 251
16394: PPUSH
16395: LD_INT 70
16397: PPUSH
16398: CALL_OW 495
// end ;
16402: PPOPN 1
16404: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16405: LD_EXP 26
16409: PUSH
16410: LD_EXP 58
16414: AND
16415: IFFALSE 16626
16417: GO 16419
16419: DISABLE
16420: LD_INT 0
16422: PPUSH
16423: PPUSH
16424: PPUSH
16425: PPUSH
16426: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16427: LD_ADDR_VAR 0 5
16431: PUSH
16432: LD_INT 22
16434: PUSH
16435: LD_OWVAR 2
16439: PUSH
16440: EMPTY
16441: LIST
16442: LIST
16443: PUSH
16444: LD_INT 21
16446: PUSH
16447: LD_INT 1
16449: PUSH
16450: EMPTY
16451: LIST
16452: LIST
16453: PUSH
16454: EMPTY
16455: LIST
16456: LIST
16457: PPUSH
16458: CALL_OW 69
16462: ST_TO_ADDR
// if not tmp then
16463: LD_VAR 0 5
16467: NOT
16468: IFFALSE 16472
// exit ;
16470: GO 16626
// for i in tmp do
16472: LD_ADDR_VAR 0 1
16476: PUSH
16477: LD_VAR 0 5
16481: PUSH
16482: FOR_IN
16483: IFFALSE 16624
// begin d := rand ( 0 , 5 ) ;
16485: LD_ADDR_VAR 0 4
16489: PUSH
16490: LD_INT 0
16492: PPUSH
16493: LD_INT 5
16495: PPUSH
16496: CALL_OW 12
16500: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
16501: LD_ADDR_VAR 0 2
16505: PUSH
16506: LD_VAR 0 1
16510: PPUSH
16511: CALL_OW 250
16515: PPUSH
16516: LD_VAR 0 4
16520: PPUSH
16521: LD_INT 3
16523: PPUSH
16524: LD_INT 12
16526: PPUSH
16527: CALL_OW 12
16531: PPUSH
16532: CALL_OW 272
16536: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16537: LD_ADDR_VAR 0 3
16541: PUSH
16542: LD_VAR 0 1
16546: PPUSH
16547: CALL_OW 251
16551: PPUSH
16552: LD_VAR 0 4
16556: PPUSH
16557: LD_INT 3
16559: PPUSH
16560: LD_INT 12
16562: PPUSH
16563: CALL_OW 12
16567: PPUSH
16568: CALL_OW 273
16572: ST_TO_ADDR
// if ValidHex ( x , y ) then
16573: LD_VAR 0 2
16577: PPUSH
16578: LD_VAR 0 3
16582: PPUSH
16583: CALL_OW 488
16587: IFFALSE 16622
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16589: LD_VAR 0 1
16593: PPUSH
16594: LD_VAR 0 2
16598: PPUSH
16599: LD_VAR 0 3
16603: PPUSH
16604: LD_INT 3
16606: PPUSH
16607: LD_INT 6
16609: PPUSH
16610: CALL_OW 12
16614: PPUSH
16615: LD_INT 1
16617: PPUSH
16618: CALL_OW 483
// end ;
16622: GO 16482
16624: POP
16625: POP
// end ;
16626: PPOPN 5
16628: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16629: LD_EXP 26
16633: PUSH
16634: LD_EXP 59
16638: AND
16639: IFFALSE 16733
16641: GO 16643
16643: DISABLE
16644: LD_INT 0
16646: PPUSH
16647: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16648: LD_ADDR_VAR 0 2
16652: PUSH
16653: LD_INT 22
16655: PUSH
16656: LD_OWVAR 2
16660: PUSH
16661: EMPTY
16662: LIST
16663: LIST
16664: PUSH
16665: LD_INT 32
16667: PUSH
16668: LD_INT 1
16670: PUSH
16671: EMPTY
16672: LIST
16673: LIST
16674: PUSH
16675: LD_INT 21
16677: PUSH
16678: LD_INT 2
16680: PUSH
16681: EMPTY
16682: LIST
16683: LIST
16684: PUSH
16685: EMPTY
16686: LIST
16687: LIST
16688: LIST
16689: PPUSH
16690: CALL_OW 69
16694: ST_TO_ADDR
// if not tmp then
16695: LD_VAR 0 2
16699: NOT
16700: IFFALSE 16704
// exit ;
16702: GO 16733
// for i in tmp do
16704: LD_ADDR_VAR 0 1
16708: PUSH
16709: LD_VAR 0 2
16713: PUSH
16714: FOR_IN
16715: IFFALSE 16731
// SetFuel ( i , 0 ) ;
16717: LD_VAR 0 1
16721: PPUSH
16722: LD_INT 0
16724: PPUSH
16725: CALL_OW 240
16729: GO 16714
16731: POP
16732: POP
// end ;
16733: PPOPN 2
16735: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
16736: LD_EXP 26
16740: PUSH
16741: LD_EXP 60
16745: AND
16746: IFFALSE 16812
16748: GO 16750
16750: DISABLE
16751: LD_INT 0
16753: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16754: LD_ADDR_VAR 0 1
16758: PUSH
16759: LD_INT 22
16761: PUSH
16762: LD_OWVAR 2
16766: PUSH
16767: EMPTY
16768: LIST
16769: LIST
16770: PUSH
16771: LD_INT 30
16773: PUSH
16774: LD_INT 29
16776: PUSH
16777: EMPTY
16778: LIST
16779: LIST
16780: PUSH
16781: EMPTY
16782: LIST
16783: LIST
16784: PPUSH
16785: CALL_OW 69
16789: ST_TO_ADDR
// if not tmp then
16790: LD_VAR 0 1
16794: NOT
16795: IFFALSE 16799
// exit ;
16797: GO 16812
// DestroyUnit ( tmp [ 1 ] ) ;
16799: LD_VAR 0 1
16803: PUSH
16804: LD_INT 1
16806: ARRAY
16807: PPUSH
16808: CALL_OW 65
// end ;
16812: PPOPN 1
16814: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
16815: LD_EXP 26
16819: PUSH
16820: LD_EXP 62
16824: AND
16825: IFFALSE 16938
16827: GO 16829
16829: DISABLE
16830: LD_INT 0
16832: PPUSH
// begin uc_side := 0 ;
16833: LD_ADDR_OWVAR 20
16837: PUSH
16838: LD_INT 0
16840: ST_TO_ADDR
// uc_nation := nation_arabian ;
16841: LD_ADDR_OWVAR 21
16845: PUSH
16846: LD_INT 2
16848: ST_TO_ADDR
// PrepareHuman ( sex_male , 10 , class_desert_warior ) ;
16849: LD_INT 1
16851: PPUSH
16852: LD_INT 10
16854: PPUSH
16855: LD_INT 11
16857: PPUSH
16858: CALL_OW 380
// un := CreateHuman ;
16862: LD_ADDR_VAR 0 1
16866: PUSH
16867: CALL_OW 44
16871: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16872: LD_VAR 0 1
16876: PPUSH
16877: LD_INT 1
16879: PPUSH
16880: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16884: LD_INT 35
16886: PPUSH
16887: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16891: LD_VAR 0 1
16895: PPUSH
16896: LD_INT 22
16898: PUSH
16899: LD_OWVAR 2
16903: PUSH
16904: EMPTY
16905: LIST
16906: LIST
16907: PPUSH
16908: CALL_OW 69
16912: PPUSH
16913: LD_VAR 0 1
16917: PPUSH
16918: CALL_OW 74
16922: PPUSH
16923: CALL_OW 115
// until IsDead ( un ) ;
16927: LD_VAR 0 1
16931: PPUSH
16932: CALL_OW 301
16936: IFFALSE 16884
// end ; end_of_file
16938: PPOPN 1
16940: END
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
16941: LD_INT 0
16943: PPUSH
16944: PPUSH
16945: PPUSH
16946: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
16947: LD_VAR 0 1
16951: PPUSH
16952: CALL_OW 264
16956: PUSH
16957: LD_EXP 25
16961: EQUAL
16962: IFFALSE 17034
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
16964: LD_INT 68
16966: PPUSH
16967: LD_VAR 0 1
16971: PPUSH
16972: CALL_OW 255
16976: PPUSH
16977: CALL_OW 321
16981: PUSH
16982: LD_INT 2
16984: EQUAL
16985: IFFALSE 16997
// eff := 70 else
16987: LD_ADDR_VAR 0 6
16991: PUSH
16992: LD_INT 70
16994: ST_TO_ADDR
16995: GO 17005
// eff := 30 ;
16997: LD_ADDR_VAR 0 6
17001: PUSH
17002: LD_INT 30
17004: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
17005: LD_VAR 0 1
17009: PPUSH
17010: CALL_OW 250
17014: PPUSH
17015: LD_VAR 0 1
17019: PPUSH
17020: CALL_OW 251
17024: PPUSH
17025: LD_VAR 0 6
17029: PPUSH
17030: CALL_OW 495
// end ; end ;
17034: LD_VAR 0 4
17038: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
17039: LD_INT 0
17041: PPUSH
17042: PPUSH
17043: PPUSH
17044: PPUSH
17045: PPUSH
17046: PPUSH
// if cmd = 124 then
17047: LD_VAR 0 1
17051: PUSH
17052: LD_INT 124
17054: EQUAL
17055: IFFALSE 17261
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
17057: LD_ADDR_VAR 0 5
17061: PUSH
17062: LD_INT 2
17064: PUSH
17065: LD_INT 34
17067: PUSH
17068: LD_INT 53
17070: PUSH
17071: EMPTY
17072: LIST
17073: LIST
17074: PUSH
17075: LD_INT 34
17077: PUSH
17078: LD_INT 14
17080: PUSH
17081: EMPTY
17082: LIST
17083: LIST
17084: PUSH
17085: EMPTY
17086: LIST
17087: LIST
17088: LIST
17089: PPUSH
17090: CALL_OW 69
17094: ST_TO_ADDR
// if not tmp then
17095: LD_VAR 0 5
17099: NOT
17100: IFFALSE 17104
// exit ;
17102: GO 17261
// for i in tmp do
17104: LD_ADDR_VAR 0 3
17108: PUSH
17109: LD_VAR 0 5
17113: PUSH
17114: FOR_IN
17115: IFFALSE 17259
// begin taskList := GetTaskList ( i ) ;
17117: LD_ADDR_VAR 0 6
17121: PUSH
17122: LD_VAR 0 3
17126: PPUSH
17127: CALL_OW 437
17131: ST_TO_ADDR
// if not taskList then
17132: LD_VAR 0 6
17136: NOT
17137: IFFALSE 17141
// continue ;
17139: GO 17114
// for j = 1 to taskList do
17141: LD_ADDR_VAR 0 4
17145: PUSH
17146: DOUBLE
17147: LD_INT 1
17149: DEC
17150: ST_TO_ADDR
17151: LD_VAR 0 6
17155: PUSH
17156: FOR_TO
17157: IFFALSE 17255
// if taskList [ j ] [ 1 ] = | then
17159: LD_VAR 0 6
17163: PUSH
17164: LD_VAR 0 4
17168: ARRAY
17169: PUSH
17170: LD_INT 1
17172: ARRAY
17173: PUSH
17174: LD_STRING |
17176: EQUAL
17177: IFFALSE 17253
// begin _taskList := Delete ( taskList , 1 ) ;
17179: LD_ADDR_VAR 0 7
17183: PUSH
17184: LD_VAR 0 6
17188: PPUSH
17189: LD_INT 1
17191: PPUSH
17192: CALL_OW 3
17196: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
17197: LD_VAR 0 3
17201: PPUSH
17202: LD_VAR 0 7
17206: PPUSH
17207: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
17211: LD_VAR 0 3
17215: PPUSH
17216: LD_VAR 0 6
17220: PUSH
17221: LD_VAR 0 4
17225: ARRAY
17226: PUSH
17227: LD_INT 2
17229: ARRAY
17230: PPUSH
17231: LD_VAR 0 6
17235: PUSH
17236: LD_VAR 0 4
17240: ARRAY
17241: PUSH
17242: LD_INT 3
17244: ARRAY
17245: PPUSH
17246: LD_INT 8
17248: PPUSH
17249: CALL 17266 0 4
// end ;
17253: GO 17156
17255: POP
17256: POP
// end ;
17257: GO 17114
17259: POP
17260: POP
// end ; end ;
17261: LD_VAR 0 2
17265: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
17266: LD_INT 0
17268: PPUSH
17269: PPUSH
17270: PPUSH
17271: PPUSH
17272: PPUSH
17273: PPUSH
17274: PPUSH
17275: PPUSH
17276: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
17277: LD_VAR 0 1
17281: NOT
17282: PUSH
17283: LD_VAR 0 2
17287: PPUSH
17288: LD_VAR 0 3
17292: PPUSH
17293: CALL_OW 488
17297: NOT
17298: OR
17299: PUSH
17300: LD_VAR 0 4
17304: NOT
17305: OR
17306: IFFALSE 17310
// exit ;
17308: GO 17650
// list := [ ] ;
17310: LD_ADDR_VAR 0 13
17314: PUSH
17315: EMPTY
17316: ST_TO_ADDR
// if x - r < 0 then
17317: LD_VAR 0 2
17321: PUSH
17322: LD_VAR 0 4
17326: MINUS
17327: PUSH
17328: LD_INT 0
17330: LESS
17331: IFFALSE 17343
// min_x := 0 else
17333: LD_ADDR_VAR 0 7
17337: PUSH
17338: LD_INT 0
17340: ST_TO_ADDR
17341: GO 17359
// min_x := x - r ;
17343: LD_ADDR_VAR 0 7
17347: PUSH
17348: LD_VAR 0 2
17352: PUSH
17353: LD_VAR 0 4
17357: MINUS
17358: ST_TO_ADDR
// if y - r < 0 then
17359: LD_VAR 0 3
17363: PUSH
17364: LD_VAR 0 4
17368: MINUS
17369: PUSH
17370: LD_INT 0
17372: LESS
17373: IFFALSE 17385
// min_y := 0 else
17375: LD_ADDR_VAR 0 8
17379: PUSH
17380: LD_INT 0
17382: ST_TO_ADDR
17383: GO 17401
// min_y := y - r ;
17385: LD_ADDR_VAR 0 8
17389: PUSH
17390: LD_VAR 0 3
17394: PUSH
17395: LD_VAR 0 4
17399: MINUS
17400: ST_TO_ADDR
// max_x := x + r ;
17401: LD_ADDR_VAR 0 9
17405: PUSH
17406: LD_VAR 0 2
17410: PUSH
17411: LD_VAR 0 4
17415: PLUS
17416: ST_TO_ADDR
// max_y := y + r ;
17417: LD_ADDR_VAR 0 10
17421: PUSH
17422: LD_VAR 0 3
17426: PUSH
17427: LD_VAR 0 4
17431: PLUS
17432: ST_TO_ADDR
// for _x = min_x to max_x do
17433: LD_ADDR_VAR 0 11
17437: PUSH
17438: DOUBLE
17439: LD_VAR 0 7
17443: DEC
17444: ST_TO_ADDR
17445: LD_VAR 0 9
17449: PUSH
17450: FOR_TO
17451: IFFALSE 17568
// for _y = min_y to max_y do
17453: LD_ADDR_VAR 0 12
17457: PUSH
17458: DOUBLE
17459: LD_VAR 0 8
17463: DEC
17464: ST_TO_ADDR
17465: LD_VAR 0 10
17469: PUSH
17470: FOR_TO
17471: IFFALSE 17564
// begin if not ValidHex ( _x , _y ) then
17473: LD_VAR 0 11
17477: PPUSH
17478: LD_VAR 0 12
17482: PPUSH
17483: CALL_OW 488
17487: NOT
17488: IFFALSE 17492
// continue ;
17490: GO 17470
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
17492: LD_VAR 0 11
17496: PPUSH
17497: LD_VAR 0 12
17501: PPUSH
17502: CALL_OW 351
17506: PUSH
17507: LD_VAR 0 11
17511: PPUSH
17512: LD_VAR 0 12
17516: PPUSH
17517: CALL_OW 554
17521: AND
17522: IFFALSE 17562
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
17524: LD_ADDR_VAR 0 13
17528: PUSH
17529: LD_VAR 0 13
17533: PPUSH
17534: LD_VAR 0 13
17538: PUSH
17539: LD_INT 1
17541: PLUS
17542: PPUSH
17543: LD_VAR 0 11
17547: PUSH
17548: LD_VAR 0 12
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: PPUSH
17557: CALL_OW 2
17561: ST_TO_ADDR
// end ;
17562: GO 17470
17564: POP
17565: POP
17566: GO 17450
17568: POP
17569: POP
// if not list then
17570: LD_VAR 0 13
17574: NOT
17575: IFFALSE 17579
// exit ;
17577: GO 17650
// for i in list do
17579: LD_ADDR_VAR 0 6
17583: PUSH
17584: LD_VAR 0 13
17588: PUSH
17589: FOR_IN
17590: IFFALSE 17648
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
17592: LD_VAR 0 1
17596: PPUSH
17597: LD_STRING M
17599: PUSH
17600: LD_VAR 0 6
17604: PUSH
17605: LD_INT 1
17607: ARRAY
17608: PUSH
17609: LD_VAR 0 6
17613: PUSH
17614: LD_INT 2
17616: ARRAY
17617: PUSH
17618: LD_INT 0
17620: PUSH
17621: LD_INT 0
17623: PUSH
17624: LD_INT 0
17626: PUSH
17627: LD_INT 0
17629: PUSH
17630: EMPTY
17631: LIST
17632: LIST
17633: LIST
17634: LIST
17635: LIST
17636: LIST
17637: LIST
17638: PUSH
17639: EMPTY
17640: LIST
17641: PPUSH
17642: CALL_OW 447
17646: GO 17589
17648: POP
17649: POP
// end ;
17650: LD_VAR 0 5
17654: RET
