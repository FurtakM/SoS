// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// Init ;
   8: CALL 44 0 0
// DebugMode ;
  12: CALL 265 0 0
// AnimateTrees ( true ) ;
  16: LD_INT 1
  18: PPUSH
  19: CALL_OW 573
// CreateNature ;
  23: CALL 1568 0 0
// PrepareRussians ;
  27: CALL 4578 0 0
// PrepareAmericans ;
  31: CALL 3448 0 0
// Action ;
  35: CALL 8696 0 0
// SaveForQuickRestart ;
  39: CALL_OW 22
// end ;
  43: END
// export debug ; export mission_prev_prefix , mission_prefix ; export buildings_counter , time_to_end , can_end , must_end , kill_counter ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// mission_prefix := 07c_ ;
  55: LD_ADDR_EXP 3
  59: PUSH
  60: LD_STRING 07c_
  62: ST_TO_ADDR
// mission_prev_prefix := 07_ ;
  63: LD_ADDR_EXP 2
  67: PUSH
  68: LD_STRING 07_
  70: ST_TO_ADDR
// buildings_counter := 0 ;
  71: LD_ADDR_EXP 4
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// time_to_end := [ [ 32 32$00 , 29 29$00 , 26 26$00 , 23 23$00 ] [ Difficulty ] , [ 38 38$00 , 36 36$00 , 34 34$00 , 32 32$00 ] [ Difficulty ] , [ 43 43$00 , 41 41$00 , 39 39$00 , 37 37$00 ] [ Difficulty ] ] ;
  79: LD_ADDR_EXP 5
  83: PUSH
  84: LD_INT 67200
  86: PUSH
  87: LD_INT 60900
  89: PUSH
  90: LD_INT 54600
  92: PUSH
  93: LD_INT 48300
  95: PUSH
  96: EMPTY
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: PUSH
 102: LD_OWVAR 67
 106: ARRAY
 107: PUSH
 108: LD_INT 79800
 110: PUSH
 111: LD_INT 75600
 113: PUSH
 114: LD_INT 71400
 116: PUSH
 117: LD_INT 67200
 119: PUSH
 120: EMPTY
 121: LIST
 122: LIST
 123: LIST
 124: LIST
 125: PUSH
 126: LD_OWVAR 67
 130: ARRAY
 131: PUSH
 132: LD_INT 90300
 134: PUSH
 135: LD_INT 86100
 137: PUSH
 138: LD_INT 81900
 140: PUSH
 141: LD_INT 77700
 143: PUSH
 144: EMPTY
 145: LIST
 146: LIST
 147: LIST
 148: LIST
 149: PUSH
 150: LD_OWVAR 67
 154: ARRAY
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: ST_TO_ADDR
// can_end := false ;
 161: LD_ADDR_EXP 6
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// must_end := false ;
 169: LD_ADDR_EXP 7
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// kill_counter := 0 ;
 177: LD_ADDR_EXP 8
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// end ;
 185: LD_VAR 0 1
 189: RET
// every 0 0$01 trigger not debug do
 190: LD_EXP 1
 194: NOT
 195: IFFALSE 264
 197: GO 199
 199: DISABLE
// begin enable ;
 200: ENABLE
// if not must_end then
 201: LD_EXP 7
 205: NOT
 206: IFFALSE 227
// display_strings := [ #Am07-1 , tick ] else
 208: LD_ADDR_OWVAR 47
 212: PUSH
 213: LD_STRING #Am07-1
 215: PUSH
 216: LD_OWVAR 1
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: ST_TO_ADDR
 225: GO 264
// display_strings := [ #Am07-1 , tick , #Am07-2 , time_to_end [ 3 ] - tick ] ;
 227: LD_ADDR_OWVAR 47
 231: PUSH
 232: LD_STRING #Am07-1
 234: PUSH
 235: LD_OWVAR 1
 239: PUSH
 240: LD_STRING #Am07-2
 242: PUSH
 243: LD_EXP 5
 247: PUSH
 248: LD_INT 3
 250: ARRAY
 251: PUSH
 252: LD_OWVAR 1
 256: MINUS
 257: PUSH
 258: EMPTY
 259: LIST
 260: LIST
 261: LIST
 262: LIST
 263: ST_TO_ADDR
// end ;
 264: END
// function DebugMode ; var i ; begin
 265: LD_INT 0
 267: PPUSH
 268: PPUSH
// if not debug then
 269: LD_EXP 1
 273: NOT
 274: IFFALSE 278
// exit ;
 276: GO 293
// Difficulty := 4 ;
 278: LD_ADDR_OWVAR 67
 282: PUSH
 283: LD_INT 4
 285: ST_TO_ADDR
// FogOff ( 1 ) ;
 286: LD_INT 1
 288: PPUSH
 289: CALL_OW 344
// end ;
 293: LD_VAR 0 1
 297: RET
// every 3 trigger debug do var i , filter ;
 298: LD_EXP 1
 302: IFFALSE 391
 304: GO 306
 306: DISABLE
 307: LD_INT 0
 309: PPUSH
 310: PPUSH
// begin enable ;
 311: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 500 ] ] ] ) ;
 312: LD_ADDR_VAR 0 2
 316: PUSH
 317: LD_INT 22
 319: PUSH
 320: LD_INT 1
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PUSH
 327: LD_INT 3
 329: PUSH
 330: LD_INT 24
 332: PUSH
 333: LD_INT 500
 335: PUSH
 336: EMPTY
 337: LIST
 338: LIST
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: PPUSH
 348: CALL_OW 69
 352: ST_TO_ADDR
// if not filter then
 353: LD_VAR 0 2
 357: NOT
 358: IFFALSE 362
// exit ;
 360: GO 391
// for i in filter do
 362: LD_ADDR_VAR 0 1
 366: PUSH
 367: LD_VAR 0 2
 371: PUSH
 372: FOR_IN
 373: IFFALSE 389
// SetLives ( i , 1000 ) ;
 375: LD_VAR 0 1
 379: PPUSH
 380: LD_INT 1000
 382: PPUSH
 383: CALL_OW 234
 387: GO 372
 389: POP
 390: POP
// end ;
 391: PPOPN 2
 393: END
// every 0 0$1 trigger kill_counter >= 20 do
 394: LD_EXP 8
 398: PUSH
 399: LD_INT 20
 401: GREATEREQUAL
 402: IFFALSE 414
 404: GO 406
 406: DISABLE
// SetAchievement ( ACH_HITMAN ) ;
 407: LD_STRING ACH_HITMAN
 409: PPUSH
 410: CALL_OW 543
 414: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) >= 3 do
 415: LD_INT 22
 417: PUSH
 418: LD_INT 1
 420: PUSH
 421: EMPTY
 422: LIST
 423: LIST
 424: PUSH
 425: LD_INT 23
 427: PUSH
 428: LD_INT 3
 430: PUSH
 431: EMPTY
 432: LIST
 433: LIST
 434: PUSH
 435: LD_INT 21
 437: PUSH
 438: LD_INT 2
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: LIST
 449: PPUSH
 450: CALL_OW 69
 454: PUSH
 455: LD_INT 3
 457: GREATEREQUAL
 458: IFFALSE 470
 460: GO 462
 462: DISABLE
// SetAchievement ( ACH_TANKACE ) ;
 463: LD_STRING ACH_TANKACE
 465: PPUSH
 466: CALL_OW 543
 470: END
// every 0 0$1 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) = 0 do
 471: LD_INT 2
 473: PUSH
 474: LD_INT 30
 476: PUSH
 477: LD_INT 0
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PUSH
 484: LD_INT 30
 486: PUSH
 487: LD_INT 1
 489: PUSH
 490: EMPTY
 491: LIST
 492: LIST
 493: PUSH
 494: EMPTY
 495: LIST
 496: LIST
 497: LIST
 498: PPUSH
 499: CALL_OW 69
 503: PUSH
 504: LD_INT 0
 506: EQUAL
 507: IFFALSE 519
 509: GO 511
 511: DISABLE
// SetAchievement ( ACH_COMMANDO ) ; end_of_file
 512: LD_STRING ACH_COMMANDO
 514: PPUSH
 515: CALL_OW 543
 519: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 520: LD_INT 0
 522: PPUSH
// uc_side := side ;
 523: LD_ADDR_OWVAR 20
 527: PUSH
 528: LD_VAR 0 1
 532: ST_TO_ADDR
// uc_nation := nation ;
 533: LD_ADDR_OWVAR 21
 537: PUSH
 538: LD_VAR 0 2
 542: ST_TO_ADDR
// vc_chassis := chassis ;
 543: LD_ADDR_OWVAR 37
 547: PUSH
 548: LD_VAR 0 3
 552: ST_TO_ADDR
// vc_engine := engine ;
 553: LD_ADDR_OWVAR 39
 557: PUSH
 558: LD_VAR 0 4
 562: ST_TO_ADDR
// vc_control := control ;
 563: LD_ADDR_OWVAR 38
 567: PUSH
 568: LD_VAR 0 5
 572: ST_TO_ADDR
// vc_weapon := weapon ;
 573: LD_ADDR_OWVAR 40
 577: PUSH
 578: LD_VAR 0 6
 582: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 583: LD_ADDR_OWVAR 41
 587: PUSH
 588: LD_VAR 0 7
 592: ST_TO_ADDR
// result := CreateVehicle ;
 593: LD_ADDR_VAR 0 8
 597: PUSH
 598: CALL_OW 45
 602: ST_TO_ADDR
// end ;
 603: LD_VAR 0 8
 607: RET
// export function GetRandom ( sex ) ; var i , filter ; begin
 608: LD_INT 0
 610: PPUSH
 611: PPUSH
 612: PPUSH
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] ;
 613: LD_ADDR_VAR 0 4
 617: PUSH
 618: LD_INT 22
 620: PUSH
 621: LD_INT 1
 623: PUSH
 624: EMPTY
 625: LIST
 626: LIST
 627: PUSH
 628: LD_INT 21
 630: PUSH
 631: LD_INT 1
 633: PUSH
 634: EMPTY
 635: LIST
 636: LIST
 637: PUSH
 638: LD_INT 50
 640: PUSH
 641: EMPTY
 642: LIST
 643: PUSH
 644: EMPTY
 645: LIST
 646: LIST
 647: LIST
 648: PPUSH
 649: CALL_OW 69
 653: PUSH
 654: LD_EXP 9
 658: PUSH
 659: LD_EXP 10
 663: PUSH
 664: LD_EXP 11
 668: PUSH
 669: LD_EXP 12
 673: PUSH
 674: LD_EXP 13
 678: PUSH
 679: LD_EXP 14
 683: PUSH
 684: LD_EXP 15
 688: PUSH
 689: LD_EXP 16
 693: PUSH
 694: LD_EXP 18
 698: PUSH
 699: LD_EXP 17
 703: PUSH
 704: EMPTY
 705: LIST
 706: LIST
 707: LIST
 708: LIST
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: DIFF
 716: ST_TO_ADDR
// if not filter then
 717: LD_VAR 0 4
 721: NOT
 722: IFFALSE 726
// exit ;
 724: GO 753
// result := UnitFilter ( filter , [ f_sex , sex ] ) ;
 726: LD_ADDR_VAR 0 2
 730: PUSH
 731: LD_VAR 0 4
 735: PPUSH
 736: LD_INT 26
 738: PUSH
 739: LD_VAR 0 1
 743: PUSH
 744: EMPTY
 745: LIST
 746: LIST
 747: PPUSH
 748: CALL_OW 72
 752: ST_TO_ADDR
// end ;
 753: LD_VAR 0 2
 757: RET
// export function SayX ( units , ident ) ; var i ; begin
 758: LD_INT 0
 760: PPUSH
 761: PPUSH
// result := false ;
 762: LD_ADDR_VAR 0 3
 766: PUSH
 767: LD_INT 0
 769: ST_TO_ADDR
// if not units then
 770: LD_VAR 0 1
 774: NOT
 775: IFFALSE 779
// exit ;
 777: GO 833
// for i in units do
 779: LD_ADDR_VAR 0 4
 783: PUSH
 784: LD_VAR 0 1
 788: PUSH
 789: FOR_IN
 790: IFFALSE 831
// if IsOk ( i ) then
 792: LD_VAR 0 4
 796: PPUSH
 797: CALL_OW 302
 801: IFFALSE 829
// begin Say ( i , ident ) ;
 803: LD_VAR 0 4
 807: PPUSH
 808: LD_VAR 0 2
 812: PPUSH
 813: CALL_OW 88
// result := i ;
 817: LD_ADDR_VAR 0 3
 821: PUSH
 822: LD_VAR 0 4
 826: ST_TO_ADDR
// break ;
 827: GO 831
// end ;
 829: GO 789
 831: POP
 832: POP
// end ;
 833: LD_VAR 0 3
 837: RET
// export function GoToAnotherTower ( un , b , x , y ) ; var i , filter , barracks , side ; begin
 838: LD_INT 0
 840: PPUSH
 841: PPUSH
 842: PPUSH
 843: PPUSH
 844: PPUSH
// if not un or not IsOk ( un ) then
 845: LD_VAR 0 1
 849: NOT
 850: PUSH
 851: LD_VAR 0 1
 855: PPUSH
 856: CALL_OW 302
 860: NOT
 861: OR
 862: IFFALSE 866
// exit ;
 864: GO 1173
// side := GetSide ( un ) ;
 866: LD_ADDR_VAR 0 9
 870: PUSH
 871: LD_VAR 0 1
 875: PPUSH
 876: CALL_OW 255
 880: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_not , [ f_tag , 7 ] ] , [ f_ok ] , [ f_empty ] ] ) diff b ;
 881: LD_ADDR_VAR 0 7
 885: PUSH
 886: LD_INT 22
 888: PUSH
 889: LD_VAR 0 9
 893: PUSH
 894: EMPTY
 895: LIST
 896: LIST
 897: PUSH
 898: LD_INT 30
 900: PUSH
 901: LD_INT 32
 903: PUSH
 904: EMPTY
 905: LIST
 906: LIST
 907: PUSH
 908: LD_INT 3
 910: PUSH
 911: LD_INT 120
 913: PUSH
 914: LD_INT 7
 916: PUSH
 917: EMPTY
 918: LIST
 919: LIST
 920: PUSH
 921: EMPTY
 922: LIST
 923: LIST
 924: PUSH
 925: LD_INT 50
 927: PUSH
 928: EMPTY
 929: LIST
 930: PUSH
 931: LD_INT 58
 933: PUSH
 934: EMPTY
 935: LIST
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: LIST
 941: LIST
 942: LIST
 943: PPUSH
 944: CALL_OW 69
 948: PUSH
 949: LD_VAR 0 2
 953: DIFF
 954: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_barracks ] ] ) ;
 955: LD_ADDR_VAR 0 8
 959: PUSH
 960: LD_INT 22
 962: PUSH
 963: LD_VAR 0 9
 967: PUSH
 968: EMPTY
 969: LIST
 970: LIST
 971: PUSH
 972: LD_INT 30
 974: PUSH
 975: LD_INT 5
 977: PUSH
 978: EMPTY
 979: LIST
 980: LIST
 981: PUSH
 982: EMPTY
 983: LIST
 984: LIST
 985: PPUSH
 986: CALL_OW 69
 990: ST_TO_ADDR
// if not filter then
 991: LD_VAR 0 7
 995: NOT
 996: IFFALSE 1086
// begin if barracks then
 998: LD_VAR 0 8
1002: IFFALSE 1065
// for i in barracks do
1004: LD_ADDR_VAR 0 6
1008: PUSH
1009: LD_VAR 0 8
1013: PUSH
1014: FOR_IN
1015: IFFALSE 1063
// begin if UnitsInside ( i ) < 6 and IsOk ( i ) then
1017: LD_VAR 0 6
1021: PPUSH
1022: CALL_OW 313
1026: PUSH
1027: LD_INT 6
1029: LESS
1030: PUSH
1031: LD_VAR 0 6
1035: PPUSH
1036: CALL_OW 302
1040: AND
1041: IFFALSE 1061
// begin ComEnterUnit ( un , i ) ;
1043: LD_VAR 0 1
1047: PPUSH
1048: LD_VAR 0 6
1052: PPUSH
1053: CALL_OW 120
// exit ;
1057: POP
1058: POP
1059: GO 1173
// end ; end ;
1061: GO 1014
1063: POP
1064: POP
// ComMoveXY ( un , x , y ) ;
1065: LD_VAR 0 1
1069: PPUSH
1070: LD_VAR 0 3
1074: PPUSH
1075: LD_VAR 0 4
1079: PPUSH
1080: CALL_OW 111
// end else
1084: GO 1173
// begin filter := SortByDistanceUnit ( un , filter , true , true ) ;
1086: LD_ADDR_VAR 0 7
1090: PUSH
1091: LD_VAR 0 1
1095: PPUSH
1096: LD_VAR 0 7
1100: PPUSH
1101: LD_INT 1
1103: PPUSH
1104: LD_INT 1
1106: PPUSH
1107: CALL 38181 0 4
1111: ST_TO_ADDR
// if filter then
1112: LD_VAR 0 7
1116: IFFALSE 1154
// begin SetTag ( filter [ 1 ] , 7 ) ;
1118: LD_VAR 0 7
1122: PUSH
1123: LD_INT 1
1125: ARRAY
1126: PPUSH
1127: LD_INT 7
1129: PPUSH
1130: CALL_OW 109
// ComEnterUnit ( un , filter [ 1 ] ) ;
1134: LD_VAR 0 1
1138: PPUSH
1139: LD_VAR 0 7
1143: PUSH
1144: LD_INT 1
1146: ARRAY
1147: PPUSH
1148: CALL_OW 120
// end else
1152: GO 1173
// ComMoveXY ( un , x , y ) ;
1154: LD_VAR 0 1
1158: PPUSH
1159: LD_VAR 0 3
1163: PPUSH
1164: LD_VAR 0 4
1168: PPUSH
1169: CALL_OW 111
// end ; end ;
1173: LD_VAR 0 5
1177: RET
// export function BaseNeedEnergy ( base ) ; var i , tmp ; begin
1178: LD_INT 0
1180: PPUSH
1181: PPUSH
1182: PPUSH
// if not base then
1183: LD_VAR 0 1
1187: NOT
1188: IFFALSE 1192
// exit ;
1190: GO 1250
// tmp := GetEnergy ( GetBase ( base ) ) ;
1192: LD_ADDR_VAR 0 4
1196: PUSH
1197: LD_VAR 0 1
1201: PPUSH
1202: CALL_OW 274
1206: PPUSH
1207: CALL_OW 278
1211: ST_TO_ADDR
// if tmp [ 1 ] > tmp [ 4 ] then
1212: LD_VAR 0 4
1216: PUSH
1217: LD_INT 1
1219: ARRAY
1220: PUSH
1221: LD_VAR 0 4
1225: PUSH
1226: LD_INT 4
1228: ARRAY
1229: GREATER
1230: IFFALSE 1242
// result := true else
1232: LD_ADDR_VAR 0 2
1236: PUSH
1237: LD_INT 1
1239: ST_TO_ADDR
1240: GO 1250
// result := false ;
1242: LD_ADDR_VAR 0 2
1246: PUSH
1247: LD_INT 0
1249: ST_TO_ADDR
// end ;
1250: LD_VAR 0 2
1254: RET
// export function FilterPeople ( side ) ; begin
1255: LD_INT 0
1257: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) ;
1258: LD_ADDR_VAR 0 2
1262: PUSH
1263: LD_INT 22
1265: PUSH
1266: LD_VAR 0 1
1270: PUSH
1271: EMPTY
1272: LIST
1273: LIST
1274: PUSH
1275: LD_INT 21
1277: PUSH
1278: LD_INT 1
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: PPUSH
1289: CALL_OW 69
1293: ST_TO_ADDR
// end ;
1294: LD_VAR 0 2
1298: RET
// export function FilterDrivers ( side ) ; begin
1299: LD_INT 0
1301: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_outside ] ] ] ) ;
1302: LD_ADDR_VAR 0 2
1306: PUSH
1307: LD_INT 22
1309: PUSH
1310: LD_VAR 0 1
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: PUSH
1319: LD_INT 3
1321: PUSH
1322: LD_INT 56
1324: PUSH
1325: EMPTY
1326: LIST
1327: PUSH
1328: EMPTY
1329: LIST
1330: LIST
1331: PUSH
1332: EMPTY
1333: LIST
1334: LIST
1335: PPUSH
1336: CALL_OW 69
1340: ST_TO_ADDR
// end ;
1341: LD_VAR 0 2
1345: RET
// export function FilterPeopleArea ( side , area ) ; begin
1346: LD_INT 0
1348: PPUSH
// result := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
1349: LD_ADDR_VAR 0 3
1353: PUSH
1354: LD_VAR 0 2
1358: PPUSH
1359: LD_INT 22
1361: PUSH
1362: LD_INT 1
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: PUSH
1369: LD_INT 21
1371: PUSH
1372: LD_INT 1
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: PUSH
1379: EMPTY
1380: LIST
1381: LIST
1382: PPUSH
1383: CALL_OW 70
1387: ST_TO_ADDR
// end ;
1388: LD_VAR 0 3
1392: RET
// export function FilterDriversArea ( side , area ) ; var i , tmp ; begin
1393: LD_INT 0
1395: PPUSH
1396: PPUSH
1397: PPUSH
// tmp := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
1398: LD_ADDR_VAR 0 5
1402: PUSH
1403: LD_VAR 0 2
1407: PPUSH
1408: LD_INT 22
1410: PUSH
1411: LD_INT 1
1413: PUSH
1414: EMPTY
1415: LIST
1416: LIST
1417: PUSH
1418: LD_INT 21
1420: PUSH
1421: LD_INT 2
1423: PUSH
1424: EMPTY
1425: LIST
1426: LIST
1427: PUSH
1428: LD_INT 3
1430: PUSH
1431: LD_INT 58
1433: PUSH
1434: EMPTY
1435: LIST
1436: PUSH
1437: EMPTY
1438: LIST
1439: LIST
1440: PUSH
1441: EMPTY
1442: LIST
1443: LIST
1444: LIST
1445: PPUSH
1446: CALL_OW 70
1450: ST_TO_ADDR
// result := [ ] ;
1451: LD_ADDR_VAR 0 3
1455: PUSH
1456: EMPTY
1457: ST_TO_ADDR
// if not tmp then
1458: LD_VAR 0 5
1462: NOT
1463: IFFALSE 1467
// exit ;
1465: GO 1519
// for i in tmp do
1467: LD_ADDR_VAR 0 4
1471: PUSH
1472: LD_VAR 0 5
1476: PUSH
1477: FOR_IN
1478: IFFALSE 1503
// result := result union IsDrivenBy ( i ) ;
1480: LD_ADDR_VAR 0 3
1484: PUSH
1485: LD_VAR 0 3
1489: PUSH
1490: LD_VAR 0 4
1494: PPUSH
1495: CALL_OW 311
1499: UNION
1500: ST_TO_ADDR
1501: GO 1477
1503: POP
1504: POP
// result := result diff 0 ;
1505: LD_ADDR_VAR 0 3
1509: PUSH
1510: LD_VAR 0 3
1514: PUSH
1515: LD_INT 0
1517: DIFF
1518: ST_TO_ADDR
// end ;
1519: LD_VAR 0 3
1523: RET
// export function FilterBuildings ( side ) ; begin
1524: LD_INT 0
1526: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
1527: LD_ADDR_VAR 0 2
1531: PUSH
1532: LD_INT 22
1534: PUSH
1535: LD_VAR 0 1
1539: PUSH
1540: EMPTY
1541: LIST
1542: LIST
1543: PUSH
1544: LD_INT 21
1546: PUSH
1547: LD_INT 3
1549: PUSH
1550: EMPTY
1551: LIST
1552: LIST
1553: PUSH
1554: EMPTY
1555: LIST
1556: LIST
1557: PPUSH
1558: CALL_OW 69
1562: ST_TO_ADDR
// end ;
1563: LD_VAR 0 2
1567: RET
// export function CreateNature ; var i , animal , nat_area ; begin
1568: LD_INT 0
1570: PPUSH
1571: PPUSH
1572: PPUSH
1573: PPUSH
// uc_side = 0 ;
1574: LD_ADDR_OWVAR 20
1578: PUSH
1579: LD_INT 0
1581: ST_TO_ADDR
// uc_nation = 0 ;
1582: LD_ADDR_OWVAR 21
1586: PUSH
1587: LD_INT 0
1589: ST_TO_ADDR
// nat_area := wildArea ;
1590: LD_ADDR_VAR 0 4
1594: PUSH
1595: LD_INT 3
1597: ST_TO_ADDR
// InitHc ;
1598: CALL_OW 19
// for i = 1 to 4 do
1602: LD_ADDR_VAR 0 2
1606: PUSH
1607: DOUBLE
1608: LD_INT 1
1610: DEC
1611: ST_TO_ADDR
1612: LD_INT 4
1614: PUSH
1615: FOR_TO
1616: IFFALSE 1671
// begin hc_class = 18 ;
1618: LD_ADDR_OWVAR 28
1622: PUSH
1623: LD_INT 18
1625: ST_TO_ADDR
// hc_gallery =  ;
1626: LD_ADDR_OWVAR 33
1630: PUSH
1631: LD_STRING 
1633: ST_TO_ADDR
// hc_face_number = 1 ;
1634: LD_ADDR_OWVAR 34
1638: PUSH
1639: LD_INT 1
1641: ST_TO_ADDR
// animal := CreateHuman ;
1642: LD_ADDR_VAR 0 3
1646: PUSH
1647: CALL_OW 44
1651: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1652: LD_VAR 0 3
1656: PPUSH
1657: LD_VAR 0 4
1661: PPUSH
1662: LD_INT 0
1664: PPUSH
1665: CALL_OW 49
// end ;
1669: GO 1615
1671: POP
1672: POP
// for i = 1 to 6 do
1673: LD_ADDR_VAR 0 2
1677: PUSH
1678: DOUBLE
1679: LD_INT 1
1681: DEC
1682: ST_TO_ADDR
1683: LD_INT 6
1685: PUSH
1686: FOR_TO
1687: IFFALSE 1758
// begin hc_class = class_tiger ;
1689: LD_ADDR_OWVAR 28
1693: PUSH
1694: LD_INT 14
1696: ST_TO_ADDR
// hc_gallery =  ;
1697: LD_ADDR_OWVAR 33
1701: PUSH
1702: LD_STRING 
1704: ST_TO_ADDR
// hc_agressivity = Rand ( 0 , 10 ) ;
1705: LD_ADDR_OWVAR 35
1709: PUSH
1710: LD_INT 0
1712: PPUSH
1713: LD_INT 10
1715: PPUSH
1716: CALL_OW 12
1720: ST_TO_ADDR
// hc_face_number = 3 ;
1721: LD_ADDR_OWVAR 34
1725: PUSH
1726: LD_INT 3
1728: ST_TO_ADDR
// animal := CreateHuman ;
1729: LD_ADDR_VAR 0 3
1733: PUSH
1734: CALL_OW 44
1738: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1739: LD_VAR 0 3
1743: PPUSH
1744: LD_VAR 0 4
1748: PPUSH
1749: LD_INT 0
1751: PPUSH
1752: CALL_OW 49
// end ;
1756: GO 1686
1758: POP
1759: POP
// for i = 1 to 2 do
1760: LD_ADDR_VAR 0 2
1764: PUSH
1765: DOUBLE
1766: LD_INT 1
1768: DEC
1769: ST_TO_ADDR
1770: LD_INT 2
1772: PUSH
1773: FOR_TO
1774: IFFALSE 1837
// begin hc_class = 21 ;
1776: LD_ADDR_OWVAR 28
1780: PUSH
1781: LD_INT 21
1783: ST_TO_ADDR
// hc_gallery =  ;
1784: LD_ADDR_OWVAR 33
1788: PUSH
1789: LD_STRING 
1791: ST_TO_ADDR
// hc_agressivity = 0 ;
1792: LD_ADDR_OWVAR 35
1796: PUSH
1797: LD_INT 0
1799: ST_TO_ADDR
// hc_face_number = 5 ;
1800: LD_ADDR_OWVAR 34
1804: PUSH
1805: LD_INT 5
1807: ST_TO_ADDR
// animal := CreateHuman ;
1808: LD_ADDR_VAR 0 3
1812: PUSH
1813: CALL_OW 44
1817: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1818: LD_VAR 0 3
1822: PPUSH
1823: LD_VAR 0 4
1827: PPUSH
1828: LD_INT 0
1830: PPUSH
1831: CALL_OW 49
// end ;
1835: GO 1773
1837: POP
1838: POP
// for i = 1 to 6 do
1839: LD_ADDR_VAR 0 2
1843: PUSH
1844: DOUBLE
1845: LD_INT 1
1847: DEC
1848: ST_TO_ADDR
1849: LD_INT 6
1851: PUSH
1852: FOR_TO
1853: IFFALSE 1908
// begin hc_class = 13 ;
1855: LD_ADDR_OWVAR 28
1859: PUSH
1860: LD_INT 13
1862: ST_TO_ADDR
// hc_gallery =  ;
1863: LD_ADDR_OWVAR 33
1867: PUSH
1868: LD_STRING 
1870: ST_TO_ADDR
// hc_face_number = 4 ;
1871: LD_ADDR_OWVAR 34
1875: PUSH
1876: LD_INT 4
1878: ST_TO_ADDR
// animal := CreateHuman ;
1879: LD_ADDR_VAR 0 3
1883: PUSH
1884: CALL_OW 44
1888: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1889: LD_VAR 0 3
1893: PPUSH
1894: LD_VAR 0 4
1898: PPUSH
1899: LD_INT 0
1901: PPUSH
1902: CALL_OW 49
// end ;
1906: GO 1852
1908: POP
1909: POP
// for i = 1 to 2 do
1910: LD_ADDR_VAR 0 2
1914: PUSH
1915: DOUBLE
1916: LD_INT 1
1918: DEC
1919: ST_TO_ADDR
1920: LD_INT 2
1922: PUSH
1923: FOR_TO
1924: IFFALSE 1983
// begin hc_class = 20 ;
1926: LD_ADDR_OWVAR 28
1930: PUSH
1931: LD_INT 20
1933: ST_TO_ADDR
// hc_gallery =  ;
1934: LD_ADDR_OWVAR 33
1938: PUSH
1939: LD_STRING 
1941: ST_TO_ADDR
// hc_face_number = 2 ;
1942: LD_ADDR_OWVAR 34
1946: PUSH
1947: LD_INT 2
1949: ST_TO_ADDR
// animal := CreateHuman ;
1950: LD_ADDR_VAR 0 3
1954: PUSH
1955: CALL_OW 44
1959: ST_TO_ADDR
// PlaceUnitXYR ( animal , 101 , 37 , 3 , false ) ;
1960: LD_VAR 0 3
1964: PPUSH
1965: LD_INT 101
1967: PPUSH
1968: LD_INT 37
1970: PPUSH
1971: LD_INT 3
1973: PPUSH
1974: LD_INT 0
1976: PPUSH
1977: CALL_OW 50
// end ;
1981: GO 1923
1983: POP
1984: POP
// for i = 1 to 1 do
1985: LD_ADDR_VAR 0 2
1989: PUSH
1990: DOUBLE
1991: LD_INT 1
1993: DEC
1994: ST_TO_ADDR
1995: LD_INT 1
1997: PUSH
1998: FOR_TO
1999: IFFALSE 2046
// begin vc_chassis := 31 ;
2001: LD_ADDR_OWVAR 37
2005: PUSH
2006: LD_INT 31
2008: ST_TO_ADDR
// vc_control := control_rider ;
2009: LD_ADDR_OWVAR 38
2013: PUSH
2014: LD_INT 4
2016: ST_TO_ADDR
// animal := CreateVehicle ;
2017: LD_ADDR_VAR 0 3
2021: PUSH
2022: CALL_OW 45
2026: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
2027: LD_VAR 0 3
2031: PPUSH
2032: LD_VAR 0 4
2036: PPUSH
2037: LD_INT 0
2039: PPUSH
2040: CALL_OW 49
// end ;
2044: GO 1998
2046: POP
2047: POP
// end ;
2048: LD_VAR 0 1
2052: RET
// export function NearbyTowerHasEnergy ( unit ) ; var i , tmp , energy ; begin
2053: LD_INT 0
2055: PPUSH
2056: PPUSH
2057: PPUSH
2058: PPUSH
// result := [ ] ;
2059: LD_ADDR_VAR 0 2
2063: PUSH
2064: EMPTY
2065: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_dist , unit , 15 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
2066: LD_ADDR_VAR 0 4
2070: PUSH
2071: LD_INT 81
2073: PUSH
2074: LD_VAR 0 1
2078: PPUSH
2079: CALL_OW 255
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: PUSH
2088: LD_INT 91
2090: PUSH
2091: LD_VAR 0 1
2095: PUSH
2096: LD_INT 15
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: LIST
2103: PUSH
2104: LD_INT 2
2106: PUSH
2107: LD_INT 30
2109: PUSH
2110: LD_INT 32
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: PUSH
2117: LD_INT 30
2119: PUSH
2120: LD_INT 33
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: PUSH
2127: EMPTY
2128: LIST
2129: LIST
2130: LIST
2131: PUSH
2132: EMPTY
2133: LIST
2134: LIST
2135: LIST
2136: PPUSH
2137: CALL_OW 69
2141: ST_TO_ADDR
// if not tmp then
2142: LD_VAR 0 4
2146: NOT
2147: IFFALSE 2151
// exit ;
2149: GO 2220
// for i in tmp do
2151: LD_ADDR_VAR 0 3
2155: PUSH
2156: LD_VAR 0 4
2160: PUSH
2161: FOR_IN
2162: IFFALSE 2218
// begin energy := GetEnergy ( GetBase ( i ) ) ;
2164: LD_ADDR_VAR 0 5
2168: PUSH
2169: LD_VAR 0 3
2173: PPUSH
2174: CALL_OW 274
2178: PPUSH
2179: CALL_OW 278
2183: ST_TO_ADDR
// if energy [ 4 ] > energy [ 1 ] then
2184: LD_VAR 0 5
2188: PUSH
2189: LD_INT 4
2191: ARRAY
2192: PUSH
2193: LD_VAR 0 5
2197: PUSH
2198: LD_INT 1
2200: ARRAY
2201: GREATER
2202: IFFALSE 2216
// begin result := i ;
2204: LD_ADDR_VAR 0 2
2208: PUSH
2209: LD_VAR 0 3
2213: ST_TO_ADDR
// break ;
2214: GO 2218
// end ; end ;
2216: GO 2161
2218: POP
2219: POP
// end ;
2220: LD_VAR 0 2
2224: RET
// export function GetTurretWeaponBase ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
2225: LD_INT 0
2227: PPUSH
2228: PPUSH
2229: PPUSH
2230: PPUSH
2231: PPUSH
2232: PPUSH
2233: PPUSH
2234: PPUSH
2235: PPUSH
2236: PPUSH
2237: PPUSH
2238: PPUSH
2239: PPUSH
2240: PPUSH
2241: PPUSH
2242: PPUSH
// result := false ;
2243: LD_ADDR_VAR 0 2
2247: PUSH
2248: LD_INT 0
2250: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
2251: LD_VAR 0 1
2255: NOT
2256: PUSH
2257: LD_VAR 0 1
2261: PPUSH
2262: CALL_OW 266
2266: PUSH
2267: LD_INT 32
2269: PUSH
2270: LD_INT 33
2272: PUSH
2273: EMPTY
2274: LIST
2275: LIST
2276: IN
2277: NOT
2278: OR
2279: IFFALSE 2283
// exit ;
2281: GO 3443
// nat := GetNation ( tower ) ;
2283: LD_ADDR_VAR 0 11
2287: PUSH
2288: LD_VAR 0 1
2292: PPUSH
2293: CALL_OW 248
2297: ST_TO_ADDR
// side := GetSide ( tower ) ;
2298: LD_ADDR_VAR 0 15
2302: PUSH
2303: LD_VAR 0 1
2307: PPUSH
2308: CALL_OW 255
2312: ST_TO_ADDR
// x := GetX ( tower ) ;
2313: LD_ADDR_VAR 0 9
2317: PUSH
2318: LD_VAR 0 1
2322: PPUSH
2323: CALL_OW 250
2327: ST_TO_ADDR
// y := GetY ( tower ) ;
2328: LD_ADDR_VAR 0 10
2332: PUSH
2333: LD_VAR 0 1
2337: PPUSH
2338: CALL_OW 251
2342: ST_TO_ADDR
// if not x or not y then
2343: LD_VAR 0 9
2347: NOT
2348: PUSH
2349: LD_VAR 0 10
2353: NOT
2354: OR
2355: IFFALSE 2359
// exit ;
2357: GO 3443
// weapon := 0 ;
2359: LD_ADDR_VAR 0 17
2363: PUSH
2364: LD_INT 0
2366: ST_TO_ADDR
// fac_list := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
2367: LD_ADDR_VAR 0 16
2371: PUSH
2372: LD_INT 42
2374: PUSH
2375: LD_INT 43
2377: PUSH
2378: LD_INT 44
2380: PUSH
2381: LD_INT 46
2383: PUSH
2384: EMPTY
2385: LIST
2386: LIST
2387: LIST
2388: LIST
2389: ST_TO_ADDR
// if not fac_list then
2390: LD_VAR 0 16
2394: NOT
2395: IFFALSE 2399
// exit ;
2397: GO 3443
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
2399: LD_ADDR_VAR 0 4
2403: PUSH
2404: LD_INT 4
2406: PUSH
2407: LD_INT 5
2409: PUSH
2410: LD_INT 9
2412: PUSH
2413: LD_INT 10
2415: PUSH
2416: LD_INT 6
2418: PUSH
2419: LD_INT 7
2421: PUSH
2422: LD_INT 11
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: LIST
2429: LIST
2430: LIST
2431: LIST
2432: LIST
2433: PUSH
2434: LD_INT 27
2436: PUSH
2437: LD_INT 28
2439: PUSH
2440: LD_INT 26
2442: PUSH
2443: LD_INT 30
2445: PUSH
2446: EMPTY
2447: LIST
2448: LIST
2449: LIST
2450: LIST
2451: PUSH
2452: LD_INT 43
2454: PUSH
2455: LD_INT 44
2457: PUSH
2458: LD_INT 46
2460: PUSH
2461: LD_INT 45
2463: PUSH
2464: LD_INT 47
2466: PUSH
2467: LD_INT 49
2469: PUSH
2470: EMPTY
2471: LIST
2472: LIST
2473: LIST
2474: LIST
2475: LIST
2476: LIST
2477: PUSH
2478: EMPTY
2479: LIST
2480: LIST
2481: LIST
2482: PUSH
2483: LD_VAR 0 11
2487: ARRAY
2488: ST_TO_ADDR
// for i in list do
2489: LD_ADDR_VAR 0 7
2493: PUSH
2494: LD_VAR 0 4
2498: PUSH
2499: FOR_IN
2500: IFFALSE 2533
// if not i in fac_list then
2502: LD_VAR 0 7
2506: PUSH
2507: LD_VAR 0 16
2511: IN
2512: NOT
2513: IFFALSE 2531
// list := list diff i ;
2515: LD_ADDR_VAR 0 4
2519: PUSH
2520: LD_VAR 0 4
2524: PUSH
2525: LD_VAR 0 7
2529: DIFF
2530: ST_TO_ADDR
2531: GO 2499
2533: POP
2534: POP
// if not list then
2535: LD_VAR 0 4
2539: NOT
2540: IFFALSE 2544
// exit ;
2542: GO 3443
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
2544: LD_VAR 0 11
2548: PUSH
2549: LD_INT 3
2551: EQUAL
2552: PUSH
2553: LD_INT 49
2555: PUSH
2556: LD_VAR 0 4
2560: IN
2561: AND
2562: PUSH
2563: LD_INT 31
2565: PPUSH
2566: LD_VAR 0 15
2570: PPUSH
2571: CALL_OW 321
2575: PUSH
2576: LD_INT 2
2578: EQUAL
2579: AND
2580: IFFALSE 2640
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
2582: LD_INT 22
2584: PUSH
2585: LD_VAR 0 15
2589: PUSH
2590: EMPTY
2591: LIST
2592: LIST
2593: PUSH
2594: LD_INT 35
2596: PUSH
2597: LD_INT 49
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: PUSH
2604: LD_INT 91
2606: PUSH
2607: LD_VAR 0 1
2611: PUSH
2612: LD_INT 10
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: LIST
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: LIST
2624: PPUSH
2625: CALL_OW 69
2629: NOT
2630: IFFALSE 2640
// weapon := ru_time_lapser ;
2632: LD_ADDR_VAR 0 17
2636: PUSH
2637: LD_INT 49
2639: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
2640: LD_VAR 0 11
2644: PUSH
2645: LD_INT 1
2647: PUSH
2648: LD_INT 2
2650: PUSH
2651: EMPTY
2652: LIST
2653: LIST
2654: IN
2655: PUSH
2656: LD_INT 11
2658: PUSH
2659: LD_VAR 0 4
2663: IN
2664: PUSH
2665: LD_INT 30
2667: PUSH
2668: LD_VAR 0 4
2672: IN
2673: OR
2674: AND
2675: PUSH
2676: LD_INT 6
2678: PPUSH
2679: LD_VAR 0 15
2683: PPUSH
2684: CALL_OW 321
2688: PUSH
2689: LD_INT 2
2691: EQUAL
2692: AND
2693: IFFALSE 2858
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
2695: LD_INT 22
2697: PUSH
2698: LD_VAR 0 15
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: PUSH
2707: LD_INT 2
2709: PUSH
2710: LD_INT 35
2712: PUSH
2713: LD_INT 11
2715: PUSH
2716: EMPTY
2717: LIST
2718: LIST
2719: PUSH
2720: LD_INT 35
2722: PUSH
2723: LD_INT 30
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: LIST
2734: PUSH
2735: LD_INT 91
2737: PUSH
2738: LD_VAR 0 1
2742: PUSH
2743: LD_INT 18
2745: PUSH
2746: EMPTY
2747: LIST
2748: LIST
2749: LIST
2750: PUSH
2751: EMPTY
2752: LIST
2753: LIST
2754: LIST
2755: PPUSH
2756: CALL_OW 69
2760: NOT
2761: PUSH
2762: LD_INT 22
2764: PUSH
2765: LD_VAR 0 15
2769: PUSH
2770: EMPTY
2771: LIST
2772: LIST
2773: PUSH
2774: LD_INT 2
2776: PUSH
2777: LD_INT 30
2779: PUSH
2780: LD_INT 32
2782: PUSH
2783: EMPTY
2784: LIST
2785: LIST
2786: PUSH
2787: LD_INT 30
2789: PUSH
2790: LD_INT 33
2792: PUSH
2793: EMPTY
2794: LIST
2795: LIST
2796: PUSH
2797: EMPTY
2798: LIST
2799: LIST
2800: LIST
2801: PUSH
2802: LD_INT 91
2804: PUSH
2805: LD_VAR 0 1
2809: PUSH
2810: LD_INT 12
2812: PUSH
2813: EMPTY
2814: LIST
2815: LIST
2816: LIST
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: LIST
2822: PUSH
2823: EMPTY
2824: LIST
2825: PPUSH
2826: CALL_OW 69
2830: PUSH
2831: LD_INT 2
2833: GREATER
2834: AND
2835: IFFALSE 2858
// weapon := [ us_radar , ar_radar ] [ nat ] ;
2837: LD_ADDR_VAR 0 17
2841: PUSH
2842: LD_INT 11
2844: PUSH
2845: LD_INT 30
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: PUSH
2852: LD_VAR 0 11
2856: ARRAY
2857: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
2858: LD_VAR 0 17
2862: NOT
2863: PUSH
2864: LD_INT 40
2866: PPUSH
2867: LD_VAR 0 15
2871: PPUSH
2872: CALL_OW 321
2876: PUSH
2877: LD_INT 2
2879: EQUAL
2880: AND
2881: PUSH
2882: LD_INT 7
2884: PUSH
2885: LD_VAR 0 4
2889: IN
2890: PUSH
2891: LD_INT 28
2893: PUSH
2894: LD_VAR 0 4
2898: IN
2899: OR
2900: PUSH
2901: LD_INT 45
2903: PUSH
2904: LD_VAR 0 4
2908: IN
2909: OR
2910: AND
2911: IFFALSE 3165
// begin hex := GetHexInfo ( x , y ) ;
2913: LD_ADDR_VAR 0 3
2917: PUSH
2918: LD_VAR 0 9
2922: PPUSH
2923: LD_VAR 0 10
2927: PPUSH
2928: CALL_OW 546
2932: ST_TO_ADDR
// if hex [ 1 ] then
2933: LD_VAR 0 3
2937: PUSH
2938: LD_INT 1
2940: ARRAY
2941: IFFALSE 2945
// exit ;
2943: GO 3443
// height := hex [ 2 ] ;
2945: LD_ADDR_VAR 0 14
2949: PUSH
2950: LD_VAR 0 3
2954: PUSH
2955: LD_INT 2
2957: ARRAY
2958: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
2959: LD_ADDR_VAR 0 13
2963: PUSH
2964: LD_INT 0
2966: PUSH
2967: LD_INT 2
2969: PUSH
2970: LD_INT 3
2972: PUSH
2973: LD_INT 5
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: LIST
2980: LIST
2981: ST_TO_ADDR
// for i in tmp do
2982: LD_ADDR_VAR 0 7
2986: PUSH
2987: LD_VAR 0 13
2991: PUSH
2992: FOR_IN
2993: IFFALSE 3163
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
2995: LD_ADDR_VAR 0 8
2999: PUSH
3000: LD_VAR 0 9
3004: PPUSH
3005: LD_VAR 0 7
3009: PPUSH
3010: LD_INT 5
3012: PPUSH
3013: CALL_OW 272
3017: PUSH
3018: LD_VAR 0 10
3022: PPUSH
3023: LD_VAR 0 7
3027: PPUSH
3028: LD_INT 5
3030: PPUSH
3031: CALL_OW 273
3035: PUSH
3036: EMPTY
3037: LIST
3038: LIST
3039: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
3040: LD_VAR 0 8
3044: PUSH
3045: LD_INT 1
3047: ARRAY
3048: PPUSH
3049: LD_VAR 0 8
3053: PUSH
3054: LD_INT 2
3056: ARRAY
3057: PPUSH
3058: CALL_OW 488
3062: IFFALSE 3161
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
3064: LD_ADDR_VAR 0 3
3068: PUSH
3069: LD_VAR 0 8
3073: PUSH
3074: LD_INT 1
3076: ARRAY
3077: PPUSH
3078: LD_VAR 0 8
3082: PUSH
3083: LD_INT 2
3085: ARRAY
3086: PPUSH
3087: CALL_OW 546
3091: ST_TO_ADDR
// if hex [ 1 ] then
3092: LD_VAR 0 3
3096: PUSH
3097: LD_INT 1
3099: ARRAY
3100: IFFALSE 3104
// continue ;
3102: GO 2992
// h := hex [ 2 ] ;
3104: LD_ADDR_VAR 0 12
3108: PUSH
3109: LD_VAR 0 3
3113: PUSH
3114: LD_INT 2
3116: ARRAY
3117: ST_TO_ADDR
// if h + 7 < height then
3118: LD_VAR 0 12
3122: PUSH
3123: LD_INT 7
3125: PLUS
3126: PUSH
3127: LD_VAR 0 14
3131: LESS
3132: IFFALSE 3161
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
3134: LD_ADDR_VAR 0 17
3138: PUSH
3139: LD_INT 7
3141: PUSH
3142: LD_INT 28
3144: PUSH
3145: LD_INT 45
3147: PUSH
3148: EMPTY
3149: LIST
3150: LIST
3151: LIST
3152: PUSH
3153: LD_VAR 0 11
3157: ARRAY
3158: ST_TO_ADDR
// break ;
3159: GO 3163
// end ; end ; end ;
3161: GO 2992
3163: POP
3164: POP
// end ; if not weapon then
3165: LD_VAR 0 17
3169: NOT
3170: IFFALSE 3325
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
3172: LD_ADDR_VAR 0 4
3176: PUSH
3177: LD_VAR 0 4
3181: PUSH
3182: LD_INT 11
3184: PUSH
3185: LD_INT 30
3187: PUSH
3188: LD_INT 49
3190: PUSH
3191: EMPTY
3192: LIST
3193: LIST
3194: LIST
3195: DIFF
3196: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , tower , 6 ] , [ f_not , [ f_bweapon , 0 ] ] ] ) ;
3197: LD_ADDR_VAR 0 13
3201: PUSH
3202: LD_INT 22
3204: PUSH
3205: LD_VAR 0 15
3209: PUSH
3210: EMPTY
3211: LIST
3212: LIST
3213: PUSH
3214: LD_INT 91
3216: PUSH
3217: LD_VAR 0 1
3221: PUSH
3222: LD_INT 6
3224: PUSH
3225: EMPTY
3226: LIST
3227: LIST
3228: LIST
3229: PUSH
3230: LD_INT 3
3232: PUSH
3233: LD_INT 35
3235: PUSH
3236: LD_INT 0
3238: PUSH
3239: EMPTY
3240: LIST
3241: LIST
3242: PUSH
3243: EMPTY
3244: LIST
3245: LIST
3246: PUSH
3247: EMPTY
3248: LIST
3249: LIST
3250: LIST
3251: PPUSH
3252: CALL_OW 69
3256: ST_TO_ADDR
// for i in tmp do
3257: LD_ADDR_VAR 0 7
3261: PUSH
3262: LD_VAR 0 13
3266: PUSH
3267: FOR_IN
3268: IFFALSE 3293
// list := list diff GetBWeapon ( i ) ;
3270: LD_ADDR_VAR 0 4
3274: PUSH
3275: LD_VAR 0 4
3279: PUSH
3280: LD_VAR 0 7
3284: PPUSH
3285: CALL_OW 269
3289: DIFF
3290: ST_TO_ADDR
3291: GO 3267
3293: POP
3294: POP
// if list then
3295: LD_VAR 0 4
3299: IFFALSE 3325
// weapon := list [ rand ( 1 , list ) ] ;
3301: LD_ADDR_VAR 0 17
3305: PUSH
3306: LD_VAR 0 4
3310: PUSH
3311: LD_INT 1
3313: PPUSH
3314: LD_VAR 0 4
3318: PPUSH
3319: CALL_OW 12
3323: ARRAY
3324: ST_TO_ADDR
// end ; if weapon then
3325: LD_VAR 0 17
3329: IFFALSE 3443
// begin tmp := CostOfWeapon ( weapon ) ;
3331: LD_ADDR_VAR 0 13
3335: PUSH
3336: LD_VAR 0 17
3340: PPUSH
3341: CALL_OW 451
3345: ST_TO_ADDR
// j := GetBase ( tower ) ;
3346: LD_ADDR_VAR 0 8
3350: PUSH
3351: LD_VAR 0 1
3355: PPUSH
3356: CALL_OW 274
3360: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
3361: LD_VAR 0 8
3365: PPUSH
3366: LD_INT 1
3368: PPUSH
3369: CALL_OW 275
3373: PUSH
3374: LD_VAR 0 13
3378: PUSH
3379: LD_INT 1
3381: ARRAY
3382: GREATEREQUAL
3383: PUSH
3384: LD_VAR 0 8
3388: PPUSH
3389: LD_INT 2
3391: PPUSH
3392: CALL_OW 275
3396: PUSH
3397: LD_VAR 0 13
3401: PUSH
3402: LD_INT 2
3404: ARRAY
3405: GREATEREQUAL
3406: AND
3407: PUSH
3408: LD_VAR 0 8
3412: PPUSH
3413: LD_INT 3
3415: PPUSH
3416: CALL_OW 275
3420: PUSH
3421: LD_VAR 0 13
3425: PUSH
3426: LD_INT 3
3428: ARRAY
3429: GREATEREQUAL
3430: AND
3431: IFFALSE 3443
// result := weapon ;
3433: LD_ADDR_VAR 0 2
3437: PUSH
3438: LD_VAR 0 17
3442: ST_TO_ADDR
// end ; end ; end_of_file
3443: LD_VAR 0 2
3447: RET
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Khatam , Kikuchi , Harisson ; export function PrepareAmericans ; var i , team , others , veh , m ; begin
3448: LD_INT 0
3450: PPUSH
3451: PPUSH
3452: PPUSH
3453: PPUSH
3454: PPUSH
3455: PPUSH
// uc_side := 1 ;
3456: LD_ADDR_OWVAR 20
3460: PUSH
3461: LD_INT 1
3463: ST_TO_ADDR
// uc_nation := 1 ;
3464: LD_ADDR_OWVAR 21
3468: PUSH
3469: LD_INT 1
3471: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prev_prefix ) ;
3472: LD_ADDR_EXP 9
3476: PUSH
3477: LD_STRING JMM
3479: PPUSH
3480: LD_EXP 1
3484: NOT
3485: PPUSH
3486: LD_EXP 2
3490: PPUSH
3491: CALL 32784 0 3
3495: ST_TO_ADDR
// team := [ JMM ] ;
3496: LD_ADDR_VAR 0 3
3500: PUSH
3501: LD_EXP 9
3505: PUSH
3506: EMPTY
3507: LIST
3508: ST_TO_ADDR
// if LoadVariable ( BrownIn07 , debug ) then
3509: LD_STRING BrownIn07
3511: PPUSH
3512: LD_EXP 1
3516: PPUSH
3517: CALL_OW 30
3521: IFFALSE 3547
// Brown := PrepareUnit ( Brown , ( not debug ) , mission_prev_prefix ) ;
3523: LD_ADDR_EXP 10
3527: PUSH
3528: LD_STRING Brown
3530: PPUSH
3531: LD_EXP 1
3535: NOT
3536: PPUSH
3537: LD_EXP 2
3541: PPUSH
3542: CALL 32784 0 3
3546: ST_TO_ADDR
// if Brown then
3547: LD_EXP 10
3551: IFFALSE 3569
// team := team ^ Brown ;
3553: LD_ADDR_VAR 0 3
3557: PUSH
3558: LD_VAR 0 3
3562: PUSH
3563: LD_EXP 10
3567: ADD
3568: ST_TO_ADDR
// if LoadVariable ( DonaldsonIn07 , debug ) then
3569: LD_STRING DonaldsonIn07
3571: PPUSH
3572: LD_EXP 1
3576: PPUSH
3577: CALL_OW 30
3581: IFFALSE 3607
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prev_prefix ) ;
3583: LD_ADDR_EXP 11
3587: PUSH
3588: LD_STRING Donaldson
3590: PPUSH
3591: LD_EXP 1
3595: NOT
3596: PPUSH
3597: LD_EXP 2
3601: PPUSH
3602: CALL 32784 0 3
3606: ST_TO_ADDR
// if Donaldson then
3607: LD_EXP 11
3611: IFFALSE 3629
// team := team ^ Donaldson ;
3613: LD_ADDR_VAR 0 3
3617: PUSH
3618: LD_VAR 0 3
3622: PUSH
3623: LD_EXP 11
3627: ADD
3628: ST_TO_ADDR
// if LoadVariable ( BobbyIn07 , debug ) then
3629: LD_STRING BobbyIn07
3631: PPUSH
3632: LD_EXP 1
3636: PPUSH
3637: CALL_OW 30
3641: IFFALSE 3667
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prev_prefix ) ;
3643: LD_ADDR_EXP 12
3647: PUSH
3648: LD_STRING Bobby
3650: PPUSH
3651: LD_EXP 1
3655: NOT
3656: PPUSH
3657: LD_EXP 2
3661: PPUSH
3662: CALL 32784 0 3
3666: ST_TO_ADDR
// if Bobby then
3667: LD_EXP 12
3671: IFFALSE 3689
// team := team ^ Bobby ;
3673: LD_ADDR_VAR 0 3
3677: PUSH
3678: LD_VAR 0 3
3682: PUSH
3683: LD_EXP 12
3687: ADD
3688: ST_TO_ADDR
// if LoadVariable ( CyrusIn07 , debug ) then
3689: LD_STRING CyrusIn07
3691: PPUSH
3692: LD_EXP 1
3696: PPUSH
3697: CALL_OW 30
3701: IFFALSE 3727
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prev_prefix ) ;
3703: LD_ADDR_EXP 13
3707: PUSH
3708: LD_STRING Cyrus
3710: PPUSH
3711: LD_EXP 1
3715: NOT
3716: PPUSH
3717: LD_EXP 2
3721: PPUSH
3722: CALL 32784 0 3
3726: ST_TO_ADDR
// if Cyrus then
3727: LD_EXP 13
3731: IFFALSE 3749
// team := team ^ Cyrus ;
3733: LD_ADDR_VAR 0 3
3737: PUSH
3738: LD_VAR 0 3
3742: PUSH
3743: LD_EXP 13
3747: ADD
3748: ST_TO_ADDR
// if LoadVariable ( LisaIn07 , debug ) then
3749: LD_STRING LisaIn07
3751: PPUSH
3752: LD_EXP 1
3756: PPUSH
3757: CALL_OW 30
3761: IFFALSE 3787
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prev_prefix ) ;
3763: LD_ADDR_EXP 14
3767: PUSH
3768: LD_STRING Lisa
3770: PPUSH
3771: LD_EXP 1
3775: NOT
3776: PPUSH
3777: LD_EXP 2
3781: PPUSH
3782: CALL 32784 0 3
3786: ST_TO_ADDR
// if Lisa then
3787: LD_EXP 14
3791: IFFALSE 3809
// team := team ^ Lisa ;
3793: LD_ADDR_VAR 0 3
3797: PUSH
3798: LD_VAR 0 3
3802: PUSH
3803: LD_EXP 14
3807: ADD
3808: ST_TO_ADDR
// if LoadVariable ( GladstoneIn07 , debug ) then
3809: LD_STRING GladstoneIn07
3811: PPUSH
3812: LD_EXP 1
3816: PPUSH
3817: CALL_OW 30
3821: IFFALSE 3847
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , mission_prev_prefix ) ;
3823: LD_ADDR_EXP 16
3827: PUSH
3828: LD_STRING Gladstone
3830: PPUSH
3831: LD_EXP 1
3835: NOT
3836: PPUSH
3837: LD_EXP 2
3841: PPUSH
3842: CALL 32784 0 3
3846: ST_TO_ADDR
// if Gladstone then
3847: LD_EXP 16
3851: IFFALSE 3869
// team := team ^ Gladstone ;
3853: LD_ADDR_VAR 0 3
3857: PUSH
3858: LD_VAR 0 3
3862: PUSH
3863: LD_EXP 16
3867: ADD
3868: ST_TO_ADDR
// if LoadVariable ( KhatamIn07 , debug ) then
3869: LD_STRING KhatamIn07
3871: PPUSH
3872: LD_EXP 1
3876: PPUSH
3877: CALL_OW 30
3881: IFFALSE 3907
// Khatam := PrepareUnit ( Khatam , ( not debug ) , mission_prev_prefix ) ;
3883: LD_ADDR_EXP 17
3887: PUSH
3888: LD_STRING Khatam
3890: PPUSH
3891: LD_EXP 1
3895: NOT
3896: PPUSH
3897: LD_EXP 2
3901: PPUSH
3902: CALL 32784 0 3
3906: ST_TO_ADDR
// if Khatam then
3907: LD_EXP 17
3911: IFFALSE 3929
// team := team ^ Khatam ;
3913: LD_ADDR_VAR 0 3
3917: PUSH
3918: LD_VAR 0 3
3922: PUSH
3923: LD_EXP 17
3927: ADD
3928: ST_TO_ADDR
// others := CreateCharacterSet ( 07_others ) ;
3929: LD_ADDR_VAR 0 4
3933: PUSH
3934: LD_STRING 07_others
3936: PPUSH
3937: CALL_OW 31
3941: ST_TO_ADDR
// if others then
3942: LD_VAR 0 4
3946: IFFALSE 3964
// team := team ^ others ;
3948: LD_ADDR_VAR 0 3
3952: PUSH
3953: LD_VAR 0 3
3957: PUSH
3958: LD_VAR 0 4
3962: ADD
3963: ST_TO_ADDR
// if debug then
3964: LD_EXP 1
3968: IFFALSE 4042
// begin InitHc ;
3970: CALL_OW 19
// for i = 1 to 4 do
3974: LD_ADDR_VAR 0 2
3978: PUSH
3979: DOUBLE
3980: LD_INT 1
3982: DEC
3983: ST_TO_ADDR
3984: LD_INT 4
3986: PUSH
3987: FOR_TO
3988: IFFALSE 4040
// begin PrepareHuman ( false , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , 4 ) ;
3990: LD_INT 0
3992: PPUSH
3993: LD_INT 1
3995: PUSH
3996: LD_INT 3
3998: PUSH
3999: EMPTY
4000: LIST
4001: LIST
4002: PUSH
4003: LD_INT 1
4005: PPUSH
4006: LD_INT 2
4008: PPUSH
4009: CALL_OW 12
4013: ARRAY
4014: PPUSH
4015: LD_INT 4
4017: PPUSH
4018: CALL_OW 380
// team := team ^ CreateHuman ;
4022: LD_ADDR_VAR 0 3
4026: PUSH
4027: LD_VAR 0 3
4031: PUSH
4032: CALL_OW 44
4036: ADD
4037: ST_TO_ADDR
// end ;
4038: GO 3987
4040: POP
4041: POP
// end ; m := 0 ;
4042: LD_ADDR_VAR 0 6
4046: PUSH
4047: LD_INT 0
4049: ST_TO_ADDR
// for i in team do
4050: LD_ADDR_VAR 0 2
4054: PUSH
4055: LD_VAR 0 3
4059: PUSH
4060: FOR_IN
4061: IFFALSE 4268
// if GetClass ( i ) = 3 then
4063: LD_VAR 0 2
4067: PPUSH
4068: CALL_OW 257
4072: PUSH
4073: LD_INT 3
4075: EQUAL
4076: IFFALSE 4224
// begin m := m + 1 ;
4078: LD_ADDR_VAR 0 6
4082: PUSH
4083: LD_VAR 0 6
4087: PUSH
4088: LD_INT 1
4090: PLUS
4091: ST_TO_ADDR
// veh := PrepareTank ( 1 , 1 , [ us_medium_wheeled , us_medium_tracked , us_medium_wheeled , us_light_wheeled ] [ m mod 4 + 1 ] , engine_solar , control_manual , [ us_gatling_gun , us_double_gun , us_light_gun , us_radar ] [ m mod 4 + 1 ] , 60 ) ;
4092: LD_ADDR_VAR 0 5
4096: PUSH
4097: LD_INT 1
4099: PPUSH
4100: LD_INT 1
4102: PPUSH
4103: LD_INT 2
4105: PUSH
4106: LD_INT 3
4108: PUSH
4109: LD_INT 2
4111: PUSH
4112: LD_INT 1
4114: PUSH
4115: EMPTY
4116: LIST
4117: LIST
4118: LIST
4119: LIST
4120: PUSH
4121: LD_VAR 0 6
4125: PUSH
4126: LD_INT 4
4128: MOD
4129: PUSH
4130: LD_INT 1
4132: PLUS
4133: ARRAY
4134: PPUSH
4135: LD_INT 2
4137: PPUSH
4138: LD_INT 1
4140: PPUSH
4141: LD_INT 4
4143: PUSH
4144: LD_INT 5
4146: PUSH
4147: LD_INT 3
4149: PUSH
4150: LD_INT 11
4152: PUSH
4153: EMPTY
4154: LIST
4155: LIST
4156: LIST
4157: LIST
4158: PUSH
4159: LD_VAR 0 6
4163: PUSH
4164: LD_INT 4
4166: MOD
4167: PUSH
4168: LD_INT 1
4170: PLUS
4171: ARRAY
4172: PPUSH
4173: LD_INT 60
4175: PPUSH
4176: CALL 520 0 7
4180: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
4181: LD_VAR 0 5
4185: PPUSH
4186: LD_INT 2
4188: PPUSH
4189: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
4193: LD_VAR 0 5
4197: PPUSH
4198: LD_INT 1
4200: PPUSH
4201: LD_INT 0
4203: PPUSH
4204: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
4208: LD_VAR 0 2
4212: PPUSH
4213: LD_VAR 0 5
4217: PPUSH
4218: CALL_OW 52
// end else
4222: GO 4266
// begin if GetClass ( i ) = 2 then
4224: LD_VAR 0 2
4228: PPUSH
4229: CALL_OW 257
4233: PUSH
4234: LD_INT 2
4236: EQUAL
4237: IFFALSE 4251
// SetClass ( i , 1 ) ;
4239: LD_VAR 0 2
4243: PPUSH
4244: LD_INT 1
4246: PPUSH
4247: CALL_OW 336
// PlaceUnitArea ( i , startArea , false ) ;
4251: LD_VAR 0 2
4255: PPUSH
4256: LD_INT 1
4258: PPUSH
4259: LD_INT 0
4261: PPUSH
4262: CALL_OW 49
// end ;
4266: GO 4060
4268: POP
4269: POP
// uc_side := 4 ;
4270: LD_ADDR_OWVAR 20
4274: PUSH
4275: LD_INT 4
4277: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
4278: LD_ADDR_EXP 19
4282: PUSH
4283: LD_STRING Harisson
4285: PPUSH
4286: LD_INT 0
4288: PPUSH
4289: LD_STRING 
4291: PPUSH
4292: CALL 32784 0 3
4296: ST_TO_ADDR
// PrepareScout ;
4297: CALL 4306 0 0
// end ;
4301: LD_VAR 0 1
4305: RET
// function PrepareScout ; var ape ; begin
4306: LD_INT 0
4308: PPUSH
4309: PPUSH
// uc_side := 4 ;
4310: LD_ADDR_OWVAR 20
4314: PUSH
4315: LD_INT 4
4317: ST_TO_ADDR
// uc_nation := 1 ;
4318: LD_ADDR_OWVAR 21
4322: PUSH
4323: LD_INT 1
4325: ST_TO_ADDR
// if LoadVariable ( FrankIn06 , 0 ) then
4326: LD_STRING FrankIn06
4328: PPUSH
4329: LD_INT 0
4331: PPUSH
4332: CALL_OW 30
4336: IFFALSE 4353
// Frank := CreateCharacter ( 06c_Frank ) else
4338: LD_ADDR_EXP 15
4342: PUSH
4343: LD_STRING 06c_Frank
4345: PPUSH
4346: CALL_OW 34
4350: ST_TO_ADDR
4351: GO 4393
// if LoadVariable ( FrankInDelta , 0 ) then
4353: LD_STRING FrankInDelta
4355: PPUSH
4356: LD_INT 0
4358: PPUSH
4359: CALL_OW 30
4363: IFFALSE 4380
// Frank := CreateCharacter ( 05_Frank ) else
4365: LD_ADDR_EXP 15
4369: PUSH
4370: LD_STRING 05_Frank
4372: PPUSH
4373: CALL_OW 34
4377: ST_TO_ADDR
4378: GO 4393
// Frank := CreateCharacter ( 04_Frank ) ;
4380: LD_ADDR_EXP 15
4384: PUSH
4385: LD_STRING 04_Frank
4387: PPUSH
4388: CALL_OW 34
4392: ST_TO_ADDR
// if Frank then
4393: LD_EXP 15
4397: IFFALSE 4530
// begin PlaceUnitArea ( Frank , scoutArea , false ) ;
4399: LD_EXP 15
4403: PPUSH
4404: LD_INT 2
4406: PPUSH
4407: LD_INT 0
4409: PPUSH
4410: CALL_OW 49
// SetClass ( Frank , 1 ) ;
4414: LD_EXP 15
4418: PPUSH
4419: LD_INT 1
4421: PPUSH
4422: CALL_OW 336
// uc_side := 0 ;
4426: LD_ADDR_OWVAR 20
4430: PUSH
4431: LD_INT 0
4433: ST_TO_ADDR
// uc_nation := 0 ;
4434: LD_ADDR_OWVAR 21
4438: PUSH
4439: LD_INT 0
4441: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 0 ) ;
4442: LD_INT 0
4444: PPUSH
4445: LD_INT 12
4447: PPUSH
4448: LD_INT 0
4450: PPUSH
4451: CALL_OW 380
// ape := CreateHuman ;
4455: LD_ADDR_VAR 0 2
4459: PUSH
4460: CALL_OW 44
4464: ST_TO_ADDR
// PlaceUnitXYR ( ape , GetX ( Frank ) , GetY ( Frank ) , 5 , false ) ;
4465: LD_VAR 0 2
4469: PPUSH
4470: LD_EXP 15
4474: PPUSH
4475: CALL_OW 250
4479: PPUSH
4480: LD_EXP 15
4484: PPUSH
4485: CALL_OW 251
4489: PPUSH
4490: LD_INT 5
4492: PPUSH
4493: LD_INT 0
4495: PPUSH
4496: CALL_OW 50
// ComTurnUnit ( ape , Frank ) ;
4500: LD_VAR 0 2
4504: PPUSH
4505: LD_EXP 15
4509: PPUSH
4510: CALL_OW 119
// ComTurnUnit ( Frank , ape ) ;
4514: LD_EXP 15
4518: PPUSH
4519: LD_VAR 0 2
4523: PPUSH
4524: CALL_OW 119
// exit ;
4528: GO 4573
// end ; Kikuchi := PrepareUnit ( Yamoko , false ,  ) ;
4530: LD_ADDR_EXP 18
4534: PUSH
4535: LD_STRING Yamoko
4537: PPUSH
4538: LD_INT 0
4540: PPUSH
4541: LD_STRING 
4543: PPUSH
4544: CALL 32784 0 3
4548: ST_TO_ADDR
// PlaceUnitArea ( Kikuchi , scoutArea , false ) ;
4549: LD_EXP 18
4553: PPUSH
4554: LD_INT 2
4556: PPUSH
4557: LD_INT 0
4559: PPUSH
4560: CALL_OW 49
// ComHold ( Kikuchi ) ;
4564: LD_EXP 18
4568: PPUSH
4569: CALL_OW 140
// end ; end_of_file
4573: LD_VAR 0 1
4577: RET
// export ru_rebuild_list ; export function PrepareRussians ; var i , j , r , un , skill , filter , tmp , dep_list , lab_list , fac_list , breastworks_list , bunker_list , turret_list , weapons_list , personel_counter ; begin
4578: LD_INT 0
4580: PPUSH
4581: PPUSH
4582: PPUSH
4583: PPUSH
4584: PPUSH
4585: PPUSH
4586: PPUSH
4587: PPUSH
4588: PPUSH
4589: PPUSH
4590: PPUSH
4591: PPUSH
4592: PPUSH
4593: PPUSH
4594: PPUSH
4595: PPUSH
// ru_rebuild_list := [ ] ;
4596: LD_ADDR_EXP 20
4600: PUSH
4601: EMPTY
4602: ST_TO_ADDR
// uc_side := 3 ;
4603: LD_ADDR_OWVAR 20
4607: PUSH
4608: LD_INT 3
4610: ST_TO_ADDR
// uc_nation := 3 ;
4611: LD_ADDR_OWVAR 21
4615: PUSH
4616: LD_INT 3
4618: ST_TO_ADDR
// if Difficulty > 1 then
4619: LD_OWVAR 67
4623: PUSH
4624: LD_INT 1
4626: GREATER
4627: IFFALSE 4794
// begin bc_type := b_breastwork ;
4629: LD_ADDR_OWVAR 42
4633: PUSH
4634: LD_INT 31
4636: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 78 , 74 , 2 ) ;
4637: LD_INT 78
4639: PPUSH
4640: LD_INT 74
4642: PPUSH
4643: LD_INT 2
4645: PPUSH
4646: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 171 , 193 , 4 ) ;
4650: LD_INT 171
4652: PPUSH
4653: LD_INT 193
4655: PPUSH
4656: LD_INT 4
4658: PPUSH
4659: CALL_OW 47
// bc_type := b_turret ;
4663: LD_ADDR_OWVAR 42
4667: PUSH
4668: LD_INT 33
4670: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 129 , 96 , 3 ) ;
4671: LD_INT 129
4673: PPUSH
4674: LD_INT 96
4676: PPUSH
4677: LD_INT 3
4679: PPUSH
4680: CALL_OW 47
// if Difficulty > 2 then
4684: LD_OWVAR 67
4688: PUSH
4689: LD_INT 2
4691: GREATER
4692: IFFALSE 4763
// begin RemoveUnit ( HexInfo ( 83 , 141 ) ) ;
4694: LD_INT 83
4696: PPUSH
4697: LD_INT 141
4699: PPUSH
4700: CALL_OW 428
4704: PPUSH
4705: CALL_OW 64
// RemoveUnit ( HexInfo ( 78 , 133 ) ) ;
4709: LD_INT 78
4711: PPUSH
4712: LD_INT 133
4714: PPUSH
4715: CALL_OW 428
4719: PPUSH
4720: CALL_OW 64
// CreateAndPlaceBuildingXYD ( 83 , 141 , 2 ) ;
4724: LD_INT 83
4726: PPUSH
4727: LD_INT 141
4729: PPUSH
4730: LD_INT 2
4732: PPUSH
4733: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 78 , 133 , 2 ) ;
4737: LD_INT 78
4739: PPUSH
4740: LD_INT 133
4742: PPUSH
4743: LD_INT 2
4745: PPUSH
4746: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 145 , 112 , 3 ) ;
4750: LD_INT 145
4752: PPUSH
4753: LD_INT 112
4755: PPUSH
4756: LD_INT 3
4758: PPUSH
4759: CALL_OW 47
// end ; if Difficulty > 3 then
4763: LD_OWVAR 67
4767: PUSH
4768: LD_INT 3
4770: GREATER
4771: IFFALSE 4794
// begin bc_type := b_bunker ;
4773: LD_ADDR_OWVAR 42
4777: PUSH
4778: LD_INT 32
4780: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 44 , 50 , 4 ) ;
4781: LD_INT 44
4783: PPUSH
4784: LD_INT 50
4786: PPUSH
4787: LD_INT 4
4789: PPUSH
4790: CALL_OW 47
// end ; end ; dep_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
4794: LD_ADDR_VAR 0 9
4798: PUSH
4799: LD_INT 22
4801: PUSH
4802: LD_INT 3
4804: PUSH
4805: EMPTY
4806: LIST
4807: LIST
4808: PUSH
4809: LD_INT 2
4811: PUSH
4812: LD_INT 30
4814: PUSH
4815: LD_INT 0
4817: PUSH
4818: EMPTY
4819: LIST
4820: LIST
4821: PUSH
4822: LD_INT 30
4824: PUSH
4825: LD_INT 1
4827: PUSH
4828: EMPTY
4829: LIST
4830: LIST
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: LIST
4836: PUSH
4837: EMPTY
4838: LIST
4839: LIST
4840: PPUSH
4841: CALL_OW 69
4845: ST_TO_ADDR
// lab_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
4846: LD_ADDR_VAR 0 10
4850: PUSH
4851: LD_INT 22
4853: PUSH
4854: LD_INT 3
4856: PUSH
4857: EMPTY
4858: LIST
4859: LIST
4860: PUSH
4861: LD_INT 2
4863: PUSH
4864: LD_INT 30
4866: PUSH
4867: LD_INT 6
4869: PUSH
4870: EMPTY
4871: LIST
4872: LIST
4873: PUSH
4874: LD_INT 30
4876: PUSH
4877: LD_INT 7
4879: PUSH
4880: EMPTY
4881: LIST
4882: LIST
4883: PUSH
4884: LD_INT 30
4886: PUSH
4887: LD_INT 8
4889: PUSH
4890: EMPTY
4891: LIST
4892: LIST
4893: PUSH
4894: EMPTY
4895: LIST
4896: LIST
4897: LIST
4898: LIST
4899: PUSH
4900: EMPTY
4901: LIST
4902: LIST
4903: PPUSH
4904: CALL_OW 69
4908: ST_TO_ADDR
// fac_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
4909: LD_ADDR_VAR 0 11
4913: PUSH
4914: LD_INT 22
4916: PUSH
4917: LD_INT 3
4919: PUSH
4920: EMPTY
4921: LIST
4922: LIST
4923: PUSH
4924: LD_INT 30
4926: PUSH
4927: LD_INT 3
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: PUSH
4934: EMPTY
4935: LIST
4936: LIST
4937: PPUSH
4938: CALL_OW 69
4942: ST_TO_ADDR
// breastworks_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
4943: LD_ADDR_VAR 0 12
4947: PUSH
4948: LD_INT 22
4950: PUSH
4951: LD_INT 3
4953: PUSH
4954: EMPTY
4955: LIST
4956: LIST
4957: PUSH
4958: LD_INT 30
4960: PUSH
4961: LD_INT 31
4963: PUSH
4964: EMPTY
4965: LIST
4966: LIST
4967: PUSH
4968: EMPTY
4969: LIST
4970: LIST
4971: PPUSH
4972: CALL_OW 69
4976: ST_TO_ADDR
// bunker_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
4977: LD_ADDR_VAR 0 13
4981: PUSH
4982: LD_INT 22
4984: PUSH
4985: LD_INT 3
4987: PUSH
4988: EMPTY
4989: LIST
4990: LIST
4991: PUSH
4992: LD_INT 30
4994: PUSH
4995: LD_INT 32
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: PUSH
5002: EMPTY
5003: LIST
5004: LIST
5005: PPUSH
5006: CALL_OW 69
5010: ST_TO_ADDR
// turret_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
5011: LD_ADDR_VAR 0 14
5015: PUSH
5016: LD_INT 22
5018: PUSH
5019: LD_INT 3
5021: PUSH
5022: EMPTY
5023: LIST
5024: LIST
5025: PUSH
5026: LD_INT 30
5028: PUSH
5029: LD_INT 33
5031: PUSH
5032: EMPTY
5033: LIST
5034: LIST
5035: PUSH
5036: EMPTY
5037: LIST
5038: LIST
5039: PPUSH
5040: CALL_OW 69
5044: ST_TO_ADDR
// weapons_list := [ [ ru_heavy_machine_gun , 5 ] , [ ru_gatling_gun , 50 ] , [ ru_gun , 30 ] , [ ru_heavy_gun , 15 ] ] ;
5045: LD_ADDR_VAR 0 15
5049: PUSH
5050: LD_INT 42
5052: PUSH
5053: LD_INT 5
5055: PUSH
5056: EMPTY
5057: LIST
5058: LIST
5059: PUSH
5060: LD_INT 43
5062: PUSH
5063: LD_INT 50
5065: PUSH
5066: EMPTY
5067: LIST
5068: LIST
5069: PUSH
5070: LD_INT 44
5072: PUSH
5073: LD_INT 30
5075: PUSH
5076: EMPTY
5077: LIST
5078: LIST
5079: PUSH
5080: LD_INT 46
5082: PUSH
5083: LD_INT 15
5085: PUSH
5086: EMPTY
5087: LIST
5088: LIST
5089: PUSH
5090: EMPTY
5091: LIST
5092: LIST
5093: LIST
5094: LIST
5095: ST_TO_ADDR
// personel_counter := [ 0 , 4 , 6 , 3 ] ;
5096: LD_ADDR_VAR 0 16
5100: PUSH
5101: LD_INT 0
5103: PUSH
5104: LD_INT 4
5106: PUSH
5107: LD_INT 6
5109: PUSH
5110: LD_INT 3
5112: PUSH
5113: EMPTY
5114: LIST
5115: LIST
5116: LIST
5117: LIST
5118: ST_TO_ADDR
// skill := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
5119: LD_ADDR_VAR 0 6
5123: PUSH
5124: LD_INT 4
5126: PUSH
5127: LD_INT 5
5129: PUSH
5130: LD_INT 6
5132: PUSH
5133: LD_INT 7
5135: PUSH
5136: EMPTY
5137: LIST
5138: LIST
5139: LIST
5140: LIST
5141: PUSH
5142: LD_OWVAR 67
5146: ARRAY
5147: ST_TO_ADDR
// SetBName ( ru_dep_main , am_tukh ) ;
5148: LD_INT 16
5150: PPUSH
5151: LD_STRING am_tukh
5153: PPUSH
5154: CALL_OW 500
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
5158: LD_ADDR_VAR 0 2
5162: PUSH
5163: LD_INT 21
5165: PUSH
5166: LD_INT 3
5168: PUSH
5169: EMPTY
5170: LIST
5171: LIST
5172: PPUSH
5173: CALL_OW 69
5177: PUSH
5178: FOR_IN
5179: IFFALSE 5216
// SetBLevel ( i , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5181: LD_VAR 0 2
5185: PPUSH
5186: LD_INT 4
5188: PUSH
5189: LD_INT 5
5191: PUSH
5192: LD_INT 6
5194: PUSH
5195: LD_INT 7
5197: PUSH
5198: EMPTY
5199: LIST
5200: LIST
5201: LIST
5202: LIST
5203: PUSH
5204: LD_OWVAR 67
5208: ARRAY
5209: PPUSH
5210: CALL_OW 241
5214: GO 5178
5216: POP
5217: POP
// for i in dep_list do
5218: LD_ADDR_VAR 0 2
5222: PUSH
5223: LD_VAR 0 9
5227: PUSH
5228: FOR_IN
5229: IFFALSE 5273
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
5231: LD_VAR 0 2
5235: PPUSH
5236: CALL_OW 274
5240: PPUSH
5241: LD_INT 1
5243: PPUSH
5244: LD_INT 1000
5246: PPUSH
5247: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
5251: LD_VAR 0 2
5255: PPUSH
5256: CALL_OW 274
5260: PPUSH
5261: LD_INT 2
5263: PPUSH
5264: LD_INT 1000
5266: PPUSH
5267: CALL_OW 277
// end ;
5271: GO 5228
5273: POP
5274: POP
// InitHc ;
5275: CALL_OW 19
// tmp := bunker_list * [ 45 , 60 , 75 , 80 ] [ Difficulty ] div 100 ;
5279: LD_ADDR_VAR 0 8
5283: PUSH
5284: LD_VAR 0 13
5288: PUSH
5289: LD_INT 45
5291: PUSH
5292: LD_INT 60
5294: PUSH
5295: LD_INT 75
5297: PUSH
5298: LD_INT 80
5300: PUSH
5301: EMPTY
5302: LIST
5303: LIST
5304: LIST
5305: LIST
5306: PUSH
5307: LD_OWVAR 67
5311: ARRAY
5312: MUL
5313: PUSH
5314: LD_INT 100
5316: DIV
5317: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , tmp ) ;
5318: LD_ADDR_VAR 0 16
5322: PUSH
5323: LD_VAR 0 16
5327: PPUSH
5328: LD_INT 1
5330: PPUSH
5331: LD_VAR 0 8
5335: PPUSH
5336: CALL_OW 1
5340: ST_TO_ADDR
// tmp := [ ] ;
5341: LD_ADDR_VAR 0 8
5345: PUSH
5346: EMPTY
5347: ST_TO_ADDR
// for i in bunker_list do
5348: LD_ADDR_VAR 0 2
5352: PUSH
5353: LD_VAR 0 13
5357: PUSH
5358: FOR_IN
5359: IFFALSE 5455
// if i mod 10 + 1 < tmp then
5361: LD_VAR 0 2
5365: PUSH
5366: LD_INT 10
5368: MOD
5369: PUSH
5370: LD_INT 1
5372: PLUS
5373: PUSH
5374: LD_VAR 0 8
5378: LESS
5379: IFFALSE 5424
// tmp := Insert ( tmp , i mod rand ( 3 , 5 ) + 1 , i ) else
5381: LD_ADDR_VAR 0 8
5385: PUSH
5386: LD_VAR 0 8
5390: PPUSH
5391: LD_VAR 0 2
5395: PUSH
5396: LD_INT 3
5398: PPUSH
5399: LD_INT 5
5401: PPUSH
5402: CALL_OW 12
5406: MOD
5407: PUSH
5408: LD_INT 1
5410: PLUS
5411: PPUSH
5412: LD_VAR 0 2
5416: PPUSH
5417: CALL_OW 2
5421: ST_TO_ADDR
5422: GO 5453
// tmp := Insert ( tmp , tmp + 1 , i ) ;
5424: LD_ADDR_VAR 0 8
5428: PUSH
5429: LD_VAR 0 8
5433: PPUSH
5434: LD_VAR 0 8
5438: PUSH
5439: LD_INT 1
5441: PLUS
5442: PPUSH
5443: LD_VAR 0 2
5447: PPUSH
5448: CALL_OW 2
5452: ST_TO_ADDR
5453: GO 5358
5455: POP
5456: POP
// bunker_list := tmp ;
5457: LD_ADDR_VAR 0 13
5461: PUSH
5462: LD_VAR 0 8
5466: ST_TO_ADDR
// for i in bunker_list ^ turret_list do
5467: LD_ADDR_VAR 0 2
5471: PUSH
5472: LD_VAR 0 13
5476: PUSH
5477: LD_VAR 0 14
5481: ADD
5482: PUSH
5483: FOR_IN
5484: IFFALSE 5507
// PlaceWeaponTurret ( i , GetTurretWeaponBase ( i ) ) ;
5486: LD_VAR 0 2
5490: PPUSH
5491: LD_VAR 0 2
5495: PPUSH
5496: CALL 2225 0 1
5500: PPUSH
5501: CALL_OW 431
5505: GO 5483
5507: POP
5508: POP
// while ( personel_counter [ 1 ] ) do
5509: LD_VAR 0 16
5513: PUSH
5514: LD_INT 1
5516: ARRAY
5517: IFFALSE 5625
// begin i := rand ( 1 , bunker_list ) ;
5519: LD_ADDR_VAR 0 2
5523: PUSH
5524: LD_INT 1
5526: PPUSH
5527: LD_VAR 0 13
5531: PPUSH
5532: CALL_OW 12
5536: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5537: LD_INT 0
5539: PPUSH
5540: LD_INT 1
5542: PPUSH
5543: LD_VAR 0 6
5547: PPUSH
5548: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , bunker_list [ i ] ) ;
5552: CALL_OW 44
5556: PPUSH
5557: LD_VAR 0 13
5561: PUSH
5562: LD_VAR 0 2
5566: ARRAY
5567: PPUSH
5568: CALL_OW 52
// bunker_list := Delete ( bunker_list , i ) ;
5572: LD_ADDR_VAR 0 13
5576: PUSH
5577: LD_VAR 0 13
5581: PPUSH
5582: LD_VAR 0 2
5586: PPUSH
5587: CALL_OW 3
5591: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , personel_counter [ 1 ] - 1 ) ;
5592: LD_ADDR_VAR 0 16
5596: PUSH
5597: LD_VAR 0 16
5601: PPUSH
5602: LD_INT 1
5604: PPUSH
5605: LD_VAR 0 16
5609: PUSH
5610: LD_INT 1
5612: ARRAY
5613: PUSH
5614: LD_INT 1
5616: MINUS
5617: PPUSH
5618: CALL_OW 1
5622: ST_TO_ADDR
// end ;
5623: GO 5509
// for i = 1 to personel_counter [ 2 ] do
5625: LD_ADDR_VAR 0 2
5629: PUSH
5630: DOUBLE
5631: LD_INT 1
5633: DEC
5634: ST_TO_ADDR
5635: LD_VAR 0 16
5639: PUSH
5640: LD_INT 2
5642: ARRAY
5643: PUSH
5644: FOR_TO
5645: IFFALSE 5676
// begin PrepareHuman ( false , 2 , skill ) ;
5647: LD_INT 0
5649: PPUSH
5650: LD_INT 2
5652: PPUSH
5653: LD_VAR 0 6
5657: PPUSH
5658: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru_dep_main ) ;
5662: CALL_OW 44
5666: PPUSH
5667: LD_INT 16
5669: PPUSH
5670: CALL_OW 52
// end ;
5674: GO 5644
5676: POP
5677: POP
// for i = 1 to personel_counter [ 3 ] do
5678: LD_ADDR_VAR 0 2
5682: PUSH
5683: DOUBLE
5684: LD_INT 1
5686: DEC
5687: ST_TO_ADDR
5688: LD_VAR 0 16
5692: PUSH
5693: LD_INT 3
5695: ARRAY
5696: PUSH
5697: FOR_TO
5698: IFFALSE 5745
// begin PrepareHuman ( false , 3 , skill ) ;
5700: LD_INT 0
5702: PPUSH
5703: LD_INT 3
5705: PPUSH
5706: LD_VAR 0 6
5710: PPUSH
5711: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , fac_list [ i mod 2 + 1 ] ) ;
5715: CALL_OW 44
5719: PPUSH
5720: LD_VAR 0 11
5724: PUSH
5725: LD_VAR 0 2
5729: PUSH
5730: LD_INT 2
5732: MOD
5733: PUSH
5734: LD_INT 1
5736: PLUS
5737: ARRAY
5738: PPUSH
5739: CALL_OW 52
// end ;
5743: GO 5697
5745: POP
5746: POP
// for i = 1 to personel_counter [ 4 ] do
5747: LD_ADDR_VAR 0 2
5751: PUSH
5752: DOUBLE
5753: LD_INT 1
5755: DEC
5756: ST_TO_ADDR
5757: LD_VAR 0 16
5761: PUSH
5762: LD_INT 4
5764: ARRAY
5765: PUSH
5766: FOR_TO
5767: IFFALSE 5804
// begin PrepareHuman ( false , 4 , skill ) ;
5769: LD_INT 0
5771: PPUSH
5772: LD_INT 4
5774: PPUSH
5775: LD_VAR 0 6
5779: PPUSH
5780: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , lab_list [ 1 ] ) ;
5784: CALL_OW 44
5788: PPUSH
5789: LD_VAR 0 10
5793: PUSH
5794: LD_INT 1
5796: ARRAY
5797: PPUSH
5798: CALL_OW 52
// end ;
5802: GO 5766
5804: POP
5805: POP
// for i in breastworks_list do
5806: LD_ADDR_VAR 0 2
5810: PUSH
5811: LD_VAR 0 12
5815: PUSH
5816: FOR_IN
5817: IFFALSE 5929
// begin r := GetDir ( i ) ;
5819: LD_ADDR_VAR 0 4
5823: PUSH
5824: LD_VAR 0 2
5828: PPUSH
5829: CALL_OW 254
5833: ST_TO_ADDR
// if r > 3 then
5834: LD_VAR 0 4
5838: PUSH
5839: LD_INT 3
5841: GREATER
5842: IFFALSE 5860
// r := r - 3 else
5844: LD_ADDR_VAR 0 4
5848: PUSH
5849: LD_VAR 0 4
5853: PUSH
5854: LD_INT 3
5856: MINUS
5857: ST_TO_ADDR
5858: GO 5874
// r := r + 3 ;
5860: LD_ADDR_VAR 0 4
5864: PUSH
5865: LD_VAR 0 4
5869: PUSH
5870: LD_INT 3
5872: PLUS
5873: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5874: LD_INT 0
5876: PPUSH
5877: LD_INT 1
5879: PPUSH
5880: LD_VAR 0 6
5884: PPUSH
5885: CALL_OW 380
// un := CreateHuman ;
5889: LD_ADDR_VAR 0 5
5893: PUSH
5894: CALL_OW 44
5898: ST_TO_ADDR
// SetDir ( un , r ) ;
5899: LD_VAR 0 5
5903: PPUSH
5904: LD_VAR 0 4
5908: PPUSH
5909: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
5913: LD_VAR 0 5
5917: PPUSH
5918: LD_VAR 0 2
5922: PPUSH
5923: CALL_OW 52
// end ;
5927: GO 5816
5929: POP
5930: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) ;
5931: LD_ADDR_VAR 0 8
5935: PUSH
5936: LD_INT 22
5938: PUSH
5939: LD_INT 3
5941: PUSH
5942: EMPTY
5943: LIST
5944: LIST
5945: PUSH
5946: LD_INT 25
5948: PUSH
5949: LD_INT 3
5951: PUSH
5952: EMPTY
5953: LIST
5954: LIST
5955: PUSH
5956: EMPTY
5957: LIST
5958: LIST
5959: PPUSH
5960: CALL_OW 69
5964: ST_TO_ADDR
// r := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
5965: LD_ADDR_VAR 0 4
5969: PUSH
5970: LD_INT 4
5972: PUSH
5973: LD_INT 5
5975: PUSH
5976: LD_INT 6
5978: PUSH
5979: LD_INT 6
5981: PUSH
5982: EMPTY
5983: LIST
5984: LIST
5985: LIST
5986: LIST
5987: PUSH
5988: LD_OWVAR 67
5992: ARRAY
5993: ST_TO_ADDR
// for i = 1 to r do
5994: LD_ADDR_VAR 0 2
5998: PUSH
5999: DOUBLE
6000: LD_INT 1
6002: DEC
6003: ST_TO_ADDR
6004: LD_VAR 0 4
6008: PUSH
6009: FOR_TO
6010: IFFALSE 6183
// begin un := PrepareTank ( 3 , 3 , [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked ] [ i mod 3 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
6012: LD_ADDR_VAR 0 5
6016: PUSH
6017: LD_INT 3
6019: PPUSH
6020: LD_INT 3
6022: PPUSH
6023: LD_INT 22
6025: PUSH
6026: LD_INT 22
6028: PUSH
6029: LD_INT 24
6031: PUSH
6032: EMPTY
6033: LIST
6034: LIST
6035: LIST
6036: PUSH
6037: LD_VAR 0 2
6041: PUSH
6042: LD_INT 3
6044: MOD
6045: PUSH
6046: LD_INT 1
6048: PLUS
6049: ARRAY
6050: PPUSH
6051: LD_INT 1
6053: PPUSH
6054: LD_INT 1
6056: PPUSH
6057: LD_INT 43
6059: PUSH
6060: LD_INT 44
6062: PUSH
6063: LD_INT 42
6065: PUSH
6066: EMPTY
6067: LIST
6068: LIST
6069: LIST
6070: PUSH
6071: LD_VAR 0 2
6075: PUSH
6076: LD_INT 3
6078: MOD
6079: PUSH
6080: LD_INT 1
6082: PLUS
6083: ARRAY
6084: PPUSH
6085: LD_INT 100
6087: PPUSH
6088: CALL 520 0 7
6092: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
6093: LD_VAR 0 5
6097: PPUSH
6098: LD_INT 0
6100: PPUSH
6101: LD_INT 5
6103: PPUSH
6104: CALL_OW 12
6108: PPUSH
6109: CALL_OW 233
// PlaceUnitArea ( un , parkingArea , false ) ;
6113: LD_VAR 0 5
6117: PPUSH
6118: LD_INT 5
6120: PPUSH
6121: LD_INT 0
6123: PPUSH
6124: CALL_OW 49
// if i > tmp - 2 then
6128: LD_VAR 0 2
6132: PUSH
6133: LD_VAR 0 8
6137: PUSH
6138: LD_INT 2
6140: MINUS
6141: GREATER
6142: IFFALSE 6146
// continue ;
6144: GO 6009
// ComExitBuilding ( tmp [ i ] ) ;
6146: LD_VAR 0 8
6150: PUSH
6151: LD_VAR 0 2
6155: ARRAY
6156: PPUSH
6157: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , un ) ;
6161: LD_VAR 0 8
6165: PUSH
6166: LD_VAR 0 2
6170: ARRAY
6171: PPUSH
6172: LD_VAR 0 5
6176: PPUSH
6177: CALL_OW 180
// end ;
6181: GO 6009
6183: POP
6184: POP
// end ;
6185: LD_VAR 0 1
6189: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) do var i , filter , tmp , engs , enemy ;
6190: LD_INT 22
6192: PUSH
6193: LD_INT 3
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: PUSH
6200: LD_INT 25
6202: PUSH
6203: LD_INT 2
6205: PUSH
6206: EMPTY
6207: LIST
6208: LIST
6209: PUSH
6210: EMPTY
6211: LIST
6212: LIST
6213: PPUSH
6214: CALL_OW 69
6218: IFFALSE 6950
6220: GO 6222
6222: DISABLE
6223: LD_INT 0
6225: PPUSH
6226: PPUSH
6227: PPUSH
6228: PPUSH
6229: PPUSH
// begin enable ;
6230: ENABLE
// filter := FilterUnitsInArea ( baseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
6231: LD_ADDR_VAR 0 2
6235: PUSH
6236: LD_INT 6
6238: PPUSH
6239: LD_INT 3
6241: PUSH
6242: LD_INT 24
6244: PUSH
6245: LD_INT 1000
6247: PUSH
6248: EMPTY
6249: LIST
6250: LIST
6251: PUSH
6252: EMPTY
6253: LIST
6254: LIST
6255: PUSH
6256: LD_INT 21
6258: PUSH
6259: LD_INT 3
6261: PUSH
6262: EMPTY
6263: LIST
6264: LIST
6265: PUSH
6266: EMPTY
6267: LIST
6268: LIST
6269: PPUSH
6270: CALL_OW 70
6274: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
6275: LD_ADDR_VAR 0 4
6279: PUSH
6280: LD_INT 22
6282: PUSH
6283: LD_INT 3
6285: PUSH
6286: EMPTY
6287: LIST
6288: LIST
6289: PUSH
6290: LD_INT 25
6292: PUSH
6293: LD_INT 2
6295: PUSH
6296: EMPTY
6297: LIST
6298: LIST
6299: PUSH
6300: EMPTY
6301: LIST
6302: LIST
6303: PPUSH
6304: CALL_OW 69
6308: ST_TO_ADDR
// if not filter and not ru_rebuild_list then
6309: LD_VAR 0 2
6313: NOT
6314: PUSH
6315: LD_EXP 20
6319: NOT
6320: AND
6321: IFFALSE 6391
// begin for i in engs do
6323: LD_ADDR_VAR 0 1
6327: PUSH
6328: LD_VAR 0 4
6332: PUSH
6333: FOR_IN
6334: IFFALSE 6389
// if GetLives ( i ) = 1000 and not HasTask ( i ) and not IsInUnit ( i ) then
6336: LD_VAR 0 1
6340: PPUSH
6341: CALL_OW 256
6345: PUSH
6346: LD_INT 1000
6348: EQUAL
6349: PUSH
6350: LD_VAR 0 1
6354: PPUSH
6355: CALL_OW 314
6359: NOT
6360: AND
6361: PUSH
6362: LD_VAR 0 1
6366: PPUSH
6367: CALL_OW 310
6371: NOT
6372: AND
6373: IFFALSE 6387
// ComEnterUnit ( i , ru_dep_main ) ;
6375: LD_VAR 0 1
6379: PPUSH
6380: LD_INT 16
6382: PPUSH
6383: CALL_OW 120
6387: GO 6333
6389: POP
6390: POP
// end ; if UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) then
6391: LD_VAR 0 4
6395: PPUSH
6396: LD_INT 3
6398: PUSH
6399: LD_INT 24
6401: PUSH
6402: LD_INT 650
6404: PUSH
6405: EMPTY
6406: LIST
6407: LIST
6408: PUSH
6409: EMPTY
6410: LIST
6411: LIST
6412: PPUSH
6413: CALL_OW 72
6417: IFFALSE 6510
// begin tmp := UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) ;
6419: LD_ADDR_VAR 0 3
6423: PUSH
6424: LD_VAR 0 4
6428: PPUSH
6429: LD_INT 3
6431: PUSH
6432: LD_INT 24
6434: PUSH
6435: LD_INT 650
6437: PUSH
6438: EMPTY
6439: LIST
6440: LIST
6441: PUSH
6442: EMPTY
6443: LIST
6444: LIST
6445: PPUSH
6446: CALL_OW 72
6450: ST_TO_ADDR
// for i in tmp do
6451: LD_ADDR_VAR 0 1
6455: PUSH
6456: LD_VAR 0 3
6460: PUSH
6461: FOR_IN
6462: IFFALSE 6508
// if not IsInArea ( i , mainBaseArea ) then
6464: LD_VAR 0 1
6468: PPUSH
6469: LD_INT 14
6471: PPUSH
6472: CALL_OW 308
6476: NOT
6477: IFFALSE 6506
// begin ComMoveXY ( i , 129 , 125 ) ;
6479: LD_VAR 0 1
6483: PPUSH
6484: LD_INT 129
6486: PPUSH
6487: LD_INT 125
6489: PPUSH
6490: CALL_OW 111
// AddComWait ( i , 0 0$30 ) ;
6494: LD_VAR 0 1
6498: PPUSH
6499: LD_INT 1050
6501: PPUSH
6502: CALL_OW 202
// end ;
6506: GO 6461
6508: POP
6509: POP
// end ; engs := UnitFilter ( engs , [ f_lives , 650 ] ) ;
6510: LD_ADDR_VAR 0 4
6514: PUSH
6515: LD_VAR 0 4
6519: PPUSH
6520: LD_INT 24
6522: PUSH
6523: LD_INT 650
6525: PUSH
6526: EMPTY
6527: LIST
6528: LIST
6529: PPUSH
6530: CALL_OW 72
6534: ST_TO_ADDR
// if not engs then
6535: LD_VAR 0 4
6539: NOT
6540: IFFALSE 6544
// exit ;
6542: GO 6950
// if filter then
6544: LD_VAR 0 2
6548: IFFALSE 6807
// begin for i in engs do
6550: LD_ADDR_VAR 0 1
6554: PUSH
6555: LD_VAR 0 4
6559: PUSH
6560: FOR_IN
6561: IFFALSE 6585
// if IsInUnit ( i ) then
6563: LD_VAR 0 1
6567: PPUSH
6568: CALL_OW 310
6572: IFFALSE 6583
// ComExitBuilding ( i ) ;
6574: LD_VAR 0 1
6578: PPUSH
6579: CALL_OW 122
6583: GO 6560
6585: POP
6586: POP
// wait ( 3 ) ;
6587: LD_INT 3
6589: PPUSH
6590: CALL_OW 67
// if filter >= 2 and engs >= 2 then
6594: LD_VAR 0 2
6598: PUSH
6599: LD_INT 2
6601: GREATEREQUAL
6602: PUSH
6603: LD_VAR 0 4
6607: PUSH
6608: LD_INT 2
6610: GREATEREQUAL
6611: AND
6612: IFFALSE 6760
// begin for i = 1 to engs / 2 do
6614: LD_ADDR_VAR 0 1
6618: PUSH
6619: DOUBLE
6620: LD_INT 1
6622: DEC
6623: ST_TO_ADDR
6624: LD_VAR 0 4
6628: PUSH
6629: LD_INT 2
6631: DIVREAL
6632: PUSH
6633: FOR_TO
6634: IFFALSE 6680
// if not HasTask ( engs [ i ] ) then
6636: LD_VAR 0 4
6640: PUSH
6641: LD_VAR 0 1
6645: ARRAY
6646: PPUSH
6647: CALL_OW 314
6651: NOT
6652: IFFALSE 6678
// ComRepairBuilding ( engs [ i ] , filter [ 1 ] ) ;
6654: LD_VAR 0 4
6658: PUSH
6659: LD_VAR 0 1
6663: ARRAY
6664: PPUSH
6665: LD_VAR 0 2
6669: PUSH
6670: LD_INT 1
6672: ARRAY
6673: PPUSH
6674: CALL_OW 130
6678: GO 6633
6680: POP
6681: POP
// for i = engs / 2 + 1 to engs do
6682: LD_ADDR_VAR 0 1
6686: PUSH
6687: DOUBLE
6688: LD_VAR 0 4
6692: PUSH
6693: LD_INT 2
6695: DIVREAL
6696: PUSH
6697: LD_INT 1
6699: PLUS
6700: DEC
6701: ST_TO_ADDR
6702: LD_VAR 0 4
6706: PUSH
6707: FOR_TO
6708: IFFALSE 6756
// if not HasTask ( engs [ i ] ) then
6710: LD_VAR 0 4
6714: PUSH
6715: LD_VAR 0 1
6719: ARRAY
6720: PPUSH
6721: CALL_OW 314
6725: NOT
6726: IFFALSE 6754
// ComRepairBuilding ( engs [ i ] , filter [ filter ] ) ;
6728: LD_VAR 0 4
6732: PUSH
6733: LD_VAR 0 1
6737: ARRAY
6738: PPUSH
6739: LD_VAR 0 2
6743: PUSH
6744: LD_VAR 0 2
6748: ARRAY
6749: PPUSH
6750: CALL_OW 130
6754: GO 6707
6756: POP
6757: POP
// end else
6758: GO 6807
// for i in engs do
6760: LD_ADDR_VAR 0 1
6764: PUSH
6765: LD_VAR 0 4
6769: PUSH
6770: FOR_IN
6771: IFFALSE 6805
// if not HasTask ( i ) then
6773: LD_VAR 0 1
6777: PPUSH
6778: CALL_OW 314
6782: NOT
6783: IFFALSE 6803
// ComRepairBuilding ( i , filter [ 1 ] ) ;
6785: LD_VAR 0 1
6789: PPUSH
6790: LD_VAR 0 2
6794: PUSH
6795: LD_INT 1
6797: ARRAY
6798: PPUSH
6799: CALL_OW 130
6803: GO 6770
6805: POP
6806: POP
// end ; enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
6807: LD_ADDR_VAR 0 5
6811: PUSH
6812: LD_INT 81
6814: PUSH
6815: LD_INT 3
6817: PUSH
6818: EMPTY
6819: LIST
6820: LIST
6821: PPUSH
6822: CALL_OW 69
6826: ST_TO_ADDR
// if ru_rebuild_list and not filter then
6827: LD_EXP 20
6831: PUSH
6832: LD_VAR 0 2
6836: NOT
6837: AND
6838: IFFALSE 6950
// begin ComExitBuilding ( engs ) ;
6840: LD_VAR 0 4
6844: PPUSH
6845: CALL_OW 122
// if GetDistUnitXY ( NearestUnitToXY ( enemy , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) > 10 then
6849: LD_VAR 0 5
6853: PPUSH
6854: LD_EXP 20
6858: PUSH
6859: LD_INT 2
6861: ARRAY
6862: PPUSH
6863: LD_EXP 20
6867: PUSH
6868: LD_INT 3
6870: ARRAY
6871: PPUSH
6872: CALL_OW 73
6876: PPUSH
6877: LD_EXP 20
6881: PUSH
6882: LD_INT 2
6884: ARRAY
6885: PPUSH
6886: LD_EXP 20
6890: PUSH
6891: LD_INT 3
6893: ARRAY
6894: PPUSH
6895: CALL_OW 297
6899: PUSH
6900: LD_INT 10
6902: GREATER
6903: IFFALSE 6950
// ComBuild ( engs , ru_rebuild_list [ 1 ] , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] , ru_rebuild_list [ 4 ] ) ;
6905: LD_VAR 0 4
6909: PPUSH
6910: LD_EXP 20
6914: PUSH
6915: LD_INT 1
6917: ARRAY
6918: PPUSH
6919: LD_EXP 20
6923: PUSH
6924: LD_INT 2
6926: ARRAY
6927: PPUSH
6928: LD_EXP 20
6932: PUSH
6933: LD_INT 3
6935: ARRAY
6936: PPUSH
6937: LD_EXP 20
6941: PUSH
6942: LD_INT 4
6944: ARRAY
6945: PPUSH
6946: CALL_OW 145
// end ; end ;
6950: PPOPN 5
6952: END
// every 0 0$1 trigger GetLives ( ru_dep_main ) < 250 do var i , tmp ;
6953: LD_INT 16
6955: PPUSH
6956: CALL_OW 256
6960: PUSH
6961: LD_INT 250
6963: LESS
6964: IFFALSE 7154
6966: GO 6968
6968: DISABLE
6969: LD_INT 0
6971: PPUSH
6972: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
6973: LD_ADDR_VAR 0 2
6977: PUSH
6978: LD_INT 22
6980: PUSH
6981: LD_INT 3
6983: PUSH
6984: EMPTY
6985: LIST
6986: LIST
6987: PUSH
6988: LD_INT 2
6990: PUSH
6991: LD_INT 25
6993: PUSH
6994: LD_INT 1
6996: PUSH
6997: EMPTY
6998: LIST
6999: LIST
7000: PUSH
7001: LD_INT 25
7003: PUSH
7004: LD_INT 3
7006: PUSH
7007: EMPTY
7008: LIST
7009: LIST
7010: PUSH
7011: LD_INT 25
7013: PUSH
7014: LD_INT 4
7016: PUSH
7017: EMPTY
7018: LIST
7019: LIST
7020: PUSH
7021: EMPTY
7022: LIST
7023: LIST
7024: LIST
7025: LIST
7026: PUSH
7027: EMPTY
7028: LIST
7029: LIST
7030: PPUSH
7031: CALL_OW 69
7035: ST_TO_ADDR
// ComExitBuilding ( tmp ) ;
7036: LD_VAR 0 2
7040: PPUSH
7041: CALL_OW 122
// wait ( 3 ) ;
7045: LD_INT 3
7047: PPUSH
7048: CALL_OW 67
// ComMoveXY ( tmp , 156 , 211 ) ;
7052: LD_VAR 0 2
7056: PPUSH
7057: LD_INT 156
7059: PPUSH
7060: LD_INT 211
7062: PPUSH
7063: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7067: LD_INT 35
7069: PPUSH
7070: CALL_OW 67
// for i in tmp do
7074: LD_ADDR_VAR 0 1
7078: PUSH
7079: LD_VAR 0 2
7083: PUSH
7084: FOR_IN
7085: IFFALSE 7145
// if IsInArea ( i , escapeArea ) then
7087: LD_VAR 0 1
7091: PPUSH
7092: LD_INT 15
7094: PPUSH
7095: CALL_OW 308
7099: IFFALSE 7128
// begin RemoveUnit ( i ) ;
7101: LD_VAR 0 1
7105: PPUSH
7106: CALL_OW 64
// tmp := tmp diff i ;
7110: LD_ADDR_VAR 0 2
7114: PUSH
7115: LD_VAR 0 2
7119: PUSH
7120: LD_VAR 0 1
7124: DIFF
7125: ST_TO_ADDR
// end else
7126: GO 7143
// ComMoveXY ( i , 156 , 211 ) ;
7128: LD_VAR 0 1
7132: PPUSH
7133: LD_INT 156
7135: PPUSH
7136: LD_INT 211
7138: PPUSH
7139: CALL_OW 111
7143: GO 7084
7145: POP
7146: POP
// until not tmp ;
7147: LD_VAR 0 2
7151: NOT
7152: IFFALSE 7067
// end ;
7154: PPOPN 2
7156: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do var i , tmp , doc ;
7157: LD_INT 22
7159: PUSH
7160: LD_INT 3
7162: PUSH
7163: EMPTY
7164: LIST
7165: LIST
7166: PUSH
7167: LD_INT 25
7169: PUSH
7170: LD_INT 4
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: PUSH
7177: EMPTY
7178: LIST
7179: LIST
7180: PPUSH
7181: CALL_OW 69
7185: IFFALSE 7439
7187: GO 7189
7189: DISABLE
7190: LD_INT 0
7192: PPUSH
7193: PPUSH
7194: PPUSH
// begin enable ;
7195: ENABLE
// tmp := FilterUnitsInArea ( mainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7196: LD_ADDR_VAR 0 2
7200: PUSH
7201: LD_INT 14
7203: PPUSH
7204: LD_INT 22
7206: PUSH
7207: LD_INT 3
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: PUSH
7214: LD_INT 21
7216: PUSH
7217: LD_INT 1
7219: PUSH
7220: EMPTY
7221: LIST
7222: LIST
7223: PUSH
7224: LD_INT 3
7226: PUSH
7227: LD_INT 24
7229: PUSH
7230: LD_INT 1000
7232: PUSH
7233: EMPTY
7234: LIST
7235: LIST
7236: PUSH
7237: EMPTY
7238: LIST
7239: LIST
7240: PUSH
7241: EMPTY
7242: LIST
7243: LIST
7244: LIST
7245: PPUSH
7246: CALL_OW 70
7250: ST_TO_ADDR
// doc := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
7251: LD_ADDR_VAR 0 3
7255: PUSH
7256: LD_INT 22
7258: PUSH
7259: LD_INT 3
7261: PUSH
7262: EMPTY
7263: LIST
7264: LIST
7265: PUSH
7266: LD_INT 25
7268: PUSH
7269: LD_INT 4
7271: PUSH
7272: EMPTY
7273: LIST
7274: LIST
7275: PUSH
7276: EMPTY
7277: LIST
7278: LIST
7279: PPUSH
7280: CALL_OW 69
7284: ST_TO_ADDR
// if not doc then
7285: LD_VAR 0 3
7289: NOT
7290: IFFALSE 7294
// exit ;
7292: GO 7439
// if not tmp then
7294: LD_VAR 0 2
7298: NOT
7299: IFFALSE 7390
// begin if not IsInUnit ( doc [ 1 ] ) then
7301: LD_VAR 0 3
7305: PUSH
7306: LD_INT 1
7308: ARRAY
7309: PPUSH
7310: CALL_OW 310
7314: NOT
7315: IFFALSE 7388
// ComEnterUnit ( doc , FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ) ;
7317: LD_VAR 0 3
7321: PPUSH
7322: LD_INT 22
7324: PUSH
7325: LD_INT 3
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: PUSH
7332: LD_INT 2
7334: PUSH
7335: LD_INT 30
7337: PUSH
7338: LD_INT 6
7340: PUSH
7341: EMPTY
7342: LIST
7343: LIST
7344: PUSH
7345: LD_INT 30
7347: PUSH
7348: LD_INT 7
7350: PUSH
7351: EMPTY
7352: LIST
7353: LIST
7354: PUSH
7355: LD_INT 30
7357: PUSH
7358: LD_INT 8
7360: PUSH
7361: EMPTY
7362: LIST
7363: LIST
7364: PUSH
7365: EMPTY
7366: LIST
7367: LIST
7368: LIST
7369: LIST
7370: PUSH
7371: EMPTY
7372: LIST
7373: LIST
7374: PPUSH
7375: CALL_OW 69
7379: PUSH
7380: LD_INT 1
7382: ARRAY
7383: PPUSH
7384: CALL_OW 120
// exit ;
7388: GO 7439
// end ; if IsInUnit ( doc [ 1 ] ) then
7390: LD_VAR 0 3
7394: PUSH
7395: LD_INT 1
7397: ARRAY
7398: PPUSH
7399: CALL_OW 310
7403: IFFALSE 7414
// ComExitBuilding ( doc ) ;
7405: LD_VAR 0 3
7409: PPUSH
7410: CALL_OW 122
// wait ( 3 ) ;
7414: LD_INT 3
7416: PPUSH
7417: CALL_OW 67
// ComHeal ( doc , tmp [ 1 ] ) ;
7421: LD_VAR 0 3
7425: PPUSH
7426: LD_VAR 0 2
7430: PUSH
7431: LD_INT 1
7433: ARRAY
7434: PPUSH
7435: CALL_OW 128
// end ;
7439: PPOPN 3
7441: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do var i , tmp , attacking , areas , area , mech ;
7442: LD_INT 22
7444: PUSH
7445: LD_INT 3
7447: PUSH
7448: EMPTY
7449: LIST
7450: LIST
7451: PUSH
7452: LD_INT 25
7454: PUSH
7455: LD_INT 3
7457: PUSH
7458: EMPTY
7459: LIST
7460: LIST
7461: PUSH
7462: EMPTY
7463: LIST
7464: LIST
7465: PPUSH
7466: CALL_OW 69
7470: PUSH
7471: LD_INT 22
7473: PUSH
7474: LD_INT 3
7476: PUSH
7477: EMPTY
7478: LIST
7479: LIST
7480: PUSH
7481: LD_INT 21
7483: PUSH
7484: LD_INT 2
7486: PUSH
7487: EMPTY
7488: LIST
7489: LIST
7490: PUSH
7491: EMPTY
7492: LIST
7493: LIST
7494: PPUSH
7495: CALL_OW 69
7499: AND
7500: IFFALSE 8259
7502: GO 7504
7504: DISABLE
7505: LD_INT 0
7507: PPUSH
7508: PPUSH
7509: PPUSH
7510: PPUSH
7511: PPUSH
7512: PPUSH
// begin enable ;
7513: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
7514: LD_ADDR_VAR 0 2
7518: PUSH
7519: LD_INT 22
7521: PUSH
7522: LD_INT 3
7524: PUSH
7525: EMPTY
7526: LIST
7527: LIST
7528: PUSH
7529: LD_INT 21
7531: PUSH
7532: LD_INT 2
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: PUSH
7539: LD_INT 3
7541: PUSH
7542: LD_INT 58
7544: PUSH
7545: EMPTY
7546: LIST
7547: PUSH
7548: EMPTY
7549: LIST
7550: LIST
7551: PUSH
7552: EMPTY
7553: LIST
7554: LIST
7555: LIST
7556: PPUSH
7557: CALL_OW 69
7561: ST_TO_ADDR
// areas := [ sectorAlpha , sectorBeta , sectorDelta , mainBaseArea ] ;
7562: LD_ADDR_VAR 0 4
7566: PUSH
7567: LD_INT 10
7569: PUSH
7570: LD_INT 11
7572: PUSH
7573: LD_INT 12
7575: PUSH
7576: LD_INT 14
7578: PUSH
7579: EMPTY
7580: LIST
7581: LIST
7582: LIST
7583: LIST
7584: ST_TO_ADDR
// area := 0 ;
7585: LD_ADDR_VAR 0 5
7589: PUSH
7590: LD_INT 0
7592: ST_TO_ADDR
// attacking := false ;
7593: LD_ADDR_VAR 0 3
7597: PUSH
7598: LD_INT 0
7600: ST_TO_ADDR
// for i in tmp do
7601: LD_ADDR_VAR 0 1
7605: PUSH
7606: LD_VAR 0 2
7610: PUSH
7611: FOR_IN
7612: IFFALSE 8040
// begin if GetDistUnits ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) < 10 and not HasTask ( i ) and not GetTag ( i ) and GetLives ( i ) > 650 then
7614: LD_VAR 0 1
7618: PPUSH
7619: LD_INT 22
7621: PUSH
7622: LD_INT 1
7624: PUSH
7625: EMPTY
7626: LIST
7627: LIST
7628: PPUSH
7629: CALL_OW 69
7633: PPUSH
7634: LD_VAR 0 1
7638: PPUSH
7639: CALL_OW 74
7643: PPUSH
7644: CALL_OW 296
7648: PUSH
7649: LD_INT 10
7651: LESS
7652: PUSH
7653: LD_VAR 0 1
7657: PPUSH
7658: CALL_OW 314
7662: NOT
7663: AND
7664: PUSH
7665: LD_VAR 0 1
7669: PPUSH
7670: CALL_OW 110
7674: NOT
7675: AND
7676: PUSH
7677: LD_VAR 0 1
7681: PPUSH
7682: CALL_OW 256
7686: PUSH
7687: LD_INT 650
7689: GREATER
7690: AND
7691: IFFALSE 7735
// begin ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
7693: LD_VAR 0 1
7697: PPUSH
7698: LD_INT 22
7700: PUSH
7701: LD_INT 1
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: PPUSH
7708: CALL_OW 69
7712: PPUSH
7713: LD_VAR 0 1
7717: PPUSH
7718: CALL_OW 74
7722: PPUSH
7723: CALL_OW 115
// attacking := true ;
7727: LD_ADDR_VAR 0 3
7731: PUSH
7732: LD_INT 1
7734: ST_TO_ADDR
// end ; if not GetTag ( i ) and GetLives ( i ) < 650 and GetType ( i ) = unit_vehicle then
7735: LD_VAR 0 1
7739: PPUSH
7740: CALL_OW 110
7744: NOT
7745: PUSH
7746: LD_VAR 0 1
7750: PPUSH
7751: CALL_OW 256
7755: PUSH
7756: LD_INT 650
7758: LESS
7759: AND
7760: PUSH
7761: LD_VAR 0 1
7765: PPUSH
7766: CALL_OW 247
7770: PUSH
7771: LD_INT 2
7773: EQUAL
7774: AND
7775: IFFALSE 7804
// begin SetTag ( i , 1 ) ;
7777: LD_VAR 0 1
7781: PPUSH
7782: LD_INT 1
7784: PPUSH
7785: CALL_OW 109
// ComMoveXY ( i , 130 , 139 ) ;
7789: LD_VAR 0 1
7793: PPUSH
7794: LD_INT 130
7796: PPUSH
7797: LD_INT 139
7799: PPUSH
7800: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 130 , 139 ) < 6 then
7804: LD_VAR 0 1
7808: PPUSH
7809: CALL_OW 110
7813: PUSH
7814: LD_INT 1
7816: EQUAL
7817: PUSH
7818: LD_VAR 0 1
7822: PPUSH
7823: LD_INT 130
7825: PPUSH
7826: LD_INT 139
7828: PPUSH
7829: CALL_OW 297
7833: PUSH
7834: LD_INT 6
7836: LESS
7837: AND
7838: IFFALSE 7852
// SetTag ( i , 2 ) ;
7840: LD_VAR 0 1
7844: PPUSH
7845: LD_INT 2
7847: PPUSH
7848: CALL_OW 109
// if GetTag ( i ) = 2 then
7852: LD_VAR 0 1
7856: PPUSH
7857: CALL_OW 110
7861: PUSH
7862: LD_INT 2
7864: EQUAL
7865: IFFALSE 8000
// begin if GetLives ( i ) = 1000 then
7867: LD_VAR 0 1
7871: PPUSH
7872: CALL_OW 256
7876: PUSH
7877: LD_INT 1000
7879: EQUAL
7880: IFFALSE 7896
// SetTag ( i , 3 ) else
7882: LD_VAR 0 1
7886: PPUSH
7887: LD_INT 3
7889: PPUSH
7890: CALL_OW 109
7894: GO 8000
// if IsDrivenBy ( i ) then
7896: LD_VAR 0 1
7900: PPUSH
7901: CALL_OW 311
7905: IFFALSE 8000
// begin mech := IsDrivenBy ( i ) ;
7907: LD_ADDR_VAR 0 6
7911: PUSH
7912: LD_VAR 0 1
7916: PPUSH
7917: CALL_OW 311
7921: ST_TO_ADDR
// if not See ( 1 , mech ) and GetLives ( mech ) < 1000 then
7922: LD_INT 1
7924: PPUSH
7925: LD_VAR 0 6
7929: PPUSH
7930: CALL_OW 292
7934: NOT
7935: PUSH
7936: LD_VAR 0 6
7940: PPUSH
7941: CALL_OW 256
7945: PUSH
7946: LD_INT 1000
7948: LESS
7949: AND
7950: IFFALSE 7964
// SetLives ( mech , 1000 ) ;
7952: LD_VAR 0 6
7956: PPUSH
7957: LD_INT 1000
7959: PPUSH
7960: CALL_OW 234
// if not See ( 1 , i ) then
7964: LD_INT 1
7966: PPUSH
7967: LD_VAR 0 1
7971: PPUSH
7972: CALL_OW 292
7976: NOT
7977: IFFALSE 7991
// SetFuel ( i , 100 ) ;
7979: LD_VAR 0 1
7983: PPUSH
7984: LD_INT 100
7986: PPUSH
7987: CALL_OW 240
// ComRepairVehicleAndReturn ( mech ) ;
7991: LD_VAR 0 6
7995: PPUSH
7996: CALL 72186 0 1
// end ; end ; if GetTag ( i ) = 3 and IsDrivenBy ( i ) then
8000: LD_VAR 0 1
8004: PPUSH
8005: CALL_OW 110
8009: PUSH
8010: LD_INT 3
8012: EQUAL
8013: PUSH
8014: LD_VAR 0 1
8018: PPUSH
8019: CALL_OW 311
8023: AND
8024: IFFALSE 8038
// SetTag ( i , 0 ) ;
8026: LD_VAR 0 1
8030: PPUSH
8031: LD_INT 0
8033: PPUSH
8034: CALL_OW 109
// end ;
8038: GO 7611
8040: POP
8041: POP
// if attacking then
8042: LD_VAR 0 3
8046: IFFALSE 8050
// exit ;
8048: GO 8259
// if can_end and tmp then
8050: LD_EXP 6
8054: PUSH
8055: LD_VAR 0 2
8059: AND
8060: IFFALSE 8115
// begin for i in tmp do
8062: LD_ADDR_VAR 0 1
8066: PUSH
8067: LD_VAR 0 2
8071: PUSH
8072: FOR_IN
8073: IFFALSE 8111
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
8075: LD_VAR 0 1
8079: PPUSH
8080: LD_INT 22
8082: PUSH
8083: LD_INT 1
8085: PUSH
8086: EMPTY
8087: LIST
8088: LIST
8089: PPUSH
8090: CALL_OW 69
8094: PPUSH
8095: LD_VAR 0 1
8099: PPUSH
8100: CALL_OW 74
8104: PPUSH
8105: CALL_OW 115
8109: GO 8072
8111: POP
8112: POP
// exit ;
8113: GO 8259
// end ; for i in areas do
8115: LD_ADDR_VAR 0 1
8119: PUSH
8120: LD_VAR 0 4
8124: PUSH
8125: FOR_IN
8126: IFFALSE 8163
// if FilterUnitsInArea ( i , [ f_side , 1 ] ) then
8128: LD_VAR 0 1
8132: PPUSH
8133: LD_INT 22
8135: PUSH
8136: LD_INT 1
8138: PUSH
8139: EMPTY
8140: LIST
8141: LIST
8142: PPUSH
8143: CALL_OW 70
8147: IFFALSE 8161
// begin area := i ;
8149: LD_ADDR_VAR 0 5
8153: PUSH
8154: LD_VAR 0 1
8158: ST_TO_ADDR
// break ;
8159: GO 8163
// end ;
8161: GO 8125
8163: POP
8164: POP
// if area then
8165: LD_VAR 0 5
8169: IFFALSE 8259
// begin for i in tmp do
8171: LD_ADDR_VAR 0 1
8175: PUSH
8176: LD_VAR 0 2
8180: PUSH
8181: FOR_IN
8182: IFFALSE 8257
// begin if GetTag ( i ) then
8184: LD_VAR 0 1
8188: PPUSH
8189: CALL_OW 110
8193: IFFALSE 8197
// continue ;
8195: GO 8181
// if GetFuel ( i ) < 33 then
8197: LD_VAR 0 1
8201: PPUSH
8202: CALL_OW 261
8206: PUSH
8207: LD_INT 33
8209: LESS
8210: IFFALSE 8224
// SetFuel ( i , 33 ) ;
8212: LD_VAR 0 1
8216: PPUSH
8217: LD_INT 33
8219: PPUSH
8220: CALL_OW 240
// if not IsInArea ( i , area ) then
8224: LD_VAR 0 1
8228: PPUSH
8229: LD_VAR 0 5
8233: PPUSH
8234: CALL_OW 308
8238: NOT
8239: IFFALSE 8255
// ComMoveToArea ( i , area ) ;
8241: LD_VAR 0 1
8245: PPUSH
8246: LD_VAR 0 5
8250: PPUSH
8251: CALL_OW 113
// end ;
8255: GO 8181
8257: POP
8258: POP
// end ; end ;
8259: PPOPN 6
8261: END
// every 15 15$00 trigger Difficulty > 1 do var i , j , un , veh , time , count ;
8262: LD_OWVAR 67
8266: PUSH
8267: LD_INT 1
8269: GREATER
8270: IFFALSE 8559
8272: GO 8274
8274: DISABLE
8275: LD_INT 0
8277: PPUSH
8278: PPUSH
8279: PPUSH
8280: PPUSH
8281: PPUSH
8282: PPUSH
// begin uc_side := 3 ;
8283: LD_ADDR_OWVAR 20
8287: PUSH
8288: LD_INT 3
8290: ST_TO_ADDR
// uc_nation := 3 ;
8291: LD_ADDR_OWVAR 21
8295: PUSH
8296: LD_INT 3
8298: ST_TO_ADDR
// time := [ 9 9$00 , 7 7$00 , 6 6$00 , 5 5$30 ] [ Difficulty ] ;
8299: LD_ADDR_VAR 0 5
8303: PUSH
8304: LD_INT 18900
8306: PUSH
8307: LD_INT 14700
8309: PUSH
8310: LD_INT 12600
8312: PUSH
8313: LD_INT 11550
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: LIST
8320: LIST
8321: PUSH
8322: LD_OWVAR 67
8326: ARRAY
8327: ST_TO_ADDR
// count := [ 2 , 2 , 3 , 3 ] [ Difficulty ] ;
8328: LD_ADDR_VAR 0 6
8332: PUSH
8333: LD_INT 2
8335: PUSH
8336: LD_INT 2
8338: PUSH
8339: LD_INT 3
8341: PUSH
8342: LD_INT 3
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: LIST
8349: LIST
8350: PUSH
8351: LD_OWVAR 67
8355: ARRAY
8356: ST_TO_ADDR
// for i = 1 to count do
8357: LD_ADDR_VAR 0 1
8361: PUSH
8362: DOUBLE
8363: LD_INT 1
8365: DEC
8366: ST_TO_ADDR
8367: LD_VAR 0 6
8371: PUSH
8372: FOR_TO
8373: IFFALSE 8557
// begin wait ( time ) ;
8375: LD_VAR 0 5
8379: PPUSH
8380: CALL_OW 67
// for j = 1 to rand ( 1 , Difficulty ) do
8384: LD_ADDR_VAR 0 2
8388: PUSH
8389: DOUBLE
8390: LD_INT 1
8392: DEC
8393: ST_TO_ADDR
8394: LD_INT 1
8396: PPUSH
8397: LD_OWVAR 67
8401: PPUSH
8402: CALL_OW 12
8406: PUSH
8407: FOR_TO
8408: IFFALSE 8553
// begin veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 80 ) ;
8410: LD_ADDR_VAR 0 4
8414: PUSH
8415: LD_INT 3
8417: PPUSH
8418: LD_INT 3
8420: PPUSH
8421: LD_INT 22
8423: PPUSH
8424: LD_INT 1
8426: PPUSH
8427: LD_INT 1
8429: PPUSH
8430: LD_INT 43
8432: PUSH
8433: LD_INT 44
8435: PUSH
8436: LD_INT 42
8438: PUSH
8439: EMPTY
8440: LIST
8441: LIST
8442: LIST
8443: PUSH
8444: LD_VAR 0 1
8448: PUSH
8449: LD_INT 3
8451: MOD
8452: PUSH
8453: LD_INT 1
8455: PLUS
8456: ARRAY
8457: PPUSH
8458: LD_INT 80
8460: PPUSH
8461: CALL 520 0 7
8465: ST_TO_ADDR
// PlaceUnitArea ( veh , southArea , false ) ;
8466: LD_VAR 0 4
8470: PPUSH
8471: LD_INT 13
8473: PPUSH
8474: LD_INT 0
8476: PPUSH
8477: CALL_OW 49
// PrepareHuman ( false , 3 , [ 4 , 5 , 5 , 7 ] [ Difficulty ] ) ;
8481: LD_INT 0
8483: PPUSH
8484: LD_INT 3
8486: PPUSH
8487: LD_INT 4
8489: PUSH
8490: LD_INT 5
8492: PUSH
8493: LD_INT 5
8495: PUSH
8496: LD_INT 7
8498: PUSH
8499: EMPTY
8500: LIST
8501: LIST
8502: LIST
8503: LIST
8504: PUSH
8505: LD_OWVAR 67
8509: ARRAY
8510: PPUSH
8511: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
8515: CALL_OW 44
8519: PPUSH
8520: LD_VAR 0 4
8524: PPUSH
8525: CALL_OW 52
// wait ( 0 0$01 ) ;
8529: LD_INT 35
8531: PPUSH
8532: CALL_OW 67
// ComMoveXY ( veh , 143 , 143 ) ;
8536: LD_VAR 0 4
8540: PPUSH
8541: LD_INT 143
8543: PPUSH
8544: LD_INT 143
8546: PPUSH
8547: CALL_OW 111
// end ;
8551: GO 8407
8553: POP
8554: POP
// end ;
8555: GO 8372
8557: POP
8558: POP
// end ;
8559: PPOPN 6
8561: END
// every 8 8$00 do var i , un , time ;
8562: GO 8564
8564: DISABLE
8565: LD_INT 0
8567: PPUSH
8568: PPUSH
8569: PPUSH
// begin time := [ 3 3$00 , 1 1$00 , 0 0$30 ] ;
8570: LD_ADDR_VAR 0 3
8574: PUSH
8575: LD_INT 6300
8577: PUSH
8578: LD_INT 2100
8580: PUSH
8581: LD_INT 1050
8583: PUSH
8584: EMPTY
8585: LIST
8586: LIST
8587: LIST
8588: ST_TO_ADDR
// wait ( time ) ;
8589: LD_VAR 0 3
8593: PPUSH
8594: CALL_OW 67
// uc_side := 3 ;
8598: LD_ADDR_OWVAR 20
8602: PUSH
8603: LD_INT 3
8605: ST_TO_ADDR
// uc_nation := 3 ;
8606: LD_ADDR_OWVAR 21
8610: PUSH
8611: LD_INT 3
8613: ST_TO_ADDR
// for i = 1 to 2 do
8614: LD_ADDR_VAR 0 1
8618: PUSH
8619: DOUBLE
8620: LD_INT 1
8622: DEC
8623: ST_TO_ADDR
8624: LD_INT 2
8626: PUSH
8627: FOR_TO
8628: IFFALSE 8691
// begin PrepareHuman ( false , 1 , 4 ) ;
8630: LD_INT 0
8632: PPUSH
8633: LD_INT 1
8635: PPUSH
8636: LD_INT 4
8638: PPUSH
8639: CALL_OW 380
// un := CreateHuman ;
8643: LD_ADDR_VAR 0 2
8647: PUSH
8648: CALL_OW 44
8652: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_dep_main ) ;
8653: LD_VAR 0 2
8657: PPUSH
8658: LD_INT 16
8660: PPUSH
8661: CALL_OW 52
// ComExitBuilding ( un ) ;
8665: LD_VAR 0 2
8669: PPUSH
8670: CALL_OW 122
// AddComAgressiveMove ( un , 41 , 76 ) ;
8674: LD_VAR 0 2
8678: PPUSH
8679: LD_INT 41
8681: PPUSH
8682: LD_INT 76
8684: PPUSH
8685: CALL_OW 174
// end ;
8689: GO 8627
8691: POP
8692: POP
// end ; end_of_file
8693: PPOPN 3
8695: END
// export function Action ; begin
8696: LD_INT 0
8698: PPUSH
// CenterNowOnXY ( 28 , 3 ) ;
8699: LD_INT 28
8701: PPUSH
8702: LD_INT 3
8704: PPUSH
8705: CALL_OW 86
// PlaceSeeing ( 41 , 76 , 1 , 10 ) ;
8709: LD_INT 41
8711: PPUSH
8712: LD_INT 76
8714: PPUSH
8715: LD_INT 1
8717: PPUSH
8718: LD_INT 10
8720: PPUSH
8721: CALL_OW 330
// RemoveSeeing ( 41 , 76 , 1 ) ;
8725: LD_INT 41
8727: PPUSH
8728: LD_INT 76
8730: PPUSH
8731: LD_INT 1
8733: PPUSH
8734: CALL_OW 331
// InGameOn ;
8738: CALL_OW 8
// SayRadio ( Harisson , D2-Har-1 ) ;
8742: LD_EXP 19
8746: PPUSH
8747: LD_STRING D2-Har-1
8749: PPUSH
8750: CALL_OW 94
// InGameOff ;
8754: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
8758: LD_STRING M1
8760: PPUSH
8761: CALL_OW 337
// end ;
8765: LD_VAR 0 1
8769: RET
// every 0 0$1 trigger buildings_counter > 1 do var un ;
8770: LD_EXP 4
8774: PUSH
8775: LD_INT 1
8777: GREATER
8778: IFFALSE 8869
8780: GO 8782
8782: DISABLE
8783: LD_INT 0
8785: PPUSH
// begin un := GetRandom ( sex_male ) [ 1 ] ;
8786: LD_ADDR_VAR 0 1
8790: PUSH
8791: LD_INT 1
8793: PPUSH
8794: CALL 608 0 1
8798: PUSH
8799: LD_INT 1
8801: ARRAY
8802: ST_TO_ADDR
// Say ( un , D2a-Sol1-1 ) ;
8803: LD_VAR 0 1
8807: PPUSH
8808: LD_STRING D2a-Sol1-1
8810: PPUSH
8811: CALL_OW 88
// if not un then
8815: LD_VAR 0 1
8819: NOT
8820: IFFALSE 8851
// begin un := GetRandom ( sex_female ) [ 1 ] ;
8822: LD_ADDR_VAR 0 1
8826: PUSH
8827: LD_INT 2
8829: PPUSH
8830: CALL 608 0 1
8834: PUSH
8835: LD_INT 1
8837: ARRAY
8838: ST_TO_ADDR
// Say ( un , D2a-FSol1-1 ) ;
8839: LD_VAR 0 1
8843: PPUSH
8844: LD_STRING D2a-FSol1-1
8846: PPUSH
8847: CALL_OW 88
// end ; if Khatam then
8851: LD_EXP 17
8855: IFFALSE 8869
// Say ( Khatam , D3b-Khat-3 ) ;
8857: LD_EXP 17
8861: PPUSH
8862: LD_STRING D3b-Khat-3
8864: PPUSH
8865: CALL_OW 88
// end ;
8869: PPOPN 1
8871: END
// every 0 0$1 trigger Frank and not Kikuchi and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Frank , 7 ] ] ) and IsOk ( Frank ) and not InBattle ( 1 ) and not InBattle ( 4 ) do var i , ape ;
8872: LD_EXP 15
8876: PUSH
8877: LD_EXP 18
8881: NOT
8882: AND
8883: PUSH
8884: LD_INT 22
8886: PUSH
8887: LD_INT 1
8889: PUSH
8890: EMPTY
8891: LIST
8892: LIST
8893: PUSH
8894: LD_INT 91
8896: PUSH
8897: LD_EXP 15
8901: PUSH
8902: LD_INT 7
8904: PUSH
8905: EMPTY
8906: LIST
8907: LIST
8908: LIST
8909: PUSH
8910: EMPTY
8911: LIST
8912: LIST
8913: PPUSH
8914: CALL_OW 69
8918: AND
8919: PUSH
8920: LD_EXP 15
8924: PPUSH
8925: CALL_OW 302
8929: AND
8930: PUSH
8931: LD_INT 1
8933: PPUSH
8934: CALL_OW 463
8938: NOT
8939: AND
8940: PUSH
8941: LD_INT 4
8943: PPUSH
8944: CALL_OW 463
8948: NOT
8949: AND
8950: IFFALSE 9537
8952: GO 8954
8954: DISABLE
8955: LD_INT 0
8957: PPUSH
8958: PPUSH
// begin InGameOn ;
8959: CALL_OW 8
// ape := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
8963: LD_ADDR_VAR 0 2
8967: PUSH
8968: LD_INT 22
8970: PUSH
8971: LD_INT 0
8973: PUSH
8974: EMPTY
8975: LIST
8976: LIST
8977: PUSH
8978: LD_INT 25
8980: PUSH
8981: LD_INT 12
8983: PUSH
8984: EMPTY
8985: LIST
8986: LIST
8987: PUSH
8988: EMPTY
8989: LIST
8990: LIST
8991: PPUSH
8992: CALL_OW 69
8996: ST_TO_ADDR
// ape := NearestUnitToUnit ( ape , Frank ) ;
8997: LD_ADDR_VAR 0 2
9001: PUSH
9002: LD_VAR 0 2
9006: PPUSH
9007: LD_EXP 15
9011: PPUSH
9012: CALL_OW 74
9016: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , Frank , 20 ] ] ) do
9017: LD_ADDR_VAR 0 1
9021: PUSH
9022: LD_INT 22
9024: PUSH
9025: LD_INT 1
9027: PUSH
9028: EMPTY
9029: LIST
9030: LIST
9031: PUSH
9032: LD_INT 21
9034: PUSH
9035: LD_INT 1
9037: PUSH
9038: EMPTY
9039: LIST
9040: LIST
9041: PUSH
9042: LD_INT 91
9044: PUSH
9045: LD_EXP 15
9049: PUSH
9050: LD_INT 20
9052: PUSH
9053: EMPTY
9054: LIST
9055: LIST
9056: LIST
9057: PUSH
9058: EMPTY
9059: LIST
9060: LIST
9061: LIST
9062: PPUSH
9063: CALL_OW 69
9067: PUSH
9068: FOR_IN
9069: IFFALSE 9087
// ComTurnUnit ( i , Frank ) ;
9071: LD_VAR 0 1
9075: PPUSH
9076: LD_EXP 15
9080: PPUSH
9081: CALL_OW 119
9085: GO 9068
9087: POP
9088: POP
// SetSide ( Frank , 1 ) ;
9089: LD_EXP 15
9093: PPUSH
9094: LD_INT 1
9096: PPUSH
9097: CALL_OW 235
// ComMoveUnit ( JMM , Frank ) ;
9101: LD_EXP 9
9105: PPUSH
9106: LD_EXP 15
9110: PPUSH
9111: CALL_OW 112
// AddComTurnUnit ( JMM , Frank ) ;
9115: LD_EXP 9
9119: PPUSH
9120: LD_EXP 15
9124: PPUSH
9125: CALL_OW 179
// CenterOnUnits ( Frank ) ;
9129: LD_EXP 15
9133: PPUSH
9134: CALL_OW 85
// Say ( Frank , D3a-Frank-1 ) ;
9138: LD_EXP 15
9142: PPUSH
9143: LD_STRING D3a-Frank-1
9145: PPUSH
9146: CALL_OW 88
// ComMoveXY ( ape , 42 , 78 ) ;
9150: LD_VAR 0 2
9154: PPUSH
9155: LD_INT 42
9157: PPUSH
9158: LD_INT 78
9160: PPUSH
9161: CALL_OW 111
// AddComTurnUnit ( ape , Frank ) ;
9165: LD_VAR 0 2
9169: PPUSH
9170: LD_EXP 15
9174: PPUSH
9175: CALL_OW 179
// if Lisa then
9179: LD_EXP 14
9183: IFFALSE 9197
// Say ( Lisa , D3a-Lisa-1 ) ;
9185: LD_EXP 14
9189: PPUSH
9190: LD_STRING D3a-Lisa-1
9192: PPUSH
9193: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
9197: LD_EXP 9
9201: PPUSH
9202: LD_STRING D3a-JMM-1
9204: PPUSH
9205: CALL_OW 88
// if Cyrus then
9209: LD_EXP 13
9213: IFFALSE 9227
// Say ( Cyrus , D3a-Cyrus-1 ) ;
9215: LD_EXP 13
9219: PPUSH
9220: LD_STRING D3a-Cyrus-1
9222: PPUSH
9223: CALL_OW 88
// if GetRandom ( sex_male ) then
9227: LD_INT 1
9229: PPUSH
9230: CALL 608 0 1
9234: IFFALSE 9255
// Say ( GetRandom ( sex_male ) [ 1 ] , D3a-Sol1-1 ) ;
9236: LD_INT 1
9238: PPUSH
9239: CALL 608 0 1
9243: PUSH
9244: LD_INT 1
9246: ARRAY
9247: PPUSH
9248: LD_STRING D3a-Sol1-1
9250: PPUSH
9251: CALL_OW 88
// if GetRandom ( sex_female ) then
9255: LD_INT 2
9257: PPUSH
9258: CALL 608 0 1
9262: IFFALSE 9283
// Say ( GetRandom ( sex_female ) [ 1 ] , D3a-FSol1-1 ) ;
9264: LD_INT 2
9266: PPUSH
9267: CALL 608 0 1
9271: PUSH
9272: LD_INT 1
9274: ARRAY
9275: PPUSH
9276: LD_STRING D3a-FSol1-1
9278: PPUSH
9279: CALL_OW 88
// if Gladstone then
9283: LD_EXP 16
9287: IFFALSE 9301
// Say ( Gladstone , D3a-Glad-1 ) ;
9289: LD_EXP 16
9293: PPUSH
9294: LD_STRING D3a-Glad-1
9296: PPUSH
9297: CALL_OW 88
// ComMoveXY ( ape , 60 , 113 ) ;
9301: LD_VAR 0 2
9305: PPUSH
9306: LD_INT 60
9308: PPUSH
9309: LD_INT 113
9311: PPUSH
9312: CALL_OW 111
// Say ( Frank , D3a-Frank-2 ) ;
9316: LD_EXP 15
9320: PPUSH
9321: LD_STRING D3a-Frank-2
9323: PPUSH
9324: CALL_OW 88
// ComTurnUnit ( Frank , JMM ) ;
9328: LD_EXP 15
9332: PPUSH
9333: LD_EXP 9
9337: PPUSH
9338: CALL_OW 119
// Say ( JMM , D3a-JMM-2 ) ;
9342: LD_EXP 9
9346: PPUSH
9347: LD_STRING D3a-JMM-2
9349: PPUSH
9350: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9354: LD_INT 1
9356: PPUSH
9357: LD_INT 4
9359: PPUSH
9360: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9364: LD_INT 85
9366: PPUSH
9367: LD_INT 134
9369: PPUSH
9370: CALL_OW 84
// Say ( Frank , D3a-Frank-3 ) ;
9374: LD_EXP 15
9378: PPUSH
9379: LD_STRING D3a-Frank-3
9381: PPUSH
9382: CALL_OW 88
// Wait ( 0 0$01 ) ;
9386: LD_INT 35
9388: PPUSH
9389: CALL_OW 67
// CenterOnXY ( 166 , 136 ) ;
9393: LD_INT 166
9395: PPUSH
9396: LD_INT 136
9398: PPUSH
9399: CALL_OW 84
// Say ( JMM , D3a-JMM-3 ) ;
9403: LD_EXP 9
9407: PPUSH
9408: LD_STRING D3a-JMM-3
9410: PPUSH
9411: CALL_OW 88
// Wait ( 0 0$01 ) ;
9415: LD_INT 35
9417: PPUSH
9418: CALL_OW 67
// CenterNowOnUnits ( Frank ) ;
9422: LD_EXP 15
9426: PPUSH
9427: CALL_OW 87
// Say ( Frank , D3a-Frank-4 ) ;
9431: LD_EXP 15
9435: PPUSH
9436: LD_STRING D3a-Frank-4
9438: PPUSH
9439: CALL_OW 88
// if Lisa then
9443: LD_EXP 14
9447: IFFALSE 9461
// Say ( Lisa , D3a-Lisa-4 ) ;
9449: LD_EXP 14
9453: PPUSH
9454: LD_STRING D3a-Lisa-4
9456: PPUSH
9457: CALL_OW 88
// Say ( JMM , D3a-JMM-4 ) ;
9461: LD_EXP 9
9465: PPUSH
9466: LD_STRING D3a-JMM-4
9468: PPUSH
9469: CALL_OW 88
// Say ( Frank , D3a-Frank-5 ) ;
9473: LD_EXP 15
9477: PPUSH
9478: LD_STRING D3a-Frank-5
9480: PPUSH
9481: CALL_OW 88
// Say ( JMM , D3a-JMM-5 ) ;
9485: LD_EXP 9
9489: PPUSH
9490: LD_STRING D3a-JMM-5
9492: PPUSH
9493: CALL_OW 88
// Say ( Frank , D3a-Frank-6 ) ;
9497: LD_EXP 15
9501: PPUSH
9502: LD_STRING D3a-Frank-6
9504: PPUSH
9505: CALL_OW 88
// Say ( JMM , D3a-JMM-6 ) ;
9509: LD_EXP 9
9513: PPUSH
9514: LD_STRING D3a-JMM-6
9516: PPUSH
9517: CALL_OW 88
// Say ( Frank , D3a-Frank-7 ) ;
9521: LD_EXP 15
9525: PPUSH
9526: LD_STRING D3a-Frank-7
9528: PPUSH
9529: CALL_OW 88
// InGameOff ;
9533: CALL_OW 9
// end ;
9537: PPOPN 2
9539: END
// every 0 0$1 trigger Kikuchi and not Frank and FilterAllUnits ( [ [ f_side , 1 ] , [ f_dist , Kikuchi , 7 ] ] ) and IsOk ( Kikuchi ) and not InBattle ( 1 ) and not InBattle ( 4 ) do
9540: LD_EXP 18
9544: PUSH
9545: LD_EXP 15
9549: NOT
9550: AND
9551: PUSH
9552: LD_INT 22
9554: PUSH
9555: LD_INT 1
9557: PUSH
9558: EMPTY
9559: LIST
9560: LIST
9561: PUSH
9562: LD_INT 91
9564: PUSH
9565: LD_EXP 18
9569: PUSH
9570: LD_INT 7
9572: PUSH
9573: EMPTY
9574: LIST
9575: LIST
9576: LIST
9577: PUSH
9578: EMPTY
9579: LIST
9580: LIST
9581: PPUSH
9582: CALL_OW 69
9586: AND
9587: PUSH
9588: LD_EXP 18
9592: PPUSH
9593: CALL_OW 302
9597: AND
9598: PUSH
9599: LD_INT 1
9601: PPUSH
9602: CALL_OW 463
9606: NOT
9607: AND
9608: PUSH
9609: LD_INT 4
9611: PPUSH
9612: CALL_OW 463
9616: NOT
9617: AND
9618: IFFALSE 9798
9620: GO 9622
9622: DISABLE
// begin InGameOn ;
9623: CALL_OW 8
// ComTurnUnit ( JMM , Kikuchi ) ;
9627: LD_EXP 9
9631: PPUSH
9632: LD_EXP 18
9636: PPUSH
9637: CALL_OW 119
// ComTurnUnit ( Kikuchi , JMM ) ;
9641: LD_EXP 18
9645: PPUSH
9646: LD_EXP 9
9650: PPUSH
9651: CALL_OW 119
// CenterOnUnits ( Kikuchi ) ;
9655: LD_EXP 18
9659: PPUSH
9660: CALL_OW 85
// Say ( Kikuchi , D3b-Yam-1 ) ;
9664: LD_EXP 18
9668: PPUSH
9669: LD_STRING D3b-Yam-1
9671: PPUSH
9672: CALL_OW 88
// Say ( JMM , D3b-JMM-1 ) ;
9676: LD_EXP 9
9680: PPUSH
9681: LD_STRING D3b-JMM-1
9683: PPUSH
9684: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9688: LD_INT 1
9690: PPUSH
9691: LD_INT 4
9693: PPUSH
9694: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9698: LD_INT 85
9700: PPUSH
9701: LD_INT 134
9703: PPUSH
9704: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-2 ) ;
9708: LD_EXP 18
9712: PPUSH
9713: LD_STRING D3b-Yam-2
9715: PPUSH
9716: CALL_OW 88
// Wait ( 0 0$01 ) ;
9720: LD_INT 35
9722: PPUSH
9723: CALL_OW 67
// Say ( JMM , D3b-JMM-2 ) ;
9727: LD_EXP 9
9731: PPUSH
9732: LD_STRING D3b-JMM-2
9734: PPUSH
9735: CALL_OW 88
// CenterOnXY ( 166 , 136 ) ;
9739: LD_INT 166
9741: PPUSH
9742: LD_INT 136
9744: PPUSH
9745: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-3 ) ;
9749: LD_EXP 18
9753: PPUSH
9754: LD_STRING D3b-Yam-3
9756: PPUSH
9757: CALL_OW 88
// CenterNowOnUnits ( JMM ) ;
9761: LD_EXP 9
9765: PPUSH
9766: CALL_OW 87
// Say ( JMM , D3b-JMM-3a ) ;
9770: LD_EXP 9
9774: PPUSH
9775: LD_STRING D3b-JMM-3a
9777: PPUSH
9778: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
9782: LD_EXP 18
9786: PPUSH
9787: LD_INT 1
9789: PPUSH
9790: CALL_OW 235
// InGameOff ;
9794: CALL_OW 9
// end ;
9798: END
// every 0 0$1 trigger FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var un , x , tw , i ;
9799: LD_INT 7
9801: PPUSH
9802: LD_INT 22
9804: PUSH
9805: LD_INT 1
9807: PUSH
9808: EMPTY
9809: LIST
9810: LIST
9811: PUSH
9812: LD_INT 3
9814: PUSH
9815: LD_INT 24
9817: PUSH
9818: LD_INT 1000
9820: PUSH
9821: EMPTY
9822: LIST
9823: LIST
9824: PUSH
9825: EMPTY
9826: LIST
9827: LIST
9828: PUSH
9829: EMPTY
9830: LIST
9831: LIST
9832: PPUSH
9833: CALL_OW 70
9837: IFFALSE 10293
9839: GO 9841
9841: DISABLE
9842: LD_INT 0
9844: PPUSH
9845: PPUSH
9846: PPUSH
9847: PPUSH
// begin repeat wait ( 0 0$1 ) ;
9848: LD_INT 35
9850: PPUSH
9851: CALL_OW 67
// un := FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
9855: LD_ADDR_VAR 0 1
9859: PUSH
9860: LD_INT 7
9862: PPUSH
9863: LD_INT 22
9865: PUSH
9866: LD_INT 1
9868: PUSH
9869: EMPTY
9870: LIST
9871: LIST
9872: PUSH
9873: LD_INT 3
9875: PUSH
9876: LD_INT 24
9878: PUSH
9879: LD_INT 1000
9881: PUSH
9882: EMPTY
9883: LIST
9884: LIST
9885: PUSH
9886: EMPTY
9887: LIST
9888: LIST
9889: PUSH
9890: EMPTY
9891: LIST
9892: LIST
9893: PPUSH
9894: CALL_OW 70
9898: ST_TO_ADDR
// if not un then
9899: LD_VAR 0 1
9903: NOT
9904: IFFALSE 9908
// continue ;
9906: GO 9848
// tw := NearbyTowerHasEnergy ( un [ 1 ] ) ;
9908: LD_ADDR_VAR 0 3
9912: PUSH
9913: LD_VAR 0 1
9917: PUSH
9918: LD_INT 1
9920: ARRAY
9921: PPUSH
9922: CALL 2053 0 1
9926: ST_TO_ADDR
// until tw ;
9927: LD_VAR 0 3
9931: IFFALSE 9848
// DialogueOn ;
9933: CALL_OW 6
// CenterNowOnUnits ( tw ) ;
9937: LD_VAR 0 3
9941: PPUSH
9942: CALL_OW 87
// if Lisa then
9946: LD_EXP 14
9950: IFFALSE 9978
// begin Say ( Lisa , D5-Lisa-1 ) ;
9952: LD_EXP 14
9956: PPUSH
9957: LD_STRING D5-Lisa-1
9959: PPUSH
9960: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
9964: LD_EXP 9
9968: PPUSH
9969: LD_STRING D5-JMM-1a
9971: PPUSH
9972: CALL_OW 88
// end else
9976: GO 9990
// Say ( JMM , D5-JMM-1 ) ;
9978: LD_EXP 9
9982: PPUSH
9983: LD_STRING D5-JMM-1
9985: PPUSH
9986: CALL_OW 88
// DialogueOff ;
9990: CALL_OW 7
// while ( true ) do
9994: LD_INT 1
9996: IFFALSE 10052
// begin wait ( 0 0$01 ) ;
9998: LD_INT 35
10000: PPUSH
10001: CALL_OW 67
// x := FilterUnitsExceptArea ( northElectro , [ [ f_btype , b_oil_power ] , [ f_see , 1 ] ] ) ;
10005: LD_ADDR_VAR 0 2
10009: PUSH
10010: LD_INT 8
10012: PPUSH
10013: LD_INT 30
10015: PUSH
10016: LD_INT 26
10018: PUSH
10019: EMPTY
10020: LIST
10021: LIST
10022: PUSH
10023: LD_INT 101
10025: PUSH
10026: LD_INT 1
10028: PUSH
10029: EMPTY
10030: LIST
10031: LIST
10032: PUSH
10033: EMPTY
10034: LIST
10035: LIST
10036: PPUSH
10037: CALL_OW 71
10041: ST_TO_ADDR
// if x then
10042: LD_VAR 0 2
10046: IFFALSE 10050
// break ;
10048: GO 10052
// end ;
10050: GO 9994
// CenterOnUnits ( x [ 1 ] ) ;
10052: LD_VAR 0 2
10056: PUSH
10057: LD_INT 1
10059: ARRAY
10060: PPUSH
10061: CALL_OW 85
// if Frank and GetSide ( Frank ) = 1 then
10065: LD_EXP 15
10069: PUSH
10070: LD_EXP 15
10074: PPUSH
10075: CALL_OW 255
10079: PUSH
10080: LD_INT 1
10082: EQUAL
10083: AND
10084: IFFALSE 10100
// Say ( Frank , D5a-Frank-1 ) else
10086: LD_EXP 15
10090: PPUSH
10091: LD_STRING D5a-Frank-1
10093: PPUSH
10094: CALL_OW 88
10098: GO 10154
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
10100: LD_EXP 18
10104: PUSH
10105: LD_EXP 18
10109: PPUSH
10110: CALL_OW 255
10114: PUSH
10115: LD_INT 1
10117: EQUAL
10118: AND
10119: IFFALSE 10135
// Say ( Kikuchi , D5a-Yam-1 ) else
10121: LD_EXP 18
10125: PPUSH
10126: LD_STRING D5a-Yam-1
10128: PPUSH
10129: CALL_OW 88
10133: GO 10154
// Say ( GetRandom ( sex_male ) [ 1 ] , D5a-Sol1-1 ) ;
10135: LD_INT 1
10137: PPUSH
10138: CALL 608 0 1
10142: PUSH
10143: LD_INT 1
10145: ARRAY
10146: PPUSH
10147: LD_STRING D5a-Sol1-1
10149: PPUSH
10150: CALL_OW 88
// Say ( JMM , D5a-JMM-1 ) ;
10154: LD_EXP 9
10158: PPUSH
10159: LD_STRING D5a-JMM-1
10161: PPUSH
10162: CALL_OW 88
// if Cyrus then
10166: LD_EXP 13
10170: IFFALSE 10184
// Say ( Cyrus , D5a-Cyrus-1 ) ;
10172: LD_EXP 13
10176: PPUSH
10177: LD_STRING D5a-Cyrus-1
10179: PPUSH
10180: CALL_OW 88
// x := false ;
10184: LD_ADDR_VAR 0 2
10188: PUSH
10189: LD_INT 0
10191: ST_TO_ADDR
// while ( true ) do
10192: LD_INT 1
10194: IFFALSE 10281
// begin wait ( 0 0$01 ) ;
10196: LD_INT 35
10198: PPUSH
10199: CALL_OW 67
// for i in FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) diff ru_dep_west do
10203: LD_ADDR_VAR 0 4
10207: PUSH
10208: LD_INT 2
10210: PUSH
10211: LD_INT 30
10213: PUSH
10214: LD_INT 0
10216: PUSH
10217: EMPTY
10218: LIST
10219: LIST
10220: PUSH
10221: LD_INT 30
10223: PUSH
10224: LD_INT 1
10226: PUSH
10227: EMPTY
10228: LIST
10229: LIST
10230: PUSH
10231: EMPTY
10232: LIST
10233: LIST
10234: LIST
10235: PPUSH
10236: CALL_OW 69
10240: PUSH
10241: LD_INT 1
10243: DIFF
10244: PUSH
10245: FOR_IN
10246: IFFALSE 10269
// if BaseNeedEnergy ( i ) then
10248: LD_VAR 0 4
10252: PPUSH
10253: CALL 1178 0 1
10257: IFFALSE 10267
// x := true ;
10259: LD_ADDR_VAR 0 2
10263: PUSH
10264: LD_INT 1
10266: ST_TO_ADDR
10267: GO 10245
10269: POP
10270: POP
// if x then
10271: LD_VAR 0 2
10275: IFFALSE 10279
// break ;
10277: GO 10281
// end ;
10279: GO 10192
// Say ( JMM , D5b-JMM-1 ) ;
10281: LD_EXP 9
10285: PPUSH
10286: LD_STRING D5b-JMM-1
10288: PPUSH
10289: CALL_OW 88
// end ;
10293: PPOPN 4
10295: END
// every 0 0$1 trigger time_to_end [ 1 ] < tick or FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) < 10 do
10296: LD_EXP 5
10300: PUSH
10301: LD_INT 1
10303: ARRAY
10304: PUSH
10305: LD_OWVAR 1
10309: LESS
10310: PUSH
10311: LD_INT 22
10313: PUSH
10314: LD_INT 3
10316: PUSH
10317: EMPTY
10318: LIST
10319: LIST
10320: PUSH
10321: LD_INT 21
10323: PUSH
10324: LD_INT 3
10326: PUSH
10327: EMPTY
10328: LIST
10329: LIST
10330: PUSH
10331: EMPTY
10332: LIST
10333: LIST
10334: PPUSH
10335: CALL_OW 69
10339: PUSH
10340: LD_INT 10
10342: LESS
10343: OR
10344: IFFALSE 10544
10346: GO 10348
10348: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10349: LD_INT 16
10351: PPUSH
10352: CALL_OW 301
10356: NOT
10357: IFFALSE 10380
// begin SayRadio ( Harisson , D3b-Har-3 ) ;
10359: LD_EXP 19
10363: PPUSH
10364: LD_STRING D3b-Har-3
10366: PPUSH
10367: CALL_OW 94
// ChangeMissionObjectives ( M2a ) ;
10371: LD_STRING M2a
10373: PPUSH
10374: CALL_OW 337
// end else
10378: GO 10399
// begin SayRadio ( Harisson , D3b-Har-3a ) ;
10380: LD_EXP 19
10384: PPUSH
10385: LD_STRING D3b-Har-3a
10387: PPUSH
10388: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
10392: LD_STRING M2
10394: PPUSH
10395: CALL_OW 337
// end ; can_end := true ;
10399: LD_ADDR_EXP 6
10403: PUSH
10404: LD_INT 1
10406: ST_TO_ADDR
// SetAreaMapShow ( endArea , 1 ) ;
10407: LD_INT 9
10409: PPUSH
10410: LD_INT 1
10412: PPUSH
10413: CALL_OW 424
// Wait ( 0 0$02 ) ;
10417: LD_INT 70
10419: PPUSH
10420: CALL_OW 67
// if Lisa then
10424: LD_EXP 14
10428: IFFALSE 10442
// Say ( Lisa , D3b-Lisa ) ;
10430: LD_EXP 14
10434: PPUSH
10435: LD_STRING D3b-Lisa
10437: PPUSH
10438: CALL_OW 88
// if Bobby then
10442: LD_EXP 12
10446: IFFALSE 10460
// Say ( Bobby , D3b-Bobby-3 ) ;
10448: LD_EXP 12
10452: PPUSH
10453: LD_STRING D3b-Bobby-3
10455: PPUSH
10456: CALL_OW 88
// if Cyrus then
10460: LD_EXP 13
10464: IFFALSE 10478
// Say ( Cyrus , D3b-Cyrus-3 ) ;
10466: LD_EXP 13
10470: PPUSH
10471: LD_STRING D3b-Cyrus-3
10473: PPUSH
10474: CALL_OW 88
// if Frank and GetSide ( Frank ) = 1 then
10478: LD_EXP 15
10482: PUSH
10483: LD_EXP 15
10487: PPUSH
10488: CALL_OW 255
10492: PUSH
10493: LD_INT 1
10495: EQUAL
10496: AND
10497: IFFALSE 10511
// Say ( Frank , D3b-Frank-3 ) ;
10499: LD_EXP 15
10503: PPUSH
10504: LD_STRING D3b-Frank-3
10506: PPUSH
10507: CALL_OW 88
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
10511: LD_EXP 18
10515: PUSH
10516: LD_EXP 18
10520: PPUSH
10521: CALL_OW 255
10525: PUSH
10526: LD_INT 1
10528: EQUAL
10529: AND
10530: IFFALSE 10544
// Say ( Kikuchi , D3b-Yam-4 ) ;
10532: LD_EXP 18
10536: PPUSH
10537: LD_STRING D3b-Yam-4
10539: PPUSH
10540: CALL_OW 88
// end ;
10544: END
// every 0 0$1 trigger time_to_end [ 2 ] < tick do
10545: LD_EXP 5
10549: PUSH
10550: LD_INT 2
10552: ARRAY
10553: PUSH
10554: LD_OWVAR 1
10558: LESS
10559: IFFALSE 10591
10561: GO 10563
10563: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
10564: LD_EXP 19
10568: PPUSH
10569: LD_STRING D4-Har-1
10571: PPUSH
10572: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
10576: LD_STRING M3
10578: PPUSH
10579: CALL_OW 337
// must_end := true ;
10583: LD_ADDR_EXP 7
10587: PUSH
10588: LD_INT 1
10590: ST_TO_ADDR
// end ;
10591: END
// every 0 0$01 trigger time_to_end [ 3 ] < tick do
10592: LD_EXP 5
10596: PUSH
10597: LD_INT 3
10599: ARRAY
10600: PUSH
10601: LD_OWVAR 1
10605: LESS
10606: IFFALSE 10637
10608: GO 10610
10610: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10611: LD_INT 16
10613: PPUSH
10614: CALL_OW 301
10618: NOT
10619: IFFALSE 10630
// YouLost ( TimeOut1 ) else
10621: LD_STRING TimeOut1
10623: PPUSH
10624: CALL_OW 104
10628: GO 10637
// YouLost ( TimeOut2 ) ;
10630: LD_STRING TimeOut2
10632: PPUSH
10633: CALL_OW 104
// end ;
10637: END
// every 0 0$1 trigger IsInArea ( JMM , endArea ) and can_end do var wait_on , i , tmp , m1 , m2 , m3 ;
10638: LD_EXP 9
10642: PPUSH
10643: LD_INT 9
10645: PPUSH
10646: CALL_OW 308
10650: PUSH
10651: LD_EXP 6
10655: AND
10656: IFFALSE 11744
10658: GO 10660
10660: DISABLE
10661: LD_INT 0
10663: PPUSH
10664: PPUSH
10665: PPUSH
10666: PPUSH
10667: PPUSH
10668: PPUSH
// begin wait_on := false ;
10669: LD_ADDR_VAR 0 1
10673: PUSH
10674: LD_INT 0
10676: ST_TO_ADDR
// if Count ( FilterPeople ( 1 ) ) > Count ( FilterPeopleArea ( 1 , endArea ) ^ FilterDriversArea ( 1 , endArea ) ) then
10677: LD_INT 1
10679: PPUSH
10680: CALL 1255 0 1
10684: PPUSH
10685: CALL 34886 0 1
10689: PUSH
10690: LD_INT 1
10692: PPUSH
10693: LD_INT 9
10695: PPUSH
10696: CALL 1346 0 2
10700: PUSH
10701: LD_INT 1
10703: PPUSH
10704: LD_INT 9
10706: PPUSH
10707: CALL 1393 0 2
10711: ADD
10712: PPUSH
10713: CALL 34886 0 1
10717: GREATER
10718: IFFALSE 10741
// if Query ( Q1 ) = 1 then
10720: LD_STRING Q1
10722: PPUSH
10723: CALL_OW 97
10727: PUSH
10728: LD_INT 1
10730: EQUAL
10731: IFFALSE 10741
// wait_on := true ;
10733: LD_ADDR_VAR 0 1
10737: PUSH
10738: LD_INT 1
10740: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
10741: LD_INT 35
10743: PPUSH
10744: CALL_OW 67
// until Count ( FilterPeople ( 1 ) ) = Count ( FilterPeopleArea ( 1 , endArea ) union FilterDriversArea ( 1 , endArea ) ) ;
10748: LD_INT 1
10750: PPUSH
10751: CALL 1255 0 1
10755: PPUSH
10756: CALL 34886 0 1
10760: PUSH
10761: LD_INT 1
10763: PPUSH
10764: LD_INT 9
10766: PPUSH
10767: CALL 1346 0 2
10771: PUSH
10772: LD_INT 1
10774: PPUSH
10775: LD_INT 9
10777: PPUSH
10778: CALL 1393 0 2
10782: UNION
10783: PPUSH
10784: CALL 34886 0 1
10788: EQUAL
10789: IFFALSE 10741
// DialogueOn ;
10791: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
10795: LD_EXP 9
10799: PPUSH
10800: CALL_OW 87
// Say ( JMM , D6-JMM-1 ) ;
10804: LD_EXP 9
10808: PPUSH
10809: LD_STRING D6-JMM-1
10811: PPUSH
10812: CALL_OW 88
// SayRadio ( Harisson , D6-Har-1 ) ;
10816: LD_EXP 19
10820: PPUSH
10821: LD_STRING D6-Har-1
10823: PPUSH
10824: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
10828: LD_EXP 9
10832: PPUSH
10833: LD_STRING D6-JMM-2
10835: PPUSH
10836: CALL_OW 88
// SayRadio ( Harisson , D6-Har-2 ) ;
10840: LD_EXP 19
10844: PPUSH
10845: LD_STRING D6-Har-2
10847: PPUSH
10848: CALL_OW 94
// Say ( JMM , D6-JMM-3 ) ;
10852: LD_EXP 9
10856: PPUSH
10857: LD_STRING D6-JMM-3
10859: PPUSH
10860: CALL_OW 88
// SayRadio ( Harisson , D6-Har-3 ) ;
10864: LD_EXP 19
10868: PPUSH
10869: LD_STRING D6-Har-3
10871: PPUSH
10872: CALL_OW 94
// Say ( JMM , D6-JMM-4 ) ;
10876: LD_EXP 9
10880: PPUSH
10881: LD_STRING D6-JMM-4
10883: PPUSH
10884: CALL_OW 88
// SayRadio ( Harisson , D6-Har-4 ) ;
10888: LD_EXP 19
10892: PPUSH
10893: LD_STRING D6-Har-4
10895: PPUSH
10896: CALL_OW 94
// Say ( JMM , D6-JMM-5 ) ;
10900: LD_EXP 9
10904: PPUSH
10905: LD_STRING D6-JMM-5
10907: PPUSH
10908: CALL_OW 88
// DialogueOff ;
10912: CALL_OW 7
// m1 := false ;
10916: LD_ADDR_VAR 0 4
10920: PUSH
10921: LD_INT 0
10923: ST_TO_ADDR
// m2 := false ;
10924: LD_ADDR_VAR 0 5
10928: PUSH
10929: LD_INT 0
10931: ST_TO_ADDR
// m3 := false ;
10932: LD_ADDR_VAR 0 6
10936: PUSH
10937: LD_INT 0
10939: ST_TO_ADDR
// tmp := FilterBuildings ( 3 ) ;
10940: LD_ADDR_VAR 0 3
10944: PUSH
10945: LD_INT 3
10947: PPUSH
10948: CALL 1524 0 1
10952: ST_TO_ADDR
// if tmp >= 35 then
10953: LD_VAR 0 3
10957: PUSH
10958: LD_INT 35
10960: GREATEREQUAL
10961: IFFALSE 10998
// begin AddMedal ( Destroy1 , - 1 ) ;
10963: LD_STRING Destroy1
10965: PPUSH
10966: LD_INT 1
10968: NEG
10969: PPUSH
10970: CALL_OW 101
// AddMedal ( Destroy2 , - 1 ) ;
10974: LD_STRING Destroy2
10976: PPUSH
10977: LD_INT 1
10979: NEG
10980: PPUSH
10981: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
10985: LD_STRING Destroy3
10987: PPUSH
10988: LD_INT 1
10990: NEG
10991: PPUSH
10992: CALL_OW 101
// end else
10996: GO 11109
// begin AddMedal ( Destroy1 , 1 ) ;
10998: LD_STRING Destroy1
11000: PPUSH
11001: LD_INT 1
11003: PPUSH
11004: CALL_OW 101
// m1 := true ;
11008: LD_ADDR_VAR 0 4
11012: PUSH
11013: LD_INT 1
11015: ST_TO_ADDR
// if tmp >= 25 then
11016: LD_VAR 0 3
11020: PUSH
11021: LD_INT 25
11023: GREATEREQUAL
11024: IFFALSE 11050
// begin AddMedal ( Destroy2 , - 1 ) ;
11026: LD_STRING Destroy2
11028: PPUSH
11029: LD_INT 1
11031: NEG
11032: PPUSH
11033: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
11037: LD_STRING Destroy3
11039: PPUSH
11040: LD_INT 1
11042: NEG
11043: PPUSH
11044: CALL_OW 101
// end else
11048: GO 11109
// begin AddMedal ( Destroy2 , 1 ) ;
11050: LD_STRING Destroy2
11052: PPUSH
11053: LD_INT 1
11055: PPUSH
11056: CALL_OW 101
// m2 := true ;
11060: LD_ADDR_VAR 0 5
11064: PUSH
11065: LD_INT 1
11067: ST_TO_ADDR
// if tmp >= 15 then
11068: LD_VAR 0 3
11072: PUSH
11073: LD_INT 15
11075: GREATEREQUAL
11076: IFFALSE 11091
// AddMedal ( Destroy3 , - 1 ) else
11078: LD_STRING Destroy3
11080: PPUSH
11081: LD_INT 1
11083: NEG
11084: PPUSH
11085: CALL_OW 101
11089: GO 11109
// begin AddMedal ( Destroy3 , 1 ) ;
11091: LD_STRING Destroy3
11093: PPUSH
11094: LD_INT 1
11096: PPUSH
11097: CALL_OW 101
// m3 := true ;
11101: LD_ADDR_VAR 0 6
11105: PUSH
11106: LD_INT 1
11108: ST_TO_ADDR
// end ; end ; end ; if tick <= 32 32$00 then
11109: LD_OWVAR 1
11113: PUSH
11114: LD_INT 67200
11116: LESSEQUAL
11117: IFFALSE 11126
// SetAchievement ( ACH_ASPEED_7 ) ;
11119: LD_STRING ACH_ASPEED_7
11121: PPUSH
11122: CALL_OW 543
// if m1 and m2 and m3 and Difficulty >= 3 then
11126: LD_VAR 0 4
11130: PUSH
11131: LD_VAR 0 5
11135: AND
11136: PUSH
11137: LD_VAR 0 6
11141: AND
11142: PUSH
11143: LD_OWVAR 67
11147: PUSH
11148: LD_INT 3
11150: GREATEREQUAL
11151: AND
11152: IFFALSE 11164
// SetAchievementEX ( ACH_AMER , 7 ) ;
11154: LD_STRING ACH_AMER
11156: PPUSH
11157: LD_INT 7
11159: PPUSH
11160: CALL_OW 564
// GiveMedals ( MAIN ) ;
11164: LD_STRING MAIN
11166: PPUSH
11167: CALL_OW 102
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] ] ) ;
11171: LD_ADDR_VAR 0 3
11175: PUSH
11176: LD_INT 22
11178: PUSH
11179: LD_INT 1
11181: PUSH
11182: EMPTY
11183: LIST
11184: LIST
11185: PUSH
11186: LD_INT 23
11188: PUSH
11189: LD_INT 1
11191: PUSH
11192: EMPTY
11193: LIST
11194: LIST
11195: PUSH
11196: EMPTY
11197: LIST
11198: LIST
11199: PPUSH
11200: CALL_OW 69
11204: ST_TO_ADDR
// RewardPeople ( tmp ) ;
11205: LD_VAR 0 3
11209: PPUSH
11210: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
11214: LD_EXP 9
11218: PPUSH
11219: LD_EXP 3
11223: PUSH
11224: LD_STRING JMM
11226: STR
11227: PPUSH
11228: CALL_OW 38
// if Brown in tmp then
11232: LD_EXP 10
11236: PUSH
11237: LD_VAR 0 3
11241: IN
11242: IFFALSE 11262
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
11244: LD_EXP 10
11248: PPUSH
11249: LD_EXP 3
11253: PUSH
11254: LD_STRING Brown
11256: STR
11257: PPUSH
11258: CALL_OW 38
// if Donaldson in tmp then
11262: LD_EXP 11
11266: PUSH
11267: LD_VAR 0 3
11271: IN
11272: IFFALSE 11292
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
11274: LD_EXP 11
11278: PPUSH
11279: LD_EXP 3
11283: PUSH
11284: LD_STRING Donaldson
11286: STR
11287: PPUSH
11288: CALL_OW 38
// if Bobby in tmp then
11292: LD_EXP 12
11296: PUSH
11297: LD_VAR 0 3
11301: IN
11302: IFFALSE 11322
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
11304: LD_EXP 12
11308: PPUSH
11309: LD_EXP 3
11313: PUSH
11314: LD_STRING Bobby
11316: STR
11317: PPUSH
11318: CALL_OW 38
// if Cyrus in tmp then
11322: LD_EXP 13
11326: PUSH
11327: LD_VAR 0 3
11331: IN
11332: IFFALSE 11352
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
11334: LD_EXP 13
11338: PPUSH
11339: LD_EXP 3
11343: PUSH
11344: LD_STRING Cyrus
11346: STR
11347: PPUSH
11348: CALL_OW 38
// if Lisa in tmp then
11352: LD_EXP 14
11356: PUSH
11357: LD_VAR 0 3
11361: IN
11362: IFFALSE 11382
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
11364: LD_EXP 14
11368: PPUSH
11369: LD_EXP 3
11373: PUSH
11374: LD_STRING Lisa
11376: STR
11377: PPUSH
11378: CALL_OW 38
// if Frank in tmp then
11382: LD_EXP 15
11386: PUSH
11387: LD_VAR 0 3
11391: IN
11392: IFFALSE 11412
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
11394: LD_EXP 15
11398: PPUSH
11399: LD_EXP 3
11403: PUSH
11404: LD_STRING Frank
11406: STR
11407: PPUSH
11408: CALL_OW 38
// if Gladstone in tmp then
11412: LD_EXP 16
11416: PUSH
11417: LD_VAR 0 3
11421: IN
11422: IFFALSE 11442
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
11424: LD_EXP 16
11428: PPUSH
11429: LD_EXP 3
11433: PUSH
11434: LD_STRING Gladstone
11436: STR
11437: PPUSH
11438: CALL_OW 38
// if Khatam in tmp then
11442: LD_EXP 17
11446: PUSH
11447: LD_VAR 0 3
11451: IN
11452: IFFALSE 11472
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
11454: LD_EXP 17
11458: PPUSH
11459: LD_EXP 3
11463: PUSH
11464: LD_STRING Khatam
11466: STR
11467: PPUSH
11468: CALL_OW 38
// if Kikuchi in tmp then
11472: LD_EXP 18
11476: PUSH
11477: LD_VAR 0 3
11481: IN
11482: IFFALSE 11509
// begin ToLua ( enableBioCharacter(BIO_YAMO) ) ;
11484: LD_STRING enableBioCharacter(BIO_YAMO)
11486: PPUSH
11487: CALL_OW 559
// SaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
11491: LD_EXP 18
11495: PPUSH
11496: LD_EXP 3
11500: PUSH
11501: LD_STRING Kikuchi
11503: STR
11504: PPUSH
11505: CALL_OW 38
// end ; SaveCharacters ( tmp diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] , mission_prefix & others ) ;
11509: LD_VAR 0 3
11513: PUSH
11514: LD_EXP 9
11518: PUSH
11519: LD_EXP 10
11523: PUSH
11524: LD_EXP 11
11528: PUSH
11529: LD_EXP 12
11533: PUSH
11534: LD_EXP 13
11538: PUSH
11539: LD_EXP 14
11543: PUSH
11544: LD_EXP 15
11548: PUSH
11549: LD_EXP 16
11553: PUSH
11554: LD_EXP 18
11558: PUSH
11559: LD_EXP 17
11563: PUSH
11564: EMPTY
11565: LIST
11566: LIST
11567: LIST
11568: LIST
11569: LIST
11570: LIST
11571: LIST
11572: LIST
11573: LIST
11574: LIST
11575: DIFF
11576: PPUSH
11577: LD_EXP 3
11581: PUSH
11582: LD_STRING others
11584: STR
11585: PPUSH
11586: CALL_OW 38
// SaveVariable ( tick , 07_time ) ;
11590: LD_OWVAR 1
11594: PPUSH
11595: LD_STRING 07_time
11597: PPUSH
11598: CALL_OW 39
// tmp := [ ] ;
11602: LD_ADDR_VAR 0 3
11606: PUSH
11607: EMPTY
11608: ST_TO_ADDR
// for i in FilterUnitsInArea ( endArea , [ [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] ] ] ) do
11609: LD_ADDR_VAR 0 2
11613: PUSH
11614: LD_INT 9
11616: PPUSH
11617: LD_INT 22
11619: PUSH
11620: LD_INT 1
11622: PUSH
11623: EMPTY
11624: LIST
11625: LIST
11626: PUSH
11627: LD_INT 23
11629: PUSH
11630: LD_INT 1
11632: PUSH
11633: EMPTY
11634: LIST
11635: LIST
11636: PUSH
11637: LD_INT 21
11639: PUSH
11640: LD_INT 2
11642: PUSH
11643: EMPTY
11644: LIST
11645: LIST
11646: PUSH
11647: EMPTY
11648: LIST
11649: LIST
11650: LIST
11651: PUSH
11652: EMPTY
11653: LIST
11654: PPUSH
11655: CALL_OW 70
11659: PUSH
11660: FOR_IN
11661: IFFALSE 11726
// tmp := Join ( tmp , [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ) ;
11663: LD_ADDR_VAR 0 3
11667: PUSH
11668: LD_VAR 0 3
11672: PPUSH
11673: LD_VAR 0 2
11677: PPUSH
11678: CALL_OW 265
11682: PUSH
11683: LD_VAR 0 2
11687: PPUSH
11688: CALL_OW 262
11692: PUSH
11693: LD_VAR 0 2
11697: PPUSH
11698: CALL_OW 263
11702: PUSH
11703: LD_VAR 0 2
11707: PPUSH
11708: CALL_OW 264
11712: PUSH
11713: EMPTY
11714: LIST
11715: LIST
11716: LIST
11717: LIST
11718: PPUSH
11719: CALL 70486 0 2
11723: ST_TO_ADDR
11724: GO 11660
11726: POP
11727: POP
// SaveVariable ( tmp , 07_vehicles ) ;
11728: LD_VAR 0 3
11732: PPUSH
11733: LD_STRING 07_vehicles
11735: PPUSH
11736: CALL_OW 39
// YouWin ;
11740: CALL_OW 103
// end ; end_of_file
11744: PPOPN 6
11746: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
11747: LD_VAR 0 1
11751: PPUSH
11752: CALL 28056 0 1
// if un = JMM then
11756: LD_VAR 0 1
11760: PUSH
11761: LD_EXP 9
11765: EQUAL
11766: IFFALSE 11775
// YouLost ( JMM ) ;
11768: LD_STRING JMM
11770: PPUSH
11771: CALL_OW 104
// if GetType ( un ) = unit_building then
11775: LD_VAR 0 1
11779: PPUSH
11780: CALL_OW 247
11784: PUSH
11785: LD_INT 3
11787: EQUAL
11788: IFFALSE 11804
// buildings_counter := buildings_counter + 1 ;
11790: LD_ADDR_EXP 4
11794: PUSH
11795: LD_EXP 4
11799: PUSH
11800: LD_INT 1
11802: PLUS
11803: ST_TO_ADDR
// if un in FilterUnitsInArea ( baseArea , [ f_or , [ f_btype , b_turret ] , [ f_btype , b_bunker ] ] ) then
11804: LD_VAR 0 1
11808: PUSH
11809: LD_INT 6
11811: PPUSH
11812: LD_INT 2
11814: PUSH
11815: LD_INT 30
11817: PUSH
11818: LD_INT 33
11820: PUSH
11821: EMPTY
11822: LIST
11823: LIST
11824: PUSH
11825: LD_INT 30
11827: PUSH
11828: LD_INT 32
11830: PUSH
11831: EMPTY
11832: LIST
11833: LIST
11834: PUSH
11835: EMPTY
11836: LIST
11837: LIST
11838: LIST
11839: PPUSH
11840: CALL_OW 70
11844: IN
11845: IFFALSE 11904
// ru_rebuild_list := ru_rebuild_list ^ [ GetBType ( un ) , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ;
11847: LD_ADDR_EXP 20
11851: PUSH
11852: LD_EXP 20
11856: PUSH
11857: LD_VAR 0 1
11861: PPUSH
11862: CALL_OW 266
11866: PUSH
11867: LD_VAR 0 1
11871: PPUSH
11872: CALL_OW 250
11876: PUSH
11877: LD_VAR 0 1
11881: PPUSH
11882: CALL_OW 251
11886: PUSH
11887: LD_VAR 0 1
11891: PPUSH
11892: CALL_OW 254
11896: PUSH
11897: EMPTY
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: ADD
11903: ST_TO_ADDR
// if un = ru_dep_main then
11904: LD_VAR 0 1
11908: PUSH
11909: LD_INT 16
11911: EQUAL
11912: IFFALSE 11921
// ChangeMissionObjectives ( M1a ) ;
11914: LD_STRING M1a
11916: PPUSH
11917: CALL_OW 337
// if GetType ( un ) = unit_human and GetSide ( un ) = 3 then
11921: LD_VAR 0 1
11925: PPUSH
11926: CALL_OW 247
11930: PUSH
11931: LD_INT 1
11933: EQUAL
11934: PUSH
11935: LD_VAR 0 1
11939: PPUSH
11940: CALL_OW 255
11944: PUSH
11945: LD_INT 3
11947: EQUAL
11948: AND
11949: IFFALSE 11965
// kill_counter := kill_counter + 1 ;
11951: LD_ADDR_EXP 8
11955: PUSH
11956: LD_EXP 8
11960: PUSH
11961: LD_INT 1
11963: PLUS
11964: ST_TO_ADDR
// end ;
11965: PPOPN 1
11967: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
11968: LD_VAR 0 1
11972: PPUSH
11973: LD_VAR 0 2
11977: PPUSH
11978: CALL 28176 0 2
// end ;
11982: PPOPN 2
11984: END
// on UnitGoesToRed ( un ) do begin if GetBType ( un ) = b_bunker and GetTag ( un ) = 7 then
11985: LD_VAR 0 1
11989: PPUSH
11990: CALL_OW 266
11994: PUSH
11995: LD_INT 32
11997: EQUAL
11998: PUSH
11999: LD_VAR 0 1
12003: PPUSH
12004: CALL_OW 110
12008: PUSH
12009: LD_INT 7
12011: EQUAL
12012: AND
12013: IFFALSE 12027
// SetTag ( un , 0 ) ;
12015: LD_VAR 0 1
12019: PPUSH
12020: LD_INT 0
12022: PPUSH
12023: CALL_OW 109
// end ;
12027: PPOPN 1
12029: END
// on BuildingStarted ( b , builder ) do var i ;
12030: LD_INT 0
12032: PPUSH
// begin if GetSide ( b ) = 3 then
12033: LD_VAR 0 1
12037: PPUSH
12038: CALL_OW 255
12042: PUSH
12043: LD_INT 3
12045: EQUAL
12046: IFFALSE 12086
// for i = 1 to 4 do
12048: LD_ADDR_VAR 0 3
12052: PUSH
12053: DOUBLE
12054: LD_INT 1
12056: DEC
12057: ST_TO_ADDR
12058: LD_INT 4
12060: PUSH
12061: FOR_TO
12062: IFFALSE 12084
// ru_rebuild_list := Delete ( ru_rebuild_list , 1 ) ;
12064: LD_ADDR_EXP 20
12068: PUSH
12069: LD_EXP 20
12073: PPUSH
12074: LD_INT 1
12076: PPUSH
12077: CALL_OW 3
12081: ST_TO_ADDR
12082: GO 12061
12084: POP
12085: POP
// end ;
12086: PPOPN 3
12088: END
// on BuildingComplete ( b ) do if GetBType ( b ) in [ b_bunker , b_turret ] then
12089: LD_VAR 0 1
12093: PPUSH
12094: CALL_OW 266
12098: PUSH
12099: LD_INT 32
12101: PUSH
12102: LD_INT 33
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: IN
12109: IFFALSE 12123
// ComPlaceWeapon ( b , ru_gatling_gun ) ;
12111: LD_VAR 0 1
12115: PPUSH
12116: LD_INT 43
12118: PPUSH
12119: CALL_OW 148
12123: PPOPN 1
12125: END
// on LeaveBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
12126: LD_VAR 0 1
12130: PUSH
12131: LD_INT 22
12133: PUSH
12134: LD_INT 3
12136: PUSH
12137: EMPTY
12138: LIST
12139: LIST
12140: PUSH
12141: LD_INT 2
12143: PUSH
12144: LD_INT 30
12146: PUSH
12147: LD_INT 31
12149: PUSH
12150: EMPTY
12151: LIST
12152: LIST
12153: PUSH
12154: LD_INT 30
12156: PUSH
12157: LD_INT 32
12159: PUSH
12160: EMPTY
12161: LIST
12162: LIST
12163: PUSH
12164: EMPTY
12165: LIST
12166: LIST
12167: LIST
12168: PUSH
12169: EMPTY
12170: LIST
12171: LIST
12172: PPUSH
12173: CALL_OW 69
12177: IN
12178: IFFALSE 12200
// GoToAnotherTower ( un , b , 134 , 136 ) ;
12180: LD_VAR 0 2
12184: PPUSH
12185: LD_VAR 0 1
12189: PPUSH
12190: LD_INT 134
12192: PPUSH
12193: LD_INT 136
12195: PPUSH
12196: CALL 838 0 4
// end ;
12200: PPOPN 2
12202: END
// on EnterBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) then
12203: LD_VAR 0 1
12207: PUSH
12208: LD_INT 22
12210: PUSH
12211: LD_INT 3
12213: PUSH
12214: EMPTY
12215: LIST
12216: LIST
12217: PUSH
12218: LD_INT 30
12220: PUSH
12221: LD_INT 32
12223: PUSH
12224: EMPTY
12225: LIST
12226: LIST
12227: PUSH
12228: EMPTY
12229: LIST
12230: LIST
12231: PPUSH
12232: CALL_OW 69
12236: IN
12237: IFFALSE 12251
// SetTag ( b , 0 ) ;
12239: LD_VAR 0 1
12243: PPUSH
12244: LD_INT 0
12246: PPUSH
12247: CALL_OW 109
// end ; end_of_file end_of_file
12251: PPOPN 2
12253: END
// export globalGameSaveCounter ; every 0 0$1 do
12254: GO 12256
12256: DISABLE
// begin enable ;
12257: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
12258: LD_STRING updateTimer(
12260: PUSH
12261: LD_OWVAR 1
12265: STR
12266: PUSH
12267: LD_STRING );
12269: STR
12270: PPUSH
12271: CALL_OW 559
// end ;
12275: END
// every 0 0$1 do
12276: GO 12278
12278: DISABLE
// begin globalGameSaveCounter := 0 ;
12279: LD_ADDR_EXP 21
12283: PUSH
12284: LD_INT 0
12286: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
12287: LD_STRING setGameSaveCounter(0)
12289: PPUSH
12290: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
12294: LD_STRING initStreamRollete();
12296: PPUSH
12297: CALL_OW 559
// InitStreamMode ;
12301: CALL 13627 0 0
// DefineStreamItems ( false ) ;
12305: LD_INT 0
12307: PPUSH
12308: CALL 14091 0 1
// end ;
12312: END
// export function SOS_MapStart ( ) ; begin
12313: LD_INT 0
12315: PPUSH
// if streamModeActive then
12316: LD_EXP 22
12320: IFFALSE 12329
// DefineStreamItems ( true ) ;
12322: LD_INT 1
12324: PPUSH
12325: CALL 14091 0 1
// UpdateLuaVariables ( ) ;
12329: CALL 12346 0 0
// UpdateFactoryWaypoints ( ) ;
12333: CALL 26960 0 0
// UpdateWarehouseGatheringPoints ( ) ;
12337: CALL 27217 0 0
// end ;
12341: LD_VAR 0 1
12345: RET
// function UpdateLuaVariables ( ) ; begin
12346: LD_INT 0
12348: PPUSH
// if globalGameSaveCounter then
12349: LD_EXP 21
12353: IFFALSE 12387
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
12355: LD_ADDR_EXP 21
12359: PUSH
12360: LD_EXP 21
12364: PPUSH
12365: CALL 71847 0 1
12369: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
12370: LD_STRING setGameSaveCounter(
12372: PUSH
12373: LD_EXP 21
12377: STR
12378: PUSH
12379: LD_STRING )
12381: STR
12382: PPUSH
12383: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
12387: LD_STRING setGameDifficulty(
12389: PUSH
12390: LD_OWVAR 67
12394: STR
12395: PUSH
12396: LD_STRING )
12398: STR
12399: PPUSH
12400: CALL_OW 559
// end ;
12404: LD_VAR 0 1
12408: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
12409: LD_INT 0
12411: PPUSH
// if p2 = stream_mode then
12412: LD_VAR 0 2
12416: PUSH
12417: LD_INT 100
12419: EQUAL
12420: IFFALSE 13423
// begin if not StreamModeActive then
12422: LD_EXP 22
12426: NOT
12427: IFFALSE 12437
// StreamModeActive := true ;
12429: LD_ADDR_EXP 22
12433: PUSH
12434: LD_INT 1
12436: ST_TO_ADDR
// if p3 = 0 then
12437: LD_VAR 0 3
12441: PUSH
12442: LD_INT 0
12444: EQUAL
12445: IFFALSE 12451
// InitStreamMode ;
12447: CALL 13627 0 0
// if p3 = 1 then
12451: LD_VAR 0 3
12455: PUSH
12456: LD_INT 1
12458: EQUAL
12459: IFFALSE 12469
// sRocket := true ;
12461: LD_ADDR_EXP 27
12465: PUSH
12466: LD_INT 1
12468: ST_TO_ADDR
// if p3 = 2 then
12469: LD_VAR 0 3
12473: PUSH
12474: LD_INT 2
12476: EQUAL
12477: IFFALSE 12487
// sSpeed := true ;
12479: LD_ADDR_EXP 26
12483: PUSH
12484: LD_INT 1
12486: ST_TO_ADDR
// if p3 = 3 then
12487: LD_VAR 0 3
12491: PUSH
12492: LD_INT 3
12494: EQUAL
12495: IFFALSE 12505
// sEngine := true ;
12497: LD_ADDR_EXP 28
12501: PUSH
12502: LD_INT 1
12504: ST_TO_ADDR
// if p3 = 4 then
12505: LD_VAR 0 3
12509: PUSH
12510: LD_INT 4
12512: EQUAL
12513: IFFALSE 12523
// sSpec := true ;
12515: LD_ADDR_EXP 25
12519: PUSH
12520: LD_INT 1
12522: ST_TO_ADDR
// if p3 = 5 then
12523: LD_VAR 0 3
12527: PUSH
12528: LD_INT 5
12530: EQUAL
12531: IFFALSE 12541
// sLevel := true ;
12533: LD_ADDR_EXP 29
12537: PUSH
12538: LD_INT 1
12540: ST_TO_ADDR
// if p3 = 6 then
12541: LD_VAR 0 3
12545: PUSH
12546: LD_INT 6
12548: EQUAL
12549: IFFALSE 12559
// sArmoury := true ;
12551: LD_ADDR_EXP 30
12555: PUSH
12556: LD_INT 1
12558: ST_TO_ADDR
// if p3 = 7 then
12559: LD_VAR 0 3
12563: PUSH
12564: LD_INT 7
12566: EQUAL
12567: IFFALSE 12577
// sRadar := true ;
12569: LD_ADDR_EXP 31
12573: PUSH
12574: LD_INT 1
12576: ST_TO_ADDR
// if p3 = 8 then
12577: LD_VAR 0 3
12581: PUSH
12582: LD_INT 8
12584: EQUAL
12585: IFFALSE 12595
// sBunker := true ;
12587: LD_ADDR_EXP 32
12591: PUSH
12592: LD_INT 1
12594: ST_TO_ADDR
// if p3 = 9 then
12595: LD_VAR 0 3
12599: PUSH
12600: LD_INT 9
12602: EQUAL
12603: IFFALSE 12613
// sHack := true ;
12605: LD_ADDR_EXP 33
12609: PUSH
12610: LD_INT 1
12612: ST_TO_ADDR
// if p3 = 10 then
12613: LD_VAR 0 3
12617: PUSH
12618: LD_INT 10
12620: EQUAL
12621: IFFALSE 12631
// sFire := true ;
12623: LD_ADDR_EXP 34
12627: PUSH
12628: LD_INT 1
12630: ST_TO_ADDR
// if p3 = 11 then
12631: LD_VAR 0 3
12635: PUSH
12636: LD_INT 11
12638: EQUAL
12639: IFFALSE 12649
// sRefresh := true ;
12641: LD_ADDR_EXP 35
12645: PUSH
12646: LD_INT 1
12648: ST_TO_ADDR
// if p3 = 12 then
12649: LD_VAR 0 3
12653: PUSH
12654: LD_INT 12
12656: EQUAL
12657: IFFALSE 12667
// sExp := true ;
12659: LD_ADDR_EXP 36
12663: PUSH
12664: LD_INT 1
12666: ST_TO_ADDR
// if p3 = 13 then
12667: LD_VAR 0 3
12671: PUSH
12672: LD_INT 13
12674: EQUAL
12675: IFFALSE 12685
// sDepot := true ;
12677: LD_ADDR_EXP 37
12681: PUSH
12682: LD_INT 1
12684: ST_TO_ADDR
// if p3 = 14 then
12685: LD_VAR 0 3
12689: PUSH
12690: LD_INT 14
12692: EQUAL
12693: IFFALSE 12703
// sFlag := true ;
12695: LD_ADDR_EXP 38
12699: PUSH
12700: LD_INT 1
12702: ST_TO_ADDR
// if p3 = 15 then
12703: LD_VAR 0 3
12707: PUSH
12708: LD_INT 15
12710: EQUAL
12711: IFFALSE 12721
// sKamikadze := true ;
12713: LD_ADDR_EXP 46
12717: PUSH
12718: LD_INT 1
12720: ST_TO_ADDR
// if p3 = 16 then
12721: LD_VAR 0 3
12725: PUSH
12726: LD_INT 16
12728: EQUAL
12729: IFFALSE 12739
// sTroll := true ;
12731: LD_ADDR_EXP 47
12735: PUSH
12736: LD_INT 1
12738: ST_TO_ADDR
// if p3 = 17 then
12739: LD_VAR 0 3
12743: PUSH
12744: LD_INT 17
12746: EQUAL
12747: IFFALSE 12757
// sSlow := true ;
12749: LD_ADDR_EXP 48
12753: PUSH
12754: LD_INT 1
12756: ST_TO_ADDR
// if p3 = 18 then
12757: LD_VAR 0 3
12761: PUSH
12762: LD_INT 18
12764: EQUAL
12765: IFFALSE 12775
// sLack := true ;
12767: LD_ADDR_EXP 49
12771: PUSH
12772: LD_INT 1
12774: ST_TO_ADDR
// if p3 = 19 then
12775: LD_VAR 0 3
12779: PUSH
12780: LD_INT 19
12782: EQUAL
12783: IFFALSE 12793
// sTank := true ;
12785: LD_ADDR_EXP 51
12789: PUSH
12790: LD_INT 1
12792: ST_TO_ADDR
// if p3 = 20 then
12793: LD_VAR 0 3
12797: PUSH
12798: LD_INT 20
12800: EQUAL
12801: IFFALSE 12811
// sRemote := true ;
12803: LD_ADDR_EXP 52
12807: PUSH
12808: LD_INT 1
12810: ST_TO_ADDR
// if p3 = 21 then
12811: LD_VAR 0 3
12815: PUSH
12816: LD_INT 21
12818: EQUAL
12819: IFFALSE 12829
// sPowell := true ;
12821: LD_ADDR_EXP 53
12825: PUSH
12826: LD_INT 1
12828: ST_TO_ADDR
// if p3 = 22 then
12829: LD_VAR 0 3
12833: PUSH
12834: LD_INT 22
12836: EQUAL
12837: IFFALSE 12847
// sTeleport := true ;
12839: LD_ADDR_EXP 56
12843: PUSH
12844: LD_INT 1
12846: ST_TO_ADDR
// if p3 = 23 then
12847: LD_VAR 0 3
12851: PUSH
12852: LD_INT 23
12854: EQUAL
12855: IFFALSE 12865
// sOilTower := true ;
12857: LD_ADDR_EXP 58
12861: PUSH
12862: LD_INT 1
12864: ST_TO_ADDR
// if p3 = 24 then
12865: LD_VAR 0 3
12869: PUSH
12870: LD_INT 24
12872: EQUAL
12873: IFFALSE 12883
// sShovel := true ;
12875: LD_ADDR_EXP 59
12879: PUSH
12880: LD_INT 1
12882: ST_TO_ADDR
// if p3 = 25 then
12883: LD_VAR 0 3
12887: PUSH
12888: LD_INT 25
12890: EQUAL
12891: IFFALSE 12901
// sSheik := true ;
12893: LD_ADDR_EXP 60
12897: PUSH
12898: LD_INT 1
12900: ST_TO_ADDR
// if p3 = 26 then
12901: LD_VAR 0 3
12905: PUSH
12906: LD_INT 26
12908: EQUAL
12909: IFFALSE 12919
// sEarthquake := true ;
12911: LD_ADDR_EXP 62
12915: PUSH
12916: LD_INT 1
12918: ST_TO_ADDR
// if p3 = 27 then
12919: LD_VAR 0 3
12923: PUSH
12924: LD_INT 27
12926: EQUAL
12927: IFFALSE 12937
// sAI := true ;
12929: LD_ADDR_EXP 63
12933: PUSH
12934: LD_INT 1
12936: ST_TO_ADDR
// if p3 = 28 then
12937: LD_VAR 0 3
12941: PUSH
12942: LD_INT 28
12944: EQUAL
12945: IFFALSE 12955
// sCargo := true ;
12947: LD_ADDR_EXP 66
12951: PUSH
12952: LD_INT 1
12954: ST_TO_ADDR
// if p3 = 29 then
12955: LD_VAR 0 3
12959: PUSH
12960: LD_INT 29
12962: EQUAL
12963: IFFALSE 12973
// sDLaser := true ;
12965: LD_ADDR_EXP 67
12969: PUSH
12970: LD_INT 1
12972: ST_TO_ADDR
// if p3 = 30 then
12973: LD_VAR 0 3
12977: PUSH
12978: LD_INT 30
12980: EQUAL
12981: IFFALSE 12991
// sExchange := true ;
12983: LD_ADDR_EXP 68
12987: PUSH
12988: LD_INT 1
12990: ST_TO_ADDR
// if p3 = 31 then
12991: LD_VAR 0 3
12995: PUSH
12996: LD_INT 31
12998: EQUAL
12999: IFFALSE 13009
// sFac := true ;
13001: LD_ADDR_EXP 69
13005: PUSH
13006: LD_INT 1
13008: ST_TO_ADDR
// if p3 = 32 then
13009: LD_VAR 0 3
13013: PUSH
13014: LD_INT 32
13016: EQUAL
13017: IFFALSE 13027
// sPower := true ;
13019: LD_ADDR_EXP 70
13023: PUSH
13024: LD_INT 1
13026: ST_TO_ADDR
// if p3 = 33 then
13027: LD_VAR 0 3
13031: PUSH
13032: LD_INT 33
13034: EQUAL
13035: IFFALSE 13045
// sRandom := true ;
13037: LD_ADDR_EXP 71
13041: PUSH
13042: LD_INT 1
13044: ST_TO_ADDR
// if p3 = 34 then
13045: LD_VAR 0 3
13049: PUSH
13050: LD_INT 34
13052: EQUAL
13053: IFFALSE 13063
// sShield := true ;
13055: LD_ADDR_EXP 72
13059: PUSH
13060: LD_INT 1
13062: ST_TO_ADDR
// if p3 = 35 then
13063: LD_VAR 0 3
13067: PUSH
13068: LD_INT 35
13070: EQUAL
13071: IFFALSE 13081
// sTime := true ;
13073: LD_ADDR_EXP 73
13077: PUSH
13078: LD_INT 1
13080: ST_TO_ADDR
// if p3 = 36 then
13081: LD_VAR 0 3
13085: PUSH
13086: LD_INT 36
13088: EQUAL
13089: IFFALSE 13099
// sTools := true ;
13091: LD_ADDR_EXP 74
13095: PUSH
13096: LD_INT 1
13098: ST_TO_ADDR
// if p3 = 101 then
13099: LD_VAR 0 3
13103: PUSH
13104: LD_INT 101
13106: EQUAL
13107: IFFALSE 13117
// sSold := true ;
13109: LD_ADDR_EXP 39
13113: PUSH
13114: LD_INT 1
13116: ST_TO_ADDR
// if p3 = 102 then
13117: LD_VAR 0 3
13121: PUSH
13122: LD_INT 102
13124: EQUAL
13125: IFFALSE 13135
// sDiff := true ;
13127: LD_ADDR_EXP 40
13131: PUSH
13132: LD_INT 1
13134: ST_TO_ADDR
// if p3 = 103 then
13135: LD_VAR 0 3
13139: PUSH
13140: LD_INT 103
13142: EQUAL
13143: IFFALSE 13153
// sFog := true ;
13145: LD_ADDR_EXP 43
13149: PUSH
13150: LD_INT 1
13152: ST_TO_ADDR
// if p3 = 104 then
13153: LD_VAR 0 3
13157: PUSH
13158: LD_INT 104
13160: EQUAL
13161: IFFALSE 13171
// sReset := true ;
13163: LD_ADDR_EXP 44
13167: PUSH
13168: LD_INT 1
13170: ST_TO_ADDR
// if p3 = 105 then
13171: LD_VAR 0 3
13175: PUSH
13176: LD_INT 105
13178: EQUAL
13179: IFFALSE 13189
// sSun := true ;
13181: LD_ADDR_EXP 45
13185: PUSH
13186: LD_INT 1
13188: ST_TO_ADDR
// if p3 = 106 then
13189: LD_VAR 0 3
13193: PUSH
13194: LD_INT 106
13196: EQUAL
13197: IFFALSE 13207
// sTiger := true ;
13199: LD_ADDR_EXP 41
13203: PUSH
13204: LD_INT 1
13206: ST_TO_ADDR
// if p3 = 107 then
13207: LD_VAR 0 3
13211: PUSH
13212: LD_INT 107
13214: EQUAL
13215: IFFALSE 13225
// sBomb := true ;
13217: LD_ADDR_EXP 42
13221: PUSH
13222: LD_INT 1
13224: ST_TO_ADDR
// if p3 = 108 then
13225: LD_VAR 0 3
13229: PUSH
13230: LD_INT 108
13232: EQUAL
13233: IFFALSE 13243
// sWound := true ;
13235: LD_ADDR_EXP 50
13239: PUSH
13240: LD_INT 1
13242: ST_TO_ADDR
// if p3 = 109 then
13243: LD_VAR 0 3
13247: PUSH
13248: LD_INT 109
13250: EQUAL
13251: IFFALSE 13261
// sBetray := true ;
13253: LD_ADDR_EXP 54
13257: PUSH
13258: LD_INT 1
13260: ST_TO_ADDR
// if p3 = 110 then
13261: LD_VAR 0 3
13265: PUSH
13266: LD_INT 110
13268: EQUAL
13269: IFFALSE 13279
// sContamin := true ;
13271: LD_ADDR_EXP 55
13275: PUSH
13276: LD_INT 1
13278: ST_TO_ADDR
// if p3 = 111 then
13279: LD_VAR 0 3
13283: PUSH
13284: LD_INT 111
13286: EQUAL
13287: IFFALSE 13297
// sOil := true ;
13289: LD_ADDR_EXP 57
13293: PUSH
13294: LD_INT 1
13296: ST_TO_ADDR
// if p3 = 112 then
13297: LD_VAR 0 3
13301: PUSH
13302: LD_INT 112
13304: EQUAL
13305: IFFALSE 13315
// sStu := true ;
13307: LD_ADDR_EXP 61
13311: PUSH
13312: LD_INT 1
13314: ST_TO_ADDR
// if p3 = 113 then
13315: LD_VAR 0 3
13319: PUSH
13320: LD_INT 113
13322: EQUAL
13323: IFFALSE 13333
// sBazooka := true ;
13325: LD_ADDR_EXP 64
13329: PUSH
13330: LD_INT 1
13332: ST_TO_ADDR
// if p3 = 114 then
13333: LD_VAR 0 3
13337: PUSH
13338: LD_INT 114
13340: EQUAL
13341: IFFALSE 13351
// sMortar := true ;
13343: LD_ADDR_EXP 65
13347: PUSH
13348: LD_INT 1
13350: ST_TO_ADDR
// if p3 = 115 then
13351: LD_VAR 0 3
13355: PUSH
13356: LD_INT 115
13358: EQUAL
13359: IFFALSE 13369
// sRanger := true ;
13361: LD_ADDR_EXP 75
13365: PUSH
13366: LD_INT 1
13368: ST_TO_ADDR
// if p3 = 116 then
13369: LD_VAR 0 3
13373: PUSH
13374: LD_INT 116
13376: EQUAL
13377: IFFALSE 13387
// sComputer := true ;
13379: LD_ADDR_EXP 76
13383: PUSH
13384: LD_INT 1
13386: ST_TO_ADDR
// if p3 = 117 then
13387: LD_VAR 0 3
13391: PUSH
13392: LD_INT 117
13394: EQUAL
13395: IFFALSE 13405
// s30 := true ;
13397: LD_ADDR_EXP 77
13401: PUSH
13402: LD_INT 1
13404: ST_TO_ADDR
// if p3 = 118 then
13405: LD_VAR 0 3
13409: PUSH
13410: LD_INT 118
13412: EQUAL
13413: IFFALSE 13423
// s60 := true ;
13415: LD_ADDR_EXP 78
13419: PUSH
13420: LD_INT 1
13422: ST_TO_ADDR
// end ; if p2 = hack_mode then
13423: LD_VAR 0 2
13427: PUSH
13428: LD_INT 101
13430: EQUAL
13431: IFFALSE 13559
// begin case p3 of 1 :
13433: LD_VAR 0 3
13437: PUSH
13438: LD_INT 1
13440: DOUBLE
13441: EQUAL
13442: IFTRUE 13446
13444: GO 13453
13446: POP
// hHackUnlimitedResources ; 2 :
13447: CALL 25706 0 0
13451: GO 13559
13453: LD_INT 2
13455: DOUBLE
13456: EQUAL
13457: IFTRUE 13461
13459: GO 13468
13461: POP
// hHackSetLevel10 ; 3 :
13462: CALL 25839 0 0
13466: GO 13559
13468: LD_INT 3
13470: DOUBLE
13471: EQUAL
13472: IFTRUE 13476
13474: GO 13483
13476: POP
// hHackSetLevel10YourUnits ; 4 :
13477: CALL 25924 0 0
13481: GO 13559
13483: LD_INT 4
13485: DOUBLE
13486: EQUAL
13487: IFTRUE 13491
13489: GO 13498
13491: POP
// hHackInvincible ; 5 :
13492: CALL 26372 0 0
13496: GO 13559
13498: LD_INT 5
13500: DOUBLE
13501: EQUAL
13502: IFTRUE 13506
13504: GO 13513
13506: POP
// hHackInvisible ; 6 :
13507: CALL 26483 0 0
13511: GO 13559
13513: LD_INT 6
13515: DOUBLE
13516: EQUAL
13517: IFTRUE 13521
13519: GO 13528
13521: POP
// hHackChangeYourSide ; 7 :
13522: CALL 26540 0 0
13526: GO 13559
13528: LD_INT 7
13530: DOUBLE
13531: EQUAL
13532: IFTRUE 13536
13534: GO 13543
13536: POP
// hHackChangeUnitSide ; 8 :
13537: CALL 26582 0 0
13541: GO 13559
13543: LD_INT 8
13545: DOUBLE
13546: EQUAL
13547: IFTRUE 13551
13549: GO 13558
13551: POP
// hHackFog ; end ;
13552: CALL 26683 0 0
13556: GO 13559
13558: POP
// end ; if p2 = game_save_mode then
13559: LD_VAR 0 2
13563: PUSH
13564: LD_INT 102
13566: EQUAL
13567: IFFALSE 13622
// begin if p3 = 1 then
13569: LD_VAR 0 3
13573: PUSH
13574: LD_INT 1
13576: EQUAL
13577: IFFALSE 13589
// globalGameSaveCounter := p4 ;
13579: LD_ADDR_EXP 21
13583: PUSH
13584: LD_VAR 0 4
13588: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
13589: LD_VAR 0 3
13593: PUSH
13594: LD_INT 2
13596: EQUAL
13597: PUSH
13598: LD_EXP 21
13602: AND
13603: IFFALSE 13622
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
13605: LD_STRING setGameSaveCounter(
13607: PUSH
13608: LD_EXP 21
13612: STR
13613: PUSH
13614: LD_STRING )
13616: STR
13617: PPUSH
13618: CALL_OW 559
// end ; end ;
13622: LD_VAR 0 7
13626: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
13627: LD_INT 0
13629: PPUSH
// streamModeActive := false ;
13630: LD_ADDR_EXP 22
13634: PUSH
13635: LD_INT 0
13637: ST_TO_ADDR
// normalCounter := 36 ;
13638: LD_ADDR_EXP 23
13642: PUSH
13643: LD_INT 36
13645: ST_TO_ADDR
// hardcoreCounter := 18 ;
13646: LD_ADDR_EXP 24
13650: PUSH
13651: LD_INT 18
13653: ST_TO_ADDR
// sRocket := false ;
13654: LD_ADDR_EXP 27
13658: PUSH
13659: LD_INT 0
13661: ST_TO_ADDR
// sSpeed := false ;
13662: LD_ADDR_EXP 26
13666: PUSH
13667: LD_INT 0
13669: ST_TO_ADDR
// sEngine := false ;
13670: LD_ADDR_EXP 28
13674: PUSH
13675: LD_INT 0
13677: ST_TO_ADDR
// sSpec := false ;
13678: LD_ADDR_EXP 25
13682: PUSH
13683: LD_INT 0
13685: ST_TO_ADDR
// sLevel := false ;
13686: LD_ADDR_EXP 29
13690: PUSH
13691: LD_INT 0
13693: ST_TO_ADDR
// sArmoury := false ;
13694: LD_ADDR_EXP 30
13698: PUSH
13699: LD_INT 0
13701: ST_TO_ADDR
// sRadar := false ;
13702: LD_ADDR_EXP 31
13706: PUSH
13707: LD_INT 0
13709: ST_TO_ADDR
// sBunker := false ;
13710: LD_ADDR_EXP 32
13714: PUSH
13715: LD_INT 0
13717: ST_TO_ADDR
// sHack := false ;
13718: LD_ADDR_EXP 33
13722: PUSH
13723: LD_INT 0
13725: ST_TO_ADDR
// sFire := false ;
13726: LD_ADDR_EXP 34
13730: PUSH
13731: LD_INT 0
13733: ST_TO_ADDR
// sRefresh := false ;
13734: LD_ADDR_EXP 35
13738: PUSH
13739: LD_INT 0
13741: ST_TO_ADDR
// sExp := false ;
13742: LD_ADDR_EXP 36
13746: PUSH
13747: LD_INT 0
13749: ST_TO_ADDR
// sDepot := false ;
13750: LD_ADDR_EXP 37
13754: PUSH
13755: LD_INT 0
13757: ST_TO_ADDR
// sFlag := false ;
13758: LD_ADDR_EXP 38
13762: PUSH
13763: LD_INT 0
13765: ST_TO_ADDR
// sKamikadze := false ;
13766: LD_ADDR_EXP 46
13770: PUSH
13771: LD_INT 0
13773: ST_TO_ADDR
// sTroll := false ;
13774: LD_ADDR_EXP 47
13778: PUSH
13779: LD_INT 0
13781: ST_TO_ADDR
// sSlow := false ;
13782: LD_ADDR_EXP 48
13786: PUSH
13787: LD_INT 0
13789: ST_TO_ADDR
// sLack := false ;
13790: LD_ADDR_EXP 49
13794: PUSH
13795: LD_INT 0
13797: ST_TO_ADDR
// sTank := false ;
13798: LD_ADDR_EXP 51
13802: PUSH
13803: LD_INT 0
13805: ST_TO_ADDR
// sRemote := false ;
13806: LD_ADDR_EXP 52
13810: PUSH
13811: LD_INT 0
13813: ST_TO_ADDR
// sPowell := false ;
13814: LD_ADDR_EXP 53
13818: PUSH
13819: LD_INT 0
13821: ST_TO_ADDR
// sTeleport := false ;
13822: LD_ADDR_EXP 56
13826: PUSH
13827: LD_INT 0
13829: ST_TO_ADDR
// sOilTower := false ;
13830: LD_ADDR_EXP 58
13834: PUSH
13835: LD_INT 0
13837: ST_TO_ADDR
// sShovel := false ;
13838: LD_ADDR_EXP 59
13842: PUSH
13843: LD_INT 0
13845: ST_TO_ADDR
// sSheik := false ;
13846: LD_ADDR_EXP 60
13850: PUSH
13851: LD_INT 0
13853: ST_TO_ADDR
// sEarthquake := false ;
13854: LD_ADDR_EXP 62
13858: PUSH
13859: LD_INT 0
13861: ST_TO_ADDR
// sAI := false ;
13862: LD_ADDR_EXP 63
13866: PUSH
13867: LD_INT 0
13869: ST_TO_ADDR
// sCargo := false ;
13870: LD_ADDR_EXP 66
13874: PUSH
13875: LD_INT 0
13877: ST_TO_ADDR
// sDLaser := false ;
13878: LD_ADDR_EXP 67
13882: PUSH
13883: LD_INT 0
13885: ST_TO_ADDR
// sExchange := false ;
13886: LD_ADDR_EXP 68
13890: PUSH
13891: LD_INT 0
13893: ST_TO_ADDR
// sFac := false ;
13894: LD_ADDR_EXP 69
13898: PUSH
13899: LD_INT 0
13901: ST_TO_ADDR
// sPower := false ;
13902: LD_ADDR_EXP 70
13906: PUSH
13907: LD_INT 0
13909: ST_TO_ADDR
// sRandom := false ;
13910: LD_ADDR_EXP 71
13914: PUSH
13915: LD_INT 0
13917: ST_TO_ADDR
// sShield := false ;
13918: LD_ADDR_EXP 72
13922: PUSH
13923: LD_INT 0
13925: ST_TO_ADDR
// sTime := false ;
13926: LD_ADDR_EXP 73
13930: PUSH
13931: LD_INT 0
13933: ST_TO_ADDR
// sTools := false ;
13934: LD_ADDR_EXP 74
13938: PUSH
13939: LD_INT 0
13941: ST_TO_ADDR
// sSold := false ;
13942: LD_ADDR_EXP 39
13946: PUSH
13947: LD_INT 0
13949: ST_TO_ADDR
// sDiff := false ;
13950: LD_ADDR_EXP 40
13954: PUSH
13955: LD_INT 0
13957: ST_TO_ADDR
// sFog := false ;
13958: LD_ADDR_EXP 43
13962: PUSH
13963: LD_INT 0
13965: ST_TO_ADDR
// sReset := false ;
13966: LD_ADDR_EXP 44
13970: PUSH
13971: LD_INT 0
13973: ST_TO_ADDR
// sSun := false ;
13974: LD_ADDR_EXP 45
13978: PUSH
13979: LD_INT 0
13981: ST_TO_ADDR
// sTiger := false ;
13982: LD_ADDR_EXP 41
13986: PUSH
13987: LD_INT 0
13989: ST_TO_ADDR
// sBomb := false ;
13990: LD_ADDR_EXP 42
13994: PUSH
13995: LD_INT 0
13997: ST_TO_ADDR
// sWound := false ;
13998: LD_ADDR_EXP 50
14002: PUSH
14003: LD_INT 0
14005: ST_TO_ADDR
// sBetray := false ;
14006: LD_ADDR_EXP 54
14010: PUSH
14011: LD_INT 0
14013: ST_TO_ADDR
// sContamin := false ;
14014: LD_ADDR_EXP 55
14018: PUSH
14019: LD_INT 0
14021: ST_TO_ADDR
// sOil := false ;
14022: LD_ADDR_EXP 57
14026: PUSH
14027: LD_INT 0
14029: ST_TO_ADDR
// sStu := false ;
14030: LD_ADDR_EXP 61
14034: PUSH
14035: LD_INT 0
14037: ST_TO_ADDR
// sBazooka := false ;
14038: LD_ADDR_EXP 64
14042: PUSH
14043: LD_INT 0
14045: ST_TO_ADDR
// sMortar := false ;
14046: LD_ADDR_EXP 65
14050: PUSH
14051: LD_INT 0
14053: ST_TO_ADDR
// sRanger := false ;
14054: LD_ADDR_EXP 75
14058: PUSH
14059: LD_INT 0
14061: ST_TO_ADDR
// sComputer := false ;
14062: LD_ADDR_EXP 76
14066: PUSH
14067: LD_INT 0
14069: ST_TO_ADDR
// s30 := false ;
14070: LD_ADDR_EXP 77
14074: PUSH
14075: LD_INT 0
14077: ST_TO_ADDR
// s60 := false ;
14078: LD_ADDR_EXP 78
14082: PUSH
14083: LD_INT 0
14085: ST_TO_ADDR
// end ;
14086: LD_VAR 0 1
14090: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
14091: LD_INT 0
14093: PPUSH
14094: PPUSH
14095: PPUSH
14096: PPUSH
14097: PPUSH
14098: PPUSH
14099: PPUSH
// result := [ ] ;
14100: LD_ADDR_VAR 0 2
14104: PUSH
14105: EMPTY
14106: ST_TO_ADDR
// if campaign_id = 1 then
14107: LD_OWVAR 69
14111: PUSH
14112: LD_INT 1
14114: EQUAL
14115: IFFALSE 17281
// begin case mission_number of 1 :
14117: LD_OWVAR 70
14121: PUSH
14122: LD_INT 1
14124: DOUBLE
14125: EQUAL
14126: IFTRUE 14130
14128: GO 14206
14130: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
14131: LD_ADDR_VAR 0 2
14135: PUSH
14136: LD_INT 2
14138: PUSH
14139: LD_INT 4
14141: PUSH
14142: LD_INT 11
14144: PUSH
14145: LD_INT 12
14147: PUSH
14148: LD_INT 15
14150: PUSH
14151: LD_INT 16
14153: PUSH
14154: LD_INT 22
14156: PUSH
14157: LD_INT 23
14159: PUSH
14160: LD_INT 26
14162: PUSH
14163: EMPTY
14164: LIST
14165: LIST
14166: LIST
14167: LIST
14168: LIST
14169: LIST
14170: LIST
14171: LIST
14172: LIST
14173: PUSH
14174: LD_INT 101
14176: PUSH
14177: LD_INT 102
14179: PUSH
14180: LD_INT 106
14182: PUSH
14183: LD_INT 116
14185: PUSH
14186: LD_INT 117
14188: PUSH
14189: LD_INT 118
14191: PUSH
14192: EMPTY
14193: LIST
14194: LIST
14195: LIST
14196: LIST
14197: LIST
14198: LIST
14199: PUSH
14200: EMPTY
14201: LIST
14202: LIST
14203: ST_TO_ADDR
14204: GO 17279
14206: LD_INT 2
14208: DOUBLE
14209: EQUAL
14210: IFTRUE 14214
14212: GO 14298
14214: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
14215: LD_ADDR_VAR 0 2
14219: PUSH
14220: LD_INT 2
14222: PUSH
14223: LD_INT 4
14225: PUSH
14226: LD_INT 11
14228: PUSH
14229: LD_INT 12
14231: PUSH
14232: LD_INT 15
14234: PUSH
14235: LD_INT 16
14237: PUSH
14238: LD_INT 22
14240: PUSH
14241: LD_INT 23
14243: PUSH
14244: LD_INT 26
14246: PUSH
14247: EMPTY
14248: LIST
14249: LIST
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: PUSH
14258: LD_INT 101
14260: PUSH
14261: LD_INT 102
14263: PUSH
14264: LD_INT 105
14266: PUSH
14267: LD_INT 106
14269: PUSH
14270: LD_INT 108
14272: PUSH
14273: LD_INT 116
14275: PUSH
14276: LD_INT 117
14278: PUSH
14279: LD_INT 118
14281: PUSH
14282: EMPTY
14283: LIST
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: LIST
14291: PUSH
14292: EMPTY
14293: LIST
14294: LIST
14295: ST_TO_ADDR
14296: GO 17279
14298: LD_INT 3
14300: DOUBLE
14301: EQUAL
14302: IFTRUE 14306
14304: GO 14394
14306: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
14307: LD_ADDR_VAR 0 2
14311: PUSH
14312: LD_INT 2
14314: PUSH
14315: LD_INT 4
14317: PUSH
14318: LD_INT 5
14320: PUSH
14321: LD_INT 11
14323: PUSH
14324: LD_INT 12
14326: PUSH
14327: LD_INT 15
14329: PUSH
14330: LD_INT 16
14332: PUSH
14333: LD_INT 22
14335: PUSH
14336: LD_INT 26
14338: PUSH
14339: LD_INT 36
14341: PUSH
14342: EMPTY
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: PUSH
14354: LD_INT 101
14356: PUSH
14357: LD_INT 102
14359: PUSH
14360: LD_INT 105
14362: PUSH
14363: LD_INT 106
14365: PUSH
14366: LD_INT 108
14368: PUSH
14369: LD_INT 116
14371: PUSH
14372: LD_INT 117
14374: PUSH
14375: LD_INT 118
14377: PUSH
14378: EMPTY
14379: LIST
14380: LIST
14381: LIST
14382: LIST
14383: LIST
14384: LIST
14385: LIST
14386: LIST
14387: PUSH
14388: EMPTY
14389: LIST
14390: LIST
14391: ST_TO_ADDR
14392: GO 17279
14394: LD_INT 4
14396: DOUBLE
14397: EQUAL
14398: IFTRUE 14402
14400: GO 14498
14402: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
14403: LD_ADDR_VAR 0 2
14407: PUSH
14408: LD_INT 2
14410: PUSH
14411: LD_INT 4
14413: PUSH
14414: LD_INT 5
14416: PUSH
14417: LD_INT 8
14419: PUSH
14420: LD_INT 11
14422: PUSH
14423: LD_INT 12
14425: PUSH
14426: LD_INT 15
14428: PUSH
14429: LD_INT 16
14431: PUSH
14432: LD_INT 22
14434: PUSH
14435: LD_INT 23
14437: PUSH
14438: LD_INT 26
14440: PUSH
14441: LD_INT 36
14443: PUSH
14444: EMPTY
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: PUSH
14458: LD_INT 101
14460: PUSH
14461: LD_INT 102
14463: PUSH
14464: LD_INT 105
14466: PUSH
14467: LD_INT 106
14469: PUSH
14470: LD_INT 108
14472: PUSH
14473: LD_INT 116
14475: PUSH
14476: LD_INT 117
14478: PUSH
14479: LD_INT 118
14481: PUSH
14482: EMPTY
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: PUSH
14492: EMPTY
14493: LIST
14494: LIST
14495: ST_TO_ADDR
14496: GO 17279
14498: LD_INT 5
14500: DOUBLE
14501: EQUAL
14502: IFTRUE 14506
14504: GO 14618
14506: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
14507: LD_ADDR_VAR 0 2
14511: PUSH
14512: LD_INT 2
14514: PUSH
14515: LD_INT 4
14517: PUSH
14518: LD_INT 5
14520: PUSH
14521: LD_INT 6
14523: PUSH
14524: LD_INT 8
14526: PUSH
14527: LD_INT 11
14529: PUSH
14530: LD_INT 12
14532: PUSH
14533: LD_INT 15
14535: PUSH
14536: LD_INT 16
14538: PUSH
14539: LD_INT 22
14541: PUSH
14542: LD_INT 23
14544: PUSH
14545: LD_INT 25
14547: PUSH
14548: LD_INT 26
14550: PUSH
14551: LD_INT 36
14553: PUSH
14554: EMPTY
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: LIST
14562: LIST
14563: LIST
14564: LIST
14565: LIST
14566: LIST
14567: LIST
14568: LIST
14569: PUSH
14570: LD_INT 101
14572: PUSH
14573: LD_INT 102
14575: PUSH
14576: LD_INT 105
14578: PUSH
14579: LD_INT 106
14581: PUSH
14582: LD_INT 108
14584: PUSH
14585: LD_INT 109
14587: PUSH
14588: LD_INT 112
14590: PUSH
14591: LD_INT 116
14593: PUSH
14594: LD_INT 117
14596: PUSH
14597: LD_INT 118
14599: PUSH
14600: EMPTY
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: LIST
14606: LIST
14607: LIST
14608: LIST
14609: LIST
14610: LIST
14611: PUSH
14612: EMPTY
14613: LIST
14614: LIST
14615: ST_TO_ADDR
14616: GO 17279
14618: LD_INT 6
14620: DOUBLE
14621: EQUAL
14622: IFTRUE 14626
14624: GO 14758
14626: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
14627: LD_ADDR_VAR 0 2
14631: PUSH
14632: LD_INT 2
14634: PUSH
14635: LD_INT 4
14637: PUSH
14638: LD_INT 5
14640: PUSH
14641: LD_INT 6
14643: PUSH
14644: LD_INT 8
14646: PUSH
14647: LD_INT 11
14649: PUSH
14650: LD_INT 12
14652: PUSH
14653: LD_INT 15
14655: PUSH
14656: LD_INT 16
14658: PUSH
14659: LD_INT 20
14661: PUSH
14662: LD_INT 21
14664: PUSH
14665: LD_INT 22
14667: PUSH
14668: LD_INT 23
14670: PUSH
14671: LD_INT 25
14673: PUSH
14674: LD_INT 26
14676: PUSH
14677: LD_INT 30
14679: PUSH
14680: LD_INT 31
14682: PUSH
14683: LD_INT 32
14685: PUSH
14686: LD_INT 36
14688: PUSH
14689: EMPTY
14690: LIST
14691: LIST
14692: LIST
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: PUSH
14710: LD_INT 101
14712: PUSH
14713: LD_INT 102
14715: PUSH
14716: LD_INT 105
14718: PUSH
14719: LD_INT 106
14721: PUSH
14722: LD_INT 108
14724: PUSH
14725: LD_INT 109
14727: PUSH
14728: LD_INT 112
14730: PUSH
14731: LD_INT 116
14733: PUSH
14734: LD_INT 117
14736: PUSH
14737: LD_INT 118
14739: PUSH
14740: EMPTY
14741: LIST
14742: LIST
14743: LIST
14744: LIST
14745: LIST
14746: LIST
14747: LIST
14748: LIST
14749: LIST
14750: LIST
14751: PUSH
14752: EMPTY
14753: LIST
14754: LIST
14755: ST_TO_ADDR
14756: GO 17279
14758: LD_INT 7
14760: DOUBLE
14761: EQUAL
14762: IFTRUE 14766
14764: GO 14878
14766: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
14767: LD_ADDR_VAR 0 2
14771: PUSH
14772: LD_INT 2
14774: PUSH
14775: LD_INT 4
14777: PUSH
14778: LD_INT 5
14780: PUSH
14781: LD_INT 7
14783: PUSH
14784: LD_INT 11
14786: PUSH
14787: LD_INT 12
14789: PUSH
14790: LD_INT 15
14792: PUSH
14793: LD_INT 16
14795: PUSH
14796: LD_INT 20
14798: PUSH
14799: LD_INT 21
14801: PUSH
14802: LD_INT 22
14804: PUSH
14805: LD_INT 23
14807: PUSH
14808: LD_INT 25
14810: PUSH
14811: LD_INT 26
14813: PUSH
14814: EMPTY
14815: LIST
14816: LIST
14817: LIST
14818: LIST
14819: LIST
14820: LIST
14821: LIST
14822: LIST
14823: LIST
14824: LIST
14825: LIST
14826: LIST
14827: LIST
14828: LIST
14829: PUSH
14830: LD_INT 101
14832: PUSH
14833: LD_INT 102
14835: PUSH
14836: LD_INT 103
14838: PUSH
14839: LD_INT 105
14841: PUSH
14842: LD_INT 106
14844: PUSH
14845: LD_INT 108
14847: PUSH
14848: LD_INT 112
14850: PUSH
14851: LD_INT 116
14853: PUSH
14854: LD_INT 117
14856: PUSH
14857: LD_INT 118
14859: PUSH
14860: EMPTY
14861: LIST
14862: LIST
14863: LIST
14864: LIST
14865: LIST
14866: LIST
14867: LIST
14868: LIST
14869: LIST
14870: LIST
14871: PUSH
14872: EMPTY
14873: LIST
14874: LIST
14875: ST_TO_ADDR
14876: GO 17279
14878: LD_INT 8
14880: DOUBLE
14881: EQUAL
14882: IFTRUE 14886
14884: GO 15026
14886: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
14887: LD_ADDR_VAR 0 2
14891: PUSH
14892: LD_INT 2
14894: PUSH
14895: LD_INT 4
14897: PUSH
14898: LD_INT 5
14900: PUSH
14901: LD_INT 6
14903: PUSH
14904: LD_INT 7
14906: PUSH
14907: LD_INT 8
14909: PUSH
14910: LD_INT 11
14912: PUSH
14913: LD_INT 12
14915: PUSH
14916: LD_INT 15
14918: PUSH
14919: LD_INT 16
14921: PUSH
14922: LD_INT 20
14924: PUSH
14925: LD_INT 21
14927: PUSH
14928: LD_INT 22
14930: PUSH
14931: LD_INT 23
14933: PUSH
14934: LD_INT 25
14936: PUSH
14937: LD_INT 26
14939: PUSH
14940: LD_INT 30
14942: PUSH
14943: LD_INT 31
14945: PUSH
14946: LD_INT 32
14948: PUSH
14949: LD_INT 36
14951: PUSH
14952: EMPTY
14953: LIST
14954: LIST
14955: LIST
14956: LIST
14957: LIST
14958: LIST
14959: LIST
14960: LIST
14961: LIST
14962: LIST
14963: LIST
14964: LIST
14965: LIST
14966: LIST
14967: LIST
14968: LIST
14969: LIST
14970: LIST
14971: LIST
14972: LIST
14973: PUSH
14974: LD_INT 101
14976: PUSH
14977: LD_INT 102
14979: PUSH
14980: LD_INT 103
14982: PUSH
14983: LD_INT 105
14985: PUSH
14986: LD_INT 106
14988: PUSH
14989: LD_INT 108
14991: PUSH
14992: LD_INT 109
14994: PUSH
14995: LD_INT 112
14997: PUSH
14998: LD_INT 116
15000: PUSH
15001: LD_INT 117
15003: PUSH
15004: LD_INT 118
15006: PUSH
15007: EMPTY
15008: LIST
15009: LIST
15010: LIST
15011: LIST
15012: LIST
15013: LIST
15014: LIST
15015: LIST
15016: LIST
15017: LIST
15018: LIST
15019: PUSH
15020: EMPTY
15021: LIST
15022: LIST
15023: ST_TO_ADDR
15024: GO 17279
15026: LD_INT 9
15028: DOUBLE
15029: EQUAL
15030: IFTRUE 15034
15032: GO 15182
15034: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
15035: LD_ADDR_VAR 0 2
15039: PUSH
15040: LD_INT 2
15042: PUSH
15043: LD_INT 4
15045: PUSH
15046: LD_INT 5
15048: PUSH
15049: LD_INT 6
15051: PUSH
15052: LD_INT 7
15054: PUSH
15055: LD_INT 8
15057: PUSH
15058: LD_INT 11
15060: PUSH
15061: LD_INT 12
15063: PUSH
15064: LD_INT 15
15066: PUSH
15067: LD_INT 16
15069: PUSH
15070: LD_INT 20
15072: PUSH
15073: LD_INT 21
15075: PUSH
15076: LD_INT 22
15078: PUSH
15079: LD_INT 23
15081: PUSH
15082: LD_INT 25
15084: PUSH
15085: LD_INT 26
15087: PUSH
15088: LD_INT 28
15090: PUSH
15091: LD_INT 30
15093: PUSH
15094: LD_INT 31
15096: PUSH
15097: LD_INT 32
15099: PUSH
15100: LD_INT 36
15102: PUSH
15103: EMPTY
15104: LIST
15105: LIST
15106: LIST
15107: LIST
15108: LIST
15109: LIST
15110: LIST
15111: LIST
15112: LIST
15113: LIST
15114: LIST
15115: LIST
15116: LIST
15117: LIST
15118: LIST
15119: LIST
15120: LIST
15121: LIST
15122: LIST
15123: LIST
15124: LIST
15125: PUSH
15126: LD_INT 101
15128: PUSH
15129: LD_INT 102
15131: PUSH
15132: LD_INT 103
15134: PUSH
15135: LD_INT 105
15137: PUSH
15138: LD_INT 106
15140: PUSH
15141: LD_INT 108
15143: PUSH
15144: LD_INT 109
15146: PUSH
15147: LD_INT 112
15149: PUSH
15150: LD_INT 114
15152: PUSH
15153: LD_INT 116
15155: PUSH
15156: LD_INT 117
15158: PUSH
15159: LD_INT 118
15161: PUSH
15162: EMPTY
15163: LIST
15164: LIST
15165: LIST
15166: LIST
15167: LIST
15168: LIST
15169: LIST
15170: LIST
15171: LIST
15172: LIST
15173: LIST
15174: LIST
15175: PUSH
15176: EMPTY
15177: LIST
15178: LIST
15179: ST_TO_ADDR
15180: GO 17279
15182: LD_INT 10
15184: DOUBLE
15185: EQUAL
15186: IFTRUE 15190
15188: GO 15386
15190: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
15191: LD_ADDR_VAR 0 2
15195: PUSH
15196: LD_INT 2
15198: PUSH
15199: LD_INT 4
15201: PUSH
15202: LD_INT 5
15204: PUSH
15205: LD_INT 6
15207: PUSH
15208: LD_INT 7
15210: PUSH
15211: LD_INT 8
15213: PUSH
15214: LD_INT 9
15216: PUSH
15217: LD_INT 10
15219: PUSH
15220: LD_INT 11
15222: PUSH
15223: LD_INT 12
15225: PUSH
15226: LD_INT 13
15228: PUSH
15229: LD_INT 14
15231: PUSH
15232: LD_INT 15
15234: PUSH
15235: LD_INT 16
15237: PUSH
15238: LD_INT 17
15240: PUSH
15241: LD_INT 18
15243: PUSH
15244: LD_INT 19
15246: PUSH
15247: LD_INT 20
15249: PUSH
15250: LD_INT 21
15252: PUSH
15253: LD_INT 22
15255: PUSH
15256: LD_INT 23
15258: PUSH
15259: LD_INT 24
15261: PUSH
15262: LD_INT 25
15264: PUSH
15265: LD_INT 26
15267: PUSH
15268: LD_INT 28
15270: PUSH
15271: LD_INT 30
15273: PUSH
15274: LD_INT 31
15276: PUSH
15277: LD_INT 32
15279: PUSH
15280: LD_INT 36
15282: PUSH
15283: EMPTY
15284: LIST
15285: LIST
15286: LIST
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: LIST
15298: LIST
15299: LIST
15300: LIST
15301: LIST
15302: LIST
15303: LIST
15304: LIST
15305: LIST
15306: LIST
15307: LIST
15308: LIST
15309: LIST
15310: LIST
15311: LIST
15312: LIST
15313: PUSH
15314: LD_INT 101
15316: PUSH
15317: LD_INT 102
15319: PUSH
15320: LD_INT 103
15322: PUSH
15323: LD_INT 104
15325: PUSH
15326: LD_INT 105
15328: PUSH
15329: LD_INT 106
15331: PUSH
15332: LD_INT 107
15334: PUSH
15335: LD_INT 108
15337: PUSH
15338: LD_INT 109
15340: PUSH
15341: LD_INT 110
15343: PUSH
15344: LD_INT 111
15346: PUSH
15347: LD_INT 112
15349: PUSH
15350: LD_INT 114
15352: PUSH
15353: LD_INT 116
15355: PUSH
15356: LD_INT 117
15358: PUSH
15359: LD_INT 118
15361: PUSH
15362: EMPTY
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: LIST
15376: LIST
15377: LIST
15378: LIST
15379: PUSH
15380: EMPTY
15381: LIST
15382: LIST
15383: ST_TO_ADDR
15384: GO 17279
15386: LD_INT 11
15388: DOUBLE
15389: EQUAL
15390: IFTRUE 15394
15392: GO 15598
15394: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
15395: LD_ADDR_VAR 0 2
15399: PUSH
15400: LD_INT 2
15402: PUSH
15403: LD_INT 3
15405: PUSH
15406: LD_INT 4
15408: PUSH
15409: LD_INT 5
15411: PUSH
15412: LD_INT 6
15414: PUSH
15415: LD_INT 7
15417: PUSH
15418: LD_INT 8
15420: PUSH
15421: LD_INT 9
15423: PUSH
15424: LD_INT 10
15426: PUSH
15427: LD_INT 11
15429: PUSH
15430: LD_INT 12
15432: PUSH
15433: LD_INT 13
15435: PUSH
15436: LD_INT 14
15438: PUSH
15439: LD_INT 15
15441: PUSH
15442: LD_INT 16
15444: PUSH
15445: LD_INT 17
15447: PUSH
15448: LD_INT 18
15450: PUSH
15451: LD_INT 19
15453: PUSH
15454: LD_INT 20
15456: PUSH
15457: LD_INT 21
15459: PUSH
15460: LD_INT 22
15462: PUSH
15463: LD_INT 23
15465: PUSH
15466: LD_INT 24
15468: PUSH
15469: LD_INT 25
15471: PUSH
15472: LD_INT 26
15474: PUSH
15475: LD_INT 28
15477: PUSH
15478: LD_INT 30
15480: PUSH
15481: LD_INT 31
15483: PUSH
15484: LD_INT 32
15486: PUSH
15487: LD_INT 34
15489: PUSH
15490: LD_INT 36
15492: PUSH
15493: EMPTY
15494: LIST
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: LIST
15502: LIST
15503: LIST
15504: LIST
15505: LIST
15506: LIST
15507: LIST
15508: LIST
15509: LIST
15510: LIST
15511: LIST
15512: LIST
15513: LIST
15514: LIST
15515: LIST
15516: LIST
15517: LIST
15518: LIST
15519: LIST
15520: LIST
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: PUSH
15526: LD_INT 101
15528: PUSH
15529: LD_INT 102
15531: PUSH
15532: LD_INT 103
15534: PUSH
15535: LD_INT 104
15537: PUSH
15538: LD_INT 105
15540: PUSH
15541: LD_INT 106
15543: PUSH
15544: LD_INT 107
15546: PUSH
15547: LD_INT 108
15549: PUSH
15550: LD_INT 109
15552: PUSH
15553: LD_INT 110
15555: PUSH
15556: LD_INT 111
15558: PUSH
15559: LD_INT 112
15561: PUSH
15562: LD_INT 114
15564: PUSH
15565: LD_INT 116
15567: PUSH
15568: LD_INT 117
15570: PUSH
15571: LD_INT 118
15573: PUSH
15574: EMPTY
15575: LIST
15576: LIST
15577: LIST
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: LIST
15588: LIST
15589: LIST
15590: LIST
15591: PUSH
15592: EMPTY
15593: LIST
15594: LIST
15595: ST_TO_ADDR
15596: GO 17279
15598: LD_INT 12
15600: DOUBLE
15601: EQUAL
15602: IFTRUE 15606
15604: GO 15826
15606: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
15607: LD_ADDR_VAR 0 2
15611: PUSH
15612: LD_INT 1
15614: PUSH
15615: LD_INT 2
15617: PUSH
15618: LD_INT 3
15620: PUSH
15621: LD_INT 4
15623: PUSH
15624: LD_INT 5
15626: PUSH
15627: LD_INT 6
15629: PUSH
15630: LD_INT 7
15632: PUSH
15633: LD_INT 8
15635: PUSH
15636: LD_INT 9
15638: PUSH
15639: LD_INT 10
15641: PUSH
15642: LD_INT 11
15644: PUSH
15645: LD_INT 12
15647: PUSH
15648: LD_INT 13
15650: PUSH
15651: LD_INT 14
15653: PUSH
15654: LD_INT 15
15656: PUSH
15657: LD_INT 16
15659: PUSH
15660: LD_INT 17
15662: PUSH
15663: LD_INT 18
15665: PUSH
15666: LD_INT 19
15668: PUSH
15669: LD_INT 20
15671: PUSH
15672: LD_INT 21
15674: PUSH
15675: LD_INT 22
15677: PUSH
15678: LD_INT 23
15680: PUSH
15681: LD_INT 24
15683: PUSH
15684: LD_INT 25
15686: PUSH
15687: LD_INT 26
15689: PUSH
15690: LD_INT 27
15692: PUSH
15693: LD_INT 28
15695: PUSH
15696: LD_INT 30
15698: PUSH
15699: LD_INT 31
15701: PUSH
15702: LD_INT 32
15704: PUSH
15705: LD_INT 33
15707: PUSH
15708: LD_INT 34
15710: PUSH
15711: LD_INT 36
15713: PUSH
15714: EMPTY
15715: LIST
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: PUSH
15750: LD_INT 101
15752: PUSH
15753: LD_INT 102
15755: PUSH
15756: LD_INT 103
15758: PUSH
15759: LD_INT 104
15761: PUSH
15762: LD_INT 105
15764: PUSH
15765: LD_INT 106
15767: PUSH
15768: LD_INT 107
15770: PUSH
15771: LD_INT 108
15773: PUSH
15774: LD_INT 109
15776: PUSH
15777: LD_INT 110
15779: PUSH
15780: LD_INT 111
15782: PUSH
15783: LD_INT 112
15785: PUSH
15786: LD_INT 113
15788: PUSH
15789: LD_INT 114
15791: PUSH
15792: LD_INT 116
15794: PUSH
15795: LD_INT 117
15797: PUSH
15798: LD_INT 118
15800: PUSH
15801: EMPTY
15802: LIST
15803: LIST
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: LIST
15809: LIST
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: LIST
15815: LIST
15816: LIST
15817: LIST
15818: LIST
15819: PUSH
15820: EMPTY
15821: LIST
15822: LIST
15823: ST_TO_ADDR
15824: GO 17279
15826: LD_INT 13
15828: DOUBLE
15829: EQUAL
15830: IFTRUE 15834
15832: GO 16042
15834: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
15835: LD_ADDR_VAR 0 2
15839: PUSH
15840: LD_INT 1
15842: PUSH
15843: LD_INT 2
15845: PUSH
15846: LD_INT 3
15848: PUSH
15849: LD_INT 4
15851: PUSH
15852: LD_INT 5
15854: PUSH
15855: LD_INT 8
15857: PUSH
15858: LD_INT 9
15860: PUSH
15861: LD_INT 10
15863: PUSH
15864: LD_INT 11
15866: PUSH
15867: LD_INT 12
15869: PUSH
15870: LD_INT 14
15872: PUSH
15873: LD_INT 15
15875: PUSH
15876: LD_INT 16
15878: PUSH
15879: LD_INT 17
15881: PUSH
15882: LD_INT 18
15884: PUSH
15885: LD_INT 19
15887: PUSH
15888: LD_INT 20
15890: PUSH
15891: LD_INT 21
15893: PUSH
15894: LD_INT 22
15896: PUSH
15897: LD_INT 23
15899: PUSH
15900: LD_INT 24
15902: PUSH
15903: LD_INT 25
15905: PUSH
15906: LD_INT 26
15908: PUSH
15909: LD_INT 27
15911: PUSH
15912: LD_INT 28
15914: PUSH
15915: LD_INT 30
15917: PUSH
15918: LD_INT 31
15920: PUSH
15921: LD_INT 32
15923: PUSH
15924: LD_INT 33
15926: PUSH
15927: LD_INT 34
15929: PUSH
15930: LD_INT 36
15932: PUSH
15933: EMPTY
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: LIST
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: PUSH
15966: LD_INT 101
15968: PUSH
15969: LD_INT 102
15971: PUSH
15972: LD_INT 103
15974: PUSH
15975: LD_INT 104
15977: PUSH
15978: LD_INT 105
15980: PUSH
15981: LD_INT 106
15983: PUSH
15984: LD_INT 107
15986: PUSH
15987: LD_INT 108
15989: PUSH
15990: LD_INT 109
15992: PUSH
15993: LD_INT 110
15995: PUSH
15996: LD_INT 111
15998: PUSH
15999: LD_INT 112
16001: PUSH
16002: LD_INT 113
16004: PUSH
16005: LD_INT 114
16007: PUSH
16008: LD_INT 116
16010: PUSH
16011: LD_INT 117
16013: PUSH
16014: LD_INT 118
16016: PUSH
16017: EMPTY
16018: LIST
16019: LIST
16020: LIST
16021: LIST
16022: LIST
16023: LIST
16024: LIST
16025: LIST
16026: LIST
16027: LIST
16028: LIST
16029: LIST
16030: LIST
16031: LIST
16032: LIST
16033: LIST
16034: LIST
16035: PUSH
16036: EMPTY
16037: LIST
16038: LIST
16039: ST_TO_ADDR
16040: GO 17279
16042: LD_INT 14
16044: DOUBLE
16045: EQUAL
16046: IFTRUE 16050
16048: GO 16274
16050: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
16051: LD_ADDR_VAR 0 2
16055: PUSH
16056: LD_INT 1
16058: PUSH
16059: LD_INT 2
16061: PUSH
16062: LD_INT 3
16064: PUSH
16065: LD_INT 4
16067: PUSH
16068: LD_INT 5
16070: PUSH
16071: LD_INT 6
16073: PUSH
16074: LD_INT 7
16076: PUSH
16077: LD_INT 8
16079: PUSH
16080: LD_INT 9
16082: PUSH
16083: LD_INT 10
16085: PUSH
16086: LD_INT 11
16088: PUSH
16089: LD_INT 12
16091: PUSH
16092: LD_INT 13
16094: PUSH
16095: LD_INT 14
16097: PUSH
16098: LD_INT 15
16100: PUSH
16101: LD_INT 16
16103: PUSH
16104: LD_INT 17
16106: PUSH
16107: LD_INT 18
16109: PUSH
16110: LD_INT 19
16112: PUSH
16113: LD_INT 20
16115: PUSH
16116: LD_INT 21
16118: PUSH
16119: LD_INT 22
16121: PUSH
16122: LD_INT 23
16124: PUSH
16125: LD_INT 24
16127: PUSH
16128: LD_INT 25
16130: PUSH
16131: LD_INT 26
16133: PUSH
16134: LD_INT 27
16136: PUSH
16137: LD_INT 28
16139: PUSH
16140: LD_INT 29
16142: PUSH
16143: LD_INT 30
16145: PUSH
16146: LD_INT 31
16148: PUSH
16149: LD_INT 32
16151: PUSH
16152: LD_INT 33
16154: PUSH
16155: LD_INT 34
16157: PUSH
16158: LD_INT 36
16160: PUSH
16161: EMPTY
16162: LIST
16163: LIST
16164: LIST
16165: LIST
16166: LIST
16167: LIST
16168: LIST
16169: LIST
16170: LIST
16171: LIST
16172: LIST
16173: LIST
16174: LIST
16175: LIST
16176: LIST
16177: LIST
16178: LIST
16179: LIST
16180: LIST
16181: LIST
16182: LIST
16183: LIST
16184: LIST
16185: LIST
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: LIST
16191: LIST
16192: LIST
16193: LIST
16194: LIST
16195: LIST
16196: LIST
16197: PUSH
16198: LD_INT 101
16200: PUSH
16201: LD_INT 102
16203: PUSH
16204: LD_INT 103
16206: PUSH
16207: LD_INT 104
16209: PUSH
16210: LD_INT 105
16212: PUSH
16213: LD_INT 106
16215: PUSH
16216: LD_INT 107
16218: PUSH
16219: LD_INT 108
16221: PUSH
16222: LD_INT 109
16224: PUSH
16225: LD_INT 110
16227: PUSH
16228: LD_INT 111
16230: PUSH
16231: LD_INT 112
16233: PUSH
16234: LD_INT 113
16236: PUSH
16237: LD_INT 114
16239: PUSH
16240: LD_INT 116
16242: PUSH
16243: LD_INT 117
16245: PUSH
16246: LD_INT 118
16248: PUSH
16249: EMPTY
16250: LIST
16251: LIST
16252: LIST
16253: LIST
16254: LIST
16255: LIST
16256: LIST
16257: LIST
16258: LIST
16259: LIST
16260: LIST
16261: LIST
16262: LIST
16263: LIST
16264: LIST
16265: LIST
16266: LIST
16267: PUSH
16268: EMPTY
16269: LIST
16270: LIST
16271: ST_TO_ADDR
16272: GO 17279
16274: LD_INT 15
16276: DOUBLE
16277: EQUAL
16278: IFTRUE 16282
16280: GO 16506
16282: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
16283: LD_ADDR_VAR 0 2
16287: PUSH
16288: LD_INT 1
16290: PUSH
16291: LD_INT 2
16293: PUSH
16294: LD_INT 3
16296: PUSH
16297: LD_INT 4
16299: PUSH
16300: LD_INT 5
16302: PUSH
16303: LD_INT 6
16305: PUSH
16306: LD_INT 7
16308: PUSH
16309: LD_INT 8
16311: PUSH
16312: LD_INT 9
16314: PUSH
16315: LD_INT 10
16317: PUSH
16318: LD_INT 11
16320: PUSH
16321: LD_INT 12
16323: PUSH
16324: LD_INT 13
16326: PUSH
16327: LD_INT 14
16329: PUSH
16330: LD_INT 15
16332: PUSH
16333: LD_INT 16
16335: PUSH
16336: LD_INT 17
16338: PUSH
16339: LD_INT 18
16341: PUSH
16342: LD_INT 19
16344: PUSH
16345: LD_INT 20
16347: PUSH
16348: LD_INT 21
16350: PUSH
16351: LD_INT 22
16353: PUSH
16354: LD_INT 23
16356: PUSH
16357: LD_INT 24
16359: PUSH
16360: LD_INT 25
16362: PUSH
16363: LD_INT 26
16365: PUSH
16366: LD_INT 27
16368: PUSH
16369: LD_INT 28
16371: PUSH
16372: LD_INT 29
16374: PUSH
16375: LD_INT 30
16377: PUSH
16378: LD_INT 31
16380: PUSH
16381: LD_INT 32
16383: PUSH
16384: LD_INT 33
16386: PUSH
16387: LD_INT 34
16389: PUSH
16390: LD_INT 36
16392: PUSH
16393: EMPTY
16394: LIST
16395: LIST
16396: LIST
16397: LIST
16398: LIST
16399: LIST
16400: LIST
16401: LIST
16402: LIST
16403: LIST
16404: LIST
16405: LIST
16406: LIST
16407: LIST
16408: LIST
16409: LIST
16410: LIST
16411: LIST
16412: LIST
16413: LIST
16414: LIST
16415: LIST
16416: LIST
16417: LIST
16418: LIST
16419: LIST
16420: LIST
16421: LIST
16422: LIST
16423: LIST
16424: LIST
16425: LIST
16426: LIST
16427: LIST
16428: LIST
16429: PUSH
16430: LD_INT 101
16432: PUSH
16433: LD_INT 102
16435: PUSH
16436: LD_INT 103
16438: PUSH
16439: LD_INT 104
16441: PUSH
16442: LD_INT 105
16444: PUSH
16445: LD_INT 106
16447: PUSH
16448: LD_INT 107
16450: PUSH
16451: LD_INT 108
16453: PUSH
16454: LD_INT 109
16456: PUSH
16457: LD_INT 110
16459: PUSH
16460: LD_INT 111
16462: PUSH
16463: LD_INT 112
16465: PUSH
16466: LD_INT 113
16468: PUSH
16469: LD_INT 114
16471: PUSH
16472: LD_INT 116
16474: PUSH
16475: LD_INT 117
16477: PUSH
16478: LD_INT 118
16480: PUSH
16481: EMPTY
16482: LIST
16483: LIST
16484: LIST
16485: LIST
16486: LIST
16487: LIST
16488: LIST
16489: LIST
16490: LIST
16491: LIST
16492: LIST
16493: LIST
16494: LIST
16495: LIST
16496: LIST
16497: LIST
16498: LIST
16499: PUSH
16500: EMPTY
16501: LIST
16502: LIST
16503: ST_TO_ADDR
16504: GO 17279
16506: LD_INT 16
16508: DOUBLE
16509: EQUAL
16510: IFTRUE 16514
16512: GO 16650
16514: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
16515: LD_ADDR_VAR 0 2
16519: PUSH
16520: LD_INT 2
16522: PUSH
16523: LD_INT 4
16525: PUSH
16526: LD_INT 5
16528: PUSH
16529: LD_INT 7
16531: PUSH
16532: LD_INT 11
16534: PUSH
16535: LD_INT 12
16537: PUSH
16538: LD_INT 15
16540: PUSH
16541: LD_INT 16
16543: PUSH
16544: LD_INT 20
16546: PUSH
16547: LD_INT 21
16549: PUSH
16550: LD_INT 22
16552: PUSH
16553: LD_INT 23
16555: PUSH
16556: LD_INT 25
16558: PUSH
16559: LD_INT 26
16561: PUSH
16562: LD_INT 30
16564: PUSH
16565: LD_INT 31
16567: PUSH
16568: LD_INT 32
16570: PUSH
16571: LD_INT 33
16573: PUSH
16574: LD_INT 34
16576: PUSH
16577: EMPTY
16578: LIST
16579: LIST
16580: LIST
16581: LIST
16582: LIST
16583: LIST
16584: LIST
16585: LIST
16586: LIST
16587: LIST
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: LIST
16595: LIST
16596: LIST
16597: PUSH
16598: LD_INT 101
16600: PUSH
16601: LD_INT 102
16603: PUSH
16604: LD_INT 103
16606: PUSH
16607: LD_INT 106
16609: PUSH
16610: LD_INT 108
16612: PUSH
16613: LD_INT 112
16615: PUSH
16616: LD_INT 113
16618: PUSH
16619: LD_INT 114
16621: PUSH
16622: LD_INT 116
16624: PUSH
16625: LD_INT 117
16627: PUSH
16628: LD_INT 118
16630: PUSH
16631: EMPTY
16632: LIST
16633: LIST
16634: LIST
16635: LIST
16636: LIST
16637: LIST
16638: LIST
16639: LIST
16640: LIST
16641: LIST
16642: LIST
16643: PUSH
16644: EMPTY
16645: LIST
16646: LIST
16647: ST_TO_ADDR
16648: GO 17279
16650: LD_INT 17
16652: DOUBLE
16653: EQUAL
16654: IFTRUE 16658
16656: GO 16882
16658: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
16659: LD_ADDR_VAR 0 2
16663: PUSH
16664: LD_INT 1
16666: PUSH
16667: LD_INT 2
16669: PUSH
16670: LD_INT 3
16672: PUSH
16673: LD_INT 4
16675: PUSH
16676: LD_INT 5
16678: PUSH
16679: LD_INT 6
16681: PUSH
16682: LD_INT 7
16684: PUSH
16685: LD_INT 8
16687: PUSH
16688: LD_INT 9
16690: PUSH
16691: LD_INT 10
16693: PUSH
16694: LD_INT 11
16696: PUSH
16697: LD_INT 12
16699: PUSH
16700: LD_INT 13
16702: PUSH
16703: LD_INT 14
16705: PUSH
16706: LD_INT 15
16708: PUSH
16709: LD_INT 16
16711: PUSH
16712: LD_INT 17
16714: PUSH
16715: LD_INT 18
16717: PUSH
16718: LD_INT 19
16720: PUSH
16721: LD_INT 20
16723: PUSH
16724: LD_INT 21
16726: PUSH
16727: LD_INT 22
16729: PUSH
16730: LD_INT 23
16732: PUSH
16733: LD_INT 24
16735: PUSH
16736: LD_INT 25
16738: PUSH
16739: LD_INT 26
16741: PUSH
16742: LD_INT 27
16744: PUSH
16745: LD_INT 28
16747: PUSH
16748: LD_INT 29
16750: PUSH
16751: LD_INT 30
16753: PUSH
16754: LD_INT 31
16756: PUSH
16757: LD_INT 32
16759: PUSH
16760: LD_INT 33
16762: PUSH
16763: LD_INT 34
16765: PUSH
16766: LD_INT 36
16768: PUSH
16769: EMPTY
16770: LIST
16771: LIST
16772: LIST
16773: LIST
16774: LIST
16775: LIST
16776: LIST
16777: LIST
16778: LIST
16779: LIST
16780: LIST
16781: LIST
16782: LIST
16783: LIST
16784: LIST
16785: LIST
16786: LIST
16787: LIST
16788: LIST
16789: LIST
16790: LIST
16791: LIST
16792: LIST
16793: LIST
16794: LIST
16795: LIST
16796: LIST
16797: LIST
16798: LIST
16799: LIST
16800: LIST
16801: LIST
16802: LIST
16803: LIST
16804: LIST
16805: PUSH
16806: LD_INT 101
16808: PUSH
16809: LD_INT 102
16811: PUSH
16812: LD_INT 103
16814: PUSH
16815: LD_INT 104
16817: PUSH
16818: LD_INT 105
16820: PUSH
16821: LD_INT 106
16823: PUSH
16824: LD_INT 107
16826: PUSH
16827: LD_INT 108
16829: PUSH
16830: LD_INT 109
16832: PUSH
16833: LD_INT 110
16835: PUSH
16836: LD_INT 111
16838: PUSH
16839: LD_INT 112
16841: PUSH
16842: LD_INT 113
16844: PUSH
16845: LD_INT 114
16847: PUSH
16848: LD_INT 116
16850: PUSH
16851: LD_INT 117
16853: PUSH
16854: LD_INT 118
16856: PUSH
16857: EMPTY
16858: LIST
16859: LIST
16860: LIST
16861: LIST
16862: LIST
16863: LIST
16864: LIST
16865: LIST
16866: LIST
16867: LIST
16868: LIST
16869: LIST
16870: LIST
16871: LIST
16872: LIST
16873: LIST
16874: LIST
16875: PUSH
16876: EMPTY
16877: LIST
16878: LIST
16879: ST_TO_ADDR
16880: GO 17279
16882: LD_INT 18
16884: DOUBLE
16885: EQUAL
16886: IFTRUE 16890
16888: GO 17038
16890: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
16891: LD_ADDR_VAR 0 2
16895: PUSH
16896: LD_INT 2
16898: PUSH
16899: LD_INT 4
16901: PUSH
16902: LD_INT 5
16904: PUSH
16905: LD_INT 7
16907: PUSH
16908: LD_INT 11
16910: PUSH
16911: LD_INT 12
16913: PUSH
16914: LD_INT 15
16916: PUSH
16917: LD_INT 16
16919: PUSH
16920: LD_INT 20
16922: PUSH
16923: LD_INT 21
16925: PUSH
16926: LD_INT 22
16928: PUSH
16929: LD_INT 23
16931: PUSH
16932: LD_INT 25
16934: PUSH
16935: LD_INT 26
16937: PUSH
16938: LD_INT 30
16940: PUSH
16941: LD_INT 31
16943: PUSH
16944: LD_INT 32
16946: PUSH
16947: LD_INT 33
16949: PUSH
16950: LD_INT 34
16952: PUSH
16953: LD_INT 35
16955: PUSH
16956: LD_INT 36
16958: PUSH
16959: EMPTY
16960: LIST
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: LIST
16966: LIST
16967: LIST
16968: LIST
16969: LIST
16970: LIST
16971: LIST
16972: LIST
16973: LIST
16974: LIST
16975: LIST
16976: LIST
16977: LIST
16978: LIST
16979: LIST
16980: LIST
16981: PUSH
16982: LD_INT 101
16984: PUSH
16985: LD_INT 102
16987: PUSH
16988: LD_INT 103
16990: PUSH
16991: LD_INT 106
16993: PUSH
16994: LD_INT 108
16996: PUSH
16997: LD_INT 112
16999: PUSH
17000: LD_INT 113
17002: PUSH
17003: LD_INT 114
17005: PUSH
17006: LD_INT 115
17008: PUSH
17009: LD_INT 116
17011: PUSH
17012: LD_INT 117
17014: PUSH
17015: LD_INT 118
17017: PUSH
17018: EMPTY
17019: LIST
17020: LIST
17021: LIST
17022: LIST
17023: LIST
17024: LIST
17025: LIST
17026: LIST
17027: LIST
17028: LIST
17029: LIST
17030: LIST
17031: PUSH
17032: EMPTY
17033: LIST
17034: LIST
17035: ST_TO_ADDR
17036: GO 17279
17038: LD_INT 19
17040: DOUBLE
17041: EQUAL
17042: IFTRUE 17046
17044: GO 17278
17046: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
17047: LD_ADDR_VAR 0 2
17051: PUSH
17052: LD_INT 1
17054: PUSH
17055: LD_INT 2
17057: PUSH
17058: LD_INT 3
17060: PUSH
17061: LD_INT 4
17063: PUSH
17064: LD_INT 5
17066: PUSH
17067: LD_INT 6
17069: PUSH
17070: LD_INT 7
17072: PUSH
17073: LD_INT 8
17075: PUSH
17076: LD_INT 9
17078: PUSH
17079: LD_INT 10
17081: PUSH
17082: LD_INT 11
17084: PUSH
17085: LD_INT 12
17087: PUSH
17088: LD_INT 13
17090: PUSH
17091: LD_INT 14
17093: PUSH
17094: LD_INT 15
17096: PUSH
17097: LD_INT 16
17099: PUSH
17100: LD_INT 17
17102: PUSH
17103: LD_INT 18
17105: PUSH
17106: LD_INT 19
17108: PUSH
17109: LD_INT 20
17111: PUSH
17112: LD_INT 21
17114: PUSH
17115: LD_INT 22
17117: PUSH
17118: LD_INT 23
17120: PUSH
17121: LD_INT 24
17123: PUSH
17124: LD_INT 25
17126: PUSH
17127: LD_INT 26
17129: PUSH
17130: LD_INT 27
17132: PUSH
17133: LD_INT 28
17135: PUSH
17136: LD_INT 29
17138: PUSH
17139: LD_INT 30
17141: PUSH
17142: LD_INT 31
17144: PUSH
17145: LD_INT 32
17147: PUSH
17148: LD_INT 33
17150: PUSH
17151: LD_INT 34
17153: PUSH
17154: LD_INT 35
17156: PUSH
17157: LD_INT 36
17159: PUSH
17160: EMPTY
17161: LIST
17162: LIST
17163: LIST
17164: LIST
17165: LIST
17166: LIST
17167: LIST
17168: LIST
17169: LIST
17170: LIST
17171: LIST
17172: LIST
17173: LIST
17174: LIST
17175: LIST
17176: LIST
17177: LIST
17178: LIST
17179: LIST
17180: LIST
17181: LIST
17182: LIST
17183: LIST
17184: LIST
17185: LIST
17186: LIST
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: LIST
17197: PUSH
17198: LD_INT 101
17200: PUSH
17201: LD_INT 102
17203: PUSH
17204: LD_INT 103
17206: PUSH
17207: LD_INT 104
17209: PUSH
17210: LD_INT 105
17212: PUSH
17213: LD_INT 106
17215: PUSH
17216: LD_INT 107
17218: PUSH
17219: LD_INT 108
17221: PUSH
17222: LD_INT 109
17224: PUSH
17225: LD_INT 110
17227: PUSH
17228: LD_INT 111
17230: PUSH
17231: LD_INT 112
17233: PUSH
17234: LD_INT 113
17236: PUSH
17237: LD_INT 114
17239: PUSH
17240: LD_INT 115
17242: PUSH
17243: LD_INT 116
17245: PUSH
17246: LD_INT 117
17248: PUSH
17249: LD_INT 118
17251: PUSH
17252: EMPTY
17253: LIST
17254: LIST
17255: LIST
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: PUSH
17272: EMPTY
17273: LIST
17274: LIST
17275: ST_TO_ADDR
17276: GO 17279
17278: POP
// end else
17279: GO 17510
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
17281: LD_ADDR_VAR 0 2
17285: PUSH
17286: LD_INT 1
17288: PUSH
17289: LD_INT 2
17291: PUSH
17292: LD_INT 3
17294: PUSH
17295: LD_INT 4
17297: PUSH
17298: LD_INT 5
17300: PUSH
17301: LD_INT 6
17303: PUSH
17304: LD_INT 7
17306: PUSH
17307: LD_INT 8
17309: PUSH
17310: LD_INT 9
17312: PUSH
17313: LD_INT 10
17315: PUSH
17316: LD_INT 11
17318: PUSH
17319: LD_INT 12
17321: PUSH
17322: LD_INT 13
17324: PUSH
17325: LD_INT 14
17327: PUSH
17328: LD_INT 15
17330: PUSH
17331: LD_INT 16
17333: PUSH
17334: LD_INT 17
17336: PUSH
17337: LD_INT 18
17339: PUSH
17340: LD_INT 19
17342: PUSH
17343: LD_INT 20
17345: PUSH
17346: LD_INT 21
17348: PUSH
17349: LD_INT 22
17351: PUSH
17352: LD_INT 23
17354: PUSH
17355: LD_INT 24
17357: PUSH
17358: LD_INT 25
17360: PUSH
17361: LD_INT 26
17363: PUSH
17364: LD_INT 27
17366: PUSH
17367: LD_INT 28
17369: PUSH
17370: LD_INT 29
17372: PUSH
17373: LD_INT 30
17375: PUSH
17376: LD_INT 31
17378: PUSH
17379: LD_INT 32
17381: PUSH
17382: LD_INT 33
17384: PUSH
17385: LD_INT 34
17387: PUSH
17388: LD_INT 35
17390: PUSH
17391: LD_INT 36
17393: PUSH
17394: EMPTY
17395: LIST
17396: LIST
17397: LIST
17398: LIST
17399: LIST
17400: LIST
17401: LIST
17402: LIST
17403: LIST
17404: LIST
17405: LIST
17406: LIST
17407: LIST
17408: LIST
17409: LIST
17410: LIST
17411: LIST
17412: LIST
17413: LIST
17414: LIST
17415: LIST
17416: LIST
17417: LIST
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: LIST
17424: LIST
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: PUSH
17432: LD_INT 101
17434: PUSH
17435: LD_INT 102
17437: PUSH
17438: LD_INT 103
17440: PUSH
17441: LD_INT 104
17443: PUSH
17444: LD_INT 105
17446: PUSH
17447: LD_INT 106
17449: PUSH
17450: LD_INT 107
17452: PUSH
17453: LD_INT 108
17455: PUSH
17456: LD_INT 109
17458: PUSH
17459: LD_INT 110
17461: PUSH
17462: LD_INT 111
17464: PUSH
17465: LD_INT 112
17467: PUSH
17468: LD_INT 113
17470: PUSH
17471: LD_INT 114
17473: PUSH
17474: LD_INT 115
17476: PUSH
17477: LD_INT 116
17479: PUSH
17480: LD_INT 117
17482: PUSH
17483: LD_INT 118
17485: PUSH
17486: EMPTY
17487: LIST
17488: LIST
17489: LIST
17490: LIST
17491: LIST
17492: LIST
17493: LIST
17494: LIST
17495: LIST
17496: LIST
17497: LIST
17498: LIST
17499: LIST
17500: LIST
17501: LIST
17502: LIST
17503: LIST
17504: LIST
17505: PUSH
17506: EMPTY
17507: LIST
17508: LIST
17509: ST_TO_ADDR
// if result then
17510: LD_VAR 0 2
17514: IFFALSE 18300
// begin normal :=  ;
17516: LD_ADDR_VAR 0 5
17520: PUSH
17521: LD_STRING 
17523: ST_TO_ADDR
// hardcore :=  ;
17524: LD_ADDR_VAR 0 6
17528: PUSH
17529: LD_STRING 
17531: ST_TO_ADDR
// active :=  ;
17532: LD_ADDR_VAR 0 7
17536: PUSH
17537: LD_STRING 
17539: ST_TO_ADDR
// for i = 1 to normalCounter do
17540: LD_ADDR_VAR 0 8
17544: PUSH
17545: DOUBLE
17546: LD_INT 1
17548: DEC
17549: ST_TO_ADDR
17550: LD_EXP 23
17554: PUSH
17555: FOR_TO
17556: IFFALSE 17657
// begin tmp := 0 ;
17558: LD_ADDR_VAR 0 3
17562: PUSH
17563: LD_STRING 0
17565: ST_TO_ADDR
// if result [ 1 ] then
17566: LD_VAR 0 2
17570: PUSH
17571: LD_INT 1
17573: ARRAY
17574: IFFALSE 17639
// if result [ 1 ] [ 1 ] = i then
17576: LD_VAR 0 2
17580: PUSH
17581: LD_INT 1
17583: ARRAY
17584: PUSH
17585: LD_INT 1
17587: ARRAY
17588: PUSH
17589: LD_VAR 0 8
17593: EQUAL
17594: IFFALSE 17639
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
17596: LD_ADDR_VAR 0 2
17600: PUSH
17601: LD_VAR 0 2
17605: PPUSH
17606: LD_INT 1
17608: PPUSH
17609: LD_VAR 0 2
17613: PUSH
17614: LD_INT 1
17616: ARRAY
17617: PPUSH
17618: LD_INT 1
17620: PPUSH
17621: CALL_OW 3
17625: PPUSH
17626: CALL_OW 1
17630: ST_TO_ADDR
// tmp := 1 ;
17631: LD_ADDR_VAR 0 3
17635: PUSH
17636: LD_STRING 1
17638: ST_TO_ADDR
// end ; normal := normal & tmp ;
17639: LD_ADDR_VAR 0 5
17643: PUSH
17644: LD_VAR 0 5
17648: PUSH
17649: LD_VAR 0 3
17653: STR
17654: ST_TO_ADDR
// end ;
17655: GO 17555
17657: POP
17658: POP
// for i = 1 to hardcoreCounter do
17659: LD_ADDR_VAR 0 8
17663: PUSH
17664: DOUBLE
17665: LD_INT 1
17667: DEC
17668: ST_TO_ADDR
17669: LD_EXP 24
17673: PUSH
17674: FOR_TO
17675: IFFALSE 17780
// begin tmp := 0 ;
17677: LD_ADDR_VAR 0 3
17681: PUSH
17682: LD_STRING 0
17684: ST_TO_ADDR
// if result [ 2 ] then
17685: LD_VAR 0 2
17689: PUSH
17690: LD_INT 2
17692: ARRAY
17693: IFFALSE 17762
// if result [ 2 ] [ 1 ] = 100 + i then
17695: LD_VAR 0 2
17699: PUSH
17700: LD_INT 2
17702: ARRAY
17703: PUSH
17704: LD_INT 1
17706: ARRAY
17707: PUSH
17708: LD_INT 100
17710: PUSH
17711: LD_VAR 0 8
17715: PLUS
17716: EQUAL
17717: IFFALSE 17762
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
17719: LD_ADDR_VAR 0 2
17723: PUSH
17724: LD_VAR 0 2
17728: PPUSH
17729: LD_INT 2
17731: PPUSH
17732: LD_VAR 0 2
17736: PUSH
17737: LD_INT 2
17739: ARRAY
17740: PPUSH
17741: LD_INT 1
17743: PPUSH
17744: CALL_OW 3
17748: PPUSH
17749: CALL_OW 1
17753: ST_TO_ADDR
// tmp := 1 ;
17754: LD_ADDR_VAR 0 3
17758: PUSH
17759: LD_STRING 1
17761: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
17762: LD_ADDR_VAR 0 6
17766: PUSH
17767: LD_VAR 0 6
17771: PUSH
17772: LD_VAR 0 3
17776: STR
17777: ST_TO_ADDR
// end ;
17778: GO 17674
17780: POP
17781: POP
// if isGameLoad then
17782: LD_VAR 0 1
17786: IFFALSE 18261
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
17788: LD_ADDR_VAR 0 4
17792: PUSH
17793: LD_EXP 27
17797: PUSH
17798: LD_EXP 26
17802: PUSH
17803: LD_EXP 28
17807: PUSH
17808: LD_EXP 25
17812: PUSH
17813: LD_EXP 29
17817: PUSH
17818: LD_EXP 30
17822: PUSH
17823: LD_EXP 31
17827: PUSH
17828: LD_EXP 32
17832: PUSH
17833: LD_EXP 33
17837: PUSH
17838: LD_EXP 34
17842: PUSH
17843: LD_EXP 35
17847: PUSH
17848: LD_EXP 36
17852: PUSH
17853: LD_EXP 37
17857: PUSH
17858: LD_EXP 38
17862: PUSH
17863: LD_EXP 46
17867: PUSH
17868: LD_EXP 47
17872: PUSH
17873: LD_EXP 48
17877: PUSH
17878: LD_EXP 49
17882: PUSH
17883: LD_EXP 51
17887: PUSH
17888: LD_EXP 52
17892: PUSH
17893: LD_EXP 53
17897: PUSH
17898: LD_EXP 56
17902: PUSH
17903: LD_EXP 58
17907: PUSH
17908: LD_EXP 59
17912: PUSH
17913: LD_EXP 60
17917: PUSH
17918: LD_EXP 62
17922: PUSH
17923: LD_EXP 63
17927: PUSH
17928: LD_EXP 66
17932: PUSH
17933: LD_EXP 67
17937: PUSH
17938: LD_EXP 68
17942: PUSH
17943: LD_EXP 69
17947: PUSH
17948: LD_EXP 70
17952: PUSH
17953: LD_EXP 71
17957: PUSH
17958: LD_EXP 72
17962: PUSH
17963: LD_EXP 73
17967: PUSH
17968: LD_EXP 74
17972: PUSH
17973: LD_EXP 39
17977: PUSH
17978: LD_EXP 40
17982: PUSH
17983: LD_EXP 43
17987: PUSH
17988: LD_EXP 44
17992: PUSH
17993: LD_EXP 45
17997: PUSH
17998: LD_EXP 41
18002: PUSH
18003: LD_EXP 42
18007: PUSH
18008: LD_EXP 50
18012: PUSH
18013: LD_EXP 54
18017: PUSH
18018: LD_EXP 55
18022: PUSH
18023: LD_EXP 57
18027: PUSH
18028: LD_EXP 61
18032: PUSH
18033: LD_EXP 64
18037: PUSH
18038: LD_EXP 65
18042: PUSH
18043: LD_EXP 75
18047: PUSH
18048: LD_EXP 76
18052: PUSH
18053: LD_EXP 77
18057: PUSH
18058: LD_EXP 78
18062: PUSH
18063: EMPTY
18064: LIST
18065: LIST
18066: LIST
18067: LIST
18068: LIST
18069: LIST
18070: LIST
18071: LIST
18072: LIST
18073: LIST
18074: LIST
18075: LIST
18076: LIST
18077: LIST
18078: LIST
18079: LIST
18080: LIST
18081: LIST
18082: LIST
18083: LIST
18084: LIST
18085: LIST
18086: LIST
18087: LIST
18088: LIST
18089: LIST
18090: LIST
18091: LIST
18092: LIST
18093: LIST
18094: LIST
18095: LIST
18096: LIST
18097: LIST
18098: LIST
18099: LIST
18100: LIST
18101: LIST
18102: LIST
18103: LIST
18104: LIST
18105: LIST
18106: LIST
18107: LIST
18108: LIST
18109: LIST
18110: LIST
18111: LIST
18112: LIST
18113: LIST
18114: LIST
18115: LIST
18116: LIST
18117: LIST
18118: ST_TO_ADDR
// tmp :=  ;
18119: LD_ADDR_VAR 0 3
18123: PUSH
18124: LD_STRING 
18126: ST_TO_ADDR
// for i = 1 to normalCounter do
18127: LD_ADDR_VAR 0 8
18131: PUSH
18132: DOUBLE
18133: LD_INT 1
18135: DEC
18136: ST_TO_ADDR
18137: LD_EXP 23
18141: PUSH
18142: FOR_TO
18143: IFFALSE 18179
// begin if flags [ i ] then
18145: LD_VAR 0 4
18149: PUSH
18150: LD_VAR 0 8
18154: ARRAY
18155: IFFALSE 18177
// tmp := tmp & i & ; ;
18157: LD_ADDR_VAR 0 3
18161: PUSH
18162: LD_VAR 0 3
18166: PUSH
18167: LD_VAR 0 8
18171: STR
18172: PUSH
18173: LD_STRING ;
18175: STR
18176: ST_TO_ADDR
// end ;
18177: GO 18142
18179: POP
18180: POP
// for i = 1 to hardcoreCounter do
18181: LD_ADDR_VAR 0 8
18185: PUSH
18186: DOUBLE
18187: LD_INT 1
18189: DEC
18190: ST_TO_ADDR
18191: LD_EXP 24
18195: PUSH
18196: FOR_TO
18197: IFFALSE 18243
// begin if flags [ normalCounter + i ] then
18199: LD_VAR 0 4
18203: PUSH
18204: LD_EXP 23
18208: PUSH
18209: LD_VAR 0 8
18213: PLUS
18214: ARRAY
18215: IFFALSE 18241
// tmp := tmp & ( 100 + i ) & ; ;
18217: LD_ADDR_VAR 0 3
18221: PUSH
18222: LD_VAR 0 3
18226: PUSH
18227: LD_INT 100
18229: PUSH
18230: LD_VAR 0 8
18234: PLUS
18235: STR
18236: PUSH
18237: LD_STRING ;
18239: STR
18240: ST_TO_ADDR
// end ;
18241: GO 18196
18243: POP
18244: POP
// if tmp then
18245: LD_VAR 0 3
18249: IFFALSE 18261
// active := tmp ;
18251: LD_ADDR_VAR 0 7
18255: PUSH
18256: LD_VAR 0 3
18260: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
18261: LD_STRING getStreamItemsFromMission("
18263: PUSH
18264: LD_VAR 0 5
18268: STR
18269: PUSH
18270: LD_STRING ","
18272: STR
18273: PUSH
18274: LD_VAR 0 6
18278: STR
18279: PUSH
18280: LD_STRING ","
18282: STR
18283: PUSH
18284: LD_VAR 0 7
18288: STR
18289: PUSH
18290: LD_STRING ")
18292: STR
18293: PPUSH
18294: CALL_OW 559
// end else
18298: GO 18307
// ToLua ( getStreamItemsFromMission("","","") ) ;
18300: LD_STRING getStreamItemsFromMission("","","")
18302: PPUSH
18303: CALL_OW 559
// end ;
18307: LD_VAR 0 2
18311: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
18312: LD_EXP 22
18316: PUSH
18317: LD_EXP 27
18321: AND
18322: IFFALSE 18446
18324: GO 18326
18326: DISABLE
18327: LD_INT 0
18329: PPUSH
18330: PPUSH
// begin enable ;
18331: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
18332: LD_ADDR_VAR 0 2
18336: PUSH
18337: LD_INT 22
18339: PUSH
18340: LD_OWVAR 2
18344: PUSH
18345: EMPTY
18346: LIST
18347: LIST
18348: PUSH
18349: LD_INT 2
18351: PUSH
18352: LD_INT 34
18354: PUSH
18355: LD_INT 7
18357: PUSH
18358: EMPTY
18359: LIST
18360: LIST
18361: PUSH
18362: LD_INT 34
18364: PUSH
18365: LD_INT 45
18367: PUSH
18368: EMPTY
18369: LIST
18370: LIST
18371: PUSH
18372: LD_INT 34
18374: PUSH
18375: LD_INT 28
18377: PUSH
18378: EMPTY
18379: LIST
18380: LIST
18381: PUSH
18382: LD_INT 34
18384: PUSH
18385: LD_INT 47
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: PUSH
18392: EMPTY
18393: LIST
18394: LIST
18395: LIST
18396: LIST
18397: LIST
18398: PUSH
18399: EMPTY
18400: LIST
18401: LIST
18402: PPUSH
18403: CALL_OW 69
18407: ST_TO_ADDR
// if not tmp then
18408: LD_VAR 0 2
18412: NOT
18413: IFFALSE 18417
// exit ;
18415: GO 18446
// for i in tmp do
18417: LD_ADDR_VAR 0 1
18421: PUSH
18422: LD_VAR 0 2
18426: PUSH
18427: FOR_IN
18428: IFFALSE 18444
// begin SetLives ( i , 0 ) ;
18430: LD_VAR 0 1
18434: PPUSH
18435: LD_INT 0
18437: PPUSH
18438: CALL_OW 234
// end ;
18442: GO 18427
18444: POP
18445: POP
// end ;
18446: PPOPN 2
18448: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
18449: LD_EXP 22
18453: PUSH
18454: LD_EXP 28
18458: AND
18459: IFFALSE 18543
18461: GO 18463
18463: DISABLE
18464: LD_INT 0
18466: PPUSH
18467: PPUSH
// begin enable ;
18468: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
18469: LD_ADDR_VAR 0 2
18473: PUSH
18474: LD_INT 22
18476: PUSH
18477: LD_OWVAR 2
18481: PUSH
18482: EMPTY
18483: LIST
18484: LIST
18485: PUSH
18486: LD_INT 32
18488: PUSH
18489: LD_INT 3
18491: PUSH
18492: EMPTY
18493: LIST
18494: LIST
18495: PUSH
18496: EMPTY
18497: LIST
18498: LIST
18499: PPUSH
18500: CALL_OW 69
18504: ST_TO_ADDR
// if not tmp then
18505: LD_VAR 0 2
18509: NOT
18510: IFFALSE 18514
// exit ;
18512: GO 18543
// for i in tmp do
18514: LD_ADDR_VAR 0 1
18518: PUSH
18519: LD_VAR 0 2
18523: PUSH
18524: FOR_IN
18525: IFFALSE 18541
// begin SetLives ( i , 0 ) ;
18527: LD_VAR 0 1
18531: PPUSH
18532: LD_INT 0
18534: PPUSH
18535: CALL_OW 234
// end ;
18539: GO 18524
18541: POP
18542: POP
// end ;
18543: PPOPN 2
18545: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
18546: LD_EXP 22
18550: PUSH
18551: LD_EXP 25
18555: AND
18556: IFFALSE 18649
18558: GO 18560
18560: DISABLE
18561: LD_INT 0
18563: PPUSH
// begin enable ;
18564: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
18565: LD_ADDR_VAR 0 1
18569: PUSH
18570: LD_INT 22
18572: PUSH
18573: LD_OWVAR 2
18577: PUSH
18578: EMPTY
18579: LIST
18580: LIST
18581: PUSH
18582: LD_INT 2
18584: PUSH
18585: LD_INT 25
18587: PUSH
18588: LD_INT 5
18590: PUSH
18591: EMPTY
18592: LIST
18593: LIST
18594: PUSH
18595: LD_INT 25
18597: PUSH
18598: LD_INT 9
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: PUSH
18605: LD_INT 25
18607: PUSH
18608: LD_INT 8
18610: PUSH
18611: EMPTY
18612: LIST
18613: LIST
18614: PUSH
18615: EMPTY
18616: LIST
18617: LIST
18618: LIST
18619: LIST
18620: PUSH
18621: EMPTY
18622: LIST
18623: LIST
18624: PPUSH
18625: CALL_OW 69
18629: PUSH
18630: FOR_IN
18631: IFFALSE 18647
// begin SetClass ( i , 1 ) ;
18633: LD_VAR 0 1
18637: PPUSH
18638: LD_INT 1
18640: PPUSH
18641: CALL_OW 336
// end ;
18645: GO 18630
18647: POP
18648: POP
// end ;
18649: PPOPN 1
18651: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
18652: LD_EXP 22
18656: PUSH
18657: LD_EXP 26
18661: AND
18662: PUSH
18663: LD_OWVAR 65
18667: PUSH
18668: LD_INT 7
18670: LESS
18671: AND
18672: IFFALSE 18686
18674: GO 18676
18676: DISABLE
// begin enable ;
18677: ENABLE
// game_speed := 7 ;
18678: LD_ADDR_OWVAR 65
18682: PUSH
18683: LD_INT 7
18685: ST_TO_ADDR
// end ;
18686: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
18687: LD_EXP 22
18691: PUSH
18692: LD_EXP 29
18696: AND
18697: IFFALSE 18899
18699: GO 18701
18701: DISABLE
18702: LD_INT 0
18704: PPUSH
18705: PPUSH
18706: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18707: LD_ADDR_VAR 0 3
18711: PUSH
18712: LD_INT 81
18714: PUSH
18715: LD_OWVAR 2
18719: PUSH
18720: EMPTY
18721: LIST
18722: LIST
18723: PUSH
18724: LD_INT 21
18726: PUSH
18727: LD_INT 1
18729: PUSH
18730: EMPTY
18731: LIST
18732: LIST
18733: PUSH
18734: EMPTY
18735: LIST
18736: LIST
18737: PPUSH
18738: CALL_OW 69
18742: ST_TO_ADDR
// if not tmp then
18743: LD_VAR 0 3
18747: NOT
18748: IFFALSE 18752
// exit ;
18750: GO 18899
// if tmp > 5 then
18752: LD_VAR 0 3
18756: PUSH
18757: LD_INT 5
18759: GREATER
18760: IFFALSE 18772
// k := 5 else
18762: LD_ADDR_VAR 0 2
18766: PUSH
18767: LD_INT 5
18769: ST_TO_ADDR
18770: GO 18782
// k := tmp ;
18772: LD_ADDR_VAR 0 2
18776: PUSH
18777: LD_VAR 0 3
18781: ST_TO_ADDR
// for i := 1 to k do
18782: LD_ADDR_VAR 0 1
18786: PUSH
18787: DOUBLE
18788: LD_INT 1
18790: DEC
18791: ST_TO_ADDR
18792: LD_VAR 0 2
18796: PUSH
18797: FOR_TO
18798: IFFALSE 18897
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
18800: LD_VAR 0 3
18804: PUSH
18805: LD_VAR 0 1
18809: ARRAY
18810: PPUSH
18811: LD_VAR 0 1
18815: PUSH
18816: LD_INT 4
18818: MOD
18819: PUSH
18820: LD_INT 1
18822: PLUS
18823: PPUSH
18824: CALL_OW 259
18828: PUSH
18829: LD_INT 10
18831: LESS
18832: IFFALSE 18895
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
18834: LD_VAR 0 3
18838: PUSH
18839: LD_VAR 0 1
18843: ARRAY
18844: PPUSH
18845: LD_VAR 0 1
18849: PUSH
18850: LD_INT 4
18852: MOD
18853: PUSH
18854: LD_INT 1
18856: PLUS
18857: PPUSH
18858: LD_VAR 0 3
18862: PUSH
18863: LD_VAR 0 1
18867: ARRAY
18868: PPUSH
18869: LD_VAR 0 1
18873: PUSH
18874: LD_INT 4
18876: MOD
18877: PUSH
18878: LD_INT 1
18880: PLUS
18881: PPUSH
18882: CALL_OW 259
18886: PUSH
18887: LD_INT 1
18889: PLUS
18890: PPUSH
18891: CALL_OW 237
18895: GO 18797
18897: POP
18898: POP
// end ;
18899: PPOPN 3
18901: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
18902: LD_EXP 22
18906: PUSH
18907: LD_EXP 30
18911: AND
18912: IFFALSE 18932
18914: GO 18916
18916: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
18917: LD_INT 4
18919: PPUSH
18920: LD_OWVAR 2
18924: PPUSH
18925: LD_INT 0
18927: PPUSH
18928: CALL_OW 324
18932: END
// every 0 0$1 trigger StreamModeActive and sShovel do
18933: LD_EXP 22
18937: PUSH
18938: LD_EXP 59
18942: AND
18943: IFFALSE 18963
18945: GO 18947
18947: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
18948: LD_INT 19
18950: PPUSH
18951: LD_OWVAR 2
18955: PPUSH
18956: LD_INT 0
18958: PPUSH
18959: CALL_OW 324
18963: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
18964: LD_EXP 22
18968: PUSH
18969: LD_EXP 31
18973: AND
18974: IFFALSE 19076
18976: GO 18978
18978: DISABLE
18979: LD_INT 0
18981: PPUSH
18982: PPUSH
// begin enable ;
18983: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
18984: LD_ADDR_VAR 0 2
18988: PUSH
18989: LD_INT 22
18991: PUSH
18992: LD_OWVAR 2
18996: PUSH
18997: EMPTY
18998: LIST
18999: LIST
19000: PUSH
19001: LD_INT 2
19003: PUSH
19004: LD_INT 34
19006: PUSH
19007: LD_INT 11
19009: PUSH
19010: EMPTY
19011: LIST
19012: LIST
19013: PUSH
19014: LD_INT 34
19016: PUSH
19017: LD_INT 30
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: LIST
19028: PUSH
19029: EMPTY
19030: LIST
19031: LIST
19032: PPUSH
19033: CALL_OW 69
19037: ST_TO_ADDR
// if not tmp then
19038: LD_VAR 0 2
19042: NOT
19043: IFFALSE 19047
// exit ;
19045: GO 19076
// for i in tmp do
19047: LD_ADDR_VAR 0 1
19051: PUSH
19052: LD_VAR 0 2
19056: PUSH
19057: FOR_IN
19058: IFFALSE 19074
// begin SetLives ( i , 0 ) ;
19060: LD_VAR 0 1
19064: PPUSH
19065: LD_INT 0
19067: PPUSH
19068: CALL_OW 234
// end ;
19072: GO 19057
19074: POP
19075: POP
// end ;
19076: PPOPN 2
19078: END
// every 0 0$1 trigger StreamModeActive and sBunker do
19079: LD_EXP 22
19083: PUSH
19084: LD_EXP 32
19088: AND
19089: IFFALSE 19109
19091: GO 19093
19093: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
19094: LD_INT 32
19096: PPUSH
19097: LD_OWVAR 2
19101: PPUSH
19102: LD_INT 0
19104: PPUSH
19105: CALL_OW 324
19109: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
19110: LD_EXP 22
19114: PUSH
19115: LD_EXP 33
19119: AND
19120: IFFALSE 19301
19122: GO 19124
19124: DISABLE
19125: LD_INT 0
19127: PPUSH
19128: PPUSH
19129: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
19130: LD_ADDR_VAR 0 2
19134: PUSH
19135: LD_INT 22
19137: PUSH
19138: LD_OWVAR 2
19142: PUSH
19143: EMPTY
19144: LIST
19145: LIST
19146: PUSH
19147: LD_INT 33
19149: PUSH
19150: LD_INT 3
19152: PUSH
19153: EMPTY
19154: LIST
19155: LIST
19156: PUSH
19157: EMPTY
19158: LIST
19159: LIST
19160: PPUSH
19161: CALL_OW 69
19165: ST_TO_ADDR
// if not tmp then
19166: LD_VAR 0 2
19170: NOT
19171: IFFALSE 19175
// exit ;
19173: GO 19301
// side := 0 ;
19175: LD_ADDR_VAR 0 3
19179: PUSH
19180: LD_INT 0
19182: ST_TO_ADDR
// for i := 1 to 8 do
19183: LD_ADDR_VAR 0 1
19187: PUSH
19188: DOUBLE
19189: LD_INT 1
19191: DEC
19192: ST_TO_ADDR
19193: LD_INT 8
19195: PUSH
19196: FOR_TO
19197: IFFALSE 19245
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
19199: LD_OWVAR 2
19203: PUSH
19204: LD_VAR 0 1
19208: NONEQUAL
19209: PUSH
19210: LD_OWVAR 2
19214: PPUSH
19215: LD_VAR 0 1
19219: PPUSH
19220: CALL_OW 81
19224: PUSH
19225: LD_INT 2
19227: EQUAL
19228: AND
19229: IFFALSE 19243
// begin side := i ;
19231: LD_ADDR_VAR 0 3
19235: PUSH
19236: LD_VAR 0 1
19240: ST_TO_ADDR
// break ;
19241: GO 19245
// end ;
19243: GO 19196
19245: POP
19246: POP
// if not side then
19247: LD_VAR 0 3
19251: NOT
19252: IFFALSE 19256
// exit ;
19254: GO 19301
// for i := 1 to tmp do
19256: LD_ADDR_VAR 0 1
19260: PUSH
19261: DOUBLE
19262: LD_INT 1
19264: DEC
19265: ST_TO_ADDR
19266: LD_VAR 0 2
19270: PUSH
19271: FOR_TO
19272: IFFALSE 19299
// if Prob ( 60 ) then
19274: LD_INT 60
19276: PPUSH
19277: CALL_OW 13
19281: IFFALSE 19297
// SetSide ( i , side ) ;
19283: LD_VAR 0 1
19287: PPUSH
19288: LD_VAR 0 3
19292: PPUSH
19293: CALL_OW 235
19297: GO 19271
19299: POP
19300: POP
// end ;
19301: PPOPN 3
19303: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
19304: LD_EXP 22
19308: PUSH
19309: LD_EXP 35
19313: AND
19314: IFFALSE 19433
19316: GO 19318
19318: DISABLE
19319: LD_INT 0
19321: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
19322: LD_ADDR_VAR 0 1
19326: PUSH
19327: LD_INT 22
19329: PUSH
19330: LD_OWVAR 2
19334: PUSH
19335: EMPTY
19336: LIST
19337: LIST
19338: PUSH
19339: LD_INT 21
19341: PUSH
19342: LD_INT 1
19344: PUSH
19345: EMPTY
19346: LIST
19347: LIST
19348: PUSH
19349: LD_INT 3
19351: PUSH
19352: LD_INT 23
19354: PUSH
19355: LD_INT 0
19357: PUSH
19358: EMPTY
19359: LIST
19360: LIST
19361: PUSH
19362: EMPTY
19363: LIST
19364: LIST
19365: PUSH
19366: EMPTY
19367: LIST
19368: LIST
19369: LIST
19370: PPUSH
19371: CALL_OW 69
19375: PUSH
19376: FOR_IN
19377: IFFALSE 19431
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
19379: LD_VAR 0 1
19383: PPUSH
19384: CALL_OW 257
19388: PUSH
19389: LD_INT 1
19391: PUSH
19392: LD_INT 2
19394: PUSH
19395: LD_INT 3
19397: PUSH
19398: LD_INT 4
19400: PUSH
19401: EMPTY
19402: LIST
19403: LIST
19404: LIST
19405: LIST
19406: IN
19407: IFFALSE 19429
// SetClass ( un , rand ( 1 , 4 ) ) ;
19409: LD_VAR 0 1
19413: PPUSH
19414: LD_INT 1
19416: PPUSH
19417: LD_INT 4
19419: PPUSH
19420: CALL_OW 12
19424: PPUSH
19425: CALL_OW 336
19429: GO 19376
19431: POP
19432: POP
// end ;
19433: PPOPN 1
19435: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
19436: LD_EXP 22
19440: PUSH
19441: LD_EXP 34
19445: AND
19446: IFFALSE 19525
19448: GO 19450
19450: DISABLE
19451: LD_INT 0
19453: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19454: LD_ADDR_VAR 0 1
19458: PUSH
19459: LD_INT 22
19461: PUSH
19462: LD_OWVAR 2
19466: PUSH
19467: EMPTY
19468: LIST
19469: LIST
19470: PUSH
19471: LD_INT 21
19473: PUSH
19474: LD_INT 3
19476: PUSH
19477: EMPTY
19478: LIST
19479: LIST
19480: PUSH
19481: EMPTY
19482: LIST
19483: LIST
19484: PPUSH
19485: CALL_OW 69
19489: ST_TO_ADDR
// if not tmp then
19490: LD_VAR 0 1
19494: NOT
19495: IFFALSE 19499
// exit ;
19497: GO 19525
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
19499: LD_VAR 0 1
19503: PUSH
19504: LD_INT 1
19506: PPUSH
19507: LD_VAR 0 1
19511: PPUSH
19512: CALL_OW 12
19516: ARRAY
19517: PPUSH
19518: LD_INT 100
19520: PPUSH
19521: CALL_OW 234
// end ;
19525: PPOPN 1
19527: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
19528: LD_EXP 22
19532: PUSH
19533: LD_EXP 36
19537: AND
19538: IFFALSE 19636
19540: GO 19542
19542: DISABLE
19543: LD_INT 0
19545: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19546: LD_ADDR_VAR 0 1
19550: PUSH
19551: LD_INT 22
19553: PUSH
19554: LD_OWVAR 2
19558: PUSH
19559: EMPTY
19560: LIST
19561: LIST
19562: PUSH
19563: LD_INT 21
19565: PUSH
19566: LD_INT 1
19568: PUSH
19569: EMPTY
19570: LIST
19571: LIST
19572: PUSH
19573: EMPTY
19574: LIST
19575: LIST
19576: PPUSH
19577: CALL_OW 69
19581: ST_TO_ADDR
// if not tmp then
19582: LD_VAR 0 1
19586: NOT
19587: IFFALSE 19591
// exit ;
19589: GO 19636
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
19591: LD_VAR 0 1
19595: PUSH
19596: LD_INT 1
19598: PPUSH
19599: LD_VAR 0 1
19603: PPUSH
19604: CALL_OW 12
19608: ARRAY
19609: PPUSH
19610: LD_INT 1
19612: PPUSH
19613: LD_INT 4
19615: PPUSH
19616: CALL_OW 12
19620: PPUSH
19621: LD_INT 3000
19623: PPUSH
19624: LD_INT 9000
19626: PPUSH
19627: CALL_OW 12
19631: PPUSH
19632: CALL_OW 492
// end ;
19636: PPOPN 1
19638: END
// every 0 0$1 trigger StreamModeActive and sDepot do
19639: LD_EXP 22
19643: PUSH
19644: LD_EXP 37
19648: AND
19649: IFFALSE 19669
19651: GO 19653
19653: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
19654: LD_INT 1
19656: PPUSH
19657: LD_OWVAR 2
19661: PPUSH
19662: LD_INT 0
19664: PPUSH
19665: CALL_OW 324
19669: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
19670: LD_EXP 22
19674: PUSH
19675: LD_EXP 38
19679: AND
19680: IFFALSE 19763
19682: GO 19684
19684: DISABLE
19685: LD_INT 0
19687: PPUSH
19688: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19689: LD_ADDR_VAR 0 2
19693: PUSH
19694: LD_INT 22
19696: PUSH
19697: LD_OWVAR 2
19701: PUSH
19702: EMPTY
19703: LIST
19704: LIST
19705: PUSH
19706: LD_INT 21
19708: PUSH
19709: LD_INT 3
19711: PUSH
19712: EMPTY
19713: LIST
19714: LIST
19715: PUSH
19716: EMPTY
19717: LIST
19718: LIST
19719: PPUSH
19720: CALL_OW 69
19724: ST_TO_ADDR
// if not tmp then
19725: LD_VAR 0 2
19729: NOT
19730: IFFALSE 19734
// exit ;
19732: GO 19763
// for i in tmp do
19734: LD_ADDR_VAR 0 1
19738: PUSH
19739: LD_VAR 0 2
19743: PUSH
19744: FOR_IN
19745: IFFALSE 19761
// SetBLevel ( i , 10 ) ;
19747: LD_VAR 0 1
19751: PPUSH
19752: LD_INT 10
19754: PPUSH
19755: CALL_OW 241
19759: GO 19744
19761: POP
19762: POP
// end ;
19763: PPOPN 2
19765: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
19766: LD_EXP 22
19770: PUSH
19771: LD_EXP 39
19775: AND
19776: IFFALSE 19887
19778: GO 19780
19780: DISABLE
19781: LD_INT 0
19783: PPUSH
19784: PPUSH
19785: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19786: LD_ADDR_VAR 0 3
19790: PUSH
19791: LD_INT 22
19793: PUSH
19794: LD_OWVAR 2
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: PUSH
19803: LD_INT 25
19805: PUSH
19806: LD_INT 1
19808: PUSH
19809: EMPTY
19810: LIST
19811: LIST
19812: PUSH
19813: EMPTY
19814: LIST
19815: LIST
19816: PPUSH
19817: CALL_OW 69
19821: ST_TO_ADDR
// if not tmp then
19822: LD_VAR 0 3
19826: NOT
19827: IFFALSE 19831
// exit ;
19829: GO 19887
// un := tmp [ rand ( 1 , tmp ) ] ;
19831: LD_ADDR_VAR 0 2
19835: PUSH
19836: LD_VAR 0 3
19840: PUSH
19841: LD_INT 1
19843: PPUSH
19844: LD_VAR 0 3
19848: PPUSH
19849: CALL_OW 12
19853: ARRAY
19854: ST_TO_ADDR
// if Crawls ( un ) then
19855: LD_VAR 0 2
19859: PPUSH
19860: CALL_OW 318
19864: IFFALSE 19875
// ComWalk ( un ) ;
19866: LD_VAR 0 2
19870: PPUSH
19871: CALL_OW 138
// SetClass ( un , class_sniper ) ;
19875: LD_VAR 0 2
19879: PPUSH
19880: LD_INT 5
19882: PPUSH
19883: CALL_OW 336
// end ;
19887: PPOPN 3
19889: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
19890: LD_EXP 22
19894: PUSH
19895: LD_EXP 40
19899: AND
19900: PUSH
19901: LD_OWVAR 67
19905: PUSH
19906: LD_INT 4
19908: LESS
19909: AND
19910: IFFALSE 19929
19912: GO 19914
19914: DISABLE
// begin Difficulty := Difficulty + 1 ;
19915: LD_ADDR_OWVAR 67
19919: PUSH
19920: LD_OWVAR 67
19924: PUSH
19925: LD_INT 1
19927: PLUS
19928: ST_TO_ADDR
// end ;
19929: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
19930: LD_EXP 22
19934: PUSH
19935: LD_EXP 41
19939: AND
19940: IFFALSE 20043
19942: GO 19944
19944: DISABLE
19945: LD_INT 0
19947: PPUSH
// begin for i := 1 to 5 do
19948: LD_ADDR_VAR 0 1
19952: PUSH
19953: DOUBLE
19954: LD_INT 1
19956: DEC
19957: ST_TO_ADDR
19958: LD_INT 5
19960: PUSH
19961: FOR_TO
19962: IFFALSE 20041
// begin uc_nation := nation_nature ;
19964: LD_ADDR_OWVAR 21
19968: PUSH
19969: LD_INT 0
19971: ST_TO_ADDR
// uc_side := 0 ;
19972: LD_ADDR_OWVAR 20
19976: PUSH
19977: LD_INT 0
19979: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19980: LD_ADDR_OWVAR 29
19984: PUSH
19985: LD_INT 12
19987: PUSH
19988: LD_INT 12
19990: PUSH
19991: EMPTY
19992: LIST
19993: LIST
19994: ST_TO_ADDR
// hc_agressivity := 20 ;
19995: LD_ADDR_OWVAR 35
19999: PUSH
20000: LD_INT 20
20002: ST_TO_ADDR
// hc_class := class_tiger ;
20003: LD_ADDR_OWVAR 28
20007: PUSH
20008: LD_INT 14
20010: ST_TO_ADDR
// hc_gallery :=  ;
20011: LD_ADDR_OWVAR 33
20015: PUSH
20016: LD_STRING 
20018: ST_TO_ADDR
// hc_name :=  ;
20019: LD_ADDR_OWVAR 26
20023: PUSH
20024: LD_STRING 
20026: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
20027: CALL_OW 44
20031: PPUSH
20032: LD_INT 0
20034: PPUSH
20035: CALL_OW 51
// end ;
20039: GO 19961
20041: POP
20042: POP
// end ;
20043: PPOPN 1
20045: END
// every 0 0$1 trigger StreamModeActive and sBomb do
20046: LD_EXP 22
20050: PUSH
20051: LD_EXP 42
20055: AND
20056: IFFALSE 20065
20058: GO 20060
20060: DISABLE
// StreamSibBomb ;
20061: CALL 20066 0 0
20065: END
// export function StreamSibBomb ; var i , x , y ; begin
20066: LD_INT 0
20068: PPUSH
20069: PPUSH
20070: PPUSH
20071: PPUSH
// result := false ;
20072: LD_ADDR_VAR 0 1
20076: PUSH
20077: LD_INT 0
20079: ST_TO_ADDR
// for i := 1 to 16 do
20080: LD_ADDR_VAR 0 2
20084: PUSH
20085: DOUBLE
20086: LD_INT 1
20088: DEC
20089: ST_TO_ADDR
20090: LD_INT 16
20092: PUSH
20093: FOR_TO
20094: IFFALSE 20293
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20096: LD_ADDR_VAR 0 3
20100: PUSH
20101: LD_INT 10
20103: PUSH
20104: LD_INT 20
20106: PUSH
20107: LD_INT 30
20109: PUSH
20110: LD_INT 40
20112: PUSH
20113: LD_INT 50
20115: PUSH
20116: LD_INT 60
20118: PUSH
20119: LD_INT 70
20121: PUSH
20122: LD_INT 80
20124: PUSH
20125: LD_INT 90
20127: PUSH
20128: LD_INT 100
20130: PUSH
20131: LD_INT 110
20133: PUSH
20134: LD_INT 120
20136: PUSH
20137: LD_INT 130
20139: PUSH
20140: LD_INT 140
20142: PUSH
20143: LD_INT 150
20145: PUSH
20146: EMPTY
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: LIST
20162: PUSH
20163: LD_INT 1
20165: PPUSH
20166: LD_INT 15
20168: PPUSH
20169: CALL_OW 12
20173: ARRAY
20174: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20175: LD_ADDR_VAR 0 4
20179: PUSH
20180: LD_INT 10
20182: PUSH
20183: LD_INT 20
20185: PUSH
20186: LD_INT 30
20188: PUSH
20189: LD_INT 40
20191: PUSH
20192: LD_INT 50
20194: PUSH
20195: LD_INT 60
20197: PUSH
20198: LD_INT 70
20200: PUSH
20201: LD_INT 80
20203: PUSH
20204: LD_INT 90
20206: PUSH
20207: LD_INT 100
20209: PUSH
20210: LD_INT 110
20212: PUSH
20213: LD_INT 120
20215: PUSH
20216: LD_INT 130
20218: PUSH
20219: LD_INT 140
20221: PUSH
20222: LD_INT 150
20224: PUSH
20225: EMPTY
20226: LIST
20227: LIST
20228: LIST
20229: LIST
20230: LIST
20231: LIST
20232: LIST
20233: LIST
20234: LIST
20235: LIST
20236: LIST
20237: LIST
20238: LIST
20239: LIST
20240: LIST
20241: PUSH
20242: LD_INT 1
20244: PPUSH
20245: LD_INT 15
20247: PPUSH
20248: CALL_OW 12
20252: ARRAY
20253: ST_TO_ADDR
// if ValidHex ( x , y ) then
20254: LD_VAR 0 3
20258: PPUSH
20259: LD_VAR 0 4
20263: PPUSH
20264: CALL_OW 488
20268: IFFALSE 20291
// begin result := [ x , y ] ;
20270: LD_ADDR_VAR 0 1
20274: PUSH
20275: LD_VAR 0 3
20279: PUSH
20280: LD_VAR 0 4
20284: PUSH
20285: EMPTY
20286: LIST
20287: LIST
20288: ST_TO_ADDR
// break ;
20289: GO 20293
// end ; end ;
20291: GO 20093
20293: POP
20294: POP
// if result then
20295: LD_VAR 0 1
20299: IFFALSE 20359
// begin ToLua ( playSibBomb() ) ;
20301: LD_STRING playSibBomb()
20303: PPUSH
20304: CALL_OW 559
// wait ( 0 0$14 ) ;
20308: LD_INT 490
20310: PPUSH
20311: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
20315: LD_VAR 0 1
20319: PUSH
20320: LD_INT 1
20322: ARRAY
20323: PPUSH
20324: LD_VAR 0 1
20328: PUSH
20329: LD_INT 2
20331: ARRAY
20332: PPUSH
20333: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
20337: LD_VAR 0 1
20341: PUSH
20342: LD_INT 1
20344: ARRAY
20345: PPUSH
20346: LD_VAR 0 1
20350: PUSH
20351: LD_INT 2
20353: ARRAY
20354: PPUSH
20355: CALL_OW 429
// end ; end ;
20359: LD_VAR 0 1
20363: RET
// every 0 0$1 trigger StreamModeActive and sReset do
20364: LD_EXP 22
20368: PUSH
20369: LD_EXP 44
20373: AND
20374: IFFALSE 20386
20376: GO 20378
20378: DISABLE
// YouLost (  ) ;
20379: LD_STRING 
20381: PPUSH
20382: CALL_OW 104
20386: END
// every 0 0$1 trigger StreamModeActive and sFog do
20387: LD_EXP 22
20391: PUSH
20392: LD_EXP 43
20396: AND
20397: IFFALSE 20411
20399: GO 20401
20401: DISABLE
// FogOff ( your_side ) ;
20402: LD_OWVAR 2
20406: PPUSH
20407: CALL_OW 344
20411: END
// every 0 0$1 trigger StreamModeActive and sSun do
20412: LD_EXP 22
20416: PUSH
20417: LD_EXP 45
20421: AND
20422: IFFALSE 20450
20424: GO 20426
20426: DISABLE
// begin solar_recharge_percent := 0 ;
20427: LD_ADDR_OWVAR 79
20431: PUSH
20432: LD_INT 0
20434: ST_TO_ADDR
// wait ( 5 5$00 ) ;
20435: LD_INT 10500
20437: PPUSH
20438: CALL_OW 67
// solar_recharge_percent := 100 ;
20442: LD_ADDR_OWVAR 79
20446: PUSH
20447: LD_INT 100
20449: ST_TO_ADDR
// end ;
20450: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
20451: LD_EXP 22
20455: PUSH
20456: LD_EXP 46
20460: AND
20461: IFFALSE 20700
20463: GO 20465
20465: DISABLE
20466: LD_INT 0
20468: PPUSH
20469: PPUSH
20470: PPUSH
// begin tmp := [ ] ;
20471: LD_ADDR_VAR 0 3
20475: PUSH
20476: EMPTY
20477: ST_TO_ADDR
// for i := 1 to 6 do
20478: LD_ADDR_VAR 0 1
20482: PUSH
20483: DOUBLE
20484: LD_INT 1
20486: DEC
20487: ST_TO_ADDR
20488: LD_INT 6
20490: PUSH
20491: FOR_TO
20492: IFFALSE 20597
// begin uc_nation := nation_nature ;
20494: LD_ADDR_OWVAR 21
20498: PUSH
20499: LD_INT 0
20501: ST_TO_ADDR
// uc_side := 0 ;
20502: LD_ADDR_OWVAR 20
20506: PUSH
20507: LD_INT 0
20509: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20510: LD_ADDR_OWVAR 29
20514: PUSH
20515: LD_INT 12
20517: PUSH
20518: LD_INT 12
20520: PUSH
20521: EMPTY
20522: LIST
20523: LIST
20524: ST_TO_ADDR
// hc_agressivity := 20 ;
20525: LD_ADDR_OWVAR 35
20529: PUSH
20530: LD_INT 20
20532: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
20533: LD_ADDR_OWVAR 28
20537: PUSH
20538: LD_INT 17
20540: ST_TO_ADDR
// hc_gallery :=  ;
20541: LD_ADDR_OWVAR 33
20545: PUSH
20546: LD_STRING 
20548: ST_TO_ADDR
// hc_name :=  ;
20549: LD_ADDR_OWVAR 26
20553: PUSH
20554: LD_STRING 
20556: ST_TO_ADDR
// un := CreateHuman ;
20557: LD_ADDR_VAR 0 2
20561: PUSH
20562: CALL_OW 44
20566: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
20567: LD_VAR 0 2
20571: PPUSH
20572: LD_INT 1
20574: PPUSH
20575: CALL_OW 51
// tmp := tmp ^ un ;
20579: LD_ADDR_VAR 0 3
20583: PUSH
20584: LD_VAR 0 3
20588: PUSH
20589: LD_VAR 0 2
20593: ADD
20594: ST_TO_ADDR
// end ;
20595: GO 20491
20597: POP
20598: POP
// repeat wait ( 0 0$1 ) ;
20599: LD_INT 35
20601: PPUSH
20602: CALL_OW 67
// for un in tmp do
20606: LD_ADDR_VAR 0 2
20610: PUSH
20611: LD_VAR 0 3
20615: PUSH
20616: FOR_IN
20617: IFFALSE 20691
// begin if IsDead ( un ) then
20619: LD_VAR 0 2
20623: PPUSH
20624: CALL_OW 301
20628: IFFALSE 20648
// begin tmp := tmp diff un ;
20630: LD_ADDR_VAR 0 3
20634: PUSH
20635: LD_VAR 0 3
20639: PUSH
20640: LD_VAR 0 2
20644: DIFF
20645: ST_TO_ADDR
// continue ;
20646: GO 20616
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
20648: LD_VAR 0 2
20652: PPUSH
20653: LD_INT 3
20655: PUSH
20656: LD_INT 22
20658: PUSH
20659: LD_INT 0
20661: PUSH
20662: EMPTY
20663: LIST
20664: LIST
20665: PUSH
20666: EMPTY
20667: LIST
20668: LIST
20669: PPUSH
20670: CALL_OW 69
20674: PPUSH
20675: LD_VAR 0 2
20679: PPUSH
20680: CALL_OW 74
20684: PPUSH
20685: CALL_OW 115
// end ;
20689: GO 20616
20691: POP
20692: POP
// until not tmp ;
20693: LD_VAR 0 3
20697: NOT
20698: IFFALSE 20599
// end ;
20700: PPOPN 3
20702: END
// every 0 0$1 trigger StreamModeActive and sTroll do
20703: LD_EXP 22
20707: PUSH
20708: LD_EXP 47
20712: AND
20713: IFFALSE 20767
20715: GO 20717
20717: DISABLE
// begin ToLua ( displayTroll(); ) ;
20718: LD_STRING displayTroll();
20720: PPUSH
20721: CALL_OW 559
// wait ( 3 3$00 ) ;
20725: LD_INT 6300
20727: PPUSH
20728: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20732: LD_STRING hideTroll();
20734: PPUSH
20735: CALL_OW 559
// wait ( 1 1$00 ) ;
20739: LD_INT 2100
20741: PPUSH
20742: CALL_OW 67
// ToLua ( displayTroll(); ) ;
20746: LD_STRING displayTroll();
20748: PPUSH
20749: CALL_OW 559
// wait ( 1 1$00 ) ;
20753: LD_INT 2100
20755: PPUSH
20756: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20760: LD_STRING hideTroll();
20762: PPUSH
20763: CALL_OW 559
// end ;
20767: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
20768: LD_EXP 22
20772: PUSH
20773: LD_EXP 48
20777: AND
20778: IFFALSE 20841
20780: GO 20782
20782: DISABLE
20783: LD_INT 0
20785: PPUSH
// begin p := 0 ;
20786: LD_ADDR_VAR 0 1
20790: PUSH
20791: LD_INT 0
20793: ST_TO_ADDR
// repeat game_speed := 1 ;
20794: LD_ADDR_OWVAR 65
20798: PUSH
20799: LD_INT 1
20801: ST_TO_ADDR
// wait ( 0 0$1 ) ;
20802: LD_INT 35
20804: PPUSH
20805: CALL_OW 67
// p := p + 1 ;
20809: LD_ADDR_VAR 0 1
20813: PUSH
20814: LD_VAR 0 1
20818: PUSH
20819: LD_INT 1
20821: PLUS
20822: ST_TO_ADDR
// until p >= 60 ;
20823: LD_VAR 0 1
20827: PUSH
20828: LD_INT 60
20830: GREATEREQUAL
20831: IFFALSE 20794
// game_speed := 4 ;
20833: LD_ADDR_OWVAR 65
20837: PUSH
20838: LD_INT 4
20840: ST_TO_ADDR
// end ;
20841: PPOPN 1
20843: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
20844: LD_EXP 22
20848: PUSH
20849: LD_EXP 49
20853: AND
20854: IFFALSE 21000
20856: GO 20858
20858: DISABLE
20859: LD_INT 0
20861: PPUSH
20862: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20863: LD_ADDR_VAR 0 1
20867: PUSH
20868: LD_INT 22
20870: PUSH
20871: LD_OWVAR 2
20875: PUSH
20876: EMPTY
20877: LIST
20878: LIST
20879: PUSH
20880: LD_INT 2
20882: PUSH
20883: LD_INT 30
20885: PUSH
20886: LD_INT 0
20888: PUSH
20889: EMPTY
20890: LIST
20891: LIST
20892: PUSH
20893: LD_INT 30
20895: PUSH
20896: LD_INT 1
20898: PUSH
20899: EMPTY
20900: LIST
20901: LIST
20902: PUSH
20903: EMPTY
20904: LIST
20905: LIST
20906: LIST
20907: PUSH
20908: EMPTY
20909: LIST
20910: LIST
20911: PPUSH
20912: CALL_OW 69
20916: ST_TO_ADDR
// if not depot then
20917: LD_VAR 0 1
20921: NOT
20922: IFFALSE 20926
// exit ;
20924: GO 21000
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20926: LD_ADDR_VAR 0 2
20930: PUSH
20931: LD_VAR 0 1
20935: PUSH
20936: LD_INT 1
20938: PPUSH
20939: LD_VAR 0 1
20943: PPUSH
20944: CALL_OW 12
20948: ARRAY
20949: PPUSH
20950: CALL_OW 274
20954: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
20955: LD_VAR 0 2
20959: PPUSH
20960: LD_INT 1
20962: PPUSH
20963: LD_INT 0
20965: PPUSH
20966: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
20970: LD_VAR 0 2
20974: PPUSH
20975: LD_INT 2
20977: PPUSH
20978: LD_INT 0
20980: PPUSH
20981: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
20985: LD_VAR 0 2
20989: PPUSH
20990: LD_INT 3
20992: PPUSH
20993: LD_INT 0
20995: PPUSH
20996: CALL_OW 277
// end ;
21000: PPOPN 2
21002: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
21003: LD_EXP 22
21007: PUSH
21008: LD_EXP 50
21012: AND
21013: IFFALSE 21110
21015: GO 21017
21017: DISABLE
21018: LD_INT 0
21020: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
21021: LD_ADDR_VAR 0 1
21025: PUSH
21026: LD_INT 22
21028: PUSH
21029: LD_OWVAR 2
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: PUSH
21038: LD_INT 21
21040: PUSH
21041: LD_INT 1
21043: PUSH
21044: EMPTY
21045: LIST
21046: LIST
21047: PUSH
21048: LD_INT 3
21050: PUSH
21051: LD_INT 23
21053: PUSH
21054: LD_INT 0
21056: PUSH
21057: EMPTY
21058: LIST
21059: LIST
21060: PUSH
21061: EMPTY
21062: LIST
21063: LIST
21064: PUSH
21065: EMPTY
21066: LIST
21067: LIST
21068: LIST
21069: PPUSH
21070: CALL_OW 69
21074: ST_TO_ADDR
// if not tmp then
21075: LD_VAR 0 1
21079: NOT
21080: IFFALSE 21084
// exit ;
21082: GO 21110
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
21084: LD_VAR 0 1
21088: PUSH
21089: LD_INT 1
21091: PPUSH
21092: LD_VAR 0 1
21096: PPUSH
21097: CALL_OW 12
21101: ARRAY
21102: PPUSH
21103: LD_INT 200
21105: PPUSH
21106: CALL_OW 234
// end ;
21110: PPOPN 1
21112: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
21113: LD_EXP 22
21117: PUSH
21118: LD_EXP 51
21122: AND
21123: IFFALSE 21202
21125: GO 21127
21127: DISABLE
21128: LD_INT 0
21130: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
21131: LD_ADDR_VAR 0 1
21135: PUSH
21136: LD_INT 22
21138: PUSH
21139: LD_OWVAR 2
21143: PUSH
21144: EMPTY
21145: LIST
21146: LIST
21147: PUSH
21148: LD_INT 21
21150: PUSH
21151: LD_INT 2
21153: PUSH
21154: EMPTY
21155: LIST
21156: LIST
21157: PUSH
21158: EMPTY
21159: LIST
21160: LIST
21161: PPUSH
21162: CALL_OW 69
21166: ST_TO_ADDR
// if not tmp then
21167: LD_VAR 0 1
21171: NOT
21172: IFFALSE 21176
// exit ;
21174: GO 21202
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
21176: LD_VAR 0 1
21180: PUSH
21181: LD_INT 1
21183: PPUSH
21184: LD_VAR 0 1
21188: PPUSH
21189: CALL_OW 12
21193: ARRAY
21194: PPUSH
21195: LD_INT 60
21197: PPUSH
21198: CALL_OW 234
// end ;
21202: PPOPN 1
21204: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
21205: LD_EXP 22
21209: PUSH
21210: LD_EXP 52
21214: AND
21215: IFFALSE 21314
21217: GO 21219
21219: DISABLE
21220: LD_INT 0
21222: PPUSH
21223: PPUSH
// begin enable ;
21224: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
21225: LD_ADDR_VAR 0 1
21229: PUSH
21230: LD_INT 22
21232: PUSH
21233: LD_OWVAR 2
21237: PUSH
21238: EMPTY
21239: LIST
21240: LIST
21241: PUSH
21242: LD_INT 61
21244: PUSH
21245: EMPTY
21246: LIST
21247: PUSH
21248: LD_INT 33
21250: PUSH
21251: LD_INT 2
21253: PUSH
21254: EMPTY
21255: LIST
21256: LIST
21257: PUSH
21258: EMPTY
21259: LIST
21260: LIST
21261: LIST
21262: PPUSH
21263: CALL_OW 69
21267: ST_TO_ADDR
// if not tmp then
21268: LD_VAR 0 1
21272: NOT
21273: IFFALSE 21277
// exit ;
21275: GO 21314
// for i in tmp do
21277: LD_ADDR_VAR 0 2
21281: PUSH
21282: LD_VAR 0 1
21286: PUSH
21287: FOR_IN
21288: IFFALSE 21312
// if IsControledBy ( i ) then
21290: LD_VAR 0 2
21294: PPUSH
21295: CALL_OW 312
21299: IFFALSE 21310
// ComUnlink ( i ) ;
21301: LD_VAR 0 2
21305: PPUSH
21306: CALL_OW 136
21310: GO 21287
21312: POP
21313: POP
// end ;
21314: PPOPN 2
21316: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
21317: LD_EXP 22
21321: PUSH
21322: LD_EXP 53
21326: AND
21327: IFFALSE 21467
21329: GO 21331
21331: DISABLE
21332: LD_INT 0
21334: PPUSH
21335: PPUSH
// begin ToLua ( displayPowell(); ) ;
21336: LD_STRING displayPowell();
21338: PPUSH
21339: CALL_OW 559
// uc_side := 0 ;
21343: LD_ADDR_OWVAR 20
21347: PUSH
21348: LD_INT 0
21350: ST_TO_ADDR
// uc_nation := 2 ;
21351: LD_ADDR_OWVAR 21
21355: PUSH
21356: LD_INT 2
21358: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
21359: LD_ADDR_OWVAR 37
21363: PUSH
21364: LD_INT 14
21366: ST_TO_ADDR
// vc_engine := engine_siberite ;
21367: LD_ADDR_OWVAR 39
21371: PUSH
21372: LD_INT 3
21374: ST_TO_ADDR
// vc_control := control_apeman ;
21375: LD_ADDR_OWVAR 38
21379: PUSH
21380: LD_INT 5
21382: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
21383: LD_ADDR_OWVAR 40
21387: PUSH
21388: LD_INT 29
21390: ST_TO_ADDR
// un := CreateVehicle ;
21391: LD_ADDR_VAR 0 2
21395: PUSH
21396: CALL_OW 45
21400: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21401: LD_VAR 0 2
21405: PPUSH
21406: LD_INT 1
21408: PPUSH
21409: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21413: LD_INT 35
21415: PPUSH
21416: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21420: LD_VAR 0 2
21424: PPUSH
21425: LD_INT 22
21427: PUSH
21428: LD_OWVAR 2
21432: PUSH
21433: EMPTY
21434: LIST
21435: LIST
21436: PPUSH
21437: CALL_OW 69
21441: PPUSH
21442: LD_VAR 0 2
21446: PPUSH
21447: CALL_OW 74
21451: PPUSH
21452: CALL_OW 115
// until IsDead ( un ) ;
21456: LD_VAR 0 2
21460: PPUSH
21461: CALL_OW 301
21465: IFFALSE 21413
// end ;
21467: PPOPN 2
21469: END
// every 0 0$1 trigger StreamModeActive and sStu do
21470: LD_EXP 22
21474: PUSH
21475: LD_EXP 61
21479: AND
21480: IFFALSE 21496
21482: GO 21484
21484: DISABLE
// begin ToLua ( displayStucuk(); ) ;
21485: LD_STRING displayStucuk();
21487: PPUSH
21488: CALL_OW 559
// ResetFog ;
21492: CALL_OW 335
// end ;
21496: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
21497: LD_EXP 22
21501: PUSH
21502: LD_EXP 54
21506: AND
21507: IFFALSE 21648
21509: GO 21511
21511: DISABLE
21512: LD_INT 0
21514: PPUSH
21515: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21516: LD_ADDR_VAR 0 2
21520: PUSH
21521: LD_INT 22
21523: PUSH
21524: LD_OWVAR 2
21528: PUSH
21529: EMPTY
21530: LIST
21531: LIST
21532: PUSH
21533: LD_INT 21
21535: PUSH
21536: LD_INT 1
21538: PUSH
21539: EMPTY
21540: LIST
21541: LIST
21542: PUSH
21543: EMPTY
21544: LIST
21545: LIST
21546: PPUSH
21547: CALL_OW 69
21551: ST_TO_ADDR
// if not tmp then
21552: LD_VAR 0 2
21556: NOT
21557: IFFALSE 21561
// exit ;
21559: GO 21648
// un := tmp [ rand ( 1 , tmp ) ] ;
21561: LD_ADDR_VAR 0 1
21565: PUSH
21566: LD_VAR 0 2
21570: PUSH
21571: LD_INT 1
21573: PPUSH
21574: LD_VAR 0 2
21578: PPUSH
21579: CALL_OW 12
21583: ARRAY
21584: ST_TO_ADDR
// SetSide ( un , 0 ) ;
21585: LD_VAR 0 1
21589: PPUSH
21590: LD_INT 0
21592: PPUSH
21593: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
21597: LD_VAR 0 1
21601: PPUSH
21602: LD_OWVAR 3
21606: PUSH
21607: LD_VAR 0 1
21611: DIFF
21612: PPUSH
21613: LD_VAR 0 1
21617: PPUSH
21618: CALL_OW 74
21622: PPUSH
21623: CALL_OW 115
// wait ( 0 0$20 ) ;
21627: LD_INT 700
21629: PPUSH
21630: CALL_OW 67
// SetSide ( un , your_side ) ;
21634: LD_VAR 0 1
21638: PPUSH
21639: LD_OWVAR 2
21643: PPUSH
21644: CALL_OW 235
// end ;
21648: PPOPN 2
21650: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
21651: LD_EXP 22
21655: PUSH
21656: LD_EXP 55
21660: AND
21661: IFFALSE 21767
21663: GO 21665
21665: DISABLE
21666: LD_INT 0
21668: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21669: LD_ADDR_VAR 0 1
21673: PUSH
21674: LD_INT 22
21676: PUSH
21677: LD_OWVAR 2
21681: PUSH
21682: EMPTY
21683: LIST
21684: LIST
21685: PUSH
21686: LD_INT 2
21688: PUSH
21689: LD_INT 30
21691: PUSH
21692: LD_INT 0
21694: PUSH
21695: EMPTY
21696: LIST
21697: LIST
21698: PUSH
21699: LD_INT 30
21701: PUSH
21702: LD_INT 1
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: PUSH
21709: EMPTY
21710: LIST
21711: LIST
21712: LIST
21713: PUSH
21714: EMPTY
21715: LIST
21716: LIST
21717: PPUSH
21718: CALL_OW 69
21722: ST_TO_ADDR
// if not depot then
21723: LD_VAR 0 1
21727: NOT
21728: IFFALSE 21732
// exit ;
21730: GO 21767
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
21732: LD_VAR 0 1
21736: PUSH
21737: LD_INT 1
21739: ARRAY
21740: PPUSH
21741: CALL_OW 250
21745: PPUSH
21746: LD_VAR 0 1
21750: PUSH
21751: LD_INT 1
21753: ARRAY
21754: PPUSH
21755: CALL_OW 251
21759: PPUSH
21760: LD_INT 70
21762: PPUSH
21763: CALL_OW 495
// end ;
21767: PPOPN 1
21769: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
21770: LD_EXP 22
21774: PUSH
21775: LD_EXP 56
21779: AND
21780: IFFALSE 21991
21782: GO 21784
21784: DISABLE
21785: LD_INT 0
21787: PPUSH
21788: PPUSH
21789: PPUSH
21790: PPUSH
21791: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21792: LD_ADDR_VAR 0 5
21796: PUSH
21797: LD_INT 22
21799: PUSH
21800: LD_OWVAR 2
21804: PUSH
21805: EMPTY
21806: LIST
21807: LIST
21808: PUSH
21809: LD_INT 21
21811: PUSH
21812: LD_INT 1
21814: PUSH
21815: EMPTY
21816: LIST
21817: LIST
21818: PUSH
21819: EMPTY
21820: LIST
21821: LIST
21822: PPUSH
21823: CALL_OW 69
21827: ST_TO_ADDR
// if not tmp then
21828: LD_VAR 0 5
21832: NOT
21833: IFFALSE 21837
// exit ;
21835: GO 21991
// for i in tmp do
21837: LD_ADDR_VAR 0 1
21841: PUSH
21842: LD_VAR 0 5
21846: PUSH
21847: FOR_IN
21848: IFFALSE 21989
// begin d := rand ( 0 , 5 ) ;
21850: LD_ADDR_VAR 0 4
21854: PUSH
21855: LD_INT 0
21857: PPUSH
21858: LD_INT 5
21860: PPUSH
21861: CALL_OW 12
21865: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
21866: LD_ADDR_VAR 0 2
21870: PUSH
21871: LD_VAR 0 1
21875: PPUSH
21876: CALL_OW 250
21880: PPUSH
21881: LD_VAR 0 4
21885: PPUSH
21886: LD_INT 3
21888: PPUSH
21889: LD_INT 12
21891: PPUSH
21892: CALL_OW 12
21896: PPUSH
21897: CALL_OW 272
21901: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
21902: LD_ADDR_VAR 0 3
21906: PUSH
21907: LD_VAR 0 1
21911: PPUSH
21912: CALL_OW 251
21916: PPUSH
21917: LD_VAR 0 4
21921: PPUSH
21922: LD_INT 3
21924: PPUSH
21925: LD_INT 12
21927: PPUSH
21928: CALL_OW 12
21932: PPUSH
21933: CALL_OW 273
21937: ST_TO_ADDR
// if ValidHex ( x , y ) then
21938: LD_VAR 0 2
21942: PPUSH
21943: LD_VAR 0 3
21947: PPUSH
21948: CALL_OW 488
21952: IFFALSE 21987
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
21954: LD_VAR 0 1
21958: PPUSH
21959: LD_VAR 0 2
21963: PPUSH
21964: LD_VAR 0 3
21968: PPUSH
21969: LD_INT 3
21971: PPUSH
21972: LD_INT 6
21974: PPUSH
21975: CALL_OW 12
21979: PPUSH
21980: LD_INT 1
21982: PPUSH
21983: CALL_OW 483
// end ;
21987: GO 21847
21989: POP
21990: POP
// end ;
21991: PPOPN 5
21993: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
21994: LD_EXP 22
21998: PUSH
21999: LD_EXP 57
22003: AND
22004: IFFALSE 22098
22006: GO 22008
22008: DISABLE
22009: LD_INT 0
22011: PPUSH
22012: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
22013: LD_ADDR_VAR 0 2
22017: PUSH
22018: LD_INT 22
22020: PUSH
22021: LD_OWVAR 2
22025: PUSH
22026: EMPTY
22027: LIST
22028: LIST
22029: PUSH
22030: LD_INT 32
22032: PUSH
22033: LD_INT 1
22035: PUSH
22036: EMPTY
22037: LIST
22038: LIST
22039: PUSH
22040: LD_INT 21
22042: PUSH
22043: LD_INT 2
22045: PUSH
22046: EMPTY
22047: LIST
22048: LIST
22049: PUSH
22050: EMPTY
22051: LIST
22052: LIST
22053: LIST
22054: PPUSH
22055: CALL_OW 69
22059: ST_TO_ADDR
// if not tmp then
22060: LD_VAR 0 2
22064: NOT
22065: IFFALSE 22069
// exit ;
22067: GO 22098
// for i in tmp do
22069: LD_ADDR_VAR 0 1
22073: PUSH
22074: LD_VAR 0 2
22078: PUSH
22079: FOR_IN
22080: IFFALSE 22096
// SetFuel ( i , 0 ) ;
22082: LD_VAR 0 1
22086: PPUSH
22087: LD_INT 0
22089: PPUSH
22090: CALL_OW 240
22094: GO 22079
22096: POP
22097: POP
// end ;
22098: PPOPN 2
22100: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
22101: LD_EXP 22
22105: PUSH
22106: LD_EXP 58
22110: AND
22111: IFFALSE 22177
22113: GO 22115
22115: DISABLE
22116: LD_INT 0
22118: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22119: LD_ADDR_VAR 0 1
22123: PUSH
22124: LD_INT 22
22126: PUSH
22127: LD_OWVAR 2
22131: PUSH
22132: EMPTY
22133: LIST
22134: LIST
22135: PUSH
22136: LD_INT 30
22138: PUSH
22139: LD_INT 29
22141: PUSH
22142: EMPTY
22143: LIST
22144: LIST
22145: PUSH
22146: EMPTY
22147: LIST
22148: LIST
22149: PPUSH
22150: CALL_OW 69
22154: ST_TO_ADDR
// if not tmp then
22155: LD_VAR 0 1
22159: NOT
22160: IFFALSE 22164
// exit ;
22162: GO 22177
// DestroyUnit ( tmp [ 1 ] ) ;
22164: LD_VAR 0 1
22168: PUSH
22169: LD_INT 1
22171: ARRAY
22172: PPUSH
22173: CALL_OW 65
// end ;
22177: PPOPN 1
22179: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
22180: LD_EXP 22
22184: PUSH
22185: LD_EXP 60
22189: AND
22190: IFFALSE 22319
22192: GO 22194
22194: DISABLE
22195: LD_INT 0
22197: PPUSH
// begin uc_side := 0 ;
22198: LD_ADDR_OWVAR 20
22202: PUSH
22203: LD_INT 0
22205: ST_TO_ADDR
// uc_nation := nation_arabian ;
22206: LD_ADDR_OWVAR 21
22210: PUSH
22211: LD_INT 2
22213: ST_TO_ADDR
// hc_gallery :=  ;
22214: LD_ADDR_OWVAR 33
22218: PUSH
22219: LD_STRING 
22221: ST_TO_ADDR
// hc_name :=  ;
22222: LD_ADDR_OWVAR 26
22226: PUSH
22227: LD_STRING 
22229: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
22230: LD_INT 1
22232: PPUSH
22233: LD_INT 11
22235: PPUSH
22236: LD_INT 10
22238: PPUSH
22239: CALL_OW 380
// un := CreateHuman ;
22243: LD_ADDR_VAR 0 1
22247: PUSH
22248: CALL_OW 44
22252: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22253: LD_VAR 0 1
22257: PPUSH
22258: LD_INT 1
22260: PPUSH
22261: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
22265: LD_INT 35
22267: PPUSH
22268: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
22272: LD_VAR 0 1
22276: PPUSH
22277: LD_INT 22
22279: PUSH
22280: LD_OWVAR 2
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: PPUSH
22289: CALL_OW 69
22293: PPUSH
22294: LD_VAR 0 1
22298: PPUSH
22299: CALL_OW 74
22303: PPUSH
22304: CALL_OW 115
// until IsDead ( un ) ;
22308: LD_VAR 0 1
22312: PPUSH
22313: CALL_OW 301
22317: IFFALSE 22265
// end ;
22319: PPOPN 1
22321: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
22322: LD_EXP 22
22326: PUSH
22327: LD_EXP 62
22331: AND
22332: IFFALSE 22344
22334: GO 22336
22336: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
22337: LD_STRING earthquake(getX(game), 0, 32)
22339: PPUSH
22340: CALL_OW 559
22344: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
22345: LD_EXP 22
22349: PUSH
22350: LD_EXP 63
22354: AND
22355: IFFALSE 22446
22357: GO 22359
22359: DISABLE
22360: LD_INT 0
22362: PPUSH
// begin enable ;
22363: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
22364: LD_ADDR_VAR 0 1
22368: PUSH
22369: LD_INT 22
22371: PUSH
22372: LD_OWVAR 2
22376: PUSH
22377: EMPTY
22378: LIST
22379: LIST
22380: PUSH
22381: LD_INT 21
22383: PUSH
22384: LD_INT 2
22386: PUSH
22387: EMPTY
22388: LIST
22389: LIST
22390: PUSH
22391: LD_INT 33
22393: PUSH
22394: LD_INT 3
22396: PUSH
22397: EMPTY
22398: LIST
22399: LIST
22400: PUSH
22401: EMPTY
22402: LIST
22403: LIST
22404: LIST
22405: PPUSH
22406: CALL_OW 69
22410: ST_TO_ADDR
// if not tmp then
22411: LD_VAR 0 1
22415: NOT
22416: IFFALSE 22420
// exit ;
22418: GO 22446
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22420: LD_VAR 0 1
22424: PUSH
22425: LD_INT 1
22427: PPUSH
22428: LD_VAR 0 1
22432: PPUSH
22433: CALL_OW 12
22437: ARRAY
22438: PPUSH
22439: LD_INT 1
22441: PPUSH
22442: CALL_OW 234
// end ;
22446: PPOPN 1
22448: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
22449: LD_EXP 22
22453: PUSH
22454: LD_EXP 64
22458: AND
22459: IFFALSE 22600
22461: GO 22463
22463: DISABLE
22464: LD_INT 0
22466: PPUSH
22467: PPUSH
22468: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22469: LD_ADDR_VAR 0 3
22473: PUSH
22474: LD_INT 22
22476: PUSH
22477: LD_OWVAR 2
22481: PUSH
22482: EMPTY
22483: LIST
22484: LIST
22485: PUSH
22486: LD_INT 25
22488: PUSH
22489: LD_INT 1
22491: PUSH
22492: EMPTY
22493: LIST
22494: LIST
22495: PUSH
22496: EMPTY
22497: LIST
22498: LIST
22499: PPUSH
22500: CALL_OW 69
22504: ST_TO_ADDR
// if not tmp then
22505: LD_VAR 0 3
22509: NOT
22510: IFFALSE 22514
// exit ;
22512: GO 22600
// un := tmp [ rand ( 1 , tmp ) ] ;
22514: LD_ADDR_VAR 0 2
22518: PUSH
22519: LD_VAR 0 3
22523: PUSH
22524: LD_INT 1
22526: PPUSH
22527: LD_VAR 0 3
22531: PPUSH
22532: CALL_OW 12
22536: ARRAY
22537: ST_TO_ADDR
// if Crawls ( un ) then
22538: LD_VAR 0 2
22542: PPUSH
22543: CALL_OW 318
22547: IFFALSE 22558
// ComWalk ( un ) ;
22549: LD_VAR 0 2
22553: PPUSH
22554: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
22558: LD_VAR 0 2
22562: PPUSH
22563: LD_INT 9
22565: PPUSH
22566: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
22570: LD_INT 28
22572: PPUSH
22573: LD_OWVAR 2
22577: PPUSH
22578: LD_INT 2
22580: PPUSH
22581: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
22585: LD_INT 29
22587: PPUSH
22588: LD_OWVAR 2
22592: PPUSH
22593: LD_INT 2
22595: PPUSH
22596: CALL_OW 322
// end ;
22600: PPOPN 3
22602: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
22603: LD_EXP 22
22607: PUSH
22608: LD_EXP 65
22612: AND
22613: IFFALSE 22724
22615: GO 22617
22617: DISABLE
22618: LD_INT 0
22620: PPUSH
22621: PPUSH
22622: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22623: LD_ADDR_VAR 0 3
22627: PUSH
22628: LD_INT 22
22630: PUSH
22631: LD_OWVAR 2
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: PUSH
22640: LD_INT 25
22642: PUSH
22643: LD_INT 1
22645: PUSH
22646: EMPTY
22647: LIST
22648: LIST
22649: PUSH
22650: EMPTY
22651: LIST
22652: LIST
22653: PPUSH
22654: CALL_OW 69
22658: ST_TO_ADDR
// if not tmp then
22659: LD_VAR 0 3
22663: NOT
22664: IFFALSE 22668
// exit ;
22666: GO 22724
// un := tmp [ rand ( 1 , tmp ) ] ;
22668: LD_ADDR_VAR 0 2
22672: PUSH
22673: LD_VAR 0 3
22677: PUSH
22678: LD_INT 1
22680: PPUSH
22681: LD_VAR 0 3
22685: PPUSH
22686: CALL_OW 12
22690: ARRAY
22691: ST_TO_ADDR
// if Crawls ( un ) then
22692: LD_VAR 0 2
22696: PPUSH
22697: CALL_OW 318
22701: IFFALSE 22712
// ComWalk ( un ) ;
22703: LD_VAR 0 2
22707: PPUSH
22708: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22712: LD_VAR 0 2
22716: PPUSH
22717: LD_INT 8
22719: PPUSH
22720: CALL_OW 336
// end ;
22724: PPOPN 3
22726: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
22727: LD_EXP 22
22731: PUSH
22732: LD_EXP 66
22736: AND
22737: IFFALSE 22881
22739: GO 22741
22741: DISABLE
22742: LD_INT 0
22744: PPUSH
22745: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
22746: LD_ADDR_VAR 0 2
22750: PUSH
22751: LD_INT 22
22753: PUSH
22754: LD_OWVAR 2
22758: PUSH
22759: EMPTY
22760: LIST
22761: LIST
22762: PUSH
22763: LD_INT 21
22765: PUSH
22766: LD_INT 2
22768: PUSH
22769: EMPTY
22770: LIST
22771: LIST
22772: PUSH
22773: LD_INT 2
22775: PUSH
22776: LD_INT 34
22778: PUSH
22779: LD_INT 12
22781: PUSH
22782: EMPTY
22783: LIST
22784: LIST
22785: PUSH
22786: LD_INT 34
22788: PUSH
22789: LD_INT 51
22791: PUSH
22792: EMPTY
22793: LIST
22794: LIST
22795: PUSH
22796: LD_INT 34
22798: PUSH
22799: LD_INT 32
22801: PUSH
22802: EMPTY
22803: LIST
22804: LIST
22805: PUSH
22806: EMPTY
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: PUSH
22812: EMPTY
22813: LIST
22814: LIST
22815: LIST
22816: PPUSH
22817: CALL_OW 69
22821: ST_TO_ADDR
// if not tmp then
22822: LD_VAR 0 2
22826: NOT
22827: IFFALSE 22831
// exit ;
22829: GO 22881
// for i in tmp do
22831: LD_ADDR_VAR 0 1
22835: PUSH
22836: LD_VAR 0 2
22840: PUSH
22841: FOR_IN
22842: IFFALSE 22879
// if GetCargo ( i , mat_artifact ) = 0 then
22844: LD_VAR 0 1
22848: PPUSH
22849: LD_INT 4
22851: PPUSH
22852: CALL_OW 289
22856: PUSH
22857: LD_INT 0
22859: EQUAL
22860: IFFALSE 22877
// SetCargo ( i , mat_siberit , 100 ) ;
22862: LD_VAR 0 1
22866: PPUSH
22867: LD_INT 3
22869: PPUSH
22870: LD_INT 100
22872: PPUSH
22873: CALL_OW 290
22877: GO 22841
22879: POP
22880: POP
// end ;
22881: PPOPN 2
22883: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
22884: LD_EXP 22
22888: PUSH
22889: LD_EXP 67
22893: AND
22894: IFFALSE 23077
22896: GO 22898
22898: DISABLE
22899: LD_INT 0
22901: PPUSH
22902: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22903: LD_ADDR_VAR 0 2
22907: PUSH
22908: LD_INT 22
22910: PUSH
22911: LD_OWVAR 2
22915: PUSH
22916: EMPTY
22917: LIST
22918: LIST
22919: PPUSH
22920: CALL_OW 69
22924: ST_TO_ADDR
// if not tmp then
22925: LD_VAR 0 2
22929: NOT
22930: IFFALSE 22934
// exit ;
22932: GO 23077
// for i := 1 to 2 do
22934: LD_ADDR_VAR 0 1
22938: PUSH
22939: DOUBLE
22940: LD_INT 1
22942: DEC
22943: ST_TO_ADDR
22944: LD_INT 2
22946: PUSH
22947: FOR_TO
22948: IFFALSE 23075
// begin uc_side := your_side ;
22950: LD_ADDR_OWVAR 20
22954: PUSH
22955: LD_OWVAR 2
22959: ST_TO_ADDR
// uc_nation := nation_american ;
22960: LD_ADDR_OWVAR 21
22964: PUSH
22965: LD_INT 1
22967: ST_TO_ADDR
// vc_chassis := us_morphling ;
22968: LD_ADDR_OWVAR 37
22972: PUSH
22973: LD_INT 5
22975: ST_TO_ADDR
// vc_engine := engine_siberite ;
22976: LD_ADDR_OWVAR 39
22980: PUSH
22981: LD_INT 3
22983: ST_TO_ADDR
// vc_control := control_computer ;
22984: LD_ADDR_OWVAR 38
22988: PUSH
22989: LD_INT 3
22991: ST_TO_ADDR
// vc_weapon := us_double_laser ;
22992: LD_ADDR_OWVAR 40
22996: PUSH
22997: LD_INT 10
22999: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
23000: LD_VAR 0 2
23004: PUSH
23005: LD_INT 1
23007: ARRAY
23008: PPUSH
23009: CALL_OW 310
23013: NOT
23014: IFFALSE 23061
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
23016: CALL_OW 45
23020: PPUSH
23021: LD_VAR 0 2
23025: PUSH
23026: LD_INT 1
23028: ARRAY
23029: PPUSH
23030: CALL_OW 250
23034: PPUSH
23035: LD_VAR 0 2
23039: PUSH
23040: LD_INT 1
23042: ARRAY
23043: PPUSH
23044: CALL_OW 251
23048: PPUSH
23049: LD_INT 12
23051: PPUSH
23052: LD_INT 1
23054: PPUSH
23055: CALL_OW 50
23059: GO 23073
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
23061: CALL_OW 45
23065: PPUSH
23066: LD_INT 1
23068: PPUSH
23069: CALL_OW 51
// end ;
23073: GO 22947
23075: POP
23076: POP
// end ;
23077: PPOPN 2
23079: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
23080: LD_EXP 22
23084: PUSH
23085: LD_EXP 68
23089: AND
23090: IFFALSE 23312
23092: GO 23094
23094: DISABLE
23095: LD_INT 0
23097: PPUSH
23098: PPUSH
23099: PPUSH
23100: PPUSH
23101: PPUSH
23102: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23103: LD_ADDR_VAR 0 6
23107: PUSH
23108: LD_INT 22
23110: PUSH
23111: LD_OWVAR 2
23115: PUSH
23116: EMPTY
23117: LIST
23118: LIST
23119: PUSH
23120: LD_INT 21
23122: PUSH
23123: LD_INT 1
23125: PUSH
23126: EMPTY
23127: LIST
23128: LIST
23129: PUSH
23130: LD_INT 3
23132: PUSH
23133: LD_INT 23
23135: PUSH
23136: LD_INT 0
23138: PUSH
23139: EMPTY
23140: LIST
23141: LIST
23142: PUSH
23143: EMPTY
23144: LIST
23145: LIST
23146: PUSH
23147: EMPTY
23148: LIST
23149: LIST
23150: LIST
23151: PPUSH
23152: CALL_OW 69
23156: ST_TO_ADDR
// if not tmp then
23157: LD_VAR 0 6
23161: NOT
23162: IFFALSE 23166
// exit ;
23164: GO 23312
// s1 := rand ( 1 , 4 ) ;
23166: LD_ADDR_VAR 0 2
23170: PUSH
23171: LD_INT 1
23173: PPUSH
23174: LD_INT 4
23176: PPUSH
23177: CALL_OW 12
23181: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
23182: LD_ADDR_VAR 0 4
23186: PUSH
23187: LD_VAR 0 6
23191: PUSH
23192: LD_INT 1
23194: ARRAY
23195: PPUSH
23196: LD_VAR 0 2
23200: PPUSH
23201: CALL_OW 259
23205: ST_TO_ADDR
// if s1 = 1 then
23206: LD_VAR 0 2
23210: PUSH
23211: LD_INT 1
23213: EQUAL
23214: IFFALSE 23234
// s2 := rand ( 2 , 4 ) else
23216: LD_ADDR_VAR 0 3
23220: PUSH
23221: LD_INT 2
23223: PPUSH
23224: LD_INT 4
23226: PPUSH
23227: CALL_OW 12
23231: ST_TO_ADDR
23232: GO 23242
// s2 := 1 ;
23234: LD_ADDR_VAR 0 3
23238: PUSH
23239: LD_INT 1
23241: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
23242: LD_ADDR_VAR 0 5
23246: PUSH
23247: LD_VAR 0 6
23251: PUSH
23252: LD_INT 1
23254: ARRAY
23255: PPUSH
23256: LD_VAR 0 3
23260: PPUSH
23261: CALL_OW 259
23265: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
23266: LD_VAR 0 6
23270: PUSH
23271: LD_INT 1
23273: ARRAY
23274: PPUSH
23275: LD_VAR 0 2
23279: PPUSH
23280: LD_VAR 0 5
23284: PPUSH
23285: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
23289: LD_VAR 0 6
23293: PUSH
23294: LD_INT 1
23296: ARRAY
23297: PPUSH
23298: LD_VAR 0 3
23302: PPUSH
23303: LD_VAR 0 4
23307: PPUSH
23308: CALL_OW 237
// end ;
23312: PPOPN 6
23314: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
23315: LD_EXP 22
23319: PUSH
23320: LD_EXP 69
23324: AND
23325: IFFALSE 23404
23327: GO 23329
23329: DISABLE
23330: LD_INT 0
23332: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
23333: LD_ADDR_VAR 0 1
23337: PUSH
23338: LD_INT 22
23340: PUSH
23341: LD_OWVAR 2
23345: PUSH
23346: EMPTY
23347: LIST
23348: LIST
23349: PUSH
23350: LD_INT 30
23352: PUSH
23353: LD_INT 3
23355: PUSH
23356: EMPTY
23357: LIST
23358: LIST
23359: PUSH
23360: EMPTY
23361: LIST
23362: LIST
23363: PPUSH
23364: CALL_OW 69
23368: ST_TO_ADDR
// if not tmp then
23369: LD_VAR 0 1
23373: NOT
23374: IFFALSE 23378
// exit ;
23376: GO 23404
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
23378: LD_VAR 0 1
23382: PUSH
23383: LD_INT 1
23385: PPUSH
23386: LD_VAR 0 1
23390: PPUSH
23391: CALL_OW 12
23395: ARRAY
23396: PPUSH
23397: LD_INT 1
23399: PPUSH
23400: CALL_OW 234
// end ;
23404: PPOPN 1
23406: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
23407: LD_EXP 22
23411: PUSH
23412: LD_EXP 70
23416: AND
23417: IFFALSE 23529
23419: GO 23421
23421: DISABLE
23422: LD_INT 0
23424: PPUSH
23425: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
23426: LD_ADDR_VAR 0 2
23430: PUSH
23431: LD_INT 22
23433: PUSH
23434: LD_OWVAR 2
23438: PUSH
23439: EMPTY
23440: LIST
23441: LIST
23442: PUSH
23443: LD_INT 2
23445: PUSH
23446: LD_INT 30
23448: PUSH
23449: LD_INT 27
23451: PUSH
23452: EMPTY
23453: LIST
23454: LIST
23455: PUSH
23456: LD_INT 30
23458: PUSH
23459: LD_INT 26
23461: PUSH
23462: EMPTY
23463: LIST
23464: LIST
23465: PUSH
23466: LD_INT 30
23468: PUSH
23469: LD_INT 28
23471: PUSH
23472: EMPTY
23473: LIST
23474: LIST
23475: PUSH
23476: EMPTY
23477: LIST
23478: LIST
23479: LIST
23480: LIST
23481: PUSH
23482: EMPTY
23483: LIST
23484: LIST
23485: PPUSH
23486: CALL_OW 69
23490: ST_TO_ADDR
// if not tmp then
23491: LD_VAR 0 2
23495: NOT
23496: IFFALSE 23500
// exit ;
23498: GO 23529
// for i in tmp do
23500: LD_ADDR_VAR 0 1
23504: PUSH
23505: LD_VAR 0 2
23509: PUSH
23510: FOR_IN
23511: IFFALSE 23527
// SetLives ( i , 1 ) ;
23513: LD_VAR 0 1
23517: PPUSH
23518: LD_INT 1
23520: PPUSH
23521: CALL_OW 234
23525: GO 23510
23527: POP
23528: POP
// end ;
23529: PPOPN 2
23531: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
23532: LD_EXP 22
23536: PUSH
23537: LD_EXP 71
23541: AND
23542: IFFALSE 23829
23544: GO 23546
23546: DISABLE
23547: LD_INT 0
23549: PPUSH
23550: PPUSH
23551: PPUSH
// begin i := rand ( 1 , 7 ) ;
23552: LD_ADDR_VAR 0 1
23556: PUSH
23557: LD_INT 1
23559: PPUSH
23560: LD_INT 7
23562: PPUSH
23563: CALL_OW 12
23567: ST_TO_ADDR
// case i of 1 :
23568: LD_VAR 0 1
23572: PUSH
23573: LD_INT 1
23575: DOUBLE
23576: EQUAL
23577: IFTRUE 23581
23579: GO 23591
23581: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
23582: LD_STRING earthquake(getX(game), 0, 32)
23584: PPUSH
23585: CALL_OW 559
23589: GO 23829
23591: LD_INT 2
23593: DOUBLE
23594: EQUAL
23595: IFTRUE 23599
23597: GO 23613
23599: POP
// begin ToLua ( displayStucuk(); ) ;
23600: LD_STRING displayStucuk();
23602: PPUSH
23603: CALL_OW 559
// ResetFog ;
23607: CALL_OW 335
// end ; 3 :
23611: GO 23829
23613: LD_INT 3
23615: DOUBLE
23616: EQUAL
23617: IFTRUE 23621
23619: GO 23725
23621: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23622: LD_ADDR_VAR 0 2
23626: PUSH
23627: LD_INT 22
23629: PUSH
23630: LD_OWVAR 2
23634: PUSH
23635: EMPTY
23636: LIST
23637: LIST
23638: PUSH
23639: LD_INT 25
23641: PUSH
23642: LD_INT 1
23644: PUSH
23645: EMPTY
23646: LIST
23647: LIST
23648: PUSH
23649: EMPTY
23650: LIST
23651: LIST
23652: PPUSH
23653: CALL_OW 69
23657: ST_TO_ADDR
// if not tmp then
23658: LD_VAR 0 2
23662: NOT
23663: IFFALSE 23667
// exit ;
23665: GO 23829
// un := tmp [ rand ( 1 , tmp ) ] ;
23667: LD_ADDR_VAR 0 3
23671: PUSH
23672: LD_VAR 0 2
23676: PUSH
23677: LD_INT 1
23679: PPUSH
23680: LD_VAR 0 2
23684: PPUSH
23685: CALL_OW 12
23689: ARRAY
23690: ST_TO_ADDR
// if Crawls ( un ) then
23691: LD_VAR 0 3
23695: PPUSH
23696: CALL_OW 318
23700: IFFALSE 23711
// ComWalk ( un ) ;
23702: LD_VAR 0 3
23706: PPUSH
23707: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23711: LD_VAR 0 3
23715: PPUSH
23716: LD_INT 8
23718: PPUSH
23719: CALL_OW 336
// end ; 4 :
23723: GO 23829
23725: LD_INT 4
23727: DOUBLE
23728: EQUAL
23729: IFTRUE 23733
23731: GO 23807
23733: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23734: LD_ADDR_VAR 0 2
23738: PUSH
23739: LD_INT 22
23741: PUSH
23742: LD_OWVAR 2
23746: PUSH
23747: EMPTY
23748: LIST
23749: LIST
23750: PUSH
23751: LD_INT 30
23753: PUSH
23754: LD_INT 29
23756: PUSH
23757: EMPTY
23758: LIST
23759: LIST
23760: PUSH
23761: EMPTY
23762: LIST
23763: LIST
23764: PPUSH
23765: CALL_OW 69
23769: ST_TO_ADDR
// if not tmp then
23770: LD_VAR 0 2
23774: NOT
23775: IFFALSE 23779
// exit ;
23777: GO 23829
// CenterNowOnUnits ( tmp [ 1 ] ) ;
23779: LD_VAR 0 2
23783: PUSH
23784: LD_INT 1
23786: ARRAY
23787: PPUSH
23788: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
23792: LD_VAR 0 2
23796: PUSH
23797: LD_INT 1
23799: ARRAY
23800: PPUSH
23801: CALL_OW 65
// end ; 5 .. 7 :
23805: GO 23829
23807: LD_INT 5
23809: DOUBLE
23810: GREATEREQUAL
23811: IFFALSE 23819
23813: LD_INT 7
23815: DOUBLE
23816: LESSEQUAL
23817: IFTRUE 23821
23819: GO 23828
23821: POP
// StreamSibBomb ; end ;
23822: CALL 20066 0 0
23826: GO 23829
23828: POP
// end ;
23829: PPOPN 3
23831: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
23832: LD_EXP 22
23836: PUSH
23837: LD_EXP 72
23841: AND
23842: IFFALSE 23998
23844: GO 23846
23846: DISABLE
23847: LD_INT 0
23849: PPUSH
23850: PPUSH
23851: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23852: LD_ADDR_VAR 0 2
23856: PUSH
23857: LD_INT 81
23859: PUSH
23860: LD_OWVAR 2
23864: PUSH
23865: EMPTY
23866: LIST
23867: LIST
23868: PUSH
23869: LD_INT 2
23871: PUSH
23872: LD_INT 21
23874: PUSH
23875: LD_INT 1
23877: PUSH
23878: EMPTY
23879: LIST
23880: LIST
23881: PUSH
23882: LD_INT 21
23884: PUSH
23885: LD_INT 2
23887: PUSH
23888: EMPTY
23889: LIST
23890: LIST
23891: PUSH
23892: EMPTY
23893: LIST
23894: LIST
23895: LIST
23896: PUSH
23897: EMPTY
23898: LIST
23899: LIST
23900: PPUSH
23901: CALL_OW 69
23905: ST_TO_ADDR
// if not tmp then
23906: LD_VAR 0 2
23910: NOT
23911: IFFALSE 23915
// exit ;
23913: GO 23998
// p := 0 ;
23915: LD_ADDR_VAR 0 3
23919: PUSH
23920: LD_INT 0
23922: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23923: LD_INT 35
23925: PPUSH
23926: CALL_OW 67
// p := p + 1 ;
23930: LD_ADDR_VAR 0 3
23934: PUSH
23935: LD_VAR 0 3
23939: PUSH
23940: LD_INT 1
23942: PLUS
23943: ST_TO_ADDR
// for i in tmp do
23944: LD_ADDR_VAR 0 1
23948: PUSH
23949: LD_VAR 0 2
23953: PUSH
23954: FOR_IN
23955: IFFALSE 23986
// if GetLives ( i ) < 1000 then
23957: LD_VAR 0 1
23961: PPUSH
23962: CALL_OW 256
23966: PUSH
23967: LD_INT 1000
23969: LESS
23970: IFFALSE 23984
// SetLives ( i , 1000 ) ;
23972: LD_VAR 0 1
23976: PPUSH
23977: LD_INT 1000
23979: PPUSH
23980: CALL_OW 234
23984: GO 23954
23986: POP
23987: POP
// until p > 20 ;
23988: LD_VAR 0 3
23992: PUSH
23993: LD_INT 20
23995: GREATER
23996: IFFALSE 23923
// end ;
23998: PPOPN 3
24000: END
// every 0 0$1 trigger StreamModeActive and sTime do
24001: LD_EXP 22
24005: PUSH
24006: LD_EXP 73
24010: AND
24011: IFFALSE 24046
24013: GO 24015
24015: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
24016: LD_INT 28
24018: PPUSH
24019: LD_OWVAR 2
24023: PPUSH
24024: LD_INT 2
24026: PPUSH
24027: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
24031: LD_INT 30
24033: PPUSH
24034: LD_OWVAR 2
24038: PPUSH
24039: LD_INT 2
24041: PPUSH
24042: CALL_OW 322
// end ;
24046: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
24047: LD_EXP 22
24051: PUSH
24052: LD_EXP 74
24056: AND
24057: IFFALSE 24178
24059: GO 24061
24061: DISABLE
24062: LD_INT 0
24064: PPUSH
24065: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24066: LD_ADDR_VAR 0 2
24070: PUSH
24071: LD_INT 22
24073: PUSH
24074: LD_OWVAR 2
24078: PUSH
24079: EMPTY
24080: LIST
24081: LIST
24082: PUSH
24083: LD_INT 21
24085: PUSH
24086: LD_INT 1
24088: PUSH
24089: EMPTY
24090: LIST
24091: LIST
24092: PUSH
24093: LD_INT 3
24095: PUSH
24096: LD_INT 23
24098: PUSH
24099: LD_INT 0
24101: PUSH
24102: EMPTY
24103: LIST
24104: LIST
24105: PUSH
24106: EMPTY
24107: LIST
24108: LIST
24109: PUSH
24110: EMPTY
24111: LIST
24112: LIST
24113: LIST
24114: PPUSH
24115: CALL_OW 69
24119: ST_TO_ADDR
// if not tmp then
24120: LD_VAR 0 2
24124: NOT
24125: IFFALSE 24129
// exit ;
24127: GO 24178
// for i in tmp do
24129: LD_ADDR_VAR 0 1
24133: PUSH
24134: LD_VAR 0 2
24138: PUSH
24139: FOR_IN
24140: IFFALSE 24176
// begin if Crawls ( i ) then
24142: LD_VAR 0 1
24146: PPUSH
24147: CALL_OW 318
24151: IFFALSE 24162
// ComWalk ( i ) ;
24153: LD_VAR 0 1
24157: PPUSH
24158: CALL_OW 138
// SetClass ( i , 2 ) ;
24162: LD_VAR 0 1
24166: PPUSH
24167: LD_INT 2
24169: PPUSH
24170: CALL_OW 336
// end ;
24174: GO 24139
24176: POP
24177: POP
// end ;
24178: PPOPN 2
24180: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
24181: LD_EXP 22
24185: PUSH
24186: LD_EXP 75
24190: AND
24191: IFFALSE 24479
24193: GO 24195
24195: DISABLE
24196: LD_INT 0
24198: PPUSH
24199: PPUSH
24200: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
24201: LD_OWVAR 2
24205: PPUSH
24206: LD_INT 9
24208: PPUSH
24209: LD_INT 1
24211: PPUSH
24212: LD_INT 1
24214: PPUSH
24215: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
24219: LD_INT 9
24221: PPUSH
24222: LD_OWVAR 2
24226: PPUSH
24227: CALL_OW 343
// uc_side := 9 ;
24231: LD_ADDR_OWVAR 20
24235: PUSH
24236: LD_INT 9
24238: ST_TO_ADDR
// uc_nation := 2 ;
24239: LD_ADDR_OWVAR 21
24243: PUSH
24244: LD_INT 2
24246: ST_TO_ADDR
// hc_name := Dark Warrior ;
24247: LD_ADDR_OWVAR 26
24251: PUSH
24252: LD_STRING Dark Warrior
24254: ST_TO_ADDR
// hc_gallery :=  ;
24255: LD_ADDR_OWVAR 33
24259: PUSH
24260: LD_STRING 
24262: ST_TO_ADDR
// hc_noskilllimit := true ;
24263: LD_ADDR_OWVAR 76
24267: PUSH
24268: LD_INT 1
24270: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
24271: LD_ADDR_OWVAR 31
24275: PUSH
24276: LD_INT 30
24278: PUSH
24279: LD_INT 30
24281: PUSH
24282: LD_INT 30
24284: PUSH
24285: LD_INT 30
24287: PUSH
24288: EMPTY
24289: LIST
24290: LIST
24291: LIST
24292: LIST
24293: ST_TO_ADDR
// un := CreateHuman ;
24294: LD_ADDR_VAR 0 3
24298: PUSH
24299: CALL_OW 44
24303: ST_TO_ADDR
// hc_noskilllimit := false ;
24304: LD_ADDR_OWVAR 76
24308: PUSH
24309: LD_INT 0
24311: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24312: LD_VAR 0 3
24316: PPUSH
24317: LD_INT 1
24319: PPUSH
24320: CALL_OW 51
// ToLua ( playRanger() ) ;
24324: LD_STRING playRanger()
24326: PPUSH
24327: CALL_OW 559
// p := 0 ;
24331: LD_ADDR_VAR 0 2
24335: PUSH
24336: LD_INT 0
24338: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24339: LD_INT 35
24341: PPUSH
24342: CALL_OW 67
// p := p + 1 ;
24346: LD_ADDR_VAR 0 2
24350: PUSH
24351: LD_VAR 0 2
24355: PUSH
24356: LD_INT 1
24358: PLUS
24359: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
24360: LD_VAR 0 3
24364: PPUSH
24365: CALL_OW 256
24369: PUSH
24370: LD_INT 1000
24372: LESS
24373: IFFALSE 24387
// SetLives ( un , 1000 ) ;
24375: LD_VAR 0 3
24379: PPUSH
24380: LD_INT 1000
24382: PPUSH
24383: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
24387: LD_VAR 0 3
24391: PPUSH
24392: LD_INT 81
24394: PUSH
24395: LD_OWVAR 2
24399: PUSH
24400: EMPTY
24401: LIST
24402: LIST
24403: PUSH
24404: LD_INT 91
24406: PUSH
24407: LD_VAR 0 3
24411: PUSH
24412: LD_INT 30
24414: PUSH
24415: EMPTY
24416: LIST
24417: LIST
24418: LIST
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: PPUSH
24424: CALL_OW 69
24428: PPUSH
24429: LD_VAR 0 3
24433: PPUSH
24434: CALL_OW 74
24438: PPUSH
24439: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
24443: LD_VAR 0 2
24447: PUSH
24448: LD_INT 80
24450: GREATER
24451: PUSH
24452: LD_VAR 0 3
24456: PPUSH
24457: CALL_OW 301
24461: OR
24462: IFFALSE 24339
// if un then
24464: LD_VAR 0 3
24468: IFFALSE 24479
// RemoveUnit ( un ) ;
24470: LD_VAR 0 3
24474: PPUSH
24475: CALL_OW 64
// end ;
24479: PPOPN 3
24481: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
24482: LD_EXP 76
24486: IFFALSE 24602
24488: GO 24490
24490: DISABLE
24491: LD_INT 0
24493: PPUSH
24494: PPUSH
24495: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24496: LD_ADDR_VAR 0 2
24500: PUSH
24501: LD_INT 81
24503: PUSH
24504: LD_OWVAR 2
24508: PUSH
24509: EMPTY
24510: LIST
24511: LIST
24512: PUSH
24513: LD_INT 21
24515: PUSH
24516: LD_INT 1
24518: PUSH
24519: EMPTY
24520: LIST
24521: LIST
24522: PUSH
24523: EMPTY
24524: LIST
24525: LIST
24526: PPUSH
24527: CALL_OW 69
24531: ST_TO_ADDR
// ToLua ( playComputer() ) ;
24532: LD_STRING playComputer()
24534: PPUSH
24535: CALL_OW 559
// if not tmp then
24539: LD_VAR 0 2
24543: NOT
24544: IFFALSE 24548
// exit ;
24546: GO 24602
// for i in tmp do
24548: LD_ADDR_VAR 0 1
24552: PUSH
24553: LD_VAR 0 2
24557: PUSH
24558: FOR_IN
24559: IFFALSE 24600
// for j := 1 to 4 do
24561: LD_ADDR_VAR 0 3
24565: PUSH
24566: DOUBLE
24567: LD_INT 1
24569: DEC
24570: ST_TO_ADDR
24571: LD_INT 4
24573: PUSH
24574: FOR_TO
24575: IFFALSE 24596
// SetSkill ( i , j , 10 ) ;
24577: LD_VAR 0 1
24581: PPUSH
24582: LD_VAR 0 3
24586: PPUSH
24587: LD_INT 10
24589: PPUSH
24590: CALL_OW 237
24594: GO 24574
24596: POP
24597: POP
24598: GO 24558
24600: POP
24601: POP
// end ;
24602: PPOPN 3
24604: END
// every 0 0$1 trigger s30 do var i , tmp ;
24605: LD_EXP 77
24609: IFFALSE 24678
24611: GO 24613
24613: DISABLE
24614: LD_INT 0
24616: PPUSH
24617: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24618: LD_ADDR_VAR 0 2
24622: PUSH
24623: LD_INT 22
24625: PUSH
24626: LD_OWVAR 2
24630: PUSH
24631: EMPTY
24632: LIST
24633: LIST
24634: PPUSH
24635: CALL_OW 69
24639: ST_TO_ADDR
// if not tmp then
24640: LD_VAR 0 2
24644: NOT
24645: IFFALSE 24649
// exit ;
24647: GO 24678
// for i in tmp do
24649: LD_ADDR_VAR 0 1
24653: PUSH
24654: LD_VAR 0 2
24658: PUSH
24659: FOR_IN
24660: IFFALSE 24676
// SetLives ( i , 300 ) ;
24662: LD_VAR 0 1
24666: PPUSH
24667: LD_INT 300
24669: PPUSH
24670: CALL_OW 234
24674: GO 24659
24676: POP
24677: POP
// end ;
24678: PPOPN 2
24680: END
// every 0 0$1 trigger s60 do var i , tmp ;
24681: LD_EXP 78
24685: IFFALSE 24754
24687: GO 24689
24689: DISABLE
24690: LD_INT 0
24692: PPUSH
24693: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24694: LD_ADDR_VAR 0 2
24698: PUSH
24699: LD_INT 22
24701: PUSH
24702: LD_OWVAR 2
24706: PUSH
24707: EMPTY
24708: LIST
24709: LIST
24710: PPUSH
24711: CALL_OW 69
24715: ST_TO_ADDR
// if not tmp then
24716: LD_VAR 0 2
24720: NOT
24721: IFFALSE 24725
// exit ;
24723: GO 24754
// for i in tmp do
24725: LD_ADDR_VAR 0 1
24729: PUSH
24730: LD_VAR 0 2
24734: PUSH
24735: FOR_IN
24736: IFFALSE 24752
// SetLives ( i , 600 ) ;
24738: LD_VAR 0 1
24742: PPUSH
24743: LD_INT 600
24745: PPUSH
24746: CALL_OW 234
24750: GO 24735
24752: POP
24753: POP
// end ;
24754: PPOPN 2
24756: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
24757: LD_INT 0
24759: PPUSH
// case cmd of 301 :
24760: LD_VAR 0 1
24764: PUSH
24765: LD_INT 301
24767: DOUBLE
24768: EQUAL
24769: IFTRUE 24773
24771: GO 24805
24773: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
24774: LD_VAR 0 6
24778: PPUSH
24779: LD_VAR 0 7
24783: PPUSH
24784: LD_VAR 0 8
24788: PPUSH
24789: LD_VAR 0 4
24793: PPUSH
24794: LD_VAR 0 5
24798: PPUSH
24799: CALL 26014 0 5
24803: GO 24926
24805: LD_INT 302
24807: DOUBLE
24808: EQUAL
24809: IFTRUE 24813
24811: GO 24850
24813: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
24814: LD_VAR 0 6
24818: PPUSH
24819: LD_VAR 0 7
24823: PPUSH
24824: LD_VAR 0 8
24828: PPUSH
24829: LD_VAR 0 9
24833: PPUSH
24834: LD_VAR 0 4
24838: PPUSH
24839: LD_VAR 0 5
24843: PPUSH
24844: CALL 26105 0 6
24848: GO 24926
24850: LD_INT 303
24852: DOUBLE
24853: EQUAL
24854: IFTRUE 24858
24856: GO 24895
24858: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
24859: LD_VAR 0 6
24863: PPUSH
24864: LD_VAR 0 7
24868: PPUSH
24869: LD_VAR 0 8
24873: PPUSH
24874: LD_VAR 0 9
24878: PPUSH
24879: LD_VAR 0 4
24883: PPUSH
24884: LD_VAR 0 5
24888: PPUSH
24889: CALL 24931 0 6
24893: GO 24926
24895: LD_INT 304
24897: DOUBLE
24898: EQUAL
24899: IFTRUE 24903
24901: GO 24925
24903: POP
// hHackTeleport ( unit , x , y ) ; end ;
24904: LD_VAR 0 2
24908: PPUSH
24909: LD_VAR 0 4
24913: PPUSH
24914: LD_VAR 0 5
24918: PPUSH
24919: CALL 26698 0 3
24923: GO 24926
24925: POP
// end ;
24926: LD_VAR 0 12
24930: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
24931: LD_INT 0
24933: PPUSH
24934: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
24935: LD_VAR 0 1
24939: PUSH
24940: LD_INT 1
24942: LESS
24943: PUSH
24944: LD_VAR 0 1
24948: PUSH
24949: LD_INT 3
24951: GREATER
24952: OR
24953: PUSH
24954: LD_VAR 0 5
24958: PPUSH
24959: LD_VAR 0 6
24963: PPUSH
24964: CALL_OW 428
24968: OR
24969: IFFALSE 24973
// exit ;
24971: GO 25701
// uc_side := your_side ;
24973: LD_ADDR_OWVAR 20
24977: PUSH
24978: LD_OWVAR 2
24982: ST_TO_ADDR
// uc_nation := nation ;
24983: LD_ADDR_OWVAR 21
24987: PUSH
24988: LD_VAR 0 1
24992: ST_TO_ADDR
// bc_level = 1 ;
24993: LD_ADDR_OWVAR 43
24997: PUSH
24998: LD_INT 1
25000: ST_TO_ADDR
// case btype of 1 :
25001: LD_VAR 0 2
25005: PUSH
25006: LD_INT 1
25008: DOUBLE
25009: EQUAL
25010: IFTRUE 25014
25012: GO 25025
25014: POP
// bc_type := b_depot ; 2 :
25015: LD_ADDR_OWVAR 42
25019: PUSH
25020: LD_INT 0
25022: ST_TO_ADDR
25023: GO 25645
25025: LD_INT 2
25027: DOUBLE
25028: EQUAL
25029: IFTRUE 25033
25031: GO 25044
25033: POP
// bc_type := b_warehouse ; 3 :
25034: LD_ADDR_OWVAR 42
25038: PUSH
25039: LD_INT 1
25041: ST_TO_ADDR
25042: GO 25645
25044: LD_INT 3
25046: DOUBLE
25047: EQUAL
25048: IFTRUE 25052
25050: GO 25063
25052: POP
// bc_type := b_lab ; 4 .. 9 :
25053: LD_ADDR_OWVAR 42
25057: PUSH
25058: LD_INT 6
25060: ST_TO_ADDR
25061: GO 25645
25063: LD_INT 4
25065: DOUBLE
25066: GREATEREQUAL
25067: IFFALSE 25075
25069: LD_INT 9
25071: DOUBLE
25072: LESSEQUAL
25073: IFTRUE 25077
25075: GO 25137
25077: POP
// begin bc_type := b_lab_half ;
25078: LD_ADDR_OWVAR 42
25082: PUSH
25083: LD_INT 7
25085: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
25086: LD_ADDR_OWVAR 44
25090: PUSH
25091: LD_INT 10
25093: PUSH
25094: LD_INT 11
25096: PUSH
25097: LD_INT 12
25099: PUSH
25100: LD_INT 15
25102: PUSH
25103: LD_INT 14
25105: PUSH
25106: LD_INT 13
25108: PUSH
25109: EMPTY
25110: LIST
25111: LIST
25112: LIST
25113: LIST
25114: LIST
25115: LIST
25116: PUSH
25117: LD_VAR 0 2
25121: PUSH
25122: LD_INT 3
25124: MINUS
25125: ARRAY
25126: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
25127: LD_ADDR_OWVAR 45
25131: PUSH
25132: LD_INT 9
25134: ST_TO_ADDR
// end ; 10 .. 13 :
25135: GO 25645
25137: LD_INT 10
25139: DOUBLE
25140: GREATEREQUAL
25141: IFFALSE 25149
25143: LD_INT 13
25145: DOUBLE
25146: LESSEQUAL
25147: IFTRUE 25151
25149: GO 25228
25151: POP
// begin bc_type := b_lab_full ;
25152: LD_ADDR_OWVAR 42
25156: PUSH
25157: LD_INT 8
25159: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
25160: LD_ADDR_OWVAR 44
25164: PUSH
25165: LD_INT 10
25167: PUSH
25168: LD_INT 12
25170: PUSH
25171: LD_INT 14
25173: PUSH
25174: LD_INT 13
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: LIST
25181: LIST
25182: PUSH
25183: LD_VAR 0 2
25187: PUSH
25188: LD_INT 9
25190: MINUS
25191: ARRAY
25192: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
25193: LD_ADDR_OWVAR 45
25197: PUSH
25198: LD_INT 11
25200: PUSH
25201: LD_INT 15
25203: PUSH
25204: LD_INT 12
25206: PUSH
25207: LD_INT 15
25209: PUSH
25210: EMPTY
25211: LIST
25212: LIST
25213: LIST
25214: LIST
25215: PUSH
25216: LD_VAR 0 2
25220: PUSH
25221: LD_INT 9
25223: MINUS
25224: ARRAY
25225: ST_TO_ADDR
// end ; 14 :
25226: GO 25645
25228: LD_INT 14
25230: DOUBLE
25231: EQUAL
25232: IFTRUE 25236
25234: GO 25247
25236: POP
// bc_type := b_workshop ; 15 :
25237: LD_ADDR_OWVAR 42
25241: PUSH
25242: LD_INT 2
25244: ST_TO_ADDR
25245: GO 25645
25247: LD_INT 15
25249: DOUBLE
25250: EQUAL
25251: IFTRUE 25255
25253: GO 25266
25255: POP
// bc_type := b_factory ; 16 :
25256: LD_ADDR_OWVAR 42
25260: PUSH
25261: LD_INT 3
25263: ST_TO_ADDR
25264: GO 25645
25266: LD_INT 16
25268: DOUBLE
25269: EQUAL
25270: IFTRUE 25274
25272: GO 25285
25274: POP
// bc_type := b_ext_gun ; 17 :
25275: LD_ADDR_OWVAR 42
25279: PUSH
25280: LD_INT 17
25282: ST_TO_ADDR
25283: GO 25645
25285: LD_INT 17
25287: DOUBLE
25288: EQUAL
25289: IFTRUE 25293
25291: GO 25321
25293: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
25294: LD_ADDR_OWVAR 42
25298: PUSH
25299: LD_INT 19
25301: PUSH
25302: LD_INT 23
25304: PUSH
25305: LD_INT 19
25307: PUSH
25308: EMPTY
25309: LIST
25310: LIST
25311: LIST
25312: PUSH
25313: LD_VAR 0 1
25317: ARRAY
25318: ST_TO_ADDR
25319: GO 25645
25321: LD_INT 18
25323: DOUBLE
25324: EQUAL
25325: IFTRUE 25329
25327: GO 25340
25329: POP
// bc_type := b_ext_radar ; 19 :
25330: LD_ADDR_OWVAR 42
25334: PUSH
25335: LD_INT 20
25337: ST_TO_ADDR
25338: GO 25645
25340: LD_INT 19
25342: DOUBLE
25343: EQUAL
25344: IFTRUE 25348
25346: GO 25359
25348: POP
// bc_type := b_ext_radio ; 20 :
25349: LD_ADDR_OWVAR 42
25353: PUSH
25354: LD_INT 22
25356: ST_TO_ADDR
25357: GO 25645
25359: LD_INT 20
25361: DOUBLE
25362: EQUAL
25363: IFTRUE 25367
25365: GO 25378
25367: POP
// bc_type := b_ext_siberium ; 21 :
25368: LD_ADDR_OWVAR 42
25372: PUSH
25373: LD_INT 21
25375: ST_TO_ADDR
25376: GO 25645
25378: LD_INT 21
25380: DOUBLE
25381: EQUAL
25382: IFTRUE 25386
25384: GO 25397
25386: POP
// bc_type := b_ext_computer ; 22 :
25387: LD_ADDR_OWVAR 42
25391: PUSH
25392: LD_INT 24
25394: ST_TO_ADDR
25395: GO 25645
25397: LD_INT 22
25399: DOUBLE
25400: EQUAL
25401: IFTRUE 25405
25403: GO 25416
25405: POP
// bc_type := b_ext_track ; 23 :
25406: LD_ADDR_OWVAR 42
25410: PUSH
25411: LD_INT 16
25413: ST_TO_ADDR
25414: GO 25645
25416: LD_INT 23
25418: DOUBLE
25419: EQUAL
25420: IFTRUE 25424
25422: GO 25435
25424: POP
// bc_type := b_ext_laser ; 24 :
25425: LD_ADDR_OWVAR 42
25429: PUSH
25430: LD_INT 25
25432: ST_TO_ADDR
25433: GO 25645
25435: LD_INT 24
25437: DOUBLE
25438: EQUAL
25439: IFTRUE 25443
25441: GO 25454
25443: POP
// bc_type := b_control_tower ; 25 :
25444: LD_ADDR_OWVAR 42
25448: PUSH
25449: LD_INT 36
25451: ST_TO_ADDR
25452: GO 25645
25454: LD_INT 25
25456: DOUBLE
25457: EQUAL
25458: IFTRUE 25462
25460: GO 25473
25462: POP
// bc_type := b_breastwork ; 26 :
25463: LD_ADDR_OWVAR 42
25467: PUSH
25468: LD_INT 31
25470: ST_TO_ADDR
25471: GO 25645
25473: LD_INT 26
25475: DOUBLE
25476: EQUAL
25477: IFTRUE 25481
25479: GO 25492
25481: POP
// bc_type := b_bunker ; 27 :
25482: LD_ADDR_OWVAR 42
25486: PUSH
25487: LD_INT 32
25489: ST_TO_ADDR
25490: GO 25645
25492: LD_INT 27
25494: DOUBLE
25495: EQUAL
25496: IFTRUE 25500
25498: GO 25511
25500: POP
// bc_type := b_turret ; 28 :
25501: LD_ADDR_OWVAR 42
25505: PUSH
25506: LD_INT 33
25508: ST_TO_ADDR
25509: GO 25645
25511: LD_INT 28
25513: DOUBLE
25514: EQUAL
25515: IFTRUE 25519
25517: GO 25530
25519: POP
// bc_type := b_armoury ; 29 :
25520: LD_ADDR_OWVAR 42
25524: PUSH
25525: LD_INT 4
25527: ST_TO_ADDR
25528: GO 25645
25530: LD_INT 29
25532: DOUBLE
25533: EQUAL
25534: IFTRUE 25538
25536: GO 25549
25538: POP
// bc_type := b_barracks ; 30 :
25539: LD_ADDR_OWVAR 42
25543: PUSH
25544: LD_INT 5
25546: ST_TO_ADDR
25547: GO 25645
25549: LD_INT 30
25551: DOUBLE
25552: EQUAL
25553: IFTRUE 25557
25555: GO 25568
25557: POP
// bc_type := b_solar_power ; 31 :
25558: LD_ADDR_OWVAR 42
25562: PUSH
25563: LD_INT 27
25565: ST_TO_ADDR
25566: GO 25645
25568: LD_INT 31
25570: DOUBLE
25571: EQUAL
25572: IFTRUE 25576
25574: GO 25587
25576: POP
// bc_type := b_oil_power ; 32 :
25577: LD_ADDR_OWVAR 42
25581: PUSH
25582: LD_INT 26
25584: ST_TO_ADDR
25585: GO 25645
25587: LD_INT 32
25589: DOUBLE
25590: EQUAL
25591: IFTRUE 25595
25593: GO 25606
25595: POP
// bc_type := b_siberite_power ; 33 :
25596: LD_ADDR_OWVAR 42
25600: PUSH
25601: LD_INT 28
25603: ST_TO_ADDR
25604: GO 25645
25606: LD_INT 33
25608: DOUBLE
25609: EQUAL
25610: IFTRUE 25614
25612: GO 25625
25614: POP
// bc_type := b_oil_mine ; 34 :
25615: LD_ADDR_OWVAR 42
25619: PUSH
25620: LD_INT 29
25622: ST_TO_ADDR
25623: GO 25645
25625: LD_INT 34
25627: DOUBLE
25628: EQUAL
25629: IFTRUE 25633
25631: GO 25644
25633: POP
// bc_type := b_siberite_mine ; end ;
25634: LD_ADDR_OWVAR 42
25638: PUSH
25639: LD_INT 30
25641: ST_TO_ADDR
25642: GO 25645
25644: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
25645: LD_ADDR_VAR 0 8
25649: PUSH
25650: LD_VAR 0 5
25654: PPUSH
25655: LD_VAR 0 6
25659: PPUSH
25660: LD_VAR 0 3
25664: PPUSH
25665: CALL_OW 47
25669: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
25670: LD_OWVAR 42
25674: PUSH
25675: LD_INT 32
25677: PUSH
25678: LD_INT 33
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: IN
25685: IFFALSE 25701
// PlaceWeaponTurret ( b , weapon ) ;
25687: LD_VAR 0 8
25691: PPUSH
25692: LD_VAR 0 4
25696: PPUSH
25697: CALL_OW 431
// end ;
25701: LD_VAR 0 7
25705: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
25706: LD_INT 0
25708: PPUSH
25709: PPUSH
25710: PPUSH
25711: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25712: LD_ADDR_VAR 0 4
25716: PUSH
25717: LD_INT 22
25719: PUSH
25720: LD_OWVAR 2
25724: PUSH
25725: EMPTY
25726: LIST
25727: LIST
25728: PUSH
25729: LD_INT 2
25731: PUSH
25732: LD_INT 30
25734: PUSH
25735: LD_INT 0
25737: PUSH
25738: EMPTY
25739: LIST
25740: LIST
25741: PUSH
25742: LD_INT 30
25744: PUSH
25745: LD_INT 1
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: PUSH
25752: EMPTY
25753: LIST
25754: LIST
25755: LIST
25756: PUSH
25757: EMPTY
25758: LIST
25759: LIST
25760: PPUSH
25761: CALL_OW 69
25765: ST_TO_ADDR
// if not tmp then
25766: LD_VAR 0 4
25770: NOT
25771: IFFALSE 25775
// exit ;
25773: GO 25834
// for i in tmp do
25775: LD_ADDR_VAR 0 2
25779: PUSH
25780: LD_VAR 0 4
25784: PUSH
25785: FOR_IN
25786: IFFALSE 25832
// for j = 1 to 3 do
25788: LD_ADDR_VAR 0 3
25792: PUSH
25793: DOUBLE
25794: LD_INT 1
25796: DEC
25797: ST_TO_ADDR
25798: LD_INT 3
25800: PUSH
25801: FOR_TO
25802: IFFALSE 25828
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
25804: LD_VAR 0 2
25808: PPUSH
25809: CALL_OW 274
25813: PPUSH
25814: LD_VAR 0 3
25818: PPUSH
25819: LD_INT 99999
25821: PPUSH
25822: CALL_OW 277
25826: GO 25801
25828: POP
25829: POP
25830: GO 25785
25832: POP
25833: POP
// end ;
25834: LD_VAR 0 1
25838: RET
// export function hHackSetLevel10 ; var i , j ; begin
25839: LD_INT 0
25841: PPUSH
25842: PPUSH
25843: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25844: LD_ADDR_VAR 0 2
25848: PUSH
25849: LD_INT 21
25851: PUSH
25852: LD_INT 1
25854: PUSH
25855: EMPTY
25856: LIST
25857: LIST
25858: PPUSH
25859: CALL_OW 69
25863: PUSH
25864: FOR_IN
25865: IFFALSE 25917
// if IsSelected ( i ) then
25867: LD_VAR 0 2
25871: PPUSH
25872: CALL_OW 306
25876: IFFALSE 25915
// begin for j := 1 to 4 do
25878: LD_ADDR_VAR 0 3
25882: PUSH
25883: DOUBLE
25884: LD_INT 1
25886: DEC
25887: ST_TO_ADDR
25888: LD_INT 4
25890: PUSH
25891: FOR_TO
25892: IFFALSE 25913
// SetSkill ( i , j , 10 ) ;
25894: LD_VAR 0 2
25898: PPUSH
25899: LD_VAR 0 3
25903: PPUSH
25904: LD_INT 10
25906: PPUSH
25907: CALL_OW 237
25911: GO 25891
25913: POP
25914: POP
// end ;
25915: GO 25864
25917: POP
25918: POP
// end ;
25919: LD_VAR 0 1
25923: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
25924: LD_INT 0
25926: PPUSH
25927: PPUSH
25928: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
25929: LD_ADDR_VAR 0 2
25933: PUSH
25934: LD_INT 22
25936: PUSH
25937: LD_OWVAR 2
25941: PUSH
25942: EMPTY
25943: LIST
25944: LIST
25945: PUSH
25946: LD_INT 21
25948: PUSH
25949: LD_INT 1
25951: PUSH
25952: EMPTY
25953: LIST
25954: LIST
25955: PUSH
25956: EMPTY
25957: LIST
25958: LIST
25959: PPUSH
25960: CALL_OW 69
25964: PUSH
25965: FOR_IN
25966: IFFALSE 26007
// begin for j := 1 to 4 do
25968: LD_ADDR_VAR 0 3
25972: PUSH
25973: DOUBLE
25974: LD_INT 1
25976: DEC
25977: ST_TO_ADDR
25978: LD_INT 4
25980: PUSH
25981: FOR_TO
25982: IFFALSE 26003
// SetSkill ( i , j , 10 ) ;
25984: LD_VAR 0 2
25988: PPUSH
25989: LD_VAR 0 3
25993: PPUSH
25994: LD_INT 10
25996: PPUSH
25997: CALL_OW 237
26001: GO 25981
26003: POP
26004: POP
// end ;
26005: GO 25965
26007: POP
26008: POP
// end ;
26009: LD_VAR 0 1
26013: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
26014: LD_INT 0
26016: PPUSH
// uc_side := your_side ;
26017: LD_ADDR_OWVAR 20
26021: PUSH
26022: LD_OWVAR 2
26026: ST_TO_ADDR
// uc_nation := nation ;
26027: LD_ADDR_OWVAR 21
26031: PUSH
26032: LD_VAR 0 1
26036: ST_TO_ADDR
// InitHc ;
26037: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
26041: LD_INT 0
26043: PPUSH
26044: LD_VAR 0 2
26048: PPUSH
26049: LD_VAR 0 3
26053: PPUSH
26054: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
26058: LD_VAR 0 4
26062: PPUSH
26063: LD_VAR 0 5
26067: PPUSH
26068: CALL_OW 428
26072: PUSH
26073: LD_INT 0
26075: EQUAL
26076: IFFALSE 26100
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
26078: CALL_OW 44
26082: PPUSH
26083: LD_VAR 0 4
26087: PPUSH
26088: LD_VAR 0 5
26092: PPUSH
26093: LD_INT 1
26095: PPUSH
26096: CALL_OW 48
// end ;
26100: LD_VAR 0 6
26104: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
26105: LD_INT 0
26107: PPUSH
26108: PPUSH
// uc_side := your_side ;
26109: LD_ADDR_OWVAR 20
26113: PUSH
26114: LD_OWVAR 2
26118: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
26119: LD_VAR 0 1
26123: PUSH
26124: LD_INT 1
26126: PUSH
26127: LD_INT 2
26129: PUSH
26130: LD_INT 3
26132: PUSH
26133: LD_INT 4
26135: PUSH
26136: LD_INT 5
26138: PUSH
26139: EMPTY
26140: LIST
26141: LIST
26142: LIST
26143: LIST
26144: LIST
26145: IN
26146: IFFALSE 26158
// uc_nation := nation_american else
26148: LD_ADDR_OWVAR 21
26152: PUSH
26153: LD_INT 1
26155: ST_TO_ADDR
26156: GO 26201
// if chassis in [ 11 , 12 , 13 , 14 ] then
26158: LD_VAR 0 1
26162: PUSH
26163: LD_INT 11
26165: PUSH
26166: LD_INT 12
26168: PUSH
26169: LD_INT 13
26171: PUSH
26172: LD_INT 14
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: LIST
26179: LIST
26180: IN
26181: IFFALSE 26193
// uc_nation := nation_arabian else
26183: LD_ADDR_OWVAR 21
26187: PUSH
26188: LD_INT 2
26190: ST_TO_ADDR
26191: GO 26201
// uc_nation := nation_russian ;
26193: LD_ADDR_OWVAR 21
26197: PUSH
26198: LD_INT 3
26200: ST_TO_ADDR
// vc_chassis := chassis ;
26201: LD_ADDR_OWVAR 37
26205: PUSH
26206: LD_VAR 0 1
26210: ST_TO_ADDR
// vc_engine := engine ;
26211: LD_ADDR_OWVAR 39
26215: PUSH
26216: LD_VAR 0 2
26220: ST_TO_ADDR
// vc_control := control ;
26221: LD_ADDR_OWVAR 38
26225: PUSH
26226: LD_VAR 0 3
26230: ST_TO_ADDR
// vc_weapon := weapon ;
26231: LD_ADDR_OWVAR 40
26235: PUSH
26236: LD_VAR 0 4
26240: ST_TO_ADDR
// un := CreateVehicle ;
26241: LD_ADDR_VAR 0 8
26245: PUSH
26246: CALL_OW 45
26250: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
26251: LD_VAR 0 8
26255: PPUSH
26256: LD_INT 0
26258: PPUSH
26259: LD_INT 5
26261: PPUSH
26262: CALL_OW 12
26266: PPUSH
26267: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
26271: LD_VAR 0 8
26275: PPUSH
26276: LD_VAR 0 5
26280: PPUSH
26281: LD_VAR 0 6
26285: PPUSH
26286: LD_INT 1
26288: PPUSH
26289: CALL_OW 48
// end ;
26293: LD_VAR 0 7
26297: RET
// export hInvincible ; every 1 do
26298: GO 26300
26300: DISABLE
// hInvincible := [ ] ;
26301: LD_ADDR_EXP 79
26305: PUSH
26306: EMPTY
26307: ST_TO_ADDR
26308: END
// every 10 do var i ;
26309: GO 26311
26311: DISABLE
26312: LD_INT 0
26314: PPUSH
// begin enable ;
26315: ENABLE
// if not hInvincible then
26316: LD_EXP 79
26320: NOT
26321: IFFALSE 26325
// exit ;
26323: GO 26369
// for i in hInvincible do
26325: LD_ADDR_VAR 0 1
26329: PUSH
26330: LD_EXP 79
26334: PUSH
26335: FOR_IN
26336: IFFALSE 26367
// if GetLives ( i ) < 1000 then
26338: LD_VAR 0 1
26342: PPUSH
26343: CALL_OW 256
26347: PUSH
26348: LD_INT 1000
26350: LESS
26351: IFFALSE 26365
// SetLives ( i , 1000 ) ;
26353: LD_VAR 0 1
26357: PPUSH
26358: LD_INT 1000
26360: PPUSH
26361: CALL_OW 234
26365: GO 26335
26367: POP
26368: POP
// end ;
26369: PPOPN 1
26371: END
// export function hHackInvincible ; var i ; begin
26372: LD_INT 0
26374: PPUSH
26375: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
26376: LD_ADDR_VAR 0 2
26380: PUSH
26381: LD_INT 2
26383: PUSH
26384: LD_INT 21
26386: PUSH
26387: LD_INT 1
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: LD_INT 21
26396: PUSH
26397: LD_INT 2
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: PUSH
26404: EMPTY
26405: LIST
26406: LIST
26407: LIST
26408: PPUSH
26409: CALL_OW 69
26413: PUSH
26414: FOR_IN
26415: IFFALSE 26476
// if IsSelected ( i ) then
26417: LD_VAR 0 2
26421: PPUSH
26422: CALL_OW 306
26426: IFFALSE 26474
// begin if i in hInvincible then
26428: LD_VAR 0 2
26432: PUSH
26433: LD_EXP 79
26437: IN
26438: IFFALSE 26458
// hInvincible := hInvincible diff i else
26440: LD_ADDR_EXP 79
26444: PUSH
26445: LD_EXP 79
26449: PUSH
26450: LD_VAR 0 2
26454: DIFF
26455: ST_TO_ADDR
26456: GO 26474
// hInvincible := hInvincible union i ;
26458: LD_ADDR_EXP 79
26462: PUSH
26463: LD_EXP 79
26467: PUSH
26468: LD_VAR 0 2
26472: UNION
26473: ST_TO_ADDR
// end ;
26474: GO 26414
26476: POP
26477: POP
// end ;
26478: LD_VAR 0 1
26482: RET
// export function hHackInvisible ; var i , j ; begin
26483: LD_INT 0
26485: PPUSH
26486: PPUSH
26487: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
26488: LD_ADDR_VAR 0 2
26492: PUSH
26493: LD_INT 21
26495: PUSH
26496: LD_INT 1
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: PPUSH
26503: CALL_OW 69
26507: PUSH
26508: FOR_IN
26509: IFFALSE 26533
// if IsSelected ( i ) then
26511: LD_VAR 0 2
26515: PPUSH
26516: CALL_OW 306
26520: IFFALSE 26531
// ComForceInvisible ( i ) ;
26522: LD_VAR 0 2
26526: PPUSH
26527: CALL_OW 496
26531: GO 26508
26533: POP
26534: POP
// end ;
26535: LD_VAR 0 1
26539: RET
// export function hHackChangeYourSide ; begin
26540: LD_INT 0
26542: PPUSH
// if your_side = 8 then
26543: LD_OWVAR 2
26547: PUSH
26548: LD_INT 8
26550: EQUAL
26551: IFFALSE 26563
// your_side := 0 else
26553: LD_ADDR_OWVAR 2
26557: PUSH
26558: LD_INT 0
26560: ST_TO_ADDR
26561: GO 26577
// your_side := your_side + 1 ;
26563: LD_ADDR_OWVAR 2
26567: PUSH
26568: LD_OWVAR 2
26572: PUSH
26573: LD_INT 1
26575: PLUS
26576: ST_TO_ADDR
// end ;
26577: LD_VAR 0 1
26581: RET
// export function hHackChangeUnitSide ; var i , j ; begin
26582: LD_INT 0
26584: PPUSH
26585: PPUSH
26586: PPUSH
// for i in all_units do
26587: LD_ADDR_VAR 0 2
26591: PUSH
26592: LD_OWVAR 3
26596: PUSH
26597: FOR_IN
26598: IFFALSE 26676
// if IsSelected ( i ) then
26600: LD_VAR 0 2
26604: PPUSH
26605: CALL_OW 306
26609: IFFALSE 26674
// begin j := GetSide ( i ) ;
26611: LD_ADDR_VAR 0 3
26615: PUSH
26616: LD_VAR 0 2
26620: PPUSH
26621: CALL_OW 255
26625: ST_TO_ADDR
// if j = 8 then
26626: LD_VAR 0 3
26630: PUSH
26631: LD_INT 8
26633: EQUAL
26634: IFFALSE 26646
// j := 0 else
26636: LD_ADDR_VAR 0 3
26640: PUSH
26641: LD_INT 0
26643: ST_TO_ADDR
26644: GO 26660
// j := j + 1 ;
26646: LD_ADDR_VAR 0 3
26650: PUSH
26651: LD_VAR 0 3
26655: PUSH
26656: LD_INT 1
26658: PLUS
26659: ST_TO_ADDR
// SetSide ( i , j ) ;
26660: LD_VAR 0 2
26664: PPUSH
26665: LD_VAR 0 3
26669: PPUSH
26670: CALL_OW 235
// end ;
26674: GO 26597
26676: POP
26677: POP
// end ;
26678: LD_VAR 0 1
26682: RET
// export function hHackFog ; begin
26683: LD_INT 0
26685: PPUSH
// FogOff ( true ) ;
26686: LD_INT 1
26688: PPUSH
26689: CALL_OW 344
// end ;
26693: LD_VAR 0 1
26697: RET
// export function hHackTeleport ( unit , x , y ) ; begin
26698: LD_INT 0
26700: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
26701: LD_VAR 0 1
26705: PPUSH
26706: LD_VAR 0 2
26710: PPUSH
26711: LD_VAR 0 3
26715: PPUSH
26716: LD_INT 1
26718: PPUSH
26719: LD_INT 1
26721: PPUSH
26722: CALL_OW 483
// CenterOnXY ( x , y ) ;
26726: LD_VAR 0 2
26730: PPUSH
26731: LD_VAR 0 3
26735: PPUSH
26736: CALL_OW 84
// end ;
26740: LD_VAR 0 4
26744: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
26745: LD_INT 0
26747: PPUSH
26748: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
26749: LD_VAR 0 1
26753: NOT
26754: PUSH
26755: LD_VAR 0 2
26759: PPUSH
26760: LD_VAR 0 3
26764: PPUSH
26765: CALL_OW 488
26769: NOT
26770: OR
26771: PUSH
26772: LD_VAR 0 1
26776: PPUSH
26777: CALL_OW 266
26781: PUSH
26782: LD_INT 3
26784: NONEQUAL
26785: PUSH
26786: LD_VAR 0 1
26790: PPUSH
26791: CALL_OW 247
26795: PUSH
26796: LD_INT 1
26798: EQUAL
26799: NOT
26800: AND
26801: OR
26802: IFFALSE 26806
// exit ;
26804: GO 26955
// if GetType ( factory ) = unit_human then
26806: LD_VAR 0 1
26810: PPUSH
26811: CALL_OW 247
26815: PUSH
26816: LD_INT 1
26818: EQUAL
26819: IFFALSE 26836
// factory := IsInUnit ( factory ) ;
26821: LD_ADDR_VAR 0 1
26825: PUSH
26826: LD_VAR 0 1
26830: PPUSH
26831: CALL_OW 310
26835: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
26836: LD_VAR 0 1
26840: PPUSH
26841: CALL_OW 266
26845: PUSH
26846: LD_INT 3
26848: NONEQUAL
26849: IFFALSE 26853
// exit ;
26851: GO 26955
// if HexInfo ( x , y ) = factory then
26853: LD_VAR 0 2
26857: PPUSH
26858: LD_VAR 0 3
26862: PPUSH
26863: CALL_OW 428
26867: PUSH
26868: LD_VAR 0 1
26872: EQUAL
26873: IFFALSE 26900
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
26875: LD_ADDR_EXP 80
26879: PUSH
26880: LD_EXP 80
26884: PPUSH
26885: LD_VAR 0 1
26889: PPUSH
26890: LD_INT 0
26892: PPUSH
26893: CALL_OW 1
26897: ST_TO_ADDR
26898: GO 26951
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
26900: LD_ADDR_EXP 80
26904: PUSH
26905: LD_EXP 80
26909: PPUSH
26910: LD_VAR 0 1
26914: PPUSH
26915: LD_VAR 0 1
26919: PPUSH
26920: CALL_OW 255
26924: PUSH
26925: LD_VAR 0 1
26929: PUSH
26930: LD_VAR 0 2
26934: PUSH
26935: LD_VAR 0 3
26939: PUSH
26940: EMPTY
26941: LIST
26942: LIST
26943: LIST
26944: LIST
26945: PPUSH
26946: CALL_OW 1
26950: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26951: CALL 26960 0 0
// end ;
26955: LD_VAR 0 4
26959: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
26960: LD_INT 0
26962: PPUSH
26963: PPUSH
26964: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
26965: LD_STRING resetFactoryWaypoint();
26967: PPUSH
26968: CALL_OW 559
// if factoryWaypoints then
26972: LD_EXP 80
26976: IFFALSE 27102
// begin list := PrepareArray ( factoryWaypoints ) ;
26978: LD_ADDR_VAR 0 3
26982: PUSH
26983: LD_EXP 80
26987: PPUSH
26988: CALL 74244 0 1
26992: ST_TO_ADDR
// for i := 1 to list do
26993: LD_ADDR_VAR 0 2
26997: PUSH
26998: DOUBLE
26999: LD_INT 1
27001: DEC
27002: ST_TO_ADDR
27003: LD_VAR 0 3
27007: PUSH
27008: FOR_TO
27009: IFFALSE 27100
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
27011: LD_STRING setFactoryWaypointXY(
27013: PUSH
27014: LD_VAR 0 3
27018: PUSH
27019: LD_VAR 0 2
27023: ARRAY
27024: PUSH
27025: LD_INT 1
27027: ARRAY
27028: STR
27029: PUSH
27030: LD_STRING ,
27032: STR
27033: PUSH
27034: LD_VAR 0 3
27038: PUSH
27039: LD_VAR 0 2
27043: ARRAY
27044: PUSH
27045: LD_INT 2
27047: ARRAY
27048: STR
27049: PUSH
27050: LD_STRING ,
27052: STR
27053: PUSH
27054: LD_VAR 0 3
27058: PUSH
27059: LD_VAR 0 2
27063: ARRAY
27064: PUSH
27065: LD_INT 3
27067: ARRAY
27068: STR
27069: PUSH
27070: LD_STRING ,
27072: STR
27073: PUSH
27074: LD_VAR 0 3
27078: PUSH
27079: LD_VAR 0 2
27083: ARRAY
27084: PUSH
27085: LD_INT 4
27087: ARRAY
27088: STR
27089: PUSH
27090: LD_STRING )
27092: STR
27093: PPUSH
27094: CALL_OW 559
27098: GO 27008
27100: POP
27101: POP
// end ; end ;
27102: LD_VAR 0 1
27106: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
27107: LD_INT 0
27109: PPUSH
// if HexInfo ( x , y ) = warehouse then
27110: LD_VAR 0 2
27114: PPUSH
27115: LD_VAR 0 3
27119: PPUSH
27120: CALL_OW 428
27124: PUSH
27125: LD_VAR 0 1
27129: EQUAL
27130: IFFALSE 27157
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
27132: LD_ADDR_EXP 81
27136: PUSH
27137: LD_EXP 81
27141: PPUSH
27142: LD_VAR 0 1
27146: PPUSH
27147: LD_INT 0
27149: PPUSH
27150: CALL_OW 1
27154: ST_TO_ADDR
27155: GO 27208
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
27157: LD_ADDR_EXP 81
27161: PUSH
27162: LD_EXP 81
27166: PPUSH
27167: LD_VAR 0 1
27171: PPUSH
27172: LD_VAR 0 1
27176: PPUSH
27177: CALL_OW 255
27181: PUSH
27182: LD_VAR 0 1
27186: PUSH
27187: LD_VAR 0 2
27191: PUSH
27192: LD_VAR 0 3
27196: PUSH
27197: EMPTY
27198: LIST
27199: LIST
27200: LIST
27201: LIST
27202: PPUSH
27203: CALL_OW 1
27207: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
27208: CALL 27217 0 0
// end ;
27212: LD_VAR 0 4
27216: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
27217: LD_INT 0
27219: PPUSH
27220: PPUSH
27221: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
27222: LD_STRING resetWarehouseGatheringPoints();
27224: PPUSH
27225: CALL_OW 559
// if warehouseGatheringPoints then
27229: LD_EXP 81
27233: IFFALSE 27359
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
27235: LD_ADDR_VAR 0 3
27239: PUSH
27240: LD_EXP 81
27244: PPUSH
27245: CALL 74244 0 1
27249: ST_TO_ADDR
// for i := 1 to list do
27250: LD_ADDR_VAR 0 2
27254: PUSH
27255: DOUBLE
27256: LD_INT 1
27258: DEC
27259: ST_TO_ADDR
27260: LD_VAR 0 3
27264: PUSH
27265: FOR_TO
27266: IFFALSE 27357
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
27268: LD_STRING setWarehouseGatheringPointXY(
27270: PUSH
27271: LD_VAR 0 3
27275: PUSH
27276: LD_VAR 0 2
27280: ARRAY
27281: PUSH
27282: LD_INT 1
27284: ARRAY
27285: STR
27286: PUSH
27287: LD_STRING ,
27289: STR
27290: PUSH
27291: LD_VAR 0 3
27295: PUSH
27296: LD_VAR 0 2
27300: ARRAY
27301: PUSH
27302: LD_INT 2
27304: ARRAY
27305: STR
27306: PUSH
27307: LD_STRING ,
27309: STR
27310: PUSH
27311: LD_VAR 0 3
27315: PUSH
27316: LD_VAR 0 2
27320: ARRAY
27321: PUSH
27322: LD_INT 3
27324: ARRAY
27325: STR
27326: PUSH
27327: LD_STRING ,
27329: STR
27330: PUSH
27331: LD_VAR 0 3
27335: PUSH
27336: LD_VAR 0 2
27340: ARRAY
27341: PUSH
27342: LD_INT 4
27344: ARRAY
27345: STR
27346: PUSH
27347: LD_STRING )
27349: STR
27350: PPUSH
27351: CALL_OW 559
27355: GO 27265
27357: POP
27358: POP
// end ; end ;
27359: LD_VAR 0 1
27363: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
27364: LD_EXP 81
27368: IFFALSE 28053
27370: GO 27372
27372: DISABLE
27373: LD_INT 0
27375: PPUSH
27376: PPUSH
27377: PPUSH
27378: PPUSH
27379: PPUSH
27380: PPUSH
27381: PPUSH
27382: PPUSH
27383: PPUSH
// begin enable ;
27384: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
27385: LD_ADDR_VAR 0 3
27389: PUSH
27390: LD_EXP 81
27394: PPUSH
27395: CALL 74244 0 1
27399: ST_TO_ADDR
// if not list then
27400: LD_VAR 0 3
27404: NOT
27405: IFFALSE 27409
// exit ;
27407: GO 28053
// for i := 1 to list do
27409: LD_ADDR_VAR 0 1
27413: PUSH
27414: DOUBLE
27415: LD_INT 1
27417: DEC
27418: ST_TO_ADDR
27419: LD_VAR 0 3
27423: PUSH
27424: FOR_TO
27425: IFFALSE 28051
// begin depot := list [ i ] [ 2 ] ;
27427: LD_ADDR_VAR 0 8
27431: PUSH
27432: LD_VAR 0 3
27436: PUSH
27437: LD_VAR 0 1
27441: ARRAY
27442: PUSH
27443: LD_INT 2
27445: ARRAY
27446: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
27447: LD_ADDR_VAR 0 5
27451: PUSH
27452: LD_VAR 0 3
27456: PUSH
27457: LD_VAR 0 1
27461: ARRAY
27462: PUSH
27463: LD_INT 1
27465: ARRAY
27466: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
27467: LD_VAR 0 8
27471: PPUSH
27472: CALL_OW 301
27476: PUSH
27477: LD_VAR 0 5
27481: PUSH
27482: LD_VAR 0 8
27486: PPUSH
27487: CALL_OW 255
27491: NONEQUAL
27492: OR
27493: IFFALSE 27522
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
27495: LD_ADDR_EXP 81
27499: PUSH
27500: LD_EXP 81
27504: PPUSH
27505: LD_VAR 0 8
27509: PPUSH
27510: LD_INT 0
27512: PPUSH
27513: CALL_OW 1
27517: ST_TO_ADDR
// exit ;
27518: POP
27519: POP
27520: GO 28053
// end ; x := list [ i ] [ 3 ] ;
27522: LD_ADDR_VAR 0 6
27526: PUSH
27527: LD_VAR 0 3
27531: PUSH
27532: LD_VAR 0 1
27536: ARRAY
27537: PUSH
27538: LD_INT 3
27540: ARRAY
27541: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
27542: LD_ADDR_VAR 0 7
27546: PUSH
27547: LD_VAR 0 3
27551: PUSH
27552: LD_VAR 0 1
27556: ARRAY
27557: PUSH
27558: LD_INT 4
27560: ARRAY
27561: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
27562: LD_ADDR_VAR 0 9
27566: PUSH
27567: LD_VAR 0 6
27571: PPUSH
27572: LD_VAR 0 7
27576: PPUSH
27577: LD_INT 16
27579: PPUSH
27580: CALL 72832 0 3
27584: ST_TO_ADDR
// if not cratesNearbyPoint then
27585: LD_VAR 0 9
27589: NOT
27590: IFFALSE 27596
// exit ;
27592: POP
27593: POP
27594: GO 28053
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
27596: LD_ADDR_VAR 0 4
27600: PUSH
27601: LD_INT 22
27603: PUSH
27604: LD_VAR 0 5
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: PUSH
27613: LD_INT 3
27615: PUSH
27616: LD_INT 60
27618: PUSH
27619: EMPTY
27620: LIST
27621: PUSH
27622: EMPTY
27623: LIST
27624: LIST
27625: PUSH
27626: LD_INT 91
27628: PUSH
27629: LD_VAR 0 8
27633: PUSH
27634: LD_INT 6
27636: PUSH
27637: EMPTY
27638: LIST
27639: LIST
27640: LIST
27641: PUSH
27642: LD_INT 2
27644: PUSH
27645: LD_INT 25
27647: PUSH
27648: LD_INT 2
27650: PUSH
27651: EMPTY
27652: LIST
27653: LIST
27654: PUSH
27655: LD_INT 25
27657: PUSH
27658: LD_INT 16
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: PUSH
27665: EMPTY
27666: LIST
27667: LIST
27668: LIST
27669: PUSH
27670: EMPTY
27671: LIST
27672: LIST
27673: LIST
27674: LIST
27675: PPUSH
27676: CALL_OW 69
27680: PUSH
27681: LD_VAR 0 8
27685: PPUSH
27686: CALL_OW 313
27690: PPUSH
27691: LD_INT 3
27693: PUSH
27694: LD_INT 60
27696: PUSH
27697: EMPTY
27698: LIST
27699: PUSH
27700: EMPTY
27701: LIST
27702: LIST
27703: PUSH
27704: LD_INT 2
27706: PUSH
27707: LD_INT 25
27709: PUSH
27710: LD_INT 2
27712: PUSH
27713: EMPTY
27714: LIST
27715: LIST
27716: PUSH
27717: LD_INT 25
27719: PUSH
27720: LD_INT 16
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: PUSH
27727: EMPTY
27728: LIST
27729: LIST
27730: LIST
27731: PUSH
27732: EMPTY
27733: LIST
27734: LIST
27735: PPUSH
27736: CALL_OW 72
27740: UNION
27741: ST_TO_ADDR
// if tmp then
27742: LD_VAR 0 4
27746: IFFALSE 27826
// begin tmp := ShrinkArray ( tmp , 3 ) ;
27748: LD_ADDR_VAR 0 4
27752: PUSH
27753: LD_VAR 0 4
27757: PPUSH
27758: LD_INT 3
27760: PPUSH
27761: CALL 70801 0 2
27765: ST_TO_ADDR
// for j in tmp do
27766: LD_ADDR_VAR 0 2
27770: PUSH
27771: LD_VAR 0 4
27775: PUSH
27776: FOR_IN
27777: IFFALSE 27820
// begin if IsInUnit ( j ) then
27779: LD_VAR 0 2
27783: PPUSH
27784: CALL_OW 310
27788: IFFALSE 27799
// ComExit ( j ) ;
27790: LD_VAR 0 2
27794: PPUSH
27795: CALL 70884 0 1
// AddComCollect ( j , x , y ) ;
27799: LD_VAR 0 2
27803: PPUSH
27804: LD_VAR 0 6
27808: PPUSH
27809: LD_VAR 0 7
27813: PPUSH
27814: CALL_OW 177
// end ;
27818: GO 27776
27820: POP
27821: POP
// exit ;
27822: POP
27823: POP
27824: GO 28053
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
27826: LD_ADDR_VAR 0 4
27830: PUSH
27831: LD_INT 22
27833: PUSH
27834: LD_VAR 0 5
27838: PUSH
27839: EMPTY
27840: LIST
27841: LIST
27842: PUSH
27843: LD_INT 91
27845: PUSH
27846: LD_VAR 0 8
27850: PUSH
27851: LD_INT 8
27853: PUSH
27854: EMPTY
27855: LIST
27856: LIST
27857: LIST
27858: PUSH
27859: LD_INT 2
27861: PUSH
27862: LD_INT 34
27864: PUSH
27865: LD_INT 12
27867: PUSH
27868: EMPTY
27869: LIST
27870: LIST
27871: PUSH
27872: LD_INT 34
27874: PUSH
27875: LD_INT 51
27877: PUSH
27878: EMPTY
27879: LIST
27880: LIST
27881: PUSH
27882: LD_INT 34
27884: PUSH
27885: LD_INT 32
27887: PUSH
27888: EMPTY
27889: LIST
27890: LIST
27891: PUSH
27892: LD_INT 34
27894: PUSH
27895: LD_INT 89
27897: PUSH
27898: EMPTY
27899: LIST
27900: LIST
27901: PUSH
27902: EMPTY
27903: LIST
27904: LIST
27905: LIST
27906: LIST
27907: LIST
27908: PUSH
27909: EMPTY
27910: LIST
27911: LIST
27912: LIST
27913: PPUSH
27914: CALL_OW 69
27918: ST_TO_ADDR
// if tmp then
27919: LD_VAR 0 4
27923: IFFALSE 28049
// begin for j in tmp do
27925: LD_ADDR_VAR 0 2
27929: PUSH
27930: LD_VAR 0 4
27934: PUSH
27935: FOR_IN
27936: IFFALSE 28047
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
27938: LD_VAR 0 2
27942: PPUSH
27943: CALL_OW 262
27947: PUSH
27948: LD_INT 3
27950: EQUAL
27951: PUSH
27952: LD_VAR 0 2
27956: PPUSH
27957: CALL_OW 261
27961: PUSH
27962: LD_INT 20
27964: GREATER
27965: OR
27966: PUSH
27967: LD_VAR 0 2
27971: PPUSH
27972: CALL_OW 314
27976: NOT
27977: AND
27978: PUSH
27979: LD_VAR 0 2
27983: PPUSH
27984: CALL_OW 263
27988: PUSH
27989: LD_INT 1
27991: NONEQUAL
27992: PUSH
27993: LD_VAR 0 2
27997: PPUSH
27998: CALL_OW 311
28002: OR
28003: AND
28004: IFFALSE 28045
// begin ComCollect ( j , x , y ) ;
28006: LD_VAR 0 2
28010: PPUSH
28011: LD_VAR 0 6
28015: PPUSH
28016: LD_VAR 0 7
28020: PPUSH
28021: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
28025: LD_VAR 0 2
28029: PPUSH
28030: LD_VAR 0 8
28034: PPUSH
28035: CALL_OW 172
// exit ;
28039: POP
28040: POP
28041: POP
28042: POP
28043: GO 28053
// end ;
28045: GO 27935
28047: POP
28048: POP
// end ; end ;
28049: GO 27424
28051: POP
28052: POP
// end ; end_of_file
28053: PPOPN 9
28055: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
28056: LD_INT 0
28058: PPUSH
28059: PPUSH
28060: PPUSH
28061: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
28062: LD_VAR 0 1
28066: PPUSH
28067: CALL_OW 264
28071: PUSH
28072: LD_INT 91
28074: EQUAL
28075: IFFALSE 28147
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
28077: LD_INT 68
28079: PPUSH
28080: LD_VAR 0 1
28084: PPUSH
28085: CALL_OW 255
28089: PPUSH
28090: CALL_OW 321
28094: PUSH
28095: LD_INT 2
28097: EQUAL
28098: IFFALSE 28110
// eff := 70 else
28100: LD_ADDR_VAR 0 4
28104: PUSH
28105: LD_INT 70
28107: ST_TO_ADDR
28108: GO 28118
// eff := 30 ;
28110: LD_ADDR_VAR 0 4
28114: PUSH
28115: LD_INT 30
28117: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
28118: LD_VAR 0 1
28122: PPUSH
28123: CALL_OW 250
28127: PPUSH
28128: LD_VAR 0 1
28132: PPUSH
28133: CALL_OW 251
28137: PPUSH
28138: LD_VAR 0 4
28142: PPUSH
28143: CALL_OW 495
// end ; end ;
28147: LD_VAR 0 2
28151: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
28152: LD_INT 0
28154: PPUSH
// end ;
28155: LD_VAR 0 4
28159: RET
// export function SOS_Command ( cmd ) ; begin
28160: LD_INT 0
28162: PPUSH
// end ;
28163: LD_VAR 0 2
28167: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
28168: LD_INT 0
28170: PPUSH
// end ;
28171: LD_VAR 0 6
28175: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
28176: LD_INT 0
28178: PPUSH
28179: PPUSH
// if not vehicle or not factory then
28180: LD_VAR 0 1
28184: NOT
28185: PUSH
28186: LD_VAR 0 2
28190: NOT
28191: OR
28192: IFFALSE 28196
// exit ;
28194: GO 28427
// if factoryWaypoints >= factory then
28196: LD_EXP 80
28200: PUSH
28201: LD_VAR 0 2
28205: GREATEREQUAL
28206: IFFALSE 28427
// if factoryWaypoints [ factory ] then
28208: LD_EXP 80
28212: PUSH
28213: LD_VAR 0 2
28217: ARRAY
28218: IFFALSE 28427
// begin if GetControl ( vehicle ) = control_manual then
28220: LD_VAR 0 1
28224: PPUSH
28225: CALL_OW 263
28229: PUSH
28230: LD_INT 1
28232: EQUAL
28233: IFFALSE 28314
// begin driver := IsDrivenBy ( vehicle ) ;
28235: LD_ADDR_VAR 0 4
28239: PUSH
28240: LD_VAR 0 1
28244: PPUSH
28245: CALL_OW 311
28249: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28250: LD_VAR 0 4
28254: PPUSH
28255: LD_EXP 80
28259: PUSH
28260: LD_VAR 0 2
28264: ARRAY
28265: PUSH
28266: LD_INT 3
28268: ARRAY
28269: PPUSH
28270: LD_EXP 80
28274: PUSH
28275: LD_VAR 0 2
28279: ARRAY
28280: PUSH
28281: LD_INT 4
28283: ARRAY
28284: PPUSH
28285: CALL_OW 171
// AddComExitVehicle ( driver ) ;
28289: LD_VAR 0 4
28293: PPUSH
28294: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
28298: LD_VAR 0 4
28302: PPUSH
28303: LD_VAR 0 2
28307: PPUSH
28308: CALL_OW 180
// end else
28312: GO 28427
// if GetControl ( vehicle ) = control_remote then
28314: LD_VAR 0 1
28318: PPUSH
28319: CALL_OW 263
28323: PUSH
28324: LD_INT 2
28326: EQUAL
28327: IFFALSE 28388
// begin wait ( 0 0$2 ) ;
28329: LD_INT 70
28331: PPUSH
28332: CALL_OW 67
// if Connect ( vehicle ) then
28336: LD_VAR 0 1
28340: PPUSH
28341: CALL 41092 0 1
28345: IFFALSE 28386
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28347: LD_VAR 0 1
28351: PPUSH
28352: LD_EXP 80
28356: PUSH
28357: LD_VAR 0 2
28361: ARRAY
28362: PUSH
28363: LD_INT 3
28365: ARRAY
28366: PPUSH
28367: LD_EXP 80
28371: PUSH
28372: LD_VAR 0 2
28376: ARRAY
28377: PUSH
28378: LD_INT 4
28380: ARRAY
28381: PPUSH
28382: CALL_OW 171
// end else
28386: GO 28427
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28388: LD_VAR 0 1
28392: PPUSH
28393: LD_EXP 80
28397: PUSH
28398: LD_VAR 0 2
28402: ARRAY
28403: PUSH
28404: LD_INT 3
28406: ARRAY
28407: PPUSH
28408: LD_EXP 80
28412: PUSH
28413: LD_VAR 0 2
28417: ARRAY
28418: PUSH
28419: LD_INT 4
28421: ARRAY
28422: PPUSH
28423: CALL_OW 171
// end ; end ;
28427: LD_VAR 0 3
28431: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
28432: LD_INT 0
28434: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
28435: LD_VAR 0 1
28439: PUSH
28440: LD_INT 250
28442: EQUAL
28443: PUSH
28444: LD_VAR 0 2
28448: PPUSH
28449: CALL_OW 264
28453: PUSH
28454: LD_INT 81
28456: EQUAL
28457: AND
28458: IFFALSE 28479
// MinerPlaceMine ( unit , x , y ) ;
28460: LD_VAR 0 2
28464: PPUSH
28465: LD_VAR 0 4
28469: PPUSH
28470: LD_VAR 0 5
28474: PPUSH
28475: CALL 31303 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
28479: LD_VAR 0 1
28483: PUSH
28484: LD_INT 251
28486: EQUAL
28487: PUSH
28488: LD_VAR 0 2
28492: PPUSH
28493: CALL_OW 264
28497: PUSH
28498: LD_INT 81
28500: EQUAL
28501: AND
28502: IFFALSE 28523
// MinerDetonateMine ( unit , x , y ) ;
28504: LD_VAR 0 2
28508: PPUSH
28509: LD_VAR 0 4
28513: PPUSH
28514: LD_VAR 0 5
28518: PPUSH
28519: CALL 31578 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
28523: LD_VAR 0 1
28527: PUSH
28528: LD_INT 252
28530: EQUAL
28531: PUSH
28532: LD_VAR 0 2
28536: PPUSH
28537: CALL_OW 264
28541: PUSH
28542: LD_INT 81
28544: EQUAL
28545: AND
28546: IFFALSE 28567
// MinerCreateMinefield ( unit , x , y ) ;
28548: LD_VAR 0 2
28552: PPUSH
28553: LD_VAR 0 4
28557: PPUSH
28558: LD_VAR 0 5
28562: PPUSH
28563: CALL 31995 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
28567: LD_VAR 0 1
28571: PUSH
28572: LD_INT 253
28574: EQUAL
28575: PUSH
28576: LD_VAR 0 2
28580: PPUSH
28581: CALL_OW 257
28585: PUSH
28586: LD_INT 5
28588: EQUAL
28589: AND
28590: IFFALSE 28611
// ComBinocular ( unit , x , y ) ;
28592: LD_VAR 0 2
28596: PPUSH
28597: LD_VAR 0 4
28601: PPUSH
28602: LD_VAR 0 5
28606: PPUSH
28607: CALL 32364 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
28611: LD_VAR 0 1
28615: PUSH
28616: LD_INT 254
28618: EQUAL
28619: PUSH
28620: LD_VAR 0 2
28624: PPUSH
28625: CALL_OW 264
28629: PUSH
28630: LD_INT 99
28632: EQUAL
28633: AND
28634: PUSH
28635: LD_VAR 0 3
28639: PPUSH
28640: CALL_OW 263
28644: PUSH
28645: LD_INT 3
28647: EQUAL
28648: AND
28649: IFFALSE 28665
// HackDestroyVehicle ( unit , selectedUnit ) ;
28651: LD_VAR 0 2
28655: PPUSH
28656: LD_VAR 0 3
28660: PPUSH
28661: CALL 30667 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
28665: LD_VAR 0 1
28669: PUSH
28670: LD_INT 255
28672: EQUAL
28673: PUSH
28674: LD_VAR 0 2
28678: PPUSH
28679: CALL_OW 264
28683: PUSH
28684: LD_INT 14
28686: PUSH
28687: LD_INT 53
28689: PUSH
28690: EMPTY
28691: LIST
28692: LIST
28693: IN
28694: AND
28695: PUSH
28696: LD_VAR 0 4
28700: PPUSH
28701: LD_VAR 0 5
28705: PPUSH
28706: CALL_OW 488
28710: AND
28711: IFFALSE 28735
// CutTreeXYR ( unit , x , y , 12 ) ;
28713: LD_VAR 0 2
28717: PPUSH
28718: LD_VAR 0 4
28722: PPUSH
28723: LD_VAR 0 5
28727: PPUSH
28728: LD_INT 12
28730: PPUSH
28731: CALL 28830 0 4
// if cmd = 256 then
28735: LD_VAR 0 1
28739: PUSH
28740: LD_INT 256
28742: EQUAL
28743: IFFALSE 28764
// SetFactoryWaypoint ( unit , x , y ) ;
28745: LD_VAR 0 2
28749: PPUSH
28750: LD_VAR 0 4
28754: PPUSH
28755: LD_VAR 0 5
28759: PPUSH
28760: CALL 26745 0 3
// if cmd = 257 then
28764: LD_VAR 0 1
28768: PUSH
28769: LD_INT 257
28771: EQUAL
28772: IFFALSE 28793
// SetWarehouseGatheringPoint ( unit , x , y ) ;
28774: LD_VAR 0 2
28778: PPUSH
28779: LD_VAR 0 4
28783: PPUSH
28784: LD_VAR 0 5
28788: PPUSH
28789: CALL 27107 0 3
// if cmd = 258 then
28793: LD_VAR 0 1
28797: PUSH
28798: LD_INT 258
28800: EQUAL
28801: IFFALSE 28825
// BurnTreeXYR ( unit , x , y , 8 ) ;
28803: LD_VAR 0 2
28807: PPUSH
28808: LD_VAR 0 4
28812: PPUSH
28813: LD_VAR 0 5
28817: PPUSH
28818: LD_INT 8
28820: PPUSH
28821: CALL 29224 0 4
// end ;
28825: LD_VAR 0 6
28829: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
28830: LD_INT 0
28832: PPUSH
28833: PPUSH
28834: PPUSH
28835: PPUSH
28836: PPUSH
28837: PPUSH
28838: PPUSH
28839: PPUSH
28840: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
28841: LD_VAR 0 1
28845: PPUSH
28846: CALL_OW 302
28850: NOT
28851: PUSH
28852: LD_VAR 0 2
28856: PPUSH
28857: LD_VAR 0 3
28861: PPUSH
28862: CALL_OW 488
28866: NOT
28867: OR
28868: PUSH
28869: LD_VAR 0 4
28873: NOT
28874: OR
28875: IFFALSE 28879
// exit ;
28877: GO 29219
// list := [ ] ;
28879: LD_ADDR_VAR 0 13
28883: PUSH
28884: EMPTY
28885: ST_TO_ADDR
// if x - r < 0 then
28886: LD_VAR 0 2
28890: PUSH
28891: LD_VAR 0 4
28895: MINUS
28896: PUSH
28897: LD_INT 0
28899: LESS
28900: IFFALSE 28912
// min_x := 0 else
28902: LD_ADDR_VAR 0 7
28906: PUSH
28907: LD_INT 0
28909: ST_TO_ADDR
28910: GO 28928
// min_x := x - r ;
28912: LD_ADDR_VAR 0 7
28916: PUSH
28917: LD_VAR 0 2
28921: PUSH
28922: LD_VAR 0 4
28926: MINUS
28927: ST_TO_ADDR
// if y - r < 0 then
28928: LD_VAR 0 3
28932: PUSH
28933: LD_VAR 0 4
28937: MINUS
28938: PUSH
28939: LD_INT 0
28941: LESS
28942: IFFALSE 28954
// min_y := 0 else
28944: LD_ADDR_VAR 0 8
28948: PUSH
28949: LD_INT 0
28951: ST_TO_ADDR
28952: GO 28970
// min_y := y - r ;
28954: LD_ADDR_VAR 0 8
28958: PUSH
28959: LD_VAR 0 3
28963: PUSH
28964: LD_VAR 0 4
28968: MINUS
28969: ST_TO_ADDR
// max_x := x + r ;
28970: LD_ADDR_VAR 0 9
28974: PUSH
28975: LD_VAR 0 2
28979: PUSH
28980: LD_VAR 0 4
28984: PLUS
28985: ST_TO_ADDR
// max_y := y + r ;
28986: LD_ADDR_VAR 0 10
28990: PUSH
28991: LD_VAR 0 3
28995: PUSH
28996: LD_VAR 0 4
29000: PLUS
29001: ST_TO_ADDR
// for _x = min_x to max_x do
29002: LD_ADDR_VAR 0 11
29006: PUSH
29007: DOUBLE
29008: LD_VAR 0 7
29012: DEC
29013: ST_TO_ADDR
29014: LD_VAR 0 9
29018: PUSH
29019: FOR_TO
29020: IFFALSE 29137
// for _y = min_y to max_y do
29022: LD_ADDR_VAR 0 12
29026: PUSH
29027: DOUBLE
29028: LD_VAR 0 8
29032: DEC
29033: ST_TO_ADDR
29034: LD_VAR 0 10
29038: PUSH
29039: FOR_TO
29040: IFFALSE 29133
// begin if not ValidHex ( _x , _y ) then
29042: LD_VAR 0 11
29046: PPUSH
29047: LD_VAR 0 12
29051: PPUSH
29052: CALL_OW 488
29056: NOT
29057: IFFALSE 29061
// continue ;
29059: GO 29039
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
29061: LD_VAR 0 11
29065: PPUSH
29066: LD_VAR 0 12
29070: PPUSH
29071: CALL_OW 351
29075: PUSH
29076: LD_VAR 0 11
29080: PPUSH
29081: LD_VAR 0 12
29085: PPUSH
29086: CALL_OW 554
29090: AND
29091: IFFALSE 29131
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
29093: LD_ADDR_VAR 0 13
29097: PUSH
29098: LD_VAR 0 13
29102: PPUSH
29103: LD_VAR 0 13
29107: PUSH
29108: LD_INT 1
29110: PLUS
29111: PPUSH
29112: LD_VAR 0 11
29116: PUSH
29117: LD_VAR 0 12
29121: PUSH
29122: EMPTY
29123: LIST
29124: LIST
29125: PPUSH
29126: CALL_OW 2
29130: ST_TO_ADDR
// end ;
29131: GO 29039
29133: POP
29134: POP
29135: GO 29019
29137: POP
29138: POP
// if not list then
29139: LD_VAR 0 13
29143: NOT
29144: IFFALSE 29148
// exit ;
29146: GO 29219
// for i in list do
29148: LD_ADDR_VAR 0 6
29152: PUSH
29153: LD_VAR 0 13
29157: PUSH
29158: FOR_IN
29159: IFFALSE 29217
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
29161: LD_VAR 0 1
29165: PPUSH
29166: LD_STRING M
29168: PUSH
29169: LD_VAR 0 6
29173: PUSH
29174: LD_INT 1
29176: ARRAY
29177: PUSH
29178: LD_VAR 0 6
29182: PUSH
29183: LD_INT 2
29185: ARRAY
29186: PUSH
29187: LD_INT 0
29189: PUSH
29190: LD_INT 0
29192: PUSH
29193: LD_INT 0
29195: PUSH
29196: LD_INT 0
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: LIST
29203: LIST
29204: LIST
29205: LIST
29206: LIST
29207: PUSH
29208: EMPTY
29209: LIST
29210: PPUSH
29211: CALL_OW 447
29215: GO 29158
29217: POP
29218: POP
// end ;
29219: LD_VAR 0 5
29223: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
29224: LD_INT 0
29226: PPUSH
29227: PPUSH
29228: PPUSH
29229: PPUSH
29230: PPUSH
29231: PPUSH
29232: PPUSH
29233: PPUSH
29234: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
29235: LD_VAR 0 1
29239: PPUSH
29240: CALL_OW 302
29244: NOT
29245: PUSH
29246: LD_VAR 0 2
29250: PPUSH
29251: LD_VAR 0 3
29255: PPUSH
29256: CALL_OW 488
29260: NOT
29261: OR
29262: PUSH
29263: LD_VAR 0 4
29267: NOT
29268: OR
29269: IFFALSE 29273
// exit ;
29271: GO 29621
// list := [ ] ;
29273: LD_ADDR_VAR 0 13
29277: PUSH
29278: EMPTY
29279: ST_TO_ADDR
// if x - r < 0 then
29280: LD_VAR 0 2
29284: PUSH
29285: LD_VAR 0 4
29289: MINUS
29290: PUSH
29291: LD_INT 0
29293: LESS
29294: IFFALSE 29306
// min_x := 0 else
29296: LD_ADDR_VAR 0 7
29300: PUSH
29301: LD_INT 0
29303: ST_TO_ADDR
29304: GO 29322
// min_x := x - r ;
29306: LD_ADDR_VAR 0 7
29310: PUSH
29311: LD_VAR 0 2
29315: PUSH
29316: LD_VAR 0 4
29320: MINUS
29321: ST_TO_ADDR
// if y - r < 0 then
29322: LD_VAR 0 3
29326: PUSH
29327: LD_VAR 0 4
29331: MINUS
29332: PUSH
29333: LD_INT 0
29335: LESS
29336: IFFALSE 29348
// min_y := 0 else
29338: LD_ADDR_VAR 0 8
29342: PUSH
29343: LD_INT 0
29345: ST_TO_ADDR
29346: GO 29364
// min_y := y - r ;
29348: LD_ADDR_VAR 0 8
29352: PUSH
29353: LD_VAR 0 3
29357: PUSH
29358: LD_VAR 0 4
29362: MINUS
29363: ST_TO_ADDR
// max_x := x + r ;
29364: LD_ADDR_VAR 0 9
29368: PUSH
29369: LD_VAR 0 2
29373: PUSH
29374: LD_VAR 0 4
29378: PLUS
29379: ST_TO_ADDR
// max_y := y + r ;
29380: LD_ADDR_VAR 0 10
29384: PUSH
29385: LD_VAR 0 3
29389: PUSH
29390: LD_VAR 0 4
29394: PLUS
29395: ST_TO_ADDR
// for _x = min_x to max_x do
29396: LD_ADDR_VAR 0 11
29400: PUSH
29401: DOUBLE
29402: LD_VAR 0 7
29406: DEC
29407: ST_TO_ADDR
29408: LD_VAR 0 9
29412: PUSH
29413: FOR_TO
29414: IFFALSE 29531
// for _y = min_y to max_y do
29416: LD_ADDR_VAR 0 12
29420: PUSH
29421: DOUBLE
29422: LD_VAR 0 8
29426: DEC
29427: ST_TO_ADDR
29428: LD_VAR 0 10
29432: PUSH
29433: FOR_TO
29434: IFFALSE 29527
// begin if not ValidHex ( _x , _y ) then
29436: LD_VAR 0 11
29440: PPUSH
29441: LD_VAR 0 12
29445: PPUSH
29446: CALL_OW 488
29450: NOT
29451: IFFALSE 29455
// continue ;
29453: GO 29433
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
29455: LD_VAR 0 11
29459: PPUSH
29460: LD_VAR 0 12
29464: PPUSH
29465: CALL_OW 351
29469: PUSH
29470: LD_VAR 0 11
29474: PPUSH
29475: LD_VAR 0 12
29479: PPUSH
29480: CALL_OW 554
29484: AND
29485: IFFALSE 29525
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
29487: LD_ADDR_VAR 0 13
29491: PUSH
29492: LD_VAR 0 13
29496: PPUSH
29497: LD_VAR 0 13
29501: PUSH
29502: LD_INT 1
29504: PLUS
29505: PPUSH
29506: LD_VAR 0 11
29510: PUSH
29511: LD_VAR 0 12
29515: PUSH
29516: EMPTY
29517: LIST
29518: LIST
29519: PPUSH
29520: CALL_OW 2
29524: ST_TO_ADDR
// end ;
29525: GO 29433
29527: POP
29528: POP
29529: GO 29413
29531: POP
29532: POP
// if not list then
29533: LD_VAR 0 13
29537: NOT
29538: IFFALSE 29542
// exit ;
29540: GO 29621
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
29542: LD_ADDR_VAR 0 13
29546: PUSH
29547: LD_VAR 0 1
29551: PPUSH
29552: LD_VAR 0 13
29556: PPUSH
29557: LD_INT 1
29559: PPUSH
29560: LD_INT 1
29562: PPUSH
29563: CALL 38234 0 4
29567: ST_TO_ADDR
// ComStop ( flame ) ;
29568: LD_VAR 0 1
29572: PPUSH
29573: CALL_OW 141
// for i in list do
29577: LD_ADDR_VAR 0 6
29581: PUSH
29582: LD_VAR 0 13
29586: PUSH
29587: FOR_IN
29588: IFFALSE 29619
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
29590: LD_VAR 0 1
29594: PPUSH
29595: LD_VAR 0 6
29599: PUSH
29600: LD_INT 1
29602: ARRAY
29603: PPUSH
29604: LD_VAR 0 6
29608: PUSH
29609: LD_INT 2
29611: ARRAY
29612: PPUSH
29613: CALL_OW 176
29617: GO 29587
29619: POP
29620: POP
// end ;
29621: LD_VAR 0 5
29625: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
29626: LD_EXP 83
29630: NOT
29631: IFFALSE 29681
29633: GO 29635
29635: DISABLE
// begin initHack := true ;
29636: LD_ADDR_EXP 83
29640: PUSH
29641: LD_INT 1
29643: ST_TO_ADDR
// hackTanks := [ ] ;
29644: LD_ADDR_EXP 84
29648: PUSH
29649: EMPTY
29650: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
29651: LD_ADDR_EXP 85
29655: PUSH
29656: EMPTY
29657: ST_TO_ADDR
// hackLimit := 3 ;
29658: LD_ADDR_EXP 86
29662: PUSH
29663: LD_INT 3
29665: ST_TO_ADDR
// hackDist := 12 ;
29666: LD_ADDR_EXP 87
29670: PUSH
29671: LD_INT 12
29673: ST_TO_ADDR
// hackCounter := [ ] ;
29674: LD_ADDR_EXP 88
29678: PUSH
29679: EMPTY
29680: ST_TO_ADDR
// end ;
29681: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
29682: LD_EXP 83
29686: PUSH
29687: LD_INT 34
29689: PUSH
29690: LD_INT 99
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: PPUSH
29697: CALL_OW 69
29701: AND
29702: IFFALSE 29955
29704: GO 29706
29706: DISABLE
29707: LD_INT 0
29709: PPUSH
29710: PPUSH
// begin enable ;
29711: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
29712: LD_ADDR_VAR 0 1
29716: PUSH
29717: LD_INT 34
29719: PUSH
29720: LD_INT 99
29722: PUSH
29723: EMPTY
29724: LIST
29725: LIST
29726: PPUSH
29727: CALL_OW 69
29731: PUSH
29732: FOR_IN
29733: IFFALSE 29953
// begin if not i in hackTanks then
29735: LD_VAR 0 1
29739: PUSH
29740: LD_EXP 84
29744: IN
29745: NOT
29746: IFFALSE 29829
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
29748: LD_ADDR_EXP 84
29752: PUSH
29753: LD_EXP 84
29757: PPUSH
29758: LD_EXP 84
29762: PUSH
29763: LD_INT 1
29765: PLUS
29766: PPUSH
29767: LD_VAR 0 1
29771: PPUSH
29772: CALL_OW 1
29776: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
29777: LD_ADDR_EXP 85
29781: PUSH
29782: LD_EXP 85
29786: PPUSH
29787: LD_EXP 85
29791: PUSH
29792: LD_INT 1
29794: PLUS
29795: PPUSH
29796: EMPTY
29797: PPUSH
29798: CALL_OW 1
29802: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
29803: LD_ADDR_EXP 88
29807: PUSH
29808: LD_EXP 88
29812: PPUSH
29813: LD_EXP 88
29817: PUSH
29818: LD_INT 1
29820: PLUS
29821: PPUSH
29822: EMPTY
29823: PPUSH
29824: CALL_OW 1
29828: ST_TO_ADDR
// end ; if not IsOk ( i ) then
29829: LD_VAR 0 1
29833: PPUSH
29834: CALL_OW 302
29838: NOT
29839: IFFALSE 29852
// begin HackUnlinkAll ( i ) ;
29841: LD_VAR 0 1
29845: PPUSH
29846: CALL 29958 0 1
// continue ;
29850: GO 29732
// end ; HackCheckCapturedStatus ( i ) ;
29852: LD_VAR 0 1
29856: PPUSH
29857: CALL 30401 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
29861: LD_ADDR_VAR 0 2
29865: PUSH
29866: LD_INT 81
29868: PUSH
29869: LD_VAR 0 1
29873: PPUSH
29874: CALL_OW 255
29878: PUSH
29879: EMPTY
29880: LIST
29881: LIST
29882: PUSH
29883: LD_INT 33
29885: PUSH
29886: LD_INT 3
29888: PUSH
29889: EMPTY
29890: LIST
29891: LIST
29892: PUSH
29893: LD_INT 91
29895: PUSH
29896: LD_VAR 0 1
29900: PUSH
29901: LD_EXP 87
29905: PUSH
29906: EMPTY
29907: LIST
29908: LIST
29909: LIST
29910: PUSH
29911: LD_INT 50
29913: PUSH
29914: EMPTY
29915: LIST
29916: PUSH
29917: EMPTY
29918: LIST
29919: LIST
29920: LIST
29921: LIST
29922: PPUSH
29923: CALL_OW 69
29927: ST_TO_ADDR
// if not tmp then
29928: LD_VAR 0 2
29932: NOT
29933: IFFALSE 29937
// continue ;
29935: GO 29732
// HackLink ( i , tmp ) ;
29937: LD_VAR 0 1
29941: PPUSH
29942: LD_VAR 0 2
29946: PPUSH
29947: CALL 30094 0 2
// end ;
29951: GO 29732
29953: POP
29954: POP
// end ;
29955: PPOPN 2
29957: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
29958: LD_INT 0
29960: PPUSH
29961: PPUSH
29962: PPUSH
// if not hack in hackTanks then
29963: LD_VAR 0 1
29967: PUSH
29968: LD_EXP 84
29972: IN
29973: NOT
29974: IFFALSE 29978
// exit ;
29976: GO 30089
// index := GetElementIndex ( hackTanks , hack ) ;
29978: LD_ADDR_VAR 0 4
29982: PUSH
29983: LD_EXP 84
29987: PPUSH
29988: LD_VAR 0 1
29992: PPUSH
29993: CALL 37531 0 2
29997: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
29998: LD_EXP 85
30002: PUSH
30003: LD_VAR 0 4
30007: ARRAY
30008: IFFALSE 30089
// begin for i in hackTanksCaptured [ index ] do
30010: LD_ADDR_VAR 0 3
30014: PUSH
30015: LD_EXP 85
30019: PUSH
30020: LD_VAR 0 4
30024: ARRAY
30025: PUSH
30026: FOR_IN
30027: IFFALSE 30053
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
30029: LD_VAR 0 3
30033: PUSH
30034: LD_INT 1
30036: ARRAY
30037: PPUSH
30038: LD_VAR 0 3
30042: PUSH
30043: LD_INT 2
30045: ARRAY
30046: PPUSH
30047: CALL_OW 235
30051: GO 30026
30053: POP
30054: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
30055: LD_ADDR_EXP 85
30059: PUSH
30060: LD_EXP 85
30064: PPUSH
30065: LD_VAR 0 4
30069: PPUSH
30070: EMPTY
30071: PPUSH
30072: CALL_OW 1
30076: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
30077: LD_VAR 0 1
30081: PPUSH
30082: LD_INT 0
30084: PPUSH
30085: CALL_OW 505
// end ; end ;
30089: LD_VAR 0 2
30093: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
30094: LD_INT 0
30096: PPUSH
30097: PPUSH
30098: PPUSH
// if not hack in hackTanks or not vehicles then
30099: LD_VAR 0 1
30103: PUSH
30104: LD_EXP 84
30108: IN
30109: NOT
30110: PUSH
30111: LD_VAR 0 2
30115: NOT
30116: OR
30117: IFFALSE 30121
// exit ;
30119: GO 30396
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
30121: LD_ADDR_VAR 0 2
30125: PUSH
30126: LD_VAR 0 1
30130: PPUSH
30131: LD_VAR 0 2
30135: PPUSH
30136: LD_INT 1
30138: PPUSH
30139: LD_INT 1
30141: PPUSH
30142: CALL 38181 0 4
30146: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
30147: LD_ADDR_VAR 0 5
30151: PUSH
30152: LD_EXP 84
30156: PPUSH
30157: LD_VAR 0 1
30161: PPUSH
30162: CALL 37531 0 2
30166: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
30167: LD_EXP 85
30171: PUSH
30172: LD_VAR 0 5
30176: ARRAY
30177: PUSH
30178: LD_EXP 86
30182: LESS
30183: IFFALSE 30372
// begin for i := 1 to vehicles do
30185: LD_ADDR_VAR 0 4
30189: PUSH
30190: DOUBLE
30191: LD_INT 1
30193: DEC
30194: ST_TO_ADDR
30195: LD_VAR 0 2
30199: PUSH
30200: FOR_TO
30201: IFFALSE 30370
// begin if hackTanksCaptured [ index ] = hackLimit then
30203: LD_EXP 85
30207: PUSH
30208: LD_VAR 0 5
30212: ARRAY
30213: PUSH
30214: LD_EXP 86
30218: EQUAL
30219: IFFALSE 30223
// break ;
30221: GO 30370
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
30223: LD_ADDR_EXP 88
30227: PUSH
30228: LD_EXP 88
30232: PPUSH
30233: LD_VAR 0 5
30237: PPUSH
30238: LD_EXP 88
30242: PUSH
30243: LD_VAR 0 5
30247: ARRAY
30248: PUSH
30249: LD_INT 1
30251: PLUS
30252: PPUSH
30253: CALL_OW 1
30257: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
30258: LD_ADDR_EXP 85
30262: PUSH
30263: LD_EXP 85
30267: PPUSH
30268: LD_VAR 0 5
30272: PUSH
30273: LD_EXP 85
30277: PUSH
30278: LD_VAR 0 5
30282: ARRAY
30283: PUSH
30284: LD_INT 1
30286: PLUS
30287: PUSH
30288: EMPTY
30289: LIST
30290: LIST
30291: PPUSH
30292: LD_VAR 0 2
30296: PUSH
30297: LD_VAR 0 4
30301: ARRAY
30302: PUSH
30303: LD_VAR 0 2
30307: PUSH
30308: LD_VAR 0 4
30312: ARRAY
30313: PPUSH
30314: CALL_OW 255
30318: PUSH
30319: EMPTY
30320: LIST
30321: LIST
30322: PPUSH
30323: CALL 37746 0 3
30327: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
30328: LD_VAR 0 2
30332: PUSH
30333: LD_VAR 0 4
30337: ARRAY
30338: PPUSH
30339: LD_VAR 0 1
30343: PPUSH
30344: CALL_OW 255
30348: PPUSH
30349: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
30353: LD_VAR 0 2
30357: PUSH
30358: LD_VAR 0 4
30362: ARRAY
30363: PPUSH
30364: CALL_OW 141
// end ;
30368: GO 30200
30370: POP
30371: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30372: LD_VAR 0 1
30376: PPUSH
30377: LD_EXP 85
30381: PUSH
30382: LD_VAR 0 5
30386: ARRAY
30387: PUSH
30388: LD_INT 0
30390: PLUS
30391: PPUSH
30392: CALL_OW 505
// end ;
30396: LD_VAR 0 3
30400: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
30401: LD_INT 0
30403: PPUSH
30404: PPUSH
30405: PPUSH
30406: PPUSH
// if not hack in hackTanks then
30407: LD_VAR 0 1
30411: PUSH
30412: LD_EXP 84
30416: IN
30417: NOT
30418: IFFALSE 30422
// exit ;
30420: GO 30662
// index := GetElementIndex ( hackTanks , hack ) ;
30422: LD_ADDR_VAR 0 4
30426: PUSH
30427: LD_EXP 84
30431: PPUSH
30432: LD_VAR 0 1
30436: PPUSH
30437: CALL 37531 0 2
30441: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
30442: LD_ADDR_VAR 0 3
30446: PUSH
30447: DOUBLE
30448: LD_EXP 85
30452: PUSH
30453: LD_VAR 0 4
30457: ARRAY
30458: INC
30459: ST_TO_ADDR
30460: LD_INT 1
30462: PUSH
30463: FOR_DOWNTO
30464: IFFALSE 30636
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
30466: LD_ADDR_VAR 0 5
30470: PUSH
30471: LD_EXP 85
30475: PUSH
30476: LD_VAR 0 4
30480: ARRAY
30481: PUSH
30482: LD_VAR 0 3
30486: ARRAY
30487: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
30488: LD_VAR 0 5
30492: PUSH
30493: LD_INT 1
30495: ARRAY
30496: PPUSH
30497: CALL_OW 302
30501: NOT
30502: PUSH
30503: LD_VAR 0 5
30507: PUSH
30508: LD_INT 1
30510: ARRAY
30511: PPUSH
30512: CALL_OW 255
30516: PUSH
30517: LD_VAR 0 1
30521: PPUSH
30522: CALL_OW 255
30526: NONEQUAL
30527: OR
30528: IFFALSE 30634
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
30530: LD_VAR 0 5
30534: PUSH
30535: LD_INT 1
30537: ARRAY
30538: PPUSH
30539: CALL_OW 305
30543: PUSH
30544: LD_VAR 0 5
30548: PUSH
30549: LD_INT 1
30551: ARRAY
30552: PPUSH
30553: CALL_OW 255
30557: PUSH
30558: LD_VAR 0 1
30562: PPUSH
30563: CALL_OW 255
30567: EQUAL
30568: AND
30569: IFFALSE 30593
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
30571: LD_VAR 0 5
30575: PUSH
30576: LD_INT 1
30578: ARRAY
30579: PPUSH
30580: LD_VAR 0 5
30584: PUSH
30585: LD_INT 2
30587: ARRAY
30588: PPUSH
30589: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
30593: LD_ADDR_EXP 85
30597: PUSH
30598: LD_EXP 85
30602: PPUSH
30603: LD_VAR 0 4
30607: PPUSH
30608: LD_EXP 85
30612: PUSH
30613: LD_VAR 0 4
30617: ARRAY
30618: PPUSH
30619: LD_VAR 0 3
30623: PPUSH
30624: CALL_OW 3
30628: PPUSH
30629: CALL_OW 1
30633: ST_TO_ADDR
// end ; end ;
30634: GO 30463
30636: POP
30637: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30638: LD_VAR 0 1
30642: PPUSH
30643: LD_EXP 85
30647: PUSH
30648: LD_VAR 0 4
30652: ARRAY
30653: PUSH
30654: LD_INT 0
30656: PLUS
30657: PPUSH
30658: CALL_OW 505
// end ;
30662: LD_VAR 0 2
30666: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
30667: LD_INT 0
30669: PPUSH
30670: PPUSH
30671: PPUSH
30672: PPUSH
// if not hack in hackTanks then
30673: LD_VAR 0 1
30677: PUSH
30678: LD_EXP 84
30682: IN
30683: NOT
30684: IFFALSE 30688
// exit ;
30686: GO 30773
// index := GetElementIndex ( hackTanks , hack ) ;
30688: LD_ADDR_VAR 0 5
30692: PUSH
30693: LD_EXP 84
30697: PPUSH
30698: LD_VAR 0 1
30702: PPUSH
30703: CALL 37531 0 2
30707: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
30708: LD_ADDR_VAR 0 4
30712: PUSH
30713: DOUBLE
30714: LD_INT 1
30716: DEC
30717: ST_TO_ADDR
30718: LD_EXP 85
30722: PUSH
30723: LD_VAR 0 5
30727: ARRAY
30728: PUSH
30729: FOR_TO
30730: IFFALSE 30771
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
30732: LD_EXP 85
30736: PUSH
30737: LD_VAR 0 5
30741: ARRAY
30742: PUSH
30743: LD_VAR 0 4
30747: ARRAY
30748: PUSH
30749: LD_INT 1
30751: ARRAY
30752: PUSH
30753: LD_VAR 0 2
30757: EQUAL
30758: IFFALSE 30769
// KillUnit ( vehicle ) ;
30760: LD_VAR 0 2
30764: PPUSH
30765: CALL_OW 66
30769: GO 30729
30771: POP
30772: POP
// end ;
30773: LD_VAR 0 3
30777: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
30778: LD_EXP 89
30782: NOT
30783: IFFALSE 30818
30785: GO 30787
30787: DISABLE
// begin initMiner := true ;
30788: LD_ADDR_EXP 89
30792: PUSH
30793: LD_INT 1
30795: ST_TO_ADDR
// minersList := [ ] ;
30796: LD_ADDR_EXP 90
30800: PUSH
30801: EMPTY
30802: ST_TO_ADDR
// minerMinesList := [ ] ;
30803: LD_ADDR_EXP 91
30807: PUSH
30808: EMPTY
30809: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
30810: LD_ADDR_EXP 92
30814: PUSH
30815: LD_INT 5
30817: ST_TO_ADDR
// end ;
30818: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
30819: LD_EXP 89
30823: PUSH
30824: LD_INT 34
30826: PUSH
30827: LD_INT 81
30829: PUSH
30830: EMPTY
30831: LIST
30832: LIST
30833: PPUSH
30834: CALL_OW 69
30838: AND
30839: IFFALSE 31300
30841: GO 30843
30843: DISABLE
30844: LD_INT 0
30846: PPUSH
30847: PPUSH
30848: PPUSH
30849: PPUSH
// begin enable ;
30850: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
30851: LD_ADDR_VAR 0 1
30855: PUSH
30856: LD_INT 34
30858: PUSH
30859: LD_INT 81
30861: PUSH
30862: EMPTY
30863: LIST
30864: LIST
30865: PPUSH
30866: CALL_OW 69
30870: PUSH
30871: FOR_IN
30872: IFFALSE 30944
// begin if not i in minersList then
30874: LD_VAR 0 1
30878: PUSH
30879: LD_EXP 90
30883: IN
30884: NOT
30885: IFFALSE 30942
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
30887: LD_ADDR_EXP 90
30891: PUSH
30892: LD_EXP 90
30896: PPUSH
30897: LD_EXP 90
30901: PUSH
30902: LD_INT 1
30904: PLUS
30905: PPUSH
30906: LD_VAR 0 1
30910: PPUSH
30911: CALL_OW 1
30915: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
30916: LD_ADDR_EXP 91
30920: PUSH
30921: LD_EXP 91
30925: PPUSH
30926: LD_EXP 91
30930: PUSH
30931: LD_INT 1
30933: PLUS
30934: PPUSH
30935: EMPTY
30936: PPUSH
30937: CALL_OW 1
30941: ST_TO_ADDR
// end end ;
30942: GO 30871
30944: POP
30945: POP
// for i := minerMinesList downto 1 do
30946: LD_ADDR_VAR 0 1
30950: PUSH
30951: DOUBLE
30952: LD_EXP 91
30956: INC
30957: ST_TO_ADDR
30958: LD_INT 1
30960: PUSH
30961: FOR_DOWNTO
30962: IFFALSE 31298
// begin if IsLive ( minersList [ i ] ) then
30964: LD_EXP 90
30968: PUSH
30969: LD_VAR 0 1
30973: ARRAY
30974: PPUSH
30975: CALL_OW 300
30979: IFFALSE 31007
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
30981: LD_EXP 90
30985: PUSH
30986: LD_VAR 0 1
30990: ARRAY
30991: PPUSH
30992: LD_EXP 91
30996: PUSH
30997: LD_VAR 0 1
31001: ARRAY
31002: PPUSH
31003: CALL_OW 505
// if not minerMinesList [ i ] then
31007: LD_EXP 91
31011: PUSH
31012: LD_VAR 0 1
31016: ARRAY
31017: NOT
31018: IFFALSE 31022
// continue ;
31020: GO 30961
// for j := minerMinesList [ i ] downto 1 do
31022: LD_ADDR_VAR 0 2
31026: PUSH
31027: DOUBLE
31028: LD_EXP 91
31032: PUSH
31033: LD_VAR 0 1
31037: ARRAY
31038: INC
31039: ST_TO_ADDR
31040: LD_INT 1
31042: PUSH
31043: FOR_DOWNTO
31044: IFFALSE 31294
// begin side := GetSide ( minersList [ i ] ) ;
31046: LD_ADDR_VAR 0 3
31050: PUSH
31051: LD_EXP 90
31055: PUSH
31056: LD_VAR 0 1
31060: ARRAY
31061: PPUSH
31062: CALL_OW 255
31066: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
31067: LD_ADDR_VAR 0 4
31071: PUSH
31072: LD_EXP 91
31076: PUSH
31077: LD_VAR 0 1
31081: ARRAY
31082: PUSH
31083: LD_VAR 0 2
31087: ARRAY
31088: PUSH
31089: LD_INT 1
31091: ARRAY
31092: PPUSH
31093: LD_EXP 91
31097: PUSH
31098: LD_VAR 0 1
31102: ARRAY
31103: PUSH
31104: LD_VAR 0 2
31108: ARRAY
31109: PUSH
31110: LD_INT 2
31112: ARRAY
31113: PPUSH
31114: CALL_OW 428
31118: ST_TO_ADDR
// if not tmp then
31119: LD_VAR 0 4
31123: NOT
31124: IFFALSE 31128
// continue ;
31126: GO 31043
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
31128: LD_VAR 0 4
31132: PUSH
31133: LD_INT 81
31135: PUSH
31136: LD_VAR 0 3
31140: PUSH
31141: EMPTY
31142: LIST
31143: LIST
31144: PPUSH
31145: CALL_OW 69
31149: IN
31150: PUSH
31151: LD_EXP 91
31155: PUSH
31156: LD_VAR 0 1
31160: ARRAY
31161: PUSH
31162: LD_VAR 0 2
31166: ARRAY
31167: PUSH
31168: LD_INT 1
31170: ARRAY
31171: PPUSH
31172: LD_EXP 91
31176: PUSH
31177: LD_VAR 0 1
31181: ARRAY
31182: PUSH
31183: LD_VAR 0 2
31187: ARRAY
31188: PUSH
31189: LD_INT 2
31191: ARRAY
31192: PPUSH
31193: CALL_OW 458
31197: AND
31198: IFFALSE 31292
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
31200: LD_EXP 91
31204: PUSH
31205: LD_VAR 0 1
31209: ARRAY
31210: PUSH
31211: LD_VAR 0 2
31215: ARRAY
31216: PUSH
31217: LD_INT 1
31219: ARRAY
31220: PPUSH
31221: LD_EXP 91
31225: PUSH
31226: LD_VAR 0 1
31230: ARRAY
31231: PUSH
31232: LD_VAR 0 2
31236: ARRAY
31237: PUSH
31238: LD_INT 2
31240: ARRAY
31241: PPUSH
31242: LD_VAR 0 3
31246: PPUSH
31247: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
31251: LD_ADDR_EXP 91
31255: PUSH
31256: LD_EXP 91
31260: PPUSH
31261: LD_VAR 0 1
31265: PPUSH
31266: LD_EXP 91
31270: PUSH
31271: LD_VAR 0 1
31275: ARRAY
31276: PPUSH
31277: LD_VAR 0 2
31281: PPUSH
31282: CALL_OW 3
31286: PPUSH
31287: CALL_OW 1
31291: ST_TO_ADDR
// end ; end ;
31292: GO 31043
31294: POP
31295: POP
// end ;
31296: GO 30961
31298: POP
31299: POP
// end ;
31300: PPOPN 4
31302: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
31303: LD_INT 0
31305: PPUSH
31306: PPUSH
// result := false ;
31307: LD_ADDR_VAR 0 4
31311: PUSH
31312: LD_INT 0
31314: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
31315: LD_VAR 0 1
31319: PPUSH
31320: CALL_OW 264
31324: PUSH
31325: LD_INT 81
31327: EQUAL
31328: NOT
31329: IFFALSE 31333
// exit ;
31331: GO 31573
// index := GetElementIndex ( minersList , unit ) ;
31333: LD_ADDR_VAR 0 5
31337: PUSH
31338: LD_EXP 90
31342: PPUSH
31343: LD_VAR 0 1
31347: PPUSH
31348: CALL 37531 0 2
31352: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
31353: LD_EXP 91
31357: PUSH
31358: LD_VAR 0 5
31362: ARRAY
31363: PUSH
31364: LD_EXP 92
31368: GREATEREQUAL
31369: IFFALSE 31373
// exit ;
31371: GO 31573
// ComMoveXY ( unit , x , y ) ;
31373: LD_VAR 0 1
31377: PPUSH
31378: LD_VAR 0 2
31382: PPUSH
31383: LD_VAR 0 3
31387: PPUSH
31388: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31392: LD_INT 35
31394: PPUSH
31395: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
31399: LD_VAR 0 1
31403: PPUSH
31404: LD_VAR 0 2
31408: PPUSH
31409: LD_VAR 0 3
31413: PPUSH
31414: CALL 69283 0 3
31418: NOT
31419: PUSH
31420: LD_VAR 0 1
31424: PPUSH
31425: CALL_OW 314
31429: AND
31430: IFFALSE 31434
// exit ;
31432: GO 31573
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
31434: LD_VAR 0 2
31438: PPUSH
31439: LD_VAR 0 3
31443: PPUSH
31444: CALL_OW 428
31448: PUSH
31449: LD_VAR 0 1
31453: EQUAL
31454: PUSH
31455: LD_VAR 0 1
31459: PPUSH
31460: CALL_OW 314
31464: NOT
31465: AND
31466: IFFALSE 31392
// PlaySoundXY ( x , y , PlantMine ) ;
31468: LD_VAR 0 2
31472: PPUSH
31473: LD_VAR 0 3
31477: PPUSH
31478: LD_STRING PlantMine
31480: PPUSH
31481: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
31485: LD_VAR 0 2
31489: PPUSH
31490: LD_VAR 0 3
31494: PPUSH
31495: LD_VAR 0 1
31499: PPUSH
31500: CALL_OW 255
31504: PPUSH
31505: LD_INT 0
31507: PPUSH
31508: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
31512: LD_ADDR_EXP 91
31516: PUSH
31517: LD_EXP 91
31521: PPUSH
31522: LD_VAR 0 5
31526: PUSH
31527: LD_EXP 91
31531: PUSH
31532: LD_VAR 0 5
31536: ARRAY
31537: PUSH
31538: LD_INT 1
31540: PLUS
31541: PUSH
31542: EMPTY
31543: LIST
31544: LIST
31545: PPUSH
31546: LD_VAR 0 2
31550: PUSH
31551: LD_VAR 0 3
31555: PUSH
31556: EMPTY
31557: LIST
31558: LIST
31559: PPUSH
31560: CALL 37746 0 3
31564: ST_TO_ADDR
// result := true ;
31565: LD_ADDR_VAR 0 4
31569: PUSH
31570: LD_INT 1
31572: ST_TO_ADDR
// end ;
31573: LD_VAR 0 4
31577: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
31578: LD_INT 0
31580: PPUSH
31581: PPUSH
31582: PPUSH
// if not unit in minersList then
31583: LD_VAR 0 1
31587: PUSH
31588: LD_EXP 90
31592: IN
31593: NOT
31594: IFFALSE 31598
// exit ;
31596: GO 31990
// index := GetElementIndex ( minersList , unit ) ;
31598: LD_ADDR_VAR 0 6
31602: PUSH
31603: LD_EXP 90
31607: PPUSH
31608: LD_VAR 0 1
31612: PPUSH
31613: CALL 37531 0 2
31617: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
31618: LD_ADDR_VAR 0 5
31622: PUSH
31623: DOUBLE
31624: LD_EXP 91
31628: PUSH
31629: LD_VAR 0 6
31633: ARRAY
31634: INC
31635: ST_TO_ADDR
31636: LD_INT 1
31638: PUSH
31639: FOR_DOWNTO
31640: IFFALSE 31801
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
31642: LD_EXP 91
31646: PUSH
31647: LD_VAR 0 6
31651: ARRAY
31652: PUSH
31653: LD_VAR 0 5
31657: ARRAY
31658: PUSH
31659: LD_INT 1
31661: ARRAY
31662: PUSH
31663: LD_VAR 0 2
31667: EQUAL
31668: PUSH
31669: LD_EXP 91
31673: PUSH
31674: LD_VAR 0 6
31678: ARRAY
31679: PUSH
31680: LD_VAR 0 5
31684: ARRAY
31685: PUSH
31686: LD_INT 2
31688: ARRAY
31689: PUSH
31690: LD_VAR 0 3
31694: EQUAL
31695: AND
31696: IFFALSE 31799
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31698: LD_EXP 91
31702: PUSH
31703: LD_VAR 0 6
31707: ARRAY
31708: PUSH
31709: LD_VAR 0 5
31713: ARRAY
31714: PUSH
31715: LD_INT 1
31717: ARRAY
31718: PPUSH
31719: LD_EXP 91
31723: PUSH
31724: LD_VAR 0 6
31728: ARRAY
31729: PUSH
31730: LD_VAR 0 5
31734: ARRAY
31735: PUSH
31736: LD_INT 2
31738: ARRAY
31739: PPUSH
31740: LD_VAR 0 1
31744: PPUSH
31745: CALL_OW 255
31749: PPUSH
31750: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31754: LD_ADDR_EXP 91
31758: PUSH
31759: LD_EXP 91
31763: PPUSH
31764: LD_VAR 0 6
31768: PPUSH
31769: LD_EXP 91
31773: PUSH
31774: LD_VAR 0 6
31778: ARRAY
31779: PPUSH
31780: LD_VAR 0 5
31784: PPUSH
31785: CALL_OW 3
31789: PPUSH
31790: CALL_OW 1
31794: ST_TO_ADDR
// exit ;
31795: POP
31796: POP
31797: GO 31990
// end ; end ;
31799: GO 31639
31801: POP
31802: POP
// for i := minerMinesList [ index ] downto 1 do
31803: LD_ADDR_VAR 0 5
31807: PUSH
31808: DOUBLE
31809: LD_EXP 91
31813: PUSH
31814: LD_VAR 0 6
31818: ARRAY
31819: INC
31820: ST_TO_ADDR
31821: LD_INT 1
31823: PUSH
31824: FOR_DOWNTO
31825: IFFALSE 31988
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
31827: LD_EXP 91
31831: PUSH
31832: LD_VAR 0 6
31836: ARRAY
31837: PUSH
31838: LD_VAR 0 5
31842: ARRAY
31843: PUSH
31844: LD_INT 1
31846: ARRAY
31847: PPUSH
31848: LD_EXP 91
31852: PUSH
31853: LD_VAR 0 6
31857: ARRAY
31858: PUSH
31859: LD_VAR 0 5
31863: ARRAY
31864: PUSH
31865: LD_INT 2
31867: ARRAY
31868: PPUSH
31869: LD_VAR 0 2
31873: PPUSH
31874: LD_VAR 0 3
31878: PPUSH
31879: CALL_OW 298
31883: PUSH
31884: LD_INT 6
31886: LESS
31887: IFFALSE 31986
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31889: LD_EXP 91
31893: PUSH
31894: LD_VAR 0 6
31898: ARRAY
31899: PUSH
31900: LD_VAR 0 5
31904: ARRAY
31905: PUSH
31906: LD_INT 1
31908: ARRAY
31909: PPUSH
31910: LD_EXP 91
31914: PUSH
31915: LD_VAR 0 6
31919: ARRAY
31920: PUSH
31921: LD_VAR 0 5
31925: ARRAY
31926: PUSH
31927: LD_INT 2
31929: ARRAY
31930: PPUSH
31931: LD_VAR 0 1
31935: PPUSH
31936: CALL_OW 255
31940: PPUSH
31941: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31945: LD_ADDR_EXP 91
31949: PUSH
31950: LD_EXP 91
31954: PPUSH
31955: LD_VAR 0 6
31959: PPUSH
31960: LD_EXP 91
31964: PUSH
31965: LD_VAR 0 6
31969: ARRAY
31970: PPUSH
31971: LD_VAR 0 5
31975: PPUSH
31976: CALL_OW 3
31980: PPUSH
31981: CALL_OW 1
31985: ST_TO_ADDR
// end ; end ;
31986: GO 31824
31988: POP
31989: POP
// end ;
31990: LD_VAR 0 4
31994: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
31995: LD_INT 0
31997: PPUSH
31998: PPUSH
31999: PPUSH
32000: PPUSH
32001: PPUSH
32002: PPUSH
32003: PPUSH
32004: PPUSH
32005: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
32006: LD_VAR 0 1
32010: PPUSH
32011: CALL_OW 264
32015: PUSH
32016: LD_INT 81
32018: EQUAL
32019: NOT
32020: PUSH
32021: LD_VAR 0 1
32025: PUSH
32026: LD_EXP 90
32030: IN
32031: NOT
32032: OR
32033: IFFALSE 32037
// exit ;
32035: GO 32359
// index := GetElementIndex ( minersList , unit ) ;
32037: LD_ADDR_VAR 0 6
32041: PUSH
32042: LD_EXP 90
32046: PPUSH
32047: LD_VAR 0 1
32051: PPUSH
32052: CALL 37531 0 2
32056: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
32057: LD_ADDR_VAR 0 8
32061: PUSH
32062: LD_EXP 92
32066: PUSH
32067: LD_EXP 91
32071: PUSH
32072: LD_VAR 0 6
32076: ARRAY
32077: MINUS
32078: ST_TO_ADDR
// if not minesFreeAmount then
32079: LD_VAR 0 8
32083: NOT
32084: IFFALSE 32088
// exit ;
32086: GO 32359
// tmp := [ ] ;
32088: LD_ADDR_VAR 0 7
32092: PUSH
32093: EMPTY
32094: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
32095: LD_ADDR_VAR 0 5
32099: PUSH
32100: DOUBLE
32101: LD_INT 1
32103: DEC
32104: ST_TO_ADDR
32105: LD_VAR 0 8
32109: PUSH
32110: FOR_TO
32111: IFFALSE 32306
// begin _d := rand ( 0 , 5 ) ;
32113: LD_ADDR_VAR 0 11
32117: PUSH
32118: LD_INT 0
32120: PPUSH
32121: LD_INT 5
32123: PPUSH
32124: CALL_OW 12
32128: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
32129: LD_ADDR_VAR 0 12
32133: PUSH
32134: LD_INT 2
32136: PPUSH
32137: LD_INT 6
32139: PPUSH
32140: CALL_OW 12
32144: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
32145: LD_ADDR_VAR 0 9
32149: PUSH
32150: LD_VAR 0 2
32154: PPUSH
32155: LD_VAR 0 11
32159: PPUSH
32160: LD_VAR 0 12
32164: PPUSH
32165: CALL_OW 272
32169: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
32170: LD_ADDR_VAR 0 10
32174: PUSH
32175: LD_VAR 0 3
32179: PPUSH
32180: LD_VAR 0 11
32184: PPUSH
32185: LD_VAR 0 12
32189: PPUSH
32190: CALL_OW 273
32194: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
32195: LD_VAR 0 9
32199: PPUSH
32200: LD_VAR 0 10
32204: PPUSH
32205: CALL_OW 488
32209: PUSH
32210: LD_VAR 0 9
32214: PUSH
32215: LD_VAR 0 10
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: PUSH
32224: LD_VAR 0 7
32228: IN
32229: NOT
32230: AND
32231: PUSH
32232: LD_VAR 0 9
32236: PPUSH
32237: LD_VAR 0 10
32241: PPUSH
32242: CALL_OW 458
32246: NOT
32247: AND
32248: IFFALSE 32290
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
32250: LD_ADDR_VAR 0 7
32254: PUSH
32255: LD_VAR 0 7
32259: PPUSH
32260: LD_VAR 0 7
32264: PUSH
32265: LD_INT 1
32267: PLUS
32268: PPUSH
32269: LD_VAR 0 9
32273: PUSH
32274: LD_VAR 0 10
32278: PUSH
32279: EMPTY
32280: LIST
32281: LIST
32282: PPUSH
32283: CALL_OW 1
32287: ST_TO_ADDR
32288: GO 32304
// i := i - 1 ;
32290: LD_ADDR_VAR 0 5
32294: PUSH
32295: LD_VAR 0 5
32299: PUSH
32300: LD_INT 1
32302: MINUS
32303: ST_TO_ADDR
// end ;
32304: GO 32110
32306: POP
32307: POP
// for i in tmp do
32308: LD_ADDR_VAR 0 5
32312: PUSH
32313: LD_VAR 0 7
32317: PUSH
32318: FOR_IN
32319: IFFALSE 32357
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
32321: LD_VAR 0 1
32325: PPUSH
32326: LD_VAR 0 5
32330: PUSH
32331: LD_INT 1
32333: ARRAY
32334: PPUSH
32335: LD_VAR 0 5
32339: PUSH
32340: LD_INT 2
32342: ARRAY
32343: PPUSH
32344: CALL 31303 0 3
32348: NOT
32349: IFFALSE 32355
// exit ;
32351: POP
32352: POP
32353: GO 32359
32355: GO 32318
32357: POP
32358: POP
// end ;
32359: LD_VAR 0 4
32363: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
32364: LD_INT 0
32366: PPUSH
32367: PPUSH
32368: PPUSH
32369: PPUSH
32370: PPUSH
32371: PPUSH
32372: PPUSH
// if not GetClass ( unit ) = class_sniper then
32373: LD_VAR 0 1
32377: PPUSH
32378: CALL_OW 257
32382: PUSH
32383: LD_INT 5
32385: EQUAL
32386: NOT
32387: IFFALSE 32391
// exit ;
32389: GO 32779
// dist := 8 ;
32391: LD_ADDR_VAR 0 5
32395: PUSH
32396: LD_INT 8
32398: ST_TO_ADDR
// viewRange := 12 ;
32399: LD_ADDR_VAR 0 7
32403: PUSH
32404: LD_INT 12
32406: ST_TO_ADDR
// side := GetSide ( unit ) ;
32407: LD_ADDR_VAR 0 6
32411: PUSH
32412: LD_VAR 0 1
32416: PPUSH
32417: CALL_OW 255
32421: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
32422: LD_INT 61
32424: PPUSH
32425: LD_VAR 0 6
32429: PPUSH
32430: CALL_OW 321
32434: PUSH
32435: LD_INT 2
32437: EQUAL
32438: IFFALSE 32448
// viewRange := 16 ;
32440: LD_ADDR_VAR 0 7
32444: PUSH
32445: LD_INT 16
32447: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
32448: LD_VAR 0 1
32452: PPUSH
32453: LD_VAR 0 2
32457: PPUSH
32458: LD_VAR 0 3
32462: PPUSH
32463: CALL_OW 297
32467: PUSH
32468: LD_VAR 0 5
32472: GREATER
32473: IFFALSE 32552
// begin ComMoveXY ( unit , x , y ) ;
32475: LD_VAR 0 1
32479: PPUSH
32480: LD_VAR 0 2
32484: PPUSH
32485: LD_VAR 0 3
32489: PPUSH
32490: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32494: LD_INT 35
32496: PPUSH
32497: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
32501: LD_VAR 0 1
32505: PPUSH
32506: LD_VAR 0 2
32510: PPUSH
32511: LD_VAR 0 3
32515: PPUSH
32516: CALL 69283 0 3
32520: NOT
32521: IFFALSE 32525
// exit ;
32523: GO 32779
// until GetDistUnitXY ( unit , x , y ) < dist ;
32525: LD_VAR 0 1
32529: PPUSH
32530: LD_VAR 0 2
32534: PPUSH
32535: LD_VAR 0 3
32539: PPUSH
32540: CALL_OW 297
32544: PUSH
32545: LD_VAR 0 5
32549: LESS
32550: IFFALSE 32494
// end ; ComTurnXY ( unit , x , y ) ;
32552: LD_VAR 0 1
32556: PPUSH
32557: LD_VAR 0 2
32561: PPUSH
32562: LD_VAR 0 3
32566: PPUSH
32567: CALL_OW 118
// wait ( 5 ) ;
32571: LD_INT 5
32573: PPUSH
32574: CALL_OW 67
// _d := GetDir ( unit ) ;
32578: LD_ADDR_VAR 0 10
32582: PUSH
32583: LD_VAR 0 1
32587: PPUSH
32588: CALL_OW 254
32592: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
32593: LD_ADDR_VAR 0 8
32597: PUSH
32598: LD_VAR 0 1
32602: PPUSH
32603: CALL_OW 250
32607: PPUSH
32608: LD_VAR 0 10
32612: PPUSH
32613: LD_VAR 0 5
32617: PPUSH
32618: CALL_OW 272
32622: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
32623: LD_ADDR_VAR 0 9
32627: PUSH
32628: LD_VAR 0 1
32632: PPUSH
32633: CALL_OW 251
32637: PPUSH
32638: LD_VAR 0 10
32642: PPUSH
32643: LD_VAR 0 5
32647: PPUSH
32648: CALL_OW 273
32652: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32653: LD_VAR 0 8
32657: PPUSH
32658: LD_VAR 0 9
32662: PPUSH
32663: CALL_OW 488
32667: NOT
32668: IFFALSE 32672
// exit ;
32670: GO 32779
// ComAnimCustom ( unit , 1 ) ;
32672: LD_VAR 0 1
32676: PPUSH
32677: LD_INT 1
32679: PPUSH
32680: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
32684: LD_VAR 0 8
32688: PPUSH
32689: LD_VAR 0 9
32693: PPUSH
32694: LD_VAR 0 6
32698: PPUSH
32699: LD_VAR 0 7
32703: PPUSH
32704: CALL_OW 330
// repeat wait ( 1 ) ;
32708: LD_INT 1
32710: PPUSH
32711: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
32715: LD_VAR 0 1
32719: PPUSH
32720: CALL_OW 316
32724: PUSH
32725: LD_VAR 0 1
32729: PPUSH
32730: CALL_OW 314
32734: OR
32735: PUSH
32736: LD_VAR 0 1
32740: PPUSH
32741: CALL_OW 302
32745: NOT
32746: OR
32747: PUSH
32748: LD_VAR 0 1
32752: PPUSH
32753: CALL_OW 301
32757: OR
32758: IFFALSE 32708
// RemoveSeeing ( _x , _y , side ) ;
32760: LD_VAR 0 8
32764: PPUSH
32765: LD_VAR 0 9
32769: PPUSH
32770: LD_VAR 0 6
32774: PPUSH
32775: CALL_OW 331
// end ; end_of_file
32779: LD_VAR 0 4
32783: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
32784: LD_INT 0
32786: PPUSH
32787: PPUSH
// if exist_mode then
32788: LD_VAR 0 2
32792: IFFALSE 32817
// unit := CreateCharacter ( prefix & ident ) else
32794: LD_ADDR_VAR 0 5
32798: PUSH
32799: LD_VAR 0 3
32803: PUSH
32804: LD_VAR 0 1
32808: STR
32809: PPUSH
32810: CALL_OW 34
32814: ST_TO_ADDR
32815: GO 32832
// unit := NewCharacter ( ident ) ;
32817: LD_ADDR_VAR 0 5
32821: PUSH
32822: LD_VAR 0 1
32826: PPUSH
32827: CALL_OW 25
32831: ST_TO_ADDR
// result := unit ;
32832: LD_ADDR_VAR 0 4
32836: PUSH
32837: LD_VAR 0 5
32841: ST_TO_ADDR
// end ;
32842: LD_VAR 0 4
32846: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
32847: LD_INT 0
32849: PPUSH
32850: PPUSH
// if not side or not nation then
32851: LD_VAR 0 1
32855: NOT
32856: PUSH
32857: LD_VAR 0 2
32861: NOT
32862: OR
32863: IFFALSE 32867
// exit ;
32865: GO 33635
// case nation of nation_american :
32867: LD_VAR 0 2
32871: PUSH
32872: LD_INT 1
32874: DOUBLE
32875: EQUAL
32876: IFTRUE 32880
32878: GO 33094
32880: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
32881: LD_ADDR_VAR 0 4
32885: PUSH
32886: LD_INT 35
32888: PUSH
32889: LD_INT 45
32891: PUSH
32892: LD_INT 46
32894: PUSH
32895: LD_INT 47
32897: PUSH
32898: LD_INT 82
32900: PUSH
32901: LD_INT 83
32903: PUSH
32904: LD_INT 84
32906: PUSH
32907: LD_INT 85
32909: PUSH
32910: LD_INT 86
32912: PUSH
32913: LD_INT 1
32915: PUSH
32916: LD_INT 2
32918: PUSH
32919: LD_INT 6
32921: PUSH
32922: LD_INT 15
32924: PUSH
32925: LD_INT 16
32927: PUSH
32928: LD_INT 7
32930: PUSH
32931: LD_INT 12
32933: PUSH
32934: LD_INT 13
32936: PUSH
32937: LD_INT 10
32939: PUSH
32940: LD_INT 14
32942: PUSH
32943: LD_INT 20
32945: PUSH
32946: LD_INT 21
32948: PUSH
32949: LD_INT 22
32951: PUSH
32952: LD_INT 25
32954: PUSH
32955: LD_INT 32
32957: PUSH
32958: LD_INT 27
32960: PUSH
32961: LD_INT 36
32963: PUSH
32964: LD_INT 69
32966: PUSH
32967: LD_INT 39
32969: PUSH
32970: LD_INT 34
32972: PUSH
32973: LD_INT 40
32975: PUSH
32976: LD_INT 48
32978: PUSH
32979: LD_INT 49
32981: PUSH
32982: LD_INT 50
32984: PUSH
32985: LD_INT 51
32987: PUSH
32988: LD_INT 52
32990: PUSH
32991: LD_INT 53
32993: PUSH
32994: LD_INT 54
32996: PUSH
32997: LD_INT 55
32999: PUSH
33000: LD_INT 56
33002: PUSH
33003: LD_INT 57
33005: PUSH
33006: LD_INT 58
33008: PUSH
33009: LD_INT 59
33011: PUSH
33012: LD_INT 60
33014: PUSH
33015: LD_INT 61
33017: PUSH
33018: LD_INT 62
33020: PUSH
33021: LD_INT 80
33023: PUSH
33024: LD_INT 82
33026: PUSH
33027: LD_INT 83
33029: PUSH
33030: LD_INT 84
33032: PUSH
33033: LD_INT 85
33035: PUSH
33036: LD_INT 86
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: LIST
33043: LIST
33044: LIST
33045: LIST
33046: LIST
33047: LIST
33048: LIST
33049: LIST
33050: LIST
33051: LIST
33052: LIST
33053: LIST
33054: LIST
33055: LIST
33056: LIST
33057: LIST
33058: LIST
33059: LIST
33060: LIST
33061: LIST
33062: LIST
33063: LIST
33064: LIST
33065: LIST
33066: LIST
33067: LIST
33068: LIST
33069: LIST
33070: LIST
33071: LIST
33072: LIST
33073: LIST
33074: LIST
33075: LIST
33076: LIST
33077: LIST
33078: LIST
33079: LIST
33080: LIST
33081: LIST
33082: LIST
33083: LIST
33084: LIST
33085: LIST
33086: LIST
33087: LIST
33088: LIST
33089: LIST
33090: LIST
33091: ST_TO_ADDR
33092: GO 33559
33094: LD_INT 2
33096: DOUBLE
33097: EQUAL
33098: IFTRUE 33102
33100: GO 33328
33102: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
33103: LD_ADDR_VAR 0 4
33107: PUSH
33108: LD_INT 35
33110: PUSH
33111: LD_INT 45
33113: PUSH
33114: LD_INT 46
33116: PUSH
33117: LD_INT 47
33119: PUSH
33120: LD_INT 82
33122: PUSH
33123: LD_INT 83
33125: PUSH
33126: LD_INT 84
33128: PUSH
33129: LD_INT 85
33131: PUSH
33132: LD_INT 87
33134: PUSH
33135: LD_INT 70
33137: PUSH
33138: LD_INT 1
33140: PUSH
33141: LD_INT 11
33143: PUSH
33144: LD_INT 3
33146: PUSH
33147: LD_INT 4
33149: PUSH
33150: LD_INT 5
33152: PUSH
33153: LD_INT 6
33155: PUSH
33156: LD_INT 15
33158: PUSH
33159: LD_INT 18
33161: PUSH
33162: LD_INT 7
33164: PUSH
33165: LD_INT 17
33167: PUSH
33168: LD_INT 8
33170: PUSH
33171: LD_INT 20
33173: PUSH
33174: LD_INT 21
33176: PUSH
33177: LD_INT 22
33179: PUSH
33180: LD_INT 72
33182: PUSH
33183: LD_INT 26
33185: PUSH
33186: LD_INT 69
33188: PUSH
33189: LD_INT 39
33191: PUSH
33192: LD_INT 40
33194: PUSH
33195: LD_INT 41
33197: PUSH
33198: LD_INT 42
33200: PUSH
33201: LD_INT 43
33203: PUSH
33204: LD_INT 48
33206: PUSH
33207: LD_INT 49
33209: PUSH
33210: LD_INT 50
33212: PUSH
33213: LD_INT 51
33215: PUSH
33216: LD_INT 52
33218: PUSH
33219: LD_INT 53
33221: PUSH
33222: LD_INT 54
33224: PUSH
33225: LD_INT 55
33227: PUSH
33228: LD_INT 56
33230: PUSH
33231: LD_INT 60
33233: PUSH
33234: LD_INT 61
33236: PUSH
33237: LD_INT 62
33239: PUSH
33240: LD_INT 66
33242: PUSH
33243: LD_INT 67
33245: PUSH
33246: LD_INT 68
33248: PUSH
33249: LD_INT 81
33251: PUSH
33252: LD_INT 82
33254: PUSH
33255: LD_INT 83
33257: PUSH
33258: LD_INT 84
33260: PUSH
33261: LD_INT 85
33263: PUSH
33264: LD_INT 87
33266: PUSH
33267: LD_INT 88
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: LIST
33280: LIST
33281: LIST
33282: LIST
33283: LIST
33284: LIST
33285: LIST
33286: LIST
33287: LIST
33288: LIST
33289: LIST
33290: LIST
33291: LIST
33292: LIST
33293: LIST
33294: LIST
33295: LIST
33296: LIST
33297: LIST
33298: LIST
33299: LIST
33300: LIST
33301: LIST
33302: LIST
33303: LIST
33304: LIST
33305: LIST
33306: LIST
33307: LIST
33308: LIST
33309: LIST
33310: LIST
33311: LIST
33312: LIST
33313: LIST
33314: LIST
33315: LIST
33316: LIST
33317: LIST
33318: LIST
33319: LIST
33320: LIST
33321: LIST
33322: LIST
33323: LIST
33324: LIST
33325: ST_TO_ADDR
33326: GO 33559
33328: LD_INT 3
33330: DOUBLE
33331: EQUAL
33332: IFTRUE 33336
33334: GO 33558
33336: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
33337: LD_ADDR_VAR 0 4
33341: PUSH
33342: LD_INT 46
33344: PUSH
33345: LD_INT 47
33347: PUSH
33348: LD_INT 1
33350: PUSH
33351: LD_INT 2
33353: PUSH
33354: LD_INT 82
33356: PUSH
33357: LD_INT 83
33359: PUSH
33360: LD_INT 84
33362: PUSH
33363: LD_INT 85
33365: PUSH
33366: LD_INT 86
33368: PUSH
33369: LD_INT 11
33371: PUSH
33372: LD_INT 9
33374: PUSH
33375: LD_INT 20
33377: PUSH
33378: LD_INT 19
33380: PUSH
33381: LD_INT 21
33383: PUSH
33384: LD_INT 24
33386: PUSH
33387: LD_INT 22
33389: PUSH
33390: LD_INT 25
33392: PUSH
33393: LD_INT 28
33395: PUSH
33396: LD_INT 29
33398: PUSH
33399: LD_INT 30
33401: PUSH
33402: LD_INT 31
33404: PUSH
33405: LD_INT 37
33407: PUSH
33408: LD_INT 38
33410: PUSH
33411: LD_INT 32
33413: PUSH
33414: LD_INT 27
33416: PUSH
33417: LD_INT 33
33419: PUSH
33420: LD_INT 69
33422: PUSH
33423: LD_INT 39
33425: PUSH
33426: LD_INT 34
33428: PUSH
33429: LD_INT 40
33431: PUSH
33432: LD_INT 71
33434: PUSH
33435: LD_INT 23
33437: PUSH
33438: LD_INT 44
33440: PUSH
33441: LD_INT 48
33443: PUSH
33444: LD_INT 49
33446: PUSH
33447: LD_INT 50
33449: PUSH
33450: LD_INT 51
33452: PUSH
33453: LD_INT 52
33455: PUSH
33456: LD_INT 53
33458: PUSH
33459: LD_INT 54
33461: PUSH
33462: LD_INT 55
33464: PUSH
33465: LD_INT 56
33467: PUSH
33468: LD_INT 57
33470: PUSH
33471: LD_INT 58
33473: PUSH
33474: LD_INT 59
33476: PUSH
33477: LD_INT 63
33479: PUSH
33480: LD_INT 64
33482: PUSH
33483: LD_INT 65
33485: PUSH
33486: LD_INT 82
33488: PUSH
33489: LD_INT 83
33491: PUSH
33492: LD_INT 84
33494: PUSH
33495: LD_INT 85
33497: PUSH
33498: LD_INT 86
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: LIST
33507: LIST
33508: LIST
33509: LIST
33510: LIST
33511: LIST
33512: LIST
33513: LIST
33514: LIST
33515: LIST
33516: LIST
33517: LIST
33518: LIST
33519: LIST
33520: LIST
33521: LIST
33522: LIST
33523: LIST
33524: LIST
33525: LIST
33526: LIST
33527: LIST
33528: LIST
33529: LIST
33530: LIST
33531: LIST
33532: LIST
33533: LIST
33534: LIST
33535: LIST
33536: LIST
33537: LIST
33538: LIST
33539: LIST
33540: LIST
33541: LIST
33542: LIST
33543: LIST
33544: LIST
33545: LIST
33546: LIST
33547: LIST
33548: LIST
33549: LIST
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: ST_TO_ADDR
33556: GO 33559
33558: POP
// if state > - 1 and state < 3 then
33559: LD_VAR 0 3
33563: PUSH
33564: LD_INT 1
33566: NEG
33567: GREATER
33568: PUSH
33569: LD_VAR 0 3
33573: PUSH
33574: LD_INT 3
33576: LESS
33577: AND
33578: IFFALSE 33635
// for i in result do
33580: LD_ADDR_VAR 0 5
33584: PUSH
33585: LD_VAR 0 4
33589: PUSH
33590: FOR_IN
33591: IFFALSE 33633
// if GetTech ( i , side ) <> state then
33593: LD_VAR 0 5
33597: PPUSH
33598: LD_VAR 0 1
33602: PPUSH
33603: CALL_OW 321
33607: PUSH
33608: LD_VAR 0 3
33612: NONEQUAL
33613: IFFALSE 33631
// result := result diff i ;
33615: LD_ADDR_VAR 0 4
33619: PUSH
33620: LD_VAR 0 4
33624: PUSH
33625: LD_VAR 0 5
33629: DIFF
33630: ST_TO_ADDR
33631: GO 33590
33633: POP
33634: POP
// end ;
33635: LD_VAR 0 4
33639: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
33640: LD_INT 0
33642: PPUSH
33643: PPUSH
33644: PPUSH
// result := true ;
33645: LD_ADDR_VAR 0 3
33649: PUSH
33650: LD_INT 1
33652: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
33653: LD_ADDR_VAR 0 5
33657: PUSH
33658: LD_VAR 0 2
33662: PPUSH
33663: CALL_OW 480
33667: ST_TO_ADDR
// if not tmp then
33668: LD_VAR 0 5
33672: NOT
33673: IFFALSE 33677
// exit ;
33675: GO 33726
// for i in tmp do
33677: LD_ADDR_VAR 0 4
33681: PUSH
33682: LD_VAR 0 5
33686: PUSH
33687: FOR_IN
33688: IFFALSE 33724
// if GetTech ( i , side ) <> state_researched then
33690: LD_VAR 0 4
33694: PPUSH
33695: LD_VAR 0 1
33699: PPUSH
33700: CALL_OW 321
33704: PUSH
33705: LD_INT 2
33707: NONEQUAL
33708: IFFALSE 33722
// begin result := false ;
33710: LD_ADDR_VAR 0 3
33714: PUSH
33715: LD_INT 0
33717: ST_TO_ADDR
// exit ;
33718: POP
33719: POP
33720: GO 33726
// end ;
33722: GO 33687
33724: POP
33725: POP
// end ;
33726: LD_VAR 0 3
33730: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
33731: LD_INT 0
33733: PPUSH
33734: PPUSH
33735: PPUSH
33736: PPUSH
33737: PPUSH
33738: PPUSH
33739: PPUSH
33740: PPUSH
33741: PPUSH
33742: PPUSH
33743: PPUSH
33744: PPUSH
33745: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
33746: LD_VAR 0 1
33750: NOT
33751: PUSH
33752: LD_VAR 0 1
33756: PPUSH
33757: CALL_OW 257
33761: PUSH
33762: LD_INT 9
33764: NONEQUAL
33765: OR
33766: IFFALSE 33770
// exit ;
33768: GO 34343
// side := GetSide ( unit ) ;
33770: LD_ADDR_VAR 0 9
33774: PUSH
33775: LD_VAR 0 1
33779: PPUSH
33780: CALL_OW 255
33784: ST_TO_ADDR
// tech_space := tech_spacanom ;
33785: LD_ADDR_VAR 0 12
33789: PUSH
33790: LD_INT 29
33792: ST_TO_ADDR
// tech_time := tech_taurad ;
33793: LD_ADDR_VAR 0 13
33797: PUSH
33798: LD_INT 28
33800: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
33801: LD_ADDR_VAR 0 11
33805: PUSH
33806: LD_VAR 0 1
33810: PPUSH
33811: CALL_OW 310
33815: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
33816: LD_VAR 0 11
33820: PPUSH
33821: CALL_OW 247
33825: PUSH
33826: LD_INT 2
33828: EQUAL
33829: IFFALSE 33833
// exit ;
33831: GO 34343
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33833: LD_ADDR_VAR 0 8
33837: PUSH
33838: LD_INT 81
33840: PUSH
33841: LD_VAR 0 9
33845: PUSH
33846: EMPTY
33847: LIST
33848: LIST
33849: PUSH
33850: LD_INT 3
33852: PUSH
33853: LD_INT 21
33855: PUSH
33856: LD_INT 3
33858: PUSH
33859: EMPTY
33860: LIST
33861: LIST
33862: PUSH
33863: EMPTY
33864: LIST
33865: LIST
33866: PUSH
33867: EMPTY
33868: LIST
33869: LIST
33870: PPUSH
33871: CALL_OW 69
33875: ST_TO_ADDR
// if not tmp then
33876: LD_VAR 0 8
33880: NOT
33881: IFFALSE 33885
// exit ;
33883: GO 34343
// if in_unit then
33885: LD_VAR 0 11
33889: IFFALSE 33913
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
33891: LD_ADDR_VAR 0 10
33895: PUSH
33896: LD_VAR 0 8
33900: PPUSH
33901: LD_VAR 0 11
33905: PPUSH
33906: CALL_OW 74
33910: ST_TO_ADDR
33911: GO 33933
// enemy := NearestUnitToUnit ( tmp , unit ) ;
33913: LD_ADDR_VAR 0 10
33917: PUSH
33918: LD_VAR 0 8
33922: PPUSH
33923: LD_VAR 0 1
33927: PPUSH
33928: CALL_OW 74
33932: ST_TO_ADDR
// if not enemy then
33933: LD_VAR 0 10
33937: NOT
33938: IFFALSE 33942
// exit ;
33940: GO 34343
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
33942: LD_VAR 0 11
33946: PUSH
33947: LD_VAR 0 11
33951: PPUSH
33952: LD_VAR 0 10
33956: PPUSH
33957: CALL_OW 296
33961: PUSH
33962: LD_INT 13
33964: GREATER
33965: AND
33966: PUSH
33967: LD_VAR 0 1
33971: PPUSH
33972: LD_VAR 0 10
33976: PPUSH
33977: CALL_OW 296
33981: PUSH
33982: LD_INT 12
33984: GREATER
33985: OR
33986: IFFALSE 33990
// exit ;
33988: GO 34343
// missile := [ 1 ] ;
33990: LD_ADDR_VAR 0 14
33994: PUSH
33995: LD_INT 1
33997: PUSH
33998: EMPTY
33999: LIST
34000: ST_TO_ADDR
// if Researched ( side , tech_space ) then
34001: LD_VAR 0 9
34005: PPUSH
34006: LD_VAR 0 12
34010: PPUSH
34011: CALL_OW 325
34015: IFFALSE 34044
// missile := Replace ( missile , missile + 1 , 2 ) ;
34017: LD_ADDR_VAR 0 14
34021: PUSH
34022: LD_VAR 0 14
34026: PPUSH
34027: LD_VAR 0 14
34031: PUSH
34032: LD_INT 1
34034: PLUS
34035: PPUSH
34036: LD_INT 2
34038: PPUSH
34039: CALL_OW 1
34043: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
34044: LD_VAR 0 9
34048: PPUSH
34049: LD_VAR 0 13
34053: PPUSH
34054: CALL_OW 325
34058: PUSH
34059: LD_VAR 0 10
34063: PPUSH
34064: CALL_OW 255
34068: PPUSH
34069: LD_VAR 0 13
34073: PPUSH
34074: CALL_OW 325
34078: NOT
34079: AND
34080: IFFALSE 34109
// missile := Replace ( missile , missile + 1 , 3 ) ;
34082: LD_ADDR_VAR 0 14
34086: PUSH
34087: LD_VAR 0 14
34091: PPUSH
34092: LD_VAR 0 14
34096: PUSH
34097: LD_INT 1
34099: PLUS
34100: PPUSH
34101: LD_INT 3
34103: PPUSH
34104: CALL_OW 1
34108: ST_TO_ADDR
// if missile < 2 then
34109: LD_VAR 0 14
34113: PUSH
34114: LD_INT 2
34116: LESS
34117: IFFALSE 34121
// exit ;
34119: GO 34343
// x := GetX ( enemy ) ;
34121: LD_ADDR_VAR 0 4
34125: PUSH
34126: LD_VAR 0 10
34130: PPUSH
34131: CALL_OW 250
34135: ST_TO_ADDR
// y := GetY ( enemy ) ;
34136: LD_ADDR_VAR 0 5
34140: PUSH
34141: LD_VAR 0 10
34145: PPUSH
34146: CALL_OW 251
34150: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
34151: LD_ADDR_VAR 0 6
34155: PUSH
34156: LD_VAR 0 4
34160: PUSH
34161: LD_INT 1
34163: NEG
34164: PPUSH
34165: LD_INT 1
34167: PPUSH
34168: CALL_OW 12
34172: PLUS
34173: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
34174: LD_ADDR_VAR 0 7
34178: PUSH
34179: LD_VAR 0 5
34183: PUSH
34184: LD_INT 1
34186: NEG
34187: PPUSH
34188: LD_INT 1
34190: PPUSH
34191: CALL_OW 12
34195: PLUS
34196: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34197: LD_VAR 0 6
34201: PPUSH
34202: LD_VAR 0 7
34206: PPUSH
34207: CALL_OW 488
34211: NOT
34212: IFFALSE 34234
// begin _x := x ;
34214: LD_ADDR_VAR 0 6
34218: PUSH
34219: LD_VAR 0 4
34223: ST_TO_ADDR
// _y := y ;
34224: LD_ADDR_VAR 0 7
34228: PUSH
34229: LD_VAR 0 5
34233: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
34234: LD_ADDR_VAR 0 3
34238: PUSH
34239: LD_INT 1
34241: PPUSH
34242: LD_VAR 0 14
34246: PPUSH
34247: CALL_OW 12
34251: ST_TO_ADDR
// case i of 1 :
34252: LD_VAR 0 3
34256: PUSH
34257: LD_INT 1
34259: DOUBLE
34260: EQUAL
34261: IFTRUE 34265
34263: GO 34282
34265: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
34266: LD_VAR 0 1
34270: PPUSH
34271: LD_VAR 0 10
34275: PPUSH
34276: CALL_OW 115
34280: GO 34343
34282: LD_INT 2
34284: DOUBLE
34285: EQUAL
34286: IFTRUE 34290
34288: GO 34312
34290: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
34291: LD_VAR 0 1
34295: PPUSH
34296: LD_VAR 0 6
34300: PPUSH
34301: LD_VAR 0 7
34305: PPUSH
34306: CALL_OW 153
34310: GO 34343
34312: LD_INT 3
34314: DOUBLE
34315: EQUAL
34316: IFTRUE 34320
34318: GO 34342
34320: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
34321: LD_VAR 0 1
34325: PPUSH
34326: LD_VAR 0 6
34330: PPUSH
34331: LD_VAR 0 7
34335: PPUSH
34336: CALL_OW 154
34340: GO 34343
34342: POP
// end ;
34343: LD_VAR 0 2
34347: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
34348: LD_INT 0
34350: PPUSH
34351: PPUSH
34352: PPUSH
34353: PPUSH
34354: PPUSH
34355: PPUSH
// if not unit or not building then
34356: LD_VAR 0 1
34360: NOT
34361: PUSH
34362: LD_VAR 0 2
34366: NOT
34367: OR
34368: IFFALSE 34372
// exit ;
34370: GO 34530
// x := GetX ( building ) ;
34372: LD_ADDR_VAR 0 5
34376: PUSH
34377: LD_VAR 0 2
34381: PPUSH
34382: CALL_OW 250
34386: ST_TO_ADDR
// y := GetY ( building ) ;
34387: LD_ADDR_VAR 0 6
34391: PUSH
34392: LD_VAR 0 2
34396: PPUSH
34397: CALL_OW 251
34401: ST_TO_ADDR
// for i = 0 to 5 do
34402: LD_ADDR_VAR 0 4
34406: PUSH
34407: DOUBLE
34408: LD_INT 0
34410: DEC
34411: ST_TO_ADDR
34412: LD_INT 5
34414: PUSH
34415: FOR_TO
34416: IFFALSE 34528
// begin _x := ShiftX ( x , i , 3 ) ;
34418: LD_ADDR_VAR 0 7
34422: PUSH
34423: LD_VAR 0 5
34427: PPUSH
34428: LD_VAR 0 4
34432: PPUSH
34433: LD_INT 3
34435: PPUSH
34436: CALL_OW 272
34440: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
34441: LD_ADDR_VAR 0 8
34445: PUSH
34446: LD_VAR 0 6
34450: PPUSH
34451: LD_VAR 0 4
34455: PPUSH
34456: LD_INT 3
34458: PPUSH
34459: CALL_OW 273
34463: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34464: LD_VAR 0 7
34468: PPUSH
34469: LD_VAR 0 8
34473: PPUSH
34474: CALL_OW 488
34478: NOT
34479: IFFALSE 34483
// continue ;
34481: GO 34415
// if HexInfo ( _x , _y ) = 0 then
34483: LD_VAR 0 7
34487: PPUSH
34488: LD_VAR 0 8
34492: PPUSH
34493: CALL_OW 428
34497: PUSH
34498: LD_INT 0
34500: EQUAL
34501: IFFALSE 34526
// begin ComMoveXY ( unit , _x , _y ) ;
34503: LD_VAR 0 1
34507: PPUSH
34508: LD_VAR 0 7
34512: PPUSH
34513: LD_VAR 0 8
34517: PPUSH
34518: CALL_OW 111
// exit ;
34522: POP
34523: POP
34524: GO 34530
// end ; end ;
34526: GO 34415
34528: POP
34529: POP
// end ;
34530: LD_VAR 0 3
34534: RET
// export function ScanBase ( side , base_area ) ; begin
34535: LD_INT 0
34537: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
34538: LD_ADDR_VAR 0 3
34542: PUSH
34543: LD_VAR 0 2
34547: PPUSH
34548: LD_INT 81
34550: PUSH
34551: LD_VAR 0 1
34555: PUSH
34556: EMPTY
34557: LIST
34558: LIST
34559: PPUSH
34560: CALL_OW 70
34564: ST_TO_ADDR
// end ;
34565: LD_VAR 0 3
34569: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
34570: LD_INT 0
34572: PPUSH
34573: PPUSH
34574: PPUSH
34575: PPUSH
// result := false ;
34576: LD_ADDR_VAR 0 2
34580: PUSH
34581: LD_INT 0
34583: ST_TO_ADDR
// side := GetSide ( unit ) ;
34584: LD_ADDR_VAR 0 3
34588: PUSH
34589: LD_VAR 0 1
34593: PPUSH
34594: CALL_OW 255
34598: ST_TO_ADDR
// nat := GetNation ( unit ) ;
34599: LD_ADDR_VAR 0 4
34603: PUSH
34604: LD_VAR 0 1
34608: PPUSH
34609: CALL_OW 248
34613: ST_TO_ADDR
// case nat of 1 :
34614: LD_VAR 0 4
34618: PUSH
34619: LD_INT 1
34621: DOUBLE
34622: EQUAL
34623: IFTRUE 34627
34625: GO 34638
34627: POP
// tech := tech_lassight ; 2 :
34628: LD_ADDR_VAR 0 5
34632: PUSH
34633: LD_INT 12
34635: ST_TO_ADDR
34636: GO 34677
34638: LD_INT 2
34640: DOUBLE
34641: EQUAL
34642: IFTRUE 34646
34644: GO 34657
34646: POP
// tech := tech_mortar ; 3 :
34647: LD_ADDR_VAR 0 5
34651: PUSH
34652: LD_INT 41
34654: ST_TO_ADDR
34655: GO 34677
34657: LD_INT 3
34659: DOUBLE
34660: EQUAL
34661: IFTRUE 34665
34663: GO 34676
34665: POP
// tech := tech_bazooka ; end ;
34666: LD_ADDR_VAR 0 5
34670: PUSH
34671: LD_INT 44
34673: ST_TO_ADDR
34674: GO 34677
34676: POP
// if Researched ( side , tech ) then
34677: LD_VAR 0 3
34681: PPUSH
34682: LD_VAR 0 5
34686: PPUSH
34687: CALL_OW 325
34691: IFFALSE 34718
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
34693: LD_ADDR_VAR 0 2
34697: PUSH
34698: LD_INT 5
34700: PUSH
34701: LD_INT 8
34703: PUSH
34704: LD_INT 9
34706: PUSH
34707: EMPTY
34708: LIST
34709: LIST
34710: LIST
34711: PUSH
34712: LD_VAR 0 4
34716: ARRAY
34717: ST_TO_ADDR
// end ;
34718: LD_VAR 0 2
34722: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
34723: LD_INT 0
34725: PPUSH
34726: PPUSH
34727: PPUSH
// if not mines then
34728: LD_VAR 0 2
34732: NOT
34733: IFFALSE 34737
// exit ;
34735: GO 34881
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34737: LD_ADDR_VAR 0 5
34741: PUSH
34742: LD_INT 81
34744: PUSH
34745: LD_VAR 0 1
34749: PUSH
34750: EMPTY
34751: LIST
34752: LIST
34753: PUSH
34754: LD_INT 3
34756: PUSH
34757: LD_INT 21
34759: PUSH
34760: LD_INT 3
34762: PUSH
34763: EMPTY
34764: LIST
34765: LIST
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: PUSH
34771: EMPTY
34772: LIST
34773: LIST
34774: PPUSH
34775: CALL_OW 69
34779: ST_TO_ADDR
// for i in mines do
34780: LD_ADDR_VAR 0 4
34784: PUSH
34785: LD_VAR 0 2
34789: PUSH
34790: FOR_IN
34791: IFFALSE 34879
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
34793: LD_VAR 0 4
34797: PUSH
34798: LD_INT 1
34800: ARRAY
34801: PPUSH
34802: LD_VAR 0 4
34806: PUSH
34807: LD_INT 2
34809: ARRAY
34810: PPUSH
34811: CALL_OW 458
34815: NOT
34816: IFFALSE 34820
// continue ;
34818: GO 34790
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
34820: LD_VAR 0 4
34824: PUSH
34825: LD_INT 1
34827: ARRAY
34828: PPUSH
34829: LD_VAR 0 4
34833: PUSH
34834: LD_INT 2
34836: ARRAY
34837: PPUSH
34838: CALL_OW 428
34842: PUSH
34843: LD_VAR 0 5
34847: IN
34848: IFFALSE 34877
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
34850: LD_VAR 0 4
34854: PUSH
34855: LD_INT 1
34857: ARRAY
34858: PPUSH
34859: LD_VAR 0 4
34863: PUSH
34864: LD_INT 2
34866: ARRAY
34867: PPUSH
34868: LD_VAR 0 1
34872: PPUSH
34873: CALL_OW 456
// end ;
34877: GO 34790
34879: POP
34880: POP
// end ;
34881: LD_VAR 0 3
34885: RET
// export function Count ( array ) ; begin
34886: LD_INT 0
34888: PPUSH
// result := array + 0 ;
34889: LD_ADDR_VAR 0 2
34893: PUSH
34894: LD_VAR 0 1
34898: PUSH
34899: LD_INT 0
34901: PLUS
34902: ST_TO_ADDR
// end ;
34903: LD_VAR 0 2
34907: RET
// export function IsEmpty ( building ) ; begin
34908: LD_INT 0
34910: PPUSH
// if not building then
34911: LD_VAR 0 1
34915: NOT
34916: IFFALSE 34920
// exit ;
34918: GO 34963
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
34920: LD_ADDR_VAR 0 2
34924: PUSH
34925: LD_VAR 0 1
34929: PUSH
34930: LD_INT 22
34932: PUSH
34933: LD_VAR 0 1
34937: PPUSH
34938: CALL_OW 255
34942: PUSH
34943: EMPTY
34944: LIST
34945: LIST
34946: PUSH
34947: LD_INT 58
34949: PUSH
34950: EMPTY
34951: LIST
34952: PUSH
34953: EMPTY
34954: LIST
34955: LIST
34956: PPUSH
34957: CALL_OW 69
34961: IN
34962: ST_TO_ADDR
// end ;
34963: LD_VAR 0 2
34967: RET
// export function IsNotFull ( building ) ; var places ; begin
34968: LD_INT 0
34970: PPUSH
34971: PPUSH
// if not building then
34972: LD_VAR 0 1
34976: NOT
34977: IFFALSE 34981
// exit ;
34979: GO 35009
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
34981: LD_ADDR_VAR 0 2
34985: PUSH
34986: LD_VAR 0 1
34990: PPUSH
34991: LD_INT 3
34993: PUSH
34994: LD_INT 62
34996: PUSH
34997: EMPTY
34998: LIST
34999: PUSH
35000: EMPTY
35001: LIST
35002: LIST
35003: PPUSH
35004: CALL_OW 72
35008: ST_TO_ADDR
// end ;
35009: LD_VAR 0 2
35013: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
35014: LD_INT 0
35016: PPUSH
35017: PPUSH
35018: PPUSH
35019: PPUSH
// tmp := [ ] ;
35020: LD_ADDR_VAR 0 3
35024: PUSH
35025: EMPTY
35026: ST_TO_ADDR
// list := [ ] ;
35027: LD_ADDR_VAR 0 5
35031: PUSH
35032: EMPTY
35033: ST_TO_ADDR
// for i = 16 to 25 do
35034: LD_ADDR_VAR 0 4
35038: PUSH
35039: DOUBLE
35040: LD_INT 16
35042: DEC
35043: ST_TO_ADDR
35044: LD_INT 25
35046: PUSH
35047: FOR_TO
35048: IFFALSE 35121
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
35050: LD_ADDR_VAR 0 3
35054: PUSH
35055: LD_VAR 0 3
35059: PUSH
35060: LD_INT 22
35062: PUSH
35063: LD_VAR 0 1
35067: PPUSH
35068: CALL_OW 255
35072: PUSH
35073: EMPTY
35074: LIST
35075: LIST
35076: PUSH
35077: LD_INT 91
35079: PUSH
35080: LD_VAR 0 1
35084: PUSH
35085: LD_INT 6
35087: PUSH
35088: EMPTY
35089: LIST
35090: LIST
35091: LIST
35092: PUSH
35093: LD_INT 30
35095: PUSH
35096: LD_VAR 0 4
35100: PUSH
35101: EMPTY
35102: LIST
35103: LIST
35104: PUSH
35105: EMPTY
35106: LIST
35107: LIST
35108: LIST
35109: PUSH
35110: EMPTY
35111: LIST
35112: PPUSH
35113: CALL_OW 69
35117: ADD
35118: ST_TO_ADDR
35119: GO 35047
35121: POP
35122: POP
// for i = 1 to tmp do
35123: LD_ADDR_VAR 0 4
35127: PUSH
35128: DOUBLE
35129: LD_INT 1
35131: DEC
35132: ST_TO_ADDR
35133: LD_VAR 0 3
35137: PUSH
35138: FOR_TO
35139: IFFALSE 35227
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
35141: LD_ADDR_VAR 0 5
35145: PUSH
35146: LD_VAR 0 5
35150: PUSH
35151: LD_VAR 0 3
35155: PUSH
35156: LD_VAR 0 4
35160: ARRAY
35161: PPUSH
35162: CALL_OW 266
35166: PUSH
35167: LD_VAR 0 3
35171: PUSH
35172: LD_VAR 0 4
35176: ARRAY
35177: PPUSH
35178: CALL_OW 250
35182: PUSH
35183: LD_VAR 0 3
35187: PUSH
35188: LD_VAR 0 4
35192: ARRAY
35193: PPUSH
35194: CALL_OW 251
35198: PUSH
35199: LD_VAR 0 3
35203: PUSH
35204: LD_VAR 0 4
35208: ARRAY
35209: PPUSH
35210: CALL_OW 254
35214: PUSH
35215: EMPTY
35216: LIST
35217: LIST
35218: LIST
35219: LIST
35220: PUSH
35221: EMPTY
35222: LIST
35223: ADD
35224: ST_TO_ADDR
35225: GO 35138
35227: POP
35228: POP
// result := list ;
35229: LD_ADDR_VAR 0 2
35233: PUSH
35234: LD_VAR 0 5
35238: ST_TO_ADDR
// end ;
35239: LD_VAR 0 2
35243: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
35244: LD_INT 0
35246: PPUSH
35247: PPUSH
35248: PPUSH
35249: PPUSH
35250: PPUSH
35251: PPUSH
35252: PPUSH
// if not factory then
35253: LD_VAR 0 1
35257: NOT
35258: IFFALSE 35262
// exit ;
35260: GO 35855
// if control = control_apeman then
35262: LD_VAR 0 4
35266: PUSH
35267: LD_INT 5
35269: EQUAL
35270: IFFALSE 35379
// begin tmp := UnitsInside ( factory ) ;
35272: LD_ADDR_VAR 0 8
35276: PUSH
35277: LD_VAR 0 1
35281: PPUSH
35282: CALL_OW 313
35286: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
35287: LD_VAR 0 8
35291: PPUSH
35292: LD_INT 25
35294: PUSH
35295: LD_INT 12
35297: PUSH
35298: EMPTY
35299: LIST
35300: LIST
35301: PPUSH
35302: CALL_OW 72
35306: NOT
35307: IFFALSE 35317
// control := control_manual ;
35309: LD_ADDR_VAR 0 4
35313: PUSH
35314: LD_INT 1
35316: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
35317: LD_ADDR_VAR 0 8
35321: PUSH
35322: LD_VAR 0 1
35326: PPUSH
35327: CALL 35014 0 1
35331: ST_TO_ADDR
// if tmp then
35332: LD_VAR 0 8
35336: IFFALSE 35379
// begin for i in tmp do
35338: LD_ADDR_VAR 0 7
35342: PUSH
35343: LD_VAR 0 8
35347: PUSH
35348: FOR_IN
35349: IFFALSE 35377
// if i [ 1 ] = b_ext_radio then
35351: LD_VAR 0 7
35355: PUSH
35356: LD_INT 1
35358: ARRAY
35359: PUSH
35360: LD_INT 22
35362: EQUAL
35363: IFFALSE 35375
// begin control := control_remote ;
35365: LD_ADDR_VAR 0 4
35369: PUSH
35370: LD_INT 2
35372: ST_TO_ADDR
// break ;
35373: GO 35377
// end ;
35375: GO 35348
35377: POP
35378: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35379: LD_VAR 0 1
35383: PPUSH
35384: LD_VAR 0 2
35388: PPUSH
35389: LD_VAR 0 3
35393: PPUSH
35394: LD_VAR 0 4
35398: PPUSH
35399: LD_VAR 0 5
35403: PPUSH
35404: CALL_OW 448
35408: IFFALSE 35443
// begin result := [ chassis , engine , control , weapon ] ;
35410: LD_ADDR_VAR 0 6
35414: PUSH
35415: LD_VAR 0 2
35419: PUSH
35420: LD_VAR 0 3
35424: PUSH
35425: LD_VAR 0 4
35429: PUSH
35430: LD_VAR 0 5
35434: PUSH
35435: EMPTY
35436: LIST
35437: LIST
35438: LIST
35439: LIST
35440: ST_TO_ADDR
// exit ;
35441: GO 35855
// end ; _chassis := AvailableChassisList ( factory ) ;
35443: LD_ADDR_VAR 0 9
35447: PUSH
35448: LD_VAR 0 1
35452: PPUSH
35453: CALL_OW 475
35457: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
35458: LD_ADDR_VAR 0 11
35462: PUSH
35463: LD_VAR 0 1
35467: PPUSH
35468: CALL_OW 476
35472: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
35473: LD_ADDR_VAR 0 12
35477: PUSH
35478: LD_VAR 0 1
35482: PPUSH
35483: CALL_OW 477
35487: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
35488: LD_ADDR_VAR 0 10
35492: PUSH
35493: LD_VAR 0 1
35497: PPUSH
35498: CALL_OW 478
35502: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
35503: LD_VAR 0 9
35507: NOT
35508: PUSH
35509: LD_VAR 0 11
35513: NOT
35514: OR
35515: PUSH
35516: LD_VAR 0 12
35520: NOT
35521: OR
35522: PUSH
35523: LD_VAR 0 10
35527: NOT
35528: OR
35529: IFFALSE 35564
// begin result := [ chassis , engine , control , weapon ] ;
35531: LD_ADDR_VAR 0 6
35535: PUSH
35536: LD_VAR 0 2
35540: PUSH
35541: LD_VAR 0 3
35545: PUSH
35546: LD_VAR 0 4
35550: PUSH
35551: LD_VAR 0 5
35555: PUSH
35556: EMPTY
35557: LIST
35558: LIST
35559: LIST
35560: LIST
35561: ST_TO_ADDR
// exit ;
35562: GO 35855
// end ; if not chassis in _chassis then
35564: LD_VAR 0 2
35568: PUSH
35569: LD_VAR 0 9
35573: IN
35574: NOT
35575: IFFALSE 35601
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
35577: LD_ADDR_VAR 0 2
35581: PUSH
35582: LD_VAR 0 9
35586: PUSH
35587: LD_INT 1
35589: PPUSH
35590: LD_VAR 0 9
35594: PPUSH
35595: CALL_OW 12
35599: ARRAY
35600: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
35601: LD_VAR 0 2
35605: PPUSH
35606: LD_VAR 0 3
35610: PPUSH
35611: CALL 35860 0 2
35615: NOT
35616: IFFALSE 35675
// repeat engine := _engine [ 1 ] ;
35618: LD_ADDR_VAR 0 3
35622: PUSH
35623: LD_VAR 0 11
35627: PUSH
35628: LD_INT 1
35630: ARRAY
35631: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
35632: LD_ADDR_VAR 0 11
35636: PUSH
35637: LD_VAR 0 11
35641: PPUSH
35642: LD_INT 1
35644: PPUSH
35645: CALL_OW 3
35649: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
35650: LD_VAR 0 2
35654: PPUSH
35655: LD_VAR 0 3
35659: PPUSH
35660: CALL 35860 0 2
35664: PUSH
35665: LD_VAR 0 11
35669: PUSH
35670: EMPTY
35671: EQUAL
35672: OR
35673: IFFALSE 35618
// if not control in _control then
35675: LD_VAR 0 4
35679: PUSH
35680: LD_VAR 0 12
35684: IN
35685: NOT
35686: IFFALSE 35712
// control := _control [ rand ( 1 , _control ) ] ;
35688: LD_ADDR_VAR 0 4
35692: PUSH
35693: LD_VAR 0 12
35697: PUSH
35698: LD_INT 1
35700: PPUSH
35701: LD_VAR 0 12
35705: PPUSH
35706: CALL_OW 12
35710: ARRAY
35711: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
35712: LD_VAR 0 2
35716: PPUSH
35717: LD_VAR 0 5
35721: PPUSH
35722: CALL 36080 0 2
35726: NOT
35727: IFFALSE 35786
// repeat weapon := _weapon [ 1 ] ;
35729: LD_ADDR_VAR 0 5
35733: PUSH
35734: LD_VAR 0 10
35738: PUSH
35739: LD_INT 1
35741: ARRAY
35742: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
35743: LD_ADDR_VAR 0 10
35747: PUSH
35748: LD_VAR 0 10
35752: PPUSH
35753: LD_INT 1
35755: PPUSH
35756: CALL_OW 3
35760: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
35761: LD_VAR 0 2
35765: PPUSH
35766: LD_VAR 0 5
35770: PPUSH
35771: CALL 36080 0 2
35775: PUSH
35776: LD_VAR 0 10
35780: PUSH
35781: EMPTY
35782: EQUAL
35783: OR
35784: IFFALSE 35729
// result := [ ] ;
35786: LD_ADDR_VAR 0 6
35790: PUSH
35791: EMPTY
35792: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35793: LD_VAR 0 1
35797: PPUSH
35798: LD_VAR 0 2
35802: PPUSH
35803: LD_VAR 0 3
35807: PPUSH
35808: LD_VAR 0 4
35812: PPUSH
35813: LD_VAR 0 5
35817: PPUSH
35818: CALL_OW 448
35822: IFFALSE 35855
// result := [ chassis , engine , control , weapon ] ;
35824: LD_ADDR_VAR 0 6
35828: PUSH
35829: LD_VAR 0 2
35833: PUSH
35834: LD_VAR 0 3
35838: PUSH
35839: LD_VAR 0 4
35843: PUSH
35844: LD_VAR 0 5
35848: PUSH
35849: EMPTY
35850: LIST
35851: LIST
35852: LIST
35853: LIST
35854: ST_TO_ADDR
// end ;
35855: LD_VAR 0 6
35859: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
35860: LD_INT 0
35862: PPUSH
// if not chassis or not engine then
35863: LD_VAR 0 1
35867: NOT
35868: PUSH
35869: LD_VAR 0 2
35873: NOT
35874: OR
35875: IFFALSE 35879
// exit ;
35877: GO 36075
// case engine of engine_solar :
35879: LD_VAR 0 2
35883: PUSH
35884: LD_INT 2
35886: DOUBLE
35887: EQUAL
35888: IFTRUE 35892
35890: GO 35930
35892: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
35893: LD_ADDR_VAR 0 3
35897: PUSH
35898: LD_INT 11
35900: PUSH
35901: LD_INT 12
35903: PUSH
35904: LD_INT 13
35906: PUSH
35907: LD_INT 14
35909: PUSH
35910: LD_INT 1
35912: PUSH
35913: LD_INT 2
35915: PUSH
35916: LD_INT 3
35918: PUSH
35919: EMPTY
35920: LIST
35921: LIST
35922: LIST
35923: LIST
35924: LIST
35925: LIST
35926: LIST
35927: ST_TO_ADDR
35928: GO 36059
35930: LD_INT 1
35932: DOUBLE
35933: EQUAL
35934: IFTRUE 35938
35936: GO 36000
35938: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
35939: LD_ADDR_VAR 0 3
35943: PUSH
35944: LD_INT 11
35946: PUSH
35947: LD_INT 12
35949: PUSH
35950: LD_INT 13
35952: PUSH
35953: LD_INT 14
35955: PUSH
35956: LD_INT 1
35958: PUSH
35959: LD_INT 2
35961: PUSH
35962: LD_INT 3
35964: PUSH
35965: LD_INT 4
35967: PUSH
35968: LD_INT 5
35970: PUSH
35971: LD_INT 21
35973: PUSH
35974: LD_INT 23
35976: PUSH
35977: LD_INT 22
35979: PUSH
35980: LD_INT 24
35982: PUSH
35983: EMPTY
35984: LIST
35985: LIST
35986: LIST
35987: LIST
35988: LIST
35989: LIST
35990: LIST
35991: LIST
35992: LIST
35993: LIST
35994: LIST
35995: LIST
35996: LIST
35997: ST_TO_ADDR
35998: GO 36059
36000: LD_INT 3
36002: DOUBLE
36003: EQUAL
36004: IFTRUE 36008
36006: GO 36058
36008: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36009: LD_ADDR_VAR 0 3
36013: PUSH
36014: LD_INT 13
36016: PUSH
36017: LD_INT 14
36019: PUSH
36020: LD_INT 2
36022: PUSH
36023: LD_INT 3
36025: PUSH
36026: LD_INT 4
36028: PUSH
36029: LD_INT 5
36031: PUSH
36032: LD_INT 21
36034: PUSH
36035: LD_INT 22
36037: PUSH
36038: LD_INT 23
36040: PUSH
36041: LD_INT 24
36043: PUSH
36044: EMPTY
36045: LIST
36046: LIST
36047: LIST
36048: LIST
36049: LIST
36050: LIST
36051: LIST
36052: LIST
36053: LIST
36054: LIST
36055: ST_TO_ADDR
36056: GO 36059
36058: POP
// result := ( chassis in result ) ;
36059: LD_ADDR_VAR 0 3
36063: PUSH
36064: LD_VAR 0 1
36068: PUSH
36069: LD_VAR 0 3
36073: IN
36074: ST_TO_ADDR
// end ;
36075: LD_VAR 0 3
36079: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
36080: LD_INT 0
36082: PPUSH
// if not chassis or not weapon then
36083: LD_VAR 0 1
36087: NOT
36088: PUSH
36089: LD_VAR 0 2
36093: NOT
36094: OR
36095: IFFALSE 36099
// exit ;
36097: GO 37159
// case weapon of us_machine_gun :
36099: LD_VAR 0 2
36103: PUSH
36104: LD_INT 2
36106: DOUBLE
36107: EQUAL
36108: IFTRUE 36112
36110: GO 36142
36112: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
36113: LD_ADDR_VAR 0 3
36117: PUSH
36118: LD_INT 1
36120: PUSH
36121: LD_INT 2
36123: PUSH
36124: LD_INT 3
36126: PUSH
36127: LD_INT 4
36129: PUSH
36130: LD_INT 5
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: LIST
36137: LIST
36138: LIST
36139: ST_TO_ADDR
36140: GO 37143
36142: LD_INT 3
36144: DOUBLE
36145: EQUAL
36146: IFTRUE 36150
36148: GO 36180
36150: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
36151: LD_ADDR_VAR 0 3
36155: PUSH
36156: LD_INT 1
36158: PUSH
36159: LD_INT 2
36161: PUSH
36162: LD_INT 3
36164: PUSH
36165: LD_INT 4
36167: PUSH
36168: LD_INT 5
36170: PUSH
36171: EMPTY
36172: LIST
36173: LIST
36174: LIST
36175: LIST
36176: LIST
36177: ST_TO_ADDR
36178: GO 37143
36180: LD_INT 11
36182: DOUBLE
36183: EQUAL
36184: IFTRUE 36188
36186: GO 36218
36188: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
36189: LD_ADDR_VAR 0 3
36193: PUSH
36194: LD_INT 1
36196: PUSH
36197: LD_INT 2
36199: PUSH
36200: LD_INT 3
36202: PUSH
36203: LD_INT 4
36205: PUSH
36206: LD_INT 5
36208: PUSH
36209: EMPTY
36210: LIST
36211: LIST
36212: LIST
36213: LIST
36214: LIST
36215: ST_TO_ADDR
36216: GO 37143
36218: LD_INT 4
36220: DOUBLE
36221: EQUAL
36222: IFTRUE 36226
36224: GO 36252
36226: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
36227: LD_ADDR_VAR 0 3
36231: PUSH
36232: LD_INT 2
36234: PUSH
36235: LD_INT 3
36237: PUSH
36238: LD_INT 4
36240: PUSH
36241: LD_INT 5
36243: PUSH
36244: EMPTY
36245: LIST
36246: LIST
36247: LIST
36248: LIST
36249: ST_TO_ADDR
36250: GO 37143
36252: LD_INT 5
36254: DOUBLE
36255: EQUAL
36256: IFTRUE 36260
36258: GO 36286
36260: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
36261: LD_ADDR_VAR 0 3
36265: PUSH
36266: LD_INT 2
36268: PUSH
36269: LD_INT 3
36271: PUSH
36272: LD_INT 4
36274: PUSH
36275: LD_INT 5
36277: PUSH
36278: EMPTY
36279: LIST
36280: LIST
36281: LIST
36282: LIST
36283: ST_TO_ADDR
36284: GO 37143
36286: LD_INT 9
36288: DOUBLE
36289: EQUAL
36290: IFTRUE 36294
36292: GO 36320
36294: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
36295: LD_ADDR_VAR 0 3
36299: PUSH
36300: LD_INT 2
36302: PUSH
36303: LD_INT 3
36305: PUSH
36306: LD_INT 4
36308: PUSH
36309: LD_INT 5
36311: PUSH
36312: EMPTY
36313: LIST
36314: LIST
36315: LIST
36316: LIST
36317: ST_TO_ADDR
36318: GO 37143
36320: LD_INT 7
36322: DOUBLE
36323: EQUAL
36324: IFTRUE 36328
36326: GO 36354
36328: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
36329: LD_ADDR_VAR 0 3
36333: PUSH
36334: LD_INT 2
36336: PUSH
36337: LD_INT 3
36339: PUSH
36340: LD_INT 4
36342: PUSH
36343: LD_INT 5
36345: PUSH
36346: EMPTY
36347: LIST
36348: LIST
36349: LIST
36350: LIST
36351: ST_TO_ADDR
36352: GO 37143
36354: LD_INT 12
36356: DOUBLE
36357: EQUAL
36358: IFTRUE 36362
36360: GO 36388
36362: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
36363: LD_ADDR_VAR 0 3
36367: PUSH
36368: LD_INT 2
36370: PUSH
36371: LD_INT 3
36373: PUSH
36374: LD_INT 4
36376: PUSH
36377: LD_INT 5
36379: PUSH
36380: EMPTY
36381: LIST
36382: LIST
36383: LIST
36384: LIST
36385: ST_TO_ADDR
36386: GO 37143
36388: LD_INT 13
36390: DOUBLE
36391: EQUAL
36392: IFTRUE 36396
36394: GO 36422
36396: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
36397: LD_ADDR_VAR 0 3
36401: PUSH
36402: LD_INT 2
36404: PUSH
36405: LD_INT 3
36407: PUSH
36408: LD_INT 4
36410: PUSH
36411: LD_INT 5
36413: PUSH
36414: EMPTY
36415: LIST
36416: LIST
36417: LIST
36418: LIST
36419: ST_TO_ADDR
36420: GO 37143
36422: LD_INT 14
36424: DOUBLE
36425: EQUAL
36426: IFTRUE 36430
36428: GO 36448
36430: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
36431: LD_ADDR_VAR 0 3
36435: PUSH
36436: LD_INT 4
36438: PUSH
36439: LD_INT 5
36441: PUSH
36442: EMPTY
36443: LIST
36444: LIST
36445: ST_TO_ADDR
36446: GO 37143
36448: LD_INT 6
36450: DOUBLE
36451: EQUAL
36452: IFTRUE 36456
36454: GO 36474
36456: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
36457: LD_ADDR_VAR 0 3
36461: PUSH
36462: LD_INT 4
36464: PUSH
36465: LD_INT 5
36467: PUSH
36468: EMPTY
36469: LIST
36470: LIST
36471: ST_TO_ADDR
36472: GO 37143
36474: LD_INT 10
36476: DOUBLE
36477: EQUAL
36478: IFTRUE 36482
36480: GO 36500
36482: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
36483: LD_ADDR_VAR 0 3
36487: PUSH
36488: LD_INT 4
36490: PUSH
36491: LD_INT 5
36493: PUSH
36494: EMPTY
36495: LIST
36496: LIST
36497: ST_TO_ADDR
36498: GO 37143
36500: LD_INT 22
36502: DOUBLE
36503: EQUAL
36504: IFTRUE 36508
36506: GO 36534
36508: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
36509: LD_ADDR_VAR 0 3
36513: PUSH
36514: LD_INT 11
36516: PUSH
36517: LD_INT 12
36519: PUSH
36520: LD_INT 13
36522: PUSH
36523: LD_INT 14
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: ST_TO_ADDR
36532: GO 37143
36534: LD_INT 23
36536: DOUBLE
36537: EQUAL
36538: IFTRUE 36542
36540: GO 36568
36542: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
36543: LD_ADDR_VAR 0 3
36547: PUSH
36548: LD_INT 11
36550: PUSH
36551: LD_INT 12
36553: PUSH
36554: LD_INT 13
36556: PUSH
36557: LD_INT 14
36559: PUSH
36560: EMPTY
36561: LIST
36562: LIST
36563: LIST
36564: LIST
36565: ST_TO_ADDR
36566: GO 37143
36568: LD_INT 24
36570: DOUBLE
36571: EQUAL
36572: IFTRUE 36576
36574: GO 36602
36576: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
36577: LD_ADDR_VAR 0 3
36581: PUSH
36582: LD_INT 11
36584: PUSH
36585: LD_INT 12
36587: PUSH
36588: LD_INT 13
36590: PUSH
36591: LD_INT 14
36593: PUSH
36594: EMPTY
36595: LIST
36596: LIST
36597: LIST
36598: LIST
36599: ST_TO_ADDR
36600: GO 37143
36602: LD_INT 30
36604: DOUBLE
36605: EQUAL
36606: IFTRUE 36610
36608: GO 36636
36610: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
36611: LD_ADDR_VAR 0 3
36615: PUSH
36616: LD_INT 11
36618: PUSH
36619: LD_INT 12
36621: PUSH
36622: LD_INT 13
36624: PUSH
36625: LD_INT 14
36627: PUSH
36628: EMPTY
36629: LIST
36630: LIST
36631: LIST
36632: LIST
36633: ST_TO_ADDR
36634: GO 37143
36636: LD_INT 25
36638: DOUBLE
36639: EQUAL
36640: IFTRUE 36644
36642: GO 36662
36644: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
36645: LD_ADDR_VAR 0 3
36649: PUSH
36650: LD_INT 13
36652: PUSH
36653: LD_INT 14
36655: PUSH
36656: EMPTY
36657: LIST
36658: LIST
36659: ST_TO_ADDR
36660: GO 37143
36662: LD_INT 27
36664: DOUBLE
36665: EQUAL
36666: IFTRUE 36670
36668: GO 36688
36670: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
36671: LD_ADDR_VAR 0 3
36675: PUSH
36676: LD_INT 13
36678: PUSH
36679: LD_INT 14
36681: PUSH
36682: EMPTY
36683: LIST
36684: LIST
36685: ST_TO_ADDR
36686: GO 37143
36688: LD_INT 92
36690: DOUBLE
36691: EQUAL
36692: IFTRUE 36696
36694: GO 36722
36696: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
36697: LD_ADDR_VAR 0 3
36701: PUSH
36702: LD_INT 11
36704: PUSH
36705: LD_INT 12
36707: PUSH
36708: LD_INT 13
36710: PUSH
36711: LD_INT 14
36713: PUSH
36714: EMPTY
36715: LIST
36716: LIST
36717: LIST
36718: LIST
36719: ST_TO_ADDR
36720: GO 37143
36722: LD_INT 28
36724: DOUBLE
36725: EQUAL
36726: IFTRUE 36730
36728: GO 36748
36730: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
36731: LD_ADDR_VAR 0 3
36735: PUSH
36736: LD_INT 13
36738: PUSH
36739: LD_INT 14
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: ST_TO_ADDR
36746: GO 37143
36748: LD_INT 29
36750: DOUBLE
36751: EQUAL
36752: IFTRUE 36756
36754: GO 36774
36756: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
36757: LD_ADDR_VAR 0 3
36761: PUSH
36762: LD_INT 13
36764: PUSH
36765: LD_INT 14
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: ST_TO_ADDR
36772: GO 37143
36774: LD_INT 31
36776: DOUBLE
36777: EQUAL
36778: IFTRUE 36782
36780: GO 36800
36782: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
36783: LD_ADDR_VAR 0 3
36787: PUSH
36788: LD_INT 13
36790: PUSH
36791: LD_INT 14
36793: PUSH
36794: EMPTY
36795: LIST
36796: LIST
36797: ST_TO_ADDR
36798: GO 37143
36800: LD_INT 26
36802: DOUBLE
36803: EQUAL
36804: IFTRUE 36808
36806: GO 36826
36808: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
36809: LD_ADDR_VAR 0 3
36813: PUSH
36814: LD_INT 13
36816: PUSH
36817: LD_INT 14
36819: PUSH
36820: EMPTY
36821: LIST
36822: LIST
36823: ST_TO_ADDR
36824: GO 37143
36826: LD_INT 42
36828: DOUBLE
36829: EQUAL
36830: IFTRUE 36834
36832: GO 36860
36834: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
36835: LD_ADDR_VAR 0 3
36839: PUSH
36840: LD_INT 21
36842: PUSH
36843: LD_INT 22
36845: PUSH
36846: LD_INT 23
36848: PUSH
36849: LD_INT 24
36851: PUSH
36852: EMPTY
36853: LIST
36854: LIST
36855: LIST
36856: LIST
36857: ST_TO_ADDR
36858: GO 37143
36860: LD_INT 43
36862: DOUBLE
36863: EQUAL
36864: IFTRUE 36868
36866: GO 36894
36868: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
36869: LD_ADDR_VAR 0 3
36873: PUSH
36874: LD_INT 21
36876: PUSH
36877: LD_INT 22
36879: PUSH
36880: LD_INT 23
36882: PUSH
36883: LD_INT 24
36885: PUSH
36886: EMPTY
36887: LIST
36888: LIST
36889: LIST
36890: LIST
36891: ST_TO_ADDR
36892: GO 37143
36894: LD_INT 44
36896: DOUBLE
36897: EQUAL
36898: IFTRUE 36902
36900: GO 36928
36902: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
36903: LD_ADDR_VAR 0 3
36907: PUSH
36908: LD_INT 21
36910: PUSH
36911: LD_INT 22
36913: PUSH
36914: LD_INT 23
36916: PUSH
36917: LD_INT 24
36919: PUSH
36920: EMPTY
36921: LIST
36922: LIST
36923: LIST
36924: LIST
36925: ST_TO_ADDR
36926: GO 37143
36928: LD_INT 45
36930: DOUBLE
36931: EQUAL
36932: IFTRUE 36936
36934: GO 36962
36936: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
36937: LD_ADDR_VAR 0 3
36941: PUSH
36942: LD_INT 21
36944: PUSH
36945: LD_INT 22
36947: PUSH
36948: LD_INT 23
36950: PUSH
36951: LD_INT 24
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: LIST
36958: LIST
36959: ST_TO_ADDR
36960: GO 37143
36962: LD_INT 49
36964: DOUBLE
36965: EQUAL
36966: IFTRUE 36970
36968: GO 36996
36970: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
36971: LD_ADDR_VAR 0 3
36975: PUSH
36976: LD_INT 21
36978: PUSH
36979: LD_INT 22
36981: PUSH
36982: LD_INT 23
36984: PUSH
36985: LD_INT 24
36987: PUSH
36988: EMPTY
36989: LIST
36990: LIST
36991: LIST
36992: LIST
36993: ST_TO_ADDR
36994: GO 37143
36996: LD_INT 51
36998: DOUBLE
36999: EQUAL
37000: IFTRUE 37004
37002: GO 37030
37004: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
37005: LD_ADDR_VAR 0 3
37009: PUSH
37010: LD_INT 21
37012: PUSH
37013: LD_INT 22
37015: PUSH
37016: LD_INT 23
37018: PUSH
37019: LD_INT 24
37021: PUSH
37022: EMPTY
37023: LIST
37024: LIST
37025: LIST
37026: LIST
37027: ST_TO_ADDR
37028: GO 37143
37030: LD_INT 52
37032: DOUBLE
37033: EQUAL
37034: IFTRUE 37038
37036: GO 37064
37038: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
37039: LD_ADDR_VAR 0 3
37043: PUSH
37044: LD_INT 21
37046: PUSH
37047: LD_INT 22
37049: PUSH
37050: LD_INT 23
37052: PUSH
37053: LD_INT 24
37055: PUSH
37056: EMPTY
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: ST_TO_ADDR
37062: GO 37143
37064: LD_INT 53
37066: DOUBLE
37067: EQUAL
37068: IFTRUE 37072
37070: GO 37090
37072: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
37073: LD_ADDR_VAR 0 3
37077: PUSH
37078: LD_INT 23
37080: PUSH
37081: LD_INT 24
37083: PUSH
37084: EMPTY
37085: LIST
37086: LIST
37087: ST_TO_ADDR
37088: GO 37143
37090: LD_INT 46
37092: DOUBLE
37093: EQUAL
37094: IFTRUE 37098
37096: GO 37116
37098: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
37099: LD_ADDR_VAR 0 3
37103: PUSH
37104: LD_INT 23
37106: PUSH
37107: LD_INT 24
37109: PUSH
37110: EMPTY
37111: LIST
37112: LIST
37113: ST_TO_ADDR
37114: GO 37143
37116: LD_INT 47
37118: DOUBLE
37119: EQUAL
37120: IFTRUE 37124
37122: GO 37142
37124: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37125: LD_ADDR_VAR 0 3
37129: PUSH
37130: LD_INT 23
37132: PUSH
37133: LD_INT 24
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: ST_TO_ADDR
37140: GO 37143
37142: POP
// result := ( chassis in result ) ;
37143: LD_ADDR_VAR 0 3
37147: PUSH
37148: LD_VAR 0 1
37152: PUSH
37153: LD_VAR 0 3
37157: IN
37158: ST_TO_ADDR
// end ;
37159: LD_VAR 0 3
37163: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
37164: LD_INT 0
37166: PPUSH
37167: PPUSH
37168: PPUSH
37169: PPUSH
37170: PPUSH
37171: PPUSH
37172: PPUSH
// result := array ;
37173: LD_ADDR_VAR 0 5
37177: PUSH
37178: LD_VAR 0 1
37182: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
37183: LD_VAR 0 1
37187: NOT
37188: PUSH
37189: LD_VAR 0 2
37193: NOT
37194: OR
37195: PUSH
37196: LD_VAR 0 3
37200: NOT
37201: OR
37202: PUSH
37203: LD_VAR 0 2
37207: PUSH
37208: LD_VAR 0 1
37212: GREATER
37213: OR
37214: PUSH
37215: LD_VAR 0 3
37219: PUSH
37220: LD_VAR 0 1
37224: GREATER
37225: OR
37226: IFFALSE 37230
// exit ;
37228: GO 37526
// if direction then
37230: LD_VAR 0 4
37234: IFFALSE 37298
// begin d := 1 ;
37236: LD_ADDR_VAR 0 9
37240: PUSH
37241: LD_INT 1
37243: ST_TO_ADDR
// if i_from > i_to then
37244: LD_VAR 0 2
37248: PUSH
37249: LD_VAR 0 3
37253: GREATER
37254: IFFALSE 37280
// length := ( array - i_from ) + i_to else
37256: LD_ADDR_VAR 0 11
37260: PUSH
37261: LD_VAR 0 1
37265: PUSH
37266: LD_VAR 0 2
37270: MINUS
37271: PUSH
37272: LD_VAR 0 3
37276: PLUS
37277: ST_TO_ADDR
37278: GO 37296
// length := i_to - i_from ;
37280: LD_ADDR_VAR 0 11
37284: PUSH
37285: LD_VAR 0 3
37289: PUSH
37290: LD_VAR 0 2
37294: MINUS
37295: ST_TO_ADDR
// end else
37296: GO 37359
// begin d := - 1 ;
37298: LD_ADDR_VAR 0 9
37302: PUSH
37303: LD_INT 1
37305: NEG
37306: ST_TO_ADDR
// if i_from > i_to then
37307: LD_VAR 0 2
37311: PUSH
37312: LD_VAR 0 3
37316: GREATER
37317: IFFALSE 37337
// length := i_from - i_to else
37319: LD_ADDR_VAR 0 11
37323: PUSH
37324: LD_VAR 0 2
37328: PUSH
37329: LD_VAR 0 3
37333: MINUS
37334: ST_TO_ADDR
37335: GO 37359
// length := ( array - i_to ) + i_from ;
37337: LD_ADDR_VAR 0 11
37341: PUSH
37342: LD_VAR 0 1
37346: PUSH
37347: LD_VAR 0 3
37351: MINUS
37352: PUSH
37353: LD_VAR 0 2
37357: PLUS
37358: ST_TO_ADDR
// end ; if not length then
37359: LD_VAR 0 11
37363: NOT
37364: IFFALSE 37368
// exit ;
37366: GO 37526
// tmp := array ;
37368: LD_ADDR_VAR 0 10
37372: PUSH
37373: LD_VAR 0 1
37377: ST_TO_ADDR
// for i = 1 to length do
37378: LD_ADDR_VAR 0 6
37382: PUSH
37383: DOUBLE
37384: LD_INT 1
37386: DEC
37387: ST_TO_ADDR
37388: LD_VAR 0 11
37392: PUSH
37393: FOR_TO
37394: IFFALSE 37514
// begin for j = 1 to array do
37396: LD_ADDR_VAR 0 7
37400: PUSH
37401: DOUBLE
37402: LD_INT 1
37404: DEC
37405: ST_TO_ADDR
37406: LD_VAR 0 1
37410: PUSH
37411: FOR_TO
37412: IFFALSE 37500
// begin k := j + d ;
37414: LD_ADDR_VAR 0 8
37418: PUSH
37419: LD_VAR 0 7
37423: PUSH
37424: LD_VAR 0 9
37428: PLUS
37429: ST_TO_ADDR
// if k > array then
37430: LD_VAR 0 8
37434: PUSH
37435: LD_VAR 0 1
37439: GREATER
37440: IFFALSE 37450
// k := 1 ;
37442: LD_ADDR_VAR 0 8
37446: PUSH
37447: LD_INT 1
37449: ST_TO_ADDR
// if not k then
37450: LD_VAR 0 8
37454: NOT
37455: IFFALSE 37467
// k := array ;
37457: LD_ADDR_VAR 0 8
37461: PUSH
37462: LD_VAR 0 1
37466: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
37467: LD_ADDR_VAR 0 10
37471: PUSH
37472: LD_VAR 0 10
37476: PPUSH
37477: LD_VAR 0 8
37481: PPUSH
37482: LD_VAR 0 1
37486: PUSH
37487: LD_VAR 0 7
37491: ARRAY
37492: PPUSH
37493: CALL_OW 1
37497: ST_TO_ADDR
// end ;
37498: GO 37411
37500: POP
37501: POP
// array := tmp ;
37502: LD_ADDR_VAR 0 1
37506: PUSH
37507: LD_VAR 0 10
37511: ST_TO_ADDR
// end ;
37512: GO 37393
37514: POP
37515: POP
// result := array ;
37516: LD_ADDR_VAR 0 5
37520: PUSH
37521: LD_VAR 0 1
37525: ST_TO_ADDR
// end ;
37526: LD_VAR 0 5
37530: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
37531: LD_INT 0
37533: PPUSH
37534: PPUSH
// result := 0 ;
37535: LD_ADDR_VAR 0 3
37539: PUSH
37540: LD_INT 0
37542: ST_TO_ADDR
// if not array or not value in array then
37543: LD_VAR 0 1
37547: NOT
37548: PUSH
37549: LD_VAR 0 2
37553: PUSH
37554: LD_VAR 0 1
37558: IN
37559: NOT
37560: OR
37561: IFFALSE 37565
// exit ;
37563: GO 37619
// for i = 1 to array do
37565: LD_ADDR_VAR 0 4
37569: PUSH
37570: DOUBLE
37571: LD_INT 1
37573: DEC
37574: ST_TO_ADDR
37575: LD_VAR 0 1
37579: PUSH
37580: FOR_TO
37581: IFFALSE 37617
// if value = array [ i ] then
37583: LD_VAR 0 2
37587: PUSH
37588: LD_VAR 0 1
37592: PUSH
37593: LD_VAR 0 4
37597: ARRAY
37598: EQUAL
37599: IFFALSE 37615
// begin result := i ;
37601: LD_ADDR_VAR 0 3
37605: PUSH
37606: LD_VAR 0 4
37610: ST_TO_ADDR
// exit ;
37611: POP
37612: POP
37613: GO 37619
// end ;
37615: GO 37580
37617: POP
37618: POP
// end ;
37619: LD_VAR 0 3
37623: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
37624: LD_INT 0
37626: PPUSH
// vc_chassis := chassis ;
37627: LD_ADDR_OWVAR 37
37631: PUSH
37632: LD_VAR 0 1
37636: ST_TO_ADDR
// vc_engine := engine ;
37637: LD_ADDR_OWVAR 39
37641: PUSH
37642: LD_VAR 0 2
37646: ST_TO_ADDR
// vc_control := control ;
37647: LD_ADDR_OWVAR 38
37651: PUSH
37652: LD_VAR 0 3
37656: ST_TO_ADDR
// vc_weapon := weapon ;
37657: LD_ADDR_OWVAR 40
37661: PUSH
37662: LD_VAR 0 4
37666: ST_TO_ADDR
// vc_fuel_battery := fuel ;
37667: LD_ADDR_OWVAR 41
37671: PUSH
37672: LD_VAR 0 5
37676: ST_TO_ADDR
// end ;
37677: LD_VAR 0 6
37681: RET
// export function WantPlant ( unit ) ; var task ; begin
37682: LD_INT 0
37684: PPUSH
37685: PPUSH
// result := false ;
37686: LD_ADDR_VAR 0 2
37690: PUSH
37691: LD_INT 0
37693: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
37694: LD_ADDR_VAR 0 3
37698: PUSH
37699: LD_VAR 0 1
37703: PPUSH
37704: CALL_OW 437
37708: ST_TO_ADDR
// if task then
37709: LD_VAR 0 3
37713: IFFALSE 37741
// if task [ 1 ] [ 1 ] = p then
37715: LD_VAR 0 3
37719: PUSH
37720: LD_INT 1
37722: ARRAY
37723: PUSH
37724: LD_INT 1
37726: ARRAY
37727: PUSH
37728: LD_STRING p
37730: EQUAL
37731: IFFALSE 37741
// result := true ;
37733: LD_ADDR_VAR 0 2
37737: PUSH
37738: LD_INT 1
37740: ST_TO_ADDR
// end ;
37741: LD_VAR 0 2
37745: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
37746: LD_INT 0
37748: PPUSH
37749: PPUSH
37750: PPUSH
37751: PPUSH
// if pos < 1 then
37752: LD_VAR 0 2
37756: PUSH
37757: LD_INT 1
37759: LESS
37760: IFFALSE 37764
// exit ;
37762: GO 38067
// if pos = 1 then
37764: LD_VAR 0 2
37768: PUSH
37769: LD_INT 1
37771: EQUAL
37772: IFFALSE 37805
// result := Replace ( arr , pos [ 1 ] , value ) else
37774: LD_ADDR_VAR 0 4
37778: PUSH
37779: LD_VAR 0 1
37783: PPUSH
37784: LD_VAR 0 2
37788: PUSH
37789: LD_INT 1
37791: ARRAY
37792: PPUSH
37793: LD_VAR 0 3
37797: PPUSH
37798: CALL_OW 1
37802: ST_TO_ADDR
37803: GO 38067
// begin tmp := arr ;
37805: LD_ADDR_VAR 0 6
37809: PUSH
37810: LD_VAR 0 1
37814: ST_TO_ADDR
// s_arr := [ tmp ] ;
37815: LD_ADDR_VAR 0 7
37819: PUSH
37820: LD_VAR 0 6
37824: PUSH
37825: EMPTY
37826: LIST
37827: ST_TO_ADDR
// for i = 1 to pos - 1 do
37828: LD_ADDR_VAR 0 5
37832: PUSH
37833: DOUBLE
37834: LD_INT 1
37836: DEC
37837: ST_TO_ADDR
37838: LD_VAR 0 2
37842: PUSH
37843: LD_INT 1
37845: MINUS
37846: PUSH
37847: FOR_TO
37848: IFFALSE 37893
// begin tmp := tmp [ pos [ i ] ] ;
37850: LD_ADDR_VAR 0 6
37854: PUSH
37855: LD_VAR 0 6
37859: PUSH
37860: LD_VAR 0 2
37864: PUSH
37865: LD_VAR 0 5
37869: ARRAY
37870: ARRAY
37871: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
37872: LD_ADDR_VAR 0 7
37876: PUSH
37877: LD_VAR 0 7
37881: PUSH
37882: LD_VAR 0 6
37886: PUSH
37887: EMPTY
37888: LIST
37889: ADD
37890: ST_TO_ADDR
// end ;
37891: GO 37847
37893: POP
37894: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
37895: LD_ADDR_VAR 0 6
37899: PUSH
37900: LD_VAR 0 6
37904: PPUSH
37905: LD_VAR 0 2
37909: PUSH
37910: LD_VAR 0 2
37914: ARRAY
37915: PPUSH
37916: LD_VAR 0 3
37920: PPUSH
37921: CALL_OW 1
37925: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
37926: LD_ADDR_VAR 0 7
37930: PUSH
37931: LD_VAR 0 7
37935: PPUSH
37936: LD_VAR 0 7
37940: PPUSH
37941: LD_VAR 0 6
37945: PPUSH
37946: CALL_OW 1
37950: ST_TO_ADDR
// for i = s_arr downto 2 do
37951: LD_ADDR_VAR 0 5
37955: PUSH
37956: DOUBLE
37957: LD_VAR 0 7
37961: INC
37962: ST_TO_ADDR
37963: LD_INT 2
37965: PUSH
37966: FOR_DOWNTO
37967: IFFALSE 38051
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
37969: LD_ADDR_VAR 0 6
37973: PUSH
37974: LD_VAR 0 7
37978: PUSH
37979: LD_VAR 0 5
37983: PUSH
37984: LD_INT 1
37986: MINUS
37987: ARRAY
37988: PPUSH
37989: LD_VAR 0 2
37993: PUSH
37994: LD_VAR 0 5
37998: PUSH
37999: LD_INT 1
38001: MINUS
38002: ARRAY
38003: PPUSH
38004: LD_VAR 0 7
38008: PUSH
38009: LD_VAR 0 5
38013: ARRAY
38014: PPUSH
38015: CALL_OW 1
38019: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
38020: LD_ADDR_VAR 0 7
38024: PUSH
38025: LD_VAR 0 7
38029: PPUSH
38030: LD_VAR 0 5
38034: PUSH
38035: LD_INT 1
38037: MINUS
38038: PPUSH
38039: LD_VAR 0 6
38043: PPUSH
38044: CALL_OW 1
38048: ST_TO_ADDR
// end ;
38049: GO 37966
38051: POP
38052: POP
// result := s_arr [ 1 ] ;
38053: LD_ADDR_VAR 0 4
38057: PUSH
38058: LD_VAR 0 7
38062: PUSH
38063: LD_INT 1
38065: ARRAY
38066: ST_TO_ADDR
// end ; end ;
38067: LD_VAR 0 4
38071: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
38072: LD_INT 0
38074: PPUSH
38075: PPUSH
// if not list then
38076: LD_VAR 0 1
38080: NOT
38081: IFFALSE 38085
// exit ;
38083: GO 38176
// i := list [ pos1 ] ;
38085: LD_ADDR_VAR 0 5
38089: PUSH
38090: LD_VAR 0 1
38094: PUSH
38095: LD_VAR 0 2
38099: ARRAY
38100: ST_TO_ADDR
// if not i then
38101: LD_VAR 0 5
38105: NOT
38106: IFFALSE 38110
// exit ;
38108: GO 38176
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
38110: LD_ADDR_VAR 0 1
38114: PUSH
38115: LD_VAR 0 1
38119: PPUSH
38120: LD_VAR 0 2
38124: PPUSH
38125: LD_VAR 0 1
38129: PUSH
38130: LD_VAR 0 3
38134: ARRAY
38135: PPUSH
38136: CALL_OW 1
38140: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
38141: LD_ADDR_VAR 0 1
38145: PUSH
38146: LD_VAR 0 1
38150: PPUSH
38151: LD_VAR 0 3
38155: PPUSH
38156: LD_VAR 0 5
38160: PPUSH
38161: CALL_OW 1
38165: ST_TO_ADDR
// result := list ;
38166: LD_ADDR_VAR 0 4
38170: PUSH
38171: LD_VAR 0 1
38175: ST_TO_ADDR
// end ;
38176: LD_VAR 0 4
38180: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
38181: LD_INT 0
38183: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
38184: LD_ADDR_VAR 0 5
38188: PUSH
38189: LD_VAR 0 1
38193: PPUSH
38194: CALL_OW 250
38198: PPUSH
38199: LD_VAR 0 1
38203: PPUSH
38204: CALL_OW 251
38208: PPUSH
38209: LD_VAR 0 2
38213: PPUSH
38214: LD_VAR 0 3
38218: PPUSH
38219: LD_VAR 0 4
38223: PPUSH
38224: CALL 38602 0 5
38228: ST_TO_ADDR
// end ;
38229: LD_VAR 0 5
38233: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
38234: LD_INT 0
38236: PPUSH
38237: PPUSH
38238: PPUSH
38239: PPUSH
// if not list or not unit then
38240: LD_VAR 0 2
38244: NOT
38245: PUSH
38246: LD_VAR 0 1
38250: NOT
38251: OR
38252: IFFALSE 38256
// exit ;
38254: GO 38597
// result := [ ] ;
38256: LD_ADDR_VAR 0 5
38260: PUSH
38261: EMPTY
38262: ST_TO_ADDR
// for i in list do
38263: LD_ADDR_VAR 0 6
38267: PUSH
38268: LD_VAR 0 2
38272: PUSH
38273: FOR_IN
38274: IFFALSE 38492
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
38276: LD_ADDR_VAR 0 8
38280: PUSH
38281: LD_VAR 0 1
38285: PPUSH
38286: LD_VAR 0 6
38290: PUSH
38291: LD_INT 1
38293: ARRAY
38294: PPUSH
38295: LD_VAR 0 6
38299: PUSH
38300: LD_INT 2
38302: ARRAY
38303: PPUSH
38304: CALL_OW 297
38308: ST_TO_ADDR
// if not Count ( result ) then
38309: LD_VAR 0 5
38313: PPUSH
38314: CALL 34886 0 1
38318: NOT
38319: IFFALSE 38352
// begin result := Join ( result , [ i , tmp ] ) ;
38321: LD_ADDR_VAR 0 5
38325: PUSH
38326: LD_VAR 0 5
38330: PPUSH
38331: LD_VAR 0 6
38335: PUSH
38336: LD_VAR 0 8
38340: PUSH
38341: EMPTY
38342: LIST
38343: LIST
38344: PPUSH
38345: CALL 70486 0 2
38349: ST_TO_ADDR
// continue ;
38350: GO 38273
// end ; if result [ result ] [ 2 ] <= tmp then
38352: LD_VAR 0 5
38356: PUSH
38357: LD_VAR 0 5
38361: ARRAY
38362: PUSH
38363: LD_INT 2
38365: ARRAY
38366: PUSH
38367: LD_VAR 0 8
38371: LESSEQUAL
38372: IFFALSE 38405
// result := Join ( result , [ i , tmp ] ) else
38374: LD_ADDR_VAR 0 5
38378: PUSH
38379: LD_VAR 0 5
38383: PPUSH
38384: LD_VAR 0 6
38388: PUSH
38389: LD_VAR 0 8
38393: PUSH
38394: EMPTY
38395: LIST
38396: LIST
38397: PPUSH
38398: CALL 70486 0 2
38402: ST_TO_ADDR
38403: GO 38490
// begin for j := 1 to Count ( result ) do
38405: LD_ADDR_VAR 0 7
38409: PUSH
38410: DOUBLE
38411: LD_INT 1
38413: DEC
38414: ST_TO_ADDR
38415: LD_VAR 0 5
38419: PPUSH
38420: CALL 34886 0 1
38424: PUSH
38425: FOR_TO
38426: IFFALSE 38488
// begin if tmp < result [ j ] [ 2 ] then
38428: LD_VAR 0 8
38432: PUSH
38433: LD_VAR 0 5
38437: PUSH
38438: LD_VAR 0 7
38442: ARRAY
38443: PUSH
38444: LD_INT 2
38446: ARRAY
38447: LESS
38448: IFFALSE 38486
// begin result := Insert ( result , j , [ i , tmp ] ) ;
38450: LD_ADDR_VAR 0 5
38454: PUSH
38455: LD_VAR 0 5
38459: PPUSH
38460: LD_VAR 0 7
38464: PPUSH
38465: LD_VAR 0 6
38469: PUSH
38470: LD_VAR 0 8
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: PPUSH
38479: CALL_OW 2
38483: ST_TO_ADDR
// break ;
38484: GO 38488
// end ; end ;
38486: GO 38425
38488: POP
38489: POP
// end ; end ;
38490: GO 38273
38492: POP
38493: POP
// if result and not asc then
38494: LD_VAR 0 5
38498: PUSH
38499: LD_VAR 0 3
38503: NOT
38504: AND
38505: IFFALSE 38522
// result := ReverseArray ( result ) ;
38507: LD_ADDR_VAR 0 5
38511: PUSH
38512: LD_VAR 0 5
38516: PPUSH
38517: CALL 65762 0 1
38521: ST_TO_ADDR
// tmp := [ ] ;
38522: LD_ADDR_VAR 0 8
38526: PUSH
38527: EMPTY
38528: ST_TO_ADDR
// if mode then
38529: LD_VAR 0 4
38533: IFFALSE 38597
// begin for i := 1 to result do
38535: LD_ADDR_VAR 0 6
38539: PUSH
38540: DOUBLE
38541: LD_INT 1
38543: DEC
38544: ST_TO_ADDR
38545: LD_VAR 0 5
38549: PUSH
38550: FOR_TO
38551: IFFALSE 38585
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
38553: LD_ADDR_VAR 0 8
38557: PUSH
38558: LD_VAR 0 8
38562: PPUSH
38563: LD_VAR 0 5
38567: PUSH
38568: LD_VAR 0 6
38572: ARRAY
38573: PUSH
38574: LD_INT 1
38576: ARRAY
38577: PPUSH
38578: CALL 70486 0 2
38582: ST_TO_ADDR
38583: GO 38550
38585: POP
38586: POP
// result := tmp ;
38587: LD_ADDR_VAR 0 5
38591: PUSH
38592: LD_VAR 0 8
38596: ST_TO_ADDR
// end ; end ;
38597: LD_VAR 0 5
38601: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
38602: LD_INT 0
38604: PPUSH
38605: PPUSH
38606: PPUSH
38607: PPUSH
// if not list then
38608: LD_VAR 0 3
38612: NOT
38613: IFFALSE 38617
// exit ;
38615: GO 39005
// result := [ ] ;
38617: LD_ADDR_VAR 0 6
38621: PUSH
38622: EMPTY
38623: ST_TO_ADDR
// for i in list do
38624: LD_ADDR_VAR 0 7
38628: PUSH
38629: LD_VAR 0 3
38633: PUSH
38634: FOR_IN
38635: IFFALSE 38837
// begin tmp := GetDistUnitXY ( i , x , y ) ;
38637: LD_ADDR_VAR 0 9
38641: PUSH
38642: LD_VAR 0 7
38646: PPUSH
38647: LD_VAR 0 1
38651: PPUSH
38652: LD_VAR 0 2
38656: PPUSH
38657: CALL_OW 297
38661: ST_TO_ADDR
// if not result then
38662: LD_VAR 0 6
38666: NOT
38667: IFFALSE 38693
// result := [ [ i , tmp ] ] else
38669: LD_ADDR_VAR 0 6
38673: PUSH
38674: LD_VAR 0 7
38678: PUSH
38679: LD_VAR 0 9
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: PUSH
38688: EMPTY
38689: LIST
38690: ST_TO_ADDR
38691: GO 38835
// begin if result [ result ] [ 2 ] < tmp then
38693: LD_VAR 0 6
38697: PUSH
38698: LD_VAR 0 6
38702: ARRAY
38703: PUSH
38704: LD_INT 2
38706: ARRAY
38707: PUSH
38708: LD_VAR 0 9
38712: LESS
38713: IFFALSE 38755
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
38715: LD_ADDR_VAR 0 6
38719: PUSH
38720: LD_VAR 0 6
38724: PPUSH
38725: LD_VAR 0 6
38729: PUSH
38730: LD_INT 1
38732: PLUS
38733: PPUSH
38734: LD_VAR 0 7
38738: PUSH
38739: LD_VAR 0 9
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: PPUSH
38748: CALL_OW 2
38752: ST_TO_ADDR
38753: GO 38835
// for j = 1 to result do
38755: LD_ADDR_VAR 0 8
38759: PUSH
38760: DOUBLE
38761: LD_INT 1
38763: DEC
38764: ST_TO_ADDR
38765: LD_VAR 0 6
38769: PUSH
38770: FOR_TO
38771: IFFALSE 38833
// begin if tmp < result [ j ] [ 2 ] then
38773: LD_VAR 0 9
38777: PUSH
38778: LD_VAR 0 6
38782: PUSH
38783: LD_VAR 0 8
38787: ARRAY
38788: PUSH
38789: LD_INT 2
38791: ARRAY
38792: LESS
38793: IFFALSE 38831
// begin result := Insert ( result , j , [ i , tmp ] ) ;
38795: LD_ADDR_VAR 0 6
38799: PUSH
38800: LD_VAR 0 6
38804: PPUSH
38805: LD_VAR 0 8
38809: PPUSH
38810: LD_VAR 0 7
38814: PUSH
38815: LD_VAR 0 9
38819: PUSH
38820: EMPTY
38821: LIST
38822: LIST
38823: PPUSH
38824: CALL_OW 2
38828: ST_TO_ADDR
// break ;
38829: GO 38833
// end ; end ;
38831: GO 38770
38833: POP
38834: POP
// end ; end ;
38835: GO 38634
38837: POP
38838: POP
// if result and not asc then
38839: LD_VAR 0 6
38843: PUSH
38844: LD_VAR 0 4
38848: NOT
38849: AND
38850: IFFALSE 38925
// begin tmp := result ;
38852: LD_ADDR_VAR 0 9
38856: PUSH
38857: LD_VAR 0 6
38861: ST_TO_ADDR
// for i = tmp downto 1 do
38862: LD_ADDR_VAR 0 7
38866: PUSH
38867: DOUBLE
38868: LD_VAR 0 9
38872: INC
38873: ST_TO_ADDR
38874: LD_INT 1
38876: PUSH
38877: FOR_DOWNTO
38878: IFFALSE 38923
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
38880: LD_ADDR_VAR 0 6
38884: PUSH
38885: LD_VAR 0 6
38889: PPUSH
38890: LD_VAR 0 9
38894: PUSH
38895: LD_VAR 0 7
38899: MINUS
38900: PUSH
38901: LD_INT 1
38903: PLUS
38904: PPUSH
38905: LD_VAR 0 9
38909: PUSH
38910: LD_VAR 0 7
38914: ARRAY
38915: PPUSH
38916: CALL_OW 1
38920: ST_TO_ADDR
38921: GO 38877
38923: POP
38924: POP
// end ; tmp := [ ] ;
38925: LD_ADDR_VAR 0 9
38929: PUSH
38930: EMPTY
38931: ST_TO_ADDR
// if mode then
38932: LD_VAR 0 5
38936: IFFALSE 39005
// begin for i = 1 to result do
38938: LD_ADDR_VAR 0 7
38942: PUSH
38943: DOUBLE
38944: LD_INT 1
38946: DEC
38947: ST_TO_ADDR
38948: LD_VAR 0 6
38952: PUSH
38953: FOR_TO
38954: IFFALSE 38993
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
38956: LD_ADDR_VAR 0 9
38960: PUSH
38961: LD_VAR 0 9
38965: PPUSH
38966: LD_VAR 0 7
38970: PPUSH
38971: LD_VAR 0 6
38975: PUSH
38976: LD_VAR 0 7
38980: ARRAY
38981: PUSH
38982: LD_INT 1
38984: ARRAY
38985: PPUSH
38986: CALL_OW 1
38990: ST_TO_ADDR
38991: GO 38953
38993: POP
38994: POP
// result := tmp ;
38995: LD_ADDR_VAR 0 6
38999: PUSH
39000: LD_VAR 0 9
39004: ST_TO_ADDR
// end ; end ;
39005: LD_VAR 0 6
39009: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
39010: LD_INT 0
39012: PPUSH
39013: PPUSH
39014: PPUSH
39015: PPUSH
39016: PPUSH
39017: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
39018: LD_ADDR_VAR 0 5
39022: PUSH
39023: LD_INT 0
39025: PUSH
39026: LD_INT 0
39028: PUSH
39029: LD_INT 0
39031: PUSH
39032: EMPTY
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: LIST
39038: LIST
39039: ST_TO_ADDR
// if not x or not y then
39040: LD_VAR 0 2
39044: NOT
39045: PUSH
39046: LD_VAR 0 3
39050: NOT
39051: OR
39052: IFFALSE 39056
// exit ;
39054: GO 40706
// if not range then
39056: LD_VAR 0 4
39060: NOT
39061: IFFALSE 39071
// range := 10 ;
39063: LD_ADDR_VAR 0 4
39067: PUSH
39068: LD_INT 10
39070: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
39071: LD_ADDR_VAR 0 8
39075: PUSH
39076: LD_INT 81
39078: PUSH
39079: LD_VAR 0 1
39083: PUSH
39084: EMPTY
39085: LIST
39086: LIST
39087: PUSH
39088: LD_INT 92
39090: PUSH
39091: LD_VAR 0 2
39095: PUSH
39096: LD_VAR 0 3
39100: PUSH
39101: LD_VAR 0 4
39105: PUSH
39106: EMPTY
39107: LIST
39108: LIST
39109: LIST
39110: LIST
39111: PUSH
39112: LD_INT 3
39114: PUSH
39115: LD_INT 21
39117: PUSH
39118: LD_INT 3
39120: PUSH
39121: EMPTY
39122: LIST
39123: LIST
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: LIST
39133: PPUSH
39134: CALL_OW 69
39138: ST_TO_ADDR
// if not tmp then
39139: LD_VAR 0 8
39143: NOT
39144: IFFALSE 39148
// exit ;
39146: GO 40706
// for i in tmp do
39148: LD_ADDR_VAR 0 6
39152: PUSH
39153: LD_VAR 0 8
39157: PUSH
39158: FOR_IN
39159: IFFALSE 40681
// begin points := [ 0 , 0 , 0 ] ;
39161: LD_ADDR_VAR 0 9
39165: PUSH
39166: LD_INT 0
39168: PUSH
39169: LD_INT 0
39171: PUSH
39172: LD_INT 0
39174: PUSH
39175: EMPTY
39176: LIST
39177: LIST
39178: LIST
39179: ST_TO_ADDR
// bpoints := 1 ;
39180: LD_ADDR_VAR 0 10
39184: PUSH
39185: LD_INT 1
39187: ST_TO_ADDR
// case GetType ( i ) of unit_human :
39188: LD_VAR 0 6
39192: PPUSH
39193: CALL_OW 247
39197: PUSH
39198: LD_INT 1
39200: DOUBLE
39201: EQUAL
39202: IFTRUE 39206
39204: GO 39784
39206: POP
// begin if GetClass ( i ) = 1 then
39207: LD_VAR 0 6
39211: PPUSH
39212: CALL_OW 257
39216: PUSH
39217: LD_INT 1
39219: EQUAL
39220: IFFALSE 39241
// points := [ 10 , 5 , 3 ] ;
39222: LD_ADDR_VAR 0 9
39226: PUSH
39227: LD_INT 10
39229: PUSH
39230: LD_INT 5
39232: PUSH
39233: LD_INT 3
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: LIST
39240: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
39241: LD_VAR 0 6
39245: PPUSH
39246: CALL_OW 257
39250: PUSH
39251: LD_INT 2
39253: PUSH
39254: LD_INT 3
39256: PUSH
39257: LD_INT 4
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: LIST
39264: IN
39265: IFFALSE 39286
// points := [ 3 , 2 , 1 ] ;
39267: LD_ADDR_VAR 0 9
39271: PUSH
39272: LD_INT 3
39274: PUSH
39275: LD_INT 2
39277: PUSH
39278: LD_INT 1
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: LIST
39285: ST_TO_ADDR
// if GetClass ( i ) = 5 then
39286: LD_VAR 0 6
39290: PPUSH
39291: CALL_OW 257
39295: PUSH
39296: LD_INT 5
39298: EQUAL
39299: IFFALSE 39320
// points := [ 130 , 5 , 2 ] ;
39301: LD_ADDR_VAR 0 9
39305: PUSH
39306: LD_INT 130
39308: PUSH
39309: LD_INT 5
39311: PUSH
39312: LD_INT 2
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: LIST
39319: ST_TO_ADDR
// if GetClass ( i ) = 8 then
39320: LD_VAR 0 6
39324: PPUSH
39325: CALL_OW 257
39329: PUSH
39330: LD_INT 8
39332: EQUAL
39333: IFFALSE 39354
// points := [ 35 , 35 , 30 ] ;
39335: LD_ADDR_VAR 0 9
39339: PUSH
39340: LD_INT 35
39342: PUSH
39343: LD_INT 35
39345: PUSH
39346: LD_INT 30
39348: PUSH
39349: EMPTY
39350: LIST
39351: LIST
39352: LIST
39353: ST_TO_ADDR
// if GetClass ( i ) = 9 then
39354: LD_VAR 0 6
39358: PPUSH
39359: CALL_OW 257
39363: PUSH
39364: LD_INT 9
39366: EQUAL
39367: IFFALSE 39388
// points := [ 20 , 55 , 40 ] ;
39369: LD_ADDR_VAR 0 9
39373: PUSH
39374: LD_INT 20
39376: PUSH
39377: LD_INT 55
39379: PUSH
39380: LD_INT 40
39382: PUSH
39383: EMPTY
39384: LIST
39385: LIST
39386: LIST
39387: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
39388: LD_VAR 0 6
39392: PPUSH
39393: CALL_OW 257
39397: PUSH
39398: LD_INT 12
39400: PUSH
39401: LD_INT 16
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: IN
39408: IFFALSE 39429
// points := [ 5 , 3 , 2 ] ;
39410: LD_ADDR_VAR 0 9
39414: PUSH
39415: LD_INT 5
39417: PUSH
39418: LD_INT 3
39420: PUSH
39421: LD_INT 2
39423: PUSH
39424: EMPTY
39425: LIST
39426: LIST
39427: LIST
39428: ST_TO_ADDR
// if GetClass ( i ) = 17 then
39429: LD_VAR 0 6
39433: PPUSH
39434: CALL_OW 257
39438: PUSH
39439: LD_INT 17
39441: EQUAL
39442: IFFALSE 39463
// points := [ 100 , 50 , 75 ] ;
39444: LD_ADDR_VAR 0 9
39448: PUSH
39449: LD_INT 100
39451: PUSH
39452: LD_INT 50
39454: PUSH
39455: LD_INT 75
39457: PUSH
39458: EMPTY
39459: LIST
39460: LIST
39461: LIST
39462: ST_TO_ADDR
// if GetClass ( i ) = 15 then
39463: LD_VAR 0 6
39467: PPUSH
39468: CALL_OW 257
39472: PUSH
39473: LD_INT 15
39475: EQUAL
39476: IFFALSE 39497
// points := [ 10 , 5 , 3 ] ;
39478: LD_ADDR_VAR 0 9
39482: PUSH
39483: LD_INT 10
39485: PUSH
39486: LD_INT 5
39488: PUSH
39489: LD_INT 3
39491: PUSH
39492: EMPTY
39493: LIST
39494: LIST
39495: LIST
39496: ST_TO_ADDR
// if GetClass ( i ) = 14 then
39497: LD_VAR 0 6
39501: PPUSH
39502: CALL_OW 257
39506: PUSH
39507: LD_INT 14
39509: EQUAL
39510: IFFALSE 39531
// points := [ 10 , 0 , 0 ] ;
39512: LD_ADDR_VAR 0 9
39516: PUSH
39517: LD_INT 10
39519: PUSH
39520: LD_INT 0
39522: PUSH
39523: LD_INT 0
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: LIST
39530: ST_TO_ADDR
// if GetClass ( i ) = 11 then
39531: LD_VAR 0 6
39535: PPUSH
39536: CALL_OW 257
39540: PUSH
39541: LD_INT 11
39543: EQUAL
39544: IFFALSE 39565
// points := [ 30 , 10 , 5 ] ;
39546: LD_ADDR_VAR 0 9
39550: PUSH
39551: LD_INT 30
39553: PUSH
39554: LD_INT 10
39556: PUSH
39557: LD_INT 5
39559: PUSH
39560: EMPTY
39561: LIST
39562: LIST
39563: LIST
39564: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
39565: LD_VAR 0 1
39569: PPUSH
39570: LD_INT 5
39572: PPUSH
39573: CALL_OW 321
39577: PUSH
39578: LD_INT 2
39580: EQUAL
39581: IFFALSE 39598
// bpoints := bpoints * 1.8 ;
39583: LD_ADDR_VAR 0 10
39587: PUSH
39588: LD_VAR 0 10
39592: PUSH
39593: LD_REAL  1.80000000000000E+0000
39596: MUL
39597: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
39598: LD_VAR 0 6
39602: PPUSH
39603: CALL_OW 257
39607: PUSH
39608: LD_INT 1
39610: PUSH
39611: LD_INT 2
39613: PUSH
39614: LD_INT 3
39616: PUSH
39617: LD_INT 4
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: LIST
39624: LIST
39625: IN
39626: PUSH
39627: LD_VAR 0 1
39631: PPUSH
39632: LD_INT 51
39634: PPUSH
39635: CALL_OW 321
39639: PUSH
39640: LD_INT 2
39642: EQUAL
39643: AND
39644: IFFALSE 39661
// bpoints := bpoints * 1.2 ;
39646: LD_ADDR_VAR 0 10
39650: PUSH
39651: LD_VAR 0 10
39655: PUSH
39656: LD_REAL  1.20000000000000E+0000
39659: MUL
39660: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
39661: LD_VAR 0 6
39665: PPUSH
39666: CALL_OW 257
39670: PUSH
39671: LD_INT 5
39673: PUSH
39674: LD_INT 7
39676: PUSH
39677: LD_INT 9
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: LIST
39684: IN
39685: PUSH
39686: LD_VAR 0 1
39690: PPUSH
39691: LD_INT 52
39693: PPUSH
39694: CALL_OW 321
39698: PUSH
39699: LD_INT 2
39701: EQUAL
39702: AND
39703: IFFALSE 39720
// bpoints := bpoints * 1.5 ;
39705: LD_ADDR_VAR 0 10
39709: PUSH
39710: LD_VAR 0 10
39714: PUSH
39715: LD_REAL  1.50000000000000E+0000
39718: MUL
39719: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
39720: LD_VAR 0 1
39724: PPUSH
39725: LD_INT 66
39727: PPUSH
39728: CALL_OW 321
39732: PUSH
39733: LD_INT 2
39735: EQUAL
39736: IFFALSE 39753
// bpoints := bpoints * 1.1 ;
39738: LD_ADDR_VAR 0 10
39742: PUSH
39743: LD_VAR 0 10
39747: PUSH
39748: LD_REAL  1.10000000000000E+0000
39751: MUL
39752: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
39753: LD_ADDR_VAR 0 10
39757: PUSH
39758: LD_VAR 0 10
39762: PUSH
39763: LD_VAR 0 6
39767: PPUSH
39768: LD_INT 1
39770: PPUSH
39771: CALL_OW 259
39775: PUSH
39776: LD_REAL  1.15000000000000E+0000
39779: MUL
39780: MUL
39781: ST_TO_ADDR
// end ; unit_vehicle :
39782: GO 40610
39784: LD_INT 2
39786: DOUBLE
39787: EQUAL
39788: IFTRUE 39792
39790: GO 40598
39792: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
39793: LD_VAR 0 6
39797: PPUSH
39798: CALL_OW 264
39802: PUSH
39803: LD_INT 2
39805: PUSH
39806: LD_INT 42
39808: PUSH
39809: LD_INT 24
39811: PUSH
39812: EMPTY
39813: LIST
39814: LIST
39815: LIST
39816: IN
39817: IFFALSE 39838
// points := [ 25 , 5 , 3 ] ;
39819: LD_ADDR_VAR 0 9
39823: PUSH
39824: LD_INT 25
39826: PUSH
39827: LD_INT 5
39829: PUSH
39830: LD_INT 3
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: LIST
39837: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
39838: LD_VAR 0 6
39842: PPUSH
39843: CALL_OW 264
39847: PUSH
39848: LD_INT 4
39850: PUSH
39851: LD_INT 43
39853: PUSH
39854: LD_INT 25
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: LIST
39861: IN
39862: IFFALSE 39883
// points := [ 40 , 15 , 5 ] ;
39864: LD_ADDR_VAR 0 9
39868: PUSH
39869: LD_INT 40
39871: PUSH
39872: LD_INT 15
39874: PUSH
39875: LD_INT 5
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: LIST
39882: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
39883: LD_VAR 0 6
39887: PPUSH
39888: CALL_OW 264
39892: PUSH
39893: LD_INT 3
39895: PUSH
39896: LD_INT 23
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: IN
39903: IFFALSE 39924
// points := [ 7 , 25 , 8 ] ;
39905: LD_ADDR_VAR 0 9
39909: PUSH
39910: LD_INT 7
39912: PUSH
39913: LD_INT 25
39915: PUSH
39916: LD_INT 8
39918: PUSH
39919: EMPTY
39920: LIST
39921: LIST
39922: LIST
39923: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
39924: LD_VAR 0 6
39928: PPUSH
39929: CALL_OW 264
39933: PUSH
39934: LD_INT 5
39936: PUSH
39937: LD_INT 27
39939: PUSH
39940: LD_INT 44
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: LIST
39947: IN
39948: IFFALSE 39969
// points := [ 14 , 50 , 16 ] ;
39950: LD_ADDR_VAR 0 9
39954: PUSH
39955: LD_INT 14
39957: PUSH
39958: LD_INT 50
39960: PUSH
39961: LD_INT 16
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: LIST
39968: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
39969: LD_VAR 0 6
39973: PPUSH
39974: CALL_OW 264
39978: PUSH
39979: LD_INT 6
39981: PUSH
39982: LD_INT 46
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: IN
39989: IFFALSE 40010
// points := [ 32 , 120 , 70 ] ;
39991: LD_ADDR_VAR 0 9
39995: PUSH
39996: LD_INT 32
39998: PUSH
39999: LD_INT 120
40001: PUSH
40002: LD_INT 70
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: LIST
40009: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
40010: LD_VAR 0 6
40014: PPUSH
40015: CALL_OW 264
40019: PUSH
40020: LD_INT 7
40022: PUSH
40023: LD_INT 28
40025: PUSH
40026: LD_INT 45
40028: PUSH
40029: LD_INT 92
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: LIST
40036: LIST
40037: IN
40038: IFFALSE 40059
// points := [ 35 , 20 , 45 ] ;
40040: LD_ADDR_VAR 0 9
40044: PUSH
40045: LD_INT 35
40047: PUSH
40048: LD_INT 20
40050: PUSH
40051: LD_INT 45
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: LIST
40058: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
40059: LD_VAR 0 6
40063: PPUSH
40064: CALL_OW 264
40068: PUSH
40069: LD_INT 47
40071: PUSH
40072: EMPTY
40073: LIST
40074: IN
40075: IFFALSE 40096
// points := [ 67 , 45 , 75 ] ;
40077: LD_ADDR_VAR 0 9
40081: PUSH
40082: LD_INT 67
40084: PUSH
40085: LD_INT 45
40087: PUSH
40088: LD_INT 75
40090: PUSH
40091: EMPTY
40092: LIST
40093: LIST
40094: LIST
40095: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
40096: LD_VAR 0 6
40100: PPUSH
40101: CALL_OW 264
40105: PUSH
40106: LD_INT 26
40108: PUSH
40109: EMPTY
40110: LIST
40111: IN
40112: IFFALSE 40133
// points := [ 120 , 30 , 80 ] ;
40114: LD_ADDR_VAR 0 9
40118: PUSH
40119: LD_INT 120
40121: PUSH
40122: LD_INT 30
40124: PUSH
40125: LD_INT 80
40127: PUSH
40128: EMPTY
40129: LIST
40130: LIST
40131: LIST
40132: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
40133: LD_VAR 0 6
40137: PPUSH
40138: CALL_OW 264
40142: PUSH
40143: LD_INT 22
40145: PUSH
40146: EMPTY
40147: LIST
40148: IN
40149: IFFALSE 40170
// points := [ 40 , 1 , 1 ] ;
40151: LD_ADDR_VAR 0 9
40155: PUSH
40156: LD_INT 40
40158: PUSH
40159: LD_INT 1
40161: PUSH
40162: LD_INT 1
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: LIST
40169: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
40170: LD_VAR 0 6
40174: PPUSH
40175: CALL_OW 264
40179: PUSH
40180: LD_INT 29
40182: PUSH
40183: EMPTY
40184: LIST
40185: IN
40186: IFFALSE 40207
// points := [ 70 , 200 , 400 ] ;
40188: LD_ADDR_VAR 0 9
40192: PUSH
40193: LD_INT 70
40195: PUSH
40196: LD_INT 200
40198: PUSH
40199: LD_INT 400
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: LIST
40206: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
40207: LD_VAR 0 6
40211: PPUSH
40212: CALL_OW 264
40216: PUSH
40217: LD_INT 14
40219: PUSH
40220: LD_INT 53
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: IN
40227: IFFALSE 40248
// points := [ 40 , 10 , 20 ] ;
40229: LD_ADDR_VAR 0 9
40233: PUSH
40234: LD_INT 40
40236: PUSH
40237: LD_INT 10
40239: PUSH
40240: LD_INT 20
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: LIST
40247: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
40248: LD_VAR 0 6
40252: PPUSH
40253: CALL_OW 264
40257: PUSH
40258: LD_INT 9
40260: PUSH
40261: EMPTY
40262: LIST
40263: IN
40264: IFFALSE 40285
// points := [ 5 , 70 , 20 ] ;
40266: LD_ADDR_VAR 0 9
40270: PUSH
40271: LD_INT 5
40273: PUSH
40274: LD_INT 70
40276: PUSH
40277: LD_INT 20
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: LIST
40284: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
40285: LD_VAR 0 6
40289: PPUSH
40290: CALL_OW 264
40294: PUSH
40295: LD_INT 10
40297: PUSH
40298: EMPTY
40299: LIST
40300: IN
40301: IFFALSE 40322
// points := [ 35 , 110 , 70 ] ;
40303: LD_ADDR_VAR 0 9
40307: PUSH
40308: LD_INT 35
40310: PUSH
40311: LD_INT 110
40313: PUSH
40314: LD_INT 70
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: LIST
40321: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
40322: LD_VAR 0 6
40326: PPUSH
40327: CALL_OW 265
40331: PUSH
40332: LD_INT 25
40334: EQUAL
40335: IFFALSE 40356
// points := [ 80 , 65 , 100 ] ;
40337: LD_ADDR_VAR 0 9
40341: PUSH
40342: LD_INT 80
40344: PUSH
40345: LD_INT 65
40347: PUSH
40348: LD_INT 100
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: LIST
40355: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
40356: LD_VAR 0 6
40360: PPUSH
40361: CALL_OW 263
40365: PUSH
40366: LD_INT 1
40368: EQUAL
40369: IFFALSE 40404
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
40371: LD_ADDR_VAR 0 10
40375: PUSH
40376: LD_VAR 0 10
40380: PUSH
40381: LD_VAR 0 6
40385: PPUSH
40386: CALL_OW 311
40390: PPUSH
40391: LD_INT 3
40393: PPUSH
40394: CALL_OW 259
40398: PUSH
40399: LD_INT 4
40401: MUL
40402: MUL
40403: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
40404: LD_VAR 0 6
40408: PPUSH
40409: CALL_OW 263
40413: PUSH
40414: LD_INT 2
40416: EQUAL
40417: IFFALSE 40468
// begin j := IsControledBy ( i ) ;
40419: LD_ADDR_VAR 0 7
40423: PUSH
40424: LD_VAR 0 6
40428: PPUSH
40429: CALL_OW 312
40433: ST_TO_ADDR
// if j then
40434: LD_VAR 0 7
40438: IFFALSE 40468
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
40440: LD_ADDR_VAR 0 10
40444: PUSH
40445: LD_VAR 0 10
40449: PUSH
40450: LD_VAR 0 7
40454: PPUSH
40455: LD_INT 3
40457: PPUSH
40458: CALL_OW 259
40462: PUSH
40463: LD_INT 3
40465: MUL
40466: MUL
40467: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
40468: LD_VAR 0 6
40472: PPUSH
40473: CALL_OW 264
40477: PUSH
40478: LD_INT 5
40480: PUSH
40481: LD_INT 6
40483: PUSH
40484: LD_INT 46
40486: PUSH
40487: LD_INT 44
40489: PUSH
40490: LD_INT 47
40492: PUSH
40493: LD_INT 45
40495: PUSH
40496: LD_INT 28
40498: PUSH
40499: LD_INT 7
40501: PUSH
40502: LD_INT 27
40504: PUSH
40505: LD_INT 29
40507: PUSH
40508: EMPTY
40509: LIST
40510: LIST
40511: LIST
40512: LIST
40513: LIST
40514: LIST
40515: LIST
40516: LIST
40517: LIST
40518: LIST
40519: IN
40520: PUSH
40521: LD_VAR 0 1
40525: PPUSH
40526: LD_INT 52
40528: PPUSH
40529: CALL_OW 321
40533: PUSH
40534: LD_INT 2
40536: EQUAL
40537: AND
40538: IFFALSE 40555
// bpoints := bpoints * 1.2 ;
40540: LD_ADDR_VAR 0 10
40544: PUSH
40545: LD_VAR 0 10
40549: PUSH
40550: LD_REAL  1.20000000000000E+0000
40553: MUL
40554: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
40555: LD_VAR 0 6
40559: PPUSH
40560: CALL_OW 264
40564: PUSH
40565: LD_INT 6
40567: PUSH
40568: LD_INT 46
40570: PUSH
40571: LD_INT 47
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: LIST
40578: IN
40579: IFFALSE 40596
// bpoints := bpoints * 1.2 ;
40581: LD_ADDR_VAR 0 10
40585: PUSH
40586: LD_VAR 0 10
40590: PUSH
40591: LD_REAL  1.20000000000000E+0000
40594: MUL
40595: ST_TO_ADDR
// end ; unit_building :
40596: GO 40610
40598: LD_INT 3
40600: DOUBLE
40601: EQUAL
40602: IFTRUE 40606
40604: GO 40609
40606: POP
// ; end ;
40607: GO 40610
40609: POP
// for j = 1 to 3 do
40610: LD_ADDR_VAR 0 7
40614: PUSH
40615: DOUBLE
40616: LD_INT 1
40618: DEC
40619: ST_TO_ADDR
40620: LD_INT 3
40622: PUSH
40623: FOR_TO
40624: IFFALSE 40677
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
40626: LD_ADDR_VAR 0 5
40630: PUSH
40631: LD_VAR 0 5
40635: PPUSH
40636: LD_VAR 0 7
40640: PPUSH
40641: LD_VAR 0 5
40645: PUSH
40646: LD_VAR 0 7
40650: ARRAY
40651: PUSH
40652: LD_VAR 0 9
40656: PUSH
40657: LD_VAR 0 7
40661: ARRAY
40662: PUSH
40663: LD_VAR 0 10
40667: MUL
40668: PLUS
40669: PPUSH
40670: CALL_OW 1
40674: ST_TO_ADDR
40675: GO 40623
40677: POP
40678: POP
// end ;
40679: GO 39158
40681: POP
40682: POP
// result := Replace ( result , 4 , tmp ) ;
40683: LD_ADDR_VAR 0 5
40687: PUSH
40688: LD_VAR 0 5
40692: PPUSH
40693: LD_INT 4
40695: PPUSH
40696: LD_VAR 0 8
40700: PPUSH
40701: CALL_OW 1
40705: ST_TO_ADDR
// end ;
40706: LD_VAR 0 5
40710: RET
// export function DangerAtRange ( unit , range ) ; begin
40711: LD_INT 0
40713: PPUSH
// if not unit then
40714: LD_VAR 0 1
40718: NOT
40719: IFFALSE 40723
// exit ;
40721: GO 40768
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
40723: LD_ADDR_VAR 0 3
40727: PUSH
40728: LD_VAR 0 1
40732: PPUSH
40733: CALL_OW 255
40737: PPUSH
40738: LD_VAR 0 1
40742: PPUSH
40743: CALL_OW 250
40747: PPUSH
40748: LD_VAR 0 1
40752: PPUSH
40753: CALL_OW 251
40757: PPUSH
40758: LD_VAR 0 2
40762: PPUSH
40763: CALL 39010 0 4
40767: ST_TO_ADDR
// end ;
40768: LD_VAR 0 3
40772: RET
// export function DangerInArea ( side , area ) ; begin
40773: LD_INT 0
40775: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
40776: LD_ADDR_VAR 0 3
40780: PUSH
40781: LD_VAR 0 2
40785: PPUSH
40786: LD_INT 81
40788: PUSH
40789: LD_VAR 0 1
40793: PUSH
40794: EMPTY
40795: LIST
40796: LIST
40797: PPUSH
40798: CALL_OW 70
40802: ST_TO_ADDR
// end ;
40803: LD_VAR 0 3
40807: RET
// export function IsExtension ( b ) ; begin
40808: LD_INT 0
40810: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
40811: LD_ADDR_VAR 0 2
40815: PUSH
40816: LD_VAR 0 1
40820: PUSH
40821: LD_INT 23
40823: PUSH
40824: LD_INT 20
40826: PUSH
40827: LD_INT 22
40829: PUSH
40830: LD_INT 17
40832: PUSH
40833: LD_INT 24
40835: PUSH
40836: LD_INT 21
40838: PUSH
40839: LD_INT 19
40841: PUSH
40842: LD_INT 16
40844: PUSH
40845: LD_INT 25
40847: PUSH
40848: LD_INT 18
40850: PUSH
40851: EMPTY
40852: LIST
40853: LIST
40854: LIST
40855: LIST
40856: LIST
40857: LIST
40858: LIST
40859: LIST
40860: LIST
40861: LIST
40862: IN
40863: ST_TO_ADDR
// end ;
40864: LD_VAR 0 2
40868: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
40869: LD_INT 0
40871: PPUSH
40872: PPUSH
40873: PPUSH
// result := [ ] ;
40874: LD_ADDR_VAR 0 4
40878: PUSH
40879: EMPTY
40880: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
40881: LD_ADDR_VAR 0 5
40885: PUSH
40886: LD_VAR 0 2
40890: PPUSH
40891: LD_INT 21
40893: PUSH
40894: LD_INT 3
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PPUSH
40901: CALL_OW 70
40905: ST_TO_ADDR
// if not tmp then
40906: LD_VAR 0 5
40910: NOT
40911: IFFALSE 40915
// exit ;
40913: GO 40979
// if checkLink then
40915: LD_VAR 0 3
40919: IFFALSE 40969
// begin for i in tmp do
40921: LD_ADDR_VAR 0 6
40925: PUSH
40926: LD_VAR 0 5
40930: PUSH
40931: FOR_IN
40932: IFFALSE 40967
// if GetBase ( i ) <> base then
40934: LD_VAR 0 6
40938: PPUSH
40939: CALL_OW 274
40943: PUSH
40944: LD_VAR 0 1
40948: NONEQUAL
40949: IFFALSE 40965
// ComLinkToBase ( base , i ) ;
40951: LD_VAR 0 1
40955: PPUSH
40956: LD_VAR 0 6
40960: PPUSH
40961: CALL_OW 169
40965: GO 40931
40967: POP
40968: POP
// end ; result := tmp ;
40969: LD_ADDR_VAR 0 4
40973: PUSH
40974: LD_VAR 0 5
40978: ST_TO_ADDR
// end ;
40979: LD_VAR 0 4
40983: RET
// export function ComComplete ( units , b ) ; var i ; begin
40984: LD_INT 0
40986: PPUSH
40987: PPUSH
// if not units then
40988: LD_VAR 0 1
40992: NOT
40993: IFFALSE 40997
// exit ;
40995: GO 41087
// for i in units do
40997: LD_ADDR_VAR 0 4
41001: PUSH
41002: LD_VAR 0 1
41006: PUSH
41007: FOR_IN
41008: IFFALSE 41085
// if BuildingStatus ( b ) = bs_build then
41010: LD_VAR 0 2
41014: PPUSH
41015: CALL_OW 461
41019: PUSH
41020: LD_INT 1
41022: EQUAL
41023: IFFALSE 41083
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
41025: LD_VAR 0 4
41029: PPUSH
41030: LD_STRING h
41032: PUSH
41033: LD_VAR 0 2
41037: PPUSH
41038: CALL_OW 250
41042: PUSH
41043: LD_VAR 0 2
41047: PPUSH
41048: CALL_OW 251
41052: PUSH
41053: LD_VAR 0 2
41057: PUSH
41058: LD_INT 0
41060: PUSH
41061: LD_INT 0
41063: PUSH
41064: LD_INT 0
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: LIST
41071: LIST
41072: LIST
41073: LIST
41074: LIST
41075: PUSH
41076: EMPTY
41077: LIST
41078: PPUSH
41079: CALL_OW 446
41083: GO 41007
41085: POP
41086: POP
// end ;
41087: LD_VAR 0 3
41091: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
41092: LD_INT 0
41094: PPUSH
41095: PPUSH
41096: PPUSH
41097: PPUSH
41098: PPUSH
41099: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
41100: LD_VAR 0 1
41104: NOT
41105: PUSH
41106: LD_VAR 0 1
41110: PPUSH
41111: CALL_OW 263
41115: PUSH
41116: LD_INT 2
41118: NONEQUAL
41119: OR
41120: IFFALSE 41124
// exit ;
41122: GO 41440
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
41124: LD_ADDR_VAR 0 6
41128: PUSH
41129: LD_INT 22
41131: PUSH
41132: LD_VAR 0 1
41136: PPUSH
41137: CALL_OW 255
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: PUSH
41146: LD_INT 2
41148: PUSH
41149: LD_INT 30
41151: PUSH
41152: LD_INT 36
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PUSH
41159: LD_INT 34
41161: PUSH
41162: LD_INT 31
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: LIST
41173: PUSH
41174: EMPTY
41175: LIST
41176: LIST
41177: PPUSH
41178: CALL_OW 69
41182: ST_TO_ADDR
// if not tmp then
41183: LD_VAR 0 6
41187: NOT
41188: IFFALSE 41192
// exit ;
41190: GO 41440
// result := [ ] ;
41192: LD_ADDR_VAR 0 2
41196: PUSH
41197: EMPTY
41198: ST_TO_ADDR
// for i in tmp do
41199: LD_ADDR_VAR 0 3
41203: PUSH
41204: LD_VAR 0 6
41208: PUSH
41209: FOR_IN
41210: IFFALSE 41281
// begin t := UnitsInside ( i ) ;
41212: LD_ADDR_VAR 0 4
41216: PUSH
41217: LD_VAR 0 3
41221: PPUSH
41222: CALL_OW 313
41226: ST_TO_ADDR
// if t then
41227: LD_VAR 0 4
41231: IFFALSE 41279
// for j in t do
41233: LD_ADDR_VAR 0 7
41237: PUSH
41238: LD_VAR 0 4
41242: PUSH
41243: FOR_IN
41244: IFFALSE 41277
// result := Replace ( result , result + 1 , j ) ;
41246: LD_ADDR_VAR 0 2
41250: PUSH
41251: LD_VAR 0 2
41255: PPUSH
41256: LD_VAR 0 2
41260: PUSH
41261: LD_INT 1
41263: PLUS
41264: PPUSH
41265: LD_VAR 0 7
41269: PPUSH
41270: CALL_OW 1
41274: ST_TO_ADDR
41275: GO 41243
41277: POP
41278: POP
// end ;
41279: GO 41209
41281: POP
41282: POP
// if not result then
41283: LD_VAR 0 2
41287: NOT
41288: IFFALSE 41292
// exit ;
41290: GO 41440
// mech := result [ 1 ] ;
41292: LD_ADDR_VAR 0 5
41296: PUSH
41297: LD_VAR 0 2
41301: PUSH
41302: LD_INT 1
41304: ARRAY
41305: ST_TO_ADDR
// if result > 1 then
41306: LD_VAR 0 2
41310: PUSH
41311: LD_INT 1
41313: GREATER
41314: IFFALSE 41426
// begin for i = 2 to result do
41316: LD_ADDR_VAR 0 3
41320: PUSH
41321: DOUBLE
41322: LD_INT 2
41324: DEC
41325: ST_TO_ADDR
41326: LD_VAR 0 2
41330: PUSH
41331: FOR_TO
41332: IFFALSE 41424
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
41334: LD_ADDR_VAR 0 4
41338: PUSH
41339: LD_VAR 0 2
41343: PUSH
41344: LD_VAR 0 3
41348: ARRAY
41349: PPUSH
41350: LD_INT 3
41352: PPUSH
41353: CALL_OW 259
41357: PUSH
41358: LD_VAR 0 2
41362: PUSH
41363: LD_VAR 0 3
41367: ARRAY
41368: PPUSH
41369: CALL_OW 432
41373: MINUS
41374: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
41375: LD_VAR 0 4
41379: PUSH
41380: LD_VAR 0 5
41384: PPUSH
41385: LD_INT 3
41387: PPUSH
41388: CALL_OW 259
41392: PUSH
41393: LD_VAR 0 5
41397: PPUSH
41398: CALL_OW 432
41402: MINUS
41403: GREATEREQUAL
41404: IFFALSE 41422
// mech := result [ i ] ;
41406: LD_ADDR_VAR 0 5
41410: PUSH
41411: LD_VAR 0 2
41415: PUSH
41416: LD_VAR 0 3
41420: ARRAY
41421: ST_TO_ADDR
// end ;
41422: GO 41331
41424: POP
41425: POP
// end ; ComLinkTo ( vehicle , mech ) ;
41426: LD_VAR 0 1
41430: PPUSH
41431: LD_VAR 0 5
41435: PPUSH
41436: CALL_OW 135
// end ;
41440: LD_VAR 0 2
41444: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
41445: LD_INT 0
41447: PPUSH
41448: PPUSH
41449: PPUSH
41450: PPUSH
41451: PPUSH
41452: PPUSH
41453: PPUSH
41454: PPUSH
41455: PPUSH
41456: PPUSH
41457: PPUSH
41458: PPUSH
41459: PPUSH
// result := [ ] ;
41460: LD_ADDR_VAR 0 7
41464: PUSH
41465: EMPTY
41466: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
41467: LD_VAR 0 1
41471: PPUSH
41472: CALL_OW 266
41476: PUSH
41477: LD_INT 0
41479: PUSH
41480: LD_INT 1
41482: PUSH
41483: EMPTY
41484: LIST
41485: LIST
41486: IN
41487: NOT
41488: IFFALSE 41492
// exit ;
41490: GO 43126
// if name then
41492: LD_VAR 0 3
41496: IFFALSE 41512
// SetBName ( base_dep , name ) ;
41498: LD_VAR 0 1
41502: PPUSH
41503: LD_VAR 0 3
41507: PPUSH
41508: CALL_OW 500
// base := GetBase ( base_dep ) ;
41512: LD_ADDR_VAR 0 15
41516: PUSH
41517: LD_VAR 0 1
41521: PPUSH
41522: CALL_OW 274
41526: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
41527: LD_ADDR_VAR 0 16
41531: PUSH
41532: LD_VAR 0 1
41536: PPUSH
41537: CALL_OW 255
41541: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
41542: LD_ADDR_VAR 0 17
41546: PUSH
41547: LD_VAR 0 1
41551: PPUSH
41552: CALL_OW 248
41556: ST_TO_ADDR
// if sources then
41557: LD_VAR 0 5
41561: IFFALSE 41608
// for i = 1 to 3 do
41563: LD_ADDR_VAR 0 8
41567: PUSH
41568: DOUBLE
41569: LD_INT 1
41571: DEC
41572: ST_TO_ADDR
41573: LD_INT 3
41575: PUSH
41576: FOR_TO
41577: IFFALSE 41606
// AddResourceType ( base , i , sources [ i ] ) ;
41579: LD_VAR 0 15
41583: PPUSH
41584: LD_VAR 0 8
41588: PPUSH
41589: LD_VAR 0 5
41593: PUSH
41594: LD_VAR 0 8
41598: ARRAY
41599: PPUSH
41600: CALL_OW 276
41604: GO 41576
41606: POP
41607: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
41608: LD_ADDR_VAR 0 18
41612: PUSH
41613: LD_VAR 0 15
41617: PPUSH
41618: LD_VAR 0 2
41622: PPUSH
41623: LD_INT 1
41625: PPUSH
41626: CALL 40869 0 3
41630: ST_TO_ADDR
// InitHc ;
41631: CALL_OW 19
// InitUc ;
41635: CALL_OW 18
// uc_side := side ;
41639: LD_ADDR_OWVAR 20
41643: PUSH
41644: LD_VAR 0 16
41648: ST_TO_ADDR
// uc_nation := nation ;
41649: LD_ADDR_OWVAR 21
41653: PUSH
41654: LD_VAR 0 17
41658: ST_TO_ADDR
// if buildings then
41659: LD_VAR 0 18
41663: IFFALSE 42985
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
41665: LD_ADDR_VAR 0 19
41669: PUSH
41670: LD_VAR 0 18
41674: PPUSH
41675: LD_INT 2
41677: PUSH
41678: LD_INT 30
41680: PUSH
41681: LD_INT 29
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: LD_INT 30
41690: PUSH
41691: LD_INT 30
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: LIST
41702: PPUSH
41703: CALL_OW 72
41707: ST_TO_ADDR
// if tmp then
41708: LD_VAR 0 19
41712: IFFALSE 41760
// for i in tmp do
41714: LD_ADDR_VAR 0 8
41718: PUSH
41719: LD_VAR 0 19
41723: PUSH
41724: FOR_IN
41725: IFFALSE 41758
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
41727: LD_VAR 0 8
41731: PPUSH
41732: CALL_OW 250
41736: PPUSH
41737: LD_VAR 0 8
41741: PPUSH
41742: CALL_OW 251
41746: PPUSH
41747: LD_VAR 0 16
41751: PPUSH
41752: CALL_OW 441
41756: GO 41724
41758: POP
41759: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
41760: LD_VAR 0 18
41764: PPUSH
41765: LD_INT 2
41767: PUSH
41768: LD_INT 30
41770: PUSH
41771: LD_INT 32
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: PUSH
41778: LD_INT 30
41780: PUSH
41781: LD_INT 33
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: LIST
41792: PPUSH
41793: CALL_OW 72
41797: IFFALSE 41885
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
41799: LD_ADDR_VAR 0 8
41803: PUSH
41804: LD_VAR 0 18
41808: PPUSH
41809: LD_INT 2
41811: PUSH
41812: LD_INT 30
41814: PUSH
41815: LD_INT 32
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 30
41824: PUSH
41825: LD_INT 33
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: LIST
41836: PPUSH
41837: CALL_OW 72
41841: PUSH
41842: FOR_IN
41843: IFFALSE 41883
// begin if not GetBWeapon ( i ) then
41845: LD_VAR 0 8
41849: PPUSH
41850: CALL_OW 269
41854: NOT
41855: IFFALSE 41881
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
41857: LD_VAR 0 8
41861: PPUSH
41862: LD_VAR 0 8
41866: PPUSH
41867: LD_VAR 0 2
41871: PPUSH
41872: CALL 43131 0 2
41876: PPUSH
41877: CALL_OW 431
// end ;
41881: GO 41842
41883: POP
41884: POP
// end ; for i = 1 to personel do
41885: LD_ADDR_VAR 0 8
41889: PUSH
41890: DOUBLE
41891: LD_INT 1
41893: DEC
41894: ST_TO_ADDR
41895: LD_VAR 0 6
41899: PUSH
41900: FOR_TO
41901: IFFALSE 42965
// begin if i > 4 then
41903: LD_VAR 0 8
41907: PUSH
41908: LD_INT 4
41910: GREATER
41911: IFFALSE 41915
// break ;
41913: GO 42965
// case i of 1 :
41915: LD_VAR 0 8
41919: PUSH
41920: LD_INT 1
41922: DOUBLE
41923: EQUAL
41924: IFTRUE 41928
41926: GO 42008
41928: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
41929: LD_ADDR_VAR 0 12
41933: PUSH
41934: LD_VAR 0 18
41938: PPUSH
41939: LD_INT 22
41941: PUSH
41942: LD_VAR 0 16
41946: PUSH
41947: EMPTY
41948: LIST
41949: LIST
41950: PUSH
41951: LD_INT 58
41953: PUSH
41954: EMPTY
41955: LIST
41956: PUSH
41957: LD_INT 2
41959: PUSH
41960: LD_INT 30
41962: PUSH
41963: LD_INT 32
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: PUSH
41970: LD_INT 30
41972: PUSH
41973: LD_INT 4
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: PUSH
41980: LD_INT 30
41982: PUSH
41983: LD_INT 5
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: LIST
41994: LIST
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: LIST
42000: PPUSH
42001: CALL_OW 72
42005: ST_TO_ADDR
42006: GO 42230
42008: LD_INT 2
42010: DOUBLE
42011: EQUAL
42012: IFTRUE 42016
42014: GO 42078
42016: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
42017: LD_ADDR_VAR 0 12
42021: PUSH
42022: LD_VAR 0 18
42026: PPUSH
42027: LD_INT 22
42029: PUSH
42030: LD_VAR 0 16
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: LD_INT 2
42041: PUSH
42042: LD_INT 30
42044: PUSH
42045: LD_INT 0
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: PUSH
42052: LD_INT 30
42054: PUSH
42055: LD_INT 1
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: EMPTY
42063: LIST
42064: LIST
42065: LIST
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PPUSH
42071: CALL_OW 72
42075: ST_TO_ADDR
42076: GO 42230
42078: LD_INT 3
42080: DOUBLE
42081: EQUAL
42082: IFTRUE 42086
42084: GO 42148
42086: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
42087: LD_ADDR_VAR 0 12
42091: PUSH
42092: LD_VAR 0 18
42096: PPUSH
42097: LD_INT 22
42099: PUSH
42100: LD_VAR 0 16
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: LD_INT 2
42111: PUSH
42112: LD_INT 30
42114: PUSH
42115: LD_INT 2
42117: PUSH
42118: EMPTY
42119: LIST
42120: LIST
42121: PUSH
42122: LD_INT 30
42124: PUSH
42125: LD_INT 3
42127: PUSH
42128: EMPTY
42129: LIST
42130: LIST
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: LIST
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: PPUSH
42141: CALL_OW 72
42145: ST_TO_ADDR
42146: GO 42230
42148: LD_INT 4
42150: DOUBLE
42151: EQUAL
42152: IFTRUE 42156
42154: GO 42229
42156: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
42157: LD_ADDR_VAR 0 12
42161: PUSH
42162: LD_VAR 0 18
42166: PPUSH
42167: LD_INT 22
42169: PUSH
42170: LD_VAR 0 16
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: PUSH
42179: LD_INT 2
42181: PUSH
42182: LD_INT 30
42184: PUSH
42185: LD_INT 6
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: LD_INT 30
42194: PUSH
42195: LD_INT 7
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: PUSH
42202: LD_INT 30
42204: PUSH
42205: LD_INT 8
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: EMPTY
42213: LIST
42214: LIST
42215: LIST
42216: LIST
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: PPUSH
42222: CALL_OW 72
42226: ST_TO_ADDR
42227: GO 42230
42229: POP
// if i = 1 then
42230: LD_VAR 0 8
42234: PUSH
42235: LD_INT 1
42237: EQUAL
42238: IFFALSE 42349
// begin tmp := [ ] ;
42240: LD_ADDR_VAR 0 19
42244: PUSH
42245: EMPTY
42246: ST_TO_ADDR
// for j in f do
42247: LD_ADDR_VAR 0 9
42251: PUSH
42252: LD_VAR 0 12
42256: PUSH
42257: FOR_IN
42258: IFFALSE 42331
// if GetBType ( j ) = b_bunker then
42260: LD_VAR 0 9
42264: PPUSH
42265: CALL_OW 266
42269: PUSH
42270: LD_INT 32
42272: EQUAL
42273: IFFALSE 42300
// tmp := Insert ( tmp , 1 , j ) else
42275: LD_ADDR_VAR 0 19
42279: PUSH
42280: LD_VAR 0 19
42284: PPUSH
42285: LD_INT 1
42287: PPUSH
42288: LD_VAR 0 9
42292: PPUSH
42293: CALL_OW 2
42297: ST_TO_ADDR
42298: GO 42329
// tmp := Insert ( tmp , tmp + 1 , j ) ;
42300: LD_ADDR_VAR 0 19
42304: PUSH
42305: LD_VAR 0 19
42309: PPUSH
42310: LD_VAR 0 19
42314: PUSH
42315: LD_INT 1
42317: PLUS
42318: PPUSH
42319: LD_VAR 0 9
42323: PPUSH
42324: CALL_OW 2
42328: ST_TO_ADDR
42329: GO 42257
42331: POP
42332: POP
// if tmp then
42333: LD_VAR 0 19
42337: IFFALSE 42349
// f := tmp ;
42339: LD_ADDR_VAR 0 12
42343: PUSH
42344: LD_VAR 0 19
42348: ST_TO_ADDR
// end ; x := personel [ i ] ;
42349: LD_ADDR_VAR 0 13
42353: PUSH
42354: LD_VAR 0 6
42358: PUSH
42359: LD_VAR 0 8
42363: ARRAY
42364: ST_TO_ADDR
// if x = - 1 then
42365: LD_VAR 0 13
42369: PUSH
42370: LD_INT 1
42372: NEG
42373: EQUAL
42374: IFFALSE 42583
// begin for j in f do
42376: LD_ADDR_VAR 0 9
42380: PUSH
42381: LD_VAR 0 12
42385: PUSH
42386: FOR_IN
42387: IFFALSE 42579
// repeat InitHc ;
42389: CALL_OW 19
// if GetBType ( j ) = b_barracks then
42393: LD_VAR 0 9
42397: PPUSH
42398: CALL_OW 266
42402: PUSH
42403: LD_INT 5
42405: EQUAL
42406: IFFALSE 42476
// begin if UnitsInside ( j ) < 3 then
42408: LD_VAR 0 9
42412: PPUSH
42413: CALL_OW 313
42417: PUSH
42418: LD_INT 3
42420: LESS
42421: IFFALSE 42457
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42423: LD_INT 0
42425: PPUSH
42426: LD_INT 5
42428: PUSH
42429: LD_INT 8
42431: PUSH
42432: LD_INT 9
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: LIST
42439: PUSH
42440: LD_VAR 0 17
42444: ARRAY
42445: PPUSH
42446: LD_VAR 0 4
42450: PPUSH
42451: CALL_OW 380
42455: GO 42474
// PrepareHuman ( false , i , skill ) ;
42457: LD_INT 0
42459: PPUSH
42460: LD_VAR 0 8
42464: PPUSH
42465: LD_VAR 0 4
42469: PPUSH
42470: CALL_OW 380
// end else
42474: GO 42493
// PrepareHuman ( false , i , skill ) ;
42476: LD_INT 0
42478: PPUSH
42479: LD_VAR 0 8
42483: PPUSH
42484: LD_VAR 0 4
42488: PPUSH
42489: CALL_OW 380
// un := CreateHuman ;
42493: LD_ADDR_VAR 0 14
42497: PUSH
42498: CALL_OW 44
42502: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42503: LD_ADDR_VAR 0 7
42507: PUSH
42508: LD_VAR 0 7
42512: PPUSH
42513: LD_INT 1
42515: PPUSH
42516: LD_VAR 0 14
42520: PPUSH
42521: CALL_OW 2
42525: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
42526: LD_VAR 0 14
42530: PPUSH
42531: LD_VAR 0 9
42535: PPUSH
42536: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
42540: LD_VAR 0 9
42544: PPUSH
42545: CALL_OW 313
42549: PUSH
42550: LD_INT 6
42552: EQUAL
42553: PUSH
42554: LD_VAR 0 9
42558: PPUSH
42559: CALL_OW 266
42563: PUSH
42564: LD_INT 32
42566: PUSH
42567: LD_INT 31
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: IN
42574: OR
42575: IFFALSE 42389
42577: GO 42386
42579: POP
42580: POP
// end else
42581: GO 42963
// for j = 1 to x do
42583: LD_ADDR_VAR 0 9
42587: PUSH
42588: DOUBLE
42589: LD_INT 1
42591: DEC
42592: ST_TO_ADDR
42593: LD_VAR 0 13
42597: PUSH
42598: FOR_TO
42599: IFFALSE 42961
// begin InitHc ;
42601: CALL_OW 19
// if not f then
42605: LD_VAR 0 12
42609: NOT
42610: IFFALSE 42699
// begin PrepareHuman ( false , i , skill ) ;
42612: LD_INT 0
42614: PPUSH
42615: LD_VAR 0 8
42619: PPUSH
42620: LD_VAR 0 4
42624: PPUSH
42625: CALL_OW 380
// un := CreateHuman ;
42629: LD_ADDR_VAR 0 14
42633: PUSH
42634: CALL_OW 44
42638: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42639: LD_ADDR_VAR 0 7
42643: PUSH
42644: LD_VAR 0 7
42648: PPUSH
42649: LD_INT 1
42651: PPUSH
42652: LD_VAR 0 14
42656: PPUSH
42657: CALL_OW 2
42661: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42662: LD_VAR 0 14
42666: PPUSH
42667: LD_VAR 0 1
42671: PPUSH
42672: CALL_OW 250
42676: PPUSH
42677: LD_VAR 0 1
42681: PPUSH
42682: CALL_OW 251
42686: PPUSH
42687: LD_INT 10
42689: PPUSH
42690: LD_INT 0
42692: PPUSH
42693: CALL_OW 50
// continue ;
42697: GO 42598
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
42699: LD_VAR 0 12
42703: PUSH
42704: LD_INT 1
42706: ARRAY
42707: PPUSH
42708: CALL_OW 313
42712: PUSH
42713: LD_VAR 0 12
42717: PUSH
42718: LD_INT 1
42720: ARRAY
42721: PPUSH
42722: CALL_OW 266
42726: PUSH
42727: LD_INT 32
42729: PUSH
42730: LD_INT 31
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: IN
42737: AND
42738: PUSH
42739: LD_VAR 0 12
42743: PUSH
42744: LD_INT 1
42746: ARRAY
42747: PPUSH
42748: CALL_OW 313
42752: PUSH
42753: LD_INT 6
42755: EQUAL
42756: OR
42757: IFFALSE 42777
// f := Delete ( f , 1 ) ;
42759: LD_ADDR_VAR 0 12
42763: PUSH
42764: LD_VAR 0 12
42768: PPUSH
42769: LD_INT 1
42771: PPUSH
42772: CALL_OW 3
42776: ST_TO_ADDR
// if not f then
42777: LD_VAR 0 12
42781: NOT
42782: IFFALSE 42800
// begin x := x + 2 ;
42784: LD_ADDR_VAR 0 13
42788: PUSH
42789: LD_VAR 0 13
42793: PUSH
42794: LD_INT 2
42796: PLUS
42797: ST_TO_ADDR
// continue ;
42798: GO 42598
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
42800: LD_VAR 0 12
42804: PUSH
42805: LD_INT 1
42807: ARRAY
42808: PPUSH
42809: CALL_OW 266
42813: PUSH
42814: LD_INT 5
42816: EQUAL
42817: IFFALSE 42891
// begin if UnitsInside ( f [ 1 ] ) < 3 then
42819: LD_VAR 0 12
42823: PUSH
42824: LD_INT 1
42826: ARRAY
42827: PPUSH
42828: CALL_OW 313
42832: PUSH
42833: LD_INT 3
42835: LESS
42836: IFFALSE 42872
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42838: LD_INT 0
42840: PPUSH
42841: LD_INT 5
42843: PUSH
42844: LD_INT 8
42846: PUSH
42847: LD_INT 9
42849: PUSH
42850: EMPTY
42851: LIST
42852: LIST
42853: LIST
42854: PUSH
42855: LD_VAR 0 17
42859: ARRAY
42860: PPUSH
42861: LD_VAR 0 4
42865: PPUSH
42866: CALL_OW 380
42870: GO 42889
// PrepareHuman ( false , i , skill ) ;
42872: LD_INT 0
42874: PPUSH
42875: LD_VAR 0 8
42879: PPUSH
42880: LD_VAR 0 4
42884: PPUSH
42885: CALL_OW 380
// end else
42889: GO 42908
// PrepareHuman ( false , i , skill ) ;
42891: LD_INT 0
42893: PPUSH
42894: LD_VAR 0 8
42898: PPUSH
42899: LD_VAR 0 4
42903: PPUSH
42904: CALL_OW 380
// un := CreateHuman ;
42908: LD_ADDR_VAR 0 14
42912: PUSH
42913: CALL_OW 44
42917: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42918: LD_ADDR_VAR 0 7
42922: PUSH
42923: LD_VAR 0 7
42927: PPUSH
42928: LD_INT 1
42930: PPUSH
42931: LD_VAR 0 14
42935: PPUSH
42936: CALL_OW 2
42940: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
42941: LD_VAR 0 14
42945: PPUSH
42946: LD_VAR 0 12
42950: PUSH
42951: LD_INT 1
42953: ARRAY
42954: PPUSH
42955: CALL_OW 52
// end ;
42959: GO 42598
42961: POP
42962: POP
// end ;
42963: GO 41900
42965: POP
42966: POP
// result := result ^ buildings ;
42967: LD_ADDR_VAR 0 7
42971: PUSH
42972: LD_VAR 0 7
42976: PUSH
42977: LD_VAR 0 18
42981: ADD
42982: ST_TO_ADDR
// end else
42983: GO 43126
// begin for i = 1 to personel do
42985: LD_ADDR_VAR 0 8
42989: PUSH
42990: DOUBLE
42991: LD_INT 1
42993: DEC
42994: ST_TO_ADDR
42995: LD_VAR 0 6
42999: PUSH
43000: FOR_TO
43001: IFFALSE 43124
// begin if i > 4 then
43003: LD_VAR 0 8
43007: PUSH
43008: LD_INT 4
43010: GREATER
43011: IFFALSE 43015
// break ;
43013: GO 43124
// x := personel [ i ] ;
43015: LD_ADDR_VAR 0 13
43019: PUSH
43020: LD_VAR 0 6
43024: PUSH
43025: LD_VAR 0 8
43029: ARRAY
43030: ST_TO_ADDR
// if x = - 1 then
43031: LD_VAR 0 13
43035: PUSH
43036: LD_INT 1
43038: NEG
43039: EQUAL
43040: IFFALSE 43044
// continue ;
43042: GO 43000
// PrepareHuman ( false , i , skill ) ;
43044: LD_INT 0
43046: PPUSH
43047: LD_VAR 0 8
43051: PPUSH
43052: LD_VAR 0 4
43056: PPUSH
43057: CALL_OW 380
// un := CreateHuman ;
43061: LD_ADDR_VAR 0 14
43065: PUSH
43066: CALL_OW 44
43070: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43071: LD_VAR 0 14
43075: PPUSH
43076: LD_VAR 0 1
43080: PPUSH
43081: CALL_OW 250
43085: PPUSH
43086: LD_VAR 0 1
43090: PPUSH
43091: CALL_OW 251
43095: PPUSH
43096: LD_INT 10
43098: PPUSH
43099: LD_INT 0
43101: PPUSH
43102: CALL_OW 50
// result := result ^ un ;
43106: LD_ADDR_VAR 0 7
43110: PUSH
43111: LD_VAR 0 7
43115: PUSH
43116: LD_VAR 0 14
43120: ADD
43121: ST_TO_ADDR
// end ;
43122: GO 43000
43124: POP
43125: POP
// end ; end ;
43126: LD_VAR 0 7
43130: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
43131: LD_INT 0
43133: PPUSH
43134: PPUSH
43135: PPUSH
43136: PPUSH
43137: PPUSH
43138: PPUSH
43139: PPUSH
43140: PPUSH
43141: PPUSH
43142: PPUSH
43143: PPUSH
43144: PPUSH
43145: PPUSH
43146: PPUSH
43147: PPUSH
43148: PPUSH
// result := false ;
43149: LD_ADDR_VAR 0 3
43153: PUSH
43154: LD_INT 0
43156: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
43157: LD_VAR 0 1
43161: NOT
43162: PUSH
43163: LD_VAR 0 1
43167: PPUSH
43168: CALL_OW 266
43172: PUSH
43173: LD_INT 32
43175: PUSH
43176: LD_INT 33
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: IN
43183: NOT
43184: OR
43185: IFFALSE 43189
// exit ;
43187: GO 44298
// nat := GetNation ( tower ) ;
43189: LD_ADDR_VAR 0 12
43193: PUSH
43194: LD_VAR 0 1
43198: PPUSH
43199: CALL_OW 248
43203: ST_TO_ADDR
// side := GetSide ( tower ) ;
43204: LD_ADDR_VAR 0 16
43208: PUSH
43209: LD_VAR 0 1
43213: PPUSH
43214: CALL_OW 255
43218: ST_TO_ADDR
// x := GetX ( tower ) ;
43219: LD_ADDR_VAR 0 10
43223: PUSH
43224: LD_VAR 0 1
43228: PPUSH
43229: CALL_OW 250
43233: ST_TO_ADDR
// y := GetY ( tower ) ;
43234: LD_ADDR_VAR 0 11
43238: PUSH
43239: LD_VAR 0 1
43243: PPUSH
43244: CALL_OW 251
43248: ST_TO_ADDR
// if not x or not y then
43249: LD_VAR 0 10
43253: NOT
43254: PUSH
43255: LD_VAR 0 11
43259: NOT
43260: OR
43261: IFFALSE 43265
// exit ;
43263: GO 44298
// weapon := 0 ;
43265: LD_ADDR_VAR 0 18
43269: PUSH
43270: LD_INT 0
43272: ST_TO_ADDR
// fac_list := [ ] ;
43273: LD_ADDR_VAR 0 17
43277: PUSH
43278: EMPTY
43279: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
43280: LD_ADDR_VAR 0 6
43284: PUSH
43285: LD_VAR 0 1
43289: PPUSH
43290: CALL_OW 274
43294: PPUSH
43295: LD_VAR 0 2
43299: PPUSH
43300: LD_INT 0
43302: PPUSH
43303: CALL 40869 0 3
43307: PPUSH
43308: LD_INT 30
43310: PUSH
43311: LD_INT 3
43313: PUSH
43314: EMPTY
43315: LIST
43316: LIST
43317: PPUSH
43318: CALL_OW 72
43322: ST_TO_ADDR
// if not factories then
43323: LD_VAR 0 6
43327: NOT
43328: IFFALSE 43332
// exit ;
43330: GO 44298
// for i in factories do
43332: LD_ADDR_VAR 0 8
43336: PUSH
43337: LD_VAR 0 6
43341: PUSH
43342: FOR_IN
43343: IFFALSE 43368
// fac_list := fac_list union AvailableWeaponList ( i ) ;
43345: LD_ADDR_VAR 0 17
43349: PUSH
43350: LD_VAR 0 17
43354: PUSH
43355: LD_VAR 0 8
43359: PPUSH
43360: CALL_OW 478
43364: UNION
43365: ST_TO_ADDR
43366: GO 43342
43368: POP
43369: POP
// if not fac_list then
43370: LD_VAR 0 17
43374: NOT
43375: IFFALSE 43379
// exit ;
43377: GO 44298
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
43379: LD_ADDR_VAR 0 5
43383: PUSH
43384: LD_INT 4
43386: PUSH
43387: LD_INT 5
43389: PUSH
43390: LD_INT 9
43392: PUSH
43393: LD_INT 10
43395: PUSH
43396: LD_INT 6
43398: PUSH
43399: LD_INT 7
43401: PUSH
43402: LD_INT 11
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: LIST
43409: LIST
43410: LIST
43411: LIST
43412: LIST
43413: PUSH
43414: LD_INT 27
43416: PUSH
43417: LD_INT 28
43419: PUSH
43420: LD_INT 26
43422: PUSH
43423: LD_INT 30
43425: PUSH
43426: EMPTY
43427: LIST
43428: LIST
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 43
43434: PUSH
43435: LD_INT 44
43437: PUSH
43438: LD_INT 46
43440: PUSH
43441: LD_INT 45
43443: PUSH
43444: LD_INT 47
43446: PUSH
43447: LD_INT 49
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: LIST
43454: LIST
43455: LIST
43456: LIST
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: LIST
43462: PUSH
43463: LD_VAR 0 12
43467: ARRAY
43468: ST_TO_ADDR
// list := list isect fac_list ;
43469: LD_ADDR_VAR 0 5
43473: PUSH
43474: LD_VAR 0 5
43478: PUSH
43479: LD_VAR 0 17
43483: ISECT
43484: ST_TO_ADDR
// if not list then
43485: LD_VAR 0 5
43489: NOT
43490: IFFALSE 43494
// exit ;
43492: GO 44298
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
43494: LD_VAR 0 12
43498: PUSH
43499: LD_INT 3
43501: EQUAL
43502: PUSH
43503: LD_INT 49
43505: PUSH
43506: LD_VAR 0 5
43510: IN
43511: AND
43512: PUSH
43513: LD_INT 31
43515: PPUSH
43516: LD_VAR 0 16
43520: PPUSH
43521: CALL_OW 321
43525: PUSH
43526: LD_INT 2
43528: EQUAL
43529: AND
43530: IFFALSE 43590
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
43532: LD_INT 22
43534: PUSH
43535: LD_VAR 0 16
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: PUSH
43544: LD_INT 35
43546: PUSH
43547: LD_INT 49
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: LD_INT 91
43556: PUSH
43557: LD_VAR 0 1
43561: PUSH
43562: LD_INT 10
43564: PUSH
43565: EMPTY
43566: LIST
43567: LIST
43568: LIST
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: LIST
43574: PPUSH
43575: CALL_OW 69
43579: NOT
43580: IFFALSE 43590
// weapon := ru_time_lapser ;
43582: LD_ADDR_VAR 0 18
43586: PUSH
43587: LD_INT 49
43589: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
43590: LD_VAR 0 12
43594: PUSH
43595: LD_INT 1
43597: PUSH
43598: LD_INT 2
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: IN
43605: PUSH
43606: LD_INT 11
43608: PUSH
43609: LD_VAR 0 5
43613: IN
43614: PUSH
43615: LD_INT 30
43617: PUSH
43618: LD_VAR 0 5
43622: IN
43623: OR
43624: AND
43625: PUSH
43626: LD_INT 6
43628: PPUSH
43629: LD_VAR 0 16
43633: PPUSH
43634: CALL_OW 321
43638: PUSH
43639: LD_INT 2
43641: EQUAL
43642: AND
43643: IFFALSE 43808
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
43645: LD_INT 22
43647: PUSH
43648: LD_VAR 0 16
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: PUSH
43657: LD_INT 2
43659: PUSH
43660: LD_INT 35
43662: PUSH
43663: LD_INT 11
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: PUSH
43670: LD_INT 35
43672: PUSH
43673: LD_INT 30
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: LIST
43684: PUSH
43685: LD_INT 91
43687: PUSH
43688: LD_VAR 0 1
43692: PUSH
43693: LD_INT 18
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: LIST
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: LIST
43705: PPUSH
43706: CALL_OW 69
43710: NOT
43711: PUSH
43712: LD_INT 22
43714: PUSH
43715: LD_VAR 0 16
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: PUSH
43724: LD_INT 2
43726: PUSH
43727: LD_INT 30
43729: PUSH
43730: LD_INT 32
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: PUSH
43737: LD_INT 30
43739: PUSH
43740: LD_INT 33
43742: PUSH
43743: EMPTY
43744: LIST
43745: LIST
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 91
43754: PUSH
43755: LD_VAR 0 1
43759: PUSH
43760: LD_INT 12
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: LIST
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: LIST
43772: PUSH
43773: EMPTY
43774: LIST
43775: PPUSH
43776: CALL_OW 69
43780: PUSH
43781: LD_INT 2
43783: GREATER
43784: AND
43785: IFFALSE 43808
// weapon := [ us_radar , ar_radar ] [ nat ] ;
43787: LD_ADDR_VAR 0 18
43791: PUSH
43792: LD_INT 11
43794: PUSH
43795: LD_INT 30
43797: PUSH
43798: EMPTY
43799: LIST
43800: LIST
43801: PUSH
43802: LD_VAR 0 12
43806: ARRAY
43807: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
43808: LD_VAR 0 18
43812: NOT
43813: PUSH
43814: LD_INT 40
43816: PPUSH
43817: LD_VAR 0 16
43821: PPUSH
43822: CALL_OW 321
43826: PUSH
43827: LD_INT 2
43829: EQUAL
43830: AND
43831: PUSH
43832: LD_INT 7
43834: PUSH
43835: LD_VAR 0 5
43839: IN
43840: PUSH
43841: LD_INT 28
43843: PUSH
43844: LD_VAR 0 5
43848: IN
43849: OR
43850: PUSH
43851: LD_INT 45
43853: PUSH
43854: LD_VAR 0 5
43858: IN
43859: OR
43860: AND
43861: IFFALSE 44115
// begin hex := GetHexInfo ( x , y ) ;
43863: LD_ADDR_VAR 0 4
43867: PUSH
43868: LD_VAR 0 10
43872: PPUSH
43873: LD_VAR 0 11
43877: PPUSH
43878: CALL_OW 546
43882: ST_TO_ADDR
// if hex [ 1 ] then
43883: LD_VAR 0 4
43887: PUSH
43888: LD_INT 1
43890: ARRAY
43891: IFFALSE 43895
// exit ;
43893: GO 44298
// height := hex [ 2 ] ;
43895: LD_ADDR_VAR 0 15
43899: PUSH
43900: LD_VAR 0 4
43904: PUSH
43905: LD_INT 2
43907: ARRAY
43908: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
43909: LD_ADDR_VAR 0 14
43913: PUSH
43914: LD_INT 0
43916: PUSH
43917: LD_INT 2
43919: PUSH
43920: LD_INT 3
43922: PUSH
43923: LD_INT 5
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: LIST
43930: LIST
43931: ST_TO_ADDR
// for i in tmp do
43932: LD_ADDR_VAR 0 8
43936: PUSH
43937: LD_VAR 0 14
43941: PUSH
43942: FOR_IN
43943: IFFALSE 44113
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
43945: LD_ADDR_VAR 0 9
43949: PUSH
43950: LD_VAR 0 10
43954: PPUSH
43955: LD_VAR 0 8
43959: PPUSH
43960: LD_INT 5
43962: PPUSH
43963: CALL_OW 272
43967: PUSH
43968: LD_VAR 0 11
43972: PPUSH
43973: LD_VAR 0 8
43977: PPUSH
43978: LD_INT 5
43980: PPUSH
43981: CALL_OW 273
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
43990: LD_VAR 0 9
43994: PUSH
43995: LD_INT 1
43997: ARRAY
43998: PPUSH
43999: LD_VAR 0 9
44003: PUSH
44004: LD_INT 2
44006: ARRAY
44007: PPUSH
44008: CALL_OW 488
44012: IFFALSE 44111
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
44014: LD_ADDR_VAR 0 4
44018: PUSH
44019: LD_VAR 0 9
44023: PUSH
44024: LD_INT 1
44026: ARRAY
44027: PPUSH
44028: LD_VAR 0 9
44032: PUSH
44033: LD_INT 2
44035: ARRAY
44036: PPUSH
44037: CALL_OW 546
44041: ST_TO_ADDR
// if hex [ 1 ] then
44042: LD_VAR 0 4
44046: PUSH
44047: LD_INT 1
44049: ARRAY
44050: IFFALSE 44054
// continue ;
44052: GO 43942
// h := hex [ 2 ] ;
44054: LD_ADDR_VAR 0 13
44058: PUSH
44059: LD_VAR 0 4
44063: PUSH
44064: LD_INT 2
44066: ARRAY
44067: ST_TO_ADDR
// if h + 7 < height then
44068: LD_VAR 0 13
44072: PUSH
44073: LD_INT 7
44075: PLUS
44076: PUSH
44077: LD_VAR 0 15
44081: LESS
44082: IFFALSE 44111
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
44084: LD_ADDR_VAR 0 18
44088: PUSH
44089: LD_INT 7
44091: PUSH
44092: LD_INT 28
44094: PUSH
44095: LD_INT 45
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: LIST
44102: PUSH
44103: LD_VAR 0 12
44107: ARRAY
44108: ST_TO_ADDR
// break ;
44109: GO 44113
// end ; end ; end ;
44111: GO 43942
44113: POP
44114: POP
// end ; if not weapon then
44115: LD_VAR 0 18
44119: NOT
44120: IFFALSE 44180
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
44122: LD_ADDR_VAR 0 5
44126: PUSH
44127: LD_VAR 0 5
44131: PUSH
44132: LD_INT 11
44134: PUSH
44135: LD_INT 30
44137: PUSH
44138: LD_INT 49
44140: PUSH
44141: EMPTY
44142: LIST
44143: LIST
44144: LIST
44145: DIFF
44146: ST_TO_ADDR
// if not list then
44147: LD_VAR 0 5
44151: NOT
44152: IFFALSE 44156
// exit ;
44154: GO 44298
// weapon := list [ rand ( 1 , list ) ] ;
44156: LD_ADDR_VAR 0 18
44160: PUSH
44161: LD_VAR 0 5
44165: PUSH
44166: LD_INT 1
44168: PPUSH
44169: LD_VAR 0 5
44173: PPUSH
44174: CALL_OW 12
44178: ARRAY
44179: ST_TO_ADDR
// end ; if weapon then
44180: LD_VAR 0 18
44184: IFFALSE 44298
// begin tmp := CostOfWeapon ( weapon ) ;
44186: LD_ADDR_VAR 0 14
44190: PUSH
44191: LD_VAR 0 18
44195: PPUSH
44196: CALL_OW 451
44200: ST_TO_ADDR
// j := GetBase ( tower ) ;
44201: LD_ADDR_VAR 0 9
44205: PUSH
44206: LD_VAR 0 1
44210: PPUSH
44211: CALL_OW 274
44215: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
44216: LD_VAR 0 9
44220: PPUSH
44221: LD_INT 1
44223: PPUSH
44224: CALL_OW 275
44228: PUSH
44229: LD_VAR 0 14
44233: PUSH
44234: LD_INT 1
44236: ARRAY
44237: GREATEREQUAL
44238: PUSH
44239: LD_VAR 0 9
44243: PPUSH
44244: LD_INT 2
44246: PPUSH
44247: CALL_OW 275
44251: PUSH
44252: LD_VAR 0 14
44256: PUSH
44257: LD_INT 2
44259: ARRAY
44260: GREATEREQUAL
44261: AND
44262: PUSH
44263: LD_VAR 0 9
44267: PPUSH
44268: LD_INT 3
44270: PPUSH
44271: CALL_OW 275
44275: PUSH
44276: LD_VAR 0 14
44280: PUSH
44281: LD_INT 3
44283: ARRAY
44284: GREATEREQUAL
44285: AND
44286: IFFALSE 44298
// result := weapon ;
44288: LD_ADDR_VAR 0 3
44292: PUSH
44293: LD_VAR 0 18
44297: ST_TO_ADDR
// end ; end ;
44298: LD_VAR 0 3
44302: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
44303: LD_INT 0
44305: PPUSH
44306: PPUSH
// result := true ;
44307: LD_ADDR_VAR 0 3
44311: PUSH
44312: LD_INT 1
44314: ST_TO_ADDR
// if array1 = array2 then
44315: LD_VAR 0 1
44319: PUSH
44320: LD_VAR 0 2
44324: EQUAL
44325: IFFALSE 44385
// begin for i = 1 to array1 do
44327: LD_ADDR_VAR 0 4
44331: PUSH
44332: DOUBLE
44333: LD_INT 1
44335: DEC
44336: ST_TO_ADDR
44337: LD_VAR 0 1
44341: PUSH
44342: FOR_TO
44343: IFFALSE 44381
// if array1 [ i ] <> array2 [ i ] then
44345: LD_VAR 0 1
44349: PUSH
44350: LD_VAR 0 4
44354: ARRAY
44355: PUSH
44356: LD_VAR 0 2
44360: PUSH
44361: LD_VAR 0 4
44365: ARRAY
44366: NONEQUAL
44367: IFFALSE 44379
// begin result := false ;
44369: LD_ADDR_VAR 0 3
44373: PUSH
44374: LD_INT 0
44376: ST_TO_ADDR
// break ;
44377: GO 44381
// end ;
44379: GO 44342
44381: POP
44382: POP
// end else
44383: GO 44393
// result := false ;
44385: LD_ADDR_VAR 0 3
44389: PUSH
44390: LD_INT 0
44392: ST_TO_ADDR
// end ;
44393: LD_VAR 0 3
44397: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
44398: LD_INT 0
44400: PPUSH
44401: PPUSH
// if not array1 or not array2 then
44402: LD_VAR 0 1
44406: NOT
44407: PUSH
44408: LD_VAR 0 2
44412: NOT
44413: OR
44414: IFFALSE 44418
// exit ;
44416: GO 44482
// result := true ;
44418: LD_ADDR_VAR 0 3
44422: PUSH
44423: LD_INT 1
44425: ST_TO_ADDR
// for i = 1 to array1 do
44426: LD_ADDR_VAR 0 4
44430: PUSH
44431: DOUBLE
44432: LD_INT 1
44434: DEC
44435: ST_TO_ADDR
44436: LD_VAR 0 1
44440: PUSH
44441: FOR_TO
44442: IFFALSE 44480
// if array1 [ i ] <> array2 [ i ] then
44444: LD_VAR 0 1
44448: PUSH
44449: LD_VAR 0 4
44453: ARRAY
44454: PUSH
44455: LD_VAR 0 2
44459: PUSH
44460: LD_VAR 0 4
44464: ARRAY
44465: NONEQUAL
44466: IFFALSE 44478
// begin result := false ;
44468: LD_ADDR_VAR 0 3
44472: PUSH
44473: LD_INT 0
44475: ST_TO_ADDR
// break ;
44476: GO 44480
// end ;
44478: GO 44441
44480: POP
44481: POP
// end ;
44482: LD_VAR 0 3
44486: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
44487: LD_INT 0
44489: PPUSH
44490: PPUSH
44491: PPUSH
// pom := GetBase ( fac ) ;
44492: LD_ADDR_VAR 0 5
44496: PUSH
44497: LD_VAR 0 1
44501: PPUSH
44502: CALL_OW 274
44506: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
44507: LD_ADDR_VAR 0 4
44511: PUSH
44512: LD_VAR 0 2
44516: PUSH
44517: LD_INT 1
44519: ARRAY
44520: PPUSH
44521: LD_VAR 0 2
44525: PUSH
44526: LD_INT 2
44528: ARRAY
44529: PPUSH
44530: LD_VAR 0 2
44534: PUSH
44535: LD_INT 3
44537: ARRAY
44538: PPUSH
44539: LD_VAR 0 2
44543: PUSH
44544: LD_INT 4
44546: ARRAY
44547: PPUSH
44548: CALL_OW 449
44552: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44553: LD_ADDR_VAR 0 3
44557: PUSH
44558: LD_VAR 0 5
44562: PPUSH
44563: LD_INT 1
44565: PPUSH
44566: CALL_OW 275
44570: PUSH
44571: LD_VAR 0 4
44575: PUSH
44576: LD_INT 1
44578: ARRAY
44579: GREATEREQUAL
44580: PUSH
44581: LD_VAR 0 5
44585: PPUSH
44586: LD_INT 2
44588: PPUSH
44589: CALL_OW 275
44593: PUSH
44594: LD_VAR 0 4
44598: PUSH
44599: LD_INT 2
44601: ARRAY
44602: GREATEREQUAL
44603: AND
44604: PUSH
44605: LD_VAR 0 5
44609: PPUSH
44610: LD_INT 3
44612: PPUSH
44613: CALL_OW 275
44617: PUSH
44618: LD_VAR 0 4
44622: PUSH
44623: LD_INT 3
44625: ARRAY
44626: GREATEREQUAL
44627: AND
44628: ST_TO_ADDR
// end ;
44629: LD_VAR 0 3
44633: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
44634: LD_INT 0
44636: PPUSH
44637: PPUSH
44638: PPUSH
44639: PPUSH
// pom := GetBase ( building ) ;
44640: LD_ADDR_VAR 0 3
44644: PUSH
44645: LD_VAR 0 1
44649: PPUSH
44650: CALL_OW 274
44654: ST_TO_ADDR
// if not pom then
44655: LD_VAR 0 3
44659: NOT
44660: IFFALSE 44664
// exit ;
44662: GO 44834
// btype := GetBType ( building ) ;
44664: LD_ADDR_VAR 0 5
44668: PUSH
44669: LD_VAR 0 1
44673: PPUSH
44674: CALL_OW 266
44678: ST_TO_ADDR
// if btype = b_armoury then
44679: LD_VAR 0 5
44683: PUSH
44684: LD_INT 4
44686: EQUAL
44687: IFFALSE 44697
// btype := b_barracks ;
44689: LD_ADDR_VAR 0 5
44693: PUSH
44694: LD_INT 5
44696: ST_TO_ADDR
// if btype = b_depot then
44697: LD_VAR 0 5
44701: PUSH
44702: LD_INT 0
44704: EQUAL
44705: IFFALSE 44715
// btype := b_warehouse ;
44707: LD_ADDR_VAR 0 5
44711: PUSH
44712: LD_INT 1
44714: ST_TO_ADDR
// if btype = b_workshop then
44715: LD_VAR 0 5
44719: PUSH
44720: LD_INT 2
44722: EQUAL
44723: IFFALSE 44733
// btype := b_factory ;
44725: LD_ADDR_VAR 0 5
44729: PUSH
44730: LD_INT 3
44732: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44733: LD_ADDR_VAR 0 4
44737: PUSH
44738: LD_VAR 0 5
44742: PPUSH
44743: LD_VAR 0 1
44747: PPUSH
44748: CALL_OW 248
44752: PPUSH
44753: CALL_OW 450
44757: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44758: LD_ADDR_VAR 0 2
44762: PUSH
44763: LD_VAR 0 3
44767: PPUSH
44768: LD_INT 1
44770: PPUSH
44771: CALL_OW 275
44775: PUSH
44776: LD_VAR 0 4
44780: PUSH
44781: LD_INT 1
44783: ARRAY
44784: GREATEREQUAL
44785: PUSH
44786: LD_VAR 0 3
44790: PPUSH
44791: LD_INT 2
44793: PPUSH
44794: CALL_OW 275
44798: PUSH
44799: LD_VAR 0 4
44803: PUSH
44804: LD_INT 2
44806: ARRAY
44807: GREATEREQUAL
44808: AND
44809: PUSH
44810: LD_VAR 0 3
44814: PPUSH
44815: LD_INT 3
44817: PPUSH
44818: CALL_OW 275
44822: PUSH
44823: LD_VAR 0 4
44827: PUSH
44828: LD_INT 3
44830: ARRAY
44831: GREATEREQUAL
44832: AND
44833: ST_TO_ADDR
// end ;
44834: LD_VAR 0 2
44838: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
44839: LD_INT 0
44841: PPUSH
44842: PPUSH
44843: PPUSH
// pom := GetBase ( building ) ;
44844: LD_ADDR_VAR 0 4
44848: PUSH
44849: LD_VAR 0 1
44853: PPUSH
44854: CALL_OW 274
44858: ST_TO_ADDR
// if not pom then
44859: LD_VAR 0 4
44863: NOT
44864: IFFALSE 44868
// exit ;
44866: GO 44969
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44868: LD_ADDR_VAR 0 5
44872: PUSH
44873: LD_VAR 0 2
44877: PPUSH
44878: LD_VAR 0 1
44882: PPUSH
44883: CALL_OW 248
44887: PPUSH
44888: CALL_OW 450
44892: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44893: LD_ADDR_VAR 0 3
44897: PUSH
44898: LD_VAR 0 4
44902: PPUSH
44903: LD_INT 1
44905: PPUSH
44906: CALL_OW 275
44910: PUSH
44911: LD_VAR 0 5
44915: PUSH
44916: LD_INT 1
44918: ARRAY
44919: GREATEREQUAL
44920: PUSH
44921: LD_VAR 0 4
44925: PPUSH
44926: LD_INT 2
44928: PPUSH
44929: CALL_OW 275
44933: PUSH
44934: LD_VAR 0 5
44938: PUSH
44939: LD_INT 2
44941: ARRAY
44942: GREATEREQUAL
44943: AND
44944: PUSH
44945: LD_VAR 0 4
44949: PPUSH
44950: LD_INT 3
44952: PPUSH
44953: CALL_OW 275
44957: PUSH
44958: LD_VAR 0 5
44962: PUSH
44963: LD_INT 3
44965: ARRAY
44966: GREATEREQUAL
44967: AND
44968: ST_TO_ADDR
// end ;
44969: LD_VAR 0 3
44973: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
44974: LD_INT 0
44976: PPUSH
44977: PPUSH
44978: PPUSH
44979: PPUSH
44980: PPUSH
44981: PPUSH
44982: PPUSH
44983: PPUSH
44984: PPUSH
44985: PPUSH
44986: PPUSH
// result := false ;
44987: LD_ADDR_VAR 0 8
44991: PUSH
44992: LD_INT 0
44994: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
44995: LD_VAR 0 5
44999: NOT
45000: PUSH
45001: LD_VAR 0 1
45005: NOT
45006: OR
45007: PUSH
45008: LD_VAR 0 2
45012: NOT
45013: OR
45014: PUSH
45015: LD_VAR 0 3
45019: NOT
45020: OR
45021: IFFALSE 45025
// exit ;
45023: GO 45839
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
45025: LD_ADDR_VAR 0 14
45029: PUSH
45030: LD_VAR 0 1
45034: PPUSH
45035: LD_VAR 0 2
45039: PPUSH
45040: LD_VAR 0 3
45044: PPUSH
45045: LD_VAR 0 4
45049: PPUSH
45050: LD_VAR 0 5
45054: PUSH
45055: LD_INT 1
45057: ARRAY
45058: PPUSH
45059: CALL_OW 248
45063: PPUSH
45064: LD_INT 0
45066: PPUSH
45067: CALL 47092 0 6
45071: ST_TO_ADDR
// if not hexes then
45072: LD_VAR 0 14
45076: NOT
45077: IFFALSE 45081
// exit ;
45079: GO 45839
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
45081: LD_ADDR_VAR 0 17
45085: PUSH
45086: LD_VAR 0 5
45090: PPUSH
45091: LD_INT 22
45093: PUSH
45094: LD_VAR 0 13
45098: PPUSH
45099: CALL_OW 255
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PUSH
45108: LD_INT 2
45110: PUSH
45111: LD_INT 30
45113: PUSH
45114: LD_INT 0
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_INT 30
45123: PUSH
45124: LD_INT 1
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: LIST
45135: PUSH
45136: EMPTY
45137: LIST
45138: LIST
45139: PPUSH
45140: CALL_OW 72
45144: ST_TO_ADDR
// for i = 1 to hexes do
45145: LD_ADDR_VAR 0 9
45149: PUSH
45150: DOUBLE
45151: LD_INT 1
45153: DEC
45154: ST_TO_ADDR
45155: LD_VAR 0 14
45159: PUSH
45160: FOR_TO
45161: IFFALSE 45837
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45163: LD_ADDR_VAR 0 13
45167: PUSH
45168: LD_VAR 0 14
45172: PUSH
45173: LD_VAR 0 9
45177: ARRAY
45178: PUSH
45179: LD_INT 1
45181: ARRAY
45182: PPUSH
45183: LD_VAR 0 14
45187: PUSH
45188: LD_VAR 0 9
45192: ARRAY
45193: PUSH
45194: LD_INT 2
45196: ARRAY
45197: PPUSH
45198: CALL_OW 428
45202: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
45203: LD_VAR 0 14
45207: PUSH
45208: LD_VAR 0 9
45212: ARRAY
45213: PUSH
45214: LD_INT 1
45216: ARRAY
45217: PPUSH
45218: LD_VAR 0 14
45222: PUSH
45223: LD_VAR 0 9
45227: ARRAY
45228: PUSH
45229: LD_INT 2
45231: ARRAY
45232: PPUSH
45233: CALL_OW 351
45237: PUSH
45238: LD_VAR 0 14
45242: PUSH
45243: LD_VAR 0 9
45247: ARRAY
45248: PUSH
45249: LD_INT 1
45251: ARRAY
45252: PPUSH
45253: LD_VAR 0 14
45257: PUSH
45258: LD_VAR 0 9
45262: ARRAY
45263: PUSH
45264: LD_INT 2
45266: ARRAY
45267: PPUSH
45268: CALL_OW 488
45272: NOT
45273: OR
45274: PUSH
45275: LD_VAR 0 13
45279: PPUSH
45280: CALL_OW 247
45284: PUSH
45285: LD_INT 3
45287: EQUAL
45288: OR
45289: IFFALSE 45295
// exit ;
45291: POP
45292: POP
45293: GO 45839
// if not tmp then
45295: LD_VAR 0 13
45299: NOT
45300: IFFALSE 45304
// continue ;
45302: GO 45160
// result := true ;
45304: LD_ADDR_VAR 0 8
45308: PUSH
45309: LD_INT 1
45311: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
45312: LD_VAR 0 6
45316: PUSH
45317: LD_VAR 0 13
45321: PPUSH
45322: CALL_OW 247
45326: PUSH
45327: LD_INT 2
45329: EQUAL
45330: AND
45331: PUSH
45332: LD_VAR 0 13
45336: PPUSH
45337: CALL_OW 263
45341: PUSH
45342: LD_INT 1
45344: EQUAL
45345: AND
45346: IFFALSE 45510
// begin if IsDrivenBy ( tmp ) then
45348: LD_VAR 0 13
45352: PPUSH
45353: CALL_OW 311
45357: IFFALSE 45361
// continue ;
45359: GO 45160
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
45361: LD_VAR 0 6
45365: PPUSH
45366: LD_INT 3
45368: PUSH
45369: LD_INT 60
45371: PUSH
45372: EMPTY
45373: LIST
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 3
45381: PUSH
45382: LD_INT 55
45384: PUSH
45385: EMPTY
45386: LIST
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: EMPTY
45393: LIST
45394: LIST
45395: PPUSH
45396: CALL_OW 72
45400: IFFALSE 45508
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
45402: LD_ADDR_VAR 0 18
45406: PUSH
45407: LD_VAR 0 6
45411: PPUSH
45412: LD_INT 3
45414: PUSH
45415: LD_INT 60
45417: PUSH
45418: EMPTY
45419: LIST
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PUSH
45425: LD_INT 3
45427: PUSH
45428: LD_INT 55
45430: PUSH
45431: EMPTY
45432: LIST
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PPUSH
45442: CALL_OW 72
45446: PUSH
45447: LD_INT 1
45449: ARRAY
45450: ST_TO_ADDR
// if IsInUnit ( driver ) then
45451: LD_VAR 0 18
45455: PPUSH
45456: CALL_OW 310
45460: IFFALSE 45471
// ComExit ( driver ) ;
45462: LD_VAR 0 18
45466: PPUSH
45467: CALL 70884 0 1
// AddComEnterUnit ( driver , tmp ) ;
45471: LD_VAR 0 18
45475: PPUSH
45476: LD_VAR 0 13
45480: PPUSH
45481: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
45485: LD_VAR 0 18
45489: PPUSH
45490: LD_VAR 0 7
45494: PPUSH
45495: CALL_OW 173
// AddComExitVehicle ( driver ) ;
45499: LD_VAR 0 18
45503: PPUSH
45504: CALL_OW 181
// end ; continue ;
45508: GO 45160
// end ; if not cleaners or not tmp in cleaners then
45510: LD_VAR 0 6
45514: NOT
45515: PUSH
45516: LD_VAR 0 13
45520: PUSH
45521: LD_VAR 0 6
45525: IN
45526: NOT
45527: OR
45528: IFFALSE 45835
// begin if dep then
45530: LD_VAR 0 17
45534: IFFALSE 45670
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
45536: LD_ADDR_VAR 0 16
45540: PUSH
45541: LD_VAR 0 17
45545: PUSH
45546: LD_INT 1
45548: ARRAY
45549: PPUSH
45550: CALL_OW 250
45554: PPUSH
45555: LD_VAR 0 17
45559: PUSH
45560: LD_INT 1
45562: ARRAY
45563: PPUSH
45564: CALL_OW 254
45568: PPUSH
45569: LD_INT 5
45571: PPUSH
45572: CALL_OW 272
45576: PUSH
45577: LD_VAR 0 17
45581: PUSH
45582: LD_INT 1
45584: ARRAY
45585: PPUSH
45586: CALL_OW 251
45590: PPUSH
45591: LD_VAR 0 17
45595: PUSH
45596: LD_INT 1
45598: ARRAY
45599: PPUSH
45600: CALL_OW 254
45604: PPUSH
45605: LD_INT 5
45607: PPUSH
45608: CALL_OW 273
45612: PUSH
45613: EMPTY
45614: LIST
45615: LIST
45616: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
45617: LD_VAR 0 16
45621: PUSH
45622: LD_INT 1
45624: ARRAY
45625: PPUSH
45626: LD_VAR 0 16
45630: PUSH
45631: LD_INT 2
45633: ARRAY
45634: PPUSH
45635: CALL_OW 488
45639: IFFALSE 45670
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
45641: LD_VAR 0 13
45645: PPUSH
45646: LD_VAR 0 16
45650: PUSH
45651: LD_INT 1
45653: ARRAY
45654: PPUSH
45655: LD_VAR 0 16
45659: PUSH
45660: LD_INT 2
45662: ARRAY
45663: PPUSH
45664: CALL_OW 111
// continue ;
45668: GO 45160
// end ; end ; r := GetDir ( tmp ) ;
45670: LD_ADDR_VAR 0 15
45674: PUSH
45675: LD_VAR 0 13
45679: PPUSH
45680: CALL_OW 254
45684: ST_TO_ADDR
// if r = 5 then
45685: LD_VAR 0 15
45689: PUSH
45690: LD_INT 5
45692: EQUAL
45693: IFFALSE 45703
// r := 0 ;
45695: LD_ADDR_VAR 0 15
45699: PUSH
45700: LD_INT 0
45702: ST_TO_ADDR
// for j = r to 5 do
45703: LD_ADDR_VAR 0 10
45707: PUSH
45708: DOUBLE
45709: LD_VAR 0 15
45713: DEC
45714: ST_TO_ADDR
45715: LD_INT 5
45717: PUSH
45718: FOR_TO
45719: IFFALSE 45833
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
45721: LD_ADDR_VAR 0 11
45725: PUSH
45726: LD_VAR 0 13
45730: PPUSH
45731: CALL_OW 250
45735: PPUSH
45736: LD_VAR 0 10
45740: PPUSH
45741: LD_INT 2
45743: PPUSH
45744: CALL_OW 272
45748: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
45749: LD_ADDR_VAR 0 12
45753: PUSH
45754: LD_VAR 0 13
45758: PPUSH
45759: CALL_OW 251
45763: PPUSH
45764: LD_VAR 0 10
45768: PPUSH
45769: LD_INT 2
45771: PPUSH
45772: CALL_OW 273
45776: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
45777: LD_VAR 0 11
45781: PPUSH
45782: LD_VAR 0 12
45786: PPUSH
45787: CALL_OW 488
45791: PUSH
45792: LD_VAR 0 11
45796: PPUSH
45797: LD_VAR 0 12
45801: PPUSH
45802: CALL_OW 428
45806: NOT
45807: AND
45808: IFFALSE 45831
// begin ComMoveXY ( tmp , _x , _y ) ;
45810: LD_VAR 0 13
45814: PPUSH
45815: LD_VAR 0 11
45819: PPUSH
45820: LD_VAR 0 12
45824: PPUSH
45825: CALL_OW 111
// break ;
45829: GO 45833
// end ; end ;
45831: GO 45718
45833: POP
45834: POP
// end ; end ;
45835: GO 45160
45837: POP
45838: POP
// end ;
45839: LD_VAR 0 8
45843: RET
// export function BuildingTechInvented ( side , btype ) ; begin
45844: LD_INT 0
45846: PPUSH
// result := true ;
45847: LD_ADDR_VAR 0 3
45851: PUSH
45852: LD_INT 1
45854: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
45855: LD_VAR 0 2
45859: PUSH
45860: LD_INT 24
45862: DOUBLE
45863: EQUAL
45864: IFTRUE 45874
45866: LD_INT 33
45868: DOUBLE
45869: EQUAL
45870: IFTRUE 45874
45872: GO 45899
45874: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
45875: LD_ADDR_VAR 0 3
45879: PUSH
45880: LD_INT 32
45882: PPUSH
45883: LD_VAR 0 1
45887: PPUSH
45888: CALL_OW 321
45892: PUSH
45893: LD_INT 2
45895: EQUAL
45896: ST_TO_ADDR
45897: GO 46215
45899: LD_INT 20
45901: DOUBLE
45902: EQUAL
45903: IFTRUE 45907
45905: GO 45932
45907: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
45908: LD_ADDR_VAR 0 3
45912: PUSH
45913: LD_INT 6
45915: PPUSH
45916: LD_VAR 0 1
45920: PPUSH
45921: CALL_OW 321
45925: PUSH
45926: LD_INT 2
45928: EQUAL
45929: ST_TO_ADDR
45930: GO 46215
45932: LD_INT 22
45934: DOUBLE
45935: EQUAL
45936: IFTRUE 45946
45938: LD_INT 36
45940: DOUBLE
45941: EQUAL
45942: IFTRUE 45946
45944: GO 45971
45946: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
45947: LD_ADDR_VAR 0 3
45951: PUSH
45952: LD_INT 15
45954: PPUSH
45955: LD_VAR 0 1
45959: PPUSH
45960: CALL_OW 321
45964: PUSH
45965: LD_INT 2
45967: EQUAL
45968: ST_TO_ADDR
45969: GO 46215
45971: LD_INT 30
45973: DOUBLE
45974: EQUAL
45975: IFTRUE 45979
45977: GO 46004
45979: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
45980: LD_ADDR_VAR 0 3
45984: PUSH
45985: LD_INT 20
45987: PPUSH
45988: LD_VAR 0 1
45992: PPUSH
45993: CALL_OW 321
45997: PUSH
45998: LD_INT 2
46000: EQUAL
46001: ST_TO_ADDR
46002: GO 46215
46004: LD_INT 28
46006: DOUBLE
46007: EQUAL
46008: IFTRUE 46018
46010: LD_INT 21
46012: DOUBLE
46013: EQUAL
46014: IFTRUE 46018
46016: GO 46043
46018: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
46019: LD_ADDR_VAR 0 3
46023: PUSH
46024: LD_INT 21
46026: PPUSH
46027: LD_VAR 0 1
46031: PPUSH
46032: CALL_OW 321
46036: PUSH
46037: LD_INT 2
46039: EQUAL
46040: ST_TO_ADDR
46041: GO 46215
46043: LD_INT 16
46045: DOUBLE
46046: EQUAL
46047: IFTRUE 46051
46049: GO 46076
46051: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
46052: LD_ADDR_VAR 0 3
46056: PUSH
46057: LD_INT 84
46059: PPUSH
46060: LD_VAR 0 1
46064: PPUSH
46065: CALL_OW 321
46069: PUSH
46070: LD_INT 2
46072: EQUAL
46073: ST_TO_ADDR
46074: GO 46215
46076: LD_INT 19
46078: DOUBLE
46079: EQUAL
46080: IFTRUE 46090
46082: LD_INT 23
46084: DOUBLE
46085: EQUAL
46086: IFTRUE 46090
46088: GO 46115
46090: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
46091: LD_ADDR_VAR 0 3
46095: PUSH
46096: LD_INT 83
46098: PPUSH
46099: LD_VAR 0 1
46103: PPUSH
46104: CALL_OW 321
46108: PUSH
46109: LD_INT 2
46111: EQUAL
46112: ST_TO_ADDR
46113: GO 46215
46115: LD_INT 17
46117: DOUBLE
46118: EQUAL
46119: IFTRUE 46123
46121: GO 46148
46123: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
46124: LD_ADDR_VAR 0 3
46128: PUSH
46129: LD_INT 39
46131: PPUSH
46132: LD_VAR 0 1
46136: PPUSH
46137: CALL_OW 321
46141: PUSH
46142: LD_INT 2
46144: EQUAL
46145: ST_TO_ADDR
46146: GO 46215
46148: LD_INT 18
46150: DOUBLE
46151: EQUAL
46152: IFTRUE 46156
46154: GO 46181
46156: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
46157: LD_ADDR_VAR 0 3
46161: PUSH
46162: LD_INT 40
46164: PPUSH
46165: LD_VAR 0 1
46169: PPUSH
46170: CALL_OW 321
46174: PUSH
46175: LD_INT 2
46177: EQUAL
46178: ST_TO_ADDR
46179: GO 46215
46181: LD_INT 27
46183: DOUBLE
46184: EQUAL
46185: IFTRUE 46189
46187: GO 46214
46189: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
46190: LD_ADDR_VAR 0 3
46194: PUSH
46195: LD_INT 35
46197: PPUSH
46198: LD_VAR 0 1
46202: PPUSH
46203: CALL_OW 321
46207: PUSH
46208: LD_INT 2
46210: EQUAL
46211: ST_TO_ADDR
46212: GO 46215
46214: POP
// end ;
46215: LD_VAR 0 3
46219: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
46220: LD_INT 0
46222: PPUSH
46223: PPUSH
46224: PPUSH
46225: PPUSH
46226: PPUSH
46227: PPUSH
46228: PPUSH
46229: PPUSH
46230: PPUSH
46231: PPUSH
46232: PPUSH
// result := false ;
46233: LD_ADDR_VAR 0 6
46237: PUSH
46238: LD_INT 0
46240: ST_TO_ADDR
// if btype = b_depot then
46241: LD_VAR 0 2
46245: PUSH
46246: LD_INT 0
46248: EQUAL
46249: IFFALSE 46261
// begin result := true ;
46251: LD_ADDR_VAR 0 6
46255: PUSH
46256: LD_INT 1
46258: ST_TO_ADDR
// exit ;
46259: GO 47087
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
46261: LD_VAR 0 1
46265: NOT
46266: PUSH
46267: LD_VAR 0 1
46271: PPUSH
46272: CALL_OW 266
46276: PUSH
46277: LD_INT 0
46279: PUSH
46280: LD_INT 1
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: IN
46287: NOT
46288: OR
46289: PUSH
46290: LD_VAR 0 2
46294: NOT
46295: OR
46296: PUSH
46297: LD_VAR 0 5
46301: PUSH
46302: LD_INT 0
46304: PUSH
46305: LD_INT 1
46307: PUSH
46308: LD_INT 2
46310: PUSH
46311: LD_INT 3
46313: PUSH
46314: LD_INT 4
46316: PUSH
46317: LD_INT 5
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: IN
46328: NOT
46329: OR
46330: PUSH
46331: LD_VAR 0 3
46335: PPUSH
46336: LD_VAR 0 4
46340: PPUSH
46341: CALL_OW 488
46345: NOT
46346: OR
46347: IFFALSE 46351
// exit ;
46349: GO 47087
// side := GetSide ( depot ) ;
46351: LD_ADDR_VAR 0 9
46355: PUSH
46356: LD_VAR 0 1
46360: PPUSH
46361: CALL_OW 255
46365: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
46366: LD_VAR 0 9
46370: PPUSH
46371: LD_VAR 0 2
46375: PPUSH
46376: CALL 45844 0 2
46380: NOT
46381: IFFALSE 46385
// exit ;
46383: GO 47087
// pom := GetBase ( depot ) ;
46385: LD_ADDR_VAR 0 10
46389: PUSH
46390: LD_VAR 0 1
46394: PPUSH
46395: CALL_OW 274
46399: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
46400: LD_ADDR_VAR 0 11
46404: PUSH
46405: LD_VAR 0 2
46409: PPUSH
46410: LD_VAR 0 1
46414: PPUSH
46415: CALL_OW 248
46419: PPUSH
46420: CALL_OW 450
46424: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
46425: LD_VAR 0 10
46429: PPUSH
46430: LD_INT 1
46432: PPUSH
46433: CALL_OW 275
46437: PUSH
46438: LD_VAR 0 11
46442: PUSH
46443: LD_INT 1
46445: ARRAY
46446: GREATEREQUAL
46447: PUSH
46448: LD_VAR 0 10
46452: PPUSH
46453: LD_INT 2
46455: PPUSH
46456: CALL_OW 275
46460: PUSH
46461: LD_VAR 0 11
46465: PUSH
46466: LD_INT 2
46468: ARRAY
46469: GREATEREQUAL
46470: AND
46471: PUSH
46472: LD_VAR 0 10
46476: PPUSH
46477: LD_INT 3
46479: PPUSH
46480: CALL_OW 275
46484: PUSH
46485: LD_VAR 0 11
46489: PUSH
46490: LD_INT 3
46492: ARRAY
46493: GREATEREQUAL
46494: AND
46495: NOT
46496: IFFALSE 46500
// exit ;
46498: GO 47087
// if GetBType ( depot ) = b_depot then
46500: LD_VAR 0 1
46504: PPUSH
46505: CALL_OW 266
46509: PUSH
46510: LD_INT 0
46512: EQUAL
46513: IFFALSE 46525
// dist := 28 else
46515: LD_ADDR_VAR 0 14
46519: PUSH
46520: LD_INT 28
46522: ST_TO_ADDR
46523: GO 46533
// dist := 36 ;
46525: LD_ADDR_VAR 0 14
46529: PUSH
46530: LD_INT 36
46532: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
46533: LD_VAR 0 1
46537: PPUSH
46538: LD_VAR 0 3
46542: PPUSH
46543: LD_VAR 0 4
46547: PPUSH
46548: CALL_OW 297
46552: PUSH
46553: LD_VAR 0 14
46557: GREATER
46558: IFFALSE 46562
// exit ;
46560: GO 47087
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
46562: LD_ADDR_VAR 0 12
46566: PUSH
46567: LD_VAR 0 2
46571: PPUSH
46572: LD_VAR 0 3
46576: PPUSH
46577: LD_VAR 0 4
46581: PPUSH
46582: LD_VAR 0 5
46586: PPUSH
46587: LD_VAR 0 1
46591: PPUSH
46592: CALL_OW 248
46596: PPUSH
46597: LD_INT 0
46599: PPUSH
46600: CALL 47092 0 6
46604: ST_TO_ADDR
// if not hexes then
46605: LD_VAR 0 12
46609: NOT
46610: IFFALSE 46614
// exit ;
46612: GO 47087
// hex := GetHexInfo ( x , y ) ;
46614: LD_ADDR_VAR 0 15
46618: PUSH
46619: LD_VAR 0 3
46623: PPUSH
46624: LD_VAR 0 4
46628: PPUSH
46629: CALL_OW 546
46633: ST_TO_ADDR
// if hex [ 1 ] then
46634: LD_VAR 0 15
46638: PUSH
46639: LD_INT 1
46641: ARRAY
46642: IFFALSE 46646
// exit ;
46644: GO 47087
// height := hex [ 2 ] ;
46646: LD_ADDR_VAR 0 13
46650: PUSH
46651: LD_VAR 0 15
46655: PUSH
46656: LD_INT 2
46658: ARRAY
46659: ST_TO_ADDR
// for i = 1 to hexes do
46660: LD_ADDR_VAR 0 7
46664: PUSH
46665: DOUBLE
46666: LD_INT 1
46668: DEC
46669: ST_TO_ADDR
46670: LD_VAR 0 12
46674: PUSH
46675: FOR_TO
46676: IFFALSE 47006
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
46678: LD_VAR 0 12
46682: PUSH
46683: LD_VAR 0 7
46687: ARRAY
46688: PUSH
46689: LD_INT 1
46691: ARRAY
46692: PPUSH
46693: LD_VAR 0 12
46697: PUSH
46698: LD_VAR 0 7
46702: ARRAY
46703: PUSH
46704: LD_INT 2
46706: ARRAY
46707: PPUSH
46708: CALL_OW 488
46712: NOT
46713: PUSH
46714: LD_VAR 0 12
46718: PUSH
46719: LD_VAR 0 7
46723: ARRAY
46724: PUSH
46725: LD_INT 1
46727: ARRAY
46728: PPUSH
46729: LD_VAR 0 12
46733: PUSH
46734: LD_VAR 0 7
46738: ARRAY
46739: PUSH
46740: LD_INT 2
46742: ARRAY
46743: PPUSH
46744: CALL_OW 428
46748: PUSH
46749: LD_INT 0
46751: GREATER
46752: OR
46753: PUSH
46754: LD_VAR 0 12
46758: PUSH
46759: LD_VAR 0 7
46763: ARRAY
46764: PUSH
46765: LD_INT 1
46767: ARRAY
46768: PPUSH
46769: LD_VAR 0 12
46773: PUSH
46774: LD_VAR 0 7
46778: ARRAY
46779: PUSH
46780: LD_INT 2
46782: ARRAY
46783: PPUSH
46784: CALL_OW 351
46788: OR
46789: IFFALSE 46795
// exit ;
46791: POP
46792: POP
46793: GO 47087
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46795: LD_ADDR_VAR 0 8
46799: PUSH
46800: LD_VAR 0 12
46804: PUSH
46805: LD_VAR 0 7
46809: ARRAY
46810: PUSH
46811: LD_INT 1
46813: ARRAY
46814: PPUSH
46815: LD_VAR 0 12
46819: PUSH
46820: LD_VAR 0 7
46824: ARRAY
46825: PUSH
46826: LD_INT 2
46828: ARRAY
46829: PPUSH
46830: CALL_OW 546
46834: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
46835: LD_VAR 0 8
46839: PUSH
46840: LD_INT 1
46842: ARRAY
46843: PUSH
46844: LD_VAR 0 8
46848: PUSH
46849: LD_INT 2
46851: ARRAY
46852: PUSH
46853: LD_VAR 0 13
46857: PUSH
46858: LD_INT 2
46860: PLUS
46861: GREATER
46862: OR
46863: PUSH
46864: LD_VAR 0 8
46868: PUSH
46869: LD_INT 2
46871: ARRAY
46872: PUSH
46873: LD_VAR 0 13
46877: PUSH
46878: LD_INT 2
46880: MINUS
46881: LESS
46882: OR
46883: PUSH
46884: LD_VAR 0 8
46888: PUSH
46889: LD_INT 3
46891: ARRAY
46892: PUSH
46893: LD_INT 0
46895: PUSH
46896: LD_INT 8
46898: PUSH
46899: LD_INT 9
46901: PUSH
46902: LD_INT 10
46904: PUSH
46905: LD_INT 11
46907: PUSH
46908: LD_INT 12
46910: PUSH
46911: LD_INT 13
46913: PUSH
46914: LD_INT 16
46916: PUSH
46917: LD_INT 17
46919: PUSH
46920: LD_INT 18
46922: PUSH
46923: LD_INT 19
46925: PUSH
46926: LD_INT 20
46928: PUSH
46929: LD_INT 21
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: LIST
46941: LIST
46942: LIST
46943: LIST
46944: LIST
46945: LIST
46946: IN
46947: NOT
46948: OR
46949: PUSH
46950: LD_VAR 0 8
46954: PUSH
46955: LD_INT 5
46957: ARRAY
46958: NOT
46959: OR
46960: PUSH
46961: LD_VAR 0 8
46965: PUSH
46966: LD_INT 6
46968: ARRAY
46969: PUSH
46970: LD_INT 1
46972: PUSH
46973: LD_INT 2
46975: PUSH
46976: LD_INT 7
46978: PUSH
46979: LD_INT 9
46981: PUSH
46982: LD_INT 10
46984: PUSH
46985: LD_INT 11
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: LIST
46995: IN
46996: NOT
46997: OR
46998: IFFALSE 47004
// exit ;
47000: POP
47001: POP
47002: GO 47087
// end ;
47004: GO 46675
47006: POP
47007: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
47008: LD_VAR 0 9
47012: PPUSH
47013: LD_VAR 0 3
47017: PPUSH
47018: LD_VAR 0 4
47022: PPUSH
47023: LD_INT 20
47025: PPUSH
47026: CALL 39010 0 4
47030: PUSH
47031: LD_INT 4
47033: ARRAY
47034: IFFALSE 47038
// exit ;
47036: GO 47087
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
47038: LD_VAR 0 2
47042: PUSH
47043: LD_INT 29
47045: PUSH
47046: LD_INT 30
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: IN
47053: PUSH
47054: LD_VAR 0 3
47058: PPUSH
47059: LD_VAR 0 4
47063: PPUSH
47064: LD_VAR 0 9
47068: PPUSH
47069: CALL_OW 440
47073: NOT
47074: AND
47075: IFFALSE 47079
// exit ;
47077: GO 47087
// result := true ;
47079: LD_ADDR_VAR 0 6
47083: PUSH
47084: LD_INT 1
47086: ST_TO_ADDR
// end ;
47087: LD_VAR 0 6
47091: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
47092: LD_INT 0
47094: PPUSH
47095: PPUSH
47096: PPUSH
47097: PPUSH
47098: PPUSH
47099: PPUSH
47100: PPUSH
47101: PPUSH
47102: PPUSH
47103: PPUSH
47104: PPUSH
47105: PPUSH
47106: PPUSH
47107: PPUSH
47108: PPUSH
47109: PPUSH
47110: PPUSH
47111: PPUSH
47112: PPUSH
47113: PPUSH
47114: PPUSH
47115: PPUSH
47116: PPUSH
47117: PPUSH
47118: PPUSH
47119: PPUSH
47120: PPUSH
47121: PPUSH
47122: PPUSH
47123: PPUSH
47124: PPUSH
47125: PPUSH
47126: PPUSH
47127: PPUSH
47128: PPUSH
47129: PPUSH
47130: PPUSH
47131: PPUSH
47132: PPUSH
47133: PPUSH
47134: PPUSH
47135: PPUSH
47136: PPUSH
47137: PPUSH
47138: PPUSH
47139: PPUSH
47140: PPUSH
47141: PPUSH
47142: PPUSH
47143: PPUSH
47144: PPUSH
47145: PPUSH
47146: PPUSH
47147: PPUSH
47148: PPUSH
47149: PPUSH
47150: PPUSH
47151: PPUSH
// result = [ ] ;
47152: LD_ADDR_VAR 0 7
47156: PUSH
47157: EMPTY
47158: ST_TO_ADDR
// temp_list = [ ] ;
47159: LD_ADDR_VAR 0 9
47163: PUSH
47164: EMPTY
47165: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
47166: LD_VAR 0 4
47170: PUSH
47171: LD_INT 0
47173: PUSH
47174: LD_INT 1
47176: PUSH
47177: LD_INT 2
47179: PUSH
47180: LD_INT 3
47182: PUSH
47183: LD_INT 4
47185: PUSH
47186: LD_INT 5
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: LIST
47193: LIST
47194: LIST
47195: LIST
47196: IN
47197: NOT
47198: PUSH
47199: LD_VAR 0 1
47203: PUSH
47204: LD_INT 0
47206: PUSH
47207: LD_INT 1
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: IN
47214: PUSH
47215: LD_VAR 0 5
47219: PUSH
47220: LD_INT 1
47222: PUSH
47223: LD_INT 2
47225: PUSH
47226: LD_INT 3
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: LIST
47233: IN
47234: NOT
47235: AND
47236: OR
47237: IFFALSE 47241
// exit ;
47239: GO 65632
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
47241: LD_VAR 0 1
47245: PUSH
47246: LD_INT 6
47248: PUSH
47249: LD_INT 7
47251: PUSH
47252: LD_INT 8
47254: PUSH
47255: LD_INT 13
47257: PUSH
47258: LD_INT 12
47260: PUSH
47261: LD_INT 15
47263: PUSH
47264: LD_INT 11
47266: PUSH
47267: LD_INT 14
47269: PUSH
47270: LD_INT 10
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: IN
47284: IFFALSE 47294
// btype = b_lab ;
47286: LD_ADDR_VAR 0 1
47290: PUSH
47291: LD_INT 6
47293: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
47294: LD_VAR 0 6
47298: PUSH
47299: LD_INT 0
47301: PUSH
47302: LD_INT 1
47304: PUSH
47305: LD_INT 2
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: LIST
47312: IN
47313: NOT
47314: PUSH
47315: LD_VAR 0 1
47319: PUSH
47320: LD_INT 0
47322: PUSH
47323: LD_INT 1
47325: PUSH
47326: LD_INT 2
47328: PUSH
47329: LD_INT 3
47331: PUSH
47332: LD_INT 6
47334: PUSH
47335: LD_INT 36
47337: PUSH
47338: LD_INT 4
47340: PUSH
47341: LD_INT 5
47343: PUSH
47344: LD_INT 31
47346: PUSH
47347: LD_INT 32
47349: PUSH
47350: LD_INT 33
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: LIST
47357: LIST
47358: LIST
47359: LIST
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: IN
47366: NOT
47367: PUSH
47368: LD_VAR 0 6
47372: PUSH
47373: LD_INT 1
47375: EQUAL
47376: AND
47377: OR
47378: PUSH
47379: LD_VAR 0 1
47383: PUSH
47384: LD_INT 2
47386: PUSH
47387: LD_INT 3
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: IN
47394: NOT
47395: PUSH
47396: LD_VAR 0 6
47400: PUSH
47401: LD_INT 2
47403: EQUAL
47404: AND
47405: OR
47406: IFFALSE 47416
// mode = 0 ;
47408: LD_ADDR_VAR 0 6
47412: PUSH
47413: LD_INT 0
47415: ST_TO_ADDR
// case mode of 0 :
47416: LD_VAR 0 6
47420: PUSH
47421: LD_INT 0
47423: DOUBLE
47424: EQUAL
47425: IFTRUE 47429
47427: GO 58882
47429: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47430: LD_ADDR_VAR 0 11
47434: PUSH
47435: LD_INT 0
47437: PUSH
47438: LD_INT 0
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 0
47447: PUSH
47448: LD_INT 1
47450: NEG
47451: PUSH
47452: EMPTY
47453: LIST
47454: LIST
47455: PUSH
47456: LD_INT 1
47458: PUSH
47459: LD_INT 0
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: LD_INT 1
47468: PUSH
47469: LD_INT 1
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: LD_INT 0
47478: PUSH
47479: LD_INT 1
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 1
47488: NEG
47489: PUSH
47490: LD_INT 0
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 1
47499: NEG
47500: PUSH
47501: LD_INT 1
47503: NEG
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: LD_INT 1
47511: NEG
47512: PUSH
47513: LD_INT 2
47515: NEG
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 0
47523: PUSH
47524: LD_INT 2
47526: NEG
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: PUSH
47532: LD_INT 1
47534: PUSH
47535: LD_INT 1
47537: NEG
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 1
47545: PUSH
47546: LD_INT 2
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: PUSH
47553: LD_INT 0
47555: PUSH
47556: LD_INT 2
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 1
47565: NEG
47566: PUSH
47567: LD_INT 1
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: LD_INT 1
47576: PUSH
47577: LD_INT 3
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 0
47586: PUSH
47587: LD_INT 3
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 1
47596: NEG
47597: PUSH
47598: LD_INT 2
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47623: LD_ADDR_VAR 0 12
47627: PUSH
47628: LD_INT 0
47630: PUSH
47631: LD_INT 0
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PUSH
47638: LD_INT 0
47640: PUSH
47641: LD_INT 1
47643: NEG
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 1
47651: PUSH
47652: LD_INT 0
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 1
47661: PUSH
47662: LD_INT 1
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 0
47671: PUSH
47672: LD_INT 1
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 1
47681: NEG
47682: PUSH
47683: LD_INT 0
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: PUSH
47690: LD_INT 1
47692: NEG
47693: PUSH
47694: LD_INT 1
47696: NEG
47697: PUSH
47698: EMPTY
47699: LIST
47700: LIST
47701: PUSH
47702: LD_INT 1
47704: PUSH
47705: LD_INT 1
47707: NEG
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 2
47715: PUSH
47716: LD_INT 0
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 2
47725: PUSH
47726: LD_INT 1
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 1
47735: NEG
47736: PUSH
47737: LD_INT 1
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 2
47746: NEG
47747: PUSH
47748: LD_INT 0
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 2
47757: NEG
47758: PUSH
47759: LD_INT 1
47761: NEG
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: LD_INT 2
47769: NEG
47770: PUSH
47771: LD_INT 1
47773: PUSH
47774: EMPTY
47775: LIST
47776: LIST
47777: PUSH
47778: LD_INT 3
47780: NEG
47781: PUSH
47782: LD_INT 0
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: PUSH
47789: LD_INT 3
47791: NEG
47792: PUSH
47793: LD_INT 1
47795: NEG
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: LIST
47805: LIST
47806: LIST
47807: LIST
47808: LIST
47809: LIST
47810: LIST
47811: LIST
47812: LIST
47813: LIST
47814: LIST
47815: LIST
47816: LIST
47817: LIST
47818: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47819: LD_ADDR_VAR 0 13
47823: PUSH
47824: LD_INT 0
47826: PUSH
47827: LD_INT 0
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 0
47836: PUSH
47837: LD_INT 1
47839: NEG
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PUSH
47845: LD_INT 1
47847: PUSH
47848: LD_INT 0
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: LD_INT 1
47857: PUSH
47858: LD_INT 1
47860: PUSH
47861: EMPTY
47862: LIST
47863: LIST
47864: PUSH
47865: LD_INT 0
47867: PUSH
47868: LD_INT 1
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 1
47877: NEG
47878: PUSH
47879: LD_INT 0
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 1
47888: NEG
47889: PUSH
47890: LD_INT 1
47892: NEG
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 1
47900: NEG
47901: PUSH
47902: LD_INT 2
47904: NEG
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: PUSH
47910: LD_INT 2
47912: PUSH
47913: LD_INT 1
47915: PUSH
47916: EMPTY
47917: LIST
47918: LIST
47919: PUSH
47920: LD_INT 2
47922: PUSH
47923: LD_INT 2
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 1
47932: PUSH
47933: LD_INT 2
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 2
47942: NEG
47943: PUSH
47944: LD_INT 1
47946: NEG
47947: PUSH
47948: EMPTY
47949: LIST
47950: LIST
47951: PUSH
47952: LD_INT 2
47954: NEG
47955: PUSH
47956: LD_INT 2
47958: NEG
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 2
47966: NEG
47967: PUSH
47968: LD_INT 3
47970: NEG
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: LD_INT 3
47978: NEG
47979: PUSH
47980: LD_INT 2
47982: NEG
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PUSH
47988: LD_INT 3
47990: NEG
47991: PUSH
47992: LD_INT 3
47994: NEG
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48018: LD_ADDR_VAR 0 14
48022: PUSH
48023: LD_INT 0
48025: PUSH
48026: LD_INT 0
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 0
48035: PUSH
48036: LD_INT 1
48038: NEG
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 1
48046: PUSH
48047: LD_INT 0
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 1
48056: PUSH
48057: LD_INT 1
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 0
48066: PUSH
48067: LD_INT 1
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 1
48076: NEG
48077: PUSH
48078: LD_INT 0
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 1
48087: NEG
48088: PUSH
48089: LD_INT 1
48091: NEG
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 1
48099: NEG
48100: PUSH
48101: LD_INT 2
48103: NEG
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 0
48111: PUSH
48112: LD_INT 2
48114: NEG
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 1
48122: PUSH
48123: LD_INT 1
48125: NEG
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 1
48133: PUSH
48134: LD_INT 2
48136: PUSH
48137: EMPTY
48138: LIST
48139: LIST
48140: PUSH
48141: LD_INT 0
48143: PUSH
48144: LD_INT 2
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 1
48153: NEG
48154: PUSH
48155: LD_INT 1
48157: PUSH
48158: EMPTY
48159: LIST
48160: LIST
48161: PUSH
48162: LD_INT 1
48164: NEG
48165: PUSH
48166: LD_INT 3
48168: NEG
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 0
48176: PUSH
48177: LD_INT 3
48179: NEG
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: PUSH
48185: LD_INT 1
48187: PUSH
48188: LD_INT 2
48190: NEG
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: LIST
48205: LIST
48206: LIST
48207: LIST
48208: LIST
48209: LIST
48210: LIST
48211: LIST
48212: LIST
48213: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48214: LD_ADDR_VAR 0 15
48218: PUSH
48219: LD_INT 0
48221: PUSH
48222: LD_INT 0
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 0
48231: PUSH
48232: LD_INT 1
48234: NEG
48235: PUSH
48236: EMPTY
48237: LIST
48238: LIST
48239: PUSH
48240: LD_INT 1
48242: PUSH
48243: LD_INT 0
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 1
48252: PUSH
48253: LD_INT 1
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 0
48262: PUSH
48263: LD_INT 1
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: LD_INT 1
48272: NEG
48273: PUSH
48274: LD_INT 0
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 1
48283: NEG
48284: PUSH
48285: LD_INT 1
48287: NEG
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: LD_INT 1
48295: PUSH
48296: LD_INT 1
48298: NEG
48299: PUSH
48300: EMPTY
48301: LIST
48302: LIST
48303: PUSH
48304: LD_INT 2
48306: PUSH
48307: LD_INT 0
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: PUSH
48314: LD_INT 2
48316: PUSH
48317: LD_INT 1
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: LD_INT 1
48326: NEG
48327: PUSH
48328: LD_INT 1
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 2
48337: NEG
48338: PUSH
48339: LD_INT 0
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: LD_INT 2
48348: NEG
48349: PUSH
48350: LD_INT 1
48352: NEG
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 2
48360: PUSH
48361: LD_INT 1
48363: NEG
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 3
48371: PUSH
48372: LD_INT 0
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 3
48381: PUSH
48382: LD_INT 1
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: LIST
48396: LIST
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48407: LD_ADDR_VAR 0 16
48411: PUSH
48412: LD_INT 0
48414: PUSH
48415: LD_INT 0
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: LD_INT 0
48424: PUSH
48425: LD_INT 1
48427: NEG
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 1
48435: PUSH
48436: LD_INT 0
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 1
48445: PUSH
48446: LD_INT 1
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 0
48455: PUSH
48456: LD_INT 1
48458: PUSH
48459: EMPTY
48460: LIST
48461: LIST
48462: PUSH
48463: LD_INT 1
48465: NEG
48466: PUSH
48467: LD_INT 0
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 1
48476: NEG
48477: PUSH
48478: LD_INT 1
48480: NEG
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 1
48488: NEG
48489: PUSH
48490: LD_INT 2
48492: NEG
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 2
48500: PUSH
48501: LD_INT 1
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 2
48510: PUSH
48511: LD_INT 2
48513: PUSH
48514: EMPTY
48515: LIST
48516: LIST
48517: PUSH
48518: LD_INT 1
48520: PUSH
48521: LD_INT 2
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 2
48530: NEG
48531: PUSH
48532: LD_INT 1
48534: NEG
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 2
48542: NEG
48543: PUSH
48544: LD_INT 2
48546: NEG
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: LD_INT 3
48554: PUSH
48555: LD_INT 2
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 3
48564: PUSH
48565: LD_INT 3
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 2
48574: PUSH
48575: LD_INT 3
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48600: LD_ADDR_VAR 0 17
48604: PUSH
48605: LD_INT 0
48607: PUSH
48608: LD_INT 0
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 0
48617: PUSH
48618: LD_INT 1
48620: NEG
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 1
48628: PUSH
48629: LD_INT 0
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 1
48638: PUSH
48639: LD_INT 1
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: PUSH
48646: LD_INT 0
48648: PUSH
48649: LD_INT 1
48651: PUSH
48652: EMPTY
48653: LIST
48654: LIST
48655: PUSH
48656: LD_INT 1
48658: NEG
48659: PUSH
48660: LD_INT 0
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: LD_INT 1
48669: NEG
48670: PUSH
48671: LD_INT 1
48673: NEG
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 1
48681: NEG
48682: PUSH
48683: LD_INT 2
48685: NEG
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: PUSH
48691: LD_INT 0
48693: PUSH
48694: LD_INT 2
48696: NEG
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 1
48704: PUSH
48705: LD_INT 1
48707: NEG
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 2
48715: PUSH
48716: LD_INT 0
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 2
48725: PUSH
48726: LD_INT 1
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 2
48735: PUSH
48736: LD_INT 2
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 1
48745: PUSH
48746: LD_INT 2
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 0
48755: PUSH
48756: LD_INT 2
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 1
48765: NEG
48766: PUSH
48767: LD_INT 1
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 2
48776: NEG
48777: PUSH
48778: LD_INT 0
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 2
48787: NEG
48788: PUSH
48789: LD_INT 1
48791: NEG
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 2
48799: NEG
48800: PUSH
48801: LD_INT 2
48803: NEG
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: LIST
48823: LIST
48824: LIST
48825: LIST
48826: LIST
48827: LIST
48828: LIST
48829: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48830: LD_ADDR_VAR 0 18
48834: PUSH
48835: LD_INT 0
48837: PUSH
48838: LD_INT 0
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: PUSH
48845: LD_INT 0
48847: PUSH
48848: LD_INT 1
48850: NEG
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 1
48858: PUSH
48859: LD_INT 0
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 1
48868: PUSH
48869: LD_INT 1
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 0
48878: PUSH
48879: LD_INT 1
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 1
48888: NEG
48889: PUSH
48890: LD_INT 0
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 1
48899: NEG
48900: PUSH
48901: LD_INT 1
48903: NEG
48904: PUSH
48905: EMPTY
48906: LIST
48907: LIST
48908: PUSH
48909: LD_INT 1
48911: NEG
48912: PUSH
48913: LD_INT 2
48915: NEG
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 0
48923: PUSH
48924: LD_INT 2
48926: NEG
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 1
48934: PUSH
48935: LD_INT 1
48937: NEG
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 2
48945: PUSH
48946: LD_INT 0
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 2
48955: PUSH
48956: LD_INT 1
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 2
48965: PUSH
48966: LD_INT 2
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 1
48975: PUSH
48976: LD_INT 2
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 0
48985: PUSH
48986: LD_INT 2
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 1
48995: NEG
48996: PUSH
48997: LD_INT 1
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: LD_INT 2
49006: NEG
49007: PUSH
49008: LD_INT 0
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 2
49017: NEG
49018: PUSH
49019: LD_INT 1
49021: NEG
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 2
49029: NEG
49030: PUSH
49031: LD_INT 2
49033: NEG
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: LIST
49052: LIST
49053: LIST
49054: LIST
49055: LIST
49056: LIST
49057: LIST
49058: LIST
49059: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49060: LD_ADDR_VAR 0 19
49064: PUSH
49065: LD_INT 0
49067: PUSH
49068: LD_INT 0
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: PUSH
49075: LD_INT 0
49077: PUSH
49078: LD_INT 1
49080: NEG
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 1
49088: PUSH
49089: LD_INT 0
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 1
49098: PUSH
49099: LD_INT 1
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 0
49108: PUSH
49109: LD_INT 1
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 1
49118: NEG
49119: PUSH
49120: LD_INT 0
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: PUSH
49127: LD_INT 1
49129: NEG
49130: PUSH
49131: LD_INT 1
49133: NEG
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 1
49141: NEG
49142: PUSH
49143: LD_INT 2
49145: NEG
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 0
49153: PUSH
49154: LD_INT 2
49156: NEG
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 1
49164: PUSH
49165: LD_INT 1
49167: NEG
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 2
49175: PUSH
49176: LD_INT 0
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 2
49185: PUSH
49186: LD_INT 1
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 2
49195: PUSH
49196: LD_INT 2
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 1
49205: PUSH
49206: LD_INT 2
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 0
49215: PUSH
49216: LD_INT 2
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 1
49225: NEG
49226: PUSH
49227: LD_INT 1
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 2
49236: NEG
49237: PUSH
49238: LD_INT 0
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 2
49247: NEG
49248: PUSH
49249: LD_INT 1
49251: NEG
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: LD_INT 2
49259: NEG
49260: PUSH
49261: LD_INT 2
49263: NEG
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: LIST
49273: LIST
49274: LIST
49275: LIST
49276: LIST
49277: LIST
49278: LIST
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49290: LD_ADDR_VAR 0 20
49294: PUSH
49295: LD_INT 0
49297: PUSH
49298: LD_INT 0
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 0
49307: PUSH
49308: LD_INT 1
49310: NEG
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 1
49318: PUSH
49319: LD_INT 0
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: PUSH
49326: LD_INT 1
49328: PUSH
49329: LD_INT 1
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 0
49338: PUSH
49339: LD_INT 1
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 1
49348: NEG
49349: PUSH
49350: LD_INT 0
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 1
49359: NEG
49360: PUSH
49361: LD_INT 1
49363: NEG
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 1
49371: NEG
49372: PUSH
49373: LD_INT 2
49375: NEG
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: LD_INT 0
49383: PUSH
49384: LD_INT 2
49386: NEG
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: PUSH
49392: LD_INT 1
49394: PUSH
49395: LD_INT 1
49397: NEG
49398: PUSH
49399: EMPTY
49400: LIST
49401: LIST
49402: PUSH
49403: LD_INT 2
49405: PUSH
49406: LD_INT 0
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: PUSH
49413: LD_INT 2
49415: PUSH
49416: LD_INT 1
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 2
49425: PUSH
49426: LD_INT 2
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 1
49435: PUSH
49436: LD_INT 2
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 0
49445: PUSH
49446: LD_INT 2
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: LD_INT 1
49455: NEG
49456: PUSH
49457: LD_INT 1
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 2
49466: NEG
49467: PUSH
49468: LD_INT 0
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: PUSH
49475: LD_INT 2
49477: NEG
49478: PUSH
49479: LD_INT 1
49481: NEG
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 2
49489: NEG
49490: PUSH
49491: LD_INT 2
49493: NEG
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49520: LD_ADDR_VAR 0 21
49524: PUSH
49525: LD_INT 0
49527: PUSH
49528: LD_INT 0
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 0
49537: PUSH
49538: LD_INT 1
49540: NEG
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: LD_INT 1
49548: PUSH
49549: LD_INT 0
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 1
49558: PUSH
49559: LD_INT 1
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: LD_INT 0
49568: PUSH
49569: LD_INT 1
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_INT 1
49578: NEG
49579: PUSH
49580: LD_INT 0
49582: PUSH
49583: EMPTY
49584: LIST
49585: LIST
49586: PUSH
49587: LD_INT 1
49589: NEG
49590: PUSH
49591: LD_INT 1
49593: NEG
49594: PUSH
49595: EMPTY
49596: LIST
49597: LIST
49598: PUSH
49599: LD_INT 1
49601: NEG
49602: PUSH
49603: LD_INT 2
49605: NEG
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 0
49613: PUSH
49614: LD_INT 2
49616: NEG
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 1
49624: PUSH
49625: LD_INT 1
49627: NEG
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: LD_INT 2
49635: PUSH
49636: LD_INT 0
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: PUSH
49643: LD_INT 2
49645: PUSH
49646: LD_INT 1
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 2
49655: PUSH
49656: LD_INT 2
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 1
49665: PUSH
49666: LD_INT 2
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 0
49675: PUSH
49676: LD_INT 2
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 1
49685: NEG
49686: PUSH
49687: LD_INT 1
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 2
49696: NEG
49697: PUSH
49698: LD_INT 0
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: PUSH
49705: LD_INT 2
49707: NEG
49708: PUSH
49709: LD_INT 1
49711: NEG
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: LD_INT 2
49719: NEG
49720: PUSH
49721: LD_INT 2
49723: NEG
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: LIST
49733: LIST
49734: LIST
49735: LIST
49736: LIST
49737: LIST
49738: LIST
49739: LIST
49740: LIST
49741: LIST
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: LIST
49749: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49750: LD_ADDR_VAR 0 22
49754: PUSH
49755: LD_INT 0
49757: PUSH
49758: LD_INT 0
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 0
49767: PUSH
49768: LD_INT 1
49770: NEG
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 1
49778: PUSH
49779: LD_INT 0
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 1
49788: PUSH
49789: LD_INT 1
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 0
49798: PUSH
49799: LD_INT 1
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 1
49808: NEG
49809: PUSH
49810: LD_INT 0
49812: PUSH
49813: EMPTY
49814: LIST
49815: LIST
49816: PUSH
49817: LD_INT 1
49819: NEG
49820: PUSH
49821: LD_INT 1
49823: NEG
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 1
49831: NEG
49832: PUSH
49833: LD_INT 2
49835: NEG
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 0
49843: PUSH
49844: LD_INT 2
49846: NEG
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 1
49854: PUSH
49855: LD_INT 1
49857: NEG
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 2
49865: PUSH
49866: LD_INT 0
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 2
49875: PUSH
49876: LD_INT 1
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 2
49885: PUSH
49886: LD_INT 2
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 1
49895: PUSH
49896: LD_INT 2
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 0
49905: PUSH
49906: LD_INT 2
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 1
49915: NEG
49916: PUSH
49917: LD_INT 1
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: LD_INT 2
49926: NEG
49927: PUSH
49928: LD_INT 0
49930: PUSH
49931: EMPTY
49932: LIST
49933: LIST
49934: PUSH
49935: LD_INT 2
49937: NEG
49938: PUSH
49939: LD_INT 1
49941: NEG
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 2
49949: NEG
49950: PUSH
49951: LD_INT 2
49953: NEG
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49980: LD_ADDR_VAR 0 23
49984: PUSH
49985: LD_INT 0
49987: PUSH
49988: LD_INT 0
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 0
49997: PUSH
49998: LD_INT 1
50000: NEG
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 1
50008: PUSH
50009: LD_INT 0
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 1
50018: PUSH
50019: LD_INT 1
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: LD_INT 0
50028: PUSH
50029: LD_INT 1
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: LD_INT 1
50038: NEG
50039: PUSH
50040: LD_INT 0
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: LD_INT 1
50049: NEG
50050: PUSH
50051: LD_INT 1
50053: NEG
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: LD_INT 1
50061: NEG
50062: PUSH
50063: LD_INT 2
50065: NEG
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 0
50073: PUSH
50074: LD_INT 2
50076: NEG
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: LD_INT 1
50084: PUSH
50085: LD_INT 1
50087: NEG
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 2
50095: PUSH
50096: LD_INT 0
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: LD_INT 2
50105: PUSH
50106: LD_INT 1
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: LD_INT 2
50115: PUSH
50116: LD_INT 2
50118: PUSH
50119: EMPTY
50120: LIST
50121: LIST
50122: PUSH
50123: LD_INT 1
50125: PUSH
50126: LD_INT 2
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: PUSH
50133: LD_INT 0
50135: PUSH
50136: LD_INT 2
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: LD_INT 1
50145: NEG
50146: PUSH
50147: LD_INT 1
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 2
50156: NEG
50157: PUSH
50158: LD_INT 0
50160: PUSH
50161: EMPTY
50162: LIST
50163: LIST
50164: PUSH
50165: LD_INT 2
50167: NEG
50168: PUSH
50169: LD_INT 1
50171: NEG
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 2
50179: NEG
50180: PUSH
50181: LD_INT 2
50183: NEG
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 2
50191: NEG
50192: PUSH
50193: LD_INT 3
50195: NEG
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 1
50203: NEG
50204: PUSH
50205: LD_INT 3
50207: NEG
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 1
50215: PUSH
50216: LD_INT 2
50218: NEG
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 2
50226: PUSH
50227: LD_INT 1
50229: NEG
50230: PUSH
50231: EMPTY
50232: LIST
50233: LIST
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: LIST
50255: LIST
50256: LIST
50257: LIST
50258: LIST
50259: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
50260: LD_ADDR_VAR 0 24
50264: PUSH
50265: LD_INT 0
50267: PUSH
50268: LD_INT 0
50270: PUSH
50271: EMPTY
50272: LIST
50273: LIST
50274: PUSH
50275: LD_INT 0
50277: PUSH
50278: LD_INT 1
50280: NEG
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: LD_INT 1
50288: PUSH
50289: LD_INT 0
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: PUSH
50296: LD_INT 1
50298: PUSH
50299: LD_INT 1
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 0
50308: PUSH
50309: LD_INT 1
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: PUSH
50316: LD_INT 1
50318: NEG
50319: PUSH
50320: LD_INT 0
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 1
50329: NEG
50330: PUSH
50331: LD_INT 1
50333: NEG
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: PUSH
50339: LD_INT 1
50341: NEG
50342: PUSH
50343: LD_INT 2
50345: NEG
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: PUSH
50351: LD_INT 0
50353: PUSH
50354: LD_INT 2
50356: NEG
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 1
50364: PUSH
50365: LD_INT 1
50367: NEG
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: LD_INT 2
50375: PUSH
50376: LD_INT 0
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: PUSH
50383: LD_INT 2
50385: PUSH
50386: LD_INT 1
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 2
50395: PUSH
50396: LD_INT 2
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: LD_INT 1
50405: PUSH
50406: LD_INT 2
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: PUSH
50413: LD_INT 0
50415: PUSH
50416: LD_INT 2
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 1
50425: NEG
50426: PUSH
50427: LD_INT 1
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 2
50436: NEG
50437: PUSH
50438: LD_INT 0
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 2
50447: NEG
50448: PUSH
50449: LD_INT 1
50451: NEG
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 2
50459: NEG
50460: PUSH
50461: LD_INT 2
50463: NEG
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 1
50471: PUSH
50472: LD_INT 2
50474: NEG
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: PUSH
50480: LD_INT 2
50482: PUSH
50483: LD_INT 1
50485: NEG
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: PUSH
50491: LD_INT 3
50493: PUSH
50494: LD_INT 1
50496: PUSH
50497: EMPTY
50498: LIST
50499: LIST
50500: PUSH
50501: LD_INT 3
50503: PUSH
50504: LD_INT 2
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: LIST
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: LIST
50523: LIST
50524: LIST
50525: LIST
50526: LIST
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
50536: LD_ADDR_VAR 0 25
50540: PUSH
50541: LD_INT 0
50543: PUSH
50544: LD_INT 0
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 0
50553: PUSH
50554: LD_INT 1
50556: NEG
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 1
50564: PUSH
50565: LD_INT 0
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 1
50574: PUSH
50575: LD_INT 1
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 0
50584: PUSH
50585: LD_INT 1
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: PUSH
50592: LD_INT 1
50594: NEG
50595: PUSH
50596: LD_INT 0
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 1
50605: NEG
50606: PUSH
50607: LD_INT 1
50609: NEG
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 1
50617: NEG
50618: PUSH
50619: LD_INT 2
50621: NEG
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 0
50629: PUSH
50630: LD_INT 2
50632: NEG
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 1
50640: PUSH
50641: LD_INT 1
50643: NEG
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 2
50651: PUSH
50652: LD_INT 0
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 2
50661: PUSH
50662: LD_INT 1
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 2
50671: PUSH
50672: LD_INT 2
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 1
50681: PUSH
50682: LD_INT 2
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 0
50691: PUSH
50692: LD_INT 2
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: PUSH
50699: LD_INT 1
50701: NEG
50702: PUSH
50703: LD_INT 1
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 2
50712: NEG
50713: PUSH
50714: LD_INT 0
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 2
50723: NEG
50724: PUSH
50725: LD_INT 1
50727: NEG
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 2
50735: NEG
50736: PUSH
50737: LD_INT 2
50739: NEG
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 3
50747: PUSH
50748: LD_INT 1
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 3
50757: PUSH
50758: LD_INT 2
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 2
50767: PUSH
50768: LD_INT 3
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 1
50777: PUSH
50778: LD_INT 3
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50810: LD_ADDR_VAR 0 26
50814: PUSH
50815: LD_INT 0
50817: PUSH
50818: LD_INT 0
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 0
50827: PUSH
50828: LD_INT 1
50830: NEG
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 1
50838: PUSH
50839: LD_INT 0
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 1
50848: PUSH
50849: LD_INT 1
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: LD_INT 0
50858: PUSH
50859: LD_INT 1
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 1
50868: NEG
50869: PUSH
50870: LD_INT 0
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 1
50879: NEG
50880: PUSH
50881: LD_INT 1
50883: NEG
50884: PUSH
50885: EMPTY
50886: LIST
50887: LIST
50888: PUSH
50889: LD_INT 1
50891: NEG
50892: PUSH
50893: LD_INT 2
50895: NEG
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: PUSH
50901: LD_INT 0
50903: PUSH
50904: LD_INT 2
50906: NEG
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 1
50914: PUSH
50915: LD_INT 1
50917: NEG
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: LD_INT 2
50925: PUSH
50926: LD_INT 0
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 2
50935: PUSH
50936: LD_INT 1
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: LD_INT 2
50945: PUSH
50946: LD_INT 2
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 1
50955: PUSH
50956: LD_INT 2
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 0
50965: PUSH
50966: LD_INT 2
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 1
50975: NEG
50976: PUSH
50977: LD_INT 1
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 2
50986: NEG
50987: PUSH
50988: LD_INT 0
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 2
50997: NEG
50998: PUSH
50999: LD_INT 1
51001: NEG
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 2
51009: NEG
51010: PUSH
51011: LD_INT 2
51013: NEG
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 2
51021: PUSH
51022: LD_INT 3
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 1
51031: PUSH
51032: LD_INT 3
51034: PUSH
51035: EMPTY
51036: LIST
51037: LIST
51038: PUSH
51039: LD_INT 1
51041: NEG
51042: PUSH
51043: LD_INT 2
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 2
51052: NEG
51053: PUSH
51054: LD_INT 1
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51086: LD_ADDR_VAR 0 27
51090: PUSH
51091: LD_INT 0
51093: PUSH
51094: LD_INT 0
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 0
51103: PUSH
51104: LD_INT 1
51106: NEG
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 1
51114: PUSH
51115: LD_INT 0
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 1
51124: PUSH
51125: LD_INT 1
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 0
51134: PUSH
51135: LD_INT 1
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: PUSH
51142: LD_INT 1
51144: NEG
51145: PUSH
51146: LD_INT 0
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: PUSH
51153: LD_INT 1
51155: NEG
51156: PUSH
51157: LD_INT 1
51159: NEG
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 1
51167: NEG
51168: PUSH
51169: LD_INT 2
51171: NEG
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 0
51179: PUSH
51180: LD_INT 2
51182: NEG
51183: PUSH
51184: EMPTY
51185: LIST
51186: LIST
51187: PUSH
51188: LD_INT 1
51190: PUSH
51191: LD_INT 1
51193: NEG
51194: PUSH
51195: EMPTY
51196: LIST
51197: LIST
51198: PUSH
51199: LD_INT 2
51201: PUSH
51202: LD_INT 0
51204: PUSH
51205: EMPTY
51206: LIST
51207: LIST
51208: PUSH
51209: LD_INT 2
51211: PUSH
51212: LD_INT 1
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 2
51221: PUSH
51222: LD_INT 2
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 1
51231: PUSH
51232: LD_INT 2
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 0
51241: PUSH
51242: LD_INT 2
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 1
51251: NEG
51252: PUSH
51253: LD_INT 1
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 2
51262: NEG
51263: PUSH
51264: LD_INT 0
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 2
51273: NEG
51274: PUSH
51275: LD_INT 1
51277: NEG
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 2
51285: NEG
51286: PUSH
51287: LD_INT 2
51289: NEG
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: PUSH
51295: LD_INT 1
51297: NEG
51298: PUSH
51299: LD_INT 2
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: PUSH
51306: LD_INT 2
51308: NEG
51309: PUSH
51310: LD_INT 1
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: LD_INT 3
51319: NEG
51320: PUSH
51321: LD_INT 1
51323: NEG
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: LD_INT 3
51331: NEG
51332: PUSH
51333: LD_INT 2
51335: NEG
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51366: LD_ADDR_VAR 0 28
51370: PUSH
51371: LD_INT 0
51373: PUSH
51374: LD_INT 0
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 0
51383: PUSH
51384: LD_INT 1
51386: NEG
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: LD_INT 1
51394: PUSH
51395: LD_INT 0
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 1
51404: PUSH
51405: LD_INT 1
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 0
51414: PUSH
51415: LD_INT 1
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 1
51424: NEG
51425: PUSH
51426: LD_INT 0
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 1
51435: NEG
51436: PUSH
51437: LD_INT 1
51439: NEG
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 1
51447: NEG
51448: PUSH
51449: LD_INT 2
51451: NEG
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 0
51459: PUSH
51460: LD_INT 2
51462: NEG
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 1
51470: PUSH
51471: LD_INT 1
51473: NEG
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 2
51481: PUSH
51482: LD_INT 0
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: LD_INT 2
51491: PUSH
51492: LD_INT 1
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: LD_INT 2
51501: PUSH
51502: LD_INT 2
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 1
51511: PUSH
51512: LD_INT 2
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: LD_INT 0
51521: PUSH
51522: LD_INT 2
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: LD_INT 1
51531: NEG
51532: PUSH
51533: LD_INT 1
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 2
51542: NEG
51543: PUSH
51544: LD_INT 0
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 2
51553: NEG
51554: PUSH
51555: LD_INT 1
51557: NEG
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 2
51565: NEG
51566: PUSH
51567: LD_INT 2
51569: NEG
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 2
51577: NEG
51578: PUSH
51579: LD_INT 3
51581: NEG
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 1
51589: NEG
51590: PUSH
51591: LD_INT 3
51593: NEG
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 3
51601: NEG
51602: PUSH
51603: LD_INT 1
51605: NEG
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 3
51613: NEG
51614: PUSH
51615: LD_INT 2
51617: NEG
51618: PUSH
51619: EMPTY
51620: LIST
51621: LIST
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: LIST
51645: LIST
51646: LIST
51647: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51648: LD_ADDR_VAR 0 29
51652: PUSH
51653: LD_INT 0
51655: PUSH
51656: LD_INT 0
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 0
51665: PUSH
51666: LD_INT 1
51668: NEG
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 1
51676: PUSH
51677: LD_INT 0
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 1
51686: PUSH
51687: LD_INT 1
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 0
51696: PUSH
51697: LD_INT 1
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 1
51706: NEG
51707: PUSH
51708: LD_INT 0
51710: PUSH
51711: EMPTY
51712: LIST
51713: LIST
51714: PUSH
51715: LD_INT 1
51717: NEG
51718: PUSH
51719: LD_INT 1
51721: NEG
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 1
51729: NEG
51730: PUSH
51731: LD_INT 2
51733: NEG
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 0
51741: PUSH
51742: LD_INT 2
51744: NEG
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 1
51752: PUSH
51753: LD_INT 1
51755: NEG
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 2
51763: PUSH
51764: LD_INT 0
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 2
51773: PUSH
51774: LD_INT 1
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 1
51783: PUSH
51784: LD_INT 2
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: LD_INT 0
51793: PUSH
51794: LD_INT 2
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: LD_INT 1
51803: NEG
51804: PUSH
51805: LD_INT 1
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: PUSH
51812: LD_INT 2
51814: NEG
51815: PUSH
51816: LD_INT 1
51818: NEG
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: PUSH
51824: LD_INT 2
51826: NEG
51827: PUSH
51828: LD_INT 2
51830: NEG
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 2
51838: NEG
51839: PUSH
51840: LD_INT 3
51842: NEG
51843: PUSH
51844: EMPTY
51845: LIST
51846: LIST
51847: PUSH
51848: LD_INT 2
51850: PUSH
51851: LD_INT 1
51853: NEG
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 3
51861: PUSH
51862: LD_INT 1
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 1
51871: PUSH
51872: LD_INT 3
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: LD_INT 1
51881: NEG
51882: PUSH
51883: LD_INT 2
51885: PUSH
51886: EMPTY
51887: LIST
51888: LIST
51889: PUSH
51890: LD_INT 3
51892: NEG
51893: PUSH
51894: LD_INT 2
51896: NEG
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: LIST
51908: LIST
51909: LIST
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: LIST
51925: LIST
51926: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51927: LD_ADDR_VAR 0 30
51931: PUSH
51932: LD_INT 0
51934: PUSH
51935: LD_INT 0
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 0
51944: PUSH
51945: LD_INT 1
51947: NEG
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 1
51955: PUSH
51956: LD_INT 0
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 1
51965: PUSH
51966: LD_INT 1
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 0
51975: PUSH
51976: LD_INT 1
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: LD_INT 1
51985: NEG
51986: PUSH
51987: LD_INT 0
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: LD_INT 1
51996: NEG
51997: PUSH
51998: LD_INT 1
52000: NEG
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: LD_INT 1
52008: NEG
52009: PUSH
52010: LD_INT 2
52012: NEG
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: LD_INT 0
52020: PUSH
52021: LD_INT 2
52023: NEG
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: LD_INT 1
52031: PUSH
52032: LD_INT 1
52034: NEG
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: LD_INT 2
52042: PUSH
52043: LD_INT 0
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: LD_INT 2
52052: PUSH
52053: LD_INT 1
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 2
52062: PUSH
52063: LD_INT 2
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 1
52072: PUSH
52073: LD_INT 2
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 1
52082: NEG
52083: PUSH
52084: LD_INT 1
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: LD_INT 2
52093: NEG
52094: PUSH
52095: LD_INT 0
52097: PUSH
52098: EMPTY
52099: LIST
52100: LIST
52101: PUSH
52102: LD_INT 2
52104: NEG
52105: PUSH
52106: LD_INT 1
52108: NEG
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 1
52116: NEG
52117: PUSH
52118: LD_INT 3
52120: NEG
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 1
52128: PUSH
52129: LD_INT 2
52131: NEG
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: PUSH
52137: LD_INT 3
52139: PUSH
52140: LD_INT 2
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 2
52149: PUSH
52150: LD_INT 3
52152: PUSH
52153: EMPTY
52154: LIST
52155: LIST
52156: PUSH
52157: LD_INT 2
52159: NEG
52160: PUSH
52161: LD_INT 1
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 3
52170: NEG
52171: PUSH
52172: LD_INT 1
52174: NEG
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52205: LD_ADDR_VAR 0 31
52209: PUSH
52210: LD_INT 0
52212: PUSH
52213: LD_INT 0
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 0
52222: PUSH
52223: LD_INT 1
52225: NEG
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 1
52233: PUSH
52234: LD_INT 0
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 1
52243: PUSH
52244: LD_INT 1
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 0
52253: PUSH
52254: LD_INT 1
52256: PUSH
52257: EMPTY
52258: LIST
52259: LIST
52260: PUSH
52261: LD_INT 1
52263: NEG
52264: PUSH
52265: LD_INT 0
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: PUSH
52272: LD_INT 1
52274: NEG
52275: PUSH
52276: LD_INT 1
52278: NEG
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: PUSH
52284: LD_INT 1
52286: NEG
52287: PUSH
52288: LD_INT 2
52290: NEG
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: LD_INT 1
52298: PUSH
52299: LD_INT 1
52301: NEG
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 2
52309: PUSH
52310: LD_INT 0
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: LD_INT 2
52319: PUSH
52320: LD_INT 1
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: PUSH
52327: LD_INT 2
52329: PUSH
52330: LD_INT 2
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PUSH
52337: LD_INT 1
52339: PUSH
52340: LD_INT 2
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 0
52349: PUSH
52350: LD_INT 2
52352: PUSH
52353: EMPTY
52354: LIST
52355: LIST
52356: PUSH
52357: LD_INT 1
52359: NEG
52360: PUSH
52361: LD_INT 1
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: LD_INT 2
52370: NEG
52371: PUSH
52372: LD_INT 1
52374: NEG
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 2
52382: NEG
52383: PUSH
52384: LD_INT 2
52386: NEG
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 2
52394: NEG
52395: PUSH
52396: LD_INT 3
52398: NEG
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: LD_INT 2
52406: PUSH
52407: LD_INT 1
52409: NEG
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: PUSH
52415: LD_INT 3
52417: PUSH
52418: LD_INT 1
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 1
52427: PUSH
52428: LD_INT 3
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 1
52437: NEG
52438: PUSH
52439: LD_INT 2
52441: PUSH
52442: EMPTY
52443: LIST
52444: LIST
52445: PUSH
52446: LD_INT 3
52448: NEG
52449: PUSH
52450: LD_INT 2
52452: NEG
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: EMPTY
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: LIST
52464: LIST
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52483: LD_ADDR_VAR 0 32
52487: PUSH
52488: LD_INT 0
52490: PUSH
52491: LD_INT 0
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 0
52500: PUSH
52501: LD_INT 1
52503: NEG
52504: PUSH
52505: EMPTY
52506: LIST
52507: LIST
52508: PUSH
52509: LD_INT 1
52511: PUSH
52512: LD_INT 0
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 1
52521: PUSH
52522: LD_INT 1
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 0
52531: PUSH
52532: LD_INT 1
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: PUSH
52539: LD_INT 1
52541: NEG
52542: PUSH
52543: LD_INT 0
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 1
52552: NEG
52553: PUSH
52554: LD_INT 1
52556: NEG
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 1
52564: NEG
52565: PUSH
52566: LD_INT 2
52568: NEG
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: LD_INT 0
52576: PUSH
52577: LD_INT 2
52579: NEG
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 1
52587: PUSH
52588: LD_INT 1
52590: NEG
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 2
52598: PUSH
52599: LD_INT 1
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 2
52608: PUSH
52609: LD_INT 2
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 1
52618: PUSH
52619: LD_INT 2
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 0
52628: PUSH
52629: LD_INT 2
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 1
52638: NEG
52639: PUSH
52640: LD_INT 1
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: LD_INT 2
52649: NEG
52650: PUSH
52651: LD_INT 0
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 2
52660: NEG
52661: PUSH
52662: LD_INT 1
52664: NEG
52665: PUSH
52666: EMPTY
52667: LIST
52668: LIST
52669: PUSH
52670: LD_INT 1
52672: NEG
52673: PUSH
52674: LD_INT 3
52676: NEG
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 1
52684: PUSH
52685: LD_INT 2
52687: NEG
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 3
52695: PUSH
52696: LD_INT 2
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 2
52705: PUSH
52706: LD_INT 3
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 2
52715: NEG
52716: PUSH
52717: LD_INT 1
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 3
52726: NEG
52727: PUSH
52728: LD_INT 1
52730: NEG
52731: PUSH
52732: EMPTY
52733: LIST
52734: LIST
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52761: LD_ADDR_VAR 0 33
52765: PUSH
52766: LD_INT 0
52768: PUSH
52769: LD_INT 0
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 0
52778: PUSH
52779: LD_INT 1
52781: NEG
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: PUSH
52787: LD_INT 1
52789: PUSH
52790: LD_INT 0
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 1
52799: PUSH
52800: LD_INT 1
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 0
52809: PUSH
52810: LD_INT 1
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 1
52819: NEG
52820: PUSH
52821: LD_INT 0
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 1
52830: NEG
52831: PUSH
52832: LD_INT 1
52834: NEG
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 1
52842: NEG
52843: PUSH
52844: LD_INT 2
52846: NEG
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 1
52854: PUSH
52855: LD_INT 1
52857: NEG
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: LD_INT 2
52865: PUSH
52866: LD_INT 0
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 2
52875: PUSH
52876: LD_INT 1
52878: PUSH
52879: EMPTY
52880: LIST
52881: LIST
52882: PUSH
52883: LD_INT 1
52885: PUSH
52886: LD_INT 2
52888: PUSH
52889: EMPTY
52890: LIST
52891: LIST
52892: PUSH
52893: LD_INT 0
52895: PUSH
52896: LD_INT 2
52898: PUSH
52899: EMPTY
52900: LIST
52901: LIST
52902: PUSH
52903: LD_INT 1
52905: NEG
52906: PUSH
52907: LD_INT 1
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 2
52916: NEG
52917: PUSH
52918: LD_INT 0
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 2
52927: NEG
52928: PUSH
52929: LD_INT 1
52931: NEG
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 2
52939: NEG
52940: PUSH
52941: LD_INT 2
52943: NEG
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: LD_INT 2
52951: NEG
52952: PUSH
52953: LD_INT 3
52955: NEG
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: PUSH
52961: LD_INT 2
52963: PUSH
52964: LD_INT 1
52966: NEG
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: PUSH
52972: LD_INT 3
52974: PUSH
52975: LD_INT 1
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 1
52984: PUSH
52985: LD_INT 3
52987: PUSH
52988: EMPTY
52989: LIST
52990: LIST
52991: PUSH
52992: LD_INT 1
52994: NEG
52995: PUSH
52996: LD_INT 2
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 3
53005: NEG
53006: PUSH
53007: LD_INT 2
53009: NEG
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53040: LD_ADDR_VAR 0 34
53044: PUSH
53045: LD_INT 0
53047: PUSH
53048: LD_INT 0
53050: PUSH
53051: EMPTY
53052: LIST
53053: LIST
53054: PUSH
53055: LD_INT 0
53057: PUSH
53058: LD_INT 1
53060: NEG
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: PUSH
53066: LD_INT 1
53068: PUSH
53069: LD_INT 0
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 1
53078: PUSH
53079: LD_INT 1
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 0
53088: PUSH
53089: LD_INT 1
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: LD_INT 1
53098: NEG
53099: PUSH
53100: LD_INT 0
53102: PUSH
53103: EMPTY
53104: LIST
53105: LIST
53106: PUSH
53107: LD_INT 1
53109: NEG
53110: PUSH
53111: LD_INT 1
53113: NEG
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: PUSH
53119: LD_INT 1
53121: NEG
53122: PUSH
53123: LD_INT 2
53125: NEG
53126: PUSH
53127: EMPTY
53128: LIST
53129: LIST
53130: PUSH
53131: LD_INT 0
53133: PUSH
53134: LD_INT 2
53136: NEG
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: PUSH
53142: LD_INT 1
53144: PUSH
53145: LD_INT 1
53147: NEG
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 2
53155: PUSH
53156: LD_INT 1
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 2
53165: PUSH
53166: LD_INT 2
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 1
53175: PUSH
53176: LD_INT 2
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 1
53185: NEG
53186: PUSH
53187: LD_INT 1
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 2
53196: NEG
53197: PUSH
53198: LD_INT 0
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 2
53207: NEG
53208: PUSH
53209: LD_INT 1
53211: NEG
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 2
53219: NEG
53220: PUSH
53221: LD_INT 2
53223: NEG
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 1
53231: NEG
53232: PUSH
53233: LD_INT 3
53235: NEG
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: LD_INT 1
53243: PUSH
53244: LD_INT 2
53246: NEG
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 3
53254: PUSH
53255: LD_INT 2
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 2
53264: PUSH
53265: LD_INT 3
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 2
53274: NEG
53275: PUSH
53276: LD_INT 1
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 3
53285: NEG
53286: PUSH
53287: LD_INT 1
53289: NEG
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53320: LD_ADDR_VAR 0 35
53324: PUSH
53325: LD_INT 0
53327: PUSH
53328: LD_INT 0
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: LD_INT 0
53337: PUSH
53338: LD_INT 1
53340: NEG
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 1
53348: PUSH
53349: LD_INT 0
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 1
53358: PUSH
53359: LD_INT 1
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 0
53368: PUSH
53369: LD_INT 1
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 1
53378: NEG
53379: PUSH
53380: LD_INT 0
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: PUSH
53387: LD_INT 1
53389: NEG
53390: PUSH
53391: LD_INT 1
53393: NEG
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 2
53401: PUSH
53402: LD_INT 1
53404: PUSH
53405: EMPTY
53406: LIST
53407: LIST
53408: PUSH
53409: LD_INT 2
53411: NEG
53412: PUSH
53413: LD_INT 1
53415: NEG
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53432: LD_ADDR_VAR 0 36
53436: PUSH
53437: LD_INT 0
53439: PUSH
53440: LD_INT 0
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 0
53449: PUSH
53450: LD_INT 1
53452: NEG
53453: PUSH
53454: EMPTY
53455: LIST
53456: LIST
53457: PUSH
53458: LD_INT 1
53460: PUSH
53461: LD_INT 0
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: LD_INT 1
53470: PUSH
53471: LD_INT 1
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: LD_INT 0
53480: PUSH
53481: LD_INT 1
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: PUSH
53488: LD_INT 1
53490: NEG
53491: PUSH
53492: LD_INT 0
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: PUSH
53499: LD_INT 1
53501: NEG
53502: PUSH
53503: LD_INT 1
53505: NEG
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: LD_INT 1
53513: NEG
53514: PUSH
53515: LD_INT 2
53517: NEG
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 1
53525: PUSH
53526: LD_INT 2
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: LIST
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53544: LD_ADDR_VAR 0 37
53548: PUSH
53549: LD_INT 0
53551: PUSH
53552: LD_INT 0
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 0
53561: PUSH
53562: LD_INT 1
53564: NEG
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 1
53572: PUSH
53573: LD_INT 0
53575: PUSH
53576: EMPTY
53577: LIST
53578: LIST
53579: PUSH
53580: LD_INT 1
53582: PUSH
53583: LD_INT 1
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 0
53592: PUSH
53593: LD_INT 1
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 1
53602: NEG
53603: PUSH
53604: LD_INT 0
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 1
53613: NEG
53614: PUSH
53615: LD_INT 1
53617: NEG
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: LD_INT 1
53625: PUSH
53626: LD_INT 1
53628: NEG
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 1
53636: NEG
53637: PUSH
53638: LD_INT 1
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53656: LD_ADDR_VAR 0 38
53660: PUSH
53661: LD_INT 0
53663: PUSH
53664: LD_INT 0
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 0
53673: PUSH
53674: LD_INT 1
53676: NEG
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 1
53684: PUSH
53685: LD_INT 0
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: LD_INT 1
53694: PUSH
53695: LD_INT 1
53697: PUSH
53698: EMPTY
53699: LIST
53700: LIST
53701: PUSH
53702: LD_INT 0
53704: PUSH
53705: LD_INT 1
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 1
53714: NEG
53715: PUSH
53716: LD_INT 0
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 1
53725: NEG
53726: PUSH
53727: LD_INT 1
53729: NEG
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 2
53737: PUSH
53738: LD_INT 1
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 2
53747: NEG
53748: PUSH
53749: LD_INT 1
53751: NEG
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53768: LD_ADDR_VAR 0 39
53772: PUSH
53773: LD_INT 0
53775: PUSH
53776: LD_INT 0
53778: PUSH
53779: EMPTY
53780: LIST
53781: LIST
53782: PUSH
53783: LD_INT 0
53785: PUSH
53786: LD_INT 1
53788: NEG
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: LD_INT 1
53796: PUSH
53797: LD_INT 0
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 1
53806: PUSH
53807: LD_INT 1
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 0
53816: PUSH
53817: LD_INT 1
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: PUSH
53824: LD_INT 1
53826: NEG
53827: PUSH
53828: LD_INT 0
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 1
53837: NEG
53838: PUSH
53839: LD_INT 1
53841: NEG
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 1
53849: NEG
53850: PUSH
53851: LD_INT 2
53853: NEG
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 1
53861: PUSH
53862: LD_INT 2
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53880: LD_ADDR_VAR 0 40
53884: PUSH
53885: LD_INT 0
53887: PUSH
53888: LD_INT 0
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: LD_INT 0
53897: PUSH
53898: LD_INT 1
53900: NEG
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 1
53908: PUSH
53909: LD_INT 0
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 1
53918: PUSH
53919: LD_INT 1
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 0
53928: PUSH
53929: LD_INT 1
53931: PUSH
53932: EMPTY
53933: LIST
53934: LIST
53935: PUSH
53936: LD_INT 1
53938: NEG
53939: PUSH
53940: LD_INT 0
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PUSH
53947: LD_INT 1
53949: NEG
53950: PUSH
53951: LD_INT 1
53953: NEG
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: LD_INT 1
53961: PUSH
53962: LD_INT 1
53964: NEG
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 1
53972: NEG
53973: PUSH
53974: LD_INT 1
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: LIST
53985: LIST
53986: LIST
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53992: LD_ADDR_VAR 0 41
53996: PUSH
53997: LD_INT 0
53999: PUSH
54000: LD_INT 0
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: LD_INT 0
54009: PUSH
54010: LD_INT 1
54012: NEG
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 1
54020: PUSH
54021: LD_INT 0
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 1
54030: PUSH
54031: LD_INT 1
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: LD_INT 0
54040: PUSH
54041: LD_INT 1
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 1
54050: NEG
54051: PUSH
54052: LD_INT 0
54054: PUSH
54055: EMPTY
54056: LIST
54057: LIST
54058: PUSH
54059: LD_INT 1
54061: NEG
54062: PUSH
54063: LD_INT 1
54065: NEG
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 1
54073: NEG
54074: PUSH
54075: LD_INT 2
54077: NEG
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: LD_INT 1
54085: PUSH
54086: LD_INT 1
54088: NEG
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 2
54096: PUSH
54097: LD_INT 0
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 2
54106: PUSH
54107: LD_INT 1
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 2
54116: PUSH
54117: LD_INT 2
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: LD_INT 1
54126: PUSH
54127: LD_INT 2
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: LD_INT 1
54136: NEG
54137: PUSH
54138: LD_INT 1
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 2
54147: NEG
54148: PUSH
54149: LD_INT 0
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: LD_INT 2
54158: NEG
54159: PUSH
54160: LD_INT 1
54162: NEG
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 2
54170: NEG
54171: PUSH
54172: LD_INT 2
54174: NEG
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 2
54182: NEG
54183: PUSH
54184: LD_INT 3
54186: NEG
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 2
54194: PUSH
54195: LD_INT 1
54197: NEG
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 3
54205: PUSH
54206: LD_INT 0
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 3
54215: PUSH
54216: LD_INT 1
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 3
54225: PUSH
54226: LD_INT 2
54228: PUSH
54229: EMPTY
54230: LIST
54231: LIST
54232: PUSH
54233: LD_INT 3
54235: PUSH
54236: LD_INT 3
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: PUSH
54243: LD_INT 2
54245: PUSH
54246: LD_INT 3
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 2
54255: NEG
54256: PUSH
54257: LD_INT 1
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 3
54266: NEG
54267: PUSH
54268: LD_INT 0
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 3
54277: NEG
54278: PUSH
54279: LD_INT 1
54281: NEG
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: LD_INT 3
54289: NEG
54290: PUSH
54291: LD_INT 2
54293: NEG
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: LD_INT 3
54301: NEG
54302: PUSH
54303: LD_INT 3
54305: NEG
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54342: LD_ADDR_VAR 0 42
54346: PUSH
54347: LD_INT 0
54349: PUSH
54350: LD_INT 0
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: LD_INT 0
54359: PUSH
54360: LD_INT 1
54362: NEG
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 1
54370: PUSH
54371: LD_INT 0
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 1
54380: PUSH
54381: LD_INT 1
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: LD_INT 0
54390: PUSH
54391: LD_INT 1
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: LD_INT 1
54400: NEG
54401: PUSH
54402: LD_INT 0
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 1
54411: NEG
54412: PUSH
54413: LD_INT 1
54415: NEG
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 1
54423: NEG
54424: PUSH
54425: LD_INT 2
54427: NEG
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 0
54435: PUSH
54436: LD_INT 2
54438: NEG
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 1
54446: PUSH
54447: LD_INT 1
54449: NEG
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 2
54457: PUSH
54458: LD_INT 1
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 2
54467: PUSH
54468: LD_INT 2
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 1
54477: PUSH
54478: LD_INT 2
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 0
54487: PUSH
54488: LD_INT 2
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 1
54497: NEG
54498: PUSH
54499: LD_INT 1
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 2
54508: NEG
54509: PUSH
54510: LD_INT 1
54512: NEG
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 2
54520: NEG
54521: PUSH
54522: LD_INT 2
54524: NEG
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 2
54532: NEG
54533: PUSH
54534: LD_INT 3
54536: NEG
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: PUSH
54542: LD_INT 1
54544: NEG
54545: PUSH
54546: LD_INT 3
54548: NEG
54549: PUSH
54550: EMPTY
54551: LIST
54552: LIST
54553: PUSH
54554: LD_INT 0
54556: PUSH
54557: LD_INT 3
54559: NEG
54560: PUSH
54561: EMPTY
54562: LIST
54563: LIST
54564: PUSH
54565: LD_INT 1
54567: PUSH
54568: LD_INT 2
54570: NEG
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: LD_INT 3
54578: PUSH
54579: LD_INT 2
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 3
54588: PUSH
54589: LD_INT 3
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 2
54598: PUSH
54599: LD_INT 3
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 1
54608: PUSH
54609: LD_INT 3
54611: PUSH
54612: EMPTY
54613: LIST
54614: LIST
54615: PUSH
54616: LD_INT 0
54618: PUSH
54619: LD_INT 3
54621: PUSH
54622: EMPTY
54623: LIST
54624: LIST
54625: PUSH
54626: LD_INT 1
54628: NEG
54629: PUSH
54630: LD_INT 2
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 3
54639: NEG
54640: PUSH
54641: LD_INT 2
54643: NEG
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 3
54651: NEG
54652: PUSH
54653: LD_INT 3
54655: NEG
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54692: LD_ADDR_VAR 0 43
54696: PUSH
54697: LD_INT 0
54699: PUSH
54700: LD_INT 0
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 0
54709: PUSH
54710: LD_INT 1
54712: NEG
54713: PUSH
54714: EMPTY
54715: LIST
54716: LIST
54717: PUSH
54718: LD_INT 1
54720: PUSH
54721: LD_INT 0
54723: PUSH
54724: EMPTY
54725: LIST
54726: LIST
54727: PUSH
54728: LD_INT 1
54730: PUSH
54731: LD_INT 1
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 0
54740: PUSH
54741: LD_INT 1
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 1
54750: NEG
54751: PUSH
54752: LD_INT 0
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 1
54761: NEG
54762: PUSH
54763: LD_INT 1
54765: NEG
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: LD_INT 1
54773: NEG
54774: PUSH
54775: LD_INT 2
54777: NEG
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 0
54785: PUSH
54786: LD_INT 2
54788: NEG
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 1
54796: PUSH
54797: LD_INT 1
54799: NEG
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 2
54807: PUSH
54808: LD_INT 0
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 2
54817: PUSH
54818: LD_INT 1
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 1
54827: PUSH
54828: LD_INT 2
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 0
54837: PUSH
54838: LD_INT 2
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 1
54847: NEG
54848: PUSH
54849: LD_INT 1
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 2
54858: NEG
54859: PUSH
54860: LD_INT 0
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 2
54869: NEG
54870: PUSH
54871: LD_INT 1
54873: NEG
54874: PUSH
54875: EMPTY
54876: LIST
54877: LIST
54878: PUSH
54879: LD_INT 1
54881: NEG
54882: PUSH
54883: LD_INT 3
54885: NEG
54886: PUSH
54887: EMPTY
54888: LIST
54889: LIST
54890: PUSH
54891: LD_INT 0
54893: PUSH
54894: LD_INT 3
54896: NEG
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 1
54904: PUSH
54905: LD_INT 2
54907: NEG
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 2
54915: PUSH
54916: LD_INT 1
54918: NEG
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 3
54926: PUSH
54927: LD_INT 0
54929: PUSH
54930: EMPTY
54931: LIST
54932: LIST
54933: PUSH
54934: LD_INT 3
54936: PUSH
54937: LD_INT 1
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 1
54946: PUSH
54947: LD_INT 3
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 0
54956: PUSH
54957: LD_INT 3
54959: PUSH
54960: EMPTY
54961: LIST
54962: LIST
54963: PUSH
54964: LD_INT 1
54966: NEG
54967: PUSH
54968: LD_INT 2
54970: PUSH
54971: EMPTY
54972: LIST
54973: LIST
54974: PUSH
54975: LD_INT 2
54977: NEG
54978: PUSH
54979: LD_INT 1
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: PUSH
54986: LD_INT 3
54988: NEG
54989: PUSH
54990: LD_INT 0
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: LD_INT 3
54999: NEG
55000: PUSH
55001: LD_INT 1
55003: NEG
55004: PUSH
55005: EMPTY
55006: LIST
55007: LIST
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: LIST
55017: LIST
55018: LIST
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: LIST
55024: LIST
55025: LIST
55026: LIST
55027: LIST
55028: LIST
55029: LIST
55030: LIST
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: LIST
55037: LIST
55038: LIST
55039: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55040: LD_ADDR_VAR 0 44
55044: PUSH
55045: LD_INT 0
55047: PUSH
55048: LD_INT 0
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 0
55057: PUSH
55058: LD_INT 1
55060: NEG
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: LD_INT 1
55068: PUSH
55069: LD_INT 0
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 1
55078: PUSH
55079: LD_INT 1
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 0
55088: PUSH
55089: LD_INT 1
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 1
55098: NEG
55099: PUSH
55100: LD_INT 0
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PUSH
55107: LD_INT 1
55109: NEG
55110: PUSH
55111: LD_INT 1
55113: NEG
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: PUSH
55119: LD_INT 1
55121: NEG
55122: PUSH
55123: LD_INT 2
55125: NEG
55126: PUSH
55127: EMPTY
55128: LIST
55129: LIST
55130: PUSH
55131: LD_INT 1
55133: PUSH
55134: LD_INT 1
55136: NEG
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 2
55144: PUSH
55145: LD_INT 0
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 2
55154: PUSH
55155: LD_INT 1
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 2
55164: PUSH
55165: LD_INT 2
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 1
55174: PUSH
55175: LD_INT 2
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 1
55184: NEG
55185: PUSH
55186: LD_INT 1
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 2
55195: NEG
55196: PUSH
55197: LD_INT 0
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 2
55206: NEG
55207: PUSH
55208: LD_INT 1
55210: NEG
55211: PUSH
55212: EMPTY
55213: LIST
55214: LIST
55215: PUSH
55216: LD_INT 2
55218: NEG
55219: PUSH
55220: LD_INT 2
55222: NEG
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: PUSH
55228: LD_INT 2
55230: NEG
55231: PUSH
55232: LD_INT 3
55234: NEG
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 2
55242: PUSH
55243: LD_INT 1
55245: NEG
55246: PUSH
55247: EMPTY
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 3
55253: PUSH
55254: LD_INT 0
55256: PUSH
55257: EMPTY
55258: LIST
55259: LIST
55260: PUSH
55261: LD_INT 3
55263: PUSH
55264: LD_INT 1
55266: PUSH
55267: EMPTY
55268: LIST
55269: LIST
55270: PUSH
55271: LD_INT 3
55273: PUSH
55274: LD_INT 2
55276: PUSH
55277: EMPTY
55278: LIST
55279: LIST
55280: PUSH
55281: LD_INT 3
55283: PUSH
55284: LD_INT 3
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: LD_INT 2
55293: PUSH
55294: LD_INT 3
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: PUSH
55301: LD_INT 2
55303: NEG
55304: PUSH
55305: LD_INT 1
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: LD_INT 3
55314: NEG
55315: PUSH
55316: LD_INT 0
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 3
55325: NEG
55326: PUSH
55327: LD_INT 1
55329: NEG
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 3
55337: NEG
55338: PUSH
55339: LD_INT 2
55341: NEG
55342: PUSH
55343: EMPTY
55344: LIST
55345: LIST
55346: PUSH
55347: LD_INT 3
55349: NEG
55350: PUSH
55351: LD_INT 3
55353: NEG
55354: PUSH
55355: EMPTY
55356: LIST
55357: LIST
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: LIST
55387: LIST
55388: LIST
55389: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55390: LD_ADDR_VAR 0 45
55394: PUSH
55395: LD_INT 0
55397: PUSH
55398: LD_INT 0
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 0
55407: PUSH
55408: LD_INT 1
55410: NEG
55411: PUSH
55412: EMPTY
55413: LIST
55414: LIST
55415: PUSH
55416: LD_INT 1
55418: PUSH
55419: LD_INT 0
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: PUSH
55426: LD_INT 1
55428: PUSH
55429: LD_INT 1
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PUSH
55436: LD_INT 0
55438: PUSH
55439: LD_INT 1
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 1
55448: NEG
55449: PUSH
55450: LD_INT 0
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 1
55459: NEG
55460: PUSH
55461: LD_INT 1
55463: NEG
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: LD_INT 1
55471: NEG
55472: PUSH
55473: LD_INT 2
55475: NEG
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 0
55483: PUSH
55484: LD_INT 2
55486: NEG
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 1
55494: PUSH
55495: LD_INT 1
55497: NEG
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 2
55505: PUSH
55506: LD_INT 1
55508: PUSH
55509: EMPTY
55510: LIST
55511: LIST
55512: PUSH
55513: LD_INT 2
55515: PUSH
55516: LD_INT 2
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PUSH
55523: LD_INT 1
55525: PUSH
55526: LD_INT 2
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 0
55535: PUSH
55536: LD_INT 2
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: PUSH
55543: LD_INT 1
55545: NEG
55546: PUSH
55547: LD_INT 1
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: PUSH
55554: LD_INT 2
55556: NEG
55557: PUSH
55558: LD_INT 1
55560: NEG
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: PUSH
55566: LD_INT 2
55568: NEG
55569: PUSH
55570: LD_INT 2
55572: NEG
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 2
55580: NEG
55581: PUSH
55582: LD_INT 3
55584: NEG
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 1
55592: NEG
55593: PUSH
55594: LD_INT 3
55596: NEG
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 0
55604: PUSH
55605: LD_INT 3
55607: NEG
55608: PUSH
55609: EMPTY
55610: LIST
55611: LIST
55612: PUSH
55613: LD_INT 1
55615: PUSH
55616: LD_INT 2
55618: NEG
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 3
55626: PUSH
55627: LD_INT 2
55629: PUSH
55630: EMPTY
55631: LIST
55632: LIST
55633: PUSH
55634: LD_INT 3
55636: PUSH
55637: LD_INT 3
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: LD_INT 2
55646: PUSH
55647: LD_INT 3
55649: PUSH
55650: EMPTY
55651: LIST
55652: LIST
55653: PUSH
55654: LD_INT 1
55656: PUSH
55657: LD_INT 3
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 0
55666: PUSH
55667: LD_INT 3
55669: PUSH
55670: EMPTY
55671: LIST
55672: LIST
55673: PUSH
55674: LD_INT 1
55676: NEG
55677: PUSH
55678: LD_INT 2
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 3
55687: NEG
55688: PUSH
55689: LD_INT 2
55691: NEG
55692: PUSH
55693: EMPTY
55694: LIST
55695: LIST
55696: PUSH
55697: LD_INT 3
55699: NEG
55700: PUSH
55701: LD_INT 3
55703: NEG
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: LIST
55723: LIST
55724: LIST
55725: LIST
55726: LIST
55727: LIST
55728: LIST
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55740: LD_ADDR_VAR 0 46
55744: PUSH
55745: LD_INT 0
55747: PUSH
55748: LD_INT 0
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: LD_INT 0
55757: PUSH
55758: LD_INT 1
55760: NEG
55761: PUSH
55762: EMPTY
55763: LIST
55764: LIST
55765: PUSH
55766: LD_INT 1
55768: PUSH
55769: LD_INT 0
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 1
55778: PUSH
55779: LD_INT 1
55781: PUSH
55782: EMPTY
55783: LIST
55784: LIST
55785: PUSH
55786: LD_INT 0
55788: PUSH
55789: LD_INT 1
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: PUSH
55796: LD_INT 1
55798: NEG
55799: PUSH
55800: LD_INT 0
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: LD_INT 1
55809: NEG
55810: PUSH
55811: LD_INT 1
55813: NEG
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 1
55821: NEG
55822: PUSH
55823: LD_INT 2
55825: NEG
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PUSH
55831: LD_INT 0
55833: PUSH
55834: LD_INT 2
55836: NEG
55837: PUSH
55838: EMPTY
55839: LIST
55840: LIST
55841: PUSH
55842: LD_INT 1
55844: PUSH
55845: LD_INT 1
55847: NEG
55848: PUSH
55849: EMPTY
55850: LIST
55851: LIST
55852: PUSH
55853: LD_INT 2
55855: PUSH
55856: LD_INT 0
55858: PUSH
55859: EMPTY
55860: LIST
55861: LIST
55862: PUSH
55863: LD_INT 2
55865: PUSH
55866: LD_INT 1
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 1
55875: PUSH
55876: LD_INT 2
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 0
55885: PUSH
55886: LD_INT 2
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 1
55895: NEG
55896: PUSH
55897: LD_INT 1
55899: PUSH
55900: EMPTY
55901: LIST
55902: LIST
55903: PUSH
55904: LD_INT 2
55906: NEG
55907: PUSH
55908: LD_INT 0
55910: PUSH
55911: EMPTY
55912: LIST
55913: LIST
55914: PUSH
55915: LD_INT 2
55917: NEG
55918: PUSH
55919: LD_INT 1
55921: NEG
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: LD_INT 1
55929: NEG
55930: PUSH
55931: LD_INT 3
55933: NEG
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 0
55941: PUSH
55942: LD_INT 3
55944: NEG
55945: PUSH
55946: EMPTY
55947: LIST
55948: LIST
55949: PUSH
55950: LD_INT 1
55952: PUSH
55953: LD_INT 2
55955: NEG
55956: PUSH
55957: EMPTY
55958: LIST
55959: LIST
55960: PUSH
55961: LD_INT 2
55963: PUSH
55964: LD_INT 1
55966: NEG
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 3
55974: PUSH
55975: LD_INT 0
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 3
55984: PUSH
55985: LD_INT 1
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 1
55994: PUSH
55995: LD_INT 3
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 0
56004: PUSH
56005: LD_INT 3
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PUSH
56012: LD_INT 1
56014: NEG
56015: PUSH
56016: LD_INT 2
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 2
56025: NEG
56026: PUSH
56027: LD_INT 1
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: PUSH
56034: LD_INT 3
56036: NEG
56037: PUSH
56038: LD_INT 0
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 3
56047: NEG
56048: PUSH
56049: LD_INT 1
56051: NEG
56052: PUSH
56053: EMPTY
56054: LIST
56055: LIST
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56088: LD_ADDR_VAR 0 47
56092: PUSH
56093: LD_INT 0
56095: PUSH
56096: LD_INT 0
56098: PUSH
56099: EMPTY
56100: LIST
56101: LIST
56102: PUSH
56103: LD_INT 0
56105: PUSH
56106: LD_INT 1
56108: NEG
56109: PUSH
56110: EMPTY
56111: LIST
56112: LIST
56113: PUSH
56114: LD_INT 1
56116: PUSH
56117: LD_INT 0
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: LD_INT 1
56126: PUSH
56127: LD_INT 1
56129: PUSH
56130: EMPTY
56131: LIST
56132: LIST
56133: PUSH
56134: LD_INT 0
56136: PUSH
56137: LD_INT 1
56139: PUSH
56140: EMPTY
56141: LIST
56142: LIST
56143: PUSH
56144: LD_INT 1
56146: NEG
56147: PUSH
56148: LD_INT 0
56150: PUSH
56151: EMPTY
56152: LIST
56153: LIST
56154: PUSH
56155: LD_INT 1
56157: NEG
56158: PUSH
56159: LD_INT 1
56161: NEG
56162: PUSH
56163: EMPTY
56164: LIST
56165: LIST
56166: PUSH
56167: LD_INT 1
56169: NEG
56170: PUSH
56171: LD_INT 2
56173: NEG
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: PUSH
56179: LD_INT 0
56181: PUSH
56182: LD_INT 2
56184: NEG
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 1
56192: PUSH
56193: LD_INT 1
56195: NEG
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 2
56203: NEG
56204: PUSH
56205: LD_INT 1
56207: NEG
56208: PUSH
56209: EMPTY
56210: LIST
56211: LIST
56212: PUSH
56213: LD_INT 2
56215: NEG
56216: PUSH
56217: LD_INT 2
56219: NEG
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: LIST
56229: LIST
56230: LIST
56231: LIST
56232: LIST
56233: LIST
56234: LIST
56235: LIST
56236: LIST
56237: LIST
56238: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56239: LD_ADDR_VAR 0 48
56243: PUSH
56244: LD_INT 0
56246: PUSH
56247: LD_INT 0
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 0
56256: PUSH
56257: LD_INT 1
56259: NEG
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 1
56267: PUSH
56268: LD_INT 0
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 1
56277: PUSH
56278: LD_INT 1
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 0
56287: PUSH
56288: LD_INT 1
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 1
56297: NEG
56298: PUSH
56299: LD_INT 0
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: LD_INT 1
56308: NEG
56309: PUSH
56310: LD_INT 1
56312: NEG
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: LD_INT 1
56320: NEG
56321: PUSH
56322: LD_INT 2
56324: NEG
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 0
56332: PUSH
56333: LD_INT 2
56335: NEG
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: LD_INT 1
56343: PUSH
56344: LD_INT 1
56346: NEG
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 2
56354: PUSH
56355: LD_INT 0
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 2
56364: PUSH
56365: LD_INT 1
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: LIST
56385: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56386: LD_ADDR_VAR 0 49
56390: PUSH
56391: LD_INT 0
56393: PUSH
56394: LD_INT 0
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 0
56403: PUSH
56404: LD_INT 1
56406: NEG
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: LD_INT 1
56414: PUSH
56415: LD_INT 0
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 1
56424: PUSH
56425: LD_INT 1
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 0
56434: PUSH
56435: LD_INT 1
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 1
56444: NEG
56445: PUSH
56446: LD_INT 0
56448: PUSH
56449: EMPTY
56450: LIST
56451: LIST
56452: PUSH
56453: LD_INT 1
56455: NEG
56456: PUSH
56457: LD_INT 1
56459: NEG
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 1
56467: PUSH
56468: LD_INT 1
56470: NEG
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 2
56478: PUSH
56479: LD_INT 0
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 2
56488: PUSH
56489: LD_INT 1
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 2
56498: PUSH
56499: LD_INT 2
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 1
56508: PUSH
56509: LD_INT 2
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: LIST
56529: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56530: LD_ADDR_VAR 0 50
56534: PUSH
56535: LD_INT 0
56537: PUSH
56538: LD_INT 0
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: LD_INT 0
56547: PUSH
56548: LD_INT 1
56550: NEG
56551: PUSH
56552: EMPTY
56553: LIST
56554: LIST
56555: PUSH
56556: LD_INT 1
56558: PUSH
56559: LD_INT 0
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 1
56568: PUSH
56569: LD_INT 1
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PUSH
56576: LD_INT 0
56578: PUSH
56579: LD_INT 1
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_INT 1
56588: NEG
56589: PUSH
56590: LD_INT 0
56592: PUSH
56593: EMPTY
56594: LIST
56595: LIST
56596: PUSH
56597: LD_INT 1
56599: NEG
56600: PUSH
56601: LD_INT 1
56603: NEG
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PUSH
56609: LD_INT 2
56611: PUSH
56612: LD_INT 1
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 2
56621: PUSH
56622: LD_INT 2
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: PUSH
56629: LD_INT 1
56631: PUSH
56632: LD_INT 2
56634: PUSH
56635: EMPTY
56636: LIST
56637: LIST
56638: PUSH
56639: LD_INT 0
56641: PUSH
56642: LD_INT 2
56644: PUSH
56645: EMPTY
56646: LIST
56647: LIST
56648: PUSH
56649: LD_INT 1
56651: NEG
56652: PUSH
56653: LD_INT 1
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: LIST
56664: LIST
56665: LIST
56666: LIST
56667: LIST
56668: LIST
56669: LIST
56670: LIST
56671: LIST
56672: LIST
56673: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56674: LD_ADDR_VAR 0 51
56678: PUSH
56679: LD_INT 0
56681: PUSH
56682: LD_INT 0
56684: PUSH
56685: EMPTY
56686: LIST
56687: LIST
56688: PUSH
56689: LD_INT 0
56691: PUSH
56692: LD_INT 1
56694: NEG
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: PUSH
56700: LD_INT 1
56702: PUSH
56703: LD_INT 0
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: PUSH
56710: LD_INT 1
56712: PUSH
56713: LD_INT 1
56715: PUSH
56716: EMPTY
56717: LIST
56718: LIST
56719: PUSH
56720: LD_INT 0
56722: PUSH
56723: LD_INT 1
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: LD_INT 1
56732: NEG
56733: PUSH
56734: LD_INT 0
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: LD_INT 1
56743: NEG
56744: PUSH
56745: LD_INT 1
56747: NEG
56748: PUSH
56749: EMPTY
56750: LIST
56751: LIST
56752: PUSH
56753: LD_INT 1
56755: PUSH
56756: LD_INT 2
56758: PUSH
56759: EMPTY
56760: LIST
56761: LIST
56762: PUSH
56763: LD_INT 0
56765: PUSH
56766: LD_INT 2
56768: PUSH
56769: EMPTY
56770: LIST
56771: LIST
56772: PUSH
56773: LD_INT 1
56775: NEG
56776: PUSH
56777: LD_INT 1
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 2
56786: NEG
56787: PUSH
56788: LD_INT 0
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 2
56797: NEG
56798: PUSH
56799: LD_INT 1
56801: NEG
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: LIST
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56821: LD_ADDR_VAR 0 52
56825: PUSH
56826: LD_INT 0
56828: PUSH
56829: LD_INT 0
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 0
56838: PUSH
56839: LD_INT 1
56841: NEG
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 1
56849: PUSH
56850: LD_INT 0
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 1
56859: PUSH
56860: LD_INT 1
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 0
56869: PUSH
56870: LD_INT 1
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: LD_INT 1
56879: NEG
56880: PUSH
56881: LD_INT 0
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: LD_INT 1
56890: NEG
56891: PUSH
56892: LD_INT 1
56894: NEG
56895: PUSH
56896: EMPTY
56897: LIST
56898: LIST
56899: PUSH
56900: LD_INT 1
56902: NEG
56903: PUSH
56904: LD_INT 2
56906: NEG
56907: PUSH
56908: EMPTY
56909: LIST
56910: LIST
56911: PUSH
56912: LD_INT 1
56914: NEG
56915: PUSH
56916: LD_INT 1
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: PUSH
56923: LD_INT 2
56925: NEG
56926: PUSH
56927: LD_INT 0
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: PUSH
56934: LD_INT 2
56936: NEG
56937: PUSH
56938: LD_INT 1
56940: NEG
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: LD_INT 2
56948: NEG
56949: PUSH
56950: LD_INT 2
56952: NEG
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: LIST
56962: LIST
56963: LIST
56964: LIST
56965: LIST
56966: LIST
56967: LIST
56968: LIST
56969: LIST
56970: LIST
56971: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56972: LD_ADDR_VAR 0 53
56976: PUSH
56977: LD_INT 0
56979: PUSH
56980: LD_INT 0
56982: PUSH
56983: EMPTY
56984: LIST
56985: LIST
56986: PUSH
56987: LD_INT 0
56989: PUSH
56990: LD_INT 1
56992: NEG
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: LD_INT 1
57000: PUSH
57001: LD_INT 0
57003: PUSH
57004: EMPTY
57005: LIST
57006: LIST
57007: PUSH
57008: LD_INT 1
57010: PUSH
57011: LD_INT 1
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: LD_INT 0
57020: PUSH
57021: LD_INT 1
57023: PUSH
57024: EMPTY
57025: LIST
57026: LIST
57027: PUSH
57028: LD_INT 1
57030: NEG
57031: PUSH
57032: LD_INT 0
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: PUSH
57039: LD_INT 1
57041: NEG
57042: PUSH
57043: LD_INT 1
57045: NEG
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: LD_INT 1
57053: NEG
57054: PUSH
57055: LD_INT 2
57057: NEG
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 0
57065: PUSH
57066: LD_INT 2
57068: NEG
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: LD_INT 1
57076: PUSH
57077: LD_INT 1
57079: NEG
57080: PUSH
57081: EMPTY
57082: LIST
57083: LIST
57084: PUSH
57085: LD_INT 2
57087: PUSH
57088: LD_INT 0
57090: PUSH
57091: EMPTY
57092: LIST
57093: LIST
57094: PUSH
57095: LD_INT 2
57097: PUSH
57098: LD_INT 1
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 2
57107: PUSH
57108: LD_INT 2
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 1
57117: PUSH
57118: LD_INT 2
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: LD_INT 0
57127: PUSH
57128: LD_INT 2
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: LD_INT 1
57137: NEG
57138: PUSH
57139: LD_INT 1
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 2
57148: NEG
57149: PUSH
57150: LD_INT 0
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 2
57159: NEG
57160: PUSH
57161: LD_INT 1
57163: NEG
57164: PUSH
57165: EMPTY
57166: LIST
57167: LIST
57168: PUSH
57169: LD_INT 2
57171: NEG
57172: PUSH
57173: LD_INT 2
57175: NEG
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: LIST
57185: LIST
57186: LIST
57187: LIST
57188: LIST
57189: LIST
57190: LIST
57191: LIST
57192: LIST
57193: LIST
57194: LIST
57195: LIST
57196: LIST
57197: LIST
57198: LIST
57199: LIST
57200: LIST
57201: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57202: LD_ADDR_VAR 0 54
57206: PUSH
57207: LD_INT 0
57209: PUSH
57210: LD_INT 0
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 0
57219: PUSH
57220: LD_INT 1
57222: NEG
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 1
57230: PUSH
57231: LD_INT 0
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 1
57240: PUSH
57241: LD_INT 1
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 0
57250: PUSH
57251: LD_INT 1
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 1
57260: NEG
57261: PUSH
57262: LD_INT 0
57264: PUSH
57265: EMPTY
57266: LIST
57267: LIST
57268: PUSH
57269: LD_INT 1
57271: NEG
57272: PUSH
57273: LD_INT 1
57275: NEG
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: PUSH
57281: LD_INT 1
57283: NEG
57284: PUSH
57285: LD_INT 2
57287: NEG
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: PUSH
57293: LD_INT 0
57295: PUSH
57296: LD_INT 2
57298: NEG
57299: PUSH
57300: EMPTY
57301: LIST
57302: LIST
57303: PUSH
57304: LD_INT 1
57306: PUSH
57307: LD_INT 1
57309: NEG
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: LD_INT 2
57317: PUSH
57318: LD_INT 0
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: PUSH
57325: LD_INT 2
57327: PUSH
57328: LD_INT 1
57330: PUSH
57331: EMPTY
57332: LIST
57333: LIST
57334: PUSH
57335: LD_INT 2
57337: PUSH
57338: LD_INT 2
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: LD_INT 1
57347: PUSH
57348: LD_INT 2
57350: PUSH
57351: EMPTY
57352: LIST
57353: LIST
57354: PUSH
57355: LD_INT 0
57357: PUSH
57358: LD_INT 2
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: LD_INT 1
57367: NEG
57368: PUSH
57369: LD_INT 1
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 2
57378: NEG
57379: PUSH
57380: LD_INT 0
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_INT 2
57389: NEG
57390: PUSH
57391: LD_INT 1
57393: NEG
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: LD_INT 2
57401: NEG
57402: PUSH
57403: LD_INT 2
57405: NEG
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: LIST
57415: LIST
57416: LIST
57417: LIST
57418: LIST
57419: LIST
57420: LIST
57421: LIST
57422: LIST
57423: LIST
57424: LIST
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57432: LD_ADDR_VAR 0 55
57436: PUSH
57437: LD_INT 0
57439: PUSH
57440: LD_INT 0
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 0
57449: PUSH
57450: LD_INT 1
57452: NEG
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 1
57460: PUSH
57461: LD_INT 0
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: PUSH
57468: LD_INT 1
57470: PUSH
57471: LD_INT 1
57473: PUSH
57474: EMPTY
57475: LIST
57476: LIST
57477: PUSH
57478: LD_INT 0
57480: PUSH
57481: LD_INT 1
57483: PUSH
57484: EMPTY
57485: LIST
57486: LIST
57487: PUSH
57488: LD_INT 1
57490: NEG
57491: PUSH
57492: LD_INT 0
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: PUSH
57499: LD_INT 1
57501: NEG
57502: PUSH
57503: LD_INT 1
57505: NEG
57506: PUSH
57507: EMPTY
57508: LIST
57509: LIST
57510: PUSH
57511: LD_INT 1
57513: NEG
57514: PUSH
57515: LD_INT 2
57517: NEG
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PUSH
57523: LD_INT 0
57525: PUSH
57526: LD_INT 2
57528: NEG
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 1
57536: PUSH
57537: LD_INT 1
57539: NEG
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 2
57547: PUSH
57548: LD_INT 0
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: PUSH
57555: LD_INT 2
57557: PUSH
57558: LD_INT 1
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: PUSH
57565: LD_INT 2
57567: PUSH
57568: LD_INT 2
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 1
57577: PUSH
57578: LD_INT 2
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 0
57587: PUSH
57588: LD_INT 2
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 1
57597: NEG
57598: PUSH
57599: LD_INT 1
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 2
57608: NEG
57609: PUSH
57610: LD_INT 0
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: LD_INT 2
57619: NEG
57620: PUSH
57621: LD_INT 1
57623: NEG
57624: PUSH
57625: EMPTY
57626: LIST
57627: LIST
57628: PUSH
57629: LD_INT 2
57631: NEG
57632: PUSH
57633: LD_INT 2
57635: NEG
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57662: LD_ADDR_VAR 0 56
57666: PUSH
57667: LD_INT 0
57669: PUSH
57670: LD_INT 0
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: LD_INT 0
57679: PUSH
57680: LD_INT 1
57682: NEG
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: LD_INT 1
57690: PUSH
57691: LD_INT 0
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 1
57700: PUSH
57701: LD_INT 1
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 0
57710: PUSH
57711: LD_INT 1
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: LD_INT 1
57720: NEG
57721: PUSH
57722: LD_INT 0
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: LD_INT 1
57731: NEG
57732: PUSH
57733: LD_INT 1
57735: NEG
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: LD_INT 1
57743: NEG
57744: PUSH
57745: LD_INT 2
57747: NEG
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: LD_INT 0
57755: PUSH
57756: LD_INT 2
57758: NEG
57759: PUSH
57760: EMPTY
57761: LIST
57762: LIST
57763: PUSH
57764: LD_INT 1
57766: PUSH
57767: LD_INT 1
57769: NEG
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: PUSH
57775: LD_INT 2
57777: PUSH
57778: LD_INT 0
57780: PUSH
57781: EMPTY
57782: LIST
57783: LIST
57784: PUSH
57785: LD_INT 2
57787: PUSH
57788: LD_INT 1
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: LD_INT 2
57797: PUSH
57798: LD_INT 2
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: LD_INT 1
57807: PUSH
57808: LD_INT 2
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 0
57817: PUSH
57818: LD_INT 2
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 1
57827: NEG
57828: PUSH
57829: LD_INT 1
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 2
57838: NEG
57839: PUSH
57840: LD_INT 0
57842: PUSH
57843: EMPTY
57844: LIST
57845: LIST
57846: PUSH
57847: LD_INT 2
57849: NEG
57850: PUSH
57851: LD_INT 1
57853: NEG
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: LD_INT 2
57861: NEG
57862: PUSH
57863: LD_INT 2
57865: NEG
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: EMPTY
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: LIST
57891: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57892: LD_ADDR_VAR 0 57
57896: PUSH
57897: LD_INT 0
57899: PUSH
57900: LD_INT 0
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: PUSH
57907: LD_INT 0
57909: PUSH
57910: LD_INT 1
57912: NEG
57913: PUSH
57914: EMPTY
57915: LIST
57916: LIST
57917: PUSH
57918: LD_INT 1
57920: PUSH
57921: LD_INT 0
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 1
57930: PUSH
57931: LD_INT 1
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: LD_INT 0
57940: PUSH
57941: LD_INT 1
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: PUSH
57948: LD_INT 1
57950: NEG
57951: PUSH
57952: LD_INT 0
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 1
57961: NEG
57962: PUSH
57963: LD_INT 1
57965: NEG
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: LD_INT 1
57973: NEG
57974: PUSH
57975: LD_INT 2
57977: NEG
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: LD_INT 0
57985: PUSH
57986: LD_INT 2
57988: NEG
57989: PUSH
57990: EMPTY
57991: LIST
57992: LIST
57993: PUSH
57994: LD_INT 1
57996: PUSH
57997: LD_INT 1
57999: NEG
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: PUSH
58005: LD_INT 2
58007: PUSH
58008: LD_INT 0
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: LD_INT 2
58017: PUSH
58018: LD_INT 1
58020: PUSH
58021: EMPTY
58022: LIST
58023: LIST
58024: PUSH
58025: LD_INT 2
58027: PUSH
58028: LD_INT 2
58030: PUSH
58031: EMPTY
58032: LIST
58033: LIST
58034: PUSH
58035: LD_INT 1
58037: PUSH
58038: LD_INT 2
58040: PUSH
58041: EMPTY
58042: LIST
58043: LIST
58044: PUSH
58045: LD_INT 0
58047: PUSH
58048: LD_INT 2
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 1
58057: NEG
58058: PUSH
58059: LD_INT 1
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 2
58068: NEG
58069: PUSH
58070: LD_INT 0
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 2
58079: NEG
58080: PUSH
58081: LD_INT 1
58083: NEG
58084: PUSH
58085: EMPTY
58086: LIST
58087: LIST
58088: PUSH
58089: LD_INT 2
58091: NEG
58092: PUSH
58093: LD_INT 2
58095: NEG
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: LIST
58115: LIST
58116: LIST
58117: LIST
58118: LIST
58119: LIST
58120: LIST
58121: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58122: LD_ADDR_VAR 0 58
58126: PUSH
58127: LD_INT 0
58129: PUSH
58130: LD_INT 0
58132: PUSH
58133: EMPTY
58134: LIST
58135: LIST
58136: PUSH
58137: LD_INT 0
58139: PUSH
58140: LD_INT 1
58142: NEG
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: PUSH
58148: LD_INT 1
58150: PUSH
58151: LD_INT 0
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 1
58160: PUSH
58161: LD_INT 1
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 0
58170: PUSH
58171: LD_INT 1
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: LD_INT 1
58180: NEG
58181: PUSH
58182: LD_INT 0
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 1
58191: NEG
58192: PUSH
58193: LD_INT 1
58195: NEG
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: PUSH
58201: LD_INT 1
58203: NEG
58204: PUSH
58205: LD_INT 2
58207: NEG
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PUSH
58213: LD_INT 0
58215: PUSH
58216: LD_INT 2
58218: NEG
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 1
58226: PUSH
58227: LD_INT 1
58229: NEG
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: LD_INT 2
58237: PUSH
58238: LD_INT 0
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PUSH
58245: LD_INT 2
58247: PUSH
58248: LD_INT 1
58250: PUSH
58251: EMPTY
58252: LIST
58253: LIST
58254: PUSH
58255: LD_INT 2
58257: PUSH
58258: LD_INT 2
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: LD_INT 1
58267: PUSH
58268: LD_INT 2
58270: PUSH
58271: EMPTY
58272: LIST
58273: LIST
58274: PUSH
58275: LD_INT 0
58277: PUSH
58278: LD_INT 2
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: LD_INT 1
58287: NEG
58288: PUSH
58289: LD_INT 1
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: LD_INT 2
58298: NEG
58299: PUSH
58300: LD_INT 0
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 2
58309: NEG
58310: PUSH
58311: LD_INT 1
58313: NEG
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 2
58321: NEG
58322: PUSH
58323: LD_INT 2
58325: NEG
58326: PUSH
58327: EMPTY
58328: LIST
58329: LIST
58330: PUSH
58331: EMPTY
58332: LIST
58333: LIST
58334: LIST
58335: LIST
58336: LIST
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: LIST
58346: LIST
58347: LIST
58348: LIST
58349: LIST
58350: LIST
58351: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58352: LD_ADDR_VAR 0 59
58356: PUSH
58357: LD_INT 0
58359: PUSH
58360: LD_INT 0
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: LD_INT 0
58369: PUSH
58370: LD_INT 1
58372: NEG
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 1
58380: PUSH
58381: LD_INT 0
58383: PUSH
58384: EMPTY
58385: LIST
58386: LIST
58387: PUSH
58388: LD_INT 1
58390: PUSH
58391: LD_INT 1
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: PUSH
58398: LD_INT 0
58400: PUSH
58401: LD_INT 1
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: LD_INT 1
58410: NEG
58411: PUSH
58412: LD_INT 0
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 1
58421: NEG
58422: PUSH
58423: LD_INT 1
58425: NEG
58426: PUSH
58427: EMPTY
58428: LIST
58429: LIST
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: LIST
58435: LIST
58436: LIST
58437: LIST
58438: LIST
58439: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58440: LD_ADDR_VAR 0 60
58444: PUSH
58445: LD_INT 0
58447: PUSH
58448: LD_INT 0
58450: PUSH
58451: EMPTY
58452: LIST
58453: LIST
58454: PUSH
58455: LD_INT 0
58457: PUSH
58458: LD_INT 1
58460: NEG
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: LD_INT 1
58468: PUSH
58469: LD_INT 0
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: LD_INT 1
58478: PUSH
58479: LD_INT 1
58481: PUSH
58482: EMPTY
58483: LIST
58484: LIST
58485: PUSH
58486: LD_INT 0
58488: PUSH
58489: LD_INT 1
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: PUSH
58496: LD_INT 1
58498: NEG
58499: PUSH
58500: LD_INT 0
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: PUSH
58507: LD_INT 1
58509: NEG
58510: PUSH
58511: LD_INT 1
58513: NEG
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: LIST
58523: LIST
58524: LIST
58525: LIST
58526: LIST
58527: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58528: LD_ADDR_VAR 0 61
58532: PUSH
58533: LD_INT 0
58535: PUSH
58536: LD_INT 0
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 0
58545: PUSH
58546: LD_INT 1
58548: NEG
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: LD_INT 1
58556: PUSH
58557: LD_INT 0
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 1
58566: PUSH
58567: LD_INT 1
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 0
58576: PUSH
58577: LD_INT 1
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 1
58586: NEG
58587: PUSH
58588: LD_INT 0
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: PUSH
58595: LD_INT 1
58597: NEG
58598: PUSH
58599: LD_INT 1
58601: NEG
58602: PUSH
58603: EMPTY
58604: LIST
58605: LIST
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: LIST
58611: LIST
58612: LIST
58613: LIST
58614: LIST
58615: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58616: LD_ADDR_VAR 0 62
58620: PUSH
58621: LD_INT 0
58623: PUSH
58624: LD_INT 0
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: LD_INT 0
58633: PUSH
58634: LD_INT 1
58636: NEG
58637: PUSH
58638: EMPTY
58639: LIST
58640: LIST
58641: PUSH
58642: LD_INT 1
58644: PUSH
58645: LD_INT 0
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: PUSH
58652: LD_INT 1
58654: PUSH
58655: LD_INT 1
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 0
58664: PUSH
58665: LD_INT 1
58667: PUSH
58668: EMPTY
58669: LIST
58670: LIST
58671: PUSH
58672: LD_INT 1
58674: NEG
58675: PUSH
58676: LD_INT 0
58678: PUSH
58679: EMPTY
58680: LIST
58681: LIST
58682: PUSH
58683: LD_INT 1
58685: NEG
58686: PUSH
58687: LD_INT 1
58689: NEG
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: PUSH
58695: EMPTY
58696: LIST
58697: LIST
58698: LIST
58699: LIST
58700: LIST
58701: LIST
58702: LIST
58703: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58704: LD_ADDR_VAR 0 63
58708: PUSH
58709: LD_INT 0
58711: PUSH
58712: LD_INT 0
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 0
58721: PUSH
58722: LD_INT 1
58724: NEG
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 1
58732: PUSH
58733: LD_INT 0
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: PUSH
58740: LD_INT 1
58742: PUSH
58743: LD_INT 1
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 0
58752: PUSH
58753: LD_INT 1
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 1
58762: NEG
58763: PUSH
58764: LD_INT 0
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: LD_INT 1
58773: NEG
58774: PUSH
58775: LD_INT 1
58777: NEG
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: LIST
58787: LIST
58788: LIST
58789: LIST
58790: LIST
58791: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58792: LD_ADDR_VAR 0 64
58796: PUSH
58797: LD_INT 0
58799: PUSH
58800: LD_INT 0
58802: PUSH
58803: EMPTY
58804: LIST
58805: LIST
58806: PUSH
58807: LD_INT 0
58809: PUSH
58810: LD_INT 1
58812: NEG
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 1
58820: PUSH
58821: LD_INT 0
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 1
58830: PUSH
58831: LD_INT 1
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: PUSH
58838: LD_INT 0
58840: PUSH
58841: LD_INT 1
58843: PUSH
58844: EMPTY
58845: LIST
58846: LIST
58847: PUSH
58848: LD_INT 1
58850: NEG
58851: PUSH
58852: LD_INT 0
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 1
58861: NEG
58862: PUSH
58863: LD_INT 1
58865: NEG
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: PUSH
58871: EMPTY
58872: LIST
58873: LIST
58874: LIST
58875: LIST
58876: LIST
58877: LIST
58878: LIST
58879: ST_TO_ADDR
// end ; 1 :
58880: GO 64777
58882: LD_INT 1
58884: DOUBLE
58885: EQUAL
58886: IFTRUE 58890
58888: GO 61513
58890: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58891: LD_ADDR_VAR 0 11
58895: PUSH
58896: LD_INT 1
58898: NEG
58899: PUSH
58900: LD_INT 3
58902: NEG
58903: PUSH
58904: EMPTY
58905: LIST
58906: LIST
58907: PUSH
58908: LD_INT 0
58910: PUSH
58911: LD_INT 3
58913: NEG
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 1
58921: PUSH
58922: LD_INT 2
58924: NEG
58925: PUSH
58926: EMPTY
58927: LIST
58928: LIST
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: LIST
58934: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58935: LD_ADDR_VAR 0 12
58939: PUSH
58940: LD_INT 2
58942: PUSH
58943: LD_INT 1
58945: NEG
58946: PUSH
58947: EMPTY
58948: LIST
58949: LIST
58950: PUSH
58951: LD_INT 3
58953: PUSH
58954: LD_INT 0
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PUSH
58961: LD_INT 3
58963: PUSH
58964: LD_INT 1
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: LIST
58975: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58976: LD_ADDR_VAR 0 13
58980: PUSH
58981: LD_INT 3
58983: PUSH
58984: LD_INT 2
58986: PUSH
58987: EMPTY
58988: LIST
58989: LIST
58990: PUSH
58991: LD_INT 3
58993: PUSH
58994: LD_INT 3
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: PUSH
59001: LD_INT 2
59003: PUSH
59004: LD_INT 3
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: PUSH
59011: EMPTY
59012: LIST
59013: LIST
59014: LIST
59015: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59016: LD_ADDR_VAR 0 14
59020: PUSH
59021: LD_INT 1
59023: PUSH
59024: LD_INT 3
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: PUSH
59031: LD_INT 0
59033: PUSH
59034: LD_INT 3
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 1
59043: NEG
59044: PUSH
59045: LD_INT 2
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: LIST
59056: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59057: LD_ADDR_VAR 0 15
59061: PUSH
59062: LD_INT 2
59064: NEG
59065: PUSH
59066: LD_INT 1
59068: PUSH
59069: EMPTY
59070: LIST
59071: LIST
59072: PUSH
59073: LD_INT 3
59075: NEG
59076: PUSH
59077: LD_INT 0
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: PUSH
59084: LD_INT 3
59086: NEG
59087: PUSH
59088: LD_INT 1
59090: NEG
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: LIST
59100: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59101: LD_ADDR_VAR 0 16
59105: PUSH
59106: LD_INT 2
59108: NEG
59109: PUSH
59110: LD_INT 3
59112: NEG
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: PUSH
59118: LD_INT 3
59120: NEG
59121: PUSH
59122: LD_INT 2
59124: NEG
59125: PUSH
59126: EMPTY
59127: LIST
59128: LIST
59129: PUSH
59130: LD_INT 3
59132: NEG
59133: PUSH
59134: LD_INT 3
59136: NEG
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: PUSH
59142: EMPTY
59143: LIST
59144: LIST
59145: LIST
59146: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59147: LD_ADDR_VAR 0 17
59151: PUSH
59152: LD_INT 1
59154: NEG
59155: PUSH
59156: LD_INT 3
59158: NEG
59159: PUSH
59160: EMPTY
59161: LIST
59162: LIST
59163: PUSH
59164: LD_INT 0
59166: PUSH
59167: LD_INT 3
59169: NEG
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 1
59177: PUSH
59178: LD_INT 2
59180: NEG
59181: PUSH
59182: EMPTY
59183: LIST
59184: LIST
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: LIST
59190: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59191: LD_ADDR_VAR 0 18
59195: PUSH
59196: LD_INT 2
59198: PUSH
59199: LD_INT 1
59201: NEG
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: PUSH
59207: LD_INT 3
59209: PUSH
59210: LD_INT 0
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: PUSH
59217: LD_INT 3
59219: PUSH
59220: LD_INT 1
59222: PUSH
59223: EMPTY
59224: LIST
59225: LIST
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: LIST
59231: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59232: LD_ADDR_VAR 0 19
59236: PUSH
59237: LD_INT 3
59239: PUSH
59240: LD_INT 2
59242: PUSH
59243: EMPTY
59244: LIST
59245: LIST
59246: PUSH
59247: LD_INT 3
59249: PUSH
59250: LD_INT 3
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: PUSH
59257: LD_INT 2
59259: PUSH
59260: LD_INT 3
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: LIST
59271: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59272: LD_ADDR_VAR 0 20
59276: PUSH
59277: LD_INT 1
59279: PUSH
59280: LD_INT 3
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: PUSH
59287: LD_INT 0
59289: PUSH
59290: LD_INT 3
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 1
59299: NEG
59300: PUSH
59301: LD_INT 2
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: LIST
59312: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59313: LD_ADDR_VAR 0 21
59317: PUSH
59318: LD_INT 2
59320: NEG
59321: PUSH
59322: LD_INT 1
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 3
59331: NEG
59332: PUSH
59333: LD_INT 0
59335: PUSH
59336: EMPTY
59337: LIST
59338: LIST
59339: PUSH
59340: LD_INT 3
59342: NEG
59343: PUSH
59344: LD_INT 1
59346: NEG
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: LIST
59356: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59357: LD_ADDR_VAR 0 22
59361: PUSH
59362: LD_INT 2
59364: NEG
59365: PUSH
59366: LD_INT 3
59368: NEG
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 3
59376: NEG
59377: PUSH
59378: LD_INT 2
59380: NEG
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 3
59388: NEG
59389: PUSH
59390: LD_INT 3
59392: NEG
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: LIST
59402: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
59403: LD_ADDR_VAR 0 23
59407: PUSH
59408: LD_INT 0
59410: PUSH
59411: LD_INT 3
59413: NEG
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: PUSH
59419: LD_INT 1
59421: NEG
59422: PUSH
59423: LD_INT 4
59425: NEG
59426: PUSH
59427: EMPTY
59428: LIST
59429: LIST
59430: PUSH
59431: LD_INT 1
59433: PUSH
59434: LD_INT 3
59436: NEG
59437: PUSH
59438: EMPTY
59439: LIST
59440: LIST
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: LIST
59446: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
59447: LD_ADDR_VAR 0 24
59451: PUSH
59452: LD_INT 3
59454: PUSH
59455: LD_INT 0
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 3
59464: PUSH
59465: LD_INT 1
59467: NEG
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 4
59475: PUSH
59476: LD_INT 1
59478: PUSH
59479: EMPTY
59480: LIST
59481: LIST
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: LIST
59487: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
59488: LD_ADDR_VAR 0 25
59492: PUSH
59493: LD_INT 3
59495: PUSH
59496: LD_INT 3
59498: PUSH
59499: EMPTY
59500: LIST
59501: LIST
59502: PUSH
59503: LD_INT 4
59505: PUSH
59506: LD_INT 3
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PUSH
59513: LD_INT 3
59515: PUSH
59516: LD_INT 4
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: LIST
59527: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
59528: LD_ADDR_VAR 0 26
59532: PUSH
59533: LD_INT 0
59535: PUSH
59536: LD_INT 3
59538: PUSH
59539: EMPTY
59540: LIST
59541: LIST
59542: PUSH
59543: LD_INT 1
59545: PUSH
59546: LD_INT 4
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: LD_INT 1
59555: NEG
59556: PUSH
59557: LD_INT 3
59559: PUSH
59560: EMPTY
59561: LIST
59562: LIST
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: LIST
59568: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
59569: LD_ADDR_VAR 0 27
59573: PUSH
59574: LD_INT 3
59576: NEG
59577: PUSH
59578: LD_INT 0
59580: PUSH
59581: EMPTY
59582: LIST
59583: LIST
59584: PUSH
59585: LD_INT 3
59587: NEG
59588: PUSH
59589: LD_INT 1
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 4
59598: NEG
59599: PUSH
59600: LD_INT 1
59602: NEG
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: LIST
59612: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
59613: LD_ADDR_VAR 0 28
59617: PUSH
59618: LD_INT 3
59620: NEG
59621: PUSH
59622: LD_INT 3
59624: NEG
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: LD_INT 3
59632: NEG
59633: PUSH
59634: LD_INT 4
59636: NEG
59637: PUSH
59638: EMPTY
59639: LIST
59640: LIST
59641: PUSH
59642: LD_INT 4
59644: NEG
59645: PUSH
59646: LD_INT 3
59648: NEG
59649: PUSH
59650: EMPTY
59651: LIST
59652: LIST
59653: PUSH
59654: EMPTY
59655: LIST
59656: LIST
59657: LIST
59658: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
59659: LD_ADDR_VAR 0 29
59663: PUSH
59664: LD_INT 1
59666: NEG
59667: PUSH
59668: LD_INT 3
59670: NEG
59671: PUSH
59672: EMPTY
59673: LIST
59674: LIST
59675: PUSH
59676: LD_INT 0
59678: PUSH
59679: LD_INT 3
59681: NEG
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 1
59689: PUSH
59690: LD_INT 2
59692: NEG
59693: PUSH
59694: EMPTY
59695: LIST
59696: LIST
59697: PUSH
59698: LD_INT 1
59700: NEG
59701: PUSH
59702: LD_INT 4
59704: NEG
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: PUSH
59710: LD_INT 0
59712: PUSH
59713: LD_INT 4
59715: NEG
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PUSH
59721: LD_INT 1
59723: PUSH
59724: LD_INT 3
59726: NEG
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: LD_INT 1
59734: NEG
59735: PUSH
59736: LD_INT 5
59738: NEG
59739: PUSH
59740: EMPTY
59741: LIST
59742: LIST
59743: PUSH
59744: LD_INT 0
59746: PUSH
59747: LD_INT 5
59749: NEG
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: PUSH
59755: LD_INT 1
59757: PUSH
59758: LD_INT 4
59760: NEG
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 1
59768: NEG
59769: PUSH
59770: LD_INT 6
59772: NEG
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 0
59780: PUSH
59781: LD_INT 6
59783: NEG
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: LD_INT 1
59791: PUSH
59792: LD_INT 5
59794: NEG
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: EMPTY
59801: LIST
59802: LIST
59803: LIST
59804: LIST
59805: LIST
59806: LIST
59807: LIST
59808: LIST
59809: LIST
59810: LIST
59811: LIST
59812: LIST
59813: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
59814: LD_ADDR_VAR 0 30
59818: PUSH
59819: LD_INT 2
59821: PUSH
59822: LD_INT 1
59824: NEG
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PUSH
59830: LD_INT 3
59832: PUSH
59833: LD_INT 0
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: PUSH
59840: LD_INT 3
59842: PUSH
59843: LD_INT 1
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: LD_INT 3
59852: PUSH
59853: LD_INT 1
59855: NEG
59856: PUSH
59857: EMPTY
59858: LIST
59859: LIST
59860: PUSH
59861: LD_INT 4
59863: PUSH
59864: LD_INT 0
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: LD_INT 4
59873: PUSH
59874: LD_INT 1
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: LD_INT 4
59883: PUSH
59884: LD_INT 1
59886: NEG
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 5
59894: PUSH
59895: LD_INT 0
59897: PUSH
59898: EMPTY
59899: LIST
59900: LIST
59901: PUSH
59902: LD_INT 5
59904: PUSH
59905: LD_INT 1
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 5
59914: PUSH
59915: LD_INT 1
59917: NEG
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: LD_INT 6
59925: PUSH
59926: LD_INT 0
59928: PUSH
59929: EMPTY
59930: LIST
59931: LIST
59932: PUSH
59933: LD_INT 6
59935: PUSH
59936: LD_INT 1
59938: PUSH
59939: EMPTY
59940: LIST
59941: LIST
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: LIST
59947: LIST
59948: LIST
59949: LIST
59950: LIST
59951: LIST
59952: LIST
59953: LIST
59954: LIST
59955: LIST
59956: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
59957: LD_ADDR_VAR 0 31
59961: PUSH
59962: LD_INT 3
59964: PUSH
59965: LD_INT 2
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 3
59974: PUSH
59975: LD_INT 3
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 2
59984: PUSH
59985: LD_INT 3
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: LD_INT 4
59994: PUSH
59995: LD_INT 3
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: LD_INT 4
60004: PUSH
60005: LD_INT 4
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PUSH
60012: LD_INT 3
60014: PUSH
60015: LD_INT 4
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 5
60024: PUSH
60025: LD_INT 4
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: LD_INT 5
60034: PUSH
60035: LD_INT 5
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: LD_INT 4
60044: PUSH
60045: LD_INT 5
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: PUSH
60052: LD_INT 6
60054: PUSH
60055: LD_INT 5
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: PUSH
60062: LD_INT 6
60064: PUSH
60065: LD_INT 6
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: LD_INT 5
60074: PUSH
60075: LD_INT 6
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: LIST
60095: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
60096: LD_ADDR_VAR 0 32
60100: PUSH
60101: LD_INT 1
60103: PUSH
60104: LD_INT 3
60106: PUSH
60107: EMPTY
60108: LIST
60109: LIST
60110: PUSH
60111: LD_INT 0
60113: PUSH
60114: LD_INT 3
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PUSH
60121: LD_INT 1
60123: NEG
60124: PUSH
60125: LD_INT 2
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 1
60134: PUSH
60135: LD_INT 4
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 0
60144: PUSH
60145: LD_INT 4
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 1
60154: NEG
60155: PUSH
60156: LD_INT 3
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: LD_INT 1
60165: PUSH
60166: LD_INT 5
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: PUSH
60173: LD_INT 0
60175: PUSH
60176: LD_INT 5
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: PUSH
60183: LD_INT 1
60185: NEG
60186: PUSH
60187: LD_INT 4
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: LD_INT 1
60196: PUSH
60197: LD_INT 6
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: PUSH
60204: LD_INT 0
60206: PUSH
60207: LD_INT 6
60209: PUSH
60210: EMPTY
60211: LIST
60212: LIST
60213: PUSH
60214: LD_INT 1
60216: NEG
60217: PUSH
60218: LD_INT 5
60220: PUSH
60221: EMPTY
60222: LIST
60223: LIST
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: LIST
60229: LIST
60230: LIST
60231: LIST
60232: LIST
60233: LIST
60234: LIST
60235: LIST
60236: LIST
60237: LIST
60238: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
60239: LD_ADDR_VAR 0 33
60243: PUSH
60244: LD_INT 2
60246: NEG
60247: PUSH
60248: LD_INT 1
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 3
60257: NEG
60258: PUSH
60259: LD_INT 0
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: LD_INT 3
60268: NEG
60269: PUSH
60270: LD_INT 1
60272: NEG
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: PUSH
60278: LD_INT 3
60280: NEG
60281: PUSH
60282: LD_INT 1
60284: PUSH
60285: EMPTY
60286: LIST
60287: LIST
60288: PUSH
60289: LD_INT 4
60291: NEG
60292: PUSH
60293: LD_INT 0
60295: PUSH
60296: EMPTY
60297: LIST
60298: LIST
60299: PUSH
60300: LD_INT 4
60302: NEG
60303: PUSH
60304: LD_INT 1
60306: NEG
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: LD_INT 4
60314: NEG
60315: PUSH
60316: LD_INT 1
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PUSH
60323: LD_INT 5
60325: NEG
60326: PUSH
60327: LD_INT 0
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 5
60336: NEG
60337: PUSH
60338: LD_INT 1
60340: NEG
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 5
60348: NEG
60349: PUSH
60350: LD_INT 1
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 6
60359: NEG
60360: PUSH
60361: LD_INT 0
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 6
60370: NEG
60371: PUSH
60372: LD_INT 1
60374: NEG
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: LIST
60388: LIST
60389: LIST
60390: LIST
60391: LIST
60392: LIST
60393: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
60394: LD_ADDR_VAR 0 34
60398: PUSH
60399: LD_INT 2
60401: NEG
60402: PUSH
60403: LD_INT 3
60405: NEG
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: PUSH
60411: LD_INT 3
60413: NEG
60414: PUSH
60415: LD_INT 2
60417: NEG
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: LD_INT 3
60425: NEG
60426: PUSH
60427: LD_INT 3
60429: NEG
60430: PUSH
60431: EMPTY
60432: LIST
60433: LIST
60434: PUSH
60435: LD_INT 3
60437: NEG
60438: PUSH
60439: LD_INT 4
60441: NEG
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 4
60449: NEG
60450: PUSH
60451: LD_INT 3
60453: NEG
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: PUSH
60459: LD_INT 4
60461: NEG
60462: PUSH
60463: LD_INT 4
60465: NEG
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: PUSH
60471: LD_INT 4
60473: NEG
60474: PUSH
60475: LD_INT 5
60477: NEG
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PUSH
60483: LD_INT 5
60485: NEG
60486: PUSH
60487: LD_INT 4
60489: NEG
60490: PUSH
60491: EMPTY
60492: LIST
60493: LIST
60494: PUSH
60495: LD_INT 5
60497: NEG
60498: PUSH
60499: LD_INT 5
60501: NEG
60502: PUSH
60503: EMPTY
60504: LIST
60505: LIST
60506: PUSH
60507: LD_INT 5
60509: NEG
60510: PUSH
60511: LD_INT 6
60513: NEG
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 6
60521: NEG
60522: PUSH
60523: LD_INT 5
60525: NEG
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: LD_INT 6
60533: NEG
60534: PUSH
60535: LD_INT 6
60537: NEG
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: LIST
60547: LIST
60548: LIST
60549: LIST
60550: LIST
60551: LIST
60552: LIST
60553: LIST
60554: LIST
60555: LIST
60556: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
60557: LD_ADDR_VAR 0 41
60561: PUSH
60562: LD_INT 0
60564: PUSH
60565: LD_INT 2
60567: NEG
60568: PUSH
60569: EMPTY
60570: LIST
60571: LIST
60572: PUSH
60573: LD_INT 1
60575: NEG
60576: PUSH
60577: LD_INT 3
60579: NEG
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: PUSH
60585: LD_INT 1
60587: PUSH
60588: LD_INT 2
60590: NEG
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: LIST
60600: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
60601: LD_ADDR_VAR 0 42
60605: PUSH
60606: LD_INT 2
60608: PUSH
60609: LD_INT 0
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: PUSH
60616: LD_INT 2
60618: PUSH
60619: LD_INT 1
60621: NEG
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: PUSH
60627: LD_INT 3
60629: PUSH
60630: LD_INT 1
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: PUSH
60637: EMPTY
60638: LIST
60639: LIST
60640: LIST
60641: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
60642: LD_ADDR_VAR 0 43
60646: PUSH
60647: LD_INT 2
60649: PUSH
60650: LD_INT 2
60652: PUSH
60653: EMPTY
60654: LIST
60655: LIST
60656: PUSH
60657: LD_INT 3
60659: PUSH
60660: LD_INT 2
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: LD_INT 2
60669: PUSH
60670: LD_INT 3
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: LIST
60681: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
60682: LD_ADDR_VAR 0 44
60686: PUSH
60687: LD_INT 0
60689: PUSH
60690: LD_INT 2
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: LD_INT 1
60699: PUSH
60700: LD_INT 3
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PUSH
60707: LD_INT 1
60709: NEG
60710: PUSH
60711: LD_INT 2
60713: PUSH
60714: EMPTY
60715: LIST
60716: LIST
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: LIST
60722: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60723: LD_ADDR_VAR 0 45
60727: PUSH
60728: LD_INT 2
60730: NEG
60731: PUSH
60732: LD_INT 0
60734: PUSH
60735: EMPTY
60736: LIST
60737: LIST
60738: PUSH
60739: LD_INT 2
60741: NEG
60742: PUSH
60743: LD_INT 1
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: LD_INT 3
60752: NEG
60753: PUSH
60754: LD_INT 1
60756: NEG
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: LIST
60766: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
60767: LD_ADDR_VAR 0 46
60771: PUSH
60772: LD_INT 2
60774: NEG
60775: PUSH
60776: LD_INT 2
60778: NEG
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: PUSH
60784: LD_INT 2
60786: NEG
60787: PUSH
60788: LD_INT 3
60790: NEG
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 3
60798: NEG
60799: PUSH
60800: LD_INT 2
60802: NEG
60803: PUSH
60804: EMPTY
60805: LIST
60806: LIST
60807: PUSH
60808: EMPTY
60809: LIST
60810: LIST
60811: LIST
60812: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
60813: LD_ADDR_VAR 0 47
60817: PUSH
60818: LD_INT 2
60820: NEG
60821: PUSH
60822: LD_INT 3
60824: NEG
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: PUSH
60830: LD_INT 1
60832: NEG
60833: PUSH
60834: LD_INT 3
60836: NEG
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
60846: LD_ADDR_VAR 0 48
60850: PUSH
60851: LD_INT 1
60853: PUSH
60854: LD_INT 2
60856: NEG
60857: PUSH
60858: EMPTY
60859: LIST
60860: LIST
60861: PUSH
60862: LD_INT 2
60864: PUSH
60865: LD_INT 1
60867: NEG
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
60877: LD_ADDR_VAR 0 49
60881: PUSH
60882: LD_INT 3
60884: PUSH
60885: LD_INT 1
60887: PUSH
60888: EMPTY
60889: LIST
60890: LIST
60891: PUSH
60892: LD_INT 3
60894: PUSH
60895: LD_INT 2
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
60906: LD_ADDR_VAR 0 50
60910: PUSH
60911: LD_INT 2
60913: PUSH
60914: LD_INT 3
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 1
60923: PUSH
60924: LD_INT 3
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60935: LD_ADDR_VAR 0 51
60939: PUSH
60940: LD_INT 1
60942: NEG
60943: PUSH
60944: LD_INT 2
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 2
60953: NEG
60954: PUSH
60955: LD_INT 1
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60966: LD_ADDR_VAR 0 52
60970: PUSH
60971: LD_INT 3
60973: NEG
60974: PUSH
60975: LD_INT 1
60977: NEG
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: PUSH
60983: LD_INT 3
60985: NEG
60986: PUSH
60987: LD_INT 2
60989: NEG
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60999: LD_ADDR_VAR 0 53
61003: PUSH
61004: LD_INT 1
61006: NEG
61007: PUSH
61008: LD_INT 3
61010: NEG
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: LD_INT 0
61018: PUSH
61019: LD_INT 3
61021: NEG
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: PUSH
61027: LD_INT 1
61029: PUSH
61030: LD_INT 2
61032: NEG
61033: PUSH
61034: EMPTY
61035: LIST
61036: LIST
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: LIST
61042: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61043: LD_ADDR_VAR 0 54
61047: PUSH
61048: LD_INT 2
61050: PUSH
61051: LD_INT 1
61053: NEG
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: PUSH
61059: LD_INT 3
61061: PUSH
61062: LD_INT 0
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: PUSH
61069: LD_INT 3
61071: PUSH
61072: LD_INT 1
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: PUSH
61079: EMPTY
61080: LIST
61081: LIST
61082: LIST
61083: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61084: LD_ADDR_VAR 0 55
61088: PUSH
61089: LD_INT 3
61091: PUSH
61092: LD_INT 2
61094: PUSH
61095: EMPTY
61096: LIST
61097: LIST
61098: PUSH
61099: LD_INT 3
61101: PUSH
61102: LD_INT 3
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 2
61111: PUSH
61112: LD_INT 3
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: LIST
61123: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61124: LD_ADDR_VAR 0 56
61128: PUSH
61129: LD_INT 1
61131: PUSH
61132: LD_INT 3
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: PUSH
61139: LD_INT 0
61141: PUSH
61142: LD_INT 3
61144: PUSH
61145: EMPTY
61146: LIST
61147: LIST
61148: PUSH
61149: LD_INT 1
61151: NEG
61152: PUSH
61153: LD_INT 2
61155: PUSH
61156: EMPTY
61157: LIST
61158: LIST
61159: PUSH
61160: EMPTY
61161: LIST
61162: LIST
61163: LIST
61164: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61165: LD_ADDR_VAR 0 57
61169: PUSH
61170: LD_INT 2
61172: NEG
61173: PUSH
61174: LD_INT 1
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PUSH
61181: LD_INT 3
61183: NEG
61184: PUSH
61185: LD_INT 0
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 3
61194: NEG
61195: PUSH
61196: LD_INT 1
61198: NEG
61199: PUSH
61200: EMPTY
61201: LIST
61202: LIST
61203: PUSH
61204: EMPTY
61205: LIST
61206: LIST
61207: LIST
61208: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61209: LD_ADDR_VAR 0 58
61213: PUSH
61214: LD_INT 2
61216: NEG
61217: PUSH
61218: LD_INT 3
61220: NEG
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: PUSH
61226: LD_INT 3
61228: NEG
61229: PUSH
61230: LD_INT 2
61232: NEG
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: PUSH
61238: LD_INT 3
61240: NEG
61241: PUSH
61242: LD_INT 3
61244: NEG
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: LIST
61254: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
61255: LD_ADDR_VAR 0 59
61259: PUSH
61260: LD_INT 1
61262: NEG
61263: PUSH
61264: LD_INT 2
61266: NEG
61267: PUSH
61268: EMPTY
61269: LIST
61270: LIST
61271: PUSH
61272: LD_INT 0
61274: PUSH
61275: LD_INT 2
61277: NEG
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: PUSH
61283: LD_INT 1
61285: PUSH
61286: LD_INT 1
61288: NEG
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: LIST
61298: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61299: LD_ADDR_VAR 0 60
61303: PUSH
61304: LD_INT 1
61306: PUSH
61307: LD_INT 1
61309: NEG
61310: PUSH
61311: EMPTY
61312: LIST
61313: LIST
61314: PUSH
61315: LD_INT 2
61317: PUSH
61318: LD_INT 0
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: PUSH
61325: LD_INT 2
61327: PUSH
61328: LD_INT 1
61330: PUSH
61331: EMPTY
61332: LIST
61333: LIST
61334: PUSH
61335: EMPTY
61336: LIST
61337: LIST
61338: LIST
61339: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61340: LD_ADDR_VAR 0 61
61344: PUSH
61345: LD_INT 2
61347: PUSH
61348: LD_INT 1
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: PUSH
61355: LD_INT 2
61357: PUSH
61358: LD_INT 2
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: LD_INT 1
61367: PUSH
61368: LD_INT 2
61370: PUSH
61371: EMPTY
61372: LIST
61373: LIST
61374: PUSH
61375: EMPTY
61376: LIST
61377: LIST
61378: LIST
61379: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61380: LD_ADDR_VAR 0 62
61384: PUSH
61385: LD_INT 1
61387: PUSH
61388: LD_INT 2
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: PUSH
61395: LD_INT 0
61397: PUSH
61398: LD_INT 2
61400: PUSH
61401: EMPTY
61402: LIST
61403: LIST
61404: PUSH
61405: LD_INT 1
61407: NEG
61408: PUSH
61409: LD_INT 1
61411: PUSH
61412: EMPTY
61413: LIST
61414: LIST
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: LIST
61420: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61421: LD_ADDR_VAR 0 63
61425: PUSH
61426: LD_INT 1
61428: NEG
61429: PUSH
61430: LD_INT 1
61432: PUSH
61433: EMPTY
61434: LIST
61435: LIST
61436: PUSH
61437: LD_INT 2
61439: NEG
61440: PUSH
61441: LD_INT 0
61443: PUSH
61444: EMPTY
61445: LIST
61446: LIST
61447: PUSH
61448: LD_INT 2
61450: NEG
61451: PUSH
61452: LD_INT 1
61454: NEG
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: LIST
61464: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61465: LD_ADDR_VAR 0 64
61469: PUSH
61470: LD_INT 1
61472: NEG
61473: PUSH
61474: LD_INT 2
61476: NEG
61477: PUSH
61478: EMPTY
61479: LIST
61480: LIST
61481: PUSH
61482: LD_INT 2
61484: NEG
61485: PUSH
61486: LD_INT 1
61488: NEG
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: LD_INT 2
61496: NEG
61497: PUSH
61498: LD_INT 2
61500: NEG
61501: PUSH
61502: EMPTY
61503: LIST
61504: LIST
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: LIST
61510: ST_TO_ADDR
// end ; 2 :
61511: GO 64777
61513: LD_INT 2
61515: DOUBLE
61516: EQUAL
61517: IFTRUE 61521
61519: GO 64776
61521: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
61522: LD_ADDR_VAR 0 29
61526: PUSH
61527: LD_INT 4
61529: PUSH
61530: LD_INT 0
61532: PUSH
61533: EMPTY
61534: LIST
61535: LIST
61536: PUSH
61537: LD_INT 4
61539: PUSH
61540: LD_INT 1
61542: NEG
61543: PUSH
61544: EMPTY
61545: LIST
61546: LIST
61547: PUSH
61548: LD_INT 5
61550: PUSH
61551: LD_INT 0
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: PUSH
61558: LD_INT 5
61560: PUSH
61561: LD_INT 1
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: PUSH
61568: LD_INT 4
61570: PUSH
61571: LD_INT 1
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: PUSH
61578: LD_INT 3
61580: PUSH
61581: LD_INT 0
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: PUSH
61588: LD_INT 3
61590: PUSH
61591: LD_INT 1
61593: NEG
61594: PUSH
61595: EMPTY
61596: LIST
61597: LIST
61598: PUSH
61599: LD_INT 3
61601: PUSH
61602: LD_INT 2
61604: NEG
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: PUSH
61610: LD_INT 5
61612: PUSH
61613: LD_INT 2
61615: PUSH
61616: EMPTY
61617: LIST
61618: LIST
61619: PUSH
61620: LD_INT 3
61622: PUSH
61623: LD_INT 3
61625: PUSH
61626: EMPTY
61627: LIST
61628: LIST
61629: PUSH
61630: LD_INT 3
61632: PUSH
61633: LD_INT 2
61635: PUSH
61636: EMPTY
61637: LIST
61638: LIST
61639: PUSH
61640: LD_INT 4
61642: PUSH
61643: LD_INT 3
61645: PUSH
61646: EMPTY
61647: LIST
61648: LIST
61649: PUSH
61650: LD_INT 4
61652: PUSH
61653: LD_INT 4
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: PUSH
61660: LD_INT 3
61662: PUSH
61663: LD_INT 4
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: PUSH
61670: LD_INT 2
61672: PUSH
61673: LD_INT 3
61675: PUSH
61676: EMPTY
61677: LIST
61678: LIST
61679: PUSH
61680: LD_INT 2
61682: PUSH
61683: LD_INT 2
61685: PUSH
61686: EMPTY
61687: LIST
61688: LIST
61689: PUSH
61690: LD_INT 4
61692: PUSH
61693: LD_INT 2
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: PUSH
61700: LD_INT 2
61702: PUSH
61703: LD_INT 4
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: PUSH
61710: LD_INT 0
61712: PUSH
61713: LD_INT 4
61715: PUSH
61716: EMPTY
61717: LIST
61718: LIST
61719: PUSH
61720: LD_INT 0
61722: PUSH
61723: LD_INT 3
61725: PUSH
61726: EMPTY
61727: LIST
61728: LIST
61729: PUSH
61730: LD_INT 1
61732: PUSH
61733: LD_INT 4
61735: PUSH
61736: EMPTY
61737: LIST
61738: LIST
61739: PUSH
61740: LD_INT 1
61742: PUSH
61743: LD_INT 5
61745: PUSH
61746: EMPTY
61747: LIST
61748: LIST
61749: PUSH
61750: LD_INT 0
61752: PUSH
61753: LD_INT 5
61755: PUSH
61756: EMPTY
61757: LIST
61758: LIST
61759: PUSH
61760: LD_INT 1
61762: NEG
61763: PUSH
61764: LD_INT 4
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: PUSH
61771: LD_INT 1
61773: NEG
61774: PUSH
61775: LD_INT 3
61777: PUSH
61778: EMPTY
61779: LIST
61780: LIST
61781: PUSH
61782: LD_INT 2
61784: PUSH
61785: LD_INT 5
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: PUSH
61792: LD_INT 2
61794: NEG
61795: PUSH
61796: LD_INT 3
61798: PUSH
61799: EMPTY
61800: LIST
61801: LIST
61802: PUSH
61803: LD_INT 3
61805: NEG
61806: PUSH
61807: LD_INT 0
61809: PUSH
61810: EMPTY
61811: LIST
61812: LIST
61813: PUSH
61814: LD_INT 3
61816: NEG
61817: PUSH
61818: LD_INT 1
61820: NEG
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: PUSH
61826: LD_INT 2
61828: NEG
61829: PUSH
61830: LD_INT 0
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: PUSH
61837: LD_INT 2
61839: NEG
61840: PUSH
61841: LD_INT 1
61843: PUSH
61844: EMPTY
61845: LIST
61846: LIST
61847: PUSH
61848: LD_INT 3
61850: NEG
61851: PUSH
61852: LD_INT 1
61854: PUSH
61855: EMPTY
61856: LIST
61857: LIST
61858: PUSH
61859: LD_INT 4
61861: NEG
61862: PUSH
61863: LD_INT 0
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: PUSH
61870: LD_INT 4
61872: NEG
61873: PUSH
61874: LD_INT 1
61876: NEG
61877: PUSH
61878: EMPTY
61879: LIST
61880: LIST
61881: PUSH
61882: LD_INT 4
61884: NEG
61885: PUSH
61886: LD_INT 2
61888: NEG
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: PUSH
61894: LD_INT 2
61896: NEG
61897: PUSH
61898: LD_INT 2
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: PUSH
61905: LD_INT 4
61907: NEG
61908: PUSH
61909: LD_INT 4
61911: NEG
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: PUSH
61917: LD_INT 4
61919: NEG
61920: PUSH
61921: LD_INT 5
61923: NEG
61924: PUSH
61925: EMPTY
61926: LIST
61927: LIST
61928: PUSH
61929: LD_INT 3
61931: NEG
61932: PUSH
61933: LD_INT 4
61935: NEG
61936: PUSH
61937: EMPTY
61938: LIST
61939: LIST
61940: PUSH
61941: LD_INT 3
61943: NEG
61944: PUSH
61945: LD_INT 3
61947: NEG
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: LD_INT 4
61955: NEG
61956: PUSH
61957: LD_INT 3
61959: NEG
61960: PUSH
61961: EMPTY
61962: LIST
61963: LIST
61964: PUSH
61965: LD_INT 5
61967: NEG
61968: PUSH
61969: LD_INT 4
61971: NEG
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: PUSH
61977: LD_INT 5
61979: NEG
61980: PUSH
61981: LD_INT 5
61983: NEG
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: LD_INT 3
61991: NEG
61992: PUSH
61993: LD_INT 5
61995: NEG
61996: PUSH
61997: EMPTY
61998: LIST
61999: LIST
62000: PUSH
62001: LD_INT 5
62003: NEG
62004: PUSH
62005: LD_INT 3
62007: NEG
62008: PUSH
62009: EMPTY
62010: LIST
62011: LIST
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: LIST
62017: LIST
62018: LIST
62019: LIST
62020: LIST
62021: LIST
62022: LIST
62023: LIST
62024: LIST
62025: LIST
62026: LIST
62027: LIST
62028: LIST
62029: LIST
62030: LIST
62031: LIST
62032: LIST
62033: LIST
62034: LIST
62035: LIST
62036: LIST
62037: LIST
62038: LIST
62039: LIST
62040: LIST
62041: LIST
62042: LIST
62043: LIST
62044: LIST
62045: LIST
62046: LIST
62047: LIST
62048: LIST
62049: LIST
62050: LIST
62051: LIST
62052: LIST
62053: LIST
62054: LIST
62055: LIST
62056: LIST
62057: LIST
62058: LIST
62059: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
62060: LD_ADDR_VAR 0 30
62064: PUSH
62065: LD_INT 4
62067: PUSH
62068: LD_INT 4
62070: PUSH
62071: EMPTY
62072: LIST
62073: LIST
62074: PUSH
62075: LD_INT 4
62077: PUSH
62078: LD_INT 3
62080: PUSH
62081: EMPTY
62082: LIST
62083: LIST
62084: PUSH
62085: LD_INT 5
62087: PUSH
62088: LD_INT 4
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: PUSH
62095: LD_INT 5
62097: PUSH
62098: LD_INT 5
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: PUSH
62105: LD_INT 4
62107: PUSH
62108: LD_INT 5
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: PUSH
62115: LD_INT 3
62117: PUSH
62118: LD_INT 4
62120: PUSH
62121: EMPTY
62122: LIST
62123: LIST
62124: PUSH
62125: LD_INT 3
62127: PUSH
62128: LD_INT 3
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: PUSH
62135: LD_INT 5
62137: PUSH
62138: LD_INT 3
62140: PUSH
62141: EMPTY
62142: LIST
62143: LIST
62144: PUSH
62145: LD_INT 3
62147: PUSH
62148: LD_INT 5
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: PUSH
62155: LD_INT 0
62157: PUSH
62158: LD_INT 3
62160: PUSH
62161: EMPTY
62162: LIST
62163: LIST
62164: PUSH
62165: LD_INT 0
62167: PUSH
62168: LD_INT 2
62170: PUSH
62171: EMPTY
62172: LIST
62173: LIST
62174: PUSH
62175: LD_INT 1
62177: PUSH
62178: LD_INT 3
62180: PUSH
62181: EMPTY
62182: LIST
62183: LIST
62184: PUSH
62185: LD_INT 1
62187: PUSH
62188: LD_INT 4
62190: PUSH
62191: EMPTY
62192: LIST
62193: LIST
62194: PUSH
62195: LD_INT 0
62197: PUSH
62198: LD_INT 4
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PUSH
62205: LD_INT 1
62207: NEG
62208: PUSH
62209: LD_INT 3
62211: PUSH
62212: EMPTY
62213: LIST
62214: LIST
62215: PUSH
62216: LD_INT 1
62218: NEG
62219: PUSH
62220: LD_INT 2
62222: PUSH
62223: EMPTY
62224: LIST
62225: LIST
62226: PUSH
62227: LD_INT 2
62229: PUSH
62230: LD_INT 4
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: PUSH
62237: LD_INT 2
62239: NEG
62240: PUSH
62241: LD_INT 2
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: PUSH
62248: LD_INT 4
62250: NEG
62251: PUSH
62252: LD_INT 0
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: PUSH
62259: LD_INT 4
62261: NEG
62262: PUSH
62263: LD_INT 1
62265: NEG
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: PUSH
62271: LD_INT 3
62273: NEG
62274: PUSH
62275: LD_INT 0
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PUSH
62282: LD_INT 3
62284: NEG
62285: PUSH
62286: LD_INT 1
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: PUSH
62293: LD_INT 4
62295: NEG
62296: PUSH
62297: LD_INT 1
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: PUSH
62304: LD_INT 5
62306: NEG
62307: PUSH
62308: LD_INT 0
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: PUSH
62315: LD_INT 5
62317: NEG
62318: PUSH
62319: LD_INT 1
62321: NEG
62322: PUSH
62323: EMPTY
62324: LIST
62325: LIST
62326: PUSH
62327: LD_INT 5
62329: NEG
62330: PUSH
62331: LD_INT 2
62333: NEG
62334: PUSH
62335: EMPTY
62336: LIST
62337: LIST
62338: PUSH
62339: LD_INT 3
62341: NEG
62342: PUSH
62343: LD_INT 2
62345: PUSH
62346: EMPTY
62347: LIST
62348: LIST
62349: PUSH
62350: LD_INT 3
62352: NEG
62353: PUSH
62354: LD_INT 3
62356: NEG
62357: PUSH
62358: EMPTY
62359: LIST
62360: LIST
62361: PUSH
62362: LD_INT 3
62364: NEG
62365: PUSH
62366: LD_INT 4
62368: NEG
62369: PUSH
62370: EMPTY
62371: LIST
62372: LIST
62373: PUSH
62374: LD_INT 2
62376: NEG
62377: PUSH
62378: LD_INT 3
62380: NEG
62381: PUSH
62382: EMPTY
62383: LIST
62384: LIST
62385: PUSH
62386: LD_INT 2
62388: NEG
62389: PUSH
62390: LD_INT 2
62392: NEG
62393: PUSH
62394: EMPTY
62395: LIST
62396: LIST
62397: PUSH
62398: LD_INT 3
62400: NEG
62401: PUSH
62402: LD_INT 2
62404: NEG
62405: PUSH
62406: EMPTY
62407: LIST
62408: LIST
62409: PUSH
62410: LD_INT 4
62412: NEG
62413: PUSH
62414: LD_INT 3
62416: NEG
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: PUSH
62422: LD_INT 4
62424: NEG
62425: PUSH
62426: LD_INT 4
62428: NEG
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: PUSH
62434: LD_INT 2
62436: NEG
62437: PUSH
62438: LD_INT 4
62440: NEG
62441: PUSH
62442: EMPTY
62443: LIST
62444: LIST
62445: PUSH
62446: LD_INT 4
62448: NEG
62449: PUSH
62450: LD_INT 2
62452: NEG
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: PUSH
62458: LD_INT 0
62460: PUSH
62461: LD_INT 4
62463: NEG
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 0
62471: PUSH
62472: LD_INT 5
62474: NEG
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: PUSH
62480: LD_INT 1
62482: PUSH
62483: LD_INT 4
62485: NEG
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: PUSH
62491: LD_INT 1
62493: PUSH
62494: LD_INT 3
62496: NEG
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: PUSH
62502: LD_INT 0
62504: PUSH
62505: LD_INT 3
62507: NEG
62508: PUSH
62509: EMPTY
62510: LIST
62511: LIST
62512: PUSH
62513: LD_INT 1
62515: NEG
62516: PUSH
62517: LD_INT 4
62519: NEG
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: PUSH
62525: LD_INT 1
62527: NEG
62528: PUSH
62529: LD_INT 5
62531: NEG
62532: PUSH
62533: EMPTY
62534: LIST
62535: LIST
62536: PUSH
62537: LD_INT 2
62539: PUSH
62540: LD_INT 3
62542: NEG
62543: PUSH
62544: EMPTY
62545: LIST
62546: LIST
62547: PUSH
62548: LD_INT 2
62550: NEG
62551: PUSH
62552: LD_INT 5
62554: NEG
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: PUSH
62560: EMPTY
62561: LIST
62562: LIST
62563: LIST
62564: LIST
62565: LIST
62566: LIST
62567: LIST
62568: LIST
62569: LIST
62570: LIST
62571: LIST
62572: LIST
62573: LIST
62574: LIST
62575: LIST
62576: LIST
62577: LIST
62578: LIST
62579: LIST
62580: LIST
62581: LIST
62582: LIST
62583: LIST
62584: LIST
62585: LIST
62586: LIST
62587: LIST
62588: LIST
62589: LIST
62590: LIST
62591: LIST
62592: LIST
62593: LIST
62594: LIST
62595: LIST
62596: LIST
62597: LIST
62598: LIST
62599: LIST
62600: LIST
62601: LIST
62602: LIST
62603: LIST
62604: LIST
62605: LIST
62606: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
62607: LD_ADDR_VAR 0 31
62611: PUSH
62612: LD_INT 0
62614: PUSH
62615: LD_INT 4
62617: PUSH
62618: EMPTY
62619: LIST
62620: LIST
62621: PUSH
62622: LD_INT 0
62624: PUSH
62625: LD_INT 3
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: PUSH
62632: LD_INT 1
62634: PUSH
62635: LD_INT 4
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: LD_INT 1
62644: PUSH
62645: LD_INT 5
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: PUSH
62652: LD_INT 0
62654: PUSH
62655: LD_INT 5
62657: PUSH
62658: EMPTY
62659: LIST
62660: LIST
62661: PUSH
62662: LD_INT 1
62664: NEG
62665: PUSH
62666: LD_INT 4
62668: PUSH
62669: EMPTY
62670: LIST
62671: LIST
62672: PUSH
62673: LD_INT 1
62675: NEG
62676: PUSH
62677: LD_INT 3
62679: PUSH
62680: EMPTY
62681: LIST
62682: LIST
62683: PUSH
62684: LD_INT 2
62686: PUSH
62687: LD_INT 5
62689: PUSH
62690: EMPTY
62691: LIST
62692: LIST
62693: PUSH
62694: LD_INT 2
62696: NEG
62697: PUSH
62698: LD_INT 3
62700: PUSH
62701: EMPTY
62702: LIST
62703: LIST
62704: PUSH
62705: LD_INT 3
62707: NEG
62708: PUSH
62709: LD_INT 0
62711: PUSH
62712: EMPTY
62713: LIST
62714: LIST
62715: PUSH
62716: LD_INT 3
62718: NEG
62719: PUSH
62720: LD_INT 1
62722: NEG
62723: PUSH
62724: EMPTY
62725: LIST
62726: LIST
62727: PUSH
62728: LD_INT 2
62730: NEG
62731: PUSH
62732: LD_INT 0
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: PUSH
62739: LD_INT 2
62741: NEG
62742: PUSH
62743: LD_INT 1
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: LD_INT 3
62752: NEG
62753: PUSH
62754: LD_INT 1
62756: PUSH
62757: EMPTY
62758: LIST
62759: LIST
62760: PUSH
62761: LD_INT 4
62763: NEG
62764: PUSH
62765: LD_INT 0
62767: PUSH
62768: EMPTY
62769: LIST
62770: LIST
62771: PUSH
62772: LD_INT 4
62774: NEG
62775: PUSH
62776: LD_INT 1
62778: NEG
62779: PUSH
62780: EMPTY
62781: LIST
62782: LIST
62783: PUSH
62784: LD_INT 4
62786: NEG
62787: PUSH
62788: LD_INT 2
62790: NEG
62791: PUSH
62792: EMPTY
62793: LIST
62794: LIST
62795: PUSH
62796: LD_INT 2
62798: NEG
62799: PUSH
62800: LD_INT 2
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: PUSH
62807: LD_INT 4
62809: NEG
62810: PUSH
62811: LD_INT 4
62813: NEG
62814: PUSH
62815: EMPTY
62816: LIST
62817: LIST
62818: PUSH
62819: LD_INT 4
62821: NEG
62822: PUSH
62823: LD_INT 5
62825: NEG
62826: PUSH
62827: EMPTY
62828: LIST
62829: LIST
62830: PUSH
62831: LD_INT 3
62833: NEG
62834: PUSH
62835: LD_INT 4
62837: NEG
62838: PUSH
62839: EMPTY
62840: LIST
62841: LIST
62842: PUSH
62843: LD_INT 3
62845: NEG
62846: PUSH
62847: LD_INT 3
62849: NEG
62850: PUSH
62851: EMPTY
62852: LIST
62853: LIST
62854: PUSH
62855: LD_INT 4
62857: NEG
62858: PUSH
62859: LD_INT 3
62861: NEG
62862: PUSH
62863: EMPTY
62864: LIST
62865: LIST
62866: PUSH
62867: LD_INT 5
62869: NEG
62870: PUSH
62871: LD_INT 4
62873: NEG
62874: PUSH
62875: EMPTY
62876: LIST
62877: LIST
62878: PUSH
62879: LD_INT 5
62881: NEG
62882: PUSH
62883: LD_INT 5
62885: NEG
62886: PUSH
62887: EMPTY
62888: LIST
62889: LIST
62890: PUSH
62891: LD_INT 3
62893: NEG
62894: PUSH
62895: LD_INT 5
62897: NEG
62898: PUSH
62899: EMPTY
62900: LIST
62901: LIST
62902: PUSH
62903: LD_INT 5
62905: NEG
62906: PUSH
62907: LD_INT 3
62909: NEG
62910: PUSH
62911: EMPTY
62912: LIST
62913: LIST
62914: PUSH
62915: LD_INT 0
62917: PUSH
62918: LD_INT 3
62920: NEG
62921: PUSH
62922: EMPTY
62923: LIST
62924: LIST
62925: PUSH
62926: LD_INT 0
62928: PUSH
62929: LD_INT 4
62931: NEG
62932: PUSH
62933: EMPTY
62934: LIST
62935: LIST
62936: PUSH
62937: LD_INT 1
62939: PUSH
62940: LD_INT 3
62942: NEG
62943: PUSH
62944: EMPTY
62945: LIST
62946: LIST
62947: PUSH
62948: LD_INT 1
62950: PUSH
62951: LD_INT 2
62953: NEG
62954: PUSH
62955: EMPTY
62956: LIST
62957: LIST
62958: PUSH
62959: LD_INT 0
62961: PUSH
62962: LD_INT 2
62964: NEG
62965: PUSH
62966: EMPTY
62967: LIST
62968: LIST
62969: PUSH
62970: LD_INT 1
62972: NEG
62973: PUSH
62974: LD_INT 3
62976: NEG
62977: PUSH
62978: EMPTY
62979: LIST
62980: LIST
62981: PUSH
62982: LD_INT 1
62984: NEG
62985: PUSH
62986: LD_INT 4
62988: NEG
62989: PUSH
62990: EMPTY
62991: LIST
62992: LIST
62993: PUSH
62994: LD_INT 2
62996: PUSH
62997: LD_INT 2
62999: NEG
63000: PUSH
63001: EMPTY
63002: LIST
63003: LIST
63004: PUSH
63005: LD_INT 2
63007: NEG
63008: PUSH
63009: LD_INT 4
63011: NEG
63012: PUSH
63013: EMPTY
63014: LIST
63015: LIST
63016: PUSH
63017: LD_INT 4
63019: PUSH
63020: LD_INT 0
63022: PUSH
63023: EMPTY
63024: LIST
63025: LIST
63026: PUSH
63027: LD_INT 4
63029: PUSH
63030: LD_INT 1
63032: NEG
63033: PUSH
63034: EMPTY
63035: LIST
63036: LIST
63037: PUSH
63038: LD_INT 5
63040: PUSH
63041: LD_INT 0
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: PUSH
63048: LD_INT 5
63050: PUSH
63051: LD_INT 1
63053: PUSH
63054: EMPTY
63055: LIST
63056: LIST
63057: PUSH
63058: LD_INT 4
63060: PUSH
63061: LD_INT 1
63063: PUSH
63064: EMPTY
63065: LIST
63066: LIST
63067: PUSH
63068: LD_INT 3
63070: PUSH
63071: LD_INT 0
63073: PUSH
63074: EMPTY
63075: LIST
63076: LIST
63077: PUSH
63078: LD_INT 3
63080: PUSH
63081: LD_INT 1
63083: NEG
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: PUSH
63089: LD_INT 3
63091: PUSH
63092: LD_INT 2
63094: NEG
63095: PUSH
63096: EMPTY
63097: LIST
63098: LIST
63099: PUSH
63100: LD_INT 5
63102: PUSH
63103: LD_INT 2
63105: PUSH
63106: EMPTY
63107: LIST
63108: LIST
63109: PUSH
63110: EMPTY
63111: LIST
63112: LIST
63113: LIST
63114: LIST
63115: LIST
63116: LIST
63117: LIST
63118: LIST
63119: LIST
63120: LIST
63121: LIST
63122: LIST
63123: LIST
63124: LIST
63125: LIST
63126: LIST
63127: LIST
63128: LIST
63129: LIST
63130: LIST
63131: LIST
63132: LIST
63133: LIST
63134: LIST
63135: LIST
63136: LIST
63137: LIST
63138: LIST
63139: LIST
63140: LIST
63141: LIST
63142: LIST
63143: LIST
63144: LIST
63145: LIST
63146: LIST
63147: LIST
63148: LIST
63149: LIST
63150: LIST
63151: LIST
63152: LIST
63153: LIST
63154: LIST
63155: LIST
63156: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
63157: LD_ADDR_VAR 0 32
63161: PUSH
63162: LD_INT 4
63164: NEG
63165: PUSH
63166: LD_INT 0
63168: PUSH
63169: EMPTY
63170: LIST
63171: LIST
63172: PUSH
63173: LD_INT 4
63175: NEG
63176: PUSH
63177: LD_INT 1
63179: NEG
63180: PUSH
63181: EMPTY
63182: LIST
63183: LIST
63184: PUSH
63185: LD_INT 3
63187: NEG
63188: PUSH
63189: LD_INT 0
63191: PUSH
63192: EMPTY
63193: LIST
63194: LIST
63195: PUSH
63196: LD_INT 3
63198: NEG
63199: PUSH
63200: LD_INT 1
63202: PUSH
63203: EMPTY
63204: LIST
63205: LIST
63206: PUSH
63207: LD_INT 4
63209: NEG
63210: PUSH
63211: LD_INT 1
63213: PUSH
63214: EMPTY
63215: LIST
63216: LIST
63217: PUSH
63218: LD_INT 5
63220: NEG
63221: PUSH
63222: LD_INT 0
63224: PUSH
63225: EMPTY
63226: LIST
63227: LIST
63228: PUSH
63229: LD_INT 5
63231: NEG
63232: PUSH
63233: LD_INT 1
63235: NEG
63236: PUSH
63237: EMPTY
63238: LIST
63239: LIST
63240: PUSH
63241: LD_INT 5
63243: NEG
63244: PUSH
63245: LD_INT 2
63247: NEG
63248: PUSH
63249: EMPTY
63250: LIST
63251: LIST
63252: PUSH
63253: LD_INT 3
63255: NEG
63256: PUSH
63257: LD_INT 2
63259: PUSH
63260: EMPTY
63261: LIST
63262: LIST
63263: PUSH
63264: LD_INT 3
63266: NEG
63267: PUSH
63268: LD_INT 3
63270: NEG
63271: PUSH
63272: EMPTY
63273: LIST
63274: LIST
63275: PUSH
63276: LD_INT 3
63278: NEG
63279: PUSH
63280: LD_INT 4
63282: NEG
63283: PUSH
63284: EMPTY
63285: LIST
63286: LIST
63287: PUSH
63288: LD_INT 2
63290: NEG
63291: PUSH
63292: LD_INT 3
63294: NEG
63295: PUSH
63296: EMPTY
63297: LIST
63298: LIST
63299: PUSH
63300: LD_INT 2
63302: NEG
63303: PUSH
63304: LD_INT 2
63306: NEG
63307: PUSH
63308: EMPTY
63309: LIST
63310: LIST
63311: PUSH
63312: LD_INT 3
63314: NEG
63315: PUSH
63316: LD_INT 2
63318: NEG
63319: PUSH
63320: EMPTY
63321: LIST
63322: LIST
63323: PUSH
63324: LD_INT 4
63326: NEG
63327: PUSH
63328: LD_INT 3
63330: NEG
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: PUSH
63336: LD_INT 4
63338: NEG
63339: PUSH
63340: LD_INT 4
63342: NEG
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: PUSH
63348: LD_INT 2
63350: NEG
63351: PUSH
63352: LD_INT 4
63354: NEG
63355: PUSH
63356: EMPTY
63357: LIST
63358: LIST
63359: PUSH
63360: LD_INT 4
63362: NEG
63363: PUSH
63364: LD_INT 2
63366: NEG
63367: PUSH
63368: EMPTY
63369: LIST
63370: LIST
63371: PUSH
63372: LD_INT 0
63374: PUSH
63375: LD_INT 4
63377: NEG
63378: PUSH
63379: EMPTY
63380: LIST
63381: LIST
63382: PUSH
63383: LD_INT 0
63385: PUSH
63386: LD_INT 5
63388: NEG
63389: PUSH
63390: EMPTY
63391: LIST
63392: LIST
63393: PUSH
63394: LD_INT 1
63396: PUSH
63397: LD_INT 4
63399: NEG
63400: PUSH
63401: EMPTY
63402: LIST
63403: LIST
63404: PUSH
63405: LD_INT 1
63407: PUSH
63408: LD_INT 3
63410: NEG
63411: PUSH
63412: EMPTY
63413: LIST
63414: LIST
63415: PUSH
63416: LD_INT 0
63418: PUSH
63419: LD_INT 3
63421: NEG
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: PUSH
63427: LD_INT 1
63429: NEG
63430: PUSH
63431: LD_INT 4
63433: NEG
63434: PUSH
63435: EMPTY
63436: LIST
63437: LIST
63438: PUSH
63439: LD_INT 1
63441: NEG
63442: PUSH
63443: LD_INT 5
63445: NEG
63446: PUSH
63447: EMPTY
63448: LIST
63449: LIST
63450: PUSH
63451: LD_INT 2
63453: PUSH
63454: LD_INT 3
63456: NEG
63457: PUSH
63458: EMPTY
63459: LIST
63460: LIST
63461: PUSH
63462: LD_INT 2
63464: NEG
63465: PUSH
63466: LD_INT 5
63468: NEG
63469: PUSH
63470: EMPTY
63471: LIST
63472: LIST
63473: PUSH
63474: LD_INT 3
63476: PUSH
63477: LD_INT 0
63479: PUSH
63480: EMPTY
63481: LIST
63482: LIST
63483: PUSH
63484: LD_INT 3
63486: PUSH
63487: LD_INT 1
63489: NEG
63490: PUSH
63491: EMPTY
63492: LIST
63493: LIST
63494: PUSH
63495: LD_INT 4
63497: PUSH
63498: LD_INT 0
63500: PUSH
63501: EMPTY
63502: LIST
63503: LIST
63504: PUSH
63505: LD_INT 4
63507: PUSH
63508: LD_INT 1
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: PUSH
63515: LD_INT 3
63517: PUSH
63518: LD_INT 1
63520: PUSH
63521: EMPTY
63522: LIST
63523: LIST
63524: PUSH
63525: LD_INT 2
63527: PUSH
63528: LD_INT 0
63530: PUSH
63531: EMPTY
63532: LIST
63533: LIST
63534: PUSH
63535: LD_INT 2
63537: PUSH
63538: LD_INT 1
63540: NEG
63541: PUSH
63542: EMPTY
63543: LIST
63544: LIST
63545: PUSH
63546: LD_INT 2
63548: PUSH
63549: LD_INT 2
63551: NEG
63552: PUSH
63553: EMPTY
63554: LIST
63555: LIST
63556: PUSH
63557: LD_INT 4
63559: PUSH
63560: LD_INT 2
63562: PUSH
63563: EMPTY
63564: LIST
63565: LIST
63566: PUSH
63567: LD_INT 4
63569: PUSH
63570: LD_INT 4
63572: PUSH
63573: EMPTY
63574: LIST
63575: LIST
63576: PUSH
63577: LD_INT 4
63579: PUSH
63580: LD_INT 3
63582: PUSH
63583: EMPTY
63584: LIST
63585: LIST
63586: PUSH
63587: LD_INT 5
63589: PUSH
63590: LD_INT 4
63592: PUSH
63593: EMPTY
63594: LIST
63595: LIST
63596: PUSH
63597: LD_INT 5
63599: PUSH
63600: LD_INT 5
63602: PUSH
63603: EMPTY
63604: LIST
63605: LIST
63606: PUSH
63607: LD_INT 4
63609: PUSH
63610: LD_INT 5
63612: PUSH
63613: EMPTY
63614: LIST
63615: LIST
63616: PUSH
63617: LD_INT 3
63619: PUSH
63620: LD_INT 4
63622: PUSH
63623: EMPTY
63624: LIST
63625: LIST
63626: PUSH
63627: LD_INT 3
63629: PUSH
63630: LD_INT 3
63632: PUSH
63633: EMPTY
63634: LIST
63635: LIST
63636: PUSH
63637: LD_INT 5
63639: PUSH
63640: LD_INT 3
63642: PUSH
63643: EMPTY
63644: LIST
63645: LIST
63646: PUSH
63647: LD_INT 3
63649: PUSH
63650: LD_INT 5
63652: PUSH
63653: EMPTY
63654: LIST
63655: LIST
63656: PUSH
63657: EMPTY
63658: LIST
63659: LIST
63660: LIST
63661: LIST
63662: LIST
63663: LIST
63664: LIST
63665: LIST
63666: LIST
63667: LIST
63668: LIST
63669: LIST
63670: LIST
63671: LIST
63672: LIST
63673: LIST
63674: LIST
63675: LIST
63676: LIST
63677: LIST
63678: LIST
63679: LIST
63680: LIST
63681: LIST
63682: LIST
63683: LIST
63684: LIST
63685: LIST
63686: LIST
63687: LIST
63688: LIST
63689: LIST
63690: LIST
63691: LIST
63692: LIST
63693: LIST
63694: LIST
63695: LIST
63696: LIST
63697: LIST
63698: LIST
63699: LIST
63700: LIST
63701: LIST
63702: LIST
63703: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
63704: LD_ADDR_VAR 0 33
63708: PUSH
63709: LD_INT 4
63711: NEG
63712: PUSH
63713: LD_INT 4
63715: NEG
63716: PUSH
63717: EMPTY
63718: LIST
63719: LIST
63720: PUSH
63721: LD_INT 4
63723: NEG
63724: PUSH
63725: LD_INT 5
63727: NEG
63728: PUSH
63729: EMPTY
63730: LIST
63731: LIST
63732: PUSH
63733: LD_INT 3
63735: NEG
63736: PUSH
63737: LD_INT 4
63739: NEG
63740: PUSH
63741: EMPTY
63742: LIST
63743: LIST
63744: PUSH
63745: LD_INT 3
63747: NEG
63748: PUSH
63749: LD_INT 3
63751: NEG
63752: PUSH
63753: EMPTY
63754: LIST
63755: LIST
63756: PUSH
63757: LD_INT 4
63759: NEG
63760: PUSH
63761: LD_INT 3
63763: NEG
63764: PUSH
63765: EMPTY
63766: LIST
63767: LIST
63768: PUSH
63769: LD_INT 5
63771: NEG
63772: PUSH
63773: LD_INT 4
63775: NEG
63776: PUSH
63777: EMPTY
63778: LIST
63779: LIST
63780: PUSH
63781: LD_INT 5
63783: NEG
63784: PUSH
63785: LD_INT 5
63787: NEG
63788: PUSH
63789: EMPTY
63790: LIST
63791: LIST
63792: PUSH
63793: LD_INT 3
63795: NEG
63796: PUSH
63797: LD_INT 5
63799: NEG
63800: PUSH
63801: EMPTY
63802: LIST
63803: LIST
63804: PUSH
63805: LD_INT 5
63807: NEG
63808: PUSH
63809: LD_INT 3
63811: NEG
63812: PUSH
63813: EMPTY
63814: LIST
63815: LIST
63816: PUSH
63817: LD_INT 0
63819: PUSH
63820: LD_INT 3
63822: NEG
63823: PUSH
63824: EMPTY
63825: LIST
63826: LIST
63827: PUSH
63828: LD_INT 0
63830: PUSH
63831: LD_INT 4
63833: NEG
63834: PUSH
63835: EMPTY
63836: LIST
63837: LIST
63838: PUSH
63839: LD_INT 1
63841: PUSH
63842: LD_INT 3
63844: NEG
63845: PUSH
63846: EMPTY
63847: LIST
63848: LIST
63849: PUSH
63850: LD_INT 1
63852: PUSH
63853: LD_INT 2
63855: NEG
63856: PUSH
63857: EMPTY
63858: LIST
63859: LIST
63860: PUSH
63861: LD_INT 0
63863: PUSH
63864: LD_INT 2
63866: NEG
63867: PUSH
63868: EMPTY
63869: LIST
63870: LIST
63871: PUSH
63872: LD_INT 1
63874: NEG
63875: PUSH
63876: LD_INT 3
63878: NEG
63879: PUSH
63880: EMPTY
63881: LIST
63882: LIST
63883: PUSH
63884: LD_INT 1
63886: NEG
63887: PUSH
63888: LD_INT 4
63890: NEG
63891: PUSH
63892: EMPTY
63893: LIST
63894: LIST
63895: PUSH
63896: LD_INT 2
63898: PUSH
63899: LD_INT 2
63901: NEG
63902: PUSH
63903: EMPTY
63904: LIST
63905: LIST
63906: PUSH
63907: LD_INT 2
63909: NEG
63910: PUSH
63911: LD_INT 4
63913: NEG
63914: PUSH
63915: EMPTY
63916: LIST
63917: LIST
63918: PUSH
63919: LD_INT 4
63921: PUSH
63922: LD_INT 0
63924: PUSH
63925: EMPTY
63926: LIST
63927: LIST
63928: PUSH
63929: LD_INT 4
63931: PUSH
63932: LD_INT 1
63934: NEG
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: PUSH
63940: LD_INT 5
63942: PUSH
63943: LD_INT 0
63945: PUSH
63946: EMPTY
63947: LIST
63948: LIST
63949: PUSH
63950: LD_INT 5
63952: PUSH
63953: LD_INT 1
63955: PUSH
63956: EMPTY
63957: LIST
63958: LIST
63959: PUSH
63960: LD_INT 4
63962: PUSH
63963: LD_INT 1
63965: PUSH
63966: EMPTY
63967: LIST
63968: LIST
63969: PUSH
63970: LD_INT 3
63972: PUSH
63973: LD_INT 0
63975: PUSH
63976: EMPTY
63977: LIST
63978: LIST
63979: PUSH
63980: LD_INT 3
63982: PUSH
63983: LD_INT 1
63985: NEG
63986: PUSH
63987: EMPTY
63988: LIST
63989: LIST
63990: PUSH
63991: LD_INT 3
63993: PUSH
63994: LD_INT 2
63996: NEG
63997: PUSH
63998: EMPTY
63999: LIST
64000: LIST
64001: PUSH
64002: LD_INT 5
64004: PUSH
64005: LD_INT 2
64007: PUSH
64008: EMPTY
64009: LIST
64010: LIST
64011: PUSH
64012: LD_INT 3
64014: PUSH
64015: LD_INT 3
64017: PUSH
64018: EMPTY
64019: LIST
64020: LIST
64021: PUSH
64022: LD_INT 3
64024: PUSH
64025: LD_INT 2
64027: PUSH
64028: EMPTY
64029: LIST
64030: LIST
64031: PUSH
64032: LD_INT 4
64034: PUSH
64035: LD_INT 3
64037: PUSH
64038: EMPTY
64039: LIST
64040: LIST
64041: PUSH
64042: LD_INT 4
64044: PUSH
64045: LD_INT 4
64047: PUSH
64048: EMPTY
64049: LIST
64050: LIST
64051: PUSH
64052: LD_INT 3
64054: PUSH
64055: LD_INT 4
64057: PUSH
64058: EMPTY
64059: LIST
64060: LIST
64061: PUSH
64062: LD_INT 2
64064: PUSH
64065: LD_INT 3
64067: PUSH
64068: EMPTY
64069: LIST
64070: LIST
64071: PUSH
64072: LD_INT 2
64074: PUSH
64075: LD_INT 2
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: PUSH
64082: LD_INT 4
64084: PUSH
64085: LD_INT 2
64087: PUSH
64088: EMPTY
64089: LIST
64090: LIST
64091: PUSH
64092: LD_INT 2
64094: PUSH
64095: LD_INT 4
64097: PUSH
64098: EMPTY
64099: LIST
64100: LIST
64101: PUSH
64102: LD_INT 0
64104: PUSH
64105: LD_INT 4
64107: PUSH
64108: EMPTY
64109: LIST
64110: LIST
64111: PUSH
64112: LD_INT 0
64114: PUSH
64115: LD_INT 3
64117: PUSH
64118: EMPTY
64119: LIST
64120: LIST
64121: PUSH
64122: LD_INT 1
64124: PUSH
64125: LD_INT 4
64127: PUSH
64128: EMPTY
64129: LIST
64130: LIST
64131: PUSH
64132: LD_INT 1
64134: PUSH
64135: LD_INT 5
64137: PUSH
64138: EMPTY
64139: LIST
64140: LIST
64141: PUSH
64142: LD_INT 0
64144: PUSH
64145: LD_INT 5
64147: PUSH
64148: EMPTY
64149: LIST
64150: LIST
64151: PUSH
64152: LD_INT 1
64154: NEG
64155: PUSH
64156: LD_INT 4
64158: PUSH
64159: EMPTY
64160: LIST
64161: LIST
64162: PUSH
64163: LD_INT 1
64165: NEG
64166: PUSH
64167: LD_INT 3
64169: PUSH
64170: EMPTY
64171: LIST
64172: LIST
64173: PUSH
64174: LD_INT 2
64176: PUSH
64177: LD_INT 5
64179: PUSH
64180: EMPTY
64181: LIST
64182: LIST
64183: PUSH
64184: LD_INT 2
64186: NEG
64187: PUSH
64188: LD_INT 3
64190: PUSH
64191: EMPTY
64192: LIST
64193: LIST
64194: PUSH
64195: EMPTY
64196: LIST
64197: LIST
64198: LIST
64199: LIST
64200: LIST
64201: LIST
64202: LIST
64203: LIST
64204: LIST
64205: LIST
64206: LIST
64207: LIST
64208: LIST
64209: LIST
64210: LIST
64211: LIST
64212: LIST
64213: LIST
64214: LIST
64215: LIST
64216: LIST
64217: LIST
64218: LIST
64219: LIST
64220: LIST
64221: LIST
64222: LIST
64223: LIST
64224: LIST
64225: LIST
64226: LIST
64227: LIST
64228: LIST
64229: LIST
64230: LIST
64231: LIST
64232: LIST
64233: LIST
64234: LIST
64235: LIST
64236: LIST
64237: LIST
64238: LIST
64239: LIST
64240: LIST
64241: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
64242: LD_ADDR_VAR 0 34
64246: PUSH
64247: LD_INT 0
64249: PUSH
64250: LD_INT 4
64252: NEG
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: PUSH
64258: LD_INT 0
64260: PUSH
64261: LD_INT 5
64263: NEG
64264: PUSH
64265: EMPTY
64266: LIST
64267: LIST
64268: PUSH
64269: LD_INT 1
64271: PUSH
64272: LD_INT 4
64274: NEG
64275: PUSH
64276: EMPTY
64277: LIST
64278: LIST
64279: PUSH
64280: LD_INT 1
64282: PUSH
64283: LD_INT 3
64285: NEG
64286: PUSH
64287: EMPTY
64288: LIST
64289: LIST
64290: PUSH
64291: LD_INT 0
64293: PUSH
64294: LD_INT 3
64296: NEG
64297: PUSH
64298: EMPTY
64299: LIST
64300: LIST
64301: PUSH
64302: LD_INT 1
64304: NEG
64305: PUSH
64306: LD_INT 4
64308: NEG
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: PUSH
64314: LD_INT 1
64316: NEG
64317: PUSH
64318: LD_INT 5
64320: NEG
64321: PUSH
64322: EMPTY
64323: LIST
64324: LIST
64325: PUSH
64326: LD_INT 2
64328: PUSH
64329: LD_INT 3
64331: NEG
64332: PUSH
64333: EMPTY
64334: LIST
64335: LIST
64336: PUSH
64337: LD_INT 2
64339: NEG
64340: PUSH
64341: LD_INT 5
64343: NEG
64344: PUSH
64345: EMPTY
64346: LIST
64347: LIST
64348: PUSH
64349: LD_INT 3
64351: PUSH
64352: LD_INT 0
64354: PUSH
64355: EMPTY
64356: LIST
64357: LIST
64358: PUSH
64359: LD_INT 3
64361: PUSH
64362: LD_INT 1
64364: NEG
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: PUSH
64370: LD_INT 4
64372: PUSH
64373: LD_INT 0
64375: PUSH
64376: EMPTY
64377: LIST
64378: LIST
64379: PUSH
64380: LD_INT 4
64382: PUSH
64383: LD_INT 1
64385: PUSH
64386: EMPTY
64387: LIST
64388: LIST
64389: PUSH
64390: LD_INT 3
64392: PUSH
64393: LD_INT 1
64395: PUSH
64396: EMPTY
64397: LIST
64398: LIST
64399: PUSH
64400: LD_INT 2
64402: PUSH
64403: LD_INT 0
64405: PUSH
64406: EMPTY
64407: LIST
64408: LIST
64409: PUSH
64410: LD_INT 2
64412: PUSH
64413: LD_INT 1
64415: NEG
64416: PUSH
64417: EMPTY
64418: LIST
64419: LIST
64420: PUSH
64421: LD_INT 2
64423: PUSH
64424: LD_INT 2
64426: NEG
64427: PUSH
64428: EMPTY
64429: LIST
64430: LIST
64431: PUSH
64432: LD_INT 4
64434: PUSH
64435: LD_INT 2
64437: PUSH
64438: EMPTY
64439: LIST
64440: LIST
64441: PUSH
64442: LD_INT 4
64444: PUSH
64445: LD_INT 4
64447: PUSH
64448: EMPTY
64449: LIST
64450: LIST
64451: PUSH
64452: LD_INT 4
64454: PUSH
64455: LD_INT 3
64457: PUSH
64458: EMPTY
64459: LIST
64460: LIST
64461: PUSH
64462: LD_INT 5
64464: PUSH
64465: LD_INT 4
64467: PUSH
64468: EMPTY
64469: LIST
64470: LIST
64471: PUSH
64472: LD_INT 5
64474: PUSH
64475: LD_INT 5
64477: PUSH
64478: EMPTY
64479: LIST
64480: LIST
64481: PUSH
64482: LD_INT 4
64484: PUSH
64485: LD_INT 5
64487: PUSH
64488: EMPTY
64489: LIST
64490: LIST
64491: PUSH
64492: LD_INT 3
64494: PUSH
64495: LD_INT 4
64497: PUSH
64498: EMPTY
64499: LIST
64500: LIST
64501: PUSH
64502: LD_INT 3
64504: PUSH
64505: LD_INT 3
64507: PUSH
64508: EMPTY
64509: LIST
64510: LIST
64511: PUSH
64512: LD_INT 5
64514: PUSH
64515: LD_INT 3
64517: PUSH
64518: EMPTY
64519: LIST
64520: LIST
64521: PUSH
64522: LD_INT 3
64524: PUSH
64525: LD_INT 5
64527: PUSH
64528: EMPTY
64529: LIST
64530: LIST
64531: PUSH
64532: LD_INT 0
64534: PUSH
64535: LD_INT 3
64537: PUSH
64538: EMPTY
64539: LIST
64540: LIST
64541: PUSH
64542: LD_INT 0
64544: PUSH
64545: LD_INT 2
64547: PUSH
64548: EMPTY
64549: LIST
64550: LIST
64551: PUSH
64552: LD_INT 1
64554: PUSH
64555: LD_INT 3
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: PUSH
64562: LD_INT 1
64564: PUSH
64565: LD_INT 4
64567: PUSH
64568: EMPTY
64569: LIST
64570: LIST
64571: PUSH
64572: LD_INT 0
64574: PUSH
64575: LD_INT 4
64577: PUSH
64578: EMPTY
64579: LIST
64580: LIST
64581: PUSH
64582: LD_INT 1
64584: NEG
64585: PUSH
64586: LD_INT 3
64588: PUSH
64589: EMPTY
64590: LIST
64591: LIST
64592: PUSH
64593: LD_INT 1
64595: NEG
64596: PUSH
64597: LD_INT 2
64599: PUSH
64600: EMPTY
64601: LIST
64602: LIST
64603: PUSH
64604: LD_INT 2
64606: PUSH
64607: LD_INT 4
64609: PUSH
64610: EMPTY
64611: LIST
64612: LIST
64613: PUSH
64614: LD_INT 2
64616: NEG
64617: PUSH
64618: LD_INT 2
64620: PUSH
64621: EMPTY
64622: LIST
64623: LIST
64624: PUSH
64625: LD_INT 4
64627: NEG
64628: PUSH
64629: LD_INT 0
64631: PUSH
64632: EMPTY
64633: LIST
64634: LIST
64635: PUSH
64636: LD_INT 4
64638: NEG
64639: PUSH
64640: LD_INT 1
64642: NEG
64643: PUSH
64644: EMPTY
64645: LIST
64646: LIST
64647: PUSH
64648: LD_INT 3
64650: NEG
64651: PUSH
64652: LD_INT 0
64654: PUSH
64655: EMPTY
64656: LIST
64657: LIST
64658: PUSH
64659: LD_INT 3
64661: NEG
64662: PUSH
64663: LD_INT 1
64665: PUSH
64666: EMPTY
64667: LIST
64668: LIST
64669: PUSH
64670: LD_INT 4
64672: NEG
64673: PUSH
64674: LD_INT 1
64676: PUSH
64677: EMPTY
64678: LIST
64679: LIST
64680: PUSH
64681: LD_INT 5
64683: NEG
64684: PUSH
64685: LD_INT 0
64687: PUSH
64688: EMPTY
64689: LIST
64690: LIST
64691: PUSH
64692: LD_INT 5
64694: NEG
64695: PUSH
64696: LD_INT 1
64698: NEG
64699: PUSH
64700: EMPTY
64701: LIST
64702: LIST
64703: PUSH
64704: LD_INT 5
64706: NEG
64707: PUSH
64708: LD_INT 2
64710: NEG
64711: PUSH
64712: EMPTY
64713: LIST
64714: LIST
64715: PUSH
64716: LD_INT 3
64718: NEG
64719: PUSH
64720: LD_INT 2
64722: PUSH
64723: EMPTY
64724: LIST
64725: LIST
64726: PUSH
64727: EMPTY
64728: LIST
64729: LIST
64730: LIST
64731: LIST
64732: LIST
64733: LIST
64734: LIST
64735: LIST
64736: LIST
64737: LIST
64738: LIST
64739: LIST
64740: LIST
64741: LIST
64742: LIST
64743: LIST
64744: LIST
64745: LIST
64746: LIST
64747: LIST
64748: LIST
64749: LIST
64750: LIST
64751: LIST
64752: LIST
64753: LIST
64754: LIST
64755: LIST
64756: LIST
64757: LIST
64758: LIST
64759: LIST
64760: LIST
64761: LIST
64762: LIST
64763: LIST
64764: LIST
64765: LIST
64766: LIST
64767: LIST
64768: LIST
64769: LIST
64770: LIST
64771: LIST
64772: LIST
64773: ST_TO_ADDR
// end ; end ;
64774: GO 64777
64776: POP
// case btype of b_depot , b_warehouse :
64777: LD_VAR 0 1
64781: PUSH
64782: LD_INT 0
64784: DOUBLE
64785: EQUAL
64786: IFTRUE 64796
64788: LD_INT 1
64790: DOUBLE
64791: EQUAL
64792: IFTRUE 64796
64794: GO 64997
64796: POP
// case nation of nation_american :
64797: LD_VAR 0 5
64801: PUSH
64802: LD_INT 1
64804: DOUBLE
64805: EQUAL
64806: IFTRUE 64810
64808: GO 64866
64810: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
64811: LD_ADDR_VAR 0 9
64815: PUSH
64816: LD_VAR 0 11
64820: PUSH
64821: LD_VAR 0 12
64825: PUSH
64826: LD_VAR 0 13
64830: PUSH
64831: LD_VAR 0 14
64835: PUSH
64836: LD_VAR 0 15
64840: PUSH
64841: LD_VAR 0 16
64845: PUSH
64846: EMPTY
64847: LIST
64848: LIST
64849: LIST
64850: LIST
64851: LIST
64852: LIST
64853: PUSH
64854: LD_VAR 0 4
64858: PUSH
64859: LD_INT 1
64861: PLUS
64862: ARRAY
64863: ST_TO_ADDR
64864: GO 64995
64866: LD_INT 2
64868: DOUBLE
64869: EQUAL
64870: IFTRUE 64874
64872: GO 64930
64874: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
64875: LD_ADDR_VAR 0 9
64879: PUSH
64880: LD_VAR 0 17
64884: PUSH
64885: LD_VAR 0 18
64889: PUSH
64890: LD_VAR 0 19
64894: PUSH
64895: LD_VAR 0 20
64899: PUSH
64900: LD_VAR 0 21
64904: PUSH
64905: LD_VAR 0 22
64909: PUSH
64910: EMPTY
64911: LIST
64912: LIST
64913: LIST
64914: LIST
64915: LIST
64916: LIST
64917: PUSH
64918: LD_VAR 0 4
64922: PUSH
64923: LD_INT 1
64925: PLUS
64926: ARRAY
64927: ST_TO_ADDR
64928: GO 64995
64930: LD_INT 3
64932: DOUBLE
64933: EQUAL
64934: IFTRUE 64938
64936: GO 64994
64938: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
64939: LD_ADDR_VAR 0 9
64943: PUSH
64944: LD_VAR 0 23
64948: PUSH
64949: LD_VAR 0 24
64953: PUSH
64954: LD_VAR 0 25
64958: PUSH
64959: LD_VAR 0 26
64963: PUSH
64964: LD_VAR 0 27
64968: PUSH
64969: LD_VAR 0 28
64973: PUSH
64974: EMPTY
64975: LIST
64976: LIST
64977: LIST
64978: LIST
64979: LIST
64980: LIST
64981: PUSH
64982: LD_VAR 0 4
64986: PUSH
64987: LD_INT 1
64989: PLUS
64990: ARRAY
64991: ST_TO_ADDR
64992: GO 64995
64994: POP
64995: GO 65550
64997: LD_INT 2
64999: DOUBLE
65000: EQUAL
65001: IFTRUE 65011
65003: LD_INT 3
65005: DOUBLE
65006: EQUAL
65007: IFTRUE 65011
65009: GO 65067
65011: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
65012: LD_ADDR_VAR 0 9
65016: PUSH
65017: LD_VAR 0 29
65021: PUSH
65022: LD_VAR 0 30
65026: PUSH
65027: LD_VAR 0 31
65031: PUSH
65032: LD_VAR 0 32
65036: PUSH
65037: LD_VAR 0 33
65041: PUSH
65042: LD_VAR 0 34
65046: PUSH
65047: EMPTY
65048: LIST
65049: LIST
65050: LIST
65051: LIST
65052: LIST
65053: LIST
65054: PUSH
65055: LD_VAR 0 4
65059: PUSH
65060: LD_INT 1
65062: PLUS
65063: ARRAY
65064: ST_TO_ADDR
65065: GO 65550
65067: LD_INT 16
65069: DOUBLE
65070: EQUAL
65071: IFTRUE 65129
65073: LD_INT 17
65075: DOUBLE
65076: EQUAL
65077: IFTRUE 65129
65079: LD_INT 18
65081: DOUBLE
65082: EQUAL
65083: IFTRUE 65129
65085: LD_INT 19
65087: DOUBLE
65088: EQUAL
65089: IFTRUE 65129
65091: LD_INT 22
65093: DOUBLE
65094: EQUAL
65095: IFTRUE 65129
65097: LD_INT 20
65099: DOUBLE
65100: EQUAL
65101: IFTRUE 65129
65103: LD_INT 21
65105: DOUBLE
65106: EQUAL
65107: IFTRUE 65129
65109: LD_INT 23
65111: DOUBLE
65112: EQUAL
65113: IFTRUE 65129
65115: LD_INT 24
65117: DOUBLE
65118: EQUAL
65119: IFTRUE 65129
65121: LD_INT 25
65123: DOUBLE
65124: EQUAL
65125: IFTRUE 65129
65127: GO 65185
65129: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
65130: LD_ADDR_VAR 0 9
65134: PUSH
65135: LD_VAR 0 35
65139: PUSH
65140: LD_VAR 0 36
65144: PUSH
65145: LD_VAR 0 37
65149: PUSH
65150: LD_VAR 0 38
65154: PUSH
65155: LD_VAR 0 39
65159: PUSH
65160: LD_VAR 0 40
65164: PUSH
65165: EMPTY
65166: LIST
65167: LIST
65168: LIST
65169: LIST
65170: LIST
65171: LIST
65172: PUSH
65173: LD_VAR 0 4
65177: PUSH
65178: LD_INT 1
65180: PLUS
65181: ARRAY
65182: ST_TO_ADDR
65183: GO 65550
65185: LD_INT 6
65187: DOUBLE
65188: EQUAL
65189: IFTRUE 65241
65191: LD_INT 7
65193: DOUBLE
65194: EQUAL
65195: IFTRUE 65241
65197: LD_INT 8
65199: DOUBLE
65200: EQUAL
65201: IFTRUE 65241
65203: LD_INT 13
65205: DOUBLE
65206: EQUAL
65207: IFTRUE 65241
65209: LD_INT 12
65211: DOUBLE
65212: EQUAL
65213: IFTRUE 65241
65215: LD_INT 15
65217: DOUBLE
65218: EQUAL
65219: IFTRUE 65241
65221: LD_INT 11
65223: DOUBLE
65224: EQUAL
65225: IFTRUE 65241
65227: LD_INT 14
65229: DOUBLE
65230: EQUAL
65231: IFTRUE 65241
65233: LD_INT 10
65235: DOUBLE
65236: EQUAL
65237: IFTRUE 65241
65239: GO 65297
65241: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
65242: LD_ADDR_VAR 0 9
65246: PUSH
65247: LD_VAR 0 41
65251: PUSH
65252: LD_VAR 0 42
65256: PUSH
65257: LD_VAR 0 43
65261: PUSH
65262: LD_VAR 0 44
65266: PUSH
65267: LD_VAR 0 45
65271: PUSH
65272: LD_VAR 0 46
65276: PUSH
65277: EMPTY
65278: LIST
65279: LIST
65280: LIST
65281: LIST
65282: LIST
65283: LIST
65284: PUSH
65285: LD_VAR 0 4
65289: PUSH
65290: LD_INT 1
65292: PLUS
65293: ARRAY
65294: ST_TO_ADDR
65295: GO 65550
65297: LD_INT 36
65299: DOUBLE
65300: EQUAL
65301: IFTRUE 65305
65303: GO 65361
65305: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
65306: LD_ADDR_VAR 0 9
65310: PUSH
65311: LD_VAR 0 47
65315: PUSH
65316: LD_VAR 0 48
65320: PUSH
65321: LD_VAR 0 49
65325: PUSH
65326: LD_VAR 0 50
65330: PUSH
65331: LD_VAR 0 51
65335: PUSH
65336: LD_VAR 0 52
65340: PUSH
65341: EMPTY
65342: LIST
65343: LIST
65344: LIST
65345: LIST
65346: LIST
65347: LIST
65348: PUSH
65349: LD_VAR 0 4
65353: PUSH
65354: LD_INT 1
65356: PLUS
65357: ARRAY
65358: ST_TO_ADDR
65359: GO 65550
65361: LD_INT 4
65363: DOUBLE
65364: EQUAL
65365: IFTRUE 65387
65367: LD_INT 5
65369: DOUBLE
65370: EQUAL
65371: IFTRUE 65387
65373: LD_INT 34
65375: DOUBLE
65376: EQUAL
65377: IFTRUE 65387
65379: LD_INT 37
65381: DOUBLE
65382: EQUAL
65383: IFTRUE 65387
65385: GO 65443
65387: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
65388: LD_ADDR_VAR 0 9
65392: PUSH
65393: LD_VAR 0 53
65397: PUSH
65398: LD_VAR 0 54
65402: PUSH
65403: LD_VAR 0 55
65407: PUSH
65408: LD_VAR 0 56
65412: PUSH
65413: LD_VAR 0 57
65417: PUSH
65418: LD_VAR 0 58
65422: PUSH
65423: EMPTY
65424: LIST
65425: LIST
65426: LIST
65427: LIST
65428: LIST
65429: LIST
65430: PUSH
65431: LD_VAR 0 4
65435: PUSH
65436: LD_INT 1
65438: PLUS
65439: ARRAY
65440: ST_TO_ADDR
65441: GO 65550
65443: LD_INT 31
65445: DOUBLE
65446: EQUAL
65447: IFTRUE 65493
65449: LD_INT 32
65451: DOUBLE
65452: EQUAL
65453: IFTRUE 65493
65455: LD_INT 33
65457: DOUBLE
65458: EQUAL
65459: IFTRUE 65493
65461: LD_INT 27
65463: DOUBLE
65464: EQUAL
65465: IFTRUE 65493
65467: LD_INT 26
65469: DOUBLE
65470: EQUAL
65471: IFTRUE 65493
65473: LD_INT 28
65475: DOUBLE
65476: EQUAL
65477: IFTRUE 65493
65479: LD_INT 29
65481: DOUBLE
65482: EQUAL
65483: IFTRUE 65493
65485: LD_INT 30
65487: DOUBLE
65488: EQUAL
65489: IFTRUE 65493
65491: GO 65549
65493: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
65494: LD_ADDR_VAR 0 9
65498: PUSH
65499: LD_VAR 0 59
65503: PUSH
65504: LD_VAR 0 60
65508: PUSH
65509: LD_VAR 0 61
65513: PUSH
65514: LD_VAR 0 62
65518: PUSH
65519: LD_VAR 0 63
65523: PUSH
65524: LD_VAR 0 64
65528: PUSH
65529: EMPTY
65530: LIST
65531: LIST
65532: LIST
65533: LIST
65534: LIST
65535: LIST
65536: PUSH
65537: LD_VAR 0 4
65541: PUSH
65542: LD_INT 1
65544: PLUS
65545: ARRAY
65546: ST_TO_ADDR
65547: GO 65550
65549: POP
// temp_list2 = [ ] ;
65550: LD_ADDR_VAR 0 10
65554: PUSH
65555: EMPTY
65556: ST_TO_ADDR
// for i in temp_list do
65557: LD_ADDR_VAR 0 8
65561: PUSH
65562: LD_VAR 0 9
65566: PUSH
65567: FOR_IN
65568: IFFALSE 65620
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
65570: LD_ADDR_VAR 0 10
65574: PUSH
65575: LD_VAR 0 10
65579: PUSH
65580: LD_VAR 0 8
65584: PUSH
65585: LD_INT 1
65587: ARRAY
65588: PUSH
65589: LD_VAR 0 2
65593: PLUS
65594: PUSH
65595: LD_VAR 0 8
65599: PUSH
65600: LD_INT 2
65602: ARRAY
65603: PUSH
65604: LD_VAR 0 3
65608: PLUS
65609: PUSH
65610: EMPTY
65611: LIST
65612: LIST
65613: PUSH
65614: EMPTY
65615: LIST
65616: ADD
65617: ST_TO_ADDR
65618: GO 65567
65620: POP
65621: POP
// result = temp_list2 ;
65622: LD_ADDR_VAR 0 7
65626: PUSH
65627: LD_VAR 0 10
65631: ST_TO_ADDR
// end ;
65632: LD_VAR 0 7
65636: RET
// export function EnemyInRange ( unit , dist ) ; begin
65637: LD_INT 0
65639: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
65640: LD_ADDR_VAR 0 3
65644: PUSH
65645: LD_VAR 0 1
65649: PPUSH
65650: CALL_OW 255
65654: PPUSH
65655: LD_VAR 0 1
65659: PPUSH
65660: CALL_OW 250
65664: PPUSH
65665: LD_VAR 0 1
65669: PPUSH
65670: CALL_OW 251
65674: PPUSH
65675: LD_VAR 0 2
65679: PPUSH
65680: CALL 39010 0 4
65684: PUSH
65685: LD_INT 4
65687: ARRAY
65688: ST_TO_ADDR
// end ;
65689: LD_VAR 0 3
65693: RET
// export function PlayerSeeMe ( unit ) ; begin
65694: LD_INT 0
65696: PPUSH
// result := See ( your_side , unit ) ;
65697: LD_ADDR_VAR 0 2
65701: PUSH
65702: LD_OWVAR 2
65706: PPUSH
65707: LD_VAR 0 1
65711: PPUSH
65712: CALL_OW 292
65716: ST_TO_ADDR
// end ;
65717: LD_VAR 0 2
65721: RET
// export function ReverseDir ( unit ) ; begin
65722: LD_INT 0
65724: PPUSH
// if not unit then
65725: LD_VAR 0 1
65729: NOT
65730: IFFALSE 65734
// exit ;
65732: GO 65757
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
65734: LD_ADDR_VAR 0 2
65738: PUSH
65739: LD_VAR 0 1
65743: PPUSH
65744: CALL_OW 254
65748: PUSH
65749: LD_INT 3
65751: PLUS
65752: PUSH
65753: LD_INT 6
65755: MOD
65756: ST_TO_ADDR
// end ;
65757: LD_VAR 0 2
65761: RET
// export function ReverseArray ( array ) ; var i ; begin
65762: LD_INT 0
65764: PPUSH
65765: PPUSH
// if not array then
65766: LD_VAR 0 1
65770: NOT
65771: IFFALSE 65775
// exit ;
65773: GO 65830
// result := [ ] ;
65775: LD_ADDR_VAR 0 2
65779: PUSH
65780: EMPTY
65781: ST_TO_ADDR
// for i := array downto 1 do
65782: LD_ADDR_VAR 0 3
65786: PUSH
65787: DOUBLE
65788: LD_VAR 0 1
65792: INC
65793: ST_TO_ADDR
65794: LD_INT 1
65796: PUSH
65797: FOR_DOWNTO
65798: IFFALSE 65828
// result := Join ( result , array [ i ] ) ;
65800: LD_ADDR_VAR 0 2
65804: PUSH
65805: LD_VAR 0 2
65809: PPUSH
65810: LD_VAR 0 1
65814: PUSH
65815: LD_VAR 0 3
65819: ARRAY
65820: PPUSH
65821: CALL 70486 0 2
65825: ST_TO_ADDR
65826: GO 65797
65828: POP
65829: POP
// end ;
65830: LD_VAR 0 2
65834: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
65835: LD_INT 0
65837: PPUSH
65838: PPUSH
65839: PPUSH
65840: PPUSH
65841: PPUSH
65842: PPUSH
// if not unit or not hexes then
65843: LD_VAR 0 1
65847: NOT
65848: PUSH
65849: LD_VAR 0 2
65853: NOT
65854: OR
65855: IFFALSE 65859
// exit ;
65857: GO 65982
// dist := 9999 ;
65859: LD_ADDR_VAR 0 5
65863: PUSH
65864: LD_INT 9999
65866: ST_TO_ADDR
// for i = 1 to hexes do
65867: LD_ADDR_VAR 0 4
65871: PUSH
65872: DOUBLE
65873: LD_INT 1
65875: DEC
65876: ST_TO_ADDR
65877: LD_VAR 0 2
65881: PUSH
65882: FOR_TO
65883: IFFALSE 65970
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
65885: LD_ADDR_VAR 0 6
65889: PUSH
65890: LD_VAR 0 1
65894: PPUSH
65895: LD_VAR 0 2
65899: PUSH
65900: LD_VAR 0 4
65904: ARRAY
65905: PUSH
65906: LD_INT 1
65908: ARRAY
65909: PPUSH
65910: LD_VAR 0 2
65914: PUSH
65915: LD_VAR 0 4
65919: ARRAY
65920: PUSH
65921: LD_INT 2
65923: ARRAY
65924: PPUSH
65925: CALL_OW 297
65929: ST_TO_ADDR
// if tdist < dist then
65930: LD_VAR 0 6
65934: PUSH
65935: LD_VAR 0 5
65939: LESS
65940: IFFALSE 65968
// begin hex := hexes [ i ] ;
65942: LD_ADDR_VAR 0 8
65946: PUSH
65947: LD_VAR 0 2
65951: PUSH
65952: LD_VAR 0 4
65956: ARRAY
65957: ST_TO_ADDR
// dist := tdist ;
65958: LD_ADDR_VAR 0 5
65962: PUSH
65963: LD_VAR 0 6
65967: ST_TO_ADDR
// end ; end ;
65968: GO 65882
65970: POP
65971: POP
// result := hex ;
65972: LD_ADDR_VAR 0 3
65976: PUSH
65977: LD_VAR 0 8
65981: ST_TO_ADDR
// end ;
65982: LD_VAR 0 3
65986: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
65987: LD_INT 0
65989: PPUSH
65990: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
65991: LD_VAR 0 1
65995: NOT
65996: PUSH
65997: LD_VAR 0 1
66001: PUSH
66002: LD_INT 21
66004: PUSH
66005: LD_INT 2
66007: PUSH
66008: EMPTY
66009: LIST
66010: LIST
66011: PUSH
66012: LD_INT 23
66014: PUSH
66015: LD_INT 2
66017: PUSH
66018: EMPTY
66019: LIST
66020: LIST
66021: PUSH
66022: EMPTY
66023: LIST
66024: LIST
66025: PPUSH
66026: CALL_OW 69
66030: IN
66031: NOT
66032: OR
66033: IFFALSE 66037
// exit ;
66035: GO 66084
// for i = 1 to 3 do
66037: LD_ADDR_VAR 0 3
66041: PUSH
66042: DOUBLE
66043: LD_INT 1
66045: DEC
66046: ST_TO_ADDR
66047: LD_INT 3
66049: PUSH
66050: FOR_TO
66051: IFFALSE 66082
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
66053: LD_VAR 0 1
66057: PPUSH
66058: CALL_OW 250
66062: PPUSH
66063: LD_VAR 0 1
66067: PPUSH
66068: CALL_OW 251
66072: PPUSH
66073: LD_INT 1
66075: PPUSH
66076: CALL_OW 453
66080: GO 66050
66082: POP
66083: POP
// end ;
66084: LD_VAR 0 2
66088: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
66089: LD_INT 0
66091: PPUSH
66092: PPUSH
66093: PPUSH
66094: PPUSH
66095: PPUSH
66096: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
66097: LD_VAR 0 1
66101: NOT
66102: PUSH
66103: LD_VAR 0 2
66107: NOT
66108: OR
66109: PUSH
66110: LD_VAR 0 1
66114: PPUSH
66115: CALL_OW 314
66119: OR
66120: IFFALSE 66124
// exit ;
66122: GO 66591
// if GetLives ( i ) < 250 then
66124: LD_VAR 0 4
66128: PPUSH
66129: CALL_OW 256
66133: PUSH
66134: LD_INT 250
66136: LESS
66137: IFFALSE 66150
// begin ComAutodestruct ( i ) ;
66139: LD_VAR 0 4
66143: PPUSH
66144: CALL 65987 0 1
// exit ;
66148: GO 66591
// end ; x := GetX ( enemy_unit ) ;
66150: LD_ADDR_VAR 0 7
66154: PUSH
66155: LD_VAR 0 2
66159: PPUSH
66160: CALL_OW 250
66164: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
66165: LD_ADDR_VAR 0 8
66169: PUSH
66170: LD_VAR 0 2
66174: PPUSH
66175: CALL_OW 251
66179: ST_TO_ADDR
// if not x or not y then
66180: LD_VAR 0 7
66184: NOT
66185: PUSH
66186: LD_VAR 0 8
66190: NOT
66191: OR
66192: IFFALSE 66196
// exit ;
66194: GO 66591
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
66196: LD_ADDR_VAR 0 6
66200: PUSH
66201: LD_VAR 0 7
66205: PPUSH
66206: LD_INT 0
66208: PPUSH
66209: LD_INT 4
66211: PPUSH
66212: CALL_OW 272
66216: PUSH
66217: LD_VAR 0 8
66221: PPUSH
66222: LD_INT 0
66224: PPUSH
66225: LD_INT 4
66227: PPUSH
66228: CALL_OW 273
66232: PUSH
66233: EMPTY
66234: LIST
66235: LIST
66236: PUSH
66237: LD_VAR 0 7
66241: PPUSH
66242: LD_INT 1
66244: PPUSH
66245: LD_INT 4
66247: PPUSH
66248: CALL_OW 272
66252: PUSH
66253: LD_VAR 0 8
66257: PPUSH
66258: LD_INT 1
66260: PPUSH
66261: LD_INT 4
66263: PPUSH
66264: CALL_OW 273
66268: PUSH
66269: EMPTY
66270: LIST
66271: LIST
66272: PUSH
66273: LD_VAR 0 7
66277: PPUSH
66278: LD_INT 2
66280: PPUSH
66281: LD_INT 4
66283: PPUSH
66284: CALL_OW 272
66288: PUSH
66289: LD_VAR 0 8
66293: PPUSH
66294: LD_INT 2
66296: PPUSH
66297: LD_INT 4
66299: PPUSH
66300: CALL_OW 273
66304: PUSH
66305: EMPTY
66306: LIST
66307: LIST
66308: PUSH
66309: LD_VAR 0 7
66313: PPUSH
66314: LD_INT 3
66316: PPUSH
66317: LD_INT 4
66319: PPUSH
66320: CALL_OW 272
66324: PUSH
66325: LD_VAR 0 8
66329: PPUSH
66330: LD_INT 3
66332: PPUSH
66333: LD_INT 4
66335: PPUSH
66336: CALL_OW 273
66340: PUSH
66341: EMPTY
66342: LIST
66343: LIST
66344: PUSH
66345: LD_VAR 0 7
66349: PPUSH
66350: LD_INT 4
66352: PPUSH
66353: LD_INT 4
66355: PPUSH
66356: CALL_OW 272
66360: PUSH
66361: LD_VAR 0 8
66365: PPUSH
66366: LD_INT 4
66368: PPUSH
66369: LD_INT 4
66371: PPUSH
66372: CALL_OW 273
66376: PUSH
66377: EMPTY
66378: LIST
66379: LIST
66380: PUSH
66381: LD_VAR 0 7
66385: PPUSH
66386: LD_INT 5
66388: PPUSH
66389: LD_INT 4
66391: PPUSH
66392: CALL_OW 272
66396: PUSH
66397: LD_VAR 0 8
66401: PPUSH
66402: LD_INT 5
66404: PPUSH
66405: LD_INT 4
66407: PPUSH
66408: CALL_OW 273
66412: PUSH
66413: EMPTY
66414: LIST
66415: LIST
66416: PUSH
66417: EMPTY
66418: LIST
66419: LIST
66420: LIST
66421: LIST
66422: LIST
66423: LIST
66424: ST_TO_ADDR
// for i = tmp downto 1 do
66425: LD_ADDR_VAR 0 4
66429: PUSH
66430: DOUBLE
66431: LD_VAR 0 6
66435: INC
66436: ST_TO_ADDR
66437: LD_INT 1
66439: PUSH
66440: FOR_DOWNTO
66441: IFFALSE 66542
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
66443: LD_VAR 0 6
66447: PUSH
66448: LD_VAR 0 4
66452: ARRAY
66453: PUSH
66454: LD_INT 1
66456: ARRAY
66457: PPUSH
66458: LD_VAR 0 6
66462: PUSH
66463: LD_VAR 0 4
66467: ARRAY
66468: PUSH
66469: LD_INT 2
66471: ARRAY
66472: PPUSH
66473: CALL_OW 488
66477: NOT
66478: PUSH
66479: LD_VAR 0 6
66483: PUSH
66484: LD_VAR 0 4
66488: ARRAY
66489: PUSH
66490: LD_INT 1
66492: ARRAY
66493: PPUSH
66494: LD_VAR 0 6
66498: PUSH
66499: LD_VAR 0 4
66503: ARRAY
66504: PUSH
66505: LD_INT 2
66507: ARRAY
66508: PPUSH
66509: CALL_OW 428
66513: PUSH
66514: LD_INT 0
66516: NONEQUAL
66517: OR
66518: IFFALSE 66540
// tmp := Delete ( tmp , i ) ;
66520: LD_ADDR_VAR 0 6
66524: PUSH
66525: LD_VAR 0 6
66529: PPUSH
66530: LD_VAR 0 4
66534: PPUSH
66535: CALL_OW 3
66539: ST_TO_ADDR
66540: GO 66440
66542: POP
66543: POP
// j := GetClosestHex ( unit , tmp ) ;
66544: LD_ADDR_VAR 0 5
66548: PUSH
66549: LD_VAR 0 1
66553: PPUSH
66554: LD_VAR 0 6
66558: PPUSH
66559: CALL 65835 0 2
66563: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
66564: LD_VAR 0 1
66568: PPUSH
66569: LD_VAR 0 5
66573: PUSH
66574: LD_INT 1
66576: ARRAY
66577: PPUSH
66578: LD_VAR 0 5
66582: PUSH
66583: LD_INT 2
66585: ARRAY
66586: PPUSH
66587: CALL_OW 111
// end ;
66591: LD_VAR 0 3
66595: RET
// export function PrepareApemanSoldier ( ) ; begin
66596: LD_INT 0
66598: PPUSH
// uc_nation := 0 ;
66599: LD_ADDR_OWVAR 21
66603: PUSH
66604: LD_INT 0
66606: ST_TO_ADDR
// hc_sex := sex_male ;
66607: LD_ADDR_OWVAR 27
66611: PUSH
66612: LD_INT 1
66614: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
66615: LD_ADDR_OWVAR 28
66619: PUSH
66620: LD_INT 15
66622: ST_TO_ADDR
// hc_gallery :=  ;
66623: LD_ADDR_OWVAR 33
66627: PUSH
66628: LD_STRING 
66630: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66631: LD_ADDR_OWVAR 31
66635: PUSH
66636: LD_INT 0
66638: PPUSH
66639: LD_INT 3
66641: PPUSH
66642: CALL_OW 12
66646: PUSH
66647: LD_INT 0
66649: PPUSH
66650: LD_INT 3
66652: PPUSH
66653: CALL_OW 12
66657: PUSH
66658: LD_INT 0
66660: PUSH
66661: LD_INT 0
66663: PUSH
66664: EMPTY
66665: LIST
66666: LIST
66667: LIST
66668: LIST
66669: ST_TO_ADDR
// end ;
66670: LD_VAR 0 1
66674: RET
// export function PrepareApemanEngineer ( ) ; begin
66675: LD_INT 0
66677: PPUSH
// uc_nation := 0 ;
66678: LD_ADDR_OWVAR 21
66682: PUSH
66683: LD_INT 0
66685: ST_TO_ADDR
// hc_sex := sex_male ;
66686: LD_ADDR_OWVAR 27
66690: PUSH
66691: LD_INT 1
66693: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
66694: LD_ADDR_OWVAR 28
66698: PUSH
66699: LD_INT 16
66701: ST_TO_ADDR
// hc_gallery :=  ;
66702: LD_ADDR_OWVAR 33
66706: PUSH
66707: LD_STRING 
66709: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66710: LD_ADDR_OWVAR 31
66714: PUSH
66715: LD_INT 0
66717: PPUSH
66718: LD_INT 3
66720: PPUSH
66721: CALL_OW 12
66725: PUSH
66726: LD_INT 0
66728: PPUSH
66729: LD_INT 3
66731: PPUSH
66732: CALL_OW 12
66736: PUSH
66737: LD_INT 0
66739: PUSH
66740: LD_INT 0
66742: PUSH
66743: EMPTY
66744: LIST
66745: LIST
66746: LIST
66747: LIST
66748: ST_TO_ADDR
// end ;
66749: LD_VAR 0 1
66753: RET
// export function PrepareApeman ( agressivity ) ; begin
66754: LD_INT 0
66756: PPUSH
// uc_side := 0 ;
66757: LD_ADDR_OWVAR 20
66761: PUSH
66762: LD_INT 0
66764: ST_TO_ADDR
// uc_nation := 0 ;
66765: LD_ADDR_OWVAR 21
66769: PUSH
66770: LD_INT 0
66772: ST_TO_ADDR
// hc_sex := sex_male ;
66773: LD_ADDR_OWVAR 27
66777: PUSH
66778: LD_INT 1
66780: ST_TO_ADDR
// hc_class := class_apeman ;
66781: LD_ADDR_OWVAR 28
66785: PUSH
66786: LD_INT 12
66788: ST_TO_ADDR
// hc_gallery :=  ;
66789: LD_ADDR_OWVAR 33
66793: PUSH
66794: LD_STRING 
66796: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
66797: LD_ADDR_OWVAR 35
66801: PUSH
66802: LD_VAR 0 1
66806: NEG
66807: PPUSH
66808: LD_VAR 0 1
66812: PPUSH
66813: CALL_OW 12
66817: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
66818: LD_ADDR_OWVAR 31
66822: PUSH
66823: LD_INT 0
66825: PPUSH
66826: LD_INT 3
66828: PPUSH
66829: CALL_OW 12
66833: PUSH
66834: LD_INT 0
66836: PPUSH
66837: LD_INT 3
66839: PPUSH
66840: CALL_OW 12
66844: PUSH
66845: LD_INT 0
66847: PUSH
66848: LD_INT 0
66850: PUSH
66851: EMPTY
66852: LIST
66853: LIST
66854: LIST
66855: LIST
66856: ST_TO_ADDR
// end ;
66857: LD_VAR 0 2
66861: RET
// export function PrepareTiger ( agressivity ) ; begin
66862: LD_INT 0
66864: PPUSH
// uc_side := 0 ;
66865: LD_ADDR_OWVAR 20
66869: PUSH
66870: LD_INT 0
66872: ST_TO_ADDR
// uc_nation := 0 ;
66873: LD_ADDR_OWVAR 21
66877: PUSH
66878: LD_INT 0
66880: ST_TO_ADDR
// hc_class := class_tiger ;
66881: LD_ADDR_OWVAR 28
66885: PUSH
66886: LD_INT 14
66888: ST_TO_ADDR
// hc_gallery :=  ;
66889: LD_ADDR_OWVAR 33
66893: PUSH
66894: LD_STRING 
66896: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
66897: LD_ADDR_OWVAR 35
66901: PUSH
66902: LD_VAR 0 1
66906: NEG
66907: PPUSH
66908: LD_VAR 0 1
66912: PPUSH
66913: CALL_OW 12
66917: ST_TO_ADDR
// end ;
66918: LD_VAR 0 2
66922: RET
// export function PrepareEnchidna ( ) ; begin
66923: LD_INT 0
66925: PPUSH
// uc_side := 0 ;
66926: LD_ADDR_OWVAR 20
66930: PUSH
66931: LD_INT 0
66933: ST_TO_ADDR
// uc_nation := 0 ;
66934: LD_ADDR_OWVAR 21
66938: PUSH
66939: LD_INT 0
66941: ST_TO_ADDR
// hc_class := class_baggie ;
66942: LD_ADDR_OWVAR 28
66946: PUSH
66947: LD_INT 13
66949: ST_TO_ADDR
// hc_gallery :=  ;
66950: LD_ADDR_OWVAR 33
66954: PUSH
66955: LD_STRING 
66957: ST_TO_ADDR
// end ;
66958: LD_VAR 0 1
66962: RET
// export function PrepareFrog ( ) ; begin
66963: LD_INT 0
66965: PPUSH
// uc_side := 0 ;
66966: LD_ADDR_OWVAR 20
66970: PUSH
66971: LD_INT 0
66973: ST_TO_ADDR
// uc_nation := 0 ;
66974: LD_ADDR_OWVAR 21
66978: PUSH
66979: LD_INT 0
66981: ST_TO_ADDR
// hc_class := class_frog ;
66982: LD_ADDR_OWVAR 28
66986: PUSH
66987: LD_INT 19
66989: ST_TO_ADDR
// hc_gallery :=  ;
66990: LD_ADDR_OWVAR 33
66994: PUSH
66995: LD_STRING 
66997: ST_TO_ADDR
// end ;
66998: LD_VAR 0 1
67002: RET
// export function PrepareFish ( ) ; begin
67003: LD_INT 0
67005: PPUSH
// uc_side := 0 ;
67006: LD_ADDR_OWVAR 20
67010: PUSH
67011: LD_INT 0
67013: ST_TO_ADDR
// uc_nation := 0 ;
67014: LD_ADDR_OWVAR 21
67018: PUSH
67019: LD_INT 0
67021: ST_TO_ADDR
// hc_class := class_fish ;
67022: LD_ADDR_OWVAR 28
67026: PUSH
67027: LD_INT 20
67029: ST_TO_ADDR
// hc_gallery :=  ;
67030: LD_ADDR_OWVAR 33
67034: PUSH
67035: LD_STRING 
67037: ST_TO_ADDR
// end ;
67038: LD_VAR 0 1
67042: RET
// export function PrepareBird ( ) ; begin
67043: LD_INT 0
67045: PPUSH
// uc_side := 0 ;
67046: LD_ADDR_OWVAR 20
67050: PUSH
67051: LD_INT 0
67053: ST_TO_ADDR
// uc_nation := 0 ;
67054: LD_ADDR_OWVAR 21
67058: PUSH
67059: LD_INT 0
67061: ST_TO_ADDR
// hc_class := class_phororhacos ;
67062: LD_ADDR_OWVAR 28
67066: PUSH
67067: LD_INT 18
67069: ST_TO_ADDR
// hc_gallery :=  ;
67070: LD_ADDR_OWVAR 33
67074: PUSH
67075: LD_STRING 
67077: ST_TO_ADDR
// end ;
67078: LD_VAR 0 1
67082: RET
// export function PrepareHorse ( ) ; begin
67083: LD_INT 0
67085: PPUSH
// uc_side := 0 ;
67086: LD_ADDR_OWVAR 20
67090: PUSH
67091: LD_INT 0
67093: ST_TO_ADDR
// uc_nation := 0 ;
67094: LD_ADDR_OWVAR 21
67098: PUSH
67099: LD_INT 0
67101: ST_TO_ADDR
// hc_class := class_horse ;
67102: LD_ADDR_OWVAR 28
67106: PUSH
67107: LD_INT 21
67109: ST_TO_ADDR
// hc_gallery :=  ;
67110: LD_ADDR_OWVAR 33
67114: PUSH
67115: LD_STRING 
67117: ST_TO_ADDR
// end ;
67118: LD_VAR 0 1
67122: RET
// export function PrepareMastodont ( ) ; begin
67123: LD_INT 0
67125: PPUSH
// uc_side := 0 ;
67126: LD_ADDR_OWVAR 20
67130: PUSH
67131: LD_INT 0
67133: ST_TO_ADDR
// uc_nation := 0 ;
67134: LD_ADDR_OWVAR 21
67138: PUSH
67139: LD_INT 0
67141: ST_TO_ADDR
// vc_chassis := class_mastodont ;
67142: LD_ADDR_OWVAR 37
67146: PUSH
67147: LD_INT 31
67149: ST_TO_ADDR
// vc_control := control_rider ;
67150: LD_ADDR_OWVAR 38
67154: PUSH
67155: LD_INT 4
67157: ST_TO_ADDR
// end ;
67158: LD_VAR 0 1
67162: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
67163: LD_INT 0
67165: PPUSH
67166: PPUSH
67167: PPUSH
// uc_side = 0 ;
67168: LD_ADDR_OWVAR 20
67172: PUSH
67173: LD_INT 0
67175: ST_TO_ADDR
// uc_nation = 0 ;
67176: LD_ADDR_OWVAR 21
67180: PUSH
67181: LD_INT 0
67183: ST_TO_ADDR
// InitHc_All ( ) ;
67184: CALL_OW 584
// InitVc ;
67188: CALL_OW 20
// if mastodonts then
67192: LD_VAR 0 6
67196: IFFALSE 67263
// for i = 1 to mastodonts do
67198: LD_ADDR_VAR 0 11
67202: PUSH
67203: DOUBLE
67204: LD_INT 1
67206: DEC
67207: ST_TO_ADDR
67208: LD_VAR 0 6
67212: PUSH
67213: FOR_TO
67214: IFFALSE 67261
// begin vc_chassis := 31 ;
67216: LD_ADDR_OWVAR 37
67220: PUSH
67221: LD_INT 31
67223: ST_TO_ADDR
// vc_control := control_rider ;
67224: LD_ADDR_OWVAR 38
67228: PUSH
67229: LD_INT 4
67231: ST_TO_ADDR
// animal := CreateVehicle ;
67232: LD_ADDR_VAR 0 12
67236: PUSH
67237: CALL_OW 45
67241: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67242: LD_VAR 0 12
67246: PPUSH
67247: LD_VAR 0 8
67251: PPUSH
67252: LD_INT 0
67254: PPUSH
67255: CALL 69391 0 3
// end ;
67259: GO 67213
67261: POP
67262: POP
// if horses then
67263: LD_VAR 0 5
67267: IFFALSE 67334
// for i = 1 to horses do
67269: LD_ADDR_VAR 0 11
67273: PUSH
67274: DOUBLE
67275: LD_INT 1
67277: DEC
67278: ST_TO_ADDR
67279: LD_VAR 0 5
67283: PUSH
67284: FOR_TO
67285: IFFALSE 67332
// begin hc_class := 21 ;
67287: LD_ADDR_OWVAR 28
67291: PUSH
67292: LD_INT 21
67294: ST_TO_ADDR
// hc_gallery :=  ;
67295: LD_ADDR_OWVAR 33
67299: PUSH
67300: LD_STRING 
67302: ST_TO_ADDR
// animal := CreateHuman ;
67303: LD_ADDR_VAR 0 12
67307: PUSH
67308: CALL_OW 44
67312: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67313: LD_VAR 0 12
67317: PPUSH
67318: LD_VAR 0 8
67322: PPUSH
67323: LD_INT 0
67325: PPUSH
67326: CALL 69391 0 3
// end ;
67330: GO 67284
67332: POP
67333: POP
// if birds then
67334: LD_VAR 0 1
67338: IFFALSE 67405
// for i = 1 to birds do
67340: LD_ADDR_VAR 0 11
67344: PUSH
67345: DOUBLE
67346: LD_INT 1
67348: DEC
67349: ST_TO_ADDR
67350: LD_VAR 0 1
67354: PUSH
67355: FOR_TO
67356: IFFALSE 67403
// begin hc_class := 18 ;
67358: LD_ADDR_OWVAR 28
67362: PUSH
67363: LD_INT 18
67365: ST_TO_ADDR
// hc_gallery =  ;
67366: LD_ADDR_OWVAR 33
67370: PUSH
67371: LD_STRING 
67373: ST_TO_ADDR
// animal := CreateHuman ;
67374: LD_ADDR_VAR 0 12
67378: PUSH
67379: CALL_OW 44
67383: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67384: LD_VAR 0 12
67388: PPUSH
67389: LD_VAR 0 8
67393: PPUSH
67394: LD_INT 0
67396: PPUSH
67397: CALL 69391 0 3
// end ;
67401: GO 67355
67403: POP
67404: POP
// if tigers then
67405: LD_VAR 0 2
67409: IFFALSE 67493
// for i = 1 to tigers do
67411: LD_ADDR_VAR 0 11
67415: PUSH
67416: DOUBLE
67417: LD_INT 1
67419: DEC
67420: ST_TO_ADDR
67421: LD_VAR 0 2
67425: PUSH
67426: FOR_TO
67427: IFFALSE 67491
// begin hc_class = class_tiger ;
67429: LD_ADDR_OWVAR 28
67433: PUSH
67434: LD_INT 14
67436: ST_TO_ADDR
// hc_gallery =  ;
67437: LD_ADDR_OWVAR 33
67441: PUSH
67442: LD_STRING 
67444: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
67445: LD_ADDR_OWVAR 35
67449: PUSH
67450: LD_INT 7
67452: NEG
67453: PPUSH
67454: LD_INT 7
67456: PPUSH
67457: CALL_OW 12
67461: ST_TO_ADDR
// animal := CreateHuman ;
67462: LD_ADDR_VAR 0 12
67466: PUSH
67467: CALL_OW 44
67471: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67472: LD_VAR 0 12
67476: PPUSH
67477: LD_VAR 0 8
67481: PPUSH
67482: LD_INT 0
67484: PPUSH
67485: CALL 69391 0 3
// end ;
67489: GO 67426
67491: POP
67492: POP
// if apemans then
67493: LD_VAR 0 3
67497: IFFALSE 67620
// for i = 1 to apemans do
67499: LD_ADDR_VAR 0 11
67503: PUSH
67504: DOUBLE
67505: LD_INT 1
67507: DEC
67508: ST_TO_ADDR
67509: LD_VAR 0 3
67513: PUSH
67514: FOR_TO
67515: IFFALSE 67618
// begin hc_class = class_apeman ;
67517: LD_ADDR_OWVAR 28
67521: PUSH
67522: LD_INT 12
67524: ST_TO_ADDR
// hc_gallery =  ;
67525: LD_ADDR_OWVAR 33
67529: PUSH
67530: LD_STRING 
67532: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
67533: LD_ADDR_OWVAR 35
67537: PUSH
67538: LD_INT 2
67540: NEG
67541: PPUSH
67542: LD_INT 2
67544: PPUSH
67545: CALL_OW 12
67549: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
67550: LD_ADDR_OWVAR 31
67554: PUSH
67555: LD_INT 1
67557: PPUSH
67558: LD_INT 3
67560: PPUSH
67561: CALL_OW 12
67565: PUSH
67566: LD_INT 1
67568: PPUSH
67569: LD_INT 3
67571: PPUSH
67572: CALL_OW 12
67576: PUSH
67577: LD_INT 0
67579: PUSH
67580: LD_INT 0
67582: PUSH
67583: EMPTY
67584: LIST
67585: LIST
67586: LIST
67587: LIST
67588: ST_TO_ADDR
// animal := CreateHuman ;
67589: LD_ADDR_VAR 0 12
67593: PUSH
67594: CALL_OW 44
67598: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67599: LD_VAR 0 12
67603: PPUSH
67604: LD_VAR 0 8
67608: PPUSH
67609: LD_INT 0
67611: PPUSH
67612: CALL 69391 0 3
// end ;
67616: GO 67514
67618: POP
67619: POP
// if enchidnas then
67620: LD_VAR 0 4
67624: IFFALSE 67691
// for i = 1 to enchidnas do
67626: LD_ADDR_VAR 0 11
67630: PUSH
67631: DOUBLE
67632: LD_INT 1
67634: DEC
67635: ST_TO_ADDR
67636: LD_VAR 0 4
67640: PUSH
67641: FOR_TO
67642: IFFALSE 67689
// begin hc_class = 13 ;
67644: LD_ADDR_OWVAR 28
67648: PUSH
67649: LD_INT 13
67651: ST_TO_ADDR
// hc_gallery =  ;
67652: LD_ADDR_OWVAR 33
67656: PUSH
67657: LD_STRING 
67659: ST_TO_ADDR
// animal := CreateHuman ;
67660: LD_ADDR_VAR 0 12
67664: PUSH
67665: CALL_OW 44
67669: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67670: LD_VAR 0 12
67674: PPUSH
67675: LD_VAR 0 8
67679: PPUSH
67680: LD_INT 0
67682: PPUSH
67683: CALL 69391 0 3
// end ;
67687: GO 67641
67689: POP
67690: POP
// if fishes then
67691: LD_VAR 0 7
67695: IFFALSE 67762
// for i = 1 to fishes do
67697: LD_ADDR_VAR 0 11
67701: PUSH
67702: DOUBLE
67703: LD_INT 1
67705: DEC
67706: ST_TO_ADDR
67707: LD_VAR 0 7
67711: PUSH
67712: FOR_TO
67713: IFFALSE 67760
// begin hc_class = 20 ;
67715: LD_ADDR_OWVAR 28
67719: PUSH
67720: LD_INT 20
67722: ST_TO_ADDR
// hc_gallery =  ;
67723: LD_ADDR_OWVAR 33
67727: PUSH
67728: LD_STRING 
67730: ST_TO_ADDR
// animal := CreateHuman ;
67731: LD_ADDR_VAR 0 12
67735: PUSH
67736: CALL_OW 44
67740: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
67741: LD_VAR 0 12
67745: PPUSH
67746: LD_VAR 0 9
67750: PPUSH
67751: LD_INT 0
67753: PPUSH
67754: CALL 69391 0 3
// end ;
67758: GO 67712
67760: POP
67761: POP
// end ;
67762: LD_VAR 0 10
67766: RET
// export function WantHeal ( sci , unit ) ; begin
67767: LD_INT 0
67769: PPUSH
// if GetTaskList ( sci ) > 0 then
67770: LD_VAR 0 1
67774: PPUSH
67775: CALL_OW 437
67779: PUSH
67780: LD_INT 0
67782: GREATER
67783: IFFALSE 67853
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
67785: LD_VAR 0 1
67789: PPUSH
67790: CALL_OW 437
67794: PUSH
67795: LD_INT 1
67797: ARRAY
67798: PUSH
67799: LD_INT 1
67801: ARRAY
67802: PUSH
67803: LD_STRING l
67805: EQUAL
67806: PUSH
67807: LD_VAR 0 1
67811: PPUSH
67812: CALL_OW 437
67816: PUSH
67817: LD_INT 1
67819: ARRAY
67820: PUSH
67821: LD_INT 4
67823: ARRAY
67824: PUSH
67825: LD_VAR 0 2
67829: EQUAL
67830: AND
67831: IFFALSE 67843
// result := true else
67833: LD_ADDR_VAR 0 3
67837: PUSH
67838: LD_INT 1
67840: ST_TO_ADDR
67841: GO 67851
// result := false ;
67843: LD_ADDR_VAR 0 3
67847: PUSH
67848: LD_INT 0
67850: ST_TO_ADDR
// end else
67851: GO 67861
// result := false ;
67853: LD_ADDR_VAR 0 3
67857: PUSH
67858: LD_INT 0
67860: ST_TO_ADDR
// end ;
67861: LD_VAR 0 3
67865: RET
// export function HealTarget ( sci ) ; begin
67866: LD_INT 0
67868: PPUSH
// if not sci then
67869: LD_VAR 0 1
67873: NOT
67874: IFFALSE 67878
// exit ;
67876: GO 67943
// result := 0 ;
67878: LD_ADDR_VAR 0 2
67882: PUSH
67883: LD_INT 0
67885: ST_TO_ADDR
// if GetTaskList ( sci ) then
67886: LD_VAR 0 1
67890: PPUSH
67891: CALL_OW 437
67895: IFFALSE 67943
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
67897: LD_VAR 0 1
67901: PPUSH
67902: CALL_OW 437
67906: PUSH
67907: LD_INT 1
67909: ARRAY
67910: PUSH
67911: LD_INT 1
67913: ARRAY
67914: PUSH
67915: LD_STRING l
67917: EQUAL
67918: IFFALSE 67943
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
67920: LD_ADDR_VAR 0 2
67924: PUSH
67925: LD_VAR 0 1
67929: PPUSH
67930: CALL_OW 437
67934: PUSH
67935: LD_INT 1
67937: ARRAY
67938: PUSH
67939: LD_INT 4
67941: ARRAY
67942: ST_TO_ADDR
// end ;
67943: LD_VAR 0 2
67947: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
67948: LD_INT 0
67950: PPUSH
67951: PPUSH
67952: PPUSH
67953: PPUSH
// if not base_units then
67954: LD_VAR 0 1
67958: NOT
67959: IFFALSE 67963
// exit ;
67961: GO 68050
// result := false ;
67963: LD_ADDR_VAR 0 2
67967: PUSH
67968: LD_INT 0
67970: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
67971: LD_ADDR_VAR 0 5
67975: PUSH
67976: LD_VAR 0 1
67980: PPUSH
67981: LD_INT 21
67983: PUSH
67984: LD_INT 3
67986: PUSH
67987: EMPTY
67988: LIST
67989: LIST
67990: PPUSH
67991: CALL_OW 72
67995: ST_TO_ADDR
// if not tmp then
67996: LD_VAR 0 5
68000: NOT
68001: IFFALSE 68005
// exit ;
68003: GO 68050
// for i in tmp do
68005: LD_ADDR_VAR 0 3
68009: PUSH
68010: LD_VAR 0 5
68014: PUSH
68015: FOR_IN
68016: IFFALSE 68048
// begin result := EnemyInRange ( i , 22 ) ;
68018: LD_ADDR_VAR 0 2
68022: PUSH
68023: LD_VAR 0 3
68027: PPUSH
68028: LD_INT 22
68030: PPUSH
68031: CALL 65637 0 2
68035: ST_TO_ADDR
// if result then
68036: LD_VAR 0 2
68040: IFFALSE 68046
// exit ;
68042: POP
68043: POP
68044: GO 68050
// end ;
68046: GO 68015
68048: POP
68049: POP
// end ;
68050: LD_VAR 0 2
68054: RET
// export function FilterByTag ( units , tag ) ; begin
68055: LD_INT 0
68057: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
68058: LD_ADDR_VAR 0 3
68062: PUSH
68063: LD_VAR 0 1
68067: PPUSH
68068: LD_INT 120
68070: PUSH
68071: LD_VAR 0 2
68075: PUSH
68076: EMPTY
68077: LIST
68078: LIST
68079: PPUSH
68080: CALL_OW 72
68084: ST_TO_ADDR
// end ;
68085: LD_VAR 0 3
68089: RET
// export function IsDriver ( un ) ; begin
68090: LD_INT 0
68092: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
68093: LD_ADDR_VAR 0 2
68097: PUSH
68098: LD_VAR 0 1
68102: PUSH
68103: LD_INT 55
68105: PUSH
68106: EMPTY
68107: LIST
68108: PPUSH
68109: CALL_OW 69
68113: IN
68114: ST_TO_ADDR
// end ;
68115: LD_VAR 0 2
68119: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
68120: LD_INT 0
68122: PPUSH
68123: PPUSH
// list := [ ] ;
68124: LD_ADDR_VAR 0 5
68128: PUSH
68129: EMPTY
68130: ST_TO_ADDR
// case d of 0 :
68131: LD_VAR 0 3
68135: PUSH
68136: LD_INT 0
68138: DOUBLE
68139: EQUAL
68140: IFTRUE 68144
68142: GO 68277
68144: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
68145: LD_ADDR_VAR 0 5
68149: PUSH
68150: LD_VAR 0 1
68154: PUSH
68155: LD_INT 4
68157: MINUS
68158: PUSH
68159: LD_VAR 0 2
68163: PUSH
68164: LD_INT 4
68166: MINUS
68167: PUSH
68168: LD_INT 2
68170: PUSH
68171: EMPTY
68172: LIST
68173: LIST
68174: LIST
68175: PUSH
68176: LD_VAR 0 1
68180: PUSH
68181: LD_INT 3
68183: MINUS
68184: PUSH
68185: LD_VAR 0 2
68189: PUSH
68190: LD_INT 1
68192: PUSH
68193: EMPTY
68194: LIST
68195: LIST
68196: LIST
68197: PUSH
68198: LD_VAR 0 1
68202: PUSH
68203: LD_INT 4
68205: PLUS
68206: PUSH
68207: LD_VAR 0 2
68211: PUSH
68212: LD_INT 4
68214: PUSH
68215: EMPTY
68216: LIST
68217: LIST
68218: LIST
68219: PUSH
68220: LD_VAR 0 1
68224: PUSH
68225: LD_INT 3
68227: PLUS
68228: PUSH
68229: LD_VAR 0 2
68233: PUSH
68234: LD_INT 3
68236: PLUS
68237: PUSH
68238: LD_INT 5
68240: PUSH
68241: EMPTY
68242: LIST
68243: LIST
68244: LIST
68245: PUSH
68246: LD_VAR 0 1
68250: PUSH
68251: LD_VAR 0 2
68255: PUSH
68256: LD_INT 4
68258: PLUS
68259: PUSH
68260: LD_INT 0
68262: PUSH
68263: EMPTY
68264: LIST
68265: LIST
68266: LIST
68267: PUSH
68268: EMPTY
68269: LIST
68270: LIST
68271: LIST
68272: LIST
68273: LIST
68274: ST_TO_ADDR
// end ; 1 :
68275: GO 68975
68277: LD_INT 1
68279: DOUBLE
68280: EQUAL
68281: IFTRUE 68285
68283: GO 68418
68285: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
68286: LD_ADDR_VAR 0 5
68290: PUSH
68291: LD_VAR 0 1
68295: PUSH
68296: LD_VAR 0 2
68300: PUSH
68301: LD_INT 4
68303: MINUS
68304: PUSH
68305: LD_INT 3
68307: PUSH
68308: EMPTY
68309: LIST
68310: LIST
68311: LIST
68312: PUSH
68313: LD_VAR 0 1
68317: PUSH
68318: LD_INT 3
68320: MINUS
68321: PUSH
68322: LD_VAR 0 2
68326: PUSH
68327: LD_INT 3
68329: MINUS
68330: PUSH
68331: LD_INT 2
68333: PUSH
68334: EMPTY
68335: LIST
68336: LIST
68337: LIST
68338: PUSH
68339: LD_VAR 0 1
68343: PUSH
68344: LD_INT 4
68346: MINUS
68347: PUSH
68348: LD_VAR 0 2
68352: PUSH
68353: LD_INT 1
68355: PUSH
68356: EMPTY
68357: LIST
68358: LIST
68359: LIST
68360: PUSH
68361: LD_VAR 0 1
68365: PUSH
68366: LD_VAR 0 2
68370: PUSH
68371: LD_INT 3
68373: PLUS
68374: PUSH
68375: LD_INT 0
68377: PUSH
68378: EMPTY
68379: LIST
68380: LIST
68381: LIST
68382: PUSH
68383: LD_VAR 0 1
68387: PUSH
68388: LD_INT 4
68390: PLUS
68391: PUSH
68392: LD_VAR 0 2
68396: PUSH
68397: LD_INT 4
68399: PLUS
68400: PUSH
68401: LD_INT 5
68403: PUSH
68404: EMPTY
68405: LIST
68406: LIST
68407: LIST
68408: PUSH
68409: EMPTY
68410: LIST
68411: LIST
68412: LIST
68413: LIST
68414: LIST
68415: ST_TO_ADDR
// end ; 2 :
68416: GO 68975
68418: LD_INT 2
68420: DOUBLE
68421: EQUAL
68422: IFTRUE 68426
68424: GO 68555
68426: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
68427: LD_ADDR_VAR 0 5
68431: PUSH
68432: LD_VAR 0 1
68436: PUSH
68437: LD_VAR 0 2
68441: PUSH
68442: LD_INT 3
68444: MINUS
68445: PUSH
68446: LD_INT 3
68448: PUSH
68449: EMPTY
68450: LIST
68451: LIST
68452: LIST
68453: PUSH
68454: LD_VAR 0 1
68458: PUSH
68459: LD_INT 4
68461: PLUS
68462: PUSH
68463: LD_VAR 0 2
68467: PUSH
68468: LD_INT 4
68470: PUSH
68471: EMPTY
68472: LIST
68473: LIST
68474: LIST
68475: PUSH
68476: LD_VAR 0 1
68480: PUSH
68481: LD_VAR 0 2
68485: PUSH
68486: LD_INT 4
68488: PLUS
68489: PUSH
68490: LD_INT 0
68492: PUSH
68493: EMPTY
68494: LIST
68495: LIST
68496: LIST
68497: PUSH
68498: LD_VAR 0 1
68502: PUSH
68503: LD_INT 3
68505: MINUS
68506: PUSH
68507: LD_VAR 0 2
68511: PUSH
68512: LD_INT 1
68514: PUSH
68515: EMPTY
68516: LIST
68517: LIST
68518: LIST
68519: PUSH
68520: LD_VAR 0 1
68524: PUSH
68525: LD_INT 4
68527: MINUS
68528: PUSH
68529: LD_VAR 0 2
68533: PUSH
68534: LD_INT 4
68536: MINUS
68537: PUSH
68538: LD_INT 2
68540: PUSH
68541: EMPTY
68542: LIST
68543: LIST
68544: LIST
68545: PUSH
68546: EMPTY
68547: LIST
68548: LIST
68549: LIST
68550: LIST
68551: LIST
68552: ST_TO_ADDR
// end ; 3 :
68553: GO 68975
68555: LD_INT 3
68557: DOUBLE
68558: EQUAL
68559: IFTRUE 68563
68561: GO 68696
68563: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
68564: LD_ADDR_VAR 0 5
68568: PUSH
68569: LD_VAR 0 1
68573: PUSH
68574: LD_INT 3
68576: PLUS
68577: PUSH
68578: LD_VAR 0 2
68582: PUSH
68583: LD_INT 4
68585: PUSH
68586: EMPTY
68587: LIST
68588: LIST
68589: LIST
68590: PUSH
68591: LD_VAR 0 1
68595: PUSH
68596: LD_INT 4
68598: PLUS
68599: PUSH
68600: LD_VAR 0 2
68604: PUSH
68605: LD_INT 4
68607: PLUS
68608: PUSH
68609: LD_INT 5
68611: PUSH
68612: EMPTY
68613: LIST
68614: LIST
68615: LIST
68616: PUSH
68617: LD_VAR 0 1
68621: PUSH
68622: LD_INT 4
68624: MINUS
68625: PUSH
68626: LD_VAR 0 2
68630: PUSH
68631: LD_INT 1
68633: PUSH
68634: EMPTY
68635: LIST
68636: LIST
68637: LIST
68638: PUSH
68639: LD_VAR 0 1
68643: PUSH
68644: LD_VAR 0 2
68648: PUSH
68649: LD_INT 4
68651: MINUS
68652: PUSH
68653: LD_INT 3
68655: PUSH
68656: EMPTY
68657: LIST
68658: LIST
68659: LIST
68660: PUSH
68661: LD_VAR 0 1
68665: PUSH
68666: LD_INT 3
68668: MINUS
68669: PUSH
68670: LD_VAR 0 2
68674: PUSH
68675: LD_INT 3
68677: MINUS
68678: PUSH
68679: LD_INT 2
68681: PUSH
68682: EMPTY
68683: LIST
68684: LIST
68685: LIST
68686: PUSH
68687: EMPTY
68688: LIST
68689: LIST
68690: LIST
68691: LIST
68692: LIST
68693: ST_TO_ADDR
// end ; 4 :
68694: GO 68975
68696: LD_INT 4
68698: DOUBLE
68699: EQUAL
68700: IFTRUE 68704
68702: GO 68837
68704: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
68705: LD_ADDR_VAR 0 5
68709: PUSH
68710: LD_VAR 0 1
68714: PUSH
68715: LD_VAR 0 2
68719: PUSH
68720: LD_INT 4
68722: PLUS
68723: PUSH
68724: LD_INT 0
68726: PUSH
68727: EMPTY
68728: LIST
68729: LIST
68730: LIST
68731: PUSH
68732: LD_VAR 0 1
68736: PUSH
68737: LD_INT 3
68739: PLUS
68740: PUSH
68741: LD_VAR 0 2
68745: PUSH
68746: LD_INT 3
68748: PLUS
68749: PUSH
68750: LD_INT 5
68752: PUSH
68753: EMPTY
68754: LIST
68755: LIST
68756: LIST
68757: PUSH
68758: LD_VAR 0 1
68762: PUSH
68763: LD_INT 4
68765: PLUS
68766: PUSH
68767: LD_VAR 0 2
68771: PUSH
68772: LD_INT 4
68774: PUSH
68775: EMPTY
68776: LIST
68777: LIST
68778: LIST
68779: PUSH
68780: LD_VAR 0 1
68784: PUSH
68785: LD_VAR 0 2
68789: PUSH
68790: LD_INT 3
68792: MINUS
68793: PUSH
68794: LD_INT 3
68796: PUSH
68797: EMPTY
68798: LIST
68799: LIST
68800: LIST
68801: PUSH
68802: LD_VAR 0 1
68806: PUSH
68807: LD_INT 4
68809: MINUS
68810: PUSH
68811: LD_VAR 0 2
68815: PUSH
68816: LD_INT 4
68818: MINUS
68819: PUSH
68820: LD_INT 2
68822: PUSH
68823: EMPTY
68824: LIST
68825: LIST
68826: LIST
68827: PUSH
68828: EMPTY
68829: LIST
68830: LIST
68831: LIST
68832: LIST
68833: LIST
68834: ST_TO_ADDR
// end ; 5 :
68835: GO 68975
68837: LD_INT 5
68839: DOUBLE
68840: EQUAL
68841: IFTRUE 68845
68843: GO 68974
68845: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
68846: LD_ADDR_VAR 0 5
68850: PUSH
68851: LD_VAR 0 1
68855: PUSH
68856: LD_INT 4
68858: MINUS
68859: PUSH
68860: LD_VAR 0 2
68864: PUSH
68865: LD_INT 1
68867: PUSH
68868: EMPTY
68869: LIST
68870: LIST
68871: LIST
68872: PUSH
68873: LD_VAR 0 1
68877: PUSH
68878: LD_VAR 0 2
68882: PUSH
68883: LD_INT 4
68885: MINUS
68886: PUSH
68887: LD_INT 3
68889: PUSH
68890: EMPTY
68891: LIST
68892: LIST
68893: LIST
68894: PUSH
68895: LD_VAR 0 1
68899: PUSH
68900: LD_INT 4
68902: PLUS
68903: PUSH
68904: LD_VAR 0 2
68908: PUSH
68909: LD_INT 4
68911: PLUS
68912: PUSH
68913: LD_INT 5
68915: PUSH
68916: EMPTY
68917: LIST
68918: LIST
68919: LIST
68920: PUSH
68921: LD_VAR 0 1
68925: PUSH
68926: LD_INT 3
68928: PLUS
68929: PUSH
68930: LD_VAR 0 2
68934: PUSH
68935: LD_INT 4
68937: PUSH
68938: EMPTY
68939: LIST
68940: LIST
68941: LIST
68942: PUSH
68943: LD_VAR 0 1
68947: PUSH
68948: LD_VAR 0 2
68952: PUSH
68953: LD_INT 3
68955: PLUS
68956: PUSH
68957: LD_INT 0
68959: PUSH
68960: EMPTY
68961: LIST
68962: LIST
68963: LIST
68964: PUSH
68965: EMPTY
68966: LIST
68967: LIST
68968: LIST
68969: LIST
68970: LIST
68971: ST_TO_ADDR
// end ; end ;
68972: GO 68975
68974: POP
// result := list ;
68975: LD_ADDR_VAR 0 4
68979: PUSH
68980: LD_VAR 0 5
68984: ST_TO_ADDR
// end ;
68985: LD_VAR 0 4
68989: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
68990: LD_INT 0
68992: PPUSH
68993: PPUSH
68994: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
68995: LD_VAR 0 1
68999: NOT
69000: PUSH
69001: LD_VAR 0 2
69005: PUSH
69006: LD_INT 1
69008: PUSH
69009: LD_INT 2
69011: PUSH
69012: LD_INT 3
69014: PUSH
69015: LD_INT 4
69017: PUSH
69018: EMPTY
69019: LIST
69020: LIST
69021: LIST
69022: LIST
69023: IN
69024: NOT
69025: OR
69026: IFFALSE 69030
// exit ;
69028: GO 69113
// tmp := [ ] ;
69030: LD_ADDR_VAR 0 5
69034: PUSH
69035: EMPTY
69036: ST_TO_ADDR
// for i in units do
69037: LD_ADDR_VAR 0 4
69041: PUSH
69042: LD_VAR 0 1
69046: PUSH
69047: FOR_IN
69048: IFFALSE 69082
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
69050: LD_ADDR_VAR 0 5
69054: PUSH
69055: LD_VAR 0 5
69059: PPUSH
69060: LD_VAR 0 4
69064: PPUSH
69065: LD_VAR 0 2
69069: PPUSH
69070: CALL_OW 259
69074: PPUSH
69075: CALL 70486 0 2
69079: ST_TO_ADDR
69080: GO 69047
69082: POP
69083: POP
// if not tmp then
69084: LD_VAR 0 5
69088: NOT
69089: IFFALSE 69093
// exit ;
69091: GO 69113
// result := SortListByListDesc ( units , tmp ) ;
69093: LD_ADDR_VAR 0 3
69097: PUSH
69098: LD_VAR 0 1
69102: PPUSH
69103: LD_VAR 0 5
69107: PPUSH
69108: CALL_OW 77
69112: ST_TO_ADDR
// end ;
69113: LD_VAR 0 3
69117: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
69118: LD_INT 0
69120: PPUSH
69121: PPUSH
69122: PPUSH
// result := false ;
69123: LD_ADDR_VAR 0 3
69127: PUSH
69128: LD_INT 0
69130: ST_TO_ADDR
// if not building then
69131: LD_VAR 0 2
69135: NOT
69136: IFFALSE 69140
// exit ;
69138: GO 69278
// x := GetX ( building ) ;
69140: LD_ADDR_VAR 0 4
69144: PUSH
69145: LD_VAR 0 2
69149: PPUSH
69150: CALL_OW 250
69154: ST_TO_ADDR
// y := GetY ( building ) ;
69155: LD_ADDR_VAR 0 5
69159: PUSH
69160: LD_VAR 0 2
69164: PPUSH
69165: CALL_OW 251
69169: ST_TO_ADDR
// if not x or not y then
69170: LD_VAR 0 4
69174: NOT
69175: PUSH
69176: LD_VAR 0 5
69180: NOT
69181: OR
69182: IFFALSE 69186
// exit ;
69184: GO 69278
// if GetTaskList ( unit ) then
69186: LD_VAR 0 1
69190: PPUSH
69191: CALL_OW 437
69195: IFFALSE 69278
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69197: LD_STRING e
69199: PUSH
69200: LD_VAR 0 1
69204: PPUSH
69205: CALL_OW 437
69209: PUSH
69210: LD_INT 1
69212: ARRAY
69213: PUSH
69214: LD_INT 1
69216: ARRAY
69217: EQUAL
69218: PUSH
69219: LD_VAR 0 4
69223: PUSH
69224: LD_VAR 0 1
69228: PPUSH
69229: CALL_OW 437
69233: PUSH
69234: LD_INT 1
69236: ARRAY
69237: PUSH
69238: LD_INT 2
69240: ARRAY
69241: EQUAL
69242: AND
69243: PUSH
69244: LD_VAR 0 5
69248: PUSH
69249: LD_VAR 0 1
69253: PPUSH
69254: CALL_OW 437
69258: PUSH
69259: LD_INT 1
69261: ARRAY
69262: PUSH
69263: LD_INT 3
69265: ARRAY
69266: EQUAL
69267: AND
69268: IFFALSE 69278
// result := true end ;
69270: LD_ADDR_VAR 0 3
69274: PUSH
69275: LD_INT 1
69277: ST_TO_ADDR
// end ;
69278: LD_VAR 0 3
69282: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
69283: LD_INT 0
69285: PPUSH
// result := false ;
69286: LD_ADDR_VAR 0 4
69290: PUSH
69291: LD_INT 0
69293: ST_TO_ADDR
// if GetTaskList ( unit ) then
69294: LD_VAR 0 1
69298: PPUSH
69299: CALL_OW 437
69303: IFFALSE 69386
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69305: LD_STRING M
69307: PUSH
69308: LD_VAR 0 1
69312: PPUSH
69313: CALL_OW 437
69317: PUSH
69318: LD_INT 1
69320: ARRAY
69321: PUSH
69322: LD_INT 1
69324: ARRAY
69325: EQUAL
69326: PUSH
69327: LD_VAR 0 2
69331: PUSH
69332: LD_VAR 0 1
69336: PPUSH
69337: CALL_OW 437
69341: PUSH
69342: LD_INT 1
69344: ARRAY
69345: PUSH
69346: LD_INT 2
69348: ARRAY
69349: EQUAL
69350: AND
69351: PUSH
69352: LD_VAR 0 3
69356: PUSH
69357: LD_VAR 0 1
69361: PPUSH
69362: CALL_OW 437
69366: PUSH
69367: LD_INT 1
69369: ARRAY
69370: PUSH
69371: LD_INT 3
69373: ARRAY
69374: EQUAL
69375: AND
69376: IFFALSE 69386
// result := true ;
69378: LD_ADDR_VAR 0 4
69382: PUSH
69383: LD_INT 1
69385: ST_TO_ADDR
// end ; end ;
69386: LD_VAR 0 4
69390: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
69391: LD_INT 0
69393: PPUSH
69394: PPUSH
69395: PPUSH
69396: PPUSH
// if not unit or not area then
69397: LD_VAR 0 1
69401: NOT
69402: PUSH
69403: LD_VAR 0 2
69407: NOT
69408: OR
69409: IFFALSE 69413
// exit ;
69411: GO 69589
// tmp := AreaToList ( area , i ) ;
69413: LD_ADDR_VAR 0 6
69417: PUSH
69418: LD_VAR 0 2
69422: PPUSH
69423: LD_VAR 0 5
69427: PPUSH
69428: CALL_OW 517
69432: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
69433: LD_ADDR_VAR 0 5
69437: PUSH
69438: DOUBLE
69439: LD_INT 1
69441: DEC
69442: ST_TO_ADDR
69443: LD_VAR 0 6
69447: PUSH
69448: LD_INT 1
69450: ARRAY
69451: PUSH
69452: FOR_TO
69453: IFFALSE 69587
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
69455: LD_ADDR_VAR 0 7
69459: PUSH
69460: LD_VAR 0 6
69464: PUSH
69465: LD_INT 1
69467: ARRAY
69468: PUSH
69469: LD_VAR 0 5
69473: ARRAY
69474: PUSH
69475: LD_VAR 0 6
69479: PUSH
69480: LD_INT 2
69482: ARRAY
69483: PUSH
69484: LD_VAR 0 5
69488: ARRAY
69489: PUSH
69490: EMPTY
69491: LIST
69492: LIST
69493: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
69494: LD_INT 92
69496: PUSH
69497: LD_VAR 0 7
69501: PUSH
69502: LD_INT 1
69504: ARRAY
69505: PUSH
69506: LD_VAR 0 7
69510: PUSH
69511: LD_INT 2
69513: ARRAY
69514: PUSH
69515: LD_INT 2
69517: PUSH
69518: EMPTY
69519: LIST
69520: LIST
69521: LIST
69522: LIST
69523: PPUSH
69524: CALL_OW 69
69528: PUSH
69529: LD_INT 0
69531: EQUAL
69532: IFFALSE 69585
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
69534: LD_VAR 0 1
69538: PPUSH
69539: LD_VAR 0 7
69543: PUSH
69544: LD_INT 1
69546: ARRAY
69547: PPUSH
69548: LD_VAR 0 7
69552: PUSH
69553: LD_INT 2
69555: ARRAY
69556: PPUSH
69557: LD_VAR 0 3
69561: PPUSH
69562: CALL_OW 48
// result := IsPlaced ( unit ) ;
69566: LD_ADDR_VAR 0 4
69570: PUSH
69571: LD_VAR 0 1
69575: PPUSH
69576: CALL_OW 305
69580: ST_TO_ADDR
// exit ;
69581: POP
69582: POP
69583: GO 69589
// end ; end ;
69585: GO 69452
69587: POP
69588: POP
// end ;
69589: LD_VAR 0 4
69593: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
69594: LD_INT 0
69596: PPUSH
69597: PPUSH
69598: PPUSH
// if not side or side > 8 then
69599: LD_VAR 0 1
69603: NOT
69604: PUSH
69605: LD_VAR 0 1
69609: PUSH
69610: LD_INT 8
69612: GREATER
69613: OR
69614: IFFALSE 69618
// exit ;
69616: GO 69805
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
69618: LD_ADDR_VAR 0 4
69622: PUSH
69623: LD_INT 22
69625: PUSH
69626: LD_VAR 0 1
69630: PUSH
69631: EMPTY
69632: LIST
69633: LIST
69634: PUSH
69635: LD_INT 21
69637: PUSH
69638: LD_INT 3
69640: PUSH
69641: EMPTY
69642: LIST
69643: LIST
69644: PUSH
69645: EMPTY
69646: LIST
69647: LIST
69648: PPUSH
69649: CALL_OW 69
69653: ST_TO_ADDR
// if not tmp then
69654: LD_VAR 0 4
69658: NOT
69659: IFFALSE 69663
// exit ;
69661: GO 69805
// enable_addtolog := true ;
69663: LD_ADDR_OWVAR 81
69667: PUSH
69668: LD_INT 1
69670: ST_TO_ADDR
// AddToLog ( [ ) ;
69671: LD_STRING [
69673: PPUSH
69674: CALL_OW 561
// for i in tmp do
69678: LD_ADDR_VAR 0 3
69682: PUSH
69683: LD_VAR 0 4
69687: PUSH
69688: FOR_IN
69689: IFFALSE 69796
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
69691: LD_STRING [
69693: PUSH
69694: LD_VAR 0 3
69698: PPUSH
69699: CALL_OW 266
69703: STR
69704: PUSH
69705: LD_STRING , 
69707: STR
69708: PUSH
69709: LD_VAR 0 3
69713: PPUSH
69714: CALL_OW 250
69718: STR
69719: PUSH
69720: LD_STRING , 
69722: STR
69723: PUSH
69724: LD_VAR 0 3
69728: PPUSH
69729: CALL_OW 251
69733: STR
69734: PUSH
69735: LD_STRING , 
69737: STR
69738: PUSH
69739: LD_VAR 0 3
69743: PPUSH
69744: CALL_OW 254
69748: STR
69749: PUSH
69750: LD_STRING , 
69752: STR
69753: PUSH
69754: LD_VAR 0 3
69758: PPUSH
69759: LD_INT 1
69761: PPUSH
69762: CALL_OW 268
69766: STR
69767: PUSH
69768: LD_STRING , 
69770: STR
69771: PUSH
69772: LD_VAR 0 3
69776: PPUSH
69777: LD_INT 2
69779: PPUSH
69780: CALL_OW 268
69784: STR
69785: PUSH
69786: LD_STRING ],
69788: STR
69789: PPUSH
69790: CALL_OW 561
// end ;
69794: GO 69688
69796: POP
69797: POP
// AddToLog ( ]; ) ;
69798: LD_STRING ];
69800: PPUSH
69801: CALL_OW 561
// end ;
69805: LD_VAR 0 2
69809: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
69810: LD_INT 0
69812: PPUSH
69813: PPUSH
69814: PPUSH
69815: PPUSH
69816: PPUSH
// if not area or not rate or not max then
69817: LD_VAR 0 1
69821: NOT
69822: PUSH
69823: LD_VAR 0 2
69827: NOT
69828: OR
69829: PUSH
69830: LD_VAR 0 4
69834: NOT
69835: OR
69836: IFFALSE 69840
// exit ;
69838: GO 70029
// while 1 do
69840: LD_INT 1
69842: IFFALSE 70029
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
69844: LD_ADDR_VAR 0 9
69848: PUSH
69849: LD_VAR 0 1
69853: PPUSH
69854: LD_INT 1
69856: PPUSH
69857: CALL_OW 287
69861: PUSH
69862: LD_INT 10
69864: MUL
69865: ST_TO_ADDR
// r := rate / 10 ;
69866: LD_ADDR_VAR 0 7
69870: PUSH
69871: LD_VAR 0 2
69875: PUSH
69876: LD_INT 10
69878: DIVREAL
69879: ST_TO_ADDR
// time := 1 1$00 ;
69880: LD_ADDR_VAR 0 8
69884: PUSH
69885: LD_INT 2100
69887: ST_TO_ADDR
// if amount < min then
69888: LD_VAR 0 9
69892: PUSH
69893: LD_VAR 0 3
69897: LESS
69898: IFFALSE 69916
// r := r * 2 else
69900: LD_ADDR_VAR 0 7
69904: PUSH
69905: LD_VAR 0 7
69909: PUSH
69910: LD_INT 2
69912: MUL
69913: ST_TO_ADDR
69914: GO 69942
// if amount > max then
69916: LD_VAR 0 9
69920: PUSH
69921: LD_VAR 0 4
69925: GREATER
69926: IFFALSE 69942
// r := r / 2 ;
69928: LD_ADDR_VAR 0 7
69932: PUSH
69933: LD_VAR 0 7
69937: PUSH
69938: LD_INT 2
69940: DIVREAL
69941: ST_TO_ADDR
// time := time / r ;
69942: LD_ADDR_VAR 0 8
69946: PUSH
69947: LD_VAR 0 8
69951: PUSH
69952: LD_VAR 0 7
69956: DIVREAL
69957: ST_TO_ADDR
// if time < 0 then
69958: LD_VAR 0 8
69962: PUSH
69963: LD_INT 0
69965: LESS
69966: IFFALSE 69983
// time := time * - 1 ;
69968: LD_ADDR_VAR 0 8
69972: PUSH
69973: LD_VAR 0 8
69977: PUSH
69978: LD_INT 1
69980: NEG
69981: MUL
69982: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
69983: LD_VAR 0 8
69987: PUSH
69988: LD_INT 35
69990: PPUSH
69991: LD_INT 875
69993: PPUSH
69994: CALL_OW 12
69998: PLUS
69999: PPUSH
70000: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
70004: LD_INT 1
70006: PPUSH
70007: LD_INT 5
70009: PPUSH
70010: CALL_OW 12
70014: PPUSH
70015: LD_VAR 0 1
70019: PPUSH
70020: LD_INT 1
70022: PPUSH
70023: CALL_OW 55
// end ;
70027: GO 69840
// end ;
70029: LD_VAR 0 5
70033: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
70034: LD_INT 0
70036: PPUSH
70037: PPUSH
70038: PPUSH
70039: PPUSH
70040: PPUSH
70041: PPUSH
70042: PPUSH
70043: PPUSH
// if not turrets or not factories then
70044: LD_VAR 0 1
70048: NOT
70049: PUSH
70050: LD_VAR 0 2
70054: NOT
70055: OR
70056: IFFALSE 70060
// exit ;
70058: GO 70367
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
70060: LD_ADDR_VAR 0 10
70064: PUSH
70065: LD_INT 5
70067: PUSH
70068: LD_INT 6
70070: PUSH
70071: EMPTY
70072: LIST
70073: LIST
70074: PUSH
70075: LD_INT 2
70077: PUSH
70078: LD_INT 4
70080: PUSH
70081: EMPTY
70082: LIST
70083: LIST
70084: PUSH
70085: LD_INT 3
70087: PUSH
70088: LD_INT 5
70090: PUSH
70091: EMPTY
70092: LIST
70093: LIST
70094: PUSH
70095: EMPTY
70096: LIST
70097: LIST
70098: LIST
70099: PUSH
70100: LD_INT 24
70102: PUSH
70103: LD_INT 25
70105: PUSH
70106: EMPTY
70107: LIST
70108: LIST
70109: PUSH
70110: LD_INT 23
70112: PUSH
70113: LD_INT 27
70115: PUSH
70116: EMPTY
70117: LIST
70118: LIST
70119: PUSH
70120: EMPTY
70121: LIST
70122: LIST
70123: PUSH
70124: LD_INT 42
70126: PUSH
70127: LD_INT 43
70129: PUSH
70130: EMPTY
70131: LIST
70132: LIST
70133: PUSH
70134: LD_INT 44
70136: PUSH
70137: LD_INT 46
70139: PUSH
70140: EMPTY
70141: LIST
70142: LIST
70143: PUSH
70144: LD_INT 45
70146: PUSH
70147: LD_INT 47
70149: PUSH
70150: EMPTY
70151: LIST
70152: LIST
70153: PUSH
70154: EMPTY
70155: LIST
70156: LIST
70157: LIST
70158: PUSH
70159: EMPTY
70160: LIST
70161: LIST
70162: LIST
70163: ST_TO_ADDR
// result := [ ] ;
70164: LD_ADDR_VAR 0 3
70168: PUSH
70169: EMPTY
70170: ST_TO_ADDR
// for i in turrets do
70171: LD_ADDR_VAR 0 4
70175: PUSH
70176: LD_VAR 0 1
70180: PUSH
70181: FOR_IN
70182: IFFALSE 70365
// begin nat := GetNation ( i ) ;
70184: LD_ADDR_VAR 0 7
70188: PUSH
70189: LD_VAR 0 4
70193: PPUSH
70194: CALL_OW 248
70198: ST_TO_ADDR
// weapon := 0 ;
70199: LD_ADDR_VAR 0 8
70203: PUSH
70204: LD_INT 0
70206: ST_TO_ADDR
// if not nat then
70207: LD_VAR 0 7
70211: NOT
70212: IFFALSE 70216
// continue ;
70214: GO 70181
// for j in list [ nat ] do
70216: LD_ADDR_VAR 0 5
70220: PUSH
70221: LD_VAR 0 10
70225: PUSH
70226: LD_VAR 0 7
70230: ARRAY
70231: PUSH
70232: FOR_IN
70233: IFFALSE 70274
// if GetBWeapon ( i ) = j [ 1 ] then
70235: LD_VAR 0 4
70239: PPUSH
70240: CALL_OW 269
70244: PUSH
70245: LD_VAR 0 5
70249: PUSH
70250: LD_INT 1
70252: ARRAY
70253: EQUAL
70254: IFFALSE 70272
// begin weapon := j [ 2 ] ;
70256: LD_ADDR_VAR 0 8
70260: PUSH
70261: LD_VAR 0 5
70265: PUSH
70266: LD_INT 2
70268: ARRAY
70269: ST_TO_ADDR
// break ;
70270: GO 70274
// end ;
70272: GO 70232
70274: POP
70275: POP
// if not weapon then
70276: LD_VAR 0 8
70280: NOT
70281: IFFALSE 70285
// continue ;
70283: GO 70181
// for k in factories do
70285: LD_ADDR_VAR 0 6
70289: PUSH
70290: LD_VAR 0 2
70294: PUSH
70295: FOR_IN
70296: IFFALSE 70361
// begin weapons := AvailableWeaponList ( k ) ;
70298: LD_ADDR_VAR 0 9
70302: PUSH
70303: LD_VAR 0 6
70307: PPUSH
70308: CALL_OW 478
70312: ST_TO_ADDR
// if not weapons then
70313: LD_VAR 0 9
70317: NOT
70318: IFFALSE 70322
// continue ;
70320: GO 70295
// if weapon in weapons then
70322: LD_VAR 0 8
70326: PUSH
70327: LD_VAR 0 9
70331: IN
70332: IFFALSE 70359
// begin result := [ i , weapon ] ;
70334: LD_ADDR_VAR 0 3
70338: PUSH
70339: LD_VAR 0 4
70343: PUSH
70344: LD_VAR 0 8
70348: PUSH
70349: EMPTY
70350: LIST
70351: LIST
70352: ST_TO_ADDR
// exit ;
70353: POP
70354: POP
70355: POP
70356: POP
70357: GO 70367
// end ; end ;
70359: GO 70295
70361: POP
70362: POP
// end ;
70363: GO 70181
70365: POP
70366: POP
// end ;
70367: LD_VAR 0 3
70371: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
70372: LD_INT 0
70374: PPUSH
// if not side or side > 8 then
70375: LD_VAR 0 3
70379: NOT
70380: PUSH
70381: LD_VAR 0 3
70385: PUSH
70386: LD_INT 8
70388: GREATER
70389: OR
70390: IFFALSE 70394
// exit ;
70392: GO 70453
// if not range then
70394: LD_VAR 0 4
70398: NOT
70399: IFFALSE 70410
// range := - 12 ;
70401: LD_ADDR_VAR 0 4
70405: PUSH
70406: LD_INT 12
70408: NEG
70409: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
70410: LD_VAR 0 1
70414: PPUSH
70415: LD_VAR 0 2
70419: PPUSH
70420: LD_VAR 0 3
70424: PPUSH
70425: LD_VAR 0 4
70429: PPUSH
70430: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
70434: LD_VAR 0 1
70438: PPUSH
70439: LD_VAR 0 2
70443: PPUSH
70444: LD_VAR 0 3
70448: PPUSH
70449: CALL_OW 331
// end ;
70453: LD_VAR 0 5
70457: RET
// export function Video ( mode ) ; begin
70458: LD_INT 0
70460: PPUSH
// ingame_video = mode ;
70461: LD_ADDR_OWVAR 52
70465: PUSH
70466: LD_VAR 0 1
70470: ST_TO_ADDR
// interface_hidden = mode ;
70471: LD_ADDR_OWVAR 54
70475: PUSH
70476: LD_VAR 0 1
70480: ST_TO_ADDR
// end ;
70481: LD_VAR 0 2
70485: RET
// export function Join ( array , element ) ; begin
70486: LD_INT 0
70488: PPUSH
// result := Replace ( array , array + 1 , element ) ;
70489: LD_ADDR_VAR 0 3
70493: PUSH
70494: LD_VAR 0 1
70498: PPUSH
70499: LD_VAR 0 1
70503: PUSH
70504: LD_INT 1
70506: PLUS
70507: PPUSH
70508: LD_VAR 0 2
70512: PPUSH
70513: CALL_OW 1
70517: ST_TO_ADDR
// end ;
70518: LD_VAR 0 3
70522: RET
// export function JoinUnion ( array , element ) ; begin
70523: LD_INT 0
70525: PPUSH
// result := array union element ;
70526: LD_ADDR_VAR 0 3
70530: PUSH
70531: LD_VAR 0 1
70535: PUSH
70536: LD_VAR 0 2
70540: UNION
70541: ST_TO_ADDR
// end ;
70542: LD_VAR 0 3
70546: RET
// export function GetBehemoths ( side ) ; begin
70547: LD_INT 0
70549: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
70550: LD_ADDR_VAR 0 2
70554: PUSH
70555: LD_INT 22
70557: PUSH
70558: LD_VAR 0 1
70562: PUSH
70563: EMPTY
70564: LIST
70565: LIST
70566: PUSH
70567: LD_INT 31
70569: PUSH
70570: LD_INT 25
70572: PUSH
70573: EMPTY
70574: LIST
70575: LIST
70576: PUSH
70577: EMPTY
70578: LIST
70579: LIST
70580: PPUSH
70581: CALL_OW 69
70585: ST_TO_ADDR
// end ;
70586: LD_VAR 0 2
70590: RET
// export function Shuffle ( array ) ; var i , index ; begin
70591: LD_INT 0
70593: PPUSH
70594: PPUSH
70595: PPUSH
// result := [ ] ;
70596: LD_ADDR_VAR 0 2
70600: PUSH
70601: EMPTY
70602: ST_TO_ADDR
// if not array then
70603: LD_VAR 0 1
70607: NOT
70608: IFFALSE 70612
// exit ;
70610: GO 70711
// Randomize ;
70612: CALL_OW 10
// for i = array downto 1 do
70616: LD_ADDR_VAR 0 3
70620: PUSH
70621: DOUBLE
70622: LD_VAR 0 1
70626: INC
70627: ST_TO_ADDR
70628: LD_INT 1
70630: PUSH
70631: FOR_DOWNTO
70632: IFFALSE 70709
// begin index := rand ( 1 , array ) ;
70634: LD_ADDR_VAR 0 4
70638: PUSH
70639: LD_INT 1
70641: PPUSH
70642: LD_VAR 0 1
70646: PPUSH
70647: CALL_OW 12
70651: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
70652: LD_ADDR_VAR 0 2
70656: PUSH
70657: LD_VAR 0 2
70661: PPUSH
70662: LD_VAR 0 2
70666: PUSH
70667: LD_INT 1
70669: PLUS
70670: PPUSH
70671: LD_VAR 0 1
70675: PUSH
70676: LD_VAR 0 4
70680: ARRAY
70681: PPUSH
70682: CALL_OW 2
70686: ST_TO_ADDR
// array := Delete ( array , index ) ;
70687: LD_ADDR_VAR 0 1
70691: PUSH
70692: LD_VAR 0 1
70696: PPUSH
70697: LD_VAR 0 4
70701: PPUSH
70702: CALL_OW 3
70706: ST_TO_ADDR
// end ;
70707: GO 70631
70709: POP
70710: POP
// end ;
70711: LD_VAR 0 2
70715: RET
// export function GetBaseMaterials ( base ) ; begin
70716: LD_INT 0
70718: PPUSH
// result := [ 0 , 0 , 0 ] ;
70719: LD_ADDR_VAR 0 2
70723: PUSH
70724: LD_INT 0
70726: PUSH
70727: LD_INT 0
70729: PUSH
70730: LD_INT 0
70732: PUSH
70733: EMPTY
70734: LIST
70735: LIST
70736: LIST
70737: ST_TO_ADDR
// if not base then
70738: LD_VAR 0 1
70742: NOT
70743: IFFALSE 70747
// exit ;
70745: GO 70796
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
70747: LD_ADDR_VAR 0 2
70751: PUSH
70752: LD_VAR 0 1
70756: PPUSH
70757: LD_INT 1
70759: PPUSH
70760: CALL_OW 275
70764: PUSH
70765: LD_VAR 0 1
70769: PPUSH
70770: LD_INT 2
70772: PPUSH
70773: CALL_OW 275
70777: PUSH
70778: LD_VAR 0 1
70782: PPUSH
70783: LD_INT 3
70785: PPUSH
70786: CALL_OW 275
70790: PUSH
70791: EMPTY
70792: LIST
70793: LIST
70794: LIST
70795: ST_TO_ADDR
// end ;
70796: LD_VAR 0 2
70800: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
70801: LD_INT 0
70803: PPUSH
70804: PPUSH
// result := array ;
70805: LD_ADDR_VAR 0 3
70809: PUSH
70810: LD_VAR 0 1
70814: ST_TO_ADDR
// if size >= result then
70815: LD_VAR 0 2
70819: PUSH
70820: LD_VAR 0 3
70824: GREATEREQUAL
70825: IFFALSE 70829
// exit ;
70827: GO 70879
// if size then
70829: LD_VAR 0 2
70833: IFFALSE 70879
// for i := array downto size do
70835: LD_ADDR_VAR 0 4
70839: PUSH
70840: DOUBLE
70841: LD_VAR 0 1
70845: INC
70846: ST_TO_ADDR
70847: LD_VAR 0 2
70851: PUSH
70852: FOR_DOWNTO
70853: IFFALSE 70877
// result := Delete ( result , result ) ;
70855: LD_ADDR_VAR 0 3
70859: PUSH
70860: LD_VAR 0 3
70864: PPUSH
70865: LD_VAR 0 3
70869: PPUSH
70870: CALL_OW 3
70874: ST_TO_ADDR
70875: GO 70852
70877: POP
70878: POP
// end ;
70879: LD_VAR 0 3
70883: RET
// export function ComExit ( unit ) ; var tmp ; begin
70884: LD_INT 0
70886: PPUSH
70887: PPUSH
// if not IsInUnit ( unit ) then
70888: LD_VAR 0 1
70892: PPUSH
70893: CALL_OW 310
70897: NOT
70898: IFFALSE 70902
// exit ;
70900: GO 70962
// tmp := IsInUnit ( unit ) ;
70902: LD_ADDR_VAR 0 3
70906: PUSH
70907: LD_VAR 0 1
70911: PPUSH
70912: CALL_OW 310
70916: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
70917: LD_VAR 0 3
70921: PPUSH
70922: CALL_OW 247
70926: PUSH
70927: LD_INT 2
70929: EQUAL
70930: IFFALSE 70943
// ComExitVehicle ( unit ) else
70932: LD_VAR 0 1
70936: PPUSH
70937: CALL_OW 121
70941: GO 70952
// ComExitBuilding ( unit ) ;
70943: LD_VAR 0 1
70947: PPUSH
70948: CALL_OW 122
// result := tmp ;
70952: LD_ADDR_VAR 0 2
70956: PUSH
70957: LD_VAR 0 3
70961: ST_TO_ADDR
// end ;
70962: LD_VAR 0 2
70966: RET
// export function ComExitAll ( units ) ; var i ; begin
70967: LD_INT 0
70969: PPUSH
70970: PPUSH
// if not units then
70971: LD_VAR 0 1
70975: NOT
70976: IFFALSE 70980
// exit ;
70978: GO 71006
// for i in units do
70980: LD_ADDR_VAR 0 3
70984: PUSH
70985: LD_VAR 0 1
70989: PUSH
70990: FOR_IN
70991: IFFALSE 71004
// ComExit ( i ) ;
70993: LD_VAR 0 3
70997: PPUSH
70998: CALL 70884 0 1
71002: GO 70990
71004: POP
71005: POP
// end ;
71006: LD_VAR 0 2
71010: RET
// export function ResetHc ; begin
71011: LD_INT 0
71013: PPUSH
// InitHc ;
71014: CALL_OW 19
// hc_importance := 0 ;
71018: LD_ADDR_OWVAR 32
71022: PUSH
71023: LD_INT 0
71025: ST_TO_ADDR
// end ;
71026: LD_VAR 0 1
71030: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
71031: LD_INT 0
71033: PPUSH
71034: PPUSH
71035: PPUSH
// _x := ( x1 + x2 ) div 2 ;
71036: LD_ADDR_VAR 0 6
71040: PUSH
71041: LD_VAR 0 1
71045: PUSH
71046: LD_VAR 0 3
71050: PLUS
71051: PUSH
71052: LD_INT 2
71054: DIV
71055: ST_TO_ADDR
// if _x < 0 then
71056: LD_VAR 0 6
71060: PUSH
71061: LD_INT 0
71063: LESS
71064: IFFALSE 71081
// _x := _x * - 1 ;
71066: LD_ADDR_VAR 0 6
71070: PUSH
71071: LD_VAR 0 6
71075: PUSH
71076: LD_INT 1
71078: NEG
71079: MUL
71080: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
71081: LD_ADDR_VAR 0 7
71085: PUSH
71086: LD_VAR 0 2
71090: PUSH
71091: LD_VAR 0 4
71095: PLUS
71096: PUSH
71097: LD_INT 2
71099: DIV
71100: ST_TO_ADDR
// if _y < 0 then
71101: LD_VAR 0 7
71105: PUSH
71106: LD_INT 0
71108: LESS
71109: IFFALSE 71126
// _y := _y * - 1 ;
71111: LD_ADDR_VAR 0 7
71115: PUSH
71116: LD_VAR 0 7
71120: PUSH
71121: LD_INT 1
71123: NEG
71124: MUL
71125: ST_TO_ADDR
// result := [ _x , _y ] ;
71126: LD_ADDR_VAR 0 5
71130: PUSH
71131: LD_VAR 0 6
71135: PUSH
71136: LD_VAR 0 7
71140: PUSH
71141: EMPTY
71142: LIST
71143: LIST
71144: ST_TO_ADDR
// end ;
71145: LD_VAR 0 5
71149: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
71150: LD_INT 0
71152: PPUSH
71153: PPUSH
71154: PPUSH
71155: PPUSH
// task := GetTaskList ( unit ) ;
71156: LD_ADDR_VAR 0 7
71160: PUSH
71161: LD_VAR 0 1
71165: PPUSH
71166: CALL_OW 437
71170: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
71171: LD_VAR 0 7
71175: NOT
71176: PUSH
71177: LD_VAR 0 1
71181: PPUSH
71182: LD_VAR 0 2
71186: PPUSH
71187: CALL_OW 308
71191: NOT
71192: AND
71193: IFFALSE 71197
// exit ;
71195: GO 71315
// if IsInArea ( unit , area ) then
71197: LD_VAR 0 1
71201: PPUSH
71202: LD_VAR 0 2
71206: PPUSH
71207: CALL_OW 308
71211: IFFALSE 71229
// begin ComMoveToArea ( unit , goAway ) ;
71213: LD_VAR 0 1
71217: PPUSH
71218: LD_VAR 0 3
71222: PPUSH
71223: CALL_OW 113
// exit ;
71227: GO 71315
// end ; if task [ 1 ] [ 1 ] <> M then
71229: LD_VAR 0 7
71233: PUSH
71234: LD_INT 1
71236: ARRAY
71237: PUSH
71238: LD_INT 1
71240: ARRAY
71241: PUSH
71242: LD_STRING M
71244: NONEQUAL
71245: IFFALSE 71249
// exit ;
71247: GO 71315
// x := task [ 1 ] [ 2 ] ;
71249: LD_ADDR_VAR 0 5
71253: PUSH
71254: LD_VAR 0 7
71258: PUSH
71259: LD_INT 1
71261: ARRAY
71262: PUSH
71263: LD_INT 2
71265: ARRAY
71266: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
71267: LD_ADDR_VAR 0 6
71271: PUSH
71272: LD_VAR 0 7
71276: PUSH
71277: LD_INT 1
71279: ARRAY
71280: PUSH
71281: LD_INT 3
71283: ARRAY
71284: ST_TO_ADDR
// if InArea ( x , y , area ) then
71285: LD_VAR 0 5
71289: PPUSH
71290: LD_VAR 0 6
71294: PPUSH
71295: LD_VAR 0 2
71299: PPUSH
71300: CALL_OW 309
71304: IFFALSE 71315
// ComStop ( unit ) ;
71306: LD_VAR 0 1
71310: PPUSH
71311: CALL_OW 141
// end ;
71315: LD_VAR 0 4
71319: RET
// export function Abs ( value ) ; begin
71320: LD_INT 0
71322: PPUSH
// result := value ;
71323: LD_ADDR_VAR 0 2
71327: PUSH
71328: LD_VAR 0 1
71332: ST_TO_ADDR
// if value < 0 then
71333: LD_VAR 0 1
71337: PUSH
71338: LD_INT 0
71340: LESS
71341: IFFALSE 71358
// result := value * - 1 ;
71343: LD_ADDR_VAR 0 2
71347: PUSH
71348: LD_VAR 0 1
71352: PUSH
71353: LD_INT 1
71355: NEG
71356: MUL
71357: ST_TO_ADDR
// end ;
71358: LD_VAR 0 2
71362: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
71363: LD_INT 0
71365: PPUSH
71366: PPUSH
71367: PPUSH
71368: PPUSH
71369: PPUSH
71370: PPUSH
71371: PPUSH
71372: PPUSH
// if not unit or not building then
71373: LD_VAR 0 1
71377: NOT
71378: PUSH
71379: LD_VAR 0 2
71383: NOT
71384: OR
71385: IFFALSE 71389
// exit ;
71387: GO 71615
// x := GetX ( building ) ;
71389: LD_ADDR_VAR 0 4
71393: PUSH
71394: LD_VAR 0 2
71398: PPUSH
71399: CALL_OW 250
71403: ST_TO_ADDR
// y := GetY ( building ) ;
71404: LD_ADDR_VAR 0 6
71408: PUSH
71409: LD_VAR 0 2
71413: PPUSH
71414: CALL_OW 251
71418: ST_TO_ADDR
// d := GetDir ( building ) ;
71419: LD_ADDR_VAR 0 8
71423: PUSH
71424: LD_VAR 0 2
71428: PPUSH
71429: CALL_OW 254
71433: ST_TO_ADDR
// r := 4 ;
71434: LD_ADDR_VAR 0 9
71438: PUSH
71439: LD_INT 4
71441: ST_TO_ADDR
// for i := 1 to 5 do
71442: LD_ADDR_VAR 0 10
71446: PUSH
71447: DOUBLE
71448: LD_INT 1
71450: DEC
71451: ST_TO_ADDR
71452: LD_INT 5
71454: PUSH
71455: FOR_TO
71456: IFFALSE 71613
// begin _x := ShiftX ( x , d , r + i ) ;
71458: LD_ADDR_VAR 0 5
71462: PUSH
71463: LD_VAR 0 4
71467: PPUSH
71468: LD_VAR 0 8
71472: PPUSH
71473: LD_VAR 0 9
71477: PUSH
71478: LD_VAR 0 10
71482: PLUS
71483: PPUSH
71484: CALL_OW 272
71488: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
71489: LD_ADDR_VAR 0 7
71493: PUSH
71494: LD_VAR 0 6
71498: PPUSH
71499: LD_VAR 0 8
71503: PPUSH
71504: LD_VAR 0 9
71508: PUSH
71509: LD_VAR 0 10
71513: PLUS
71514: PPUSH
71515: CALL_OW 273
71519: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
71520: LD_VAR 0 5
71524: PPUSH
71525: LD_VAR 0 7
71529: PPUSH
71530: CALL_OW 488
71534: PUSH
71535: LD_VAR 0 5
71539: PPUSH
71540: LD_VAR 0 7
71544: PPUSH
71545: CALL_OW 428
71549: PPUSH
71550: CALL_OW 247
71554: PUSH
71555: LD_INT 3
71557: PUSH
71558: LD_INT 2
71560: PUSH
71561: EMPTY
71562: LIST
71563: LIST
71564: IN
71565: NOT
71566: AND
71567: IFFALSE 71611
// begin ComMoveXY ( unit , _x , _y ) ;
71569: LD_VAR 0 1
71573: PPUSH
71574: LD_VAR 0 5
71578: PPUSH
71579: LD_VAR 0 7
71583: PPUSH
71584: CALL_OW 111
// result := [ _x , _y ] ;
71588: LD_ADDR_VAR 0 3
71592: PUSH
71593: LD_VAR 0 5
71597: PUSH
71598: LD_VAR 0 7
71602: PUSH
71603: EMPTY
71604: LIST
71605: LIST
71606: ST_TO_ADDR
// exit ;
71607: POP
71608: POP
71609: GO 71615
// end ; end ;
71611: GO 71455
71613: POP
71614: POP
// end ;
71615: LD_VAR 0 3
71619: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
71620: LD_INT 0
71622: PPUSH
71623: PPUSH
71624: PPUSH
// result := 0 ;
71625: LD_ADDR_VAR 0 3
71629: PUSH
71630: LD_INT 0
71632: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
71633: LD_VAR 0 1
71637: PUSH
71638: LD_INT 0
71640: LESS
71641: PUSH
71642: LD_VAR 0 1
71646: PUSH
71647: LD_INT 8
71649: GREATER
71650: OR
71651: PUSH
71652: LD_VAR 0 2
71656: PUSH
71657: LD_INT 0
71659: LESS
71660: OR
71661: PUSH
71662: LD_VAR 0 2
71666: PUSH
71667: LD_INT 8
71669: GREATER
71670: OR
71671: IFFALSE 71675
// exit ;
71673: GO 71750
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
71675: LD_ADDR_VAR 0 4
71679: PUSH
71680: LD_INT 22
71682: PUSH
71683: LD_VAR 0 2
71687: PUSH
71688: EMPTY
71689: LIST
71690: LIST
71691: PPUSH
71692: CALL_OW 69
71696: PUSH
71697: FOR_IN
71698: IFFALSE 71748
// begin un := UnitShoot ( i ) ;
71700: LD_ADDR_VAR 0 5
71704: PUSH
71705: LD_VAR 0 4
71709: PPUSH
71710: CALL_OW 504
71714: ST_TO_ADDR
// if GetSide ( un ) = side1 then
71715: LD_VAR 0 5
71719: PPUSH
71720: CALL_OW 255
71724: PUSH
71725: LD_VAR 0 1
71729: EQUAL
71730: IFFALSE 71746
// begin result := un ;
71732: LD_ADDR_VAR 0 3
71736: PUSH
71737: LD_VAR 0 5
71741: ST_TO_ADDR
// exit ;
71742: POP
71743: POP
71744: GO 71750
// end ; end ;
71746: GO 71697
71748: POP
71749: POP
// end ;
71750: LD_VAR 0 3
71754: RET
// export function GetCargoBay ( units ) ; begin
71755: LD_INT 0
71757: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
71758: LD_ADDR_VAR 0 2
71762: PUSH
71763: LD_VAR 0 1
71767: PPUSH
71768: LD_INT 2
71770: PUSH
71771: LD_INT 34
71773: PUSH
71774: LD_INT 12
71776: PUSH
71777: EMPTY
71778: LIST
71779: LIST
71780: PUSH
71781: LD_INT 34
71783: PUSH
71784: LD_INT 51
71786: PUSH
71787: EMPTY
71788: LIST
71789: LIST
71790: PUSH
71791: LD_INT 34
71793: PUSH
71794: LD_INT 32
71796: PUSH
71797: EMPTY
71798: LIST
71799: LIST
71800: PUSH
71801: LD_INT 34
71803: PUSH
71804: LD_INT 89
71806: PUSH
71807: EMPTY
71808: LIST
71809: LIST
71810: PUSH
71811: EMPTY
71812: LIST
71813: LIST
71814: LIST
71815: LIST
71816: LIST
71817: PPUSH
71818: CALL_OW 72
71822: ST_TO_ADDR
// end ;
71823: LD_VAR 0 2
71827: RET
// export function Negate ( value ) ; begin
71828: LD_INT 0
71830: PPUSH
// result := not value ;
71831: LD_ADDR_VAR 0 2
71835: PUSH
71836: LD_VAR 0 1
71840: NOT
71841: ST_TO_ADDR
// end ;
71842: LD_VAR 0 2
71846: RET
// export function Inc ( value ) ; begin
71847: LD_INT 0
71849: PPUSH
// result := value + 1 ;
71850: LD_ADDR_VAR 0 2
71854: PUSH
71855: LD_VAR 0 1
71859: PUSH
71860: LD_INT 1
71862: PLUS
71863: ST_TO_ADDR
// end ;
71864: LD_VAR 0 2
71868: RET
// export function Dec ( value ) ; begin
71869: LD_INT 0
71871: PPUSH
// result := value - 1 ;
71872: LD_ADDR_VAR 0 2
71876: PUSH
71877: LD_VAR 0 1
71881: PUSH
71882: LD_INT 1
71884: MINUS
71885: ST_TO_ADDR
// end ;
71886: LD_VAR 0 2
71890: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
71891: LD_INT 0
71893: PPUSH
71894: PPUSH
71895: PPUSH
71896: PPUSH
71897: PPUSH
71898: PPUSH
71899: PPUSH
71900: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
71901: LD_VAR 0 1
71905: PPUSH
71906: LD_VAR 0 2
71910: PPUSH
71911: CALL_OW 488
71915: NOT
71916: PUSH
71917: LD_VAR 0 3
71921: PPUSH
71922: LD_VAR 0 4
71926: PPUSH
71927: CALL_OW 488
71931: NOT
71932: OR
71933: IFFALSE 71946
// begin result := - 1 ;
71935: LD_ADDR_VAR 0 5
71939: PUSH
71940: LD_INT 1
71942: NEG
71943: ST_TO_ADDR
// exit ;
71944: GO 72181
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
71946: LD_ADDR_VAR 0 12
71950: PUSH
71951: LD_VAR 0 1
71955: PPUSH
71956: LD_VAR 0 2
71960: PPUSH
71961: LD_VAR 0 3
71965: PPUSH
71966: LD_VAR 0 4
71970: PPUSH
71971: CALL 71031 0 4
71975: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
71976: LD_ADDR_VAR 0 11
71980: PUSH
71981: LD_VAR 0 1
71985: PPUSH
71986: LD_VAR 0 2
71990: PPUSH
71991: LD_VAR 0 12
71995: PUSH
71996: LD_INT 1
71998: ARRAY
71999: PPUSH
72000: LD_VAR 0 12
72004: PUSH
72005: LD_INT 2
72007: ARRAY
72008: PPUSH
72009: CALL_OW 298
72013: ST_TO_ADDR
// distance := 9999 ;
72014: LD_ADDR_VAR 0 10
72018: PUSH
72019: LD_INT 9999
72021: ST_TO_ADDR
// for i := 0 to 5 do
72022: LD_ADDR_VAR 0 6
72026: PUSH
72027: DOUBLE
72028: LD_INT 0
72030: DEC
72031: ST_TO_ADDR
72032: LD_INT 5
72034: PUSH
72035: FOR_TO
72036: IFFALSE 72179
// begin _x := ShiftX ( x1 , i , centerDist ) ;
72038: LD_ADDR_VAR 0 7
72042: PUSH
72043: LD_VAR 0 1
72047: PPUSH
72048: LD_VAR 0 6
72052: PPUSH
72053: LD_VAR 0 11
72057: PPUSH
72058: CALL_OW 272
72062: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
72063: LD_ADDR_VAR 0 8
72067: PUSH
72068: LD_VAR 0 2
72072: PPUSH
72073: LD_VAR 0 6
72077: PPUSH
72078: LD_VAR 0 11
72082: PPUSH
72083: CALL_OW 273
72087: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
72088: LD_VAR 0 7
72092: PPUSH
72093: LD_VAR 0 8
72097: PPUSH
72098: CALL_OW 488
72102: NOT
72103: IFFALSE 72107
// continue ;
72105: GO 72035
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
72107: LD_ADDR_VAR 0 9
72111: PUSH
72112: LD_VAR 0 12
72116: PUSH
72117: LD_INT 1
72119: ARRAY
72120: PPUSH
72121: LD_VAR 0 12
72125: PUSH
72126: LD_INT 2
72128: ARRAY
72129: PPUSH
72130: LD_VAR 0 7
72134: PPUSH
72135: LD_VAR 0 8
72139: PPUSH
72140: CALL_OW 298
72144: ST_TO_ADDR
// if tmp < distance then
72145: LD_VAR 0 9
72149: PUSH
72150: LD_VAR 0 10
72154: LESS
72155: IFFALSE 72177
// begin result := i ;
72157: LD_ADDR_VAR 0 5
72161: PUSH
72162: LD_VAR 0 6
72166: ST_TO_ADDR
// distance := tmp ;
72167: LD_ADDR_VAR 0 10
72171: PUSH
72172: LD_VAR 0 9
72176: ST_TO_ADDR
// end ; end ;
72177: GO 72035
72179: POP
72180: POP
// end ;
72181: LD_VAR 0 5
72185: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
72186: LD_INT 0
72188: PPUSH
72189: PPUSH
// if not driver or not IsInUnit ( driver ) then
72190: LD_VAR 0 1
72194: NOT
72195: PUSH
72196: LD_VAR 0 1
72200: PPUSH
72201: CALL_OW 310
72205: NOT
72206: OR
72207: IFFALSE 72211
// exit ;
72209: GO 72301
// vehicle := IsInUnit ( driver ) ;
72211: LD_ADDR_VAR 0 3
72215: PUSH
72216: LD_VAR 0 1
72220: PPUSH
72221: CALL_OW 310
72225: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72226: LD_VAR 0 1
72230: PPUSH
72231: LD_STRING \
72233: PUSH
72234: LD_INT 0
72236: PUSH
72237: LD_INT 0
72239: PUSH
72240: LD_INT 0
72242: PUSH
72243: LD_INT 0
72245: PUSH
72246: LD_INT 0
72248: PUSH
72249: LD_INT 0
72251: PUSH
72252: EMPTY
72253: LIST
72254: LIST
72255: LIST
72256: LIST
72257: LIST
72258: LIST
72259: LIST
72260: PUSH
72261: LD_STRING E
72263: PUSH
72264: LD_INT 0
72266: PUSH
72267: LD_INT 0
72269: PUSH
72270: LD_VAR 0 3
72274: PUSH
72275: LD_INT 0
72277: PUSH
72278: LD_INT 0
72280: PUSH
72281: LD_INT 0
72283: PUSH
72284: EMPTY
72285: LIST
72286: LIST
72287: LIST
72288: LIST
72289: LIST
72290: LIST
72291: LIST
72292: PUSH
72293: EMPTY
72294: LIST
72295: LIST
72296: PPUSH
72297: CALL_OW 446
// end ;
72301: LD_VAR 0 2
72305: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
72306: LD_INT 0
72308: PPUSH
72309: PPUSH
// if not driver or not IsInUnit ( driver ) then
72310: LD_VAR 0 1
72314: NOT
72315: PUSH
72316: LD_VAR 0 1
72320: PPUSH
72321: CALL_OW 310
72325: NOT
72326: OR
72327: IFFALSE 72331
// exit ;
72329: GO 72421
// vehicle := IsInUnit ( driver ) ;
72331: LD_ADDR_VAR 0 3
72335: PUSH
72336: LD_VAR 0 1
72340: PPUSH
72341: CALL_OW 310
72345: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72346: LD_VAR 0 1
72350: PPUSH
72351: LD_STRING \
72353: PUSH
72354: LD_INT 0
72356: PUSH
72357: LD_INT 0
72359: PUSH
72360: LD_INT 0
72362: PUSH
72363: LD_INT 0
72365: PUSH
72366: LD_INT 0
72368: PUSH
72369: LD_INT 0
72371: PUSH
72372: EMPTY
72373: LIST
72374: LIST
72375: LIST
72376: LIST
72377: LIST
72378: LIST
72379: LIST
72380: PUSH
72381: LD_STRING E
72383: PUSH
72384: LD_INT 0
72386: PUSH
72387: LD_INT 0
72389: PUSH
72390: LD_VAR 0 3
72394: PUSH
72395: LD_INT 0
72397: PUSH
72398: LD_INT 0
72400: PUSH
72401: LD_INT 0
72403: PUSH
72404: EMPTY
72405: LIST
72406: LIST
72407: LIST
72408: LIST
72409: LIST
72410: LIST
72411: LIST
72412: PUSH
72413: EMPTY
72414: LIST
72415: LIST
72416: PPUSH
72417: CALL_OW 447
// end ;
72421: LD_VAR 0 2
72425: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
72426: LD_INT 0
72428: PPUSH
72429: PPUSH
72430: PPUSH
// tmp := [ ] ;
72431: LD_ADDR_VAR 0 5
72435: PUSH
72436: EMPTY
72437: ST_TO_ADDR
// for i in units do
72438: LD_ADDR_VAR 0 4
72442: PUSH
72443: LD_VAR 0 1
72447: PUSH
72448: FOR_IN
72449: IFFALSE 72487
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
72451: LD_ADDR_VAR 0 5
72455: PUSH
72456: LD_VAR 0 5
72460: PPUSH
72461: LD_VAR 0 5
72465: PUSH
72466: LD_INT 1
72468: PLUS
72469: PPUSH
72470: LD_VAR 0 4
72474: PPUSH
72475: CALL_OW 256
72479: PPUSH
72480: CALL_OW 2
72484: ST_TO_ADDR
72485: GO 72448
72487: POP
72488: POP
// if not tmp then
72489: LD_VAR 0 5
72493: NOT
72494: IFFALSE 72498
// exit ;
72496: GO 72546
// if asc then
72498: LD_VAR 0 2
72502: IFFALSE 72526
// result := SortListByListAsc ( units , tmp ) else
72504: LD_ADDR_VAR 0 3
72508: PUSH
72509: LD_VAR 0 1
72513: PPUSH
72514: LD_VAR 0 5
72518: PPUSH
72519: CALL_OW 76
72523: ST_TO_ADDR
72524: GO 72546
// result := SortListByListDesc ( units , tmp ) ;
72526: LD_ADDR_VAR 0 3
72530: PUSH
72531: LD_VAR 0 1
72535: PPUSH
72536: LD_VAR 0 5
72540: PPUSH
72541: CALL_OW 77
72545: ST_TO_ADDR
// end ;
72546: LD_VAR 0 3
72550: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
72551: LD_INT 0
72553: PPUSH
72554: PPUSH
// task := GetTaskList ( mech ) ;
72555: LD_ADDR_VAR 0 4
72559: PUSH
72560: LD_VAR 0 1
72564: PPUSH
72565: CALL_OW 437
72569: ST_TO_ADDR
// if not task then
72570: LD_VAR 0 4
72574: NOT
72575: IFFALSE 72579
// exit ;
72577: GO 72621
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
72579: LD_ADDR_VAR 0 3
72583: PUSH
72584: LD_VAR 0 4
72588: PUSH
72589: LD_INT 1
72591: ARRAY
72592: PUSH
72593: LD_INT 1
72595: ARRAY
72596: PUSH
72597: LD_STRING r
72599: EQUAL
72600: PUSH
72601: LD_VAR 0 4
72605: PUSH
72606: LD_INT 1
72608: ARRAY
72609: PUSH
72610: LD_INT 4
72612: ARRAY
72613: PUSH
72614: LD_VAR 0 2
72618: EQUAL
72619: AND
72620: ST_TO_ADDR
// end ;
72621: LD_VAR 0 3
72625: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
72626: LD_INT 0
72628: PPUSH
// SetDir ( unit , d ) ;
72629: LD_VAR 0 1
72633: PPUSH
72634: LD_VAR 0 4
72638: PPUSH
72639: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
72643: LD_VAR 0 1
72647: PPUSH
72648: LD_VAR 0 2
72652: PPUSH
72653: LD_VAR 0 3
72657: PPUSH
72658: LD_VAR 0 5
72662: PPUSH
72663: CALL_OW 48
// end ;
72667: LD_VAR 0 6
72671: RET
// export function ToNaturalNumber ( number ) ; begin
72672: LD_INT 0
72674: PPUSH
// result := number div 1 ;
72675: LD_ADDR_VAR 0 2
72679: PUSH
72680: LD_VAR 0 1
72684: PUSH
72685: LD_INT 1
72687: DIV
72688: ST_TO_ADDR
// if number < 0 then
72689: LD_VAR 0 1
72693: PUSH
72694: LD_INT 0
72696: LESS
72697: IFFALSE 72707
// result := 0 ;
72699: LD_ADDR_VAR 0 2
72703: PUSH
72704: LD_INT 0
72706: ST_TO_ADDR
// end ;
72707: LD_VAR 0 2
72711: RET
// export function SortByClass ( units , class ) ; var un ; begin
72712: LD_INT 0
72714: PPUSH
72715: PPUSH
// if not units or not class then
72716: LD_VAR 0 1
72720: NOT
72721: PUSH
72722: LD_VAR 0 2
72726: NOT
72727: OR
72728: IFFALSE 72732
// exit ;
72730: GO 72827
// result := [ ] ;
72732: LD_ADDR_VAR 0 3
72736: PUSH
72737: EMPTY
72738: ST_TO_ADDR
// for un in units do
72739: LD_ADDR_VAR 0 4
72743: PUSH
72744: LD_VAR 0 1
72748: PUSH
72749: FOR_IN
72750: IFFALSE 72825
// if GetClass ( un ) = class then
72752: LD_VAR 0 4
72756: PPUSH
72757: CALL_OW 257
72761: PUSH
72762: LD_VAR 0 2
72766: EQUAL
72767: IFFALSE 72794
// result := Insert ( result , 1 , un ) else
72769: LD_ADDR_VAR 0 3
72773: PUSH
72774: LD_VAR 0 3
72778: PPUSH
72779: LD_INT 1
72781: PPUSH
72782: LD_VAR 0 4
72786: PPUSH
72787: CALL_OW 2
72791: ST_TO_ADDR
72792: GO 72823
// result := Replace ( result , result + 1 , un ) ;
72794: LD_ADDR_VAR 0 3
72798: PUSH
72799: LD_VAR 0 3
72803: PPUSH
72804: LD_VAR 0 3
72808: PUSH
72809: LD_INT 1
72811: PLUS
72812: PPUSH
72813: LD_VAR 0 4
72817: PPUSH
72818: CALL_OW 1
72822: ST_TO_ADDR
72823: GO 72749
72825: POP
72826: POP
// end ;
72827: LD_VAR 0 3
72831: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
72832: LD_INT 0
72834: PPUSH
72835: PPUSH
72836: PPUSH
72837: PPUSH
72838: PPUSH
72839: PPUSH
72840: PPUSH
// result := [ ] ;
72841: LD_ADDR_VAR 0 4
72845: PUSH
72846: EMPTY
72847: ST_TO_ADDR
// if x - r < 0 then
72848: LD_VAR 0 1
72852: PUSH
72853: LD_VAR 0 3
72857: MINUS
72858: PUSH
72859: LD_INT 0
72861: LESS
72862: IFFALSE 72874
// min_x := 0 else
72864: LD_ADDR_VAR 0 8
72868: PUSH
72869: LD_INT 0
72871: ST_TO_ADDR
72872: GO 72890
// min_x := x - r ;
72874: LD_ADDR_VAR 0 8
72878: PUSH
72879: LD_VAR 0 1
72883: PUSH
72884: LD_VAR 0 3
72888: MINUS
72889: ST_TO_ADDR
// if y - r < 0 then
72890: LD_VAR 0 2
72894: PUSH
72895: LD_VAR 0 3
72899: MINUS
72900: PUSH
72901: LD_INT 0
72903: LESS
72904: IFFALSE 72916
// min_y := 0 else
72906: LD_ADDR_VAR 0 7
72910: PUSH
72911: LD_INT 0
72913: ST_TO_ADDR
72914: GO 72932
// min_y := y - r ;
72916: LD_ADDR_VAR 0 7
72920: PUSH
72921: LD_VAR 0 2
72925: PUSH
72926: LD_VAR 0 3
72930: MINUS
72931: ST_TO_ADDR
// max_x := x + r ;
72932: LD_ADDR_VAR 0 9
72936: PUSH
72937: LD_VAR 0 1
72941: PUSH
72942: LD_VAR 0 3
72946: PLUS
72947: ST_TO_ADDR
// max_y := y + r ;
72948: LD_ADDR_VAR 0 10
72952: PUSH
72953: LD_VAR 0 2
72957: PUSH
72958: LD_VAR 0 3
72962: PLUS
72963: ST_TO_ADDR
// for _x = min_x to max_x do
72964: LD_ADDR_VAR 0 5
72968: PUSH
72969: DOUBLE
72970: LD_VAR 0 8
72974: DEC
72975: ST_TO_ADDR
72976: LD_VAR 0 9
72980: PUSH
72981: FOR_TO
72982: IFFALSE 73083
// for _y = min_y to max_y do
72984: LD_ADDR_VAR 0 6
72988: PUSH
72989: DOUBLE
72990: LD_VAR 0 7
72994: DEC
72995: ST_TO_ADDR
72996: LD_VAR 0 10
73000: PUSH
73001: FOR_TO
73002: IFFALSE 73079
// begin if not ValidHex ( _x , _y ) then
73004: LD_VAR 0 5
73008: PPUSH
73009: LD_VAR 0 6
73013: PPUSH
73014: CALL_OW 488
73018: NOT
73019: IFFALSE 73023
// continue ;
73021: GO 73001
// if GetResourceTypeXY ( _x , _y ) then
73023: LD_VAR 0 5
73027: PPUSH
73028: LD_VAR 0 6
73032: PPUSH
73033: CALL_OW 283
73037: IFFALSE 73077
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
73039: LD_ADDR_VAR 0 4
73043: PUSH
73044: LD_VAR 0 4
73048: PPUSH
73049: LD_VAR 0 4
73053: PUSH
73054: LD_INT 1
73056: PLUS
73057: PPUSH
73058: LD_VAR 0 5
73062: PUSH
73063: LD_VAR 0 6
73067: PUSH
73068: EMPTY
73069: LIST
73070: LIST
73071: PPUSH
73072: CALL_OW 1
73076: ST_TO_ADDR
// end ;
73077: GO 73001
73079: POP
73080: POP
73081: GO 72981
73083: POP
73084: POP
// end ;
73085: LD_VAR 0 4
73089: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
73090: LD_INT 0
73092: PPUSH
73093: PPUSH
73094: PPUSH
73095: PPUSH
73096: PPUSH
73097: PPUSH
73098: PPUSH
73099: PPUSH
// if not units then
73100: LD_VAR 0 1
73104: NOT
73105: IFFALSE 73109
// exit ;
73107: GO 73633
// result := UnitFilter ( units , [ f_ok ] ) ;
73109: LD_ADDR_VAR 0 3
73113: PUSH
73114: LD_VAR 0 1
73118: PPUSH
73119: LD_INT 50
73121: PUSH
73122: EMPTY
73123: LIST
73124: PPUSH
73125: CALL_OW 72
73129: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
73130: LD_ADDR_VAR 0 8
73134: PUSH
73135: LD_VAR 0 1
73139: PUSH
73140: LD_INT 1
73142: ARRAY
73143: PPUSH
73144: CALL_OW 255
73148: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
73149: LD_ADDR_VAR 0 10
73153: PUSH
73154: LD_INT 29
73156: PUSH
73157: LD_INT 91
73159: PUSH
73160: LD_INT 49
73162: PUSH
73163: EMPTY
73164: LIST
73165: LIST
73166: LIST
73167: ST_TO_ADDR
// if not result then
73168: LD_VAR 0 3
73172: NOT
73173: IFFALSE 73177
// exit ;
73175: GO 73633
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
73177: LD_ADDR_VAR 0 5
73181: PUSH
73182: LD_INT 81
73184: PUSH
73185: LD_VAR 0 8
73189: PUSH
73190: EMPTY
73191: LIST
73192: LIST
73193: PPUSH
73194: CALL_OW 69
73198: ST_TO_ADDR
// for i in result do
73199: LD_ADDR_VAR 0 4
73203: PUSH
73204: LD_VAR 0 3
73208: PUSH
73209: FOR_IN
73210: IFFALSE 73631
// begin tag := GetTag ( i ) + 1 ;
73212: LD_ADDR_VAR 0 9
73216: PUSH
73217: LD_VAR 0 4
73221: PPUSH
73222: CALL_OW 110
73226: PUSH
73227: LD_INT 1
73229: PLUS
73230: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
73231: LD_ADDR_VAR 0 7
73235: PUSH
73236: LD_VAR 0 4
73240: PPUSH
73241: CALL_OW 250
73245: PPUSH
73246: LD_VAR 0 4
73250: PPUSH
73251: CALL_OW 251
73255: PPUSH
73256: LD_INT 6
73258: PPUSH
73259: CALL 72832 0 3
73263: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
73264: LD_VAR 0 4
73268: PPUSH
73269: CALL_OW 247
73273: PUSH
73274: LD_INT 2
73276: EQUAL
73277: PUSH
73278: LD_VAR 0 7
73282: AND
73283: PUSH
73284: LD_VAR 0 4
73288: PPUSH
73289: CALL_OW 264
73293: PUSH
73294: LD_VAR 0 10
73298: IN
73299: NOT
73300: AND
73301: IFFALSE 73340
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
73303: LD_VAR 0 4
73307: PPUSH
73308: LD_VAR 0 7
73312: PUSH
73313: LD_INT 1
73315: ARRAY
73316: PUSH
73317: LD_INT 1
73319: ARRAY
73320: PPUSH
73321: LD_VAR 0 7
73325: PUSH
73326: LD_INT 1
73328: ARRAY
73329: PUSH
73330: LD_INT 2
73332: ARRAY
73333: PPUSH
73334: CALL_OW 116
73338: GO 73629
// if path > tag then
73340: LD_VAR 0 2
73344: PUSH
73345: LD_VAR 0 9
73349: GREATER
73350: IFFALSE 73558
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
73352: LD_ADDR_VAR 0 6
73356: PUSH
73357: LD_VAR 0 5
73361: PPUSH
73362: LD_INT 91
73364: PUSH
73365: LD_VAR 0 4
73369: PUSH
73370: LD_INT 8
73372: PUSH
73373: EMPTY
73374: LIST
73375: LIST
73376: LIST
73377: PPUSH
73378: CALL_OW 72
73382: ST_TO_ADDR
// if nearEnemy then
73383: LD_VAR 0 6
73387: IFFALSE 73456
// begin if GetWeapon ( i ) = ru_time_lapser then
73389: LD_VAR 0 4
73393: PPUSH
73394: CALL_OW 264
73398: PUSH
73399: LD_INT 49
73401: EQUAL
73402: IFFALSE 73430
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
73404: LD_VAR 0 4
73408: PPUSH
73409: LD_VAR 0 6
73413: PPUSH
73414: LD_VAR 0 4
73418: PPUSH
73419: CALL_OW 74
73423: PPUSH
73424: CALL_OW 112
73428: GO 73454
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
73430: LD_VAR 0 4
73434: PPUSH
73435: LD_VAR 0 6
73439: PPUSH
73440: LD_VAR 0 4
73444: PPUSH
73445: CALL_OW 74
73449: PPUSH
73450: CALL 74558 0 2
// end else
73454: GO 73556
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
73456: LD_VAR 0 4
73460: PPUSH
73461: LD_VAR 0 2
73465: PUSH
73466: LD_VAR 0 9
73470: ARRAY
73471: PUSH
73472: LD_INT 1
73474: ARRAY
73475: PPUSH
73476: LD_VAR 0 2
73480: PUSH
73481: LD_VAR 0 9
73485: ARRAY
73486: PUSH
73487: LD_INT 2
73489: ARRAY
73490: PPUSH
73491: CALL_OW 297
73495: PUSH
73496: LD_INT 6
73498: GREATER
73499: IFFALSE 73542
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
73501: LD_VAR 0 4
73505: PPUSH
73506: LD_VAR 0 2
73510: PUSH
73511: LD_VAR 0 9
73515: ARRAY
73516: PUSH
73517: LD_INT 1
73519: ARRAY
73520: PPUSH
73521: LD_VAR 0 2
73525: PUSH
73526: LD_VAR 0 9
73530: ARRAY
73531: PUSH
73532: LD_INT 2
73534: ARRAY
73535: PPUSH
73536: CALL_OW 114
73540: GO 73556
// SetTag ( i , tag ) ;
73542: LD_VAR 0 4
73546: PPUSH
73547: LD_VAR 0 9
73551: PPUSH
73552: CALL_OW 109
// end else
73556: GO 73629
// if enemy then
73558: LD_VAR 0 5
73562: IFFALSE 73629
// begin if GetWeapon ( i ) = ru_time_lapser then
73564: LD_VAR 0 4
73568: PPUSH
73569: CALL_OW 264
73573: PUSH
73574: LD_INT 49
73576: EQUAL
73577: IFFALSE 73605
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
73579: LD_VAR 0 4
73583: PPUSH
73584: LD_VAR 0 5
73588: PPUSH
73589: LD_VAR 0 4
73593: PPUSH
73594: CALL_OW 74
73598: PPUSH
73599: CALL_OW 112
73603: GO 73629
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
73605: LD_VAR 0 4
73609: PPUSH
73610: LD_VAR 0 5
73614: PPUSH
73615: LD_VAR 0 4
73619: PPUSH
73620: CALL_OW 74
73624: PPUSH
73625: CALL 74558 0 2
// end ; end ;
73629: GO 73209
73631: POP
73632: POP
// end ;
73633: LD_VAR 0 3
73637: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
73638: LD_INT 0
73640: PPUSH
73641: PPUSH
73642: PPUSH
// if not unit or IsInUnit ( unit ) then
73643: LD_VAR 0 1
73647: NOT
73648: PUSH
73649: LD_VAR 0 1
73653: PPUSH
73654: CALL_OW 310
73658: OR
73659: IFFALSE 73663
// exit ;
73661: GO 73754
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
73663: LD_ADDR_VAR 0 4
73667: PUSH
73668: LD_VAR 0 1
73672: PPUSH
73673: CALL_OW 250
73677: PPUSH
73678: LD_VAR 0 2
73682: PPUSH
73683: LD_INT 1
73685: PPUSH
73686: CALL_OW 272
73690: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
73691: LD_ADDR_VAR 0 5
73695: PUSH
73696: LD_VAR 0 1
73700: PPUSH
73701: CALL_OW 251
73705: PPUSH
73706: LD_VAR 0 2
73710: PPUSH
73711: LD_INT 1
73713: PPUSH
73714: CALL_OW 273
73718: ST_TO_ADDR
// if ValidHex ( x , y ) then
73719: LD_VAR 0 4
73723: PPUSH
73724: LD_VAR 0 5
73728: PPUSH
73729: CALL_OW 488
73733: IFFALSE 73754
// ComTurnXY ( unit , x , y ) ;
73735: LD_VAR 0 1
73739: PPUSH
73740: LD_VAR 0 4
73744: PPUSH
73745: LD_VAR 0 5
73749: PPUSH
73750: CALL_OW 118
// end ;
73754: LD_VAR 0 3
73758: RET
// export function SeeUnits ( side , units ) ; var i ; begin
73759: LD_INT 0
73761: PPUSH
73762: PPUSH
// result := false ;
73763: LD_ADDR_VAR 0 3
73767: PUSH
73768: LD_INT 0
73770: ST_TO_ADDR
// if not units then
73771: LD_VAR 0 2
73775: NOT
73776: IFFALSE 73780
// exit ;
73778: GO 73825
// for i in units do
73780: LD_ADDR_VAR 0 4
73784: PUSH
73785: LD_VAR 0 2
73789: PUSH
73790: FOR_IN
73791: IFFALSE 73823
// if See ( side , i ) then
73793: LD_VAR 0 1
73797: PPUSH
73798: LD_VAR 0 4
73802: PPUSH
73803: CALL_OW 292
73807: IFFALSE 73821
// begin result := true ;
73809: LD_ADDR_VAR 0 3
73813: PUSH
73814: LD_INT 1
73816: ST_TO_ADDR
// exit ;
73817: POP
73818: POP
73819: GO 73825
// end ;
73821: GO 73790
73823: POP
73824: POP
// end ;
73825: LD_VAR 0 3
73829: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
73830: LD_INT 0
73832: PPUSH
73833: PPUSH
73834: PPUSH
73835: PPUSH
// if not unit or not points then
73836: LD_VAR 0 1
73840: NOT
73841: PUSH
73842: LD_VAR 0 2
73846: NOT
73847: OR
73848: IFFALSE 73852
// exit ;
73850: GO 73942
// dist := 99999 ;
73852: LD_ADDR_VAR 0 5
73856: PUSH
73857: LD_INT 99999
73859: ST_TO_ADDR
// for i in points do
73860: LD_ADDR_VAR 0 4
73864: PUSH
73865: LD_VAR 0 2
73869: PUSH
73870: FOR_IN
73871: IFFALSE 73940
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
73873: LD_ADDR_VAR 0 6
73877: PUSH
73878: LD_VAR 0 1
73882: PPUSH
73883: LD_VAR 0 4
73887: PUSH
73888: LD_INT 1
73890: ARRAY
73891: PPUSH
73892: LD_VAR 0 4
73896: PUSH
73897: LD_INT 2
73899: ARRAY
73900: PPUSH
73901: CALL_OW 297
73905: ST_TO_ADDR
// if tmpDist < dist then
73906: LD_VAR 0 6
73910: PUSH
73911: LD_VAR 0 5
73915: LESS
73916: IFFALSE 73938
// begin result := i ;
73918: LD_ADDR_VAR 0 3
73922: PUSH
73923: LD_VAR 0 4
73927: ST_TO_ADDR
// dist := tmpDist ;
73928: LD_ADDR_VAR 0 5
73932: PUSH
73933: LD_VAR 0 6
73937: ST_TO_ADDR
// end ; end ;
73938: GO 73870
73940: POP
73941: POP
// end ;
73942: LD_VAR 0 3
73946: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
73947: LD_INT 0
73949: PPUSH
// uc_side := side ;
73950: LD_ADDR_OWVAR 20
73954: PUSH
73955: LD_VAR 0 1
73959: ST_TO_ADDR
// uc_nation := 3 ;
73960: LD_ADDR_OWVAR 21
73964: PUSH
73965: LD_INT 3
73967: ST_TO_ADDR
// vc_chassis := 25 ;
73968: LD_ADDR_OWVAR 37
73972: PUSH
73973: LD_INT 25
73975: ST_TO_ADDR
// vc_engine := engine_siberite ;
73976: LD_ADDR_OWVAR 39
73980: PUSH
73981: LD_INT 3
73983: ST_TO_ADDR
// vc_control := control_computer ;
73984: LD_ADDR_OWVAR 38
73988: PUSH
73989: LD_INT 3
73991: ST_TO_ADDR
// vc_weapon := 59 ;
73992: LD_ADDR_OWVAR 40
73996: PUSH
73997: LD_INT 59
73999: ST_TO_ADDR
// result := CreateVehicle ;
74000: LD_ADDR_VAR 0 5
74004: PUSH
74005: CALL_OW 45
74009: ST_TO_ADDR
// SetDir ( result , d ) ;
74010: LD_VAR 0 5
74014: PPUSH
74015: LD_VAR 0 4
74019: PPUSH
74020: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
74024: LD_VAR 0 5
74028: PPUSH
74029: LD_VAR 0 2
74033: PPUSH
74034: LD_VAR 0 3
74038: PPUSH
74039: LD_INT 0
74041: PPUSH
74042: CALL_OW 48
// end ;
74046: LD_VAR 0 5
74050: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
74051: LD_INT 0
74053: PPUSH
74054: PPUSH
74055: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
74056: LD_ADDR_VAR 0 2
74060: PUSH
74061: LD_INT 0
74063: PUSH
74064: LD_INT 0
74066: PUSH
74067: LD_INT 0
74069: PUSH
74070: LD_INT 0
74072: PUSH
74073: EMPTY
74074: LIST
74075: LIST
74076: LIST
74077: LIST
74078: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
74079: LD_VAR 0 1
74083: NOT
74084: PUSH
74085: LD_VAR 0 1
74089: PPUSH
74090: CALL_OW 264
74094: PUSH
74095: LD_INT 12
74097: PUSH
74098: LD_INT 51
74100: PUSH
74101: LD_INT 32
74103: PUSH
74104: LD_INT 89
74106: PUSH
74107: EMPTY
74108: LIST
74109: LIST
74110: LIST
74111: LIST
74112: IN
74113: NOT
74114: OR
74115: IFFALSE 74119
// exit ;
74117: GO 74217
// for i := 1 to 3 do
74119: LD_ADDR_VAR 0 3
74123: PUSH
74124: DOUBLE
74125: LD_INT 1
74127: DEC
74128: ST_TO_ADDR
74129: LD_INT 3
74131: PUSH
74132: FOR_TO
74133: IFFALSE 74215
// begin tmp := GetCargo ( cargo , i ) ;
74135: LD_ADDR_VAR 0 4
74139: PUSH
74140: LD_VAR 0 1
74144: PPUSH
74145: LD_VAR 0 3
74149: PPUSH
74150: CALL_OW 289
74154: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
74155: LD_ADDR_VAR 0 2
74159: PUSH
74160: LD_VAR 0 2
74164: PPUSH
74165: LD_VAR 0 3
74169: PPUSH
74170: LD_VAR 0 4
74174: PPUSH
74175: CALL_OW 1
74179: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
74180: LD_ADDR_VAR 0 2
74184: PUSH
74185: LD_VAR 0 2
74189: PPUSH
74190: LD_INT 4
74192: PPUSH
74193: LD_VAR 0 2
74197: PUSH
74198: LD_INT 4
74200: ARRAY
74201: PUSH
74202: LD_VAR 0 4
74206: PLUS
74207: PPUSH
74208: CALL_OW 1
74212: ST_TO_ADDR
// end ;
74213: GO 74132
74215: POP
74216: POP
// end ;
74217: LD_VAR 0 2
74221: RET
// export function Length ( array ) ; begin
74222: LD_INT 0
74224: PPUSH
// result := array + 0 ;
74225: LD_ADDR_VAR 0 2
74229: PUSH
74230: LD_VAR 0 1
74234: PUSH
74235: LD_INT 0
74237: PLUS
74238: ST_TO_ADDR
// end ;
74239: LD_VAR 0 2
74243: RET
// export function PrepareArray ( array ) ; begin
74244: LD_INT 0
74246: PPUSH
// result := array diff 0 ;
74247: LD_ADDR_VAR 0 2
74251: PUSH
74252: LD_VAR 0 1
74256: PUSH
74257: LD_INT 0
74259: DIFF
74260: ST_TO_ADDR
// if not result [ 1 ] then
74261: LD_VAR 0 2
74265: PUSH
74266: LD_INT 1
74268: ARRAY
74269: NOT
74270: IFFALSE 74290
// result := Delete ( result , 1 ) ;
74272: LD_ADDR_VAR 0 2
74276: PUSH
74277: LD_VAR 0 2
74281: PPUSH
74282: LD_INT 1
74284: PPUSH
74285: CALL_OW 3
74289: ST_TO_ADDR
// end ;
74290: LD_VAR 0 2
74294: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
74295: LD_INT 0
74297: PPUSH
74298: PPUSH
74299: PPUSH
74300: PPUSH
// sibRocketRange := 25 ;
74301: LD_ADDR_VAR 0 6
74305: PUSH
74306: LD_INT 25
74308: ST_TO_ADDR
// result := false ;
74309: LD_ADDR_VAR 0 4
74313: PUSH
74314: LD_INT 0
74316: ST_TO_ADDR
// for i := 0 to 5 do
74317: LD_ADDR_VAR 0 5
74321: PUSH
74322: DOUBLE
74323: LD_INT 0
74325: DEC
74326: ST_TO_ADDR
74327: LD_INT 5
74329: PUSH
74330: FOR_TO
74331: IFFALSE 74398
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
74333: LD_VAR 0 1
74337: PPUSH
74338: LD_VAR 0 5
74342: PPUSH
74343: LD_VAR 0 6
74347: PPUSH
74348: CALL_OW 272
74352: PPUSH
74353: LD_VAR 0 2
74357: PPUSH
74358: LD_VAR 0 5
74362: PPUSH
74363: LD_VAR 0 6
74367: PPUSH
74368: CALL_OW 273
74372: PPUSH
74373: LD_VAR 0 3
74377: PPUSH
74378: CALL_OW 309
74382: IFFALSE 74396
// begin result := true ;
74384: LD_ADDR_VAR 0 4
74388: PUSH
74389: LD_INT 1
74391: ST_TO_ADDR
// exit ;
74392: POP
74393: POP
74394: GO 74400
// end ;
74396: GO 74330
74398: POP
74399: POP
// end ;
74400: LD_VAR 0 4
74404: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
74405: LD_INT 0
74407: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
74408: LD_VAR 0 1
74412: PPUSH
74413: LD_VAR 0 2
74417: PPUSH
74418: LD_INT 0
74420: PPUSH
74421: LD_INT 0
74423: PPUSH
74424: LD_INT 1
74426: PPUSH
74427: LD_INT 0
74429: PPUSH
74430: CALL_OW 587
// end ;
74434: LD_VAR 0 3
74438: RET
// export function CenterOnNow ( unit ) ; begin
74439: LD_INT 0
74441: PPUSH
// result := IsInUnit ( unit ) ;
74442: LD_ADDR_VAR 0 2
74446: PUSH
74447: LD_VAR 0 1
74451: PPUSH
74452: CALL_OW 310
74456: ST_TO_ADDR
// if not result then
74457: LD_VAR 0 2
74461: NOT
74462: IFFALSE 74474
// result := unit ;
74464: LD_ADDR_VAR 0 2
74468: PUSH
74469: LD_VAR 0 1
74473: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
74474: LD_VAR 0 1
74478: PPUSH
74479: CALL_OW 87
// end ;
74483: LD_VAR 0 2
74487: RET
// export function ComMoveHex ( unit , hex ) ; begin
74488: LD_INT 0
74490: PPUSH
// if not hex then
74491: LD_VAR 0 2
74495: NOT
74496: IFFALSE 74500
// exit ;
74498: GO 74553
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
74500: LD_VAR 0 2
74504: PUSH
74505: LD_INT 1
74507: ARRAY
74508: PPUSH
74509: LD_VAR 0 2
74513: PUSH
74514: LD_INT 2
74516: ARRAY
74517: PPUSH
74518: CALL_OW 428
74522: IFFALSE 74526
// exit ;
74524: GO 74553
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
74526: LD_VAR 0 1
74530: PPUSH
74531: LD_VAR 0 2
74535: PUSH
74536: LD_INT 1
74538: ARRAY
74539: PPUSH
74540: LD_VAR 0 2
74544: PUSH
74545: LD_INT 2
74547: ARRAY
74548: PPUSH
74549: CALL_OW 111
// end ;
74553: LD_VAR 0 3
74557: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
74558: LD_INT 0
74560: PPUSH
74561: PPUSH
74562: PPUSH
// if not unit or not enemy then
74563: LD_VAR 0 1
74567: NOT
74568: PUSH
74569: LD_VAR 0 2
74573: NOT
74574: OR
74575: IFFALSE 74579
// exit ;
74577: GO 74703
// x := GetX ( enemy ) ;
74579: LD_ADDR_VAR 0 4
74583: PUSH
74584: LD_VAR 0 2
74588: PPUSH
74589: CALL_OW 250
74593: ST_TO_ADDR
// y := GetY ( enemy ) ;
74594: LD_ADDR_VAR 0 5
74598: PUSH
74599: LD_VAR 0 2
74603: PPUSH
74604: CALL_OW 251
74608: ST_TO_ADDR
// if ValidHex ( x , y ) then
74609: LD_VAR 0 4
74613: PPUSH
74614: LD_VAR 0 5
74618: PPUSH
74619: CALL_OW 488
74623: IFFALSE 74703
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
74625: LD_VAR 0 2
74629: PPUSH
74630: CALL_OW 247
74634: PUSH
74635: LD_INT 3
74637: PUSH
74638: LD_INT 2
74640: PUSH
74641: EMPTY
74642: LIST
74643: LIST
74644: IN
74645: PUSH
74646: LD_VAR 0 1
74650: PPUSH
74651: CALL_OW 255
74655: PPUSH
74656: LD_VAR 0 2
74660: PPUSH
74661: CALL_OW 292
74665: AND
74666: IFFALSE 74684
// ComAttackUnit ( unit , enemy ) else
74668: LD_VAR 0 1
74672: PPUSH
74673: LD_VAR 0 2
74677: PPUSH
74678: CALL_OW 115
74682: GO 74703
// ComAgressiveMove ( unit , x , y ) ;
74684: LD_VAR 0 1
74688: PPUSH
74689: LD_VAR 0 4
74693: PPUSH
74694: LD_VAR 0 5
74698: PPUSH
74699: CALL_OW 114
// end ; end_of_file
74703: LD_VAR 0 3
74707: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
74708: LD_VAR 0 1
74712: PUSH
74713: LD_INT 200
74715: DOUBLE
74716: GREATEREQUAL
74717: IFFALSE 74725
74719: LD_INT 299
74721: DOUBLE
74722: LESSEQUAL
74723: IFTRUE 74727
74725: GO 74759
74727: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
74728: LD_VAR 0 1
74732: PPUSH
74733: LD_VAR 0 2
74737: PPUSH
74738: LD_VAR 0 3
74742: PPUSH
74743: LD_VAR 0 4
74747: PPUSH
74748: LD_VAR 0 5
74752: PPUSH
74753: CALL 28432 0 5
74757: GO 74836
74759: LD_INT 300
74761: DOUBLE
74762: GREATEREQUAL
74763: IFFALSE 74771
74765: LD_INT 399
74767: DOUBLE
74768: LESSEQUAL
74769: IFTRUE 74773
74771: GO 74835
74773: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
74774: LD_VAR 0 1
74778: PPUSH
74779: LD_VAR 0 2
74783: PPUSH
74784: LD_VAR 0 3
74788: PPUSH
74789: LD_VAR 0 4
74793: PPUSH
74794: LD_VAR 0 5
74798: PPUSH
74799: LD_VAR 0 6
74803: PPUSH
74804: LD_VAR 0 7
74808: PPUSH
74809: LD_VAR 0 8
74813: PPUSH
74814: LD_VAR 0 9
74818: PPUSH
74819: LD_VAR 0 10
74823: PPUSH
74824: LD_VAR 0 11
74828: PPUSH
74829: CALL 24757 0 11
74833: GO 74836
74835: POP
// end ;
74836: PPOPN 11
74838: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
74839: LD_VAR 0 1
74843: PPUSH
74844: LD_VAR 0 2
74848: PPUSH
74849: LD_VAR 0 3
74853: PPUSH
74854: LD_VAR 0 4
74858: PPUSH
74859: LD_VAR 0 5
74863: PPUSH
74864: CALL 28168 0 5
// end ; end_of_file
74868: PPOPN 5
74870: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
74871: LD_VAR 0 1
74875: PPUSH
74876: LD_VAR 0 2
74880: PPUSH
74881: LD_VAR 0 3
74885: PPUSH
74886: LD_VAR 0 4
74890: PPUSH
74891: LD_VAR 0 5
74895: PPUSH
74896: LD_VAR 0 6
74900: PPUSH
74901: CALL 12409 0 6
// end ;
74905: PPOPN 6
74907: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
74908: LD_INT 0
74910: PPUSH
// begin if not units then
74911: LD_VAR 0 1
74915: NOT
74916: IFFALSE 74920
// exit ;
74918: GO 74920
// end ;
74920: PPOPN 7
74922: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
74923: CALL 12313 0 0
// end ;
74927: PPOPN 1
74929: END
