// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// Init ;
   8: CALL 44 0 0
// DebugMode ;
  12: CALL 253 0 0
// AnimateTrees ( true ) ;
  16: LD_INT 1
  18: PPUSH
  19: CALL_OW 573
// CreateNature ;
  23: CALL 1687 0 0
// PrepareRussians ;
  27: CALL 4697 0 0
// PrepareAmericans ;
  31: CALL 3567 0 0
// Action ;
  35: CALL 8577 0 0
// SaveForQuickRestart ;
  39: CALL_OW 22
// end ;
  43: END
// export debug ; export mission_prev_prefix , mission_prefix ; export buildings_counter , time_to_end , can_end , must_end , kill_counter ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// mission_prefix := 07c_ ;
  55: LD_ADDR_EXP 3
  59: PUSH
  60: LD_STRING 07c_
  62: ST_TO_ADDR
// mission_prev_prefix := 07_ ;
  63: LD_ADDR_EXP 2
  67: PUSH
  68: LD_STRING 07_
  70: ST_TO_ADDR
// buildings_counter := 0 ;
  71: LD_ADDR_EXP 4
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// time_to_end := [ [ 32 32$00 , 29 29$00 , 26 26$00 ] [ Difficulty ] , [ 38 38$00 , 35 35$00 , 32 32$00 ] [ Difficulty ] , [ 44 44$00 , 41 41$00 , 38 38$00 ] [ Difficulty ] ] ;
  79: LD_ADDR_EXP 5
  83: PUSH
  84: LD_INT 67200
  86: PUSH
  87: LD_INT 60900
  89: PUSH
  90: LD_INT 54600
  92: PUSH
  93: EMPTY
  94: LIST
  95: LIST
  96: LIST
  97: PUSH
  98: LD_OWVAR 67
 102: ARRAY
 103: PUSH
 104: LD_INT 79800
 106: PUSH
 107: LD_INT 73500
 109: PUSH
 110: LD_INT 67200
 112: PUSH
 113: EMPTY
 114: LIST
 115: LIST
 116: LIST
 117: PUSH
 118: LD_OWVAR 67
 122: ARRAY
 123: PUSH
 124: LD_INT 92400
 126: PUSH
 127: LD_INT 86100
 129: PUSH
 130: LD_INT 79800
 132: PUSH
 133: EMPTY
 134: LIST
 135: LIST
 136: LIST
 137: PUSH
 138: LD_OWVAR 67
 142: ARRAY
 143: PUSH
 144: EMPTY
 145: LIST
 146: LIST
 147: LIST
 148: ST_TO_ADDR
// can_end := false ;
 149: LD_ADDR_EXP 6
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// must_end := false ;
 157: LD_ADDR_EXP 7
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// kill_counter := 0 ;
 165: LD_ADDR_EXP 8
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// end ;
 173: LD_VAR 0 1
 177: RET
// every 0 0$01 trigger not debug do
 178: LD_EXP 1
 182: NOT
 183: IFFALSE 252
 185: GO 187
 187: DISABLE
// begin enable ;
 188: ENABLE
// if not must_end then
 189: LD_EXP 7
 193: NOT
 194: IFFALSE 215
// display_strings := [ #Am07-1 , tick ] else
 196: LD_ADDR_OWVAR 47
 200: PUSH
 201: LD_STRING #Am07-1
 203: PUSH
 204: LD_OWVAR 1
 208: PUSH
 209: EMPTY
 210: LIST
 211: LIST
 212: ST_TO_ADDR
 213: GO 252
// display_strings := [ #Am07-1 , tick , #Am07-2 , time_to_end [ 3 ] - tick ] ;
 215: LD_ADDR_OWVAR 47
 219: PUSH
 220: LD_STRING #Am07-1
 222: PUSH
 223: LD_OWVAR 1
 227: PUSH
 228: LD_STRING #Am07-2
 230: PUSH
 231: LD_EXP 5
 235: PUSH
 236: LD_INT 3
 238: ARRAY
 239: PUSH
 240: LD_OWVAR 1
 244: MINUS
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: LIST
 250: LIST
 251: ST_TO_ADDR
// end ;
 252: END
// function DebugMode ; var i ; begin
 253: LD_INT 0
 255: PPUSH
 256: PPUSH
// if not debug then
 257: LD_EXP 1
 261: NOT
 262: IFFALSE 266
// exit ;
 264: GO 273
// FogOff ( 1 ) ;
 266: LD_INT 1
 268: PPUSH
 269: CALL_OW 344
// end ;
 273: LD_VAR 0 1
 277: RET
// every 3 trigger debug do var i , filter ;
 278: LD_EXP 1
 282: IFFALSE 371
 284: GO 286
 286: DISABLE
 287: LD_INT 0
 289: PPUSH
 290: PPUSH
// begin enable ;
 291: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 500 ] ] ] ) ;
 292: LD_ADDR_VAR 0 2
 296: PUSH
 297: LD_INT 22
 299: PUSH
 300: LD_INT 1
 302: PUSH
 303: EMPTY
 304: LIST
 305: LIST
 306: PUSH
 307: LD_INT 3
 309: PUSH
 310: LD_INT 24
 312: PUSH
 313: LD_INT 500
 315: PUSH
 316: EMPTY
 317: LIST
 318: LIST
 319: PUSH
 320: EMPTY
 321: LIST
 322: LIST
 323: PUSH
 324: EMPTY
 325: LIST
 326: LIST
 327: PPUSH
 328: CALL_OW 69
 332: ST_TO_ADDR
// if not filter then
 333: LD_VAR 0 2
 337: NOT
 338: IFFALSE 342
// exit ;
 340: GO 371
// for i in filter do
 342: LD_ADDR_VAR 0 1
 346: PUSH
 347: LD_VAR 0 2
 351: PUSH
 352: FOR_IN
 353: IFFALSE 369
// SetLives ( i , 1000 ) ;
 355: LD_VAR 0 1
 359: PPUSH
 360: LD_INT 1000
 362: PPUSH
 363: CALL_OW 234
 367: GO 352
 369: POP
 370: POP
// end ;
 371: PPOPN 2
 373: END
// every 0 0$1 trigger kill_counter >= 20 do
 374: LD_EXP 8
 378: PUSH
 379: LD_INT 20
 381: GREATEREQUAL
 382: IFFALSE 394
 384: GO 386
 386: DISABLE
// SetAchievement ( ACH_HITMAN ) ;
 387: LD_STRING ACH_HITMAN
 389: PPUSH
 390: CALL_OW 543
 394: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) >= 3 do
 395: LD_INT 22
 397: PUSH
 398: LD_INT 1
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: PUSH
 405: LD_INT 23
 407: PUSH
 408: LD_INT 3
 410: PUSH
 411: EMPTY
 412: LIST
 413: LIST
 414: PUSH
 415: LD_INT 21
 417: PUSH
 418: LD_INT 2
 420: PUSH
 421: EMPTY
 422: LIST
 423: LIST
 424: PUSH
 425: EMPTY
 426: LIST
 427: LIST
 428: LIST
 429: PPUSH
 430: CALL_OW 69
 434: PUSH
 435: LD_INT 3
 437: GREATEREQUAL
 438: IFFALSE 450
 440: GO 442
 442: DISABLE
// SetAchievement ( ACH_TANKACE ) ;
 443: LD_STRING ACH_TANKACE
 445: PPUSH
 446: CALL_OW 543
 450: END
// every 0 0$1 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) = 0 do
 451: LD_INT 2
 453: PUSH
 454: LD_INT 30
 456: PUSH
 457: LD_INT 0
 459: PUSH
 460: EMPTY
 461: LIST
 462: LIST
 463: PUSH
 464: LD_INT 30
 466: PUSH
 467: LD_INT 1
 469: PUSH
 470: EMPTY
 471: LIST
 472: LIST
 473: PUSH
 474: EMPTY
 475: LIST
 476: LIST
 477: LIST
 478: PPUSH
 479: CALL_OW 69
 483: PUSH
 484: LD_INT 0
 486: EQUAL
 487: IFFALSE 499
 489: GO 491
 491: DISABLE
// SetAchievement ( ACH_COMMANDO ) ; end_of_file
 492: LD_STRING ACH_COMMANDO
 494: PPUSH
 495: CALL_OW 543
 499: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 500: LD_INT 0
 502: PPUSH
// uc_side := side ;
 503: LD_ADDR_OWVAR 20
 507: PUSH
 508: LD_VAR 0 1
 512: ST_TO_ADDR
// uc_nation := nation ;
 513: LD_ADDR_OWVAR 21
 517: PUSH
 518: LD_VAR 0 2
 522: ST_TO_ADDR
// vc_chassis := chassis ;
 523: LD_ADDR_OWVAR 37
 527: PUSH
 528: LD_VAR 0 3
 532: ST_TO_ADDR
// vc_engine := engine ;
 533: LD_ADDR_OWVAR 39
 537: PUSH
 538: LD_VAR 0 4
 542: ST_TO_ADDR
// vc_control := control ;
 543: LD_ADDR_OWVAR 38
 547: PUSH
 548: LD_VAR 0 5
 552: ST_TO_ADDR
// vc_weapon := weapon ;
 553: LD_ADDR_OWVAR 40
 557: PUSH
 558: LD_VAR 0 6
 562: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 563: LD_ADDR_OWVAR 41
 567: PUSH
 568: LD_VAR 0 7
 572: ST_TO_ADDR
// result := CreateVehicle ;
 573: LD_ADDR_VAR 0 8
 577: PUSH
 578: CALL_OW 45
 582: ST_TO_ADDR
// end ;
 583: LD_VAR 0 8
 587: RET
// export function GetRandom ( sex ) ; var i , filter ; begin
 588: LD_INT 0
 590: PPUSH
 591: PPUSH
 592: PPUSH
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] ;
 593: LD_ADDR_VAR 0 4
 597: PUSH
 598: LD_INT 22
 600: PUSH
 601: LD_INT 1
 603: PUSH
 604: EMPTY
 605: LIST
 606: LIST
 607: PUSH
 608: LD_INT 21
 610: PUSH
 611: LD_INT 1
 613: PUSH
 614: EMPTY
 615: LIST
 616: LIST
 617: PUSH
 618: LD_INT 50
 620: PUSH
 621: EMPTY
 622: LIST
 623: PUSH
 624: EMPTY
 625: LIST
 626: LIST
 627: LIST
 628: PPUSH
 629: CALL_OW 69
 633: PUSH
 634: LD_EXP 9
 638: PUSH
 639: LD_EXP 10
 643: PUSH
 644: LD_EXP 11
 648: PUSH
 649: LD_EXP 12
 653: PUSH
 654: LD_EXP 13
 658: PUSH
 659: LD_EXP 14
 663: PUSH
 664: LD_EXP 15
 668: PUSH
 669: LD_EXP 16
 673: PUSH
 674: LD_EXP 18
 678: PUSH
 679: LD_EXP 17
 683: PUSH
 684: EMPTY
 685: LIST
 686: LIST
 687: LIST
 688: LIST
 689: LIST
 690: LIST
 691: LIST
 692: LIST
 693: LIST
 694: LIST
 695: DIFF
 696: ST_TO_ADDR
// if not filter then
 697: LD_VAR 0 4
 701: NOT
 702: IFFALSE 706
// exit ;
 704: GO 733
// result := UnitFilter ( filter , [ f_sex , sex ] ) ;
 706: LD_ADDR_VAR 0 2
 710: PUSH
 711: LD_VAR 0 4
 715: PPUSH
 716: LD_INT 26
 718: PUSH
 719: LD_VAR 0 1
 723: PUSH
 724: EMPTY
 725: LIST
 726: LIST
 727: PPUSH
 728: CALL_OW 72
 732: ST_TO_ADDR
// end ;
 733: LD_VAR 0 2
 737: RET
// export function SayX ( units , ident ) ; var i ; begin
 738: LD_INT 0
 740: PPUSH
 741: PPUSH
// result := false ;
 742: LD_ADDR_VAR 0 3
 746: PUSH
 747: LD_INT 0
 749: ST_TO_ADDR
// if not units then
 750: LD_VAR 0 1
 754: NOT
 755: IFFALSE 759
// exit ;
 757: GO 813
// for i in units do
 759: LD_ADDR_VAR 0 4
 763: PUSH
 764: LD_VAR 0 1
 768: PUSH
 769: FOR_IN
 770: IFFALSE 811
// if IsOk ( i ) then
 772: LD_VAR 0 4
 776: PPUSH
 777: CALL_OW 302
 781: IFFALSE 809
// begin Say ( i , ident ) ;
 783: LD_VAR 0 4
 787: PPUSH
 788: LD_VAR 0 2
 792: PPUSH
 793: CALL_OW 88
// result := i ;
 797: LD_ADDR_VAR 0 3
 801: PUSH
 802: LD_VAR 0 4
 806: ST_TO_ADDR
// break ;
 807: GO 811
// end ;
 809: GO 769
 811: POP
 812: POP
// end ;
 813: LD_VAR 0 3
 817: RET
// export function GoToAnotherTower ( un , b , x , y ) ; var i , filter , t , side ; begin
 818: LD_INT 0
 820: PPUSH
 821: PPUSH
 822: PPUSH
 823: PPUSH
 824: PPUSH
// if not un or not IsOk ( un ) then
 825: LD_VAR 0 1
 829: NOT
 830: PUSH
 831: LD_VAR 0 1
 835: PPUSH
 836: CALL_OW 302
 840: NOT
 841: OR
 842: IFFALSE 846
// exit ;
 844: GO 1292
// side := GetSide ( un ) ;
 846: LD_ADDR_VAR 0 9
 850: PUSH
 851: LD_VAR 0 1
 855: PPUSH
 856: CALL_OW 255
 860: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_ok ] , [ f_empty ] ] ) diff b ;
 861: LD_ADDR_VAR 0 7
 865: PUSH
 866: LD_INT 22
 868: PUSH
 869: LD_VAR 0 9
 873: PUSH
 874: EMPTY
 875: LIST
 876: LIST
 877: PUSH
 878: LD_INT 30
 880: PUSH
 881: LD_INT 32
 883: PUSH
 884: EMPTY
 885: LIST
 886: LIST
 887: PUSH
 888: LD_INT 50
 890: PUSH
 891: EMPTY
 892: LIST
 893: PUSH
 894: LD_INT 58
 896: PUSH
 897: EMPTY
 898: LIST
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: LIST
 904: LIST
 905: PPUSH
 906: CALL_OW 69
 910: PUSH
 911: LD_VAR 0 2
 915: DIFF
 916: ST_TO_ADDR
// if not filter then
 917: LD_VAR 0 7
 921: NOT
 922: IFFALSE 1157
// begin filter := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_barracks ] ] ) ;
 924: LD_ADDR_VAR 0 7
 928: PUSH
 929: LD_INT 22
 931: PUSH
 932: LD_VAR 0 9
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: PUSH
 941: LD_INT 30
 943: PUSH
 944: LD_INT 5
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: PUSH
 951: EMPTY
 952: LIST
 953: LIST
 954: PPUSH
 955: CALL_OW 69
 959: ST_TO_ADDR
// if debug then
 960: LD_EXP 1
 964: IFFALSE 983
// display_strings := [ filter , 1 ] ;
 966: LD_ADDR_OWVAR 47
 970: PUSH
 971: LD_VAR 0 7
 975: PUSH
 976: LD_STRING 1
 978: PUSH
 979: EMPTY
 980: LIST
 981: LIST
 982: ST_TO_ADDR
// if not filter then
 983: LD_VAR 0 7
 987: NOT
 988: IFFALSE 1011
// begin ComMoveXY ( un , x , y ) ;
 990: LD_VAR 0 1
 994: PPUSH
 995: LD_VAR 0 3
 999: PPUSH
1000: LD_VAR 0 4
1004: PPUSH
1005: CALL_OW 111
// exit ;
1009: GO 1292
// end ; repeat t := NearestUnitToUnit ( filter , un ) ;
1011: LD_ADDR_VAR 0 8
1015: PUSH
1016: LD_VAR 0 7
1020: PPUSH
1021: LD_VAR 0 1
1025: PPUSH
1026: CALL_OW 74
1030: ST_TO_ADDR
// if UnitsInside ( t ) = 6 then
1031: LD_VAR 0 8
1035: PPUSH
1036: CALL_OW 313
1040: PUSH
1041: LD_INT 6
1043: EQUAL
1044: IFFALSE 1064
// filter := filter diff t else
1046: LD_ADDR_VAR 0 7
1050: PUSH
1051: LD_VAR 0 7
1055: PUSH
1056: LD_VAR 0 8
1060: DIFF
1061: ST_TO_ADDR
1062: GO 1066
// break ;
1064: GO 1088
// until UnitsInside ( t ) < 6 or not filter ;
1066: LD_VAR 0 8
1070: PPUSH
1071: CALL_OW 313
1075: PUSH
1076: LD_INT 6
1078: LESS
1079: PUSH
1080: LD_VAR 0 7
1084: NOT
1085: OR
1086: IFFALSE 1011
// if debug then
1088: LD_EXP 1
1092: IFFALSE 1113
// display_strings := [ filter , t ] ;
1094: LD_ADDR_OWVAR 47
1098: PUSH
1099: LD_VAR 0 7
1103: PUSH
1104: LD_VAR 0 8
1108: PUSH
1109: EMPTY
1110: LIST
1111: LIST
1112: ST_TO_ADDR
// if not filter then
1113: LD_VAR 0 7
1117: NOT
1118: IFFALSE 1141
// ComMoveXY ( un , x , y ) else
1120: LD_VAR 0 1
1124: PPUSH
1125: LD_VAR 0 3
1129: PPUSH
1130: LD_VAR 0 4
1134: PPUSH
1135: CALL_OW 111
1139: GO 1155
// ComEnterUnit ( un , t ) ;
1141: LD_VAR 0 1
1145: PPUSH
1146: LD_VAR 0 8
1150: PPUSH
1151: CALL_OW 120
// end else
1155: GO 1292
// begin repeat t := NearestUnitToUnit ( filter , un ) ;
1157: LD_ADDR_VAR 0 8
1161: PUSH
1162: LD_VAR 0 7
1166: PPUSH
1167: LD_VAR 0 1
1171: PPUSH
1172: CALL_OW 74
1176: ST_TO_ADDR
// if ( GetTag ( t ) = 7 ) then
1177: LD_VAR 0 8
1181: PPUSH
1182: CALL_OW 110
1186: PUSH
1187: LD_INT 7
1189: EQUAL
1190: IFFALSE 1208
// filter := filter diff t ;
1192: LD_ADDR_VAR 0 7
1196: PUSH
1197: LD_VAR 0 7
1201: PUSH
1202: LD_VAR 0 8
1206: DIFF
1207: ST_TO_ADDR
// until GetTag ( t ) <> 7 or not filter ;
1208: LD_VAR 0 8
1212: PPUSH
1213: CALL_OW 110
1217: PUSH
1218: LD_INT 7
1220: NONEQUAL
1221: PUSH
1222: LD_VAR 0 7
1226: NOT
1227: OR
1228: IFFALSE 1157
// if GetTag ( t ) <> 7 then
1230: LD_VAR 0 8
1234: PPUSH
1235: CALL_OW 110
1239: PUSH
1240: LD_INT 7
1242: NONEQUAL
1243: IFFALSE 1273
// begin SetTag ( t , 7 ) ;
1245: LD_VAR 0 8
1249: PPUSH
1250: LD_INT 7
1252: PPUSH
1253: CALL_OW 109
// ComEnterUnit ( un , t ) ;
1257: LD_VAR 0 1
1261: PPUSH
1262: LD_VAR 0 8
1266: PPUSH
1267: CALL_OW 120
// end else
1271: GO 1292
// ComMoveXY ( un , x , y ) ;
1273: LD_VAR 0 1
1277: PPUSH
1278: LD_VAR 0 3
1282: PPUSH
1283: LD_VAR 0 4
1287: PPUSH
1288: CALL_OW 111
// end ; end ;
1292: LD_VAR 0 5
1296: RET
// export function BaseNeedEnergy ( base ) ; var i , tmp ; begin
1297: LD_INT 0
1299: PPUSH
1300: PPUSH
1301: PPUSH
// if not base then
1302: LD_VAR 0 1
1306: NOT
1307: IFFALSE 1311
// exit ;
1309: GO 1369
// tmp := GetEnergy ( GetBase ( base ) ) ;
1311: LD_ADDR_VAR 0 4
1315: PUSH
1316: LD_VAR 0 1
1320: PPUSH
1321: CALL_OW 274
1325: PPUSH
1326: CALL_OW 278
1330: ST_TO_ADDR
// if tmp [ 1 ] > tmp [ 4 ] then
1331: LD_VAR 0 4
1335: PUSH
1336: LD_INT 1
1338: ARRAY
1339: PUSH
1340: LD_VAR 0 4
1344: PUSH
1345: LD_INT 4
1347: ARRAY
1348: GREATER
1349: IFFALSE 1361
// result := true else
1351: LD_ADDR_VAR 0 2
1355: PUSH
1356: LD_INT 1
1358: ST_TO_ADDR
1359: GO 1369
// result := false ;
1361: LD_ADDR_VAR 0 2
1365: PUSH
1366: LD_INT 0
1368: ST_TO_ADDR
// end ;
1369: LD_VAR 0 2
1373: RET
// export function FilterPeople ( side ) ; begin
1374: LD_INT 0
1376: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) ;
1377: LD_ADDR_VAR 0 2
1381: PUSH
1382: LD_INT 22
1384: PUSH
1385: LD_VAR 0 1
1389: PUSH
1390: EMPTY
1391: LIST
1392: LIST
1393: PUSH
1394: LD_INT 21
1396: PUSH
1397: LD_INT 1
1399: PUSH
1400: EMPTY
1401: LIST
1402: LIST
1403: PUSH
1404: EMPTY
1405: LIST
1406: LIST
1407: PPUSH
1408: CALL_OW 69
1412: ST_TO_ADDR
// end ;
1413: LD_VAR 0 2
1417: RET
// export function FilterDrivers ( side ) ; begin
1418: LD_INT 0
1420: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_outside ] ] ] ) ;
1421: LD_ADDR_VAR 0 2
1425: PUSH
1426: LD_INT 22
1428: PUSH
1429: LD_VAR 0 1
1433: PUSH
1434: EMPTY
1435: LIST
1436: LIST
1437: PUSH
1438: LD_INT 3
1440: PUSH
1441: LD_INT 56
1443: PUSH
1444: EMPTY
1445: LIST
1446: PUSH
1447: EMPTY
1448: LIST
1449: LIST
1450: PUSH
1451: EMPTY
1452: LIST
1453: LIST
1454: PPUSH
1455: CALL_OW 69
1459: ST_TO_ADDR
// end ;
1460: LD_VAR 0 2
1464: RET
// export function FilterPeopleArea ( side , area ) ; begin
1465: LD_INT 0
1467: PPUSH
// result := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
1468: LD_ADDR_VAR 0 3
1472: PUSH
1473: LD_VAR 0 2
1477: PPUSH
1478: LD_INT 22
1480: PUSH
1481: LD_INT 1
1483: PUSH
1484: EMPTY
1485: LIST
1486: LIST
1487: PUSH
1488: LD_INT 21
1490: PUSH
1491: LD_INT 1
1493: PUSH
1494: EMPTY
1495: LIST
1496: LIST
1497: PUSH
1498: EMPTY
1499: LIST
1500: LIST
1501: PPUSH
1502: CALL_OW 70
1506: ST_TO_ADDR
// end ;
1507: LD_VAR 0 3
1511: RET
// export function FilterDriversArea ( side , area ) ; var i , tmp ; begin
1512: LD_INT 0
1514: PPUSH
1515: PPUSH
1516: PPUSH
// tmp := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
1517: LD_ADDR_VAR 0 5
1521: PUSH
1522: LD_VAR 0 2
1526: PPUSH
1527: LD_INT 22
1529: PUSH
1530: LD_INT 1
1532: PUSH
1533: EMPTY
1534: LIST
1535: LIST
1536: PUSH
1537: LD_INT 21
1539: PUSH
1540: LD_INT 2
1542: PUSH
1543: EMPTY
1544: LIST
1545: LIST
1546: PUSH
1547: LD_INT 3
1549: PUSH
1550: LD_INT 58
1552: PUSH
1553: EMPTY
1554: LIST
1555: PUSH
1556: EMPTY
1557: LIST
1558: LIST
1559: PUSH
1560: EMPTY
1561: LIST
1562: LIST
1563: LIST
1564: PPUSH
1565: CALL_OW 70
1569: ST_TO_ADDR
// result := [ ] ;
1570: LD_ADDR_VAR 0 3
1574: PUSH
1575: EMPTY
1576: ST_TO_ADDR
// if not tmp then
1577: LD_VAR 0 5
1581: NOT
1582: IFFALSE 1586
// exit ;
1584: GO 1638
// for i in tmp do
1586: LD_ADDR_VAR 0 4
1590: PUSH
1591: LD_VAR 0 5
1595: PUSH
1596: FOR_IN
1597: IFFALSE 1622
// result := result union IsDrivenBy ( i ) ;
1599: LD_ADDR_VAR 0 3
1603: PUSH
1604: LD_VAR 0 3
1608: PUSH
1609: LD_VAR 0 4
1613: PPUSH
1614: CALL_OW 311
1618: UNION
1619: ST_TO_ADDR
1620: GO 1596
1622: POP
1623: POP
// result := result diff 0 ;
1624: LD_ADDR_VAR 0 3
1628: PUSH
1629: LD_VAR 0 3
1633: PUSH
1634: LD_INT 0
1636: DIFF
1637: ST_TO_ADDR
// end ;
1638: LD_VAR 0 3
1642: RET
// export function FilterBuildings ( side ) ; begin
1643: LD_INT 0
1645: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
1646: LD_ADDR_VAR 0 2
1650: PUSH
1651: LD_INT 22
1653: PUSH
1654: LD_VAR 0 1
1658: PUSH
1659: EMPTY
1660: LIST
1661: LIST
1662: PUSH
1663: LD_INT 21
1665: PUSH
1666: LD_INT 3
1668: PUSH
1669: EMPTY
1670: LIST
1671: LIST
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: PPUSH
1677: CALL_OW 69
1681: ST_TO_ADDR
// end ;
1682: LD_VAR 0 2
1686: RET
// export function CreateNature ; var i , animal , nat_area ; begin
1687: LD_INT 0
1689: PPUSH
1690: PPUSH
1691: PPUSH
1692: PPUSH
// uc_side = 0 ;
1693: LD_ADDR_OWVAR 20
1697: PUSH
1698: LD_INT 0
1700: ST_TO_ADDR
// uc_nation = 0 ;
1701: LD_ADDR_OWVAR 21
1705: PUSH
1706: LD_INT 0
1708: ST_TO_ADDR
// nat_area := wildArea ;
1709: LD_ADDR_VAR 0 4
1713: PUSH
1714: LD_INT 3
1716: ST_TO_ADDR
// InitHc ;
1717: CALL_OW 19
// for i = 1 to 4 do
1721: LD_ADDR_VAR 0 2
1725: PUSH
1726: DOUBLE
1727: LD_INT 1
1729: DEC
1730: ST_TO_ADDR
1731: LD_INT 4
1733: PUSH
1734: FOR_TO
1735: IFFALSE 1790
// begin hc_class = 18 ;
1737: LD_ADDR_OWVAR 28
1741: PUSH
1742: LD_INT 18
1744: ST_TO_ADDR
// hc_gallery =  ;
1745: LD_ADDR_OWVAR 33
1749: PUSH
1750: LD_STRING 
1752: ST_TO_ADDR
// hc_face_number = 1 ;
1753: LD_ADDR_OWVAR 34
1757: PUSH
1758: LD_INT 1
1760: ST_TO_ADDR
// animal := CreateHuman ;
1761: LD_ADDR_VAR 0 3
1765: PUSH
1766: CALL_OW 44
1770: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1771: LD_VAR 0 3
1775: PPUSH
1776: LD_VAR 0 4
1780: PPUSH
1781: LD_INT 0
1783: PPUSH
1784: CALL_OW 49
// end ;
1788: GO 1734
1790: POP
1791: POP
// for i = 1 to 6 do
1792: LD_ADDR_VAR 0 2
1796: PUSH
1797: DOUBLE
1798: LD_INT 1
1800: DEC
1801: ST_TO_ADDR
1802: LD_INT 6
1804: PUSH
1805: FOR_TO
1806: IFFALSE 1877
// begin hc_class = class_tiger ;
1808: LD_ADDR_OWVAR 28
1812: PUSH
1813: LD_INT 14
1815: ST_TO_ADDR
// hc_gallery =  ;
1816: LD_ADDR_OWVAR 33
1820: PUSH
1821: LD_STRING 
1823: ST_TO_ADDR
// hc_agressivity = Rand ( 0 , 10 ) ;
1824: LD_ADDR_OWVAR 35
1828: PUSH
1829: LD_INT 0
1831: PPUSH
1832: LD_INT 10
1834: PPUSH
1835: CALL_OW 12
1839: ST_TO_ADDR
// hc_face_number = 3 ;
1840: LD_ADDR_OWVAR 34
1844: PUSH
1845: LD_INT 3
1847: ST_TO_ADDR
// animal := CreateHuman ;
1848: LD_ADDR_VAR 0 3
1852: PUSH
1853: CALL_OW 44
1857: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1858: LD_VAR 0 3
1862: PPUSH
1863: LD_VAR 0 4
1867: PPUSH
1868: LD_INT 0
1870: PPUSH
1871: CALL_OW 49
// end ;
1875: GO 1805
1877: POP
1878: POP
// for i = 1 to 2 do
1879: LD_ADDR_VAR 0 2
1883: PUSH
1884: DOUBLE
1885: LD_INT 1
1887: DEC
1888: ST_TO_ADDR
1889: LD_INT 2
1891: PUSH
1892: FOR_TO
1893: IFFALSE 1956
// begin hc_class = 21 ;
1895: LD_ADDR_OWVAR 28
1899: PUSH
1900: LD_INT 21
1902: ST_TO_ADDR
// hc_gallery =  ;
1903: LD_ADDR_OWVAR 33
1907: PUSH
1908: LD_STRING 
1910: ST_TO_ADDR
// hc_agressivity = 0 ;
1911: LD_ADDR_OWVAR 35
1915: PUSH
1916: LD_INT 0
1918: ST_TO_ADDR
// hc_face_number = 5 ;
1919: LD_ADDR_OWVAR 34
1923: PUSH
1924: LD_INT 5
1926: ST_TO_ADDR
// animal := CreateHuman ;
1927: LD_ADDR_VAR 0 3
1931: PUSH
1932: CALL_OW 44
1936: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1937: LD_VAR 0 3
1941: PPUSH
1942: LD_VAR 0 4
1946: PPUSH
1947: LD_INT 0
1949: PPUSH
1950: CALL_OW 49
// end ;
1954: GO 1892
1956: POP
1957: POP
// for i = 1 to 6 do
1958: LD_ADDR_VAR 0 2
1962: PUSH
1963: DOUBLE
1964: LD_INT 1
1966: DEC
1967: ST_TO_ADDR
1968: LD_INT 6
1970: PUSH
1971: FOR_TO
1972: IFFALSE 2027
// begin hc_class = 13 ;
1974: LD_ADDR_OWVAR 28
1978: PUSH
1979: LD_INT 13
1981: ST_TO_ADDR
// hc_gallery =  ;
1982: LD_ADDR_OWVAR 33
1986: PUSH
1987: LD_STRING 
1989: ST_TO_ADDR
// hc_face_number = 4 ;
1990: LD_ADDR_OWVAR 34
1994: PUSH
1995: LD_INT 4
1997: ST_TO_ADDR
// animal := CreateHuman ;
1998: LD_ADDR_VAR 0 3
2002: PUSH
2003: CALL_OW 44
2007: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
2008: LD_VAR 0 3
2012: PPUSH
2013: LD_VAR 0 4
2017: PPUSH
2018: LD_INT 0
2020: PPUSH
2021: CALL_OW 49
// end ;
2025: GO 1971
2027: POP
2028: POP
// for i = 1 to 2 do
2029: LD_ADDR_VAR 0 2
2033: PUSH
2034: DOUBLE
2035: LD_INT 1
2037: DEC
2038: ST_TO_ADDR
2039: LD_INT 2
2041: PUSH
2042: FOR_TO
2043: IFFALSE 2102
// begin hc_class = 20 ;
2045: LD_ADDR_OWVAR 28
2049: PUSH
2050: LD_INT 20
2052: ST_TO_ADDR
// hc_gallery =  ;
2053: LD_ADDR_OWVAR 33
2057: PUSH
2058: LD_STRING 
2060: ST_TO_ADDR
// hc_face_number = 2 ;
2061: LD_ADDR_OWVAR 34
2065: PUSH
2066: LD_INT 2
2068: ST_TO_ADDR
// animal := CreateHuman ;
2069: LD_ADDR_VAR 0 3
2073: PUSH
2074: CALL_OW 44
2078: ST_TO_ADDR
// PlaceUnitXYR ( animal , 101 , 37 , 3 , false ) ;
2079: LD_VAR 0 3
2083: PPUSH
2084: LD_INT 101
2086: PPUSH
2087: LD_INT 37
2089: PPUSH
2090: LD_INT 3
2092: PPUSH
2093: LD_INT 0
2095: PPUSH
2096: CALL_OW 50
// end ;
2100: GO 2042
2102: POP
2103: POP
// for i = 1 to 1 do
2104: LD_ADDR_VAR 0 2
2108: PUSH
2109: DOUBLE
2110: LD_INT 1
2112: DEC
2113: ST_TO_ADDR
2114: LD_INT 1
2116: PUSH
2117: FOR_TO
2118: IFFALSE 2165
// begin vc_chassis := 31 ;
2120: LD_ADDR_OWVAR 37
2124: PUSH
2125: LD_INT 31
2127: ST_TO_ADDR
// vc_control := control_rider ;
2128: LD_ADDR_OWVAR 38
2132: PUSH
2133: LD_INT 4
2135: ST_TO_ADDR
// animal := CreateVehicle ;
2136: LD_ADDR_VAR 0 3
2140: PUSH
2141: CALL_OW 45
2145: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
2146: LD_VAR 0 3
2150: PPUSH
2151: LD_VAR 0 4
2155: PPUSH
2156: LD_INT 0
2158: PPUSH
2159: CALL_OW 49
// end ;
2163: GO 2117
2165: POP
2166: POP
// end ;
2167: LD_VAR 0 1
2171: RET
// export function NearbyTowerHasEnergy ( unit ) ; var i , tmp , energy ; begin
2172: LD_INT 0
2174: PPUSH
2175: PPUSH
2176: PPUSH
2177: PPUSH
// result := [ ] ;
2178: LD_ADDR_VAR 0 2
2182: PUSH
2183: EMPTY
2184: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_dist , unit , 15 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
2185: LD_ADDR_VAR 0 4
2189: PUSH
2190: LD_INT 81
2192: PUSH
2193: LD_VAR 0 1
2197: PPUSH
2198: CALL_OW 255
2202: PUSH
2203: EMPTY
2204: LIST
2205: LIST
2206: PUSH
2207: LD_INT 91
2209: PUSH
2210: LD_VAR 0 1
2214: PUSH
2215: LD_INT 15
2217: PUSH
2218: EMPTY
2219: LIST
2220: LIST
2221: LIST
2222: PUSH
2223: LD_INT 2
2225: PUSH
2226: LD_INT 30
2228: PUSH
2229: LD_INT 32
2231: PUSH
2232: EMPTY
2233: LIST
2234: LIST
2235: PUSH
2236: LD_INT 30
2238: PUSH
2239: LD_INT 33
2241: PUSH
2242: EMPTY
2243: LIST
2244: LIST
2245: PUSH
2246: EMPTY
2247: LIST
2248: LIST
2249: LIST
2250: PUSH
2251: EMPTY
2252: LIST
2253: LIST
2254: LIST
2255: PPUSH
2256: CALL_OW 69
2260: ST_TO_ADDR
// if not tmp then
2261: LD_VAR 0 4
2265: NOT
2266: IFFALSE 2270
// exit ;
2268: GO 2339
// for i in tmp do
2270: LD_ADDR_VAR 0 3
2274: PUSH
2275: LD_VAR 0 4
2279: PUSH
2280: FOR_IN
2281: IFFALSE 2337
// begin energy := GetEnergy ( GetBase ( i ) ) ;
2283: LD_ADDR_VAR 0 5
2287: PUSH
2288: LD_VAR 0 3
2292: PPUSH
2293: CALL_OW 274
2297: PPUSH
2298: CALL_OW 278
2302: ST_TO_ADDR
// if energy [ 4 ] > energy [ 1 ] then
2303: LD_VAR 0 5
2307: PUSH
2308: LD_INT 4
2310: ARRAY
2311: PUSH
2312: LD_VAR 0 5
2316: PUSH
2317: LD_INT 1
2319: ARRAY
2320: GREATER
2321: IFFALSE 2335
// begin result := i ;
2323: LD_ADDR_VAR 0 2
2327: PUSH
2328: LD_VAR 0 3
2332: ST_TO_ADDR
// break ;
2333: GO 2337
// end ; end ;
2335: GO 2280
2337: POP
2338: POP
// end ;
2339: LD_VAR 0 2
2343: RET
// export function GetTurretWeaponBase ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
2344: LD_INT 0
2346: PPUSH
2347: PPUSH
2348: PPUSH
2349: PPUSH
2350: PPUSH
2351: PPUSH
2352: PPUSH
2353: PPUSH
2354: PPUSH
2355: PPUSH
2356: PPUSH
2357: PPUSH
2358: PPUSH
2359: PPUSH
2360: PPUSH
2361: PPUSH
// result := false ;
2362: LD_ADDR_VAR 0 2
2366: PUSH
2367: LD_INT 0
2369: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
2370: LD_VAR 0 1
2374: NOT
2375: PUSH
2376: LD_VAR 0 1
2380: PPUSH
2381: CALL_OW 266
2385: PUSH
2386: LD_INT 32
2388: PUSH
2389: LD_INT 33
2391: PUSH
2392: EMPTY
2393: LIST
2394: LIST
2395: IN
2396: NOT
2397: OR
2398: IFFALSE 2402
// exit ;
2400: GO 3562
// nat := GetNation ( tower ) ;
2402: LD_ADDR_VAR 0 11
2406: PUSH
2407: LD_VAR 0 1
2411: PPUSH
2412: CALL_OW 248
2416: ST_TO_ADDR
// side := GetSide ( tower ) ;
2417: LD_ADDR_VAR 0 15
2421: PUSH
2422: LD_VAR 0 1
2426: PPUSH
2427: CALL_OW 255
2431: ST_TO_ADDR
// x := GetX ( tower ) ;
2432: LD_ADDR_VAR 0 9
2436: PUSH
2437: LD_VAR 0 1
2441: PPUSH
2442: CALL_OW 250
2446: ST_TO_ADDR
// y := GetY ( tower ) ;
2447: LD_ADDR_VAR 0 10
2451: PUSH
2452: LD_VAR 0 1
2456: PPUSH
2457: CALL_OW 251
2461: ST_TO_ADDR
// if not x or not y then
2462: LD_VAR 0 9
2466: NOT
2467: PUSH
2468: LD_VAR 0 10
2472: NOT
2473: OR
2474: IFFALSE 2478
// exit ;
2476: GO 3562
// weapon := 0 ;
2478: LD_ADDR_VAR 0 17
2482: PUSH
2483: LD_INT 0
2485: ST_TO_ADDR
// fac_list := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
2486: LD_ADDR_VAR 0 16
2490: PUSH
2491: LD_INT 42
2493: PUSH
2494: LD_INT 43
2496: PUSH
2497: LD_INT 44
2499: PUSH
2500: LD_INT 46
2502: PUSH
2503: EMPTY
2504: LIST
2505: LIST
2506: LIST
2507: LIST
2508: ST_TO_ADDR
// if not fac_list then
2509: LD_VAR 0 16
2513: NOT
2514: IFFALSE 2518
// exit ;
2516: GO 3562
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
2518: LD_ADDR_VAR 0 4
2522: PUSH
2523: LD_INT 4
2525: PUSH
2526: LD_INT 5
2528: PUSH
2529: LD_INT 9
2531: PUSH
2532: LD_INT 10
2534: PUSH
2535: LD_INT 6
2537: PUSH
2538: LD_INT 7
2540: PUSH
2541: LD_INT 11
2543: PUSH
2544: EMPTY
2545: LIST
2546: LIST
2547: LIST
2548: LIST
2549: LIST
2550: LIST
2551: LIST
2552: PUSH
2553: LD_INT 27
2555: PUSH
2556: LD_INT 28
2558: PUSH
2559: LD_INT 26
2561: PUSH
2562: LD_INT 30
2564: PUSH
2565: EMPTY
2566: LIST
2567: LIST
2568: LIST
2569: LIST
2570: PUSH
2571: LD_INT 43
2573: PUSH
2574: LD_INT 44
2576: PUSH
2577: LD_INT 46
2579: PUSH
2580: LD_INT 45
2582: PUSH
2583: LD_INT 47
2585: PUSH
2586: LD_INT 49
2588: PUSH
2589: EMPTY
2590: LIST
2591: LIST
2592: LIST
2593: LIST
2594: LIST
2595: LIST
2596: PUSH
2597: EMPTY
2598: LIST
2599: LIST
2600: LIST
2601: PUSH
2602: LD_VAR 0 11
2606: ARRAY
2607: ST_TO_ADDR
// for i in list do
2608: LD_ADDR_VAR 0 7
2612: PUSH
2613: LD_VAR 0 4
2617: PUSH
2618: FOR_IN
2619: IFFALSE 2652
// if not i in fac_list then
2621: LD_VAR 0 7
2625: PUSH
2626: LD_VAR 0 16
2630: IN
2631: NOT
2632: IFFALSE 2650
// list := list diff i ;
2634: LD_ADDR_VAR 0 4
2638: PUSH
2639: LD_VAR 0 4
2643: PUSH
2644: LD_VAR 0 7
2648: DIFF
2649: ST_TO_ADDR
2650: GO 2618
2652: POP
2653: POP
// if not list then
2654: LD_VAR 0 4
2658: NOT
2659: IFFALSE 2663
// exit ;
2661: GO 3562
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
2663: LD_VAR 0 11
2667: PUSH
2668: LD_INT 3
2670: EQUAL
2671: PUSH
2672: LD_INT 49
2674: PUSH
2675: LD_VAR 0 4
2679: IN
2680: AND
2681: PUSH
2682: LD_INT 31
2684: PPUSH
2685: LD_VAR 0 15
2689: PPUSH
2690: CALL_OW 321
2694: PUSH
2695: LD_INT 2
2697: EQUAL
2698: AND
2699: IFFALSE 2759
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
2701: LD_INT 22
2703: PUSH
2704: LD_VAR 0 15
2708: PUSH
2709: EMPTY
2710: LIST
2711: LIST
2712: PUSH
2713: LD_INT 35
2715: PUSH
2716: LD_INT 49
2718: PUSH
2719: EMPTY
2720: LIST
2721: LIST
2722: PUSH
2723: LD_INT 91
2725: PUSH
2726: LD_VAR 0 1
2730: PUSH
2731: LD_INT 10
2733: PUSH
2734: EMPTY
2735: LIST
2736: LIST
2737: LIST
2738: PUSH
2739: EMPTY
2740: LIST
2741: LIST
2742: LIST
2743: PPUSH
2744: CALL_OW 69
2748: NOT
2749: IFFALSE 2759
// weapon := ru_time_lapser ;
2751: LD_ADDR_VAR 0 17
2755: PUSH
2756: LD_INT 49
2758: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
2759: LD_VAR 0 11
2763: PUSH
2764: LD_INT 1
2766: PUSH
2767: LD_INT 2
2769: PUSH
2770: EMPTY
2771: LIST
2772: LIST
2773: IN
2774: PUSH
2775: LD_INT 11
2777: PUSH
2778: LD_VAR 0 4
2782: IN
2783: PUSH
2784: LD_INT 30
2786: PUSH
2787: LD_VAR 0 4
2791: IN
2792: OR
2793: AND
2794: PUSH
2795: LD_INT 6
2797: PPUSH
2798: LD_VAR 0 15
2802: PPUSH
2803: CALL_OW 321
2807: PUSH
2808: LD_INT 2
2810: EQUAL
2811: AND
2812: IFFALSE 2977
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
2814: LD_INT 22
2816: PUSH
2817: LD_VAR 0 15
2821: PUSH
2822: EMPTY
2823: LIST
2824: LIST
2825: PUSH
2826: LD_INT 2
2828: PUSH
2829: LD_INT 35
2831: PUSH
2832: LD_INT 11
2834: PUSH
2835: EMPTY
2836: LIST
2837: LIST
2838: PUSH
2839: LD_INT 35
2841: PUSH
2842: LD_INT 30
2844: PUSH
2845: EMPTY
2846: LIST
2847: LIST
2848: PUSH
2849: EMPTY
2850: LIST
2851: LIST
2852: LIST
2853: PUSH
2854: LD_INT 91
2856: PUSH
2857: LD_VAR 0 1
2861: PUSH
2862: LD_INT 18
2864: PUSH
2865: EMPTY
2866: LIST
2867: LIST
2868: LIST
2869: PUSH
2870: EMPTY
2871: LIST
2872: LIST
2873: LIST
2874: PPUSH
2875: CALL_OW 69
2879: NOT
2880: PUSH
2881: LD_INT 22
2883: PUSH
2884: LD_VAR 0 15
2888: PUSH
2889: EMPTY
2890: LIST
2891: LIST
2892: PUSH
2893: LD_INT 2
2895: PUSH
2896: LD_INT 30
2898: PUSH
2899: LD_INT 32
2901: PUSH
2902: EMPTY
2903: LIST
2904: LIST
2905: PUSH
2906: LD_INT 30
2908: PUSH
2909: LD_INT 33
2911: PUSH
2912: EMPTY
2913: LIST
2914: LIST
2915: PUSH
2916: EMPTY
2917: LIST
2918: LIST
2919: LIST
2920: PUSH
2921: LD_INT 91
2923: PUSH
2924: LD_VAR 0 1
2928: PUSH
2929: LD_INT 12
2931: PUSH
2932: EMPTY
2933: LIST
2934: LIST
2935: LIST
2936: PUSH
2937: EMPTY
2938: LIST
2939: LIST
2940: LIST
2941: PUSH
2942: EMPTY
2943: LIST
2944: PPUSH
2945: CALL_OW 69
2949: PUSH
2950: LD_INT 2
2952: GREATER
2953: AND
2954: IFFALSE 2977
// weapon := [ us_radar , ar_radar ] [ nat ] ;
2956: LD_ADDR_VAR 0 17
2960: PUSH
2961: LD_INT 11
2963: PUSH
2964: LD_INT 30
2966: PUSH
2967: EMPTY
2968: LIST
2969: LIST
2970: PUSH
2971: LD_VAR 0 11
2975: ARRAY
2976: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
2977: LD_VAR 0 17
2981: NOT
2982: PUSH
2983: LD_INT 40
2985: PPUSH
2986: LD_VAR 0 15
2990: PPUSH
2991: CALL_OW 321
2995: PUSH
2996: LD_INT 2
2998: EQUAL
2999: AND
3000: PUSH
3001: LD_INT 7
3003: PUSH
3004: LD_VAR 0 4
3008: IN
3009: PUSH
3010: LD_INT 28
3012: PUSH
3013: LD_VAR 0 4
3017: IN
3018: OR
3019: PUSH
3020: LD_INT 45
3022: PUSH
3023: LD_VAR 0 4
3027: IN
3028: OR
3029: AND
3030: IFFALSE 3284
// begin hex := GetHexInfo ( x , y ) ;
3032: LD_ADDR_VAR 0 3
3036: PUSH
3037: LD_VAR 0 9
3041: PPUSH
3042: LD_VAR 0 10
3046: PPUSH
3047: CALL_OW 546
3051: ST_TO_ADDR
// if hex [ 1 ] then
3052: LD_VAR 0 3
3056: PUSH
3057: LD_INT 1
3059: ARRAY
3060: IFFALSE 3064
// exit ;
3062: GO 3562
// height := hex [ 2 ] ;
3064: LD_ADDR_VAR 0 14
3068: PUSH
3069: LD_VAR 0 3
3073: PUSH
3074: LD_INT 2
3076: ARRAY
3077: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
3078: LD_ADDR_VAR 0 13
3082: PUSH
3083: LD_INT 0
3085: PUSH
3086: LD_INT 2
3088: PUSH
3089: LD_INT 3
3091: PUSH
3092: LD_INT 5
3094: PUSH
3095: EMPTY
3096: LIST
3097: LIST
3098: LIST
3099: LIST
3100: ST_TO_ADDR
// for i in tmp do
3101: LD_ADDR_VAR 0 7
3105: PUSH
3106: LD_VAR 0 13
3110: PUSH
3111: FOR_IN
3112: IFFALSE 3282
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
3114: LD_ADDR_VAR 0 8
3118: PUSH
3119: LD_VAR 0 9
3123: PPUSH
3124: LD_VAR 0 7
3128: PPUSH
3129: LD_INT 5
3131: PPUSH
3132: CALL_OW 272
3136: PUSH
3137: LD_VAR 0 10
3141: PPUSH
3142: LD_VAR 0 7
3146: PPUSH
3147: LD_INT 5
3149: PPUSH
3150: CALL_OW 273
3154: PUSH
3155: EMPTY
3156: LIST
3157: LIST
3158: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
3159: LD_VAR 0 8
3163: PUSH
3164: LD_INT 1
3166: ARRAY
3167: PPUSH
3168: LD_VAR 0 8
3172: PUSH
3173: LD_INT 2
3175: ARRAY
3176: PPUSH
3177: CALL_OW 488
3181: IFFALSE 3280
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
3183: LD_ADDR_VAR 0 3
3187: PUSH
3188: LD_VAR 0 8
3192: PUSH
3193: LD_INT 1
3195: ARRAY
3196: PPUSH
3197: LD_VAR 0 8
3201: PUSH
3202: LD_INT 2
3204: ARRAY
3205: PPUSH
3206: CALL_OW 546
3210: ST_TO_ADDR
// if hex [ 1 ] then
3211: LD_VAR 0 3
3215: PUSH
3216: LD_INT 1
3218: ARRAY
3219: IFFALSE 3223
// continue ;
3221: GO 3111
// h := hex [ 2 ] ;
3223: LD_ADDR_VAR 0 12
3227: PUSH
3228: LD_VAR 0 3
3232: PUSH
3233: LD_INT 2
3235: ARRAY
3236: ST_TO_ADDR
// if h + 7 < height then
3237: LD_VAR 0 12
3241: PUSH
3242: LD_INT 7
3244: PLUS
3245: PUSH
3246: LD_VAR 0 14
3250: LESS
3251: IFFALSE 3280
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
3253: LD_ADDR_VAR 0 17
3257: PUSH
3258: LD_INT 7
3260: PUSH
3261: LD_INT 28
3263: PUSH
3264: LD_INT 45
3266: PUSH
3267: EMPTY
3268: LIST
3269: LIST
3270: LIST
3271: PUSH
3272: LD_VAR 0 11
3276: ARRAY
3277: ST_TO_ADDR
// break ;
3278: GO 3282
// end ; end ; end ;
3280: GO 3111
3282: POP
3283: POP
// end ; if not weapon then
3284: LD_VAR 0 17
3288: NOT
3289: IFFALSE 3444
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
3291: LD_ADDR_VAR 0 4
3295: PUSH
3296: LD_VAR 0 4
3300: PUSH
3301: LD_INT 11
3303: PUSH
3304: LD_INT 30
3306: PUSH
3307: LD_INT 49
3309: PUSH
3310: EMPTY
3311: LIST
3312: LIST
3313: LIST
3314: DIFF
3315: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , tower , 6 ] , [ f_not , [ f_bweapon , 0 ] ] ] ) ;
3316: LD_ADDR_VAR 0 13
3320: PUSH
3321: LD_INT 22
3323: PUSH
3324: LD_VAR 0 15
3328: PUSH
3329: EMPTY
3330: LIST
3331: LIST
3332: PUSH
3333: LD_INT 91
3335: PUSH
3336: LD_VAR 0 1
3340: PUSH
3341: LD_INT 6
3343: PUSH
3344: EMPTY
3345: LIST
3346: LIST
3347: LIST
3348: PUSH
3349: LD_INT 3
3351: PUSH
3352: LD_INT 35
3354: PUSH
3355: LD_INT 0
3357: PUSH
3358: EMPTY
3359: LIST
3360: LIST
3361: PUSH
3362: EMPTY
3363: LIST
3364: LIST
3365: PUSH
3366: EMPTY
3367: LIST
3368: LIST
3369: LIST
3370: PPUSH
3371: CALL_OW 69
3375: ST_TO_ADDR
// for i in tmp do
3376: LD_ADDR_VAR 0 7
3380: PUSH
3381: LD_VAR 0 13
3385: PUSH
3386: FOR_IN
3387: IFFALSE 3412
// list := list diff GetBWeapon ( i ) ;
3389: LD_ADDR_VAR 0 4
3393: PUSH
3394: LD_VAR 0 4
3398: PUSH
3399: LD_VAR 0 7
3403: PPUSH
3404: CALL_OW 269
3408: DIFF
3409: ST_TO_ADDR
3410: GO 3386
3412: POP
3413: POP
// if list then
3414: LD_VAR 0 4
3418: IFFALSE 3444
// weapon := list [ rand ( 1 , list ) ] ;
3420: LD_ADDR_VAR 0 17
3424: PUSH
3425: LD_VAR 0 4
3429: PUSH
3430: LD_INT 1
3432: PPUSH
3433: LD_VAR 0 4
3437: PPUSH
3438: CALL_OW 12
3442: ARRAY
3443: ST_TO_ADDR
// end ; if weapon then
3444: LD_VAR 0 17
3448: IFFALSE 3562
// begin tmp := CostOfWeapon ( weapon ) ;
3450: LD_ADDR_VAR 0 13
3454: PUSH
3455: LD_VAR 0 17
3459: PPUSH
3460: CALL_OW 451
3464: ST_TO_ADDR
// j := GetBase ( tower ) ;
3465: LD_ADDR_VAR 0 8
3469: PUSH
3470: LD_VAR 0 1
3474: PPUSH
3475: CALL_OW 274
3479: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
3480: LD_VAR 0 8
3484: PPUSH
3485: LD_INT 1
3487: PPUSH
3488: CALL_OW 275
3492: PUSH
3493: LD_VAR 0 13
3497: PUSH
3498: LD_INT 1
3500: ARRAY
3501: GREATEREQUAL
3502: PUSH
3503: LD_VAR 0 8
3507: PPUSH
3508: LD_INT 2
3510: PPUSH
3511: CALL_OW 275
3515: PUSH
3516: LD_VAR 0 13
3520: PUSH
3521: LD_INT 2
3523: ARRAY
3524: GREATEREQUAL
3525: AND
3526: PUSH
3527: LD_VAR 0 8
3531: PPUSH
3532: LD_INT 3
3534: PPUSH
3535: CALL_OW 275
3539: PUSH
3540: LD_VAR 0 13
3544: PUSH
3545: LD_INT 3
3547: ARRAY
3548: GREATEREQUAL
3549: AND
3550: IFFALSE 3562
// result := weapon ;
3552: LD_ADDR_VAR 0 2
3556: PUSH
3557: LD_VAR 0 17
3561: ST_TO_ADDR
// end ; end ; end_of_file
3562: LD_VAR 0 2
3566: RET
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Khatam , Kikuchi , Harisson ; export function PrepareAmericans ; var i , team , others , veh , m ; begin
3567: LD_INT 0
3569: PPUSH
3570: PPUSH
3571: PPUSH
3572: PPUSH
3573: PPUSH
3574: PPUSH
// uc_side := 1 ;
3575: LD_ADDR_OWVAR 20
3579: PUSH
3580: LD_INT 1
3582: ST_TO_ADDR
// uc_nation := 1 ;
3583: LD_ADDR_OWVAR 21
3587: PUSH
3588: LD_INT 1
3590: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prev_prefix ) ;
3591: LD_ADDR_EXP 9
3595: PUSH
3596: LD_STRING JMM
3598: PPUSH
3599: LD_EXP 1
3603: NOT
3604: PPUSH
3605: LD_EXP 2
3609: PPUSH
3610: CALL 26634 0 3
3614: ST_TO_ADDR
// team := [ JMM ] ;
3615: LD_ADDR_VAR 0 3
3619: PUSH
3620: LD_EXP 9
3624: PUSH
3625: EMPTY
3626: LIST
3627: ST_TO_ADDR
// if LoadVariable ( BrownIn07 , debug ) then
3628: LD_STRING BrownIn07
3630: PPUSH
3631: LD_EXP 1
3635: PPUSH
3636: CALL_OW 30
3640: IFFALSE 3666
// Brown := PrepareUnit ( Brown , ( not debug ) , mission_prev_prefix ) ;
3642: LD_ADDR_EXP 10
3646: PUSH
3647: LD_STRING Brown
3649: PPUSH
3650: LD_EXP 1
3654: NOT
3655: PPUSH
3656: LD_EXP 2
3660: PPUSH
3661: CALL 26634 0 3
3665: ST_TO_ADDR
// if Brown then
3666: LD_EXP 10
3670: IFFALSE 3688
// team := team ^ Brown ;
3672: LD_ADDR_VAR 0 3
3676: PUSH
3677: LD_VAR 0 3
3681: PUSH
3682: LD_EXP 10
3686: ADD
3687: ST_TO_ADDR
// if LoadVariable ( DonaldsonIn07 , debug ) then
3688: LD_STRING DonaldsonIn07
3690: PPUSH
3691: LD_EXP 1
3695: PPUSH
3696: CALL_OW 30
3700: IFFALSE 3726
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prev_prefix ) ;
3702: LD_ADDR_EXP 11
3706: PUSH
3707: LD_STRING Donaldson
3709: PPUSH
3710: LD_EXP 1
3714: NOT
3715: PPUSH
3716: LD_EXP 2
3720: PPUSH
3721: CALL 26634 0 3
3725: ST_TO_ADDR
// if Donaldson then
3726: LD_EXP 11
3730: IFFALSE 3748
// team := team ^ Donaldson ;
3732: LD_ADDR_VAR 0 3
3736: PUSH
3737: LD_VAR 0 3
3741: PUSH
3742: LD_EXP 11
3746: ADD
3747: ST_TO_ADDR
// if LoadVariable ( BobbyIn07 , debug ) then
3748: LD_STRING BobbyIn07
3750: PPUSH
3751: LD_EXP 1
3755: PPUSH
3756: CALL_OW 30
3760: IFFALSE 3786
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prev_prefix ) ;
3762: LD_ADDR_EXP 12
3766: PUSH
3767: LD_STRING Bobby
3769: PPUSH
3770: LD_EXP 1
3774: NOT
3775: PPUSH
3776: LD_EXP 2
3780: PPUSH
3781: CALL 26634 0 3
3785: ST_TO_ADDR
// if Bobby then
3786: LD_EXP 12
3790: IFFALSE 3808
// team := team ^ Bobby ;
3792: LD_ADDR_VAR 0 3
3796: PUSH
3797: LD_VAR 0 3
3801: PUSH
3802: LD_EXP 12
3806: ADD
3807: ST_TO_ADDR
// if LoadVariable ( CyrusIn07 , debug ) then
3808: LD_STRING CyrusIn07
3810: PPUSH
3811: LD_EXP 1
3815: PPUSH
3816: CALL_OW 30
3820: IFFALSE 3846
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prev_prefix ) ;
3822: LD_ADDR_EXP 13
3826: PUSH
3827: LD_STRING Cyrus
3829: PPUSH
3830: LD_EXP 1
3834: NOT
3835: PPUSH
3836: LD_EXP 2
3840: PPUSH
3841: CALL 26634 0 3
3845: ST_TO_ADDR
// if Cyrus then
3846: LD_EXP 13
3850: IFFALSE 3868
// team := team ^ Cyrus ;
3852: LD_ADDR_VAR 0 3
3856: PUSH
3857: LD_VAR 0 3
3861: PUSH
3862: LD_EXP 13
3866: ADD
3867: ST_TO_ADDR
// if LoadVariable ( LisaIn07 , debug ) then
3868: LD_STRING LisaIn07
3870: PPUSH
3871: LD_EXP 1
3875: PPUSH
3876: CALL_OW 30
3880: IFFALSE 3906
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prev_prefix ) ;
3882: LD_ADDR_EXP 14
3886: PUSH
3887: LD_STRING Lisa
3889: PPUSH
3890: LD_EXP 1
3894: NOT
3895: PPUSH
3896: LD_EXP 2
3900: PPUSH
3901: CALL 26634 0 3
3905: ST_TO_ADDR
// if Lisa then
3906: LD_EXP 14
3910: IFFALSE 3928
// team := team ^ Lisa ;
3912: LD_ADDR_VAR 0 3
3916: PUSH
3917: LD_VAR 0 3
3921: PUSH
3922: LD_EXP 14
3926: ADD
3927: ST_TO_ADDR
// if LoadVariable ( GladstoneIn07 , debug ) then
3928: LD_STRING GladstoneIn07
3930: PPUSH
3931: LD_EXP 1
3935: PPUSH
3936: CALL_OW 30
3940: IFFALSE 3966
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , mission_prev_prefix ) ;
3942: LD_ADDR_EXP 16
3946: PUSH
3947: LD_STRING Gladstone
3949: PPUSH
3950: LD_EXP 1
3954: NOT
3955: PPUSH
3956: LD_EXP 2
3960: PPUSH
3961: CALL 26634 0 3
3965: ST_TO_ADDR
// if Gladstone then
3966: LD_EXP 16
3970: IFFALSE 3988
// team := team ^ Gladstone ;
3972: LD_ADDR_VAR 0 3
3976: PUSH
3977: LD_VAR 0 3
3981: PUSH
3982: LD_EXP 16
3986: ADD
3987: ST_TO_ADDR
// if LoadVariable ( KhatamIn07 , debug ) then
3988: LD_STRING KhatamIn07
3990: PPUSH
3991: LD_EXP 1
3995: PPUSH
3996: CALL_OW 30
4000: IFFALSE 4026
// Khatam := PrepareUnit ( Khatam , ( not debug ) , mission_prev_prefix ) ;
4002: LD_ADDR_EXP 17
4006: PUSH
4007: LD_STRING Khatam
4009: PPUSH
4010: LD_EXP 1
4014: NOT
4015: PPUSH
4016: LD_EXP 2
4020: PPUSH
4021: CALL 26634 0 3
4025: ST_TO_ADDR
// if Khatam then
4026: LD_EXP 17
4030: IFFALSE 4048
// team := team ^ Khatam ;
4032: LD_ADDR_VAR 0 3
4036: PUSH
4037: LD_VAR 0 3
4041: PUSH
4042: LD_EXP 17
4046: ADD
4047: ST_TO_ADDR
// others := CreateCharacterSet ( 07_others ) ;
4048: LD_ADDR_VAR 0 4
4052: PUSH
4053: LD_STRING 07_others
4055: PPUSH
4056: CALL_OW 31
4060: ST_TO_ADDR
// if others then
4061: LD_VAR 0 4
4065: IFFALSE 4083
// team := team ^ others ;
4067: LD_ADDR_VAR 0 3
4071: PUSH
4072: LD_VAR 0 3
4076: PUSH
4077: LD_VAR 0 4
4081: ADD
4082: ST_TO_ADDR
// if debug then
4083: LD_EXP 1
4087: IFFALSE 4161
// begin InitHc ;
4089: CALL_OW 19
// for i = 1 to 4 do
4093: LD_ADDR_VAR 0 2
4097: PUSH
4098: DOUBLE
4099: LD_INT 1
4101: DEC
4102: ST_TO_ADDR
4103: LD_INT 4
4105: PUSH
4106: FOR_TO
4107: IFFALSE 4159
// begin PrepareHuman ( false , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , 4 ) ;
4109: LD_INT 0
4111: PPUSH
4112: LD_INT 1
4114: PUSH
4115: LD_INT 3
4117: PUSH
4118: EMPTY
4119: LIST
4120: LIST
4121: PUSH
4122: LD_INT 1
4124: PPUSH
4125: LD_INT 2
4127: PPUSH
4128: CALL_OW 12
4132: ARRAY
4133: PPUSH
4134: LD_INT 4
4136: PPUSH
4137: CALL_OW 380
// team := team ^ CreateHuman ;
4141: LD_ADDR_VAR 0 3
4145: PUSH
4146: LD_VAR 0 3
4150: PUSH
4151: CALL_OW 44
4155: ADD
4156: ST_TO_ADDR
// end ;
4157: GO 4106
4159: POP
4160: POP
// end ; m := 0 ;
4161: LD_ADDR_VAR 0 6
4165: PUSH
4166: LD_INT 0
4168: ST_TO_ADDR
// for i in team do
4169: LD_ADDR_VAR 0 2
4173: PUSH
4174: LD_VAR 0 3
4178: PUSH
4179: FOR_IN
4180: IFFALSE 4387
// if GetClass ( i ) = 3 then
4182: LD_VAR 0 2
4186: PPUSH
4187: CALL_OW 257
4191: PUSH
4192: LD_INT 3
4194: EQUAL
4195: IFFALSE 4343
// begin m := m + 1 ;
4197: LD_ADDR_VAR 0 6
4201: PUSH
4202: LD_VAR 0 6
4206: PUSH
4207: LD_INT 1
4209: PLUS
4210: ST_TO_ADDR
// veh := PrepareTank ( 1 , 1 , [ us_medium_wheeled , us_medium_tracked , us_medium_wheeled , us_light_wheeled ] [ m mod 4 + 1 ] , engine_solar , control_manual , [ us_gatling_gun , us_double_gun , us_light_gun , us_radar ] [ m mod 4 + 1 ] , 60 ) ;
4211: LD_ADDR_VAR 0 5
4215: PUSH
4216: LD_INT 1
4218: PPUSH
4219: LD_INT 1
4221: PPUSH
4222: LD_INT 2
4224: PUSH
4225: LD_INT 3
4227: PUSH
4228: LD_INT 2
4230: PUSH
4231: LD_INT 1
4233: PUSH
4234: EMPTY
4235: LIST
4236: LIST
4237: LIST
4238: LIST
4239: PUSH
4240: LD_VAR 0 6
4244: PUSH
4245: LD_INT 4
4247: MOD
4248: PUSH
4249: LD_INT 1
4251: PLUS
4252: ARRAY
4253: PPUSH
4254: LD_INT 2
4256: PPUSH
4257: LD_INT 1
4259: PPUSH
4260: LD_INT 4
4262: PUSH
4263: LD_INT 5
4265: PUSH
4266: LD_INT 3
4268: PUSH
4269: LD_INT 11
4271: PUSH
4272: EMPTY
4273: LIST
4274: LIST
4275: LIST
4276: LIST
4277: PUSH
4278: LD_VAR 0 6
4282: PUSH
4283: LD_INT 4
4285: MOD
4286: PUSH
4287: LD_INT 1
4289: PLUS
4290: ARRAY
4291: PPUSH
4292: LD_INT 60
4294: PPUSH
4295: CALL 500 0 7
4299: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
4300: LD_VAR 0 5
4304: PPUSH
4305: LD_INT 2
4307: PPUSH
4308: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
4312: LD_VAR 0 5
4316: PPUSH
4317: LD_INT 1
4319: PPUSH
4320: LD_INT 0
4322: PPUSH
4323: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
4327: LD_VAR 0 2
4331: PPUSH
4332: LD_VAR 0 5
4336: PPUSH
4337: CALL_OW 52
// end else
4341: GO 4385
// begin if GetClass ( i ) = 2 then
4343: LD_VAR 0 2
4347: PPUSH
4348: CALL_OW 257
4352: PUSH
4353: LD_INT 2
4355: EQUAL
4356: IFFALSE 4370
// SetClass ( i , 1 ) ;
4358: LD_VAR 0 2
4362: PPUSH
4363: LD_INT 1
4365: PPUSH
4366: CALL_OW 336
// PlaceUnitArea ( i , startArea , false ) ;
4370: LD_VAR 0 2
4374: PPUSH
4375: LD_INT 1
4377: PPUSH
4378: LD_INT 0
4380: PPUSH
4381: CALL_OW 49
// end ;
4385: GO 4179
4387: POP
4388: POP
// uc_side := 4 ;
4389: LD_ADDR_OWVAR 20
4393: PUSH
4394: LD_INT 4
4396: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
4397: LD_ADDR_EXP 19
4401: PUSH
4402: LD_STRING Harisson
4404: PPUSH
4405: LD_INT 0
4407: PPUSH
4408: LD_STRING 
4410: PPUSH
4411: CALL 26634 0 3
4415: ST_TO_ADDR
// PrepareScout ;
4416: CALL 4425 0 0
// end ;
4420: LD_VAR 0 1
4424: RET
// function PrepareScout ; var ape ; begin
4425: LD_INT 0
4427: PPUSH
4428: PPUSH
// uc_side := 4 ;
4429: LD_ADDR_OWVAR 20
4433: PUSH
4434: LD_INT 4
4436: ST_TO_ADDR
// uc_nation := 1 ;
4437: LD_ADDR_OWVAR 21
4441: PUSH
4442: LD_INT 1
4444: ST_TO_ADDR
// if LoadVariable ( FrankIn06 , 0 ) then
4445: LD_STRING FrankIn06
4447: PPUSH
4448: LD_INT 0
4450: PPUSH
4451: CALL_OW 30
4455: IFFALSE 4472
// Frank := CreateCharacter ( 06c_Frank ) else
4457: LD_ADDR_EXP 15
4461: PUSH
4462: LD_STRING 06c_Frank
4464: PPUSH
4465: CALL_OW 34
4469: ST_TO_ADDR
4470: GO 4512
// if LoadVariable ( FrankInDelta , 0 ) then
4472: LD_STRING FrankInDelta
4474: PPUSH
4475: LD_INT 0
4477: PPUSH
4478: CALL_OW 30
4482: IFFALSE 4499
// Frank := CreateCharacter ( 05_Frank ) else
4484: LD_ADDR_EXP 15
4488: PUSH
4489: LD_STRING 05_Frank
4491: PPUSH
4492: CALL_OW 34
4496: ST_TO_ADDR
4497: GO 4512
// Frank := CreateCharacter ( 04_Frank ) ;
4499: LD_ADDR_EXP 15
4503: PUSH
4504: LD_STRING 04_Frank
4506: PPUSH
4507: CALL_OW 34
4511: ST_TO_ADDR
// if Frank then
4512: LD_EXP 15
4516: IFFALSE 4649
// begin PlaceUnitArea ( Frank , scoutArea , false ) ;
4518: LD_EXP 15
4522: PPUSH
4523: LD_INT 2
4525: PPUSH
4526: LD_INT 0
4528: PPUSH
4529: CALL_OW 49
// SetClass ( Frank , 1 ) ;
4533: LD_EXP 15
4537: PPUSH
4538: LD_INT 1
4540: PPUSH
4541: CALL_OW 336
// uc_side := 0 ;
4545: LD_ADDR_OWVAR 20
4549: PUSH
4550: LD_INT 0
4552: ST_TO_ADDR
// uc_nation := 0 ;
4553: LD_ADDR_OWVAR 21
4557: PUSH
4558: LD_INT 0
4560: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 0 ) ;
4561: LD_INT 0
4563: PPUSH
4564: LD_INT 12
4566: PPUSH
4567: LD_INT 0
4569: PPUSH
4570: CALL_OW 380
// ape := CreateHuman ;
4574: LD_ADDR_VAR 0 2
4578: PUSH
4579: CALL_OW 44
4583: ST_TO_ADDR
// PlaceUnitXYR ( ape , GetX ( Frank ) , GetY ( Frank ) , 5 , false ) ;
4584: LD_VAR 0 2
4588: PPUSH
4589: LD_EXP 15
4593: PPUSH
4594: CALL_OW 250
4598: PPUSH
4599: LD_EXP 15
4603: PPUSH
4604: CALL_OW 251
4608: PPUSH
4609: LD_INT 5
4611: PPUSH
4612: LD_INT 0
4614: PPUSH
4615: CALL_OW 50
// ComTurnUnit ( ape , Frank ) ;
4619: LD_VAR 0 2
4623: PPUSH
4624: LD_EXP 15
4628: PPUSH
4629: CALL_OW 119
// ComTurnUnit ( Frank , ape ) ;
4633: LD_EXP 15
4637: PPUSH
4638: LD_VAR 0 2
4642: PPUSH
4643: CALL_OW 119
// exit ;
4647: GO 4692
// end ; Kikuchi := PrepareUnit ( Yamoko , false ,  ) ;
4649: LD_ADDR_EXP 18
4653: PUSH
4654: LD_STRING Yamoko
4656: PPUSH
4657: LD_INT 0
4659: PPUSH
4660: LD_STRING 
4662: PPUSH
4663: CALL 26634 0 3
4667: ST_TO_ADDR
// PlaceUnitArea ( Kikuchi , scoutArea , false ) ;
4668: LD_EXP 18
4672: PPUSH
4673: LD_INT 2
4675: PPUSH
4676: LD_INT 0
4678: PPUSH
4679: CALL_OW 49
// ComHold ( Kikuchi ) ;
4683: LD_EXP 18
4687: PPUSH
4688: CALL_OW 140
// end ; end_of_file
4692: LD_VAR 0 1
4696: RET
// export ru_rebuild_list ; export function PrepareRussians ; var i , j , r , un , skill , filter , tmp , dep_list , lab_list , fac_list , breastworks_list , bunker_list , turret_list , weapons_list , personel_counter ; begin
4697: LD_INT 0
4699: PPUSH
4700: PPUSH
4701: PPUSH
4702: PPUSH
4703: PPUSH
4704: PPUSH
4705: PPUSH
4706: PPUSH
4707: PPUSH
4708: PPUSH
4709: PPUSH
4710: PPUSH
4711: PPUSH
4712: PPUSH
4713: PPUSH
4714: PPUSH
// ru_rebuild_list := [ ] ;
4715: LD_ADDR_EXP 20
4719: PUSH
4720: EMPTY
4721: ST_TO_ADDR
// uc_side := 3 ;
4722: LD_ADDR_OWVAR 20
4726: PUSH
4727: LD_INT 3
4729: ST_TO_ADDR
// uc_nation := 3 ;
4730: LD_ADDR_OWVAR 21
4734: PUSH
4735: LD_INT 3
4737: ST_TO_ADDR
// if Difficulty > 1 then
4738: LD_OWVAR 67
4742: PUSH
4743: LD_INT 1
4745: GREATER
4746: IFFALSE 4882
// begin bc_type := b_breastwork ;
4748: LD_ADDR_OWVAR 42
4752: PUSH
4753: LD_INT 31
4755: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 78 , 74 , 2 ) ;
4756: LD_INT 78
4758: PPUSH
4759: LD_INT 74
4761: PPUSH
4762: LD_INT 2
4764: PPUSH
4765: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 171 , 193 , 4 ) ;
4769: LD_INT 171
4771: PPUSH
4772: LD_INT 193
4774: PPUSH
4775: LD_INT 4
4777: PPUSH
4778: CALL_OW 47
// bc_type := b_turret ;
4782: LD_ADDR_OWVAR 42
4786: PUSH
4787: LD_INT 33
4789: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 129 , 96 , 3 ) ;
4790: LD_INT 129
4792: PPUSH
4793: LD_INT 96
4795: PPUSH
4796: LD_INT 3
4798: PPUSH
4799: CALL_OW 47
// if Difficulty > 2 then
4803: LD_OWVAR 67
4807: PUSH
4808: LD_INT 2
4810: GREATER
4811: IFFALSE 4882
// begin RemoveUnit ( HexInfo ( 83 , 141 ) ) ;
4813: LD_INT 83
4815: PPUSH
4816: LD_INT 141
4818: PPUSH
4819: CALL_OW 428
4823: PPUSH
4824: CALL_OW 64
// RemoveUnit ( HexInfo ( 78 , 133 ) ) ;
4828: LD_INT 78
4830: PPUSH
4831: LD_INT 133
4833: PPUSH
4834: CALL_OW 428
4838: PPUSH
4839: CALL_OW 64
// CreateAndPlaceBuildingXYD ( 83 , 141 , 2 ) ;
4843: LD_INT 83
4845: PPUSH
4846: LD_INT 141
4848: PPUSH
4849: LD_INT 2
4851: PPUSH
4852: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 78 , 133 , 2 ) ;
4856: LD_INT 78
4858: PPUSH
4859: LD_INT 133
4861: PPUSH
4862: LD_INT 2
4864: PPUSH
4865: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 145 , 112 , 3 ) ;
4869: LD_INT 145
4871: PPUSH
4872: LD_INT 112
4874: PPUSH
4875: LD_INT 3
4877: PPUSH
4878: CALL_OW 47
// end ; end ; dep_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
4882: LD_ADDR_VAR 0 9
4886: PUSH
4887: LD_INT 22
4889: PUSH
4890: LD_INT 3
4892: PUSH
4893: EMPTY
4894: LIST
4895: LIST
4896: PUSH
4897: LD_INT 2
4899: PUSH
4900: LD_INT 30
4902: PUSH
4903: LD_INT 0
4905: PUSH
4906: EMPTY
4907: LIST
4908: LIST
4909: PUSH
4910: LD_INT 30
4912: PUSH
4913: LD_INT 1
4915: PUSH
4916: EMPTY
4917: LIST
4918: LIST
4919: PUSH
4920: EMPTY
4921: LIST
4922: LIST
4923: LIST
4924: PUSH
4925: EMPTY
4926: LIST
4927: LIST
4928: PPUSH
4929: CALL_OW 69
4933: ST_TO_ADDR
// lab_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
4934: LD_ADDR_VAR 0 10
4938: PUSH
4939: LD_INT 22
4941: PUSH
4942: LD_INT 3
4944: PUSH
4945: EMPTY
4946: LIST
4947: LIST
4948: PUSH
4949: LD_INT 2
4951: PUSH
4952: LD_INT 30
4954: PUSH
4955: LD_INT 6
4957: PUSH
4958: EMPTY
4959: LIST
4960: LIST
4961: PUSH
4962: LD_INT 30
4964: PUSH
4965: LD_INT 7
4967: PUSH
4968: EMPTY
4969: LIST
4970: LIST
4971: PUSH
4972: LD_INT 30
4974: PUSH
4975: LD_INT 8
4977: PUSH
4978: EMPTY
4979: LIST
4980: LIST
4981: PUSH
4982: EMPTY
4983: LIST
4984: LIST
4985: LIST
4986: LIST
4987: PUSH
4988: EMPTY
4989: LIST
4990: LIST
4991: PPUSH
4992: CALL_OW 69
4996: ST_TO_ADDR
// fac_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
4997: LD_ADDR_VAR 0 11
5001: PUSH
5002: LD_INT 22
5004: PUSH
5005: LD_INT 3
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: PUSH
5012: LD_INT 30
5014: PUSH
5015: LD_INT 3
5017: PUSH
5018: EMPTY
5019: LIST
5020: LIST
5021: PUSH
5022: EMPTY
5023: LIST
5024: LIST
5025: PPUSH
5026: CALL_OW 69
5030: ST_TO_ADDR
// breastworks_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
5031: LD_ADDR_VAR 0 12
5035: PUSH
5036: LD_INT 22
5038: PUSH
5039: LD_INT 3
5041: PUSH
5042: EMPTY
5043: LIST
5044: LIST
5045: PUSH
5046: LD_INT 30
5048: PUSH
5049: LD_INT 31
5051: PUSH
5052: EMPTY
5053: LIST
5054: LIST
5055: PUSH
5056: EMPTY
5057: LIST
5058: LIST
5059: PPUSH
5060: CALL_OW 69
5064: ST_TO_ADDR
// bunker_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
5065: LD_ADDR_VAR 0 13
5069: PUSH
5070: LD_INT 22
5072: PUSH
5073: LD_INT 3
5075: PUSH
5076: EMPTY
5077: LIST
5078: LIST
5079: PUSH
5080: LD_INT 30
5082: PUSH
5083: LD_INT 32
5085: PUSH
5086: EMPTY
5087: LIST
5088: LIST
5089: PUSH
5090: EMPTY
5091: LIST
5092: LIST
5093: PPUSH
5094: CALL_OW 69
5098: ST_TO_ADDR
// turret_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
5099: LD_ADDR_VAR 0 14
5103: PUSH
5104: LD_INT 22
5106: PUSH
5107: LD_INT 3
5109: PUSH
5110: EMPTY
5111: LIST
5112: LIST
5113: PUSH
5114: LD_INT 30
5116: PUSH
5117: LD_INT 33
5119: PUSH
5120: EMPTY
5121: LIST
5122: LIST
5123: PUSH
5124: EMPTY
5125: LIST
5126: LIST
5127: PPUSH
5128: CALL_OW 69
5132: ST_TO_ADDR
// weapons_list := [ [ ru_heavy_machine_gun , 5 ] , [ ru_gatling_gun , 50 ] , [ ru_gun , 30 ] , [ ru_heavy_gun , 15 ] ] ;
5133: LD_ADDR_VAR 0 15
5137: PUSH
5138: LD_INT 42
5140: PUSH
5141: LD_INT 5
5143: PUSH
5144: EMPTY
5145: LIST
5146: LIST
5147: PUSH
5148: LD_INT 43
5150: PUSH
5151: LD_INT 50
5153: PUSH
5154: EMPTY
5155: LIST
5156: LIST
5157: PUSH
5158: LD_INT 44
5160: PUSH
5161: LD_INT 30
5163: PUSH
5164: EMPTY
5165: LIST
5166: LIST
5167: PUSH
5168: LD_INT 46
5170: PUSH
5171: LD_INT 15
5173: PUSH
5174: EMPTY
5175: LIST
5176: LIST
5177: PUSH
5178: EMPTY
5179: LIST
5180: LIST
5181: LIST
5182: LIST
5183: ST_TO_ADDR
// personel_counter := [ 0 , 4 , 6 , 3 ] ;
5184: LD_ADDR_VAR 0 16
5188: PUSH
5189: LD_INT 0
5191: PUSH
5192: LD_INT 4
5194: PUSH
5195: LD_INT 6
5197: PUSH
5198: LD_INT 3
5200: PUSH
5201: EMPTY
5202: LIST
5203: LIST
5204: LIST
5205: LIST
5206: ST_TO_ADDR
// skill := [ 4 , 5 , 6 ] [ Difficulty ] ;
5207: LD_ADDR_VAR 0 6
5211: PUSH
5212: LD_INT 4
5214: PUSH
5215: LD_INT 5
5217: PUSH
5218: LD_INT 6
5220: PUSH
5221: EMPTY
5222: LIST
5223: LIST
5224: LIST
5225: PUSH
5226: LD_OWVAR 67
5230: ARRAY
5231: ST_TO_ADDR
// SetBName ( ru_dep_main , am_tukh ) ;
5232: LD_INT 16
5234: PPUSH
5235: LD_STRING am_tukh
5237: PPUSH
5238: CALL_OW 500
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
5242: LD_ADDR_VAR 0 2
5246: PUSH
5247: LD_INT 21
5249: PUSH
5250: LD_INT 3
5252: PUSH
5253: EMPTY
5254: LIST
5255: LIST
5256: PPUSH
5257: CALL_OW 69
5261: PUSH
5262: FOR_IN
5263: IFFALSE 5296
// SetBLevel ( i , [ 4 , 5 , 6 ] [ Difficulty ] ) ;
5265: LD_VAR 0 2
5269: PPUSH
5270: LD_INT 4
5272: PUSH
5273: LD_INT 5
5275: PUSH
5276: LD_INT 6
5278: PUSH
5279: EMPTY
5280: LIST
5281: LIST
5282: LIST
5283: PUSH
5284: LD_OWVAR 67
5288: ARRAY
5289: PPUSH
5290: CALL_OW 241
5294: GO 5262
5296: POP
5297: POP
// for i in dep_list do
5298: LD_ADDR_VAR 0 2
5302: PUSH
5303: LD_VAR 0 9
5307: PUSH
5308: FOR_IN
5309: IFFALSE 5353
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
5311: LD_VAR 0 2
5315: PPUSH
5316: CALL_OW 274
5320: PPUSH
5321: LD_INT 1
5323: PPUSH
5324: LD_INT 1000
5326: PPUSH
5327: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
5331: LD_VAR 0 2
5335: PPUSH
5336: CALL_OW 274
5340: PPUSH
5341: LD_INT 2
5343: PPUSH
5344: LD_INT 1000
5346: PPUSH
5347: CALL_OW 277
// end ;
5351: GO 5308
5353: POP
5354: POP
// InitHc ;
5355: CALL_OW 19
// tmp := bunker_list * [ 45 , 60 , 75 ] [ Difficulty ] div 100 ;
5359: LD_ADDR_VAR 0 8
5363: PUSH
5364: LD_VAR 0 13
5368: PUSH
5369: LD_INT 45
5371: PUSH
5372: LD_INT 60
5374: PUSH
5375: LD_INT 75
5377: PUSH
5378: EMPTY
5379: LIST
5380: LIST
5381: LIST
5382: PUSH
5383: LD_OWVAR 67
5387: ARRAY
5388: MUL
5389: PUSH
5390: LD_INT 100
5392: DIV
5393: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , tmp ) ;
5394: LD_ADDR_VAR 0 16
5398: PUSH
5399: LD_VAR 0 16
5403: PPUSH
5404: LD_INT 1
5406: PPUSH
5407: LD_VAR 0 8
5411: PPUSH
5412: CALL_OW 1
5416: ST_TO_ADDR
// tmp := [ ] ;
5417: LD_ADDR_VAR 0 8
5421: PUSH
5422: EMPTY
5423: ST_TO_ADDR
// for i in bunker_list do
5424: LD_ADDR_VAR 0 2
5428: PUSH
5429: LD_VAR 0 13
5433: PUSH
5434: FOR_IN
5435: IFFALSE 5531
// if i mod 10 + 1 < tmp then
5437: LD_VAR 0 2
5441: PUSH
5442: LD_INT 10
5444: MOD
5445: PUSH
5446: LD_INT 1
5448: PLUS
5449: PUSH
5450: LD_VAR 0 8
5454: LESS
5455: IFFALSE 5500
// tmp := Insert ( tmp , i mod rand ( 3 , 5 ) + 1 , i ) else
5457: LD_ADDR_VAR 0 8
5461: PUSH
5462: LD_VAR 0 8
5466: PPUSH
5467: LD_VAR 0 2
5471: PUSH
5472: LD_INT 3
5474: PPUSH
5475: LD_INT 5
5477: PPUSH
5478: CALL_OW 12
5482: MOD
5483: PUSH
5484: LD_INT 1
5486: PLUS
5487: PPUSH
5488: LD_VAR 0 2
5492: PPUSH
5493: CALL_OW 2
5497: ST_TO_ADDR
5498: GO 5529
// tmp := Insert ( tmp , tmp + 1 , i ) ;
5500: LD_ADDR_VAR 0 8
5504: PUSH
5505: LD_VAR 0 8
5509: PPUSH
5510: LD_VAR 0 8
5514: PUSH
5515: LD_INT 1
5517: PLUS
5518: PPUSH
5519: LD_VAR 0 2
5523: PPUSH
5524: CALL_OW 2
5528: ST_TO_ADDR
5529: GO 5434
5531: POP
5532: POP
// bunker_list := tmp ;
5533: LD_ADDR_VAR 0 13
5537: PUSH
5538: LD_VAR 0 8
5542: ST_TO_ADDR
// for i in bunker_list ^ turret_list do
5543: LD_ADDR_VAR 0 2
5547: PUSH
5548: LD_VAR 0 13
5552: PUSH
5553: LD_VAR 0 14
5557: ADD
5558: PUSH
5559: FOR_IN
5560: IFFALSE 5583
// PlaceWeaponTurret ( i , GetTurretWeaponBase ( i ) ) ;
5562: LD_VAR 0 2
5566: PPUSH
5567: LD_VAR 0 2
5571: PPUSH
5572: CALL 2344 0 1
5576: PPUSH
5577: CALL_OW 431
5581: GO 5559
5583: POP
5584: POP
// while ( personel_counter [ 1 ] ) do
5585: LD_VAR 0 16
5589: PUSH
5590: LD_INT 1
5592: ARRAY
5593: IFFALSE 5701
// begin i := rand ( 1 , bunker_list ) ;
5595: LD_ADDR_VAR 0 2
5599: PUSH
5600: LD_INT 1
5602: PPUSH
5603: LD_VAR 0 13
5607: PPUSH
5608: CALL_OW 12
5612: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5613: LD_INT 0
5615: PPUSH
5616: LD_INT 1
5618: PPUSH
5619: LD_VAR 0 6
5623: PPUSH
5624: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , bunker_list [ i ] ) ;
5628: CALL_OW 44
5632: PPUSH
5633: LD_VAR 0 13
5637: PUSH
5638: LD_VAR 0 2
5642: ARRAY
5643: PPUSH
5644: CALL_OW 52
// bunker_list := Delete ( bunker_list , i ) ;
5648: LD_ADDR_VAR 0 13
5652: PUSH
5653: LD_VAR 0 13
5657: PPUSH
5658: LD_VAR 0 2
5662: PPUSH
5663: CALL_OW 3
5667: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , personel_counter [ 1 ] - 1 ) ;
5668: LD_ADDR_VAR 0 16
5672: PUSH
5673: LD_VAR 0 16
5677: PPUSH
5678: LD_INT 1
5680: PPUSH
5681: LD_VAR 0 16
5685: PUSH
5686: LD_INT 1
5688: ARRAY
5689: PUSH
5690: LD_INT 1
5692: MINUS
5693: PPUSH
5694: CALL_OW 1
5698: ST_TO_ADDR
// end ;
5699: GO 5585
// for i = 1 to personel_counter [ 2 ] do
5701: LD_ADDR_VAR 0 2
5705: PUSH
5706: DOUBLE
5707: LD_INT 1
5709: DEC
5710: ST_TO_ADDR
5711: LD_VAR 0 16
5715: PUSH
5716: LD_INT 2
5718: ARRAY
5719: PUSH
5720: FOR_TO
5721: IFFALSE 5752
// begin PrepareHuman ( false , 2 , skill ) ;
5723: LD_INT 0
5725: PPUSH
5726: LD_INT 2
5728: PPUSH
5729: LD_VAR 0 6
5733: PPUSH
5734: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru_dep_main ) ;
5738: CALL_OW 44
5742: PPUSH
5743: LD_INT 16
5745: PPUSH
5746: CALL_OW 52
// end ;
5750: GO 5720
5752: POP
5753: POP
// for i = 1 to personel_counter [ 3 ] do
5754: LD_ADDR_VAR 0 2
5758: PUSH
5759: DOUBLE
5760: LD_INT 1
5762: DEC
5763: ST_TO_ADDR
5764: LD_VAR 0 16
5768: PUSH
5769: LD_INT 3
5771: ARRAY
5772: PUSH
5773: FOR_TO
5774: IFFALSE 5821
// begin PrepareHuman ( false , 3 , skill ) ;
5776: LD_INT 0
5778: PPUSH
5779: LD_INT 3
5781: PPUSH
5782: LD_VAR 0 6
5786: PPUSH
5787: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , fac_list [ i mod 2 + 1 ] ) ;
5791: CALL_OW 44
5795: PPUSH
5796: LD_VAR 0 11
5800: PUSH
5801: LD_VAR 0 2
5805: PUSH
5806: LD_INT 2
5808: MOD
5809: PUSH
5810: LD_INT 1
5812: PLUS
5813: ARRAY
5814: PPUSH
5815: CALL_OW 52
// end ;
5819: GO 5773
5821: POP
5822: POP
// for i = 1 to personel_counter [ 4 ] do
5823: LD_ADDR_VAR 0 2
5827: PUSH
5828: DOUBLE
5829: LD_INT 1
5831: DEC
5832: ST_TO_ADDR
5833: LD_VAR 0 16
5837: PUSH
5838: LD_INT 4
5840: ARRAY
5841: PUSH
5842: FOR_TO
5843: IFFALSE 5880
// begin PrepareHuman ( false , 4 , skill ) ;
5845: LD_INT 0
5847: PPUSH
5848: LD_INT 4
5850: PPUSH
5851: LD_VAR 0 6
5855: PPUSH
5856: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , lab_list [ 1 ] ) ;
5860: CALL_OW 44
5864: PPUSH
5865: LD_VAR 0 10
5869: PUSH
5870: LD_INT 1
5872: ARRAY
5873: PPUSH
5874: CALL_OW 52
// end ;
5878: GO 5842
5880: POP
5881: POP
// for i in breastworks_list do
5882: LD_ADDR_VAR 0 2
5886: PUSH
5887: LD_VAR 0 12
5891: PUSH
5892: FOR_IN
5893: IFFALSE 6005
// begin r := GetDir ( i ) ;
5895: LD_ADDR_VAR 0 4
5899: PUSH
5900: LD_VAR 0 2
5904: PPUSH
5905: CALL_OW 254
5909: ST_TO_ADDR
// if r > 3 then
5910: LD_VAR 0 4
5914: PUSH
5915: LD_INT 3
5917: GREATER
5918: IFFALSE 5936
// r := r - 3 else
5920: LD_ADDR_VAR 0 4
5924: PUSH
5925: LD_VAR 0 4
5929: PUSH
5930: LD_INT 3
5932: MINUS
5933: ST_TO_ADDR
5934: GO 5950
// r := r + 3 ;
5936: LD_ADDR_VAR 0 4
5940: PUSH
5941: LD_VAR 0 4
5945: PUSH
5946: LD_INT 3
5948: PLUS
5949: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5950: LD_INT 0
5952: PPUSH
5953: LD_INT 1
5955: PPUSH
5956: LD_VAR 0 6
5960: PPUSH
5961: CALL_OW 380
// un := CreateHuman ;
5965: LD_ADDR_VAR 0 5
5969: PUSH
5970: CALL_OW 44
5974: ST_TO_ADDR
// SetDir ( un , r ) ;
5975: LD_VAR 0 5
5979: PPUSH
5980: LD_VAR 0 4
5984: PPUSH
5985: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
5989: LD_VAR 0 5
5993: PPUSH
5994: LD_VAR 0 2
5998: PPUSH
5999: CALL_OW 52
// end ;
6003: GO 5892
6005: POP
6006: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) ;
6007: LD_ADDR_VAR 0 8
6011: PUSH
6012: LD_INT 22
6014: PUSH
6015: LD_INT 3
6017: PUSH
6018: EMPTY
6019: LIST
6020: LIST
6021: PUSH
6022: LD_INT 25
6024: PUSH
6025: LD_INT 3
6027: PUSH
6028: EMPTY
6029: LIST
6030: LIST
6031: PUSH
6032: EMPTY
6033: LIST
6034: LIST
6035: PPUSH
6036: CALL_OW 69
6040: ST_TO_ADDR
// r := [ 4 , 5 , 6 ] [ Difficulty ] ;
6041: LD_ADDR_VAR 0 4
6045: PUSH
6046: LD_INT 4
6048: PUSH
6049: LD_INT 5
6051: PUSH
6052: LD_INT 6
6054: PUSH
6055: EMPTY
6056: LIST
6057: LIST
6058: LIST
6059: PUSH
6060: LD_OWVAR 67
6064: ARRAY
6065: ST_TO_ADDR
// for i = 1 to r do
6066: LD_ADDR_VAR 0 2
6070: PUSH
6071: DOUBLE
6072: LD_INT 1
6074: DEC
6075: ST_TO_ADDR
6076: LD_VAR 0 4
6080: PUSH
6081: FOR_TO
6082: IFFALSE 6255
// begin un := PrepareTank ( 3 , 3 , [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked ] [ i mod 3 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
6084: LD_ADDR_VAR 0 5
6088: PUSH
6089: LD_INT 3
6091: PPUSH
6092: LD_INT 3
6094: PPUSH
6095: LD_INT 22
6097: PUSH
6098: LD_INT 22
6100: PUSH
6101: LD_INT 24
6103: PUSH
6104: EMPTY
6105: LIST
6106: LIST
6107: LIST
6108: PUSH
6109: LD_VAR 0 2
6113: PUSH
6114: LD_INT 3
6116: MOD
6117: PUSH
6118: LD_INT 1
6120: PLUS
6121: ARRAY
6122: PPUSH
6123: LD_INT 1
6125: PPUSH
6126: LD_INT 1
6128: PPUSH
6129: LD_INT 43
6131: PUSH
6132: LD_INT 44
6134: PUSH
6135: LD_INT 42
6137: PUSH
6138: EMPTY
6139: LIST
6140: LIST
6141: LIST
6142: PUSH
6143: LD_VAR 0 2
6147: PUSH
6148: LD_INT 3
6150: MOD
6151: PUSH
6152: LD_INT 1
6154: PLUS
6155: ARRAY
6156: PPUSH
6157: LD_INT 100
6159: PPUSH
6160: CALL 500 0 7
6164: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
6165: LD_VAR 0 5
6169: PPUSH
6170: LD_INT 0
6172: PPUSH
6173: LD_INT 5
6175: PPUSH
6176: CALL_OW 12
6180: PPUSH
6181: CALL_OW 233
// PlaceUnitArea ( un , parkingArea , false ) ;
6185: LD_VAR 0 5
6189: PPUSH
6190: LD_INT 5
6192: PPUSH
6193: LD_INT 0
6195: PPUSH
6196: CALL_OW 49
// if i > tmp - 2 then
6200: LD_VAR 0 2
6204: PUSH
6205: LD_VAR 0 8
6209: PUSH
6210: LD_INT 2
6212: MINUS
6213: GREATER
6214: IFFALSE 6218
// continue ;
6216: GO 6081
// ComExitBuilding ( tmp [ i ] ) ;
6218: LD_VAR 0 8
6222: PUSH
6223: LD_VAR 0 2
6227: ARRAY
6228: PPUSH
6229: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , un ) ;
6233: LD_VAR 0 8
6237: PUSH
6238: LD_VAR 0 2
6242: ARRAY
6243: PPUSH
6244: LD_VAR 0 5
6248: PPUSH
6249: CALL_OW 180
// end ;
6253: GO 6081
6255: POP
6256: POP
// end ;
6257: LD_VAR 0 1
6261: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) do var i , filter , tmp , engs , enemy ;
6262: LD_INT 22
6264: PUSH
6265: LD_INT 3
6267: PUSH
6268: EMPTY
6269: LIST
6270: LIST
6271: PUSH
6272: LD_INT 25
6274: PUSH
6275: LD_INT 2
6277: PUSH
6278: EMPTY
6279: LIST
6280: LIST
6281: PUSH
6282: EMPTY
6283: LIST
6284: LIST
6285: PPUSH
6286: CALL_OW 69
6290: IFFALSE 7022
6292: GO 6294
6294: DISABLE
6295: LD_INT 0
6297: PPUSH
6298: PPUSH
6299: PPUSH
6300: PPUSH
6301: PPUSH
// begin enable ;
6302: ENABLE
// filter := FilterUnitsInArea ( baseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
6303: LD_ADDR_VAR 0 2
6307: PUSH
6308: LD_INT 6
6310: PPUSH
6311: LD_INT 3
6313: PUSH
6314: LD_INT 24
6316: PUSH
6317: LD_INT 1000
6319: PUSH
6320: EMPTY
6321: LIST
6322: LIST
6323: PUSH
6324: EMPTY
6325: LIST
6326: LIST
6327: PUSH
6328: LD_INT 21
6330: PUSH
6331: LD_INT 3
6333: PUSH
6334: EMPTY
6335: LIST
6336: LIST
6337: PUSH
6338: EMPTY
6339: LIST
6340: LIST
6341: PPUSH
6342: CALL_OW 70
6346: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
6347: LD_ADDR_VAR 0 4
6351: PUSH
6352: LD_INT 22
6354: PUSH
6355: LD_INT 3
6357: PUSH
6358: EMPTY
6359: LIST
6360: LIST
6361: PUSH
6362: LD_INT 25
6364: PUSH
6365: LD_INT 2
6367: PUSH
6368: EMPTY
6369: LIST
6370: LIST
6371: PUSH
6372: EMPTY
6373: LIST
6374: LIST
6375: PPUSH
6376: CALL_OW 69
6380: ST_TO_ADDR
// if not filter and not ru_rebuild_list then
6381: LD_VAR 0 2
6385: NOT
6386: PUSH
6387: LD_EXP 20
6391: NOT
6392: AND
6393: IFFALSE 6463
// begin for i in engs do
6395: LD_ADDR_VAR 0 1
6399: PUSH
6400: LD_VAR 0 4
6404: PUSH
6405: FOR_IN
6406: IFFALSE 6461
// if GetLives ( i ) = 1000 and not HasTask ( i ) and not IsInUnit ( i ) then
6408: LD_VAR 0 1
6412: PPUSH
6413: CALL_OW 256
6417: PUSH
6418: LD_INT 1000
6420: EQUAL
6421: PUSH
6422: LD_VAR 0 1
6426: PPUSH
6427: CALL_OW 314
6431: NOT
6432: AND
6433: PUSH
6434: LD_VAR 0 1
6438: PPUSH
6439: CALL_OW 310
6443: NOT
6444: AND
6445: IFFALSE 6459
// ComEnterUnit ( i , ru_dep_main ) ;
6447: LD_VAR 0 1
6451: PPUSH
6452: LD_INT 16
6454: PPUSH
6455: CALL_OW 120
6459: GO 6405
6461: POP
6462: POP
// end ; if UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) then
6463: LD_VAR 0 4
6467: PPUSH
6468: LD_INT 3
6470: PUSH
6471: LD_INT 24
6473: PUSH
6474: LD_INT 650
6476: PUSH
6477: EMPTY
6478: LIST
6479: LIST
6480: PUSH
6481: EMPTY
6482: LIST
6483: LIST
6484: PPUSH
6485: CALL_OW 72
6489: IFFALSE 6582
// begin tmp := UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) ;
6491: LD_ADDR_VAR 0 3
6495: PUSH
6496: LD_VAR 0 4
6500: PPUSH
6501: LD_INT 3
6503: PUSH
6504: LD_INT 24
6506: PUSH
6507: LD_INT 650
6509: PUSH
6510: EMPTY
6511: LIST
6512: LIST
6513: PUSH
6514: EMPTY
6515: LIST
6516: LIST
6517: PPUSH
6518: CALL_OW 72
6522: ST_TO_ADDR
// for i in tmp do
6523: LD_ADDR_VAR 0 1
6527: PUSH
6528: LD_VAR 0 3
6532: PUSH
6533: FOR_IN
6534: IFFALSE 6580
// if not IsInArea ( i , mainBaseArea ) then
6536: LD_VAR 0 1
6540: PPUSH
6541: LD_INT 14
6543: PPUSH
6544: CALL_OW 308
6548: NOT
6549: IFFALSE 6578
// begin ComMoveXY ( i , 129 , 125 ) ;
6551: LD_VAR 0 1
6555: PPUSH
6556: LD_INT 129
6558: PPUSH
6559: LD_INT 125
6561: PPUSH
6562: CALL_OW 111
// AddComWait ( i , 0 0$30 ) ;
6566: LD_VAR 0 1
6570: PPUSH
6571: LD_INT 1050
6573: PPUSH
6574: CALL_OW 202
// end ;
6578: GO 6533
6580: POP
6581: POP
// end ; engs := UnitFilter ( engs , [ f_lives , 650 ] ) ;
6582: LD_ADDR_VAR 0 4
6586: PUSH
6587: LD_VAR 0 4
6591: PPUSH
6592: LD_INT 24
6594: PUSH
6595: LD_INT 650
6597: PUSH
6598: EMPTY
6599: LIST
6600: LIST
6601: PPUSH
6602: CALL_OW 72
6606: ST_TO_ADDR
// if not engs then
6607: LD_VAR 0 4
6611: NOT
6612: IFFALSE 6616
// exit ;
6614: GO 7022
// if filter then
6616: LD_VAR 0 2
6620: IFFALSE 6879
// begin for i in engs do
6622: LD_ADDR_VAR 0 1
6626: PUSH
6627: LD_VAR 0 4
6631: PUSH
6632: FOR_IN
6633: IFFALSE 6657
// if IsInUnit ( i ) then
6635: LD_VAR 0 1
6639: PPUSH
6640: CALL_OW 310
6644: IFFALSE 6655
// ComExitBuilding ( i ) ;
6646: LD_VAR 0 1
6650: PPUSH
6651: CALL_OW 122
6655: GO 6632
6657: POP
6658: POP
// wait ( 3 ) ;
6659: LD_INT 3
6661: PPUSH
6662: CALL_OW 67
// if filter >= 2 and engs >= 2 then
6666: LD_VAR 0 2
6670: PUSH
6671: LD_INT 2
6673: GREATEREQUAL
6674: PUSH
6675: LD_VAR 0 4
6679: PUSH
6680: LD_INT 2
6682: GREATEREQUAL
6683: AND
6684: IFFALSE 6832
// begin for i = 1 to engs / 2 do
6686: LD_ADDR_VAR 0 1
6690: PUSH
6691: DOUBLE
6692: LD_INT 1
6694: DEC
6695: ST_TO_ADDR
6696: LD_VAR 0 4
6700: PUSH
6701: LD_INT 2
6703: DIVREAL
6704: PUSH
6705: FOR_TO
6706: IFFALSE 6752
// if not HasTask ( engs [ i ] ) then
6708: LD_VAR 0 4
6712: PUSH
6713: LD_VAR 0 1
6717: ARRAY
6718: PPUSH
6719: CALL_OW 314
6723: NOT
6724: IFFALSE 6750
// ComRepairBuilding ( engs [ i ] , filter [ 1 ] ) ;
6726: LD_VAR 0 4
6730: PUSH
6731: LD_VAR 0 1
6735: ARRAY
6736: PPUSH
6737: LD_VAR 0 2
6741: PUSH
6742: LD_INT 1
6744: ARRAY
6745: PPUSH
6746: CALL_OW 130
6750: GO 6705
6752: POP
6753: POP
// for i = engs / 2 + 1 to engs do
6754: LD_ADDR_VAR 0 1
6758: PUSH
6759: DOUBLE
6760: LD_VAR 0 4
6764: PUSH
6765: LD_INT 2
6767: DIVREAL
6768: PUSH
6769: LD_INT 1
6771: PLUS
6772: DEC
6773: ST_TO_ADDR
6774: LD_VAR 0 4
6778: PUSH
6779: FOR_TO
6780: IFFALSE 6828
// if not HasTask ( engs [ i ] ) then
6782: LD_VAR 0 4
6786: PUSH
6787: LD_VAR 0 1
6791: ARRAY
6792: PPUSH
6793: CALL_OW 314
6797: NOT
6798: IFFALSE 6826
// ComRepairBuilding ( engs [ i ] , filter [ filter ] ) ;
6800: LD_VAR 0 4
6804: PUSH
6805: LD_VAR 0 1
6809: ARRAY
6810: PPUSH
6811: LD_VAR 0 2
6815: PUSH
6816: LD_VAR 0 2
6820: ARRAY
6821: PPUSH
6822: CALL_OW 130
6826: GO 6779
6828: POP
6829: POP
// end else
6830: GO 6879
// for i in engs do
6832: LD_ADDR_VAR 0 1
6836: PUSH
6837: LD_VAR 0 4
6841: PUSH
6842: FOR_IN
6843: IFFALSE 6877
// if not HasTask ( i ) then
6845: LD_VAR 0 1
6849: PPUSH
6850: CALL_OW 314
6854: NOT
6855: IFFALSE 6875
// ComRepairBuilding ( i , filter [ 1 ] ) ;
6857: LD_VAR 0 1
6861: PPUSH
6862: LD_VAR 0 2
6866: PUSH
6867: LD_INT 1
6869: ARRAY
6870: PPUSH
6871: CALL_OW 130
6875: GO 6842
6877: POP
6878: POP
// end ; enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
6879: LD_ADDR_VAR 0 5
6883: PUSH
6884: LD_INT 81
6886: PUSH
6887: LD_INT 3
6889: PUSH
6890: EMPTY
6891: LIST
6892: LIST
6893: PPUSH
6894: CALL_OW 69
6898: ST_TO_ADDR
// if ru_rebuild_list and not filter then
6899: LD_EXP 20
6903: PUSH
6904: LD_VAR 0 2
6908: NOT
6909: AND
6910: IFFALSE 7022
// begin ComExitBuilding ( engs ) ;
6912: LD_VAR 0 4
6916: PPUSH
6917: CALL_OW 122
// if GetDistUnitXY ( NearestUnitToXY ( enemy , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) > 10 then
6921: LD_VAR 0 5
6925: PPUSH
6926: LD_EXP 20
6930: PUSH
6931: LD_INT 2
6933: ARRAY
6934: PPUSH
6935: LD_EXP 20
6939: PUSH
6940: LD_INT 3
6942: ARRAY
6943: PPUSH
6944: CALL_OW 73
6948: PPUSH
6949: LD_EXP 20
6953: PUSH
6954: LD_INT 2
6956: ARRAY
6957: PPUSH
6958: LD_EXP 20
6962: PUSH
6963: LD_INT 3
6965: ARRAY
6966: PPUSH
6967: CALL_OW 297
6971: PUSH
6972: LD_INT 10
6974: GREATER
6975: IFFALSE 7022
// ComBuild ( engs , ru_rebuild_list [ 1 ] , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] , ru_rebuild_list [ 4 ] ) ;
6977: LD_VAR 0 4
6981: PPUSH
6982: LD_EXP 20
6986: PUSH
6987: LD_INT 1
6989: ARRAY
6990: PPUSH
6991: LD_EXP 20
6995: PUSH
6996: LD_INT 2
6998: ARRAY
6999: PPUSH
7000: LD_EXP 20
7004: PUSH
7005: LD_INT 3
7007: ARRAY
7008: PPUSH
7009: LD_EXP 20
7013: PUSH
7014: LD_INT 4
7016: ARRAY
7017: PPUSH
7018: CALL_OW 145
// end ; end ;
7022: PPOPN 5
7024: END
// every 0 0$1 trigger GetLives ( ru_dep_main ) < 250 do var i , tmp ;
7025: LD_INT 16
7027: PPUSH
7028: CALL_OW 256
7032: PUSH
7033: LD_INT 250
7035: LESS
7036: IFFALSE 7226
7038: GO 7040
7040: DISABLE
7041: LD_INT 0
7043: PPUSH
7044: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
7045: LD_ADDR_VAR 0 2
7049: PUSH
7050: LD_INT 22
7052: PUSH
7053: LD_INT 3
7055: PUSH
7056: EMPTY
7057: LIST
7058: LIST
7059: PUSH
7060: LD_INT 2
7062: PUSH
7063: LD_INT 25
7065: PUSH
7066: LD_INT 1
7068: PUSH
7069: EMPTY
7070: LIST
7071: LIST
7072: PUSH
7073: LD_INT 25
7075: PUSH
7076: LD_INT 3
7078: PUSH
7079: EMPTY
7080: LIST
7081: LIST
7082: PUSH
7083: LD_INT 25
7085: PUSH
7086: LD_INT 4
7088: PUSH
7089: EMPTY
7090: LIST
7091: LIST
7092: PUSH
7093: EMPTY
7094: LIST
7095: LIST
7096: LIST
7097: LIST
7098: PUSH
7099: EMPTY
7100: LIST
7101: LIST
7102: PPUSH
7103: CALL_OW 69
7107: ST_TO_ADDR
// ComExitBuilding ( tmp ) ;
7108: LD_VAR 0 2
7112: PPUSH
7113: CALL_OW 122
// wait ( 3 ) ;
7117: LD_INT 3
7119: PPUSH
7120: CALL_OW 67
// ComMoveXY ( tmp , 156 , 211 ) ;
7124: LD_VAR 0 2
7128: PPUSH
7129: LD_INT 156
7131: PPUSH
7132: LD_INT 211
7134: PPUSH
7135: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7139: LD_INT 35
7141: PPUSH
7142: CALL_OW 67
// for i in tmp do
7146: LD_ADDR_VAR 0 1
7150: PUSH
7151: LD_VAR 0 2
7155: PUSH
7156: FOR_IN
7157: IFFALSE 7217
// if IsInArea ( i , escapeArea ) then
7159: LD_VAR 0 1
7163: PPUSH
7164: LD_INT 15
7166: PPUSH
7167: CALL_OW 308
7171: IFFALSE 7200
// begin RemoveUnit ( i ) ;
7173: LD_VAR 0 1
7177: PPUSH
7178: CALL_OW 64
// tmp := tmp diff i ;
7182: LD_ADDR_VAR 0 2
7186: PUSH
7187: LD_VAR 0 2
7191: PUSH
7192: LD_VAR 0 1
7196: DIFF
7197: ST_TO_ADDR
// end else
7198: GO 7215
// ComMoveXY ( i , 156 , 211 ) ;
7200: LD_VAR 0 1
7204: PPUSH
7205: LD_INT 156
7207: PPUSH
7208: LD_INT 211
7210: PPUSH
7211: CALL_OW 111
7215: GO 7156
7217: POP
7218: POP
// until not tmp ;
7219: LD_VAR 0 2
7223: NOT
7224: IFFALSE 7139
// end ;
7226: PPOPN 2
7228: END
// every 0 0$01 trigger GetLives ( ru_dep_main ) > 250 and FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_outside ] ] ] ) do var i , tmp ;
7229: LD_INT 16
7231: PPUSH
7232: CALL_OW 256
7236: PUSH
7237: LD_INT 250
7239: GREATER
7240: PUSH
7241: LD_INT 22
7243: PUSH
7244: LD_INT 3
7246: PUSH
7247: EMPTY
7248: LIST
7249: LIST
7250: PUSH
7251: LD_INT 25
7253: PUSH
7254: LD_INT 1
7256: PUSH
7257: EMPTY
7258: LIST
7259: LIST
7260: PUSH
7261: LD_INT 56
7263: PUSH
7264: EMPTY
7265: LIST
7266: PUSH
7267: EMPTY
7268: LIST
7269: LIST
7270: LIST
7271: PUSH
7272: EMPTY
7273: LIST
7274: PPUSH
7275: CALL_OW 69
7279: AND
7280: IFFALSE 7392
7282: GO 7284
7284: DISABLE
7285: LD_INT 0
7287: PPUSH
7288: PPUSH
// begin enable ;
7289: ENABLE
// tmp := FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ] ) ;
7290: LD_ADDR_VAR 0 2
7294: PUSH
7295: LD_INT 22
7297: PUSH
7298: LD_INT 3
7300: PUSH
7301: EMPTY
7302: LIST
7303: LIST
7304: PUSH
7305: LD_INT 25
7307: PUSH
7308: LD_INT 1
7310: PUSH
7311: EMPTY
7312: LIST
7313: LIST
7314: PUSH
7315: LD_INT 56
7317: PUSH
7318: EMPTY
7319: LIST
7320: PUSH
7321: LD_INT 3
7323: PUSH
7324: LD_INT 60
7326: PUSH
7327: EMPTY
7328: LIST
7329: PUSH
7330: EMPTY
7331: LIST
7332: LIST
7333: PUSH
7334: EMPTY
7335: LIST
7336: LIST
7337: LIST
7338: LIST
7339: PUSH
7340: EMPTY
7341: LIST
7342: PPUSH
7343: CALL_OW 69
7347: ST_TO_ADDR
// if not tmp then
7348: LD_VAR 0 2
7352: NOT
7353: IFFALSE 7357
// exit ;
7355: GO 7392
// for i in tmp do
7357: LD_ADDR_VAR 0 1
7361: PUSH
7362: LD_VAR 0 2
7366: PUSH
7367: FOR_IN
7368: IFFALSE 7390
// GoToAnotherTower ( i , 0 , 143 , 143 ) ;
7370: LD_VAR 0 1
7374: PPUSH
7375: LD_INT 0
7377: PPUSH
7378: LD_INT 143
7380: PPUSH
7381: LD_INT 143
7383: PPUSH
7384: CALL 818 0 4
7388: GO 7367
7390: POP
7391: POP
// end ;
7392: PPOPN 2
7394: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do var i , tmp , doc ;
7395: LD_INT 22
7397: PUSH
7398: LD_INT 3
7400: PUSH
7401: EMPTY
7402: LIST
7403: LIST
7404: PUSH
7405: LD_INT 25
7407: PUSH
7408: LD_INT 4
7410: PUSH
7411: EMPTY
7412: LIST
7413: LIST
7414: PUSH
7415: EMPTY
7416: LIST
7417: LIST
7418: PPUSH
7419: CALL_OW 69
7423: IFFALSE 7677
7425: GO 7427
7427: DISABLE
7428: LD_INT 0
7430: PPUSH
7431: PPUSH
7432: PPUSH
// begin enable ;
7433: ENABLE
// tmp := FilterUnitsInArea ( mainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7434: LD_ADDR_VAR 0 2
7438: PUSH
7439: LD_INT 14
7441: PPUSH
7442: LD_INT 22
7444: PUSH
7445: LD_INT 3
7447: PUSH
7448: EMPTY
7449: LIST
7450: LIST
7451: PUSH
7452: LD_INT 21
7454: PUSH
7455: LD_INT 1
7457: PUSH
7458: EMPTY
7459: LIST
7460: LIST
7461: PUSH
7462: LD_INT 3
7464: PUSH
7465: LD_INT 24
7467: PUSH
7468: LD_INT 1000
7470: PUSH
7471: EMPTY
7472: LIST
7473: LIST
7474: PUSH
7475: EMPTY
7476: LIST
7477: LIST
7478: PUSH
7479: EMPTY
7480: LIST
7481: LIST
7482: LIST
7483: PPUSH
7484: CALL_OW 70
7488: ST_TO_ADDR
// doc := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
7489: LD_ADDR_VAR 0 3
7493: PUSH
7494: LD_INT 22
7496: PUSH
7497: LD_INT 3
7499: PUSH
7500: EMPTY
7501: LIST
7502: LIST
7503: PUSH
7504: LD_INT 25
7506: PUSH
7507: LD_INT 4
7509: PUSH
7510: EMPTY
7511: LIST
7512: LIST
7513: PUSH
7514: EMPTY
7515: LIST
7516: LIST
7517: PPUSH
7518: CALL_OW 69
7522: ST_TO_ADDR
// if not doc then
7523: LD_VAR 0 3
7527: NOT
7528: IFFALSE 7532
// exit ;
7530: GO 7677
// if not tmp then
7532: LD_VAR 0 2
7536: NOT
7537: IFFALSE 7628
// begin if not IsInUnit ( doc [ 1 ] ) then
7539: LD_VAR 0 3
7543: PUSH
7544: LD_INT 1
7546: ARRAY
7547: PPUSH
7548: CALL_OW 310
7552: NOT
7553: IFFALSE 7626
// ComEnterUnit ( doc , FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ) ;
7555: LD_VAR 0 3
7559: PPUSH
7560: LD_INT 22
7562: PUSH
7563: LD_INT 3
7565: PUSH
7566: EMPTY
7567: LIST
7568: LIST
7569: PUSH
7570: LD_INT 2
7572: PUSH
7573: LD_INT 30
7575: PUSH
7576: LD_INT 6
7578: PUSH
7579: EMPTY
7580: LIST
7581: LIST
7582: PUSH
7583: LD_INT 30
7585: PUSH
7586: LD_INT 7
7588: PUSH
7589: EMPTY
7590: LIST
7591: LIST
7592: PUSH
7593: LD_INT 30
7595: PUSH
7596: LD_INT 8
7598: PUSH
7599: EMPTY
7600: LIST
7601: LIST
7602: PUSH
7603: EMPTY
7604: LIST
7605: LIST
7606: LIST
7607: LIST
7608: PUSH
7609: EMPTY
7610: LIST
7611: LIST
7612: PPUSH
7613: CALL_OW 69
7617: PUSH
7618: LD_INT 1
7620: ARRAY
7621: PPUSH
7622: CALL_OW 120
// exit ;
7626: GO 7677
// end ; if IsInUnit ( doc [ 1 ] ) then
7628: LD_VAR 0 3
7632: PUSH
7633: LD_INT 1
7635: ARRAY
7636: PPUSH
7637: CALL_OW 310
7641: IFFALSE 7652
// ComExitBuilding ( doc ) ;
7643: LD_VAR 0 3
7647: PPUSH
7648: CALL_OW 122
// wait ( 3 ) ;
7652: LD_INT 3
7654: PPUSH
7655: CALL_OW 67
// ComHeal ( doc , tmp [ 1 ] ) ;
7659: LD_VAR 0 3
7663: PPUSH
7664: LD_VAR 0 2
7668: PUSH
7669: LD_INT 1
7671: ARRAY
7672: PPUSH
7673: CALL_OW 128
// end ;
7677: PPOPN 3
7679: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do var i , tmp , attacking , areas , area ;
7680: LD_INT 22
7682: PUSH
7683: LD_INT 3
7685: PUSH
7686: EMPTY
7687: LIST
7688: LIST
7689: PUSH
7690: LD_INT 25
7692: PUSH
7693: LD_INT 3
7695: PUSH
7696: EMPTY
7697: LIST
7698: LIST
7699: PUSH
7700: EMPTY
7701: LIST
7702: LIST
7703: PPUSH
7704: CALL_OW 69
7708: PUSH
7709: LD_INT 22
7711: PUSH
7712: LD_INT 3
7714: PUSH
7715: EMPTY
7716: LIST
7717: LIST
7718: PUSH
7719: LD_INT 21
7721: PUSH
7722: LD_INT 2
7724: PUSH
7725: EMPTY
7726: LIST
7727: LIST
7728: PUSH
7729: EMPTY
7730: LIST
7731: LIST
7732: PPUSH
7733: CALL_OW 69
7737: AND
7738: IFFALSE 8152
7740: GO 7742
7742: DISABLE
7743: LD_INT 0
7745: PPUSH
7746: PPUSH
7747: PPUSH
7748: PPUSH
7749: PPUSH
// begin enable ;
7750: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
7751: LD_ADDR_VAR 0 2
7755: PUSH
7756: LD_INT 22
7758: PUSH
7759: LD_INT 3
7761: PUSH
7762: EMPTY
7763: LIST
7764: LIST
7765: PUSH
7766: LD_INT 21
7768: PUSH
7769: LD_INT 2
7771: PUSH
7772: EMPTY
7773: LIST
7774: LIST
7775: PUSH
7776: LD_INT 3
7778: PUSH
7779: LD_INT 58
7781: PUSH
7782: EMPTY
7783: LIST
7784: PUSH
7785: EMPTY
7786: LIST
7787: LIST
7788: PUSH
7789: EMPTY
7790: LIST
7791: LIST
7792: LIST
7793: PPUSH
7794: CALL_OW 69
7798: ST_TO_ADDR
// areas := [ sectorAlpha , sectorBeta , sectorDelta , mainBaseArea ] ;
7799: LD_ADDR_VAR 0 4
7803: PUSH
7804: LD_INT 10
7806: PUSH
7807: LD_INT 11
7809: PUSH
7810: LD_INT 12
7812: PUSH
7813: LD_INT 14
7815: PUSH
7816: EMPTY
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: ST_TO_ADDR
// area := 0 ;
7822: LD_ADDR_VAR 0 5
7826: PUSH
7827: LD_INT 0
7829: ST_TO_ADDR
// attacking := false ;
7830: LD_ADDR_VAR 0 3
7834: PUSH
7835: LD_INT 0
7837: ST_TO_ADDR
// for i in tmp do
7838: LD_ADDR_VAR 0 1
7842: PUSH
7843: LD_VAR 0 2
7847: PUSH
7848: FOR_IN
7849: IFFALSE 7935
// if GetDistUnits ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) < 10 then
7851: LD_VAR 0 1
7855: PPUSH
7856: LD_INT 22
7858: PUSH
7859: LD_INT 1
7861: PUSH
7862: EMPTY
7863: LIST
7864: LIST
7865: PPUSH
7866: CALL_OW 69
7870: PPUSH
7871: LD_VAR 0 1
7875: PPUSH
7876: CALL_OW 74
7880: PPUSH
7881: CALL_OW 296
7885: PUSH
7886: LD_INT 10
7888: LESS
7889: IFFALSE 7933
// begin ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
7891: LD_VAR 0 1
7895: PPUSH
7896: LD_INT 22
7898: PUSH
7899: LD_INT 1
7901: PUSH
7902: EMPTY
7903: LIST
7904: LIST
7905: PPUSH
7906: CALL_OW 69
7910: PPUSH
7911: LD_VAR 0 1
7915: PPUSH
7916: CALL_OW 74
7920: PPUSH
7921: CALL_OW 115
// attacking := true ;
7925: LD_ADDR_VAR 0 3
7929: PUSH
7930: LD_INT 1
7932: ST_TO_ADDR
// end ;
7933: GO 7848
7935: POP
7936: POP
// if attacking then
7937: LD_VAR 0 3
7941: IFFALSE 7945
// exit ;
7943: GO 8152
// for i in areas do
7945: LD_ADDR_VAR 0 1
7949: PUSH
7950: LD_VAR 0 4
7954: PUSH
7955: FOR_IN
7956: IFFALSE 7993
// if FilterUnitsInArea ( i , [ f_side , 1 ] ) then
7958: LD_VAR 0 1
7962: PPUSH
7963: LD_INT 22
7965: PUSH
7966: LD_INT 1
7968: PUSH
7969: EMPTY
7970: LIST
7971: LIST
7972: PPUSH
7973: CALL_OW 70
7977: IFFALSE 7991
// begin area := i ;
7979: LD_ADDR_VAR 0 5
7983: PUSH
7984: LD_VAR 0 1
7988: ST_TO_ADDR
// break ;
7989: GO 7993
// end ;
7991: GO 7955
7993: POP
7994: POP
// if area then
7995: LD_VAR 0 5
7999: IFFALSE 8152
// begin for i in tmp do
8001: LD_ADDR_VAR 0 1
8005: PUSH
8006: LD_VAR 0 2
8010: PUSH
8011: FOR_IN
8012: IFFALSE 8150
// begin if GetFuel ( i ) < 33 then
8014: LD_VAR 0 1
8018: PPUSH
8019: CALL_OW 261
8023: PUSH
8024: LD_INT 33
8026: LESS
8027: IFFALSE 8041
// SetFuel ( i , 33 ) ;
8029: LD_VAR 0 1
8033: PPUSH
8034: LD_INT 33
8036: PPUSH
8037: CALL_OW 240
// if GetDistUnits ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) < 10 then
8041: LD_VAR 0 1
8045: PPUSH
8046: LD_INT 22
8048: PUSH
8049: LD_INT 1
8051: PUSH
8052: EMPTY
8053: LIST
8054: LIST
8055: PPUSH
8056: CALL_OW 69
8060: PPUSH
8061: LD_VAR 0 1
8065: PPUSH
8066: CALL_OW 74
8070: PPUSH
8071: CALL_OW 296
8075: PUSH
8076: LD_INT 10
8078: LESS
8079: IFFALSE 8117
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) else
8081: LD_VAR 0 1
8085: PPUSH
8086: LD_INT 22
8088: PUSH
8089: LD_INT 1
8091: PUSH
8092: EMPTY
8093: LIST
8094: LIST
8095: PPUSH
8096: CALL_OW 69
8100: PPUSH
8101: LD_VAR 0 1
8105: PPUSH
8106: CALL_OW 74
8110: PPUSH
8111: CALL_OW 115
8115: GO 8148
// if not IsInArea ( i , area ) then
8117: LD_VAR 0 1
8121: PPUSH
8122: LD_VAR 0 5
8126: PPUSH
8127: CALL_OW 308
8131: NOT
8132: IFFALSE 8148
// ComMoveToArea ( i , area ) ;
8134: LD_VAR 0 1
8138: PPUSH
8139: LD_VAR 0 5
8143: PPUSH
8144: CALL_OW 113
// end ;
8148: GO 8011
8150: POP
8151: POP
// end ; end ;
8152: PPOPN 5
8154: END
// every 15 15$00 trigger Difficulty > 1 do var i , j , un , veh , time , count ;
8155: LD_OWVAR 67
8159: PUSH
8160: LD_INT 1
8162: GREATER
8163: IFFALSE 8440
8165: GO 8167
8167: DISABLE
8168: LD_INT 0
8170: PPUSH
8171: PPUSH
8172: PPUSH
8173: PPUSH
8174: PPUSH
8175: PPUSH
// begin uc_side := 3 ;
8176: LD_ADDR_OWVAR 20
8180: PUSH
8181: LD_INT 3
8183: ST_TO_ADDR
// uc_nation := 3 ;
8184: LD_ADDR_OWVAR 21
8188: PUSH
8189: LD_INT 3
8191: ST_TO_ADDR
// time := [ 9 9$00 , 7 7$00 , 6 6$00 ] [ Difficulty ] ;
8192: LD_ADDR_VAR 0 5
8196: PUSH
8197: LD_INT 18900
8199: PUSH
8200: LD_INT 14700
8202: PUSH
8203: LD_INT 12600
8205: PUSH
8206: EMPTY
8207: LIST
8208: LIST
8209: LIST
8210: PUSH
8211: LD_OWVAR 67
8215: ARRAY
8216: ST_TO_ADDR
// count := [ 2 , 2 , 3 ] [ Difficulty ] ;
8217: LD_ADDR_VAR 0 6
8221: PUSH
8222: LD_INT 2
8224: PUSH
8225: LD_INT 2
8227: PUSH
8228: LD_INT 3
8230: PUSH
8231: EMPTY
8232: LIST
8233: LIST
8234: LIST
8235: PUSH
8236: LD_OWVAR 67
8240: ARRAY
8241: ST_TO_ADDR
// for i = 1 to count do
8242: LD_ADDR_VAR 0 1
8246: PUSH
8247: DOUBLE
8248: LD_INT 1
8250: DEC
8251: ST_TO_ADDR
8252: LD_VAR 0 6
8256: PUSH
8257: FOR_TO
8258: IFFALSE 8438
// begin wait ( time ) ;
8260: LD_VAR 0 5
8264: PPUSH
8265: CALL_OW 67
// for j = 1 to rand ( 1 , Difficulty ) do
8269: LD_ADDR_VAR 0 2
8273: PUSH
8274: DOUBLE
8275: LD_INT 1
8277: DEC
8278: ST_TO_ADDR
8279: LD_INT 1
8281: PPUSH
8282: LD_OWVAR 67
8286: PPUSH
8287: CALL_OW 12
8291: PUSH
8292: FOR_TO
8293: IFFALSE 8434
// begin veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 80 ) ;
8295: LD_ADDR_VAR 0 4
8299: PUSH
8300: LD_INT 3
8302: PPUSH
8303: LD_INT 3
8305: PPUSH
8306: LD_INT 22
8308: PPUSH
8309: LD_INT 1
8311: PPUSH
8312: LD_INT 1
8314: PPUSH
8315: LD_INT 43
8317: PUSH
8318: LD_INT 44
8320: PUSH
8321: LD_INT 42
8323: PUSH
8324: EMPTY
8325: LIST
8326: LIST
8327: LIST
8328: PUSH
8329: LD_VAR 0 1
8333: PUSH
8334: LD_INT 3
8336: MOD
8337: PUSH
8338: LD_INT 1
8340: PLUS
8341: ARRAY
8342: PPUSH
8343: LD_INT 80
8345: PPUSH
8346: CALL 500 0 7
8350: ST_TO_ADDR
// PlaceUnitArea ( veh , southArea , false ) ;
8351: LD_VAR 0 4
8355: PPUSH
8356: LD_INT 13
8358: PPUSH
8359: LD_INT 0
8361: PPUSH
8362: CALL_OW 49
// PrepareHuman ( false , 3 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
8366: LD_INT 0
8368: PPUSH
8369: LD_INT 3
8371: PPUSH
8372: LD_INT 4
8374: PUSH
8375: LD_INT 5
8377: PUSH
8378: LD_INT 5
8380: PUSH
8381: EMPTY
8382: LIST
8383: LIST
8384: LIST
8385: PUSH
8386: LD_OWVAR 67
8390: ARRAY
8391: PPUSH
8392: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
8396: CALL_OW 44
8400: PPUSH
8401: LD_VAR 0 4
8405: PPUSH
8406: CALL_OW 52
// wait ( 0 0$01 ) ;
8410: LD_INT 35
8412: PPUSH
8413: CALL_OW 67
// ComMoveXY ( veh , 143 , 143 ) ;
8417: LD_VAR 0 4
8421: PPUSH
8422: LD_INT 143
8424: PPUSH
8425: LD_INT 143
8427: PPUSH
8428: CALL_OW 111
// end ;
8432: GO 8292
8434: POP
8435: POP
// end ;
8436: GO 8257
8438: POP
8439: POP
// end ;
8440: PPOPN 6
8442: END
// every 8 8$00 do var i , un , time ;
8443: GO 8445
8445: DISABLE
8446: LD_INT 0
8448: PPUSH
8449: PPUSH
8450: PPUSH
// begin time := [ 3 3$00 , 1 1$00 , 0 0$30 ] ;
8451: LD_ADDR_VAR 0 3
8455: PUSH
8456: LD_INT 6300
8458: PUSH
8459: LD_INT 2100
8461: PUSH
8462: LD_INT 1050
8464: PUSH
8465: EMPTY
8466: LIST
8467: LIST
8468: LIST
8469: ST_TO_ADDR
// wait ( time ) ;
8470: LD_VAR 0 3
8474: PPUSH
8475: CALL_OW 67
// uc_side := 3 ;
8479: LD_ADDR_OWVAR 20
8483: PUSH
8484: LD_INT 3
8486: ST_TO_ADDR
// uc_nation := 3 ;
8487: LD_ADDR_OWVAR 21
8491: PUSH
8492: LD_INT 3
8494: ST_TO_ADDR
// for i = 1 to 2 do
8495: LD_ADDR_VAR 0 1
8499: PUSH
8500: DOUBLE
8501: LD_INT 1
8503: DEC
8504: ST_TO_ADDR
8505: LD_INT 2
8507: PUSH
8508: FOR_TO
8509: IFFALSE 8572
// begin PrepareHuman ( false , 1 , 4 ) ;
8511: LD_INT 0
8513: PPUSH
8514: LD_INT 1
8516: PPUSH
8517: LD_INT 4
8519: PPUSH
8520: CALL_OW 380
// un := CreateHuman ;
8524: LD_ADDR_VAR 0 2
8528: PUSH
8529: CALL_OW 44
8533: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_dep_main ) ;
8534: LD_VAR 0 2
8538: PPUSH
8539: LD_INT 16
8541: PPUSH
8542: CALL_OW 52
// ComExitBuilding ( un ) ;
8546: LD_VAR 0 2
8550: PPUSH
8551: CALL_OW 122
// AddComAgressiveMove ( un , 41 , 76 ) ;
8555: LD_VAR 0 2
8559: PPUSH
8560: LD_INT 41
8562: PPUSH
8563: LD_INT 76
8565: PPUSH
8566: CALL_OW 174
// end ;
8570: GO 8508
8572: POP
8573: POP
// end ; end_of_file
8574: PPOPN 3
8576: END
// export function Action ; begin
8577: LD_INT 0
8579: PPUSH
// CenterNowOnXY ( 28 , 3 ) ;
8580: LD_INT 28
8582: PPUSH
8583: LD_INT 3
8585: PPUSH
8586: CALL_OW 86
// PlaceSeeing ( 41 , 76 , 1 , 10 ) ;
8590: LD_INT 41
8592: PPUSH
8593: LD_INT 76
8595: PPUSH
8596: LD_INT 1
8598: PPUSH
8599: LD_INT 10
8601: PPUSH
8602: CALL_OW 330
// RemoveSeeing ( 41 , 76 , 1 ) ;
8606: LD_INT 41
8608: PPUSH
8609: LD_INT 76
8611: PPUSH
8612: LD_INT 1
8614: PPUSH
8615: CALL_OW 331
// InGameOn ;
8619: CALL_OW 8
// SayRadio ( Harisson , D2-Har-1 ) ;
8623: LD_EXP 19
8627: PPUSH
8628: LD_STRING D2-Har-1
8630: PPUSH
8631: CALL_OW 94
// InGameOff ;
8635: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
8639: LD_STRING M1
8641: PPUSH
8642: CALL_OW 337
// end ;
8646: LD_VAR 0 1
8650: RET
// every 0 0$1 trigger buildings_counter > 1 do var un ;
8651: LD_EXP 4
8655: PUSH
8656: LD_INT 1
8658: GREATER
8659: IFFALSE 8750
8661: GO 8663
8663: DISABLE
8664: LD_INT 0
8666: PPUSH
// begin un := GetRandom ( sex_male ) [ 1 ] ;
8667: LD_ADDR_VAR 0 1
8671: PUSH
8672: LD_INT 1
8674: PPUSH
8675: CALL 588 0 1
8679: PUSH
8680: LD_INT 1
8682: ARRAY
8683: ST_TO_ADDR
// Say ( un , D2a-Sol1-1 ) ;
8684: LD_VAR 0 1
8688: PPUSH
8689: LD_STRING D2a-Sol1-1
8691: PPUSH
8692: CALL_OW 88
// if not un then
8696: LD_VAR 0 1
8700: NOT
8701: IFFALSE 8732
// begin un := GetRandom ( sex_female ) [ 1 ] ;
8703: LD_ADDR_VAR 0 1
8707: PUSH
8708: LD_INT 2
8710: PPUSH
8711: CALL 588 0 1
8715: PUSH
8716: LD_INT 1
8718: ARRAY
8719: ST_TO_ADDR
// Say ( un , D2a-FSol1-1 ) ;
8720: LD_VAR 0 1
8724: PPUSH
8725: LD_STRING D2a-FSol1-1
8727: PPUSH
8728: CALL_OW 88
// end ; if Khatam then
8732: LD_EXP 17
8736: IFFALSE 8750
// Say ( Khatam , D3b-Khat-3 ) ;
8738: LD_EXP 17
8742: PPUSH
8743: LD_STRING D3b-Khat-3
8745: PPUSH
8746: CALL_OW 88
// end ;
8750: PPOPN 1
8752: END
// every 0 0$1 trigger Frank and not Kikuchi and FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , GetX ( Frank ) , GetY ( Frank ) , 7 ] ] ) and not InBattle ( 1 ) and not InBattle ( 4 ) do var i , ape ;
8753: LD_EXP 15
8757: PUSH
8758: LD_EXP 18
8762: NOT
8763: AND
8764: PUSH
8765: LD_INT 22
8767: PUSH
8768: LD_INT 1
8770: PUSH
8771: EMPTY
8772: LIST
8773: LIST
8774: PUSH
8775: LD_INT 92
8777: PUSH
8778: LD_EXP 15
8782: PPUSH
8783: CALL_OW 250
8787: PUSH
8788: LD_EXP 15
8792: PPUSH
8793: CALL_OW 251
8797: PUSH
8798: LD_INT 7
8800: PUSH
8801: EMPTY
8802: LIST
8803: LIST
8804: LIST
8805: LIST
8806: PUSH
8807: EMPTY
8808: LIST
8809: LIST
8810: PPUSH
8811: CALL_OW 69
8815: AND
8816: PUSH
8817: LD_INT 1
8819: PPUSH
8820: CALL_OW 463
8824: NOT
8825: AND
8826: PUSH
8827: LD_INT 4
8829: PPUSH
8830: CALL_OW 463
8834: NOT
8835: AND
8836: IFFALSE 9423
8838: GO 8840
8840: DISABLE
8841: LD_INT 0
8843: PPUSH
8844: PPUSH
// begin InGameOn ;
8845: CALL_OW 8
// ape := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
8849: LD_ADDR_VAR 0 2
8853: PUSH
8854: LD_INT 22
8856: PUSH
8857: LD_INT 0
8859: PUSH
8860: EMPTY
8861: LIST
8862: LIST
8863: PUSH
8864: LD_INT 25
8866: PUSH
8867: LD_INT 12
8869: PUSH
8870: EMPTY
8871: LIST
8872: LIST
8873: PUSH
8874: EMPTY
8875: LIST
8876: LIST
8877: PPUSH
8878: CALL_OW 69
8882: ST_TO_ADDR
// ape := NearestUnitToUnit ( ape , Frank ) ;
8883: LD_ADDR_VAR 0 2
8887: PUSH
8888: LD_VAR 0 2
8892: PPUSH
8893: LD_EXP 15
8897: PPUSH
8898: CALL_OW 74
8902: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , Frank , 20 ] ] ) do
8903: LD_ADDR_VAR 0 1
8907: PUSH
8908: LD_INT 22
8910: PUSH
8911: LD_INT 1
8913: PUSH
8914: EMPTY
8915: LIST
8916: LIST
8917: PUSH
8918: LD_INT 21
8920: PUSH
8921: LD_INT 1
8923: PUSH
8924: EMPTY
8925: LIST
8926: LIST
8927: PUSH
8928: LD_INT 91
8930: PUSH
8931: LD_EXP 15
8935: PUSH
8936: LD_INT 20
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: LIST
8943: PUSH
8944: EMPTY
8945: LIST
8946: LIST
8947: LIST
8948: PPUSH
8949: CALL_OW 69
8953: PUSH
8954: FOR_IN
8955: IFFALSE 8973
// ComTurnUnit ( i , Frank ) ;
8957: LD_VAR 0 1
8961: PPUSH
8962: LD_EXP 15
8966: PPUSH
8967: CALL_OW 119
8971: GO 8954
8973: POP
8974: POP
// SetSide ( Frank , 1 ) ;
8975: LD_EXP 15
8979: PPUSH
8980: LD_INT 1
8982: PPUSH
8983: CALL_OW 235
// ComMoveUnit ( JMM , Frank ) ;
8987: LD_EXP 9
8991: PPUSH
8992: LD_EXP 15
8996: PPUSH
8997: CALL_OW 112
// AddComTurnUnit ( JMM , Frank ) ;
9001: LD_EXP 9
9005: PPUSH
9006: LD_EXP 15
9010: PPUSH
9011: CALL_OW 179
// CenterOnUnits ( Frank ) ;
9015: LD_EXP 15
9019: PPUSH
9020: CALL_OW 85
// Say ( Frank , D3a-Frank-1 ) ;
9024: LD_EXP 15
9028: PPUSH
9029: LD_STRING D3a-Frank-1
9031: PPUSH
9032: CALL_OW 88
// ComMoveXY ( ape , 42 , 78 ) ;
9036: LD_VAR 0 2
9040: PPUSH
9041: LD_INT 42
9043: PPUSH
9044: LD_INT 78
9046: PPUSH
9047: CALL_OW 111
// AddComTurnUnit ( ape , Frank ) ;
9051: LD_VAR 0 2
9055: PPUSH
9056: LD_EXP 15
9060: PPUSH
9061: CALL_OW 179
// if Lisa then
9065: LD_EXP 14
9069: IFFALSE 9083
// Say ( Lisa , D3a-Lisa-1 ) ;
9071: LD_EXP 14
9075: PPUSH
9076: LD_STRING D3a-Lisa-1
9078: PPUSH
9079: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
9083: LD_EXP 9
9087: PPUSH
9088: LD_STRING D3a-JMM-1
9090: PPUSH
9091: CALL_OW 88
// if Cyrus then
9095: LD_EXP 13
9099: IFFALSE 9113
// Say ( Cyrus , D3a-Cyrus-1 ) ;
9101: LD_EXP 13
9105: PPUSH
9106: LD_STRING D3a-Cyrus-1
9108: PPUSH
9109: CALL_OW 88
// if GetRandom ( sex_male ) then
9113: LD_INT 1
9115: PPUSH
9116: CALL 588 0 1
9120: IFFALSE 9141
// Say ( GetRandom ( sex_male ) [ 1 ] , D3a-Sol1-1 ) ;
9122: LD_INT 1
9124: PPUSH
9125: CALL 588 0 1
9129: PUSH
9130: LD_INT 1
9132: ARRAY
9133: PPUSH
9134: LD_STRING D3a-Sol1-1
9136: PPUSH
9137: CALL_OW 88
// if GetRandom ( sex_female ) then
9141: LD_INT 2
9143: PPUSH
9144: CALL 588 0 1
9148: IFFALSE 9169
// Say ( GetRandom ( sex_female ) [ 1 ] , D3a-FSol1-1 ) ;
9150: LD_INT 2
9152: PPUSH
9153: CALL 588 0 1
9157: PUSH
9158: LD_INT 1
9160: ARRAY
9161: PPUSH
9162: LD_STRING D3a-FSol1-1
9164: PPUSH
9165: CALL_OW 88
// if Gladstone then
9169: LD_EXP 16
9173: IFFALSE 9187
// Say ( Gladstone , D3a-Glad-1 ) ;
9175: LD_EXP 16
9179: PPUSH
9180: LD_STRING D3a-Glad-1
9182: PPUSH
9183: CALL_OW 88
// ComMoveXY ( ape , 60 , 113 ) ;
9187: LD_VAR 0 2
9191: PPUSH
9192: LD_INT 60
9194: PPUSH
9195: LD_INT 113
9197: PPUSH
9198: CALL_OW 111
// Say ( Frank , D3a-Frank-2 ) ;
9202: LD_EXP 15
9206: PPUSH
9207: LD_STRING D3a-Frank-2
9209: PPUSH
9210: CALL_OW 88
// ComTurnUnit ( Frank , JMM ) ;
9214: LD_EXP 15
9218: PPUSH
9219: LD_EXP 9
9223: PPUSH
9224: CALL_OW 119
// Say ( JMM , D3a-JMM-2 ) ;
9228: LD_EXP 9
9232: PPUSH
9233: LD_STRING D3a-JMM-2
9235: PPUSH
9236: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9240: LD_INT 1
9242: PPUSH
9243: LD_INT 4
9245: PPUSH
9246: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9250: LD_INT 85
9252: PPUSH
9253: LD_INT 134
9255: PPUSH
9256: CALL_OW 84
// Say ( Frank , D3a-Frank-3 ) ;
9260: LD_EXP 15
9264: PPUSH
9265: LD_STRING D3a-Frank-3
9267: PPUSH
9268: CALL_OW 88
// Wait ( 0 0$01 ) ;
9272: LD_INT 35
9274: PPUSH
9275: CALL_OW 67
// CenterOnXY ( 166 , 136 ) ;
9279: LD_INT 166
9281: PPUSH
9282: LD_INT 136
9284: PPUSH
9285: CALL_OW 84
// Say ( JMM , D3a-JMM-3 ) ;
9289: LD_EXP 9
9293: PPUSH
9294: LD_STRING D3a-JMM-3
9296: PPUSH
9297: CALL_OW 88
// Wait ( 0 0$01 ) ;
9301: LD_INT 35
9303: PPUSH
9304: CALL_OW 67
// CenterNowOnUnits ( Frank ) ;
9308: LD_EXP 15
9312: PPUSH
9313: CALL_OW 87
// Say ( Frank , D3a-Frank-4 ) ;
9317: LD_EXP 15
9321: PPUSH
9322: LD_STRING D3a-Frank-4
9324: PPUSH
9325: CALL_OW 88
// if Lisa then
9329: LD_EXP 14
9333: IFFALSE 9347
// Say ( Lisa , D3a-Lisa-4 ) ;
9335: LD_EXP 14
9339: PPUSH
9340: LD_STRING D3a-Lisa-4
9342: PPUSH
9343: CALL_OW 88
// Say ( JMM , D3a-JMM-4 ) ;
9347: LD_EXP 9
9351: PPUSH
9352: LD_STRING D3a-JMM-4
9354: PPUSH
9355: CALL_OW 88
// Say ( Frank , D3a-Frank-5 ) ;
9359: LD_EXP 15
9363: PPUSH
9364: LD_STRING D3a-Frank-5
9366: PPUSH
9367: CALL_OW 88
// Say ( JMM , D3a-JMM-5 ) ;
9371: LD_EXP 9
9375: PPUSH
9376: LD_STRING D3a-JMM-5
9378: PPUSH
9379: CALL_OW 88
// Say ( Frank , D3a-Frank-6 ) ;
9383: LD_EXP 15
9387: PPUSH
9388: LD_STRING D3a-Frank-6
9390: PPUSH
9391: CALL_OW 88
// Say ( JMM , D3a-JMM-6 ) ;
9395: LD_EXP 9
9399: PPUSH
9400: LD_STRING D3a-JMM-6
9402: PPUSH
9403: CALL_OW 88
// Say ( Frank , D3a-Frank-7 ) ;
9407: LD_EXP 15
9411: PPUSH
9412: LD_STRING D3a-Frank-7
9414: PPUSH
9415: CALL_OW 88
// InGameOff ;
9419: CALL_OW 9
// end ;
9423: PPOPN 2
9425: END
// every 0 0$1 trigger Kikuchi and not Frank and FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , GetX ( Kikuchi ) , GetY ( Kikuchi ) , 7 ] ] ) and not InBattle ( 1 ) and not InBattle ( 4 ) do
9426: LD_EXP 18
9430: PUSH
9431: LD_EXP 15
9435: NOT
9436: AND
9437: PUSH
9438: LD_INT 22
9440: PUSH
9441: LD_INT 1
9443: PUSH
9444: EMPTY
9445: LIST
9446: LIST
9447: PUSH
9448: LD_INT 92
9450: PUSH
9451: LD_EXP 18
9455: PPUSH
9456: CALL_OW 250
9460: PUSH
9461: LD_EXP 18
9465: PPUSH
9466: CALL_OW 251
9470: PUSH
9471: LD_INT 7
9473: PUSH
9474: EMPTY
9475: LIST
9476: LIST
9477: LIST
9478: LIST
9479: PUSH
9480: EMPTY
9481: LIST
9482: LIST
9483: PPUSH
9484: CALL_OW 69
9488: AND
9489: PUSH
9490: LD_INT 1
9492: PPUSH
9493: CALL_OW 463
9497: NOT
9498: AND
9499: PUSH
9500: LD_INT 4
9502: PPUSH
9503: CALL_OW 463
9507: NOT
9508: AND
9509: IFFALSE 9689
9511: GO 9513
9513: DISABLE
// begin InGameOn ;
9514: CALL_OW 8
// ComTurnUnit ( JMM , Kikuchi ) ;
9518: LD_EXP 9
9522: PPUSH
9523: LD_EXP 18
9527: PPUSH
9528: CALL_OW 119
// ComTurnUnit ( Kikuchi , JMM ) ;
9532: LD_EXP 18
9536: PPUSH
9537: LD_EXP 9
9541: PPUSH
9542: CALL_OW 119
// CenterOnUnits ( Kikuchi ) ;
9546: LD_EXP 18
9550: PPUSH
9551: CALL_OW 85
// Say ( Kikuchi , D3b-Yam-1 ) ;
9555: LD_EXP 18
9559: PPUSH
9560: LD_STRING D3b-Yam-1
9562: PPUSH
9563: CALL_OW 88
// Say ( JMM , D3b-JMM-1 ) ;
9567: LD_EXP 9
9571: PPUSH
9572: LD_STRING D3b-JMM-1
9574: PPUSH
9575: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9579: LD_INT 1
9581: PPUSH
9582: LD_INT 4
9584: PPUSH
9585: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9589: LD_INT 85
9591: PPUSH
9592: LD_INT 134
9594: PPUSH
9595: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-2 ) ;
9599: LD_EXP 18
9603: PPUSH
9604: LD_STRING D3b-Yam-2
9606: PPUSH
9607: CALL_OW 88
// Wait ( 0 0$01 ) ;
9611: LD_INT 35
9613: PPUSH
9614: CALL_OW 67
// Say ( JMM , D3b-JMM-2 ) ;
9618: LD_EXP 9
9622: PPUSH
9623: LD_STRING D3b-JMM-2
9625: PPUSH
9626: CALL_OW 88
// CenterOnXY ( 166 , 136 ) ;
9630: LD_INT 166
9632: PPUSH
9633: LD_INT 136
9635: PPUSH
9636: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-3 ) ;
9640: LD_EXP 18
9644: PPUSH
9645: LD_STRING D3b-Yam-3
9647: PPUSH
9648: CALL_OW 88
// CenterNowOnUnits ( JMM ) ;
9652: LD_EXP 9
9656: PPUSH
9657: CALL_OW 87
// Say ( JMM , D3b-JMM-3a ) ;
9661: LD_EXP 9
9665: PPUSH
9666: LD_STRING D3b-JMM-3a
9668: PPUSH
9669: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
9673: LD_EXP 18
9677: PPUSH
9678: LD_INT 1
9680: PPUSH
9681: CALL_OW 235
// InGameOff ;
9685: CALL_OW 9
// end ;
9689: END
// every 0 0$1 trigger FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var un , x , tw , i ;
9690: LD_INT 7
9692: PPUSH
9693: LD_INT 22
9695: PUSH
9696: LD_INT 1
9698: PUSH
9699: EMPTY
9700: LIST
9701: LIST
9702: PUSH
9703: LD_INT 3
9705: PUSH
9706: LD_INT 24
9708: PUSH
9709: LD_INT 1000
9711: PUSH
9712: EMPTY
9713: LIST
9714: LIST
9715: PUSH
9716: EMPTY
9717: LIST
9718: LIST
9719: PUSH
9720: EMPTY
9721: LIST
9722: LIST
9723: PPUSH
9724: CALL_OW 70
9728: IFFALSE 10184
9730: GO 9732
9732: DISABLE
9733: LD_INT 0
9735: PPUSH
9736: PPUSH
9737: PPUSH
9738: PPUSH
// begin repeat wait ( 0 0$1 ) ;
9739: LD_INT 35
9741: PPUSH
9742: CALL_OW 67
// un := FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
9746: LD_ADDR_VAR 0 1
9750: PUSH
9751: LD_INT 7
9753: PPUSH
9754: LD_INT 22
9756: PUSH
9757: LD_INT 1
9759: PUSH
9760: EMPTY
9761: LIST
9762: LIST
9763: PUSH
9764: LD_INT 3
9766: PUSH
9767: LD_INT 24
9769: PUSH
9770: LD_INT 1000
9772: PUSH
9773: EMPTY
9774: LIST
9775: LIST
9776: PUSH
9777: EMPTY
9778: LIST
9779: LIST
9780: PUSH
9781: EMPTY
9782: LIST
9783: LIST
9784: PPUSH
9785: CALL_OW 70
9789: ST_TO_ADDR
// if not un then
9790: LD_VAR 0 1
9794: NOT
9795: IFFALSE 9799
// continue ;
9797: GO 9739
// tw := NearbyTowerHasEnergy ( un [ 1 ] ) ;
9799: LD_ADDR_VAR 0 3
9803: PUSH
9804: LD_VAR 0 1
9808: PUSH
9809: LD_INT 1
9811: ARRAY
9812: PPUSH
9813: CALL 2172 0 1
9817: ST_TO_ADDR
// until tw ;
9818: LD_VAR 0 3
9822: IFFALSE 9739
// DialogueOn ;
9824: CALL_OW 6
// CenterNowOnUnits ( tw ) ;
9828: LD_VAR 0 3
9832: PPUSH
9833: CALL_OW 87
// if Lisa then
9837: LD_EXP 14
9841: IFFALSE 9869
// begin Say ( Lisa , D5-Lisa-1 ) ;
9843: LD_EXP 14
9847: PPUSH
9848: LD_STRING D5-Lisa-1
9850: PPUSH
9851: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
9855: LD_EXP 9
9859: PPUSH
9860: LD_STRING D5-JMM-1a
9862: PPUSH
9863: CALL_OW 88
// end else
9867: GO 9881
// Say ( JMM , D5-JMM-1 ) ;
9869: LD_EXP 9
9873: PPUSH
9874: LD_STRING D5-JMM-1
9876: PPUSH
9877: CALL_OW 88
// DialogueOff ;
9881: CALL_OW 7
// while ( true ) do
9885: LD_INT 1
9887: IFFALSE 9943
// begin wait ( 0 0$01 ) ;
9889: LD_INT 35
9891: PPUSH
9892: CALL_OW 67
// x := FilterUnitsExceptArea ( northElectro , [ [ f_btype , b_oil_power ] , [ f_see , 1 ] ] ) ;
9896: LD_ADDR_VAR 0 2
9900: PUSH
9901: LD_INT 8
9903: PPUSH
9904: LD_INT 30
9906: PUSH
9907: LD_INT 26
9909: PUSH
9910: EMPTY
9911: LIST
9912: LIST
9913: PUSH
9914: LD_INT 101
9916: PUSH
9917: LD_INT 1
9919: PUSH
9920: EMPTY
9921: LIST
9922: LIST
9923: PUSH
9924: EMPTY
9925: LIST
9926: LIST
9927: PPUSH
9928: CALL_OW 71
9932: ST_TO_ADDR
// if x then
9933: LD_VAR 0 2
9937: IFFALSE 9941
// break ;
9939: GO 9943
// end ;
9941: GO 9885
// CenterOnUnits ( x [ 1 ] ) ;
9943: LD_VAR 0 2
9947: PUSH
9948: LD_INT 1
9950: ARRAY
9951: PPUSH
9952: CALL_OW 85
// if Frank and GetSide ( Frank ) = 1 then
9956: LD_EXP 15
9960: PUSH
9961: LD_EXP 15
9965: PPUSH
9966: CALL_OW 255
9970: PUSH
9971: LD_INT 1
9973: EQUAL
9974: AND
9975: IFFALSE 9991
// Say ( Frank , D5a-Frank-1 ) else
9977: LD_EXP 15
9981: PPUSH
9982: LD_STRING D5a-Frank-1
9984: PPUSH
9985: CALL_OW 88
9989: GO 10045
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
9991: LD_EXP 18
9995: PUSH
9996: LD_EXP 18
10000: PPUSH
10001: CALL_OW 255
10005: PUSH
10006: LD_INT 1
10008: EQUAL
10009: AND
10010: IFFALSE 10026
// Say ( Kikuchi , D5a-Yam-1 ) else
10012: LD_EXP 18
10016: PPUSH
10017: LD_STRING D5a-Yam-1
10019: PPUSH
10020: CALL_OW 88
10024: GO 10045
// Say ( GetRandom ( sex_male ) [ 1 ] , D5a-Sol1-1 ) ;
10026: LD_INT 1
10028: PPUSH
10029: CALL 588 0 1
10033: PUSH
10034: LD_INT 1
10036: ARRAY
10037: PPUSH
10038: LD_STRING D5a-Sol1-1
10040: PPUSH
10041: CALL_OW 88
// Say ( JMM , D5a-JMM-1 ) ;
10045: LD_EXP 9
10049: PPUSH
10050: LD_STRING D5a-JMM-1
10052: PPUSH
10053: CALL_OW 88
// if Cyrus then
10057: LD_EXP 13
10061: IFFALSE 10075
// Say ( Cyrus , D5a-Cyrus-1 ) ;
10063: LD_EXP 13
10067: PPUSH
10068: LD_STRING D5a-Cyrus-1
10070: PPUSH
10071: CALL_OW 88
// x := false ;
10075: LD_ADDR_VAR 0 2
10079: PUSH
10080: LD_INT 0
10082: ST_TO_ADDR
// while ( true ) do
10083: LD_INT 1
10085: IFFALSE 10172
// begin wait ( 0 0$01 ) ;
10087: LD_INT 35
10089: PPUSH
10090: CALL_OW 67
// for i in FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) diff ru_dep_west do
10094: LD_ADDR_VAR 0 4
10098: PUSH
10099: LD_INT 2
10101: PUSH
10102: LD_INT 30
10104: PUSH
10105: LD_INT 0
10107: PUSH
10108: EMPTY
10109: LIST
10110: LIST
10111: PUSH
10112: LD_INT 30
10114: PUSH
10115: LD_INT 1
10117: PUSH
10118: EMPTY
10119: LIST
10120: LIST
10121: PUSH
10122: EMPTY
10123: LIST
10124: LIST
10125: LIST
10126: PPUSH
10127: CALL_OW 69
10131: PUSH
10132: LD_INT 1
10134: DIFF
10135: PUSH
10136: FOR_IN
10137: IFFALSE 10160
// if BaseNeedEnergy ( i ) then
10139: LD_VAR 0 4
10143: PPUSH
10144: CALL 1297 0 1
10148: IFFALSE 10158
// x := true ;
10150: LD_ADDR_VAR 0 2
10154: PUSH
10155: LD_INT 1
10157: ST_TO_ADDR
10158: GO 10136
10160: POP
10161: POP
// if x then
10162: LD_VAR 0 2
10166: IFFALSE 10170
// break ;
10168: GO 10172
// end ;
10170: GO 10083
// Say ( JMM , D5b-JMM-1 ) ;
10172: LD_EXP 9
10176: PPUSH
10177: LD_STRING D5b-JMM-1
10179: PPUSH
10180: CALL_OW 88
// end ;
10184: PPOPN 4
10186: END
// every 0 0$1 trigger time_to_end [ 1 ] < tick do
10187: LD_EXP 5
10191: PUSH
10192: LD_INT 1
10194: ARRAY
10195: PUSH
10196: LD_OWVAR 1
10200: LESS
10201: IFFALSE 10401
10203: GO 10205
10205: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10206: LD_INT 16
10208: PPUSH
10209: CALL_OW 301
10213: NOT
10214: IFFALSE 10237
// begin SayRadio ( Harisson , D3b-Har-3 ) ;
10216: LD_EXP 19
10220: PPUSH
10221: LD_STRING D3b-Har-3
10223: PPUSH
10224: CALL_OW 94
// ChangeMissionObjectives ( M2a ) ;
10228: LD_STRING M2a
10230: PPUSH
10231: CALL_OW 337
// end else
10235: GO 10256
// begin SayRadio ( Harisson , D3b-Har-3a ) ;
10237: LD_EXP 19
10241: PPUSH
10242: LD_STRING D3b-Har-3a
10244: PPUSH
10245: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
10249: LD_STRING M2
10251: PPUSH
10252: CALL_OW 337
// end ; can_end := true ;
10256: LD_ADDR_EXP 6
10260: PUSH
10261: LD_INT 1
10263: ST_TO_ADDR
// SetAreaMapShow ( endArea , 1 ) ;
10264: LD_INT 9
10266: PPUSH
10267: LD_INT 1
10269: PPUSH
10270: CALL_OW 424
// Wait ( 0 0$02 ) ;
10274: LD_INT 70
10276: PPUSH
10277: CALL_OW 67
// if Lisa then
10281: LD_EXP 14
10285: IFFALSE 10299
// Say ( Lisa , D3b-Lisa ) ;
10287: LD_EXP 14
10291: PPUSH
10292: LD_STRING D3b-Lisa
10294: PPUSH
10295: CALL_OW 88
// if Bobby then
10299: LD_EXP 12
10303: IFFALSE 10317
// Say ( Bobby , D3b-Bobby-3 ) ;
10305: LD_EXP 12
10309: PPUSH
10310: LD_STRING D3b-Bobby-3
10312: PPUSH
10313: CALL_OW 88
// if Cyrus then
10317: LD_EXP 13
10321: IFFALSE 10335
// Say ( Cyrus , D3b-Cyrus-3 ) ;
10323: LD_EXP 13
10327: PPUSH
10328: LD_STRING D3b-Cyrus-3
10330: PPUSH
10331: CALL_OW 88
// if Frank and GetSide ( Frank ) = 1 then
10335: LD_EXP 15
10339: PUSH
10340: LD_EXP 15
10344: PPUSH
10345: CALL_OW 255
10349: PUSH
10350: LD_INT 1
10352: EQUAL
10353: AND
10354: IFFALSE 10368
// Say ( Frank , D3b-Frank-3 ) ;
10356: LD_EXP 15
10360: PPUSH
10361: LD_STRING D3b-Frank-3
10363: PPUSH
10364: CALL_OW 88
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
10368: LD_EXP 18
10372: PUSH
10373: LD_EXP 18
10377: PPUSH
10378: CALL_OW 255
10382: PUSH
10383: LD_INT 1
10385: EQUAL
10386: AND
10387: IFFALSE 10401
// Say ( Kikuchi , D3b-Yam-4 ) ;
10389: LD_EXP 18
10393: PPUSH
10394: LD_STRING D3b-Yam-4
10396: PPUSH
10397: CALL_OW 88
// end ;
10401: END
// every 0 0$1 trigger time_to_end [ 2 ] < tick do
10402: LD_EXP 5
10406: PUSH
10407: LD_INT 2
10409: ARRAY
10410: PUSH
10411: LD_OWVAR 1
10415: LESS
10416: IFFALSE 10448
10418: GO 10420
10420: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
10421: LD_EXP 19
10425: PPUSH
10426: LD_STRING D4-Har-1
10428: PPUSH
10429: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
10433: LD_STRING M3
10435: PPUSH
10436: CALL_OW 337
// must_end := true ;
10440: LD_ADDR_EXP 7
10444: PUSH
10445: LD_INT 1
10447: ST_TO_ADDR
// end ;
10448: END
// every 0 0$01 trigger time_to_end [ 3 ] < tick do
10449: LD_EXP 5
10453: PUSH
10454: LD_INT 3
10456: ARRAY
10457: PUSH
10458: LD_OWVAR 1
10462: LESS
10463: IFFALSE 10494
10465: GO 10467
10467: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10468: LD_INT 16
10470: PPUSH
10471: CALL_OW 301
10475: NOT
10476: IFFALSE 10487
// YouLost ( TimeOut1 ) else
10478: LD_STRING TimeOut1
10480: PPUSH
10481: CALL_OW 104
10485: GO 10494
// YouLost ( TimeOut2 ) ;
10487: LD_STRING TimeOut2
10489: PPUSH
10490: CALL_OW 104
// end ;
10494: END
// every 0 0$1 trigger IsInArea ( JMM , endArea ) and can_end do var wait_on , i , tmp , m1 , m2 , m3 ;
10495: LD_EXP 9
10499: PPUSH
10500: LD_INT 9
10502: PPUSH
10503: CALL_OW 308
10507: PUSH
10508: LD_EXP 6
10512: AND
10513: IFFALSE 11613
10515: GO 10517
10517: DISABLE
10518: LD_INT 0
10520: PPUSH
10521: PPUSH
10522: PPUSH
10523: PPUSH
10524: PPUSH
10525: PPUSH
// begin wait_on := false ;
10526: LD_ADDR_VAR 0 1
10530: PUSH
10531: LD_INT 0
10533: ST_TO_ADDR
// if FilterPeople ( 1 ) + 0 > ( FilterPeopleArea ( 1 , endArea ) ^ FilterDriversArea ( 1 , endArea ) ) + 0 then
10534: LD_INT 1
10536: PPUSH
10537: CALL 1374 0 1
10541: PUSH
10542: LD_INT 0
10544: PLUS
10545: PUSH
10546: LD_INT 1
10548: PPUSH
10549: LD_INT 9
10551: PPUSH
10552: CALL 1465 0 2
10556: PUSH
10557: LD_INT 1
10559: PPUSH
10560: LD_INT 9
10562: PPUSH
10563: CALL 1512 0 2
10567: ADD
10568: PUSH
10569: LD_INT 0
10571: PLUS
10572: GREATER
10573: IFFALSE 10622
// case Query ( Q1 ) of 1 :
10575: LD_STRING Q1
10577: PPUSH
10578: CALL_OW 97
10582: PUSH
10583: LD_INT 1
10585: DOUBLE
10586: EQUAL
10587: IFTRUE 10591
10589: GO 10602
10591: POP
// wait_on := true ; 2 :
10592: LD_ADDR_VAR 0 1
10596: PUSH
10597: LD_INT 1
10599: ST_TO_ADDR
10600: GO 10622
10602: LD_INT 2
10604: DOUBLE
10605: EQUAL
10606: IFTRUE 10610
10608: GO 10621
10610: POP
// wait_on := false ; end ;
10611: LD_ADDR_VAR 0 1
10615: PUSH
10616: LD_INT 0
10618: ST_TO_ADDR
10619: GO 10622
10621: POP
// repeat wait ( 0 0$01 ) ;
10622: LD_INT 35
10624: PPUSH
10625: CALL_OW 67
// until ( not wait_on ) or ( FilterPeople ( 1 ) + 0 ) = ( FilterPeopleArea ( 1 , endArea ) ^ FilterDriversArea ( 1 , endArea ) ) + 0 ;
10629: LD_VAR 0 1
10633: NOT
10634: PUSH
10635: LD_INT 1
10637: PPUSH
10638: CALL 1374 0 1
10642: PUSH
10643: LD_INT 0
10645: PLUS
10646: PUSH
10647: LD_INT 1
10649: PPUSH
10650: LD_INT 9
10652: PPUSH
10653: CALL 1465 0 2
10657: PUSH
10658: LD_INT 1
10660: PPUSH
10661: LD_INT 9
10663: PPUSH
10664: CALL 1512 0 2
10668: ADD
10669: PUSH
10670: LD_INT 0
10672: PLUS
10673: EQUAL
10674: OR
10675: IFFALSE 10622
// DialogueOn ;
10677: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
10681: LD_EXP 9
10685: PPUSH
10686: CALL_OW 87
// Say ( JMM , D6-JMM-1 ) ;
10690: LD_EXP 9
10694: PPUSH
10695: LD_STRING D6-JMM-1
10697: PPUSH
10698: CALL_OW 88
// SayRadio ( Harisson , D6-Har-1 ) ;
10702: LD_EXP 19
10706: PPUSH
10707: LD_STRING D6-Har-1
10709: PPUSH
10710: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
10714: LD_EXP 9
10718: PPUSH
10719: LD_STRING D6-JMM-2
10721: PPUSH
10722: CALL_OW 88
// SayRadio ( Harisson , D6-Har-2 ) ;
10726: LD_EXP 19
10730: PPUSH
10731: LD_STRING D6-Har-2
10733: PPUSH
10734: CALL_OW 94
// Say ( JMM , D6-JMM-3 ) ;
10738: LD_EXP 9
10742: PPUSH
10743: LD_STRING D6-JMM-3
10745: PPUSH
10746: CALL_OW 88
// SayRadio ( Harisson , D6-Har-3 ) ;
10750: LD_EXP 19
10754: PPUSH
10755: LD_STRING D6-Har-3
10757: PPUSH
10758: CALL_OW 94
// Say ( JMM , D6-JMM-4 ) ;
10762: LD_EXP 9
10766: PPUSH
10767: LD_STRING D6-JMM-4
10769: PPUSH
10770: CALL_OW 88
// SayRadio ( Harisson , D6-Har-4 ) ;
10774: LD_EXP 19
10778: PPUSH
10779: LD_STRING D6-Har-4
10781: PPUSH
10782: CALL_OW 94
// Say ( JMM , D6-JMM-5 ) ;
10786: LD_EXP 9
10790: PPUSH
10791: LD_STRING D6-JMM-5
10793: PPUSH
10794: CALL_OW 88
// DialogueOff ;
10798: CALL_OW 7
// m1 := false ;
10802: LD_ADDR_VAR 0 4
10806: PUSH
10807: LD_INT 0
10809: ST_TO_ADDR
// m2 := false ;
10810: LD_ADDR_VAR 0 5
10814: PUSH
10815: LD_INT 0
10817: ST_TO_ADDR
// m3 := false ;
10818: LD_ADDR_VAR 0 6
10822: PUSH
10823: LD_INT 0
10825: ST_TO_ADDR
// tmp := FilterBuildings ( 3 ) ;
10826: LD_ADDR_VAR 0 3
10830: PUSH
10831: LD_INT 3
10833: PPUSH
10834: CALL 1643 0 1
10838: ST_TO_ADDR
// if tmp >= 35 then
10839: LD_VAR 0 3
10843: PUSH
10844: LD_INT 35
10846: GREATEREQUAL
10847: IFFALSE 10884
// begin AddMedal ( Destroy1 , - 1 ) ;
10849: LD_STRING Destroy1
10851: PPUSH
10852: LD_INT 1
10854: NEG
10855: PPUSH
10856: CALL_OW 101
// AddMedal ( Destroy2 , - 1 ) ;
10860: LD_STRING Destroy2
10862: PPUSH
10863: LD_INT 1
10865: NEG
10866: PPUSH
10867: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
10871: LD_STRING Destroy3
10873: PPUSH
10874: LD_INT 1
10876: NEG
10877: PPUSH
10878: CALL_OW 101
// end else
10882: GO 10995
// begin AddMedal ( Destroy1 , 1 ) ;
10884: LD_STRING Destroy1
10886: PPUSH
10887: LD_INT 1
10889: PPUSH
10890: CALL_OW 101
// m1 := true ;
10894: LD_ADDR_VAR 0 4
10898: PUSH
10899: LD_INT 1
10901: ST_TO_ADDR
// if tmp >= 25 then
10902: LD_VAR 0 3
10906: PUSH
10907: LD_INT 25
10909: GREATEREQUAL
10910: IFFALSE 10936
// begin AddMedal ( Destroy2 , - 1 ) ;
10912: LD_STRING Destroy2
10914: PPUSH
10915: LD_INT 1
10917: NEG
10918: PPUSH
10919: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
10923: LD_STRING Destroy3
10925: PPUSH
10926: LD_INT 1
10928: NEG
10929: PPUSH
10930: CALL_OW 101
// end else
10934: GO 10995
// begin AddMedal ( Destroy2 , 1 ) ;
10936: LD_STRING Destroy2
10938: PPUSH
10939: LD_INT 1
10941: PPUSH
10942: CALL_OW 101
// m2 := true ;
10946: LD_ADDR_VAR 0 5
10950: PUSH
10951: LD_INT 1
10953: ST_TO_ADDR
// if tmp >= 15 then
10954: LD_VAR 0 3
10958: PUSH
10959: LD_INT 15
10961: GREATEREQUAL
10962: IFFALSE 10977
// AddMedal ( Destroy3 , - 1 ) else
10964: LD_STRING Destroy3
10966: PPUSH
10967: LD_INT 1
10969: NEG
10970: PPUSH
10971: CALL_OW 101
10975: GO 10995
// begin AddMedal ( Destroy3 , 1 ) ;
10977: LD_STRING Destroy3
10979: PPUSH
10980: LD_INT 1
10982: PPUSH
10983: CALL_OW 101
// m3 := true ;
10987: LD_ADDR_VAR 0 6
10991: PUSH
10992: LD_INT 1
10994: ST_TO_ADDR
// end ; end ; end ; if tick <= 32 32$00 then
10995: LD_OWVAR 1
10999: PUSH
11000: LD_INT 67200
11002: LESSEQUAL
11003: IFFALSE 11012
// SetAchievement ( ACH_ASPEED_7 ) ;
11005: LD_STRING ACH_ASPEED_7
11007: PPUSH
11008: CALL_OW 543
// if m1 and m2 and m3 and Difficulty = 3 then
11012: LD_VAR 0 4
11016: PUSH
11017: LD_VAR 0 5
11021: AND
11022: PUSH
11023: LD_VAR 0 6
11027: AND
11028: PUSH
11029: LD_OWVAR 67
11033: PUSH
11034: LD_INT 3
11036: EQUAL
11037: AND
11038: IFFALSE 11050
// SetAchievementEX ( ACH_AMER , 7 ) ;
11040: LD_STRING ACH_AMER
11042: PPUSH
11043: LD_INT 7
11045: PPUSH
11046: CALL_OW 564
// GiveMedals ( MAIN ) ;
11050: LD_STRING MAIN
11052: PPUSH
11053: CALL_OW 102
// tmp := FilterPeopleArea ( 1 , endArea ) union FilterDriversArea ( 1 , endArea ) ;
11057: LD_ADDR_VAR 0 3
11061: PUSH
11062: LD_INT 1
11064: PPUSH
11065: LD_INT 9
11067: PPUSH
11068: CALL 1465 0 2
11072: PUSH
11073: LD_INT 1
11075: PPUSH
11076: LD_INT 9
11078: PPUSH
11079: CALL 1512 0 2
11083: UNION
11084: ST_TO_ADDR
// RewardPeople ( tmp ) ;
11085: LD_VAR 0 3
11089: PPUSH
11090: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
11094: LD_EXP 9
11098: PPUSH
11099: LD_EXP 3
11103: PUSH
11104: LD_STRING JMM
11106: STR
11107: PPUSH
11108: CALL_OW 38
// if Brown in tmp then
11112: LD_EXP 10
11116: PUSH
11117: LD_VAR 0 3
11121: IN
11122: IFFALSE 11142
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
11124: LD_EXP 10
11128: PPUSH
11129: LD_EXP 3
11133: PUSH
11134: LD_STRING Brown
11136: STR
11137: PPUSH
11138: CALL_OW 38
// if Donaldson in tmp then
11142: LD_EXP 11
11146: PUSH
11147: LD_VAR 0 3
11151: IN
11152: IFFALSE 11172
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
11154: LD_EXP 11
11158: PPUSH
11159: LD_EXP 3
11163: PUSH
11164: LD_STRING Donaldson
11166: STR
11167: PPUSH
11168: CALL_OW 38
// if Bobby in tmp then
11172: LD_EXP 12
11176: PUSH
11177: LD_VAR 0 3
11181: IN
11182: IFFALSE 11202
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
11184: LD_EXP 12
11188: PPUSH
11189: LD_EXP 3
11193: PUSH
11194: LD_STRING Bobby
11196: STR
11197: PPUSH
11198: CALL_OW 38
// if Cyrus in tmp then
11202: LD_EXP 13
11206: PUSH
11207: LD_VAR 0 3
11211: IN
11212: IFFALSE 11232
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
11214: LD_EXP 13
11218: PPUSH
11219: LD_EXP 3
11223: PUSH
11224: LD_STRING Cyrus
11226: STR
11227: PPUSH
11228: CALL_OW 38
// if Lisa in tmp then
11232: LD_EXP 14
11236: PUSH
11237: LD_VAR 0 3
11241: IN
11242: IFFALSE 11262
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
11244: LD_EXP 14
11248: PPUSH
11249: LD_EXP 3
11253: PUSH
11254: LD_STRING Lisa
11256: STR
11257: PPUSH
11258: CALL_OW 38
// if Frank in tmp then
11262: LD_EXP 15
11266: PUSH
11267: LD_VAR 0 3
11271: IN
11272: IFFALSE 11292
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
11274: LD_EXP 15
11278: PPUSH
11279: LD_EXP 3
11283: PUSH
11284: LD_STRING Frank
11286: STR
11287: PPUSH
11288: CALL_OW 38
// if Gladstone in tmp then
11292: LD_EXP 16
11296: PUSH
11297: LD_VAR 0 3
11301: IN
11302: IFFALSE 11322
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
11304: LD_EXP 16
11308: PPUSH
11309: LD_EXP 3
11313: PUSH
11314: LD_STRING Gladstone
11316: STR
11317: PPUSH
11318: CALL_OW 38
// if Khatam in tmp then
11322: LD_EXP 17
11326: PUSH
11327: LD_VAR 0 3
11331: IN
11332: IFFALSE 11352
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
11334: LD_EXP 17
11338: PPUSH
11339: LD_EXP 3
11343: PUSH
11344: LD_STRING Khatam
11346: STR
11347: PPUSH
11348: CALL_OW 38
// if Kikuchi in tmp then
11352: LD_EXP 18
11356: PUSH
11357: LD_VAR 0 3
11361: IN
11362: IFFALSE 11382
// SaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
11364: LD_EXP 18
11368: PPUSH
11369: LD_EXP 3
11373: PUSH
11374: LD_STRING Kikuchi
11376: STR
11377: PPUSH
11378: CALL_OW 38
// SaveCharacters ( tmp diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] , mission_prefix & others ) ;
11382: LD_VAR 0 3
11386: PUSH
11387: LD_EXP 9
11391: PUSH
11392: LD_EXP 10
11396: PUSH
11397: LD_EXP 11
11401: PUSH
11402: LD_EXP 12
11406: PUSH
11407: LD_EXP 13
11411: PUSH
11412: LD_EXP 14
11416: PUSH
11417: LD_EXP 15
11421: PUSH
11422: LD_EXP 16
11426: PUSH
11427: LD_EXP 18
11431: PUSH
11432: LD_EXP 17
11436: PUSH
11437: EMPTY
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: LIST
11445: LIST
11446: LIST
11447: LIST
11448: DIFF
11449: PPUSH
11450: LD_EXP 3
11454: PUSH
11455: LD_STRING others
11457: STR
11458: PPUSH
11459: CALL_OW 38
// SaveVariable ( tick , 07_time ) ;
11463: LD_OWVAR 1
11467: PPUSH
11468: LD_STRING 07_time
11470: PPUSH
11471: CALL_OW 39
// tmp := [ ] ;
11475: LD_ADDR_VAR 0 3
11479: PUSH
11480: EMPTY
11481: ST_TO_ADDR
// for i in FilterUnitsInArea ( endArea , [ [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] ] ] ) do
11482: LD_ADDR_VAR 0 2
11486: PUSH
11487: LD_INT 9
11489: PPUSH
11490: LD_INT 22
11492: PUSH
11493: LD_INT 1
11495: PUSH
11496: EMPTY
11497: LIST
11498: LIST
11499: PUSH
11500: LD_INT 23
11502: PUSH
11503: LD_INT 1
11505: PUSH
11506: EMPTY
11507: LIST
11508: LIST
11509: PUSH
11510: LD_INT 21
11512: PUSH
11513: LD_INT 2
11515: PUSH
11516: EMPTY
11517: LIST
11518: LIST
11519: PUSH
11520: EMPTY
11521: LIST
11522: LIST
11523: LIST
11524: PUSH
11525: EMPTY
11526: LIST
11527: PPUSH
11528: CALL_OW 70
11532: PUSH
11533: FOR_IN
11534: IFFALSE 11595
// tmp := tmp ^ [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ;
11536: LD_ADDR_VAR 0 3
11540: PUSH
11541: LD_VAR 0 3
11545: PUSH
11546: LD_VAR 0 2
11550: PPUSH
11551: CALL_OW 265
11555: PUSH
11556: LD_VAR 0 2
11560: PPUSH
11561: CALL_OW 262
11565: PUSH
11566: LD_VAR 0 2
11570: PPUSH
11571: CALL_OW 263
11575: PUSH
11576: LD_VAR 0 2
11580: PPUSH
11581: CALL_OW 264
11585: PUSH
11586: EMPTY
11587: LIST
11588: LIST
11589: LIST
11590: LIST
11591: ADD
11592: ST_TO_ADDR
11593: GO 11533
11595: POP
11596: POP
// SaveVariable ( tmp , 07_vehicles ) ;
11597: LD_VAR 0 3
11601: PPUSH
11602: LD_STRING 07_vehicles
11604: PPUSH
11605: CALL_OW 39
// YouWin ;
11609: CALL_OW 103
// end ; end_of_file
11613: PPOPN 6
11615: END
// on UnitDestroyed ( un ) do begin if un = JMM then
11616: LD_VAR 0 1
11620: PUSH
11621: LD_EXP 9
11625: EQUAL
11626: IFFALSE 11635
// YouLost ( JMM ) ;
11628: LD_STRING JMM
11630: PPUSH
11631: CALL_OW 104
// if GetType ( un ) = unit_building then
11635: LD_VAR 0 1
11639: PPUSH
11640: CALL_OW 247
11644: PUSH
11645: LD_INT 3
11647: EQUAL
11648: IFFALSE 11664
// buildings_counter := buildings_counter + 1 ;
11650: LD_ADDR_EXP 4
11654: PUSH
11655: LD_EXP 4
11659: PUSH
11660: LD_INT 1
11662: PLUS
11663: ST_TO_ADDR
// if un in FilterUnitsInArea ( baseArea , [ f_or , [ f_btype , b_turret ] , [ f_btype , b_bunker ] ] ) then
11664: LD_VAR 0 1
11668: PUSH
11669: LD_INT 6
11671: PPUSH
11672: LD_INT 2
11674: PUSH
11675: LD_INT 30
11677: PUSH
11678: LD_INT 33
11680: PUSH
11681: EMPTY
11682: LIST
11683: LIST
11684: PUSH
11685: LD_INT 30
11687: PUSH
11688: LD_INT 32
11690: PUSH
11691: EMPTY
11692: LIST
11693: LIST
11694: PUSH
11695: EMPTY
11696: LIST
11697: LIST
11698: LIST
11699: PPUSH
11700: CALL_OW 70
11704: IN
11705: IFFALSE 11764
// ru_rebuild_list := ru_rebuild_list ^ [ GetBType ( un ) , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ;
11707: LD_ADDR_EXP 20
11711: PUSH
11712: LD_EXP 20
11716: PUSH
11717: LD_VAR 0 1
11721: PPUSH
11722: CALL_OW 266
11726: PUSH
11727: LD_VAR 0 1
11731: PPUSH
11732: CALL_OW 250
11736: PUSH
11737: LD_VAR 0 1
11741: PPUSH
11742: CALL_OW 251
11746: PUSH
11747: LD_VAR 0 1
11751: PPUSH
11752: CALL_OW 254
11756: PUSH
11757: EMPTY
11758: LIST
11759: LIST
11760: LIST
11761: LIST
11762: ADD
11763: ST_TO_ADDR
// if un = ru_dep_main then
11764: LD_VAR 0 1
11768: PUSH
11769: LD_INT 16
11771: EQUAL
11772: IFFALSE 11781
// ChangeMissionObjectives ( M1a ) ;
11774: LD_STRING M1a
11776: PPUSH
11777: CALL_OW 337
// if GetType ( un ) = unit_human and GetSide ( un ) = 3 then
11781: LD_VAR 0 1
11785: PPUSH
11786: CALL_OW 247
11790: PUSH
11791: LD_INT 1
11793: EQUAL
11794: PUSH
11795: LD_VAR 0 1
11799: PPUSH
11800: CALL_OW 255
11804: PUSH
11805: LD_INT 3
11807: EQUAL
11808: AND
11809: IFFALSE 11825
// kill_counter := kill_counter + 1 ;
11811: LD_ADDR_EXP 8
11815: PUSH
11816: LD_EXP 8
11820: PUSH
11821: LD_INT 1
11823: PLUS
11824: ST_TO_ADDR
// end ;
11825: PPOPN 1
11827: END
// on BuildingStarted ( b , builder ) do var i ;
11828: LD_INT 0
11830: PPUSH
// begin if GetSide ( b ) = 3 then
11831: LD_VAR 0 1
11835: PPUSH
11836: CALL_OW 255
11840: PUSH
11841: LD_INT 3
11843: EQUAL
11844: IFFALSE 11884
// for i = 1 to 4 do
11846: LD_ADDR_VAR 0 3
11850: PUSH
11851: DOUBLE
11852: LD_INT 1
11854: DEC
11855: ST_TO_ADDR
11856: LD_INT 4
11858: PUSH
11859: FOR_TO
11860: IFFALSE 11882
// ru_rebuild_list := Delete ( ru_rebuild_list , 1 ) ;
11862: LD_ADDR_EXP 20
11866: PUSH
11867: LD_EXP 20
11871: PPUSH
11872: LD_INT 1
11874: PPUSH
11875: CALL_OW 3
11879: ST_TO_ADDR
11880: GO 11859
11882: POP
11883: POP
// end ;
11884: PPOPN 3
11886: END
// on BuildingComplete ( b ) do if GetBType ( b ) in [ b_bunker , b_turret ] then
11887: LD_VAR 0 1
11891: PPUSH
11892: CALL_OW 266
11896: PUSH
11897: LD_INT 32
11899: PUSH
11900: LD_INT 33
11902: PUSH
11903: EMPTY
11904: LIST
11905: LIST
11906: IN
11907: IFFALSE 11921
// ComPlaceWeapon ( b , ru_gatling_gun ) ;
11909: LD_VAR 0 1
11913: PPUSH
11914: LD_INT 43
11916: PPUSH
11917: CALL_OW 148
11921: PPOPN 1
11923: END
// on LeaveBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
11924: LD_VAR 0 1
11928: PUSH
11929: LD_INT 22
11931: PUSH
11932: LD_INT 3
11934: PUSH
11935: EMPTY
11936: LIST
11937: LIST
11938: PUSH
11939: LD_INT 2
11941: PUSH
11942: LD_INT 30
11944: PUSH
11945: LD_INT 31
11947: PUSH
11948: EMPTY
11949: LIST
11950: LIST
11951: PUSH
11952: LD_INT 30
11954: PUSH
11955: LD_INT 32
11957: PUSH
11958: EMPTY
11959: LIST
11960: LIST
11961: PUSH
11962: EMPTY
11963: LIST
11964: LIST
11965: LIST
11966: PUSH
11967: EMPTY
11968: LIST
11969: LIST
11970: PPUSH
11971: CALL_OW 69
11975: IN
11976: IFFALSE 11998
// GoToAnotherTower ( un , b , 143 , 143 ) ;
11978: LD_VAR 0 2
11982: PPUSH
11983: LD_VAR 0 1
11987: PPUSH
11988: LD_INT 143
11990: PPUSH
11991: LD_INT 143
11993: PPUSH
11994: CALL 818 0 4
// end ;
11998: PPOPN 2
12000: END
// on EnterBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) then
12001: LD_VAR 0 1
12005: PUSH
12006: LD_INT 22
12008: PUSH
12009: LD_INT 3
12011: PUSH
12012: EMPTY
12013: LIST
12014: LIST
12015: PUSH
12016: LD_INT 30
12018: PUSH
12019: LD_INT 32
12021: PUSH
12022: EMPTY
12023: LIST
12024: LIST
12025: PUSH
12026: EMPTY
12027: LIST
12028: LIST
12029: PPUSH
12030: CALL_OW 69
12034: IN
12035: IFFALSE 12049
// SetTag ( b , 0 ) ;
12037: LD_VAR 0 1
12041: PPUSH
12042: LD_INT 0
12044: PPUSH
12045: CALL_OW 109
// end ; end_of_file
12049: PPOPN 2
12051: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
12052: LD_INT 0
12054: PPUSH
// ar_crane := 88 ;
12055: LD_ADDR_EXP 27
12059: PUSH
12060: LD_INT 88
12062: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
12063: LD_ADDR_EXP 22
12067: PUSH
12068: LD_INT 89
12070: ST_TO_ADDR
// us_hack := 99 ;
12071: LD_ADDR_EXP 23
12075: PUSH
12076: LD_INT 99
12078: ST_TO_ADDR
// us_artillery := 97 ;
12079: LD_ADDR_EXP 24
12083: PUSH
12084: LD_INT 97
12086: ST_TO_ADDR
// ar_bio_bomb := 91 ;
12087: LD_ADDR_EXP 25
12091: PUSH
12092: LD_INT 91
12094: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
12095: LD_ADDR_EXP 26
12099: PUSH
12100: LD_INT 92
12102: ST_TO_ADDR
// ru_radar := 98 ;
12103: LD_ADDR_EXP 21
12107: PUSH
12108: LD_INT 98
12110: ST_TO_ADDR
// tech_Artillery := 80 ;
12111: LD_ADDR_EXP 28
12115: PUSH
12116: LD_INT 80
12118: ST_TO_ADDR
// tech_RadMat := 81 ;
12119: LD_ADDR_EXP 29
12123: PUSH
12124: LD_INT 81
12126: ST_TO_ADDR
// tech_BasicTools := 82 ;
12127: LD_ADDR_EXP 30
12131: PUSH
12132: LD_INT 82
12134: ST_TO_ADDR
// tech_Cargo := 83 ;
12135: LD_ADDR_EXP 31
12139: PUSH
12140: LD_INT 83
12142: ST_TO_ADDR
// tech_Track := 84 ;
12143: LD_ADDR_EXP 32
12147: PUSH
12148: LD_INT 84
12150: ST_TO_ADDR
// tech_Crane := 85 ;
12151: LD_ADDR_EXP 33
12155: PUSH
12156: LD_INT 85
12158: ST_TO_ADDR
// tech_Bulldozer := 86 ;
12159: LD_ADDR_EXP 34
12163: PUSH
12164: LD_INT 86
12166: ST_TO_ADDR
// tech_Hovercraft := 87 ;
12167: LD_ADDR_EXP 35
12171: PUSH
12172: LD_INT 87
12174: ST_TO_ADDR
// end ;
12175: LD_VAR 0 1
12179: RET
// every 1 do
12180: GO 12182
12182: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
12183: CALL 12052 0 0
12187: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
12188: LD_VAR 0 2
12192: PUSH
12193: LD_INT 100
12195: EQUAL
12196: IFFALSE 13145
// begin if not StreamModeActive then
12198: LD_EXP 36
12202: NOT
12203: IFFALSE 12213
// StreamModeActive := true ;
12205: LD_ADDR_EXP 36
12209: PUSH
12210: LD_INT 1
12212: ST_TO_ADDR
// if p3 = 0 then
12213: LD_VAR 0 3
12217: PUSH
12218: LD_INT 0
12220: EQUAL
12221: IFFALSE 12227
// InitStreamMode ;
12223: CALL 13378 0 0
// if p3 = 1 then
12227: LD_VAR 0 3
12231: PUSH
12232: LD_INT 1
12234: EQUAL
12235: IFFALSE 12245
// sRocket := true ;
12237: LD_ADDR_EXP 41
12241: PUSH
12242: LD_INT 1
12244: ST_TO_ADDR
// if p3 = 2 then
12245: LD_VAR 0 3
12249: PUSH
12250: LD_INT 2
12252: EQUAL
12253: IFFALSE 12263
// sSpeed := true ;
12255: LD_ADDR_EXP 40
12259: PUSH
12260: LD_INT 1
12262: ST_TO_ADDR
// if p3 = 3 then
12263: LD_VAR 0 3
12267: PUSH
12268: LD_INT 3
12270: EQUAL
12271: IFFALSE 12281
// sEngine := true ;
12273: LD_ADDR_EXP 42
12277: PUSH
12278: LD_INT 1
12280: ST_TO_ADDR
// if p3 = 4 then
12281: LD_VAR 0 3
12285: PUSH
12286: LD_INT 4
12288: EQUAL
12289: IFFALSE 12299
// sSpec := true ;
12291: LD_ADDR_EXP 39
12295: PUSH
12296: LD_INT 1
12298: ST_TO_ADDR
// if p3 = 5 then
12299: LD_VAR 0 3
12303: PUSH
12304: LD_INT 5
12306: EQUAL
12307: IFFALSE 12317
// sLevel := true ;
12309: LD_ADDR_EXP 43
12313: PUSH
12314: LD_INT 1
12316: ST_TO_ADDR
// if p3 = 6 then
12317: LD_VAR 0 3
12321: PUSH
12322: LD_INT 6
12324: EQUAL
12325: IFFALSE 12335
// sArmoury := true ;
12327: LD_ADDR_EXP 44
12331: PUSH
12332: LD_INT 1
12334: ST_TO_ADDR
// if p3 = 7 then
12335: LD_VAR 0 3
12339: PUSH
12340: LD_INT 7
12342: EQUAL
12343: IFFALSE 12353
// sRadar := true ;
12345: LD_ADDR_EXP 45
12349: PUSH
12350: LD_INT 1
12352: ST_TO_ADDR
// if p3 = 8 then
12353: LD_VAR 0 3
12357: PUSH
12358: LD_INT 8
12360: EQUAL
12361: IFFALSE 12371
// sBunker := true ;
12363: LD_ADDR_EXP 46
12367: PUSH
12368: LD_INT 1
12370: ST_TO_ADDR
// if p3 = 9 then
12371: LD_VAR 0 3
12375: PUSH
12376: LD_INT 9
12378: EQUAL
12379: IFFALSE 12389
// sHack := true ;
12381: LD_ADDR_EXP 47
12385: PUSH
12386: LD_INT 1
12388: ST_TO_ADDR
// if p3 = 10 then
12389: LD_VAR 0 3
12393: PUSH
12394: LD_INT 10
12396: EQUAL
12397: IFFALSE 12407
// sFire := true ;
12399: LD_ADDR_EXP 48
12403: PUSH
12404: LD_INT 1
12406: ST_TO_ADDR
// if p3 = 11 then
12407: LD_VAR 0 3
12411: PUSH
12412: LD_INT 11
12414: EQUAL
12415: IFFALSE 12425
// sRefresh := true ;
12417: LD_ADDR_EXP 49
12421: PUSH
12422: LD_INT 1
12424: ST_TO_ADDR
// if p3 = 12 then
12425: LD_VAR 0 3
12429: PUSH
12430: LD_INT 12
12432: EQUAL
12433: IFFALSE 12443
// sExp := true ;
12435: LD_ADDR_EXP 50
12439: PUSH
12440: LD_INT 1
12442: ST_TO_ADDR
// if p3 = 13 then
12443: LD_VAR 0 3
12447: PUSH
12448: LD_INT 13
12450: EQUAL
12451: IFFALSE 12461
// sDepot := true ;
12453: LD_ADDR_EXP 51
12457: PUSH
12458: LD_INT 1
12460: ST_TO_ADDR
// if p3 = 14 then
12461: LD_VAR 0 3
12465: PUSH
12466: LD_INT 14
12468: EQUAL
12469: IFFALSE 12479
// sFlag := true ;
12471: LD_ADDR_EXP 52
12475: PUSH
12476: LD_INT 1
12478: ST_TO_ADDR
// if p3 = 15 then
12479: LD_VAR 0 3
12483: PUSH
12484: LD_INT 15
12486: EQUAL
12487: IFFALSE 12497
// sKamikadze := true ;
12489: LD_ADDR_EXP 60
12493: PUSH
12494: LD_INT 1
12496: ST_TO_ADDR
// if p3 = 16 then
12497: LD_VAR 0 3
12501: PUSH
12502: LD_INT 16
12504: EQUAL
12505: IFFALSE 12515
// sTroll := true ;
12507: LD_ADDR_EXP 61
12511: PUSH
12512: LD_INT 1
12514: ST_TO_ADDR
// if p3 = 17 then
12515: LD_VAR 0 3
12519: PUSH
12520: LD_INT 17
12522: EQUAL
12523: IFFALSE 12533
// sSlow := true ;
12525: LD_ADDR_EXP 62
12529: PUSH
12530: LD_INT 1
12532: ST_TO_ADDR
// if p3 = 18 then
12533: LD_VAR 0 3
12537: PUSH
12538: LD_INT 18
12540: EQUAL
12541: IFFALSE 12551
// sLack := true ;
12543: LD_ADDR_EXP 63
12547: PUSH
12548: LD_INT 1
12550: ST_TO_ADDR
// if p3 = 19 then
12551: LD_VAR 0 3
12555: PUSH
12556: LD_INT 19
12558: EQUAL
12559: IFFALSE 12569
// sTank := true ;
12561: LD_ADDR_EXP 65
12565: PUSH
12566: LD_INT 1
12568: ST_TO_ADDR
// if p3 = 20 then
12569: LD_VAR 0 3
12573: PUSH
12574: LD_INT 20
12576: EQUAL
12577: IFFALSE 12587
// sRemote := true ;
12579: LD_ADDR_EXP 66
12583: PUSH
12584: LD_INT 1
12586: ST_TO_ADDR
// if p3 = 21 then
12587: LD_VAR 0 3
12591: PUSH
12592: LD_INT 21
12594: EQUAL
12595: IFFALSE 12605
// sPowell := true ;
12597: LD_ADDR_EXP 67
12601: PUSH
12602: LD_INT 1
12604: ST_TO_ADDR
// if p3 = 22 then
12605: LD_VAR 0 3
12609: PUSH
12610: LD_INT 22
12612: EQUAL
12613: IFFALSE 12623
// sTeleport := true ;
12615: LD_ADDR_EXP 70
12619: PUSH
12620: LD_INT 1
12622: ST_TO_ADDR
// if p3 = 23 then
12623: LD_VAR 0 3
12627: PUSH
12628: LD_INT 23
12630: EQUAL
12631: IFFALSE 12641
// sOilTower := true ;
12633: LD_ADDR_EXP 72
12637: PUSH
12638: LD_INT 1
12640: ST_TO_ADDR
// if p3 = 24 then
12641: LD_VAR 0 3
12645: PUSH
12646: LD_INT 24
12648: EQUAL
12649: IFFALSE 12659
// sShovel := true ;
12651: LD_ADDR_EXP 73
12655: PUSH
12656: LD_INT 1
12658: ST_TO_ADDR
// if p3 = 25 then
12659: LD_VAR 0 3
12663: PUSH
12664: LD_INT 25
12666: EQUAL
12667: IFFALSE 12677
// sSheik := true ;
12669: LD_ADDR_EXP 74
12673: PUSH
12674: LD_INT 1
12676: ST_TO_ADDR
// if p3 = 26 then
12677: LD_VAR 0 3
12681: PUSH
12682: LD_INT 26
12684: EQUAL
12685: IFFALSE 12695
// sEarthquake := true ;
12687: LD_ADDR_EXP 76
12691: PUSH
12692: LD_INT 1
12694: ST_TO_ADDR
// if p3 = 27 then
12695: LD_VAR 0 3
12699: PUSH
12700: LD_INT 27
12702: EQUAL
12703: IFFALSE 12713
// sAI := true ;
12705: LD_ADDR_EXP 77
12709: PUSH
12710: LD_INT 1
12712: ST_TO_ADDR
// if p3 = 28 then
12713: LD_VAR 0 3
12717: PUSH
12718: LD_INT 28
12720: EQUAL
12721: IFFALSE 12731
// sCargo := true ;
12723: LD_ADDR_EXP 80
12727: PUSH
12728: LD_INT 1
12730: ST_TO_ADDR
// if p3 = 29 then
12731: LD_VAR 0 3
12735: PUSH
12736: LD_INT 29
12738: EQUAL
12739: IFFALSE 12749
// sDLaser := true ;
12741: LD_ADDR_EXP 81
12745: PUSH
12746: LD_INT 1
12748: ST_TO_ADDR
// if p3 = 30 then
12749: LD_VAR 0 3
12753: PUSH
12754: LD_INT 30
12756: EQUAL
12757: IFFALSE 12767
// sExchange := true ;
12759: LD_ADDR_EXP 82
12763: PUSH
12764: LD_INT 1
12766: ST_TO_ADDR
// if p3 = 31 then
12767: LD_VAR 0 3
12771: PUSH
12772: LD_INT 31
12774: EQUAL
12775: IFFALSE 12785
// sFac := true ;
12777: LD_ADDR_EXP 83
12781: PUSH
12782: LD_INT 1
12784: ST_TO_ADDR
// if p3 = 32 then
12785: LD_VAR 0 3
12789: PUSH
12790: LD_INT 32
12792: EQUAL
12793: IFFALSE 12803
// sPower := true ;
12795: LD_ADDR_EXP 84
12799: PUSH
12800: LD_INT 1
12802: ST_TO_ADDR
// if p3 = 33 then
12803: LD_VAR 0 3
12807: PUSH
12808: LD_INT 33
12810: EQUAL
12811: IFFALSE 12821
// sRandom := true ;
12813: LD_ADDR_EXP 85
12817: PUSH
12818: LD_INT 1
12820: ST_TO_ADDR
// if p3 = 34 then
12821: LD_VAR 0 3
12825: PUSH
12826: LD_INT 34
12828: EQUAL
12829: IFFALSE 12839
// sShield := true ;
12831: LD_ADDR_EXP 86
12835: PUSH
12836: LD_INT 1
12838: ST_TO_ADDR
// if p3 = 35 then
12839: LD_VAR 0 3
12843: PUSH
12844: LD_INT 35
12846: EQUAL
12847: IFFALSE 12857
// sTime := true ;
12849: LD_ADDR_EXP 87
12853: PUSH
12854: LD_INT 1
12856: ST_TO_ADDR
// if p3 = 36 then
12857: LD_VAR 0 3
12861: PUSH
12862: LD_INT 36
12864: EQUAL
12865: IFFALSE 12875
// sTools := true ;
12867: LD_ADDR_EXP 88
12871: PUSH
12872: LD_INT 1
12874: ST_TO_ADDR
// if p3 = 101 then
12875: LD_VAR 0 3
12879: PUSH
12880: LD_INT 101
12882: EQUAL
12883: IFFALSE 12893
// sSold := true ;
12885: LD_ADDR_EXP 53
12889: PUSH
12890: LD_INT 1
12892: ST_TO_ADDR
// if p3 = 102 then
12893: LD_VAR 0 3
12897: PUSH
12898: LD_INT 102
12900: EQUAL
12901: IFFALSE 12911
// sDiff := true ;
12903: LD_ADDR_EXP 54
12907: PUSH
12908: LD_INT 1
12910: ST_TO_ADDR
// if p3 = 103 then
12911: LD_VAR 0 3
12915: PUSH
12916: LD_INT 103
12918: EQUAL
12919: IFFALSE 12929
// sFog := true ;
12921: LD_ADDR_EXP 57
12925: PUSH
12926: LD_INT 1
12928: ST_TO_ADDR
// if p3 = 104 then
12929: LD_VAR 0 3
12933: PUSH
12934: LD_INT 104
12936: EQUAL
12937: IFFALSE 12947
// sReset := true ;
12939: LD_ADDR_EXP 58
12943: PUSH
12944: LD_INT 1
12946: ST_TO_ADDR
// if p3 = 105 then
12947: LD_VAR 0 3
12951: PUSH
12952: LD_INT 105
12954: EQUAL
12955: IFFALSE 12965
// sSun := true ;
12957: LD_ADDR_EXP 59
12961: PUSH
12962: LD_INT 1
12964: ST_TO_ADDR
// if p3 = 106 then
12965: LD_VAR 0 3
12969: PUSH
12970: LD_INT 106
12972: EQUAL
12973: IFFALSE 12983
// sTiger := true ;
12975: LD_ADDR_EXP 55
12979: PUSH
12980: LD_INT 1
12982: ST_TO_ADDR
// if p3 = 107 then
12983: LD_VAR 0 3
12987: PUSH
12988: LD_INT 107
12990: EQUAL
12991: IFFALSE 13001
// sBomb := true ;
12993: LD_ADDR_EXP 56
12997: PUSH
12998: LD_INT 1
13000: ST_TO_ADDR
// if p3 = 108 then
13001: LD_VAR 0 3
13005: PUSH
13006: LD_INT 108
13008: EQUAL
13009: IFFALSE 13019
// sWound := true ;
13011: LD_ADDR_EXP 64
13015: PUSH
13016: LD_INT 1
13018: ST_TO_ADDR
// if p3 = 109 then
13019: LD_VAR 0 3
13023: PUSH
13024: LD_INT 109
13026: EQUAL
13027: IFFALSE 13037
// sBetray := true ;
13029: LD_ADDR_EXP 68
13033: PUSH
13034: LD_INT 1
13036: ST_TO_ADDR
// if p3 = 110 then
13037: LD_VAR 0 3
13041: PUSH
13042: LD_INT 110
13044: EQUAL
13045: IFFALSE 13055
// sContamin := true ;
13047: LD_ADDR_EXP 69
13051: PUSH
13052: LD_INT 1
13054: ST_TO_ADDR
// if p3 = 111 then
13055: LD_VAR 0 3
13059: PUSH
13060: LD_INT 111
13062: EQUAL
13063: IFFALSE 13073
// sOil := true ;
13065: LD_ADDR_EXP 71
13069: PUSH
13070: LD_INT 1
13072: ST_TO_ADDR
// if p3 = 112 then
13073: LD_VAR 0 3
13077: PUSH
13078: LD_INT 112
13080: EQUAL
13081: IFFALSE 13091
// sStu := true ;
13083: LD_ADDR_EXP 75
13087: PUSH
13088: LD_INT 1
13090: ST_TO_ADDR
// if p3 = 113 then
13091: LD_VAR 0 3
13095: PUSH
13096: LD_INT 113
13098: EQUAL
13099: IFFALSE 13109
// sBazooka := true ;
13101: LD_ADDR_EXP 78
13105: PUSH
13106: LD_INT 1
13108: ST_TO_ADDR
// if p3 = 114 then
13109: LD_VAR 0 3
13113: PUSH
13114: LD_INT 114
13116: EQUAL
13117: IFFALSE 13127
// sMortar := true ;
13119: LD_ADDR_EXP 79
13123: PUSH
13124: LD_INT 1
13126: ST_TO_ADDR
// if p3 = 115 then
13127: LD_VAR 0 3
13131: PUSH
13132: LD_INT 115
13134: EQUAL
13135: IFFALSE 13145
// sRanger := true ;
13137: LD_ADDR_EXP 89
13141: PUSH
13142: LD_INT 1
13144: ST_TO_ADDR
// end ; if p2 = 101 then
13145: LD_VAR 0 2
13149: PUSH
13150: LD_INT 101
13152: EQUAL
13153: IFFALSE 13356
// begin case p3 of 1 :
13155: LD_VAR 0 3
13159: PUSH
13160: LD_INT 1
13162: DOUBLE
13163: EQUAL
13164: IFTRUE 13168
13166: GO 13175
13168: POP
// hHackUnlimitedResources ; 2 :
13169: CALL 23450 0 0
13173: GO 13356
13175: LD_INT 2
13177: DOUBLE
13178: EQUAL
13179: IFTRUE 13183
13181: GO 13190
13183: POP
// hHackSetLevel10 ; 3 :
13184: CALL 23583 0 0
13188: GO 13356
13190: LD_INT 3
13192: DOUBLE
13193: EQUAL
13194: IFTRUE 13198
13196: GO 13205
13198: POP
// hHackSetLevel10YourUnits ; 4 :
13199: CALL 23668 0 0
13203: GO 13356
13205: LD_INT 4
13207: DOUBLE
13208: EQUAL
13209: IFTRUE 13213
13211: GO 13235
13213: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
13214: LD_VAR 0 4
13218: PPUSH
13219: LD_VAR 0 5
13223: PPUSH
13224: LD_VAR 0 6
13228: PPUSH
13229: CALL 23758 0 3
13233: GO 13356
13235: LD_INT 5
13237: DOUBLE
13238: EQUAL
13239: IFTRUE 13243
13241: GO 13250
13243: POP
// hHackSpawnVehicle ; 6 :
13244: CALL 23819 0 0
13248: GO 13356
13250: LD_INT 6
13252: DOUBLE
13253: EQUAL
13254: IFTRUE 13258
13256: GO 13265
13258: POP
// hHackInvincible ; 7 :
13259: CALL 24365 0 0
13263: GO 13356
13265: LD_INT 7
13267: DOUBLE
13268: EQUAL
13269: IFTRUE 13273
13271: GO 13280
13273: POP
// hHackInvisible ; 8 :
13274: CALL 24476 0 0
13278: GO 13356
13280: LD_INT 8
13282: DOUBLE
13283: EQUAL
13284: IFTRUE 13288
13286: GO 13295
13288: POP
// hHackChangeYourSide ; 9 :
13289: CALL 24533 0 0
13293: GO 13356
13295: LD_INT 9
13297: DOUBLE
13298: EQUAL
13299: IFTRUE 13303
13301: GO 13310
13303: POP
// hHackChangeUnitSide ; 10 :
13304: CALL 24575 0 0
13308: GO 13356
13310: LD_INT 10
13312: DOUBLE
13313: EQUAL
13314: IFTRUE 13318
13316: GO 13325
13318: POP
// hHackFog ; 11 :
13319: CALL 24676 0 0
13323: GO 13356
13325: LD_INT 11
13327: DOUBLE
13328: EQUAL
13329: IFTRUE 13333
13331: GO 13340
13333: POP
// hHackApeman ; 12 :
13334: CALL 24691 0 0
13338: GO 13356
13340: LD_INT 12
13342: DOUBLE
13343: EQUAL
13344: IFTRUE 13348
13346: GO 13355
13348: POP
// hHackBoom ; end ;
13349: CALL 24776 0 0
13353: GO 13356
13355: POP
// end ; end ;
13356: PPOPN 6
13358: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
13359: GO 13361
13361: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
13362: LD_STRING initStreamRollete();
13364: PPUSH
13365: CALL_OW 559
// InitStreamMode ;
13369: CALL 13378 0 0
// DefineStreamItems ( ) ;
13373: CALL 13818 0 0
// end ;
13377: END
// function InitStreamMode ; begin
13378: LD_INT 0
13380: PPUSH
// streamModeActive := false ;
13381: LD_ADDR_EXP 36
13385: PUSH
13386: LD_INT 0
13388: ST_TO_ADDR
// normalCounter := 36 ;
13389: LD_ADDR_EXP 37
13393: PUSH
13394: LD_INT 36
13396: ST_TO_ADDR
// hardcoreCounter := 16 ;
13397: LD_ADDR_EXP 38
13401: PUSH
13402: LD_INT 16
13404: ST_TO_ADDR
// sRocket := false ;
13405: LD_ADDR_EXP 41
13409: PUSH
13410: LD_INT 0
13412: ST_TO_ADDR
// sSpeed := false ;
13413: LD_ADDR_EXP 40
13417: PUSH
13418: LD_INT 0
13420: ST_TO_ADDR
// sEngine := false ;
13421: LD_ADDR_EXP 42
13425: PUSH
13426: LD_INT 0
13428: ST_TO_ADDR
// sSpec := false ;
13429: LD_ADDR_EXP 39
13433: PUSH
13434: LD_INT 0
13436: ST_TO_ADDR
// sLevel := false ;
13437: LD_ADDR_EXP 43
13441: PUSH
13442: LD_INT 0
13444: ST_TO_ADDR
// sArmoury := false ;
13445: LD_ADDR_EXP 44
13449: PUSH
13450: LD_INT 0
13452: ST_TO_ADDR
// sRadar := false ;
13453: LD_ADDR_EXP 45
13457: PUSH
13458: LD_INT 0
13460: ST_TO_ADDR
// sBunker := false ;
13461: LD_ADDR_EXP 46
13465: PUSH
13466: LD_INT 0
13468: ST_TO_ADDR
// sHack := false ;
13469: LD_ADDR_EXP 47
13473: PUSH
13474: LD_INT 0
13476: ST_TO_ADDR
// sFire := false ;
13477: LD_ADDR_EXP 48
13481: PUSH
13482: LD_INT 0
13484: ST_TO_ADDR
// sRefresh := false ;
13485: LD_ADDR_EXP 49
13489: PUSH
13490: LD_INT 0
13492: ST_TO_ADDR
// sExp := false ;
13493: LD_ADDR_EXP 50
13497: PUSH
13498: LD_INT 0
13500: ST_TO_ADDR
// sDepot := false ;
13501: LD_ADDR_EXP 51
13505: PUSH
13506: LD_INT 0
13508: ST_TO_ADDR
// sFlag := false ;
13509: LD_ADDR_EXP 52
13513: PUSH
13514: LD_INT 0
13516: ST_TO_ADDR
// sKamikadze := false ;
13517: LD_ADDR_EXP 60
13521: PUSH
13522: LD_INT 0
13524: ST_TO_ADDR
// sTroll := false ;
13525: LD_ADDR_EXP 61
13529: PUSH
13530: LD_INT 0
13532: ST_TO_ADDR
// sSlow := false ;
13533: LD_ADDR_EXP 62
13537: PUSH
13538: LD_INT 0
13540: ST_TO_ADDR
// sLack := false ;
13541: LD_ADDR_EXP 63
13545: PUSH
13546: LD_INT 0
13548: ST_TO_ADDR
// sTank := false ;
13549: LD_ADDR_EXP 65
13553: PUSH
13554: LD_INT 0
13556: ST_TO_ADDR
// sRemote := false ;
13557: LD_ADDR_EXP 66
13561: PUSH
13562: LD_INT 0
13564: ST_TO_ADDR
// sPowell := false ;
13565: LD_ADDR_EXP 67
13569: PUSH
13570: LD_INT 0
13572: ST_TO_ADDR
// sTeleport := false ;
13573: LD_ADDR_EXP 70
13577: PUSH
13578: LD_INT 0
13580: ST_TO_ADDR
// sOilTower := false ;
13581: LD_ADDR_EXP 72
13585: PUSH
13586: LD_INT 0
13588: ST_TO_ADDR
// sShovel := false ;
13589: LD_ADDR_EXP 73
13593: PUSH
13594: LD_INT 0
13596: ST_TO_ADDR
// sSheik := false ;
13597: LD_ADDR_EXP 74
13601: PUSH
13602: LD_INT 0
13604: ST_TO_ADDR
// sEarthquake := false ;
13605: LD_ADDR_EXP 76
13609: PUSH
13610: LD_INT 0
13612: ST_TO_ADDR
// sAI := false ;
13613: LD_ADDR_EXP 77
13617: PUSH
13618: LD_INT 0
13620: ST_TO_ADDR
// sCargo := false ;
13621: LD_ADDR_EXP 80
13625: PUSH
13626: LD_INT 0
13628: ST_TO_ADDR
// sDLaser := false ;
13629: LD_ADDR_EXP 81
13633: PUSH
13634: LD_INT 0
13636: ST_TO_ADDR
// sExchange := false ;
13637: LD_ADDR_EXP 82
13641: PUSH
13642: LD_INT 0
13644: ST_TO_ADDR
// sFac := false ;
13645: LD_ADDR_EXP 83
13649: PUSH
13650: LD_INT 0
13652: ST_TO_ADDR
// sPower := false ;
13653: LD_ADDR_EXP 84
13657: PUSH
13658: LD_INT 0
13660: ST_TO_ADDR
// sRandom := false ;
13661: LD_ADDR_EXP 85
13665: PUSH
13666: LD_INT 0
13668: ST_TO_ADDR
// sShield := false ;
13669: LD_ADDR_EXP 86
13673: PUSH
13674: LD_INT 0
13676: ST_TO_ADDR
// sTime := false ;
13677: LD_ADDR_EXP 87
13681: PUSH
13682: LD_INT 0
13684: ST_TO_ADDR
// sTools := false ;
13685: LD_ADDR_EXP 88
13689: PUSH
13690: LD_INT 0
13692: ST_TO_ADDR
// sSold := false ;
13693: LD_ADDR_EXP 53
13697: PUSH
13698: LD_INT 0
13700: ST_TO_ADDR
// sDiff := false ;
13701: LD_ADDR_EXP 54
13705: PUSH
13706: LD_INT 0
13708: ST_TO_ADDR
// sFog := false ;
13709: LD_ADDR_EXP 57
13713: PUSH
13714: LD_INT 0
13716: ST_TO_ADDR
// sReset := false ;
13717: LD_ADDR_EXP 58
13721: PUSH
13722: LD_INT 0
13724: ST_TO_ADDR
// sSun := false ;
13725: LD_ADDR_EXP 59
13729: PUSH
13730: LD_INT 0
13732: ST_TO_ADDR
// sTiger := false ;
13733: LD_ADDR_EXP 55
13737: PUSH
13738: LD_INT 0
13740: ST_TO_ADDR
// sBomb := false ;
13741: LD_ADDR_EXP 56
13745: PUSH
13746: LD_INT 0
13748: ST_TO_ADDR
// sWound := false ;
13749: LD_ADDR_EXP 64
13753: PUSH
13754: LD_INT 0
13756: ST_TO_ADDR
// sBetray := false ;
13757: LD_ADDR_EXP 68
13761: PUSH
13762: LD_INT 0
13764: ST_TO_ADDR
// sContamin := false ;
13765: LD_ADDR_EXP 69
13769: PUSH
13770: LD_INT 0
13772: ST_TO_ADDR
// sOil := false ;
13773: LD_ADDR_EXP 71
13777: PUSH
13778: LD_INT 0
13780: ST_TO_ADDR
// sStu := false ;
13781: LD_ADDR_EXP 75
13785: PUSH
13786: LD_INT 0
13788: ST_TO_ADDR
// sBazooka := false ;
13789: LD_ADDR_EXP 78
13793: PUSH
13794: LD_INT 0
13796: ST_TO_ADDR
// sMortar := false ;
13797: LD_ADDR_EXP 79
13801: PUSH
13802: LD_INT 0
13804: ST_TO_ADDR
// sRanger := false ;
13805: LD_ADDR_EXP 89
13809: PUSH
13810: LD_INT 0
13812: ST_TO_ADDR
// end ;
13813: LD_VAR 0 1
13817: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
13818: LD_INT 0
13820: PPUSH
13821: PPUSH
13822: PPUSH
13823: PPUSH
13824: PPUSH
// result := [ ] ;
13825: LD_ADDR_VAR 0 1
13829: PUSH
13830: EMPTY
13831: ST_TO_ADDR
// if campaign_id = 1 then
13832: LD_OWVAR 69
13836: PUSH
13837: LD_INT 1
13839: EQUAL
13840: IFFALSE 16778
// begin case mission_number of 1 :
13842: LD_OWVAR 70
13846: PUSH
13847: LD_INT 1
13849: DOUBLE
13850: EQUAL
13851: IFTRUE 13855
13853: GO 13919
13855: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
13856: LD_ADDR_VAR 0 1
13860: PUSH
13861: LD_INT 2
13863: PUSH
13864: LD_INT 4
13866: PUSH
13867: LD_INT 11
13869: PUSH
13870: LD_INT 12
13872: PUSH
13873: LD_INT 15
13875: PUSH
13876: LD_INT 16
13878: PUSH
13879: LD_INT 22
13881: PUSH
13882: LD_INT 23
13884: PUSH
13885: LD_INT 26
13887: PUSH
13888: EMPTY
13889: LIST
13890: LIST
13891: LIST
13892: LIST
13893: LIST
13894: LIST
13895: LIST
13896: LIST
13897: LIST
13898: PUSH
13899: LD_INT 101
13901: PUSH
13902: LD_INT 102
13904: PUSH
13905: LD_INT 106
13907: PUSH
13908: EMPTY
13909: LIST
13910: LIST
13911: LIST
13912: PUSH
13913: EMPTY
13914: LIST
13915: LIST
13916: ST_TO_ADDR
13917: GO 16776
13919: LD_INT 2
13921: DOUBLE
13922: EQUAL
13923: IFTRUE 13927
13925: GO 13999
13927: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
13928: LD_ADDR_VAR 0 1
13932: PUSH
13933: LD_INT 2
13935: PUSH
13936: LD_INT 4
13938: PUSH
13939: LD_INT 11
13941: PUSH
13942: LD_INT 12
13944: PUSH
13945: LD_INT 15
13947: PUSH
13948: LD_INT 16
13950: PUSH
13951: LD_INT 22
13953: PUSH
13954: LD_INT 23
13956: PUSH
13957: LD_INT 26
13959: PUSH
13960: EMPTY
13961: LIST
13962: LIST
13963: LIST
13964: LIST
13965: LIST
13966: LIST
13967: LIST
13968: LIST
13969: LIST
13970: PUSH
13971: LD_INT 101
13973: PUSH
13974: LD_INT 102
13976: PUSH
13977: LD_INT 105
13979: PUSH
13980: LD_INT 106
13982: PUSH
13983: LD_INT 108
13985: PUSH
13986: EMPTY
13987: LIST
13988: LIST
13989: LIST
13990: LIST
13991: LIST
13992: PUSH
13993: EMPTY
13994: LIST
13995: LIST
13996: ST_TO_ADDR
13997: GO 16776
13999: LD_INT 3
14001: DOUBLE
14002: EQUAL
14003: IFTRUE 14007
14005: GO 14083
14007: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
14008: LD_ADDR_VAR 0 1
14012: PUSH
14013: LD_INT 2
14015: PUSH
14016: LD_INT 4
14018: PUSH
14019: LD_INT 5
14021: PUSH
14022: LD_INT 11
14024: PUSH
14025: LD_INT 12
14027: PUSH
14028: LD_INT 15
14030: PUSH
14031: LD_INT 16
14033: PUSH
14034: LD_INT 22
14036: PUSH
14037: LD_INT 26
14039: PUSH
14040: LD_INT 36
14042: PUSH
14043: EMPTY
14044: LIST
14045: LIST
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: PUSH
14055: LD_INT 101
14057: PUSH
14058: LD_INT 102
14060: PUSH
14061: LD_INT 105
14063: PUSH
14064: LD_INT 106
14066: PUSH
14067: LD_INT 108
14069: PUSH
14070: EMPTY
14071: LIST
14072: LIST
14073: LIST
14074: LIST
14075: LIST
14076: PUSH
14077: EMPTY
14078: LIST
14079: LIST
14080: ST_TO_ADDR
14081: GO 16776
14083: LD_INT 4
14085: DOUBLE
14086: EQUAL
14087: IFTRUE 14091
14089: GO 14175
14091: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
14092: LD_ADDR_VAR 0 1
14096: PUSH
14097: LD_INT 2
14099: PUSH
14100: LD_INT 4
14102: PUSH
14103: LD_INT 5
14105: PUSH
14106: LD_INT 8
14108: PUSH
14109: LD_INT 11
14111: PUSH
14112: LD_INT 12
14114: PUSH
14115: LD_INT 15
14117: PUSH
14118: LD_INT 16
14120: PUSH
14121: LD_INT 22
14123: PUSH
14124: LD_INT 23
14126: PUSH
14127: LD_INT 26
14129: PUSH
14130: LD_INT 36
14132: PUSH
14133: EMPTY
14134: LIST
14135: LIST
14136: LIST
14137: LIST
14138: LIST
14139: LIST
14140: LIST
14141: LIST
14142: LIST
14143: LIST
14144: LIST
14145: LIST
14146: PUSH
14147: LD_INT 101
14149: PUSH
14150: LD_INT 102
14152: PUSH
14153: LD_INT 105
14155: PUSH
14156: LD_INT 106
14158: PUSH
14159: LD_INT 108
14161: PUSH
14162: EMPTY
14163: LIST
14164: LIST
14165: LIST
14166: LIST
14167: LIST
14168: PUSH
14169: EMPTY
14170: LIST
14171: LIST
14172: ST_TO_ADDR
14173: GO 16776
14175: LD_INT 5
14177: DOUBLE
14178: EQUAL
14179: IFTRUE 14183
14181: GO 14283
14183: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
14184: LD_ADDR_VAR 0 1
14188: PUSH
14189: LD_INT 2
14191: PUSH
14192: LD_INT 4
14194: PUSH
14195: LD_INT 5
14197: PUSH
14198: LD_INT 6
14200: PUSH
14201: LD_INT 8
14203: PUSH
14204: LD_INT 11
14206: PUSH
14207: LD_INT 12
14209: PUSH
14210: LD_INT 15
14212: PUSH
14213: LD_INT 16
14215: PUSH
14216: LD_INT 22
14218: PUSH
14219: LD_INT 23
14221: PUSH
14222: LD_INT 25
14224: PUSH
14225: LD_INT 26
14227: PUSH
14228: LD_INT 36
14230: PUSH
14231: EMPTY
14232: LIST
14233: LIST
14234: LIST
14235: LIST
14236: LIST
14237: LIST
14238: LIST
14239: LIST
14240: LIST
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: PUSH
14247: LD_INT 101
14249: PUSH
14250: LD_INT 102
14252: PUSH
14253: LD_INT 105
14255: PUSH
14256: LD_INT 106
14258: PUSH
14259: LD_INT 108
14261: PUSH
14262: LD_INT 109
14264: PUSH
14265: LD_INT 112
14267: PUSH
14268: EMPTY
14269: LIST
14270: LIST
14271: LIST
14272: LIST
14273: LIST
14274: LIST
14275: LIST
14276: PUSH
14277: EMPTY
14278: LIST
14279: LIST
14280: ST_TO_ADDR
14281: GO 16776
14283: LD_INT 6
14285: DOUBLE
14286: EQUAL
14287: IFTRUE 14291
14289: GO 14411
14291: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
14292: LD_ADDR_VAR 0 1
14296: PUSH
14297: LD_INT 2
14299: PUSH
14300: LD_INT 4
14302: PUSH
14303: LD_INT 5
14305: PUSH
14306: LD_INT 6
14308: PUSH
14309: LD_INT 8
14311: PUSH
14312: LD_INT 11
14314: PUSH
14315: LD_INT 12
14317: PUSH
14318: LD_INT 15
14320: PUSH
14321: LD_INT 16
14323: PUSH
14324: LD_INT 20
14326: PUSH
14327: LD_INT 21
14329: PUSH
14330: LD_INT 22
14332: PUSH
14333: LD_INT 23
14335: PUSH
14336: LD_INT 25
14338: PUSH
14339: LD_INT 26
14341: PUSH
14342: LD_INT 30
14344: PUSH
14345: LD_INT 31
14347: PUSH
14348: LD_INT 32
14350: PUSH
14351: LD_INT 36
14353: PUSH
14354: EMPTY
14355: LIST
14356: LIST
14357: LIST
14358: LIST
14359: LIST
14360: LIST
14361: LIST
14362: LIST
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: LIST
14368: LIST
14369: LIST
14370: LIST
14371: LIST
14372: LIST
14373: LIST
14374: PUSH
14375: LD_INT 101
14377: PUSH
14378: LD_INT 102
14380: PUSH
14381: LD_INT 105
14383: PUSH
14384: LD_INT 106
14386: PUSH
14387: LD_INT 108
14389: PUSH
14390: LD_INT 109
14392: PUSH
14393: LD_INT 112
14395: PUSH
14396: EMPTY
14397: LIST
14398: LIST
14399: LIST
14400: LIST
14401: LIST
14402: LIST
14403: LIST
14404: PUSH
14405: EMPTY
14406: LIST
14407: LIST
14408: ST_TO_ADDR
14409: GO 16776
14411: LD_INT 7
14413: DOUBLE
14414: EQUAL
14415: IFTRUE 14419
14417: GO 14519
14419: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
14420: LD_ADDR_VAR 0 1
14424: PUSH
14425: LD_INT 2
14427: PUSH
14428: LD_INT 4
14430: PUSH
14431: LD_INT 5
14433: PUSH
14434: LD_INT 7
14436: PUSH
14437: LD_INT 11
14439: PUSH
14440: LD_INT 12
14442: PUSH
14443: LD_INT 15
14445: PUSH
14446: LD_INT 16
14448: PUSH
14449: LD_INT 20
14451: PUSH
14452: LD_INT 21
14454: PUSH
14455: LD_INT 22
14457: PUSH
14458: LD_INT 23
14460: PUSH
14461: LD_INT 25
14463: PUSH
14464: LD_INT 26
14466: PUSH
14467: EMPTY
14468: LIST
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: LIST
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: PUSH
14483: LD_INT 101
14485: PUSH
14486: LD_INT 102
14488: PUSH
14489: LD_INT 103
14491: PUSH
14492: LD_INT 105
14494: PUSH
14495: LD_INT 106
14497: PUSH
14498: LD_INT 108
14500: PUSH
14501: LD_INT 112
14503: PUSH
14504: EMPTY
14505: LIST
14506: LIST
14507: LIST
14508: LIST
14509: LIST
14510: LIST
14511: LIST
14512: PUSH
14513: EMPTY
14514: LIST
14515: LIST
14516: ST_TO_ADDR
14517: GO 16776
14519: LD_INT 8
14521: DOUBLE
14522: EQUAL
14523: IFTRUE 14527
14525: GO 14655
14527: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
14528: LD_ADDR_VAR 0 1
14532: PUSH
14533: LD_INT 2
14535: PUSH
14536: LD_INT 4
14538: PUSH
14539: LD_INT 5
14541: PUSH
14542: LD_INT 6
14544: PUSH
14545: LD_INT 7
14547: PUSH
14548: LD_INT 8
14550: PUSH
14551: LD_INT 11
14553: PUSH
14554: LD_INT 12
14556: PUSH
14557: LD_INT 15
14559: PUSH
14560: LD_INT 16
14562: PUSH
14563: LD_INT 20
14565: PUSH
14566: LD_INT 21
14568: PUSH
14569: LD_INT 22
14571: PUSH
14572: LD_INT 23
14574: PUSH
14575: LD_INT 25
14577: PUSH
14578: LD_INT 26
14580: PUSH
14581: LD_INT 30
14583: PUSH
14584: LD_INT 31
14586: PUSH
14587: LD_INT 32
14589: PUSH
14590: LD_INT 36
14592: PUSH
14593: EMPTY
14594: LIST
14595: LIST
14596: LIST
14597: LIST
14598: LIST
14599: LIST
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: LIST
14606: LIST
14607: LIST
14608: LIST
14609: LIST
14610: LIST
14611: LIST
14612: LIST
14613: LIST
14614: PUSH
14615: LD_INT 101
14617: PUSH
14618: LD_INT 102
14620: PUSH
14621: LD_INT 103
14623: PUSH
14624: LD_INT 105
14626: PUSH
14627: LD_INT 106
14629: PUSH
14630: LD_INT 108
14632: PUSH
14633: LD_INT 109
14635: PUSH
14636: LD_INT 112
14638: PUSH
14639: EMPTY
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: LIST
14647: LIST
14648: PUSH
14649: EMPTY
14650: LIST
14651: LIST
14652: ST_TO_ADDR
14653: GO 16776
14655: LD_INT 9
14657: DOUBLE
14658: EQUAL
14659: IFTRUE 14663
14661: GO 14799
14663: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
14664: LD_ADDR_VAR 0 1
14668: PUSH
14669: LD_INT 2
14671: PUSH
14672: LD_INT 4
14674: PUSH
14675: LD_INT 5
14677: PUSH
14678: LD_INT 6
14680: PUSH
14681: LD_INT 7
14683: PUSH
14684: LD_INT 8
14686: PUSH
14687: LD_INT 11
14689: PUSH
14690: LD_INT 12
14692: PUSH
14693: LD_INT 15
14695: PUSH
14696: LD_INT 16
14698: PUSH
14699: LD_INT 20
14701: PUSH
14702: LD_INT 21
14704: PUSH
14705: LD_INT 22
14707: PUSH
14708: LD_INT 23
14710: PUSH
14711: LD_INT 25
14713: PUSH
14714: LD_INT 26
14716: PUSH
14717: LD_INT 28
14719: PUSH
14720: LD_INT 30
14722: PUSH
14723: LD_INT 31
14725: PUSH
14726: LD_INT 32
14728: PUSH
14729: LD_INT 36
14731: PUSH
14732: EMPTY
14733: LIST
14734: LIST
14735: LIST
14736: LIST
14737: LIST
14738: LIST
14739: LIST
14740: LIST
14741: LIST
14742: LIST
14743: LIST
14744: LIST
14745: LIST
14746: LIST
14747: LIST
14748: LIST
14749: LIST
14750: LIST
14751: LIST
14752: LIST
14753: LIST
14754: PUSH
14755: LD_INT 101
14757: PUSH
14758: LD_INT 102
14760: PUSH
14761: LD_INT 103
14763: PUSH
14764: LD_INT 105
14766: PUSH
14767: LD_INT 106
14769: PUSH
14770: LD_INT 108
14772: PUSH
14773: LD_INT 109
14775: PUSH
14776: LD_INT 112
14778: PUSH
14779: LD_INT 114
14781: PUSH
14782: EMPTY
14783: LIST
14784: LIST
14785: LIST
14786: LIST
14787: LIST
14788: LIST
14789: LIST
14790: LIST
14791: LIST
14792: PUSH
14793: EMPTY
14794: LIST
14795: LIST
14796: ST_TO_ADDR
14797: GO 16776
14799: LD_INT 10
14801: DOUBLE
14802: EQUAL
14803: IFTRUE 14807
14805: GO 14991
14807: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
14808: LD_ADDR_VAR 0 1
14812: PUSH
14813: LD_INT 2
14815: PUSH
14816: LD_INT 4
14818: PUSH
14819: LD_INT 5
14821: PUSH
14822: LD_INT 6
14824: PUSH
14825: LD_INT 7
14827: PUSH
14828: LD_INT 8
14830: PUSH
14831: LD_INT 9
14833: PUSH
14834: LD_INT 10
14836: PUSH
14837: LD_INT 11
14839: PUSH
14840: LD_INT 12
14842: PUSH
14843: LD_INT 13
14845: PUSH
14846: LD_INT 14
14848: PUSH
14849: LD_INT 15
14851: PUSH
14852: LD_INT 16
14854: PUSH
14855: LD_INT 17
14857: PUSH
14858: LD_INT 18
14860: PUSH
14861: LD_INT 19
14863: PUSH
14864: LD_INT 20
14866: PUSH
14867: LD_INT 21
14869: PUSH
14870: LD_INT 22
14872: PUSH
14873: LD_INT 23
14875: PUSH
14876: LD_INT 24
14878: PUSH
14879: LD_INT 25
14881: PUSH
14882: LD_INT 26
14884: PUSH
14885: LD_INT 28
14887: PUSH
14888: LD_INT 30
14890: PUSH
14891: LD_INT 31
14893: PUSH
14894: LD_INT 32
14896: PUSH
14897: LD_INT 36
14899: PUSH
14900: EMPTY
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: LIST
14907: LIST
14908: LIST
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: LIST
14914: LIST
14915: LIST
14916: LIST
14917: LIST
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: LIST
14923: LIST
14924: LIST
14925: LIST
14926: LIST
14927: LIST
14928: LIST
14929: LIST
14930: PUSH
14931: LD_INT 101
14933: PUSH
14934: LD_INT 102
14936: PUSH
14937: LD_INT 103
14939: PUSH
14940: LD_INT 104
14942: PUSH
14943: LD_INT 105
14945: PUSH
14946: LD_INT 106
14948: PUSH
14949: LD_INT 107
14951: PUSH
14952: LD_INT 108
14954: PUSH
14955: LD_INT 109
14957: PUSH
14958: LD_INT 110
14960: PUSH
14961: LD_INT 111
14963: PUSH
14964: LD_INT 112
14966: PUSH
14967: LD_INT 114
14969: PUSH
14970: EMPTY
14971: LIST
14972: LIST
14973: LIST
14974: LIST
14975: LIST
14976: LIST
14977: LIST
14978: LIST
14979: LIST
14980: LIST
14981: LIST
14982: LIST
14983: LIST
14984: PUSH
14985: EMPTY
14986: LIST
14987: LIST
14988: ST_TO_ADDR
14989: GO 16776
14991: LD_INT 11
14993: DOUBLE
14994: EQUAL
14995: IFTRUE 14999
14997: GO 15191
14999: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
15000: LD_ADDR_VAR 0 1
15004: PUSH
15005: LD_INT 2
15007: PUSH
15008: LD_INT 3
15010: PUSH
15011: LD_INT 4
15013: PUSH
15014: LD_INT 5
15016: PUSH
15017: LD_INT 6
15019: PUSH
15020: LD_INT 7
15022: PUSH
15023: LD_INT 8
15025: PUSH
15026: LD_INT 9
15028: PUSH
15029: LD_INT 10
15031: PUSH
15032: LD_INT 11
15034: PUSH
15035: LD_INT 12
15037: PUSH
15038: LD_INT 13
15040: PUSH
15041: LD_INT 14
15043: PUSH
15044: LD_INT 15
15046: PUSH
15047: LD_INT 16
15049: PUSH
15050: LD_INT 17
15052: PUSH
15053: LD_INT 18
15055: PUSH
15056: LD_INT 19
15058: PUSH
15059: LD_INT 20
15061: PUSH
15062: LD_INT 21
15064: PUSH
15065: LD_INT 22
15067: PUSH
15068: LD_INT 23
15070: PUSH
15071: LD_INT 24
15073: PUSH
15074: LD_INT 25
15076: PUSH
15077: LD_INT 26
15079: PUSH
15080: LD_INT 28
15082: PUSH
15083: LD_INT 30
15085: PUSH
15086: LD_INT 31
15088: PUSH
15089: LD_INT 32
15091: PUSH
15092: LD_INT 34
15094: PUSH
15095: LD_INT 36
15097: PUSH
15098: EMPTY
15099: LIST
15100: LIST
15101: LIST
15102: LIST
15103: LIST
15104: LIST
15105: LIST
15106: LIST
15107: LIST
15108: LIST
15109: LIST
15110: LIST
15111: LIST
15112: LIST
15113: LIST
15114: LIST
15115: LIST
15116: LIST
15117: LIST
15118: LIST
15119: LIST
15120: LIST
15121: LIST
15122: LIST
15123: LIST
15124: LIST
15125: LIST
15126: LIST
15127: LIST
15128: LIST
15129: LIST
15130: PUSH
15131: LD_INT 101
15133: PUSH
15134: LD_INT 102
15136: PUSH
15137: LD_INT 103
15139: PUSH
15140: LD_INT 104
15142: PUSH
15143: LD_INT 105
15145: PUSH
15146: LD_INT 106
15148: PUSH
15149: LD_INT 107
15151: PUSH
15152: LD_INT 108
15154: PUSH
15155: LD_INT 109
15157: PUSH
15158: LD_INT 110
15160: PUSH
15161: LD_INT 111
15163: PUSH
15164: LD_INT 112
15166: PUSH
15167: LD_INT 114
15169: PUSH
15170: EMPTY
15171: LIST
15172: LIST
15173: LIST
15174: LIST
15175: LIST
15176: LIST
15177: LIST
15178: LIST
15179: LIST
15180: LIST
15181: LIST
15182: LIST
15183: LIST
15184: PUSH
15185: EMPTY
15186: LIST
15187: LIST
15188: ST_TO_ADDR
15189: GO 16776
15191: LD_INT 12
15193: DOUBLE
15194: EQUAL
15195: IFTRUE 15199
15197: GO 15407
15199: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
15200: LD_ADDR_VAR 0 1
15204: PUSH
15205: LD_INT 1
15207: PUSH
15208: LD_INT 2
15210: PUSH
15211: LD_INT 3
15213: PUSH
15214: LD_INT 4
15216: PUSH
15217: LD_INT 5
15219: PUSH
15220: LD_INT 6
15222: PUSH
15223: LD_INT 7
15225: PUSH
15226: LD_INT 8
15228: PUSH
15229: LD_INT 9
15231: PUSH
15232: LD_INT 10
15234: PUSH
15235: LD_INT 11
15237: PUSH
15238: LD_INT 12
15240: PUSH
15241: LD_INT 13
15243: PUSH
15244: LD_INT 14
15246: PUSH
15247: LD_INT 15
15249: PUSH
15250: LD_INT 16
15252: PUSH
15253: LD_INT 17
15255: PUSH
15256: LD_INT 18
15258: PUSH
15259: LD_INT 19
15261: PUSH
15262: LD_INT 20
15264: PUSH
15265: LD_INT 21
15267: PUSH
15268: LD_INT 22
15270: PUSH
15271: LD_INT 23
15273: PUSH
15274: LD_INT 24
15276: PUSH
15277: LD_INT 25
15279: PUSH
15280: LD_INT 26
15282: PUSH
15283: LD_INT 27
15285: PUSH
15286: LD_INT 28
15288: PUSH
15289: LD_INT 30
15291: PUSH
15292: LD_INT 31
15294: PUSH
15295: LD_INT 32
15297: PUSH
15298: LD_INT 33
15300: PUSH
15301: LD_INT 34
15303: PUSH
15304: LD_INT 36
15306: PUSH
15307: EMPTY
15308: LIST
15309: LIST
15310: LIST
15311: LIST
15312: LIST
15313: LIST
15314: LIST
15315: LIST
15316: LIST
15317: LIST
15318: LIST
15319: LIST
15320: LIST
15321: LIST
15322: LIST
15323: LIST
15324: LIST
15325: LIST
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: LIST
15333: LIST
15334: LIST
15335: LIST
15336: LIST
15337: LIST
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: PUSH
15343: LD_INT 101
15345: PUSH
15346: LD_INT 102
15348: PUSH
15349: LD_INT 103
15351: PUSH
15352: LD_INT 104
15354: PUSH
15355: LD_INT 105
15357: PUSH
15358: LD_INT 106
15360: PUSH
15361: LD_INT 107
15363: PUSH
15364: LD_INT 108
15366: PUSH
15367: LD_INT 109
15369: PUSH
15370: LD_INT 110
15372: PUSH
15373: LD_INT 111
15375: PUSH
15376: LD_INT 112
15378: PUSH
15379: LD_INT 113
15381: PUSH
15382: LD_INT 114
15384: PUSH
15385: EMPTY
15386: LIST
15387: LIST
15388: LIST
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: LIST
15394: LIST
15395: LIST
15396: LIST
15397: LIST
15398: LIST
15399: LIST
15400: PUSH
15401: EMPTY
15402: LIST
15403: LIST
15404: ST_TO_ADDR
15405: GO 16776
15407: LD_INT 13
15409: DOUBLE
15410: EQUAL
15411: IFTRUE 15415
15413: GO 15611
15415: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
15416: LD_ADDR_VAR 0 1
15420: PUSH
15421: LD_INT 1
15423: PUSH
15424: LD_INT 2
15426: PUSH
15427: LD_INT 3
15429: PUSH
15430: LD_INT 4
15432: PUSH
15433: LD_INT 5
15435: PUSH
15436: LD_INT 8
15438: PUSH
15439: LD_INT 9
15441: PUSH
15442: LD_INT 10
15444: PUSH
15445: LD_INT 11
15447: PUSH
15448: LD_INT 12
15450: PUSH
15451: LD_INT 14
15453: PUSH
15454: LD_INT 15
15456: PUSH
15457: LD_INT 16
15459: PUSH
15460: LD_INT 17
15462: PUSH
15463: LD_INT 18
15465: PUSH
15466: LD_INT 19
15468: PUSH
15469: LD_INT 20
15471: PUSH
15472: LD_INT 21
15474: PUSH
15475: LD_INT 22
15477: PUSH
15478: LD_INT 23
15480: PUSH
15481: LD_INT 24
15483: PUSH
15484: LD_INT 25
15486: PUSH
15487: LD_INT 26
15489: PUSH
15490: LD_INT 27
15492: PUSH
15493: LD_INT 28
15495: PUSH
15496: LD_INT 30
15498: PUSH
15499: LD_INT 31
15501: PUSH
15502: LD_INT 32
15504: PUSH
15505: LD_INT 33
15507: PUSH
15508: LD_INT 34
15510: PUSH
15511: LD_INT 36
15513: PUSH
15514: EMPTY
15515: LIST
15516: LIST
15517: LIST
15518: LIST
15519: LIST
15520: LIST
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: LIST
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: LIST
15537: LIST
15538: LIST
15539: LIST
15540: LIST
15541: LIST
15542: LIST
15543: LIST
15544: LIST
15545: LIST
15546: PUSH
15547: LD_INT 101
15549: PUSH
15550: LD_INT 102
15552: PUSH
15553: LD_INT 103
15555: PUSH
15556: LD_INT 104
15558: PUSH
15559: LD_INT 105
15561: PUSH
15562: LD_INT 106
15564: PUSH
15565: LD_INT 107
15567: PUSH
15568: LD_INT 108
15570: PUSH
15571: LD_INT 109
15573: PUSH
15574: LD_INT 110
15576: PUSH
15577: LD_INT 111
15579: PUSH
15580: LD_INT 112
15582: PUSH
15583: LD_INT 113
15585: PUSH
15586: LD_INT 114
15588: PUSH
15589: EMPTY
15590: LIST
15591: LIST
15592: LIST
15593: LIST
15594: LIST
15595: LIST
15596: LIST
15597: LIST
15598: LIST
15599: LIST
15600: LIST
15601: LIST
15602: LIST
15603: LIST
15604: PUSH
15605: EMPTY
15606: LIST
15607: LIST
15608: ST_TO_ADDR
15609: GO 16776
15611: LD_INT 14
15613: DOUBLE
15614: EQUAL
15615: IFTRUE 15619
15617: GO 15831
15619: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
15620: LD_ADDR_VAR 0 1
15624: PUSH
15625: LD_INT 1
15627: PUSH
15628: LD_INT 2
15630: PUSH
15631: LD_INT 3
15633: PUSH
15634: LD_INT 4
15636: PUSH
15637: LD_INT 5
15639: PUSH
15640: LD_INT 6
15642: PUSH
15643: LD_INT 7
15645: PUSH
15646: LD_INT 8
15648: PUSH
15649: LD_INT 9
15651: PUSH
15652: LD_INT 10
15654: PUSH
15655: LD_INT 11
15657: PUSH
15658: LD_INT 12
15660: PUSH
15661: LD_INT 13
15663: PUSH
15664: LD_INT 14
15666: PUSH
15667: LD_INT 15
15669: PUSH
15670: LD_INT 16
15672: PUSH
15673: LD_INT 17
15675: PUSH
15676: LD_INT 18
15678: PUSH
15679: LD_INT 19
15681: PUSH
15682: LD_INT 20
15684: PUSH
15685: LD_INT 21
15687: PUSH
15688: LD_INT 22
15690: PUSH
15691: LD_INT 23
15693: PUSH
15694: LD_INT 24
15696: PUSH
15697: LD_INT 25
15699: PUSH
15700: LD_INT 26
15702: PUSH
15703: LD_INT 27
15705: PUSH
15706: LD_INT 28
15708: PUSH
15709: LD_INT 29
15711: PUSH
15712: LD_INT 30
15714: PUSH
15715: LD_INT 31
15717: PUSH
15718: LD_INT 32
15720: PUSH
15721: LD_INT 33
15723: PUSH
15724: LD_INT 34
15726: PUSH
15727: LD_INT 36
15729: PUSH
15730: EMPTY
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: LIST
15750: LIST
15751: LIST
15752: LIST
15753: LIST
15754: LIST
15755: LIST
15756: LIST
15757: LIST
15758: LIST
15759: LIST
15760: LIST
15761: LIST
15762: LIST
15763: LIST
15764: LIST
15765: LIST
15766: PUSH
15767: LD_INT 101
15769: PUSH
15770: LD_INT 102
15772: PUSH
15773: LD_INT 103
15775: PUSH
15776: LD_INT 104
15778: PUSH
15779: LD_INT 105
15781: PUSH
15782: LD_INT 106
15784: PUSH
15785: LD_INT 107
15787: PUSH
15788: LD_INT 108
15790: PUSH
15791: LD_INT 109
15793: PUSH
15794: LD_INT 110
15796: PUSH
15797: LD_INT 111
15799: PUSH
15800: LD_INT 112
15802: PUSH
15803: LD_INT 113
15805: PUSH
15806: LD_INT 114
15808: PUSH
15809: EMPTY
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: LIST
15815: LIST
15816: LIST
15817: LIST
15818: LIST
15819: LIST
15820: LIST
15821: LIST
15822: LIST
15823: LIST
15824: PUSH
15825: EMPTY
15826: LIST
15827: LIST
15828: ST_TO_ADDR
15829: GO 16776
15831: LD_INT 15
15833: DOUBLE
15834: EQUAL
15835: IFTRUE 15839
15837: GO 16051
15839: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
15840: LD_ADDR_VAR 0 1
15844: PUSH
15845: LD_INT 1
15847: PUSH
15848: LD_INT 2
15850: PUSH
15851: LD_INT 3
15853: PUSH
15854: LD_INT 4
15856: PUSH
15857: LD_INT 5
15859: PUSH
15860: LD_INT 6
15862: PUSH
15863: LD_INT 7
15865: PUSH
15866: LD_INT 8
15868: PUSH
15869: LD_INT 9
15871: PUSH
15872: LD_INT 10
15874: PUSH
15875: LD_INT 11
15877: PUSH
15878: LD_INT 12
15880: PUSH
15881: LD_INT 13
15883: PUSH
15884: LD_INT 14
15886: PUSH
15887: LD_INT 15
15889: PUSH
15890: LD_INT 16
15892: PUSH
15893: LD_INT 17
15895: PUSH
15896: LD_INT 18
15898: PUSH
15899: LD_INT 19
15901: PUSH
15902: LD_INT 20
15904: PUSH
15905: LD_INT 21
15907: PUSH
15908: LD_INT 22
15910: PUSH
15911: LD_INT 23
15913: PUSH
15914: LD_INT 24
15916: PUSH
15917: LD_INT 25
15919: PUSH
15920: LD_INT 26
15922: PUSH
15923: LD_INT 27
15925: PUSH
15926: LD_INT 28
15928: PUSH
15929: LD_INT 29
15931: PUSH
15932: LD_INT 30
15934: PUSH
15935: LD_INT 31
15937: PUSH
15938: LD_INT 32
15940: PUSH
15941: LD_INT 33
15943: PUSH
15944: LD_INT 34
15946: PUSH
15947: LD_INT 36
15949: PUSH
15950: EMPTY
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: LIST
15978: LIST
15979: LIST
15980: LIST
15981: LIST
15982: LIST
15983: LIST
15984: LIST
15985: LIST
15986: PUSH
15987: LD_INT 101
15989: PUSH
15990: LD_INT 102
15992: PUSH
15993: LD_INT 103
15995: PUSH
15996: LD_INT 104
15998: PUSH
15999: LD_INT 105
16001: PUSH
16002: LD_INT 106
16004: PUSH
16005: LD_INT 107
16007: PUSH
16008: LD_INT 108
16010: PUSH
16011: LD_INT 109
16013: PUSH
16014: LD_INT 110
16016: PUSH
16017: LD_INT 111
16019: PUSH
16020: LD_INT 112
16022: PUSH
16023: LD_INT 113
16025: PUSH
16026: LD_INT 114
16028: PUSH
16029: EMPTY
16030: LIST
16031: LIST
16032: LIST
16033: LIST
16034: LIST
16035: LIST
16036: LIST
16037: LIST
16038: LIST
16039: LIST
16040: LIST
16041: LIST
16042: LIST
16043: LIST
16044: PUSH
16045: EMPTY
16046: LIST
16047: LIST
16048: ST_TO_ADDR
16049: GO 16776
16051: LD_INT 16
16053: DOUBLE
16054: EQUAL
16055: IFTRUE 16059
16057: GO 16183
16059: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
16060: LD_ADDR_VAR 0 1
16064: PUSH
16065: LD_INT 2
16067: PUSH
16068: LD_INT 4
16070: PUSH
16071: LD_INT 5
16073: PUSH
16074: LD_INT 7
16076: PUSH
16077: LD_INT 11
16079: PUSH
16080: LD_INT 12
16082: PUSH
16083: LD_INT 15
16085: PUSH
16086: LD_INT 16
16088: PUSH
16089: LD_INT 20
16091: PUSH
16092: LD_INT 21
16094: PUSH
16095: LD_INT 22
16097: PUSH
16098: LD_INT 23
16100: PUSH
16101: LD_INT 25
16103: PUSH
16104: LD_INT 26
16106: PUSH
16107: LD_INT 30
16109: PUSH
16110: LD_INT 31
16112: PUSH
16113: LD_INT 32
16115: PUSH
16116: LD_INT 33
16118: PUSH
16119: LD_INT 34
16121: PUSH
16122: EMPTY
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: LIST
16128: LIST
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: LIST
16137: LIST
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: PUSH
16143: LD_INT 101
16145: PUSH
16146: LD_INT 102
16148: PUSH
16149: LD_INT 103
16151: PUSH
16152: LD_INT 106
16154: PUSH
16155: LD_INT 108
16157: PUSH
16158: LD_INT 112
16160: PUSH
16161: LD_INT 113
16163: PUSH
16164: LD_INT 114
16166: PUSH
16167: EMPTY
16168: LIST
16169: LIST
16170: LIST
16171: LIST
16172: LIST
16173: LIST
16174: LIST
16175: LIST
16176: PUSH
16177: EMPTY
16178: LIST
16179: LIST
16180: ST_TO_ADDR
16181: GO 16776
16183: LD_INT 17
16185: DOUBLE
16186: EQUAL
16187: IFTRUE 16191
16189: GO 16403
16191: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
16192: LD_ADDR_VAR 0 1
16196: PUSH
16197: LD_INT 1
16199: PUSH
16200: LD_INT 2
16202: PUSH
16203: LD_INT 3
16205: PUSH
16206: LD_INT 4
16208: PUSH
16209: LD_INT 5
16211: PUSH
16212: LD_INT 6
16214: PUSH
16215: LD_INT 7
16217: PUSH
16218: LD_INT 8
16220: PUSH
16221: LD_INT 9
16223: PUSH
16224: LD_INT 10
16226: PUSH
16227: LD_INT 11
16229: PUSH
16230: LD_INT 12
16232: PUSH
16233: LD_INT 13
16235: PUSH
16236: LD_INT 14
16238: PUSH
16239: LD_INT 15
16241: PUSH
16242: LD_INT 16
16244: PUSH
16245: LD_INT 17
16247: PUSH
16248: LD_INT 18
16250: PUSH
16251: LD_INT 19
16253: PUSH
16254: LD_INT 20
16256: PUSH
16257: LD_INT 21
16259: PUSH
16260: LD_INT 22
16262: PUSH
16263: LD_INT 23
16265: PUSH
16266: LD_INT 24
16268: PUSH
16269: LD_INT 25
16271: PUSH
16272: LD_INT 26
16274: PUSH
16275: LD_INT 27
16277: PUSH
16278: LD_INT 28
16280: PUSH
16281: LD_INT 29
16283: PUSH
16284: LD_INT 30
16286: PUSH
16287: LD_INT 31
16289: PUSH
16290: LD_INT 32
16292: PUSH
16293: LD_INT 33
16295: PUSH
16296: LD_INT 34
16298: PUSH
16299: LD_INT 36
16301: PUSH
16302: EMPTY
16303: LIST
16304: LIST
16305: LIST
16306: LIST
16307: LIST
16308: LIST
16309: LIST
16310: LIST
16311: LIST
16312: LIST
16313: LIST
16314: LIST
16315: LIST
16316: LIST
16317: LIST
16318: LIST
16319: LIST
16320: LIST
16321: LIST
16322: LIST
16323: LIST
16324: LIST
16325: LIST
16326: LIST
16327: LIST
16328: LIST
16329: LIST
16330: LIST
16331: LIST
16332: LIST
16333: LIST
16334: LIST
16335: LIST
16336: LIST
16337: LIST
16338: PUSH
16339: LD_INT 101
16341: PUSH
16342: LD_INT 102
16344: PUSH
16345: LD_INT 103
16347: PUSH
16348: LD_INT 104
16350: PUSH
16351: LD_INT 105
16353: PUSH
16354: LD_INT 106
16356: PUSH
16357: LD_INT 107
16359: PUSH
16360: LD_INT 108
16362: PUSH
16363: LD_INT 109
16365: PUSH
16366: LD_INT 110
16368: PUSH
16369: LD_INT 111
16371: PUSH
16372: LD_INT 112
16374: PUSH
16375: LD_INT 113
16377: PUSH
16378: LD_INT 114
16380: PUSH
16381: EMPTY
16382: LIST
16383: LIST
16384: LIST
16385: LIST
16386: LIST
16387: LIST
16388: LIST
16389: LIST
16390: LIST
16391: LIST
16392: LIST
16393: LIST
16394: LIST
16395: LIST
16396: PUSH
16397: EMPTY
16398: LIST
16399: LIST
16400: ST_TO_ADDR
16401: GO 16776
16403: LD_INT 18
16405: DOUBLE
16406: EQUAL
16407: IFTRUE 16411
16409: GO 16547
16411: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
16412: LD_ADDR_VAR 0 1
16416: PUSH
16417: LD_INT 2
16419: PUSH
16420: LD_INT 4
16422: PUSH
16423: LD_INT 5
16425: PUSH
16426: LD_INT 7
16428: PUSH
16429: LD_INT 11
16431: PUSH
16432: LD_INT 12
16434: PUSH
16435: LD_INT 15
16437: PUSH
16438: LD_INT 16
16440: PUSH
16441: LD_INT 20
16443: PUSH
16444: LD_INT 21
16446: PUSH
16447: LD_INT 22
16449: PUSH
16450: LD_INT 23
16452: PUSH
16453: LD_INT 25
16455: PUSH
16456: LD_INT 26
16458: PUSH
16459: LD_INT 30
16461: PUSH
16462: LD_INT 31
16464: PUSH
16465: LD_INT 32
16467: PUSH
16468: LD_INT 33
16470: PUSH
16471: LD_INT 34
16473: PUSH
16474: LD_INT 35
16476: PUSH
16477: LD_INT 36
16479: PUSH
16480: EMPTY
16481: LIST
16482: LIST
16483: LIST
16484: LIST
16485: LIST
16486: LIST
16487: LIST
16488: LIST
16489: LIST
16490: LIST
16491: LIST
16492: LIST
16493: LIST
16494: LIST
16495: LIST
16496: LIST
16497: LIST
16498: LIST
16499: LIST
16500: LIST
16501: LIST
16502: PUSH
16503: LD_INT 101
16505: PUSH
16506: LD_INT 102
16508: PUSH
16509: LD_INT 103
16511: PUSH
16512: LD_INT 106
16514: PUSH
16515: LD_INT 108
16517: PUSH
16518: LD_INT 112
16520: PUSH
16521: LD_INT 113
16523: PUSH
16524: LD_INT 114
16526: PUSH
16527: LD_INT 115
16529: PUSH
16530: EMPTY
16531: LIST
16532: LIST
16533: LIST
16534: LIST
16535: LIST
16536: LIST
16537: LIST
16538: LIST
16539: LIST
16540: PUSH
16541: EMPTY
16542: LIST
16543: LIST
16544: ST_TO_ADDR
16545: GO 16776
16547: LD_INT 19
16549: DOUBLE
16550: EQUAL
16551: IFTRUE 16555
16553: GO 16775
16555: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
16556: LD_ADDR_VAR 0 1
16560: PUSH
16561: LD_INT 1
16563: PUSH
16564: LD_INT 2
16566: PUSH
16567: LD_INT 3
16569: PUSH
16570: LD_INT 4
16572: PUSH
16573: LD_INT 5
16575: PUSH
16576: LD_INT 6
16578: PUSH
16579: LD_INT 7
16581: PUSH
16582: LD_INT 8
16584: PUSH
16585: LD_INT 9
16587: PUSH
16588: LD_INT 10
16590: PUSH
16591: LD_INT 11
16593: PUSH
16594: LD_INT 12
16596: PUSH
16597: LD_INT 13
16599: PUSH
16600: LD_INT 14
16602: PUSH
16603: LD_INT 15
16605: PUSH
16606: LD_INT 16
16608: PUSH
16609: LD_INT 17
16611: PUSH
16612: LD_INT 18
16614: PUSH
16615: LD_INT 19
16617: PUSH
16618: LD_INT 20
16620: PUSH
16621: LD_INT 21
16623: PUSH
16624: LD_INT 22
16626: PUSH
16627: LD_INT 23
16629: PUSH
16630: LD_INT 24
16632: PUSH
16633: LD_INT 25
16635: PUSH
16636: LD_INT 26
16638: PUSH
16639: LD_INT 27
16641: PUSH
16642: LD_INT 28
16644: PUSH
16645: LD_INT 29
16647: PUSH
16648: LD_INT 30
16650: PUSH
16651: LD_INT 31
16653: PUSH
16654: LD_INT 32
16656: PUSH
16657: LD_INT 33
16659: PUSH
16660: LD_INT 34
16662: PUSH
16663: LD_INT 35
16665: PUSH
16666: LD_INT 36
16668: PUSH
16669: EMPTY
16670: LIST
16671: LIST
16672: LIST
16673: LIST
16674: LIST
16675: LIST
16676: LIST
16677: LIST
16678: LIST
16679: LIST
16680: LIST
16681: LIST
16682: LIST
16683: LIST
16684: LIST
16685: LIST
16686: LIST
16687: LIST
16688: LIST
16689: LIST
16690: LIST
16691: LIST
16692: LIST
16693: LIST
16694: LIST
16695: LIST
16696: LIST
16697: LIST
16698: LIST
16699: LIST
16700: LIST
16701: LIST
16702: LIST
16703: LIST
16704: LIST
16705: LIST
16706: PUSH
16707: LD_INT 101
16709: PUSH
16710: LD_INT 102
16712: PUSH
16713: LD_INT 103
16715: PUSH
16716: LD_INT 104
16718: PUSH
16719: LD_INT 105
16721: PUSH
16722: LD_INT 106
16724: PUSH
16725: LD_INT 107
16727: PUSH
16728: LD_INT 108
16730: PUSH
16731: LD_INT 109
16733: PUSH
16734: LD_INT 110
16736: PUSH
16737: LD_INT 111
16739: PUSH
16740: LD_INT 112
16742: PUSH
16743: LD_INT 113
16745: PUSH
16746: LD_INT 114
16748: PUSH
16749: LD_INT 115
16751: PUSH
16752: EMPTY
16753: LIST
16754: LIST
16755: LIST
16756: LIST
16757: LIST
16758: LIST
16759: LIST
16760: LIST
16761: LIST
16762: LIST
16763: LIST
16764: LIST
16765: LIST
16766: LIST
16767: LIST
16768: PUSH
16769: EMPTY
16770: LIST
16771: LIST
16772: ST_TO_ADDR
16773: GO 16776
16775: POP
// end else
16776: GO 16995
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
16778: LD_ADDR_VAR 0 1
16782: PUSH
16783: LD_INT 1
16785: PUSH
16786: LD_INT 2
16788: PUSH
16789: LD_INT 3
16791: PUSH
16792: LD_INT 4
16794: PUSH
16795: LD_INT 5
16797: PUSH
16798: LD_INT 6
16800: PUSH
16801: LD_INT 7
16803: PUSH
16804: LD_INT 8
16806: PUSH
16807: LD_INT 9
16809: PUSH
16810: LD_INT 10
16812: PUSH
16813: LD_INT 11
16815: PUSH
16816: LD_INT 12
16818: PUSH
16819: LD_INT 13
16821: PUSH
16822: LD_INT 14
16824: PUSH
16825: LD_INT 15
16827: PUSH
16828: LD_INT 16
16830: PUSH
16831: LD_INT 17
16833: PUSH
16834: LD_INT 18
16836: PUSH
16837: LD_INT 19
16839: PUSH
16840: LD_INT 20
16842: PUSH
16843: LD_INT 21
16845: PUSH
16846: LD_INT 22
16848: PUSH
16849: LD_INT 23
16851: PUSH
16852: LD_INT 24
16854: PUSH
16855: LD_INT 25
16857: PUSH
16858: LD_INT 26
16860: PUSH
16861: LD_INT 27
16863: PUSH
16864: LD_INT 28
16866: PUSH
16867: LD_INT 29
16869: PUSH
16870: LD_INT 30
16872: PUSH
16873: LD_INT 31
16875: PUSH
16876: LD_INT 32
16878: PUSH
16879: LD_INT 33
16881: PUSH
16882: LD_INT 34
16884: PUSH
16885: LD_INT 35
16887: PUSH
16888: LD_INT 36
16890: PUSH
16891: EMPTY
16892: LIST
16893: LIST
16894: LIST
16895: LIST
16896: LIST
16897: LIST
16898: LIST
16899: LIST
16900: LIST
16901: LIST
16902: LIST
16903: LIST
16904: LIST
16905: LIST
16906: LIST
16907: LIST
16908: LIST
16909: LIST
16910: LIST
16911: LIST
16912: LIST
16913: LIST
16914: LIST
16915: LIST
16916: LIST
16917: LIST
16918: LIST
16919: LIST
16920: LIST
16921: LIST
16922: LIST
16923: LIST
16924: LIST
16925: LIST
16926: LIST
16927: LIST
16928: PUSH
16929: LD_INT 101
16931: PUSH
16932: LD_INT 102
16934: PUSH
16935: LD_INT 103
16937: PUSH
16938: LD_INT 104
16940: PUSH
16941: LD_INT 105
16943: PUSH
16944: LD_INT 106
16946: PUSH
16947: LD_INT 107
16949: PUSH
16950: LD_INT 108
16952: PUSH
16953: LD_INT 109
16955: PUSH
16956: LD_INT 110
16958: PUSH
16959: LD_INT 111
16961: PUSH
16962: LD_INT 112
16964: PUSH
16965: LD_INT 113
16967: PUSH
16968: LD_INT 114
16970: PUSH
16971: LD_INT 115
16973: PUSH
16974: EMPTY
16975: LIST
16976: LIST
16977: LIST
16978: LIST
16979: LIST
16980: LIST
16981: LIST
16982: LIST
16983: LIST
16984: LIST
16985: LIST
16986: LIST
16987: LIST
16988: LIST
16989: LIST
16990: PUSH
16991: EMPTY
16992: LIST
16993: LIST
16994: ST_TO_ADDR
// if result then
16995: LD_VAR 0 1
16999: IFFALSE 17288
// begin normal :=  ;
17001: LD_ADDR_VAR 0 3
17005: PUSH
17006: LD_STRING 
17008: ST_TO_ADDR
// hardcore :=  ;
17009: LD_ADDR_VAR 0 4
17013: PUSH
17014: LD_STRING 
17016: ST_TO_ADDR
// for i = 1 to normalCounter do
17017: LD_ADDR_VAR 0 5
17021: PUSH
17022: DOUBLE
17023: LD_INT 1
17025: DEC
17026: ST_TO_ADDR
17027: LD_EXP 37
17031: PUSH
17032: FOR_TO
17033: IFFALSE 17134
// begin tmp := 0 ;
17035: LD_ADDR_VAR 0 2
17039: PUSH
17040: LD_STRING 0
17042: ST_TO_ADDR
// if result [ 1 ] then
17043: LD_VAR 0 1
17047: PUSH
17048: LD_INT 1
17050: ARRAY
17051: IFFALSE 17116
// if result [ 1 ] [ 1 ] = i then
17053: LD_VAR 0 1
17057: PUSH
17058: LD_INT 1
17060: ARRAY
17061: PUSH
17062: LD_INT 1
17064: ARRAY
17065: PUSH
17066: LD_VAR 0 5
17070: EQUAL
17071: IFFALSE 17116
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
17073: LD_ADDR_VAR 0 1
17077: PUSH
17078: LD_VAR 0 1
17082: PPUSH
17083: LD_INT 1
17085: PPUSH
17086: LD_VAR 0 1
17090: PUSH
17091: LD_INT 1
17093: ARRAY
17094: PPUSH
17095: LD_INT 1
17097: PPUSH
17098: CALL_OW 3
17102: PPUSH
17103: CALL_OW 1
17107: ST_TO_ADDR
// tmp := 1 ;
17108: LD_ADDR_VAR 0 2
17112: PUSH
17113: LD_STRING 1
17115: ST_TO_ADDR
// end ; normal := normal & tmp ;
17116: LD_ADDR_VAR 0 3
17120: PUSH
17121: LD_VAR 0 3
17125: PUSH
17126: LD_VAR 0 2
17130: STR
17131: ST_TO_ADDR
// end ;
17132: GO 17032
17134: POP
17135: POP
// for i = 1 to hardcoreCounter do
17136: LD_ADDR_VAR 0 5
17140: PUSH
17141: DOUBLE
17142: LD_INT 1
17144: DEC
17145: ST_TO_ADDR
17146: LD_EXP 38
17150: PUSH
17151: FOR_TO
17152: IFFALSE 17257
// begin tmp := 0 ;
17154: LD_ADDR_VAR 0 2
17158: PUSH
17159: LD_STRING 0
17161: ST_TO_ADDR
// if result [ 2 ] then
17162: LD_VAR 0 1
17166: PUSH
17167: LD_INT 2
17169: ARRAY
17170: IFFALSE 17239
// if result [ 2 ] [ 1 ] = 100 + i then
17172: LD_VAR 0 1
17176: PUSH
17177: LD_INT 2
17179: ARRAY
17180: PUSH
17181: LD_INT 1
17183: ARRAY
17184: PUSH
17185: LD_INT 100
17187: PUSH
17188: LD_VAR 0 5
17192: PLUS
17193: EQUAL
17194: IFFALSE 17239
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
17196: LD_ADDR_VAR 0 1
17200: PUSH
17201: LD_VAR 0 1
17205: PPUSH
17206: LD_INT 2
17208: PPUSH
17209: LD_VAR 0 1
17213: PUSH
17214: LD_INT 2
17216: ARRAY
17217: PPUSH
17218: LD_INT 1
17220: PPUSH
17221: CALL_OW 3
17225: PPUSH
17226: CALL_OW 1
17230: ST_TO_ADDR
// tmp := 1 ;
17231: LD_ADDR_VAR 0 2
17235: PUSH
17236: LD_STRING 1
17238: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
17239: LD_ADDR_VAR 0 4
17243: PUSH
17244: LD_VAR 0 4
17248: PUSH
17249: LD_VAR 0 2
17253: STR
17254: ST_TO_ADDR
// end ;
17255: GO 17151
17257: POP
17258: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
17259: LD_STRING getStreamItemsFromMission("
17261: PUSH
17262: LD_VAR 0 3
17266: STR
17267: PUSH
17268: LD_STRING ","
17270: STR
17271: PUSH
17272: LD_VAR 0 4
17276: STR
17277: PUSH
17278: LD_STRING ")
17280: STR
17281: PPUSH
17282: CALL_OW 559
// end else
17286: GO 17295
// ToLua ( getStreamItemsFromMission("","") ) ;
17288: LD_STRING getStreamItemsFromMission("","")
17290: PPUSH
17291: CALL_OW 559
// end ;
17295: LD_VAR 0 1
17299: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17300: LD_EXP 36
17304: PUSH
17305: LD_EXP 41
17309: AND
17310: IFFALSE 17434
17312: GO 17314
17314: DISABLE
17315: LD_INT 0
17317: PPUSH
17318: PPUSH
// begin enable ;
17319: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17320: LD_ADDR_VAR 0 2
17324: PUSH
17325: LD_INT 22
17327: PUSH
17328: LD_OWVAR 2
17332: PUSH
17333: EMPTY
17334: LIST
17335: LIST
17336: PUSH
17337: LD_INT 2
17339: PUSH
17340: LD_INT 34
17342: PUSH
17343: LD_INT 7
17345: PUSH
17346: EMPTY
17347: LIST
17348: LIST
17349: PUSH
17350: LD_INT 34
17352: PUSH
17353: LD_INT 45
17355: PUSH
17356: EMPTY
17357: LIST
17358: LIST
17359: PUSH
17360: LD_INT 34
17362: PUSH
17363: LD_INT 28
17365: PUSH
17366: EMPTY
17367: LIST
17368: LIST
17369: PUSH
17370: LD_INT 34
17372: PUSH
17373: LD_INT 47
17375: PUSH
17376: EMPTY
17377: LIST
17378: LIST
17379: PUSH
17380: EMPTY
17381: LIST
17382: LIST
17383: LIST
17384: LIST
17385: LIST
17386: PUSH
17387: EMPTY
17388: LIST
17389: LIST
17390: PPUSH
17391: CALL_OW 69
17395: ST_TO_ADDR
// if not tmp then
17396: LD_VAR 0 2
17400: NOT
17401: IFFALSE 17405
// exit ;
17403: GO 17434
// for i in tmp do
17405: LD_ADDR_VAR 0 1
17409: PUSH
17410: LD_VAR 0 2
17414: PUSH
17415: FOR_IN
17416: IFFALSE 17432
// begin SetLives ( i , 0 ) ;
17418: LD_VAR 0 1
17422: PPUSH
17423: LD_INT 0
17425: PPUSH
17426: CALL_OW 234
// end ;
17430: GO 17415
17432: POP
17433: POP
// end ;
17434: PPOPN 2
17436: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17437: LD_EXP 36
17441: PUSH
17442: LD_EXP 42
17446: AND
17447: IFFALSE 17531
17449: GO 17451
17451: DISABLE
17452: LD_INT 0
17454: PPUSH
17455: PPUSH
// begin enable ;
17456: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17457: LD_ADDR_VAR 0 2
17461: PUSH
17462: LD_INT 22
17464: PUSH
17465: LD_OWVAR 2
17469: PUSH
17470: EMPTY
17471: LIST
17472: LIST
17473: PUSH
17474: LD_INT 32
17476: PUSH
17477: LD_INT 3
17479: PUSH
17480: EMPTY
17481: LIST
17482: LIST
17483: PUSH
17484: EMPTY
17485: LIST
17486: LIST
17487: PPUSH
17488: CALL_OW 69
17492: ST_TO_ADDR
// if not tmp then
17493: LD_VAR 0 2
17497: NOT
17498: IFFALSE 17502
// exit ;
17500: GO 17531
// for i in tmp do
17502: LD_ADDR_VAR 0 1
17506: PUSH
17507: LD_VAR 0 2
17511: PUSH
17512: FOR_IN
17513: IFFALSE 17529
// begin SetLives ( i , 0 ) ;
17515: LD_VAR 0 1
17519: PPUSH
17520: LD_INT 0
17522: PPUSH
17523: CALL_OW 234
// end ;
17527: GO 17512
17529: POP
17530: POP
// end ;
17531: PPOPN 2
17533: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17534: LD_EXP 36
17538: PUSH
17539: LD_EXP 39
17543: AND
17544: IFFALSE 17637
17546: GO 17548
17548: DISABLE
17549: LD_INT 0
17551: PPUSH
// begin enable ;
17552: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17553: LD_ADDR_VAR 0 1
17557: PUSH
17558: LD_INT 22
17560: PUSH
17561: LD_OWVAR 2
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: PUSH
17570: LD_INT 2
17572: PUSH
17573: LD_INT 25
17575: PUSH
17576: LD_INT 5
17578: PUSH
17579: EMPTY
17580: LIST
17581: LIST
17582: PUSH
17583: LD_INT 25
17585: PUSH
17586: LD_INT 9
17588: PUSH
17589: EMPTY
17590: LIST
17591: LIST
17592: PUSH
17593: LD_INT 25
17595: PUSH
17596: LD_INT 8
17598: PUSH
17599: EMPTY
17600: LIST
17601: LIST
17602: PUSH
17603: EMPTY
17604: LIST
17605: LIST
17606: LIST
17607: LIST
17608: PUSH
17609: EMPTY
17610: LIST
17611: LIST
17612: PPUSH
17613: CALL_OW 69
17617: PUSH
17618: FOR_IN
17619: IFFALSE 17635
// begin SetClass ( i , 1 ) ;
17621: LD_VAR 0 1
17625: PPUSH
17626: LD_INT 1
17628: PPUSH
17629: CALL_OW 336
// end ;
17633: GO 17618
17635: POP
17636: POP
// end ;
17637: PPOPN 1
17639: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17640: LD_EXP 36
17644: PUSH
17645: LD_EXP 40
17649: AND
17650: PUSH
17651: LD_OWVAR 65
17655: PUSH
17656: LD_INT 7
17658: LESS
17659: AND
17660: IFFALSE 17674
17662: GO 17664
17664: DISABLE
// begin enable ;
17665: ENABLE
// game_speed := 7 ;
17666: LD_ADDR_OWVAR 65
17670: PUSH
17671: LD_INT 7
17673: ST_TO_ADDR
// end ;
17674: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17675: LD_EXP 36
17679: PUSH
17680: LD_EXP 43
17684: AND
17685: IFFALSE 17887
17687: GO 17689
17689: DISABLE
17690: LD_INT 0
17692: PPUSH
17693: PPUSH
17694: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17695: LD_ADDR_VAR 0 3
17699: PUSH
17700: LD_INT 81
17702: PUSH
17703: LD_OWVAR 2
17707: PUSH
17708: EMPTY
17709: LIST
17710: LIST
17711: PUSH
17712: LD_INT 21
17714: PUSH
17715: LD_INT 1
17717: PUSH
17718: EMPTY
17719: LIST
17720: LIST
17721: PUSH
17722: EMPTY
17723: LIST
17724: LIST
17725: PPUSH
17726: CALL_OW 69
17730: ST_TO_ADDR
// if not tmp then
17731: LD_VAR 0 3
17735: NOT
17736: IFFALSE 17740
// exit ;
17738: GO 17887
// if tmp > 5 then
17740: LD_VAR 0 3
17744: PUSH
17745: LD_INT 5
17747: GREATER
17748: IFFALSE 17760
// k := 5 else
17750: LD_ADDR_VAR 0 2
17754: PUSH
17755: LD_INT 5
17757: ST_TO_ADDR
17758: GO 17770
// k := tmp ;
17760: LD_ADDR_VAR 0 2
17764: PUSH
17765: LD_VAR 0 3
17769: ST_TO_ADDR
// for i := 1 to k do
17770: LD_ADDR_VAR 0 1
17774: PUSH
17775: DOUBLE
17776: LD_INT 1
17778: DEC
17779: ST_TO_ADDR
17780: LD_VAR 0 2
17784: PUSH
17785: FOR_TO
17786: IFFALSE 17885
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17788: LD_VAR 0 3
17792: PUSH
17793: LD_VAR 0 1
17797: ARRAY
17798: PPUSH
17799: LD_VAR 0 1
17803: PUSH
17804: LD_INT 4
17806: MOD
17807: PUSH
17808: LD_INT 1
17810: PLUS
17811: PPUSH
17812: CALL_OW 259
17816: PUSH
17817: LD_INT 10
17819: LESS
17820: IFFALSE 17883
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
17822: LD_VAR 0 3
17826: PUSH
17827: LD_VAR 0 1
17831: ARRAY
17832: PPUSH
17833: LD_VAR 0 1
17837: PUSH
17838: LD_INT 4
17840: MOD
17841: PUSH
17842: LD_INT 1
17844: PLUS
17845: PPUSH
17846: LD_VAR 0 3
17850: PUSH
17851: LD_VAR 0 1
17855: ARRAY
17856: PPUSH
17857: LD_VAR 0 1
17861: PUSH
17862: LD_INT 4
17864: MOD
17865: PUSH
17866: LD_INT 1
17868: PLUS
17869: PPUSH
17870: CALL_OW 259
17874: PUSH
17875: LD_INT 1
17877: PLUS
17878: PPUSH
17879: CALL_OW 237
17883: GO 17785
17885: POP
17886: POP
// end ;
17887: PPOPN 3
17889: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
17890: LD_EXP 36
17894: PUSH
17895: LD_EXP 44
17899: AND
17900: IFFALSE 17920
17902: GO 17904
17904: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
17905: LD_INT 4
17907: PPUSH
17908: LD_OWVAR 2
17912: PPUSH
17913: LD_INT 0
17915: PPUSH
17916: CALL_OW 324
17920: END
// every 0 0$1 trigger StreamModeActive and sShovel do
17921: LD_EXP 36
17925: PUSH
17926: LD_EXP 73
17930: AND
17931: IFFALSE 17951
17933: GO 17935
17935: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
17936: LD_INT 19
17938: PPUSH
17939: LD_OWVAR 2
17943: PPUSH
17944: LD_INT 0
17946: PPUSH
17947: CALL_OW 324
17951: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
17952: LD_EXP 36
17956: PUSH
17957: LD_EXP 45
17961: AND
17962: IFFALSE 18064
17964: GO 17966
17966: DISABLE
17967: LD_INT 0
17969: PPUSH
17970: PPUSH
// begin enable ;
17971: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
17972: LD_ADDR_VAR 0 2
17976: PUSH
17977: LD_INT 22
17979: PUSH
17980: LD_OWVAR 2
17984: PUSH
17985: EMPTY
17986: LIST
17987: LIST
17988: PUSH
17989: LD_INT 2
17991: PUSH
17992: LD_INT 34
17994: PUSH
17995: LD_INT 11
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: PUSH
18002: LD_INT 34
18004: PUSH
18005: LD_INT 30
18007: PUSH
18008: EMPTY
18009: LIST
18010: LIST
18011: PUSH
18012: EMPTY
18013: LIST
18014: LIST
18015: LIST
18016: PUSH
18017: EMPTY
18018: LIST
18019: LIST
18020: PPUSH
18021: CALL_OW 69
18025: ST_TO_ADDR
// if not tmp then
18026: LD_VAR 0 2
18030: NOT
18031: IFFALSE 18035
// exit ;
18033: GO 18064
// for i in tmp do
18035: LD_ADDR_VAR 0 1
18039: PUSH
18040: LD_VAR 0 2
18044: PUSH
18045: FOR_IN
18046: IFFALSE 18062
// begin SetLives ( i , 0 ) ;
18048: LD_VAR 0 1
18052: PPUSH
18053: LD_INT 0
18055: PPUSH
18056: CALL_OW 234
// end ;
18060: GO 18045
18062: POP
18063: POP
// end ;
18064: PPOPN 2
18066: END
// every 0 0$1 trigger StreamModeActive and sBunker do
18067: LD_EXP 36
18071: PUSH
18072: LD_EXP 46
18076: AND
18077: IFFALSE 18097
18079: GO 18081
18081: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
18082: LD_INT 32
18084: PPUSH
18085: LD_OWVAR 2
18089: PPUSH
18090: LD_INT 0
18092: PPUSH
18093: CALL_OW 324
18097: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
18098: LD_EXP 36
18102: PUSH
18103: LD_EXP 47
18107: AND
18108: IFFALSE 18289
18110: GO 18112
18112: DISABLE
18113: LD_INT 0
18115: PPUSH
18116: PPUSH
18117: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18118: LD_ADDR_VAR 0 2
18122: PUSH
18123: LD_INT 22
18125: PUSH
18126: LD_OWVAR 2
18130: PUSH
18131: EMPTY
18132: LIST
18133: LIST
18134: PUSH
18135: LD_INT 33
18137: PUSH
18138: LD_INT 3
18140: PUSH
18141: EMPTY
18142: LIST
18143: LIST
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: PPUSH
18149: CALL_OW 69
18153: ST_TO_ADDR
// if not tmp then
18154: LD_VAR 0 2
18158: NOT
18159: IFFALSE 18163
// exit ;
18161: GO 18289
// side := 0 ;
18163: LD_ADDR_VAR 0 3
18167: PUSH
18168: LD_INT 0
18170: ST_TO_ADDR
// for i := 1 to 8 do
18171: LD_ADDR_VAR 0 1
18175: PUSH
18176: DOUBLE
18177: LD_INT 1
18179: DEC
18180: ST_TO_ADDR
18181: LD_INT 8
18183: PUSH
18184: FOR_TO
18185: IFFALSE 18233
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18187: LD_OWVAR 2
18191: PUSH
18192: LD_VAR 0 1
18196: NONEQUAL
18197: PUSH
18198: LD_OWVAR 2
18202: PPUSH
18203: LD_VAR 0 1
18207: PPUSH
18208: CALL_OW 81
18212: PUSH
18213: LD_INT 2
18215: EQUAL
18216: AND
18217: IFFALSE 18231
// begin side := i ;
18219: LD_ADDR_VAR 0 3
18223: PUSH
18224: LD_VAR 0 1
18228: ST_TO_ADDR
// break ;
18229: GO 18233
// end ;
18231: GO 18184
18233: POP
18234: POP
// if not side then
18235: LD_VAR 0 3
18239: NOT
18240: IFFALSE 18244
// exit ;
18242: GO 18289
// for i := 1 to tmp do
18244: LD_ADDR_VAR 0 1
18248: PUSH
18249: DOUBLE
18250: LD_INT 1
18252: DEC
18253: ST_TO_ADDR
18254: LD_VAR 0 2
18258: PUSH
18259: FOR_TO
18260: IFFALSE 18287
// if Prob ( 60 ) then
18262: LD_INT 60
18264: PPUSH
18265: CALL_OW 13
18269: IFFALSE 18285
// SetSide ( i , side ) ;
18271: LD_VAR 0 1
18275: PPUSH
18276: LD_VAR 0 3
18280: PPUSH
18281: CALL_OW 235
18285: GO 18259
18287: POP
18288: POP
// end ;
18289: PPOPN 3
18291: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18292: LD_EXP 36
18296: PUSH
18297: LD_EXP 49
18301: AND
18302: IFFALSE 18421
18304: GO 18306
18306: DISABLE
18307: LD_INT 0
18309: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18310: LD_ADDR_VAR 0 1
18314: PUSH
18315: LD_INT 22
18317: PUSH
18318: LD_OWVAR 2
18322: PUSH
18323: EMPTY
18324: LIST
18325: LIST
18326: PUSH
18327: LD_INT 21
18329: PUSH
18330: LD_INT 1
18332: PUSH
18333: EMPTY
18334: LIST
18335: LIST
18336: PUSH
18337: LD_INT 3
18339: PUSH
18340: LD_INT 23
18342: PUSH
18343: LD_INT 0
18345: PUSH
18346: EMPTY
18347: LIST
18348: LIST
18349: PUSH
18350: EMPTY
18351: LIST
18352: LIST
18353: PUSH
18354: EMPTY
18355: LIST
18356: LIST
18357: LIST
18358: PPUSH
18359: CALL_OW 69
18363: PUSH
18364: FOR_IN
18365: IFFALSE 18419
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18367: LD_VAR 0 1
18371: PPUSH
18372: CALL_OW 257
18376: PUSH
18377: LD_INT 1
18379: PUSH
18380: LD_INT 2
18382: PUSH
18383: LD_INT 3
18385: PUSH
18386: LD_INT 4
18388: PUSH
18389: EMPTY
18390: LIST
18391: LIST
18392: LIST
18393: LIST
18394: IN
18395: IFFALSE 18417
// SetClass ( un , rand ( 1 , 4 ) ) ;
18397: LD_VAR 0 1
18401: PPUSH
18402: LD_INT 1
18404: PPUSH
18405: LD_INT 4
18407: PPUSH
18408: CALL_OW 12
18412: PPUSH
18413: CALL_OW 336
18417: GO 18364
18419: POP
18420: POP
// end ;
18421: PPOPN 1
18423: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18424: LD_EXP 36
18428: PUSH
18429: LD_EXP 48
18433: AND
18434: IFFALSE 18513
18436: GO 18438
18438: DISABLE
18439: LD_INT 0
18441: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18442: LD_ADDR_VAR 0 1
18446: PUSH
18447: LD_INT 22
18449: PUSH
18450: LD_OWVAR 2
18454: PUSH
18455: EMPTY
18456: LIST
18457: LIST
18458: PUSH
18459: LD_INT 21
18461: PUSH
18462: LD_INT 3
18464: PUSH
18465: EMPTY
18466: LIST
18467: LIST
18468: PUSH
18469: EMPTY
18470: LIST
18471: LIST
18472: PPUSH
18473: CALL_OW 69
18477: ST_TO_ADDR
// if not tmp then
18478: LD_VAR 0 1
18482: NOT
18483: IFFALSE 18487
// exit ;
18485: GO 18513
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18487: LD_VAR 0 1
18491: PUSH
18492: LD_INT 1
18494: PPUSH
18495: LD_VAR 0 1
18499: PPUSH
18500: CALL_OW 12
18504: ARRAY
18505: PPUSH
18506: LD_INT 100
18508: PPUSH
18509: CALL_OW 234
// end ;
18513: PPOPN 1
18515: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18516: LD_EXP 36
18520: PUSH
18521: LD_EXP 50
18525: AND
18526: IFFALSE 18624
18528: GO 18530
18530: DISABLE
18531: LD_INT 0
18533: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18534: LD_ADDR_VAR 0 1
18538: PUSH
18539: LD_INT 22
18541: PUSH
18542: LD_OWVAR 2
18546: PUSH
18547: EMPTY
18548: LIST
18549: LIST
18550: PUSH
18551: LD_INT 21
18553: PUSH
18554: LD_INT 1
18556: PUSH
18557: EMPTY
18558: LIST
18559: LIST
18560: PUSH
18561: EMPTY
18562: LIST
18563: LIST
18564: PPUSH
18565: CALL_OW 69
18569: ST_TO_ADDR
// if not tmp then
18570: LD_VAR 0 1
18574: NOT
18575: IFFALSE 18579
// exit ;
18577: GO 18624
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18579: LD_VAR 0 1
18583: PUSH
18584: LD_INT 1
18586: PPUSH
18587: LD_VAR 0 1
18591: PPUSH
18592: CALL_OW 12
18596: ARRAY
18597: PPUSH
18598: LD_INT 1
18600: PPUSH
18601: LD_INT 4
18603: PPUSH
18604: CALL_OW 12
18608: PPUSH
18609: LD_INT 3000
18611: PPUSH
18612: LD_INT 9000
18614: PPUSH
18615: CALL_OW 12
18619: PPUSH
18620: CALL_OW 492
// end ;
18624: PPOPN 1
18626: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18627: LD_EXP 36
18631: PUSH
18632: LD_EXP 51
18636: AND
18637: IFFALSE 18657
18639: GO 18641
18641: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18642: LD_INT 1
18644: PPUSH
18645: LD_OWVAR 2
18649: PPUSH
18650: LD_INT 0
18652: PPUSH
18653: CALL_OW 324
18657: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18658: LD_EXP 36
18662: PUSH
18663: LD_EXP 52
18667: AND
18668: IFFALSE 18751
18670: GO 18672
18672: DISABLE
18673: LD_INT 0
18675: PPUSH
18676: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18677: LD_ADDR_VAR 0 2
18681: PUSH
18682: LD_INT 22
18684: PUSH
18685: LD_OWVAR 2
18689: PUSH
18690: EMPTY
18691: LIST
18692: LIST
18693: PUSH
18694: LD_INT 21
18696: PUSH
18697: LD_INT 3
18699: PUSH
18700: EMPTY
18701: LIST
18702: LIST
18703: PUSH
18704: EMPTY
18705: LIST
18706: LIST
18707: PPUSH
18708: CALL_OW 69
18712: ST_TO_ADDR
// if not tmp then
18713: LD_VAR 0 2
18717: NOT
18718: IFFALSE 18722
// exit ;
18720: GO 18751
// for i in tmp do
18722: LD_ADDR_VAR 0 1
18726: PUSH
18727: LD_VAR 0 2
18731: PUSH
18732: FOR_IN
18733: IFFALSE 18749
// SetBLevel ( i , 10 ) ;
18735: LD_VAR 0 1
18739: PPUSH
18740: LD_INT 10
18742: PPUSH
18743: CALL_OW 241
18747: GO 18732
18749: POP
18750: POP
// end ;
18751: PPOPN 2
18753: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18754: LD_EXP 36
18758: PUSH
18759: LD_EXP 53
18763: AND
18764: IFFALSE 18875
18766: GO 18768
18768: DISABLE
18769: LD_INT 0
18771: PPUSH
18772: PPUSH
18773: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18774: LD_ADDR_VAR 0 3
18778: PUSH
18779: LD_INT 22
18781: PUSH
18782: LD_OWVAR 2
18786: PUSH
18787: EMPTY
18788: LIST
18789: LIST
18790: PUSH
18791: LD_INT 25
18793: PUSH
18794: LD_INT 1
18796: PUSH
18797: EMPTY
18798: LIST
18799: LIST
18800: PUSH
18801: EMPTY
18802: LIST
18803: LIST
18804: PPUSH
18805: CALL_OW 69
18809: ST_TO_ADDR
// if not tmp then
18810: LD_VAR 0 3
18814: NOT
18815: IFFALSE 18819
// exit ;
18817: GO 18875
// un := tmp [ rand ( 1 , tmp ) ] ;
18819: LD_ADDR_VAR 0 2
18823: PUSH
18824: LD_VAR 0 3
18828: PUSH
18829: LD_INT 1
18831: PPUSH
18832: LD_VAR 0 3
18836: PPUSH
18837: CALL_OW 12
18841: ARRAY
18842: ST_TO_ADDR
// if Crawls ( un ) then
18843: LD_VAR 0 2
18847: PPUSH
18848: CALL_OW 318
18852: IFFALSE 18863
// ComWalk ( un ) ;
18854: LD_VAR 0 2
18858: PPUSH
18859: CALL_OW 138
// SetClass ( un , class_sniper ) ;
18863: LD_VAR 0 2
18867: PPUSH
18868: LD_INT 5
18870: PPUSH
18871: CALL_OW 336
// end ;
18875: PPOPN 3
18877: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
18878: LD_EXP 36
18882: PUSH
18883: LD_EXP 54
18887: AND
18888: PUSH
18889: LD_OWVAR 67
18893: PUSH
18894: LD_INT 3
18896: LESS
18897: AND
18898: IFFALSE 18917
18900: GO 18902
18902: DISABLE
// Difficulty := Difficulty + 1 ;
18903: LD_ADDR_OWVAR 67
18907: PUSH
18908: LD_OWVAR 67
18912: PUSH
18913: LD_INT 1
18915: PLUS
18916: ST_TO_ADDR
18917: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
18918: LD_EXP 36
18922: PUSH
18923: LD_EXP 55
18927: AND
18928: IFFALSE 19031
18930: GO 18932
18932: DISABLE
18933: LD_INT 0
18935: PPUSH
// begin for i := 1 to 5 do
18936: LD_ADDR_VAR 0 1
18940: PUSH
18941: DOUBLE
18942: LD_INT 1
18944: DEC
18945: ST_TO_ADDR
18946: LD_INT 5
18948: PUSH
18949: FOR_TO
18950: IFFALSE 19029
// begin uc_nation := nation_nature ;
18952: LD_ADDR_OWVAR 21
18956: PUSH
18957: LD_INT 0
18959: ST_TO_ADDR
// uc_side := 0 ;
18960: LD_ADDR_OWVAR 20
18964: PUSH
18965: LD_INT 0
18967: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
18968: LD_ADDR_OWVAR 29
18972: PUSH
18973: LD_INT 12
18975: PUSH
18976: LD_INT 12
18978: PUSH
18979: EMPTY
18980: LIST
18981: LIST
18982: ST_TO_ADDR
// hc_agressivity := 20 ;
18983: LD_ADDR_OWVAR 35
18987: PUSH
18988: LD_INT 20
18990: ST_TO_ADDR
// hc_class := class_tiger ;
18991: LD_ADDR_OWVAR 28
18995: PUSH
18996: LD_INT 14
18998: ST_TO_ADDR
// hc_gallery :=  ;
18999: LD_ADDR_OWVAR 33
19003: PUSH
19004: LD_STRING 
19006: ST_TO_ADDR
// hc_name :=  ;
19007: LD_ADDR_OWVAR 26
19011: PUSH
19012: LD_STRING 
19014: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
19015: CALL_OW 44
19019: PPUSH
19020: LD_INT 0
19022: PPUSH
19023: CALL_OW 51
// end ;
19027: GO 18949
19029: POP
19030: POP
// end ;
19031: PPOPN 1
19033: END
// every 0 0$1 trigger StreamModeActive and sBomb do
19034: LD_EXP 36
19038: PUSH
19039: LD_EXP 56
19043: AND
19044: IFFALSE 19053
19046: GO 19048
19048: DISABLE
// StreamSibBomb ;
19049: CALL 19054 0 0
19053: END
// export function StreamSibBomb ; var i , x , y ; begin
19054: LD_INT 0
19056: PPUSH
19057: PPUSH
19058: PPUSH
19059: PPUSH
// result := false ;
19060: LD_ADDR_VAR 0 1
19064: PUSH
19065: LD_INT 0
19067: ST_TO_ADDR
// for i := 1 to 16 do
19068: LD_ADDR_VAR 0 2
19072: PUSH
19073: DOUBLE
19074: LD_INT 1
19076: DEC
19077: ST_TO_ADDR
19078: LD_INT 16
19080: PUSH
19081: FOR_TO
19082: IFFALSE 19281
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19084: LD_ADDR_VAR 0 3
19088: PUSH
19089: LD_INT 10
19091: PUSH
19092: LD_INT 20
19094: PUSH
19095: LD_INT 30
19097: PUSH
19098: LD_INT 40
19100: PUSH
19101: LD_INT 50
19103: PUSH
19104: LD_INT 60
19106: PUSH
19107: LD_INT 70
19109: PUSH
19110: LD_INT 80
19112: PUSH
19113: LD_INT 90
19115: PUSH
19116: LD_INT 100
19118: PUSH
19119: LD_INT 110
19121: PUSH
19122: LD_INT 120
19124: PUSH
19125: LD_INT 130
19127: PUSH
19128: LD_INT 140
19130: PUSH
19131: LD_INT 150
19133: PUSH
19134: EMPTY
19135: LIST
19136: LIST
19137: LIST
19138: LIST
19139: LIST
19140: LIST
19141: LIST
19142: LIST
19143: LIST
19144: LIST
19145: LIST
19146: LIST
19147: LIST
19148: LIST
19149: LIST
19150: PUSH
19151: LD_INT 1
19153: PPUSH
19154: LD_INT 15
19156: PPUSH
19157: CALL_OW 12
19161: ARRAY
19162: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19163: LD_ADDR_VAR 0 4
19167: PUSH
19168: LD_INT 10
19170: PUSH
19171: LD_INT 20
19173: PUSH
19174: LD_INT 30
19176: PUSH
19177: LD_INT 40
19179: PUSH
19180: LD_INT 50
19182: PUSH
19183: LD_INT 60
19185: PUSH
19186: LD_INT 70
19188: PUSH
19189: LD_INT 80
19191: PUSH
19192: LD_INT 90
19194: PUSH
19195: LD_INT 100
19197: PUSH
19198: LD_INT 110
19200: PUSH
19201: LD_INT 120
19203: PUSH
19204: LD_INT 130
19206: PUSH
19207: LD_INT 140
19209: PUSH
19210: LD_INT 150
19212: PUSH
19213: EMPTY
19214: LIST
19215: LIST
19216: LIST
19217: LIST
19218: LIST
19219: LIST
19220: LIST
19221: LIST
19222: LIST
19223: LIST
19224: LIST
19225: LIST
19226: LIST
19227: LIST
19228: LIST
19229: PUSH
19230: LD_INT 1
19232: PPUSH
19233: LD_INT 15
19235: PPUSH
19236: CALL_OW 12
19240: ARRAY
19241: ST_TO_ADDR
// if ValidHex ( x , y ) then
19242: LD_VAR 0 3
19246: PPUSH
19247: LD_VAR 0 4
19251: PPUSH
19252: CALL_OW 488
19256: IFFALSE 19279
// begin result := [ x , y ] ;
19258: LD_ADDR_VAR 0 1
19262: PUSH
19263: LD_VAR 0 3
19267: PUSH
19268: LD_VAR 0 4
19272: PUSH
19273: EMPTY
19274: LIST
19275: LIST
19276: ST_TO_ADDR
// break ;
19277: GO 19281
// end ; end ;
19279: GO 19081
19281: POP
19282: POP
// if result then
19283: LD_VAR 0 1
19287: IFFALSE 19347
// begin ToLua ( playSibBomb() ) ;
19289: LD_STRING playSibBomb()
19291: PPUSH
19292: CALL_OW 559
// wait ( 0 0$14 ) ;
19296: LD_INT 490
19298: PPUSH
19299: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19303: LD_VAR 0 1
19307: PUSH
19308: LD_INT 1
19310: ARRAY
19311: PPUSH
19312: LD_VAR 0 1
19316: PUSH
19317: LD_INT 2
19319: ARRAY
19320: PPUSH
19321: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19325: LD_VAR 0 1
19329: PUSH
19330: LD_INT 1
19332: ARRAY
19333: PPUSH
19334: LD_VAR 0 1
19338: PUSH
19339: LD_INT 2
19341: ARRAY
19342: PPUSH
19343: CALL_OW 429
// end ; end ;
19347: LD_VAR 0 1
19351: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19352: LD_EXP 36
19356: PUSH
19357: LD_EXP 58
19361: AND
19362: IFFALSE 19374
19364: GO 19366
19366: DISABLE
// YouLost (  ) ;
19367: LD_STRING 
19369: PPUSH
19370: CALL_OW 104
19374: END
// every 0 0$1 trigger StreamModeActive and sFog do
19375: LD_EXP 36
19379: PUSH
19380: LD_EXP 57
19384: AND
19385: IFFALSE 19399
19387: GO 19389
19389: DISABLE
// FogOff ( your_side ) ;
19390: LD_OWVAR 2
19394: PPUSH
19395: CALL_OW 344
19399: END
// every 0 0$1 trigger StreamModeActive and sSun do
19400: LD_EXP 36
19404: PUSH
19405: LD_EXP 59
19409: AND
19410: IFFALSE 19438
19412: GO 19414
19414: DISABLE
// begin solar_recharge_percent := 0 ;
19415: LD_ADDR_OWVAR 79
19419: PUSH
19420: LD_INT 0
19422: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19423: LD_INT 10500
19425: PPUSH
19426: CALL_OW 67
// solar_recharge_percent := 100 ;
19430: LD_ADDR_OWVAR 79
19434: PUSH
19435: LD_INT 100
19437: ST_TO_ADDR
// end ;
19438: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19439: LD_EXP 36
19443: PUSH
19444: LD_EXP 60
19448: AND
19449: IFFALSE 19688
19451: GO 19453
19453: DISABLE
19454: LD_INT 0
19456: PPUSH
19457: PPUSH
19458: PPUSH
// begin tmp := [ ] ;
19459: LD_ADDR_VAR 0 3
19463: PUSH
19464: EMPTY
19465: ST_TO_ADDR
// for i := 1 to 6 do
19466: LD_ADDR_VAR 0 1
19470: PUSH
19471: DOUBLE
19472: LD_INT 1
19474: DEC
19475: ST_TO_ADDR
19476: LD_INT 6
19478: PUSH
19479: FOR_TO
19480: IFFALSE 19585
// begin uc_nation := nation_nature ;
19482: LD_ADDR_OWVAR 21
19486: PUSH
19487: LD_INT 0
19489: ST_TO_ADDR
// uc_side := 0 ;
19490: LD_ADDR_OWVAR 20
19494: PUSH
19495: LD_INT 0
19497: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19498: LD_ADDR_OWVAR 29
19502: PUSH
19503: LD_INT 12
19505: PUSH
19506: LD_INT 12
19508: PUSH
19509: EMPTY
19510: LIST
19511: LIST
19512: ST_TO_ADDR
// hc_agressivity := 20 ;
19513: LD_ADDR_OWVAR 35
19517: PUSH
19518: LD_INT 20
19520: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19521: LD_ADDR_OWVAR 28
19525: PUSH
19526: LD_INT 17
19528: ST_TO_ADDR
// hc_gallery :=  ;
19529: LD_ADDR_OWVAR 33
19533: PUSH
19534: LD_STRING 
19536: ST_TO_ADDR
// hc_name :=  ;
19537: LD_ADDR_OWVAR 26
19541: PUSH
19542: LD_STRING 
19544: ST_TO_ADDR
// un := CreateHuman ;
19545: LD_ADDR_VAR 0 2
19549: PUSH
19550: CALL_OW 44
19554: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19555: LD_VAR 0 2
19559: PPUSH
19560: LD_INT 1
19562: PPUSH
19563: CALL_OW 51
// tmp := tmp ^ un ;
19567: LD_ADDR_VAR 0 3
19571: PUSH
19572: LD_VAR 0 3
19576: PUSH
19577: LD_VAR 0 2
19581: ADD
19582: ST_TO_ADDR
// end ;
19583: GO 19479
19585: POP
19586: POP
// repeat wait ( 0 0$1 ) ;
19587: LD_INT 35
19589: PPUSH
19590: CALL_OW 67
// for un in tmp do
19594: LD_ADDR_VAR 0 2
19598: PUSH
19599: LD_VAR 0 3
19603: PUSH
19604: FOR_IN
19605: IFFALSE 19679
// begin if IsDead ( un ) then
19607: LD_VAR 0 2
19611: PPUSH
19612: CALL_OW 301
19616: IFFALSE 19636
// begin tmp := tmp diff un ;
19618: LD_ADDR_VAR 0 3
19622: PUSH
19623: LD_VAR 0 3
19627: PUSH
19628: LD_VAR 0 2
19632: DIFF
19633: ST_TO_ADDR
// continue ;
19634: GO 19604
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19636: LD_VAR 0 2
19640: PPUSH
19641: LD_INT 3
19643: PUSH
19644: LD_INT 22
19646: PUSH
19647: LD_INT 0
19649: PUSH
19650: EMPTY
19651: LIST
19652: LIST
19653: PUSH
19654: EMPTY
19655: LIST
19656: LIST
19657: PPUSH
19658: CALL_OW 69
19662: PPUSH
19663: LD_VAR 0 2
19667: PPUSH
19668: CALL_OW 74
19672: PPUSH
19673: CALL_OW 115
// end ;
19677: GO 19604
19679: POP
19680: POP
// until not tmp ;
19681: LD_VAR 0 3
19685: NOT
19686: IFFALSE 19587
// end ;
19688: PPOPN 3
19690: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19691: LD_EXP 36
19695: PUSH
19696: LD_EXP 61
19700: AND
19701: IFFALSE 19755
19703: GO 19705
19705: DISABLE
// begin ToLua ( displayTroll(); ) ;
19706: LD_STRING displayTroll();
19708: PPUSH
19709: CALL_OW 559
// wait ( 3 3$00 ) ;
19713: LD_INT 6300
19715: PPUSH
19716: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19720: LD_STRING hideTroll();
19722: PPUSH
19723: CALL_OW 559
// wait ( 1 1$00 ) ;
19727: LD_INT 2100
19729: PPUSH
19730: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19734: LD_STRING displayTroll();
19736: PPUSH
19737: CALL_OW 559
// wait ( 1 1$00 ) ;
19741: LD_INT 2100
19743: PPUSH
19744: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19748: LD_STRING hideTroll();
19750: PPUSH
19751: CALL_OW 559
// end ;
19755: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19756: LD_EXP 36
19760: PUSH
19761: LD_EXP 62
19765: AND
19766: IFFALSE 19829
19768: GO 19770
19770: DISABLE
19771: LD_INT 0
19773: PPUSH
// begin p := 0 ;
19774: LD_ADDR_VAR 0 1
19778: PUSH
19779: LD_INT 0
19781: ST_TO_ADDR
// repeat game_speed := 1 ;
19782: LD_ADDR_OWVAR 65
19786: PUSH
19787: LD_INT 1
19789: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19790: LD_INT 35
19792: PPUSH
19793: CALL_OW 67
// p := p + 1 ;
19797: LD_ADDR_VAR 0 1
19801: PUSH
19802: LD_VAR 0 1
19806: PUSH
19807: LD_INT 1
19809: PLUS
19810: ST_TO_ADDR
// until p >= 60 ;
19811: LD_VAR 0 1
19815: PUSH
19816: LD_INT 60
19818: GREATEREQUAL
19819: IFFALSE 19782
// game_speed := 4 ;
19821: LD_ADDR_OWVAR 65
19825: PUSH
19826: LD_INT 4
19828: ST_TO_ADDR
// end ;
19829: PPOPN 1
19831: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
19832: LD_EXP 36
19836: PUSH
19837: LD_EXP 63
19841: AND
19842: IFFALSE 19988
19844: GO 19846
19846: DISABLE
19847: LD_INT 0
19849: PPUSH
19850: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19851: LD_ADDR_VAR 0 1
19855: PUSH
19856: LD_INT 22
19858: PUSH
19859: LD_OWVAR 2
19863: PUSH
19864: EMPTY
19865: LIST
19866: LIST
19867: PUSH
19868: LD_INT 2
19870: PUSH
19871: LD_INT 30
19873: PUSH
19874: LD_INT 0
19876: PUSH
19877: EMPTY
19878: LIST
19879: LIST
19880: PUSH
19881: LD_INT 30
19883: PUSH
19884: LD_INT 1
19886: PUSH
19887: EMPTY
19888: LIST
19889: LIST
19890: PUSH
19891: EMPTY
19892: LIST
19893: LIST
19894: LIST
19895: PUSH
19896: EMPTY
19897: LIST
19898: LIST
19899: PPUSH
19900: CALL_OW 69
19904: ST_TO_ADDR
// if not depot then
19905: LD_VAR 0 1
19909: NOT
19910: IFFALSE 19914
// exit ;
19912: GO 19988
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
19914: LD_ADDR_VAR 0 2
19918: PUSH
19919: LD_VAR 0 1
19923: PUSH
19924: LD_INT 1
19926: PPUSH
19927: LD_VAR 0 1
19931: PPUSH
19932: CALL_OW 12
19936: ARRAY
19937: PPUSH
19938: CALL_OW 274
19942: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
19943: LD_VAR 0 2
19947: PPUSH
19948: LD_INT 1
19950: PPUSH
19951: LD_INT 0
19953: PPUSH
19954: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
19958: LD_VAR 0 2
19962: PPUSH
19963: LD_INT 2
19965: PPUSH
19966: LD_INT 0
19968: PPUSH
19969: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
19973: LD_VAR 0 2
19977: PPUSH
19978: LD_INT 3
19980: PPUSH
19981: LD_INT 0
19983: PPUSH
19984: CALL_OW 277
// end ;
19988: PPOPN 2
19990: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
19991: LD_EXP 36
19995: PUSH
19996: LD_EXP 64
20000: AND
20001: IFFALSE 20098
20003: GO 20005
20005: DISABLE
20006: LD_INT 0
20008: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20009: LD_ADDR_VAR 0 1
20013: PUSH
20014: LD_INT 22
20016: PUSH
20017: LD_OWVAR 2
20021: PUSH
20022: EMPTY
20023: LIST
20024: LIST
20025: PUSH
20026: LD_INT 21
20028: PUSH
20029: LD_INT 1
20031: PUSH
20032: EMPTY
20033: LIST
20034: LIST
20035: PUSH
20036: LD_INT 3
20038: PUSH
20039: LD_INT 23
20041: PUSH
20042: LD_INT 0
20044: PUSH
20045: EMPTY
20046: LIST
20047: LIST
20048: PUSH
20049: EMPTY
20050: LIST
20051: LIST
20052: PUSH
20053: EMPTY
20054: LIST
20055: LIST
20056: LIST
20057: PPUSH
20058: CALL_OW 69
20062: ST_TO_ADDR
// if not tmp then
20063: LD_VAR 0 1
20067: NOT
20068: IFFALSE 20072
// exit ;
20070: GO 20098
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
20072: LD_VAR 0 1
20076: PUSH
20077: LD_INT 1
20079: PPUSH
20080: LD_VAR 0 1
20084: PPUSH
20085: CALL_OW 12
20089: ARRAY
20090: PPUSH
20091: LD_INT 200
20093: PPUSH
20094: CALL_OW 234
// end ;
20098: PPOPN 1
20100: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
20101: LD_EXP 36
20105: PUSH
20106: LD_EXP 65
20110: AND
20111: IFFALSE 20190
20113: GO 20115
20115: DISABLE
20116: LD_INT 0
20118: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20119: LD_ADDR_VAR 0 1
20123: PUSH
20124: LD_INT 22
20126: PUSH
20127: LD_OWVAR 2
20131: PUSH
20132: EMPTY
20133: LIST
20134: LIST
20135: PUSH
20136: LD_INT 21
20138: PUSH
20139: LD_INT 2
20141: PUSH
20142: EMPTY
20143: LIST
20144: LIST
20145: PUSH
20146: EMPTY
20147: LIST
20148: LIST
20149: PPUSH
20150: CALL_OW 69
20154: ST_TO_ADDR
// if not tmp then
20155: LD_VAR 0 1
20159: NOT
20160: IFFALSE 20164
// exit ;
20162: GO 20190
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20164: LD_VAR 0 1
20168: PUSH
20169: LD_INT 1
20171: PPUSH
20172: LD_VAR 0 1
20176: PPUSH
20177: CALL_OW 12
20181: ARRAY
20182: PPUSH
20183: LD_INT 60
20185: PPUSH
20186: CALL_OW 234
// end ;
20190: PPOPN 1
20192: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20193: LD_EXP 36
20197: PUSH
20198: LD_EXP 66
20202: AND
20203: IFFALSE 20302
20205: GO 20207
20207: DISABLE
20208: LD_INT 0
20210: PPUSH
20211: PPUSH
// begin enable ;
20212: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20213: LD_ADDR_VAR 0 1
20217: PUSH
20218: LD_INT 22
20220: PUSH
20221: LD_OWVAR 2
20225: PUSH
20226: EMPTY
20227: LIST
20228: LIST
20229: PUSH
20230: LD_INT 61
20232: PUSH
20233: EMPTY
20234: LIST
20235: PUSH
20236: LD_INT 33
20238: PUSH
20239: LD_INT 2
20241: PUSH
20242: EMPTY
20243: LIST
20244: LIST
20245: PUSH
20246: EMPTY
20247: LIST
20248: LIST
20249: LIST
20250: PPUSH
20251: CALL_OW 69
20255: ST_TO_ADDR
// if not tmp then
20256: LD_VAR 0 1
20260: NOT
20261: IFFALSE 20265
// exit ;
20263: GO 20302
// for i in tmp do
20265: LD_ADDR_VAR 0 2
20269: PUSH
20270: LD_VAR 0 1
20274: PUSH
20275: FOR_IN
20276: IFFALSE 20300
// if IsControledBy ( i ) then
20278: LD_VAR 0 2
20282: PPUSH
20283: CALL_OW 312
20287: IFFALSE 20298
// ComUnlink ( i ) ;
20289: LD_VAR 0 2
20293: PPUSH
20294: CALL_OW 136
20298: GO 20275
20300: POP
20301: POP
// end ;
20302: PPOPN 2
20304: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20305: LD_EXP 36
20309: PUSH
20310: LD_EXP 67
20314: AND
20315: IFFALSE 20455
20317: GO 20319
20319: DISABLE
20320: LD_INT 0
20322: PPUSH
20323: PPUSH
// begin ToLua ( displayPowell(); ) ;
20324: LD_STRING displayPowell();
20326: PPUSH
20327: CALL_OW 559
// uc_side := 0 ;
20331: LD_ADDR_OWVAR 20
20335: PUSH
20336: LD_INT 0
20338: ST_TO_ADDR
// uc_nation := 2 ;
20339: LD_ADDR_OWVAR 21
20343: PUSH
20344: LD_INT 2
20346: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20347: LD_ADDR_OWVAR 37
20351: PUSH
20352: LD_INT 14
20354: ST_TO_ADDR
// vc_engine := engine_siberite ;
20355: LD_ADDR_OWVAR 39
20359: PUSH
20360: LD_INT 3
20362: ST_TO_ADDR
// vc_control := control_apeman ;
20363: LD_ADDR_OWVAR 38
20367: PUSH
20368: LD_INT 5
20370: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20371: LD_ADDR_OWVAR 40
20375: PUSH
20376: LD_INT 29
20378: ST_TO_ADDR
// un := CreateVehicle ;
20379: LD_ADDR_VAR 0 2
20383: PUSH
20384: CALL_OW 45
20388: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20389: LD_VAR 0 2
20393: PPUSH
20394: LD_INT 1
20396: PPUSH
20397: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20401: LD_INT 35
20403: PPUSH
20404: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20408: LD_VAR 0 2
20412: PPUSH
20413: LD_INT 22
20415: PUSH
20416: LD_OWVAR 2
20420: PUSH
20421: EMPTY
20422: LIST
20423: LIST
20424: PPUSH
20425: CALL_OW 69
20429: PPUSH
20430: LD_VAR 0 2
20434: PPUSH
20435: CALL_OW 74
20439: PPUSH
20440: CALL_OW 115
// until IsDead ( un ) ;
20444: LD_VAR 0 2
20448: PPUSH
20449: CALL_OW 301
20453: IFFALSE 20401
// end ;
20455: PPOPN 2
20457: END
// every 0 0$1 trigger StreamModeActive and sStu do
20458: LD_EXP 36
20462: PUSH
20463: LD_EXP 75
20467: AND
20468: IFFALSE 20484
20470: GO 20472
20472: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20473: LD_STRING displayStucuk();
20475: PPUSH
20476: CALL_OW 559
// ResetFog ;
20480: CALL_OW 335
// end ;
20484: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20485: LD_EXP 36
20489: PUSH
20490: LD_EXP 68
20494: AND
20495: IFFALSE 20636
20497: GO 20499
20499: DISABLE
20500: LD_INT 0
20502: PPUSH
20503: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20504: LD_ADDR_VAR 0 2
20508: PUSH
20509: LD_INT 22
20511: PUSH
20512: LD_OWVAR 2
20516: PUSH
20517: EMPTY
20518: LIST
20519: LIST
20520: PUSH
20521: LD_INT 21
20523: PUSH
20524: LD_INT 1
20526: PUSH
20527: EMPTY
20528: LIST
20529: LIST
20530: PUSH
20531: EMPTY
20532: LIST
20533: LIST
20534: PPUSH
20535: CALL_OW 69
20539: ST_TO_ADDR
// if not tmp then
20540: LD_VAR 0 2
20544: NOT
20545: IFFALSE 20549
// exit ;
20547: GO 20636
// un := tmp [ rand ( 1 , tmp ) ] ;
20549: LD_ADDR_VAR 0 1
20553: PUSH
20554: LD_VAR 0 2
20558: PUSH
20559: LD_INT 1
20561: PPUSH
20562: LD_VAR 0 2
20566: PPUSH
20567: CALL_OW 12
20571: ARRAY
20572: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20573: LD_VAR 0 1
20577: PPUSH
20578: LD_INT 0
20580: PPUSH
20581: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20585: LD_VAR 0 1
20589: PPUSH
20590: LD_OWVAR 3
20594: PUSH
20595: LD_VAR 0 1
20599: DIFF
20600: PPUSH
20601: LD_VAR 0 1
20605: PPUSH
20606: CALL_OW 74
20610: PPUSH
20611: CALL_OW 115
// wait ( 0 0$20 ) ;
20615: LD_INT 700
20617: PPUSH
20618: CALL_OW 67
// SetSide ( un , your_side ) ;
20622: LD_VAR 0 1
20626: PPUSH
20627: LD_OWVAR 2
20631: PPUSH
20632: CALL_OW 235
// end ;
20636: PPOPN 2
20638: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20639: LD_EXP 36
20643: PUSH
20644: LD_EXP 69
20648: AND
20649: IFFALSE 20755
20651: GO 20653
20653: DISABLE
20654: LD_INT 0
20656: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20657: LD_ADDR_VAR 0 1
20661: PUSH
20662: LD_INT 22
20664: PUSH
20665: LD_OWVAR 2
20669: PUSH
20670: EMPTY
20671: LIST
20672: LIST
20673: PUSH
20674: LD_INT 2
20676: PUSH
20677: LD_INT 30
20679: PUSH
20680: LD_INT 0
20682: PUSH
20683: EMPTY
20684: LIST
20685: LIST
20686: PUSH
20687: LD_INT 30
20689: PUSH
20690: LD_INT 1
20692: PUSH
20693: EMPTY
20694: LIST
20695: LIST
20696: PUSH
20697: EMPTY
20698: LIST
20699: LIST
20700: LIST
20701: PUSH
20702: EMPTY
20703: LIST
20704: LIST
20705: PPUSH
20706: CALL_OW 69
20710: ST_TO_ADDR
// if not depot then
20711: LD_VAR 0 1
20715: NOT
20716: IFFALSE 20720
// exit ;
20718: GO 20755
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20720: LD_VAR 0 1
20724: PUSH
20725: LD_INT 1
20727: ARRAY
20728: PPUSH
20729: CALL_OW 250
20733: PPUSH
20734: LD_VAR 0 1
20738: PUSH
20739: LD_INT 1
20741: ARRAY
20742: PPUSH
20743: CALL_OW 251
20747: PPUSH
20748: LD_INT 70
20750: PPUSH
20751: CALL_OW 495
// end ;
20755: PPOPN 1
20757: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20758: LD_EXP 36
20762: PUSH
20763: LD_EXP 70
20767: AND
20768: IFFALSE 20979
20770: GO 20772
20772: DISABLE
20773: LD_INT 0
20775: PPUSH
20776: PPUSH
20777: PPUSH
20778: PPUSH
20779: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20780: LD_ADDR_VAR 0 5
20784: PUSH
20785: LD_INT 22
20787: PUSH
20788: LD_OWVAR 2
20792: PUSH
20793: EMPTY
20794: LIST
20795: LIST
20796: PUSH
20797: LD_INT 21
20799: PUSH
20800: LD_INT 1
20802: PUSH
20803: EMPTY
20804: LIST
20805: LIST
20806: PUSH
20807: EMPTY
20808: LIST
20809: LIST
20810: PPUSH
20811: CALL_OW 69
20815: ST_TO_ADDR
// if not tmp then
20816: LD_VAR 0 5
20820: NOT
20821: IFFALSE 20825
// exit ;
20823: GO 20979
// for i in tmp do
20825: LD_ADDR_VAR 0 1
20829: PUSH
20830: LD_VAR 0 5
20834: PUSH
20835: FOR_IN
20836: IFFALSE 20977
// begin d := rand ( 0 , 5 ) ;
20838: LD_ADDR_VAR 0 4
20842: PUSH
20843: LD_INT 0
20845: PPUSH
20846: LD_INT 5
20848: PPUSH
20849: CALL_OW 12
20853: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
20854: LD_ADDR_VAR 0 2
20858: PUSH
20859: LD_VAR 0 1
20863: PPUSH
20864: CALL_OW 250
20868: PPUSH
20869: LD_VAR 0 4
20873: PPUSH
20874: LD_INT 3
20876: PPUSH
20877: LD_INT 12
20879: PPUSH
20880: CALL_OW 12
20884: PPUSH
20885: CALL_OW 272
20889: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
20890: LD_ADDR_VAR 0 3
20894: PUSH
20895: LD_VAR 0 1
20899: PPUSH
20900: CALL_OW 251
20904: PPUSH
20905: LD_VAR 0 4
20909: PPUSH
20910: LD_INT 3
20912: PPUSH
20913: LD_INT 12
20915: PPUSH
20916: CALL_OW 12
20920: PPUSH
20921: CALL_OW 273
20925: ST_TO_ADDR
// if ValidHex ( x , y ) then
20926: LD_VAR 0 2
20930: PPUSH
20931: LD_VAR 0 3
20935: PPUSH
20936: CALL_OW 488
20940: IFFALSE 20975
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
20942: LD_VAR 0 1
20946: PPUSH
20947: LD_VAR 0 2
20951: PPUSH
20952: LD_VAR 0 3
20956: PPUSH
20957: LD_INT 3
20959: PPUSH
20960: LD_INT 6
20962: PPUSH
20963: CALL_OW 12
20967: PPUSH
20968: LD_INT 1
20970: PPUSH
20971: CALL_OW 483
// end ;
20975: GO 20835
20977: POP
20978: POP
// end ;
20979: PPOPN 5
20981: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
20982: LD_EXP 36
20986: PUSH
20987: LD_EXP 71
20991: AND
20992: IFFALSE 21086
20994: GO 20996
20996: DISABLE
20997: LD_INT 0
20999: PPUSH
21000: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
21001: LD_ADDR_VAR 0 2
21005: PUSH
21006: LD_INT 22
21008: PUSH
21009: LD_OWVAR 2
21013: PUSH
21014: EMPTY
21015: LIST
21016: LIST
21017: PUSH
21018: LD_INT 32
21020: PUSH
21021: LD_INT 1
21023: PUSH
21024: EMPTY
21025: LIST
21026: LIST
21027: PUSH
21028: LD_INT 21
21030: PUSH
21031: LD_INT 2
21033: PUSH
21034: EMPTY
21035: LIST
21036: LIST
21037: PUSH
21038: EMPTY
21039: LIST
21040: LIST
21041: LIST
21042: PPUSH
21043: CALL_OW 69
21047: ST_TO_ADDR
// if not tmp then
21048: LD_VAR 0 2
21052: NOT
21053: IFFALSE 21057
// exit ;
21055: GO 21086
// for i in tmp do
21057: LD_ADDR_VAR 0 1
21061: PUSH
21062: LD_VAR 0 2
21066: PUSH
21067: FOR_IN
21068: IFFALSE 21084
// SetFuel ( i , 0 ) ;
21070: LD_VAR 0 1
21074: PPUSH
21075: LD_INT 0
21077: PPUSH
21078: CALL_OW 240
21082: GO 21067
21084: POP
21085: POP
// end ;
21086: PPOPN 2
21088: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
21089: LD_EXP 36
21093: PUSH
21094: LD_EXP 72
21098: AND
21099: IFFALSE 21165
21101: GO 21103
21103: DISABLE
21104: LD_INT 0
21106: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21107: LD_ADDR_VAR 0 1
21111: PUSH
21112: LD_INT 22
21114: PUSH
21115: LD_OWVAR 2
21119: PUSH
21120: EMPTY
21121: LIST
21122: LIST
21123: PUSH
21124: LD_INT 30
21126: PUSH
21127: LD_INT 29
21129: PUSH
21130: EMPTY
21131: LIST
21132: LIST
21133: PUSH
21134: EMPTY
21135: LIST
21136: LIST
21137: PPUSH
21138: CALL_OW 69
21142: ST_TO_ADDR
// if not tmp then
21143: LD_VAR 0 1
21147: NOT
21148: IFFALSE 21152
// exit ;
21150: GO 21165
// DestroyUnit ( tmp [ 1 ] ) ;
21152: LD_VAR 0 1
21156: PUSH
21157: LD_INT 1
21159: ARRAY
21160: PPUSH
21161: CALL_OW 65
// end ;
21165: PPOPN 1
21167: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21168: LD_EXP 36
21172: PUSH
21173: LD_EXP 74
21177: AND
21178: IFFALSE 21307
21180: GO 21182
21182: DISABLE
21183: LD_INT 0
21185: PPUSH
// begin uc_side := 0 ;
21186: LD_ADDR_OWVAR 20
21190: PUSH
21191: LD_INT 0
21193: ST_TO_ADDR
// uc_nation := nation_arabian ;
21194: LD_ADDR_OWVAR 21
21198: PUSH
21199: LD_INT 2
21201: ST_TO_ADDR
// hc_gallery :=  ;
21202: LD_ADDR_OWVAR 33
21206: PUSH
21207: LD_STRING 
21209: ST_TO_ADDR
// hc_name :=  ;
21210: LD_ADDR_OWVAR 26
21214: PUSH
21215: LD_STRING 
21217: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21218: LD_INT 1
21220: PPUSH
21221: LD_INT 11
21223: PPUSH
21224: LD_INT 10
21226: PPUSH
21227: CALL_OW 380
// un := CreateHuman ;
21231: LD_ADDR_VAR 0 1
21235: PUSH
21236: CALL_OW 44
21240: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21241: LD_VAR 0 1
21245: PPUSH
21246: LD_INT 1
21248: PPUSH
21249: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21253: LD_INT 35
21255: PPUSH
21256: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21260: LD_VAR 0 1
21264: PPUSH
21265: LD_INT 22
21267: PUSH
21268: LD_OWVAR 2
21272: PUSH
21273: EMPTY
21274: LIST
21275: LIST
21276: PPUSH
21277: CALL_OW 69
21281: PPUSH
21282: LD_VAR 0 1
21286: PPUSH
21287: CALL_OW 74
21291: PPUSH
21292: CALL_OW 115
// until IsDead ( un ) ;
21296: LD_VAR 0 1
21300: PPUSH
21301: CALL_OW 301
21305: IFFALSE 21253
// end ;
21307: PPOPN 1
21309: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21310: LD_EXP 36
21314: PUSH
21315: LD_EXP 76
21319: AND
21320: IFFALSE 21332
21322: GO 21324
21324: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21325: LD_STRING earthquake(getX(game), 0, 32)
21327: PPUSH
21328: CALL_OW 559
21332: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21333: LD_EXP 36
21337: PUSH
21338: LD_EXP 77
21342: AND
21343: IFFALSE 21434
21345: GO 21347
21347: DISABLE
21348: LD_INT 0
21350: PPUSH
// begin enable ;
21351: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21352: LD_ADDR_VAR 0 1
21356: PUSH
21357: LD_INT 22
21359: PUSH
21360: LD_OWVAR 2
21364: PUSH
21365: EMPTY
21366: LIST
21367: LIST
21368: PUSH
21369: LD_INT 21
21371: PUSH
21372: LD_INT 2
21374: PUSH
21375: EMPTY
21376: LIST
21377: LIST
21378: PUSH
21379: LD_INT 33
21381: PUSH
21382: LD_INT 3
21384: PUSH
21385: EMPTY
21386: LIST
21387: LIST
21388: PUSH
21389: EMPTY
21390: LIST
21391: LIST
21392: LIST
21393: PPUSH
21394: CALL_OW 69
21398: ST_TO_ADDR
// if not tmp then
21399: LD_VAR 0 1
21403: NOT
21404: IFFALSE 21408
// exit ;
21406: GO 21434
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21408: LD_VAR 0 1
21412: PUSH
21413: LD_INT 1
21415: PPUSH
21416: LD_VAR 0 1
21420: PPUSH
21421: CALL_OW 12
21425: ARRAY
21426: PPUSH
21427: LD_INT 1
21429: PPUSH
21430: CALL_OW 234
// end ;
21434: PPOPN 1
21436: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21437: LD_EXP 36
21441: PUSH
21442: LD_EXP 78
21446: AND
21447: IFFALSE 21588
21449: GO 21451
21451: DISABLE
21452: LD_INT 0
21454: PPUSH
21455: PPUSH
21456: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21457: LD_ADDR_VAR 0 3
21461: PUSH
21462: LD_INT 22
21464: PUSH
21465: LD_OWVAR 2
21469: PUSH
21470: EMPTY
21471: LIST
21472: LIST
21473: PUSH
21474: LD_INT 25
21476: PUSH
21477: LD_INT 1
21479: PUSH
21480: EMPTY
21481: LIST
21482: LIST
21483: PUSH
21484: EMPTY
21485: LIST
21486: LIST
21487: PPUSH
21488: CALL_OW 69
21492: ST_TO_ADDR
// if not tmp then
21493: LD_VAR 0 3
21497: NOT
21498: IFFALSE 21502
// exit ;
21500: GO 21588
// un := tmp [ rand ( 1 , tmp ) ] ;
21502: LD_ADDR_VAR 0 2
21506: PUSH
21507: LD_VAR 0 3
21511: PUSH
21512: LD_INT 1
21514: PPUSH
21515: LD_VAR 0 3
21519: PPUSH
21520: CALL_OW 12
21524: ARRAY
21525: ST_TO_ADDR
// if Crawls ( un ) then
21526: LD_VAR 0 2
21530: PPUSH
21531: CALL_OW 318
21535: IFFALSE 21546
// ComWalk ( un ) ;
21537: LD_VAR 0 2
21541: PPUSH
21542: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21546: LD_VAR 0 2
21550: PPUSH
21551: LD_INT 9
21553: PPUSH
21554: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21558: LD_INT 28
21560: PPUSH
21561: LD_OWVAR 2
21565: PPUSH
21566: LD_INT 2
21568: PPUSH
21569: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21573: LD_INT 29
21575: PPUSH
21576: LD_OWVAR 2
21580: PPUSH
21581: LD_INT 2
21583: PPUSH
21584: CALL_OW 322
// end ;
21588: PPOPN 3
21590: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21591: LD_EXP 36
21595: PUSH
21596: LD_EXP 79
21600: AND
21601: IFFALSE 21712
21603: GO 21605
21605: DISABLE
21606: LD_INT 0
21608: PPUSH
21609: PPUSH
21610: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21611: LD_ADDR_VAR 0 3
21615: PUSH
21616: LD_INT 22
21618: PUSH
21619: LD_OWVAR 2
21623: PUSH
21624: EMPTY
21625: LIST
21626: LIST
21627: PUSH
21628: LD_INT 25
21630: PUSH
21631: LD_INT 1
21633: PUSH
21634: EMPTY
21635: LIST
21636: LIST
21637: PUSH
21638: EMPTY
21639: LIST
21640: LIST
21641: PPUSH
21642: CALL_OW 69
21646: ST_TO_ADDR
// if not tmp then
21647: LD_VAR 0 3
21651: NOT
21652: IFFALSE 21656
// exit ;
21654: GO 21712
// un := tmp [ rand ( 1 , tmp ) ] ;
21656: LD_ADDR_VAR 0 2
21660: PUSH
21661: LD_VAR 0 3
21665: PUSH
21666: LD_INT 1
21668: PPUSH
21669: LD_VAR 0 3
21673: PPUSH
21674: CALL_OW 12
21678: ARRAY
21679: ST_TO_ADDR
// if Crawls ( un ) then
21680: LD_VAR 0 2
21684: PPUSH
21685: CALL_OW 318
21689: IFFALSE 21700
// ComWalk ( un ) ;
21691: LD_VAR 0 2
21695: PPUSH
21696: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21700: LD_VAR 0 2
21704: PPUSH
21705: LD_INT 8
21707: PPUSH
21708: CALL_OW 336
// end ;
21712: PPOPN 3
21714: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21715: LD_EXP 36
21719: PUSH
21720: LD_EXP 80
21724: AND
21725: IFFALSE 21869
21727: GO 21729
21729: DISABLE
21730: LD_INT 0
21732: PPUSH
21733: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21734: LD_ADDR_VAR 0 2
21738: PUSH
21739: LD_INT 22
21741: PUSH
21742: LD_OWVAR 2
21746: PUSH
21747: EMPTY
21748: LIST
21749: LIST
21750: PUSH
21751: LD_INT 21
21753: PUSH
21754: LD_INT 2
21756: PUSH
21757: EMPTY
21758: LIST
21759: LIST
21760: PUSH
21761: LD_INT 2
21763: PUSH
21764: LD_INT 34
21766: PUSH
21767: LD_INT 12
21769: PUSH
21770: EMPTY
21771: LIST
21772: LIST
21773: PUSH
21774: LD_INT 34
21776: PUSH
21777: LD_INT 51
21779: PUSH
21780: EMPTY
21781: LIST
21782: LIST
21783: PUSH
21784: LD_INT 34
21786: PUSH
21787: LD_INT 32
21789: PUSH
21790: EMPTY
21791: LIST
21792: LIST
21793: PUSH
21794: EMPTY
21795: LIST
21796: LIST
21797: LIST
21798: LIST
21799: PUSH
21800: EMPTY
21801: LIST
21802: LIST
21803: LIST
21804: PPUSH
21805: CALL_OW 69
21809: ST_TO_ADDR
// if not tmp then
21810: LD_VAR 0 2
21814: NOT
21815: IFFALSE 21819
// exit ;
21817: GO 21869
// for i in tmp do
21819: LD_ADDR_VAR 0 1
21823: PUSH
21824: LD_VAR 0 2
21828: PUSH
21829: FOR_IN
21830: IFFALSE 21867
// if GetCargo ( i , mat_artifact ) = 0 then
21832: LD_VAR 0 1
21836: PPUSH
21837: LD_INT 4
21839: PPUSH
21840: CALL_OW 289
21844: PUSH
21845: LD_INT 0
21847: EQUAL
21848: IFFALSE 21865
// SetCargo ( i , mat_siberit , 100 ) ;
21850: LD_VAR 0 1
21854: PPUSH
21855: LD_INT 3
21857: PPUSH
21858: LD_INT 100
21860: PPUSH
21861: CALL_OW 290
21865: GO 21829
21867: POP
21868: POP
// end ;
21869: PPOPN 2
21871: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
21872: LD_EXP 36
21876: PUSH
21877: LD_EXP 81
21881: AND
21882: IFFALSE 22065
21884: GO 21886
21886: DISABLE
21887: LD_INT 0
21889: PPUSH
21890: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
21891: LD_ADDR_VAR 0 2
21895: PUSH
21896: LD_INT 22
21898: PUSH
21899: LD_OWVAR 2
21903: PUSH
21904: EMPTY
21905: LIST
21906: LIST
21907: PPUSH
21908: CALL_OW 69
21912: ST_TO_ADDR
// if not tmp then
21913: LD_VAR 0 2
21917: NOT
21918: IFFALSE 21922
// exit ;
21920: GO 22065
// for i := 1 to 2 do
21922: LD_ADDR_VAR 0 1
21926: PUSH
21927: DOUBLE
21928: LD_INT 1
21930: DEC
21931: ST_TO_ADDR
21932: LD_INT 2
21934: PUSH
21935: FOR_TO
21936: IFFALSE 22063
// begin uc_side := your_side ;
21938: LD_ADDR_OWVAR 20
21942: PUSH
21943: LD_OWVAR 2
21947: ST_TO_ADDR
// uc_nation := nation_american ;
21948: LD_ADDR_OWVAR 21
21952: PUSH
21953: LD_INT 1
21955: ST_TO_ADDR
// vc_chassis := us_morphling ;
21956: LD_ADDR_OWVAR 37
21960: PUSH
21961: LD_INT 5
21963: ST_TO_ADDR
// vc_engine := engine_siberite ;
21964: LD_ADDR_OWVAR 39
21968: PUSH
21969: LD_INT 3
21971: ST_TO_ADDR
// vc_control := control_computer ;
21972: LD_ADDR_OWVAR 38
21976: PUSH
21977: LD_INT 3
21979: ST_TO_ADDR
// vc_weapon := us_double_laser ;
21980: LD_ADDR_OWVAR 40
21984: PUSH
21985: LD_INT 10
21987: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
21988: LD_VAR 0 2
21992: PUSH
21993: LD_INT 1
21995: ARRAY
21996: PPUSH
21997: CALL_OW 310
22001: NOT
22002: IFFALSE 22049
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
22004: CALL_OW 45
22008: PPUSH
22009: LD_VAR 0 2
22013: PUSH
22014: LD_INT 1
22016: ARRAY
22017: PPUSH
22018: CALL_OW 250
22022: PPUSH
22023: LD_VAR 0 2
22027: PUSH
22028: LD_INT 1
22030: ARRAY
22031: PPUSH
22032: CALL_OW 251
22036: PPUSH
22037: LD_INT 12
22039: PPUSH
22040: LD_INT 1
22042: PPUSH
22043: CALL_OW 50
22047: GO 22061
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22049: CALL_OW 45
22053: PPUSH
22054: LD_INT 1
22056: PPUSH
22057: CALL_OW 51
// end ;
22061: GO 21935
22063: POP
22064: POP
// end ;
22065: PPOPN 2
22067: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
22068: LD_EXP 36
22072: PUSH
22073: LD_EXP 82
22077: AND
22078: IFFALSE 22300
22080: GO 22082
22082: DISABLE
22083: LD_INT 0
22085: PPUSH
22086: PPUSH
22087: PPUSH
22088: PPUSH
22089: PPUSH
22090: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22091: LD_ADDR_VAR 0 6
22095: PUSH
22096: LD_INT 22
22098: PUSH
22099: LD_OWVAR 2
22103: PUSH
22104: EMPTY
22105: LIST
22106: LIST
22107: PUSH
22108: LD_INT 21
22110: PUSH
22111: LD_INT 1
22113: PUSH
22114: EMPTY
22115: LIST
22116: LIST
22117: PUSH
22118: LD_INT 3
22120: PUSH
22121: LD_INT 23
22123: PUSH
22124: LD_INT 0
22126: PUSH
22127: EMPTY
22128: LIST
22129: LIST
22130: PUSH
22131: EMPTY
22132: LIST
22133: LIST
22134: PUSH
22135: EMPTY
22136: LIST
22137: LIST
22138: LIST
22139: PPUSH
22140: CALL_OW 69
22144: ST_TO_ADDR
// if not tmp then
22145: LD_VAR 0 6
22149: NOT
22150: IFFALSE 22154
// exit ;
22152: GO 22300
// s1 := rand ( 1 , 4 ) ;
22154: LD_ADDR_VAR 0 2
22158: PUSH
22159: LD_INT 1
22161: PPUSH
22162: LD_INT 4
22164: PPUSH
22165: CALL_OW 12
22169: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22170: LD_ADDR_VAR 0 4
22174: PUSH
22175: LD_VAR 0 6
22179: PUSH
22180: LD_INT 1
22182: ARRAY
22183: PPUSH
22184: LD_VAR 0 2
22188: PPUSH
22189: CALL_OW 259
22193: ST_TO_ADDR
// if s1 = 1 then
22194: LD_VAR 0 2
22198: PUSH
22199: LD_INT 1
22201: EQUAL
22202: IFFALSE 22222
// s2 := rand ( 2 , 4 ) else
22204: LD_ADDR_VAR 0 3
22208: PUSH
22209: LD_INT 2
22211: PPUSH
22212: LD_INT 4
22214: PPUSH
22215: CALL_OW 12
22219: ST_TO_ADDR
22220: GO 22230
// s2 := 1 ;
22222: LD_ADDR_VAR 0 3
22226: PUSH
22227: LD_INT 1
22229: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22230: LD_ADDR_VAR 0 5
22234: PUSH
22235: LD_VAR 0 6
22239: PUSH
22240: LD_INT 1
22242: ARRAY
22243: PPUSH
22244: LD_VAR 0 3
22248: PPUSH
22249: CALL_OW 259
22253: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22254: LD_VAR 0 6
22258: PUSH
22259: LD_INT 1
22261: ARRAY
22262: PPUSH
22263: LD_VAR 0 2
22267: PPUSH
22268: LD_VAR 0 5
22272: PPUSH
22273: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22277: LD_VAR 0 6
22281: PUSH
22282: LD_INT 1
22284: ARRAY
22285: PPUSH
22286: LD_VAR 0 3
22290: PPUSH
22291: LD_VAR 0 4
22295: PPUSH
22296: CALL_OW 237
// end ;
22300: PPOPN 6
22302: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22303: LD_EXP 36
22307: PUSH
22308: LD_EXP 83
22312: AND
22313: IFFALSE 22392
22315: GO 22317
22317: DISABLE
22318: LD_INT 0
22320: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22321: LD_ADDR_VAR 0 1
22325: PUSH
22326: LD_INT 22
22328: PUSH
22329: LD_OWVAR 2
22333: PUSH
22334: EMPTY
22335: LIST
22336: LIST
22337: PUSH
22338: LD_INT 30
22340: PUSH
22341: LD_INT 3
22343: PUSH
22344: EMPTY
22345: LIST
22346: LIST
22347: PUSH
22348: EMPTY
22349: LIST
22350: LIST
22351: PPUSH
22352: CALL_OW 69
22356: ST_TO_ADDR
// if not tmp then
22357: LD_VAR 0 1
22361: NOT
22362: IFFALSE 22366
// exit ;
22364: GO 22392
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22366: LD_VAR 0 1
22370: PUSH
22371: LD_INT 1
22373: PPUSH
22374: LD_VAR 0 1
22378: PPUSH
22379: CALL_OW 12
22383: ARRAY
22384: PPUSH
22385: LD_INT 1
22387: PPUSH
22388: CALL_OW 234
// end ;
22392: PPOPN 1
22394: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22395: LD_EXP 36
22399: PUSH
22400: LD_EXP 84
22404: AND
22405: IFFALSE 22517
22407: GO 22409
22409: DISABLE
22410: LD_INT 0
22412: PPUSH
22413: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22414: LD_ADDR_VAR 0 2
22418: PUSH
22419: LD_INT 22
22421: PUSH
22422: LD_OWVAR 2
22426: PUSH
22427: EMPTY
22428: LIST
22429: LIST
22430: PUSH
22431: LD_INT 2
22433: PUSH
22434: LD_INT 30
22436: PUSH
22437: LD_INT 27
22439: PUSH
22440: EMPTY
22441: LIST
22442: LIST
22443: PUSH
22444: LD_INT 30
22446: PUSH
22447: LD_INT 26
22449: PUSH
22450: EMPTY
22451: LIST
22452: LIST
22453: PUSH
22454: LD_INT 30
22456: PUSH
22457: LD_INT 28
22459: PUSH
22460: EMPTY
22461: LIST
22462: LIST
22463: PUSH
22464: EMPTY
22465: LIST
22466: LIST
22467: LIST
22468: LIST
22469: PUSH
22470: EMPTY
22471: LIST
22472: LIST
22473: PPUSH
22474: CALL_OW 69
22478: ST_TO_ADDR
// if not tmp then
22479: LD_VAR 0 2
22483: NOT
22484: IFFALSE 22488
// exit ;
22486: GO 22517
// for i in tmp do
22488: LD_ADDR_VAR 0 1
22492: PUSH
22493: LD_VAR 0 2
22497: PUSH
22498: FOR_IN
22499: IFFALSE 22515
// SetLives ( i , 1 ) ;
22501: LD_VAR 0 1
22505: PPUSH
22506: LD_INT 1
22508: PPUSH
22509: CALL_OW 234
22513: GO 22498
22515: POP
22516: POP
// end ;
22517: PPOPN 2
22519: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22520: LD_EXP 36
22524: PUSH
22525: LD_EXP 85
22529: AND
22530: IFFALSE 22804
22532: GO 22534
22534: DISABLE
22535: LD_INT 0
22537: PPUSH
22538: PPUSH
22539: PPUSH
// begin i := rand ( 1 , 7 ) ;
22540: LD_ADDR_VAR 0 1
22544: PUSH
22545: LD_INT 1
22547: PPUSH
22548: LD_INT 7
22550: PPUSH
22551: CALL_OW 12
22555: ST_TO_ADDR
// case i of 1 :
22556: LD_VAR 0 1
22560: PUSH
22561: LD_INT 1
22563: DOUBLE
22564: EQUAL
22565: IFTRUE 22569
22567: GO 22579
22569: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22570: LD_STRING earthquake(getX(game), 0, 32)
22572: PPUSH
22573: CALL_OW 559
22577: GO 22804
22579: LD_INT 2
22581: DOUBLE
22582: EQUAL
22583: IFTRUE 22587
22585: GO 22601
22587: POP
// begin ToLua ( displayStucuk(); ) ;
22588: LD_STRING displayStucuk();
22590: PPUSH
22591: CALL_OW 559
// ResetFog ;
22595: CALL_OW 335
// end ; 3 :
22599: GO 22804
22601: LD_INT 3
22603: DOUBLE
22604: EQUAL
22605: IFTRUE 22609
22607: GO 22713
22609: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22610: LD_ADDR_VAR 0 2
22614: PUSH
22615: LD_INT 22
22617: PUSH
22618: LD_OWVAR 2
22622: PUSH
22623: EMPTY
22624: LIST
22625: LIST
22626: PUSH
22627: LD_INT 25
22629: PUSH
22630: LD_INT 1
22632: PUSH
22633: EMPTY
22634: LIST
22635: LIST
22636: PUSH
22637: EMPTY
22638: LIST
22639: LIST
22640: PPUSH
22641: CALL_OW 69
22645: ST_TO_ADDR
// if not tmp then
22646: LD_VAR 0 2
22650: NOT
22651: IFFALSE 22655
// exit ;
22653: GO 22804
// un := tmp [ rand ( 1 , tmp ) ] ;
22655: LD_ADDR_VAR 0 3
22659: PUSH
22660: LD_VAR 0 2
22664: PUSH
22665: LD_INT 1
22667: PPUSH
22668: LD_VAR 0 2
22672: PPUSH
22673: CALL_OW 12
22677: ARRAY
22678: ST_TO_ADDR
// if Crawls ( un ) then
22679: LD_VAR 0 3
22683: PPUSH
22684: CALL_OW 318
22688: IFFALSE 22699
// ComWalk ( un ) ;
22690: LD_VAR 0 3
22694: PPUSH
22695: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22699: LD_VAR 0 3
22703: PPUSH
22704: LD_INT 8
22706: PPUSH
22707: CALL_OW 336
// end ; 4 :
22711: GO 22804
22713: LD_INT 4
22715: DOUBLE
22716: EQUAL
22717: IFTRUE 22721
22719: GO 22782
22721: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22722: LD_ADDR_VAR 0 2
22726: PUSH
22727: LD_INT 22
22729: PUSH
22730: LD_OWVAR 2
22734: PUSH
22735: EMPTY
22736: LIST
22737: LIST
22738: PUSH
22739: LD_INT 30
22741: PUSH
22742: LD_INT 29
22744: PUSH
22745: EMPTY
22746: LIST
22747: LIST
22748: PUSH
22749: EMPTY
22750: LIST
22751: LIST
22752: PPUSH
22753: CALL_OW 69
22757: ST_TO_ADDR
// if not tmp then
22758: LD_VAR 0 2
22762: NOT
22763: IFFALSE 22767
// exit ;
22765: GO 22804
// DestroyUnit ( tmp [ 1 ] ) ;
22767: LD_VAR 0 2
22771: PUSH
22772: LD_INT 1
22774: ARRAY
22775: PPUSH
22776: CALL_OW 65
// end ; 5 .. 7 :
22780: GO 22804
22782: LD_INT 5
22784: DOUBLE
22785: GREATEREQUAL
22786: IFFALSE 22794
22788: LD_INT 7
22790: DOUBLE
22791: LESSEQUAL
22792: IFTRUE 22796
22794: GO 22803
22796: POP
// StreamSibBomb ; end ;
22797: CALL 19054 0 0
22801: GO 22804
22803: POP
// end ;
22804: PPOPN 3
22806: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
22807: LD_EXP 36
22811: PUSH
22812: LD_EXP 86
22816: AND
22817: IFFALSE 22973
22819: GO 22821
22821: DISABLE
22822: LD_INT 0
22824: PPUSH
22825: PPUSH
22826: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
22827: LD_ADDR_VAR 0 2
22831: PUSH
22832: LD_INT 81
22834: PUSH
22835: LD_OWVAR 2
22839: PUSH
22840: EMPTY
22841: LIST
22842: LIST
22843: PUSH
22844: LD_INT 2
22846: PUSH
22847: LD_INT 21
22849: PUSH
22850: LD_INT 1
22852: PUSH
22853: EMPTY
22854: LIST
22855: LIST
22856: PUSH
22857: LD_INT 21
22859: PUSH
22860: LD_INT 2
22862: PUSH
22863: EMPTY
22864: LIST
22865: LIST
22866: PUSH
22867: EMPTY
22868: LIST
22869: LIST
22870: LIST
22871: PUSH
22872: EMPTY
22873: LIST
22874: LIST
22875: PPUSH
22876: CALL_OW 69
22880: ST_TO_ADDR
// if not tmp then
22881: LD_VAR 0 2
22885: NOT
22886: IFFALSE 22890
// exit ;
22888: GO 22973
// p := 0 ;
22890: LD_ADDR_VAR 0 3
22894: PUSH
22895: LD_INT 0
22897: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
22898: LD_INT 35
22900: PPUSH
22901: CALL_OW 67
// p := p + 1 ;
22905: LD_ADDR_VAR 0 3
22909: PUSH
22910: LD_VAR 0 3
22914: PUSH
22915: LD_INT 1
22917: PLUS
22918: ST_TO_ADDR
// for i in tmp do
22919: LD_ADDR_VAR 0 1
22923: PUSH
22924: LD_VAR 0 2
22928: PUSH
22929: FOR_IN
22930: IFFALSE 22961
// if GetLives ( i ) < 1000 then
22932: LD_VAR 0 1
22936: PPUSH
22937: CALL_OW 256
22941: PUSH
22942: LD_INT 1000
22944: LESS
22945: IFFALSE 22959
// SetLives ( i , 1000 ) ;
22947: LD_VAR 0 1
22951: PPUSH
22952: LD_INT 1000
22954: PPUSH
22955: CALL_OW 234
22959: GO 22929
22961: POP
22962: POP
// until p > 20 ;
22963: LD_VAR 0 3
22967: PUSH
22968: LD_INT 20
22970: GREATER
22971: IFFALSE 22898
// end ;
22973: PPOPN 3
22975: END
// every 0 0$1 trigger StreamModeActive and sTime do
22976: LD_EXP 36
22980: PUSH
22981: LD_EXP 87
22985: AND
22986: IFFALSE 23021
22988: GO 22990
22990: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
22991: LD_INT 28
22993: PPUSH
22994: LD_OWVAR 2
22998: PPUSH
22999: LD_INT 2
23001: PPUSH
23002: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
23006: LD_INT 30
23008: PPUSH
23009: LD_OWVAR 2
23013: PPUSH
23014: LD_INT 2
23016: PPUSH
23017: CALL_OW 322
// end ;
23021: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
23022: LD_EXP 36
23026: PUSH
23027: LD_EXP 88
23031: AND
23032: IFFALSE 23153
23034: GO 23036
23036: DISABLE
23037: LD_INT 0
23039: PPUSH
23040: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23041: LD_ADDR_VAR 0 2
23045: PUSH
23046: LD_INT 22
23048: PUSH
23049: LD_OWVAR 2
23053: PUSH
23054: EMPTY
23055: LIST
23056: LIST
23057: PUSH
23058: LD_INT 21
23060: PUSH
23061: LD_INT 1
23063: PUSH
23064: EMPTY
23065: LIST
23066: LIST
23067: PUSH
23068: LD_INT 3
23070: PUSH
23071: LD_INT 23
23073: PUSH
23074: LD_INT 0
23076: PUSH
23077: EMPTY
23078: LIST
23079: LIST
23080: PUSH
23081: EMPTY
23082: LIST
23083: LIST
23084: PUSH
23085: EMPTY
23086: LIST
23087: LIST
23088: LIST
23089: PPUSH
23090: CALL_OW 69
23094: ST_TO_ADDR
// if not tmp then
23095: LD_VAR 0 2
23099: NOT
23100: IFFALSE 23104
// exit ;
23102: GO 23153
// for i in tmp do
23104: LD_ADDR_VAR 0 1
23108: PUSH
23109: LD_VAR 0 2
23113: PUSH
23114: FOR_IN
23115: IFFALSE 23151
// begin if Crawls ( i ) then
23117: LD_VAR 0 1
23121: PPUSH
23122: CALL_OW 318
23126: IFFALSE 23137
// ComWalk ( i ) ;
23128: LD_VAR 0 1
23132: PPUSH
23133: CALL_OW 138
// SetClass ( i , 2 ) ;
23137: LD_VAR 0 1
23141: PPUSH
23142: LD_INT 2
23144: PPUSH
23145: CALL_OW 336
// end ;
23149: GO 23114
23151: POP
23152: POP
// end ;
23153: PPOPN 2
23155: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23156: LD_EXP 36
23160: PUSH
23161: LD_EXP 89
23165: AND
23166: IFFALSE 23447
23168: GO 23170
23170: DISABLE
23171: LD_INT 0
23173: PPUSH
23174: PPUSH
23175: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23176: LD_OWVAR 2
23180: PPUSH
23181: LD_INT 9
23183: PPUSH
23184: LD_INT 1
23186: PPUSH
23187: LD_INT 1
23189: PPUSH
23190: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23194: LD_INT 9
23196: PPUSH
23197: LD_OWVAR 2
23201: PPUSH
23202: CALL_OW 343
// uc_side := 9 ;
23206: LD_ADDR_OWVAR 20
23210: PUSH
23211: LD_INT 9
23213: ST_TO_ADDR
// uc_nation := 2 ;
23214: LD_ADDR_OWVAR 21
23218: PUSH
23219: LD_INT 2
23221: ST_TO_ADDR
// hc_name := Dark Warrior ;
23222: LD_ADDR_OWVAR 26
23226: PUSH
23227: LD_STRING Dark Warrior
23229: ST_TO_ADDR
// hc_gallery :=  ;
23230: LD_ADDR_OWVAR 33
23234: PUSH
23235: LD_STRING 
23237: ST_TO_ADDR
// hc_noskilllimit := true ;
23238: LD_ADDR_OWVAR 76
23242: PUSH
23243: LD_INT 1
23245: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23246: LD_ADDR_OWVAR 31
23250: PUSH
23251: LD_INT 30
23253: PUSH
23254: LD_INT 30
23256: PUSH
23257: LD_INT 30
23259: PUSH
23260: LD_INT 30
23262: PUSH
23263: EMPTY
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: ST_TO_ADDR
// un := CreateHuman ;
23269: LD_ADDR_VAR 0 3
23273: PUSH
23274: CALL_OW 44
23278: ST_TO_ADDR
// hc_noskilllimit := false ;
23279: LD_ADDR_OWVAR 76
23283: PUSH
23284: LD_INT 0
23286: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23287: LD_VAR 0 3
23291: PPUSH
23292: LD_INT 1
23294: PPUSH
23295: CALL_OW 51
// p := 0 ;
23299: LD_ADDR_VAR 0 2
23303: PUSH
23304: LD_INT 0
23306: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23307: LD_INT 35
23309: PPUSH
23310: CALL_OW 67
// p := p + 1 ;
23314: LD_ADDR_VAR 0 2
23318: PUSH
23319: LD_VAR 0 2
23323: PUSH
23324: LD_INT 1
23326: PLUS
23327: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23328: LD_VAR 0 3
23332: PPUSH
23333: CALL_OW 256
23337: PUSH
23338: LD_INT 1000
23340: LESS
23341: IFFALSE 23355
// SetLives ( un , 1000 ) ;
23343: LD_VAR 0 3
23347: PPUSH
23348: LD_INT 1000
23350: PPUSH
23351: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23355: LD_VAR 0 3
23359: PPUSH
23360: LD_INT 81
23362: PUSH
23363: LD_OWVAR 2
23367: PUSH
23368: EMPTY
23369: LIST
23370: LIST
23371: PUSH
23372: LD_INT 91
23374: PUSH
23375: LD_VAR 0 3
23379: PUSH
23380: LD_INT 30
23382: PUSH
23383: EMPTY
23384: LIST
23385: LIST
23386: LIST
23387: PUSH
23388: EMPTY
23389: LIST
23390: LIST
23391: PPUSH
23392: CALL_OW 69
23396: PPUSH
23397: LD_VAR 0 3
23401: PPUSH
23402: CALL_OW 74
23406: PPUSH
23407: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
23411: LD_VAR 0 2
23415: PUSH
23416: LD_INT 60
23418: GREATER
23419: PUSH
23420: LD_VAR 0 3
23424: PPUSH
23425: CALL_OW 301
23429: OR
23430: IFFALSE 23307
// if un then
23432: LD_VAR 0 3
23436: IFFALSE 23447
// RemoveUnit ( un ) ;
23438: LD_VAR 0 3
23442: PPUSH
23443: CALL_OW 64
// end ;
23447: PPOPN 3
23449: END
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
23450: LD_INT 0
23452: PPUSH
23453: PPUSH
23454: PPUSH
23455: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23456: LD_ADDR_VAR 0 4
23460: PUSH
23461: LD_INT 22
23463: PUSH
23464: LD_OWVAR 2
23468: PUSH
23469: EMPTY
23470: LIST
23471: LIST
23472: PUSH
23473: LD_INT 2
23475: PUSH
23476: LD_INT 30
23478: PUSH
23479: LD_INT 0
23481: PUSH
23482: EMPTY
23483: LIST
23484: LIST
23485: PUSH
23486: LD_INT 30
23488: PUSH
23489: LD_INT 1
23491: PUSH
23492: EMPTY
23493: LIST
23494: LIST
23495: PUSH
23496: EMPTY
23497: LIST
23498: LIST
23499: LIST
23500: PUSH
23501: EMPTY
23502: LIST
23503: LIST
23504: PPUSH
23505: CALL_OW 69
23509: ST_TO_ADDR
// if not tmp then
23510: LD_VAR 0 4
23514: NOT
23515: IFFALSE 23519
// exit ;
23517: GO 23578
// for i in tmp do
23519: LD_ADDR_VAR 0 2
23523: PUSH
23524: LD_VAR 0 4
23528: PUSH
23529: FOR_IN
23530: IFFALSE 23576
// for j = 1 to 3 do
23532: LD_ADDR_VAR 0 3
23536: PUSH
23537: DOUBLE
23538: LD_INT 1
23540: DEC
23541: ST_TO_ADDR
23542: LD_INT 3
23544: PUSH
23545: FOR_TO
23546: IFFALSE 23572
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
23548: LD_VAR 0 2
23552: PPUSH
23553: CALL_OW 274
23557: PPUSH
23558: LD_VAR 0 3
23562: PPUSH
23563: LD_INT 99999
23565: PPUSH
23566: CALL_OW 277
23570: GO 23545
23572: POP
23573: POP
23574: GO 23529
23576: POP
23577: POP
// end ;
23578: LD_VAR 0 1
23582: RET
// export function hHackSetLevel10 ; var i , j ; begin
23583: LD_INT 0
23585: PPUSH
23586: PPUSH
23587: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
23588: LD_ADDR_VAR 0 2
23592: PUSH
23593: LD_INT 21
23595: PUSH
23596: LD_INT 1
23598: PUSH
23599: EMPTY
23600: LIST
23601: LIST
23602: PPUSH
23603: CALL_OW 69
23607: PUSH
23608: FOR_IN
23609: IFFALSE 23661
// if IsSelected ( i ) then
23611: LD_VAR 0 2
23615: PPUSH
23616: CALL_OW 306
23620: IFFALSE 23659
// begin for j := 1 to 4 do
23622: LD_ADDR_VAR 0 3
23626: PUSH
23627: DOUBLE
23628: LD_INT 1
23630: DEC
23631: ST_TO_ADDR
23632: LD_INT 4
23634: PUSH
23635: FOR_TO
23636: IFFALSE 23657
// SetSkill ( i , j , 10 ) ;
23638: LD_VAR 0 2
23642: PPUSH
23643: LD_VAR 0 3
23647: PPUSH
23648: LD_INT 10
23650: PPUSH
23651: CALL_OW 237
23655: GO 23635
23657: POP
23658: POP
// end ;
23659: GO 23608
23661: POP
23662: POP
// end ;
23663: LD_VAR 0 1
23667: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
23668: LD_INT 0
23670: PPUSH
23671: PPUSH
23672: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
23673: LD_ADDR_VAR 0 2
23677: PUSH
23678: LD_INT 22
23680: PUSH
23681: LD_OWVAR 2
23685: PUSH
23686: EMPTY
23687: LIST
23688: LIST
23689: PUSH
23690: LD_INT 21
23692: PUSH
23693: LD_INT 1
23695: PUSH
23696: EMPTY
23697: LIST
23698: LIST
23699: PUSH
23700: EMPTY
23701: LIST
23702: LIST
23703: PPUSH
23704: CALL_OW 69
23708: PUSH
23709: FOR_IN
23710: IFFALSE 23751
// begin for j := 1 to 4 do
23712: LD_ADDR_VAR 0 3
23716: PUSH
23717: DOUBLE
23718: LD_INT 1
23720: DEC
23721: ST_TO_ADDR
23722: LD_INT 4
23724: PUSH
23725: FOR_TO
23726: IFFALSE 23747
// SetSkill ( i , j , 10 ) ;
23728: LD_VAR 0 2
23732: PPUSH
23733: LD_VAR 0 3
23737: PPUSH
23738: LD_INT 10
23740: PPUSH
23741: CALL_OW 237
23745: GO 23725
23747: POP
23748: POP
// end ;
23749: GO 23709
23751: POP
23752: POP
// end ;
23753: LD_VAR 0 1
23757: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
23758: LD_INT 0
23760: PPUSH
// uc_side := your_side ;
23761: LD_ADDR_OWVAR 20
23765: PUSH
23766: LD_OWVAR 2
23770: ST_TO_ADDR
// uc_nation := nation ;
23771: LD_ADDR_OWVAR 21
23775: PUSH
23776: LD_VAR 0 1
23780: ST_TO_ADDR
// InitHc ;
23781: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
23785: LD_INT 0
23787: PPUSH
23788: LD_VAR 0 2
23792: PPUSH
23793: LD_VAR 0 3
23797: PPUSH
23798: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
23802: CALL_OW 44
23806: PPUSH
23807: LD_INT 1
23809: PPUSH
23810: CALL_OW 51
// end ;
23814: LD_VAR 0 4
23818: RET
// export function hHackSpawnVehicle ; begin
23819: LD_INT 0
23821: PPUSH
// uc_side := your_side ;
23822: LD_ADDR_OWVAR 20
23826: PUSH
23827: LD_OWVAR 2
23831: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
23832: LD_ADDR_OWVAR 21
23836: PUSH
23837: LD_INT 1
23839: PPUSH
23840: LD_INT 3
23842: PPUSH
23843: CALL_OW 12
23847: ST_TO_ADDR
// InitVc ;
23848: CALL_OW 20
// case uc_nation of 1 :
23852: LD_OWVAR 21
23856: PUSH
23857: LD_INT 1
23859: DOUBLE
23860: EQUAL
23861: IFTRUE 23865
23863: GO 24009
23865: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
23866: LD_ADDR_OWVAR 37
23870: PUSH
23871: LD_INT 1
23873: PUSH
23874: LD_INT 2
23876: PUSH
23877: LD_INT 3
23879: PUSH
23880: LD_INT 4
23882: PUSH
23883: LD_INT 5
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: PUSH
23893: LD_INT 1
23895: PPUSH
23896: LD_INT 5
23898: PPUSH
23899: CALL_OW 12
23903: ARRAY
23904: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
23905: LD_ADDR_OWVAR 39
23909: PUSH
23910: LD_INT 1
23912: PPUSH
23913: LD_INT 3
23915: PPUSH
23916: CALL_OW 12
23920: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
23921: LD_ADDR_OWVAR 38
23925: PUSH
23926: LD_INT 1
23928: PUSH
23929: LD_INT 2
23931: PUSH
23932: LD_INT 3
23934: PUSH
23935: EMPTY
23936: LIST
23937: LIST
23938: LIST
23939: PUSH
23940: LD_INT 1
23942: PPUSH
23943: LD_INT 3
23945: PPUSH
23946: CALL_OW 12
23950: ARRAY
23951: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
23952: LD_ADDR_OWVAR 40
23956: PUSH
23957: LD_INT 2
23959: PUSH
23960: LD_INT 4
23962: PUSH
23963: LD_INT 5
23965: PUSH
23966: LD_INT 3
23968: PUSH
23969: LD_INT 7
23971: PUSH
23972: LD_INT 8
23974: PUSH
23975: LD_INT 9
23977: PUSH
23978: LD_INT 10
23980: PUSH
23981: LD_INT 6
23983: PUSH
23984: EMPTY
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: PUSH
23995: LD_INT 1
23997: PPUSH
23998: LD_INT 9
24000: PPUSH
24001: CALL_OW 12
24005: ARRAY
24006: ST_TO_ADDR
// end ; 2 :
24007: GO 24274
24009: LD_INT 2
24011: DOUBLE
24012: EQUAL
24013: IFTRUE 24017
24015: GO 24141
24017: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
24018: LD_ADDR_OWVAR 37
24022: PUSH
24023: LD_INT 11
24025: PUSH
24026: LD_INT 12
24028: PUSH
24029: LD_INT 13
24031: PUSH
24032: LD_INT 14
24034: PUSH
24035: EMPTY
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: PUSH
24041: LD_INT 1
24043: PPUSH
24044: LD_INT 4
24046: PPUSH
24047: CALL_OW 12
24051: ARRAY
24052: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
24053: LD_ADDR_OWVAR 39
24057: PUSH
24058: LD_INT 1
24060: PPUSH
24061: LD_INT 3
24063: PPUSH
24064: CALL_OW 12
24068: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
24069: LD_ADDR_OWVAR 38
24073: PUSH
24074: LD_INT 1
24076: PUSH
24077: LD_INT 2
24079: PUSH
24080: LD_INT 5
24082: PUSH
24083: EMPTY
24084: LIST
24085: LIST
24086: LIST
24087: PUSH
24088: LD_INT 1
24090: PPUSH
24091: LD_INT 3
24093: PPUSH
24094: CALL_OW 12
24098: ARRAY
24099: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
24100: LD_ADDR_OWVAR 40
24104: PUSH
24105: LD_INT 24
24107: PUSH
24108: LD_INT 26
24110: PUSH
24111: LD_INT 27
24113: PUSH
24114: LD_INT 28
24116: PUSH
24117: LD_INT 29
24119: PUSH
24120: EMPTY
24121: LIST
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: PUSH
24127: LD_INT 1
24129: PPUSH
24130: LD_INT 5
24132: PPUSH
24133: CALL_OW 12
24137: ARRAY
24138: ST_TO_ADDR
// end ; 3 :
24139: GO 24274
24141: LD_INT 3
24143: DOUBLE
24144: EQUAL
24145: IFTRUE 24149
24147: GO 24273
24149: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
24150: LD_ADDR_OWVAR 37
24154: PUSH
24155: LD_INT 21
24157: PUSH
24158: LD_INT 23
24160: PUSH
24161: LD_INT 22
24163: PUSH
24164: LD_INT 24
24166: PUSH
24167: EMPTY
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: PUSH
24173: LD_INT 1
24175: PPUSH
24176: LD_INT 4
24178: PPUSH
24179: CALL_OW 12
24183: ARRAY
24184: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
24185: LD_ADDR_OWVAR 39
24189: PUSH
24190: LD_INT 1
24192: PPUSH
24193: LD_INT 3
24195: PPUSH
24196: CALL_OW 12
24200: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
24201: LD_ADDR_OWVAR 38
24205: PUSH
24206: LD_INT 1
24208: PUSH
24209: LD_INT 3
24211: PUSH
24212: EMPTY
24213: LIST
24214: LIST
24215: PUSH
24216: LD_INT 1
24218: PPUSH
24219: LD_INT 2
24221: PPUSH
24222: CALL_OW 12
24226: ARRAY
24227: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
24228: LD_ADDR_OWVAR 40
24232: PUSH
24233: LD_INT 42
24235: PUSH
24236: LD_INT 43
24238: PUSH
24239: LD_INT 44
24241: PUSH
24242: LD_INT 46
24244: PUSH
24245: LD_INT 48
24247: PUSH
24248: LD_INT 47
24250: PUSH
24251: EMPTY
24252: LIST
24253: LIST
24254: LIST
24255: LIST
24256: LIST
24257: LIST
24258: PUSH
24259: LD_INT 1
24261: PPUSH
24262: LD_INT 6
24264: PPUSH
24265: CALL_OW 12
24269: ARRAY
24270: ST_TO_ADDR
// end ; end ;
24271: GO 24274
24273: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
24274: CALL_OW 45
24278: PPUSH
24279: LD_INT 1
24281: PPUSH
24282: CALL_OW 51
// end ;
24286: LD_VAR 0 1
24290: RET
// export hInvincible ; every 1 do
24291: GO 24293
24293: DISABLE
// hInvincible := [ ] ;
24294: LD_ADDR_EXP 90
24298: PUSH
24299: EMPTY
24300: ST_TO_ADDR
24301: END
// every 10 do var i ;
24302: GO 24304
24304: DISABLE
24305: LD_INT 0
24307: PPUSH
// begin enable ;
24308: ENABLE
// if not hInvincible then
24309: LD_EXP 90
24313: NOT
24314: IFFALSE 24318
// exit ;
24316: GO 24362
// for i in hInvincible do
24318: LD_ADDR_VAR 0 1
24322: PUSH
24323: LD_EXP 90
24327: PUSH
24328: FOR_IN
24329: IFFALSE 24360
// if GetLives ( i ) < 1000 then
24331: LD_VAR 0 1
24335: PPUSH
24336: CALL_OW 256
24340: PUSH
24341: LD_INT 1000
24343: LESS
24344: IFFALSE 24358
// SetLives ( i , 1000 ) ;
24346: LD_VAR 0 1
24350: PPUSH
24351: LD_INT 1000
24353: PPUSH
24354: CALL_OW 234
24358: GO 24328
24360: POP
24361: POP
// end ;
24362: PPOPN 1
24364: END
// export function hHackInvincible ; var i ; begin
24365: LD_INT 0
24367: PPUSH
24368: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
24369: LD_ADDR_VAR 0 2
24373: PUSH
24374: LD_INT 2
24376: PUSH
24377: LD_INT 21
24379: PUSH
24380: LD_INT 1
24382: PUSH
24383: EMPTY
24384: LIST
24385: LIST
24386: PUSH
24387: LD_INT 21
24389: PUSH
24390: LD_INT 2
24392: PUSH
24393: EMPTY
24394: LIST
24395: LIST
24396: PUSH
24397: EMPTY
24398: LIST
24399: LIST
24400: LIST
24401: PPUSH
24402: CALL_OW 69
24406: PUSH
24407: FOR_IN
24408: IFFALSE 24469
// if IsSelected ( i ) then
24410: LD_VAR 0 2
24414: PPUSH
24415: CALL_OW 306
24419: IFFALSE 24467
// begin if i in hInvincible then
24421: LD_VAR 0 2
24425: PUSH
24426: LD_EXP 90
24430: IN
24431: IFFALSE 24451
// hInvincible := hInvincible diff i else
24433: LD_ADDR_EXP 90
24437: PUSH
24438: LD_EXP 90
24442: PUSH
24443: LD_VAR 0 2
24447: DIFF
24448: ST_TO_ADDR
24449: GO 24467
// hInvincible := hInvincible union i ;
24451: LD_ADDR_EXP 90
24455: PUSH
24456: LD_EXP 90
24460: PUSH
24461: LD_VAR 0 2
24465: UNION
24466: ST_TO_ADDR
// end ;
24467: GO 24407
24469: POP
24470: POP
// end ;
24471: LD_VAR 0 1
24475: RET
// export function hHackInvisible ; var i , j ; begin
24476: LD_INT 0
24478: PPUSH
24479: PPUSH
24480: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
24481: LD_ADDR_VAR 0 2
24485: PUSH
24486: LD_INT 21
24488: PUSH
24489: LD_INT 1
24491: PUSH
24492: EMPTY
24493: LIST
24494: LIST
24495: PPUSH
24496: CALL_OW 69
24500: PUSH
24501: FOR_IN
24502: IFFALSE 24526
// if IsSelected ( i ) then
24504: LD_VAR 0 2
24508: PPUSH
24509: CALL_OW 306
24513: IFFALSE 24524
// ComForceInvisible ( i ) ;
24515: LD_VAR 0 2
24519: PPUSH
24520: CALL_OW 496
24524: GO 24501
24526: POP
24527: POP
// end ;
24528: LD_VAR 0 1
24532: RET
// export function hHackChangeYourSide ; begin
24533: LD_INT 0
24535: PPUSH
// if your_side = 8 then
24536: LD_OWVAR 2
24540: PUSH
24541: LD_INT 8
24543: EQUAL
24544: IFFALSE 24556
// your_side := 0 else
24546: LD_ADDR_OWVAR 2
24550: PUSH
24551: LD_INT 0
24553: ST_TO_ADDR
24554: GO 24570
// your_side := your_side + 1 ;
24556: LD_ADDR_OWVAR 2
24560: PUSH
24561: LD_OWVAR 2
24565: PUSH
24566: LD_INT 1
24568: PLUS
24569: ST_TO_ADDR
// end ;
24570: LD_VAR 0 1
24574: RET
// export function hHackChangeUnitSide ; var i , j ; begin
24575: LD_INT 0
24577: PPUSH
24578: PPUSH
24579: PPUSH
// for i in all_units do
24580: LD_ADDR_VAR 0 2
24584: PUSH
24585: LD_OWVAR 3
24589: PUSH
24590: FOR_IN
24591: IFFALSE 24669
// if IsSelected ( i ) then
24593: LD_VAR 0 2
24597: PPUSH
24598: CALL_OW 306
24602: IFFALSE 24667
// begin j := GetSide ( i ) ;
24604: LD_ADDR_VAR 0 3
24608: PUSH
24609: LD_VAR 0 2
24613: PPUSH
24614: CALL_OW 255
24618: ST_TO_ADDR
// if j = 8 then
24619: LD_VAR 0 3
24623: PUSH
24624: LD_INT 8
24626: EQUAL
24627: IFFALSE 24639
// j := 0 else
24629: LD_ADDR_VAR 0 3
24633: PUSH
24634: LD_INT 0
24636: ST_TO_ADDR
24637: GO 24653
// j := j + 1 ;
24639: LD_ADDR_VAR 0 3
24643: PUSH
24644: LD_VAR 0 3
24648: PUSH
24649: LD_INT 1
24651: PLUS
24652: ST_TO_ADDR
// SetSide ( i , j ) ;
24653: LD_VAR 0 2
24657: PPUSH
24658: LD_VAR 0 3
24662: PPUSH
24663: CALL_OW 235
// end ;
24667: GO 24590
24669: POP
24670: POP
// end ;
24671: LD_VAR 0 1
24675: RET
// export function hHackFog ; begin
24676: LD_INT 0
24678: PPUSH
// FogOff ( true ) ;
24679: LD_INT 1
24681: PPUSH
24682: CALL_OW 344
// end ;
24686: LD_VAR 0 1
24690: RET
// export function hHackApeman ; begin
24691: LD_INT 0
24693: PPUSH
// uc_side := your_side ;
24694: LD_ADDR_OWVAR 20
24698: PUSH
24699: LD_OWVAR 2
24703: ST_TO_ADDR
// uc_nation := 0 ;
24704: LD_ADDR_OWVAR 21
24708: PUSH
24709: LD_INT 0
24711: ST_TO_ADDR
// hc_name :=  ;
24712: LD_ADDR_OWVAR 26
24716: PUSH
24717: LD_STRING 
24719: ST_TO_ADDR
// hc_gallery :=  ;
24720: LD_ADDR_OWVAR 33
24724: PUSH
24725: LD_STRING 
24727: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
24728: LD_ADDR_OWVAR 31
24732: PUSH
24733: LD_INT 0
24735: PUSH
24736: LD_INT 0
24738: PUSH
24739: LD_INT 0
24741: PUSH
24742: LD_INT 0
24744: PUSH
24745: EMPTY
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: ST_TO_ADDR
// hc_class := class_apeman ;
24751: LD_ADDR_OWVAR 28
24755: PUSH
24756: LD_INT 12
24758: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
24759: CALL_OW 44
24763: PPUSH
24764: LD_INT 1
24766: PPUSH
24767: CALL_OW 51
// end ;
24771: LD_VAR 0 1
24775: RET
// export function hHackBoom ; begin
24776: LD_INT 0
24778: PPUSH
// uc_side := your_side ;
24779: LD_ADDR_OWVAR 20
24783: PUSH
24784: LD_OWVAR 2
24788: ST_TO_ADDR
// uc_nation := 1 ;
24789: LD_ADDR_OWVAR 21
24793: PUSH
24794: LD_INT 1
24796: ST_TO_ADDR
// vc_chassis := us_morphling ;
24797: LD_ADDR_OWVAR 37
24801: PUSH
24802: LD_INT 5
24804: ST_TO_ADDR
// vc_engine := engine_siberite ;
24805: LD_ADDR_OWVAR 39
24809: PUSH
24810: LD_INT 3
24812: ST_TO_ADDR
// vc_control := control_computer ;
24813: LD_ADDR_OWVAR 38
24817: PUSH
24818: LD_INT 3
24820: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
24821: LD_ADDR_OWVAR 40
24825: PUSH
24826: LD_INT 8
24828: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
24829: CALL_OW 45
24833: PPUSH
24834: LD_INT 1
24836: PPUSH
24837: CALL_OW 51
// end ; end_of_file
24841: LD_VAR 0 1
24845: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
24846: LD_INT 0
24848: PPUSH
24849: PPUSH
24850: PPUSH
24851: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
24852: LD_VAR 0 1
24856: PPUSH
24857: CALL_OW 264
24861: PUSH
24862: LD_EXP 25
24866: EQUAL
24867: IFFALSE 24939
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
24869: LD_INT 68
24871: PPUSH
24872: LD_VAR 0 1
24876: PPUSH
24877: CALL_OW 255
24881: PPUSH
24882: CALL_OW 321
24886: PUSH
24887: LD_INT 2
24889: EQUAL
24890: IFFALSE 24902
// eff := 70 else
24892: LD_ADDR_VAR 0 4
24896: PUSH
24897: LD_INT 70
24899: ST_TO_ADDR
24900: GO 24910
// eff := 30 ;
24902: LD_ADDR_VAR 0 4
24906: PUSH
24907: LD_INT 30
24909: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
24910: LD_VAR 0 1
24914: PPUSH
24915: CALL_OW 250
24919: PPUSH
24920: LD_VAR 0 1
24924: PPUSH
24925: CALL_OW 251
24929: PPUSH
24930: LD_VAR 0 4
24934: PPUSH
24935: CALL_OW 495
// end ; end ;
24939: LD_VAR 0 2
24943: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
24944: LD_INT 0
24946: PPUSH
// end ;
24947: LD_VAR 0 4
24951: RET
// export function SOS_Command ( cmd ) ; begin
24952: LD_INT 0
24954: PPUSH
// end ;
24955: LD_VAR 0 2
24959: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
24960: LD_VAR 0 1
24964: PUSH
24965: LD_INT 254
24967: EQUAL
24968: PUSH
24969: LD_VAR 0 2
24973: PPUSH
24974: CALL_OW 264
24978: PUSH
24979: LD_EXP 23
24983: EQUAL
24984: AND
24985: PUSH
24986: LD_VAR 0 3
24990: PPUSH
24991: CALL_OW 263
24995: PUSH
24996: LD_INT 3
24998: EQUAL
24999: AND
25000: IFFALSE 25016
// HackDestroyVehicle ( unit , selectedUnit ) ;
25002: LD_VAR 0 2
25006: PPUSH
25007: LD_VAR 0 3
25011: PPUSH
25012: CALL 26523 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
25016: LD_VAR 0 1
25020: PUSH
25021: LD_INT 255
25023: EQUAL
25024: PUSH
25025: LD_VAR 0 2
25029: PPUSH
25030: CALL_OW 264
25034: PUSH
25035: LD_INT 14
25037: PUSH
25038: LD_INT 53
25040: PUSH
25041: EMPTY
25042: LIST
25043: LIST
25044: IN
25045: AND
25046: PUSH
25047: LD_VAR 0 4
25051: PPUSH
25052: LD_VAR 0 5
25056: PPUSH
25057: CALL_OW 488
25061: AND
25062: IFFALSE 25086
// CutTreeXYR ( unit , x , y , 12 ) ;
25064: LD_VAR 0 2
25068: PPUSH
25069: LD_VAR 0 4
25073: PPUSH
25074: LD_VAR 0 5
25078: PPUSH
25079: LD_INT 12
25081: PPUSH
25082: CALL 25089 0 4
// end ;
25086: PPOPN 5
25088: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
25089: LD_INT 0
25091: PPUSH
25092: PPUSH
25093: PPUSH
25094: PPUSH
25095: PPUSH
25096: PPUSH
25097: PPUSH
25098: PPUSH
25099: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
25100: LD_VAR 0 1
25104: NOT
25105: PUSH
25106: LD_VAR 0 2
25110: PPUSH
25111: LD_VAR 0 3
25115: PPUSH
25116: CALL_OW 488
25120: NOT
25121: OR
25122: PUSH
25123: LD_VAR 0 4
25127: NOT
25128: OR
25129: IFFALSE 25133
// exit ;
25131: GO 25473
// list := [ ] ;
25133: LD_ADDR_VAR 0 13
25137: PUSH
25138: EMPTY
25139: ST_TO_ADDR
// if x - r < 0 then
25140: LD_VAR 0 2
25144: PUSH
25145: LD_VAR 0 4
25149: MINUS
25150: PUSH
25151: LD_INT 0
25153: LESS
25154: IFFALSE 25166
// min_x := 0 else
25156: LD_ADDR_VAR 0 7
25160: PUSH
25161: LD_INT 0
25163: ST_TO_ADDR
25164: GO 25182
// min_x := x - r ;
25166: LD_ADDR_VAR 0 7
25170: PUSH
25171: LD_VAR 0 2
25175: PUSH
25176: LD_VAR 0 4
25180: MINUS
25181: ST_TO_ADDR
// if y - r < 0 then
25182: LD_VAR 0 3
25186: PUSH
25187: LD_VAR 0 4
25191: MINUS
25192: PUSH
25193: LD_INT 0
25195: LESS
25196: IFFALSE 25208
// min_y := 0 else
25198: LD_ADDR_VAR 0 8
25202: PUSH
25203: LD_INT 0
25205: ST_TO_ADDR
25206: GO 25224
// min_y := y - r ;
25208: LD_ADDR_VAR 0 8
25212: PUSH
25213: LD_VAR 0 3
25217: PUSH
25218: LD_VAR 0 4
25222: MINUS
25223: ST_TO_ADDR
// max_x := x + r ;
25224: LD_ADDR_VAR 0 9
25228: PUSH
25229: LD_VAR 0 2
25233: PUSH
25234: LD_VAR 0 4
25238: PLUS
25239: ST_TO_ADDR
// max_y := y + r ;
25240: LD_ADDR_VAR 0 10
25244: PUSH
25245: LD_VAR 0 3
25249: PUSH
25250: LD_VAR 0 4
25254: PLUS
25255: ST_TO_ADDR
// for _x = min_x to max_x do
25256: LD_ADDR_VAR 0 11
25260: PUSH
25261: DOUBLE
25262: LD_VAR 0 7
25266: DEC
25267: ST_TO_ADDR
25268: LD_VAR 0 9
25272: PUSH
25273: FOR_TO
25274: IFFALSE 25391
// for _y = min_y to max_y do
25276: LD_ADDR_VAR 0 12
25280: PUSH
25281: DOUBLE
25282: LD_VAR 0 8
25286: DEC
25287: ST_TO_ADDR
25288: LD_VAR 0 10
25292: PUSH
25293: FOR_TO
25294: IFFALSE 25387
// begin if not ValidHex ( _x , _y ) then
25296: LD_VAR 0 11
25300: PPUSH
25301: LD_VAR 0 12
25305: PPUSH
25306: CALL_OW 488
25310: NOT
25311: IFFALSE 25315
// continue ;
25313: GO 25293
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
25315: LD_VAR 0 11
25319: PPUSH
25320: LD_VAR 0 12
25324: PPUSH
25325: CALL_OW 351
25329: PUSH
25330: LD_VAR 0 11
25334: PPUSH
25335: LD_VAR 0 12
25339: PPUSH
25340: CALL_OW 554
25344: AND
25345: IFFALSE 25385
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
25347: LD_ADDR_VAR 0 13
25351: PUSH
25352: LD_VAR 0 13
25356: PPUSH
25357: LD_VAR 0 13
25361: PUSH
25362: LD_INT 1
25364: PLUS
25365: PPUSH
25366: LD_VAR 0 11
25370: PUSH
25371: LD_VAR 0 12
25375: PUSH
25376: EMPTY
25377: LIST
25378: LIST
25379: PPUSH
25380: CALL_OW 2
25384: ST_TO_ADDR
// end ;
25385: GO 25293
25387: POP
25388: POP
25389: GO 25273
25391: POP
25392: POP
// if not list then
25393: LD_VAR 0 13
25397: NOT
25398: IFFALSE 25402
// exit ;
25400: GO 25473
// for i in list do
25402: LD_ADDR_VAR 0 6
25406: PUSH
25407: LD_VAR 0 13
25411: PUSH
25412: FOR_IN
25413: IFFALSE 25471
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
25415: LD_VAR 0 1
25419: PPUSH
25420: LD_STRING M
25422: PUSH
25423: LD_VAR 0 6
25427: PUSH
25428: LD_INT 1
25430: ARRAY
25431: PUSH
25432: LD_VAR 0 6
25436: PUSH
25437: LD_INT 2
25439: ARRAY
25440: PUSH
25441: LD_INT 0
25443: PUSH
25444: LD_INT 0
25446: PUSH
25447: LD_INT 0
25449: PUSH
25450: LD_INT 0
25452: PUSH
25453: EMPTY
25454: LIST
25455: LIST
25456: LIST
25457: LIST
25458: LIST
25459: LIST
25460: LIST
25461: PUSH
25462: EMPTY
25463: LIST
25464: PPUSH
25465: CALL_OW 447
25469: GO 25412
25471: POP
25472: POP
// end ;
25473: LD_VAR 0 5
25477: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
25478: LD_EXP 91
25482: NOT
25483: IFFALSE 25533
25485: GO 25487
25487: DISABLE
// begin initHack := true ;
25488: LD_ADDR_EXP 91
25492: PUSH
25493: LD_INT 1
25495: ST_TO_ADDR
// hackTanks := [ ] ;
25496: LD_ADDR_EXP 92
25500: PUSH
25501: EMPTY
25502: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
25503: LD_ADDR_EXP 93
25507: PUSH
25508: EMPTY
25509: ST_TO_ADDR
// hackLimit := 3 ;
25510: LD_ADDR_EXP 94
25514: PUSH
25515: LD_INT 3
25517: ST_TO_ADDR
// hackDist := 12 ;
25518: LD_ADDR_EXP 95
25522: PUSH
25523: LD_INT 12
25525: ST_TO_ADDR
// hackCounter := [ ] ;
25526: LD_ADDR_EXP 96
25530: PUSH
25531: EMPTY
25532: ST_TO_ADDR
// end ;
25533: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
25534: LD_EXP 91
25538: PUSH
25539: LD_INT 34
25541: PUSH
25542: LD_EXP 23
25546: PUSH
25547: EMPTY
25548: LIST
25549: LIST
25550: PPUSH
25551: CALL_OW 69
25555: AND
25556: IFFALSE 25811
25558: GO 25560
25560: DISABLE
25561: LD_INT 0
25563: PPUSH
25564: PPUSH
// begin enable ;
25565: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
25566: LD_ADDR_VAR 0 1
25570: PUSH
25571: LD_INT 34
25573: PUSH
25574: LD_EXP 23
25578: PUSH
25579: EMPTY
25580: LIST
25581: LIST
25582: PPUSH
25583: CALL_OW 69
25587: PUSH
25588: FOR_IN
25589: IFFALSE 25809
// begin if not i in hackTanks then
25591: LD_VAR 0 1
25595: PUSH
25596: LD_EXP 92
25600: IN
25601: NOT
25602: IFFALSE 25685
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
25604: LD_ADDR_EXP 92
25608: PUSH
25609: LD_EXP 92
25613: PPUSH
25614: LD_EXP 92
25618: PUSH
25619: LD_INT 1
25621: PLUS
25622: PPUSH
25623: LD_VAR 0 1
25627: PPUSH
25628: CALL_OW 1
25632: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
25633: LD_ADDR_EXP 93
25637: PUSH
25638: LD_EXP 93
25642: PPUSH
25643: LD_EXP 93
25647: PUSH
25648: LD_INT 1
25650: PLUS
25651: PPUSH
25652: EMPTY
25653: PPUSH
25654: CALL_OW 1
25658: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
25659: LD_ADDR_EXP 96
25663: PUSH
25664: LD_EXP 96
25668: PPUSH
25669: LD_EXP 96
25673: PUSH
25674: LD_INT 1
25676: PLUS
25677: PPUSH
25678: EMPTY
25679: PPUSH
25680: CALL_OW 1
25684: ST_TO_ADDR
// end ; if not IsOk ( i ) then
25685: LD_VAR 0 1
25689: PPUSH
25690: CALL_OW 302
25694: NOT
25695: IFFALSE 25708
// begin HackUnlinkAll ( i ) ;
25697: LD_VAR 0 1
25701: PPUSH
25702: CALL 25814 0 1
// continue ;
25706: GO 25588
// end ; HackCheckCapturedStatus ( i ) ;
25708: LD_VAR 0 1
25712: PPUSH
25713: CALL 26257 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
25717: LD_ADDR_VAR 0 2
25721: PUSH
25722: LD_INT 81
25724: PUSH
25725: LD_VAR 0 1
25729: PPUSH
25730: CALL_OW 255
25734: PUSH
25735: EMPTY
25736: LIST
25737: LIST
25738: PUSH
25739: LD_INT 33
25741: PUSH
25742: LD_INT 3
25744: PUSH
25745: EMPTY
25746: LIST
25747: LIST
25748: PUSH
25749: LD_INT 91
25751: PUSH
25752: LD_VAR 0 1
25756: PUSH
25757: LD_EXP 95
25761: PUSH
25762: EMPTY
25763: LIST
25764: LIST
25765: LIST
25766: PUSH
25767: LD_INT 50
25769: PUSH
25770: EMPTY
25771: LIST
25772: PUSH
25773: EMPTY
25774: LIST
25775: LIST
25776: LIST
25777: LIST
25778: PPUSH
25779: CALL_OW 69
25783: ST_TO_ADDR
// if not tmp then
25784: LD_VAR 0 2
25788: NOT
25789: IFFALSE 25793
// continue ;
25791: GO 25588
// HackLink ( i , tmp ) ;
25793: LD_VAR 0 1
25797: PPUSH
25798: LD_VAR 0 2
25802: PPUSH
25803: CALL 25950 0 2
// end ;
25807: GO 25588
25809: POP
25810: POP
// end ;
25811: PPOPN 2
25813: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
25814: LD_INT 0
25816: PPUSH
25817: PPUSH
25818: PPUSH
// if not hack in hackTanks then
25819: LD_VAR 0 1
25823: PUSH
25824: LD_EXP 92
25828: IN
25829: NOT
25830: IFFALSE 25834
// exit ;
25832: GO 25945
// index := GetElementIndex ( hackTanks , hack ) ;
25834: LD_ADDR_VAR 0 4
25838: PUSH
25839: LD_EXP 92
25843: PPUSH
25844: LD_VAR 0 1
25848: PPUSH
25849: CALL 31365 0 2
25853: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
25854: LD_EXP 93
25858: PUSH
25859: LD_VAR 0 4
25863: ARRAY
25864: IFFALSE 25945
// begin for i in hackTanksCaptured [ index ] do
25866: LD_ADDR_VAR 0 3
25870: PUSH
25871: LD_EXP 93
25875: PUSH
25876: LD_VAR 0 4
25880: ARRAY
25881: PUSH
25882: FOR_IN
25883: IFFALSE 25909
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
25885: LD_VAR 0 3
25889: PUSH
25890: LD_INT 1
25892: ARRAY
25893: PPUSH
25894: LD_VAR 0 3
25898: PUSH
25899: LD_INT 2
25901: ARRAY
25902: PPUSH
25903: CALL_OW 235
25907: GO 25882
25909: POP
25910: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
25911: LD_ADDR_EXP 93
25915: PUSH
25916: LD_EXP 93
25920: PPUSH
25921: LD_VAR 0 4
25925: PPUSH
25926: EMPTY
25927: PPUSH
25928: CALL_OW 1
25932: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
25933: LD_VAR 0 1
25937: PPUSH
25938: LD_INT 0
25940: PPUSH
25941: CALL_OW 505
// end ; end ;
25945: LD_VAR 0 2
25949: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
25950: LD_INT 0
25952: PPUSH
25953: PPUSH
25954: PPUSH
// if not hack in hackTanks or not vehicles then
25955: LD_VAR 0 1
25959: PUSH
25960: LD_EXP 92
25964: IN
25965: NOT
25966: PUSH
25967: LD_VAR 0 2
25971: NOT
25972: OR
25973: IFFALSE 25977
// exit ;
25975: GO 26252
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
25977: LD_ADDR_VAR 0 2
25981: PUSH
25982: LD_VAR 0 1
25986: PPUSH
25987: LD_VAR 0 2
25991: PPUSH
25992: LD_INT 1
25994: PPUSH
25995: LD_INT 1
25997: PPUSH
25998: CALL 32015 0 4
26002: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
26003: LD_ADDR_VAR 0 5
26007: PUSH
26008: LD_EXP 92
26012: PPUSH
26013: LD_VAR 0 1
26017: PPUSH
26018: CALL 31365 0 2
26022: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
26023: LD_EXP 93
26027: PUSH
26028: LD_VAR 0 5
26032: ARRAY
26033: PUSH
26034: LD_EXP 94
26038: LESS
26039: IFFALSE 26228
// begin for i := 1 to vehicles do
26041: LD_ADDR_VAR 0 4
26045: PUSH
26046: DOUBLE
26047: LD_INT 1
26049: DEC
26050: ST_TO_ADDR
26051: LD_VAR 0 2
26055: PUSH
26056: FOR_TO
26057: IFFALSE 26226
// begin if hackTanksCaptured [ index ] = hackLimit then
26059: LD_EXP 93
26063: PUSH
26064: LD_VAR 0 5
26068: ARRAY
26069: PUSH
26070: LD_EXP 94
26074: EQUAL
26075: IFFALSE 26079
// break ;
26077: GO 26226
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
26079: LD_ADDR_EXP 96
26083: PUSH
26084: LD_EXP 96
26088: PPUSH
26089: LD_VAR 0 5
26093: PPUSH
26094: LD_EXP 96
26098: PUSH
26099: LD_VAR 0 5
26103: ARRAY
26104: PUSH
26105: LD_INT 1
26107: PLUS
26108: PPUSH
26109: CALL_OW 1
26113: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
26114: LD_ADDR_EXP 93
26118: PUSH
26119: LD_EXP 93
26123: PPUSH
26124: LD_VAR 0 5
26128: PUSH
26129: LD_EXP 93
26133: PUSH
26134: LD_VAR 0 5
26138: ARRAY
26139: PUSH
26140: LD_INT 1
26142: PLUS
26143: PUSH
26144: EMPTY
26145: LIST
26146: LIST
26147: PPUSH
26148: LD_VAR 0 2
26152: PUSH
26153: LD_VAR 0 4
26157: ARRAY
26158: PUSH
26159: LD_VAR 0 2
26163: PUSH
26164: LD_VAR 0 4
26168: ARRAY
26169: PPUSH
26170: CALL_OW 255
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: PPUSH
26179: CALL 31580 0 3
26183: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
26184: LD_VAR 0 2
26188: PUSH
26189: LD_VAR 0 4
26193: ARRAY
26194: PPUSH
26195: LD_VAR 0 1
26199: PPUSH
26200: CALL_OW 255
26204: PPUSH
26205: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
26209: LD_VAR 0 2
26213: PUSH
26214: LD_VAR 0 4
26218: ARRAY
26219: PPUSH
26220: CALL_OW 141
// end ;
26224: GO 26056
26226: POP
26227: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26228: LD_VAR 0 1
26232: PPUSH
26233: LD_EXP 93
26237: PUSH
26238: LD_VAR 0 5
26242: ARRAY
26243: PUSH
26244: LD_INT 0
26246: PLUS
26247: PPUSH
26248: CALL_OW 505
// end ;
26252: LD_VAR 0 3
26256: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
26257: LD_INT 0
26259: PPUSH
26260: PPUSH
26261: PPUSH
26262: PPUSH
// if not hack in hackTanks then
26263: LD_VAR 0 1
26267: PUSH
26268: LD_EXP 92
26272: IN
26273: NOT
26274: IFFALSE 26278
// exit ;
26276: GO 26518
// index := GetElementIndex ( hackTanks , hack ) ;
26278: LD_ADDR_VAR 0 4
26282: PUSH
26283: LD_EXP 92
26287: PPUSH
26288: LD_VAR 0 1
26292: PPUSH
26293: CALL 31365 0 2
26297: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
26298: LD_ADDR_VAR 0 3
26302: PUSH
26303: DOUBLE
26304: LD_EXP 93
26308: PUSH
26309: LD_VAR 0 4
26313: ARRAY
26314: INC
26315: ST_TO_ADDR
26316: LD_INT 1
26318: PUSH
26319: FOR_DOWNTO
26320: IFFALSE 26492
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
26322: LD_ADDR_VAR 0 5
26326: PUSH
26327: LD_EXP 93
26331: PUSH
26332: LD_VAR 0 4
26336: ARRAY
26337: PUSH
26338: LD_VAR 0 3
26342: ARRAY
26343: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
26344: LD_VAR 0 5
26348: PUSH
26349: LD_INT 1
26351: ARRAY
26352: PPUSH
26353: CALL_OW 302
26357: NOT
26358: PUSH
26359: LD_VAR 0 5
26363: PUSH
26364: LD_INT 1
26366: ARRAY
26367: PPUSH
26368: CALL_OW 255
26372: PUSH
26373: LD_VAR 0 1
26377: PPUSH
26378: CALL_OW 255
26382: NONEQUAL
26383: OR
26384: IFFALSE 26490
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
26386: LD_VAR 0 5
26390: PUSH
26391: LD_INT 1
26393: ARRAY
26394: PPUSH
26395: CALL_OW 305
26399: PUSH
26400: LD_VAR 0 5
26404: PUSH
26405: LD_INT 1
26407: ARRAY
26408: PPUSH
26409: CALL_OW 255
26413: PUSH
26414: LD_VAR 0 1
26418: PPUSH
26419: CALL_OW 255
26423: EQUAL
26424: AND
26425: IFFALSE 26449
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
26427: LD_VAR 0 5
26431: PUSH
26432: LD_INT 1
26434: ARRAY
26435: PPUSH
26436: LD_VAR 0 5
26440: PUSH
26441: LD_INT 2
26443: ARRAY
26444: PPUSH
26445: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
26449: LD_ADDR_EXP 93
26453: PUSH
26454: LD_EXP 93
26458: PPUSH
26459: LD_VAR 0 4
26463: PPUSH
26464: LD_EXP 93
26468: PUSH
26469: LD_VAR 0 4
26473: ARRAY
26474: PPUSH
26475: LD_VAR 0 3
26479: PPUSH
26480: CALL_OW 3
26484: PPUSH
26485: CALL_OW 1
26489: ST_TO_ADDR
// end ; end ;
26490: GO 26319
26492: POP
26493: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
26494: LD_VAR 0 1
26498: PPUSH
26499: LD_EXP 93
26503: PUSH
26504: LD_VAR 0 4
26508: ARRAY
26509: PUSH
26510: LD_INT 0
26512: PLUS
26513: PPUSH
26514: CALL_OW 505
// end ;
26518: LD_VAR 0 2
26522: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
26523: LD_INT 0
26525: PPUSH
26526: PPUSH
26527: PPUSH
26528: PPUSH
// if not hack in hackTanks then
26529: LD_VAR 0 1
26533: PUSH
26534: LD_EXP 92
26538: IN
26539: NOT
26540: IFFALSE 26544
// exit ;
26542: GO 26629
// index := GetElementIndex ( hackTanks , hack ) ;
26544: LD_ADDR_VAR 0 5
26548: PUSH
26549: LD_EXP 92
26553: PPUSH
26554: LD_VAR 0 1
26558: PPUSH
26559: CALL 31365 0 2
26563: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
26564: LD_ADDR_VAR 0 4
26568: PUSH
26569: DOUBLE
26570: LD_INT 1
26572: DEC
26573: ST_TO_ADDR
26574: LD_EXP 93
26578: PUSH
26579: LD_VAR 0 5
26583: ARRAY
26584: PUSH
26585: FOR_TO
26586: IFFALSE 26627
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
26588: LD_EXP 93
26592: PUSH
26593: LD_VAR 0 5
26597: ARRAY
26598: PUSH
26599: LD_VAR 0 4
26603: ARRAY
26604: PUSH
26605: LD_INT 1
26607: ARRAY
26608: PUSH
26609: LD_VAR 0 2
26613: EQUAL
26614: IFFALSE 26625
// KillUnit ( vehicle ) ;
26616: LD_VAR 0 2
26620: PPUSH
26621: CALL_OW 66
26625: GO 26585
26627: POP
26628: POP
// end ; end_of_file
26629: LD_VAR 0 3
26633: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
26634: LD_INT 0
26636: PPUSH
26637: PPUSH
// if exist_mode then
26638: LD_VAR 0 2
26642: IFFALSE 26667
// unit := CreateCharacter ( prefix & ident ) else
26644: LD_ADDR_VAR 0 5
26648: PUSH
26649: LD_VAR 0 3
26653: PUSH
26654: LD_VAR 0 1
26658: STR
26659: PPUSH
26660: CALL_OW 34
26664: ST_TO_ADDR
26665: GO 26682
// unit := NewCharacter ( ident ) ;
26667: LD_ADDR_VAR 0 5
26671: PUSH
26672: LD_VAR 0 1
26676: PPUSH
26677: CALL_OW 25
26681: ST_TO_ADDR
// result := unit ;
26682: LD_ADDR_VAR 0 4
26686: PUSH
26687: LD_VAR 0 5
26691: ST_TO_ADDR
// end ;
26692: LD_VAR 0 4
26696: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
26697: LD_INT 0
26699: PPUSH
26700: PPUSH
// if not side or not nation then
26701: LD_VAR 0 1
26705: NOT
26706: PUSH
26707: LD_VAR 0 2
26711: NOT
26712: OR
26713: IFFALSE 26717
// exit ;
26715: GO 27481
// case nation of nation_american :
26717: LD_VAR 0 2
26721: PUSH
26722: LD_INT 1
26724: DOUBLE
26725: EQUAL
26726: IFTRUE 26730
26728: GO 26944
26730: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
26731: LD_ADDR_VAR 0 4
26735: PUSH
26736: LD_INT 35
26738: PUSH
26739: LD_INT 45
26741: PUSH
26742: LD_INT 46
26744: PUSH
26745: LD_INT 47
26747: PUSH
26748: LD_INT 82
26750: PUSH
26751: LD_INT 83
26753: PUSH
26754: LD_INT 84
26756: PUSH
26757: LD_INT 85
26759: PUSH
26760: LD_INT 86
26762: PUSH
26763: LD_INT 1
26765: PUSH
26766: LD_INT 2
26768: PUSH
26769: LD_INT 6
26771: PUSH
26772: LD_INT 15
26774: PUSH
26775: LD_INT 16
26777: PUSH
26778: LD_INT 7
26780: PUSH
26781: LD_INT 12
26783: PUSH
26784: LD_INT 13
26786: PUSH
26787: LD_INT 10
26789: PUSH
26790: LD_INT 14
26792: PUSH
26793: LD_INT 20
26795: PUSH
26796: LD_INT 21
26798: PUSH
26799: LD_INT 22
26801: PUSH
26802: LD_INT 25
26804: PUSH
26805: LD_INT 32
26807: PUSH
26808: LD_INT 27
26810: PUSH
26811: LD_INT 36
26813: PUSH
26814: LD_INT 69
26816: PUSH
26817: LD_INT 39
26819: PUSH
26820: LD_INT 34
26822: PUSH
26823: LD_INT 40
26825: PUSH
26826: LD_INT 48
26828: PUSH
26829: LD_INT 49
26831: PUSH
26832: LD_INT 50
26834: PUSH
26835: LD_INT 51
26837: PUSH
26838: LD_INT 52
26840: PUSH
26841: LD_INT 53
26843: PUSH
26844: LD_INT 54
26846: PUSH
26847: LD_INT 55
26849: PUSH
26850: LD_INT 56
26852: PUSH
26853: LD_INT 57
26855: PUSH
26856: LD_INT 58
26858: PUSH
26859: LD_INT 59
26861: PUSH
26862: LD_INT 60
26864: PUSH
26865: LD_INT 61
26867: PUSH
26868: LD_INT 62
26870: PUSH
26871: LD_INT 80
26873: PUSH
26874: LD_INT 82
26876: PUSH
26877: LD_INT 83
26879: PUSH
26880: LD_INT 84
26882: PUSH
26883: LD_INT 85
26885: PUSH
26886: LD_INT 86
26888: PUSH
26889: EMPTY
26890: LIST
26891: LIST
26892: LIST
26893: LIST
26894: LIST
26895: LIST
26896: LIST
26897: LIST
26898: LIST
26899: LIST
26900: LIST
26901: LIST
26902: LIST
26903: LIST
26904: LIST
26905: LIST
26906: LIST
26907: LIST
26908: LIST
26909: LIST
26910: LIST
26911: LIST
26912: LIST
26913: LIST
26914: LIST
26915: LIST
26916: LIST
26917: LIST
26918: LIST
26919: LIST
26920: LIST
26921: LIST
26922: LIST
26923: LIST
26924: LIST
26925: LIST
26926: LIST
26927: LIST
26928: LIST
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: LIST
26935: LIST
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: LIST
26941: ST_TO_ADDR
26942: GO 27405
26944: LD_INT 2
26946: DOUBLE
26947: EQUAL
26948: IFTRUE 26952
26950: GO 27174
26952: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
26953: LD_ADDR_VAR 0 4
26957: PUSH
26958: LD_INT 35
26960: PUSH
26961: LD_INT 45
26963: PUSH
26964: LD_INT 46
26966: PUSH
26967: LD_INT 47
26969: PUSH
26970: LD_INT 82
26972: PUSH
26973: LD_INT 83
26975: PUSH
26976: LD_INT 84
26978: PUSH
26979: LD_INT 85
26981: PUSH
26982: LD_INT 87
26984: PUSH
26985: LD_INT 70
26987: PUSH
26988: LD_INT 1
26990: PUSH
26991: LD_INT 11
26993: PUSH
26994: LD_INT 3
26996: PUSH
26997: LD_INT 4
26999: PUSH
27000: LD_INT 5
27002: PUSH
27003: LD_INT 6
27005: PUSH
27006: LD_INT 15
27008: PUSH
27009: LD_INT 18
27011: PUSH
27012: LD_INT 7
27014: PUSH
27015: LD_INT 17
27017: PUSH
27018: LD_INT 8
27020: PUSH
27021: LD_INT 20
27023: PUSH
27024: LD_INT 21
27026: PUSH
27027: LD_INT 22
27029: PUSH
27030: LD_INT 72
27032: PUSH
27033: LD_INT 26
27035: PUSH
27036: LD_INT 69
27038: PUSH
27039: LD_INT 39
27041: PUSH
27042: LD_INT 40
27044: PUSH
27045: LD_INT 41
27047: PUSH
27048: LD_INT 42
27050: PUSH
27051: LD_INT 43
27053: PUSH
27054: LD_INT 48
27056: PUSH
27057: LD_INT 49
27059: PUSH
27060: LD_INT 50
27062: PUSH
27063: LD_INT 51
27065: PUSH
27066: LD_INT 52
27068: PUSH
27069: LD_INT 53
27071: PUSH
27072: LD_INT 54
27074: PUSH
27075: LD_INT 55
27077: PUSH
27078: LD_INT 56
27080: PUSH
27081: LD_INT 60
27083: PUSH
27084: LD_INT 61
27086: PUSH
27087: LD_INT 62
27089: PUSH
27090: LD_INT 66
27092: PUSH
27093: LD_INT 67
27095: PUSH
27096: LD_INT 68
27098: PUSH
27099: LD_INT 81
27101: PUSH
27102: LD_INT 82
27104: PUSH
27105: LD_INT 83
27107: PUSH
27108: LD_INT 84
27110: PUSH
27111: LD_INT 85
27113: PUSH
27114: LD_INT 87
27116: PUSH
27117: EMPTY
27118: LIST
27119: LIST
27120: LIST
27121: LIST
27122: LIST
27123: LIST
27124: LIST
27125: LIST
27126: LIST
27127: LIST
27128: LIST
27129: LIST
27130: LIST
27131: LIST
27132: LIST
27133: LIST
27134: LIST
27135: LIST
27136: LIST
27137: LIST
27138: LIST
27139: LIST
27140: LIST
27141: LIST
27142: LIST
27143: LIST
27144: LIST
27145: LIST
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: LIST
27151: LIST
27152: LIST
27153: LIST
27154: LIST
27155: LIST
27156: LIST
27157: LIST
27158: LIST
27159: LIST
27160: LIST
27161: LIST
27162: LIST
27163: LIST
27164: LIST
27165: LIST
27166: LIST
27167: LIST
27168: LIST
27169: LIST
27170: LIST
27171: ST_TO_ADDR
27172: GO 27405
27174: LD_INT 3
27176: DOUBLE
27177: EQUAL
27178: IFTRUE 27182
27180: GO 27404
27182: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
27183: LD_ADDR_VAR 0 4
27187: PUSH
27188: LD_INT 46
27190: PUSH
27191: LD_INT 47
27193: PUSH
27194: LD_INT 1
27196: PUSH
27197: LD_INT 2
27199: PUSH
27200: LD_INT 82
27202: PUSH
27203: LD_INT 83
27205: PUSH
27206: LD_INT 84
27208: PUSH
27209: LD_INT 85
27211: PUSH
27212: LD_INT 86
27214: PUSH
27215: LD_INT 11
27217: PUSH
27218: LD_INT 9
27220: PUSH
27221: LD_INT 20
27223: PUSH
27224: LD_INT 19
27226: PUSH
27227: LD_INT 21
27229: PUSH
27230: LD_INT 24
27232: PUSH
27233: LD_INT 22
27235: PUSH
27236: LD_INT 25
27238: PUSH
27239: LD_INT 28
27241: PUSH
27242: LD_INT 29
27244: PUSH
27245: LD_INT 30
27247: PUSH
27248: LD_INT 31
27250: PUSH
27251: LD_INT 37
27253: PUSH
27254: LD_INT 38
27256: PUSH
27257: LD_INT 32
27259: PUSH
27260: LD_INT 27
27262: PUSH
27263: LD_INT 33
27265: PUSH
27266: LD_INT 69
27268: PUSH
27269: LD_INT 39
27271: PUSH
27272: LD_INT 34
27274: PUSH
27275: LD_INT 40
27277: PUSH
27278: LD_INT 71
27280: PUSH
27281: LD_INT 23
27283: PUSH
27284: LD_INT 44
27286: PUSH
27287: LD_INT 48
27289: PUSH
27290: LD_INT 49
27292: PUSH
27293: LD_INT 50
27295: PUSH
27296: LD_INT 51
27298: PUSH
27299: LD_INT 52
27301: PUSH
27302: LD_INT 53
27304: PUSH
27305: LD_INT 54
27307: PUSH
27308: LD_INT 55
27310: PUSH
27311: LD_INT 56
27313: PUSH
27314: LD_INT 57
27316: PUSH
27317: LD_INT 58
27319: PUSH
27320: LD_INT 59
27322: PUSH
27323: LD_INT 63
27325: PUSH
27326: LD_INT 64
27328: PUSH
27329: LD_INT 65
27331: PUSH
27332: LD_INT 82
27334: PUSH
27335: LD_INT 83
27337: PUSH
27338: LD_INT 84
27340: PUSH
27341: LD_INT 85
27343: PUSH
27344: LD_INT 86
27346: PUSH
27347: EMPTY
27348: LIST
27349: LIST
27350: LIST
27351: LIST
27352: LIST
27353: LIST
27354: LIST
27355: LIST
27356: LIST
27357: LIST
27358: LIST
27359: LIST
27360: LIST
27361: LIST
27362: LIST
27363: LIST
27364: LIST
27365: LIST
27366: LIST
27367: LIST
27368: LIST
27369: LIST
27370: LIST
27371: LIST
27372: LIST
27373: LIST
27374: LIST
27375: LIST
27376: LIST
27377: LIST
27378: LIST
27379: LIST
27380: LIST
27381: LIST
27382: LIST
27383: LIST
27384: LIST
27385: LIST
27386: LIST
27387: LIST
27388: LIST
27389: LIST
27390: LIST
27391: LIST
27392: LIST
27393: LIST
27394: LIST
27395: LIST
27396: LIST
27397: LIST
27398: LIST
27399: LIST
27400: LIST
27401: ST_TO_ADDR
27402: GO 27405
27404: POP
// if state > - 1 and state < 3 then
27405: LD_VAR 0 3
27409: PUSH
27410: LD_INT 1
27412: NEG
27413: GREATER
27414: PUSH
27415: LD_VAR 0 3
27419: PUSH
27420: LD_INT 3
27422: LESS
27423: AND
27424: IFFALSE 27481
// for i in result do
27426: LD_ADDR_VAR 0 5
27430: PUSH
27431: LD_VAR 0 4
27435: PUSH
27436: FOR_IN
27437: IFFALSE 27479
// if GetTech ( i , side ) <> state then
27439: LD_VAR 0 5
27443: PPUSH
27444: LD_VAR 0 1
27448: PPUSH
27449: CALL_OW 321
27453: PUSH
27454: LD_VAR 0 3
27458: NONEQUAL
27459: IFFALSE 27477
// result := result diff i ;
27461: LD_ADDR_VAR 0 4
27465: PUSH
27466: LD_VAR 0 4
27470: PUSH
27471: LD_VAR 0 5
27475: DIFF
27476: ST_TO_ADDR
27477: GO 27436
27479: POP
27480: POP
// end ;
27481: LD_VAR 0 4
27485: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
27486: LD_INT 0
27488: PPUSH
27489: PPUSH
27490: PPUSH
// result := true ;
27491: LD_ADDR_VAR 0 3
27495: PUSH
27496: LD_INT 1
27498: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
27499: LD_ADDR_VAR 0 5
27503: PUSH
27504: LD_VAR 0 2
27508: PPUSH
27509: CALL_OW 480
27513: ST_TO_ADDR
// if not tmp then
27514: LD_VAR 0 5
27518: NOT
27519: IFFALSE 27523
// exit ;
27521: GO 27572
// for i in tmp do
27523: LD_ADDR_VAR 0 4
27527: PUSH
27528: LD_VAR 0 5
27532: PUSH
27533: FOR_IN
27534: IFFALSE 27570
// if GetTech ( i , side ) <> state_researched then
27536: LD_VAR 0 4
27540: PPUSH
27541: LD_VAR 0 1
27545: PPUSH
27546: CALL_OW 321
27550: PUSH
27551: LD_INT 2
27553: NONEQUAL
27554: IFFALSE 27568
// begin result := false ;
27556: LD_ADDR_VAR 0 3
27560: PUSH
27561: LD_INT 0
27563: ST_TO_ADDR
// exit ;
27564: POP
27565: POP
27566: GO 27572
// end ;
27568: GO 27533
27570: POP
27571: POP
// end ;
27572: LD_VAR 0 3
27576: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
27577: LD_INT 0
27579: PPUSH
27580: PPUSH
27581: PPUSH
27582: PPUSH
27583: PPUSH
27584: PPUSH
27585: PPUSH
27586: PPUSH
27587: PPUSH
27588: PPUSH
27589: PPUSH
27590: PPUSH
27591: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
27592: LD_VAR 0 1
27596: NOT
27597: PUSH
27598: LD_VAR 0 1
27602: PPUSH
27603: CALL_OW 257
27607: PUSH
27608: LD_INT 9
27610: NONEQUAL
27611: OR
27612: IFFALSE 27616
// exit ;
27614: GO 28189
// side := GetSide ( unit ) ;
27616: LD_ADDR_VAR 0 9
27620: PUSH
27621: LD_VAR 0 1
27625: PPUSH
27626: CALL_OW 255
27630: ST_TO_ADDR
// tech_space := tech_spacanom ;
27631: LD_ADDR_VAR 0 12
27635: PUSH
27636: LD_INT 29
27638: ST_TO_ADDR
// tech_time := tech_taurad ;
27639: LD_ADDR_VAR 0 13
27643: PUSH
27644: LD_INT 28
27646: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
27647: LD_ADDR_VAR 0 11
27651: PUSH
27652: LD_VAR 0 1
27656: PPUSH
27657: CALL_OW 310
27661: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
27662: LD_VAR 0 11
27666: PPUSH
27667: CALL_OW 247
27671: PUSH
27672: LD_INT 2
27674: EQUAL
27675: IFFALSE 27679
// exit ;
27677: GO 28189
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27679: LD_ADDR_VAR 0 8
27683: PUSH
27684: LD_INT 81
27686: PUSH
27687: LD_VAR 0 9
27691: PUSH
27692: EMPTY
27693: LIST
27694: LIST
27695: PUSH
27696: LD_INT 3
27698: PUSH
27699: LD_INT 21
27701: PUSH
27702: LD_INT 3
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: PUSH
27709: EMPTY
27710: LIST
27711: LIST
27712: PUSH
27713: EMPTY
27714: LIST
27715: LIST
27716: PPUSH
27717: CALL_OW 69
27721: ST_TO_ADDR
// if not tmp then
27722: LD_VAR 0 8
27726: NOT
27727: IFFALSE 27731
// exit ;
27729: GO 28189
// if in_unit then
27731: LD_VAR 0 11
27735: IFFALSE 27759
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
27737: LD_ADDR_VAR 0 10
27741: PUSH
27742: LD_VAR 0 8
27746: PPUSH
27747: LD_VAR 0 11
27751: PPUSH
27752: CALL_OW 74
27756: ST_TO_ADDR
27757: GO 27779
// enemy := NearestUnitToUnit ( tmp , unit ) ;
27759: LD_ADDR_VAR 0 10
27763: PUSH
27764: LD_VAR 0 8
27768: PPUSH
27769: LD_VAR 0 1
27773: PPUSH
27774: CALL_OW 74
27778: ST_TO_ADDR
// if not enemy then
27779: LD_VAR 0 10
27783: NOT
27784: IFFALSE 27788
// exit ;
27786: GO 28189
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
27788: LD_VAR 0 11
27792: PUSH
27793: LD_VAR 0 11
27797: PPUSH
27798: LD_VAR 0 10
27802: PPUSH
27803: CALL_OW 296
27807: PUSH
27808: LD_INT 13
27810: GREATER
27811: AND
27812: PUSH
27813: LD_VAR 0 1
27817: PPUSH
27818: LD_VAR 0 10
27822: PPUSH
27823: CALL_OW 296
27827: PUSH
27828: LD_INT 12
27830: GREATER
27831: OR
27832: IFFALSE 27836
// exit ;
27834: GO 28189
// missile := [ 1 ] ;
27836: LD_ADDR_VAR 0 14
27840: PUSH
27841: LD_INT 1
27843: PUSH
27844: EMPTY
27845: LIST
27846: ST_TO_ADDR
// if Researched ( side , tech_space ) then
27847: LD_VAR 0 9
27851: PPUSH
27852: LD_VAR 0 12
27856: PPUSH
27857: CALL_OW 325
27861: IFFALSE 27890
// missile := Insert ( missile , missile + 1 , 2 ) ;
27863: LD_ADDR_VAR 0 14
27867: PUSH
27868: LD_VAR 0 14
27872: PPUSH
27873: LD_VAR 0 14
27877: PUSH
27878: LD_INT 1
27880: PLUS
27881: PPUSH
27882: LD_INT 2
27884: PPUSH
27885: CALL_OW 2
27889: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
27890: LD_VAR 0 9
27894: PPUSH
27895: LD_VAR 0 13
27899: PPUSH
27900: CALL_OW 325
27904: PUSH
27905: LD_VAR 0 10
27909: PPUSH
27910: CALL_OW 255
27914: PPUSH
27915: LD_VAR 0 13
27919: PPUSH
27920: CALL_OW 325
27924: NOT
27925: AND
27926: IFFALSE 27955
// missile := Insert ( missile , missile + 1 , 3 ) ;
27928: LD_ADDR_VAR 0 14
27932: PUSH
27933: LD_VAR 0 14
27937: PPUSH
27938: LD_VAR 0 14
27942: PUSH
27943: LD_INT 1
27945: PLUS
27946: PPUSH
27947: LD_INT 3
27949: PPUSH
27950: CALL_OW 2
27954: ST_TO_ADDR
// if missile < 2 then
27955: LD_VAR 0 14
27959: PUSH
27960: LD_INT 2
27962: LESS
27963: IFFALSE 27967
// exit ;
27965: GO 28189
// x := GetX ( enemy ) ;
27967: LD_ADDR_VAR 0 4
27971: PUSH
27972: LD_VAR 0 10
27976: PPUSH
27977: CALL_OW 250
27981: ST_TO_ADDR
// y := GetY ( enemy ) ;
27982: LD_ADDR_VAR 0 5
27986: PUSH
27987: LD_VAR 0 10
27991: PPUSH
27992: CALL_OW 251
27996: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
27997: LD_ADDR_VAR 0 6
28001: PUSH
28002: LD_VAR 0 4
28006: PUSH
28007: LD_INT 1
28009: NEG
28010: PPUSH
28011: LD_INT 1
28013: PPUSH
28014: CALL_OW 12
28018: PLUS
28019: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28020: LD_ADDR_VAR 0 7
28024: PUSH
28025: LD_VAR 0 5
28029: PUSH
28030: LD_INT 1
28032: NEG
28033: PPUSH
28034: LD_INT 1
28036: PPUSH
28037: CALL_OW 12
28041: PLUS
28042: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28043: LD_VAR 0 6
28047: PPUSH
28048: LD_VAR 0 7
28052: PPUSH
28053: CALL_OW 488
28057: NOT
28058: IFFALSE 28080
// begin _x := x ;
28060: LD_ADDR_VAR 0 6
28064: PUSH
28065: LD_VAR 0 4
28069: ST_TO_ADDR
// _y := y ;
28070: LD_ADDR_VAR 0 7
28074: PUSH
28075: LD_VAR 0 5
28079: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28080: LD_ADDR_VAR 0 3
28084: PUSH
28085: LD_INT 1
28087: PPUSH
28088: LD_VAR 0 14
28092: PPUSH
28093: CALL_OW 12
28097: ST_TO_ADDR
// case i of 1 :
28098: LD_VAR 0 3
28102: PUSH
28103: LD_INT 1
28105: DOUBLE
28106: EQUAL
28107: IFTRUE 28111
28109: GO 28128
28111: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28112: LD_VAR 0 1
28116: PPUSH
28117: LD_VAR 0 10
28121: PPUSH
28122: CALL_OW 115
28126: GO 28189
28128: LD_INT 2
28130: DOUBLE
28131: EQUAL
28132: IFTRUE 28136
28134: GO 28158
28136: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28137: LD_VAR 0 1
28141: PPUSH
28142: LD_VAR 0 6
28146: PPUSH
28147: LD_VAR 0 7
28151: PPUSH
28152: CALL_OW 153
28156: GO 28189
28158: LD_INT 3
28160: DOUBLE
28161: EQUAL
28162: IFTRUE 28166
28164: GO 28188
28166: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28167: LD_VAR 0 1
28171: PPUSH
28172: LD_VAR 0 6
28176: PPUSH
28177: LD_VAR 0 7
28181: PPUSH
28182: CALL_OW 154
28186: GO 28189
28188: POP
// end ;
28189: LD_VAR 0 2
28193: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28194: LD_INT 0
28196: PPUSH
28197: PPUSH
28198: PPUSH
28199: PPUSH
28200: PPUSH
28201: PPUSH
// if not unit or not building then
28202: LD_VAR 0 1
28206: NOT
28207: PUSH
28208: LD_VAR 0 2
28212: NOT
28213: OR
28214: IFFALSE 28218
// exit ;
28216: GO 28376
// x := GetX ( building ) ;
28218: LD_ADDR_VAR 0 5
28222: PUSH
28223: LD_VAR 0 2
28227: PPUSH
28228: CALL_OW 250
28232: ST_TO_ADDR
// y := GetY ( building ) ;
28233: LD_ADDR_VAR 0 6
28237: PUSH
28238: LD_VAR 0 2
28242: PPUSH
28243: CALL_OW 251
28247: ST_TO_ADDR
// for i = 0 to 5 do
28248: LD_ADDR_VAR 0 4
28252: PUSH
28253: DOUBLE
28254: LD_INT 0
28256: DEC
28257: ST_TO_ADDR
28258: LD_INT 5
28260: PUSH
28261: FOR_TO
28262: IFFALSE 28374
// begin _x := ShiftX ( x , i , 3 ) ;
28264: LD_ADDR_VAR 0 7
28268: PUSH
28269: LD_VAR 0 5
28273: PPUSH
28274: LD_VAR 0 4
28278: PPUSH
28279: LD_INT 3
28281: PPUSH
28282: CALL_OW 272
28286: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28287: LD_ADDR_VAR 0 8
28291: PUSH
28292: LD_VAR 0 6
28296: PPUSH
28297: LD_VAR 0 4
28301: PPUSH
28302: LD_INT 3
28304: PPUSH
28305: CALL_OW 273
28309: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28310: LD_VAR 0 7
28314: PPUSH
28315: LD_VAR 0 8
28319: PPUSH
28320: CALL_OW 488
28324: NOT
28325: IFFALSE 28329
// continue ;
28327: GO 28261
// if HexInfo ( _x , _y ) = 0 then
28329: LD_VAR 0 7
28333: PPUSH
28334: LD_VAR 0 8
28338: PPUSH
28339: CALL_OW 428
28343: PUSH
28344: LD_INT 0
28346: EQUAL
28347: IFFALSE 28372
// begin ComMoveXY ( unit , _x , _y ) ;
28349: LD_VAR 0 1
28353: PPUSH
28354: LD_VAR 0 7
28358: PPUSH
28359: LD_VAR 0 8
28363: PPUSH
28364: CALL_OW 111
// exit ;
28368: POP
28369: POP
28370: GO 28376
// end ; end ;
28372: GO 28261
28374: POP
28375: POP
// end ;
28376: LD_VAR 0 3
28380: RET
// export function ScanBase ( side , base_area ) ; begin
28381: LD_INT 0
28383: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28384: LD_ADDR_VAR 0 3
28388: PUSH
28389: LD_VAR 0 2
28393: PPUSH
28394: LD_INT 81
28396: PUSH
28397: LD_VAR 0 1
28401: PUSH
28402: EMPTY
28403: LIST
28404: LIST
28405: PPUSH
28406: CALL_OW 70
28410: ST_TO_ADDR
// end ;
28411: LD_VAR 0 3
28415: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
28416: LD_INT 0
28418: PPUSH
28419: PPUSH
28420: PPUSH
28421: PPUSH
// result := false ;
28422: LD_ADDR_VAR 0 2
28426: PUSH
28427: LD_INT 0
28429: ST_TO_ADDR
// side := GetSide ( unit ) ;
28430: LD_ADDR_VAR 0 3
28434: PUSH
28435: LD_VAR 0 1
28439: PPUSH
28440: CALL_OW 255
28444: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28445: LD_ADDR_VAR 0 4
28449: PUSH
28450: LD_VAR 0 1
28454: PPUSH
28455: CALL_OW 248
28459: ST_TO_ADDR
// case nat of 1 :
28460: LD_VAR 0 4
28464: PUSH
28465: LD_INT 1
28467: DOUBLE
28468: EQUAL
28469: IFTRUE 28473
28471: GO 28484
28473: POP
// tech := tech_lassight ; 2 :
28474: LD_ADDR_VAR 0 5
28478: PUSH
28479: LD_INT 12
28481: ST_TO_ADDR
28482: GO 28523
28484: LD_INT 2
28486: DOUBLE
28487: EQUAL
28488: IFTRUE 28492
28490: GO 28503
28492: POP
// tech := tech_mortar ; 3 :
28493: LD_ADDR_VAR 0 5
28497: PUSH
28498: LD_INT 41
28500: ST_TO_ADDR
28501: GO 28523
28503: LD_INT 3
28505: DOUBLE
28506: EQUAL
28507: IFTRUE 28511
28509: GO 28522
28511: POP
// tech := tech_bazooka ; end ;
28512: LD_ADDR_VAR 0 5
28516: PUSH
28517: LD_INT 44
28519: ST_TO_ADDR
28520: GO 28523
28522: POP
// if Researched ( side , tech ) then
28523: LD_VAR 0 3
28527: PPUSH
28528: LD_VAR 0 5
28532: PPUSH
28533: CALL_OW 325
28537: IFFALSE 28564
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
28539: LD_ADDR_VAR 0 2
28543: PUSH
28544: LD_INT 5
28546: PUSH
28547: LD_INT 8
28549: PUSH
28550: LD_INT 9
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: LIST
28557: PUSH
28558: LD_VAR 0 4
28562: ARRAY
28563: ST_TO_ADDR
// end ;
28564: LD_VAR 0 2
28568: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
28569: LD_INT 0
28571: PPUSH
28572: PPUSH
28573: PPUSH
// if not mines then
28574: LD_VAR 0 2
28578: NOT
28579: IFFALSE 28583
// exit ;
28581: GO 28727
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28583: LD_ADDR_VAR 0 5
28587: PUSH
28588: LD_INT 81
28590: PUSH
28591: LD_VAR 0 1
28595: PUSH
28596: EMPTY
28597: LIST
28598: LIST
28599: PUSH
28600: LD_INT 3
28602: PUSH
28603: LD_INT 21
28605: PUSH
28606: LD_INT 3
28608: PUSH
28609: EMPTY
28610: LIST
28611: LIST
28612: PUSH
28613: EMPTY
28614: LIST
28615: LIST
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: PPUSH
28621: CALL_OW 69
28625: ST_TO_ADDR
// for i in mines do
28626: LD_ADDR_VAR 0 4
28630: PUSH
28631: LD_VAR 0 2
28635: PUSH
28636: FOR_IN
28637: IFFALSE 28725
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
28639: LD_VAR 0 4
28643: PUSH
28644: LD_INT 1
28646: ARRAY
28647: PPUSH
28648: LD_VAR 0 4
28652: PUSH
28653: LD_INT 2
28655: ARRAY
28656: PPUSH
28657: CALL_OW 458
28661: NOT
28662: IFFALSE 28666
// continue ;
28664: GO 28636
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
28666: LD_VAR 0 4
28670: PUSH
28671: LD_INT 1
28673: ARRAY
28674: PPUSH
28675: LD_VAR 0 4
28679: PUSH
28680: LD_INT 2
28682: ARRAY
28683: PPUSH
28684: CALL_OW 428
28688: PUSH
28689: LD_VAR 0 5
28693: IN
28694: IFFALSE 28723
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
28696: LD_VAR 0 4
28700: PUSH
28701: LD_INT 1
28703: ARRAY
28704: PPUSH
28705: LD_VAR 0 4
28709: PUSH
28710: LD_INT 2
28712: ARRAY
28713: PPUSH
28714: LD_VAR 0 1
28718: PPUSH
28719: CALL_OW 456
// end ;
28723: GO 28636
28725: POP
28726: POP
// end ;
28727: LD_VAR 0 3
28731: RET
// export function Count ( array ) ; var i ; begin
28732: LD_INT 0
28734: PPUSH
28735: PPUSH
// result := 0 ;
28736: LD_ADDR_VAR 0 2
28740: PUSH
28741: LD_INT 0
28743: ST_TO_ADDR
// for i in array do
28744: LD_ADDR_VAR 0 3
28748: PUSH
28749: LD_VAR 0 1
28753: PUSH
28754: FOR_IN
28755: IFFALSE 28779
// if i then
28757: LD_VAR 0 3
28761: IFFALSE 28777
// result := result + 1 ;
28763: LD_ADDR_VAR 0 2
28767: PUSH
28768: LD_VAR 0 2
28772: PUSH
28773: LD_INT 1
28775: PLUS
28776: ST_TO_ADDR
28777: GO 28754
28779: POP
28780: POP
// end ;
28781: LD_VAR 0 2
28785: RET
// export function IsEmpty ( building ) ; begin
28786: LD_INT 0
28788: PPUSH
// if not building then
28789: LD_VAR 0 1
28793: NOT
28794: IFFALSE 28798
// exit ;
28796: GO 28841
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
28798: LD_ADDR_VAR 0 2
28802: PUSH
28803: LD_VAR 0 1
28807: PUSH
28808: LD_INT 22
28810: PUSH
28811: LD_VAR 0 1
28815: PPUSH
28816: CALL_OW 255
28820: PUSH
28821: EMPTY
28822: LIST
28823: LIST
28824: PUSH
28825: LD_INT 58
28827: PUSH
28828: EMPTY
28829: LIST
28830: PUSH
28831: EMPTY
28832: LIST
28833: LIST
28834: PPUSH
28835: CALL_OW 69
28839: IN
28840: ST_TO_ADDR
// end ;
28841: LD_VAR 0 2
28845: RET
// export function IsNotFull ( building ) ; begin
28846: LD_INT 0
28848: PPUSH
// if not building then
28849: LD_VAR 0 1
28853: NOT
28854: IFFALSE 28858
// exit ;
28856: GO 28877
// result := UnitsInside ( building ) < 6 ;
28858: LD_ADDR_VAR 0 2
28862: PUSH
28863: LD_VAR 0 1
28867: PPUSH
28868: CALL_OW 313
28872: PUSH
28873: LD_INT 6
28875: LESS
28876: ST_TO_ADDR
// end ;
28877: LD_VAR 0 2
28881: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
28882: LD_INT 0
28884: PPUSH
28885: PPUSH
28886: PPUSH
28887: PPUSH
// tmp := [ ] ;
28888: LD_ADDR_VAR 0 3
28892: PUSH
28893: EMPTY
28894: ST_TO_ADDR
// list := [ ] ;
28895: LD_ADDR_VAR 0 5
28899: PUSH
28900: EMPTY
28901: ST_TO_ADDR
// for i = 16 to 25 do
28902: LD_ADDR_VAR 0 4
28906: PUSH
28907: DOUBLE
28908: LD_INT 16
28910: DEC
28911: ST_TO_ADDR
28912: LD_INT 25
28914: PUSH
28915: FOR_TO
28916: IFFALSE 28989
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
28918: LD_ADDR_VAR 0 3
28922: PUSH
28923: LD_VAR 0 3
28927: PUSH
28928: LD_INT 22
28930: PUSH
28931: LD_VAR 0 1
28935: PPUSH
28936: CALL_OW 255
28940: PUSH
28941: EMPTY
28942: LIST
28943: LIST
28944: PUSH
28945: LD_INT 91
28947: PUSH
28948: LD_VAR 0 1
28952: PUSH
28953: LD_INT 6
28955: PUSH
28956: EMPTY
28957: LIST
28958: LIST
28959: LIST
28960: PUSH
28961: LD_INT 30
28963: PUSH
28964: LD_VAR 0 4
28968: PUSH
28969: EMPTY
28970: LIST
28971: LIST
28972: PUSH
28973: EMPTY
28974: LIST
28975: LIST
28976: LIST
28977: PUSH
28978: EMPTY
28979: LIST
28980: PPUSH
28981: CALL_OW 69
28985: ADD
28986: ST_TO_ADDR
28987: GO 28915
28989: POP
28990: POP
// for i = 1 to tmp do
28991: LD_ADDR_VAR 0 4
28995: PUSH
28996: DOUBLE
28997: LD_INT 1
28999: DEC
29000: ST_TO_ADDR
29001: LD_VAR 0 3
29005: PUSH
29006: FOR_TO
29007: IFFALSE 29095
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29009: LD_ADDR_VAR 0 5
29013: PUSH
29014: LD_VAR 0 5
29018: PUSH
29019: LD_VAR 0 3
29023: PUSH
29024: LD_VAR 0 4
29028: ARRAY
29029: PPUSH
29030: CALL_OW 266
29034: PUSH
29035: LD_VAR 0 3
29039: PUSH
29040: LD_VAR 0 4
29044: ARRAY
29045: PPUSH
29046: CALL_OW 250
29050: PUSH
29051: LD_VAR 0 3
29055: PUSH
29056: LD_VAR 0 4
29060: ARRAY
29061: PPUSH
29062: CALL_OW 251
29066: PUSH
29067: LD_VAR 0 3
29071: PUSH
29072: LD_VAR 0 4
29076: ARRAY
29077: PPUSH
29078: CALL_OW 254
29082: PUSH
29083: EMPTY
29084: LIST
29085: LIST
29086: LIST
29087: LIST
29088: PUSH
29089: EMPTY
29090: LIST
29091: ADD
29092: ST_TO_ADDR
29093: GO 29006
29095: POP
29096: POP
// result := list ;
29097: LD_ADDR_VAR 0 2
29101: PUSH
29102: LD_VAR 0 5
29106: ST_TO_ADDR
// end ;
29107: LD_VAR 0 2
29111: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29112: LD_INT 0
29114: PPUSH
29115: PPUSH
29116: PPUSH
29117: PPUSH
29118: PPUSH
29119: PPUSH
29120: PPUSH
// if not factory then
29121: LD_VAR 0 1
29125: NOT
29126: IFFALSE 29130
// exit ;
29128: GO 29723
// if control = control_apeman then
29130: LD_VAR 0 4
29134: PUSH
29135: LD_INT 5
29137: EQUAL
29138: IFFALSE 29247
// begin tmp := UnitsInside ( factory ) ;
29140: LD_ADDR_VAR 0 8
29144: PUSH
29145: LD_VAR 0 1
29149: PPUSH
29150: CALL_OW 313
29154: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29155: LD_VAR 0 8
29159: PPUSH
29160: LD_INT 25
29162: PUSH
29163: LD_INT 12
29165: PUSH
29166: EMPTY
29167: LIST
29168: LIST
29169: PPUSH
29170: CALL_OW 72
29174: NOT
29175: IFFALSE 29185
// control := control_manual ;
29177: LD_ADDR_VAR 0 4
29181: PUSH
29182: LD_INT 1
29184: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29185: LD_ADDR_VAR 0 8
29189: PUSH
29190: LD_VAR 0 1
29194: PPUSH
29195: CALL 28882 0 1
29199: ST_TO_ADDR
// if tmp then
29200: LD_VAR 0 8
29204: IFFALSE 29247
// begin for i in tmp do
29206: LD_ADDR_VAR 0 7
29210: PUSH
29211: LD_VAR 0 8
29215: PUSH
29216: FOR_IN
29217: IFFALSE 29245
// if i [ 1 ] = b_ext_radio then
29219: LD_VAR 0 7
29223: PUSH
29224: LD_INT 1
29226: ARRAY
29227: PUSH
29228: LD_INT 22
29230: EQUAL
29231: IFFALSE 29243
// begin control := control_remote ;
29233: LD_ADDR_VAR 0 4
29237: PUSH
29238: LD_INT 2
29240: ST_TO_ADDR
// break ;
29241: GO 29245
// end ;
29243: GO 29216
29245: POP
29246: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29247: LD_VAR 0 1
29251: PPUSH
29252: LD_VAR 0 2
29256: PPUSH
29257: LD_VAR 0 3
29261: PPUSH
29262: LD_VAR 0 4
29266: PPUSH
29267: LD_VAR 0 5
29271: PPUSH
29272: CALL_OW 448
29276: IFFALSE 29311
// begin result := [ chassis , engine , control , weapon ] ;
29278: LD_ADDR_VAR 0 6
29282: PUSH
29283: LD_VAR 0 2
29287: PUSH
29288: LD_VAR 0 3
29292: PUSH
29293: LD_VAR 0 4
29297: PUSH
29298: LD_VAR 0 5
29302: PUSH
29303: EMPTY
29304: LIST
29305: LIST
29306: LIST
29307: LIST
29308: ST_TO_ADDR
// exit ;
29309: GO 29723
// end ; _chassis := AvailableChassisList ( factory ) ;
29311: LD_ADDR_VAR 0 9
29315: PUSH
29316: LD_VAR 0 1
29320: PPUSH
29321: CALL_OW 475
29325: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29326: LD_ADDR_VAR 0 11
29330: PUSH
29331: LD_VAR 0 1
29335: PPUSH
29336: CALL_OW 476
29340: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
29341: LD_ADDR_VAR 0 12
29345: PUSH
29346: LD_VAR 0 1
29350: PPUSH
29351: CALL_OW 477
29355: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
29356: LD_ADDR_VAR 0 10
29360: PUSH
29361: LD_VAR 0 1
29365: PPUSH
29366: CALL_OW 478
29370: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
29371: LD_VAR 0 9
29375: NOT
29376: PUSH
29377: LD_VAR 0 11
29381: NOT
29382: OR
29383: PUSH
29384: LD_VAR 0 12
29388: NOT
29389: OR
29390: PUSH
29391: LD_VAR 0 10
29395: NOT
29396: OR
29397: IFFALSE 29432
// begin result := [ chassis , engine , control , weapon ] ;
29399: LD_ADDR_VAR 0 6
29403: PUSH
29404: LD_VAR 0 2
29408: PUSH
29409: LD_VAR 0 3
29413: PUSH
29414: LD_VAR 0 4
29418: PUSH
29419: LD_VAR 0 5
29423: PUSH
29424: EMPTY
29425: LIST
29426: LIST
29427: LIST
29428: LIST
29429: ST_TO_ADDR
// exit ;
29430: GO 29723
// end ; if not chassis in _chassis then
29432: LD_VAR 0 2
29436: PUSH
29437: LD_VAR 0 9
29441: IN
29442: NOT
29443: IFFALSE 29469
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
29445: LD_ADDR_VAR 0 2
29449: PUSH
29450: LD_VAR 0 9
29454: PUSH
29455: LD_INT 1
29457: PPUSH
29458: LD_VAR 0 9
29462: PPUSH
29463: CALL_OW 12
29467: ARRAY
29468: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
29469: LD_VAR 0 2
29473: PPUSH
29474: LD_VAR 0 3
29478: PPUSH
29479: CALL 29728 0 2
29483: NOT
29484: IFFALSE 29543
// repeat engine := _engine [ 1 ] ;
29486: LD_ADDR_VAR 0 3
29490: PUSH
29491: LD_VAR 0 11
29495: PUSH
29496: LD_INT 1
29498: ARRAY
29499: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
29500: LD_ADDR_VAR 0 11
29504: PUSH
29505: LD_VAR 0 11
29509: PPUSH
29510: LD_INT 1
29512: PPUSH
29513: CALL_OW 3
29517: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
29518: LD_VAR 0 2
29522: PPUSH
29523: LD_VAR 0 3
29527: PPUSH
29528: CALL 29728 0 2
29532: PUSH
29533: LD_VAR 0 11
29537: PUSH
29538: EMPTY
29539: EQUAL
29540: OR
29541: IFFALSE 29486
// if not control in _control then
29543: LD_VAR 0 4
29547: PUSH
29548: LD_VAR 0 12
29552: IN
29553: NOT
29554: IFFALSE 29580
// control := _control [ rand ( 1 , _control ) ] ;
29556: LD_ADDR_VAR 0 4
29560: PUSH
29561: LD_VAR 0 12
29565: PUSH
29566: LD_INT 1
29568: PPUSH
29569: LD_VAR 0 12
29573: PPUSH
29574: CALL_OW 12
29578: ARRAY
29579: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
29580: LD_VAR 0 2
29584: PPUSH
29585: LD_VAR 0 5
29589: PPUSH
29590: CALL 29948 0 2
29594: NOT
29595: IFFALSE 29654
// repeat weapon := _weapon [ 1 ] ;
29597: LD_ADDR_VAR 0 5
29601: PUSH
29602: LD_VAR 0 10
29606: PUSH
29607: LD_INT 1
29609: ARRAY
29610: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
29611: LD_ADDR_VAR 0 10
29615: PUSH
29616: LD_VAR 0 10
29620: PPUSH
29621: LD_INT 1
29623: PPUSH
29624: CALL_OW 3
29628: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
29629: LD_VAR 0 2
29633: PPUSH
29634: LD_VAR 0 5
29638: PPUSH
29639: CALL 29948 0 2
29643: PUSH
29644: LD_VAR 0 10
29648: PUSH
29649: EMPTY
29650: EQUAL
29651: OR
29652: IFFALSE 29597
// result := [ ] ;
29654: LD_ADDR_VAR 0 6
29658: PUSH
29659: EMPTY
29660: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29661: LD_VAR 0 1
29665: PPUSH
29666: LD_VAR 0 2
29670: PPUSH
29671: LD_VAR 0 3
29675: PPUSH
29676: LD_VAR 0 4
29680: PPUSH
29681: LD_VAR 0 5
29685: PPUSH
29686: CALL_OW 448
29690: IFFALSE 29723
// result := [ chassis , engine , control , weapon ] ;
29692: LD_ADDR_VAR 0 6
29696: PUSH
29697: LD_VAR 0 2
29701: PUSH
29702: LD_VAR 0 3
29706: PUSH
29707: LD_VAR 0 4
29711: PUSH
29712: LD_VAR 0 5
29716: PUSH
29717: EMPTY
29718: LIST
29719: LIST
29720: LIST
29721: LIST
29722: ST_TO_ADDR
// end ;
29723: LD_VAR 0 6
29727: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
29728: LD_INT 0
29730: PPUSH
// if not chassis or not engine then
29731: LD_VAR 0 1
29735: NOT
29736: PUSH
29737: LD_VAR 0 2
29741: NOT
29742: OR
29743: IFFALSE 29747
// exit ;
29745: GO 29943
// case engine of engine_solar :
29747: LD_VAR 0 2
29751: PUSH
29752: LD_INT 2
29754: DOUBLE
29755: EQUAL
29756: IFTRUE 29760
29758: GO 29798
29760: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
29761: LD_ADDR_VAR 0 3
29765: PUSH
29766: LD_INT 11
29768: PUSH
29769: LD_INT 12
29771: PUSH
29772: LD_INT 13
29774: PUSH
29775: LD_INT 14
29777: PUSH
29778: LD_INT 1
29780: PUSH
29781: LD_INT 2
29783: PUSH
29784: LD_INT 3
29786: PUSH
29787: EMPTY
29788: LIST
29789: LIST
29790: LIST
29791: LIST
29792: LIST
29793: LIST
29794: LIST
29795: ST_TO_ADDR
29796: GO 29927
29798: LD_INT 1
29800: DOUBLE
29801: EQUAL
29802: IFTRUE 29806
29804: GO 29868
29806: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
29807: LD_ADDR_VAR 0 3
29811: PUSH
29812: LD_INT 11
29814: PUSH
29815: LD_INT 12
29817: PUSH
29818: LD_INT 13
29820: PUSH
29821: LD_INT 14
29823: PUSH
29824: LD_INT 1
29826: PUSH
29827: LD_INT 2
29829: PUSH
29830: LD_INT 3
29832: PUSH
29833: LD_INT 4
29835: PUSH
29836: LD_INT 5
29838: PUSH
29839: LD_INT 21
29841: PUSH
29842: LD_INT 23
29844: PUSH
29845: LD_INT 22
29847: PUSH
29848: LD_INT 24
29850: PUSH
29851: EMPTY
29852: LIST
29853: LIST
29854: LIST
29855: LIST
29856: LIST
29857: LIST
29858: LIST
29859: LIST
29860: LIST
29861: LIST
29862: LIST
29863: LIST
29864: LIST
29865: ST_TO_ADDR
29866: GO 29927
29868: LD_INT 3
29870: DOUBLE
29871: EQUAL
29872: IFTRUE 29876
29874: GO 29926
29876: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29877: LD_ADDR_VAR 0 3
29881: PUSH
29882: LD_INT 13
29884: PUSH
29885: LD_INT 14
29887: PUSH
29888: LD_INT 2
29890: PUSH
29891: LD_INT 3
29893: PUSH
29894: LD_INT 4
29896: PUSH
29897: LD_INT 5
29899: PUSH
29900: LD_INT 21
29902: PUSH
29903: LD_INT 22
29905: PUSH
29906: LD_INT 23
29908: PUSH
29909: LD_INT 24
29911: PUSH
29912: EMPTY
29913: LIST
29914: LIST
29915: LIST
29916: LIST
29917: LIST
29918: LIST
29919: LIST
29920: LIST
29921: LIST
29922: LIST
29923: ST_TO_ADDR
29924: GO 29927
29926: POP
// result := ( chassis in result ) ;
29927: LD_ADDR_VAR 0 3
29931: PUSH
29932: LD_VAR 0 1
29936: PUSH
29937: LD_VAR 0 3
29941: IN
29942: ST_TO_ADDR
// end ;
29943: LD_VAR 0 3
29947: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
29948: LD_INT 0
29950: PPUSH
// if not chassis or not weapon then
29951: LD_VAR 0 1
29955: NOT
29956: PUSH
29957: LD_VAR 0 2
29961: NOT
29962: OR
29963: IFFALSE 29967
// exit ;
29965: GO 30993
// case weapon of us_machine_gun :
29967: LD_VAR 0 2
29971: PUSH
29972: LD_INT 2
29974: DOUBLE
29975: EQUAL
29976: IFTRUE 29980
29978: GO 30010
29980: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
29981: LD_ADDR_VAR 0 3
29985: PUSH
29986: LD_INT 1
29988: PUSH
29989: LD_INT 2
29991: PUSH
29992: LD_INT 3
29994: PUSH
29995: LD_INT 4
29997: PUSH
29998: LD_INT 5
30000: PUSH
30001: EMPTY
30002: LIST
30003: LIST
30004: LIST
30005: LIST
30006: LIST
30007: ST_TO_ADDR
30008: GO 30977
30010: LD_INT 3
30012: DOUBLE
30013: EQUAL
30014: IFTRUE 30018
30016: GO 30048
30018: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30019: LD_ADDR_VAR 0 3
30023: PUSH
30024: LD_INT 1
30026: PUSH
30027: LD_INT 2
30029: PUSH
30030: LD_INT 3
30032: PUSH
30033: LD_INT 4
30035: PUSH
30036: LD_INT 5
30038: PUSH
30039: EMPTY
30040: LIST
30041: LIST
30042: LIST
30043: LIST
30044: LIST
30045: ST_TO_ADDR
30046: GO 30977
30048: LD_INT 11
30050: DOUBLE
30051: EQUAL
30052: IFTRUE 30056
30054: GO 30086
30056: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30057: LD_ADDR_VAR 0 3
30061: PUSH
30062: LD_INT 1
30064: PUSH
30065: LD_INT 2
30067: PUSH
30068: LD_INT 3
30070: PUSH
30071: LD_INT 4
30073: PUSH
30074: LD_INT 5
30076: PUSH
30077: EMPTY
30078: LIST
30079: LIST
30080: LIST
30081: LIST
30082: LIST
30083: ST_TO_ADDR
30084: GO 30977
30086: LD_INT 4
30088: DOUBLE
30089: EQUAL
30090: IFTRUE 30094
30092: GO 30120
30094: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30095: LD_ADDR_VAR 0 3
30099: PUSH
30100: LD_INT 2
30102: PUSH
30103: LD_INT 3
30105: PUSH
30106: LD_INT 4
30108: PUSH
30109: LD_INT 5
30111: PUSH
30112: EMPTY
30113: LIST
30114: LIST
30115: LIST
30116: LIST
30117: ST_TO_ADDR
30118: GO 30977
30120: LD_INT 5
30122: DOUBLE
30123: EQUAL
30124: IFTRUE 30128
30126: GO 30154
30128: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30129: LD_ADDR_VAR 0 3
30133: PUSH
30134: LD_INT 2
30136: PUSH
30137: LD_INT 3
30139: PUSH
30140: LD_INT 4
30142: PUSH
30143: LD_INT 5
30145: PUSH
30146: EMPTY
30147: LIST
30148: LIST
30149: LIST
30150: LIST
30151: ST_TO_ADDR
30152: GO 30977
30154: LD_INT 9
30156: DOUBLE
30157: EQUAL
30158: IFTRUE 30162
30160: GO 30188
30162: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30163: LD_ADDR_VAR 0 3
30167: PUSH
30168: LD_INT 2
30170: PUSH
30171: LD_INT 3
30173: PUSH
30174: LD_INT 4
30176: PUSH
30177: LD_INT 5
30179: PUSH
30180: EMPTY
30181: LIST
30182: LIST
30183: LIST
30184: LIST
30185: ST_TO_ADDR
30186: GO 30977
30188: LD_INT 7
30190: DOUBLE
30191: EQUAL
30192: IFTRUE 30196
30194: GO 30222
30196: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30197: LD_ADDR_VAR 0 3
30201: PUSH
30202: LD_INT 2
30204: PUSH
30205: LD_INT 3
30207: PUSH
30208: LD_INT 4
30210: PUSH
30211: LD_INT 5
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: LIST
30218: LIST
30219: ST_TO_ADDR
30220: GO 30977
30222: LD_INT 12
30224: DOUBLE
30225: EQUAL
30226: IFTRUE 30230
30228: GO 30256
30230: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30231: LD_ADDR_VAR 0 3
30235: PUSH
30236: LD_INT 2
30238: PUSH
30239: LD_INT 3
30241: PUSH
30242: LD_INT 4
30244: PUSH
30245: LD_INT 5
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: LIST
30252: LIST
30253: ST_TO_ADDR
30254: GO 30977
30256: LD_INT 13
30258: DOUBLE
30259: EQUAL
30260: IFTRUE 30264
30262: GO 30290
30264: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30265: LD_ADDR_VAR 0 3
30269: PUSH
30270: LD_INT 2
30272: PUSH
30273: LD_INT 3
30275: PUSH
30276: LD_INT 4
30278: PUSH
30279: LD_INT 5
30281: PUSH
30282: EMPTY
30283: LIST
30284: LIST
30285: LIST
30286: LIST
30287: ST_TO_ADDR
30288: GO 30977
30290: LD_INT 14
30292: DOUBLE
30293: EQUAL
30294: IFTRUE 30298
30296: GO 30316
30298: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30299: LD_ADDR_VAR 0 3
30303: PUSH
30304: LD_INT 4
30306: PUSH
30307: LD_INT 5
30309: PUSH
30310: EMPTY
30311: LIST
30312: LIST
30313: ST_TO_ADDR
30314: GO 30977
30316: LD_INT 6
30318: DOUBLE
30319: EQUAL
30320: IFTRUE 30324
30322: GO 30342
30324: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30325: LD_ADDR_VAR 0 3
30329: PUSH
30330: LD_INT 4
30332: PUSH
30333: LD_INT 5
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: ST_TO_ADDR
30340: GO 30977
30342: LD_INT 10
30344: DOUBLE
30345: EQUAL
30346: IFTRUE 30350
30348: GO 30368
30350: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
30351: LD_ADDR_VAR 0 3
30355: PUSH
30356: LD_INT 4
30358: PUSH
30359: LD_INT 5
30361: PUSH
30362: EMPTY
30363: LIST
30364: LIST
30365: ST_TO_ADDR
30366: GO 30977
30368: LD_INT 22
30370: DOUBLE
30371: EQUAL
30372: IFTRUE 30376
30374: GO 30402
30376: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
30377: LD_ADDR_VAR 0 3
30381: PUSH
30382: LD_INT 11
30384: PUSH
30385: LD_INT 12
30387: PUSH
30388: LD_INT 13
30390: PUSH
30391: LD_INT 14
30393: PUSH
30394: EMPTY
30395: LIST
30396: LIST
30397: LIST
30398: LIST
30399: ST_TO_ADDR
30400: GO 30977
30402: LD_INT 23
30404: DOUBLE
30405: EQUAL
30406: IFTRUE 30410
30408: GO 30436
30410: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
30411: LD_ADDR_VAR 0 3
30415: PUSH
30416: LD_INT 11
30418: PUSH
30419: LD_INT 12
30421: PUSH
30422: LD_INT 13
30424: PUSH
30425: LD_INT 14
30427: PUSH
30428: EMPTY
30429: LIST
30430: LIST
30431: LIST
30432: LIST
30433: ST_TO_ADDR
30434: GO 30977
30436: LD_INT 24
30438: DOUBLE
30439: EQUAL
30440: IFTRUE 30444
30442: GO 30470
30444: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
30445: LD_ADDR_VAR 0 3
30449: PUSH
30450: LD_INT 11
30452: PUSH
30453: LD_INT 12
30455: PUSH
30456: LD_INT 13
30458: PUSH
30459: LD_INT 14
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: LIST
30466: LIST
30467: ST_TO_ADDR
30468: GO 30977
30470: LD_INT 30
30472: DOUBLE
30473: EQUAL
30474: IFTRUE 30478
30476: GO 30504
30478: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
30479: LD_ADDR_VAR 0 3
30483: PUSH
30484: LD_INT 11
30486: PUSH
30487: LD_INT 12
30489: PUSH
30490: LD_INT 13
30492: PUSH
30493: LD_INT 14
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: LIST
30500: LIST
30501: ST_TO_ADDR
30502: GO 30977
30504: LD_INT 25
30506: DOUBLE
30507: EQUAL
30508: IFTRUE 30512
30510: GO 30530
30512: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
30513: LD_ADDR_VAR 0 3
30517: PUSH
30518: LD_INT 13
30520: PUSH
30521: LD_INT 14
30523: PUSH
30524: EMPTY
30525: LIST
30526: LIST
30527: ST_TO_ADDR
30528: GO 30977
30530: LD_INT 27
30532: DOUBLE
30533: EQUAL
30534: IFTRUE 30538
30536: GO 30556
30538: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
30539: LD_ADDR_VAR 0 3
30543: PUSH
30544: LD_INT 13
30546: PUSH
30547: LD_INT 14
30549: PUSH
30550: EMPTY
30551: LIST
30552: LIST
30553: ST_TO_ADDR
30554: GO 30977
30556: LD_INT 28
30558: DOUBLE
30559: EQUAL
30560: IFTRUE 30564
30562: GO 30582
30564: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
30565: LD_ADDR_VAR 0 3
30569: PUSH
30570: LD_INT 13
30572: PUSH
30573: LD_INT 14
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: ST_TO_ADDR
30580: GO 30977
30582: LD_INT 29
30584: DOUBLE
30585: EQUAL
30586: IFTRUE 30590
30588: GO 30608
30590: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
30591: LD_ADDR_VAR 0 3
30595: PUSH
30596: LD_INT 13
30598: PUSH
30599: LD_INT 14
30601: PUSH
30602: EMPTY
30603: LIST
30604: LIST
30605: ST_TO_ADDR
30606: GO 30977
30608: LD_INT 31
30610: DOUBLE
30611: EQUAL
30612: IFTRUE 30616
30614: GO 30634
30616: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
30617: LD_ADDR_VAR 0 3
30621: PUSH
30622: LD_INT 13
30624: PUSH
30625: LD_INT 14
30627: PUSH
30628: EMPTY
30629: LIST
30630: LIST
30631: ST_TO_ADDR
30632: GO 30977
30634: LD_INT 26
30636: DOUBLE
30637: EQUAL
30638: IFTRUE 30642
30640: GO 30660
30642: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
30643: LD_ADDR_VAR 0 3
30647: PUSH
30648: LD_INT 13
30650: PUSH
30651: LD_INT 14
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: ST_TO_ADDR
30658: GO 30977
30660: LD_INT 42
30662: DOUBLE
30663: EQUAL
30664: IFTRUE 30668
30666: GO 30694
30668: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
30669: LD_ADDR_VAR 0 3
30673: PUSH
30674: LD_INT 21
30676: PUSH
30677: LD_INT 22
30679: PUSH
30680: LD_INT 23
30682: PUSH
30683: LD_INT 24
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: LIST
30690: LIST
30691: ST_TO_ADDR
30692: GO 30977
30694: LD_INT 43
30696: DOUBLE
30697: EQUAL
30698: IFTRUE 30702
30700: GO 30728
30702: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
30703: LD_ADDR_VAR 0 3
30707: PUSH
30708: LD_INT 21
30710: PUSH
30711: LD_INT 22
30713: PUSH
30714: LD_INT 23
30716: PUSH
30717: LD_INT 24
30719: PUSH
30720: EMPTY
30721: LIST
30722: LIST
30723: LIST
30724: LIST
30725: ST_TO_ADDR
30726: GO 30977
30728: LD_INT 44
30730: DOUBLE
30731: EQUAL
30732: IFTRUE 30736
30734: GO 30762
30736: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
30737: LD_ADDR_VAR 0 3
30741: PUSH
30742: LD_INT 21
30744: PUSH
30745: LD_INT 22
30747: PUSH
30748: LD_INT 23
30750: PUSH
30751: LD_INT 24
30753: PUSH
30754: EMPTY
30755: LIST
30756: LIST
30757: LIST
30758: LIST
30759: ST_TO_ADDR
30760: GO 30977
30762: LD_INT 45
30764: DOUBLE
30765: EQUAL
30766: IFTRUE 30770
30768: GO 30796
30770: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
30771: LD_ADDR_VAR 0 3
30775: PUSH
30776: LD_INT 21
30778: PUSH
30779: LD_INT 22
30781: PUSH
30782: LD_INT 23
30784: PUSH
30785: LD_INT 24
30787: PUSH
30788: EMPTY
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: ST_TO_ADDR
30794: GO 30977
30796: LD_INT 49
30798: DOUBLE
30799: EQUAL
30800: IFTRUE 30804
30802: GO 30830
30804: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
30805: LD_ADDR_VAR 0 3
30809: PUSH
30810: LD_INT 21
30812: PUSH
30813: LD_INT 22
30815: PUSH
30816: LD_INT 23
30818: PUSH
30819: LD_INT 24
30821: PUSH
30822: EMPTY
30823: LIST
30824: LIST
30825: LIST
30826: LIST
30827: ST_TO_ADDR
30828: GO 30977
30830: LD_INT 51
30832: DOUBLE
30833: EQUAL
30834: IFTRUE 30838
30836: GO 30864
30838: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
30839: LD_ADDR_VAR 0 3
30843: PUSH
30844: LD_INT 21
30846: PUSH
30847: LD_INT 22
30849: PUSH
30850: LD_INT 23
30852: PUSH
30853: LD_INT 24
30855: PUSH
30856: EMPTY
30857: LIST
30858: LIST
30859: LIST
30860: LIST
30861: ST_TO_ADDR
30862: GO 30977
30864: LD_INT 52
30866: DOUBLE
30867: EQUAL
30868: IFTRUE 30872
30870: GO 30898
30872: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
30873: LD_ADDR_VAR 0 3
30877: PUSH
30878: LD_INT 21
30880: PUSH
30881: LD_INT 22
30883: PUSH
30884: LD_INT 23
30886: PUSH
30887: LD_INT 24
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: LIST
30894: LIST
30895: ST_TO_ADDR
30896: GO 30977
30898: LD_INT 53
30900: DOUBLE
30901: EQUAL
30902: IFTRUE 30906
30904: GO 30924
30906: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
30907: LD_ADDR_VAR 0 3
30911: PUSH
30912: LD_INT 23
30914: PUSH
30915: LD_INT 24
30917: PUSH
30918: EMPTY
30919: LIST
30920: LIST
30921: ST_TO_ADDR
30922: GO 30977
30924: LD_INT 46
30926: DOUBLE
30927: EQUAL
30928: IFTRUE 30932
30930: GO 30950
30932: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
30933: LD_ADDR_VAR 0 3
30937: PUSH
30938: LD_INT 23
30940: PUSH
30941: LD_INT 24
30943: PUSH
30944: EMPTY
30945: LIST
30946: LIST
30947: ST_TO_ADDR
30948: GO 30977
30950: LD_INT 47
30952: DOUBLE
30953: EQUAL
30954: IFTRUE 30958
30956: GO 30976
30958: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
30959: LD_ADDR_VAR 0 3
30963: PUSH
30964: LD_INT 23
30966: PUSH
30967: LD_INT 24
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: ST_TO_ADDR
30974: GO 30977
30976: POP
// result := ( chassis in result ) ;
30977: LD_ADDR_VAR 0 3
30981: PUSH
30982: LD_VAR 0 1
30986: PUSH
30987: LD_VAR 0 3
30991: IN
30992: ST_TO_ADDR
// end ;
30993: LD_VAR 0 3
30997: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
30998: LD_INT 0
31000: PPUSH
31001: PPUSH
31002: PPUSH
31003: PPUSH
31004: PPUSH
31005: PPUSH
31006: PPUSH
// result := array ;
31007: LD_ADDR_VAR 0 5
31011: PUSH
31012: LD_VAR 0 1
31016: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31017: LD_VAR 0 1
31021: NOT
31022: PUSH
31023: LD_VAR 0 2
31027: NOT
31028: OR
31029: PUSH
31030: LD_VAR 0 3
31034: NOT
31035: OR
31036: PUSH
31037: LD_VAR 0 2
31041: PUSH
31042: LD_VAR 0 1
31046: GREATER
31047: OR
31048: PUSH
31049: LD_VAR 0 3
31053: PUSH
31054: LD_VAR 0 1
31058: GREATER
31059: OR
31060: IFFALSE 31064
// exit ;
31062: GO 31360
// if direction then
31064: LD_VAR 0 4
31068: IFFALSE 31132
// begin d := 1 ;
31070: LD_ADDR_VAR 0 9
31074: PUSH
31075: LD_INT 1
31077: ST_TO_ADDR
// if i_from > i_to then
31078: LD_VAR 0 2
31082: PUSH
31083: LD_VAR 0 3
31087: GREATER
31088: IFFALSE 31114
// length := ( array - i_from ) + i_to else
31090: LD_ADDR_VAR 0 11
31094: PUSH
31095: LD_VAR 0 1
31099: PUSH
31100: LD_VAR 0 2
31104: MINUS
31105: PUSH
31106: LD_VAR 0 3
31110: PLUS
31111: ST_TO_ADDR
31112: GO 31130
// length := i_to - i_from ;
31114: LD_ADDR_VAR 0 11
31118: PUSH
31119: LD_VAR 0 3
31123: PUSH
31124: LD_VAR 0 2
31128: MINUS
31129: ST_TO_ADDR
// end else
31130: GO 31193
// begin d := - 1 ;
31132: LD_ADDR_VAR 0 9
31136: PUSH
31137: LD_INT 1
31139: NEG
31140: ST_TO_ADDR
// if i_from > i_to then
31141: LD_VAR 0 2
31145: PUSH
31146: LD_VAR 0 3
31150: GREATER
31151: IFFALSE 31171
// length := i_from - i_to else
31153: LD_ADDR_VAR 0 11
31157: PUSH
31158: LD_VAR 0 2
31162: PUSH
31163: LD_VAR 0 3
31167: MINUS
31168: ST_TO_ADDR
31169: GO 31193
// length := ( array - i_to ) + i_from ;
31171: LD_ADDR_VAR 0 11
31175: PUSH
31176: LD_VAR 0 1
31180: PUSH
31181: LD_VAR 0 3
31185: MINUS
31186: PUSH
31187: LD_VAR 0 2
31191: PLUS
31192: ST_TO_ADDR
// end ; if not length then
31193: LD_VAR 0 11
31197: NOT
31198: IFFALSE 31202
// exit ;
31200: GO 31360
// tmp := array ;
31202: LD_ADDR_VAR 0 10
31206: PUSH
31207: LD_VAR 0 1
31211: ST_TO_ADDR
// for i = 1 to length do
31212: LD_ADDR_VAR 0 6
31216: PUSH
31217: DOUBLE
31218: LD_INT 1
31220: DEC
31221: ST_TO_ADDR
31222: LD_VAR 0 11
31226: PUSH
31227: FOR_TO
31228: IFFALSE 31348
// begin for j = 1 to array do
31230: LD_ADDR_VAR 0 7
31234: PUSH
31235: DOUBLE
31236: LD_INT 1
31238: DEC
31239: ST_TO_ADDR
31240: LD_VAR 0 1
31244: PUSH
31245: FOR_TO
31246: IFFALSE 31334
// begin k := j + d ;
31248: LD_ADDR_VAR 0 8
31252: PUSH
31253: LD_VAR 0 7
31257: PUSH
31258: LD_VAR 0 9
31262: PLUS
31263: ST_TO_ADDR
// if k > array then
31264: LD_VAR 0 8
31268: PUSH
31269: LD_VAR 0 1
31273: GREATER
31274: IFFALSE 31284
// k := 1 ;
31276: LD_ADDR_VAR 0 8
31280: PUSH
31281: LD_INT 1
31283: ST_TO_ADDR
// if not k then
31284: LD_VAR 0 8
31288: NOT
31289: IFFALSE 31301
// k := array ;
31291: LD_ADDR_VAR 0 8
31295: PUSH
31296: LD_VAR 0 1
31300: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31301: LD_ADDR_VAR 0 10
31305: PUSH
31306: LD_VAR 0 10
31310: PPUSH
31311: LD_VAR 0 8
31315: PPUSH
31316: LD_VAR 0 1
31320: PUSH
31321: LD_VAR 0 7
31325: ARRAY
31326: PPUSH
31327: CALL_OW 1
31331: ST_TO_ADDR
// end ;
31332: GO 31245
31334: POP
31335: POP
// array := tmp ;
31336: LD_ADDR_VAR 0 1
31340: PUSH
31341: LD_VAR 0 10
31345: ST_TO_ADDR
// end ;
31346: GO 31227
31348: POP
31349: POP
// result := array ;
31350: LD_ADDR_VAR 0 5
31354: PUSH
31355: LD_VAR 0 1
31359: ST_TO_ADDR
// end ;
31360: LD_VAR 0 5
31364: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
31365: LD_INT 0
31367: PPUSH
31368: PPUSH
// result := 0 ;
31369: LD_ADDR_VAR 0 3
31373: PUSH
31374: LD_INT 0
31376: ST_TO_ADDR
// if not array or not value in array then
31377: LD_VAR 0 1
31381: NOT
31382: PUSH
31383: LD_VAR 0 2
31387: PUSH
31388: LD_VAR 0 1
31392: IN
31393: NOT
31394: OR
31395: IFFALSE 31399
// exit ;
31397: GO 31453
// for i = 1 to array do
31399: LD_ADDR_VAR 0 4
31403: PUSH
31404: DOUBLE
31405: LD_INT 1
31407: DEC
31408: ST_TO_ADDR
31409: LD_VAR 0 1
31413: PUSH
31414: FOR_TO
31415: IFFALSE 31451
// if value = array [ i ] then
31417: LD_VAR 0 2
31421: PUSH
31422: LD_VAR 0 1
31426: PUSH
31427: LD_VAR 0 4
31431: ARRAY
31432: EQUAL
31433: IFFALSE 31449
// begin result := i ;
31435: LD_ADDR_VAR 0 3
31439: PUSH
31440: LD_VAR 0 4
31444: ST_TO_ADDR
// exit ;
31445: POP
31446: POP
31447: GO 31453
// end ;
31449: GO 31414
31451: POP
31452: POP
// end ;
31453: LD_VAR 0 3
31457: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
31458: LD_INT 0
31460: PPUSH
// vc_chassis := chassis ;
31461: LD_ADDR_OWVAR 37
31465: PUSH
31466: LD_VAR 0 1
31470: ST_TO_ADDR
// vc_engine := engine ;
31471: LD_ADDR_OWVAR 39
31475: PUSH
31476: LD_VAR 0 2
31480: ST_TO_ADDR
// vc_control := control ;
31481: LD_ADDR_OWVAR 38
31485: PUSH
31486: LD_VAR 0 3
31490: ST_TO_ADDR
// vc_weapon := weapon ;
31491: LD_ADDR_OWVAR 40
31495: PUSH
31496: LD_VAR 0 4
31500: ST_TO_ADDR
// vc_fuel_battery := fuel ;
31501: LD_ADDR_OWVAR 41
31505: PUSH
31506: LD_VAR 0 5
31510: ST_TO_ADDR
// end ;
31511: LD_VAR 0 6
31515: RET
// export function WantPlant ( unit ) ; var task ; begin
31516: LD_INT 0
31518: PPUSH
31519: PPUSH
// result := false ;
31520: LD_ADDR_VAR 0 2
31524: PUSH
31525: LD_INT 0
31527: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
31528: LD_ADDR_VAR 0 3
31532: PUSH
31533: LD_VAR 0 1
31537: PPUSH
31538: CALL_OW 437
31542: ST_TO_ADDR
// if task then
31543: LD_VAR 0 3
31547: IFFALSE 31575
// if task [ 1 ] [ 1 ] = p then
31549: LD_VAR 0 3
31553: PUSH
31554: LD_INT 1
31556: ARRAY
31557: PUSH
31558: LD_INT 1
31560: ARRAY
31561: PUSH
31562: LD_STRING p
31564: EQUAL
31565: IFFALSE 31575
// result := true ;
31567: LD_ADDR_VAR 0 2
31571: PUSH
31572: LD_INT 1
31574: ST_TO_ADDR
// end ;
31575: LD_VAR 0 2
31579: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
31580: LD_INT 0
31582: PPUSH
31583: PPUSH
31584: PPUSH
31585: PPUSH
// if pos < 1 then
31586: LD_VAR 0 2
31590: PUSH
31591: LD_INT 1
31593: LESS
31594: IFFALSE 31598
// exit ;
31596: GO 31901
// if pos = 1 then
31598: LD_VAR 0 2
31602: PUSH
31603: LD_INT 1
31605: EQUAL
31606: IFFALSE 31639
// result := Replace ( arr , pos [ 1 ] , value ) else
31608: LD_ADDR_VAR 0 4
31612: PUSH
31613: LD_VAR 0 1
31617: PPUSH
31618: LD_VAR 0 2
31622: PUSH
31623: LD_INT 1
31625: ARRAY
31626: PPUSH
31627: LD_VAR 0 3
31631: PPUSH
31632: CALL_OW 1
31636: ST_TO_ADDR
31637: GO 31901
// begin tmp := arr ;
31639: LD_ADDR_VAR 0 6
31643: PUSH
31644: LD_VAR 0 1
31648: ST_TO_ADDR
// s_arr := [ tmp ] ;
31649: LD_ADDR_VAR 0 7
31653: PUSH
31654: LD_VAR 0 6
31658: PUSH
31659: EMPTY
31660: LIST
31661: ST_TO_ADDR
// for i = 1 to pos - 1 do
31662: LD_ADDR_VAR 0 5
31666: PUSH
31667: DOUBLE
31668: LD_INT 1
31670: DEC
31671: ST_TO_ADDR
31672: LD_VAR 0 2
31676: PUSH
31677: LD_INT 1
31679: MINUS
31680: PUSH
31681: FOR_TO
31682: IFFALSE 31727
// begin tmp := tmp [ pos [ i ] ] ;
31684: LD_ADDR_VAR 0 6
31688: PUSH
31689: LD_VAR 0 6
31693: PUSH
31694: LD_VAR 0 2
31698: PUSH
31699: LD_VAR 0 5
31703: ARRAY
31704: ARRAY
31705: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
31706: LD_ADDR_VAR 0 7
31710: PUSH
31711: LD_VAR 0 7
31715: PUSH
31716: LD_VAR 0 6
31720: PUSH
31721: EMPTY
31722: LIST
31723: ADD
31724: ST_TO_ADDR
// end ;
31725: GO 31681
31727: POP
31728: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
31729: LD_ADDR_VAR 0 6
31733: PUSH
31734: LD_VAR 0 6
31738: PPUSH
31739: LD_VAR 0 2
31743: PUSH
31744: LD_VAR 0 2
31748: ARRAY
31749: PPUSH
31750: LD_VAR 0 3
31754: PPUSH
31755: CALL_OW 1
31759: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
31760: LD_ADDR_VAR 0 7
31764: PUSH
31765: LD_VAR 0 7
31769: PPUSH
31770: LD_VAR 0 7
31774: PPUSH
31775: LD_VAR 0 6
31779: PPUSH
31780: CALL_OW 1
31784: ST_TO_ADDR
// for i = s_arr downto 2 do
31785: LD_ADDR_VAR 0 5
31789: PUSH
31790: DOUBLE
31791: LD_VAR 0 7
31795: INC
31796: ST_TO_ADDR
31797: LD_INT 2
31799: PUSH
31800: FOR_DOWNTO
31801: IFFALSE 31885
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
31803: LD_ADDR_VAR 0 6
31807: PUSH
31808: LD_VAR 0 7
31812: PUSH
31813: LD_VAR 0 5
31817: PUSH
31818: LD_INT 1
31820: MINUS
31821: ARRAY
31822: PPUSH
31823: LD_VAR 0 2
31827: PUSH
31828: LD_VAR 0 5
31832: PUSH
31833: LD_INT 1
31835: MINUS
31836: ARRAY
31837: PPUSH
31838: LD_VAR 0 7
31842: PUSH
31843: LD_VAR 0 5
31847: ARRAY
31848: PPUSH
31849: CALL_OW 1
31853: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
31854: LD_ADDR_VAR 0 7
31858: PUSH
31859: LD_VAR 0 7
31863: PPUSH
31864: LD_VAR 0 5
31868: PUSH
31869: LD_INT 1
31871: MINUS
31872: PPUSH
31873: LD_VAR 0 6
31877: PPUSH
31878: CALL_OW 1
31882: ST_TO_ADDR
// end ;
31883: GO 31800
31885: POP
31886: POP
// result := s_arr [ 1 ] ;
31887: LD_ADDR_VAR 0 4
31891: PUSH
31892: LD_VAR 0 7
31896: PUSH
31897: LD_INT 1
31899: ARRAY
31900: ST_TO_ADDR
// end ; end ;
31901: LD_VAR 0 4
31905: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
31906: LD_INT 0
31908: PPUSH
31909: PPUSH
// if not list then
31910: LD_VAR 0 1
31914: NOT
31915: IFFALSE 31919
// exit ;
31917: GO 32010
// i := list [ pos1 ] ;
31919: LD_ADDR_VAR 0 5
31923: PUSH
31924: LD_VAR 0 1
31928: PUSH
31929: LD_VAR 0 2
31933: ARRAY
31934: ST_TO_ADDR
// if not i then
31935: LD_VAR 0 5
31939: NOT
31940: IFFALSE 31944
// exit ;
31942: GO 32010
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
31944: LD_ADDR_VAR 0 1
31948: PUSH
31949: LD_VAR 0 1
31953: PPUSH
31954: LD_VAR 0 2
31958: PPUSH
31959: LD_VAR 0 1
31963: PUSH
31964: LD_VAR 0 3
31968: ARRAY
31969: PPUSH
31970: CALL_OW 1
31974: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
31975: LD_ADDR_VAR 0 1
31979: PUSH
31980: LD_VAR 0 1
31984: PPUSH
31985: LD_VAR 0 3
31989: PPUSH
31990: LD_VAR 0 5
31994: PPUSH
31995: CALL_OW 1
31999: ST_TO_ADDR
// result := list ;
32000: LD_ADDR_VAR 0 4
32004: PUSH
32005: LD_VAR 0 1
32009: ST_TO_ADDR
// end ;
32010: LD_VAR 0 4
32014: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32015: LD_INT 0
32017: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32018: LD_ADDR_VAR 0 5
32022: PUSH
32023: LD_VAR 0 1
32027: PPUSH
32028: CALL_OW 250
32032: PPUSH
32033: LD_VAR 0 1
32037: PPUSH
32038: CALL_OW 251
32042: PPUSH
32043: LD_VAR 0 2
32047: PPUSH
32048: LD_VAR 0 3
32052: PPUSH
32053: LD_VAR 0 4
32057: PPUSH
32058: CALL 32068 0 5
32062: ST_TO_ADDR
// end ;
32063: LD_VAR 0 5
32067: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32068: LD_INT 0
32070: PPUSH
32071: PPUSH
32072: PPUSH
32073: PPUSH
// if not list then
32074: LD_VAR 0 3
32078: NOT
32079: IFFALSE 32083
// exit ;
32081: GO 32471
// result := [ ] ;
32083: LD_ADDR_VAR 0 6
32087: PUSH
32088: EMPTY
32089: ST_TO_ADDR
// for i in list do
32090: LD_ADDR_VAR 0 7
32094: PUSH
32095: LD_VAR 0 3
32099: PUSH
32100: FOR_IN
32101: IFFALSE 32303
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32103: LD_ADDR_VAR 0 9
32107: PUSH
32108: LD_VAR 0 7
32112: PPUSH
32113: LD_VAR 0 1
32117: PPUSH
32118: LD_VAR 0 2
32122: PPUSH
32123: CALL_OW 297
32127: ST_TO_ADDR
// if not result then
32128: LD_VAR 0 6
32132: NOT
32133: IFFALSE 32159
// result := [ [ i , tmp ] ] else
32135: LD_ADDR_VAR 0 6
32139: PUSH
32140: LD_VAR 0 7
32144: PUSH
32145: LD_VAR 0 9
32149: PUSH
32150: EMPTY
32151: LIST
32152: LIST
32153: PUSH
32154: EMPTY
32155: LIST
32156: ST_TO_ADDR
32157: GO 32301
// begin if result [ result ] [ 2 ] < tmp then
32159: LD_VAR 0 6
32163: PUSH
32164: LD_VAR 0 6
32168: ARRAY
32169: PUSH
32170: LD_INT 2
32172: ARRAY
32173: PUSH
32174: LD_VAR 0 9
32178: LESS
32179: IFFALSE 32221
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32181: LD_ADDR_VAR 0 6
32185: PUSH
32186: LD_VAR 0 6
32190: PPUSH
32191: LD_VAR 0 6
32195: PUSH
32196: LD_INT 1
32198: PLUS
32199: PPUSH
32200: LD_VAR 0 7
32204: PUSH
32205: LD_VAR 0 9
32209: PUSH
32210: EMPTY
32211: LIST
32212: LIST
32213: PPUSH
32214: CALL_OW 2
32218: ST_TO_ADDR
32219: GO 32301
// for j = 1 to result do
32221: LD_ADDR_VAR 0 8
32225: PUSH
32226: DOUBLE
32227: LD_INT 1
32229: DEC
32230: ST_TO_ADDR
32231: LD_VAR 0 6
32235: PUSH
32236: FOR_TO
32237: IFFALSE 32299
// begin if tmp < result [ j ] [ 2 ] then
32239: LD_VAR 0 9
32243: PUSH
32244: LD_VAR 0 6
32248: PUSH
32249: LD_VAR 0 8
32253: ARRAY
32254: PUSH
32255: LD_INT 2
32257: ARRAY
32258: LESS
32259: IFFALSE 32297
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32261: LD_ADDR_VAR 0 6
32265: PUSH
32266: LD_VAR 0 6
32270: PPUSH
32271: LD_VAR 0 8
32275: PPUSH
32276: LD_VAR 0 7
32280: PUSH
32281: LD_VAR 0 9
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: PPUSH
32290: CALL_OW 2
32294: ST_TO_ADDR
// break ;
32295: GO 32299
// end ; end ;
32297: GO 32236
32299: POP
32300: POP
// end ; end ;
32301: GO 32100
32303: POP
32304: POP
// if result and not asc then
32305: LD_VAR 0 6
32309: PUSH
32310: LD_VAR 0 4
32314: NOT
32315: AND
32316: IFFALSE 32391
// begin tmp := result ;
32318: LD_ADDR_VAR 0 9
32322: PUSH
32323: LD_VAR 0 6
32327: ST_TO_ADDR
// for i = tmp downto 1 do
32328: LD_ADDR_VAR 0 7
32332: PUSH
32333: DOUBLE
32334: LD_VAR 0 9
32338: INC
32339: ST_TO_ADDR
32340: LD_INT 1
32342: PUSH
32343: FOR_DOWNTO
32344: IFFALSE 32389
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
32346: LD_ADDR_VAR 0 6
32350: PUSH
32351: LD_VAR 0 6
32355: PPUSH
32356: LD_VAR 0 9
32360: PUSH
32361: LD_VAR 0 7
32365: MINUS
32366: PUSH
32367: LD_INT 1
32369: PLUS
32370: PPUSH
32371: LD_VAR 0 9
32375: PUSH
32376: LD_VAR 0 7
32380: ARRAY
32381: PPUSH
32382: CALL_OW 1
32386: ST_TO_ADDR
32387: GO 32343
32389: POP
32390: POP
// end ; tmp := [ ] ;
32391: LD_ADDR_VAR 0 9
32395: PUSH
32396: EMPTY
32397: ST_TO_ADDR
// if mode then
32398: LD_VAR 0 5
32402: IFFALSE 32471
// begin for i = 1 to result do
32404: LD_ADDR_VAR 0 7
32408: PUSH
32409: DOUBLE
32410: LD_INT 1
32412: DEC
32413: ST_TO_ADDR
32414: LD_VAR 0 6
32418: PUSH
32419: FOR_TO
32420: IFFALSE 32459
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
32422: LD_ADDR_VAR 0 9
32426: PUSH
32427: LD_VAR 0 9
32431: PPUSH
32432: LD_VAR 0 7
32436: PPUSH
32437: LD_VAR 0 6
32441: PUSH
32442: LD_VAR 0 7
32446: ARRAY
32447: PUSH
32448: LD_INT 1
32450: ARRAY
32451: PPUSH
32452: CALL_OW 1
32456: ST_TO_ADDR
32457: GO 32419
32459: POP
32460: POP
// result := tmp ;
32461: LD_ADDR_VAR 0 6
32465: PUSH
32466: LD_VAR 0 9
32470: ST_TO_ADDR
// end ; end ;
32471: LD_VAR 0 6
32475: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
32476: LD_INT 0
32478: PPUSH
32479: PPUSH
32480: PPUSH
32481: PPUSH
32482: PPUSH
32483: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
32484: LD_ADDR_VAR 0 5
32488: PUSH
32489: LD_INT 0
32491: PUSH
32492: LD_INT 0
32494: PUSH
32495: LD_INT 0
32497: PUSH
32498: EMPTY
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: LIST
32504: LIST
32505: ST_TO_ADDR
// if not x or not y then
32506: LD_VAR 0 2
32510: NOT
32511: PUSH
32512: LD_VAR 0 3
32516: NOT
32517: OR
32518: IFFALSE 32522
// exit ;
32520: GO 34168
// if not range then
32522: LD_VAR 0 4
32526: NOT
32527: IFFALSE 32537
// range := 10 ;
32529: LD_ADDR_VAR 0 4
32533: PUSH
32534: LD_INT 10
32536: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32537: LD_ADDR_VAR 0 8
32541: PUSH
32542: LD_INT 81
32544: PUSH
32545: LD_VAR 0 1
32549: PUSH
32550: EMPTY
32551: LIST
32552: LIST
32553: PUSH
32554: LD_INT 92
32556: PUSH
32557: LD_VAR 0 2
32561: PUSH
32562: LD_VAR 0 3
32566: PUSH
32567: LD_VAR 0 4
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: LIST
32576: LIST
32577: PUSH
32578: LD_INT 3
32580: PUSH
32581: LD_INT 21
32583: PUSH
32584: LD_INT 3
32586: PUSH
32587: EMPTY
32588: LIST
32589: LIST
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: PUSH
32595: EMPTY
32596: LIST
32597: LIST
32598: LIST
32599: PPUSH
32600: CALL_OW 69
32604: ST_TO_ADDR
// if not tmp then
32605: LD_VAR 0 8
32609: NOT
32610: IFFALSE 32614
// exit ;
32612: GO 34168
// for i in tmp do
32614: LD_ADDR_VAR 0 6
32618: PUSH
32619: LD_VAR 0 8
32623: PUSH
32624: FOR_IN
32625: IFFALSE 34143
// begin points := [ 0 , 0 , 0 ] ;
32627: LD_ADDR_VAR 0 9
32631: PUSH
32632: LD_INT 0
32634: PUSH
32635: LD_INT 0
32637: PUSH
32638: LD_INT 0
32640: PUSH
32641: EMPTY
32642: LIST
32643: LIST
32644: LIST
32645: ST_TO_ADDR
// bpoints := 1 ;
32646: LD_ADDR_VAR 0 10
32650: PUSH
32651: LD_INT 1
32653: ST_TO_ADDR
// case GetType ( i ) of unit_human :
32654: LD_VAR 0 6
32658: PPUSH
32659: CALL_OW 247
32663: PUSH
32664: LD_INT 1
32666: DOUBLE
32667: EQUAL
32668: IFTRUE 32672
32670: GO 33250
32672: POP
// begin if GetClass ( i ) = 1 then
32673: LD_VAR 0 6
32677: PPUSH
32678: CALL_OW 257
32682: PUSH
32683: LD_INT 1
32685: EQUAL
32686: IFFALSE 32707
// points := [ 10 , 5 , 3 ] ;
32688: LD_ADDR_VAR 0 9
32692: PUSH
32693: LD_INT 10
32695: PUSH
32696: LD_INT 5
32698: PUSH
32699: LD_INT 3
32701: PUSH
32702: EMPTY
32703: LIST
32704: LIST
32705: LIST
32706: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
32707: LD_VAR 0 6
32711: PPUSH
32712: CALL_OW 257
32716: PUSH
32717: LD_INT 2
32719: PUSH
32720: LD_INT 3
32722: PUSH
32723: LD_INT 4
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: LIST
32730: IN
32731: IFFALSE 32752
// points := [ 3 , 2 , 1 ] ;
32733: LD_ADDR_VAR 0 9
32737: PUSH
32738: LD_INT 3
32740: PUSH
32741: LD_INT 2
32743: PUSH
32744: LD_INT 1
32746: PUSH
32747: EMPTY
32748: LIST
32749: LIST
32750: LIST
32751: ST_TO_ADDR
// if GetClass ( i ) = 5 then
32752: LD_VAR 0 6
32756: PPUSH
32757: CALL_OW 257
32761: PUSH
32762: LD_INT 5
32764: EQUAL
32765: IFFALSE 32786
// points := [ 130 , 5 , 2 ] ;
32767: LD_ADDR_VAR 0 9
32771: PUSH
32772: LD_INT 130
32774: PUSH
32775: LD_INT 5
32777: PUSH
32778: LD_INT 2
32780: PUSH
32781: EMPTY
32782: LIST
32783: LIST
32784: LIST
32785: ST_TO_ADDR
// if GetClass ( i ) = 8 then
32786: LD_VAR 0 6
32790: PPUSH
32791: CALL_OW 257
32795: PUSH
32796: LD_INT 8
32798: EQUAL
32799: IFFALSE 32820
// points := [ 35 , 35 , 30 ] ;
32801: LD_ADDR_VAR 0 9
32805: PUSH
32806: LD_INT 35
32808: PUSH
32809: LD_INT 35
32811: PUSH
32812: LD_INT 30
32814: PUSH
32815: EMPTY
32816: LIST
32817: LIST
32818: LIST
32819: ST_TO_ADDR
// if GetClass ( i ) = 9 then
32820: LD_VAR 0 6
32824: PPUSH
32825: CALL_OW 257
32829: PUSH
32830: LD_INT 9
32832: EQUAL
32833: IFFALSE 32854
// points := [ 20 , 55 , 40 ] ;
32835: LD_ADDR_VAR 0 9
32839: PUSH
32840: LD_INT 20
32842: PUSH
32843: LD_INT 55
32845: PUSH
32846: LD_INT 40
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: LIST
32853: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
32854: LD_VAR 0 6
32858: PPUSH
32859: CALL_OW 257
32863: PUSH
32864: LD_INT 12
32866: PUSH
32867: LD_INT 16
32869: PUSH
32870: EMPTY
32871: LIST
32872: LIST
32873: IN
32874: IFFALSE 32895
// points := [ 5 , 3 , 2 ] ;
32876: LD_ADDR_VAR 0 9
32880: PUSH
32881: LD_INT 5
32883: PUSH
32884: LD_INT 3
32886: PUSH
32887: LD_INT 2
32889: PUSH
32890: EMPTY
32891: LIST
32892: LIST
32893: LIST
32894: ST_TO_ADDR
// if GetClass ( i ) = 17 then
32895: LD_VAR 0 6
32899: PPUSH
32900: CALL_OW 257
32904: PUSH
32905: LD_INT 17
32907: EQUAL
32908: IFFALSE 32929
// points := [ 100 , 50 , 75 ] ;
32910: LD_ADDR_VAR 0 9
32914: PUSH
32915: LD_INT 100
32917: PUSH
32918: LD_INT 50
32920: PUSH
32921: LD_INT 75
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: LIST
32928: ST_TO_ADDR
// if GetClass ( i ) = 15 then
32929: LD_VAR 0 6
32933: PPUSH
32934: CALL_OW 257
32938: PUSH
32939: LD_INT 15
32941: EQUAL
32942: IFFALSE 32963
// points := [ 10 , 5 , 3 ] ;
32944: LD_ADDR_VAR 0 9
32948: PUSH
32949: LD_INT 10
32951: PUSH
32952: LD_INT 5
32954: PUSH
32955: LD_INT 3
32957: PUSH
32958: EMPTY
32959: LIST
32960: LIST
32961: LIST
32962: ST_TO_ADDR
// if GetClass ( i ) = 14 then
32963: LD_VAR 0 6
32967: PPUSH
32968: CALL_OW 257
32972: PUSH
32973: LD_INT 14
32975: EQUAL
32976: IFFALSE 32997
// points := [ 10 , 0 , 0 ] ;
32978: LD_ADDR_VAR 0 9
32982: PUSH
32983: LD_INT 10
32985: PUSH
32986: LD_INT 0
32988: PUSH
32989: LD_INT 0
32991: PUSH
32992: EMPTY
32993: LIST
32994: LIST
32995: LIST
32996: ST_TO_ADDR
// if GetClass ( i ) = 11 then
32997: LD_VAR 0 6
33001: PPUSH
33002: CALL_OW 257
33006: PUSH
33007: LD_INT 11
33009: EQUAL
33010: IFFALSE 33031
// points := [ 30 , 10 , 5 ] ;
33012: LD_ADDR_VAR 0 9
33016: PUSH
33017: LD_INT 30
33019: PUSH
33020: LD_INT 10
33022: PUSH
33023: LD_INT 5
33025: PUSH
33026: EMPTY
33027: LIST
33028: LIST
33029: LIST
33030: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33031: LD_VAR 0 1
33035: PPUSH
33036: LD_INT 5
33038: PPUSH
33039: CALL_OW 321
33043: PUSH
33044: LD_INT 2
33046: EQUAL
33047: IFFALSE 33064
// bpoints := bpoints * 1.8 ;
33049: LD_ADDR_VAR 0 10
33053: PUSH
33054: LD_VAR 0 10
33058: PUSH
33059: LD_REAL  1.80000000000000E+0000
33062: MUL
33063: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33064: LD_VAR 0 6
33068: PPUSH
33069: CALL_OW 257
33073: PUSH
33074: LD_INT 1
33076: PUSH
33077: LD_INT 2
33079: PUSH
33080: LD_INT 3
33082: PUSH
33083: LD_INT 4
33085: PUSH
33086: EMPTY
33087: LIST
33088: LIST
33089: LIST
33090: LIST
33091: IN
33092: PUSH
33093: LD_VAR 0 1
33097: PPUSH
33098: LD_INT 51
33100: PPUSH
33101: CALL_OW 321
33105: PUSH
33106: LD_INT 2
33108: EQUAL
33109: AND
33110: IFFALSE 33127
// bpoints := bpoints * 1.2 ;
33112: LD_ADDR_VAR 0 10
33116: PUSH
33117: LD_VAR 0 10
33121: PUSH
33122: LD_REAL  1.20000000000000E+0000
33125: MUL
33126: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33127: LD_VAR 0 6
33131: PPUSH
33132: CALL_OW 257
33136: PUSH
33137: LD_INT 5
33139: PUSH
33140: LD_INT 7
33142: PUSH
33143: LD_INT 9
33145: PUSH
33146: EMPTY
33147: LIST
33148: LIST
33149: LIST
33150: IN
33151: PUSH
33152: LD_VAR 0 1
33156: PPUSH
33157: LD_INT 52
33159: PPUSH
33160: CALL_OW 321
33164: PUSH
33165: LD_INT 2
33167: EQUAL
33168: AND
33169: IFFALSE 33186
// bpoints := bpoints * 1.5 ;
33171: LD_ADDR_VAR 0 10
33175: PUSH
33176: LD_VAR 0 10
33180: PUSH
33181: LD_REAL  1.50000000000000E+0000
33184: MUL
33185: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33186: LD_VAR 0 1
33190: PPUSH
33191: LD_INT 66
33193: PPUSH
33194: CALL_OW 321
33198: PUSH
33199: LD_INT 2
33201: EQUAL
33202: IFFALSE 33219
// bpoints := bpoints * 1.1 ;
33204: LD_ADDR_VAR 0 10
33208: PUSH
33209: LD_VAR 0 10
33213: PUSH
33214: LD_REAL  1.10000000000000E+0000
33217: MUL
33218: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33219: LD_ADDR_VAR 0 10
33223: PUSH
33224: LD_VAR 0 10
33228: PUSH
33229: LD_VAR 0 6
33233: PPUSH
33234: LD_INT 1
33236: PPUSH
33237: CALL_OW 259
33241: PUSH
33242: LD_REAL  1.15000000000000E+0000
33245: MUL
33246: MUL
33247: ST_TO_ADDR
// end ; unit_vehicle :
33248: GO 34072
33250: LD_INT 2
33252: DOUBLE
33253: EQUAL
33254: IFTRUE 33258
33256: GO 34060
33258: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33259: LD_VAR 0 6
33263: PPUSH
33264: CALL_OW 264
33268: PUSH
33269: LD_INT 2
33271: PUSH
33272: LD_INT 42
33274: PUSH
33275: LD_INT 24
33277: PUSH
33278: EMPTY
33279: LIST
33280: LIST
33281: LIST
33282: IN
33283: IFFALSE 33304
// points := [ 25 , 5 , 3 ] ;
33285: LD_ADDR_VAR 0 9
33289: PUSH
33290: LD_INT 25
33292: PUSH
33293: LD_INT 5
33295: PUSH
33296: LD_INT 3
33298: PUSH
33299: EMPTY
33300: LIST
33301: LIST
33302: LIST
33303: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
33304: LD_VAR 0 6
33308: PPUSH
33309: CALL_OW 264
33313: PUSH
33314: LD_INT 4
33316: PUSH
33317: LD_INT 43
33319: PUSH
33320: LD_INT 25
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: LIST
33327: IN
33328: IFFALSE 33349
// points := [ 40 , 15 , 5 ] ;
33330: LD_ADDR_VAR 0 9
33334: PUSH
33335: LD_INT 40
33337: PUSH
33338: LD_INT 15
33340: PUSH
33341: LD_INT 5
33343: PUSH
33344: EMPTY
33345: LIST
33346: LIST
33347: LIST
33348: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
33349: LD_VAR 0 6
33353: PPUSH
33354: CALL_OW 264
33358: PUSH
33359: LD_INT 3
33361: PUSH
33362: LD_INT 23
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: IN
33369: IFFALSE 33390
// points := [ 7 , 25 , 8 ] ;
33371: LD_ADDR_VAR 0 9
33375: PUSH
33376: LD_INT 7
33378: PUSH
33379: LD_INT 25
33381: PUSH
33382: LD_INT 8
33384: PUSH
33385: EMPTY
33386: LIST
33387: LIST
33388: LIST
33389: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
33390: LD_VAR 0 6
33394: PPUSH
33395: CALL_OW 264
33399: PUSH
33400: LD_INT 5
33402: PUSH
33403: LD_INT 27
33405: PUSH
33406: LD_INT 44
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: LIST
33413: IN
33414: IFFALSE 33435
// points := [ 14 , 50 , 16 ] ;
33416: LD_ADDR_VAR 0 9
33420: PUSH
33421: LD_INT 14
33423: PUSH
33424: LD_INT 50
33426: PUSH
33427: LD_INT 16
33429: PUSH
33430: EMPTY
33431: LIST
33432: LIST
33433: LIST
33434: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
33435: LD_VAR 0 6
33439: PPUSH
33440: CALL_OW 264
33444: PUSH
33445: LD_INT 6
33447: PUSH
33448: LD_INT 46
33450: PUSH
33451: EMPTY
33452: LIST
33453: LIST
33454: IN
33455: IFFALSE 33476
// points := [ 32 , 120 , 70 ] ;
33457: LD_ADDR_VAR 0 9
33461: PUSH
33462: LD_INT 32
33464: PUSH
33465: LD_INT 120
33467: PUSH
33468: LD_INT 70
33470: PUSH
33471: EMPTY
33472: LIST
33473: LIST
33474: LIST
33475: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
33476: LD_VAR 0 6
33480: PPUSH
33481: CALL_OW 264
33485: PUSH
33486: LD_INT 7
33488: PUSH
33489: LD_INT 28
33491: PUSH
33492: LD_INT 45
33494: PUSH
33495: EMPTY
33496: LIST
33497: LIST
33498: LIST
33499: IN
33500: IFFALSE 33521
// points := [ 35 , 20 , 45 ] ;
33502: LD_ADDR_VAR 0 9
33506: PUSH
33507: LD_INT 35
33509: PUSH
33510: LD_INT 20
33512: PUSH
33513: LD_INT 45
33515: PUSH
33516: EMPTY
33517: LIST
33518: LIST
33519: LIST
33520: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
33521: LD_VAR 0 6
33525: PPUSH
33526: CALL_OW 264
33530: PUSH
33531: LD_INT 47
33533: PUSH
33534: EMPTY
33535: LIST
33536: IN
33537: IFFALSE 33558
// points := [ 67 , 45 , 75 ] ;
33539: LD_ADDR_VAR 0 9
33543: PUSH
33544: LD_INT 67
33546: PUSH
33547: LD_INT 45
33549: PUSH
33550: LD_INT 75
33552: PUSH
33553: EMPTY
33554: LIST
33555: LIST
33556: LIST
33557: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
33558: LD_VAR 0 6
33562: PPUSH
33563: CALL_OW 264
33567: PUSH
33568: LD_INT 26
33570: PUSH
33571: EMPTY
33572: LIST
33573: IN
33574: IFFALSE 33595
// points := [ 120 , 30 , 80 ] ;
33576: LD_ADDR_VAR 0 9
33580: PUSH
33581: LD_INT 120
33583: PUSH
33584: LD_INT 30
33586: PUSH
33587: LD_INT 80
33589: PUSH
33590: EMPTY
33591: LIST
33592: LIST
33593: LIST
33594: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
33595: LD_VAR 0 6
33599: PPUSH
33600: CALL_OW 264
33604: PUSH
33605: LD_INT 22
33607: PUSH
33608: EMPTY
33609: LIST
33610: IN
33611: IFFALSE 33632
// points := [ 40 , 1 , 1 ] ;
33613: LD_ADDR_VAR 0 9
33617: PUSH
33618: LD_INT 40
33620: PUSH
33621: LD_INT 1
33623: PUSH
33624: LD_INT 1
33626: PUSH
33627: EMPTY
33628: LIST
33629: LIST
33630: LIST
33631: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
33632: LD_VAR 0 6
33636: PPUSH
33637: CALL_OW 264
33641: PUSH
33642: LD_INT 29
33644: PUSH
33645: EMPTY
33646: LIST
33647: IN
33648: IFFALSE 33669
// points := [ 70 , 200 , 400 ] ;
33650: LD_ADDR_VAR 0 9
33654: PUSH
33655: LD_INT 70
33657: PUSH
33658: LD_INT 200
33660: PUSH
33661: LD_INT 400
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: LIST
33668: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
33669: LD_VAR 0 6
33673: PPUSH
33674: CALL_OW 264
33678: PUSH
33679: LD_INT 14
33681: PUSH
33682: LD_INT 53
33684: PUSH
33685: EMPTY
33686: LIST
33687: LIST
33688: IN
33689: IFFALSE 33710
// points := [ 40 , 10 , 20 ] ;
33691: LD_ADDR_VAR 0 9
33695: PUSH
33696: LD_INT 40
33698: PUSH
33699: LD_INT 10
33701: PUSH
33702: LD_INT 20
33704: PUSH
33705: EMPTY
33706: LIST
33707: LIST
33708: LIST
33709: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
33710: LD_VAR 0 6
33714: PPUSH
33715: CALL_OW 264
33719: PUSH
33720: LD_INT 9
33722: PUSH
33723: EMPTY
33724: LIST
33725: IN
33726: IFFALSE 33747
// points := [ 5 , 70 , 20 ] ;
33728: LD_ADDR_VAR 0 9
33732: PUSH
33733: LD_INT 5
33735: PUSH
33736: LD_INT 70
33738: PUSH
33739: LD_INT 20
33741: PUSH
33742: EMPTY
33743: LIST
33744: LIST
33745: LIST
33746: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
33747: LD_VAR 0 6
33751: PPUSH
33752: CALL_OW 264
33756: PUSH
33757: LD_INT 10
33759: PUSH
33760: EMPTY
33761: LIST
33762: IN
33763: IFFALSE 33784
// points := [ 35 , 110 , 70 ] ;
33765: LD_ADDR_VAR 0 9
33769: PUSH
33770: LD_INT 35
33772: PUSH
33773: LD_INT 110
33775: PUSH
33776: LD_INT 70
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: LIST
33783: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
33784: LD_VAR 0 6
33788: PPUSH
33789: CALL_OW 265
33793: PUSH
33794: LD_INT 25
33796: EQUAL
33797: IFFALSE 33818
// points := [ 80 , 65 , 100 ] ;
33799: LD_ADDR_VAR 0 9
33803: PUSH
33804: LD_INT 80
33806: PUSH
33807: LD_INT 65
33809: PUSH
33810: LD_INT 100
33812: PUSH
33813: EMPTY
33814: LIST
33815: LIST
33816: LIST
33817: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
33818: LD_VAR 0 6
33822: PPUSH
33823: CALL_OW 263
33827: PUSH
33828: LD_INT 1
33830: EQUAL
33831: IFFALSE 33866
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
33833: LD_ADDR_VAR 0 10
33837: PUSH
33838: LD_VAR 0 10
33842: PUSH
33843: LD_VAR 0 6
33847: PPUSH
33848: CALL_OW 311
33852: PPUSH
33853: LD_INT 3
33855: PPUSH
33856: CALL_OW 259
33860: PUSH
33861: LD_INT 4
33863: MUL
33864: MUL
33865: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
33866: LD_VAR 0 6
33870: PPUSH
33871: CALL_OW 263
33875: PUSH
33876: LD_INT 2
33878: EQUAL
33879: IFFALSE 33930
// begin j := IsControledBy ( i ) ;
33881: LD_ADDR_VAR 0 7
33885: PUSH
33886: LD_VAR 0 6
33890: PPUSH
33891: CALL_OW 312
33895: ST_TO_ADDR
// if j then
33896: LD_VAR 0 7
33900: IFFALSE 33930
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
33902: LD_ADDR_VAR 0 10
33906: PUSH
33907: LD_VAR 0 10
33911: PUSH
33912: LD_VAR 0 7
33916: PPUSH
33917: LD_INT 3
33919: PPUSH
33920: CALL_OW 259
33924: PUSH
33925: LD_INT 3
33927: MUL
33928: MUL
33929: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
33930: LD_VAR 0 6
33934: PPUSH
33935: CALL_OW 264
33939: PUSH
33940: LD_INT 5
33942: PUSH
33943: LD_INT 6
33945: PUSH
33946: LD_INT 46
33948: PUSH
33949: LD_INT 44
33951: PUSH
33952: LD_INT 47
33954: PUSH
33955: LD_INT 45
33957: PUSH
33958: LD_INT 28
33960: PUSH
33961: LD_INT 7
33963: PUSH
33964: LD_INT 27
33966: PUSH
33967: LD_INT 29
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: LIST
33974: LIST
33975: LIST
33976: LIST
33977: LIST
33978: LIST
33979: LIST
33980: LIST
33981: IN
33982: PUSH
33983: LD_VAR 0 1
33987: PPUSH
33988: LD_INT 52
33990: PPUSH
33991: CALL_OW 321
33995: PUSH
33996: LD_INT 2
33998: EQUAL
33999: AND
34000: IFFALSE 34017
// bpoints := bpoints * 1.2 ;
34002: LD_ADDR_VAR 0 10
34006: PUSH
34007: LD_VAR 0 10
34011: PUSH
34012: LD_REAL  1.20000000000000E+0000
34015: MUL
34016: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34017: LD_VAR 0 6
34021: PPUSH
34022: CALL_OW 264
34026: PUSH
34027: LD_INT 6
34029: PUSH
34030: LD_INT 46
34032: PUSH
34033: LD_INT 47
34035: PUSH
34036: EMPTY
34037: LIST
34038: LIST
34039: LIST
34040: IN
34041: IFFALSE 34058
// bpoints := bpoints * 1.2 ;
34043: LD_ADDR_VAR 0 10
34047: PUSH
34048: LD_VAR 0 10
34052: PUSH
34053: LD_REAL  1.20000000000000E+0000
34056: MUL
34057: ST_TO_ADDR
// end ; unit_building :
34058: GO 34072
34060: LD_INT 3
34062: DOUBLE
34063: EQUAL
34064: IFTRUE 34068
34066: GO 34071
34068: POP
// ; end ;
34069: GO 34072
34071: POP
// for j = 1 to 3 do
34072: LD_ADDR_VAR 0 7
34076: PUSH
34077: DOUBLE
34078: LD_INT 1
34080: DEC
34081: ST_TO_ADDR
34082: LD_INT 3
34084: PUSH
34085: FOR_TO
34086: IFFALSE 34139
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34088: LD_ADDR_VAR 0 5
34092: PUSH
34093: LD_VAR 0 5
34097: PPUSH
34098: LD_VAR 0 7
34102: PPUSH
34103: LD_VAR 0 5
34107: PUSH
34108: LD_VAR 0 7
34112: ARRAY
34113: PUSH
34114: LD_VAR 0 9
34118: PUSH
34119: LD_VAR 0 7
34123: ARRAY
34124: PUSH
34125: LD_VAR 0 10
34129: MUL
34130: PLUS
34131: PPUSH
34132: CALL_OW 1
34136: ST_TO_ADDR
34137: GO 34085
34139: POP
34140: POP
// end ;
34141: GO 32624
34143: POP
34144: POP
// result := Replace ( result , 4 , tmp ) ;
34145: LD_ADDR_VAR 0 5
34149: PUSH
34150: LD_VAR 0 5
34154: PPUSH
34155: LD_INT 4
34157: PPUSH
34158: LD_VAR 0 8
34162: PPUSH
34163: CALL_OW 1
34167: ST_TO_ADDR
// end ;
34168: LD_VAR 0 5
34172: RET
// export function DangerAtRange ( unit , range ) ; begin
34173: LD_INT 0
34175: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34176: LD_ADDR_VAR 0 3
34180: PUSH
34181: LD_VAR 0 1
34185: PPUSH
34186: CALL_OW 255
34190: PPUSH
34191: LD_VAR 0 1
34195: PPUSH
34196: CALL_OW 250
34200: PPUSH
34201: LD_VAR 0 1
34205: PPUSH
34206: CALL_OW 251
34210: PPUSH
34211: LD_VAR 0 2
34215: PPUSH
34216: CALL 32476 0 4
34220: ST_TO_ADDR
// end ;
34221: LD_VAR 0 3
34225: RET
// export function DangerInArea ( side , area ) ; begin
34226: LD_INT 0
34228: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34229: LD_ADDR_VAR 0 3
34233: PUSH
34234: LD_VAR 0 2
34238: PPUSH
34239: LD_INT 81
34241: PUSH
34242: LD_VAR 0 1
34246: PUSH
34247: EMPTY
34248: LIST
34249: LIST
34250: PPUSH
34251: CALL_OW 70
34255: ST_TO_ADDR
// end ;
34256: LD_VAR 0 3
34260: RET
// export function IsExtension ( b ) ; begin
34261: LD_INT 0
34263: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34264: LD_ADDR_VAR 0 2
34268: PUSH
34269: LD_VAR 0 1
34273: PUSH
34274: LD_INT 23
34276: PUSH
34277: LD_INT 20
34279: PUSH
34280: LD_INT 22
34282: PUSH
34283: LD_INT 17
34285: PUSH
34286: LD_INT 24
34288: PUSH
34289: LD_INT 21
34291: PUSH
34292: LD_INT 19
34294: PUSH
34295: LD_INT 16
34297: PUSH
34298: LD_INT 25
34300: PUSH
34301: LD_INT 18
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: LIST
34308: LIST
34309: LIST
34310: LIST
34311: LIST
34312: LIST
34313: LIST
34314: LIST
34315: IN
34316: ST_TO_ADDR
// end ;
34317: LD_VAR 0 2
34321: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
34322: LD_INT 0
34324: PPUSH
34325: PPUSH
34326: PPUSH
// result := [ ] ;
34327: LD_ADDR_VAR 0 3
34331: PUSH
34332: EMPTY
34333: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
34334: LD_ADDR_VAR 0 4
34338: PUSH
34339: LD_VAR 0 2
34343: PPUSH
34344: LD_INT 21
34346: PUSH
34347: LD_INT 3
34349: PUSH
34350: EMPTY
34351: LIST
34352: LIST
34353: PPUSH
34354: CALL_OW 70
34358: ST_TO_ADDR
// if not tmp then
34359: LD_VAR 0 4
34363: NOT
34364: IFFALSE 34368
// exit ;
34366: GO 34426
// for i in tmp do
34368: LD_ADDR_VAR 0 5
34372: PUSH
34373: LD_VAR 0 4
34377: PUSH
34378: FOR_IN
34379: IFFALSE 34414
// if GetBase ( i ) <> base then
34381: LD_VAR 0 5
34385: PPUSH
34386: CALL_OW 274
34390: PUSH
34391: LD_VAR 0 1
34395: NONEQUAL
34396: IFFALSE 34412
// ComLinkToBase ( base , i ) ;
34398: LD_VAR 0 1
34402: PPUSH
34403: LD_VAR 0 5
34407: PPUSH
34408: CALL_OW 169
34412: GO 34378
34414: POP
34415: POP
// result := tmp ;
34416: LD_ADDR_VAR 0 3
34420: PUSH
34421: LD_VAR 0 4
34425: ST_TO_ADDR
// end ;
34426: LD_VAR 0 3
34430: RET
// export function ComComplete ( unit , b ) ; var i ; begin
34431: LD_INT 0
34433: PPUSH
34434: PPUSH
// if BuildingStatus ( b ) = bs_build then
34435: LD_VAR 0 2
34439: PPUSH
34440: CALL_OW 461
34444: PUSH
34445: LD_INT 1
34447: EQUAL
34448: IFFALSE 34508
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
34450: LD_VAR 0 1
34454: PPUSH
34455: LD_STRING h
34457: PUSH
34458: LD_VAR 0 2
34462: PPUSH
34463: CALL_OW 250
34467: PUSH
34468: LD_VAR 0 2
34472: PPUSH
34473: CALL_OW 251
34477: PUSH
34478: LD_VAR 0 2
34482: PUSH
34483: LD_INT 0
34485: PUSH
34486: LD_INT 0
34488: PUSH
34489: LD_INT 0
34491: PUSH
34492: EMPTY
34493: LIST
34494: LIST
34495: LIST
34496: LIST
34497: LIST
34498: LIST
34499: LIST
34500: PUSH
34501: EMPTY
34502: LIST
34503: PPUSH
34504: CALL_OW 446
// end ;
34508: LD_VAR 0 3
34512: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
34513: LD_INT 0
34515: PPUSH
34516: PPUSH
34517: PPUSH
34518: PPUSH
34519: PPUSH
34520: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
34521: LD_VAR 0 1
34525: NOT
34526: PUSH
34527: LD_VAR 0 1
34531: PPUSH
34532: CALL_OW 263
34536: PUSH
34537: LD_INT 2
34539: EQUAL
34540: NOT
34541: OR
34542: IFFALSE 34546
// exit ;
34544: GO 34862
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
34546: LD_ADDR_VAR 0 6
34550: PUSH
34551: LD_INT 22
34553: PUSH
34554: LD_VAR 0 1
34558: PPUSH
34559: CALL_OW 255
34563: PUSH
34564: EMPTY
34565: LIST
34566: LIST
34567: PUSH
34568: LD_INT 2
34570: PUSH
34571: LD_INT 30
34573: PUSH
34574: LD_INT 36
34576: PUSH
34577: EMPTY
34578: LIST
34579: LIST
34580: PUSH
34581: LD_INT 34
34583: PUSH
34584: LD_INT 31
34586: PUSH
34587: EMPTY
34588: LIST
34589: LIST
34590: PUSH
34591: EMPTY
34592: LIST
34593: LIST
34594: LIST
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: PPUSH
34600: CALL_OW 69
34604: ST_TO_ADDR
// if not tmp then
34605: LD_VAR 0 6
34609: NOT
34610: IFFALSE 34614
// exit ;
34612: GO 34862
// result := [ ] ;
34614: LD_ADDR_VAR 0 2
34618: PUSH
34619: EMPTY
34620: ST_TO_ADDR
// for i in tmp do
34621: LD_ADDR_VAR 0 3
34625: PUSH
34626: LD_VAR 0 6
34630: PUSH
34631: FOR_IN
34632: IFFALSE 34703
// begin t := UnitsInside ( i ) ;
34634: LD_ADDR_VAR 0 4
34638: PUSH
34639: LD_VAR 0 3
34643: PPUSH
34644: CALL_OW 313
34648: ST_TO_ADDR
// if t then
34649: LD_VAR 0 4
34653: IFFALSE 34701
// for j in t do
34655: LD_ADDR_VAR 0 7
34659: PUSH
34660: LD_VAR 0 4
34664: PUSH
34665: FOR_IN
34666: IFFALSE 34699
// result := Insert ( result , result + 1 , j ) ;
34668: LD_ADDR_VAR 0 2
34672: PUSH
34673: LD_VAR 0 2
34677: PPUSH
34678: LD_VAR 0 2
34682: PUSH
34683: LD_INT 1
34685: PLUS
34686: PPUSH
34687: LD_VAR 0 7
34691: PPUSH
34692: CALL_OW 2
34696: ST_TO_ADDR
34697: GO 34665
34699: POP
34700: POP
// end ;
34701: GO 34631
34703: POP
34704: POP
// if not result then
34705: LD_VAR 0 2
34709: NOT
34710: IFFALSE 34714
// exit ;
34712: GO 34862
// mech := result [ 1 ] ;
34714: LD_ADDR_VAR 0 5
34718: PUSH
34719: LD_VAR 0 2
34723: PUSH
34724: LD_INT 1
34726: ARRAY
34727: ST_TO_ADDR
// if result > 1 then
34728: LD_VAR 0 2
34732: PUSH
34733: LD_INT 1
34735: GREATER
34736: IFFALSE 34848
// for i = 2 to result do
34738: LD_ADDR_VAR 0 3
34742: PUSH
34743: DOUBLE
34744: LD_INT 2
34746: DEC
34747: ST_TO_ADDR
34748: LD_VAR 0 2
34752: PUSH
34753: FOR_TO
34754: IFFALSE 34846
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
34756: LD_ADDR_VAR 0 4
34760: PUSH
34761: LD_VAR 0 2
34765: PUSH
34766: LD_VAR 0 3
34770: ARRAY
34771: PPUSH
34772: LD_INT 3
34774: PPUSH
34775: CALL_OW 259
34779: PUSH
34780: LD_VAR 0 2
34784: PUSH
34785: LD_VAR 0 3
34789: ARRAY
34790: PPUSH
34791: CALL_OW 432
34795: MINUS
34796: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
34797: LD_VAR 0 4
34801: PUSH
34802: LD_VAR 0 5
34806: PPUSH
34807: LD_INT 3
34809: PPUSH
34810: CALL_OW 259
34814: PUSH
34815: LD_VAR 0 5
34819: PPUSH
34820: CALL_OW 432
34824: MINUS
34825: GREATEREQUAL
34826: IFFALSE 34844
// mech := result [ i ] ;
34828: LD_ADDR_VAR 0 5
34832: PUSH
34833: LD_VAR 0 2
34837: PUSH
34838: LD_VAR 0 3
34842: ARRAY
34843: ST_TO_ADDR
// end ;
34844: GO 34753
34846: POP
34847: POP
// ComLinkTo ( vehicle , mech ) ;
34848: LD_VAR 0 1
34852: PPUSH
34853: LD_VAR 0 5
34857: PPUSH
34858: CALL_OW 135
// end ;
34862: LD_VAR 0 2
34866: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
34867: LD_INT 0
34869: PPUSH
34870: PPUSH
34871: PPUSH
34872: PPUSH
34873: PPUSH
34874: PPUSH
34875: PPUSH
34876: PPUSH
34877: PPUSH
34878: PPUSH
34879: PPUSH
34880: PPUSH
34881: PPUSH
// result := [ ] ;
34882: LD_ADDR_VAR 0 7
34886: PUSH
34887: EMPTY
34888: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
34889: LD_VAR 0 1
34893: PPUSH
34894: CALL_OW 266
34898: PUSH
34899: LD_INT 0
34901: PUSH
34902: LD_INT 1
34904: PUSH
34905: EMPTY
34906: LIST
34907: LIST
34908: IN
34909: NOT
34910: IFFALSE 34914
// exit ;
34912: GO 36545
// if name then
34914: LD_VAR 0 3
34918: IFFALSE 34934
// SetBName ( base_dep , name ) ;
34920: LD_VAR 0 1
34924: PPUSH
34925: LD_VAR 0 3
34929: PPUSH
34930: CALL_OW 500
// base := GetBase ( base_dep ) ;
34934: LD_ADDR_VAR 0 15
34938: PUSH
34939: LD_VAR 0 1
34943: PPUSH
34944: CALL_OW 274
34948: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
34949: LD_ADDR_VAR 0 16
34953: PUSH
34954: LD_VAR 0 1
34958: PPUSH
34959: CALL_OW 255
34963: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
34964: LD_ADDR_VAR 0 17
34968: PUSH
34969: LD_VAR 0 1
34973: PPUSH
34974: CALL_OW 248
34978: ST_TO_ADDR
// if sources then
34979: LD_VAR 0 5
34983: IFFALSE 35030
// for i = 1 to 3 do
34985: LD_ADDR_VAR 0 8
34989: PUSH
34990: DOUBLE
34991: LD_INT 1
34993: DEC
34994: ST_TO_ADDR
34995: LD_INT 3
34997: PUSH
34998: FOR_TO
34999: IFFALSE 35028
// AddResourceType ( base , i , sources [ i ] ) ;
35001: LD_VAR 0 15
35005: PPUSH
35006: LD_VAR 0 8
35010: PPUSH
35011: LD_VAR 0 5
35015: PUSH
35016: LD_VAR 0 8
35020: ARRAY
35021: PPUSH
35022: CALL_OW 276
35026: GO 34998
35028: POP
35029: POP
// buildings := GetBaseBuildings ( base , area ) ;
35030: LD_ADDR_VAR 0 18
35034: PUSH
35035: LD_VAR 0 15
35039: PPUSH
35040: LD_VAR 0 2
35044: PPUSH
35045: CALL 34322 0 2
35049: ST_TO_ADDR
// InitHc ;
35050: CALL_OW 19
// InitUc ;
35054: CALL_OW 18
// uc_side := side ;
35058: LD_ADDR_OWVAR 20
35062: PUSH
35063: LD_VAR 0 16
35067: ST_TO_ADDR
// uc_nation := nation ;
35068: LD_ADDR_OWVAR 21
35072: PUSH
35073: LD_VAR 0 17
35077: ST_TO_ADDR
// if buildings then
35078: LD_VAR 0 18
35082: IFFALSE 36404
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35084: LD_ADDR_VAR 0 19
35088: PUSH
35089: LD_VAR 0 18
35093: PPUSH
35094: LD_INT 2
35096: PUSH
35097: LD_INT 30
35099: PUSH
35100: LD_INT 29
35102: PUSH
35103: EMPTY
35104: LIST
35105: LIST
35106: PUSH
35107: LD_INT 30
35109: PUSH
35110: LD_INT 30
35112: PUSH
35113: EMPTY
35114: LIST
35115: LIST
35116: PUSH
35117: EMPTY
35118: LIST
35119: LIST
35120: LIST
35121: PPUSH
35122: CALL_OW 72
35126: ST_TO_ADDR
// if tmp then
35127: LD_VAR 0 19
35131: IFFALSE 35179
// for i in tmp do
35133: LD_ADDR_VAR 0 8
35137: PUSH
35138: LD_VAR 0 19
35142: PUSH
35143: FOR_IN
35144: IFFALSE 35177
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35146: LD_VAR 0 8
35150: PPUSH
35151: CALL_OW 250
35155: PPUSH
35156: LD_VAR 0 8
35160: PPUSH
35161: CALL_OW 251
35165: PPUSH
35166: LD_VAR 0 16
35170: PPUSH
35171: CALL_OW 441
35175: GO 35143
35177: POP
35178: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35179: LD_VAR 0 18
35183: PPUSH
35184: LD_INT 2
35186: PUSH
35187: LD_INT 30
35189: PUSH
35190: LD_INT 32
35192: PUSH
35193: EMPTY
35194: LIST
35195: LIST
35196: PUSH
35197: LD_INT 30
35199: PUSH
35200: LD_INT 33
35202: PUSH
35203: EMPTY
35204: LIST
35205: LIST
35206: PUSH
35207: EMPTY
35208: LIST
35209: LIST
35210: LIST
35211: PPUSH
35212: CALL_OW 72
35216: IFFALSE 35304
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35218: LD_ADDR_VAR 0 8
35222: PUSH
35223: LD_VAR 0 18
35227: PPUSH
35228: LD_INT 2
35230: PUSH
35231: LD_INT 30
35233: PUSH
35234: LD_INT 32
35236: PUSH
35237: EMPTY
35238: LIST
35239: LIST
35240: PUSH
35241: LD_INT 30
35243: PUSH
35244: LD_INT 33
35246: PUSH
35247: EMPTY
35248: LIST
35249: LIST
35250: PUSH
35251: EMPTY
35252: LIST
35253: LIST
35254: LIST
35255: PPUSH
35256: CALL_OW 72
35260: PUSH
35261: FOR_IN
35262: IFFALSE 35302
// begin if not GetBWeapon ( i ) then
35264: LD_VAR 0 8
35268: PPUSH
35269: CALL_OW 269
35273: NOT
35274: IFFALSE 35300
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
35276: LD_VAR 0 8
35280: PPUSH
35281: LD_VAR 0 8
35285: PPUSH
35286: LD_VAR 0 2
35290: PPUSH
35291: CALL 36550 0 2
35295: PPUSH
35296: CALL_OW 431
// end ;
35300: GO 35261
35302: POP
35303: POP
// end ; for i = 1 to personel do
35304: LD_ADDR_VAR 0 8
35308: PUSH
35309: DOUBLE
35310: LD_INT 1
35312: DEC
35313: ST_TO_ADDR
35314: LD_VAR 0 6
35318: PUSH
35319: FOR_TO
35320: IFFALSE 36384
// begin if i > 4 then
35322: LD_VAR 0 8
35326: PUSH
35327: LD_INT 4
35329: GREATER
35330: IFFALSE 35334
// break ;
35332: GO 36384
// case i of 1 :
35334: LD_VAR 0 8
35338: PUSH
35339: LD_INT 1
35341: DOUBLE
35342: EQUAL
35343: IFTRUE 35347
35345: GO 35427
35347: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
35348: LD_ADDR_VAR 0 12
35352: PUSH
35353: LD_VAR 0 18
35357: PPUSH
35358: LD_INT 22
35360: PUSH
35361: LD_VAR 0 16
35365: PUSH
35366: EMPTY
35367: LIST
35368: LIST
35369: PUSH
35370: LD_INT 58
35372: PUSH
35373: EMPTY
35374: LIST
35375: PUSH
35376: LD_INT 2
35378: PUSH
35379: LD_INT 30
35381: PUSH
35382: LD_INT 32
35384: PUSH
35385: EMPTY
35386: LIST
35387: LIST
35388: PUSH
35389: LD_INT 30
35391: PUSH
35392: LD_INT 4
35394: PUSH
35395: EMPTY
35396: LIST
35397: LIST
35398: PUSH
35399: LD_INT 30
35401: PUSH
35402: LD_INT 5
35404: PUSH
35405: EMPTY
35406: LIST
35407: LIST
35408: PUSH
35409: EMPTY
35410: LIST
35411: LIST
35412: LIST
35413: LIST
35414: PUSH
35415: EMPTY
35416: LIST
35417: LIST
35418: LIST
35419: PPUSH
35420: CALL_OW 72
35424: ST_TO_ADDR
35425: GO 35649
35427: LD_INT 2
35429: DOUBLE
35430: EQUAL
35431: IFTRUE 35435
35433: GO 35497
35435: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
35436: LD_ADDR_VAR 0 12
35440: PUSH
35441: LD_VAR 0 18
35445: PPUSH
35446: LD_INT 22
35448: PUSH
35449: LD_VAR 0 16
35453: PUSH
35454: EMPTY
35455: LIST
35456: LIST
35457: PUSH
35458: LD_INT 2
35460: PUSH
35461: LD_INT 30
35463: PUSH
35464: LD_INT 0
35466: PUSH
35467: EMPTY
35468: LIST
35469: LIST
35470: PUSH
35471: LD_INT 30
35473: PUSH
35474: LD_INT 1
35476: PUSH
35477: EMPTY
35478: LIST
35479: LIST
35480: PUSH
35481: EMPTY
35482: LIST
35483: LIST
35484: LIST
35485: PUSH
35486: EMPTY
35487: LIST
35488: LIST
35489: PPUSH
35490: CALL_OW 72
35494: ST_TO_ADDR
35495: GO 35649
35497: LD_INT 3
35499: DOUBLE
35500: EQUAL
35501: IFTRUE 35505
35503: GO 35567
35505: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
35506: LD_ADDR_VAR 0 12
35510: PUSH
35511: LD_VAR 0 18
35515: PPUSH
35516: LD_INT 22
35518: PUSH
35519: LD_VAR 0 16
35523: PUSH
35524: EMPTY
35525: LIST
35526: LIST
35527: PUSH
35528: LD_INT 2
35530: PUSH
35531: LD_INT 30
35533: PUSH
35534: LD_INT 2
35536: PUSH
35537: EMPTY
35538: LIST
35539: LIST
35540: PUSH
35541: LD_INT 30
35543: PUSH
35544: LD_INT 3
35546: PUSH
35547: EMPTY
35548: LIST
35549: LIST
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: LIST
35555: PUSH
35556: EMPTY
35557: LIST
35558: LIST
35559: PPUSH
35560: CALL_OW 72
35564: ST_TO_ADDR
35565: GO 35649
35567: LD_INT 4
35569: DOUBLE
35570: EQUAL
35571: IFTRUE 35575
35573: GO 35648
35575: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
35576: LD_ADDR_VAR 0 12
35580: PUSH
35581: LD_VAR 0 18
35585: PPUSH
35586: LD_INT 22
35588: PUSH
35589: LD_VAR 0 16
35593: PUSH
35594: EMPTY
35595: LIST
35596: LIST
35597: PUSH
35598: LD_INT 2
35600: PUSH
35601: LD_INT 30
35603: PUSH
35604: LD_INT 6
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: PUSH
35611: LD_INT 30
35613: PUSH
35614: LD_INT 7
35616: PUSH
35617: EMPTY
35618: LIST
35619: LIST
35620: PUSH
35621: LD_INT 30
35623: PUSH
35624: LD_INT 8
35626: PUSH
35627: EMPTY
35628: LIST
35629: LIST
35630: PUSH
35631: EMPTY
35632: LIST
35633: LIST
35634: LIST
35635: LIST
35636: PUSH
35637: EMPTY
35638: LIST
35639: LIST
35640: PPUSH
35641: CALL_OW 72
35645: ST_TO_ADDR
35646: GO 35649
35648: POP
// if i = 1 then
35649: LD_VAR 0 8
35653: PUSH
35654: LD_INT 1
35656: EQUAL
35657: IFFALSE 35768
// begin tmp := [ ] ;
35659: LD_ADDR_VAR 0 19
35663: PUSH
35664: EMPTY
35665: ST_TO_ADDR
// for j in f do
35666: LD_ADDR_VAR 0 9
35670: PUSH
35671: LD_VAR 0 12
35675: PUSH
35676: FOR_IN
35677: IFFALSE 35750
// if GetBType ( j ) = b_bunker then
35679: LD_VAR 0 9
35683: PPUSH
35684: CALL_OW 266
35688: PUSH
35689: LD_INT 32
35691: EQUAL
35692: IFFALSE 35719
// tmp := Insert ( tmp , 1 , j ) else
35694: LD_ADDR_VAR 0 19
35698: PUSH
35699: LD_VAR 0 19
35703: PPUSH
35704: LD_INT 1
35706: PPUSH
35707: LD_VAR 0 9
35711: PPUSH
35712: CALL_OW 2
35716: ST_TO_ADDR
35717: GO 35748
// tmp := Insert ( tmp , tmp + 1 , j ) ;
35719: LD_ADDR_VAR 0 19
35723: PUSH
35724: LD_VAR 0 19
35728: PPUSH
35729: LD_VAR 0 19
35733: PUSH
35734: LD_INT 1
35736: PLUS
35737: PPUSH
35738: LD_VAR 0 9
35742: PPUSH
35743: CALL_OW 2
35747: ST_TO_ADDR
35748: GO 35676
35750: POP
35751: POP
// if tmp then
35752: LD_VAR 0 19
35756: IFFALSE 35768
// f := tmp ;
35758: LD_ADDR_VAR 0 12
35762: PUSH
35763: LD_VAR 0 19
35767: ST_TO_ADDR
// end ; x := personel [ i ] ;
35768: LD_ADDR_VAR 0 13
35772: PUSH
35773: LD_VAR 0 6
35777: PUSH
35778: LD_VAR 0 8
35782: ARRAY
35783: ST_TO_ADDR
// if x = - 1 then
35784: LD_VAR 0 13
35788: PUSH
35789: LD_INT 1
35791: NEG
35792: EQUAL
35793: IFFALSE 36002
// begin for j in f do
35795: LD_ADDR_VAR 0 9
35799: PUSH
35800: LD_VAR 0 12
35804: PUSH
35805: FOR_IN
35806: IFFALSE 35998
// repeat InitHc ;
35808: CALL_OW 19
// if GetBType ( j ) = b_barracks then
35812: LD_VAR 0 9
35816: PPUSH
35817: CALL_OW 266
35821: PUSH
35822: LD_INT 5
35824: EQUAL
35825: IFFALSE 35895
// begin if UnitsInside ( j ) < 3 then
35827: LD_VAR 0 9
35831: PPUSH
35832: CALL_OW 313
35836: PUSH
35837: LD_INT 3
35839: LESS
35840: IFFALSE 35876
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
35842: LD_INT 0
35844: PPUSH
35845: LD_INT 5
35847: PUSH
35848: LD_INT 8
35850: PUSH
35851: LD_INT 9
35853: PUSH
35854: EMPTY
35855: LIST
35856: LIST
35857: LIST
35858: PUSH
35859: LD_VAR 0 17
35863: ARRAY
35864: PPUSH
35865: LD_VAR 0 4
35869: PPUSH
35870: CALL_OW 380
35874: GO 35893
// PrepareHuman ( false , i , skill ) ;
35876: LD_INT 0
35878: PPUSH
35879: LD_VAR 0 8
35883: PPUSH
35884: LD_VAR 0 4
35888: PPUSH
35889: CALL_OW 380
// end else
35893: GO 35912
// PrepareHuman ( false , i , skill ) ;
35895: LD_INT 0
35897: PPUSH
35898: LD_VAR 0 8
35902: PPUSH
35903: LD_VAR 0 4
35907: PPUSH
35908: CALL_OW 380
// un := CreateHuman ;
35912: LD_ADDR_VAR 0 14
35916: PUSH
35917: CALL_OW 44
35921: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
35922: LD_ADDR_VAR 0 7
35926: PUSH
35927: LD_VAR 0 7
35931: PPUSH
35932: LD_INT 1
35934: PPUSH
35935: LD_VAR 0 14
35939: PPUSH
35940: CALL_OW 2
35944: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
35945: LD_VAR 0 14
35949: PPUSH
35950: LD_VAR 0 9
35954: PPUSH
35955: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
35959: LD_VAR 0 9
35963: PPUSH
35964: CALL_OW 313
35968: PUSH
35969: LD_INT 6
35971: EQUAL
35972: PUSH
35973: LD_VAR 0 9
35977: PPUSH
35978: CALL_OW 266
35982: PUSH
35983: LD_INT 32
35985: PUSH
35986: LD_INT 31
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: IN
35993: OR
35994: IFFALSE 35808
35996: GO 35805
35998: POP
35999: POP
// end else
36000: GO 36382
// for j = 1 to x do
36002: LD_ADDR_VAR 0 9
36006: PUSH
36007: DOUBLE
36008: LD_INT 1
36010: DEC
36011: ST_TO_ADDR
36012: LD_VAR 0 13
36016: PUSH
36017: FOR_TO
36018: IFFALSE 36380
// begin InitHc ;
36020: CALL_OW 19
// if not f then
36024: LD_VAR 0 12
36028: NOT
36029: IFFALSE 36118
// begin PrepareHuman ( false , i , skill ) ;
36031: LD_INT 0
36033: PPUSH
36034: LD_VAR 0 8
36038: PPUSH
36039: LD_VAR 0 4
36043: PPUSH
36044: CALL_OW 380
// un := CreateHuman ;
36048: LD_ADDR_VAR 0 14
36052: PUSH
36053: CALL_OW 44
36057: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36058: LD_ADDR_VAR 0 7
36062: PUSH
36063: LD_VAR 0 7
36067: PPUSH
36068: LD_INT 1
36070: PPUSH
36071: LD_VAR 0 14
36075: PPUSH
36076: CALL_OW 2
36080: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36081: LD_VAR 0 14
36085: PPUSH
36086: LD_VAR 0 1
36090: PPUSH
36091: CALL_OW 250
36095: PPUSH
36096: LD_VAR 0 1
36100: PPUSH
36101: CALL_OW 251
36105: PPUSH
36106: LD_INT 10
36108: PPUSH
36109: LD_INT 0
36111: PPUSH
36112: CALL_OW 50
// continue ;
36116: GO 36017
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36118: LD_VAR 0 12
36122: PUSH
36123: LD_INT 1
36125: ARRAY
36126: PPUSH
36127: CALL_OW 313
36131: PUSH
36132: LD_VAR 0 12
36136: PUSH
36137: LD_INT 1
36139: ARRAY
36140: PPUSH
36141: CALL_OW 266
36145: PUSH
36146: LD_INT 32
36148: PUSH
36149: LD_INT 31
36151: PUSH
36152: EMPTY
36153: LIST
36154: LIST
36155: IN
36156: AND
36157: PUSH
36158: LD_VAR 0 12
36162: PUSH
36163: LD_INT 1
36165: ARRAY
36166: PPUSH
36167: CALL_OW 313
36171: PUSH
36172: LD_INT 6
36174: EQUAL
36175: OR
36176: IFFALSE 36196
// f := Delete ( f , 1 ) ;
36178: LD_ADDR_VAR 0 12
36182: PUSH
36183: LD_VAR 0 12
36187: PPUSH
36188: LD_INT 1
36190: PPUSH
36191: CALL_OW 3
36195: ST_TO_ADDR
// if not f then
36196: LD_VAR 0 12
36200: NOT
36201: IFFALSE 36219
// begin x := x + 2 ;
36203: LD_ADDR_VAR 0 13
36207: PUSH
36208: LD_VAR 0 13
36212: PUSH
36213: LD_INT 2
36215: PLUS
36216: ST_TO_ADDR
// continue ;
36217: GO 36017
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36219: LD_VAR 0 12
36223: PUSH
36224: LD_INT 1
36226: ARRAY
36227: PPUSH
36228: CALL_OW 266
36232: PUSH
36233: LD_INT 5
36235: EQUAL
36236: IFFALSE 36310
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36238: LD_VAR 0 12
36242: PUSH
36243: LD_INT 1
36245: ARRAY
36246: PPUSH
36247: CALL_OW 313
36251: PUSH
36252: LD_INT 3
36254: LESS
36255: IFFALSE 36291
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36257: LD_INT 0
36259: PPUSH
36260: LD_INT 5
36262: PUSH
36263: LD_INT 8
36265: PUSH
36266: LD_INT 9
36268: PUSH
36269: EMPTY
36270: LIST
36271: LIST
36272: LIST
36273: PUSH
36274: LD_VAR 0 17
36278: ARRAY
36279: PPUSH
36280: LD_VAR 0 4
36284: PPUSH
36285: CALL_OW 380
36289: GO 36308
// PrepareHuman ( false , i , skill ) ;
36291: LD_INT 0
36293: PPUSH
36294: LD_VAR 0 8
36298: PPUSH
36299: LD_VAR 0 4
36303: PPUSH
36304: CALL_OW 380
// end else
36308: GO 36327
// PrepareHuman ( false , i , skill ) ;
36310: LD_INT 0
36312: PPUSH
36313: LD_VAR 0 8
36317: PPUSH
36318: LD_VAR 0 4
36322: PPUSH
36323: CALL_OW 380
// un := CreateHuman ;
36327: LD_ADDR_VAR 0 14
36331: PUSH
36332: CALL_OW 44
36336: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36337: LD_ADDR_VAR 0 7
36341: PUSH
36342: LD_VAR 0 7
36346: PPUSH
36347: LD_INT 1
36349: PPUSH
36350: LD_VAR 0 14
36354: PPUSH
36355: CALL_OW 2
36359: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
36360: LD_VAR 0 14
36364: PPUSH
36365: LD_VAR 0 12
36369: PUSH
36370: LD_INT 1
36372: ARRAY
36373: PPUSH
36374: CALL_OW 52
// end ;
36378: GO 36017
36380: POP
36381: POP
// end ;
36382: GO 35319
36384: POP
36385: POP
// result := result ^ buildings ;
36386: LD_ADDR_VAR 0 7
36390: PUSH
36391: LD_VAR 0 7
36395: PUSH
36396: LD_VAR 0 18
36400: ADD
36401: ST_TO_ADDR
// end else
36402: GO 36545
// begin for i = 1 to personel do
36404: LD_ADDR_VAR 0 8
36408: PUSH
36409: DOUBLE
36410: LD_INT 1
36412: DEC
36413: ST_TO_ADDR
36414: LD_VAR 0 6
36418: PUSH
36419: FOR_TO
36420: IFFALSE 36543
// begin if i > 4 then
36422: LD_VAR 0 8
36426: PUSH
36427: LD_INT 4
36429: GREATER
36430: IFFALSE 36434
// break ;
36432: GO 36543
// x := personel [ i ] ;
36434: LD_ADDR_VAR 0 13
36438: PUSH
36439: LD_VAR 0 6
36443: PUSH
36444: LD_VAR 0 8
36448: ARRAY
36449: ST_TO_ADDR
// if x = - 1 then
36450: LD_VAR 0 13
36454: PUSH
36455: LD_INT 1
36457: NEG
36458: EQUAL
36459: IFFALSE 36463
// continue ;
36461: GO 36419
// PrepareHuman ( false , i , skill ) ;
36463: LD_INT 0
36465: PPUSH
36466: LD_VAR 0 8
36470: PPUSH
36471: LD_VAR 0 4
36475: PPUSH
36476: CALL_OW 380
// un := CreateHuman ;
36480: LD_ADDR_VAR 0 14
36484: PUSH
36485: CALL_OW 44
36489: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36490: LD_VAR 0 14
36494: PPUSH
36495: LD_VAR 0 1
36499: PPUSH
36500: CALL_OW 250
36504: PPUSH
36505: LD_VAR 0 1
36509: PPUSH
36510: CALL_OW 251
36514: PPUSH
36515: LD_INT 10
36517: PPUSH
36518: LD_INT 0
36520: PPUSH
36521: CALL_OW 50
// result := result ^ un ;
36525: LD_ADDR_VAR 0 7
36529: PUSH
36530: LD_VAR 0 7
36534: PUSH
36535: LD_VAR 0 14
36539: ADD
36540: ST_TO_ADDR
// end ;
36541: GO 36419
36543: POP
36544: POP
// end ; end ;
36545: LD_VAR 0 7
36549: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
36550: LD_INT 0
36552: PPUSH
36553: PPUSH
36554: PPUSH
36555: PPUSH
36556: PPUSH
36557: PPUSH
36558: PPUSH
36559: PPUSH
36560: PPUSH
36561: PPUSH
36562: PPUSH
36563: PPUSH
36564: PPUSH
36565: PPUSH
36566: PPUSH
36567: PPUSH
// result := false ;
36568: LD_ADDR_VAR 0 3
36572: PUSH
36573: LD_INT 0
36575: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
36576: LD_VAR 0 1
36580: NOT
36581: PUSH
36582: LD_VAR 0 1
36586: PPUSH
36587: CALL_OW 266
36591: PUSH
36592: LD_INT 32
36594: PUSH
36595: LD_INT 33
36597: PUSH
36598: EMPTY
36599: LIST
36600: LIST
36601: IN
36602: NOT
36603: OR
36604: IFFALSE 36608
// exit ;
36606: GO 37744
// nat := GetNation ( tower ) ;
36608: LD_ADDR_VAR 0 12
36612: PUSH
36613: LD_VAR 0 1
36617: PPUSH
36618: CALL_OW 248
36622: ST_TO_ADDR
// side := GetSide ( tower ) ;
36623: LD_ADDR_VAR 0 16
36627: PUSH
36628: LD_VAR 0 1
36632: PPUSH
36633: CALL_OW 255
36637: ST_TO_ADDR
// x := GetX ( tower ) ;
36638: LD_ADDR_VAR 0 10
36642: PUSH
36643: LD_VAR 0 1
36647: PPUSH
36648: CALL_OW 250
36652: ST_TO_ADDR
// y := GetY ( tower ) ;
36653: LD_ADDR_VAR 0 11
36657: PUSH
36658: LD_VAR 0 1
36662: PPUSH
36663: CALL_OW 251
36667: ST_TO_ADDR
// if not x or not y then
36668: LD_VAR 0 10
36672: NOT
36673: PUSH
36674: LD_VAR 0 11
36678: NOT
36679: OR
36680: IFFALSE 36684
// exit ;
36682: GO 37744
// weapon := 0 ;
36684: LD_ADDR_VAR 0 18
36688: PUSH
36689: LD_INT 0
36691: ST_TO_ADDR
// fac_list := [ ] ;
36692: LD_ADDR_VAR 0 17
36696: PUSH
36697: EMPTY
36698: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
36699: LD_ADDR_VAR 0 6
36703: PUSH
36704: LD_VAR 0 1
36708: PPUSH
36709: CALL_OW 274
36713: PPUSH
36714: LD_VAR 0 2
36718: PPUSH
36719: CALL 34322 0 2
36723: PPUSH
36724: LD_INT 30
36726: PUSH
36727: LD_INT 3
36729: PUSH
36730: EMPTY
36731: LIST
36732: LIST
36733: PPUSH
36734: CALL_OW 72
36738: ST_TO_ADDR
// if not factories then
36739: LD_VAR 0 6
36743: NOT
36744: IFFALSE 36748
// exit ;
36746: GO 37744
// for i in factories do
36748: LD_ADDR_VAR 0 8
36752: PUSH
36753: LD_VAR 0 6
36757: PUSH
36758: FOR_IN
36759: IFFALSE 36784
// fac_list := fac_list union AvailableWeaponList ( i ) ;
36761: LD_ADDR_VAR 0 17
36765: PUSH
36766: LD_VAR 0 17
36770: PUSH
36771: LD_VAR 0 8
36775: PPUSH
36776: CALL_OW 478
36780: UNION
36781: ST_TO_ADDR
36782: GO 36758
36784: POP
36785: POP
// if not fac_list then
36786: LD_VAR 0 17
36790: NOT
36791: IFFALSE 36795
// exit ;
36793: GO 37744
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
36795: LD_ADDR_VAR 0 5
36799: PUSH
36800: LD_INT 4
36802: PUSH
36803: LD_INT 5
36805: PUSH
36806: LD_INT 9
36808: PUSH
36809: LD_INT 10
36811: PUSH
36812: LD_INT 6
36814: PUSH
36815: LD_INT 7
36817: PUSH
36818: LD_INT 11
36820: PUSH
36821: EMPTY
36822: LIST
36823: LIST
36824: LIST
36825: LIST
36826: LIST
36827: LIST
36828: LIST
36829: PUSH
36830: LD_INT 27
36832: PUSH
36833: LD_INT 28
36835: PUSH
36836: LD_INT 26
36838: PUSH
36839: LD_INT 30
36841: PUSH
36842: EMPTY
36843: LIST
36844: LIST
36845: LIST
36846: LIST
36847: PUSH
36848: LD_INT 43
36850: PUSH
36851: LD_INT 44
36853: PUSH
36854: LD_INT 46
36856: PUSH
36857: LD_INT 45
36859: PUSH
36860: LD_INT 47
36862: PUSH
36863: LD_INT 49
36865: PUSH
36866: EMPTY
36867: LIST
36868: LIST
36869: LIST
36870: LIST
36871: LIST
36872: LIST
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: LIST
36878: PUSH
36879: LD_VAR 0 12
36883: ARRAY
36884: ST_TO_ADDR
// for i in list do
36885: LD_ADDR_VAR 0 8
36889: PUSH
36890: LD_VAR 0 5
36894: PUSH
36895: FOR_IN
36896: IFFALSE 36929
// if not i in fac_list then
36898: LD_VAR 0 8
36902: PUSH
36903: LD_VAR 0 17
36907: IN
36908: NOT
36909: IFFALSE 36927
// list := list diff i ;
36911: LD_ADDR_VAR 0 5
36915: PUSH
36916: LD_VAR 0 5
36920: PUSH
36921: LD_VAR 0 8
36925: DIFF
36926: ST_TO_ADDR
36927: GO 36895
36929: POP
36930: POP
// if not list then
36931: LD_VAR 0 5
36935: NOT
36936: IFFALSE 36940
// exit ;
36938: GO 37744
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
36940: LD_VAR 0 12
36944: PUSH
36945: LD_INT 3
36947: EQUAL
36948: PUSH
36949: LD_INT 49
36951: PUSH
36952: LD_VAR 0 5
36956: IN
36957: AND
36958: PUSH
36959: LD_INT 31
36961: PPUSH
36962: LD_VAR 0 16
36966: PPUSH
36967: CALL_OW 321
36971: PUSH
36972: LD_INT 2
36974: EQUAL
36975: AND
36976: IFFALSE 37036
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
36978: LD_INT 22
36980: PUSH
36981: LD_VAR 0 16
36985: PUSH
36986: EMPTY
36987: LIST
36988: LIST
36989: PUSH
36990: LD_INT 35
36992: PUSH
36993: LD_INT 49
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: PUSH
37000: LD_INT 91
37002: PUSH
37003: LD_VAR 0 1
37007: PUSH
37008: LD_INT 10
37010: PUSH
37011: EMPTY
37012: LIST
37013: LIST
37014: LIST
37015: PUSH
37016: EMPTY
37017: LIST
37018: LIST
37019: LIST
37020: PPUSH
37021: CALL_OW 69
37025: NOT
37026: IFFALSE 37036
// weapon := ru_time_lapser ;
37028: LD_ADDR_VAR 0 18
37032: PUSH
37033: LD_INT 49
37035: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37036: LD_VAR 0 12
37040: PUSH
37041: LD_INT 1
37043: PUSH
37044: LD_INT 2
37046: PUSH
37047: EMPTY
37048: LIST
37049: LIST
37050: IN
37051: PUSH
37052: LD_INT 11
37054: PUSH
37055: LD_VAR 0 5
37059: IN
37060: PUSH
37061: LD_INT 30
37063: PUSH
37064: LD_VAR 0 5
37068: IN
37069: OR
37070: AND
37071: PUSH
37072: LD_INT 6
37074: PPUSH
37075: LD_VAR 0 16
37079: PPUSH
37080: CALL_OW 321
37084: PUSH
37085: LD_INT 2
37087: EQUAL
37088: AND
37089: IFFALSE 37254
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37091: LD_INT 22
37093: PUSH
37094: LD_VAR 0 16
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: PUSH
37103: LD_INT 2
37105: PUSH
37106: LD_INT 35
37108: PUSH
37109: LD_INT 11
37111: PUSH
37112: EMPTY
37113: LIST
37114: LIST
37115: PUSH
37116: LD_INT 35
37118: PUSH
37119: LD_INT 30
37121: PUSH
37122: EMPTY
37123: LIST
37124: LIST
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: LIST
37130: PUSH
37131: LD_INT 91
37133: PUSH
37134: LD_VAR 0 1
37138: PUSH
37139: LD_INT 18
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: LIST
37146: PUSH
37147: EMPTY
37148: LIST
37149: LIST
37150: LIST
37151: PPUSH
37152: CALL_OW 69
37156: NOT
37157: PUSH
37158: LD_INT 22
37160: PUSH
37161: LD_VAR 0 16
37165: PUSH
37166: EMPTY
37167: LIST
37168: LIST
37169: PUSH
37170: LD_INT 2
37172: PUSH
37173: LD_INT 30
37175: PUSH
37176: LD_INT 32
37178: PUSH
37179: EMPTY
37180: LIST
37181: LIST
37182: PUSH
37183: LD_INT 30
37185: PUSH
37186: LD_INT 33
37188: PUSH
37189: EMPTY
37190: LIST
37191: LIST
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: LIST
37197: PUSH
37198: LD_INT 91
37200: PUSH
37201: LD_VAR 0 1
37205: PUSH
37206: LD_INT 12
37208: PUSH
37209: EMPTY
37210: LIST
37211: LIST
37212: LIST
37213: PUSH
37214: EMPTY
37215: LIST
37216: LIST
37217: LIST
37218: PUSH
37219: EMPTY
37220: LIST
37221: PPUSH
37222: CALL_OW 69
37226: PUSH
37227: LD_INT 2
37229: GREATER
37230: AND
37231: IFFALSE 37254
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37233: LD_ADDR_VAR 0 18
37237: PUSH
37238: LD_INT 11
37240: PUSH
37241: LD_INT 30
37243: PUSH
37244: EMPTY
37245: LIST
37246: LIST
37247: PUSH
37248: LD_VAR 0 12
37252: ARRAY
37253: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37254: LD_VAR 0 18
37258: NOT
37259: PUSH
37260: LD_INT 40
37262: PPUSH
37263: LD_VAR 0 16
37267: PPUSH
37268: CALL_OW 321
37272: PUSH
37273: LD_INT 2
37275: EQUAL
37276: AND
37277: PUSH
37278: LD_INT 7
37280: PUSH
37281: LD_VAR 0 5
37285: IN
37286: PUSH
37287: LD_INT 28
37289: PUSH
37290: LD_VAR 0 5
37294: IN
37295: OR
37296: PUSH
37297: LD_INT 45
37299: PUSH
37300: LD_VAR 0 5
37304: IN
37305: OR
37306: AND
37307: IFFALSE 37561
// begin hex := GetHexInfo ( x , y ) ;
37309: LD_ADDR_VAR 0 4
37313: PUSH
37314: LD_VAR 0 10
37318: PPUSH
37319: LD_VAR 0 11
37323: PPUSH
37324: CALL_OW 546
37328: ST_TO_ADDR
// if hex [ 1 ] then
37329: LD_VAR 0 4
37333: PUSH
37334: LD_INT 1
37336: ARRAY
37337: IFFALSE 37341
// exit ;
37339: GO 37744
// height := hex [ 2 ] ;
37341: LD_ADDR_VAR 0 15
37345: PUSH
37346: LD_VAR 0 4
37350: PUSH
37351: LD_INT 2
37353: ARRAY
37354: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
37355: LD_ADDR_VAR 0 14
37359: PUSH
37360: LD_INT 0
37362: PUSH
37363: LD_INT 2
37365: PUSH
37366: LD_INT 3
37368: PUSH
37369: LD_INT 5
37371: PUSH
37372: EMPTY
37373: LIST
37374: LIST
37375: LIST
37376: LIST
37377: ST_TO_ADDR
// for i in tmp do
37378: LD_ADDR_VAR 0 8
37382: PUSH
37383: LD_VAR 0 14
37387: PUSH
37388: FOR_IN
37389: IFFALSE 37559
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
37391: LD_ADDR_VAR 0 9
37395: PUSH
37396: LD_VAR 0 10
37400: PPUSH
37401: LD_VAR 0 8
37405: PPUSH
37406: LD_INT 5
37408: PPUSH
37409: CALL_OW 272
37413: PUSH
37414: LD_VAR 0 11
37418: PPUSH
37419: LD_VAR 0 8
37423: PPUSH
37424: LD_INT 5
37426: PPUSH
37427: CALL_OW 273
37431: PUSH
37432: EMPTY
37433: LIST
37434: LIST
37435: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
37436: LD_VAR 0 9
37440: PUSH
37441: LD_INT 1
37443: ARRAY
37444: PPUSH
37445: LD_VAR 0 9
37449: PUSH
37450: LD_INT 2
37452: ARRAY
37453: PPUSH
37454: CALL_OW 488
37458: IFFALSE 37557
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
37460: LD_ADDR_VAR 0 4
37464: PUSH
37465: LD_VAR 0 9
37469: PUSH
37470: LD_INT 1
37472: ARRAY
37473: PPUSH
37474: LD_VAR 0 9
37478: PUSH
37479: LD_INT 2
37481: ARRAY
37482: PPUSH
37483: CALL_OW 546
37487: ST_TO_ADDR
// if hex [ 1 ] then
37488: LD_VAR 0 4
37492: PUSH
37493: LD_INT 1
37495: ARRAY
37496: IFFALSE 37500
// continue ;
37498: GO 37388
// h := hex [ 2 ] ;
37500: LD_ADDR_VAR 0 13
37504: PUSH
37505: LD_VAR 0 4
37509: PUSH
37510: LD_INT 2
37512: ARRAY
37513: ST_TO_ADDR
// if h + 7 < height then
37514: LD_VAR 0 13
37518: PUSH
37519: LD_INT 7
37521: PLUS
37522: PUSH
37523: LD_VAR 0 15
37527: LESS
37528: IFFALSE 37557
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
37530: LD_ADDR_VAR 0 18
37534: PUSH
37535: LD_INT 7
37537: PUSH
37538: LD_INT 28
37540: PUSH
37541: LD_INT 45
37543: PUSH
37544: EMPTY
37545: LIST
37546: LIST
37547: LIST
37548: PUSH
37549: LD_VAR 0 12
37553: ARRAY
37554: ST_TO_ADDR
// break ;
37555: GO 37559
// end ; end ; end ;
37557: GO 37388
37559: POP
37560: POP
// end ; if not weapon then
37561: LD_VAR 0 18
37565: NOT
37566: IFFALSE 37626
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
37568: LD_ADDR_VAR 0 5
37572: PUSH
37573: LD_VAR 0 5
37577: PUSH
37578: LD_INT 11
37580: PUSH
37581: LD_INT 30
37583: PUSH
37584: LD_INT 49
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: LIST
37591: DIFF
37592: ST_TO_ADDR
// if not list then
37593: LD_VAR 0 5
37597: NOT
37598: IFFALSE 37602
// exit ;
37600: GO 37744
// weapon := list [ rand ( 1 , list ) ] ;
37602: LD_ADDR_VAR 0 18
37606: PUSH
37607: LD_VAR 0 5
37611: PUSH
37612: LD_INT 1
37614: PPUSH
37615: LD_VAR 0 5
37619: PPUSH
37620: CALL_OW 12
37624: ARRAY
37625: ST_TO_ADDR
// end ; if weapon then
37626: LD_VAR 0 18
37630: IFFALSE 37744
// begin tmp := CostOfWeapon ( weapon ) ;
37632: LD_ADDR_VAR 0 14
37636: PUSH
37637: LD_VAR 0 18
37641: PPUSH
37642: CALL_OW 451
37646: ST_TO_ADDR
// j := GetBase ( tower ) ;
37647: LD_ADDR_VAR 0 9
37651: PUSH
37652: LD_VAR 0 1
37656: PPUSH
37657: CALL_OW 274
37661: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
37662: LD_VAR 0 9
37666: PPUSH
37667: LD_INT 1
37669: PPUSH
37670: CALL_OW 275
37674: PUSH
37675: LD_VAR 0 14
37679: PUSH
37680: LD_INT 1
37682: ARRAY
37683: GREATEREQUAL
37684: PUSH
37685: LD_VAR 0 9
37689: PPUSH
37690: LD_INT 2
37692: PPUSH
37693: CALL_OW 275
37697: PUSH
37698: LD_VAR 0 14
37702: PUSH
37703: LD_INT 2
37705: ARRAY
37706: GREATEREQUAL
37707: AND
37708: PUSH
37709: LD_VAR 0 9
37713: PPUSH
37714: LD_INT 3
37716: PPUSH
37717: CALL_OW 275
37721: PUSH
37722: LD_VAR 0 14
37726: PUSH
37727: LD_INT 3
37729: ARRAY
37730: GREATEREQUAL
37731: AND
37732: IFFALSE 37744
// result := weapon ;
37734: LD_ADDR_VAR 0 3
37738: PUSH
37739: LD_VAR 0 18
37743: ST_TO_ADDR
// end ; end ;
37744: LD_VAR 0 3
37748: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
37749: LD_INT 0
37751: PPUSH
37752: PPUSH
// result := true ;
37753: LD_ADDR_VAR 0 3
37757: PUSH
37758: LD_INT 1
37760: ST_TO_ADDR
// if array1 = array2 then
37761: LD_VAR 0 1
37765: PUSH
37766: LD_VAR 0 2
37770: EQUAL
37771: IFFALSE 37831
// begin for i = 1 to array1 do
37773: LD_ADDR_VAR 0 4
37777: PUSH
37778: DOUBLE
37779: LD_INT 1
37781: DEC
37782: ST_TO_ADDR
37783: LD_VAR 0 1
37787: PUSH
37788: FOR_TO
37789: IFFALSE 37827
// if array1 [ i ] <> array2 [ i ] then
37791: LD_VAR 0 1
37795: PUSH
37796: LD_VAR 0 4
37800: ARRAY
37801: PUSH
37802: LD_VAR 0 2
37806: PUSH
37807: LD_VAR 0 4
37811: ARRAY
37812: NONEQUAL
37813: IFFALSE 37825
// begin result := false ;
37815: LD_ADDR_VAR 0 3
37819: PUSH
37820: LD_INT 0
37822: ST_TO_ADDR
// break ;
37823: GO 37827
// end ;
37825: GO 37788
37827: POP
37828: POP
// end else
37829: GO 37839
// result := false ;
37831: LD_ADDR_VAR 0 3
37835: PUSH
37836: LD_INT 0
37838: ST_TO_ADDR
// end ;
37839: LD_VAR 0 3
37843: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
37844: LD_INT 0
37846: PPUSH
37847: PPUSH
37848: PPUSH
// pom := GetBase ( fac ) ;
37849: LD_ADDR_VAR 0 5
37853: PUSH
37854: LD_VAR 0 1
37858: PPUSH
37859: CALL_OW 274
37863: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
37864: LD_ADDR_VAR 0 4
37868: PUSH
37869: LD_VAR 0 2
37873: PUSH
37874: LD_INT 1
37876: ARRAY
37877: PPUSH
37878: LD_VAR 0 2
37882: PUSH
37883: LD_INT 2
37885: ARRAY
37886: PPUSH
37887: LD_VAR 0 2
37891: PUSH
37892: LD_INT 3
37894: ARRAY
37895: PPUSH
37896: LD_VAR 0 2
37900: PUSH
37901: LD_INT 4
37903: ARRAY
37904: PPUSH
37905: CALL_OW 449
37909: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
37910: LD_ADDR_VAR 0 3
37914: PUSH
37915: LD_VAR 0 5
37919: PPUSH
37920: LD_INT 1
37922: PPUSH
37923: CALL_OW 275
37927: PUSH
37928: LD_VAR 0 4
37932: PUSH
37933: LD_INT 1
37935: ARRAY
37936: GREATEREQUAL
37937: PUSH
37938: LD_VAR 0 5
37942: PPUSH
37943: LD_INT 2
37945: PPUSH
37946: CALL_OW 275
37950: PUSH
37951: LD_VAR 0 4
37955: PUSH
37956: LD_INT 2
37958: ARRAY
37959: GREATEREQUAL
37960: AND
37961: PUSH
37962: LD_VAR 0 5
37966: PPUSH
37967: LD_INT 3
37969: PPUSH
37970: CALL_OW 275
37974: PUSH
37975: LD_VAR 0 4
37979: PUSH
37980: LD_INT 3
37982: ARRAY
37983: GREATEREQUAL
37984: AND
37985: ST_TO_ADDR
// end ;
37986: LD_VAR 0 3
37990: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
37991: LD_INT 0
37993: PPUSH
37994: PPUSH
37995: PPUSH
37996: PPUSH
// pom := GetBase ( building ) ;
37997: LD_ADDR_VAR 0 3
38001: PUSH
38002: LD_VAR 0 1
38006: PPUSH
38007: CALL_OW 274
38011: ST_TO_ADDR
// if not pom then
38012: LD_VAR 0 3
38016: NOT
38017: IFFALSE 38021
// exit ;
38019: GO 38191
// btype := GetBType ( building ) ;
38021: LD_ADDR_VAR 0 5
38025: PUSH
38026: LD_VAR 0 1
38030: PPUSH
38031: CALL_OW 266
38035: ST_TO_ADDR
// if btype = b_armoury then
38036: LD_VAR 0 5
38040: PUSH
38041: LD_INT 4
38043: EQUAL
38044: IFFALSE 38054
// btype := b_barracks ;
38046: LD_ADDR_VAR 0 5
38050: PUSH
38051: LD_INT 5
38053: ST_TO_ADDR
// if btype = b_depot then
38054: LD_VAR 0 5
38058: PUSH
38059: LD_INT 0
38061: EQUAL
38062: IFFALSE 38072
// btype := b_warehouse ;
38064: LD_ADDR_VAR 0 5
38068: PUSH
38069: LD_INT 1
38071: ST_TO_ADDR
// if btype = b_workshop then
38072: LD_VAR 0 5
38076: PUSH
38077: LD_INT 2
38079: EQUAL
38080: IFFALSE 38090
// btype := b_factory ;
38082: LD_ADDR_VAR 0 5
38086: PUSH
38087: LD_INT 3
38089: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38090: LD_ADDR_VAR 0 4
38094: PUSH
38095: LD_VAR 0 5
38099: PPUSH
38100: LD_VAR 0 1
38104: PPUSH
38105: CALL_OW 248
38109: PPUSH
38110: CALL_OW 450
38114: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38115: LD_ADDR_VAR 0 2
38119: PUSH
38120: LD_VAR 0 3
38124: PPUSH
38125: LD_INT 1
38127: PPUSH
38128: CALL_OW 275
38132: PUSH
38133: LD_VAR 0 4
38137: PUSH
38138: LD_INT 1
38140: ARRAY
38141: GREATEREQUAL
38142: PUSH
38143: LD_VAR 0 3
38147: PPUSH
38148: LD_INT 2
38150: PPUSH
38151: CALL_OW 275
38155: PUSH
38156: LD_VAR 0 4
38160: PUSH
38161: LD_INT 2
38163: ARRAY
38164: GREATEREQUAL
38165: AND
38166: PUSH
38167: LD_VAR 0 3
38171: PPUSH
38172: LD_INT 3
38174: PPUSH
38175: CALL_OW 275
38179: PUSH
38180: LD_VAR 0 4
38184: PUSH
38185: LD_INT 3
38187: ARRAY
38188: GREATEREQUAL
38189: AND
38190: ST_TO_ADDR
// end ;
38191: LD_VAR 0 2
38195: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
38196: LD_INT 0
38198: PPUSH
38199: PPUSH
38200: PPUSH
// pom := GetBase ( building ) ;
38201: LD_ADDR_VAR 0 4
38205: PUSH
38206: LD_VAR 0 1
38210: PPUSH
38211: CALL_OW 274
38215: ST_TO_ADDR
// if not pom then
38216: LD_VAR 0 4
38220: NOT
38221: IFFALSE 38225
// exit ;
38223: GO 38326
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38225: LD_ADDR_VAR 0 5
38229: PUSH
38230: LD_VAR 0 2
38234: PPUSH
38235: LD_VAR 0 1
38239: PPUSH
38240: CALL_OW 248
38244: PPUSH
38245: CALL_OW 450
38249: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38250: LD_ADDR_VAR 0 3
38254: PUSH
38255: LD_VAR 0 4
38259: PPUSH
38260: LD_INT 1
38262: PPUSH
38263: CALL_OW 275
38267: PUSH
38268: LD_VAR 0 5
38272: PUSH
38273: LD_INT 1
38275: ARRAY
38276: GREATEREQUAL
38277: PUSH
38278: LD_VAR 0 4
38282: PPUSH
38283: LD_INT 2
38285: PPUSH
38286: CALL_OW 275
38290: PUSH
38291: LD_VAR 0 5
38295: PUSH
38296: LD_INT 2
38298: ARRAY
38299: GREATEREQUAL
38300: AND
38301: PUSH
38302: LD_VAR 0 4
38306: PPUSH
38307: LD_INT 3
38309: PPUSH
38310: CALL_OW 275
38314: PUSH
38315: LD_VAR 0 5
38319: PUSH
38320: LD_INT 3
38322: ARRAY
38323: GREATEREQUAL
38324: AND
38325: ST_TO_ADDR
// end ;
38326: LD_VAR 0 3
38330: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
38331: LD_INT 0
38333: PPUSH
38334: PPUSH
38335: PPUSH
38336: PPUSH
38337: PPUSH
38338: PPUSH
38339: PPUSH
38340: PPUSH
38341: PPUSH
38342: PPUSH
// result := false ;
38343: LD_ADDR_VAR 0 6
38347: PUSH
38348: LD_INT 0
38350: ST_TO_ADDR
// if not base or not btype or not x or not y then
38351: LD_VAR 0 1
38355: NOT
38356: PUSH
38357: LD_VAR 0 2
38361: NOT
38362: OR
38363: PUSH
38364: LD_VAR 0 3
38368: NOT
38369: OR
38370: PUSH
38371: LD_VAR 0 4
38375: NOT
38376: OR
38377: IFFALSE 38381
// exit ;
38379: GO 38990
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
38381: LD_ADDR_VAR 0 12
38385: PUSH
38386: LD_VAR 0 2
38390: PPUSH
38391: LD_VAR 0 3
38395: PPUSH
38396: LD_VAR 0 4
38400: PPUSH
38401: LD_VAR 0 5
38405: PPUSH
38406: LD_VAR 0 1
38410: PUSH
38411: LD_INT 1
38413: ARRAY
38414: PPUSH
38415: CALL_OW 248
38419: PPUSH
38420: LD_INT 0
38422: PPUSH
38423: CALL 39827 0 6
38427: ST_TO_ADDR
// if not hexes then
38428: LD_VAR 0 12
38432: NOT
38433: IFFALSE 38437
// exit ;
38435: GO 38990
// for i = 1 to hexes do
38437: LD_ADDR_VAR 0 7
38441: PUSH
38442: DOUBLE
38443: LD_INT 1
38445: DEC
38446: ST_TO_ADDR
38447: LD_VAR 0 12
38451: PUSH
38452: FOR_TO
38453: IFFALSE 38988
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
38455: LD_ADDR_VAR 0 11
38459: PUSH
38460: LD_VAR 0 12
38464: PUSH
38465: LD_VAR 0 7
38469: ARRAY
38470: PUSH
38471: LD_INT 1
38473: ARRAY
38474: PPUSH
38475: LD_VAR 0 12
38479: PUSH
38480: LD_VAR 0 7
38484: ARRAY
38485: PUSH
38486: LD_INT 2
38488: ARRAY
38489: PPUSH
38490: CALL_OW 428
38494: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
38495: LD_VAR 0 12
38499: PUSH
38500: LD_VAR 0 7
38504: ARRAY
38505: PUSH
38506: LD_INT 1
38508: ARRAY
38509: PPUSH
38510: LD_VAR 0 12
38514: PUSH
38515: LD_VAR 0 7
38519: ARRAY
38520: PUSH
38521: LD_INT 2
38523: ARRAY
38524: PPUSH
38525: CALL_OW 351
38529: PUSH
38530: LD_VAR 0 12
38534: PUSH
38535: LD_VAR 0 7
38539: ARRAY
38540: PUSH
38541: LD_INT 1
38543: ARRAY
38544: PPUSH
38545: LD_VAR 0 12
38549: PUSH
38550: LD_VAR 0 7
38554: ARRAY
38555: PUSH
38556: LD_INT 2
38558: ARRAY
38559: PPUSH
38560: CALL_OW 488
38564: NOT
38565: OR
38566: PUSH
38567: LD_VAR 0 11
38571: PPUSH
38572: CALL_OW 247
38576: PUSH
38577: LD_INT 3
38579: EQUAL
38580: OR
38581: IFFALSE 38587
// exit ;
38583: POP
38584: POP
38585: GO 38990
// if not tmp or not tmp in base then
38587: LD_VAR 0 11
38591: NOT
38592: PUSH
38593: LD_VAR 0 11
38597: PUSH
38598: LD_VAR 0 1
38602: IN
38603: NOT
38604: OR
38605: IFFALSE 38609
// continue ;
38607: GO 38452
// result := true ;
38609: LD_ADDR_VAR 0 6
38613: PUSH
38614: LD_INT 1
38616: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38617: LD_ADDR_VAR 0 15
38621: PUSH
38622: LD_VAR 0 1
38626: PPUSH
38627: LD_INT 22
38629: PUSH
38630: LD_VAR 0 11
38634: PPUSH
38635: CALL_OW 255
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: PUSH
38644: LD_INT 2
38646: PUSH
38647: LD_INT 30
38649: PUSH
38650: LD_INT 0
38652: PUSH
38653: EMPTY
38654: LIST
38655: LIST
38656: PUSH
38657: LD_INT 30
38659: PUSH
38660: LD_INT 1
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: PUSH
38667: EMPTY
38668: LIST
38669: LIST
38670: LIST
38671: PUSH
38672: EMPTY
38673: LIST
38674: LIST
38675: PPUSH
38676: CALL_OW 72
38680: ST_TO_ADDR
// if dep then
38681: LD_VAR 0 15
38685: IFFALSE 38821
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
38687: LD_ADDR_VAR 0 14
38691: PUSH
38692: LD_VAR 0 15
38696: PUSH
38697: LD_INT 1
38699: ARRAY
38700: PPUSH
38701: CALL_OW 250
38705: PPUSH
38706: LD_VAR 0 15
38710: PUSH
38711: LD_INT 1
38713: ARRAY
38714: PPUSH
38715: CALL_OW 254
38719: PPUSH
38720: LD_INT 5
38722: PPUSH
38723: CALL_OW 272
38727: PUSH
38728: LD_VAR 0 15
38732: PUSH
38733: LD_INT 1
38735: ARRAY
38736: PPUSH
38737: CALL_OW 251
38741: PPUSH
38742: LD_VAR 0 15
38746: PUSH
38747: LD_INT 1
38749: ARRAY
38750: PPUSH
38751: CALL_OW 254
38755: PPUSH
38756: LD_INT 5
38758: PPUSH
38759: CALL_OW 273
38763: PUSH
38764: EMPTY
38765: LIST
38766: LIST
38767: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
38768: LD_VAR 0 14
38772: PUSH
38773: LD_INT 1
38775: ARRAY
38776: PPUSH
38777: LD_VAR 0 14
38781: PUSH
38782: LD_INT 2
38784: ARRAY
38785: PPUSH
38786: CALL_OW 488
38790: IFFALSE 38821
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
38792: LD_VAR 0 11
38796: PPUSH
38797: LD_VAR 0 14
38801: PUSH
38802: LD_INT 1
38804: ARRAY
38805: PPUSH
38806: LD_VAR 0 14
38810: PUSH
38811: LD_INT 2
38813: ARRAY
38814: PPUSH
38815: CALL_OW 111
// continue ;
38819: GO 38452
// end ; end ; r := GetDir ( tmp ) ;
38821: LD_ADDR_VAR 0 13
38825: PUSH
38826: LD_VAR 0 11
38830: PPUSH
38831: CALL_OW 254
38835: ST_TO_ADDR
// if r = 5 then
38836: LD_VAR 0 13
38840: PUSH
38841: LD_INT 5
38843: EQUAL
38844: IFFALSE 38854
// r := 0 ;
38846: LD_ADDR_VAR 0 13
38850: PUSH
38851: LD_INT 0
38853: ST_TO_ADDR
// for j = r to 5 do
38854: LD_ADDR_VAR 0 8
38858: PUSH
38859: DOUBLE
38860: LD_VAR 0 13
38864: DEC
38865: ST_TO_ADDR
38866: LD_INT 5
38868: PUSH
38869: FOR_TO
38870: IFFALSE 38984
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
38872: LD_ADDR_VAR 0 9
38876: PUSH
38877: LD_VAR 0 11
38881: PPUSH
38882: CALL_OW 250
38886: PPUSH
38887: LD_VAR 0 8
38891: PPUSH
38892: LD_INT 2
38894: PPUSH
38895: CALL_OW 272
38899: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
38900: LD_ADDR_VAR 0 10
38904: PUSH
38905: LD_VAR 0 11
38909: PPUSH
38910: CALL_OW 251
38914: PPUSH
38915: LD_VAR 0 8
38919: PPUSH
38920: LD_INT 2
38922: PPUSH
38923: CALL_OW 273
38927: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
38928: LD_VAR 0 9
38932: PPUSH
38933: LD_VAR 0 10
38937: PPUSH
38938: CALL_OW 488
38942: PUSH
38943: LD_VAR 0 9
38947: PPUSH
38948: LD_VAR 0 10
38952: PPUSH
38953: CALL_OW 428
38957: NOT
38958: AND
38959: IFFALSE 38982
// begin ComMoveXY ( tmp , _x , _y ) ;
38961: LD_VAR 0 11
38965: PPUSH
38966: LD_VAR 0 9
38970: PPUSH
38971: LD_VAR 0 10
38975: PPUSH
38976: CALL_OW 111
// break ;
38980: GO 38984
// end ; end ;
38982: GO 38869
38984: POP
38985: POP
// end ;
38986: GO 38452
38988: POP
38989: POP
// end ;
38990: LD_VAR 0 6
38994: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
38995: LD_INT 0
38997: PPUSH
38998: PPUSH
38999: PPUSH
39000: PPUSH
39001: PPUSH
39002: PPUSH
39003: PPUSH
39004: PPUSH
39005: PPUSH
39006: PPUSH
// result := false ;
39007: LD_ADDR_VAR 0 6
39011: PUSH
39012: LD_INT 0
39014: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
39015: LD_VAR 0 1
39019: NOT
39020: PUSH
39021: LD_VAR 0 1
39025: PPUSH
39026: CALL_OW 266
39030: PUSH
39031: LD_INT 0
39033: PUSH
39034: LD_INT 1
39036: PUSH
39037: EMPTY
39038: LIST
39039: LIST
39040: IN
39041: NOT
39042: OR
39043: PUSH
39044: LD_VAR 0 2
39048: NOT
39049: OR
39050: PUSH
39051: LD_VAR 0 5
39055: PUSH
39056: LD_INT 0
39058: PUSH
39059: LD_INT 1
39061: PUSH
39062: LD_INT 2
39064: PUSH
39065: LD_INT 3
39067: PUSH
39068: LD_INT 4
39070: PUSH
39071: LD_INT 5
39073: PUSH
39074: EMPTY
39075: LIST
39076: LIST
39077: LIST
39078: LIST
39079: LIST
39080: LIST
39081: IN
39082: NOT
39083: OR
39084: PUSH
39085: LD_VAR 0 3
39089: PPUSH
39090: LD_VAR 0 4
39094: PPUSH
39095: CALL_OW 488
39099: NOT
39100: OR
39101: IFFALSE 39105
// exit ;
39103: GO 39822
// pom := GetBase ( depot ) ;
39105: LD_ADDR_VAR 0 10
39109: PUSH
39110: LD_VAR 0 1
39114: PPUSH
39115: CALL_OW 274
39119: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
39120: LD_ADDR_VAR 0 11
39124: PUSH
39125: LD_VAR 0 2
39129: PPUSH
39130: LD_VAR 0 1
39134: PPUSH
39135: CALL_OW 248
39139: PPUSH
39140: CALL_OW 450
39144: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
39145: LD_VAR 0 10
39149: PPUSH
39150: LD_INT 1
39152: PPUSH
39153: CALL_OW 275
39157: PUSH
39158: LD_VAR 0 11
39162: PUSH
39163: LD_INT 1
39165: ARRAY
39166: GREATEREQUAL
39167: PUSH
39168: LD_VAR 0 10
39172: PPUSH
39173: LD_INT 2
39175: PPUSH
39176: CALL_OW 275
39180: PUSH
39181: LD_VAR 0 11
39185: PUSH
39186: LD_INT 2
39188: ARRAY
39189: GREATEREQUAL
39190: AND
39191: PUSH
39192: LD_VAR 0 10
39196: PPUSH
39197: LD_INT 3
39199: PPUSH
39200: CALL_OW 275
39204: PUSH
39205: LD_VAR 0 11
39209: PUSH
39210: LD_INT 3
39212: ARRAY
39213: GREATEREQUAL
39214: AND
39215: NOT
39216: IFFALSE 39220
// exit ;
39218: GO 39822
// if GetBType ( depot ) = b_depot then
39220: LD_VAR 0 1
39224: PPUSH
39225: CALL_OW 266
39229: PUSH
39230: LD_INT 0
39232: EQUAL
39233: IFFALSE 39245
// dist := 28 else
39235: LD_ADDR_VAR 0 14
39239: PUSH
39240: LD_INT 28
39242: ST_TO_ADDR
39243: GO 39253
// dist := 36 ;
39245: LD_ADDR_VAR 0 14
39249: PUSH
39250: LD_INT 36
39252: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
39253: LD_VAR 0 1
39257: PPUSH
39258: LD_VAR 0 3
39262: PPUSH
39263: LD_VAR 0 4
39267: PPUSH
39268: CALL_OW 297
39272: PUSH
39273: LD_VAR 0 14
39277: GREATER
39278: IFFALSE 39282
// exit ;
39280: GO 39822
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
39282: LD_ADDR_VAR 0 12
39286: PUSH
39287: LD_VAR 0 2
39291: PPUSH
39292: LD_VAR 0 3
39296: PPUSH
39297: LD_VAR 0 4
39301: PPUSH
39302: LD_VAR 0 5
39306: PPUSH
39307: LD_VAR 0 1
39311: PPUSH
39312: CALL_OW 248
39316: PPUSH
39317: LD_INT 0
39319: PPUSH
39320: CALL 39827 0 6
39324: ST_TO_ADDR
// if not hexes then
39325: LD_VAR 0 12
39329: NOT
39330: IFFALSE 39334
// exit ;
39332: GO 39822
// hex := GetHexInfo ( x , y ) ;
39334: LD_ADDR_VAR 0 15
39338: PUSH
39339: LD_VAR 0 3
39343: PPUSH
39344: LD_VAR 0 4
39348: PPUSH
39349: CALL_OW 546
39353: ST_TO_ADDR
// if hex [ 1 ] then
39354: LD_VAR 0 15
39358: PUSH
39359: LD_INT 1
39361: ARRAY
39362: IFFALSE 39366
// exit ;
39364: GO 39822
// height := hex [ 2 ] ;
39366: LD_ADDR_VAR 0 13
39370: PUSH
39371: LD_VAR 0 15
39375: PUSH
39376: LD_INT 2
39378: ARRAY
39379: ST_TO_ADDR
// for i = 1 to hexes do
39380: LD_ADDR_VAR 0 7
39384: PUSH
39385: DOUBLE
39386: LD_INT 1
39388: DEC
39389: ST_TO_ADDR
39390: LD_VAR 0 12
39394: PUSH
39395: FOR_TO
39396: IFFALSE 39726
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
39398: LD_VAR 0 12
39402: PUSH
39403: LD_VAR 0 7
39407: ARRAY
39408: PUSH
39409: LD_INT 1
39411: ARRAY
39412: PPUSH
39413: LD_VAR 0 12
39417: PUSH
39418: LD_VAR 0 7
39422: ARRAY
39423: PUSH
39424: LD_INT 2
39426: ARRAY
39427: PPUSH
39428: CALL_OW 488
39432: NOT
39433: PUSH
39434: LD_VAR 0 12
39438: PUSH
39439: LD_VAR 0 7
39443: ARRAY
39444: PUSH
39445: LD_INT 1
39447: ARRAY
39448: PPUSH
39449: LD_VAR 0 12
39453: PUSH
39454: LD_VAR 0 7
39458: ARRAY
39459: PUSH
39460: LD_INT 2
39462: ARRAY
39463: PPUSH
39464: CALL_OW 428
39468: PUSH
39469: LD_INT 0
39471: GREATER
39472: OR
39473: PUSH
39474: LD_VAR 0 12
39478: PUSH
39479: LD_VAR 0 7
39483: ARRAY
39484: PUSH
39485: LD_INT 1
39487: ARRAY
39488: PPUSH
39489: LD_VAR 0 12
39493: PUSH
39494: LD_VAR 0 7
39498: ARRAY
39499: PUSH
39500: LD_INT 2
39502: ARRAY
39503: PPUSH
39504: CALL_OW 351
39508: OR
39509: IFFALSE 39515
// exit ;
39511: POP
39512: POP
39513: GO 39822
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39515: LD_ADDR_VAR 0 8
39519: PUSH
39520: LD_VAR 0 12
39524: PUSH
39525: LD_VAR 0 7
39529: ARRAY
39530: PUSH
39531: LD_INT 1
39533: ARRAY
39534: PPUSH
39535: LD_VAR 0 12
39539: PUSH
39540: LD_VAR 0 7
39544: ARRAY
39545: PUSH
39546: LD_INT 2
39548: ARRAY
39549: PPUSH
39550: CALL_OW 546
39554: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
39555: LD_VAR 0 8
39559: PUSH
39560: LD_INT 1
39562: ARRAY
39563: PUSH
39564: LD_VAR 0 8
39568: PUSH
39569: LD_INT 2
39571: ARRAY
39572: PUSH
39573: LD_VAR 0 13
39577: PUSH
39578: LD_INT 2
39580: PLUS
39581: GREATER
39582: OR
39583: PUSH
39584: LD_VAR 0 8
39588: PUSH
39589: LD_INT 2
39591: ARRAY
39592: PUSH
39593: LD_VAR 0 13
39597: PUSH
39598: LD_INT 2
39600: MINUS
39601: LESS
39602: OR
39603: PUSH
39604: LD_VAR 0 8
39608: PUSH
39609: LD_INT 3
39611: ARRAY
39612: PUSH
39613: LD_INT 0
39615: PUSH
39616: LD_INT 8
39618: PUSH
39619: LD_INT 9
39621: PUSH
39622: LD_INT 10
39624: PUSH
39625: LD_INT 11
39627: PUSH
39628: LD_INT 12
39630: PUSH
39631: LD_INT 13
39633: PUSH
39634: LD_INT 16
39636: PUSH
39637: LD_INT 17
39639: PUSH
39640: LD_INT 18
39642: PUSH
39643: LD_INT 19
39645: PUSH
39646: LD_INT 20
39648: PUSH
39649: LD_INT 21
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: LIST
39656: LIST
39657: LIST
39658: LIST
39659: LIST
39660: LIST
39661: LIST
39662: LIST
39663: LIST
39664: LIST
39665: LIST
39666: IN
39667: NOT
39668: OR
39669: PUSH
39670: LD_VAR 0 8
39674: PUSH
39675: LD_INT 5
39677: ARRAY
39678: NOT
39679: OR
39680: PUSH
39681: LD_VAR 0 8
39685: PUSH
39686: LD_INT 6
39688: ARRAY
39689: PUSH
39690: LD_INT 1
39692: PUSH
39693: LD_INT 2
39695: PUSH
39696: LD_INT 7
39698: PUSH
39699: LD_INT 9
39701: PUSH
39702: LD_INT 10
39704: PUSH
39705: LD_INT 11
39707: PUSH
39708: EMPTY
39709: LIST
39710: LIST
39711: LIST
39712: LIST
39713: LIST
39714: LIST
39715: IN
39716: NOT
39717: OR
39718: IFFALSE 39724
// exit ;
39720: POP
39721: POP
39722: GO 39822
// end ;
39724: GO 39395
39726: POP
39727: POP
// side := GetSide ( depot ) ;
39728: LD_ADDR_VAR 0 9
39732: PUSH
39733: LD_VAR 0 1
39737: PPUSH
39738: CALL_OW 255
39742: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
39743: LD_VAR 0 9
39747: PPUSH
39748: LD_VAR 0 3
39752: PPUSH
39753: LD_VAR 0 4
39757: PPUSH
39758: LD_INT 20
39760: PPUSH
39761: CALL 32476 0 4
39765: PUSH
39766: LD_INT 4
39768: ARRAY
39769: IFFALSE 39773
// exit ;
39771: GO 39822
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
39773: LD_VAR 0 2
39777: PUSH
39778: LD_INT 29
39780: PUSH
39781: LD_INT 30
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: IN
39788: PUSH
39789: LD_VAR 0 3
39793: PPUSH
39794: LD_VAR 0 4
39798: PPUSH
39799: LD_VAR 0 9
39803: PPUSH
39804: CALL_OW 440
39808: NOT
39809: AND
39810: IFFALSE 39814
// exit ;
39812: GO 39822
// result := true ;
39814: LD_ADDR_VAR 0 6
39818: PUSH
39819: LD_INT 1
39821: ST_TO_ADDR
// end ;
39822: LD_VAR 0 6
39826: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
39827: LD_INT 0
39829: PPUSH
39830: PPUSH
39831: PPUSH
39832: PPUSH
39833: PPUSH
39834: PPUSH
39835: PPUSH
39836: PPUSH
39837: PPUSH
39838: PPUSH
39839: PPUSH
39840: PPUSH
39841: PPUSH
39842: PPUSH
39843: PPUSH
39844: PPUSH
39845: PPUSH
39846: PPUSH
39847: PPUSH
39848: PPUSH
39849: PPUSH
39850: PPUSH
39851: PPUSH
39852: PPUSH
39853: PPUSH
39854: PPUSH
39855: PPUSH
39856: PPUSH
39857: PPUSH
39858: PPUSH
39859: PPUSH
39860: PPUSH
39861: PPUSH
39862: PPUSH
39863: PPUSH
39864: PPUSH
39865: PPUSH
39866: PPUSH
39867: PPUSH
39868: PPUSH
39869: PPUSH
39870: PPUSH
39871: PPUSH
39872: PPUSH
39873: PPUSH
39874: PPUSH
39875: PPUSH
39876: PPUSH
39877: PPUSH
39878: PPUSH
39879: PPUSH
39880: PPUSH
39881: PPUSH
39882: PPUSH
39883: PPUSH
39884: PPUSH
39885: PPUSH
39886: PPUSH
// result = [ ] ;
39887: LD_ADDR_VAR 0 7
39891: PUSH
39892: EMPTY
39893: ST_TO_ADDR
// temp_list = [ ] ;
39894: LD_ADDR_VAR 0 9
39898: PUSH
39899: EMPTY
39900: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
39901: LD_VAR 0 4
39905: PUSH
39906: LD_INT 0
39908: PUSH
39909: LD_INT 1
39911: PUSH
39912: LD_INT 2
39914: PUSH
39915: LD_INT 3
39917: PUSH
39918: LD_INT 4
39920: PUSH
39921: LD_INT 5
39923: PUSH
39924: EMPTY
39925: LIST
39926: LIST
39927: LIST
39928: LIST
39929: LIST
39930: LIST
39931: IN
39932: NOT
39933: PUSH
39934: LD_VAR 0 1
39938: PUSH
39939: LD_INT 0
39941: PUSH
39942: LD_INT 1
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: IN
39949: PUSH
39950: LD_VAR 0 5
39954: PUSH
39955: LD_INT 1
39957: PUSH
39958: LD_INT 2
39960: PUSH
39961: LD_INT 3
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: LIST
39968: IN
39969: NOT
39970: AND
39971: OR
39972: IFFALSE 39976
// exit ;
39974: GO 58367
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
39976: LD_VAR 0 1
39980: PUSH
39981: LD_INT 6
39983: PUSH
39984: LD_INT 7
39986: PUSH
39987: LD_INT 8
39989: PUSH
39990: LD_INT 13
39992: PUSH
39993: LD_INT 12
39995: PUSH
39996: LD_INT 15
39998: PUSH
39999: LD_INT 11
40001: PUSH
40002: LD_INT 14
40004: PUSH
40005: LD_INT 10
40007: PUSH
40008: EMPTY
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: IN
40019: IFFALSE 40029
// btype = b_lab ;
40021: LD_ADDR_VAR 0 1
40025: PUSH
40026: LD_INT 6
40028: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
40029: LD_VAR 0 6
40033: PUSH
40034: LD_INT 0
40036: PUSH
40037: LD_INT 1
40039: PUSH
40040: LD_INT 2
40042: PUSH
40043: EMPTY
40044: LIST
40045: LIST
40046: LIST
40047: IN
40048: NOT
40049: PUSH
40050: LD_VAR 0 1
40054: PUSH
40055: LD_INT 0
40057: PUSH
40058: LD_INT 1
40060: PUSH
40061: LD_INT 2
40063: PUSH
40064: LD_INT 3
40066: PUSH
40067: LD_INT 6
40069: PUSH
40070: LD_INT 36
40072: PUSH
40073: LD_INT 4
40075: PUSH
40076: LD_INT 5
40078: PUSH
40079: LD_INT 31
40081: PUSH
40082: LD_INT 32
40084: PUSH
40085: LD_INT 33
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: IN
40101: NOT
40102: PUSH
40103: LD_VAR 0 6
40107: PUSH
40108: LD_INT 1
40110: EQUAL
40111: AND
40112: OR
40113: PUSH
40114: LD_VAR 0 1
40118: PUSH
40119: LD_INT 2
40121: PUSH
40122: LD_INT 3
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: IN
40129: NOT
40130: PUSH
40131: LD_VAR 0 6
40135: PUSH
40136: LD_INT 2
40138: EQUAL
40139: AND
40140: OR
40141: IFFALSE 40151
// mode = 0 ;
40143: LD_ADDR_VAR 0 6
40147: PUSH
40148: LD_INT 0
40150: ST_TO_ADDR
// case mode of 0 :
40151: LD_VAR 0 6
40155: PUSH
40156: LD_INT 0
40158: DOUBLE
40159: EQUAL
40160: IFTRUE 40164
40162: GO 51617
40164: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
40165: LD_ADDR_VAR 0 11
40169: PUSH
40170: LD_INT 0
40172: PUSH
40173: LD_INT 0
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: PUSH
40180: LD_INT 0
40182: PUSH
40183: LD_INT 1
40185: NEG
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: PUSH
40191: LD_INT 1
40193: PUSH
40194: LD_INT 0
40196: PUSH
40197: EMPTY
40198: LIST
40199: LIST
40200: PUSH
40201: LD_INT 1
40203: PUSH
40204: LD_INT 1
40206: PUSH
40207: EMPTY
40208: LIST
40209: LIST
40210: PUSH
40211: LD_INT 0
40213: PUSH
40214: LD_INT 1
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: LD_INT 1
40223: NEG
40224: PUSH
40225: LD_INT 0
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: PUSH
40232: LD_INT 1
40234: NEG
40235: PUSH
40236: LD_INT 1
40238: NEG
40239: PUSH
40240: EMPTY
40241: LIST
40242: LIST
40243: PUSH
40244: LD_INT 1
40246: NEG
40247: PUSH
40248: LD_INT 2
40250: NEG
40251: PUSH
40252: EMPTY
40253: LIST
40254: LIST
40255: PUSH
40256: LD_INT 0
40258: PUSH
40259: LD_INT 2
40261: NEG
40262: PUSH
40263: EMPTY
40264: LIST
40265: LIST
40266: PUSH
40267: LD_INT 1
40269: PUSH
40270: LD_INT 1
40272: NEG
40273: PUSH
40274: EMPTY
40275: LIST
40276: LIST
40277: PUSH
40278: LD_INT 1
40280: PUSH
40281: LD_INT 2
40283: PUSH
40284: EMPTY
40285: LIST
40286: LIST
40287: PUSH
40288: LD_INT 0
40290: PUSH
40291: LD_INT 2
40293: PUSH
40294: EMPTY
40295: LIST
40296: LIST
40297: PUSH
40298: LD_INT 1
40300: NEG
40301: PUSH
40302: LD_INT 1
40304: PUSH
40305: EMPTY
40306: LIST
40307: LIST
40308: PUSH
40309: LD_INT 1
40311: PUSH
40312: LD_INT 3
40314: PUSH
40315: EMPTY
40316: LIST
40317: LIST
40318: PUSH
40319: LD_INT 0
40321: PUSH
40322: LD_INT 3
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: PUSH
40329: LD_INT 1
40331: NEG
40332: PUSH
40333: LD_INT 2
40335: PUSH
40336: EMPTY
40337: LIST
40338: LIST
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: LIST
40344: LIST
40345: LIST
40346: LIST
40347: LIST
40348: LIST
40349: LIST
40350: LIST
40351: LIST
40352: LIST
40353: LIST
40354: LIST
40355: LIST
40356: LIST
40357: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
40358: LD_ADDR_VAR 0 12
40362: PUSH
40363: LD_INT 0
40365: PUSH
40366: LD_INT 0
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PUSH
40373: LD_INT 0
40375: PUSH
40376: LD_INT 1
40378: NEG
40379: PUSH
40380: EMPTY
40381: LIST
40382: LIST
40383: PUSH
40384: LD_INT 1
40386: PUSH
40387: LD_INT 0
40389: PUSH
40390: EMPTY
40391: LIST
40392: LIST
40393: PUSH
40394: LD_INT 1
40396: PUSH
40397: LD_INT 1
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PUSH
40404: LD_INT 0
40406: PUSH
40407: LD_INT 1
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: PUSH
40414: LD_INT 1
40416: NEG
40417: PUSH
40418: LD_INT 0
40420: PUSH
40421: EMPTY
40422: LIST
40423: LIST
40424: PUSH
40425: LD_INT 1
40427: NEG
40428: PUSH
40429: LD_INT 1
40431: NEG
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: PUSH
40437: LD_INT 1
40439: PUSH
40440: LD_INT 1
40442: NEG
40443: PUSH
40444: EMPTY
40445: LIST
40446: LIST
40447: PUSH
40448: LD_INT 2
40450: PUSH
40451: LD_INT 0
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: PUSH
40458: LD_INT 2
40460: PUSH
40461: LD_INT 1
40463: PUSH
40464: EMPTY
40465: LIST
40466: LIST
40467: PUSH
40468: LD_INT 1
40470: NEG
40471: PUSH
40472: LD_INT 1
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: PUSH
40479: LD_INT 2
40481: NEG
40482: PUSH
40483: LD_INT 0
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PUSH
40490: LD_INT 2
40492: NEG
40493: PUSH
40494: LD_INT 1
40496: NEG
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: PUSH
40502: LD_INT 2
40504: NEG
40505: PUSH
40506: LD_INT 1
40508: PUSH
40509: EMPTY
40510: LIST
40511: LIST
40512: PUSH
40513: LD_INT 3
40515: NEG
40516: PUSH
40517: LD_INT 0
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: PUSH
40524: LD_INT 3
40526: NEG
40527: PUSH
40528: LD_INT 1
40530: NEG
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: LIST
40540: LIST
40541: LIST
40542: LIST
40543: LIST
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: LIST
40549: LIST
40550: LIST
40551: LIST
40552: LIST
40553: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40554: LD_ADDR_VAR 0 13
40558: PUSH
40559: LD_INT 0
40561: PUSH
40562: LD_INT 0
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: PUSH
40569: LD_INT 0
40571: PUSH
40572: LD_INT 1
40574: NEG
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: PUSH
40580: LD_INT 1
40582: PUSH
40583: LD_INT 0
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: PUSH
40590: LD_INT 1
40592: PUSH
40593: LD_INT 1
40595: PUSH
40596: EMPTY
40597: LIST
40598: LIST
40599: PUSH
40600: LD_INT 0
40602: PUSH
40603: LD_INT 1
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: LD_INT 1
40612: NEG
40613: PUSH
40614: LD_INT 0
40616: PUSH
40617: EMPTY
40618: LIST
40619: LIST
40620: PUSH
40621: LD_INT 1
40623: NEG
40624: PUSH
40625: LD_INT 1
40627: NEG
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: PUSH
40633: LD_INT 1
40635: NEG
40636: PUSH
40637: LD_INT 2
40639: NEG
40640: PUSH
40641: EMPTY
40642: LIST
40643: LIST
40644: PUSH
40645: LD_INT 2
40647: PUSH
40648: LD_INT 1
40650: PUSH
40651: EMPTY
40652: LIST
40653: LIST
40654: PUSH
40655: LD_INT 2
40657: PUSH
40658: LD_INT 2
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: PUSH
40665: LD_INT 1
40667: PUSH
40668: LD_INT 2
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: PUSH
40675: LD_INT 2
40677: NEG
40678: PUSH
40679: LD_INT 1
40681: NEG
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: PUSH
40687: LD_INT 2
40689: NEG
40690: PUSH
40691: LD_INT 2
40693: NEG
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: PUSH
40699: LD_INT 2
40701: NEG
40702: PUSH
40703: LD_INT 3
40705: NEG
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: LD_INT 3
40713: NEG
40714: PUSH
40715: LD_INT 2
40717: NEG
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: PUSH
40723: LD_INT 3
40725: NEG
40726: PUSH
40727: LD_INT 3
40729: NEG
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: PUSH
40735: EMPTY
40736: LIST
40737: LIST
40738: LIST
40739: LIST
40740: LIST
40741: LIST
40742: LIST
40743: LIST
40744: LIST
40745: LIST
40746: LIST
40747: LIST
40748: LIST
40749: LIST
40750: LIST
40751: LIST
40752: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
40753: LD_ADDR_VAR 0 14
40757: PUSH
40758: LD_INT 0
40760: PUSH
40761: LD_INT 0
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: PUSH
40768: LD_INT 0
40770: PUSH
40771: LD_INT 1
40773: NEG
40774: PUSH
40775: EMPTY
40776: LIST
40777: LIST
40778: PUSH
40779: LD_INT 1
40781: PUSH
40782: LD_INT 0
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: PUSH
40789: LD_INT 1
40791: PUSH
40792: LD_INT 1
40794: PUSH
40795: EMPTY
40796: LIST
40797: LIST
40798: PUSH
40799: LD_INT 0
40801: PUSH
40802: LD_INT 1
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: PUSH
40809: LD_INT 1
40811: NEG
40812: PUSH
40813: LD_INT 0
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: PUSH
40820: LD_INT 1
40822: NEG
40823: PUSH
40824: LD_INT 1
40826: NEG
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: PUSH
40832: LD_INT 1
40834: NEG
40835: PUSH
40836: LD_INT 2
40838: NEG
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: PUSH
40844: LD_INT 0
40846: PUSH
40847: LD_INT 2
40849: NEG
40850: PUSH
40851: EMPTY
40852: LIST
40853: LIST
40854: PUSH
40855: LD_INT 1
40857: PUSH
40858: LD_INT 1
40860: NEG
40861: PUSH
40862: EMPTY
40863: LIST
40864: LIST
40865: PUSH
40866: LD_INT 1
40868: PUSH
40869: LD_INT 2
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: PUSH
40876: LD_INT 0
40878: PUSH
40879: LD_INT 2
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: PUSH
40886: LD_INT 1
40888: NEG
40889: PUSH
40890: LD_INT 1
40892: PUSH
40893: EMPTY
40894: LIST
40895: LIST
40896: PUSH
40897: LD_INT 1
40899: NEG
40900: PUSH
40901: LD_INT 3
40903: NEG
40904: PUSH
40905: EMPTY
40906: LIST
40907: LIST
40908: PUSH
40909: LD_INT 0
40911: PUSH
40912: LD_INT 3
40914: NEG
40915: PUSH
40916: EMPTY
40917: LIST
40918: LIST
40919: PUSH
40920: LD_INT 1
40922: PUSH
40923: LD_INT 2
40925: NEG
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: EMPTY
40932: LIST
40933: LIST
40934: LIST
40935: LIST
40936: LIST
40937: LIST
40938: LIST
40939: LIST
40940: LIST
40941: LIST
40942: LIST
40943: LIST
40944: LIST
40945: LIST
40946: LIST
40947: LIST
40948: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
40949: LD_ADDR_VAR 0 15
40953: PUSH
40954: LD_INT 0
40956: PUSH
40957: LD_INT 0
40959: PUSH
40960: EMPTY
40961: LIST
40962: LIST
40963: PUSH
40964: LD_INT 0
40966: PUSH
40967: LD_INT 1
40969: NEG
40970: PUSH
40971: EMPTY
40972: LIST
40973: LIST
40974: PUSH
40975: LD_INT 1
40977: PUSH
40978: LD_INT 0
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: PUSH
40985: LD_INT 1
40987: PUSH
40988: LD_INT 1
40990: PUSH
40991: EMPTY
40992: LIST
40993: LIST
40994: PUSH
40995: LD_INT 0
40997: PUSH
40998: LD_INT 1
41000: PUSH
41001: EMPTY
41002: LIST
41003: LIST
41004: PUSH
41005: LD_INT 1
41007: NEG
41008: PUSH
41009: LD_INT 0
41011: PUSH
41012: EMPTY
41013: LIST
41014: LIST
41015: PUSH
41016: LD_INT 1
41018: NEG
41019: PUSH
41020: LD_INT 1
41022: NEG
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: PUSH
41028: LD_INT 1
41030: PUSH
41031: LD_INT 1
41033: NEG
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: PUSH
41039: LD_INT 2
41041: PUSH
41042: LD_INT 0
41044: PUSH
41045: EMPTY
41046: LIST
41047: LIST
41048: PUSH
41049: LD_INT 2
41051: PUSH
41052: LD_INT 1
41054: PUSH
41055: EMPTY
41056: LIST
41057: LIST
41058: PUSH
41059: LD_INT 1
41061: NEG
41062: PUSH
41063: LD_INT 1
41065: PUSH
41066: EMPTY
41067: LIST
41068: LIST
41069: PUSH
41070: LD_INT 2
41072: NEG
41073: PUSH
41074: LD_INT 0
41076: PUSH
41077: EMPTY
41078: LIST
41079: LIST
41080: PUSH
41081: LD_INT 2
41083: NEG
41084: PUSH
41085: LD_INT 1
41087: NEG
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: PUSH
41093: LD_INT 2
41095: PUSH
41096: LD_INT 1
41098: NEG
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: PUSH
41104: LD_INT 3
41106: PUSH
41107: LD_INT 0
41109: PUSH
41110: EMPTY
41111: LIST
41112: LIST
41113: PUSH
41114: LD_INT 3
41116: PUSH
41117: LD_INT 1
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: PUSH
41124: EMPTY
41125: LIST
41126: LIST
41127: LIST
41128: LIST
41129: LIST
41130: LIST
41131: LIST
41132: LIST
41133: LIST
41134: LIST
41135: LIST
41136: LIST
41137: LIST
41138: LIST
41139: LIST
41140: LIST
41141: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41142: LD_ADDR_VAR 0 16
41146: PUSH
41147: LD_INT 0
41149: PUSH
41150: LD_INT 0
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: PUSH
41157: LD_INT 0
41159: PUSH
41160: LD_INT 1
41162: NEG
41163: PUSH
41164: EMPTY
41165: LIST
41166: LIST
41167: PUSH
41168: LD_INT 1
41170: PUSH
41171: LD_INT 0
41173: PUSH
41174: EMPTY
41175: LIST
41176: LIST
41177: PUSH
41178: LD_INT 1
41180: PUSH
41181: LD_INT 1
41183: PUSH
41184: EMPTY
41185: LIST
41186: LIST
41187: PUSH
41188: LD_INT 0
41190: PUSH
41191: LD_INT 1
41193: PUSH
41194: EMPTY
41195: LIST
41196: LIST
41197: PUSH
41198: LD_INT 1
41200: NEG
41201: PUSH
41202: LD_INT 0
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: PUSH
41209: LD_INT 1
41211: NEG
41212: PUSH
41213: LD_INT 1
41215: NEG
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: PUSH
41221: LD_INT 1
41223: NEG
41224: PUSH
41225: LD_INT 2
41227: NEG
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: PUSH
41233: LD_INT 2
41235: PUSH
41236: LD_INT 1
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: PUSH
41243: LD_INT 2
41245: PUSH
41246: LD_INT 2
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PUSH
41253: LD_INT 1
41255: PUSH
41256: LD_INT 2
41258: PUSH
41259: EMPTY
41260: LIST
41261: LIST
41262: PUSH
41263: LD_INT 2
41265: NEG
41266: PUSH
41267: LD_INT 1
41269: NEG
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: PUSH
41275: LD_INT 2
41277: NEG
41278: PUSH
41279: LD_INT 2
41281: NEG
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: PUSH
41287: LD_INT 3
41289: PUSH
41290: LD_INT 2
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: LD_INT 3
41299: PUSH
41300: LD_INT 3
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: LD_INT 2
41309: PUSH
41310: LD_INT 3
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: LIST
41321: LIST
41322: LIST
41323: LIST
41324: LIST
41325: LIST
41326: LIST
41327: LIST
41328: LIST
41329: LIST
41330: LIST
41331: LIST
41332: LIST
41333: LIST
41334: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41335: LD_ADDR_VAR 0 17
41339: PUSH
41340: LD_INT 0
41342: PUSH
41343: LD_INT 0
41345: PUSH
41346: EMPTY
41347: LIST
41348: LIST
41349: PUSH
41350: LD_INT 0
41352: PUSH
41353: LD_INT 1
41355: NEG
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 1
41363: PUSH
41364: LD_INT 0
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PUSH
41371: LD_INT 1
41373: PUSH
41374: LD_INT 1
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: PUSH
41381: LD_INT 0
41383: PUSH
41384: LD_INT 1
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: PUSH
41391: LD_INT 1
41393: NEG
41394: PUSH
41395: LD_INT 0
41397: PUSH
41398: EMPTY
41399: LIST
41400: LIST
41401: PUSH
41402: LD_INT 1
41404: NEG
41405: PUSH
41406: LD_INT 1
41408: NEG
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: PUSH
41414: LD_INT 1
41416: NEG
41417: PUSH
41418: LD_INT 2
41420: NEG
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: PUSH
41426: LD_INT 0
41428: PUSH
41429: LD_INT 2
41431: NEG
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: PUSH
41437: LD_INT 1
41439: PUSH
41440: LD_INT 1
41442: NEG
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: PUSH
41448: LD_INT 2
41450: PUSH
41451: LD_INT 0
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: PUSH
41458: LD_INT 2
41460: PUSH
41461: LD_INT 1
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: LD_INT 2
41470: PUSH
41471: LD_INT 2
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: LD_INT 1
41480: PUSH
41481: LD_INT 2
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: LD_INT 0
41490: PUSH
41491: LD_INT 2
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: PUSH
41498: LD_INT 1
41500: NEG
41501: PUSH
41502: LD_INT 1
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: PUSH
41509: LD_INT 2
41511: NEG
41512: PUSH
41513: LD_INT 0
41515: PUSH
41516: EMPTY
41517: LIST
41518: LIST
41519: PUSH
41520: LD_INT 2
41522: NEG
41523: PUSH
41524: LD_INT 1
41526: NEG
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: PUSH
41532: LD_INT 2
41534: NEG
41535: PUSH
41536: LD_INT 2
41538: NEG
41539: PUSH
41540: EMPTY
41541: LIST
41542: LIST
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: LIST
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: LIST
41558: LIST
41559: LIST
41560: LIST
41561: LIST
41562: LIST
41563: LIST
41564: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41565: LD_ADDR_VAR 0 18
41569: PUSH
41570: LD_INT 0
41572: PUSH
41573: LD_INT 0
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 0
41582: PUSH
41583: LD_INT 1
41585: NEG
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 1
41593: PUSH
41594: LD_INT 0
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: PUSH
41601: LD_INT 1
41603: PUSH
41604: LD_INT 1
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: PUSH
41611: LD_INT 0
41613: PUSH
41614: LD_INT 1
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: PUSH
41621: LD_INT 1
41623: NEG
41624: PUSH
41625: LD_INT 0
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PUSH
41632: LD_INT 1
41634: NEG
41635: PUSH
41636: LD_INT 1
41638: NEG
41639: PUSH
41640: EMPTY
41641: LIST
41642: LIST
41643: PUSH
41644: LD_INT 1
41646: NEG
41647: PUSH
41648: LD_INT 2
41650: NEG
41651: PUSH
41652: EMPTY
41653: LIST
41654: LIST
41655: PUSH
41656: LD_INT 0
41658: PUSH
41659: LD_INT 2
41661: NEG
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: LD_INT 1
41669: PUSH
41670: LD_INT 1
41672: NEG
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PUSH
41678: LD_INT 2
41680: PUSH
41681: LD_INT 0
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: LD_INT 2
41690: PUSH
41691: LD_INT 1
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PUSH
41698: LD_INT 2
41700: PUSH
41701: LD_INT 2
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: PUSH
41708: LD_INT 1
41710: PUSH
41711: LD_INT 2
41713: PUSH
41714: EMPTY
41715: LIST
41716: LIST
41717: PUSH
41718: LD_INT 0
41720: PUSH
41721: LD_INT 2
41723: PUSH
41724: EMPTY
41725: LIST
41726: LIST
41727: PUSH
41728: LD_INT 1
41730: NEG
41731: PUSH
41732: LD_INT 1
41734: PUSH
41735: EMPTY
41736: LIST
41737: LIST
41738: PUSH
41739: LD_INT 2
41741: NEG
41742: PUSH
41743: LD_INT 0
41745: PUSH
41746: EMPTY
41747: LIST
41748: LIST
41749: PUSH
41750: LD_INT 2
41752: NEG
41753: PUSH
41754: LD_INT 1
41756: NEG
41757: PUSH
41758: EMPTY
41759: LIST
41760: LIST
41761: PUSH
41762: LD_INT 2
41764: NEG
41765: PUSH
41766: LD_INT 2
41768: NEG
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: LIST
41778: LIST
41779: LIST
41780: LIST
41781: LIST
41782: LIST
41783: LIST
41784: LIST
41785: LIST
41786: LIST
41787: LIST
41788: LIST
41789: LIST
41790: LIST
41791: LIST
41792: LIST
41793: LIST
41794: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
41795: LD_ADDR_VAR 0 19
41799: PUSH
41800: LD_INT 0
41802: PUSH
41803: LD_INT 0
41805: PUSH
41806: EMPTY
41807: LIST
41808: LIST
41809: PUSH
41810: LD_INT 0
41812: PUSH
41813: LD_INT 1
41815: NEG
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: LD_INT 1
41823: PUSH
41824: LD_INT 0
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: PUSH
41831: LD_INT 1
41833: PUSH
41834: LD_INT 1
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 0
41843: PUSH
41844: LD_INT 1
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: PUSH
41851: LD_INT 1
41853: NEG
41854: PUSH
41855: LD_INT 0
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: PUSH
41862: LD_INT 1
41864: NEG
41865: PUSH
41866: LD_INT 1
41868: NEG
41869: PUSH
41870: EMPTY
41871: LIST
41872: LIST
41873: PUSH
41874: LD_INT 1
41876: NEG
41877: PUSH
41878: LD_INT 2
41880: NEG
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: PUSH
41886: LD_INT 0
41888: PUSH
41889: LD_INT 2
41891: NEG
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: PUSH
41897: LD_INT 1
41899: PUSH
41900: LD_INT 1
41902: NEG
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 2
41910: PUSH
41911: LD_INT 0
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: LD_INT 2
41920: PUSH
41921: LD_INT 1
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: PUSH
41928: LD_INT 2
41930: PUSH
41931: LD_INT 2
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: LD_INT 1
41940: PUSH
41941: LD_INT 2
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: PUSH
41948: LD_INT 0
41950: PUSH
41951: LD_INT 2
41953: PUSH
41954: EMPTY
41955: LIST
41956: LIST
41957: PUSH
41958: LD_INT 1
41960: NEG
41961: PUSH
41962: LD_INT 1
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: PUSH
41969: LD_INT 2
41971: NEG
41972: PUSH
41973: LD_INT 0
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: PUSH
41980: LD_INT 2
41982: NEG
41983: PUSH
41984: LD_INT 1
41986: NEG
41987: PUSH
41988: EMPTY
41989: LIST
41990: LIST
41991: PUSH
41992: LD_INT 2
41994: NEG
41995: PUSH
41996: LD_INT 2
41998: NEG
41999: PUSH
42000: EMPTY
42001: LIST
42002: LIST
42003: PUSH
42004: EMPTY
42005: LIST
42006: LIST
42007: LIST
42008: LIST
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: LIST
42016: LIST
42017: LIST
42018: LIST
42019: LIST
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42025: LD_ADDR_VAR 0 20
42029: PUSH
42030: LD_INT 0
42032: PUSH
42033: LD_INT 0
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 0
42042: PUSH
42043: LD_INT 1
42045: NEG
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 1
42053: PUSH
42054: LD_INT 0
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: PUSH
42061: LD_INT 1
42063: PUSH
42064: LD_INT 1
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: LD_INT 0
42073: PUSH
42074: LD_INT 1
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: PUSH
42081: LD_INT 1
42083: NEG
42084: PUSH
42085: LD_INT 0
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: PUSH
42092: LD_INT 1
42094: NEG
42095: PUSH
42096: LD_INT 1
42098: NEG
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PUSH
42104: LD_INT 1
42106: NEG
42107: PUSH
42108: LD_INT 2
42110: NEG
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: PUSH
42116: LD_INT 0
42118: PUSH
42119: LD_INT 2
42121: NEG
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: PUSH
42127: LD_INT 1
42129: PUSH
42130: LD_INT 1
42132: NEG
42133: PUSH
42134: EMPTY
42135: LIST
42136: LIST
42137: PUSH
42138: LD_INT 2
42140: PUSH
42141: LD_INT 0
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: PUSH
42148: LD_INT 2
42150: PUSH
42151: LD_INT 1
42153: PUSH
42154: EMPTY
42155: LIST
42156: LIST
42157: PUSH
42158: LD_INT 2
42160: PUSH
42161: LD_INT 2
42163: PUSH
42164: EMPTY
42165: LIST
42166: LIST
42167: PUSH
42168: LD_INT 1
42170: PUSH
42171: LD_INT 2
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 0
42180: PUSH
42181: LD_INT 2
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: LD_INT 1
42190: NEG
42191: PUSH
42192: LD_INT 1
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: PUSH
42199: LD_INT 2
42201: NEG
42202: PUSH
42203: LD_INT 0
42205: PUSH
42206: EMPTY
42207: LIST
42208: LIST
42209: PUSH
42210: LD_INT 2
42212: NEG
42213: PUSH
42214: LD_INT 1
42216: NEG
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: PUSH
42222: LD_INT 2
42224: NEG
42225: PUSH
42226: LD_INT 2
42228: NEG
42229: PUSH
42230: EMPTY
42231: LIST
42232: LIST
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: LIST
42238: LIST
42239: LIST
42240: LIST
42241: LIST
42242: LIST
42243: LIST
42244: LIST
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: LIST
42251: LIST
42252: LIST
42253: LIST
42254: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42255: LD_ADDR_VAR 0 21
42259: PUSH
42260: LD_INT 0
42262: PUSH
42263: LD_INT 0
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PUSH
42270: LD_INT 0
42272: PUSH
42273: LD_INT 1
42275: NEG
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: PUSH
42281: LD_INT 1
42283: PUSH
42284: LD_INT 0
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: PUSH
42291: LD_INT 1
42293: PUSH
42294: LD_INT 1
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: PUSH
42301: LD_INT 0
42303: PUSH
42304: LD_INT 1
42306: PUSH
42307: EMPTY
42308: LIST
42309: LIST
42310: PUSH
42311: LD_INT 1
42313: NEG
42314: PUSH
42315: LD_INT 0
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PUSH
42322: LD_INT 1
42324: NEG
42325: PUSH
42326: LD_INT 1
42328: NEG
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: PUSH
42334: LD_INT 1
42336: NEG
42337: PUSH
42338: LD_INT 2
42340: NEG
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: LD_INT 0
42348: PUSH
42349: LD_INT 2
42351: NEG
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PUSH
42357: LD_INT 1
42359: PUSH
42360: LD_INT 1
42362: NEG
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: PUSH
42368: LD_INT 2
42370: PUSH
42371: LD_INT 0
42373: PUSH
42374: EMPTY
42375: LIST
42376: LIST
42377: PUSH
42378: LD_INT 2
42380: PUSH
42381: LD_INT 1
42383: PUSH
42384: EMPTY
42385: LIST
42386: LIST
42387: PUSH
42388: LD_INT 2
42390: PUSH
42391: LD_INT 2
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: PUSH
42398: LD_INT 1
42400: PUSH
42401: LD_INT 2
42403: PUSH
42404: EMPTY
42405: LIST
42406: LIST
42407: PUSH
42408: LD_INT 0
42410: PUSH
42411: LD_INT 2
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: PUSH
42418: LD_INT 1
42420: NEG
42421: PUSH
42422: LD_INT 1
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: PUSH
42429: LD_INT 2
42431: NEG
42432: PUSH
42433: LD_INT 0
42435: PUSH
42436: EMPTY
42437: LIST
42438: LIST
42439: PUSH
42440: LD_INT 2
42442: NEG
42443: PUSH
42444: LD_INT 1
42446: NEG
42447: PUSH
42448: EMPTY
42449: LIST
42450: LIST
42451: PUSH
42452: LD_INT 2
42454: NEG
42455: PUSH
42456: LD_INT 2
42458: NEG
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: LIST
42468: LIST
42469: LIST
42470: LIST
42471: LIST
42472: LIST
42473: LIST
42474: LIST
42475: LIST
42476: LIST
42477: LIST
42478: LIST
42479: LIST
42480: LIST
42481: LIST
42482: LIST
42483: LIST
42484: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42485: LD_ADDR_VAR 0 22
42489: PUSH
42490: LD_INT 0
42492: PUSH
42493: LD_INT 0
42495: PUSH
42496: EMPTY
42497: LIST
42498: LIST
42499: PUSH
42500: LD_INT 0
42502: PUSH
42503: LD_INT 1
42505: NEG
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: LD_INT 1
42513: PUSH
42514: LD_INT 0
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 1
42523: PUSH
42524: LD_INT 1
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PUSH
42531: LD_INT 0
42533: PUSH
42534: LD_INT 1
42536: PUSH
42537: EMPTY
42538: LIST
42539: LIST
42540: PUSH
42541: LD_INT 1
42543: NEG
42544: PUSH
42545: LD_INT 0
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: PUSH
42552: LD_INT 1
42554: NEG
42555: PUSH
42556: LD_INT 1
42558: NEG
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: PUSH
42564: LD_INT 1
42566: NEG
42567: PUSH
42568: LD_INT 2
42570: NEG
42571: PUSH
42572: EMPTY
42573: LIST
42574: LIST
42575: PUSH
42576: LD_INT 0
42578: PUSH
42579: LD_INT 2
42581: NEG
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: PUSH
42587: LD_INT 1
42589: PUSH
42590: LD_INT 1
42592: NEG
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 2
42600: PUSH
42601: LD_INT 0
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: PUSH
42608: LD_INT 2
42610: PUSH
42611: LD_INT 1
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 2
42620: PUSH
42621: LD_INT 2
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: PUSH
42628: LD_INT 1
42630: PUSH
42631: LD_INT 2
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: PUSH
42638: LD_INT 0
42640: PUSH
42641: LD_INT 2
42643: PUSH
42644: EMPTY
42645: LIST
42646: LIST
42647: PUSH
42648: LD_INT 1
42650: NEG
42651: PUSH
42652: LD_INT 1
42654: PUSH
42655: EMPTY
42656: LIST
42657: LIST
42658: PUSH
42659: LD_INT 2
42661: NEG
42662: PUSH
42663: LD_INT 0
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: PUSH
42670: LD_INT 2
42672: NEG
42673: PUSH
42674: LD_INT 1
42676: NEG
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 2
42684: NEG
42685: PUSH
42686: LD_INT 2
42688: NEG
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: LIST
42698: LIST
42699: LIST
42700: LIST
42701: LIST
42702: LIST
42703: LIST
42704: LIST
42705: LIST
42706: LIST
42707: LIST
42708: LIST
42709: LIST
42710: LIST
42711: LIST
42712: LIST
42713: LIST
42714: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
42715: LD_ADDR_VAR 0 23
42719: PUSH
42720: LD_INT 0
42722: PUSH
42723: LD_INT 0
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: PUSH
42730: LD_INT 0
42732: PUSH
42733: LD_INT 1
42735: NEG
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: LD_INT 1
42743: PUSH
42744: LD_INT 0
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PUSH
42751: LD_INT 1
42753: PUSH
42754: LD_INT 1
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: LD_INT 0
42763: PUSH
42764: LD_INT 1
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: LD_INT 1
42773: NEG
42774: PUSH
42775: LD_INT 0
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: PUSH
42782: LD_INT 1
42784: NEG
42785: PUSH
42786: LD_INT 1
42788: NEG
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: PUSH
42794: LD_INT 1
42796: NEG
42797: PUSH
42798: LD_INT 2
42800: NEG
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: PUSH
42806: LD_INT 0
42808: PUSH
42809: LD_INT 2
42811: NEG
42812: PUSH
42813: EMPTY
42814: LIST
42815: LIST
42816: PUSH
42817: LD_INT 1
42819: PUSH
42820: LD_INT 1
42822: NEG
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: LD_INT 2
42830: PUSH
42831: LD_INT 0
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: PUSH
42838: LD_INT 2
42840: PUSH
42841: LD_INT 1
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: PUSH
42848: LD_INT 2
42850: PUSH
42851: LD_INT 2
42853: PUSH
42854: EMPTY
42855: LIST
42856: LIST
42857: PUSH
42858: LD_INT 1
42860: PUSH
42861: LD_INT 2
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: PUSH
42868: LD_INT 0
42870: PUSH
42871: LD_INT 2
42873: PUSH
42874: EMPTY
42875: LIST
42876: LIST
42877: PUSH
42878: LD_INT 1
42880: NEG
42881: PUSH
42882: LD_INT 1
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: PUSH
42889: LD_INT 2
42891: NEG
42892: PUSH
42893: LD_INT 0
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: PUSH
42900: LD_INT 2
42902: NEG
42903: PUSH
42904: LD_INT 1
42906: NEG
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: PUSH
42912: LD_INT 2
42914: NEG
42915: PUSH
42916: LD_INT 2
42918: NEG
42919: PUSH
42920: EMPTY
42921: LIST
42922: LIST
42923: PUSH
42924: LD_INT 2
42926: NEG
42927: PUSH
42928: LD_INT 3
42930: NEG
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PUSH
42936: LD_INT 1
42938: NEG
42939: PUSH
42940: LD_INT 3
42942: NEG
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 1
42950: PUSH
42951: LD_INT 2
42953: NEG
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: PUSH
42959: LD_INT 2
42961: PUSH
42962: LD_INT 1
42964: NEG
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: PUSH
42970: EMPTY
42971: LIST
42972: LIST
42973: LIST
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: LIST
42979: LIST
42980: LIST
42981: LIST
42982: LIST
42983: LIST
42984: LIST
42985: LIST
42986: LIST
42987: LIST
42988: LIST
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
42995: LD_ADDR_VAR 0 24
42999: PUSH
43000: LD_INT 0
43002: PUSH
43003: LD_INT 0
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: PUSH
43010: LD_INT 0
43012: PUSH
43013: LD_INT 1
43015: NEG
43016: PUSH
43017: EMPTY
43018: LIST
43019: LIST
43020: PUSH
43021: LD_INT 1
43023: PUSH
43024: LD_INT 0
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: PUSH
43031: LD_INT 1
43033: PUSH
43034: LD_INT 1
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: PUSH
43041: LD_INT 0
43043: PUSH
43044: LD_INT 1
43046: PUSH
43047: EMPTY
43048: LIST
43049: LIST
43050: PUSH
43051: LD_INT 1
43053: NEG
43054: PUSH
43055: LD_INT 0
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: PUSH
43062: LD_INT 1
43064: NEG
43065: PUSH
43066: LD_INT 1
43068: NEG
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: PUSH
43074: LD_INT 1
43076: NEG
43077: PUSH
43078: LD_INT 2
43080: NEG
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: PUSH
43086: LD_INT 0
43088: PUSH
43089: LD_INT 2
43091: NEG
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: PUSH
43097: LD_INT 1
43099: PUSH
43100: LD_INT 1
43102: NEG
43103: PUSH
43104: EMPTY
43105: LIST
43106: LIST
43107: PUSH
43108: LD_INT 2
43110: PUSH
43111: LD_INT 0
43113: PUSH
43114: EMPTY
43115: LIST
43116: LIST
43117: PUSH
43118: LD_INT 2
43120: PUSH
43121: LD_INT 1
43123: PUSH
43124: EMPTY
43125: LIST
43126: LIST
43127: PUSH
43128: LD_INT 2
43130: PUSH
43131: LD_INT 2
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: PUSH
43138: LD_INT 1
43140: PUSH
43141: LD_INT 2
43143: PUSH
43144: EMPTY
43145: LIST
43146: LIST
43147: PUSH
43148: LD_INT 0
43150: PUSH
43151: LD_INT 2
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: LD_INT 1
43160: NEG
43161: PUSH
43162: LD_INT 1
43164: PUSH
43165: EMPTY
43166: LIST
43167: LIST
43168: PUSH
43169: LD_INT 2
43171: NEG
43172: PUSH
43173: LD_INT 0
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PUSH
43180: LD_INT 2
43182: NEG
43183: PUSH
43184: LD_INT 1
43186: NEG
43187: PUSH
43188: EMPTY
43189: LIST
43190: LIST
43191: PUSH
43192: LD_INT 2
43194: NEG
43195: PUSH
43196: LD_INT 2
43198: NEG
43199: PUSH
43200: EMPTY
43201: LIST
43202: LIST
43203: PUSH
43204: LD_INT 1
43206: PUSH
43207: LD_INT 2
43209: NEG
43210: PUSH
43211: EMPTY
43212: LIST
43213: LIST
43214: PUSH
43215: LD_INT 2
43217: PUSH
43218: LD_INT 1
43220: NEG
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: PUSH
43226: LD_INT 3
43228: PUSH
43229: LD_INT 1
43231: PUSH
43232: EMPTY
43233: LIST
43234: LIST
43235: PUSH
43236: LD_INT 3
43238: PUSH
43239: LD_INT 2
43241: PUSH
43242: EMPTY
43243: LIST
43244: LIST
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: LIST
43250: LIST
43251: LIST
43252: LIST
43253: LIST
43254: LIST
43255: LIST
43256: LIST
43257: LIST
43258: LIST
43259: LIST
43260: LIST
43261: LIST
43262: LIST
43263: LIST
43264: LIST
43265: LIST
43266: LIST
43267: LIST
43268: LIST
43269: LIST
43270: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
43271: LD_ADDR_VAR 0 25
43275: PUSH
43276: LD_INT 0
43278: PUSH
43279: LD_INT 0
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: PUSH
43286: LD_INT 0
43288: PUSH
43289: LD_INT 1
43291: NEG
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: PUSH
43297: LD_INT 1
43299: PUSH
43300: LD_INT 0
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: PUSH
43307: LD_INT 1
43309: PUSH
43310: LD_INT 1
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: PUSH
43317: LD_INT 0
43319: PUSH
43320: LD_INT 1
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: PUSH
43327: LD_INT 1
43329: NEG
43330: PUSH
43331: LD_INT 0
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: PUSH
43338: LD_INT 1
43340: NEG
43341: PUSH
43342: LD_INT 1
43344: NEG
43345: PUSH
43346: EMPTY
43347: LIST
43348: LIST
43349: PUSH
43350: LD_INT 1
43352: NEG
43353: PUSH
43354: LD_INT 2
43356: NEG
43357: PUSH
43358: EMPTY
43359: LIST
43360: LIST
43361: PUSH
43362: LD_INT 0
43364: PUSH
43365: LD_INT 2
43367: NEG
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PUSH
43373: LD_INT 1
43375: PUSH
43376: LD_INT 1
43378: NEG
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: LD_INT 2
43386: PUSH
43387: LD_INT 0
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: PUSH
43394: LD_INT 2
43396: PUSH
43397: LD_INT 1
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: PUSH
43404: LD_INT 2
43406: PUSH
43407: LD_INT 2
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: PUSH
43414: LD_INT 1
43416: PUSH
43417: LD_INT 2
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: PUSH
43424: LD_INT 0
43426: PUSH
43427: LD_INT 2
43429: PUSH
43430: EMPTY
43431: LIST
43432: LIST
43433: PUSH
43434: LD_INT 1
43436: NEG
43437: PUSH
43438: LD_INT 1
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: PUSH
43445: LD_INT 2
43447: NEG
43448: PUSH
43449: LD_INT 0
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: LD_INT 2
43458: NEG
43459: PUSH
43460: LD_INT 1
43462: NEG
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: LD_INT 2
43470: NEG
43471: PUSH
43472: LD_INT 2
43474: NEG
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PUSH
43480: LD_INT 3
43482: PUSH
43483: LD_INT 1
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: PUSH
43490: LD_INT 3
43492: PUSH
43493: LD_INT 2
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: PUSH
43500: LD_INT 2
43502: PUSH
43503: LD_INT 3
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: PUSH
43510: LD_INT 1
43512: PUSH
43513: LD_INT 3
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: LIST
43524: LIST
43525: LIST
43526: LIST
43527: LIST
43528: LIST
43529: LIST
43530: LIST
43531: LIST
43532: LIST
43533: LIST
43534: LIST
43535: LIST
43536: LIST
43537: LIST
43538: LIST
43539: LIST
43540: LIST
43541: LIST
43542: LIST
43543: LIST
43544: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43545: LD_ADDR_VAR 0 26
43549: PUSH
43550: LD_INT 0
43552: PUSH
43553: LD_INT 0
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: LD_INT 0
43562: PUSH
43563: LD_INT 1
43565: NEG
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: PUSH
43571: LD_INT 1
43573: PUSH
43574: LD_INT 0
43576: PUSH
43577: EMPTY
43578: LIST
43579: LIST
43580: PUSH
43581: LD_INT 1
43583: PUSH
43584: LD_INT 1
43586: PUSH
43587: EMPTY
43588: LIST
43589: LIST
43590: PUSH
43591: LD_INT 0
43593: PUSH
43594: LD_INT 1
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: PUSH
43601: LD_INT 1
43603: NEG
43604: PUSH
43605: LD_INT 0
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: PUSH
43612: LD_INT 1
43614: NEG
43615: PUSH
43616: LD_INT 1
43618: NEG
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: PUSH
43624: LD_INT 1
43626: NEG
43627: PUSH
43628: LD_INT 2
43630: NEG
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: PUSH
43636: LD_INT 0
43638: PUSH
43639: LD_INT 2
43641: NEG
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 1
43649: PUSH
43650: LD_INT 1
43652: NEG
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: PUSH
43658: LD_INT 2
43660: PUSH
43661: LD_INT 0
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: PUSH
43668: LD_INT 2
43670: PUSH
43671: LD_INT 1
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: PUSH
43678: LD_INT 2
43680: PUSH
43681: LD_INT 2
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: PUSH
43688: LD_INT 1
43690: PUSH
43691: LD_INT 2
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: PUSH
43698: LD_INT 0
43700: PUSH
43701: LD_INT 2
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: PUSH
43708: LD_INT 1
43710: NEG
43711: PUSH
43712: LD_INT 1
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: PUSH
43719: LD_INT 2
43721: NEG
43722: PUSH
43723: LD_INT 0
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 2
43732: NEG
43733: PUSH
43734: LD_INT 1
43736: NEG
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: PUSH
43742: LD_INT 2
43744: NEG
43745: PUSH
43746: LD_INT 2
43748: NEG
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: PUSH
43754: LD_INT 2
43756: PUSH
43757: LD_INT 3
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: PUSH
43764: LD_INT 1
43766: PUSH
43767: LD_INT 3
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 1
43776: NEG
43777: PUSH
43778: LD_INT 2
43780: PUSH
43781: EMPTY
43782: LIST
43783: LIST
43784: PUSH
43785: LD_INT 2
43787: NEG
43788: PUSH
43789: LD_INT 1
43791: PUSH
43792: EMPTY
43793: LIST
43794: LIST
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: LIST
43800: LIST
43801: LIST
43802: LIST
43803: LIST
43804: LIST
43805: LIST
43806: LIST
43807: LIST
43808: LIST
43809: LIST
43810: LIST
43811: LIST
43812: LIST
43813: LIST
43814: LIST
43815: LIST
43816: LIST
43817: LIST
43818: LIST
43819: LIST
43820: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43821: LD_ADDR_VAR 0 27
43825: PUSH
43826: LD_INT 0
43828: PUSH
43829: LD_INT 0
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: PUSH
43836: LD_INT 0
43838: PUSH
43839: LD_INT 1
43841: NEG
43842: PUSH
43843: EMPTY
43844: LIST
43845: LIST
43846: PUSH
43847: LD_INT 1
43849: PUSH
43850: LD_INT 0
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: PUSH
43857: LD_INT 1
43859: PUSH
43860: LD_INT 1
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: PUSH
43867: LD_INT 0
43869: PUSH
43870: LD_INT 1
43872: PUSH
43873: EMPTY
43874: LIST
43875: LIST
43876: PUSH
43877: LD_INT 1
43879: NEG
43880: PUSH
43881: LD_INT 0
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: PUSH
43888: LD_INT 1
43890: NEG
43891: PUSH
43892: LD_INT 1
43894: NEG
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: PUSH
43900: LD_INT 1
43902: NEG
43903: PUSH
43904: LD_INT 2
43906: NEG
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: PUSH
43912: LD_INT 0
43914: PUSH
43915: LD_INT 2
43917: NEG
43918: PUSH
43919: EMPTY
43920: LIST
43921: LIST
43922: PUSH
43923: LD_INT 1
43925: PUSH
43926: LD_INT 1
43928: NEG
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 2
43936: PUSH
43937: LD_INT 0
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: LD_INT 2
43946: PUSH
43947: LD_INT 1
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PUSH
43954: LD_INT 2
43956: PUSH
43957: LD_INT 2
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: LD_INT 1
43966: PUSH
43967: LD_INT 2
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: PUSH
43974: LD_INT 0
43976: PUSH
43977: LD_INT 2
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: PUSH
43984: LD_INT 1
43986: NEG
43987: PUSH
43988: LD_INT 1
43990: PUSH
43991: EMPTY
43992: LIST
43993: LIST
43994: PUSH
43995: LD_INT 2
43997: NEG
43998: PUSH
43999: LD_INT 0
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: PUSH
44006: LD_INT 2
44008: NEG
44009: PUSH
44010: LD_INT 1
44012: NEG
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: LD_INT 2
44020: NEG
44021: PUSH
44022: LD_INT 2
44024: NEG
44025: PUSH
44026: EMPTY
44027: LIST
44028: LIST
44029: PUSH
44030: LD_INT 1
44032: NEG
44033: PUSH
44034: LD_INT 2
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 2
44043: NEG
44044: PUSH
44045: LD_INT 1
44047: PUSH
44048: EMPTY
44049: LIST
44050: LIST
44051: PUSH
44052: LD_INT 3
44054: NEG
44055: PUSH
44056: LD_INT 1
44058: NEG
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: PUSH
44064: LD_INT 3
44066: NEG
44067: PUSH
44068: LD_INT 2
44070: NEG
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: LIST
44080: LIST
44081: LIST
44082: LIST
44083: LIST
44084: LIST
44085: LIST
44086: LIST
44087: LIST
44088: LIST
44089: LIST
44090: LIST
44091: LIST
44092: LIST
44093: LIST
44094: LIST
44095: LIST
44096: LIST
44097: LIST
44098: LIST
44099: LIST
44100: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
44101: LD_ADDR_VAR 0 28
44105: PUSH
44106: LD_INT 0
44108: PUSH
44109: LD_INT 0
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: PUSH
44116: LD_INT 0
44118: PUSH
44119: LD_INT 1
44121: NEG
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 1
44129: PUSH
44130: LD_INT 0
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: PUSH
44137: LD_INT 1
44139: PUSH
44140: LD_INT 1
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: PUSH
44147: LD_INT 0
44149: PUSH
44150: LD_INT 1
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: PUSH
44157: LD_INT 1
44159: NEG
44160: PUSH
44161: LD_INT 0
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 1
44170: NEG
44171: PUSH
44172: LD_INT 1
44174: NEG
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 1
44182: NEG
44183: PUSH
44184: LD_INT 2
44186: NEG
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 0
44194: PUSH
44195: LD_INT 2
44197: NEG
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: PUSH
44203: LD_INT 1
44205: PUSH
44206: LD_INT 1
44208: NEG
44209: PUSH
44210: EMPTY
44211: LIST
44212: LIST
44213: PUSH
44214: LD_INT 2
44216: PUSH
44217: LD_INT 0
44219: PUSH
44220: EMPTY
44221: LIST
44222: LIST
44223: PUSH
44224: LD_INT 2
44226: PUSH
44227: LD_INT 1
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: LD_INT 2
44236: PUSH
44237: LD_INT 2
44239: PUSH
44240: EMPTY
44241: LIST
44242: LIST
44243: PUSH
44244: LD_INT 1
44246: PUSH
44247: LD_INT 2
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: PUSH
44254: LD_INT 0
44256: PUSH
44257: LD_INT 2
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: PUSH
44264: LD_INT 1
44266: NEG
44267: PUSH
44268: LD_INT 1
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: LD_INT 2
44277: NEG
44278: PUSH
44279: LD_INT 0
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: LD_INT 2
44288: NEG
44289: PUSH
44290: LD_INT 1
44292: NEG
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: PUSH
44298: LD_INT 2
44300: NEG
44301: PUSH
44302: LD_INT 2
44304: NEG
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: LD_INT 2
44312: NEG
44313: PUSH
44314: LD_INT 3
44316: NEG
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: PUSH
44322: LD_INT 1
44324: NEG
44325: PUSH
44326: LD_INT 3
44328: NEG
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: PUSH
44334: LD_INT 3
44336: NEG
44337: PUSH
44338: LD_INT 1
44340: NEG
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 3
44348: NEG
44349: PUSH
44350: LD_INT 2
44352: NEG
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: LIST
44362: LIST
44363: LIST
44364: LIST
44365: LIST
44366: LIST
44367: LIST
44368: LIST
44369: LIST
44370: LIST
44371: LIST
44372: LIST
44373: LIST
44374: LIST
44375: LIST
44376: LIST
44377: LIST
44378: LIST
44379: LIST
44380: LIST
44381: LIST
44382: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44383: LD_ADDR_VAR 0 29
44387: PUSH
44388: LD_INT 0
44390: PUSH
44391: LD_INT 0
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: PUSH
44398: LD_INT 0
44400: PUSH
44401: LD_INT 1
44403: NEG
44404: PUSH
44405: EMPTY
44406: LIST
44407: LIST
44408: PUSH
44409: LD_INT 1
44411: PUSH
44412: LD_INT 0
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: PUSH
44419: LD_INT 1
44421: PUSH
44422: LD_INT 1
44424: PUSH
44425: EMPTY
44426: LIST
44427: LIST
44428: PUSH
44429: LD_INT 0
44431: PUSH
44432: LD_INT 1
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: PUSH
44439: LD_INT 1
44441: NEG
44442: PUSH
44443: LD_INT 0
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 1
44452: NEG
44453: PUSH
44454: LD_INT 1
44456: NEG
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 1
44464: NEG
44465: PUSH
44466: LD_INT 2
44468: NEG
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: LD_INT 0
44476: PUSH
44477: LD_INT 2
44479: NEG
44480: PUSH
44481: EMPTY
44482: LIST
44483: LIST
44484: PUSH
44485: LD_INT 1
44487: PUSH
44488: LD_INT 1
44490: NEG
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: LD_INT 2
44498: PUSH
44499: LD_INT 0
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PUSH
44506: LD_INT 2
44508: PUSH
44509: LD_INT 1
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 1
44518: PUSH
44519: LD_INT 2
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 0
44528: PUSH
44529: LD_INT 2
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: PUSH
44536: LD_INT 1
44538: NEG
44539: PUSH
44540: LD_INT 1
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: PUSH
44547: LD_INT 2
44549: NEG
44550: PUSH
44551: LD_INT 1
44553: NEG
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PUSH
44559: LD_INT 2
44561: NEG
44562: PUSH
44563: LD_INT 2
44565: NEG
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 2
44573: NEG
44574: PUSH
44575: LD_INT 3
44577: NEG
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 2
44585: PUSH
44586: LD_INT 1
44588: NEG
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PUSH
44594: LD_INT 3
44596: PUSH
44597: LD_INT 1
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: LD_INT 1
44606: PUSH
44607: LD_INT 3
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: PUSH
44614: LD_INT 1
44616: NEG
44617: PUSH
44618: LD_INT 2
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: PUSH
44625: LD_INT 3
44627: NEG
44628: PUSH
44629: LD_INT 2
44631: NEG
44632: PUSH
44633: EMPTY
44634: LIST
44635: LIST
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: LIST
44645: LIST
44646: LIST
44647: LIST
44648: LIST
44649: LIST
44650: LIST
44651: LIST
44652: LIST
44653: LIST
44654: LIST
44655: LIST
44656: LIST
44657: LIST
44658: LIST
44659: LIST
44660: LIST
44661: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44662: LD_ADDR_VAR 0 30
44666: PUSH
44667: LD_INT 0
44669: PUSH
44670: LD_INT 0
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PUSH
44677: LD_INT 0
44679: PUSH
44680: LD_INT 1
44682: NEG
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: PUSH
44688: LD_INT 1
44690: PUSH
44691: LD_INT 0
44693: PUSH
44694: EMPTY
44695: LIST
44696: LIST
44697: PUSH
44698: LD_INT 1
44700: PUSH
44701: LD_INT 1
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: LD_INT 0
44710: PUSH
44711: LD_INT 1
44713: PUSH
44714: EMPTY
44715: LIST
44716: LIST
44717: PUSH
44718: LD_INT 1
44720: NEG
44721: PUSH
44722: LD_INT 0
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 1
44731: NEG
44732: PUSH
44733: LD_INT 1
44735: NEG
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 1
44743: NEG
44744: PUSH
44745: LD_INT 2
44747: NEG
44748: PUSH
44749: EMPTY
44750: LIST
44751: LIST
44752: PUSH
44753: LD_INT 0
44755: PUSH
44756: LD_INT 2
44758: NEG
44759: PUSH
44760: EMPTY
44761: LIST
44762: LIST
44763: PUSH
44764: LD_INT 1
44766: PUSH
44767: LD_INT 1
44769: NEG
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: LD_INT 2
44777: PUSH
44778: LD_INT 0
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 2
44787: PUSH
44788: LD_INT 1
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: PUSH
44795: LD_INT 2
44797: PUSH
44798: LD_INT 2
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: PUSH
44805: LD_INT 1
44807: PUSH
44808: LD_INT 2
44810: PUSH
44811: EMPTY
44812: LIST
44813: LIST
44814: PUSH
44815: LD_INT 1
44817: NEG
44818: PUSH
44819: LD_INT 1
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 2
44828: NEG
44829: PUSH
44830: LD_INT 0
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: PUSH
44837: LD_INT 2
44839: NEG
44840: PUSH
44841: LD_INT 1
44843: NEG
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 1
44851: NEG
44852: PUSH
44853: LD_INT 3
44855: NEG
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: PUSH
44861: LD_INT 1
44863: PUSH
44864: LD_INT 2
44866: NEG
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 3
44874: PUSH
44875: LD_INT 2
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: PUSH
44882: LD_INT 2
44884: PUSH
44885: LD_INT 3
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: LD_INT 2
44894: NEG
44895: PUSH
44896: LD_INT 1
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 3
44905: NEG
44906: PUSH
44907: LD_INT 1
44909: NEG
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: LIST
44924: LIST
44925: LIST
44926: LIST
44927: LIST
44928: LIST
44929: LIST
44930: LIST
44931: LIST
44932: LIST
44933: LIST
44934: LIST
44935: LIST
44936: LIST
44937: LIST
44938: LIST
44939: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
44940: LD_ADDR_VAR 0 31
44944: PUSH
44945: LD_INT 0
44947: PUSH
44948: LD_INT 0
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: LD_INT 0
44957: PUSH
44958: LD_INT 1
44960: NEG
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: LD_INT 1
44968: PUSH
44969: LD_INT 0
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 1
44978: PUSH
44979: LD_INT 1
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 0
44988: PUSH
44989: LD_INT 1
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: PUSH
44996: LD_INT 1
44998: NEG
44999: PUSH
45000: LD_INT 0
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: LD_INT 1
45009: NEG
45010: PUSH
45011: LD_INT 1
45013: NEG
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 1
45021: NEG
45022: PUSH
45023: LD_INT 2
45025: NEG
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 1
45033: PUSH
45034: LD_INT 1
45036: NEG
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: LD_INT 2
45044: PUSH
45045: LD_INT 0
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 2
45054: PUSH
45055: LD_INT 1
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: PUSH
45062: LD_INT 2
45064: PUSH
45065: LD_INT 2
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: LD_INT 1
45074: PUSH
45075: LD_INT 2
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 0
45084: PUSH
45085: LD_INT 2
45087: PUSH
45088: EMPTY
45089: LIST
45090: LIST
45091: PUSH
45092: LD_INT 1
45094: NEG
45095: PUSH
45096: LD_INT 1
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 2
45105: NEG
45106: PUSH
45107: LD_INT 1
45109: NEG
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: LD_INT 2
45117: NEG
45118: PUSH
45119: LD_INT 2
45121: NEG
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 2
45129: NEG
45130: PUSH
45131: LD_INT 3
45133: NEG
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PUSH
45139: LD_INT 2
45141: PUSH
45142: LD_INT 1
45144: NEG
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: PUSH
45150: LD_INT 3
45152: PUSH
45153: LD_INT 1
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: LD_INT 1
45162: PUSH
45163: LD_INT 3
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 1
45172: NEG
45173: PUSH
45174: LD_INT 2
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 3
45183: NEG
45184: PUSH
45185: LD_INT 2
45187: NEG
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: LIST
45207: LIST
45208: LIST
45209: LIST
45210: LIST
45211: LIST
45212: LIST
45213: LIST
45214: LIST
45215: LIST
45216: LIST
45217: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45218: LD_ADDR_VAR 0 32
45222: PUSH
45223: LD_INT 0
45225: PUSH
45226: LD_INT 0
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 0
45235: PUSH
45236: LD_INT 1
45238: NEG
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: PUSH
45244: LD_INT 1
45246: PUSH
45247: LD_INT 0
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PUSH
45254: LD_INT 1
45256: PUSH
45257: LD_INT 1
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: PUSH
45264: LD_INT 0
45266: PUSH
45267: LD_INT 1
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: PUSH
45274: LD_INT 1
45276: NEG
45277: PUSH
45278: LD_INT 0
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: PUSH
45285: LD_INT 1
45287: NEG
45288: PUSH
45289: LD_INT 1
45291: NEG
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 1
45299: NEG
45300: PUSH
45301: LD_INT 2
45303: NEG
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 0
45311: PUSH
45312: LD_INT 2
45314: NEG
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 1
45322: PUSH
45323: LD_INT 1
45325: NEG
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: LD_INT 2
45333: PUSH
45334: LD_INT 1
45336: PUSH
45337: EMPTY
45338: LIST
45339: LIST
45340: PUSH
45341: LD_INT 2
45343: PUSH
45344: LD_INT 2
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: LD_INT 1
45353: PUSH
45354: LD_INT 2
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 0
45363: PUSH
45364: LD_INT 2
45366: PUSH
45367: EMPTY
45368: LIST
45369: LIST
45370: PUSH
45371: LD_INT 1
45373: NEG
45374: PUSH
45375: LD_INT 1
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: LD_INT 2
45384: NEG
45385: PUSH
45386: LD_INT 0
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: PUSH
45393: LD_INT 2
45395: NEG
45396: PUSH
45397: LD_INT 1
45399: NEG
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: PUSH
45405: LD_INT 1
45407: NEG
45408: PUSH
45409: LD_INT 3
45411: NEG
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: LD_INT 1
45419: PUSH
45420: LD_INT 2
45422: NEG
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: LD_INT 3
45430: PUSH
45431: LD_INT 2
45433: PUSH
45434: EMPTY
45435: LIST
45436: LIST
45437: PUSH
45438: LD_INT 2
45440: PUSH
45441: LD_INT 3
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: PUSH
45448: LD_INT 2
45450: NEG
45451: PUSH
45452: LD_INT 1
45454: PUSH
45455: EMPTY
45456: LIST
45457: LIST
45458: PUSH
45459: LD_INT 3
45461: NEG
45462: PUSH
45463: LD_INT 1
45465: NEG
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: LIST
45475: LIST
45476: LIST
45477: LIST
45478: LIST
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45496: LD_ADDR_VAR 0 33
45500: PUSH
45501: LD_INT 0
45503: PUSH
45504: LD_INT 0
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 0
45513: PUSH
45514: LD_INT 1
45516: NEG
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 1
45524: PUSH
45525: LD_INT 0
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 1
45534: PUSH
45535: LD_INT 1
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 0
45544: PUSH
45545: LD_INT 1
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: LD_INT 1
45554: NEG
45555: PUSH
45556: LD_INT 0
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 1
45565: NEG
45566: PUSH
45567: LD_INT 1
45569: NEG
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: LD_INT 1
45577: NEG
45578: PUSH
45579: LD_INT 2
45581: NEG
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: PUSH
45587: LD_INT 1
45589: PUSH
45590: LD_INT 1
45592: NEG
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PUSH
45598: LD_INT 2
45600: PUSH
45601: LD_INT 0
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: LD_INT 2
45610: PUSH
45611: LD_INT 1
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: LD_INT 1
45620: PUSH
45621: LD_INT 2
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: LD_INT 0
45630: PUSH
45631: LD_INT 2
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: LD_INT 1
45640: NEG
45641: PUSH
45642: LD_INT 1
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: PUSH
45649: LD_INT 2
45651: NEG
45652: PUSH
45653: LD_INT 0
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: LD_INT 2
45662: NEG
45663: PUSH
45664: LD_INT 1
45666: NEG
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 2
45674: NEG
45675: PUSH
45676: LD_INT 2
45678: NEG
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 2
45686: NEG
45687: PUSH
45688: LD_INT 3
45690: NEG
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 2
45698: PUSH
45699: LD_INT 1
45701: NEG
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 3
45709: PUSH
45710: LD_INT 1
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: LD_INT 1
45719: PUSH
45720: LD_INT 3
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 1
45729: NEG
45730: PUSH
45731: LD_INT 2
45733: PUSH
45734: EMPTY
45735: LIST
45736: LIST
45737: PUSH
45738: LD_INT 3
45740: NEG
45741: PUSH
45742: LD_INT 2
45744: NEG
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: LIST
45758: LIST
45759: LIST
45760: LIST
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: LIST
45773: LIST
45774: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
45775: LD_ADDR_VAR 0 34
45779: PUSH
45780: LD_INT 0
45782: PUSH
45783: LD_INT 0
45785: PUSH
45786: EMPTY
45787: LIST
45788: LIST
45789: PUSH
45790: LD_INT 0
45792: PUSH
45793: LD_INT 1
45795: NEG
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: PUSH
45801: LD_INT 1
45803: PUSH
45804: LD_INT 0
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 1
45813: PUSH
45814: LD_INT 1
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 0
45823: PUSH
45824: LD_INT 1
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: LD_INT 1
45833: NEG
45834: PUSH
45835: LD_INT 0
45837: PUSH
45838: EMPTY
45839: LIST
45840: LIST
45841: PUSH
45842: LD_INT 1
45844: NEG
45845: PUSH
45846: LD_INT 1
45848: NEG
45849: PUSH
45850: EMPTY
45851: LIST
45852: LIST
45853: PUSH
45854: LD_INT 1
45856: NEG
45857: PUSH
45858: LD_INT 2
45860: NEG
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 0
45868: PUSH
45869: LD_INT 2
45871: NEG
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: PUSH
45877: LD_INT 1
45879: PUSH
45880: LD_INT 1
45882: NEG
45883: PUSH
45884: EMPTY
45885: LIST
45886: LIST
45887: PUSH
45888: LD_INT 2
45890: PUSH
45891: LD_INT 1
45893: PUSH
45894: EMPTY
45895: LIST
45896: LIST
45897: PUSH
45898: LD_INT 2
45900: PUSH
45901: LD_INT 2
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: PUSH
45908: LD_INT 1
45910: PUSH
45911: LD_INT 2
45913: PUSH
45914: EMPTY
45915: LIST
45916: LIST
45917: PUSH
45918: LD_INT 1
45920: NEG
45921: PUSH
45922: LD_INT 1
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: PUSH
45929: LD_INT 2
45931: NEG
45932: PUSH
45933: LD_INT 0
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 2
45942: NEG
45943: PUSH
45944: LD_INT 1
45946: NEG
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: LD_INT 2
45954: NEG
45955: PUSH
45956: LD_INT 2
45958: NEG
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: LD_INT 1
45966: NEG
45967: PUSH
45968: LD_INT 3
45970: NEG
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: LD_INT 1
45978: PUSH
45979: LD_INT 2
45981: NEG
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 3
45989: PUSH
45990: LD_INT 2
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: LD_INT 2
45999: PUSH
46000: LD_INT 3
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 2
46009: NEG
46010: PUSH
46011: LD_INT 1
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 3
46020: NEG
46021: PUSH
46022: LD_INT 1
46024: NEG
46025: PUSH
46026: EMPTY
46027: LIST
46028: LIST
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: LIST
46034: LIST
46035: LIST
46036: LIST
46037: LIST
46038: LIST
46039: LIST
46040: LIST
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: LIST
46052: LIST
46053: LIST
46054: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46055: LD_ADDR_VAR 0 35
46059: PUSH
46060: LD_INT 0
46062: PUSH
46063: LD_INT 0
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: LD_INT 0
46072: PUSH
46073: LD_INT 1
46075: NEG
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: PUSH
46081: LD_INT 1
46083: PUSH
46084: LD_INT 0
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: PUSH
46091: LD_INT 1
46093: PUSH
46094: LD_INT 1
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 0
46103: PUSH
46104: LD_INT 1
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 1
46113: NEG
46114: PUSH
46115: LD_INT 0
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: LD_INT 1
46124: NEG
46125: PUSH
46126: LD_INT 1
46128: NEG
46129: PUSH
46130: EMPTY
46131: LIST
46132: LIST
46133: PUSH
46134: LD_INT 2
46136: PUSH
46137: LD_INT 1
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: PUSH
46144: LD_INT 2
46146: NEG
46147: PUSH
46148: LD_INT 1
46150: NEG
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: LIST
46160: LIST
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46167: LD_ADDR_VAR 0 36
46171: PUSH
46172: LD_INT 0
46174: PUSH
46175: LD_INT 0
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 0
46184: PUSH
46185: LD_INT 1
46187: NEG
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 1
46195: PUSH
46196: LD_INT 0
46198: PUSH
46199: EMPTY
46200: LIST
46201: LIST
46202: PUSH
46203: LD_INT 1
46205: PUSH
46206: LD_INT 1
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 0
46215: PUSH
46216: LD_INT 1
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: PUSH
46223: LD_INT 1
46225: NEG
46226: PUSH
46227: LD_INT 0
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: PUSH
46234: LD_INT 1
46236: NEG
46237: PUSH
46238: LD_INT 1
46240: NEG
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 1
46248: NEG
46249: PUSH
46250: LD_INT 2
46252: NEG
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: LD_INT 1
46260: PUSH
46261: LD_INT 2
46263: PUSH
46264: EMPTY
46265: LIST
46266: LIST
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: LIST
46272: LIST
46273: LIST
46274: LIST
46275: LIST
46276: LIST
46277: LIST
46278: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46279: LD_ADDR_VAR 0 37
46283: PUSH
46284: LD_INT 0
46286: PUSH
46287: LD_INT 0
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 0
46296: PUSH
46297: LD_INT 1
46299: NEG
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: PUSH
46305: LD_INT 1
46307: PUSH
46308: LD_INT 0
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PUSH
46315: LD_INT 1
46317: PUSH
46318: LD_INT 1
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: PUSH
46325: LD_INT 0
46327: PUSH
46328: LD_INT 1
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 1
46337: NEG
46338: PUSH
46339: LD_INT 0
46341: PUSH
46342: EMPTY
46343: LIST
46344: LIST
46345: PUSH
46346: LD_INT 1
46348: NEG
46349: PUSH
46350: LD_INT 1
46352: NEG
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 1
46360: PUSH
46361: LD_INT 1
46363: NEG
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 1
46371: NEG
46372: PUSH
46373: LD_INT 1
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: EMPTY
46381: LIST
46382: LIST
46383: LIST
46384: LIST
46385: LIST
46386: LIST
46387: LIST
46388: LIST
46389: LIST
46390: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
46391: LD_ADDR_VAR 0 38
46395: PUSH
46396: LD_INT 0
46398: PUSH
46399: LD_INT 0
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 0
46408: PUSH
46409: LD_INT 1
46411: NEG
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: PUSH
46417: LD_INT 1
46419: PUSH
46420: LD_INT 0
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: LD_INT 1
46429: PUSH
46430: LD_INT 1
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 0
46439: PUSH
46440: LD_INT 1
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 1
46449: NEG
46450: PUSH
46451: LD_INT 0
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 1
46460: NEG
46461: PUSH
46462: LD_INT 1
46464: NEG
46465: PUSH
46466: EMPTY
46467: LIST
46468: LIST
46469: PUSH
46470: LD_INT 2
46472: PUSH
46473: LD_INT 1
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 2
46482: NEG
46483: PUSH
46484: LD_INT 1
46486: NEG
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: EMPTY
46493: LIST
46494: LIST
46495: LIST
46496: LIST
46497: LIST
46498: LIST
46499: LIST
46500: LIST
46501: LIST
46502: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
46503: LD_ADDR_VAR 0 39
46507: PUSH
46508: LD_INT 0
46510: PUSH
46511: LD_INT 0
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: PUSH
46518: LD_INT 0
46520: PUSH
46521: LD_INT 1
46523: NEG
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: PUSH
46529: LD_INT 1
46531: PUSH
46532: LD_INT 0
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: PUSH
46539: LD_INT 1
46541: PUSH
46542: LD_INT 1
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: PUSH
46549: LD_INT 0
46551: PUSH
46552: LD_INT 1
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: PUSH
46559: LD_INT 1
46561: NEG
46562: PUSH
46563: LD_INT 0
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 1
46572: NEG
46573: PUSH
46574: LD_INT 1
46576: NEG
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 1
46584: NEG
46585: PUSH
46586: LD_INT 2
46588: NEG
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 1
46596: PUSH
46597: LD_INT 2
46599: PUSH
46600: EMPTY
46601: LIST
46602: LIST
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: LIST
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
46615: LD_ADDR_VAR 0 40
46619: PUSH
46620: LD_INT 0
46622: PUSH
46623: LD_INT 0
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 0
46632: PUSH
46633: LD_INT 1
46635: NEG
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 1
46643: PUSH
46644: LD_INT 0
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 1
46653: PUSH
46654: LD_INT 1
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 0
46663: PUSH
46664: LD_INT 1
46666: PUSH
46667: EMPTY
46668: LIST
46669: LIST
46670: PUSH
46671: LD_INT 1
46673: NEG
46674: PUSH
46675: LD_INT 0
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 1
46684: NEG
46685: PUSH
46686: LD_INT 1
46688: NEG
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: LD_INT 1
46696: PUSH
46697: LD_INT 1
46699: NEG
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 1
46707: NEG
46708: PUSH
46709: LD_INT 1
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: LIST
46720: LIST
46721: LIST
46722: LIST
46723: LIST
46724: LIST
46725: LIST
46726: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46727: LD_ADDR_VAR 0 41
46731: PUSH
46732: LD_INT 0
46734: PUSH
46735: LD_INT 0
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 0
46744: PUSH
46745: LD_INT 1
46747: NEG
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PUSH
46753: LD_INT 1
46755: PUSH
46756: LD_INT 0
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 1
46765: PUSH
46766: LD_INT 1
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 0
46775: PUSH
46776: LD_INT 1
46778: PUSH
46779: EMPTY
46780: LIST
46781: LIST
46782: PUSH
46783: LD_INT 1
46785: NEG
46786: PUSH
46787: LD_INT 0
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: LD_INT 1
46796: NEG
46797: PUSH
46798: LD_INT 1
46800: NEG
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PUSH
46806: LD_INT 1
46808: NEG
46809: PUSH
46810: LD_INT 2
46812: NEG
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: LD_INT 1
46820: PUSH
46821: LD_INT 1
46823: NEG
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: LD_INT 2
46831: PUSH
46832: LD_INT 0
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: PUSH
46839: LD_INT 2
46841: PUSH
46842: LD_INT 1
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 2
46851: PUSH
46852: LD_INT 2
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 1
46861: PUSH
46862: LD_INT 2
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 1
46871: NEG
46872: PUSH
46873: LD_INT 1
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: PUSH
46880: LD_INT 2
46882: NEG
46883: PUSH
46884: LD_INT 0
46886: PUSH
46887: EMPTY
46888: LIST
46889: LIST
46890: PUSH
46891: LD_INT 2
46893: NEG
46894: PUSH
46895: LD_INT 1
46897: NEG
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 2
46905: NEG
46906: PUSH
46907: LD_INT 2
46909: NEG
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: LD_INT 2
46917: NEG
46918: PUSH
46919: LD_INT 3
46921: NEG
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 2
46929: PUSH
46930: LD_INT 1
46932: NEG
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 3
46940: PUSH
46941: LD_INT 0
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: PUSH
46948: LD_INT 3
46950: PUSH
46951: LD_INT 1
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: PUSH
46958: LD_INT 3
46960: PUSH
46961: LD_INT 2
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: PUSH
46968: LD_INT 3
46970: PUSH
46971: LD_INT 3
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: PUSH
46978: LD_INT 2
46980: PUSH
46981: LD_INT 3
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 2
46990: NEG
46991: PUSH
46992: LD_INT 1
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 3
47001: NEG
47002: PUSH
47003: LD_INT 0
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 3
47012: NEG
47013: PUSH
47014: LD_INT 1
47016: NEG
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 3
47024: NEG
47025: PUSH
47026: LD_INT 2
47028: NEG
47029: PUSH
47030: EMPTY
47031: LIST
47032: LIST
47033: PUSH
47034: LD_INT 3
47036: NEG
47037: PUSH
47038: LD_INT 3
47040: NEG
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: LIST
47050: LIST
47051: LIST
47052: LIST
47053: LIST
47054: LIST
47055: LIST
47056: LIST
47057: LIST
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: LIST
47072: LIST
47073: LIST
47074: LIST
47075: LIST
47076: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47077: LD_ADDR_VAR 0 42
47081: PUSH
47082: LD_INT 0
47084: PUSH
47085: LD_INT 0
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 0
47094: PUSH
47095: LD_INT 1
47097: NEG
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 1
47105: PUSH
47106: LD_INT 0
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 1
47115: PUSH
47116: LD_INT 1
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: LD_INT 0
47125: PUSH
47126: LD_INT 1
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 1
47135: NEG
47136: PUSH
47137: LD_INT 0
47139: PUSH
47140: EMPTY
47141: LIST
47142: LIST
47143: PUSH
47144: LD_INT 1
47146: NEG
47147: PUSH
47148: LD_INT 1
47150: NEG
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 1
47158: NEG
47159: PUSH
47160: LD_INT 2
47162: NEG
47163: PUSH
47164: EMPTY
47165: LIST
47166: LIST
47167: PUSH
47168: LD_INT 0
47170: PUSH
47171: LD_INT 2
47173: NEG
47174: PUSH
47175: EMPTY
47176: LIST
47177: LIST
47178: PUSH
47179: LD_INT 1
47181: PUSH
47182: LD_INT 1
47184: NEG
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 2
47192: PUSH
47193: LD_INT 1
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 2
47202: PUSH
47203: LD_INT 2
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 1
47212: PUSH
47213: LD_INT 2
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 0
47222: PUSH
47223: LD_INT 2
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 1
47232: NEG
47233: PUSH
47234: LD_INT 1
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 2
47243: NEG
47244: PUSH
47245: LD_INT 1
47247: NEG
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 2
47255: NEG
47256: PUSH
47257: LD_INT 2
47259: NEG
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 2
47267: NEG
47268: PUSH
47269: LD_INT 3
47271: NEG
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 1
47279: NEG
47280: PUSH
47281: LD_INT 3
47283: NEG
47284: PUSH
47285: EMPTY
47286: LIST
47287: LIST
47288: PUSH
47289: LD_INT 0
47291: PUSH
47292: LD_INT 3
47294: NEG
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 1
47302: PUSH
47303: LD_INT 2
47305: NEG
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 3
47313: PUSH
47314: LD_INT 2
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: LD_INT 3
47323: PUSH
47324: LD_INT 3
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: LD_INT 2
47333: PUSH
47334: LD_INT 3
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: PUSH
47341: LD_INT 1
47343: PUSH
47344: LD_INT 3
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: LD_INT 0
47353: PUSH
47354: LD_INT 3
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 1
47363: NEG
47364: PUSH
47365: LD_INT 2
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: PUSH
47372: LD_INT 3
47374: NEG
47375: PUSH
47376: LD_INT 2
47378: NEG
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 3
47386: NEG
47387: PUSH
47388: LD_INT 3
47390: NEG
47391: PUSH
47392: EMPTY
47393: LIST
47394: LIST
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47427: LD_ADDR_VAR 0 43
47431: PUSH
47432: LD_INT 0
47434: PUSH
47435: LD_INT 0
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: LD_INT 0
47444: PUSH
47445: LD_INT 1
47447: NEG
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 1
47455: PUSH
47456: LD_INT 0
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 1
47465: PUSH
47466: LD_INT 1
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: LD_INT 0
47475: PUSH
47476: LD_INT 1
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: LD_INT 1
47485: NEG
47486: PUSH
47487: LD_INT 0
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: LD_INT 1
47496: NEG
47497: PUSH
47498: LD_INT 1
47500: NEG
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 1
47508: NEG
47509: PUSH
47510: LD_INT 2
47512: NEG
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 0
47520: PUSH
47521: LD_INT 2
47523: NEG
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 1
47531: PUSH
47532: LD_INT 1
47534: NEG
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 2
47542: PUSH
47543: LD_INT 0
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 2
47552: PUSH
47553: LD_INT 1
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 1
47562: PUSH
47563: LD_INT 2
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 0
47572: PUSH
47573: LD_INT 2
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 1
47582: NEG
47583: PUSH
47584: LD_INT 1
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 2
47593: NEG
47594: PUSH
47595: LD_INT 0
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 2
47604: NEG
47605: PUSH
47606: LD_INT 1
47608: NEG
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 1
47616: NEG
47617: PUSH
47618: LD_INT 3
47620: NEG
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 0
47628: PUSH
47629: LD_INT 3
47631: NEG
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: LD_INT 1
47639: PUSH
47640: LD_INT 2
47642: NEG
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 2
47650: PUSH
47651: LD_INT 1
47653: NEG
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 3
47661: PUSH
47662: LD_INT 0
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 3
47671: PUSH
47672: LD_INT 1
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 1
47681: PUSH
47682: LD_INT 3
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 0
47691: PUSH
47692: LD_INT 3
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 1
47701: NEG
47702: PUSH
47703: LD_INT 2
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 2
47712: NEG
47713: PUSH
47714: LD_INT 1
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: PUSH
47721: LD_INT 3
47723: NEG
47724: PUSH
47725: LD_INT 0
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 3
47734: NEG
47735: PUSH
47736: LD_INT 1
47738: NEG
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: LIST
47748: LIST
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47775: LD_ADDR_VAR 0 44
47779: PUSH
47780: LD_INT 0
47782: PUSH
47783: LD_INT 0
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 0
47792: PUSH
47793: LD_INT 1
47795: NEG
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 1
47803: PUSH
47804: LD_INT 0
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 1
47813: PUSH
47814: LD_INT 1
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: LD_INT 0
47823: PUSH
47824: LD_INT 1
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: LD_INT 1
47833: NEG
47834: PUSH
47835: LD_INT 0
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: PUSH
47842: LD_INT 1
47844: NEG
47845: PUSH
47846: LD_INT 1
47848: NEG
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: PUSH
47854: LD_INT 1
47856: NEG
47857: PUSH
47858: LD_INT 2
47860: NEG
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: PUSH
47866: LD_INT 1
47868: PUSH
47869: LD_INT 1
47871: NEG
47872: PUSH
47873: EMPTY
47874: LIST
47875: LIST
47876: PUSH
47877: LD_INT 2
47879: PUSH
47880: LD_INT 0
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: LD_INT 2
47889: PUSH
47890: LD_INT 1
47892: PUSH
47893: EMPTY
47894: LIST
47895: LIST
47896: PUSH
47897: LD_INT 2
47899: PUSH
47900: LD_INT 2
47902: PUSH
47903: EMPTY
47904: LIST
47905: LIST
47906: PUSH
47907: LD_INT 1
47909: PUSH
47910: LD_INT 2
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: PUSH
47917: LD_INT 1
47919: NEG
47920: PUSH
47921: LD_INT 1
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: LD_INT 2
47930: NEG
47931: PUSH
47932: LD_INT 0
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 2
47941: NEG
47942: PUSH
47943: LD_INT 1
47945: NEG
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 2
47953: NEG
47954: PUSH
47955: LD_INT 2
47957: NEG
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 2
47965: NEG
47966: PUSH
47967: LD_INT 3
47969: NEG
47970: PUSH
47971: EMPTY
47972: LIST
47973: LIST
47974: PUSH
47975: LD_INT 2
47977: PUSH
47978: LD_INT 1
47980: NEG
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: PUSH
47986: LD_INT 3
47988: PUSH
47989: LD_INT 0
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 3
47998: PUSH
47999: LD_INT 1
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 3
48008: PUSH
48009: LD_INT 2
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 3
48018: PUSH
48019: LD_INT 3
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 2
48028: PUSH
48029: LD_INT 3
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 2
48038: NEG
48039: PUSH
48040: LD_INT 1
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: PUSH
48047: LD_INT 3
48049: NEG
48050: PUSH
48051: LD_INT 0
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PUSH
48058: LD_INT 3
48060: NEG
48061: PUSH
48062: LD_INT 1
48064: NEG
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: LD_INT 3
48072: NEG
48073: PUSH
48074: LD_INT 2
48076: NEG
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 3
48084: NEG
48085: PUSH
48086: LD_INT 3
48088: NEG
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: LIST
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: LIST
48108: LIST
48109: LIST
48110: LIST
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: LIST
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48125: LD_ADDR_VAR 0 45
48129: PUSH
48130: LD_INT 0
48132: PUSH
48133: LD_INT 0
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 0
48142: PUSH
48143: LD_INT 1
48145: NEG
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 1
48153: PUSH
48154: LD_INT 0
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 1
48163: PUSH
48164: LD_INT 1
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 0
48173: PUSH
48174: LD_INT 1
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: PUSH
48181: LD_INT 1
48183: NEG
48184: PUSH
48185: LD_INT 0
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 1
48194: NEG
48195: PUSH
48196: LD_INT 1
48198: NEG
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 1
48206: NEG
48207: PUSH
48208: LD_INT 2
48210: NEG
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 0
48218: PUSH
48219: LD_INT 2
48221: NEG
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 1
48229: PUSH
48230: LD_INT 1
48232: NEG
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 2
48240: PUSH
48241: LD_INT 1
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 2
48250: PUSH
48251: LD_INT 2
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: PUSH
48258: LD_INT 1
48260: PUSH
48261: LD_INT 2
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 0
48270: PUSH
48271: LD_INT 2
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PUSH
48278: LD_INT 1
48280: NEG
48281: PUSH
48282: LD_INT 1
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: LD_INT 2
48291: NEG
48292: PUSH
48293: LD_INT 1
48295: NEG
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: LD_INT 2
48303: NEG
48304: PUSH
48305: LD_INT 2
48307: NEG
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 2
48315: NEG
48316: PUSH
48317: LD_INT 3
48319: NEG
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: PUSH
48325: LD_INT 1
48327: NEG
48328: PUSH
48329: LD_INT 3
48331: NEG
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 0
48339: PUSH
48340: LD_INT 3
48342: NEG
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 1
48350: PUSH
48351: LD_INT 2
48353: NEG
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 3
48361: PUSH
48362: LD_INT 2
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 3
48371: PUSH
48372: LD_INT 3
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 2
48381: PUSH
48382: LD_INT 3
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: LD_INT 1
48391: PUSH
48392: LD_INT 3
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 0
48401: PUSH
48402: LD_INT 3
48404: PUSH
48405: EMPTY
48406: LIST
48407: LIST
48408: PUSH
48409: LD_INT 1
48411: NEG
48412: PUSH
48413: LD_INT 2
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: LD_INT 3
48422: NEG
48423: PUSH
48424: LD_INT 2
48426: NEG
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: PUSH
48432: LD_INT 3
48434: NEG
48435: PUSH
48436: LD_INT 3
48438: NEG
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: EMPTY
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: LIST
48463: LIST
48464: LIST
48465: LIST
48466: LIST
48467: LIST
48468: LIST
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: LIST
48474: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48475: LD_ADDR_VAR 0 46
48479: PUSH
48480: LD_INT 0
48482: PUSH
48483: LD_INT 0
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: PUSH
48490: LD_INT 0
48492: PUSH
48493: LD_INT 1
48495: NEG
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: LD_INT 1
48503: PUSH
48504: LD_INT 0
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 1
48513: PUSH
48514: LD_INT 1
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: LD_INT 0
48523: PUSH
48524: LD_INT 1
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 1
48533: NEG
48534: PUSH
48535: LD_INT 0
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 1
48544: NEG
48545: PUSH
48546: LD_INT 1
48548: NEG
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 1
48556: NEG
48557: PUSH
48558: LD_INT 2
48560: NEG
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: PUSH
48566: LD_INT 0
48568: PUSH
48569: LD_INT 2
48571: NEG
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: PUSH
48577: LD_INT 1
48579: PUSH
48580: LD_INT 1
48582: NEG
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 2
48590: PUSH
48591: LD_INT 0
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 2
48600: PUSH
48601: LD_INT 1
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: LD_INT 1
48610: PUSH
48611: LD_INT 2
48613: PUSH
48614: EMPTY
48615: LIST
48616: LIST
48617: PUSH
48618: LD_INT 0
48620: PUSH
48621: LD_INT 2
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 1
48630: NEG
48631: PUSH
48632: LD_INT 1
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: LD_INT 2
48641: NEG
48642: PUSH
48643: LD_INT 0
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 2
48652: NEG
48653: PUSH
48654: LD_INT 1
48656: NEG
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 1
48664: NEG
48665: PUSH
48666: LD_INT 3
48668: NEG
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: LD_INT 0
48676: PUSH
48677: LD_INT 3
48679: NEG
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 1
48687: PUSH
48688: LD_INT 2
48690: NEG
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 2
48698: PUSH
48699: LD_INT 1
48701: NEG
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 3
48709: PUSH
48710: LD_INT 0
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 3
48719: PUSH
48720: LD_INT 1
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 1
48729: PUSH
48730: LD_INT 3
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 0
48739: PUSH
48740: LD_INT 3
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 1
48749: NEG
48750: PUSH
48751: LD_INT 2
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 2
48760: NEG
48761: PUSH
48762: LD_INT 1
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 3
48771: NEG
48772: PUSH
48773: LD_INT 0
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 3
48782: NEG
48783: PUSH
48784: LD_INT 1
48786: NEG
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: EMPTY
48793: LIST
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: LIST
48820: LIST
48821: LIST
48822: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48823: LD_ADDR_VAR 0 47
48827: PUSH
48828: LD_INT 0
48830: PUSH
48831: LD_INT 0
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PUSH
48838: LD_INT 0
48840: PUSH
48841: LD_INT 1
48843: NEG
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 1
48851: PUSH
48852: LD_INT 0
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: LD_INT 1
48861: PUSH
48862: LD_INT 1
48864: PUSH
48865: EMPTY
48866: LIST
48867: LIST
48868: PUSH
48869: LD_INT 0
48871: PUSH
48872: LD_INT 1
48874: PUSH
48875: EMPTY
48876: LIST
48877: LIST
48878: PUSH
48879: LD_INT 1
48881: NEG
48882: PUSH
48883: LD_INT 0
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 1
48892: NEG
48893: PUSH
48894: LD_INT 1
48896: NEG
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: LD_INT 1
48904: NEG
48905: PUSH
48906: LD_INT 2
48908: NEG
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 0
48916: PUSH
48917: LD_INT 2
48919: NEG
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: LD_INT 1
48927: PUSH
48928: LD_INT 1
48930: NEG
48931: PUSH
48932: EMPTY
48933: LIST
48934: LIST
48935: PUSH
48936: LD_INT 2
48938: NEG
48939: PUSH
48940: LD_INT 1
48942: NEG
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 2
48950: NEG
48951: PUSH
48952: LD_INT 2
48954: NEG
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: LIST
48964: LIST
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48974: LD_ADDR_VAR 0 48
48978: PUSH
48979: LD_INT 0
48981: PUSH
48982: LD_INT 0
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 0
48991: PUSH
48992: LD_INT 1
48994: NEG
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 1
49002: PUSH
49003: LD_INT 0
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 1
49012: PUSH
49013: LD_INT 1
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: LD_INT 0
49022: PUSH
49023: LD_INT 1
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: LD_INT 1
49032: NEG
49033: PUSH
49034: LD_INT 0
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: PUSH
49041: LD_INT 1
49043: NEG
49044: PUSH
49045: LD_INT 1
49047: NEG
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 1
49055: NEG
49056: PUSH
49057: LD_INT 2
49059: NEG
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: LD_INT 0
49067: PUSH
49068: LD_INT 2
49070: NEG
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 1
49078: PUSH
49079: LD_INT 1
49081: NEG
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: LD_INT 2
49089: PUSH
49090: LD_INT 0
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 2
49099: PUSH
49100: LD_INT 1
49102: PUSH
49103: EMPTY
49104: LIST
49105: LIST
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49121: LD_ADDR_VAR 0 49
49125: PUSH
49126: LD_INT 0
49128: PUSH
49129: LD_INT 0
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: LD_INT 0
49138: PUSH
49139: LD_INT 1
49141: NEG
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: LD_INT 1
49149: PUSH
49150: LD_INT 0
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 1
49159: PUSH
49160: LD_INT 1
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 0
49169: PUSH
49170: LD_INT 1
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: LD_INT 1
49179: NEG
49180: PUSH
49181: LD_INT 0
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 1
49190: NEG
49191: PUSH
49192: LD_INT 1
49194: NEG
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 1
49202: PUSH
49203: LD_INT 1
49205: NEG
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 2
49213: PUSH
49214: LD_INT 0
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 2
49223: PUSH
49224: LD_INT 1
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: LD_INT 2
49233: PUSH
49234: LD_INT 2
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 1
49243: PUSH
49244: LD_INT 2
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49265: LD_ADDR_VAR 0 50
49269: PUSH
49270: LD_INT 0
49272: PUSH
49273: LD_INT 0
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: LD_INT 0
49282: PUSH
49283: LD_INT 1
49285: NEG
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 1
49293: PUSH
49294: LD_INT 0
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: PUSH
49301: LD_INT 1
49303: PUSH
49304: LD_INT 1
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 0
49313: PUSH
49314: LD_INT 1
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 1
49323: NEG
49324: PUSH
49325: LD_INT 0
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 1
49334: NEG
49335: PUSH
49336: LD_INT 1
49338: NEG
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: PUSH
49344: LD_INT 2
49346: PUSH
49347: LD_INT 1
49349: PUSH
49350: EMPTY
49351: LIST
49352: LIST
49353: PUSH
49354: LD_INT 2
49356: PUSH
49357: LD_INT 2
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: LD_INT 1
49366: PUSH
49367: LD_INT 2
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PUSH
49374: LD_INT 0
49376: PUSH
49377: LD_INT 2
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: LD_INT 1
49386: NEG
49387: PUSH
49388: LD_INT 1
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: LIST
49399: LIST
49400: LIST
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49409: LD_ADDR_VAR 0 51
49413: PUSH
49414: LD_INT 0
49416: PUSH
49417: LD_INT 0
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 0
49426: PUSH
49427: LD_INT 1
49429: NEG
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: PUSH
49435: LD_INT 1
49437: PUSH
49438: LD_INT 0
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: PUSH
49445: LD_INT 1
49447: PUSH
49448: LD_INT 1
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: LD_INT 0
49457: PUSH
49458: LD_INT 1
49460: PUSH
49461: EMPTY
49462: LIST
49463: LIST
49464: PUSH
49465: LD_INT 1
49467: NEG
49468: PUSH
49469: LD_INT 0
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 1
49478: NEG
49479: PUSH
49480: LD_INT 1
49482: NEG
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 1
49490: PUSH
49491: LD_INT 2
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 0
49500: PUSH
49501: LD_INT 2
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 1
49510: NEG
49511: PUSH
49512: LD_INT 1
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 2
49521: NEG
49522: PUSH
49523: LD_INT 0
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: LD_INT 2
49532: NEG
49533: PUSH
49534: LD_INT 1
49536: NEG
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: LIST
49550: LIST
49551: LIST
49552: LIST
49553: LIST
49554: LIST
49555: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49556: LD_ADDR_VAR 0 52
49560: PUSH
49561: LD_INT 0
49563: PUSH
49564: LD_INT 0
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 0
49573: PUSH
49574: LD_INT 1
49576: NEG
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: PUSH
49582: LD_INT 1
49584: PUSH
49585: LD_INT 0
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: LD_INT 1
49594: PUSH
49595: LD_INT 1
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PUSH
49602: LD_INT 0
49604: PUSH
49605: LD_INT 1
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: LD_INT 1
49614: NEG
49615: PUSH
49616: LD_INT 0
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: PUSH
49623: LD_INT 1
49625: NEG
49626: PUSH
49627: LD_INT 1
49629: NEG
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: LD_INT 1
49637: NEG
49638: PUSH
49639: LD_INT 2
49641: NEG
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 1
49649: NEG
49650: PUSH
49651: LD_INT 1
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 2
49660: NEG
49661: PUSH
49662: LD_INT 0
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 2
49671: NEG
49672: PUSH
49673: LD_INT 1
49675: NEG
49676: PUSH
49677: EMPTY
49678: LIST
49679: LIST
49680: PUSH
49681: LD_INT 2
49683: NEG
49684: PUSH
49685: LD_INT 2
49687: NEG
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49707: LD_ADDR_VAR 0 53
49711: PUSH
49712: LD_INT 0
49714: PUSH
49715: LD_INT 0
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 0
49724: PUSH
49725: LD_INT 1
49727: NEG
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 1
49735: PUSH
49736: LD_INT 0
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 1
49745: PUSH
49746: LD_INT 1
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 0
49755: PUSH
49756: LD_INT 1
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 1
49765: NEG
49766: PUSH
49767: LD_INT 0
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 1
49776: NEG
49777: PUSH
49778: LD_INT 1
49780: NEG
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 1
49788: NEG
49789: PUSH
49790: LD_INT 2
49792: NEG
49793: PUSH
49794: EMPTY
49795: LIST
49796: LIST
49797: PUSH
49798: LD_INT 0
49800: PUSH
49801: LD_INT 2
49803: NEG
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: LD_INT 1
49811: PUSH
49812: LD_INT 1
49814: NEG
49815: PUSH
49816: EMPTY
49817: LIST
49818: LIST
49819: PUSH
49820: LD_INT 2
49822: PUSH
49823: LD_INT 0
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 2
49832: PUSH
49833: LD_INT 1
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 2
49842: PUSH
49843: LD_INT 2
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 1
49852: PUSH
49853: LD_INT 2
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 0
49862: PUSH
49863: LD_INT 2
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 1
49872: NEG
49873: PUSH
49874: LD_INT 1
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 2
49883: NEG
49884: PUSH
49885: LD_INT 0
49887: PUSH
49888: EMPTY
49889: LIST
49890: LIST
49891: PUSH
49892: LD_INT 2
49894: NEG
49895: PUSH
49896: LD_INT 1
49898: NEG
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 2
49906: NEG
49907: PUSH
49908: LD_INT 2
49910: NEG
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49937: LD_ADDR_VAR 0 54
49941: PUSH
49942: LD_INT 0
49944: PUSH
49945: LD_INT 0
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 0
49954: PUSH
49955: LD_INT 1
49957: NEG
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 1
49965: PUSH
49966: LD_INT 0
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 1
49975: PUSH
49976: LD_INT 1
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 0
49985: PUSH
49986: LD_INT 1
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: LD_INT 1
49995: NEG
49996: PUSH
49997: LD_INT 0
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PUSH
50004: LD_INT 1
50006: NEG
50007: PUSH
50008: LD_INT 1
50010: NEG
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 1
50018: NEG
50019: PUSH
50020: LD_INT 2
50022: NEG
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_INT 0
50030: PUSH
50031: LD_INT 2
50033: NEG
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 1
50041: PUSH
50042: LD_INT 1
50044: NEG
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 2
50052: PUSH
50053: LD_INT 0
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 2
50062: PUSH
50063: LD_INT 1
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 2
50072: PUSH
50073: LD_INT 2
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 1
50082: PUSH
50083: LD_INT 2
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 0
50092: PUSH
50093: LD_INT 2
50095: PUSH
50096: EMPTY
50097: LIST
50098: LIST
50099: PUSH
50100: LD_INT 1
50102: NEG
50103: PUSH
50104: LD_INT 1
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: LD_INT 2
50113: NEG
50114: PUSH
50115: LD_INT 0
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: LD_INT 2
50124: NEG
50125: PUSH
50126: LD_INT 1
50128: NEG
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 2
50136: NEG
50137: PUSH
50138: LD_INT 2
50140: NEG
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: LIST
50157: LIST
50158: LIST
50159: LIST
50160: LIST
50161: LIST
50162: LIST
50163: LIST
50164: LIST
50165: LIST
50166: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50167: LD_ADDR_VAR 0 55
50171: PUSH
50172: LD_INT 0
50174: PUSH
50175: LD_INT 0
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 0
50184: PUSH
50185: LD_INT 1
50187: NEG
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 1
50195: PUSH
50196: LD_INT 0
50198: PUSH
50199: EMPTY
50200: LIST
50201: LIST
50202: PUSH
50203: LD_INT 1
50205: PUSH
50206: LD_INT 1
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 0
50215: PUSH
50216: LD_INT 1
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 1
50225: NEG
50226: PUSH
50227: LD_INT 0
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 1
50236: NEG
50237: PUSH
50238: LD_INT 1
50240: NEG
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 1
50248: NEG
50249: PUSH
50250: LD_INT 2
50252: NEG
50253: PUSH
50254: EMPTY
50255: LIST
50256: LIST
50257: PUSH
50258: LD_INT 0
50260: PUSH
50261: LD_INT 2
50263: NEG
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 1
50271: PUSH
50272: LD_INT 1
50274: NEG
50275: PUSH
50276: EMPTY
50277: LIST
50278: LIST
50279: PUSH
50280: LD_INT 2
50282: PUSH
50283: LD_INT 0
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 2
50292: PUSH
50293: LD_INT 1
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 2
50302: PUSH
50303: LD_INT 2
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: PUSH
50310: LD_INT 1
50312: PUSH
50313: LD_INT 2
50315: PUSH
50316: EMPTY
50317: LIST
50318: LIST
50319: PUSH
50320: LD_INT 0
50322: PUSH
50323: LD_INT 2
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: LD_INT 1
50332: NEG
50333: PUSH
50334: LD_INT 1
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 2
50343: NEG
50344: PUSH
50345: LD_INT 0
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 2
50354: NEG
50355: PUSH
50356: LD_INT 1
50358: NEG
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 2
50366: NEG
50367: PUSH
50368: LD_INT 2
50370: NEG
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: LIST
50380: LIST
50381: LIST
50382: LIST
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50397: LD_ADDR_VAR 0 56
50401: PUSH
50402: LD_INT 0
50404: PUSH
50405: LD_INT 0
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 0
50414: PUSH
50415: LD_INT 1
50417: NEG
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 1
50425: PUSH
50426: LD_INT 0
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 1
50435: PUSH
50436: LD_INT 1
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 0
50445: PUSH
50446: LD_INT 1
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 1
50455: NEG
50456: PUSH
50457: LD_INT 0
50459: PUSH
50460: EMPTY
50461: LIST
50462: LIST
50463: PUSH
50464: LD_INT 1
50466: NEG
50467: PUSH
50468: LD_INT 1
50470: NEG
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: LD_INT 1
50478: NEG
50479: PUSH
50480: LD_INT 2
50482: NEG
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 0
50490: PUSH
50491: LD_INT 2
50493: NEG
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 1
50501: PUSH
50502: LD_INT 1
50504: NEG
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 2
50512: PUSH
50513: LD_INT 0
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 2
50522: PUSH
50523: LD_INT 1
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 2
50532: PUSH
50533: LD_INT 2
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 1
50542: PUSH
50543: LD_INT 2
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 0
50552: PUSH
50553: LD_INT 2
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 1
50562: NEG
50563: PUSH
50564: LD_INT 1
50566: PUSH
50567: EMPTY
50568: LIST
50569: LIST
50570: PUSH
50571: LD_INT 2
50573: NEG
50574: PUSH
50575: LD_INT 0
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 2
50584: NEG
50585: PUSH
50586: LD_INT 1
50588: NEG
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: PUSH
50594: LD_INT 2
50596: NEG
50597: PUSH
50598: LD_INT 2
50600: NEG
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50627: LD_ADDR_VAR 0 57
50631: PUSH
50632: LD_INT 0
50634: PUSH
50635: LD_INT 0
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 0
50644: PUSH
50645: LD_INT 1
50647: NEG
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 1
50655: PUSH
50656: LD_INT 0
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: LD_INT 1
50665: PUSH
50666: LD_INT 1
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: LD_INT 0
50675: PUSH
50676: LD_INT 1
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 1
50685: NEG
50686: PUSH
50687: LD_INT 0
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 1
50696: NEG
50697: PUSH
50698: LD_INT 1
50700: NEG
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 1
50708: NEG
50709: PUSH
50710: LD_INT 2
50712: NEG
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PUSH
50718: LD_INT 0
50720: PUSH
50721: LD_INT 2
50723: NEG
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: LD_INT 1
50731: PUSH
50732: LD_INT 1
50734: NEG
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 2
50742: PUSH
50743: LD_INT 0
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: PUSH
50750: LD_INT 2
50752: PUSH
50753: LD_INT 1
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: PUSH
50760: LD_INT 2
50762: PUSH
50763: LD_INT 2
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 1
50772: PUSH
50773: LD_INT 2
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 0
50782: PUSH
50783: LD_INT 2
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: LD_INT 1
50792: NEG
50793: PUSH
50794: LD_INT 1
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 2
50803: NEG
50804: PUSH
50805: LD_INT 0
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: LD_INT 2
50814: NEG
50815: PUSH
50816: LD_INT 1
50818: NEG
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: LD_INT 2
50826: NEG
50827: PUSH
50828: LD_INT 2
50830: NEG
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: LIST
50848: LIST
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: LIST
50854: LIST
50855: LIST
50856: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50857: LD_ADDR_VAR 0 58
50861: PUSH
50862: LD_INT 0
50864: PUSH
50865: LD_INT 0
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 0
50874: PUSH
50875: LD_INT 1
50877: NEG
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 1
50885: PUSH
50886: LD_INT 0
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 1
50895: PUSH
50896: LD_INT 1
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 0
50905: PUSH
50906: LD_INT 1
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: LD_INT 1
50915: NEG
50916: PUSH
50917: LD_INT 0
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 1
50926: NEG
50927: PUSH
50928: LD_INT 1
50930: NEG
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: PUSH
50936: LD_INT 1
50938: NEG
50939: PUSH
50940: LD_INT 2
50942: NEG
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: LD_INT 0
50950: PUSH
50951: LD_INT 2
50953: NEG
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: LD_INT 1
50961: PUSH
50962: LD_INT 1
50964: NEG
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 2
50972: PUSH
50973: LD_INT 0
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 2
50982: PUSH
50983: LD_INT 1
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 2
50992: PUSH
50993: LD_INT 2
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 1
51002: PUSH
51003: LD_INT 2
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 0
51012: PUSH
51013: LD_INT 2
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 1
51022: NEG
51023: PUSH
51024: LD_INT 1
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: LD_INT 2
51033: NEG
51034: PUSH
51035: LD_INT 0
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 2
51044: NEG
51045: PUSH
51046: LD_INT 1
51048: NEG
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: LD_INT 2
51056: NEG
51057: PUSH
51058: LD_INT 2
51060: NEG
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51087: LD_ADDR_VAR 0 59
51091: PUSH
51092: LD_INT 0
51094: PUSH
51095: LD_INT 0
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 0
51104: PUSH
51105: LD_INT 1
51107: NEG
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 1
51115: PUSH
51116: LD_INT 0
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: PUSH
51123: LD_INT 1
51125: PUSH
51126: LD_INT 1
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: LD_INT 0
51135: PUSH
51136: LD_INT 1
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 1
51145: NEG
51146: PUSH
51147: LD_INT 0
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 1
51156: NEG
51157: PUSH
51158: LD_INT 1
51160: NEG
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: LIST
51172: LIST
51173: LIST
51174: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51175: LD_ADDR_VAR 0 60
51179: PUSH
51180: LD_INT 0
51182: PUSH
51183: LD_INT 0
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 0
51192: PUSH
51193: LD_INT 1
51195: NEG
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 1
51203: PUSH
51204: LD_INT 0
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: LD_INT 1
51213: PUSH
51214: LD_INT 1
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PUSH
51221: LD_INT 0
51223: PUSH
51224: LD_INT 1
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: LD_INT 1
51233: NEG
51234: PUSH
51235: LD_INT 0
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 1
51244: NEG
51245: PUSH
51246: LD_INT 1
51248: NEG
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: LIST
51258: LIST
51259: LIST
51260: LIST
51261: LIST
51262: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51263: LD_ADDR_VAR 0 61
51267: PUSH
51268: LD_INT 0
51270: PUSH
51271: LD_INT 0
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 0
51280: PUSH
51281: LD_INT 1
51283: NEG
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 1
51291: PUSH
51292: LD_INT 0
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 1
51301: PUSH
51302: LD_INT 1
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: LD_INT 0
51311: PUSH
51312: LD_INT 1
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 1
51321: NEG
51322: PUSH
51323: LD_INT 0
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 1
51332: NEG
51333: PUSH
51334: LD_INT 1
51336: NEG
51337: PUSH
51338: EMPTY
51339: LIST
51340: LIST
51341: PUSH
51342: EMPTY
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51351: LD_ADDR_VAR 0 62
51355: PUSH
51356: LD_INT 0
51358: PUSH
51359: LD_INT 0
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 0
51368: PUSH
51369: LD_INT 1
51371: NEG
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: LD_INT 1
51379: PUSH
51380: LD_INT 0
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: LD_INT 1
51389: PUSH
51390: LD_INT 1
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 0
51399: PUSH
51400: LD_INT 1
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 1
51409: NEG
51410: PUSH
51411: LD_INT 0
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 1
51420: NEG
51421: PUSH
51422: LD_INT 1
51424: NEG
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51439: LD_ADDR_VAR 0 63
51443: PUSH
51444: LD_INT 0
51446: PUSH
51447: LD_INT 0
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 0
51456: PUSH
51457: LD_INT 1
51459: NEG
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 1
51467: PUSH
51468: LD_INT 0
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 1
51477: PUSH
51478: LD_INT 1
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: LD_INT 0
51487: PUSH
51488: LD_INT 1
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 1
51497: NEG
51498: PUSH
51499: LD_INT 0
51501: PUSH
51502: EMPTY
51503: LIST
51504: LIST
51505: PUSH
51506: LD_INT 1
51508: NEG
51509: PUSH
51510: LD_INT 1
51512: NEG
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
51527: LD_ADDR_VAR 0 64
51531: PUSH
51532: LD_INT 0
51534: PUSH
51535: LD_INT 0
51537: PUSH
51538: EMPTY
51539: LIST
51540: LIST
51541: PUSH
51542: LD_INT 0
51544: PUSH
51545: LD_INT 1
51547: NEG
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: LD_INT 1
51555: PUSH
51556: LD_INT 0
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 1
51565: PUSH
51566: LD_INT 1
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: PUSH
51573: LD_INT 0
51575: PUSH
51576: LD_INT 1
51578: PUSH
51579: EMPTY
51580: LIST
51581: LIST
51582: PUSH
51583: LD_INT 1
51585: NEG
51586: PUSH
51587: LD_INT 0
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: PUSH
51594: LD_INT 1
51596: NEG
51597: PUSH
51598: LD_INT 1
51600: NEG
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: ST_TO_ADDR
// end ; 1 :
51615: GO 57512
51617: LD_INT 1
51619: DOUBLE
51620: EQUAL
51621: IFTRUE 51625
51623: GO 54248
51625: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51626: LD_ADDR_VAR 0 11
51630: PUSH
51631: LD_INT 1
51633: NEG
51634: PUSH
51635: LD_INT 3
51637: NEG
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 0
51645: PUSH
51646: LD_INT 3
51648: NEG
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 1
51656: PUSH
51657: LD_INT 2
51659: NEG
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: LIST
51669: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51670: LD_ADDR_VAR 0 12
51674: PUSH
51675: LD_INT 2
51677: PUSH
51678: LD_INT 1
51680: NEG
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 3
51688: PUSH
51689: LD_INT 0
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 3
51698: PUSH
51699: LD_INT 1
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: LIST
51710: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51711: LD_ADDR_VAR 0 13
51715: PUSH
51716: LD_INT 3
51718: PUSH
51719: LD_INT 2
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: PUSH
51726: LD_INT 3
51728: PUSH
51729: LD_INT 3
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 2
51738: PUSH
51739: LD_INT 3
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: LIST
51750: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51751: LD_ADDR_VAR 0 14
51755: PUSH
51756: LD_INT 1
51758: PUSH
51759: LD_INT 3
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 0
51768: PUSH
51769: LD_INT 3
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 1
51778: NEG
51779: PUSH
51780: LD_INT 2
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: LIST
51791: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51792: LD_ADDR_VAR 0 15
51796: PUSH
51797: LD_INT 2
51799: NEG
51800: PUSH
51801: LD_INT 1
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 3
51810: NEG
51811: PUSH
51812: LD_INT 0
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 3
51821: NEG
51822: PUSH
51823: LD_INT 1
51825: NEG
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: LIST
51835: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51836: LD_ADDR_VAR 0 16
51840: PUSH
51841: LD_INT 2
51843: NEG
51844: PUSH
51845: LD_INT 3
51847: NEG
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 3
51855: NEG
51856: PUSH
51857: LD_INT 2
51859: NEG
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 3
51867: NEG
51868: PUSH
51869: LD_INT 3
51871: NEG
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: LIST
51881: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51882: LD_ADDR_VAR 0 17
51886: PUSH
51887: LD_INT 1
51889: NEG
51890: PUSH
51891: LD_INT 3
51893: NEG
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 0
51901: PUSH
51902: LD_INT 3
51904: NEG
51905: PUSH
51906: EMPTY
51907: LIST
51908: LIST
51909: PUSH
51910: LD_INT 1
51912: PUSH
51913: LD_INT 2
51915: NEG
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: LIST
51925: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51926: LD_ADDR_VAR 0 18
51930: PUSH
51931: LD_INT 2
51933: PUSH
51934: LD_INT 1
51936: NEG
51937: PUSH
51938: EMPTY
51939: LIST
51940: LIST
51941: PUSH
51942: LD_INT 3
51944: PUSH
51945: LD_INT 0
51947: PUSH
51948: EMPTY
51949: LIST
51950: LIST
51951: PUSH
51952: LD_INT 3
51954: PUSH
51955: LD_INT 1
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: LIST
51966: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51967: LD_ADDR_VAR 0 19
51971: PUSH
51972: LD_INT 3
51974: PUSH
51975: LD_INT 2
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 3
51984: PUSH
51985: LD_INT 3
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 2
51994: PUSH
51995: LD_INT 3
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: LIST
52006: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52007: LD_ADDR_VAR 0 20
52011: PUSH
52012: LD_INT 1
52014: PUSH
52015: LD_INT 3
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 0
52024: PUSH
52025: LD_INT 3
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 1
52034: NEG
52035: PUSH
52036: LD_INT 2
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: LIST
52047: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52048: LD_ADDR_VAR 0 21
52052: PUSH
52053: LD_INT 2
52055: NEG
52056: PUSH
52057: LD_INT 1
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 3
52066: NEG
52067: PUSH
52068: LD_INT 0
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 3
52077: NEG
52078: PUSH
52079: LD_INT 1
52081: NEG
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: LIST
52091: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52092: LD_ADDR_VAR 0 22
52096: PUSH
52097: LD_INT 2
52099: NEG
52100: PUSH
52101: LD_INT 3
52103: NEG
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 3
52111: NEG
52112: PUSH
52113: LD_INT 2
52115: NEG
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PUSH
52121: LD_INT 3
52123: NEG
52124: PUSH
52125: LD_INT 3
52127: NEG
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: EMPTY
52134: LIST
52135: LIST
52136: LIST
52137: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
52138: LD_ADDR_VAR 0 23
52142: PUSH
52143: LD_INT 0
52145: PUSH
52146: LD_INT 3
52148: NEG
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 1
52156: NEG
52157: PUSH
52158: LD_INT 4
52160: NEG
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 1
52168: PUSH
52169: LD_INT 3
52171: NEG
52172: PUSH
52173: EMPTY
52174: LIST
52175: LIST
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: LIST
52181: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
52182: LD_ADDR_VAR 0 24
52186: PUSH
52187: LD_INT 3
52189: PUSH
52190: LD_INT 0
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: LD_INT 3
52199: PUSH
52200: LD_INT 1
52202: NEG
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 4
52210: PUSH
52211: LD_INT 1
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: LIST
52222: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
52223: LD_ADDR_VAR 0 25
52227: PUSH
52228: LD_INT 3
52230: PUSH
52231: LD_INT 3
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 4
52240: PUSH
52241: LD_INT 3
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 3
52250: PUSH
52251: LD_INT 4
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: EMPTY
52259: LIST
52260: LIST
52261: LIST
52262: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
52263: LD_ADDR_VAR 0 26
52267: PUSH
52268: LD_INT 0
52270: PUSH
52271: LD_INT 3
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 1
52280: PUSH
52281: LD_INT 4
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 1
52290: NEG
52291: PUSH
52292: LD_INT 3
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: LIST
52303: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
52304: LD_ADDR_VAR 0 27
52308: PUSH
52309: LD_INT 3
52311: NEG
52312: PUSH
52313: LD_INT 0
52315: PUSH
52316: EMPTY
52317: LIST
52318: LIST
52319: PUSH
52320: LD_INT 3
52322: NEG
52323: PUSH
52324: LD_INT 1
52326: PUSH
52327: EMPTY
52328: LIST
52329: LIST
52330: PUSH
52331: LD_INT 4
52333: NEG
52334: PUSH
52335: LD_INT 1
52337: NEG
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: LIST
52347: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
52348: LD_ADDR_VAR 0 28
52352: PUSH
52353: LD_INT 3
52355: NEG
52356: PUSH
52357: LD_INT 3
52359: NEG
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 3
52367: NEG
52368: PUSH
52369: LD_INT 4
52371: NEG
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 4
52379: NEG
52380: PUSH
52381: LD_INT 3
52383: NEG
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: LIST
52393: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
52394: LD_ADDR_VAR 0 29
52398: PUSH
52399: LD_INT 1
52401: NEG
52402: PUSH
52403: LD_INT 3
52405: NEG
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 0
52413: PUSH
52414: LD_INT 3
52416: NEG
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 1
52424: PUSH
52425: LD_INT 2
52427: NEG
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 1
52435: NEG
52436: PUSH
52437: LD_INT 4
52439: NEG
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 0
52447: PUSH
52448: LD_INT 4
52450: NEG
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 1
52458: PUSH
52459: LD_INT 3
52461: NEG
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 1
52469: NEG
52470: PUSH
52471: LD_INT 5
52473: NEG
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: PUSH
52479: LD_INT 0
52481: PUSH
52482: LD_INT 5
52484: NEG
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 1
52492: PUSH
52493: LD_INT 4
52495: NEG
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: LD_INT 1
52503: NEG
52504: PUSH
52505: LD_INT 6
52507: NEG
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: LD_INT 0
52515: PUSH
52516: LD_INT 6
52518: NEG
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 1
52526: PUSH
52527: LD_INT 5
52529: NEG
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: LIST
52544: LIST
52545: LIST
52546: LIST
52547: LIST
52548: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
52549: LD_ADDR_VAR 0 30
52553: PUSH
52554: LD_INT 2
52556: PUSH
52557: LD_INT 1
52559: NEG
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 3
52567: PUSH
52568: LD_INT 0
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 3
52577: PUSH
52578: LD_INT 1
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 3
52587: PUSH
52588: LD_INT 1
52590: NEG
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 4
52598: PUSH
52599: LD_INT 0
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 4
52608: PUSH
52609: LD_INT 1
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 4
52618: PUSH
52619: LD_INT 1
52621: NEG
52622: PUSH
52623: EMPTY
52624: LIST
52625: LIST
52626: PUSH
52627: LD_INT 5
52629: PUSH
52630: LD_INT 0
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: LD_INT 5
52639: PUSH
52640: LD_INT 1
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: LD_INT 5
52649: PUSH
52650: LD_INT 1
52652: NEG
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 6
52660: PUSH
52661: LD_INT 0
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 6
52670: PUSH
52671: LD_INT 1
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
52692: LD_ADDR_VAR 0 31
52696: PUSH
52697: LD_INT 3
52699: PUSH
52700: LD_INT 2
52702: PUSH
52703: EMPTY
52704: LIST
52705: LIST
52706: PUSH
52707: LD_INT 3
52709: PUSH
52710: LD_INT 3
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 2
52719: PUSH
52720: LD_INT 3
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 4
52729: PUSH
52730: LD_INT 3
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 4
52739: PUSH
52740: LD_INT 4
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 3
52749: PUSH
52750: LD_INT 4
52752: PUSH
52753: EMPTY
52754: LIST
52755: LIST
52756: PUSH
52757: LD_INT 5
52759: PUSH
52760: LD_INT 4
52762: PUSH
52763: EMPTY
52764: LIST
52765: LIST
52766: PUSH
52767: LD_INT 5
52769: PUSH
52770: LD_INT 5
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 4
52779: PUSH
52780: LD_INT 5
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: PUSH
52787: LD_INT 6
52789: PUSH
52790: LD_INT 5
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 6
52799: PUSH
52800: LD_INT 6
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 5
52809: PUSH
52810: LD_INT 6
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
52831: LD_ADDR_VAR 0 32
52835: PUSH
52836: LD_INT 1
52838: PUSH
52839: LD_INT 3
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: LD_INT 0
52848: PUSH
52849: LD_INT 3
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: LD_INT 1
52858: NEG
52859: PUSH
52860: LD_INT 2
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 1
52869: PUSH
52870: LD_INT 4
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 0
52879: PUSH
52880: LD_INT 4
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 1
52889: NEG
52890: PUSH
52891: LD_INT 3
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: PUSH
52898: LD_INT 1
52900: PUSH
52901: LD_INT 5
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 0
52910: PUSH
52911: LD_INT 5
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 1
52920: NEG
52921: PUSH
52922: LD_INT 4
52924: PUSH
52925: EMPTY
52926: LIST
52927: LIST
52928: PUSH
52929: LD_INT 1
52931: PUSH
52932: LD_INT 6
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: PUSH
52939: LD_INT 0
52941: PUSH
52942: LD_INT 6
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: LD_INT 1
52951: NEG
52952: PUSH
52953: LD_INT 5
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
52974: LD_ADDR_VAR 0 33
52978: PUSH
52979: LD_INT 2
52981: NEG
52982: PUSH
52983: LD_INT 1
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 3
52992: NEG
52993: PUSH
52994: LD_INT 0
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 3
53003: NEG
53004: PUSH
53005: LD_INT 1
53007: NEG
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 3
53015: NEG
53016: PUSH
53017: LD_INT 1
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 4
53026: NEG
53027: PUSH
53028: LD_INT 0
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 4
53037: NEG
53038: PUSH
53039: LD_INT 1
53041: NEG
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: PUSH
53047: LD_INT 4
53049: NEG
53050: PUSH
53051: LD_INT 1
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: LD_INT 5
53060: NEG
53061: PUSH
53062: LD_INT 0
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 5
53071: NEG
53072: PUSH
53073: LD_INT 1
53075: NEG
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: LD_INT 5
53083: NEG
53084: PUSH
53085: LD_INT 1
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 6
53094: NEG
53095: PUSH
53096: LD_INT 0
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 6
53105: NEG
53106: PUSH
53107: LD_INT 1
53109: NEG
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: EMPTY
53116: LIST
53117: LIST
53118: LIST
53119: LIST
53120: LIST
53121: LIST
53122: LIST
53123: LIST
53124: LIST
53125: LIST
53126: LIST
53127: LIST
53128: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
53129: LD_ADDR_VAR 0 34
53133: PUSH
53134: LD_INT 2
53136: NEG
53137: PUSH
53138: LD_INT 3
53140: NEG
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 3
53148: NEG
53149: PUSH
53150: LD_INT 2
53152: NEG
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 3
53160: NEG
53161: PUSH
53162: LD_INT 3
53164: NEG
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: PUSH
53170: LD_INT 3
53172: NEG
53173: PUSH
53174: LD_INT 4
53176: NEG
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: PUSH
53182: LD_INT 4
53184: NEG
53185: PUSH
53186: LD_INT 3
53188: NEG
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: PUSH
53194: LD_INT 4
53196: NEG
53197: PUSH
53198: LD_INT 4
53200: NEG
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PUSH
53206: LD_INT 4
53208: NEG
53209: PUSH
53210: LD_INT 5
53212: NEG
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 5
53220: NEG
53221: PUSH
53222: LD_INT 4
53224: NEG
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: LD_INT 5
53232: NEG
53233: PUSH
53234: LD_INT 5
53236: NEG
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 5
53244: NEG
53245: PUSH
53246: LD_INT 6
53248: NEG
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: PUSH
53254: LD_INT 6
53256: NEG
53257: PUSH
53258: LD_INT 5
53260: NEG
53261: PUSH
53262: EMPTY
53263: LIST
53264: LIST
53265: PUSH
53266: LD_INT 6
53268: NEG
53269: PUSH
53270: LD_INT 6
53272: NEG
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: LIST
53282: LIST
53283: LIST
53284: LIST
53285: LIST
53286: LIST
53287: LIST
53288: LIST
53289: LIST
53290: LIST
53291: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
53292: LD_ADDR_VAR 0 41
53296: PUSH
53297: LD_INT 0
53299: PUSH
53300: LD_INT 2
53302: NEG
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 1
53310: NEG
53311: PUSH
53312: LD_INT 3
53314: NEG
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 1
53322: PUSH
53323: LD_INT 2
53325: NEG
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: LIST
53335: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
53336: LD_ADDR_VAR 0 42
53340: PUSH
53341: LD_INT 2
53343: PUSH
53344: LD_INT 0
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 2
53353: PUSH
53354: LD_INT 1
53356: NEG
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 3
53364: PUSH
53365: LD_INT 1
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: LIST
53376: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
53377: LD_ADDR_VAR 0 43
53381: PUSH
53382: LD_INT 2
53384: PUSH
53385: LD_INT 2
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 3
53394: PUSH
53395: LD_INT 2
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 2
53404: PUSH
53405: LD_INT 3
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: LIST
53416: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
53417: LD_ADDR_VAR 0 44
53421: PUSH
53422: LD_INT 0
53424: PUSH
53425: LD_INT 2
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 1
53434: PUSH
53435: LD_INT 3
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 1
53444: NEG
53445: PUSH
53446: LD_INT 2
53448: PUSH
53449: EMPTY
53450: LIST
53451: LIST
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: LIST
53457: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53458: LD_ADDR_VAR 0 45
53462: PUSH
53463: LD_INT 2
53465: NEG
53466: PUSH
53467: LD_INT 0
53469: PUSH
53470: EMPTY
53471: LIST
53472: LIST
53473: PUSH
53474: LD_INT 2
53476: NEG
53477: PUSH
53478: LD_INT 1
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 3
53487: NEG
53488: PUSH
53489: LD_INT 1
53491: NEG
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: LIST
53501: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
53502: LD_ADDR_VAR 0 46
53506: PUSH
53507: LD_INT 2
53509: NEG
53510: PUSH
53511: LD_INT 2
53513: NEG
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 2
53521: NEG
53522: PUSH
53523: LD_INT 3
53525: NEG
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 3
53533: NEG
53534: PUSH
53535: LD_INT 2
53537: NEG
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: LIST
53547: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
53548: LD_ADDR_VAR 0 47
53552: PUSH
53553: LD_INT 2
53555: NEG
53556: PUSH
53557: LD_INT 3
53559: NEG
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: PUSH
53565: LD_INT 1
53567: NEG
53568: PUSH
53569: LD_INT 3
53571: NEG
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: EMPTY
53578: LIST
53579: LIST
53580: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
53581: LD_ADDR_VAR 0 48
53585: PUSH
53586: LD_INT 1
53588: PUSH
53589: LD_INT 2
53591: NEG
53592: PUSH
53593: EMPTY
53594: LIST
53595: LIST
53596: PUSH
53597: LD_INT 2
53599: PUSH
53600: LD_INT 1
53602: NEG
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
53612: LD_ADDR_VAR 0 49
53616: PUSH
53617: LD_INT 3
53619: PUSH
53620: LD_INT 1
53622: PUSH
53623: EMPTY
53624: LIST
53625: LIST
53626: PUSH
53627: LD_INT 3
53629: PUSH
53630: LD_INT 2
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
53641: LD_ADDR_VAR 0 50
53645: PUSH
53646: LD_INT 2
53648: PUSH
53649: LD_INT 3
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 1
53658: PUSH
53659: LD_INT 3
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
53670: LD_ADDR_VAR 0 51
53674: PUSH
53675: LD_INT 1
53677: NEG
53678: PUSH
53679: LD_INT 2
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 2
53688: NEG
53689: PUSH
53690: LD_INT 1
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53701: LD_ADDR_VAR 0 52
53705: PUSH
53706: LD_INT 3
53708: NEG
53709: PUSH
53710: LD_INT 1
53712: NEG
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 3
53720: NEG
53721: PUSH
53722: LD_INT 2
53724: NEG
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: EMPTY
53731: LIST
53732: LIST
53733: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53734: LD_ADDR_VAR 0 53
53738: PUSH
53739: LD_INT 1
53741: NEG
53742: PUSH
53743: LD_INT 3
53745: NEG
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 0
53753: PUSH
53754: LD_INT 3
53756: NEG
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 1
53764: PUSH
53765: LD_INT 2
53767: NEG
53768: PUSH
53769: EMPTY
53770: LIST
53771: LIST
53772: PUSH
53773: EMPTY
53774: LIST
53775: LIST
53776: LIST
53777: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53778: LD_ADDR_VAR 0 54
53782: PUSH
53783: LD_INT 2
53785: PUSH
53786: LD_INT 1
53788: NEG
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: PUSH
53794: LD_INT 3
53796: PUSH
53797: LD_INT 0
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 3
53806: PUSH
53807: LD_INT 1
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: LIST
53818: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53819: LD_ADDR_VAR 0 55
53823: PUSH
53824: LD_INT 3
53826: PUSH
53827: LD_INT 2
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 3
53836: PUSH
53837: LD_INT 3
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 2
53846: PUSH
53847: LD_INT 3
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: LIST
53858: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53859: LD_ADDR_VAR 0 56
53863: PUSH
53864: LD_INT 1
53866: PUSH
53867: LD_INT 3
53869: PUSH
53870: EMPTY
53871: LIST
53872: LIST
53873: PUSH
53874: LD_INT 0
53876: PUSH
53877: LD_INT 3
53879: PUSH
53880: EMPTY
53881: LIST
53882: LIST
53883: PUSH
53884: LD_INT 1
53886: NEG
53887: PUSH
53888: LD_INT 2
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: LIST
53899: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53900: LD_ADDR_VAR 0 57
53904: PUSH
53905: LD_INT 2
53907: NEG
53908: PUSH
53909: LD_INT 1
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 3
53918: NEG
53919: PUSH
53920: LD_INT 0
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 3
53929: NEG
53930: PUSH
53931: LD_INT 1
53933: NEG
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: LIST
53943: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53944: LD_ADDR_VAR 0 58
53948: PUSH
53949: LD_INT 2
53951: NEG
53952: PUSH
53953: LD_INT 3
53955: NEG
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 3
53963: NEG
53964: PUSH
53965: LD_INT 2
53967: NEG
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 3
53975: NEG
53976: PUSH
53977: LD_INT 3
53979: NEG
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: EMPTY
53986: LIST
53987: LIST
53988: LIST
53989: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
53990: LD_ADDR_VAR 0 59
53994: PUSH
53995: LD_INT 1
53997: NEG
53998: PUSH
53999: LD_INT 2
54001: NEG
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: LD_INT 0
54009: PUSH
54010: LD_INT 2
54012: NEG
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 1
54020: PUSH
54021: LD_INT 1
54023: NEG
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: LIST
54033: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54034: LD_ADDR_VAR 0 60
54038: PUSH
54039: LD_INT 1
54041: PUSH
54042: LD_INT 1
54044: NEG
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: PUSH
54050: LD_INT 2
54052: PUSH
54053: LD_INT 0
54055: PUSH
54056: EMPTY
54057: LIST
54058: LIST
54059: PUSH
54060: LD_INT 2
54062: PUSH
54063: LD_INT 1
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: LIST
54074: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54075: LD_ADDR_VAR 0 61
54079: PUSH
54080: LD_INT 2
54082: PUSH
54083: LD_INT 1
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 2
54092: PUSH
54093: LD_INT 2
54095: PUSH
54096: EMPTY
54097: LIST
54098: LIST
54099: PUSH
54100: LD_INT 1
54102: PUSH
54103: LD_INT 2
54105: PUSH
54106: EMPTY
54107: LIST
54108: LIST
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: LIST
54114: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54115: LD_ADDR_VAR 0 62
54119: PUSH
54120: LD_INT 1
54122: PUSH
54123: LD_INT 2
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 0
54132: PUSH
54133: LD_INT 2
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: PUSH
54140: LD_INT 1
54142: NEG
54143: PUSH
54144: LD_INT 1
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: LIST
54155: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54156: LD_ADDR_VAR 0 63
54160: PUSH
54161: LD_INT 1
54163: NEG
54164: PUSH
54165: LD_INT 1
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: LD_INT 2
54174: NEG
54175: PUSH
54176: LD_INT 0
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 2
54185: NEG
54186: PUSH
54187: LD_INT 1
54189: NEG
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: LIST
54199: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54200: LD_ADDR_VAR 0 64
54204: PUSH
54205: LD_INT 1
54207: NEG
54208: PUSH
54209: LD_INT 2
54211: NEG
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: LD_INT 2
54219: NEG
54220: PUSH
54221: LD_INT 1
54223: NEG
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 2
54231: NEG
54232: PUSH
54233: LD_INT 2
54235: NEG
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: EMPTY
54242: LIST
54243: LIST
54244: LIST
54245: ST_TO_ADDR
// end ; 2 :
54246: GO 57512
54248: LD_INT 2
54250: DOUBLE
54251: EQUAL
54252: IFTRUE 54256
54254: GO 57511
54256: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
54257: LD_ADDR_VAR 0 29
54261: PUSH
54262: LD_INT 4
54264: PUSH
54265: LD_INT 0
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 4
54274: PUSH
54275: LD_INT 1
54277: NEG
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: LD_INT 5
54285: PUSH
54286: LD_INT 0
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 5
54295: PUSH
54296: LD_INT 1
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: LD_INT 4
54305: PUSH
54306: LD_INT 1
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 3
54315: PUSH
54316: LD_INT 0
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 3
54325: PUSH
54326: LD_INT 1
54328: NEG
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 3
54336: PUSH
54337: LD_INT 2
54339: NEG
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 5
54347: PUSH
54348: LD_INT 2
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 3
54357: PUSH
54358: LD_INT 3
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: LD_INT 3
54367: PUSH
54368: LD_INT 2
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 4
54377: PUSH
54378: LD_INT 3
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 4
54387: PUSH
54388: LD_INT 4
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: LD_INT 3
54397: PUSH
54398: LD_INT 4
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 2
54407: PUSH
54408: LD_INT 3
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 2
54417: PUSH
54418: LD_INT 2
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: LD_INT 4
54427: PUSH
54428: LD_INT 2
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 2
54437: PUSH
54438: LD_INT 4
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 0
54447: PUSH
54448: LD_INT 4
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 0
54457: PUSH
54458: LD_INT 3
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 1
54467: PUSH
54468: LD_INT 4
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 1
54477: PUSH
54478: LD_INT 5
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 0
54487: PUSH
54488: LD_INT 5
54490: PUSH
54491: EMPTY
54492: LIST
54493: LIST
54494: PUSH
54495: LD_INT 1
54497: NEG
54498: PUSH
54499: LD_INT 4
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 1
54508: NEG
54509: PUSH
54510: LD_INT 3
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 2
54519: PUSH
54520: LD_INT 5
54522: PUSH
54523: EMPTY
54524: LIST
54525: LIST
54526: PUSH
54527: LD_INT 2
54529: NEG
54530: PUSH
54531: LD_INT 3
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: LD_INT 3
54540: NEG
54541: PUSH
54542: LD_INT 0
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 3
54551: NEG
54552: PUSH
54553: LD_INT 1
54555: NEG
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: PUSH
54561: LD_INT 2
54563: NEG
54564: PUSH
54565: LD_INT 0
54567: PUSH
54568: EMPTY
54569: LIST
54570: LIST
54571: PUSH
54572: LD_INT 2
54574: NEG
54575: PUSH
54576: LD_INT 1
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: LD_INT 3
54585: NEG
54586: PUSH
54587: LD_INT 1
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: PUSH
54594: LD_INT 4
54596: NEG
54597: PUSH
54598: LD_INT 0
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: PUSH
54605: LD_INT 4
54607: NEG
54608: PUSH
54609: LD_INT 1
54611: NEG
54612: PUSH
54613: EMPTY
54614: LIST
54615: LIST
54616: PUSH
54617: LD_INT 4
54619: NEG
54620: PUSH
54621: LD_INT 2
54623: NEG
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 2
54631: NEG
54632: PUSH
54633: LD_INT 2
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 4
54642: NEG
54643: PUSH
54644: LD_INT 4
54646: NEG
54647: PUSH
54648: EMPTY
54649: LIST
54650: LIST
54651: PUSH
54652: LD_INT 4
54654: NEG
54655: PUSH
54656: LD_INT 5
54658: NEG
54659: PUSH
54660: EMPTY
54661: LIST
54662: LIST
54663: PUSH
54664: LD_INT 3
54666: NEG
54667: PUSH
54668: LD_INT 4
54670: NEG
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 3
54678: NEG
54679: PUSH
54680: LD_INT 3
54682: NEG
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: PUSH
54688: LD_INT 4
54690: NEG
54691: PUSH
54692: LD_INT 3
54694: NEG
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 5
54702: NEG
54703: PUSH
54704: LD_INT 4
54706: NEG
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 5
54714: NEG
54715: PUSH
54716: LD_INT 5
54718: NEG
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 3
54726: NEG
54727: PUSH
54728: LD_INT 5
54730: NEG
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: LD_INT 5
54738: NEG
54739: PUSH
54740: LD_INT 3
54742: NEG
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: LIST
54752: LIST
54753: LIST
54754: LIST
54755: LIST
54756: LIST
54757: LIST
54758: LIST
54759: LIST
54760: LIST
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: LIST
54766: LIST
54767: LIST
54768: LIST
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
54795: LD_ADDR_VAR 0 30
54799: PUSH
54800: LD_INT 4
54802: PUSH
54803: LD_INT 4
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: LD_INT 4
54812: PUSH
54813: LD_INT 3
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PUSH
54820: LD_INT 5
54822: PUSH
54823: LD_INT 4
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 5
54832: PUSH
54833: LD_INT 5
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: LD_INT 4
54842: PUSH
54843: LD_INT 5
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 3
54852: PUSH
54853: LD_INT 4
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 3
54862: PUSH
54863: LD_INT 3
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 5
54872: PUSH
54873: LD_INT 3
54875: PUSH
54876: EMPTY
54877: LIST
54878: LIST
54879: PUSH
54880: LD_INT 3
54882: PUSH
54883: LD_INT 5
54885: PUSH
54886: EMPTY
54887: LIST
54888: LIST
54889: PUSH
54890: LD_INT 0
54892: PUSH
54893: LD_INT 3
54895: PUSH
54896: EMPTY
54897: LIST
54898: LIST
54899: PUSH
54900: LD_INT 0
54902: PUSH
54903: LD_INT 2
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: PUSH
54910: LD_INT 1
54912: PUSH
54913: LD_INT 3
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 1
54922: PUSH
54923: LD_INT 4
54925: PUSH
54926: EMPTY
54927: LIST
54928: LIST
54929: PUSH
54930: LD_INT 0
54932: PUSH
54933: LD_INT 4
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: LD_INT 1
54942: NEG
54943: PUSH
54944: LD_INT 3
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: LD_INT 1
54953: NEG
54954: PUSH
54955: LD_INT 2
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 2
54964: PUSH
54965: LD_INT 4
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 2
54974: NEG
54975: PUSH
54976: LD_INT 2
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 4
54985: NEG
54986: PUSH
54987: LD_INT 0
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: LD_INT 4
54996: NEG
54997: PUSH
54998: LD_INT 1
55000: NEG
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 3
55008: NEG
55009: PUSH
55010: LD_INT 0
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 3
55019: NEG
55020: PUSH
55021: LD_INT 1
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: PUSH
55028: LD_INT 4
55030: NEG
55031: PUSH
55032: LD_INT 1
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: LD_INT 5
55041: NEG
55042: PUSH
55043: LD_INT 0
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: LD_INT 5
55052: NEG
55053: PUSH
55054: LD_INT 1
55056: NEG
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: PUSH
55062: LD_INT 5
55064: NEG
55065: PUSH
55066: LD_INT 2
55068: NEG
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 3
55076: NEG
55077: PUSH
55078: LD_INT 2
55080: PUSH
55081: EMPTY
55082: LIST
55083: LIST
55084: PUSH
55085: LD_INT 3
55087: NEG
55088: PUSH
55089: LD_INT 3
55091: NEG
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 3
55099: NEG
55100: PUSH
55101: LD_INT 4
55103: NEG
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: LD_INT 2
55111: NEG
55112: PUSH
55113: LD_INT 3
55115: NEG
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 2
55123: NEG
55124: PUSH
55125: LD_INT 2
55127: NEG
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 3
55135: NEG
55136: PUSH
55137: LD_INT 2
55139: NEG
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 4
55147: NEG
55148: PUSH
55149: LD_INT 3
55151: NEG
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: PUSH
55157: LD_INT 4
55159: NEG
55160: PUSH
55161: LD_INT 4
55163: NEG
55164: PUSH
55165: EMPTY
55166: LIST
55167: LIST
55168: PUSH
55169: LD_INT 2
55171: NEG
55172: PUSH
55173: LD_INT 4
55175: NEG
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: PUSH
55181: LD_INT 4
55183: NEG
55184: PUSH
55185: LD_INT 2
55187: NEG
55188: PUSH
55189: EMPTY
55190: LIST
55191: LIST
55192: PUSH
55193: LD_INT 0
55195: PUSH
55196: LD_INT 4
55198: NEG
55199: PUSH
55200: EMPTY
55201: LIST
55202: LIST
55203: PUSH
55204: LD_INT 0
55206: PUSH
55207: LD_INT 5
55209: NEG
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: LD_INT 1
55217: PUSH
55218: LD_INT 4
55220: NEG
55221: PUSH
55222: EMPTY
55223: LIST
55224: LIST
55225: PUSH
55226: LD_INT 1
55228: PUSH
55229: LD_INT 3
55231: NEG
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: PUSH
55237: LD_INT 0
55239: PUSH
55240: LD_INT 3
55242: NEG
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: LD_INT 1
55250: NEG
55251: PUSH
55252: LD_INT 4
55254: NEG
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 1
55262: NEG
55263: PUSH
55264: LD_INT 5
55266: NEG
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: LD_INT 2
55274: PUSH
55275: LD_INT 3
55277: NEG
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 2
55285: NEG
55286: PUSH
55287: LD_INT 5
55289: NEG
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: LIST
55299: LIST
55300: LIST
55301: LIST
55302: LIST
55303: LIST
55304: LIST
55305: LIST
55306: LIST
55307: LIST
55308: LIST
55309: LIST
55310: LIST
55311: LIST
55312: LIST
55313: LIST
55314: LIST
55315: LIST
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
55342: LD_ADDR_VAR 0 31
55346: PUSH
55347: LD_INT 0
55349: PUSH
55350: LD_INT 4
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 0
55359: PUSH
55360: LD_INT 3
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 1
55369: PUSH
55370: LD_INT 4
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 1
55379: PUSH
55380: LD_INT 5
55382: PUSH
55383: EMPTY
55384: LIST
55385: LIST
55386: PUSH
55387: LD_INT 0
55389: PUSH
55390: LD_INT 5
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 1
55399: NEG
55400: PUSH
55401: LD_INT 4
55403: PUSH
55404: EMPTY
55405: LIST
55406: LIST
55407: PUSH
55408: LD_INT 1
55410: NEG
55411: PUSH
55412: LD_INT 3
55414: PUSH
55415: EMPTY
55416: LIST
55417: LIST
55418: PUSH
55419: LD_INT 2
55421: PUSH
55422: LD_INT 5
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: PUSH
55429: LD_INT 2
55431: NEG
55432: PUSH
55433: LD_INT 3
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_INT 3
55442: NEG
55443: PUSH
55444: LD_INT 0
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 3
55453: NEG
55454: PUSH
55455: LD_INT 1
55457: NEG
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 2
55465: NEG
55466: PUSH
55467: LD_INT 0
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: LD_INT 2
55476: NEG
55477: PUSH
55478: LD_INT 1
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 3
55487: NEG
55488: PUSH
55489: LD_INT 1
55491: PUSH
55492: EMPTY
55493: LIST
55494: LIST
55495: PUSH
55496: LD_INT 4
55498: NEG
55499: PUSH
55500: LD_INT 0
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: PUSH
55507: LD_INT 4
55509: NEG
55510: PUSH
55511: LD_INT 1
55513: NEG
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: PUSH
55519: LD_INT 4
55521: NEG
55522: PUSH
55523: LD_INT 2
55525: NEG
55526: PUSH
55527: EMPTY
55528: LIST
55529: LIST
55530: PUSH
55531: LD_INT 2
55533: NEG
55534: PUSH
55535: LD_INT 2
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 4
55544: NEG
55545: PUSH
55546: LD_INT 4
55548: NEG
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: PUSH
55554: LD_INT 4
55556: NEG
55557: PUSH
55558: LD_INT 5
55560: NEG
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: PUSH
55566: LD_INT 3
55568: NEG
55569: PUSH
55570: LD_INT 4
55572: NEG
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 3
55580: NEG
55581: PUSH
55582: LD_INT 3
55584: NEG
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 4
55592: NEG
55593: PUSH
55594: LD_INT 3
55596: NEG
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 5
55604: NEG
55605: PUSH
55606: LD_INT 4
55608: NEG
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 5
55616: NEG
55617: PUSH
55618: LD_INT 5
55620: NEG
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 3
55628: NEG
55629: PUSH
55630: LD_INT 5
55632: NEG
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: LD_INT 5
55640: NEG
55641: PUSH
55642: LD_INT 3
55644: NEG
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 0
55652: PUSH
55653: LD_INT 3
55655: NEG
55656: PUSH
55657: EMPTY
55658: LIST
55659: LIST
55660: PUSH
55661: LD_INT 0
55663: PUSH
55664: LD_INT 4
55666: NEG
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: PUSH
55672: LD_INT 1
55674: PUSH
55675: LD_INT 3
55677: NEG
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: PUSH
55683: LD_INT 1
55685: PUSH
55686: LD_INT 2
55688: NEG
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 0
55696: PUSH
55697: LD_INT 2
55699: NEG
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 1
55707: NEG
55708: PUSH
55709: LD_INT 3
55711: NEG
55712: PUSH
55713: EMPTY
55714: LIST
55715: LIST
55716: PUSH
55717: LD_INT 1
55719: NEG
55720: PUSH
55721: LD_INT 4
55723: NEG
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 2
55731: PUSH
55732: LD_INT 2
55734: NEG
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: PUSH
55740: LD_INT 2
55742: NEG
55743: PUSH
55744: LD_INT 4
55746: NEG
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 4
55754: PUSH
55755: LD_INT 0
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 4
55764: PUSH
55765: LD_INT 1
55767: NEG
55768: PUSH
55769: EMPTY
55770: LIST
55771: LIST
55772: PUSH
55773: LD_INT 5
55775: PUSH
55776: LD_INT 0
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: LD_INT 5
55785: PUSH
55786: LD_INT 1
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: LD_INT 4
55795: PUSH
55796: LD_INT 1
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 3
55805: PUSH
55806: LD_INT 0
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 3
55815: PUSH
55816: LD_INT 1
55818: NEG
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PUSH
55824: LD_INT 3
55826: PUSH
55827: LD_INT 2
55829: NEG
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: PUSH
55835: LD_INT 5
55837: PUSH
55838: LD_INT 2
55840: PUSH
55841: EMPTY
55842: LIST
55843: LIST
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
55892: LD_ADDR_VAR 0 32
55896: PUSH
55897: LD_INT 4
55899: NEG
55900: PUSH
55901: LD_INT 0
55903: PUSH
55904: EMPTY
55905: LIST
55906: LIST
55907: PUSH
55908: LD_INT 4
55910: NEG
55911: PUSH
55912: LD_INT 1
55914: NEG
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: LD_INT 3
55922: NEG
55923: PUSH
55924: LD_INT 0
55926: PUSH
55927: EMPTY
55928: LIST
55929: LIST
55930: PUSH
55931: LD_INT 3
55933: NEG
55934: PUSH
55935: LD_INT 1
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 4
55944: NEG
55945: PUSH
55946: LD_INT 1
55948: PUSH
55949: EMPTY
55950: LIST
55951: LIST
55952: PUSH
55953: LD_INT 5
55955: NEG
55956: PUSH
55957: LD_INT 0
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 5
55966: NEG
55967: PUSH
55968: LD_INT 1
55970: NEG
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: PUSH
55976: LD_INT 5
55978: NEG
55979: PUSH
55980: LD_INT 2
55982: NEG
55983: PUSH
55984: EMPTY
55985: LIST
55986: LIST
55987: PUSH
55988: LD_INT 3
55990: NEG
55991: PUSH
55992: LD_INT 2
55994: PUSH
55995: EMPTY
55996: LIST
55997: LIST
55998: PUSH
55999: LD_INT 3
56001: NEG
56002: PUSH
56003: LD_INT 3
56005: NEG
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 3
56013: NEG
56014: PUSH
56015: LD_INT 4
56017: NEG
56018: PUSH
56019: EMPTY
56020: LIST
56021: LIST
56022: PUSH
56023: LD_INT 2
56025: NEG
56026: PUSH
56027: LD_INT 3
56029: NEG
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 2
56037: NEG
56038: PUSH
56039: LD_INT 2
56041: NEG
56042: PUSH
56043: EMPTY
56044: LIST
56045: LIST
56046: PUSH
56047: LD_INT 3
56049: NEG
56050: PUSH
56051: LD_INT 2
56053: NEG
56054: PUSH
56055: EMPTY
56056: LIST
56057: LIST
56058: PUSH
56059: LD_INT 4
56061: NEG
56062: PUSH
56063: LD_INT 3
56065: NEG
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 4
56073: NEG
56074: PUSH
56075: LD_INT 4
56077: NEG
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: LD_INT 2
56085: NEG
56086: PUSH
56087: LD_INT 4
56089: NEG
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 4
56097: NEG
56098: PUSH
56099: LD_INT 2
56101: NEG
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 0
56109: PUSH
56110: LD_INT 4
56112: NEG
56113: PUSH
56114: EMPTY
56115: LIST
56116: LIST
56117: PUSH
56118: LD_INT 0
56120: PUSH
56121: LD_INT 5
56123: NEG
56124: PUSH
56125: EMPTY
56126: LIST
56127: LIST
56128: PUSH
56129: LD_INT 1
56131: PUSH
56132: LD_INT 4
56134: NEG
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 1
56142: PUSH
56143: LD_INT 3
56145: NEG
56146: PUSH
56147: EMPTY
56148: LIST
56149: LIST
56150: PUSH
56151: LD_INT 0
56153: PUSH
56154: LD_INT 3
56156: NEG
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 1
56164: NEG
56165: PUSH
56166: LD_INT 4
56168: NEG
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 1
56176: NEG
56177: PUSH
56178: LD_INT 5
56180: NEG
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: PUSH
56186: LD_INT 2
56188: PUSH
56189: LD_INT 3
56191: NEG
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: PUSH
56197: LD_INT 2
56199: NEG
56200: PUSH
56201: LD_INT 5
56203: NEG
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: PUSH
56209: LD_INT 3
56211: PUSH
56212: LD_INT 0
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PUSH
56219: LD_INT 3
56221: PUSH
56222: LD_INT 1
56224: NEG
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 4
56232: PUSH
56233: LD_INT 0
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PUSH
56240: LD_INT 4
56242: PUSH
56243: LD_INT 1
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: PUSH
56250: LD_INT 3
56252: PUSH
56253: LD_INT 1
56255: PUSH
56256: EMPTY
56257: LIST
56258: LIST
56259: PUSH
56260: LD_INT 2
56262: PUSH
56263: LD_INT 0
56265: PUSH
56266: EMPTY
56267: LIST
56268: LIST
56269: PUSH
56270: LD_INT 2
56272: PUSH
56273: LD_INT 1
56275: NEG
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: PUSH
56281: LD_INT 2
56283: PUSH
56284: LD_INT 2
56286: NEG
56287: PUSH
56288: EMPTY
56289: LIST
56290: LIST
56291: PUSH
56292: LD_INT 4
56294: PUSH
56295: LD_INT 2
56297: PUSH
56298: EMPTY
56299: LIST
56300: LIST
56301: PUSH
56302: LD_INT 4
56304: PUSH
56305: LD_INT 4
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: PUSH
56312: LD_INT 4
56314: PUSH
56315: LD_INT 3
56317: PUSH
56318: EMPTY
56319: LIST
56320: LIST
56321: PUSH
56322: LD_INT 5
56324: PUSH
56325: LD_INT 4
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 5
56334: PUSH
56335: LD_INT 5
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 4
56344: PUSH
56345: LD_INT 5
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: PUSH
56352: LD_INT 3
56354: PUSH
56355: LD_INT 4
56357: PUSH
56358: EMPTY
56359: LIST
56360: LIST
56361: PUSH
56362: LD_INT 3
56364: PUSH
56365: LD_INT 3
56367: PUSH
56368: EMPTY
56369: LIST
56370: LIST
56371: PUSH
56372: LD_INT 5
56374: PUSH
56375: LD_INT 3
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: PUSH
56382: LD_INT 3
56384: PUSH
56385: LD_INT 5
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: LIST
56396: LIST
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: LIST
56405: LIST
56406: LIST
56407: LIST
56408: LIST
56409: LIST
56410: LIST
56411: LIST
56412: LIST
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
56439: LD_ADDR_VAR 0 33
56443: PUSH
56444: LD_INT 4
56446: NEG
56447: PUSH
56448: LD_INT 4
56450: NEG
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: PUSH
56456: LD_INT 4
56458: NEG
56459: PUSH
56460: LD_INT 5
56462: NEG
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 3
56470: NEG
56471: PUSH
56472: LD_INT 4
56474: NEG
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 3
56482: NEG
56483: PUSH
56484: LD_INT 3
56486: NEG
56487: PUSH
56488: EMPTY
56489: LIST
56490: LIST
56491: PUSH
56492: LD_INT 4
56494: NEG
56495: PUSH
56496: LD_INT 3
56498: NEG
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: PUSH
56504: LD_INT 5
56506: NEG
56507: PUSH
56508: LD_INT 4
56510: NEG
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 5
56518: NEG
56519: PUSH
56520: LD_INT 5
56522: NEG
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 3
56530: NEG
56531: PUSH
56532: LD_INT 5
56534: NEG
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: LD_INT 5
56542: NEG
56543: PUSH
56544: LD_INT 3
56546: NEG
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_INT 0
56554: PUSH
56555: LD_INT 3
56557: NEG
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: PUSH
56563: LD_INT 0
56565: PUSH
56566: LD_INT 4
56568: NEG
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: LD_INT 1
56576: PUSH
56577: LD_INT 3
56579: NEG
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 1
56587: PUSH
56588: LD_INT 2
56590: NEG
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 0
56598: PUSH
56599: LD_INT 2
56601: NEG
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 1
56609: NEG
56610: PUSH
56611: LD_INT 3
56613: NEG
56614: PUSH
56615: EMPTY
56616: LIST
56617: LIST
56618: PUSH
56619: LD_INT 1
56621: NEG
56622: PUSH
56623: LD_INT 4
56625: NEG
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 2
56633: PUSH
56634: LD_INT 2
56636: NEG
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 2
56644: NEG
56645: PUSH
56646: LD_INT 4
56648: NEG
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: PUSH
56654: LD_INT 4
56656: PUSH
56657: LD_INT 0
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: PUSH
56664: LD_INT 4
56666: PUSH
56667: LD_INT 1
56669: NEG
56670: PUSH
56671: EMPTY
56672: LIST
56673: LIST
56674: PUSH
56675: LD_INT 5
56677: PUSH
56678: LD_INT 0
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 5
56687: PUSH
56688: LD_INT 1
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 4
56697: PUSH
56698: LD_INT 1
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: LD_INT 3
56707: PUSH
56708: LD_INT 0
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 3
56717: PUSH
56718: LD_INT 1
56720: NEG
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 3
56728: PUSH
56729: LD_INT 2
56731: NEG
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: PUSH
56737: LD_INT 5
56739: PUSH
56740: LD_INT 2
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: PUSH
56747: LD_INT 3
56749: PUSH
56750: LD_INT 3
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PUSH
56757: LD_INT 3
56759: PUSH
56760: LD_INT 2
56762: PUSH
56763: EMPTY
56764: LIST
56765: LIST
56766: PUSH
56767: LD_INT 4
56769: PUSH
56770: LD_INT 3
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: LD_INT 4
56779: PUSH
56780: LD_INT 4
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: PUSH
56787: LD_INT 3
56789: PUSH
56790: LD_INT 4
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: PUSH
56797: LD_INT 2
56799: PUSH
56800: LD_INT 3
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: LD_INT 2
56809: PUSH
56810: LD_INT 2
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 4
56819: PUSH
56820: LD_INT 2
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 2
56829: PUSH
56830: LD_INT 4
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_INT 0
56839: PUSH
56840: LD_INT 4
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: PUSH
56847: LD_INT 0
56849: PUSH
56850: LD_INT 3
56852: PUSH
56853: EMPTY
56854: LIST
56855: LIST
56856: PUSH
56857: LD_INT 1
56859: PUSH
56860: LD_INT 4
56862: PUSH
56863: EMPTY
56864: LIST
56865: LIST
56866: PUSH
56867: LD_INT 1
56869: PUSH
56870: LD_INT 5
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: PUSH
56877: LD_INT 0
56879: PUSH
56880: LD_INT 5
56882: PUSH
56883: EMPTY
56884: LIST
56885: LIST
56886: PUSH
56887: LD_INT 1
56889: NEG
56890: PUSH
56891: LD_INT 4
56893: PUSH
56894: EMPTY
56895: LIST
56896: LIST
56897: PUSH
56898: LD_INT 1
56900: NEG
56901: PUSH
56902: LD_INT 3
56904: PUSH
56905: EMPTY
56906: LIST
56907: LIST
56908: PUSH
56909: LD_INT 2
56911: PUSH
56912: LD_INT 5
56914: PUSH
56915: EMPTY
56916: LIST
56917: LIST
56918: PUSH
56919: LD_INT 2
56921: NEG
56922: PUSH
56923: LD_INT 3
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: EMPTY
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: LIST
56947: LIST
56948: LIST
56949: LIST
56950: LIST
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: LIST
56961: LIST
56962: LIST
56963: LIST
56964: LIST
56965: LIST
56966: LIST
56967: LIST
56968: LIST
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
56977: LD_ADDR_VAR 0 34
56981: PUSH
56982: LD_INT 0
56984: PUSH
56985: LD_INT 4
56987: NEG
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PUSH
56993: LD_INT 0
56995: PUSH
56996: LD_INT 5
56998: NEG
56999: PUSH
57000: EMPTY
57001: LIST
57002: LIST
57003: PUSH
57004: LD_INT 1
57006: PUSH
57007: LD_INT 4
57009: NEG
57010: PUSH
57011: EMPTY
57012: LIST
57013: LIST
57014: PUSH
57015: LD_INT 1
57017: PUSH
57018: LD_INT 3
57020: NEG
57021: PUSH
57022: EMPTY
57023: LIST
57024: LIST
57025: PUSH
57026: LD_INT 0
57028: PUSH
57029: LD_INT 3
57031: NEG
57032: PUSH
57033: EMPTY
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 1
57039: NEG
57040: PUSH
57041: LD_INT 4
57043: NEG
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: LD_INT 1
57051: NEG
57052: PUSH
57053: LD_INT 5
57055: NEG
57056: PUSH
57057: EMPTY
57058: LIST
57059: LIST
57060: PUSH
57061: LD_INT 2
57063: PUSH
57064: LD_INT 3
57066: NEG
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: PUSH
57072: LD_INT 2
57074: NEG
57075: PUSH
57076: LD_INT 5
57078: NEG
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: PUSH
57084: LD_INT 3
57086: PUSH
57087: LD_INT 0
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: LD_INT 3
57096: PUSH
57097: LD_INT 1
57099: NEG
57100: PUSH
57101: EMPTY
57102: LIST
57103: LIST
57104: PUSH
57105: LD_INT 4
57107: PUSH
57108: LD_INT 0
57110: PUSH
57111: EMPTY
57112: LIST
57113: LIST
57114: PUSH
57115: LD_INT 4
57117: PUSH
57118: LD_INT 1
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: PUSH
57125: LD_INT 3
57127: PUSH
57128: LD_INT 1
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: LD_INT 2
57137: PUSH
57138: LD_INT 0
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PUSH
57145: LD_INT 2
57147: PUSH
57148: LD_INT 1
57150: NEG
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: LD_INT 2
57158: PUSH
57159: LD_INT 2
57161: NEG
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: LD_INT 4
57169: PUSH
57170: LD_INT 2
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PUSH
57177: LD_INT 4
57179: PUSH
57180: LD_INT 4
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 4
57189: PUSH
57190: LD_INT 3
57192: PUSH
57193: EMPTY
57194: LIST
57195: LIST
57196: PUSH
57197: LD_INT 5
57199: PUSH
57200: LD_INT 4
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 5
57209: PUSH
57210: LD_INT 5
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 4
57219: PUSH
57220: LD_INT 5
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PUSH
57227: LD_INT 3
57229: PUSH
57230: LD_INT 4
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: LD_INT 3
57239: PUSH
57240: LD_INT 3
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: LD_INT 5
57249: PUSH
57250: LD_INT 3
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: PUSH
57257: LD_INT 3
57259: PUSH
57260: LD_INT 5
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 0
57269: PUSH
57270: LD_INT 3
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: LD_INT 0
57279: PUSH
57280: LD_INT 2
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: LD_INT 1
57289: PUSH
57290: LD_INT 3
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 1
57299: PUSH
57300: LD_INT 4
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 0
57309: PUSH
57310: LD_INT 4
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 1
57319: NEG
57320: PUSH
57321: LD_INT 3
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 1
57330: NEG
57331: PUSH
57332: LD_INT 2
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: LD_INT 2
57341: PUSH
57342: LD_INT 4
57344: PUSH
57345: EMPTY
57346: LIST
57347: LIST
57348: PUSH
57349: LD_INT 2
57351: NEG
57352: PUSH
57353: LD_INT 2
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: LD_INT 4
57362: NEG
57363: PUSH
57364: LD_INT 0
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: PUSH
57371: LD_INT 4
57373: NEG
57374: PUSH
57375: LD_INT 1
57377: NEG
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 3
57385: NEG
57386: PUSH
57387: LD_INT 0
57389: PUSH
57390: EMPTY
57391: LIST
57392: LIST
57393: PUSH
57394: LD_INT 3
57396: NEG
57397: PUSH
57398: LD_INT 1
57400: PUSH
57401: EMPTY
57402: LIST
57403: LIST
57404: PUSH
57405: LD_INT 4
57407: NEG
57408: PUSH
57409: LD_INT 1
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: PUSH
57416: LD_INT 5
57418: NEG
57419: PUSH
57420: LD_INT 0
57422: PUSH
57423: EMPTY
57424: LIST
57425: LIST
57426: PUSH
57427: LD_INT 5
57429: NEG
57430: PUSH
57431: LD_INT 1
57433: NEG
57434: PUSH
57435: EMPTY
57436: LIST
57437: LIST
57438: PUSH
57439: LD_INT 5
57441: NEG
57442: PUSH
57443: LD_INT 2
57445: NEG
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 3
57453: NEG
57454: PUSH
57455: LD_INT 2
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: EMPTY
57463: LIST
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: LIST
57487: LIST
57488: LIST
57489: LIST
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: LIST
57495: LIST
57496: LIST
57497: LIST
57498: LIST
57499: LIST
57500: LIST
57501: LIST
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: LIST
57507: LIST
57508: ST_TO_ADDR
// end ; end ;
57509: GO 57512
57511: POP
// case btype of b_depot , b_warehouse :
57512: LD_VAR 0 1
57516: PUSH
57517: LD_INT 0
57519: DOUBLE
57520: EQUAL
57521: IFTRUE 57531
57523: LD_INT 1
57525: DOUBLE
57526: EQUAL
57527: IFTRUE 57531
57529: GO 57732
57531: POP
// case nation of nation_american :
57532: LD_VAR 0 5
57536: PUSH
57537: LD_INT 1
57539: DOUBLE
57540: EQUAL
57541: IFTRUE 57545
57543: GO 57601
57545: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
57546: LD_ADDR_VAR 0 9
57550: PUSH
57551: LD_VAR 0 11
57555: PUSH
57556: LD_VAR 0 12
57560: PUSH
57561: LD_VAR 0 13
57565: PUSH
57566: LD_VAR 0 14
57570: PUSH
57571: LD_VAR 0 15
57575: PUSH
57576: LD_VAR 0 16
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: LIST
57585: LIST
57586: LIST
57587: LIST
57588: PUSH
57589: LD_VAR 0 4
57593: PUSH
57594: LD_INT 1
57596: PLUS
57597: ARRAY
57598: ST_TO_ADDR
57599: GO 57730
57601: LD_INT 2
57603: DOUBLE
57604: EQUAL
57605: IFTRUE 57609
57607: GO 57665
57609: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
57610: LD_ADDR_VAR 0 9
57614: PUSH
57615: LD_VAR 0 17
57619: PUSH
57620: LD_VAR 0 18
57624: PUSH
57625: LD_VAR 0 19
57629: PUSH
57630: LD_VAR 0 20
57634: PUSH
57635: LD_VAR 0 21
57639: PUSH
57640: LD_VAR 0 22
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: PUSH
57653: LD_VAR 0 4
57657: PUSH
57658: LD_INT 1
57660: PLUS
57661: ARRAY
57662: ST_TO_ADDR
57663: GO 57730
57665: LD_INT 3
57667: DOUBLE
57668: EQUAL
57669: IFTRUE 57673
57671: GO 57729
57673: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
57674: LD_ADDR_VAR 0 9
57678: PUSH
57679: LD_VAR 0 23
57683: PUSH
57684: LD_VAR 0 24
57688: PUSH
57689: LD_VAR 0 25
57693: PUSH
57694: LD_VAR 0 26
57698: PUSH
57699: LD_VAR 0 27
57703: PUSH
57704: LD_VAR 0 28
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: LIST
57713: LIST
57714: LIST
57715: LIST
57716: PUSH
57717: LD_VAR 0 4
57721: PUSH
57722: LD_INT 1
57724: PLUS
57725: ARRAY
57726: ST_TO_ADDR
57727: GO 57730
57729: POP
57730: GO 58285
57732: LD_INT 2
57734: DOUBLE
57735: EQUAL
57736: IFTRUE 57746
57738: LD_INT 3
57740: DOUBLE
57741: EQUAL
57742: IFTRUE 57746
57744: GO 57802
57746: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
57747: LD_ADDR_VAR 0 9
57751: PUSH
57752: LD_VAR 0 29
57756: PUSH
57757: LD_VAR 0 30
57761: PUSH
57762: LD_VAR 0 31
57766: PUSH
57767: LD_VAR 0 32
57771: PUSH
57772: LD_VAR 0 33
57776: PUSH
57777: LD_VAR 0 34
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: LIST
57786: LIST
57787: LIST
57788: LIST
57789: PUSH
57790: LD_VAR 0 4
57794: PUSH
57795: LD_INT 1
57797: PLUS
57798: ARRAY
57799: ST_TO_ADDR
57800: GO 58285
57802: LD_INT 16
57804: DOUBLE
57805: EQUAL
57806: IFTRUE 57864
57808: LD_INT 17
57810: DOUBLE
57811: EQUAL
57812: IFTRUE 57864
57814: LD_INT 18
57816: DOUBLE
57817: EQUAL
57818: IFTRUE 57864
57820: LD_INT 19
57822: DOUBLE
57823: EQUAL
57824: IFTRUE 57864
57826: LD_INT 22
57828: DOUBLE
57829: EQUAL
57830: IFTRUE 57864
57832: LD_INT 20
57834: DOUBLE
57835: EQUAL
57836: IFTRUE 57864
57838: LD_INT 21
57840: DOUBLE
57841: EQUAL
57842: IFTRUE 57864
57844: LD_INT 23
57846: DOUBLE
57847: EQUAL
57848: IFTRUE 57864
57850: LD_INT 24
57852: DOUBLE
57853: EQUAL
57854: IFTRUE 57864
57856: LD_INT 25
57858: DOUBLE
57859: EQUAL
57860: IFTRUE 57864
57862: GO 57920
57864: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
57865: LD_ADDR_VAR 0 9
57869: PUSH
57870: LD_VAR 0 35
57874: PUSH
57875: LD_VAR 0 36
57879: PUSH
57880: LD_VAR 0 37
57884: PUSH
57885: LD_VAR 0 38
57889: PUSH
57890: LD_VAR 0 39
57894: PUSH
57895: LD_VAR 0 40
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: LIST
57904: LIST
57905: LIST
57906: LIST
57907: PUSH
57908: LD_VAR 0 4
57912: PUSH
57913: LD_INT 1
57915: PLUS
57916: ARRAY
57917: ST_TO_ADDR
57918: GO 58285
57920: LD_INT 6
57922: DOUBLE
57923: EQUAL
57924: IFTRUE 57976
57926: LD_INT 7
57928: DOUBLE
57929: EQUAL
57930: IFTRUE 57976
57932: LD_INT 8
57934: DOUBLE
57935: EQUAL
57936: IFTRUE 57976
57938: LD_INT 13
57940: DOUBLE
57941: EQUAL
57942: IFTRUE 57976
57944: LD_INT 12
57946: DOUBLE
57947: EQUAL
57948: IFTRUE 57976
57950: LD_INT 15
57952: DOUBLE
57953: EQUAL
57954: IFTRUE 57976
57956: LD_INT 11
57958: DOUBLE
57959: EQUAL
57960: IFTRUE 57976
57962: LD_INT 14
57964: DOUBLE
57965: EQUAL
57966: IFTRUE 57976
57968: LD_INT 10
57970: DOUBLE
57971: EQUAL
57972: IFTRUE 57976
57974: GO 58032
57976: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
57977: LD_ADDR_VAR 0 9
57981: PUSH
57982: LD_VAR 0 41
57986: PUSH
57987: LD_VAR 0 42
57991: PUSH
57992: LD_VAR 0 43
57996: PUSH
57997: LD_VAR 0 44
58001: PUSH
58002: LD_VAR 0 45
58006: PUSH
58007: LD_VAR 0 46
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: LIST
58016: LIST
58017: LIST
58018: LIST
58019: PUSH
58020: LD_VAR 0 4
58024: PUSH
58025: LD_INT 1
58027: PLUS
58028: ARRAY
58029: ST_TO_ADDR
58030: GO 58285
58032: LD_INT 36
58034: DOUBLE
58035: EQUAL
58036: IFTRUE 58040
58038: GO 58096
58040: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
58041: LD_ADDR_VAR 0 9
58045: PUSH
58046: LD_VAR 0 47
58050: PUSH
58051: LD_VAR 0 48
58055: PUSH
58056: LD_VAR 0 49
58060: PUSH
58061: LD_VAR 0 50
58065: PUSH
58066: LD_VAR 0 51
58070: PUSH
58071: LD_VAR 0 52
58075: PUSH
58076: EMPTY
58077: LIST
58078: LIST
58079: LIST
58080: LIST
58081: LIST
58082: LIST
58083: PUSH
58084: LD_VAR 0 4
58088: PUSH
58089: LD_INT 1
58091: PLUS
58092: ARRAY
58093: ST_TO_ADDR
58094: GO 58285
58096: LD_INT 4
58098: DOUBLE
58099: EQUAL
58100: IFTRUE 58122
58102: LD_INT 5
58104: DOUBLE
58105: EQUAL
58106: IFTRUE 58122
58108: LD_INT 34
58110: DOUBLE
58111: EQUAL
58112: IFTRUE 58122
58114: LD_INT 37
58116: DOUBLE
58117: EQUAL
58118: IFTRUE 58122
58120: GO 58178
58122: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
58123: LD_ADDR_VAR 0 9
58127: PUSH
58128: LD_VAR 0 53
58132: PUSH
58133: LD_VAR 0 54
58137: PUSH
58138: LD_VAR 0 55
58142: PUSH
58143: LD_VAR 0 56
58147: PUSH
58148: LD_VAR 0 57
58152: PUSH
58153: LD_VAR 0 58
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: LIST
58162: LIST
58163: LIST
58164: LIST
58165: PUSH
58166: LD_VAR 0 4
58170: PUSH
58171: LD_INT 1
58173: PLUS
58174: ARRAY
58175: ST_TO_ADDR
58176: GO 58285
58178: LD_INT 31
58180: DOUBLE
58181: EQUAL
58182: IFTRUE 58228
58184: LD_INT 32
58186: DOUBLE
58187: EQUAL
58188: IFTRUE 58228
58190: LD_INT 33
58192: DOUBLE
58193: EQUAL
58194: IFTRUE 58228
58196: LD_INT 27
58198: DOUBLE
58199: EQUAL
58200: IFTRUE 58228
58202: LD_INT 26
58204: DOUBLE
58205: EQUAL
58206: IFTRUE 58228
58208: LD_INT 28
58210: DOUBLE
58211: EQUAL
58212: IFTRUE 58228
58214: LD_INT 29
58216: DOUBLE
58217: EQUAL
58218: IFTRUE 58228
58220: LD_INT 30
58222: DOUBLE
58223: EQUAL
58224: IFTRUE 58228
58226: GO 58284
58228: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
58229: LD_ADDR_VAR 0 9
58233: PUSH
58234: LD_VAR 0 59
58238: PUSH
58239: LD_VAR 0 60
58243: PUSH
58244: LD_VAR 0 61
58248: PUSH
58249: LD_VAR 0 62
58253: PUSH
58254: LD_VAR 0 63
58258: PUSH
58259: LD_VAR 0 64
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: LIST
58268: LIST
58269: LIST
58270: LIST
58271: PUSH
58272: LD_VAR 0 4
58276: PUSH
58277: LD_INT 1
58279: PLUS
58280: ARRAY
58281: ST_TO_ADDR
58282: GO 58285
58284: POP
// temp_list2 = [ ] ;
58285: LD_ADDR_VAR 0 10
58289: PUSH
58290: EMPTY
58291: ST_TO_ADDR
// for i in temp_list do
58292: LD_ADDR_VAR 0 8
58296: PUSH
58297: LD_VAR 0 9
58301: PUSH
58302: FOR_IN
58303: IFFALSE 58355
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
58305: LD_ADDR_VAR 0 10
58309: PUSH
58310: LD_VAR 0 10
58314: PUSH
58315: LD_VAR 0 8
58319: PUSH
58320: LD_INT 1
58322: ARRAY
58323: PUSH
58324: LD_VAR 0 2
58328: PLUS
58329: PUSH
58330: LD_VAR 0 8
58334: PUSH
58335: LD_INT 2
58337: ARRAY
58338: PUSH
58339: LD_VAR 0 3
58343: PLUS
58344: PUSH
58345: EMPTY
58346: LIST
58347: LIST
58348: PUSH
58349: EMPTY
58350: LIST
58351: ADD
58352: ST_TO_ADDR
58353: GO 58302
58355: POP
58356: POP
// result = temp_list2 ;
58357: LD_ADDR_VAR 0 7
58361: PUSH
58362: LD_VAR 0 10
58366: ST_TO_ADDR
// end ;
58367: LD_VAR 0 7
58371: RET
// export function EnemyInRange ( unit , dist ) ; begin
58372: LD_INT 0
58374: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
58375: LD_ADDR_VAR 0 3
58379: PUSH
58380: LD_VAR 0 1
58384: PPUSH
58385: CALL_OW 255
58389: PPUSH
58390: LD_VAR 0 1
58394: PPUSH
58395: CALL_OW 250
58399: PPUSH
58400: LD_VAR 0 1
58404: PPUSH
58405: CALL_OW 251
58409: PPUSH
58410: LD_VAR 0 2
58414: PPUSH
58415: CALL 32476 0 4
58419: PUSH
58420: LD_INT 4
58422: ARRAY
58423: ST_TO_ADDR
// end ;
58424: LD_VAR 0 3
58428: RET
// export function PlayerSeeMe ( unit ) ; begin
58429: LD_INT 0
58431: PPUSH
// result := See ( your_side , unit ) ;
58432: LD_ADDR_VAR 0 2
58436: PUSH
58437: LD_OWVAR 2
58441: PPUSH
58442: LD_VAR 0 1
58446: PPUSH
58447: CALL_OW 292
58451: ST_TO_ADDR
// end ;
58452: LD_VAR 0 2
58456: RET
// export function ReverseDir ( unit ) ; begin
58457: LD_INT 0
58459: PPUSH
// if not unit then
58460: LD_VAR 0 1
58464: NOT
58465: IFFALSE 58469
// exit ;
58467: GO 58492
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
58469: LD_ADDR_VAR 0 2
58473: PUSH
58474: LD_VAR 0 1
58478: PPUSH
58479: CALL_OW 254
58483: PUSH
58484: LD_INT 3
58486: PLUS
58487: PUSH
58488: LD_INT 6
58490: MOD
58491: ST_TO_ADDR
// end ;
58492: LD_VAR 0 2
58496: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
58497: LD_INT 0
58499: PPUSH
58500: PPUSH
58501: PPUSH
58502: PPUSH
58503: PPUSH
// if not hexes then
58504: LD_VAR 0 2
58508: NOT
58509: IFFALSE 58513
// exit ;
58511: GO 58661
// dist := 9999 ;
58513: LD_ADDR_VAR 0 5
58517: PUSH
58518: LD_INT 9999
58520: ST_TO_ADDR
// for i = 1 to hexes do
58521: LD_ADDR_VAR 0 4
58525: PUSH
58526: DOUBLE
58527: LD_INT 1
58529: DEC
58530: ST_TO_ADDR
58531: LD_VAR 0 2
58535: PUSH
58536: FOR_TO
58537: IFFALSE 58649
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
58539: LD_VAR 0 1
58543: PPUSH
58544: LD_VAR 0 2
58548: PUSH
58549: LD_VAR 0 4
58553: ARRAY
58554: PUSH
58555: LD_INT 1
58557: ARRAY
58558: PPUSH
58559: LD_VAR 0 2
58563: PUSH
58564: LD_VAR 0 4
58568: ARRAY
58569: PUSH
58570: LD_INT 2
58572: ARRAY
58573: PPUSH
58574: CALL_OW 297
58578: PUSH
58579: LD_VAR 0 5
58583: LESS
58584: IFFALSE 58647
// begin hex := hexes [ i ] ;
58586: LD_ADDR_VAR 0 7
58590: PUSH
58591: LD_VAR 0 2
58595: PUSH
58596: LD_VAR 0 4
58600: ARRAY
58601: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58602: LD_ADDR_VAR 0 5
58606: PUSH
58607: LD_VAR 0 1
58611: PPUSH
58612: LD_VAR 0 2
58616: PUSH
58617: LD_VAR 0 4
58621: ARRAY
58622: PUSH
58623: LD_INT 1
58625: ARRAY
58626: PPUSH
58627: LD_VAR 0 2
58631: PUSH
58632: LD_VAR 0 4
58636: ARRAY
58637: PUSH
58638: LD_INT 2
58640: ARRAY
58641: PPUSH
58642: CALL_OW 297
58646: ST_TO_ADDR
// end ; end ;
58647: GO 58536
58649: POP
58650: POP
// result := hex ;
58651: LD_ADDR_VAR 0 3
58655: PUSH
58656: LD_VAR 0 7
58660: ST_TO_ADDR
// end ;
58661: LD_VAR 0 3
58665: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
58666: LD_INT 0
58668: PPUSH
58669: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
58670: LD_VAR 0 1
58674: NOT
58675: PUSH
58676: LD_VAR 0 1
58680: PUSH
58681: LD_INT 21
58683: PUSH
58684: LD_INT 2
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: LD_INT 23
58693: PUSH
58694: LD_INT 2
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: EMPTY
58702: LIST
58703: LIST
58704: PPUSH
58705: CALL_OW 69
58709: IN
58710: NOT
58711: OR
58712: IFFALSE 58716
// exit ;
58714: GO 58763
// for i = 1 to 3 do
58716: LD_ADDR_VAR 0 3
58720: PUSH
58721: DOUBLE
58722: LD_INT 1
58724: DEC
58725: ST_TO_ADDR
58726: LD_INT 3
58728: PUSH
58729: FOR_TO
58730: IFFALSE 58761
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
58732: LD_VAR 0 1
58736: PPUSH
58737: CALL_OW 250
58741: PPUSH
58742: LD_VAR 0 1
58746: PPUSH
58747: CALL_OW 251
58751: PPUSH
58752: LD_INT 1
58754: PPUSH
58755: CALL_OW 453
58759: GO 58729
58761: POP
58762: POP
// end ;
58763: LD_VAR 0 2
58767: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
58768: LD_INT 0
58770: PPUSH
58771: PPUSH
58772: PPUSH
58773: PPUSH
58774: PPUSH
58775: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
58776: LD_VAR 0 1
58780: NOT
58781: PUSH
58782: LD_VAR 0 2
58786: NOT
58787: OR
58788: PUSH
58789: LD_VAR 0 1
58793: PPUSH
58794: CALL_OW 314
58798: OR
58799: IFFALSE 58803
// exit ;
58801: GO 59244
// x := GetX ( enemy_unit ) ;
58803: LD_ADDR_VAR 0 7
58807: PUSH
58808: LD_VAR 0 2
58812: PPUSH
58813: CALL_OW 250
58817: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
58818: LD_ADDR_VAR 0 8
58822: PUSH
58823: LD_VAR 0 2
58827: PPUSH
58828: CALL_OW 251
58832: ST_TO_ADDR
// if not x or not y then
58833: LD_VAR 0 7
58837: NOT
58838: PUSH
58839: LD_VAR 0 8
58843: NOT
58844: OR
58845: IFFALSE 58849
// exit ;
58847: GO 59244
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
58849: LD_ADDR_VAR 0 6
58853: PUSH
58854: LD_VAR 0 7
58858: PPUSH
58859: LD_INT 0
58861: PPUSH
58862: LD_INT 4
58864: PPUSH
58865: CALL_OW 272
58869: PUSH
58870: LD_VAR 0 8
58874: PPUSH
58875: LD_INT 0
58877: PPUSH
58878: LD_INT 4
58880: PPUSH
58881: CALL_OW 273
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: LD_VAR 0 7
58894: PPUSH
58895: LD_INT 1
58897: PPUSH
58898: LD_INT 4
58900: PPUSH
58901: CALL_OW 272
58905: PUSH
58906: LD_VAR 0 8
58910: PPUSH
58911: LD_INT 1
58913: PPUSH
58914: LD_INT 4
58916: PPUSH
58917: CALL_OW 273
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PUSH
58926: LD_VAR 0 7
58930: PPUSH
58931: LD_INT 2
58933: PPUSH
58934: LD_INT 4
58936: PPUSH
58937: CALL_OW 272
58941: PUSH
58942: LD_VAR 0 8
58946: PPUSH
58947: LD_INT 2
58949: PPUSH
58950: LD_INT 4
58952: PPUSH
58953: CALL_OW 273
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: LD_VAR 0 7
58966: PPUSH
58967: LD_INT 3
58969: PPUSH
58970: LD_INT 4
58972: PPUSH
58973: CALL_OW 272
58977: PUSH
58978: LD_VAR 0 8
58982: PPUSH
58983: LD_INT 3
58985: PPUSH
58986: LD_INT 4
58988: PPUSH
58989: CALL_OW 273
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_VAR 0 7
59002: PPUSH
59003: LD_INT 4
59005: PPUSH
59006: LD_INT 4
59008: PPUSH
59009: CALL_OW 272
59013: PUSH
59014: LD_VAR 0 8
59018: PPUSH
59019: LD_INT 4
59021: PPUSH
59022: LD_INT 4
59024: PPUSH
59025: CALL_OW 273
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: PUSH
59034: LD_VAR 0 7
59038: PPUSH
59039: LD_INT 5
59041: PPUSH
59042: LD_INT 4
59044: PPUSH
59045: CALL_OW 272
59049: PUSH
59050: LD_VAR 0 8
59054: PPUSH
59055: LD_INT 5
59057: PPUSH
59058: LD_INT 4
59060: PPUSH
59061: CALL_OW 273
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: LIST
59074: LIST
59075: LIST
59076: LIST
59077: ST_TO_ADDR
// for i = tmp downto 1 do
59078: LD_ADDR_VAR 0 4
59082: PUSH
59083: DOUBLE
59084: LD_VAR 0 6
59088: INC
59089: ST_TO_ADDR
59090: LD_INT 1
59092: PUSH
59093: FOR_DOWNTO
59094: IFFALSE 59195
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
59096: LD_VAR 0 6
59100: PUSH
59101: LD_VAR 0 4
59105: ARRAY
59106: PUSH
59107: LD_INT 1
59109: ARRAY
59110: PPUSH
59111: LD_VAR 0 6
59115: PUSH
59116: LD_VAR 0 4
59120: ARRAY
59121: PUSH
59122: LD_INT 2
59124: ARRAY
59125: PPUSH
59126: CALL_OW 488
59130: NOT
59131: PUSH
59132: LD_VAR 0 6
59136: PUSH
59137: LD_VAR 0 4
59141: ARRAY
59142: PUSH
59143: LD_INT 1
59145: ARRAY
59146: PPUSH
59147: LD_VAR 0 6
59151: PUSH
59152: LD_VAR 0 4
59156: ARRAY
59157: PUSH
59158: LD_INT 2
59160: ARRAY
59161: PPUSH
59162: CALL_OW 428
59166: PUSH
59167: LD_INT 0
59169: NONEQUAL
59170: OR
59171: IFFALSE 59193
// tmp := Delete ( tmp , i ) ;
59173: LD_ADDR_VAR 0 6
59177: PUSH
59178: LD_VAR 0 6
59182: PPUSH
59183: LD_VAR 0 4
59187: PPUSH
59188: CALL_OW 3
59192: ST_TO_ADDR
59193: GO 59093
59195: POP
59196: POP
// j := GetClosestHex ( unit , tmp ) ;
59197: LD_ADDR_VAR 0 5
59201: PUSH
59202: LD_VAR 0 1
59206: PPUSH
59207: LD_VAR 0 6
59211: PPUSH
59212: CALL 58497 0 2
59216: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
59217: LD_VAR 0 1
59221: PPUSH
59222: LD_VAR 0 5
59226: PUSH
59227: LD_INT 1
59229: ARRAY
59230: PPUSH
59231: LD_VAR 0 5
59235: PUSH
59236: LD_INT 2
59238: ARRAY
59239: PPUSH
59240: CALL_OW 111
// end ;
59244: LD_VAR 0 3
59248: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
59249: LD_INT 0
59251: PPUSH
59252: PPUSH
59253: PPUSH
// uc_side = 0 ;
59254: LD_ADDR_OWVAR 20
59258: PUSH
59259: LD_INT 0
59261: ST_TO_ADDR
// uc_nation = 0 ;
59262: LD_ADDR_OWVAR 21
59266: PUSH
59267: LD_INT 0
59269: ST_TO_ADDR
// InitHc ;
59270: CALL_OW 19
// InitVc ;
59274: CALL_OW 20
// if mastodonts then
59278: LD_VAR 0 6
59282: IFFALSE 59349
// for i = 1 to mastodonts do
59284: LD_ADDR_VAR 0 11
59288: PUSH
59289: DOUBLE
59290: LD_INT 1
59292: DEC
59293: ST_TO_ADDR
59294: LD_VAR 0 6
59298: PUSH
59299: FOR_TO
59300: IFFALSE 59347
// begin vc_chassis := 31 ;
59302: LD_ADDR_OWVAR 37
59306: PUSH
59307: LD_INT 31
59309: ST_TO_ADDR
// vc_control := control_rider ;
59310: LD_ADDR_OWVAR 38
59314: PUSH
59315: LD_INT 4
59317: ST_TO_ADDR
// animal := CreateVehicle ;
59318: LD_ADDR_VAR 0 12
59322: PUSH
59323: CALL_OW 45
59327: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59328: LD_VAR 0 12
59332: PPUSH
59333: LD_VAR 0 8
59337: PPUSH
59338: LD_INT 0
59340: PPUSH
59341: CALL 61418 0 3
// end ;
59345: GO 59299
59347: POP
59348: POP
// if horses then
59349: LD_VAR 0 5
59353: IFFALSE 59420
// for i = 1 to horses do
59355: LD_ADDR_VAR 0 11
59359: PUSH
59360: DOUBLE
59361: LD_INT 1
59363: DEC
59364: ST_TO_ADDR
59365: LD_VAR 0 5
59369: PUSH
59370: FOR_TO
59371: IFFALSE 59418
// begin hc_class := 21 ;
59373: LD_ADDR_OWVAR 28
59377: PUSH
59378: LD_INT 21
59380: ST_TO_ADDR
// hc_gallery :=  ;
59381: LD_ADDR_OWVAR 33
59385: PUSH
59386: LD_STRING 
59388: ST_TO_ADDR
// animal := CreateHuman ;
59389: LD_ADDR_VAR 0 12
59393: PUSH
59394: CALL_OW 44
59398: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59399: LD_VAR 0 12
59403: PPUSH
59404: LD_VAR 0 8
59408: PPUSH
59409: LD_INT 0
59411: PPUSH
59412: CALL 61418 0 3
// end ;
59416: GO 59370
59418: POP
59419: POP
// if birds then
59420: LD_VAR 0 1
59424: IFFALSE 59491
// for i = 1 to birds do
59426: LD_ADDR_VAR 0 11
59430: PUSH
59431: DOUBLE
59432: LD_INT 1
59434: DEC
59435: ST_TO_ADDR
59436: LD_VAR 0 1
59440: PUSH
59441: FOR_TO
59442: IFFALSE 59489
// begin hc_class = 18 ;
59444: LD_ADDR_OWVAR 28
59448: PUSH
59449: LD_INT 18
59451: ST_TO_ADDR
// hc_gallery =  ;
59452: LD_ADDR_OWVAR 33
59456: PUSH
59457: LD_STRING 
59459: ST_TO_ADDR
// animal := CreateHuman ;
59460: LD_ADDR_VAR 0 12
59464: PUSH
59465: CALL_OW 44
59469: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59470: LD_VAR 0 12
59474: PPUSH
59475: LD_VAR 0 8
59479: PPUSH
59480: LD_INT 0
59482: PPUSH
59483: CALL 61418 0 3
// end ;
59487: GO 59441
59489: POP
59490: POP
// if tigers then
59491: LD_VAR 0 2
59495: IFFALSE 59579
// for i = 1 to tigers do
59497: LD_ADDR_VAR 0 11
59501: PUSH
59502: DOUBLE
59503: LD_INT 1
59505: DEC
59506: ST_TO_ADDR
59507: LD_VAR 0 2
59511: PUSH
59512: FOR_TO
59513: IFFALSE 59577
// begin hc_class = class_tiger ;
59515: LD_ADDR_OWVAR 28
59519: PUSH
59520: LD_INT 14
59522: ST_TO_ADDR
// hc_gallery =  ;
59523: LD_ADDR_OWVAR 33
59527: PUSH
59528: LD_STRING 
59530: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
59531: LD_ADDR_OWVAR 35
59535: PUSH
59536: LD_INT 7
59538: NEG
59539: PPUSH
59540: LD_INT 7
59542: PPUSH
59543: CALL_OW 12
59547: ST_TO_ADDR
// animal := CreateHuman ;
59548: LD_ADDR_VAR 0 12
59552: PUSH
59553: CALL_OW 44
59557: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59558: LD_VAR 0 12
59562: PPUSH
59563: LD_VAR 0 8
59567: PPUSH
59568: LD_INT 0
59570: PPUSH
59571: CALL 61418 0 3
// end ;
59575: GO 59512
59577: POP
59578: POP
// if apemans then
59579: LD_VAR 0 3
59583: IFFALSE 59706
// for i = 1 to apemans do
59585: LD_ADDR_VAR 0 11
59589: PUSH
59590: DOUBLE
59591: LD_INT 1
59593: DEC
59594: ST_TO_ADDR
59595: LD_VAR 0 3
59599: PUSH
59600: FOR_TO
59601: IFFALSE 59704
// begin hc_class = class_apeman ;
59603: LD_ADDR_OWVAR 28
59607: PUSH
59608: LD_INT 12
59610: ST_TO_ADDR
// hc_gallery =  ;
59611: LD_ADDR_OWVAR 33
59615: PUSH
59616: LD_STRING 
59618: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
59619: LD_ADDR_OWVAR 35
59623: PUSH
59624: LD_INT 5
59626: NEG
59627: PPUSH
59628: LD_INT 5
59630: PPUSH
59631: CALL_OW 12
59635: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
59636: LD_ADDR_OWVAR 31
59640: PUSH
59641: LD_INT 1
59643: PPUSH
59644: LD_INT 3
59646: PPUSH
59647: CALL_OW 12
59651: PUSH
59652: LD_INT 1
59654: PPUSH
59655: LD_INT 3
59657: PPUSH
59658: CALL_OW 12
59662: PUSH
59663: LD_INT 0
59665: PUSH
59666: LD_INT 0
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: LIST
59673: LIST
59674: ST_TO_ADDR
// animal := CreateHuman ;
59675: LD_ADDR_VAR 0 12
59679: PUSH
59680: CALL_OW 44
59684: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59685: LD_VAR 0 12
59689: PPUSH
59690: LD_VAR 0 8
59694: PPUSH
59695: LD_INT 0
59697: PPUSH
59698: CALL 61418 0 3
// end ;
59702: GO 59600
59704: POP
59705: POP
// if enchidnas then
59706: LD_VAR 0 4
59710: IFFALSE 59777
// for i = 1 to enchidnas do
59712: LD_ADDR_VAR 0 11
59716: PUSH
59717: DOUBLE
59718: LD_INT 1
59720: DEC
59721: ST_TO_ADDR
59722: LD_VAR 0 4
59726: PUSH
59727: FOR_TO
59728: IFFALSE 59775
// begin hc_class = 13 ;
59730: LD_ADDR_OWVAR 28
59734: PUSH
59735: LD_INT 13
59737: ST_TO_ADDR
// hc_gallery =  ;
59738: LD_ADDR_OWVAR 33
59742: PUSH
59743: LD_STRING 
59745: ST_TO_ADDR
// animal := CreateHuman ;
59746: LD_ADDR_VAR 0 12
59750: PUSH
59751: CALL_OW 44
59755: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
59756: LD_VAR 0 12
59760: PPUSH
59761: LD_VAR 0 8
59765: PPUSH
59766: LD_INT 0
59768: PPUSH
59769: CALL 61418 0 3
// end ;
59773: GO 59727
59775: POP
59776: POP
// if fishes then
59777: LD_VAR 0 7
59781: IFFALSE 59848
// for i = 1 to fishes do
59783: LD_ADDR_VAR 0 11
59787: PUSH
59788: DOUBLE
59789: LD_INT 1
59791: DEC
59792: ST_TO_ADDR
59793: LD_VAR 0 7
59797: PUSH
59798: FOR_TO
59799: IFFALSE 59846
// begin hc_class = 20 ;
59801: LD_ADDR_OWVAR 28
59805: PUSH
59806: LD_INT 20
59808: ST_TO_ADDR
// hc_gallery =  ;
59809: LD_ADDR_OWVAR 33
59813: PUSH
59814: LD_STRING 
59816: ST_TO_ADDR
// animal := CreateHuman ;
59817: LD_ADDR_VAR 0 12
59821: PUSH
59822: CALL_OW 44
59826: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
59827: LD_VAR 0 12
59831: PPUSH
59832: LD_VAR 0 9
59836: PPUSH
59837: LD_INT 0
59839: PPUSH
59840: CALL 61418 0 3
// end ;
59844: GO 59798
59846: POP
59847: POP
// end ;
59848: LD_VAR 0 10
59852: RET
// export function WantHeal ( sci , unit ) ; begin
59853: LD_INT 0
59855: PPUSH
// if GetTaskList ( sci ) > 0 then
59856: LD_VAR 0 1
59860: PPUSH
59861: CALL_OW 437
59865: PUSH
59866: LD_INT 0
59868: GREATER
59869: IFFALSE 59939
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
59871: LD_VAR 0 1
59875: PPUSH
59876: CALL_OW 437
59880: PUSH
59881: LD_INT 1
59883: ARRAY
59884: PUSH
59885: LD_INT 1
59887: ARRAY
59888: PUSH
59889: LD_STRING l
59891: EQUAL
59892: PUSH
59893: LD_VAR 0 1
59897: PPUSH
59898: CALL_OW 437
59902: PUSH
59903: LD_INT 1
59905: ARRAY
59906: PUSH
59907: LD_INT 4
59909: ARRAY
59910: PUSH
59911: LD_VAR 0 2
59915: EQUAL
59916: AND
59917: IFFALSE 59929
// result := true else
59919: LD_ADDR_VAR 0 3
59923: PUSH
59924: LD_INT 1
59926: ST_TO_ADDR
59927: GO 59937
// result := false ;
59929: LD_ADDR_VAR 0 3
59933: PUSH
59934: LD_INT 0
59936: ST_TO_ADDR
// end else
59937: GO 59947
// result := false ;
59939: LD_ADDR_VAR 0 3
59943: PUSH
59944: LD_INT 0
59946: ST_TO_ADDR
// end ;
59947: LD_VAR 0 3
59951: RET
// export function HealTarget ( sci ) ; begin
59952: LD_INT 0
59954: PPUSH
// if not sci then
59955: LD_VAR 0 1
59959: NOT
59960: IFFALSE 59964
// exit ;
59962: GO 60029
// result := 0 ;
59964: LD_ADDR_VAR 0 2
59968: PUSH
59969: LD_INT 0
59971: ST_TO_ADDR
// if GetTaskList ( sci ) then
59972: LD_VAR 0 1
59976: PPUSH
59977: CALL_OW 437
59981: IFFALSE 60029
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
59983: LD_VAR 0 1
59987: PPUSH
59988: CALL_OW 437
59992: PUSH
59993: LD_INT 1
59995: ARRAY
59996: PUSH
59997: LD_INT 1
59999: ARRAY
60000: PUSH
60001: LD_STRING l
60003: EQUAL
60004: IFFALSE 60029
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
60006: LD_ADDR_VAR 0 2
60010: PUSH
60011: LD_VAR 0 1
60015: PPUSH
60016: CALL_OW 437
60020: PUSH
60021: LD_INT 1
60023: ARRAY
60024: PUSH
60025: LD_INT 4
60027: ARRAY
60028: ST_TO_ADDR
// end ;
60029: LD_VAR 0 2
60033: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
60034: LD_INT 0
60036: PPUSH
60037: PPUSH
60038: PPUSH
60039: PPUSH
// if not base_units then
60040: LD_VAR 0 1
60044: NOT
60045: IFFALSE 60049
// exit ;
60047: GO 60136
// result := false ;
60049: LD_ADDR_VAR 0 2
60053: PUSH
60054: LD_INT 0
60056: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
60057: LD_ADDR_VAR 0 5
60061: PUSH
60062: LD_VAR 0 1
60066: PPUSH
60067: LD_INT 21
60069: PUSH
60070: LD_INT 3
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: PPUSH
60077: CALL_OW 72
60081: ST_TO_ADDR
// if not tmp then
60082: LD_VAR 0 5
60086: NOT
60087: IFFALSE 60091
// exit ;
60089: GO 60136
// for i in tmp do
60091: LD_ADDR_VAR 0 3
60095: PUSH
60096: LD_VAR 0 5
60100: PUSH
60101: FOR_IN
60102: IFFALSE 60134
// begin result := EnemyInRange ( i , 22 ) ;
60104: LD_ADDR_VAR 0 2
60108: PUSH
60109: LD_VAR 0 3
60113: PPUSH
60114: LD_INT 22
60116: PPUSH
60117: CALL 58372 0 2
60121: ST_TO_ADDR
// if result then
60122: LD_VAR 0 2
60126: IFFALSE 60132
// exit ;
60128: POP
60129: POP
60130: GO 60136
// end ;
60132: GO 60101
60134: POP
60135: POP
// end ;
60136: LD_VAR 0 2
60140: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
60141: LD_INT 0
60143: PPUSH
60144: PPUSH
// if not units then
60145: LD_VAR 0 1
60149: NOT
60150: IFFALSE 60154
// exit ;
60152: GO 60224
// result := [ ] ;
60154: LD_ADDR_VAR 0 3
60158: PUSH
60159: EMPTY
60160: ST_TO_ADDR
// for i in units do
60161: LD_ADDR_VAR 0 4
60165: PUSH
60166: LD_VAR 0 1
60170: PUSH
60171: FOR_IN
60172: IFFALSE 60222
// if GetTag ( i ) = tag then
60174: LD_VAR 0 4
60178: PPUSH
60179: CALL_OW 110
60183: PUSH
60184: LD_VAR 0 2
60188: EQUAL
60189: IFFALSE 60220
// result := Insert ( result , result + 1 , i ) ;
60191: LD_ADDR_VAR 0 3
60195: PUSH
60196: LD_VAR 0 3
60200: PPUSH
60201: LD_VAR 0 3
60205: PUSH
60206: LD_INT 1
60208: PLUS
60209: PPUSH
60210: LD_VAR 0 4
60214: PPUSH
60215: CALL_OW 2
60219: ST_TO_ADDR
60220: GO 60171
60222: POP
60223: POP
// end ;
60224: LD_VAR 0 3
60228: RET
// export function IsDriver ( un ) ; begin
60229: LD_INT 0
60231: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
60232: LD_ADDR_VAR 0 2
60236: PUSH
60237: LD_VAR 0 1
60241: PUSH
60242: LD_INT 55
60244: PUSH
60245: EMPTY
60246: LIST
60247: PPUSH
60248: CALL_OW 69
60252: IN
60253: ST_TO_ADDR
// end ;
60254: LD_VAR 0 2
60258: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
60259: LD_INT 0
60261: PPUSH
60262: PPUSH
// list := [ ] ;
60263: LD_ADDR_VAR 0 5
60267: PUSH
60268: EMPTY
60269: ST_TO_ADDR
// case d of 0 :
60270: LD_VAR 0 3
60274: PUSH
60275: LD_INT 0
60277: DOUBLE
60278: EQUAL
60279: IFTRUE 60283
60281: GO 60416
60283: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60284: LD_ADDR_VAR 0 5
60288: PUSH
60289: LD_VAR 0 1
60293: PUSH
60294: LD_INT 4
60296: MINUS
60297: PUSH
60298: LD_VAR 0 2
60302: PUSH
60303: LD_INT 4
60305: MINUS
60306: PUSH
60307: LD_INT 2
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: LIST
60314: PUSH
60315: LD_VAR 0 1
60319: PUSH
60320: LD_INT 3
60322: MINUS
60323: PUSH
60324: LD_VAR 0 2
60328: PUSH
60329: LD_INT 1
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: LIST
60336: PUSH
60337: LD_VAR 0 1
60341: PUSH
60342: LD_INT 4
60344: PLUS
60345: PUSH
60346: LD_VAR 0 2
60350: PUSH
60351: LD_INT 4
60353: PUSH
60354: EMPTY
60355: LIST
60356: LIST
60357: LIST
60358: PUSH
60359: LD_VAR 0 1
60363: PUSH
60364: LD_INT 3
60366: PLUS
60367: PUSH
60368: LD_VAR 0 2
60372: PUSH
60373: LD_INT 3
60375: PLUS
60376: PUSH
60377: LD_INT 5
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: LIST
60384: PUSH
60385: LD_VAR 0 1
60389: PUSH
60390: LD_VAR 0 2
60394: PUSH
60395: LD_INT 4
60397: PLUS
60398: PUSH
60399: LD_INT 0
60401: PUSH
60402: EMPTY
60403: LIST
60404: LIST
60405: LIST
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: LIST
60411: LIST
60412: LIST
60413: ST_TO_ADDR
// end ; 1 :
60414: GO 61114
60416: LD_INT 1
60418: DOUBLE
60419: EQUAL
60420: IFTRUE 60424
60422: GO 60557
60424: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
60425: LD_ADDR_VAR 0 5
60429: PUSH
60430: LD_VAR 0 1
60434: PUSH
60435: LD_VAR 0 2
60439: PUSH
60440: LD_INT 4
60442: MINUS
60443: PUSH
60444: LD_INT 3
60446: PUSH
60447: EMPTY
60448: LIST
60449: LIST
60450: LIST
60451: PUSH
60452: LD_VAR 0 1
60456: PUSH
60457: LD_INT 3
60459: MINUS
60460: PUSH
60461: LD_VAR 0 2
60465: PUSH
60466: LD_INT 3
60468: MINUS
60469: PUSH
60470: LD_INT 2
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: LIST
60477: PUSH
60478: LD_VAR 0 1
60482: PUSH
60483: LD_INT 4
60485: MINUS
60486: PUSH
60487: LD_VAR 0 2
60491: PUSH
60492: LD_INT 1
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: LIST
60499: PUSH
60500: LD_VAR 0 1
60504: PUSH
60505: LD_VAR 0 2
60509: PUSH
60510: LD_INT 3
60512: PLUS
60513: PUSH
60514: LD_INT 0
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: LIST
60521: PUSH
60522: LD_VAR 0 1
60526: PUSH
60527: LD_INT 4
60529: PLUS
60530: PUSH
60531: LD_VAR 0 2
60535: PUSH
60536: LD_INT 4
60538: PLUS
60539: PUSH
60540: LD_INT 5
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: LIST
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: LIST
60552: LIST
60553: LIST
60554: ST_TO_ADDR
// end ; 2 :
60555: GO 61114
60557: LD_INT 2
60559: DOUBLE
60560: EQUAL
60561: IFTRUE 60565
60563: GO 60694
60565: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
60566: LD_ADDR_VAR 0 5
60570: PUSH
60571: LD_VAR 0 1
60575: PUSH
60576: LD_VAR 0 2
60580: PUSH
60581: LD_INT 3
60583: MINUS
60584: PUSH
60585: LD_INT 3
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: LIST
60592: PUSH
60593: LD_VAR 0 1
60597: PUSH
60598: LD_INT 4
60600: PLUS
60601: PUSH
60602: LD_VAR 0 2
60606: PUSH
60607: LD_INT 4
60609: PUSH
60610: EMPTY
60611: LIST
60612: LIST
60613: LIST
60614: PUSH
60615: LD_VAR 0 1
60619: PUSH
60620: LD_VAR 0 2
60624: PUSH
60625: LD_INT 4
60627: PLUS
60628: PUSH
60629: LD_INT 0
60631: PUSH
60632: EMPTY
60633: LIST
60634: LIST
60635: LIST
60636: PUSH
60637: LD_VAR 0 1
60641: PUSH
60642: LD_INT 3
60644: MINUS
60645: PUSH
60646: LD_VAR 0 2
60650: PUSH
60651: LD_INT 1
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: LIST
60658: PUSH
60659: LD_VAR 0 1
60663: PUSH
60664: LD_INT 4
60666: MINUS
60667: PUSH
60668: LD_VAR 0 2
60672: PUSH
60673: LD_INT 4
60675: MINUS
60676: PUSH
60677: LD_INT 2
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: LIST
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: LIST
60689: LIST
60690: LIST
60691: ST_TO_ADDR
// end ; 3 :
60692: GO 61114
60694: LD_INT 3
60696: DOUBLE
60697: EQUAL
60698: IFTRUE 60702
60700: GO 60835
60702: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
60703: LD_ADDR_VAR 0 5
60707: PUSH
60708: LD_VAR 0 1
60712: PUSH
60713: LD_INT 3
60715: PLUS
60716: PUSH
60717: LD_VAR 0 2
60721: PUSH
60722: LD_INT 4
60724: PUSH
60725: EMPTY
60726: LIST
60727: LIST
60728: LIST
60729: PUSH
60730: LD_VAR 0 1
60734: PUSH
60735: LD_INT 4
60737: PLUS
60738: PUSH
60739: LD_VAR 0 2
60743: PUSH
60744: LD_INT 4
60746: PLUS
60747: PUSH
60748: LD_INT 5
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: LIST
60755: PUSH
60756: LD_VAR 0 1
60760: PUSH
60761: LD_INT 4
60763: MINUS
60764: PUSH
60765: LD_VAR 0 2
60769: PUSH
60770: LD_INT 1
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: LIST
60777: PUSH
60778: LD_VAR 0 1
60782: PUSH
60783: LD_VAR 0 2
60787: PUSH
60788: LD_INT 4
60790: MINUS
60791: PUSH
60792: LD_INT 3
60794: PUSH
60795: EMPTY
60796: LIST
60797: LIST
60798: LIST
60799: PUSH
60800: LD_VAR 0 1
60804: PUSH
60805: LD_INT 3
60807: MINUS
60808: PUSH
60809: LD_VAR 0 2
60813: PUSH
60814: LD_INT 3
60816: MINUS
60817: PUSH
60818: LD_INT 2
60820: PUSH
60821: EMPTY
60822: LIST
60823: LIST
60824: LIST
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: LIST
60830: LIST
60831: LIST
60832: ST_TO_ADDR
// end ; 4 :
60833: GO 61114
60835: LD_INT 4
60837: DOUBLE
60838: EQUAL
60839: IFTRUE 60843
60841: GO 60976
60843: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60844: LD_ADDR_VAR 0 5
60848: PUSH
60849: LD_VAR 0 1
60853: PUSH
60854: LD_VAR 0 2
60858: PUSH
60859: LD_INT 4
60861: PLUS
60862: PUSH
60863: LD_INT 0
60865: PUSH
60866: EMPTY
60867: LIST
60868: LIST
60869: LIST
60870: PUSH
60871: LD_VAR 0 1
60875: PUSH
60876: LD_INT 3
60878: PLUS
60879: PUSH
60880: LD_VAR 0 2
60884: PUSH
60885: LD_INT 3
60887: PLUS
60888: PUSH
60889: LD_INT 5
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: LIST
60896: PUSH
60897: LD_VAR 0 1
60901: PUSH
60902: LD_INT 4
60904: PLUS
60905: PUSH
60906: LD_VAR 0 2
60910: PUSH
60911: LD_INT 4
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: LIST
60918: PUSH
60919: LD_VAR 0 1
60923: PUSH
60924: LD_VAR 0 2
60928: PUSH
60929: LD_INT 3
60931: MINUS
60932: PUSH
60933: LD_INT 3
60935: PUSH
60936: EMPTY
60937: LIST
60938: LIST
60939: LIST
60940: PUSH
60941: LD_VAR 0 1
60945: PUSH
60946: LD_INT 4
60948: MINUS
60949: PUSH
60950: LD_VAR 0 2
60954: PUSH
60955: LD_INT 4
60957: MINUS
60958: PUSH
60959: LD_INT 2
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: LIST
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: LIST
60971: LIST
60972: LIST
60973: ST_TO_ADDR
// end ; 5 :
60974: GO 61114
60976: LD_INT 5
60978: DOUBLE
60979: EQUAL
60980: IFTRUE 60984
60982: GO 61113
60984: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60985: LD_ADDR_VAR 0 5
60989: PUSH
60990: LD_VAR 0 1
60994: PUSH
60995: LD_INT 4
60997: MINUS
60998: PUSH
60999: LD_VAR 0 2
61003: PUSH
61004: LD_INT 1
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: LIST
61011: PUSH
61012: LD_VAR 0 1
61016: PUSH
61017: LD_VAR 0 2
61021: PUSH
61022: LD_INT 4
61024: MINUS
61025: PUSH
61026: LD_INT 3
61028: PUSH
61029: EMPTY
61030: LIST
61031: LIST
61032: LIST
61033: PUSH
61034: LD_VAR 0 1
61038: PUSH
61039: LD_INT 4
61041: PLUS
61042: PUSH
61043: LD_VAR 0 2
61047: PUSH
61048: LD_INT 4
61050: PLUS
61051: PUSH
61052: LD_INT 5
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: LIST
61059: PUSH
61060: LD_VAR 0 1
61064: PUSH
61065: LD_INT 3
61067: PLUS
61068: PUSH
61069: LD_VAR 0 2
61073: PUSH
61074: LD_INT 4
61076: PUSH
61077: EMPTY
61078: LIST
61079: LIST
61080: LIST
61081: PUSH
61082: LD_VAR 0 1
61086: PUSH
61087: LD_VAR 0 2
61091: PUSH
61092: LD_INT 3
61094: PLUS
61095: PUSH
61096: LD_INT 0
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: LIST
61103: PUSH
61104: EMPTY
61105: LIST
61106: LIST
61107: LIST
61108: LIST
61109: LIST
61110: ST_TO_ADDR
// end ; end ;
61111: GO 61114
61113: POP
// result := list ;
61114: LD_ADDR_VAR 0 4
61118: PUSH
61119: LD_VAR 0 5
61123: ST_TO_ADDR
// end ;
61124: LD_VAR 0 4
61128: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
61129: LD_INT 0
61131: PPUSH
61132: PPUSH
61133: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
61134: LD_VAR 0 1
61138: NOT
61139: PUSH
61140: LD_VAR 0 2
61144: PUSH
61145: LD_INT 1
61147: PUSH
61148: LD_INT 2
61150: PUSH
61151: LD_INT 3
61153: PUSH
61154: LD_INT 4
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: LIST
61161: LIST
61162: IN
61163: NOT
61164: OR
61165: IFFALSE 61169
// exit ;
61167: GO 61261
// tmp := [ ] ;
61169: LD_ADDR_VAR 0 5
61173: PUSH
61174: EMPTY
61175: ST_TO_ADDR
// for i in units do
61176: LD_ADDR_VAR 0 4
61180: PUSH
61181: LD_VAR 0 1
61185: PUSH
61186: FOR_IN
61187: IFFALSE 61230
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
61189: LD_ADDR_VAR 0 5
61193: PUSH
61194: LD_VAR 0 5
61198: PPUSH
61199: LD_VAR 0 5
61203: PUSH
61204: LD_INT 1
61206: PLUS
61207: PPUSH
61208: LD_VAR 0 4
61212: PPUSH
61213: LD_VAR 0 2
61217: PPUSH
61218: CALL_OW 259
61222: PPUSH
61223: CALL_OW 2
61227: ST_TO_ADDR
61228: GO 61186
61230: POP
61231: POP
// if not tmp then
61232: LD_VAR 0 5
61236: NOT
61237: IFFALSE 61241
// exit ;
61239: GO 61261
// result := SortListByListDesc ( units , tmp ) ;
61241: LD_ADDR_VAR 0 3
61245: PUSH
61246: LD_VAR 0 1
61250: PPUSH
61251: LD_VAR 0 5
61255: PPUSH
61256: CALL_OW 77
61260: ST_TO_ADDR
// end ;
61261: LD_VAR 0 3
61265: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
61266: LD_INT 0
61268: PPUSH
61269: PPUSH
61270: PPUSH
// x := GetX ( building ) ;
61271: LD_ADDR_VAR 0 4
61275: PUSH
61276: LD_VAR 0 2
61280: PPUSH
61281: CALL_OW 250
61285: ST_TO_ADDR
// y := GetY ( building ) ;
61286: LD_ADDR_VAR 0 5
61290: PUSH
61291: LD_VAR 0 2
61295: PPUSH
61296: CALL_OW 251
61300: ST_TO_ADDR
// if GetTaskList ( unit ) then
61301: LD_VAR 0 1
61305: PPUSH
61306: CALL_OW 437
61310: IFFALSE 61405
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61312: LD_STRING e
61314: PUSH
61315: LD_VAR 0 1
61319: PPUSH
61320: CALL_OW 437
61324: PUSH
61325: LD_INT 1
61327: ARRAY
61328: PUSH
61329: LD_INT 1
61331: ARRAY
61332: EQUAL
61333: PUSH
61334: LD_VAR 0 4
61338: PUSH
61339: LD_VAR 0 1
61343: PPUSH
61344: CALL_OW 437
61348: PUSH
61349: LD_INT 1
61351: ARRAY
61352: PUSH
61353: LD_INT 2
61355: ARRAY
61356: EQUAL
61357: AND
61358: PUSH
61359: LD_VAR 0 5
61363: PUSH
61364: LD_VAR 0 1
61368: PPUSH
61369: CALL_OW 437
61373: PUSH
61374: LD_INT 1
61376: ARRAY
61377: PUSH
61378: LD_INT 3
61380: ARRAY
61381: EQUAL
61382: AND
61383: IFFALSE 61395
// result := true else
61385: LD_ADDR_VAR 0 3
61389: PUSH
61390: LD_INT 1
61392: ST_TO_ADDR
61393: GO 61403
// result := false ;
61395: LD_ADDR_VAR 0 3
61399: PUSH
61400: LD_INT 0
61402: ST_TO_ADDR
// end else
61403: GO 61413
// result := false ;
61405: LD_ADDR_VAR 0 3
61409: PUSH
61410: LD_INT 0
61412: ST_TO_ADDR
// end ;
61413: LD_VAR 0 3
61417: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
61418: LD_INT 0
61420: PPUSH
61421: PPUSH
61422: PPUSH
61423: PPUSH
// if not unit or not area then
61424: LD_VAR 0 1
61428: NOT
61429: PUSH
61430: LD_VAR 0 2
61434: NOT
61435: OR
61436: IFFALSE 61440
// exit ;
61438: GO 61604
// tmp := AreaToList ( area , i ) ;
61440: LD_ADDR_VAR 0 6
61444: PUSH
61445: LD_VAR 0 2
61449: PPUSH
61450: LD_VAR 0 5
61454: PPUSH
61455: CALL_OW 517
61459: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
61460: LD_ADDR_VAR 0 5
61464: PUSH
61465: DOUBLE
61466: LD_INT 1
61468: DEC
61469: ST_TO_ADDR
61470: LD_VAR 0 6
61474: PUSH
61475: LD_INT 1
61477: ARRAY
61478: PUSH
61479: FOR_TO
61480: IFFALSE 61602
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
61482: LD_ADDR_VAR 0 7
61486: PUSH
61487: LD_VAR 0 6
61491: PUSH
61492: LD_INT 1
61494: ARRAY
61495: PUSH
61496: LD_VAR 0 5
61500: ARRAY
61501: PUSH
61502: LD_VAR 0 6
61506: PUSH
61507: LD_INT 2
61509: ARRAY
61510: PUSH
61511: LD_VAR 0 5
61515: ARRAY
61516: PUSH
61517: EMPTY
61518: LIST
61519: LIST
61520: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
61521: LD_VAR 0 7
61525: PUSH
61526: LD_INT 1
61528: ARRAY
61529: PPUSH
61530: LD_VAR 0 7
61534: PUSH
61535: LD_INT 2
61537: ARRAY
61538: PPUSH
61539: CALL_OW 428
61543: PUSH
61544: LD_INT 0
61546: EQUAL
61547: IFFALSE 61600
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
61549: LD_VAR 0 1
61553: PPUSH
61554: LD_VAR 0 7
61558: PUSH
61559: LD_INT 1
61561: ARRAY
61562: PPUSH
61563: LD_VAR 0 7
61567: PUSH
61568: LD_INT 2
61570: ARRAY
61571: PPUSH
61572: LD_VAR 0 3
61576: PPUSH
61577: CALL_OW 48
// result := IsPlaced ( unit ) ;
61581: LD_ADDR_VAR 0 4
61585: PUSH
61586: LD_VAR 0 1
61590: PPUSH
61591: CALL_OW 305
61595: ST_TO_ADDR
// exit ;
61596: POP
61597: POP
61598: GO 61604
// end ; end ;
61600: GO 61479
61602: POP
61603: POP
// end ;
61604: LD_VAR 0 4
61608: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
61609: LD_INT 0
61611: PPUSH
61612: PPUSH
61613: PPUSH
// if not side or side > 8 then
61614: LD_VAR 0 1
61618: NOT
61619: PUSH
61620: LD_VAR 0 1
61624: PUSH
61625: LD_INT 8
61627: GREATER
61628: OR
61629: IFFALSE 61633
// exit ;
61631: GO 61820
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
61633: LD_ADDR_VAR 0 4
61637: PUSH
61638: LD_INT 22
61640: PUSH
61641: LD_VAR 0 1
61645: PUSH
61646: EMPTY
61647: LIST
61648: LIST
61649: PUSH
61650: LD_INT 21
61652: PUSH
61653: LD_INT 3
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: PPUSH
61664: CALL_OW 69
61668: ST_TO_ADDR
// if not tmp then
61669: LD_VAR 0 4
61673: NOT
61674: IFFALSE 61678
// exit ;
61676: GO 61820
// enable_addtolog := true ;
61678: LD_ADDR_OWVAR 81
61682: PUSH
61683: LD_INT 1
61685: ST_TO_ADDR
// AddToLog ( [ ) ;
61686: LD_STRING [
61688: PPUSH
61689: CALL_OW 561
// for i in tmp do
61693: LD_ADDR_VAR 0 3
61697: PUSH
61698: LD_VAR 0 4
61702: PUSH
61703: FOR_IN
61704: IFFALSE 61811
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
61706: LD_STRING [
61708: PUSH
61709: LD_VAR 0 3
61713: PPUSH
61714: CALL_OW 266
61718: STR
61719: PUSH
61720: LD_STRING , 
61722: STR
61723: PUSH
61724: LD_VAR 0 3
61728: PPUSH
61729: CALL_OW 250
61733: STR
61734: PUSH
61735: LD_STRING , 
61737: STR
61738: PUSH
61739: LD_VAR 0 3
61743: PPUSH
61744: CALL_OW 251
61748: STR
61749: PUSH
61750: LD_STRING , 
61752: STR
61753: PUSH
61754: LD_VAR 0 3
61758: PPUSH
61759: CALL_OW 254
61763: STR
61764: PUSH
61765: LD_STRING , 
61767: STR
61768: PUSH
61769: LD_VAR 0 3
61773: PPUSH
61774: LD_INT 1
61776: PPUSH
61777: CALL_OW 268
61781: STR
61782: PUSH
61783: LD_STRING , 
61785: STR
61786: PUSH
61787: LD_VAR 0 3
61791: PPUSH
61792: LD_INT 2
61794: PPUSH
61795: CALL_OW 268
61799: STR
61800: PUSH
61801: LD_STRING ],
61803: STR
61804: PPUSH
61805: CALL_OW 561
// end ;
61809: GO 61703
61811: POP
61812: POP
// AddToLog ( ]; ) ;
61813: LD_STRING ];
61815: PPUSH
61816: CALL_OW 561
// end ;
61820: LD_VAR 0 2
61824: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61825: LD_INT 0
61827: PPUSH
61828: PPUSH
61829: PPUSH
61830: PPUSH
61831: PPUSH
// if not area or not rate or not max then
61832: LD_VAR 0 1
61836: NOT
61837: PUSH
61838: LD_VAR 0 2
61842: NOT
61843: OR
61844: PUSH
61845: LD_VAR 0 4
61849: NOT
61850: OR
61851: IFFALSE 61855
// exit ;
61853: GO 62047
// while 1 do
61855: LD_INT 1
61857: IFFALSE 62047
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61859: LD_ADDR_VAR 0 9
61863: PUSH
61864: LD_VAR 0 1
61868: PPUSH
61869: LD_INT 1
61871: PPUSH
61872: CALL_OW 287
61876: PUSH
61877: LD_INT 10
61879: MUL
61880: ST_TO_ADDR
// r := rate / 10 ;
61881: LD_ADDR_VAR 0 7
61885: PUSH
61886: LD_VAR 0 2
61890: PUSH
61891: LD_INT 10
61893: DIVREAL
61894: ST_TO_ADDR
// time := 1 1$00 ;
61895: LD_ADDR_VAR 0 8
61899: PUSH
61900: LD_INT 2100
61902: ST_TO_ADDR
// if amount < min then
61903: LD_VAR 0 9
61907: PUSH
61908: LD_VAR 0 3
61912: LESS
61913: IFFALSE 61931
// r := r * 2 else
61915: LD_ADDR_VAR 0 7
61919: PUSH
61920: LD_VAR 0 7
61924: PUSH
61925: LD_INT 2
61927: MUL
61928: ST_TO_ADDR
61929: GO 61957
// if amount > max then
61931: LD_VAR 0 9
61935: PUSH
61936: LD_VAR 0 4
61940: GREATER
61941: IFFALSE 61957
// r := r / 2 ;
61943: LD_ADDR_VAR 0 7
61947: PUSH
61948: LD_VAR 0 7
61952: PUSH
61953: LD_INT 2
61955: DIVREAL
61956: ST_TO_ADDR
// time := time / r ;
61957: LD_ADDR_VAR 0 8
61961: PUSH
61962: LD_VAR 0 8
61966: PUSH
61967: LD_VAR 0 7
61971: DIVREAL
61972: ST_TO_ADDR
// if time < 0 then
61973: LD_VAR 0 8
61977: PUSH
61978: LD_INT 0
61980: LESS
61981: IFFALSE 61998
// time := time * - 1 ;
61983: LD_ADDR_VAR 0 8
61987: PUSH
61988: LD_VAR 0 8
61992: PUSH
61993: LD_INT 1
61995: NEG
61996: MUL
61997: ST_TO_ADDR
// wait ( time ) ;
61998: LD_VAR 0 8
62002: PPUSH
62003: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
62007: LD_INT 35
62009: PPUSH
62010: LD_INT 875
62012: PPUSH
62013: CALL_OW 12
62017: PPUSH
62018: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
62022: LD_INT 1
62024: PPUSH
62025: LD_INT 5
62027: PPUSH
62028: CALL_OW 12
62032: PPUSH
62033: LD_VAR 0 1
62037: PPUSH
62038: LD_INT 1
62040: PPUSH
62041: CALL_OW 55
// end ;
62045: GO 61855
// end ;
62047: LD_VAR 0 5
62051: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
62052: LD_INT 0
62054: PPUSH
62055: PPUSH
62056: PPUSH
62057: PPUSH
62058: PPUSH
62059: PPUSH
62060: PPUSH
62061: PPUSH
// if not turrets or not factories then
62062: LD_VAR 0 1
62066: NOT
62067: PUSH
62068: LD_VAR 0 2
62072: NOT
62073: OR
62074: IFFALSE 62078
// exit ;
62076: GO 62385
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
62078: LD_ADDR_VAR 0 10
62082: PUSH
62083: LD_INT 5
62085: PUSH
62086: LD_INT 6
62088: PUSH
62089: EMPTY
62090: LIST
62091: LIST
62092: PUSH
62093: LD_INT 2
62095: PUSH
62096: LD_INT 4
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: PUSH
62103: LD_INT 3
62105: PUSH
62106: LD_INT 5
62108: PUSH
62109: EMPTY
62110: LIST
62111: LIST
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: LIST
62117: PUSH
62118: LD_INT 24
62120: PUSH
62121: LD_INT 25
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: PUSH
62128: LD_INT 23
62130: PUSH
62131: LD_INT 27
62133: PUSH
62134: EMPTY
62135: LIST
62136: LIST
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: PUSH
62142: LD_INT 42
62144: PUSH
62145: LD_INT 43
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: PUSH
62152: LD_INT 44
62154: PUSH
62155: LD_INT 46
62157: PUSH
62158: EMPTY
62159: LIST
62160: LIST
62161: PUSH
62162: LD_INT 45
62164: PUSH
62165: LD_INT 47
62167: PUSH
62168: EMPTY
62169: LIST
62170: LIST
62171: PUSH
62172: EMPTY
62173: LIST
62174: LIST
62175: LIST
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: LIST
62181: ST_TO_ADDR
// result := [ ] ;
62182: LD_ADDR_VAR 0 3
62186: PUSH
62187: EMPTY
62188: ST_TO_ADDR
// for i in turrets do
62189: LD_ADDR_VAR 0 4
62193: PUSH
62194: LD_VAR 0 1
62198: PUSH
62199: FOR_IN
62200: IFFALSE 62383
// begin nat := GetNation ( i ) ;
62202: LD_ADDR_VAR 0 7
62206: PUSH
62207: LD_VAR 0 4
62211: PPUSH
62212: CALL_OW 248
62216: ST_TO_ADDR
// weapon := 0 ;
62217: LD_ADDR_VAR 0 8
62221: PUSH
62222: LD_INT 0
62224: ST_TO_ADDR
// if not nat then
62225: LD_VAR 0 7
62229: NOT
62230: IFFALSE 62234
// continue ;
62232: GO 62199
// for j in list [ nat ] do
62234: LD_ADDR_VAR 0 5
62238: PUSH
62239: LD_VAR 0 10
62243: PUSH
62244: LD_VAR 0 7
62248: ARRAY
62249: PUSH
62250: FOR_IN
62251: IFFALSE 62292
// if GetBWeapon ( i ) = j [ 1 ] then
62253: LD_VAR 0 4
62257: PPUSH
62258: CALL_OW 269
62262: PUSH
62263: LD_VAR 0 5
62267: PUSH
62268: LD_INT 1
62270: ARRAY
62271: EQUAL
62272: IFFALSE 62290
// begin weapon := j [ 2 ] ;
62274: LD_ADDR_VAR 0 8
62278: PUSH
62279: LD_VAR 0 5
62283: PUSH
62284: LD_INT 2
62286: ARRAY
62287: ST_TO_ADDR
// break ;
62288: GO 62292
// end ;
62290: GO 62250
62292: POP
62293: POP
// if not weapon then
62294: LD_VAR 0 8
62298: NOT
62299: IFFALSE 62303
// continue ;
62301: GO 62199
// for k in factories do
62303: LD_ADDR_VAR 0 6
62307: PUSH
62308: LD_VAR 0 2
62312: PUSH
62313: FOR_IN
62314: IFFALSE 62379
// begin weapons := AvailableWeaponList ( k ) ;
62316: LD_ADDR_VAR 0 9
62320: PUSH
62321: LD_VAR 0 6
62325: PPUSH
62326: CALL_OW 478
62330: ST_TO_ADDR
// if not weapons then
62331: LD_VAR 0 9
62335: NOT
62336: IFFALSE 62340
// continue ;
62338: GO 62313
// if weapon in weapons then
62340: LD_VAR 0 8
62344: PUSH
62345: LD_VAR 0 9
62349: IN
62350: IFFALSE 62377
// begin result := [ i , weapon ] ;
62352: LD_ADDR_VAR 0 3
62356: PUSH
62357: LD_VAR 0 4
62361: PUSH
62362: LD_VAR 0 8
62366: PUSH
62367: EMPTY
62368: LIST
62369: LIST
62370: ST_TO_ADDR
// exit ;
62371: POP
62372: POP
62373: POP
62374: POP
62375: GO 62385
// end ; end ;
62377: GO 62313
62379: POP
62380: POP
// end ;
62381: GO 62199
62383: POP
62384: POP
// end ;
62385: LD_VAR 0 3
62389: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
62390: LD_INT 0
62392: PPUSH
// if not side or side > 8 then
62393: LD_VAR 0 3
62397: NOT
62398: PUSH
62399: LD_VAR 0 3
62403: PUSH
62404: LD_INT 8
62406: GREATER
62407: OR
62408: IFFALSE 62412
// exit ;
62410: GO 62471
// if not range then
62412: LD_VAR 0 4
62416: NOT
62417: IFFALSE 62428
// range := - 12 ;
62419: LD_ADDR_VAR 0 4
62423: PUSH
62424: LD_INT 12
62426: NEG
62427: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
62428: LD_VAR 0 1
62432: PPUSH
62433: LD_VAR 0 2
62437: PPUSH
62438: LD_VAR 0 3
62442: PPUSH
62443: LD_VAR 0 4
62447: PPUSH
62448: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
62452: LD_VAR 0 1
62456: PPUSH
62457: LD_VAR 0 2
62461: PPUSH
62462: LD_VAR 0 3
62466: PPUSH
62467: CALL_OW 331
// end ;
62471: LD_VAR 0 5
62475: RET
// export function Video ( mode ) ; begin
62476: LD_INT 0
62478: PPUSH
// ingame_video = mode ;
62479: LD_ADDR_OWVAR 52
62483: PUSH
62484: LD_VAR 0 1
62488: ST_TO_ADDR
// interface_hidden = mode ;
62489: LD_ADDR_OWVAR 54
62493: PUSH
62494: LD_VAR 0 1
62498: ST_TO_ADDR
// end ;
62499: LD_VAR 0 2
62503: RET
// export function Join ( array , element ) ; begin
62504: LD_INT 0
62506: PPUSH
// result := Replace ( array , array + 1 , element ) ;
62507: LD_ADDR_VAR 0 3
62511: PUSH
62512: LD_VAR 0 1
62516: PPUSH
62517: LD_VAR 0 1
62521: PUSH
62522: LD_INT 1
62524: PLUS
62525: PPUSH
62526: LD_VAR 0 2
62530: PPUSH
62531: CALL_OW 1
62535: ST_TO_ADDR
// end ;
62536: LD_VAR 0 3
62540: RET
// export function JoinUnion ( array , element ) ; begin
62541: LD_INT 0
62543: PPUSH
// result := array union element ;
62544: LD_ADDR_VAR 0 3
62548: PUSH
62549: LD_VAR 0 1
62553: PUSH
62554: LD_VAR 0 2
62558: UNION
62559: ST_TO_ADDR
// end ;
62560: LD_VAR 0 3
62564: RET
// export function GetBehemoths ( side ) ; begin
62565: LD_INT 0
62567: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
62568: LD_ADDR_VAR 0 2
62572: PUSH
62573: LD_INT 22
62575: PUSH
62576: LD_VAR 0 1
62580: PUSH
62581: EMPTY
62582: LIST
62583: LIST
62584: PUSH
62585: LD_INT 31
62587: PUSH
62588: LD_INT 25
62590: PUSH
62591: EMPTY
62592: LIST
62593: LIST
62594: PUSH
62595: EMPTY
62596: LIST
62597: LIST
62598: PPUSH
62599: CALL_OW 69
62603: ST_TO_ADDR
// end ;
62604: LD_VAR 0 2
62608: RET
// export function Shuffle ( array ) ; var i , index ; begin
62609: LD_INT 0
62611: PPUSH
62612: PPUSH
62613: PPUSH
// result := [ ] ;
62614: LD_ADDR_VAR 0 2
62618: PUSH
62619: EMPTY
62620: ST_TO_ADDR
// if not array then
62621: LD_VAR 0 1
62625: NOT
62626: IFFALSE 62630
// exit ;
62628: GO 62729
// Randomize ;
62630: CALL_OW 10
// for i = array downto 1 do
62634: LD_ADDR_VAR 0 3
62638: PUSH
62639: DOUBLE
62640: LD_VAR 0 1
62644: INC
62645: ST_TO_ADDR
62646: LD_INT 1
62648: PUSH
62649: FOR_DOWNTO
62650: IFFALSE 62727
// begin index := rand ( 1 , array ) ;
62652: LD_ADDR_VAR 0 4
62656: PUSH
62657: LD_INT 1
62659: PPUSH
62660: LD_VAR 0 1
62664: PPUSH
62665: CALL_OW 12
62669: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
62670: LD_ADDR_VAR 0 2
62674: PUSH
62675: LD_VAR 0 2
62679: PPUSH
62680: LD_VAR 0 2
62684: PUSH
62685: LD_INT 1
62687: PLUS
62688: PPUSH
62689: LD_VAR 0 1
62693: PUSH
62694: LD_VAR 0 4
62698: ARRAY
62699: PPUSH
62700: CALL_OW 2
62704: ST_TO_ADDR
// array := Delete ( array , index ) ;
62705: LD_ADDR_VAR 0 1
62709: PUSH
62710: LD_VAR 0 1
62714: PPUSH
62715: LD_VAR 0 4
62719: PPUSH
62720: CALL_OW 3
62724: ST_TO_ADDR
// end ;
62725: GO 62649
62727: POP
62728: POP
// end ;
62729: LD_VAR 0 2
62733: RET
// export function GetBaseMaterials ( base ) ; begin
62734: LD_INT 0
62736: PPUSH
// result := [ 0 , 0 , 0 ] ;
62737: LD_ADDR_VAR 0 2
62741: PUSH
62742: LD_INT 0
62744: PUSH
62745: LD_INT 0
62747: PUSH
62748: LD_INT 0
62750: PUSH
62751: EMPTY
62752: LIST
62753: LIST
62754: LIST
62755: ST_TO_ADDR
// if not base then
62756: LD_VAR 0 1
62760: NOT
62761: IFFALSE 62765
// exit ;
62763: GO 62814
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
62765: LD_ADDR_VAR 0 2
62769: PUSH
62770: LD_VAR 0 1
62774: PPUSH
62775: LD_INT 1
62777: PPUSH
62778: CALL_OW 275
62782: PUSH
62783: LD_VAR 0 1
62787: PPUSH
62788: LD_INT 2
62790: PPUSH
62791: CALL_OW 275
62795: PUSH
62796: LD_VAR 0 1
62800: PPUSH
62801: LD_INT 3
62803: PPUSH
62804: CALL_OW 275
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: LIST
62813: ST_TO_ADDR
// end ;
62814: LD_VAR 0 2
62818: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
62819: LD_INT 0
62821: PPUSH
62822: PPUSH
// result := array ;
62823: LD_ADDR_VAR 0 3
62827: PUSH
62828: LD_VAR 0 1
62832: ST_TO_ADDR
// if size > 0 then
62833: LD_VAR 0 2
62837: PUSH
62838: LD_INT 0
62840: GREATER
62841: IFFALSE 62887
// for i := array downto size do
62843: LD_ADDR_VAR 0 4
62847: PUSH
62848: DOUBLE
62849: LD_VAR 0 1
62853: INC
62854: ST_TO_ADDR
62855: LD_VAR 0 2
62859: PUSH
62860: FOR_DOWNTO
62861: IFFALSE 62885
// result := Delete ( result , result ) ;
62863: LD_ADDR_VAR 0 3
62867: PUSH
62868: LD_VAR 0 3
62872: PPUSH
62873: LD_VAR 0 3
62877: PPUSH
62878: CALL_OW 3
62882: ST_TO_ADDR
62883: GO 62860
62885: POP
62886: POP
// end ;
62887: LD_VAR 0 3
62891: RET
// export function ComExit ( unit ) ; var tmp ; begin
62892: LD_INT 0
62894: PPUSH
62895: PPUSH
// if not IsInUnit ( unit ) then
62896: LD_VAR 0 1
62900: PPUSH
62901: CALL_OW 310
62905: NOT
62906: IFFALSE 62910
// exit ;
62908: GO 62970
// tmp := IsInUnit ( unit ) ;
62910: LD_ADDR_VAR 0 3
62914: PUSH
62915: LD_VAR 0 1
62919: PPUSH
62920: CALL_OW 310
62924: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
62925: LD_VAR 0 3
62929: PPUSH
62930: CALL_OW 247
62934: PUSH
62935: LD_INT 2
62937: EQUAL
62938: IFFALSE 62951
// ComExitVehicle ( unit ) else
62940: LD_VAR 0 1
62944: PPUSH
62945: CALL_OW 121
62949: GO 62960
// ComExitBuilding ( unit ) ;
62951: LD_VAR 0 1
62955: PPUSH
62956: CALL_OW 122
// result := tmp ;
62960: LD_ADDR_VAR 0 2
62964: PUSH
62965: LD_VAR 0 3
62969: ST_TO_ADDR
// end ;
62970: LD_VAR 0 2
62974: RET
// export function ResetHc ; begin
62975: LD_INT 0
62977: PPUSH
// InitHc ;
62978: CALL_OW 19
// hc_importance := 0 ;
62982: LD_ADDR_OWVAR 32
62986: PUSH
62987: LD_INT 0
62989: ST_TO_ADDR
// end ;
62990: LD_VAR 0 1
62994: RET
