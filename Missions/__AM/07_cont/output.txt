// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// Init ;
   8: CALL 44 0 0
// DebugMode ;
  12: CALL 265 0 0
// AnimateTrees ( true ) ;
  16: LD_INT 1
  18: PPUSH
  19: CALL_OW 573
// CreateNature ;
  23: CALL 1568 0 0
// PrepareRussians ;
  27: CALL 4578 0 0
// PrepareAmericans ;
  31: CALL 3448 0 0
// Action ;
  35: CALL 8661 0 0
// SaveForQuickRestart ;
  39: CALL_OW 22
// end ;
  43: END
// export debug ; export mission_prev_prefix , mission_prefix ; export buildings_counter , time_to_end , can_end , must_end , kill_counter ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// mission_prefix := 07c_ ;
  55: LD_ADDR_EXP 3
  59: PUSH
  60: LD_STRING 07c_
  62: ST_TO_ADDR
// mission_prev_prefix := 07_ ;
  63: LD_ADDR_EXP 2
  67: PUSH
  68: LD_STRING 07_
  70: ST_TO_ADDR
// buildings_counter := 0 ;
  71: LD_ADDR_EXP 4
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// time_to_end := [ [ 32 32$00 , 29 29$00 , 26 26$00 , 23 23$00 ] [ Difficulty ] , [ 38 38$00 , 36 36$00 , 34 34$00 , 32 32$00 ] [ Difficulty ] , [ 43 43$00 , 41 41$00 , 39 39$00 , 37 37$00 ] [ Difficulty ] ] ;
  79: LD_ADDR_EXP 5
  83: PUSH
  84: LD_INT 67200
  86: PUSH
  87: LD_INT 60900
  89: PUSH
  90: LD_INT 54600
  92: PUSH
  93: LD_INT 48300
  95: PUSH
  96: EMPTY
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: PUSH
 102: LD_OWVAR 67
 106: ARRAY
 107: PUSH
 108: LD_INT 79800
 110: PUSH
 111: LD_INT 75600
 113: PUSH
 114: LD_INT 71400
 116: PUSH
 117: LD_INT 67200
 119: PUSH
 120: EMPTY
 121: LIST
 122: LIST
 123: LIST
 124: LIST
 125: PUSH
 126: LD_OWVAR 67
 130: ARRAY
 131: PUSH
 132: LD_INT 90300
 134: PUSH
 135: LD_INT 86100
 137: PUSH
 138: LD_INT 81900
 140: PUSH
 141: LD_INT 77700
 143: PUSH
 144: EMPTY
 145: LIST
 146: LIST
 147: LIST
 148: LIST
 149: PUSH
 150: LD_OWVAR 67
 154: ARRAY
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: ST_TO_ADDR
// can_end := false ;
 161: LD_ADDR_EXP 6
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// must_end := false ;
 169: LD_ADDR_EXP 7
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// kill_counter := 0 ;
 177: LD_ADDR_EXP 8
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// end ;
 185: LD_VAR 0 1
 189: RET
// every 0 0$01 trigger not debug do
 190: LD_EXP 1
 194: NOT
 195: IFFALSE 264
 197: GO 199
 199: DISABLE
// begin enable ;
 200: ENABLE
// if not must_end then
 201: LD_EXP 7
 205: NOT
 206: IFFALSE 227
// display_strings := [ #Am07-1 , tick ] else
 208: LD_ADDR_OWVAR 47
 212: PUSH
 213: LD_STRING #Am07-1
 215: PUSH
 216: LD_OWVAR 1
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: ST_TO_ADDR
 225: GO 264
// display_strings := [ #Am07-1 , tick , #Am07-2 , time_to_end [ 3 ] - tick ] ;
 227: LD_ADDR_OWVAR 47
 231: PUSH
 232: LD_STRING #Am07-1
 234: PUSH
 235: LD_OWVAR 1
 239: PUSH
 240: LD_STRING #Am07-2
 242: PUSH
 243: LD_EXP 5
 247: PUSH
 248: LD_INT 3
 250: ARRAY
 251: PUSH
 252: LD_OWVAR 1
 256: MINUS
 257: PUSH
 258: EMPTY
 259: LIST
 260: LIST
 261: LIST
 262: LIST
 263: ST_TO_ADDR
// end ;
 264: END
// function DebugMode ; var i ; begin
 265: LD_INT 0
 267: PPUSH
 268: PPUSH
// if not debug then
 269: LD_EXP 1
 273: NOT
 274: IFFALSE 278
// exit ;
 276: GO 293
// Difficulty := 4 ;
 278: LD_ADDR_OWVAR 67
 282: PUSH
 283: LD_INT 4
 285: ST_TO_ADDR
// FogOff ( 1 ) ;
 286: LD_INT 1
 288: PPUSH
 289: CALL_OW 344
// end ;
 293: LD_VAR 0 1
 297: RET
// every 3 trigger debug do var i , filter ;
 298: LD_EXP 1
 302: IFFALSE 391
 304: GO 306
 306: DISABLE
 307: LD_INT 0
 309: PPUSH
 310: PPUSH
// begin enable ;
 311: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 500 ] ] ] ) ;
 312: LD_ADDR_VAR 0 2
 316: PUSH
 317: LD_INT 22
 319: PUSH
 320: LD_INT 1
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PUSH
 327: LD_INT 3
 329: PUSH
 330: LD_INT 24
 332: PUSH
 333: LD_INT 500
 335: PUSH
 336: EMPTY
 337: LIST
 338: LIST
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: PPUSH
 348: CALL_OW 69
 352: ST_TO_ADDR
// if not filter then
 353: LD_VAR 0 2
 357: NOT
 358: IFFALSE 362
// exit ;
 360: GO 391
// for i in filter do
 362: LD_ADDR_VAR 0 1
 366: PUSH
 367: LD_VAR 0 2
 371: PUSH
 372: FOR_IN
 373: IFFALSE 389
// SetLives ( i , 1000 ) ;
 375: LD_VAR 0 1
 379: PPUSH
 380: LD_INT 1000
 382: PPUSH
 383: CALL_OW 234
 387: GO 372
 389: POP
 390: POP
// end ;
 391: PPOPN 2
 393: END
// every 0 0$1 trigger kill_counter >= 20 do
 394: LD_EXP 8
 398: PUSH
 399: LD_INT 20
 401: GREATEREQUAL
 402: IFFALSE 414
 404: GO 406
 406: DISABLE
// SetAchievement ( ACH_HITMAN ) ;
 407: LD_STRING ACH_HITMAN
 409: PPUSH
 410: CALL_OW 543
 414: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) >= 3 do
 415: LD_INT 22
 417: PUSH
 418: LD_INT 1
 420: PUSH
 421: EMPTY
 422: LIST
 423: LIST
 424: PUSH
 425: LD_INT 23
 427: PUSH
 428: LD_INT 3
 430: PUSH
 431: EMPTY
 432: LIST
 433: LIST
 434: PUSH
 435: LD_INT 21
 437: PUSH
 438: LD_INT 2
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: LIST
 449: PPUSH
 450: CALL_OW 69
 454: PUSH
 455: LD_INT 3
 457: GREATEREQUAL
 458: IFFALSE 470
 460: GO 462
 462: DISABLE
// SetAchievement ( ACH_TANKACE ) ;
 463: LD_STRING ACH_TANKACE
 465: PPUSH
 466: CALL_OW 543
 470: END
// every 0 0$1 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) = 0 do
 471: LD_INT 2
 473: PUSH
 474: LD_INT 30
 476: PUSH
 477: LD_INT 0
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PUSH
 484: LD_INT 30
 486: PUSH
 487: LD_INT 1
 489: PUSH
 490: EMPTY
 491: LIST
 492: LIST
 493: PUSH
 494: EMPTY
 495: LIST
 496: LIST
 497: LIST
 498: PPUSH
 499: CALL_OW 69
 503: PUSH
 504: LD_INT 0
 506: EQUAL
 507: IFFALSE 519
 509: GO 511
 511: DISABLE
// SetAchievement ( ACH_COMMANDO ) ; end_of_file
 512: LD_STRING ACH_COMMANDO
 514: PPUSH
 515: CALL_OW 543
 519: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 520: LD_INT 0
 522: PPUSH
// uc_side := side ;
 523: LD_ADDR_OWVAR 20
 527: PUSH
 528: LD_VAR 0 1
 532: ST_TO_ADDR
// uc_nation := nation ;
 533: LD_ADDR_OWVAR 21
 537: PUSH
 538: LD_VAR 0 2
 542: ST_TO_ADDR
// vc_chassis := chassis ;
 543: LD_ADDR_OWVAR 37
 547: PUSH
 548: LD_VAR 0 3
 552: ST_TO_ADDR
// vc_engine := engine ;
 553: LD_ADDR_OWVAR 39
 557: PUSH
 558: LD_VAR 0 4
 562: ST_TO_ADDR
// vc_control := control ;
 563: LD_ADDR_OWVAR 38
 567: PUSH
 568: LD_VAR 0 5
 572: ST_TO_ADDR
// vc_weapon := weapon ;
 573: LD_ADDR_OWVAR 40
 577: PUSH
 578: LD_VAR 0 6
 582: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 583: LD_ADDR_OWVAR 41
 587: PUSH
 588: LD_VAR 0 7
 592: ST_TO_ADDR
// result := CreateVehicle ;
 593: LD_ADDR_VAR 0 8
 597: PUSH
 598: CALL_OW 45
 602: ST_TO_ADDR
// end ;
 603: LD_VAR 0 8
 607: RET
// export function GetRandom ( sex ) ; var i , filter ; begin
 608: LD_INT 0
 610: PPUSH
 611: PPUSH
 612: PPUSH
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] ;
 613: LD_ADDR_VAR 0 4
 617: PUSH
 618: LD_INT 22
 620: PUSH
 621: LD_INT 1
 623: PUSH
 624: EMPTY
 625: LIST
 626: LIST
 627: PUSH
 628: LD_INT 21
 630: PUSH
 631: LD_INT 1
 633: PUSH
 634: EMPTY
 635: LIST
 636: LIST
 637: PUSH
 638: LD_INT 50
 640: PUSH
 641: EMPTY
 642: LIST
 643: PUSH
 644: EMPTY
 645: LIST
 646: LIST
 647: LIST
 648: PPUSH
 649: CALL_OW 69
 653: PUSH
 654: LD_EXP 9
 658: PUSH
 659: LD_EXP 10
 663: PUSH
 664: LD_EXP 11
 668: PUSH
 669: LD_EXP 12
 673: PUSH
 674: LD_EXP 13
 678: PUSH
 679: LD_EXP 14
 683: PUSH
 684: LD_EXP 15
 688: PUSH
 689: LD_EXP 16
 693: PUSH
 694: LD_EXP 18
 698: PUSH
 699: LD_EXP 17
 703: PUSH
 704: EMPTY
 705: LIST
 706: LIST
 707: LIST
 708: LIST
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: DIFF
 716: ST_TO_ADDR
// if not filter then
 717: LD_VAR 0 4
 721: NOT
 722: IFFALSE 726
// exit ;
 724: GO 753
// result := UnitFilter ( filter , [ f_sex , sex ] ) ;
 726: LD_ADDR_VAR 0 2
 730: PUSH
 731: LD_VAR 0 4
 735: PPUSH
 736: LD_INT 26
 738: PUSH
 739: LD_VAR 0 1
 743: PUSH
 744: EMPTY
 745: LIST
 746: LIST
 747: PPUSH
 748: CALL_OW 72
 752: ST_TO_ADDR
// end ;
 753: LD_VAR 0 2
 757: RET
// export function SayX ( units , ident ) ; var i ; begin
 758: LD_INT 0
 760: PPUSH
 761: PPUSH
// result := false ;
 762: LD_ADDR_VAR 0 3
 766: PUSH
 767: LD_INT 0
 769: ST_TO_ADDR
// if not units then
 770: LD_VAR 0 1
 774: NOT
 775: IFFALSE 779
// exit ;
 777: GO 833
// for i in units do
 779: LD_ADDR_VAR 0 4
 783: PUSH
 784: LD_VAR 0 1
 788: PUSH
 789: FOR_IN
 790: IFFALSE 831
// if IsOk ( i ) then
 792: LD_VAR 0 4
 796: PPUSH
 797: CALL_OW 302
 801: IFFALSE 829
// begin Say ( i , ident ) ;
 803: LD_VAR 0 4
 807: PPUSH
 808: LD_VAR 0 2
 812: PPUSH
 813: CALL_OW 88
// result := i ;
 817: LD_ADDR_VAR 0 3
 821: PUSH
 822: LD_VAR 0 4
 826: ST_TO_ADDR
// break ;
 827: GO 831
// end ;
 829: GO 789
 831: POP
 832: POP
// end ;
 833: LD_VAR 0 3
 837: RET
// export function GoToAnotherTower ( un , b , x , y ) ; var i , filter , barracks , side ; begin
 838: LD_INT 0
 840: PPUSH
 841: PPUSH
 842: PPUSH
 843: PPUSH
 844: PPUSH
// if not un or not IsOk ( un ) then
 845: LD_VAR 0 1
 849: NOT
 850: PUSH
 851: LD_VAR 0 1
 855: PPUSH
 856: CALL_OW 302
 860: NOT
 861: OR
 862: IFFALSE 866
// exit ;
 864: GO 1173
// side := GetSide ( un ) ;
 866: LD_ADDR_VAR 0 9
 870: PUSH
 871: LD_VAR 0 1
 875: PPUSH
 876: CALL_OW 255
 880: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_not , [ f_tag , 7 ] ] , [ f_ok ] , [ f_empty ] ] ) diff b ;
 881: LD_ADDR_VAR 0 7
 885: PUSH
 886: LD_INT 22
 888: PUSH
 889: LD_VAR 0 9
 893: PUSH
 894: EMPTY
 895: LIST
 896: LIST
 897: PUSH
 898: LD_INT 30
 900: PUSH
 901: LD_INT 32
 903: PUSH
 904: EMPTY
 905: LIST
 906: LIST
 907: PUSH
 908: LD_INT 3
 910: PUSH
 911: LD_INT 120
 913: PUSH
 914: LD_INT 7
 916: PUSH
 917: EMPTY
 918: LIST
 919: LIST
 920: PUSH
 921: EMPTY
 922: LIST
 923: LIST
 924: PUSH
 925: LD_INT 50
 927: PUSH
 928: EMPTY
 929: LIST
 930: PUSH
 931: LD_INT 58
 933: PUSH
 934: EMPTY
 935: LIST
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: LIST
 941: LIST
 942: LIST
 943: PPUSH
 944: CALL_OW 69
 948: PUSH
 949: LD_VAR 0 2
 953: DIFF
 954: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_barracks ] ] ) ;
 955: LD_ADDR_VAR 0 8
 959: PUSH
 960: LD_INT 22
 962: PUSH
 963: LD_VAR 0 9
 967: PUSH
 968: EMPTY
 969: LIST
 970: LIST
 971: PUSH
 972: LD_INT 30
 974: PUSH
 975: LD_INT 5
 977: PUSH
 978: EMPTY
 979: LIST
 980: LIST
 981: PUSH
 982: EMPTY
 983: LIST
 984: LIST
 985: PPUSH
 986: CALL_OW 69
 990: ST_TO_ADDR
// if not filter then
 991: LD_VAR 0 7
 995: NOT
 996: IFFALSE 1086
// begin if barracks then
 998: LD_VAR 0 8
1002: IFFALSE 1065
// for i in barracks do
1004: LD_ADDR_VAR 0 6
1008: PUSH
1009: LD_VAR 0 8
1013: PUSH
1014: FOR_IN
1015: IFFALSE 1063
// begin if UnitsInside ( i ) < 6 and IsOk ( i ) then
1017: LD_VAR 0 6
1021: PPUSH
1022: CALL_OW 313
1026: PUSH
1027: LD_INT 6
1029: LESS
1030: PUSH
1031: LD_VAR 0 6
1035: PPUSH
1036: CALL_OW 302
1040: AND
1041: IFFALSE 1061
// begin ComEnterUnit ( un , i ) ;
1043: LD_VAR 0 1
1047: PPUSH
1048: LD_VAR 0 6
1052: PPUSH
1053: CALL_OW 120
// exit ;
1057: POP
1058: POP
1059: GO 1173
// end ; end ;
1061: GO 1014
1063: POP
1064: POP
// ComMoveXY ( un , x , y ) ;
1065: LD_VAR 0 1
1069: PPUSH
1070: LD_VAR 0 3
1074: PPUSH
1075: LD_VAR 0 4
1079: PPUSH
1080: CALL_OW 111
// end else
1084: GO 1173
// begin filter := SortByDistanceUnit ( un , filter , true , true ) ;
1086: LD_ADDR_VAR 0 7
1090: PUSH
1091: LD_VAR 0 1
1095: PPUSH
1096: LD_VAR 0 7
1100: PPUSH
1101: LD_INT 1
1103: PPUSH
1104: LD_INT 1
1106: PPUSH
1107: CALL 37751 0 4
1111: ST_TO_ADDR
// if filter then
1112: LD_VAR 0 7
1116: IFFALSE 1154
// begin SetTag ( filter [ 1 ] , 7 ) ;
1118: LD_VAR 0 7
1122: PUSH
1123: LD_INT 1
1125: ARRAY
1126: PPUSH
1127: LD_INT 7
1129: PPUSH
1130: CALL_OW 109
// ComEnterUnit ( un , filter [ 1 ] ) ;
1134: LD_VAR 0 1
1138: PPUSH
1139: LD_VAR 0 7
1143: PUSH
1144: LD_INT 1
1146: ARRAY
1147: PPUSH
1148: CALL_OW 120
// end else
1152: GO 1173
// ComMoveXY ( un , x , y ) ;
1154: LD_VAR 0 1
1158: PPUSH
1159: LD_VAR 0 3
1163: PPUSH
1164: LD_VAR 0 4
1168: PPUSH
1169: CALL_OW 111
// end ; end ;
1173: LD_VAR 0 5
1177: RET
// export function BaseNeedEnergy ( base ) ; var i , tmp ; begin
1178: LD_INT 0
1180: PPUSH
1181: PPUSH
1182: PPUSH
// if not base then
1183: LD_VAR 0 1
1187: NOT
1188: IFFALSE 1192
// exit ;
1190: GO 1250
// tmp := GetEnergy ( GetBase ( base ) ) ;
1192: LD_ADDR_VAR 0 4
1196: PUSH
1197: LD_VAR 0 1
1201: PPUSH
1202: CALL_OW 274
1206: PPUSH
1207: CALL_OW 278
1211: ST_TO_ADDR
// if tmp [ 1 ] > tmp [ 4 ] then
1212: LD_VAR 0 4
1216: PUSH
1217: LD_INT 1
1219: ARRAY
1220: PUSH
1221: LD_VAR 0 4
1225: PUSH
1226: LD_INT 4
1228: ARRAY
1229: GREATER
1230: IFFALSE 1242
// result := true else
1232: LD_ADDR_VAR 0 2
1236: PUSH
1237: LD_INT 1
1239: ST_TO_ADDR
1240: GO 1250
// result := false ;
1242: LD_ADDR_VAR 0 2
1246: PUSH
1247: LD_INT 0
1249: ST_TO_ADDR
// end ;
1250: LD_VAR 0 2
1254: RET
// export function FilterPeople ( side ) ; begin
1255: LD_INT 0
1257: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) ;
1258: LD_ADDR_VAR 0 2
1262: PUSH
1263: LD_INT 22
1265: PUSH
1266: LD_VAR 0 1
1270: PUSH
1271: EMPTY
1272: LIST
1273: LIST
1274: PUSH
1275: LD_INT 21
1277: PUSH
1278: LD_INT 1
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: PUSH
1285: EMPTY
1286: LIST
1287: LIST
1288: PPUSH
1289: CALL_OW 69
1293: ST_TO_ADDR
// end ;
1294: LD_VAR 0 2
1298: RET
// export function FilterDrivers ( side ) ; begin
1299: LD_INT 0
1301: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_outside ] ] ] ) ;
1302: LD_ADDR_VAR 0 2
1306: PUSH
1307: LD_INT 22
1309: PUSH
1310: LD_VAR 0 1
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: PUSH
1319: LD_INT 3
1321: PUSH
1322: LD_INT 56
1324: PUSH
1325: EMPTY
1326: LIST
1327: PUSH
1328: EMPTY
1329: LIST
1330: LIST
1331: PUSH
1332: EMPTY
1333: LIST
1334: LIST
1335: PPUSH
1336: CALL_OW 69
1340: ST_TO_ADDR
// end ;
1341: LD_VAR 0 2
1345: RET
// export function FilterPeopleArea ( side , area ) ; begin
1346: LD_INT 0
1348: PPUSH
// result := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
1349: LD_ADDR_VAR 0 3
1353: PUSH
1354: LD_VAR 0 2
1358: PPUSH
1359: LD_INT 22
1361: PUSH
1362: LD_INT 1
1364: PUSH
1365: EMPTY
1366: LIST
1367: LIST
1368: PUSH
1369: LD_INT 21
1371: PUSH
1372: LD_INT 1
1374: PUSH
1375: EMPTY
1376: LIST
1377: LIST
1378: PUSH
1379: EMPTY
1380: LIST
1381: LIST
1382: PPUSH
1383: CALL_OW 70
1387: ST_TO_ADDR
// end ;
1388: LD_VAR 0 3
1392: RET
// export function FilterDriversArea ( side , area ) ; var i , tmp ; begin
1393: LD_INT 0
1395: PPUSH
1396: PPUSH
1397: PPUSH
// tmp := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
1398: LD_ADDR_VAR 0 5
1402: PUSH
1403: LD_VAR 0 2
1407: PPUSH
1408: LD_INT 22
1410: PUSH
1411: LD_INT 1
1413: PUSH
1414: EMPTY
1415: LIST
1416: LIST
1417: PUSH
1418: LD_INT 21
1420: PUSH
1421: LD_INT 2
1423: PUSH
1424: EMPTY
1425: LIST
1426: LIST
1427: PUSH
1428: LD_INT 3
1430: PUSH
1431: LD_INT 58
1433: PUSH
1434: EMPTY
1435: LIST
1436: PUSH
1437: EMPTY
1438: LIST
1439: LIST
1440: PUSH
1441: EMPTY
1442: LIST
1443: LIST
1444: LIST
1445: PPUSH
1446: CALL_OW 70
1450: ST_TO_ADDR
// result := [ ] ;
1451: LD_ADDR_VAR 0 3
1455: PUSH
1456: EMPTY
1457: ST_TO_ADDR
// if not tmp then
1458: LD_VAR 0 5
1462: NOT
1463: IFFALSE 1467
// exit ;
1465: GO 1519
// for i in tmp do
1467: LD_ADDR_VAR 0 4
1471: PUSH
1472: LD_VAR 0 5
1476: PUSH
1477: FOR_IN
1478: IFFALSE 1503
// result := result union IsDrivenBy ( i ) ;
1480: LD_ADDR_VAR 0 3
1484: PUSH
1485: LD_VAR 0 3
1489: PUSH
1490: LD_VAR 0 4
1494: PPUSH
1495: CALL_OW 311
1499: UNION
1500: ST_TO_ADDR
1501: GO 1477
1503: POP
1504: POP
// result := result diff 0 ;
1505: LD_ADDR_VAR 0 3
1509: PUSH
1510: LD_VAR 0 3
1514: PUSH
1515: LD_INT 0
1517: DIFF
1518: ST_TO_ADDR
// end ;
1519: LD_VAR 0 3
1523: RET
// export function FilterBuildings ( side ) ; begin
1524: LD_INT 0
1526: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
1527: LD_ADDR_VAR 0 2
1531: PUSH
1532: LD_INT 22
1534: PUSH
1535: LD_VAR 0 1
1539: PUSH
1540: EMPTY
1541: LIST
1542: LIST
1543: PUSH
1544: LD_INT 21
1546: PUSH
1547: LD_INT 3
1549: PUSH
1550: EMPTY
1551: LIST
1552: LIST
1553: PUSH
1554: EMPTY
1555: LIST
1556: LIST
1557: PPUSH
1558: CALL_OW 69
1562: ST_TO_ADDR
// end ;
1563: LD_VAR 0 2
1567: RET
// export function CreateNature ; var i , animal , nat_area ; begin
1568: LD_INT 0
1570: PPUSH
1571: PPUSH
1572: PPUSH
1573: PPUSH
// uc_side = 0 ;
1574: LD_ADDR_OWVAR 20
1578: PUSH
1579: LD_INT 0
1581: ST_TO_ADDR
// uc_nation = 0 ;
1582: LD_ADDR_OWVAR 21
1586: PUSH
1587: LD_INT 0
1589: ST_TO_ADDR
// nat_area := wildArea ;
1590: LD_ADDR_VAR 0 4
1594: PUSH
1595: LD_INT 3
1597: ST_TO_ADDR
// InitHc ;
1598: CALL_OW 19
// for i = 1 to 4 do
1602: LD_ADDR_VAR 0 2
1606: PUSH
1607: DOUBLE
1608: LD_INT 1
1610: DEC
1611: ST_TO_ADDR
1612: LD_INT 4
1614: PUSH
1615: FOR_TO
1616: IFFALSE 1671
// begin hc_class = 18 ;
1618: LD_ADDR_OWVAR 28
1622: PUSH
1623: LD_INT 18
1625: ST_TO_ADDR
// hc_gallery =  ;
1626: LD_ADDR_OWVAR 33
1630: PUSH
1631: LD_STRING 
1633: ST_TO_ADDR
// hc_face_number = 1 ;
1634: LD_ADDR_OWVAR 34
1638: PUSH
1639: LD_INT 1
1641: ST_TO_ADDR
// animal := CreateHuman ;
1642: LD_ADDR_VAR 0 3
1646: PUSH
1647: CALL_OW 44
1651: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1652: LD_VAR 0 3
1656: PPUSH
1657: LD_VAR 0 4
1661: PPUSH
1662: LD_INT 0
1664: PPUSH
1665: CALL_OW 49
// end ;
1669: GO 1615
1671: POP
1672: POP
// for i = 1 to 6 do
1673: LD_ADDR_VAR 0 2
1677: PUSH
1678: DOUBLE
1679: LD_INT 1
1681: DEC
1682: ST_TO_ADDR
1683: LD_INT 6
1685: PUSH
1686: FOR_TO
1687: IFFALSE 1758
// begin hc_class = class_tiger ;
1689: LD_ADDR_OWVAR 28
1693: PUSH
1694: LD_INT 14
1696: ST_TO_ADDR
// hc_gallery =  ;
1697: LD_ADDR_OWVAR 33
1701: PUSH
1702: LD_STRING 
1704: ST_TO_ADDR
// hc_agressivity = Rand ( 0 , 10 ) ;
1705: LD_ADDR_OWVAR 35
1709: PUSH
1710: LD_INT 0
1712: PPUSH
1713: LD_INT 10
1715: PPUSH
1716: CALL_OW 12
1720: ST_TO_ADDR
// hc_face_number = 3 ;
1721: LD_ADDR_OWVAR 34
1725: PUSH
1726: LD_INT 3
1728: ST_TO_ADDR
// animal := CreateHuman ;
1729: LD_ADDR_VAR 0 3
1733: PUSH
1734: CALL_OW 44
1738: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1739: LD_VAR 0 3
1743: PPUSH
1744: LD_VAR 0 4
1748: PPUSH
1749: LD_INT 0
1751: PPUSH
1752: CALL_OW 49
// end ;
1756: GO 1686
1758: POP
1759: POP
// for i = 1 to 2 do
1760: LD_ADDR_VAR 0 2
1764: PUSH
1765: DOUBLE
1766: LD_INT 1
1768: DEC
1769: ST_TO_ADDR
1770: LD_INT 2
1772: PUSH
1773: FOR_TO
1774: IFFALSE 1837
// begin hc_class = 21 ;
1776: LD_ADDR_OWVAR 28
1780: PUSH
1781: LD_INT 21
1783: ST_TO_ADDR
// hc_gallery =  ;
1784: LD_ADDR_OWVAR 33
1788: PUSH
1789: LD_STRING 
1791: ST_TO_ADDR
// hc_agressivity = 0 ;
1792: LD_ADDR_OWVAR 35
1796: PUSH
1797: LD_INT 0
1799: ST_TO_ADDR
// hc_face_number = 5 ;
1800: LD_ADDR_OWVAR 34
1804: PUSH
1805: LD_INT 5
1807: ST_TO_ADDR
// animal := CreateHuman ;
1808: LD_ADDR_VAR 0 3
1812: PUSH
1813: CALL_OW 44
1817: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1818: LD_VAR 0 3
1822: PPUSH
1823: LD_VAR 0 4
1827: PPUSH
1828: LD_INT 0
1830: PPUSH
1831: CALL_OW 49
// end ;
1835: GO 1773
1837: POP
1838: POP
// for i = 1 to 6 do
1839: LD_ADDR_VAR 0 2
1843: PUSH
1844: DOUBLE
1845: LD_INT 1
1847: DEC
1848: ST_TO_ADDR
1849: LD_INT 6
1851: PUSH
1852: FOR_TO
1853: IFFALSE 1908
// begin hc_class = 13 ;
1855: LD_ADDR_OWVAR 28
1859: PUSH
1860: LD_INT 13
1862: ST_TO_ADDR
// hc_gallery =  ;
1863: LD_ADDR_OWVAR 33
1867: PUSH
1868: LD_STRING 
1870: ST_TO_ADDR
// hc_face_number = 4 ;
1871: LD_ADDR_OWVAR 34
1875: PUSH
1876: LD_INT 4
1878: ST_TO_ADDR
// animal := CreateHuman ;
1879: LD_ADDR_VAR 0 3
1883: PUSH
1884: CALL_OW 44
1888: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1889: LD_VAR 0 3
1893: PPUSH
1894: LD_VAR 0 4
1898: PPUSH
1899: LD_INT 0
1901: PPUSH
1902: CALL_OW 49
// end ;
1906: GO 1852
1908: POP
1909: POP
// for i = 1 to 2 do
1910: LD_ADDR_VAR 0 2
1914: PUSH
1915: DOUBLE
1916: LD_INT 1
1918: DEC
1919: ST_TO_ADDR
1920: LD_INT 2
1922: PUSH
1923: FOR_TO
1924: IFFALSE 1983
// begin hc_class = 20 ;
1926: LD_ADDR_OWVAR 28
1930: PUSH
1931: LD_INT 20
1933: ST_TO_ADDR
// hc_gallery =  ;
1934: LD_ADDR_OWVAR 33
1938: PUSH
1939: LD_STRING 
1941: ST_TO_ADDR
// hc_face_number = 2 ;
1942: LD_ADDR_OWVAR 34
1946: PUSH
1947: LD_INT 2
1949: ST_TO_ADDR
// animal := CreateHuman ;
1950: LD_ADDR_VAR 0 3
1954: PUSH
1955: CALL_OW 44
1959: ST_TO_ADDR
// PlaceUnitXYR ( animal , 101 , 37 , 3 , false ) ;
1960: LD_VAR 0 3
1964: PPUSH
1965: LD_INT 101
1967: PPUSH
1968: LD_INT 37
1970: PPUSH
1971: LD_INT 3
1973: PPUSH
1974: LD_INT 0
1976: PPUSH
1977: CALL_OW 50
// end ;
1981: GO 1923
1983: POP
1984: POP
// for i = 1 to 1 do
1985: LD_ADDR_VAR 0 2
1989: PUSH
1990: DOUBLE
1991: LD_INT 1
1993: DEC
1994: ST_TO_ADDR
1995: LD_INT 1
1997: PUSH
1998: FOR_TO
1999: IFFALSE 2046
// begin vc_chassis := 31 ;
2001: LD_ADDR_OWVAR 37
2005: PUSH
2006: LD_INT 31
2008: ST_TO_ADDR
// vc_control := control_rider ;
2009: LD_ADDR_OWVAR 38
2013: PUSH
2014: LD_INT 4
2016: ST_TO_ADDR
// animal := CreateVehicle ;
2017: LD_ADDR_VAR 0 3
2021: PUSH
2022: CALL_OW 45
2026: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
2027: LD_VAR 0 3
2031: PPUSH
2032: LD_VAR 0 4
2036: PPUSH
2037: LD_INT 0
2039: PPUSH
2040: CALL_OW 49
// end ;
2044: GO 1998
2046: POP
2047: POP
// end ;
2048: LD_VAR 0 1
2052: RET
// export function NearbyTowerHasEnergy ( unit ) ; var i , tmp , energy ; begin
2053: LD_INT 0
2055: PPUSH
2056: PPUSH
2057: PPUSH
2058: PPUSH
// result := [ ] ;
2059: LD_ADDR_VAR 0 2
2063: PUSH
2064: EMPTY
2065: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_dist , unit , 15 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
2066: LD_ADDR_VAR 0 4
2070: PUSH
2071: LD_INT 81
2073: PUSH
2074: LD_VAR 0 1
2078: PPUSH
2079: CALL_OW 255
2083: PUSH
2084: EMPTY
2085: LIST
2086: LIST
2087: PUSH
2088: LD_INT 91
2090: PUSH
2091: LD_VAR 0 1
2095: PUSH
2096: LD_INT 15
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: LIST
2103: PUSH
2104: LD_INT 2
2106: PUSH
2107: LD_INT 30
2109: PUSH
2110: LD_INT 32
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: PUSH
2117: LD_INT 30
2119: PUSH
2120: LD_INT 33
2122: PUSH
2123: EMPTY
2124: LIST
2125: LIST
2126: PUSH
2127: EMPTY
2128: LIST
2129: LIST
2130: LIST
2131: PUSH
2132: EMPTY
2133: LIST
2134: LIST
2135: LIST
2136: PPUSH
2137: CALL_OW 69
2141: ST_TO_ADDR
// if not tmp then
2142: LD_VAR 0 4
2146: NOT
2147: IFFALSE 2151
// exit ;
2149: GO 2220
// for i in tmp do
2151: LD_ADDR_VAR 0 3
2155: PUSH
2156: LD_VAR 0 4
2160: PUSH
2161: FOR_IN
2162: IFFALSE 2218
// begin energy := GetEnergy ( GetBase ( i ) ) ;
2164: LD_ADDR_VAR 0 5
2168: PUSH
2169: LD_VAR 0 3
2173: PPUSH
2174: CALL_OW 274
2178: PPUSH
2179: CALL_OW 278
2183: ST_TO_ADDR
// if energy [ 4 ] > energy [ 1 ] then
2184: LD_VAR 0 5
2188: PUSH
2189: LD_INT 4
2191: ARRAY
2192: PUSH
2193: LD_VAR 0 5
2197: PUSH
2198: LD_INT 1
2200: ARRAY
2201: GREATER
2202: IFFALSE 2216
// begin result := i ;
2204: LD_ADDR_VAR 0 2
2208: PUSH
2209: LD_VAR 0 3
2213: ST_TO_ADDR
// break ;
2214: GO 2218
// end ; end ;
2216: GO 2161
2218: POP
2219: POP
// end ;
2220: LD_VAR 0 2
2224: RET
// export function GetTurretWeaponBase ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
2225: LD_INT 0
2227: PPUSH
2228: PPUSH
2229: PPUSH
2230: PPUSH
2231: PPUSH
2232: PPUSH
2233: PPUSH
2234: PPUSH
2235: PPUSH
2236: PPUSH
2237: PPUSH
2238: PPUSH
2239: PPUSH
2240: PPUSH
2241: PPUSH
2242: PPUSH
// result := false ;
2243: LD_ADDR_VAR 0 2
2247: PUSH
2248: LD_INT 0
2250: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
2251: LD_VAR 0 1
2255: NOT
2256: PUSH
2257: LD_VAR 0 1
2261: PPUSH
2262: CALL_OW 266
2266: PUSH
2267: LD_INT 32
2269: PUSH
2270: LD_INT 33
2272: PUSH
2273: EMPTY
2274: LIST
2275: LIST
2276: IN
2277: NOT
2278: OR
2279: IFFALSE 2283
// exit ;
2281: GO 3443
// nat := GetNation ( tower ) ;
2283: LD_ADDR_VAR 0 11
2287: PUSH
2288: LD_VAR 0 1
2292: PPUSH
2293: CALL_OW 248
2297: ST_TO_ADDR
// side := GetSide ( tower ) ;
2298: LD_ADDR_VAR 0 15
2302: PUSH
2303: LD_VAR 0 1
2307: PPUSH
2308: CALL_OW 255
2312: ST_TO_ADDR
// x := GetX ( tower ) ;
2313: LD_ADDR_VAR 0 9
2317: PUSH
2318: LD_VAR 0 1
2322: PPUSH
2323: CALL_OW 250
2327: ST_TO_ADDR
// y := GetY ( tower ) ;
2328: LD_ADDR_VAR 0 10
2332: PUSH
2333: LD_VAR 0 1
2337: PPUSH
2338: CALL_OW 251
2342: ST_TO_ADDR
// if not x or not y then
2343: LD_VAR 0 9
2347: NOT
2348: PUSH
2349: LD_VAR 0 10
2353: NOT
2354: OR
2355: IFFALSE 2359
// exit ;
2357: GO 3443
// weapon := 0 ;
2359: LD_ADDR_VAR 0 17
2363: PUSH
2364: LD_INT 0
2366: ST_TO_ADDR
// fac_list := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
2367: LD_ADDR_VAR 0 16
2371: PUSH
2372: LD_INT 42
2374: PUSH
2375: LD_INT 43
2377: PUSH
2378: LD_INT 44
2380: PUSH
2381: LD_INT 46
2383: PUSH
2384: EMPTY
2385: LIST
2386: LIST
2387: LIST
2388: LIST
2389: ST_TO_ADDR
// if not fac_list then
2390: LD_VAR 0 16
2394: NOT
2395: IFFALSE 2399
// exit ;
2397: GO 3443
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
2399: LD_ADDR_VAR 0 4
2403: PUSH
2404: LD_INT 4
2406: PUSH
2407: LD_INT 5
2409: PUSH
2410: LD_INT 9
2412: PUSH
2413: LD_INT 10
2415: PUSH
2416: LD_INT 6
2418: PUSH
2419: LD_INT 7
2421: PUSH
2422: LD_INT 11
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: LIST
2429: LIST
2430: LIST
2431: LIST
2432: LIST
2433: PUSH
2434: LD_INT 27
2436: PUSH
2437: LD_INT 28
2439: PUSH
2440: LD_INT 26
2442: PUSH
2443: LD_INT 30
2445: PUSH
2446: EMPTY
2447: LIST
2448: LIST
2449: LIST
2450: LIST
2451: PUSH
2452: LD_INT 43
2454: PUSH
2455: LD_INT 44
2457: PUSH
2458: LD_INT 46
2460: PUSH
2461: LD_INT 45
2463: PUSH
2464: LD_INT 47
2466: PUSH
2467: LD_INT 49
2469: PUSH
2470: EMPTY
2471: LIST
2472: LIST
2473: LIST
2474: LIST
2475: LIST
2476: LIST
2477: PUSH
2478: EMPTY
2479: LIST
2480: LIST
2481: LIST
2482: PUSH
2483: LD_VAR 0 11
2487: ARRAY
2488: ST_TO_ADDR
// for i in list do
2489: LD_ADDR_VAR 0 7
2493: PUSH
2494: LD_VAR 0 4
2498: PUSH
2499: FOR_IN
2500: IFFALSE 2533
// if not i in fac_list then
2502: LD_VAR 0 7
2506: PUSH
2507: LD_VAR 0 16
2511: IN
2512: NOT
2513: IFFALSE 2531
// list := list diff i ;
2515: LD_ADDR_VAR 0 4
2519: PUSH
2520: LD_VAR 0 4
2524: PUSH
2525: LD_VAR 0 7
2529: DIFF
2530: ST_TO_ADDR
2531: GO 2499
2533: POP
2534: POP
// if not list then
2535: LD_VAR 0 4
2539: NOT
2540: IFFALSE 2544
// exit ;
2542: GO 3443
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
2544: LD_VAR 0 11
2548: PUSH
2549: LD_INT 3
2551: EQUAL
2552: PUSH
2553: LD_INT 49
2555: PUSH
2556: LD_VAR 0 4
2560: IN
2561: AND
2562: PUSH
2563: LD_INT 31
2565: PPUSH
2566: LD_VAR 0 15
2570: PPUSH
2571: CALL_OW 321
2575: PUSH
2576: LD_INT 2
2578: EQUAL
2579: AND
2580: IFFALSE 2640
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
2582: LD_INT 22
2584: PUSH
2585: LD_VAR 0 15
2589: PUSH
2590: EMPTY
2591: LIST
2592: LIST
2593: PUSH
2594: LD_INT 35
2596: PUSH
2597: LD_INT 49
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: PUSH
2604: LD_INT 91
2606: PUSH
2607: LD_VAR 0 1
2611: PUSH
2612: LD_INT 10
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: LIST
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: LIST
2624: PPUSH
2625: CALL_OW 69
2629: NOT
2630: IFFALSE 2640
// weapon := ru_time_lapser ;
2632: LD_ADDR_VAR 0 17
2636: PUSH
2637: LD_INT 49
2639: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
2640: LD_VAR 0 11
2644: PUSH
2645: LD_INT 1
2647: PUSH
2648: LD_INT 2
2650: PUSH
2651: EMPTY
2652: LIST
2653: LIST
2654: IN
2655: PUSH
2656: LD_INT 11
2658: PUSH
2659: LD_VAR 0 4
2663: IN
2664: PUSH
2665: LD_INT 30
2667: PUSH
2668: LD_VAR 0 4
2672: IN
2673: OR
2674: AND
2675: PUSH
2676: LD_INT 6
2678: PPUSH
2679: LD_VAR 0 15
2683: PPUSH
2684: CALL_OW 321
2688: PUSH
2689: LD_INT 2
2691: EQUAL
2692: AND
2693: IFFALSE 2858
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
2695: LD_INT 22
2697: PUSH
2698: LD_VAR 0 15
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: PUSH
2707: LD_INT 2
2709: PUSH
2710: LD_INT 35
2712: PUSH
2713: LD_INT 11
2715: PUSH
2716: EMPTY
2717: LIST
2718: LIST
2719: PUSH
2720: LD_INT 35
2722: PUSH
2723: LD_INT 30
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: LIST
2734: PUSH
2735: LD_INT 91
2737: PUSH
2738: LD_VAR 0 1
2742: PUSH
2743: LD_INT 18
2745: PUSH
2746: EMPTY
2747: LIST
2748: LIST
2749: LIST
2750: PUSH
2751: EMPTY
2752: LIST
2753: LIST
2754: LIST
2755: PPUSH
2756: CALL_OW 69
2760: NOT
2761: PUSH
2762: LD_INT 22
2764: PUSH
2765: LD_VAR 0 15
2769: PUSH
2770: EMPTY
2771: LIST
2772: LIST
2773: PUSH
2774: LD_INT 2
2776: PUSH
2777: LD_INT 30
2779: PUSH
2780: LD_INT 32
2782: PUSH
2783: EMPTY
2784: LIST
2785: LIST
2786: PUSH
2787: LD_INT 30
2789: PUSH
2790: LD_INT 33
2792: PUSH
2793: EMPTY
2794: LIST
2795: LIST
2796: PUSH
2797: EMPTY
2798: LIST
2799: LIST
2800: LIST
2801: PUSH
2802: LD_INT 91
2804: PUSH
2805: LD_VAR 0 1
2809: PUSH
2810: LD_INT 12
2812: PUSH
2813: EMPTY
2814: LIST
2815: LIST
2816: LIST
2817: PUSH
2818: EMPTY
2819: LIST
2820: LIST
2821: LIST
2822: PUSH
2823: EMPTY
2824: LIST
2825: PPUSH
2826: CALL_OW 69
2830: PUSH
2831: LD_INT 2
2833: GREATER
2834: AND
2835: IFFALSE 2858
// weapon := [ us_radar , ar_radar ] [ nat ] ;
2837: LD_ADDR_VAR 0 17
2841: PUSH
2842: LD_INT 11
2844: PUSH
2845: LD_INT 30
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: PUSH
2852: LD_VAR 0 11
2856: ARRAY
2857: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
2858: LD_VAR 0 17
2862: NOT
2863: PUSH
2864: LD_INT 40
2866: PPUSH
2867: LD_VAR 0 15
2871: PPUSH
2872: CALL_OW 321
2876: PUSH
2877: LD_INT 2
2879: EQUAL
2880: AND
2881: PUSH
2882: LD_INT 7
2884: PUSH
2885: LD_VAR 0 4
2889: IN
2890: PUSH
2891: LD_INT 28
2893: PUSH
2894: LD_VAR 0 4
2898: IN
2899: OR
2900: PUSH
2901: LD_INT 45
2903: PUSH
2904: LD_VAR 0 4
2908: IN
2909: OR
2910: AND
2911: IFFALSE 3165
// begin hex := GetHexInfo ( x , y ) ;
2913: LD_ADDR_VAR 0 3
2917: PUSH
2918: LD_VAR 0 9
2922: PPUSH
2923: LD_VAR 0 10
2927: PPUSH
2928: CALL_OW 546
2932: ST_TO_ADDR
// if hex [ 1 ] then
2933: LD_VAR 0 3
2937: PUSH
2938: LD_INT 1
2940: ARRAY
2941: IFFALSE 2945
// exit ;
2943: GO 3443
// height := hex [ 2 ] ;
2945: LD_ADDR_VAR 0 14
2949: PUSH
2950: LD_VAR 0 3
2954: PUSH
2955: LD_INT 2
2957: ARRAY
2958: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
2959: LD_ADDR_VAR 0 13
2963: PUSH
2964: LD_INT 0
2966: PUSH
2967: LD_INT 2
2969: PUSH
2970: LD_INT 3
2972: PUSH
2973: LD_INT 5
2975: PUSH
2976: EMPTY
2977: LIST
2978: LIST
2979: LIST
2980: LIST
2981: ST_TO_ADDR
// for i in tmp do
2982: LD_ADDR_VAR 0 7
2986: PUSH
2987: LD_VAR 0 13
2991: PUSH
2992: FOR_IN
2993: IFFALSE 3163
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
2995: LD_ADDR_VAR 0 8
2999: PUSH
3000: LD_VAR 0 9
3004: PPUSH
3005: LD_VAR 0 7
3009: PPUSH
3010: LD_INT 5
3012: PPUSH
3013: CALL_OW 272
3017: PUSH
3018: LD_VAR 0 10
3022: PPUSH
3023: LD_VAR 0 7
3027: PPUSH
3028: LD_INT 5
3030: PPUSH
3031: CALL_OW 273
3035: PUSH
3036: EMPTY
3037: LIST
3038: LIST
3039: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
3040: LD_VAR 0 8
3044: PUSH
3045: LD_INT 1
3047: ARRAY
3048: PPUSH
3049: LD_VAR 0 8
3053: PUSH
3054: LD_INT 2
3056: ARRAY
3057: PPUSH
3058: CALL_OW 488
3062: IFFALSE 3161
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
3064: LD_ADDR_VAR 0 3
3068: PUSH
3069: LD_VAR 0 8
3073: PUSH
3074: LD_INT 1
3076: ARRAY
3077: PPUSH
3078: LD_VAR 0 8
3082: PUSH
3083: LD_INT 2
3085: ARRAY
3086: PPUSH
3087: CALL_OW 546
3091: ST_TO_ADDR
// if hex [ 1 ] then
3092: LD_VAR 0 3
3096: PUSH
3097: LD_INT 1
3099: ARRAY
3100: IFFALSE 3104
// continue ;
3102: GO 2992
// h := hex [ 2 ] ;
3104: LD_ADDR_VAR 0 12
3108: PUSH
3109: LD_VAR 0 3
3113: PUSH
3114: LD_INT 2
3116: ARRAY
3117: ST_TO_ADDR
// if h + 7 < height then
3118: LD_VAR 0 12
3122: PUSH
3123: LD_INT 7
3125: PLUS
3126: PUSH
3127: LD_VAR 0 14
3131: LESS
3132: IFFALSE 3161
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
3134: LD_ADDR_VAR 0 17
3138: PUSH
3139: LD_INT 7
3141: PUSH
3142: LD_INT 28
3144: PUSH
3145: LD_INT 45
3147: PUSH
3148: EMPTY
3149: LIST
3150: LIST
3151: LIST
3152: PUSH
3153: LD_VAR 0 11
3157: ARRAY
3158: ST_TO_ADDR
// break ;
3159: GO 3163
// end ; end ; end ;
3161: GO 2992
3163: POP
3164: POP
// end ; if not weapon then
3165: LD_VAR 0 17
3169: NOT
3170: IFFALSE 3325
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
3172: LD_ADDR_VAR 0 4
3176: PUSH
3177: LD_VAR 0 4
3181: PUSH
3182: LD_INT 11
3184: PUSH
3185: LD_INT 30
3187: PUSH
3188: LD_INT 49
3190: PUSH
3191: EMPTY
3192: LIST
3193: LIST
3194: LIST
3195: DIFF
3196: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , tower , 6 ] , [ f_not , [ f_bweapon , 0 ] ] ] ) ;
3197: LD_ADDR_VAR 0 13
3201: PUSH
3202: LD_INT 22
3204: PUSH
3205: LD_VAR 0 15
3209: PUSH
3210: EMPTY
3211: LIST
3212: LIST
3213: PUSH
3214: LD_INT 91
3216: PUSH
3217: LD_VAR 0 1
3221: PUSH
3222: LD_INT 6
3224: PUSH
3225: EMPTY
3226: LIST
3227: LIST
3228: LIST
3229: PUSH
3230: LD_INT 3
3232: PUSH
3233: LD_INT 35
3235: PUSH
3236: LD_INT 0
3238: PUSH
3239: EMPTY
3240: LIST
3241: LIST
3242: PUSH
3243: EMPTY
3244: LIST
3245: LIST
3246: PUSH
3247: EMPTY
3248: LIST
3249: LIST
3250: LIST
3251: PPUSH
3252: CALL_OW 69
3256: ST_TO_ADDR
// for i in tmp do
3257: LD_ADDR_VAR 0 7
3261: PUSH
3262: LD_VAR 0 13
3266: PUSH
3267: FOR_IN
3268: IFFALSE 3293
// list := list diff GetBWeapon ( i ) ;
3270: LD_ADDR_VAR 0 4
3274: PUSH
3275: LD_VAR 0 4
3279: PUSH
3280: LD_VAR 0 7
3284: PPUSH
3285: CALL_OW 269
3289: DIFF
3290: ST_TO_ADDR
3291: GO 3267
3293: POP
3294: POP
// if list then
3295: LD_VAR 0 4
3299: IFFALSE 3325
// weapon := list [ rand ( 1 , list ) ] ;
3301: LD_ADDR_VAR 0 17
3305: PUSH
3306: LD_VAR 0 4
3310: PUSH
3311: LD_INT 1
3313: PPUSH
3314: LD_VAR 0 4
3318: PPUSH
3319: CALL_OW 12
3323: ARRAY
3324: ST_TO_ADDR
// end ; if weapon then
3325: LD_VAR 0 17
3329: IFFALSE 3443
// begin tmp := CostOfWeapon ( weapon ) ;
3331: LD_ADDR_VAR 0 13
3335: PUSH
3336: LD_VAR 0 17
3340: PPUSH
3341: CALL_OW 451
3345: ST_TO_ADDR
// j := GetBase ( tower ) ;
3346: LD_ADDR_VAR 0 8
3350: PUSH
3351: LD_VAR 0 1
3355: PPUSH
3356: CALL_OW 274
3360: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
3361: LD_VAR 0 8
3365: PPUSH
3366: LD_INT 1
3368: PPUSH
3369: CALL_OW 275
3373: PUSH
3374: LD_VAR 0 13
3378: PUSH
3379: LD_INT 1
3381: ARRAY
3382: GREATEREQUAL
3383: PUSH
3384: LD_VAR 0 8
3388: PPUSH
3389: LD_INT 2
3391: PPUSH
3392: CALL_OW 275
3396: PUSH
3397: LD_VAR 0 13
3401: PUSH
3402: LD_INT 2
3404: ARRAY
3405: GREATEREQUAL
3406: AND
3407: PUSH
3408: LD_VAR 0 8
3412: PPUSH
3413: LD_INT 3
3415: PPUSH
3416: CALL_OW 275
3420: PUSH
3421: LD_VAR 0 13
3425: PUSH
3426: LD_INT 3
3428: ARRAY
3429: GREATEREQUAL
3430: AND
3431: IFFALSE 3443
// result := weapon ;
3433: LD_ADDR_VAR 0 2
3437: PUSH
3438: LD_VAR 0 17
3442: ST_TO_ADDR
// end ; end ; end_of_file
3443: LD_VAR 0 2
3447: RET
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Khatam , Kikuchi , Harisson ; export function PrepareAmericans ; var i , team , others , veh , m ; begin
3448: LD_INT 0
3450: PPUSH
3451: PPUSH
3452: PPUSH
3453: PPUSH
3454: PPUSH
3455: PPUSH
// uc_side := 1 ;
3456: LD_ADDR_OWVAR 20
3460: PUSH
3461: LD_INT 1
3463: ST_TO_ADDR
// uc_nation := 1 ;
3464: LD_ADDR_OWVAR 21
3468: PUSH
3469: LD_INT 1
3471: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prev_prefix ) ;
3472: LD_ADDR_EXP 9
3476: PUSH
3477: LD_STRING JMM
3479: PPUSH
3480: LD_EXP 1
3484: NOT
3485: PPUSH
3486: LD_EXP 2
3490: PPUSH
3491: CALL 32179 0 3
3495: ST_TO_ADDR
// team := [ JMM ] ;
3496: LD_ADDR_VAR 0 3
3500: PUSH
3501: LD_EXP 9
3505: PUSH
3506: EMPTY
3507: LIST
3508: ST_TO_ADDR
// if LoadVariable ( BrownIn07 , debug ) then
3509: LD_STRING BrownIn07
3511: PPUSH
3512: LD_EXP 1
3516: PPUSH
3517: CALL_OW 30
3521: IFFALSE 3547
// Brown := PrepareUnit ( Brown , ( not debug ) , mission_prev_prefix ) ;
3523: LD_ADDR_EXP 10
3527: PUSH
3528: LD_STRING Brown
3530: PPUSH
3531: LD_EXP 1
3535: NOT
3536: PPUSH
3537: LD_EXP 2
3541: PPUSH
3542: CALL 32179 0 3
3546: ST_TO_ADDR
// if Brown then
3547: LD_EXP 10
3551: IFFALSE 3569
// team := team ^ Brown ;
3553: LD_ADDR_VAR 0 3
3557: PUSH
3558: LD_VAR 0 3
3562: PUSH
3563: LD_EXP 10
3567: ADD
3568: ST_TO_ADDR
// if LoadVariable ( DonaldsonIn07 , debug ) then
3569: LD_STRING DonaldsonIn07
3571: PPUSH
3572: LD_EXP 1
3576: PPUSH
3577: CALL_OW 30
3581: IFFALSE 3607
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prev_prefix ) ;
3583: LD_ADDR_EXP 11
3587: PUSH
3588: LD_STRING Donaldson
3590: PPUSH
3591: LD_EXP 1
3595: NOT
3596: PPUSH
3597: LD_EXP 2
3601: PPUSH
3602: CALL 32179 0 3
3606: ST_TO_ADDR
// if Donaldson then
3607: LD_EXP 11
3611: IFFALSE 3629
// team := team ^ Donaldson ;
3613: LD_ADDR_VAR 0 3
3617: PUSH
3618: LD_VAR 0 3
3622: PUSH
3623: LD_EXP 11
3627: ADD
3628: ST_TO_ADDR
// if LoadVariable ( BobbyIn07 , debug ) then
3629: LD_STRING BobbyIn07
3631: PPUSH
3632: LD_EXP 1
3636: PPUSH
3637: CALL_OW 30
3641: IFFALSE 3667
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prev_prefix ) ;
3643: LD_ADDR_EXP 12
3647: PUSH
3648: LD_STRING Bobby
3650: PPUSH
3651: LD_EXP 1
3655: NOT
3656: PPUSH
3657: LD_EXP 2
3661: PPUSH
3662: CALL 32179 0 3
3666: ST_TO_ADDR
// if Bobby then
3667: LD_EXP 12
3671: IFFALSE 3689
// team := team ^ Bobby ;
3673: LD_ADDR_VAR 0 3
3677: PUSH
3678: LD_VAR 0 3
3682: PUSH
3683: LD_EXP 12
3687: ADD
3688: ST_TO_ADDR
// if LoadVariable ( CyrusIn07 , debug ) then
3689: LD_STRING CyrusIn07
3691: PPUSH
3692: LD_EXP 1
3696: PPUSH
3697: CALL_OW 30
3701: IFFALSE 3727
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prev_prefix ) ;
3703: LD_ADDR_EXP 13
3707: PUSH
3708: LD_STRING Cyrus
3710: PPUSH
3711: LD_EXP 1
3715: NOT
3716: PPUSH
3717: LD_EXP 2
3721: PPUSH
3722: CALL 32179 0 3
3726: ST_TO_ADDR
// if Cyrus then
3727: LD_EXP 13
3731: IFFALSE 3749
// team := team ^ Cyrus ;
3733: LD_ADDR_VAR 0 3
3737: PUSH
3738: LD_VAR 0 3
3742: PUSH
3743: LD_EXP 13
3747: ADD
3748: ST_TO_ADDR
// if LoadVariable ( LisaIn07 , debug ) then
3749: LD_STRING LisaIn07
3751: PPUSH
3752: LD_EXP 1
3756: PPUSH
3757: CALL_OW 30
3761: IFFALSE 3787
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prev_prefix ) ;
3763: LD_ADDR_EXP 14
3767: PUSH
3768: LD_STRING Lisa
3770: PPUSH
3771: LD_EXP 1
3775: NOT
3776: PPUSH
3777: LD_EXP 2
3781: PPUSH
3782: CALL 32179 0 3
3786: ST_TO_ADDR
// if Lisa then
3787: LD_EXP 14
3791: IFFALSE 3809
// team := team ^ Lisa ;
3793: LD_ADDR_VAR 0 3
3797: PUSH
3798: LD_VAR 0 3
3802: PUSH
3803: LD_EXP 14
3807: ADD
3808: ST_TO_ADDR
// if LoadVariable ( GladstoneIn07 , debug ) then
3809: LD_STRING GladstoneIn07
3811: PPUSH
3812: LD_EXP 1
3816: PPUSH
3817: CALL_OW 30
3821: IFFALSE 3847
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , mission_prev_prefix ) ;
3823: LD_ADDR_EXP 16
3827: PUSH
3828: LD_STRING Gladstone
3830: PPUSH
3831: LD_EXP 1
3835: NOT
3836: PPUSH
3837: LD_EXP 2
3841: PPUSH
3842: CALL 32179 0 3
3846: ST_TO_ADDR
// if Gladstone then
3847: LD_EXP 16
3851: IFFALSE 3869
// team := team ^ Gladstone ;
3853: LD_ADDR_VAR 0 3
3857: PUSH
3858: LD_VAR 0 3
3862: PUSH
3863: LD_EXP 16
3867: ADD
3868: ST_TO_ADDR
// if LoadVariable ( KhatamIn07 , debug ) then
3869: LD_STRING KhatamIn07
3871: PPUSH
3872: LD_EXP 1
3876: PPUSH
3877: CALL_OW 30
3881: IFFALSE 3907
// Khatam := PrepareUnit ( Khatam , ( not debug ) , mission_prev_prefix ) ;
3883: LD_ADDR_EXP 17
3887: PUSH
3888: LD_STRING Khatam
3890: PPUSH
3891: LD_EXP 1
3895: NOT
3896: PPUSH
3897: LD_EXP 2
3901: PPUSH
3902: CALL 32179 0 3
3906: ST_TO_ADDR
// if Khatam then
3907: LD_EXP 17
3911: IFFALSE 3929
// team := team ^ Khatam ;
3913: LD_ADDR_VAR 0 3
3917: PUSH
3918: LD_VAR 0 3
3922: PUSH
3923: LD_EXP 17
3927: ADD
3928: ST_TO_ADDR
// others := CreateCharacterSet ( 07_others ) ;
3929: LD_ADDR_VAR 0 4
3933: PUSH
3934: LD_STRING 07_others
3936: PPUSH
3937: CALL_OW 31
3941: ST_TO_ADDR
// if others then
3942: LD_VAR 0 4
3946: IFFALSE 3964
// team := team ^ others ;
3948: LD_ADDR_VAR 0 3
3952: PUSH
3953: LD_VAR 0 3
3957: PUSH
3958: LD_VAR 0 4
3962: ADD
3963: ST_TO_ADDR
// if debug then
3964: LD_EXP 1
3968: IFFALSE 4042
// begin InitHc ;
3970: CALL_OW 19
// for i = 1 to 4 do
3974: LD_ADDR_VAR 0 2
3978: PUSH
3979: DOUBLE
3980: LD_INT 1
3982: DEC
3983: ST_TO_ADDR
3984: LD_INT 4
3986: PUSH
3987: FOR_TO
3988: IFFALSE 4040
// begin PrepareHuman ( false , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , 4 ) ;
3990: LD_INT 0
3992: PPUSH
3993: LD_INT 1
3995: PUSH
3996: LD_INT 3
3998: PUSH
3999: EMPTY
4000: LIST
4001: LIST
4002: PUSH
4003: LD_INT 1
4005: PPUSH
4006: LD_INT 2
4008: PPUSH
4009: CALL_OW 12
4013: ARRAY
4014: PPUSH
4015: LD_INT 4
4017: PPUSH
4018: CALL_OW 380
// team := team ^ CreateHuman ;
4022: LD_ADDR_VAR 0 3
4026: PUSH
4027: LD_VAR 0 3
4031: PUSH
4032: CALL_OW 44
4036: ADD
4037: ST_TO_ADDR
// end ;
4038: GO 3987
4040: POP
4041: POP
// end ; m := 0 ;
4042: LD_ADDR_VAR 0 6
4046: PUSH
4047: LD_INT 0
4049: ST_TO_ADDR
// for i in team do
4050: LD_ADDR_VAR 0 2
4054: PUSH
4055: LD_VAR 0 3
4059: PUSH
4060: FOR_IN
4061: IFFALSE 4268
// if GetClass ( i ) = 3 then
4063: LD_VAR 0 2
4067: PPUSH
4068: CALL_OW 257
4072: PUSH
4073: LD_INT 3
4075: EQUAL
4076: IFFALSE 4224
// begin m := m + 1 ;
4078: LD_ADDR_VAR 0 6
4082: PUSH
4083: LD_VAR 0 6
4087: PUSH
4088: LD_INT 1
4090: PLUS
4091: ST_TO_ADDR
// veh := PrepareTank ( 1 , 1 , [ us_medium_wheeled , us_medium_tracked , us_medium_wheeled , us_light_wheeled ] [ m mod 4 + 1 ] , engine_solar , control_manual , [ us_gatling_gun , us_double_gun , us_light_gun , us_radar ] [ m mod 4 + 1 ] , 60 ) ;
4092: LD_ADDR_VAR 0 5
4096: PUSH
4097: LD_INT 1
4099: PPUSH
4100: LD_INT 1
4102: PPUSH
4103: LD_INT 2
4105: PUSH
4106: LD_INT 3
4108: PUSH
4109: LD_INT 2
4111: PUSH
4112: LD_INT 1
4114: PUSH
4115: EMPTY
4116: LIST
4117: LIST
4118: LIST
4119: LIST
4120: PUSH
4121: LD_VAR 0 6
4125: PUSH
4126: LD_INT 4
4128: MOD
4129: PUSH
4130: LD_INT 1
4132: PLUS
4133: ARRAY
4134: PPUSH
4135: LD_INT 2
4137: PPUSH
4138: LD_INT 1
4140: PPUSH
4141: LD_INT 4
4143: PUSH
4144: LD_INT 5
4146: PUSH
4147: LD_INT 3
4149: PUSH
4150: LD_INT 11
4152: PUSH
4153: EMPTY
4154: LIST
4155: LIST
4156: LIST
4157: LIST
4158: PUSH
4159: LD_VAR 0 6
4163: PUSH
4164: LD_INT 4
4166: MOD
4167: PUSH
4168: LD_INT 1
4170: PLUS
4171: ARRAY
4172: PPUSH
4173: LD_INT 60
4175: PPUSH
4176: CALL 520 0 7
4180: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
4181: LD_VAR 0 5
4185: PPUSH
4186: LD_INT 2
4188: PPUSH
4189: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
4193: LD_VAR 0 5
4197: PPUSH
4198: LD_INT 1
4200: PPUSH
4201: LD_INT 0
4203: PPUSH
4204: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
4208: LD_VAR 0 2
4212: PPUSH
4213: LD_VAR 0 5
4217: PPUSH
4218: CALL_OW 52
// end else
4222: GO 4266
// begin if GetClass ( i ) = 2 then
4224: LD_VAR 0 2
4228: PPUSH
4229: CALL_OW 257
4233: PUSH
4234: LD_INT 2
4236: EQUAL
4237: IFFALSE 4251
// SetClass ( i , 1 ) ;
4239: LD_VAR 0 2
4243: PPUSH
4244: LD_INT 1
4246: PPUSH
4247: CALL_OW 336
// PlaceUnitArea ( i , startArea , false ) ;
4251: LD_VAR 0 2
4255: PPUSH
4256: LD_INT 1
4258: PPUSH
4259: LD_INT 0
4261: PPUSH
4262: CALL_OW 49
// end ;
4266: GO 4060
4268: POP
4269: POP
// uc_side := 4 ;
4270: LD_ADDR_OWVAR 20
4274: PUSH
4275: LD_INT 4
4277: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
4278: LD_ADDR_EXP 19
4282: PUSH
4283: LD_STRING Harisson
4285: PPUSH
4286: LD_INT 0
4288: PPUSH
4289: LD_STRING 
4291: PPUSH
4292: CALL 32179 0 3
4296: ST_TO_ADDR
// PrepareScout ;
4297: CALL 4306 0 0
// end ;
4301: LD_VAR 0 1
4305: RET
// function PrepareScout ; var ape ; begin
4306: LD_INT 0
4308: PPUSH
4309: PPUSH
// uc_side := 4 ;
4310: LD_ADDR_OWVAR 20
4314: PUSH
4315: LD_INT 4
4317: ST_TO_ADDR
// uc_nation := 1 ;
4318: LD_ADDR_OWVAR 21
4322: PUSH
4323: LD_INT 1
4325: ST_TO_ADDR
// if LoadVariable ( FrankIn06 , 0 ) then
4326: LD_STRING FrankIn06
4328: PPUSH
4329: LD_INT 0
4331: PPUSH
4332: CALL_OW 30
4336: IFFALSE 4353
// Frank := CreateCharacter ( 06c_Frank ) else
4338: LD_ADDR_EXP 15
4342: PUSH
4343: LD_STRING 06c_Frank
4345: PPUSH
4346: CALL_OW 34
4350: ST_TO_ADDR
4351: GO 4393
// if LoadVariable ( FrankInDelta , 0 ) then
4353: LD_STRING FrankInDelta
4355: PPUSH
4356: LD_INT 0
4358: PPUSH
4359: CALL_OW 30
4363: IFFALSE 4380
// Frank := CreateCharacter ( 05_Frank ) else
4365: LD_ADDR_EXP 15
4369: PUSH
4370: LD_STRING 05_Frank
4372: PPUSH
4373: CALL_OW 34
4377: ST_TO_ADDR
4378: GO 4393
// Frank := CreateCharacter ( 04_Frank ) ;
4380: LD_ADDR_EXP 15
4384: PUSH
4385: LD_STRING 04_Frank
4387: PPUSH
4388: CALL_OW 34
4392: ST_TO_ADDR
// if Frank then
4393: LD_EXP 15
4397: IFFALSE 4530
// begin PlaceUnitArea ( Frank , scoutArea , false ) ;
4399: LD_EXP 15
4403: PPUSH
4404: LD_INT 2
4406: PPUSH
4407: LD_INT 0
4409: PPUSH
4410: CALL_OW 49
// SetClass ( Frank , 1 ) ;
4414: LD_EXP 15
4418: PPUSH
4419: LD_INT 1
4421: PPUSH
4422: CALL_OW 336
// uc_side := 0 ;
4426: LD_ADDR_OWVAR 20
4430: PUSH
4431: LD_INT 0
4433: ST_TO_ADDR
// uc_nation := 0 ;
4434: LD_ADDR_OWVAR 21
4438: PUSH
4439: LD_INT 0
4441: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 0 ) ;
4442: LD_INT 0
4444: PPUSH
4445: LD_INT 12
4447: PPUSH
4448: LD_INT 0
4450: PPUSH
4451: CALL_OW 380
// ape := CreateHuman ;
4455: LD_ADDR_VAR 0 2
4459: PUSH
4460: CALL_OW 44
4464: ST_TO_ADDR
// PlaceUnitXYR ( ape , GetX ( Frank ) , GetY ( Frank ) , 5 , false ) ;
4465: LD_VAR 0 2
4469: PPUSH
4470: LD_EXP 15
4474: PPUSH
4475: CALL_OW 250
4479: PPUSH
4480: LD_EXP 15
4484: PPUSH
4485: CALL_OW 251
4489: PPUSH
4490: LD_INT 5
4492: PPUSH
4493: LD_INT 0
4495: PPUSH
4496: CALL_OW 50
// ComTurnUnit ( ape , Frank ) ;
4500: LD_VAR 0 2
4504: PPUSH
4505: LD_EXP 15
4509: PPUSH
4510: CALL_OW 119
// ComTurnUnit ( Frank , ape ) ;
4514: LD_EXP 15
4518: PPUSH
4519: LD_VAR 0 2
4523: PPUSH
4524: CALL_OW 119
// exit ;
4528: GO 4573
// end ; Kikuchi := PrepareUnit ( Yamoko , false ,  ) ;
4530: LD_ADDR_EXP 18
4534: PUSH
4535: LD_STRING Yamoko
4537: PPUSH
4538: LD_INT 0
4540: PPUSH
4541: LD_STRING 
4543: PPUSH
4544: CALL 32179 0 3
4548: ST_TO_ADDR
// PlaceUnitArea ( Kikuchi , scoutArea , false ) ;
4549: LD_EXP 18
4553: PPUSH
4554: LD_INT 2
4556: PPUSH
4557: LD_INT 0
4559: PPUSH
4560: CALL_OW 49
// ComHold ( Kikuchi ) ;
4564: LD_EXP 18
4568: PPUSH
4569: CALL_OW 140
// end ; end_of_file
4573: LD_VAR 0 1
4577: RET
// export ru_rebuild_list ; export function PrepareRussians ; var i , j , r , un , skill , filter , tmp , dep_list , lab_list , fac_list , breastworks_list , bunker_list , turret_list , weapons_list , personel_counter ; begin
4578: LD_INT 0
4580: PPUSH
4581: PPUSH
4582: PPUSH
4583: PPUSH
4584: PPUSH
4585: PPUSH
4586: PPUSH
4587: PPUSH
4588: PPUSH
4589: PPUSH
4590: PPUSH
4591: PPUSH
4592: PPUSH
4593: PPUSH
4594: PPUSH
4595: PPUSH
// ru_rebuild_list := [ ] ;
4596: LD_ADDR_EXP 20
4600: PUSH
4601: EMPTY
4602: ST_TO_ADDR
// uc_side := 3 ;
4603: LD_ADDR_OWVAR 20
4607: PUSH
4608: LD_INT 3
4610: ST_TO_ADDR
// uc_nation := 3 ;
4611: LD_ADDR_OWVAR 21
4615: PUSH
4616: LD_INT 3
4618: ST_TO_ADDR
// if Difficulty > 1 then
4619: LD_OWVAR 67
4623: PUSH
4624: LD_INT 1
4626: GREATER
4627: IFFALSE 4763
// begin bc_type := b_breastwork ;
4629: LD_ADDR_OWVAR 42
4633: PUSH
4634: LD_INT 31
4636: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 78 , 74 , 2 ) ;
4637: LD_INT 78
4639: PPUSH
4640: LD_INT 74
4642: PPUSH
4643: LD_INT 2
4645: PPUSH
4646: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 171 , 193 , 4 ) ;
4650: LD_INT 171
4652: PPUSH
4653: LD_INT 193
4655: PPUSH
4656: LD_INT 4
4658: PPUSH
4659: CALL_OW 47
// bc_type := b_turret ;
4663: LD_ADDR_OWVAR 42
4667: PUSH
4668: LD_INT 33
4670: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 129 , 96 , 3 ) ;
4671: LD_INT 129
4673: PPUSH
4674: LD_INT 96
4676: PPUSH
4677: LD_INT 3
4679: PPUSH
4680: CALL_OW 47
// if Difficulty > 2 then
4684: LD_OWVAR 67
4688: PUSH
4689: LD_INT 2
4691: GREATER
4692: IFFALSE 4763
// begin RemoveUnit ( HexInfo ( 83 , 141 ) ) ;
4694: LD_INT 83
4696: PPUSH
4697: LD_INT 141
4699: PPUSH
4700: CALL_OW 428
4704: PPUSH
4705: CALL_OW 64
// RemoveUnit ( HexInfo ( 78 , 133 ) ) ;
4709: LD_INT 78
4711: PPUSH
4712: LD_INT 133
4714: PPUSH
4715: CALL_OW 428
4719: PPUSH
4720: CALL_OW 64
// CreateAndPlaceBuildingXYD ( 83 , 141 , 2 ) ;
4724: LD_INT 83
4726: PPUSH
4727: LD_INT 141
4729: PPUSH
4730: LD_INT 2
4732: PPUSH
4733: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 78 , 133 , 2 ) ;
4737: LD_INT 78
4739: PPUSH
4740: LD_INT 133
4742: PPUSH
4743: LD_INT 2
4745: PPUSH
4746: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 145 , 112 , 3 ) ;
4750: LD_INT 145
4752: PPUSH
4753: LD_INT 112
4755: PPUSH
4756: LD_INT 3
4758: PPUSH
4759: CALL_OW 47
// end ; end ; dep_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
4763: LD_ADDR_VAR 0 9
4767: PUSH
4768: LD_INT 22
4770: PUSH
4771: LD_INT 3
4773: PUSH
4774: EMPTY
4775: LIST
4776: LIST
4777: PUSH
4778: LD_INT 2
4780: PUSH
4781: LD_INT 30
4783: PUSH
4784: LD_INT 0
4786: PUSH
4787: EMPTY
4788: LIST
4789: LIST
4790: PUSH
4791: LD_INT 30
4793: PUSH
4794: LD_INT 1
4796: PUSH
4797: EMPTY
4798: LIST
4799: LIST
4800: PUSH
4801: EMPTY
4802: LIST
4803: LIST
4804: LIST
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: PPUSH
4810: CALL_OW 69
4814: ST_TO_ADDR
// lab_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
4815: LD_ADDR_VAR 0 10
4819: PUSH
4820: LD_INT 22
4822: PUSH
4823: LD_INT 3
4825: PUSH
4826: EMPTY
4827: LIST
4828: LIST
4829: PUSH
4830: LD_INT 2
4832: PUSH
4833: LD_INT 30
4835: PUSH
4836: LD_INT 6
4838: PUSH
4839: EMPTY
4840: LIST
4841: LIST
4842: PUSH
4843: LD_INT 30
4845: PUSH
4846: LD_INT 7
4848: PUSH
4849: EMPTY
4850: LIST
4851: LIST
4852: PUSH
4853: LD_INT 30
4855: PUSH
4856: LD_INT 8
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: PUSH
4869: EMPTY
4870: LIST
4871: LIST
4872: PPUSH
4873: CALL_OW 69
4877: ST_TO_ADDR
// fac_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
4878: LD_ADDR_VAR 0 11
4882: PUSH
4883: LD_INT 22
4885: PUSH
4886: LD_INT 3
4888: PUSH
4889: EMPTY
4890: LIST
4891: LIST
4892: PUSH
4893: LD_INT 30
4895: PUSH
4896: LD_INT 3
4898: PUSH
4899: EMPTY
4900: LIST
4901: LIST
4902: PUSH
4903: EMPTY
4904: LIST
4905: LIST
4906: PPUSH
4907: CALL_OW 69
4911: ST_TO_ADDR
// breastworks_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
4912: LD_ADDR_VAR 0 12
4916: PUSH
4917: LD_INT 22
4919: PUSH
4920: LD_INT 3
4922: PUSH
4923: EMPTY
4924: LIST
4925: LIST
4926: PUSH
4927: LD_INT 30
4929: PUSH
4930: LD_INT 31
4932: PUSH
4933: EMPTY
4934: LIST
4935: LIST
4936: PUSH
4937: EMPTY
4938: LIST
4939: LIST
4940: PPUSH
4941: CALL_OW 69
4945: ST_TO_ADDR
// bunker_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
4946: LD_ADDR_VAR 0 13
4950: PUSH
4951: LD_INT 22
4953: PUSH
4954: LD_INT 3
4956: PUSH
4957: EMPTY
4958: LIST
4959: LIST
4960: PUSH
4961: LD_INT 30
4963: PUSH
4964: LD_INT 32
4966: PUSH
4967: EMPTY
4968: LIST
4969: LIST
4970: PUSH
4971: EMPTY
4972: LIST
4973: LIST
4974: PPUSH
4975: CALL_OW 69
4979: ST_TO_ADDR
// turret_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
4980: LD_ADDR_VAR 0 14
4984: PUSH
4985: LD_INT 22
4987: PUSH
4988: LD_INT 3
4990: PUSH
4991: EMPTY
4992: LIST
4993: LIST
4994: PUSH
4995: LD_INT 30
4997: PUSH
4998: LD_INT 33
5000: PUSH
5001: EMPTY
5002: LIST
5003: LIST
5004: PUSH
5005: EMPTY
5006: LIST
5007: LIST
5008: PPUSH
5009: CALL_OW 69
5013: ST_TO_ADDR
// weapons_list := [ [ ru_heavy_machine_gun , 5 ] , [ ru_gatling_gun , 50 ] , [ ru_gun , 30 ] , [ ru_heavy_gun , 15 ] ] ;
5014: LD_ADDR_VAR 0 15
5018: PUSH
5019: LD_INT 42
5021: PUSH
5022: LD_INT 5
5024: PUSH
5025: EMPTY
5026: LIST
5027: LIST
5028: PUSH
5029: LD_INT 43
5031: PUSH
5032: LD_INT 50
5034: PUSH
5035: EMPTY
5036: LIST
5037: LIST
5038: PUSH
5039: LD_INT 44
5041: PUSH
5042: LD_INT 30
5044: PUSH
5045: EMPTY
5046: LIST
5047: LIST
5048: PUSH
5049: LD_INT 46
5051: PUSH
5052: LD_INT 15
5054: PUSH
5055: EMPTY
5056: LIST
5057: LIST
5058: PUSH
5059: EMPTY
5060: LIST
5061: LIST
5062: LIST
5063: LIST
5064: ST_TO_ADDR
// personel_counter := [ 0 , 4 , 6 , 3 ] ;
5065: LD_ADDR_VAR 0 16
5069: PUSH
5070: LD_INT 0
5072: PUSH
5073: LD_INT 4
5075: PUSH
5076: LD_INT 6
5078: PUSH
5079: LD_INT 3
5081: PUSH
5082: EMPTY
5083: LIST
5084: LIST
5085: LIST
5086: LIST
5087: ST_TO_ADDR
// skill := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
5088: LD_ADDR_VAR 0 6
5092: PUSH
5093: LD_INT 4
5095: PUSH
5096: LD_INT 5
5098: PUSH
5099: LD_INT 6
5101: PUSH
5102: LD_INT 6
5104: PUSH
5105: EMPTY
5106: LIST
5107: LIST
5108: LIST
5109: LIST
5110: PUSH
5111: LD_OWVAR 67
5115: ARRAY
5116: ST_TO_ADDR
// SetBName ( ru_dep_main , am_tukh ) ;
5117: LD_INT 16
5119: PPUSH
5120: LD_STRING am_tukh
5122: PPUSH
5123: CALL_OW 500
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
5127: LD_ADDR_VAR 0 2
5131: PUSH
5132: LD_INT 21
5134: PUSH
5135: LD_INT 3
5137: PUSH
5138: EMPTY
5139: LIST
5140: LIST
5141: PPUSH
5142: CALL_OW 69
5146: PUSH
5147: FOR_IN
5148: IFFALSE 5185
// SetBLevel ( i , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5150: LD_VAR 0 2
5154: PPUSH
5155: LD_INT 4
5157: PUSH
5158: LD_INT 5
5160: PUSH
5161: LD_INT 6
5163: PUSH
5164: LD_INT 7
5166: PUSH
5167: EMPTY
5168: LIST
5169: LIST
5170: LIST
5171: LIST
5172: PUSH
5173: LD_OWVAR 67
5177: ARRAY
5178: PPUSH
5179: CALL_OW 241
5183: GO 5147
5185: POP
5186: POP
// for i in dep_list do
5187: LD_ADDR_VAR 0 2
5191: PUSH
5192: LD_VAR 0 9
5196: PUSH
5197: FOR_IN
5198: IFFALSE 5242
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
5200: LD_VAR 0 2
5204: PPUSH
5205: CALL_OW 274
5209: PPUSH
5210: LD_INT 1
5212: PPUSH
5213: LD_INT 1000
5215: PPUSH
5216: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
5220: LD_VAR 0 2
5224: PPUSH
5225: CALL_OW 274
5229: PPUSH
5230: LD_INT 2
5232: PPUSH
5233: LD_INT 1000
5235: PPUSH
5236: CALL_OW 277
// end ;
5240: GO 5197
5242: POP
5243: POP
// InitHc ;
5244: CALL_OW 19
// tmp := bunker_list * [ 45 , 60 , 75 , 80 ] [ Difficulty ] div 100 ;
5248: LD_ADDR_VAR 0 8
5252: PUSH
5253: LD_VAR 0 13
5257: PUSH
5258: LD_INT 45
5260: PUSH
5261: LD_INT 60
5263: PUSH
5264: LD_INT 75
5266: PUSH
5267: LD_INT 80
5269: PUSH
5270: EMPTY
5271: LIST
5272: LIST
5273: LIST
5274: LIST
5275: PUSH
5276: LD_OWVAR 67
5280: ARRAY
5281: MUL
5282: PUSH
5283: LD_INT 100
5285: DIV
5286: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , tmp ) ;
5287: LD_ADDR_VAR 0 16
5291: PUSH
5292: LD_VAR 0 16
5296: PPUSH
5297: LD_INT 1
5299: PPUSH
5300: LD_VAR 0 8
5304: PPUSH
5305: CALL_OW 1
5309: ST_TO_ADDR
// tmp := [ ] ;
5310: LD_ADDR_VAR 0 8
5314: PUSH
5315: EMPTY
5316: ST_TO_ADDR
// for i in bunker_list do
5317: LD_ADDR_VAR 0 2
5321: PUSH
5322: LD_VAR 0 13
5326: PUSH
5327: FOR_IN
5328: IFFALSE 5424
// if i mod 10 + 1 < tmp then
5330: LD_VAR 0 2
5334: PUSH
5335: LD_INT 10
5337: MOD
5338: PUSH
5339: LD_INT 1
5341: PLUS
5342: PUSH
5343: LD_VAR 0 8
5347: LESS
5348: IFFALSE 5393
// tmp := Insert ( tmp , i mod rand ( 3 , 5 ) + 1 , i ) else
5350: LD_ADDR_VAR 0 8
5354: PUSH
5355: LD_VAR 0 8
5359: PPUSH
5360: LD_VAR 0 2
5364: PUSH
5365: LD_INT 3
5367: PPUSH
5368: LD_INT 5
5370: PPUSH
5371: CALL_OW 12
5375: MOD
5376: PUSH
5377: LD_INT 1
5379: PLUS
5380: PPUSH
5381: LD_VAR 0 2
5385: PPUSH
5386: CALL_OW 2
5390: ST_TO_ADDR
5391: GO 5422
// tmp := Insert ( tmp , tmp + 1 , i ) ;
5393: LD_ADDR_VAR 0 8
5397: PUSH
5398: LD_VAR 0 8
5402: PPUSH
5403: LD_VAR 0 8
5407: PUSH
5408: LD_INT 1
5410: PLUS
5411: PPUSH
5412: LD_VAR 0 2
5416: PPUSH
5417: CALL_OW 2
5421: ST_TO_ADDR
5422: GO 5327
5424: POP
5425: POP
// bunker_list := tmp ;
5426: LD_ADDR_VAR 0 13
5430: PUSH
5431: LD_VAR 0 8
5435: ST_TO_ADDR
// for i in bunker_list ^ turret_list do
5436: LD_ADDR_VAR 0 2
5440: PUSH
5441: LD_VAR 0 13
5445: PUSH
5446: LD_VAR 0 14
5450: ADD
5451: PUSH
5452: FOR_IN
5453: IFFALSE 5476
// PlaceWeaponTurret ( i , GetTurretWeaponBase ( i ) ) ;
5455: LD_VAR 0 2
5459: PPUSH
5460: LD_VAR 0 2
5464: PPUSH
5465: CALL 2225 0 1
5469: PPUSH
5470: CALL_OW 431
5474: GO 5452
5476: POP
5477: POP
// while ( personel_counter [ 1 ] ) do
5478: LD_VAR 0 16
5482: PUSH
5483: LD_INT 1
5485: ARRAY
5486: IFFALSE 5594
// begin i := rand ( 1 , bunker_list ) ;
5488: LD_ADDR_VAR 0 2
5492: PUSH
5493: LD_INT 1
5495: PPUSH
5496: LD_VAR 0 13
5500: PPUSH
5501: CALL_OW 12
5505: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5506: LD_INT 0
5508: PPUSH
5509: LD_INT 1
5511: PPUSH
5512: LD_VAR 0 6
5516: PPUSH
5517: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , bunker_list [ i ] ) ;
5521: CALL_OW 44
5525: PPUSH
5526: LD_VAR 0 13
5530: PUSH
5531: LD_VAR 0 2
5535: ARRAY
5536: PPUSH
5537: CALL_OW 52
// bunker_list := Delete ( bunker_list , i ) ;
5541: LD_ADDR_VAR 0 13
5545: PUSH
5546: LD_VAR 0 13
5550: PPUSH
5551: LD_VAR 0 2
5555: PPUSH
5556: CALL_OW 3
5560: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , personel_counter [ 1 ] - 1 ) ;
5561: LD_ADDR_VAR 0 16
5565: PUSH
5566: LD_VAR 0 16
5570: PPUSH
5571: LD_INT 1
5573: PPUSH
5574: LD_VAR 0 16
5578: PUSH
5579: LD_INT 1
5581: ARRAY
5582: PUSH
5583: LD_INT 1
5585: MINUS
5586: PPUSH
5587: CALL_OW 1
5591: ST_TO_ADDR
// end ;
5592: GO 5478
// for i = 1 to personel_counter [ 2 ] do
5594: LD_ADDR_VAR 0 2
5598: PUSH
5599: DOUBLE
5600: LD_INT 1
5602: DEC
5603: ST_TO_ADDR
5604: LD_VAR 0 16
5608: PUSH
5609: LD_INT 2
5611: ARRAY
5612: PUSH
5613: FOR_TO
5614: IFFALSE 5645
// begin PrepareHuman ( false , 2 , skill ) ;
5616: LD_INT 0
5618: PPUSH
5619: LD_INT 2
5621: PPUSH
5622: LD_VAR 0 6
5626: PPUSH
5627: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru_dep_main ) ;
5631: CALL_OW 44
5635: PPUSH
5636: LD_INT 16
5638: PPUSH
5639: CALL_OW 52
// end ;
5643: GO 5613
5645: POP
5646: POP
// for i = 1 to personel_counter [ 3 ] do
5647: LD_ADDR_VAR 0 2
5651: PUSH
5652: DOUBLE
5653: LD_INT 1
5655: DEC
5656: ST_TO_ADDR
5657: LD_VAR 0 16
5661: PUSH
5662: LD_INT 3
5664: ARRAY
5665: PUSH
5666: FOR_TO
5667: IFFALSE 5714
// begin PrepareHuman ( false , 3 , skill ) ;
5669: LD_INT 0
5671: PPUSH
5672: LD_INT 3
5674: PPUSH
5675: LD_VAR 0 6
5679: PPUSH
5680: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , fac_list [ i mod 2 + 1 ] ) ;
5684: CALL_OW 44
5688: PPUSH
5689: LD_VAR 0 11
5693: PUSH
5694: LD_VAR 0 2
5698: PUSH
5699: LD_INT 2
5701: MOD
5702: PUSH
5703: LD_INT 1
5705: PLUS
5706: ARRAY
5707: PPUSH
5708: CALL_OW 52
// end ;
5712: GO 5666
5714: POP
5715: POP
// for i = 1 to personel_counter [ 4 ] do
5716: LD_ADDR_VAR 0 2
5720: PUSH
5721: DOUBLE
5722: LD_INT 1
5724: DEC
5725: ST_TO_ADDR
5726: LD_VAR 0 16
5730: PUSH
5731: LD_INT 4
5733: ARRAY
5734: PUSH
5735: FOR_TO
5736: IFFALSE 5773
// begin PrepareHuman ( false , 4 , skill ) ;
5738: LD_INT 0
5740: PPUSH
5741: LD_INT 4
5743: PPUSH
5744: LD_VAR 0 6
5748: PPUSH
5749: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , lab_list [ 1 ] ) ;
5753: CALL_OW 44
5757: PPUSH
5758: LD_VAR 0 10
5762: PUSH
5763: LD_INT 1
5765: ARRAY
5766: PPUSH
5767: CALL_OW 52
// end ;
5771: GO 5735
5773: POP
5774: POP
// for i in breastworks_list do
5775: LD_ADDR_VAR 0 2
5779: PUSH
5780: LD_VAR 0 12
5784: PUSH
5785: FOR_IN
5786: IFFALSE 5898
// begin r := GetDir ( i ) ;
5788: LD_ADDR_VAR 0 4
5792: PUSH
5793: LD_VAR 0 2
5797: PPUSH
5798: CALL_OW 254
5802: ST_TO_ADDR
// if r > 3 then
5803: LD_VAR 0 4
5807: PUSH
5808: LD_INT 3
5810: GREATER
5811: IFFALSE 5829
// r := r - 3 else
5813: LD_ADDR_VAR 0 4
5817: PUSH
5818: LD_VAR 0 4
5822: PUSH
5823: LD_INT 3
5825: MINUS
5826: ST_TO_ADDR
5827: GO 5843
// r := r + 3 ;
5829: LD_ADDR_VAR 0 4
5833: PUSH
5834: LD_VAR 0 4
5838: PUSH
5839: LD_INT 3
5841: PLUS
5842: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5843: LD_INT 0
5845: PPUSH
5846: LD_INT 1
5848: PPUSH
5849: LD_VAR 0 6
5853: PPUSH
5854: CALL_OW 380
// un := CreateHuman ;
5858: LD_ADDR_VAR 0 5
5862: PUSH
5863: CALL_OW 44
5867: ST_TO_ADDR
// SetDir ( un , r ) ;
5868: LD_VAR 0 5
5872: PPUSH
5873: LD_VAR 0 4
5877: PPUSH
5878: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
5882: LD_VAR 0 5
5886: PPUSH
5887: LD_VAR 0 2
5891: PPUSH
5892: CALL_OW 52
// end ;
5896: GO 5785
5898: POP
5899: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) ;
5900: LD_ADDR_VAR 0 8
5904: PUSH
5905: LD_INT 22
5907: PUSH
5908: LD_INT 3
5910: PUSH
5911: EMPTY
5912: LIST
5913: LIST
5914: PUSH
5915: LD_INT 25
5917: PUSH
5918: LD_INT 3
5920: PUSH
5921: EMPTY
5922: LIST
5923: LIST
5924: PUSH
5925: EMPTY
5926: LIST
5927: LIST
5928: PPUSH
5929: CALL_OW 69
5933: ST_TO_ADDR
// r := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
5934: LD_ADDR_VAR 0 4
5938: PUSH
5939: LD_INT 4
5941: PUSH
5942: LD_INT 5
5944: PUSH
5945: LD_INT 6
5947: PUSH
5948: LD_INT 6
5950: PUSH
5951: EMPTY
5952: LIST
5953: LIST
5954: LIST
5955: LIST
5956: PUSH
5957: LD_OWVAR 67
5961: ARRAY
5962: ST_TO_ADDR
// for i = 1 to r do
5963: LD_ADDR_VAR 0 2
5967: PUSH
5968: DOUBLE
5969: LD_INT 1
5971: DEC
5972: ST_TO_ADDR
5973: LD_VAR 0 4
5977: PUSH
5978: FOR_TO
5979: IFFALSE 6152
// begin un := PrepareTank ( 3 , 3 , [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked ] [ i mod 3 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
5981: LD_ADDR_VAR 0 5
5985: PUSH
5986: LD_INT 3
5988: PPUSH
5989: LD_INT 3
5991: PPUSH
5992: LD_INT 22
5994: PUSH
5995: LD_INT 22
5997: PUSH
5998: LD_INT 24
6000: PUSH
6001: EMPTY
6002: LIST
6003: LIST
6004: LIST
6005: PUSH
6006: LD_VAR 0 2
6010: PUSH
6011: LD_INT 3
6013: MOD
6014: PUSH
6015: LD_INT 1
6017: PLUS
6018: ARRAY
6019: PPUSH
6020: LD_INT 1
6022: PPUSH
6023: LD_INT 1
6025: PPUSH
6026: LD_INT 43
6028: PUSH
6029: LD_INT 44
6031: PUSH
6032: LD_INT 42
6034: PUSH
6035: EMPTY
6036: LIST
6037: LIST
6038: LIST
6039: PUSH
6040: LD_VAR 0 2
6044: PUSH
6045: LD_INT 3
6047: MOD
6048: PUSH
6049: LD_INT 1
6051: PLUS
6052: ARRAY
6053: PPUSH
6054: LD_INT 100
6056: PPUSH
6057: CALL 520 0 7
6061: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
6062: LD_VAR 0 5
6066: PPUSH
6067: LD_INT 0
6069: PPUSH
6070: LD_INT 5
6072: PPUSH
6073: CALL_OW 12
6077: PPUSH
6078: CALL_OW 233
// PlaceUnitArea ( un , parkingArea , false ) ;
6082: LD_VAR 0 5
6086: PPUSH
6087: LD_INT 5
6089: PPUSH
6090: LD_INT 0
6092: PPUSH
6093: CALL_OW 49
// if i > tmp - 2 then
6097: LD_VAR 0 2
6101: PUSH
6102: LD_VAR 0 8
6106: PUSH
6107: LD_INT 2
6109: MINUS
6110: GREATER
6111: IFFALSE 6115
// continue ;
6113: GO 5978
// ComExitBuilding ( tmp [ i ] ) ;
6115: LD_VAR 0 8
6119: PUSH
6120: LD_VAR 0 2
6124: ARRAY
6125: PPUSH
6126: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , un ) ;
6130: LD_VAR 0 8
6134: PUSH
6135: LD_VAR 0 2
6139: ARRAY
6140: PPUSH
6141: LD_VAR 0 5
6145: PPUSH
6146: CALL_OW 180
// end ;
6150: GO 5978
6152: POP
6153: POP
// end ;
6154: LD_VAR 0 1
6158: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) do var i , filter , tmp , engs , enemy ;
6159: LD_INT 22
6161: PUSH
6162: LD_INT 3
6164: PUSH
6165: EMPTY
6166: LIST
6167: LIST
6168: PUSH
6169: LD_INT 25
6171: PUSH
6172: LD_INT 2
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: PUSH
6179: EMPTY
6180: LIST
6181: LIST
6182: PPUSH
6183: CALL_OW 69
6187: IFFALSE 6919
6189: GO 6191
6191: DISABLE
6192: LD_INT 0
6194: PPUSH
6195: PPUSH
6196: PPUSH
6197: PPUSH
6198: PPUSH
// begin enable ;
6199: ENABLE
// filter := FilterUnitsInArea ( baseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
6200: LD_ADDR_VAR 0 2
6204: PUSH
6205: LD_INT 6
6207: PPUSH
6208: LD_INT 3
6210: PUSH
6211: LD_INT 24
6213: PUSH
6214: LD_INT 1000
6216: PUSH
6217: EMPTY
6218: LIST
6219: LIST
6220: PUSH
6221: EMPTY
6222: LIST
6223: LIST
6224: PUSH
6225: LD_INT 21
6227: PUSH
6228: LD_INT 3
6230: PUSH
6231: EMPTY
6232: LIST
6233: LIST
6234: PUSH
6235: EMPTY
6236: LIST
6237: LIST
6238: PPUSH
6239: CALL_OW 70
6243: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
6244: LD_ADDR_VAR 0 4
6248: PUSH
6249: LD_INT 22
6251: PUSH
6252: LD_INT 3
6254: PUSH
6255: EMPTY
6256: LIST
6257: LIST
6258: PUSH
6259: LD_INT 25
6261: PUSH
6262: LD_INT 2
6264: PUSH
6265: EMPTY
6266: LIST
6267: LIST
6268: PUSH
6269: EMPTY
6270: LIST
6271: LIST
6272: PPUSH
6273: CALL_OW 69
6277: ST_TO_ADDR
// if not filter and not ru_rebuild_list then
6278: LD_VAR 0 2
6282: NOT
6283: PUSH
6284: LD_EXP 20
6288: NOT
6289: AND
6290: IFFALSE 6360
// begin for i in engs do
6292: LD_ADDR_VAR 0 1
6296: PUSH
6297: LD_VAR 0 4
6301: PUSH
6302: FOR_IN
6303: IFFALSE 6358
// if GetLives ( i ) = 1000 and not HasTask ( i ) and not IsInUnit ( i ) then
6305: LD_VAR 0 1
6309: PPUSH
6310: CALL_OW 256
6314: PUSH
6315: LD_INT 1000
6317: EQUAL
6318: PUSH
6319: LD_VAR 0 1
6323: PPUSH
6324: CALL_OW 314
6328: NOT
6329: AND
6330: PUSH
6331: LD_VAR 0 1
6335: PPUSH
6336: CALL_OW 310
6340: NOT
6341: AND
6342: IFFALSE 6356
// ComEnterUnit ( i , ru_dep_main ) ;
6344: LD_VAR 0 1
6348: PPUSH
6349: LD_INT 16
6351: PPUSH
6352: CALL_OW 120
6356: GO 6302
6358: POP
6359: POP
// end ; if UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) then
6360: LD_VAR 0 4
6364: PPUSH
6365: LD_INT 3
6367: PUSH
6368: LD_INT 24
6370: PUSH
6371: LD_INT 650
6373: PUSH
6374: EMPTY
6375: LIST
6376: LIST
6377: PUSH
6378: EMPTY
6379: LIST
6380: LIST
6381: PPUSH
6382: CALL_OW 72
6386: IFFALSE 6479
// begin tmp := UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) ;
6388: LD_ADDR_VAR 0 3
6392: PUSH
6393: LD_VAR 0 4
6397: PPUSH
6398: LD_INT 3
6400: PUSH
6401: LD_INT 24
6403: PUSH
6404: LD_INT 650
6406: PUSH
6407: EMPTY
6408: LIST
6409: LIST
6410: PUSH
6411: EMPTY
6412: LIST
6413: LIST
6414: PPUSH
6415: CALL_OW 72
6419: ST_TO_ADDR
// for i in tmp do
6420: LD_ADDR_VAR 0 1
6424: PUSH
6425: LD_VAR 0 3
6429: PUSH
6430: FOR_IN
6431: IFFALSE 6477
// if not IsInArea ( i , mainBaseArea ) then
6433: LD_VAR 0 1
6437: PPUSH
6438: LD_INT 14
6440: PPUSH
6441: CALL_OW 308
6445: NOT
6446: IFFALSE 6475
// begin ComMoveXY ( i , 129 , 125 ) ;
6448: LD_VAR 0 1
6452: PPUSH
6453: LD_INT 129
6455: PPUSH
6456: LD_INT 125
6458: PPUSH
6459: CALL_OW 111
// AddComWait ( i , 0 0$30 ) ;
6463: LD_VAR 0 1
6467: PPUSH
6468: LD_INT 1050
6470: PPUSH
6471: CALL_OW 202
// end ;
6475: GO 6430
6477: POP
6478: POP
// end ; engs := UnitFilter ( engs , [ f_lives , 650 ] ) ;
6479: LD_ADDR_VAR 0 4
6483: PUSH
6484: LD_VAR 0 4
6488: PPUSH
6489: LD_INT 24
6491: PUSH
6492: LD_INT 650
6494: PUSH
6495: EMPTY
6496: LIST
6497: LIST
6498: PPUSH
6499: CALL_OW 72
6503: ST_TO_ADDR
// if not engs then
6504: LD_VAR 0 4
6508: NOT
6509: IFFALSE 6513
// exit ;
6511: GO 6919
// if filter then
6513: LD_VAR 0 2
6517: IFFALSE 6776
// begin for i in engs do
6519: LD_ADDR_VAR 0 1
6523: PUSH
6524: LD_VAR 0 4
6528: PUSH
6529: FOR_IN
6530: IFFALSE 6554
// if IsInUnit ( i ) then
6532: LD_VAR 0 1
6536: PPUSH
6537: CALL_OW 310
6541: IFFALSE 6552
// ComExitBuilding ( i ) ;
6543: LD_VAR 0 1
6547: PPUSH
6548: CALL_OW 122
6552: GO 6529
6554: POP
6555: POP
// wait ( 3 ) ;
6556: LD_INT 3
6558: PPUSH
6559: CALL_OW 67
// if filter >= 2 and engs >= 2 then
6563: LD_VAR 0 2
6567: PUSH
6568: LD_INT 2
6570: GREATEREQUAL
6571: PUSH
6572: LD_VAR 0 4
6576: PUSH
6577: LD_INT 2
6579: GREATEREQUAL
6580: AND
6581: IFFALSE 6729
// begin for i = 1 to engs / 2 do
6583: LD_ADDR_VAR 0 1
6587: PUSH
6588: DOUBLE
6589: LD_INT 1
6591: DEC
6592: ST_TO_ADDR
6593: LD_VAR 0 4
6597: PUSH
6598: LD_INT 2
6600: DIVREAL
6601: PUSH
6602: FOR_TO
6603: IFFALSE 6649
// if not HasTask ( engs [ i ] ) then
6605: LD_VAR 0 4
6609: PUSH
6610: LD_VAR 0 1
6614: ARRAY
6615: PPUSH
6616: CALL_OW 314
6620: NOT
6621: IFFALSE 6647
// ComRepairBuilding ( engs [ i ] , filter [ 1 ] ) ;
6623: LD_VAR 0 4
6627: PUSH
6628: LD_VAR 0 1
6632: ARRAY
6633: PPUSH
6634: LD_VAR 0 2
6638: PUSH
6639: LD_INT 1
6641: ARRAY
6642: PPUSH
6643: CALL_OW 130
6647: GO 6602
6649: POP
6650: POP
// for i = engs / 2 + 1 to engs do
6651: LD_ADDR_VAR 0 1
6655: PUSH
6656: DOUBLE
6657: LD_VAR 0 4
6661: PUSH
6662: LD_INT 2
6664: DIVREAL
6665: PUSH
6666: LD_INT 1
6668: PLUS
6669: DEC
6670: ST_TO_ADDR
6671: LD_VAR 0 4
6675: PUSH
6676: FOR_TO
6677: IFFALSE 6725
// if not HasTask ( engs [ i ] ) then
6679: LD_VAR 0 4
6683: PUSH
6684: LD_VAR 0 1
6688: ARRAY
6689: PPUSH
6690: CALL_OW 314
6694: NOT
6695: IFFALSE 6723
// ComRepairBuilding ( engs [ i ] , filter [ filter ] ) ;
6697: LD_VAR 0 4
6701: PUSH
6702: LD_VAR 0 1
6706: ARRAY
6707: PPUSH
6708: LD_VAR 0 2
6712: PUSH
6713: LD_VAR 0 2
6717: ARRAY
6718: PPUSH
6719: CALL_OW 130
6723: GO 6676
6725: POP
6726: POP
// end else
6727: GO 6776
// for i in engs do
6729: LD_ADDR_VAR 0 1
6733: PUSH
6734: LD_VAR 0 4
6738: PUSH
6739: FOR_IN
6740: IFFALSE 6774
// if not HasTask ( i ) then
6742: LD_VAR 0 1
6746: PPUSH
6747: CALL_OW 314
6751: NOT
6752: IFFALSE 6772
// ComRepairBuilding ( i , filter [ 1 ] ) ;
6754: LD_VAR 0 1
6758: PPUSH
6759: LD_VAR 0 2
6763: PUSH
6764: LD_INT 1
6766: ARRAY
6767: PPUSH
6768: CALL_OW 130
6772: GO 6739
6774: POP
6775: POP
// end ; enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
6776: LD_ADDR_VAR 0 5
6780: PUSH
6781: LD_INT 81
6783: PUSH
6784: LD_INT 3
6786: PUSH
6787: EMPTY
6788: LIST
6789: LIST
6790: PPUSH
6791: CALL_OW 69
6795: ST_TO_ADDR
// if ru_rebuild_list and not filter then
6796: LD_EXP 20
6800: PUSH
6801: LD_VAR 0 2
6805: NOT
6806: AND
6807: IFFALSE 6919
// begin ComExitBuilding ( engs ) ;
6809: LD_VAR 0 4
6813: PPUSH
6814: CALL_OW 122
// if GetDistUnitXY ( NearestUnitToXY ( enemy , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) > 10 then
6818: LD_VAR 0 5
6822: PPUSH
6823: LD_EXP 20
6827: PUSH
6828: LD_INT 2
6830: ARRAY
6831: PPUSH
6832: LD_EXP 20
6836: PUSH
6837: LD_INT 3
6839: ARRAY
6840: PPUSH
6841: CALL_OW 73
6845: PPUSH
6846: LD_EXP 20
6850: PUSH
6851: LD_INT 2
6853: ARRAY
6854: PPUSH
6855: LD_EXP 20
6859: PUSH
6860: LD_INT 3
6862: ARRAY
6863: PPUSH
6864: CALL_OW 297
6868: PUSH
6869: LD_INT 10
6871: GREATER
6872: IFFALSE 6919
// ComBuild ( engs , ru_rebuild_list [ 1 ] , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] , ru_rebuild_list [ 4 ] ) ;
6874: LD_VAR 0 4
6878: PPUSH
6879: LD_EXP 20
6883: PUSH
6884: LD_INT 1
6886: ARRAY
6887: PPUSH
6888: LD_EXP 20
6892: PUSH
6893: LD_INT 2
6895: ARRAY
6896: PPUSH
6897: LD_EXP 20
6901: PUSH
6902: LD_INT 3
6904: ARRAY
6905: PPUSH
6906: LD_EXP 20
6910: PUSH
6911: LD_INT 4
6913: ARRAY
6914: PPUSH
6915: CALL_OW 145
// end ; end ;
6919: PPOPN 5
6921: END
// every 0 0$1 trigger GetLives ( ru_dep_main ) < 250 do var i , tmp ;
6922: LD_INT 16
6924: PPUSH
6925: CALL_OW 256
6929: PUSH
6930: LD_INT 250
6932: LESS
6933: IFFALSE 7123
6935: GO 6937
6937: DISABLE
6938: LD_INT 0
6940: PPUSH
6941: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
6942: LD_ADDR_VAR 0 2
6946: PUSH
6947: LD_INT 22
6949: PUSH
6950: LD_INT 3
6952: PUSH
6953: EMPTY
6954: LIST
6955: LIST
6956: PUSH
6957: LD_INT 2
6959: PUSH
6960: LD_INT 25
6962: PUSH
6963: LD_INT 1
6965: PUSH
6966: EMPTY
6967: LIST
6968: LIST
6969: PUSH
6970: LD_INT 25
6972: PUSH
6973: LD_INT 3
6975: PUSH
6976: EMPTY
6977: LIST
6978: LIST
6979: PUSH
6980: LD_INT 25
6982: PUSH
6983: LD_INT 4
6985: PUSH
6986: EMPTY
6987: LIST
6988: LIST
6989: PUSH
6990: EMPTY
6991: LIST
6992: LIST
6993: LIST
6994: LIST
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: PPUSH
7000: CALL_OW 69
7004: ST_TO_ADDR
// ComExitBuilding ( tmp ) ;
7005: LD_VAR 0 2
7009: PPUSH
7010: CALL_OW 122
// wait ( 3 ) ;
7014: LD_INT 3
7016: PPUSH
7017: CALL_OW 67
// ComMoveXY ( tmp , 156 , 211 ) ;
7021: LD_VAR 0 2
7025: PPUSH
7026: LD_INT 156
7028: PPUSH
7029: LD_INT 211
7031: PPUSH
7032: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7036: LD_INT 35
7038: PPUSH
7039: CALL_OW 67
// for i in tmp do
7043: LD_ADDR_VAR 0 1
7047: PUSH
7048: LD_VAR 0 2
7052: PUSH
7053: FOR_IN
7054: IFFALSE 7114
// if IsInArea ( i , escapeArea ) then
7056: LD_VAR 0 1
7060: PPUSH
7061: LD_INT 15
7063: PPUSH
7064: CALL_OW 308
7068: IFFALSE 7097
// begin RemoveUnit ( i ) ;
7070: LD_VAR 0 1
7074: PPUSH
7075: CALL_OW 64
// tmp := tmp diff i ;
7079: LD_ADDR_VAR 0 2
7083: PUSH
7084: LD_VAR 0 2
7088: PUSH
7089: LD_VAR 0 1
7093: DIFF
7094: ST_TO_ADDR
// end else
7095: GO 7112
// ComMoveXY ( i , 156 , 211 ) ;
7097: LD_VAR 0 1
7101: PPUSH
7102: LD_INT 156
7104: PPUSH
7105: LD_INT 211
7107: PPUSH
7108: CALL_OW 111
7112: GO 7053
7114: POP
7115: POP
// until not tmp ;
7116: LD_VAR 0 2
7120: NOT
7121: IFFALSE 7036
// end ;
7123: PPOPN 2
7125: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do var i , tmp , doc ;
7126: LD_INT 22
7128: PUSH
7129: LD_INT 3
7131: PUSH
7132: EMPTY
7133: LIST
7134: LIST
7135: PUSH
7136: LD_INT 25
7138: PUSH
7139: LD_INT 4
7141: PUSH
7142: EMPTY
7143: LIST
7144: LIST
7145: PUSH
7146: EMPTY
7147: LIST
7148: LIST
7149: PPUSH
7150: CALL_OW 69
7154: IFFALSE 7408
7156: GO 7158
7158: DISABLE
7159: LD_INT 0
7161: PPUSH
7162: PPUSH
7163: PPUSH
// begin enable ;
7164: ENABLE
// tmp := FilterUnitsInArea ( mainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7165: LD_ADDR_VAR 0 2
7169: PUSH
7170: LD_INT 14
7172: PPUSH
7173: LD_INT 22
7175: PUSH
7176: LD_INT 3
7178: PUSH
7179: EMPTY
7180: LIST
7181: LIST
7182: PUSH
7183: LD_INT 21
7185: PUSH
7186: LD_INT 1
7188: PUSH
7189: EMPTY
7190: LIST
7191: LIST
7192: PUSH
7193: LD_INT 3
7195: PUSH
7196: LD_INT 24
7198: PUSH
7199: LD_INT 1000
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: PUSH
7206: EMPTY
7207: LIST
7208: LIST
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: LIST
7214: PPUSH
7215: CALL_OW 70
7219: ST_TO_ADDR
// doc := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
7220: LD_ADDR_VAR 0 3
7224: PUSH
7225: LD_INT 22
7227: PUSH
7228: LD_INT 3
7230: PUSH
7231: EMPTY
7232: LIST
7233: LIST
7234: PUSH
7235: LD_INT 25
7237: PUSH
7238: LD_INT 4
7240: PUSH
7241: EMPTY
7242: LIST
7243: LIST
7244: PUSH
7245: EMPTY
7246: LIST
7247: LIST
7248: PPUSH
7249: CALL_OW 69
7253: ST_TO_ADDR
// if not doc then
7254: LD_VAR 0 3
7258: NOT
7259: IFFALSE 7263
// exit ;
7261: GO 7408
// if not tmp then
7263: LD_VAR 0 2
7267: NOT
7268: IFFALSE 7359
// begin if not IsInUnit ( doc [ 1 ] ) then
7270: LD_VAR 0 3
7274: PUSH
7275: LD_INT 1
7277: ARRAY
7278: PPUSH
7279: CALL_OW 310
7283: NOT
7284: IFFALSE 7357
// ComEnterUnit ( doc , FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ) ;
7286: LD_VAR 0 3
7290: PPUSH
7291: LD_INT 22
7293: PUSH
7294: LD_INT 3
7296: PUSH
7297: EMPTY
7298: LIST
7299: LIST
7300: PUSH
7301: LD_INT 2
7303: PUSH
7304: LD_INT 30
7306: PUSH
7307: LD_INT 6
7309: PUSH
7310: EMPTY
7311: LIST
7312: LIST
7313: PUSH
7314: LD_INT 30
7316: PUSH
7317: LD_INT 7
7319: PUSH
7320: EMPTY
7321: LIST
7322: LIST
7323: PUSH
7324: LD_INT 30
7326: PUSH
7327: LD_INT 8
7329: PUSH
7330: EMPTY
7331: LIST
7332: LIST
7333: PUSH
7334: EMPTY
7335: LIST
7336: LIST
7337: LIST
7338: LIST
7339: PUSH
7340: EMPTY
7341: LIST
7342: LIST
7343: PPUSH
7344: CALL_OW 69
7348: PUSH
7349: LD_INT 1
7351: ARRAY
7352: PPUSH
7353: CALL_OW 120
// exit ;
7357: GO 7408
// end ; if IsInUnit ( doc [ 1 ] ) then
7359: LD_VAR 0 3
7363: PUSH
7364: LD_INT 1
7366: ARRAY
7367: PPUSH
7368: CALL_OW 310
7372: IFFALSE 7383
// ComExitBuilding ( doc ) ;
7374: LD_VAR 0 3
7378: PPUSH
7379: CALL_OW 122
// wait ( 3 ) ;
7383: LD_INT 3
7385: PPUSH
7386: CALL_OW 67
// ComHeal ( doc , tmp [ 1 ] ) ;
7390: LD_VAR 0 3
7394: PPUSH
7395: LD_VAR 0 2
7399: PUSH
7400: LD_INT 1
7402: ARRAY
7403: PPUSH
7404: CALL_OW 128
// end ;
7408: PPOPN 3
7410: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do var i , tmp , attacking , areas , area , mech ;
7411: LD_INT 22
7413: PUSH
7414: LD_INT 3
7416: PUSH
7417: EMPTY
7418: LIST
7419: LIST
7420: PUSH
7421: LD_INT 25
7423: PUSH
7424: LD_INT 3
7426: PUSH
7427: EMPTY
7428: LIST
7429: LIST
7430: PUSH
7431: EMPTY
7432: LIST
7433: LIST
7434: PPUSH
7435: CALL_OW 69
7439: PUSH
7440: LD_INT 22
7442: PUSH
7443: LD_INT 3
7445: PUSH
7446: EMPTY
7447: LIST
7448: LIST
7449: PUSH
7450: LD_INT 21
7452: PUSH
7453: LD_INT 2
7455: PUSH
7456: EMPTY
7457: LIST
7458: LIST
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: PPUSH
7464: CALL_OW 69
7468: AND
7469: IFFALSE 8228
7471: GO 7473
7473: DISABLE
7474: LD_INT 0
7476: PPUSH
7477: PPUSH
7478: PPUSH
7479: PPUSH
7480: PPUSH
7481: PPUSH
// begin enable ;
7482: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
7483: LD_ADDR_VAR 0 2
7487: PUSH
7488: LD_INT 22
7490: PUSH
7491: LD_INT 3
7493: PUSH
7494: EMPTY
7495: LIST
7496: LIST
7497: PUSH
7498: LD_INT 21
7500: PUSH
7501: LD_INT 2
7503: PUSH
7504: EMPTY
7505: LIST
7506: LIST
7507: PUSH
7508: LD_INT 3
7510: PUSH
7511: LD_INT 58
7513: PUSH
7514: EMPTY
7515: LIST
7516: PUSH
7517: EMPTY
7518: LIST
7519: LIST
7520: PUSH
7521: EMPTY
7522: LIST
7523: LIST
7524: LIST
7525: PPUSH
7526: CALL_OW 69
7530: ST_TO_ADDR
// areas := [ sectorAlpha , sectorBeta , sectorDelta , mainBaseArea ] ;
7531: LD_ADDR_VAR 0 4
7535: PUSH
7536: LD_INT 10
7538: PUSH
7539: LD_INT 11
7541: PUSH
7542: LD_INT 12
7544: PUSH
7545: LD_INT 14
7547: PUSH
7548: EMPTY
7549: LIST
7550: LIST
7551: LIST
7552: LIST
7553: ST_TO_ADDR
// area := 0 ;
7554: LD_ADDR_VAR 0 5
7558: PUSH
7559: LD_INT 0
7561: ST_TO_ADDR
// attacking := false ;
7562: LD_ADDR_VAR 0 3
7566: PUSH
7567: LD_INT 0
7569: ST_TO_ADDR
// for i in tmp do
7570: LD_ADDR_VAR 0 1
7574: PUSH
7575: LD_VAR 0 2
7579: PUSH
7580: FOR_IN
7581: IFFALSE 8009
// begin if GetDistUnits ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) < 10 and not HasTask ( i ) and not GetTag ( i ) and GetLives ( i ) > 650 then
7583: LD_VAR 0 1
7587: PPUSH
7588: LD_INT 22
7590: PUSH
7591: LD_INT 1
7593: PUSH
7594: EMPTY
7595: LIST
7596: LIST
7597: PPUSH
7598: CALL_OW 69
7602: PPUSH
7603: LD_VAR 0 1
7607: PPUSH
7608: CALL_OW 74
7612: PPUSH
7613: CALL_OW 296
7617: PUSH
7618: LD_INT 10
7620: LESS
7621: PUSH
7622: LD_VAR 0 1
7626: PPUSH
7627: CALL_OW 314
7631: NOT
7632: AND
7633: PUSH
7634: LD_VAR 0 1
7638: PPUSH
7639: CALL_OW 110
7643: NOT
7644: AND
7645: PUSH
7646: LD_VAR 0 1
7650: PPUSH
7651: CALL_OW 256
7655: PUSH
7656: LD_INT 650
7658: GREATER
7659: AND
7660: IFFALSE 7704
// begin ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
7662: LD_VAR 0 1
7666: PPUSH
7667: LD_INT 22
7669: PUSH
7670: LD_INT 1
7672: PUSH
7673: EMPTY
7674: LIST
7675: LIST
7676: PPUSH
7677: CALL_OW 69
7681: PPUSH
7682: LD_VAR 0 1
7686: PPUSH
7687: CALL_OW 74
7691: PPUSH
7692: CALL_OW 115
// attacking := true ;
7696: LD_ADDR_VAR 0 3
7700: PUSH
7701: LD_INT 1
7703: ST_TO_ADDR
// end ; if not GetTag ( i ) and GetLives ( i ) < 650 and GetType ( i ) = unit_vehicle then
7704: LD_VAR 0 1
7708: PPUSH
7709: CALL_OW 110
7713: NOT
7714: PUSH
7715: LD_VAR 0 1
7719: PPUSH
7720: CALL_OW 256
7724: PUSH
7725: LD_INT 650
7727: LESS
7728: AND
7729: PUSH
7730: LD_VAR 0 1
7734: PPUSH
7735: CALL_OW 247
7739: PUSH
7740: LD_INT 2
7742: EQUAL
7743: AND
7744: IFFALSE 7773
// begin SetTag ( i , 1 ) ;
7746: LD_VAR 0 1
7750: PPUSH
7751: LD_INT 1
7753: PPUSH
7754: CALL_OW 109
// ComMoveXY ( i , 130 , 139 ) ;
7758: LD_VAR 0 1
7762: PPUSH
7763: LD_INT 130
7765: PPUSH
7766: LD_INT 139
7768: PPUSH
7769: CALL_OW 111
// end ; if GetTag ( i ) = 1 and GetDistUnitXY ( i , 130 , 139 ) < 6 then
7773: LD_VAR 0 1
7777: PPUSH
7778: CALL_OW 110
7782: PUSH
7783: LD_INT 1
7785: EQUAL
7786: PUSH
7787: LD_VAR 0 1
7791: PPUSH
7792: LD_INT 130
7794: PPUSH
7795: LD_INT 139
7797: PPUSH
7798: CALL_OW 297
7802: PUSH
7803: LD_INT 6
7805: LESS
7806: AND
7807: IFFALSE 7821
// SetTag ( i , 2 ) ;
7809: LD_VAR 0 1
7813: PPUSH
7814: LD_INT 2
7816: PPUSH
7817: CALL_OW 109
// if GetTag ( i ) = 2 then
7821: LD_VAR 0 1
7825: PPUSH
7826: CALL_OW 110
7830: PUSH
7831: LD_INT 2
7833: EQUAL
7834: IFFALSE 7969
// begin if GetLives ( i ) = 1000 then
7836: LD_VAR 0 1
7840: PPUSH
7841: CALL_OW 256
7845: PUSH
7846: LD_INT 1000
7848: EQUAL
7849: IFFALSE 7865
// SetTag ( i , 3 ) else
7851: LD_VAR 0 1
7855: PPUSH
7856: LD_INT 3
7858: PPUSH
7859: CALL_OW 109
7863: GO 7969
// if IsDrivenBy ( i ) then
7865: LD_VAR 0 1
7869: PPUSH
7870: CALL_OW 311
7874: IFFALSE 7969
// begin mech := IsDrivenBy ( i ) ;
7876: LD_ADDR_VAR 0 6
7880: PUSH
7881: LD_VAR 0 1
7885: PPUSH
7886: CALL_OW 311
7890: ST_TO_ADDR
// if not See ( 1 , mech ) and GetLives ( mech ) < 1000 then
7891: LD_INT 1
7893: PPUSH
7894: LD_VAR 0 6
7898: PPUSH
7899: CALL_OW 292
7903: NOT
7904: PUSH
7905: LD_VAR 0 6
7909: PPUSH
7910: CALL_OW 256
7914: PUSH
7915: LD_INT 1000
7917: LESS
7918: AND
7919: IFFALSE 7933
// SetLives ( mech , 1000 ) ;
7921: LD_VAR 0 6
7925: PPUSH
7926: LD_INT 1000
7928: PPUSH
7929: CALL_OW 234
// if not See ( 1 , i ) then
7933: LD_INT 1
7935: PPUSH
7936: LD_VAR 0 1
7940: PPUSH
7941: CALL_OW 292
7945: NOT
7946: IFFALSE 7960
// SetFuel ( i , 100 ) ;
7948: LD_VAR 0 1
7952: PPUSH
7953: LD_INT 100
7955: PPUSH
7956: CALL_OW 240
// ComRepairVehicleAndReturn ( mech ) ;
7960: LD_VAR 0 6
7964: PPUSH
7965: CALL 71328 0 1
// end ; end ; if GetTag ( i ) = 3 and IsDrivenBy ( i ) then
7969: LD_VAR 0 1
7973: PPUSH
7974: CALL_OW 110
7978: PUSH
7979: LD_INT 3
7981: EQUAL
7982: PUSH
7983: LD_VAR 0 1
7987: PPUSH
7988: CALL_OW 311
7992: AND
7993: IFFALSE 8007
// SetTag ( i , 0 ) ;
7995: LD_VAR 0 1
7999: PPUSH
8000: LD_INT 0
8002: PPUSH
8003: CALL_OW 109
// end ;
8007: GO 7580
8009: POP
8010: POP
// if attacking then
8011: LD_VAR 0 3
8015: IFFALSE 8019
// exit ;
8017: GO 8228
// if can_end and tmp then
8019: LD_EXP 6
8023: PUSH
8024: LD_VAR 0 2
8028: AND
8029: IFFALSE 8084
// begin for i in tmp do
8031: LD_ADDR_VAR 0 1
8035: PUSH
8036: LD_VAR 0 2
8040: PUSH
8041: FOR_IN
8042: IFFALSE 8080
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
8044: LD_VAR 0 1
8048: PPUSH
8049: LD_INT 22
8051: PUSH
8052: LD_INT 1
8054: PUSH
8055: EMPTY
8056: LIST
8057: LIST
8058: PPUSH
8059: CALL_OW 69
8063: PPUSH
8064: LD_VAR 0 1
8068: PPUSH
8069: CALL_OW 74
8073: PPUSH
8074: CALL_OW 115
8078: GO 8041
8080: POP
8081: POP
// exit ;
8082: GO 8228
// end ; for i in areas do
8084: LD_ADDR_VAR 0 1
8088: PUSH
8089: LD_VAR 0 4
8093: PUSH
8094: FOR_IN
8095: IFFALSE 8132
// if FilterUnitsInArea ( i , [ f_side , 1 ] ) then
8097: LD_VAR 0 1
8101: PPUSH
8102: LD_INT 22
8104: PUSH
8105: LD_INT 1
8107: PUSH
8108: EMPTY
8109: LIST
8110: LIST
8111: PPUSH
8112: CALL_OW 70
8116: IFFALSE 8130
// begin area := i ;
8118: LD_ADDR_VAR 0 5
8122: PUSH
8123: LD_VAR 0 1
8127: ST_TO_ADDR
// break ;
8128: GO 8132
// end ;
8130: GO 8094
8132: POP
8133: POP
// if area then
8134: LD_VAR 0 5
8138: IFFALSE 8228
// begin for i in tmp do
8140: LD_ADDR_VAR 0 1
8144: PUSH
8145: LD_VAR 0 2
8149: PUSH
8150: FOR_IN
8151: IFFALSE 8226
// begin if GetTag ( i ) then
8153: LD_VAR 0 1
8157: PPUSH
8158: CALL_OW 110
8162: IFFALSE 8166
// continue ;
8164: GO 8150
// if GetFuel ( i ) < 33 then
8166: LD_VAR 0 1
8170: PPUSH
8171: CALL_OW 261
8175: PUSH
8176: LD_INT 33
8178: LESS
8179: IFFALSE 8193
// SetFuel ( i , 33 ) ;
8181: LD_VAR 0 1
8185: PPUSH
8186: LD_INT 33
8188: PPUSH
8189: CALL_OW 240
// if not IsInArea ( i , area ) then
8193: LD_VAR 0 1
8197: PPUSH
8198: LD_VAR 0 5
8202: PPUSH
8203: CALL_OW 308
8207: NOT
8208: IFFALSE 8224
// ComMoveToArea ( i , area ) ;
8210: LD_VAR 0 1
8214: PPUSH
8215: LD_VAR 0 5
8219: PPUSH
8220: CALL_OW 113
// end ;
8224: GO 8150
8226: POP
8227: POP
// end ; end ;
8228: PPOPN 6
8230: END
// every 15 15$00 trigger Difficulty > 1 do var i , j , un , veh , time , count ;
8231: LD_OWVAR 67
8235: PUSH
8236: LD_INT 1
8238: GREATER
8239: IFFALSE 8524
8241: GO 8243
8243: DISABLE
8244: LD_INT 0
8246: PPUSH
8247: PPUSH
8248: PPUSH
8249: PPUSH
8250: PPUSH
8251: PPUSH
// begin uc_side := 3 ;
8252: LD_ADDR_OWVAR 20
8256: PUSH
8257: LD_INT 3
8259: ST_TO_ADDR
// uc_nation := 3 ;
8260: LD_ADDR_OWVAR 21
8264: PUSH
8265: LD_INT 3
8267: ST_TO_ADDR
// time := [ 9 9$00 , 7 7$00 , 6 6$00 , 5 5$30 ] [ Difficulty ] ;
8268: LD_ADDR_VAR 0 5
8272: PUSH
8273: LD_INT 18900
8275: PUSH
8276: LD_INT 14700
8278: PUSH
8279: LD_INT 12600
8281: PUSH
8282: LD_INT 11550
8284: PUSH
8285: EMPTY
8286: LIST
8287: LIST
8288: LIST
8289: LIST
8290: PUSH
8291: LD_OWVAR 67
8295: ARRAY
8296: ST_TO_ADDR
// count := [ 2 , 2 , 3 , 3 ] [ Difficulty ] ;
8297: LD_ADDR_VAR 0 6
8301: PUSH
8302: LD_INT 2
8304: PUSH
8305: LD_INT 2
8307: PUSH
8308: LD_INT 3
8310: PUSH
8311: LD_INT 3
8313: PUSH
8314: EMPTY
8315: LIST
8316: LIST
8317: LIST
8318: LIST
8319: PUSH
8320: LD_OWVAR 67
8324: ARRAY
8325: ST_TO_ADDR
// for i = 1 to count do
8326: LD_ADDR_VAR 0 1
8330: PUSH
8331: DOUBLE
8332: LD_INT 1
8334: DEC
8335: ST_TO_ADDR
8336: LD_VAR 0 6
8340: PUSH
8341: FOR_TO
8342: IFFALSE 8522
// begin wait ( time ) ;
8344: LD_VAR 0 5
8348: PPUSH
8349: CALL_OW 67
// for j = 1 to rand ( 1 , Difficulty ) do
8353: LD_ADDR_VAR 0 2
8357: PUSH
8358: DOUBLE
8359: LD_INT 1
8361: DEC
8362: ST_TO_ADDR
8363: LD_INT 1
8365: PPUSH
8366: LD_OWVAR 67
8370: PPUSH
8371: CALL_OW 12
8375: PUSH
8376: FOR_TO
8377: IFFALSE 8518
// begin veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 80 ) ;
8379: LD_ADDR_VAR 0 4
8383: PUSH
8384: LD_INT 3
8386: PPUSH
8387: LD_INT 3
8389: PPUSH
8390: LD_INT 22
8392: PPUSH
8393: LD_INT 1
8395: PPUSH
8396: LD_INT 1
8398: PPUSH
8399: LD_INT 43
8401: PUSH
8402: LD_INT 44
8404: PUSH
8405: LD_INT 42
8407: PUSH
8408: EMPTY
8409: LIST
8410: LIST
8411: LIST
8412: PUSH
8413: LD_VAR 0 1
8417: PUSH
8418: LD_INT 3
8420: MOD
8421: PUSH
8422: LD_INT 1
8424: PLUS
8425: ARRAY
8426: PPUSH
8427: LD_INT 80
8429: PPUSH
8430: CALL 520 0 7
8434: ST_TO_ADDR
// PlaceUnitArea ( veh , southArea , false ) ;
8435: LD_VAR 0 4
8439: PPUSH
8440: LD_INT 13
8442: PPUSH
8443: LD_INT 0
8445: PPUSH
8446: CALL_OW 49
// PrepareHuman ( false , 3 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
8450: LD_INT 0
8452: PPUSH
8453: LD_INT 3
8455: PPUSH
8456: LD_INT 4
8458: PUSH
8459: LD_INT 5
8461: PUSH
8462: LD_INT 5
8464: PUSH
8465: EMPTY
8466: LIST
8467: LIST
8468: LIST
8469: PUSH
8470: LD_OWVAR 67
8474: ARRAY
8475: PPUSH
8476: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
8480: CALL_OW 44
8484: PPUSH
8485: LD_VAR 0 4
8489: PPUSH
8490: CALL_OW 52
// wait ( 0 0$01 ) ;
8494: LD_INT 35
8496: PPUSH
8497: CALL_OW 67
// ComMoveXY ( veh , 143 , 143 ) ;
8501: LD_VAR 0 4
8505: PPUSH
8506: LD_INT 143
8508: PPUSH
8509: LD_INT 143
8511: PPUSH
8512: CALL_OW 111
// end ;
8516: GO 8376
8518: POP
8519: POP
// end ;
8520: GO 8341
8522: POP
8523: POP
// end ;
8524: PPOPN 6
8526: END
// every 8 8$00 do var i , un , time ;
8527: GO 8529
8529: DISABLE
8530: LD_INT 0
8532: PPUSH
8533: PPUSH
8534: PPUSH
// begin time := [ 3 3$00 , 1 1$00 , 0 0$30 ] ;
8535: LD_ADDR_VAR 0 3
8539: PUSH
8540: LD_INT 6300
8542: PUSH
8543: LD_INT 2100
8545: PUSH
8546: LD_INT 1050
8548: PUSH
8549: EMPTY
8550: LIST
8551: LIST
8552: LIST
8553: ST_TO_ADDR
// wait ( time ) ;
8554: LD_VAR 0 3
8558: PPUSH
8559: CALL_OW 67
// uc_side := 3 ;
8563: LD_ADDR_OWVAR 20
8567: PUSH
8568: LD_INT 3
8570: ST_TO_ADDR
// uc_nation := 3 ;
8571: LD_ADDR_OWVAR 21
8575: PUSH
8576: LD_INT 3
8578: ST_TO_ADDR
// for i = 1 to 2 do
8579: LD_ADDR_VAR 0 1
8583: PUSH
8584: DOUBLE
8585: LD_INT 1
8587: DEC
8588: ST_TO_ADDR
8589: LD_INT 2
8591: PUSH
8592: FOR_TO
8593: IFFALSE 8656
// begin PrepareHuman ( false , 1 , 4 ) ;
8595: LD_INT 0
8597: PPUSH
8598: LD_INT 1
8600: PPUSH
8601: LD_INT 4
8603: PPUSH
8604: CALL_OW 380
// un := CreateHuman ;
8608: LD_ADDR_VAR 0 2
8612: PUSH
8613: CALL_OW 44
8617: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_dep_main ) ;
8618: LD_VAR 0 2
8622: PPUSH
8623: LD_INT 16
8625: PPUSH
8626: CALL_OW 52
// ComExitBuilding ( un ) ;
8630: LD_VAR 0 2
8634: PPUSH
8635: CALL_OW 122
// AddComAgressiveMove ( un , 41 , 76 ) ;
8639: LD_VAR 0 2
8643: PPUSH
8644: LD_INT 41
8646: PPUSH
8647: LD_INT 76
8649: PPUSH
8650: CALL_OW 174
// end ;
8654: GO 8592
8656: POP
8657: POP
// end ; end_of_file
8658: PPOPN 3
8660: END
// export function Action ; begin
8661: LD_INT 0
8663: PPUSH
// CenterNowOnXY ( 28 , 3 ) ;
8664: LD_INT 28
8666: PPUSH
8667: LD_INT 3
8669: PPUSH
8670: CALL_OW 86
// PlaceSeeing ( 41 , 76 , 1 , 10 ) ;
8674: LD_INT 41
8676: PPUSH
8677: LD_INT 76
8679: PPUSH
8680: LD_INT 1
8682: PPUSH
8683: LD_INT 10
8685: PPUSH
8686: CALL_OW 330
// RemoveSeeing ( 41 , 76 , 1 ) ;
8690: LD_INT 41
8692: PPUSH
8693: LD_INT 76
8695: PPUSH
8696: LD_INT 1
8698: PPUSH
8699: CALL_OW 331
// InGameOn ;
8703: CALL_OW 8
// SayRadio ( Harisson , D2-Har-1 ) ;
8707: LD_EXP 19
8711: PPUSH
8712: LD_STRING D2-Har-1
8714: PPUSH
8715: CALL_OW 94
// InGameOff ;
8719: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
8723: LD_STRING M1
8725: PPUSH
8726: CALL_OW 337
// end ;
8730: LD_VAR 0 1
8734: RET
// every 0 0$1 trigger buildings_counter > 1 do var un ;
8735: LD_EXP 4
8739: PUSH
8740: LD_INT 1
8742: GREATER
8743: IFFALSE 8834
8745: GO 8747
8747: DISABLE
8748: LD_INT 0
8750: PPUSH
// begin un := GetRandom ( sex_male ) [ 1 ] ;
8751: LD_ADDR_VAR 0 1
8755: PUSH
8756: LD_INT 1
8758: PPUSH
8759: CALL 608 0 1
8763: PUSH
8764: LD_INT 1
8766: ARRAY
8767: ST_TO_ADDR
// Say ( un , D2a-Sol1-1 ) ;
8768: LD_VAR 0 1
8772: PPUSH
8773: LD_STRING D2a-Sol1-1
8775: PPUSH
8776: CALL_OW 88
// if not un then
8780: LD_VAR 0 1
8784: NOT
8785: IFFALSE 8816
// begin un := GetRandom ( sex_female ) [ 1 ] ;
8787: LD_ADDR_VAR 0 1
8791: PUSH
8792: LD_INT 2
8794: PPUSH
8795: CALL 608 0 1
8799: PUSH
8800: LD_INT 1
8802: ARRAY
8803: ST_TO_ADDR
// Say ( un , D2a-FSol1-1 ) ;
8804: LD_VAR 0 1
8808: PPUSH
8809: LD_STRING D2a-FSol1-1
8811: PPUSH
8812: CALL_OW 88
// end ; if Khatam then
8816: LD_EXP 17
8820: IFFALSE 8834
// Say ( Khatam , D3b-Khat-3 ) ;
8822: LD_EXP 17
8826: PPUSH
8827: LD_STRING D3b-Khat-3
8829: PPUSH
8830: CALL_OW 88
// end ;
8834: PPOPN 1
8836: END
// every 0 0$1 trigger Frank and not Kikuchi and FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , GetX ( Frank ) , GetY ( Frank ) , 7 ] ] ) and not InBattle ( 1 ) and not InBattle ( 4 ) do var i , ape ;
8837: LD_EXP 15
8841: PUSH
8842: LD_EXP 18
8846: NOT
8847: AND
8848: PUSH
8849: LD_INT 22
8851: PUSH
8852: LD_INT 1
8854: PUSH
8855: EMPTY
8856: LIST
8857: LIST
8858: PUSH
8859: LD_INT 92
8861: PUSH
8862: LD_EXP 15
8866: PPUSH
8867: CALL_OW 250
8871: PUSH
8872: LD_EXP 15
8876: PPUSH
8877: CALL_OW 251
8881: PUSH
8882: LD_INT 7
8884: PUSH
8885: EMPTY
8886: LIST
8887: LIST
8888: LIST
8889: LIST
8890: PUSH
8891: EMPTY
8892: LIST
8893: LIST
8894: PPUSH
8895: CALL_OW 69
8899: AND
8900: PUSH
8901: LD_INT 1
8903: PPUSH
8904: CALL_OW 463
8908: NOT
8909: AND
8910: PUSH
8911: LD_INT 4
8913: PPUSH
8914: CALL_OW 463
8918: NOT
8919: AND
8920: IFFALSE 9507
8922: GO 8924
8924: DISABLE
8925: LD_INT 0
8927: PPUSH
8928: PPUSH
// begin InGameOn ;
8929: CALL_OW 8
// ape := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
8933: LD_ADDR_VAR 0 2
8937: PUSH
8938: LD_INT 22
8940: PUSH
8941: LD_INT 0
8943: PUSH
8944: EMPTY
8945: LIST
8946: LIST
8947: PUSH
8948: LD_INT 25
8950: PUSH
8951: LD_INT 12
8953: PUSH
8954: EMPTY
8955: LIST
8956: LIST
8957: PUSH
8958: EMPTY
8959: LIST
8960: LIST
8961: PPUSH
8962: CALL_OW 69
8966: ST_TO_ADDR
// ape := NearestUnitToUnit ( ape , Frank ) ;
8967: LD_ADDR_VAR 0 2
8971: PUSH
8972: LD_VAR 0 2
8976: PPUSH
8977: LD_EXP 15
8981: PPUSH
8982: CALL_OW 74
8986: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , Frank , 20 ] ] ) do
8987: LD_ADDR_VAR 0 1
8991: PUSH
8992: LD_INT 22
8994: PUSH
8995: LD_INT 1
8997: PUSH
8998: EMPTY
8999: LIST
9000: LIST
9001: PUSH
9002: LD_INT 21
9004: PUSH
9005: LD_INT 1
9007: PUSH
9008: EMPTY
9009: LIST
9010: LIST
9011: PUSH
9012: LD_INT 91
9014: PUSH
9015: LD_EXP 15
9019: PUSH
9020: LD_INT 20
9022: PUSH
9023: EMPTY
9024: LIST
9025: LIST
9026: LIST
9027: PUSH
9028: EMPTY
9029: LIST
9030: LIST
9031: LIST
9032: PPUSH
9033: CALL_OW 69
9037: PUSH
9038: FOR_IN
9039: IFFALSE 9057
// ComTurnUnit ( i , Frank ) ;
9041: LD_VAR 0 1
9045: PPUSH
9046: LD_EXP 15
9050: PPUSH
9051: CALL_OW 119
9055: GO 9038
9057: POP
9058: POP
// SetSide ( Frank , 1 ) ;
9059: LD_EXP 15
9063: PPUSH
9064: LD_INT 1
9066: PPUSH
9067: CALL_OW 235
// ComMoveUnit ( JMM , Frank ) ;
9071: LD_EXP 9
9075: PPUSH
9076: LD_EXP 15
9080: PPUSH
9081: CALL_OW 112
// AddComTurnUnit ( JMM , Frank ) ;
9085: LD_EXP 9
9089: PPUSH
9090: LD_EXP 15
9094: PPUSH
9095: CALL_OW 179
// CenterOnUnits ( Frank ) ;
9099: LD_EXP 15
9103: PPUSH
9104: CALL_OW 85
// Say ( Frank , D3a-Frank-1 ) ;
9108: LD_EXP 15
9112: PPUSH
9113: LD_STRING D3a-Frank-1
9115: PPUSH
9116: CALL_OW 88
// ComMoveXY ( ape , 42 , 78 ) ;
9120: LD_VAR 0 2
9124: PPUSH
9125: LD_INT 42
9127: PPUSH
9128: LD_INT 78
9130: PPUSH
9131: CALL_OW 111
// AddComTurnUnit ( ape , Frank ) ;
9135: LD_VAR 0 2
9139: PPUSH
9140: LD_EXP 15
9144: PPUSH
9145: CALL_OW 179
// if Lisa then
9149: LD_EXP 14
9153: IFFALSE 9167
// Say ( Lisa , D3a-Lisa-1 ) ;
9155: LD_EXP 14
9159: PPUSH
9160: LD_STRING D3a-Lisa-1
9162: PPUSH
9163: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
9167: LD_EXP 9
9171: PPUSH
9172: LD_STRING D3a-JMM-1
9174: PPUSH
9175: CALL_OW 88
// if Cyrus then
9179: LD_EXP 13
9183: IFFALSE 9197
// Say ( Cyrus , D3a-Cyrus-1 ) ;
9185: LD_EXP 13
9189: PPUSH
9190: LD_STRING D3a-Cyrus-1
9192: PPUSH
9193: CALL_OW 88
// if GetRandom ( sex_male ) then
9197: LD_INT 1
9199: PPUSH
9200: CALL 608 0 1
9204: IFFALSE 9225
// Say ( GetRandom ( sex_male ) [ 1 ] , D3a-Sol1-1 ) ;
9206: LD_INT 1
9208: PPUSH
9209: CALL 608 0 1
9213: PUSH
9214: LD_INT 1
9216: ARRAY
9217: PPUSH
9218: LD_STRING D3a-Sol1-1
9220: PPUSH
9221: CALL_OW 88
// if GetRandom ( sex_female ) then
9225: LD_INT 2
9227: PPUSH
9228: CALL 608 0 1
9232: IFFALSE 9253
// Say ( GetRandom ( sex_female ) [ 1 ] , D3a-FSol1-1 ) ;
9234: LD_INT 2
9236: PPUSH
9237: CALL 608 0 1
9241: PUSH
9242: LD_INT 1
9244: ARRAY
9245: PPUSH
9246: LD_STRING D3a-FSol1-1
9248: PPUSH
9249: CALL_OW 88
// if Gladstone then
9253: LD_EXP 16
9257: IFFALSE 9271
// Say ( Gladstone , D3a-Glad-1 ) ;
9259: LD_EXP 16
9263: PPUSH
9264: LD_STRING D3a-Glad-1
9266: PPUSH
9267: CALL_OW 88
// ComMoveXY ( ape , 60 , 113 ) ;
9271: LD_VAR 0 2
9275: PPUSH
9276: LD_INT 60
9278: PPUSH
9279: LD_INT 113
9281: PPUSH
9282: CALL_OW 111
// Say ( Frank , D3a-Frank-2 ) ;
9286: LD_EXP 15
9290: PPUSH
9291: LD_STRING D3a-Frank-2
9293: PPUSH
9294: CALL_OW 88
// ComTurnUnit ( Frank , JMM ) ;
9298: LD_EXP 15
9302: PPUSH
9303: LD_EXP 9
9307: PPUSH
9308: CALL_OW 119
// Say ( JMM , D3a-JMM-2 ) ;
9312: LD_EXP 9
9316: PPUSH
9317: LD_STRING D3a-JMM-2
9319: PPUSH
9320: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9324: LD_INT 1
9326: PPUSH
9327: LD_INT 4
9329: PPUSH
9330: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9334: LD_INT 85
9336: PPUSH
9337: LD_INT 134
9339: PPUSH
9340: CALL_OW 84
// Say ( Frank , D3a-Frank-3 ) ;
9344: LD_EXP 15
9348: PPUSH
9349: LD_STRING D3a-Frank-3
9351: PPUSH
9352: CALL_OW 88
// Wait ( 0 0$01 ) ;
9356: LD_INT 35
9358: PPUSH
9359: CALL_OW 67
// CenterOnXY ( 166 , 136 ) ;
9363: LD_INT 166
9365: PPUSH
9366: LD_INT 136
9368: PPUSH
9369: CALL_OW 84
// Say ( JMM , D3a-JMM-3 ) ;
9373: LD_EXP 9
9377: PPUSH
9378: LD_STRING D3a-JMM-3
9380: PPUSH
9381: CALL_OW 88
// Wait ( 0 0$01 ) ;
9385: LD_INT 35
9387: PPUSH
9388: CALL_OW 67
// CenterNowOnUnits ( Frank ) ;
9392: LD_EXP 15
9396: PPUSH
9397: CALL_OW 87
// Say ( Frank , D3a-Frank-4 ) ;
9401: LD_EXP 15
9405: PPUSH
9406: LD_STRING D3a-Frank-4
9408: PPUSH
9409: CALL_OW 88
// if Lisa then
9413: LD_EXP 14
9417: IFFALSE 9431
// Say ( Lisa , D3a-Lisa-4 ) ;
9419: LD_EXP 14
9423: PPUSH
9424: LD_STRING D3a-Lisa-4
9426: PPUSH
9427: CALL_OW 88
// Say ( JMM , D3a-JMM-4 ) ;
9431: LD_EXP 9
9435: PPUSH
9436: LD_STRING D3a-JMM-4
9438: PPUSH
9439: CALL_OW 88
// Say ( Frank , D3a-Frank-5 ) ;
9443: LD_EXP 15
9447: PPUSH
9448: LD_STRING D3a-Frank-5
9450: PPUSH
9451: CALL_OW 88
// Say ( JMM , D3a-JMM-5 ) ;
9455: LD_EXP 9
9459: PPUSH
9460: LD_STRING D3a-JMM-5
9462: PPUSH
9463: CALL_OW 88
// Say ( Frank , D3a-Frank-6 ) ;
9467: LD_EXP 15
9471: PPUSH
9472: LD_STRING D3a-Frank-6
9474: PPUSH
9475: CALL_OW 88
// Say ( JMM , D3a-JMM-6 ) ;
9479: LD_EXP 9
9483: PPUSH
9484: LD_STRING D3a-JMM-6
9486: PPUSH
9487: CALL_OW 88
// Say ( Frank , D3a-Frank-7 ) ;
9491: LD_EXP 15
9495: PPUSH
9496: LD_STRING D3a-Frank-7
9498: PPUSH
9499: CALL_OW 88
// InGameOff ;
9503: CALL_OW 9
// end ;
9507: PPOPN 2
9509: END
// every 0 0$1 trigger Kikuchi and not Frank and FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , GetX ( Kikuchi ) , GetY ( Kikuchi ) , 7 ] ] ) and not InBattle ( 1 ) and not InBattle ( 4 ) do
9510: LD_EXP 18
9514: PUSH
9515: LD_EXP 15
9519: NOT
9520: AND
9521: PUSH
9522: LD_INT 22
9524: PUSH
9525: LD_INT 1
9527: PUSH
9528: EMPTY
9529: LIST
9530: LIST
9531: PUSH
9532: LD_INT 92
9534: PUSH
9535: LD_EXP 18
9539: PPUSH
9540: CALL_OW 250
9544: PUSH
9545: LD_EXP 18
9549: PPUSH
9550: CALL_OW 251
9554: PUSH
9555: LD_INT 7
9557: PUSH
9558: EMPTY
9559: LIST
9560: LIST
9561: LIST
9562: LIST
9563: PUSH
9564: EMPTY
9565: LIST
9566: LIST
9567: PPUSH
9568: CALL_OW 69
9572: AND
9573: PUSH
9574: LD_INT 1
9576: PPUSH
9577: CALL_OW 463
9581: NOT
9582: AND
9583: PUSH
9584: LD_INT 4
9586: PPUSH
9587: CALL_OW 463
9591: NOT
9592: AND
9593: IFFALSE 9773
9595: GO 9597
9597: DISABLE
// begin InGameOn ;
9598: CALL_OW 8
// ComTurnUnit ( JMM , Kikuchi ) ;
9602: LD_EXP 9
9606: PPUSH
9607: LD_EXP 18
9611: PPUSH
9612: CALL_OW 119
// ComTurnUnit ( Kikuchi , JMM ) ;
9616: LD_EXP 18
9620: PPUSH
9621: LD_EXP 9
9625: PPUSH
9626: CALL_OW 119
// CenterOnUnits ( Kikuchi ) ;
9630: LD_EXP 18
9634: PPUSH
9635: CALL_OW 85
// Say ( Kikuchi , D3b-Yam-1 ) ;
9639: LD_EXP 18
9643: PPUSH
9644: LD_STRING D3b-Yam-1
9646: PPUSH
9647: CALL_OW 88
// Say ( JMM , D3b-JMM-1 ) ;
9651: LD_EXP 9
9655: PPUSH
9656: LD_STRING D3b-JMM-1
9658: PPUSH
9659: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9663: LD_INT 1
9665: PPUSH
9666: LD_INT 4
9668: PPUSH
9669: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9673: LD_INT 85
9675: PPUSH
9676: LD_INT 134
9678: PPUSH
9679: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-2 ) ;
9683: LD_EXP 18
9687: PPUSH
9688: LD_STRING D3b-Yam-2
9690: PPUSH
9691: CALL_OW 88
// Wait ( 0 0$01 ) ;
9695: LD_INT 35
9697: PPUSH
9698: CALL_OW 67
// Say ( JMM , D3b-JMM-2 ) ;
9702: LD_EXP 9
9706: PPUSH
9707: LD_STRING D3b-JMM-2
9709: PPUSH
9710: CALL_OW 88
// CenterOnXY ( 166 , 136 ) ;
9714: LD_INT 166
9716: PPUSH
9717: LD_INT 136
9719: PPUSH
9720: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-3 ) ;
9724: LD_EXP 18
9728: PPUSH
9729: LD_STRING D3b-Yam-3
9731: PPUSH
9732: CALL_OW 88
// CenterNowOnUnits ( JMM ) ;
9736: LD_EXP 9
9740: PPUSH
9741: CALL_OW 87
// Say ( JMM , D3b-JMM-3a ) ;
9745: LD_EXP 9
9749: PPUSH
9750: LD_STRING D3b-JMM-3a
9752: PPUSH
9753: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
9757: LD_EXP 18
9761: PPUSH
9762: LD_INT 1
9764: PPUSH
9765: CALL_OW 235
// InGameOff ;
9769: CALL_OW 9
// end ;
9773: END
// every 0 0$1 trigger FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var un , x , tw , i ;
9774: LD_INT 7
9776: PPUSH
9777: LD_INT 22
9779: PUSH
9780: LD_INT 1
9782: PUSH
9783: EMPTY
9784: LIST
9785: LIST
9786: PUSH
9787: LD_INT 3
9789: PUSH
9790: LD_INT 24
9792: PUSH
9793: LD_INT 1000
9795: PUSH
9796: EMPTY
9797: LIST
9798: LIST
9799: PUSH
9800: EMPTY
9801: LIST
9802: LIST
9803: PUSH
9804: EMPTY
9805: LIST
9806: LIST
9807: PPUSH
9808: CALL_OW 70
9812: IFFALSE 10268
9814: GO 9816
9816: DISABLE
9817: LD_INT 0
9819: PPUSH
9820: PPUSH
9821: PPUSH
9822: PPUSH
// begin repeat wait ( 0 0$1 ) ;
9823: LD_INT 35
9825: PPUSH
9826: CALL_OW 67
// un := FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
9830: LD_ADDR_VAR 0 1
9834: PUSH
9835: LD_INT 7
9837: PPUSH
9838: LD_INT 22
9840: PUSH
9841: LD_INT 1
9843: PUSH
9844: EMPTY
9845: LIST
9846: LIST
9847: PUSH
9848: LD_INT 3
9850: PUSH
9851: LD_INT 24
9853: PUSH
9854: LD_INT 1000
9856: PUSH
9857: EMPTY
9858: LIST
9859: LIST
9860: PUSH
9861: EMPTY
9862: LIST
9863: LIST
9864: PUSH
9865: EMPTY
9866: LIST
9867: LIST
9868: PPUSH
9869: CALL_OW 70
9873: ST_TO_ADDR
// if not un then
9874: LD_VAR 0 1
9878: NOT
9879: IFFALSE 9883
// continue ;
9881: GO 9823
// tw := NearbyTowerHasEnergy ( un [ 1 ] ) ;
9883: LD_ADDR_VAR 0 3
9887: PUSH
9888: LD_VAR 0 1
9892: PUSH
9893: LD_INT 1
9895: ARRAY
9896: PPUSH
9897: CALL 2053 0 1
9901: ST_TO_ADDR
// until tw ;
9902: LD_VAR 0 3
9906: IFFALSE 9823
// DialogueOn ;
9908: CALL_OW 6
// CenterNowOnUnits ( tw ) ;
9912: LD_VAR 0 3
9916: PPUSH
9917: CALL_OW 87
// if Lisa then
9921: LD_EXP 14
9925: IFFALSE 9953
// begin Say ( Lisa , D5-Lisa-1 ) ;
9927: LD_EXP 14
9931: PPUSH
9932: LD_STRING D5-Lisa-1
9934: PPUSH
9935: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
9939: LD_EXP 9
9943: PPUSH
9944: LD_STRING D5-JMM-1a
9946: PPUSH
9947: CALL_OW 88
// end else
9951: GO 9965
// Say ( JMM , D5-JMM-1 ) ;
9953: LD_EXP 9
9957: PPUSH
9958: LD_STRING D5-JMM-1
9960: PPUSH
9961: CALL_OW 88
// DialogueOff ;
9965: CALL_OW 7
// while ( true ) do
9969: LD_INT 1
9971: IFFALSE 10027
// begin wait ( 0 0$01 ) ;
9973: LD_INT 35
9975: PPUSH
9976: CALL_OW 67
// x := FilterUnitsExceptArea ( northElectro , [ [ f_btype , b_oil_power ] , [ f_see , 1 ] ] ) ;
9980: LD_ADDR_VAR 0 2
9984: PUSH
9985: LD_INT 8
9987: PPUSH
9988: LD_INT 30
9990: PUSH
9991: LD_INT 26
9993: PUSH
9994: EMPTY
9995: LIST
9996: LIST
9997: PUSH
9998: LD_INT 101
10000: PUSH
10001: LD_INT 1
10003: PUSH
10004: EMPTY
10005: LIST
10006: LIST
10007: PUSH
10008: EMPTY
10009: LIST
10010: LIST
10011: PPUSH
10012: CALL_OW 71
10016: ST_TO_ADDR
// if x then
10017: LD_VAR 0 2
10021: IFFALSE 10025
// break ;
10023: GO 10027
// end ;
10025: GO 9969
// CenterOnUnits ( x [ 1 ] ) ;
10027: LD_VAR 0 2
10031: PUSH
10032: LD_INT 1
10034: ARRAY
10035: PPUSH
10036: CALL_OW 85
// if Frank and GetSide ( Frank ) = 1 then
10040: LD_EXP 15
10044: PUSH
10045: LD_EXP 15
10049: PPUSH
10050: CALL_OW 255
10054: PUSH
10055: LD_INT 1
10057: EQUAL
10058: AND
10059: IFFALSE 10075
// Say ( Frank , D5a-Frank-1 ) else
10061: LD_EXP 15
10065: PPUSH
10066: LD_STRING D5a-Frank-1
10068: PPUSH
10069: CALL_OW 88
10073: GO 10129
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
10075: LD_EXP 18
10079: PUSH
10080: LD_EXP 18
10084: PPUSH
10085: CALL_OW 255
10089: PUSH
10090: LD_INT 1
10092: EQUAL
10093: AND
10094: IFFALSE 10110
// Say ( Kikuchi , D5a-Yam-1 ) else
10096: LD_EXP 18
10100: PPUSH
10101: LD_STRING D5a-Yam-1
10103: PPUSH
10104: CALL_OW 88
10108: GO 10129
// Say ( GetRandom ( sex_male ) [ 1 ] , D5a-Sol1-1 ) ;
10110: LD_INT 1
10112: PPUSH
10113: CALL 608 0 1
10117: PUSH
10118: LD_INT 1
10120: ARRAY
10121: PPUSH
10122: LD_STRING D5a-Sol1-1
10124: PPUSH
10125: CALL_OW 88
// Say ( JMM , D5a-JMM-1 ) ;
10129: LD_EXP 9
10133: PPUSH
10134: LD_STRING D5a-JMM-1
10136: PPUSH
10137: CALL_OW 88
// if Cyrus then
10141: LD_EXP 13
10145: IFFALSE 10159
// Say ( Cyrus , D5a-Cyrus-1 ) ;
10147: LD_EXP 13
10151: PPUSH
10152: LD_STRING D5a-Cyrus-1
10154: PPUSH
10155: CALL_OW 88
// x := false ;
10159: LD_ADDR_VAR 0 2
10163: PUSH
10164: LD_INT 0
10166: ST_TO_ADDR
// while ( true ) do
10167: LD_INT 1
10169: IFFALSE 10256
// begin wait ( 0 0$01 ) ;
10171: LD_INT 35
10173: PPUSH
10174: CALL_OW 67
// for i in FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) diff ru_dep_west do
10178: LD_ADDR_VAR 0 4
10182: PUSH
10183: LD_INT 2
10185: PUSH
10186: LD_INT 30
10188: PUSH
10189: LD_INT 0
10191: PUSH
10192: EMPTY
10193: LIST
10194: LIST
10195: PUSH
10196: LD_INT 30
10198: PUSH
10199: LD_INT 1
10201: PUSH
10202: EMPTY
10203: LIST
10204: LIST
10205: PUSH
10206: EMPTY
10207: LIST
10208: LIST
10209: LIST
10210: PPUSH
10211: CALL_OW 69
10215: PUSH
10216: LD_INT 1
10218: DIFF
10219: PUSH
10220: FOR_IN
10221: IFFALSE 10244
// if BaseNeedEnergy ( i ) then
10223: LD_VAR 0 4
10227: PPUSH
10228: CALL 1178 0 1
10232: IFFALSE 10242
// x := true ;
10234: LD_ADDR_VAR 0 2
10238: PUSH
10239: LD_INT 1
10241: ST_TO_ADDR
10242: GO 10220
10244: POP
10245: POP
// if x then
10246: LD_VAR 0 2
10250: IFFALSE 10254
// break ;
10252: GO 10256
// end ;
10254: GO 10167
// Say ( JMM , D5b-JMM-1 ) ;
10256: LD_EXP 9
10260: PPUSH
10261: LD_STRING D5b-JMM-1
10263: PPUSH
10264: CALL_OW 88
// end ;
10268: PPOPN 4
10270: END
// every 0 0$1 trigger time_to_end [ 1 ] < tick or FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) < 10 do
10271: LD_EXP 5
10275: PUSH
10276: LD_INT 1
10278: ARRAY
10279: PUSH
10280: LD_OWVAR 1
10284: LESS
10285: PUSH
10286: LD_INT 22
10288: PUSH
10289: LD_INT 3
10291: PUSH
10292: EMPTY
10293: LIST
10294: LIST
10295: PUSH
10296: LD_INT 21
10298: PUSH
10299: LD_INT 3
10301: PUSH
10302: EMPTY
10303: LIST
10304: LIST
10305: PUSH
10306: EMPTY
10307: LIST
10308: LIST
10309: PPUSH
10310: CALL_OW 69
10314: PUSH
10315: LD_INT 10
10317: LESS
10318: OR
10319: IFFALSE 10519
10321: GO 10323
10323: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10324: LD_INT 16
10326: PPUSH
10327: CALL_OW 301
10331: NOT
10332: IFFALSE 10355
// begin SayRadio ( Harisson , D3b-Har-3 ) ;
10334: LD_EXP 19
10338: PPUSH
10339: LD_STRING D3b-Har-3
10341: PPUSH
10342: CALL_OW 94
// ChangeMissionObjectives ( M2a ) ;
10346: LD_STRING M2a
10348: PPUSH
10349: CALL_OW 337
// end else
10353: GO 10374
// begin SayRadio ( Harisson , D3b-Har-3a ) ;
10355: LD_EXP 19
10359: PPUSH
10360: LD_STRING D3b-Har-3a
10362: PPUSH
10363: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
10367: LD_STRING M2
10369: PPUSH
10370: CALL_OW 337
// end ; can_end := true ;
10374: LD_ADDR_EXP 6
10378: PUSH
10379: LD_INT 1
10381: ST_TO_ADDR
// SetAreaMapShow ( endArea , 1 ) ;
10382: LD_INT 9
10384: PPUSH
10385: LD_INT 1
10387: PPUSH
10388: CALL_OW 424
// Wait ( 0 0$02 ) ;
10392: LD_INT 70
10394: PPUSH
10395: CALL_OW 67
// if Lisa then
10399: LD_EXP 14
10403: IFFALSE 10417
// Say ( Lisa , D3b-Lisa ) ;
10405: LD_EXP 14
10409: PPUSH
10410: LD_STRING D3b-Lisa
10412: PPUSH
10413: CALL_OW 88
// if Bobby then
10417: LD_EXP 12
10421: IFFALSE 10435
// Say ( Bobby , D3b-Bobby-3 ) ;
10423: LD_EXP 12
10427: PPUSH
10428: LD_STRING D3b-Bobby-3
10430: PPUSH
10431: CALL_OW 88
// if Cyrus then
10435: LD_EXP 13
10439: IFFALSE 10453
// Say ( Cyrus , D3b-Cyrus-3 ) ;
10441: LD_EXP 13
10445: PPUSH
10446: LD_STRING D3b-Cyrus-3
10448: PPUSH
10449: CALL_OW 88
// if Frank and GetSide ( Frank ) = 1 then
10453: LD_EXP 15
10457: PUSH
10458: LD_EXP 15
10462: PPUSH
10463: CALL_OW 255
10467: PUSH
10468: LD_INT 1
10470: EQUAL
10471: AND
10472: IFFALSE 10486
// Say ( Frank , D3b-Frank-3 ) ;
10474: LD_EXP 15
10478: PPUSH
10479: LD_STRING D3b-Frank-3
10481: PPUSH
10482: CALL_OW 88
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
10486: LD_EXP 18
10490: PUSH
10491: LD_EXP 18
10495: PPUSH
10496: CALL_OW 255
10500: PUSH
10501: LD_INT 1
10503: EQUAL
10504: AND
10505: IFFALSE 10519
// Say ( Kikuchi , D3b-Yam-4 ) ;
10507: LD_EXP 18
10511: PPUSH
10512: LD_STRING D3b-Yam-4
10514: PPUSH
10515: CALL_OW 88
// end ;
10519: END
// every 0 0$1 trigger time_to_end [ 2 ] < tick do
10520: LD_EXP 5
10524: PUSH
10525: LD_INT 2
10527: ARRAY
10528: PUSH
10529: LD_OWVAR 1
10533: LESS
10534: IFFALSE 10566
10536: GO 10538
10538: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
10539: LD_EXP 19
10543: PPUSH
10544: LD_STRING D4-Har-1
10546: PPUSH
10547: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
10551: LD_STRING M3
10553: PPUSH
10554: CALL_OW 337
// must_end := true ;
10558: LD_ADDR_EXP 7
10562: PUSH
10563: LD_INT 1
10565: ST_TO_ADDR
// end ;
10566: END
// every 0 0$01 trigger time_to_end [ 3 ] < tick do
10567: LD_EXP 5
10571: PUSH
10572: LD_INT 3
10574: ARRAY
10575: PUSH
10576: LD_OWVAR 1
10580: LESS
10581: IFFALSE 10612
10583: GO 10585
10585: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10586: LD_INT 16
10588: PPUSH
10589: CALL_OW 301
10593: NOT
10594: IFFALSE 10605
// YouLost ( TimeOut1 ) else
10596: LD_STRING TimeOut1
10598: PPUSH
10599: CALL_OW 104
10603: GO 10612
// YouLost ( TimeOut2 ) ;
10605: LD_STRING TimeOut2
10607: PPUSH
10608: CALL_OW 104
// end ;
10612: END
// every 0 0$1 trigger IsInArea ( JMM , endArea ) and can_end do var wait_on , i , tmp , m1 , m2 , m3 ;
10613: LD_EXP 9
10617: PPUSH
10618: LD_INT 9
10620: PPUSH
10621: CALL_OW 308
10625: PUSH
10626: LD_EXP 6
10630: AND
10631: IFFALSE 11731
10633: GO 10635
10635: DISABLE
10636: LD_INT 0
10638: PPUSH
10639: PPUSH
10640: PPUSH
10641: PPUSH
10642: PPUSH
10643: PPUSH
// begin wait_on := false ;
10644: LD_ADDR_VAR 0 1
10648: PUSH
10649: LD_INT 0
10651: ST_TO_ADDR
// if FilterPeople ( 1 ) + 0 > ( FilterPeopleArea ( 1 , endArea ) ^ FilterDriversArea ( 1 , endArea ) ) + 0 then
10652: LD_INT 1
10654: PPUSH
10655: CALL 1255 0 1
10659: PUSH
10660: LD_INT 0
10662: PLUS
10663: PUSH
10664: LD_INT 1
10666: PPUSH
10667: LD_INT 9
10669: PPUSH
10670: CALL 1346 0 2
10674: PUSH
10675: LD_INT 1
10677: PPUSH
10678: LD_INT 9
10680: PPUSH
10681: CALL 1393 0 2
10685: ADD
10686: PUSH
10687: LD_INT 0
10689: PLUS
10690: GREATER
10691: IFFALSE 10740
// case Query ( Q1 ) of 1 :
10693: LD_STRING Q1
10695: PPUSH
10696: CALL_OW 97
10700: PUSH
10701: LD_INT 1
10703: DOUBLE
10704: EQUAL
10705: IFTRUE 10709
10707: GO 10720
10709: POP
// wait_on := true ; 2 :
10710: LD_ADDR_VAR 0 1
10714: PUSH
10715: LD_INT 1
10717: ST_TO_ADDR
10718: GO 10740
10720: LD_INT 2
10722: DOUBLE
10723: EQUAL
10724: IFTRUE 10728
10726: GO 10739
10728: POP
// wait_on := false ; end ;
10729: LD_ADDR_VAR 0 1
10733: PUSH
10734: LD_INT 0
10736: ST_TO_ADDR
10737: GO 10740
10739: POP
// repeat wait ( 0 0$01 ) ;
10740: LD_INT 35
10742: PPUSH
10743: CALL_OW 67
// until ( not wait_on ) or ( FilterPeople ( 1 ) + 0 ) = ( FilterPeopleArea ( 1 , endArea ) ^ FilterDriversArea ( 1 , endArea ) ) + 0 ;
10747: LD_VAR 0 1
10751: NOT
10752: PUSH
10753: LD_INT 1
10755: PPUSH
10756: CALL 1255 0 1
10760: PUSH
10761: LD_INT 0
10763: PLUS
10764: PUSH
10765: LD_INT 1
10767: PPUSH
10768: LD_INT 9
10770: PPUSH
10771: CALL 1346 0 2
10775: PUSH
10776: LD_INT 1
10778: PPUSH
10779: LD_INT 9
10781: PPUSH
10782: CALL 1393 0 2
10786: ADD
10787: PUSH
10788: LD_INT 0
10790: PLUS
10791: EQUAL
10792: OR
10793: IFFALSE 10740
// DialogueOn ;
10795: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
10799: LD_EXP 9
10803: PPUSH
10804: CALL_OW 87
// Say ( JMM , D6-JMM-1 ) ;
10808: LD_EXP 9
10812: PPUSH
10813: LD_STRING D6-JMM-1
10815: PPUSH
10816: CALL_OW 88
// SayRadio ( Harisson , D6-Har-1 ) ;
10820: LD_EXP 19
10824: PPUSH
10825: LD_STRING D6-Har-1
10827: PPUSH
10828: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
10832: LD_EXP 9
10836: PPUSH
10837: LD_STRING D6-JMM-2
10839: PPUSH
10840: CALL_OW 88
// SayRadio ( Harisson , D6-Har-2 ) ;
10844: LD_EXP 19
10848: PPUSH
10849: LD_STRING D6-Har-2
10851: PPUSH
10852: CALL_OW 94
// Say ( JMM , D6-JMM-3 ) ;
10856: LD_EXP 9
10860: PPUSH
10861: LD_STRING D6-JMM-3
10863: PPUSH
10864: CALL_OW 88
// SayRadio ( Harisson , D6-Har-3 ) ;
10868: LD_EXP 19
10872: PPUSH
10873: LD_STRING D6-Har-3
10875: PPUSH
10876: CALL_OW 94
// Say ( JMM , D6-JMM-4 ) ;
10880: LD_EXP 9
10884: PPUSH
10885: LD_STRING D6-JMM-4
10887: PPUSH
10888: CALL_OW 88
// SayRadio ( Harisson , D6-Har-4 ) ;
10892: LD_EXP 19
10896: PPUSH
10897: LD_STRING D6-Har-4
10899: PPUSH
10900: CALL_OW 94
// Say ( JMM , D6-JMM-5 ) ;
10904: LD_EXP 9
10908: PPUSH
10909: LD_STRING D6-JMM-5
10911: PPUSH
10912: CALL_OW 88
// DialogueOff ;
10916: CALL_OW 7
// m1 := false ;
10920: LD_ADDR_VAR 0 4
10924: PUSH
10925: LD_INT 0
10927: ST_TO_ADDR
// m2 := false ;
10928: LD_ADDR_VAR 0 5
10932: PUSH
10933: LD_INT 0
10935: ST_TO_ADDR
// m3 := false ;
10936: LD_ADDR_VAR 0 6
10940: PUSH
10941: LD_INT 0
10943: ST_TO_ADDR
// tmp := FilterBuildings ( 3 ) ;
10944: LD_ADDR_VAR 0 3
10948: PUSH
10949: LD_INT 3
10951: PPUSH
10952: CALL 1524 0 1
10956: ST_TO_ADDR
// if tmp >= 35 then
10957: LD_VAR 0 3
10961: PUSH
10962: LD_INT 35
10964: GREATEREQUAL
10965: IFFALSE 11002
// begin AddMedal ( Destroy1 , - 1 ) ;
10967: LD_STRING Destroy1
10969: PPUSH
10970: LD_INT 1
10972: NEG
10973: PPUSH
10974: CALL_OW 101
// AddMedal ( Destroy2 , - 1 ) ;
10978: LD_STRING Destroy2
10980: PPUSH
10981: LD_INT 1
10983: NEG
10984: PPUSH
10985: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
10989: LD_STRING Destroy3
10991: PPUSH
10992: LD_INT 1
10994: NEG
10995: PPUSH
10996: CALL_OW 101
// end else
11000: GO 11113
// begin AddMedal ( Destroy1 , 1 ) ;
11002: LD_STRING Destroy1
11004: PPUSH
11005: LD_INT 1
11007: PPUSH
11008: CALL_OW 101
// m1 := true ;
11012: LD_ADDR_VAR 0 4
11016: PUSH
11017: LD_INT 1
11019: ST_TO_ADDR
// if tmp >= 25 then
11020: LD_VAR 0 3
11024: PUSH
11025: LD_INT 25
11027: GREATEREQUAL
11028: IFFALSE 11054
// begin AddMedal ( Destroy2 , - 1 ) ;
11030: LD_STRING Destroy2
11032: PPUSH
11033: LD_INT 1
11035: NEG
11036: PPUSH
11037: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
11041: LD_STRING Destroy3
11043: PPUSH
11044: LD_INT 1
11046: NEG
11047: PPUSH
11048: CALL_OW 101
// end else
11052: GO 11113
// begin AddMedal ( Destroy2 , 1 ) ;
11054: LD_STRING Destroy2
11056: PPUSH
11057: LD_INT 1
11059: PPUSH
11060: CALL_OW 101
// m2 := true ;
11064: LD_ADDR_VAR 0 5
11068: PUSH
11069: LD_INT 1
11071: ST_TO_ADDR
// if tmp >= 15 then
11072: LD_VAR 0 3
11076: PUSH
11077: LD_INT 15
11079: GREATEREQUAL
11080: IFFALSE 11095
// AddMedal ( Destroy3 , - 1 ) else
11082: LD_STRING Destroy3
11084: PPUSH
11085: LD_INT 1
11087: NEG
11088: PPUSH
11089: CALL_OW 101
11093: GO 11113
// begin AddMedal ( Destroy3 , 1 ) ;
11095: LD_STRING Destroy3
11097: PPUSH
11098: LD_INT 1
11100: PPUSH
11101: CALL_OW 101
// m3 := true ;
11105: LD_ADDR_VAR 0 6
11109: PUSH
11110: LD_INT 1
11112: ST_TO_ADDR
// end ; end ; end ; if tick <= 32 32$00 then
11113: LD_OWVAR 1
11117: PUSH
11118: LD_INT 67200
11120: LESSEQUAL
11121: IFFALSE 11130
// SetAchievement ( ACH_ASPEED_7 ) ;
11123: LD_STRING ACH_ASPEED_7
11125: PPUSH
11126: CALL_OW 543
// if m1 and m2 and m3 and Difficulty >= 3 then
11130: LD_VAR 0 4
11134: PUSH
11135: LD_VAR 0 5
11139: AND
11140: PUSH
11141: LD_VAR 0 6
11145: AND
11146: PUSH
11147: LD_OWVAR 67
11151: PUSH
11152: LD_INT 3
11154: GREATEREQUAL
11155: AND
11156: IFFALSE 11168
// SetAchievementEX ( ACH_AMER , 7 ) ;
11158: LD_STRING ACH_AMER
11160: PPUSH
11161: LD_INT 7
11163: PPUSH
11164: CALL_OW 564
// GiveMedals ( MAIN ) ;
11168: LD_STRING MAIN
11170: PPUSH
11171: CALL_OW 102
// tmp := FilterPeopleArea ( 1 , endArea ) union FilterDriversArea ( 1 , endArea ) ;
11175: LD_ADDR_VAR 0 3
11179: PUSH
11180: LD_INT 1
11182: PPUSH
11183: LD_INT 9
11185: PPUSH
11186: CALL 1346 0 2
11190: PUSH
11191: LD_INT 1
11193: PPUSH
11194: LD_INT 9
11196: PPUSH
11197: CALL 1393 0 2
11201: UNION
11202: ST_TO_ADDR
// RewardPeople ( tmp ) ;
11203: LD_VAR 0 3
11207: PPUSH
11208: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
11212: LD_EXP 9
11216: PPUSH
11217: LD_EXP 3
11221: PUSH
11222: LD_STRING JMM
11224: STR
11225: PPUSH
11226: CALL_OW 38
// if Brown in tmp then
11230: LD_EXP 10
11234: PUSH
11235: LD_VAR 0 3
11239: IN
11240: IFFALSE 11260
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
11242: LD_EXP 10
11246: PPUSH
11247: LD_EXP 3
11251: PUSH
11252: LD_STRING Brown
11254: STR
11255: PPUSH
11256: CALL_OW 38
// if Donaldson in tmp then
11260: LD_EXP 11
11264: PUSH
11265: LD_VAR 0 3
11269: IN
11270: IFFALSE 11290
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
11272: LD_EXP 11
11276: PPUSH
11277: LD_EXP 3
11281: PUSH
11282: LD_STRING Donaldson
11284: STR
11285: PPUSH
11286: CALL_OW 38
// if Bobby in tmp then
11290: LD_EXP 12
11294: PUSH
11295: LD_VAR 0 3
11299: IN
11300: IFFALSE 11320
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
11302: LD_EXP 12
11306: PPUSH
11307: LD_EXP 3
11311: PUSH
11312: LD_STRING Bobby
11314: STR
11315: PPUSH
11316: CALL_OW 38
// if Cyrus in tmp then
11320: LD_EXP 13
11324: PUSH
11325: LD_VAR 0 3
11329: IN
11330: IFFALSE 11350
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
11332: LD_EXP 13
11336: PPUSH
11337: LD_EXP 3
11341: PUSH
11342: LD_STRING Cyrus
11344: STR
11345: PPUSH
11346: CALL_OW 38
// if Lisa in tmp then
11350: LD_EXP 14
11354: PUSH
11355: LD_VAR 0 3
11359: IN
11360: IFFALSE 11380
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
11362: LD_EXP 14
11366: PPUSH
11367: LD_EXP 3
11371: PUSH
11372: LD_STRING Lisa
11374: STR
11375: PPUSH
11376: CALL_OW 38
// if Frank in tmp then
11380: LD_EXP 15
11384: PUSH
11385: LD_VAR 0 3
11389: IN
11390: IFFALSE 11410
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
11392: LD_EXP 15
11396: PPUSH
11397: LD_EXP 3
11401: PUSH
11402: LD_STRING Frank
11404: STR
11405: PPUSH
11406: CALL_OW 38
// if Gladstone in tmp then
11410: LD_EXP 16
11414: PUSH
11415: LD_VAR 0 3
11419: IN
11420: IFFALSE 11440
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
11422: LD_EXP 16
11426: PPUSH
11427: LD_EXP 3
11431: PUSH
11432: LD_STRING Gladstone
11434: STR
11435: PPUSH
11436: CALL_OW 38
// if Khatam in tmp then
11440: LD_EXP 17
11444: PUSH
11445: LD_VAR 0 3
11449: IN
11450: IFFALSE 11470
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
11452: LD_EXP 17
11456: PPUSH
11457: LD_EXP 3
11461: PUSH
11462: LD_STRING Khatam
11464: STR
11465: PPUSH
11466: CALL_OW 38
// if Kikuchi in tmp then
11470: LD_EXP 18
11474: PUSH
11475: LD_VAR 0 3
11479: IN
11480: IFFALSE 11500
// SaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
11482: LD_EXP 18
11486: PPUSH
11487: LD_EXP 3
11491: PUSH
11492: LD_STRING Kikuchi
11494: STR
11495: PPUSH
11496: CALL_OW 38
// SaveCharacters ( tmp diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] , mission_prefix & others ) ;
11500: LD_VAR 0 3
11504: PUSH
11505: LD_EXP 9
11509: PUSH
11510: LD_EXP 10
11514: PUSH
11515: LD_EXP 11
11519: PUSH
11520: LD_EXP 12
11524: PUSH
11525: LD_EXP 13
11529: PUSH
11530: LD_EXP 14
11534: PUSH
11535: LD_EXP 15
11539: PUSH
11540: LD_EXP 16
11544: PUSH
11545: LD_EXP 18
11549: PUSH
11550: LD_EXP 17
11554: PUSH
11555: EMPTY
11556: LIST
11557: LIST
11558: LIST
11559: LIST
11560: LIST
11561: LIST
11562: LIST
11563: LIST
11564: LIST
11565: LIST
11566: DIFF
11567: PPUSH
11568: LD_EXP 3
11572: PUSH
11573: LD_STRING others
11575: STR
11576: PPUSH
11577: CALL_OW 38
// SaveVariable ( tick , 07_time ) ;
11581: LD_OWVAR 1
11585: PPUSH
11586: LD_STRING 07_time
11588: PPUSH
11589: CALL_OW 39
// tmp := [ ] ;
11593: LD_ADDR_VAR 0 3
11597: PUSH
11598: EMPTY
11599: ST_TO_ADDR
// for i in FilterUnitsInArea ( endArea , [ [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] ] ] ) do
11600: LD_ADDR_VAR 0 2
11604: PUSH
11605: LD_INT 9
11607: PPUSH
11608: LD_INT 22
11610: PUSH
11611: LD_INT 1
11613: PUSH
11614: EMPTY
11615: LIST
11616: LIST
11617: PUSH
11618: LD_INT 23
11620: PUSH
11621: LD_INT 1
11623: PUSH
11624: EMPTY
11625: LIST
11626: LIST
11627: PUSH
11628: LD_INT 21
11630: PUSH
11631: LD_INT 2
11633: PUSH
11634: EMPTY
11635: LIST
11636: LIST
11637: PUSH
11638: EMPTY
11639: LIST
11640: LIST
11641: LIST
11642: PUSH
11643: EMPTY
11644: LIST
11645: PPUSH
11646: CALL_OW 70
11650: PUSH
11651: FOR_IN
11652: IFFALSE 11713
// tmp := tmp ^ [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ;
11654: LD_ADDR_VAR 0 3
11658: PUSH
11659: LD_VAR 0 3
11663: PUSH
11664: LD_VAR 0 2
11668: PPUSH
11669: CALL_OW 265
11673: PUSH
11674: LD_VAR 0 2
11678: PPUSH
11679: CALL_OW 262
11683: PUSH
11684: LD_VAR 0 2
11688: PPUSH
11689: CALL_OW 263
11693: PUSH
11694: LD_VAR 0 2
11698: PPUSH
11699: CALL_OW 264
11703: PUSH
11704: EMPTY
11705: LIST
11706: LIST
11707: LIST
11708: LIST
11709: ADD
11710: ST_TO_ADDR
11711: GO 11651
11713: POP
11714: POP
// SaveVariable ( tmp , 07_vehicles ) ;
11715: LD_VAR 0 3
11719: PPUSH
11720: LD_STRING 07_vehicles
11722: PPUSH
11723: CALL_OW 39
// YouWin ;
11727: CALL_OW 103
// end ; end_of_file
11731: PPOPN 6
11733: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
11734: LD_VAR 0 1
11738: PPUSH
11739: CALL 27890 0 1
// if un = JMM then
11743: LD_VAR 0 1
11747: PUSH
11748: LD_EXP 9
11752: EQUAL
11753: IFFALSE 11762
// YouLost ( JMM ) ;
11755: LD_STRING JMM
11757: PPUSH
11758: CALL_OW 104
// if GetType ( un ) = unit_building then
11762: LD_VAR 0 1
11766: PPUSH
11767: CALL_OW 247
11771: PUSH
11772: LD_INT 3
11774: EQUAL
11775: IFFALSE 11791
// buildings_counter := buildings_counter + 1 ;
11777: LD_ADDR_EXP 4
11781: PUSH
11782: LD_EXP 4
11786: PUSH
11787: LD_INT 1
11789: PLUS
11790: ST_TO_ADDR
// if un in FilterUnitsInArea ( baseArea , [ f_or , [ f_btype , b_turret ] , [ f_btype , b_bunker ] ] ) then
11791: LD_VAR 0 1
11795: PUSH
11796: LD_INT 6
11798: PPUSH
11799: LD_INT 2
11801: PUSH
11802: LD_INT 30
11804: PUSH
11805: LD_INT 33
11807: PUSH
11808: EMPTY
11809: LIST
11810: LIST
11811: PUSH
11812: LD_INT 30
11814: PUSH
11815: LD_INT 32
11817: PUSH
11818: EMPTY
11819: LIST
11820: LIST
11821: PUSH
11822: EMPTY
11823: LIST
11824: LIST
11825: LIST
11826: PPUSH
11827: CALL_OW 70
11831: IN
11832: IFFALSE 11891
// ru_rebuild_list := ru_rebuild_list ^ [ GetBType ( un ) , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ;
11834: LD_ADDR_EXP 20
11838: PUSH
11839: LD_EXP 20
11843: PUSH
11844: LD_VAR 0 1
11848: PPUSH
11849: CALL_OW 266
11853: PUSH
11854: LD_VAR 0 1
11858: PPUSH
11859: CALL_OW 250
11863: PUSH
11864: LD_VAR 0 1
11868: PPUSH
11869: CALL_OW 251
11873: PUSH
11874: LD_VAR 0 1
11878: PPUSH
11879: CALL_OW 254
11883: PUSH
11884: EMPTY
11885: LIST
11886: LIST
11887: LIST
11888: LIST
11889: ADD
11890: ST_TO_ADDR
// if un = ru_dep_main then
11891: LD_VAR 0 1
11895: PUSH
11896: LD_INT 16
11898: EQUAL
11899: IFFALSE 11908
// ChangeMissionObjectives ( M1a ) ;
11901: LD_STRING M1a
11903: PPUSH
11904: CALL_OW 337
// if GetType ( un ) = unit_human and GetSide ( un ) = 3 then
11908: LD_VAR 0 1
11912: PPUSH
11913: CALL_OW 247
11917: PUSH
11918: LD_INT 1
11920: EQUAL
11921: PUSH
11922: LD_VAR 0 1
11926: PPUSH
11927: CALL_OW 255
11931: PUSH
11932: LD_INT 3
11934: EQUAL
11935: AND
11936: IFFALSE 11952
// kill_counter := kill_counter + 1 ;
11938: LD_ADDR_EXP 8
11942: PUSH
11943: LD_EXP 8
11947: PUSH
11948: LD_INT 1
11950: PLUS
11951: ST_TO_ADDR
// end ;
11952: PPOPN 1
11954: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
11955: LD_VAR 0 1
11959: PPUSH
11960: LD_VAR 0 2
11964: PPUSH
11965: CALL 28010 0 2
// end ;
11969: PPOPN 2
11971: END
// on UnitGoesToRed ( un ) do begin if GetBType ( un ) = b_bunker and GetTag ( un ) = 7 then
11972: LD_VAR 0 1
11976: PPUSH
11977: CALL_OW 266
11981: PUSH
11982: LD_INT 32
11984: EQUAL
11985: PUSH
11986: LD_VAR 0 1
11990: PPUSH
11991: CALL_OW 110
11995: PUSH
11996: LD_INT 7
11998: EQUAL
11999: AND
12000: IFFALSE 12014
// SetTag ( un , 0 ) ;
12002: LD_VAR 0 1
12006: PPUSH
12007: LD_INT 0
12009: PPUSH
12010: CALL_OW 109
// end ;
12014: PPOPN 1
12016: END
// on BuildingStarted ( b , builder ) do var i ;
12017: LD_INT 0
12019: PPUSH
// begin if GetSide ( b ) = 3 then
12020: LD_VAR 0 1
12024: PPUSH
12025: CALL_OW 255
12029: PUSH
12030: LD_INT 3
12032: EQUAL
12033: IFFALSE 12073
// for i = 1 to 4 do
12035: LD_ADDR_VAR 0 3
12039: PUSH
12040: DOUBLE
12041: LD_INT 1
12043: DEC
12044: ST_TO_ADDR
12045: LD_INT 4
12047: PUSH
12048: FOR_TO
12049: IFFALSE 12071
// ru_rebuild_list := Delete ( ru_rebuild_list , 1 ) ;
12051: LD_ADDR_EXP 20
12055: PUSH
12056: LD_EXP 20
12060: PPUSH
12061: LD_INT 1
12063: PPUSH
12064: CALL_OW 3
12068: ST_TO_ADDR
12069: GO 12048
12071: POP
12072: POP
// end ;
12073: PPOPN 3
12075: END
// on BuildingComplete ( b ) do if GetBType ( b ) in [ b_bunker , b_turret ] then
12076: LD_VAR 0 1
12080: PPUSH
12081: CALL_OW 266
12085: PUSH
12086: LD_INT 32
12088: PUSH
12089: LD_INT 33
12091: PUSH
12092: EMPTY
12093: LIST
12094: LIST
12095: IN
12096: IFFALSE 12110
// ComPlaceWeapon ( b , ru_gatling_gun ) ;
12098: LD_VAR 0 1
12102: PPUSH
12103: LD_INT 43
12105: PPUSH
12106: CALL_OW 148
12110: PPOPN 1
12112: END
// on LeaveBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
12113: LD_VAR 0 1
12117: PUSH
12118: LD_INT 22
12120: PUSH
12121: LD_INT 3
12123: PUSH
12124: EMPTY
12125: LIST
12126: LIST
12127: PUSH
12128: LD_INT 2
12130: PUSH
12131: LD_INT 30
12133: PUSH
12134: LD_INT 31
12136: PUSH
12137: EMPTY
12138: LIST
12139: LIST
12140: PUSH
12141: LD_INT 30
12143: PUSH
12144: LD_INT 32
12146: PUSH
12147: EMPTY
12148: LIST
12149: LIST
12150: PUSH
12151: EMPTY
12152: LIST
12153: LIST
12154: LIST
12155: PUSH
12156: EMPTY
12157: LIST
12158: LIST
12159: PPUSH
12160: CALL_OW 69
12164: IN
12165: IFFALSE 12187
// GoToAnotherTower ( un , b , 134 , 136 ) ;
12167: LD_VAR 0 2
12171: PPUSH
12172: LD_VAR 0 1
12176: PPUSH
12177: LD_INT 134
12179: PPUSH
12180: LD_INT 136
12182: PPUSH
12183: CALL 838 0 4
// end ;
12187: PPOPN 2
12189: END
// on EnterBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) then
12190: LD_VAR 0 1
12194: PUSH
12195: LD_INT 22
12197: PUSH
12198: LD_INT 3
12200: PUSH
12201: EMPTY
12202: LIST
12203: LIST
12204: PUSH
12205: LD_INT 30
12207: PUSH
12208: LD_INT 32
12210: PUSH
12211: EMPTY
12212: LIST
12213: LIST
12214: PUSH
12215: EMPTY
12216: LIST
12217: LIST
12218: PPUSH
12219: CALL_OW 69
12223: IN
12224: IFFALSE 12238
// SetTag ( b , 0 ) ;
12226: LD_VAR 0 1
12230: PPUSH
12231: LD_INT 0
12233: PPUSH
12234: CALL_OW 109
// end ; end_of_file end_of_file
12238: PPOPN 2
12240: END
// every 0 0$1 do
12241: GO 12243
12243: DISABLE
// begin enable ;
12244: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
12245: LD_STRING updateTimer(
12247: PUSH
12248: LD_OWVAR 1
12252: STR
12253: PUSH
12254: LD_STRING );
12256: STR
12257: PPUSH
12258: CALL_OW 559
// end ;
12262: END
// export function SOS_MapStart ( ) ; begin
12263: LD_INT 0
12265: PPUSH
// if streamModeActive then
12266: LD_EXP 21
12270: IFFALSE 12279
// DefineStreamItems ( true ) ;
12272: LD_INT 1
12274: PPUSH
12275: CALL 13933 0 1
// UpdateFactoryWaypoints ( ) ;
12279: CALL 26794 0 0
// UpdateWarehouseGatheringPoints ( ) ;
12283: CALL 27051 0 0
// end ;
12287: LD_VAR 0 1
12291: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
12292: LD_INT 0
12294: PPUSH
// if p2 = hack_mode then
12295: LD_VAR 0 2
12299: PUSH
12300: LD_INT 100
12302: EQUAL
12303: IFFALSE 13306
// begin if not StreamModeActive then
12305: LD_EXP 21
12309: NOT
12310: IFFALSE 12320
// StreamModeActive := true ;
12312: LD_ADDR_EXP 21
12316: PUSH
12317: LD_INT 1
12319: ST_TO_ADDR
// if p3 = 0 then
12320: LD_VAR 0 3
12324: PUSH
12325: LD_INT 0
12327: EQUAL
12328: IFFALSE 12334
// InitStreamMode ;
12330: CALL 13469 0 0
// if p3 = 1 then
12334: LD_VAR 0 3
12338: PUSH
12339: LD_INT 1
12341: EQUAL
12342: IFFALSE 12352
// sRocket := true ;
12344: LD_ADDR_EXP 26
12348: PUSH
12349: LD_INT 1
12351: ST_TO_ADDR
// if p3 = 2 then
12352: LD_VAR 0 3
12356: PUSH
12357: LD_INT 2
12359: EQUAL
12360: IFFALSE 12370
// sSpeed := true ;
12362: LD_ADDR_EXP 25
12366: PUSH
12367: LD_INT 1
12369: ST_TO_ADDR
// if p3 = 3 then
12370: LD_VAR 0 3
12374: PUSH
12375: LD_INT 3
12377: EQUAL
12378: IFFALSE 12388
// sEngine := true ;
12380: LD_ADDR_EXP 27
12384: PUSH
12385: LD_INT 1
12387: ST_TO_ADDR
// if p3 = 4 then
12388: LD_VAR 0 3
12392: PUSH
12393: LD_INT 4
12395: EQUAL
12396: IFFALSE 12406
// sSpec := true ;
12398: LD_ADDR_EXP 24
12402: PUSH
12403: LD_INT 1
12405: ST_TO_ADDR
// if p3 = 5 then
12406: LD_VAR 0 3
12410: PUSH
12411: LD_INT 5
12413: EQUAL
12414: IFFALSE 12424
// sLevel := true ;
12416: LD_ADDR_EXP 28
12420: PUSH
12421: LD_INT 1
12423: ST_TO_ADDR
// if p3 = 6 then
12424: LD_VAR 0 3
12428: PUSH
12429: LD_INT 6
12431: EQUAL
12432: IFFALSE 12442
// sArmoury := true ;
12434: LD_ADDR_EXP 29
12438: PUSH
12439: LD_INT 1
12441: ST_TO_ADDR
// if p3 = 7 then
12442: LD_VAR 0 3
12446: PUSH
12447: LD_INT 7
12449: EQUAL
12450: IFFALSE 12460
// sRadar := true ;
12452: LD_ADDR_EXP 30
12456: PUSH
12457: LD_INT 1
12459: ST_TO_ADDR
// if p3 = 8 then
12460: LD_VAR 0 3
12464: PUSH
12465: LD_INT 8
12467: EQUAL
12468: IFFALSE 12478
// sBunker := true ;
12470: LD_ADDR_EXP 31
12474: PUSH
12475: LD_INT 1
12477: ST_TO_ADDR
// if p3 = 9 then
12478: LD_VAR 0 3
12482: PUSH
12483: LD_INT 9
12485: EQUAL
12486: IFFALSE 12496
// sHack := true ;
12488: LD_ADDR_EXP 32
12492: PUSH
12493: LD_INT 1
12495: ST_TO_ADDR
// if p3 = 10 then
12496: LD_VAR 0 3
12500: PUSH
12501: LD_INT 10
12503: EQUAL
12504: IFFALSE 12514
// sFire := true ;
12506: LD_ADDR_EXP 33
12510: PUSH
12511: LD_INT 1
12513: ST_TO_ADDR
// if p3 = 11 then
12514: LD_VAR 0 3
12518: PUSH
12519: LD_INT 11
12521: EQUAL
12522: IFFALSE 12532
// sRefresh := true ;
12524: LD_ADDR_EXP 34
12528: PUSH
12529: LD_INT 1
12531: ST_TO_ADDR
// if p3 = 12 then
12532: LD_VAR 0 3
12536: PUSH
12537: LD_INT 12
12539: EQUAL
12540: IFFALSE 12550
// sExp := true ;
12542: LD_ADDR_EXP 35
12546: PUSH
12547: LD_INT 1
12549: ST_TO_ADDR
// if p3 = 13 then
12550: LD_VAR 0 3
12554: PUSH
12555: LD_INT 13
12557: EQUAL
12558: IFFALSE 12568
// sDepot := true ;
12560: LD_ADDR_EXP 36
12564: PUSH
12565: LD_INT 1
12567: ST_TO_ADDR
// if p3 = 14 then
12568: LD_VAR 0 3
12572: PUSH
12573: LD_INT 14
12575: EQUAL
12576: IFFALSE 12586
// sFlag := true ;
12578: LD_ADDR_EXP 37
12582: PUSH
12583: LD_INT 1
12585: ST_TO_ADDR
// if p3 = 15 then
12586: LD_VAR 0 3
12590: PUSH
12591: LD_INT 15
12593: EQUAL
12594: IFFALSE 12604
// sKamikadze := true ;
12596: LD_ADDR_EXP 45
12600: PUSH
12601: LD_INT 1
12603: ST_TO_ADDR
// if p3 = 16 then
12604: LD_VAR 0 3
12608: PUSH
12609: LD_INT 16
12611: EQUAL
12612: IFFALSE 12622
// sTroll := true ;
12614: LD_ADDR_EXP 46
12618: PUSH
12619: LD_INT 1
12621: ST_TO_ADDR
// if p3 = 17 then
12622: LD_VAR 0 3
12626: PUSH
12627: LD_INT 17
12629: EQUAL
12630: IFFALSE 12640
// sSlow := true ;
12632: LD_ADDR_EXP 47
12636: PUSH
12637: LD_INT 1
12639: ST_TO_ADDR
// if p3 = 18 then
12640: LD_VAR 0 3
12644: PUSH
12645: LD_INT 18
12647: EQUAL
12648: IFFALSE 12658
// sLack := true ;
12650: LD_ADDR_EXP 48
12654: PUSH
12655: LD_INT 1
12657: ST_TO_ADDR
// if p3 = 19 then
12658: LD_VAR 0 3
12662: PUSH
12663: LD_INT 19
12665: EQUAL
12666: IFFALSE 12676
// sTank := true ;
12668: LD_ADDR_EXP 50
12672: PUSH
12673: LD_INT 1
12675: ST_TO_ADDR
// if p3 = 20 then
12676: LD_VAR 0 3
12680: PUSH
12681: LD_INT 20
12683: EQUAL
12684: IFFALSE 12694
// sRemote := true ;
12686: LD_ADDR_EXP 51
12690: PUSH
12691: LD_INT 1
12693: ST_TO_ADDR
// if p3 = 21 then
12694: LD_VAR 0 3
12698: PUSH
12699: LD_INT 21
12701: EQUAL
12702: IFFALSE 12712
// sPowell := true ;
12704: LD_ADDR_EXP 52
12708: PUSH
12709: LD_INT 1
12711: ST_TO_ADDR
// if p3 = 22 then
12712: LD_VAR 0 3
12716: PUSH
12717: LD_INT 22
12719: EQUAL
12720: IFFALSE 12730
// sTeleport := true ;
12722: LD_ADDR_EXP 55
12726: PUSH
12727: LD_INT 1
12729: ST_TO_ADDR
// if p3 = 23 then
12730: LD_VAR 0 3
12734: PUSH
12735: LD_INT 23
12737: EQUAL
12738: IFFALSE 12748
// sOilTower := true ;
12740: LD_ADDR_EXP 57
12744: PUSH
12745: LD_INT 1
12747: ST_TO_ADDR
// if p3 = 24 then
12748: LD_VAR 0 3
12752: PUSH
12753: LD_INT 24
12755: EQUAL
12756: IFFALSE 12766
// sShovel := true ;
12758: LD_ADDR_EXP 58
12762: PUSH
12763: LD_INT 1
12765: ST_TO_ADDR
// if p3 = 25 then
12766: LD_VAR 0 3
12770: PUSH
12771: LD_INT 25
12773: EQUAL
12774: IFFALSE 12784
// sSheik := true ;
12776: LD_ADDR_EXP 59
12780: PUSH
12781: LD_INT 1
12783: ST_TO_ADDR
// if p3 = 26 then
12784: LD_VAR 0 3
12788: PUSH
12789: LD_INT 26
12791: EQUAL
12792: IFFALSE 12802
// sEarthquake := true ;
12794: LD_ADDR_EXP 61
12798: PUSH
12799: LD_INT 1
12801: ST_TO_ADDR
// if p3 = 27 then
12802: LD_VAR 0 3
12806: PUSH
12807: LD_INT 27
12809: EQUAL
12810: IFFALSE 12820
// sAI := true ;
12812: LD_ADDR_EXP 62
12816: PUSH
12817: LD_INT 1
12819: ST_TO_ADDR
// if p3 = 28 then
12820: LD_VAR 0 3
12824: PUSH
12825: LD_INT 28
12827: EQUAL
12828: IFFALSE 12838
// sCargo := true ;
12830: LD_ADDR_EXP 65
12834: PUSH
12835: LD_INT 1
12837: ST_TO_ADDR
// if p3 = 29 then
12838: LD_VAR 0 3
12842: PUSH
12843: LD_INT 29
12845: EQUAL
12846: IFFALSE 12856
// sDLaser := true ;
12848: LD_ADDR_EXP 66
12852: PUSH
12853: LD_INT 1
12855: ST_TO_ADDR
// if p3 = 30 then
12856: LD_VAR 0 3
12860: PUSH
12861: LD_INT 30
12863: EQUAL
12864: IFFALSE 12874
// sExchange := true ;
12866: LD_ADDR_EXP 67
12870: PUSH
12871: LD_INT 1
12873: ST_TO_ADDR
// if p3 = 31 then
12874: LD_VAR 0 3
12878: PUSH
12879: LD_INT 31
12881: EQUAL
12882: IFFALSE 12892
// sFac := true ;
12884: LD_ADDR_EXP 68
12888: PUSH
12889: LD_INT 1
12891: ST_TO_ADDR
// if p3 = 32 then
12892: LD_VAR 0 3
12896: PUSH
12897: LD_INT 32
12899: EQUAL
12900: IFFALSE 12910
// sPower := true ;
12902: LD_ADDR_EXP 69
12906: PUSH
12907: LD_INT 1
12909: ST_TO_ADDR
// if p3 = 33 then
12910: LD_VAR 0 3
12914: PUSH
12915: LD_INT 33
12917: EQUAL
12918: IFFALSE 12928
// sRandom := true ;
12920: LD_ADDR_EXP 70
12924: PUSH
12925: LD_INT 1
12927: ST_TO_ADDR
// if p3 = 34 then
12928: LD_VAR 0 3
12932: PUSH
12933: LD_INT 34
12935: EQUAL
12936: IFFALSE 12946
// sShield := true ;
12938: LD_ADDR_EXP 71
12942: PUSH
12943: LD_INT 1
12945: ST_TO_ADDR
// if p3 = 35 then
12946: LD_VAR 0 3
12950: PUSH
12951: LD_INT 35
12953: EQUAL
12954: IFFALSE 12964
// sTime := true ;
12956: LD_ADDR_EXP 72
12960: PUSH
12961: LD_INT 1
12963: ST_TO_ADDR
// if p3 = 36 then
12964: LD_VAR 0 3
12968: PUSH
12969: LD_INT 36
12971: EQUAL
12972: IFFALSE 12982
// sTools := true ;
12974: LD_ADDR_EXP 73
12978: PUSH
12979: LD_INT 1
12981: ST_TO_ADDR
// if p3 = 101 then
12982: LD_VAR 0 3
12986: PUSH
12987: LD_INT 101
12989: EQUAL
12990: IFFALSE 13000
// sSold := true ;
12992: LD_ADDR_EXP 38
12996: PUSH
12997: LD_INT 1
12999: ST_TO_ADDR
// if p3 = 102 then
13000: LD_VAR 0 3
13004: PUSH
13005: LD_INT 102
13007: EQUAL
13008: IFFALSE 13018
// sDiff := true ;
13010: LD_ADDR_EXP 39
13014: PUSH
13015: LD_INT 1
13017: ST_TO_ADDR
// if p3 = 103 then
13018: LD_VAR 0 3
13022: PUSH
13023: LD_INT 103
13025: EQUAL
13026: IFFALSE 13036
// sFog := true ;
13028: LD_ADDR_EXP 42
13032: PUSH
13033: LD_INT 1
13035: ST_TO_ADDR
// if p3 = 104 then
13036: LD_VAR 0 3
13040: PUSH
13041: LD_INT 104
13043: EQUAL
13044: IFFALSE 13054
// sReset := true ;
13046: LD_ADDR_EXP 43
13050: PUSH
13051: LD_INT 1
13053: ST_TO_ADDR
// if p3 = 105 then
13054: LD_VAR 0 3
13058: PUSH
13059: LD_INT 105
13061: EQUAL
13062: IFFALSE 13072
// sSun := true ;
13064: LD_ADDR_EXP 44
13068: PUSH
13069: LD_INT 1
13071: ST_TO_ADDR
// if p3 = 106 then
13072: LD_VAR 0 3
13076: PUSH
13077: LD_INT 106
13079: EQUAL
13080: IFFALSE 13090
// sTiger := true ;
13082: LD_ADDR_EXP 40
13086: PUSH
13087: LD_INT 1
13089: ST_TO_ADDR
// if p3 = 107 then
13090: LD_VAR 0 3
13094: PUSH
13095: LD_INT 107
13097: EQUAL
13098: IFFALSE 13108
// sBomb := true ;
13100: LD_ADDR_EXP 41
13104: PUSH
13105: LD_INT 1
13107: ST_TO_ADDR
// if p3 = 108 then
13108: LD_VAR 0 3
13112: PUSH
13113: LD_INT 108
13115: EQUAL
13116: IFFALSE 13126
// sWound := true ;
13118: LD_ADDR_EXP 49
13122: PUSH
13123: LD_INT 1
13125: ST_TO_ADDR
// if p3 = 109 then
13126: LD_VAR 0 3
13130: PUSH
13131: LD_INT 109
13133: EQUAL
13134: IFFALSE 13144
// sBetray := true ;
13136: LD_ADDR_EXP 53
13140: PUSH
13141: LD_INT 1
13143: ST_TO_ADDR
// if p3 = 110 then
13144: LD_VAR 0 3
13148: PUSH
13149: LD_INT 110
13151: EQUAL
13152: IFFALSE 13162
// sContamin := true ;
13154: LD_ADDR_EXP 54
13158: PUSH
13159: LD_INT 1
13161: ST_TO_ADDR
// if p3 = 111 then
13162: LD_VAR 0 3
13166: PUSH
13167: LD_INT 111
13169: EQUAL
13170: IFFALSE 13180
// sOil := true ;
13172: LD_ADDR_EXP 56
13176: PUSH
13177: LD_INT 1
13179: ST_TO_ADDR
// if p3 = 112 then
13180: LD_VAR 0 3
13184: PUSH
13185: LD_INT 112
13187: EQUAL
13188: IFFALSE 13198
// sStu := true ;
13190: LD_ADDR_EXP 60
13194: PUSH
13195: LD_INT 1
13197: ST_TO_ADDR
// if p3 = 113 then
13198: LD_VAR 0 3
13202: PUSH
13203: LD_INT 113
13205: EQUAL
13206: IFFALSE 13216
// sBazooka := true ;
13208: LD_ADDR_EXP 63
13212: PUSH
13213: LD_INT 1
13215: ST_TO_ADDR
// if p3 = 114 then
13216: LD_VAR 0 3
13220: PUSH
13221: LD_INT 114
13223: EQUAL
13224: IFFALSE 13234
// sMortar := true ;
13226: LD_ADDR_EXP 64
13230: PUSH
13231: LD_INT 1
13233: ST_TO_ADDR
// if p3 = 115 then
13234: LD_VAR 0 3
13238: PUSH
13239: LD_INT 115
13241: EQUAL
13242: IFFALSE 13252
// sRanger := true ;
13244: LD_ADDR_EXP 74
13248: PUSH
13249: LD_INT 1
13251: ST_TO_ADDR
// if p3 = 116 then
13252: LD_VAR 0 3
13256: PUSH
13257: LD_INT 116
13259: EQUAL
13260: IFFALSE 13270
// sComputer := true ;
13262: LD_ADDR_EXP 75
13266: PUSH
13267: LD_INT 1
13269: ST_TO_ADDR
// if p3 = 117 then
13270: LD_VAR 0 3
13274: PUSH
13275: LD_INT 117
13277: EQUAL
13278: IFFALSE 13288
// s30 := true ;
13280: LD_ADDR_EXP 76
13284: PUSH
13285: LD_INT 1
13287: ST_TO_ADDR
// if p3 = 118 then
13288: LD_VAR 0 3
13292: PUSH
13293: LD_INT 118
13295: EQUAL
13296: IFFALSE 13306
// s60 := true ;
13298: LD_ADDR_EXP 77
13302: PUSH
13303: LD_INT 1
13305: ST_TO_ADDR
// end ; if p2 = stream_mode then
13306: LD_VAR 0 2
13310: PUSH
13311: LD_INT 101
13313: EQUAL
13314: IFFALSE 13442
// begin case p3 of 1 :
13316: LD_VAR 0 3
13320: PUSH
13321: LD_INT 1
13323: DOUBLE
13324: EQUAL
13325: IFTRUE 13329
13327: GO 13336
13329: POP
// hHackUnlimitedResources ; 2 :
13330: CALL 25540 0 0
13334: GO 13442
13336: LD_INT 2
13338: DOUBLE
13339: EQUAL
13340: IFTRUE 13344
13342: GO 13351
13344: POP
// hHackSetLevel10 ; 3 :
13345: CALL 25673 0 0
13349: GO 13442
13351: LD_INT 3
13353: DOUBLE
13354: EQUAL
13355: IFTRUE 13359
13357: GO 13366
13359: POP
// hHackSetLevel10YourUnits ; 4 :
13360: CALL 25758 0 0
13364: GO 13442
13366: LD_INT 4
13368: DOUBLE
13369: EQUAL
13370: IFTRUE 13374
13372: GO 13381
13374: POP
// hHackInvincible ; 5 :
13375: CALL 26206 0 0
13379: GO 13442
13381: LD_INT 5
13383: DOUBLE
13384: EQUAL
13385: IFTRUE 13389
13387: GO 13396
13389: POP
// hHackInvisible ; 6 :
13390: CALL 26317 0 0
13394: GO 13442
13396: LD_INT 6
13398: DOUBLE
13399: EQUAL
13400: IFTRUE 13404
13402: GO 13411
13404: POP
// hHackChangeYourSide ; 7 :
13405: CALL 26374 0 0
13409: GO 13442
13411: LD_INT 7
13413: DOUBLE
13414: EQUAL
13415: IFTRUE 13419
13417: GO 13426
13419: POP
// hHackChangeUnitSide ; 8 :
13420: CALL 26416 0 0
13424: GO 13442
13426: LD_INT 8
13428: DOUBLE
13429: EQUAL
13430: IFTRUE 13434
13432: GO 13441
13434: POP
// hHackFog ; end ;
13435: CALL 26517 0 0
13439: GO 13442
13441: POP
// end ; end ;
13442: LD_VAR 0 7
13446: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
13447: GO 13449
13449: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
13450: LD_STRING initStreamRollete();
13452: PPUSH
13453: CALL_OW 559
// InitStreamMode ;
13457: CALL 13469 0 0
// DefineStreamItems ( false ) ;
13461: LD_INT 0
13463: PPUSH
13464: CALL 13933 0 1
// end ;
13468: END
// function InitStreamMode ; begin
13469: LD_INT 0
13471: PPUSH
// streamModeActive := false ;
13472: LD_ADDR_EXP 21
13476: PUSH
13477: LD_INT 0
13479: ST_TO_ADDR
// normalCounter := 36 ;
13480: LD_ADDR_EXP 22
13484: PUSH
13485: LD_INT 36
13487: ST_TO_ADDR
// hardcoreCounter := 18 ;
13488: LD_ADDR_EXP 23
13492: PUSH
13493: LD_INT 18
13495: ST_TO_ADDR
// sRocket := false ;
13496: LD_ADDR_EXP 26
13500: PUSH
13501: LD_INT 0
13503: ST_TO_ADDR
// sSpeed := false ;
13504: LD_ADDR_EXP 25
13508: PUSH
13509: LD_INT 0
13511: ST_TO_ADDR
// sEngine := false ;
13512: LD_ADDR_EXP 27
13516: PUSH
13517: LD_INT 0
13519: ST_TO_ADDR
// sSpec := false ;
13520: LD_ADDR_EXP 24
13524: PUSH
13525: LD_INT 0
13527: ST_TO_ADDR
// sLevel := false ;
13528: LD_ADDR_EXP 28
13532: PUSH
13533: LD_INT 0
13535: ST_TO_ADDR
// sArmoury := false ;
13536: LD_ADDR_EXP 29
13540: PUSH
13541: LD_INT 0
13543: ST_TO_ADDR
// sRadar := false ;
13544: LD_ADDR_EXP 30
13548: PUSH
13549: LD_INT 0
13551: ST_TO_ADDR
// sBunker := false ;
13552: LD_ADDR_EXP 31
13556: PUSH
13557: LD_INT 0
13559: ST_TO_ADDR
// sHack := false ;
13560: LD_ADDR_EXP 32
13564: PUSH
13565: LD_INT 0
13567: ST_TO_ADDR
// sFire := false ;
13568: LD_ADDR_EXP 33
13572: PUSH
13573: LD_INT 0
13575: ST_TO_ADDR
// sRefresh := false ;
13576: LD_ADDR_EXP 34
13580: PUSH
13581: LD_INT 0
13583: ST_TO_ADDR
// sExp := false ;
13584: LD_ADDR_EXP 35
13588: PUSH
13589: LD_INT 0
13591: ST_TO_ADDR
// sDepot := false ;
13592: LD_ADDR_EXP 36
13596: PUSH
13597: LD_INT 0
13599: ST_TO_ADDR
// sFlag := false ;
13600: LD_ADDR_EXP 37
13604: PUSH
13605: LD_INT 0
13607: ST_TO_ADDR
// sKamikadze := false ;
13608: LD_ADDR_EXP 45
13612: PUSH
13613: LD_INT 0
13615: ST_TO_ADDR
// sTroll := false ;
13616: LD_ADDR_EXP 46
13620: PUSH
13621: LD_INT 0
13623: ST_TO_ADDR
// sSlow := false ;
13624: LD_ADDR_EXP 47
13628: PUSH
13629: LD_INT 0
13631: ST_TO_ADDR
// sLack := false ;
13632: LD_ADDR_EXP 48
13636: PUSH
13637: LD_INT 0
13639: ST_TO_ADDR
// sTank := false ;
13640: LD_ADDR_EXP 50
13644: PUSH
13645: LD_INT 0
13647: ST_TO_ADDR
// sRemote := false ;
13648: LD_ADDR_EXP 51
13652: PUSH
13653: LD_INT 0
13655: ST_TO_ADDR
// sPowell := false ;
13656: LD_ADDR_EXP 52
13660: PUSH
13661: LD_INT 0
13663: ST_TO_ADDR
// sTeleport := false ;
13664: LD_ADDR_EXP 55
13668: PUSH
13669: LD_INT 0
13671: ST_TO_ADDR
// sOilTower := false ;
13672: LD_ADDR_EXP 57
13676: PUSH
13677: LD_INT 0
13679: ST_TO_ADDR
// sShovel := false ;
13680: LD_ADDR_EXP 58
13684: PUSH
13685: LD_INT 0
13687: ST_TO_ADDR
// sSheik := false ;
13688: LD_ADDR_EXP 59
13692: PUSH
13693: LD_INT 0
13695: ST_TO_ADDR
// sEarthquake := false ;
13696: LD_ADDR_EXP 61
13700: PUSH
13701: LD_INT 0
13703: ST_TO_ADDR
// sAI := false ;
13704: LD_ADDR_EXP 62
13708: PUSH
13709: LD_INT 0
13711: ST_TO_ADDR
// sCargo := false ;
13712: LD_ADDR_EXP 65
13716: PUSH
13717: LD_INT 0
13719: ST_TO_ADDR
// sDLaser := false ;
13720: LD_ADDR_EXP 66
13724: PUSH
13725: LD_INT 0
13727: ST_TO_ADDR
// sExchange := false ;
13728: LD_ADDR_EXP 67
13732: PUSH
13733: LD_INT 0
13735: ST_TO_ADDR
// sFac := false ;
13736: LD_ADDR_EXP 68
13740: PUSH
13741: LD_INT 0
13743: ST_TO_ADDR
// sPower := false ;
13744: LD_ADDR_EXP 69
13748: PUSH
13749: LD_INT 0
13751: ST_TO_ADDR
// sRandom := false ;
13752: LD_ADDR_EXP 70
13756: PUSH
13757: LD_INT 0
13759: ST_TO_ADDR
// sShield := false ;
13760: LD_ADDR_EXP 71
13764: PUSH
13765: LD_INT 0
13767: ST_TO_ADDR
// sTime := false ;
13768: LD_ADDR_EXP 72
13772: PUSH
13773: LD_INT 0
13775: ST_TO_ADDR
// sTools := false ;
13776: LD_ADDR_EXP 73
13780: PUSH
13781: LD_INT 0
13783: ST_TO_ADDR
// sSold := false ;
13784: LD_ADDR_EXP 38
13788: PUSH
13789: LD_INT 0
13791: ST_TO_ADDR
// sDiff := false ;
13792: LD_ADDR_EXP 39
13796: PUSH
13797: LD_INT 0
13799: ST_TO_ADDR
// sFog := false ;
13800: LD_ADDR_EXP 42
13804: PUSH
13805: LD_INT 0
13807: ST_TO_ADDR
// sReset := false ;
13808: LD_ADDR_EXP 43
13812: PUSH
13813: LD_INT 0
13815: ST_TO_ADDR
// sSun := false ;
13816: LD_ADDR_EXP 44
13820: PUSH
13821: LD_INT 0
13823: ST_TO_ADDR
// sTiger := false ;
13824: LD_ADDR_EXP 40
13828: PUSH
13829: LD_INT 0
13831: ST_TO_ADDR
// sBomb := false ;
13832: LD_ADDR_EXP 41
13836: PUSH
13837: LD_INT 0
13839: ST_TO_ADDR
// sWound := false ;
13840: LD_ADDR_EXP 49
13844: PUSH
13845: LD_INT 0
13847: ST_TO_ADDR
// sBetray := false ;
13848: LD_ADDR_EXP 53
13852: PUSH
13853: LD_INT 0
13855: ST_TO_ADDR
// sContamin := false ;
13856: LD_ADDR_EXP 54
13860: PUSH
13861: LD_INT 0
13863: ST_TO_ADDR
// sOil := false ;
13864: LD_ADDR_EXP 56
13868: PUSH
13869: LD_INT 0
13871: ST_TO_ADDR
// sStu := false ;
13872: LD_ADDR_EXP 60
13876: PUSH
13877: LD_INT 0
13879: ST_TO_ADDR
// sBazooka := false ;
13880: LD_ADDR_EXP 63
13884: PUSH
13885: LD_INT 0
13887: ST_TO_ADDR
// sMortar := false ;
13888: LD_ADDR_EXP 64
13892: PUSH
13893: LD_INT 0
13895: ST_TO_ADDR
// sRanger := false ;
13896: LD_ADDR_EXP 74
13900: PUSH
13901: LD_INT 0
13903: ST_TO_ADDR
// sComputer := false ;
13904: LD_ADDR_EXP 75
13908: PUSH
13909: LD_INT 0
13911: ST_TO_ADDR
// s30 := false ;
13912: LD_ADDR_EXP 76
13916: PUSH
13917: LD_INT 0
13919: ST_TO_ADDR
// s60 := false ;
13920: LD_ADDR_EXP 77
13924: PUSH
13925: LD_INT 0
13927: ST_TO_ADDR
// end ;
13928: LD_VAR 0 1
13932: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
13933: LD_INT 0
13935: PPUSH
13936: PPUSH
13937: PPUSH
13938: PPUSH
13939: PPUSH
13940: PPUSH
13941: PPUSH
// result := [ ] ;
13942: LD_ADDR_VAR 0 2
13946: PUSH
13947: EMPTY
13948: ST_TO_ADDR
// if campaign_id = 1 then
13949: LD_OWVAR 69
13953: PUSH
13954: LD_INT 1
13956: EQUAL
13957: IFFALSE 17123
// begin case mission_number of 1 :
13959: LD_OWVAR 70
13963: PUSH
13964: LD_INT 1
13966: DOUBLE
13967: EQUAL
13968: IFTRUE 13972
13970: GO 14048
13972: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
13973: LD_ADDR_VAR 0 2
13977: PUSH
13978: LD_INT 2
13980: PUSH
13981: LD_INT 4
13983: PUSH
13984: LD_INT 11
13986: PUSH
13987: LD_INT 12
13989: PUSH
13990: LD_INT 15
13992: PUSH
13993: LD_INT 16
13995: PUSH
13996: LD_INT 22
13998: PUSH
13999: LD_INT 23
14001: PUSH
14002: LD_INT 26
14004: PUSH
14005: EMPTY
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: LIST
14013: LIST
14014: LIST
14015: PUSH
14016: LD_INT 101
14018: PUSH
14019: LD_INT 102
14021: PUSH
14022: LD_INT 106
14024: PUSH
14025: LD_INT 116
14027: PUSH
14028: LD_INT 117
14030: PUSH
14031: LD_INT 118
14033: PUSH
14034: EMPTY
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: PUSH
14042: EMPTY
14043: LIST
14044: LIST
14045: ST_TO_ADDR
14046: GO 17121
14048: LD_INT 2
14050: DOUBLE
14051: EQUAL
14052: IFTRUE 14056
14054: GO 14140
14056: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
14057: LD_ADDR_VAR 0 2
14061: PUSH
14062: LD_INT 2
14064: PUSH
14065: LD_INT 4
14067: PUSH
14068: LD_INT 11
14070: PUSH
14071: LD_INT 12
14073: PUSH
14074: LD_INT 15
14076: PUSH
14077: LD_INT 16
14079: PUSH
14080: LD_INT 22
14082: PUSH
14083: LD_INT 23
14085: PUSH
14086: LD_INT 26
14088: PUSH
14089: EMPTY
14090: LIST
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: PUSH
14100: LD_INT 101
14102: PUSH
14103: LD_INT 102
14105: PUSH
14106: LD_INT 105
14108: PUSH
14109: LD_INT 106
14111: PUSH
14112: LD_INT 108
14114: PUSH
14115: LD_INT 116
14117: PUSH
14118: LD_INT 117
14120: PUSH
14121: LD_INT 118
14123: PUSH
14124: EMPTY
14125: LIST
14126: LIST
14127: LIST
14128: LIST
14129: LIST
14130: LIST
14131: LIST
14132: LIST
14133: PUSH
14134: EMPTY
14135: LIST
14136: LIST
14137: ST_TO_ADDR
14138: GO 17121
14140: LD_INT 3
14142: DOUBLE
14143: EQUAL
14144: IFTRUE 14148
14146: GO 14236
14148: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
14149: LD_ADDR_VAR 0 2
14153: PUSH
14154: LD_INT 2
14156: PUSH
14157: LD_INT 4
14159: PUSH
14160: LD_INT 5
14162: PUSH
14163: LD_INT 11
14165: PUSH
14166: LD_INT 12
14168: PUSH
14169: LD_INT 15
14171: PUSH
14172: LD_INT 16
14174: PUSH
14175: LD_INT 22
14177: PUSH
14178: LD_INT 26
14180: PUSH
14181: LD_INT 36
14183: PUSH
14184: EMPTY
14185: LIST
14186: LIST
14187: LIST
14188: LIST
14189: LIST
14190: LIST
14191: LIST
14192: LIST
14193: LIST
14194: LIST
14195: PUSH
14196: LD_INT 101
14198: PUSH
14199: LD_INT 102
14201: PUSH
14202: LD_INT 105
14204: PUSH
14205: LD_INT 106
14207: PUSH
14208: LD_INT 108
14210: PUSH
14211: LD_INT 116
14213: PUSH
14214: LD_INT 117
14216: PUSH
14217: LD_INT 118
14219: PUSH
14220: EMPTY
14221: LIST
14222: LIST
14223: LIST
14224: LIST
14225: LIST
14226: LIST
14227: LIST
14228: LIST
14229: PUSH
14230: EMPTY
14231: LIST
14232: LIST
14233: ST_TO_ADDR
14234: GO 17121
14236: LD_INT 4
14238: DOUBLE
14239: EQUAL
14240: IFTRUE 14244
14242: GO 14340
14244: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
14245: LD_ADDR_VAR 0 2
14249: PUSH
14250: LD_INT 2
14252: PUSH
14253: LD_INT 4
14255: PUSH
14256: LD_INT 5
14258: PUSH
14259: LD_INT 8
14261: PUSH
14262: LD_INT 11
14264: PUSH
14265: LD_INT 12
14267: PUSH
14268: LD_INT 15
14270: PUSH
14271: LD_INT 16
14273: PUSH
14274: LD_INT 22
14276: PUSH
14277: LD_INT 23
14279: PUSH
14280: LD_INT 26
14282: PUSH
14283: LD_INT 36
14285: PUSH
14286: EMPTY
14287: LIST
14288: LIST
14289: LIST
14290: LIST
14291: LIST
14292: LIST
14293: LIST
14294: LIST
14295: LIST
14296: LIST
14297: LIST
14298: LIST
14299: PUSH
14300: LD_INT 101
14302: PUSH
14303: LD_INT 102
14305: PUSH
14306: LD_INT 105
14308: PUSH
14309: LD_INT 106
14311: PUSH
14312: LD_INT 108
14314: PUSH
14315: LD_INT 116
14317: PUSH
14318: LD_INT 117
14320: PUSH
14321: LD_INT 118
14323: PUSH
14324: EMPTY
14325: LIST
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: PUSH
14334: EMPTY
14335: LIST
14336: LIST
14337: ST_TO_ADDR
14338: GO 17121
14340: LD_INT 5
14342: DOUBLE
14343: EQUAL
14344: IFTRUE 14348
14346: GO 14460
14348: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
14349: LD_ADDR_VAR 0 2
14353: PUSH
14354: LD_INT 2
14356: PUSH
14357: LD_INT 4
14359: PUSH
14360: LD_INT 5
14362: PUSH
14363: LD_INT 6
14365: PUSH
14366: LD_INT 8
14368: PUSH
14369: LD_INT 11
14371: PUSH
14372: LD_INT 12
14374: PUSH
14375: LD_INT 15
14377: PUSH
14378: LD_INT 16
14380: PUSH
14381: LD_INT 22
14383: PUSH
14384: LD_INT 23
14386: PUSH
14387: LD_INT 25
14389: PUSH
14390: LD_INT 26
14392: PUSH
14393: LD_INT 36
14395: PUSH
14396: EMPTY
14397: LIST
14398: LIST
14399: LIST
14400: LIST
14401: LIST
14402: LIST
14403: LIST
14404: LIST
14405: LIST
14406: LIST
14407: LIST
14408: LIST
14409: LIST
14410: LIST
14411: PUSH
14412: LD_INT 101
14414: PUSH
14415: LD_INT 102
14417: PUSH
14418: LD_INT 105
14420: PUSH
14421: LD_INT 106
14423: PUSH
14424: LD_INT 108
14426: PUSH
14427: LD_INT 109
14429: PUSH
14430: LD_INT 112
14432: PUSH
14433: LD_INT 116
14435: PUSH
14436: LD_INT 117
14438: PUSH
14439: LD_INT 118
14441: PUSH
14442: EMPTY
14443: LIST
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: PUSH
14454: EMPTY
14455: LIST
14456: LIST
14457: ST_TO_ADDR
14458: GO 17121
14460: LD_INT 6
14462: DOUBLE
14463: EQUAL
14464: IFTRUE 14468
14466: GO 14600
14468: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
14469: LD_ADDR_VAR 0 2
14473: PUSH
14474: LD_INT 2
14476: PUSH
14477: LD_INT 4
14479: PUSH
14480: LD_INT 5
14482: PUSH
14483: LD_INT 6
14485: PUSH
14486: LD_INT 8
14488: PUSH
14489: LD_INT 11
14491: PUSH
14492: LD_INT 12
14494: PUSH
14495: LD_INT 15
14497: PUSH
14498: LD_INT 16
14500: PUSH
14501: LD_INT 20
14503: PUSH
14504: LD_INT 21
14506: PUSH
14507: LD_INT 22
14509: PUSH
14510: LD_INT 23
14512: PUSH
14513: LD_INT 25
14515: PUSH
14516: LD_INT 26
14518: PUSH
14519: LD_INT 30
14521: PUSH
14522: LD_INT 31
14524: PUSH
14525: LD_INT 32
14527: PUSH
14528: LD_INT 36
14530: PUSH
14531: EMPTY
14532: LIST
14533: LIST
14534: LIST
14535: LIST
14536: LIST
14537: LIST
14538: LIST
14539: LIST
14540: LIST
14541: LIST
14542: LIST
14543: LIST
14544: LIST
14545: LIST
14546: LIST
14547: LIST
14548: LIST
14549: LIST
14550: LIST
14551: PUSH
14552: LD_INT 101
14554: PUSH
14555: LD_INT 102
14557: PUSH
14558: LD_INT 105
14560: PUSH
14561: LD_INT 106
14563: PUSH
14564: LD_INT 108
14566: PUSH
14567: LD_INT 109
14569: PUSH
14570: LD_INT 112
14572: PUSH
14573: LD_INT 116
14575: PUSH
14576: LD_INT 117
14578: PUSH
14579: LD_INT 118
14581: PUSH
14582: EMPTY
14583: LIST
14584: LIST
14585: LIST
14586: LIST
14587: LIST
14588: LIST
14589: LIST
14590: LIST
14591: LIST
14592: LIST
14593: PUSH
14594: EMPTY
14595: LIST
14596: LIST
14597: ST_TO_ADDR
14598: GO 17121
14600: LD_INT 7
14602: DOUBLE
14603: EQUAL
14604: IFTRUE 14608
14606: GO 14720
14608: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
14609: LD_ADDR_VAR 0 2
14613: PUSH
14614: LD_INT 2
14616: PUSH
14617: LD_INT 4
14619: PUSH
14620: LD_INT 5
14622: PUSH
14623: LD_INT 7
14625: PUSH
14626: LD_INT 11
14628: PUSH
14629: LD_INT 12
14631: PUSH
14632: LD_INT 15
14634: PUSH
14635: LD_INT 16
14637: PUSH
14638: LD_INT 20
14640: PUSH
14641: LD_INT 21
14643: PUSH
14644: LD_INT 22
14646: PUSH
14647: LD_INT 23
14649: PUSH
14650: LD_INT 25
14652: PUSH
14653: LD_INT 26
14655: PUSH
14656: EMPTY
14657: LIST
14658: LIST
14659: LIST
14660: LIST
14661: LIST
14662: LIST
14663: LIST
14664: LIST
14665: LIST
14666: LIST
14667: LIST
14668: LIST
14669: LIST
14670: LIST
14671: PUSH
14672: LD_INT 101
14674: PUSH
14675: LD_INT 102
14677: PUSH
14678: LD_INT 103
14680: PUSH
14681: LD_INT 105
14683: PUSH
14684: LD_INT 106
14686: PUSH
14687: LD_INT 108
14689: PUSH
14690: LD_INT 112
14692: PUSH
14693: LD_INT 116
14695: PUSH
14696: LD_INT 117
14698: PUSH
14699: LD_INT 118
14701: PUSH
14702: EMPTY
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: LIST
14710: LIST
14711: LIST
14712: LIST
14713: PUSH
14714: EMPTY
14715: LIST
14716: LIST
14717: ST_TO_ADDR
14718: GO 17121
14720: LD_INT 8
14722: DOUBLE
14723: EQUAL
14724: IFTRUE 14728
14726: GO 14868
14728: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
14729: LD_ADDR_VAR 0 2
14733: PUSH
14734: LD_INT 2
14736: PUSH
14737: LD_INT 4
14739: PUSH
14740: LD_INT 5
14742: PUSH
14743: LD_INT 6
14745: PUSH
14746: LD_INT 7
14748: PUSH
14749: LD_INT 8
14751: PUSH
14752: LD_INT 11
14754: PUSH
14755: LD_INT 12
14757: PUSH
14758: LD_INT 15
14760: PUSH
14761: LD_INT 16
14763: PUSH
14764: LD_INT 20
14766: PUSH
14767: LD_INT 21
14769: PUSH
14770: LD_INT 22
14772: PUSH
14773: LD_INT 23
14775: PUSH
14776: LD_INT 25
14778: PUSH
14779: LD_INT 26
14781: PUSH
14782: LD_INT 30
14784: PUSH
14785: LD_INT 31
14787: PUSH
14788: LD_INT 32
14790: PUSH
14791: LD_INT 36
14793: PUSH
14794: EMPTY
14795: LIST
14796: LIST
14797: LIST
14798: LIST
14799: LIST
14800: LIST
14801: LIST
14802: LIST
14803: LIST
14804: LIST
14805: LIST
14806: LIST
14807: LIST
14808: LIST
14809: LIST
14810: LIST
14811: LIST
14812: LIST
14813: LIST
14814: LIST
14815: PUSH
14816: LD_INT 101
14818: PUSH
14819: LD_INT 102
14821: PUSH
14822: LD_INT 103
14824: PUSH
14825: LD_INT 105
14827: PUSH
14828: LD_INT 106
14830: PUSH
14831: LD_INT 108
14833: PUSH
14834: LD_INT 109
14836: PUSH
14837: LD_INT 112
14839: PUSH
14840: LD_INT 116
14842: PUSH
14843: LD_INT 117
14845: PUSH
14846: LD_INT 118
14848: PUSH
14849: EMPTY
14850: LIST
14851: LIST
14852: LIST
14853: LIST
14854: LIST
14855: LIST
14856: LIST
14857: LIST
14858: LIST
14859: LIST
14860: LIST
14861: PUSH
14862: EMPTY
14863: LIST
14864: LIST
14865: ST_TO_ADDR
14866: GO 17121
14868: LD_INT 9
14870: DOUBLE
14871: EQUAL
14872: IFTRUE 14876
14874: GO 15024
14876: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
14877: LD_ADDR_VAR 0 2
14881: PUSH
14882: LD_INT 2
14884: PUSH
14885: LD_INT 4
14887: PUSH
14888: LD_INT 5
14890: PUSH
14891: LD_INT 6
14893: PUSH
14894: LD_INT 7
14896: PUSH
14897: LD_INT 8
14899: PUSH
14900: LD_INT 11
14902: PUSH
14903: LD_INT 12
14905: PUSH
14906: LD_INT 15
14908: PUSH
14909: LD_INT 16
14911: PUSH
14912: LD_INT 20
14914: PUSH
14915: LD_INT 21
14917: PUSH
14918: LD_INT 22
14920: PUSH
14921: LD_INT 23
14923: PUSH
14924: LD_INT 25
14926: PUSH
14927: LD_INT 26
14929: PUSH
14930: LD_INT 28
14932: PUSH
14933: LD_INT 30
14935: PUSH
14936: LD_INT 31
14938: PUSH
14939: LD_INT 32
14941: PUSH
14942: LD_INT 36
14944: PUSH
14945: EMPTY
14946: LIST
14947: LIST
14948: LIST
14949: LIST
14950: LIST
14951: LIST
14952: LIST
14953: LIST
14954: LIST
14955: LIST
14956: LIST
14957: LIST
14958: LIST
14959: LIST
14960: LIST
14961: LIST
14962: LIST
14963: LIST
14964: LIST
14965: LIST
14966: LIST
14967: PUSH
14968: LD_INT 101
14970: PUSH
14971: LD_INT 102
14973: PUSH
14974: LD_INT 103
14976: PUSH
14977: LD_INT 105
14979: PUSH
14980: LD_INT 106
14982: PUSH
14983: LD_INT 108
14985: PUSH
14986: LD_INT 109
14988: PUSH
14989: LD_INT 112
14991: PUSH
14992: LD_INT 114
14994: PUSH
14995: LD_INT 116
14997: PUSH
14998: LD_INT 117
15000: PUSH
15001: LD_INT 118
15003: PUSH
15004: EMPTY
15005: LIST
15006: LIST
15007: LIST
15008: LIST
15009: LIST
15010: LIST
15011: LIST
15012: LIST
15013: LIST
15014: LIST
15015: LIST
15016: LIST
15017: PUSH
15018: EMPTY
15019: LIST
15020: LIST
15021: ST_TO_ADDR
15022: GO 17121
15024: LD_INT 10
15026: DOUBLE
15027: EQUAL
15028: IFTRUE 15032
15030: GO 15228
15032: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
15033: LD_ADDR_VAR 0 2
15037: PUSH
15038: LD_INT 2
15040: PUSH
15041: LD_INT 4
15043: PUSH
15044: LD_INT 5
15046: PUSH
15047: LD_INT 6
15049: PUSH
15050: LD_INT 7
15052: PUSH
15053: LD_INT 8
15055: PUSH
15056: LD_INT 9
15058: PUSH
15059: LD_INT 10
15061: PUSH
15062: LD_INT 11
15064: PUSH
15065: LD_INT 12
15067: PUSH
15068: LD_INT 13
15070: PUSH
15071: LD_INT 14
15073: PUSH
15074: LD_INT 15
15076: PUSH
15077: LD_INT 16
15079: PUSH
15080: LD_INT 17
15082: PUSH
15083: LD_INT 18
15085: PUSH
15086: LD_INT 19
15088: PUSH
15089: LD_INT 20
15091: PUSH
15092: LD_INT 21
15094: PUSH
15095: LD_INT 22
15097: PUSH
15098: LD_INT 23
15100: PUSH
15101: LD_INT 24
15103: PUSH
15104: LD_INT 25
15106: PUSH
15107: LD_INT 26
15109: PUSH
15110: LD_INT 28
15112: PUSH
15113: LD_INT 30
15115: PUSH
15116: LD_INT 31
15118: PUSH
15119: LD_INT 32
15121: PUSH
15122: LD_INT 36
15124: PUSH
15125: EMPTY
15126: LIST
15127: LIST
15128: LIST
15129: LIST
15130: LIST
15131: LIST
15132: LIST
15133: LIST
15134: LIST
15135: LIST
15136: LIST
15137: LIST
15138: LIST
15139: LIST
15140: LIST
15141: LIST
15142: LIST
15143: LIST
15144: LIST
15145: LIST
15146: LIST
15147: LIST
15148: LIST
15149: LIST
15150: LIST
15151: LIST
15152: LIST
15153: LIST
15154: LIST
15155: PUSH
15156: LD_INT 101
15158: PUSH
15159: LD_INT 102
15161: PUSH
15162: LD_INT 103
15164: PUSH
15165: LD_INT 104
15167: PUSH
15168: LD_INT 105
15170: PUSH
15171: LD_INT 106
15173: PUSH
15174: LD_INT 107
15176: PUSH
15177: LD_INT 108
15179: PUSH
15180: LD_INT 109
15182: PUSH
15183: LD_INT 110
15185: PUSH
15186: LD_INT 111
15188: PUSH
15189: LD_INT 112
15191: PUSH
15192: LD_INT 114
15194: PUSH
15195: LD_INT 116
15197: PUSH
15198: LD_INT 117
15200: PUSH
15201: LD_INT 118
15203: PUSH
15204: EMPTY
15205: LIST
15206: LIST
15207: LIST
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: LIST
15213: LIST
15214: LIST
15215: LIST
15216: LIST
15217: LIST
15218: LIST
15219: LIST
15220: LIST
15221: PUSH
15222: EMPTY
15223: LIST
15224: LIST
15225: ST_TO_ADDR
15226: GO 17121
15228: LD_INT 11
15230: DOUBLE
15231: EQUAL
15232: IFTRUE 15236
15234: GO 15440
15236: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
15237: LD_ADDR_VAR 0 2
15241: PUSH
15242: LD_INT 2
15244: PUSH
15245: LD_INT 3
15247: PUSH
15248: LD_INT 4
15250: PUSH
15251: LD_INT 5
15253: PUSH
15254: LD_INT 6
15256: PUSH
15257: LD_INT 7
15259: PUSH
15260: LD_INT 8
15262: PUSH
15263: LD_INT 9
15265: PUSH
15266: LD_INT 10
15268: PUSH
15269: LD_INT 11
15271: PUSH
15272: LD_INT 12
15274: PUSH
15275: LD_INT 13
15277: PUSH
15278: LD_INT 14
15280: PUSH
15281: LD_INT 15
15283: PUSH
15284: LD_INT 16
15286: PUSH
15287: LD_INT 17
15289: PUSH
15290: LD_INT 18
15292: PUSH
15293: LD_INT 19
15295: PUSH
15296: LD_INT 20
15298: PUSH
15299: LD_INT 21
15301: PUSH
15302: LD_INT 22
15304: PUSH
15305: LD_INT 23
15307: PUSH
15308: LD_INT 24
15310: PUSH
15311: LD_INT 25
15313: PUSH
15314: LD_INT 26
15316: PUSH
15317: LD_INT 28
15319: PUSH
15320: LD_INT 30
15322: PUSH
15323: LD_INT 31
15325: PUSH
15326: LD_INT 32
15328: PUSH
15329: LD_INT 34
15331: PUSH
15332: LD_INT 36
15334: PUSH
15335: EMPTY
15336: LIST
15337: LIST
15338: LIST
15339: LIST
15340: LIST
15341: LIST
15342: LIST
15343: LIST
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: LIST
15349: LIST
15350: LIST
15351: LIST
15352: LIST
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: PUSH
15368: LD_INT 101
15370: PUSH
15371: LD_INT 102
15373: PUSH
15374: LD_INT 103
15376: PUSH
15377: LD_INT 104
15379: PUSH
15380: LD_INT 105
15382: PUSH
15383: LD_INT 106
15385: PUSH
15386: LD_INT 107
15388: PUSH
15389: LD_INT 108
15391: PUSH
15392: LD_INT 109
15394: PUSH
15395: LD_INT 110
15397: PUSH
15398: LD_INT 111
15400: PUSH
15401: LD_INT 112
15403: PUSH
15404: LD_INT 114
15406: PUSH
15407: LD_INT 116
15409: PUSH
15410: LD_INT 117
15412: PUSH
15413: LD_INT 118
15415: PUSH
15416: EMPTY
15417: LIST
15418: LIST
15419: LIST
15420: LIST
15421: LIST
15422: LIST
15423: LIST
15424: LIST
15425: LIST
15426: LIST
15427: LIST
15428: LIST
15429: LIST
15430: LIST
15431: LIST
15432: LIST
15433: PUSH
15434: EMPTY
15435: LIST
15436: LIST
15437: ST_TO_ADDR
15438: GO 17121
15440: LD_INT 12
15442: DOUBLE
15443: EQUAL
15444: IFTRUE 15448
15446: GO 15668
15448: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
15449: LD_ADDR_VAR 0 2
15453: PUSH
15454: LD_INT 1
15456: PUSH
15457: LD_INT 2
15459: PUSH
15460: LD_INT 3
15462: PUSH
15463: LD_INT 4
15465: PUSH
15466: LD_INT 5
15468: PUSH
15469: LD_INT 6
15471: PUSH
15472: LD_INT 7
15474: PUSH
15475: LD_INT 8
15477: PUSH
15478: LD_INT 9
15480: PUSH
15481: LD_INT 10
15483: PUSH
15484: LD_INT 11
15486: PUSH
15487: LD_INT 12
15489: PUSH
15490: LD_INT 13
15492: PUSH
15493: LD_INT 14
15495: PUSH
15496: LD_INT 15
15498: PUSH
15499: LD_INT 16
15501: PUSH
15502: LD_INT 17
15504: PUSH
15505: LD_INT 18
15507: PUSH
15508: LD_INT 19
15510: PUSH
15511: LD_INT 20
15513: PUSH
15514: LD_INT 21
15516: PUSH
15517: LD_INT 22
15519: PUSH
15520: LD_INT 23
15522: PUSH
15523: LD_INT 24
15525: PUSH
15526: LD_INT 25
15528: PUSH
15529: LD_INT 26
15531: PUSH
15532: LD_INT 27
15534: PUSH
15535: LD_INT 28
15537: PUSH
15538: LD_INT 30
15540: PUSH
15541: LD_INT 31
15543: PUSH
15544: LD_INT 32
15546: PUSH
15547: LD_INT 33
15549: PUSH
15550: LD_INT 34
15552: PUSH
15553: LD_INT 36
15555: PUSH
15556: EMPTY
15557: LIST
15558: LIST
15559: LIST
15560: LIST
15561: LIST
15562: LIST
15563: LIST
15564: LIST
15565: LIST
15566: LIST
15567: LIST
15568: LIST
15569: LIST
15570: LIST
15571: LIST
15572: LIST
15573: LIST
15574: LIST
15575: LIST
15576: LIST
15577: LIST
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: LIST
15584: LIST
15585: LIST
15586: LIST
15587: LIST
15588: LIST
15589: LIST
15590: LIST
15591: PUSH
15592: LD_INT 101
15594: PUSH
15595: LD_INT 102
15597: PUSH
15598: LD_INT 103
15600: PUSH
15601: LD_INT 104
15603: PUSH
15604: LD_INT 105
15606: PUSH
15607: LD_INT 106
15609: PUSH
15610: LD_INT 107
15612: PUSH
15613: LD_INT 108
15615: PUSH
15616: LD_INT 109
15618: PUSH
15619: LD_INT 110
15621: PUSH
15622: LD_INT 111
15624: PUSH
15625: LD_INT 112
15627: PUSH
15628: LD_INT 113
15630: PUSH
15631: LD_INT 114
15633: PUSH
15634: LD_INT 116
15636: PUSH
15637: LD_INT 117
15639: PUSH
15640: LD_INT 118
15642: PUSH
15643: EMPTY
15644: LIST
15645: LIST
15646: LIST
15647: LIST
15648: LIST
15649: LIST
15650: LIST
15651: LIST
15652: LIST
15653: LIST
15654: LIST
15655: LIST
15656: LIST
15657: LIST
15658: LIST
15659: LIST
15660: LIST
15661: PUSH
15662: EMPTY
15663: LIST
15664: LIST
15665: ST_TO_ADDR
15666: GO 17121
15668: LD_INT 13
15670: DOUBLE
15671: EQUAL
15672: IFTRUE 15676
15674: GO 15884
15676: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
15677: LD_ADDR_VAR 0 2
15681: PUSH
15682: LD_INT 1
15684: PUSH
15685: LD_INT 2
15687: PUSH
15688: LD_INT 3
15690: PUSH
15691: LD_INT 4
15693: PUSH
15694: LD_INT 5
15696: PUSH
15697: LD_INT 8
15699: PUSH
15700: LD_INT 9
15702: PUSH
15703: LD_INT 10
15705: PUSH
15706: LD_INT 11
15708: PUSH
15709: LD_INT 12
15711: PUSH
15712: LD_INT 14
15714: PUSH
15715: LD_INT 15
15717: PUSH
15718: LD_INT 16
15720: PUSH
15721: LD_INT 17
15723: PUSH
15724: LD_INT 18
15726: PUSH
15727: LD_INT 19
15729: PUSH
15730: LD_INT 20
15732: PUSH
15733: LD_INT 21
15735: PUSH
15736: LD_INT 22
15738: PUSH
15739: LD_INT 23
15741: PUSH
15742: LD_INT 24
15744: PUSH
15745: LD_INT 25
15747: PUSH
15748: LD_INT 26
15750: PUSH
15751: LD_INT 27
15753: PUSH
15754: LD_INT 28
15756: PUSH
15757: LD_INT 30
15759: PUSH
15760: LD_INT 31
15762: PUSH
15763: LD_INT 32
15765: PUSH
15766: LD_INT 33
15768: PUSH
15769: LD_INT 34
15771: PUSH
15772: LD_INT 36
15774: PUSH
15775: EMPTY
15776: LIST
15777: LIST
15778: LIST
15779: LIST
15780: LIST
15781: LIST
15782: LIST
15783: LIST
15784: LIST
15785: LIST
15786: LIST
15787: LIST
15788: LIST
15789: LIST
15790: LIST
15791: LIST
15792: LIST
15793: LIST
15794: LIST
15795: LIST
15796: LIST
15797: LIST
15798: LIST
15799: LIST
15800: LIST
15801: LIST
15802: LIST
15803: LIST
15804: LIST
15805: LIST
15806: LIST
15807: PUSH
15808: LD_INT 101
15810: PUSH
15811: LD_INT 102
15813: PUSH
15814: LD_INT 103
15816: PUSH
15817: LD_INT 104
15819: PUSH
15820: LD_INT 105
15822: PUSH
15823: LD_INT 106
15825: PUSH
15826: LD_INT 107
15828: PUSH
15829: LD_INT 108
15831: PUSH
15832: LD_INT 109
15834: PUSH
15835: LD_INT 110
15837: PUSH
15838: LD_INT 111
15840: PUSH
15841: LD_INT 112
15843: PUSH
15844: LD_INT 113
15846: PUSH
15847: LD_INT 114
15849: PUSH
15850: LD_INT 116
15852: PUSH
15853: LD_INT 117
15855: PUSH
15856: LD_INT 118
15858: PUSH
15859: EMPTY
15860: LIST
15861: LIST
15862: LIST
15863: LIST
15864: LIST
15865: LIST
15866: LIST
15867: LIST
15868: LIST
15869: LIST
15870: LIST
15871: LIST
15872: LIST
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: PUSH
15878: EMPTY
15879: LIST
15880: LIST
15881: ST_TO_ADDR
15882: GO 17121
15884: LD_INT 14
15886: DOUBLE
15887: EQUAL
15888: IFTRUE 15892
15890: GO 16116
15892: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
15893: LD_ADDR_VAR 0 2
15897: PUSH
15898: LD_INT 1
15900: PUSH
15901: LD_INT 2
15903: PUSH
15904: LD_INT 3
15906: PUSH
15907: LD_INT 4
15909: PUSH
15910: LD_INT 5
15912: PUSH
15913: LD_INT 6
15915: PUSH
15916: LD_INT 7
15918: PUSH
15919: LD_INT 8
15921: PUSH
15922: LD_INT 9
15924: PUSH
15925: LD_INT 10
15927: PUSH
15928: LD_INT 11
15930: PUSH
15931: LD_INT 12
15933: PUSH
15934: LD_INT 13
15936: PUSH
15937: LD_INT 14
15939: PUSH
15940: LD_INT 15
15942: PUSH
15943: LD_INT 16
15945: PUSH
15946: LD_INT 17
15948: PUSH
15949: LD_INT 18
15951: PUSH
15952: LD_INT 19
15954: PUSH
15955: LD_INT 20
15957: PUSH
15958: LD_INT 21
15960: PUSH
15961: LD_INT 22
15963: PUSH
15964: LD_INT 23
15966: PUSH
15967: LD_INT 24
15969: PUSH
15970: LD_INT 25
15972: PUSH
15973: LD_INT 26
15975: PUSH
15976: LD_INT 27
15978: PUSH
15979: LD_INT 28
15981: PUSH
15982: LD_INT 29
15984: PUSH
15985: LD_INT 30
15987: PUSH
15988: LD_INT 31
15990: PUSH
15991: LD_INT 32
15993: PUSH
15994: LD_INT 33
15996: PUSH
15997: LD_INT 34
15999: PUSH
16000: LD_INT 36
16002: PUSH
16003: EMPTY
16004: LIST
16005: LIST
16006: LIST
16007: LIST
16008: LIST
16009: LIST
16010: LIST
16011: LIST
16012: LIST
16013: LIST
16014: LIST
16015: LIST
16016: LIST
16017: LIST
16018: LIST
16019: LIST
16020: LIST
16021: LIST
16022: LIST
16023: LIST
16024: LIST
16025: LIST
16026: LIST
16027: LIST
16028: LIST
16029: LIST
16030: LIST
16031: LIST
16032: LIST
16033: LIST
16034: LIST
16035: LIST
16036: LIST
16037: LIST
16038: LIST
16039: PUSH
16040: LD_INT 101
16042: PUSH
16043: LD_INT 102
16045: PUSH
16046: LD_INT 103
16048: PUSH
16049: LD_INT 104
16051: PUSH
16052: LD_INT 105
16054: PUSH
16055: LD_INT 106
16057: PUSH
16058: LD_INT 107
16060: PUSH
16061: LD_INT 108
16063: PUSH
16064: LD_INT 109
16066: PUSH
16067: LD_INT 110
16069: PUSH
16070: LD_INT 111
16072: PUSH
16073: LD_INT 112
16075: PUSH
16076: LD_INT 113
16078: PUSH
16079: LD_INT 114
16081: PUSH
16082: LD_INT 116
16084: PUSH
16085: LD_INT 117
16087: PUSH
16088: LD_INT 118
16090: PUSH
16091: EMPTY
16092: LIST
16093: LIST
16094: LIST
16095: LIST
16096: LIST
16097: LIST
16098: LIST
16099: LIST
16100: LIST
16101: LIST
16102: LIST
16103: LIST
16104: LIST
16105: LIST
16106: LIST
16107: LIST
16108: LIST
16109: PUSH
16110: EMPTY
16111: LIST
16112: LIST
16113: ST_TO_ADDR
16114: GO 17121
16116: LD_INT 15
16118: DOUBLE
16119: EQUAL
16120: IFTRUE 16124
16122: GO 16348
16124: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
16125: LD_ADDR_VAR 0 2
16129: PUSH
16130: LD_INT 1
16132: PUSH
16133: LD_INT 2
16135: PUSH
16136: LD_INT 3
16138: PUSH
16139: LD_INT 4
16141: PUSH
16142: LD_INT 5
16144: PUSH
16145: LD_INT 6
16147: PUSH
16148: LD_INT 7
16150: PUSH
16151: LD_INT 8
16153: PUSH
16154: LD_INT 9
16156: PUSH
16157: LD_INT 10
16159: PUSH
16160: LD_INT 11
16162: PUSH
16163: LD_INT 12
16165: PUSH
16166: LD_INT 13
16168: PUSH
16169: LD_INT 14
16171: PUSH
16172: LD_INT 15
16174: PUSH
16175: LD_INT 16
16177: PUSH
16178: LD_INT 17
16180: PUSH
16181: LD_INT 18
16183: PUSH
16184: LD_INT 19
16186: PUSH
16187: LD_INT 20
16189: PUSH
16190: LD_INT 21
16192: PUSH
16193: LD_INT 22
16195: PUSH
16196: LD_INT 23
16198: PUSH
16199: LD_INT 24
16201: PUSH
16202: LD_INT 25
16204: PUSH
16205: LD_INT 26
16207: PUSH
16208: LD_INT 27
16210: PUSH
16211: LD_INT 28
16213: PUSH
16214: LD_INT 29
16216: PUSH
16217: LD_INT 30
16219: PUSH
16220: LD_INT 31
16222: PUSH
16223: LD_INT 32
16225: PUSH
16226: LD_INT 33
16228: PUSH
16229: LD_INT 34
16231: PUSH
16232: LD_INT 36
16234: PUSH
16235: EMPTY
16236: LIST
16237: LIST
16238: LIST
16239: LIST
16240: LIST
16241: LIST
16242: LIST
16243: LIST
16244: LIST
16245: LIST
16246: LIST
16247: LIST
16248: LIST
16249: LIST
16250: LIST
16251: LIST
16252: LIST
16253: LIST
16254: LIST
16255: LIST
16256: LIST
16257: LIST
16258: LIST
16259: LIST
16260: LIST
16261: LIST
16262: LIST
16263: LIST
16264: LIST
16265: LIST
16266: LIST
16267: LIST
16268: LIST
16269: LIST
16270: LIST
16271: PUSH
16272: LD_INT 101
16274: PUSH
16275: LD_INT 102
16277: PUSH
16278: LD_INT 103
16280: PUSH
16281: LD_INT 104
16283: PUSH
16284: LD_INT 105
16286: PUSH
16287: LD_INT 106
16289: PUSH
16290: LD_INT 107
16292: PUSH
16293: LD_INT 108
16295: PUSH
16296: LD_INT 109
16298: PUSH
16299: LD_INT 110
16301: PUSH
16302: LD_INT 111
16304: PUSH
16305: LD_INT 112
16307: PUSH
16308: LD_INT 113
16310: PUSH
16311: LD_INT 114
16313: PUSH
16314: LD_INT 116
16316: PUSH
16317: LD_INT 117
16319: PUSH
16320: LD_INT 118
16322: PUSH
16323: EMPTY
16324: LIST
16325: LIST
16326: LIST
16327: LIST
16328: LIST
16329: LIST
16330: LIST
16331: LIST
16332: LIST
16333: LIST
16334: LIST
16335: LIST
16336: LIST
16337: LIST
16338: LIST
16339: LIST
16340: LIST
16341: PUSH
16342: EMPTY
16343: LIST
16344: LIST
16345: ST_TO_ADDR
16346: GO 17121
16348: LD_INT 16
16350: DOUBLE
16351: EQUAL
16352: IFTRUE 16356
16354: GO 16492
16356: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
16357: LD_ADDR_VAR 0 2
16361: PUSH
16362: LD_INT 2
16364: PUSH
16365: LD_INT 4
16367: PUSH
16368: LD_INT 5
16370: PUSH
16371: LD_INT 7
16373: PUSH
16374: LD_INT 11
16376: PUSH
16377: LD_INT 12
16379: PUSH
16380: LD_INT 15
16382: PUSH
16383: LD_INT 16
16385: PUSH
16386: LD_INT 20
16388: PUSH
16389: LD_INT 21
16391: PUSH
16392: LD_INT 22
16394: PUSH
16395: LD_INT 23
16397: PUSH
16398: LD_INT 25
16400: PUSH
16401: LD_INT 26
16403: PUSH
16404: LD_INT 30
16406: PUSH
16407: LD_INT 31
16409: PUSH
16410: LD_INT 32
16412: PUSH
16413: LD_INT 33
16415: PUSH
16416: LD_INT 34
16418: PUSH
16419: EMPTY
16420: LIST
16421: LIST
16422: LIST
16423: LIST
16424: LIST
16425: LIST
16426: LIST
16427: LIST
16428: LIST
16429: LIST
16430: LIST
16431: LIST
16432: LIST
16433: LIST
16434: LIST
16435: LIST
16436: LIST
16437: LIST
16438: LIST
16439: PUSH
16440: LD_INT 101
16442: PUSH
16443: LD_INT 102
16445: PUSH
16446: LD_INT 103
16448: PUSH
16449: LD_INT 106
16451: PUSH
16452: LD_INT 108
16454: PUSH
16455: LD_INT 112
16457: PUSH
16458: LD_INT 113
16460: PUSH
16461: LD_INT 114
16463: PUSH
16464: LD_INT 116
16466: PUSH
16467: LD_INT 117
16469: PUSH
16470: LD_INT 118
16472: PUSH
16473: EMPTY
16474: LIST
16475: LIST
16476: LIST
16477: LIST
16478: LIST
16479: LIST
16480: LIST
16481: LIST
16482: LIST
16483: LIST
16484: LIST
16485: PUSH
16486: EMPTY
16487: LIST
16488: LIST
16489: ST_TO_ADDR
16490: GO 17121
16492: LD_INT 17
16494: DOUBLE
16495: EQUAL
16496: IFTRUE 16500
16498: GO 16724
16500: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
16501: LD_ADDR_VAR 0 2
16505: PUSH
16506: LD_INT 1
16508: PUSH
16509: LD_INT 2
16511: PUSH
16512: LD_INT 3
16514: PUSH
16515: LD_INT 4
16517: PUSH
16518: LD_INT 5
16520: PUSH
16521: LD_INT 6
16523: PUSH
16524: LD_INT 7
16526: PUSH
16527: LD_INT 8
16529: PUSH
16530: LD_INT 9
16532: PUSH
16533: LD_INT 10
16535: PUSH
16536: LD_INT 11
16538: PUSH
16539: LD_INT 12
16541: PUSH
16542: LD_INT 13
16544: PUSH
16545: LD_INT 14
16547: PUSH
16548: LD_INT 15
16550: PUSH
16551: LD_INT 16
16553: PUSH
16554: LD_INT 17
16556: PUSH
16557: LD_INT 18
16559: PUSH
16560: LD_INT 19
16562: PUSH
16563: LD_INT 20
16565: PUSH
16566: LD_INT 21
16568: PUSH
16569: LD_INT 22
16571: PUSH
16572: LD_INT 23
16574: PUSH
16575: LD_INT 24
16577: PUSH
16578: LD_INT 25
16580: PUSH
16581: LD_INT 26
16583: PUSH
16584: LD_INT 27
16586: PUSH
16587: LD_INT 28
16589: PUSH
16590: LD_INT 29
16592: PUSH
16593: LD_INT 30
16595: PUSH
16596: LD_INT 31
16598: PUSH
16599: LD_INT 32
16601: PUSH
16602: LD_INT 33
16604: PUSH
16605: LD_INT 34
16607: PUSH
16608: LD_INT 36
16610: PUSH
16611: EMPTY
16612: LIST
16613: LIST
16614: LIST
16615: LIST
16616: LIST
16617: LIST
16618: LIST
16619: LIST
16620: LIST
16621: LIST
16622: LIST
16623: LIST
16624: LIST
16625: LIST
16626: LIST
16627: LIST
16628: LIST
16629: LIST
16630: LIST
16631: LIST
16632: LIST
16633: LIST
16634: LIST
16635: LIST
16636: LIST
16637: LIST
16638: LIST
16639: LIST
16640: LIST
16641: LIST
16642: LIST
16643: LIST
16644: LIST
16645: LIST
16646: LIST
16647: PUSH
16648: LD_INT 101
16650: PUSH
16651: LD_INT 102
16653: PUSH
16654: LD_INT 103
16656: PUSH
16657: LD_INT 104
16659: PUSH
16660: LD_INT 105
16662: PUSH
16663: LD_INT 106
16665: PUSH
16666: LD_INT 107
16668: PUSH
16669: LD_INT 108
16671: PUSH
16672: LD_INT 109
16674: PUSH
16675: LD_INT 110
16677: PUSH
16678: LD_INT 111
16680: PUSH
16681: LD_INT 112
16683: PUSH
16684: LD_INT 113
16686: PUSH
16687: LD_INT 114
16689: PUSH
16690: LD_INT 116
16692: PUSH
16693: LD_INT 117
16695: PUSH
16696: LD_INT 118
16698: PUSH
16699: EMPTY
16700: LIST
16701: LIST
16702: LIST
16703: LIST
16704: LIST
16705: LIST
16706: LIST
16707: LIST
16708: LIST
16709: LIST
16710: LIST
16711: LIST
16712: LIST
16713: LIST
16714: LIST
16715: LIST
16716: LIST
16717: PUSH
16718: EMPTY
16719: LIST
16720: LIST
16721: ST_TO_ADDR
16722: GO 17121
16724: LD_INT 18
16726: DOUBLE
16727: EQUAL
16728: IFTRUE 16732
16730: GO 16880
16732: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
16733: LD_ADDR_VAR 0 2
16737: PUSH
16738: LD_INT 2
16740: PUSH
16741: LD_INT 4
16743: PUSH
16744: LD_INT 5
16746: PUSH
16747: LD_INT 7
16749: PUSH
16750: LD_INT 11
16752: PUSH
16753: LD_INT 12
16755: PUSH
16756: LD_INT 15
16758: PUSH
16759: LD_INT 16
16761: PUSH
16762: LD_INT 20
16764: PUSH
16765: LD_INT 21
16767: PUSH
16768: LD_INT 22
16770: PUSH
16771: LD_INT 23
16773: PUSH
16774: LD_INT 25
16776: PUSH
16777: LD_INT 26
16779: PUSH
16780: LD_INT 30
16782: PUSH
16783: LD_INT 31
16785: PUSH
16786: LD_INT 32
16788: PUSH
16789: LD_INT 33
16791: PUSH
16792: LD_INT 34
16794: PUSH
16795: LD_INT 35
16797: PUSH
16798: LD_INT 36
16800: PUSH
16801: EMPTY
16802: LIST
16803: LIST
16804: LIST
16805: LIST
16806: LIST
16807: LIST
16808: LIST
16809: LIST
16810: LIST
16811: LIST
16812: LIST
16813: LIST
16814: LIST
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: PUSH
16824: LD_INT 101
16826: PUSH
16827: LD_INT 102
16829: PUSH
16830: LD_INT 103
16832: PUSH
16833: LD_INT 106
16835: PUSH
16836: LD_INT 108
16838: PUSH
16839: LD_INT 112
16841: PUSH
16842: LD_INT 113
16844: PUSH
16845: LD_INT 114
16847: PUSH
16848: LD_INT 115
16850: PUSH
16851: LD_INT 116
16853: PUSH
16854: LD_INT 117
16856: PUSH
16857: LD_INT 118
16859: PUSH
16860: EMPTY
16861: LIST
16862: LIST
16863: LIST
16864: LIST
16865: LIST
16866: LIST
16867: LIST
16868: LIST
16869: LIST
16870: LIST
16871: LIST
16872: LIST
16873: PUSH
16874: EMPTY
16875: LIST
16876: LIST
16877: ST_TO_ADDR
16878: GO 17121
16880: LD_INT 19
16882: DOUBLE
16883: EQUAL
16884: IFTRUE 16888
16886: GO 17120
16888: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
16889: LD_ADDR_VAR 0 2
16893: PUSH
16894: LD_INT 1
16896: PUSH
16897: LD_INT 2
16899: PUSH
16900: LD_INT 3
16902: PUSH
16903: LD_INT 4
16905: PUSH
16906: LD_INT 5
16908: PUSH
16909: LD_INT 6
16911: PUSH
16912: LD_INT 7
16914: PUSH
16915: LD_INT 8
16917: PUSH
16918: LD_INT 9
16920: PUSH
16921: LD_INT 10
16923: PUSH
16924: LD_INT 11
16926: PUSH
16927: LD_INT 12
16929: PUSH
16930: LD_INT 13
16932: PUSH
16933: LD_INT 14
16935: PUSH
16936: LD_INT 15
16938: PUSH
16939: LD_INT 16
16941: PUSH
16942: LD_INT 17
16944: PUSH
16945: LD_INT 18
16947: PUSH
16948: LD_INT 19
16950: PUSH
16951: LD_INT 20
16953: PUSH
16954: LD_INT 21
16956: PUSH
16957: LD_INT 22
16959: PUSH
16960: LD_INT 23
16962: PUSH
16963: LD_INT 24
16965: PUSH
16966: LD_INT 25
16968: PUSH
16969: LD_INT 26
16971: PUSH
16972: LD_INT 27
16974: PUSH
16975: LD_INT 28
16977: PUSH
16978: LD_INT 29
16980: PUSH
16981: LD_INT 30
16983: PUSH
16984: LD_INT 31
16986: PUSH
16987: LD_INT 32
16989: PUSH
16990: LD_INT 33
16992: PUSH
16993: LD_INT 34
16995: PUSH
16996: LD_INT 35
16998: PUSH
16999: LD_INT 36
17001: PUSH
17002: EMPTY
17003: LIST
17004: LIST
17005: LIST
17006: LIST
17007: LIST
17008: LIST
17009: LIST
17010: LIST
17011: LIST
17012: LIST
17013: LIST
17014: LIST
17015: LIST
17016: LIST
17017: LIST
17018: LIST
17019: LIST
17020: LIST
17021: LIST
17022: LIST
17023: LIST
17024: LIST
17025: LIST
17026: LIST
17027: LIST
17028: LIST
17029: LIST
17030: LIST
17031: LIST
17032: LIST
17033: LIST
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: LIST
17039: PUSH
17040: LD_INT 101
17042: PUSH
17043: LD_INT 102
17045: PUSH
17046: LD_INT 103
17048: PUSH
17049: LD_INT 104
17051: PUSH
17052: LD_INT 105
17054: PUSH
17055: LD_INT 106
17057: PUSH
17058: LD_INT 107
17060: PUSH
17061: LD_INT 108
17063: PUSH
17064: LD_INT 109
17066: PUSH
17067: LD_INT 110
17069: PUSH
17070: LD_INT 111
17072: PUSH
17073: LD_INT 112
17075: PUSH
17076: LD_INT 113
17078: PUSH
17079: LD_INT 114
17081: PUSH
17082: LD_INT 115
17084: PUSH
17085: LD_INT 116
17087: PUSH
17088: LD_INT 117
17090: PUSH
17091: LD_INT 118
17093: PUSH
17094: EMPTY
17095: LIST
17096: LIST
17097: LIST
17098: LIST
17099: LIST
17100: LIST
17101: LIST
17102: LIST
17103: LIST
17104: LIST
17105: LIST
17106: LIST
17107: LIST
17108: LIST
17109: LIST
17110: LIST
17111: LIST
17112: LIST
17113: PUSH
17114: EMPTY
17115: LIST
17116: LIST
17117: ST_TO_ADDR
17118: GO 17121
17120: POP
// end else
17121: GO 17352
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
17123: LD_ADDR_VAR 0 2
17127: PUSH
17128: LD_INT 1
17130: PUSH
17131: LD_INT 2
17133: PUSH
17134: LD_INT 3
17136: PUSH
17137: LD_INT 4
17139: PUSH
17140: LD_INT 5
17142: PUSH
17143: LD_INT 6
17145: PUSH
17146: LD_INT 7
17148: PUSH
17149: LD_INT 8
17151: PUSH
17152: LD_INT 9
17154: PUSH
17155: LD_INT 10
17157: PUSH
17158: LD_INT 11
17160: PUSH
17161: LD_INT 12
17163: PUSH
17164: LD_INT 13
17166: PUSH
17167: LD_INT 14
17169: PUSH
17170: LD_INT 15
17172: PUSH
17173: LD_INT 16
17175: PUSH
17176: LD_INT 17
17178: PUSH
17179: LD_INT 18
17181: PUSH
17182: LD_INT 19
17184: PUSH
17185: LD_INT 20
17187: PUSH
17188: LD_INT 21
17190: PUSH
17191: LD_INT 22
17193: PUSH
17194: LD_INT 23
17196: PUSH
17197: LD_INT 24
17199: PUSH
17200: LD_INT 25
17202: PUSH
17203: LD_INT 26
17205: PUSH
17206: LD_INT 27
17208: PUSH
17209: LD_INT 28
17211: PUSH
17212: LD_INT 29
17214: PUSH
17215: LD_INT 30
17217: PUSH
17218: LD_INT 31
17220: PUSH
17221: LD_INT 32
17223: PUSH
17224: LD_INT 33
17226: PUSH
17227: LD_INT 34
17229: PUSH
17230: LD_INT 35
17232: PUSH
17233: LD_INT 36
17235: PUSH
17236: EMPTY
17237: LIST
17238: LIST
17239: LIST
17240: LIST
17241: LIST
17242: LIST
17243: LIST
17244: LIST
17245: LIST
17246: LIST
17247: LIST
17248: LIST
17249: LIST
17250: LIST
17251: LIST
17252: LIST
17253: LIST
17254: LIST
17255: LIST
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: PUSH
17274: LD_INT 101
17276: PUSH
17277: LD_INT 102
17279: PUSH
17280: LD_INT 103
17282: PUSH
17283: LD_INT 104
17285: PUSH
17286: LD_INT 105
17288: PUSH
17289: LD_INT 106
17291: PUSH
17292: LD_INT 107
17294: PUSH
17295: LD_INT 108
17297: PUSH
17298: LD_INT 109
17300: PUSH
17301: LD_INT 110
17303: PUSH
17304: LD_INT 111
17306: PUSH
17307: LD_INT 112
17309: PUSH
17310: LD_INT 113
17312: PUSH
17313: LD_INT 114
17315: PUSH
17316: LD_INT 115
17318: PUSH
17319: LD_INT 116
17321: PUSH
17322: LD_INT 117
17324: PUSH
17325: LD_INT 118
17327: PUSH
17328: EMPTY
17329: LIST
17330: LIST
17331: LIST
17332: LIST
17333: LIST
17334: LIST
17335: LIST
17336: LIST
17337: LIST
17338: LIST
17339: LIST
17340: LIST
17341: LIST
17342: LIST
17343: LIST
17344: LIST
17345: LIST
17346: LIST
17347: PUSH
17348: EMPTY
17349: LIST
17350: LIST
17351: ST_TO_ADDR
// if result then
17352: LD_VAR 0 2
17356: IFFALSE 18142
// begin normal :=  ;
17358: LD_ADDR_VAR 0 5
17362: PUSH
17363: LD_STRING 
17365: ST_TO_ADDR
// hardcore :=  ;
17366: LD_ADDR_VAR 0 6
17370: PUSH
17371: LD_STRING 
17373: ST_TO_ADDR
// active :=  ;
17374: LD_ADDR_VAR 0 7
17378: PUSH
17379: LD_STRING 
17381: ST_TO_ADDR
// for i = 1 to normalCounter do
17382: LD_ADDR_VAR 0 8
17386: PUSH
17387: DOUBLE
17388: LD_INT 1
17390: DEC
17391: ST_TO_ADDR
17392: LD_EXP 22
17396: PUSH
17397: FOR_TO
17398: IFFALSE 17499
// begin tmp := 0 ;
17400: LD_ADDR_VAR 0 3
17404: PUSH
17405: LD_STRING 0
17407: ST_TO_ADDR
// if result [ 1 ] then
17408: LD_VAR 0 2
17412: PUSH
17413: LD_INT 1
17415: ARRAY
17416: IFFALSE 17481
// if result [ 1 ] [ 1 ] = i then
17418: LD_VAR 0 2
17422: PUSH
17423: LD_INT 1
17425: ARRAY
17426: PUSH
17427: LD_INT 1
17429: ARRAY
17430: PUSH
17431: LD_VAR 0 8
17435: EQUAL
17436: IFFALSE 17481
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
17438: LD_ADDR_VAR 0 2
17442: PUSH
17443: LD_VAR 0 2
17447: PPUSH
17448: LD_INT 1
17450: PPUSH
17451: LD_VAR 0 2
17455: PUSH
17456: LD_INT 1
17458: ARRAY
17459: PPUSH
17460: LD_INT 1
17462: PPUSH
17463: CALL_OW 3
17467: PPUSH
17468: CALL_OW 1
17472: ST_TO_ADDR
// tmp := 1 ;
17473: LD_ADDR_VAR 0 3
17477: PUSH
17478: LD_STRING 1
17480: ST_TO_ADDR
// end ; normal := normal & tmp ;
17481: LD_ADDR_VAR 0 5
17485: PUSH
17486: LD_VAR 0 5
17490: PUSH
17491: LD_VAR 0 3
17495: STR
17496: ST_TO_ADDR
// end ;
17497: GO 17397
17499: POP
17500: POP
// for i = 1 to hardcoreCounter do
17501: LD_ADDR_VAR 0 8
17505: PUSH
17506: DOUBLE
17507: LD_INT 1
17509: DEC
17510: ST_TO_ADDR
17511: LD_EXP 23
17515: PUSH
17516: FOR_TO
17517: IFFALSE 17622
// begin tmp := 0 ;
17519: LD_ADDR_VAR 0 3
17523: PUSH
17524: LD_STRING 0
17526: ST_TO_ADDR
// if result [ 2 ] then
17527: LD_VAR 0 2
17531: PUSH
17532: LD_INT 2
17534: ARRAY
17535: IFFALSE 17604
// if result [ 2 ] [ 1 ] = 100 + i then
17537: LD_VAR 0 2
17541: PUSH
17542: LD_INT 2
17544: ARRAY
17545: PUSH
17546: LD_INT 1
17548: ARRAY
17549: PUSH
17550: LD_INT 100
17552: PUSH
17553: LD_VAR 0 8
17557: PLUS
17558: EQUAL
17559: IFFALSE 17604
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
17561: LD_ADDR_VAR 0 2
17565: PUSH
17566: LD_VAR 0 2
17570: PPUSH
17571: LD_INT 2
17573: PPUSH
17574: LD_VAR 0 2
17578: PUSH
17579: LD_INT 2
17581: ARRAY
17582: PPUSH
17583: LD_INT 1
17585: PPUSH
17586: CALL_OW 3
17590: PPUSH
17591: CALL_OW 1
17595: ST_TO_ADDR
// tmp := 1 ;
17596: LD_ADDR_VAR 0 3
17600: PUSH
17601: LD_STRING 1
17603: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
17604: LD_ADDR_VAR 0 6
17608: PUSH
17609: LD_VAR 0 6
17613: PUSH
17614: LD_VAR 0 3
17618: STR
17619: ST_TO_ADDR
// end ;
17620: GO 17516
17622: POP
17623: POP
// if isGameLoad then
17624: LD_VAR 0 1
17628: IFFALSE 18103
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
17630: LD_ADDR_VAR 0 4
17634: PUSH
17635: LD_EXP 26
17639: PUSH
17640: LD_EXP 25
17644: PUSH
17645: LD_EXP 27
17649: PUSH
17650: LD_EXP 24
17654: PUSH
17655: LD_EXP 28
17659: PUSH
17660: LD_EXP 29
17664: PUSH
17665: LD_EXP 30
17669: PUSH
17670: LD_EXP 31
17674: PUSH
17675: LD_EXP 32
17679: PUSH
17680: LD_EXP 33
17684: PUSH
17685: LD_EXP 34
17689: PUSH
17690: LD_EXP 35
17694: PUSH
17695: LD_EXP 36
17699: PUSH
17700: LD_EXP 37
17704: PUSH
17705: LD_EXP 45
17709: PUSH
17710: LD_EXP 46
17714: PUSH
17715: LD_EXP 47
17719: PUSH
17720: LD_EXP 48
17724: PUSH
17725: LD_EXP 50
17729: PUSH
17730: LD_EXP 51
17734: PUSH
17735: LD_EXP 52
17739: PUSH
17740: LD_EXP 55
17744: PUSH
17745: LD_EXP 57
17749: PUSH
17750: LD_EXP 58
17754: PUSH
17755: LD_EXP 59
17759: PUSH
17760: LD_EXP 61
17764: PUSH
17765: LD_EXP 62
17769: PUSH
17770: LD_EXP 65
17774: PUSH
17775: LD_EXP 66
17779: PUSH
17780: LD_EXP 67
17784: PUSH
17785: LD_EXP 68
17789: PUSH
17790: LD_EXP 69
17794: PUSH
17795: LD_EXP 70
17799: PUSH
17800: LD_EXP 71
17804: PUSH
17805: LD_EXP 72
17809: PUSH
17810: LD_EXP 73
17814: PUSH
17815: LD_EXP 38
17819: PUSH
17820: LD_EXP 39
17824: PUSH
17825: LD_EXP 42
17829: PUSH
17830: LD_EXP 43
17834: PUSH
17835: LD_EXP 44
17839: PUSH
17840: LD_EXP 40
17844: PUSH
17845: LD_EXP 41
17849: PUSH
17850: LD_EXP 49
17854: PUSH
17855: LD_EXP 53
17859: PUSH
17860: LD_EXP 54
17864: PUSH
17865: LD_EXP 56
17869: PUSH
17870: LD_EXP 60
17874: PUSH
17875: LD_EXP 63
17879: PUSH
17880: LD_EXP 64
17884: PUSH
17885: LD_EXP 74
17889: PUSH
17890: LD_EXP 75
17894: PUSH
17895: LD_EXP 76
17899: PUSH
17900: LD_EXP 77
17904: PUSH
17905: EMPTY
17906: LIST
17907: LIST
17908: LIST
17909: LIST
17910: LIST
17911: LIST
17912: LIST
17913: LIST
17914: LIST
17915: LIST
17916: LIST
17917: LIST
17918: LIST
17919: LIST
17920: LIST
17921: LIST
17922: LIST
17923: LIST
17924: LIST
17925: LIST
17926: LIST
17927: LIST
17928: LIST
17929: LIST
17930: LIST
17931: LIST
17932: LIST
17933: LIST
17934: LIST
17935: LIST
17936: LIST
17937: LIST
17938: LIST
17939: LIST
17940: LIST
17941: LIST
17942: LIST
17943: LIST
17944: LIST
17945: LIST
17946: LIST
17947: LIST
17948: LIST
17949: LIST
17950: LIST
17951: LIST
17952: LIST
17953: LIST
17954: LIST
17955: LIST
17956: LIST
17957: LIST
17958: LIST
17959: LIST
17960: ST_TO_ADDR
// tmp :=  ;
17961: LD_ADDR_VAR 0 3
17965: PUSH
17966: LD_STRING 
17968: ST_TO_ADDR
// for i = 1 to normalCounter do
17969: LD_ADDR_VAR 0 8
17973: PUSH
17974: DOUBLE
17975: LD_INT 1
17977: DEC
17978: ST_TO_ADDR
17979: LD_EXP 22
17983: PUSH
17984: FOR_TO
17985: IFFALSE 18021
// begin if flags [ i ] then
17987: LD_VAR 0 4
17991: PUSH
17992: LD_VAR 0 8
17996: ARRAY
17997: IFFALSE 18019
// tmp := tmp & i & ; ;
17999: LD_ADDR_VAR 0 3
18003: PUSH
18004: LD_VAR 0 3
18008: PUSH
18009: LD_VAR 0 8
18013: STR
18014: PUSH
18015: LD_STRING ;
18017: STR
18018: ST_TO_ADDR
// end ;
18019: GO 17984
18021: POP
18022: POP
// for i = 1 to hardcoreCounter do
18023: LD_ADDR_VAR 0 8
18027: PUSH
18028: DOUBLE
18029: LD_INT 1
18031: DEC
18032: ST_TO_ADDR
18033: LD_EXP 23
18037: PUSH
18038: FOR_TO
18039: IFFALSE 18085
// begin if flags [ normalCounter + i ] then
18041: LD_VAR 0 4
18045: PUSH
18046: LD_EXP 22
18050: PUSH
18051: LD_VAR 0 8
18055: PLUS
18056: ARRAY
18057: IFFALSE 18083
// tmp := tmp & ( 100 + i ) & ; ;
18059: LD_ADDR_VAR 0 3
18063: PUSH
18064: LD_VAR 0 3
18068: PUSH
18069: LD_INT 100
18071: PUSH
18072: LD_VAR 0 8
18076: PLUS
18077: STR
18078: PUSH
18079: LD_STRING ;
18081: STR
18082: ST_TO_ADDR
// end ;
18083: GO 18038
18085: POP
18086: POP
// if tmp then
18087: LD_VAR 0 3
18091: IFFALSE 18103
// active := tmp ;
18093: LD_ADDR_VAR 0 7
18097: PUSH
18098: LD_VAR 0 3
18102: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
18103: LD_STRING getStreamItemsFromMission("
18105: PUSH
18106: LD_VAR 0 5
18110: STR
18111: PUSH
18112: LD_STRING ","
18114: STR
18115: PUSH
18116: LD_VAR 0 6
18120: STR
18121: PUSH
18122: LD_STRING ","
18124: STR
18125: PUSH
18126: LD_VAR 0 7
18130: STR
18131: PUSH
18132: LD_STRING ")
18134: STR
18135: PPUSH
18136: CALL_OW 559
// end else
18140: GO 18149
// ToLua ( getStreamItemsFromMission("","","") ) ;
18142: LD_STRING getStreamItemsFromMission("","","")
18144: PPUSH
18145: CALL_OW 559
// end ;
18149: LD_VAR 0 2
18153: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
18154: LD_EXP 21
18158: PUSH
18159: LD_EXP 26
18163: AND
18164: IFFALSE 18288
18166: GO 18168
18168: DISABLE
18169: LD_INT 0
18171: PPUSH
18172: PPUSH
// begin enable ;
18173: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
18174: LD_ADDR_VAR 0 2
18178: PUSH
18179: LD_INT 22
18181: PUSH
18182: LD_OWVAR 2
18186: PUSH
18187: EMPTY
18188: LIST
18189: LIST
18190: PUSH
18191: LD_INT 2
18193: PUSH
18194: LD_INT 34
18196: PUSH
18197: LD_INT 7
18199: PUSH
18200: EMPTY
18201: LIST
18202: LIST
18203: PUSH
18204: LD_INT 34
18206: PUSH
18207: LD_INT 45
18209: PUSH
18210: EMPTY
18211: LIST
18212: LIST
18213: PUSH
18214: LD_INT 34
18216: PUSH
18217: LD_INT 28
18219: PUSH
18220: EMPTY
18221: LIST
18222: LIST
18223: PUSH
18224: LD_INT 34
18226: PUSH
18227: LD_INT 47
18229: PUSH
18230: EMPTY
18231: LIST
18232: LIST
18233: PUSH
18234: EMPTY
18235: LIST
18236: LIST
18237: LIST
18238: LIST
18239: LIST
18240: PUSH
18241: EMPTY
18242: LIST
18243: LIST
18244: PPUSH
18245: CALL_OW 69
18249: ST_TO_ADDR
// if not tmp then
18250: LD_VAR 0 2
18254: NOT
18255: IFFALSE 18259
// exit ;
18257: GO 18288
// for i in tmp do
18259: LD_ADDR_VAR 0 1
18263: PUSH
18264: LD_VAR 0 2
18268: PUSH
18269: FOR_IN
18270: IFFALSE 18286
// begin SetLives ( i , 0 ) ;
18272: LD_VAR 0 1
18276: PPUSH
18277: LD_INT 0
18279: PPUSH
18280: CALL_OW 234
// end ;
18284: GO 18269
18286: POP
18287: POP
// end ;
18288: PPOPN 2
18290: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
18291: LD_EXP 21
18295: PUSH
18296: LD_EXP 27
18300: AND
18301: IFFALSE 18385
18303: GO 18305
18305: DISABLE
18306: LD_INT 0
18308: PPUSH
18309: PPUSH
// begin enable ;
18310: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
18311: LD_ADDR_VAR 0 2
18315: PUSH
18316: LD_INT 22
18318: PUSH
18319: LD_OWVAR 2
18323: PUSH
18324: EMPTY
18325: LIST
18326: LIST
18327: PUSH
18328: LD_INT 32
18330: PUSH
18331: LD_INT 3
18333: PUSH
18334: EMPTY
18335: LIST
18336: LIST
18337: PUSH
18338: EMPTY
18339: LIST
18340: LIST
18341: PPUSH
18342: CALL_OW 69
18346: ST_TO_ADDR
// if not tmp then
18347: LD_VAR 0 2
18351: NOT
18352: IFFALSE 18356
// exit ;
18354: GO 18385
// for i in tmp do
18356: LD_ADDR_VAR 0 1
18360: PUSH
18361: LD_VAR 0 2
18365: PUSH
18366: FOR_IN
18367: IFFALSE 18383
// begin SetLives ( i , 0 ) ;
18369: LD_VAR 0 1
18373: PPUSH
18374: LD_INT 0
18376: PPUSH
18377: CALL_OW 234
// end ;
18381: GO 18366
18383: POP
18384: POP
// end ;
18385: PPOPN 2
18387: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
18388: LD_EXP 21
18392: PUSH
18393: LD_EXP 24
18397: AND
18398: IFFALSE 18491
18400: GO 18402
18402: DISABLE
18403: LD_INT 0
18405: PPUSH
// begin enable ;
18406: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
18407: LD_ADDR_VAR 0 1
18411: PUSH
18412: LD_INT 22
18414: PUSH
18415: LD_OWVAR 2
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: PUSH
18424: LD_INT 2
18426: PUSH
18427: LD_INT 25
18429: PUSH
18430: LD_INT 5
18432: PUSH
18433: EMPTY
18434: LIST
18435: LIST
18436: PUSH
18437: LD_INT 25
18439: PUSH
18440: LD_INT 9
18442: PUSH
18443: EMPTY
18444: LIST
18445: LIST
18446: PUSH
18447: LD_INT 25
18449: PUSH
18450: LD_INT 8
18452: PUSH
18453: EMPTY
18454: LIST
18455: LIST
18456: PUSH
18457: EMPTY
18458: LIST
18459: LIST
18460: LIST
18461: LIST
18462: PUSH
18463: EMPTY
18464: LIST
18465: LIST
18466: PPUSH
18467: CALL_OW 69
18471: PUSH
18472: FOR_IN
18473: IFFALSE 18489
// begin SetClass ( i , 1 ) ;
18475: LD_VAR 0 1
18479: PPUSH
18480: LD_INT 1
18482: PPUSH
18483: CALL_OW 336
// end ;
18487: GO 18472
18489: POP
18490: POP
// end ;
18491: PPOPN 1
18493: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
18494: LD_EXP 21
18498: PUSH
18499: LD_EXP 25
18503: AND
18504: PUSH
18505: LD_OWVAR 65
18509: PUSH
18510: LD_INT 7
18512: LESS
18513: AND
18514: IFFALSE 18528
18516: GO 18518
18518: DISABLE
// begin enable ;
18519: ENABLE
// game_speed := 7 ;
18520: LD_ADDR_OWVAR 65
18524: PUSH
18525: LD_INT 7
18527: ST_TO_ADDR
// end ;
18528: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
18529: LD_EXP 21
18533: PUSH
18534: LD_EXP 28
18538: AND
18539: IFFALSE 18741
18541: GO 18543
18543: DISABLE
18544: LD_INT 0
18546: PPUSH
18547: PPUSH
18548: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18549: LD_ADDR_VAR 0 3
18553: PUSH
18554: LD_INT 81
18556: PUSH
18557: LD_OWVAR 2
18561: PUSH
18562: EMPTY
18563: LIST
18564: LIST
18565: PUSH
18566: LD_INT 21
18568: PUSH
18569: LD_INT 1
18571: PUSH
18572: EMPTY
18573: LIST
18574: LIST
18575: PUSH
18576: EMPTY
18577: LIST
18578: LIST
18579: PPUSH
18580: CALL_OW 69
18584: ST_TO_ADDR
// if not tmp then
18585: LD_VAR 0 3
18589: NOT
18590: IFFALSE 18594
// exit ;
18592: GO 18741
// if tmp > 5 then
18594: LD_VAR 0 3
18598: PUSH
18599: LD_INT 5
18601: GREATER
18602: IFFALSE 18614
// k := 5 else
18604: LD_ADDR_VAR 0 2
18608: PUSH
18609: LD_INT 5
18611: ST_TO_ADDR
18612: GO 18624
// k := tmp ;
18614: LD_ADDR_VAR 0 2
18618: PUSH
18619: LD_VAR 0 3
18623: ST_TO_ADDR
// for i := 1 to k do
18624: LD_ADDR_VAR 0 1
18628: PUSH
18629: DOUBLE
18630: LD_INT 1
18632: DEC
18633: ST_TO_ADDR
18634: LD_VAR 0 2
18638: PUSH
18639: FOR_TO
18640: IFFALSE 18739
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
18642: LD_VAR 0 3
18646: PUSH
18647: LD_VAR 0 1
18651: ARRAY
18652: PPUSH
18653: LD_VAR 0 1
18657: PUSH
18658: LD_INT 4
18660: MOD
18661: PUSH
18662: LD_INT 1
18664: PLUS
18665: PPUSH
18666: CALL_OW 259
18670: PUSH
18671: LD_INT 10
18673: LESS
18674: IFFALSE 18737
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
18676: LD_VAR 0 3
18680: PUSH
18681: LD_VAR 0 1
18685: ARRAY
18686: PPUSH
18687: LD_VAR 0 1
18691: PUSH
18692: LD_INT 4
18694: MOD
18695: PUSH
18696: LD_INT 1
18698: PLUS
18699: PPUSH
18700: LD_VAR 0 3
18704: PUSH
18705: LD_VAR 0 1
18709: ARRAY
18710: PPUSH
18711: LD_VAR 0 1
18715: PUSH
18716: LD_INT 4
18718: MOD
18719: PUSH
18720: LD_INT 1
18722: PLUS
18723: PPUSH
18724: CALL_OW 259
18728: PUSH
18729: LD_INT 1
18731: PLUS
18732: PPUSH
18733: CALL_OW 237
18737: GO 18639
18739: POP
18740: POP
// end ;
18741: PPOPN 3
18743: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
18744: LD_EXP 21
18748: PUSH
18749: LD_EXP 29
18753: AND
18754: IFFALSE 18774
18756: GO 18758
18758: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
18759: LD_INT 4
18761: PPUSH
18762: LD_OWVAR 2
18766: PPUSH
18767: LD_INT 0
18769: PPUSH
18770: CALL_OW 324
18774: END
// every 0 0$1 trigger StreamModeActive and sShovel do
18775: LD_EXP 21
18779: PUSH
18780: LD_EXP 58
18784: AND
18785: IFFALSE 18805
18787: GO 18789
18789: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
18790: LD_INT 19
18792: PPUSH
18793: LD_OWVAR 2
18797: PPUSH
18798: LD_INT 0
18800: PPUSH
18801: CALL_OW 324
18805: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
18806: LD_EXP 21
18810: PUSH
18811: LD_EXP 30
18815: AND
18816: IFFALSE 18918
18818: GO 18820
18820: DISABLE
18821: LD_INT 0
18823: PPUSH
18824: PPUSH
// begin enable ;
18825: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
18826: LD_ADDR_VAR 0 2
18830: PUSH
18831: LD_INT 22
18833: PUSH
18834: LD_OWVAR 2
18838: PUSH
18839: EMPTY
18840: LIST
18841: LIST
18842: PUSH
18843: LD_INT 2
18845: PUSH
18846: LD_INT 34
18848: PUSH
18849: LD_INT 11
18851: PUSH
18852: EMPTY
18853: LIST
18854: LIST
18855: PUSH
18856: LD_INT 34
18858: PUSH
18859: LD_INT 30
18861: PUSH
18862: EMPTY
18863: LIST
18864: LIST
18865: PUSH
18866: EMPTY
18867: LIST
18868: LIST
18869: LIST
18870: PUSH
18871: EMPTY
18872: LIST
18873: LIST
18874: PPUSH
18875: CALL_OW 69
18879: ST_TO_ADDR
// if not tmp then
18880: LD_VAR 0 2
18884: NOT
18885: IFFALSE 18889
// exit ;
18887: GO 18918
// for i in tmp do
18889: LD_ADDR_VAR 0 1
18893: PUSH
18894: LD_VAR 0 2
18898: PUSH
18899: FOR_IN
18900: IFFALSE 18916
// begin SetLives ( i , 0 ) ;
18902: LD_VAR 0 1
18906: PPUSH
18907: LD_INT 0
18909: PPUSH
18910: CALL_OW 234
// end ;
18914: GO 18899
18916: POP
18917: POP
// end ;
18918: PPOPN 2
18920: END
// every 0 0$1 trigger StreamModeActive and sBunker do
18921: LD_EXP 21
18925: PUSH
18926: LD_EXP 31
18930: AND
18931: IFFALSE 18951
18933: GO 18935
18935: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
18936: LD_INT 32
18938: PPUSH
18939: LD_OWVAR 2
18943: PPUSH
18944: LD_INT 0
18946: PPUSH
18947: CALL_OW 324
18951: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
18952: LD_EXP 21
18956: PUSH
18957: LD_EXP 32
18961: AND
18962: IFFALSE 19143
18964: GO 18966
18966: DISABLE
18967: LD_INT 0
18969: PPUSH
18970: PPUSH
18971: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18972: LD_ADDR_VAR 0 2
18976: PUSH
18977: LD_INT 22
18979: PUSH
18980: LD_OWVAR 2
18984: PUSH
18985: EMPTY
18986: LIST
18987: LIST
18988: PUSH
18989: LD_INT 33
18991: PUSH
18992: LD_INT 3
18994: PUSH
18995: EMPTY
18996: LIST
18997: LIST
18998: PUSH
18999: EMPTY
19000: LIST
19001: LIST
19002: PPUSH
19003: CALL_OW 69
19007: ST_TO_ADDR
// if not tmp then
19008: LD_VAR 0 2
19012: NOT
19013: IFFALSE 19017
// exit ;
19015: GO 19143
// side := 0 ;
19017: LD_ADDR_VAR 0 3
19021: PUSH
19022: LD_INT 0
19024: ST_TO_ADDR
// for i := 1 to 8 do
19025: LD_ADDR_VAR 0 1
19029: PUSH
19030: DOUBLE
19031: LD_INT 1
19033: DEC
19034: ST_TO_ADDR
19035: LD_INT 8
19037: PUSH
19038: FOR_TO
19039: IFFALSE 19087
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
19041: LD_OWVAR 2
19045: PUSH
19046: LD_VAR 0 1
19050: NONEQUAL
19051: PUSH
19052: LD_OWVAR 2
19056: PPUSH
19057: LD_VAR 0 1
19061: PPUSH
19062: CALL_OW 81
19066: PUSH
19067: LD_INT 2
19069: EQUAL
19070: AND
19071: IFFALSE 19085
// begin side := i ;
19073: LD_ADDR_VAR 0 3
19077: PUSH
19078: LD_VAR 0 1
19082: ST_TO_ADDR
// break ;
19083: GO 19087
// end ;
19085: GO 19038
19087: POP
19088: POP
// if not side then
19089: LD_VAR 0 3
19093: NOT
19094: IFFALSE 19098
// exit ;
19096: GO 19143
// for i := 1 to tmp do
19098: LD_ADDR_VAR 0 1
19102: PUSH
19103: DOUBLE
19104: LD_INT 1
19106: DEC
19107: ST_TO_ADDR
19108: LD_VAR 0 2
19112: PUSH
19113: FOR_TO
19114: IFFALSE 19141
// if Prob ( 60 ) then
19116: LD_INT 60
19118: PPUSH
19119: CALL_OW 13
19123: IFFALSE 19139
// SetSide ( i , side ) ;
19125: LD_VAR 0 1
19129: PPUSH
19130: LD_VAR 0 3
19134: PPUSH
19135: CALL_OW 235
19139: GO 19113
19141: POP
19142: POP
// end ;
19143: PPOPN 3
19145: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
19146: LD_EXP 21
19150: PUSH
19151: LD_EXP 34
19155: AND
19156: IFFALSE 19275
19158: GO 19160
19160: DISABLE
19161: LD_INT 0
19163: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
19164: LD_ADDR_VAR 0 1
19168: PUSH
19169: LD_INT 22
19171: PUSH
19172: LD_OWVAR 2
19176: PUSH
19177: EMPTY
19178: LIST
19179: LIST
19180: PUSH
19181: LD_INT 21
19183: PUSH
19184: LD_INT 1
19186: PUSH
19187: EMPTY
19188: LIST
19189: LIST
19190: PUSH
19191: LD_INT 3
19193: PUSH
19194: LD_INT 23
19196: PUSH
19197: LD_INT 0
19199: PUSH
19200: EMPTY
19201: LIST
19202: LIST
19203: PUSH
19204: EMPTY
19205: LIST
19206: LIST
19207: PUSH
19208: EMPTY
19209: LIST
19210: LIST
19211: LIST
19212: PPUSH
19213: CALL_OW 69
19217: PUSH
19218: FOR_IN
19219: IFFALSE 19273
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
19221: LD_VAR 0 1
19225: PPUSH
19226: CALL_OW 257
19230: PUSH
19231: LD_INT 1
19233: PUSH
19234: LD_INT 2
19236: PUSH
19237: LD_INT 3
19239: PUSH
19240: LD_INT 4
19242: PUSH
19243: EMPTY
19244: LIST
19245: LIST
19246: LIST
19247: LIST
19248: IN
19249: IFFALSE 19271
// SetClass ( un , rand ( 1 , 4 ) ) ;
19251: LD_VAR 0 1
19255: PPUSH
19256: LD_INT 1
19258: PPUSH
19259: LD_INT 4
19261: PPUSH
19262: CALL_OW 12
19266: PPUSH
19267: CALL_OW 336
19271: GO 19218
19273: POP
19274: POP
// end ;
19275: PPOPN 1
19277: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
19278: LD_EXP 21
19282: PUSH
19283: LD_EXP 33
19287: AND
19288: IFFALSE 19367
19290: GO 19292
19292: DISABLE
19293: LD_INT 0
19295: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19296: LD_ADDR_VAR 0 1
19300: PUSH
19301: LD_INT 22
19303: PUSH
19304: LD_OWVAR 2
19308: PUSH
19309: EMPTY
19310: LIST
19311: LIST
19312: PUSH
19313: LD_INT 21
19315: PUSH
19316: LD_INT 3
19318: PUSH
19319: EMPTY
19320: LIST
19321: LIST
19322: PUSH
19323: EMPTY
19324: LIST
19325: LIST
19326: PPUSH
19327: CALL_OW 69
19331: ST_TO_ADDR
// if not tmp then
19332: LD_VAR 0 1
19336: NOT
19337: IFFALSE 19341
// exit ;
19339: GO 19367
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
19341: LD_VAR 0 1
19345: PUSH
19346: LD_INT 1
19348: PPUSH
19349: LD_VAR 0 1
19353: PPUSH
19354: CALL_OW 12
19358: ARRAY
19359: PPUSH
19360: LD_INT 100
19362: PPUSH
19363: CALL_OW 234
// end ;
19367: PPOPN 1
19369: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
19370: LD_EXP 21
19374: PUSH
19375: LD_EXP 35
19379: AND
19380: IFFALSE 19478
19382: GO 19384
19384: DISABLE
19385: LD_INT 0
19387: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19388: LD_ADDR_VAR 0 1
19392: PUSH
19393: LD_INT 22
19395: PUSH
19396: LD_OWVAR 2
19400: PUSH
19401: EMPTY
19402: LIST
19403: LIST
19404: PUSH
19405: LD_INT 21
19407: PUSH
19408: LD_INT 1
19410: PUSH
19411: EMPTY
19412: LIST
19413: LIST
19414: PUSH
19415: EMPTY
19416: LIST
19417: LIST
19418: PPUSH
19419: CALL_OW 69
19423: ST_TO_ADDR
// if not tmp then
19424: LD_VAR 0 1
19428: NOT
19429: IFFALSE 19433
// exit ;
19431: GO 19478
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
19433: LD_VAR 0 1
19437: PUSH
19438: LD_INT 1
19440: PPUSH
19441: LD_VAR 0 1
19445: PPUSH
19446: CALL_OW 12
19450: ARRAY
19451: PPUSH
19452: LD_INT 1
19454: PPUSH
19455: LD_INT 4
19457: PPUSH
19458: CALL_OW 12
19462: PPUSH
19463: LD_INT 3000
19465: PPUSH
19466: LD_INT 9000
19468: PPUSH
19469: CALL_OW 12
19473: PPUSH
19474: CALL_OW 492
// end ;
19478: PPOPN 1
19480: END
// every 0 0$1 trigger StreamModeActive and sDepot do
19481: LD_EXP 21
19485: PUSH
19486: LD_EXP 36
19490: AND
19491: IFFALSE 19511
19493: GO 19495
19495: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
19496: LD_INT 1
19498: PPUSH
19499: LD_OWVAR 2
19503: PPUSH
19504: LD_INT 0
19506: PPUSH
19507: CALL_OW 324
19511: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
19512: LD_EXP 21
19516: PUSH
19517: LD_EXP 37
19521: AND
19522: IFFALSE 19605
19524: GO 19526
19526: DISABLE
19527: LD_INT 0
19529: PPUSH
19530: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19531: LD_ADDR_VAR 0 2
19535: PUSH
19536: LD_INT 22
19538: PUSH
19539: LD_OWVAR 2
19543: PUSH
19544: EMPTY
19545: LIST
19546: LIST
19547: PUSH
19548: LD_INT 21
19550: PUSH
19551: LD_INT 3
19553: PUSH
19554: EMPTY
19555: LIST
19556: LIST
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: PPUSH
19562: CALL_OW 69
19566: ST_TO_ADDR
// if not tmp then
19567: LD_VAR 0 2
19571: NOT
19572: IFFALSE 19576
// exit ;
19574: GO 19605
// for i in tmp do
19576: LD_ADDR_VAR 0 1
19580: PUSH
19581: LD_VAR 0 2
19585: PUSH
19586: FOR_IN
19587: IFFALSE 19603
// SetBLevel ( i , 10 ) ;
19589: LD_VAR 0 1
19593: PPUSH
19594: LD_INT 10
19596: PPUSH
19597: CALL_OW 241
19601: GO 19586
19603: POP
19604: POP
// end ;
19605: PPOPN 2
19607: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
19608: LD_EXP 21
19612: PUSH
19613: LD_EXP 38
19617: AND
19618: IFFALSE 19729
19620: GO 19622
19622: DISABLE
19623: LD_INT 0
19625: PPUSH
19626: PPUSH
19627: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19628: LD_ADDR_VAR 0 3
19632: PUSH
19633: LD_INT 22
19635: PUSH
19636: LD_OWVAR 2
19640: PUSH
19641: EMPTY
19642: LIST
19643: LIST
19644: PUSH
19645: LD_INT 25
19647: PUSH
19648: LD_INT 1
19650: PUSH
19651: EMPTY
19652: LIST
19653: LIST
19654: PUSH
19655: EMPTY
19656: LIST
19657: LIST
19658: PPUSH
19659: CALL_OW 69
19663: ST_TO_ADDR
// if not tmp then
19664: LD_VAR 0 3
19668: NOT
19669: IFFALSE 19673
// exit ;
19671: GO 19729
// un := tmp [ rand ( 1 , tmp ) ] ;
19673: LD_ADDR_VAR 0 2
19677: PUSH
19678: LD_VAR 0 3
19682: PUSH
19683: LD_INT 1
19685: PPUSH
19686: LD_VAR 0 3
19690: PPUSH
19691: CALL_OW 12
19695: ARRAY
19696: ST_TO_ADDR
// if Crawls ( un ) then
19697: LD_VAR 0 2
19701: PPUSH
19702: CALL_OW 318
19706: IFFALSE 19717
// ComWalk ( un ) ;
19708: LD_VAR 0 2
19712: PPUSH
19713: CALL_OW 138
// SetClass ( un , class_sniper ) ;
19717: LD_VAR 0 2
19721: PPUSH
19722: LD_INT 5
19724: PPUSH
19725: CALL_OW 336
// end ;
19729: PPOPN 3
19731: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
19732: LD_EXP 21
19736: PUSH
19737: LD_EXP 39
19741: AND
19742: PUSH
19743: LD_OWVAR 67
19747: PUSH
19748: LD_INT 4
19750: LESS
19751: AND
19752: IFFALSE 19771
19754: GO 19756
19756: DISABLE
// begin Difficulty := Difficulty + 1 ;
19757: LD_ADDR_OWVAR 67
19761: PUSH
19762: LD_OWVAR 67
19766: PUSH
19767: LD_INT 1
19769: PLUS
19770: ST_TO_ADDR
// end ;
19771: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
19772: LD_EXP 21
19776: PUSH
19777: LD_EXP 40
19781: AND
19782: IFFALSE 19885
19784: GO 19786
19786: DISABLE
19787: LD_INT 0
19789: PPUSH
// begin for i := 1 to 5 do
19790: LD_ADDR_VAR 0 1
19794: PUSH
19795: DOUBLE
19796: LD_INT 1
19798: DEC
19799: ST_TO_ADDR
19800: LD_INT 5
19802: PUSH
19803: FOR_TO
19804: IFFALSE 19883
// begin uc_nation := nation_nature ;
19806: LD_ADDR_OWVAR 21
19810: PUSH
19811: LD_INT 0
19813: ST_TO_ADDR
// uc_side := 0 ;
19814: LD_ADDR_OWVAR 20
19818: PUSH
19819: LD_INT 0
19821: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19822: LD_ADDR_OWVAR 29
19826: PUSH
19827: LD_INT 12
19829: PUSH
19830: LD_INT 12
19832: PUSH
19833: EMPTY
19834: LIST
19835: LIST
19836: ST_TO_ADDR
// hc_agressivity := 20 ;
19837: LD_ADDR_OWVAR 35
19841: PUSH
19842: LD_INT 20
19844: ST_TO_ADDR
// hc_class := class_tiger ;
19845: LD_ADDR_OWVAR 28
19849: PUSH
19850: LD_INT 14
19852: ST_TO_ADDR
// hc_gallery :=  ;
19853: LD_ADDR_OWVAR 33
19857: PUSH
19858: LD_STRING 
19860: ST_TO_ADDR
// hc_name :=  ;
19861: LD_ADDR_OWVAR 26
19865: PUSH
19866: LD_STRING 
19868: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
19869: CALL_OW 44
19873: PPUSH
19874: LD_INT 0
19876: PPUSH
19877: CALL_OW 51
// end ;
19881: GO 19803
19883: POP
19884: POP
// end ;
19885: PPOPN 1
19887: END
// every 0 0$1 trigger StreamModeActive and sBomb do
19888: LD_EXP 21
19892: PUSH
19893: LD_EXP 41
19897: AND
19898: IFFALSE 19907
19900: GO 19902
19902: DISABLE
// StreamSibBomb ;
19903: CALL 19908 0 0
19907: END
// export function StreamSibBomb ; var i , x , y ; begin
19908: LD_INT 0
19910: PPUSH
19911: PPUSH
19912: PPUSH
19913: PPUSH
// result := false ;
19914: LD_ADDR_VAR 0 1
19918: PUSH
19919: LD_INT 0
19921: ST_TO_ADDR
// for i := 1 to 16 do
19922: LD_ADDR_VAR 0 2
19926: PUSH
19927: DOUBLE
19928: LD_INT 1
19930: DEC
19931: ST_TO_ADDR
19932: LD_INT 16
19934: PUSH
19935: FOR_TO
19936: IFFALSE 20135
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19938: LD_ADDR_VAR 0 3
19942: PUSH
19943: LD_INT 10
19945: PUSH
19946: LD_INT 20
19948: PUSH
19949: LD_INT 30
19951: PUSH
19952: LD_INT 40
19954: PUSH
19955: LD_INT 50
19957: PUSH
19958: LD_INT 60
19960: PUSH
19961: LD_INT 70
19963: PUSH
19964: LD_INT 80
19966: PUSH
19967: LD_INT 90
19969: PUSH
19970: LD_INT 100
19972: PUSH
19973: LD_INT 110
19975: PUSH
19976: LD_INT 120
19978: PUSH
19979: LD_INT 130
19981: PUSH
19982: LD_INT 140
19984: PUSH
19985: LD_INT 150
19987: PUSH
19988: EMPTY
19989: LIST
19990: LIST
19991: LIST
19992: LIST
19993: LIST
19994: LIST
19995: LIST
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: LIST
20001: LIST
20002: LIST
20003: LIST
20004: PUSH
20005: LD_INT 1
20007: PPUSH
20008: LD_INT 15
20010: PPUSH
20011: CALL_OW 12
20015: ARRAY
20016: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
20017: LD_ADDR_VAR 0 4
20021: PUSH
20022: LD_INT 10
20024: PUSH
20025: LD_INT 20
20027: PUSH
20028: LD_INT 30
20030: PUSH
20031: LD_INT 40
20033: PUSH
20034: LD_INT 50
20036: PUSH
20037: LD_INT 60
20039: PUSH
20040: LD_INT 70
20042: PUSH
20043: LD_INT 80
20045: PUSH
20046: LD_INT 90
20048: PUSH
20049: LD_INT 100
20051: PUSH
20052: LD_INT 110
20054: PUSH
20055: LD_INT 120
20057: PUSH
20058: LD_INT 130
20060: PUSH
20061: LD_INT 140
20063: PUSH
20064: LD_INT 150
20066: PUSH
20067: EMPTY
20068: LIST
20069: LIST
20070: LIST
20071: LIST
20072: LIST
20073: LIST
20074: LIST
20075: LIST
20076: LIST
20077: LIST
20078: LIST
20079: LIST
20080: LIST
20081: LIST
20082: LIST
20083: PUSH
20084: LD_INT 1
20086: PPUSH
20087: LD_INT 15
20089: PPUSH
20090: CALL_OW 12
20094: ARRAY
20095: ST_TO_ADDR
// if ValidHex ( x , y ) then
20096: LD_VAR 0 3
20100: PPUSH
20101: LD_VAR 0 4
20105: PPUSH
20106: CALL_OW 488
20110: IFFALSE 20133
// begin result := [ x , y ] ;
20112: LD_ADDR_VAR 0 1
20116: PUSH
20117: LD_VAR 0 3
20121: PUSH
20122: LD_VAR 0 4
20126: PUSH
20127: EMPTY
20128: LIST
20129: LIST
20130: ST_TO_ADDR
// break ;
20131: GO 20135
// end ; end ;
20133: GO 19935
20135: POP
20136: POP
// if result then
20137: LD_VAR 0 1
20141: IFFALSE 20201
// begin ToLua ( playSibBomb() ) ;
20143: LD_STRING playSibBomb()
20145: PPUSH
20146: CALL_OW 559
// wait ( 0 0$14 ) ;
20150: LD_INT 490
20152: PPUSH
20153: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
20157: LD_VAR 0 1
20161: PUSH
20162: LD_INT 1
20164: ARRAY
20165: PPUSH
20166: LD_VAR 0 1
20170: PUSH
20171: LD_INT 2
20173: ARRAY
20174: PPUSH
20175: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
20179: LD_VAR 0 1
20183: PUSH
20184: LD_INT 1
20186: ARRAY
20187: PPUSH
20188: LD_VAR 0 1
20192: PUSH
20193: LD_INT 2
20195: ARRAY
20196: PPUSH
20197: CALL_OW 429
// end ; end ;
20201: LD_VAR 0 1
20205: RET
// every 0 0$1 trigger StreamModeActive and sReset do
20206: LD_EXP 21
20210: PUSH
20211: LD_EXP 43
20215: AND
20216: IFFALSE 20228
20218: GO 20220
20220: DISABLE
// YouLost (  ) ;
20221: LD_STRING 
20223: PPUSH
20224: CALL_OW 104
20228: END
// every 0 0$1 trigger StreamModeActive and sFog do
20229: LD_EXP 21
20233: PUSH
20234: LD_EXP 42
20238: AND
20239: IFFALSE 20253
20241: GO 20243
20243: DISABLE
// FogOff ( your_side ) ;
20244: LD_OWVAR 2
20248: PPUSH
20249: CALL_OW 344
20253: END
// every 0 0$1 trigger StreamModeActive and sSun do
20254: LD_EXP 21
20258: PUSH
20259: LD_EXP 44
20263: AND
20264: IFFALSE 20292
20266: GO 20268
20268: DISABLE
// begin solar_recharge_percent := 0 ;
20269: LD_ADDR_OWVAR 79
20273: PUSH
20274: LD_INT 0
20276: ST_TO_ADDR
// wait ( 5 5$00 ) ;
20277: LD_INT 10500
20279: PPUSH
20280: CALL_OW 67
// solar_recharge_percent := 100 ;
20284: LD_ADDR_OWVAR 79
20288: PUSH
20289: LD_INT 100
20291: ST_TO_ADDR
// end ;
20292: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
20293: LD_EXP 21
20297: PUSH
20298: LD_EXP 45
20302: AND
20303: IFFALSE 20542
20305: GO 20307
20307: DISABLE
20308: LD_INT 0
20310: PPUSH
20311: PPUSH
20312: PPUSH
// begin tmp := [ ] ;
20313: LD_ADDR_VAR 0 3
20317: PUSH
20318: EMPTY
20319: ST_TO_ADDR
// for i := 1 to 6 do
20320: LD_ADDR_VAR 0 1
20324: PUSH
20325: DOUBLE
20326: LD_INT 1
20328: DEC
20329: ST_TO_ADDR
20330: LD_INT 6
20332: PUSH
20333: FOR_TO
20334: IFFALSE 20439
// begin uc_nation := nation_nature ;
20336: LD_ADDR_OWVAR 21
20340: PUSH
20341: LD_INT 0
20343: ST_TO_ADDR
// uc_side := 0 ;
20344: LD_ADDR_OWVAR 20
20348: PUSH
20349: LD_INT 0
20351: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20352: LD_ADDR_OWVAR 29
20356: PUSH
20357: LD_INT 12
20359: PUSH
20360: LD_INT 12
20362: PUSH
20363: EMPTY
20364: LIST
20365: LIST
20366: ST_TO_ADDR
// hc_agressivity := 20 ;
20367: LD_ADDR_OWVAR 35
20371: PUSH
20372: LD_INT 20
20374: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
20375: LD_ADDR_OWVAR 28
20379: PUSH
20380: LD_INT 17
20382: ST_TO_ADDR
// hc_gallery :=  ;
20383: LD_ADDR_OWVAR 33
20387: PUSH
20388: LD_STRING 
20390: ST_TO_ADDR
// hc_name :=  ;
20391: LD_ADDR_OWVAR 26
20395: PUSH
20396: LD_STRING 
20398: ST_TO_ADDR
// un := CreateHuman ;
20399: LD_ADDR_VAR 0 2
20403: PUSH
20404: CALL_OW 44
20408: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
20409: LD_VAR 0 2
20413: PPUSH
20414: LD_INT 1
20416: PPUSH
20417: CALL_OW 51
// tmp := tmp ^ un ;
20421: LD_ADDR_VAR 0 3
20425: PUSH
20426: LD_VAR 0 3
20430: PUSH
20431: LD_VAR 0 2
20435: ADD
20436: ST_TO_ADDR
// end ;
20437: GO 20333
20439: POP
20440: POP
// repeat wait ( 0 0$1 ) ;
20441: LD_INT 35
20443: PPUSH
20444: CALL_OW 67
// for un in tmp do
20448: LD_ADDR_VAR 0 2
20452: PUSH
20453: LD_VAR 0 3
20457: PUSH
20458: FOR_IN
20459: IFFALSE 20533
// begin if IsDead ( un ) then
20461: LD_VAR 0 2
20465: PPUSH
20466: CALL_OW 301
20470: IFFALSE 20490
// begin tmp := tmp diff un ;
20472: LD_ADDR_VAR 0 3
20476: PUSH
20477: LD_VAR 0 3
20481: PUSH
20482: LD_VAR 0 2
20486: DIFF
20487: ST_TO_ADDR
// continue ;
20488: GO 20458
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
20490: LD_VAR 0 2
20494: PPUSH
20495: LD_INT 3
20497: PUSH
20498: LD_INT 22
20500: PUSH
20501: LD_INT 0
20503: PUSH
20504: EMPTY
20505: LIST
20506: LIST
20507: PUSH
20508: EMPTY
20509: LIST
20510: LIST
20511: PPUSH
20512: CALL_OW 69
20516: PPUSH
20517: LD_VAR 0 2
20521: PPUSH
20522: CALL_OW 74
20526: PPUSH
20527: CALL_OW 115
// end ;
20531: GO 20458
20533: POP
20534: POP
// until not tmp ;
20535: LD_VAR 0 3
20539: NOT
20540: IFFALSE 20441
// end ;
20542: PPOPN 3
20544: END
// every 0 0$1 trigger StreamModeActive and sTroll do
20545: LD_EXP 21
20549: PUSH
20550: LD_EXP 46
20554: AND
20555: IFFALSE 20609
20557: GO 20559
20559: DISABLE
// begin ToLua ( displayTroll(); ) ;
20560: LD_STRING displayTroll();
20562: PPUSH
20563: CALL_OW 559
// wait ( 3 3$00 ) ;
20567: LD_INT 6300
20569: PPUSH
20570: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20574: LD_STRING hideTroll();
20576: PPUSH
20577: CALL_OW 559
// wait ( 1 1$00 ) ;
20581: LD_INT 2100
20583: PPUSH
20584: CALL_OW 67
// ToLua ( displayTroll(); ) ;
20588: LD_STRING displayTroll();
20590: PPUSH
20591: CALL_OW 559
// wait ( 1 1$00 ) ;
20595: LD_INT 2100
20597: PPUSH
20598: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20602: LD_STRING hideTroll();
20604: PPUSH
20605: CALL_OW 559
// end ;
20609: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
20610: LD_EXP 21
20614: PUSH
20615: LD_EXP 47
20619: AND
20620: IFFALSE 20683
20622: GO 20624
20624: DISABLE
20625: LD_INT 0
20627: PPUSH
// begin p := 0 ;
20628: LD_ADDR_VAR 0 1
20632: PUSH
20633: LD_INT 0
20635: ST_TO_ADDR
// repeat game_speed := 1 ;
20636: LD_ADDR_OWVAR 65
20640: PUSH
20641: LD_INT 1
20643: ST_TO_ADDR
// wait ( 0 0$1 ) ;
20644: LD_INT 35
20646: PPUSH
20647: CALL_OW 67
// p := p + 1 ;
20651: LD_ADDR_VAR 0 1
20655: PUSH
20656: LD_VAR 0 1
20660: PUSH
20661: LD_INT 1
20663: PLUS
20664: ST_TO_ADDR
// until p >= 60 ;
20665: LD_VAR 0 1
20669: PUSH
20670: LD_INT 60
20672: GREATEREQUAL
20673: IFFALSE 20636
// game_speed := 4 ;
20675: LD_ADDR_OWVAR 65
20679: PUSH
20680: LD_INT 4
20682: ST_TO_ADDR
// end ;
20683: PPOPN 1
20685: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
20686: LD_EXP 21
20690: PUSH
20691: LD_EXP 48
20695: AND
20696: IFFALSE 20842
20698: GO 20700
20700: DISABLE
20701: LD_INT 0
20703: PPUSH
20704: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20705: LD_ADDR_VAR 0 1
20709: PUSH
20710: LD_INT 22
20712: PUSH
20713: LD_OWVAR 2
20717: PUSH
20718: EMPTY
20719: LIST
20720: LIST
20721: PUSH
20722: LD_INT 2
20724: PUSH
20725: LD_INT 30
20727: PUSH
20728: LD_INT 0
20730: PUSH
20731: EMPTY
20732: LIST
20733: LIST
20734: PUSH
20735: LD_INT 30
20737: PUSH
20738: LD_INT 1
20740: PUSH
20741: EMPTY
20742: LIST
20743: LIST
20744: PUSH
20745: EMPTY
20746: LIST
20747: LIST
20748: LIST
20749: PUSH
20750: EMPTY
20751: LIST
20752: LIST
20753: PPUSH
20754: CALL_OW 69
20758: ST_TO_ADDR
// if not depot then
20759: LD_VAR 0 1
20763: NOT
20764: IFFALSE 20768
// exit ;
20766: GO 20842
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20768: LD_ADDR_VAR 0 2
20772: PUSH
20773: LD_VAR 0 1
20777: PUSH
20778: LD_INT 1
20780: PPUSH
20781: LD_VAR 0 1
20785: PPUSH
20786: CALL_OW 12
20790: ARRAY
20791: PPUSH
20792: CALL_OW 274
20796: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
20797: LD_VAR 0 2
20801: PPUSH
20802: LD_INT 1
20804: PPUSH
20805: LD_INT 0
20807: PPUSH
20808: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
20812: LD_VAR 0 2
20816: PPUSH
20817: LD_INT 2
20819: PPUSH
20820: LD_INT 0
20822: PPUSH
20823: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
20827: LD_VAR 0 2
20831: PPUSH
20832: LD_INT 3
20834: PPUSH
20835: LD_INT 0
20837: PPUSH
20838: CALL_OW 277
// end ;
20842: PPOPN 2
20844: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
20845: LD_EXP 21
20849: PUSH
20850: LD_EXP 49
20854: AND
20855: IFFALSE 20952
20857: GO 20859
20859: DISABLE
20860: LD_INT 0
20862: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20863: LD_ADDR_VAR 0 1
20867: PUSH
20868: LD_INT 22
20870: PUSH
20871: LD_OWVAR 2
20875: PUSH
20876: EMPTY
20877: LIST
20878: LIST
20879: PUSH
20880: LD_INT 21
20882: PUSH
20883: LD_INT 1
20885: PUSH
20886: EMPTY
20887: LIST
20888: LIST
20889: PUSH
20890: LD_INT 3
20892: PUSH
20893: LD_INT 23
20895: PUSH
20896: LD_INT 0
20898: PUSH
20899: EMPTY
20900: LIST
20901: LIST
20902: PUSH
20903: EMPTY
20904: LIST
20905: LIST
20906: PUSH
20907: EMPTY
20908: LIST
20909: LIST
20910: LIST
20911: PPUSH
20912: CALL_OW 69
20916: ST_TO_ADDR
// if not tmp then
20917: LD_VAR 0 1
20921: NOT
20922: IFFALSE 20926
// exit ;
20924: GO 20952
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
20926: LD_VAR 0 1
20930: PUSH
20931: LD_INT 1
20933: PPUSH
20934: LD_VAR 0 1
20938: PPUSH
20939: CALL_OW 12
20943: ARRAY
20944: PPUSH
20945: LD_INT 200
20947: PPUSH
20948: CALL_OW 234
// end ;
20952: PPOPN 1
20954: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
20955: LD_EXP 21
20959: PUSH
20960: LD_EXP 50
20964: AND
20965: IFFALSE 21044
20967: GO 20969
20969: DISABLE
20970: LD_INT 0
20972: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20973: LD_ADDR_VAR 0 1
20977: PUSH
20978: LD_INT 22
20980: PUSH
20981: LD_OWVAR 2
20985: PUSH
20986: EMPTY
20987: LIST
20988: LIST
20989: PUSH
20990: LD_INT 21
20992: PUSH
20993: LD_INT 2
20995: PUSH
20996: EMPTY
20997: LIST
20998: LIST
20999: PUSH
21000: EMPTY
21001: LIST
21002: LIST
21003: PPUSH
21004: CALL_OW 69
21008: ST_TO_ADDR
// if not tmp then
21009: LD_VAR 0 1
21013: NOT
21014: IFFALSE 21018
// exit ;
21016: GO 21044
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
21018: LD_VAR 0 1
21022: PUSH
21023: LD_INT 1
21025: PPUSH
21026: LD_VAR 0 1
21030: PPUSH
21031: CALL_OW 12
21035: ARRAY
21036: PPUSH
21037: LD_INT 60
21039: PPUSH
21040: CALL_OW 234
// end ;
21044: PPOPN 1
21046: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
21047: LD_EXP 21
21051: PUSH
21052: LD_EXP 51
21056: AND
21057: IFFALSE 21156
21059: GO 21061
21061: DISABLE
21062: LD_INT 0
21064: PPUSH
21065: PPUSH
// begin enable ;
21066: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
21067: LD_ADDR_VAR 0 1
21071: PUSH
21072: LD_INT 22
21074: PUSH
21075: LD_OWVAR 2
21079: PUSH
21080: EMPTY
21081: LIST
21082: LIST
21083: PUSH
21084: LD_INT 61
21086: PUSH
21087: EMPTY
21088: LIST
21089: PUSH
21090: LD_INT 33
21092: PUSH
21093: LD_INT 2
21095: PUSH
21096: EMPTY
21097: LIST
21098: LIST
21099: PUSH
21100: EMPTY
21101: LIST
21102: LIST
21103: LIST
21104: PPUSH
21105: CALL_OW 69
21109: ST_TO_ADDR
// if not tmp then
21110: LD_VAR 0 1
21114: NOT
21115: IFFALSE 21119
// exit ;
21117: GO 21156
// for i in tmp do
21119: LD_ADDR_VAR 0 2
21123: PUSH
21124: LD_VAR 0 1
21128: PUSH
21129: FOR_IN
21130: IFFALSE 21154
// if IsControledBy ( i ) then
21132: LD_VAR 0 2
21136: PPUSH
21137: CALL_OW 312
21141: IFFALSE 21152
// ComUnlink ( i ) ;
21143: LD_VAR 0 2
21147: PPUSH
21148: CALL_OW 136
21152: GO 21129
21154: POP
21155: POP
// end ;
21156: PPOPN 2
21158: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
21159: LD_EXP 21
21163: PUSH
21164: LD_EXP 52
21168: AND
21169: IFFALSE 21309
21171: GO 21173
21173: DISABLE
21174: LD_INT 0
21176: PPUSH
21177: PPUSH
// begin ToLua ( displayPowell(); ) ;
21178: LD_STRING displayPowell();
21180: PPUSH
21181: CALL_OW 559
// uc_side := 0 ;
21185: LD_ADDR_OWVAR 20
21189: PUSH
21190: LD_INT 0
21192: ST_TO_ADDR
// uc_nation := 2 ;
21193: LD_ADDR_OWVAR 21
21197: PUSH
21198: LD_INT 2
21200: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
21201: LD_ADDR_OWVAR 37
21205: PUSH
21206: LD_INT 14
21208: ST_TO_ADDR
// vc_engine := engine_siberite ;
21209: LD_ADDR_OWVAR 39
21213: PUSH
21214: LD_INT 3
21216: ST_TO_ADDR
// vc_control := control_apeman ;
21217: LD_ADDR_OWVAR 38
21221: PUSH
21222: LD_INT 5
21224: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
21225: LD_ADDR_OWVAR 40
21229: PUSH
21230: LD_INT 29
21232: ST_TO_ADDR
// un := CreateVehicle ;
21233: LD_ADDR_VAR 0 2
21237: PUSH
21238: CALL_OW 45
21242: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21243: LD_VAR 0 2
21247: PPUSH
21248: LD_INT 1
21250: PPUSH
21251: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21255: LD_INT 35
21257: PPUSH
21258: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21262: LD_VAR 0 2
21266: PPUSH
21267: LD_INT 22
21269: PUSH
21270: LD_OWVAR 2
21274: PUSH
21275: EMPTY
21276: LIST
21277: LIST
21278: PPUSH
21279: CALL_OW 69
21283: PPUSH
21284: LD_VAR 0 2
21288: PPUSH
21289: CALL_OW 74
21293: PPUSH
21294: CALL_OW 115
// until IsDead ( un ) ;
21298: LD_VAR 0 2
21302: PPUSH
21303: CALL_OW 301
21307: IFFALSE 21255
// end ;
21309: PPOPN 2
21311: END
// every 0 0$1 trigger StreamModeActive and sStu do
21312: LD_EXP 21
21316: PUSH
21317: LD_EXP 60
21321: AND
21322: IFFALSE 21338
21324: GO 21326
21326: DISABLE
// begin ToLua ( displayStucuk(); ) ;
21327: LD_STRING displayStucuk();
21329: PPUSH
21330: CALL_OW 559
// ResetFog ;
21334: CALL_OW 335
// end ;
21338: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
21339: LD_EXP 21
21343: PUSH
21344: LD_EXP 53
21348: AND
21349: IFFALSE 21490
21351: GO 21353
21353: DISABLE
21354: LD_INT 0
21356: PPUSH
21357: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21358: LD_ADDR_VAR 0 2
21362: PUSH
21363: LD_INT 22
21365: PUSH
21366: LD_OWVAR 2
21370: PUSH
21371: EMPTY
21372: LIST
21373: LIST
21374: PUSH
21375: LD_INT 21
21377: PUSH
21378: LD_INT 1
21380: PUSH
21381: EMPTY
21382: LIST
21383: LIST
21384: PUSH
21385: EMPTY
21386: LIST
21387: LIST
21388: PPUSH
21389: CALL_OW 69
21393: ST_TO_ADDR
// if not tmp then
21394: LD_VAR 0 2
21398: NOT
21399: IFFALSE 21403
// exit ;
21401: GO 21490
// un := tmp [ rand ( 1 , tmp ) ] ;
21403: LD_ADDR_VAR 0 1
21407: PUSH
21408: LD_VAR 0 2
21412: PUSH
21413: LD_INT 1
21415: PPUSH
21416: LD_VAR 0 2
21420: PPUSH
21421: CALL_OW 12
21425: ARRAY
21426: ST_TO_ADDR
// SetSide ( un , 0 ) ;
21427: LD_VAR 0 1
21431: PPUSH
21432: LD_INT 0
21434: PPUSH
21435: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
21439: LD_VAR 0 1
21443: PPUSH
21444: LD_OWVAR 3
21448: PUSH
21449: LD_VAR 0 1
21453: DIFF
21454: PPUSH
21455: LD_VAR 0 1
21459: PPUSH
21460: CALL_OW 74
21464: PPUSH
21465: CALL_OW 115
// wait ( 0 0$20 ) ;
21469: LD_INT 700
21471: PPUSH
21472: CALL_OW 67
// SetSide ( un , your_side ) ;
21476: LD_VAR 0 1
21480: PPUSH
21481: LD_OWVAR 2
21485: PPUSH
21486: CALL_OW 235
// end ;
21490: PPOPN 2
21492: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
21493: LD_EXP 21
21497: PUSH
21498: LD_EXP 54
21502: AND
21503: IFFALSE 21609
21505: GO 21507
21507: DISABLE
21508: LD_INT 0
21510: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21511: LD_ADDR_VAR 0 1
21515: PUSH
21516: LD_INT 22
21518: PUSH
21519: LD_OWVAR 2
21523: PUSH
21524: EMPTY
21525: LIST
21526: LIST
21527: PUSH
21528: LD_INT 2
21530: PUSH
21531: LD_INT 30
21533: PUSH
21534: LD_INT 0
21536: PUSH
21537: EMPTY
21538: LIST
21539: LIST
21540: PUSH
21541: LD_INT 30
21543: PUSH
21544: LD_INT 1
21546: PUSH
21547: EMPTY
21548: LIST
21549: LIST
21550: PUSH
21551: EMPTY
21552: LIST
21553: LIST
21554: LIST
21555: PUSH
21556: EMPTY
21557: LIST
21558: LIST
21559: PPUSH
21560: CALL_OW 69
21564: ST_TO_ADDR
// if not depot then
21565: LD_VAR 0 1
21569: NOT
21570: IFFALSE 21574
// exit ;
21572: GO 21609
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
21574: LD_VAR 0 1
21578: PUSH
21579: LD_INT 1
21581: ARRAY
21582: PPUSH
21583: CALL_OW 250
21587: PPUSH
21588: LD_VAR 0 1
21592: PUSH
21593: LD_INT 1
21595: ARRAY
21596: PPUSH
21597: CALL_OW 251
21601: PPUSH
21602: LD_INT 70
21604: PPUSH
21605: CALL_OW 495
// end ;
21609: PPOPN 1
21611: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
21612: LD_EXP 21
21616: PUSH
21617: LD_EXP 55
21621: AND
21622: IFFALSE 21833
21624: GO 21626
21626: DISABLE
21627: LD_INT 0
21629: PPUSH
21630: PPUSH
21631: PPUSH
21632: PPUSH
21633: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21634: LD_ADDR_VAR 0 5
21638: PUSH
21639: LD_INT 22
21641: PUSH
21642: LD_OWVAR 2
21646: PUSH
21647: EMPTY
21648: LIST
21649: LIST
21650: PUSH
21651: LD_INT 21
21653: PUSH
21654: LD_INT 1
21656: PUSH
21657: EMPTY
21658: LIST
21659: LIST
21660: PUSH
21661: EMPTY
21662: LIST
21663: LIST
21664: PPUSH
21665: CALL_OW 69
21669: ST_TO_ADDR
// if not tmp then
21670: LD_VAR 0 5
21674: NOT
21675: IFFALSE 21679
// exit ;
21677: GO 21833
// for i in tmp do
21679: LD_ADDR_VAR 0 1
21683: PUSH
21684: LD_VAR 0 5
21688: PUSH
21689: FOR_IN
21690: IFFALSE 21831
// begin d := rand ( 0 , 5 ) ;
21692: LD_ADDR_VAR 0 4
21696: PUSH
21697: LD_INT 0
21699: PPUSH
21700: LD_INT 5
21702: PPUSH
21703: CALL_OW 12
21707: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
21708: LD_ADDR_VAR 0 2
21712: PUSH
21713: LD_VAR 0 1
21717: PPUSH
21718: CALL_OW 250
21722: PPUSH
21723: LD_VAR 0 4
21727: PPUSH
21728: LD_INT 3
21730: PPUSH
21731: LD_INT 12
21733: PPUSH
21734: CALL_OW 12
21738: PPUSH
21739: CALL_OW 272
21743: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
21744: LD_ADDR_VAR 0 3
21748: PUSH
21749: LD_VAR 0 1
21753: PPUSH
21754: CALL_OW 251
21758: PPUSH
21759: LD_VAR 0 4
21763: PPUSH
21764: LD_INT 3
21766: PPUSH
21767: LD_INT 12
21769: PPUSH
21770: CALL_OW 12
21774: PPUSH
21775: CALL_OW 273
21779: ST_TO_ADDR
// if ValidHex ( x , y ) then
21780: LD_VAR 0 2
21784: PPUSH
21785: LD_VAR 0 3
21789: PPUSH
21790: CALL_OW 488
21794: IFFALSE 21829
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
21796: LD_VAR 0 1
21800: PPUSH
21801: LD_VAR 0 2
21805: PPUSH
21806: LD_VAR 0 3
21810: PPUSH
21811: LD_INT 3
21813: PPUSH
21814: LD_INT 6
21816: PPUSH
21817: CALL_OW 12
21821: PPUSH
21822: LD_INT 1
21824: PPUSH
21825: CALL_OW 483
// end ;
21829: GO 21689
21831: POP
21832: POP
// end ;
21833: PPOPN 5
21835: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
21836: LD_EXP 21
21840: PUSH
21841: LD_EXP 56
21845: AND
21846: IFFALSE 21940
21848: GO 21850
21850: DISABLE
21851: LD_INT 0
21853: PPUSH
21854: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
21855: LD_ADDR_VAR 0 2
21859: PUSH
21860: LD_INT 22
21862: PUSH
21863: LD_OWVAR 2
21867: PUSH
21868: EMPTY
21869: LIST
21870: LIST
21871: PUSH
21872: LD_INT 32
21874: PUSH
21875: LD_INT 1
21877: PUSH
21878: EMPTY
21879: LIST
21880: LIST
21881: PUSH
21882: LD_INT 21
21884: PUSH
21885: LD_INT 2
21887: PUSH
21888: EMPTY
21889: LIST
21890: LIST
21891: PUSH
21892: EMPTY
21893: LIST
21894: LIST
21895: LIST
21896: PPUSH
21897: CALL_OW 69
21901: ST_TO_ADDR
// if not tmp then
21902: LD_VAR 0 2
21906: NOT
21907: IFFALSE 21911
// exit ;
21909: GO 21940
// for i in tmp do
21911: LD_ADDR_VAR 0 1
21915: PUSH
21916: LD_VAR 0 2
21920: PUSH
21921: FOR_IN
21922: IFFALSE 21938
// SetFuel ( i , 0 ) ;
21924: LD_VAR 0 1
21928: PPUSH
21929: LD_INT 0
21931: PPUSH
21932: CALL_OW 240
21936: GO 21921
21938: POP
21939: POP
// end ;
21940: PPOPN 2
21942: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
21943: LD_EXP 21
21947: PUSH
21948: LD_EXP 57
21952: AND
21953: IFFALSE 22019
21955: GO 21957
21957: DISABLE
21958: LD_INT 0
21960: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21961: LD_ADDR_VAR 0 1
21965: PUSH
21966: LD_INT 22
21968: PUSH
21969: LD_OWVAR 2
21973: PUSH
21974: EMPTY
21975: LIST
21976: LIST
21977: PUSH
21978: LD_INT 30
21980: PUSH
21981: LD_INT 29
21983: PUSH
21984: EMPTY
21985: LIST
21986: LIST
21987: PUSH
21988: EMPTY
21989: LIST
21990: LIST
21991: PPUSH
21992: CALL_OW 69
21996: ST_TO_ADDR
// if not tmp then
21997: LD_VAR 0 1
22001: NOT
22002: IFFALSE 22006
// exit ;
22004: GO 22019
// DestroyUnit ( tmp [ 1 ] ) ;
22006: LD_VAR 0 1
22010: PUSH
22011: LD_INT 1
22013: ARRAY
22014: PPUSH
22015: CALL_OW 65
// end ;
22019: PPOPN 1
22021: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
22022: LD_EXP 21
22026: PUSH
22027: LD_EXP 59
22031: AND
22032: IFFALSE 22161
22034: GO 22036
22036: DISABLE
22037: LD_INT 0
22039: PPUSH
// begin uc_side := 0 ;
22040: LD_ADDR_OWVAR 20
22044: PUSH
22045: LD_INT 0
22047: ST_TO_ADDR
// uc_nation := nation_arabian ;
22048: LD_ADDR_OWVAR 21
22052: PUSH
22053: LD_INT 2
22055: ST_TO_ADDR
// hc_gallery :=  ;
22056: LD_ADDR_OWVAR 33
22060: PUSH
22061: LD_STRING 
22063: ST_TO_ADDR
// hc_name :=  ;
22064: LD_ADDR_OWVAR 26
22068: PUSH
22069: LD_STRING 
22071: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
22072: LD_INT 1
22074: PPUSH
22075: LD_INT 11
22077: PPUSH
22078: LD_INT 10
22080: PPUSH
22081: CALL_OW 380
// un := CreateHuman ;
22085: LD_ADDR_VAR 0 1
22089: PUSH
22090: CALL_OW 44
22094: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22095: LD_VAR 0 1
22099: PPUSH
22100: LD_INT 1
22102: PPUSH
22103: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
22107: LD_INT 35
22109: PPUSH
22110: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
22114: LD_VAR 0 1
22118: PPUSH
22119: LD_INT 22
22121: PUSH
22122: LD_OWVAR 2
22126: PUSH
22127: EMPTY
22128: LIST
22129: LIST
22130: PPUSH
22131: CALL_OW 69
22135: PPUSH
22136: LD_VAR 0 1
22140: PPUSH
22141: CALL_OW 74
22145: PPUSH
22146: CALL_OW 115
// until IsDead ( un ) ;
22150: LD_VAR 0 1
22154: PPUSH
22155: CALL_OW 301
22159: IFFALSE 22107
// end ;
22161: PPOPN 1
22163: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
22164: LD_EXP 21
22168: PUSH
22169: LD_EXP 61
22173: AND
22174: IFFALSE 22186
22176: GO 22178
22178: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
22179: LD_STRING earthquake(getX(game), 0, 32)
22181: PPUSH
22182: CALL_OW 559
22186: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
22187: LD_EXP 21
22191: PUSH
22192: LD_EXP 62
22196: AND
22197: IFFALSE 22288
22199: GO 22201
22201: DISABLE
22202: LD_INT 0
22204: PPUSH
// begin enable ;
22205: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
22206: LD_ADDR_VAR 0 1
22210: PUSH
22211: LD_INT 22
22213: PUSH
22214: LD_OWVAR 2
22218: PUSH
22219: EMPTY
22220: LIST
22221: LIST
22222: PUSH
22223: LD_INT 21
22225: PUSH
22226: LD_INT 2
22228: PUSH
22229: EMPTY
22230: LIST
22231: LIST
22232: PUSH
22233: LD_INT 33
22235: PUSH
22236: LD_INT 3
22238: PUSH
22239: EMPTY
22240: LIST
22241: LIST
22242: PUSH
22243: EMPTY
22244: LIST
22245: LIST
22246: LIST
22247: PPUSH
22248: CALL_OW 69
22252: ST_TO_ADDR
// if not tmp then
22253: LD_VAR 0 1
22257: NOT
22258: IFFALSE 22262
// exit ;
22260: GO 22288
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22262: LD_VAR 0 1
22266: PUSH
22267: LD_INT 1
22269: PPUSH
22270: LD_VAR 0 1
22274: PPUSH
22275: CALL_OW 12
22279: ARRAY
22280: PPUSH
22281: LD_INT 1
22283: PPUSH
22284: CALL_OW 234
// end ;
22288: PPOPN 1
22290: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
22291: LD_EXP 21
22295: PUSH
22296: LD_EXP 63
22300: AND
22301: IFFALSE 22442
22303: GO 22305
22305: DISABLE
22306: LD_INT 0
22308: PPUSH
22309: PPUSH
22310: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22311: LD_ADDR_VAR 0 3
22315: PUSH
22316: LD_INT 22
22318: PUSH
22319: LD_OWVAR 2
22323: PUSH
22324: EMPTY
22325: LIST
22326: LIST
22327: PUSH
22328: LD_INT 25
22330: PUSH
22331: LD_INT 1
22333: PUSH
22334: EMPTY
22335: LIST
22336: LIST
22337: PUSH
22338: EMPTY
22339: LIST
22340: LIST
22341: PPUSH
22342: CALL_OW 69
22346: ST_TO_ADDR
// if not tmp then
22347: LD_VAR 0 3
22351: NOT
22352: IFFALSE 22356
// exit ;
22354: GO 22442
// un := tmp [ rand ( 1 , tmp ) ] ;
22356: LD_ADDR_VAR 0 2
22360: PUSH
22361: LD_VAR 0 3
22365: PUSH
22366: LD_INT 1
22368: PPUSH
22369: LD_VAR 0 3
22373: PPUSH
22374: CALL_OW 12
22378: ARRAY
22379: ST_TO_ADDR
// if Crawls ( un ) then
22380: LD_VAR 0 2
22384: PPUSH
22385: CALL_OW 318
22389: IFFALSE 22400
// ComWalk ( un ) ;
22391: LD_VAR 0 2
22395: PPUSH
22396: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
22400: LD_VAR 0 2
22404: PPUSH
22405: LD_INT 9
22407: PPUSH
22408: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
22412: LD_INT 28
22414: PPUSH
22415: LD_OWVAR 2
22419: PPUSH
22420: LD_INT 2
22422: PPUSH
22423: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
22427: LD_INT 29
22429: PPUSH
22430: LD_OWVAR 2
22434: PPUSH
22435: LD_INT 2
22437: PPUSH
22438: CALL_OW 322
// end ;
22442: PPOPN 3
22444: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
22445: LD_EXP 21
22449: PUSH
22450: LD_EXP 64
22454: AND
22455: IFFALSE 22566
22457: GO 22459
22459: DISABLE
22460: LD_INT 0
22462: PPUSH
22463: PPUSH
22464: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22465: LD_ADDR_VAR 0 3
22469: PUSH
22470: LD_INT 22
22472: PUSH
22473: LD_OWVAR 2
22477: PUSH
22478: EMPTY
22479: LIST
22480: LIST
22481: PUSH
22482: LD_INT 25
22484: PUSH
22485: LD_INT 1
22487: PUSH
22488: EMPTY
22489: LIST
22490: LIST
22491: PUSH
22492: EMPTY
22493: LIST
22494: LIST
22495: PPUSH
22496: CALL_OW 69
22500: ST_TO_ADDR
// if not tmp then
22501: LD_VAR 0 3
22505: NOT
22506: IFFALSE 22510
// exit ;
22508: GO 22566
// un := tmp [ rand ( 1 , tmp ) ] ;
22510: LD_ADDR_VAR 0 2
22514: PUSH
22515: LD_VAR 0 3
22519: PUSH
22520: LD_INT 1
22522: PPUSH
22523: LD_VAR 0 3
22527: PPUSH
22528: CALL_OW 12
22532: ARRAY
22533: ST_TO_ADDR
// if Crawls ( un ) then
22534: LD_VAR 0 2
22538: PPUSH
22539: CALL_OW 318
22543: IFFALSE 22554
// ComWalk ( un ) ;
22545: LD_VAR 0 2
22549: PPUSH
22550: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22554: LD_VAR 0 2
22558: PPUSH
22559: LD_INT 8
22561: PPUSH
22562: CALL_OW 336
// end ;
22566: PPOPN 3
22568: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
22569: LD_EXP 21
22573: PUSH
22574: LD_EXP 65
22578: AND
22579: IFFALSE 22723
22581: GO 22583
22583: DISABLE
22584: LD_INT 0
22586: PPUSH
22587: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
22588: LD_ADDR_VAR 0 2
22592: PUSH
22593: LD_INT 22
22595: PUSH
22596: LD_OWVAR 2
22600: PUSH
22601: EMPTY
22602: LIST
22603: LIST
22604: PUSH
22605: LD_INT 21
22607: PUSH
22608: LD_INT 2
22610: PUSH
22611: EMPTY
22612: LIST
22613: LIST
22614: PUSH
22615: LD_INT 2
22617: PUSH
22618: LD_INT 34
22620: PUSH
22621: LD_INT 12
22623: PUSH
22624: EMPTY
22625: LIST
22626: LIST
22627: PUSH
22628: LD_INT 34
22630: PUSH
22631: LD_INT 51
22633: PUSH
22634: EMPTY
22635: LIST
22636: LIST
22637: PUSH
22638: LD_INT 34
22640: PUSH
22641: LD_INT 32
22643: PUSH
22644: EMPTY
22645: LIST
22646: LIST
22647: PUSH
22648: EMPTY
22649: LIST
22650: LIST
22651: LIST
22652: LIST
22653: PUSH
22654: EMPTY
22655: LIST
22656: LIST
22657: LIST
22658: PPUSH
22659: CALL_OW 69
22663: ST_TO_ADDR
// if not tmp then
22664: LD_VAR 0 2
22668: NOT
22669: IFFALSE 22673
// exit ;
22671: GO 22723
// for i in tmp do
22673: LD_ADDR_VAR 0 1
22677: PUSH
22678: LD_VAR 0 2
22682: PUSH
22683: FOR_IN
22684: IFFALSE 22721
// if GetCargo ( i , mat_artifact ) = 0 then
22686: LD_VAR 0 1
22690: PPUSH
22691: LD_INT 4
22693: PPUSH
22694: CALL_OW 289
22698: PUSH
22699: LD_INT 0
22701: EQUAL
22702: IFFALSE 22719
// SetCargo ( i , mat_siberit , 100 ) ;
22704: LD_VAR 0 1
22708: PPUSH
22709: LD_INT 3
22711: PPUSH
22712: LD_INT 100
22714: PPUSH
22715: CALL_OW 290
22719: GO 22683
22721: POP
22722: POP
// end ;
22723: PPOPN 2
22725: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
22726: LD_EXP 21
22730: PUSH
22731: LD_EXP 66
22735: AND
22736: IFFALSE 22919
22738: GO 22740
22740: DISABLE
22741: LD_INT 0
22743: PPUSH
22744: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22745: LD_ADDR_VAR 0 2
22749: PUSH
22750: LD_INT 22
22752: PUSH
22753: LD_OWVAR 2
22757: PUSH
22758: EMPTY
22759: LIST
22760: LIST
22761: PPUSH
22762: CALL_OW 69
22766: ST_TO_ADDR
// if not tmp then
22767: LD_VAR 0 2
22771: NOT
22772: IFFALSE 22776
// exit ;
22774: GO 22919
// for i := 1 to 2 do
22776: LD_ADDR_VAR 0 1
22780: PUSH
22781: DOUBLE
22782: LD_INT 1
22784: DEC
22785: ST_TO_ADDR
22786: LD_INT 2
22788: PUSH
22789: FOR_TO
22790: IFFALSE 22917
// begin uc_side := your_side ;
22792: LD_ADDR_OWVAR 20
22796: PUSH
22797: LD_OWVAR 2
22801: ST_TO_ADDR
// uc_nation := nation_american ;
22802: LD_ADDR_OWVAR 21
22806: PUSH
22807: LD_INT 1
22809: ST_TO_ADDR
// vc_chassis := us_morphling ;
22810: LD_ADDR_OWVAR 37
22814: PUSH
22815: LD_INT 5
22817: ST_TO_ADDR
// vc_engine := engine_siberite ;
22818: LD_ADDR_OWVAR 39
22822: PUSH
22823: LD_INT 3
22825: ST_TO_ADDR
// vc_control := control_computer ;
22826: LD_ADDR_OWVAR 38
22830: PUSH
22831: LD_INT 3
22833: ST_TO_ADDR
// vc_weapon := us_double_laser ;
22834: LD_ADDR_OWVAR 40
22838: PUSH
22839: LD_INT 10
22841: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
22842: LD_VAR 0 2
22846: PUSH
22847: LD_INT 1
22849: ARRAY
22850: PPUSH
22851: CALL_OW 310
22855: NOT
22856: IFFALSE 22903
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
22858: CALL_OW 45
22862: PPUSH
22863: LD_VAR 0 2
22867: PUSH
22868: LD_INT 1
22870: ARRAY
22871: PPUSH
22872: CALL_OW 250
22876: PPUSH
22877: LD_VAR 0 2
22881: PUSH
22882: LD_INT 1
22884: ARRAY
22885: PPUSH
22886: CALL_OW 251
22890: PPUSH
22891: LD_INT 12
22893: PPUSH
22894: LD_INT 1
22896: PPUSH
22897: CALL_OW 50
22901: GO 22915
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22903: CALL_OW 45
22907: PPUSH
22908: LD_INT 1
22910: PPUSH
22911: CALL_OW 51
// end ;
22915: GO 22789
22917: POP
22918: POP
// end ;
22919: PPOPN 2
22921: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
22922: LD_EXP 21
22926: PUSH
22927: LD_EXP 67
22931: AND
22932: IFFALSE 23154
22934: GO 22936
22936: DISABLE
22937: LD_INT 0
22939: PPUSH
22940: PPUSH
22941: PPUSH
22942: PPUSH
22943: PPUSH
22944: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22945: LD_ADDR_VAR 0 6
22949: PUSH
22950: LD_INT 22
22952: PUSH
22953: LD_OWVAR 2
22957: PUSH
22958: EMPTY
22959: LIST
22960: LIST
22961: PUSH
22962: LD_INT 21
22964: PUSH
22965: LD_INT 1
22967: PUSH
22968: EMPTY
22969: LIST
22970: LIST
22971: PUSH
22972: LD_INT 3
22974: PUSH
22975: LD_INT 23
22977: PUSH
22978: LD_INT 0
22980: PUSH
22981: EMPTY
22982: LIST
22983: LIST
22984: PUSH
22985: EMPTY
22986: LIST
22987: LIST
22988: PUSH
22989: EMPTY
22990: LIST
22991: LIST
22992: LIST
22993: PPUSH
22994: CALL_OW 69
22998: ST_TO_ADDR
// if not tmp then
22999: LD_VAR 0 6
23003: NOT
23004: IFFALSE 23008
// exit ;
23006: GO 23154
// s1 := rand ( 1 , 4 ) ;
23008: LD_ADDR_VAR 0 2
23012: PUSH
23013: LD_INT 1
23015: PPUSH
23016: LD_INT 4
23018: PPUSH
23019: CALL_OW 12
23023: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
23024: LD_ADDR_VAR 0 4
23028: PUSH
23029: LD_VAR 0 6
23033: PUSH
23034: LD_INT 1
23036: ARRAY
23037: PPUSH
23038: LD_VAR 0 2
23042: PPUSH
23043: CALL_OW 259
23047: ST_TO_ADDR
// if s1 = 1 then
23048: LD_VAR 0 2
23052: PUSH
23053: LD_INT 1
23055: EQUAL
23056: IFFALSE 23076
// s2 := rand ( 2 , 4 ) else
23058: LD_ADDR_VAR 0 3
23062: PUSH
23063: LD_INT 2
23065: PPUSH
23066: LD_INT 4
23068: PPUSH
23069: CALL_OW 12
23073: ST_TO_ADDR
23074: GO 23084
// s2 := 1 ;
23076: LD_ADDR_VAR 0 3
23080: PUSH
23081: LD_INT 1
23083: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
23084: LD_ADDR_VAR 0 5
23088: PUSH
23089: LD_VAR 0 6
23093: PUSH
23094: LD_INT 1
23096: ARRAY
23097: PPUSH
23098: LD_VAR 0 3
23102: PPUSH
23103: CALL_OW 259
23107: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
23108: LD_VAR 0 6
23112: PUSH
23113: LD_INT 1
23115: ARRAY
23116: PPUSH
23117: LD_VAR 0 2
23121: PPUSH
23122: LD_VAR 0 5
23126: PPUSH
23127: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
23131: LD_VAR 0 6
23135: PUSH
23136: LD_INT 1
23138: ARRAY
23139: PPUSH
23140: LD_VAR 0 3
23144: PPUSH
23145: LD_VAR 0 4
23149: PPUSH
23150: CALL_OW 237
// end ;
23154: PPOPN 6
23156: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
23157: LD_EXP 21
23161: PUSH
23162: LD_EXP 68
23166: AND
23167: IFFALSE 23246
23169: GO 23171
23171: DISABLE
23172: LD_INT 0
23174: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
23175: LD_ADDR_VAR 0 1
23179: PUSH
23180: LD_INT 22
23182: PUSH
23183: LD_OWVAR 2
23187: PUSH
23188: EMPTY
23189: LIST
23190: LIST
23191: PUSH
23192: LD_INT 30
23194: PUSH
23195: LD_INT 3
23197: PUSH
23198: EMPTY
23199: LIST
23200: LIST
23201: PUSH
23202: EMPTY
23203: LIST
23204: LIST
23205: PPUSH
23206: CALL_OW 69
23210: ST_TO_ADDR
// if not tmp then
23211: LD_VAR 0 1
23215: NOT
23216: IFFALSE 23220
// exit ;
23218: GO 23246
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
23220: LD_VAR 0 1
23224: PUSH
23225: LD_INT 1
23227: PPUSH
23228: LD_VAR 0 1
23232: PPUSH
23233: CALL_OW 12
23237: ARRAY
23238: PPUSH
23239: LD_INT 1
23241: PPUSH
23242: CALL_OW 234
// end ;
23246: PPOPN 1
23248: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
23249: LD_EXP 21
23253: PUSH
23254: LD_EXP 69
23258: AND
23259: IFFALSE 23371
23261: GO 23263
23263: DISABLE
23264: LD_INT 0
23266: PPUSH
23267: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
23268: LD_ADDR_VAR 0 2
23272: PUSH
23273: LD_INT 22
23275: PUSH
23276: LD_OWVAR 2
23280: PUSH
23281: EMPTY
23282: LIST
23283: LIST
23284: PUSH
23285: LD_INT 2
23287: PUSH
23288: LD_INT 30
23290: PUSH
23291: LD_INT 27
23293: PUSH
23294: EMPTY
23295: LIST
23296: LIST
23297: PUSH
23298: LD_INT 30
23300: PUSH
23301: LD_INT 26
23303: PUSH
23304: EMPTY
23305: LIST
23306: LIST
23307: PUSH
23308: LD_INT 30
23310: PUSH
23311: LD_INT 28
23313: PUSH
23314: EMPTY
23315: LIST
23316: LIST
23317: PUSH
23318: EMPTY
23319: LIST
23320: LIST
23321: LIST
23322: LIST
23323: PUSH
23324: EMPTY
23325: LIST
23326: LIST
23327: PPUSH
23328: CALL_OW 69
23332: ST_TO_ADDR
// if not tmp then
23333: LD_VAR 0 2
23337: NOT
23338: IFFALSE 23342
// exit ;
23340: GO 23371
// for i in tmp do
23342: LD_ADDR_VAR 0 1
23346: PUSH
23347: LD_VAR 0 2
23351: PUSH
23352: FOR_IN
23353: IFFALSE 23369
// SetLives ( i , 1 ) ;
23355: LD_VAR 0 1
23359: PPUSH
23360: LD_INT 1
23362: PPUSH
23363: CALL_OW 234
23367: GO 23352
23369: POP
23370: POP
// end ;
23371: PPOPN 2
23373: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
23374: LD_EXP 21
23378: PUSH
23379: LD_EXP 70
23383: AND
23384: IFFALSE 23671
23386: GO 23388
23388: DISABLE
23389: LD_INT 0
23391: PPUSH
23392: PPUSH
23393: PPUSH
// begin i := rand ( 1 , 7 ) ;
23394: LD_ADDR_VAR 0 1
23398: PUSH
23399: LD_INT 1
23401: PPUSH
23402: LD_INT 7
23404: PPUSH
23405: CALL_OW 12
23409: ST_TO_ADDR
// case i of 1 :
23410: LD_VAR 0 1
23414: PUSH
23415: LD_INT 1
23417: DOUBLE
23418: EQUAL
23419: IFTRUE 23423
23421: GO 23433
23423: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
23424: LD_STRING earthquake(getX(game), 0, 32)
23426: PPUSH
23427: CALL_OW 559
23431: GO 23671
23433: LD_INT 2
23435: DOUBLE
23436: EQUAL
23437: IFTRUE 23441
23439: GO 23455
23441: POP
// begin ToLua ( displayStucuk(); ) ;
23442: LD_STRING displayStucuk();
23444: PPUSH
23445: CALL_OW 559
// ResetFog ;
23449: CALL_OW 335
// end ; 3 :
23453: GO 23671
23455: LD_INT 3
23457: DOUBLE
23458: EQUAL
23459: IFTRUE 23463
23461: GO 23567
23463: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23464: LD_ADDR_VAR 0 2
23468: PUSH
23469: LD_INT 22
23471: PUSH
23472: LD_OWVAR 2
23476: PUSH
23477: EMPTY
23478: LIST
23479: LIST
23480: PUSH
23481: LD_INT 25
23483: PUSH
23484: LD_INT 1
23486: PUSH
23487: EMPTY
23488: LIST
23489: LIST
23490: PUSH
23491: EMPTY
23492: LIST
23493: LIST
23494: PPUSH
23495: CALL_OW 69
23499: ST_TO_ADDR
// if not tmp then
23500: LD_VAR 0 2
23504: NOT
23505: IFFALSE 23509
// exit ;
23507: GO 23671
// un := tmp [ rand ( 1 , tmp ) ] ;
23509: LD_ADDR_VAR 0 3
23513: PUSH
23514: LD_VAR 0 2
23518: PUSH
23519: LD_INT 1
23521: PPUSH
23522: LD_VAR 0 2
23526: PPUSH
23527: CALL_OW 12
23531: ARRAY
23532: ST_TO_ADDR
// if Crawls ( un ) then
23533: LD_VAR 0 3
23537: PPUSH
23538: CALL_OW 318
23542: IFFALSE 23553
// ComWalk ( un ) ;
23544: LD_VAR 0 3
23548: PPUSH
23549: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23553: LD_VAR 0 3
23557: PPUSH
23558: LD_INT 8
23560: PPUSH
23561: CALL_OW 336
// end ; 4 :
23565: GO 23671
23567: LD_INT 4
23569: DOUBLE
23570: EQUAL
23571: IFTRUE 23575
23573: GO 23649
23575: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23576: LD_ADDR_VAR 0 2
23580: PUSH
23581: LD_INT 22
23583: PUSH
23584: LD_OWVAR 2
23588: PUSH
23589: EMPTY
23590: LIST
23591: LIST
23592: PUSH
23593: LD_INT 30
23595: PUSH
23596: LD_INT 29
23598: PUSH
23599: EMPTY
23600: LIST
23601: LIST
23602: PUSH
23603: EMPTY
23604: LIST
23605: LIST
23606: PPUSH
23607: CALL_OW 69
23611: ST_TO_ADDR
// if not tmp then
23612: LD_VAR 0 2
23616: NOT
23617: IFFALSE 23621
// exit ;
23619: GO 23671
// CenterNowOnUnits ( tmp [ 1 ] ) ;
23621: LD_VAR 0 2
23625: PUSH
23626: LD_INT 1
23628: ARRAY
23629: PPUSH
23630: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
23634: LD_VAR 0 2
23638: PUSH
23639: LD_INT 1
23641: ARRAY
23642: PPUSH
23643: CALL_OW 65
// end ; 5 .. 7 :
23647: GO 23671
23649: LD_INT 5
23651: DOUBLE
23652: GREATEREQUAL
23653: IFFALSE 23661
23655: LD_INT 7
23657: DOUBLE
23658: LESSEQUAL
23659: IFTRUE 23663
23661: GO 23670
23663: POP
// StreamSibBomb ; end ;
23664: CALL 19908 0 0
23668: GO 23671
23670: POP
// end ;
23671: PPOPN 3
23673: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
23674: LD_EXP 21
23678: PUSH
23679: LD_EXP 71
23683: AND
23684: IFFALSE 23840
23686: GO 23688
23688: DISABLE
23689: LD_INT 0
23691: PPUSH
23692: PPUSH
23693: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23694: LD_ADDR_VAR 0 2
23698: PUSH
23699: LD_INT 81
23701: PUSH
23702: LD_OWVAR 2
23706: PUSH
23707: EMPTY
23708: LIST
23709: LIST
23710: PUSH
23711: LD_INT 2
23713: PUSH
23714: LD_INT 21
23716: PUSH
23717: LD_INT 1
23719: PUSH
23720: EMPTY
23721: LIST
23722: LIST
23723: PUSH
23724: LD_INT 21
23726: PUSH
23727: LD_INT 2
23729: PUSH
23730: EMPTY
23731: LIST
23732: LIST
23733: PUSH
23734: EMPTY
23735: LIST
23736: LIST
23737: LIST
23738: PUSH
23739: EMPTY
23740: LIST
23741: LIST
23742: PPUSH
23743: CALL_OW 69
23747: ST_TO_ADDR
// if not tmp then
23748: LD_VAR 0 2
23752: NOT
23753: IFFALSE 23757
// exit ;
23755: GO 23840
// p := 0 ;
23757: LD_ADDR_VAR 0 3
23761: PUSH
23762: LD_INT 0
23764: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23765: LD_INT 35
23767: PPUSH
23768: CALL_OW 67
// p := p + 1 ;
23772: LD_ADDR_VAR 0 3
23776: PUSH
23777: LD_VAR 0 3
23781: PUSH
23782: LD_INT 1
23784: PLUS
23785: ST_TO_ADDR
// for i in tmp do
23786: LD_ADDR_VAR 0 1
23790: PUSH
23791: LD_VAR 0 2
23795: PUSH
23796: FOR_IN
23797: IFFALSE 23828
// if GetLives ( i ) < 1000 then
23799: LD_VAR 0 1
23803: PPUSH
23804: CALL_OW 256
23808: PUSH
23809: LD_INT 1000
23811: LESS
23812: IFFALSE 23826
// SetLives ( i , 1000 ) ;
23814: LD_VAR 0 1
23818: PPUSH
23819: LD_INT 1000
23821: PPUSH
23822: CALL_OW 234
23826: GO 23796
23828: POP
23829: POP
// until p > 20 ;
23830: LD_VAR 0 3
23834: PUSH
23835: LD_INT 20
23837: GREATER
23838: IFFALSE 23765
// end ;
23840: PPOPN 3
23842: END
// every 0 0$1 trigger StreamModeActive and sTime do
23843: LD_EXP 21
23847: PUSH
23848: LD_EXP 72
23852: AND
23853: IFFALSE 23888
23855: GO 23857
23857: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
23858: LD_INT 28
23860: PPUSH
23861: LD_OWVAR 2
23865: PPUSH
23866: LD_INT 2
23868: PPUSH
23869: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
23873: LD_INT 30
23875: PPUSH
23876: LD_OWVAR 2
23880: PPUSH
23881: LD_INT 2
23883: PPUSH
23884: CALL_OW 322
// end ;
23888: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
23889: LD_EXP 21
23893: PUSH
23894: LD_EXP 73
23898: AND
23899: IFFALSE 24020
23901: GO 23903
23903: DISABLE
23904: LD_INT 0
23906: PPUSH
23907: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23908: LD_ADDR_VAR 0 2
23912: PUSH
23913: LD_INT 22
23915: PUSH
23916: LD_OWVAR 2
23920: PUSH
23921: EMPTY
23922: LIST
23923: LIST
23924: PUSH
23925: LD_INT 21
23927: PUSH
23928: LD_INT 1
23930: PUSH
23931: EMPTY
23932: LIST
23933: LIST
23934: PUSH
23935: LD_INT 3
23937: PUSH
23938: LD_INT 23
23940: PUSH
23941: LD_INT 0
23943: PUSH
23944: EMPTY
23945: LIST
23946: LIST
23947: PUSH
23948: EMPTY
23949: LIST
23950: LIST
23951: PUSH
23952: EMPTY
23953: LIST
23954: LIST
23955: LIST
23956: PPUSH
23957: CALL_OW 69
23961: ST_TO_ADDR
// if not tmp then
23962: LD_VAR 0 2
23966: NOT
23967: IFFALSE 23971
// exit ;
23969: GO 24020
// for i in tmp do
23971: LD_ADDR_VAR 0 1
23975: PUSH
23976: LD_VAR 0 2
23980: PUSH
23981: FOR_IN
23982: IFFALSE 24018
// begin if Crawls ( i ) then
23984: LD_VAR 0 1
23988: PPUSH
23989: CALL_OW 318
23993: IFFALSE 24004
// ComWalk ( i ) ;
23995: LD_VAR 0 1
23999: PPUSH
24000: CALL_OW 138
// SetClass ( i , 2 ) ;
24004: LD_VAR 0 1
24008: PPUSH
24009: LD_INT 2
24011: PPUSH
24012: CALL_OW 336
// end ;
24016: GO 23981
24018: POP
24019: POP
// end ;
24020: PPOPN 2
24022: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
24023: LD_EXP 21
24027: PUSH
24028: LD_EXP 74
24032: AND
24033: IFFALSE 24321
24035: GO 24037
24037: DISABLE
24038: LD_INT 0
24040: PPUSH
24041: PPUSH
24042: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
24043: LD_OWVAR 2
24047: PPUSH
24048: LD_INT 9
24050: PPUSH
24051: LD_INT 1
24053: PPUSH
24054: LD_INT 1
24056: PPUSH
24057: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
24061: LD_INT 9
24063: PPUSH
24064: LD_OWVAR 2
24068: PPUSH
24069: CALL_OW 343
// uc_side := 9 ;
24073: LD_ADDR_OWVAR 20
24077: PUSH
24078: LD_INT 9
24080: ST_TO_ADDR
// uc_nation := 2 ;
24081: LD_ADDR_OWVAR 21
24085: PUSH
24086: LD_INT 2
24088: ST_TO_ADDR
// hc_name := Dark Warrior ;
24089: LD_ADDR_OWVAR 26
24093: PUSH
24094: LD_STRING Dark Warrior
24096: ST_TO_ADDR
// hc_gallery :=  ;
24097: LD_ADDR_OWVAR 33
24101: PUSH
24102: LD_STRING 
24104: ST_TO_ADDR
// hc_noskilllimit := true ;
24105: LD_ADDR_OWVAR 76
24109: PUSH
24110: LD_INT 1
24112: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
24113: LD_ADDR_OWVAR 31
24117: PUSH
24118: LD_INT 30
24120: PUSH
24121: LD_INT 30
24123: PUSH
24124: LD_INT 30
24126: PUSH
24127: LD_INT 30
24129: PUSH
24130: EMPTY
24131: LIST
24132: LIST
24133: LIST
24134: LIST
24135: ST_TO_ADDR
// un := CreateHuman ;
24136: LD_ADDR_VAR 0 3
24140: PUSH
24141: CALL_OW 44
24145: ST_TO_ADDR
// hc_noskilllimit := false ;
24146: LD_ADDR_OWVAR 76
24150: PUSH
24151: LD_INT 0
24153: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24154: LD_VAR 0 3
24158: PPUSH
24159: LD_INT 1
24161: PPUSH
24162: CALL_OW 51
// ToLua ( playRanger() ) ;
24166: LD_STRING playRanger()
24168: PPUSH
24169: CALL_OW 559
// p := 0 ;
24173: LD_ADDR_VAR 0 2
24177: PUSH
24178: LD_INT 0
24180: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24181: LD_INT 35
24183: PPUSH
24184: CALL_OW 67
// p := p + 1 ;
24188: LD_ADDR_VAR 0 2
24192: PUSH
24193: LD_VAR 0 2
24197: PUSH
24198: LD_INT 1
24200: PLUS
24201: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
24202: LD_VAR 0 3
24206: PPUSH
24207: CALL_OW 256
24211: PUSH
24212: LD_INT 1000
24214: LESS
24215: IFFALSE 24229
// SetLives ( un , 1000 ) ;
24217: LD_VAR 0 3
24221: PPUSH
24222: LD_INT 1000
24224: PPUSH
24225: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
24229: LD_VAR 0 3
24233: PPUSH
24234: LD_INT 81
24236: PUSH
24237: LD_OWVAR 2
24241: PUSH
24242: EMPTY
24243: LIST
24244: LIST
24245: PUSH
24246: LD_INT 91
24248: PUSH
24249: LD_VAR 0 3
24253: PUSH
24254: LD_INT 30
24256: PUSH
24257: EMPTY
24258: LIST
24259: LIST
24260: LIST
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: PPUSH
24266: CALL_OW 69
24270: PPUSH
24271: LD_VAR 0 3
24275: PPUSH
24276: CALL_OW 74
24280: PPUSH
24281: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
24285: LD_VAR 0 2
24289: PUSH
24290: LD_INT 80
24292: GREATER
24293: PUSH
24294: LD_VAR 0 3
24298: PPUSH
24299: CALL_OW 301
24303: OR
24304: IFFALSE 24181
// if un then
24306: LD_VAR 0 3
24310: IFFALSE 24321
// RemoveUnit ( un ) ;
24312: LD_VAR 0 3
24316: PPUSH
24317: CALL_OW 64
// end ;
24321: PPOPN 3
24323: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
24324: LD_EXP 75
24328: IFFALSE 24444
24330: GO 24332
24332: DISABLE
24333: LD_INT 0
24335: PPUSH
24336: PPUSH
24337: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24338: LD_ADDR_VAR 0 2
24342: PUSH
24343: LD_INT 81
24345: PUSH
24346: LD_OWVAR 2
24350: PUSH
24351: EMPTY
24352: LIST
24353: LIST
24354: PUSH
24355: LD_INT 21
24357: PUSH
24358: LD_INT 1
24360: PUSH
24361: EMPTY
24362: LIST
24363: LIST
24364: PUSH
24365: EMPTY
24366: LIST
24367: LIST
24368: PPUSH
24369: CALL_OW 69
24373: ST_TO_ADDR
// ToLua ( playComputer() ) ;
24374: LD_STRING playComputer()
24376: PPUSH
24377: CALL_OW 559
// if not tmp then
24381: LD_VAR 0 2
24385: NOT
24386: IFFALSE 24390
// exit ;
24388: GO 24444
// for i in tmp do
24390: LD_ADDR_VAR 0 1
24394: PUSH
24395: LD_VAR 0 2
24399: PUSH
24400: FOR_IN
24401: IFFALSE 24442
// for j := 1 to 4 do
24403: LD_ADDR_VAR 0 3
24407: PUSH
24408: DOUBLE
24409: LD_INT 1
24411: DEC
24412: ST_TO_ADDR
24413: LD_INT 4
24415: PUSH
24416: FOR_TO
24417: IFFALSE 24438
// SetSkill ( i , j , 10 ) ;
24419: LD_VAR 0 1
24423: PPUSH
24424: LD_VAR 0 3
24428: PPUSH
24429: LD_INT 10
24431: PPUSH
24432: CALL_OW 237
24436: GO 24416
24438: POP
24439: POP
24440: GO 24400
24442: POP
24443: POP
// end ;
24444: PPOPN 3
24446: END
// every 0 0$1 trigger s30 do var i , tmp ;
24447: LD_EXP 76
24451: IFFALSE 24520
24453: GO 24455
24455: DISABLE
24456: LD_INT 0
24458: PPUSH
24459: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24460: LD_ADDR_VAR 0 2
24464: PUSH
24465: LD_INT 22
24467: PUSH
24468: LD_OWVAR 2
24472: PUSH
24473: EMPTY
24474: LIST
24475: LIST
24476: PPUSH
24477: CALL_OW 69
24481: ST_TO_ADDR
// if not tmp then
24482: LD_VAR 0 2
24486: NOT
24487: IFFALSE 24491
// exit ;
24489: GO 24520
// for i in tmp do
24491: LD_ADDR_VAR 0 1
24495: PUSH
24496: LD_VAR 0 2
24500: PUSH
24501: FOR_IN
24502: IFFALSE 24518
// SetLives ( i , 300 ) ;
24504: LD_VAR 0 1
24508: PPUSH
24509: LD_INT 300
24511: PPUSH
24512: CALL_OW 234
24516: GO 24501
24518: POP
24519: POP
// end ;
24520: PPOPN 2
24522: END
// every 0 0$1 trigger s60 do var i , tmp ;
24523: LD_EXP 77
24527: IFFALSE 24596
24529: GO 24531
24531: DISABLE
24532: LD_INT 0
24534: PPUSH
24535: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24536: LD_ADDR_VAR 0 2
24540: PUSH
24541: LD_INT 22
24543: PUSH
24544: LD_OWVAR 2
24548: PUSH
24549: EMPTY
24550: LIST
24551: LIST
24552: PPUSH
24553: CALL_OW 69
24557: ST_TO_ADDR
// if not tmp then
24558: LD_VAR 0 2
24562: NOT
24563: IFFALSE 24567
// exit ;
24565: GO 24596
// for i in tmp do
24567: LD_ADDR_VAR 0 1
24571: PUSH
24572: LD_VAR 0 2
24576: PUSH
24577: FOR_IN
24578: IFFALSE 24594
// SetLives ( i , 600 ) ;
24580: LD_VAR 0 1
24584: PPUSH
24585: LD_INT 600
24587: PPUSH
24588: CALL_OW 234
24592: GO 24577
24594: POP
24595: POP
// end ;
24596: PPOPN 2
24598: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
24599: LD_INT 0
24601: PPUSH
// case cmd of 301 :
24602: LD_VAR 0 1
24606: PUSH
24607: LD_INT 301
24609: DOUBLE
24610: EQUAL
24611: IFTRUE 24615
24613: GO 24647
24615: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
24616: LD_VAR 0 6
24620: PPUSH
24621: LD_VAR 0 7
24625: PPUSH
24626: LD_VAR 0 8
24630: PPUSH
24631: LD_VAR 0 4
24635: PPUSH
24636: LD_VAR 0 5
24640: PPUSH
24641: CALL 25848 0 5
24645: GO 24768
24647: LD_INT 302
24649: DOUBLE
24650: EQUAL
24651: IFTRUE 24655
24653: GO 24692
24655: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
24656: LD_VAR 0 6
24660: PPUSH
24661: LD_VAR 0 7
24665: PPUSH
24666: LD_VAR 0 8
24670: PPUSH
24671: LD_VAR 0 9
24675: PPUSH
24676: LD_VAR 0 4
24680: PPUSH
24681: LD_VAR 0 5
24685: PPUSH
24686: CALL 25939 0 6
24690: GO 24768
24692: LD_INT 303
24694: DOUBLE
24695: EQUAL
24696: IFTRUE 24700
24698: GO 24737
24700: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
24701: LD_VAR 0 6
24705: PPUSH
24706: LD_VAR 0 7
24710: PPUSH
24711: LD_VAR 0 8
24715: PPUSH
24716: LD_VAR 0 9
24720: PPUSH
24721: LD_VAR 0 4
24725: PPUSH
24726: LD_VAR 0 5
24730: PPUSH
24731: CALL 24773 0 6
24735: GO 24768
24737: LD_INT 304
24739: DOUBLE
24740: EQUAL
24741: IFTRUE 24745
24743: GO 24767
24745: POP
// hHackTeleport ( unit , x , y ) ; end ;
24746: LD_VAR 0 2
24750: PPUSH
24751: LD_VAR 0 4
24755: PPUSH
24756: LD_VAR 0 5
24760: PPUSH
24761: CALL 26532 0 3
24765: GO 24768
24767: POP
// end ;
24768: LD_VAR 0 12
24772: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
24773: LD_INT 0
24775: PPUSH
24776: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
24777: LD_VAR 0 1
24781: PUSH
24782: LD_INT 1
24784: LESS
24785: PUSH
24786: LD_VAR 0 1
24790: PUSH
24791: LD_INT 3
24793: GREATER
24794: OR
24795: PUSH
24796: LD_VAR 0 5
24800: PPUSH
24801: LD_VAR 0 6
24805: PPUSH
24806: CALL_OW 428
24810: OR
24811: IFFALSE 24815
// exit ;
24813: GO 25535
// uc_side := your_side ;
24815: LD_ADDR_OWVAR 20
24819: PUSH
24820: LD_OWVAR 2
24824: ST_TO_ADDR
// uc_nation := nation ;
24825: LD_ADDR_OWVAR 21
24829: PUSH
24830: LD_VAR 0 1
24834: ST_TO_ADDR
// bc_level = 1 ;
24835: LD_ADDR_OWVAR 43
24839: PUSH
24840: LD_INT 1
24842: ST_TO_ADDR
// case btype of 1 :
24843: LD_VAR 0 2
24847: PUSH
24848: LD_INT 1
24850: DOUBLE
24851: EQUAL
24852: IFTRUE 24856
24854: GO 24867
24856: POP
// bc_type := b_depot ; 2 :
24857: LD_ADDR_OWVAR 42
24861: PUSH
24862: LD_INT 0
24864: ST_TO_ADDR
24865: GO 25479
24867: LD_INT 2
24869: DOUBLE
24870: EQUAL
24871: IFTRUE 24875
24873: GO 24886
24875: POP
// bc_type := b_warehouse ; 3 :
24876: LD_ADDR_OWVAR 42
24880: PUSH
24881: LD_INT 1
24883: ST_TO_ADDR
24884: GO 25479
24886: LD_INT 3
24888: DOUBLE
24889: EQUAL
24890: IFTRUE 24894
24892: GO 24905
24894: POP
// bc_type := b_lab ; 4 .. 9 :
24895: LD_ADDR_OWVAR 42
24899: PUSH
24900: LD_INT 6
24902: ST_TO_ADDR
24903: GO 25479
24905: LD_INT 4
24907: DOUBLE
24908: GREATEREQUAL
24909: IFFALSE 24917
24911: LD_INT 9
24913: DOUBLE
24914: LESSEQUAL
24915: IFTRUE 24919
24917: GO 24971
24919: POP
// begin bc_type := b_lab_half ;
24920: LD_ADDR_OWVAR 42
24924: PUSH
24925: LD_INT 7
24927: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
24928: LD_ADDR_OWVAR 44
24932: PUSH
24933: LD_INT 10
24935: PUSH
24936: LD_INT 11
24938: PUSH
24939: LD_INT 12
24941: PUSH
24942: LD_INT 15
24944: PUSH
24945: LD_INT 14
24947: PUSH
24948: LD_INT 13
24950: PUSH
24951: EMPTY
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: PUSH
24959: LD_VAR 0 2
24963: PUSH
24964: LD_INT 3
24966: MINUS
24967: ARRAY
24968: ST_TO_ADDR
// end ; 10 .. 13 :
24969: GO 25479
24971: LD_INT 10
24973: DOUBLE
24974: GREATEREQUAL
24975: IFFALSE 24983
24977: LD_INT 13
24979: DOUBLE
24980: LESSEQUAL
24981: IFTRUE 24985
24983: GO 25062
24985: POP
// begin bc_type := b_lab_full ;
24986: LD_ADDR_OWVAR 42
24990: PUSH
24991: LD_INT 8
24993: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
24994: LD_ADDR_OWVAR 44
24998: PUSH
24999: LD_INT 10
25001: PUSH
25002: LD_INT 12
25004: PUSH
25005: LD_INT 14
25007: PUSH
25008: LD_INT 13
25010: PUSH
25011: EMPTY
25012: LIST
25013: LIST
25014: LIST
25015: LIST
25016: PUSH
25017: LD_VAR 0 2
25021: PUSH
25022: LD_INT 9
25024: MINUS
25025: ARRAY
25026: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
25027: LD_ADDR_OWVAR 45
25031: PUSH
25032: LD_INT 11
25034: PUSH
25035: LD_INT 15
25037: PUSH
25038: LD_INT 12
25040: PUSH
25041: LD_INT 15
25043: PUSH
25044: EMPTY
25045: LIST
25046: LIST
25047: LIST
25048: LIST
25049: PUSH
25050: LD_VAR 0 2
25054: PUSH
25055: LD_INT 9
25057: MINUS
25058: ARRAY
25059: ST_TO_ADDR
// end ; 14 :
25060: GO 25479
25062: LD_INT 14
25064: DOUBLE
25065: EQUAL
25066: IFTRUE 25070
25068: GO 25081
25070: POP
// bc_type := b_workshop ; 15 :
25071: LD_ADDR_OWVAR 42
25075: PUSH
25076: LD_INT 2
25078: ST_TO_ADDR
25079: GO 25479
25081: LD_INT 15
25083: DOUBLE
25084: EQUAL
25085: IFTRUE 25089
25087: GO 25100
25089: POP
// bc_type := b_factory ; 16 :
25090: LD_ADDR_OWVAR 42
25094: PUSH
25095: LD_INT 3
25097: ST_TO_ADDR
25098: GO 25479
25100: LD_INT 16
25102: DOUBLE
25103: EQUAL
25104: IFTRUE 25108
25106: GO 25119
25108: POP
// bc_type := b_ext_gun ; 17 :
25109: LD_ADDR_OWVAR 42
25113: PUSH
25114: LD_INT 17
25116: ST_TO_ADDR
25117: GO 25479
25119: LD_INT 17
25121: DOUBLE
25122: EQUAL
25123: IFTRUE 25127
25125: GO 25155
25127: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
25128: LD_ADDR_OWVAR 42
25132: PUSH
25133: LD_INT 19
25135: PUSH
25136: LD_INT 23
25138: PUSH
25139: LD_INT 19
25141: PUSH
25142: EMPTY
25143: LIST
25144: LIST
25145: LIST
25146: PUSH
25147: LD_VAR 0 1
25151: ARRAY
25152: ST_TO_ADDR
25153: GO 25479
25155: LD_INT 18
25157: DOUBLE
25158: EQUAL
25159: IFTRUE 25163
25161: GO 25174
25163: POP
// bc_type := b_ext_radar ; 19 :
25164: LD_ADDR_OWVAR 42
25168: PUSH
25169: LD_INT 20
25171: ST_TO_ADDR
25172: GO 25479
25174: LD_INT 19
25176: DOUBLE
25177: EQUAL
25178: IFTRUE 25182
25180: GO 25193
25182: POP
// bc_type := b_ext_radio ; 20 :
25183: LD_ADDR_OWVAR 42
25187: PUSH
25188: LD_INT 22
25190: ST_TO_ADDR
25191: GO 25479
25193: LD_INT 20
25195: DOUBLE
25196: EQUAL
25197: IFTRUE 25201
25199: GO 25212
25201: POP
// bc_type := b_ext_siberium ; 21 :
25202: LD_ADDR_OWVAR 42
25206: PUSH
25207: LD_INT 21
25209: ST_TO_ADDR
25210: GO 25479
25212: LD_INT 21
25214: DOUBLE
25215: EQUAL
25216: IFTRUE 25220
25218: GO 25231
25220: POP
// bc_type := b_ext_computer ; 22 :
25221: LD_ADDR_OWVAR 42
25225: PUSH
25226: LD_INT 24
25228: ST_TO_ADDR
25229: GO 25479
25231: LD_INT 22
25233: DOUBLE
25234: EQUAL
25235: IFTRUE 25239
25237: GO 25250
25239: POP
// bc_type := b_ext_track ; 23 :
25240: LD_ADDR_OWVAR 42
25244: PUSH
25245: LD_INT 16
25247: ST_TO_ADDR
25248: GO 25479
25250: LD_INT 23
25252: DOUBLE
25253: EQUAL
25254: IFTRUE 25258
25256: GO 25269
25258: POP
// bc_type := b_ext_laser ; 24 :
25259: LD_ADDR_OWVAR 42
25263: PUSH
25264: LD_INT 25
25266: ST_TO_ADDR
25267: GO 25479
25269: LD_INT 24
25271: DOUBLE
25272: EQUAL
25273: IFTRUE 25277
25275: GO 25288
25277: POP
// bc_type := b_control_tower ; 25 :
25278: LD_ADDR_OWVAR 42
25282: PUSH
25283: LD_INT 36
25285: ST_TO_ADDR
25286: GO 25479
25288: LD_INT 25
25290: DOUBLE
25291: EQUAL
25292: IFTRUE 25296
25294: GO 25307
25296: POP
// bc_type := b_breastwork ; 26 :
25297: LD_ADDR_OWVAR 42
25301: PUSH
25302: LD_INT 31
25304: ST_TO_ADDR
25305: GO 25479
25307: LD_INT 26
25309: DOUBLE
25310: EQUAL
25311: IFTRUE 25315
25313: GO 25326
25315: POP
// bc_type := b_bunker ; 27 :
25316: LD_ADDR_OWVAR 42
25320: PUSH
25321: LD_INT 32
25323: ST_TO_ADDR
25324: GO 25479
25326: LD_INT 27
25328: DOUBLE
25329: EQUAL
25330: IFTRUE 25334
25332: GO 25345
25334: POP
// bc_type := b_turret ; 28 :
25335: LD_ADDR_OWVAR 42
25339: PUSH
25340: LD_INT 33
25342: ST_TO_ADDR
25343: GO 25479
25345: LD_INT 28
25347: DOUBLE
25348: EQUAL
25349: IFTRUE 25353
25351: GO 25364
25353: POP
// bc_type := b_armoury ; 29 :
25354: LD_ADDR_OWVAR 42
25358: PUSH
25359: LD_INT 4
25361: ST_TO_ADDR
25362: GO 25479
25364: LD_INT 29
25366: DOUBLE
25367: EQUAL
25368: IFTRUE 25372
25370: GO 25383
25372: POP
// bc_type := b_barracks ; 30 :
25373: LD_ADDR_OWVAR 42
25377: PUSH
25378: LD_INT 5
25380: ST_TO_ADDR
25381: GO 25479
25383: LD_INT 30
25385: DOUBLE
25386: EQUAL
25387: IFTRUE 25391
25389: GO 25402
25391: POP
// bc_type := b_solar_power ; 31 :
25392: LD_ADDR_OWVAR 42
25396: PUSH
25397: LD_INT 27
25399: ST_TO_ADDR
25400: GO 25479
25402: LD_INT 31
25404: DOUBLE
25405: EQUAL
25406: IFTRUE 25410
25408: GO 25421
25410: POP
// bc_type := b_oil_power ; 32 :
25411: LD_ADDR_OWVAR 42
25415: PUSH
25416: LD_INT 26
25418: ST_TO_ADDR
25419: GO 25479
25421: LD_INT 32
25423: DOUBLE
25424: EQUAL
25425: IFTRUE 25429
25427: GO 25440
25429: POP
// bc_type := b_siberite_power ; 33 :
25430: LD_ADDR_OWVAR 42
25434: PUSH
25435: LD_INT 28
25437: ST_TO_ADDR
25438: GO 25479
25440: LD_INT 33
25442: DOUBLE
25443: EQUAL
25444: IFTRUE 25448
25446: GO 25459
25448: POP
// bc_type := b_oil_mine ; 34 :
25449: LD_ADDR_OWVAR 42
25453: PUSH
25454: LD_INT 29
25456: ST_TO_ADDR
25457: GO 25479
25459: LD_INT 34
25461: DOUBLE
25462: EQUAL
25463: IFTRUE 25467
25465: GO 25478
25467: POP
// bc_type := b_siberite_mine ; end ;
25468: LD_ADDR_OWVAR 42
25472: PUSH
25473: LD_INT 30
25475: ST_TO_ADDR
25476: GO 25479
25478: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
25479: LD_ADDR_VAR 0 8
25483: PUSH
25484: LD_VAR 0 5
25488: PPUSH
25489: LD_VAR 0 6
25493: PPUSH
25494: LD_VAR 0 3
25498: PPUSH
25499: CALL_OW 47
25503: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
25504: LD_OWVAR 42
25508: PUSH
25509: LD_INT 32
25511: PUSH
25512: LD_INT 33
25514: PUSH
25515: EMPTY
25516: LIST
25517: LIST
25518: IN
25519: IFFALSE 25535
// PlaceWeaponTurret ( b , weapon ) ;
25521: LD_VAR 0 8
25525: PPUSH
25526: LD_VAR 0 4
25530: PPUSH
25531: CALL_OW 431
// end ;
25535: LD_VAR 0 7
25539: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
25540: LD_INT 0
25542: PPUSH
25543: PPUSH
25544: PPUSH
25545: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25546: LD_ADDR_VAR 0 4
25550: PUSH
25551: LD_INT 22
25553: PUSH
25554: LD_OWVAR 2
25558: PUSH
25559: EMPTY
25560: LIST
25561: LIST
25562: PUSH
25563: LD_INT 2
25565: PUSH
25566: LD_INT 30
25568: PUSH
25569: LD_INT 0
25571: PUSH
25572: EMPTY
25573: LIST
25574: LIST
25575: PUSH
25576: LD_INT 30
25578: PUSH
25579: LD_INT 1
25581: PUSH
25582: EMPTY
25583: LIST
25584: LIST
25585: PUSH
25586: EMPTY
25587: LIST
25588: LIST
25589: LIST
25590: PUSH
25591: EMPTY
25592: LIST
25593: LIST
25594: PPUSH
25595: CALL_OW 69
25599: ST_TO_ADDR
// if not tmp then
25600: LD_VAR 0 4
25604: NOT
25605: IFFALSE 25609
// exit ;
25607: GO 25668
// for i in tmp do
25609: LD_ADDR_VAR 0 2
25613: PUSH
25614: LD_VAR 0 4
25618: PUSH
25619: FOR_IN
25620: IFFALSE 25666
// for j = 1 to 3 do
25622: LD_ADDR_VAR 0 3
25626: PUSH
25627: DOUBLE
25628: LD_INT 1
25630: DEC
25631: ST_TO_ADDR
25632: LD_INT 3
25634: PUSH
25635: FOR_TO
25636: IFFALSE 25662
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
25638: LD_VAR 0 2
25642: PPUSH
25643: CALL_OW 274
25647: PPUSH
25648: LD_VAR 0 3
25652: PPUSH
25653: LD_INT 99999
25655: PPUSH
25656: CALL_OW 277
25660: GO 25635
25662: POP
25663: POP
25664: GO 25619
25666: POP
25667: POP
// end ;
25668: LD_VAR 0 1
25672: RET
// export function hHackSetLevel10 ; var i , j ; begin
25673: LD_INT 0
25675: PPUSH
25676: PPUSH
25677: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25678: LD_ADDR_VAR 0 2
25682: PUSH
25683: LD_INT 21
25685: PUSH
25686: LD_INT 1
25688: PUSH
25689: EMPTY
25690: LIST
25691: LIST
25692: PPUSH
25693: CALL_OW 69
25697: PUSH
25698: FOR_IN
25699: IFFALSE 25751
// if IsSelected ( i ) then
25701: LD_VAR 0 2
25705: PPUSH
25706: CALL_OW 306
25710: IFFALSE 25749
// begin for j := 1 to 4 do
25712: LD_ADDR_VAR 0 3
25716: PUSH
25717: DOUBLE
25718: LD_INT 1
25720: DEC
25721: ST_TO_ADDR
25722: LD_INT 4
25724: PUSH
25725: FOR_TO
25726: IFFALSE 25747
// SetSkill ( i , j , 10 ) ;
25728: LD_VAR 0 2
25732: PPUSH
25733: LD_VAR 0 3
25737: PPUSH
25738: LD_INT 10
25740: PPUSH
25741: CALL_OW 237
25745: GO 25725
25747: POP
25748: POP
// end ;
25749: GO 25698
25751: POP
25752: POP
// end ;
25753: LD_VAR 0 1
25757: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
25758: LD_INT 0
25760: PPUSH
25761: PPUSH
25762: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
25763: LD_ADDR_VAR 0 2
25767: PUSH
25768: LD_INT 22
25770: PUSH
25771: LD_OWVAR 2
25775: PUSH
25776: EMPTY
25777: LIST
25778: LIST
25779: PUSH
25780: LD_INT 21
25782: PUSH
25783: LD_INT 1
25785: PUSH
25786: EMPTY
25787: LIST
25788: LIST
25789: PUSH
25790: EMPTY
25791: LIST
25792: LIST
25793: PPUSH
25794: CALL_OW 69
25798: PUSH
25799: FOR_IN
25800: IFFALSE 25841
// begin for j := 1 to 4 do
25802: LD_ADDR_VAR 0 3
25806: PUSH
25807: DOUBLE
25808: LD_INT 1
25810: DEC
25811: ST_TO_ADDR
25812: LD_INT 4
25814: PUSH
25815: FOR_TO
25816: IFFALSE 25837
// SetSkill ( i , j , 10 ) ;
25818: LD_VAR 0 2
25822: PPUSH
25823: LD_VAR 0 3
25827: PPUSH
25828: LD_INT 10
25830: PPUSH
25831: CALL_OW 237
25835: GO 25815
25837: POP
25838: POP
// end ;
25839: GO 25799
25841: POP
25842: POP
// end ;
25843: LD_VAR 0 1
25847: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
25848: LD_INT 0
25850: PPUSH
// uc_side := your_side ;
25851: LD_ADDR_OWVAR 20
25855: PUSH
25856: LD_OWVAR 2
25860: ST_TO_ADDR
// uc_nation := nation ;
25861: LD_ADDR_OWVAR 21
25865: PUSH
25866: LD_VAR 0 1
25870: ST_TO_ADDR
// InitHc ;
25871: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
25875: LD_INT 0
25877: PPUSH
25878: LD_VAR 0 2
25882: PPUSH
25883: LD_VAR 0 3
25887: PPUSH
25888: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
25892: LD_VAR 0 4
25896: PPUSH
25897: LD_VAR 0 5
25901: PPUSH
25902: CALL_OW 428
25906: PUSH
25907: LD_INT 0
25909: EQUAL
25910: IFFALSE 25934
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
25912: CALL_OW 44
25916: PPUSH
25917: LD_VAR 0 4
25921: PPUSH
25922: LD_VAR 0 5
25926: PPUSH
25927: LD_INT 1
25929: PPUSH
25930: CALL_OW 48
// end ;
25934: LD_VAR 0 6
25938: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
25939: LD_INT 0
25941: PPUSH
25942: PPUSH
// uc_side := your_side ;
25943: LD_ADDR_OWVAR 20
25947: PUSH
25948: LD_OWVAR 2
25952: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
25953: LD_VAR 0 1
25957: PUSH
25958: LD_INT 1
25960: PUSH
25961: LD_INT 2
25963: PUSH
25964: LD_INT 3
25966: PUSH
25967: LD_INT 4
25969: PUSH
25970: LD_INT 5
25972: PUSH
25973: EMPTY
25974: LIST
25975: LIST
25976: LIST
25977: LIST
25978: LIST
25979: IN
25980: IFFALSE 25992
// uc_nation := nation_american else
25982: LD_ADDR_OWVAR 21
25986: PUSH
25987: LD_INT 1
25989: ST_TO_ADDR
25990: GO 26035
// if chassis in [ 11 , 12 , 13 , 14 ] then
25992: LD_VAR 0 1
25996: PUSH
25997: LD_INT 11
25999: PUSH
26000: LD_INT 12
26002: PUSH
26003: LD_INT 13
26005: PUSH
26006: LD_INT 14
26008: PUSH
26009: EMPTY
26010: LIST
26011: LIST
26012: LIST
26013: LIST
26014: IN
26015: IFFALSE 26027
// uc_nation := nation_arabian else
26017: LD_ADDR_OWVAR 21
26021: PUSH
26022: LD_INT 2
26024: ST_TO_ADDR
26025: GO 26035
// uc_nation := nation_russian ;
26027: LD_ADDR_OWVAR 21
26031: PUSH
26032: LD_INT 3
26034: ST_TO_ADDR
// vc_chassis := chassis ;
26035: LD_ADDR_OWVAR 37
26039: PUSH
26040: LD_VAR 0 1
26044: ST_TO_ADDR
// vc_engine := engine ;
26045: LD_ADDR_OWVAR 39
26049: PUSH
26050: LD_VAR 0 2
26054: ST_TO_ADDR
// vc_control := control ;
26055: LD_ADDR_OWVAR 38
26059: PUSH
26060: LD_VAR 0 3
26064: ST_TO_ADDR
// vc_weapon := weapon ;
26065: LD_ADDR_OWVAR 40
26069: PUSH
26070: LD_VAR 0 4
26074: ST_TO_ADDR
// un := CreateVehicle ;
26075: LD_ADDR_VAR 0 8
26079: PUSH
26080: CALL_OW 45
26084: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
26085: LD_VAR 0 8
26089: PPUSH
26090: LD_INT 0
26092: PPUSH
26093: LD_INT 5
26095: PPUSH
26096: CALL_OW 12
26100: PPUSH
26101: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
26105: LD_VAR 0 8
26109: PPUSH
26110: LD_VAR 0 5
26114: PPUSH
26115: LD_VAR 0 6
26119: PPUSH
26120: LD_INT 1
26122: PPUSH
26123: CALL_OW 48
// end ;
26127: LD_VAR 0 7
26131: RET
// export hInvincible ; every 1 do
26132: GO 26134
26134: DISABLE
// hInvincible := [ ] ;
26135: LD_ADDR_EXP 78
26139: PUSH
26140: EMPTY
26141: ST_TO_ADDR
26142: END
// every 10 do var i ;
26143: GO 26145
26145: DISABLE
26146: LD_INT 0
26148: PPUSH
// begin enable ;
26149: ENABLE
// if not hInvincible then
26150: LD_EXP 78
26154: NOT
26155: IFFALSE 26159
// exit ;
26157: GO 26203
// for i in hInvincible do
26159: LD_ADDR_VAR 0 1
26163: PUSH
26164: LD_EXP 78
26168: PUSH
26169: FOR_IN
26170: IFFALSE 26201
// if GetLives ( i ) < 1000 then
26172: LD_VAR 0 1
26176: PPUSH
26177: CALL_OW 256
26181: PUSH
26182: LD_INT 1000
26184: LESS
26185: IFFALSE 26199
// SetLives ( i , 1000 ) ;
26187: LD_VAR 0 1
26191: PPUSH
26192: LD_INT 1000
26194: PPUSH
26195: CALL_OW 234
26199: GO 26169
26201: POP
26202: POP
// end ;
26203: PPOPN 1
26205: END
// export function hHackInvincible ; var i ; begin
26206: LD_INT 0
26208: PPUSH
26209: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
26210: LD_ADDR_VAR 0 2
26214: PUSH
26215: LD_INT 2
26217: PUSH
26218: LD_INT 21
26220: PUSH
26221: LD_INT 1
26223: PUSH
26224: EMPTY
26225: LIST
26226: LIST
26227: PUSH
26228: LD_INT 21
26230: PUSH
26231: LD_INT 2
26233: PUSH
26234: EMPTY
26235: LIST
26236: LIST
26237: PUSH
26238: EMPTY
26239: LIST
26240: LIST
26241: LIST
26242: PPUSH
26243: CALL_OW 69
26247: PUSH
26248: FOR_IN
26249: IFFALSE 26310
// if IsSelected ( i ) then
26251: LD_VAR 0 2
26255: PPUSH
26256: CALL_OW 306
26260: IFFALSE 26308
// begin if i in hInvincible then
26262: LD_VAR 0 2
26266: PUSH
26267: LD_EXP 78
26271: IN
26272: IFFALSE 26292
// hInvincible := hInvincible diff i else
26274: LD_ADDR_EXP 78
26278: PUSH
26279: LD_EXP 78
26283: PUSH
26284: LD_VAR 0 2
26288: DIFF
26289: ST_TO_ADDR
26290: GO 26308
// hInvincible := hInvincible union i ;
26292: LD_ADDR_EXP 78
26296: PUSH
26297: LD_EXP 78
26301: PUSH
26302: LD_VAR 0 2
26306: UNION
26307: ST_TO_ADDR
// end ;
26308: GO 26248
26310: POP
26311: POP
// end ;
26312: LD_VAR 0 1
26316: RET
// export function hHackInvisible ; var i , j ; begin
26317: LD_INT 0
26319: PPUSH
26320: PPUSH
26321: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
26322: LD_ADDR_VAR 0 2
26326: PUSH
26327: LD_INT 21
26329: PUSH
26330: LD_INT 1
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: PPUSH
26337: CALL_OW 69
26341: PUSH
26342: FOR_IN
26343: IFFALSE 26367
// if IsSelected ( i ) then
26345: LD_VAR 0 2
26349: PPUSH
26350: CALL_OW 306
26354: IFFALSE 26365
// ComForceInvisible ( i ) ;
26356: LD_VAR 0 2
26360: PPUSH
26361: CALL_OW 496
26365: GO 26342
26367: POP
26368: POP
// end ;
26369: LD_VAR 0 1
26373: RET
// export function hHackChangeYourSide ; begin
26374: LD_INT 0
26376: PPUSH
// if your_side = 8 then
26377: LD_OWVAR 2
26381: PUSH
26382: LD_INT 8
26384: EQUAL
26385: IFFALSE 26397
// your_side := 0 else
26387: LD_ADDR_OWVAR 2
26391: PUSH
26392: LD_INT 0
26394: ST_TO_ADDR
26395: GO 26411
// your_side := your_side + 1 ;
26397: LD_ADDR_OWVAR 2
26401: PUSH
26402: LD_OWVAR 2
26406: PUSH
26407: LD_INT 1
26409: PLUS
26410: ST_TO_ADDR
// end ;
26411: LD_VAR 0 1
26415: RET
// export function hHackChangeUnitSide ; var i , j ; begin
26416: LD_INT 0
26418: PPUSH
26419: PPUSH
26420: PPUSH
// for i in all_units do
26421: LD_ADDR_VAR 0 2
26425: PUSH
26426: LD_OWVAR 3
26430: PUSH
26431: FOR_IN
26432: IFFALSE 26510
// if IsSelected ( i ) then
26434: LD_VAR 0 2
26438: PPUSH
26439: CALL_OW 306
26443: IFFALSE 26508
// begin j := GetSide ( i ) ;
26445: LD_ADDR_VAR 0 3
26449: PUSH
26450: LD_VAR 0 2
26454: PPUSH
26455: CALL_OW 255
26459: ST_TO_ADDR
// if j = 8 then
26460: LD_VAR 0 3
26464: PUSH
26465: LD_INT 8
26467: EQUAL
26468: IFFALSE 26480
// j := 0 else
26470: LD_ADDR_VAR 0 3
26474: PUSH
26475: LD_INT 0
26477: ST_TO_ADDR
26478: GO 26494
// j := j + 1 ;
26480: LD_ADDR_VAR 0 3
26484: PUSH
26485: LD_VAR 0 3
26489: PUSH
26490: LD_INT 1
26492: PLUS
26493: ST_TO_ADDR
// SetSide ( i , j ) ;
26494: LD_VAR 0 2
26498: PPUSH
26499: LD_VAR 0 3
26503: PPUSH
26504: CALL_OW 235
// end ;
26508: GO 26431
26510: POP
26511: POP
// end ;
26512: LD_VAR 0 1
26516: RET
// export function hHackFog ; begin
26517: LD_INT 0
26519: PPUSH
// FogOff ( true ) ;
26520: LD_INT 1
26522: PPUSH
26523: CALL_OW 344
// end ;
26527: LD_VAR 0 1
26531: RET
// export function hHackTeleport ( unit , x , y ) ; begin
26532: LD_INT 0
26534: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
26535: LD_VAR 0 1
26539: PPUSH
26540: LD_VAR 0 2
26544: PPUSH
26545: LD_VAR 0 3
26549: PPUSH
26550: LD_INT 1
26552: PPUSH
26553: LD_INT 1
26555: PPUSH
26556: CALL_OW 483
// CenterOnXY ( x , y ) ;
26560: LD_VAR 0 2
26564: PPUSH
26565: LD_VAR 0 3
26569: PPUSH
26570: CALL_OW 84
// end ;
26574: LD_VAR 0 4
26578: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
26579: LD_INT 0
26581: PPUSH
26582: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
26583: LD_VAR 0 1
26587: NOT
26588: PUSH
26589: LD_VAR 0 2
26593: PPUSH
26594: LD_VAR 0 3
26598: PPUSH
26599: CALL_OW 488
26603: NOT
26604: OR
26605: PUSH
26606: LD_VAR 0 1
26610: PPUSH
26611: CALL_OW 266
26615: PUSH
26616: LD_INT 3
26618: NONEQUAL
26619: PUSH
26620: LD_VAR 0 1
26624: PPUSH
26625: CALL_OW 247
26629: PUSH
26630: LD_INT 1
26632: EQUAL
26633: NOT
26634: AND
26635: OR
26636: IFFALSE 26640
// exit ;
26638: GO 26789
// if GetType ( factory ) = unit_human then
26640: LD_VAR 0 1
26644: PPUSH
26645: CALL_OW 247
26649: PUSH
26650: LD_INT 1
26652: EQUAL
26653: IFFALSE 26670
// factory := IsInUnit ( factory ) ;
26655: LD_ADDR_VAR 0 1
26659: PUSH
26660: LD_VAR 0 1
26664: PPUSH
26665: CALL_OW 310
26669: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
26670: LD_VAR 0 1
26674: PPUSH
26675: CALL_OW 266
26679: PUSH
26680: LD_INT 3
26682: NONEQUAL
26683: IFFALSE 26687
// exit ;
26685: GO 26789
// if HexInfo ( x , y ) = factory then
26687: LD_VAR 0 2
26691: PPUSH
26692: LD_VAR 0 3
26696: PPUSH
26697: CALL_OW 428
26701: PUSH
26702: LD_VAR 0 1
26706: EQUAL
26707: IFFALSE 26734
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
26709: LD_ADDR_EXP 79
26713: PUSH
26714: LD_EXP 79
26718: PPUSH
26719: LD_VAR 0 1
26723: PPUSH
26724: LD_INT 0
26726: PPUSH
26727: CALL_OW 1
26731: ST_TO_ADDR
26732: GO 26785
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
26734: LD_ADDR_EXP 79
26738: PUSH
26739: LD_EXP 79
26743: PPUSH
26744: LD_VAR 0 1
26748: PPUSH
26749: LD_VAR 0 1
26753: PPUSH
26754: CALL_OW 255
26758: PUSH
26759: LD_VAR 0 1
26763: PUSH
26764: LD_VAR 0 2
26768: PUSH
26769: LD_VAR 0 3
26773: PUSH
26774: EMPTY
26775: LIST
26776: LIST
26777: LIST
26778: LIST
26779: PPUSH
26780: CALL_OW 1
26784: ST_TO_ADDR
// UpdateFactoryWaypoints ;
26785: CALL 26794 0 0
// end ;
26789: LD_VAR 0 4
26793: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
26794: LD_INT 0
26796: PPUSH
26797: PPUSH
26798: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
26799: LD_STRING resetFactoryWaypoint();
26801: PPUSH
26802: CALL_OW 559
// if factoryWaypoints then
26806: LD_EXP 79
26810: IFFALSE 26936
// begin list := PrepareArray ( factoryWaypoints ) ;
26812: LD_ADDR_VAR 0 3
26816: PUSH
26817: LD_EXP 79
26821: PPUSH
26822: CALL 73386 0 1
26826: ST_TO_ADDR
// for i := 1 to list do
26827: LD_ADDR_VAR 0 2
26831: PUSH
26832: DOUBLE
26833: LD_INT 1
26835: DEC
26836: ST_TO_ADDR
26837: LD_VAR 0 3
26841: PUSH
26842: FOR_TO
26843: IFFALSE 26934
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
26845: LD_STRING setFactoryWaypointXY(
26847: PUSH
26848: LD_VAR 0 3
26852: PUSH
26853: LD_VAR 0 2
26857: ARRAY
26858: PUSH
26859: LD_INT 1
26861: ARRAY
26862: STR
26863: PUSH
26864: LD_STRING ,
26866: STR
26867: PUSH
26868: LD_VAR 0 3
26872: PUSH
26873: LD_VAR 0 2
26877: ARRAY
26878: PUSH
26879: LD_INT 2
26881: ARRAY
26882: STR
26883: PUSH
26884: LD_STRING ,
26886: STR
26887: PUSH
26888: LD_VAR 0 3
26892: PUSH
26893: LD_VAR 0 2
26897: ARRAY
26898: PUSH
26899: LD_INT 3
26901: ARRAY
26902: STR
26903: PUSH
26904: LD_STRING ,
26906: STR
26907: PUSH
26908: LD_VAR 0 3
26912: PUSH
26913: LD_VAR 0 2
26917: ARRAY
26918: PUSH
26919: LD_INT 4
26921: ARRAY
26922: STR
26923: PUSH
26924: LD_STRING )
26926: STR
26927: PPUSH
26928: CALL_OW 559
26932: GO 26842
26934: POP
26935: POP
// end ; end ;
26936: LD_VAR 0 1
26940: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
26941: LD_INT 0
26943: PPUSH
// if HexInfo ( x , y ) = warehouse then
26944: LD_VAR 0 2
26948: PPUSH
26949: LD_VAR 0 3
26953: PPUSH
26954: CALL_OW 428
26958: PUSH
26959: LD_VAR 0 1
26963: EQUAL
26964: IFFALSE 26991
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
26966: LD_ADDR_EXP 80
26970: PUSH
26971: LD_EXP 80
26975: PPUSH
26976: LD_VAR 0 1
26980: PPUSH
26981: LD_INT 0
26983: PPUSH
26984: CALL_OW 1
26988: ST_TO_ADDR
26989: GO 27042
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
26991: LD_ADDR_EXP 80
26995: PUSH
26996: LD_EXP 80
27000: PPUSH
27001: LD_VAR 0 1
27005: PPUSH
27006: LD_VAR 0 1
27010: PPUSH
27011: CALL_OW 255
27015: PUSH
27016: LD_VAR 0 1
27020: PUSH
27021: LD_VAR 0 2
27025: PUSH
27026: LD_VAR 0 3
27030: PUSH
27031: EMPTY
27032: LIST
27033: LIST
27034: LIST
27035: LIST
27036: PPUSH
27037: CALL_OW 1
27041: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
27042: CALL 27051 0 0
// end ;
27046: LD_VAR 0 4
27050: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
27051: LD_INT 0
27053: PPUSH
27054: PPUSH
27055: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
27056: LD_STRING resetWarehouseGatheringPoints();
27058: PPUSH
27059: CALL_OW 559
// if warehouseGatheringPoints then
27063: LD_EXP 80
27067: IFFALSE 27193
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
27069: LD_ADDR_VAR 0 3
27073: PUSH
27074: LD_EXP 80
27078: PPUSH
27079: CALL 73386 0 1
27083: ST_TO_ADDR
// for i := 1 to list do
27084: LD_ADDR_VAR 0 2
27088: PUSH
27089: DOUBLE
27090: LD_INT 1
27092: DEC
27093: ST_TO_ADDR
27094: LD_VAR 0 3
27098: PUSH
27099: FOR_TO
27100: IFFALSE 27191
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
27102: LD_STRING setWarehouseGatheringPointXY(
27104: PUSH
27105: LD_VAR 0 3
27109: PUSH
27110: LD_VAR 0 2
27114: ARRAY
27115: PUSH
27116: LD_INT 1
27118: ARRAY
27119: STR
27120: PUSH
27121: LD_STRING ,
27123: STR
27124: PUSH
27125: LD_VAR 0 3
27129: PUSH
27130: LD_VAR 0 2
27134: ARRAY
27135: PUSH
27136: LD_INT 2
27138: ARRAY
27139: STR
27140: PUSH
27141: LD_STRING ,
27143: STR
27144: PUSH
27145: LD_VAR 0 3
27149: PUSH
27150: LD_VAR 0 2
27154: ARRAY
27155: PUSH
27156: LD_INT 3
27158: ARRAY
27159: STR
27160: PUSH
27161: LD_STRING ,
27163: STR
27164: PUSH
27165: LD_VAR 0 3
27169: PUSH
27170: LD_VAR 0 2
27174: ARRAY
27175: PUSH
27176: LD_INT 4
27178: ARRAY
27179: STR
27180: PUSH
27181: LD_STRING )
27183: STR
27184: PPUSH
27185: CALL_OW 559
27189: GO 27099
27191: POP
27192: POP
// end ; end ;
27193: LD_VAR 0 1
27197: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
27198: LD_EXP 80
27202: IFFALSE 27887
27204: GO 27206
27206: DISABLE
27207: LD_INT 0
27209: PPUSH
27210: PPUSH
27211: PPUSH
27212: PPUSH
27213: PPUSH
27214: PPUSH
27215: PPUSH
27216: PPUSH
27217: PPUSH
// begin enable ;
27218: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
27219: LD_ADDR_VAR 0 3
27223: PUSH
27224: LD_EXP 80
27228: PPUSH
27229: CALL 73386 0 1
27233: ST_TO_ADDR
// if not list then
27234: LD_VAR 0 3
27238: NOT
27239: IFFALSE 27243
// exit ;
27241: GO 27887
// for i := 1 to list do
27243: LD_ADDR_VAR 0 1
27247: PUSH
27248: DOUBLE
27249: LD_INT 1
27251: DEC
27252: ST_TO_ADDR
27253: LD_VAR 0 3
27257: PUSH
27258: FOR_TO
27259: IFFALSE 27885
// begin depot := list [ i ] [ 2 ] ;
27261: LD_ADDR_VAR 0 8
27265: PUSH
27266: LD_VAR 0 3
27270: PUSH
27271: LD_VAR 0 1
27275: ARRAY
27276: PUSH
27277: LD_INT 2
27279: ARRAY
27280: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
27281: LD_ADDR_VAR 0 5
27285: PUSH
27286: LD_VAR 0 3
27290: PUSH
27291: LD_VAR 0 1
27295: ARRAY
27296: PUSH
27297: LD_INT 1
27299: ARRAY
27300: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
27301: LD_VAR 0 8
27305: PPUSH
27306: CALL_OW 301
27310: PUSH
27311: LD_VAR 0 5
27315: PUSH
27316: LD_VAR 0 8
27320: PPUSH
27321: CALL_OW 255
27325: NONEQUAL
27326: OR
27327: IFFALSE 27356
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
27329: LD_ADDR_EXP 80
27333: PUSH
27334: LD_EXP 80
27338: PPUSH
27339: LD_VAR 0 8
27343: PPUSH
27344: LD_INT 0
27346: PPUSH
27347: CALL_OW 1
27351: ST_TO_ADDR
// exit ;
27352: POP
27353: POP
27354: GO 27887
// end ; x := list [ i ] [ 3 ] ;
27356: LD_ADDR_VAR 0 6
27360: PUSH
27361: LD_VAR 0 3
27365: PUSH
27366: LD_VAR 0 1
27370: ARRAY
27371: PUSH
27372: LD_INT 3
27374: ARRAY
27375: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
27376: LD_ADDR_VAR 0 7
27380: PUSH
27381: LD_VAR 0 3
27385: PUSH
27386: LD_VAR 0 1
27390: ARRAY
27391: PUSH
27392: LD_INT 4
27394: ARRAY
27395: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
27396: LD_ADDR_VAR 0 9
27400: PUSH
27401: LD_VAR 0 6
27405: PPUSH
27406: LD_VAR 0 7
27410: PPUSH
27411: LD_INT 16
27413: PPUSH
27414: CALL 71974 0 3
27418: ST_TO_ADDR
// if not cratesNearbyPoint then
27419: LD_VAR 0 9
27423: NOT
27424: IFFALSE 27430
// exit ;
27426: POP
27427: POP
27428: GO 27887
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
27430: LD_ADDR_VAR 0 4
27434: PUSH
27435: LD_INT 22
27437: PUSH
27438: LD_VAR 0 5
27442: PUSH
27443: EMPTY
27444: LIST
27445: LIST
27446: PUSH
27447: LD_INT 3
27449: PUSH
27450: LD_INT 60
27452: PUSH
27453: EMPTY
27454: LIST
27455: PUSH
27456: EMPTY
27457: LIST
27458: LIST
27459: PUSH
27460: LD_INT 91
27462: PUSH
27463: LD_VAR 0 8
27467: PUSH
27468: LD_INT 6
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: LIST
27475: PUSH
27476: LD_INT 2
27478: PUSH
27479: LD_INT 25
27481: PUSH
27482: LD_INT 2
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: PUSH
27489: LD_INT 25
27491: PUSH
27492: LD_INT 16
27494: PUSH
27495: EMPTY
27496: LIST
27497: LIST
27498: PUSH
27499: EMPTY
27500: LIST
27501: LIST
27502: LIST
27503: PUSH
27504: EMPTY
27505: LIST
27506: LIST
27507: LIST
27508: LIST
27509: PPUSH
27510: CALL_OW 69
27514: PUSH
27515: LD_VAR 0 8
27519: PPUSH
27520: CALL_OW 313
27524: PPUSH
27525: LD_INT 3
27527: PUSH
27528: LD_INT 60
27530: PUSH
27531: EMPTY
27532: LIST
27533: PUSH
27534: EMPTY
27535: LIST
27536: LIST
27537: PUSH
27538: LD_INT 2
27540: PUSH
27541: LD_INT 25
27543: PUSH
27544: LD_INT 2
27546: PUSH
27547: EMPTY
27548: LIST
27549: LIST
27550: PUSH
27551: LD_INT 25
27553: PUSH
27554: LD_INT 16
27556: PUSH
27557: EMPTY
27558: LIST
27559: LIST
27560: PUSH
27561: EMPTY
27562: LIST
27563: LIST
27564: LIST
27565: PUSH
27566: EMPTY
27567: LIST
27568: LIST
27569: PPUSH
27570: CALL_OW 72
27574: UNION
27575: ST_TO_ADDR
// if tmp then
27576: LD_VAR 0 4
27580: IFFALSE 27660
// begin tmp := ShrinkArray ( tmp , 3 ) ;
27582: LD_ADDR_VAR 0 4
27586: PUSH
27587: LD_VAR 0 4
27591: PPUSH
27592: LD_INT 3
27594: PPUSH
27595: CALL 69943 0 2
27599: ST_TO_ADDR
// for j in tmp do
27600: LD_ADDR_VAR 0 2
27604: PUSH
27605: LD_VAR 0 4
27609: PUSH
27610: FOR_IN
27611: IFFALSE 27654
// begin if IsInUnit ( j ) then
27613: LD_VAR 0 2
27617: PPUSH
27618: CALL_OW 310
27622: IFFALSE 27633
// ComExit ( j ) ;
27624: LD_VAR 0 2
27628: PPUSH
27629: CALL 70026 0 1
// AddComCollect ( j , x , y ) ;
27633: LD_VAR 0 2
27637: PPUSH
27638: LD_VAR 0 6
27642: PPUSH
27643: LD_VAR 0 7
27647: PPUSH
27648: CALL_OW 177
// end ;
27652: GO 27610
27654: POP
27655: POP
// exit ;
27656: POP
27657: POP
27658: GO 27887
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
27660: LD_ADDR_VAR 0 4
27664: PUSH
27665: LD_INT 22
27667: PUSH
27668: LD_VAR 0 5
27672: PUSH
27673: EMPTY
27674: LIST
27675: LIST
27676: PUSH
27677: LD_INT 91
27679: PUSH
27680: LD_VAR 0 8
27684: PUSH
27685: LD_INT 8
27687: PUSH
27688: EMPTY
27689: LIST
27690: LIST
27691: LIST
27692: PUSH
27693: LD_INT 2
27695: PUSH
27696: LD_INT 34
27698: PUSH
27699: LD_INT 12
27701: PUSH
27702: EMPTY
27703: LIST
27704: LIST
27705: PUSH
27706: LD_INT 34
27708: PUSH
27709: LD_INT 51
27711: PUSH
27712: EMPTY
27713: LIST
27714: LIST
27715: PUSH
27716: LD_INT 34
27718: PUSH
27719: LD_INT 32
27721: PUSH
27722: EMPTY
27723: LIST
27724: LIST
27725: PUSH
27726: LD_INT 34
27728: PUSH
27729: LD_INT 89
27731: PUSH
27732: EMPTY
27733: LIST
27734: LIST
27735: PUSH
27736: EMPTY
27737: LIST
27738: LIST
27739: LIST
27740: LIST
27741: LIST
27742: PUSH
27743: EMPTY
27744: LIST
27745: LIST
27746: LIST
27747: PPUSH
27748: CALL_OW 69
27752: ST_TO_ADDR
// if tmp then
27753: LD_VAR 0 4
27757: IFFALSE 27883
// begin for j in tmp do
27759: LD_ADDR_VAR 0 2
27763: PUSH
27764: LD_VAR 0 4
27768: PUSH
27769: FOR_IN
27770: IFFALSE 27881
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
27772: LD_VAR 0 2
27776: PPUSH
27777: CALL_OW 262
27781: PUSH
27782: LD_INT 3
27784: EQUAL
27785: PUSH
27786: LD_VAR 0 2
27790: PPUSH
27791: CALL_OW 261
27795: PUSH
27796: LD_INT 20
27798: GREATER
27799: OR
27800: PUSH
27801: LD_VAR 0 2
27805: PPUSH
27806: CALL_OW 314
27810: NOT
27811: AND
27812: PUSH
27813: LD_VAR 0 2
27817: PPUSH
27818: CALL_OW 263
27822: PUSH
27823: LD_INT 1
27825: NONEQUAL
27826: PUSH
27827: LD_VAR 0 2
27831: PPUSH
27832: CALL_OW 311
27836: OR
27837: AND
27838: IFFALSE 27879
// begin ComCollect ( j , x , y ) ;
27840: LD_VAR 0 2
27844: PPUSH
27845: LD_VAR 0 6
27849: PPUSH
27850: LD_VAR 0 7
27854: PPUSH
27855: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
27859: LD_VAR 0 2
27863: PPUSH
27864: LD_VAR 0 8
27868: PPUSH
27869: CALL_OW 172
// exit ;
27873: POP
27874: POP
27875: POP
27876: POP
27877: GO 27887
// end ;
27879: GO 27769
27881: POP
27882: POP
// end ; end ;
27883: GO 27258
27885: POP
27886: POP
// end ; end_of_file
27887: PPOPN 9
27889: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
27890: LD_INT 0
27892: PPUSH
27893: PPUSH
27894: PPUSH
27895: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
27896: LD_VAR 0 1
27900: PPUSH
27901: CALL_OW 264
27905: PUSH
27906: LD_INT 91
27908: EQUAL
27909: IFFALSE 27981
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
27911: LD_INT 68
27913: PPUSH
27914: LD_VAR 0 1
27918: PPUSH
27919: CALL_OW 255
27923: PPUSH
27924: CALL_OW 321
27928: PUSH
27929: LD_INT 2
27931: EQUAL
27932: IFFALSE 27944
// eff := 70 else
27934: LD_ADDR_VAR 0 4
27938: PUSH
27939: LD_INT 70
27941: ST_TO_ADDR
27942: GO 27952
// eff := 30 ;
27944: LD_ADDR_VAR 0 4
27948: PUSH
27949: LD_INT 30
27951: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
27952: LD_VAR 0 1
27956: PPUSH
27957: CALL_OW 250
27961: PPUSH
27962: LD_VAR 0 1
27966: PPUSH
27967: CALL_OW 251
27971: PPUSH
27972: LD_VAR 0 4
27976: PPUSH
27977: CALL_OW 495
// end ; end ;
27981: LD_VAR 0 2
27985: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
27986: LD_INT 0
27988: PPUSH
// end ;
27989: LD_VAR 0 4
27993: RET
// export function SOS_Command ( cmd ) ; begin
27994: LD_INT 0
27996: PPUSH
// end ;
27997: LD_VAR 0 2
28001: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
28002: LD_INT 0
28004: PPUSH
// end ;
28005: LD_VAR 0 6
28009: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
28010: LD_INT 0
28012: PPUSH
28013: PPUSH
// if not vehicle or not factory then
28014: LD_VAR 0 1
28018: NOT
28019: PUSH
28020: LD_VAR 0 2
28024: NOT
28025: OR
28026: IFFALSE 28030
// exit ;
28028: GO 28261
// if factoryWaypoints >= factory then
28030: LD_EXP 79
28034: PUSH
28035: LD_VAR 0 2
28039: GREATEREQUAL
28040: IFFALSE 28261
// if factoryWaypoints [ factory ] then
28042: LD_EXP 79
28046: PUSH
28047: LD_VAR 0 2
28051: ARRAY
28052: IFFALSE 28261
// begin if GetControl ( vehicle ) = control_manual then
28054: LD_VAR 0 1
28058: PPUSH
28059: CALL_OW 263
28063: PUSH
28064: LD_INT 1
28066: EQUAL
28067: IFFALSE 28148
// begin driver := IsDrivenBy ( vehicle ) ;
28069: LD_ADDR_VAR 0 4
28073: PUSH
28074: LD_VAR 0 1
28078: PPUSH
28079: CALL_OW 311
28083: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28084: LD_VAR 0 4
28088: PPUSH
28089: LD_EXP 79
28093: PUSH
28094: LD_VAR 0 2
28098: ARRAY
28099: PUSH
28100: LD_INT 3
28102: ARRAY
28103: PPUSH
28104: LD_EXP 79
28108: PUSH
28109: LD_VAR 0 2
28113: ARRAY
28114: PUSH
28115: LD_INT 4
28117: ARRAY
28118: PPUSH
28119: CALL_OW 171
// AddComExitVehicle ( driver ) ;
28123: LD_VAR 0 4
28127: PPUSH
28128: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
28132: LD_VAR 0 4
28136: PPUSH
28137: LD_VAR 0 2
28141: PPUSH
28142: CALL_OW 180
// end else
28146: GO 28261
// if GetControl ( vehicle ) = control_remote then
28148: LD_VAR 0 1
28152: PPUSH
28153: CALL_OW 263
28157: PUSH
28158: LD_INT 2
28160: EQUAL
28161: IFFALSE 28222
// begin wait ( 0 0$2 ) ;
28163: LD_INT 70
28165: PPUSH
28166: CALL_OW 67
// if Connect ( vehicle ) then
28170: LD_VAR 0 1
28174: PPUSH
28175: CALL 40285 0 1
28179: IFFALSE 28220
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28181: LD_VAR 0 1
28185: PPUSH
28186: LD_EXP 79
28190: PUSH
28191: LD_VAR 0 2
28195: ARRAY
28196: PUSH
28197: LD_INT 3
28199: ARRAY
28200: PPUSH
28201: LD_EXP 79
28205: PUSH
28206: LD_VAR 0 2
28210: ARRAY
28211: PUSH
28212: LD_INT 4
28214: ARRAY
28215: PPUSH
28216: CALL_OW 171
// end else
28220: GO 28261
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
28222: LD_VAR 0 1
28226: PPUSH
28227: LD_EXP 79
28231: PUSH
28232: LD_VAR 0 2
28236: ARRAY
28237: PUSH
28238: LD_INT 3
28240: ARRAY
28241: PPUSH
28242: LD_EXP 79
28246: PUSH
28247: LD_VAR 0 2
28251: ARRAY
28252: PUSH
28253: LD_INT 4
28255: ARRAY
28256: PPUSH
28257: CALL_OW 171
// end ; end ;
28261: LD_VAR 0 3
28265: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
28266: LD_INT 0
28268: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
28269: LD_VAR 0 1
28273: PUSH
28274: LD_INT 250
28276: EQUAL
28277: PUSH
28278: LD_VAR 0 2
28282: PPUSH
28283: CALL_OW 264
28287: PUSH
28288: LD_INT 81
28290: EQUAL
28291: AND
28292: IFFALSE 28313
// MinerPlaceMine ( unit , x , y ) ;
28294: LD_VAR 0 2
28298: PPUSH
28299: LD_VAR 0 4
28303: PPUSH
28304: LD_VAR 0 5
28308: PPUSH
28309: CALL 30698 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
28313: LD_VAR 0 1
28317: PUSH
28318: LD_INT 251
28320: EQUAL
28321: PUSH
28322: LD_VAR 0 2
28326: PPUSH
28327: CALL_OW 264
28331: PUSH
28332: LD_INT 81
28334: EQUAL
28335: AND
28336: IFFALSE 28357
// MinerDetonateMine ( unit , x , y ) ;
28338: LD_VAR 0 2
28342: PPUSH
28343: LD_VAR 0 4
28347: PPUSH
28348: LD_VAR 0 5
28352: PPUSH
28353: CALL 30973 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
28357: LD_VAR 0 1
28361: PUSH
28362: LD_INT 252
28364: EQUAL
28365: PUSH
28366: LD_VAR 0 2
28370: PPUSH
28371: CALL_OW 264
28375: PUSH
28376: LD_INT 81
28378: EQUAL
28379: AND
28380: IFFALSE 28401
// MinerCreateMinefield ( unit , x , y ) ;
28382: LD_VAR 0 2
28386: PPUSH
28387: LD_VAR 0 4
28391: PPUSH
28392: LD_VAR 0 5
28396: PPUSH
28397: CALL 31390 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
28401: LD_VAR 0 1
28405: PUSH
28406: LD_INT 253
28408: EQUAL
28409: PUSH
28410: LD_VAR 0 2
28414: PPUSH
28415: CALL_OW 257
28419: PUSH
28420: LD_INT 5
28422: EQUAL
28423: AND
28424: IFFALSE 28445
// ComBinocular ( unit , x , y ) ;
28426: LD_VAR 0 2
28430: PPUSH
28431: LD_VAR 0 4
28435: PPUSH
28436: LD_VAR 0 5
28440: PPUSH
28441: CALL 31759 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
28445: LD_VAR 0 1
28449: PUSH
28450: LD_INT 254
28452: EQUAL
28453: PUSH
28454: LD_VAR 0 2
28458: PPUSH
28459: CALL_OW 264
28463: PUSH
28464: LD_INT 99
28466: EQUAL
28467: AND
28468: PUSH
28469: LD_VAR 0 3
28473: PPUSH
28474: CALL_OW 263
28478: PUSH
28479: LD_INT 3
28481: EQUAL
28482: AND
28483: IFFALSE 28499
// HackDestroyVehicle ( unit , selectedUnit ) ;
28485: LD_VAR 0 2
28489: PPUSH
28490: LD_VAR 0 3
28494: PPUSH
28495: CALL 30062 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
28499: LD_VAR 0 1
28503: PUSH
28504: LD_INT 255
28506: EQUAL
28507: PUSH
28508: LD_VAR 0 2
28512: PPUSH
28513: CALL_OW 264
28517: PUSH
28518: LD_INT 14
28520: PUSH
28521: LD_INT 53
28523: PUSH
28524: EMPTY
28525: LIST
28526: LIST
28527: IN
28528: AND
28529: PUSH
28530: LD_VAR 0 4
28534: PPUSH
28535: LD_VAR 0 5
28539: PPUSH
28540: CALL_OW 488
28544: AND
28545: IFFALSE 28569
// CutTreeXYR ( unit , x , y , 12 ) ;
28547: LD_VAR 0 2
28551: PPUSH
28552: LD_VAR 0 4
28556: PPUSH
28557: LD_VAR 0 5
28561: PPUSH
28562: LD_INT 12
28564: PPUSH
28565: CALL 28632 0 4
// if cmd = 256 then
28569: LD_VAR 0 1
28573: PUSH
28574: LD_INT 256
28576: EQUAL
28577: IFFALSE 28598
// SetFactoryWaypoint ( unit , x , y ) ;
28579: LD_VAR 0 2
28583: PPUSH
28584: LD_VAR 0 4
28588: PPUSH
28589: LD_VAR 0 5
28593: PPUSH
28594: CALL 26579 0 3
// if cmd = 257 then
28598: LD_VAR 0 1
28602: PUSH
28603: LD_INT 257
28605: EQUAL
28606: IFFALSE 28627
// SetWarehouseGatheringPoint ( unit , x , y ) ;
28608: LD_VAR 0 2
28612: PPUSH
28613: LD_VAR 0 4
28617: PPUSH
28618: LD_VAR 0 5
28622: PPUSH
28623: CALL 26941 0 3
// end ;
28627: LD_VAR 0 6
28631: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
28632: LD_INT 0
28634: PPUSH
28635: PPUSH
28636: PPUSH
28637: PPUSH
28638: PPUSH
28639: PPUSH
28640: PPUSH
28641: PPUSH
28642: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
28643: LD_VAR 0 1
28647: NOT
28648: PUSH
28649: LD_VAR 0 2
28653: PPUSH
28654: LD_VAR 0 3
28658: PPUSH
28659: CALL_OW 488
28663: NOT
28664: OR
28665: PUSH
28666: LD_VAR 0 4
28670: NOT
28671: OR
28672: IFFALSE 28676
// exit ;
28674: GO 29016
// list := [ ] ;
28676: LD_ADDR_VAR 0 13
28680: PUSH
28681: EMPTY
28682: ST_TO_ADDR
// if x - r < 0 then
28683: LD_VAR 0 2
28687: PUSH
28688: LD_VAR 0 4
28692: MINUS
28693: PUSH
28694: LD_INT 0
28696: LESS
28697: IFFALSE 28709
// min_x := 0 else
28699: LD_ADDR_VAR 0 7
28703: PUSH
28704: LD_INT 0
28706: ST_TO_ADDR
28707: GO 28725
// min_x := x - r ;
28709: LD_ADDR_VAR 0 7
28713: PUSH
28714: LD_VAR 0 2
28718: PUSH
28719: LD_VAR 0 4
28723: MINUS
28724: ST_TO_ADDR
// if y - r < 0 then
28725: LD_VAR 0 3
28729: PUSH
28730: LD_VAR 0 4
28734: MINUS
28735: PUSH
28736: LD_INT 0
28738: LESS
28739: IFFALSE 28751
// min_y := 0 else
28741: LD_ADDR_VAR 0 8
28745: PUSH
28746: LD_INT 0
28748: ST_TO_ADDR
28749: GO 28767
// min_y := y - r ;
28751: LD_ADDR_VAR 0 8
28755: PUSH
28756: LD_VAR 0 3
28760: PUSH
28761: LD_VAR 0 4
28765: MINUS
28766: ST_TO_ADDR
// max_x := x + r ;
28767: LD_ADDR_VAR 0 9
28771: PUSH
28772: LD_VAR 0 2
28776: PUSH
28777: LD_VAR 0 4
28781: PLUS
28782: ST_TO_ADDR
// max_y := y + r ;
28783: LD_ADDR_VAR 0 10
28787: PUSH
28788: LD_VAR 0 3
28792: PUSH
28793: LD_VAR 0 4
28797: PLUS
28798: ST_TO_ADDR
// for _x = min_x to max_x do
28799: LD_ADDR_VAR 0 11
28803: PUSH
28804: DOUBLE
28805: LD_VAR 0 7
28809: DEC
28810: ST_TO_ADDR
28811: LD_VAR 0 9
28815: PUSH
28816: FOR_TO
28817: IFFALSE 28934
// for _y = min_y to max_y do
28819: LD_ADDR_VAR 0 12
28823: PUSH
28824: DOUBLE
28825: LD_VAR 0 8
28829: DEC
28830: ST_TO_ADDR
28831: LD_VAR 0 10
28835: PUSH
28836: FOR_TO
28837: IFFALSE 28930
// begin if not ValidHex ( _x , _y ) then
28839: LD_VAR 0 11
28843: PPUSH
28844: LD_VAR 0 12
28848: PPUSH
28849: CALL_OW 488
28853: NOT
28854: IFFALSE 28858
// continue ;
28856: GO 28836
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28858: LD_VAR 0 11
28862: PPUSH
28863: LD_VAR 0 12
28867: PPUSH
28868: CALL_OW 351
28872: PUSH
28873: LD_VAR 0 11
28877: PPUSH
28878: LD_VAR 0 12
28882: PPUSH
28883: CALL_OW 554
28887: AND
28888: IFFALSE 28928
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28890: LD_ADDR_VAR 0 13
28894: PUSH
28895: LD_VAR 0 13
28899: PPUSH
28900: LD_VAR 0 13
28904: PUSH
28905: LD_INT 1
28907: PLUS
28908: PPUSH
28909: LD_VAR 0 11
28913: PUSH
28914: LD_VAR 0 12
28918: PUSH
28919: EMPTY
28920: LIST
28921: LIST
28922: PPUSH
28923: CALL_OW 2
28927: ST_TO_ADDR
// end ;
28928: GO 28836
28930: POP
28931: POP
28932: GO 28816
28934: POP
28935: POP
// if not list then
28936: LD_VAR 0 13
28940: NOT
28941: IFFALSE 28945
// exit ;
28943: GO 29016
// for i in list do
28945: LD_ADDR_VAR 0 6
28949: PUSH
28950: LD_VAR 0 13
28954: PUSH
28955: FOR_IN
28956: IFFALSE 29014
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
28958: LD_VAR 0 1
28962: PPUSH
28963: LD_STRING M
28965: PUSH
28966: LD_VAR 0 6
28970: PUSH
28971: LD_INT 1
28973: ARRAY
28974: PUSH
28975: LD_VAR 0 6
28979: PUSH
28980: LD_INT 2
28982: ARRAY
28983: PUSH
28984: LD_INT 0
28986: PUSH
28987: LD_INT 0
28989: PUSH
28990: LD_INT 0
28992: PUSH
28993: LD_INT 0
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: LIST
29000: LIST
29001: LIST
29002: LIST
29003: LIST
29004: PUSH
29005: EMPTY
29006: LIST
29007: PPUSH
29008: CALL_OW 447
29012: GO 28955
29014: POP
29015: POP
// end ;
29016: LD_VAR 0 5
29020: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
29021: LD_EXP 82
29025: NOT
29026: IFFALSE 29076
29028: GO 29030
29030: DISABLE
// begin initHack := true ;
29031: LD_ADDR_EXP 82
29035: PUSH
29036: LD_INT 1
29038: ST_TO_ADDR
// hackTanks := [ ] ;
29039: LD_ADDR_EXP 83
29043: PUSH
29044: EMPTY
29045: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
29046: LD_ADDR_EXP 84
29050: PUSH
29051: EMPTY
29052: ST_TO_ADDR
// hackLimit := 3 ;
29053: LD_ADDR_EXP 85
29057: PUSH
29058: LD_INT 3
29060: ST_TO_ADDR
// hackDist := 12 ;
29061: LD_ADDR_EXP 86
29065: PUSH
29066: LD_INT 12
29068: ST_TO_ADDR
// hackCounter := [ ] ;
29069: LD_ADDR_EXP 87
29073: PUSH
29074: EMPTY
29075: ST_TO_ADDR
// end ;
29076: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
29077: LD_EXP 82
29081: PUSH
29082: LD_INT 34
29084: PUSH
29085: LD_INT 99
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: PPUSH
29092: CALL_OW 69
29096: AND
29097: IFFALSE 29350
29099: GO 29101
29101: DISABLE
29102: LD_INT 0
29104: PPUSH
29105: PPUSH
// begin enable ;
29106: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
29107: LD_ADDR_VAR 0 1
29111: PUSH
29112: LD_INT 34
29114: PUSH
29115: LD_INT 99
29117: PUSH
29118: EMPTY
29119: LIST
29120: LIST
29121: PPUSH
29122: CALL_OW 69
29126: PUSH
29127: FOR_IN
29128: IFFALSE 29348
// begin if not i in hackTanks then
29130: LD_VAR 0 1
29134: PUSH
29135: LD_EXP 83
29139: IN
29140: NOT
29141: IFFALSE 29224
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
29143: LD_ADDR_EXP 83
29147: PUSH
29148: LD_EXP 83
29152: PPUSH
29153: LD_EXP 83
29157: PUSH
29158: LD_INT 1
29160: PLUS
29161: PPUSH
29162: LD_VAR 0 1
29166: PPUSH
29167: CALL_OW 1
29171: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
29172: LD_ADDR_EXP 84
29176: PUSH
29177: LD_EXP 84
29181: PPUSH
29182: LD_EXP 84
29186: PUSH
29187: LD_INT 1
29189: PLUS
29190: PPUSH
29191: EMPTY
29192: PPUSH
29193: CALL_OW 1
29197: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
29198: LD_ADDR_EXP 87
29202: PUSH
29203: LD_EXP 87
29207: PPUSH
29208: LD_EXP 87
29212: PUSH
29213: LD_INT 1
29215: PLUS
29216: PPUSH
29217: EMPTY
29218: PPUSH
29219: CALL_OW 1
29223: ST_TO_ADDR
// end ; if not IsOk ( i ) then
29224: LD_VAR 0 1
29228: PPUSH
29229: CALL_OW 302
29233: NOT
29234: IFFALSE 29247
// begin HackUnlinkAll ( i ) ;
29236: LD_VAR 0 1
29240: PPUSH
29241: CALL 29353 0 1
// continue ;
29245: GO 29127
// end ; HackCheckCapturedStatus ( i ) ;
29247: LD_VAR 0 1
29251: PPUSH
29252: CALL 29796 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
29256: LD_ADDR_VAR 0 2
29260: PUSH
29261: LD_INT 81
29263: PUSH
29264: LD_VAR 0 1
29268: PPUSH
29269: CALL_OW 255
29273: PUSH
29274: EMPTY
29275: LIST
29276: LIST
29277: PUSH
29278: LD_INT 33
29280: PUSH
29281: LD_INT 3
29283: PUSH
29284: EMPTY
29285: LIST
29286: LIST
29287: PUSH
29288: LD_INT 91
29290: PUSH
29291: LD_VAR 0 1
29295: PUSH
29296: LD_EXP 86
29300: PUSH
29301: EMPTY
29302: LIST
29303: LIST
29304: LIST
29305: PUSH
29306: LD_INT 50
29308: PUSH
29309: EMPTY
29310: LIST
29311: PUSH
29312: EMPTY
29313: LIST
29314: LIST
29315: LIST
29316: LIST
29317: PPUSH
29318: CALL_OW 69
29322: ST_TO_ADDR
// if not tmp then
29323: LD_VAR 0 2
29327: NOT
29328: IFFALSE 29332
// continue ;
29330: GO 29127
// HackLink ( i , tmp ) ;
29332: LD_VAR 0 1
29336: PPUSH
29337: LD_VAR 0 2
29341: PPUSH
29342: CALL 29489 0 2
// end ;
29346: GO 29127
29348: POP
29349: POP
// end ;
29350: PPOPN 2
29352: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
29353: LD_INT 0
29355: PPUSH
29356: PPUSH
29357: PPUSH
// if not hack in hackTanks then
29358: LD_VAR 0 1
29362: PUSH
29363: LD_EXP 83
29367: IN
29368: NOT
29369: IFFALSE 29373
// exit ;
29371: GO 29484
// index := GetElementIndex ( hackTanks , hack ) ;
29373: LD_ADDR_VAR 0 4
29377: PUSH
29378: LD_EXP 83
29382: PPUSH
29383: LD_VAR 0 1
29387: PPUSH
29388: CALL 37101 0 2
29392: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
29393: LD_EXP 84
29397: PUSH
29398: LD_VAR 0 4
29402: ARRAY
29403: IFFALSE 29484
// begin for i in hackTanksCaptured [ index ] do
29405: LD_ADDR_VAR 0 3
29409: PUSH
29410: LD_EXP 84
29414: PUSH
29415: LD_VAR 0 4
29419: ARRAY
29420: PUSH
29421: FOR_IN
29422: IFFALSE 29448
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
29424: LD_VAR 0 3
29428: PUSH
29429: LD_INT 1
29431: ARRAY
29432: PPUSH
29433: LD_VAR 0 3
29437: PUSH
29438: LD_INT 2
29440: ARRAY
29441: PPUSH
29442: CALL_OW 235
29446: GO 29421
29448: POP
29449: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
29450: LD_ADDR_EXP 84
29454: PUSH
29455: LD_EXP 84
29459: PPUSH
29460: LD_VAR 0 4
29464: PPUSH
29465: EMPTY
29466: PPUSH
29467: CALL_OW 1
29471: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
29472: LD_VAR 0 1
29476: PPUSH
29477: LD_INT 0
29479: PPUSH
29480: CALL_OW 505
// end ; end ;
29484: LD_VAR 0 2
29488: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
29489: LD_INT 0
29491: PPUSH
29492: PPUSH
29493: PPUSH
// if not hack in hackTanks or not vehicles then
29494: LD_VAR 0 1
29498: PUSH
29499: LD_EXP 83
29503: IN
29504: NOT
29505: PUSH
29506: LD_VAR 0 2
29510: NOT
29511: OR
29512: IFFALSE 29516
// exit ;
29514: GO 29791
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
29516: LD_ADDR_VAR 0 2
29520: PUSH
29521: LD_VAR 0 1
29525: PPUSH
29526: LD_VAR 0 2
29530: PPUSH
29531: LD_INT 1
29533: PPUSH
29534: LD_INT 1
29536: PPUSH
29537: CALL 37751 0 4
29541: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
29542: LD_ADDR_VAR 0 5
29546: PUSH
29547: LD_EXP 83
29551: PPUSH
29552: LD_VAR 0 1
29556: PPUSH
29557: CALL 37101 0 2
29561: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
29562: LD_EXP 84
29566: PUSH
29567: LD_VAR 0 5
29571: ARRAY
29572: PUSH
29573: LD_EXP 85
29577: LESS
29578: IFFALSE 29767
// begin for i := 1 to vehicles do
29580: LD_ADDR_VAR 0 4
29584: PUSH
29585: DOUBLE
29586: LD_INT 1
29588: DEC
29589: ST_TO_ADDR
29590: LD_VAR 0 2
29594: PUSH
29595: FOR_TO
29596: IFFALSE 29765
// begin if hackTanksCaptured [ index ] = hackLimit then
29598: LD_EXP 84
29602: PUSH
29603: LD_VAR 0 5
29607: ARRAY
29608: PUSH
29609: LD_EXP 85
29613: EQUAL
29614: IFFALSE 29618
// break ;
29616: GO 29765
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
29618: LD_ADDR_EXP 87
29622: PUSH
29623: LD_EXP 87
29627: PPUSH
29628: LD_VAR 0 5
29632: PPUSH
29633: LD_EXP 87
29637: PUSH
29638: LD_VAR 0 5
29642: ARRAY
29643: PUSH
29644: LD_INT 1
29646: PLUS
29647: PPUSH
29648: CALL_OW 1
29652: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
29653: LD_ADDR_EXP 84
29657: PUSH
29658: LD_EXP 84
29662: PPUSH
29663: LD_VAR 0 5
29667: PUSH
29668: LD_EXP 84
29672: PUSH
29673: LD_VAR 0 5
29677: ARRAY
29678: PUSH
29679: LD_INT 1
29681: PLUS
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: PPUSH
29687: LD_VAR 0 2
29691: PUSH
29692: LD_VAR 0 4
29696: ARRAY
29697: PUSH
29698: LD_VAR 0 2
29702: PUSH
29703: LD_VAR 0 4
29707: ARRAY
29708: PPUSH
29709: CALL_OW 255
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: PPUSH
29718: CALL 37316 0 3
29722: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
29723: LD_VAR 0 2
29727: PUSH
29728: LD_VAR 0 4
29732: ARRAY
29733: PPUSH
29734: LD_VAR 0 1
29738: PPUSH
29739: CALL_OW 255
29743: PPUSH
29744: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
29748: LD_VAR 0 2
29752: PUSH
29753: LD_VAR 0 4
29757: ARRAY
29758: PPUSH
29759: CALL_OW 141
// end ;
29763: GO 29595
29765: POP
29766: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29767: LD_VAR 0 1
29771: PPUSH
29772: LD_EXP 84
29776: PUSH
29777: LD_VAR 0 5
29781: ARRAY
29782: PUSH
29783: LD_INT 0
29785: PLUS
29786: PPUSH
29787: CALL_OW 505
// end ;
29791: LD_VAR 0 3
29795: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
29796: LD_INT 0
29798: PPUSH
29799: PPUSH
29800: PPUSH
29801: PPUSH
// if not hack in hackTanks then
29802: LD_VAR 0 1
29806: PUSH
29807: LD_EXP 83
29811: IN
29812: NOT
29813: IFFALSE 29817
// exit ;
29815: GO 30057
// index := GetElementIndex ( hackTanks , hack ) ;
29817: LD_ADDR_VAR 0 4
29821: PUSH
29822: LD_EXP 83
29826: PPUSH
29827: LD_VAR 0 1
29831: PPUSH
29832: CALL 37101 0 2
29836: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
29837: LD_ADDR_VAR 0 3
29841: PUSH
29842: DOUBLE
29843: LD_EXP 84
29847: PUSH
29848: LD_VAR 0 4
29852: ARRAY
29853: INC
29854: ST_TO_ADDR
29855: LD_INT 1
29857: PUSH
29858: FOR_DOWNTO
29859: IFFALSE 30031
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
29861: LD_ADDR_VAR 0 5
29865: PUSH
29866: LD_EXP 84
29870: PUSH
29871: LD_VAR 0 4
29875: ARRAY
29876: PUSH
29877: LD_VAR 0 3
29881: ARRAY
29882: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
29883: LD_VAR 0 5
29887: PUSH
29888: LD_INT 1
29890: ARRAY
29891: PPUSH
29892: CALL_OW 302
29896: NOT
29897: PUSH
29898: LD_VAR 0 5
29902: PUSH
29903: LD_INT 1
29905: ARRAY
29906: PPUSH
29907: CALL_OW 255
29911: PUSH
29912: LD_VAR 0 1
29916: PPUSH
29917: CALL_OW 255
29921: NONEQUAL
29922: OR
29923: IFFALSE 30029
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
29925: LD_VAR 0 5
29929: PUSH
29930: LD_INT 1
29932: ARRAY
29933: PPUSH
29934: CALL_OW 305
29938: PUSH
29939: LD_VAR 0 5
29943: PUSH
29944: LD_INT 1
29946: ARRAY
29947: PPUSH
29948: CALL_OW 255
29952: PUSH
29953: LD_VAR 0 1
29957: PPUSH
29958: CALL_OW 255
29962: EQUAL
29963: AND
29964: IFFALSE 29988
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
29966: LD_VAR 0 5
29970: PUSH
29971: LD_INT 1
29973: ARRAY
29974: PPUSH
29975: LD_VAR 0 5
29979: PUSH
29980: LD_INT 2
29982: ARRAY
29983: PPUSH
29984: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
29988: LD_ADDR_EXP 84
29992: PUSH
29993: LD_EXP 84
29997: PPUSH
29998: LD_VAR 0 4
30002: PPUSH
30003: LD_EXP 84
30007: PUSH
30008: LD_VAR 0 4
30012: ARRAY
30013: PPUSH
30014: LD_VAR 0 3
30018: PPUSH
30019: CALL_OW 3
30023: PPUSH
30024: CALL_OW 1
30028: ST_TO_ADDR
// end ; end ;
30029: GO 29858
30031: POP
30032: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30033: LD_VAR 0 1
30037: PPUSH
30038: LD_EXP 84
30042: PUSH
30043: LD_VAR 0 4
30047: ARRAY
30048: PUSH
30049: LD_INT 0
30051: PLUS
30052: PPUSH
30053: CALL_OW 505
// end ;
30057: LD_VAR 0 2
30061: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
30062: LD_INT 0
30064: PPUSH
30065: PPUSH
30066: PPUSH
30067: PPUSH
// if not hack in hackTanks then
30068: LD_VAR 0 1
30072: PUSH
30073: LD_EXP 83
30077: IN
30078: NOT
30079: IFFALSE 30083
// exit ;
30081: GO 30168
// index := GetElementIndex ( hackTanks , hack ) ;
30083: LD_ADDR_VAR 0 5
30087: PUSH
30088: LD_EXP 83
30092: PPUSH
30093: LD_VAR 0 1
30097: PPUSH
30098: CALL 37101 0 2
30102: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
30103: LD_ADDR_VAR 0 4
30107: PUSH
30108: DOUBLE
30109: LD_INT 1
30111: DEC
30112: ST_TO_ADDR
30113: LD_EXP 84
30117: PUSH
30118: LD_VAR 0 5
30122: ARRAY
30123: PUSH
30124: FOR_TO
30125: IFFALSE 30166
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
30127: LD_EXP 84
30131: PUSH
30132: LD_VAR 0 5
30136: ARRAY
30137: PUSH
30138: LD_VAR 0 4
30142: ARRAY
30143: PUSH
30144: LD_INT 1
30146: ARRAY
30147: PUSH
30148: LD_VAR 0 2
30152: EQUAL
30153: IFFALSE 30164
// KillUnit ( vehicle ) ;
30155: LD_VAR 0 2
30159: PPUSH
30160: CALL_OW 66
30164: GO 30124
30166: POP
30167: POP
// end ;
30168: LD_VAR 0 3
30172: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
30173: LD_EXP 88
30177: NOT
30178: IFFALSE 30213
30180: GO 30182
30182: DISABLE
// begin initMiner := true ;
30183: LD_ADDR_EXP 88
30187: PUSH
30188: LD_INT 1
30190: ST_TO_ADDR
// minersList := [ ] ;
30191: LD_ADDR_EXP 89
30195: PUSH
30196: EMPTY
30197: ST_TO_ADDR
// minerMinesList := [ ] ;
30198: LD_ADDR_EXP 90
30202: PUSH
30203: EMPTY
30204: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
30205: LD_ADDR_EXP 91
30209: PUSH
30210: LD_INT 5
30212: ST_TO_ADDR
// end ;
30213: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
30214: LD_EXP 88
30218: PUSH
30219: LD_INT 34
30221: PUSH
30222: LD_INT 81
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: PPUSH
30229: CALL_OW 69
30233: AND
30234: IFFALSE 30695
30236: GO 30238
30238: DISABLE
30239: LD_INT 0
30241: PPUSH
30242: PPUSH
30243: PPUSH
30244: PPUSH
// begin enable ;
30245: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
30246: LD_ADDR_VAR 0 1
30250: PUSH
30251: LD_INT 34
30253: PUSH
30254: LD_INT 81
30256: PUSH
30257: EMPTY
30258: LIST
30259: LIST
30260: PPUSH
30261: CALL_OW 69
30265: PUSH
30266: FOR_IN
30267: IFFALSE 30339
// begin if not i in minersList then
30269: LD_VAR 0 1
30273: PUSH
30274: LD_EXP 89
30278: IN
30279: NOT
30280: IFFALSE 30337
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
30282: LD_ADDR_EXP 89
30286: PUSH
30287: LD_EXP 89
30291: PPUSH
30292: LD_EXP 89
30296: PUSH
30297: LD_INT 1
30299: PLUS
30300: PPUSH
30301: LD_VAR 0 1
30305: PPUSH
30306: CALL_OW 1
30310: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
30311: LD_ADDR_EXP 90
30315: PUSH
30316: LD_EXP 90
30320: PPUSH
30321: LD_EXP 90
30325: PUSH
30326: LD_INT 1
30328: PLUS
30329: PPUSH
30330: EMPTY
30331: PPUSH
30332: CALL_OW 1
30336: ST_TO_ADDR
// end end ;
30337: GO 30266
30339: POP
30340: POP
// for i := minerMinesList downto 1 do
30341: LD_ADDR_VAR 0 1
30345: PUSH
30346: DOUBLE
30347: LD_EXP 90
30351: INC
30352: ST_TO_ADDR
30353: LD_INT 1
30355: PUSH
30356: FOR_DOWNTO
30357: IFFALSE 30693
// begin if IsLive ( minersList [ i ] ) then
30359: LD_EXP 89
30363: PUSH
30364: LD_VAR 0 1
30368: ARRAY
30369: PPUSH
30370: CALL_OW 300
30374: IFFALSE 30402
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
30376: LD_EXP 89
30380: PUSH
30381: LD_VAR 0 1
30385: ARRAY
30386: PPUSH
30387: LD_EXP 90
30391: PUSH
30392: LD_VAR 0 1
30396: ARRAY
30397: PPUSH
30398: CALL_OW 505
// if not minerMinesList [ i ] then
30402: LD_EXP 90
30406: PUSH
30407: LD_VAR 0 1
30411: ARRAY
30412: NOT
30413: IFFALSE 30417
// continue ;
30415: GO 30356
// for j := minerMinesList [ i ] downto 1 do
30417: LD_ADDR_VAR 0 2
30421: PUSH
30422: DOUBLE
30423: LD_EXP 90
30427: PUSH
30428: LD_VAR 0 1
30432: ARRAY
30433: INC
30434: ST_TO_ADDR
30435: LD_INT 1
30437: PUSH
30438: FOR_DOWNTO
30439: IFFALSE 30689
// begin side := GetSide ( minersList [ i ] ) ;
30441: LD_ADDR_VAR 0 3
30445: PUSH
30446: LD_EXP 89
30450: PUSH
30451: LD_VAR 0 1
30455: ARRAY
30456: PPUSH
30457: CALL_OW 255
30461: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
30462: LD_ADDR_VAR 0 4
30466: PUSH
30467: LD_EXP 90
30471: PUSH
30472: LD_VAR 0 1
30476: ARRAY
30477: PUSH
30478: LD_VAR 0 2
30482: ARRAY
30483: PUSH
30484: LD_INT 1
30486: ARRAY
30487: PPUSH
30488: LD_EXP 90
30492: PUSH
30493: LD_VAR 0 1
30497: ARRAY
30498: PUSH
30499: LD_VAR 0 2
30503: ARRAY
30504: PUSH
30505: LD_INT 2
30507: ARRAY
30508: PPUSH
30509: CALL_OW 428
30513: ST_TO_ADDR
// if not tmp then
30514: LD_VAR 0 4
30518: NOT
30519: IFFALSE 30523
// continue ;
30521: GO 30438
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
30523: LD_VAR 0 4
30527: PUSH
30528: LD_INT 81
30530: PUSH
30531: LD_VAR 0 3
30535: PUSH
30536: EMPTY
30537: LIST
30538: LIST
30539: PPUSH
30540: CALL_OW 69
30544: IN
30545: PUSH
30546: LD_EXP 90
30550: PUSH
30551: LD_VAR 0 1
30555: ARRAY
30556: PUSH
30557: LD_VAR 0 2
30561: ARRAY
30562: PUSH
30563: LD_INT 1
30565: ARRAY
30566: PPUSH
30567: LD_EXP 90
30571: PUSH
30572: LD_VAR 0 1
30576: ARRAY
30577: PUSH
30578: LD_VAR 0 2
30582: ARRAY
30583: PUSH
30584: LD_INT 2
30586: ARRAY
30587: PPUSH
30588: CALL_OW 458
30592: AND
30593: IFFALSE 30687
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
30595: LD_EXP 90
30599: PUSH
30600: LD_VAR 0 1
30604: ARRAY
30605: PUSH
30606: LD_VAR 0 2
30610: ARRAY
30611: PUSH
30612: LD_INT 1
30614: ARRAY
30615: PPUSH
30616: LD_EXP 90
30620: PUSH
30621: LD_VAR 0 1
30625: ARRAY
30626: PUSH
30627: LD_VAR 0 2
30631: ARRAY
30632: PUSH
30633: LD_INT 2
30635: ARRAY
30636: PPUSH
30637: LD_VAR 0 3
30641: PPUSH
30642: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
30646: LD_ADDR_EXP 90
30650: PUSH
30651: LD_EXP 90
30655: PPUSH
30656: LD_VAR 0 1
30660: PPUSH
30661: LD_EXP 90
30665: PUSH
30666: LD_VAR 0 1
30670: ARRAY
30671: PPUSH
30672: LD_VAR 0 2
30676: PPUSH
30677: CALL_OW 3
30681: PPUSH
30682: CALL_OW 1
30686: ST_TO_ADDR
// end ; end ;
30687: GO 30438
30689: POP
30690: POP
// end ;
30691: GO 30356
30693: POP
30694: POP
// end ;
30695: PPOPN 4
30697: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
30698: LD_INT 0
30700: PPUSH
30701: PPUSH
// result := false ;
30702: LD_ADDR_VAR 0 4
30706: PUSH
30707: LD_INT 0
30709: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
30710: LD_VAR 0 1
30714: PPUSH
30715: CALL_OW 264
30719: PUSH
30720: LD_INT 81
30722: EQUAL
30723: NOT
30724: IFFALSE 30728
// exit ;
30726: GO 30968
// index := GetElementIndex ( minersList , unit ) ;
30728: LD_ADDR_VAR 0 5
30732: PUSH
30733: LD_EXP 89
30737: PPUSH
30738: LD_VAR 0 1
30742: PPUSH
30743: CALL 37101 0 2
30747: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
30748: LD_EXP 90
30752: PUSH
30753: LD_VAR 0 5
30757: ARRAY
30758: PUSH
30759: LD_EXP 91
30763: GREATEREQUAL
30764: IFFALSE 30768
// exit ;
30766: GO 30968
// ComMoveXY ( unit , x , y ) ;
30768: LD_VAR 0 1
30772: PPUSH
30773: LD_VAR 0 2
30777: PPUSH
30778: LD_VAR 0 3
30782: PPUSH
30783: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30787: LD_INT 35
30789: PPUSH
30790: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
30794: LD_VAR 0 1
30798: PPUSH
30799: LD_VAR 0 2
30803: PPUSH
30804: LD_VAR 0 3
30808: PPUSH
30809: CALL 68437 0 3
30813: NOT
30814: PUSH
30815: LD_VAR 0 1
30819: PPUSH
30820: CALL_OW 314
30824: AND
30825: IFFALSE 30829
// exit ;
30827: GO 30968
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
30829: LD_VAR 0 2
30833: PPUSH
30834: LD_VAR 0 3
30838: PPUSH
30839: CALL_OW 428
30843: PUSH
30844: LD_VAR 0 1
30848: EQUAL
30849: PUSH
30850: LD_VAR 0 1
30854: PPUSH
30855: CALL_OW 314
30859: NOT
30860: AND
30861: IFFALSE 30787
// PlaySoundXY ( x , y , PlantMine ) ;
30863: LD_VAR 0 2
30867: PPUSH
30868: LD_VAR 0 3
30872: PPUSH
30873: LD_STRING PlantMine
30875: PPUSH
30876: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
30880: LD_VAR 0 2
30884: PPUSH
30885: LD_VAR 0 3
30889: PPUSH
30890: LD_VAR 0 1
30894: PPUSH
30895: CALL_OW 255
30899: PPUSH
30900: LD_INT 0
30902: PPUSH
30903: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
30907: LD_ADDR_EXP 90
30911: PUSH
30912: LD_EXP 90
30916: PPUSH
30917: LD_VAR 0 5
30921: PUSH
30922: LD_EXP 90
30926: PUSH
30927: LD_VAR 0 5
30931: ARRAY
30932: PUSH
30933: LD_INT 1
30935: PLUS
30936: PUSH
30937: EMPTY
30938: LIST
30939: LIST
30940: PPUSH
30941: LD_VAR 0 2
30945: PUSH
30946: LD_VAR 0 3
30950: PUSH
30951: EMPTY
30952: LIST
30953: LIST
30954: PPUSH
30955: CALL 37316 0 3
30959: ST_TO_ADDR
// result := true ;
30960: LD_ADDR_VAR 0 4
30964: PUSH
30965: LD_INT 1
30967: ST_TO_ADDR
// end ;
30968: LD_VAR 0 4
30972: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
30973: LD_INT 0
30975: PPUSH
30976: PPUSH
30977: PPUSH
// if not unit in minersList then
30978: LD_VAR 0 1
30982: PUSH
30983: LD_EXP 89
30987: IN
30988: NOT
30989: IFFALSE 30993
// exit ;
30991: GO 31385
// index := GetElementIndex ( minersList , unit ) ;
30993: LD_ADDR_VAR 0 6
30997: PUSH
30998: LD_EXP 89
31002: PPUSH
31003: LD_VAR 0 1
31007: PPUSH
31008: CALL 37101 0 2
31012: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
31013: LD_ADDR_VAR 0 5
31017: PUSH
31018: DOUBLE
31019: LD_EXP 90
31023: PUSH
31024: LD_VAR 0 6
31028: ARRAY
31029: INC
31030: ST_TO_ADDR
31031: LD_INT 1
31033: PUSH
31034: FOR_DOWNTO
31035: IFFALSE 31196
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
31037: LD_EXP 90
31041: PUSH
31042: LD_VAR 0 6
31046: ARRAY
31047: PUSH
31048: LD_VAR 0 5
31052: ARRAY
31053: PUSH
31054: LD_INT 1
31056: ARRAY
31057: PUSH
31058: LD_VAR 0 2
31062: EQUAL
31063: PUSH
31064: LD_EXP 90
31068: PUSH
31069: LD_VAR 0 6
31073: ARRAY
31074: PUSH
31075: LD_VAR 0 5
31079: ARRAY
31080: PUSH
31081: LD_INT 2
31083: ARRAY
31084: PUSH
31085: LD_VAR 0 3
31089: EQUAL
31090: AND
31091: IFFALSE 31194
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31093: LD_EXP 90
31097: PUSH
31098: LD_VAR 0 6
31102: ARRAY
31103: PUSH
31104: LD_VAR 0 5
31108: ARRAY
31109: PUSH
31110: LD_INT 1
31112: ARRAY
31113: PPUSH
31114: LD_EXP 90
31118: PUSH
31119: LD_VAR 0 6
31123: ARRAY
31124: PUSH
31125: LD_VAR 0 5
31129: ARRAY
31130: PUSH
31131: LD_INT 2
31133: ARRAY
31134: PPUSH
31135: LD_VAR 0 1
31139: PPUSH
31140: CALL_OW 255
31144: PPUSH
31145: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31149: LD_ADDR_EXP 90
31153: PUSH
31154: LD_EXP 90
31158: PPUSH
31159: LD_VAR 0 6
31163: PPUSH
31164: LD_EXP 90
31168: PUSH
31169: LD_VAR 0 6
31173: ARRAY
31174: PPUSH
31175: LD_VAR 0 5
31179: PPUSH
31180: CALL_OW 3
31184: PPUSH
31185: CALL_OW 1
31189: ST_TO_ADDR
// exit ;
31190: POP
31191: POP
31192: GO 31385
// end ; end ;
31194: GO 31034
31196: POP
31197: POP
// for i := minerMinesList [ index ] downto 1 do
31198: LD_ADDR_VAR 0 5
31202: PUSH
31203: DOUBLE
31204: LD_EXP 90
31208: PUSH
31209: LD_VAR 0 6
31213: ARRAY
31214: INC
31215: ST_TO_ADDR
31216: LD_INT 1
31218: PUSH
31219: FOR_DOWNTO
31220: IFFALSE 31383
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
31222: LD_EXP 90
31226: PUSH
31227: LD_VAR 0 6
31231: ARRAY
31232: PUSH
31233: LD_VAR 0 5
31237: ARRAY
31238: PUSH
31239: LD_INT 1
31241: ARRAY
31242: PPUSH
31243: LD_EXP 90
31247: PUSH
31248: LD_VAR 0 6
31252: ARRAY
31253: PUSH
31254: LD_VAR 0 5
31258: ARRAY
31259: PUSH
31260: LD_INT 2
31262: ARRAY
31263: PPUSH
31264: LD_VAR 0 2
31268: PPUSH
31269: LD_VAR 0 3
31273: PPUSH
31274: CALL_OW 298
31278: PUSH
31279: LD_INT 6
31281: LESS
31282: IFFALSE 31381
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31284: LD_EXP 90
31288: PUSH
31289: LD_VAR 0 6
31293: ARRAY
31294: PUSH
31295: LD_VAR 0 5
31299: ARRAY
31300: PUSH
31301: LD_INT 1
31303: ARRAY
31304: PPUSH
31305: LD_EXP 90
31309: PUSH
31310: LD_VAR 0 6
31314: ARRAY
31315: PUSH
31316: LD_VAR 0 5
31320: ARRAY
31321: PUSH
31322: LD_INT 2
31324: ARRAY
31325: PPUSH
31326: LD_VAR 0 1
31330: PPUSH
31331: CALL_OW 255
31335: PPUSH
31336: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31340: LD_ADDR_EXP 90
31344: PUSH
31345: LD_EXP 90
31349: PPUSH
31350: LD_VAR 0 6
31354: PPUSH
31355: LD_EXP 90
31359: PUSH
31360: LD_VAR 0 6
31364: ARRAY
31365: PPUSH
31366: LD_VAR 0 5
31370: PPUSH
31371: CALL_OW 3
31375: PPUSH
31376: CALL_OW 1
31380: ST_TO_ADDR
// end ; end ;
31381: GO 31219
31383: POP
31384: POP
// end ;
31385: LD_VAR 0 4
31389: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
31390: LD_INT 0
31392: PPUSH
31393: PPUSH
31394: PPUSH
31395: PPUSH
31396: PPUSH
31397: PPUSH
31398: PPUSH
31399: PPUSH
31400: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
31401: LD_VAR 0 1
31405: PPUSH
31406: CALL_OW 264
31410: PUSH
31411: LD_INT 81
31413: EQUAL
31414: NOT
31415: PUSH
31416: LD_VAR 0 1
31420: PUSH
31421: LD_EXP 89
31425: IN
31426: NOT
31427: OR
31428: IFFALSE 31432
// exit ;
31430: GO 31754
// index := GetElementIndex ( minersList , unit ) ;
31432: LD_ADDR_VAR 0 6
31436: PUSH
31437: LD_EXP 89
31441: PPUSH
31442: LD_VAR 0 1
31446: PPUSH
31447: CALL 37101 0 2
31451: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
31452: LD_ADDR_VAR 0 8
31456: PUSH
31457: LD_EXP 91
31461: PUSH
31462: LD_EXP 90
31466: PUSH
31467: LD_VAR 0 6
31471: ARRAY
31472: MINUS
31473: ST_TO_ADDR
// if not minesFreeAmount then
31474: LD_VAR 0 8
31478: NOT
31479: IFFALSE 31483
// exit ;
31481: GO 31754
// tmp := [ ] ;
31483: LD_ADDR_VAR 0 7
31487: PUSH
31488: EMPTY
31489: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
31490: LD_ADDR_VAR 0 5
31494: PUSH
31495: DOUBLE
31496: LD_INT 1
31498: DEC
31499: ST_TO_ADDR
31500: LD_VAR 0 8
31504: PUSH
31505: FOR_TO
31506: IFFALSE 31701
// begin _d := rand ( 0 , 5 ) ;
31508: LD_ADDR_VAR 0 11
31512: PUSH
31513: LD_INT 0
31515: PPUSH
31516: LD_INT 5
31518: PPUSH
31519: CALL_OW 12
31523: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
31524: LD_ADDR_VAR 0 12
31528: PUSH
31529: LD_INT 2
31531: PPUSH
31532: LD_INT 6
31534: PPUSH
31535: CALL_OW 12
31539: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
31540: LD_ADDR_VAR 0 9
31544: PUSH
31545: LD_VAR 0 2
31549: PPUSH
31550: LD_VAR 0 11
31554: PPUSH
31555: LD_VAR 0 12
31559: PPUSH
31560: CALL_OW 272
31564: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
31565: LD_ADDR_VAR 0 10
31569: PUSH
31570: LD_VAR 0 3
31574: PPUSH
31575: LD_VAR 0 11
31579: PPUSH
31580: LD_VAR 0 12
31584: PPUSH
31585: CALL_OW 273
31589: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
31590: LD_VAR 0 9
31594: PPUSH
31595: LD_VAR 0 10
31599: PPUSH
31600: CALL_OW 488
31604: PUSH
31605: LD_VAR 0 9
31609: PUSH
31610: LD_VAR 0 10
31614: PUSH
31615: EMPTY
31616: LIST
31617: LIST
31618: PUSH
31619: LD_VAR 0 7
31623: IN
31624: NOT
31625: AND
31626: PUSH
31627: LD_VAR 0 9
31631: PPUSH
31632: LD_VAR 0 10
31636: PPUSH
31637: CALL_OW 458
31641: NOT
31642: AND
31643: IFFALSE 31685
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
31645: LD_ADDR_VAR 0 7
31649: PUSH
31650: LD_VAR 0 7
31654: PPUSH
31655: LD_VAR 0 7
31659: PUSH
31660: LD_INT 1
31662: PLUS
31663: PPUSH
31664: LD_VAR 0 9
31668: PUSH
31669: LD_VAR 0 10
31673: PUSH
31674: EMPTY
31675: LIST
31676: LIST
31677: PPUSH
31678: CALL_OW 1
31682: ST_TO_ADDR
31683: GO 31699
// i := i - 1 ;
31685: LD_ADDR_VAR 0 5
31689: PUSH
31690: LD_VAR 0 5
31694: PUSH
31695: LD_INT 1
31697: MINUS
31698: ST_TO_ADDR
// end ;
31699: GO 31505
31701: POP
31702: POP
// for i in tmp do
31703: LD_ADDR_VAR 0 5
31707: PUSH
31708: LD_VAR 0 7
31712: PUSH
31713: FOR_IN
31714: IFFALSE 31752
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
31716: LD_VAR 0 1
31720: PPUSH
31721: LD_VAR 0 5
31725: PUSH
31726: LD_INT 1
31728: ARRAY
31729: PPUSH
31730: LD_VAR 0 5
31734: PUSH
31735: LD_INT 2
31737: ARRAY
31738: PPUSH
31739: CALL 30698 0 3
31743: NOT
31744: IFFALSE 31750
// exit ;
31746: POP
31747: POP
31748: GO 31754
31750: GO 31713
31752: POP
31753: POP
// end ;
31754: LD_VAR 0 4
31758: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
31759: LD_INT 0
31761: PPUSH
31762: PPUSH
31763: PPUSH
31764: PPUSH
31765: PPUSH
31766: PPUSH
31767: PPUSH
// if not GetClass ( unit ) = class_sniper then
31768: LD_VAR 0 1
31772: PPUSH
31773: CALL_OW 257
31777: PUSH
31778: LD_INT 5
31780: EQUAL
31781: NOT
31782: IFFALSE 31786
// exit ;
31784: GO 32174
// dist := 8 ;
31786: LD_ADDR_VAR 0 5
31790: PUSH
31791: LD_INT 8
31793: ST_TO_ADDR
// viewRange := 12 ;
31794: LD_ADDR_VAR 0 7
31798: PUSH
31799: LD_INT 12
31801: ST_TO_ADDR
// side := GetSide ( unit ) ;
31802: LD_ADDR_VAR 0 6
31806: PUSH
31807: LD_VAR 0 1
31811: PPUSH
31812: CALL_OW 255
31816: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
31817: LD_INT 61
31819: PPUSH
31820: LD_VAR 0 6
31824: PPUSH
31825: CALL_OW 321
31829: PUSH
31830: LD_INT 2
31832: EQUAL
31833: IFFALSE 31843
// viewRange := 16 ;
31835: LD_ADDR_VAR 0 7
31839: PUSH
31840: LD_INT 16
31842: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
31843: LD_VAR 0 1
31847: PPUSH
31848: LD_VAR 0 2
31852: PPUSH
31853: LD_VAR 0 3
31857: PPUSH
31858: CALL_OW 297
31862: PUSH
31863: LD_VAR 0 5
31867: GREATER
31868: IFFALSE 31947
// begin ComMoveXY ( unit , x , y ) ;
31870: LD_VAR 0 1
31874: PPUSH
31875: LD_VAR 0 2
31879: PPUSH
31880: LD_VAR 0 3
31884: PPUSH
31885: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31889: LD_INT 35
31891: PPUSH
31892: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
31896: LD_VAR 0 1
31900: PPUSH
31901: LD_VAR 0 2
31905: PPUSH
31906: LD_VAR 0 3
31910: PPUSH
31911: CALL 68437 0 3
31915: NOT
31916: IFFALSE 31920
// exit ;
31918: GO 32174
// until GetDistUnitXY ( unit , x , y ) < dist ;
31920: LD_VAR 0 1
31924: PPUSH
31925: LD_VAR 0 2
31929: PPUSH
31930: LD_VAR 0 3
31934: PPUSH
31935: CALL_OW 297
31939: PUSH
31940: LD_VAR 0 5
31944: LESS
31945: IFFALSE 31889
// end ; ComTurnXY ( unit , x , y ) ;
31947: LD_VAR 0 1
31951: PPUSH
31952: LD_VAR 0 2
31956: PPUSH
31957: LD_VAR 0 3
31961: PPUSH
31962: CALL_OW 118
// wait ( 5 ) ;
31966: LD_INT 5
31968: PPUSH
31969: CALL_OW 67
// _d := GetDir ( unit ) ;
31973: LD_ADDR_VAR 0 10
31977: PUSH
31978: LD_VAR 0 1
31982: PPUSH
31983: CALL_OW 254
31987: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
31988: LD_ADDR_VAR 0 8
31992: PUSH
31993: LD_VAR 0 1
31997: PPUSH
31998: CALL_OW 250
32002: PPUSH
32003: LD_VAR 0 10
32007: PPUSH
32008: LD_VAR 0 5
32012: PPUSH
32013: CALL_OW 272
32017: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
32018: LD_ADDR_VAR 0 9
32022: PUSH
32023: LD_VAR 0 1
32027: PPUSH
32028: CALL_OW 251
32032: PPUSH
32033: LD_VAR 0 10
32037: PPUSH
32038: LD_VAR 0 5
32042: PPUSH
32043: CALL_OW 273
32047: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32048: LD_VAR 0 8
32052: PPUSH
32053: LD_VAR 0 9
32057: PPUSH
32058: CALL_OW 488
32062: NOT
32063: IFFALSE 32067
// exit ;
32065: GO 32174
// ComAnimCustom ( unit , 1 ) ;
32067: LD_VAR 0 1
32071: PPUSH
32072: LD_INT 1
32074: PPUSH
32075: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
32079: LD_VAR 0 8
32083: PPUSH
32084: LD_VAR 0 9
32088: PPUSH
32089: LD_VAR 0 6
32093: PPUSH
32094: LD_VAR 0 7
32098: PPUSH
32099: CALL_OW 330
// repeat wait ( 1 ) ;
32103: LD_INT 1
32105: PPUSH
32106: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
32110: LD_VAR 0 1
32114: PPUSH
32115: CALL_OW 316
32119: PUSH
32120: LD_VAR 0 1
32124: PPUSH
32125: CALL_OW 314
32129: OR
32130: PUSH
32131: LD_VAR 0 1
32135: PPUSH
32136: CALL_OW 302
32140: NOT
32141: OR
32142: PUSH
32143: LD_VAR 0 1
32147: PPUSH
32148: CALL_OW 301
32152: OR
32153: IFFALSE 32103
// RemoveSeeing ( _x , _y , side ) ;
32155: LD_VAR 0 8
32159: PPUSH
32160: LD_VAR 0 9
32164: PPUSH
32165: LD_VAR 0 6
32169: PPUSH
32170: CALL_OW 331
// end ; end_of_file
32174: LD_VAR 0 4
32178: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
32179: LD_INT 0
32181: PPUSH
32182: PPUSH
// if exist_mode then
32183: LD_VAR 0 2
32187: IFFALSE 32212
// unit := CreateCharacter ( prefix & ident ) else
32189: LD_ADDR_VAR 0 5
32193: PUSH
32194: LD_VAR 0 3
32198: PUSH
32199: LD_VAR 0 1
32203: STR
32204: PPUSH
32205: CALL_OW 34
32209: ST_TO_ADDR
32210: GO 32227
// unit := NewCharacter ( ident ) ;
32212: LD_ADDR_VAR 0 5
32216: PUSH
32217: LD_VAR 0 1
32221: PPUSH
32222: CALL_OW 25
32226: ST_TO_ADDR
// result := unit ;
32227: LD_ADDR_VAR 0 4
32231: PUSH
32232: LD_VAR 0 5
32236: ST_TO_ADDR
// end ;
32237: LD_VAR 0 4
32241: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
32242: LD_INT 0
32244: PPUSH
32245: PPUSH
// if not side or not nation then
32246: LD_VAR 0 1
32250: NOT
32251: PUSH
32252: LD_VAR 0 2
32256: NOT
32257: OR
32258: IFFALSE 32262
// exit ;
32260: GO 33030
// case nation of nation_american :
32262: LD_VAR 0 2
32266: PUSH
32267: LD_INT 1
32269: DOUBLE
32270: EQUAL
32271: IFTRUE 32275
32273: GO 32489
32275: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
32276: LD_ADDR_VAR 0 4
32280: PUSH
32281: LD_INT 35
32283: PUSH
32284: LD_INT 45
32286: PUSH
32287: LD_INT 46
32289: PUSH
32290: LD_INT 47
32292: PUSH
32293: LD_INT 82
32295: PUSH
32296: LD_INT 83
32298: PUSH
32299: LD_INT 84
32301: PUSH
32302: LD_INT 85
32304: PUSH
32305: LD_INT 86
32307: PUSH
32308: LD_INT 1
32310: PUSH
32311: LD_INT 2
32313: PUSH
32314: LD_INT 6
32316: PUSH
32317: LD_INT 15
32319: PUSH
32320: LD_INT 16
32322: PUSH
32323: LD_INT 7
32325: PUSH
32326: LD_INT 12
32328: PUSH
32329: LD_INT 13
32331: PUSH
32332: LD_INT 10
32334: PUSH
32335: LD_INT 14
32337: PUSH
32338: LD_INT 20
32340: PUSH
32341: LD_INT 21
32343: PUSH
32344: LD_INT 22
32346: PUSH
32347: LD_INT 25
32349: PUSH
32350: LD_INT 32
32352: PUSH
32353: LD_INT 27
32355: PUSH
32356: LD_INT 36
32358: PUSH
32359: LD_INT 69
32361: PUSH
32362: LD_INT 39
32364: PUSH
32365: LD_INT 34
32367: PUSH
32368: LD_INT 40
32370: PUSH
32371: LD_INT 48
32373: PUSH
32374: LD_INT 49
32376: PUSH
32377: LD_INT 50
32379: PUSH
32380: LD_INT 51
32382: PUSH
32383: LD_INT 52
32385: PUSH
32386: LD_INT 53
32388: PUSH
32389: LD_INT 54
32391: PUSH
32392: LD_INT 55
32394: PUSH
32395: LD_INT 56
32397: PUSH
32398: LD_INT 57
32400: PUSH
32401: LD_INT 58
32403: PUSH
32404: LD_INT 59
32406: PUSH
32407: LD_INT 60
32409: PUSH
32410: LD_INT 61
32412: PUSH
32413: LD_INT 62
32415: PUSH
32416: LD_INT 80
32418: PUSH
32419: LD_INT 82
32421: PUSH
32422: LD_INT 83
32424: PUSH
32425: LD_INT 84
32427: PUSH
32428: LD_INT 85
32430: PUSH
32431: LD_INT 86
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: LIST
32438: LIST
32439: LIST
32440: LIST
32441: LIST
32442: LIST
32443: LIST
32444: LIST
32445: LIST
32446: LIST
32447: LIST
32448: LIST
32449: LIST
32450: LIST
32451: LIST
32452: LIST
32453: LIST
32454: LIST
32455: LIST
32456: LIST
32457: LIST
32458: LIST
32459: LIST
32460: LIST
32461: LIST
32462: LIST
32463: LIST
32464: LIST
32465: LIST
32466: LIST
32467: LIST
32468: LIST
32469: LIST
32470: LIST
32471: LIST
32472: LIST
32473: LIST
32474: LIST
32475: LIST
32476: LIST
32477: LIST
32478: LIST
32479: LIST
32480: LIST
32481: LIST
32482: LIST
32483: LIST
32484: LIST
32485: LIST
32486: ST_TO_ADDR
32487: GO 32954
32489: LD_INT 2
32491: DOUBLE
32492: EQUAL
32493: IFTRUE 32497
32495: GO 32723
32497: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
32498: LD_ADDR_VAR 0 4
32502: PUSH
32503: LD_INT 35
32505: PUSH
32506: LD_INT 45
32508: PUSH
32509: LD_INT 46
32511: PUSH
32512: LD_INT 47
32514: PUSH
32515: LD_INT 82
32517: PUSH
32518: LD_INT 83
32520: PUSH
32521: LD_INT 84
32523: PUSH
32524: LD_INT 85
32526: PUSH
32527: LD_INT 87
32529: PUSH
32530: LD_INT 70
32532: PUSH
32533: LD_INT 1
32535: PUSH
32536: LD_INT 11
32538: PUSH
32539: LD_INT 3
32541: PUSH
32542: LD_INT 4
32544: PUSH
32545: LD_INT 5
32547: PUSH
32548: LD_INT 6
32550: PUSH
32551: LD_INT 15
32553: PUSH
32554: LD_INT 18
32556: PUSH
32557: LD_INT 7
32559: PUSH
32560: LD_INT 17
32562: PUSH
32563: LD_INT 8
32565: PUSH
32566: LD_INT 20
32568: PUSH
32569: LD_INT 21
32571: PUSH
32572: LD_INT 22
32574: PUSH
32575: LD_INT 72
32577: PUSH
32578: LD_INT 26
32580: PUSH
32581: LD_INT 69
32583: PUSH
32584: LD_INT 39
32586: PUSH
32587: LD_INT 40
32589: PUSH
32590: LD_INT 41
32592: PUSH
32593: LD_INT 42
32595: PUSH
32596: LD_INT 43
32598: PUSH
32599: LD_INT 48
32601: PUSH
32602: LD_INT 49
32604: PUSH
32605: LD_INT 50
32607: PUSH
32608: LD_INT 51
32610: PUSH
32611: LD_INT 52
32613: PUSH
32614: LD_INT 53
32616: PUSH
32617: LD_INT 54
32619: PUSH
32620: LD_INT 55
32622: PUSH
32623: LD_INT 56
32625: PUSH
32626: LD_INT 60
32628: PUSH
32629: LD_INT 61
32631: PUSH
32632: LD_INT 62
32634: PUSH
32635: LD_INT 66
32637: PUSH
32638: LD_INT 67
32640: PUSH
32641: LD_INT 68
32643: PUSH
32644: LD_INT 81
32646: PUSH
32647: LD_INT 82
32649: PUSH
32650: LD_INT 83
32652: PUSH
32653: LD_INT 84
32655: PUSH
32656: LD_INT 85
32658: PUSH
32659: LD_INT 87
32661: PUSH
32662: LD_INT 88
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: LIST
32687: LIST
32688: LIST
32689: LIST
32690: LIST
32691: LIST
32692: LIST
32693: LIST
32694: LIST
32695: LIST
32696: LIST
32697: LIST
32698: LIST
32699: LIST
32700: LIST
32701: LIST
32702: LIST
32703: LIST
32704: LIST
32705: LIST
32706: LIST
32707: LIST
32708: LIST
32709: LIST
32710: LIST
32711: LIST
32712: LIST
32713: LIST
32714: LIST
32715: LIST
32716: LIST
32717: LIST
32718: LIST
32719: LIST
32720: ST_TO_ADDR
32721: GO 32954
32723: LD_INT 3
32725: DOUBLE
32726: EQUAL
32727: IFTRUE 32731
32729: GO 32953
32731: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
32732: LD_ADDR_VAR 0 4
32736: PUSH
32737: LD_INT 46
32739: PUSH
32740: LD_INT 47
32742: PUSH
32743: LD_INT 1
32745: PUSH
32746: LD_INT 2
32748: PUSH
32749: LD_INT 82
32751: PUSH
32752: LD_INT 83
32754: PUSH
32755: LD_INT 84
32757: PUSH
32758: LD_INT 85
32760: PUSH
32761: LD_INT 86
32763: PUSH
32764: LD_INT 11
32766: PUSH
32767: LD_INT 9
32769: PUSH
32770: LD_INT 20
32772: PUSH
32773: LD_INT 19
32775: PUSH
32776: LD_INT 21
32778: PUSH
32779: LD_INT 24
32781: PUSH
32782: LD_INT 22
32784: PUSH
32785: LD_INT 25
32787: PUSH
32788: LD_INT 28
32790: PUSH
32791: LD_INT 29
32793: PUSH
32794: LD_INT 30
32796: PUSH
32797: LD_INT 31
32799: PUSH
32800: LD_INT 37
32802: PUSH
32803: LD_INT 38
32805: PUSH
32806: LD_INT 32
32808: PUSH
32809: LD_INT 27
32811: PUSH
32812: LD_INT 33
32814: PUSH
32815: LD_INT 69
32817: PUSH
32818: LD_INT 39
32820: PUSH
32821: LD_INT 34
32823: PUSH
32824: LD_INT 40
32826: PUSH
32827: LD_INT 71
32829: PUSH
32830: LD_INT 23
32832: PUSH
32833: LD_INT 44
32835: PUSH
32836: LD_INT 48
32838: PUSH
32839: LD_INT 49
32841: PUSH
32842: LD_INT 50
32844: PUSH
32845: LD_INT 51
32847: PUSH
32848: LD_INT 52
32850: PUSH
32851: LD_INT 53
32853: PUSH
32854: LD_INT 54
32856: PUSH
32857: LD_INT 55
32859: PUSH
32860: LD_INT 56
32862: PUSH
32863: LD_INT 57
32865: PUSH
32866: LD_INT 58
32868: PUSH
32869: LD_INT 59
32871: PUSH
32872: LD_INT 63
32874: PUSH
32875: LD_INT 64
32877: PUSH
32878: LD_INT 65
32880: PUSH
32881: LD_INT 82
32883: PUSH
32884: LD_INT 83
32886: PUSH
32887: LD_INT 84
32889: PUSH
32890: LD_INT 85
32892: PUSH
32893: LD_INT 86
32895: PUSH
32896: EMPTY
32897: LIST
32898: LIST
32899: LIST
32900: LIST
32901: LIST
32902: LIST
32903: LIST
32904: LIST
32905: LIST
32906: LIST
32907: LIST
32908: LIST
32909: LIST
32910: LIST
32911: LIST
32912: LIST
32913: LIST
32914: LIST
32915: LIST
32916: LIST
32917: LIST
32918: LIST
32919: LIST
32920: LIST
32921: LIST
32922: LIST
32923: LIST
32924: LIST
32925: LIST
32926: LIST
32927: LIST
32928: LIST
32929: LIST
32930: LIST
32931: LIST
32932: LIST
32933: LIST
32934: LIST
32935: LIST
32936: LIST
32937: LIST
32938: LIST
32939: LIST
32940: LIST
32941: LIST
32942: LIST
32943: LIST
32944: LIST
32945: LIST
32946: LIST
32947: LIST
32948: LIST
32949: LIST
32950: ST_TO_ADDR
32951: GO 32954
32953: POP
// if state > - 1 and state < 3 then
32954: LD_VAR 0 3
32958: PUSH
32959: LD_INT 1
32961: NEG
32962: GREATER
32963: PUSH
32964: LD_VAR 0 3
32968: PUSH
32969: LD_INT 3
32971: LESS
32972: AND
32973: IFFALSE 33030
// for i in result do
32975: LD_ADDR_VAR 0 5
32979: PUSH
32980: LD_VAR 0 4
32984: PUSH
32985: FOR_IN
32986: IFFALSE 33028
// if GetTech ( i , side ) <> state then
32988: LD_VAR 0 5
32992: PPUSH
32993: LD_VAR 0 1
32997: PPUSH
32998: CALL_OW 321
33002: PUSH
33003: LD_VAR 0 3
33007: NONEQUAL
33008: IFFALSE 33026
// result := result diff i ;
33010: LD_ADDR_VAR 0 4
33014: PUSH
33015: LD_VAR 0 4
33019: PUSH
33020: LD_VAR 0 5
33024: DIFF
33025: ST_TO_ADDR
33026: GO 32985
33028: POP
33029: POP
// end ;
33030: LD_VAR 0 4
33034: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
33035: LD_INT 0
33037: PPUSH
33038: PPUSH
33039: PPUSH
// result := true ;
33040: LD_ADDR_VAR 0 3
33044: PUSH
33045: LD_INT 1
33047: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
33048: LD_ADDR_VAR 0 5
33052: PUSH
33053: LD_VAR 0 2
33057: PPUSH
33058: CALL_OW 480
33062: ST_TO_ADDR
// if not tmp then
33063: LD_VAR 0 5
33067: NOT
33068: IFFALSE 33072
// exit ;
33070: GO 33121
// for i in tmp do
33072: LD_ADDR_VAR 0 4
33076: PUSH
33077: LD_VAR 0 5
33081: PUSH
33082: FOR_IN
33083: IFFALSE 33119
// if GetTech ( i , side ) <> state_researched then
33085: LD_VAR 0 4
33089: PPUSH
33090: LD_VAR 0 1
33094: PPUSH
33095: CALL_OW 321
33099: PUSH
33100: LD_INT 2
33102: NONEQUAL
33103: IFFALSE 33117
// begin result := false ;
33105: LD_ADDR_VAR 0 3
33109: PUSH
33110: LD_INT 0
33112: ST_TO_ADDR
// exit ;
33113: POP
33114: POP
33115: GO 33121
// end ;
33117: GO 33082
33119: POP
33120: POP
// end ;
33121: LD_VAR 0 3
33125: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
33126: LD_INT 0
33128: PPUSH
33129: PPUSH
33130: PPUSH
33131: PPUSH
33132: PPUSH
33133: PPUSH
33134: PPUSH
33135: PPUSH
33136: PPUSH
33137: PPUSH
33138: PPUSH
33139: PPUSH
33140: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
33141: LD_VAR 0 1
33145: NOT
33146: PUSH
33147: LD_VAR 0 1
33151: PPUSH
33152: CALL_OW 257
33156: PUSH
33157: LD_INT 9
33159: NONEQUAL
33160: OR
33161: IFFALSE 33165
// exit ;
33163: GO 33738
// side := GetSide ( unit ) ;
33165: LD_ADDR_VAR 0 9
33169: PUSH
33170: LD_VAR 0 1
33174: PPUSH
33175: CALL_OW 255
33179: ST_TO_ADDR
// tech_space := tech_spacanom ;
33180: LD_ADDR_VAR 0 12
33184: PUSH
33185: LD_INT 29
33187: ST_TO_ADDR
// tech_time := tech_taurad ;
33188: LD_ADDR_VAR 0 13
33192: PUSH
33193: LD_INT 28
33195: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
33196: LD_ADDR_VAR 0 11
33200: PUSH
33201: LD_VAR 0 1
33205: PPUSH
33206: CALL_OW 310
33210: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
33211: LD_VAR 0 11
33215: PPUSH
33216: CALL_OW 247
33220: PUSH
33221: LD_INT 2
33223: EQUAL
33224: IFFALSE 33228
// exit ;
33226: GO 33738
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33228: LD_ADDR_VAR 0 8
33232: PUSH
33233: LD_INT 81
33235: PUSH
33236: LD_VAR 0 9
33240: PUSH
33241: EMPTY
33242: LIST
33243: LIST
33244: PUSH
33245: LD_INT 3
33247: PUSH
33248: LD_INT 21
33250: PUSH
33251: LD_INT 3
33253: PUSH
33254: EMPTY
33255: LIST
33256: LIST
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: PUSH
33262: EMPTY
33263: LIST
33264: LIST
33265: PPUSH
33266: CALL_OW 69
33270: ST_TO_ADDR
// if not tmp then
33271: LD_VAR 0 8
33275: NOT
33276: IFFALSE 33280
// exit ;
33278: GO 33738
// if in_unit then
33280: LD_VAR 0 11
33284: IFFALSE 33308
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
33286: LD_ADDR_VAR 0 10
33290: PUSH
33291: LD_VAR 0 8
33295: PPUSH
33296: LD_VAR 0 11
33300: PPUSH
33301: CALL_OW 74
33305: ST_TO_ADDR
33306: GO 33328
// enemy := NearestUnitToUnit ( tmp , unit ) ;
33308: LD_ADDR_VAR 0 10
33312: PUSH
33313: LD_VAR 0 8
33317: PPUSH
33318: LD_VAR 0 1
33322: PPUSH
33323: CALL_OW 74
33327: ST_TO_ADDR
// if not enemy then
33328: LD_VAR 0 10
33332: NOT
33333: IFFALSE 33337
// exit ;
33335: GO 33738
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
33337: LD_VAR 0 11
33341: PUSH
33342: LD_VAR 0 11
33346: PPUSH
33347: LD_VAR 0 10
33351: PPUSH
33352: CALL_OW 296
33356: PUSH
33357: LD_INT 13
33359: GREATER
33360: AND
33361: PUSH
33362: LD_VAR 0 1
33366: PPUSH
33367: LD_VAR 0 10
33371: PPUSH
33372: CALL_OW 296
33376: PUSH
33377: LD_INT 12
33379: GREATER
33380: OR
33381: IFFALSE 33385
// exit ;
33383: GO 33738
// missile := [ 1 ] ;
33385: LD_ADDR_VAR 0 14
33389: PUSH
33390: LD_INT 1
33392: PUSH
33393: EMPTY
33394: LIST
33395: ST_TO_ADDR
// if Researched ( side , tech_space ) then
33396: LD_VAR 0 9
33400: PPUSH
33401: LD_VAR 0 12
33405: PPUSH
33406: CALL_OW 325
33410: IFFALSE 33439
// missile := Replace ( missile , missile + 1 , 2 ) ;
33412: LD_ADDR_VAR 0 14
33416: PUSH
33417: LD_VAR 0 14
33421: PPUSH
33422: LD_VAR 0 14
33426: PUSH
33427: LD_INT 1
33429: PLUS
33430: PPUSH
33431: LD_INT 2
33433: PPUSH
33434: CALL_OW 1
33438: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
33439: LD_VAR 0 9
33443: PPUSH
33444: LD_VAR 0 13
33448: PPUSH
33449: CALL_OW 325
33453: PUSH
33454: LD_VAR 0 10
33458: PPUSH
33459: CALL_OW 255
33463: PPUSH
33464: LD_VAR 0 13
33468: PPUSH
33469: CALL_OW 325
33473: NOT
33474: AND
33475: IFFALSE 33504
// missile := Replace ( missile , missile + 1 , 3 ) ;
33477: LD_ADDR_VAR 0 14
33481: PUSH
33482: LD_VAR 0 14
33486: PPUSH
33487: LD_VAR 0 14
33491: PUSH
33492: LD_INT 1
33494: PLUS
33495: PPUSH
33496: LD_INT 3
33498: PPUSH
33499: CALL_OW 1
33503: ST_TO_ADDR
// if missile < 2 then
33504: LD_VAR 0 14
33508: PUSH
33509: LD_INT 2
33511: LESS
33512: IFFALSE 33516
// exit ;
33514: GO 33738
// x := GetX ( enemy ) ;
33516: LD_ADDR_VAR 0 4
33520: PUSH
33521: LD_VAR 0 10
33525: PPUSH
33526: CALL_OW 250
33530: ST_TO_ADDR
// y := GetY ( enemy ) ;
33531: LD_ADDR_VAR 0 5
33535: PUSH
33536: LD_VAR 0 10
33540: PPUSH
33541: CALL_OW 251
33545: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
33546: LD_ADDR_VAR 0 6
33550: PUSH
33551: LD_VAR 0 4
33555: PUSH
33556: LD_INT 1
33558: NEG
33559: PPUSH
33560: LD_INT 1
33562: PPUSH
33563: CALL_OW 12
33567: PLUS
33568: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
33569: LD_ADDR_VAR 0 7
33573: PUSH
33574: LD_VAR 0 5
33578: PUSH
33579: LD_INT 1
33581: NEG
33582: PPUSH
33583: LD_INT 1
33585: PPUSH
33586: CALL_OW 12
33590: PLUS
33591: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33592: LD_VAR 0 6
33596: PPUSH
33597: LD_VAR 0 7
33601: PPUSH
33602: CALL_OW 488
33606: NOT
33607: IFFALSE 33629
// begin _x := x ;
33609: LD_ADDR_VAR 0 6
33613: PUSH
33614: LD_VAR 0 4
33618: ST_TO_ADDR
// _y := y ;
33619: LD_ADDR_VAR 0 7
33623: PUSH
33624: LD_VAR 0 5
33628: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
33629: LD_ADDR_VAR 0 3
33633: PUSH
33634: LD_INT 1
33636: PPUSH
33637: LD_VAR 0 14
33641: PPUSH
33642: CALL_OW 12
33646: ST_TO_ADDR
// case i of 1 :
33647: LD_VAR 0 3
33651: PUSH
33652: LD_INT 1
33654: DOUBLE
33655: EQUAL
33656: IFTRUE 33660
33658: GO 33677
33660: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
33661: LD_VAR 0 1
33665: PPUSH
33666: LD_VAR 0 10
33670: PPUSH
33671: CALL_OW 115
33675: GO 33738
33677: LD_INT 2
33679: DOUBLE
33680: EQUAL
33681: IFTRUE 33685
33683: GO 33707
33685: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
33686: LD_VAR 0 1
33690: PPUSH
33691: LD_VAR 0 6
33695: PPUSH
33696: LD_VAR 0 7
33700: PPUSH
33701: CALL_OW 153
33705: GO 33738
33707: LD_INT 3
33709: DOUBLE
33710: EQUAL
33711: IFTRUE 33715
33713: GO 33737
33715: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
33716: LD_VAR 0 1
33720: PPUSH
33721: LD_VAR 0 6
33725: PPUSH
33726: LD_VAR 0 7
33730: PPUSH
33731: CALL_OW 154
33735: GO 33738
33737: POP
// end ;
33738: LD_VAR 0 2
33742: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
33743: LD_INT 0
33745: PPUSH
33746: PPUSH
33747: PPUSH
33748: PPUSH
33749: PPUSH
33750: PPUSH
// if not unit or not building then
33751: LD_VAR 0 1
33755: NOT
33756: PUSH
33757: LD_VAR 0 2
33761: NOT
33762: OR
33763: IFFALSE 33767
// exit ;
33765: GO 33925
// x := GetX ( building ) ;
33767: LD_ADDR_VAR 0 5
33771: PUSH
33772: LD_VAR 0 2
33776: PPUSH
33777: CALL_OW 250
33781: ST_TO_ADDR
// y := GetY ( building ) ;
33782: LD_ADDR_VAR 0 6
33786: PUSH
33787: LD_VAR 0 2
33791: PPUSH
33792: CALL_OW 251
33796: ST_TO_ADDR
// for i = 0 to 5 do
33797: LD_ADDR_VAR 0 4
33801: PUSH
33802: DOUBLE
33803: LD_INT 0
33805: DEC
33806: ST_TO_ADDR
33807: LD_INT 5
33809: PUSH
33810: FOR_TO
33811: IFFALSE 33923
// begin _x := ShiftX ( x , i , 3 ) ;
33813: LD_ADDR_VAR 0 7
33817: PUSH
33818: LD_VAR 0 5
33822: PPUSH
33823: LD_VAR 0 4
33827: PPUSH
33828: LD_INT 3
33830: PPUSH
33831: CALL_OW 272
33835: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
33836: LD_ADDR_VAR 0 8
33840: PUSH
33841: LD_VAR 0 6
33845: PPUSH
33846: LD_VAR 0 4
33850: PPUSH
33851: LD_INT 3
33853: PPUSH
33854: CALL_OW 273
33858: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33859: LD_VAR 0 7
33863: PPUSH
33864: LD_VAR 0 8
33868: PPUSH
33869: CALL_OW 488
33873: NOT
33874: IFFALSE 33878
// continue ;
33876: GO 33810
// if HexInfo ( _x , _y ) = 0 then
33878: LD_VAR 0 7
33882: PPUSH
33883: LD_VAR 0 8
33887: PPUSH
33888: CALL_OW 428
33892: PUSH
33893: LD_INT 0
33895: EQUAL
33896: IFFALSE 33921
// begin ComMoveXY ( unit , _x , _y ) ;
33898: LD_VAR 0 1
33902: PPUSH
33903: LD_VAR 0 7
33907: PPUSH
33908: LD_VAR 0 8
33912: PPUSH
33913: CALL_OW 111
// exit ;
33917: POP
33918: POP
33919: GO 33925
// end ; end ;
33921: GO 33810
33923: POP
33924: POP
// end ;
33925: LD_VAR 0 3
33929: RET
// export function ScanBase ( side , base_area ) ; begin
33930: LD_INT 0
33932: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
33933: LD_ADDR_VAR 0 3
33937: PUSH
33938: LD_VAR 0 2
33942: PPUSH
33943: LD_INT 81
33945: PUSH
33946: LD_VAR 0 1
33950: PUSH
33951: EMPTY
33952: LIST
33953: LIST
33954: PPUSH
33955: CALL_OW 70
33959: ST_TO_ADDR
// end ;
33960: LD_VAR 0 3
33964: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33965: LD_INT 0
33967: PPUSH
33968: PPUSH
33969: PPUSH
33970: PPUSH
// result := false ;
33971: LD_ADDR_VAR 0 2
33975: PUSH
33976: LD_INT 0
33978: ST_TO_ADDR
// side := GetSide ( unit ) ;
33979: LD_ADDR_VAR 0 3
33983: PUSH
33984: LD_VAR 0 1
33988: PPUSH
33989: CALL_OW 255
33993: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33994: LD_ADDR_VAR 0 4
33998: PUSH
33999: LD_VAR 0 1
34003: PPUSH
34004: CALL_OW 248
34008: ST_TO_ADDR
// case nat of 1 :
34009: LD_VAR 0 4
34013: PUSH
34014: LD_INT 1
34016: DOUBLE
34017: EQUAL
34018: IFTRUE 34022
34020: GO 34033
34022: POP
// tech := tech_lassight ; 2 :
34023: LD_ADDR_VAR 0 5
34027: PUSH
34028: LD_INT 12
34030: ST_TO_ADDR
34031: GO 34072
34033: LD_INT 2
34035: DOUBLE
34036: EQUAL
34037: IFTRUE 34041
34039: GO 34052
34041: POP
// tech := tech_mortar ; 3 :
34042: LD_ADDR_VAR 0 5
34046: PUSH
34047: LD_INT 41
34049: ST_TO_ADDR
34050: GO 34072
34052: LD_INT 3
34054: DOUBLE
34055: EQUAL
34056: IFTRUE 34060
34058: GO 34071
34060: POP
// tech := tech_bazooka ; end ;
34061: LD_ADDR_VAR 0 5
34065: PUSH
34066: LD_INT 44
34068: ST_TO_ADDR
34069: GO 34072
34071: POP
// if Researched ( side , tech ) then
34072: LD_VAR 0 3
34076: PPUSH
34077: LD_VAR 0 5
34081: PPUSH
34082: CALL_OW 325
34086: IFFALSE 34113
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
34088: LD_ADDR_VAR 0 2
34092: PUSH
34093: LD_INT 5
34095: PUSH
34096: LD_INT 8
34098: PUSH
34099: LD_INT 9
34101: PUSH
34102: EMPTY
34103: LIST
34104: LIST
34105: LIST
34106: PUSH
34107: LD_VAR 0 4
34111: ARRAY
34112: ST_TO_ADDR
// end ;
34113: LD_VAR 0 2
34117: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
34118: LD_INT 0
34120: PPUSH
34121: PPUSH
34122: PPUSH
// if not mines then
34123: LD_VAR 0 2
34127: NOT
34128: IFFALSE 34132
// exit ;
34130: GO 34276
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34132: LD_ADDR_VAR 0 5
34136: PUSH
34137: LD_INT 81
34139: PUSH
34140: LD_VAR 0 1
34144: PUSH
34145: EMPTY
34146: LIST
34147: LIST
34148: PUSH
34149: LD_INT 3
34151: PUSH
34152: LD_INT 21
34154: PUSH
34155: LD_INT 3
34157: PUSH
34158: EMPTY
34159: LIST
34160: LIST
34161: PUSH
34162: EMPTY
34163: LIST
34164: LIST
34165: PUSH
34166: EMPTY
34167: LIST
34168: LIST
34169: PPUSH
34170: CALL_OW 69
34174: ST_TO_ADDR
// for i in mines do
34175: LD_ADDR_VAR 0 4
34179: PUSH
34180: LD_VAR 0 2
34184: PUSH
34185: FOR_IN
34186: IFFALSE 34274
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
34188: LD_VAR 0 4
34192: PUSH
34193: LD_INT 1
34195: ARRAY
34196: PPUSH
34197: LD_VAR 0 4
34201: PUSH
34202: LD_INT 2
34204: ARRAY
34205: PPUSH
34206: CALL_OW 458
34210: NOT
34211: IFFALSE 34215
// continue ;
34213: GO 34185
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
34215: LD_VAR 0 4
34219: PUSH
34220: LD_INT 1
34222: ARRAY
34223: PPUSH
34224: LD_VAR 0 4
34228: PUSH
34229: LD_INT 2
34231: ARRAY
34232: PPUSH
34233: CALL_OW 428
34237: PUSH
34238: LD_VAR 0 5
34242: IN
34243: IFFALSE 34272
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
34245: LD_VAR 0 4
34249: PUSH
34250: LD_INT 1
34252: ARRAY
34253: PPUSH
34254: LD_VAR 0 4
34258: PUSH
34259: LD_INT 2
34261: ARRAY
34262: PPUSH
34263: LD_VAR 0 1
34267: PPUSH
34268: CALL_OW 456
// end ;
34272: GO 34185
34274: POP
34275: POP
// end ;
34276: LD_VAR 0 3
34280: RET
// export function Count ( array ) ; var i ; begin
34281: LD_INT 0
34283: PPUSH
34284: PPUSH
// result := 0 ;
34285: LD_ADDR_VAR 0 2
34289: PUSH
34290: LD_INT 0
34292: ST_TO_ADDR
// for i in array do
34293: LD_ADDR_VAR 0 3
34297: PUSH
34298: LD_VAR 0 1
34302: PUSH
34303: FOR_IN
34304: IFFALSE 34328
// if i then
34306: LD_VAR 0 3
34310: IFFALSE 34326
// result := result + 1 ;
34312: LD_ADDR_VAR 0 2
34316: PUSH
34317: LD_VAR 0 2
34321: PUSH
34322: LD_INT 1
34324: PLUS
34325: ST_TO_ADDR
34326: GO 34303
34328: POP
34329: POP
// end ;
34330: LD_VAR 0 2
34334: RET
// export function IsEmpty ( building ) ; begin
34335: LD_INT 0
34337: PPUSH
// if not building then
34338: LD_VAR 0 1
34342: NOT
34343: IFFALSE 34347
// exit ;
34345: GO 34390
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
34347: LD_ADDR_VAR 0 2
34351: PUSH
34352: LD_VAR 0 1
34356: PUSH
34357: LD_INT 22
34359: PUSH
34360: LD_VAR 0 1
34364: PPUSH
34365: CALL_OW 255
34369: PUSH
34370: EMPTY
34371: LIST
34372: LIST
34373: PUSH
34374: LD_INT 58
34376: PUSH
34377: EMPTY
34378: LIST
34379: PUSH
34380: EMPTY
34381: LIST
34382: LIST
34383: PPUSH
34384: CALL_OW 69
34388: IN
34389: ST_TO_ADDR
// end ;
34390: LD_VAR 0 2
34394: RET
// export function IsNotFull ( building ) ; var places ; begin
34395: LD_INT 0
34397: PPUSH
34398: PPUSH
// if not building then
34399: LD_VAR 0 1
34403: NOT
34404: IFFALSE 34408
// exit ;
34406: GO 34579
// result := false ;
34408: LD_ADDR_VAR 0 2
34412: PUSH
34413: LD_INT 0
34415: ST_TO_ADDR
// places := 0 ;
34416: LD_ADDR_VAR 0 3
34420: PUSH
34421: LD_INT 0
34423: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
34424: LD_VAR 0 1
34428: PPUSH
34429: CALL_OW 266
34433: PUSH
34434: LD_INT 0
34436: DOUBLE
34437: EQUAL
34438: IFTRUE 34496
34440: LD_INT 1
34442: DOUBLE
34443: EQUAL
34444: IFTRUE 34496
34446: LD_INT 6
34448: DOUBLE
34449: EQUAL
34450: IFTRUE 34496
34452: LD_INT 7
34454: DOUBLE
34455: EQUAL
34456: IFTRUE 34496
34458: LD_INT 8
34460: DOUBLE
34461: EQUAL
34462: IFTRUE 34496
34464: LD_INT 4
34466: DOUBLE
34467: EQUAL
34468: IFTRUE 34496
34470: LD_INT 5
34472: DOUBLE
34473: EQUAL
34474: IFTRUE 34496
34476: LD_INT 2
34478: DOUBLE
34479: EQUAL
34480: IFTRUE 34496
34482: LD_INT 3
34484: DOUBLE
34485: EQUAL
34486: IFTRUE 34496
34488: LD_INT 35
34490: DOUBLE
34491: EQUAL
34492: IFTRUE 34496
34494: GO 34507
34496: POP
// places := 6 ; b_bunker , b_breastwork :
34497: LD_ADDR_VAR 0 3
34501: PUSH
34502: LD_INT 6
34504: ST_TO_ADDR
34505: GO 34552
34507: LD_INT 32
34509: DOUBLE
34510: EQUAL
34511: IFTRUE 34521
34513: LD_INT 31
34515: DOUBLE
34516: EQUAL
34517: IFTRUE 34521
34519: GO 34532
34521: POP
// places := 1 ; b_control_tower :
34522: LD_ADDR_VAR 0 3
34526: PUSH
34527: LD_INT 1
34529: ST_TO_ADDR
34530: GO 34552
34532: LD_INT 36
34534: DOUBLE
34535: EQUAL
34536: IFTRUE 34540
34538: GO 34551
34540: POP
// places := 3 ; end ;
34541: LD_ADDR_VAR 0 3
34545: PUSH
34546: LD_INT 3
34548: ST_TO_ADDR
34549: GO 34552
34551: POP
// if places then
34552: LD_VAR 0 3
34556: IFFALSE 34579
// result := UnitsInside ( building ) < places ;
34558: LD_ADDR_VAR 0 2
34562: PUSH
34563: LD_VAR 0 1
34567: PPUSH
34568: CALL_OW 313
34572: PUSH
34573: LD_VAR 0 3
34577: LESS
34578: ST_TO_ADDR
// end ;
34579: LD_VAR 0 2
34583: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
34584: LD_INT 0
34586: PPUSH
34587: PPUSH
34588: PPUSH
34589: PPUSH
// tmp := [ ] ;
34590: LD_ADDR_VAR 0 3
34594: PUSH
34595: EMPTY
34596: ST_TO_ADDR
// list := [ ] ;
34597: LD_ADDR_VAR 0 5
34601: PUSH
34602: EMPTY
34603: ST_TO_ADDR
// for i = 16 to 25 do
34604: LD_ADDR_VAR 0 4
34608: PUSH
34609: DOUBLE
34610: LD_INT 16
34612: DEC
34613: ST_TO_ADDR
34614: LD_INT 25
34616: PUSH
34617: FOR_TO
34618: IFFALSE 34691
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
34620: LD_ADDR_VAR 0 3
34624: PUSH
34625: LD_VAR 0 3
34629: PUSH
34630: LD_INT 22
34632: PUSH
34633: LD_VAR 0 1
34637: PPUSH
34638: CALL_OW 255
34642: PUSH
34643: EMPTY
34644: LIST
34645: LIST
34646: PUSH
34647: LD_INT 91
34649: PUSH
34650: LD_VAR 0 1
34654: PUSH
34655: LD_INT 6
34657: PUSH
34658: EMPTY
34659: LIST
34660: LIST
34661: LIST
34662: PUSH
34663: LD_INT 30
34665: PUSH
34666: LD_VAR 0 4
34670: PUSH
34671: EMPTY
34672: LIST
34673: LIST
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: LIST
34679: PUSH
34680: EMPTY
34681: LIST
34682: PPUSH
34683: CALL_OW 69
34687: ADD
34688: ST_TO_ADDR
34689: GO 34617
34691: POP
34692: POP
// for i = 1 to tmp do
34693: LD_ADDR_VAR 0 4
34697: PUSH
34698: DOUBLE
34699: LD_INT 1
34701: DEC
34702: ST_TO_ADDR
34703: LD_VAR 0 3
34707: PUSH
34708: FOR_TO
34709: IFFALSE 34797
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
34711: LD_ADDR_VAR 0 5
34715: PUSH
34716: LD_VAR 0 5
34720: PUSH
34721: LD_VAR 0 3
34725: PUSH
34726: LD_VAR 0 4
34730: ARRAY
34731: PPUSH
34732: CALL_OW 266
34736: PUSH
34737: LD_VAR 0 3
34741: PUSH
34742: LD_VAR 0 4
34746: ARRAY
34747: PPUSH
34748: CALL_OW 250
34752: PUSH
34753: LD_VAR 0 3
34757: PUSH
34758: LD_VAR 0 4
34762: ARRAY
34763: PPUSH
34764: CALL_OW 251
34768: PUSH
34769: LD_VAR 0 3
34773: PUSH
34774: LD_VAR 0 4
34778: ARRAY
34779: PPUSH
34780: CALL_OW 254
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: LIST
34789: LIST
34790: PUSH
34791: EMPTY
34792: LIST
34793: ADD
34794: ST_TO_ADDR
34795: GO 34708
34797: POP
34798: POP
// result := list ;
34799: LD_ADDR_VAR 0 2
34803: PUSH
34804: LD_VAR 0 5
34808: ST_TO_ADDR
// end ;
34809: LD_VAR 0 2
34813: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
34814: LD_INT 0
34816: PPUSH
34817: PPUSH
34818: PPUSH
34819: PPUSH
34820: PPUSH
34821: PPUSH
34822: PPUSH
// if not factory then
34823: LD_VAR 0 1
34827: NOT
34828: IFFALSE 34832
// exit ;
34830: GO 35425
// if control = control_apeman then
34832: LD_VAR 0 4
34836: PUSH
34837: LD_INT 5
34839: EQUAL
34840: IFFALSE 34949
// begin tmp := UnitsInside ( factory ) ;
34842: LD_ADDR_VAR 0 8
34846: PUSH
34847: LD_VAR 0 1
34851: PPUSH
34852: CALL_OW 313
34856: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
34857: LD_VAR 0 8
34861: PPUSH
34862: LD_INT 25
34864: PUSH
34865: LD_INT 12
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: PPUSH
34872: CALL_OW 72
34876: NOT
34877: IFFALSE 34887
// control := control_manual ;
34879: LD_ADDR_VAR 0 4
34883: PUSH
34884: LD_INT 1
34886: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
34887: LD_ADDR_VAR 0 8
34891: PUSH
34892: LD_VAR 0 1
34896: PPUSH
34897: CALL 34584 0 1
34901: ST_TO_ADDR
// if tmp then
34902: LD_VAR 0 8
34906: IFFALSE 34949
// begin for i in tmp do
34908: LD_ADDR_VAR 0 7
34912: PUSH
34913: LD_VAR 0 8
34917: PUSH
34918: FOR_IN
34919: IFFALSE 34947
// if i [ 1 ] = b_ext_radio then
34921: LD_VAR 0 7
34925: PUSH
34926: LD_INT 1
34928: ARRAY
34929: PUSH
34930: LD_INT 22
34932: EQUAL
34933: IFFALSE 34945
// begin control := control_remote ;
34935: LD_ADDR_VAR 0 4
34939: PUSH
34940: LD_INT 2
34942: ST_TO_ADDR
// break ;
34943: GO 34947
// end ;
34945: GO 34918
34947: POP
34948: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34949: LD_VAR 0 1
34953: PPUSH
34954: LD_VAR 0 2
34958: PPUSH
34959: LD_VAR 0 3
34963: PPUSH
34964: LD_VAR 0 4
34968: PPUSH
34969: LD_VAR 0 5
34973: PPUSH
34974: CALL_OW 448
34978: IFFALSE 35013
// begin result := [ chassis , engine , control , weapon ] ;
34980: LD_ADDR_VAR 0 6
34984: PUSH
34985: LD_VAR 0 2
34989: PUSH
34990: LD_VAR 0 3
34994: PUSH
34995: LD_VAR 0 4
34999: PUSH
35000: LD_VAR 0 5
35004: PUSH
35005: EMPTY
35006: LIST
35007: LIST
35008: LIST
35009: LIST
35010: ST_TO_ADDR
// exit ;
35011: GO 35425
// end ; _chassis := AvailableChassisList ( factory ) ;
35013: LD_ADDR_VAR 0 9
35017: PUSH
35018: LD_VAR 0 1
35022: PPUSH
35023: CALL_OW 475
35027: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
35028: LD_ADDR_VAR 0 11
35032: PUSH
35033: LD_VAR 0 1
35037: PPUSH
35038: CALL_OW 476
35042: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
35043: LD_ADDR_VAR 0 12
35047: PUSH
35048: LD_VAR 0 1
35052: PPUSH
35053: CALL_OW 477
35057: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
35058: LD_ADDR_VAR 0 10
35062: PUSH
35063: LD_VAR 0 1
35067: PPUSH
35068: CALL_OW 478
35072: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
35073: LD_VAR 0 9
35077: NOT
35078: PUSH
35079: LD_VAR 0 11
35083: NOT
35084: OR
35085: PUSH
35086: LD_VAR 0 12
35090: NOT
35091: OR
35092: PUSH
35093: LD_VAR 0 10
35097: NOT
35098: OR
35099: IFFALSE 35134
// begin result := [ chassis , engine , control , weapon ] ;
35101: LD_ADDR_VAR 0 6
35105: PUSH
35106: LD_VAR 0 2
35110: PUSH
35111: LD_VAR 0 3
35115: PUSH
35116: LD_VAR 0 4
35120: PUSH
35121: LD_VAR 0 5
35125: PUSH
35126: EMPTY
35127: LIST
35128: LIST
35129: LIST
35130: LIST
35131: ST_TO_ADDR
// exit ;
35132: GO 35425
// end ; if not chassis in _chassis then
35134: LD_VAR 0 2
35138: PUSH
35139: LD_VAR 0 9
35143: IN
35144: NOT
35145: IFFALSE 35171
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
35147: LD_ADDR_VAR 0 2
35151: PUSH
35152: LD_VAR 0 9
35156: PUSH
35157: LD_INT 1
35159: PPUSH
35160: LD_VAR 0 9
35164: PPUSH
35165: CALL_OW 12
35169: ARRAY
35170: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
35171: LD_VAR 0 2
35175: PPUSH
35176: LD_VAR 0 3
35180: PPUSH
35181: CALL 35430 0 2
35185: NOT
35186: IFFALSE 35245
// repeat engine := _engine [ 1 ] ;
35188: LD_ADDR_VAR 0 3
35192: PUSH
35193: LD_VAR 0 11
35197: PUSH
35198: LD_INT 1
35200: ARRAY
35201: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
35202: LD_ADDR_VAR 0 11
35206: PUSH
35207: LD_VAR 0 11
35211: PPUSH
35212: LD_INT 1
35214: PPUSH
35215: CALL_OW 3
35219: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
35220: LD_VAR 0 2
35224: PPUSH
35225: LD_VAR 0 3
35229: PPUSH
35230: CALL 35430 0 2
35234: PUSH
35235: LD_VAR 0 11
35239: PUSH
35240: EMPTY
35241: EQUAL
35242: OR
35243: IFFALSE 35188
// if not control in _control then
35245: LD_VAR 0 4
35249: PUSH
35250: LD_VAR 0 12
35254: IN
35255: NOT
35256: IFFALSE 35282
// control := _control [ rand ( 1 , _control ) ] ;
35258: LD_ADDR_VAR 0 4
35262: PUSH
35263: LD_VAR 0 12
35267: PUSH
35268: LD_INT 1
35270: PPUSH
35271: LD_VAR 0 12
35275: PPUSH
35276: CALL_OW 12
35280: ARRAY
35281: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
35282: LD_VAR 0 2
35286: PPUSH
35287: LD_VAR 0 5
35291: PPUSH
35292: CALL 35650 0 2
35296: NOT
35297: IFFALSE 35356
// repeat weapon := _weapon [ 1 ] ;
35299: LD_ADDR_VAR 0 5
35303: PUSH
35304: LD_VAR 0 10
35308: PUSH
35309: LD_INT 1
35311: ARRAY
35312: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
35313: LD_ADDR_VAR 0 10
35317: PUSH
35318: LD_VAR 0 10
35322: PPUSH
35323: LD_INT 1
35325: PPUSH
35326: CALL_OW 3
35330: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
35331: LD_VAR 0 2
35335: PPUSH
35336: LD_VAR 0 5
35340: PPUSH
35341: CALL 35650 0 2
35345: PUSH
35346: LD_VAR 0 10
35350: PUSH
35351: EMPTY
35352: EQUAL
35353: OR
35354: IFFALSE 35299
// result := [ ] ;
35356: LD_ADDR_VAR 0 6
35360: PUSH
35361: EMPTY
35362: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35363: LD_VAR 0 1
35367: PPUSH
35368: LD_VAR 0 2
35372: PPUSH
35373: LD_VAR 0 3
35377: PPUSH
35378: LD_VAR 0 4
35382: PPUSH
35383: LD_VAR 0 5
35387: PPUSH
35388: CALL_OW 448
35392: IFFALSE 35425
// result := [ chassis , engine , control , weapon ] ;
35394: LD_ADDR_VAR 0 6
35398: PUSH
35399: LD_VAR 0 2
35403: PUSH
35404: LD_VAR 0 3
35408: PUSH
35409: LD_VAR 0 4
35413: PUSH
35414: LD_VAR 0 5
35418: PUSH
35419: EMPTY
35420: LIST
35421: LIST
35422: LIST
35423: LIST
35424: ST_TO_ADDR
// end ;
35425: LD_VAR 0 6
35429: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
35430: LD_INT 0
35432: PPUSH
// if not chassis or not engine then
35433: LD_VAR 0 1
35437: NOT
35438: PUSH
35439: LD_VAR 0 2
35443: NOT
35444: OR
35445: IFFALSE 35449
// exit ;
35447: GO 35645
// case engine of engine_solar :
35449: LD_VAR 0 2
35453: PUSH
35454: LD_INT 2
35456: DOUBLE
35457: EQUAL
35458: IFTRUE 35462
35460: GO 35500
35462: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
35463: LD_ADDR_VAR 0 3
35467: PUSH
35468: LD_INT 11
35470: PUSH
35471: LD_INT 12
35473: PUSH
35474: LD_INT 13
35476: PUSH
35477: LD_INT 14
35479: PUSH
35480: LD_INT 1
35482: PUSH
35483: LD_INT 2
35485: PUSH
35486: LD_INT 3
35488: PUSH
35489: EMPTY
35490: LIST
35491: LIST
35492: LIST
35493: LIST
35494: LIST
35495: LIST
35496: LIST
35497: ST_TO_ADDR
35498: GO 35629
35500: LD_INT 1
35502: DOUBLE
35503: EQUAL
35504: IFTRUE 35508
35506: GO 35570
35508: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
35509: LD_ADDR_VAR 0 3
35513: PUSH
35514: LD_INT 11
35516: PUSH
35517: LD_INT 12
35519: PUSH
35520: LD_INT 13
35522: PUSH
35523: LD_INT 14
35525: PUSH
35526: LD_INT 1
35528: PUSH
35529: LD_INT 2
35531: PUSH
35532: LD_INT 3
35534: PUSH
35535: LD_INT 4
35537: PUSH
35538: LD_INT 5
35540: PUSH
35541: LD_INT 21
35543: PUSH
35544: LD_INT 23
35546: PUSH
35547: LD_INT 22
35549: PUSH
35550: LD_INT 24
35552: PUSH
35553: EMPTY
35554: LIST
35555: LIST
35556: LIST
35557: LIST
35558: LIST
35559: LIST
35560: LIST
35561: LIST
35562: LIST
35563: LIST
35564: LIST
35565: LIST
35566: LIST
35567: ST_TO_ADDR
35568: GO 35629
35570: LD_INT 3
35572: DOUBLE
35573: EQUAL
35574: IFTRUE 35578
35576: GO 35628
35578: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35579: LD_ADDR_VAR 0 3
35583: PUSH
35584: LD_INT 13
35586: PUSH
35587: LD_INT 14
35589: PUSH
35590: LD_INT 2
35592: PUSH
35593: LD_INT 3
35595: PUSH
35596: LD_INT 4
35598: PUSH
35599: LD_INT 5
35601: PUSH
35602: LD_INT 21
35604: PUSH
35605: LD_INT 22
35607: PUSH
35608: LD_INT 23
35610: PUSH
35611: LD_INT 24
35613: PUSH
35614: EMPTY
35615: LIST
35616: LIST
35617: LIST
35618: LIST
35619: LIST
35620: LIST
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: ST_TO_ADDR
35626: GO 35629
35628: POP
// result := ( chassis in result ) ;
35629: LD_ADDR_VAR 0 3
35633: PUSH
35634: LD_VAR 0 1
35638: PUSH
35639: LD_VAR 0 3
35643: IN
35644: ST_TO_ADDR
// end ;
35645: LD_VAR 0 3
35649: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
35650: LD_INT 0
35652: PPUSH
// if not chassis or not weapon then
35653: LD_VAR 0 1
35657: NOT
35658: PUSH
35659: LD_VAR 0 2
35663: NOT
35664: OR
35665: IFFALSE 35669
// exit ;
35667: GO 36729
// case weapon of us_machine_gun :
35669: LD_VAR 0 2
35673: PUSH
35674: LD_INT 2
35676: DOUBLE
35677: EQUAL
35678: IFTRUE 35682
35680: GO 35712
35682: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
35683: LD_ADDR_VAR 0 3
35687: PUSH
35688: LD_INT 1
35690: PUSH
35691: LD_INT 2
35693: PUSH
35694: LD_INT 3
35696: PUSH
35697: LD_INT 4
35699: PUSH
35700: LD_INT 5
35702: PUSH
35703: EMPTY
35704: LIST
35705: LIST
35706: LIST
35707: LIST
35708: LIST
35709: ST_TO_ADDR
35710: GO 36713
35712: LD_INT 3
35714: DOUBLE
35715: EQUAL
35716: IFTRUE 35720
35718: GO 35750
35720: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
35721: LD_ADDR_VAR 0 3
35725: PUSH
35726: LD_INT 1
35728: PUSH
35729: LD_INT 2
35731: PUSH
35732: LD_INT 3
35734: PUSH
35735: LD_INT 4
35737: PUSH
35738: LD_INT 5
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: LIST
35745: LIST
35746: LIST
35747: ST_TO_ADDR
35748: GO 36713
35750: LD_INT 11
35752: DOUBLE
35753: EQUAL
35754: IFTRUE 35758
35756: GO 35788
35758: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
35759: LD_ADDR_VAR 0 3
35763: PUSH
35764: LD_INT 1
35766: PUSH
35767: LD_INT 2
35769: PUSH
35770: LD_INT 3
35772: PUSH
35773: LD_INT 4
35775: PUSH
35776: LD_INT 5
35778: PUSH
35779: EMPTY
35780: LIST
35781: LIST
35782: LIST
35783: LIST
35784: LIST
35785: ST_TO_ADDR
35786: GO 36713
35788: LD_INT 4
35790: DOUBLE
35791: EQUAL
35792: IFTRUE 35796
35794: GO 35822
35796: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
35797: LD_ADDR_VAR 0 3
35801: PUSH
35802: LD_INT 2
35804: PUSH
35805: LD_INT 3
35807: PUSH
35808: LD_INT 4
35810: PUSH
35811: LD_INT 5
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: LIST
35818: LIST
35819: ST_TO_ADDR
35820: GO 36713
35822: LD_INT 5
35824: DOUBLE
35825: EQUAL
35826: IFTRUE 35830
35828: GO 35856
35830: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
35831: LD_ADDR_VAR 0 3
35835: PUSH
35836: LD_INT 2
35838: PUSH
35839: LD_INT 3
35841: PUSH
35842: LD_INT 4
35844: PUSH
35845: LD_INT 5
35847: PUSH
35848: EMPTY
35849: LIST
35850: LIST
35851: LIST
35852: LIST
35853: ST_TO_ADDR
35854: GO 36713
35856: LD_INT 9
35858: DOUBLE
35859: EQUAL
35860: IFTRUE 35864
35862: GO 35890
35864: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
35865: LD_ADDR_VAR 0 3
35869: PUSH
35870: LD_INT 2
35872: PUSH
35873: LD_INT 3
35875: PUSH
35876: LD_INT 4
35878: PUSH
35879: LD_INT 5
35881: PUSH
35882: EMPTY
35883: LIST
35884: LIST
35885: LIST
35886: LIST
35887: ST_TO_ADDR
35888: GO 36713
35890: LD_INT 7
35892: DOUBLE
35893: EQUAL
35894: IFTRUE 35898
35896: GO 35924
35898: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
35899: LD_ADDR_VAR 0 3
35903: PUSH
35904: LD_INT 2
35906: PUSH
35907: LD_INT 3
35909: PUSH
35910: LD_INT 4
35912: PUSH
35913: LD_INT 5
35915: PUSH
35916: EMPTY
35917: LIST
35918: LIST
35919: LIST
35920: LIST
35921: ST_TO_ADDR
35922: GO 36713
35924: LD_INT 12
35926: DOUBLE
35927: EQUAL
35928: IFTRUE 35932
35930: GO 35958
35932: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
35933: LD_ADDR_VAR 0 3
35937: PUSH
35938: LD_INT 2
35940: PUSH
35941: LD_INT 3
35943: PUSH
35944: LD_INT 4
35946: PUSH
35947: LD_INT 5
35949: PUSH
35950: EMPTY
35951: LIST
35952: LIST
35953: LIST
35954: LIST
35955: ST_TO_ADDR
35956: GO 36713
35958: LD_INT 13
35960: DOUBLE
35961: EQUAL
35962: IFTRUE 35966
35964: GO 35992
35966: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
35967: LD_ADDR_VAR 0 3
35971: PUSH
35972: LD_INT 2
35974: PUSH
35975: LD_INT 3
35977: PUSH
35978: LD_INT 4
35980: PUSH
35981: LD_INT 5
35983: PUSH
35984: EMPTY
35985: LIST
35986: LIST
35987: LIST
35988: LIST
35989: ST_TO_ADDR
35990: GO 36713
35992: LD_INT 14
35994: DOUBLE
35995: EQUAL
35996: IFTRUE 36000
35998: GO 36018
36000: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
36001: LD_ADDR_VAR 0 3
36005: PUSH
36006: LD_INT 4
36008: PUSH
36009: LD_INT 5
36011: PUSH
36012: EMPTY
36013: LIST
36014: LIST
36015: ST_TO_ADDR
36016: GO 36713
36018: LD_INT 6
36020: DOUBLE
36021: EQUAL
36022: IFTRUE 36026
36024: GO 36044
36026: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
36027: LD_ADDR_VAR 0 3
36031: PUSH
36032: LD_INT 4
36034: PUSH
36035: LD_INT 5
36037: PUSH
36038: EMPTY
36039: LIST
36040: LIST
36041: ST_TO_ADDR
36042: GO 36713
36044: LD_INT 10
36046: DOUBLE
36047: EQUAL
36048: IFTRUE 36052
36050: GO 36070
36052: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
36053: LD_ADDR_VAR 0 3
36057: PUSH
36058: LD_INT 4
36060: PUSH
36061: LD_INT 5
36063: PUSH
36064: EMPTY
36065: LIST
36066: LIST
36067: ST_TO_ADDR
36068: GO 36713
36070: LD_INT 22
36072: DOUBLE
36073: EQUAL
36074: IFTRUE 36078
36076: GO 36104
36078: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
36079: LD_ADDR_VAR 0 3
36083: PUSH
36084: LD_INT 11
36086: PUSH
36087: LD_INT 12
36089: PUSH
36090: LD_INT 13
36092: PUSH
36093: LD_INT 14
36095: PUSH
36096: EMPTY
36097: LIST
36098: LIST
36099: LIST
36100: LIST
36101: ST_TO_ADDR
36102: GO 36713
36104: LD_INT 23
36106: DOUBLE
36107: EQUAL
36108: IFTRUE 36112
36110: GO 36138
36112: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
36113: LD_ADDR_VAR 0 3
36117: PUSH
36118: LD_INT 11
36120: PUSH
36121: LD_INT 12
36123: PUSH
36124: LD_INT 13
36126: PUSH
36127: LD_INT 14
36129: PUSH
36130: EMPTY
36131: LIST
36132: LIST
36133: LIST
36134: LIST
36135: ST_TO_ADDR
36136: GO 36713
36138: LD_INT 24
36140: DOUBLE
36141: EQUAL
36142: IFTRUE 36146
36144: GO 36172
36146: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
36147: LD_ADDR_VAR 0 3
36151: PUSH
36152: LD_INT 11
36154: PUSH
36155: LD_INT 12
36157: PUSH
36158: LD_INT 13
36160: PUSH
36161: LD_INT 14
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: LIST
36168: LIST
36169: ST_TO_ADDR
36170: GO 36713
36172: LD_INT 30
36174: DOUBLE
36175: EQUAL
36176: IFTRUE 36180
36178: GO 36206
36180: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
36181: LD_ADDR_VAR 0 3
36185: PUSH
36186: LD_INT 11
36188: PUSH
36189: LD_INT 12
36191: PUSH
36192: LD_INT 13
36194: PUSH
36195: LD_INT 14
36197: PUSH
36198: EMPTY
36199: LIST
36200: LIST
36201: LIST
36202: LIST
36203: ST_TO_ADDR
36204: GO 36713
36206: LD_INT 25
36208: DOUBLE
36209: EQUAL
36210: IFTRUE 36214
36212: GO 36232
36214: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
36215: LD_ADDR_VAR 0 3
36219: PUSH
36220: LD_INT 13
36222: PUSH
36223: LD_INT 14
36225: PUSH
36226: EMPTY
36227: LIST
36228: LIST
36229: ST_TO_ADDR
36230: GO 36713
36232: LD_INT 27
36234: DOUBLE
36235: EQUAL
36236: IFTRUE 36240
36238: GO 36258
36240: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
36241: LD_ADDR_VAR 0 3
36245: PUSH
36246: LD_INT 13
36248: PUSH
36249: LD_INT 14
36251: PUSH
36252: EMPTY
36253: LIST
36254: LIST
36255: ST_TO_ADDR
36256: GO 36713
36258: LD_INT 92
36260: DOUBLE
36261: EQUAL
36262: IFTRUE 36266
36264: GO 36292
36266: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
36267: LD_ADDR_VAR 0 3
36271: PUSH
36272: LD_INT 11
36274: PUSH
36275: LD_INT 12
36277: PUSH
36278: LD_INT 13
36280: PUSH
36281: LD_INT 14
36283: PUSH
36284: EMPTY
36285: LIST
36286: LIST
36287: LIST
36288: LIST
36289: ST_TO_ADDR
36290: GO 36713
36292: LD_INT 28
36294: DOUBLE
36295: EQUAL
36296: IFTRUE 36300
36298: GO 36318
36300: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
36301: LD_ADDR_VAR 0 3
36305: PUSH
36306: LD_INT 13
36308: PUSH
36309: LD_INT 14
36311: PUSH
36312: EMPTY
36313: LIST
36314: LIST
36315: ST_TO_ADDR
36316: GO 36713
36318: LD_INT 29
36320: DOUBLE
36321: EQUAL
36322: IFTRUE 36326
36324: GO 36344
36326: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
36327: LD_ADDR_VAR 0 3
36331: PUSH
36332: LD_INT 13
36334: PUSH
36335: LD_INT 14
36337: PUSH
36338: EMPTY
36339: LIST
36340: LIST
36341: ST_TO_ADDR
36342: GO 36713
36344: LD_INT 31
36346: DOUBLE
36347: EQUAL
36348: IFTRUE 36352
36350: GO 36370
36352: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
36353: LD_ADDR_VAR 0 3
36357: PUSH
36358: LD_INT 13
36360: PUSH
36361: LD_INT 14
36363: PUSH
36364: EMPTY
36365: LIST
36366: LIST
36367: ST_TO_ADDR
36368: GO 36713
36370: LD_INT 26
36372: DOUBLE
36373: EQUAL
36374: IFTRUE 36378
36376: GO 36396
36378: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
36379: LD_ADDR_VAR 0 3
36383: PUSH
36384: LD_INT 13
36386: PUSH
36387: LD_INT 14
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: ST_TO_ADDR
36394: GO 36713
36396: LD_INT 42
36398: DOUBLE
36399: EQUAL
36400: IFTRUE 36404
36402: GO 36430
36404: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
36405: LD_ADDR_VAR 0 3
36409: PUSH
36410: LD_INT 21
36412: PUSH
36413: LD_INT 22
36415: PUSH
36416: LD_INT 23
36418: PUSH
36419: LD_INT 24
36421: PUSH
36422: EMPTY
36423: LIST
36424: LIST
36425: LIST
36426: LIST
36427: ST_TO_ADDR
36428: GO 36713
36430: LD_INT 43
36432: DOUBLE
36433: EQUAL
36434: IFTRUE 36438
36436: GO 36464
36438: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
36439: LD_ADDR_VAR 0 3
36443: PUSH
36444: LD_INT 21
36446: PUSH
36447: LD_INT 22
36449: PUSH
36450: LD_INT 23
36452: PUSH
36453: LD_INT 24
36455: PUSH
36456: EMPTY
36457: LIST
36458: LIST
36459: LIST
36460: LIST
36461: ST_TO_ADDR
36462: GO 36713
36464: LD_INT 44
36466: DOUBLE
36467: EQUAL
36468: IFTRUE 36472
36470: GO 36498
36472: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
36473: LD_ADDR_VAR 0 3
36477: PUSH
36478: LD_INT 21
36480: PUSH
36481: LD_INT 22
36483: PUSH
36484: LD_INT 23
36486: PUSH
36487: LD_INT 24
36489: PUSH
36490: EMPTY
36491: LIST
36492: LIST
36493: LIST
36494: LIST
36495: ST_TO_ADDR
36496: GO 36713
36498: LD_INT 45
36500: DOUBLE
36501: EQUAL
36502: IFTRUE 36506
36504: GO 36532
36506: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
36507: LD_ADDR_VAR 0 3
36511: PUSH
36512: LD_INT 21
36514: PUSH
36515: LD_INT 22
36517: PUSH
36518: LD_INT 23
36520: PUSH
36521: LD_INT 24
36523: PUSH
36524: EMPTY
36525: LIST
36526: LIST
36527: LIST
36528: LIST
36529: ST_TO_ADDR
36530: GO 36713
36532: LD_INT 49
36534: DOUBLE
36535: EQUAL
36536: IFTRUE 36540
36538: GO 36566
36540: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
36541: LD_ADDR_VAR 0 3
36545: PUSH
36546: LD_INT 21
36548: PUSH
36549: LD_INT 22
36551: PUSH
36552: LD_INT 23
36554: PUSH
36555: LD_INT 24
36557: PUSH
36558: EMPTY
36559: LIST
36560: LIST
36561: LIST
36562: LIST
36563: ST_TO_ADDR
36564: GO 36713
36566: LD_INT 51
36568: DOUBLE
36569: EQUAL
36570: IFTRUE 36574
36572: GO 36600
36574: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
36575: LD_ADDR_VAR 0 3
36579: PUSH
36580: LD_INT 21
36582: PUSH
36583: LD_INT 22
36585: PUSH
36586: LD_INT 23
36588: PUSH
36589: LD_INT 24
36591: PUSH
36592: EMPTY
36593: LIST
36594: LIST
36595: LIST
36596: LIST
36597: ST_TO_ADDR
36598: GO 36713
36600: LD_INT 52
36602: DOUBLE
36603: EQUAL
36604: IFTRUE 36608
36606: GO 36634
36608: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
36609: LD_ADDR_VAR 0 3
36613: PUSH
36614: LD_INT 21
36616: PUSH
36617: LD_INT 22
36619: PUSH
36620: LD_INT 23
36622: PUSH
36623: LD_INT 24
36625: PUSH
36626: EMPTY
36627: LIST
36628: LIST
36629: LIST
36630: LIST
36631: ST_TO_ADDR
36632: GO 36713
36634: LD_INT 53
36636: DOUBLE
36637: EQUAL
36638: IFTRUE 36642
36640: GO 36660
36642: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
36643: LD_ADDR_VAR 0 3
36647: PUSH
36648: LD_INT 23
36650: PUSH
36651: LD_INT 24
36653: PUSH
36654: EMPTY
36655: LIST
36656: LIST
36657: ST_TO_ADDR
36658: GO 36713
36660: LD_INT 46
36662: DOUBLE
36663: EQUAL
36664: IFTRUE 36668
36666: GO 36686
36668: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
36669: LD_ADDR_VAR 0 3
36673: PUSH
36674: LD_INT 23
36676: PUSH
36677: LD_INT 24
36679: PUSH
36680: EMPTY
36681: LIST
36682: LIST
36683: ST_TO_ADDR
36684: GO 36713
36686: LD_INT 47
36688: DOUBLE
36689: EQUAL
36690: IFTRUE 36694
36692: GO 36712
36694: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36695: LD_ADDR_VAR 0 3
36699: PUSH
36700: LD_INT 23
36702: PUSH
36703: LD_INT 24
36705: PUSH
36706: EMPTY
36707: LIST
36708: LIST
36709: ST_TO_ADDR
36710: GO 36713
36712: POP
// result := ( chassis in result ) ;
36713: LD_ADDR_VAR 0 3
36717: PUSH
36718: LD_VAR 0 1
36722: PUSH
36723: LD_VAR 0 3
36727: IN
36728: ST_TO_ADDR
// end ;
36729: LD_VAR 0 3
36733: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
36734: LD_INT 0
36736: PPUSH
36737: PPUSH
36738: PPUSH
36739: PPUSH
36740: PPUSH
36741: PPUSH
36742: PPUSH
// result := array ;
36743: LD_ADDR_VAR 0 5
36747: PUSH
36748: LD_VAR 0 1
36752: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
36753: LD_VAR 0 1
36757: NOT
36758: PUSH
36759: LD_VAR 0 2
36763: NOT
36764: OR
36765: PUSH
36766: LD_VAR 0 3
36770: NOT
36771: OR
36772: PUSH
36773: LD_VAR 0 2
36777: PUSH
36778: LD_VAR 0 1
36782: GREATER
36783: OR
36784: PUSH
36785: LD_VAR 0 3
36789: PUSH
36790: LD_VAR 0 1
36794: GREATER
36795: OR
36796: IFFALSE 36800
// exit ;
36798: GO 37096
// if direction then
36800: LD_VAR 0 4
36804: IFFALSE 36868
// begin d := 1 ;
36806: LD_ADDR_VAR 0 9
36810: PUSH
36811: LD_INT 1
36813: ST_TO_ADDR
// if i_from > i_to then
36814: LD_VAR 0 2
36818: PUSH
36819: LD_VAR 0 3
36823: GREATER
36824: IFFALSE 36850
// length := ( array - i_from ) + i_to else
36826: LD_ADDR_VAR 0 11
36830: PUSH
36831: LD_VAR 0 1
36835: PUSH
36836: LD_VAR 0 2
36840: MINUS
36841: PUSH
36842: LD_VAR 0 3
36846: PLUS
36847: ST_TO_ADDR
36848: GO 36866
// length := i_to - i_from ;
36850: LD_ADDR_VAR 0 11
36854: PUSH
36855: LD_VAR 0 3
36859: PUSH
36860: LD_VAR 0 2
36864: MINUS
36865: ST_TO_ADDR
// end else
36866: GO 36929
// begin d := - 1 ;
36868: LD_ADDR_VAR 0 9
36872: PUSH
36873: LD_INT 1
36875: NEG
36876: ST_TO_ADDR
// if i_from > i_to then
36877: LD_VAR 0 2
36881: PUSH
36882: LD_VAR 0 3
36886: GREATER
36887: IFFALSE 36907
// length := i_from - i_to else
36889: LD_ADDR_VAR 0 11
36893: PUSH
36894: LD_VAR 0 2
36898: PUSH
36899: LD_VAR 0 3
36903: MINUS
36904: ST_TO_ADDR
36905: GO 36929
// length := ( array - i_to ) + i_from ;
36907: LD_ADDR_VAR 0 11
36911: PUSH
36912: LD_VAR 0 1
36916: PUSH
36917: LD_VAR 0 3
36921: MINUS
36922: PUSH
36923: LD_VAR 0 2
36927: PLUS
36928: ST_TO_ADDR
// end ; if not length then
36929: LD_VAR 0 11
36933: NOT
36934: IFFALSE 36938
// exit ;
36936: GO 37096
// tmp := array ;
36938: LD_ADDR_VAR 0 10
36942: PUSH
36943: LD_VAR 0 1
36947: ST_TO_ADDR
// for i = 1 to length do
36948: LD_ADDR_VAR 0 6
36952: PUSH
36953: DOUBLE
36954: LD_INT 1
36956: DEC
36957: ST_TO_ADDR
36958: LD_VAR 0 11
36962: PUSH
36963: FOR_TO
36964: IFFALSE 37084
// begin for j = 1 to array do
36966: LD_ADDR_VAR 0 7
36970: PUSH
36971: DOUBLE
36972: LD_INT 1
36974: DEC
36975: ST_TO_ADDR
36976: LD_VAR 0 1
36980: PUSH
36981: FOR_TO
36982: IFFALSE 37070
// begin k := j + d ;
36984: LD_ADDR_VAR 0 8
36988: PUSH
36989: LD_VAR 0 7
36993: PUSH
36994: LD_VAR 0 9
36998: PLUS
36999: ST_TO_ADDR
// if k > array then
37000: LD_VAR 0 8
37004: PUSH
37005: LD_VAR 0 1
37009: GREATER
37010: IFFALSE 37020
// k := 1 ;
37012: LD_ADDR_VAR 0 8
37016: PUSH
37017: LD_INT 1
37019: ST_TO_ADDR
// if not k then
37020: LD_VAR 0 8
37024: NOT
37025: IFFALSE 37037
// k := array ;
37027: LD_ADDR_VAR 0 8
37031: PUSH
37032: LD_VAR 0 1
37036: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
37037: LD_ADDR_VAR 0 10
37041: PUSH
37042: LD_VAR 0 10
37046: PPUSH
37047: LD_VAR 0 8
37051: PPUSH
37052: LD_VAR 0 1
37056: PUSH
37057: LD_VAR 0 7
37061: ARRAY
37062: PPUSH
37063: CALL_OW 1
37067: ST_TO_ADDR
// end ;
37068: GO 36981
37070: POP
37071: POP
// array := tmp ;
37072: LD_ADDR_VAR 0 1
37076: PUSH
37077: LD_VAR 0 10
37081: ST_TO_ADDR
// end ;
37082: GO 36963
37084: POP
37085: POP
// result := array ;
37086: LD_ADDR_VAR 0 5
37090: PUSH
37091: LD_VAR 0 1
37095: ST_TO_ADDR
// end ;
37096: LD_VAR 0 5
37100: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
37101: LD_INT 0
37103: PPUSH
37104: PPUSH
// result := 0 ;
37105: LD_ADDR_VAR 0 3
37109: PUSH
37110: LD_INT 0
37112: ST_TO_ADDR
// if not array or not value in array then
37113: LD_VAR 0 1
37117: NOT
37118: PUSH
37119: LD_VAR 0 2
37123: PUSH
37124: LD_VAR 0 1
37128: IN
37129: NOT
37130: OR
37131: IFFALSE 37135
// exit ;
37133: GO 37189
// for i = 1 to array do
37135: LD_ADDR_VAR 0 4
37139: PUSH
37140: DOUBLE
37141: LD_INT 1
37143: DEC
37144: ST_TO_ADDR
37145: LD_VAR 0 1
37149: PUSH
37150: FOR_TO
37151: IFFALSE 37187
// if value = array [ i ] then
37153: LD_VAR 0 2
37157: PUSH
37158: LD_VAR 0 1
37162: PUSH
37163: LD_VAR 0 4
37167: ARRAY
37168: EQUAL
37169: IFFALSE 37185
// begin result := i ;
37171: LD_ADDR_VAR 0 3
37175: PUSH
37176: LD_VAR 0 4
37180: ST_TO_ADDR
// exit ;
37181: POP
37182: POP
37183: GO 37189
// end ;
37185: GO 37150
37187: POP
37188: POP
// end ;
37189: LD_VAR 0 3
37193: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
37194: LD_INT 0
37196: PPUSH
// vc_chassis := chassis ;
37197: LD_ADDR_OWVAR 37
37201: PUSH
37202: LD_VAR 0 1
37206: ST_TO_ADDR
// vc_engine := engine ;
37207: LD_ADDR_OWVAR 39
37211: PUSH
37212: LD_VAR 0 2
37216: ST_TO_ADDR
// vc_control := control ;
37217: LD_ADDR_OWVAR 38
37221: PUSH
37222: LD_VAR 0 3
37226: ST_TO_ADDR
// vc_weapon := weapon ;
37227: LD_ADDR_OWVAR 40
37231: PUSH
37232: LD_VAR 0 4
37236: ST_TO_ADDR
// vc_fuel_battery := fuel ;
37237: LD_ADDR_OWVAR 41
37241: PUSH
37242: LD_VAR 0 5
37246: ST_TO_ADDR
// end ;
37247: LD_VAR 0 6
37251: RET
// export function WantPlant ( unit ) ; var task ; begin
37252: LD_INT 0
37254: PPUSH
37255: PPUSH
// result := false ;
37256: LD_ADDR_VAR 0 2
37260: PUSH
37261: LD_INT 0
37263: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
37264: LD_ADDR_VAR 0 3
37268: PUSH
37269: LD_VAR 0 1
37273: PPUSH
37274: CALL_OW 437
37278: ST_TO_ADDR
// if task then
37279: LD_VAR 0 3
37283: IFFALSE 37311
// if task [ 1 ] [ 1 ] = p then
37285: LD_VAR 0 3
37289: PUSH
37290: LD_INT 1
37292: ARRAY
37293: PUSH
37294: LD_INT 1
37296: ARRAY
37297: PUSH
37298: LD_STRING p
37300: EQUAL
37301: IFFALSE 37311
// result := true ;
37303: LD_ADDR_VAR 0 2
37307: PUSH
37308: LD_INT 1
37310: ST_TO_ADDR
// end ;
37311: LD_VAR 0 2
37315: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
37316: LD_INT 0
37318: PPUSH
37319: PPUSH
37320: PPUSH
37321: PPUSH
// if pos < 1 then
37322: LD_VAR 0 2
37326: PUSH
37327: LD_INT 1
37329: LESS
37330: IFFALSE 37334
// exit ;
37332: GO 37637
// if pos = 1 then
37334: LD_VAR 0 2
37338: PUSH
37339: LD_INT 1
37341: EQUAL
37342: IFFALSE 37375
// result := Replace ( arr , pos [ 1 ] , value ) else
37344: LD_ADDR_VAR 0 4
37348: PUSH
37349: LD_VAR 0 1
37353: PPUSH
37354: LD_VAR 0 2
37358: PUSH
37359: LD_INT 1
37361: ARRAY
37362: PPUSH
37363: LD_VAR 0 3
37367: PPUSH
37368: CALL_OW 1
37372: ST_TO_ADDR
37373: GO 37637
// begin tmp := arr ;
37375: LD_ADDR_VAR 0 6
37379: PUSH
37380: LD_VAR 0 1
37384: ST_TO_ADDR
// s_arr := [ tmp ] ;
37385: LD_ADDR_VAR 0 7
37389: PUSH
37390: LD_VAR 0 6
37394: PUSH
37395: EMPTY
37396: LIST
37397: ST_TO_ADDR
// for i = 1 to pos - 1 do
37398: LD_ADDR_VAR 0 5
37402: PUSH
37403: DOUBLE
37404: LD_INT 1
37406: DEC
37407: ST_TO_ADDR
37408: LD_VAR 0 2
37412: PUSH
37413: LD_INT 1
37415: MINUS
37416: PUSH
37417: FOR_TO
37418: IFFALSE 37463
// begin tmp := tmp [ pos [ i ] ] ;
37420: LD_ADDR_VAR 0 6
37424: PUSH
37425: LD_VAR 0 6
37429: PUSH
37430: LD_VAR 0 2
37434: PUSH
37435: LD_VAR 0 5
37439: ARRAY
37440: ARRAY
37441: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
37442: LD_ADDR_VAR 0 7
37446: PUSH
37447: LD_VAR 0 7
37451: PUSH
37452: LD_VAR 0 6
37456: PUSH
37457: EMPTY
37458: LIST
37459: ADD
37460: ST_TO_ADDR
// end ;
37461: GO 37417
37463: POP
37464: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
37465: LD_ADDR_VAR 0 6
37469: PUSH
37470: LD_VAR 0 6
37474: PPUSH
37475: LD_VAR 0 2
37479: PUSH
37480: LD_VAR 0 2
37484: ARRAY
37485: PPUSH
37486: LD_VAR 0 3
37490: PPUSH
37491: CALL_OW 1
37495: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
37496: LD_ADDR_VAR 0 7
37500: PUSH
37501: LD_VAR 0 7
37505: PPUSH
37506: LD_VAR 0 7
37510: PPUSH
37511: LD_VAR 0 6
37515: PPUSH
37516: CALL_OW 1
37520: ST_TO_ADDR
// for i = s_arr downto 2 do
37521: LD_ADDR_VAR 0 5
37525: PUSH
37526: DOUBLE
37527: LD_VAR 0 7
37531: INC
37532: ST_TO_ADDR
37533: LD_INT 2
37535: PUSH
37536: FOR_DOWNTO
37537: IFFALSE 37621
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
37539: LD_ADDR_VAR 0 6
37543: PUSH
37544: LD_VAR 0 7
37548: PUSH
37549: LD_VAR 0 5
37553: PUSH
37554: LD_INT 1
37556: MINUS
37557: ARRAY
37558: PPUSH
37559: LD_VAR 0 2
37563: PUSH
37564: LD_VAR 0 5
37568: PUSH
37569: LD_INT 1
37571: MINUS
37572: ARRAY
37573: PPUSH
37574: LD_VAR 0 7
37578: PUSH
37579: LD_VAR 0 5
37583: ARRAY
37584: PPUSH
37585: CALL_OW 1
37589: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
37590: LD_ADDR_VAR 0 7
37594: PUSH
37595: LD_VAR 0 7
37599: PPUSH
37600: LD_VAR 0 5
37604: PUSH
37605: LD_INT 1
37607: MINUS
37608: PPUSH
37609: LD_VAR 0 6
37613: PPUSH
37614: CALL_OW 1
37618: ST_TO_ADDR
// end ;
37619: GO 37536
37621: POP
37622: POP
// result := s_arr [ 1 ] ;
37623: LD_ADDR_VAR 0 4
37627: PUSH
37628: LD_VAR 0 7
37632: PUSH
37633: LD_INT 1
37635: ARRAY
37636: ST_TO_ADDR
// end ; end ;
37637: LD_VAR 0 4
37641: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
37642: LD_INT 0
37644: PPUSH
37645: PPUSH
// if not list then
37646: LD_VAR 0 1
37650: NOT
37651: IFFALSE 37655
// exit ;
37653: GO 37746
// i := list [ pos1 ] ;
37655: LD_ADDR_VAR 0 5
37659: PUSH
37660: LD_VAR 0 1
37664: PUSH
37665: LD_VAR 0 2
37669: ARRAY
37670: ST_TO_ADDR
// if not i then
37671: LD_VAR 0 5
37675: NOT
37676: IFFALSE 37680
// exit ;
37678: GO 37746
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
37680: LD_ADDR_VAR 0 1
37684: PUSH
37685: LD_VAR 0 1
37689: PPUSH
37690: LD_VAR 0 2
37694: PPUSH
37695: LD_VAR 0 1
37699: PUSH
37700: LD_VAR 0 3
37704: ARRAY
37705: PPUSH
37706: CALL_OW 1
37710: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
37711: LD_ADDR_VAR 0 1
37715: PUSH
37716: LD_VAR 0 1
37720: PPUSH
37721: LD_VAR 0 3
37725: PPUSH
37726: LD_VAR 0 5
37730: PPUSH
37731: CALL_OW 1
37735: ST_TO_ADDR
// result := list ;
37736: LD_ADDR_VAR 0 4
37740: PUSH
37741: LD_VAR 0 1
37745: ST_TO_ADDR
// end ;
37746: LD_VAR 0 4
37750: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
37751: LD_INT 0
37753: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
37754: LD_ADDR_VAR 0 5
37758: PUSH
37759: LD_VAR 0 1
37763: PPUSH
37764: CALL_OW 250
37768: PPUSH
37769: LD_VAR 0 1
37773: PPUSH
37774: CALL_OW 251
37778: PPUSH
37779: LD_VAR 0 2
37783: PPUSH
37784: LD_VAR 0 3
37788: PPUSH
37789: LD_VAR 0 4
37793: PPUSH
37794: CALL 37804 0 5
37798: ST_TO_ADDR
// end ;
37799: LD_VAR 0 5
37803: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
37804: LD_INT 0
37806: PPUSH
37807: PPUSH
37808: PPUSH
37809: PPUSH
// if not list then
37810: LD_VAR 0 3
37814: NOT
37815: IFFALSE 37819
// exit ;
37817: GO 38207
// result := [ ] ;
37819: LD_ADDR_VAR 0 6
37823: PUSH
37824: EMPTY
37825: ST_TO_ADDR
// for i in list do
37826: LD_ADDR_VAR 0 7
37830: PUSH
37831: LD_VAR 0 3
37835: PUSH
37836: FOR_IN
37837: IFFALSE 38039
// begin tmp := GetDistUnitXY ( i , x , y ) ;
37839: LD_ADDR_VAR 0 9
37843: PUSH
37844: LD_VAR 0 7
37848: PPUSH
37849: LD_VAR 0 1
37853: PPUSH
37854: LD_VAR 0 2
37858: PPUSH
37859: CALL_OW 297
37863: ST_TO_ADDR
// if not result then
37864: LD_VAR 0 6
37868: NOT
37869: IFFALSE 37895
// result := [ [ i , tmp ] ] else
37871: LD_ADDR_VAR 0 6
37875: PUSH
37876: LD_VAR 0 7
37880: PUSH
37881: LD_VAR 0 9
37885: PUSH
37886: EMPTY
37887: LIST
37888: LIST
37889: PUSH
37890: EMPTY
37891: LIST
37892: ST_TO_ADDR
37893: GO 38037
// begin if result [ result ] [ 2 ] < tmp then
37895: LD_VAR 0 6
37899: PUSH
37900: LD_VAR 0 6
37904: ARRAY
37905: PUSH
37906: LD_INT 2
37908: ARRAY
37909: PUSH
37910: LD_VAR 0 9
37914: LESS
37915: IFFALSE 37957
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37917: LD_ADDR_VAR 0 6
37921: PUSH
37922: LD_VAR 0 6
37926: PPUSH
37927: LD_VAR 0 6
37931: PUSH
37932: LD_INT 1
37934: PLUS
37935: PPUSH
37936: LD_VAR 0 7
37940: PUSH
37941: LD_VAR 0 9
37945: PUSH
37946: EMPTY
37947: LIST
37948: LIST
37949: PPUSH
37950: CALL_OW 2
37954: ST_TO_ADDR
37955: GO 38037
// for j = 1 to result do
37957: LD_ADDR_VAR 0 8
37961: PUSH
37962: DOUBLE
37963: LD_INT 1
37965: DEC
37966: ST_TO_ADDR
37967: LD_VAR 0 6
37971: PUSH
37972: FOR_TO
37973: IFFALSE 38035
// begin if tmp < result [ j ] [ 2 ] then
37975: LD_VAR 0 9
37979: PUSH
37980: LD_VAR 0 6
37984: PUSH
37985: LD_VAR 0 8
37989: ARRAY
37990: PUSH
37991: LD_INT 2
37993: ARRAY
37994: LESS
37995: IFFALSE 38033
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37997: LD_ADDR_VAR 0 6
38001: PUSH
38002: LD_VAR 0 6
38006: PPUSH
38007: LD_VAR 0 8
38011: PPUSH
38012: LD_VAR 0 7
38016: PUSH
38017: LD_VAR 0 9
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: PPUSH
38026: CALL_OW 2
38030: ST_TO_ADDR
// break ;
38031: GO 38035
// end ; end ;
38033: GO 37972
38035: POP
38036: POP
// end ; end ;
38037: GO 37836
38039: POP
38040: POP
// if result and not asc then
38041: LD_VAR 0 6
38045: PUSH
38046: LD_VAR 0 4
38050: NOT
38051: AND
38052: IFFALSE 38127
// begin tmp := result ;
38054: LD_ADDR_VAR 0 9
38058: PUSH
38059: LD_VAR 0 6
38063: ST_TO_ADDR
// for i = tmp downto 1 do
38064: LD_ADDR_VAR 0 7
38068: PUSH
38069: DOUBLE
38070: LD_VAR 0 9
38074: INC
38075: ST_TO_ADDR
38076: LD_INT 1
38078: PUSH
38079: FOR_DOWNTO
38080: IFFALSE 38125
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
38082: LD_ADDR_VAR 0 6
38086: PUSH
38087: LD_VAR 0 6
38091: PPUSH
38092: LD_VAR 0 9
38096: PUSH
38097: LD_VAR 0 7
38101: MINUS
38102: PUSH
38103: LD_INT 1
38105: PLUS
38106: PPUSH
38107: LD_VAR 0 9
38111: PUSH
38112: LD_VAR 0 7
38116: ARRAY
38117: PPUSH
38118: CALL_OW 1
38122: ST_TO_ADDR
38123: GO 38079
38125: POP
38126: POP
// end ; tmp := [ ] ;
38127: LD_ADDR_VAR 0 9
38131: PUSH
38132: EMPTY
38133: ST_TO_ADDR
// if mode then
38134: LD_VAR 0 5
38138: IFFALSE 38207
// begin for i = 1 to result do
38140: LD_ADDR_VAR 0 7
38144: PUSH
38145: DOUBLE
38146: LD_INT 1
38148: DEC
38149: ST_TO_ADDR
38150: LD_VAR 0 6
38154: PUSH
38155: FOR_TO
38156: IFFALSE 38195
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
38158: LD_ADDR_VAR 0 9
38162: PUSH
38163: LD_VAR 0 9
38167: PPUSH
38168: LD_VAR 0 7
38172: PPUSH
38173: LD_VAR 0 6
38177: PUSH
38178: LD_VAR 0 7
38182: ARRAY
38183: PUSH
38184: LD_INT 1
38186: ARRAY
38187: PPUSH
38188: CALL_OW 1
38192: ST_TO_ADDR
38193: GO 38155
38195: POP
38196: POP
// result := tmp ;
38197: LD_ADDR_VAR 0 6
38201: PUSH
38202: LD_VAR 0 9
38206: ST_TO_ADDR
// end ; end ;
38207: LD_VAR 0 6
38211: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
38212: LD_INT 0
38214: PPUSH
38215: PPUSH
38216: PPUSH
38217: PPUSH
38218: PPUSH
38219: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
38220: LD_ADDR_VAR 0 5
38224: PUSH
38225: LD_INT 0
38227: PUSH
38228: LD_INT 0
38230: PUSH
38231: LD_INT 0
38233: PUSH
38234: EMPTY
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: LIST
38240: LIST
38241: ST_TO_ADDR
// if not x or not y then
38242: LD_VAR 0 2
38246: NOT
38247: PUSH
38248: LD_VAR 0 3
38252: NOT
38253: OR
38254: IFFALSE 38258
// exit ;
38256: GO 39908
// if not range then
38258: LD_VAR 0 4
38262: NOT
38263: IFFALSE 38273
// range := 10 ;
38265: LD_ADDR_VAR 0 4
38269: PUSH
38270: LD_INT 10
38272: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38273: LD_ADDR_VAR 0 8
38277: PUSH
38278: LD_INT 81
38280: PUSH
38281: LD_VAR 0 1
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: PUSH
38290: LD_INT 92
38292: PUSH
38293: LD_VAR 0 2
38297: PUSH
38298: LD_VAR 0 3
38302: PUSH
38303: LD_VAR 0 4
38307: PUSH
38308: EMPTY
38309: LIST
38310: LIST
38311: LIST
38312: LIST
38313: PUSH
38314: LD_INT 3
38316: PUSH
38317: LD_INT 21
38319: PUSH
38320: LD_INT 3
38322: PUSH
38323: EMPTY
38324: LIST
38325: LIST
38326: PUSH
38327: EMPTY
38328: LIST
38329: LIST
38330: PUSH
38331: EMPTY
38332: LIST
38333: LIST
38334: LIST
38335: PPUSH
38336: CALL_OW 69
38340: ST_TO_ADDR
// if not tmp then
38341: LD_VAR 0 8
38345: NOT
38346: IFFALSE 38350
// exit ;
38348: GO 39908
// for i in tmp do
38350: LD_ADDR_VAR 0 6
38354: PUSH
38355: LD_VAR 0 8
38359: PUSH
38360: FOR_IN
38361: IFFALSE 39883
// begin points := [ 0 , 0 , 0 ] ;
38363: LD_ADDR_VAR 0 9
38367: PUSH
38368: LD_INT 0
38370: PUSH
38371: LD_INT 0
38373: PUSH
38374: LD_INT 0
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: LIST
38381: ST_TO_ADDR
// bpoints := 1 ;
38382: LD_ADDR_VAR 0 10
38386: PUSH
38387: LD_INT 1
38389: ST_TO_ADDR
// case GetType ( i ) of unit_human :
38390: LD_VAR 0 6
38394: PPUSH
38395: CALL_OW 247
38399: PUSH
38400: LD_INT 1
38402: DOUBLE
38403: EQUAL
38404: IFTRUE 38408
38406: GO 38986
38408: POP
// begin if GetClass ( i ) = 1 then
38409: LD_VAR 0 6
38413: PPUSH
38414: CALL_OW 257
38418: PUSH
38419: LD_INT 1
38421: EQUAL
38422: IFFALSE 38443
// points := [ 10 , 5 , 3 ] ;
38424: LD_ADDR_VAR 0 9
38428: PUSH
38429: LD_INT 10
38431: PUSH
38432: LD_INT 5
38434: PUSH
38435: LD_INT 3
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: LIST
38442: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
38443: LD_VAR 0 6
38447: PPUSH
38448: CALL_OW 257
38452: PUSH
38453: LD_INT 2
38455: PUSH
38456: LD_INT 3
38458: PUSH
38459: LD_INT 4
38461: PUSH
38462: EMPTY
38463: LIST
38464: LIST
38465: LIST
38466: IN
38467: IFFALSE 38488
// points := [ 3 , 2 , 1 ] ;
38469: LD_ADDR_VAR 0 9
38473: PUSH
38474: LD_INT 3
38476: PUSH
38477: LD_INT 2
38479: PUSH
38480: LD_INT 1
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: LIST
38487: ST_TO_ADDR
// if GetClass ( i ) = 5 then
38488: LD_VAR 0 6
38492: PPUSH
38493: CALL_OW 257
38497: PUSH
38498: LD_INT 5
38500: EQUAL
38501: IFFALSE 38522
// points := [ 130 , 5 , 2 ] ;
38503: LD_ADDR_VAR 0 9
38507: PUSH
38508: LD_INT 130
38510: PUSH
38511: LD_INT 5
38513: PUSH
38514: LD_INT 2
38516: PUSH
38517: EMPTY
38518: LIST
38519: LIST
38520: LIST
38521: ST_TO_ADDR
// if GetClass ( i ) = 8 then
38522: LD_VAR 0 6
38526: PPUSH
38527: CALL_OW 257
38531: PUSH
38532: LD_INT 8
38534: EQUAL
38535: IFFALSE 38556
// points := [ 35 , 35 , 30 ] ;
38537: LD_ADDR_VAR 0 9
38541: PUSH
38542: LD_INT 35
38544: PUSH
38545: LD_INT 35
38547: PUSH
38548: LD_INT 30
38550: PUSH
38551: EMPTY
38552: LIST
38553: LIST
38554: LIST
38555: ST_TO_ADDR
// if GetClass ( i ) = 9 then
38556: LD_VAR 0 6
38560: PPUSH
38561: CALL_OW 257
38565: PUSH
38566: LD_INT 9
38568: EQUAL
38569: IFFALSE 38590
// points := [ 20 , 55 , 40 ] ;
38571: LD_ADDR_VAR 0 9
38575: PUSH
38576: LD_INT 20
38578: PUSH
38579: LD_INT 55
38581: PUSH
38582: LD_INT 40
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: LIST
38589: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
38590: LD_VAR 0 6
38594: PPUSH
38595: CALL_OW 257
38599: PUSH
38600: LD_INT 12
38602: PUSH
38603: LD_INT 16
38605: PUSH
38606: EMPTY
38607: LIST
38608: LIST
38609: IN
38610: IFFALSE 38631
// points := [ 5 , 3 , 2 ] ;
38612: LD_ADDR_VAR 0 9
38616: PUSH
38617: LD_INT 5
38619: PUSH
38620: LD_INT 3
38622: PUSH
38623: LD_INT 2
38625: PUSH
38626: EMPTY
38627: LIST
38628: LIST
38629: LIST
38630: ST_TO_ADDR
// if GetClass ( i ) = 17 then
38631: LD_VAR 0 6
38635: PPUSH
38636: CALL_OW 257
38640: PUSH
38641: LD_INT 17
38643: EQUAL
38644: IFFALSE 38665
// points := [ 100 , 50 , 75 ] ;
38646: LD_ADDR_VAR 0 9
38650: PUSH
38651: LD_INT 100
38653: PUSH
38654: LD_INT 50
38656: PUSH
38657: LD_INT 75
38659: PUSH
38660: EMPTY
38661: LIST
38662: LIST
38663: LIST
38664: ST_TO_ADDR
// if GetClass ( i ) = 15 then
38665: LD_VAR 0 6
38669: PPUSH
38670: CALL_OW 257
38674: PUSH
38675: LD_INT 15
38677: EQUAL
38678: IFFALSE 38699
// points := [ 10 , 5 , 3 ] ;
38680: LD_ADDR_VAR 0 9
38684: PUSH
38685: LD_INT 10
38687: PUSH
38688: LD_INT 5
38690: PUSH
38691: LD_INT 3
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: LIST
38698: ST_TO_ADDR
// if GetClass ( i ) = 14 then
38699: LD_VAR 0 6
38703: PPUSH
38704: CALL_OW 257
38708: PUSH
38709: LD_INT 14
38711: EQUAL
38712: IFFALSE 38733
// points := [ 10 , 0 , 0 ] ;
38714: LD_ADDR_VAR 0 9
38718: PUSH
38719: LD_INT 10
38721: PUSH
38722: LD_INT 0
38724: PUSH
38725: LD_INT 0
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: LIST
38732: ST_TO_ADDR
// if GetClass ( i ) = 11 then
38733: LD_VAR 0 6
38737: PPUSH
38738: CALL_OW 257
38742: PUSH
38743: LD_INT 11
38745: EQUAL
38746: IFFALSE 38767
// points := [ 30 , 10 , 5 ] ;
38748: LD_ADDR_VAR 0 9
38752: PUSH
38753: LD_INT 30
38755: PUSH
38756: LD_INT 10
38758: PUSH
38759: LD_INT 5
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: LIST
38766: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
38767: LD_VAR 0 1
38771: PPUSH
38772: LD_INT 5
38774: PPUSH
38775: CALL_OW 321
38779: PUSH
38780: LD_INT 2
38782: EQUAL
38783: IFFALSE 38800
// bpoints := bpoints * 1.8 ;
38785: LD_ADDR_VAR 0 10
38789: PUSH
38790: LD_VAR 0 10
38794: PUSH
38795: LD_REAL  1.80000000000000E+0000
38798: MUL
38799: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
38800: LD_VAR 0 6
38804: PPUSH
38805: CALL_OW 257
38809: PUSH
38810: LD_INT 1
38812: PUSH
38813: LD_INT 2
38815: PUSH
38816: LD_INT 3
38818: PUSH
38819: LD_INT 4
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: LIST
38826: LIST
38827: IN
38828: PUSH
38829: LD_VAR 0 1
38833: PPUSH
38834: LD_INT 51
38836: PPUSH
38837: CALL_OW 321
38841: PUSH
38842: LD_INT 2
38844: EQUAL
38845: AND
38846: IFFALSE 38863
// bpoints := bpoints * 1.2 ;
38848: LD_ADDR_VAR 0 10
38852: PUSH
38853: LD_VAR 0 10
38857: PUSH
38858: LD_REAL  1.20000000000000E+0000
38861: MUL
38862: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
38863: LD_VAR 0 6
38867: PPUSH
38868: CALL_OW 257
38872: PUSH
38873: LD_INT 5
38875: PUSH
38876: LD_INT 7
38878: PUSH
38879: LD_INT 9
38881: PUSH
38882: EMPTY
38883: LIST
38884: LIST
38885: LIST
38886: IN
38887: PUSH
38888: LD_VAR 0 1
38892: PPUSH
38893: LD_INT 52
38895: PPUSH
38896: CALL_OW 321
38900: PUSH
38901: LD_INT 2
38903: EQUAL
38904: AND
38905: IFFALSE 38922
// bpoints := bpoints * 1.5 ;
38907: LD_ADDR_VAR 0 10
38911: PUSH
38912: LD_VAR 0 10
38916: PUSH
38917: LD_REAL  1.50000000000000E+0000
38920: MUL
38921: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38922: LD_VAR 0 1
38926: PPUSH
38927: LD_INT 66
38929: PPUSH
38930: CALL_OW 321
38934: PUSH
38935: LD_INT 2
38937: EQUAL
38938: IFFALSE 38955
// bpoints := bpoints * 1.1 ;
38940: LD_ADDR_VAR 0 10
38944: PUSH
38945: LD_VAR 0 10
38949: PUSH
38950: LD_REAL  1.10000000000000E+0000
38953: MUL
38954: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38955: LD_ADDR_VAR 0 10
38959: PUSH
38960: LD_VAR 0 10
38964: PUSH
38965: LD_VAR 0 6
38969: PPUSH
38970: LD_INT 1
38972: PPUSH
38973: CALL_OW 259
38977: PUSH
38978: LD_REAL  1.15000000000000E+0000
38981: MUL
38982: MUL
38983: ST_TO_ADDR
// end ; unit_vehicle :
38984: GO 39812
38986: LD_INT 2
38988: DOUBLE
38989: EQUAL
38990: IFTRUE 38994
38992: GO 39800
38994: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38995: LD_VAR 0 6
38999: PPUSH
39000: CALL_OW 264
39004: PUSH
39005: LD_INT 2
39007: PUSH
39008: LD_INT 42
39010: PUSH
39011: LD_INT 24
39013: PUSH
39014: EMPTY
39015: LIST
39016: LIST
39017: LIST
39018: IN
39019: IFFALSE 39040
// points := [ 25 , 5 , 3 ] ;
39021: LD_ADDR_VAR 0 9
39025: PUSH
39026: LD_INT 25
39028: PUSH
39029: LD_INT 5
39031: PUSH
39032: LD_INT 3
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: LIST
39039: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
39040: LD_VAR 0 6
39044: PPUSH
39045: CALL_OW 264
39049: PUSH
39050: LD_INT 4
39052: PUSH
39053: LD_INT 43
39055: PUSH
39056: LD_INT 25
39058: PUSH
39059: EMPTY
39060: LIST
39061: LIST
39062: LIST
39063: IN
39064: IFFALSE 39085
// points := [ 40 , 15 , 5 ] ;
39066: LD_ADDR_VAR 0 9
39070: PUSH
39071: LD_INT 40
39073: PUSH
39074: LD_INT 15
39076: PUSH
39077: LD_INT 5
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: LIST
39084: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
39085: LD_VAR 0 6
39089: PPUSH
39090: CALL_OW 264
39094: PUSH
39095: LD_INT 3
39097: PUSH
39098: LD_INT 23
39100: PUSH
39101: EMPTY
39102: LIST
39103: LIST
39104: IN
39105: IFFALSE 39126
// points := [ 7 , 25 , 8 ] ;
39107: LD_ADDR_VAR 0 9
39111: PUSH
39112: LD_INT 7
39114: PUSH
39115: LD_INT 25
39117: PUSH
39118: LD_INT 8
39120: PUSH
39121: EMPTY
39122: LIST
39123: LIST
39124: LIST
39125: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
39126: LD_VAR 0 6
39130: PPUSH
39131: CALL_OW 264
39135: PUSH
39136: LD_INT 5
39138: PUSH
39139: LD_INT 27
39141: PUSH
39142: LD_INT 44
39144: PUSH
39145: EMPTY
39146: LIST
39147: LIST
39148: LIST
39149: IN
39150: IFFALSE 39171
// points := [ 14 , 50 , 16 ] ;
39152: LD_ADDR_VAR 0 9
39156: PUSH
39157: LD_INT 14
39159: PUSH
39160: LD_INT 50
39162: PUSH
39163: LD_INT 16
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: LIST
39170: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
39171: LD_VAR 0 6
39175: PPUSH
39176: CALL_OW 264
39180: PUSH
39181: LD_INT 6
39183: PUSH
39184: LD_INT 46
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: IN
39191: IFFALSE 39212
// points := [ 32 , 120 , 70 ] ;
39193: LD_ADDR_VAR 0 9
39197: PUSH
39198: LD_INT 32
39200: PUSH
39201: LD_INT 120
39203: PUSH
39204: LD_INT 70
39206: PUSH
39207: EMPTY
39208: LIST
39209: LIST
39210: LIST
39211: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
39212: LD_VAR 0 6
39216: PPUSH
39217: CALL_OW 264
39221: PUSH
39222: LD_INT 7
39224: PUSH
39225: LD_INT 28
39227: PUSH
39228: LD_INT 45
39230: PUSH
39231: LD_INT 92
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: LIST
39238: LIST
39239: IN
39240: IFFALSE 39261
// points := [ 35 , 20 , 45 ] ;
39242: LD_ADDR_VAR 0 9
39246: PUSH
39247: LD_INT 35
39249: PUSH
39250: LD_INT 20
39252: PUSH
39253: LD_INT 45
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: LIST
39260: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
39261: LD_VAR 0 6
39265: PPUSH
39266: CALL_OW 264
39270: PUSH
39271: LD_INT 47
39273: PUSH
39274: EMPTY
39275: LIST
39276: IN
39277: IFFALSE 39298
// points := [ 67 , 45 , 75 ] ;
39279: LD_ADDR_VAR 0 9
39283: PUSH
39284: LD_INT 67
39286: PUSH
39287: LD_INT 45
39289: PUSH
39290: LD_INT 75
39292: PUSH
39293: EMPTY
39294: LIST
39295: LIST
39296: LIST
39297: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
39298: LD_VAR 0 6
39302: PPUSH
39303: CALL_OW 264
39307: PUSH
39308: LD_INT 26
39310: PUSH
39311: EMPTY
39312: LIST
39313: IN
39314: IFFALSE 39335
// points := [ 120 , 30 , 80 ] ;
39316: LD_ADDR_VAR 0 9
39320: PUSH
39321: LD_INT 120
39323: PUSH
39324: LD_INT 30
39326: PUSH
39327: LD_INT 80
39329: PUSH
39330: EMPTY
39331: LIST
39332: LIST
39333: LIST
39334: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
39335: LD_VAR 0 6
39339: PPUSH
39340: CALL_OW 264
39344: PUSH
39345: LD_INT 22
39347: PUSH
39348: EMPTY
39349: LIST
39350: IN
39351: IFFALSE 39372
// points := [ 40 , 1 , 1 ] ;
39353: LD_ADDR_VAR 0 9
39357: PUSH
39358: LD_INT 40
39360: PUSH
39361: LD_INT 1
39363: PUSH
39364: LD_INT 1
39366: PUSH
39367: EMPTY
39368: LIST
39369: LIST
39370: LIST
39371: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
39372: LD_VAR 0 6
39376: PPUSH
39377: CALL_OW 264
39381: PUSH
39382: LD_INT 29
39384: PUSH
39385: EMPTY
39386: LIST
39387: IN
39388: IFFALSE 39409
// points := [ 70 , 200 , 400 ] ;
39390: LD_ADDR_VAR 0 9
39394: PUSH
39395: LD_INT 70
39397: PUSH
39398: LD_INT 200
39400: PUSH
39401: LD_INT 400
39403: PUSH
39404: EMPTY
39405: LIST
39406: LIST
39407: LIST
39408: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
39409: LD_VAR 0 6
39413: PPUSH
39414: CALL_OW 264
39418: PUSH
39419: LD_INT 14
39421: PUSH
39422: LD_INT 53
39424: PUSH
39425: EMPTY
39426: LIST
39427: LIST
39428: IN
39429: IFFALSE 39450
// points := [ 40 , 10 , 20 ] ;
39431: LD_ADDR_VAR 0 9
39435: PUSH
39436: LD_INT 40
39438: PUSH
39439: LD_INT 10
39441: PUSH
39442: LD_INT 20
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: LIST
39449: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
39450: LD_VAR 0 6
39454: PPUSH
39455: CALL_OW 264
39459: PUSH
39460: LD_INT 9
39462: PUSH
39463: EMPTY
39464: LIST
39465: IN
39466: IFFALSE 39487
// points := [ 5 , 70 , 20 ] ;
39468: LD_ADDR_VAR 0 9
39472: PUSH
39473: LD_INT 5
39475: PUSH
39476: LD_INT 70
39478: PUSH
39479: LD_INT 20
39481: PUSH
39482: EMPTY
39483: LIST
39484: LIST
39485: LIST
39486: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
39487: LD_VAR 0 6
39491: PPUSH
39492: CALL_OW 264
39496: PUSH
39497: LD_INT 10
39499: PUSH
39500: EMPTY
39501: LIST
39502: IN
39503: IFFALSE 39524
// points := [ 35 , 110 , 70 ] ;
39505: LD_ADDR_VAR 0 9
39509: PUSH
39510: LD_INT 35
39512: PUSH
39513: LD_INT 110
39515: PUSH
39516: LD_INT 70
39518: PUSH
39519: EMPTY
39520: LIST
39521: LIST
39522: LIST
39523: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
39524: LD_VAR 0 6
39528: PPUSH
39529: CALL_OW 265
39533: PUSH
39534: LD_INT 25
39536: EQUAL
39537: IFFALSE 39558
// points := [ 80 , 65 , 100 ] ;
39539: LD_ADDR_VAR 0 9
39543: PUSH
39544: LD_INT 80
39546: PUSH
39547: LD_INT 65
39549: PUSH
39550: LD_INT 100
39552: PUSH
39553: EMPTY
39554: LIST
39555: LIST
39556: LIST
39557: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
39558: LD_VAR 0 6
39562: PPUSH
39563: CALL_OW 263
39567: PUSH
39568: LD_INT 1
39570: EQUAL
39571: IFFALSE 39606
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
39573: LD_ADDR_VAR 0 10
39577: PUSH
39578: LD_VAR 0 10
39582: PUSH
39583: LD_VAR 0 6
39587: PPUSH
39588: CALL_OW 311
39592: PPUSH
39593: LD_INT 3
39595: PPUSH
39596: CALL_OW 259
39600: PUSH
39601: LD_INT 4
39603: MUL
39604: MUL
39605: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
39606: LD_VAR 0 6
39610: PPUSH
39611: CALL_OW 263
39615: PUSH
39616: LD_INT 2
39618: EQUAL
39619: IFFALSE 39670
// begin j := IsControledBy ( i ) ;
39621: LD_ADDR_VAR 0 7
39625: PUSH
39626: LD_VAR 0 6
39630: PPUSH
39631: CALL_OW 312
39635: ST_TO_ADDR
// if j then
39636: LD_VAR 0 7
39640: IFFALSE 39670
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
39642: LD_ADDR_VAR 0 10
39646: PUSH
39647: LD_VAR 0 10
39651: PUSH
39652: LD_VAR 0 7
39656: PPUSH
39657: LD_INT 3
39659: PPUSH
39660: CALL_OW 259
39664: PUSH
39665: LD_INT 3
39667: MUL
39668: MUL
39669: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
39670: LD_VAR 0 6
39674: PPUSH
39675: CALL_OW 264
39679: PUSH
39680: LD_INT 5
39682: PUSH
39683: LD_INT 6
39685: PUSH
39686: LD_INT 46
39688: PUSH
39689: LD_INT 44
39691: PUSH
39692: LD_INT 47
39694: PUSH
39695: LD_INT 45
39697: PUSH
39698: LD_INT 28
39700: PUSH
39701: LD_INT 7
39703: PUSH
39704: LD_INT 27
39706: PUSH
39707: LD_INT 29
39709: PUSH
39710: EMPTY
39711: LIST
39712: LIST
39713: LIST
39714: LIST
39715: LIST
39716: LIST
39717: LIST
39718: LIST
39719: LIST
39720: LIST
39721: IN
39722: PUSH
39723: LD_VAR 0 1
39727: PPUSH
39728: LD_INT 52
39730: PPUSH
39731: CALL_OW 321
39735: PUSH
39736: LD_INT 2
39738: EQUAL
39739: AND
39740: IFFALSE 39757
// bpoints := bpoints * 1.2 ;
39742: LD_ADDR_VAR 0 10
39746: PUSH
39747: LD_VAR 0 10
39751: PUSH
39752: LD_REAL  1.20000000000000E+0000
39755: MUL
39756: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
39757: LD_VAR 0 6
39761: PPUSH
39762: CALL_OW 264
39766: PUSH
39767: LD_INT 6
39769: PUSH
39770: LD_INT 46
39772: PUSH
39773: LD_INT 47
39775: PUSH
39776: EMPTY
39777: LIST
39778: LIST
39779: LIST
39780: IN
39781: IFFALSE 39798
// bpoints := bpoints * 1.2 ;
39783: LD_ADDR_VAR 0 10
39787: PUSH
39788: LD_VAR 0 10
39792: PUSH
39793: LD_REAL  1.20000000000000E+0000
39796: MUL
39797: ST_TO_ADDR
// end ; unit_building :
39798: GO 39812
39800: LD_INT 3
39802: DOUBLE
39803: EQUAL
39804: IFTRUE 39808
39806: GO 39811
39808: POP
// ; end ;
39809: GO 39812
39811: POP
// for j = 1 to 3 do
39812: LD_ADDR_VAR 0 7
39816: PUSH
39817: DOUBLE
39818: LD_INT 1
39820: DEC
39821: ST_TO_ADDR
39822: LD_INT 3
39824: PUSH
39825: FOR_TO
39826: IFFALSE 39879
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
39828: LD_ADDR_VAR 0 5
39832: PUSH
39833: LD_VAR 0 5
39837: PPUSH
39838: LD_VAR 0 7
39842: PPUSH
39843: LD_VAR 0 5
39847: PUSH
39848: LD_VAR 0 7
39852: ARRAY
39853: PUSH
39854: LD_VAR 0 9
39858: PUSH
39859: LD_VAR 0 7
39863: ARRAY
39864: PUSH
39865: LD_VAR 0 10
39869: MUL
39870: PLUS
39871: PPUSH
39872: CALL_OW 1
39876: ST_TO_ADDR
39877: GO 39825
39879: POP
39880: POP
// end ;
39881: GO 38360
39883: POP
39884: POP
// result := Replace ( result , 4 , tmp ) ;
39885: LD_ADDR_VAR 0 5
39889: PUSH
39890: LD_VAR 0 5
39894: PPUSH
39895: LD_INT 4
39897: PPUSH
39898: LD_VAR 0 8
39902: PPUSH
39903: CALL_OW 1
39907: ST_TO_ADDR
// end ;
39908: LD_VAR 0 5
39912: RET
// export function DangerAtRange ( unit , range ) ; begin
39913: LD_INT 0
39915: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39916: LD_ADDR_VAR 0 3
39920: PUSH
39921: LD_VAR 0 1
39925: PPUSH
39926: CALL_OW 255
39930: PPUSH
39931: LD_VAR 0 1
39935: PPUSH
39936: CALL_OW 250
39940: PPUSH
39941: LD_VAR 0 1
39945: PPUSH
39946: CALL_OW 251
39950: PPUSH
39951: LD_VAR 0 2
39955: PPUSH
39956: CALL 38212 0 4
39960: ST_TO_ADDR
// end ;
39961: LD_VAR 0 3
39965: RET
// export function DangerInArea ( side , area ) ; begin
39966: LD_INT 0
39968: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39969: LD_ADDR_VAR 0 3
39973: PUSH
39974: LD_VAR 0 2
39978: PPUSH
39979: LD_INT 81
39981: PUSH
39982: LD_VAR 0 1
39986: PUSH
39987: EMPTY
39988: LIST
39989: LIST
39990: PPUSH
39991: CALL_OW 70
39995: ST_TO_ADDR
// end ;
39996: LD_VAR 0 3
40000: RET
// export function IsExtension ( b ) ; begin
40001: LD_INT 0
40003: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
40004: LD_ADDR_VAR 0 2
40008: PUSH
40009: LD_VAR 0 1
40013: PUSH
40014: LD_INT 23
40016: PUSH
40017: LD_INT 20
40019: PUSH
40020: LD_INT 22
40022: PUSH
40023: LD_INT 17
40025: PUSH
40026: LD_INT 24
40028: PUSH
40029: LD_INT 21
40031: PUSH
40032: LD_INT 19
40034: PUSH
40035: LD_INT 16
40037: PUSH
40038: LD_INT 25
40040: PUSH
40041: LD_INT 18
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: IN
40056: ST_TO_ADDR
// end ;
40057: LD_VAR 0 2
40061: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
40062: LD_INT 0
40064: PPUSH
40065: PPUSH
40066: PPUSH
// result := [ ] ;
40067: LD_ADDR_VAR 0 4
40071: PUSH
40072: EMPTY
40073: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
40074: LD_ADDR_VAR 0 5
40078: PUSH
40079: LD_VAR 0 2
40083: PPUSH
40084: LD_INT 21
40086: PUSH
40087: LD_INT 3
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: PPUSH
40094: CALL_OW 70
40098: ST_TO_ADDR
// if not tmp then
40099: LD_VAR 0 5
40103: NOT
40104: IFFALSE 40108
// exit ;
40106: GO 40172
// if checkLink then
40108: LD_VAR 0 3
40112: IFFALSE 40162
// begin for i in tmp do
40114: LD_ADDR_VAR 0 6
40118: PUSH
40119: LD_VAR 0 5
40123: PUSH
40124: FOR_IN
40125: IFFALSE 40160
// if GetBase ( i ) <> base then
40127: LD_VAR 0 6
40131: PPUSH
40132: CALL_OW 274
40136: PUSH
40137: LD_VAR 0 1
40141: NONEQUAL
40142: IFFALSE 40158
// ComLinkToBase ( base , i ) ;
40144: LD_VAR 0 1
40148: PPUSH
40149: LD_VAR 0 6
40153: PPUSH
40154: CALL_OW 169
40158: GO 40124
40160: POP
40161: POP
// end ; result := tmp ;
40162: LD_ADDR_VAR 0 4
40166: PUSH
40167: LD_VAR 0 5
40171: ST_TO_ADDR
// end ;
40172: LD_VAR 0 4
40176: RET
// export function ComComplete ( units , b ) ; var i ; begin
40177: LD_INT 0
40179: PPUSH
40180: PPUSH
// if not units then
40181: LD_VAR 0 1
40185: NOT
40186: IFFALSE 40190
// exit ;
40188: GO 40280
// for i in units do
40190: LD_ADDR_VAR 0 4
40194: PUSH
40195: LD_VAR 0 1
40199: PUSH
40200: FOR_IN
40201: IFFALSE 40278
// if BuildingStatus ( b ) = bs_build then
40203: LD_VAR 0 2
40207: PPUSH
40208: CALL_OW 461
40212: PUSH
40213: LD_INT 1
40215: EQUAL
40216: IFFALSE 40276
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
40218: LD_VAR 0 4
40222: PPUSH
40223: LD_STRING h
40225: PUSH
40226: LD_VAR 0 2
40230: PPUSH
40231: CALL_OW 250
40235: PUSH
40236: LD_VAR 0 2
40240: PPUSH
40241: CALL_OW 251
40245: PUSH
40246: LD_VAR 0 2
40250: PUSH
40251: LD_INT 0
40253: PUSH
40254: LD_INT 0
40256: PUSH
40257: LD_INT 0
40259: PUSH
40260: EMPTY
40261: LIST
40262: LIST
40263: LIST
40264: LIST
40265: LIST
40266: LIST
40267: LIST
40268: PUSH
40269: EMPTY
40270: LIST
40271: PPUSH
40272: CALL_OW 446
40276: GO 40200
40278: POP
40279: POP
// end ;
40280: LD_VAR 0 3
40284: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
40285: LD_INT 0
40287: PPUSH
40288: PPUSH
40289: PPUSH
40290: PPUSH
40291: PPUSH
40292: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
40293: LD_VAR 0 1
40297: NOT
40298: PUSH
40299: LD_VAR 0 1
40303: PPUSH
40304: CALL_OW 263
40308: PUSH
40309: LD_INT 2
40311: NONEQUAL
40312: OR
40313: IFFALSE 40317
// exit ;
40315: GO 40633
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
40317: LD_ADDR_VAR 0 6
40321: PUSH
40322: LD_INT 22
40324: PUSH
40325: LD_VAR 0 1
40329: PPUSH
40330: CALL_OW 255
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: LD_INT 2
40341: PUSH
40342: LD_INT 30
40344: PUSH
40345: LD_INT 36
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: PUSH
40352: LD_INT 34
40354: PUSH
40355: LD_INT 31
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: PUSH
40362: EMPTY
40363: LIST
40364: LIST
40365: LIST
40366: PUSH
40367: EMPTY
40368: LIST
40369: LIST
40370: PPUSH
40371: CALL_OW 69
40375: ST_TO_ADDR
// if not tmp then
40376: LD_VAR 0 6
40380: NOT
40381: IFFALSE 40385
// exit ;
40383: GO 40633
// result := [ ] ;
40385: LD_ADDR_VAR 0 2
40389: PUSH
40390: EMPTY
40391: ST_TO_ADDR
// for i in tmp do
40392: LD_ADDR_VAR 0 3
40396: PUSH
40397: LD_VAR 0 6
40401: PUSH
40402: FOR_IN
40403: IFFALSE 40474
// begin t := UnitsInside ( i ) ;
40405: LD_ADDR_VAR 0 4
40409: PUSH
40410: LD_VAR 0 3
40414: PPUSH
40415: CALL_OW 313
40419: ST_TO_ADDR
// if t then
40420: LD_VAR 0 4
40424: IFFALSE 40472
// for j in t do
40426: LD_ADDR_VAR 0 7
40430: PUSH
40431: LD_VAR 0 4
40435: PUSH
40436: FOR_IN
40437: IFFALSE 40470
// result := Replace ( result , result + 1 , j ) ;
40439: LD_ADDR_VAR 0 2
40443: PUSH
40444: LD_VAR 0 2
40448: PPUSH
40449: LD_VAR 0 2
40453: PUSH
40454: LD_INT 1
40456: PLUS
40457: PPUSH
40458: LD_VAR 0 7
40462: PPUSH
40463: CALL_OW 1
40467: ST_TO_ADDR
40468: GO 40436
40470: POP
40471: POP
// end ;
40472: GO 40402
40474: POP
40475: POP
// if not result then
40476: LD_VAR 0 2
40480: NOT
40481: IFFALSE 40485
// exit ;
40483: GO 40633
// mech := result [ 1 ] ;
40485: LD_ADDR_VAR 0 5
40489: PUSH
40490: LD_VAR 0 2
40494: PUSH
40495: LD_INT 1
40497: ARRAY
40498: ST_TO_ADDR
// if result > 1 then
40499: LD_VAR 0 2
40503: PUSH
40504: LD_INT 1
40506: GREATER
40507: IFFALSE 40619
// begin for i = 2 to result do
40509: LD_ADDR_VAR 0 3
40513: PUSH
40514: DOUBLE
40515: LD_INT 2
40517: DEC
40518: ST_TO_ADDR
40519: LD_VAR 0 2
40523: PUSH
40524: FOR_TO
40525: IFFALSE 40617
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
40527: LD_ADDR_VAR 0 4
40531: PUSH
40532: LD_VAR 0 2
40536: PUSH
40537: LD_VAR 0 3
40541: ARRAY
40542: PPUSH
40543: LD_INT 3
40545: PPUSH
40546: CALL_OW 259
40550: PUSH
40551: LD_VAR 0 2
40555: PUSH
40556: LD_VAR 0 3
40560: ARRAY
40561: PPUSH
40562: CALL_OW 432
40566: MINUS
40567: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
40568: LD_VAR 0 4
40572: PUSH
40573: LD_VAR 0 5
40577: PPUSH
40578: LD_INT 3
40580: PPUSH
40581: CALL_OW 259
40585: PUSH
40586: LD_VAR 0 5
40590: PPUSH
40591: CALL_OW 432
40595: MINUS
40596: GREATEREQUAL
40597: IFFALSE 40615
// mech := result [ i ] ;
40599: LD_ADDR_VAR 0 5
40603: PUSH
40604: LD_VAR 0 2
40608: PUSH
40609: LD_VAR 0 3
40613: ARRAY
40614: ST_TO_ADDR
// end ;
40615: GO 40524
40617: POP
40618: POP
// end ; ComLinkTo ( vehicle , mech ) ;
40619: LD_VAR 0 1
40623: PPUSH
40624: LD_VAR 0 5
40628: PPUSH
40629: CALL_OW 135
// end ;
40633: LD_VAR 0 2
40637: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
40638: LD_INT 0
40640: PPUSH
40641: PPUSH
40642: PPUSH
40643: PPUSH
40644: PPUSH
40645: PPUSH
40646: PPUSH
40647: PPUSH
40648: PPUSH
40649: PPUSH
40650: PPUSH
40651: PPUSH
40652: PPUSH
// result := [ ] ;
40653: LD_ADDR_VAR 0 7
40657: PUSH
40658: EMPTY
40659: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
40660: LD_VAR 0 1
40664: PPUSH
40665: CALL_OW 266
40669: PUSH
40670: LD_INT 0
40672: PUSH
40673: LD_INT 1
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: IN
40680: NOT
40681: IFFALSE 40685
// exit ;
40683: GO 42319
// if name then
40685: LD_VAR 0 3
40689: IFFALSE 40705
// SetBName ( base_dep , name ) ;
40691: LD_VAR 0 1
40695: PPUSH
40696: LD_VAR 0 3
40700: PPUSH
40701: CALL_OW 500
// base := GetBase ( base_dep ) ;
40705: LD_ADDR_VAR 0 15
40709: PUSH
40710: LD_VAR 0 1
40714: PPUSH
40715: CALL_OW 274
40719: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
40720: LD_ADDR_VAR 0 16
40724: PUSH
40725: LD_VAR 0 1
40729: PPUSH
40730: CALL_OW 255
40734: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
40735: LD_ADDR_VAR 0 17
40739: PUSH
40740: LD_VAR 0 1
40744: PPUSH
40745: CALL_OW 248
40749: ST_TO_ADDR
// if sources then
40750: LD_VAR 0 5
40754: IFFALSE 40801
// for i = 1 to 3 do
40756: LD_ADDR_VAR 0 8
40760: PUSH
40761: DOUBLE
40762: LD_INT 1
40764: DEC
40765: ST_TO_ADDR
40766: LD_INT 3
40768: PUSH
40769: FOR_TO
40770: IFFALSE 40799
// AddResourceType ( base , i , sources [ i ] ) ;
40772: LD_VAR 0 15
40776: PPUSH
40777: LD_VAR 0 8
40781: PPUSH
40782: LD_VAR 0 5
40786: PUSH
40787: LD_VAR 0 8
40791: ARRAY
40792: PPUSH
40793: CALL_OW 276
40797: GO 40769
40799: POP
40800: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
40801: LD_ADDR_VAR 0 18
40805: PUSH
40806: LD_VAR 0 15
40810: PPUSH
40811: LD_VAR 0 2
40815: PPUSH
40816: LD_INT 1
40818: PPUSH
40819: CALL 40062 0 3
40823: ST_TO_ADDR
// InitHc ;
40824: CALL_OW 19
// InitUc ;
40828: CALL_OW 18
// uc_side := side ;
40832: LD_ADDR_OWVAR 20
40836: PUSH
40837: LD_VAR 0 16
40841: ST_TO_ADDR
// uc_nation := nation ;
40842: LD_ADDR_OWVAR 21
40846: PUSH
40847: LD_VAR 0 17
40851: ST_TO_ADDR
// if buildings then
40852: LD_VAR 0 18
40856: IFFALSE 42178
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
40858: LD_ADDR_VAR 0 19
40862: PUSH
40863: LD_VAR 0 18
40867: PPUSH
40868: LD_INT 2
40870: PUSH
40871: LD_INT 30
40873: PUSH
40874: LD_INT 29
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PUSH
40881: LD_INT 30
40883: PUSH
40884: LD_INT 30
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: LIST
40895: PPUSH
40896: CALL_OW 72
40900: ST_TO_ADDR
// if tmp then
40901: LD_VAR 0 19
40905: IFFALSE 40953
// for i in tmp do
40907: LD_ADDR_VAR 0 8
40911: PUSH
40912: LD_VAR 0 19
40916: PUSH
40917: FOR_IN
40918: IFFALSE 40951
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40920: LD_VAR 0 8
40924: PPUSH
40925: CALL_OW 250
40929: PPUSH
40930: LD_VAR 0 8
40934: PPUSH
40935: CALL_OW 251
40939: PPUSH
40940: LD_VAR 0 16
40944: PPUSH
40945: CALL_OW 441
40949: GO 40917
40951: POP
40952: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40953: LD_VAR 0 18
40957: PPUSH
40958: LD_INT 2
40960: PUSH
40961: LD_INT 30
40963: PUSH
40964: LD_INT 32
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: PUSH
40971: LD_INT 30
40973: PUSH
40974: LD_INT 33
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: LIST
40985: PPUSH
40986: CALL_OW 72
40990: IFFALSE 41078
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40992: LD_ADDR_VAR 0 8
40996: PUSH
40997: LD_VAR 0 18
41001: PPUSH
41002: LD_INT 2
41004: PUSH
41005: LD_INT 30
41007: PUSH
41008: LD_INT 32
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: PUSH
41015: LD_INT 30
41017: PUSH
41018: LD_INT 33
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: LIST
41029: PPUSH
41030: CALL_OW 72
41034: PUSH
41035: FOR_IN
41036: IFFALSE 41076
// begin if not GetBWeapon ( i ) then
41038: LD_VAR 0 8
41042: PPUSH
41043: CALL_OW 269
41047: NOT
41048: IFFALSE 41074
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
41050: LD_VAR 0 8
41054: PPUSH
41055: LD_VAR 0 8
41059: PPUSH
41060: LD_VAR 0 2
41064: PPUSH
41065: CALL 42324 0 2
41069: PPUSH
41070: CALL_OW 431
// end ;
41074: GO 41035
41076: POP
41077: POP
// end ; for i = 1 to personel do
41078: LD_ADDR_VAR 0 8
41082: PUSH
41083: DOUBLE
41084: LD_INT 1
41086: DEC
41087: ST_TO_ADDR
41088: LD_VAR 0 6
41092: PUSH
41093: FOR_TO
41094: IFFALSE 42158
// begin if i > 4 then
41096: LD_VAR 0 8
41100: PUSH
41101: LD_INT 4
41103: GREATER
41104: IFFALSE 41108
// break ;
41106: GO 42158
// case i of 1 :
41108: LD_VAR 0 8
41112: PUSH
41113: LD_INT 1
41115: DOUBLE
41116: EQUAL
41117: IFTRUE 41121
41119: GO 41201
41121: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
41122: LD_ADDR_VAR 0 12
41126: PUSH
41127: LD_VAR 0 18
41131: PPUSH
41132: LD_INT 22
41134: PUSH
41135: LD_VAR 0 16
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: PUSH
41144: LD_INT 58
41146: PUSH
41147: EMPTY
41148: LIST
41149: PUSH
41150: LD_INT 2
41152: PUSH
41153: LD_INT 30
41155: PUSH
41156: LD_INT 32
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: PUSH
41163: LD_INT 30
41165: PUSH
41166: LD_INT 4
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: PUSH
41173: LD_INT 30
41175: PUSH
41176: LD_INT 5
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: PUSH
41183: EMPTY
41184: LIST
41185: LIST
41186: LIST
41187: LIST
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: LIST
41193: PPUSH
41194: CALL_OW 72
41198: ST_TO_ADDR
41199: GO 41423
41201: LD_INT 2
41203: DOUBLE
41204: EQUAL
41205: IFTRUE 41209
41207: GO 41271
41209: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
41210: LD_ADDR_VAR 0 12
41214: PUSH
41215: LD_VAR 0 18
41219: PPUSH
41220: LD_INT 22
41222: PUSH
41223: LD_VAR 0 16
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: PUSH
41232: LD_INT 2
41234: PUSH
41235: LD_INT 30
41237: PUSH
41238: LD_INT 0
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: PUSH
41245: LD_INT 30
41247: PUSH
41248: LD_INT 1
41250: PUSH
41251: EMPTY
41252: LIST
41253: LIST
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: LIST
41259: PUSH
41260: EMPTY
41261: LIST
41262: LIST
41263: PPUSH
41264: CALL_OW 72
41268: ST_TO_ADDR
41269: GO 41423
41271: LD_INT 3
41273: DOUBLE
41274: EQUAL
41275: IFTRUE 41279
41277: GO 41341
41279: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
41280: LD_ADDR_VAR 0 12
41284: PUSH
41285: LD_VAR 0 18
41289: PPUSH
41290: LD_INT 22
41292: PUSH
41293: LD_VAR 0 16
41297: PUSH
41298: EMPTY
41299: LIST
41300: LIST
41301: PUSH
41302: LD_INT 2
41304: PUSH
41305: LD_INT 30
41307: PUSH
41308: LD_INT 2
41310: PUSH
41311: EMPTY
41312: LIST
41313: LIST
41314: PUSH
41315: LD_INT 30
41317: PUSH
41318: LD_INT 3
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: PUSH
41325: EMPTY
41326: LIST
41327: LIST
41328: LIST
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: PPUSH
41334: CALL_OW 72
41338: ST_TO_ADDR
41339: GO 41423
41341: LD_INT 4
41343: DOUBLE
41344: EQUAL
41345: IFTRUE 41349
41347: GO 41422
41349: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
41350: LD_ADDR_VAR 0 12
41354: PUSH
41355: LD_VAR 0 18
41359: PPUSH
41360: LD_INT 22
41362: PUSH
41363: LD_VAR 0 16
41367: PUSH
41368: EMPTY
41369: LIST
41370: LIST
41371: PUSH
41372: LD_INT 2
41374: PUSH
41375: LD_INT 30
41377: PUSH
41378: LD_INT 6
41380: PUSH
41381: EMPTY
41382: LIST
41383: LIST
41384: PUSH
41385: LD_INT 30
41387: PUSH
41388: LD_INT 7
41390: PUSH
41391: EMPTY
41392: LIST
41393: LIST
41394: PUSH
41395: LD_INT 30
41397: PUSH
41398: LD_INT 8
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PPUSH
41415: CALL_OW 72
41419: ST_TO_ADDR
41420: GO 41423
41422: POP
// if i = 1 then
41423: LD_VAR 0 8
41427: PUSH
41428: LD_INT 1
41430: EQUAL
41431: IFFALSE 41542
// begin tmp := [ ] ;
41433: LD_ADDR_VAR 0 19
41437: PUSH
41438: EMPTY
41439: ST_TO_ADDR
// for j in f do
41440: LD_ADDR_VAR 0 9
41444: PUSH
41445: LD_VAR 0 12
41449: PUSH
41450: FOR_IN
41451: IFFALSE 41524
// if GetBType ( j ) = b_bunker then
41453: LD_VAR 0 9
41457: PPUSH
41458: CALL_OW 266
41462: PUSH
41463: LD_INT 32
41465: EQUAL
41466: IFFALSE 41493
// tmp := Insert ( tmp , 1 , j ) else
41468: LD_ADDR_VAR 0 19
41472: PUSH
41473: LD_VAR 0 19
41477: PPUSH
41478: LD_INT 1
41480: PPUSH
41481: LD_VAR 0 9
41485: PPUSH
41486: CALL_OW 2
41490: ST_TO_ADDR
41491: GO 41522
// tmp := Insert ( tmp , tmp + 1 , j ) ;
41493: LD_ADDR_VAR 0 19
41497: PUSH
41498: LD_VAR 0 19
41502: PPUSH
41503: LD_VAR 0 19
41507: PUSH
41508: LD_INT 1
41510: PLUS
41511: PPUSH
41512: LD_VAR 0 9
41516: PPUSH
41517: CALL_OW 2
41521: ST_TO_ADDR
41522: GO 41450
41524: POP
41525: POP
// if tmp then
41526: LD_VAR 0 19
41530: IFFALSE 41542
// f := tmp ;
41532: LD_ADDR_VAR 0 12
41536: PUSH
41537: LD_VAR 0 19
41541: ST_TO_ADDR
// end ; x := personel [ i ] ;
41542: LD_ADDR_VAR 0 13
41546: PUSH
41547: LD_VAR 0 6
41551: PUSH
41552: LD_VAR 0 8
41556: ARRAY
41557: ST_TO_ADDR
// if x = - 1 then
41558: LD_VAR 0 13
41562: PUSH
41563: LD_INT 1
41565: NEG
41566: EQUAL
41567: IFFALSE 41776
// begin for j in f do
41569: LD_ADDR_VAR 0 9
41573: PUSH
41574: LD_VAR 0 12
41578: PUSH
41579: FOR_IN
41580: IFFALSE 41772
// repeat InitHc ;
41582: CALL_OW 19
// if GetBType ( j ) = b_barracks then
41586: LD_VAR 0 9
41590: PPUSH
41591: CALL_OW 266
41595: PUSH
41596: LD_INT 5
41598: EQUAL
41599: IFFALSE 41669
// begin if UnitsInside ( j ) < 3 then
41601: LD_VAR 0 9
41605: PPUSH
41606: CALL_OW 313
41610: PUSH
41611: LD_INT 3
41613: LESS
41614: IFFALSE 41650
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41616: LD_INT 0
41618: PPUSH
41619: LD_INT 5
41621: PUSH
41622: LD_INT 8
41624: PUSH
41625: LD_INT 9
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: LIST
41632: PUSH
41633: LD_VAR 0 17
41637: ARRAY
41638: PPUSH
41639: LD_VAR 0 4
41643: PPUSH
41644: CALL_OW 380
41648: GO 41667
// PrepareHuman ( false , i , skill ) ;
41650: LD_INT 0
41652: PPUSH
41653: LD_VAR 0 8
41657: PPUSH
41658: LD_VAR 0 4
41662: PPUSH
41663: CALL_OW 380
// end else
41667: GO 41686
// PrepareHuman ( false , i , skill ) ;
41669: LD_INT 0
41671: PPUSH
41672: LD_VAR 0 8
41676: PPUSH
41677: LD_VAR 0 4
41681: PPUSH
41682: CALL_OW 380
// un := CreateHuman ;
41686: LD_ADDR_VAR 0 14
41690: PUSH
41691: CALL_OW 44
41695: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41696: LD_ADDR_VAR 0 7
41700: PUSH
41701: LD_VAR 0 7
41705: PPUSH
41706: LD_INT 1
41708: PPUSH
41709: LD_VAR 0 14
41713: PPUSH
41714: CALL_OW 2
41718: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
41719: LD_VAR 0 14
41723: PPUSH
41724: LD_VAR 0 9
41728: PPUSH
41729: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
41733: LD_VAR 0 9
41737: PPUSH
41738: CALL_OW 313
41742: PUSH
41743: LD_INT 6
41745: EQUAL
41746: PUSH
41747: LD_VAR 0 9
41751: PPUSH
41752: CALL_OW 266
41756: PUSH
41757: LD_INT 32
41759: PUSH
41760: LD_INT 31
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: IN
41767: OR
41768: IFFALSE 41582
41770: GO 41579
41772: POP
41773: POP
// end else
41774: GO 42156
// for j = 1 to x do
41776: LD_ADDR_VAR 0 9
41780: PUSH
41781: DOUBLE
41782: LD_INT 1
41784: DEC
41785: ST_TO_ADDR
41786: LD_VAR 0 13
41790: PUSH
41791: FOR_TO
41792: IFFALSE 42154
// begin InitHc ;
41794: CALL_OW 19
// if not f then
41798: LD_VAR 0 12
41802: NOT
41803: IFFALSE 41892
// begin PrepareHuman ( false , i , skill ) ;
41805: LD_INT 0
41807: PPUSH
41808: LD_VAR 0 8
41812: PPUSH
41813: LD_VAR 0 4
41817: PPUSH
41818: CALL_OW 380
// un := CreateHuman ;
41822: LD_ADDR_VAR 0 14
41826: PUSH
41827: CALL_OW 44
41831: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41832: LD_ADDR_VAR 0 7
41836: PUSH
41837: LD_VAR 0 7
41841: PPUSH
41842: LD_INT 1
41844: PPUSH
41845: LD_VAR 0 14
41849: PPUSH
41850: CALL_OW 2
41854: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41855: LD_VAR 0 14
41859: PPUSH
41860: LD_VAR 0 1
41864: PPUSH
41865: CALL_OW 250
41869: PPUSH
41870: LD_VAR 0 1
41874: PPUSH
41875: CALL_OW 251
41879: PPUSH
41880: LD_INT 10
41882: PPUSH
41883: LD_INT 0
41885: PPUSH
41886: CALL_OW 50
// continue ;
41890: GO 41791
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
41892: LD_VAR 0 12
41896: PUSH
41897: LD_INT 1
41899: ARRAY
41900: PPUSH
41901: CALL_OW 313
41905: PUSH
41906: LD_VAR 0 12
41910: PUSH
41911: LD_INT 1
41913: ARRAY
41914: PPUSH
41915: CALL_OW 266
41919: PUSH
41920: LD_INT 32
41922: PUSH
41923: LD_INT 31
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: IN
41930: AND
41931: PUSH
41932: LD_VAR 0 12
41936: PUSH
41937: LD_INT 1
41939: ARRAY
41940: PPUSH
41941: CALL_OW 313
41945: PUSH
41946: LD_INT 6
41948: EQUAL
41949: OR
41950: IFFALSE 41970
// f := Delete ( f , 1 ) ;
41952: LD_ADDR_VAR 0 12
41956: PUSH
41957: LD_VAR 0 12
41961: PPUSH
41962: LD_INT 1
41964: PPUSH
41965: CALL_OW 3
41969: ST_TO_ADDR
// if not f then
41970: LD_VAR 0 12
41974: NOT
41975: IFFALSE 41993
// begin x := x + 2 ;
41977: LD_ADDR_VAR 0 13
41981: PUSH
41982: LD_VAR 0 13
41986: PUSH
41987: LD_INT 2
41989: PLUS
41990: ST_TO_ADDR
// continue ;
41991: GO 41791
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41993: LD_VAR 0 12
41997: PUSH
41998: LD_INT 1
42000: ARRAY
42001: PPUSH
42002: CALL_OW 266
42006: PUSH
42007: LD_INT 5
42009: EQUAL
42010: IFFALSE 42084
// begin if UnitsInside ( f [ 1 ] ) < 3 then
42012: LD_VAR 0 12
42016: PUSH
42017: LD_INT 1
42019: ARRAY
42020: PPUSH
42021: CALL_OW 313
42025: PUSH
42026: LD_INT 3
42028: LESS
42029: IFFALSE 42065
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42031: LD_INT 0
42033: PPUSH
42034: LD_INT 5
42036: PUSH
42037: LD_INT 8
42039: PUSH
42040: LD_INT 9
42042: PUSH
42043: EMPTY
42044: LIST
42045: LIST
42046: LIST
42047: PUSH
42048: LD_VAR 0 17
42052: ARRAY
42053: PPUSH
42054: LD_VAR 0 4
42058: PPUSH
42059: CALL_OW 380
42063: GO 42082
// PrepareHuman ( false , i , skill ) ;
42065: LD_INT 0
42067: PPUSH
42068: LD_VAR 0 8
42072: PPUSH
42073: LD_VAR 0 4
42077: PPUSH
42078: CALL_OW 380
// end else
42082: GO 42101
// PrepareHuman ( false , i , skill ) ;
42084: LD_INT 0
42086: PPUSH
42087: LD_VAR 0 8
42091: PPUSH
42092: LD_VAR 0 4
42096: PPUSH
42097: CALL_OW 380
// un := CreateHuman ;
42101: LD_ADDR_VAR 0 14
42105: PUSH
42106: CALL_OW 44
42110: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42111: LD_ADDR_VAR 0 7
42115: PUSH
42116: LD_VAR 0 7
42120: PPUSH
42121: LD_INT 1
42123: PPUSH
42124: LD_VAR 0 14
42128: PPUSH
42129: CALL_OW 2
42133: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
42134: LD_VAR 0 14
42138: PPUSH
42139: LD_VAR 0 12
42143: PUSH
42144: LD_INT 1
42146: ARRAY
42147: PPUSH
42148: CALL_OW 52
// end ;
42152: GO 41791
42154: POP
42155: POP
// end ;
42156: GO 41093
42158: POP
42159: POP
// result := result ^ buildings ;
42160: LD_ADDR_VAR 0 7
42164: PUSH
42165: LD_VAR 0 7
42169: PUSH
42170: LD_VAR 0 18
42174: ADD
42175: ST_TO_ADDR
// end else
42176: GO 42319
// begin for i = 1 to personel do
42178: LD_ADDR_VAR 0 8
42182: PUSH
42183: DOUBLE
42184: LD_INT 1
42186: DEC
42187: ST_TO_ADDR
42188: LD_VAR 0 6
42192: PUSH
42193: FOR_TO
42194: IFFALSE 42317
// begin if i > 4 then
42196: LD_VAR 0 8
42200: PUSH
42201: LD_INT 4
42203: GREATER
42204: IFFALSE 42208
// break ;
42206: GO 42317
// x := personel [ i ] ;
42208: LD_ADDR_VAR 0 13
42212: PUSH
42213: LD_VAR 0 6
42217: PUSH
42218: LD_VAR 0 8
42222: ARRAY
42223: ST_TO_ADDR
// if x = - 1 then
42224: LD_VAR 0 13
42228: PUSH
42229: LD_INT 1
42231: NEG
42232: EQUAL
42233: IFFALSE 42237
// continue ;
42235: GO 42193
// PrepareHuman ( false , i , skill ) ;
42237: LD_INT 0
42239: PPUSH
42240: LD_VAR 0 8
42244: PPUSH
42245: LD_VAR 0 4
42249: PPUSH
42250: CALL_OW 380
// un := CreateHuman ;
42254: LD_ADDR_VAR 0 14
42258: PUSH
42259: CALL_OW 44
42263: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42264: LD_VAR 0 14
42268: PPUSH
42269: LD_VAR 0 1
42273: PPUSH
42274: CALL_OW 250
42278: PPUSH
42279: LD_VAR 0 1
42283: PPUSH
42284: CALL_OW 251
42288: PPUSH
42289: LD_INT 10
42291: PPUSH
42292: LD_INT 0
42294: PPUSH
42295: CALL_OW 50
// result := result ^ un ;
42299: LD_ADDR_VAR 0 7
42303: PUSH
42304: LD_VAR 0 7
42308: PUSH
42309: LD_VAR 0 14
42313: ADD
42314: ST_TO_ADDR
// end ;
42315: GO 42193
42317: POP
42318: POP
// end ; end ;
42319: LD_VAR 0 7
42323: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
42324: LD_INT 0
42326: PPUSH
42327: PPUSH
42328: PPUSH
42329: PPUSH
42330: PPUSH
42331: PPUSH
42332: PPUSH
42333: PPUSH
42334: PPUSH
42335: PPUSH
42336: PPUSH
42337: PPUSH
42338: PPUSH
42339: PPUSH
42340: PPUSH
42341: PPUSH
// result := false ;
42342: LD_ADDR_VAR 0 3
42346: PUSH
42347: LD_INT 0
42349: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
42350: LD_VAR 0 1
42354: NOT
42355: PUSH
42356: LD_VAR 0 1
42360: PPUSH
42361: CALL_OW 266
42365: PUSH
42366: LD_INT 32
42368: PUSH
42369: LD_INT 33
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: IN
42376: NOT
42377: OR
42378: IFFALSE 42382
// exit ;
42380: GO 43491
// nat := GetNation ( tower ) ;
42382: LD_ADDR_VAR 0 12
42386: PUSH
42387: LD_VAR 0 1
42391: PPUSH
42392: CALL_OW 248
42396: ST_TO_ADDR
// side := GetSide ( tower ) ;
42397: LD_ADDR_VAR 0 16
42401: PUSH
42402: LD_VAR 0 1
42406: PPUSH
42407: CALL_OW 255
42411: ST_TO_ADDR
// x := GetX ( tower ) ;
42412: LD_ADDR_VAR 0 10
42416: PUSH
42417: LD_VAR 0 1
42421: PPUSH
42422: CALL_OW 250
42426: ST_TO_ADDR
// y := GetY ( tower ) ;
42427: LD_ADDR_VAR 0 11
42431: PUSH
42432: LD_VAR 0 1
42436: PPUSH
42437: CALL_OW 251
42441: ST_TO_ADDR
// if not x or not y then
42442: LD_VAR 0 10
42446: NOT
42447: PUSH
42448: LD_VAR 0 11
42452: NOT
42453: OR
42454: IFFALSE 42458
// exit ;
42456: GO 43491
// weapon := 0 ;
42458: LD_ADDR_VAR 0 18
42462: PUSH
42463: LD_INT 0
42465: ST_TO_ADDR
// fac_list := [ ] ;
42466: LD_ADDR_VAR 0 17
42470: PUSH
42471: EMPTY
42472: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
42473: LD_ADDR_VAR 0 6
42477: PUSH
42478: LD_VAR 0 1
42482: PPUSH
42483: CALL_OW 274
42487: PPUSH
42488: LD_VAR 0 2
42492: PPUSH
42493: LD_INT 0
42495: PPUSH
42496: CALL 40062 0 3
42500: PPUSH
42501: LD_INT 30
42503: PUSH
42504: LD_INT 3
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PPUSH
42511: CALL_OW 72
42515: ST_TO_ADDR
// if not factories then
42516: LD_VAR 0 6
42520: NOT
42521: IFFALSE 42525
// exit ;
42523: GO 43491
// for i in factories do
42525: LD_ADDR_VAR 0 8
42529: PUSH
42530: LD_VAR 0 6
42534: PUSH
42535: FOR_IN
42536: IFFALSE 42561
// fac_list := fac_list union AvailableWeaponList ( i ) ;
42538: LD_ADDR_VAR 0 17
42542: PUSH
42543: LD_VAR 0 17
42547: PUSH
42548: LD_VAR 0 8
42552: PPUSH
42553: CALL_OW 478
42557: UNION
42558: ST_TO_ADDR
42559: GO 42535
42561: POP
42562: POP
// if not fac_list then
42563: LD_VAR 0 17
42567: NOT
42568: IFFALSE 42572
// exit ;
42570: GO 43491
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
42572: LD_ADDR_VAR 0 5
42576: PUSH
42577: LD_INT 4
42579: PUSH
42580: LD_INT 5
42582: PUSH
42583: LD_INT 9
42585: PUSH
42586: LD_INT 10
42588: PUSH
42589: LD_INT 6
42591: PUSH
42592: LD_INT 7
42594: PUSH
42595: LD_INT 11
42597: PUSH
42598: EMPTY
42599: LIST
42600: LIST
42601: LIST
42602: LIST
42603: LIST
42604: LIST
42605: LIST
42606: PUSH
42607: LD_INT 27
42609: PUSH
42610: LD_INT 28
42612: PUSH
42613: LD_INT 26
42615: PUSH
42616: LD_INT 30
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: LIST
42623: LIST
42624: PUSH
42625: LD_INT 43
42627: PUSH
42628: LD_INT 44
42630: PUSH
42631: LD_INT 46
42633: PUSH
42634: LD_INT 45
42636: PUSH
42637: LD_INT 47
42639: PUSH
42640: LD_INT 49
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: LIST
42647: LIST
42648: LIST
42649: LIST
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: LIST
42655: PUSH
42656: LD_VAR 0 12
42660: ARRAY
42661: ST_TO_ADDR
// list := list isect fac_list ;
42662: LD_ADDR_VAR 0 5
42666: PUSH
42667: LD_VAR 0 5
42671: PUSH
42672: LD_VAR 0 17
42676: ISECT
42677: ST_TO_ADDR
// if not list then
42678: LD_VAR 0 5
42682: NOT
42683: IFFALSE 42687
// exit ;
42685: GO 43491
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
42687: LD_VAR 0 12
42691: PUSH
42692: LD_INT 3
42694: EQUAL
42695: PUSH
42696: LD_INT 49
42698: PUSH
42699: LD_VAR 0 5
42703: IN
42704: AND
42705: PUSH
42706: LD_INT 31
42708: PPUSH
42709: LD_VAR 0 16
42713: PPUSH
42714: CALL_OW 321
42718: PUSH
42719: LD_INT 2
42721: EQUAL
42722: AND
42723: IFFALSE 42783
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
42725: LD_INT 22
42727: PUSH
42728: LD_VAR 0 16
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 35
42739: PUSH
42740: LD_INT 49
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: LD_INT 91
42749: PUSH
42750: LD_VAR 0 1
42754: PUSH
42755: LD_INT 10
42757: PUSH
42758: EMPTY
42759: LIST
42760: LIST
42761: LIST
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: LIST
42767: PPUSH
42768: CALL_OW 69
42772: NOT
42773: IFFALSE 42783
// weapon := ru_time_lapser ;
42775: LD_ADDR_VAR 0 18
42779: PUSH
42780: LD_INT 49
42782: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
42783: LD_VAR 0 12
42787: PUSH
42788: LD_INT 1
42790: PUSH
42791: LD_INT 2
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: IN
42798: PUSH
42799: LD_INT 11
42801: PUSH
42802: LD_VAR 0 5
42806: IN
42807: PUSH
42808: LD_INT 30
42810: PUSH
42811: LD_VAR 0 5
42815: IN
42816: OR
42817: AND
42818: PUSH
42819: LD_INT 6
42821: PPUSH
42822: LD_VAR 0 16
42826: PPUSH
42827: CALL_OW 321
42831: PUSH
42832: LD_INT 2
42834: EQUAL
42835: AND
42836: IFFALSE 43001
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
42838: LD_INT 22
42840: PUSH
42841: LD_VAR 0 16
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: PUSH
42850: LD_INT 2
42852: PUSH
42853: LD_INT 35
42855: PUSH
42856: LD_INT 11
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: PUSH
42863: LD_INT 35
42865: PUSH
42866: LD_INT 30
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: PUSH
42873: EMPTY
42874: LIST
42875: LIST
42876: LIST
42877: PUSH
42878: LD_INT 91
42880: PUSH
42881: LD_VAR 0 1
42885: PUSH
42886: LD_INT 18
42888: PUSH
42889: EMPTY
42890: LIST
42891: LIST
42892: LIST
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: LIST
42898: PPUSH
42899: CALL_OW 69
42903: NOT
42904: PUSH
42905: LD_INT 22
42907: PUSH
42908: LD_VAR 0 16
42912: PUSH
42913: EMPTY
42914: LIST
42915: LIST
42916: PUSH
42917: LD_INT 2
42919: PUSH
42920: LD_INT 30
42922: PUSH
42923: LD_INT 32
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: PUSH
42930: LD_INT 30
42932: PUSH
42933: LD_INT 33
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: LIST
42944: PUSH
42945: LD_INT 91
42947: PUSH
42948: LD_VAR 0 1
42952: PUSH
42953: LD_INT 12
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: LIST
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: LIST
42965: PUSH
42966: EMPTY
42967: LIST
42968: PPUSH
42969: CALL_OW 69
42973: PUSH
42974: LD_INT 2
42976: GREATER
42977: AND
42978: IFFALSE 43001
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42980: LD_ADDR_VAR 0 18
42984: PUSH
42985: LD_INT 11
42987: PUSH
42988: LD_INT 30
42990: PUSH
42991: EMPTY
42992: LIST
42993: LIST
42994: PUSH
42995: LD_VAR 0 12
42999: ARRAY
43000: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
43001: LD_VAR 0 18
43005: NOT
43006: PUSH
43007: LD_INT 40
43009: PPUSH
43010: LD_VAR 0 16
43014: PPUSH
43015: CALL_OW 321
43019: PUSH
43020: LD_INT 2
43022: EQUAL
43023: AND
43024: PUSH
43025: LD_INT 7
43027: PUSH
43028: LD_VAR 0 5
43032: IN
43033: PUSH
43034: LD_INT 28
43036: PUSH
43037: LD_VAR 0 5
43041: IN
43042: OR
43043: PUSH
43044: LD_INT 45
43046: PUSH
43047: LD_VAR 0 5
43051: IN
43052: OR
43053: AND
43054: IFFALSE 43308
// begin hex := GetHexInfo ( x , y ) ;
43056: LD_ADDR_VAR 0 4
43060: PUSH
43061: LD_VAR 0 10
43065: PPUSH
43066: LD_VAR 0 11
43070: PPUSH
43071: CALL_OW 546
43075: ST_TO_ADDR
// if hex [ 1 ] then
43076: LD_VAR 0 4
43080: PUSH
43081: LD_INT 1
43083: ARRAY
43084: IFFALSE 43088
// exit ;
43086: GO 43491
// height := hex [ 2 ] ;
43088: LD_ADDR_VAR 0 15
43092: PUSH
43093: LD_VAR 0 4
43097: PUSH
43098: LD_INT 2
43100: ARRAY
43101: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
43102: LD_ADDR_VAR 0 14
43106: PUSH
43107: LD_INT 0
43109: PUSH
43110: LD_INT 2
43112: PUSH
43113: LD_INT 3
43115: PUSH
43116: LD_INT 5
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: ST_TO_ADDR
// for i in tmp do
43125: LD_ADDR_VAR 0 8
43129: PUSH
43130: LD_VAR 0 14
43134: PUSH
43135: FOR_IN
43136: IFFALSE 43306
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
43138: LD_ADDR_VAR 0 9
43142: PUSH
43143: LD_VAR 0 10
43147: PPUSH
43148: LD_VAR 0 8
43152: PPUSH
43153: LD_INT 5
43155: PPUSH
43156: CALL_OW 272
43160: PUSH
43161: LD_VAR 0 11
43165: PPUSH
43166: LD_VAR 0 8
43170: PPUSH
43171: LD_INT 5
43173: PPUSH
43174: CALL_OW 273
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
43183: LD_VAR 0 9
43187: PUSH
43188: LD_INT 1
43190: ARRAY
43191: PPUSH
43192: LD_VAR 0 9
43196: PUSH
43197: LD_INT 2
43199: ARRAY
43200: PPUSH
43201: CALL_OW 488
43205: IFFALSE 43304
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
43207: LD_ADDR_VAR 0 4
43211: PUSH
43212: LD_VAR 0 9
43216: PUSH
43217: LD_INT 1
43219: ARRAY
43220: PPUSH
43221: LD_VAR 0 9
43225: PUSH
43226: LD_INT 2
43228: ARRAY
43229: PPUSH
43230: CALL_OW 546
43234: ST_TO_ADDR
// if hex [ 1 ] then
43235: LD_VAR 0 4
43239: PUSH
43240: LD_INT 1
43242: ARRAY
43243: IFFALSE 43247
// continue ;
43245: GO 43135
// h := hex [ 2 ] ;
43247: LD_ADDR_VAR 0 13
43251: PUSH
43252: LD_VAR 0 4
43256: PUSH
43257: LD_INT 2
43259: ARRAY
43260: ST_TO_ADDR
// if h + 7 < height then
43261: LD_VAR 0 13
43265: PUSH
43266: LD_INT 7
43268: PLUS
43269: PUSH
43270: LD_VAR 0 15
43274: LESS
43275: IFFALSE 43304
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
43277: LD_ADDR_VAR 0 18
43281: PUSH
43282: LD_INT 7
43284: PUSH
43285: LD_INT 28
43287: PUSH
43288: LD_INT 45
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: LIST
43295: PUSH
43296: LD_VAR 0 12
43300: ARRAY
43301: ST_TO_ADDR
// break ;
43302: GO 43306
// end ; end ; end ;
43304: GO 43135
43306: POP
43307: POP
// end ; if not weapon then
43308: LD_VAR 0 18
43312: NOT
43313: IFFALSE 43373
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
43315: LD_ADDR_VAR 0 5
43319: PUSH
43320: LD_VAR 0 5
43324: PUSH
43325: LD_INT 11
43327: PUSH
43328: LD_INT 30
43330: PUSH
43331: LD_INT 49
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: LIST
43338: DIFF
43339: ST_TO_ADDR
// if not list then
43340: LD_VAR 0 5
43344: NOT
43345: IFFALSE 43349
// exit ;
43347: GO 43491
// weapon := list [ rand ( 1 , list ) ] ;
43349: LD_ADDR_VAR 0 18
43353: PUSH
43354: LD_VAR 0 5
43358: PUSH
43359: LD_INT 1
43361: PPUSH
43362: LD_VAR 0 5
43366: PPUSH
43367: CALL_OW 12
43371: ARRAY
43372: ST_TO_ADDR
// end ; if weapon then
43373: LD_VAR 0 18
43377: IFFALSE 43491
// begin tmp := CostOfWeapon ( weapon ) ;
43379: LD_ADDR_VAR 0 14
43383: PUSH
43384: LD_VAR 0 18
43388: PPUSH
43389: CALL_OW 451
43393: ST_TO_ADDR
// j := GetBase ( tower ) ;
43394: LD_ADDR_VAR 0 9
43398: PUSH
43399: LD_VAR 0 1
43403: PPUSH
43404: CALL_OW 274
43408: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
43409: LD_VAR 0 9
43413: PPUSH
43414: LD_INT 1
43416: PPUSH
43417: CALL_OW 275
43421: PUSH
43422: LD_VAR 0 14
43426: PUSH
43427: LD_INT 1
43429: ARRAY
43430: GREATEREQUAL
43431: PUSH
43432: LD_VAR 0 9
43436: PPUSH
43437: LD_INT 2
43439: PPUSH
43440: CALL_OW 275
43444: PUSH
43445: LD_VAR 0 14
43449: PUSH
43450: LD_INT 2
43452: ARRAY
43453: GREATEREQUAL
43454: AND
43455: PUSH
43456: LD_VAR 0 9
43460: PPUSH
43461: LD_INT 3
43463: PPUSH
43464: CALL_OW 275
43468: PUSH
43469: LD_VAR 0 14
43473: PUSH
43474: LD_INT 3
43476: ARRAY
43477: GREATEREQUAL
43478: AND
43479: IFFALSE 43491
// result := weapon ;
43481: LD_ADDR_VAR 0 3
43485: PUSH
43486: LD_VAR 0 18
43490: ST_TO_ADDR
// end ; end ;
43491: LD_VAR 0 3
43495: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
43496: LD_INT 0
43498: PPUSH
43499: PPUSH
// result := true ;
43500: LD_ADDR_VAR 0 3
43504: PUSH
43505: LD_INT 1
43507: ST_TO_ADDR
// if array1 = array2 then
43508: LD_VAR 0 1
43512: PUSH
43513: LD_VAR 0 2
43517: EQUAL
43518: IFFALSE 43578
// begin for i = 1 to array1 do
43520: LD_ADDR_VAR 0 4
43524: PUSH
43525: DOUBLE
43526: LD_INT 1
43528: DEC
43529: ST_TO_ADDR
43530: LD_VAR 0 1
43534: PUSH
43535: FOR_TO
43536: IFFALSE 43574
// if array1 [ i ] <> array2 [ i ] then
43538: LD_VAR 0 1
43542: PUSH
43543: LD_VAR 0 4
43547: ARRAY
43548: PUSH
43549: LD_VAR 0 2
43553: PUSH
43554: LD_VAR 0 4
43558: ARRAY
43559: NONEQUAL
43560: IFFALSE 43572
// begin result := false ;
43562: LD_ADDR_VAR 0 3
43566: PUSH
43567: LD_INT 0
43569: ST_TO_ADDR
// break ;
43570: GO 43574
// end ;
43572: GO 43535
43574: POP
43575: POP
// end else
43576: GO 43586
// result := false ;
43578: LD_ADDR_VAR 0 3
43582: PUSH
43583: LD_INT 0
43585: ST_TO_ADDR
// end ;
43586: LD_VAR 0 3
43590: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
43591: LD_INT 0
43593: PPUSH
43594: PPUSH
// if not array1 or not array2 then
43595: LD_VAR 0 1
43599: NOT
43600: PUSH
43601: LD_VAR 0 2
43605: NOT
43606: OR
43607: IFFALSE 43611
// exit ;
43609: GO 43675
// result := true ;
43611: LD_ADDR_VAR 0 3
43615: PUSH
43616: LD_INT 1
43618: ST_TO_ADDR
// for i = 1 to array1 do
43619: LD_ADDR_VAR 0 4
43623: PUSH
43624: DOUBLE
43625: LD_INT 1
43627: DEC
43628: ST_TO_ADDR
43629: LD_VAR 0 1
43633: PUSH
43634: FOR_TO
43635: IFFALSE 43673
// if array1 [ i ] <> array2 [ i ] then
43637: LD_VAR 0 1
43641: PUSH
43642: LD_VAR 0 4
43646: ARRAY
43647: PUSH
43648: LD_VAR 0 2
43652: PUSH
43653: LD_VAR 0 4
43657: ARRAY
43658: NONEQUAL
43659: IFFALSE 43671
// begin result := false ;
43661: LD_ADDR_VAR 0 3
43665: PUSH
43666: LD_INT 0
43668: ST_TO_ADDR
// break ;
43669: GO 43673
// end ;
43671: GO 43634
43673: POP
43674: POP
// end ;
43675: LD_VAR 0 3
43679: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
43680: LD_INT 0
43682: PPUSH
43683: PPUSH
43684: PPUSH
// pom := GetBase ( fac ) ;
43685: LD_ADDR_VAR 0 5
43689: PUSH
43690: LD_VAR 0 1
43694: PPUSH
43695: CALL_OW 274
43699: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
43700: LD_ADDR_VAR 0 4
43704: PUSH
43705: LD_VAR 0 2
43709: PUSH
43710: LD_INT 1
43712: ARRAY
43713: PPUSH
43714: LD_VAR 0 2
43718: PUSH
43719: LD_INT 2
43721: ARRAY
43722: PPUSH
43723: LD_VAR 0 2
43727: PUSH
43728: LD_INT 3
43730: ARRAY
43731: PPUSH
43732: LD_VAR 0 2
43736: PUSH
43737: LD_INT 4
43739: ARRAY
43740: PPUSH
43741: CALL_OW 449
43745: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43746: LD_ADDR_VAR 0 3
43750: PUSH
43751: LD_VAR 0 5
43755: PPUSH
43756: LD_INT 1
43758: PPUSH
43759: CALL_OW 275
43763: PUSH
43764: LD_VAR 0 4
43768: PUSH
43769: LD_INT 1
43771: ARRAY
43772: GREATEREQUAL
43773: PUSH
43774: LD_VAR 0 5
43778: PPUSH
43779: LD_INT 2
43781: PPUSH
43782: CALL_OW 275
43786: PUSH
43787: LD_VAR 0 4
43791: PUSH
43792: LD_INT 2
43794: ARRAY
43795: GREATEREQUAL
43796: AND
43797: PUSH
43798: LD_VAR 0 5
43802: PPUSH
43803: LD_INT 3
43805: PPUSH
43806: CALL_OW 275
43810: PUSH
43811: LD_VAR 0 4
43815: PUSH
43816: LD_INT 3
43818: ARRAY
43819: GREATEREQUAL
43820: AND
43821: ST_TO_ADDR
// end ;
43822: LD_VAR 0 3
43826: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
43827: LD_INT 0
43829: PPUSH
43830: PPUSH
43831: PPUSH
43832: PPUSH
// pom := GetBase ( building ) ;
43833: LD_ADDR_VAR 0 3
43837: PUSH
43838: LD_VAR 0 1
43842: PPUSH
43843: CALL_OW 274
43847: ST_TO_ADDR
// if not pom then
43848: LD_VAR 0 3
43852: NOT
43853: IFFALSE 43857
// exit ;
43855: GO 44027
// btype := GetBType ( building ) ;
43857: LD_ADDR_VAR 0 5
43861: PUSH
43862: LD_VAR 0 1
43866: PPUSH
43867: CALL_OW 266
43871: ST_TO_ADDR
// if btype = b_armoury then
43872: LD_VAR 0 5
43876: PUSH
43877: LD_INT 4
43879: EQUAL
43880: IFFALSE 43890
// btype := b_barracks ;
43882: LD_ADDR_VAR 0 5
43886: PUSH
43887: LD_INT 5
43889: ST_TO_ADDR
// if btype = b_depot then
43890: LD_VAR 0 5
43894: PUSH
43895: LD_INT 0
43897: EQUAL
43898: IFFALSE 43908
// btype := b_warehouse ;
43900: LD_ADDR_VAR 0 5
43904: PUSH
43905: LD_INT 1
43907: ST_TO_ADDR
// if btype = b_workshop then
43908: LD_VAR 0 5
43912: PUSH
43913: LD_INT 2
43915: EQUAL
43916: IFFALSE 43926
// btype := b_factory ;
43918: LD_ADDR_VAR 0 5
43922: PUSH
43923: LD_INT 3
43925: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43926: LD_ADDR_VAR 0 4
43930: PUSH
43931: LD_VAR 0 5
43935: PPUSH
43936: LD_VAR 0 1
43940: PPUSH
43941: CALL_OW 248
43945: PPUSH
43946: CALL_OW 450
43950: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43951: LD_ADDR_VAR 0 2
43955: PUSH
43956: LD_VAR 0 3
43960: PPUSH
43961: LD_INT 1
43963: PPUSH
43964: CALL_OW 275
43968: PUSH
43969: LD_VAR 0 4
43973: PUSH
43974: LD_INT 1
43976: ARRAY
43977: GREATEREQUAL
43978: PUSH
43979: LD_VAR 0 3
43983: PPUSH
43984: LD_INT 2
43986: PPUSH
43987: CALL_OW 275
43991: PUSH
43992: LD_VAR 0 4
43996: PUSH
43997: LD_INT 2
43999: ARRAY
44000: GREATEREQUAL
44001: AND
44002: PUSH
44003: LD_VAR 0 3
44007: PPUSH
44008: LD_INT 3
44010: PPUSH
44011: CALL_OW 275
44015: PUSH
44016: LD_VAR 0 4
44020: PUSH
44021: LD_INT 3
44023: ARRAY
44024: GREATEREQUAL
44025: AND
44026: ST_TO_ADDR
// end ;
44027: LD_VAR 0 2
44031: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
44032: LD_INT 0
44034: PPUSH
44035: PPUSH
44036: PPUSH
// pom := GetBase ( building ) ;
44037: LD_ADDR_VAR 0 4
44041: PUSH
44042: LD_VAR 0 1
44046: PPUSH
44047: CALL_OW 274
44051: ST_TO_ADDR
// if not pom then
44052: LD_VAR 0 4
44056: NOT
44057: IFFALSE 44061
// exit ;
44059: GO 44162
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44061: LD_ADDR_VAR 0 5
44065: PUSH
44066: LD_VAR 0 2
44070: PPUSH
44071: LD_VAR 0 1
44075: PPUSH
44076: CALL_OW 248
44080: PPUSH
44081: CALL_OW 450
44085: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44086: LD_ADDR_VAR 0 3
44090: PUSH
44091: LD_VAR 0 4
44095: PPUSH
44096: LD_INT 1
44098: PPUSH
44099: CALL_OW 275
44103: PUSH
44104: LD_VAR 0 5
44108: PUSH
44109: LD_INT 1
44111: ARRAY
44112: GREATEREQUAL
44113: PUSH
44114: LD_VAR 0 4
44118: PPUSH
44119: LD_INT 2
44121: PPUSH
44122: CALL_OW 275
44126: PUSH
44127: LD_VAR 0 5
44131: PUSH
44132: LD_INT 2
44134: ARRAY
44135: GREATEREQUAL
44136: AND
44137: PUSH
44138: LD_VAR 0 4
44142: PPUSH
44143: LD_INT 3
44145: PPUSH
44146: CALL_OW 275
44150: PUSH
44151: LD_VAR 0 5
44155: PUSH
44156: LD_INT 3
44158: ARRAY
44159: GREATEREQUAL
44160: AND
44161: ST_TO_ADDR
// end ;
44162: LD_VAR 0 3
44166: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
44167: LD_INT 0
44169: PPUSH
44170: PPUSH
44171: PPUSH
44172: PPUSH
44173: PPUSH
44174: PPUSH
44175: PPUSH
44176: PPUSH
44177: PPUSH
44178: PPUSH
44179: PPUSH
// result := false ;
44180: LD_ADDR_VAR 0 8
44184: PUSH
44185: LD_INT 0
44187: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
44188: LD_VAR 0 5
44192: NOT
44193: PUSH
44194: LD_VAR 0 1
44198: NOT
44199: OR
44200: PUSH
44201: LD_VAR 0 2
44205: NOT
44206: OR
44207: PUSH
44208: LD_VAR 0 3
44212: NOT
44213: OR
44214: IFFALSE 44218
// exit ;
44216: GO 45032
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
44218: LD_ADDR_VAR 0 14
44222: PUSH
44223: LD_VAR 0 1
44227: PPUSH
44228: LD_VAR 0 2
44232: PPUSH
44233: LD_VAR 0 3
44237: PPUSH
44238: LD_VAR 0 4
44242: PPUSH
44243: LD_VAR 0 5
44247: PUSH
44248: LD_INT 1
44250: ARRAY
44251: PPUSH
44252: CALL_OW 248
44256: PPUSH
44257: LD_INT 0
44259: PPUSH
44260: CALL 46265 0 6
44264: ST_TO_ADDR
// if not hexes then
44265: LD_VAR 0 14
44269: NOT
44270: IFFALSE 44274
// exit ;
44272: GO 45032
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
44274: LD_ADDR_VAR 0 17
44278: PUSH
44279: LD_VAR 0 5
44283: PPUSH
44284: LD_INT 22
44286: PUSH
44287: LD_VAR 0 13
44291: PPUSH
44292: CALL_OW 255
44296: PUSH
44297: EMPTY
44298: LIST
44299: LIST
44300: PUSH
44301: LD_INT 2
44303: PUSH
44304: LD_INT 30
44306: PUSH
44307: LD_INT 0
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: PUSH
44314: LD_INT 30
44316: PUSH
44317: LD_INT 1
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: EMPTY
44325: LIST
44326: LIST
44327: LIST
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: PPUSH
44333: CALL_OW 72
44337: ST_TO_ADDR
// for i = 1 to hexes do
44338: LD_ADDR_VAR 0 9
44342: PUSH
44343: DOUBLE
44344: LD_INT 1
44346: DEC
44347: ST_TO_ADDR
44348: LD_VAR 0 14
44352: PUSH
44353: FOR_TO
44354: IFFALSE 45030
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44356: LD_ADDR_VAR 0 13
44360: PUSH
44361: LD_VAR 0 14
44365: PUSH
44366: LD_VAR 0 9
44370: ARRAY
44371: PUSH
44372: LD_INT 1
44374: ARRAY
44375: PPUSH
44376: LD_VAR 0 14
44380: PUSH
44381: LD_VAR 0 9
44385: ARRAY
44386: PUSH
44387: LD_INT 2
44389: ARRAY
44390: PPUSH
44391: CALL_OW 428
44395: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
44396: LD_VAR 0 14
44400: PUSH
44401: LD_VAR 0 9
44405: ARRAY
44406: PUSH
44407: LD_INT 1
44409: ARRAY
44410: PPUSH
44411: LD_VAR 0 14
44415: PUSH
44416: LD_VAR 0 9
44420: ARRAY
44421: PUSH
44422: LD_INT 2
44424: ARRAY
44425: PPUSH
44426: CALL_OW 351
44430: PUSH
44431: LD_VAR 0 14
44435: PUSH
44436: LD_VAR 0 9
44440: ARRAY
44441: PUSH
44442: LD_INT 1
44444: ARRAY
44445: PPUSH
44446: LD_VAR 0 14
44450: PUSH
44451: LD_VAR 0 9
44455: ARRAY
44456: PUSH
44457: LD_INT 2
44459: ARRAY
44460: PPUSH
44461: CALL_OW 488
44465: NOT
44466: OR
44467: PUSH
44468: LD_VAR 0 13
44472: PPUSH
44473: CALL_OW 247
44477: PUSH
44478: LD_INT 3
44480: EQUAL
44481: OR
44482: IFFALSE 44488
// exit ;
44484: POP
44485: POP
44486: GO 45032
// if not tmp then
44488: LD_VAR 0 13
44492: NOT
44493: IFFALSE 44497
// continue ;
44495: GO 44353
// result := true ;
44497: LD_ADDR_VAR 0 8
44501: PUSH
44502: LD_INT 1
44504: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
44505: LD_VAR 0 6
44509: PUSH
44510: LD_VAR 0 13
44514: PPUSH
44515: CALL_OW 247
44519: PUSH
44520: LD_INT 2
44522: EQUAL
44523: AND
44524: PUSH
44525: LD_VAR 0 13
44529: PPUSH
44530: CALL_OW 263
44534: PUSH
44535: LD_INT 1
44537: EQUAL
44538: AND
44539: IFFALSE 44703
// begin if IsDrivenBy ( tmp ) then
44541: LD_VAR 0 13
44545: PPUSH
44546: CALL_OW 311
44550: IFFALSE 44554
// continue ;
44552: GO 44353
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
44554: LD_VAR 0 6
44558: PPUSH
44559: LD_INT 3
44561: PUSH
44562: LD_INT 60
44564: PUSH
44565: EMPTY
44566: LIST
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: LD_INT 3
44574: PUSH
44575: LD_INT 55
44577: PUSH
44578: EMPTY
44579: LIST
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: PPUSH
44589: CALL_OW 72
44593: IFFALSE 44701
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
44595: LD_ADDR_VAR 0 18
44599: PUSH
44600: LD_VAR 0 6
44604: PPUSH
44605: LD_INT 3
44607: PUSH
44608: LD_INT 60
44610: PUSH
44611: EMPTY
44612: LIST
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: PUSH
44618: LD_INT 3
44620: PUSH
44621: LD_INT 55
44623: PUSH
44624: EMPTY
44625: LIST
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PPUSH
44635: CALL_OW 72
44639: PUSH
44640: LD_INT 1
44642: ARRAY
44643: ST_TO_ADDR
// if IsInUnit ( driver ) then
44644: LD_VAR 0 18
44648: PPUSH
44649: CALL_OW 310
44653: IFFALSE 44664
// ComExit ( driver ) ;
44655: LD_VAR 0 18
44659: PPUSH
44660: CALL 70026 0 1
// AddComEnterUnit ( driver , tmp ) ;
44664: LD_VAR 0 18
44668: PPUSH
44669: LD_VAR 0 13
44673: PPUSH
44674: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
44678: LD_VAR 0 18
44682: PPUSH
44683: LD_VAR 0 7
44687: PPUSH
44688: CALL_OW 173
// AddComExitVehicle ( driver ) ;
44692: LD_VAR 0 18
44696: PPUSH
44697: CALL_OW 181
// end ; continue ;
44701: GO 44353
// end ; if not cleaners or not tmp in cleaners then
44703: LD_VAR 0 6
44707: NOT
44708: PUSH
44709: LD_VAR 0 13
44713: PUSH
44714: LD_VAR 0 6
44718: IN
44719: NOT
44720: OR
44721: IFFALSE 45028
// begin if dep then
44723: LD_VAR 0 17
44727: IFFALSE 44863
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
44729: LD_ADDR_VAR 0 16
44733: PUSH
44734: LD_VAR 0 17
44738: PUSH
44739: LD_INT 1
44741: ARRAY
44742: PPUSH
44743: CALL_OW 250
44747: PPUSH
44748: LD_VAR 0 17
44752: PUSH
44753: LD_INT 1
44755: ARRAY
44756: PPUSH
44757: CALL_OW 254
44761: PPUSH
44762: LD_INT 5
44764: PPUSH
44765: CALL_OW 272
44769: PUSH
44770: LD_VAR 0 17
44774: PUSH
44775: LD_INT 1
44777: ARRAY
44778: PPUSH
44779: CALL_OW 251
44783: PPUSH
44784: LD_VAR 0 17
44788: PUSH
44789: LD_INT 1
44791: ARRAY
44792: PPUSH
44793: CALL_OW 254
44797: PPUSH
44798: LD_INT 5
44800: PPUSH
44801: CALL_OW 273
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
44810: LD_VAR 0 16
44814: PUSH
44815: LD_INT 1
44817: ARRAY
44818: PPUSH
44819: LD_VAR 0 16
44823: PUSH
44824: LD_INT 2
44826: ARRAY
44827: PPUSH
44828: CALL_OW 488
44832: IFFALSE 44863
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
44834: LD_VAR 0 13
44838: PPUSH
44839: LD_VAR 0 16
44843: PUSH
44844: LD_INT 1
44846: ARRAY
44847: PPUSH
44848: LD_VAR 0 16
44852: PUSH
44853: LD_INT 2
44855: ARRAY
44856: PPUSH
44857: CALL_OW 111
// continue ;
44861: GO 44353
// end ; end ; r := GetDir ( tmp ) ;
44863: LD_ADDR_VAR 0 15
44867: PUSH
44868: LD_VAR 0 13
44872: PPUSH
44873: CALL_OW 254
44877: ST_TO_ADDR
// if r = 5 then
44878: LD_VAR 0 15
44882: PUSH
44883: LD_INT 5
44885: EQUAL
44886: IFFALSE 44896
// r := 0 ;
44888: LD_ADDR_VAR 0 15
44892: PUSH
44893: LD_INT 0
44895: ST_TO_ADDR
// for j = r to 5 do
44896: LD_ADDR_VAR 0 10
44900: PUSH
44901: DOUBLE
44902: LD_VAR 0 15
44906: DEC
44907: ST_TO_ADDR
44908: LD_INT 5
44910: PUSH
44911: FOR_TO
44912: IFFALSE 45026
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
44914: LD_ADDR_VAR 0 11
44918: PUSH
44919: LD_VAR 0 13
44923: PPUSH
44924: CALL_OW 250
44928: PPUSH
44929: LD_VAR 0 10
44933: PPUSH
44934: LD_INT 2
44936: PPUSH
44937: CALL_OW 272
44941: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
44942: LD_ADDR_VAR 0 12
44946: PUSH
44947: LD_VAR 0 13
44951: PPUSH
44952: CALL_OW 251
44956: PPUSH
44957: LD_VAR 0 10
44961: PPUSH
44962: LD_INT 2
44964: PPUSH
44965: CALL_OW 273
44969: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
44970: LD_VAR 0 11
44974: PPUSH
44975: LD_VAR 0 12
44979: PPUSH
44980: CALL_OW 488
44984: PUSH
44985: LD_VAR 0 11
44989: PPUSH
44990: LD_VAR 0 12
44994: PPUSH
44995: CALL_OW 428
44999: NOT
45000: AND
45001: IFFALSE 45024
// begin ComMoveXY ( tmp , _x , _y ) ;
45003: LD_VAR 0 13
45007: PPUSH
45008: LD_VAR 0 11
45012: PPUSH
45013: LD_VAR 0 12
45017: PPUSH
45018: CALL_OW 111
// break ;
45022: GO 45026
// end ; end ;
45024: GO 44911
45026: POP
45027: POP
// end ; end ;
45028: GO 44353
45030: POP
45031: POP
// end ;
45032: LD_VAR 0 8
45036: RET
// export function BuildingTechInvented ( side , btype ) ; begin
45037: LD_INT 0
45039: PPUSH
// result := true ;
45040: LD_ADDR_VAR 0 3
45044: PUSH
45045: LD_INT 1
45047: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
45048: LD_VAR 0 2
45052: PUSH
45053: LD_INT 24
45055: DOUBLE
45056: EQUAL
45057: IFTRUE 45067
45059: LD_INT 33
45061: DOUBLE
45062: EQUAL
45063: IFTRUE 45067
45065: GO 45092
45067: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
45068: LD_ADDR_VAR 0 3
45072: PUSH
45073: LD_INT 32
45075: PPUSH
45076: LD_VAR 0 1
45080: PPUSH
45081: CALL_OW 321
45085: PUSH
45086: LD_INT 2
45088: EQUAL
45089: ST_TO_ADDR
45090: GO 45408
45092: LD_INT 20
45094: DOUBLE
45095: EQUAL
45096: IFTRUE 45100
45098: GO 45125
45100: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
45101: LD_ADDR_VAR 0 3
45105: PUSH
45106: LD_INT 6
45108: PPUSH
45109: LD_VAR 0 1
45113: PPUSH
45114: CALL_OW 321
45118: PUSH
45119: LD_INT 2
45121: EQUAL
45122: ST_TO_ADDR
45123: GO 45408
45125: LD_INT 22
45127: DOUBLE
45128: EQUAL
45129: IFTRUE 45139
45131: LD_INT 36
45133: DOUBLE
45134: EQUAL
45135: IFTRUE 45139
45137: GO 45164
45139: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
45140: LD_ADDR_VAR 0 3
45144: PUSH
45145: LD_INT 15
45147: PPUSH
45148: LD_VAR 0 1
45152: PPUSH
45153: CALL_OW 321
45157: PUSH
45158: LD_INT 2
45160: EQUAL
45161: ST_TO_ADDR
45162: GO 45408
45164: LD_INT 30
45166: DOUBLE
45167: EQUAL
45168: IFTRUE 45172
45170: GO 45197
45172: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
45173: LD_ADDR_VAR 0 3
45177: PUSH
45178: LD_INT 20
45180: PPUSH
45181: LD_VAR 0 1
45185: PPUSH
45186: CALL_OW 321
45190: PUSH
45191: LD_INT 2
45193: EQUAL
45194: ST_TO_ADDR
45195: GO 45408
45197: LD_INT 28
45199: DOUBLE
45200: EQUAL
45201: IFTRUE 45211
45203: LD_INT 21
45205: DOUBLE
45206: EQUAL
45207: IFTRUE 45211
45209: GO 45236
45211: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
45212: LD_ADDR_VAR 0 3
45216: PUSH
45217: LD_INT 21
45219: PPUSH
45220: LD_VAR 0 1
45224: PPUSH
45225: CALL_OW 321
45229: PUSH
45230: LD_INT 2
45232: EQUAL
45233: ST_TO_ADDR
45234: GO 45408
45236: LD_INT 16
45238: DOUBLE
45239: EQUAL
45240: IFTRUE 45244
45242: GO 45269
45244: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
45245: LD_ADDR_VAR 0 3
45249: PUSH
45250: LD_INT 84
45252: PPUSH
45253: LD_VAR 0 1
45257: PPUSH
45258: CALL_OW 321
45262: PUSH
45263: LD_INT 2
45265: EQUAL
45266: ST_TO_ADDR
45267: GO 45408
45269: LD_INT 19
45271: DOUBLE
45272: EQUAL
45273: IFTRUE 45283
45275: LD_INT 23
45277: DOUBLE
45278: EQUAL
45279: IFTRUE 45283
45281: GO 45308
45283: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
45284: LD_ADDR_VAR 0 3
45288: PUSH
45289: LD_INT 83
45291: PPUSH
45292: LD_VAR 0 1
45296: PPUSH
45297: CALL_OW 321
45301: PUSH
45302: LD_INT 2
45304: EQUAL
45305: ST_TO_ADDR
45306: GO 45408
45308: LD_INT 17
45310: DOUBLE
45311: EQUAL
45312: IFTRUE 45316
45314: GO 45341
45316: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
45317: LD_ADDR_VAR 0 3
45321: PUSH
45322: LD_INT 39
45324: PPUSH
45325: LD_VAR 0 1
45329: PPUSH
45330: CALL_OW 321
45334: PUSH
45335: LD_INT 2
45337: EQUAL
45338: ST_TO_ADDR
45339: GO 45408
45341: LD_INT 18
45343: DOUBLE
45344: EQUAL
45345: IFTRUE 45349
45347: GO 45374
45349: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
45350: LD_ADDR_VAR 0 3
45354: PUSH
45355: LD_INT 40
45357: PPUSH
45358: LD_VAR 0 1
45362: PPUSH
45363: CALL_OW 321
45367: PUSH
45368: LD_INT 2
45370: EQUAL
45371: ST_TO_ADDR
45372: GO 45408
45374: LD_INT 27
45376: DOUBLE
45377: EQUAL
45378: IFTRUE 45382
45380: GO 45407
45382: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
45383: LD_ADDR_VAR 0 3
45387: PUSH
45388: LD_INT 35
45390: PPUSH
45391: LD_VAR 0 1
45395: PPUSH
45396: CALL_OW 321
45400: PUSH
45401: LD_INT 2
45403: EQUAL
45404: ST_TO_ADDR
45405: GO 45408
45407: POP
// end ;
45408: LD_VAR 0 3
45412: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
45413: LD_INT 0
45415: PPUSH
45416: PPUSH
45417: PPUSH
45418: PPUSH
45419: PPUSH
45420: PPUSH
45421: PPUSH
45422: PPUSH
45423: PPUSH
45424: PPUSH
45425: PPUSH
// result := false ;
45426: LD_ADDR_VAR 0 6
45430: PUSH
45431: LD_INT 0
45433: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
45434: LD_VAR 0 1
45438: NOT
45439: PUSH
45440: LD_VAR 0 1
45444: PPUSH
45445: CALL_OW 266
45449: PUSH
45450: LD_INT 0
45452: PUSH
45453: LD_INT 1
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: IN
45460: NOT
45461: OR
45462: PUSH
45463: LD_VAR 0 2
45467: NOT
45468: OR
45469: PUSH
45470: LD_VAR 0 5
45474: PUSH
45475: LD_INT 0
45477: PUSH
45478: LD_INT 1
45480: PUSH
45481: LD_INT 2
45483: PUSH
45484: LD_INT 3
45486: PUSH
45487: LD_INT 4
45489: PUSH
45490: LD_INT 5
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: LIST
45499: LIST
45500: IN
45501: NOT
45502: OR
45503: PUSH
45504: LD_VAR 0 3
45508: PPUSH
45509: LD_VAR 0 4
45513: PPUSH
45514: CALL_OW 488
45518: NOT
45519: OR
45520: IFFALSE 45524
// exit ;
45522: GO 46260
// side := GetSide ( depot ) ;
45524: LD_ADDR_VAR 0 9
45528: PUSH
45529: LD_VAR 0 1
45533: PPUSH
45534: CALL_OW 255
45538: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
45539: LD_VAR 0 9
45543: PPUSH
45544: LD_VAR 0 2
45548: PPUSH
45549: CALL 45037 0 2
45553: NOT
45554: IFFALSE 45558
// exit ;
45556: GO 46260
// pom := GetBase ( depot ) ;
45558: LD_ADDR_VAR 0 10
45562: PUSH
45563: LD_VAR 0 1
45567: PPUSH
45568: CALL_OW 274
45572: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
45573: LD_ADDR_VAR 0 11
45577: PUSH
45578: LD_VAR 0 2
45582: PPUSH
45583: LD_VAR 0 1
45587: PPUSH
45588: CALL_OW 248
45592: PPUSH
45593: CALL_OW 450
45597: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
45598: LD_VAR 0 10
45602: PPUSH
45603: LD_INT 1
45605: PPUSH
45606: CALL_OW 275
45610: PUSH
45611: LD_VAR 0 11
45615: PUSH
45616: LD_INT 1
45618: ARRAY
45619: GREATEREQUAL
45620: PUSH
45621: LD_VAR 0 10
45625: PPUSH
45626: LD_INT 2
45628: PPUSH
45629: CALL_OW 275
45633: PUSH
45634: LD_VAR 0 11
45638: PUSH
45639: LD_INT 2
45641: ARRAY
45642: GREATEREQUAL
45643: AND
45644: PUSH
45645: LD_VAR 0 10
45649: PPUSH
45650: LD_INT 3
45652: PPUSH
45653: CALL_OW 275
45657: PUSH
45658: LD_VAR 0 11
45662: PUSH
45663: LD_INT 3
45665: ARRAY
45666: GREATEREQUAL
45667: AND
45668: NOT
45669: IFFALSE 45673
// exit ;
45671: GO 46260
// if GetBType ( depot ) = b_depot then
45673: LD_VAR 0 1
45677: PPUSH
45678: CALL_OW 266
45682: PUSH
45683: LD_INT 0
45685: EQUAL
45686: IFFALSE 45698
// dist := 28 else
45688: LD_ADDR_VAR 0 14
45692: PUSH
45693: LD_INT 28
45695: ST_TO_ADDR
45696: GO 45706
// dist := 36 ;
45698: LD_ADDR_VAR 0 14
45702: PUSH
45703: LD_INT 36
45705: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
45706: LD_VAR 0 1
45710: PPUSH
45711: LD_VAR 0 3
45715: PPUSH
45716: LD_VAR 0 4
45720: PPUSH
45721: CALL_OW 297
45725: PUSH
45726: LD_VAR 0 14
45730: GREATER
45731: IFFALSE 45735
// exit ;
45733: GO 46260
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
45735: LD_ADDR_VAR 0 12
45739: PUSH
45740: LD_VAR 0 2
45744: PPUSH
45745: LD_VAR 0 3
45749: PPUSH
45750: LD_VAR 0 4
45754: PPUSH
45755: LD_VAR 0 5
45759: PPUSH
45760: LD_VAR 0 1
45764: PPUSH
45765: CALL_OW 248
45769: PPUSH
45770: LD_INT 0
45772: PPUSH
45773: CALL 46265 0 6
45777: ST_TO_ADDR
// if not hexes then
45778: LD_VAR 0 12
45782: NOT
45783: IFFALSE 45787
// exit ;
45785: GO 46260
// hex := GetHexInfo ( x , y ) ;
45787: LD_ADDR_VAR 0 15
45791: PUSH
45792: LD_VAR 0 3
45796: PPUSH
45797: LD_VAR 0 4
45801: PPUSH
45802: CALL_OW 546
45806: ST_TO_ADDR
// if hex [ 1 ] then
45807: LD_VAR 0 15
45811: PUSH
45812: LD_INT 1
45814: ARRAY
45815: IFFALSE 45819
// exit ;
45817: GO 46260
// height := hex [ 2 ] ;
45819: LD_ADDR_VAR 0 13
45823: PUSH
45824: LD_VAR 0 15
45828: PUSH
45829: LD_INT 2
45831: ARRAY
45832: ST_TO_ADDR
// for i = 1 to hexes do
45833: LD_ADDR_VAR 0 7
45837: PUSH
45838: DOUBLE
45839: LD_INT 1
45841: DEC
45842: ST_TO_ADDR
45843: LD_VAR 0 12
45847: PUSH
45848: FOR_TO
45849: IFFALSE 46179
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
45851: LD_VAR 0 12
45855: PUSH
45856: LD_VAR 0 7
45860: ARRAY
45861: PUSH
45862: LD_INT 1
45864: ARRAY
45865: PPUSH
45866: LD_VAR 0 12
45870: PUSH
45871: LD_VAR 0 7
45875: ARRAY
45876: PUSH
45877: LD_INT 2
45879: ARRAY
45880: PPUSH
45881: CALL_OW 488
45885: NOT
45886: PUSH
45887: LD_VAR 0 12
45891: PUSH
45892: LD_VAR 0 7
45896: ARRAY
45897: PUSH
45898: LD_INT 1
45900: ARRAY
45901: PPUSH
45902: LD_VAR 0 12
45906: PUSH
45907: LD_VAR 0 7
45911: ARRAY
45912: PUSH
45913: LD_INT 2
45915: ARRAY
45916: PPUSH
45917: CALL_OW 428
45921: PUSH
45922: LD_INT 0
45924: GREATER
45925: OR
45926: PUSH
45927: LD_VAR 0 12
45931: PUSH
45932: LD_VAR 0 7
45936: ARRAY
45937: PUSH
45938: LD_INT 1
45940: ARRAY
45941: PPUSH
45942: LD_VAR 0 12
45946: PUSH
45947: LD_VAR 0 7
45951: ARRAY
45952: PUSH
45953: LD_INT 2
45955: ARRAY
45956: PPUSH
45957: CALL_OW 351
45961: OR
45962: IFFALSE 45968
// exit ;
45964: POP
45965: POP
45966: GO 46260
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45968: LD_ADDR_VAR 0 8
45972: PUSH
45973: LD_VAR 0 12
45977: PUSH
45978: LD_VAR 0 7
45982: ARRAY
45983: PUSH
45984: LD_INT 1
45986: ARRAY
45987: PPUSH
45988: LD_VAR 0 12
45992: PUSH
45993: LD_VAR 0 7
45997: ARRAY
45998: PUSH
45999: LD_INT 2
46001: ARRAY
46002: PPUSH
46003: CALL_OW 546
46007: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
46008: LD_VAR 0 8
46012: PUSH
46013: LD_INT 1
46015: ARRAY
46016: PUSH
46017: LD_VAR 0 8
46021: PUSH
46022: LD_INT 2
46024: ARRAY
46025: PUSH
46026: LD_VAR 0 13
46030: PUSH
46031: LD_INT 2
46033: PLUS
46034: GREATER
46035: OR
46036: PUSH
46037: LD_VAR 0 8
46041: PUSH
46042: LD_INT 2
46044: ARRAY
46045: PUSH
46046: LD_VAR 0 13
46050: PUSH
46051: LD_INT 2
46053: MINUS
46054: LESS
46055: OR
46056: PUSH
46057: LD_VAR 0 8
46061: PUSH
46062: LD_INT 3
46064: ARRAY
46065: PUSH
46066: LD_INT 0
46068: PUSH
46069: LD_INT 8
46071: PUSH
46072: LD_INT 9
46074: PUSH
46075: LD_INT 10
46077: PUSH
46078: LD_INT 11
46080: PUSH
46081: LD_INT 12
46083: PUSH
46084: LD_INT 13
46086: PUSH
46087: LD_INT 16
46089: PUSH
46090: LD_INT 17
46092: PUSH
46093: LD_INT 18
46095: PUSH
46096: LD_INT 19
46098: PUSH
46099: LD_INT 20
46101: PUSH
46102: LD_INT 21
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: LIST
46109: LIST
46110: LIST
46111: LIST
46112: LIST
46113: LIST
46114: LIST
46115: LIST
46116: LIST
46117: LIST
46118: LIST
46119: IN
46120: NOT
46121: OR
46122: PUSH
46123: LD_VAR 0 8
46127: PUSH
46128: LD_INT 5
46130: ARRAY
46131: NOT
46132: OR
46133: PUSH
46134: LD_VAR 0 8
46138: PUSH
46139: LD_INT 6
46141: ARRAY
46142: PUSH
46143: LD_INT 1
46145: PUSH
46146: LD_INT 2
46148: PUSH
46149: LD_INT 7
46151: PUSH
46152: LD_INT 9
46154: PUSH
46155: LD_INT 10
46157: PUSH
46158: LD_INT 11
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: IN
46169: NOT
46170: OR
46171: IFFALSE 46177
// exit ;
46173: POP
46174: POP
46175: GO 46260
// end ;
46177: GO 45848
46179: POP
46180: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
46181: LD_VAR 0 9
46185: PPUSH
46186: LD_VAR 0 3
46190: PPUSH
46191: LD_VAR 0 4
46195: PPUSH
46196: LD_INT 20
46198: PPUSH
46199: CALL 38212 0 4
46203: PUSH
46204: LD_INT 4
46206: ARRAY
46207: IFFALSE 46211
// exit ;
46209: GO 46260
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
46211: LD_VAR 0 2
46215: PUSH
46216: LD_INT 29
46218: PUSH
46219: LD_INT 30
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: IN
46226: PUSH
46227: LD_VAR 0 3
46231: PPUSH
46232: LD_VAR 0 4
46236: PPUSH
46237: LD_VAR 0 9
46241: PPUSH
46242: CALL_OW 440
46246: NOT
46247: AND
46248: IFFALSE 46252
// exit ;
46250: GO 46260
// result := true ;
46252: LD_ADDR_VAR 0 6
46256: PUSH
46257: LD_INT 1
46259: ST_TO_ADDR
// end ;
46260: LD_VAR 0 6
46264: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
46265: LD_INT 0
46267: PPUSH
46268: PPUSH
46269: PPUSH
46270: PPUSH
46271: PPUSH
46272: PPUSH
46273: PPUSH
46274: PPUSH
46275: PPUSH
46276: PPUSH
46277: PPUSH
46278: PPUSH
46279: PPUSH
46280: PPUSH
46281: PPUSH
46282: PPUSH
46283: PPUSH
46284: PPUSH
46285: PPUSH
46286: PPUSH
46287: PPUSH
46288: PPUSH
46289: PPUSH
46290: PPUSH
46291: PPUSH
46292: PPUSH
46293: PPUSH
46294: PPUSH
46295: PPUSH
46296: PPUSH
46297: PPUSH
46298: PPUSH
46299: PPUSH
46300: PPUSH
46301: PPUSH
46302: PPUSH
46303: PPUSH
46304: PPUSH
46305: PPUSH
46306: PPUSH
46307: PPUSH
46308: PPUSH
46309: PPUSH
46310: PPUSH
46311: PPUSH
46312: PPUSH
46313: PPUSH
46314: PPUSH
46315: PPUSH
46316: PPUSH
46317: PPUSH
46318: PPUSH
46319: PPUSH
46320: PPUSH
46321: PPUSH
46322: PPUSH
46323: PPUSH
46324: PPUSH
// result = [ ] ;
46325: LD_ADDR_VAR 0 7
46329: PUSH
46330: EMPTY
46331: ST_TO_ADDR
// temp_list = [ ] ;
46332: LD_ADDR_VAR 0 9
46336: PUSH
46337: EMPTY
46338: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
46339: LD_VAR 0 4
46343: PUSH
46344: LD_INT 0
46346: PUSH
46347: LD_INT 1
46349: PUSH
46350: LD_INT 2
46352: PUSH
46353: LD_INT 3
46355: PUSH
46356: LD_INT 4
46358: PUSH
46359: LD_INT 5
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: IN
46370: NOT
46371: PUSH
46372: LD_VAR 0 1
46376: PUSH
46377: LD_INT 0
46379: PUSH
46380: LD_INT 1
46382: PUSH
46383: EMPTY
46384: LIST
46385: LIST
46386: IN
46387: PUSH
46388: LD_VAR 0 5
46392: PUSH
46393: LD_INT 1
46395: PUSH
46396: LD_INT 2
46398: PUSH
46399: LD_INT 3
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: LIST
46406: IN
46407: NOT
46408: AND
46409: OR
46410: IFFALSE 46414
// exit ;
46412: GO 64805
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
46414: LD_VAR 0 1
46418: PUSH
46419: LD_INT 6
46421: PUSH
46422: LD_INT 7
46424: PUSH
46425: LD_INT 8
46427: PUSH
46428: LD_INT 13
46430: PUSH
46431: LD_INT 12
46433: PUSH
46434: LD_INT 15
46436: PUSH
46437: LD_INT 11
46439: PUSH
46440: LD_INT 14
46442: PUSH
46443: LD_INT 10
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: LIST
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: IN
46457: IFFALSE 46467
// btype = b_lab ;
46459: LD_ADDR_VAR 0 1
46463: PUSH
46464: LD_INT 6
46466: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
46467: LD_VAR 0 6
46471: PUSH
46472: LD_INT 0
46474: PUSH
46475: LD_INT 1
46477: PUSH
46478: LD_INT 2
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: LIST
46485: IN
46486: NOT
46487: PUSH
46488: LD_VAR 0 1
46492: PUSH
46493: LD_INT 0
46495: PUSH
46496: LD_INT 1
46498: PUSH
46499: LD_INT 2
46501: PUSH
46502: LD_INT 3
46504: PUSH
46505: LD_INT 6
46507: PUSH
46508: LD_INT 36
46510: PUSH
46511: LD_INT 4
46513: PUSH
46514: LD_INT 5
46516: PUSH
46517: LD_INT 31
46519: PUSH
46520: LD_INT 32
46522: PUSH
46523: LD_INT 33
46525: PUSH
46526: EMPTY
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: IN
46539: NOT
46540: PUSH
46541: LD_VAR 0 6
46545: PUSH
46546: LD_INT 1
46548: EQUAL
46549: AND
46550: OR
46551: PUSH
46552: LD_VAR 0 1
46556: PUSH
46557: LD_INT 2
46559: PUSH
46560: LD_INT 3
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: IN
46567: NOT
46568: PUSH
46569: LD_VAR 0 6
46573: PUSH
46574: LD_INT 2
46576: EQUAL
46577: AND
46578: OR
46579: IFFALSE 46589
// mode = 0 ;
46581: LD_ADDR_VAR 0 6
46585: PUSH
46586: LD_INT 0
46588: ST_TO_ADDR
// case mode of 0 :
46589: LD_VAR 0 6
46593: PUSH
46594: LD_INT 0
46596: DOUBLE
46597: EQUAL
46598: IFTRUE 46602
46600: GO 58055
46602: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46603: LD_ADDR_VAR 0 11
46607: PUSH
46608: LD_INT 0
46610: PUSH
46611: LD_INT 0
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: LD_INT 0
46620: PUSH
46621: LD_INT 1
46623: NEG
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: LD_INT 1
46631: PUSH
46632: LD_INT 0
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: LD_INT 1
46641: PUSH
46642: LD_INT 1
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 0
46651: PUSH
46652: LD_INT 1
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: PUSH
46659: LD_INT 1
46661: NEG
46662: PUSH
46663: LD_INT 0
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 1
46672: NEG
46673: PUSH
46674: LD_INT 1
46676: NEG
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 1
46684: NEG
46685: PUSH
46686: LD_INT 2
46688: NEG
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: LD_INT 0
46696: PUSH
46697: LD_INT 2
46699: NEG
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 1
46707: PUSH
46708: LD_INT 1
46710: NEG
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 1
46718: PUSH
46719: LD_INT 2
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 0
46728: PUSH
46729: LD_INT 2
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 1
46738: NEG
46739: PUSH
46740: LD_INT 1
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 1
46749: PUSH
46750: LD_INT 3
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 0
46759: PUSH
46760: LD_INT 3
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 1
46769: NEG
46770: PUSH
46771: LD_INT 2
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46796: LD_ADDR_VAR 0 12
46800: PUSH
46801: LD_INT 0
46803: PUSH
46804: LD_INT 0
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 0
46813: PUSH
46814: LD_INT 1
46816: NEG
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 1
46824: PUSH
46825: LD_INT 0
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 1
46834: PUSH
46835: LD_INT 1
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 0
46844: PUSH
46845: LD_INT 1
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 1
46854: NEG
46855: PUSH
46856: LD_INT 0
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 1
46865: NEG
46866: PUSH
46867: LD_INT 1
46869: NEG
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 1
46877: PUSH
46878: LD_INT 1
46880: NEG
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: LD_INT 2
46888: PUSH
46889: LD_INT 0
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 2
46898: PUSH
46899: LD_INT 1
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: LD_INT 1
46908: NEG
46909: PUSH
46910: LD_INT 1
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PUSH
46917: LD_INT 2
46919: NEG
46920: PUSH
46921: LD_INT 0
46923: PUSH
46924: EMPTY
46925: LIST
46926: LIST
46927: PUSH
46928: LD_INT 2
46930: NEG
46931: PUSH
46932: LD_INT 1
46934: NEG
46935: PUSH
46936: EMPTY
46937: LIST
46938: LIST
46939: PUSH
46940: LD_INT 2
46942: NEG
46943: PUSH
46944: LD_INT 1
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 3
46953: NEG
46954: PUSH
46955: LD_INT 0
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 3
46964: NEG
46965: PUSH
46966: LD_INT 1
46968: NEG
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: EMPTY
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: LIST
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: LIST
46987: LIST
46988: LIST
46989: LIST
46990: LIST
46991: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46992: LD_ADDR_VAR 0 13
46996: PUSH
46997: LD_INT 0
46999: PUSH
47000: LD_INT 0
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 0
47009: PUSH
47010: LD_INT 1
47012: NEG
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: PUSH
47018: LD_INT 1
47020: PUSH
47021: LD_INT 0
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 1
47030: PUSH
47031: LD_INT 1
47033: PUSH
47034: EMPTY
47035: LIST
47036: LIST
47037: PUSH
47038: LD_INT 0
47040: PUSH
47041: LD_INT 1
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 1
47050: NEG
47051: PUSH
47052: LD_INT 0
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 1
47061: NEG
47062: PUSH
47063: LD_INT 1
47065: NEG
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 1
47073: NEG
47074: PUSH
47075: LD_INT 2
47077: NEG
47078: PUSH
47079: EMPTY
47080: LIST
47081: LIST
47082: PUSH
47083: LD_INT 2
47085: PUSH
47086: LD_INT 1
47088: PUSH
47089: EMPTY
47090: LIST
47091: LIST
47092: PUSH
47093: LD_INT 2
47095: PUSH
47096: LD_INT 2
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 1
47105: PUSH
47106: LD_INT 2
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 2
47115: NEG
47116: PUSH
47117: LD_INT 1
47119: NEG
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 2
47127: NEG
47128: PUSH
47129: LD_INT 2
47131: NEG
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 2
47139: NEG
47140: PUSH
47141: LD_INT 3
47143: NEG
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 3
47151: NEG
47152: PUSH
47153: LD_INT 2
47155: NEG
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 3
47163: NEG
47164: PUSH
47165: LD_INT 3
47167: NEG
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: LIST
47177: LIST
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47191: LD_ADDR_VAR 0 14
47195: PUSH
47196: LD_INT 0
47198: PUSH
47199: LD_INT 0
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 0
47208: PUSH
47209: LD_INT 1
47211: NEG
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 1
47219: PUSH
47220: LD_INT 0
47222: PUSH
47223: EMPTY
47224: LIST
47225: LIST
47226: PUSH
47227: LD_INT 1
47229: PUSH
47230: LD_INT 1
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: PUSH
47237: LD_INT 0
47239: PUSH
47240: LD_INT 1
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 1
47249: NEG
47250: PUSH
47251: LD_INT 0
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 1
47260: NEG
47261: PUSH
47262: LD_INT 1
47264: NEG
47265: PUSH
47266: EMPTY
47267: LIST
47268: LIST
47269: PUSH
47270: LD_INT 1
47272: NEG
47273: PUSH
47274: LD_INT 2
47276: NEG
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 0
47284: PUSH
47285: LD_INT 2
47287: NEG
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 1
47295: PUSH
47296: LD_INT 1
47298: NEG
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 1
47306: PUSH
47307: LD_INT 2
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 0
47316: PUSH
47317: LD_INT 2
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 1
47326: NEG
47327: PUSH
47328: LD_INT 1
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 1
47337: NEG
47338: PUSH
47339: LD_INT 3
47341: NEG
47342: PUSH
47343: EMPTY
47344: LIST
47345: LIST
47346: PUSH
47347: LD_INT 0
47349: PUSH
47350: LD_INT 3
47352: NEG
47353: PUSH
47354: EMPTY
47355: LIST
47356: LIST
47357: PUSH
47358: LD_INT 1
47360: PUSH
47361: LD_INT 2
47363: NEG
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: EMPTY
47370: LIST
47371: LIST
47372: LIST
47373: LIST
47374: LIST
47375: LIST
47376: LIST
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47387: LD_ADDR_VAR 0 15
47391: PUSH
47392: LD_INT 0
47394: PUSH
47395: LD_INT 0
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 0
47404: PUSH
47405: LD_INT 1
47407: NEG
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: PUSH
47413: LD_INT 1
47415: PUSH
47416: LD_INT 0
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: LD_INT 1
47425: PUSH
47426: LD_INT 1
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 0
47435: PUSH
47436: LD_INT 1
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 1
47445: NEG
47446: PUSH
47447: LD_INT 0
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 1
47456: NEG
47457: PUSH
47458: LD_INT 1
47460: NEG
47461: PUSH
47462: EMPTY
47463: LIST
47464: LIST
47465: PUSH
47466: LD_INT 1
47468: PUSH
47469: LD_INT 1
47471: NEG
47472: PUSH
47473: EMPTY
47474: LIST
47475: LIST
47476: PUSH
47477: LD_INT 2
47479: PUSH
47480: LD_INT 0
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: LD_INT 2
47489: PUSH
47490: LD_INT 1
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 1
47499: NEG
47500: PUSH
47501: LD_INT 1
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 2
47510: NEG
47511: PUSH
47512: LD_INT 0
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 2
47521: NEG
47522: PUSH
47523: LD_INT 1
47525: NEG
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 2
47533: PUSH
47534: LD_INT 1
47536: NEG
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: PUSH
47542: LD_INT 3
47544: PUSH
47545: LD_INT 0
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 3
47554: PUSH
47555: LD_INT 1
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: LIST
47566: LIST
47567: LIST
47568: LIST
47569: LIST
47570: LIST
47571: LIST
47572: LIST
47573: LIST
47574: LIST
47575: LIST
47576: LIST
47577: LIST
47578: LIST
47579: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47580: LD_ADDR_VAR 0 16
47584: PUSH
47585: LD_INT 0
47587: PUSH
47588: LD_INT 0
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 0
47597: PUSH
47598: LD_INT 1
47600: NEG
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: LD_INT 1
47608: PUSH
47609: LD_INT 0
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: LD_INT 1
47618: PUSH
47619: LD_INT 1
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 0
47628: PUSH
47629: LD_INT 1
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: LD_INT 1
47638: NEG
47639: PUSH
47640: LD_INT 0
47642: PUSH
47643: EMPTY
47644: LIST
47645: LIST
47646: PUSH
47647: LD_INT 1
47649: NEG
47650: PUSH
47651: LD_INT 1
47653: NEG
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PUSH
47659: LD_INT 1
47661: NEG
47662: PUSH
47663: LD_INT 2
47665: NEG
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 2
47673: PUSH
47674: LD_INT 1
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 2
47683: PUSH
47684: LD_INT 2
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: LD_INT 1
47693: PUSH
47694: LD_INT 2
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: PUSH
47701: LD_INT 2
47703: NEG
47704: PUSH
47705: LD_INT 1
47707: NEG
47708: PUSH
47709: EMPTY
47710: LIST
47711: LIST
47712: PUSH
47713: LD_INT 2
47715: NEG
47716: PUSH
47717: LD_INT 2
47719: NEG
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 3
47727: PUSH
47728: LD_INT 2
47730: PUSH
47731: EMPTY
47732: LIST
47733: LIST
47734: PUSH
47735: LD_INT 3
47737: PUSH
47738: LD_INT 3
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: LD_INT 2
47747: PUSH
47748: LD_INT 3
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47773: LD_ADDR_VAR 0 17
47777: PUSH
47778: LD_INT 0
47780: PUSH
47781: LD_INT 0
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 0
47790: PUSH
47791: LD_INT 1
47793: NEG
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 1
47801: PUSH
47802: LD_INT 0
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 1
47811: PUSH
47812: LD_INT 1
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: LD_INT 0
47821: PUSH
47822: LD_INT 1
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 1
47831: NEG
47832: PUSH
47833: LD_INT 0
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 1
47842: NEG
47843: PUSH
47844: LD_INT 1
47846: NEG
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: LD_INT 1
47854: NEG
47855: PUSH
47856: LD_INT 2
47858: NEG
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 0
47866: PUSH
47867: LD_INT 2
47869: NEG
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 1
47877: PUSH
47878: LD_INT 1
47880: NEG
47881: PUSH
47882: EMPTY
47883: LIST
47884: LIST
47885: PUSH
47886: LD_INT 2
47888: PUSH
47889: LD_INT 0
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 2
47898: PUSH
47899: LD_INT 1
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: LD_INT 2
47908: PUSH
47909: LD_INT 2
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: LD_INT 1
47918: PUSH
47919: LD_INT 2
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 0
47928: PUSH
47929: LD_INT 2
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 1
47938: NEG
47939: PUSH
47940: LD_INT 1
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 2
47949: NEG
47950: PUSH
47951: LD_INT 0
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: LD_INT 2
47960: NEG
47961: PUSH
47962: LD_INT 1
47964: NEG
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 2
47972: NEG
47973: PUSH
47974: LD_INT 2
47976: NEG
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: EMPTY
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: LIST
47995: LIST
47996: LIST
47997: LIST
47998: LIST
47999: LIST
48000: LIST
48001: LIST
48002: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48003: LD_ADDR_VAR 0 18
48007: PUSH
48008: LD_INT 0
48010: PUSH
48011: LD_INT 0
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 0
48020: PUSH
48021: LD_INT 1
48023: NEG
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: LD_INT 1
48031: PUSH
48032: LD_INT 0
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: LD_INT 1
48041: PUSH
48042: LD_INT 1
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: LD_INT 0
48051: PUSH
48052: LD_INT 1
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 1
48061: NEG
48062: PUSH
48063: LD_INT 0
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: LD_INT 1
48072: NEG
48073: PUSH
48074: LD_INT 1
48076: NEG
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: PUSH
48082: LD_INT 1
48084: NEG
48085: PUSH
48086: LD_INT 2
48088: NEG
48089: PUSH
48090: EMPTY
48091: LIST
48092: LIST
48093: PUSH
48094: LD_INT 0
48096: PUSH
48097: LD_INT 2
48099: NEG
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 1
48107: PUSH
48108: LD_INT 1
48110: NEG
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 2
48118: PUSH
48119: LD_INT 0
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: PUSH
48126: LD_INT 2
48128: PUSH
48129: LD_INT 1
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 2
48138: PUSH
48139: LD_INT 2
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: LD_INT 1
48148: PUSH
48149: LD_INT 2
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: LD_INT 0
48158: PUSH
48159: LD_INT 2
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 1
48168: NEG
48169: PUSH
48170: LD_INT 1
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 2
48179: NEG
48180: PUSH
48181: LD_INT 0
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 2
48190: NEG
48191: PUSH
48192: LD_INT 1
48194: NEG
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: LD_INT 2
48202: NEG
48203: PUSH
48204: LD_INT 2
48206: NEG
48207: PUSH
48208: EMPTY
48209: LIST
48210: LIST
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: LIST
48216: LIST
48217: LIST
48218: LIST
48219: LIST
48220: LIST
48221: LIST
48222: LIST
48223: LIST
48224: LIST
48225: LIST
48226: LIST
48227: LIST
48228: LIST
48229: LIST
48230: LIST
48231: LIST
48232: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48233: LD_ADDR_VAR 0 19
48237: PUSH
48238: LD_INT 0
48240: PUSH
48241: LD_INT 0
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 0
48250: PUSH
48251: LD_INT 1
48253: NEG
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: LD_INT 1
48261: PUSH
48262: LD_INT 0
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 1
48271: PUSH
48272: LD_INT 1
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 0
48281: PUSH
48282: LD_INT 1
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: LD_INT 1
48291: NEG
48292: PUSH
48293: LD_INT 0
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 1
48302: NEG
48303: PUSH
48304: LD_INT 1
48306: NEG
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 1
48314: NEG
48315: PUSH
48316: LD_INT 2
48318: NEG
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: LD_INT 0
48326: PUSH
48327: LD_INT 2
48329: NEG
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 1
48337: PUSH
48338: LD_INT 1
48340: NEG
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: LD_INT 2
48348: PUSH
48349: LD_INT 0
48351: PUSH
48352: EMPTY
48353: LIST
48354: LIST
48355: PUSH
48356: LD_INT 2
48358: PUSH
48359: LD_INT 1
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 2
48368: PUSH
48369: LD_INT 2
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: LD_INT 1
48378: PUSH
48379: LD_INT 2
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 0
48388: PUSH
48389: LD_INT 2
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 1
48398: NEG
48399: PUSH
48400: LD_INT 1
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 2
48409: NEG
48410: PUSH
48411: LD_INT 0
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: PUSH
48418: LD_INT 2
48420: NEG
48421: PUSH
48422: LD_INT 1
48424: NEG
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 2
48432: NEG
48433: PUSH
48434: LD_INT 2
48436: NEG
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: LIST
48446: LIST
48447: LIST
48448: LIST
48449: LIST
48450: LIST
48451: LIST
48452: LIST
48453: LIST
48454: LIST
48455: LIST
48456: LIST
48457: LIST
48458: LIST
48459: LIST
48460: LIST
48461: LIST
48462: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48463: LD_ADDR_VAR 0 20
48467: PUSH
48468: LD_INT 0
48470: PUSH
48471: LD_INT 0
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 0
48480: PUSH
48481: LD_INT 1
48483: NEG
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: LD_INT 1
48491: PUSH
48492: LD_INT 0
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 1
48501: PUSH
48502: LD_INT 1
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: LD_INT 0
48511: PUSH
48512: LD_INT 1
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 1
48521: NEG
48522: PUSH
48523: LD_INT 0
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 1
48532: NEG
48533: PUSH
48534: LD_INT 1
48536: NEG
48537: PUSH
48538: EMPTY
48539: LIST
48540: LIST
48541: PUSH
48542: LD_INT 1
48544: NEG
48545: PUSH
48546: LD_INT 2
48548: NEG
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 0
48556: PUSH
48557: LD_INT 2
48559: NEG
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 1
48567: PUSH
48568: LD_INT 1
48570: NEG
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 2
48578: PUSH
48579: LD_INT 0
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: PUSH
48586: LD_INT 2
48588: PUSH
48589: LD_INT 1
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: PUSH
48596: LD_INT 2
48598: PUSH
48599: LD_INT 2
48601: PUSH
48602: EMPTY
48603: LIST
48604: LIST
48605: PUSH
48606: LD_INT 1
48608: PUSH
48609: LD_INT 2
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 0
48618: PUSH
48619: LD_INT 2
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 1
48628: NEG
48629: PUSH
48630: LD_INT 1
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 2
48639: NEG
48640: PUSH
48641: LD_INT 0
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 2
48650: NEG
48651: PUSH
48652: LD_INT 1
48654: NEG
48655: PUSH
48656: EMPTY
48657: LIST
48658: LIST
48659: PUSH
48660: LD_INT 2
48662: NEG
48663: PUSH
48664: LD_INT 2
48666: NEG
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: LIST
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48693: LD_ADDR_VAR 0 21
48697: PUSH
48698: LD_INT 0
48700: PUSH
48701: LD_INT 0
48703: PUSH
48704: EMPTY
48705: LIST
48706: LIST
48707: PUSH
48708: LD_INT 0
48710: PUSH
48711: LD_INT 1
48713: NEG
48714: PUSH
48715: EMPTY
48716: LIST
48717: LIST
48718: PUSH
48719: LD_INT 1
48721: PUSH
48722: LD_INT 0
48724: PUSH
48725: EMPTY
48726: LIST
48727: LIST
48728: PUSH
48729: LD_INT 1
48731: PUSH
48732: LD_INT 1
48734: PUSH
48735: EMPTY
48736: LIST
48737: LIST
48738: PUSH
48739: LD_INT 0
48741: PUSH
48742: LD_INT 1
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 1
48751: NEG
48752: PUSH
48753: LD_INT 0
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: LD_INT 1
48762: NEG
48763: PUSH
48764: LD_INT 1
48766: NEG
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 1
48774: NEG
48775: PUSH
48776: LD_INT 2
48778: NEG
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 0
48786: PUSH
48787: LD_INT 2
48789: NEG
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: LD_INT 1
48797: PUSH
48798: LD_INT 1
48800: NEG
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: LD_INT 2
48808: PUSH
48809: LD_INT 0
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: PUSH
48816: LD_INT 2
48818: PUSH
48819: LD_INT 1
48821: PUSH
48822: EMPTY
48823: LIST
48824: LIST
48825: PUSH
48826: LD_INT 2
48828: PUSH
48829: LD_INT 2
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: PUSH
48836: LD_INT 1
48838: PUSH
48839: LD_INT 2
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: LD_INT 0
48848: PUSH
48849: LD_INT 2
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 1
48858: NEG
48859: PUSH
48860: LD_INT 1
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 2
48869: NEG
48870: PUSH
48871: LD_INT 0
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 2
48880: NEG
48881: PUSH
48882: LD_INT 1
48884: NEG
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 2
48892: NEG
48893: PUSH
48894: LD_INT 2
48896: NEG
48897: PUSH
48898: EMPTY
48899: LIST
48900: LIST
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: LIST
48913: LIST
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: LIST
48919: LIST
48920: LIST
48921: LIST
48922: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48923: LD_ADDR_VAR 0 22
48927: PUSH
48928: LD_INT 0
48930: PUSH
48931: LD_INT 0
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: LD_INT 0
48940: PUSH
48941: LD_INT 1
48943: NEG
48944: PUSH
48945: EMPTY
48946: LIST
48947: LIST
48948: PUSH
48949: LD_INT 1
48951: PUSH
48952: LD_INT 0
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: PUSH
48959: LD_INT 1
48961: PUSH
48962: LD_INT 1
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 0
48971: PUSH
48972: LD_INT 1
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: LD_INT 1
48981: NEG
48982: PUSH
48983: LD_INT 0
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 1
48992: NEG
48993: PUSH
48994: LD_INT 1
48996: NEG
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 1
49004: NEG
49005: PUSH
49006: LD_INT 2
49008: NEG
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: PUSH
49014: LD_INT 0
49016: PUSH
49017: LD_INT 2
49019: NEG
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 1
49027: PUSH
49028: LD_INT 1
49030: NEG
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 2
49038: PUSH
49039: LD_INT 0
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 2
49048: PUSH
49049: LD_INT 1
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 2
49058: PUSH
49059: LD_INT 2
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 1
49068: PUSH
49069: LD_INT 2
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 0
49078: PUSH
49079: LD_INT 2
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 1
49088: NEG
49089: PUSH
49090: LD_INT 1
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 2
49099: NEG
49100: PUSH
49101: LD_INT 0
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 2
49110: NEG
49111: PUSH
49112: LD_INT 1
49114: NEG
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: LD_INT 2
49122: NEG
49123: PUSH
49124: LD_INT 2
49126: NEG
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: LIST
49139: LIST
49140: LIST
49141: LIST
49142: LIST
49143: LIST
49144: LIST
49145: LIST
49146: LIST
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49153: LD_ADDR_VAR 0 23
49157: PUSH
49158: LD_INT 0
49160: PUSH
49161: LD_INT 0
49163: PUSH
49164: EMPTY
49165: LIST
49166: LIST
49167: PUSH
49168: LD_INT 0
49170: PUSH
49171: LD_INT 1
49173: NEG
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: PUSH
49179: LD_INT 1
49181: PUSH
49182: LD_INT 0
49184: PUSH
49185: EMPTY
49186: LIST
49187: LIST
49188: PUSH
49189: LD_INT 1
49191: PUSH
49192: LD_INT 1
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: LD_INT 0
49201: PUSH
49202: LD_INT 1
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 1
49211: NEG
49212: PUSH
49213: LD_INT 0
49215: PUSH
49216: EMPTY
49217: LIST
49218: LIST
49219: PUSH
49220: LD_INT 1
49222: NEG
49223: PUSH
49224: LD_INT 1
49226: NEG
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 1
49234: NEG
49235: PUSH
49236: LD_INT 2
49238: NEG
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 0
49246: PUSH
49247: LD_INT 2
49249: NEG
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: LD_INT 1
49257: PUSH
49258: LD_INT 1
49260: NEG
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 2
49268: PUSH
49269: LD_INT 0
49271: PUSH
49272: EMPTY
49273: LIST
49274: LIST
49275: PUSH
49276: LD_INT 2
49278: PUSH
49279: LD_INT 1
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 2
49288: PUSH
49289: LD_INT 2
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 1
49298: PUSH
49299: LD_INT 2
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 0
49308: PUSH
49309: LD_INT 2
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 1
49318: NEG
49319: PUSH
49320: LD_INT 1
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 2
49329: NEG
49330: PUSH
49331: LD_INT 0
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 2
49340: NEG
49341: PUSH
49342: LD_INT 1
49344: NEG
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 2
49352: NEG
49353: PUSH
49354: LD_INT 2
49356: NEG
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 2
49364: NEG
49365: PUSH
49366: LD_INT 3
49368: NEG
49369: PUSH
49370: EMPTY
49371: LIST
49372: LIST
49373: PUSH
49374: LD_INT 1
49376: NEG
49377: PUSH
49378: LD_INT 3
49380: NEG
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 1
49388: PUSH
49389: LD_INT 2
49391: NEG
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 2
49399: PUSH
49400: LD_INT 1
49402: NEG
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: LIST
49414: LIST
49415: LIST
49416: LIST
49417: LIST
49418: LIST
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
49433: LD_ADDR_VAR 0 24
49437: PUSH
49438: LD_INT 0
49440: PUSH
49441: LD_INT 0
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 0
49450: PUSH
49451: LD_INT 1
49453: NEG
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PUSH
49459: LD_INT 1
49461: PUSH
49462: LD_INT 0
49464: PUSH
49465: EMPTY
49466: LIST
49467: LIST
49468: PUSH
49469: LD_INT 1
49471: PUSH
49472: LD_INT 1
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: PUSH
49479: LD_INT 0
49481: PUSH
49482: LD_INT 1
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: PUSH
49489: LD_INT 1
49491: NEG
49492: PUSH
49493: LD_INT 0
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: LD_INT 1
49502: NEG
49503: PUSH
49504: LD_INT 1
49506: NEG
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 1
49514: NEG
49515: PUSH
49516: LD_INT 2
49518: NEG
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 0
49526: PUSH
49527: LD_INT 2
49529: NEG
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 1
49537: PUSH
49538: LD_INT 1
49540: NEG
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: LD_INT 2
49548: PUSH
49549: LD_INT 0
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 2
49558: PUSH
49559: LD_INT 1
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: LD_INT 2
49568: PUSH
49569: LD_INT 2
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_INT 1
49578: PUSH
49579: LD_INT 2
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 0
49588: PUSH
49589: LD_INT 2
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 1
49598: NEG
49599: PUSH
49600: LD_INT 1
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 2
49609: NEG
49610: PUSH
49611: LD_INT 0
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 2
49620: NEG
49621: PUSH
49622: LD_INT 1
49624: NEG
49625: PUSH
49626: EMPTY
49627: LIST
49628: LIST
49629: PUSH
49630: LD_INT 2
49632: NEG
49633: PUSH
49634: LD_INT 2
49636: NEG
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 1
49644: PUSH
49645: LD_INT 2
49647: NEG
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 2
49655: PUSH
49656: LD_INT 1
49658: NEG
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 3
49666: PUSH
49667: LD_INT 1
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: LD_INT 3
49676: PUSH
49677: LD_INT 2
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: EMPTY
49685: LIST
49686: LIST
49687: LIST
49688: LIST
49689: LIST
49690: LIST
49691: LIST
49692: LIST
49693: LIST
49694: LIST
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
49709: LD_ADDR_VAR 0 25
49713: PUSH
49714: LD_INT 0
49716: PUSH
49717: LD_INT 0
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: PUSH
49724: LD_INT 0
49726: PUSH
49727: LD_INT 1
49729: NEG
49730: PUSH
49731: EMPTY
49732: LIST
49733: LIST
49734: PUSH
49735: LD_INT 1
49737: PUSH
49738: LD_INT 0
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 1
49747: PUSH
49748: LD_INT 1
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 0
49757: PUSH
49758: LD_INT 1
49760: PUSH
49761: EMPTY
49762: LIST
49763: LIST
49764: PUSH
49765: LD_INT 1
49767: NEG
49768: PUSH
49769: LD_INT 0
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 1
49778: NEG
49779: PUSH
49780: LD_INT 1
49782: NEG
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 1
49790: NEG
49791: PUSH
49792: LD_INT 2
49794: NEG
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: LD_INT 0
49802: PUSH
49803: LD_INT 2
49805: NEG
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 1
49813: PUSH
49814: LD_INT 1
49816: NEG
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 2
49824: PUSH
49825: LD_INT 0
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: LD_INT 2
49834: PUSH
49835: LD_INT 1
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 2
49844: PUSH
49845: LD_INT 2
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 1
49854: PUSH
49855: LD_INT 2
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 0
49864: PUSH
49865: LD_INT 2
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 1
49874: NEG
49875: PUSH
49876: LD_INT 1
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 2
49885: NEG
49886: PUSH
49887: LD_INT 0
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 2
49896: NEG
49897: PUSH
49898: LD_INT 1
49900: NEG
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 2
49908: NEG
49909: PUSH
49910: LD_INT 2
49912: NEG
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 3
49920: PUSH
49921: LD_INT 1
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 3
49930: PUSH
49931: LD_INT 2
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 2
49940: PUSH
49941: LD_INT 3
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 1
49950: PUSH
49951: LD_INT 3
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: LIST
49962: LIST
49963: LIST
49964: LIST
49965: LIST
49966: LIST
49967: LIST
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49983: LD_ADDR_VAR 0 26
49987: PUSH
49988: LD_INT 0
49990: PUSH
49991: LD_INT 0
49993: PUSH
49994: EMPTY
49995: LIST
49996: LIST
49997: PUSH
49998: LD_INT 0
50000: PUSH
50001: LD_INT 1
50003: NEG
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 1
50011: PUSH
50012: LD_INT 0
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: PUSH
50019: LD_INT 1
50021: PUSH
50022: LD_INT 1
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 0
50031: PUSH
50032: LD_INT 1
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 1
50041: NEG
50042: PUSH
50043: LD_INT 0
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 1
50052: NEG
50053: PUSH
50054: LD_INT 1
50056: NEG
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: LD_INT 1
50064: NEG
50065: PUSH
50066: LD_INT 2
50068: NEG
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 0
50076: PUSH
50077: LD_INT 2
50079: NEG
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 1
50087: PUSH
50088: LD_INT 1
50090: NEG
50091: PUSH
50092: EMPTY
50093: LIST
50094: LIST
50095: PUSH
50096: LD_INT 2
50098: PUSH
50099: LD_INT 0
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 2
50108: PUSH
50109: LD_INT 1
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 2
50118: PUSH
50119: LD_INT 2
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 1
50128: PUSH
50129: LD_INT 2
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 0
50138: PUSH
50139: LD_INT 2
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 1
50148: NEG
50149: PUSH
50150: LD_INT 1
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 2
50159: NEG
50160: PUSH
50161: LD_INT 0
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: PUSH
50168: LD_INT 2
50170: NEG
50171: PUSH
50172: LD_INT 1
50174: NEG
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 2
50182: NEG
50183: PUSH
50184: LD_INT 2
50186: NEG
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: LD_INT 2
50194: PUSH
50195: LD_INT 3
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: LD_INT 1
50204: PUSH
50205: LD_INT 3
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 1
50214: NEG
50215: PUSH
50216: LD_INT 2
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 2
50225: NEG
50226: PUSH
50227: LD_INT 1
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: EMPTY
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: LIST
50255: LIST
50256: LIST
50257: LIST
50258: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50259: LD_ADDR_VAR 0 27
50263: PUSH
50264: LD_INT 0
50266: PUSH
50267: LD_INT 0
50269: PUSH
50270: EMPTY
50271: LIST
50272: LIST
50273: PUSH
50274: LD_INT 0
50276: PUSH
50277: LD_INT 1
50279: NEG
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: LD_INT 1
50287: PUSH
50288: LD_INT 0
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 1
50297: PUSH
50298: LD_INT 1
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 0
50307: PUSH
50308: LD_INT 1
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 1
50317: NEG
50318: PUSH
50319: LD_INT 0
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: LD_INT 1
50328: NEG
50329: PUSH
50330: LD_INT 1
50332: NEG
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 1
50340: NEG
50341: PUSH
50342: LD_INT 2
50344: NEG
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 0
50352: PUSH
50353: LD_INT 2
50355: NEG
50356: PUSH
50357: EMPTY
50358: LIST
50359: LIST
50360: PUSH
50361: LD_INT 1
50363: PUSH
50364: LD_INT 1
50366: NEG
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 2
50374: PUSH
50375: LD_INT 0
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 2
50384: PUSH
50385: LD_INT 1
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: PUSH
50392: LD_INT 2
50394: PUSH
50395: LD_INT 2
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 1
50404: PUSH
50405: LD_INT 2
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: PUSH
50412: LD_INT 0
50414: PUSH
50415: LD_INT 2
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 1
50424: NEG
50425: PUSH
50426: LD_INT 1
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 2
50435: NEG
50436: PUSH
50437: LD_INT 0
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: PUSH
50444: LD_INT 2
50446: NEG
50447: PUSH
50448: LD_INT 1
50450: NEG
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 2
50458: NEG
50459: PUSH
50460: LD_INT 2
50462: NEG
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: LD_INT 1
50470: NEG
50471: PUSH
50472: LD_INT 2
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 2
50481: NEG
50482: PUSH
50483: LD_INT 1
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 3
50492: NEG
50493: PUSH
50494: LD_INT 1
50496: NEG
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 3
50504: NEG
50505: PUSH
50506: LD_INT 2
50508: NEG
50509: PUSH
50510: EMPTY
50511: LIST
50512: LIST
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: LIST
50518: LIST
50519: LIST
50520: LIST
50521: LIST
50522: LIST
50523: LIST
50524: LIST
50525: LIST
50526: LIST
50527: LIST
50528: LIST
50529: LIST
50530: LIST
50531: LIST
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50539: LD_ADDR_VAR 0 28
50543: PUSH
50544: LD_INT 0
50546: PUSH
50547: LD_INT 0
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 0
50556: PUSH
50557: LD_INT 1
50559: NEG
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: PUSH
50565: LD_INT 1
50567: PUSH
50568: LD_INT 0
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: LD_INT 1
50577: PUSH
50578: LD_INT 1
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 0
50587: PUSH
50588: LD_INT 1
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 1
50597: NEG
50598: PUSH
50599: LD_INT 0
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 1
50608: NEG
50609: PUSH
50610: LD_INT 1
50612: NEG
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 1
50620: NEG
50621: PUSH
50622: LD_INT 2
50624: NEG
50625: PUSH
50626: EMPTY
50627: LIST
50628: LIST
50629: PUSH
50630: LD_INT 0
50632: PUSH
50633: LD_INT 2
50635: NEG
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: LD_INT 1
50643: PUSH
50644: LD_INT 1
50646: NEG
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: LD_INT 2
50654: PUSH
50655: LD_INT 0
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: PUSH
50662: LD_INT 2
50664: PUSH
50665: LD_INT 1
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 2
50674: PUSH
50675: LD_INT 2
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 1
50684: PUSH
50685: LD_INT 2
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 0
50694: PUSH
50695: LD_INT 2
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: PUSH
50702: LD_INT 1
50704: NEG
50705: PUSH
50706: LD_INT 1
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 2
50715: NEG
50716: PUSH
50717: LD_INT 0
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: LD_INT 2
50726: NEG
50727: PUSH
50728: LD_INT 1
50730: NEG
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: PUSH
50736: LD_INT 2
50738: NEG
50739: PUSH
50740: LD_INT 2
50742: NEG
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: LD_INT 2
50750: NEG
50751: PUSH
50752: LD_INT 3
50754: NEG
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: PUSH
50760: LD_INT 1
50762: NEG
50763: PUSH
50764: LD_INT 3
50766: NEG
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PUSH
50772: LD_INT 3
50774: NEG
50775: PUSH
50776: LD_INT 1
50778: NEG
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 3
50786: NEG
50787: PUSH
50788: LD_INT 2
50790: NEG
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: EMPTY
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50821: LD_ADDR_VAR 0 29
50825: PUSH
50826: LD_INT 0
50828: PUSH
50829: LD_INT 0
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: LD_INT 0
50838: PUSH
50839: LD_INT 1
50841: NEG
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: LD_INT 1
50849: PUSH
50850: LD_INT 0
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 1
50859: PUSH
50860: LD_INT 1
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 0
50869: PUSH
50870: LD_INT 1
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 1
50879: NEG
50880: PUSH
50881: LD_INT 0
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 1
50890: NEG
50891: PUSH
50892: LD_INT 1
50894: NEG
50895: PUSH
50896: EMPTY
50897: LIST
50898: LIST
50899: PUSH
50900: LD_INT 1
50902: NEG
50903: PUSH
50904: LD_INT 2
50906: NEG
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 0
50914: PUSH
50915: LD_INT 2
50917: NEG
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: LD_INT 1
50925: PUSH
50926: LD_INT 1
50928: NEG
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: LD_INT 2
50936: PUSH
50937: LD_INT 0
50939: PUSH
50940: EMPTY
50941: LIST
50942: LIST
50943: PUSH
50944: LD_INT 2
50946: PUSH
50947: LD_INT 1
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: PUSH
50954: LD_INT 1
50956: PUSH
50957: LD_INT 2
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 0
50966: PUSH
50967: LD_INT 2
50969: PUSH
50970: EMPTY
50971: LIST
50972: LIST
50973: PUSH
50974: LD_INT 1
50976: NEG
50977: PUSH
50978: LD_INT 1
50980: PUSH
50981: EMPTY
50982: LIST
50983: LIST
50984: PUSH
50985: LD_INT 2
50987: NEG
50988: PUSH
50989: LD_INT 1
50991: NEG
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: LD_INT 2
50999: NEG
51000: PUSH
51001: LD_INT 2
51003: NEG
51004: PUSH
51005: EMPTY
51006: LIST
51007: LIST
51008: PUSH
51009: LD_INT 2
51011: NEG
51012: PUSH
51013: LD_INT 3
51015: NEG
51016: PUSH
51017: EMPTY
51018: LIST
51019: LIST
51020: PUSH
51021: LD_INT 2
51023: PUSH
51024: LD_INT 1
51026: NEG
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 3
51034: PUSH
51035: LD_INT 1
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 1
51044: PUSH
51045: LD_INT 3
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 1
51054: NEG
51055: PUSH
51056: LD_INT 2
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 3
51065: NEG
51066: PUSH
51067: LD_INT 2
51069: NEG
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: LIST
51079: LIST
51080: LIST
51081: LIST
51082: LIST
51083: LIST
51084: LIST
51085: LIST
51086: LIST
51087: LIST
51088: LIST
51089: LIST
51090: LIST
51091: LIST
51092: LIST
51093: LIST
51094: LIST
51095: LIST
51096: LIST
51097: LIST
51098: LIST
51099: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51100: LD_ADDR_VAR 0 30
51104: PUSH
51105: LD_INT 0
51107: PUSH
51108: LD_INT 0
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 0
51117: PUSH
51118: LD_INT 1
51120: NEG
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 1
51128: PUSH
51129: LD_INT 0
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 1
51138: PUSH
51139: LD_INT 1
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 0
51148: PUSH
51149: LD_INT 1
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 1
51158: NEG
51159: PUSH
51160: LD_INT 0
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 1
51169: NEG
51170: PUSH
51171: LD_INT 1
51173: NEG
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 1
51181: NEG
51182: PUSH
51183: LD_INT 2
51185: NEG
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 0
51193: PUSH
51194: LD_INT 2
51196: NEG
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: PUSH
51202: LD_INT 1
51204: PUSH
51205: LD_INT 1
51207: NEG
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 2
51215: PUSH
51216: LD_INT 0
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 2
51225: PUSH
51226: LD_INT 1
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 2
51235: PUSH
51236: LD_INT 2
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 1
51245: PUSH
51246: LD_INT 2
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 1
51255: NEG
51256: PUSH
51257: LD_INT 1
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 2
51266: NEG
51267: PUSH
51268: LD_INT 0
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: LD_INT 2
51277: NEG
51278: PUSH
51279: LD_INT 1
51281: NEG
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 1
51289: NEG
51290: PUSH
51291: LD_INT 3
51293: NEG
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 1
51301: PUSH
51302: LD_INT 2
51304: NEG
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 3
51312: PUSH
51313: LD_INT 2
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: LD_INT 2
51322: PUSH
51323: LD_INT 3
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 2
51332: NEG
51333: PUSH
51334: LD_INT 1
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: PUSH
51341: LD_INT 3
51343: NEG
51344: PUSH
51345: LD_INT 1
51347: NEG
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: LIST
51374: LIST
51375: LIST
51376: LIST
51377: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51378: LD_ADDR_VAR 0 31
51382: PUSH
51383: LD_INT 0
51385: PUSH
51386: LD_INT 0
51388: PUSH
51389: EMPTY
51390: LIST
51391: LIST
51392: PUSH
51393: LD_INT 0
51395: PUSH
51396: LD_INT 1
51398: NEG
51399: PUSH
51400: EMPTY
51401: LIST
51402: LIST
51403: PUSH
51404: LD_INT 1
51406: PUSH
51407: LD_INT 0
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: LD_INT 1
51416: PUSH
51417: LD_INT 1
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: LD_INT 0
51426: PUSH
51427: LD_INT 1
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 1
51436: NEG
51437: PUSH
51438: LD_INT 0
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 1
51447: NEG
51448: PUSH
51449: LD_INT 1
51451: NEG
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 1
51459: NEG
51460: PUSH
51461: LD_INT 2
51463: NEG
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 1
51471: PUSH
51472: LD_INT 1
51474: NEG
51475: PUSH
51476: EMPTY
51477: LIST
51478: LIST
51479: PUSH
51480: LD_INT 2
51482: PUSH
51483: LD_INT 0
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 2
51492: PUSH
51493: LD_INT 1
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: LD_INT 2
51502: PUSH
51503: LD_INT 2
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 1
51512: PUSH
51513: LD_INT 2
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 0
51522: PUSH
51523: LD_INT 2
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 1
51532: NEG
51533: PUSH
51534: LD_INT 1
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 2
51543: NEG
51544: PUSH
51545: LD_INT 1
51547: NEG
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: LD_INT 2
51555: NEG
51556: PUSH
51557: LD_INT 2
51559: NEG
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 2
51567: NEG
51568: PUSH
51569: LD_INT 3
51571: NEG
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 2
51579: PUSH
51580: LD_INT 1
51582: NEG
51583: PUSH
51584: EMPTY
51585: LIST
51586: LIST
51587: PUSH
51588: LD_INT 3
51590: PUSH
51591: LD_INT 1
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 1
51600: PUSH
51601: LD_INT 3
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: LD_INT 1
51610: NEG
51611: PUSH
51612: LD_INT 2
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: LD_INT 3
51621: NEG
51622: PUSH
51623: LD_INT 2
51625: NEG
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: LIST
51645: LIST
51646: LIST
51647: LIST
51648: LIST
51649: LIST
51650: LIST
51651: LIST
51652: LIST
51653: LIST
51654: LIST
51655: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51656: LD_ADDR_VAR 0 32
51660: PUSH
51661: LD_INT 0
51663: PUSH
51664: LD_INT 0
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: LD_INT 0
51673: PUSH
51674: LD_INT 1
51676: NEG
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: LD_INT 1
51684: PUSH
51685: LD_INT 0
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 1
51694: PUSH
51695: LD_INT 1
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: PUSH
51702: LD_INT 0
51704: PUSH
51705: LD_INT 1
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 1
51714: NEG
51715: PUSH
51716: LD_INT 0
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 1
51725: NEG
51726: PUSH
51727: LD_INT 1
51729: NEG
51730: PUSH
51731: EMPTY
51732: LIST
51733: LIST
51734: PUSH
51735: LD_INT 1
51737: NEG
51738: PUSH
51739: LD_INT 2
51741: NEG
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 0
51749: PUSH
51750: LD_INT 2
51752: NEG
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 1
51760: PUSH
51761: LD_INT 1
51763: NEG
51764: PUSH
51765: EMPTY
51766: LIST
51767: LIST
51768: PUSH
51769: LD_INT 2
51771: PUSH
51772: LD_INT 1
51774: PUSH
51775: EMPTY
51776: LIST
51777: LIST
51778: PUSH
51779: LD_INT 2
51781: PUSH
51782: LD_INT 2
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 1
51791: PUSH
51792: LD_INT 2
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 0
51801: PUSH
51802: LD_INT 2
51804: PUSH
51805: EMPTY
51806: LIST
51807: LIST
51808: PUSH
51809: LD_INT 1
51811: NEG
51812: PUSH
51813: LD_INT 1
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 2
51822: NEG
51823: PUSH
51824: LD_INT 0
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: LD_INT 2
51833: NEG
51834: PUSH
51835: LD_INT 1
51837: NEG
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 1
51845: NEG
51846: PUSH
51847: LD_INT 3
51849: NEG
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: LD_INT 1
51857: PUSH
51858: LD_INT 2
51860: NEG
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 3
51868: PUSH
51869: LD_INT 2
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 2
51878: PUSH
51879: LD_INT 3
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 2
51888: NEG
51889: PUSH
51890: LD_INT 1
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: PUSH
51897: LD_INT 3
51899: NEG
51900: PUSH
51901: LD_INT 1
51903: NEG
51904: PUSH
51905: EMPTY
51906: LIST
51907: LIST
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: LIST
51913: LIST
51914: LIST
51915: LIST
51916: LIST
51917: LIST
51918: LIST
51919: LIST
51920: LIST
51921: LIST
51922: LIST
51923: LIST
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: LIST
51932: LIST
51933: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51934: LD_ADDR_VAR 0 33
51938: PUSH
51939: LD_INT 0
51941: PUSH
51942: LD_INT 0
51944: PUSH
51945: EMPTY
51946: LIST
51947: LIST
51948: PUSH
51949: LD_INT 0
51951: PUSH
51952: LD_INT 1
51954: NEG
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: LD_INT 1
51962: PUSH
51963: LD_INT 0
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: LD_INT 1
51972: PUSH
51973: LD_INT 1
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 0
51982: PUSH
51983: LD_INT 1
51985: PUSH
51986: EMPTY
51987: LIST
51988: LIST
51989: PUSH
51990: LD_INT 1
51992: NEG
51993: PUSH
51994: LD_INT 0
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 1
52003: NEG
52004: PUSH
52005: LD_INT 1
52007: NEG
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 1
52015: NEG
52016: PUSH
52017: LD_INT 2
52019: NEG
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 1
52027: PUSH
52028: LD_INT 1
52030: NEG
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 2
52038: PUSH
52039: LD_INT 0
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 2
52048: PUSH
52049: LD_INT 1
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 1
52058: PUSH
52059: LD_INT 2
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 0
52068: PUSH
52069: LD_INT 2
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 1
52078: NEG
52079: PUSH
52080: LD_INT 1
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 2
52089: NEG
52090: PUSH
52091: LD_INT 0
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 2
52100: NEG
52101: PUSH
52102: LD_INT 1
52104: NEG
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 2
52112: NEG
52113: PUSH
52114: LD_INT 2
52116: NEG
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: LD_INT 2
52124: NEG
52125: PUSH
52126: LD_INT 3
52128: NEG
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 2
52136: PUSH
52137: LD_INT 1
52139: NEG
52140: PUSH
52141: EMPTY
52142: LIST
52143: LIST
52144: PUSH
52145: LD_INT 3
52147: PUSH
52148: LD_INT 1
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: LD_INT 1
52157: PUSH
52158: LD_INT 3
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 1
52167: NEG
52168: PUSH
52169: LD_INT 2
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 3
52178: NEG
52179: PUSH
52180: LD_INT 2
52182: NEG
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52213: LD_ADDR_VAR 0 34
52217: PUSH
52218: LD_INT 0
52220: PUSH
52221: LD_INT 0
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 0
52230: PUSH
52231: LD_INT 1
52233: NEG
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 1
52241: PUSH
52242: LD_INT 0
52244: PUSH
52245: EMPTY
52246: LIST
52247: LIST
52248: PUSH
52249: LD_INT 1
52251: PUSH
52252: LD_INT 1
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 0
52261: PUSH
52262: LD_INT 1
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 1
52271: NEG
52272: PUSH
52273: LD_INT 0
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 1
52282: NEG
52283: PUSH
52284: LD_INT 1
52286: NEG
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 1
52294: NEG
52295: PUSH
52296: LD_INT 2
52298: NEG
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: LD_INT 0
52306: PUSH
52307: LD_INT 2
52309: NEG
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: LD_INT 1
52317: PUSH
52318: LD_INT 1
52320: NEG
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 2
52328: PUSH
52329: LD_INT 1
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: LD_INT 2
52338: PUSH
52339: LD_INT 2
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: LD_INT 1
52348: PUSH
52349: LD_INT 2
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 1
52358: NEG
52359: PUSH
52360: LD_INT 1
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 2
52369: NEG
52370: PUSH
52371: LD_INT 0
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 2
52380: NEG
52381: PUSH
52382: LD_INT 1
52384: NEG
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: LD_INT 2
52392: NEG
52393: PUSH
52394: LD_INT 2
52396: NEG
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: LD_INT 1
52404: NEG
52405: PUSH
52406: LD_INT 3
52408: NEG
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 1
52416: PUSH
52417: LD_INT 2
52419: NEG
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 3
52427: PUSH
52428: LD_INT 2
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 2
52437: PUSH
52438: LD_INT 3
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 2
52447: NEG
52448: PUSH
52449: LD_INT 1
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 3
52458: NEG
52459: PUSH
52460: LD_INT 1
52462: NEG
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: LIST
52485: LIST
52486: LIST
52487: LIST
52488: LIST
52489: LIST
52490: LIST
52491: LIST
52492: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52493: LD_ADDR_VAR 0 35
52497: PUSH
52498: LD_INT 0
52500: PUSH
52501: LD_INT 0
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 0
52510: PUSH
52511: LD_INT 1
52513: NEG
52514: PUSH
52515: EMPTY
52516: LIST
52517: LIST
52518: PUSH
52519: LD_INT 1
52521: PUSH
52522: LD_INT 0
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 1
52531: PUSH
52532: LD_INT 1
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: PUSH
52539: LD_INT 0
52541: PUSH
52542: LD_INT 1
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 1
52551: NEG
52552: PUSH
52553: LD_INT 0
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 1
52562: NEG
52563: PUSH
52564: LD_INT 1
52566: NEG
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 2
52574: PUSH
52575: LD_INT 1
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 2
52584: NEG
52585: PUSH
52586: LD_INT 1
52588: NEG
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: LIST
52602: LIST
52603: LIST
52604: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52605: LD_ADDR_VAR 0 36
52609: PUSH
52610: LD_INT 0
52612: PUSH
52613: LD_INT 0
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 0
52622: PUSH
52623: LD_INT 1
52625: NEG
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 1
52633: PUSH
52634: LD_INT 0
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 1
52643: PUSH
52644: LD_INT 1
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 0
52653: PUSH
52654: LD_INT 1
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 1
52663: NEG
52664: PUSH
52665: LD_INT 0
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 1
52674: NEG
52675: PUSH
52676: LD_INT 1
52678: NEG
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: LD_INT 1
52686: NEG
52687: PUSH
52688: LD_INT 2
52690: NEG
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 1
52698: PUSH
52699: LD_INT 2
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: LIST
52715: LIST
52716: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52717: LD_ADDR_VAR 0 37
52721: PUSH
52722: LD_INT 0
52724: PUSH
52725: LD_INT 0
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 0
52734: PUSH
52735: LD_INT 1
52737: NEG
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 1
52745: PUSH
52746: LD_INT 0
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 1
52755: PUSH
52756: LD_INT 1
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 0
52765: PUSH
52766: LD_INT 1
52768: PUSH
52769: EMPTY
52770: LIST
52771: LIST
52772: PUSH
52773: LD_INT 1
52775: NEG
52776: PUSH
52777: LD_INT 0
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 1
52786: NEG
52787: PUSH
52788: LD_INT 1
52790: NEG
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 1
52798: PUSH
52799: LD_INT 1
52801: NEG
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 1
52809: NEG
52810: PUSH
52811: LD_INT 1
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52829: LD_ADDR_VAR 0 38
52833: PUSH
52834: LD_INT 0
52836: PUSH
52837: LD_INT 0
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 0
52846: PUSH
52847: LD_INT 1
52849: NEG
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 1
52857: PUSH
52858: LD_INT 0
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 1
52867: PUSH
52868: LD_INT 1
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PUSH
52875: LD_INT 0
52877: PUSH
52878: LD_INT 1
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: LD_INT 1
52887: NEG
52888: PUSH
52889: LD_INT 0
52891: PUSH
52892: EMPTY
52893: LIST
52894: LIST
52895: PUSH
52896: LD_INT 1
52898: NEG
52899: PUSH
52900: LD_INT 1
52902: NEG
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 2
52910: PUSH
52911: LD_INT 1
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 2
52920: NEG
52921: PUSH
52922: LD_INT 1
52924: NEG
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52941: LD_ADDR_VAR 0 39
52945: PUSH
52946: LD_INT 0
52948: PUSH
52949: LD_INT 0
52951: PUSH
52952: EMPTY
52953: LIST
52954: LIST
52955: PUSH
52956: LD_INT 0
52958: PUSH
52959: LD_INT 1
52961: NEG
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 1
52969: PUSH
52970: LD_INT 0
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 1
52979: PUSH
52980: LD_INT 1
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: PUSH
52987: LD_INT 0
52989: PUSH
52990: LD_INT 1
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: LD_INT 1
52999: NEG
53000: PUSH
53001: LD_INT 0
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: LD_INT 1
53010: NEG
53011: PUSH
53012: LD_INT 1
53014: NEG
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 1
53022: NEG
53023: PUSH
53024: LD_INT 2
53026: NEG
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: PUSH
53032: LD_INT 1
53034: PUSH
53035: LD_INT 2
53037: PUSH
53038: EMPTY
53039: LIST
53040: LIST
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: LIST
53051: LIST
53052: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53053: LD_ADDR_VAR 0 40
53057: PUSH
53058: LD_INT 0
53060: PUSH
53061: LD_INT 0
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: LD_INT 0
53070: PUSH
53071: LD_INT 1
53073: NEG
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 1
53081: PUSH
53082: LD_INT 0
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 1
53091: PUSH
53092: LD_INT 1
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 0
53101: PUSH
53102: LD_INT 1
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 1
53111: NEG
53112: PUSH
53113: LD_INT 0
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 1
53122: NEG
53123: PUSH
53124: LD_INT 1
53126: NEG
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 1
53134: PUSH
53135: LD_INT 1
53137: NEG
53138: PUSH
53139: EMPTY
53140: LIST
53141: LIST
53142: PUSH
53143: LD_INT 1
53145: NEG
53146: PUSH
53147: LD_INT 1
53149: PUSH
53150: EMPTY
53151: LIST
53152: LIST
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53165: LD_ADDR_VAR 0 41
53169: PUSH
53170: LD_INT 0
53172: PUSH
53173: LD_INT 0
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: LD_INT 0
53182: PUSH
53183: LD_INT 1
53185: NEG
53186: PUSH
53187: EMPTY
53188: LIST
53189: LIST
53190: PUSH
53191: LD_INT 1
53193: PUSH
53194: LD_INT 0
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 1
53203: PUSH
53204: LD_INT 1
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: LD_INT 0
53213: PUSH
53214: LD_INT 1
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 1
53223: NEG
53224: PUSH
53225: LD_INT 0
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 1
53234: NEG
53235: PUSH
53236: LD_INT 1
53238: NEG
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 1
53246: NEG
53247: PUSH
53248: LD_INT 2
53250: NEG
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 1
53258: PUSH
53259: LD_INT 1
53261: NEG
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 2
53269: PUSH
53270: LD_INT 0
53272: PUSH
53273: EMPTY
53274: LIST
53275: LIST
53276: PUSH
53277: LD_INT 2
53279: PUSH
53280: LD_INT 1
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 2
53289: PUSH
53290: LD_INT 2
53292: PUSH
53293: EMPTY
53294: LIST
53295: LIST
53296: PUSH
53297: LD_INT 1
53299: PUSH
53300: LD_INT 2
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 1
53309: NEG
53310: PUSH
53311: LD_INT 1
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 2
53320: NEG
53321: PUSH
53322: LD_INT 0
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: PUSH
53329: LD_INT 2
53331: NEG
53332: PUSH
53333: LD_INT 1
53335: NEG
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 2
53343: NEG
53344: PUSH
53345: LD_INT 2
53347: NEG
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 2
53355: NEG
53356: PUSH
53357: LD_INT 3
53359: NEG
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: PUSH
53365: LD_INT 2
53367: PUSH
53368: LD_INT 1
53370: NEG
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 3
53378: PUSH
53379: LD_INT 0
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PUSH
53386: LD_INT 3
53388: PUSH
53389: LD_INT 1
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 3
53398: PUSH
53399: LD_INT 2
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: PUSH
53406: LD_INT 3
53408: PUSH
53409: LD_INT 3
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: LD_INT 2
53418: PUSH
53419: LD_INT 3
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 2
53428: NEG
53429: PUSH
53430: LD_INT 1
53432: PUSH
53433: EMPTY
53434: LIST
53435: LIST
53436: PUSH
53437: LD_INT 3
53439: NEG
53440: PUSH
53441: LD_INT 0
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: PUSH
53448: LD_INT 3
53450: NEG
53451: PUSH
53452: LD_INT 1
53454: NEG
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 3
53462: NEG
53463: PUSH
53464: LD_INT 2
53466: NEG
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 3
53474: NEG
53475: PUSH
53476: LD_INT 3
53478: NEG
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: EMPTY
53485: LIST
53486: LIST
53487: LIST
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: LIST
53506: LIST
53507: LIST
53508: LIST
53509: LIST
53510: LIST
53511: LIST
53512: LIST
53513: LIST
53514: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53515: LD_ADDR_VAR 0 42
53519: PUSH
53520: LD_INT 0
53522: PUSH
53523: LD_INT 0
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: LD_INT 0
53532: PUSH
53533: LD_INT 1
53535: NEG
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 1
53543: PUSH
53544: LD_INT 0
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 1
53553: PUSH
53554: LD_INT 1
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 0
53563: PUSH
53564: LD_INT 1
53566: PUSH
53567: EMPTY
53568: LIST
53569: LIST
53570: PUSH
53571: LD_INT 1
53573: NEG
53574: PUSH
53575: LD_INT 0
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 1
53584: NEG
53585: PUSH
53586: LD_INT 1
53588: NEG
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 1
53596: NEG
53597: PUSH
53598: LD_INT 2
53600: NEG
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 0
53608: PUSH
53609: LD_INT 2
53611: NEG
53612: PUSH
53613: EMPTY
53614: LIST
53615: LIST
53616: PUSH
53617: LD_INT 1
53619: PUSH
53620: LD_INT 1
53622: NEG
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 2
53630: PUSH
53631: LD_INT 1
53633: PUSH
53634: EMPTY
53635: LIST
53636: LIST
53637: PUSH
53638: LD_INT 2
53640: PUSH
53641: LD_INT 2
53643: PUSH
53644: EMPTY
53645: LIST
53646: LIST
53647: PUSH
53648: LD_INT 1
53650: PUSH
53651: LD_INT 2
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 0
53660: PUSH
53661: LD_INT 2
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 1
53670: NEG
53671: PUSH
53672: LD_INT 1
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: PUSH
53679: LD_INT 2
53681: NEG
53682: PUSH
53683: LD_INT 1
53685: NEG
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 2
53693: NEG
53694: PUSH
53695: LD_INT 2
53697: NEG
53698: PUSH
53699: EMPTY
53700: LIST
53701: LIST
53702: PUSH
53703: LD_INT 2
53705: NEG
53706: PUSH
53707: LD_INT 3
53709: NEG
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 1
53717: NEG
53718: PUSH
53719: LD_INT 3
53721: NEG
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 0
53729: PUSH
53730: LD_INT 3
53732: NEG
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 1
53740: PUSH
53741: LD_INT 2
53743: NEG
53744: PUSH
53745: EMPTY
53746: LIST
53747: LIST
53748: PUSH
53749: LD_INT 3
53751: PUSH
53752: LD_INT 2
53754: PUSH
53755: EMPTY
53756: LIST
53757: LIST
53758: PUSH
53759: LD_INT 3
53761: PUSH
53762: LD_INT 3
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_INT 2
53771: PUSH
53772: LD_INT 3
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 1
53781: PUSH
53782: LD_INT 3
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 0
53791: PUSH
53792: LD_INT 3
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 1
53801: NEG
53802: PUSH
53803: LD_INT 2
53805: PUSH
53806: EMPTY
53807: LIST
53808: LIST
53809: PUSH
53810: LD_INT 3
53812: NEG
53813: PUSH
53814: LD_INT 2
53816: NEG
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 3
53824: NEG
53825: PUSH
53826: LD_INT 3
53828: NEG
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: LIST
53838: LIST
53839: LIST
53840: LIST
53841: LIST
53842: LIST
53843: LIST
53844: LIST
53845: LIST
53846: LIST
53847: LIST
53848: LIST
53849: LIST
53850: LIST
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: LIST
53860: LIST
53861: LIST
53862: LIST
53863: LIST
53864: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53865: LD_ADDR_VAR 0 43
53869: PUSH
53870: LD_INT 0
53872: PUSH
53873: LD_INT 0
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: LD_INT 0
53882: PUSH
53883: LD_INT 1
53885: NEG
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 1
53893: PUSH
53894: LD_INT 0
53896: PUSH
53897: EMPTY
53898: LIST
53899: LIST
53900: PUSH
53901: LD_INT 1
53903: PUSH
53904: LD_INT 1
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 0
53913: PUSH
53914: LD_INT 1
53916: PUSH
53917: EMPTY
53918: LIST
53919: LIST
53920: PUSH
53921: LD_INT 1
53923: NEG
53924: PUSH
53925: LD_INT 0
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 1
53934: NEG
53935: PUSH
53936: LD_INT 1
53938: NEG
53939: PUSH
53940: EMPTY
53941: LIST
53942: LIST
53943: PUSH
53944: LD_INT 1
53946: NEG
53947: PUSH
53948: LD_INT 2
53950: NEG
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 0
53958: PUSH
53959: LD_INT 2
53961: NEG
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: PUSH
53967: LD_INT 1
53969: PUSH
53970: LD_INT 1
53972: NEG
53973: PUSH
53974: EMPTY
53975: LIST
53976: LIST
53977: PUSH
53978: LD_INT 2
53980: PUSH
53981: LD_INT 0
53983: PUSH
53984: EMPTY
53985: LIST
53986: LIST
53987: PUSH
53988: LD_INT 2
53990: PUSH
53991: LD_INT 1
53993: PUSH
53994: EMPTY
53995: LIST
53996: LIST
53997: PUSH
53998: LD_INT 1
54000: PUSH
54001: LD_INT 2
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 0
54010: PUSH
54011: LD_INT 2
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 1
54020: NEG
54021: PUSH
54022: LD_INT 1
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 2
54031: NEG
54032: PUSH
54033: LD_INT 0
54035: PUSH
54036: EMPTY
54037: LIST
54038: LIST
54039: PUSH
54040: LD_INT 2
54042: NEG
54043: PUSH
54044: LD_INT 1
54046: NEG
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: LD_INT 1
54054: NEG
54055: PUSH
54056: LD_INT 3
54058: NEG
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 0
54066: PUSH
54067: LD_INT 3
54069: NEG
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 1
54077: PUSH
54078: LD_INT 2
54080: NEG
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: PUSH
54086: LD_INT 2
54088: PUSH
54089: LD_INT 1
54091: NEG
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: PUSH
54097: LD_INT 3
54099: PUSH
54100: LD_INT 0
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: LD_INT 3
54109: PUSH
54110: LD_INT 1
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: PUSH
54117: LD_INT 1
54119: PUSH
54120: LD_INT 3
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: PUSH
54127: LD_INT 0
54129: PUSH
54130: LD_INT 3
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 1
54139: NEG
54140: PUSH
54141: LD_INT 2
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: PUSH
54148: LD_INT 2
54150: NEG
54151: PUSH
54152: LD_INT 1
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 3
54161: NEG
54162: PUSH
54163: LD_INT 0
54165: PUSH
54166: EMPTY
54167: LIST
54168: LIST
54169: PUSH
54170: LD_INT 3
54172: NEG
54173: PUSH
54174: LD_INT 1
54176: NEG
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: EMPTY
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: LIST
54195: LIST
54196: LIST
54197: LIST
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54213: LD_ADDR_VAR 0 44
54217: PUSH
54218: LD_INT 0
54220: PUSH
54221: LD_INT 0
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 0
54230: PUSH
54231: LD_INT 1
54233: NEG
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: LD_INT 1
54241: PUSH
54242: LD_INT 0
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 1
54251: PUSH
54252: LD_INT 1
54254: PUSH
54255: EMPTY
54256: LIST
54257: LIST
54258: PUSH
54259: LD_INT 0
54261: PUSH
54262: LD_INT 1
54264: PUSH
54265: EMPTY
54266: LIST
54267: LIST
54268: PUSH
54269: LD_INT 1
54271: NEG
54272: PUSH
54273: LD_INT 0
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 1
54282: NEG
54283: PUSH
54284: LD_INT 1
54286: NEG
54287: PUSH
54288: EMPTY
54289: LIST
54290: LIST
54291: PUSH
54292: LD_INT 1
54294: NEG
54295: PUSH
54296: LD_INT 2
54298: NEG
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 1
54306: PUSH
54307: LD_INT 1
54309: NEG
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 2
54317: PUSH
54318: LD_INT 0
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 2
54327: PUSH
54328: LD_INT 1
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 2
54337: PUSH
54338: LD_INT 2
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 1
54347: PUSH
54348: LD_INT 2
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 1
54357: NEG
54358: PUSH
54359: LD_INT 1
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 2
54368: NEG
54369: PUSH
54370: LD_INT 0
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 2
54379: NEG
54380: PUSH
54381: LD_INT 1
54383: NEG
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 2
54391: NEG
54392: PUSH
54393: LD_INT 2
54395: NEG
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 2
54403: NEG
54404: PUSH
54405: LD_INT 3
54407: NEG
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: LD_INT 2
54415: PUSH
54416: LD_INT 1
54418: NEG
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: PUSH
54424: LD_INT 3
54426: PUSH
54427: LD_INT 0
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: PUSH
54434: LD_INT 3
54436: PUSH
54437: LD_INT 1
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 3
54446: PUSH
54447: LD_INT 2
54449: PUSH
54450: EMPTY
54451: LIST
54452: LIST
54453: PUSH
54454: LD_INT 3
54456: PUSH
54457: LD_INT 3
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: LD_INT 2
54466: PUSH
54467: LD_INT 3
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 2
54476: NEG
54477: PUSH
54478: LD_INT 1
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 3
54487: NEG
54488: PUSH
54489: LD_INT 0
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: PUSH
54496: LD_INT 3
54498: NEG
54499: PUSH
54500: LD_INT 1
54502: NEG
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 3
54510: NEG
54511: PUSH
54512: LD_INT 2
54514: NEG
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 3
54522: NEG
54523: PUSH
54524: LD_INT 3
54526: NEG
54527: PUSH
54528: EMPTY
54529: LIST
54530: LIST
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: LIST
54543: LIST
54544: LIST
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: LIST
54555: LIST
54556: LIST
54557: LIST
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54563: LD_ADDR_VAR 0 45
54567: PUSH
54568: LD_INT 0
54570: PUSH
54571: LD_INT 0
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 0
54580: PUSH
54581: LD_INT 1
54583: NEG
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 1
54591: PUSH
54592: LD_INT 0
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: LD_INT 1
54601: PUSH
54602: LD_INT 1
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 0
54611: PUSH
54612: LD_INT 1
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 1
54621: NEG
54622: PUSH
54623: LD_INT 0
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: LD_INT 1
54632: NEG
54633: PUSH
54634: LD_INT 1
54636: NEG
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: LD_INT 1
54644: NEG
54645: PUSH
54646: LD_INT 2
54648: NEG
54649: PUSH
54650: EMPTY
54651: LIST
54652: LIST
54653: PUSH
54654: LD_INT 0
54656: PUSH
54657: LD_INT 2
54659: NEG
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 1
54667: PUSH
54668: LD_INT 1
54670: NEG
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 2
54678: PUSH
54679: LD_INT 1
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 2
54688: PUSH
54689: LD_INT 2
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 1
54698: PUSH
54699: LD_INT 2
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: LD_INT 0
54708: PUSH
54709: LD_INT 2
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 1
54718: NEG
54719: PUSH
54720: LD_INT 1
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 2
54729: NEG
54730: PUSH
54731: LD_INT 1
54733: NEG
54734: PUSH
54735: EMPTY
54736: LIST
54737: LIST
54738: PUSH
54739: LD_INT 2
54741: NEG
54742: PUSH
54743: LD_INT 2
54745: NEG
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 2
54753: NEG
54754: PUSH
54755: LD_INT 3
54757: NEG
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 1
54765: NEG
54766: PUSH
54767: LD_INT 3
54769: NEG
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 0
54777: PUSH
54778: LD_INT 3
54780: NEG
54781: PUSH
54782: EMPTY
54783: LIST
54784: LIST
54785: PUSH
54786: LD_INT 1
54788: PUSH
54789: LD_INT 2
54791: NEG
54792: PUSH
54793: EMPTY
54794: LIST
54795: LIST
54796: PUSH
54797: LD_INT 3
54799: PUSH
54800: LD_INT 2
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 3
54809: PUSH
54810: LD_INT 3
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 2
54819: PUSH
54820: LD_INT 3
54822: PUSH
54823: EMPTY
54824: LIST
54825: LIST
54826: PUSH
54827: LD_INT 1
54829: PUSH
54830: LD_INT 3
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: PUSH
54837: LD_INT 0
54839: PUSH
54840: LD_INT 3
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 1
54849: NEG
54850: PUSH
54851: LD_INT 2
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 3
54860: NEG
54861: PUSH
54862: LD_INT 2
54864: NEG
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 3
54872: NEG
54873: PUSH
54874: LD_INT 3
54876: NEG
54877: PUSH
54878: EMPTY
54879: LIST
54880: LIST
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54913: LD_ADDR_VAR 0 46
54917: PUSH
54918: LD_INT 0
54920: PUSH
54921: LD_INT 0
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 0
54930: PUSH
54931: LD_INT 1
54933: NEG
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 1
54941: PUSH
54942: LD_INT 0
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 1
54951: PUSH
54952: LD_INT 1
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 0
54961: PUSH
54962: LD_INT 1
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: LD_INT 1
54971: NEG
54972: PUSH
54973: LD_INT 0
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: PUSH
54980: LD_INT 1
54982: NEG
54983: PUSH
54984: LD_INT 1
54986: NEG
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 1
54994: NEG
54995: PUSH
54996: LD_INT 2
54998: NEG
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: LD_INT 0
55006: PUSH
55007: LD_INT 2
55009: NEG
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 1
55017: PUSH
55018: LD_INT 1
55020: NEG
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 2
55028: PUSH
55029: LD_INT 0
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 2
55038: PUSH
55039: LD_INT 1
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 1
55048: PUSH
55049: LD_INT 2
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 0
55058: PUSH
55059: LD_INT 2
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: LD_INT 1
55068: NEG
55069: PUSH
55070: LD_INT 1
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 2
55079: NEG
55080: PUSH
55081: LD_INT 0
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: PUSH
55088: LD_INT 2
55090: NEG
55091: PUSH
55092: LD_INT 1
55094: NEG
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 1
55102: NEG
55103: PUSH
55104: LD_INT 3
55106: NEG
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 0
55114: PUSH
55115: LD_INT 3
55117: NEG
55118: PUSH
55119: EMPTY
55120: LIST
55121: LIST
55122: PUSH
55123: LD_INT 1
55125: PUSH
55126: LD_INT 2
55128: NEG
55129: PUSH
55130: EMPTY
55131: LIST
55132: LIST
55133: PUSH
55134: LD_INT 2
55136: PUSH
55137: LD_INT 1
55139: NEG
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 3
55147: PUSH
55148: LD_INT 0
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: LD_INT 3
55157: PUSH
55158: LD_INT 1
55160: PUSH
55161: EMPTY
55162: LIST
55163: LIST
55164: PUSH
55165: LD_INT 1
55167: PUSH
55168: LD_INT 3
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: PUSH
55175: LD_INT 0
55177: PUSH
55178: LD_INT 3
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: PUSH
55185: LD_INT 1
55187: NEG
55188: PUSH
55189: LD_INT 2
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 2
55198: NEG
55199: PUSH
55200: LD_INT 1
55202: PUSH
55203: EMPTY
55204: LIST
55205: LIST
55206: PUSH
55207: LD_INT 3
55209: NEG
55210: PUSH
55211: LD_INT 0
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: LD_INT 3
55220: NEG
55221: PUSH
55222: LD_INT 1
55224: NEG
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: EMPTY
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55261: LD_ADDR_VAR 0 47
55265: PUSH
55266: LD_INT 0
55268: PUSH
55269: LD_INT 0
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 0
55278: PUSH
55279: LD_INT 1
55281: NEG
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 1
55289: PUSH
55290: LD_INT 0
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: PUSH
55297: LD_INT 1
55299: PUSH
55300: LD_INT 1
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 0
55309: PUSH
55310: LD_INT 1
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: PUSH
55317: LD_INT 1
55319: NEG
55320: PUSH
55321: LD_INT 0
55323: PUSH
55324: EMPTY
55325: LIST
55326: LIST
55327: PUSH
55328: LD_INT 1
55330: NEG
55331: PUSH
55332: LD_INT 1
55334: NEG
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 1
55342: NEG
55343: PUSH
55344: LD_INT 2
55346: NEG
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: PUSH
55352: LD_INT 0
55354: PUSH
55355: LD_INT 2
55357: NEG
55358: PUSH
55359: EMPTY
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 1
55365: PUSH
55366: LD_INT 1
55368: NEG
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: LD_INT 2
55376: NEG
55377: PUSH
55378: LD_INT 1
55380: NEG
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 2
55388: NEG
55389: PUSH
55390: LD_INT 2
55392: NEG
55393: PUSH
55394: EMPTY
55395: LIST
55396: LIST
55397: PUSH
55398: EMPTY
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: LIST
55404: LIST
55405: LIST
55406: LIST
55407: LIST
55408: LIST
55409: LIST
55410: LIST
55411: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55412: LD_ADDR_VAR 0 48
55416: PUSH
55417: LD_INT 0
55419: PUSH
55420: LD_INT 0
55422: PUSH
55423: EMPTY
55424: LIST
55425: LIST
55426: PUSH
55427: LD_INT 0
55429: PUSH
55430: LD_INT 1
55432: NEG
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: PUSH
55438: LD_INT 1
55440: PUSH
55441: LD_INT 0
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 1
55450: PUSH
55451: LD_INT 1
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 0
55460: PUSH
55461: LD_INT 1
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 1
55470: NEG
55471: PUSH
55472: LD_INT 0
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 1
55481: NEG
55482: PUSH
55483: LD_INT 1
55485: NEG
55486: PUSH
55487: EMPTY
55488: LIST
55489: LIST
55490: PUSH
55491: LD_INT 1
55493: NEG
55494: PUSH
55495: LD_INT 2
55497: NEG
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 0
55505: PUSH
55506: LD_INT 2
55508: NEG
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: LD_INT 1
55516: PUSH
55517: LD_INT 1
55519: NEG
55520: PUSH
55521: EMPTY
55522: LIST
55523: LIST
55524: PUSH
55525: LD_INT 2
55527: PUSH
55528: LD_INT 0
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 2
55537: PUSH
55538: LD_INT 1
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55559: LD_ADDR_VAR 0 49
55563: PUSH
55564: LD_INT 0
55566: PUSH
55567: LD_INT 0
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 0
55576: PUSH
55577: LD_INT 1
55579: NEG
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 1
55587: PUSH
55588: LD_INT 0
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 1
55597: PUSH
55598: LD_INT 1
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 0
55607: PUSH
55608: LD_INT 1
55610: PUSH
55611: EMPTY
55612: LIST
55613: LIST
55614: PUSH
55615: LD_INT 1
55617: NEG
55618: PUSH
55619: LD_INT 0
55621: PUSH
55622: EMPTY
55623: LIST
55624: LIST
55625: PUSH
55626: LD_INT 1
55628: NEG
55629: PUSH
55630: LD_INT 1
55632: NEG
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: LD_INT 1
55640: PUSH
55641: LD_INT 1
55643: NEG
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 2
55651: PUSH
55652: LD_INT 0
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 2
55661: PUSH
55662: LD_INT 1
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 2
55671: PUSH
55672: LD_INT 2
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 1
55681: PUSH
55682: LD_INT 2
55684: PUSH
55685: EMPTY
55686: LIST
55687: LIST
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: LIST
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55703: LD_ADDR_VAR 0 50
55707: PUSH
55708: LD_INT 0
55710: PUSH
55711: LD_INT 0
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 0
55720: PUSH
55721: LD_INT 1
55723: NEG
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 1
55731: PUSH
55732: LD_INT 0
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 1
55741: PUSH
55742: LD_INT 1
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 0
55751: PUSH
55752: LD_INT 1
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 1
55761: NEG
55762: PUSH
55763: LD_INT 0
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 1
55772: NEG
55773: PUSH
55774: LD_INT 1
55776: NEG
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: LD_INT 2
55784: PUSH
55785: LD_INT 1
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: LD_INT 2
55794: PUSH
55795: LD_INT 2
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 1
55804: PUSH
55805: LD_INT 2
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: LD_INT 0
55814: PUSH
55815: LD_INT 2
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 1
55824: NEG
55825: PUSH
55826: LD_INT 1
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: EMPTY
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55847: LD_ADDR_VAR 0 51
55851: PUSH
55852: LD_INT 0
55854: PUSH
55855: LD_INT 0
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 0
55864: PUSH
55865: LD_INT 1
55867: NEG
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 1
55875: PUSH
55876: LD_INT 0
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 1
55885: PUSH
55886: LD_INT 1
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 0
55895: PUSH
55896: LD_INT 1
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 1
55905: NEG
55906: PUSH
55907: LD_INT 0
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 1
55916: NEG
55917: PUSH
55918: LD_INT 1
55920: NEG
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: LD_INT 1
55928: PUSH
55929: LD_INT 2
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 0
55938: PUSH
55939: LD_INT 2
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: PUSH
55946: LD_INT 1
55948: NEG
55949: PUSH
55950: LD_INT 1
55952: PUSH
55953: EMPTY
55954: LIST
55955: LIST
55956: PUSH
55957: LD_INT 2
55959: NEG
55960: PUSH
55961: LD_INT 0
55963: PUSH
55964: EMPTY
55965: LIST
55966: LIST
55967: PUSH
55968: LD_INT 2
55970: NEG
55971: PUSH
55972: LD_INT 1
55974: NEG
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55994: LD_ADDR_VAR 0 52
55998: PUSH
55999: LD_INT 0
56001: PUSH
56002: LD_INT 0
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: LD_INT 0
56011: PUSH
56012: LD_INT 1
56014: NEG
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: PUSH
56020: LD_INT 1
56022: PUSH
56023: LD_INT 0
56025: PUSH
56026: EMPTY
56027: LIST
56028: LIST
56029: PUSH
56030: LD_INT 1
56032: PUSH
56033: LD_INT 1
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 0
56042: PUSH
56043: LD_INT 1
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 1
56052: NEG
56053: PUSH
56054: LD_INT 0
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 1
56063: NEG
56064: PUSH
56065: LD_INT 1
56067: NEG
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 1
56075: NEG
56076: PUSH
56077: LD_INT 2
56079: NEG
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 1
56087: NEG
56088: PUSH
56089: LD_INT 1
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: LD_INT 2
56098: NEG
56099: PUSH
56100: LD_INT 0
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 2
56109: NEG
56110: PUSH
56111: LD_INT 1
56113: NEG
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 2
56121: NEG
56122: PUSH
56123: LD_INT 2
56125: NEG
56126: PUSH
56127: EMPTY
56128: LIST
56129: LIST
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: LIST
56137: LIST
56138: LIST
56139: LIST
56140: LIST
56141: LIST
56142: LIST
56143: LIST
56144: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56145: LD_ADDR_VAR 0 53
56149: PUSH
56150: LD_INT 0
56152: PUSH
56153: LD_INT 0
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 0
56162: PUSH
56163: LD_INT 1
56165: NEG
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 1
56173: PUSH
56174: LD_INT 0
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 1
56183: PUSH
56184: LD_INT 1
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 0
56193: PUSH
56194: LD_INT 1
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: LD_INT 1
56203: NEG
56204: PUSH
56205: LD_INT 0
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 1
56214: NEG
56215: PUSH
56216: LD_INT 1
56218: NEG
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 1
56226: NEG
56227: PUSH
56228: LD_INT 2
56230: NEG
56231: PUSH
56232: EMPTY
56233: LIST
56234: LIST
56235: PUSH
56236: LD_INT 0
56238: PUSH
56239: LD_INT 2
56241: NEG
56242: PUSH
56243: EMPTY
56244: LIST
56245: LIST
56246: PUSH
56247: LD_INT 1
56249: PUSH
56250: LD_INT 1
56252: NEG
56253: PUSH
56254: EMPTY
56255: LIST
56256: LIST
56257: PUSH
56258: LD_INT 2
56260: PUSH
56261: LD_INT 0
56263: PUSH
56264: EMPTY
56265: LIST
56266: LIST
56267: PUSH
56268: LD_INT 2
56270: PUSH
56271: LD_INT 1
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: LD_INT 2
56280: PUSH
56281: LD_INT 2
56283: PUSH
56284: EMPTY
56285: LIST
56286: LIST
56287: PUSH
56288: LD_INT 1
56290: PUSH
56291: LD_INT 2
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: PUSH
56298: LD_INT 0
56300: PUSH
56301: LD_INT 2
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: PUSH
56308: LD_INT 1
56310: NEG
56311: PUSH
56312: LD_INT 1
56314: PUSH
56315: EMPTY
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 2
56321: NEG
56322: PUSH
56323: LD_INT 0
56325: PUSH
56326: EMPTY
56327: LIST
56328: LIST
56329: PUSH
56330: LD_INT 2
56332: NEG
56333: PUSH
56334: LD_INT 1
56336: NEG
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: PUSH
56342: LD_INT 2
56344: NEG
56345: PUSH
56346: LD_INT 2
56348: NEG
56349: PUSH
56350: EMPTY
56351: LIST
56352: LIST
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56375: LD_ADDR_VAR 0 54
56379: PUSH
56380: LD_INT 0
56382: PUSH
56383: LD_INT 0
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 0
56392: PUSH
56393: LD_INT 1
56395: NEG
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 1
56403: PUSH
56404: LD_INT 0
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 1
56413: PUSH
56414: LD_INT 1
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: PUSH
56421: LD_INT 0
56423: PUSH
56424: LD_INT 1
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 1
56433: NEG
56434: PUSH
56435: LD_INT 0
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 1
56444: NEG
56445: PUSH
56446: LD_INT 1
56448: NEG
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: PUSH
56454: LD_INT 1
56456: NEG
56457: PUSH
56458: LD_INT 2
56460: NEG
56461: PUSH
56462: EMPTY
56463: LIST
56464: LIST
56465: PUSH
56466: LD_INT 0
56468: PUSH
56469: LD_INT 2
56471: NEG
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 1
56479: PUSH
56480: LD_INT 1
56482: NEG
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: PUSH
56488: LD_INT 2
56490: PUSH
56491: LD_INT 0
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PUSH
56498: LD_INT 2
56500: PUSH
56501: LD_INT 1
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 2
56510: PUSH
56511: LD_INT 2
56513: PUSH
56514: EMPTY
56515: LIST
56516: LIST
56517: PUSH
56518: LD_INT 1
56520: PUSH
56521: LD_INT 2
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 0
56530: PUSH
56531: LD_INT 2
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 1
56540: NEG
56541: PUSH
56542: LD_INT 1
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 2
56551: NEG
56552: PUSH
56553: LD_INT 0
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 2
56562: NEG
56563: PUSH
56564: LD_INT 1
56566: NEG
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 2
56574: NEG
56575: PUSH
56576: LD_INT 2
56578: NEG
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: LIST
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: LIST
56593: LIST
56594: LIST
56595: LIST
56596: LIST
56597: LIST
56598: LIST
56599: LIST
56600: LIST
56601: LIST
56602: LIST
56603: LIST
56604: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56605: LD_ADDR_VAR 0 55
56609: PUSH
56610: LD_INT 0
56612: PUSH
56613: LD_INT 0
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 0
56622: PUSH
56623: LD_INT 1
56625: NEG
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 1
56633: PUSH
56634: LD_INT 0
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: LD_INT 1
56643: PUSH
56644: LD_INT 1
56646: PUSH
56647: EMPTY
56648: LIST
56649: LIST
56650: PUSH
56651: LD_INT 0
56653: PUSH
56654: LD_INT 1
56656: PUSH
56657: EMPTY
56658: LIST
56659: LIST
56660: PUSH
56661: LD_INT 1
56663: NEG
56664: PUSH
56665: LD_INT 0
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 1
56674: NEG
56675: PUSH
56676: LD_INT 1
56678: NEG
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: LD_INT 1
56686: NEG
56687: PUSH
56688: LD_INT 2
56690: NEG
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 0
56698: PUSH
56699: LD_INT 2
56701: NEG
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: PUSH
56707: LD_INT 1
56709: PUSH
56710: LD_INT 1
56712: NEG
56713: PUSH
56714: EMPTY
56715: LIST
56716: LIST
56717: PUSH
56718: LD_INT 2
56720: PUSH
56721: LD_INT 0
56723: PUSH
56724: EMPTY
56725: LIST
56726: LIST
56727: PUSH
56728: LD_INT 2
56730: PUSH
56731: LD_INT 1
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 2
56740: PUSH
56741: LD_INT 2
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: LD_INT 1
56750: PUSH
56751: LD_INT 2
56753: PUSH
56754: EMPTY
56755: LIST
56756: LIST
56757: PUSH
56758: LD_INT 0
56760: PUSH
56761: LD_INT 2
56763: PUSH
56764: EMPTY
56765: LIST
56766: LIST
56767: PUSH
56768: LD_INT 1
56770: NEG
56771: PUSH
56772: LD_INT 1
56774: PUSH
56775: EMPTY
56776: LIST
56777: LIST
56778: PUSH
56779: LD_INT 2
56781: NEG
56782: PUSH
56783: LD_INT 0
56785: PUSH
56786: EMPTY
56787: LIST
56788: LIST
56789: PUSH
56790: LD_INT 2
56792: NEG
56793: PUSH
56794: LD_INT 1
56796: NEG
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 2
56804: NEG
56805: PUSH
56806: LD_INT 2
56808: NEG
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56835: LD_ADDR_VAR 0 56
56839: PUSH
56840: LD_INT 0
56842: PUSH
56843: LD_INT 0
56845: PUSH
56846: EMPTY
56847: LIST
56848: LIST
56849: PUSH
56850: LD_INT 0
56852: PUSH
56853: LD_INT 1
56855: NEG
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 1
56863: PUSH
56864: LD_INT 0
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 1
56873: PUSH
56874: LD_INT 1
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 0
56883: PUSH
56884: LD_INT 1
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 1
56893: NEG
56894: PUSH
56895: LD_INT 0
56897: PUSH
56898: EMPTY
56899: LIST
56900: LIST
56901: PUSH
56902: LD_INT 1
56904: NEG
56905: PUSH
56906: LD_INT 1
56908: NEG
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 1
56916: NEG
56917: PUSH
56918: LD_INT 2
56920: NEG
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 0
56928: PUSH
56929: LD_INT 2
56931: NEG
56932: PUSH
56933: EMPTY
56934: LIST
56935: LIST
56936: PUSH
56937: LD_INT 1
56939: PUSH
56940: LD_INT 1
56942: NEG
56943: PUSH
56944: EMPTY
56945: LIST
56946: LIST
56947: PUSH
56948: LD_INT 2
56950: PUSH
56951: LD_INT 0
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: PUSH
56958: LD_INT 2
56960: PUSH
56961: LD_INT 1
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: PUSH
56968: LD_INT 2
56970: PUSH
56971: LD_INT 2
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 1
56980: PUSH
56981: LD_INT 2
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 0
56990: PUSH
56991: LD_INT 2
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: LD_INT 1
57000: NEG
57001: PUSH
57002: LD_INT 1
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: LD_INT 2
57011: NEG
57012: PUSH
57013: LD_INT 0
57015: PUSH
57016: EMPTY
57017: LIST
57018: LIST
57019: PUSH
57020: LD_INT 2
57022: NEG
57023: PUSH
57024: LD_INT 1
57026: NEG
57027: PUSH
57028: EMPTY
57029: LIST
57030: LIST
57031: PUSH
57032: LD_INT 2
57034: NEG
57035: PUSH
57036: LD_INT 2
57038: NEG
57039: PUSH
57040: EMPTY
57041: LIST
57042: LIST
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: LIST
57048: LIST
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: LIST
57060: LIST
57061: LIST
57062: LIST
57063: LIST
57064: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57065: LD_ADDR_VAR 0 57
57069: PUSH
57070: LD_INT 0
57072: PUSH
57073: LD_INT 0
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: PUSH
57080: LD_INT 0
57082: PUSH
57083: LD_INT 1
57085: NEG
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PUSH
57091: LD_INT 1
57093: PUSH
57094: LD_INT 0
57096: PUSH
57097: EMPTY
57098: LIST
57099: LIST
57100: PUSH
57101: LD_INT 1
57103: PUSH
57104: LD_INT 1
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: PUSH
57111: LD_INT 0
57113: PUSH
57114: LD_INT 1
57116: PUSH
57117: EMPTY
57118: LIST
57119: LIST
57120: PUSH
57121: LD_INT 1
57123: NEG
57124: PUSH
57125: LD_INT 0
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 1
57134: NEG
57135: PUSH
57136: LD_INT 1
57138: NEG
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: LD_INT 1
57146: NEG
57147: PUSH
57148: LD_INT 2
57150: NEG
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: LD_INT 0
57158: PUSH
57159: LD_INT 2
57161: NEG
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: LD_INT 1
57169: PUSH
57170: LD_INT 1
57172: NEG
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 2
57180: PUSH
57181: LD_INT 0
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 2
57190: PUSH
57191: LD_INT 1
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: PUSH
57198: LD_INT 2
57200: PUSH
57201: LD_INT 2
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PUSH
57208: LD_INT 1
57210: PUSH
57211: LD_INT 2
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 0
57220: PUSH
57221: LD_INT 2
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 1
57230: NEG
57231: PUSH
57232: LD_INT 1
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: PUSH
57239: LD_INT 2
57241: NEG
57242: PUSH
57243: LD_INT 0
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PUSH
57250: LD_INT 2
57252: NEG
57253: PUSH
57254: LD_INT 1
57256: NEG
57257: PUSH
57258: EMPTY
57259: LIST
57260: LIST
57261: PUSH
57262: LD_INT 2
57264: NEG
57265: PUSH
57266: LD_INT 2
57268: NEG
57269: PUSH
57270: EMPTY
57271: LIST
57272: LIST
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: LIST
57278: LIST
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: LIST
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57295: LD_ADDR_VAR 0 58
57299: PUSH
57300: LD_INT 0
57302: PUSH
57303: LD_INT 0
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: PUSH
57310: LD_INT 0
57312: PUSH
57313: LD_INT 1
57315: NEG
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 1
57323: PUSH
57324: LD_INT 0
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 1
57333: PUSH
57334: LD_INT 1
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 0
57343: PUSH
57344: LD_INT 1
57346: PUSH
57347: EMPTY
57348: LIST
57349: LIST
57350: PUSH
57351: LD_INT 1
57353: NEG
57354: PUSH
57355: LD_INT 0
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: LD_INT 1
57364: NEG
57365: PUSH
57366: LD_INT 1
57368: NEG
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PUSH
57374: LD_INT 1
57376: NEG
57377: PUSH
57378: LD_INT 2
57380: NEG
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 0
57388: PUSH
57389: LD_INT 2
57391: NEG
57392: PUSH
57393: EMPTY
57394: LIST
57395: LIST
57396: PUSH
57397: LD_INT 1
57399: PUSH
57400: LD_INT 1
57402: NEG
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 2
57410: PUSH
57411: LD_INT 0
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: LD_INT 2
57420: PUSH
57421: LD_INT 1
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 2
57430: PUSH
57431: LD_INT 2
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 1
57440: PUSH
57441: LD_INT 2
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 0
57450: PUSH
57451: LD_INT 2
57453: PUSH
57454: EMPTY
57455: LIST
57456: LIST
57457: PUSH
57458: LD_INT 1
57460: NEG
57461: PUSH
57462: LD_INT 1
57464: PUSH
57465: EMPTY
57466: LIST
57467: LIST
57468: PUSH
57469: LD_INT 2
57471: NEG
57472: PUSH
57473: LD_INT 0
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 2
57482: NEG
57483: PUSH
57484: LD_INT 1
57486: NEG
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: PUSH
57492: LD_INT 2
57494: NEG
57495: PUSH
57496: LD_INT 2
57498: NEG
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: LIST
57512: LIST
57513: LIST
57514: LIST
57515: LIST
57516: LIST
57517: LIST
57518: LIST
57519: LIST
57520: LIST
57521: LIST
57522: LIST
57523: LIST
57524: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57525: LD_ADDR_VAR 0 59
57529: PUSH
57530: LD_INT 0
57532: PUSH
57533: LD_INT 0
57535: PUSH
57536: EMPTY
57537: LIST
57538: LIST
57539: PUSH
57540: LD_INT 0
57542: PUSH
57543: LD_INT 1
57545: NEG
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: LD_INT 1
57553: PUSH
57554: LD_INT 0
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 1
57563: PUSH
57564: LD_INT 1
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PUSH
57571: LD_INT 0
57573: PUSH
57574: LD_INT 1
57576: PUSH
57577: EMPTY
57578: LIST
57579: LIST
57580: PUSH
57581: LD_INT 1
57583: NEG
57584: PUSH
57585: LD_INT 0
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PUSH
57592: LD_INT 1
57594: NEG
57595: PUSH
57596: LD_INT 1
57598: NEG
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: LIST
57608: LIST
57609: LIST
57610: LIST
57611: LIST
57612: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57613: LD_ADDR_VAR 0 60
57617: PUSH
57618: LD_INT 0
57620: PUSH
57621: LD_INT 0
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: PUSH
57628: LD_INT 0
57630: PUSH
57631: LD_INT 1
57633: NEG
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: LD_INT 1
57641: PUSH
57642: LD_INT 0
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: LD_INT 1
57651: PUSH
57652: LD_INT 1
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 0
57661: PUSH
57662: LD_INT 1
57664: PUSH
57665: EMPTY
57666: LIST
57667: LIST
57668: PUSH
57669: LD_INT 1
57671: NEG
57672: PUSH
57673: LD_INT 0
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 1
57682: NEG
57683: PUSH
57684: LD_INT 1
57686: NEG
57687: PUSH
57688: EMPTY
57689: LIST
57690: LIST
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: LIST
57696: LIST
57697: LIST
57698: LIST
57699: LIST
57700: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57701: LD_ADDR_VAR 0 61
57705: PUSH
57706: LD_INT 0
57708: PUSH
57709: LD_INT 0
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 0
57718: PUSH
57719: LD_INT 1
57721: NEG
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 1
57729: PUSH
57730: LD_INT 0
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: LD_INT 1
57739: PUSH
57740: LD_INT 1
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 0
57749: PUSH
57750: LD_INT 1
57752: PUSH
57753: EMPTY
57754: LIST
57755: LIST
57756: PUSH
57757: LD_INT 1
57759: NEG
57760: PUSH
57761: LD_INT 0
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: PUSH
57768: LD_INT 1
57770: NEG
57771: PUSH
57772: LD_INT 1
57774: NEG
57775: PUSH
57776: EMPTY
57777: LIST
57778: LIST
57779: PUSH
57780: EMPTY
57781: LIST
57782: LIST
57783: LIST
57784: LIST
57785: LIST
57786: LIST
57787: LIST
57788: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57789: LD_ADDR_VAR 0 62
57793: PUSH
57794: LD_INT 0
57796: PUSH
57797: LD_INT 0
57799: PUSH
57800: EMPTY
57801: LIST
57802: LIST
57803: PUSH
57804: LD_INT 0
57806: PUSH
57807: LD_INT 1
57809: NEG
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: PUSH
57815: LD_INT 1
57817: PUSH
57818: LD_INT 0
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 1
57827: PUSH
57828: LD_INT 1
57830: PUSH
57831: EMPTY
57832: LIST
57833: LIST
57834: PUSH
57835: LD_INT 0
57837: PUSH
57838: LD_INT 1
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 1
57847: NEG
57848: PUSH
57849: LD_INT 0
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: LD_INT 1
57858: NEG
57859: PUSH
57860: LD_INT 1
57862: NEG
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: LIST
57874: LIST
57875: LIST
57876: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57877: LD_ADDR_VAR 0 63
57881: PUSH
57882: LD_INT 0
57884: PUSH
57885: LD_INT 0
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 0
57894: PUSH
57895: LD_INT 1
57897: NEG
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: LD_INT 1
57905: PUSH
57906: LD_INT 0
57908: PUSH
57909: EMPTY
57910: LIST
57911: LIST
57912: PUSH
57913: LD_INT 1
57915: PUSH
57916: LD_INT 1
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: PUSH
57923: LD_INT 0
57925: PUSH
57926: LD_INT 1
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 1
57935: NEG
57936: PUSH
57937: LD_INT 0
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: PUSH
57944: LD_INT 1
57946: NEG
57947: PUSH
57948: LD_INT 1
57950: NEG
57951: PUSH
57952: EMPTY
57953: LIST
57954: LIST
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: LIST
57963: LIST
57964: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57965: LD_ADDR_VAR 0 64
57969: PUSH
57970: LD_INT 0
57972: PUSH
57973: LD_INT 0
57975: PUSH
57976: EMPTY
57977: LIST
57978: LIST
57979: PUSH
57980: LD_INT 0
57982: PUSH
57983: LD_INT 1
57985: NEG
57986: PUSH
57987: EMPTY
57988: LIST
57989: LIST
57990: PUSH
57991: LD_INT 1
57993: PUSH
57994: LD_INT 0
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: PUSH
58001: LD_INT 1
58003: PUSH
58004: LD_INT 1
58006: PUSH
58007: EMPTY
58008: LIST
58009: LIST
58010: PUSH
58011: LD_INT 0
58013: PUSH
58014: LD_INT 1
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: PUSH
58021: LD_INT 1
58023: NEG
58024: PUSH
58025: LD_INT 0
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 1
58034: NEG
58035: PUSH
58036: LD_INT 1
58038: NEG
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: EMPTY
58045: LIST
58046: LIST
58047: LIST
58048: LIST
58049: LIST
58050: LIST
58051: LIST
58052: ST_TO_ADDR
// end ; 1 :
58053: GO 63950
58055: LD_INT 1
58057: DOUBLE
58058: EQUAL
58059: IFTRUE 58063
58061: GO 60686
58063: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58064: LD_ADDR_VAR 0 11
58068: PUSH
58069: LD_INT 1
58071: NEG
58072: PUSH
58073: LD_INT 3
58075: NEG
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 0
58083: PUSH
58084: LD_INT 3
58086: NEG
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: LD_INT 1
58094: PUSH
58095: LD_INT 2
58097: NEG
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: LIST
58107: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58108: LD_ADDR_VAR 0 12
58112: PUSH
58113: LD_INT 2
58115: PUSH
58116: LD_INT 1
58118: NEG
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: PUSH
58124: LD_INT 3
58126: PUSH
58127: LD_INT 0
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 3
58136: PUSH
58137: LD_INT 1
58139: PUSH
58140: EMPTY
58141: LIST
58142: LIST
58143: PUSH
58144: EMPTY
58145: LIST
58146: LIST
58147: LIST
58148: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58149: LD_ADDR_VAR 0 13
58153: PUSH
58154: LD_INT 3
58156: PUSH
58157: LD_INT 2
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PUSH
58164: LD_INT 3
58166: PUSH
58167: LD_INT 3
58169: PUSH
58170: EMPTY
58171: LIST
58172: LIST
58173: PUSH
58174: LD_INT 2
58176: PUSH
58177: LD_INT 3
58179: PUSH
58180: EMPTY
58181: LIST
58182: LIST
58183: PUSH
58184: EMPTY
58185: LIST
58186: LIST
58187: LIST
58188: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58189: LD_ADDR_VAR 0 14
58193: PUSH
58194: LD_INT 1
58196: PUSH
58197: LD_INT 3
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: LD_INT 0
58206: PUSH
58207: LD_INT 3
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 1
58216: NEG
58217: PUSH
58218: LD_INT 2
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: LIST
58229: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58230: LD_ADDR_VAR 0 15
58234: PUSH
58235: LD_INT 2
58237: NEG
58238: PUSH
58239: LD_INT 1
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 3
58248: NEG
58249: PUSH
58250: LD_INT 0
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: LD_INT 3
58259: NEG
58260: PUSH
58261: LD_INT 1
58263: NEG
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: LIST
58273: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58274: LD_ADDR_VAR 0 16
58278: PUSH
58279: LD_INT 2
58281: NEG
58282: PUSH
58283: LD_INT 3
58285: NEG
58286: PUSH
58287: EMPTY
58288: LIST
58289: LIST
58290: PUSH
58291: LD_INT 3
58293: NEG
58294: PUSH
58295: LD_INT 2
58297: NEG
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: LD_INT 3
58305: NEG
58306: PUSH
58307: LD_INT 3
58309: NEG
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: LIST
58319: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58320: LD_ADDR_VAR 0 17
58324: PUSH
58325: LD_INT 1
58327: NEG
58328: PUSH
58329: LD_INT 3
58331: NEG
58332: PUSH
58333: EMPTY
58334: LIST
58335: LIST
58336: PUSH
58337: LD_INT 0
58339: PUSH
58340: LD_INT 3
58342: NEG
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 1
58350: PUSH
58351: LD_INT 2
58353: NEG
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: PUSH
58359: EMPTY
58360: LIST
58361: LIST
58362: LIST
58363: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58364: LD_ADDR_VAR 0 18
58368: PUSH
58369: LD_INT 2
58371: PUSH
58372: LD_INT 1
58374: NEG
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 3
58382: PUSH
58383: LD_INT 0
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: LD_INT 3
58392: PUSH
58393: LD_INT 1
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: LIST
58404: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58405: LD_ADDR_VAR 0 19
58409: PUSH
58410: LD_INT 3
58412: PUSH
58413: LD_INT 2
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: LD_INT 3
58422: PUSH
58423: LD_INT 3
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: PUSH
58430: LD_INT 2
58432: PUSH
58433: LD_INT 3
58435: PUSH
58436: EMPTY
58437: LIST
58438: LIST
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: LIST
58444: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58445: LD_ADDR_VAR 0 20
58449: PUSH
58450: LD_INT 1
58452: PUSH
58453: LD_INT 3
58455: PUSH
58456: EMPTY
58457: LIST
58458: LIST
58459: PUSH
58460: LD_INT 0
58462: PUSH
58463: LD_INT 3
58465: PUSH
58466: EMPTY
58467: LIST
58468: LIST
58469: PUSH
58470: LD_INT 1
58472: NEG
58473: PUSH
58474: LD_INT 2
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: LIST
58485: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58486: LD_ADDR_VAR 0 21
58490: PUSH
58491: LD_INT 2
58493: NEG
58494: PUSH
58495: LD_INT 1
58497: PUSH
58498: EMPTY
58499: LIST
58500: LIST
58501: PUSH
58502: LD_INT 3
58504: NEG
58505: PUSH
58506: LD_INT 0
58508: PUSH
58509: EMPTY
58510: LIST
58511: LIST
58512: PUSH
58513: LD_INT 3
58515: NEG
58516: PUSH
58517: LD_INT 1
58519: NEG
58520: PUSH
58521: EMPTY
58522: LIST
58523: LIST
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: LIST
58529: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58530: LD_ADDR_VAR 0 22
58534: PUSH
58535: LD_INT 2
58537: NEG
58538: PUSH
58539: LD_INT 3
58541: NEG
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: LD_INT 3
58549: NEG
58550: PUSH
58551: LD_INT 2
58553: NEG
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: PUSH
58559: LD_INT 3
58561: NEG
58562: PUSH
58563: LD_INT 3
58565: NEG
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: EMPTY
58572: LIST
58573: LIST
58574: LIST
58575: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
58576: LD_ADDR_VAR 0 23
58580: PUSH
58581: LD_INT 0
58583: PUSH
58584: LD_INT 3
58586: NEG
58587: PUSH
58588: EMPTY
58589: LIST
58590: LIST
58591: PUSH
58592: LD_INT 1
58594: NEG
58595: PUSH
58596: LD_INT 4
58598: NEG
58599: PUSH
58600: EMPTY
58601: LIST
58602: LIST
58603: PUSH
58604: LD_INT 1
58606: PUSH
58607: LD_INT 3
58609: NEG
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: PUSH
58615: EMPTY
58616: LIST
58617: LIST
58618: LIST
58619: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
58620: LD_ADDR_VAR 0 24
58624: PUSH
58625: LD_INT 3
58627: PUSH
58628: LD_INT 0
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: LD_INT 3
58637: PUSH
58638: LD_INT 1
58640: NEG
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: PUSH
58646: LD_INT 4
58648: PUSH
58649: LD_INT 1
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: LIST
58660: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
58661: LD_ADDR_VAR 0 25
58665: PUSH
58666: LD_INT 3
58668: PUSH
58669: LD_INT 3
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: LD_INT 4
58678: PUSH
58679: LD_INT 3
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: PUSH
58686: LD_INT 3
58688: PUSH
58689: LD_INT 4
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: EMPTY
58697: LIST
58698: LIST
58699: LIST
58700: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
58701: LD_ADDR_VAR 0 26
58705: PUSH
58706: LD_INT 0
58708: PUSH
58709: LD_INT 3
58711: PUSH
58712: EMPTY
58713: LIST
58714: LIST
58715: PUSH
58716: LD_INT 1
58718: PUSH
58719: LD_INT 4
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: PUSH
58726: LD_INT 1
58728: NEG
58729: PUSH
58730: LD_INT 3
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: LIST
58741: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
58742: LD_ADDR_VAR 0 27
58746: PUSH
58747: LD_INT 3
58749: NEG
58750: PUSH
58751: LD_INT 0
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 3
58760: NEG
58761: PUSH
58762: LD_INT 1
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 4
58771: NEG
58772: PUSH
58773: LD_INT 1
58775: NEG
58776: PUSH
58777: EMPTY
58778: LIST
58779: LIST
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: LIST
58785: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
58786: LD_ADDR_VAR 0 28
58790: PUSH
58791: LD_INT 3
58793: NEG
58794: PUSH
58795: LD_INT 3
58797: NEG
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 3
58805: NEG
58806: PUSH
58807: LD_INT 4
58809: NEG
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: PUSH
58815: LD_INT 4
58817: NEG
58818: PUSH
58819: LD_INT 3
58821: NEG
58822: PUSH
58823: EMPTY
58824: LIST
58825: LIST
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: LIST
58831: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
58832: LD_ADDR_VAR 0 29
58836: PUSH
58837: LD_INT 1
58839: NEG
58840: PUSH
58841: LD_INT 3
58843: NEG
58844: PUSH
58845: EMPTY
58846: LIST
58847: LIST
58848: PUSH
58849: LD_INT 0
58851: PUSH
58852: LD_INT 3
58854: NEG
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 1
58862: PUSH
58863: LD_INT 2
58865: NEG
58866: PUSH
58867: EMPTY
58868: LIST
58869: LIST
58870: PUSH
58871: LD_INT 1
58873: NEG
58874: PUSH
58875: LD_INT 4
58877: NEG
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: PUSH
58883: LD_INT 0
58885: PUSH
58886: LD_INT 4
58888: NEG
58889: PUSH
58890: EMPTY
58891: LIST
58892: LIST
58893: PUSH
58894: LD_INT 1
58896: PUSH
58897: LD_INT 3
58899: NEG
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: PUSH
58905: LD_INT 1
58907: NEG
58908: PUSH
58909: LD_INT 5
58911: NEG
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: LD_INT 0
58919: PUSH
58920: LD_INT 5
58922: NEG
58923: PUSH
58924: EMPTY
58925: LIST
58926: LIST
58927: PUSH
58928: LD_INT 1
58930: PUSH
58931: LD_INT 4
58933: NEG
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: LD_INT 1
58941: NEG
58942: PUSH
58943: LD_INT 6
58945: NEG
58946: PUSH
58947: EMPTY
58948: LIST
58949: LIST
58950: PUSH
58951: LD_INT 0
58953: PUSH
58954: LD_INT 6
58956: NEG
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: LD_INT 1
58964: PUSH
58965: LD_INT 5
58967: NEG
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: LIST
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
58987: LD_ADDR_VAR 0 30
58991: PUSH
58992: LD_INT 2
58994: PUSH
58995: LD_INT 1
58997: NEG
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 3
59005: PUSH
59006: LD_INT 0
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: LD_INT 3
59015: PUSH
59016: LD_INT 1
59018: PUSH
59019: EMPTY
59020: LIST
59021: LIST
59022: PUSH
59023: LD_INT 3
59025: PUSH
59026: LD_INT 1
59028: NEG
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: PUSH
59034: LD_INT 4
59036: PUSH
59037: LD_INT 0
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: LD_INT 4
59046: PUSH
59047: LD_INT 1
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: PUSH
59054: LD_INT 4
59056: PUSH
59057: LD_INT 1
59059: NEG
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 5
59067: PUSH
59068: LD_INT 0
59070: PUSH
59071: EMPTY
59072: LIST
59073: LIST
59074: PUSH
59075: LD_INT 5
59077: PUSH
59078: LD_INT 1
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: PUSH
59085: LD_INT 5
59087: PUSH
59088: LD_INT 1
59090: NEG
59091: PUSH
59092: EMPTY
59093: LIST
59094: LIST
59095: PUSH
59096: LD_INT 6
59098: PUSH
59099: LD_INT 0
59101: PUSH
59102: EMPTY
59103: LIST
59104: LIST
59105: PUSH
59106: LD_INT 6
59108: PUSH
59109: LD_INT 1
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: LIST
59120: LIST
59121: LIST
59122: LIST
59123: LIST
59124: LIST
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
59130: LD_ADDR_VAR 0 31
59134: PUSH
59135: LD_INT 3
59137: PUSH
59138: LD_INT 2
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PUSH
59145: LD_INT 3
59147: PUSH
59148: LD_INT 3
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 2
59157: PUSH
59158: LD_INT 3
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 4
59167: PUSH
59168: LD_INT 3
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 4
59177: PUSH
59178: LD_INT 4
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: LD_INT 3
59187: PUSH
59188: LD_INT 4
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: LD_INT 5
59197: PUSH
59198: LD_INT 4
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: LD_INT 5
59207: PUSH
59208: LD_INT 5
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 4
59217: PUSH
59218: LD_INT 5
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: PUSH
59225: LD_INT 6
59227: PUSH
59228: LD_INT 5
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: PUSH
59235: LD_INT 6
59237: PUSH
59238: LD_INT 6
59240: PUSH
59241: EMPTY
59242: LIST
59243: LIST
59244: PUSH
59245: LD_INT 5
59247: PUSH
59248: LD_INT 6
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: LIST
59259: LIST
59260: LIST
59261: LIST
59262: LIST
59263: LIST
59264: LIST
59265: LIST
59266: LIST
59267: LIST
59268: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
59269: LD_ADDR_VAR 0 32
59273: PUSH
59274: LD_INT 1
59276: PUSH
59277: LD_INT 3
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 0
59286: PUSH
59287: LD_INT 3
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: PUSH
59294: LD_INT 1
59296: NEG
59297: PUSH
59298: LD_INT 2
59300: PUSH
59301: EMPTY
59302: LIST
59303: LIST
59304: PUSH
59305: LD_INT 1
59307: PUSH
59308: LD_INT 4
59310: PUSH
59311: EMPTY
59312: LIST
59313: LIST
59314: PUSH
59315: LD_INT 0
59317: PUSH
59318: LD_INT 4
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: PUSH
59325: LD_INT 1
59327: NEG
59328: PUSH
59329: LD_INT 3
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: PUSH
59336: LD_INT 1
59338: PUSH
59339: LD_INT 5
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: PUSH
59346: LD_INT 0
59348: PUSH
59349: LD_INT 5
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: PUSH
59356: LD_INT 1
59358: NEG
59359: PUSH
59360: LD_INT 4
59362: PUSH
59363: EMPTY
59364: LIST
59365: LIST
59366: PUSH
59367: LD_INT 1
59369: PUSH
59370: LD_INT 6
59372: PUSH
59373: EMPTY
59374: LIST
59375: LIST
59376: PUSH
59377: LD_INT 0
59379: PUSH
59380: LD_INT 6
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: PUSH
59387: LD_INT 1
59389: NEG
59390: PUSH
59391: LD_INT 5
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: LIST
59402: LIST
59403: LIST
59404: LIST
59405: LIST
59406: LIST
59407: LIST
59408: LIST
59409: LIST
59410: LIST
59411: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
59412: LD_ADDR_VAR 0 33
59416: PUSH
59417: LD_INT 2
59419: NEG
59420: PUSH
59421: LD_INT 1
59423: PUSH
59424: EMPTY
59425: LIST
59426: LIST
59427: PUSH
59428: LD_INT 3
59430: NEG
59431: PUSH
59432: LD_INT 0
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: LD_INT 3
59441: NEG
59442: PUSH
59443: LD_INT 1
59445: NEG
59446: PUSH
59447: EMPTY
59448: LIST
59449: LIST
59450: PUSH
59451: LD_INT 3
59453: NEG
59454: PUSH
59455: LD_INT 1
59457: PUSH
59458: EMPTY
59459: LIST
59460: LIST
59461: PUSH
59462: LD_INT 4
59464: NEG
59465: PUSH
59466: LD_INT 0
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 4
59475: NEG
59476: PUSH
59477: LD_INT 1
59479: NEG
59480: PUSH
59481: EMPTY
59482: LIST
59483: LIST
59484: PUSH
59485: LD_INT 4
59487: NEG
59488: PUSH
59489: LD_INT 1
59491: PUSH
59492: EMPTY
59493: LIST
59494: LIST
59495: PUSH
59496: LD_INT 5
59498: NEG
59499: PUSH
59500: LD_INT 0
59502: PUSH
59503: EMPTY
59504: LIST
59505: LIST
59506: PUSH
59507: LD_INT 5
59509: NEG
59510: PUSH
59511: LD_INT 1
59513: NEG
59514: PUSH
59515: EMPTY
59516: LIST
59517: LIST
59518: PUSH
59519: LD_INT 5
59521: NEG
59522: PUSH
59523: LD_INT 1
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: PUSH
59530: LD_INT 6
59532: NEG
59533: PUSH
59534: LD_INT 0
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: LD_INT 6
59543: NEG
59544: PUSH
59545: LD_INT 1
59547: NEG
59548: PUSH
59549: EMPTY
59550: LIST
59551: LIST
59552: PUSH
59553: EMPTY
59554: LIST
59555: LIST
59556: LIST
59557: LIST
59558: LIST
59559: LIST
59560: LIST
59561: LIST
59562: LIST
59563: LIST
59564: LIST
59565: LIST
59566: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
59567: LD_ADDR_VAR 0 34
59571: PUSH
59572: LD_INT 2
59574: NEG
59575: PUSH
59576: LD_INT 3
59578: NEG
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: PUSH
59584: LD_INT 3
59586: NEG
59587: PUSH
59588: LD_INT 2
59590: NEG
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 3
59598: NEG
59599: PUSH
59600: LD_INT 3
59602: NEG
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: LD_INT 3
59610: NEG
59611: PUSH
59612: LD_INT 4
59614: NEG
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: LD_INT 4
59622: NEG
59623: PUSH
59624: LD_INT 3
59626: NEG
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: PUSH
59632: LD_INT 4
59634: NEG
59635: PUSH
59636: LD_INT 4
59638: NEG
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: PUSH
59644: LD_INT 4
59646: NEG
59647: PUSH
59648: LD_INT 5
59650: NEG
59651: PUSH
59652: EMPTY
59653: LIST
59654: LIST
59655: PUSH
59656: LD_INT 5
59658: NEG
59659: PUSH
59660: LD_INT 4
59662: NEG
59663: PUSH
59664: EMPTY
59665: LIST
59666: LIST
59667: PUSH
59668: LD_INT 5
59670: NEG
59671: PUSH
59672: LD_INT 5
59674: NEG
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: LD_INT 5
59682: NEG
59683: PUSH
59684: LD_INT 6
59686: NEG
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: PUSH
59692: LD_INT 6
59694: NEG
59695: PUSH
59696: LD_INT 5
59698: NEG
59699: PUSH
59700: EMPTY
59701: LIST
59702: LIST
59703: PUSH
59704: LD_INT 6
59706: NEG
59707: PUSH
59708: LD_INT 6
59710: NEG
59711: PUSH
59712: EMPTY
59713: LIST
59714: LIST
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: LIST
59720: LIST
59721: LIST
59722: LIST
59723: LIST
59724: LIST
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
59730: LD_ADDR_VAR 0 41
59734: PUSH
59735: LD_INT 0
59737: PUSH
59738: LD_INT 2
59740: NEG
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: LD_INT 1
59748: NEG
59749: PUSH
59750: LD_INT 3
59752: NEG
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: PUSH
59758: LD_INT 1
59760: PUSH
59761: LD_INT 2
59763: NEG
59764: PUSH
59765: EMPTY
59766: LIST
59767: LIST
59768: PUSH
59769: EMPTY
59770: LIST
59771: LIST
59772: LIST
59773: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
59774: LD_ADDR_VAR 0 42
59778: PUSH
59779: LD_INT 2
59781: PUSH
59782: LD_INT 0
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: LD_INT 2
59791: PUSH
59792: LD_INT 1
59794: NEG
59795: PUSH
59796: EMPTY
59797: LIST
59798: LIST
59799: PUSH
59800: LD_INT 3
59802: PUSH
59803: LD_INT 1
59805: PUSH
59806: EMPTY
59807: LIST
59808: LIST
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: LIST
59814: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
59815: LD_ADDR_VAR 0 43
59819: PUSH
59820: LD_INT 2
59822: PUSH
59823: LD_INT 2
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PUSH
59830: LD_INT 3
59832: PUSH
59833: LD_INT 2
59835: PUSH
59836: EMPTY
59837: LIST
59838: LIST
59839: PUSH
59840: LD_INT 2
59842: PUSH
59843: LD_INT 3
59845: PUSH
59846: EMPTY
59847: LIST
59848: LIST
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: LIST
59854: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
59855: LD_ADDR_VAR 0 44
59859: PUSH
59860: LD_INT 0
59862: PUSH
59863: LD_INT 2
59865: PUSH
59866: EMPTY
59867: LIST
59868: LIST
59869: PUSH
59870: LD_INT 1
59872: PUSH
59873: LD_INT 3
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: LD_INT 1
59882: NEG
59883: PUSH
59884: LD_INT 2
59886: PUSH
59887: EMPTY
59888: LIST
59889: LIST
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: LIST
59895: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59896: LD_ADDR_VAR 0 45
59900: PUSH
59901: LD_INT 2
59903: NEG
59904: PUSH
59905: LD_INT 0
59907: PUSH
59908: EMPTY
59909: LIST
59910: LIST
59911: PUSH
59912: LD_INT 2
59914: NEG
59915: PUSH
59916: LD_INT 1
59918: PUSH
59919: EMPTY
59920: LIST
59921: LIST
59922: PUSH
59923: LD_INT 3
59925: NEG
59926: PUSH
59927: LD_INT 1
59929: NEG
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: LIST
59939: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
59940: LD_ADDR_VAR 0 46
59944: PUSH
59945: LD_INT 2
59947: NEG
59948: PUSH
59949: LD_INT 2
59951: NEG
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: PUSH
59957: LD_INT 2
59959: NEG
59960: PUSH
59961: LD_INT 3
59963: NEG
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: PUSH
59969: LD_INT 3
59971: NEG
59972: PUSH
59973: LD_INT 2
59975: NEG
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: LIST
59985: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
59986: LD_ADDR_VAR 0 47
59990: PUSH
59991: LD_INT 2
59993: NEG
59994: PUSH
59995: LD_INT 3
59997: NEG
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: PUSH
60003: LD_INT 1
60005: NEG
60006: PUSH
60007: LD_INT 3
60009: NEG
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
60019: LD_ADDR_VAR 0 48
60023: PUSH
60024: LD_INT 1
60026: PUSH
60027: LD_INT 2
60029: NEG
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 2
60037: PUSH
60038: LD_INT 1
60040: NEG
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
60050: LD_ADDR_VAR 0 49
60054: PUSH
60055: LD_INT 3
60057: PUSH
60058: LD_INT 1
60060: PUSH
60061: EMPTY
60062: LIST
60063: LIST
60064: PUSH
60065: LD_INT 3
60067: PUSH
60068: LD_INT 2
60070: PUSH
60071: EMPTY
60072: LIST
60073: LIST
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
60079: LD_ADDR_VAR 0 50
60083: PUSH
60084: LD_INT 2
60086: PUSH
60087: LD_INT 3
60089: PUSH
60090: EMPTY
60091: LIST
60092: LIST
60093: PUSH
60094: LD_INT 1
60096: PUSH
60097: LD_INT 3
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60108: LD_ADDR_VAR 0 51
60112: PUSH
60113: LD_INT 1
60115: NEG
60116: PUSH
60117: LD_INT 2
60119: PUSH
60120: EMPTY
60121: LIST
60122: LIST
60123: PUSH
60124: LD_INT 2
60126: NEG
60127: PUSH
60128: LD_INT 1
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: PUSH
60135: EMPTY
60136: LIST
60137: LIST
60138: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60139: LD_ADDR_VAR 0 52
60143: PUSH
60144: LD_INT 3
60146: NEG
60147: PUSH
60148: LD_INT 1
60150: NEG
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: LD_INT 3
60158: NEG
60159: PUSH
60160: LD_INT 2
60162: NEG
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: PUSH
60168: EMPTY
60169: LIST
60170: LIST
60171: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60172: LD_ADDR_VAR 0 53
60176: PUSH
60177: LD_INT 1
60179: NEG
60180: PUSH
60181: LD_INT 3
60183: NEG
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: LD_INT 0
60191: PUSH
60192: LD_INT 3
60194: NEG
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: PUSH
60200: LD_INT 1
60202: PUSH
60203: LD_INT 2
60205: NEG
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: LIST
60215: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60216: LD_ADDR_VAR 0 54
60220: PUSH
60221: LD_INT 2
60223: PUSH
60224: LD_INT 1
60226: NEG
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: PUSH
60232: LD_INT 3
60234: PUSH
60235: LD_INT 0
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: PUSH
60242: LD_INT 3
60244: PUSH
60245: LD_INT 1
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PUSH
60252: EMPTY
60253: LIST
60254: LIST
60255: LIST
60256: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60257: LD_ADDR_VAR 0 55
60261: PUSH
60262: LD_INT 3
60264: PUSH
60265: LD_INT 2
60267: PUSH
60268: EMPTY
60269: LIST
60270: LIST
60271: PUSH
60272: LD_INT 3
60274: PUSH
60275: LD_INT 3
60277: PUSH
60278: EMPTY
60279: LIST
60280: LIST
60281: PUSH
60282: LD_INT 2
60284: PUSH
60285: LD_INT 3
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: LIST
60296: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60297: LD_ADDR_VAR 0 56
60301: PUSH
60302: LD_INT 1
60304: PUSH
60305: LD_INT 3
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: LD_INT 0
60314: PUSH
60315: LD_INT 3
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: PUSH
60322: LD_INT 1
60324: NEG
60325: PUSH
60326: LD_INT 2
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: LIST
60337: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60338: LD_ADDR_VAR 0 57
60342: PUSH
60343: LD_INT 2
60345: NEG
60346: PUSH
60347: LD_INT 1
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: PUSH
60354: LD_INT 3
60356: NEG
60357: PUSH
60358: LD_INT 0
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: LD_INT 3
60367: NEG
60368: PUSH
60369: LD_INT 1
60371: NEG
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: LIST
60381: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60382: LD_ADDR_VAR 0 58
60386: PUSH
60387: LD_INT 2
60389: NEG
60390: PUSH
60391: LD_INT 3
60393: NEG
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: PUSH
60399: LD_INT 3
60401: NEG
60402: PUSH
60403: LD_INT 2
60405: NEG
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: PUSH
60411: LD_INT 3
60413: NEG
60414: PUSH
60415: LD_INT 3
60417: NEG
60418: PUSH
60419: EMPTY
60420: LIST
60421: LIST
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: LIST
60427: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
60428: LD_ADDR_VAR 0 59
60432: PUSH
60433: LD_INT 1
60435: NEG
60436: PUSH
60437: LD_INT 2
60439: NEG
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: PUSH
60445: LD_INT 0
60447: PUSH
60448: LD_INT 2
60450: NEG
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: PUSH
60456: LD_INT 1
60458: PUSH
60459: LD_INT 1
60461: NEG
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: LIST
60471: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
60472: LD_ADDR_VAR 0 60
60476: PUSH
60477: LD_INT 1
60479: PUSH
60480: LD_INT 1
60482: NEG
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 2
60490: PUSH
60491: LD_INT 0
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 2
60500: PUSH
60501: LD_INT 1
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: LIST
60512: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
60513: LD_ADDR_VAR 0 61
60517: PUSH
60518: LD_INT 2
60520: PUSH
60521: LD_INT 1
60523: PUSH
60524: EMPTY
60525: LIST
60526: LIST
60527: PUSH
60528: LD_INT 2
60530: PUSH
60531: LD_INT 2
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: PUSH
60538: LD_INT 1
60540: PUSH
60541: LD_INT 2
60543: PUSH
60544: EMPTY
60545: LIST
60546: LIST
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: LIST
60552: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
60553: LD_ADDR_VAR 0 62
60557: PUSH
60558: LD_INT 1
60560: PUSH
60561: LD_INT 2
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: LD_INT 0
60570: PUSH
60571: LD_INT 2
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: PUSH
60578: LD_INT 1
60580: NEG
60581: PUSH
60582: LD_INT 1
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: LIST
60593: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
60594: LD_ADDR_VAR 0 63
60598: PUSH
60599: LD_INT 1
60601: NEG
60602: PUSH
60603: LD_INT 1
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: PUSH
60610: LD_INT 2
60612: NEG
60613: PUSH
60614: LD_INT 0
60616: PUSH
60617: EMPTY
60618: LIST
60619: LIST
60620: PUSH
60621: LD_INT 2
60623: NEG
60624: PUSH
60625: LD_INT 1
60627: NEG
60628: PUSH
60629: EMPTY
60630: LIST
60631: LIST
60632: PUSH
60633: EMPTY
60634: LIST
60635: LIST
60636: LIST
60637: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60638: LD_ADDR_VAR 0 64
60642: PUSH
60643: LD_INT 1
60645: NEG
60646: PUSH
60647: LD_INT 2
60649: NEG
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PUSH
60655: LD_INT 2
60657: NEG
60658: PUSH
60659: LD_INT 1
60661: NEG
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: LD_INT 2
60669: NEG
60670: PUSH
60671: LD_INT 2
60673: NEG
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: LIST
60683: ST_TO_ADDR
// end ; 2 :
60684: GO 63950
60686: LD_INT 2
60688: DOUBLE
60689: EQUAL
60690: IFTRUE 60694
60692: GO 63949
60694: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
60695: LD_ADDR_VAR 0 29
60699: PUSH
60700: LD_INT 4
60702: PUSH
60703: LD_INT 0
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: PUSH
60710: LD_INT 4
60712: PUSH
60713: LD_INT 1
60715: NEG
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: PUSH
60721: LD_INT 5
60723: PUSH
60724: LD_INT 0
60726: PUSH
60727: EMPTY
60728: LIST
60729: LIST
60730: PUSH
60731: LD_INT 5
60733: PUSH
60734: LD_INT 1
60736: PUSH
60737: EMPTY
60738: LIST
60739: LIST
60740: PUSH
60741: LD_INT 4
60743: PUSH
60744: LD_INT 1
60746: PUSH
60747: EMPTY
60748: LIST
60749: LIST
60750: PUSH
60751: LD_INT 3
60753: PUSH
60754: LD_INT 0
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: PUSH
60761: LD_INT 3
60763: PUSH
60764: LD_INT 1
60766: NEG
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: PUSH
60772: LD_INT 3
60774: PUSH
60775: LD_INT 2
60777: NEG
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: PUSH
60783: LD_INT 5
60785: PUSH
60786: LD_INT 2
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: PUSH
60793: LD_INT 3
60795: PUSH
60796: LD_INT 3
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: PUSH
60803: LD_INT 3
60805: PUSH
60806: LD_INT 2
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: PUSH
60813: LD_INT 4
60815: PUSH
60816: LD_INT 3
60818: PUSH
60819: EMPTY
60820: LIST
60821: LIST
60822: PUSH
60823: LD_INT 4
60825: PUSH
60826: LD_INT 4
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: PUSH
60833: LD_INT 3
60835: PUSH
60836: LD_INT 4
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: LD_INT 2
60845: PUSH
60846: LD_INT 3
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: PUSH
60853: LD_INT 2
60855: PUSH
60856: LD_INT 2
60858: PUSH
60859: EMPTY
60860: LIST
60861: LIST
60862: PUSH
60863: LD_INT 4
60865: PUSH
60866: LD_INT 2
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: PUSH
60873: LD_INT 2
60875: PUSH
60876: LD_INT 4
60878: PUSH
60879: EMPTY
60880: LIST
60881: LIST
60882: PUSH
60883: LD_INT 0
60885: PUSH
60886: LD_INT 4
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: PUSH
60893: LD_INT 0
60895: PUSH
60896: LD_INT 3
60898: PUSH
60899: EMPTY
60900: LIST
60901: LIST
60902: PUSH
60903: LD_INT 1
60905: PUSH
60906: LD_INT 4
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: PUSH
60913: LD_INT 1
60915: PUSH
60916: LD_INT 5
60918: PUSH
60919: EMPTY
60920: LIST
60921: LIST
60922: PUSH
60923: LD_INT 0
60925: PUSH
60926: LD_INT 5
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PUSH
60933: LD_INT 1
60935: NEG
60936: PUSH
60937: LD_INT 4
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: PUSH
60944: LD_INT 1
60946: NEG
60947: PUSH
60948: LD_INT 3
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 2
60957: PUSH
60958: LD_INT 5
60960: PUSH
60961: EMPTY
60962: LIST
60963: LIST
60964: PUSH
60965: LD_INT 2
60967: NEG
60968: PUSH
60969: LD_INT 3
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: LD_INT 3
60978: NEG
60979: PUSH
60980: LD_INT 0
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PUSH
60987: LD_INT 3
60989: NEG
60990: PUSH
60991: LD_INT 1
60993: NEG
60994: PUSH
60995: EMPTY
60996: LIST
60997: LIST
60998: PUSH
60999: LD_INT 2
61001: NEG
61002: PUSH
61003: LD_INT 0
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PUSH
61010: LD_INT 2
61012: NEG
61013: PUSH
61014: LD_INT 1
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: PUSH
61021: LD_INT 3
61023: NEG
61024: PUSH
61025: LD_INT 1
61027: PUSH
61028: EMPTY
61029: LIST
61030: LIST
61031: PUSH
61032: LD_INT 4
61034: NEG
61035: PUSH
61036: LD_INT 0
61038: PUSH
61039: EMPTY
61040: LIST
61041: LIST
61042: PUSH
61043: LD_INT 4
61045: NEG
61046: PUSH
61047: LD_INT 1
61049: NEG
61050: PUSH
61051: EMPTY
61052: LIST
61053: LIST
61054: PUSH
61055: LD_INT 4
61057: NEG
61058: PUSH
61059: LD_INT 2
61061: NEG
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: PUSH
61067: LD_INT 2
61069: NEG
61070: PUSH
61071: LD_INT 2
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 4
61080: NEG
61081: PUSH
61082: LD_INT 4
61084: NEG
61085: PUSH
61086: EMPTY
61087: LIST
61088: LIST
61089: PUSH
61090: LD_INT 4
61092: NEG
61093: PUSH
61094: LD_INT 5
61096: NEG
61097: PUSH
61098: EMPTY
61099: LIST
61100: LIST
61101: PUSH
61102: LD_INT 3
61104: NEG
61105: PUSH
61106: LD_INT 4
61108: NEG
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: PUSH
61114: LD_INT 3
61116: NEG
61117: PUSH
61118: LD_INT 3
61120: NEG
61121: PUSH
61122: EMPTY
61123: LIST
61124: LIST
61125: PUSH
61126: LD_INT 4
61128: NEG
61129: PUSH
61130: LD_INT 3
61132: NEG
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: PUSH
61138: LD_INT 5
61140: NEG
61141: PUSH
61142: LD_INT 4
61144: NEG
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: PUSH
61150: LD_INT 5
61152: NEG
61153: PUSH
61154: LD_INT 5
61156: NEG
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: PUSH
61162: LD_INT 3
61164: NEG
61165: PUSH
61166: LD_INT 5
61168: NEG
61169: PUSH
61170: EMPTY
61171: LIST
61172: LIST
61173: PUSH
61174: LD_INT 5
61176: NEG
61177: PUSH
61178: LD_INT 3
61180: NEG
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: PUSH
61186: EMPTY
61187: LIST
61188: LIST
61189: LIST
61190: LIST
61191: LIST
61192: LIST
61193: LIST
61194: LIST
61195: LIST
61196: LIST
61197: LIST
61198: LIST
61199: LIST
61200: LIST
61201: LIST
61202: LIST
61203: LIST
61204: LIST
61205: LIST
61206: LIST
61207: LIST
61208: LIST
61209: LIST
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: LIST
61216: LIST
61217: LIST
61218: LIST
61219: LIST
61220: LIST
61221: LIST
61222: LIST
61223: LIST
61224: LIST
61225: LIST
61226: LIST
61227: LIST
61228: LIST
61229: LIST
61230: LIST
61231: LIST
61232: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
61233: LD_ADDR_VAR 0 30
61237: PUSH
61238: LD_INT 4
61240: PUSH
61241: LD_INT 4
61243: PUSH
61244: EMPTY
61245: LIST
61246: LIST
61247: PUSH
61248: LD_INT 4
61250: PUSH
61251: LD_INT 3
61253: PUSH
61254: EMPTY
61255: LIST
61256: LIST
61257: PUSH
61258: LD_INT 5
61260: PUSH
61261: LD_INT 4
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: PUSH
61268: LD_INT 5
61270: PUSH
61271: LD_INT 5
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: PUSH
61278: LD_INT 4
61280: PUSH
61281: LD_INT 5
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: PUSH
61288: LD_INT 3
61290: PUSH
61291: LD_INT 4
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: LD_INT 3
61300: PUSH
61301: LD_INT 3
61303: PUSH
61304: EMPTY
61305: LIST
61306: LIST
61307: PUSH
61308: LD_INT 5
61310: PUSH
61311: LD_INT 3
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: PUSH
61318: LD_INT 3
61320: PUSH
61321: LD_INT 5
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: PUSH
61328: LD_INT 0
61330: PUSH
61331: LD_INT 3
61333: PUSH
61334: EMPTY
61335: LIST
61336: LIST
61337: PUSH
61338: LD_INT 0
61340: PUSH
61341: LD_INT 2
61343: PUSH
61344: EMPTY
61345: LIST
61346: LIST
61347: PUSH
61348: LD_INT 1
61350: PUSH
61351: LD_INT 3
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: PUSH
61358: LD_INT 1
61360: PUSH
61361: LD_INT 4
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: LD_INT 0
61370: PUSH
61371: LD_INT 4
61373: PUSH
61374: EMPTY
61375: LIST
61376: LIST
61377: PUSH
61378: LD_INT 1
61380: NEG
61381: PUSH
61382: LD_INT 3
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: PUSH
61389: LD_INT 1
61391: NEG
61392: PUSH
61393: LD_INT 2
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 2
61402: PUSH
61403: LD_INT 4
61405: PUSH
61406: EMPTY
61407: LIST
61408: LIST
61409: PUSH
61410: LD_INT 2
61412: NEG
61413: PUSH
61414: LD_INT 2
61416: PUSH
61417: EMPTY
61418: LIST
61419: LIST
61420: PUSH
61421: LD_INT 4
61423: NEG
61424: PUSH
61425: LD_INT 0
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: PUSH
61432: LD_INT 4
61434: NEG
61435: PUSH
61436: LD_INT 1
61438: NEG
61439: PUSH
61440: EMPTY
61441: LIST
61442: LIST
61443: PUSH
61444: LD_INT 3
61446: NEG
61447: PUSH
61448: LD_INT 0
61450: PUSH
61451: EMPTY
61452: LIST
61453: LIST
61454: PUSH
61455: LD_INT 3
61457: NEG
61458: PUSH
61459: LD_INT 1
61461: PUSH
61462: EMPTY
61463: LIST
61464: LIST
61465: PUSH
61466: LD_INT 4
61468: NEG
61469: PUSH
61470: LD_INT 1
61472: PUSH
61473: EMPTY
61474: LIST
61475: LIST
61476: PUSH
61477: LD_INT 5
61479: NEG
61480: PUSH
61481: LD_INT 0
61483: PUSH
61484: EMPTY
61485: LIST
61486: LIST
61487: PUSH
61488: LD_INT 5
61490: NEG
61491: PUSH
61492: LD_INT 1
61494: NEG
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: LD_INT 5
61502: NEG
61503: PUSH
61504: LD_INT 2
61506: NEG
61507: PUSH
61508: EMPTY
61509: LIST
61510: LIST
61511: PUSH
61512: LD_INT 3
61514: NEG
61515: PUSH
61516: LD_INT 2
61518: PUSH
61519: EMPTY
61520: LIST
61521: LIST
61522: PUSH
61523: LD_INT 3
61525: NEG
61526: PUSH
61527: LD_INT 3
61529: NEG
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: PUSH
61535: LD_INT 3
61537: NEG
61538: PUSH
61539: LD_INT 4
61541: NEG
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: PUSH
61547: LD_INT 2
61549: NEG
61550: PUSH
61551: LD_INT 3
61553: NEG
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: PUSH
61559: LD_INT 2
61561: NEG
61562: PUSH
61563: LD_INT 2
61565: NEG
61566: PUSH
61567: EMPTY
61568: LIST
61569: LIST
61570: PUSH
61571: LD_INT 3
61573: NEG
61574: PUSH
61575: LD_INT 2
61577: NEG
61578: PUSH
61579: EMPTY
61580: LIST
61581: LIST
61582: PUSH
61583: LD_INT 4
61585: NEG
61586: PUSH
61587: LD_INT 3
61589: NEG
61590: PUSH
61591: EMPTY
61592: LIST
61593: LIST
61594: PUSH
61595: LD_INT 4
61597: NEG
61598: PUSH
61599: LD_INT 4
61601: NEG
61602: PUSH
61603: EMPTY
61604: LIST
61605: LIST
61606: PUSH
61607: LD_INT 2
61609: NEG
61610: PUSH
61611: LD_INT 4
61613: NEG
61614: PUSH
61615: EMPTY
61616: LIST
61617: LIST
61618: PUSH
61619: LD_INT 4
61621: NEG
61622: PUSH
61623: LD_INT 2
61625: NEG
61626: PUSH
61627: EMPTY
61628: LIST
61629: LIST
61630: PUSH
61631: LD_INT 0
61633: PUSH
61634: LD_INT 4
61636: NEG
61637: PUSH
61638: EMPTY
61639: LIST
61640: LIST
61641: PUSH
61642: LD_INT 0
61644: PUSH
61645: LD_INT 5
61647: NEG
61648: PUSH
61649: EMPTY
61650: LIST
61651: LIST
61652: PUSH
61653: LD_INT 1
61655: PUSH
61656: LD_INT 4
61658: NEG
61659: PUSH
61660: EMPTY
61661: LIST
61662: LIST
61663: PUSH
61664: LD_INT 1
61666: PUSH
61667: LD_INT 3
61669: NEG
61670: PUSH
61671: EMPTY
61672: LIST
61673: LIST
61674: PUSH
61675: LD_INT 0
61677: PUSH
61678: LD_INT 3
61680: NEG
61681: PUSH
61682: EMPTY
61683: LIST
61684: LIST
61685: PUSH
61686: LD_INT 1
61688: NEG
61689: PUSH
61690: LD_INT 4
61692: NEG
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: PUSH
61698: LD_INT 1
61700: NEG
61701: PUSH
61702: LD_INT 5
61704: NEG
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: PUSH
61710: LD_INT 2
61712: PUSH
61713: LD_INT 3
61715: NEG
61716: PUSH
61717: EMPTY
61718: LIST
61719: LIST
61720: PUSH
61721: LD_INT 2
61723: NEG
61724: PUSH
61725: LD_INT 5
61727: NEG
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: LIST
61737: LIST
61738: LIST
61739: LIST
61740: LIST
61741: LIST
61742: LIST
61743: LIST
61744: LIST
61745: LIST
61746: LIST
61747: LIST
61748: LIST
61749: LIST
61750: LIST
61751: LIST
61752: LIST
61753: LIST
61754: LIST
61755: LIST
61756: LIST
61757: LIST
61758: LIST
61759: LIST
61760: LIST
61761: LIST
61762: LIST
61763: LIST
61764: LIST
61765: LIST
61766: LIST
61767: LIST
61768: LIST
61769: LIST
61770: LIST
61771: LIST
61772: LIST
61773: LIST
61774: LIST
61775: LIST
61776: LIST
61777: LIST
61778: LIST
61779: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
61780: LD_ADDR_VAR 0 31
61784: PUSH
61785: LD_INT 0
61787: PUSH
61788: LD_INT 4
61790: PUSH
61791: EMPTY
61792: LIST
61793: LIST
61794: PUSH
61795: LD_INT 0
61797: PUSH
61798: LD_INT 3
61800: PUSH
61801: EMPTY
61802: LIST
61803: LIST
61804: PUSH
61805: LD_INT 1
61807: PUSH
61808: LD_INT 4
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: PUSH
61815: LD_INT 1
61817: PUSH
61818: LD_INT 5
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: LD_INT 0
61827: PUSH
61828: LD_INT 5
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: PUSH
61835: LD_INT 1
61837: NEG
61838: PUSH
61839: LD_INT 4
61841: PUSH
61842: EMPTY
61843: LIST
61844: LIST
61845: PUSH
61846: LD_INT 1
61848: NEG
61849: PUSH
61850: LD_INT 3
61852: PUSH
61853: EMPTY
61854: LIST
61855: LIST
61856: PUSH
61857: LD_INT 2
61859: PUSH
61860: LD_INT 5
61862: PUSH
61863: EMPTY
61864: LIST
61865: LIST
61866: PUSH
61867: LD_INT 2
61869: NEG
61870: PUSH
61871: LD_INT 3
61873: PUSH
61874: EMPTY
61875: LIST
61876: LIST
61877: PUSH
61878: LD_INT 3
61880: NEG
61881: PUSH
61882: LD_INT 0
61884: PUSH
61885: EMPTY
61886: LIST
61887: LIST
61888: PUSH
61889: LD_INT 3
61891: NEG
61892: PUSH
61893: LD_INT 1
61895: NEG
61896: PUSH
61897: EMPTY
61898: LIST
61899: LIST
61900: PUSH
61901: LD_INT 2
61903: NEG
61904: PUSH
61905: LD_INT 0
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: PUSH
61912: LD_INT 2
61914: NEG
61915: PUSH
61916: LD_INT 1
61918: PUSH
61919: EMPTY
61920: LIST
61921: LIST
61922: PUSH
61923: LD_INT 3
61925: NEG
61926: PUSH
61927: LD_INT 1
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: PUSH
61934: LD_INT 4
61936: NEG
61937: PUSH
61938: LD_INT 0
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 4
61947: NEG
61948: PUSH
61949: LD_INT 1
61951: NEG
61952: PUSH
61953: EMPTY
61954: LIST
61955: LIST
61956: PUSH
61957: LD_INT 4
61959: NEG
61960: PUSH
61961: LD_INT 2
61963: NEG
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: PUSH
61969: LD_INT 2
61971: NEG
61972: PUSH
61973: LD_INT 2
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: PUSH
61980: LD_INT 4
61982: NEG
61983: PUSH
61984: LD_INT 4
61986: NEG
61987: PUSH
61988: EMPTY
61989: LIST
61990: LIST
61991: PUSH
61992: LD_INT 4
61994: NEG
61995: PUSH
61996: LD_INT 5
61998: NEG
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: PUSH
62004: LD_INT 3
62006: NEG
62007: PUSH
62008: LD_INT 4
62010: NEG
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: PUSH
62016: LD_INT 3
62018: NEG
62019: PUSH
62020: LD_INT 3
62022: NEG
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: PUSH
62028: LD_INT 4
62030: NEG
62031: PUSH
62032: LD_INT 3
62034: NEG
62035: PUSH
62036: EMPTY
62037: LIST
62038: LIST
62039: PUSH
62040: LD_INT 5
62042: NEG
62043: PUSH
62044: LD_INT 4
62046: NEG
62047: PUSH
62048: EMPTY
62049: LIST
62050: LIST
62051: PUSH
62052: LD_INT 5
62054: NEG
62055: PUSH
62056: LD_INT 5
62058: NEG
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: PUSH
62064: LD_INT 3
62066: NEG
62067: PUSH
62068: LD_INT 5
62070: NEG
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: PUSH
62076: LD_INT 5
62078: NEG
62079: PUSH
62080: LD_INT 3
62082: NEG
62083: PUSH
62084: EMPTY
62085: LIST
62086: LIST
62087: PUSH
62088: LD_INT 0
62090: PUSH
62091: LD_INT 3
62093: NEG
62094: PUSH
62095: EMPTY
62096: LIST
62097: LIST
62098: PUSH
62099: LD_INT 0
62101: PUSH
62102: LD_INT 4
62104: NEG
62105: PUSH
62106: EMPTY
62107: LIST
62108: LIST
62109: PUSH
62110: LD_INT 1
62112: PUSH
62113: LD_INT 3
62115: NEG
62116: PUSH
62117: EMPTY
62118: LIST
62119: LIST
62120: PUSH
62121: LD_INT 1
62123: PUSH
62124: LD_INT 2
62126: NEG
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: PUSH
62132: LD_INT 0
62134: PUSH
62135: LD_INT 2
62137: NEG
62138: PUSH
62139: EMPTY
62140: LIST
62141: LIST
62142: PUSH
62143: LD_INT 1
62145: NEG
62146: PUSH
62147: LD_INT 3
62149: NEG
62150: PUSH
62151: EMPTY
62152: LIST
62153: LIST
62154: PUSH
62155: LD_INT 1
62157: NEG
62158: PUSH
62159: LD_INT 4
62161: NEG
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: PUSH
62167: LD_INT 2
62169: PUSH
62170: LD_INT 2
62172: NEG
62173: PUSH
62174: EMPTY
62175: LIST
62176: LIST
62177: PUSH
62178: LD_INT 2
62180: NEG
62181: PUSH
62182: LD_INT 4
62184: NEG
62185: PUSH
62186: EMPTY
62187: LIST
62188: LIST
62189: PUSH
62190: LD_INT 4
62192: PUSH
62193: LD_INT 0
62195: PUSH
62196: EMPTY
62197: LIST
62198: LIST
62199: PUSH
62200: LD_INT 4
62202: PUSH
62203: LD_INT 1
62205: NEG
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: PUSH
62211: LD_INT 5
62213: PUSH
62214: LD_INT 0
62216: PUSH
62217: EMPTY
62218: LIST
62219: LIST
62220: PUSH
62221: LD_INT 5
62223: PUSH
62224: LD_INT 1
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: PUSH
62231: LD_INT 4
62233: PUSH
62234: LD_INT 1
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: PUSH
62241: LD_INT 3
62243: PUSH
62244: LD_INT 0
62246: PUSH
62247: EMPTY
62248: LIST
62249: LIST
62250: PUSH
62251: LD_INT 3
62253: PUSH
62254: LD_INT 1
62256: NEG
62257: PUSH
62258: EMPTY
62259: LIST
62260: LIST
62261: PUSH
62262: LD_INT 3
62264: PUSH
62265: LD_INT 2
62267: NEG
62268: PUSH
62269: EMPTY
62270: LIST
62271: LIST
62272: PUSH
62273: LD_INT 5
62275: PUSH
62276: LD_INT 2
62278: PUSH
62279: EMPTY
62280: LIST
62281: LIST
62282: PUSH
62283: EMPTY
62284: LIST
62285: LIST
62286: LIST
62287: LIST
62288: LIST
62289: LIST
62290: LIST
62291: LIST
62292: LIST
62293: LIST
62294: LIST
62295: LIST
62296: LIST
62297: LIST
62298: LIST
62299: LIST
62300: LIST
62301: LIST
62302: LIST
62303: LIST
62304: LIST
62305: LIST
62306: LIST
62307: LIST
62308: LIST
62309: LIST
62310: LIST
62311: LIST
62312: LIST
62313: LIST
62314: LIST
62315: LIST
62316: LIST
62317: LIST
62318: LIST
62319: LIST
62320: LIST
62321: LIST
62322: LIST
62323: LIST
62324: LIST
62325: LIST
62326: LIST
62327: LIST
62328: LIST
62329: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
62330: LD_ADDR_VAR 0 32
62334: PUSH
62335: LD_INT 4
62337: NEG
62338: PUSH
62339: LD_INT 0
62341: PUSH
62342: EMPTY
62343: LIST
62344: LIST
62345: PUSH
62346: LD_INT 4
62348: NEG
62349: PUSH
62350: LD_INT 1
62352: NEG
62353: PUSH
62354: EMPTY
62355: LIST
62356: LIST
62357: PUSH
62358: LD_INT 3
62360: NEG
62361: PUSH
62362: LD_INT 0
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: PUSH
62369: LD_INT 3
62371: NEG
62372: PUSH
62373: LD_INT 1
62375: PUSH
62376: EMPTY
62377: LIST
62378: LIST
62379: PUSH
62380: LD_INT 4
62382: NEG
62383: PUSH
62384: LD_INT 1
62386: PUSH
62387: EMPTY
62388: LIST
62389: LIST
62390: PUSH
62391: LD_INT 5
62393: NEG
62394: PUSH
62395: LD_INT 0
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: PUSH
62402: LD_INT 5
62404: NEG
62405: PUSH
62406: LD_INT 1
62408: NEG
62409: PUSH
62410: EMPTY
62411: LIST
62412: LIST
62413: PUSH
62414: LD_INT 5
62416: NEG
62417: PUSH
62418: LD_INT 2
62420: NEG
62421: PUSH
62422: EMPTY
62423: LIST
62424: LIST
62425: PUSH
62426: LD_INT 3
62428: NEG
62429: PUSH
62430: LD_INT 2
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: PUSH
62437: LD_INT 3
62439: NEG
62440: PUSH
62441: LD_INT 3
62443: NEG
62444: PUSH
62445: EMPTY
62446: LIST
62447: LIST
62448: PUSH
62449: LD_INT 3
62451: NEG
62452: PUSH
62453: LD_INT 4
62455: NEG
62456: PUSH
62457: EMPTY
62458: LIST
62459: LIST
62460: PUSH
62461: LD_INT 2
62463: NEG
62464: PUSH
62465: LD_INT 3
62467: NEG
62468: PUSH
62469: EMPTY
62470: LIST
62471: LIST
62472: PUSH
62473: LD_INT 2
62475: NEG
62476: PUSH
62477: LD_INT 2
62479: NEG
62480: PUSH
62481: EMPTY
62482: LIST
62483: LIST
62484: PUSH
62485: LD_INT 3
62487: NEG
62488: PUSH
62489: LD_INT 2
62491: NEG
62492: PUSH
62493: EMPTY
62494: LIST
62495: LIST
62496: PUSH
62497: LD_INT 4
62499: NEG
62500: PUSH
62501: LD_INT 3
62503: NEG
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: PUSH
62509: LD_INT 4
62511: NEG
62512: PUSH
62513: LD_INT 4
62515: NEG
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: PUSH
62521: LD_INT 2
62523: NEG
62524: PUSH
62525: LD_INT 4
62527: NEG
62528: PUSH
62529: EMPTY
62530: LIST
62531: LIST
62532: PUSH
62533: LD_INT 4
62535: NEG
62536: PUSH
62537: LD_INT 2
62539: NEG
62540: PUSH
62541: EMPTY
62542: LIST
62543: LIST
62544: PUSH
62545: LD_INT 0
62547: PUSH
62548: LD_INT 4
62550: NEG
62551: PUSH
62552: EMPTY
62553: LIST
62554: LIST
62555: PUSH
62556: LD_INT 0
62558: PUSH
62559: LD_INT 5
62561: NEG
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: PUSH
62567: LD_INT 1
62569: PUSH
62570: LD_INT 4
62572: NEG
62573: PUSH
62574: EMPTY
62575: LIST
62576: LIST
62577: PUSH
62578: LD_INT 1
62580: PUSH
62581: LD_INT 3
62583: NEG
62584: PUSH
62585: EMPTY
62586: LIST
62587: LIST
62588: PUSH
62589: LD_INT 0
62591: PUSH
62592: LD_INT 3
62594: NEG
62595: PUSH
62596: EMPTY
62597: LIST
62598: LIST
62599: PUSH
62600: LD_INT 1
62602: NEG
62603: PUSH
62604: LD_INT 4
62606: NEG
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: PUSH
62612: LD_INT 1
62614: NEG
62615: PUSH
62616: LD_INT 5
62618: NEG
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: PUSH
62624: LD_INT 2
62626: PUSH
62627: LD_INT 3
62629: NEG
62630: PUSH
62631: EMPTY
62632: LIST
62633: LIST
62634: PUSH
62635: LD_INT 2
62637: NEG
62638: PUSH
62639: LD_INT 5
62641: NEG
62642: PUSH
62643: EMPTY
62644: LIST
62645: LIST
62646: PUSH
62647: LD_INT 3
62649: PUSH
62650: LD_INT 0
62652: PUSH
62653: EMPTY
62654: LIST
62655: LIST
62656: PUSH
62657: LD_INT 3
62659: PUSH
62660: LD_INT 1
62662: NEG
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: PUSH
62668: LD_INT 4
62670: PUSH
62671: LD_INT 0
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: PUSH
62678: LD_INT 4
62680: PUSH
62681: LD_INT 1
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: PUSH
62688: LD_INT 3
62690: PUSH
62691: LD_INT 1
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: PUSH
62698: LD_INT 2
62700: PUSH
62701: LD_INT 0
62703: PUSH
62704: EMPTY
62705: LIST
62706: LIST
62707: PUSH
62708: LD_INT 2
62710: PUSH
62711: LD_INT 1
62713: NEG
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: PUSH
62719: LD_INT 2
62721: PUSH
62722: LD_INT 2
62724: NEG
62725: PUSH
62726: EMPTY
62727: LIST
62728: LIST
62729: PUSH
62730: LD_INT 4
62732: PUSH
62733: LD_INT 2
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 4
62742: PUSH
62743: LD_INT 4
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: LD_INT 4
62752: PUSH
62753: LD_INT 3
62755: PUSH
62756: EMPTY
62757: LIST
62758: LIST
62759: PUSH
62760: LD_INT 5
62762: PUSH
62763: LD_INT 4
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: PUSH
62770: LD_INT 5
62772: PUSH
62773: LD_INT 5
62775: PUSH
62776: EMPTY
62777: LIST
62778: LIST
62779: PUSH
62780: LD_INT 4
62782: PUSH
62783: LD_INT 5
62785: PUSH
62786: EMPTY
62787: LIST
62788: LIST
62789: PUSH
62790: LD_INT 3
62792: PUSH
62793: LD_INT 4
62795: PUSH
62796: EMPTY
62797: LIST
62798: LIST
62799: PUSH
62800: LD_INT 3
62802: PUSH
62803: LD_INT 3
62805: PUSH
62806: EMPTY
62807: LIST
62808: LIST
62809: PUSH
62810: LD_INT 5
62812: PUSH
62813: LD_INT 3
62815: PUSH
62816: EMPTY
62817: LIST
62818: LIST
62819: PUSH
62820: LD_INT 3
62822: PUSH
62823: LD_INT 5
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: PUSH
62830: EMPTY
62831: LIST
62832: LIST
62833: LIST
62834: LIST
62835: LIST
62836: LIST
62837: LIST
62838: LIST
62839: LIST
62840: LIST
62841: LIST
62842: LIST
62843: LIST
62844: LIST
62845: LIST
62846: LIST
62847: LIST
62848: LIST
62849: LIST
62850: LIST
62851: LIST
62852: LIST
62853: LIST
62854: LIST
62855: LIST
62856: LIST
62857: LIST
62858: LIST
62859: LIST
62860: LIST
62861: LIST
62862: LIST
62863: LIST
62864: LIST
62865: LIST
62866: LIST
62867: LIST
62868: LIST
62869: LIST
62870: LIST
62871: LIST
62872: LIST
62873: LIST
62874: LIST
62875: LIST
62876: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
62877: LD_ADDR_VAR 0 33
62881: PUSH
62882: LD_INT 4
62884: NEG
62885: PUSH
62886: LD_INT 4
62888: NEG
62889: PUSH
62890: EMPTY
62891: LIST
62892: LIST
62893: PUSH
62894: LD_INT 4
62896: NEG
62897: PUSH
62898: LD_INT 5
62900: NEG
62901: PUSH
62902: EMPTY
62903: LIST
62904: LIST
62905: PUSH
62906: LD_INT 3
62908: NEG
62909: PUSH
62910: LD_INT 4
62912: NEG
62913: PUSH
62914: EMPTY
62915: LIST
62916: LIST
62917: PUSH
62918: LD_INT 3
62920: NEG
62921: PUSH
62922: LD_INT 3
62924: NEG
62925: PUSH
62926: EMPTY
62927: LIST
62928: LIST
62929: PUSH
62930: LD_INT 4
62932: NEG
62933: PUSH
62934: LD_INT 3
62936: NEG
62937: PUSH
62938: EMPTY
62939: LIST
62940: LIST
62941: PUSH
62942: LD_INT 5
62944: NEG
62945: PUSH
62946: LD_INT 4
62948: NEG
62949: PUSH
62950: EMPTY
62951: LIST
62952: LIST
62953: PUSH
62954: LD_INT 5
62956: NEG
62957: PUSH
62958: LD_INT 5
62960: NEG
62961: PUSH
62962: EMPTY
62963: LIST
62964: LIST
62965: PUSH
62966: LD_INT 3
62968: NEG
62969: PUSH
62970: LD_INT 5
62972: NEG
62973: PUSH
62974: EMPTY
62975: LIST
62976: LIST
62977: PUSH
62978: LD_INT 5
62980: NEG
62981: PUSH
62982: LD_INT 3
62984: NEG
62985: PUSH
62986: EMPTY
62987: LIST
62988: LIST
62989: PUSH
62990: LD_INT 0
62992: PUSH
62993: LD_INT 3
62995: NEG
62996: PUSH
62997: EMPTY
62998: LIST
62999: LIST
63000: PUSH
63001: LD_INT 0
63003: PUSH
63004: LD_INT 4
63006: NEG
63007: PUSH
63008: EMPTY
63009: LIST
63010: LIST
63011: PUSH
63012: LD_INT 1
63014: PUSH
63015: LD_INT 3
63017: NEG
63018: PUSH
63019: EMPTY
63020: LIST
63021: LIST
63022: PUSH
63023: LD_INT 1
63025: PUSH
63026: LD_INT 2
63028: NEG
63029: PUSH
63030: EMPTY
63031: LIST
63032: LIST
63033: PUSH
63034: LD_INT 0
63036: PUSH
63037: LD_INT 2
63039: NEG
63040: PUSH
63041: EMPTY
63042: LIST
63043: LIST
63044: PUSH
63045: LD_INT 1
63047: NEG
63048: PUSH
63049: LD_INT 3
63051: NEG
63052: PUSH
63053: EMPTY
63054: LIST
63055: LIST
63056: PUSH
63057: LD_INT 1
63059: NEG
63060: PUSH
63061: LD_INT 4
63063: NEG
63064: PUSH
63065: EMPTY
63066: LIST
63067: LIST
63068: PUSH
63069: LD_INT 2
63071: PUSH
63072: LD_INT 2
63074: NEG
63075: PUSH
63076: EMPTY
63077: LIST
63078: LIST
63079: PUSH
63080: LD_INT 2
63082: NEG
63083: PUSH
63084: LD_INT 4
63086: NEG
63087: PUSH
63088: EMPTY
63089: LIST
63090: LIST
63091: PUSH
63092: LD_INT 4
63094: PUSH
63095: LD_INT 0
63097: PUSH
63098: EMPTY
63099: LIST
63100: LIST
63101: PUSH
63102: LD_INT 4
63104: PUSH
63105: LD_INT 1
63107: NEG
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: PUSH
63113: LD_INT 5
63115: PUSH
63116: LD_INT 0
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: PUSH
63123: LD_INT 5
63125: PUSH
63126: LD_INT 1
63128: PUSH
63129: EMPTY
63130: LIST
63131: LIST
63132: PUSH
63133: LD_INT 4
63135: PUSH
63136: LD_INT 1
63138: PUSH
63139: EMPTY
63140: LIST
63141: LIST
63142: PUSH
63143: LD_INT 3
63145: PUSH
63146: LD_INT 0
63148: PUSH
63149: EMPTY
63150: LIST
63151: LIST
63152: PUSH
63153: LD_INT 3
63155: PUSH
63156: LD_INT 1
63158: NEG
63159: PUSH
63160: EMPTY
63161: LIST
63162: LIST
63163: PUSH
63164: LD_INT 3
63166: PUSH
63167: LD_INT 2
63169: NEG
63170: PUSH
63171: EMPTY
63172: LIST
63173: LIST
63174: PUSH
63175: LD_INT 5
63177: PUSH
63178: LD_INT 2
63180: PUSH
63181: EMPTY
63182: LIST
63183: LIST
63184: PUSH
63185: LD_INT 3
63187: PUSH
63188: LD_INT 3
63190: PUSH
63191: EMPTY
63192: LIST
63193: LIST
63194: PUSH
63195: LD_INT 3
63197: PUSH
63198: LD_INT 2
63200: PUSH
63201: EMPTY
63202: LIST
63203: LIST
63204: PUSH
63205: LD_INT 4
63207: PUSH
63208: LD_INT 3
63210: PUSH
63211: EMPTY
63212: LIST
63213: LIST
63214: PUSH
63215: LD_INT 4
63217: PUSH
63218: LD_INT 4
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: PUSH
63225: LD_INT 3
63227: PUSH
63228: LD_INT 4
63230: PUSH
63231: EMPTY
63232: LIST
63233: LIST
63234: PUSH
63235: LD_INT 2
63237: PUSH
63238: LD_INT 3
63240: PUSH
63241: EMPTY
63242: LIST
63243: LIST
63244: PUSH
63245: LD_INT 2
63247: PUSH
63248: LD_INT 2
63250: PUSH
63251: EMPTY
63252: LIST
63253: LIST
63254: PUSH
63255: LD_INT 4
63257: PUSH
63258: LD_INT 2
63260: PUSH
63261: EMPTY
63262: LIST
63263: LIST
63264: PUSH
63265: LD_INT 2
63267: PUSH
63268: LD_INT 4
63270: PUSH
63271: EMPTY
63272: LIST
63273: LIST
63274: PUSH
63275: LD_INT 0
63277: PUSH
63278: LD_INT 4
63280: PUSH
63281: EMPTY
63282: LIST
63283: LIST
63284: PUSH
63285: LD_INT 0
63287: PUSH
63288: LD_INT 3
63290: PUSH
63291: EMPTY
63292: LIST
63293: LIST
63294: PUSH
63295: LD_INT 1
63297: PUSH
63298: LD_INT 4
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: PUSH
63305: LD_INT 1
63307: PUSH
63308: LD_INT 5
63310: PUSH
63311: EMPTY
63312: LIST
63313: LIST
63314: PUSH
63315: LD_INT 0
63317: PUSH
63318: LD_INT 5
63320: PUSH
63321: EMPTY
63322: LIST
63323: LIST
63324: PUSH
63325: LD_INT 1
63327: NEG
63328: PUSH
63329: LD_INT 4
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: PUSH
63336: LD_INT 1
63338: NEG
63339: PUSH
63340: LD_INT 3
63342: PUSH
63343: EMPTY
63344: LIST
63345: LIST
63346: PUSH
63347: LD_INT 2
63349: PUSH
63350: LD_INT 5
63352: PUSH
63353: EMPTY
63354: LIST
63355: LIST
63356: PUSH
63357: LD_INT 2
63359: NEG
63360: PUSH
63361: LD_INT 3
63363: PUSH
63364: EMPTY
63365: LIST
63366: LIST
63367: PUSH
63368: EMPTY
63369: LIST
63370: LIST
63371: LIST
63372: LIST
63373: LIST
63374: LIST
63375: LIST
63376: LIST
63377: LIST
63378: LIST
63379: LIST
63380: LIST
63381: LIST
63382: LIST
63383: LIST
63384: LIST
63385: LIST
63386: LIST
63387: LIST
63388: LIST
63389: LIST
63390: LIST
63391: LIST
63392: LIST
63393: LIST
63394: LIST
63395: LIST
63396: LIST
63397: LIST
63398: LIST
63399: LIST
63400: LIST
63401: LIST
63402: LIST
63403: LIST
63404: LIST
63405: LIST
63406: LIST
63407: LIST
63408: LIST
63409: LIST
63410: LIST
63411: LIST
63412: LIST
63413: LIST
63414: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
63415: LD_ADDR_VAR 0 34
63419: PUSH
63420: LD_INT 0
63422: PUSH
63423: LD_INT 4
63425: NEG
63426: PUSH
63427: EMPTY
63428: LIST
63429: LIST
63430: PUSH
63431: LD_INT 0
63433: PUSH
63434: LD_INT 5
63436: NEG
63437: PUSH
63438: EMPTY
63439: LIST
63440: LIST
63441: PUSH
63442: LD_INT 1
63444: PUSH
63445: LD_INT 4
63447: NEG
63448: PUSH
63449: EMPTY
63450: LIST
63451: LIST
63452: PUSH
63453: LD_INT 1
63455: PUSH
63456: LD_INT 3
63458: NEG
63459: PUSH
63460: EMPTY
63461: LIST
63462: LIST
63463: PUSH
63464: LD_INT 0
63466: PUSH
63467: LD_INT 3
63469: NEG
63470: PUSH
63471: EMPTY
63472: LIST
63473: LIST
63474: PUSH
63475: LD_INT 1
63477: NEG
63478: PUSH
63479: LD_INT 4
63481: NEG
63482: PUSH
63483: EMPTY
63484: LIST
63485: LIST
63486: PUSH
63487: LD_INT 1
63489: NEG
63490: PUSH
63491: LD_INT 5
63493: NEG
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PUSH
63499: LD_INT 2
63501: PUSH
63502: LD_INT 3
63504: NEG
63505: PUSH
63506: EMPTY
63507: LIST
63508: LIST
63509: PUSH
63510: LD_INT 2
63512: NEG
63513: PUSH
63514: LD_INT 5
63516: NEG
63517: PUSH
63518: EMPTY
63519: LIST
63520: LIST
63521: PUSH
63522: LD_INT 3
63524: PUSH
63525: LD_INT 0
63527: PUSH
63528: EMPTY
63529: LIST
63530: LIST
63531: PUSH
63532: LD_INT 3
63534: PUSH
63535: LD_INT 1
63537: NEG
63538: PUSH
63539: EMPTY
63540: LIST
63541: LIST
63542: PUSH
63543: LD_INT 4
63545: PUSH
63546: LD_INT 0
63548: PUSH
63549: EMPTY
63550: LIST
63551: LIST
63552: PUSH
63553: LD_INT 4
63555: PUSH
63556: LD_INT 1
63558: PUSH
63559: EMPTY
63560: LIST
63561: LIST
63562: PUSH
63563: LD_INT 3
63565: PUSH
63566: LD_INT 1
63568: PUSH
63569: EMPTY
63570: LIST
63571: LIST
63572: PUSH
63573: LD_INT 2
63575: PUSH
63576: LD_INT 0
63578: PUSH
63579: EMPTY
63580: LIST
63581: LIST
63582: PUSH
63583: LD_INT 2
63585: PUSH
63586: LD_INT 1
63588: NEG
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: PUSH
63594: LD_INT 2
63596: PUSH
63597: LD_INT 2
63599: NEG
63600: PUSH
63601: EMPTY
63602: LIST
63603: LIST
63604: PUSH
63605: LD_INT 4
63607: PUSH
63608: LD_INT 2
63610: PUSH
63611: EMPTY
63612: LIST
63613: LIST
63614: PUSH
63615: LD_INT 4
63617: PUSH
63618: LD_INT 4
63620: PUSH
63621: EMPTY
63622: LIST
63623: LIST
63624: PUSH
63625: LD_INT 4
63627: PUSH
63628: LD_INT 3
63630: PUSH
63631: EMPTY
63632: LIST
63633: LIST
63634: PUSH
63635: LD_INT 5
63637: PUSH
63638: LD_INT 4
63640: PUSH
63641: EMPTY
63642: LIST
63643: LIST
63644: PUSH
63645: LD_INT 5
63647: PUSH
63648: LD_INT 5
63650: PUSH
63651: EMPTY
63652: LIST
63653: LIST
63654: PUSH
63655: LD_INT 4
63657: PUSH
63658: LD_INT 5
63660: PUSH
63661: EMPTY
63662: LIST
63663: LIST
63664: PUSH
63665: LD_INT 3
63667: PUSH
63668: LD_INT 4
63670: PUSH
63671: EMPTY
63672: LIST
63673: LIST
63674: PUSH
63675: LD_INT 3
63677: PUSH
63678: LD_INT 3
63680: PUSH
63681: EMPTY
63682: LIST
63683: LIST
63684: PUSH
63685: LD_INT 5
63687: PUSH
63688: LD_INT 3
63690: PUSH
63691: EMPTY
63692: LIST
63693: LIST
63694: PUSH
63695: LD_INT 3
63697: PUSH
63698: LD_INT 5
63700: PUSH
63701: EMPTY
63702: LIST
63703: LIST
63704: PUSH
63705: LD_INT 0
63707: PUSH
63708: LD_INT 3
63710: PUSH
63711: EMPTY
63712: LIST
63713: LIST
63714: PUSH
63715: LD_INT 0
63717: PUSH
63718: LD_INT 2
63720: PUSH
63721: EMPTY
63722: LIST
63723: LIST
63724: PUSH
63725: LD_INT 1
63727: PUSH
63728: LD_INT 3
63730: PUSH
63731: EMPTY
63732: LIST
63733: LIST
63734: PUSH
63735: LD_INT 1
63737: PUSH
63738: LD_INT 4
63740: PUSH
63741: EMPTY
63742: LIST
63743: LIST
63744: PUSH
63745: LD_INT 0
63747: PUSH
63748: LD_INT 4
63750: PUSH
63751: EMPTY
63752: LIST
63753: LIST
63754: PUSH
63755: LD_INT 1
63757: NEG
63758: PUSH
63759: LD_INT 3
63761: PUSH
63762: EMPTY
63763: LIST
63764: LIST
63765: PUSH
63766: LD_INT 1
63768: NEG
63769: PUSH
63770: LD_INT 2
63772: PUSH
63773: EMPTY
63774: LIST
63775: LIST
63776: PUSH
63777: LD_INT 2
63779: PUSH
63780: LD_INT 4
63782: PUSH
63783: EMPTY
63784: LIST
63785: LIST
63786: PUSH
63787: LD_INT 2
63789: NEG
63790: PUSH
63791: LD_INT 2
63793: PUSH
63794: EMPTY
63795: LIST
63796: LIST
63797: PUSH
63798: LD_INT 4
63800: NEG
63801: PUSH
63802: LD_INT 0
63804: PUSH
63805: EMPTY
63806: LIST
63807: LIST
63808: PUSH
63809: LD_INT 4
63811: NEG
63812: PUSH
63813: LD_INT 1
63815: NEG
63816: PUSH
63817: EMPTY
63818: LIST
63819: LIST
63820: PUSH
63821: LD_INT 3
63823: NEG
63824: PUSH
63825: LD_INT 0
63827: PUSH
63828: EMPTY
63829: LIST
63830: LIST
63831: PUSH
63832: LD_INT 3
63834: NEG
63835: PUSH
63836: LD_INT 1
63838: PUSH
63839: EMPTY
63840: LIST
63841: LIST
63842: PUSH
63843: LD_INT 4
63845: NEG
63846: PUSH
63847: LD_INT 1
63849: PUSH
63850: EMPTY
63851: LIST
63852: LIST
63853: PUSH
63854: LD_INT 5
63856: NEG
63857: PUSH
63858: LD_INT 0
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: PUSH
63865: LD_INT 5
63867: NEG
63868: PUSH
63869: LD_INT 1
63871: NEG
63872: PUSH
63873: EMPTY
63874: LIST
63875: LIST
63876: PUSH
63877: LD_INT 5
63879: NEG
63880: PUSH
63881: LD_INT 2
63883: NEG
63884: PUSH
63885: EMPTY
63886: LIST
63887: LIST
63888: PUSH
63889: LD_INT 3
63891: NEG
63892: PUSH
63893: LD_INT 2
63895: PUSH
63896: EMPTY
63897: LIST
63898: LIST
63899: PUSH
63900: EMPTY
63901: LIST
63902: LIST
63903: LIST
63904: LIST
63905: LIST
63906: LIST
63907: LIST
63908: LIST
63909: LIST
63910: LIST
63911: LIST
63912: LIST
63913: LIST
63914: LIST
63915: LIST
63916: LIST
63917: LIST
63918: LIST
63919: LIST
63920: LIST
63921: LIST
63922: LIST
63923: LIST
63924: LIST
63925: LIST
63926: LIST
63927: LIST
63928: LIST
63929: LIST
63930: LIST
63931: LIST
63932: LIST
63933: LIST
63934: LIST
63935: LIST
63936: LIST
63937: LIST
63938: LIST
63939: LIST
63940: LIST
63941: LIST
63942: LIST
63943: LIST
63944: LIST
63945: LIST
63946: ST_TO_ADDR
// end ; end ;
63947: GO 63950
63949: POP
// case btype of b_depot , b_warehouse :
63950: LD_VAR 0 1
63954: PUSH
63955: LD_INT 0
63957: DOUBLE
63958: EQUAL
63959: IFTRUE 63969
63961: LD_INT 1
63963: DOUBLE
63964: EQUAL
63965: IFTRUE 63969
63967: GO 64170
63969: POP
// case nation of nation_american :
63970: LD_VAR 0 5
63974: PUSH
63975: LD_INT 1
63977: DOUBLE
63978: EQUAL
63979: IFTRUE 63983
63981: GO 64039
63983: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
63984: LD_ADDR_VAR 0 9
63988: PUSH
63989: LD_VAR 0 11
63993: PUSH
63994: LD_VAR 0 12
63998: PUSH
63999: LD_VAR 0 13
64003: PUSH
64004: LD_VAR 0 14
64008: PUSH
64009: LD_VAR 0 15
64013: PUSH
64014: LD_VAR 0 16
64018: PUSH
64019: EMPTY
64020: LIST
64021: LIST
64022: LIST
64023: LIST
64024: LIST
64025: LIST
64026: PUSH
64027: LD_VAR 0 4
64031: PUSH
64032: LD_INT 1
64034: PLUS
64035: ARRAY
64036: ST_TO_ADDR
64037: GO 64168
64039: LD_INT 2
64041: DOUBLE
64042: EQUAL
64043: IFTRUE 64047
64045: GO 64103
64047: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
64048: LD_ADDR_VAR 0 9
64052: PUSH
64053: LD_VAR 0 17
64057: PUSH
64058: LD_VAR 0 18
64062: PUSH
64063: LD_VAR 0 19
64067: PUSH
64068: LD_VAR 0 20
64072: PUSH
64073: LD_VAR 0 21
64077: PUSH
64078: LD_VAR 0 22
64082: PUSH
64083: EMPTY
64084: LIST
64085: LIST
64086: LIST
64087: LIST
64088: LIST
64089: LIST
64090: PUSH
64091: LD_VAR 0 4
64095: PUSH
64096: LD_INT 1
64098: PLUS
64099: ARRAY
64100: ST_TO_ADDR
64101: GO 64168
64103: LD_INT 3
64105: DOUBLE
64106: EQUAL
64107: IFTRUE 64111
64109: GO 64167
64111: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
64112: LD_ADDR_VAR 0 9
64116: PUSH
64117: LD_VAR 0 23
64121: PUSH
64122: LD_VAR 0 24
64126: PUSH
64127: LD_VAR 0 25
64131: PUSH
64132: LD_VAR 0 26
64136: PUSH
64137: LD_VAR 0 27
64141: PUSH
64142: LD_VAR 0 28
64146: PUSH
64147: EMPTY
64148: LIST
64149: LIST
64150: LIST
64151: LIST
64152: LIST
64153: LIST
64154: PUSH
64155: LD_VAR 0 4
64159: PUSH
64160: LD_INT 1
64162: PLUS
64163: ARRAY
64164: ST_TO_ADDR
64165: GO 64168
64167: POP
64168: GO 64723
64170: LD_INT 2
64172: DOUBLE
64173: EQUAL
64174: IFTRUE 64184
64176: LD_INT 3
64178: DOUBLE
64179: EQUAL
64180: IFTRUE 64184
64182: GO 64240
64184: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
64185: LD_ADDR_VAR 0 9
64189: PUSH
64190: LD_VAR 0 29
64194: PUSH
64195: LD_VAR 0 30
64199: PUSH
64200: LD_VAR 0 31
64204: PUSH
64205: LD_VAR 0 32
64209: PUSH
64210: LD_VAR 0 33
64214: PUSH
64215: LD_VAR 0 34
64219: PUSH
64220: EMPTY
64221: LIST
64222: LIST
64223: LIST
64224: LIST
64225: LIST
64226: LIST
64227: PUSH
64228: LD_VAR 0 4
64232: PUSH
64233: LD_INT 1
64235: PLUS
64236: ARRAY
64237: ST_TO_ADDR
64238: GO 64723
64240: LD_INT 16
64242: DOUBLE
64243: EQUAL
64244: IFTRUE 64302
64246: LD_INT 17
64248: DOUBLE
64249: EQUAL
64250: IFTRUE 64302
64252: LD_INT 18
64254: DOUBLE
64255: EQUAL
64256: IFTRUE 64302
64258: LD_INT 19
64260: DOUBLE
64261: EQUAL
64262: IFTRUE 64302
64264: LD_INT 22
64266: DOUBLE
64267: EQUAL
64268: IFTRUE 64302
64270: LD_INT 20
64272: DOUBLE
64273: EQUAL
64274: IFTRUE 64302
64276: LD_INT 21
64278: DOUBLE
64279: EQUAL
64280: IFTRUE 64302
64282: LD_INT 23
64284: DOUBLE
64285: EQUAL
64286: IFTRUE 64302
64288: LD_INT 24
64290: DOUBLE
64291: EQUAL
64292: IFTRUE 64302
64294: LD_INT 25
64296: DOUBLE
64297: EQUAL
64298: IFTRUE 64302
64300: GO 64358
64302: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
64303: LD_ADDR_VAR 0 9
64307: PUSH
64308: LD_VAR 0 35
64312: PUSH
64313: LD_VAR 0 36
64317: PUSH
64318: LD_VAR 0 37
64322: PUSH
64323: LD_VAR 0 38
64327: PUSH
64328: LD_VAR 0 39
64332: PUSH
64333: LD_VAR 0 40
64337: PUSH
64338: EMPTY
64339: LIST
64340: LIST
64341: LIST
64342: LIST
64343: LIST
64344: LIST
64345: PUSH
64346: LD_VAR 0 4
64350: PUSH
64351: LD_INT 1
64353: PLUS
64354: ARRAY
64355: ST_TO_ADDR
64356: GO 64723
64358: LD_INT 6
64360: DOUBLE
64361: EQUAL
64362: IFTRUE 64414
64364: LD_INT 7
64366: DOUBLE
64367: EQUAL
64368: IFTRUE 64414
64370: LD_INT 8
64372: DOUBLE
64373: EQUAL
64374: IFTRUE 64414
64376: LD_INT 13
64378: DOUBLE
64379: EQUAL
64380: IFTRUE 64414
64382: LD_INT 12
64384: DOUBLE
64385: EQUAL
64386: IFTRUE 64414
64388: LD_INT 15
64390: DOUBLE
64391: EQUAL
64392: IFTRUE 64414
64394: LD_INT 11
64396: DOUBLE
64397: EQUAL
64398: IFTRUE 64414
64400: LD_INT 14
64402: DOUBLE
64403: EQUAL
64404: IFTRUE 64414
64406: LD_INT 10
64408: DOUBLE
64409: EQUAL
64410: IFTRUE 64414
64412: GO 64470
64414: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
64415: LD_ADDR_VAR 0 9
64419: PUSH
64420: LD_VAR 0 41
64424: PUSH
64425: LD_VAR 0 42
64429: PUSH
64430: LD_VAR 0 43
64434: PUSH
64435: LD_VAR 0 44
64439: PUSH
64440: LD_VAR 0 45
64444: PUSH
64445: LD_VAR 0 46
64449: PUSH
64450: EMPTY
64451: LIST
64452: LIST
64453: LIST
64454: LIST
64455: LIST
64456: LIST
64457: PUSH
64458: LD_VAR 0 4
64462: PUSH
64463: LD_INT 1
64465: PLUS
64466: ARRAY
64467: ST_TO_ADDR
64468: GO 64723
64470: LD_INT 36
64472: DOUBLE
64473: EQUAL
64474: IFTRUE 64478
64476: GO 64534
64478: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
64479: LD_ADDR_VAR 0 9
64483: PUSH
64484: LD_VAR 0 47
64488: PUSH
64489: LD_VAR 0 48
64493: PUSH
64494: LD_VAR 0 49
64498: PUSH
64499: LD_VAR 0 50
64503: PUSH
64504: LD_VAR 0 51
64508: PUSH
64509: LD_VAR 0 52
64513: PUSH
64514: EMPTY
64515: LIST
64516: LIST
64517: LIST
64518: LIST
64519: LIST
64520: LIST
64521: PUSH
64522: LD_VAR 0 4
64526: PUSH
64527: LD_INT 1
64529: PLUS
64530: ARRAY
64531: ST_TO_ADDR
64532: GO 64723
64534: LD_INT 4
64536: DOUBLE
64537: EQUAL
64538: IFTRUE 64560
64540: LD_INT 5
64542: DOUBLE
64543: EQUAL
64544: IFTRUE 64560
64546: LD_INT 34
64548: DOUBLE
64549: EQUAL
64550: IFTRUE 64560
64552: LD_INT 37
64554: DOUBLE
64555: EQUAL
64556: IFTRUE 64560
64558: GO 64616
64560: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
64561: LD_ADDR_VAR 0 9
64565: PUSH
64566: LD_VAR 0 53
64570: PUSH
64571: LD_VAR 0 54
64575: PUSH
64576: LD_VAR 0 55
64580: PUSH
64581: LD_VAR 0 56
64585: PUSH
64586: LD_VAR 0 57
64590: PUSH
64591: LD_VAR 0 58
64595: PUSH
64596: EMPTY
64597: LIST
64598: LIST
64599: LIST
64600: LIST
64601: LIST
64602: LIST
64603: PUSH
64604: LD_VAR 0 4
64608: PUSH
64609: LD_INT 1
64611: PLUS
64612: ARRAY
64613: ST_TO_ADDR
64614: GO 64723
64616: LD_INT 31
64618: DOUBLE
64619: EQUAL
64620: IFTRUE 64666
64622: LD_INT 32
64624: DOUBLE
64625: EQUAL
64626: IFTRUE 64666
64628: LD_INT 33
64630: DOUBLE
64631: EQUAL
64632: IFTRUE 64666
64634: LD_INT 27
64636: DOUBLE
64637: EQUAL
64638: IFTRUE 64666
64640: LD_INT 26
64642: DOUBLE
64643: EQUAL
64644: IFTRUE 64666
64646: LD_INT 28
64648: DOUBLE
64649: EQUAL
64650: IFTRUE 64666
64652: LD_INT 29
64654: DOUBLE
64655: EQUAL
64656: IFTRUE 64666
64658: LD_INT 30
64660: DOUBLE
64661: EQUAL
64662: IFTRUE 64666
64664: GO 64722
64666: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
64667: LD_ADDR_VAR 0 9
64671: PUSH
64672: LD_VAR 0 59
64676: PUSH
64677: LD_VAR 0 60
64681: PUSH
64682: LD_VAR 0 61
64686: PUSH
64687: LD_VAR 0 62
64691: PUSH
64692: LD_VAR 0 63
64696: PUSH
64697: LD_VAR 0 64
64701: PUSH
64702: EMPTY
64703: LIST
64704: LIST
64705: LIST
64706: LIST
64707: LIST
64708: LIST
64709: PUSH
64710: LD_VAR 0 4
64714: PUSH
64715: LD_INT 1
64717: PLUS
64718: ARRAY
64719: ST_TO_ADDR
64720: GO 64723
64722: POP
// temp_list2 = [ ] ;
64723: LD_ADDR_VAR 0 10
64727: PUSH
64728: EMPTY
64729: ST_TO_ADDR
// for i in temp_list do
64730: LD_ADDR_VAR 0 8
64734: PUSH
64735: LD_VAR 0 9
64739: PUSH
64740: FOR_IN
64741: IFFALSE 64793
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
64743: LD_ADDR_VAR 0 10
64747: PUSH
64748: LD_VAR 0 10
64752: PUSH
64753: LD_VAR 0 8
64757: PUSH
64758: LD_INT 1
64760: ARRAY
64761: PUSH
64762: LD_VAR 0 2
64766: PLUS
64767: PUSH
64768: LD_VAR 0 8
64772: PUSH
64773: LD_INT 2
64775: ARRAY
64776: PUSH
64777: LD_VAR 0 3
64781: PLUS
64782: PUSH
64783: EMPTY
64784: LIST
64785: LIST
64786: PUSH
64787: EMPTY
64788: LIST
64789: ADD
64790: ST_TO_ADDR
64791: GO 64740
64793: POP
64794: POP
// result = temp_list2 ;
64795: LD_ADDR_VAR 0 7
64799: PUSH
64800: LD_VAR 0 10
64804: ST_TO_ADDR
// end ;
64805: LD_VAR 0 7
64809: RET
// export function EnemyInRange ( unit , dist ) ; begin
64810: LD_INT 0
64812: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
64813: LD_ADDR_VAR 0 3
64817: PUSH
64818: LD_VAR 0 1
64822: PPUSH
64823: CALL_OW 255
64827: PPUSH
64828: LD_VAR 0 1
64832: PPUSH
64833: CALL_OW 250
64837: PPUSH
64838: LD_VAR 0 1
64842: PPUSH
64843: CALL_OW 251
64847: PPUSH
64848: LD_VAR 0 2
64852: PPUSH
64853: CALL 38212 0 4
64857: PUSH
64858: LD_INT 4
64860: ARRAY
64861: ST_TO_ADDR
// end ;
64862: LD_VAR 0 3
64866: RET
// export function PlayerSeeMe ( unit ) ; begin
64867: LD_INT 0
64869: PPUSH
// result := See ( your_side , unit ) ;
64870: LD_ADDR_VAR 0 2
64874: PUSH
64875: LD_OWVAR 2
64879: PPUSH
64880: LD_VAR 0 1
64884: PPUSH
64885: CALL_OW 292
64889: ST_TO_ADDR
// end ;
64890: LD_VAR 0 2
64894: RET
// export function ReverseDir ( unit ) ; begin
64895: LD_INT 0
64897: PPUSH
// if not unit then
64898: LD_VAR 0 1
64902: NOT
64903: IFFALSE 64907
// exit ;
64905: GO 64930
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
64907: LD_ADDR_VAR 0 2
64911: PUSH
64912: LD_VAR 0 1
64916: PPUSH
64917: CALL_OW 254
64921: PUSH
64922: LD_INT 3
64924: PLUS
64925: PUSH
64926: LD_INT 6
64928: MOD
64929: ST_TO_ADDR
// end ;
64930: LD_VAR 0 2
64934: RET
// export function ReverseArray ( array ) ; var i ; begin
64935: LD_INT 0
64937: PPUSH
64938: PPUSH
// if not array then
64939: LD_VAR 0 1
64943: NOT
64944: IFFALSE 64948
// exit ;
64946: GO 65003
// result := [ ] ;
64948: LD_ADDR_VAR 0 2
64952: PUSH
64953: EMPTY
64954: ST_TO_ADDR
// for i := array downto 1 do
64955: LD_ADDR_VAR 0 3
64959: PUSH
64960: DOUBLE
64961: LD_VAR 0 1
64965: INC
64966: ST_TO_ADDR
64967: LD_INT 1
64969: PUSH
64970: FOR_DOWNTO
64971: IFFALSE 65001
// result := Join ( result , array [ i ] ) ;
64973: LD_ADDR_VAR 0 2
64977: PUSH
64978: LD_VAR 0 2
64982: PPUSH
64983: LD_VAR 0 1
64987: PUSH
64988: LD_VAR 0 3
64992: ARRAY
64993: PPUSH
64994: CALL 69628 0 2
64998: ST_TO_ADDR
64999: GO 64970
65001: POP
65002: POP
// end ;
65003: LD_VAR 0 2
65007: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
65008: LD_INT 0
65010: PPUSH
65011: PPUSH
65012: PPUSH
65013: PPUSH
65014: PPUSH
65015: PPUSH
// if not unit or not hexes then
65016: LD_VAR 0 1
65020: NOT
65021: PUSH
65022: LD_VAR 0 2
65026: NOT
65027: OR
65028: IFFALSE 65032
// exit ;
65030: GO 65155
// dist := 9999 ;
65032: LD_ADDR_VAR 0 5
65036: PUSH
65037: LD_INT 9999
65039: ST_TO_ADDR
// for i = 1 to hexes do
65040: LD_ADDR_VAR 0 4
65044: PUSH
65045: DOUBLE
65046: LD_INT 1
65048: DEC
65049: ST_TO_ADDR
65050: LD_VAR 0 2
65054: PUSH
65055: FOR_TO
65056: IFFALSE 65143
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
65058: LD_ADDR_VAR 0 6
65062: PUSH
65063: LD_VAR 0 1
65067: PPUSH
65068: LD_VAR 0 2
65072: PUSH
65073: LD_VAR 0 4
65077: ARRAY
65078: PUSH
65079: LD_INT 1
65081: ARRAY
65082: PPUSH
65083: LD_VAR 0 2
65087: PUSH
65088: LD_VAR 0 4
65092: ARRAY
65093: PUSH
65094: LD_INT 2
65096: ARRAY
65097: PPUSH
65098: CALL_OW 297
65102: ST_TO_ADDR
// if tdist < dist then
65103: LD_VAR 0 6
65107: PUSH
65108: LD_VAR 0 5
65112: LESS
65113: IFFALSE 65141
// begin hex := hexes [ i ] ;
65115: LD_ADDR_VAR 0 8
65119: PUSH
65120: LD_VAR 0 2
65124: PUSH
65125: LD_VAR 0 4
65129: ARRAY
65130: ST_TO_ADDR
// dist := tdist ;
65131: LD_ADDR_VAR 0 5
65135: PUSH
65136: LD_VAR 0 6
65140: ST_TO_ADDR
// end ; end ;
65141: GO 65055
65143: POP
65144: POP
// result := hex ;
65145: LD_ADDR_VAR 0 3
65149: PUSH
65150: LD_VAR 0 8
65154: ST_TO_ADDR
// end ;
65155: LD_VAR 0 3
65159: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
65160: LD_INT 0
65162: PPUSH
65163: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
65164: LD_VAR 0 1
65168: NOT
65169: PUSH
65170: LD_VAR 0 1
65174: PUSH
65175: LD_INT 21
65177: PUSH
65178: LD_INT 2
65180: PUSH
65181: EMPTY
65182: LIST
65183: LIST
65184: PUSH
65185: LD_INT 23
65187: PUSH
65188: LD_INT 2
65190: PUSH
65191: EMPTY
65192: LIST
65193: LIST
65194: PUSH
65195: EMPTY
65196: LIST
65197: LIST
65198: PPUSH
65199: CALL_OW 69
65203: IN
65204: NOT
65205: OR
65206: IFFALSE 65210
// exit ;
65208: GO 65257
// for i = 1 to 3 do
65210: LD_ADDR_VAR 0 3
65214: PUSH
65215: DOUBLE
65216: LD_INT 1
65218: DEC
65219: ST_TO_ADDR
65220: LD_INT 3
65222: PUSH
65223: FOR_TO
65224: IFFALSE 65255
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
65226: LD_VAR 0 1
65230: PPUSH
65231: CALL_OW 250
65235: PPUSH
65236: LD_VAR 0 1
65240: PPUSH
65241: CALL_OW 251
65245: PPUSH
65246: LD_INT 1
65248: PPUSH
65249: CALL_OW 453
65253: GO 65223
65255: POP
65256: POP
// end ;
65257: LD_VAR 0 2
65261: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
65262: LD_INT 0
65264: PPUSH
65265: PPUSH
65266: PPUSH
65267: PPUSH
65268: PPUSH
65269: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
65270: LD_VAR 0 1
65274: NOT
65275: PUSH
65276: LD_VAR 0 2
65280: NOT
65281: OR
65282: PUSH
65283: LD_VAR 0 1
65287: PPUSH
65288: CALL_OW 314
65292: OR
65293: IFFALSE 65297
// exit ;
65295: GO 65738
// x := GetX ( enemy_unit ) ;
65297: LD_ADDR_VAR 0 7
65301: PUSH
65302: LD_VAR 0 2
65306: PPUSH
65307: CALL_OW 250
65311: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
65312: LD_ADDR_VAR 0 8
65316: PUSH
65317: LD_VAR 0 2
65321: PPUSH
65322: CALL_OW 251
65326: ST_TO_ADDR
// if not x or not y then
65327: LD_VAR 0 7
65331: NOT
65332: PUSH
65333: LD_VAR 0 8
65337: NOT
65338: OR
65339: IFFALSE 65343
// exit ;
65341: GO 65738
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
65343: LD_ADDR_VAR 0 6
65347: PUSH
65348: LD_VAR 0 7
65352: PPUSH
65353: LD_INT 0
65355: PPUSH
65356: LD_INT 4
65358: PPUSH
65359: CALL_OW 272
65363: PUSH
65364: LD_VAR 0 8
65368: PPUSH
65369: LD_INT 0
65371: PPUSH
65372: LD_INT 4
65374: PPUSH
65375: CALL_OW 273
65379: PUSH
65380: EMPTY
65381: LIST
65382: LIST
65383: PUSH
65384: LD_VAR 0 7
65388: PPUSH
65389: LD_INT 1
65391: PPUSH
65392: LD_INT 4
65394: PPUSH
65395: CALL_OW 272
65399: PUSH
65400: LD_VAR 0 8
65404: PPUSH
65405: LD_INT 1
65407: PPUSH
65408: LD_INT 4
65410: PPUSH
65411: CALL_OW 273
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: PUSH
65420: LD_VAR 0 7
65424: PPUSH
65425: LD_INT 2
65427: PPUSH
65428: LD_INT 4
65430: PPUSH
65431: CALL_OW 272
65435: PUSH
65436: LD_VAR 0 8
65440: PPUSH
65441: LD_INT 2
65443: PPUSH
65444: LD_INT 4
65446: PPUSH
65447: CALL_OW 273
65451: PUSH
65452: EMPTY
65453: LIST
65454: LIST
65455: PUSH
65456: LD_VAR 0 7
65460: PPUSH
65461: LD_INT 3
65463: PPUSH
65464: LD_INT 4
65466: PPUSH
65467: CALL_OW 272
65471: PUSH
65472: LD_VAR 0 8
65476: PPUSH
65477: LD_INT 3
65479: PPUSH
65480: LD_INT 4
65482: PPUSH
65483: CALL_OW 273
65487: PUSH
65488: EMPTY
65489: LIST
65490: LIST
65491: PUSH
65492: LD_VAR 0 7
65496: PPUSH
65497: LD_INT 4
65499: PPUSH
65500: LD_INT 4
65502: PPUSH
65503: CALL_OW 272
65507: PUSH
65508: LD_VAR 0 8
65512: PPUSH
65513: LD_INT 4
65515: PPUSH
65516: LD_INT 4
65518: PPUSH
65519: CALL_OW 273
65523: PUSH
65524: EMPTY
65525: LIST
65526: LIST
65527: PUSH
65528: LD_VAR 0 7
65532: PPUSH
65533: LD_INT 5
65535: PPUSH
65536: LD_INT 4
65538: PPUSH
65539: CALL_OW 272
65543: PUSH
65544: LD_VAR 0 8
65548: PPUSH
65549: LD_INT 5
65551: PPUSH
65552: LD_INT 4
65554: PPUSH
65555: CALL_OW 273
65559: PUSH
65560: EMPTY
65561: LIST
65562: LIST
65563: PUSH
65564: EMPTY
65565: LIST
65566: LIST
65567: LIST
65568: LIST
65569: LIST
65570: LIST
65571: ST_TO_ADDR
// for i = tmp downto 1 do
65572: LD_ADDR_VAR 0 4
65576: PUSH
65577: DOUBLE
65578: LD_VAR 0 6
65582: INC
65583: ST_TO_ADDR
65584: LD_INT 1
65586: PUSH
65587: FOR_DOWNTO
65588: IFFALSE 65689
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
65590: LD_VAR 0 6
65594: PUSH
65595: LD_VAR 0 4
65599: ARRAY
65600: PUSH
65601: LD_INT 1
65603: ARRAY
65604: PPUSH
65605: LD_VAR 0 6
65609: PUSH
65610: LD_VAR 0 4
65614: ARRAY
65615: PUSH
65616: LD_INT 2
65618: ARRAY
65619: PPUSH
65620: CALL_OW 488
65624: NOT
65625: PUSH
65626: LD_VAR 0 6
65630: PUSH
65631: LD_VAR 0 4
65635: ARRAY
65636: PUSH
65637: LD_INT 1
65639: ARRAY
65640: PPUSH
65641: LD_VAR 0 6
65645: PUSH
65646: LD_VAR 0 4
65650: ARRAY
65651: PUSH
65652: LD_INT 2
65654: ARRAY
65655: PPUSH
65656: CALL_OW 428
65660: PUSH
65661: LD_INT 0
65663: NONEQUAL
65664: OR
65665: IFFALSE 65687
// tmp := Delete ( tmp , i ) ;
65667: LD_ADDR_VAR 0 6
65671: PUSH
65672: LD_VAR 0 6
65676: PPUSH
65677: LD_VAR 0 4
65681: PPUSH
65682: CALL_OW 3
65686: ST_TO_ADDR
65687: GO 65587
65689: POP
65690: POP
// j := GetClosestHex ( unit , tmp ) ;
65691: LD_ADDR_VAR 0 5
65695: PUSH
65696: LD_VAR 0 1
65700: PPUSH
65701: LD_VAR 0 6
65705: PPUSH
65706: CALL 65008 0 2
65710: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
65711: LD_VAR 0 1
65715: PPUSH
65716: LD_VAR 0 5
65720: PUSH
65721: LD_INT 1
65723: ARRAY
65724: PPUSH
65725: LD_VAR 0 5
65729: PUSH
65730: LD_INT 2
65732: ARRAY
65733: PPUSH
65734: CALL_OW 111
// end ;
65738: LD_VAR 0 3
65742: RET
// export function PrepareApemanSoldier ( ) ; begin
65743: LD_INT 0
65745: PPUSH
// uc_nation := 0 ;
65746: LD_ADDR_OWVAR 21
65750: PUSH
65751: LD_INT 0
65753: ST_TO_ADDR
// hc_sex := sex_male ;
65754: LD_ADDR_OWVAR 27
65758: PUSH
65759: LD_INT 1
65761: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
65762: LD_ADDR_OWVAR 28
65766: PUSH
65767: LD_INT 15
65769: ST_TO_ADDR
// hc_gallery :=  ;
65770: LD_ADDR_OWVAR 33
65774: PUSH
65775: LD_STRING 
65777: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65778: LD_ADDR_OWVAR 31
65782: PUSH
65783: LD_INT 0
65785: PPUSH
65786: LD_INT 3
65788: PPUSH
65789: CALL_OW 12
65793: PUSH
65794: LD_INT 0
65796: PPUSH
65797: LD_INT 3
65799: PPUSH
65800: CALL_OW 12
65804: PUSH
65805: LD_INT 0
65807: PUSH
65808: LD_INT 0
65810: PUSH
65811: EMPTY
65812: LIST
65813: LIST
65814: LIST
65815: LIST
65816: ST_TO_ADDR
// end ;
65817: LD_VAR 0 1
65821: RET
// export function PrepareApemanEngineer ( ) ; begin
65822: LD_INT 0
65824: PPUSH
// uc_nation := 0 ;
65825: LD_ADDR_OWVAR 21
65829: PUSH
65830: LD_INT 0
65832: ST_TO_ADDR
// hc_sex := sex_male ;
65833: LD_ADDR_OWVAR 27
65837: PUSH
65838: LD_INT 1
65840: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
65841: LD_ADDR_OWVAR 28
65845: PUSH
65846: LD_INT 16
65848: ST_TO_ADDR
// hc_gallery :=  ;
65849: LD_ADDR_OWVAR 33
65853: PUSH
65854: LD_STRING 
65856: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65857: LD_ADDR_OWVAR 31
65861: PUSH
65862: LD_INT 0
65864: PPUSH
65865: LD_INT 3
65867: PPUSH
65868: CALL_OW 12
65872: PUSH
65873: LD_INT 0
65875: PPUSH
65876: LD_INT 3
65878: PPUSH
65879: CALL_OW 12
65883: PUSH
65884: LD_INT 0
65886: PUSH
65887: LD_INT 0
65889: PUSH
65890: EMPTY
65891: LIST
65892: LIST
65893: LIST
65894: LIST
65895: ST_TO_ADDR
// end ;
65896: LD_VAR 0 1
65900: RET
// export function PrepareApeman ( agressivity ) ; begin
65901: LD_INT 0
65903: PPUSH
// uc_side := 0 ;
65904: LD_ADDR_OWVAR 20
65908: PUSH
65909: LD_INT 0
65911: ST_TO_ADDR
// uc_nation := 0 ;
65912: LD_ADDR_OWVAR 21
65916: PUSH
65917: LD_INT 0
65919: ST_TO_ADDR
// hc_sex := sex_male ;
65920: LD_ADDR_OWVAR 27
65924: PUSH
65925: LD_INT 1
65927: ST_TO_ADDR
// hc_class := class_apeman ;
65928: LD_ADDR_OWVAR 28
65932: PUSH
65933: LD_INT 12
65935: ST_TO_ADDR
// hc_gallery :=  ;
65936: LD_ADDR_OWVAR 33
65940: PUSH
65941: LD_STRING 
65943: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
65944: LD_ADDR_OWVAR 35
65948: PUSH
65949: LD_VAR 0 1
65953: NEG
65954: PPUSH
65955: LD_VAR 0 1
65959: PPUSH
65960: CALL_OW 12
65964: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
65965: LD_ADDR_OWVAR 31
65969: PUSH
65970: LD_INT 0
65972: PPUSH
65973: LD_INT 3
65975: PPUSH
65976: CALL_OW 12
65980: PUSH
65981: LD_INT 0
65983: PPUSH
65984: LD_INT 3
65986: PPUSH
65987: CALL_OW 12
65991: PUSH
65992: LD_INT 0
65994: PUSH
65995: LD_INT 0
65997: PUSH
65998: EMPTY
65999: LIST
66000: LIST
66001: LIST
66002: LIST
66003: ST_TO_ADDR
// end ;
66004: LD_VAR 0 2
66008: RET
// export function PrepareTiger ( agressivity ) ; begin
66009: LD_INT 0
66011: PPUSH
// uc_side := 0 ;
66012: LD_ADDR_OWVAR 20
66016: PUSH
66017: LD_INT 0
66019: ST_TO_ADDR
// uc_nation := 0 ;
66020: LD_ADDR_OWVAR 21
66024: PUSH
66025: LD_INT 0
66027: ST_TO_ADDR
// hc_class := class_tiger ;
66028: LD_ADDR_OWVAR 28
66032: PUSH
66033: LD_INT 14
66035: ST_TO_ADDR
// hc_gallery :=  ;
66036: LD_ADDR_OWVAR 33
66040: PUSH
66041: LD_STRING 
66043: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
66044: LD_ADDR_OWVAR 35
66048: PUSH
66049: LD_VAR 0 1
66053: NEG
66054: PPUSH
66055: LD_VAR 0 1
66059: PPUSH
66060: CALL_OW 12
66064: ST_TO_ADDR
// end ;
66065: LD_VAR 0 2
66069: RET
// export function PrepareEnchidna ( ) ; begin
66070: LD_INT 0
66072: PPUSH
// uc_side := 0 ;
66073: LD_ADDR_OWVAR 20
66077: PUSH
66078: LD_INT 0
66080: ST_TO_ADDR
// uc_nation := 0 ;
66081: LD_ADDR_OWVAR 21
66085: PUSH
66086: LD_INT 0
66088: ST_TO_ADDR
// hc_class := class_baggie ;
66089: LD_ADDR_OWVAR 28
66093: PUSH
66094: LD_INT 13
66096: ST_TO_ADDR
// hc_gallery :=  ;
66097: LD_ADDR_OWVAR 33
66101: PUSH
66102: LD_STRING 
66104: ST_TO_ADDR
// end ;
66105: LD_VAR 0 1
66109: RET
// export function PrepareFrog ( ) ; begin
66110: LD_INT 0
66112: PPUSH
// uc_side := 0 ;
66113: LD_ADDR_OWVAR 20
66117: PUSH
66118: LD_INT 0
66120: ST_TO_ADDR
// uc_nation := 0 ;
66121: LD_ADDR_OWVAR 21
66125: PUSH
66126: LD_INT 0
66128: ST_TO_ADDR
// hc_class := class_frog ;
66129: LD_ADDR_OWVAR 28
66133: PUSH
66134: LD_INT 19
66136: ST_TO_ADDR
// hc_gallery :=  ;
66137: LD_ADDR_OWVAR 33
66141: PUSH
66142: LD_STRING 
66144: ST_TO_ADDR
// end ;
66145: LD_VAR 0 1
66149: RET
// export function PrepareFish ( ) ; begin
66150: LD_INT 0
66152: PPUSH
// uc_side := 0 ;
66153: LD_ADDR_OWVAR 20
66157: PUSH
66158: LD_INT 0
66160: ST_TO_ADDR
// uc_nation := 0 ;
66161: LD_ADDR_OWVAR 21
66165: PUSH
66166: LD_INT 0
66168: ST_TO_ADDR
// hc_class := class_fish ;
66169: LD_ADDR_OWVAR 28
66173: PUSH
66174: LD_INT 20
66176: ST_TO_ADDR
// hc_gallery :=  ;
66177: LD_ADDR_OWVAR 33
66181: PUSH
66182: LD_STRING 
66184: ST_TO_ADDR
// end ;
66185: LD_VAR 0 1
66189: RET
// export function PrepareBird ( ) ; begin
66190: LD_INT 0
66192: PPUSH
// uc_side := 0 ;
66193: LD_ADDR_OWVAR 20
66197: PUSH
66198: LD_INT 0
66200: ST_TO_ADDR
// uc_nation := 0 ;
66201: LD_ADDR_OWVAR 21
66205: PUSH
66206: LD_INT 0
66208: ST_TO_ADDR
// hc_class := class_phororhacos ;
66209: LD_ADDR_OWVAR 28
66213: PUSH
66214: LD_INT 18
66216: ST_TO_ADDR
// hc_gallery :=  ;
66217: LD_ADDR_OWVAR 33
66221: PUSH
66222: LD_STRING 
66224: ST_TO_ADDR
// end ;
66225: LD_VAR 0 1
66229: RET
// export function PrepareHorse ( ) ; begin
66230: LD_INT 0
66232: PPUSH
// uc_side := 0 ;
66233: LD_ADDR_OWVAR 20
66237: PUSH
66238: LD_INT 0
66240: ST_TO_ADDR
// uc_nation := 0 ;
66241: LD_ADDR_OWVAR 21
66245: PUSH
66246: LD_INT 0
66248: ST_TO_ADDR
// hc_class := class_horse ;
66249: LD_ADDR_OWVAR 28
66253: PUSH
66254: LD_INT 21
66256: ST_TO_ADDR
// hc_gallery :=  ;
66257: LD_ADDR_OWVAR 33
66261: PUSH
66262: LD_STRING 
66264: ST_TO_ADDR
// end ;
66265: LD_VAR 0 1
66269: RET
// export function PrepareMastodont ( ) ; begin
66270: LD_INT 0
66272: PPUSH
// uc_side := 0 ;
66273: LD_ADDR_OWVAR 20
66277: PUSH
66278: LD_INT 0
66280: ST_TO_ADDR
// uc_nation := 0 ;
66281: LD_ADDR_OWVAR 21
66285: PUSH
66286: LD_INT 0
66288: ST_TO_ADDR
// vc_chassis := class_mastodont ;
66289: LD_ADDR_OWVAR 37
66293: PUSH
66294: LD_INT 31
66296: ST_TO_ADDR
// vc_control := control_rider ;
66297: LD_ADDR_OWVAR 38
66301: PUSH
66302: LD_INT 4
66304: ST_TO_ADDR
// end ;
66305: LD_VAR 0 1
66309: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
66310: LD_INT 0
66312: PPUSH
66313: PPUSH
66314: PPUSH
// uc_side = 0 ;
66315: LD_ADDR_OWVAR 20
66319: PUSH
66320: LD_INT 0
66322: ST_TO_ADDR
// uc_nation = 0 ;
66323: LD_ADDR_OWVAR 21
66327: PUSH
66328: LD_INT 0
66330: ST_TO_ADDR
// InitHc_All ( ) ;
66331: CALL_OW 584
// InitVc ;
66335: CALL_OW 20
// if mastodonts then
66339: LD_VAR 0 6
66343: IFFALSE 66410
// for i = 1 to mastodonts do
66345: LD_ADDR_VAR 0 11
66349: PUSH
66350: DOUBLE
66351: LD_INT 1
66353: DEC
66354: ST_TO_ADDR
66355: LD_VAR 0 6
66359: PUSH
66360: FOR_TO
66361: IFFALSE 66408
// begin vc_chassis := 31 ;
66363: LD_ADDR_OWVAR 37
66367: PUSH
66368: LD_INT 31
66370: ST_TO_ADDR
// vc_control := control_rider ;
66371: LD_ADDR_OWVAR 38
66375: PUSH
66376: LD_INT 4
66378: ST_TO_ADDR
// animal := CreateVehicle ;
66379: LD_ADDR_VAR 0 12
66383: PUSH
66384: CALL_OW 45
66388: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66389: LD_VAR 0 12
66393: PPUSH
66394: LD_VAR 0 8
66398: PPUSH
66399: LD_INT 0
66401: PPUSH
66402: CALL 68545 0 3
// end ;
66406: GO 66360
66408: POP
66409: POP
// if horses then
66410: LD_VAR 0 5
66414: IFFALSE 66481
// for i = 1 to horses do
66416: LD_ADDR_VAR 0 11
66420: PUSH
66421: DOUBLE
66422: LD_INT 1
66424: DEC
66425: ST_TO_ADDR
66426: LD_VAR 0 5
66430: PUSH
66431: FOR_TO
66432: IFFALSE 66479
// begin hc_class := 21 ;
66434: LD_ADDR_OWVAR 28
66438: PUSH
66439: LD_INT 21
66441: ST_TO_ADDR
// hc_gallery :=  ;
66442: LD_ADDR_OWVAR 33
66446: PUSH
66447: LD_STRING 
66449: ST_TO_ADDR
// animal := CreateHuman ;
66450: LD_ADDR_VAR 0 12
66454: PUSH
66455: CALL_OW 44
66459: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66460: LD_VAR 0 12
66464: PPUSH
66465: LD_VAR 0 8
66469: PPUSH
66470: LD_INT 0
66472: PPUSH
66473: CALL 68545 0 3
// end ;
66477: GO 66431
66479: POP
66480: POP
// if birds then
66481: LD_VAR 0 1
66485: IFFALSE 66552
// for i = 1 to birds do
66487: LD_ADDR_VAR 0 11
66491: PUSH
66492: DOUBLE
66493: LD_INT 1
66495: DEC
66496: ST_TO_ADDR
66497: LD_VAR 0 1
66501: PUSH
66502: FOR_TO
66503: IFFALSE 66550
// begin hc_class = 18 ;
66505: LD_ADDR_OWVAR 28
66509: PUSH
66510: LD_INT 18
66512: ST_TO_ADDR
// hc_gallery =  ;
66513: LD_ADDR_OWVAR 33
66517: PUSH
66518: LD_STRING 
66520: ST_TO_ADDR
// animal := CreateHuman ;
66521: LD_ADDR_VAR 0 12
66525: PUSH
66526: CALL_OW 44
66530: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66531: LD_VAR 0 12
66535: PPUSH
66536: LD_VAR 0 8
66540: PPUSH
66541: LD_INT 0
66543: PPUSH
66544: CALL 68545 0 3
// end ;
66548: GO 66502
66550: POP
66551: POP
// if tigers then
66552: LD_VAR 0 2
66556: IFFALSE 66640
// for i = 1 to tigers do
66558: LD_ADDR_VAR 0 11
66562: PUSH
66563: DOUBLE
66564: LD_INT 1
66566: DEC
66567: ST_TO_ADDR
66568: LD_VAR 0 2
66572: PUSH
66573: FOR_TO
66574: IFFALSE 66638
// begin hc_class = class_tiger ;
66576: LD_ADDR_OWVAR 28
66580: PUSH
66581: LD_INT 14
66583: ST_TO_ADDR
// hc_gallery =  ;
66584: LD_ADDR_OWVAR 33
66588: PUSH
66589: LD_STRING 
66591: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
66592: LD_ADDR_OWVAR 35
66596: PUSH
66597: LD_INT 7
66599: NEG
66600: PPUSH
66601: LD_INT 7
66603: PPUSH
66604: CALL_OW 12
66608: ST_TO_ADDR
// animal := CreateHuman ;
66609: LD_ADDR_VAR 0 12
66613: PUSH
66614: CALL_OW 44
66618: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66619: LD_VAR 0 12
66623: PPUSH
66624: LD_VAR 0 8
66628: PPUSH
66629: LD_INT 0
66631: PPUSH
66632: CALL 68545 0 3
// end ;
66636: GO 66573
66638: POP
66639: POP
// if apemans then
66640: LD_VAR 0 3
66644: IFFALSE 66767
// for i = 1 to apemans do
66646: LD_ADDR_VAR 0 11
66650: PUSH
66651: DOUBLE
66652: LD_INT 1
66654: DEC
66655: ST_TO_ADDR
66656: LD_VAR 0 3
66660: PUSH
66661: FOR_TO
66662: IFFALSE 66765
// begin hc_class = class_apeman ;
66664: LD_ADDR_OWVAR 28
66668: PUSH
66669: LD_INT 12
66671: ST_TO_ADDR
// hc_gallery =  ;
66672: LD_ADDR_OWVAR 33
66676: PUSH
66677: LD_STRING 
66679: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
66680: LD_ADDR_OWVAR 35
66684: PUSH
66685: LD_INT 2
66687: NEG
66688: PPUSH
66689: LD_INT 2
66691: PPUSH
66692: CALL_OW 12
66696: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
66697: LD_ADDR_OWVAR 31
66701: PUSH
66702: LD_INT 1
66704: PPUSH
66705: LD_INT 3
66707: PPUSH
66708: CALL_OW 12
66712: PUSH
66713: LD_INT 1
66715: PPUSH
66716: LD_INT 3
66718: PPUSH
66719: CALL_OW 12
66723: PUSH
66724: LD_INT 0
66726: PUSH
66727: LD_INT 0
66729: PUSH
66730: EMPTY
66731: LIST
66732: LIST
66733: LIST
66734: LIST
66735: ST_TO_ADDR
// animal := CreateHuman ;
66736: LD_ADDR_VAR 0 12
66740: PUSH
66741: CALL_OW 44
66745: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66746: LD_VAR 0 12
66750: PPUSH
66751: LD_VAR 0 8
66755: PPUSH
66756: LD_INT 0
66758: PPUSH
66759: CALL 68545 0 3
// end ;
66763: GO 66661
66765: POP
66766: POP
// if enchidnas then
66767: LD_VAR 0 4
66771: IFFALSE 66838
// for i = 1 to enchidnas do
66773: LD_ADDR_VAR 0 11
66777: PUSH
66778: DOUBLE
66779: LD_INT 1
66781: DEC
66782: ST_TO_ADDR
66783: LD_VAR 0 4
66787: PUSH
66788: FOR_TO
66789: IFFALSE 66836
// begin hc_class = 13 ;
66791: LD_ADDR_OWVAR 28
66795: PUSH
66796: LD_INT 13
66798: ST_TO_ADDR
// hc_gallery =  ;
66799: LD_ADDR_OWVAR 33
66803: PUSH
66804: LD_STRING 
66806: ST_TO_ADDR
// animal := CreateHuman ;
66807: LD_ADDR_VAR 0 12
66811: PUSH
66812: CALL_OW 44
66816: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66817: LD_VAR 0 12
66821: PPUSH
66822: LD_VAR 0 8
66826: PPUSH
66827: LD_INT 0
66829: PPUSH
66830: CALL 68545 0 3
// end ;
66834: GO 66788
66836: POP
66837: POP
// if fishes then
66838: LD_VAR 0 7
66842: IFFALSE 66909
// for i = 1 to fishes do
66844: LD_ADDR_VAR 0 11
66848: PUSH
66849: DOUBLE
66850: LD_INT 1
66852: DEC
66853: ST_TO_ADDR
66854: LD_VAR 0 7
66858: PUSH
66859: FOR_TO
66860: IFFALSE 66907
// begin hc_class = 20 ;
66862: LD_ADDR_OWVAR 28
66866: PUSH
66867: LD_INT 20
66869: ST_TO_ADDR
// hc_gallery =  ;
66870: LD_ADDR_OWVAR 33
66874: PUSH
66875: LD_STRING 
66877: ST_TO_ADDR
// animal := CreateHuman ;
66878: LD_ADDR_VAR 0 12
66882: PUSH
66883: CALL_OW 44
66887: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
66888: LD_VAR 0 12
66892: PPUSH
66893: LD_VAR 0 9
66897: PPUSH
66898: LD_INT 0
66900: PPUSH
66901: CALL 68545 0 3
// end ;
66905: GO 66859
66907: POP
66908: POP
// end ;
66909: LD_VAR 0 10
66913: RET
// export function WantHeal ( sci , unit ) ; begin
66914: LD_INT 0
66916: PPUSH
// if GetTaskList ( sci ) > 0 then
66917: LD_VAR 0 1
66921: PPUSH
66922: CALL_OW 437
66926: PUSH
66927: LD_INT 0
66929: GREATER
66930: IFFALSE 67000
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
66932: LD_VAR 0 1
66936: PPUSH
66937: CALL_OW 437
66941: PUSH
66942: LD_INT 1
66944: ARRAY
66945: PUSH
66946: LD_INT 1
66948: ARRAY
66949: PUSH
66950: LD_STRING l
66952: EQUAL
66953: PUSH
66954: LD_VAR 0 1
66958: PPUSH
66959: CALL_OW 437
66963: PUSH
66964: LD_INT 1
66966: ARRAY
66967: PUSH
66968: LD_INT 4
66970: ARRAY
66971: PUSH
66972: LD_VAR 0 2
66976: EQUAL
66977: AND
66978: IFFALSE 66990
// result := true else
66980: LD_ADDR_VAR 0 3
66984: PUSH
66985: LD_INT 1
66987: ST_TO_ADDR
66988: GO 66998
// result := false ;
66990: LD_ADDR_VAR 0 3
66994: PUSH
66995: LD_INT 0
66997: ST_TO_ADDR
// end else
66998: GO 67008
// result := false ;
67000: LD_ADDR_VAR 0 3
67004: PUSH
67005: LD_INT 0
67007: ST_TO_ADDR
// end ;
67008: LD_VAR 0 3
67012: RET
// export function HealTarget ( sci ) ; begin
67013: LD_INT 0
67015: PPUSH
// if not sci then
67016: LD_VAR 0 1
67020: NOT
67021: IFFALSE 67025
// exit ;
67023: GO 67090
// result := 0 ;
67025: LD_ADDR_VAR 0 2
67029: PUSH
67030: LD_INT 0
67032: ST_TO_ADDR
// if GetTaskList ( sci ) then
67033: LD_VAR 0 1
67037: PPUSH
67038: CALL_OW 437
67042: IFFALSE 67090
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
67044: LD_VAR 0 1
67048: PPUSH
67049: CALL_OW 437
67053: PUSH
67054: LD_INT 1
67056: ARRAY
67057: PUSH
67058: LD_INT 1
67060: ARRAY
67061: PUSH
67062: LD_STRING l
67064: EQUAL
67065: IFFALSE 67090
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
67067: LD_ADDR_VAR 0 2
67071: PUSH
67072: LD_VAR 0 1
67076: PPUSH
67077: CALL_OW 437
67081: PUSH
67082: LD_INT 1
67084: ARRAY
67085: PUSH
67086: LD_INT 4
67088: ARRAY
67089: ST_TO_ADDR
// end ;
67090: LD_VAR 0 2
67094: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
67095: LD_INT 0
67097: PPUSH
67098: PPUSH
67099: PPUSH
67100: PPUSH
// if not base_units then
67101: LD_VAR 0 1
67105: NOT
67106: IFFALSE 67110
// exit ;
67108: GO 67197
// result := false ;
67110: LD_ADDR_VAR 0 2
67114: PUSH
67115: LD_INT 0
67117: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
67118: LD_ADDR_VAR 0 5
67122: PUSH
67123: LD_VAR 0 1
67127: PPUSH
67128: LD_INT 21
67130: PUSH
67131: LD_INT 3
67133: PUSH
67134: EMPTY
67135: LIST
67136: LIST
67137: PPUSH
67138: CALL_OW 72
67142: ST_TO_ADDR
// if not tmp then
67143: LD_VAR 0 5
67147: NOT
67148: IFFALSE 67152
// exit ;
67150: GO 67197
// for i in tmp do
67152: LD_ADDR_VAR 0 3
67156: PUSH
67157: LD_VAR 0 5
67161: PUSH
67162: FOR_IN
67163: IFFALSE 67195
// begin result := EnemyInRange ( i , 22 ) ;
67165: LD_ADDR_VAR 0 2
67169: PUSH
67170: LD_VAR 0 3
67174: PPUSH
67175: LD_INT 22
67177: PPUSH
67178: CALL 64810 0 2
67182: ST_TO_ADDR
// if result then
67183: LD_VAR 0 2
67187: IFFALSE 67193
// exit ;
67189: POP
67190: POP
67191: GO 67197
// end ;
67193: GO 67162
67195: POP
67196: POP
// end ;
67197: LD_VAR 0 2
67201: RET
// export function FilterByTag ( units , tag ) ; begin
67202: LD_INT 0
67204: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
67205: LD_ADDR_VAR 0 3
67209: PUSH
67210: LD_VAR 0 1
67214: PPUSH
67215: LD_INT 120
67217: PUSH
67218: LD_VAR 0 2
67222: PUSH
67223: EMPTY
67224: LIST
67225: LIST
67226: PPUSH
67227: CALL_OW 72
67231: ST_TO_ADDR
// end ;
67232: LD_VAR 0 3
67236: RET
// export function IsDriver ( un ) ; begin
67237: LD_INT 0
67239: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
67240: LD_ADDR_VAR 0 2
67244: PUSH
67245: LD_VAR 0 1
67249: PUSH
67250: LD_INT 55
67252: PUSH
67253: EMPTY
67254: LIST
67255: PPUSH
67256: CALL_OW 69
67260: IN
67261: ST_TO_ADDR
// end ;
67262: LD_VAR 0 2
67266: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
67267: LD_INT 0
67269: PPUSH
67270: PPUSH
// list := [ ] ;
67271: LD_ADDR_VAR 0 5
67275: PUSH
67276: EMPTY
67277: ST_TO_ADDR
// case d of 0 :
67278: LD_VAR 0 3
67282: PUSH
67283: LD_INT 0
67285: DOUBLE
67286: EQUAL
67287: IFTRUE 67291
67289: GO 67424
67291: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
67292: LD_ADDR_VAR 0 5
67296: PUSH
67297: LD_VAR 0 1
67301: PUSH
67302: LD_INT 4
67304: MINUS
67305: PUSH
67306: LD_VAR 0 2
67310: PUSH
67311: LD_INT 4
67313: MINUS
67314: PUSH
67315: LD_INT 2
67317: PUSH
67318: EMPTY
67319: LIST
67320: LIST
67321: LIST
67322: PUSH
67323: LD_VAR 0 1
67327: PUSH
67328: LD_INT 3
67330: MINUS
67331: PUSH
67332: LD_VAR 0 2
67336: PUSH
67337: LD_INT 1
67339: PUSH
67340: EMPTY
67341: LIST
67342: LIST
67343: LIST
67344: PUSH
67345: LD_VAR 0 1
67349: PUSH
67350: LD_INT 4
67352: PLUS
67353: PUSH
67354: LD_VAR 0 2
67358: PUSH
67359: LD_INT 4
67361: PUSH
67362: EMPTY
67363: LIST
67364: LIST
67365: LIST
67366: PUSH
67367: LD_VAR 0 1
67371: PUSH
67372: LD_INT 3
67374: PLUS
67375: PUSH
67376: LD_VAR 0 2
67380: PUSH
67381: LD_INT 3
67383: PLUS
67384: PUSH
67385: LD_INT 5
67387: PUSH
67388: EMPTY
67389: LIST
67390: LIST
67391: LIST
67392: PUSH
67393: LD_VAR 0 1
67397: PUSH
67398: LD_VAR 0 2
67402: PUSH
67403: LD_INT 4
67405: PLUS
67406: PUSH
67407: LD_INT 0
67409: PUSH
67410: EMPTY
67411: LIST
67412: LIST
67413: LIST
67414: PUSH
67415: EMPTY
67416: LIST
67417: LIST
67418: LIST
67419: LIST
67420: LIST
67421: ST_TO_ADDR
// end ; 1 :
67422: GO 68122
67424: LD_INT 1
67426: DOUBLE
67427: EQUAL
67428: IFTRUE 67432
67430: GO 67565
67432: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
67433: LD_ADDR_VAR 0 5
67437: PUSH
67438: LD_VAR 0 1
67442: PUSH
67443: LD_VAR 0 2
67447: PUSH
67448: LD_INT 4
67450: MINUS
67451: PUSH
67452: LD_INT 3
67454: PUSH
67455: EMPTY
67456: LIST
67457: LIST
67458: LIST
67459: PUSH
67460: LD_VAR 0 1
67464: PUSH
67465: LD_INT 3
67467: MINUS
67468: PUSH
67469: LD_VAR 0 2
67473: PUSH
67474: LD_INT 3
67476: MINUS
67477: PUSH
67478: LD_INT 2
67480: PUSH
67481: EMPTY
67482: LIST
67483: LIST
67484: LIST
67485: PUSH
67486: LD_VAR 0 1
67490: PUSH
67491: LD_INT 4
67493: MINUS
67494: PUSH
67495: LD_VAR 0 2
67499: PUSH
67500: LD_INT 1
67502: PUSH
67503: EMPTY
67504: LIST
67505: LIST
67506: LIST
67507: PUSH
67508: LD_VAR 0 1
67512: PUSH
67513: LD_VAR 0 2
67517: PUSH
67518: LD_INT 3
67520: PLUS
67521: PUSH
67522: LD_INT 0
67524: PUSH
67525: EMPTY
67526: LIST
67527: LIST
67528: LIST
67529: PUSH
67530: LD_VAR 0 1
67534: PUSH
67535: LD_INT 4
67537: PLUS
67538: PUSH
67539: LD_VAR 0 2
67543: PUSH
67544: LD_INT 4
67546: PLUS
67547: PUSH
67548: LD_INT 5
67550: PUSH
67551: EMPTY
67552: LIST
67553: LIST
67554: LIST
67555: PUSH
67556: EMPTY
67557: LIST
67558: LIST
67559: LIST
67560: LIST
67561: LIST
67562: ST_TO_ADDR
// end ; 2 :
67563: GO 68122
67565: LD_INT 2
67567: DOUBLE
67568: EQUAL
67569: IFTRUE 67573
67571: GO 67702
67573: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
67574: LD_ADDR_VAR 0 5
67578: PUSH
67579: LD_VAR 0 1
67583: PUSH
67584: LD_VAR 0 2
67588: PUSH
67589: LD_INT 3
67591: MINUS
67592: PUSH
67593: LD_INT 3
67595: PUSH
67596: EMPTY
67597: LIST
67598: LIST
67599: LIST
67600: PUSH
67601: LD_VAR 0 1
67605: PUSH
67606: LD_INT 4
67608: PLUS
67609: PUSH
67610: LD_VAR 0 2
67614: PUSH
67615: LD_INT 4
67617: PUSH
67618: EMPTY
67619: LIST
67620: LIST
67621: LIST
67622: PUSH
67623: LD_VAR 0 1
67627: PUSH
67628: LD_VAR 0 2
67632: PUSH
67633: LD_INT 4
67635: PLUS
67636: PUSH
67637: LD_INT 0
67639: PUSH
67640: EMPTY
67641: LIST
67642: LIST
67643: LIST
67644: PUSH
67645: LD_VAR 0 1
67649: PUSH
67650: LD_INT 3
67652: MINUS
67653: PUSH
67654: LD_VAR 0 2
67658: PUSH
67659: LD_INT 1
67661: PUSH
67662: EMPTY
67663: LIST
67664: LIST
67665: LIST
67666: PUSH
67667: LD_VAR 0 1
67671: PUSH
67672: LD_INT 4
67674: MINUS
67675: PUSH
67676: LD_VAR 0 2
67680: PUSH
67681: LD_INT 4
67683: MINUS
67684: PUSH
67685: LD_INT 2
67687: PUSH
67688: EMPTY
67689: LIST
67690: LIST
67691: LIST
67692: PUSH
67693: EMPTY
67694: LIST
67695: LIST
67696: LIST
67697: LIST
67698: LIST
67699: ST_TO_ADDR
// end ; 3 :
67700: GO 68122
67702: LD_INT 3
67704: DOUBLE
67705: EQUAL
67706: IFTRUE 67710
67708: GO 67843
67710: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
67711: LD_ADDR_VAR 0 5
67715: PUSH
67716: LD_VAR 0 1
67720: PUSH
67721: LD_INT 3
67723: PLUS
67724: PUSH
67725: LD_VAR 0 2
67729: PUSH
67730: LD_INT 4
67732: PUSH
67733: EMPTY
67734: LIST
67735: LIST
67736: LIST
67737: PUSH
67738: LD_VAR 0 1
67742: PUSH
67743: LD_INT 4
67745: PLUS
67746: PUSH
67747: LD_VAR 0 2
67751: PUSH
67752: LD_INT 4
67754: PLUS
67755: PUSH
67756: LD_INT 5
67758: PUSH
67759: EMPTY
67760: LIST
67761: LIST
67762: LIST
67763: PUSH
67764: LD_VAR 0 1
67768: PUSH
67769: LD_INT 4
67771: MINUS
67772: PUSH
67773: LD_VAR 0 2
67777: PUSH
67778: LD_INT 1
67780: PUSH
67781: EMPTY
67782: LIST
67783: LIST
67784: LIST
67785: PUSH
67786: LD_VAR 0 1
67790: PUSH
67791: LD_VAR 0 2
67795: PUSH
67796: LD_INT 4
67798: MINUS
67799: PUSH
67800: LD_INT 3
67802: PUSH
67803: EMPTY
67804: LIST
67805: LIST
67806: LIST
67807: PUSH
67808: LD_VAR 0 1
67812: PUSH
67813: LD_INT 3
67815: MINUS
67816: PUSH
67817: LD_VAR 0 2
67821: PUSH
67822: LD_INT 3
67824: MINUS
67825: PUSH
67826: LD_INT 2
67828: PUSH
67829: EMPTY
67830: LIST
67831: LIST
67832: LIST
67833: PUSH
67834: EMPTY
67835: LIST
67836: LIST
67837: LIST
67838: LIST
67839: LIST
67840: ST_TO_ADDR
// end ; 4 :
67841: GO 68122
67843: LD_INT 4
67845: DOUBLE
67846: EQUAL
67847: IFTRUE 67851
67849: GO 67984
67851: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
67852: LD_ADDR_VAR 0 5
67856: PUSH
67857: LD_VAR 0 1
67861: PUSH
67862: LD_VAR 0 2
67866: PUSH
67867: LD_INT 4
67869: PLUS
67870: PUSH
67871: LD_INT 0
67873: PUSH
67874: EMPTY
67875: LIST
67876: LIST
67877: LIST
67878: PUSH
67879: LD_VAR 0 1
67883: PUSH
67884: LD_INT 3
67886: PLUS
67887: PUSH
67888: LD_VAR 0 2
67892: PUSH
67893: LD_INT 3
67895: PLUS
67896: PUSH
67897: LD_INT 5
67899: PUSH
67900: EMPTY
67901: LIST
67902: LIST
67903: LIST
67904: PUSH
67905: LD_VAR 0 1
67909: PUSH
67910: LD_INT 4
67912: PLUS
67913: PUSH
67914: LD_VAR 0 2
67918: PUSH
67919: LD_INT 4
67921: PUSH
67922: EMPTY
67923: LIST
67924: LIST
67925: LIST
67926: PUSH
67927: LD_VAR 0 1
67931: PUSH
67932: LD_VAR 0 2
67936: PUSH
67937: LD_INT 3
67939: MINUS
67940: PUSH
67941: LD_INT 3
67943: PUSH
67944: EMPTY
67945: LIST
67946: LIST
67947: LIST
67948: PUSH
67949: LD_VAR 0 1
67953: PUSH
67954: LD_INT 4
67956: MINUS
67957: PUSH
67958: LD_VAR 0 2
67962: PUSH
67963: LD_INT 4
67965: MINUS
67966: PUSH
67967: LD_INT 2
67969: PUSH
67970: EMPTY
67971: LIST
67972: LIST
67973: LIST
67974: PUSH
67975: EMPTY
67976: LIST
67977: LIST
67978: LIST
67979: LIST
67980: LIST
67981: ST_TO_ADDR
// end ; 5 :
67982: GO 68122
67984: LD_INT 5
67986: DOUBLE
67987: EQUAL
67988: IFTRUE 67992
67990: GO 68121
67992: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
67993: LD_ADDR_VAR 0 5
67997: PUSH
67998: LD_VAR 0 1
68002: PUSH
68003: LD_INT 4
68005: MINUS
68006: PUSH
68007: LD_VAR 0 2
68011: PUSH
68012: LD_INT 1
68014: PUSH
68015: EMPTY
68016: LIST
68017: LIST
68018: LIST
68019: PUSH
68020: LD_VAR 0 1
68024: PUSH
68025: LD_VAR 0 2
68029: PUSH
68030: LD_INT 4
68032: MINUS
68033: PUSH
68034: LD_INT 3
68036: PUSH
68037: EMPTY
68038: LIST
68039: LIST
68040: LIST
68041: PUSH
68042: LD_VAR 0 1
68046: PUSH
68047: LD_INT 4
68049: PLUS
68050: PUSH
68051: LD_VAR 0 2
68055: PUSH
68056: LD_INT 4
68058: PLUS
68059: PUSH
68060: LD_INT 5
68062: PUSH
68063: EMPTY
68064: LIST
68065: LIST
68066: LIST
68067: PUSH
68068: LD_VAR 0 1
68072: PUSH
68073: LD_INT 3
68075: PLUS
68076: PUSH
68077: LD_VAR 0 2
68081: PUSH
68082: LD_INT 4
68084: PUSH
68085: EMPTY
68086: LIST
68087: LIST
68088: LIST
68089: PUSH
68090: LD_VAR 0 1
68094: PUSH
68095: LD_VAR 0 2
68099: PUSH
68100: LD_INT 3
68102: PLUS
68103: PUSH
68104: LD_INT 0
68106: PUSH
68107: EMPTY
68108: LIST
68109: LIST
68110: LIST
68111: PUSH
68112: EMPTY
68113: LIST
68114: LIST
68115: LIST
68116: LIST
68117: LIST
68118: ST_TO_ADDR
// end ; end ;
68119: GO 68122
68121: POP
// result := list ;
68122: LD_ADDR_VAR 0 4
68126: PUSH
68127: LD_VAR 0 5
68131: ST_TO_ADDR
// end ;
68132: LD_VAR 0 4
68136: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
68137: LD_INT 0
68139: PPUSH
68140: PPUSH
68141: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
68142: LD_VAR 0 1
68146: NOT
68147: PUSH
68148: LD_VAR 0 2
68152: PUSH
68153: LD_INT 1
68155: PUSH
68156: LD_INT 2
68158: PUSH
68159: LD_INT 3
68161: PUSH
68162: LD_INT 4
68164: PUSH
68165: EMPTY
68166: LIST
68167: LIST
68168: LIST
68169: LIST
68170: IN
68171: NOT
68172: OR
68173: IFFALSE 68177
// exit ;
68175: GO 68269
// tmp := [ ] ;
68177: LD_ADDR_VAR 0 5
68181: PUSH
68182: EMPTY
68183: ST_TO_ADDR
// for i in units do
68184: LD_ADDR_VAR 0 4
68188: PUSH
68189: LD_VAR 0 1
68193: PUSH
68194: FOR_IN
68195: IFFALSE 68238
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
68197: LD_ADDR_VAR 0 5
68201: PUSH
68202: LD_VAR 0 5
68206: PPUSH
68207: LD_VAR 0 5
68211: PUSH
68212: LD_INT 1
68214: PLUS
68215: PPUSH
68216: LD_VAR 0 4
68220: PPUSH
68221: LD_VAR 0 2
68225: PPUSH
68226: CALL_OW 259
68230: PPUSH
68231: CALL_OW 2
68235: ST_TO_ADDR
68236: GO 68194
68238: POP
68239: POP
// if not tmp then
68240: LD_VAR 0 5
68244: NOT
68245: IFFALSE 68249
// exit ;
68247: GO 68269
// result := SortListByListDesc ( units , tmp ) ;
68249: LD_ADDR_VAR 0 3
68253: PUSH
68254: LD_VAR 0 1
68258: PPUSH
68259: LD_VAR 0 5
68263: PPUSH
68264: CALL_OW 77
68268: ST_TO_ADDR
// end ;
68269: LD_VAR 0 3
68273: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
68274: LD_INT 0
68276: PPUSH
68277: PPUSH
68278: PPUSH
// result := false ;
68279: LD_ADDR_VAR 0 3
68283: PUSH
68284: LD_INT 0
68286: ST_TO_ADDR
// x := GetX ( building ) ;
68287: LD_ADDR_VAR 0 4
68291: PUSH
68292: LD_VAR 0 2
68296: PPUSH
68297: CALL_OW 250
68301: ST_TO_ADDR
// y := GetY ( building ) ;
68302: LD_ADDR_VAR 0 5
68306: PUSH
68307: LD_VAR 0 2
68311: PPUSH
68312: CALL_OW 251
68316: ST_TO_ADDR
// if not building or not x or not y then
68317: LD_VAR 0 2
68321: NOT
68322: PUSH
68323: LD_VAR 0 4
68327: NOT
68328: OR
68329: PUSH
68330: LD_VAR 0 5
68334: NOT
68335: OR
68336: IFFALSE 68340
// exit ;
68338: GO 68432
// if GetTaskList ( unit ) then
68340: LD_VAR 0 1
68344: PPUSH
68345: CALL_OW 437
68349: IFFALSE 68432
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68351: LD_STRING e
68353: PUSH
68354: LD_VAR 0 1
68358: PPUSH
68359: CALL_OW 437
68363: PUSH
68364: LD_INT 1
68366: ARRAY
68367: PUSH
68368: LD_INT 1
68370: ARRAY
68371: EQUAL
68372: PUSH
68373: LD_VAR 0 4
68377: PUSH
68378: LD_VAR 0 1
68382: PPUSH
68383: CALL_OW 437
68387: PUSH
68388: LD_INT 1
68390: ARRAY
68391: PUSH
68392: LD_INT 2
68394: ARRAY
68395: EQUAL
68396: AND
68397: PUSH
68398: LD_VAR 0 5
68402: PUSH
68403: LD_VAR 0 1
68407: PPUSH
68408: CALL_OW 437
68412: PUSH
68413: LD_INT 1
68415: ARRAY
68416: PUSH
68417: LD_INT 3
68419: ARRAY
68420: EQUAL
68421: AND
68422: IFFALSE 68432
// result := true end ;
68424: LD_ADDR_VAR 0 3
68428: PUSH
68429: LD_INT 1
68431: ST_TO_ADDR
// end ;
68432: LD_VAR 0 3
68436: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
68437: LD_INT 0
68439: PPUSH
// result := false ;
68440: LD_ADDR_VAR 0 4
68444: PUSH
68445: LD_INT 0
68447: ST_TO_ADDR
// if GetTaskList ( unit ) then
68448: LD_VAR 0 1
68452: PPUSH
68453: CALL_OW 437
68457: IFFALSE 68540
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68459: LD_STRING M
68461: PUSH
68462: LD_VAR 0 1
68466: PPUSH
68467: CALL_OW 437
68471: PUSH
68472: LD_INT 1
68474: ARRAY
68475: PUSH
68476: LD_INT 1
68478: ARRAY
68479: EQUAL
68480: PUSH
68481: LD_VAR 0 2
68485: PUSH
68486: LD_VAR 0 1
68490: PPUSH
68491: CALL_OW 437
68495: PUSH
68496: LD_INT 1
68498: ARRAY
68499: PUSH
68500: LD_INT 2
68502: ARRAY
68503: EQUAL
68504: AND
68505: PUSH
68506: LD_VAR 0 3
68510: PUSH
68511: LD_VAR 0 1
68515: PPUSH
68516: CALL_OW 437
68520: PUSH
68521: LD_INT 1
68523: ARRAY
68524: PUSH
68525: LD_INT 3
68527: ARRAY
68528: EQUAL
68529: AND
68530: IFFALSE 68540
// result := true ;
68532: LD_ADDR_VAR 0 4
68536: PUSH
68537: LD_INT 1
68539: ST_TO_ADDR
// end ; end ;
68540: LD_VAR 0 4
68544: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
68545: LD_INT 0
68547: PPUSH
68548: PPUSH
68549: PPUSH
68550: PPUSH
// if not unit or not area then
68551: LD_VAR 0 1
68555: NOT
68556: PUSH
68557: LD_VAR 0 2
68561: NOT
68562: OR
68563: IFFALSE 68567
// exit ;
68565: GO 68731
// tmp := AreaToList ( area , i ) ;
68567: LD_ADDR_VAR 0 6
68571: PUSH
68572: LD_VAR 0 2
68576: PPUSH
68577: LD_VAR 0 5
68581: PPUSH
68582: CALL_OW 517
68586: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
68587: LD_ADDR_VAR 0 5
68591: PUSH
68592: DOUBLE
68593: LD_INT 1
68595: DEC
68596: ST_TO_ADDR
68597: LD_VAR 0 6
68601: PUSH
68602: LD_INT 1
68604: ARRAY
68605: PUSH
68606: FOR_TO
68607: IFFALSE 68729
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
68609: LD_ADDR_VAR 0 7
68613: PUSH
68614: LD_VAR 0 6
68618: PUSH
68619: LD_INT 1
68621: ARRAY
68622: PUSH
68623: LD_VAR 0 5
68627: ARRAY
68628: PUSH
68629: LD_VAR 0 6
68633: PUSH
68634: LD_INT 2
68636: ARRAY
68637: PUSH
68638: LD_VAR 0 5
68642: ARRAY
68643: PUSH
68644: EMPTY
68645: LIST
68646: LIST
68647: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
68648: LD_VAR 0 7
68652: PUSH
68653: LD_INT 1
68655: ARRAY
68656: PPUSH
68657: LD_VAR 0 7
68661: PUSH
68662: LD_INT 2
68664: ARRAY
68665: PPUSH
68666: CALL_OW 428
68670: PUSH
68671: LD_INT 0
68673: EQUAL
68674: IFFALSE 68727
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
68676: LD_VAR 0 1
68680: PPUSH
68681: LD_VAR 0 7
68685: PUSH
68686: LD_INT 1
68688: ARRAY
68689: PPUSH
68690: LD_VAR 0 7
68694: PUSH
68695: LD_INT 2
68697: ARRAY
68698: PPUSH
68699: LD_VAR 0 3
68703: PPUSH
68704: CALL_OW 48
// result := IsPlaced ( unit ) ;
68708: LD_ADDR_VAR 0 4
68712: PUSH
68713: LD_VAR 0 1
68717: PPUSH
68718: CALL_OW 305
68722: ST_TO_ADDR
// exit ;
68723: POP
68724: POP
68725: GO 68731
// end ; end ;
68727: GO 68606
68729: POP
68730: POP
// end ;
68731: LD_VAR 0 4
68735: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
68736: LD_INT 0
68738: PPUSH
68739: PPUSH
68740: PPUSH
// if not side or side > 8 then
68741: LD_VAR 0 1
68745: NOT
68746: PUSH
68747: LD_VAR 0 1
68751: PUSH
68752: LD_INT 8
68754: GREATER
68755: OR
68756: IFFALSE 68760
// exit ;
68758: GO 68947
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
68760: LD_ADDR_VAR 0 4
68764: PUSH
68765: LD_INT 22
68767: PUSH
68768: LD_VAR 0 1
68772: PUSH
68773: EMPTY
68774: LIST
68775: LIST
68776: PUSH
68777: LD_INT 21
68779: PUSH
68780: LD_INT 3
68782: PUSH
68783: EMPTY
68784: LIST
68785: LIST
68786: PUSH
68787: EMPTY
68788: LIST
68789: LIST
68790: PPUSH
68791: CALL_OW 69
68795: ST_TO_ADDR
// if not tmp then
68796: LD_VAR 0 4
68800: NOT
68801: IFFALSE 68805
// exit ;
68803: GO 68947
// enable_addtolog := true ;
68805: LD_ADDR_OWVAR 81
68809: PUSH
68810: LD_INT 1
68812: ST_TO_ADDR
// AddToLog ( [ ) ;
68813: LD_STRING [
68815: PPUSH
68816: CALL_OW 561
// for i in tmp do
68820: LD_ADDR_VAR 0 3
68824: PUSH
68825: LD_VAR 0 4
68829: PUSH
68830: FOR_IN
68831: IFFALSE 68938
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
68833: LD_STRING [
68835: PUSH
68836: LD_VAR 0 3
68840: PPUSH
68841: CALL_OW 266
68845: STR
68846: PUSH
68847: LD_STRING , 
68849: STR
68850: PUSH
68851: LD_VAR 0 3
68855: PPUSH
68856: CALL_OW 250
68860: STR
68861: PUSH
68862: LD_STRING , 
68864: STR
68865: PUSH
68866: LD_VAR 0 3
68870: PPUSH
68871: CALL_OW 251
68875: STR
68876: PUSH
68877: LD_STRING , 
68879: STR
68880: PUSH
68881: LD_VAR 0 3
68885: PPUSH
68886: CALL_OW 254
68890: STR
68891: PUSH
68892: LD_STRING , 
68894: STR
68895: PUSH
68896: LD_VAR 0 3
68900: PPUSH
68901: LD_INT 1
68903: PPUSH
68904: CALL_OW 268
68908: STR
68909: PUSH
68910: LD_STRING , 
68912: STR
68913: PUSH
68914: LD_VAR 0 3
68918: PPUSH
68919: LD_INT 2
68921: PPUSH
68922: CALL_OW 268
68926: STR
68927: PUSH
68928: LD_STRING ],
68930: STR
68931: PPUSH
68932: CALL_OW 561
// end ;
68936: GO 68830
68938: POP
68939: POP
// AddToLog ( ]; ) ;
68940: LD_STRING ];
68942: PPUSH
68943: CALL_OW 561
// end ;
68947: LD_VAR 0 2
68951: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
68952: LD_INT 0
68954: PPUSH
68955: PPUSH
68956: PPUSH
68957: PPUSH
68958: PPUSH
// if not area or not rate or not max then
68959: LD_VAR 0 1
68963: NOT
68964: PUSH
68965: LD_VAR 0 2
68969: NOT
68970: OR
68971: PUSH
68972: LD_VAR 0 4
68976: NOT
68977: OR
68978: IFFALSE 68982
// exit ;
68980: GO 69171
// while 1 do
68982: LD_INT 1
68984: IFFALSE 69171
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
68986: LD_ADDR_VAR 0 9
68990: PUSH
68991: LD_VAR 0 1
68995: PPUSH
68996: LD_INT 1
68998: PPUSH
68999: CALL_OW 287
69003: PUSH
69004: LD_INT 10
69006: MUL
69007: ST_TO_ADDR
// r := rate / 10 ;
69008: LD_ADDR_VAR 0 7
69012: PUSH
69013: LD_VAR 0 2
69017: PUSH
69018: LD_INT 10
69020: DIVREAL
69021: ST_TO_ADDR
// time := 1 1$00 ;
69022: LD_ADDR_VAR 0 8
69026: PUSH
69027: LD_INT 2100
69029: ST_TO_ADDR
// if amount < min then
69030: LD_VAR 0 9
69034: PUSH
69035: LD_VAR 0 3
69039: LESS
69040: IFFALSE 69058
// r := r * 2 else
69042: LD_ADDR_VAR 0 7
69046: PUSH
69047: LD_VAR 0 7
69051: PUSH
69052: LD_INT 2
69054: MUL
69055: ST_TO_ADDR
69056: GO 69084
// if amount > max then
69058: LD_VAR 0 9
69062: PUSH
69063: LD_VAR 0 4
69067: GREATER
69068: IFFALSE 69084
// r := r / 2 ;
69070: LD_ADDR_VAR 0 7
69074: PUSH
69075: LD_VAR 0 7
69079: PUSH
69080: LD_INT 2
69082: DIVREAL
69083: ST_TO_ADDR
// time := time / r ;
69084: LD_ADDR_VAR 0 8
69088: PUSH
69089: LD_VAR 0 8
69093: PUSH
69094: LD_VAR 0 7
69098: DIVREAL
69099: ST_TO_ADDR
// if time < 0 then
69100: LD_VAR 0 8
69104: PUSH
69105: LD_INT 0
69107: LESS
69108: IFFALSE 69125
// time := time * - 1 ;
69110: LD_ADDR_VAR 0 8
69114: PUSH
69115: LD_VAR 0 8
69119: PUSH
69120: LD_INT 1
69122: NEG
69123: MUL
69124: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
69125: LD_VAR 0 8
69129: PUSH
69130: LD_INT 35
69132: PPUSH
69133: LD_INT 875
69135: PPUSH
69136: CALL_OW 12
69140: PLUS
69141: PPUSH
69142: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
69146: LD_INT 1
69148: PPUSH
69149: LD_INT 5
69151: PPUSH
69152: CALL_OW 12
69156: PPUSH
69157: LD_VAR 0 1
69161: PPUSH
69162: LD_INT 1
69164: PPUSH
69165: CALL_OW 55
// end ;
69169: GO 68982
// end ;
69171: LD_VAR 0 5
69175: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
69176: LD_INT 0
69178: PPUSH
69179: PPUSH
69180: PPUSH
69181: PPUSH
69182: PPUSH
69183: PPUSH
69184: PPUSH
69185: PPUSH
// if not turrets or not factories then
69186: LD_VAR 0 1
69190: NOT
69191: PUSH
69192: LD_VAR 0 2
69196: NOT
69197: OR
69198: IFFALSE 69202
// exit ;
69200: GO 69509
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
69202: LD_ADDR_VAR 0 10
69206: PUSH
69207: LD_INT 5
69209: PUSH
69210: LD_INT 6
69212: PUSH
69213: EMPTY
69214: LIST
69215: LIST
69216: PUSH
69217: LD_INT 2
69219: PUSH
69220: LD_INT 4
69222: PUSH
69223: EMPTY
69224: LIST
69225: LIST
69226: PUSH
69227: LD_INT 3
69229: PUSH
69230: LD_INT 5
69232: PUSH
69233: EMPTY
69234: LIST
69235: LIST
69236: PUSH
69237: EMPTY
69238: LIST
69239: LIST
69240: LIST
69241: PUSH
69242: LD_INT 24
69244: PUSH
69245: LD_INT 25
69247: PUSH
69248: EMPTY
69249: LIST
69250: LIST
69251: PUSH
69252: LD_INT 23
69254: PUSH
69255: LD_INT 27
69257: PUSH
69258: EMPTY
69259: LIST
69260: LIST
69261: PUSH
69262: EMPTY
69263: LIST
69264: LIST
69265: PUSH
69266: LD_INT 42
69268: PUSH
69269: LD_INT 43
69271: PUSH
69272: EMPTY
69273: LIST
69274: LIST
69275: PUSH
69276: LD_INT 44
69278: PUSH
69279: LD_INT 46
69281: PUSH
69282: EMPTY
69283: LIST
69284: LIST
69285: PUSH
69286: LD_INT 45
69288: PUSH
69289: LD_INT 47
69291: PUSH
69292: EMPTY
69293: LIST
69294: LIST
69295: PUSH
69296: EMPTY
69297: LIST
69298: LIST
69299: LIST
69300: PUSH
69301: EMPTY
69302: LIST
69303: LIST
69304: LIST
69305: ST_TO_ADDR
// result := [ ] ;
69306: LD_ADDR_VAR 0 3
69310: PUSH
69311: EMPTY
69312: ST_TO_ADDR
// for i in turrets do
69313: LD_ADDR_VAR 0 4
69317: PUSH
69318: LD_VAR 0 1
69322: PUSH
69323: FOR_IN
69324: IFFALSE 69507
// begin nat := GetNation ( i ) ;
69326: LD_ADDR_VAR 0 7
69330: PUSH
69331: LD_VAR 0 4
69335: PPUSH
69336: CALL_OW 248
69340: ST_TO_ADDR
// weapon := 0 ;
69341: LD_ADDR_VAR 0 8
69345: PUSH
69346: LD_INT 0
69348: ST_TO_ADDR
// if not nat then
69349: LD_VAR 0 7
69353: NOT
69354: IFFALSE 69358
// continue ;
69356: GO 69323
// for j in list [ nat ] do
69358: LD_ADDR_VAR 0 5
69362: PUSH
69363: LD_VAR 0 10
69367: PUSH
69368: LD_VAR 0 7
69372: ARRAY
69373: PUSH
69374: FOR_IN
69375: IFFALSE 69416
// if GetBWeapon ( i ) = j [ 1 ] then
69377: LD_VAR 0 4
69381: PPUSH
69382: CALL_OW 269
69386: PUSH
69387: LD_VAR 0 5
69391: PUSH
69392: LD_INT 1
69394: ARRAY
69395: EQUAL
69396: IFFALSE 69414
// begin weapon := j [ 2 ] ;
69398: LD_ADDR_VAR 0 8
69402: PUSH
69403: LD_VAR 0 5
69407: PUSH
69408: LD_INT 2
69410: ARRAY
69411: ST_TO_ADDR
// break ;
69412: GO 69416
// end ;
69414: GO 69374
69416: POP
69417: POP
// if not weapon then
69418: LD_VAR 0 8
69422: NOT
69423: IFFALSE 69427
// continue ;
69425: GO 69323
// for k in factories do
69427: LD_ADDR_VAR 0 6
69431: PUSH
69432: LD_VAR 0 2
69436: PUSH
69437: FOR_IN
69438: IFFALSE 69503
// begin weapons := AvailableWeaponList ( k ) ;
69440: LD_ADDR_VAR 0 9
69444: PUSH
69445: LD_VAR 0 6
69449: PPUSH
69450: CALL_OW 478
69454: ST_TO_ADDR
// if not weapons then
69455: LD_VAR 0 9
69459: NOT
69460: IFFALSE 69464
// continue ;
69462: GO 69437
// if weapon in weapons then
69464: LD_VAR 0 8
69468: PUSH
69469: LD_VAR 0 9
69473: IN
69474: IFFALSE 69501
// begin result := [ i , weapon ] ;
69476: LD_ADDR_VAR 0 3
69480: PUSH
69481: LD_VAR 0 4
69485: PUSH
69486: LD_VAR 0 8
69490: PUSH
69491: EMPTY
69492: LIST
69493: LIST
69494: ST_TO_ADDR
// exit ;
69495: POP
69496: POP
69497: POP
69498: POP
69499: GO 69509
// end ; end ;
69501: GO 69437
69503: POP
69504: POP
// end ;
69505: GO 69323
69507: POP
69508: POP
// end ;
69509: LD_VAR 0 3
69513: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
69514: LD_INT 0
69516: PPUSH
// if not side or side > 8 then
69517: LD_VAR 0 3
69521: NOT
69522: PUSH
69523: LD_VAR 0 3
69527: PUSH
69528: LD_INT 8
69530: GREATER
69531: OR
69532: IFFALSE 69536
// exit ;
69534: GO 69595
// if not range then
69536: LD_VAR 0 4
69540: NOT
69541: IFFALSE 69552
// range := - 12 ;
69543: LD_ADDR_VAR 0 4
69547: PUSH
69548: LD_INT 12
69550: NEG
69551: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
69552: LD_VAR 0 1
69556: PPUSH
69557: LD_VAR 0 2
69561: PPUSH
69562: LD_VAR 0 3
69566: PPUSH
69567: LD_VAR 0 4
69571: PPUSH
69572: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
69576: LD_VAR 0 1
69580: PPUSH
69581: LD_VAR 0 2
69585: PPUSH
69586: LD_VAR 0 3
69590: PPUSH
69591: CALL_OW 331
// end ;
69595: LD_VAR 0 5
69599: RET
// export function Video ( mode ) ; begin
69600: LD_INT 0
69602: PPUSH
// ingame_video = mode ;
69603: LD_ADDR_OWVAR 52
69607: PUSH
69608: LD_VAR 0 1
69612: ST_TO_ADDR
// interface_hidden = mode ;
69613: LD_ADDR_OWVAR 54
69617: PUSH
69618: LD_VAR 0 1
69622: ST_TO_ADDR
// end ;
69623: LD_VAR 0 2
69627: RET
// export function Join ( array , element ) ; begin
69628: LD_INT 0
69630: PPUSH
// result := Replace ( array , array + 1 , element ) ;
69631: LD_ADDR_VAR 0 3
69635: PUSH
69636: LD_VAR 0 1
69640: PPUSH
69641: LD_VAR 0 1
69645: PUSH
69646: LD_INT 1
69648: PLUS
69649: PPUSH
69650: LD_VAR 0 2
69654: PPUSH
69655: CALL_OW 1
69659: ST_TO_ADDR
// end ;
69660: LD_VAR 0 3
69664: RET
// export function JoinUnion ( array , element ) ; begin
69665: LD_INT 0
69667: PPUSH
// result := array union element ;
69668: LD_ADDR_VAR 0 3
69672: PUSH
69673: LD_VAR 0 1
69677: PUSH
69678: LD_VAR 0 2
69682: UNION
69683: ST_TO_ADDR
// end ;
69684: LD_VAR 0 3
69688: RET
// export function GetBehemoths ( side ) ; begin
69689: LD_INT 0
69691: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
69692: LD_ADDR_VAR 0 2
69696: PUSH
69697: LD_INT 22
69699: PUSH
69700: LD_VAR 0 1
69704: PUSH
69705: EMPTY
69706: LIST
69707: LIST
69708: PUSH
69709: LD_INT 31
69711: PUSH
69712: LD_INT 25
69714: PUSH
69715: EMPTY
69716: LIST
69717: LIST
69718: PUSH
69719: EMPTY
69720: LIST
69721: LIST
69722: PPUSH
69723: CALL_OW 69
69727: ST_TO_ADDR
// end ;
69728: LD_VAR 0 2
69732: RET
// export function Shuffle ( array ) ; var i , index ; begin
69733: LD_INT 0
69735: PPUSH
69736: PPUSH
69737: PPUSH
// result := [ ] ;
69738: LD_ADDR_VAR 0 2
69742: PUSH
69743: EMPTY
69744: ST_TO_ADDR
// if not array then
69745: LD_VAR 0 1
69749: NOT
69750: IFFALSE 69754
// exit ;
69752: GO 69853
// Randomize ;
69754: CALL_OW 10
// for i = array downto 1 do
69758: LD_ADDR_VAR 0 3
69762: PUSH
69763: DOUBLE
69764: LD_VAR 0 1
69768: INC
69769: ST_TO_ADDR
69770: LD_INT 1
69772: PUSH
69773: FOR_DOWNTO
69774: IFFALSE 69851
// begin index := rand ( 1 , array ) ;
69776: LD_ADDR_VAR 0 4
69780: PUSH
69781: LD_INT 1
69783: PPUSH
69784: LD_VAR 0 1
69788: PPUSH
69789: CALL_OW 12
69793: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
69794: LD_ADDR_VAR 0 2
69798: PUSH
69799: LD_VAR 0 2
69803: PPUSH
69804: LD_VAR 0 2
69808: PUSH
69809: LD_INT 1
69811: PLUS
69812: PPUSH
69813: LD_VAR 0 1
69817: PUSH
69818: LD_VAR 0 4
69822: ARRAY
69823: PPUSH
69824: CALL_OW 2
69828: ST_TO_ADDR
// array := Delete ( array , index ) ;
69829: LD_ADDR_VAR 0 1
69833: PUSH
69834: LD_VAR 0 1
69838: PPUSH
69839: LD_VAR 0 4
69843: PPUSH
69844: CALL_OW 3
69848: ST_TO_ADDR
// end ;
69849: GO 69773
69851: POP
69852: POP
// end ;
69853: LD_VAR 0 2
69857: RET
// export function GetBaseMaterials ( base ) ; begin
69858: LD_INT 0
69860: PPUSH
// result := [ 0 , 0 , 0 ] ;
69861: LD_ADDR_VAR 0 2
69865: PUSH
69866: LD_INT 0
69868: PUSH
69869: LD_INT 0
69871: PUSH
69872: LD_INT 0
69874: PUSH
69875: EMPTY
69876: LIST
69877: LIST
69878: LIST
69879: ST_TO_ADDR
// if not base then
69880: LD_VAR 0 1
69884: NOT
69885: IFFALSE 69889
// exit ;
69887: GO 69938
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
69889: LD_ADDR_VAR 0 2
69893: PUSH
69894: LD_VAR 0 1
69898: PPUSH
69899: LD_INT 1
69901: PPUSH
69902: CALL_OW 275
69906: PUSH
69907: LD_VAR 0 1
69911: PPUSH
69912: LD_INT 2
69914: PPUSH
69915: CALL_OW 275
69919: PUSH
69920: LD_VAR 0 1
69924: PPUSH
69925: LD_INT 3
69927: PPUSH
69928: CALL_OW 275
69932: PUSH
69933: EMPTY
69934: LIST
69935: LIST
69936: LIST
69937: ST_TO_ADDR
// end ;
69938: LD_VAR 0 2
69942: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
69943: LD_INT 0
69945: PPUSH
69946: PPUSH
// result := array ;
69947: LD_ADDR_VAR 0 3
69951: PUSH
69952: LD_VAR 0 1
69956: ST_TO_ADDR
// if size >= result then
69957: LD_VAR 0 2
69961: PUSH
69962: LD_VAR 0 3
69966: GREATEREQUAL
69967: IFFALSE 69971
// exit ;
69969: GO 70021
// if size then
69971: LD_VAR 0 2
69975: IFFALSE 70021
// for i := array downto size do
69977: LD_ADDR_VAR 0 4
69981: PUSH
69982: DOUBLE
69983: LD_VAR 0 1
69987: INC
69988: ST_TO_ADDR
69989: LD_VAR 0 2
69993: PUSH
69994: FOR_DOWNTO
69995: IFFALSE 70019
// result := Delete ( result , result ) ;
69997: LD_ADDR_VAR 0 3
70001: PUSH
70002: LD_VAR 0 3
70006: PPUSH
70007: LD_VAR 0 3
70011: PPUSH
70012: CALL_OW 3
70016: ST_TO_ADDR
70017: GO 69994
70019: POP
70020: POP
// end ;
70021: LD_VAR 0 3
70025: RET
// export function ComExit ( unit ) ; var tmp ; begin
70026: LD_INT 0
70028: PPUSH
70029: PPUSH
// if not IsInUnit ( unit ) then
70030: LD_VAR 0 1
70034: PPUSH
70035: CALL_OW 310
70039: NOT
70040: IFFALSE 70044
// exit ;
70042: GO 70104
// tmp := IsInUnit ( unit ) ;
70044: LD_ADDR_VAR 0 3
70048: PUSH
70049: LD_VAR 0 1
70053: PPUSH
70054: CALL_OW 310
70058: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
70059: LD_VAR 0 3
70063: PPUSH
70064: CALL_OW 247
70068: PUSH
70069: LD_INT 2
70071: EQUAL
70072: IFFALSE 70085
// ComExitVehicle ( unit ) else
70074: LD_VAR 0 1
70078: PPUSH
70079: CALL_OW 121
70083: GO 70094
// ComExitBuilding ( unit ) ;
70085: LD_VAR 0 1
70089: PPUSH
70090: CALL_OW 122
// result := tmp ;
70094: LD_ADDR_VAR 0 2
70098: PUSH
70099: LD_VAR 0 3
70103: ST_TO_ADDR
// end ;
70104: LD_VAR 0 2
70108: RET
// export function ComExitAll ( units ) ; var i ; begin
70109: LD_INT 0
70111: PPUSH
70112: PPUSH
// if not units then
70113: LD_VAR 0 1
70117: NOT
70118: IFFALSE 70122
// exit ;
70120: GO 70148
// for i in units do
70122: LD_ADDR_VAR 0 3
70126: PUSH
70127: LD_VAR 0 1
70131: PUSH
70132: FOR_IN
70133: IFFALSE 70146
// ComExit ( i ) ;
70135: LD_VAR 0 3
70139: PPUSH
70140: CALL 70026 0 1
70144: GO 70132
70146: POP
70147: POP
// end ;
70148: LD_VAR 0 2
70152: RET
// export function ResetHc ; begin
70153: LD_INT 0
70155: PPUSH
// InitHc ;
70156: CALL_OW 19
// hc_importance := 0 ;
70160: LD_ADDR_OWVAR 32
70164: PUSH
70165: LD_INT 0
70167: ST_TO_ADDR
// end ;
70168: LD_VAR 0 1
70172: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
70173: LD_INT 0
70175: PPUSH
70176: PPUSH
70177: PPUSH
// _x := ( x1 + x2 ) div 2 ;
70178: LD_ADDR_VAR 0 6
70182: PUSH
70183: LD_VAR 0 1
70187: PUSH
70188: LD_VAR 0 3
70192: PLUS
70193: PUSH
70194: LD_INT 2
70196: DIV
70197: ST_TO_ADDR
// if _x < 0 then
70198: LD_VAR 0 6
70202: PUSH
70203: LD_INT 0
70205: LESS
70206: IFFALSE 70223
// _x := _x * - 1 ;
70208: LD_ADDR_VAR 0 6
70212: PUSH
70213: LD_VAR 0 6
70217: PUSH
70218: LD_INT 1
70220: NEG
70221: MUL
70222: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
70223: LD_ADDR_VAR 0 7
70227: PUSH
70228: LD_VAR 0 2
70232: PUSH
70233: LD_VAR 0 4
70237: PLUS
70238: PUSH
70239: LD_INT 2
70241: DIV
70242: ST_TO_ADDR
// if _y < 0 then
70243: LD_VAR 0 7
70247: PUSH
70248: LD_INT 0
70250: LESS
70251: IFFALSE 70268
// _y := _y * - 1 ;
70253: LD_ADDR_VAR 0 7
70257: PUSH
70258: LD_VAR 0 7
70262: PUSH
70263: LD_INT 1
70265: NEG
70266: MUL
70267: ST_TO_ADDR
// result := [ _x , _y ] ;
70268: LD_ADDR_VAR 0 5
70272: PUSH
70273: LD_VAR 0 6
70277: PUSH
70278: LD_VAR 0 7
70282: PUSH
70283: EMPTY
70284: LIST
70285: LIST
70286: ST_TO_ADDR
// end ;
70287: LD_VAR 0 5
70291: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
70292: LD_INT 0
70294: PPUSH
70295: PPUSH
70296: PPUSH
70297: PPUSH
// task := GetTaskList ( unit ) ;
70298: LD_ADDR_VAR 0 7
70302: PUSH
70303: LD_VAR 0 1
70307: PPUSH
70308: CALL_OW 437
70312: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
70313: LD_VAR 0 7
70317: NOT
70318: PUSH
70319: LD_VAR 0 1
70323: PPUSH
70324: LD_VAR 0 2
70328: PPUSH
70329: CALL_OW 308
70333: NOT
70334: AND
70335: IFFALSE 70339
// exit ;
70337: GO 70457
// if IsInArea ( unit , area ) then
70339: LD_VAR 0 1
70343: PPUSH
70344: LD_VAR 0 2
70348: PPUSH
70349: CALL_OW 308
70353: IFFALSE 70371
// begin ComMoveToArea ( unit , goAway ) ;
70355: LD_VAR 0 1
70359: PPUSH
70360: LD_VAR 0 3
70364: PPUSH
70365: CALL_OW 113
// exit ;
70369: GO 70457
// end ; if task [ 1 ] [ 1 ] <> M then
70371: LD_VAR 0 7
70375: PUSH
70376: LD_INT 1
70378: ARRAY
70379: PUSH
70380: LD_INT 1
70382: ARRAY
70383: PUSH
70384: LD_STRING M
70386: NONEQUAL
70387: IFFALSE 70391
// exit ;
70389: GO 70457
// x := task [ 1 ] [ 2 ] ;
70391: LD_ADDR_VAR 0 5
70395: PUSH
70396: LD_VAR 0 7
70400: PUSH
70401: LD_INT 1
70403: ARRAY
70404: PUSH
70405: LD_INT 2
70407: ARRAY
70408: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
70409: LD_ADDR_VAR 0 6
70413: PUSH
70414: LD_VAR 0 7
70418: PUSH
70419: LD_INT 1
70421: ARRAY
70422: PUSH
70423: LD_INT 3
70425: ARRAY
70426: ST_TO_ADDR
// if InArea ( x , y , area ) then
70427: LD_VAR 0 5
70431: PPUSH
70432: LD_VAR 0 6
70436: PPUSH
70437: LD_VAR 0 2
70441: PPUSH
70442: CALL_OW 309
70446: IFFALSE 70457
// ComStop ( unit ) ;
70448: LD_VAR 0 1
70452: PPUSH
70453: CALL_OW 141
// end ;
70457: LD_VAR 0 4
70461: RET
// export function Abs ( value ) ; begin
70462: LD_INT 0
70464: PPUSH
// result := value ;
70465: LD_ADDR_VAR 0 2
70469: PUSH
70470: LD_VAR 0 1
70474: ST_TO_ADDR
// if value < 0 then
70475: LD_VAR 0 1
70479: PUSH
70480: LD_INT 0
70482: LESS
70483: IFFALSE 70500
// result := value * - 1 ;
70485: LD_ADDR_VAR 0 2
70489: PUSH
70490: LD_VAR 0 1
70494: PUSH
70495: LD_INT 1
70497: NEG
70498: MUL
70499: ST_TO_ADDR
// end ;
70500: LD_VAR 0 2
70504: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
70505: LD_INT 0
70507: PPUSH
70508: PPUSH
70509: PPUSH
70510: PPUSH
70511: PPUSH
70512: PPUSH
70513: PPUSH
70514: PPUSH
// if not unit or not building then
70515: LD_VAR 0 1
70519: NOT
70520: PUSH
70521: LD_VAR 0 2
70525: NOT
70526: OR
70527: IFFALSE 70531
// exit ;
70529: GO 70757
// x := GetX ( building ) ;
70531: LD_ADDR_VAR 0 4
70535: PUSH
70536: LD_VAR 0 2
70540: PPUSH
70541: CALL_OW 250
70545: ST_TO_ADDR
// y := GetY ( building ) ;
70546: LD_ADDR_VAR 0 6
70550: PUSH
70551: LD_VAR 0 2
70555: PPUSH
70556: CALL_OW 251
70560: ST_TO_ADDR
// d := GetDir ( building ) ;
70561: LD_ADDR_VAR 0 8
70565: PUSH
70566: LD_VAR 0 2
70570: PPUSH
70571: CALL_OW 254
70575: ST_TO_ADDR
// r := 4 ;
70576: LD_ADDR_VAR 0 9
70580: PUSH
70581: LD_INT 4
70583: ST_TO_ADDR
// for i := 1 to 5 do
70584: LD_ADDR_VAR 0 10
70588: PUSH
70589: DOUBLE
70590: LD_INT 1
70592: DEC
70593: ST_TO_ADDR
70594: LD_INT 5
70596: PUSH
70597: FOR_TO
70598: IFFALSE 70755
// begin _x := ShiftX ( x , d , r + i ) ;
70600: LD_ADDR_VAR 0 5
70604: PUSH
70605: LD_VAR 0 4
70609: PPUSH
70610: LD_VAR 0 8
70614: PPUSH
70615: LD_VAR 0 9
70619: PUSH
70620: LD_VAR 0 10
70624: PLUS
70625: PPUSH
70626: CALL_OW 272
70630: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
70631: LD_ADDR_VAR 0 7
70635: PUSH
70636: LD_VAR 0 6
70640: PPUSH
70641: LD_VAR 0 8
70645: PPUSH
70646: LD_VAR 0 9
70650: PUSH
70651: LD_VAR 0 10
70655: PLUS
70656: PPUSH
70657: CALL_OW 273
70661: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
70662: LD_VAR 0 5
70666: PPUSH
70667: LD_VAR 0 7
70671: PPUSH
70672: CALL_OW 488
70676: PUSH
70677: LD_VAR 0 5
70681: PPUSH
70682: LD_VAR 0 7
70686: PPUSH
70687: CALL_OW 428
70691: PPUSH
70692: CALL_OW 247
70696: PUSH
70697: LD_INT 3
70699: PUSH
70700: LD_INT 2
70702: PUSH
70703: EMPTY
70704: LIST
70705: LIST
70706: IN
70707: NOT
70708: AND
70709: IFFALSE 70753
// begin ComMoveXY ( unit , _x , _y ) ;
70711: LD_VAR 0 1
70715: PPUSH
70716: LD_VAR 0 5
70720: PPUSH
70721: LD_VAR 0 7
70725: PPUSH
70726: CALL_OW 111
// result := [ _x , _y ] ;
70730: LD_ADDR_VAR 0 3
70734: PUSH
70735: LD_VAR 0 5
70739: PUSH
70740: LD_VAR 0 7
70744: PUSH
70745: EMPTY
70746: LIST
70747: LIST
70748: ST_TO_ADDR
// exit ;
70749: POP
70750: POP
70751: GO 70757
// end ; end ;
70753: GO 70597
70755: POP
70756: POP
// end ;
70757: LD_VAR 0 3
70761: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
70762: LD_INT 0
70764: PPUSH
70765: PPUSH
70766: PPUSH
// result := 0 ;
70767: LD_ADDR_VAR 0 3
70771: PUSH
70772: LD_INT 0
70774: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
70775: LD_VAR 0 1
70779: PUSH
70780: LD_INT 0
70782: LESS
70783: PUSH
70784: LD_VAR 0 1
70788: PUSH
70789: LD_INT 8
70791: GREATER
70792: OR
70793: PUSH
70794: LD_VAR 0 2
70798: PUSH
70799: LD_INT 0
70801: LESS
70802: OR
70803: PUSH
70804: LD_VAR 0 2
70808: PUSH
70809: LD_INT 8
70811: GREATER
70812: OR
70813: IFFALSE 70817
// exit ;
70815: GO 70892
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
70817: LD_ADDR_VAR 0 4
70821: PUSH
70822: LD_INT 22
70824: PUSH
70825: LD_VAR 0 2
70829: PUSH
70830: EMPTY
70831: LIST
70832: LIST
70833: PPUSH
70834: CALL_OW 69
70838: PUSH
70839: FOR_IN
70840: IFFALSE 70890
// begin un := UnitShoot ( i ) ;
70842: LD_ADDR_VAR 0 5
70846: PUSH
70847: LD_VAR 0 4
70851: PPUSH
70852: CALL_OW 504
70856: ST_TO_ADDR
// if GetSide ( un ) = side1 then
70857: LD_VAR 0 5
70861: PPUSH
70862: CALL_OW 255
70866: PUSH
70867: LD_VAR 0 1
70871: EQUAL
70872: IFFALSE 70888
// begin result := un ;
70874: LD_ADDR_VAR 0 3
70878: PUSH
70879: LD_VAR 0 5
70883: ST_TO_ADDR
// exit ;
70884: POP
70885: POP
70886: GO 70892
// end ; end ;
70888: GO 70839
70890: POP
70891: POP
// end ;
70892: LD_VAR 0 3
70896: RET
// export function GetCargoBay ( units ) ; begin
70897: LD_INT 0
70899: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
70900: LD_ADDR_VAR 0 2
70904: PUSH
70905: LD_VAR 0 1
70909: PPUSH
70910: LD_INT 2
70912: PUSH
70913: LD_INT 34
70915: PUSH
70916: LD_INT 12
70918: PUSH
70919: EMPTY
70920: LIST
70921: LIST
70922: PUSH
70923: LD_INT 34
70925: PUSH
70926: LD_INT 51
70928: PUSH
70929: EMPTY
70930: LIST
70931: LIST
70932: PUSH
70933: LD_INT 34
70935: PUSH
70936: LD_INT 32
70938: PUSH
70939: EMPTY
70940: LIST
70941: LIST
70942: PUSH
70943: LD_INT 34
70945: PUSH
70946: LD_INT 89
70948: PUSH
70949: EMPTY
70950: LIST
70951: LIST
70952: PUSH
70953: EMPTY
70954: LIST
70955: LIST
70956: LIST
70957: LIST
70958: LIST
70959: PPUSH
70960: CALL_OW 72
70964: ST_TO_ADDR
// end ;
70965: LD_VAR 0 2
70969: RET
// export function Negate ( value ) ; begin
70970: LD_INT 0
70972: PPUSH
// result := not value ;
70973: LD_ADDR_VAR 0 2
70977: PUSH
70978: LD_VAR 0 1
70982: NOT
70983: ST_TO_ADDR
// end ;
70984: LD_VAR 0 2
70988: RET
// export function Inc ( value ) ; begin
70989: LD_INT 0
70991: PPUSH
// result := value + 1 ;
70992: LD_ADDR_VAR 0 2
70996: PUSH
70997: LD_VAR 0 1
71001: PUSH
71002: LD_INT 1
71004: PLUS
71005: ST_TO_ADDR
// end ;
71006: LD_VAR 0 2
71010: RET
// export function Dec ( value ) ; begin
71011: LD_INT 0
71013: PPUSH
// result := value - 1 ;
71014: LD_ADDR_VAR 0 2
71018: PUSH
71019: LD_VAR 0 1
71023: PUSH
71024: LD_INT 1
71026: MINUS
71027: ST_TO_ADDR
// end ;
71028: LD_VAR 0 2
71032: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
71033: LD_INT 0
71035: PPUSH
71036: PPUSH
71037: PPUSH
71038: PPUSH
71039: PPUSH
71040: PPUSH
71041: PPUSH
71042: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
71043: LD_VAR 0 1
71047: PPUSH
71048: LD_VAR 0 2
71052: PPUSH
71053: CALL_OW 488
71057: NOT
71058: PUSH
71059: LD_VAR 0 3
71063: PPUSH
71064: LD_VAR 0 4
71068: PPUSH
71069: CALL_OW 488
71073: NOT
71074: OR
71075: IFFALSE 71088
// begin result := - 1 ;
71077: LD_ADDR_VAR 0 5
71081: PUSH
71082: LD_INT 1
71084: NEG
71085: ST_TO_ADDR
// exit ;
71086: GO 71323
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
71088: LD_ADDR_VAR 0 12
71092: PUSH
71093: LD_VAR 0 1
71097: PPUSH
71098: LD_VAR 0 2
71102: PPUSH
71103: LD_VAR 0 3
71107: PPUSH
71108: LD_VAR 0 4
71112: PPUSH
71113: CALL 70173 0 4
71117: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
71118: LD_ADDR_VAR 0 11
71122: PUSH
71123: LD_VAR 0 1
71127: PPUSH
71128: LD_VAR 0 2
71132: PPUSH
71133: LD_VAR 0 12
71137: PUSH
71138: LD_INT 1
71140: ARRAY
71141: PPUSH
71142: LD_VAR 0 12
71146: PUSH
71147: LD_INT 2
71149: ARRAY
71150: PPUSH
71151: CALL_OW 298
71155: ST_TO_ADDR
// distance := 9999 ;
71156: LD_ADDR_VAR 0 10
71160: PUSH
71161: LD_INT 9999
71163: ST_TO_ADDR
// for i := 0 to 5 do
71164: LD_ADDR_VAR 0 6
71168: PUSH
71169: DOUBLE
71170: LD_INT 0
71172: DEC
71173: ST_TO_ADDR
71174: LD_INT 5
71176: PUSH
71177: FOR_TO
71178: IFFALSE 71321
// begin _x := ShiftX ( x1 , i , centerDist ) ;
71180: LD_ADDR_VAR 0 7
71184: PUSH
71185: LD_VAR 0 1
71189: PPUSH
71190: LD_VAR 0 6
71194: PPUSH
71195: LD_VAR 0 11
71199: PPUSH
71200: CALL_OW 272
71204: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
71205: LD_ADDR_VAR 0 8
71209: PUSH
71210: LD_VAR 0 2
71214: PPUSH
71215: LD_VAR 0 6
71219: PPUSH
71220: LD_VAR 0 11
71224: PPUSH
71225: CALL_OW 273
71229: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
71230: LD_VAR 0 7
71234: PPUSH
71235: LD_VAR 0 8
71239: PPUSH
71240: CALL_OW 488
71244: NOT
71245: IFFALSE 71249
// continue ;
71247: GO 71177
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
71249: LD_ADDR_VAR 0 9
71253: PUSH
71254: LD_VAR 0 12
71258: PUSH
71259: LD_INT 1
71261: ARRAY
71262: PPUSH
71263: LD_VAR 0 12
71267: PUSH
71268: LD_INT 2
71270: ARRAY
71271: PPUSH
71272: LD_VAR 0 7
71276: PPUSH
71277: LD_VAR 0 8
71281: PPUSH
71282: CALL_OW 298
71286: ST_TO_ADDR
// if tmp < distance then
71287: LD_VAR 0 9
71291: PUSH
71292: LD_VAR 0 10
71296: LESS
71297: IFFALSE 71319
// begin result := i ;
71299: LD_ADDR_VAR 0 5
71303: PUSH
71304: LD_VAR 0 6
71308: ST_TO_ADDR
// distance := tmp ;
71309: LD_ADDR_VAR 0 10
71313: PUSH
71314: LD_VAR 0 9
71318: ST_TO_ADDR
// end ; end ;
71319: GO 71177
71321: POP
71322: POP
// end ;
71323: LD_VAR 0 5
71327: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71328: LD_INT 0
71330: PPUSH
71331: PPUSH
// if not driver or not IsInUnit ( driver ) then
71332: LD_VAR 0 1
71336: NOT
71337: PUSH
71338: LD_VAR 0 1
71342: PPUSH
71343: CALL_OW 310
71347: NOT
71348: OR
71349: IFFALSE 71353
// exit ;
71351: GO 71443
// vehicle := IsInUnit ( driver ) ;
71353: LD_ADDR_VAR 0 3
71357: PUSH
71358: LD_VAR 0 1
71362: PPUSH
71363: CALL_OW 310
71367: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71368: LD_VAR 0 1
71372: PPUSH
71373: LD_STRING \
71375: PUSH
71376: LD_INT 0
71378: PUSH
71379: LD_INT 0
71381: PUSH
71382: LD_INT 0
71384: PUSH
71385: LD_INT 0
71387: PUSH
71388: LD_INT 0
71390: PUSH
71391: LD_INT 0
71393: PUSH
71394: EMPTY
71395: LIST
71396: LIST
71397: LIST
71398: LIST
71399: LIST
71400: LIST
71401: LIST
71402: PUSH
71403: LD_STRING E
71405: PUSH
71406: LD_INT 0
71408: PUSH
71409: LD_INT 0
71411: PUSH
71412: LD_VAR 0 3
71416: PUSH
71417: LD_INT 0
71419: PUSH
71420: LD_INT 0
71422: PUSH
71423: LD_INT 0
71425: PUSH
71426: EMPTY
71427: LIST
71428: LIST
71429: LIST
71430: LIST
71431: LIST
71432: LIST
71433: LIST
71434: PUSH
71435: EMPTY
71436: LIST
71437: LIST
71438: PPUSH
71439: CALL_OW 446
// end ;
71443: LD_VAR 0 2
71447: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71448: LD_INT 0
71450: PPUSH
71451: PPUSH
// if not driver or not IsInUnit ( driver ) then
71452: LD_VAR 0 1
71456: NOT
71457: PUSH
71458: LD_VAR 0 1
71462: PPUSH
71463: CALL_OW 310
71467: NOT
71468: OR
71469: IFFALSE 71473
// exit ;
71471: GO 71563
// vehicle := IsInUnit ( driver ) ;
71473: LD_ADDR_VAR 0 3
71477: PUSH
71478: LD_VAR 0 1
71482: PPUSH
71483: CALL_OW 310
71487: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71488: LD_VAR 0 1
71492: PPUSH
71493: LD_STRING \
71495: PUSH
71496: LD_INT 0
71498: PUSH
71499: LD_INT 0
71501: PUSH
71502: LD_INT 0
71504: PUSH
71505: LD_INT 0
71507: PUSH
71508: LD_INT 0
71510: PUSH
71511: LD_INT 0
71513: PUSH
71514: EMPTY
71515: LIST
71516: LIST
71517: LIST
71518: LIST
71519: LIST
71520: LIST
71521: LIST
71522: PUSH
71523: LD_STRING E
71525: PUSH
71526: LD_INT 0
71528: PUSH
71529: LD_INT 0
71531: PUSH
71532: LD_VAR 0 3
71536: PUSH
71537: LD_INT 0
71539: PUSH
71540: LD_INT 0
71542: PUSH
71543: LD_INT 0
71545: PUSH
71546: EMPTY
71547: LIST
71548: LIST
71549: LIST
71550: LIST
71551: LIST
71552: LIST
71553: LIST
71554: PUSH
71555: EMPTY
71556: LIST
71557: LIST
71558: PPUSH
71559: CALL_OW 447
// end ;
71563: LD_VAR 0 2
71567: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
71568: LD_INT 0
71570: PPUSH
71571: PPUSH
71572: PPUSH
// tmp := [ ] ;
71573: LD_ADDR_VAR 0 5
71577: PUSH
71578: EMPTY
71579: ST_TO_ADDR
// for i in units do
71580: LD_ADDR_VAR 0 4
71584: PUSH
71585: LD_VAR 0 1
71589: PUSH
71590: FOR_IN
71591: IFFALSE 71629
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
71593: LD_ADDR_VAR 0 5
71597: PUSH
71598: LD_VAR 0 5
71602: PPUSH
71603: LD_VAR 0 5
71607: PUSH
71608: LD_INT 1
71610: PLUS
71611: PPUSH
71612: LD_VAR 0 4
71616: PPUSH
71617: CALL_OW 256
71621: PPUSH
71622: CALL_OW 2
71626: ST_TO_ADDR
71627: GO 71590
71629: POP
71630: POP
// if not tmp then
71631: LD_VAR 0 5
71635: NOT
71636: IFFALSE 71640
// exit ;
71638: GO 71688
// if asc then
71640: LD_VAR 0 2
71644: IFFALSE 71668
// result := SortListByListAsc ( units , tmp ) else
71646: LD_ADDR_VAR 0 3
71650: PUSH
71651: LD_VAR 0 1
71655: PPUSH
71656: LD_VAR 0 5
71660: PPUSH
71661: CALL_OW 76
71665: ST_TO_ADDR
71666: GO 71688
// result := SortListByListDesc ( units , tmp ) ;
71668: LD_ADDR_VAR 0 3
71672: PUSH
71673: LD_VAR 0 1
71677: PPUSH
71678: LD_VAR 0 5
71682: PPUSH
71683: CALL_OW 77
71687: ST_TO_ADDR
// end ;
71688: LD_VAR 0 3
71692: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
71693: LD_INT 0
71695: PPUSH
71696: PPUSH
// task := GetTaskList ( mech ) ;
71697: LD_ADDR_VAR 0 4
71701: PUSH
71702: LD_VAR 0 1
71706: PPUSH
71707: CALL_OW 437
71711: ST_TO_ADDR
// if not task then
71712: LD_VAR 0 4
71716: NOT
71717: IFFALSE 71721
// exit ;
71719: GO 71763
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
71721: LD_ADDR_VAR 0 3
71725: PUSH
71726: LD_VAR 0 4
71730: PUSH
71731: LD_INT 1
71733: ARRAY
71734: PUSH
71735: LD_INT 1
71737: ARRAY
71738: PUSH
71739: LD_STRING r
71741: EQUAL
71742: PUSH
71743: LD_VAR 0 4
71747: PUSH
71748: LD_INT 1
71750: ARRAY
71751: PUSH
71752: LD_INT 4
71754: ARRAY
71755: PUSH
71756: LD_VAR 0 2
71760: EQUAL
71761: AND
71762: ST_TO_ADDR
// end ;
71763: LD_VAR 0 3
71767: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
71768: LD_INT 0
71770: PPUSH
// SetDir ( unit , d ) ;
71771: LD_VAR 0 1
71775: PPUSH
71776: LD_VAR 0 4
71780: PPUSH
71781: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
71785: LD_VAR 0 1
71789: PPUSH
71790: LD_VAR 0 2
71794: PPUSH
71795: LD_VAR 0 3
71799: PPUSH
71800: LD_VAR 0 5
71804: PPUSH
71805: CALL_OW 48
// end ;
71809: LD_VAR 0 6
71813: RET
// export function ToNaturalNumber ( number ) ; begin
71814: LD_INT 0
71816: PPUSH
// result := number div 1 ;
71817: LD_ADDR_VAR 0 2
71821: PUSH
71822: LD_VAR 0 1
71826: PUSH
71827: LD_INT 1
71829: DIV
71830: ST_TO_ADDR
// if number < 0 then
71831: LD_VAR 0 1
71835: PUSH
71836: LD_INT 0
71838: LESS
71839: IFFALSE 71849
// result := 0 ;
71841: LD_ADDR_VAR 0 2
71845: PUSH
71846: LD_INT 0
71848: ST_TO_ADDR
// end ;
71849: LD_VAR 0 2
71853: RET
// export function SortByClass ( units , class ) ; var un ; begin
71854: LD_INT 0
71856: PPUSH
71857: PPUSH
// if not units or not class then
71858: LD_VAR 0 1
71862: NOT
71863: PUSH
71864: LD_VAR 0 2
71868: NOT
71869: OR
71870: IFFALSE 71874
// exit ;
71872: GO 71969
// result := [ ] ;
71874: LD_ADDR_VAR 0 3
71878: PUSH
71879: EMPTY
71880: ST_TO_ADDR
// for un in units do
71881: LD_ADDR_VAR 0 4
71885: PUSH
71886: LD_VAR 0 1
71890: PUSH
71891: FOR_IN
71892: IFFALSE 71967
// if GetClass ( un ) = class then
71894: LD_VAR 0 4
71898: PPUSH
71899: CALL_OW 257
71903: PUSH
71904: LD_VAR 0 2
71908: EQUAL
71909: IFFALSE 71936
// result := Insert ( result , 1 , un ) else
71911: LD_ADDR_VAR 0 3
71915: PUSH
71916: LD_VAR 0 3
71920: PPUSH
71921: LD_INT 1
71923: PPUSH
71924: LD_VAR 0 4
71928: PPUSH
71929: CALL_OW 2
71933: ST_TO_ADDR
71934: GO 71965
// result := Replace ( result , result + 1 , un ) ;
71936: LD_ADDR_VAR 0 3
71940: PUSH
71941: LD_VAR 0 3
71945: PPUSH
71946: LD_VAR 0 3
71950: PUSH
71951: LD_INT 1
71953: PLUS
71954: PPUSH
71955: LD_VAR 0 4
71959: PPUSH
71960: CALL_OW 1
71964: ST_TO_ADDR
71965: GO 71891
71967: POP
71968: POP
// end ;
71969: LD_VAR 0 3
71973: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
71974: LD_INT 0
71976: PPUSH
71977: PPUSH
71978: PPUSH
71979: PPUSH
71980: PPUSH
71981: PPUSH
71982: PPUSH
// result := [ ] ;
71983: LD_ADDR_VAR 0 4
71987: PUSH
71988: EMPTY
71989: ST_TO_ADDR
// if x - r < 0 then
71990: LD_VAR 0 1
71994: PUSH
71995: LD_VAR 0 3
71999: MINUS
72000: PUSH
72001: LD_INT 0
72003: LESS
72004: IFFALSE 72016
// min_x := 0 else
72006: LD_ADDR_VAR 0 8
72010: PUSH
72011: LD_INT 0
72013: ST_TO_ADDR
72014: GO 72032
// min_x := x - r ;
72016: LD_ADDR_VAR 0 8
72020: PUSH
72021: LD_VAR 0 1
72025: PUSH
72026: LD_VAR 0 3
72030: MINUS
72031: ST_TO_ADDR
// if y - r < 0 then
72032: LD_VAR 0 2
72036: PUSH
72037: LD_VAR 0 3
72041: MINUS
72042: PUSH
72043: LD_INT 0
72045: LESS
72046: IFFALSE 72058
// min_y := 0 else
72048: LD_ADDR_VAR 0 7
72052: PUSH
72053: LD_INT 0
72055: ST_TO_ADDR
72056: GO 72074
// min_y := y - r ;
72058: LD_ADDR_VAR 0 7
72062: PUSH
72063: LD_VAR 0 2
72067: PUSH
72068: LD_VAR 0 3
72072: MINUS
72073: ST_TO_ADDR
// max_x := x + r ;
72074: LD_ADDR_VAR 0 9
72078: PUSH
72079: LD_VAR 0 1
72083: PUSH
72084: LD_VAR 0 3
72088: PLUS
72089: ST_TO_ADDR
// max_y := y + r ;
72090: LD_ADDR_VAR 0 10
72094: PUSH
72095: LD_VAR 0 2
72099: PUSH
72100: LD_VAR 0 3
72104: PLUS
72105: ST_TO_ADDR
// for _x = min_x to max_x do
72106: LD_ADDR_VAR 0 5
72110: PUSH
72111: DOUBLE
72112: LD_VAR 0 8
72116: DEC
72117: ST_TO_ADDR
72118: LD_VAR 0 9
72122: PUSH
72123: FOR_TO
72124: IFFALSE 72225
// for _y = min_y to max_y do
72126: LD_ADDR_VAR 0 6
72130: PUSH
72131: DOUBLE
72132: LD_VAR 0 7
72136: DEC
72137: ST_TO_ADDR
72138: LD_VAR 0 10
72142: PUSH
72143: FOR_TO
72144: IFFALSE 72221
// begin if not ValidHex ( _x , _y ) then
72146: LD_VAR 0 5
72150: PPUSH
72151: LD_VAR 0 6
72155: PPUSH
72156: CALL_OW 488
72160: NOT
72161: IFFALSE 72165
// continue ;
72163: GO 72143
// if GetResourceTypeXY ( _x , _y ) then
72165: LD_VAR 0 5
72169: PPUSH
72170: LD_VAR 0 6
72174: PPUSH
72175: CALL_OW 283
72179: IFFALSE 72219
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
72181: LD_ADDR_VAR 0 4
72185: PUSH
72186: LD_VAR 0 4
72190: PPUSH
72191: LD_VAR 0 4
72195: PUSH
72196: LD_INT 1
72198: PLUS
72199: PPUSH
72200: LD_VAR 0 5
72204: PUSH
72205: LD_VAR 0 6
72209: PUSH
72210: EMPTY
72211: LIST
72212: LIST
72213: PPUSH
72214: CALL_OW 1
72218: ST_TO_ADDR
// end ;
72219: GO 72143
72221: POP
72222: POP
72223: GO 72123
72225: POP
72226: POP
// end ;
72227: LD_VAR 0 4
72231: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
72232: LD_INT 0
72234: PPUSH
72235: PPUSH
72236: PPUSH
72237: PPUSH
72238: PPUSH
72239: PPUSH
72240: PPUSH
72241: PPUSH
// if not units then
72242: LD_VAR 0 1
72246: NOT
72247: IFFALSE 72251
// exit ;
72249: GO 72775
// result := UnitFilter ( units , [ f_ok ] ) ;
72251: LD_ADDR_VAR 0 3
72255: PUSH
72256: LD_VAR 0 1
72260: PPUSH
72261: LD_INT 50
72263: PUSH
72264: EMPTY
72265: LIST
72266: PPUSH
72267: CALL_OW 72
72271: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
72272: LD_ADDR_VAR 0 8
72276: PUSH
72277: LD_VAR 0 1
72281: PUSH
72282: LD_INT 1
72284: ARRAY
72285: PPUSH
72286: CALL_OW 255
72290: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
72291: LD_ADDR_VAR 0 10
72295: PUSH
72296: LD_INT 29
72298: PUSH
72299: LD_INT 91
72301: PUSH
72302: LD_INT 49
72304: PUSH
72305: EMPTY
72306: LIST
72307: LIST
72308: LIST
72309: ST_TO_ADDR
// if not result then
72310: LD_VAR 0 3
72314: NOT
72315: IFFALSE 72319
// exit ;
72317: GO 72775
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
72319: LD_ADDR_VAR 0 5
72323: PUSH
72324: LD_INT 81
72326: PUSH
72327: LD_VAR 0 8
72331: PUSH
72332: EMPTY
72333: LIST
72334: LIST
72335: PPUSH
72336: CALL_OW 69
72340: ST_TO_ADDR
// for i in result do
72341: LD_ADDR_VAR 0 4
72345: PUSH
72346: LD_VAR 0 3
72350: PUSH
72351: FOR_IN
72352: IFFALSE 72773
// begin tag := GetTag ( i ) + 1 ;
72354: LD_ADDR_VAR 0 9
72358: PUSH
72359: LD_VAR 0 4
72363: PPUSH
72364: CALL_OW 110
72368: PUSH
72369: LD_INT 1
72371: PLUS
72372: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
72373: LD_ADDR_VAR 0 7
72377: PUSH
72378: LD_VAR 0 4
72382: PPUSH
72383: CALL_OW 250
72387: PPUSH
72388: LD_VAR 0 4
72392: PPUSH
72393: CALL_OW 251
72397: PPUSH
72398: LD_INT 6
72400: PPUSH
72401: CALL 71974 0 3
72405: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
72406: LD_VAR 0 4
72410: PPUSH
72411: CALL_OW 247
72415: PUSH
72416: LD_INT 2
72418: EQUAL
72419: PUSH
72420: LD_VAR 0 7
72424: AND
72425: PUSH
72426: LD_VAR 0 4
72430: PPUSH
72431: CALL_OW 264
72435: PUSH
72436: LD_VAR 0 10
72440: IN
72441: NOT
72442: AND
72443: IFFALSE 72482
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
72445: LD_VAR 0 4
72449: PPUSH
72450: LD_VAR 0 7
72454: PUSH
72455: LD_INT 1
72457: ARRAY
72458: PUSH
72459: LD_INT 1
72461: ARRAY
72462: PPUSH
72463: LD_VAR 0 7
72467: PUSH
72468: LD_INT 1
72470: ARRAY
72471: PUSH
72472: LD_INT 2
72474: ARRAY
72475: PPUSH
72476: CALL_OW 116
72480: GO 72771
// if path > tag then
72482: LD_VAR 0 2
72486: PUSH
72487: LD_VAR 0 9
72491: GREATER
72492: IFFALSE 72700
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
72494: LD_ADDR_VAR 0 6
72498: PUSH
72499: LD_VAR 0 5
72503: PPUSH
72504: LD_INT 91
72506: PUSH
72507: LD_VAR 0 4
72511: PUSH
72512: LD_INT 8
72514: PUSH
72515: EMPTY
72516: LIST
72517: LIST
72518: LIST
72519: PPUSH
72520: CALL_OW 72
72524: ST_TO_ADDR
// if nearEnemy then
72525: LD_VAR 0 6
72529: IFFALSE 72598
// begin if GetWeapon ( i ) = ru_time_lapser then
72531: LD_VAR 0 4
72535: PPUSH
72536: CALL_OW 264
72540: PUSH
72541: LD_INT 49
72543: EQUAL
72544: IFFALSE 72572
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
72546: LD_VAR 0 4
72550: PPUSH
72551: LD_VAR 0 6
72555: PPUSH
72556: LD_VAR 0 4
72560: PPUSH
72561: CALL_OW 74
72565: PPUSH
72566: CALL_OW 112
72570: GO 72596
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
72572: LD_VAR 0 4
72576: PPUSH
72577: LD_VAR 0 6
72581: PPUSH
72582: LD_VAR 0 4
72586: PPUSH
72587: CALL_OW 74
72591: PPUSH
72592: CALL_OW 115
// end else
72596: GO 72698
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
72598: LD_VAR 0 4
72602: PPUSH
72603: LD_VAR 0 2
72607: PUSH
72608: LD_VAR 0 9
72612: ARRAY
72613: PUSH
72614: LD_INT 1
72616: ARRAY
72617: PPUSH
72618: LD_VAR 0 2
72622: PUSH
72623: LD_VAR 0 9
72627: ARRAY
72628: PUSH
72629: LD_INT 2
72631: ARRAY
72632: PPUSH
72633: CALL_OW 297
72637: PUSH
72638: LD_INT 6
72640: GREATER
72641: IFFALSE 72684
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
72643: LD_VAR 0 4
72647: PPUSH
72648: LD_VAR 0 2
72652: PUSH
72653: LD_VAR 0 9
72657: ARRAY
72658: PUSH
72659: LD_INT 1
72661: ARRAY
72662: PPUSH
72663: LD_VAR 0 2
72667: PUSH
72668: LD_VAR 0 9
72672: ARRAY
72673: PUSH
72674: LD_INT 2
72676: ARRAY
72677: PPUSH
72678: CALL_OW 114
72682: GO 72698
// SetTag ( i , tag ) ;
72684: LD_VAR 0 4
72688: PPUSH
72689: LD_VAR 0 9
72693: PPUSH
72694: CALL_OW 109
// end else
72698: GO 72771
// if enemy then
72700: LD_VAR 0 5
72704: IFFALSE 72771
// begin if GetWeapon ( i ) = ru_time_lapser then
72706: LD_VAR 0 4
72710: PPUSH
72711: CALL_OW 264
72715: PUSH
72716: LD_INT 49
72718: EQUAL
72719: IFFALSE 72747
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
72721: LD_VAR 0 4
72725: PPUSH
72726: LD_VAR 0 5
72730: PPUSH
72731: LD_VAR 0 4
72735: PPUSH
72736: CALL_OW 74
72740: PPUSH
72741: CALL_OW 112
72745: GO 72771
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
72747: LD_VAR 0 4
72751: PPUSH
72752: LD_VAR 0 5
72756: PPUSH
72757: LD_VAR 0 4
72761: PPUSH
72762: CALL_OW 74
72766: PPUSH
72767: CALL_OW 115
// end ; end ;
72771: GO 72351
72773: POP
72774: POP
// end ;
72775: LD_VAR 0 3
72779: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
72780: LD_INT 0
72782: PPUSH
72783: PPUSH
72784: PPUSH
// if not unit or IsInUnit ( unit ) then
72785: LD_VAR 0 1
72789: NOT
72790: PUSH
72791: LD_VAR 0 1
72795: PPUSH
72796: CALL_OW 310
72800: OR
72801: IFFALSE 72805
// exit ;
72803: GO 72896
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
72805: LD_ADDR_VAR 0 4
72809: PUSH
72810: LD_VAR 0 1
72814: PPUSH
72815: CALL_OW 250
72819: PPUSH
72820: LD_VAR 0 2
72824: PPUSH
72825: LD_INT 1
72827: PPUSH
72828: CALL_OW 272
72832: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
72833: LD_ADDR_VAR 0 5
72837: PUSH
72838: LD_VAR 0 1
72842: PPUSH
72843: CALL_OW 251
72847: PPUSH
72848: LD_VAR 0 2
72852: PPUSH
72853: LD_INT 1
72855: PPUSH
72856: CALL_OW 273
72860: ST_TO_ADDR
// if ValidHex ( x , y ) then
72861: LD_VAR 0 4
72865: PPUSH
72866: LD_VAR 0 5
72870: PPUSH
72871: CALL_OW 488
72875: IFFALSE 72896
// ComTurnXY ( unit , x , y ) ;
72877: LD_VAR 0 1
72881: PPUSH
72882: LD_VAR 0 4
72886: PPUSH
72887: LD_VAR 0 5
72891: PPUSH
72892: CALL_OW 118
// end ;
72896: LD_VAR 0 3
72900: RET
// export function SeeUnits ( side , units ) ; var i ; begin
72901: LD_INT 0
72903: PPUSH
72904: PPUSH
// result := false ;
72905: LD_ADDR_VAR 0 3
72909: PUSH
72910: LD_INT 0
72912: ST_TO_ADDR
// if not units then
72913: LD_VAR 0 2
72917: NOT
72918: IFFALSE 72922
// exit ;
72920: GO 72967
// for i in units do
72922: LD_ADDR_VAR 0 4
72926: PUSH
72927: LD_VAR 0 2
72931: PUSH
72932: FOR_IN
72933: IFFALSE 72965
// if See ( side , i ) then
72935: LD_VAR 0 1
72939: PPUSH
72940: LD_VAR 0 4
72944: PPUSH
72945: CALL_OW 292
72949: IFFALSE 72963
// begin result := true ;
72951: LD_ADDR_VAR 0 3
72955: PUSH
72956: LD_INT 1
72958: ST_TO_ADDR
// exit ;
72959: POP
72960: POP
72961: GO 72967
// end ;
72963: GO 72932
72965: POP
72966: POP
// end ;
72967: LD_VAR 0 3
72971: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
72972: LD_INT 0
72974: PPUSH
72975: PPUSH
72976: PPUSH
72977: PPUSH
// if not unit or not points then
72978: LD_VAR 0 1
72982: NOT
72983: PUSH
72984: LD_VAR 0 2
72988: NOT
72989: OR
72990: IFFALSE 72994
// exit ;
72992: GO 73084
// dist := 99999 ;
72994: LD_ADDR_VAR 0 5
72998: PUSH
72999: LD_INT 99999
73001: ST_TO_ADDR
// for i in points do
73002: LD_ADDR_VAR 0 4
73006: PUSH
73007: LD_VAR 0 2
73011: PUSH
73012: FOR_IN
73013: IFFALSE 73082
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
73015: LD_ADDR_VAR 0 6
73019: PUSH
73020: LD_VAR 0 1
73024: PPUSH
73025: LD_VAR 0 4
73029: PUSH
73030: LD_INT 1
73032: ARRAY
73033: PPUSH
73034: LD_VAR 0 4
73038: PUSH
73039: LD_INT 2
73041: ARRAY
73042: PPUSH
73043: CALL_OW 297
73047: ST_TO_ADDR
// if tmpDist < dist then
73048: LD_VAR 0 6
73052: PUSH
73053: LD_VAR 0 5
73057: LESS
73058: IFFALSE 73080
// begin result := i ;
73060: LD_ADDR_VAR 0 3
73064: PUSH
73065: LD_VAR 0 4
73069: ST_TO_ADDR
// dist := tmpDist ;
73070: LD_ADDR_VAR 0 5
73074: PUSH
73075: LD_VAR 0 6
73079: ST_TO_ADDR
// end ; end ;
73080: GO 73012
73082: POP
73083: POP
// end ;
73084: LD_VAR 0 3
73088: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
73089: LD_INT 0
73091: PPUSH
// uc_side := side ;
73092: LD_ADDR_OWVAR 20
73096: PUSH
73097: LD_VAR 0 1
73101: ST_TO_ADDR
// uc_nation := 3 ;
73102: LD_ADDR_OWVAR 21
73106: PUSH
73107: LD_INT 3
73109: ST_TO_ADDR
// vc_chassis := 25 ;
73110: LD_ADDR_OWVAR 37
73114: PUSH
73115: LD_INT 25
73117: ST_TO_ADDR
// vc_engine := engine_siberite ;
73118: LD_ADDR_OWVAR 39
73122: PUSH
73123: LD_INT 3
73125: ST_TO_ADDR
// vc_control := control_computer ;
73126: LD_ADDR_OWVAR 38
73130: PUSH
73131: LD_INT 3
73133: ST_TO_ADDR
// vc_weapon := 59 ;
73134: LD_ADDR_OWVAR 40
73138: PUSH
73139: LD_INT 59
73141: ST_TO_ADDR
// result := CreateVehicle ;
73142: LD_ADDR_VAR 0 5
73146: PUSH
73147: CALL_OW 45
73151: ST_TO_ADDR
// SetDir ( result , d ) ;
73152: LD_VAR 0 5
73156: PPUSH
73157: LD_VAR 0 4
73161: PPUSH
73162: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
73166: LD_VAR 0 5
73170: PPUSH
73171: LD_VAR 0 2
73175: PPUSH
73176: LD_VAR 0 3
73180: PPUSH
73181: LD_INT 0
73183: PPUSH
73184: CALL_OW 48
// end ;
73188: LD_VAR 0 5
73192: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
73193: LD_INT 0
73195: PPUSH
73196: PPUSH
73197: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
73198: LD_ADDR_VAR 0 2
73202: PUSH
73203: LD_INT 0
73205: PUSH
73206: LD_INT 0
73208: PUSH
73209: LD_INT 0
73211: PUSH
73212: LD_INT 0
73214: PUSH
73215: EMPTY
73216: LIST
73217: LIST
73218: LIST
73219: LIST
73220: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
73221: LD_VAR 0 1
73225: NOT
73226: PUSH
73227: LD_VAR 0 1
73231: PPUSH
73232: CALL_OW 264
73236: PUSH
73237: LD_INT 12
73239: PUSH
73240: LD_INT 51
73242: PUSH
73243: LD_INT 32
73245: PUSH
73246: LD_INT 89
73248: PUSH
73249: EMPTY
73250: LIST
73251: LIST
73252: LIST
73253: LIST
73254: IN
73255: NOT
73256: OR
73257: IFFALSE 73261
// exit ;
73259: GO 73359
// for i := 1 to 3 do
73261: LD_ADDR_VAR 0 3
73265: PUSH
73266: DOUBLE
73267: LD_INT 1
73269: DEC
73270: ST_TO_ADDR
73271: LD_INT 3
73273: PUSH
73274: FOR_TO
73275: IFFALSE 73357
// begin tmp := GetCargo ( cargo , i ) ;
73277: LD_ADDR_VAR 0 4
73281: PUSH
73282: LD_VAR 0 1
73286: PPUSH
73287: LD_VAR 0 3
73291: PPUSH
73292: CALL_OW 289
73296: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
73297: LD_ADDR_VAR 0 2
73301: PUSH
73302: LD_VAR 0 2
73306: PPUSH
73307: LD_VAR 0 3
73311: PPUSH
73312: LD_VAR 0 4
73316: PPUSH
73317: CALL_OW 1
73321: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
73322: LD_ADDR_VAR 0 2
73326: PUSH
73327: LD_VAR 0 2
73331: PPUSH
73332: LD_INT 4
73334: PPUSH
73335: LD_VAR 0 2
73339: PUSH
73340: LD_INT 4
73342: ARRAY
73343: PUSH
73344: LD_VAR 0 4
73348: PLUS
73349: PPUSH
73350: CALL_OW 1
73354: ST_TO_ADDR
// end ;
73355: GO 73274
73357: POP
73358: POP
// end ;
73359: LD_VAR 0 2
73363: RET
// export function Length ( array ) ; begin
73364: LD_INT 0
73366: PPUSH
// result := array + 0 ;
73367: LD_ADDR_VAR 0 2
73371: PUSH
73372: LD_VAR 0 1
73376: PUSH
73377: LD_INT 0
73379: PLUS
73380: ST_TO_ADDR
// end ;
73381: LD_VAR 0 2
73385: RET
// export function PrepareArray ( array ) ; begin
73386: LD_INT 0
73388: PPUSH
// result := array diff 0 ;
73389: LD_ADDR_VAR 0 2
73393: PUSH
73394: LD_VAR 0 1
73398: PUSH
73399: LD_INT 0
73401: DIFF
73402: ST_TO_ADDR
// if not result [ 1 ] then
73403: LD_VAR 0 2
73407: PUSH
73408: LD_INT 1
73410: ARRAY
73411: NOT
73412: IFFALSE 73432
// result := Delete ( result , 1 ) ;
73414: LD_ADDR_VAR 0 2
73418: PUSH
73419: LD_VAR 0 2
73423: PPUSH
73424: LD_INT 1
73426: PPUSH
73427: CALL_OW 3
73431: ST_TO_ADDR
// end ;
73432: LD_VAR 0 2
73436: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
73437: LD_INT 0
73439: PPUSH
73440: PPUSH
73441: PPUSH
73442: PPUSH
// sibRocketRange := 25 ;
73443: LD_ADDR_VAR 0 6
73447: PUSH
73448: LD_INT 25
73450: ST_TO_ADDR
// result := false ;
73451: LD_ADDR_VAR 0 4
73455: PUSH
73456: LD_INT 0
73458: ST_TO_ADDR
// for i := 0 to 5 do
73459: LD_ADDR_VAR 0 5
73463: PUSH
73464: DOUBLE
73465: LD_INT 0
73467: DEC
73468: ST_TO_ADDR
73469: LD_INT 5
73471: PUSH
73472: FOR_TO
73473: IFFALSE 73540
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
73475: LD_VAR 0 1
73479: PPUSH
73480: LD_VAR 0 5
73484: PPUSH
73485: LD_VAR 0 6
73489: PPUSH
73490: CALL_OW 272
73494: PPUSH
73495: LD_VAR 0 2
73499: PPUSH
73500: LD_VAR 0 5
73504: PPUSH
73505: LD_VAR 0 6
73509: PPUSH
73510: CALL_OW 273
73514: PPUSH
73515: LD_VAR 0 3
73519: PPUSH
73520: CALL_OW 309
73524: IFFALSE 73538
// begin result := true ;
73526: LD_ADDR_VAR 0 4
73530: PUSH
73531: LD_INT 1
73533: ST_TO_ADDR
// exit ;
73534: POP
73535: POP
73536: GO 73542
// end ;
73538: GO 73472
73540: POP
73541: POP
// end ; end_of_file
73542: LD_VAR 0 4
73546: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
73547: LD_VAR 0 1
73551: PUSH
73552: LD_INT 200
73554: DOUBLE
73555: GREATEREQUAL
73556: IFFALSE 73564
73558: LD_INT 299
73560: DOUBLE
73561: LESSEQUAL
73562: IFTRUE 73566
73564: GO 73598
73566: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
73567: LD_VAR 0 1
73571: PPUSH
73572: LD_VAR 0 2
73576: PPUSH
73577: LD_VAR 0 3
73581: PPUSH
73582: LD_VAR 0 4
73586: PPUSH
73587: LD_VAR 0 5
73591: PPUSH
73592: CALL 28266 0 5
73596: GO 73675
73598: LD_INT 300
73600: DOUBLE
73601: GREATEREQUAL
73602: IFFALSE 73610
73604: LD_INT 399
73606: DOUBLE
73607: LESSEQUAL
73608: IFTRUE 73612
73610: GO 73674
73612: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
73613: LD_VAR 0 1
73617: PPUSH
73618: LD_VAR 0 2
73622: PPUSH
73623: LD_VAR 0 3
73627: PPUSH
73628: LD_VAR 0 4
73632: PPUSH
73633: LD_VAR 0 5
73637: PPUSH
73638: LD_VAR 0 6
73642: PPUSH
73643: LD_VAR 0 7
73647: PPUSH
73648: LD_VAR 0 8
73652: PPUSH
73653: LD_VAR 0 9
73657: PPUSH
73658: LD_VAR 0 10
73662: PPUSH
73663: LD_VAR 0 11
73667: PPUSH
73668: CALL 24599 0 11
73672: GO 73675
73674: POP
// end ;
73675: PPOPN 11
73677: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
73678: LD_VAR 0 1
73682: PPUSH
73683: LD_VAR 0 2
73687: PPUSH
73688: LD_VAR 0 3
73692: PPUSH
73693: LD_VAR 0 4
73697: PPUSH
73698: LD_VAR 0 5
73702: PPUSH
73703: CALL 28002 0 5
// end ; end_of_file
73707: PPOPN 5
73709: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
73710: LD_VAR 0 1
73714: PPUSH
73715: LD_VAR 0 2
73719: PPUSH
73720: LD_VAR 0 3
73724: PPUSH
73725: LD_VAR 0 4
73729: PPUSH
73730: LD_VAR 0 5
73734: PPUSH
73735: LD_VAR 0 6
73739: PPUSH
73740: CALL 12292 0 6
// end ;
73744: PPOPN 6
73746: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
73747: LD_INT 0
73749: PPUSH
// begin if not units then
73750: LD_VAR 0 1
73754: NOT
73755: IFFALSE 73759
// exit ;
73757: GO 73759
// end ;
73759: PPOPN 7
73761: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
73762: CALL 12263 0 0
// end ;
73766: PPOPN 1
73768: END
