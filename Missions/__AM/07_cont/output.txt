// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// Init ;
   8: CALL 44 0 0
// DebugMode ;
  12: CALL 265 0 0
// AnimateTrees ( true ) ;
  16: LD_INT 1
  18: PPUSH
  19: CALL_OW 573
// CreateNature ;
  23: CALL 1551 0 0
// PrepareRussians ;
  27: CALL 4561 0 0
// PrepareAmericans ;
  31: CALL 3431 0 0
// Action ;
  35: CALL 8465 0 0
// SaveForQuickRestart ;
  39: CALL_OW 22
// end ;
  43: END
// export debug ; export mission_prev_prefix , mission_prefix ; export buildings_counter , time_to_end , can_end , must_end , kill_counter ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// mission_prefix := 07c_ ;
  55: LD_ADDR_EXP 3
  59: PUSH
  60: LD_STRING 07c_
  62: ST_TO_ADDR
// mission_prev_prefix := 07_ ;
  63: LD_ADDR_EXP 2
  67: PUSH
  68: LD_STRING 07_
  70: ST_TO_ADDR
// buildings_counter := 0 ;
  71: LD_ADDR_EXP 4
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// time_to_end := [ [ 32 32$00 , 29 29$00 , 26 26$00 , 24 24$00 ] [ Difficulty ] , [ 38 38$00 , 35 35$00 , 32 32$00 , 30 30$00 ] [ Difficulty ] , [ 43 43$00 , 41 41$00 , 38 38$00 , 36 36$00 ] [ Difficulty ] ] ;
  79: LD_ADDR_EXP 5
  83: PUSH
  84: LD_INT 67200
  86: PUSH
  87: LD_INT 60900
  89: PUSH
  90: LD_INT 54600
  92: PUSH
  93: LD_INT 50400
  95: PUSH
  96: EMPTY
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: PUSH
 102: LD_OWVAR 67
 106: ARRAY
 107: PUSH
 108: LD_INT 79800
 110: PUSH
 111: LD_INT 73500
 113: PUSH
 114: LD_INT 67200
 116: PUSH
 117: LD_INT 63000
 119: PUSH
 120: EMPTY
 121: LIST
 122: LIST
 123: LIST
 124: LIST
 125: PUSH
 126: LD_OWVAR 67
 130: ARRAY
 131: PUSH
 132: LD_INT 90300
 134: PUSH
 135: LD_INT 86100
 137: PUSH
 138: LD_INT 79800
 140: PUSH
 141: LD_INT 75600
 143: PUSH
 144: EMPTY
 145: LIST
 146: LIST
 147: LIST
 148: LIST
 149: PUSH
 150: LD_OWVAR 67
 154: ARRAY
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: ST_TO_ADDR
// can_end := false ;
 161: LD_ADDR_EXP 6
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// must_end := false ;
 169: LD_ADDR_EXP 7
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// kill_counter := 0 ;
 177: LD_ADDR_EXP 8
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// end ;
 185: LD_VAR 0 1
 189: RET
// every 0 0$01 trigger not debug do
 190: LD_EXP 1
 194: NOT
 195: IFFALSE 264
 197: GO 199
 199: DISABLE
// begin enable ;
 200: ENABLE
// if not must_end then
 201: LD_EXP 7
 205: NOT
 206: IFFALSE 227
// display_strings := [ #Am07-1 , tick ] else
 208: LD_ADDR_OWVAR 47
 212: PUSH
 213: LD_STRING #Am07-1
 215: PUSH
 216: LD_OWVAR 1
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: ST_TO_ADDR
 225: GO 264
// display_strings := [ #Am07-1 , tick , #Am07-2 , time_to_end [ 3 ] - tick ] ;
 227: LD_ADDR_OWVAR 47
 231: PUSH
 232: LD_STRING #Am07-1
 234: PUSH
 235: LD_OWVAR 1
 239: PUSH
 240: LD_STRING #Am07-2
 242: PUSH
 243: LD_EXP 5
 247: PUSH
 248: LD_INT 3
 250: ARRAY
 251: PUSH
 252: LD_OWVAR 1
 256: MINUS
 257: PUSH
 258: EMPTY
 259: LIST
 260: LIST
 261: LIST
 262: LIST
 263: ST_TO_ADDR
// end ;
 264: END
// function DebugMode ; var i ; begin
 265: LD_INT 0
 267: PPUSH
 268: PPUSH
// if not debug then
 269: LD_EXP 1
 273: NOT
 274: IFFALSE 278
// exit ;
 276: GO 293
// Difficulty := 4 ;
 278: LD_ADDR_OWVAR 67
 282: PUSH
 283: LD_INT 4
 285: ST_TO_ADDR
// FogOff ( 1 ) ;
 286: LD_INT 1
 288: PPUSH
 289: CALL_OW 344
// end ;
 293: LD_VAR 0 1
 297: RET
// every 3 trigger debug do var i , filter ;
 298: LD_EXP 1
 302: IFFALSE 391
 304: GO 306
 306: DISABLE
 307: LD_INT 0
 309: PPUSH
 310: PPUSH
// begin enable ;
 311: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 500 ] ] ] ) ;
 312: LD_ADDR_VAR 0 2
 316: PUSH
 317: LD_INT 22
 319: PUSH
 320: LD_INT 1
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PUSH
 327: LD_INT 3
 329: PUSH
 330: LD_INT 24
 332: PUSH
 333: LD_INT 500
 335: PUSH
 336: EMPTY
 337: LIST
 338: LIST
 339: PUSH
 340: EMPTY
 341: LIST
 342: LIST
 343: PUSH
 344: EMPTY
 345: LIST
 346: LIST
 347: PPUSH
 348: CALL_OW 69
 352: ST_TO_ADDR
// if not filter then
 353: LD_VAR 0 2
 357: NOT
 358: IFFALSE 362
// exit ;
 360: GO 391
// for i in filter do
 362: LD_ADDR_VAR 0 1
 366: PUSH
 367: LD_VAR 0 2
 371: PUSH
 372: FOR_IN
 373: IFFALSE 389
// SetLives ( i , 1000 ) ;
 375: LD_VAR 0 1
 379: PPUSH
 380: LD_INT 1000
 382: PPUSH
 383: CALL_OW 234
 387: GO 372
 389: POP
 390: POP
// end ;
 391: PPOPN 2
 393: END
// every 0 0$1 trigger kill_counter >= 20 do
 394: LD_EXP 8
 398: PUSH
 399: LD_INT 20
 401: GREATEREQUAL
 402: IFFALSE 414
 404: GO 406
 406: DISABLE
// SetAchievement ( ACH_HITMAN ) ;
 407: LD_STRING ACH_HITMAN
 409: PPUSH
 410: CALL_OW 543
 414: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) >= 3 do
 415: LD_INT 22
 417: PUSH
 418: LD_INT 1
 420: PUSH
 421: EMPTY
 422: LIST
 423: LIST
 424: PUSH
 425: LD_INT 23
 427: PUSH
 428: LD_INT 3
 430: PUSH
 431: EMPTY
 432: LIST
 433: LIST
 434: PUSH
 435: LD_INT 21
 437: PUSH
 438: LD_INT 2
 440: PUSH
 441: EMPTY
 442: LIST
 443: LIST
 444: PUSH
 445: EMPTY
 446: LIST
 447: LIST
 448: LIST
 449: PPUSH
 450: CALL_OW 69
 454: PUSH
 455: LD_INT 3
 457: GREATEREQUAL
 458: IFFALSE 470
 460: GO 462
 462: DISABLE
// SetAchievement ( ACH_TANKACE ) ;
 463: LD_STRING ACH_TANKACE
 465: PPUSH
 466: CALL_OW 543
 470: END
// every 0 0$1 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) = 0 do
 471: LD_INT 2
 473: PUSH
 474: LD_INT 30
 476: PUSH
 477: LD_INT 0
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PUSH
 484: LD_INT 30
 486: PUSH
 487: LD_INT 1
 489: PUSH
 490: EMPTY
 491: LIST
 492: LIST
 493: PUSH
 494: EMPTY
 495: LIST
 496: LIST
 497: LIST
 498: PPUSH
 499: CALL_OW 69
 503: PUSH
 504: LD_INT 0
 506: EQUAL
 507: IFFALSE 519
 509: GO 511
 511: DISABLE
// SetAchievement ( ACH_COMMANDO ) ; end_of_file
 512: LD_STRING ACH_COMMANDO
 514: PPUSH
 515: CALL_OW 543
 519: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 520: LD_INT 0
 522: PPUSH
// uc_side := side ;
 523: LD_ADDR_OWVAR 20
 527: PUSH
 528: LD_VAR 0 1
 532: ST_TO_ADDR
// uc_nation := nation ;
 533: LD_ADDR_OWVAR 21
 537: PUSH
 538: LD_VAR 0 2
 542: ST_TO_ADDR
// vc_chassis := chassis ;
 543: LD_ADDR_OWVAR 37
 547: PUSH
 548: LD_VAR 0 3
 552: ST_TO_ADDR
// vc_engine := engine ;
 553: LD_ADDR_OWVAR 39
 557: PUSH
 558: LD_VAR 0 4
 562: ST_TO_ADDR
// vc_control := control ;
 563: LD_ADDR_OWVAR 38
 567: PUSH
 568: LD_VAR 0 5
 572: ST_TO_ADDR
// vc_weapon := weapon ;
 573: LD_ADDR_OWVAR 40
 577: PUSH
 578: LD_VAR 0 6
 582: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 583: LD_ADDR_OWVAR 41
 587: PUSH
 588: LD_VAR 0 7
 592: ST_TO_ADDR
// result := CreateVehicle ;
 593: LD_ADDR_VAR 0 8
 597: PUSH
 598: CALL_OW 45
 602: ST_TO_ADDR
// end ;
 603: LD_VAR 0 8
 607: RET
// export function GetRandom ( sex ) ; var i , filter ; begin
 608: LD_INT 0
 610: PPUSH
 611: PPUSH
 612: PPUSH
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] ;
 613: LD_ADDR_VAR 0 4
 617: PUSH
 618: LD_INT 22
 620: PUSH
 621: LD_INT 1
 623: PUSH
 624: EMPTY
 625: LIST
 626: LIST
 627: PUSH
 628: LD_INT 21
 630: PUSH
 631: LD_INT 1
 633: PUSH
 634: EMPTY
 635: LIST
 636: LIST
 637: PUSH
 638: LD_INT 50
 640: PUSH
 641: EMPTY
 642: LIST
 643: PUSH
 644: EMPTY
 645: LIST
 646: LIST
 647: LIST
 648: PPUSH
 649: CALL_OW 69
 653: PUSH
 654: LD_EXP 9
 658: PUSH
 659: LD_EXP 10
 663: PUSH
 664: LD_EXP 11
 668: PUSH
 669: LD_EXP 12
 673: PUSH
 674: LD_EXP 13
 678: PUSH
 679: LD_EXP 14
 683: PUSH
 684: LD_EXP 15
 688: PUSH
 689: LD_EXP 16
 693: PUSH
 694: LD_EXP 18
 698: PUSH
 699: LD_EXP 17
 703: PUSH
 704: EMPTY
 705: LIST
 706: LIST
 707: LIST
 708: LIST
 709: LIST
 710: LIST
 711: LIST
 712: LIST
 713: LIST
 714: LIST
 715: DIFF
 716: ST_TO_ADDR
// if not filter then
 717: LD_VAR 0 4
 721: NOT
 722: IFFALSE 726
// exit ;
 724: GO 753
// result := UnitFilter ( filter , [ f_sex , sex ] ) ;
 726: LD_ADDR_VAR 0 2
 730: PUSH
 731: LD_VAR 0 4
 735: PPUSH
 736: LD_INT 26
 738: PUSH
 739: LD_VAR 0 1
 743: PUSH
 744: EMPTY
 745: LIST
 746: LIST
 747: PPUSH
 748: CALL_OW 72
 752: ST_TO_ADDR
// end ;
 753: LD_VAR 0 2
 757: RET
// export function SayX ( units , ident ) ; var i ; begin
 758: LD_INT 0
 760: PPUSH
 761: PPUSH
// result := false ;
 762: LD_ADDR_VAR 0 3
 766: PUSH
 767: LD_INT 0
 769: ST_TO_ADDR
// if not units then
 770: LD_VAR 0 1
 774: NOT
 775: IFFALSE 779
// exit ;
 777: GO 833
// for i in units do
 779: LD_ADDR_VAR 0 4
 783: PUSH
 784: LD_VAR 0 1
 788: PUSH
 789: FOR_IN
 790: IFFALSE 831
// if IsOk ( i ) then
 792: LD_VAR 0 4
 796: PPUSH
 797: CALL_OW 302
 801: IFFALSE 829
// begin Say ( i , ident ) ;
 803: LD_VAR 0 4
 807: PPUSH
 808: LD_VAR 0 2
 812: PPUSH
 813: CALL_OW 88
// result := i ;
 817: LD_ADDR_VAR 0 3
 821: PUSH
 822: LD_VAR 0 4
 826: ST_TO_ADDR
// break ;
 827: GO 831
// end ;
 829: GO 789
 831: POP
 832: POP
// end ;
 833: LD_VAR 0 3
 837: RET
// export function GoToAnotherTower ( un , b , x , y ) ; var i , filter , barracks , side ; begin
 838: LD_INT 0
 840: PPUSH
 841: PPUSH
 842: PPUSH
 843: PPUSH
 844: PPUSH
// if not un or not IsOk ( un ) then
 845: LD_VAR 0 1
 849: NOT
 850: PUSH
 851: LD_VAR 0 1
 855: PPUSH
 856: CALL_OW 302
 860: NOT
 861: OR
 862: IFFALSE 866
// exit ;
 864: GO 1156
// side := GetSide ( un ) ;
 866: LD_ADDR_VAR 0 9
 870: PUSH
 871: LD_VAR 0 1
 875: PPUSH
 876: CALL_OW 255
 880: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_ok ] , [ f_empty ] ] ) diff b ;
 881: LD_ADDR_VAR 0 7
 885: PUSH
 886: LD_INT 22
 888: PUSH
 889: LD_VAR 0 9
 893: PUSH
 894: EMPTY
 895: LIST
 896: LIST
 897: PUSH
 898: LD_INT 30
 900: PUSH
 901: LD_INT 32
 903: PUSH
 904: EMPTY
 905: LIST
 906: LIST
 907: PUSH
 908: LD_INT 50
 910: PUSH
 911: EMPTY
 912: LIST
 913: PUSH
 914: LD_INT 58
 916: PUSH
 917: EMPTY
 918: LIST
 919: PUSH
 920: EMPTY
 921: LIST
 922: LIST
 923: LIST
 924: LIST
 925: PPUSH
 926: CALL_OW 69
 930: PUSH
 931: LD_VAR 0 2
 935: DIFF
 936: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_barracks ] ] ) ;
 937: LD_ADDR_VAR 0 8
 941: PUSH
 942: LD_INT 22
 944: PUSH
 945: LD_VAR 0 9
 949: PUSH
 950: EMPTY
 951: LIST
 952: LIST
 953: PUSH
 954: LD_INT 30
 956: PUSH
 957: LD_INT 5
 959: PUSH
 960: EMPTY
 961: LIST
 962: LIST
 963: PUSH
 964: EMPTY
 965: LIST
 966: LIST
 967: PPUSH
 968: CALL_OW 69
 972: ST_TO_ADDR
// if not filter then
 973: LD_VAR 0 7
 977: NOT
 978: IFFALSE 1068
// begin ComMoveXY ( un , x , y ) ;
 980: LD_VAR 0 1
 984: PPUSH
 985: LD_VAR 0 3
 989: PPUSH
 990: LD_VAR 0 4
 994: PPUSH
 995: CALL_OW 111
// if barracks then
 999: LD_VAR 0 8
1003: IFFALSE 1066
// for i in barracks do
1005: LD_ADDR_VAR 0 6
1009: PUSH
1010: LD_VAR 0 8
1014: PUSH
1015: FOR_IN
1016: IFFALSE 1064
// begin if UnitsInside ( i ) < 6 and IsOk ( i ) then
1018: LD_VAR 0 6
1022: PPUSH
1023: CALL_OW 313
1027: PUSH
1028: LD_INT 6
1030: LESS
1031: PUSH
1032: LD_VAR 0 6
1036: PPUSH
1037: CALL_OW 302
1041: AND
1042: IFFALSE 1062
// begin AddComEnterUnit ( un , i ) ;
1044: LD_VAR 0 1
1048: PPUSH
1049: LD_VAR 0 6
1053: PPUSH
1054: CALL_OW 180
// exit ;
1058: POP
1059: POP
1060: GO 1156
// end ; end ;
1062: GO 1015
1064: POP
1065: POP
// end else
1066: GO 1156
// begin filter := SortByDistanceUnit ( un , filter , true , true ) ;
1068: LD_ADDR_VAR 0 7
1072: PUSH
1073: LD_VAR 0 1
1077: PPUSH
1078: LD_VAR 0 7
1082: PPUSH
1083: LD_INT 1
1085: PPUSH
1086: LD_INT 1
1088: PPUSH
1089: CALL 36582 0 4
1093: ST_TO_ADDR
// for i in filter do
1094: LD_ADDR_VAR 0 6
1098: PUSH
1099: LD_VAR 0 7
1103: PUSH
1104: FOR_IN
1105: IFFALSE 1154
// if GetTag ( i ) <> 7 then
1107: LD_VAR 0 6
1111: PPUSH
1112: CALL_OW 110
1116: PUSH
1117: LD_INT 7
1119: NONEQUAL
1120: IFFALSE 1152
// begin ComEnterUnit ( un , i ) ;
1122: LD_VAR 0 1
1126: PPUSH
1127: LD_VAR 0 6
1131: PPUSH
1132: CALL_OW 120
// SetTag ( i , 7 ) ;
1136: LD_VAR 0 6
1140: PPUSH
1141: LD_INT 7
1143: PPUSH
1144: CALL_OW 109
// exit ;
1148: POP
1149: POP
1150: GO 1156
// end ;
1152: GO 1104
1154: POP
1155: POP
// end ; end ;
1156: LD_VAR 0 5
1160: RET
// export function BaseNeedEnergy ( base ) ; var i , tmp ; begin
1161: LD_INT 0
1163: PPUSH
1164: PPUSH
1165: PPUSH
// if not base then
1166: LD_VAR 0 1
1170: NOT
1171: IFFALSE 1175
// exit ;
1173: GO 1233
// tmp := GetEnergy ( GetBase ( base ) ) ;
1175: LD_ADDR_VAR 0 4
1179: PUSH
1180: LD_VAR 0 1
1184: PPUSH
1185: CALL_OW 274
1189: PPUSH
1190: CALL_OW 278
1194: ST_TO_ADDR
// if tmp [ 1 ] > tmp [ 4 ] then
1195: LD_VAR 0 4
1199: PUSH
1200: LD_INT 1
1202: ARRAY
1203: PUSH
1204: LD_VAR 0 4
1208: PUSH
1209: LD_INT 4
1211: ARRAY
1212: GREATER
1213: IFFALSE 1225
// result := true else
1215: LD_ADDR_VAR 0 2
1219: PUSH
1220: LD_INT 1
1222: ST_TO_ADDR
1223: GO 1233
// result := false ;
1225: LD_ADDR_VAR 0 2
1229: PUSH
1230: LD_INT 0
1232: ST_TO_ADDR
// end ;
1233: LD_VAR 0 2
1237: RET
// export function FilterPeople ( side ) ; begin
1238: LD_INT 0
1240: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) ;
1241: LD_ADDR_VAR 0 2
1245: PUSH
1246: LD_INT 22
1248: PUSH
1249: LD_VAR 0 1
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: PUSH
1258: LD_INT 21
1260: PUSH
1261: LD_INT 1
1263: PUSH
1264: EMPTY
1265: LIST
1266: LIST
1267: PUSH
1268: EMPTY
1269: LIST
1270: LIST
1271: PPUSH
1272: CALL_OW 69
1276: ST_TO_ADDR
// end ;
1277: LD_VAR 0 2
1281: RET
// export function FilterDrivers ( side ) ; begin
1282: LD_INT 0
1284: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_outside ] ] ] ) ;
1285: LD_ADDR_VAR 0 2
1289: PUSH
1290: LD_INT 22
1292: PUSH
1293: LD_VAR 0 1
1297: PUSH
1298: EMPTY
1299: LIST
1300: LIST
1301: PUSH
1302: LD_INT 3
1304: PUSH
1305: LD_INT 56
1307: PUSH
1308: EMPTY
1309: LIST
1310: PUSH
1311: EMPTY
1312: LIST
1313: LIST
1314: PUSH
1315: EMPTY
1316: LIST
1317: LIST
1318: PPUSH
1319: CALL_OW 69
1323: ST_TO_ADDR
// end ;
1324: LD_VAR 0 2
1328: RET
// export function FilterPeopleArea ( side , area ) ; begin
1329: LD_INT 0
1331: PPUSH
// result := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
1332: LD_ADDR_VAR 0 3
1336: PUSH
1337: LD_VAR 0 2
1341: PPUSH
1342: LD_INT 22
1344: PUSH
1345: LD_INT 1
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: PUSH
1352: LD_INT 21
1354: PUSH
1355: LD_INT 1
1357: PUSH
1358: EMPTY
1359: LIST
1360: LIST
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: PPUSH
1366: CALL_OW 70
1370: ST_TO_ADDR
// end ;
1371: LD_VAR 0 3
1375: RET
// export function FilterDriversArea ( side , area ) ; var i , tmp ; begin
1376: LD_INT 0
1378: PPUSH
1379: PPUSH
1380: PPUSH
// tmp := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
1381: LD_ADDR_VAR 0 5
1385: PUSH
1386: LD_VAR 0 2
1390: PPUSH
1391: LD_INT 22
1393: PUSH
1394: LD_INT 1
1396: PUSH
1397: EMPTY
1398: LIST
1399: LIST
1400: PUSH
1401: LD_INT 21
1403: PUSH
1404: LD_INT 2
1406: PUSH
1407: EMPTY
1408: LIST
1409: LIST
1410: PUSH
1411: LD_INT 3
1413: PUSH
1414: LD_INT 58
1416: PUSH
1417: EMPTY
1418: LIST
1419: PUSH
1420: EMPTY
1421: LIST
1422: LIST
1423: PUSH
1424: EMPTY
1425: LIST
1426: LIST
1427: LIST
1428: PPUSH
1429: CALL_OW 70
1433: ST_TO_ADDR
// result := [ ] ;
1434: LD_ADDR_VAR 0 3
1438: PUSH
1439: EMPTY
1440: ST_TO_ADDR
// if not tmp then
1441: LD_VAR 0 5
1445: NOT
1446: IFFALSE 1450
// exit ;
1448: GO 1502
// for i in tmp do
1450: LD_ADDR_VAR 0 4
1454: PUSH
1455: LD_VAR 0 5
1459: PUSH
1460: FOR_IN
1461: IFFALSE 1486
// result := result union IsDrivenBy ( i ) ;
1463: LD_ADDR_VAR 0 3
1467: PUSH
1468: LD_VAR 0 3
1472: PUSH
1473: LD_VAR 0 4
1477: PPUSH
1478: CALL_OW 311
1482: UNION
1483: ST_TO_ADDR
1484: GO 1460
1486: POP
1487: POP
// result := result diff 0 ;
1488: LD_ADDR_VAR 0 3
1492: PUSH
1493: LD_VAR 0 3
1497: PUSH
1498: LD_INT 0
1500: DIFF
1501: ST_TO_ADDR
// end ;
1502: LD_VAR 0 3
1506: RET
// export function FilterBuildings ( side ) ; begin
1507: LD_INT 0
1509: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
1510: LD_ADDR_VAR 0 2
1514: PUSH
1515: LD_INT 22
1517: PUSH
1518: LD_VAR 0 1
1522: PUSH
1523: EMPTY
1524: LIST
1525: LIST
1526: PUSH
1527: LD_INT 21
1529: PUSH
1530: LD_INT 3
1532: PUSH
1533: EMPTY
1534: LIST
1535: LIST
1536: PUSH
1537: EMPTY
1538: LIST
1539: LIST
1540: PPUSH
1541: CALL_OW 69
1545: ST_TO_ADDR
// end ;
1546: LD_VAR 0 2
1550: RET
// export function CreateNature ; var i , animal , nat_area ; begin
1551: LD_INT 0
1553: PPUSH
1554: PPUSH
1555: PPUSH
1556: PPUSH
// uc_side = 0 ;
1557: LD_ADDR_OWVAR 20
1561: PUSH
1562: LD_INT 0
1564: ST_TO_ADDR
// uc_nation = 0 ;
1565: LD_ADDR_OWVAR 21
1569: PUSH
1570: LD_INT 0
1572: ST_TO_ADDR
// nat_area := wildArea ;
1573: LD_ADDR_VAR 0 4
1577: PUSH
1578: LD_INT 3
1580: ST_TO_ADDR
// InitHc ;
1581: CALL_OW 19
// for i = 1 to 4 do
1585: LD_ADDR_VAR 0 2
1589: PUSH
1590: DOUBLE
1591: LD_INT 1
1593: DEC
1594: ST_TO_ADDR
1595: LD_INT 4
1597: PUSH
1598: FOR_TO
1599: IFFALSE 1654
// begin hc_class = 18 ;
1601: LD_ADDR_OWVAR 28
1605: PUSH
1606: LD_INT 18
1608: ST_TO_ADDR
// hc_gallery =  ;
1609: LD_ADDR_OWVAR 33
1613: PUSH
1614: LD_STRING 
1616: ST_TO_ADDR
// hc_face_number = 1 ;
1617: LD_ADDR_OWVAR 34
1621: PUSH
1622: LD_INT 1
1624: ST_TO_ADDR
// animal := CreateHuman ;
1625: LD_ADDR_VAR 0 3
1629: PUSH
1630: CALL_OW 44
1634: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1635: LD_VAR 0 3
1639: PPUSH
1640: LD_VAR 0 4
1644: PPUSH
1645: LD_INT 0
1647: PPUSH
1648: CALL_OW 49
// end ;
1652: GO 1598
1654: POP
1655: POP
// for i = 1 to 6 do
1656: LD_ADDR_VAR 0 2
1660: PUSH
1661: DOUBLE
1662: LD_INT 1
1664: DEC
1665: ST_TO_ADDR
1666: LD_INT 6
1668: PUSH
1669: FOR_TO
1670: IFFALSE 1741
// begin hc_class = class_tiger ;
1672: LD_ADDR_OWVAR 28
1676: PUSH
1677: LD_INT 14
1679: ST_TO_ADDR
// hc_gallery =  ;
1680: LD_ADDR_OWVAR 33
1684: PUSH
1685: LD_STRING 
1687: ST_TO_ADDR
// hc_agressivity = Rand ( 0 , 10 ) ;
1688: LD_ADDR_OWVAR 35
1692: PUSH
1693: LD_INT 0
1695: PPUSH
1696: LD_INT 10
1698: PPUSH
1699: CALL_OW 12
1703: ST_TO_ADDR
// hc_face_number = 3 ;
1704: LD_ADDR_OWVAR 34
1708: PUSH
1709: LD_INT 3
1711: ST_TO_ADDR
// animal := CreateHuman ;
1712: LD_ADDR_VAR 0 3
1716: PUSH
1717: CALL_OW 44
1721: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1722: LD_VAR 0 3
1726: PPUSH
1727: LD_VAR 0 4
1731: PPUSH
1732: LD_INT 0
1734: PPUSH
1735: CALL_OW 49
// end ;
1739: GO 1669
1741: POP
1742: POP
// for i = 1 to 2 do
1743: LD_ADDR_VAR 0 2
1747: PUSH
1748: DOUBLE
1749: LD_INT 1
1751: DEC
1752: ST_TO_ADDR
1753: LD_INT 2
1755: PUSH
1756: FOR_TO
1757: IFFALSE 1820
// begin hc_class = 21 ;
1759: LD_ADDR_OWVAR 28
1763: PUSH
1764: LD_INT 21
1766: ST_TO_ADDR
// hc_gallery =  ;
1767: LD_ADDR_OWVAR 33
1771: PUSH
1772: LD_STRING 
1774: ST_TO_ADDR
// hc_agressivity = 0 ;
1775: LD_ADDR_OWVAR 35
1779: PUSH
1780: LD_INT 0
1782: ST_TO_ADDR
// hc_face_number = 5 ;
1783: LD_ADDR_OWVAR 34
1787: PUSH
1788: LD_INT 5
1790: ST_TO_ADDR
// animal := CreateHuman ;
1791: LD_ADDR_VAR 0 3
1795: PUSH
1796: CALL_OW 44
1800: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1801: LD_VAR 0 3
1805: PPUSH
1806: LD_VAR 0 4
1810: PPUSH
1811: LD_INT 0
1813: PPUSH
1814: CALL_OW 49
// end ;
1818: GO 1756
1820: POP
1821: POP
// for i = 1 to 6 do
1822: LD_ADDR_VAR 0 2
1826: PUSH
1827: DOUBLE
1828: LD_INT 1
1830: DEC
1831: ST_TO_ADDR
1832: LD_INT 6
1834: PUSH
1835: FOR_TO
1836: IFFALSE 1891
// begin hc_class = 13 ;
1838: LD_ADDR_OWVAR 28
1842: PUSH
1843: LD_INT 13
1845: ST_TO_ADDR
// hc_gallery =  ;
1846: LD_ADDR_OWVAR 33
1850: PUSH
1851: LD_STRING 
1853: ST_TO_ADDR
// hc_face_number = 4 ;
1854: LD_ADDR_OWVAR 34
1858: PUSH
1859: LD_INT 4
1861: ST_TO_ADDR
// animal := CreateHuman ;
1862: LD_ADDR_VAR 0 3
1866: PUSH
1867: CALL_OW 44
1871: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1872: LD_VAR 0 3
1876: PPUSH
1877: LD_VAR 0 4
1881: PPUSH
1882: LD_INT 0
1884: PPUSH
1885: CALL_OW 49
// end ;
1889: GO 1835
1891: POP
1892: POP
// for i = 1 to 2 do
1893: LD_ADDR_VAR 0 2
1897: PUSH
1898: DOUBLE
1899: LD_INT 1
1901: DEC
1902: ST_TO_ADDR
1903: LD_INT 2
1905: PUSH
1906: FOR_TO
1907: IFFALSE 1966
// begin hc_class = 20 ;
1909: LD_ADDR_OWVAR 28
1913: PUSH
1914: LD_INT 20
1916: ST_TO_ADDR
// hc_gallery =  ;
1917: LD_ADDR_OWVAR 33
1921: PUSH
1922: LD_STRING 
1924: ST_TO_ADDR
// hc_face_number = 2 ;
1925: LD_ADDR_OWVAR 34
1929: PUSH
1930: LD_INT 2
1932: ST_TO_ADDR
// animal := CreateHuman ;
1933: LD_ADDR_VAR 0 3
1937: PUSH
1938: CALL_OW 44
1942: ST_TO_ADDR
// PlaceUnitXYR ( animal , 101 , 37 , 3 , false ) ;
1943: LD_VAR 0 3
1947: PPUSH
1948: LD_INT 101
1950: PPUSH
1951: LD_INT 37
1953: PPUSH
1954: LD_INT 3
1956: PPUSH
1957: LD_INT 0
1959: PPUSH
1960: CALL_OW 50
// end ;
1964: GO 1906
1966: POP
1967: POP
// for i = 1 to 1 do
1968: LD_ADDR_VAR 0 2
1972: PUSH
1973: DOUBLE
1974: LD_INT 1
1976: DEC
1977: ST_TO_ADDR
1978: LD_INT 1
1980: PUSH
1981: FOR_TO
1982: IFFALSE 2029
// begin vc_chassis := 31 ;
1984: LD_ADDR_OWVAR 37
1988: PUSH
1989: LD_INT 31
1991: ST_TO_ADDR
// vc_control := control_rider ;
1992: LD_ADDR_OWVAR 38
1996: PUSH
1997: LD_INT 4
1999: ST_TO_ADDR
// animal := CreateVehicle ;
2000: LD_ADDR_VAR 0 3
2004: PUSH
2005: CALL_OW 45
2009: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
2010: LD_VAR 0 3
2014: PPUSH
2015: LD_VAR 0 4
2019: PPUSH
2020: LD_INT 0
2022: PPUSH
2023: CALL_OW 49
// end ;
2027: GO 1981
2029: POP
2030: POP
// end ;
2031: LD_VAR 0 1
2035: RET
// export function NearbyTowerHasEnergy ( unit ) ; var i , tmp , energy ; begin
2036: LD_INT 0
2038: PPUSH
2039: PPUSH
2040: PPUSH
2041: PPUSH
// result := [ ] ;
2042: LD_ADDR_VAR 0 2
2046: PUSH
2047: EMPTY
2048: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_dist , unit , 15 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
2049: LD_ADDR_VAR 0 4
2053: PUSH
2054: LD_INT 81
2056: PUSH
2057: LD_VAR 0 1
2061: PPUSH
2062: CALL_OW 255
2066: PUSH
2067: EMPTY
2068: LIST
2069: LIST
2070: PUSH
2071: LD_INT 91
2073: PUSH
2074: LD_VAR 0 1
2078: PUSH
2079: LD_INT 15
2081: PUSH
2082: EMPTY
2083: LIST
2084: LIST
2085: LIST
2086: PUSH
2087: LD_INT 2
2089: PUSH
2090: LD_INT 30
2092: PUSH
2093: LD_INT 32
2095: PUSH
2096: EMPTY
2097: LIST
2098: LIST
2099: PUSH
2100: LD_INT 30
2102: PUSH
2103: LD_INT 33
2105: PUSH
2106: EMPTY
2107: LIST
2108: LIST
2109: PUSH
2110: EMPTY
2111: LIST
2112: LIST
2113: LIST
2114: PUSH
2115: EMPTY
2116: LIST
2117: LIST
2118: LIST
2119: PPUSH
2120: CALL_OW 69
2124: ST_TO_ADDR
// if not tmp then
2125: LD_VAR 0 4
2129: NOT
2130: IFFALSE 2134
// exit ;
2132: GO 2203
// for i in tmp do
2134: LD_ADDR_VAR 0 3
2138: PUSH
2139: LD_VAR 0 4
2143: PUSH
2144: FOR_IN
2145: IFFALSE 2201
// begin energy := GetEnergy ( GetBase ( i ) ) ;
2147: LD_ADDR_VAR 0 5
2151: PUSH
2152: LD_VAR 0 3
2156: PPUSH
2157: CALL_OW 274
2161: PPUSH
2162: CALL_OW 278
2166: ST_TO_ADDR
// if energy [ 4 ] > energy [ 1 ] then
2167: LD_VAR 0 5
2171: PUSH
2172: LD_INT 4
2174: ARRAY
2175: PUSH
2176: LD_VAR 0 5
2180: PUSH
2181: LD_INT 1
2183: ARRAY
2184: GREATER
2185: IFFALSE 2199
// begin result := i ;
2187: LD_ADDR_VAR 0 2
2191: PUSH
2192: LD_VAR 0 3
2196: ST_TO_ADDR
// break ;
2197: GO 2201
// end ; end ;
2199: GO 2144
2201: POP
2202: POP
// end ;
2203: LD_VAR 0 2
2207: RET
// export function GetTurretWeaponBase ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
2208: LD_INT 0
2210: PPUSH
2211: PPUSH
2212: PPUSH
2213: PPUSH
2214: PPUSH
2215: PPUSH
2216: PPUSH
2217: PPUSH
2218: PPUSH
2219: PPUSH
2220: PPUSH
2221: PPUSH
2222: PPUSH
2223: PPUSH
2224: PPUSH
2225: PPUSH
// result := false ;
2226: LD_ADDR_VAR 0 2
2230: PUSH
2231: LD_INT 0
2233: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
2234: LD_VAR 0 1
2238: NOT
2239: PUSH
2240: LD_VAR 0 1
2244: PPUSH
2245: CALL_OW 266
2249: PUSH
2250: LD_INT 32
2252: PUSH
2253: LD_INT 33
2255: PUSH
2256: EMPTY
2257: LIST
2258: LIST
2259: IN
2260: NOT
2261: OR
2262: IFFALSE 2266
// exit ;
2264: GO 3426
// nat := GetNation ( tower ) ;
2266: LD_ADDR_VAR 0 11
2270: PUSH
2271: LD_VAR 0 1
2275: PPUSH
2276: CALL_OW 248
2280: ST_TO_ADDR
// side := GetSide ( tower ) ;
2281: LD_ADDR_VAR 0 15
2285: PUSH
2286: LD_VAR 0 1
2290: PPUSH
2291: CALL_OW 255
2295: ST_TO_ADDR
// x := GetX ( tower ) ;
2296: LD_ADDR_VAR 0 9
2300: PUSH
2301: LD_VAR 0 1
2305: PPUSH
2306: CALL_OW 250
2310: ST_TO_ADDR
// y := GetY ( tower ) ;
2311: LD_ADDR_VAR 0 10
2315: PUSH
2316: LD_VAR 0 1
2320: PPUSH
2321: CALL_OW 251
2325: ST_TO_ADDR
// if not x or not y then
2326: LD_VAR 0 9
2330: NOT
2331: PUSH
2332: LD_VAR 0 10
2336: NOT
2337: OR
2338: IFFALSE 2342
// exit ;
2340: GO 3426
// weapon := 0 ;
2342: LD_ADDR_VAR 0 17
2346: PUSH
2347: LD_INT 0
2349: ST_TO_ADDR
// fac_list := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
2350: LD_ADDR_VAR 0 16
2354: PUSH
2355: LD_INT 42
2357: PUSH
2358: LD_INT 43
2360: PUSH
2361: LD_INT 44
2363: PUSH
2364: LD_INT 46
2366: PUSH
2367: EMPTY
2368: LIST
2369: LIST
2370: LIST
2371: LIST
2372: ST_TO_ADDR
// if not fac_list then
2373: LD_VAR 0 16
2377: NOT
2378: IFFALSE 2382
// exit ;
2380: GO 3426
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
2382: LD_ADDR_VAR 0 4
2386: PUSH
2387: LD_INT 4
2389: PUSH
2390: LD_INT 5
2392: PUSH
2393: LD_INT 9
2395: PUSH
2396: LD_INT 10
2398: PUSH
2399: LD_INT 6
2401: PUSH
2402: LD_INT 7
2404: PUSH
2405: LD_INT 11
2407: PUSH
2408: EMPTY
2409: LIST
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: LIST
2415: LIST
2416: PUSH
2417: LD_INT 27
2419: PUSH
2420: LD_INT 28
2422: PUSH
2423: LD_INT 26
2425: PUSH
2426: LD_INT 30
2428: PUSH
2429: EMPTY
2430: LIST
2431: LIST
2432: LIST
2433: LIST
2434: PUSH
2435: LD_INT 43
2437: PUSH
2438: LD_INT 44
2440: PUSH
2441: LD_INT 46
2443: PUSH
2444: LD_INT 45
2446: PUSH
2447: LD_INT 47
2449: PUSH
2450: LD_INT 49
2452: PUSH
2453: EMPTY
2454: LIST
2455: LIST
2456: LIST
2457: LIST
2458: LIST
2459: LIST
2460: PUSH
2461: EMPTY
2462: LIST
2463: LIST
2464: LIST
2465: PUSH
2466: LD_VAR 0 11
2470: ARRAY
2471: ST_TO_ADDR
// for i in list do
2472: LD_ADDR_VAR 0 7
2476: PUSH
2477: LD_VAR 0 4
2481: PUSH
2482: FOR_IN
2483: IFFALSE 2516
// if not i in fac_list then
2485: LD_VAR 0 7
2489: PUSH
2490: LD_VAR 0 16
2494: IN
2495: NOT
2496: IFFALSE 2514
// list := list diff i ;
2498: LD_ADDR_VAR 0 4
2502: PUSH
2503: LD_VAR 0 4
2507: PUSH
2508: LD_VAR 0 7
2512: DIFF
2513: ST_TO_ADDR
2514: GO 2482
2516: POP
2517: POP
// if not list then
2518: LD_VAR 0 4
2522: NOT
2523: IFFALSE 2527
// exit ;
2525: GO 3426
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
2527: LD_VAR 0 11
2531: PUSH
2532: LD_INT 3
2534: EQUAL
2535: PUSH
2536: LD_INT 49
2538: PUSH
2539: LD_VAR 0 4
2543: IN
2544: AND
2545: PUSH
2546: LD_INT 31
2548: PPUSH
2549: LD_VAR 0 15
2553: PPUSH
2554: CALL_OW 321
2558: PUSH
2559: LD_INT 2
2561: EQUAL
2562: AND
2563: IFFALSE 2623
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
2565: LD_INT 22
2567: PUSH
2568: LD_VAR 0 15
2572: PUSH
2573: EMPTY
2574: LIST
2575: LIST
2576: PUSH
2577: LD_INT 35
2579: PUSH
2580: LD_INT 49
2582: PUSH
2583: EMPTY
2584: LIST
2585: LIST
2586: PUSH
2587: LD_INT 91
2589: PUSH
2590: LD_VAR 0 1
2594: PUSH
2595: LD_INT 10
2597: PUSH
2598: EMPTY
2599: LIST
2600: LIST
2601: LIST
2602: PUSH
2603: EMPTY
2604: LIST
2605: LIST
2606: LIST
2607: PPUSH
2608: CALL_OW 69
2612: NOT
2613: IFFALSE 2623
// weapon := ru_time_lapser ;
2615: LD_ADDR_VAR 0 17
2619: PUSH
2620: LD_INT 49
2622: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
2623: LD_VAR 0 11
2627: PUSH
2628: LD_INT 1
2630: PUSH
2631: LD_INT 2
2633: PUSH
2634: EMPTY
2635: LIST
2636: LIST
2637: IN
2638: PUSH
2639: LD_INT 11
2641: PUSH
2642: LD_VAR 0 4
2646: IN
2647: PUSH
2648: LD_INT 30
2650: PUSH
2651: LD_VAR 0 4
2655: IN
2656: OR
2657: AND
2658: PUSH
2659: LD_INT 6
2661: PPUSH
2662: LD_VAR 0 15
2666: PPUSH
2667: CALL_OW 321
2671: PUSH
2672: LD_INT 2
2674: EQUAL
2675: AND
2676: IFFALSE 2841
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
2678: LD_INT 22
2680: PUSH
2681: LD_VAR 0 15
2685: PUSH
2686: EMPTY
2687: LIST
2688: LIST
2689: PUSH
2690: LD_INT 2
2692: PUSH
2693: LD_INT 35
2695: PUSH
2696: LD_INT 11
2698: PUSH
2699: EMPTY
2700: LIST
2701: LIST
2702: PUSH
2703: LD_INT 35
2705: PUSH
2706: LD_INT 30
2708: PUSH
2709: EMPTY
2710: LIST
2711: LIST
2712: PUSH
2713: EMPTY
2714: LIST
2715: LIST
2716: LIST
2717: PUSH
2718: LD_INT 91
2720: PUSH
2721: LD_VAR 0 1
2725: PUSH
2726: LD_INT 18
2728: PUSH
2729: EMPTY
2730: LIST
2731: LIST
2732: LIST
2733: PUSH
2734: EMPTY
2735: LIST
2736: LIST
2737: LIST
2738: PPUSH
2739: CALL_OW 69
2743: NOT
2744: PUSH
2745: LD_INT 22
2747: PUSH
2748: LD_VAR 0 15
2752: PUSH
2753: EMPTY
2754: LIST
2755: LIST
2756: PUSH
2757: LD_INT 2
2759: PUSH
2760: LD_INT 30
2762: PUSH
2763: LD_INT 32
2765: PUSH
2766: EMPTY
2767: LIST
2768: LIST
2769: PUSH
2770: LD_INT 30
2772: PUSH
2773: LD_INT 33
2775: PUSH
2776: EMPTY
2777: LIST
2778: LIST
2779: PUSH
2780: EMPTY
2781: LIST
2782: LIST
2783: LIST
2784: PUSH
2785: LD_INT 91
2787: PUSH
2788: LD_VAR 0 1
2792: PUSH
2793: LD_INT 12
2795: PUSH
2796: EMPTY
2797: LIST
2798: LIST
2799: LIST
2800: PUSH
2801: EMPTY
2802: LIST
2803: LIST
2804: LIST
2805: PUSH
2806: EMPTY
2807: LIST
2808: PPUSH
2809: CALL_OW 69
2813: PUSH
2814: LD_INT 2
2816: GREATER
2817: AND
2818: IFFALSE 2841
// weapon := [ us_radar , ar_radar ] [ nat ] ;
2820: LD_ADDR_VAR 0 17
2824: PUSH
2825: LD_INT 11
2827: PUSH
2828: LD_INT 30
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: PUSH
2835: LD_VAR 0 11
2839: ARRAY
2840: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
2841: LD_VAR 0 17
2845: NOT
2846: PUSH
2847: LD_INT 40
2849: PPUSH
2850: LD_VAR 0 15
2854: PPUSH
2855: CALL_OW 321
2859: PUSH
2860: LD_INT 2
2862: EQUAL
2863: AND
2864: PUSH
2865: LD_INT 7
2867: PUSH
2868: LD_VAR 0 4
2872: IN
2873: PUSH
2874: LD_INT 28
2876: PUSH
2877: LD_VAR 0 4
2881: IN
2882: OR
2883: PUSH
2884: LD_INT 45
2886: PUSH
2887: LD_VAR 0 4
2891: IN
2892: OR
2893: AND
2894: IFFALSE 3148
// begin hex := GetHexInfo ( x , y ) ;
2896: LD_ADDR_VAR 0 3
2900: PUSH
2901: LD_VAR 0 9
2905: PPUSH
2906: LD_VAR 0 10
2910: PPUSH
2911: CALL_OW 546
2915: ST_TO_ADDR
// if hex [ 1 ] then
2916: LD_VAR 0 3
2920: PUSH
2921: LD_INT 1
2923: ARRAY
2924: IFFALSE 2928
// exit ;
2926: GO 3426
// height := hex [ 2 ] ;
2928: LD_ADDR_VAR 0 14
2932: PUSH
2933: LD_VAR 0 3
2937: PUSH
2938: LD_INT 2
2940: ARRAY
2941: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
2942: LD_ADDR_VAR 0 13
2946: PUSH
2947: LD_INT 0
2949: PUSH
2950: LD_INT 2
2952: PUSH
2953: LD_INT 3
2955: PUSH
2956: LD_INT 5
2958: PUSH
2959: EMPTY
2960: LIST
2961: LIST
2962: LIST
2963: LIST
2964: ST_TO_ADDR
// for i in tmp do
2965: LD_ADDR_VAR 0 7
2969: PUSH
2970: LD_VAR 0 13
2974: PUSH
2975: FOR_IN
2976: IFFALSE 3146
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
2978: LD_ADDR_VAR 0 8
2982: PUSH
2983: LD_VAR 0 9
2987: PPUSH
2988: LD_VAR 0 7
2992: PPUSH
2993: LD_INT 5
2995: PPUSH
2996: CALL_OW 272
3000: PUSH
3001: LD_VAR 0 10
3005: PPUSH
3006: LD_VAR 0 7
3010: PPUSH
3011: LD_INT 5
3013: PPUSH
3014: CALL_OW 273
3018: PUSH
3019: EMPTY
3020: LIST
3021: LIST
3022: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
3023: LD_VAR 0 8
3027: PUSH
3028: LD_INT 1
3030: ARRAY
3031: PPUSH
3032: LD_VAR 0 8
3036: PUSH
3037: LD_INT 2
3039: ARRAY
3040: PPUSH
3041: CALL_OW 488
3045: IFFALSE 3144
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
3047: LD_ADDR_VAR 0 3
3051: PUSH
3052: LD_VAR 0 8
3056: PUSH
3057: LD_INT 1
3059: ARRAY
3060: PPUSH
3061: LD_VAR 0 8
3065: PUSH
3066: LD_INT 2
3068: ARRAY
3069: PPUSH
3070: CALL_OW 546
3074: ST_TO_ADDR
// if hex [ 1 ] then
3075: LD_VAR 0 3
3079: PUSH
3080: LD_INT 1
3082: ARRAY
3083: IFFALSE 3087
// continue ;
3085: GO 2975
// h := hex [ 2 ] ;
3087: LD_ADDR_VAR 0 12
3091: PUSH
3092: LD_VAR 0 3
3096: PUSH
3097: LD_INT 2
3099: ARRAY
3100: ST_TO_ADDR
// if h + 7 < height then
3101: LD_VAR 0 12
3105: PUSH
3106: LD_INT 7
3108: PLUS
3109: PUSH
3110: LD_VAR 0 14
3114: LESS
3115: IFFALSE 3144
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
3117: LD_ADDR_VAR 0 17
3121: PUSH
3122: LD_INT 7
3124: PUSH
3125: LD_INT 28
3127: PUSH
3128: LD_INT 45
3130: PUSH
3131: EMPTY
3132: LIST
3133: LIST
3134: LIST
3135: PUSH
3136: LD_VAR 0 11
3140: ARRAY
3141: ST_TO_ADDR
// break ;
3142: GO 3146
// end ; end ; end ;
3144: GO 2975
3146: POP
3147: POP
// end ; if not weapon then
3148: LD_VAR 0 17
3152: NOT
3153: IFFALSE 3308
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
3155: LD_ADDR_VAR 0 4
3159: PUSH
3160: LD_VAR 0 4
3164: PUSH
3165: LD_INT 11
3167: PUSH
3168: LD_INT 30
3170: PUSH
3171: LD_INT 49
3173: PUSH
3174: EMPTY
3175: LIST
3176: LIST
3177: LIST
3178: DIFF
3179: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , tower , 6 ] , [ f_not , [ f_bweapon , 0 ] ] ] ) ;
3180: LD_ADDR_VAR 0 13
3184: PUSH
3185: LD_INT 22
3187: PUSH
3188: LD_VAR 0 15
3192: PUSH
3193: EMPTY
3194: LIST
3195: LIST
3196: PUSH
3197: LD_INT 91
3199: PUSH
3200: LD_VAR 0 1
3204: PUSH
3205: LD_INT 6
3207: PUSH
3208: EMPTY
3209: LIST
3210: LIST
3211: LIST
3212: PUSH
3213: LD_INT 3
3215: PUSH
3216: LD_INT 35
3218: PUSH
3219: LD_INT 0
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: PUSH
3226: EMPTY
3227: LIST
3228: LIST
3229: PUSH
3230: EMPTY
3231: LIST
3232: LIST
3233: LIST
3234: PPUSH
3235: CALL_OW 69
3239: ST_TO_ADDR
// for i in tmp do
3240: LD_ADDR_VAR 0 7
3244: PUSH
3245: LD_VAR 0 13
3249: PUSH
3250: FOR_IN
3251: IFFALSE 3276
// list := list diff GetBWeapon ( i ) ;
3253: LD_ADDR_VAR 0 4
3257: PUSH
3258: LD_VAR 0 4
3262: PUSH
3263: LD_VAR 0 7
3267: PPUSH
3268: CALL_OW 269
3272: DIFF
3273: ST_TO_ADDR
3274: GO 3250
3276: POP
3277: POP
// if list then
3278: LD_VAR 0 4
3282: IFFALSE 3308
// weapon := list [ rand ( 1 , list ) ] ;
3284: LD_ADDR_VAR 0 17
3288: PUSH
3289: LD_VAR 0 4
3293: PUSH
3294: LD_INT 1
3296: PPUSH
3297: LD_VAR 0 4
3301: PPUSH
3302: CALL_OW 12
3306: ARRAY
3307: ST_TO_ADDR
// end ; if weapon then
3308: LD_VAR 0 17
3312: IFFALSE 3426
// begin tmp := CostOfWeapon ( weapon ) ;
3314: LD_ADDR_VAR 0 13
3318: PUSH
3319: LD_VAR 0 17
3323: PPUSH
3324: CALL_OW 451
3328: ST_TO_ADDR
// j := GetBase ( tower ) ;
3329: LD_ADDR_VAR 0 8
3333: PUSH
3334: LD_VAR 0 1
3338: PPUSH
3339: CALL_OW 274
3343: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
3344: LD_VAR 0 8
3348: PPUSH
3349: LD_INT 1
3351: PPUSH
3352: CALL_OW 275
3356: PUSH
3357: LD_VAR 0 13
3361: PUSH
3362: LD_INT 1
3364: ARRAY
3365: GREATEREQUAL
3366: PUSH
3367: LD_VAR 0 8
3371: PPUSH
3372: LD_INT 2
3374: PPUSH
3375: CALL_OW 275
3379: PUSH
3380: LD_VAR 0 13
3384: PUSH
3385: LD_INT 2
3387: ARRAY
3388: GREATEREQUAL
3389: AND
3390: PUSH
3391: LD_VAR 0 8
3395: PPUSH
3396: LD_INT 3
3398: PPUSH
3399: CALL_OW 275
3403: PUSH
3404: LD_VAR 0 13
3408: PUSH
3409: LD_INT 3
3411: ARRAY
3412: GREATEREQUAL
3413: AND
3414: IFFALSE 3426
// result := weapon ;
3416: LD_ADDR_VAR 0 2
3420: PUSH
3421: LD_VAR 0 17
3425: ST_TO_ADDR
// end ; end ; end_of_file
3426: LD_VAR 0 2
3430: RET
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Khatam , Kikuchi , Harisson ; export function PrepareAmericans ; var i , team , others , veh , m ; begin
3431: LD_INT 0
3433: PPUSH
3434: PPUSH
3435: PPUSH
3436: PPUSH
3437: PPUSH
3438: PPUSH
// uc_side := 1 ;
3439: LD_ADDR_OWVAR 20
3443: PUSH
3444: LD_INT 1
3446: ST_TO_ADDR
// uc_nation := 1 ;
3447: LD_ADDR_OWVAR 21
3451: PUSH
3452: LD_INT 1
3454: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prev_prefix ) ;
3455: LD_ADDR_EXP 9
3459: PUSH
3460: LD_STRING JMM
3462: PPUSH
3463: LD_EXP 1
3467: NOT
3468: PPUSH
3469: LD_EXP 2
3473: PPUSH
3474: CALL 31161 0 3
3478: ST_TO_ADDR
// team := [ JMM ] ;
3479: LD_ADDR_VAR 0 3
3483: PUSH
3484: LD_EXP 9
3488: PUSH
3489: EMPTY
3490: LIST
3491: ST_TO_ADDR
// if LoadVariable ( BrownIn07 , debug ) then
3492: LD_STRING BrownIn07
3494: PPUSH
3495: LD_EXP 1
3499: PPUSH
3500: CALL_OW 30
3504: IFFALSE 3530
// Brown := PrepareUnit ( Brown , ( not debug ) , mission_prev_prefix ) ;
3506: LD_ADDR_EXP 10
3510: PUSH
3511: LD_STRING Brown
3513: PPUSH
3514: LD_EXP 1
3518: NOT
3519: PPUSH
3520: LD_EXP 2
3524: PPUSH
3525: CALL 31161 0 3
3529: ST_TO_ADDR
// if Brown then
3530: LD_EXP 10
3534: IFFALSE 3552
// team := team ^ Brown ;
3536: LD_ADDR_VAR 0 3
3540: PUSH
3541: LD_VAR 0 3
3545: PUSH
3546: LD_EXP 10
3550: ADD
3551: ST_TO_ADDR
// if LoadVariable ( DonaldsonIn07 , debug ) then
3552: LD_STRING DonaldsonIn07
3554: PPUSH
3555: LD_EXP 1
3559: PPUSH
3560: CALL_OW 30
3564: IFFALSE 3590
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prev_prefix ) ;
3566: LD_ADDR_EXP 11
3570: PUSH
3571: LD_STRING Donaldson
3573: PPUSH
3574: LD_EXP 1
3578: NOT
3579: PPUSH
3580: LD_EXP 2
3584: PPUSH
3585: CALL 31161 0 3
3589: ST_TO_ADDR
// if Donaldson then
3590: LD_EXP 11
3594: IFFALSE 3612
// team := team ^ Donaldson ;
3596: LD_ADDR_VAR 0 3
3600: PUSH
3601: LD_VAR 0 3
3605: PUSH
3606: LD_EXP 11
3610: ADD
3611: ST_TO_ADDR
// if LoadVariable ( BobbyIn07 , debug ) then
3612: LD_STRING BobbyIn07
3614: PPUSH
3615: LD_EXP 1
3619: PPUSH
3620: CALL_OW 30
3624: IFFALSE 3650
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prev_prefix ) ;
3626: LD_ADDR_EXP 12
3630: PUSH
3631: LD_STRING Bobby
3633: PPUSH
3634: LD_EXP 1
3638: NOT
3639: PPUSH
3640: LD_EXP 2
3644: PPUSH
3645: CALL 31161 0 3
3649: ST_TO_ADDR
// if Bobby then
3650: LD_EXP 12
3654: IFFALSE 3672
// team := team ^ Bobby ;
3656: LD_ADDR_VAR 0 3
3660: PUSH
3661: LD_VAR 0 3
3665: PUSH
3666: LD_EXP 12
3670: ADD
3671: ST_TO_ADDR
// if LoadVariable ( CyrusIn07 , debug ) then
3672: LD_STRING CyrusIn07
3674: PPUSH
3675: LD_EXP 1
3679: PPUSH
3680: CALL_OW 30
3684: IFFALSE 3710
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prev_prefix ) ;
3686: LD_ADDR_EXP 13
3690: PUSH
3691: LD_STRING Cyrus
3693: PPUSH
3694: LD_EXP 1
3698: NOT
3699: PPUSH
3700: LD_EXP 2
3704: PPUSH
3705: CALL 31161 0 3
3709: ST_TO_ADDR
// if Cyrus then
3710: LD_EXP 13
3714: IFFALSE 3732
// team := team ^ Cyrus ;
3716: LD_ADDR_VAR 0 3
3720: PUSH
3721: LD_VAR 0 3
3725: PUSH
3726: LD_EXP 13
3730: ADD
3731: ST_TO_ADDR
// if LoadVariable ( LisaIn07 , debug ) then
3732: LD_STRING LisaIn07
3734: PPUSH
3735: LD_EXP 1
3739: PPUSH
3740: CALL_OW 30
3744: IFFALSE 3770
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prev_prefix ) ;
3746: LD_ADDR_EXP 14
3750: PUSH
3751: LD_STRING Lisa
3753: PPUSH
3754: LD_EXP 1
3758: NOT
3759: PPUSH
3760: LD_EXP 2
3764: PPUSH
3765: CALL 31161 0 3
3769: ST_TO_ADDR
// if Lisa then
3770: LD_EXP 14
3774: IFFALSE 3792
// team := team ^ Lisa ;
3776: LD_ADDR_VAR 0 3
3780: PUSH
3781: LD_VAR 0 3
3785: PUSH
3786: LD_EXP 14
3790: ADD
3791: ST_TO_ADDR
// if LoadVariable ( GladstoneIn07 , debug ) then
3792: LD_STRING GladstoneIn07
3794: PPUSH
3795: LD_EXP 1
3799: PPUSH
3800: CALL_OW 30
3804: IFFALSE 3830
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , mission_prev_prefix ) ;
3806: LD_ADDR_EXP 16
3810: PUSH
3811: LD_STRING Gladstone
3813: PPUSH
3814: LD_EXP 1
3818: NOT
3819: PPUSH
3820: LD_EXP 2
3824: PPUSH
3825: CALL 31161 0 3
3829: ST_TO_ADDR
// if Gladstone then
3830: LD_EXP 16
3834: IFFALSE 3852
// team := team ^ Gladstone ;
3836: LD_ADDR_VAR 0 3
3840: PUSH
3841: LD_VAR 0 3
3845: PUSH
3846: LD_EXP 16
3850: ADD
3851: ST_TO_ADDR
// if LoadVariable ( KhatamIn07 , debug ) then
3852: LD_STRING KhatamIn07
3854: PPUSH
3855: LD_EXP 1
3859: PPUSH
3860: CALL_OW 30
3864: IFFALSE 3890
// Khatam := PrepareUnit ( Khatam , ( not debug ) , mission_prev_prefix ) ;
3866: LD_ADDR_EXP 17
3870: PUSH
3871: LD_STRING Khatam
3873: PPUSH
3874: LD_EXP 1
3878: NOT
3879: PPUSH
3880: LD_EXP 2
3884: PPUSH
3885: CALL 31161 0 3
3889: ST_TO_ADDR
// if Khatam then
3890: LD_EXP 17
3894: IFFALSE 3912
// team := team ^ Khatam ;
3896: LD_ADDR_VAR 0 3
3900: PUSH
3901: LD_VAR 0 3
3905: PUSH
3906: LD_EXP 17
3910: ADD
3911: ST_TO_ADDR
// others := CreateCharacterSet ( 07_others ) ;
3912: LD_ADDR_VAR 0 4
3916: PUSH
3917: LD_STRING 07_others
3919: PPUSH
3920: CALL_OW 31
3924: ST_TO_ADDR
// if others then
3925: LD_VAR 0 4
3929: IFFALSE 3947
// team := team ^ others ;
3931: LD_ADDR_VAR 0 3
3935: PUSH
3936: LD_VAR 0 3
3940: PUSH
3941: LD_VAR 0 4
3945: ADD
3946: ST_TO_ADDR
// if debug then
3947: LD_EXP 1
3951: IFFALSE 4025
// begin InitHc ;
3953: CALL_OW 19
// for i = 1 to 4 do
3957: LD_ADDR_VAR 0 2
3961: PUSH
3962: DOUBLE
3963: LD_INT 1
3965: DEC
3966: ST_TO_ADDR
3967: LD_INT 4
3969: PUSH
3970: FOR_TO
3971: IFFALSE 4023
// begin PrepareHuman ( false , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , 4 ) ;
3973: LD_INT 0
3975: PPUSH
3976: LD_INT 1
3978: PUSH
3979: LD_INT 3
3981: PUSH
3982: EMPTY
3983: LIST
3984: LIST
3985: PUSH
3986: LD_INT 1
3988: PPUSH
3989: LD_INT 2
3991: PPUSH
3992: CALL_OW 12
3996: ARRAY
3997: PPUSH
3998: LD_INT 4
4000: PPUSH
4001: CALL_OW 380
// team := team ^ CreateHuman ;
4005: LD_ADDR_VAR 0 3
4009: PUSH
4010: LD_VAR 0 3
4014: PUSH
4015: CALL_OW 44
4019: ADD
4020: ST_TO_ADDR
// end ;
4021: GO 3970
4023: POP
4024: POP
// end ; m := 0 ;
4025: LD_ADDR_VAR 0 6
4029: PUSH
4030: LD_INT 0
4032: ST_TO_ADDR
// for i in team do
4033: LD_ADDR_VAR 0 2
4037: PUSH
4038: LD_VAR 0 3
4042: PUSH
4043: FOR_IN
4044: IFFALSE 4251
// if GetClass ( i ) = 3 then
4046: LD_VAR 0 2
4050: PPUSH
4051: CALL_OW 257
4055: PUSH
4056: LD_INT 3
4058: EQUAL
4059: IFFALSE 4207
// begin m := m + 1 ;
4061: LD_ADDR_VAR 0 6
4065: PUSH
4066: LD_VAR 0 6
4070: PUSH
4071: LD_INT 1
4073: PLUS
4074: ST_TO_ADDR
// veh := PrepareTank ( 1 , 1 , [ us_medium_wheeled , us_medium_tracked , us_medium_wheeled , us_light_wheeled ] [ m mod 4 + 1 ] , engine_solar , control_manual , [ us_gatling_gun , us_double_gun , us_light_gun , us_radar ] [ m mod 4 + 1 ] , 60 ) ;
4075: LD_ADDR_VAR 0 5
4079: PUSH
4080: LD_INT 1
4082: PPUSH
4083: LD_INT 1
4085: PPUSH
4086: LD_INT 2
4088: PUSH
4089: LD_INT 3
4091: PUSH
4092: LD_INT 2
4094: PUSH
4095: LD_INT 1
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: LIST
4102: LIST
4103: PUSH
4104: LD_VAR 0 6
4108: PUSH
4109: LD_INT 4
4111: MOD
4112: PUSH
4113: LD_INT 1
4115: PLUS
4116: ARRAY
4117: PPUSH
4118: LD_INT 2
4120: PPUSH
4121: LD_INT 1
4123: PPUSH
4124: LD_INT 4
4126: PUSH
4127: LD_INT 5
4129: PUSH
4130: LD_INT 3
4132: PUSH
4133: LD_INT 11
4135: PUSH
4136: EMPTY
4137: LIST
4138: LIST
4139: LIST
4140: LIST
4141: PUSH
4142: LD_VAR 0 6
4146: PUSH
4147: LD_INT 4
4149: MOD
4150: PUSH
4151: LD_INT 1
4153: PLUS
4154: ARRAY
4155: PPUSH
4156: LD_INT 60
4158: PPUSH
4159: CALL 520 0 7
4163: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
4164: LD_VAR 0 5
4168: PPUSH
4169: LD_INT 2
4171: PPUSH
4172: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
4176: LD_VAR 0 5
4180: PPUSH
4181: LD_INT 1
4183: PPUSH
4184: LD_INT 0
4186: PPUSH
4187: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
4191: LD_VAR 0 2
4195: PPUSH
4196: LD_VAR 0 5
4200: PPUSH
4201: CALL_OW 52
// end else
4205: GO 4249
// begin if GetClass ( i ) = 2 then
4207: LD_VAR 0 2
4211: PPUSH
4212: CALL_OW 257
4216: PUSH
4217: LD_INT 2
4219: EQUAL
4220: IFFALSE 4234
// SetClass ( i , 1 ) ;
4222: LD_VAR 0 2
4226: PPUSH
4227: LD_INT 1
4229: PPUSH
4230: CALL_OW 336
// PlaceUnitArea ( i , startArea , false ) ;
4234: LD_VAR 0 2
4238: PPUSH
4239: LD_INT 1
4241: PPUSH
4242: LD_INT 0
4244: PPUSH
4245: CALL_OW 49
// end ;
4249: GO 4043
4251: POP
4252: POP
// uc_side := 4 ;
4253: LD_ADDR_OWVAR 20
4257: PUSH
4258: LD_INT 4
4260: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
4261: LD_ADDR_EXP 19
4265: PUSH
4266: LD_STRING Harisson
4268: PPUSH
4269: LD_INT 0
4271: PPUSH
4272: LD_STRING 
4274: PPUSH
4275: CALL 31161 0 3
4279: ST_TO_ADDR
// PrepareScout ;
4280: CALL 4289 0 0
// end ;
4284: LD_VAR 0 1
4288: RET
// function PrepareScout ; var ape ; begin
4289: LD_INT 0
4291: PPUSH
4292: PPUSH
// uc_side := 4 ;
4293: LD_ADDR_OWVAR 20
4297: PUSH
4298: LD_INT 4
4300: ST_TO_ADDR
// uc_nation := 1 ;
4301: LD_ADDR_OWVAR 21
4305: PUSH
4306: LD_INT 1
4308: ST_TO_ADDR
// if LoadVariable ( FrankIn06 , 0 ) then
4309: LD_STRING FrankIn06
4311: PPUSH
4312: LD_INT 0
4314: PPUSH
4315: CALL_OW 30
4319: IFFALSE 4336
// Frank := CreateCharacter ( 06c_Frank ) else
4321: LD_ADDR_EXP 15
4325: PUSH
4326: LD_STRING 06c_Frank
4328: PPUSH
4329: CALL_OW 34
4333: ST_TO_ADDR
4334: GO 4376
// if LoadVariable ( FrankInDelta , 0 ) then
4336: LD_STRING FrankInDelta
4338: PPUSH
4339: LD_INT 0
4341: PPUSH
4342: CALL_OW 30
4346: IFFALSE 4363
// Frank := CreateCharacter ( 05_Frank ) else
4348: LD_ADDR_EXP 15
4352: PUSH
4353: LD_STRING 05_Frank
4355: PPUSH
4356: CALL_OW 34
4360: ST_TO_ADDR
4361: GO 4376
// Frank := CreateCharacter ( 04_Frank ) ;
4363: LD_ADDR_EXP 15
4367: PUSH
4368: LD_STRING 04_Frank
4370: PPUSH
4371: CALL_OW 34
4375: ST_TO_ADDR
// if Frank then
4376: LD_EXP 15
4380: IFFALSE 4513
// begin PlaceUnitArea ( Frank , scoutArea , false ) ;
4382: LD_EXP 15
4386: PPUSH
4387: LD_INT 2
4389: PPUSH
4390: LD_INT 0
4392: PPUSH
4393: CALL_OW 49
// SetClass ( Frank , 1 ) ;
4397: LD_EXP 15
4401: PPUSH
4402: LD_INT 1
4404: PPUSH
4405: CALL_OW 336
// uc_side := 0 ;
4409: LD_ADDR_OWVAR 20
4413: PUSH
4414: LD_INT 0
4416: ST_TO_ADDR
// uc_nation := 0 ;
4417: LD_ADDR_OWVAR 21
4421: PUSH
4422: LD_INT 0
4424: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 0 ) ;
4425: LD_INT 0
4427: PPUSH
4428: LD_INT 12
4430: PPUSH
4431: LD_INT 0
4433: PPUSH
4434: CALL_OW 380
// ape := CreateHuman ;
4438: LD_ADDR_VAR 0 2
4442: PUSH
4443: CALL_OW 44
4447: ST_TO_ADDR
// PlaceUnitXYR ( ape , GetX ( Frank ) , GetY ( Frank ) , 5 , false ) ;
4448: LD_VAR 0 2
4452: PPUSH
4453: LD_EXP 15
4457: PPUSH
4458: CALL_OW 250
4462: PPUSH
4463: LD_EXP 15
4467: PPUSH
4468: CALL_OW 251
4472: PPUSH
4473: LD_INT 5
4475: PPUSH
4476: LD_INT 0
4478: PPUSH
4479: CALL_OW 50
// ComTurnUnit ( ape , Frank ) ;
4483: LD_VAR 0 2
4487: PPUSH
4488: LD_EXP 15
4492: PPUSH
4493: CALL_OW 119
// ComTurnUnit ( Frank , ape ) ;
4497: LD_EXP 15
4501: PPUSH
4502: LD_VAR 0 2
4506: PPUSH
4507: CALL_OW 119
// exit ;
4511: GO 4556
// end ; Kikuchi := PrepareUnit ( Yamoko , false ,  ) ;
4513: LD_ADDR_EXP 18
4517: PUSH
4518: LD_STRING Yamoko
4520: PPUSH
4521: LD_INT 0
4523: PPUSH
4524: LD_STRING 
4526: PPUSH
4527: CALL 31161 0 3
4531: ST_TO_ADDR
// PlaceUnitArea ( Kikuchi , scoutArea , false ) ;
4532: LD_EXP 18
4536: PPUSH
4537: LD_INT 2
4539: PPUSH
4540: LD_INT 0
4542: PPUSH
4543: CALL_OW 49
// ComHold ( Kikuchi ) ;
4547: LD_EXP 18
4551: PPUSH
4552: CALL_OW 140
// end ; end_of_file
4556: LD_VAR 0 1
4560: RET
// export ru_rebuild_list ; export function PrepareRussians ; var i , j , r , un , skill , filter , tmp , dep_list , lab_list , fac_list , breastworks_list , bunker_list , turret_list , weapons_list , personel_counter ; begin
4561: LD_INT 0
4563: PPUSH
4564: PPUSH
4565: PPUSH
4566: PPUSH
4567: PPUSH
4568: PPUSH
4569: PPUSH
4570: PPUSH
4571: PPUSH
4572: PPUSH
4573: PPUSH
4574: PPUSH
4575: PPUSH
4576: PPUSH
4577: PPUSH
4578: PPUSH
// ru_rebuild_list := [ ] ;
4579: LD_ADDR_EXP 20
4583: PUSH
4584: EMPTY
4585: ST_TO_ADDR
// uc_side := 3 ;
4586: LD_ADDR_OWVAR 20
4590: PUSH
4591: LD_INT 3
4593: ST_TO_ADDR
// uc_nation := 3 ;
4594: LD_ADDR_OWVAR 21
4598: PUSH
4599: LD_INT 3
4601: ST_TO_ADDR
// if Difficulty > 1 then
4602: LD_OWVAR 67
4606: PUSH
4607: LD_INT 1
4609: GREATER
4610: IFFALSE 4746
// begin bc_type := b_breastwork ;
4612: LD_ADDR_OWVAR 42
4616: PUSH
4617: LD_INT 31
4619: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 78 , 74 , 2 ) ;
4620: LD_INT 78
4622: PPUSH
4623: LD_INT 74
4625: PPUSH
4626: LD_INT 2
4628: PPUSH
4629: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 171 , 193 , 4 ) ;
4633: LD_INT 171
4635: PPUSH
4636: LD_INT 193
4638: PPUSH
4639: LD_INT 4
4641: PPUSH
4642: CALL_OW 47
// bc_type := b_turret ;
4646: LD_ADDR_OWVAR 42
4650: PUSH
4651: LD_INT 33
4653: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 129 , 96 , 3 ) ;
4654: LD_INT 129
4656: PPUSH
4657: LD_INT 96
4659: PPUSH
4660: LD_INT 3
4662: PPUSH
4663: CALL_OW 47
// if Difficulty > 2 then
4667: LD_OWVAR 67
4671: PUSH
4672: LD_INT 2
4674: GREATER
4675: IFFALSE 4746
// begin RemoveUnit ( HexInfo ( 83 , 141 ) ) ;
4677: LD_INT 83
4679: PPUSH
4680: LD_INT 141
4682: PPUSH
4683: CALL_OW 428
4687: PPUSH
4688: CALL_OW 64
// RemoveUnit ( HexInfo ( 78 , 133 ) ) ;
4692: LD_INT 78
4694: PPUSH
4695: LD_INT 133
4697: PPUSH
4698: CALL_OW 428
4702: PPUSH
4703: CALL_OW 64
// CreateAndPlaceBuildingXYD ( 83 , 141 , 2 ) ;
4707: LD_INT 83
4709: PPUSH
4710: LD_INT 141
4712: PPUSH
4713: LD_INT 2
4715: PPUSH
4716: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 78 , 133 , 2 ) ;
4720: LD_INT 78
4722: PPUSH
4723: LD_INT 133
4725: PPUSH
4726: LD_INT 2
4728: PPUSH
4729: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 145 , 112 , 3 ) ;
4733: LD_INT 145
4735: PPUSH
4736: LD_INT 112
4738: PPUSH
4739: LD_INT 3
4741: PPUSH
4742: CALL_OW 47
// end ; end ; dep_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
4746: LD_ADDR_VAR 0 9
4750: PUSH
4751: LD_INT 22
4753: PUSH
4754: LD_INT 3
4756: PUSH
4757: EMPTY
4758: LIST
4759: LIST
4760: PUSH
4761: LD_INT 2
4763: PUSH
4764: LD_INT 30
4766: PUSH
4767: LD_INT 0
4769: PUSH
4770: EMPTY
4771: LIST
4772: LIST
4773: PUSH
4774: LD_INT 30
4776: PUSH
4777: LD_INT 1
4779: PUSH
4780: EMPTY
4781: LIST
4782: LIST
4783: PUSH
4784: EMPTY
4785: LIST
4786: LIST
4787: LIST
4788: PUSH
4789: EMPTY
4790: LIST
4791: LIST
4792: PPUSH
4793: CALL_OW 69
4797: ST_TO_ADDR
// lab_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
4798: LD_ADDR_VAR 0 10
4802: PUSH
4803: LD_INT 22
4805: PUSH
4806: LD_INT 3
4808: PUSH
4809: EMPTY
4810: LIST
4811: LIST
4812: PUSH
4813: LD_INT 2
4815: PUSH
4816: LD_INT 30
4818: PUSH
4819: LD_INT 6
4821: PUSH
4822: EMPTY
4823: LIST
4824: LIST
4825: PUSH
4826: LD_INT 30
4828: PUSH
4829: LD_INT 7
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: PUSH
4836: LD_INT 30
4838: PUSH
4839: LD_INT 8
4841: PUSH
4842: EMPTY
4843: LIST
4844: LIST
4845: PUSH
4846: EMPTY
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: PUSH
4852: EMPTY
4853: LIST
4854: LIST
4855: PPUSH
4856: CALL_OW 69
4860: ST_TO_ADDR
// fac_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
4861: LD_ADDR_VAR 0 11
4865: PUSH
4866: LD_INT 22
4868: PUSH
4869: LD_INT 3
4871: PUSH
4872: EMPTY
4873: LIST
4874: LIST
4875: PUSH
4876: LD_INT 30
4878: PUSH
4879: LD_INT 3
4881: PUSH
4882: EMPTY
4883: LIST
4884: LIST
4885: PUSH
4886: EMPTY
4887: LIST
4888: LIST
4889: PPUSH
4890: CALL_OW 69
4894: ST_TO_ADDR
// breastworks_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
4895: LD_ADDR_VAR 0 12
4899: PUSH
4900: LD_INT 22
4902: PUSH
4903: LD_INT 3
4905: PUSH
4906: EMPTY
4907: LIST
4908: LIST
4909: PUSH
4910: LD_INT 30
4912: PUSH
4913: LD_INT 31
4915: PUSH
4916: EMPTY
4917: LIST
4918: LIST
4919: PUSH
4920: EMPTY
4921: LIST
4922: LIST
4923: PPUSH
4924: CALL_OW 69
4928: ST_TO_ADDR
// bunker_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
4929: LD_ADDR_VAR 0 13
4933: PUSH
4934: LD_INT 22
4936: PUSH
4937: LD_INT 3
4939: PUSH
4940: EMPTY
4941: LIST
4942: LIST
4943: PUSH
4944: LD_INT 30
4946: PUSH
4947: LD_INT 32
4949: PUSH
4950: EMPTY
4951: LIST
4952: LIST
4953: PUSH
4954: EMPTY
4955: LIST
4956: LIST
4957: PPUSH
4958: CALL_OW 69
4962: ST_TO_ADDR
// turret_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
4963: LD_ADDR_VAR 0 14
4967: PUSH
4968: LD_INT 22
4970: PUSH
4971: LD_INT 3
4973: PUSH
4974: EMPTY
4975: LIST
4976: LIST
4977: PUSH
4978: LD_INT 30
4980: PUSH
4981: LD_INT 33
4983: PUSH
4984: EMPTY
4985: LIST
4986: LIST
4987: PUSH
4988: EMPTY
4989: LIST
4990: LIST
4991: PPUSH
4992: CALL_OW 69
4996: ST_TO_ADDR
// weapons_list := [ [ ru_heavy_machine_gun , 5 ] , [ ru_gatling_gun , 50 ] , [ ru_gun , 30 ] , [ ru_heavy_gun , 15 ] ] ;
4997: LD_ADDR_VAR 0 15
5001: PUSH
5002: LD_INT 42
5004: PUSH
5005: LD_INT 5
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: PUSH
5012: LD_INT 43
5014: PUSH
5015: LD_INT 50
5017: PUSH
5018: EMPTY
5019: LIST
5020: LIST
5021: PUSH
5022: LD_INT 44
5024: PUSH
5025: LD_INT 30
5027: PUSH
5028: EMPTY
5029: LIST
5030: LIST
5031: PUSH
5032: LD_INT 46
5034: PUSH
5035: LD_INT 15
5037: PUSH
5038: EMPTY
5039: LIST
5040: LIST
5041: PUSH
5042: EMPTY
5043: LIST
5044: LIST
5045: LIST
5046: LIST
5047: ST_TO_ADDR
// personel_counter := [ 0 , 4 , 6 , 3 ] ;
5048: LD_ADDR_VAR 0 16
5052: PUSH
5053: LD_INT 0
5055: PUSH
5056: LD_INT 4
5058: PUSH
5059: LD_INT 6
5061: PUSH
5062: LD_INT 3
5064: PUSH
5065: EMPTY
5066: LIST
5067: LIST
5068: LIST
5069: LIST
5070: ST_TO_ADDR
// skill := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
5071: LD_ADDR_VAR 0 6
5075: PUSH
5076: LD_INT 4
5078: PUSH
5079: LD_INT 5
5081: PUSH
5082: LD_INT 6
5084: PUSH
5085: LD_INT 6
5087: PUSH
5088: EMPTY
5089: LIST
5090: LIST
5091: LIST
5092: LIST
5093: PUSH
5094: LD_OWVAR 67
5098: ARRAY
5099: ST_TO_ADDR
// SetBName ( ru_dep_main , am_tukh ) ;
5100: LD_INT 16
5102: PPUSH
5103: LD_STRING am_tukh
5105: PPUSH
5106: CALL_OW 500
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
5110: LD_ADDR_VAR 0 2
5114: PUSH
5115: LD_INT 21
5117: PUSH
5118: LD_INT 3
5120: PUSH
5121: EMPTY
5122: LIST
5123: LIST
5124: PPUSH
5125: CALL_OW 69
5129: PUSH
5130: FOR_IN
5131: IFFALSE 5168
// SetBLevel ( i , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5133: LD_VAR 0 2
5137: PPUSH
5138: LD_INT 4
5140: PUSH
5141: LD_INT 5
5143: PUSH
5144: LD_INT 6
5146: PUSH
5147: LD_INT 7
5149: PUSH
5150: EMPTY
5151: LIST
5152: LIST
5153: LIST
5154: LIST
5155: PUSH
5156: LD_OWVAR 67
5160: ARRAY
5161: PPUSH
5162: CALL_OW 241
5166: GO 5130
5168: POP
5169: POP
// for i in dep_list do
5170: LD_ADDR_VAR 0 2
5174: PUSH
5175: LD_VAR 0 9
5179: PUSH
5180: FOR_IN
5181: IFFALSE 5225
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
5183: LD_VAR 0 2
5187: PPUSH
5188: CALL_OW 274
5192: PPUSH
5193: LD_INT 1
5195: PPUSH
5196: LD_INT 1000
5198: PPUSH
5199: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
5203: LD_VAR 0 2
5207: PPUSH
5208: CALL_OW 274
5212: PPUSH
5213: LD_INT 2
5215: PPUSH
5216: LD_INT 1000
5218: PPUSH
5219: CALL_OW 277
// end ;
5223: GO 5180
5225: POP
5226: POP
// InitHc ;
5227: CALL_OW 19
// tmp := bunker_list * [ 45 , 60 , 75 , 80 ] [ Difficulty ] div 100 ;
5231: LD_ADDR_VAR 0 8
5235: PUSH
5236: LD_VAR 0 13
5240: PUSH
5241: LD_INT 45
5243: PUSH
5244: LD_INT 60
5246: PUSH
5247: LD_INT 75
5249: PUSH
5250: LD_INT 80
5252: PUSH
5253: EMPTY
5254: LIST
5255: LIST
5256: LIST
5257: LIST
5258: PUSH
5259: LD_OWVAR 67
5263: ARRAY
5264: MUL
5265: PUSH
5266: LD_INT 100
5268: DIV
5269: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , tmp ) ;
5270: LD_ADDR_VAR 0 16
5274: PUSH
5275: LD_VAR 0 16
5279: PPUSH
5280: LD_INT 1
5282: PPUSH
5283: LD_VAR 0 8
5287: PPUSH
5288: CALL_OW 1
5292: ST_TO_ADDR
// tmp := [ ] ;
5293: LD_ADDR_VAR 0 8
5297: PUSH
5298: EMPTY
5299: ST_TO_ADDR
// for i in bunker_list do
5300: LD_ADDR_VAR 0 2
5304: PUSH
5305: LD_VAR 0 13
5309: PUSH
5310: FOR_IN
5311: IFFALSE 5407
// if i mod 10 + 1 < tmp then
5313: LD_VAR 0 2
5317: PUSH
5318: LD_INT 10
5320: MOD
5321: PUSH
5322: LD_INT 1
5324: PLUS
5325: PUSH
5326: LD_VAR 0 8
5330: LESS
5331: IFFALSE 5376
// tmp := Insert ( tmp , i mod rand ( 3 , 5 ) + 1 , i ) else
5333: LD_ADDR_VAR 0 8
5337: PUSH
5338: LD_VAR 0 8
5342: PPUSH
5343: LD_VAR 0 2
5347: PUSH
5348: LD_INT 3
5350: PPUSH
5351: LD_INT 5
5353: PPUSH
5354: CALL_OW 12
5358: MOD
5359: PUSH
5360: LD_INT 1
5362: PLUS
5363: PPUSH
5364: LD_VAR 0 2
5368: PPUSH
5369: CALL_OW 2
5373: ST_TO_ADDR
5374: GO 5405
// tmp := Insert ( tmp , tmp + 1 , i ) ;
5376: LD_ADDR_VAR 0 8
5380: PUSH
5381: LD_VAR 0 8
5385: PPUSH
5386: LD_VAR 0 8
5390: PUSH
5391: LD_INT 1
5393: PLUS
5394: PPUSH
5395: LD_VAR 0 2
5399: PPUSH
5400: CALL_OW 2
5404: ST_TO_ADDR
5405: GO 5310
5407: POP
5408: POP
// bunker_list := tmp ;
5409: LD_ADDR_VAR 0 13
5413: PUSH
5414: LD_VAR 0 8
5418: ST_TO_ADDR
// for i in bunker_list ^ turret_list do
5419: LD_ADDR_VAR 0 2
5423: PUSH
5424: LD_VAR 0 13
5428: PUSH
5429: LD_VAR 0 14
5433: ADD
5434: PUSH
5435: FOR_IN
5436: IFFALSE 5459
// PlaceWeaponTurret ( i , GetTurretWeaponBase ( i ) ) ;
5438: LD_VAR 0 2
5442: PPUSH
5443: LD_VAR 0 2
5447: PPUSH
5448: CALL 2208 0 1
5452: PPUSH
5453: CALL_OW 431
5457: GO 5435
5459: POP
5460: POP
// while ( personel_counter [ 1 ] ) do
5461: LD_VAR 0 16
5465: PUSH
5466: LD_INT 1
5468: ARRAY
5469: IFFALSE 5577
// begin i := rand ( 1 , bunker_list ) ;
5471: LD_ADDR_VAR 0 2
5475: PUSH
5476: LD_INT 1
5478: PPUSH
5479: LD_VAR 0 13
5483: PPUSH
5484: CALL_OW 12
5488: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5489: LD_INT 0
5491: PPUSH
5492: LD_INT 1
5494: PPUSH
5495: LD_VAR 0 6
5499: PPUSH
5500: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , bunker_list [ i ] ) ;
5504: CALL_OW 44
5508: PPUSH
5509: LD_VAR 0 13
5513: PUSH
5514: LD_VAR 0 2
5518: ARRAY
5519: PPUSH
5520: CALL_OW 52
// bunker_list := Delete ( bunker_list , i ) ;
5524: LD_ADDR_VAR 0 13
5528: PUSH
5529: LD_VAR 0 13
5533: PPUSH
5534: LD_VAR 0 2
5538: PPUSH
5539: CALL_OW 3
5543: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , personel_counter [ 1 ] - 1 ) ;
5544: LD_ADDR_VAR 0 16
5548: PUSH
5549: LD_VAR 0 16
5553: PPUSH
5554: LD_INT 1
5556: PPUSH
5557: LD_VAR 0 16
5561: PUSH
5562: LD_INT 1
5564: ARRAY
5565: PUSH
5566: LD_INT 1
5568: MINUS
5569: PPUSH
5570: CALL_OW 1
5574: ST_TO_ADDR
// end ;
5575: GO 5461
// for i = 1 to personel_counter [ 2 ] do
5577: LD_ADDR_VAR 0 2
5581: PUSH
5582: DOUBLE
5583: LD_INT 1
5585: DEC
5586: ST_TO_ADDR
5587: LD_VAR 0 16
5591: PUSH
5592: LD_INT 2
5594: ARRAY
5595: PUSH
5596: FOR_TO
5597: IFFALSE 5628
// begin PrepareHuman ( false , 2 , skill ) ;
5599: LD_INT 0
5601: PPUSH
5602: LD_INT 2
5604: PPUSH
5605: LD_VAR 0 6
5609: PPUSH
5610: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru_dep_main ) ;
5614: CALL_OW 44
5618: PPUSH
5619: LD_INT 16
5621: PPUSH
5622: CALL_OW 52
// end ;
5626: GO 5596
5628: POP
5629: POP
// for i = 1 to personel_counter [ 3 ] do
5630: LD_ADDR_VAR 0 2
5634: PUSH
5635: DOUBLE
5636: LD_INT 1
5638: DEC
5639: ST_TO_ADDR
5640: LD_VAR 0 16
5644: PUSH
5645: LD_INT 3
5647: ARRAY
5648: PUSH
5649: FOR_TO
5650: IFFALSE 5697
// begin PrepareHuman ( false , 3 , skill ) ;
5652: LD_INT 0
5654: PPUSH
5655: LD_INT 3
5657: PPUSH
5658: LD_VAR 0 6
5662: PPUSH
5663: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , fac_list [ i mod 2 + 1 ] ) ;
5667: CALL_OW 44
5671: PPUSH
5672: LD_VAR 0 11
5676: PUSH
5677: LD_VAR 0 2
5681: PUSH
5682: LD_INT 2
5684: MOD
5685: PUSH
5686: LD_INT 1
5688: PLUS
5689: ARRAY
5690: PPUSH
5691: CALL_OW 52
// end ;
5695: GO 5649
5697: POP
5698: POP
// for i = 1 to personel_counter [ 4 ] do
5699: LD_ADDR_VAR 0 2
5703: PUSH
5704: DOUBLE
5705: LD_INT 1
5707: DEC
5708: ST_TO_ADDR
5709: LD_VAR 0 16
5713: PUSH
5714: LD_INT 4
5716: ARRAY
5717: PUSH
5718: FOR_TO
5719: IFFALSE 5756
// begin PrepareHuman ( false , 4 , skill ) ;
5721: LD_INT 0
5723: PPUSH
5724: LD_INT 4
5726: PPUSH
5727: LD_VAR 0 6
5731: PPUSH
5732: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , lab_list [ 1 ] ) ;
5736: CALL_OW 44
5740: PPUSH
5741: LD_VAR 0 10
5745: PUSH
5746: LD_INT 1
5748: ARRAY
5749: PPUSH
5750: CALL_OW 52
// end ;
5754: GO 5718
5756: POP
5757: POP
// for i in breastworks_list do
5758: LD_ADDR_VAR 0 2
5762: PUSH
5763: LD_VAR 0 12
5767: PUSH
5768: FOR_IN
5769: IFFALSE 5881
// begin r := GetDir ( i ) ;
5771: LD_ADDR_VAR 0 4
5775: PUSH
5776: LD_VAR 0 2
5780: PPUSH
5781: CALL_OW 254
5785: ST_TO_ADDR
// if r > 3 then
5786: LD_VAR 0 4
5790: PUSH
5791: LD_INT 3
5793: GREATER
5794: IFFALSE 5812
// r := r - 3 else
5796: LD_ADDR_VAR 0 4
5800: PUSH
5801: LD_VAR 0 4
5805: PUSH
5806: LD_INT 3
5808: MINUS
5809: ST_TO_ADDR
5810: GO 5826
// r := r + 3 ;
5812: LD_ADDR_VAR 0 4
5816: PUSH
5817: LD_VAR 0 4
5821: PUSH
5822: LD_INT 3
5824: PLUS
5825: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5826: LD_INT 0
5828: PPUSH
5829: LD_INT 1
5831: PPUSH
5832: LD_VAR 0 6
5836: PPUSH
5837: CALL_OW 380
// un := CreateHuman ;
5841: LD_ADDR_VAR 0 5
5845: PUSH
5846: CALL_OW 44
5850: ST_TO_ADDR
// SetDir ( un , r ) ;
5851: LD_VAR 0 5
5855: PPUSH
5856: LD_VAR 0 4
5860: PPUSH
5861: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
5865: LD_VAR 0 5
5869: PPUSH
5870: LD_VAR 0 2
5874: PPUSH
5875: CALL_OW 52
// end ;
5879: GO 5768
5881: POP
5882: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) ;
5883: LD_ADDR_VAR 0 8
5887: PUSH
5888: LD_INT 22
5890: PUSH
5891: LD_INT 3
5893: PUSH
5894: EMPTY
5895: LIST
5896: LIST
5897: PUSH
5898: LD_INT 25
5900: PUSH
5901: LD_INT 3
5903: PUSH
5904: EMPTY
5905: LIST
5906: LIST
5907: PUSH
5908: EMPTY
5909: LIST
5910: LIST
5911: PPUSH
5912: CALL_OW 69
5916: ST_TO_ADDR
// r := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
5917: LD_ADDR_VAR 0 4
5921: PUSH
5922: LD_INT 4
5924: PUSH
5925: LD_INT 5
5927: PUSH
5928: LD_INT 6
5930: PUSH
5931: LD_INT 6
5933: PUSH
5934: EMPTY
5935: LIST
5936: LIST
5937: LIST
5938: LIST
5939: PUSH
5940: LD_OWVAR 67
5944: ARRAY
5945: ST_TO_ADDR
// for i = 1 to r do
5946: LD_ADDR_VAR 0 2
5950: PUSH
5951: DOUBLE
5952: LD_INT 1
5954: DEC
5955: ST_TO_ADDR
5956: LD_VAR 0 4
5960: PUSH
5961: FOR_TO
5962: IFFALSE 6135
// begin un := PrepareTank ( 3 , 3 , [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked ] [ i mod 3 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
5964: LD_ADDR_VAR 0 5
5968: PUSH
5969: LD_INT 3
5971: PPUSH
5972: LD_INT 3
5974: PPUSH
5975: LD_INT 22
5977: PUSH
5978: LD_INT 22
5980: PUSH
5981: LD_INT 24
5983: PUSH
5984: EMPTY
5985: LIST
5986: LIST
5987: LIST
5988: PUSH
5989: LD_VAR 0 2
5993: PUSH
5994: LD_INT 3
5996: MOD
5997: PUSH
5998: LD_INT 1
6000: PLUS
6001: ARRAY
6002: PPUSH
6003: LD_INT 1
6005: PPUSH
6006: LD_INT 1
6008: PPUSH
6009: LD_INT 43
6011: PUSH
6012: LD_INT 44
6014: PUSH
6015: LD_INT 42
6017: PUSH
6018: EMPTY
6019: LIST
6020: LIST
6021: LIST
6022: PUSH
6023: LD_VAR 0 2
6027: PUSH
6028: LD_INT 3
6030: MOD
6031: PUSH
6032: LD_INT 1
6034: PLUS
6035: ARRAY
6036: PPUSH
6037: LD_INT 100
6039: PPUSH
6040: CALL 520 0 7
6044: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
6045: LD_VAR 0 5
6049: PPUSH
6050: LD_INT 0
6052: PPUSH
6053: LD_INT 5
6055: PPUSH
6056: CALL_OW 12
6060: PPUSH
6061: CALL_OW 233
// PlaceUnitArea ( un , parkingArea , false ) ;
6065: LD_VAR 0 5
6069: PPUSH
6070: LD_INT 5
6072: PPUSH
6073: LD_INT 0
6075: PPUSH
6076: CALL_OW 49
// if i > tmp - 2 then
6080: LD_VAR 0 2
6084: PUSH
6085: LD_VAR 0 8
6089: PUSH
6090: LD_INT 2
6092: MINUS
6093: GREATER
6094: IFFALSE 6098
// continue ;
6096: GO 5961
// ComExitBuilding ( tmp [ i ] ) ;
6098: LD_VAR 0 8
6102: PUSH
6103: LD_VAR 0 2
6107: ARRAY
6108: PPUSH
6109: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , un ) ;
6113: LD_VAR 0 8
6117: PUSH
6118: LD_VAR 0 2
6122: ARRAY
6123: PPUSH
6124: LD_VAR 0 5
6128: PPUSH
6129: CALL_OW 180
// end ;
6133: GO 5961
6135: POP
6136: POP
// end ;
6137: LD_VAR 0 1
6141: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) do var i , filter , tmp , engs , enemy ;
6142: LD_INT 22
6144: PUSH
6145: LD_INT 3
6147: PUSH
6148: EMPTY
6149: LIST
6150: LIST
6151: PUSH
6152: LD_INT 25
6154: PUSH
6155: LD_INT 2
6157: PUSH
6158: EMPTY
6159: LIST
6160: LIST
6161: PUSH
6162: EMPTY
6163: LIST
6164: LIST
6165: PPUSH
6166: CALL_OW 69
6170: IFFALSE 6902
6172: GO 6174
6174: DISABLE
6175: LD_INT 0
6177: PPUSH
6178: PPUSH
6179: PPUSH
6180: PPUSH
6181: PPUSH
// begin enable ;
6182: ENABLE
// filter := FilterUnitsInArea ( baseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
6183: LD_ADDR_VAR 0 2
6187: PUSH
6188: LD_INT 6
6190: PPUSH
6191: LD_INT 3
6193: PUSH
6194: LD_INT 24
6196: PUSH
6197: LD_INT 1000
6199: PUSH
6200: EMPTY
6201: LIST
6202: LIST
6203: PUSH
6204: EMPTY
6205: LIST
6206: LIST
6207: PUSH
6208: LD_INT 21
6210: PUSH
6211: LD_INT 3
6213: PUSH
6214: EMPTY
6215: LIST
6216: LIST
6217: PUSH
6218: EMPTY
6219: LIST
6220: LIST
6221: PPUSH
6222: CALL_OW 70
6226: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
6227: LD_ADDR_VAR 0 4
6231: PUSH
6232: LD_INT 22
6234: PUSH
6235: LD_INT 3
6237: PUSH
6238: EMPTY
6239: LIST
6240: LIST
6241: PUSH
6242: LD_INT 25
6244: PUSH
6245: LD_INT 2
6247: PUSH
6248: EMPTY
6249: LIST
6250: LIST
6251: PUSH
6252: EMPTY
6253: LIST
6254: LIST
6255: PPUSH
6256: CALL_OW 69
6260: ST_TO_ADDR
// if not filter and not ru_rebuild_list then
6261: LD_VAR 0 2
6265: NOT
6266: PUSH
6267: LD_EXP 20
6271: NOT
6272: AND
6273: IFFALSE 6343
// begin for i in engs do
6275: LD_ADDR_VAR 0 1
6279: PUSH
6280: LD_VAR 0 4
6284: PUSH
6285: FOR_IN
6286: IFFALSE 6341
// if GetLives ( i ) = 1000 and not HasTask ( i ) and not IsInUnit ( i ) then
6288: LD_VAR 0 1
6292: PPUSH
6293: CALL_OW 256
6297: PUSH
6298: LD_INT 1000
6300: EQUAL
6301: PUSH
6302: LD_VAR 0 1
6306: PPUSH
6307: CALL_OW 314
6311: NOT
6312: AND
6313: PUSH
6314: LD_VAR 0 1
6318: PPUSH
6319: CALL_OW 310
6323: NOT
6324: AND
6325: IFFALSE 6339
// ComEnterUnit ( i , ru_dep_main ) ;
6327: LD_VAR 0 1
6331: PPUSH
6332: LD_INT 16
6334: PPUSH
6335: CALL_OW 120
6339: GO 6285
6341: POP
6342: POP
// end ; if UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) then
6343: LD_VAR 0 4
6347: PPUSH
6348: LD_INT 3
6350: PUSH
6351: LD_INT 24
6353: PUSH
6354: LD_INT 650
6356: PUSH
6357: EMPTY
6358: LIST
6359: LIST
6360: PUSH
6361: EMPTY
6362: LIST
6363: LIST
6364: PPUSH
6365: CALL_OW 72
6369: IFFALSE 6462
// begin tmp := UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) ;
6371: LD_ADDR_VAR 0 3
6375: PUSH
6376: LD_VAR 0 4
6380: PPUSH
6381: LD_INT 3
6383: PUSH
6384: LD_INT 24
6386: PUSH
6387: LD_INT 650
6389: PUSH
6390: EMPTY
6391: LIST
6392: LIST
6393: PUSH
6394: EMPTY
6395: LIST
6396: LIST
6397: PPUSH
6398: CALL_OW 72
6402: ST_TO_ADDR
// for i in tmp do
6403: LD_ADDR_VAR 0 1
6407: PUSH
6408: LD_VAR 0 3
6412: PUSH
6413: FOR_IN
6414: IFFALSE 6460
// if not IsInArea ( i , mainBaseArea ) then
6416: LD_VAR 0 1
6420: PPUSH
6421: LD_INT 14
6423: PPUSH
6424: CALL_OW 308
6428: NOT
6429: IFFALSE 6458
// begin ComMoveXY ( i , 129 , 125 ) ;
6431: LD_VAR 0 1
6435: PPUSH
6436: LD_INT 129
6438: PPUSH
6439: LD_INT 125
6441: PPUSH
6442: CALL_OW 111
// AddComWait ( i , 0 0$30 ) ;
6446: LD_VAR 0 1
6450: PPUSH
6451: LD_INT 1050
6453: PPUSH
6454: CALL_OW 202
// end ;
6458: GO 6413
6460: POP
6461: POP
// end ; engs := UnitFilter ( engs , [ f_lives , 650 ] ) ;
6462: LD_ADDR_VAR 0 4
6466: PUSH
6467: LD_VAR 0 4
6471: PPUSH
6472: LD_INT 24
6474: PUSH
6475: LD_INT 650
6477: PUSH
6478: EMPTY
6479: LIST
6480: LIST
6481: PPUSH
6482: CALL_OW 72
6486: ST_TO_ADDR
// if not engs then
6487: LD_VAR 0 4
6491: NOT
6492: IFFALSE 6496
// exit ;
6494: GO 6902
// if filter then
6496: LD_VAR 0 2
6500: IFFALSE 6759
// begin for i in engs do
6502: LD_ADDR_VAR 0 1
6506: PUSH
6507: LD_VAR 0 4
6511: PUSH
6512: FOR_IN
6513: IFFALSE 6537
// if IsInUnit ( i ) then
6515: LD_VAR 0 1
6519: PPUSH
6520: CALL_OW 310
6524: IFFALSE 6535
// ComExitBuilding ( i ) ;
6526: LD_VAR 0 1
6530: PPUSH
6531: CALL_OW 122
6535: GO 6512
6537: POP
6538: POP
// wait ( 3 ) ;
6539: LD_INT 3
6541: PPUSH
6542: CALL_OW 67
// if filter >= 2 and engs >= 2 then
6546: LD_VAR 0 2
6550: PUSH
6551: LD_INT 2
6553: GREATEREQUAL
6554: PUSH
6555: LD_VAR 0 4
6559: PUSH
6560: LD_INT 2
6562: GREATEREQUAL
6563: AND
6564: IFFALSE 6712
// begin for i = 1 to engs / 2 do
6566: LD_ADDR_VAR 0 1
6570: PUSH
6571: DOUBLE
6572: LD_INT 1
6574: DEC
6575: ST_TO_ADDR
6576: LD_VAR 0 4
6580: PUSH
6581: LD_INT 2
6583: DIVREAL
6584: PUSH
6585: FOR_TO
6586: IFFALSE 6632
// if not HasTask ( engs [ i ] ) then
6588: LD_VAR 0 4
6592: PUSH
6593: LD_VAR 0 1
6597: ARRAY
6598: PPUSH
6599: CALL_OW 314
6603: NOT
6604: IFFALSE 6630
// ComRepairBuilding ( engs [ i ] , filter [ 1 ] ) ;
6606: LD_VAR 0 4
6610: PUSH
6611: LD_VAR 0 1
6615: ARRAY
6616: PPUSH
6617: LD_VAR 0 2
6621: PUSH
6622: LD_INT 1
6624: ARRAY
6625: PPUSH
6626: CALL_OW 130
6630: GO 6585
6632: POP
6633: POP
// for i = engs / 2 + 1 to engs do
6634: LD_ADDR_VAR 0 1
6638: PUSH
6639: DOUBLE
6640: LD_VAR 0 4
6644: PUSH
6645: LD_INT 2
6647: DIVREAL
6648: PUSH
6649: LD_INT 1
6651: PLUS
6652: DEC
6653: ST_TO_ADDR
6654: LD_VAR 0 4
6658: PUSH
6659: FOR_TO
6660: IFFALSE 6708
// if not HasTask ( engs [ i ] ) then
6662: LD_VAR 0 4
6666: PUSH
6667: LD_VAR 0 1
6671: ARRAY
6672: PPUSH
6673: CALL_OW 314
6677: NOT
6678: IFFALSE 6706
// ComRepairBuilding ( engs [ i ] , filter [ filter ] ) ;
6680: LD_VAR 0 4
6684: PUSH
6685: LD_VAR 0 1
6689: ARRAY
6690: PPUSH
6691: LD_VAR 0 2
6695: PUSH
6696: LD_VAR 0 2
6700: ARRAY
6701: PPUSH
6702: CALL_OW 130
6706: GO 6659
6708: POP
6709: POP
// end else
6710: GO 6759
// for i in engs do
6712: LD_ADDR_VAR 0 1
6716: PUSH
6717: LD_VAR 0 4
6721: PUSH
6722: FOR_IN
6723: IFFALSE 6757
// if not HasTask ( i ) then
6725: LD_VAR 0 1
6729: PPUSH
6730: CALL_OW 314
6734: NOT
6735: IFFALSE 6755
// ComRepairBuilding ( i , filter [ 1 ] ) ;
6737: LD_VAR 0 1
6741: PPUSH
6742: LD_VAR 0 2
6746: PUSH
6747: LD_INT 1
6749: ARRAY
6750: PPUSH
6751: CALL_OW 130
6755: GO 6722
6757: POP
6758: POP
// end ; enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
6759: LD_ADDR_VAR 0 5
6763: PUSH
6764: LD_INT 81
6766: PUSH
6767: LD_INT 3
6769: PUSH
6770: EMPTY
6771: LIST
6772: LIST
6773: PPUSH
6774: CALL_OW 69
6778: ST_TO_ADDR
// if ru_rebuild_list and not filter then
6779: LD_EXP 20
6783: PUSH
6784: LD_VAR 0 2
6788: NOT
6789: AND
6790: IFFALSE 6902
// begin ComExitBuilding ( engs ) ;
6792: LD_VAR 0 4
6796: PPUSH
6797: CALL_OW 122
// if GetDistUnitXY ( NearestUnitToXY ( enemy , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) > 10 then
6801: LD_VAR 0 5
6805: PPUSH
6806: LD_EXP 20
6810: PUSH
6811: LD_INT 2
6813: ARRAY
6814: PPUSH
6815: LD_EXP 20
6819: PUSH
6820: LD_INT 3
6822: ARRAY
6823: PPUSH
6824: CALL_OW 73
6828: PPUSH
6829: LD_EXP 20
6833: PUSH
6834: LD_INT 2
6836: ARRAY
6837: PPUSH
6838: LD_EXP 20
6842: PUSH
6843: LD_INT 3
6845: ARRAY
6846: PPUSH
6847: CALL_OW 297
6851: PUSH
6852: LD_INT 10
6854: GREATER
6855: IFFALSE 6902
// ComBuild ( engs , ru_rebuild_list [ 1 ] , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] , ru_rebuild_list [ 4 ] ) ;
6857: LD_VAR 0 4
6861: PPUSH
6862: LD_EXP 20
6866: PUSH
6867: LD_INT 1
6869: ARRAY
6870: PPUSH
6871: LD_EXP 20
6875: PUSH
6876: LD_INT 2
6878: ARRAY
6879: PPUSH
6880: LD_EXP 20
6884: PUSH
6885: LD_INT 3
6887: ARRAY
6888: PPUSH
6889: LD_EXP 20
6893: PUSH
6894: LD_INT 4
6896: ARRAY
6897: PPUSH
6898: CALL_OW 145
// end ; end ;
6902: PPOPN 5
6904: END
// every 0 0$1 trigger GetLives ( ru_dep_main ) < 250 do var i , tmp ;
6905: LD_INT 16
6907: PPUSH
6908: CALL_OW 256
6912: PUSH
6913: LD_INT 250
6915: LESS
6916: IFFALSE 7106
6918: GO 6920
6920: DISABLE
6921: LD_INT 0
6923: PPUSH
6924: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
6925: LD_ADDR_VAR 0 2
6929: PUSH
6930: LD_INT 22
6932: PUSH
6933: LD_INT 3
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: PUSH
6940: LD_INT 2
6942: PUSH
6943: LD_INT 25
6945: PUSH
6946: LD_INT 1
6948: PUSH
6949: EMPTY
6950: LIST
6951: LIST
6952: PUSH
6953: LD_INT 25
6955: PUSH
6956: LD_INT 3
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: PUSH
6963: LD_INT 25
6965: PUSH
6966: LD_INT 4
6968: PUSH
6969: EMPTY
6970: LIST
6971: LIST
6972: PUSH
6973: EMPTY
6974: LIST
6975: LIST
6976: LIST
6977: LIST
6978: PUSH
6979: EMPTY
6980: LIST
6981: LIST
6982: PPUSH
6983: CALL_OW 69
6987: ST_TO_ADDR
// ComExitBuilding ( tmp ) ;
6988: LD_VAR 0 2
6992: PPUSH
6993: CALL_OW 122
// wait ( 3 ) ;
6997: LD_INT 3
6999: PPUSH
7000: CALL_OW 67
// ComMoveXY ( tmp , 156 , 211 ) ;
7004: LD_VAR 0 2
7008: PPUSH
7009: LD_INT 156
7011: PPUSH
7012: LD_INT 211
7014: PPUSH
7015: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7019: LD_INT 35
7021: PPUSH
7022: CALL_OW 67
// for i in tmp do
7026: LD_ADDR_VAR 0 1
7030: PUSH
7031: LD_VAR 0 2
7035: PUSH
7036: FOR_IN
7037: IFFALSE 7097
// if IsInArea ( i , escapeArea ) then
7039: LD_VAR 0 1
7043: PPUSH
7044: LD_INT 15
7046: PPUSH
7047: CALL_OW 308
7051: IFFALSE 7080
// begin RemoveUnit ( i ) ;
7053: LD_VAR 0 1
7057: PPUSH
7058: CALL_OW 64
// tmp := tmp diff i ;
7062: LD_ADDR_VAR 0 2
7066: PUSH
7067: LD_VAR 0 2
7071: PUSH
7072: LD_VAR 0 1
7076: DIFF
7077: ST_TO_ADDR
// end else
7078: GO 7095
// ComMoveXY ( i , 156 , 211 ) ;
7080: LD_VAR 0 1
7084: PPUSH
7085: LD_INT 156
7087: PPUSH
7088: LD_INT 211
7090: PPUSH
7091: CALL_OW 111
7095: GO 7036
7097: POP
7098: POP
// until not tmp ;
7099: LD_VAR 0 2
7103: NOT
7104: IFFALSE 7019
// end ;
7106: PPOPN 2
7108: END
// every 0 0$01 trigger GetLives ( ru_dep_main ) > 250 and FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_outside ] ] ] ) do var i , tmp ;
7109: LD_INT 16
7111: PPUSH
7112: CALL_OW 256
7116: PUSH
7117: LD_INT 250
7119: GREATER
7120: PUSH
7121: LD_INT 22
7123: PUSH
7124: LD_INT 3
7126: PUSH
7127: EMPTY
7128: LIST
7129: LIST
7130: PUSH
7131: LD_INT 25
7133: PUSH
7134: LD_INT 1
7136: PUSH
7137: EMPTY
7138: LIST
7139: LIST
7140: PUSH
7141: LD_INT 56
7143: PUSH
7144: EMPTY
7145: LIST
7146: PUSH
7147: EMPTY
7148: LIST
7149: LIST
7150: LIST
7151: PUSH
7152: EMPTY
7153: LIST
7154: PPUSH
7155: CALL_OW 69
7159: AND
7160: IFFALSE 7272
7162: GO 7164
7164: DISABLE
7165: LD_INT 0
7167: PPUSH
7168: PPUSH
// begin enable ;
7169: ENABLE
// tmp := FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ] ) ;
7170: LD_ADDR_VAR 0 2
7174: PUSH
7175: LD_INT 22
7177: PUSH
7178: LD_INT 3
7180: PUSH
7181: EMPTY
7182: LIST
7183: LIST
7184: PUSH
7185: LD_INT 25
7187: PUSH
7188: LD_INT 1
7190: PUSH
7191: EMPTY
7192: LIST
7193: LIST
7194: PUSH
7195: LD_INT 56
7197: PUSH
7198: EMPTY
7199: LIST
7200: PUSH
7201: LD_INT 3
7203: PUSH
7204: LD_INT 60
7206: PUSH
7207: EMPTY
7208: LIST
7209: PUSH
7210: EMPTY
7211: LIST
7212: LIST
7213: PUSH
7214: EMPTY
7215: LIST
7216: LIST
7217: LIST
7218: LIST
7219: PUSH
7220: EMPTY
7221: LIST
7222: PPUSH
7223: CALL_OW 69
7227: ST_TO_ADDR
// if not tmp then
7228: LD_VAR 0 2
7232: NOT
7233: IFFALSE 7237
// exit ;
7235: GO 7272
// for i in tmp do
7237: LD_ADDR_VAR 0 1
7241: PUSH
7242: LD_VAR 0 2
7246: PUSH
7247: FOR_IN
7248: IFFALSE 7270
// GoToAnotherTower ( i , 0 , 143 , 143 ) ;
7250: LD_VAR 0 1
7254: PPUSH
7255: LD_INT 0
7257: PPUSH
7258: LD_INT 143
7260: PPUSH
7261: LD_INT 143
7263: PPUSH
7264: CALL 838 0 4
7268: GO 7247
7270: POP
7271: POP
// end ;
7272: PPOPN 2
7274: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do var i , tmp , doc ;
7275: LD_INT 22
7277: PUSH
7278: LD_INT 3
7280: PUSH
7281: EMPTY
7282: LIST
7283: LIST
7284: PUSH
7285: LD_INT 25
7287: PUSH
7288: LD_INT 4
7290: PUSH
7291: EMPTY
7292: LIST
7293: LIST
7294: PUSH
7295: EMPTY
7296: LIST
7297: LIST
7298: PPUSH
7299: CALL_OW 69
7303: IFFALSE 7557
7305: GO 7307
7307: DISABLE
7308: LD_INT 0
7310: PPUSH
7311: PPUSH
7312: PPUSH
// begin enable ;
7313: ENABLE
// tmp := FilterUnitsInArea ( mainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7314: LD_ADDR_VAR 0 2
7318: PUSH
7319: LD_INT 14
7321: PPUSH
7322: LD_INT 22
7324: PUSH
7325: LD_INT 3
7327: PUSH
7328: EMPTY
7329: LIST
7330: LIST
7331: PUSH
7332: LD_INT 21
7334: PUSH
7335: LD_INT 1
7337: PUSH
7338: EMPTY
7339: LIST
7340: LIST
7341: PUSH
7342: LD_INT 3
7344: PUSH
7345: LD_INT 24
7347: PUSH
7348: LD_INT 1000
7350: PUSH
7351: EMPTY
7352: LIST
7353: LIST
7354: PUSH
7355: EMPTY
7356: LIST
7357: LIST
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: LIST
7363: PPUSH
7364: CALL_OW 70
7368: ST_TO_ADDR
// doc := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
7369: LD_ADDR_VAR 0 3
7373: PUSH
7374: LD_INT 22
7376: PUSH
7377: LD_INT 3
7379: PUSH
7380: EMPTY
7381: LIST
7382: LIST
7383: PUSH
7384: LD_INT 25
7386: PUSH
7387: LD_INT 4
7389: PUSH
7390: EMPTY
7391: LIST
7392: LIST
7393: PUSH
7394: EMPTY
7395: LIST
7396: LIST
7397: PPUSH
7398: CALL_OW 69
7402: ST_TO_ADDR
// if not doc then
7403: LD_VAR 0 3
7407: NOT
7408: IFFALSE 7412
// exit ;
7410: GO 7557
// if not tmp then
7412: LD_VAR 0 2
7416: NOT
7417: IFFALSE 7508
// begin if not IsInUnit ( doc [ 1 ] ) then
7419: LD_VAR 0 3
7423: PUSH
7424: LD_INT 1
7426: ARRAY
7427: PPUSH
7428: CALL_OW 310
7432: NOT
7433: IFFALSE 7506
// ComEnterUnit ( doc , FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ) ;
7435: LD_VAR 0 3
7439: PPUSH
7440: LD_INT 22
7442: PUSH
7443: LD_INT 3
7445: PUSH
7446: EMPTY
7447: LIST
7448: LIST
7449: PUSH
7450: LD_INT 2
7452: PUSH
7453: LD_INT 30
7455: PUSH
7456: LD_INT 6
7458: PUSH
7459: EMPTY
7460: LIST
7461: LIST
7462: PUSH
7463: LD_INT 30
7465: PUSH
7466: LD_INT 7
7468: PUSH
7469: EMPTY
7470: LIST
7471: LIST
7472: PUSH
7473: LD_INT 30
7475: PUSH
7476: LD_INT 8
7478: PUSH
7479: EMPTY
7480: LIST
7481: LIST
7482: PUSH
7483: EMPTY
7484: LIST
7485: LIST
7486: LIST
7487: LIST
7488: PUSH
7489: EMPTY
7490: LIST
7491: LIST
7492: PPUSH
7493: CALL_OW 69
7497: PUSH
7498: LD_INT 1
7500: ARRAY
7501: PPUSH
7502: CALL_OW 120
// exit ;
7506: GO 7557
// end ; if IsInUnit ( doc [ 1 ] ) then
7508: LD_VAR 0 3
7512: PUSH
7513: LD_INT 1
7515: ARRAY
7516: PPUSH
7517: CALL_OW 310
7521: IFFALSE 7532
// ComExitBuilding ( doc ) ;
7523: LD_VAR 0 3
7527: PPUSH
7528: CALL_OW 122
// wait ( 3 ) ;
7532: LD_INT 3
7534: PPUSH
7535: CALL_OW 67
// ComHeal ( doc , tmp [ 1 ] ) ;
7539: LD_VAR 0 3
7543: PPUSH
7544: LD_VAR 0 2
7548: PUSH
7549: LD_INT 1
7551: ARRAY
7552: PPUSH
7553: CALL_OW 128
// end ;
7557: PPOPN 3
7559: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do var i , tmp , attacking , areas , area ;
7560: LD_INT 22
7562: PUSH
7563: LD_INT 3
7565: PUSH
7566: EMPTY
7567: LIST
7568: LIST
7569: PUSH
7570: LD_INT 25
7572: PUSH
7573: LD_INT 3
7575: PUSH
7576: EMPTY
7577: LIST
7578: LIST
7579: PUSH
7580: EMPTY
7581: LIST
7582: LIST
7583: PPUSH
7584: CALL_OW 69
7588: PUSH
7589: LD_INT 22
7591: PUSH
7592: LD_INT 3
7594: PUSH
7595: EMPTY
7596: LIST
7597: LIST
7598: PUSH
7599: LD_INT 21
7601: PUSH
7602: LD_INT 2
7604: PUSH
7605: EMPTY
7606: LIST
7607: LIST
7608: PUSH
7609: EMPTY
7610: LIST
7611: LIST
7612: PPUSH
7613: CALL_OW 69
7617: AND
7618: IFFALSE 8032
7620: GO 7622
7622: DISABLE
7623: LD_INT 0
7625: PPUSH
7626: PPUSH
7627: PPUSH
7628: PPUSH
7629: PPUSH
// begin enable ;
7630: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
7631: LD_ADDR_VAR 0 2
7635: PUSH
7636: LD_INT 22
7638: PUSH
7639: LD_INT 3
7641: PUSH
7642: EMPTY
7643: LIST
7644: LIST
7645: PUSH
7646: LD_INT 21
7648: PUSH
7649: LD_INT 2
7651: PUSH
7652: EMPTY
7653: LIST
7654: LIST
7655: PUSH
7656: LD_INT 3
7658: PUSH
7659: LD_INT 58
7661: PUSH
7662: EMPTY
7663: LIST
7664: PUSH
7665: EMPTY
7666: LIST
7667: LIST
7668: PUSH
7669: EMPTY
7670: LIST
7671: LIST
7672: LIST
7673: PPUSH
7674: CALL_OW 69
7678: ST_TO_ADDR
// areas := [ sectorAlpha , sectorBeta , sectorDelta , mainBaseArea ] ;
7679: LD_ADDR_VAR 0 4
7683: PUSH
7684: LD_INT 10
7686: PUSH
7687: LD_INT 11
7689: PUSH
7690: LD_INT 12
7692: PUSH
7693: LD_INT 14
7695: PUSH
7696: EMPTY
7697: LIST
7698: LIST
7699: LIST
7700: LIST
7701: ST_TO_ADDR
// area := 0 ;
7702: LD_ADDR_VAR 0 5
7706: PUSH
7707: LD_INT 0
7709: ST_TO_ADDR
// attacking := false ;
7710: LD_ADDR_VAR 0 3
7714: PUSH
7715: LD_INT 0
7717: ST_TO_ADDR
// for i in tmp do
7718: LD_ADDR_VAR 0 1
7722: PUSH
7723: LD_VAR 0 2
7727: PUSH
7728: FOR_IN
7729: IFFALSE 7815
// if GetDistUnits ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) < 10 then
7731: LD_VAR 0 1
7735: PPUSH
7736: LD_INT 22
7738: PUSH
7739: LD_INT 1
7741: PUSH
7742: EMPTY
7743: LIST
7744: LIST
7745: PPUSH
7746: CALL_OW 69
7750: PPUSH
7751: LD_VAR 0 1
7755: PPUSH
7756: CALL_OW 74
7760: PPUSH
7761: CALL_OW 296
7765: PUSH
7766: LD_INT 10
7768: LESS
7769: IFFALSE 7813
// begin ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
7771: LD_VAR 0 1
7775: PPUSH
7776: LD_INT 22
7778: PUSH
7779: LD_INT 1
7781: PUSH
7782: EMPTY
7783: LIST
7784: LIST
7785: PPUSH
7786: CALL_OW 69
7790: PPUSH
7791: LD_VAR 0 1
7795: PPUSH
7796: CALL_OW 74
7800: PPUSH
7801: CALL_OW 115
// attacking := true ;
7805: LD_ADDR_VAR 0 3
7809: PUSH
7810: LD_INT 1
7812: ST_TO_ADDR
// end ;
7813: GO 7728
7815: POP
7816: POP
// if attacking then
7817: LD_VAR 0 3
7821: IFFALSE 7825
// exit ;
7823: GO 8032
// for i in areas do
7825: LD_ADDR_VAR 0 1
7829: PUSH
7830: LD_VAR 0 4
7834: PUSH
7835: FOR_IN
7836: IFFALSE 7873
// if FilterUnitsInArea ( i , [ f_side , 1 ] ) then
7838: LD_VAR 0 1
7842: PPUSH
7843: LD_INT 22
7845: PUSH
7846: LD_INT 1
7848: PUSH
7849: EMPTY
7850: LIST
7851: LIST
7852: PPUSH
7853: CALL_OW 70
7857: IFFALSE 7871
// begin area := i ;
7859: LD_ADDR_VAR 0 5
7863: PUSH
7864: LD_VAR 0 1
7868: ST_TO_ADDR
// break ;
7869: GO 7873
// end ;
7871: GO 7835
7873: POP
7874: POP
// if area then
7875: LD_VAR 0 5
7879: IFFALSE 8032
// begin for i in tmp do
7881: LD_ADDR_VAR 0 1
7885: PUSH
7886: LD_VAR 0 2
7890: PUSH
7891: FOR_IN
7892: IFFALSE 8030
// begin if GetFuel ( i ) < 33 then
7894: LD_VAR 0 1
7898: PPUSH
7899: CALL_OW 261
7903: PUSH
7904: LD_INT 33
7906: LESS
7907: IFFALSE 7921
// SetFuel ( i , 33 ) ;
7909: LD_VAR 0 1
7913: PPUSH
7914: LD_INT 33
7916: PPUSH
7917: CALL_OW 240
// if GetDistUnits ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) < 10 then
7921: LD_VAR 0 1
7925: PPUSH
7926: LD_INT 22
7928: PUSH
7929: LD_INT 1
7931: PUSH
7932: EMPTY
7933: LIST
7934: LIST
7935: PPUSH
7936: CALL_OW 69
7940: PPUSH
7941: LD_VAR 0 1
7945: PPUSH
7946: CALL_OW 74
7950: PPUSH
7951: CALL_OW 296
7955: PUSH
7956: LD_INT 10
7958: LESS
7959: IFFALSE 7997
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) else
7961: LD_VAR 0 1
7965: PPUSH
7966: LD_INT 22
7968: PUSH
7969: LD_INT 1
7971: PUSH
7972: EMPTY
7973: LIST
7974: LIST
7975: PPUSH
7976: CALL_OW 69
7980: PPUSH
7981: LD_VAR 0 1
7985: PPUSH
7986: CALL_OW 74
7990: PPUSH
7991: CALL_OW 115
7995: GO 8028
// if not IsInArea ( i , area ) then
7997: LD_VAR 0 1
8001: PPUSH
8002: LD_VAR 0 5
8006: PPUSH
8007: CALL_OW 308
8011: NOT
8012: IFFALSE 8028
// ComMoveToArea ( i , area ) ;
8014: LD_VAR 0 1
8018: PPUSH
8019: LD_VAR 0 5
8023: PPUSH
8024: CALL_OW 113
// end ;
8028: GO 7891
8030: POP
8031: POP
// end ; end ;
8032: PPOPN 5
8034: END
// every 15 15$00 trigger Difficulty > 1 do var i , j , un , veh , time , count ;
8035: LD_OWVAR 67
8039: PUSH
8040: LD_INT 1
8042: GREATER
8043: IFFALSE 8328
8045: GO 8047
8047: DISABLE
8048: LD_INT 0
8050: PPUSH
8051: PPUSH
8052: PPUSH
8053: PPUSH
8054: PPUSH
8055: PPUSH
// begin uc_side := 3 ;
8056: LD_ADDR_OWVAR 20
8060: PUSH
8061: LD_INT 3
8063: ST_TO_ADDR
// uc_nation := 3 ;
8064: LD_ADDR_OWVAR 21
8068: PUSH
8069: LD_INT 3
8071: ST_TO_ADDR
// time := [ 9 9$00 , 7 7$00 , 6 6$00 , 5 5$30 ] [ Difficulty ] ;
8072: LD_ADDR_VAR 0 5
8076: PUSH
8077: LD_INT 18900
8079: PUSH
8080: LD_INT 14700
8082: PUSH
8083: LD_INT 12600
8085: PUSH
8086: LD_INT 11550
8088: PUSH
8089: EMPTY
8090: LIST
8091: LIST
8092: LIST
8093: LIST
8094: PUSH
8095: LD_OWVAR 67
8099: ARRAY
8100: ST_TO_ADDR
// count := [ 2 , 2 , 3 , 3 ] [ Difficulty ] ;
8101: LD_ADDR_VAR 0 6
8105: PUSH
8106: LD_INT 2
8108: PUSH
8109: LD_INT 2
8111: PUSH
8112: LD_INT 3
8114: PUSH
8115: LD_INT 3
8117: PUSH
8118: EMPTY
8119: LIST
8120: LIST
8121: LIST
8122: LIST
8123: PUSH
8124: LD_OWVAR 67
8128: ARRAY
8129: ST_TO_ADDR
// for i = 1 to count do
8130: LD_ADDR_VAR 0 1
8134: PUSH
8135: DOUBLE
8136: LD_INT 1
8138: DEC
8139: ST_TO_ADDR
8140: LD_VAR 0 6
8144: PUSH
8145: FOR_TO
8146: IFFALSE 8326
// begin wait ( time ) ;
8148: LD_VAR 0 5
8152: PPUSH
8153: CALL_OW 67
// for j = 1 to rand ( 1 , Difficulty ) do
8157: LD_ADDR_VAR 0 2
8161: PUSH
8162: DOUBLE
8163: LD_INT 1
8165: DEC
8166: ST_TO_ADDR
8167: LD_INT 1
8169: PPUSH
8170: LD_OWVAR 67
8174: PPUSH
8175: CALL_OW 12
8179: PUSH
8180: FOR_TO
8181: IFFALSE 8322
// begin veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 80 ) ;
8183: LD_ADDR_VAR 0 4
8187: PUSH
8188: LD_INT 3
8190: PPUSH
8191: LD_INT 3
8193: PPUSH
8194: LD_INT 22
8196: PPUSH
8197: LD_INT 1
8199: PPUSH
8200: LD_INT 1
8202: PPUSH
8203: LD_INT 43
8205: PUSH
8206: LD_INT 44
8208: PUSH
8209: LD_INT 42
8211: PUSH
8212: EMPTY
8213: LIST
8214: LIST
8215: LIST
8216: PUSH
8217: LD_VAR 0 1
8221: PUSH
8222: LD_INT 3
8224: MOD
8225: PUSH
8226: LD_INT 1
8228: PLUS
8229: ARRAY
8230: PPUSH
8231: LD_INT 80
8233: PPUSH
8234: CALL 520 0 7
8238: ST_TO_ADDR
// PlaceUnitArea ( veh , southArea , false ) ;
8239: LD_VAR 0 4
8243: PPUSH
8244: LD_INT 13
8246: PPUSH
8247: LD_INT 0
8249: PPUSH
8250: CALL_OW 49
// PrepareHuman ( false , 3 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
8254: LD_INT 0
8256: PPUSH
8257: LD_INT 3
8259: PPUSH
8260: LD_INT 4
8262: PUSH
8263: LD_INT 5
8265: PUSH
8266: LD_INT 5
8268: PUSH
8269: EMPTY
8270: LIST
8271: LIST
8272: LIST
8273: PUSH
8274: LD_OWVAR 67
8278: ARRAY
8279: PPUSH
8280: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
8284: CALL_OW 44
8288: PPUSH
8289: LD_VAR 0 4
8293: PPUSH
8294: CALL_OW 52
// wait ( 0 0$01 ) ;
8298: LD_INT 35
8300: PPUSH
8301: CALL_OW 67
// ComMoveXY ( veh , 143 , 143 ) ;
8305: LD_VAR 0 4
8309: PPUSH
8310: LD_INT 143
8312: PPUSH
8313: LD_INT 143
8315: PPUSH
8316: CALL_OW 111
// end ;
8320: GO 8180
8322: POP
8323: POP
// end ;
8324: GO 8145
8326: POP
8327: POP
// end ;
8328: PPOPN 6
8330: END
// every 8 8$00 do var i , un , time ;
8331: GO 8333
8333: DISABLE
8334: LD_INT 0
8336: PPUSH
8337: PPUSH
8338: PPUSH
// begin time := [ 3 3$00 , 1 1$00 , 0 0$30 ] ;
8339: LD_ADDR_VAR 0 3
8343: PUSH
8344: LD_INT 6300
8346: PUSH
8347: LD_INT 2100
8349: PUSH
8350: LD_INT 1050
8352: PUSH
8353: EMPTY
8354: LIST
8355: LIST
8356: LIST
8357: ST_TO_ADDR
// wait ( time ) ;
8358: LD_VAR 0 3
8362: PPUSH
8363: CALL_OW 67
// uc_side := 3 ;
8367: LD_ADDR_OWVAR 20
8371: PUSH
8372: LD_INT 3
8374: ST_TO_ADDR
// uc_nation := 3 ;
8375: LD_ADDR_OWVAR 21
8379: PUSH
8380: LD_INT 3
8382: ST_TO_ADDR
// for i = 1 to 2 do
8383: LD_ADDR_VAR 0 1
8387: PUSH
8388: DOUBLE
8389: LD_INT 1
8391: DEC
8392: ST_TO_ADDR
8393: LD_INT 2
8395: PUSH
8396: FOR_TO
8397: IFFALSE 8460
// begin PrepareHuman ( false , 1 , 4 ) ;
8399: LD_INT 0
8401: PPUSH
8402: LD_INT 1
8404: PPUSH
8405: LD_INT 4
8407: PPUSH
8408: CALL_OW 380
// un := CreateHuman ;
8412: LD_ADDR_VAR 0 2
8416: PUSH
8417: CALL_OW 44
8421: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_dep_main ) ;
8422: LD_VAR 0 2
8426: PPUSH
8427: LD_INT 16
8429: PPUSH
8430: CALL_OW 52
// ComExitBuilding ( un ) ;
8434: LD_VAR 0 2
8438: PPUSH
8439: CALL_OW 122
// AddComAgressiveMove ( un , 41 , 76 ) ;
8443: LD_VAR 0 2
8447: PPUSH
8448: LD_INT 41
8450: PPUSH
8451: LD_INT 76
8453: PPUSH
8454: CALL_OW 174
// end ;
8458: GO 8396
8460: POP
8461: POP
// end ; end_of_file
8462: PPOPN 3
8464: END
// export function Action ; begin
8465: LD_INT 0
8467: PPUSH
// CenterNowOnXY ( 28 , 3 ) ;
8468: LD_INT 28
8470: PPUSH
8471: LD_INT 3
8473: PPUSH
8474: CALL_OW 86
// PlaceSeeing ( 41 , 76 , 1 , 10 ) ;
8478: LD_INT 41
8480: PPUSH
8481: LD_INT 76
8483: PPUSH
8484: LD_INT 1
8486: PPUSH
8487: LD_INT 10
8489: PPUSH
8490: CALL_OW 330
// RemoveSeeing ( 41 , 76 , 1 ) ;
8494: LD_INT 41
8496: PPUSH
8497: LD_INT 76
8499: PPUSH
8500: LD_INT 1
8502: PPUSH
8503: CALL_OW 331
// InGameOn ;
8507: CALL_OW 8
// SayRadio ( Harisson , D2-Har-1 ) ;
8511: LD_EXP 19
8515: PPUSH
8516: LD_STRING D2-Har-1
8518: PPUSH
8519: CALL_OW 94
// InGameOff ;
8523: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
8527: LD_STRING M1
8529: PPUSH
8530: CALL_OW 337
// end ;
8534: LD_VAR 0 1
8538: RET
// every 0 0$1 trigger buildings_counter > 1 do var un ;
8539: LD_EXP 4
8543: PUSH
8544: LD_INT 1
8546: GREATER
8547: IFFALSE 8638
8549: GO 8551
8551: DISABLE
8552: LD_INT 0
8554: PPUSH
// begin un := GetRandom ( sex_male ) [ 1 ] ;
8555: LD_ADDR_VAR 0 1
8559: PUSH
8560: LD_INT 1
8562: PPUSH
8563: CALL 608 0 1
8567: PUSH
8568: LD_INT 1
8570: ARRAY
8571: ST_TO_ADDR
// Say ( un , D2a-Sol1-1 ) ;
8572: LD_VAR 0 1
8576: PPUSH
8577: LD_STRING D2a-Sol1-1
8579: PPUSH
8580: CALL_OW 88
// if not un then
8584: LD_VAR 0 1
8588: NOT
8589: IFFALSE 8620
// begin un := GetRandom ( sex_female ) [ 1 ] ;
8591: LD_ADDR_VAR 0 1
8595: PUSH
8596: LD_INT 2
8598: PPUSH
8599: CALL 608 0 1
8603: PUSH
8604: LD_INT 1
8606: ARRAY
8607: ST_TO_ADDR
// Say ( un , D2a-FSol1-1 ) ;
8608: LD_VAR 0 1
8612: PPUSH
8613: LD_STRING D2a-FSol1-1
8615: PPUSH
8616: CALL_OW 88
// end ; if Khatam then
8620: LD_EXP 17
8624: IFFALSE 8638
// Say ( Khatam , D3b-Khat-3 ) ;
8626: LD_EXP 17
8630: PPUSH
8631: LD_STRING D3b-Khat-3
8633: PPUSH
8634: CALL_OW 88
// end ;
8638: PPOPN 1
8640: END
// every 0 0$1 trigger Frank and not Kikuchi and FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , GetX ( Frank ) , GetY ( Frank ) , 7 ] ] ) and not InBattle ( 1 ) and not InBattle ( 4 ) do var i , ape ;
8641: LD_EXP 15
8645: PUSH
8646: LD_EXP 18
8650: NOT
8651: AND
8652: PUSH
8653: LD_INT 22
8655: PUSH
8656: LD_INT 1
8658: PUSH
8659: EMPTY
8660: LIST
8661: LIST
8662: PUSH
8663: LD_INT 92
8665: PUSH
8666: LD_EXP 15
8670: PPUSH
8671: CALL_OW 250
8675: PUSH
8676: LD_EXP 15
8680: PPUSH
8681: CALL_OW 251
8685: PUSH
8686: LD_INT 7
8688: PUSH
8689: EMPTY
8690: LIST
8691: LIST
8692: LIST
8693: LIST
8694: PUSH
8695: EMPTY
8696: LIST
8697: LIST
8698: PPUSH
8699: CALL_OW 69
8703: AND
8704: PUSH
8705: LD_INT 1
8707: PPUSH
8708: CALL_OW 463
8712: NOT
8713: AND
8714: PUSH
8715: LD_INT 4
8717: PPUSH
8718: CALL_OW 463
8722: NOT
8723: AND
8724: IFFALSE 9311
8726: GO 8728
8728: DISABLE
8729: LD_INT 0
8731: PPUSH
8732: PPUSH
// begin InGameOn ;
8733: CALL_OW 8
// ape := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
8737: LD_ADDR_VAR 0 2
8741: PUSH
8742: LD_INT 22
8744: PUSH
8745: LD_INT 0
8747: PUSH
8748: EMPTY
8749: LIST
8750: LIST
8751: PUSH
8752: LD_INT 25
8754: PUSH
8755: LD_INT 12
8757: PUSH
8758: EMPTY
8759: LIST
8760: LIST
8761: PUSH
8762: EMPTY
8763: LIST
8764: LIST
8765: PPUSH
8766: CALL_OW 69
8770: ST_TO_ADDR
// ape := NearestUnitToUnit ( ape , Frank ) ;
8771: LD_ADDR_VAR 0 2
8775: PUSH
8776: LD_VAR 0 2
8780: PPUSH
8781: LD_EXP 15
8785: PPUSH
8786: CALL_OW 74
8790: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , Frank , 20 ] ] ) do
8791: LD_ADDR_VAR 0 1
8795: PUSH
8796: LD_INT 22
8798: PUSH
8799: LD_INT 1
8801: PUSH
8802: EMPTY
8803: LIST
8804: LIST
8805: PUSH
8806: LD_INT 21
8808: PUSH
8809: LD_INT 1
8811: PUSH
8812: EMPTY
8813: LIST
8814: LIST
8815: PUSH
8816: LD_INT 91
8818: PUSH
8819: LD_EXP 15
8823: PUSH
8824: LD_INT 20
8826: PUSH
8827: EMPTY
8828: LIST
8829: LIST
8830: LIST
8831: PUSH
8832: EMPTY
8833: LIST
8834: LIST
8835: LIST
8836: PPUSH
8837: CALL_OW 69
8841: PUSH
8842: FOR_IN
8843: IFFALSE 8861
// ComTurnUnit ( i , Frank ) ;
8845: LD_VAR 0 1
8849: PPUSH
8850: LD_EXP 15
8854: PPUSH
8855: CALL_OW 119
8859: GO 8842
8861: POP
8862: POP
// SetSide ( Frank , 1 ) ;
8863: LD_EXP 15
8867: PPUSH
8868: LD_INT 1
8870: PPUSH
8871: CALL_OW 235
// ComMoveUnit ( JMM , Frank ) ;
8875: LD_EXP 9
8879: PPUSH
8880: LD_EXP 15
8884: PPUSH
8885: CALL_OW 112
// AddComTurnUnit ( JMM , Frank ) ;
8889: LD_EXP 9
8893: PPUSH
8894: LD_EXP 15
8898: PPUSH
8899: CALL_OW 179
// CenterOnUnits ( Frank ) ;
8903: LD_EXP 15
8907: PPUSH
8908: CALL_OW 85
// Say ( Frank , D3a-Frank-1 ) ;
8912: LD_EXP 15
8916: PPUSH
8917: LD_STRING D3a-Frank-1
8919: PPUSH
8920: CALL_OW 88
// ComMoveXY ( ape , 42 , 78 ) ;
8924: LD_VAR 0 2
8928: PPUSH
8929: LD_INT 42
8931: PPUSH
8932: LD_INT 78
8934: PPUSH
8935: CALL_OW 111
// AddComTurnUnit ( ape , Frank ) ;
8939: LD_VAR 0 2
8943: PPUSH
8944: LD_EXP 15
8948: PPUSH
8949: CALL_OW 179
// if Lisa then
8953: LD_EXP 14
8957: IFFALSE 8971
// Say ( Lisa , D3a-Lisa-1 ) ;
8959: LD_EXP 14
8963: PPUSH
8964: LD_STRING D3a-Lisa-1
8966: PPUSH
8967: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
8971: LD_EXP 9
8975: PPUSH
8976: LD_STRING D3a-JMM-1
8978: PPUSH
8979: CALL_OW 88
// if Cyrus then
8983: LD_EXP 13
8987: IFFALSE 9001
// Say ( Cyrus , D3a-Cyrus-1 ) ;
8989: LD_EXP 13
8993: PPUSH
8994: LD_STRING D3a-Cyrus-1
8996: PPUSH
8997: CALL_OW 88
// if GetRandom ( sex_male ) then
9001: LD_INT 1
9003: PPUSH
9004: CALL 608 0 1
9008: IFFALSE 9029
// Say ( GetRandom ( sex_male ) [ 1 ] , D3a-Sol1-1 ) ;
9010: LD_INT 1
9012: PPUSH
9013: CALL 608 0 1
9017: PUSH
9018: LD_INT 1
9020: ARRAY
9021: PPUSH
9022: LD_STRING D3a-Sol1-1
9024: PPUSH
9025: CALL_OW 88
// if GetRandom ( sex_female ) then
9029: LD_INT 2
9031: PPUSH
9032: CALL 608 0 1
9036: IFFALSE 9057
// Say ( GetRandom ( sex_female ) [ 1 ] , D3a-FSol1-1 ) ;
9038: LD_INT 2
9040: PPUSH
9041: CALL 608 0 1
9045: PUSH
9046: LD_INT 1
9048: ARRAY
9049: PPUSH
9050: LD_STRING D3a-FSol1-1
9052: PPUSH
9053: CALL_OW 88
// if Gladstone then
9057: LD_EXP 16
9061: IFFALSE 9075
// Say ( Gladstone , D3a-Glad-1 ) ;
9063: LD_EXP 16
9067: PPUSH
9068: LD_STRING D3a-Glad-1
9070: PPUSH
9071: CALL_OW 88
// ComMoveXY ( ape , 60 , 113 ) ;
9075: LD_VAR 0 2
9079: PPUSH
9080: LD_INT 60
9082: PPUSH
9083: LD_INT 113
9085: PPUSH
9086: CALL_OW 111
// Say ( Frank , D3a-Frank-2 ) ;
9090: LD_EXP 15
9094: PPUSH
9095: LD_STRING D3a-Frank-2
9097: PPUSH
9098: CALL_OW 88
// ComTurnUnit ( Frank , JMM ) ;
9102: LD_EXP 15
9106: PPUSH
9107: LD_EXP 9
9111: PPUSH
9112: CALL_OW 119
// Say ( JMM , D3a-JMM-2 ) ;
9116: LD_EXP 9
9120: PPUSH
9121: LD_STRING D3a-JMM-2
9123: PPUSH
9124: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9128: LD_INT 1
9130: PPUSH
9131: LD_INT 4
9133: PPUSH
9134: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9138: LD_INT 85
9140: PPUSH
9141: LD_INT 134
9143: PPUSH
9144: CALL_OW 84
// Say ( Frank , D3a-Frank-3 ) ;
9148: LD_EXP 15
9152: PPUSH
9153: LD_STRING D3a-Frank-3
9155: PPUSH
9156: CALL_OW 88
// Wait ( 0 0$01 ) ;
9160: LD_INT 35
9162: PPUSH
9163: CALL_OW 67
// CenterOnXY ( 166 , 136 ) ;
9167: LD_INT 166
9169: PPUSH
9170: LD_INT 136
9172: PPUSH
9173: CALL_OW 84
// Say ( JMM , D3a-JMM-3 ) ;
9177: LD_EXP 9
9181: PPUSH
9182: LD_STRING D3a-JMM-3
9184: PPUSH
9185: CALL_OW 88
// Wait ( 0 0$01 ) ;
9189: LD_INT 35
9191: PPUSH
9192: CALL_OW 67
// CenterNowOnUnits ( Frank ) ;
9196: LD_EXP 15
9200: PPUSH
9201: CALL_OW 87
// Say ( Frank , D3a-Frank-4 ) ;
9205: LD_EXP 15
9209: PPUSH
9210: LD_STRING D3a-Frank-4
9212: PPUSH
9213: CALL_OW 88
// if Lisa then
9217: LD_EXP 14
9221: IFFALSE 9235
// Say ( Lisa , D3a-Lisa-4 ) ;
9223: LD_EXP 14
9227: PPUSH
9228: LD_STRING D3a-Lisa-4
9230: PPUSH
9231: CALL_OW 88
// Say ( JMM , D3a-JMM-4 ) ;
9235: LD_EXP 9
9239: PPUSH
9240: LD_STRING D3a-JMM-4
9242: PPUSH
9243: CALL_OW 88
// Say ( Frank , D3a-Frank-5 ) ;
9247: LD_EXP 15
9251: PPUSH
9252: LD_STRING D3a-Frank-5
9254: PPUSH
9255: CALL_OW 88
// Say ( JMM , D3a-JMM-5 ) ;
9259: LD_EXP 9
9263: PPUSH
9264: LD_STRING D3a-JMM-5
9266: PPUSH
9267: CALL_OW 88
// Say ( Frank , D3a-Frank-6 ) ;
9271: LD_EXP 15
9275: PPUSH
9276: LD_STRING D3a-Frank-6
9278: PPUSH
9279: CALL_OW 88
// Say ( JMM , D3a-JMM-6 ) ;
9283: LD_EXP 9
9287: PPUSH
9288: LD_STRING D3a-JMM-6
9290: PPUSH
9291: CALL_OW 88
// Say ( Frank , D3a-Frank-7 ) ;
9295: LD_EXP 15
9299: PPUSH
9300: LD_STRING D3a-Frank-7
9302: PPUSH
9303: CALL_OW 88
// InGameOff ;
9307: CALL_OW 9
// end ;
9311: PPOPN 2
9313: END
// every 0 0$1 trigger Kikuchi and not Frank and FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , GetX ( Kikuchi ) , GetY ( Kikuchi ) , 7 ] ] ) and not InBattle ( 1 ) and not InBattle ( 4 ) do
9314: LD_EXP 18
9318: PUSH
9319: LD_EXP 15
9323: NOT
9324: AND
9325: PUSH
9326: LD_INT 22
9328: PUSH
9329: LD_INT 1
9331: PUSH
9332: EMPTY
9333: LIST
9334: LIST
9335: PUSH
9336: LD_INT 92
9338: PUSH
9339: LD_EXP 18
9343: PPUSH
9344: CALL_OW 250
9348: PUSH
9349: LD_EXP 18
9353: PPUSH
9354: CALL_OW 251
9358: PUSH
9359: LD_INT 7
9361: PUSH
9362: EMPTY
9363: LIST
9364: LIST
9365: LIST
9366: LIST
9367: PUSH
9368: EMPTY
9369: LIST
9370: LIST
9371: PPUSH
9372: CALL_OW 69
9376: AND
9377: PUSH
9378: LD_INT 1
9380: PPUSH
9381: CALL_OW 463
9385: NOT
9386: AND
9387: PUSH
9388: LD_INT 4
9390: PPUSH
9391: CALL_OW 463
9395: NOT
9396: AND
9397: IFFALSE 9577
9399: GO 9401
9401: DISABLE
// begin InGameOn ;
9402: CALL_OW 8
// ComTurnUnit ( JMM , Kikuchi ) ;
9406: LD_EXP 9
9410: PPUSH
9411: LD_EXP 18
9415: PPUSH
9416: CALL_OW 119
// ComTurnUnit ( Kikuchi , JMM ) ;
9420: LD_EXP 18
9424: PPUSH
9425: LD_EXP 9
9429: PPUSH
9430: CALL_OW 119
// CenterOnUnits ( Kikuchi ) ;
9434: LD_EXP 18
9438: PPUSH
9439: CALL_OW 85
// Say ( Kikuchi , D3b-Yam-1 ) ;
9443: LD_EXP 18
9447: PPUSH
9448: LD_STRING D3b-Yam-1
9450: PPUSH
9451: CALL_OW 88
// Say ( JMM , D3b-JMM-1 ) ;
9455: LD_EXP 9
9459: PPUSH
9460: LD_STRING D3b-JMM-1
9462: PPUSH
9463: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9467: LD_INT 1
9469: PPUSH
9470: LD_INT 4
9472: PPUSH
9473: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9477: LD_INT 85
9479: PPUSH
9480: LD_INT 134
9482: PPUSH
9483: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-2 ) ;
9487: LD_EXP 18
9491: PPUSH
9492: LD_STRING D3b-Yam-2
9494: PPUSH
9495: CALL_OW 88
// Wait ( 0 0$01 ) ;
9499: LD_INT 35
9501: PPUSH
9502: CALL_OW 67
// Say ( JMM , D3b-JMM-2 ) ;
9506: LD_EXP 9
9510: PPUSH
9511: LD_STRING D3b-JMM-2
9513: PPUSH
9514: CALL_OW 88
// CenterOnXY ( 166 , 136 ) ;
9518: LD_INT 166
9520: PPUSH
9521: LD_INT 136
9523: PPUSH
9524: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-3 ) ;
9528: LD_EXP 18
9532: PPUSH
9533: LD_STRING D3b-Yam-3
9535: PPUSH
9536: CALL_OW 88
// CenterNowOnUnits ( JMM ) ;
9540: LD_EXP 9
9544: PPUSH
9545: CALL_OW 87
// Say ( JMM , D3b-JMM-3a ) ;
9549: LD_EXP 9
9553: PPUSH
9554: LD_STRING D3b-JMM-3a
9556: PPUSH
9557: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
9561: LD_EXP 18
9565: PPUSH
9566: LD_INT 1
9568: PPUSH
9569: CALL_OW 235
// InGameOff ;
9573: CALL_OW 9
// end ;
9577: END
// every 0 0$1 trigger FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var un , x , tw , i ;
9578: LD_INT 7
9580: PPUSH
9581: LD_INT 22
9583: PUSH
9584: LD_INT 1
9586: PUSH
9587: EMPTY
9588: LIST
9589: LIST
9590: PUSH
9591: LD_INT 3
9593: PUSH
9594: LD_INT 24
9596: PUSH
9597: LD_INT 1000
9599: PUSH
9600: EMPTY
9601: LIST
9602: LIST
9603: PUSH
9604: EMPTY
9605: LIST
9606: LIST
9607: PUSH
9608: EMPTY
9609: LIST
9610: LIST
9611: PPUSH
9612: CALL_OW 70
9616: IFFALSE 10072
9618: GO 9620
9620: DISABLE
9621: LD_INT 0
9623: PPUSH
9624: PPUSH
9625: PPUSH
9626: PPUSH
// begin repeat wait ( 0 0$1 ) ;
9627: LD_INT 35
9629: PPUSH
9630: CALL_OW 67
// un := FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
9634: LD_ADDR_VAR 0 1
9638: PUSH
9639: LD_INT 7
9641: PPUSH
9642: LD_INT 22
9644: PUSH
9645: LD_INT 1
9647: PUSH
9648: EMPTY
9649: LIST
9650: LIST
9651: PUSH
9652: LD_INT 3
9654: PUSH
9655: LD_INT 24
9657: PUSH
9658: LD_INT 1000
9660: PUSH
9661: EMPTY
9662: LIST
9663: LIST
9664: PUSH
9665: EMPTY
9666: LIST
9667: LIST
9668: PUSH
9669: EMPTY
9670: LIST
9671: LIST
9672: PPUSH
9673: CALL_OW 70
9677: ST_TO_ADDR
// if not un then
9678: LD_VAR 0 1
9682: NOT
9683: IFFALSE 9687
// continue ;
9685: GO 9627
// tw := NearbyTowerHasEnergy ( un [ 1 ] ) ;
9687: LD_ADDR_VAR 0 3
9691: PUSH
9692: LD_VAR 0 1
9696: PUSH
9697: LD_INT 1
9699: ARRAY
9700: PPUSH
9701: CALL 2036 0 1
9705: ST_TO_ADDR
// until tw ;
9706: LD_VAR 0 3
9710: IFFALSE 9627
// DialogueOn ;
9712: CALL_OW 6
// CenterNowOnUnits ( tw ) ;
9716: LD_VAR 0 3
9720: PPUSH
9721: CALL_OW 87
// if Lisa then
9725: LD_EXP 14
9729: IFFALSE 9757
// begin Say ( Lisa , D5-Lisa-1 ) ;
9731: LD_EXP 14
9735: PPUSH
9736: LD_STRING D5-Lisa-1
9738: PPUSH
9739: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
9743: LD_EXP 9
9747: PPUSH
9748: LD_STRING D5-JMM-1a
9750: PPUSH
9751: CALL_OW 88
// end else
9755: GO 9769
// Say ( JMM , D5-JMM-1 ) ;
9757: LD_EXP 9
9761: PPUSH
9762: LD_STRING D5-JMM-1
9764: PPUSH
9765: CALL_OW 88
// DialogueOff ;
9769: CALL_OW 7
// while ( true ) do
9773: LD_INT 1
9775: IFFALSE 9831
// begin wait ( 0 0$01 ) ;
9777: LD_INT 35
9779: PPUSH
9780: CALL_OW 67
// x := FilterUnitsExceptArea ( northElectro , [ [ f_btype , b_oil_power ] , [ f_see , 1 ] ] ) ;
9784: LD_ADDR_VAR 0 2
9788: PUSH
9789: LD_INT 8
9791: PPUSH
9792: LD_INT 30
9794: PUSH
9795: LD_INT 26
9797: PUSH
9798: EMPTY
9799: LIST
9800: LIST
9801: PUSH
9802: LD_INT 101
9804: PUSH
9805: LD_INT 1
9807: PUSH
9808: EMPTY
9809: LIST
9810: LIST
9811: PUSH
9812: EMPTY
9813: LIST
9814: LIST
9815: PPUSH
9816: CALL_OW 71
9820: ST_TO_ADDR
// if x then
9821: LD_VAR 0 2
9825: IFFALSE 9829
// break ;
9827: GO 9831
// end ;
9829: GO 9773
// CenterOnUnits ( x [ 1 ] ) ;
9831: LD_VAR 0 2
9835: PUSH
9836: LD_INT 1
9838: ARRAY
9839: PPUSH
9840: CALL_OW 85
// if Frank and GetSide ( Frank ) = 1 then
9844: LD_EXP 15
9848: PUSH
9849: LD_EXP 15
9853: PPUSH
9854: CALL_OW 255
9858: PUSH
9859: LD_INT 1
9861: EQUAL
9862: AND
9863: IFFALSE 9879
// Say ( Frank , D5a-Frank-1 ) else
9865: LD_EXP 15
9869: PPUSH
9870: LD_STRING D5a-Frank-1
9872: PPUSH
9873: CALL_OW 88
9877: GO 9933
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
9879: LD_EXP 18
9883: PUSH
9884: LD_EXP 18
9888: PPUSH
9889: CALL_OW 255
9893: PUSH
9894: LD_INT 1
9896: EQUAL
9897: AND
9898: IFFALSE 9914
// Say ( Kikuchi , D5a-Yam-1 ) else
9900: LD_EXP 18
9904: PPUSH
9905: LD_STRING D5a-Yam-1
9907: PPUSH
9908: CALL_OW 88
9912: GO 9933
// Say ( GetRandom ( sex_male ) [ 1 ] , D5a-Sol1-1 ) ;
9914: LD_INT 1
9916: PPUSH
9917: CALL 608 0 1
9921: PUSH
9922: LD_INT 1
9924: ARRAY
9925: PPUSH
9926: LD_STRING D5a-Sol1-1
9928: PPUSH
9929: CALL_OW 88
// Say ( JMM , D5a-JMM-1 ) ;
9933: LD_EXP 9
9937: PPUSH
9938: LD_STRING D5a-JMM-1
9940: PPUSH
9941: CALL_OW 88
// if Cyrus then
9945: LD_EXP 13
9949: IFFALSE 9963
// Say ( Cyrus , D5a-Cyrus-1 ) ;
9951: LD_EXP 13
9955: PPUSH
9956: LD_STRING D5a-Cyrus-1
9958: PPUSH
9959: CALL_OW 88
// x := false ;
9963: LD_ADDR_VAR 0 2
9967: PUSH
9968: LD_INT 0
9970: ST_TO_ADDR
// while ( true ) do
9971: LD_INT 1
9973: IFFALSE 10060
// begin wait ( 0 0$01 ) ;
9975: LD_INT 35
9977: PPUSH
9978: CALL_OW 67
// for i in FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) diff ru_dep_west do
9982: LD_ADDR_VAR 0 4
9986: PUSH
9987: LD_INT 2
9989: PUSH
9990: LD_INT 30
9992: PUSH
9993: LD_INT 0
9995: PUSH
9996: EMPTY
9997: LIST
9998: LIST
9999: PUSH
10000: LD_INT 30
10002: PUSH
10003: LD_INT 1
10005: PUSH
10006: EMPTY
10007: LIST
10008: LIST
10009: PUSH
10010: EMPTY
10011: LIST
10012: LIST
10013: LIST
10014: PPUSH
10015: CALL_OW 69
10019: PUSH
10020: LD_INT 1
10022: DIFF
10023: PUSH
10024: FOR_IN
10025: IFFALSE 10048
// if BaseNeedEnergy ( i ) then
10027: LD_VAR 0 4
10031: PPUSH
10032: CALL 1161 0 1
10036: IFFALSE 10046
// x := true ;
10038: LD_ADDR_VAR 0 2
10042: PUSH
10043: LD_INT 1
10045: ST_TO_ADDR
10046: GO 10024
10048: POP
10049: POP
// if x then
10050: LD_VAR 0 2
10054: IFFALSE 10058
// break ;
10056: GO 10060
// end ;
10058: GO 9971
// Say ( JMM , D5b-JMM-1 ) ;
10060: LD_EXP 9
10064: PPUSH
10065: LD_STRING D5b-JMM-1
10067: PPUSH
10068: CALL_OW 88
// end ;
10072: PPOPN 4
10074: END
// every 0 0$1 trigger time_to_end [ 1 ] < tick do
10075: LD_EXP 5
10079: PUSH
10080: LD_INT 1
10082: ARRAY
10083: PUSH
10084: LD_OWVAR 1
10088: LESS
10089: IFFALSE 10289
10091: GO 10093
10093: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10094: LD_INT 16
10096: PPUSH
10097: CALL_OW 301
10101: NOT
10102: IFFALSE 10125
// begin SayRadio ( Harisson , D3b-Har-3 ) ;
10104: LD_EXP 19
10108: PPUSH
10109: LD_STRING D3b-Har-3
10111: PPUSH
10112: CALL_OW 94
// ChangeMissionObjectives ( M2a ) ;
10116: LD_STRING M2a
10118: PPUSH
10119: CALL_OW 337
// end else
10123: GO 10144
// begin SayRadio ( Harisson , D3b-Har-3a ) ;
10125: LD_EXP 19
10129: PPUSH
10130: LD_STRING D3b-Har-3a
10132: PPUSH
10133: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
10137: LD_STRING M2
10139: PPUSH
10140: CALL_OW 337
// end ; can_end := true ;
10144: LD_ADDR_EXP 6
10148: PUSH
10149: LD_INT 1
10151: ST_TO_ADDR
// SetAreaMapShow ( endArea , 1 ) ;
10152: LD_INT 9
10154: PPUSH
10155: LD_INT 1
10157: PPUSH
10158: CALL_OW 424
// Wait ( 0 0$02 ) ;
10162: LD_INT 70
10164: PPUSH
10165: CALL_OW 67
// if Lisa then
10169: LD_EXP 14
10173: IFFALSE 10187
// Say ( Lisa , D3b-Lisa ) ;
10175: LD_EXP 14
10179: PPUSH
10180: LD_STRING D3b-Lisa
10182: PPUSH
10183: CALL_OW 88
// if Bobby then
10187: LD_EXP 12
10191: IFFALSE 10205
// Say ( Bobby , D3b-Bobby-3 ) ;
10193: LD_EXP 12
10197: PPUSH
10198: LD_STRING D3b-Bobby-3
10200: PPUSH
10201: CALL_OW 88
// if Cyrus then
10205: LD_EXP 13
10209: IFFALSE 10223
// Say ( Cyrus , D3b-Cyrus-3 ) ;
10211: LD_EXP 13
10215: PPUSH
10216: LD_STRING D3b-Cyrus-3
10218: PPUSH
10219: CALL_OW 88
// if Frank and GetSide ( Frank ) = 1 then
10223: LD_EXP 15
10227: PUSH
10228: LD_EXP 15
10232: PPUSH
10233: CALL_OW 255
10237: PUSH
10238: LD_INT 1
10240: EQUAL
10241: AND
10242: IFFALSE 10256
// Say ( Frank , D3b-Frank-3 ) ;
10244: LD_EXP 15
10248: PPUSH
10249: LD_STRING D3b-Frank-3
10251: PPUSH
10252: CALL_OW 88
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
10256: LD_EXP 18
10260: PUSH
10261: LD_EXP 18
10265: PPUSH
10266: CALL_OW 255
10270: PUSH
10271: LD_INT 1
10273: EQUAL
10274: AND
10275: IFFALSE 10289
// Say ( Kikuchi , D3b-Yam-4 ) ;
10277: LD_EXP 18
10281: PPUSH
10282: LD_STRING D3b-Yam-4
10284: PPUSH
10285: CALL_OW 88
// end ;
10289: END
// every 0 0$1 trigger time_to_end [ 2 ] < tick do
10290: LD_EXP 5
10294: PUSH
10295: LD_INT 2
10297: ARRAY
10298: PUSH
10299: LD_OWVAR 1
10303: LESS
10304: IFFALSE 10336
10306: GO 10308
10308: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
10309: LD_EXP 19
10313: PPUSH
10314: LD_STRING D4-Har-1
10316: PPUSH
10317: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
10321: LD_STRING M3
10323: PPUSH
10324: CALL_OW 337
// must_end := true ;
10328: LD_ADDR_EXP 7
10332: PUSH
10333: LD_INT 1
10335: ST_TO_ADDR
// end ;
10336: END
// every 0 0$01 trigger time_to_end [ 3 ] < tick do
10337: LD_EXP 5
10341: PUSH
10342: LD_INT 3
10344: ARRAY
10345: PUSH
10346: LD_OWVAR 1
10350: LESS
10351: IFFALSE 10382
10353: GO 10355
10355: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10356: LD_INT 16
10358: PPUSH
10359: CALL_OW 301
10363: NOT
10364: IFFALSE 10375
// YouLost ( TimeOut1 ) else
10366: LD_STRING TimeOut1
10368: PPUSH
10369: CALL_OW 104
10373: GO 10382
// YouLost ( TimeOut2 ) ;
10375: LD_STRING TimeOut2
10377: PPUSH
10378: CALL_OW 104
// end ;
10382: END
// every 0 0$1 trigger IsInArea ( JMM , endArea ) and can_end do var wait_on , i , tmp , m1 , m2 , m3 ;
10383: LD_EXP 9
10387: PPUSH
10388: LD_INT 9
10390: PPUSH
10391: CALL_OW 308
10395: PUSH
10396: LD_EXP 6
10400: AND
10401: IFFALSE 11501
10403: GO 10405
10405: DISABLE
10406: LD_INT 0
10408: PPUSH
10409: PPUSH
10410: PPUSH
10411: PPUSH
10412: PPUSH
10413: PPUSH
// begin wait_on := false ;
10414: LD_ADDR_VAR 0 1
10418: PUSH
10419: LD_INT 0
10421: ST_TO_ADDR
// if FilterPeople ( 1 ) + 0 > ( FilterPeopleArea ( 1 , endArea ) ^ FilterDriversArea ( 1 , endArea ) ) + 0 then
10422: LD_INT 1
10424: PPUSH
10425: CALL 1238 0 1
10429: PUSH
10430: LD_INT 0
10432: PLUS
10433: PUSH
10434: LD_INT 1
10436: PPUSH
10437: LD_INT 9
10439: PPUSH
10440: CALL 1329 0 2
10444: PUSH
10445: LD_INT 1
10447: PPUSH
10448: LD_INT 9
10450: PPUSH
10451: CALL 1376 0 2
10455: ADD
10456: PUSH
10457: LD_INT 0
10459: PLUS
10460: GREATER
10461: IFFALSE 10510
// case Query ( Q1 ) of 1 :
10463: LD_STRING Q1
10465: PPUSH
10466: CALL_OW 97
10470: PUSH
10471: LD_INT 1
10473: DOUBLE
10474: EQUAL
10475: IFTRUE 10479
10477: GO 10490
10479: POP
// wait_on := true ; 2 :
10480: LD_ADDR_VAR 0 1
10484: PUSH
10485: LD_INT 1
10487: ST_TO_ADDR
10488: GO 10510
10490: LD_INT 2
10492: DOUBLE
10493: EQUAL
10494: IFTRUE 10498
10496: GO 10509
10498: POP
// wait_on := false ; end ;
10499: LD_ADDR_VAR 0 1
10503: PUSH
10504: LD_INT 0
10506: ST_TO_ADDR
10507: GO 10510
10509: POP
// repeat wait ( 0 0$01 ) ;
10510: LD_INT 35
10512: PPUSH
10513: CALL_OW 67
// until ( not wait_on ) or ( FilterPeople ( 1 ) + 0 ) = ( FilterPeopleArea ( 1 , endArea ) ^ FilterDriversArea ( 1 , endArea ) ) + 0 ;
10517: LD_VAR 0 1
10521: NOT
10522: PUSH
10523: LD_INT 1
10525: PPUSH
10526: CALL 1238 0 1
10530: PUSH
10531: LD_INT 0
10533: PLUS
10534: PUSH
10535: LD_INT 1
10537: PPUSH
10538: LD_INT 9
10540: PPUSH
10541: CALL 1329 0 2
10545: PUSH
10546: LD_INT 1
10548: PPUSH
10549: LD_INT 9
10551: PPUSH
10552: CALL 1376 0 2
10556: ADD
10557: PUSH
10558: LD_INT 0
10560: PLUS
10561: EQUAL
10562: OR
10563: IFFALSE 10510
// DialogueOn ;
10565: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
10569: LD_EXP 9
10573: PPUSH
10574: CALL_OW 87
// Say ( JMM , D6-JMM-1 ) ;
10578: LD_EXP 9
10582: PPUSH
10583: LD_STRING D6-JMM-1
10585: PPUSH
10586: CALL_OW 88
// SayRadio ( Harisson , D6-Har-1 ) ;
10590: LD_EXP 19
10594: PPUSH
10595: LD_STRING D6-Har-1
10597: PPUSH
10598: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
10602: LD_EXP 9
10606: PPUSH
10607: LD_STRING D6-JMM-2
10609: PPUSH
10610: CALL_OW 88
// SayRadio ( Harisson , D6-Har-2 ) ;
10614: LD_EXP 19
10618: PPUSH
10619: LD_STRING D6-Har-2
10621: PPUSH
10622: CALL_OW 94
// Say ( JMM , D6-JMM-3 ) ;
10626: LD_EXP 9
10630: PPUSH
10631: LD_STRING D6-JMM-3
10633: PPUSH
10634: CALL_OW 88
// SayRadio ( Harisson , D6-Har-3 ) ;
10638: LD_EXP 19
10642: PPUSH
10643: LD_STRING D6-Har-3
10645: PPUSH
10646: CALL_OW 94
// Say ( JMM , D6-JMM-4 ) ;
10650: LD_EXP 9
10654: PPUSH
10655: LD_STRING D6-JMM-4
10657: PPUSH
10658: CALL_OW 88
// SayRadio ( Harisson , D6-Har-4 ) ;
10662: LD_EXP 19
10666: PPUSH
10667: LD_STRING D6-Har-4
10669: PPUSH
10670: CALL_OW 94
// Say ( JMM , D6-JMM-5 ) ;
10674: LD_EXP 9
10678: PPUSH
10679: LD_STRING D6-JMM-5
10681: PPUSH
10682: CALL_OW 88
// DialogueOff ;
10686: CALL_OW 7
// m1 := false ;
10690: LD_ADDR_VAR 0 4
10694: PUSH
10695: LD_INT 0
10697: ST_TO_ADDR
// m2 := false ;
10698: LD_ADDR_VAR 0 5
10702: PUSH
10703: LD_INT 0
10705: ST_TO_ADDR
// m3 := false ;
10706: LD_ADDR_VAR 0 6
10710: PUSH
10711: LD_INT 0
10713: ST_TO_ADDR
// tmp := FilterBuildings ( 3 ) ;
10714: LD_ADDR_VAR 0 3
10718: PUSH
10719: LD_INT 3
10721: PPUSH
10722: CALL 1507 0 1
10726: ST_TO_ADDR
// if tmp >= 35 then
10727: LD_VAR 0 3
10731: PUSH
10732: LD_INT 35
10734: GREATEREQUAL
10735: IFFALSE 10772
// begin AddMedal ( Destroy1 , - 1 ) ;
10737: LD_STRING Destroy1
10739: PPUSH
10740: LD_INT 1
10742: NEG
10743: PPUSH
10744: CALL_OW 101
// AddMedal ( Destroy2 , - 1 ) ;
10748: LD_STRING Destroy2
10750: PPUSH
10751: LD_INT 1
10753: NEG
10754: PPUSH
10755: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
10759: LD_STRING Destroy3
10761: PPUSH
10762: LD_INT 1
10764: NEG
10765: PPUSH
10766: CALL_OW 101
// end else
10770: GO 10883
// begin AddMedal ( Destroy1 , 1 ) ;
10772: LD_STRING Destroy1
10774: PPUSH
10775: LD_INT 1
10777: PPUSH
10778: CALL_OW 101
// m1 := true ;
10782: LD_ADDR_VAR 0 4
10786: PUSH
10787: LD_INT 1
10789: ST_TO_ADDR
// if tmp >= 25 then
10790: LD_VAR 0 3
10794: PUSH
10795: LD_INT 25
10797: GREATEREQUAL
10798: IFFALSE 10824
// begin AddMedal ( Destroy2 , - 1 ) ;
10800: LD_STRING Destroy2
10802: PPUSH
10803: LD_INT 1
10805: NEG
10806: PPUSH
10807: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
10811: LD_STRING Destroy3
10813: PPUSH
10814: LD_INT 1
10816: NEG
10817: PPUSH
10818: CALL_OW 101
// end else
10822: GO 10883
// begin AddMedal ( Destroy2 , 1 ) ;
10824: LD_STRING Destroy2
10826: PPUSH
10827: LD_INT 1
10829: PPUSH
10830: CALL_OW 101
// m2 := true ;
10834: LD_ADDR_VAR 0 5
10838: PUSH
10839: LD_INT 1
10841: ST_TO_ADDR
// if tmp >= 15 then
10842: LD_VAR 0 3
10846: PUSH
10847: LD_INT 15
10849: GREATEREQUAL
10850: IFFALSE 10865
// AddMedal ( Destroy3 , - 1 ) else
10852: LD_STRING Destroy3
10854: PPUSH
10855: LD_INT 1
10857: NEG
10858: PPUSH
10859: CALL_OW 101
10863: GO 10883
// begin AddMedal ( Destroy3 , 1 ) ;
10865: LD_STRING Destroy3
10867: PPUSH
10868: LD_INT 1
10870: PPUSH
10871: CALL_OW 101
// m3 := true ;
10875: LD_ADDR_VAR 0 6
10879: PUSH
10880: LD_INT 1
10882: ST_TO_ADDR
// end ; end ; end ; if tick <= 32 32$00 then
10883: LD_OWVAR 1
10887: PUSH
10888: LD_INT 67200
10890: LESSEQUAL
10891: IFFALSE 10900
// SetAchievement ( ACH_ASPEED_7 ) ;
10893: LD_STRING ACH_ASPEED_7
10895: PPUSH
10896: CALL_OW 543
// if m1 and m2 and m3 and Difficulty >= 3 then
10900: LD_VAR 0 4
10904: PUSH
10905: LD_VAR 0 5
10909: AND
10910: PUSH
10911: LD_VAR 0 6
10915: AND
10916: PUSH
10917: LD_OWVAR 67
10921: PUSH
10922: LD_INT 3
10924: GREATEREQUAL
10925: AND
10926: IFFALSE 10938
// SetAchievementEX ( ACH_AMER , 7 ) ;
10928: LD_STRING ACH_AMER
10930: PPUSH
10931: LD_INT 7
10933: PPUSH
10934: CALL_OW 564
// GiveMedals ( MAIN ) ;
10938: LD_STRING MAIN
10940: PPUSH
10941: CALL_OW 102
// tmp := FilterPeopleArea ( 1 , endArea ) union FilterDriversArea ( 1 , endArea ) ;
10945: LD_ADDR_VAR 0 3
10949: PUSH
10950: LD_INT 1
10952: PPUSH
10953: LD_INT 9
10955: PPUSH
10956: CALL 1329 0 2
10960: PUSH
10961: LD_INT 1
10963: PPUSH
10964: LD_INT 9
10966: PPUSH
10967: CALL 1376 0 2
10971: UNION
10972: ST_TO_ADDR
// RewardPeople ( tmp ) ;
10973: LD_VAR 0 3
10977: PPUSH
10978: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
10982: LD_EXP 9
10986: PPUSH
10987: LD_EXP 3
10991: PUSH
10992: LD_STRING JMM
10994: STR
10995: PPUSH
10996: CALL_OW 38
// if Brown in tmp then
11000: LD_EXP 10
11004: PUSH
11005: LD_VAR 0 3
11009: IN
11010: IFFALSE 11030
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
11012: LD_EXP 10
11016: PPUSH
11017: LD_EXP 3
11021: PUSH
11022: LD_STRING Brown
11024: STR
11025: PPUSH
11026: CALL_OW 38
// if Donaldson in tmp then
11030: LD_EXP 11
11034: PUSH
11035: LD_VAR 0 3
11039: IN
11040: IFFALSE 11060
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
11042: LD_EXP 11
11046: PPUSH
11047: LD_EXP 3
11051: PUSH
11052: LD_STRING Donaldson
11054: STR
11055: PPUSH
11056: CALL_OW 38
// if Bobby in tmp then
11060: LD_EXP 12
11064: PUSH
11065: LD_VAR 0 3
11069: IN
11070: IFFALSE 11090
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
11072: LD_EXP 12
11076: PPUSH
11077: LD_EXP 3
11081: PUSH
11082: LD_STRING Bobby
11084: STR
11085: PPUSH
11086: CALL_OW 38
// if Cyrus in tmp then
11090: LD_EXP 13
11094: PUSH
11095: LD_VAR 0 3
11099: IN
11100: IFFALSE 11120
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
11102: LD_EXP 13
11106: PPUSH
11107: LD_EXP 3
11111: PUSH
11112: LD_STRING Cyrus
11114: STR
11115: PPUSH
11116: CALL_OW 38
// if Lisa in tmp then
11120: LD_EXP 14
11124: PUSH
11125: LD_VAR 0 3
11129: IN
11130: IFFALSE 11150
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
11132: LD_EXP 14
11136: PPUSH
11137: LD_EXP 3
11141: PUSH
11142: LD_STRING Lisa
11144: STR
11145: PPUSH
11146: CALL_OW 38
// if Frank in tmp then
11150: LD_EXP 15
11154: PUSH
11155: LD_VAR 0 3
11159: IN
11160: IFFALSE 11180
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
11162: LD_EXP 15
11166: PPUSH
11167: LD_EXP 3
11171: PUSH
11172: LD_STRING Frank
11174: STR
11175: PPUSH
11176: CALL_OW 38
// if Gladstone in tmp then
11180: LD_EXP 16
11184: PUSH
11185: LD_VAR 0 3
11189: IN
11190: IFFALSE 11210
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
11192: LD_EXP 16
11196: PPUSH
11197: LD_EXP 3
11201: PUSH
11202: LD_STRING Gladstone
11204: STR
11205: PPUSH
11206: CALL_OW 38
// if Khatam in tmp then
11210: LD_EXP 17
11214: PUSH
11215: LD_VAR 0 3
11219: IN
11220: IFFALSE 11240
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
11222: LD_EXP 17
11226: PPUSH
11227: LD_EXP 3
11231: PUSH
11232: LD_STRING Khatam
11234: STR
11235: PPUSH
11236: CALL_OW 38
// if Kikuchi in tmp then
11240: LD_EXP 18
11244: PUSH
11245: LD_VAR 0 3
11249: IN
11250: IFFALSE 11270
// SaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
11252: LD_EXP 18
11256: PPUSH
11257: LD_EXP 3
11261: PUSH
11262: LD_STRING Kikuchi
11264: STR
11265: PPUSH
11266: CALL_OW 38
// SaveCharacters ( tmp diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] , mission_prefix & others ) ;
11270: LD_VAR 0 3
11274: PUSH
11275: LD_EXP 9
11279: PUSH
11280: LD_EXP 10
11284: PUSH
11285: LD_EXP 11
11289: PUSH
11290: LD_EXP 12
11294: PUSH
11295: LD_EXP 13
11299: PUSH
11300: LD_EXP 14
11304: PUSH
11305: LD_EXP 15
11309: PUSH
11310: LD_EXP 16
11314: PUSH
11315: LD_EXP 18
11319: PUSH
11320: LD_EXP 17
11324: PUSH
11325: EMPTY
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: LIST
11336: DIFF
11337: PPUSH
11338: LD_EXP 3
11342: PUSH
11343: LD_STRING others
11345: STR
11346: PPUSH
11347: CALL_OW 38
// SaveVariable ( tick , 07_time ) ;
11351: LD_OWVAR 1
11355: PPUSH
11356: LD_STRING 07_time
11358: PPUSH
11359: CALL_OW 39
// tmp := [ ] ;
11363: LD_ADDR_VAR 0 3
11367: PUSH
11368: EMPTY
11369: ST_TO_ADDR
// for i in FilterUnitsInArea ( endArea , [ [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] ] ] ) do
11370: LD_ADDR_VAR 0 2
11374: PUSH
11375: LD_INT 9
11377: PPUSH
11378: LD_INT 22
11380: PUSH
11381: LD_INT 1
11383: PUSH
11384: EMPTY
11385: LIST
11386: LIST
11387: PUSH
11388: LD_INT 23
11390: PUSH
11391: LD_INT 1
11393: PUSH
11394: EMPTY
11395: LIST
11396: LIST
11397: PUSH
11398: LD_INT 21
11400: PUSH
11401: LD_INT 2
11403: PUSH
11404: EMPTY
11405: LIST
11406: LIST
11407: PUSH
11408: EMPTY
11409: LIST
11410: LIST
11411: LIST
11412: PUSH
11413: EMPTY
11414: LIST
11415: PPUSH
11416: CALL_OW 70
11420: PUSH
11421: FOR_IN
11422: IFFALSE 11483
// tmp := tmp ^ [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ;
11424: LD_ADDR_VAR 0 3
11428: PUSH
11429: LD_VAR 0 3
11433: PUSH
11434: LD_VAR 0 2
11438: PPUSH
11439: CALL_OW 265
11443: PUSH
11444: LD_VAR 0 2
11448: PPUSH
11449: CALL_OW 262
11453: PUSH
11454: LD_VAR 0 2
11458: PPUSH
11459: CALL_OW 263
11463: PUSH
11464: LD_VAR 0 2
11468: PPUSH
11469: CALL_OW 264
11473: PUSH
11474: EMPTY
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: ADD
11480: ST_TO_ADDR
11481: GO 11421
11483: POP
11484: POP
// SaveVariable ( tmp , 07_vehicles ) ;
11485: LD_VAR 0 3
11489: PPUSH
11490: LD_STRING 07_vehicles
11492: PPUSH
11493: CALL_OW 39
// YouWin ;
11497: CALL_OW 103
// end ; end_of_file
11501: PPOPN 6
11503: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
11504: LD_VAR 0 1
11508: PPUSH
11509: CALL 26521 0 1
// if un = JMM then
11513: LD_VAR 0 1
11517: PUSH
11518: LD_EXP 9
11522: EQUAL
11523: IFFALSE 11532
// YouLost ( JMM ) ;
11525: LD_STRING JMM
11527: PPUSH
11528: CALL_OW 104
// if GetType ( un ) = unit_building then
11532: LD_VAR 0 1
11536: PPUSH
11537: CALL_OW 247
11541: PUSH
11542: LD_INT 3
11544: EQUAL
11545: IFFALSE 11561
// buildings_counter := buildings_counter + 1 ;
11547: LD_ADDR_EXP 4
11551: PUSH
11552: LD_EXP 4
11556: PUSH
11557: LD_INT 1
11559: PLUS
11560: ST_TO_ADDR
// if un in FilterUnitsInArea ( baseArea , [ f_or , [ f_btype , b_turret ] , [ f_btype , b_bunker ] ] ) then
11561: LD_VAR 0 1
11565: PUSH
11566: LD_INT 6
11568: PPUSH
11569: LD_INT 2
11571: PUSH
11572: LD_INT 30
11574: PUSH
11575: LD_INT 33
11577: PUSH
11578: EMPTY
11579: LIST
11580: LIST
11581: PUSH
11582: LD_INT 30
11584: PUSH
11585: LD_INT 32
11587: PUSH
11588: EMPTY
11589: LIST
11590: LIST
11591: PUSH
11592: EMPTY
11593: LIST
11594: LIST
11595: LIST
11596: PPUSH
11597: CALL_OW 70
11601: IN
11602: IFFALSE 11661
// ru_rebuild_list := ru_rebuild_list ^ [ GetBType ( un ) , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ;
11604: LD_ADDR_EXP 20
11608: PUSH
11609: LD_EXP 20
11613: PUSH
11614: LD_VAR 0 1
11618: PPUSH
11619: CALL_OW 266
11623: PUSH
11624: LD_VAR 0 1
11628: PPUSH
11629: CALL_OW 250
11633: PUSH
11634: LD_VAR 0 1
11638: PPUSH
11639: CALL_OW 251
11643: PUSH
11644: LD_VAR 0 1
11648: PPUSH
11649: CALL_OW 254
11653: PUSH
11654: EMPTY
11655: LIST
11656: LIST
11657: LIST
11658: LIST
11659: ADD
11660: ST_TO_ADDR
// if un = ru_dep_main then
11661: LD_VAR 0 1
11665: PUSH
11666: LD_INT 16
11668: EQUAL
11669: IFFALSE 11678
// ChangeMissionObjectives ( M1a ) ;
11671: LD_STRING M1a
11673: PPUSH
11674: CALL_OW 337
// if GetType ( un ) = unit_human and GetSide ( un ) = 3 then
11678: LD_VAR 0 1
11682: PPUSH
11683: CALL_OW 247
11687: PUSH
11688: LD_INT 1
11690: EQUAL
11691: PUSH
11692: LD_VAR 0 1
11696: PPUSH
11697: CALL_OW 255
11701: PUSH
11702: LD_INT 3
11704: EQUAL
11705: AND
11706: IFFALSE 11722
// kill_counter := kill_counter + 1 ;
11708: LD_ADDR_EXP 8
11712: PUSH
11713: LD_EXP 8
11717: PUSH
11718: LD_INT 1
11720: PLUS
11721: ST_TO_ADDR
// end ;
11722: PPOPN 1
11724: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
11725: LD_VAR 0 1
11729: PPUSH
11730: LD_VAR 0 2
11734: PPUSH
11735: CALL 26643 0 2
// end ;
11739: PPOPN 2
11741: END
// on UnitGoesToRed ( un ) do begin if GetBType ( un ) = b_bunker and GetTag ( un ) = 7 then
11742: LD_VAR 0 1
11746: PPUSH
11747: CALL_OW 266
11751: PUSH
11752: LD_INT 32
11754: EQUAL
11755: PUSH
11756: LD_VAR 0 1
11760: PPUSH
11761: CALL_OW 110
11765: PUSH
11766: LD_INT 7
11768: EQUAL
11769: AND
11770: IFFALSE 11784
// SetTag ( un , 0 ) ;
11772: LD_VAR 0 1
11776: PPUSH
11777: LD_INT 0
11779: PPUSH
11780: CALL_OW 109
// end ;
11784: PPOPN 1
11786: END
// on BuildingStarted ( b , builder ) do var i ;
11787: LD_INT 0
11789: PPUSH
// begin if GetSide ( b ) = 3 then
11790: LD_VAR 0 1
11794: PPUSH
11795: CALL_OW 255
11799: PUSH
11800: LD_INT 3
11802: EQUAL
11803: IFFALSE 11843
// for i = 1 to 4 do
11805: LD_ADDR_VAR 0 3
11809: PUSH
11810: DOUBLE
11811: LD_INT 1
11813: DEC
11814: ST_TO_ADDR
11815: LD_INT 4
11817: PUSH
11818: FOR_TO
11819: IFFALSE 11841
// ru_rebuild_list := Delete ( ru_rebuild_list , 1 ) ;
11821: LD_ADDR_EXP 20
11825: PUSH
11826: LD_EXP 20
11830: PPUSH
11831: LD_INT 1
11833: PPUSH
11834: CALL_OW 3
11838: ST_TO_ADDR
11839: GO 11818
11841: POP
11842: POP
// end ;
11843: PPOPN 3
11845: END
// on BuildingComplete ( b ) do if GetBType ( b ) in [ b_bunker , b_turret ] then
11846: LD_VAR 0 1
11850: PPUSH
11851: CALL_OW 266
11855: PUSH
11856: LD_INT 32
11858: PUSH
11859: LD_INT 33
11861: PUSH
11862: EMPTY
11863: LIST
11864: LIST
11865: IN
11866: IFFALSE 11880
// ComPlaceWeapon ( b , ru_gatling_gun ) ;
11868: LD_VAR 0 1
11872: PPUSH
11873: LD_INT 43
11875: PPUSH
11876: CALL_OW 148
11880: PPOPN 1
11882: END
// on LeaveBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
11883: LD_VAR 0 1
11887: PUSH
11888: LD_INT 22
11890: PUSH
11891: LD_INT 3
11893: PUSH
11894: EMPTY
11895: LIST
11896: LIST
11897: PUSH
11898: LD_INT 2
11900: PUSH
11901: LD_INT 30
11903: PUSH
11904: LD_INT 31
11906: PUSH
11907: EMPTY
11908: LIST
11909: LIST
11910: PUSH
11911: LD_INT 30
11913: PUSH
11914: LD_INT 32
11916: PUSH
11917: EMPTY
11918: LIST
11919: LIST
11920: PUSH
11921: EMPTY
11922: LIST
11923: LIST
11924: LIST
11925: PUSH
11926: EMPTY
11927: LIST
11928: LIST
11929: PPUSH
11930: CALL_OW 69
11934: IN
11935: IFFALSE 11957
// GoToAnotherTower ( un , b , 143 , 143 ) ;
11937: LD_VAR 0 2
11941: PPUSH
11942: LD_VAR 0 1
11946: PPUSH
11947: LD_INT 143
11949: PPUSH
11950: LD_INT 143
11952: PPUSH
11953: CALL 838 0 4
// end ;
11957: PPOPN 2
11959: END
// on EnterBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) then
11960: LD_VAR 0 1
11964: PUSH
11965: LD_INT 22
11967: PUSH
11968: LD_INT 3
11970: PUSH
11971: EMPTY
11972: LIST
11973: LIST
11974: PUSH
11975: LD_INT 30
11977: PUSH
11978: LD_INT 32
11980: PUSH
11981: EMPTY
11982: LIST
11983: LIST
11984: PUSH
11985: EMPTY
11986: LIST
11987: LIST
11988: PPUSH
11989: CALL_OW 69
11993: IN
11994: IFFALSE 12008
// SetTag ( b , 0 ) ;
11996: LD_VAR 0 1
12000: PPUSH
12001: LD_INT 0
12003: PPUSH
12004: CALL_OW 109
// end ; end_of_file
12008: PPOPN 2
12010: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
12011: LD_INT 0
12013: PPUSH
// ar_miner := 81 ;
12014: LD_ADDR_EXP 28
12018: PUSH
12019: LD_INT 81
12021: ST_TO_ADDR
// ar_crane := 88 ;
12022: LD_ADDR_EXP 27
12026: PUSH
12027: LD_INT 88
12029: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
12030: LD_ADDR_EXP 22
12034: PUSH
12035: LD_INT 89
12037: ST_TO_ADDR
// us_hack := 99 ;
12038: LD_ADDR_EXP 23
12042: PUSH
12043: LD_INT 99
12045: ST_TO_ADDR
// us_artillery := 97 ;
12046: LD_ADDR_EXP 24
12050: PUSH
12051: LD_INT 97
12053: ST_TO_ADDR
// ar_bio_bomb := 91 ;
12054: LD_ADDR_EXP 25
12058: PUSH
12059: LD_INT 91
12061: ST_TO_ADDR
// ar_mortar := 92 ;
12062: LD_ADDR_EXP 26
12066: PUSH
12067: LD_INT 92
12069: ST_TO_ADDR
// ru_flamethrower := 93 ;
12070: LD_ADDR_EXP 29
12074: PUSH
12075: LD_INT 93
12077: ST_TO_ADDR
// ru_radar := 98 ;
12078: LD_ADDR_EXP 21
12082: PUSH
12083: LD_INT 98
12085: ST_TO_ADDR
// tech_Artillery := 80 ;
12086: LD_ADDR_EXP 30
12090: PUSH
12091: LD_INT 80
12093: ST_TO_ADDR
// tech_RadMat := 81 ;
12094: LD_ADDR_EXP 31
12098: PUSH
12099: LD_INT 81
12101: ST_TO_ADDR
// tech_BasicTools := 82 ;
12102: LD_ADDR_EXP 32
12106: PUSH
12107: LD_INT 82
12109: ST_TO_ADDR
// tech_Cargo := 83 ;
12110: LD_ADDR_EXP 33
12114: PUSH
12115: LD_INT 83
12117: ST_TO_ADDR
// tech_Track := 84 ;
12118: LD_ADDR_EXP 34
12122: PUSH
12123: LD_INT 84
12125: ST_TO_ADDR
// tech_Crane := 85 ;
12126: LD_ADDR_EXP 35
12130: PUSH
12131: LD_INT 85
12133: ST_TO_ADDR
// tech_Bulldozer := 86 ;
12134: LD_ADDR_EXP 36
12138: PUSH
12139: LD_INT 86
12141: ST_TO_ADDR
// tech_Hovercraft := 87 ;
12142: LD_ADDR_EXP 37
12146: PUSH
12147: LD_INT 87
12149: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
12150: LD_ADDR_EXP 38
12154: PUSH
12155: LD_INT 88
12157: ST_TO_ADDR
// class_mastodont := 31 ;
12158: LD_ADDR_EXP 39
12162: PUSH
12163: LD_INT 31
12165: ST_TO_ADDR
// class_horse := 21 ;
12166: LD_ADDR_EXP 40
12170: PUSH
12171: LD_INT 21
12173: ST_TO_ADDR
// end ;
12174: LD_VAR 0 1
12178: RET
// every 1 do
12179: GO 12181
12181: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
12182: CALL 12011 0 0
12186: END
// every 0 0$1 do
12187: GO 12189
12189: DISABLE
// begin enable ;
12190: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
12191: LD_STRING updateTimer(
12193: PUSH
12194: LD_OWVAR 1
12198: STR
12199: PUSH
12200: LD_STRING );
12202: STR
12203: PPUSH
12204: CALL_OW 559
// end ;
12208: END
// export function SOS_MapStart ( ) ; begin
12209: LD_INT 0
12211: PPUSH
// if streamModeActive then
12212: LD_EXP 41
12216: IFFALSE 12225
// DefineStreamItems ( true ) ;
12218: LD_INT 1
12220: PPUSH
12221: CALL 13875 0 1
// UpdateFactoryWaypoints ( ) ;
12225: CALL 27459 0 0
// end ;
12229: LD_VAR 0 1
12233: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
12234: LD_INT 0
12236: PPUSH
// if p2 = 100 then
12237: LD_VAR 0 2
12241: PUSH
12242: LD_INT 100
12244: EQUAL
12245: IFFALSE 13248
// begin if not StreamModeActive then
12247: LD_EXP 41
12251: NOT
12252: IFFALSE 12262
// StreamModeActive := true ;
12254: LD_ADDR_EXP 41
12258: PUSH
12259: LD_INT 1
12261: ST_TO_ADDR
// if p3 = 0 then
12262: LD_VAR 0 3
12266: PUSH
12267: LD_INT 0
12269: EQUAL
12270: IFFALSE 12276
// InitStreamMode ;
12272: CALL 13411 0 0
// if p3 = 1 then
12276: LD_VAR 0 3
12280: PUSH
12281: LD_INT 1
12283: EQUAL
12284: IFFALSE 12294
// sRocket := true ;
12286: LD_ADDR_EXP 46
12290: PUSH
12291: LD_INT 1
12293: ST_TO_ADDR
// if p3 = 2 then
12294: LD_VAR 0 3
12298: PUSH
12299: LD_INT 2
12301: EQUAL
12302: IFFALSE 12312
// sSpeed := true ;
12304: LD_ADDR_EXP 45
12308: PUSH
12309: LD_INT 1
12311: ST_TO_ADDR
// if p3 = 3 then
12312: LD_VAR 0 3
12316: PUSH
12317: LD_INT 3
12319: EQUAL
12320: IFFALSE 12330
// sEngine := true ;
12322: LD_ADDR_EXP 47
12326: PUSH
12327: LD_INT 1
12329: ST_TO_ADDR
// if p3 = 4 then
12330: LD_VAR 0 3
12334: PUSH
12335: LD_INT 4
12337: EQUAL
12338: IFFALSE 12348
// sSpec := true ;
12340: LD_ADDR_EXP 44
12344: PUSH
12345: LD_INT 1
12347: ST_TO_ADDR
// if p3 = 5 then
12348: LD_VAR 0 3
12352: PUSH
12353: LD_INT 5
12355: EQUAL
12356: IFFALSE 12366
// sLevel := true ;
12358: LD_ADDR_EXP 48
12362: PUSH
12363: LD_INT 1
12365: ST_TO_ADDR
// if p3 = 6 then
12366: LD_VAR 0 3
12370: PUSH
12371: LD_INT 6
12373: EQUAL
12374: IFFALSE 12384
// sArmoury := true ;
12376: LD_ADDR_EXP 49
12380: PUSH
12381: LD_INT 1
12383: ST_TO_ADDR
// if p3 = 7 then
12384: LD_VAR 0 3
12388: PUSH
12389: LD_INT 7
12391: EQUAL
12392: IFFALSE 12402
// sRadar := true ;
12394: LD_ADDR_EXP 50
12398: PUSH
12399: LD_INT 1
12401: ST_TO_ADDR
// if p3 = 8 then
12402: LD_VAR 0 3
12406: PUSH
12407: LD_INT 8
12409: EQUAL
12410: IFFALSE 12420
// sBunker := true ;
12412: LD_ADDR_EXP 51
12416: PUSH
12417: LD_INT 1
12419: ST_TO_ADDR
// if p3 = 9 then
12420: LD_VAR 0 3
12424: PUSH
12425: LD_INT 9
12427: EQUAL
12428: IFFALSE 12438
// sHack := true ;
12430: LD_ADDR_EXP 52
12434: PUSH
12435: LD_INT 1
12437: ST_TO_ADDR
// if p3 = 10 then
12438: LD_VAR 0 3
12442: PUSH
12443: LD_INT 10
12445: EQUAL
12446: IFFALSE 12456
// sFire := true ;
12448: LD_ADDR_EXP 53
12452: PUSH
12453: LD_INT 1
12455: ST_TO_ADDR
// if p3 = 11 then
12456: LD_VAR 0 3
12460: PUSH
12461: LD_INT 11
12463: EQUAL
12464: IFFALSE 12474
// sRefresh := true ;
12466: LD_ADDR_EXP 54
12470: PUSH
12471: LD_INT 1
12473: ST_TO_ADDR
// if p3 = 12 then
12474: LD_VAR 0 3
12478: PUSH
12479: LD_INT 12
12481: EQUAL
12482: IFFALSE 12492
// sExp := true ;
12484: LD_ADDR_EXP 55
12488: PUSH
12489: LD_INT 1
12491: ST_TO_ADDR
// if p3 = 13 then
12492: LD_VAR 0 3
12496: PUSH
12497: LD_INT 13
12499: EQUAL
12500: IFFALSE 12510
// sDepot := true ;
12502: LD_ADDR_EXP 56
12506: PUSH
12507: LD_INT 1
12509: ST_TO_ADDR
// if p3 = 14 then
12510: LD_VAR 0 3
12514: PUSH
12515: LD_INT 14
12517: EQUAL
12518: IFFALSE 12528
// sFlag := true ;
12520: LD_ADDR_EXP 57
12524: PUSH
12525: LD_INT 1
12527: ST_TO_ADDR
// if p3 = 15 then
12528: LD_VAR 0 3
12532: PUSH
12533: LD_INT 15
12535: EQUAL
12536: IFFALSE 12546
// sKamikadze := true ;
12538: LD_ADDR_EXP 65
12542: PUSH
12543: LD_INT 1
12545: ST_TO_ADDR
// if p3 = 16 then
12546: LD_VAR 0 3
12550: PUSH
12551: LD_INT 16
12553: EQUAL
12554: IFFALSE 12564
// sTroll := true ;
12556: LD_ADDR_EXP 66
12560: PUSH
12561: LD_INT 1
12563: ST_TO_ADDR
// if p3 = 17 then
12564: LD_VAR 0 3
12568: PUSH
12569: LD_INT 17
12571: EQUAL
12572: IFFALSE 12582
// sSlow := true ;
12574: LD_ADDR_EXP 67
12578: PUSH
12579: LD_INT 1
12581: ST_TO_ADDR
// if p3 = 18 then
12582: LD_VAR 0 3
12586: PUSH
12587: LD_INT 18
12589: EQUAL
12590: IFFALSE 12600
// sLack := true ;
12592: LD_ADDR_EXP 68
12596: PUSH
12597: LD_INT 1
12599: ST_TO_ADDR
// if p3 = 19 then
12600: LD_VAR 0 3
12604: PUSH
12605: LD_INT 19
12607: EQUAL
12608: IFFALSE 12618
// sTank := true ;
12610: LD_ADDR_EXP 70
12614: PUSH
12615: LD_INT 1
12617: ST_TO_ADDR
// if p3 = 20 then
12618: LD_VAR 0 3
12622: PUSH
12623: LD_INT 20
12625: EQUAL
12626: IFFALSE 12636
// sRemote := true ;
12628: LD_ADDR_EXP 71
12632: PUSH
12633: LD_INT 1
12635: ST_TO_ADDR
// if p3 = 21 then
12636: LD_VAR 0 3
12640: PUSH
12641: LD_INT 21
12643: EQUAL
12644: IFFALSE 12654
// sPowell := true ;
12646: LD_ADDR_EXP 72
12650: PUSH
12651: LD_INT 1
12653: ST_TO_ADDR
// if p3 = 22 then
12654: LD_VAR 0 3
12658: PUSH
12659: LD_INT 22
12661: EQUAL
12662: IFFALSE 12672
// sTeleport := true ;
12664: LD_ADDR_EXP 75
12668: PUSH
12669: LD_INT 1
12671: ST_TO_ADDR
// if p3 = 23 then
12672: LD_VAR 0 3
12676: PUSH
12677: LD_INT 23
12679: EQUAL
12680: IFFALSE 12690
// sOilTower := true ;
12682: LD_ADDR_EXP 77
12686: PUSH
12687: LD_INT 1
12689: ST_TO_ADDR
// if p3 = 24 then
12690: LD_VAR 0 3
12694: PUSH
12695: LD_INT 24
12697: EQUAL
12698: IFFALSE 12708
// sShovel := true ;
12700: LD_ADDR_EXP 78
12704: PUSH
12705: LD_INT 1
12707: ST_TO_ADDR
// if p3 = 25 then
12708: LD_VAR 0 3
12712: PUSH
12713: LD_INT 25
12715: EQUAL
12716: IFFALSE 12726
// sSheik := true ;
12718: LD_ADDR_EXP 79
12722: PUSH
12723: LD_INT 1
12725: ST_TO_ADDR
// if p3 = 26 then
12726: LD_VAR 0 3
12730: PUSH
12731: LD_INT 26
12733: EQUAL
12734: IFFALSE 12744
// sEarthquake := true ;
12736: LD_ADDR_EXP 81
12740: PUSH
12741: LD_INT 1
12743: ST_TO_ADDR
// if p3 = 27 then
12744: LD_VAR 0 3
12748: PUSH
12749: LD_INT 27
12751: EQUAL
12752: IFFALSE 12762
// sAI := true ;
12754: LD_ADDR_EXP 82
12758: PUSH
12759: LD_INT 1
12761: ST_TO_ADDR
// if p3 = 28 then
12762: LD_VAR 0 3
12766: PUSH
12767: LD_INT 28
12769: EQUAL
12770: IFFALSE 12780
// sCargo := true ;
12772: LD_ADDR_EXP 85
12776: PUSH
12777: LD_INT 1
12779: ST_TO_ADDR
// if p3 = 29 then
12780: LD_VAR 0 3
12784: PUSH
12785: LD_INT 29
12787: EQUAL
12788: IFFALSE 12798
// sDLaser := true ;
12790: LD_ADDR_EXP 86
12794: PUSH
12795: LD_INT 1
12797: ST_TO_ADDR
// if p3 = 30 then
12798: LD_VAR 0 3
12802: PUSH
12803: LD_INT 30
12805: EQUAL
12806: IFFALSE 12816
// sExchange := true ;
12808: LD_ADDR_EXP 87
12812: PUSH
12813: LD_INT 1
12815: ST_TO_ADDR
// if p3 = 31 then
12816: LD_VAR 0 3
12820: PUSH
12821: LD_INT 31
12823: EQUAL
12824: IFFALSE 12834
// sFac := true ;
12826: LD_ADDR_EXP 88
12830: PUSH
12831: LD_INT 1
12833: ST_TO_ADDR
// if p3 = 32 then
12834: LD_VAR 0 3
12838: PUSH
12839: LD_INT 32
12841: EQUAL
12842: IFFALSE 12852
// sPower := true ;
12844: LD_ADDR_EXP 89
12848: PUSH
12849: LD_INT 1
12851: ST_TO_ADDR
// if p3 = 33 then
12852: LD_VAR 0 3
12856: PUSH
12857: LD_INT 33
12859: EQUAL
12860: IFFALSE 12870
// sRandom := true ;
12862: LD_ADDR_EXP 90
12866: PUSH
12867: LD_INT 1
12869: ST_TO_ADDR
// if p3 = 34 then
12870: LD_VAR 0 3
12874: PUSH
12875: LD_INT 34
12877: EQUAL
12878: IFFALSE 12888
// sShield := true ;
12880: LD_ADDR_EXP 91
12884: PUSH
12885: LD_INT 1
12887: ST_TO_ADDR
// if p3 = 35 then
12888: LD_VAR 0 3
12892: PUSH
12893: LD_INT 35
12895: EQUAL
12896: IFFALSE 12906
// sTime := true ;
12898: LD_ADDR_EXP 92
12902: PUSH
12903: LD_INT 1
12905: ST_TO_ADDR
// if p3 = 36 then
12906: LD_VAR 0 3
12910: PUSH
12911: LD_INT 36
12913: EQUAL
12914: IFFALSE 12924
// sTools := true ;
12916: LD_ADDR_EXP 93
12920: PUSH
12921: LD_INT 1
12923: ST_TO_ADDR
// if p3 = 101 then
12924: LD_VAR 0 3
12928: PUSH
12929: LD_INT 101
12931: EQUAL
12932: IFFALSE 12942
// sSold := true ;
12934: LD_ADDR_EXP 58
12938: PUSH
12939: LD_INT 1
12941: ST_TO_ADDR
// if p3 = 102 then
12942: LD_VAR 0 3
12946: PUSH
12947: LD_INT 102
12949: EQUAL
12950: IFFALSE 12960
// sDiff := true ;
12952: LD_ADDR_EXP 59
12956: PUSH
12957: LD_INT 1
12959: ST_TO_ADDR
// if p3 = 103 then
12960: LD_VAR 0 3
12964: PUSH
12965: LD_INT 103
12967: EQUAL
12968: IFFALSE 12978
// sFog := true ;
12970: LD_ADDR_EXP 62
12974: PUSH
12975: LD_INT 1
12977: ST_TO_ADDR
// if p3 = 104 then
12978: LD_VAR 0 3
12982: PUSH
12983: LD_INT 104
12985: EQUAL
12986: IFFALSE 12996
// sReset := true ;
12988: LD_ADDR_EXP 63
12992: PUSH
12993: LD_INT 1
12995: ST_TO_ADDR
// if p3 = 105 then
12996: LD_VAR 0 3
13000: PUSH
13001: LD_INT 105
13003: EQUAL
13004: IFFALSE 13014
// sSun := true ;
13006: LD_ADDR_EXP 64
13010: PUSH
13011: LD_INT 1
13013: ST_TO_ADDR
// if p3 = 106 then
13014: LD_VAR 0 3
13018: PUSH
13019: LD_INT 106
13021: EQUAL
13022: IFFALSE 13032
// sTiger := true ;
13024: LD_ADDR_EXP 60
13028: PUSH
13029: LD_INT 1
13031: ST_TO_ADDR
// if p3 = 107 then
13032: LD_VAR 0 3
13036: PUSH
13037: LD_INT 107
13039: EQUAL
13040: IFFALSE 13050
// sBomb := true ;
13042: LD_ADDR_EXP 61
13046: PUSH
13047: LD_INT 1
13049: ST_TO_ADDR
// if p3 = 108 then
13050: LD_VAR 0 3
13054: PUSH
13055: LD_INT 108
13057: EQUAL
13058: IFFALSE 13068
// sWound := true ;
13060: LD_ADDR_EXP 69
13064: PUSH
13065: LD_INT 1
13067: ST_TO_ADDR
// if p3 = 109 then
13068: LD_VAR 0 3
13072: PUSH
13073: LD_INT 109
13075: EQUAL
13076: IFFALSE 13086
// sBetray := true ;
13078: LD_ADDR_EXP 73
13082: PUSH
13083: LD_INT 1
13085: ST_TO_ADDR
// if p3 = 110 then
13086: LD_VAR 0 3
13090: PUSH
13091: LD_INT 110
13093: EQUAL
13094: IFFALSE 13104
// sContamin := true ;
13096: LD_ADDR_EXP 74
13100: PUSH
13101: LD_INT 1
13103: ST_TO_ADDR
// if p3 = 111 then
13104: LD_VAR 0 3
13108: PUSH
13109: LD_INT 111
13111: EQUAL
13112: IFFALSE 13122
// sOil := true ;
13114: LD_ADDR_EXP 76
13118: PUSH
13119: LD_INT 1
13121: ST_TO_ADDR
// if p3 = 112 then
13122: LD_VAR 0 3
13126: PUSH
13127: LD_INT 112
13129: EQUAL
13130: IFFALSE 13140
// sStu := true ;
13132: LD_ADDR_EXP 80
13136: PUSH
13137: LD_INT 1
13139: ST_TO_ADDR
// if p3 = 113 then
13140: LD_VAR 0 3
13144: PUSH
13145: LD_INT 113
13147: EQUAL
13148: IFFALSE 13158
// sBazooka := true ;
13150: LD_ADDR_EXP 83
13154: PUSH
13155: LD_INT 1
13157: ST_TO_ADDR
// if p3 = 114 then
13158: LD_VAR 0 3
13162: PUSH
13163: LD_INT 114
13165: EQUAL
13166: IFFALSE 13176
// sMortar := true ;
13168: LD_ADDR_EXP 84
13172: PUSH
13173: LD_INT 1
13175: ST_TO_ADDR
// if p3 = 115 then
13176: LD_VAR 0 3
13180: PUSH
13181: LD_INT 115
13183: EQUAL
13184: IFFALSE 13194
// sRanger := true ;
13186: LD_ADDR_EXP 94
13190: PUSH
13191: LD_INT 1
13193: ST_TO_ADDR
// if p3 = 116 then
13194: LD_VAR 0 3
13198: PUSH
13199: LD_INT 116
13201: EQUAL
13202: IFFALSE 13212
// sComputer := true ;
13204: LD_ADDR_EXP 95
13208: PUSH
13209: LD_INT 1
13211: ST_TO_ADDR
// if p3 = 117 then
13212: LD_VAR 0 3
13216: PUSH
13217: LD_INT 117
13219: EQUAL
13220: IFFALSE 13230
// s30 := true ;
13222: LD_ADDR_EXP 96
13226: PUSH
13227: LD_INT 1
13229: ST_TO_ADDR
// if p3 = 118 then
13230: LD_VAR 0 3
13234: PUSH
13235: LD_INT 118
13237: EQUAL
13238: IFFALSE 13248
// s60 := true ;
13240: LD_ADDR_EXP 97
13244: PUSH
13245: LD_INT 1
13247: ST_TO_ADDR
// end ; if p2 = 101 then
13248: LD_VAR 0 2
13252: PUSH
13253: LD_INT 101
13255: EQUAL
13256: IFFALSE 13384
// begin case p3 of 1 :
13258: LD_VAR 0 3
13262: PUSH
13263: LD_INT 1
13265: DOUBLE
13266: EQUAL
13267: IFTRUE 13271
13269: GO 13278
13271: POP
// hHackUnlimitedResources ; 2 :
13272: CALL 25482 0 0
13276: GO 13384
13278: LD_INT 2
13280: DOUBLE
13281: EQUAL
13282: IFTRUE 13286
13284: GO 13293
13286: POP
// hHackSetLevel10 ; 3 :
13287: CALL 25615 0 0
13291: GO 13384
13293: LD_INT 3
13295: DOUBLE
13296: EQUAL
13297: IFTRUE 13301
13299: GO 13308
13301: POP
// hHackSetLevel10YourUnits ; 4 :
13302: CALL 25700 0 0
13306: GO 13384
13308: LD_INT 4
13310: DOUBLE
13311: EQUAL
13312: IFTRUE 13316
13314: GO 13323
13316: POP
// hHackInvincible ; 5 :
13317: CALL 26148 0 0
13321: GO 13384
13323: LD_INT 5
13325: DOUBLE
13326: EQUAL
13327: IFTRUE 13331
13329: GO 13338
13331: POP
// hHackInvisible ; 6 :
13332: CALL 26259 0 0
13336: GO 13384
13338: LD_INT 6
13340: DOUBLE
13341: EQUAL
13342: IFTRUE 13346
13344: GO 13353
13346: POP
// hHackChangeYourSide ; 7 :
13347: CALL 26316 0 0
13351: GO 13384
13353: LD_INT 7
13355: DOUBLE
13356: EQUAL
13357: IFTRUE 13361
13359: GO 13368
13361: POP
// hHackChangeUnitSide ; 8 :
13362: CALL 26358 0 0
13366: GO 13384
13368: LD_INT 8
13370: DOUBLE
13371: EQUAL
13372: IFTRUE 13376
13374: GO 13383
13376: POP
// hHackFog ; end ;
13377: CALL 26459 0 0
13381: GO 13384
13383: POP
// end ; end ;
13384: LD_VAR 0 7
13388: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
13389: GO 13391
13391: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
13392: LD_STRING initStreamRollete();
13394: PPUSH
13395: CALL_OW 559
// InitStreamMode ;
13399: CALL 13411 0 0
// DefineStreamItems ( false ) ;
13403: LD_INT 0
13405: PPUSH
13406: CALL 13875 0 1
// end ;
13410: END
// function InitStreamMode ; begin
13411: LD_INT 0
13413: PPUSH
// streamModeActive := false ;
13414: LD_ADDR_EXP 41
13418: PUSH
13419: LD_INT 0
13421: ST_TO_ADDR
// normalCounter := 36 ;
13422: LD_ADDR_EXP 42
13426: PUSH
13427: LD_INT 36
13429: ST_TO_ADDR
// hardcoreCounter := 18 ;
13430: LD_ADDR_EXP 43
13434: PUSH
13435: LD_INT 18
13437: ST_TO_ADDR
// sRocket := false ;
13438: LD_ADDR_EXP 46
13442: PUSH
13443: LD_INT 0
13445: ST_TO_ADDR
// sSpeed := false ;
13446: LD_ADDR_EXP 45
13450: PUSH
13451: LD_INT 0
13453: ST_TO_ADDR
// sEngine := false ;
13454: LD_ADDR_EXP 47
13458: PUSH
13459: LD_INT 0
13461: ST_TO_ADDR
// sSpec := false ;
13462: LD_ADDR_EXP 44
13466: PUSH
13467: LD_INT 0
13469: ST_TO_ADDR
// sLevel := false ;
13470: LD_ADDR_EXP 48
13474: PUSH
13475: LD_INT 0
13477: ST_TO_ADDR
// sArmoury := false ;
13478: LD_ADDR_EXP 49
13482: PUSH
13483: LD_INT 0
13485: ST_TO_ADDR
// sRadar := false ;
13486: LD_ADDR_EXP 50
13490: PUSH
13491: LD_INT 0
13493: ST_TO_ADDR
// sBunker := false ;
13494: LD_ADDR_EXP 51
13498: PUSH
13499: LD_INT 0
13501: ST_TO_ADDR
// sHack := false ;
13502: LD_ADDR_EXP 52
13506: PUSH
13507: LD_INT 0
13509: ST_TO_ADDR
// sFire := false ;
13510: LD_ADDR_EXP 53
13514: PUSH
13515: LD_INT 0
13517: ST_TO_ADDR
// sRefresh := false ;
13518: LD_ADDR_EXP 54
13522: PUSH
13523: LD_INT 0
13525: ST_TO_ADDR
// sExp := false ;
13526: LD_ADDR_EXP 55
13530: PUSH
13531: LD_INT 0
13533: ST_TO_ADDR
// sDepot := false ;
13534: LD_ADDR_EXP 56
13538: PUSH
13539: LD_INT 0
13541: ST_TO_ADDR
// sFlag := false ;
13542: LD_ADDR_EXP 57
13546: PUSH
13547: LD_INT 0
13549: ST_TO_ADDR
// sKamikadze := false ;
13550: LD_ADDR_EXP 65
13554: PUSH
13555: LD_INT 0
13557: ST_TO_ADDR
// sTroll := false ;
13558: LD_ADDR_EXP 66
13562: PUSH
13563: LD_INT 0
13565: ST_TO_ADDR
// sSlow := false ;
13566: LD_ADDR_EXP 67
13570: PUSH
13571: LD_INT 0
13573: ST_TO_ADDR
// sLack := false ;
13574: LD_ADDR_EXP 68
13578: PUSH
13579: LD_INT 0
13581: ST_TO_ADDR
// sTank := false ;
13582: LD_ADDR_EXP 70
13586: PUSH
13587: LD_INT 0
13589: ST_TO_ADDR
// sRemote := false ;
13590: LD_ADDR_EXP 71
13594: PUSH
13595: LD_INT 0
13597: ST_TO_ADDR
// sPowell := false ;
13598: LD_ADDR_EXP 72
13602: PUSH
13603: LD_INT 0
13605: ST_TO_ADDR
// sTeleport := false ;
13606: LD_ADDR_EXP 75
13610: PUSH
13611: LD_INT 0
13613: ST_TO_ADDR
// sOilTower := false ;
13614: LD_ADDR_EXP 77
13618: PUSH
13619: LD_INT 0
13621: ST_TO_ADDR
// sShovel := false ;
13622: LD_ADDR_EXP 78
13626: PUSH
13627: LD_INT 0
13629: ST_TO_ADDR
// sSheik := false ;
13630: LD_ADDR_EXP 79
13634: PUSH
13635: LD_INT 0
13637: ST_TO_ADDR
// sEarthquake := false ;
13638: LD_ADDR_EXP 81
13642: PUSH
13643: LD_INT 0
13645: ST_TO_ADDR
// sAI := false ;
13646: LD_ADDR_EXP 82
13650: PUSH
13651: LD_INT 0
13653: ST_TO_ADDR
// sCargo := false ;
13654: LD_ADDR_EXP 85
13658: PUSH
13659: LD_INT 0
13661: ST_TO_ADDR
// sDLaser := false ;
13662: LD_ADDR_EXP 86
13666: PUSH
13667: LD_INT 0
13669: ST_TO_ADDR
// sExchange := false ;
13670: LD_ADDR_EXP 87
13674: PUSH
13675: LD_INT 0
13677: ST_TO_ADDR
// sFac := false ;
13678: LD_ADDR_EXP 88
13682: PUSH
13683: LD_INT 0
13685: ST_TO_ADDR
// sPower := false ;
13686: LD_ADDR_EXP 89
13690: PUSH
13691: LD_INT 0
13693: ST_TO_ADDR
// sRandom := false ;
13694: LD_ADDR_EXP 90
13698: PUSH
13699: LD_INT 0
13701: ST_TO_ADDR
// sShield := false ;
13702: LD_ADDR_EXP 91
13706: PUSH
13707: LD_INT 0
13709: ST_TO_ADDR
// sTime := false ;
13710: LD_ADDR_EXP 92
13714: PUSH
13715: LD_INT 0
13717: ST_TO_ADDR
// sTools := false ;
13718: LD_ADDR_EXP 93
13722: PUSH
13723: LD_INT 0
13725: ST_TO_ADDR
// sSold := false ;
13726: LD_ADDR_EXP 58
13730: PUSH
13731: LD_INT 0
13733: ST_TO_ADDR
// sDiff := false ;
13734: LD_ADDR_EXP 59
13738: PUSH
13739: LD_INT 0
13741: ST_TO_ADDR
// sFog := false ;
13742: LD_ADDR_EXP 62
13746: PUSH
13747: LD_INT 0
13749: ST_TO_ADDR
// sReset := false ;
13750: LD_ADDR_EXP 63
13754: PUSH
13755: LD_INT 0
13757: ST_TO_ADDR
// sSun := false ;
13758: LD_ADDR_EXP 64
13762: PUSH
13763: LD_INT 0
13765: ST_TO_ADDR
// sTiger := false ;
13766: LD_ADDR_EXP 60
13770: PUSH
13771: LD_INT 0
13773: ST_TO_ADDR
// sBomb := false ;
13774: LD_ADDR_EXP 61
13778: PUSH
13779: LD_INT 0
13781: ST_TO_ADDR
// sWound := false ;
13782: LD_ADDR_EXP 69
13786: PUSH
13787: LD_INT 0
13789: ST_TO_ADDR
// sBetray := false ;
13790: LD_ADDR_EXP 73
13794: PUSH
13795: LD_INT 0
13797: ST_TO_ADDR
// sContamin := false ;
13798: LD_ADDR_EXP 74
13802: PUSH
13803: LD_INT 0
13805: ST_TO_ADDR
// sOil := false ;
13806: LD_ADDR_EXP 76
13810: PUSH
13811: LD_INT 0
13813: ST_TO_ADDR
// sStu := false ;
13814: LD_ADDR_EXP 80
13818: PUSH
13819: LD_INT 0
13821: ST_TO_ADDR
// sBazooka := false ;
13822: LD_ADDR_EXP 83
13826: PUSH
13827: LD_INT 0
13829: ST_TO_ADDR
// sMortar := false ;
13830: LD_ADDR_EXP 84
13834: PUSH
13835: LD_INT 0
13837: ST_TO_ADDR
// sRanger := false ;
13838: LD_ADDR_EXP 94
13842: PUSH
13843: LD_INT 0
13845: ST_TO_ADDR
// sComputer := false ;
13846: LD_ADDR_EXP 95
13850: PUSH
13851: LD_INT 0
13853: ST_TO_ADDR
// s30 := false ;
13854: LD_ADDR_EXP 96
13858: PUSH
13859: LD_INT 0
13861: ST_TO_ADDR
// s60 := false ;
13862: LD_ADDR_EXP 97
13866: PUSH
13867: LD_INT 0
13869: ST_TO_ADDR
// end ;
13870: LD_VAR 0 1
13874: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
13875: LD_INT 0
13877: PPUSH
13878: PPUSH
13879: PPUSH
13880: PPUSH
13881: PPUSH
13882: PPUSH
13883: PPUSH
// result := [ ] ;
13884: LD_ADDR_VAR 0 2
13888: PUSH
13889: EMPTY
13890: ST_TO_ADDR
// if campaign_id = 1 then
13891: LD_OWVAR 69
13895: PUSH
13896: LD_INT 1
13898: EQUAL
13899: IFFALSE 17065
// begin case mission_number of 1 :
13901: LD_OWVAR 70
13905: PUSH
13906: LD_INT 1
13908: DOUBLE
13909: EQUAL
13910: IFTRUE 13914
13912: GO 13990
13914: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
13915: LD_ADDR_VAR 0 2
13919: PUSH
13920: LD_INT 2
13922: PUSH
13923: LD_INT 4
13925: PUSH
13926: LD_INT 11
13928: PUSH
13929: LD_INT 12
13931: PUSH
13932: LD_INT 15
13934: PUSH
13935: LD_INT 16
13937: PUSH
13938: LD_INT 22
13940: PUSH
13941: LD_INT 23
13943: PUSH
13944: LD_INT 26
13946: PUSH
13947: EMPTY
13948: LIST
13949: LIST
13950: LIST
13951: LIST
13952: LIST
13953: LIST
13954: LIST
13955: LIST
13956: LIST
13957: PUSH
13958: LD_INT 101
13960: PUSH
13961: LD_INT 102
13963: PUSH
13964: LD_INT 106
13966: PUSH
13967: LD_INT 116
13969: PUSH
13970: LD_INT 117
13972: PUSH
13973: LD_INT 118
13975: PUSH
13976: EMPTY
13977: LIST
13978: LIST
13979: LIST
13980: LIST
13981: LIST
13982: LIST
13983: PUSH
13984: EMPTY
13985: LIST
13986: LIST
13987: ST_TO_ADDR
13988: GO 17063
13990: LD_INT 2
13992: DOUBLE
13993: EQUAL
13994: IFTRUE 13998
13996: GO 14082
13998: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
13999: LD_ADDR_VAR 0 2
14003: PUSH
14004: LD_INT 2
14006: PUSH
14007: LD_INT 4
14009: PUSH
14010: LD_INT 11
14012: PUSH
14013: LD_INT 12
14015: PUSH
14016: LD_INT 15
14018: PUSH
14019: LD_INT 16
14021: PUSH
14022: LD_INT 22
14024: PUSH
14025: LD_INT 23
14027: PUSH
14028: LD_INT 26
14030: PUSH
14031: EMPTY
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: PUSH
14042: LD_INT 101
14044: PUSH
14045: LD_INT 102
14047: PUSH
14048: LD_INT 105
14050: PUSH
14051: LD_INT 106
14053: PUSH
14054: LD_INT 108
14056: PUSH
14057: LD_INT 116
14059: PUSH
14060: LD_INT 117
14062: PUSH
14063: LD_INT 118
14065: PUSH
14066: EMPTY
14067: LIST
14068: LIST
14069: LIST
14070: LIST
14071: LIST
14072: LIST
14073: LIST
14074: LIST
14075: PUSH
14076: EMPTY
14077: LIST
14078: LIST
14079: ST_TO_ADDR
14080: GO 17063
14082: LD_INT 3
14084: DOUBLE
14085: EQUAL
14086: IFTRUE 14090
14088: GO 14178
14090: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
14091: LD_ADDR_VAR 0 2
14095: PUSH
14096: LD_INT 2
14098: PUSH
14099: LD_INT 4
14101: PUSH
14102: LD_INT 5
14104: PUSH
14105: LD_INT 11
14107: PUSH
14108: LD_INT 12
14110: PUSH
14111: LD_INT 15
14113: PUSH
14114: LD_INT 16
14116: PUSH
14117: LD_INT 22
14119: PUSH
14120: LD_INT 26
14122: PUSH
14123: LD_INT 36
14125: PUSH
14126: EMPTY
14127: LIST
14128: LIST
14129: LIST
14130: LIST
14131: LIST
14132: LIST
14133: LIST
14134: LIST
14135: LIST
14136: LIST
14137: PUSH
14138: LD_INT 101
14140: PUSH
14141: LD_INT 102
14143: PUSH
14144: LD_INT 105
14146: PUSH
14147: LD_INT 106
14149: PUSH
14150: LD_INT 108
14152: PUSH
14153: LD_INT 116
14155: PUSH
14156: LD_INT 117
14158: PUSH
14159: LD_INT 118
14161: PUSH
14162: EMPTY
14163: LIST
14164: LIST
14165: LIST
14166: LIST
14167: LIST
14168: LIST
14169: LIST
14170: LIST
14171: PUSH
14172: EMPTY
14173: LIST
14174: LIST
14175: ST_TO_ADDR
14176: GO 17063
14178: LD_INT 4
14180: DOUBLE
14181: EQUAL
14182: IFTRUE 14186
14184: GO 14282
14186: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
14187: LD_ADDR_VAR 0 2
14191: PUSH
14192: LD_INT 2
14194: PUSH
14195: LD_INT 4
14197: PUSH
14198: LD_INT 5
14200: PUSH
14201: LD_INT 8
14203: PUSH
14204: LD_INT 11
14206: PUSH
14207: LD_INT 12
14209: PUSH
14210: LD_INT 15
14212: PUSH
14213: LD_INT 16
14215: PUSH
14216: LD_INT 22
14218: PUSH
14219: LD_INT 23
14221: PUSH
14222: LD_INT 26
14224: PUSH
14225: LD_INT 36
14227: PUSH
14228: EMPTY
14229: LIST
14230: LIST
14231: LIST
14232: LIST
14233: LIST
14234: LIST
14235: LIST
14236: LIST
14237: LIST
14238: LIST
14239: LIST
14240: LIST
14241: PUSH
14242: LD_INT 101
14244: PUSH
14245: LD_INT 102
14247: PUSH
14248: LD_INT 105
14250: PUSH
14251: LD_INT 106
14253: PUSH
14254: LD_INT 108
14256: PUSH
14257: LD_INT 116
14259: PUSH
14260: LD_INT 117
14262: PUSH
14263: LD_INT 118
14265: PUSH
14266: EMPTY
14267: LIST
14268: LIST
14269: LIST
14270: LIST
14271: LIST
14272: LIST
14273: LIST
14274: LIST
14275: PUSH
14276: EMPTY
14277: LIST
14278: LIST
14279: ST_TO_ADDR
14280: GO 17063
14282: LD_INT 5
14284: DOUBLE
14285: EQUAL
14286: IFTRUE 14290
14288: GO 14402
14290: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
14291: LD_ADDR_VAR 0 2
14295: PUSH
14296: LD_INT 2
14298: PUSH
14299: LD_INT 4
14301: PUSH
14302: LD_INT 5
14304: PUSH
14305: LD_INT 6
14307: PUSH
14308: LD_INT 8
14310: PUSH
14311: LD_INT 11
14313: PUSH
14314: LD_INT 12
14316: PUSH
14317: LD_INT 15
14319: PUSH
14320: LD_INT 16
14322: PUSH
14323: LD_INT 22
14325: PUSH
14326: LD_INT 23
14328: PUSH
14329: LD_INT 25
14331: PUSH
14332: LD_INT 26
14334: PUSH
14335: LD_INT 36
14337: PUSH
14338: EMPTY
14339: LIST
14340: LIST
14341: LIST
14342: LIST
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: PUSH
14354: LD_INT 101
14356: PUSH
14357: LD_INT 102
14359: PUSH
14360: LD_INT 105
14362: PUSH
14363: LD_INT 106
14365: PUSH
14366: LD_INT 108
14368: PUSH
14369: LD_INT 109
14371: PUSH
14372: LD_INT 112
14374: PUSH
14375: LD_INT 116
14377: PUSH
14378: LD_INT 117
14380: PUSH
14381: LD_INT 118
14383: PUSH
14384: EMPTY
14385: LIST
14386: LIST
14387: LIST
14388: LIST
14389: LIST
14390: LIST
14391: LIST
14392: LIST
14393: LIST
14394: LIST
14395: PUSH
14396: EMPTY
14397: LIST
14398: LIST
14399: ST_TO_ADDR
14400: GO 17063
14402: LD_INT 6
14404: DOUBLE
14405: EQUAL
14406: IFTRUE 14410
14408: GO 14542
14410: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
14411: LD_ADDR_VAR 0 2
14415: PUSH
14416: LD_INT 2
14418: PUSH
14419: LD_INT 4
14421: PUSH
14422: LD_INT 5
14424: PUSH
14425: LD_INT 6
14427: PUSH
14428: LD_INT 8
14430: PUSH
14431: LD_INT 11
14433: PUSH
14434: LD_INT 12
14436: PUSH
14437: LD_INT 15
14439: PUSH
14440: LD_INT 16
14442: PUSH
14443: LD_INT 20
14445: PUSH
14446: LD_INT 21
14448: PUSH
14449: LD_INT 22
14451: PUSH
14452: LD_INT 23
14454: PUSH
14455: LD_INT 25
14457: PUSH
14458: LD_INT 26
14460: PUSH
14461: LD_INT 30
14463: PUSH
14464: LD_INT 31
14466: PUSH
14467: LD_INT 32
14469: PUSH
14470: LD_INT 36
14472: PUSH
14473: EMPTY
14474: LIST
14475: LIST
14476: LIST
14477: LIST
14478: LIST
14479: LIST
14480: LIST
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: LIST
14488: LIST
14489: LIST
14490: LIST
14491: LIST
14492: LIST
14493: PUSH
14494: LD_INT 101
14496: PUSH
14497: LD_INT 102
14499: PUSH
14500: LD_INT 105
14502: PUSH
14503: LD_INT 106
14505: PUSH
14506: LD_INT 108
14508: PUSH
14509: LD_INT 109
14511: PUSH
14512: LD_INT 112
14514: PUSH
14515: LD_INT 116
14517: PUSH
14518: LD_INT 117
14520: PUSH
14521: LD_INT 118
14523: PUSH
14524: EMPTY
14525: LIST
14526: LIST
14527: LIST
14528: LIST
14529: LIST
14530: LIST
14531: LIST
14532: LIST
14533: LIST
14534: LIST
14535: PUSH
14536: EMPTY
14537: LIST
14538: LIST
14539: ST_TO_ADDR
14540: GO 17063
14542: LD_INT 7
14544: DOUBLE
14545: EQUAL
14546: IFTRUE 14550
14548: GO 14662
14550: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
14551: LD_ADDR_VAR 0 2
14555: PUSH
14556: LD_INT 2
14558: PUSH
14559: LD_INT 4
14561: PUSH
14562: LD_INT 5
14564: PUSH
14565: LD_INT 7
14567: PUSH
14568: LD_INT 11
14570: PUSH
14571: LD_INT 12
14573: PUSH
14574: LD_INT 15
14576: PUSH
14577: LD_INT 16
14579: PUSH
14580: LD_INT 20
14582: PUSH
14583: LD_INT 21
14585: PUSH
14586: LD_INT 22
14588: PUSH
14589: LD_INT 23
14591: PUSH
14592: LD_INT 25
14594: PUSH
14595: LD_INT 26
14597: PUSH
14598: EMPTY
14599: LIST
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: LIST
14606: LIST
14607: LIST
14608: LIST
14609: LIST
14610: LIST
14611: LIST
14612: LIST
14613: PUSH
14614: LD_INT 101
14616: PUSH
14617: LD_INT 102
14619: PUSH
14620: LD_INT 103
14622: PUSH
14623: LD_INT 105
14625: PUSH
14626: LD_INT 106
14628: PUSH
14629: LD_INT 108
14631: PUSH
14632: LD_INT 112
14634: PUSH
14635: LD_INT 116
14637: PUSH
14638: LD_INT 117
14640: PUSH
14641: LD_INT 118
14643: PUSH
14644: EMPTY
14645: LIST
14646: LIST
14647: LIST
14648: LIST
14649: LIST
14650: LIST
14651: LIST
14652: LIST
14653: LIST
14654: LIST
14655: PUSH
14656: EMPTY
14657: LIST
14658: LIST
14659: ST_TO_ADDR
14660: GO 17063
14662: LD_INT 8
14664: DOUBLE
14665: EQUAL
14666: IFTRUE 14670
14668: GO 14810
14670: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
14671: LD_ADDR_VAR 0 2
14675: PUSH
14676: LD_INT 2
14678: PUSH
14679: LD_INT 4
14681: PUSH
14682: LD_INT 5
14684: PUSH
14685: LD_INT 6
14687: PUSH
14688: LD_INT 7
14690: PUSH
14691: LD_INT 8
14693: PUSH
14694: LD_INT 11
14696: PUSH
14697: LD_INT 12
14699: PUSH
14700: LD_INT 15
14702: PUSH
14703: LD_INT 16
14705: PUSH
14706: LD_INT 20
14708: PUSH
14709: LD_INT 21
14711: PUSH
14712: LD_INT 22
14714: PUSH
14715: LD_INT 23
14717: PUSH
14718: LD_INT 25
14720: PUSH
14721: LD_INT 26
14723: PUSH
14724: LD_INT 30
14726: PUSH
14727: LD_INT 31
14729: PUSH
14730: LD_INT 32
14732: PUSH
14733: LD_INT 36
14735: PUSH
14736: EMPTY
14737: LIST
14738: LIST
14739: LIST
14740: LIST
14741: LIST
14742: LIST
14743: LIST
14744: LIST
14745: LIST
14746: LIST
14747: LIST
14748: LIST
14749: LIST
14750: LIST
14751: LIST
14752: LIST
14753: LIST
14754: LIST
14755: LIST
14756: LIST
14757: PUSH
14758: LD_INT 101
14760: PUSH
14761: LD_INT 102
14763: PUSH
14764: LD_INT 103
14766: PUSH
14767: LD_INT 105
14769: PUSH
14770: LD_INT 106
14772: PUSH
14773: LD_INT 108
14775: PUSH
14776: LD_INT 109
14778: PUSH
14779: LD_INT 112
14781: PUSH
14782: LD_INT 116
14784: PUSH
14785: LD_INT 117
14787: PUSH
14788: LD_INT 118
14790: PUSH
14791: EMPTY
14792: LIST
14793: LIST
14794: LIST
14795: LIST
14796: LIST
14797: LIST
14798: LIST
14799: LIST
14800: LIST
14801: LIST
14802: LIST
14803: PUSH
14804: EMPTY
14805: LIST
14806: LIST
14807: ST_TO_ADDR
14808: GO 17063
14810: LD_INT 9
14812: DOUBLE
14813: EQUAL
14814: IFTRUE 14818
14816: GO 14966
14818: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
14819: LD_ADDR_VAR 0 2
14823: PUSH
14824: LD_INT 2
14826: PUSH
14827: LD_INT 4
14829: PUSH
14830: LD_INT 5
14832: PUSH
14833: LD_INT 6
14835: PUSH
14836: LD_INT 7
14838: PUSH
14839: LD_INT 8
14841: PUSH
14842: LD_INT 11
14844: PUSH
14845: LD_INT 12
14847: PUSH
14848: LD_INT 15
14850: PUSH
14851: LD_INT 16
14853: PUSH
14854: LD_INT 20
14856: PUSH
14857: LD_INT 21
14859: PUSH
14860: LD_INT 22
14862: PUSH
14863: LD_INT 23
14865: PUSH
14866: LD_INT 25
14868: PUSH
14869: LD_INT 26
14871: PUSH
14872: LD_INT 28
14874: PUSH
14875: LD_INT 30
14877: PUSH
14878: LD_INT 31
14880: PUSH
14881: LD_INT 32
14883: PUSH
14884: LD_INT 36
14886: PUSH
14887: EMPTY
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: LIST
14894: LIST
14895: LIST
14896: LIST
14897: LIST
14898: LIST
14899: LIST
14900: LIST
14901: LIST
14902: LIST
14903: LIST
14904: LIST
14905: LIST
14906: LIST
14907: LIST
14908: LIST
14909: PUSH
14910: LD_INT 101
14912: PUSH
14913: LD_INT 102
14915: PUSH
14916: LD_INT 103
14918: PUSH
14919: LD_INT 105
14921: PUSH
14922: LD_INT 106
14924: PUSH
14925: LD_INT 108
14927: PUSH
14928: LD_INT 109
14930: PUSH
14931: LD_INT 112
14933: PUSH
14934: LD_INT 114
14936: PUSH
14937: LD_INT 116
14939: PUSH
14940: LD_INT 117
14942: PUSH
14943: LD_INT 118
14945: PUSH
14946: EMPTY
14947: LIST
14948: LIST
14949: LIST
14950: LIST
14951: LIST
14952: LIST
14953: LIST
14954: LIST
14955: LIST
14956: LIST
14957: LIST
14958: LIST
14959: PUSH
14960: EMPTY
14961: LIST
14962: LIST
14963: ST_TO_ADDR
14964: GO 17063
14966: LD_INT 10
14968: DOUBLE
14969: EQUAL
14970: IFTRUE 14974
14972: GO 15170
14974: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
14975: LD_ADDR_VAR 0 2
14979: PUSH
14980: LD_INT 2
14982: PUSH
14983: LD_INT 4
14985: PUSH
14986: LD_INT 5
14988: PUSH
14989: LD_INT 6
14991: PUSH
14992: LD_INT 7
14994: PUSH
14995: LD_INT 8
14997: PUSH
14998: LD_INT 9
15000: PUSH
15001: LD_INT 10
15003: PUSH
15004: LD_INT 11
15006: PUSH
15007: LD_INT 12
15009: PUSH
15010: LD_INT 13
15012: PUSH
15013: LD_INT 14
15015: PUSH
15016: LD_INT 15
15018: PUSH
15019: LD_INT 16
15021: PUSH
15022: LD_INT 17
15024: PUSH
15025: LD_INT 18
15027: PUSH
15028: LD_INT 19
15030: PUSH
15031: LD_INT 20
15033: PUSH
15034: LD_INT 21
15036: PUSH
15037: LD_INT 22
15039: PUSH
15040: LD_INT 23
15042: PUSH
15043: LD_INT 24
15045: PUSH
15046: LD_INT 25
15048: PUSH
15049: LD_INT 26
15051: PUSH
15052: LD_INT 28
15054: PUSH
15055: LD_INT 30
15057: PUSH
15058: LD_INT 31
15060: PUSH
15061: LD_INT 32
15063: PUSH
15064: LD_INT 36
15066: PUSH
15067: EMPTY
15068: LIST
15069: LIST
15070: LIST
15071: LIST
15072: LIST
15073: LIST
15074: LIST
15075: LIST
15076: LIST
15077: LIST
15078: LIST
15079: LIST
15080: LIST
15081: LIST
15082: LIST
15083: LIST
15084: LIST
15085: LIST
15086: LIST
15087: LIST
15088: LIST
15089: LIST
15090: LIST
15091: LIST
15092: LIST
15093: LIST
15094: LIST
15095: LIST
15096: LIST
15097: PUSH
15098: LD_INT 101
15100: PUSH
15101: LD_INT 102
15103: PUSH
15104: LD_INT 103
15106: PUSH
15107: LD_INT 104
15109: PUSH
15110: LD_INT 105
15112: PUSH
15113: LD_INT 106
15115: PUSH
15116: LD_INT 107
15118: PUSH
15119: LD_INT 108
15121: PUSH
15122: LD_INT 109
15124: PUSH
15125: LD_INT 110
15127: PUSH
15128: LD_INT 111
15130: PUSH
15131: LD_INT 112
15133: PUSH
15134: LD_INT 114
15136: PUSH
15137: LD_INT 116
15139: PUSH
15140: LD_INT 117
15142: PUSH
15143: LD_INT 118
15145: PUSH
15146: EMPTY
15147: LIST
15148: LIST
15149: LIST
15150: LIST
15151: LIST
15152: LIST
15153: LIST
15154: LIST
15155: LIST
15156: LIST
15157: LIST
15158: LIST
15159: LIST
15160: LIST
15161: LIST
15162: LIST
15163: PUSH
15164: EMPTY
15165: LIST
15166: LIST
15167: ST_TO_ADDR
15168: GO 17063
15170: LD_INT 11
15172: DOUBLE
15173: EQUAL
15174: IFTRUE 15178
15176: GO 15382
15178: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
15179: LD_ADDR_VAR 0 2
15183: PUSH
15184: LD_INT 2
15186: PUSH
15187: LD_INT 3
15189: PUSH
15190: LD_INT 4
15192: PUSH
15193: LD_INT 5
15195: PUSH
15196: LD_INT 6
15198: PUSH
15199: LD_INT 7
15201: PUSH
15202: LD_INT 8
15204: PUSH
15205: LD_INT 9
15207: PUSH
15208: LD_INT 10
15210: PUSH
15211: LD_INT 11
15213: PUSH
15214: LD_INT 12
15216: PUSH
15217: LD_INT 13
15219: PUSH
15220: LD_INT 14
15222: PUSH
15223: LD_INT 15
15225: PUSH
15226: LD_INT 16
15228: PUSH
15229: LD_INT 17
15231: PUSH
15232: LD_INT 18
15234: PUSH
15235: LD_INT 19
15237: PUSH
15238: LD_INT 20
15240: PUSH
15241: LD_INT 21
15243: PUSH
15244: LD_INT 22
15246: PUSH
15247: LD_INT 23
15249: PUSH
15250: LD_INT 24
15252: PUSH
15253: LD_INT 25
15255: PUSH
15256: LD_INT 26
15258: PUSH
15259: LD_INT 28
15261: PUSH
15262: LD_INT 30
15264: PUSH
15265: LD_INT 31
15267: PUSH
15268: LD_INT 32
15270: PUSH
15271: LD_INT 34
15273: PUSH
15274: LD_INT 36
15276: PUSH
15277: EMPTY
15278: LIST
15279: LIST
15280: LIST
15281: LIST
15282: LIST
15283: LIST
15284: LIST
15285: LIST
15286: LIST
15287: LIST
15288: LIST
15289: LIST
15290: LIST
15291: LIST
15292: LIST
15293: LIST
15294: LIST
15295: LIST
15296: LIST
15297: LIST
15298: LIST
15299: LIST
15300: LIST
15301: LIST
15302: LIST
15303: LIST
15304: LIST
15305: LIST
15306: LIST
15307: LIST
15308: LIST
15309: PUSH
15310: LD_INT 101
15312: PUSH
15313: LD_INT 102
15315: PUSH
15316: LD_INT 103
15318: PUSH
15319: LD_INT 104
15321: PUSH
15322: LD_INT 105
15324: PUSH
15325: LD_INT 106
15327: PUSH
15328: LD_INT 107
15330: PUSH
15331: LD_INT 108
15333: PUSH
15334: LD_INT 109
15336: PUSH
15337: LD_INT 110
15339: PUSH
15340: LD_INT 111
15342: PUSH
15343: LD_INT 112
15345: PUSH
15346: LD_INT 114
15348: PUSH
15349: LD_INT 116
15351: PUSH
15352: LD_INT 117
15354: PUSH
15355: LD_INT 118
15357: PUSH
15358: EMPTY
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: LIST
15367: LIST
15368: LIST
15369: LIST
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: LIST
15375: PUSH
15376: EMPTY
15377: LIST
15378: LIST
15379: ST_TO_ADDR
15380: GO 17063
15382: LD_INT 12
15384: DOUBLE
15385: EQUAL
15386: IFTRUE 15390
15388: GO 15610
15390: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
15391: LD_ADDR_VAR 0 2
15395: PUSH
15396: LD_INT 1
15398: PUSH
15399: LD_INT 2
15401: PUSH
15402: LD_INT 3
15404: PUSH
15405: LD_INT 4
15407: PUSH
15408: LD_INT 5
15410: PUSH
15411: LD_INT 6
15413: PUSH
15414: LD_INT 7
15416: PUSH
15417: LD_INT 8
15419: PUSH
15420: LD_INT 9
15422: PUSH
15423: LD_INT 10
15425: PUSH
15426: LD_INT 11
15428: PUSH
15429: LD_INT 12
15431: PUSH
15432: LD_INT 13
15434: PUSH
15435: LD_INT 14
15437: PUSH
15438: LD_INT 15
15440: PUSH
15441: LD_INT 16
15443: PUSH
15444: LD_INT 17
15446: PUSH
15447: LD_INT 18
15449: PUSH
15450: LD_INT 19
15452: PUSH
15453: LD_INT 20
15455: PUSH
15456: LD_INT 21
15458: PUSH
15459: LD_INT 22
15461: PUSH
15462: LD_INT 23
15464: PUSH
15465: LD_INT 24
15467: PUSH
15468: LD_INT 25
15470: PUSH
15471: LD_INT 26
15473: PUSH
15474: LD_INT 27
15476: PUSH
15477: LD_INT 28
15479: PUSH
15480: LD_INT 30
15482: PUSH
15483: LD_INT 31
15485: PUSH
15486: LD_INT 32
15488: PUSH
15489: LD_INT 33
15491: PUSH
15492: LD_INT 34
15494: PUSH
15495: LD_INT 36
15497: PUSH
15498: EMPTY
15499: LIST
15500: LIST
15501: LIST
15502: LIST
15503: LIST
15504: LIST
15505: LIST
15506: LIST
15507: LIST
15508: LIST
15509: LIST
15510: LIST
15511: LIST
15512: LIST
15513: LIST
15514: LIST
15515: LIST
15516: LIST
15517: LIST
15518: LIST
15519: LIST
15520: LIST
15521: LIST
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: LIST
15527: LIST
15528: LIST
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: PUSH
15534: LD_INT 101
15536: PUSH
15537: LD_INT 102
15539: PUSH
15540: LD_INT 103
15542: PUSH
15543: LD_INT 104
15545: PUSH
15546: LD_INT 105
15548: PUSH
15549: LD_INT 106
15551: PUSH
15552: LD_INT 107
15554: PUSH
15555: LD_INT 108
15557: PUSH
15558: LD_INT 109
15560: PUSH
15561: LD_INT 110
15563: PUSH
15564: LD_INT 111
15566: PUSH
15567: LD_INT 112
15569: PUSH
15570: LD_INT 113
15572: PUSH
15573: LD_INT 114
15575: PUSH
15576: LD_INT 116
15578: PUSH
15579: LD_INT 117
15581: PUSH
15582: LD_INT 118
15584: PUSH
15585: EMPTY
15586: LIST
15587: LIST
15588: LIST
15589: LIST
15590: LIST
15591: LIST
15592: LIST
15593: LIST
15594: LIST
15595: LIST
15596: LIST
15597: LIST
15598: LIST
15599: LIST
15600: LIST
15601: LIST
15602: LIST
15603: PUSH
15604: EMPTY
15605: LIST
15606: LIST
15607: ST_TO_ADDR
15608: GO 17063
15610: LD_INT 13
15612: DOUBLE
15613: EQUAL
15614: IFTRUE 15618
15616: GO 15826
15618: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
15619: LD_ADDR_VAR 0 2
15623: PUSH
15624: LD_INT 1
15626: PUSH
15627: LD_INT 2
15629: PUSH
15630: LD_INT 3
15632: PUSH
15633: LD_INT 4
15635: PUSH
15636: LD_INT 5
15638: PUSH
15639: LD_INT 8
15641: PUSH
15642: LD_INT 9
15644: PUSH
15645: LD_INT 10
15647: PUSH
15648: LD_INT 11
15650: PUSH
15651: LD_INT 12
15653: PUSH
15654: LD_INT 14
15656: PUSH
15657: LD_INT 15
15659: PUSH
15660: LD_INT 16
15662: PUSH
15663: LD_INT 17
15665: PUSH
15666: LD_INT 18
15668: PUSH
15669: LD_INT 19
15671: PUSH
15672: LD_INT 20
15674: PUSH
15675: LD_INT 21
15677: PUSH
15678: LD_INT 22
15680: PUSH
15681: LD_INT 23
15683: PUSH
15684: LD_INT 24
15686: PUSH
15687: LD_INT 25
15689: PUSH
15690: LD_INT 26
15692: PUSH
15693: LD_INT 27
15695: PUSH
15696: LD_INT 28
15698: PUSH
15699: LD_INT 30
15701: PUSH
15702: LD_INT 31
15704: PUSH
15705: LD_INT 32
15707: PUSH
15708: LD_INT 33
15710: PUSH
15711: LD_INT 34
15713: PUSH
15714: LD_INT 36
15716: PUSH
15717: EMPTY
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: LIST
15726: LIST
15727: LIST
15728: LIST
15729: LIST
15730: LIST
15731: LIST
15732: LIST
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: LIST
15742: LIST
15743: LIST
15744: LIST
15745: LIST
15746: LIST
15747: LIST
15748: LIST
15749: PUSH
15750: LD_INT 101
15752: PUSH
15753: LD_INT 102
15755: PUSH
15756: LD_INT 103
15758: PUSH
15759: LD_INT 104
15761: PUSH
15762: LD_INT 105
15764: PUSH
15765: LD_INT 106
15767: PUSH
15768: LD_INT 107
15770: PUSH
15771: LD_INT 108
15773: PUSH
15774: LD_INT 109
15776: PUSH
15777: LD_INT 110
15779: PUSH
15780: LD_INT 111
15782: PUSH
15783: LD_INT 112
15785: PUSH
15786: LD_INT 113
15788: PUSH
15789: LD_INT 114
15791: PUSH
15792: LD_INT 116
15794: PUSH
15795: LD_INT 117
15797: PUSH
15798: LD_INT 118
15800: PUSH
15801: EMPTY
15802: LIST
15803: LIST
15804: LIST
15805: LIST
15806: LIST
15807: LIST
15808: LIST
15809: LIST
15810: LIST
15811: LIST
15812: LIST
15813: LIST
15814: LIST
15815: LIST
15816: LIST
15817: LIST
15818: LIST
15819: PUSH
15820: EMPTY
15821: LIST
15822: LIST
15823: ST_TO_ADDR
15824: GO 17063
15826: LD_INT 14
15828: DOUBLE
15829: EQUAL
15830: IFTRUE 15834
15832: GO 16058
15834: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
15835: LD_ADDR_VAR 0 2
15839: PUSH
15840: LD_INT 1
15842: PUSH
15843: LD_INT 2
15845: PUSH
15846: LD_INT 3
15848: PUSH
15849: LD_INT 4
15851: PUSH
15852: LD_INT 5
15854: PUSH
15855: LD_INT 6
15857: PUSH
15858: LD_INT 7
15860: PUSH
15861: LD_INT 8
15863: PUSH
15864: LD_INT 9
15866: PUSH
15867: LD_INT 10
15869: PUSH
15870: LD_INT 11
15872: PUSH
15873: LD_INT 12
15875: PUSH
15876: LD_INT 13
15878: PUSH
15879: LD_INT 14
15881: PUSH
15882: LD_INT 15
15884: PUSH
15885: LD_INT 16
15887: PUSH
15888: LD_INT 17
15890: PUSH
15891: LD_INT 18
15893: PUSH
15894: LD_INT 19
15896: PUSH
15897: LD_INT 20
15899: PUSH
15900: LD_INT 21
15902: PUSH
15903: LD_INT 22
15905: PUSH
15906: LD_INT 23
15908: PUSH
15909: LD_INT 24
15911: PUSH
15912: LD_INT 25
15914: PUSH
15915: LD_INT 26
15917: PUSH
15918: LD_INT 27
15920: PUSH
15921: LD_INT 28
15923: PUSH
15924: LD_INT 29
15926: PUSH
15927: LD_INT 30
15929: PUSH
15930: LD_INT 31
15932: PUSH
15933: LD_INT 32
15935: PUSH
15936: LD_INT 33
15938: PUSH
15939: LD_INT 34
15941: PUSH
15942: LD_INT 36
15944: PUSH
15945: EMPTY
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: LIST
15961: LIST
15962: LIST
15963: LIST
15964: LIST
15965: LIST
15966: LIST
15967: LIST
15968: LIST
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: LIST
15978: LIST
15979: LIST
15980: LIST
15981: PUSH
15982: LD_INT 101
15984: PUSH
15985: LD_INT 102
15987: PUSH
15988: LD_INT 103
15990: PUSH
15991: LD_INT 104
15993: PUSH
15994: LD_INT 105
15996: PUSH
15997: LD_INT 106
15999: PUSH
16000: LD_INT 107
16002: PUSH
16003: LD_INT 108
16005: PUSH
16006: LD_INT 109
16008: PUSH
16009: LD_INT 110
16011: PUSH
16012: LD_INT 111
16014: PUSH
16015: LD_INT 112
16017: PUSH
16018: LD_INT 113
16020: PUSH
16021: LD_INT 114
16023: PUSH
16024: LD_INT 116
16026: PUSH
16027: LD_INT 117
16029: PUSH
16030: LD_INT 118
16032: PUSH
16033: EMPTY
16034: LIST
16035: LIST
16036: LIST
16037: LIST
16038: LIST
16039: LIST
16040: LIST
16041: LIST
16042: LIST
16043: LIST
16044: LIST
16045: LIST
16046: LIST
16047: LIST
16048: LIST
16049: LIST
16050: LIST
16051: PUSH
16052: EMPTY
16053: LIST
16054: LIST
16055: ST_TO_ADDR
16056: GO 17063
16058: LD_INT 15
16060: DOUBLE
16061: EQUAL
16062: IFTRUE 16066
16064: GO 16290
16066: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
16067: LD_ADDR_VAR 0 2
16071: PUSH
16072: LD_INT 1
16074: PUSH
16075: LD_INT 2
16077: PUSH
16078: LD_INT 3
16080: PUSH
16081: LD_INT 4
16083: PUSH
16084: LD_INT 5
16086: PUSH
16087: LD_INT 6
16089: PUSH
16090: LD_INT 7
16092: PUSH
16093: LD_INT 8
16095: PUSH
16096: LD_INT 9
16098: PUSH
16099: LD_INT 10
16101: PUSH
16102: LD_INT 11
16104: PUSH
16105: LD_INT 12
16107: PUSH
16108: LD_INT 13
16110: PUSH
16111: LD_INT 14
16113: PUSH
16114: LD_INT 15
16116: PUSH
16117: LD_INT 16
16119: PUSH
16120: LD_INT 17
16122: PUSH
16123: LD_INT 18
16125: PUSH
16126: LD_INT 19
16128: PUSH
16129: LD_INT 20
16131: PUSH
16132: LD_INT 21
16134: PUSH
16135: LD_INT 22
16137: PUSH
16138: LD_INT 23
16140: PUSH
16141: LD_INT 24
16143: PUSH
16144: LD_INT 25
16146: PUSH
16147: LD_INT 26
16149: PUSH
16150: LD_INT 27
16152: PUSH
16153: LD_INT 28
16155: PUSH
16156: LD_INT 29
16158: PUSH
16159: LD_INT 30
16161: PUSH
16162: LD_INT 31
16164: PUSH
16165: LD_INT 32
16167: PUSH
16168: LD_INT 33
16170: PUSH
16171: LD_INT 34
16173: PUSH
16174: LD_INT 36
16176: PUSH
16177: EMPTY
16178: LIST
16179: LIST
16180: LIST
16181: LIST
16182: LIST
16183: LIST
16184: LIST
16185: LIST
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: LIST
16191: LIST
16192: LIST
16193: LIST
16194: LIST
16195: LIST
16196: LIST
16197: LIST
16198: LIST
16199: LIST
16200: LIST
16201: LIST
16202: LIST
16203: LIST
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: LIST
16211: LIST
16212: LIST
16213: PUSH
16214: LD_INT 101
16216: PUSH
16217: LD_INT 102
16219: PUSH
16220: LD_INT 103
16222: PUSH
16223: LD_INT 104
16225: PUSH
16226: LD_INT 105
16228: PUSH
16229: LD_INT 106
16231: PUSH
16232: LD_INT 107
16234: PUSH
16235: LD_INT 108
16237: PUSH
16238: LD_INT 109
16240: PUSH
16241: LD_INT 110
16243: PUSH
16244: LD_INT 111
16246: PUSH
16247: LD_INT 112
16249: PUSH
16250: LD_INT 113
16252: PUSH
16253: LD_INT 114
16255: PUSH
16256: LD_INT 116
16258: PUSH
16259: LD_INT 117
16261: PUSH
16262: LD_INT 118
16264: PUSH
16265: EMPTY
16266: LIST
16267: LIST
16268: LIST
16269: LIST
16270: LIST
16271: LIST
16272: LIST
16273: LIST
16274: LIST
16275: LIST
16276: LIST
16277: LIST
16278: LIST
16279: LIST
16280: LIST
16281: LIST
16282: LIST
16283: PUSH
16284: EMPTY
16285: LIST
16286: LIST
16287: ST_TO_ADDR
16288: GO 17063
16290: LD_INT 16
16292: DOUBLE
16293: EQUAL
16294: IFTRUE 16298
16296: GO 16434
16298: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
16299: LD_ADDR_VAR 0 2
16303: PUSH
16304: LD_INT 2
16306: PUSH
16307: LD_INT 4
16309: PUSH
16310: LD_INT 5
16312: PUSH
16313: LD_INT 7
16315: PUSH
16316: LD_INT 11
16318: PUSH
16319: LD_INT 12
16321: PUSH
16322: LD_INT 15
16324: PUSH
16325: LD_INT 16
16327: PUSH
16328: LD_INT 20
16330: PUSH
16331: LD_INT 21
16333: PUSH
16334: LD_INT 22
16336: PUSH
16337: LD_INT 23
16339: PUSH
16340: LD_INT 25
16342: PUSH
16343: LD_INT 26
16345: PUSH
16346: LD_INT 30
16348: PUSH
16349: LD_INT 31
16351: PUSH
16352: LD_INT 32
16354: PUSH
16355: LD_INT 33
16357: PUSH
16358: LD_INT 34
16360: PUSH
16361: EMPTY
16362: LIST
16363: LIST
16364: LIST
16365: LIST
16366: LIST
16367: LIST
16368: LIST
16369: LIST
16370: LIST
16371: LIST
16372: LIST
16373: LIST
16374: LIST
16375: LIST
16376: LIST
16377: LIST
16378: LIST
16379: LIST
16380: LIST
16381: PUSH
16382: LD_INT 101
16384: PUSH
16385: LD_INT 102
16387: PUSH
16388: LD_INT 103
16390: PUSH
16391: LD_INT 106
16393: PUSH
16394: LD_INT 108
16396: PUSH
16397: LD_INT 112
16399: PUSH
16400: LD_INT 113
16402: PUSH
16403: LD_INT 114
16405: PUSH
16406: LD_INT 116
16408: PUSH
16409: LD_INT 117
16411: PUSH
16412: LD_INT 118
16414: PUSH
16415: EMPTY
16416: LIST
16417: LIST
16418: LIST
16419: LIST
16420: LIST
16421: LIST
16422: LIST
16423: LIST
16424: LIST
16425: LIST
16426: LIST
16427: PUSH
16428: EMPTY
16429: LIST
16430: LIST
16431: ST_TO_ADDR
16432: GO 17063
16434: LD_INT 17
16436: DOUBLE
16437: EQUAL
16438: IFTRUE 16442
16440: GO 16666
16442: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
16443: LD_ADDR_VAR 0 2
16447: PUSH
16448: LD_INT 1
16450: PUSH
16451: LD_INT 2
16453: PUSH
16454: LD_INT 3
16456: PUSH
16457: LD_INT 4
16459: PUSH
16460: LD_INT 5
16462: PUSH
16463: LD_INT 6
16465: PUSH
16466: LD_INT 7
16468: PUSH
16469: LD_INT 8
16471: PUSH
16472: LD_INT 9
16474: PUSH
16475: LD_INT 10
16477: PUSH
16478: LD_INT 11
16480: PUSH
16481: LD_INT 12
16483: PUSH
16484: LD_INT 13
16486: PUSH
16487: LD_INT 14
16489: PUSH
16490: LD_INT 15
16492: PUSH
16493: LD_INT 16
16495: PUSH
16496: LD_INT 17
16498: PUSH
16499: LD_INT 18
16501: PUSH
16502: LD_INT 19
16504: PUSH
16505: LD_INT 20
16507: PUSH
16508: LD_INT 21
16510: PUSH
16511: LD_INT 22
16513: PUSH
16514: LD_INT 23
16516: PUSH
16517: LD_INT 24
16519: PUSH
16520: LD_INT 25
16522: PUSH
16523: LD_INT 26
16525: PUSH
16526: LD_INT 27
16528: PUSH
16529: LD_INT 28
16531: PUSH
16532: LD_INT 29
16534: PUSH
16535: LD_INT 30
16537: PUSH
16538: LD_INT 31
16540: PUSH
16541: LD_INT 32
16543: PUSH
16544: LD_INT 33
16546: PUSH
16547: LD_INT 34
16549: PUSH
16550: LD_INT 36
16552: PUSH
16553: EMPTY
16554: LIST
16555: LIST
16556: LIST
16557: LIST
16558: LIST
16559: LIST
16560: LIST
16561: LIST
16562: LIST
16563: LIST
16564: LIST
16565: LIST
16566: LIST
16567: LIST
16568: LIST
16569: LIST
16570: LIST
16571: LIST
16572: LIST
16573: LIST
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: LIST
16582: LIST
16583: LIST
16584: LIST
16585: LIST
16586: LIST
16587: LIST
16588: LIST
16589: PUSH
16590: LD_INT 101
16592: PUSH
16593: LD_INT 102
16595: PUSH
16596: LD_INT 103
16598: PUSH
16599: LD_INT 104
16601: PUSH
16602: LD_INT 105
16604: PUSH
16605: LD_INT 106
16607: PUSH
16608: LD_INT 107
16610: PUSH
16611: LD_INT 108
16613: PUSH
16614: LD_INT 109
16616: PUSH
16617: LD_INT 110
16619: PUSH
16620: LD_INT 111
16622: PUSH
16623: LD_INT 112
16625: PUSH
16626: LD_INT 113
16628: PUSH
16629: LD_INT 114
16631: PUSH
16632: LD_INT 116
16634: PUSH
16635: LD_INT 117
16637: PUSH
16638: LD_INT 118
16640: PUSH
16641: EMPTY
16642: LIST
16643: LIST
16644: LIST
16645: LIST
16646: LIST
16647: LIST
16648: LIST
16649: LIST
16650: LIST
16651: LIST
16652: LIST
16653: LIST
16654: LIST
16655: LIST
16656: LIST
16657: LIST
16658: LIST
16659: PUSH
16660: EMPTY
16661: LIST
16662: LIST
16663: ST_TO_ADDR
16664: GO 17063
16666: LD_INT 18
16668: DOUBLE
16669: EQUAL
16670: IFTRUE 16674
16672: GO 16822
16674: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
16675: LD_ADDR_VAR 0 2
16679: PUSH
16680: LD_INT 2
16682: PUSH
16683: LD_INT 4
16685: PUSH
16686: LD_INT 5
16688: PUSH
16689: LD_INT 7
16691: PUSH
16692: LD_INT 11
16694: PUSH
16695: LD_INT 12
16697: PUSH
16698: LD_INT 15
16700: PUSH
16701: LD_INT 16
16703: PUSH
16704: LD_INT 20
16706: PUSH
16707: LD_INT 21
16709: PUSH
16710: LD_INT 22
16712: PUSH
16713: LD_INT 23
16715: PUSH
16716: LD_INT 25
16718: PUSH
16719: LD_INT 26
16721: PUSH
16722: LD_INT 30
16724: PUSH
16725: LD_INT 31
16727: PUSH
16728: LD_INT 32
16730: PUSH
16731: LD_INT 33
16733: PUSH
16734: LD_INT 34
16736: PUSH
16737: LD_INT 35
16739: PUSH
16740: LD_INT 36
16742: PUSH
16743: EMPTY
16744: LIST
16745: LIST
16746: LIST
16747: LIST
16748: LIST
16749: LIST
16750: LIST
16751: LIST
16752: LIST
16753: LIST
16754: LIST
16755: LIST
16756: LIST
16757: LIST
16758: LIST
16759: LIST
16760: LIST
16761: LIST
16762: LIST
16763: LIST
16764: LIST
16765: PUSH
16766: LD_INT 101
16768: PUSH
16769: LD_INT 102
16771: PUSH
16772: LD_INT 103
16774: PUSH
16775: LD_INT 106
16777: PUSH
16778: LD_INT 108
16780: PUSH
16781: LD_INT 112
16783: PUSH
16784: LD_INT 113
16786: PUSH
16787: LD_INT 114
16789: PUSH
16790: LD_INT 115
16792: PUSH
16793: LD_INT 116
16795: PUSH
16796: LD_INT 117
16798: PUSH
16799: LD_INT 118
16801: PUSH
16802: EMPTY
16803: LIST
16804: LIST
16805: LIST
16806: LIST
16807: LIST
16808: LIST
16809: LIST
16810: LIST
16811: LIST
16812: LIST
16813: LIST
16814: LIST
16815: PUSH
16816: EMPTY
16817: LIST
16818: LIST
16819: ST_TO_ADDR
16820: GO 17063
16822: LD_INT 19
16824: DOUBLE
16825: EQUAL
16826: IFTRUE 16830
16828: GO 17062
16830: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
16831: LD_ADDR_VAR 0 2
16835: PUSH
16836: LD_INT 1
16838: PUSH
16839: LD_INT 2
16841: PUSH
16842: LD_INT 3
16844: PUSH
16845: LD_INT 4
16847: PUSH
16848: LD_INT 5
16850: PUSH
16851: LD_INT 6
16853: PUSH
16854: LD_INT 7
16856: PUSH
16857: LD_INT 8
16859: PUSH
16860: LD_INT 9
16862: PUSH
16863: LD_INT 10
16865: PUSH
16866: LD_INT 11
16868: PUSH
16869: LD_INT 12
16871: PUSH
16872: LD_INT 13
16874: PUSH
16875: LD_INT 14
16877: PUSH
16878: LD_INT 15
16880: PUSH
16881: LD_INT 16
16883: PUSH
16884: LD_INT 17
16886: PUSH
16887: LD_INT 18
16889: PUSH
16890: LD_INT 19
16892: PUSH
16893: LD_INT 20
16895: PUSH
16896: LD_INT 21
16898: PUSH
16899: LD_INT 22
16901: PUSH
16902: LD_INT 23
16904: PUSH
16905: LD_INT 24
16907: PUSH
16908: LD_INT 25
16910: PUSH
16911: LD_INT 26
16913: PUSH
16914: LD_INT 27
16916: PUSH
16917: LD_INT 28
16919: PUSH
16920: LD_INT 29
16922: PUSH
16923: LD_INT 30
16925: PUSH
16926: LD_INT 31
16928: PUSH
16929: LD_INT 32
16931: PUSH
16932: LD_INT 33
16934: PUSH
16935: LD_INT 34
16937: PUSH
16938: LD_INT 35
16940: PUSH
16941: LD_INT 36
16943: PUSH
16944: EMPTY
16945: LIST
16946: LIST
16947: LIST
16948: LIST
16949: LIST
16950: LIST
16951: LIST
16952: LIST
16953: LIST
16954: LIST
16955: LIST
16956: LIST
16957: LIST
16958: LIST
16959: LIST
16960: LIST
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: LIST
16966: LIST
16967: LIST
16968: LIST
16969: LIST
16970: LIST
16971: LIST
16972: LIST
16973: LIST
16974: LIST
16975: LIST
16976: LIST
16977: LIST
16978: LIST
16979: LIST
16980: LIST
16981: PUSH
16982: LD_INT 101
16984: PUSH
16985: LD_INT 102
16987: PUSH
16988: LD_INT 103
16990: PUSH
16991: LD_INT 104
16993: PUSH
16994: LD_INT 105
16996: PUSH
16997: LD_INT 106
16999: PUSH
17000: LD_INT 107
17002: PUSH
17003: LD_INT 108
17005: PUSH
17006: LD_INT 109
17008: PUSH
17009: LD_INT 110
17011: PUSH
17012: LD_INT 111
17014: PUSH
17015: LD_INT 112
17017: PUSH
17018: LD_INT 113
17020: PUSH
17021: LD_INT 114
17023: PUSH
17024: LD_INT 115
17026: PUSH
17027: LD_INT 116
17029: PUSH
17030: LD_INT 117
17032: PUSH
17033: LD_INT 118
17035: PUSH
17036: EMPTY
17037: LIST
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: LIST
17049: LIST
17050: LIST
17051: LIST
17052: LIST
17053: LIST
17054: LIST
17055: PUSH
17056: EMPTY
17057: LIST
17058: LIST
17059: ST_TO_ADDR
17060: GO 17063
17062: POP
// end else
17063: GO 17294
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
17065: LD_ADDR_VAR 0 2
17069: PUSH
17070: LD_INT 1
17072: PUSH
17073: LD_INT 2
17075: PUSH
17076: LD_INT 3
17078: PUSH
17079: LD_INT 4
17081: PUSH
17082: LD_INT 5
17084: PUSH
17085: LD_INT 6
17087: PUSH
17088: LD_INT 7
17090: PUSH
17091: LD_INT 8
17093: PUSH
17094: LD_INT 9
17096: PUSH
17097: LD_INT 10
17099: PUSH
17100: LD_INT 11
17102: PUSH
17103: LD_INT 12
17105: PUSH
17106: LD_INT 13
17108: PUSH
17109: LD_INT 14
17111: PUSH
17112: LD_INT 15
17114: PUSH
17115: LD_INT 16
17117: PUSH
17118: LD_INT 17
17120: PUSH
17121: LD_INT 18
17123: PUSH
17124: LD_INT 19
17126: PUSH
17127: LD_INT 20
17129: PUSH
17130: LD_INT 21
17132: PUSH
17133: LD_INT 22
17135: PUSH
17136: LD_INT 23
17138: PUSH
17139: LD_INT 24
17141: PUSH
17142: LD_INT 25
17144: PUSH
17145: LD_INT 26
17147: PUSH
17148: LD_INT 27
17150: PUSH
17151: LD_INT 28
17153: PUSH
17154: LD_INT 29
17156: PUSH
17157: LD_INT 30
17159: PUSH
17160: LD_INT 31
17162: PUSH
17163: LD_INT 32
17165: PUSH
17166: LD_INT 33
17168: PUSH
17169: LD_INT 34
17171: PUSH
17172: LD_INT 35
17174: PUSH
17175: LD_INT 36
17177: PUSH
17178: EMPTY
17179: LIST
17180: LIST
17181: LIST
17182: LIST
17183: LIST
17184: LIST
17185: LIST
17186: LIST
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: LIST
17203: LIST
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: PUSH
17216: LD_INT 101
17218: PUSH
17219: LD_INT 102
17221: PUSH
17222: LD_INT 103
17224: PUSH
17225: LD_INT 104
17227: PUSH
17228: LD_INT 105
17230: PUSH
17231: LD_INT 106
17233: PUSH
17234: LD_INT 107
17236: PUSH
17237: LD_INT 108
17239: PUSH
17240: LD_INT 109
17242: PUSH
17243: LD_INT 110
17245: PUSH
17246: LD_INT 111
17248: PUSH
17249: LD_INT 112
17251: PUSH
17252: LD_INT 113
17254: PUSH
17255: LD_INT 114
17257: PUSH
17258: LD_INT 115
17260: PUSH
17261: LD_INT 116
17263: PUSH
17264: LD_INT 117
17266: PUSH
17267: LD_INT 118
17269: PUSH
17270: EMPTY
17271: LIST
17272: LIST
17273: LIST
17274: LIST
17275: LIST
17276: LIST
17277: LIST
17278: LIST
17279: LIST
17280: LIST
17281: LIST
17282: LIST
17283: LIST
17284: LIST
17285: LIST
17286: LIST
17287: LIST
17288: LIST
17289: PUSH
17290: EMPTY
17291: LIST
17292: LIST
17293: ST_TO_ADDR
// if result then
17294: LD_VAR 0 2
17298: IFFALSE 18084
// begin normal :=  ;
17300: LD_ADDR_VAR 0 5
17304: PUSH
17305: LD_STRING 
17307: ST_TO_ADDR
// hardcore :=  ;
17308: LD_ADDR_VAR 0 6
17312: PUSH
17313: LD_STRING 
17315: ST_TO_ADDR
// active :=  ;
17316: LD_ADDR_VAR 0 7
17320: PUSH
17321: LD_STRING 
17323: ST_TO_ADDR
// for i = 1 to normalCounter do
17324: LD_ADDR_VAR 0 8
17328: PUSH
17329: DOUBLE
17330: LD_INT 1
17332: DEC
17333: ST_TO_ADDR
17334: LD_EXP 42
17338: PUSH
17339: FOR_TO
17340: IFFALSE 17441
// begin tmp := 0 ;
17342: LD_ADDR_VAR 0 3
17346: PUSH
17347: LD_STRING 0
17349: ST_TO_ADDR
// if result [ 1 ] then
17350: LD_VAR 0 2
17354: PUSH
17355: LD_INT 1
17357: ARRAY
17358: IFFALSE 17423
// if result [ 1 ] [ 1 ] = i then
17360: LD_VAR 0 2
17364: PUSH
17365: LD_INT 1
17367: ARRAY
17368: PUSH
17369: LD_INT 1
17371: ARRAY
17372: PUSH
17373: LD_VAR 0 8
17377: EQUAL
17378: IFFALSE 17423
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
17380: LD_ADDR_VAR 0 2
17384: PUSH
17385: LD_VAR 0 2
17389: PPUSH
17390: LD_INT 1
17392: PPUSH
17393: LD_VAR 0 2
17397: PUSH
17398: LD_INT 1
17400: ARRAY
17401: PPUSH
17402: LD_INT 1
17404: PPUSH
17405: CALL_OW 3
17409: PPUSH
17410: CALL_OW 1
17414: ST_TO_ADDR
// tmp := 1 ;
17415: LD_ADDR_VAR 0 3
17419: PUSH
17420: LD_STRING 1
17422: ST_TO_ADDR
// end ; normal := normal & tmp ;
17423: LD_ADDR_VAR 0 5
17427: PUSH
17428: LD_VAR 0 5
17432: PUSH
17433: LD_VAR 0 3
17437: STR
17438: ST_TO_ADDR
// end ;
17439: GO 17339
17441: POP
17442: POP
// for i = 1 to hardcoreCounter do
17443: LD_ADDR_VAR 0 8
17447: PUSH
17448: DOUBLE
17449: LD_INT 1
17451: DEC
17452: ST_TO_ADDR
17453: LD_EXP 43
17457: PUSH
17458: FOR_TO
17459: IFFALSE 17564
// begin tmp := 0 ;
17461: LD_ADDR_VAR 0 3
17465: PUSH
17466: LD_STRING 0
17468: ST_TO_ADDR
// if result [ 2 ] then
17469: LD_VAR 0 2
17473: PUSH
17474: LD_INT 2
17476: ARRAY
17477: IFFALSE 17546
// if result [ 2 ] [ 1 ] = 100 + i then
17479: LD_VAR 0 2
17483: PUSH
17484: LD_INT 2
17486: ARRAY
17487: PUSH
17488: LD_INT 1
17490: ARRAY
17491: PUSH
17492: LD_INT 100
17494: PUSH
17495: LD_VAR 0 8
17499: PLUS
17500: EQUAL
17501: IFFALSE 17546
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
17503: LD_ADDR_VAR 0 2
17507: PUSH
17508: LD_VAR 0 2
17512: PPUSH
17513: LD_INT 2
17515: PPUSH
17516: LD_VAR 0 2
17520: PUSH
17521: LD_INT 2
17523: ARRAY
17524: PPUSH
17525: LD_INT 1
17527: PPUSH
17528: CALL_OW 3
17532: PPUSH
17533: CALL_OW 1
17537: ST_TO_ADDR
// tmp := 1 ;
17538: LD_ADDR_VAR 0 3
17542: PUSH
17543: LD_STRING 1
17545: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
17546: LD_ADDR_VAR 0 6
17550: PUSH
17551: LD_VAR 0 6
17555: PUSH
17556: LD_VAR 0 3
17560: STR
17561: ST_TO_ADDR
// end ;
17562: GO 17458
17564: POP
17565: POP
// if isGameLoad then
17566: LD_VAR 0 1
17570: IFFALSE 18045
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
17572: LD_ADDR_VAR 0 4
17576: PUSH
17577: LD_EXP 46
17581: PUSH
17582: LD_EXP 45
17586: PUSH
17587: LD_EXP 47
17591: PUSH
17592: LD_EXP 44
17596: PUSH
17597: LD_EXP 48
17601: PUSH
17602: LD_EXP 49
17606: PUSH
17607: LD_EXP 50
17611: PUSH
17612: LD_EXP 51
17616: PUSH
17617: LD_EXP 52
17621: PUSH
17622: LD_EXP 53
17626: PUSH
17627: LD_EXP 54
17631: PUSH
17632: LD_EXP 55
17636: PUSH
17637: LD_EXP 56
17641: PUSH
17642: LD_EXP 57
17646: PUSH
17647: LD_EXP 65
17651: PUSH
17652: LD_EXP 66
17656: PUSH
17657: LD_EXP 67
17661: PUSH
17662: LD_EXP 68
17666: PUSH
17667: LD_EXP 70
17671: PUSH
17672: LD_EXP 71
17676: PUSH
17677: LD_EXP 72
17681: PUSH
17682: LD_EXP 75
17686: PUSH
17687: LD_EXP 77
17691: PUSH
17692: LD_EXP 78
17696: PUSH
17697: LD_EXP 79
17701: PUSH
17702: LD_EXP 81
17706: PUSH
17707: LD_EXP 82
17711: PUSH
17712: LD_EXP 85
17716: PUSH
17717: LD_EXP 86
17721: PUSH
17722: LD_EXP 87
17726: PUSH
17727: LD_EXP 88
17731: PUSH
17732: LD_EXP 89
17736: PUSH
17737: LD_EXP 90
17741: PUSH
17742: LD_EXP 91
17746: PUSH
17747: LD_EXP 92
17751: PUSH
17752: LD_EXP 93
17756: PUSH
17757: LD_EXP 58
17761: PUSH
17762: LD_EXP 59
17766: PUSH
17767: LD_EXP 62
17771: PUSH
17772: LD_EXP 63
17776: PUSH
17777: LD_EXP 64
17781: PUSH
17782: LD_EXP 60
17786: PUSH
17787: LD_EXP 61
17791: PUSH
17792: LD_EXP 69
17796: PUSH
17797: LD_EXP 73
17801: PUSH
17802: LD_EXP 74
17806: PUSH
17807: LD_EXP 76
17811: PUSH
17812: LD_EXP 80
17816: PUSH
17817: LD_EXP 83
17821: PUSH
17822: LD_EXP 84
17826: PUSH
17827: LD_EXP 94
17831: PUSH
17832: LD_EXP 95
17836: PUSH
17837: LD_EXP 96
17841: PUSH
17842: LD_EXP 97
17846: PUSH
17847: EMPTY
17848: LIST
17849: LIST
17850: LIST
17851: LIST
17852: LIST
17853: LIST
17854: LIST
17855: LIST
17856: LIST
17857: LIST
17858: LIST
17859: LIST
17860: LIST
17861: LIST
17862: LIST
17863: LIST
17864: LIST
17865: LIST
17866: LIST
17867: LIST
17868: LIST
17869: LIST
17870: LIST
17871: LIST
17872: LIST
17873: LIST
17874: LIST
17875: LIST
17876: LIST
17877: LIST
17878: LIST
17879: LIST
17880: LIST
17881: LIST
17882: LIST
17883: LIST
17884: LIST
17885: LIST
17886: LIST
17887: LIST
17888: LIST
17889: LIST
17890: LIST
17891: LIST
17892: LIST
17893: LIST
17894: LIST
17895: LIST
17896: LIST
17897: LIST
17898: LIST
17899: LIST
17900: LIST
17901: LIST
17902: ST_TO_ADDR
// tmp :=  ;
17903: LD_ADDR_VAR 0 3
17907: PUSH
17908: LD_STRING 
17910: ST_TO_ADDR
// for i = 1 to normalCounter do
17911: LD_ADDR_VAR 0 8
17915: PUSH
17916: DOUBLE
17917: LD_INT 1
17919: DEC
17920: ST_TO_ADDR
17921: LD_EXP 42
17925: PUSH
17926: FOR_TO
17927: IFFALSE 17963
// begin if flags [ i ] then
17929: LD_VAR 0 4
17933: PUSH
17934: LD_VAR 0 8
17938: ARRAY
17939: IFFALSE 17961
// tmp := tmp & i & ; ;
17941: LD_ADDR_VAR 0 3
17945: PUSH
17946: LD_VAR 0 3
17950: PUSH
17951: LD_VAR 0 8
17955: STR
17956: PUSH
17957: LD_STRING ;
17959: STR
17960: ST_TO_ADDR
// end ;
17961: GO 17926
17963: POP
17964: POP
// for i = 1 to hardcoreCounter do
17965: LD_ADDR_VAR 0 8
17969: PUSH
17970: DOUBLE
17971: LD_INT 1
17973: DEC
17974: ST_TO_ADDR
17975: LD_EXP 43
17979: PUSH
17980: FOR_TO
17981: IFFALSE 18027
// begin if flags [ normalCounter + i ] then
17983: LD_VAR 0 4
17987: PUSH
17988: LD_EXP 42
17992: PUSH
17993: LD_VAR 0 8
17997: PLUS
17998: ARRAY
17999: IFFALSE 18025
// tmp := tmp & ( 100 + i ) & ; ;
18001: LD_ADDR_VAR 0 3
18005: PUSH
18006: LD_VAR 0 3
18010: PUSH
18011: LD_INT 100
18013: PUSH
18014: LD_VAR 0 8
18018: PLUS
18019: STR
18020: PUSH
18021: LD_STRING ;
18023: STR
18024: ST_TO_ADDR
// end ;
18025: GO 17980
18027: POP
18028: POP
// if tmp then
18029: LD_VAR 0 3
18033: IFFALSE 18045
// active := tmp ;
18035: LD_ADDR_VAR 0 7
18039: PUSH
18040: LD_VAR 0 3
18044: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
18045: LD_STRING getStreamItemsFromMission("
18047: PUSH
18048: LD_VAR 0 5
18052: STR
18053: PUSH
18054: LD_STRING ","
18056: STR
18057: PUSH
18058: LD_VAR 0 6
18062: STR
18063: PUSH
18064: LD_STRING ","
18066: STR
18067: PUSH
18068: LD_VAR 0 7
18072: STR
18073: PUSH
18074: LD_STRING ")
18076: STR
18077: PPUSH
18078: CALL_OW 559
// end else
18082: GO 18091
// ToLua ( getStreamItemsFromMission("","","") ) ;
18084: LD_STRING getStreamItemsFromMission("","","")
18086: PPUSH
18087: CALL_OW 559
// end ;
18091: LD_VAR 0 2
18095: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
18096: LD_EXP 41
18100: PUSH
18101: LD_EXP 46
18105: AND
18106: IFFALSE 18230
18108: GO 18110
18110: DISABLE
18111: LD_INT 0
18113: PPUSH
18114: PPUSH
// begin enable ;
18115: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
18116: LD_ADDR_VAR 0 2
18120: PUSH
18121: LD_INT 22
18123: PUSH
18124: LD_OWVAR 2
18128: PUSH
18129: EMPTY
18130: LIST
18131: LIST
18132: PUSH
18133: LD_INT 2
18135: PUSH
18136: LD_INT 34
18138: PUSH
18139: LD_INT 7
18141: PUSH
18142: EMPTY
18143: LIST
18144: LIST
18145: PUSH
18146: LD_INT 34
18148: PUSH
18149: LD_INT 45
18151: PUSH
18152: EMPTY
18153: LIST
18154: LIST
18155: PUSH
18156: LD_INT 34
18158: PUSH
18159: LD_INT 28
18161: PUSH
18162: EMPTY
18163: LIST
18164: LIST
18165: PUSH
18166: LD_INT 34
18168: PUSH
18169: LD_INT 47
18171: PUSH
18172: EMPTY
18173: LIST
18174: LIST
18175: PUSH
18176: EMPTY
18177: LIST
18178: LIST
18179: LIST
18180: LIST
18181: LIST
18182: PUSH
18183: EMPTY
18184: LIST
18185: LIST
18186: PPUSH
18187: CALL_OW 69
18191: ST_TO_ADDR
// if not tmp then
18192: LD_VAR 0 2
18196: NOT
18197: IFFALSE 18201
// exit ;
18199: GO 18230
// for i in tmp do
18201: LD_ADDR_VAR 0 1
18205: PUSH
18206: LD_VAR 0 2
18210: PUSH
18211: FOR_IN
18212: IFFALSE 18228
// begin SetLives ( i , 0 ) ;
18214: LD_VAR 0 1
18218: PPUSH
18219: LD_INT 0
18221: PPUSH
18222: CALL_OW 234
// end ;
18226: GO 18211
18228: POP
18229: POP
// end ;
18230: PPOPN 2
18232: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
18233: LD_EXP 41
18237: PUSH
18238: LD_EXP 47
18242: AND
18243: IFFALSE 18327
18245: GO 18247
18247: DISABLE
18248: LD_INT 0
18250: PPUSH
18251: PPUSH
// begin enable ;
18252: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
18253: LD_ADDR_VAR 0 2
18257: PUSH
18258: LD_INT 22
18260: PUSH
18261: LD_OWVAR 2
18265: PUSH
18266: EMPTY
18267: LIST
18268: LIST
18269: PUSH
18270: LD_INT 32
18272: PUSH
18273: LD_INT 3
18275: PUSH
18276: EMPTY
18277: LIST
18278: LIST
18279: PUSH
18280: EMPTY
18281: LIST
18282: LIST
18283: PPUSH
18284: CALL_OW 69
18288: ST_TO_ADDR
// if not tmp then
18289: LD_VAR 0 2
18293: NOT
18294: IFFALSE 18298
// exit ;
18296: GO 18327
// for i in tmp do
18298: LD_ADDR_VAR 0 1
18302: PUSH
18303: LD_VAR 0 2
18307: PUSH
18308: FOR_IN
18309: IFFALSE 18325
// begin SetLives ( i , 0 ) ;
18311: LD_VAR 0 1
18315: PPUSH
18316: LD_INT 0
18318: PPUSH
18319: CALL_OW 234
// end ;
18323: GO 18308
18325: POP
18326: POP
// end ;
18327: PPOPN 2
18329: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
18330: LD_EXP 41
18334: PUSH
18335: LD_EXP 44
18339: AND
18340: IFFALSE 18433
18342: GO 18344
18344: DISABLE
18345: LD_INT 0
18347: PPUSH
// begin enable ;
18348: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
18349: LD_ADDR_VAR 0 1
18353: PUSH
18354: LD_INT 22
18356: PUSH
18357: LD_OWVAR 2
18361: PUSH
18362: EMPTY
18363: LIST
18364: LIST
18365: PUSH
18366: LD_INT 2
18368: PUSH
18369: LD_INT 25
18371: PUSH
18372: LD_INT 5
18374: PUSH
18375: EMPTY
18376: LIST
18377: LIST
18378: PUSH
18379: LD_INT 25
18381: PUSH
18382: LD_INT 9
18384: PUSH
18385: EMPTY
18386: LIST
18387: LIST
18388: PUSH
18389: LD_INT 25
18391: PUSH
18392: LD_INT 8
18394: PUSH
18395: EMPTY
18396: LIST
18397: LIST
18398: PUSH
18399: EMPTY
18400: LIST
18401: LIST
18402: LIST
18403: LIST
18404: PUSH
18405: EMPTY
18406: LIST
18407: LIST
18408: PPUSH
18409: CALL_OW 69
18413: PUSH
18414: FOR_IN
18415: IFFALSE 18431
// begin SetClass ( i , 1 ) ;
18417: LD_VAR 0 1
18421: PPUSH
18422: LD_INT 1
18424: PPUSH
18425: CALL_OW 336
// end ;
18429: GO 18414
18431: POP
18432: POP
// end ;
18433: PPOPN 1
18435: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
18436: LD_EXP 41
18440: PUSH
18441: LD_EXP 45
18445: AND
18446: PUSH
18447: LD_OWVAR 65
18451: PUSH
18452: LD_INT 7
18454: LESS
18455: AND
18456: IFFALSE 18470
18458: GO 18460
18460: DISABLE
// begin enable ;
18461: ENABLE
// game_speed := 7 ;
18462: LD_ADDR_OWVAR 65
18466: PUSH
18467: LD_INT 7
18469: ST_TO_ADDR
// end ;
18470: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
18471: LD_EXP 41
18475: PUSH
18476: LD_EXP 48
18480: AND
18481: IFFALSE 18683
18483: GO 18485
18485: DISABLE
18486: LD_INT 0
18488: PPUSH
18489: PPUSH
18490: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18491: LD_ADDR_VAR 0 3
18495: PUSH
18496: LD_INT 81
18498: PUSH
18499: LD_OWVAR 2
18503: PUSH
18504: EMPTY
18505: LIST
18506: LIST
18507: PUSH
18508: LD_INT 21
18510: PUSH
18511: LD_INT 1
18513: PUSH
18514: EMPTY
18515: LIST
18516: LIST
18517: PUSH
18518: EMPTY
18519: LIST
18520: LIST
18521: PPUSH
18522: CALL_OW 69
18526: ST_TO_ADDR
// if not tmp then
18527: LD_VAR 0 3
18531: NOT
18532: IFFALSE 18536
// exit ;
18534: GO 18683
// if tmp > 5 then
18536: LD_VAR 0 3
18540: PUSH
18541: LD_INT 5
18543: GREATER
18544: IFFALSE 18556
// k := 5 else
18546: LD_ADDR_VAR 0 2
18550: PUSH
18551: LD_INT 5
18553: ST_TO_ADDR
18554: GO 18566
// k := tmp ;
18556: LD_ADDR_VAR 0 2
18560: PUSH
18561: LD_VAR 0 3
18565: ST_TO_ADDR
// for i := 1 to k do
18566: LD_ADDR_VAR 0 1
18570: PUSH
18571: DOUBLE
18572: LD_INT 1
18574: DEC
18575: ST_TO_ADDR
18576: LD_VAR 0 2
18580: PUSH
18581: FOR_TO
18582: IFFALSE 18681
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
18584: LD_VAR 0 3
18588: PUSH
18589: LD_VAR 0 1
18593: ARRAY
18594: PPUSH
18595: LD_VAR 0 1
18599: PUSH
18600: LD_INT 4
18602: MOD
18603: PUSH
18604: LD_INT 1
18606: PLUS
18607: PPUSH
18608: CALL_OW 259
18612: PUSH
18613: LD_INT 10
18615: LESS
18616: IFFALSE 18679
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
18618: LD_VAR 0 3
18622: PUSH
18623: LD_VAR 0 1
18627: ARRAY
18628: PPUSH
18629: LD_VAR 0 1
18633: PUSH
18634: LD_INT 4
18636: MOD
18637: PUSH
18638: LD_INT 1
18640: PLUS
18641: PPUSH
18642: LD_VAR 0 3
18646: PUSH
18647: LD_VAR 0 1
18651: ARRAY
18652: PPUSH
18653: LD_VAR 0 1
18657: PUSH
18658: LD_INT 4
18660: MOD
18661: PUSH
18662: LD_INT 1
18664: PLUS
18665: PPUSH
18666: CALL_OW 259
18670: PUSH
18671: LD_INT 1
18673: PLUS
18674: PPUSH
18675: CALL_OW 237
18679: GO 18581
18681: POP
18682: POP
// end ;
18683: PPOPN 3
18685: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
18686: LD_EXP 41
18690: PUSH
18691: LD_EXP 49
18695: AND
18696: IFFALSE 18716
18698: GO 18700
18700: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
18701: LD_INT 4
18703: PPUSH
18704: LD_OWVAR 2
18708: PPUSH
18709: LD_INT 0
18711: PPUSH
18712: CALL_OW 324
18716: END
// every 0 0$1 trigger StreamModeActive and sShovel do
18717: LD_EXP 41
18721: PUSH
18722: LD_EXP 78
18726: AND
18727: IFFALSE 18747
18729: GO 18731
18731: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
18732: LD_INT 19
18734: PPUSH
18735: LD_OWVAR 2
18739: PPUSH
18740: LD_INT 0
18742: PPUSH
18743: CALL_OW 324
18747: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
18748: LD_EXP 41
18752: PUSH
18753: LD_EXP 50
18757: AND
18758: IFFALSE 18860
18760: GO 18762
18762: DISABLE
18763: LD_INT 0
18765: PPUSH
18766: PPUSH
// begin enable ;
18767: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
18768: LD_ADDR_VAR 0 2
18772: PUSH
18773: LD_INT 22
18775: PUSH
18776: LD_OWVAR 2
18780: PUSH
18781: EMPTY
18782: LIST
18783: LIST
18784: PUSH
18785: LD_INT 2
18787: PUSH
18788: LD_INT 34
18790: PUSH
18791: LD_INT 11
18793: PUSH
18794: EMPTY
18795: LIST
18796: LIST
18797: PUSH
18798: LD_INT 34
18800: PUSH
18801: LD_INT 30
18803: PUSH
18804: EMPTY
18805: LIST
18806: LIST
18807: PUSH
18808: EMPTY
18809: LIST
18810: LIST
18811: LIST
18812: PUSH
18813: EMPTY
18814: LIST
18815: LIST
18816: PPUSH
18817: CALL_OW 69
18821: ST_TO_ADDR
// if not tmp then
18822: LD_VAR 0 2
18826: NOT
18827: IFFALSE 18831
// exit ;
18829: GO 18860
// for i in tmp do
18831: LD_ADDR_VAR 0 1
18835: PUSH
18836: LD_VAR 0 2
18840: PUSH
18841: FOR_IN
18842: IFFALSE 18858
// begin SetLives ( i , 0 ) ;
18844: LD_VAR 0 1
18848: PPUSH
18849: LD_INT 0
18851: PPUSH
18852: CALL_OW 234
// end ;
18856: GO 18841
18858: POP
18859: POP
// end ;
18860: PPOPN 2
18862: END
// every 0 0$1 trigger StreamModeActive and sBunker do
18863: LD_EXP 41
18867: PUSH
18868: LD_EXP 51
18872: AND
18873: IFFALSE 18893
18875: GO 18877
18877: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
18878: LD_INT 32
18880: PPUSH
18881: LD_OWVAR 2
18885: PPUSH
18886: LD_INT 0
18888: PPUSH
18889: CALL_OW 324
18893: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
18894: LD_EXP 41
18898: PUSH
18899: LD_EXP 52
18903: AND
18904: IFFALSE 19085
18906: GO 18908
18908: DISABLE
18909: LD_INT 0
18911: PPUSH
18912: PPUSH
18913: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18914: LD_ADDR_VAR 0 2
18918: PUSH
18919: LD_INT 22
18921: PUSH
18922: LD_OWVAR 2
18926: PUSH
18927: EMPTY
18928: LIST
18929: LIST
18930: PUSH
18931: LD_INT 33
18933: PUSH
18934: LD_INT 3
18936: PUSH
18937: EMPTY
18938: LIST
18939: LIST
18940: PUSH
18941: EMPTY
18942: LIST
18943: LIST
18944: PPUSH
18945: CALL_OW 69
18949: ST_TO_ADDR
// if not tmp then
18950: LD_VAR 0 2
18954: NOT
18955: IFFALSE 18959
// exit ;
18957: GO 19085
// side := 0 ;
18959: LD_ADDR_VAR 0 3
18963: PUSH
18964: LD_INT 0
18966: ST_TO_ADDR
// for i := 1 to 8 do
18967: LD_ADDR_VAR 0 1
18971: PUSH
18972: DOUBLE
18973: LD_INT 1
18975: DEC
18976: ST_TO_ADDR
18977: LD_INT 8
18979: PUSH
18980: FOR_TO
18981: IFFALSE 19029
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18983: LD_OWVAR 2
18987: PUSH
18988: LD_VAR 0 1
18992: NONEQUAL
18993: PUSH
18994: LD_OWVAR 2
18998: PPUSH
18999: LD_VAR 0 1
19003: PPUSH
19004: CALL_OW 81
19008: PUSH
19009: LD_INT 2
19011: EQUAL
19012: AND
19013: IFFALSE 19027
// begin side := i ;
19015: LD_ADDR_VAR 0 3
19019: PUSH
19020: LD_VAR 0 1
19024: ST_TO_ADDR
// break ;
19025: GO 19029
// end ;
19027: GO 18980
19029: POP
19030: POP
// if not side then
19031: LD_VAR 0 3
19035: NOT
19036: IFFALSE 19040
// exit ;
19038: GO 19085
// for i := 1 to tmp do
19040: LD_ADDR_VAR 0 1
19044: PUSH
19045: DOUBLE
19046: LD_INT 1
19048: DEC
19049: ST_TO_ADDR
19050: LD_VAR 0 2
19054: PUSH
19055: FOR_TO
19056: IFFALSE 19083
// if Prob ( 60 ) then
19058: LD_INT 60
19060: PPUSH
19061: CALL_OW 13
19065: IFFALSE 19081
// SetSide ( i , side ) ;
19067: LD_VAR 0 1
19071: PPUSH
19072: LD_VAR 0 3
19076: PPUSH
19077: CALL_OW 235
19081: GO 19055
19083: POP
19084: POP
// end ;
19085: PPOPN 3
19087: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
19088: LD_EXP 41
19092: PUSH
19093: LD_EXP 54
19097: AND
19098: IFFALSE 19217
19100: GO 19102
19102: DISABLE
19103: LD_INT 0
19105: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
19106: LD_ADDR_VAR 0 1
19110: PUSH
19111: LD_INT 22
19113: PUSH
19114: LD_OWVAR 2
19118: PUSH
19119: EMPTY
19120: LIST
19121: LIST
19122: PUSH
19123: LD_INT 21
19125: PUSH
19126: LD_INT 1
19128: PUSH
19129: EMPTY
19130: LIST
19131: LIST
19132: PUSH
19133: LD_INT 3
19135: PUSH
19136: LD_INT 23
19138: PUSH
19139: LD_INT 0
19141: PUSH
19142: EMPTY
19143: LIST
19144: LIST
19145: PUSH
19146: EMPTY
19147: LIST
19148: LIST
19149: PUSH
19150: EMPTY
19151: LIST
19152: LIST
19153: LIST
19154: PPUSH
19155: CALL_OW 69
19159: PUSH
19160: FOR_IN
19161: IFFALSE 19215
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
19163: LD_VAR 0 1
19167: PPUSH
19168: CALL_OW 257
19172: PUSH
19173: LD_INT 1
19175: PUSH
19176: LD_INT 2
19178: PUSH
19179: LD_INT 3
19181: PUSH
19182: LD_INT 4
19184: PUSH
19185: EMPTY
19186: LIST
19187: LIST
19188: LIST
19189: LIST
19190: IN
19191: IFFALSE 19213
// SetClass ( un , rand ( 1 , 4 ) ) ;
19193: LD_VAR 0 1
19197: PPUSH
19198: LD_INT 1
19200: PPUSH
19201: LD_INT 4
19203: PPUSH
19204: CALL_OW 12
19208: PPUSH
19209: CALL_OW 336
19213: GO 19160
19215: POP
19216: POP
// end ;
19217: PPOPN 1
19219: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
19220: LD_EXP 41
19224: PUSH
19225: LD_EXP 53
19229: AND
19230: IFFALSE 19309
19232: GO 19234
19234: DISABLE
19235: LD_INT 0
19237: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19238: LD_ADDR_VAR 0 1
19242: PUSH
19243: LD_INT 22
19245: PUSH
19246: LD_OWVAR 2
19250: PUSH
19251: EMPTY
19252: LIST
19253: LIST
19254: PUSH
19255: LD_INT 21
19257: PUSH
19258: LD_INT 3
19260: PUSH
19261: EMPTY
19262: LIST
19263: LIST
19264: PUSH
19265: EMPTY
19266: LIST
19267: LIST
19268: PPUSH
19269: CALL_OW 69
19273: ST_TO_ADDR
// if not tmp then
19274: LD_VAR 0 1
19278: NOT
19279: IFFALSE 19283
// exit ;
19281: GO 19309
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
19283: LD_VAR 0 1
19287: PUSH
19288: LD_INT 1
19290: PPUSH
19291: LD_VAR 0 1
19295: PPUSH
19296: CALL_OW 12
19300: ARRAY
19301: PPUSH
19302: LD_INT 100
19304: PPUSH
19305: CALL_OW 234
// end ;
19309: PPOPN 1
19311: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
19312: LD_EXP 41
19316: PUSH
19317: LD_EXP 55
19321: AND
19322: IFFALSE 19420
19324: GO 19326
19326: DISABLE
19327: LD_INT 0
19329: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
19330: LD_ADDR_VAR 0 1
19334: PUSH
19335: LD_INT 22
19337: PUSH
19338: LD_OWVAR 2
19342: PUSH
19343: EMPTY
19344: LIST
19345: LIST
19346: PUSH
19347: LD_INT 21
19349: PUSH
19350: LD_INT 1
19352: PUSH
19353: EMPTY
19354: LIST
19355: LIST
19356: PUSH
19357: EMPTY
19358: LIST
19359: LIST
19360: PPUSH
19361: CALL_OW 69
19365: ST_TO_ADDR
// if not tmp then
19366: LD_VAR 0 1
19370: NOT
19371: IFFALSE 19375
// exit ;
19373: GO 19420
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
19375: LD_VAR 0 1
19379: PUSH
19380: LD_INT 1
19382: PPUSH
19383: LD_VAR 0 1
19387: PPUSH
19388: CALL_OW 12
19392: ARRAY
19393: PPUSH
19394: LD_INT 1
19396: PPUSH
19397: LD_INT 4
19399: PPUSH
19400: CALL_OW 12
19404: PPUSH
19405: LD_INT 3000
19407: PPUSH
19408: LD_INT 9000
19410: PPUSH
19411: CALL_OW 12
19415: PPUSH
19416: CALL_OW 492
// end ;
19420: PPOPN 1
19422: END
// every 0 0$1 trigger StreamModeActive and sDepot do
19423: LD_EXP 41
19427: PUSH
19428: LD_EXP 56
19432: AND
19433: IFFALSE 19453
19435: GO 19437
19437: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
19438: LD_INT 1
19440: PPUSH
19441: LD_OWVAR 2
19445: PPUSH
19446: LD_INT 0
19448: PPUSH
19449: CALL_OW 324
19453: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
19454: LD_EXP 41
19458: PUSH
19459: LD_EXP 57
19463: AND
19464: IFFALSE 19547
19466: GO 19468
19468: DISABLE
19469: LD_INT 0
19471: PPUSH
19472: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
19473: LD_ADDR_VAR 0 2
19477: PUSH
19478: LD_INT 22
19480: PUSH
19481: LD_OWVAR 2
19485: PUSH
19486: EMPTY
19487: LIST
19488: LIST
19489: PUSH
19490: LD_INT 21
19492: PUSH
19493: LD_INT 3
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: PUSH
19500: EMPTY
19501: LIST
19502: LIST
19503: PPUSH
19504: CALL_OW 69
19508: ST_TO_ADDR
// if not tmp then
19509: LD_VAR 0 2
19513: NOT
19514: IFFALSE 19518
// exit ;
19516: GO 19547
// for i in tmp do
19518: LD_ADDR_VAR 0 1
19522: PUSH
19523: LD_VAR 0 2
19527: PUSH
19528: FOR_IN
19529: IFFALSE 19545
// SetBLevel ( i , 10 ) ;
19531: LD_VAR 0 1
19535: PPUSH
19536: LD_INT 10
19538: PPUSH
19539: CALL_OW 241
19543: GO 19528
19545: POP
19546: POP
// end ;
19547: PPOPN 2
19549: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
19550: LD_EXP 41
19554: PUSH
19555: LD_EXP 58
19559: AND
19560: IFFALSE 19671
19562: GO 19564
19564: DISABLE
19565: LD_INT 0
19567: PPUSH
19568: PPUSH
19569: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19570: LD_ADDR_VAR 0 3
19574: PUSH
19575: LD_INT 22
19577: PUSH
19578: LD_OWVAR 2
19582: PUSH
19583: EMPTY
19584: LIST
19585: LIST
19586: PUSH
19587: LD_INT 25
19589: PUSH
19590: LD_INT 1
19592: PUSH
19593: EMPTY
19594: LIST
19595: LIST
19596: PUSH
19597: EMPTY
19598: LIST
19599: LIST
19600: PPUSH
19601: CALL_OW 69
19605: ST_TO_ADDR
// if not tmp then
19606: LD_VAR 0 3
19610: NOT
19611: IFFALSE 19615
// exit ;
19613: GO 19671
// un := tmp [ rand ( 1 , tmp ) ] ;
19615: LD_ADDR_VAR 0 2
19619: PUSH
19620: LD_VAR 0 3
19624: PUSH
19625: LD_INT 1
19627: PPUSH
19628: LD_VAR 0 3
19632: PPUSH
19633: CALL_OW 12
19637: ARRAY
19638: ST_TO_ADDR
// if Crawls ( un ) then
19639: LD_VAR 0 2
19643: PPUSH
19644: CALL_OW 318
19648: IFFALSE 19659
// ComWalk ( un ) ;
19650: LD_VAR 0 2
19654: PPUSH
19655: CALL_OW 138
// SetClass ( un , class_sniper ) ;
19659: LD_VAR 0 2
19663: PPUSH
19664: LD_INT 5
19666: PPUSH
19667: CALL_OW 336
// end ;
19671: PPOPN 3
19673: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
19674: LD_EXP 41
19678: PUSH
19679: LD_EXP 59
19683: AND
19684: PUSH
19685: LD_OWVAR 67
19689: PUSH
19690: LD_INT 4
19692: LESS
19693: AND
19694: IFFALSE 19713
19696: GO 19698
19698: DISABLE
// begin Difficulty := Difficulty + 1 ;
19699: LD_ADDR_OWVAR 67
19703: PUSH
19704: LD_OWVAR 67
19708: PUSH
19709: LD_INT 1
19711: PLUS
19712: ST_TO_ADDR
// end ;
19713: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
19714: LD_EXP 41
19718: PUSH
19719: LD_EXP 60
19723: AND
19724: IFFALSE 19827
19726: GO 19728
19728: DISABLE
19729: LD_INT 0
19731: PPUSH
// begin for i := 1 to 5 do
19732: LD_ADDR_VAR 0 1
19736: PUSH
19737: DOUBLE
19738: LD_INT 1
19740: DEC
19741: ST_TO_ADDR
19742: LD_INT 5
19744: PUSH
19745: FOR_TO
19746: IFFALSE 19825
// begin uc_nation := nation_nature ;
19748: LD_ADDR_OWVAR 21
19752: PUSH
19753: LD_INT 0
19755: ST_TO_ADDR
// uc_side := 0 ;
19756: LD_ADDR_OWVAR 20
19760: PUSH
19761: LD_INT 0
19763: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19764: LD_ADDR_OWVAR 29
19768: PUSH
19769: LD_INT 12
19771: PUSH
19772: LD_INT 12
19774: PUSH
19775: EMPTY
19776: LIST
19777: LIST
19778: ST_TO_ADDR
// hc_agressivity := 20 ;
19779: LD_ADDR_OWVAR 35
19783: PUSH
19784: LD_INT 20
19786: ST_TO_ADDR
// hc_class := class_tiger ;
19787: LD_ADDR_OWVAR 28
19791: PUSH
19792: LD_INT 14
19794: ST_TO_ADDR
// hc_gallery :=  ;
19795: LD_ADDR_OWVAR 33
19799: PUSH
19800: LD_STRING 
19802: ST_TO_ADDR
// hc_name :=  ;
19803: LD_ADDR_OWVAR 26
19807: PUSH
19808: LD_STRING 
19810: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
19811: CALL_OW 44
19815: PPUSH
19816: LD_INT 0
19818: PPUSH
19819: CALL_OW 51
// end ;
19823: GO 19745
19825: POP
19826: POP
// end ;
19827: PPOPN 1
19829: END
// every 0 0$1 trigger StreamModeActive and sBomb do
19830: LD_EXP 41
19834: PUSH
19835: LD_EXP 61
19839: AND
19840: IFFALSE 19849
19842: GO 19844
19844: DISABLE
// StreamSibBomb ;
19845: CALL 19850 0 0
19849: END
// export function StreamSibBomb ; var i , x , y ; begin
19850: LD_INT 0
19852: PPUSH
19853: PPUSH
19854: PPUSH
19855: PPUSH
// result := false ;
19856: LD_ADDR_VAR 0 1
19860: PUSH
19861: LD_INT 0
19863: ST_TO_ADDR
// for i := 1 to 16 do
19864: LD_ADDR_VAR 0 2
19868: PUSH
19869: DOUBLE
19870: LD_INT 1
19872: DEC
19873: ST_TO_ADDR
19874: LD_INT 16
19876: PUSH
19877: FOR_TO
19878: IFFALSE 20077
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19880: LD_ADDR_VAR 0 3
19884: PUSH
19885: LD_INT 10
19887: PUSH
19888: LD_INT 20
19890: PUSH
19891: LD_INT 30
19893: PUSH
19894: LD_INT 40
19896: PUSH
19897: LD_INT 50
19899: PUSH
19900: LD_INT 60
19902: PUSH
19903: LD_INT 70
19905: PUSH
19906: LD_INT 80
19908: PUSH
19909: LD_INT 90
19911: PUSH
19912: LD_INT 100
19914: PUSH
19915: LD_INT 110
19917: PUSH
19918: LD_INT 120
19920: PUSH
19921: LD_INT 130
19923: PUSH
19924: LD_INT 140
19926: PUSH
19927: LD_INT 150
19929: PUSH
19930: EMPTY
19931: LIST
19932: LIST
19933: LIST
19934: LIST
19935: LIST
19936: LIST
19937: LIST
19938: LIST
19939: LIST
19940: LIST
19941: LIST
19942: LIST
19943: LIST
19944: LIST
19945: LIST
19946: PUSH
19947: LD_INT 1
19949: PPUSH
19950: LD_INT 15
19952: PPUSH
19953: CALL_OW 12
19957: ARRAY
19958: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19959: LD_ADDR_VAR 0 4
19963: PUSH
19964: LD_INT 10
19966: PUSH
19967: LD_INT 20
19969: PUSH
19970: LD_INT 30
19972: PUSH
19973: LD_INT 40
19975: PUSH
19976: LD_INT 50
19978: PUSH
19979: LD_INT 60
19981: PUSH
19982: LD_INT 70
19984: PUSH
19985: LD_INT 80
19987: PUSH
19988: LD_INT 90
19990: PUSH
19991: LD_INT 100
19993: PUSH
19994: LD_INT 110
19996: PUSH
19997: LD_INT 120
19999: PUSH
20000: LD_INT 130
20002: PUSH
20003: LD_INT 140
20005: PUSH
20006: LD_INT 150
20008: PUSH
20009: EMPTY
20010: LIST
20011: LIST
20012: LIST
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: LIST
20018: LIST
20019: LIST
20020: LIST
20021: LIST
20022: LIST
20023: LIST
20024: LIST
20025: PUSH
20026: LD_INT 1
20028: PPUSH
20029: LD_INT 15
20031: PPUSH
20032: CALL_OW 12
20036: ARRAY
20037: ST_TO_ADDR
// if ValidHex ( x , y ) then
20038: LD_VAR 0 3
20042: PPUSH
20043: LD_VAR 0 4
20047: PPUSH
20048: CALL_OW 488
20052: IFFALSE 20075
// begin result := [ x , y ] ;
20054: LD_ADDR_VAR 0 1
20058: PUSH
20059: LD_VAR 0 3
20063: PUSH
20064: LD_VAR 0 4
20068: PUSH
20069: EMPTY
20070: LIST
20071: LIST
20072: ST_TO_ADDR
// break ;
20073: GO 20077
// end ; end ;
20075: GO 19877
20077: POP
20078: POP
// if result then
20079: LD_VAR 0 1
20083: IFFALSE 20143
// begin ToLua ( playSibBomb() ) ;
20085: LD_STRING playSibBomb()
20087: PPUSH
20088: CALL_OW 559
// wait ( 0 0$14 ) ;
20092: LD_INT 490
20094: PPUSH
20095: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
20099: LD_VAR 0 1
20103: PUSH
20104: LD_INT 1
20106: ARRAY
20107: PPUSH
20108: LD_VAR 0 1
20112: PUSH
20113: LD_INT 2
20115: ARRAY
20116: PPUSH
20117: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
20121: LD_VAR 0 1
20125: PUSH
20126: LD_INT 1
20128: ARRAY
20129: PPUSH
20130: LD_VAR 0 1
20134: PUSH
20135: LD_INT 2
20137: ARRAY
20138: PPUSH
20139: CALL_OW 429
// end ; end ;
20143: LD_VAR 0 1
20147: RET
// every 0 0$1 trigger StreamModeActive and sReset do
20148: LD_EXP 41
20152: PUSH
20153: LD_EXP 63
20157: AND
20158: IFFALSE 20170
20160: GO 20162
20162: DISABLE
// YouLost (  ) ;
20163: LD_STRING 
20165: PPUSH
20166: CALL_OW 104
20170: END
// every 0 0$1 trigger StreamModeActive and sFog do
20171: LD_EXP 41
20175: PUSH
20176: LD_EXP 62
20180: AND
20181: IFFALSE 20195
20183: GO 20185
20185: DISABLE
// FogOff ( your_side ) ;
20186: LD_OWVAR 2
20190: PPUSH
20191: CALL_OW 344
20195: END
// every 0 0$1 trigger StreamModeActive and sSun do
20196: LD_EXP 41
20200: PUSH
20201: LD_EXP 64
20205: AND
20206: IFFALSE 20234
20208: GO 20210
20210: DISABLE
// begin solar_recharge_percent := 0 ;
20211: LD_ADDR_OWVAR 79
20215: PUSH
20216: LD_INT 0
20218: ST_TO_ADDR
// wait ( 5 5$00 ) ;
20219: LD_INT 10500
20221: PPUSH
20222: CALL_OW 67
// solar_recharge_percent := 100 ;
20226: LD_ADDR_OWVAR 79
20230: PUSH
20231: LD_INT 100
20233: ST_TO_ADDR
// end ;
20234: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
20235: LD_EXP 41
20239: PUSH
20240: LD_EXP 65
20244: AND
20245: IFFALSE 20484
20247: GO 20249
20249: DISABLE
20250: LD_INT 0
20252: PPUSH
20253: PPUSH
20254: PPUSH
// begin tmp := [ ] ;
20255: LD_ADDR_VAR 0 3
20259: PUSH
20260: EMPTY
20261: ST_TO_ADDR
// for i := 1 to 6 do
20262: LD_ADDR_VAR 0 1
20266: PUSH
20267: DOUBLE
20268: LD_INT 1
20270: DEC
20271: ST_TO_ADDR
20272: LD_INT 6
20274: PUSH
20275: FOR_TO
20276: IFFALSE 20381
// begin uc_nation := nation_nature ;
20278: LD_ADDR_OWVAR 21
20282: PUSH
20283: LD_INT 0
20285: ST_TO_ADDR
// uc_side := 0 ;
20286: LD_ADDR_OWVAR 20
20290: PUSH
20291: LD_INT 0
20293: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
20294: LD_ADDR_OWVAR 29
20298: PUSH
20299: LD_INT 12
20301: PUSH
20302: LD_INT 12
20304: PUSH
20305: EMPTY
20306: LIST
20307: LIST
20308: ST_TO_ADDR
// hc_agressivity := 20 ;
20309: LD_ADDR_OWVAR 35
20313: PUSH
20314: LD_INT 20
20316: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
20317: LD_ADDR_OWVAR 28
20321: PUSH
20322: LD_INT 17
20324: ST_TO_ADDR
// hc_gallery :=  ;
20325: LD_ADDR_OWVAR 33
20329: PUSH
20330: LD_STRING 
20332: ST_TO_ADDR
// hc_name :=  ;
20333: LD_ADDR_OWVAR 26
20337: PUSH
20338: LD_STRING 
20340: ST_TO_ADDR
// un := CreateHuman ;
20341: LD_ADDR_VAR 0 2
20345: PUSH
20346: CALL_OW 44
20350: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
20351: LD_VAR 0 2
20355: PPUSH
20356: LD_INT 1
20358: PPUSH
20359: CALL_OW 51
// tmp := tmp ^ un ;
20363: LD_ADDR_VAR 0 3
20367: PUSH
20368: LD_VAR 0 3
20372: PUSH
20373: LD_VAR 0 2
20377: ADD
20378: ST_TO_ADDR
// end ;
20379: GO 20275
20381: POP
20382: POP
// repeat wait ( 0 0$1 ) ;
20383: LD_INT 35
20385: PPUSH
20386: CALL_OW 67
// for un in tmp do
20390: LD_ADDR_VAR 0 2
20394: PUSH
20395: LD_VAR 0 3
20399: PUSH
20400: FOR_IN
20401: IFFALSE 20475
// begin if IsDead ( un ) then
20403: LD_VAR 0 2
20407: PPUSH
20408: CALL_OW 301
20412: IFFALSE 20432
// begin tmp := tmp diff un ;
20414: LD_ADDR_VAR 0 3
20418: PUSH
20419: LD_VAR 0 3
20423: PUSH
20424: LD_VAR 0 2
20428: DIFF
20429: ST_TO_ADDR
// continue ;
20430: GO 20400
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
20432: LD_VAR 0 2
20436: PPUSH
20437: LD_INT 3
20439: PUSH
20440: LD_INT 22
20442: PUSH
20443: LD_INT 0
20445: PUSH
20446: EMPTY
20447: LIST
20448: LIST
20449: PUSH
20450: EMPTY
20451: LIST
20452: LIST
20453: PPUSH
20454: CALL_OW 69
20458: PPUSH
20459: LD_VAR 0 2
20463: PPUSH
20464: CALL_OW 74
20468: PPUSH
20469: CALL_OW 115
// end ;
20473: GO 20400
20475: POP
20476: POP
// until not tmp ;
20477: LD_VAR 0 3
20481: NOT
20482: IFFALSE 20383
// end ;
20484: PPOPN 3
20486: END
// every 0 0$1 trigger StreamModeActive and sTroll do
20487: LD_EXP 41
20491: PUSH
20492: LD_EXP 66
20496: AND
20497: IFFALSE 20551
20499: GO 20501
20501: DISABLE
// begin ToLua ( displayTroll(); ) ;
20502: LD_STRING displayTroll();
20504: PPUSH
20505: CALL_OW 559
// wait ( 3 3$00 ) ;
20509: LD_INT 6300
20511: PPUSH
20512: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20516: LD_STRING hideTroll();
20518: PPUSH
20519: CALL_OW 559
// wait ( 1 1$00 ) ;
20523: LD_INT 2100
20525: PPUSH
20526: CALL_OW 67
// ToLua ( displayTroll(); ) ;
20530: LD_STRING displayTroll();
20532: PPUSH
20533: CALL_OW 559
// wait ( 1 1$00 ) ;
20537: LD_INT 2100
20539: PPUSH
20540: CALL_OW 67
// ToLua ( hideTroll(); ) ;
20544: LD_STRING hideTroll();
20546: PPUSH
20547: CALL_OW 559
// end ;
20551: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
20552: LD_EXP 41
20556: PUSH
20557: LD_EXP 67
20561: AND
20562: IFFALSE 20625
20564: GO 20566
20566: DISABLE
20567: LD_INT 0
20569: PPUSH
// begin p := 0 ;
20570: LD_ADDR_VAR 0 1
20574: PUSH
20575: LD_INT 0
20577: ST_TO_ADDR
// repeat game_speed := 1 ;
20578: LD_ADDR_OWVAR 65
20582: PUSH
20583: LD_INT 1
20585: ST_TO_ADDR
// wait ( 0 0$1 ) ;
20586: LD_INT 35
20588: PPUSH
20589: CALL_OW 67
// p := p + 1 ;
20593: LD_ADDR_VAR 0 1
20597: PUSH
20598: LD_VAR 0 1
20602: PUSH
20603: LD_INT 1
20605: PLUS
20606: ST_TO_ADDR
// until p >= 60 ;
20607: LD_VAR 0 1
20611: PUSH
20612: LD_INT 60
20614: GREATEREQUAL
20615: IFFALSE 20578
// game_speed := 4 ;
20617: LD_ADDR_OWVAR 65
20621: PUSH
20622: LD_INT 4
20624: ST_TO_ADDR
// end ;
20625: PPOPN 1
20627: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
20628: LD_EXP 41
20632: PUSH
20633: LD_EXP 68
20637: AND
20638: IFFALSE 20784
20640: GO 20642
20642: DISABLE
20643: LD_INT 0
20645: PPUSH
20646: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20647: LD_ADDR_VAR 0 1
20651: PUSH
20652: LD_INT 22
20654: PUSH
20655: LD_OWVAR 2
20659: PUSH
20660: EMPTY
20661: LIST
20662: LIST
20663: PUSH
20664: LD_INT 2
20666: PUSH
20667: LD_INT 30
20669: PUSH
20670: LD_INT 0
20672: PUSH
20673: EMPTY
20674: LIST
20675: LIST
20676: PUSH
20677: LD_INT 30
20679: PUSH
20680: LD_INT 1
20682: PUSH
20683: EMPTY
20684: LIST
20685: LIST
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: LIST
20691: PUSH
20692: EMPTY
20693: LIST
20694: LIST
20695: PPUSH
20696: CALL_OW 69
20700: ST_TO_ADDR
// if not depot then
20701: LD_VAR 0 1
20705: NOT
20706: IFFALSE 20710
// exit ;
20708: GO 20784
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20710: LD_ADDR_VAR 0 2
20714: PUSH
20715: LD_VAR 0 1
20719: PUSH
20720: LD_INT 1
20722: PPUSH
20723: LD_VAR 0 1
20727: PPUSH
20728: CALL_OW 12
20732: ARRAY
20733: PPUSH
20734: CALL_OW 274
20738: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
20739: LD_VAR 0 2
20743: PPUSH
20744: LD_INT 1
20746: PPUSH
20747: LD_INT 0
20749: PPUSH
20750: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
20754: LD_VAR 0 2
20758: PPUSH
20759: LD_INT 2
20761: PPUSH
20762: LD_INT 0
20764: PPUSH
20765: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
20769: LD_VAR 0 2
20773: PPUSH
20774: LD_INT 3
20776: PPUSH
20777: LD_INT 0
20779: PPUSH
20780: CALL_OW 277
// end ;
20784: PPOPN 2
20786: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
20787: LD_EXP 41
20791: PUSH
20792: LD_EXP 69
20796: AND
20797: IFFALSE 20894
20799: GO 20801
20801: DISABLE
20802: LD_INT 0
20804: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20805: LD_ADDR_VAR 0 1
20809: PUSH
20810: LD_INT 22
20812: PUSH
20813: LD_OWVAR 2
20817: PUSH
20818: EMPTY
20819: LIST
20820: LIST
20821: PUSH
20822: LD_INT 21
20824: PUSH
20825: LD_INT 1
20827: PUSH
20828: EMPTY
20829: LIST
20830: LIST
20831: PUSH
20832: LD_INT 3
20834: PUSH
20835: LD_INT 23
20837: PUSH
20838: LD_INT 0
20840: PUSH
20841: EMPTY
20842: LIST
20843: LIST
20844: PUSH
20845: EMPTY
20846: LIST
20847: LIST
20848: PUSH
20849: EMPTY
20850: LIST
20851: LIST
20852: LIST
20853: PPUSH
20854: CALL_OW 69
20858: ST_TO_ADDR
// if not tmp then
20859: LD_VAR 0 1
20863: NOT
20864: IFFALSE 20868
// exit ;
20866: GO 20894
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
20868: LD_VAR 0 1
20872: PUSH
20873: LD_INT 1
20875: PPUSH
20876: LD_VAR 0 1
20880: PPUSH
20881: CALL_OW 12
20885: ARRAY
20886: PPUSH
20887: LD_INT 200
20889: PPUSH
20890: CALL_OW 234
// end ;
20894: PPOPN 1
20896: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
20897: LD_EXP 41
20901: PUSH
20902: LD_EXP 70
20906: AND
20907: IFFALSE 20986
20909: GO 20911
20911: DISABLE
20912: LD_INT 0
20914: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20915: LD_ADDR_VAR 0 1
20919: PUSH
20920: LD_INT 22
20922: PUSH
20923: LD_OWVAR 2
20927: PUSH
20928: EMPTY
20929: LIST
20930: LIST
20931: PUSH
20932: LD_INT 21
20934: PUSH
20935: LD_INT 2
20937: PUSH
20938: EMPTY
20939: LIST
20940: LIST
20941: PUSH
20942: EMPTY
20943: LIST
20944: LIST
20945: PPUSH
20946: CALL_OW 69
20950: ST_TO_ADDR
// if not tmp then
20951: LD_VAR 0 1
20955: NOT
20956: IFFALSE 20960
// exit ;
20958: GO 20986
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20960: LD_VAR 0 1
20964: PUSH
20965: LD_INT 1
20967: PPUSH
20968: LD_VAR 0 1
20972: PPUSH
20973: CALL_OW 12
20977: ARRAY
20978: PPUSH
20979: LD_INT 60
20981: PPUSH
20982: CALL_OW 234
// end ;
20986: PPOPN 1
20988: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20989: LD_EXP 41
20993: PUSH
20994: LD_EXP 71
20998: AND
20999: IFFALSE 21098
21001: GO 21003
21003: DISABLE
21004: LD_INT 0
21006: PPUSH
21007: PPUSH
// begin enable ;
21008: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
21009: LD_ADDR_VAR 0 1
21013: PUSH
21014: LD_INT 22
21016: PUSH
21017: LD_OWVAR 2
21021: PUSH
21022: EMPTY
21023: LIST
21024: LIST
21025: PUSH
21026: LD_INT 61
21028: PUSH
21029: EMPTY
21030: LIST
21031: PUSH
21032: LD_INT 33
21034: PUSH
21035: LD_INT 2
21037: PUSH
21038: EMPTY
21039: LIST
21040: LIST
21041: PUSH
21042: EMPTY
21043: LIST
21044: LIST
21045: LIST
21046: PPUSH
21047: CALL_OW 69
21051: ST_TO_ADDR
// if not tmp then
21052: LD_VAR 0 1
21056: NOT
21057: IFFALSE 21061
// exit ;
21059: GO 21098
// for i in tmp do
21061: LD_ADDR_VAR 0 2
21065: PUSH
21066: LD_VAR 0 1
21070: PUSH
21071: FOR_IN
21072: IFFALSE 21096
// if IsControledBy ( i ) then
21074: LD_VAR 0 2
21078: PPUSH
21079: CALL_OW 312
21083: IFFALSE 21094
// ComUnlink ( i ) ;
21085: LD_VAR 0 2
21089: PPUSH
21090: CALL_OW 136
21094: GO 21071
21096: POP
21097: POP
// end ;
21098: PPOPN 2
21100: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
21101: LD_EXP 41
21105: PUSH
21106: LD_EXP 72
21110: AND
21111: IFFALSE 21251
21113: GO 21115
21115: DISABLE
21116: LD_INT 0
21118: PPUSH
21119: PPUSH
// begin ToLua ( displayPowell(); ) ;
21120: LD_STRING displayPowell();
21122: PPUSH
21123: CALL_OW 559
// uc_side := 0 ;
21127: LD_ADDR_OWVAR 20
21131: PUSH
21132: LD_INT 0
21134: ST_TO_ADDR
// uc_nation := 2 ;
21135: LD_ADDR_OWVAR 21
21139: PUSH
21140: LD_INT 2
21142: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
21143: LD_ADDR_OWVAR 37
21147: PUSH
21148: LD_INT 14
21150: ST_TO_ADDR
// vc_engine := engine_siberite ;
21151: LD_ADDR_OWVAR 39
21155: PUSH
21156: LD_INT 3
21158: ST_TO_ADDR
// vc_control := control_apeman ;
21159: LD_ADDR_OWVAR 38
21163: PUSH
21164: LD_INT 5
21166: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
21167: LD_ADDR_OWVAR 40
21171: PUSH
21172: LD_INT 29
21174: ST_TO_ADDR
// un := CreateVehicle ;
21175: LD_ADDR_VAR 0 2
21179: PUSH
21180: CALL_OW 45
21184: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21185: LD_VAR 0 2
21189: PPUSH
21190: LD_INT 1
21192: PPUSH
21193: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21197: LD_INT 35
21199: PPUSH
21200: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21204: LD_VAR 0 2
21208: PPUSH
21209: LD_INT 22
21211: PUSH
21212: LD_OWVAR 2
21216: PUSH
21217: EMPTY
21218: LIST
21219: LIST
21220: PPUSH
21221: CALL_OW 69
21225: PPUSH
21226: LD_VAR 0 2
21230: PPUSH
21231: CALL_OW 74
21235: PPUSH
21236: CALL_OW 115
// until IsDead ( un ) ;
21240: LD_VAR 0 2
21244: PPUSH
21245: CALL_OW 301
21249: IFFALSE 21197
// end ;
21251: PPOPN 2
21253: END
// every 0 0$1 trigger StreamModeActive and sStu do
21254: LD_EXP 41
21258: PUSH
21259: LD_EXP 80
21263: AND
21264: IFFALSE 21280
21266: GO 21268
21268: DISABLE
// begin ToLua ( displayStucuk(); ) ;
21269: LD_STRING displayStucuk();
21271: PPUSH
21272: CALL_OW 559
// ResetFog ;
21276: CALL_OW 335
// end ;
21280: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
21281: LD_EXP 41
21285: PUSH
21286: LD_EXP 73
21290: AND
21291: IFFALSE 21432
21293: GO 21295
21295: DISABLE
21296: LD_INT 0
21298: PPUSH
21299: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21300: LD_ADDR_VAR 0 2
21304: PUSH
21305: LD_INT 22
21307: PUSH
21308: LD_OWVAR 2
21312: PUSH
21313: EMPTY
21314: LIST
21315: LIST
21316: PUSH
21317: LD_INT 21
21319: PUSH
21320: LD_INT 1
21322: PUSH
21323: EMPTY
21324: LIST
21325: LIST
21326: PUSH
21327: EMPTY
21328: LIST
21329: LIST
21330: PPUSH
21331: CALL_OW 69
21335: ST_TO_ADDR
// if not tmp then
21336: LD_VAR 0 2
21340: NOT
21341: IFFALSE 21345
// exit ;
21343: GO 21432
// un := tmp [ rand ( 1 , tmp ) ] ;
21345: LD_ADDR_VAR 0 1
21349: PUSH
21350: LD_VAR 0 2
21354: PUSH
21355: LD_INT 1
21357: PPUSH
21358: LD_VAR 0 2
21362: PPUSH
21363: CALL_OW 12
21367: ARRAY
21368: ST_TO_ADDR
// SetSide ( un , 0 ) ;
21369: LD_VAR 0 1
21373: PPUSH
21374: LD_INT 0
21376: PPUSH
21377: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
21381: LD_VAR 0 1
21385: PPUSH
21386: LD_OWVAR 3
21390: PUSH
21391: LD_VAR 0 1
21395: DIFF
21396: PPUSH
21397: LD_VAR 0 1
21401: PPUSH
21402: CALL_OW 74
21406: PPUSH
21407: CALL_OW 115
// wait ( 0 0$20 ) ;
21411: LD_INT 700
21413: PPUSH
21414: CALL_OW 67
// SetSide ( un , your_side ) ;
21418: LD_VAR 0 1
21422: PPUSH
21423: LD_OWVAR 2
21427: PPUSH
21428: CALL_OW 235
// end ;
21432: PPOPN 2
21434: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
21435: LD_EXP 41
21439: PUSH
21440: LD_EXP 74
21444: AND
21445: IFFALSE 21551
21447: GO 21449
21449: DISABLE
21450: LD_INT 0
21452: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21453: LD_ADDR_VAR 0 1
21457: PUSH
21458: LD_INT 22
21460: PUSH
21461: LD_OWVAR 2
21465: PUSH
21466: EMPTY
21467: LIST
21468: LIST
21469: PUSH
21470: LD_INT 2
21472: PUSH
21473: LD_INT 30
21475: PUSH
21476: LD_INT 0
21478: PUSH
21479: EMPTY
21480: LIST
21481: LIST
21482: PUSH
21483: LD_INT 30
21485: PUSH
21486: LD_INT 1
21488: PUSH
21489: EMPTY
21490: LIST
21491: LIST
21492: PUSH
21493: EMPTY
21494: LIST
21495: LIST
21496: LIST
21497: PUSH
21498: EMPTY
21499: LIST
21500: LIST
21501: PPUSH
21502: CALL_OW 69
21506: ST_TO_ADDR
// if not depot then
21507: LD_VAR 0 1
21511: NOT
21512: IFFALSE 21516
// exit ;
21514: GO 21551
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
21516: LD_VAR 0 1
21520: PUSH
21521: LD_INT 1
21523: ARRAY
21524: PPUSH
21525: CALL_OW 250
21529: PPUSH
21530: LD_VAR 0 1
21534: PUSH
21535: LD_INT 1
21537: ARRAY
21538: PPUSH
21539: CALL_OW 251
21543: PPUSH
21544: LD_INT 70
21546: PPUSH
21547: CALL_OW 495
// end ;
21551: PPOPN 1
21553: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
21554: LD_EXP 41
21558: PUSH
21559: LD_EXP 75
21563: AND
21564: IFFALSE 21775
21566: GO 21568
21568: DISABLE
21569: LD_INT 0
21571: PPUSH
21572: PPUSH
21573: PPUSH
21574: PPUSH
21575: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21576: LD_ADDR_VAR 0 5
21580: PUSH
21581: LD_INT 22
21583: PUSH
21584: LD_OWVAR 2
21588: PUSH
21589: EMPTY
21590: LIST
21591: LIST
21592: PUSH
21593: LD_INT 21
21595: PUSH
21596: LD_INT 1
21598: PUSH
21599: EMPTY
21600: LIST
21601: LIST
21602: PUSH
21603: EMPTY
21604: LIST
21605: LIST
21606: PPUSH
21607: CALL_OW 69
21611: ST_TO_ADDR
// if not tmp then
21612: LD_VAR 0 5
21616: NOT
21617: IFFALSE 21621
// exit ;
21619: GO 21775
// for i in tmp do
21621: LD_ADDR_VAR 0 1
21625: PUSH
21626: LD_VAR 0 5
21630: PUSH
21631: FOR_IN
21632: IFFALSE 21773
// begin d := rand ( 0 , 5 ) ;
21634: LD_ADDR_VAR 0 4
21638: PUSH
21639: LD_INT 0
21641: PPUSH
21642: LD_INT 5
21644: PPUSH
21645: CALL_OW 12
21649: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
21650: LD_ADDR_VAR 0 2
21654: PUSH
21655: LD_VAR 0 1
21659: PPUSH
21660: CALL_OW 250
21664: PPUSH
21665: LD_VAR 0 4
21669: PPUSH
21670: LD_INT 3
21672: PPUSH
21673: LD_INT 12
21675: PPUSH
21676: CALL_OW 12
21680: PPUSH
21681: CALL_OW 272
21685: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
21686: LD_ADDR_VAR 0 3
21690: PUSH
21691: LD_VAR 0 1
21695: PPUSH
21696: CALL_OW 251
21700: PPUSH
21701: LD_VAR 0 4
21705: PPUSH
21706: LD_INT 3
21708: PPUSH
21709: LD_INT 12
21711: PPUSH
21712: CALL_OW 12
21716: PPUSH
21717: CALL_OW 273
21721: ST_TO_ADDR
// if ValidHex ( x , y ) then
21722: LD_VAR 0 2
21726: PPUSH
21727: LD_VAR 0 3
21731: PPUSH
21732: CALL_OW 488
21736: IFFALSE 21771
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
21738: LD_VAR 0 1
21742: PPUSH
21743: LD_VAR 0 2
21747: PPUSH
21748: LD_VAR 0 3
21752: PPUSH
21753: LD_INT 3
21755: PPUSH
21756: LD_INT 6
21758: PPUSH
21759: CALL_OW 12
21763: PPUSH
21764: LD_INT 1
21766: PPUSH
21767: CALL_OW 483
// end ;
21771: GO 21631
21773: POP
21774: POP
// end ;
21775: PPOPN 5
21777: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
21778: LD_EXP 41
21782: PUSH
21783: LD_EXP 76
21787: AND
21788: IFFALSE 21882
21790: GO 21792
21792: DISABLE
21793: LD_INT 0
21795: PPUSH
21796: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
21797: LD_ADDR_VAR 0 2
21801: PUSH
21802: LD_INT 22
21804: PUSH
21805: LD_OWVAR 2
21809: PUSH
21810: EMPTY
21811: LIST
21812: LIST
21813: PUSH
21814: LD_INT 32
21816: PUSH
21817: LD_INT 1
21819: PUSH
21820: EMPTY
21821: LIST
21822: LIST
21823: PUSH
21824: LD_INT 21
21826: PUSH
21827: LD_INT 2
21829: PUSH
21830: EMPTY
21831: LIST
21832: LIST
21833: PUSH
21834: EMPTY
21835: LIST
21836: LIST
21837: LIST
21838: PPUSH
21839: CALL_OW 69
21843: ST_TO_ADDR
// if not tmp then
21844: LD_VAR 0 2
21848: NOT
21849: IFFALSE 21853
// exit ;
21851: GO 21882
// for i in tmp do
21853: LD_ADDR_VAR 0 1
21857: PUSH
21858: LD_VAR 0 2
21862: PUSH
21863: FOR_IN
21864: IFFALSE 21880
// SetFuel ( i , 0 ) ;
21866: LD_VAR 0 1
21870: PPUSH
21871: LD_INT 0
21873: PPUSH
21874: CALL_OW 240
21878: GO 21863
21880: POP
21881: POP
// end ;
21882: PPOPN 2
21884: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
21885: LD_EXP 41
21889: PUSH
21890: LD_EXP 77
21894: AND
21895: IFFALSE 21961
21897: GO 21899
21899: DISABLE
21900: LD_INT 0
21902: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21903: LD_ADDR_VAR 0 1
21907: PUSH
21908: LD_INT 22
21910: PUSH
21911: LD_OWVAR 2
21915: PUSH
21916: EMPTY
21917: LIST
21918: LIST
21919: PUSH
21920: LD_INT 30
21922: PUSH
21923: LD_INT 29
21925: PUSH
21926: EMPTY
21927: LIST
21928: LIST
21929: PUSH
21930: EMPTY
21931: LIST
21932: LIST
21933: PPUSH
21934: CALL_OW 69
21938: ST_TO_ADDR
// if not tmp then
21939: LD_VAR 0 1
21943: NOT
21944: IFFALSE 21948
// exit ;
21946: GO 21961
// DestroyUnit ( tmp [ 1 ] ) ;
21948: LD_VAR 0 1
21952: PUSH
21953: LD_INT 1
21955: ARRAY
21956: PPUSH
21957: CALL_OW 65
// end ;
21961: PPOPN 1
21963: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21964: LD_EXP 41
21968: PUSH
21969: LD_EXP 79
21973: AND
21974: IFFALSE 22103
21976: GO 21978
21978: DISABLE
21979: LD_INT 0
21981: PPUSH
// begin uc_side := 0 ;
21982: LD_ADDR_OWVAR 20
21986: PUSH
21987: LD_INT 0
21989: ST_TO_ADDR
// uc_nation := nation_arabian ;
21990: LD_ADDR_OWVAR 21
21994: PUSH
21995: LD_INT 2
21997: ST_TO_ADDR
// hc_gallery :=  ;
21998: LD_ADDR_OWVAR 33
22002: PUSH
22003: LD_STRING 
22005: ST_TO_ADDR
// hc_name :=  ;
22006: LD_ADDR_OWVAR 26
22010: PUSH
22011: LD_STRING 
22013: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
22014: LD_INT 1
22016: PPUSH
22017: LD_INT 11
22019: PPUSH
22020: LD_INT 10
22022: PPUSH
22023: CALL_OW 380
// un := CreateHuman ;
22027: LD_ADDR_VAR 0 1
22031: PUSH
22032: CALL_OW 44
22036: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22037: LD_VAR 0 1
22041: PPUSH
22042: LD_INT 1
22044: PPUSH
22045: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
22049: LD_INT 35
22051: PPUSH
22052: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
22056: LD_VAR 0 1
22060: PPUSH
22061: LD_INT 22
22063: PUSH
22064: LD_OWVAR 2
22068: PUSH
22069: EMPTY
22070: LIST
22071: LIST
22072: PPUSH
22073: CALL_OW 69
22077: PPUSH
22078: LD_VAR 0 1
22082: PPUSH
22083: CALL_OW 74
22087: PPUSH
22088: CALL_OW 115
// until IsDead ( un ) ;
22092: LD_VAR 0 1
22096: PPUSH
22097: CALL_OW 301
22101: IFFALSE 22049
// end ;
22103: PPOPN 1
22105: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
22106: LD_EXP 41
22110: PUSH
22111: LD_EXP 81
22115: AND
22116: IFFALSE 22128
22118: GO 22120
22120: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
22121: LD_STRING earthquake(getX(game), 0, 32)
22123: PPUSH
22124: CALL_OW 559
22128: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
22129: LD_EXP 41
22133: PUSH
22134: LD_EXP 82
22138: AND
22139: IFFALSE 22230
22141: GO 22143
22143: DISABLE
22144: LD_INT 0
22146: PPUSH
// begin enable ;
22147: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
22148: LD_ADDR_VAR 0 1
22152: PUSH
22153: LD_INT 22
22155: PUSH
22156: LD_OWVAR 2
22160: PUSH
22161: EMPTY
22162: LIST
22163: LIST
22164: PUSH
22165: LD_INT 21
22167: PUSH
22168: LD_INT 2
22170: PUSH
22171: EMPTY
22172: LIST
22173: LIST
22174: PUSH
22175: LD_INT 33
22177: PUSH
22178: LD_INT 3
22180: PUSH
22181: EMPTY
22182: LIST
22183: LIST
22184: PUSH
22185: EMPTY
22186: LIST
22187: LIST
22188: LIST
22189: PPUSH
22190: CALL_OW 69
22194: ST_TO_ADDR
// if not tmp then
22195: LD_VAR 0 1
22199: NOT
22200: IFFALSE 22204
// exit ;
22202: GO 22230
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22204: LD_VAR 0 1
22208: PUSH
22209: LD_INT 1
22211: PPUSH
22212: LD_VAR 0 1
22216: PPUSH
22217: CALL_OW 12
22221: ARRAY
22222: PPUSH
22223: LD_INT 1
22225: PPUSH
22226: CALL_OW 234
// end ;
22230: PPOPN 1
22232: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
22233: LD_EXP 41
22237: PUSH
22238: LD_EXP 83
22242: AND
22243: IFFALSE 22384
22245: GO 22247
22247: DISABLE
22248: LD_INT 0
22250: PPUSH
22251: PPUSH
22252: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22253: LD_ADDR_VAR 0 3
22257: PUSH
22258: LD_INT 22
22260: PUSH
22261: LD_OWVAR 2
22265: PUSH
22266: EMPTY
22267: LIST
22268: LIST
22269: PUSH
22270: LD_INT 25
22272: PUSH
22273: LD_INT 1
22275: PUSH
22276: EMPTY
22277: LIST
22278: LIST
22279: PUSH
22280: EMPTY
22281: LIST
22282: LIST
22283: PPUSH
22284: CALL_OW 69
22288: ST_TO_ADDR
// if not tmp then
22289: LD_VAR 0 3
22293: NOT
22294: IFFALSE 22298
// exit ;
22296: GO 22384
// un := tmp [ rand ( 1 , tmp ) ] ;
22298: LD_ADDR_VAR 0 2
22302: PUSH
22303: LD_VAR 0 3
22307: PUSH
22308: LD_INT 1
22310: PPUSH
22311: LD_VAR 0 3
22315: PPUSH
22316: CALL_OW 12
22320: ARRAY
22321: ST_TO_ADDR
// if Crawls ( un ) then
22322: LD_VAR 0 2
22326: PPUSH
22327: CALL_OW 318
22331: IFFALSE 22342
// ComWalk ( un ) ;
22333: LD_VAR 0 2
22337: PPUSH
22338: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
22342: LD_VAR 0 2
22346: PPUSH
22347: LD_INT 9
22349: PPUSH
22350: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
22354: LD_INT 28
22356: PPUSH
22357: LD_OWVAR 2
22361: PPUSH
22362: LD_INT 2
22364: PPUSH
22365: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
22369: LD_INT 29
22371: PPUSH
22372: LD_OWVAR 2
22376: PPUSH
22377: LD_INT 2
22379: PPUSH
22380: CALL_OW 322
// end ;
22384: PPOPN 3
22386: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
22387: LD_EXP 41
22391: PUSH
22392: LD_EXP 84
22396: AND
22397: IFFALSE 22508
22399: GO 22401
22401: DISABLE
22402: LD_INT 0
22404: PPUSH
22405: PPUSH
22406: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22407: LD_ADDR_VAR 0 3
22411: PUSH
22412: LD_INT 22
22414: PUSH
22415: LD_OWVAR 2
22419: PUSH
22420: EMPTY
22421: LIST
22422: LIST
22423: PUSH
22424: LD_INT 25
22426: PUSH
22427: LD_INT 1
22429: PUSH
22430: EMPTY
22431: LIST
22432: LIST
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: PPUSH
22438: CALL_OW 69
22442: ST_TO_ADDR
// if not tmp then
22443: LD_VAR 0 3
22447: NOT
22448: IFFALSE 22452
// exit ;
22450: GO 22508
// un := tmp [ rand ( 1 , tmp ) ] ;
22452: LD_ADDR_VAR 0 2
22456: PUSH
22457: LD_VAR 0 3
22461: PUSH
22462: LD_INT 1
22464: PPUSH
22465: LD_VAR 0 3
22469: PPUSH
22470: CALL_OW 12
22474: ARRAY
22475: ST_TO_ADDR
// if Crawls ( un ) then
22476: LD_VAR 0 2
22480: PPUSH
22481: CALL_OW 318
22485: IFFALSE 22496
// ComWalk ( un ) ;
22487: LD_VAR 0 2
22491: PPUSH
22492: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22496: LD_VAR 0 2
22500: PPUSH
22501: LD_INT 8
22503: PPUSH
22504: CALL_OW 336
// end ;
22508: PPOPN 3
22510: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
22511: LD_EXP 41
22515: PUSH
22516: LD_EXP 85
22520: AND
22521: IFFALSE 22665
22523: GO 22525
22525: DISABLE
22526: LD_INT 0
22528: PPUSH
22529: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
22530: LD_ADDR_VAR 0 2
22534: PUSH
22535: LD_INT 22
22537: PUSH
22538: LD_OWVAR 2
22542: PUSH
22543: EMPTY
22544: LIST
22545: LIST
22546: PUSH
22547: LD_INT 21
22549: PUSH
22550: LD_INT 2
22552: PUSH
22553: EMPTY
22554: LIST
22555: LIST
22556: PUSH
22557: LD_INT 2
22559: PUSH
22560: LD_INT 34
22562: PUSH
22563: LD_INT 12
22565: PUSH
22566: EMPTY
22567: LIST
22568: LIST
22569: PUSH
22570: LD_INT 34
22572: PUSH
22573: LD_INT 51
22575: PUSH
22576: EMPTY
22577: LIST
22578: LIST
22579: PUSH
22580: LD_INT 34
22582: PUSH
22583: LD_INT 32
22585: PUSH
22586: EMPTY
22587: LIST
22588: LIST
22589: PUSH
22590: EMPTY
22591: LIST
22592: LIST
22593: LIST
22594: LIST
22595: PUSH
22596: EMPTY
22597: LIST
22598: LIST
22599: LIST
22600: PPUSH
22601: CALL_OW 69
22605: ST_TO_ADDR
// if not tmp then
22606: LD_VAR 0 2
22610: NOT
22611: IFFALSE 22615
// exit ;
22613: GO 22665
// for i in tmp do
22615: LD_ADDR_VAR 0 1
22619: PUSH
22620: LD_VAR 0 2
22624: PUSH
22625: FOR_IN
22626: IFFALSE 22663
// if GetCargo ( i , mat_artifact ) = 0 then
22628: LD_VAR 0 1
22632: PPUSH
22633: LD_INT 4
22635: PPUSH
22636: CALL_OW 289
22640: PUSH
22641: LD_INT 0
22643: EQUAL
22644: IFFALSE 22661
// SetCargo ( i , mat_siberit , 100 ) ;
22646: LD_VAR 0 1
22650: PPUSH
22651: LD_INT 3
22653: PPUSH
22654: LD_INT 100
22656: PPUSH
22657: CALL_OW 290
22661: GO 22625
22663: POP
22664: POP
// end ;
22665: PPOPN 2
22667: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
22668: LD_EXP 41
22672: PUSH
22673: LD_EXP 86
22677: AND
22678: IFFALSE 22861
22680: GO 22682
22682: DISABLE
22683: LD_INT 0
22685: PPUSH
22686: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22687: LD_ADDR_VAR 0 2
22691: PUSH
22692: LD_INT 22
22694: PUSH
22695: LD_OWVAR 2
22699: PUSH
22700: EMPTY
22701: LIST
22702: LIST
22703: PPUSH
22704: CALL_OW 69
22708: ST_TO_ADDR
// if not tmp then
22709: LD_VAR 0 2
22713: NOT
22714: IFFALSE 22718
// exit ;
22716: GO 22861
// for i := 1 to 2 do
22718: LD_ADDR_VAR 0 1
22722: PUSH
22723: DOUBLE
22724: LD_INT 1
22726: DEC
22727: ST_TO_ADDR
22728: LD_INT 2
22730: PUSH
22731: FOR_TO
22732: IFFALSE 22859
// begin uc_side := your_side ;
22734: LD_ADDR_OWVAR 20
22738: PUSH
22739: LD_OWVAR 2
22743: ST_TO_ADDR
// uc_nation := nation_american ;
22744: LD_ADDR_OWVAR 21
22748: PUSH
22749: LD_INT 1
22751: ST_TO_ADDR
// vc_chassis := us_morphling ;
22752: LD_ADDR_OWVAR 37
22756: PUSH
22757: LD_INT 5
22759: ST_TO_ADDR
// vc_engine := engine_siberite ;
22760: LD_ADDR_OWVAR 39
22764: PUSH
22765: LD_INT 3
22767: ST_TO_ADDR
// vc_control := control_computer ;
22768: LD_ADDR_OWVAR 38
22772: PUSH
22773: LD_INT 3
22775: ST_TO_ADDR
// vc_weapon := us_double_laser ;
22776: LD_ADDR_OWVAR 40
22780: PUSH
22781: LD_INT 10
22783: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
22784: LD_VAR 0 2
22788: PUSH
22789: LD_INT 1
22791: ARRAY
22792: PPUSH
22793: CALL_OW 310
22797: NOT
22798: IFFALSE 22845
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
22800: CALL_OW 45
22804: PPUSH
22805: LD_VAR 0 2
22809: PUSH
22810: LD_INT 1
22812: ARRAY
22813: PPUSH
22814: CALL_OW 250
22818: PPUSH
22819: LD_VAR 0 2
22823: PUSH
22824: LD_INT 1
22826: ARRAY
22827: PPUSH
22828: CALL_OW 251
22832: PPUSH
22833: LD_INT 12
22835: PPUSH
22836: LD_INT 1
22838: PPUSH
22839: CALL_OW 50
22843: GO 22857
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22845: CALL_OW 45
22849: PPUSH
22850: LD_INT 1
22852: PPUSH
22853: CALL_OW 51
// end ;
22857: GO 22731
22859: POP
22860: POP
// end ;
22861: PPOPN 2
22863: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
22864: LD_EXP 41
22868: PUSH
22869: LD_EXP 87
22873: AND
22874: IFFALSE 23096
22876: GO 22878
22878: DISABLE
22879: LD_INT 0
22881: PPUSH
22882: PPUSH
22883: PPUSH
22884: PPUSH
22885: PPUSH
22886: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22887: LD_ADDR_VAR 0 6
22891: PUSH
22892: LD_INT 22
22894: PUSH
22895: LD_OWVAR 2
22899: PUSH
22900: EMPTY
22901: LIST
22902: LIST
22903: PUSH
22904: LD_INT 21
22906: PUSH
22907: LD_INT 1
22909: PUSH
22910: EMPTY
22911: LIST
22912: LIST
22913: PUSH
22914: LD_INT 3
22916: PUSH
22917: LD_INT 23
22919: PUSH
22920: LD_INT 0
22922: PUSH
22923: EMPTY
22924: LIST
22925: LIST
22926: PUSH
22927: EMPTY
22928: LIST
22929: LIST
22930: PUSH
22931: EMPTY
22932: LIST
22933: LIST
22934: LIST
22935: PPUSH
22936: CALL_OW 69
22940: ST_TO_ADDR
// if not tmp then
22941: LD_VAR 0 6
22945: NOT
22946: IFFALSE 22950
// exit ;
22948: GO 23096
// s1 := rand ( 1 , 4 ) ;
22950: LD_ADDR_VAR 0 2
22954: PUSH
22955: LD_INT 1
22957: PPUSH
22958: LD_INT 4
22960: PPUSH
22961: CALL_OW 12
22965: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22966: LD_ADDR_VAR 0 4
22970: PUSH
22971: LD_VAR 0 6
22975: PUSH
22976: LD_INT 1
22978: ARRAY
22979: PPUSH
22980: LD_VAR 0 2
22984: PPUSH
22985: CALL_OW 259
22989: ST_TO_ADDR
// if s1 = 1 then
22990: LD_VAR 0 2
22994: PUSH
22995: LD_INT 1
22997: EQUAL
22998: IFFALSE 23018
// s2 := rand ( 2 , 4 ) else
23000: LD_ADDR_VAR 0 3
23004: PUSH
23005: LD_INT 2
23007: PPUSH
23008: LD_INT 4
23010: PPUSH
23011: CALL_OW 12
23015: ST_TO_ADDR
23016: GO 23026
// s2 := 1 ;
23018: LD_ADDR_VAR 0 3
23022: PUSH
23023: LD_INT 1
23025: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
23026: LD_ADDR_VAR 0 5
23030: PUSH
23031: LD_VAR 0 6
23035: PUSH
23036: LD_INT 1
23038: ARRAY
23039: PPUSH
23040: LD_VAR 0 3
23044: PPUSH
23045: CALL_OW 259
23049: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
23050: LD_VAR 0 6
23054: PUSH
23055: LD_INT 1
23057: ARRAY
23058: PPUSH
23059: LD_VAR 0 2
23063: PPUSH
23064: LD_VAR 0 5
23068: PPUSH
23069: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
23073: LD_VAR 0 6
23077: PUSH
23078: LD_INT 1
23080: ARRAY
23081: PPUSH
23082: LD_VAR 0 3
23086: PPUSH
23087: LD_VAR 0 4
23091: PPUSH
23092: CALL_OW 237
// end ;
23096: PPOPN 6
23098: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
23099: LD_EXP 41
23103: PUSH
23104: LD_EXP 88
23108: AND
23109: IFFALSE 23188
23111: GO 23113
23113: DISABLE
23114: LD_INT 0
23116: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
23117: LD_ADDR_VAR 0 1
23121: PUSH
23122: LD_INT 22
23124: PUSH
23125: LD_OWVAR 2
23129: PUSH
23130: EMPTY
23131: LIST
23132: LIST
23133: PUSH
23134: LD_INT 30
23136: PUSH
23137: LD_INT 3
23139: PUSH
23140: EMPTY
23141: LIST
23142: LIST
23143: PUSH
23144: EMPTY
23145: LIST
23146: LIST
23147: PPUSH
23148: CALL_OW 69
23152: ST_TO_ADDR
// if not tmp then
23153: LD_VAR 0 1
23157: NOT
23158: IFFALSE 23162
// exit ;
23160: GO 23188
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
23162: LD_VAR 0 1
23166: PUSH
23167: LD_INT 1
23169: PPUSH
23170: LD_VAR 0 1
23174: PPUSH
23175: CALL_OW 12
23179: ARRAY
23180: PPUSH
23181: LD_INT 1
23183: PPUSH
23184: CALL_OW 234
// end ;
23188: PPOPN 1
23190: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
23191: LD_EXP 41
23195: PUSH
23196: LD_EXP 89
23200: AND
23201: IFFALSE 23313
23203: GO 23205
23205: DISABLE
23206: LD_INT 0
23208: PPUSH
23209: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
23210: LD_ADDR_VAR 0 2
23214: PUSH
23215: LD_INT 22
23217: PUSH
23218: LD_OWVAR 2
23222: PUSH
23223: EMPTY
23224: LIST
23225: LIST
23226: PUSH
23227: LD_INT 2
23229: PUSH
23230: LD_INT 30
23232: PUSH
23233: LD_INT 27
23235: PUSH
23236: EMPTY
23237: LIST
23238: LIST
23239: PUSH
23240: LD_INT 30
23242: PUSH
23243: LD_INT 26
23245: PUSH
23246: EMPTY
23247: LIST
23248: LIST
23249: PUSH
23250: LD_INT 30
23252: PUSH
23253: LD_INT 28
23255: PUSH
23256: EMPTY
23257: LIST
23258: LIST
23259: PUSH
23260: EMPTY
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: PUSH
23266: EMPTY
23267: LIST
23268: LIST
23269: PPUSH
23270: CALL_OW 69
23274: ST_TO_ADDR
// if not tmp then
23275: LD_VAR 0 2
23279: NOT
23280: IFFALSE 23284
// exit ;
23282: GO 23313
// for i in tmp do
23284: LD_ADDR_VAR 0 1
23288: PUSH
23289: LD_VAR 0 2
23293: PUSH
23294: FOR_IN
23295: IFFALSE 23311
// SetLives ( i , 1 ) ;
23297: LD_VAR 0 1
23301: PPUSH
23302: LD_INT 1
23304: PPUSH
23305: CALL_OW 234
23309: GO 23294
23311: POP
23312: POP
// end ;
23313: PPOPN 2
23315: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
23316: LD_EXP 41
23320: PUSH
23321: LD_EXP 90
23325: AND
23326: IFFALSE 23613
23328: GO 23330
23330: DISABLE
23331: LD_INT 0
23333: PPUSH
23334: PPUSH
23335: PPUSH
// begin i := rand ( 1 , 7 ) ;
23336: LD_ADDR_VAR 0 1
23340: PUSH
23341: LD_INT 1
23343: PPUSH
23344: LD_INT 7
23346: PPUSH
23347: CALL_OW 12
23351: ST_TO_ADDR
// case i of 1 :
23352: LD_VAR 0 1
23356: PUSH
23357: LD_INT 1
23359: DOUBLE
23360: EQUAL
23361: IFTRUE 23365
23363: GO 23375
23365: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
23366: LD_STRING earthquake(getX(game), 0, 32)
23368: PPUSH
23369: CALL_OW 559
23373: GO 23613
23375: LD_INT 2
23377: DOUBLE
23378: EQUAL
23379: IFTRUE 23383
23381: GO 23397
23383: POP
// begin ToLua ( displayStucuk(); ) ;
23384: LD_STRING displayStucuk();
23386: PPUSH
23387: CALL_OW 559
// ResetFog ;
23391: CALL_OW 335
// end ; 3 :
23395: GO 23613
23397: LD_INT 3
23399: DOUBLE
23400: EQUAL
23401: IFTRUE 23405
23403: GO 23509
23405: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23406: LD_ADDR_VAR 0 2
23410: PUSH
23411: LD_INT 22
23413: PUSH
23414: LD_OWVAR 2
23418: PUSH
23419: EMPTY
23420: LIST
23421: LIST
23422: PUSH
23423: LD_INT 25
23425: PUSH
23426: LD_INT 1
23428: PUSH
23429: EMPTY
23430: LIST
23431: LIST
23432: PUSH
23433: EMPTY
23434: LIST
23435: LIST
23436: PPUSH
23437: CALL_OW 69
23441: ST_TO_ADDR
// if not tmp then
23442: LD_VAR 0 2
23446: NOT
23447: IFFALSE 23451
// exit ;
23449: GO 23613
// un := tmp [ rand ( 1 , tmp ) ] ;
23451: LD_ADDR_VAR 0 3
23455: PUSH
23456: LD_VAR 0 2
23460: PUSH
23461: LD_INT 1
23463: PPUSH
23464: LD_VAR 0 2
23468: PPUSH
23469: CALL_OW 12
23473: ARRAY
23474: ST_TO_ADDR
// if Crawls ( un ) then
23475: LD_VAR 0 3
23479: PPUSH
23480: CALL_OW 318
23484: IFFALSE 23495
// ComWalk ( un ) ;
23486: LD_VAR 0 3
23490: PPUSH
23491: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23495: LD_VAR 0 3
23499: PPUSH
23500: LD_INT 8
23502: PPUSH
23503: CALL_OW 336
// end ; 4 :
23507: GO 23613
23509: LD_INT 4
23511: DOUBLE
23512: EQUAL
23513: IFTRUE 23517
23515: GO 23591
23517: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23518: LD_ADDR_VAR 0 2
23522: PUSH
23523: LD_INT 22
23525: PUSH
23526: LD_OWVAR 2
23530: PUSH
23531: EMPTY
23532: LIST
23533: LIST
23534: PUSH
23535: LD_INT 30
23537: PUSH
23538: LD_INT 29
23540: PUSH
23541: EMPTY
23542: LIST
23543: LIST
23544: PUSH
23545: EMPTY
23546: LIST
23547: LIST
23548: PPUSH
23549: CALL_OW 69
23553: ST_TO_ADDR
// if not tmp then
23554: LD_VAR 0 2
23558: NOT
23559: IFFALSE 23563
// exit ;
23561: GO 23613
// CenterNowOnUnits ( tmp [ 1 ] ) ;
23563: LD_VAR 0 2
23567: PUSH
23568: LD_INT 1
23570: ARRAY
23571: PPUSH
23572: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
23576: LD_VAR 0 2
23580: PUSH
23581: LD_INT 1
23583: ARRAY
23584: PPUSH
23585: CALL_OW 65
// end ; 5 .. 7 :
23589: GO 23613
23591: LD_INT 5
23593: DOUBLE
23594: GREATEREQUAL
23595: IFFALSE 23603
23597: LD_INT 7
23599: DOUBLE
23600: LESSEQUAL
23601: IFTRUE 23605
23603: GO 23612
23605: POP
// StreamSibBomb ; end ;
23606: CALL 19850 0 0
23610: GO 23613
23612: POP
// end ;
23613: PPOPN 3
23615: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
23616: LD_EXP 41
23620: PUSH
23621: LD_EXP 91
23625: AND
23626: IFFALSE 23782
23628: GO 23630
23630: DISABLE
23631: LD_INT 0
23633: PPUSH
23634: PPUSH
23635: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23636: LD_ADDR_VAR 0 2
23640: PUSH
23641: LD_INT 81
23643: PUSH
23644: LD_OWVAR 2
23648: PUSH
23649: EMPTY
23650: LIST
23651: LIST
23652: PUSH
23653: LD_INT 2
23655: PUSH
23656: LD_INT 21
23658: PUSH
23659: LD_INT 1
23661: PUSH
23662: EMPTY
23663: LIST
23664: LIST
23665: PUSH
23666: LD_INT 21
23668: PUSH
23669: LD_INT 2
23671: PUSH
23672: EMPTY
23673: LIST
23674: LIST
23675: PUSH
23676: EMPTY
23677: LIST
23678: LIST
23679: LIST
23680: PUSH
23681: EMPTY
23682: LIST
23683: LIST
23684: PPUSH
23685: CALL_OW 69
23689: ST_TO_ADDR
// if not tmp then
23690: LD_VAR 0 2
23694: NOT
23695: IFFALSE 23699
// exit ;
23697: GO 23782
// p := 0 ;
23699: LD_ADDR_VAR 0 3
23703: PUSH
23704: LD_INT 0
23706: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23707: LD_INT 35
23709: PPUSH
23710: CALL_OW 67
// p := p + 1 ;
23714: LD_ADDR_VAR 0 3
23718: PUSH
23719: LD_VAR 0 3
23723: PUSH
23724: LD_INT 1
23726: PLUS
23727: ST_TO_ADDR
// for i in tmp do
23728: LD_ADDR_VAR 0 1
23732: PUSH
23733: LD_VAR 0 2
23737: PUSH
23738: FOR_IN
23739: IFFALSE 23770
// if GetLives ( i ) < 1000 then
23741: LD_VAR 0 1
23745: PPUSH
23746: CALL_OW 256
23750: PUSH
23751: LD_INT 1000
23753: LESS
23754: IFFALSE 23768
// SetLives ( i , 1000 ) ;
23756: LD_VAR 0 1
23760: PPUSH
23761: LD_INT 1000
23763: PPUSH
23764: CALL_OW 234
23768: GO 23738
23770: POP
23771: POP
// until p > 20 ;
23772: LD_VAR 0 3
23776: PUSH
23777: LD_INT 20
23779: GREATER
23780: IFFALSE 23707
// end ;
23782: PPOPN 3
23784: END
// every 0 0$1 trigger StreamModeActive and sTime do
23785: LD_EXP 41
23789: PUSH
23790: LD_EXP 92
23794: AND
23795: IFFALSE 23830
23797: GO 23799
23799: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
23800: LD_INT 28
23802: PPUSH
23803: LD_OWVAR 2
23807: PPUSH
23808: LD_INT 2
23810: PPUSH
23811: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
23815: LD_INT 30
23817: PPUSH
23818: LD_OWVAR 2
23822: PPUSH
23823: LD_INT 2
23825: PPUSH
23826: CALL_OW 322
// end ;
23830: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
23831: LD_EXP 41
23835: PUSH
23836: LD_EXP 93
23840: AND
23841: IFFALSE 23962
23843: GO 23845
23845: DISABLE
23846: LD_INT 0
23848: PPUSH
23849: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23850: LD_ADDR_VAR 0 2
23854: PUSH
23855: LD_INT 22
23857: PUSH
23858: LD_OWVAR 2
23862: PUSH
23863: EMPTY
23864: LIST
23865: LIST
23866: PUSH
23867: LD_INT 21
23869: PUSH
23870: LD_INT 1
23872: PUSH
23873: EMPTY
23874: LIST
23875: LIST
23876: PUSH
23877: LD_INT 3
23879: PUSH
23880: LD_INT 23
23882: PUSH
23883: LD_INT 0
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: PUSH
23890: EMPTY
23891: LIST
23892: LIST
23893: PUSH
23894: EMPTY
23895: LIST
23896: LIST
23897: LIST
23898: PPUSH
23899: CALL_OW 69
23903: ST_TO_ADDR
// if not tmp then
23904: LD_VAR 0 2
23908: NOT
23909: IFFALSE 23913
// exit ;
23911: GO 23962
// for i in tmp do
23913: LD_ADDR_VAR 0 1
23917: PUSH
23918: LD_VAR 0 2
23922: PUSH
23923: FOR_IN
23924: IFFALSE 23960
// begin if Crawls ( i ) then
23926: LD_VAR 0 1
23930: PPUSH
23931: CALL_OW 318
23935: IFFALSE 23946
// ComWalk ( i ) ;
23937: LD_VAR 0 1
23941: PPUSH
23942: CALL_OW 138
// SetClass ( i , 2 ) ;
23946: LD_VAR 0 1
23950: PPUSH
23951: LD_INT 2
23953: PPUSH
23954: CALL_OW 336
// end ;
23958: GO 23923
23960: POP
23961: POP
// end ;
23962: PPOPN 2
23964: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23965: LD_EXP 41
23969: PUSH
23970: LD_EXP 94
23974: AND
23975: IFFALSE 24263
23977: GO 23979
23979: DISABLE
23980: LD_INT 0
23982: PPUSH
23983: PPUSH
23984: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23985: LD_OWVAR 2
23989: PPUSH
23990: LD_INT 9
23992: PPUSH
23993: LD_INT 1
23995: PPUSH
23996: LD_INT 1
23998: PPUSH
23999: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
24003: LD_INT 9
24005: PPUSH
24006: LD_OWVAR 2
24010: PPUSH
24011: CALL_OW 343
// uc_side := 9 ;
24015: LD_ADDR_OWVAR 20
24019: PUSH
24020: LD_INT 9
24022: ST_TO_ADDR
// uc_nation := 2 ;
24023: LD_ADDR_OWVAR 21
24027: PUSH
24028: LD_INT 2
24030: ST_TO_ADDR
// hc_name := Dark Warrior ;
24031: LD_ADDR_OWVAR 26
24035: PUSH
24036: LD_STRING Dark Warrior
24038: ST_TO_ADDR
// hc_gallery :=  ;
24039: LD_ADDR_OWVAR 33
24043: PUSH
24044: LD_STRING 
24046: ST_TO_ADDR
// hc_noskilllimit := true ;
24047: LD_ADDR_OWVAR 76
24051: PUSH
24052: LD_INT 1
24054: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
24055: LD_ADDR_OWVAR 31
24059: PUSH
24060: LD_INT 30
24062: PUSH
24063: LD_INT 30
24065: PUSH
24066: LD_INT 30
24068: PUSH
24069: LD_INT 30
24071: PUSH
24072: EMPTY
24073: LIST
24074: LIST
24075: LIST
24076: LIST
24077: ST_TO_ADDR
// un := CreateHuman ;
24078: LD_ADDR_VAR 0 3
24082: PUSH
24083: CALL_OW 44
24087: ST_TO_ADDR
// hc_noskilllimit := false ;
24088: LD_ADDR_OWVAR 76
24092: PUSH
24093: LD_INT 0
24095: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24096: LD_VAR 0 3
24100: PPUSH
24101: LD_INT 1
24103: PPUSH
24104: CALL_OW 51
// ToLua ( playRanger() ) ;
24108: LD_STRING playRanger()
24110: PPUSH
24111: CALL_OW 559
// p := 0 ;
24115: LD_ADDR_VAR 0 2
24119: PUSH
24120: LD_INT 0
24122: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24123: LD_INT 35
24125: PPUSH
24126: CALL_OW 67
// p := p + 1 ;
24130: LD_ADDR_VAR 0 2
24134: PUSH
24135: LD_VAR 0 2
24139: PUSH
24140: LD_INT 1
24142: PLUS
24143: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
24144: LD_VAR 0 3
24148: PPUSH
24149: CALL_OW 256
24153: PUSH
24154: LD_INT 1000
24156: LESS
24157: IFFALSE 24171
// SetLives ( un , 1000 ) ;
24159: LD_VAR 0 3
24163: PPUSH
24164: LD_INT 1000
24166: PPUSH
24167: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
24171: LD_VAR 0 3
24175: PPUSH
24176: LD_INT 81
24178: PUSH
24179: LD_OWVAR 2
24183: PUSH
24184: EMPTY
24185: LIST
24186: LIST
24187: PUSH
24188: LD_INT 91
24190: PUSH
24191: LD_VAR 0 3
24195: PUSH
24196: LD_INT 30
24198: PUSH
24199: EMPTY
24200: LIST
24201: LIST
24202: LIST
24203: PUSH
24204: EMPTY
24205: LIST
24206: LIST
24207: PPUSH
24208: CALL_OW 69
24212: PPUSH
24213: LD_VAR 0 3
24217: PPUSH
24218: CALL_OW 74
24222: PPUSH
24223: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
24227: LD_VAR 0 2
24231: PUSH
24232: LD_INT 80
24234: GREATER
24235: PUSH
24236: LD_VAR 0 3
24240: PPUSH
24241: CALL_OW 301
24245: OR
24246: IFFALSE 24123
// if un then
24248: LD_VAR 0 3
24252: IFFALSE 24263
// RemoveUnit ( un ) ;
24254: LD_VAR 0 3
24258: PPUSH
24259: CALL_OW 64
// end ;
24263: PPOPN 3
24265: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
24266: LD_EXP 95
24270: IFFALSE 24386
24272: GO 24274
24274: DISABLE
24275: LD_INT 0
24277: PPUSH
24278: PPUSH
24279: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
24280: LD_ADDR_VAR 0 2
24284: PUSH
24285: LD_INT 81
24287: PUSH
24288: LD_OWVAR 2
24292: PUSH
24293: EMPTY
24294: LIST
24295: LIST
24296: PUSH
24297: LD_INT 21
24299: PUSH
24300: LD_INT 1
24302: PUSH
24303: EMPTY
24304: LIST
24305: LIST
24306: PUSH
24307: EMPTY
24308: LIST
24309: LIST
24310: PPUSH
24311: CALL_OW 69
24315: ST_TO_ADDR
// ToLua ( playComputer() ) ;
24316: LD_STRING playComputer()
24318: PPUSH
24319: CALL_OW 559
// if not tmp then
24323: LD_VAR 0 2
24327: NOT
24328: IFFALSE 24332
// exit ;
24330: GO 24386
// for i in tmp do
24332: LD_ADDR_VAR 0 1
24336: PUSH
24337: LD_VAR 0 2
24341: PUSH
24342: FOR_IN
24343: IFFALSE 24384
// for j := 1 to 4 do
24345: LD_ADDR_VAR 0 3
24349: PUSH
24350: DOUBLE
24351: LD_INT 1
24353: DEC
24354: ST_TO_ADDR
24355: LD_INT 4
24357: PUSH
24358: FOR_TO
24359: IFFALSE 24380
// SetSkill ( i , j , 10 ) ;
24361: LD_VAR 0 1
24365: PPUSH
24366: LD_VAR 0 3
24370: PPUSH
24371: LD_INT 10
24373: PPUSH
24374: CALL_OW 237
24378: GO 24358
24380: POP
24381: POP
24382: GO 24342
24384: POP
24385: POP
// end ;
24386: PPOPN 3
24388: END
// every 0 0$1 trigger s30 do var i , tmp ;
24389: LD_EXP 96
24393: IFFALSE 24462
24395: GO 24397
24397: DISABLE
24398: LD_INT 0
24400: PPUSH
24401: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24402: LD_ADDR_VAR 0 2
24406: PUSH
24407: LD_INT 22
24409: PUSH
24410: LD_OWVAR 2
24414: PUSH
24415: EMPTY
24416: LIST
24417: LIST
24418: PPUSH
24419: CALL_OW 69
24423: ST_TO_ADDR
// if not tmp then
24424: LD_VAR 0 2
24428: NOT
24429: IFFALSE 24433
// exit ;
24431: GO 24462
// for i in tmp do
24433: LD_ADDR_VAR 0 1
24437: PUSH
24438: LD_VAR 0 2
24442: PUSH
24443: FOR_IN
24444: IFFALSE 24460
// SetLives ( i , 300 ) ;
24446: LD_VAR 0 1
24450: PPUSH
24451: LD_INT 300
24453: PPUSH
24454: CALL_OW 234
24458: GO 24443
24460: POP
24461: POP
// end ;
24462: PPOPN 2
24464: END
// every 0 0$1 trigger s60 do var i , tmp ;
24465: LD_EXP 97
24469: IFFALSE 24538
24471: GO 24473
24473: DISABLE
24474: LD_INT 0
24476: PPUSH
24477: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24478: LD_ADDR_VAR 0 2
24482: PUSH
24483: LD_INT 22
24485: PUSH
24486: LD_OWVAR 2
24490: PUSH
24491: EMPTY
24492: LIST
24493: LIST
24494: PPUSH
24495: CALL_OW 69
24499: ST_TO_ADDR
// if not tmp then
24500: LD_VAR 0 2
24504: NOT
24505: IFFALSE 24509
// exit ;
24507: GO 24538
// for i in tmp do
24509: LD_ADDR_VAR 0 1
24513: PUSH
24514: LD_VAR 0 2
24518: PUSH
24519: FOR_IN
24520: IFFALSE 24536
// SetLives ( i , 600 ) ;
24522: LD_VAR 0 1
24526: PPUSH
24527: LD_INT 600
24529: PPUSH
24530: CALL_OW 234
24534: GO 24519
24536: POP
24537: POP
// end ;
24538: PPOPN 2
24540: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
24541: LD_INT 0
24543: PPUSH
// case cmd of 301 :
24544: LD_VAR 0 1
24548: PUSH
24549: LD_INT 301
24551: DOUBLE
24552: EQUAL
24553: IFTRUE 24557
24555: GO 24589
24557: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
24558: LD_VAR 0 6
24562: PPUSH
24563: LD_VAR 0 7
24567: PPUSH
24568: LD_VAR 0 8
24572: PPUSH
24573: LD_VAR 0 4
24577: PPUSH
24578: LD_VAR 0 5
24582: PPUSH
24583: CALL 25790 0 5
24587: GO 24710
24589: LD_INT 302
24591: DOUBLE
24592: EQUAL
24593: IFTRUE 24597
24595: GO 24634
24597: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
24598: LD_VAR 0 6
24602: PPUSH
24603: LD_VAR 0 7
24607: PPUSH
24608: LD_VAR 0 8
24612: PPUSH
24613: LD_VAR 0 9
24617: PPUSH
24618: LD_VAR 0 4
24622: PPUSH
24623: LD_VAR 0 5
24627: PPUSH
24628: CALL 25881 0 6
24632: GO 24710
24634: LD_INT 303
24636: DOUBLE
24637: EQUAL
24638: IFTRUE 24642
24640: GO 24679
24642: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
24643: LD_VAR 0 6
24647: PPUSH
24648: LD_VAR 0 7
24652: PPUSH
24653: LD_VAR 0 8
24657: PPUSH
24658: LD_VAR 0 9
24662: PPUSH
24663: LD_VAR 0 4
24667: PPUSH
24668: LD_VAR 0 5
24672: PPUSH
24673: CALL 24715 0 6
24677: GO 24710
24679: LD_INT 304
24681: DOUBLE
24682: EQUAL
24683: IFTRUE 24687
24685: GO 24709
24687: POP
// hHackTeleport ( unit , x , y ) ; end ;
24688: LD_VAR 0 2
24692: PPUSH
24693: LD_VAR 0 4
24697: PPUSH
24698: LD_VAR 0 5
24702: PPUSH
24703: CALL 26474 0 3
24707: GO 24710
24709: POP
// end ;
24710: LD_VAR 0 12
24714: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
24715: LD_INT 0
24717: PPUSH
24718: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
24719: LD_VAR 0 1
24723: PUSH
24724: LD_INT 1
24726: LESS
24727: PUSH
24728: LD_VAR 0 1
24732: PUSH
24733: LD_INT 3
24735: GREATER
24736: OR
24737: PUSH
24738: LD_VAR 0 5
24742: PPUSH
24743: LD_VAR 0 6
24747: PPUSH
24748: CALL_OW 428
24752: OR
24753: IFFALSE 24757
// exit ;
24755: GO 25477
// uc_side := your_side ;
24757: LD_ADDR_OWVAR 20
24761: PUSH
24762: LD_OWVAR 2
24766: ST_TO_ADDR
// uc_nation := nation ;
24767: LD_ADDR_OWVAR 21
24771: PUSH
24772: LD_VAR 0 1
24776: ST_TO_ADDR
// bc_level = 1 ;
24777: LD_ADDR_OWVAR 43
24781: PUSH
24782: LD_INT 1
24784: ST_TO_ADDR
// case btype of 1 :
24785: LD_VAR 0 2
24789: PUSH
24790: LD_INT 1
24792: DOUBLE
24793: EQUAL
24794: IFTRUE 24798
24796: GO 24809
24798: POP
// bc_type := b_depot ; 2 :
24799: LD_ADDR_OWVAR 42
24803: PUSH
24804: LD_INT 0
24806: ST_TO_ADDR
24807: GO 25421
24809: LD_INT 2
24811: DOUBLE
24812: EQUAL
24813: IFTRUE 24817
24815: GO 24828
24817: POP
// bc_type := b_warehouse ; 3 :
24818: LD_ADDR_OWVAR 42
24822: PUSH
24823: LD_INT 1
24825: ST_TO_ADDR
24826: GO 25421
24828: LD_INT 3
24830: DOUBLE
24831: EQUAL
24832: IFTRUE 24836
24834: GO 24847
24836: POP
// bc_type := b_lab ; 4 .. 9 :
24837: LD_ADDR_OWVAR 42
24841: PUSH
24842: LD_INT 6
24844: ST_TO_ADDR
24845: GO 25421
24847: LD_INT 4
24849: DOUBLE
24850: GREATEREQUAL
24851: IFFALSE 24859
24853: LD_INT 9
24855: DOUBLE
24856: LESSEQUAL
24857: IFTRUE 24861
24859: GO 24913
24861: POP
// begin bc_type := b_lab_half ;
24862: LD_ADDR_OWVAR 42
24866: PUSH
24867: LD_INT 7
24869: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
24870: LD_ADDR_OWVAR 44
24874: PUSH
24875: LD_INT 10
24877: PUSH
24878: LD_INT 11
24880: PUSH
24881: LD_INT 12
24883: PUSH
24884: LD_INT 15
24886: PUSH
24887: LD_INT 14
24889: PUSH
24890: LD_INT 13
24892: PUSH
24893: EMPTY
24894: LIST
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: PUSH
24901: LD_VAR 0 2
24905: PUSH
24906: LD_INT 3
24908: MINUS
24909: ARRAY
24910: ST_TO_ADDR
// end ; 10 .. 13 :
24911: GO 25421
24913: LD_INT 10
24915: DOUBLE
24916: GREATEREQUAL
24917: IFFALSE 24925
24919: LD_INT 13
24921: DOUBLE
24922: LESSEQUAL
24923: IFTRUE 24927
24925: GO 25004
24927: POP
// begin bc_type := b_lab_full ;
24928: LD_ADDR_OWVAR 42
24932: PUSH
24933: LD_INT 8
24935: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
24936: LD_ADDR_OWVAR 44
24940: PUSH
24941: LD_INT 10
24943: PUSH
24944: LD_INT 12
24946: PUSH
24947: LD_INT 14
24949: PUSH
24950: LD_INT 13
24952: PUSH
24953: EMPTY
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: PUSH
24959: LD_VAR 0 2
24963: PUSH
24964: LD_INT 9
24966: MINUS
24967: ARRAY
24968: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
24969: LD_ADDR_OWVAR 45
24973: PUSH
24974: LD_INT 11
24976: PUSH
24977: LD_INT 15
24979: PUSH
24980: LD_INT 12
24982: PUSH
24983: LD_INT 15
24985: PUSH
24986: EMPTY
24987: LIST
24988: LIST
24989: LIST
24990: LIST
24991: PUSH
24992: LD_VAR 0 2
24996: PUSH
24997: LD_INT 9
24999: MINUS
25000: ARRAY
25001: ST_TO_ADDR
// end ; 14 :
25002: GO 25421
25004: LD_INT 14
25006: DOUBLE
25007: EQUAL
25008: IFTRUE 25012
25010: GO 25023
25012: POP
// bc_type := b_workshop ; 15 :
25013: LD_ADDR_OWVAR 42
25017: PUSH
25018: LD_INT 2
25020: ST_TO_ADDR
25021: GO 25421
25023: LD_INT 15
25025: DOUBLE
25026: EQUAL
25027: IFTRUE 25031
25029: GO 25042
25031: POP
// bc_type := b_factory ; 16 :
25032: LD_ADDR_OWVAR 42
25036: PUSH
25037: LD_INT 3
25039: ST_TO_ADDR
25040: GO 25421
25042: LD_INT 16
25044: DOUBLE
25045: EQUAL
25046: IFTRUE 25050
25048: GO 25061
25050: POP
// bc_type := b_ext_gun ; 17 :
25051: LD_ADDR_OWVAR 42
25055: PUSH
25056: LD_INT 17
25058: ST_TO_ADDR
25059: GO 25421
25061: LD_INT 17
25063: DOUBLE
25064: EQUAL
25065: IFTRUE 25069
25067: GO 25097
25069: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
25070: LD_ADDR_OWVAR 42
25074: PUSH
25075: LD_INT 19
25077: PUSH
25078: LD_INT 23
25080: PUSH
25081: LD_INT 19
25083: PUSH
25084: EMPTY
25085: LIST
25086: LIST
25087: LIST
25088: PUSH
25089: LD_VAR 0 1
25093: ARRAY
25094: ST_TO_ADDR
25095: GO 25421
25097: LD_INT 18
25099: DOUBLE
25100: EQUAL
25101: IFTRUE 25105
25103: GO 25116
25105: POP
// bc_type := b_ext_radar ; 19 :
25106: LD_ADDR_OWVAR 42
25110: PUSH
25111: LD_INT 20
25113: ST_TO_ADDR
25114: GO 25421
25116: LD_INT 19
25118: DOUBLE
25119: EQUAL
25120: IFTRUE 25124
25122: GO 25135
25124: POP
// bc_type := b_ext_radio ; 20 :
25125: LD_ADDR_OWVAR 42
25129: PUSH
25130: LD_INT 22
25132: ST_TO_ADDR
25133: GO 25421
25135: LD_INT 20
25137: DOUBLE
25138: EQUAL
25139: IFTRUE 25143
25141: GO 25154
25143: POP
// bc_type := b_ext_siberium ; 21 :
25144: LD_ADDR_OWVAR 42
25148: PUSH
25149: LD_INT 21
25151: ST_TO_ADDR
25152: GO 25421
25154: LD_INT 21
25156: DOUBLE
25157: EQUAL
25158: IFTRUE 25162
25160: GO 25173
25162: POP
// bc_type := b_ext_computer ; 22 :
25163: LD_ADDR_OWVAR 42
25167: PUSH
25168: LD_INT 24
25170: ST_TO_ADDR
25171: GO 25421
25173: LD_INT 22
25175: DOUBLE
25176: EQUAL
25177: IFTRUE 25181
25179: GO 25192
25181: POP
// bc_type := b_ext_track ; 23 :
25182: LD_ADDR_OWVAR 42
25186: PUSH
25187: LD_INT 16
25189: ST_TO_ADDR
25190: GO 25421
25192: LD_INT 23
25194: DOUBLE
25195: EQUAL
25196: IFTRUE 25200
25198: GO 25211
25200: POP
// bc_type := b_ext_laser ; 24 :
25201: LD_ADDR_OWVAR 42
25205: PUSH
25206: LD_INT 25
25208: ST_TO_ADDR
25209: GO 25421
25211: LD_INT 24
25213: DOUBLE
25214: EQUAL
25215: IFTRUE 25219
25217: GO 25230
25219: POP
// bc_type := b_control_tower ; 25 :
25220: LD_ADDR_OWVAR 42
25224: PUSH
25225: LD_INT 36
25227: ST_TO_ADDR
25228: GO 25421
25230: LD_INT 25
25232: DOUBLE
25233: EQUAL
25234: IFTRUE 25238
25236: GO 25249
25238: POP
// bc_type := b_breastwork ; 26 :
25239: LD_ADDR_OWVAR 42
25243: PUSH
25244: LD_INT 31
25246: ST_TO_ADDR
25247: GO 25421
25249: LD_INT 26
25251: DOUBLE
25252: EQUAL
25253: IFTRUE 25257
25255: GO 25268
25257: POP
// bc_type := b_bunker ; 27 :
25258: LD_ADDR_OWVAR 42
25262: PUSH
25263: LD_INT 32
25265: ST_TO_ADDR
25266: GO 25421
25268: LD_INT 27
25270: DOUBLE
25271: EQUAL
25272: IFTRUE 25276
25274: GO 25287
25276: POP
// bc_type := b_turret ; 28 :
25277: LD_ADDR_OWVAR 42
25281: PUSH
25282: LD_INT 33
25284: ST_TO_ADDR
25285: GO 25421
25287: LD_INT 28
25289: DOUBLE
25290: EQUAL
25291: IFTRUE 25295
25293: GO 25306
25295: POP
// bc_type := b_armoury ; 29 :
25296: LD_ADDR_OWVAR 42
25300: PUSH
25301: LD_INT 4
25303: ST_TO_ADDR
25304: GO 25421
25306: LD_INT 29
25308: DOUBLE
25309: EQUAL
25310: IFTRUE 25314
25312: GO 25325
25314: POP
// bc_type := b_barracks ; 30 :
25315: LD_ADDR_OWVAR 42
25319: PUSH
25320: LD_INT 5
25322: ST_TO_ADDR
25323: GO 25421
25325: LD_INT 30
25327: DOUBLE
25328: EQUAL
25329: IFTRUE 25333
25331: GO 25344
25333: POP
// bc_type := b_solar_power ; 31 :
25334: LD_ADDR_OWVAR 42
25338: PUSH
25339: LD_INT 27
25341: ST_TO_ADDR
25342: GO 25421
25344: LD_INT 31
25346: DOUBLE
25347: EQUAL
25348: IFTRUE 25352
25350: GO 25363
25352: POP
// bc_type := b_oil_power ; 32 :
25353: LD_ADDR_OWVAR 42
25357: PUSH
25358: LD_INT 26
25360: ST_TO_ADDR
25361: GO 25421
25363: LD_INT 32
25365: DOUBLE
25366: EQUAL
25367: IFTRUE 25371
25369: GO 25382
25371: POP
// bc_type := b_siberite_power ; 33 :
25372: LD_ADDR_OWVAR 42
25376: PUSH
25377: LD_INT 28
25379: ST_TO_ADDR
25380: GO 25421
25382: LD_INT 33
25384: DOUBLE
25385: EQUAL
25386: IFTRUE 25390
25388: GO 25401
25390: POP
// bc_type := b_oil_mine ; 34 :
25391: LD_ADDR_OWVAR 42
25395: PUSH
25396: LD_INT 29
25398: ST_TO_ADDR
25399: GO 25421
25401: LD_INT 34
25403: DOUBLE
25404: EQUAL
25405: IFTRUE 25409
25407: GO 25420
25409: POP
// bc_type := b_siberite_mine ; end ;
25410: LD_ADDR_OWVAR 42
25414: PUSH
25415: LD_INT 30
25417: ST_TO_ADDR
25418: GO 25421
25420: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
25421: LD_ADDR_VAR 0 8
25425: PUSH
25426: LD_VAR 0 5
25430: PPUSH
25431: LD_VAR 0 6
25435: PPUSH
25436: LD_VAR 0 3
25440: PPUSH
25441: CALL_OW 47
25445: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
25446: LD_OWVAR 42
25450: PUSH
25451: LD_INT 32
25453: PUSH
25454: LD_INT 33
25456: PUSH
25457: EMPTY
25458: LIST
25459: LIST
25460: IN
25461: IFFALSE 25477
// PlaceWeaponTurret ( b , weapon ) ;
25463: LD_VAR 0 8
25467: PPUSH
25468: LD_VAR 0 4
25472: PPUSH
25473: CALL_OW 431
// end ;
25477: LD_VAR 0 7
25481: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
25482: LD_INT 0
25484: PPUSH
25485: PPUSH
25486: PPUSH
25487: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25488: LD_ADDR_VAR 0 4
25492: PUSH
25493: LD_INT 22
25495: PUSH
25496: LD_OWVAR 2
25500: PUSH
25501: EMPTY
25502: LIST
25503: LIST
25504: PUSH
25505: LD_INT 2
25507: PUSH
25508: LD_INT 30
25510: PUSH
25511: LD_INT 0
25513: PUSH
25514: EMPTY
25515: LIST
25516: LIST
25517: PUSH
25518: LD_INT 30
25520: PUSH
25521: LD_INT 1
25523: PUSH
25524: EMPTY
25525: LIST
25526: LIST
25527: PUSH
25528: EMPTY
25529: LIST
25530: LIST
25531: LIST
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: PPUSH
25537: CALL_OW 69
25541: ST_TO_ADDR
// if not tmp then
25542: LD_VAR 0 4
25546: NOT
25547: IFFALSE 25551
// exit ;
25549: GO 25610
// for i in tmp do
25551: LD_ADDR_VAR 0 2
25555: PUSH
25556: LD_VAR 0 4
25560: PUSH
25561: FOR_IN
25562: IFFALSE 25608
// for j = 1 to 3 do
25564: LD_ADDR_VAR 0 3
25568: PUSH
25569: DOUBLE
25570: LD_INT 1
25572: DEC
25573: ST_TO_ADDR
25574: LD_INT 3
25576: PUSH
25577: FOR_TO
25578: IFFALSE 25604
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
25580: LD_VAR 0 2
25584: PPUSH
25585: CALL_OW 274
25589: PPUSH
25590: LD_VAR 0 3
25594: PPUSH
25595: LD_INT 99999
25597: PPUSH
25598: CALL_OW 277
25602: GO 25577
25604: POP
25605: POP
25606: GO 25561
25608: POP
25609: POP
// end ;
25610: LD_VAR 0 1
25614: RET
// export function hHackSetLevel10 ; var i , j ; begin
25615: LD_INT 0
25617: PPUSH
25618: PPUSH
25619: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25620: LD_ADDR_VAR 0 2
25624: PUSH
25625: LD_INT 21
25627: PUSH
25628: LD_INT 1
25630: PUSH
25631: EMPTY
25632: LIST
25633: LIST
25634: PPUSH
25635: CALL_OW 69
25639: PUSH
25640: FOR_IN
25641: IFFALSE 25693
// if IsSelected ( i ) then
25643: LD_VAR 0 2
25647: PPUSH
25648: CALL_OW 306
25652: IFFALSE 25691
// begin for j := 1 to 4 do
25654: LD_ADDR_VAR 0 3
25658: PUSH
25659: DOUBLE
25660: LD_INT 1
25662: DEC
25663: ST_TO_ADDR
25664: LD_INT 4
25666: PUSH
25667: FOR_TO
25668: IFFALSE 25689
// SetSkill ( i , j , 10 ) ;
25670: LD_VAR 0 2
25674: PPUSH
25675: LD_VAR 0 3
25679: PPUSH
25680: LD_INT 10
25682: PPUSH
25683: CALL_OW 237
25687: GO 25667
25689: POP
25690: POP
// end ;
25691: GO 25640
25693: POP
25694: POP
// end ;
25695: LD_VAR 0 1
25699: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
25700: LD_INT 0
25702: PPUSH
25703: PPUSH
25704: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
25705: LD_ADDR_VAR 0 2
25709: PUSH
25710: LD_INT 22
25712: PUSH
25713: LD_OWVAR 2
25717: PUSH
25718: EMPTY
25719: LIST
25720: LIST
25721: PUSH
25722: LD_INT 21
25724: PUSH
25725: LD_INT 1
25727: PUSH
25728: EMPTY
25729: LIST
25730: LIST
25731: PUSH
25732: EMPTY
25733: LIST
25734: LIST
25735: PPUSH
25736: CALL_OW 69
25740: PUSH
25741: FOR_IN
25742: IFFALSE 25783
// begin for j := 1 to 4 do
25744: LD_ADDR_VAR 0 3
25748: PUSH
25749: DOUBLE
25750: LD_INT 1
25752: DEC
25753: ST_TO_ADDR
25754: LD_INT 4
25756: PUSH
25757: FOR_TO
25758: IFFALSE 25779
// SetSkill ( i , j , 10 ) ;
25760: LD_VAR 0 2
25764: PPUSH
25765: LD_VAR 0 3
25769: PPUSH
25770: LD_INT 10
25772: PPUSH
25773: CALL_OW 237
25777: GO 25757
25779: POP
25780: POP
// end ;
25781: GO 25741
25783: POP
25784: POP
// end ;
25785: LD_VAR 0 1
25789: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
25790: LD_INT 0
25792: PPUSH
// uc_side := your_side ;
25793: LD_ADDR_OWVAR 20
25797: PUSH
25798: LD_OWVAR 2
25802: ST_TO_ADDR
// uc_nation := nation ;
25803: LD_ADDR_OWVAR 21
25807: PUSH
25808: LD_VAR 0 1
25812: ST_TO_ADDR
// InitHc ;
25813: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
25817: LD_INT 0
25819: PPUSH
25820: LD_VAR 0 2
25824: PPUSH
25825: LD_VAR 0 3
25829: PPUSH
25830: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
25834: LD_VAR 0 4
25838: PPUSH
25839: LD_VAR 0 5
25843: PPUSH
25844: CALL_OW 428
25848: PUSH
25849: LD_INT 0
25851: EQUAL
25852: IFFALSE 25876
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
25854: CALL_OW 44
25858: PPUSH
25859: LD_VAR 0 4
25863: PPUSH
25864: LD_VAR 0 5
25868: PPUSH
25869: LD_INT 1
25871: PPUSH
25872: CALL_OW 48
// end ;
25876: LD_VAR 0 6
25880: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
25881: LD_INT 0
25883: PPUSH
25884: PPUSH
// uc_side := your_side ;
25885: LD_ADDR_OWVAR 20
25889: PUSH
25890: LD_OWVAR 2
25894: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
25895: LD_VAR 0 1
25899: PUSH
25900: LD_INT 1
25902: PUSH
25903: LD_INT 2
25905: PUSH
25906: LD_INT 3
25908: PUSH
25909: LD_INT 4
25911: PUSH
25912: LD_INT 5
25914: PUSH
25915: EMPTY
25916: LIST
25917: LIST
25918: LIST
25919: LIST
25920: LIST
25921: IN
25922: IFFALSE 25934
// uc_nation := nation_american else
25924: LD_ADDR_OWVAR 21
25928: PUSH
25929: LD_INT 1
25931: ST_TO_ADDR
25932: GO 25977
// if chassis in [ 11 , 12 , 13 , 14 ] then
25934: LD_VAR 0 1
25938: PUSH
25939: LD_INT 11
25941: PUSH
25942: LD_INT 12
25944: PUSH
25945: LD_INT 13
25947: PUSH
25948: LD_INT 14
25950: PUSH
25951: EMPTY
25952: LIST
25953: LIST
25954: LIST
25955: LIST
25956: IN
25957: IFFALSE 25969
// uc_nation := nation_arabian else
25959: LD_ADDR_OWVAR 21
25963: PUSH
25964: LD_INT 2
25966: ST_TO_ADDR
25967: GO 25977
// uc_nation := nation_russian ;
25969: LD_ADDR_OWVAR 21
25973: PUSH
25974: LD_INT 3
25976: ST_TO_ADDR
// vc_chassis := chassis ;
25977: LD_ADDR_OWVAR 37
25981: PUSH
25982: LD_VAR 0 1
25986: ST_TO_ADDR
// vc_engine := engine ;
25987: LD_ADDR_OWVAR 39
25991: PUSH
25992: LD_VAR 0 2
25996: ST_TO_ADDR
// vc_control := control ;
25997: LD_ADDR_OWVAR 38
26001: PUSH
26002: LD_VAR 0 3
26006: ST_TO_ADDR
// vc_weapon := weapon ;
26007: LD_ADDR_OWVAR 40
26011: PUSH
26012: LD_VAR 0 4
26016: ST_TO_ADDR
// un := CreateVehicle ;
26017: LD_ADDR_VAR 0 8
26021: PUSH
26022: CALL_OW 45
26026: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
26027: LD_VAR 0 8
26031: PPUSH
26032: LD_INT 0
26034: PPUSH
26035: LD_INT 5
26037: PPUSH
26038: CALL_OW 12
26042: PPUSH
26043: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
26047: LD_VAR 0 8
26051: PPUSH
26052: LD_VAR 0 5
26056: PPUSH
26057: LD_VAR 0 6
26061: PPUSH
26062: LD_INT 1
26064: PPUSH
26065: CALL_OW 48
// end ;
26069: LD_VAR 0 7
26073: RET
// export hInvincible ; every 1 do
26074: GO 26076
26076: DISABLE
// hInvincible := [ ] ;
26077: LD_ADDR_EXP 98
26081: PUSH
26082: EMPTY
26083: ST_TO_ADDR
26084: END
// every 10 do var i ;
26085: GO 26087
26087: DISABLE
26088: LD_INT 0
26090: PPUSH
// begin enable ;
26091: ENABLE
// if not hInvincible then
26092: LD_EXP 98
26096: NOT
26097: IFFALSE 26101
// exit ;
26099: GO 26145
// for i in hInvincible do
26101: LD_ADDR_VAR 0 1
26105: PUSH
26106: LD_EXP 98
26110: PUSH
26111: FOR_IN
26112: IFFALSE 26143
// if GetLives ( i ) < 1000 then
26114: LD_VAR 0 1
26118: PPUSH
26119: CALL_OW 256
26123: PUSH
26124: LD_INT 1000
26126: LESS
26127: IFFALSE 26141
// SetLives ( i , 1000 ) ;
26129: LD_VAR 0 1
26133: PPUSH
26134: LD_INT 1000
26136: PPUSH
26137: CALL_OW 234
26141: GO 26111
26143: POP
26144: POP
// end ;
26145: PPOPN 1
26147: END
// export function hHackInvincible ; var i ; begin
26148: LD_INT 0
26150: PPUSH
26151: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
26152: LD_ADDR_VAR 0 2
26156: PUSH
26157: LD_INT 2
26159: PUSH
26160: LD_INT 21
26162: PUSH
26163: LD_INT 1
26165: PUSH
26166: EMPTY
26167: LIST
26168: LIST
26169: PUSH
26170: LD_INT 21
26172: PUSH
26173: LD_INT 2
26175: PUSH
26176: EMPTY
26177: LIST
26178: LIST
26179: PUSH
26180: EMPTY
26181: LIST
26182: LIST
26183: LIST
26184: PPUSH
26185: CALL_OW 69
26189: PUSH
26190: FOR_IN
26191: IFFALSE 26252
// if IsSelected ( i ) then
26193: LD_VAR 0 2
26197: PPUSH
26198: CALL_OW 306
26202: IFFALSE 26250
// begin if i in hInvincible then
26204: LD_VAR 0 2
26208: PUSH
26209: LD_EXP 98
26213: IN
26214: IFFALSE 26234
// hInvincible := hInvincible diff i else
26216: LD_ADDR_EXP 98
26220: PUSH
26221: LD_EXP 98
26225: PUSH
26226: LD_VAR 0 2
26230: DIFF
26231: ST_TO_ADDR
26232: GO 26250
// hInvincible := hInvincible union i ;
26234: LD_ADDR_EXP 98
26238: PUSH
26239: LD_EXP 98
26243: PUSH
26244: LD_VAR 0 2
26248: UNION
26249: ST_TO_ADDR
// end ;
26250: GO 26190
26252: POP
26253: POP
// end ;
26254: LD_VAR 0 1
26258: RET
// export function hHackInvisible ; var i , j ; begin
26259: LD_INT 0
26261: PPUSH
26262: PPUSH
26263: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
26264: LD_ADDR_VAR 0 2
26268: PUSH
26269: LD_INT 21
26271: PUSH
26272: LD_INT 1
26274: PUSH
26275: EMPTY
26276: LIST
26277: LIST
26278: PPUSH
26279: CALL_OW 69
26283: PUSH
26284: FOR_IN
26285: IFFALSE 26309
// if IsSelected ( i ) then
26287: LD_VAR 0 2
26291: PPUSH
26292: CALL_OW 306
26296: IFFALSE 26307
// ComForceInvisible ( i ) ;
26298: LD_VAR 0 2
26302: PPUSH
26303: CALL_OW 496
26307: GO 26284
26309: POP
26310: POP
// end ;
26311: LD_VAR 0 1
26315: RET
// export function hHackChangeYourSide ; begin
26316: LD_INT 0
26318: PPUSH
// if your_side = 8 then
26319: LD_OWVAR 2
26323: PUSH
26324: LD_INT 8
26326: EQUAL
26327: IFFALSE 26339
// your_side := 0 else
26329: LD_ADDR_OWVAR 2
26333: PUSH
26334: LD_INT 0
26336: ST_TO_ADDR
26337: GO 26353
// your_side := your_side + 1 ;
26339: LD_ADDR_OWVAR 2
26343: PUSH
26344: LD_OWVAR 2
26348: PUSH
26349: LD_INT 1
26351: PLUS
26352: ST_TO_ADDR
// end ;
26353: LD_VAR 0 1
26357: RET
// export function hHackChangeUnitSide ; var i , j ; begin
26358: LD_INT 0
26360: PPUSH
26361: PPUSH
26362: PPUSH
// for i in all_units do
26363: LD_ADDR_VAR 0 2
26367: PUSH
26368: LD_OWVAR 3
26372: PUSH
26373: FOR_IN
26374: IFFALSE 26452
// if IsSelected ( i ) then
26376: LD_VAR 0 2
26380: PPUSH
26381: CALL_OW 306
26385: IFFALSE 26450
// begin j := GetSide ( i ) ;
26387: LD_ADDR_VAR 0 3
26391: PUSH
26392: LD_VAR 0 2
26396: PPUSH
26397: CALL_OW 255
26401: ST_TO_ADDR
// if j = 8 then
26402: LD_VAR 0 3
26406: PUSH
26407: LD_INT 8
26409: EQUAL
26410: IFFALSE 26422
// j := 0 else
26412: LD_ADDR_VAR 0 3
26416: PUSH
26417: LD_INT 0
26419: ST_TO_ADDR
26420: GO 26436
// j := j + 1 ;
26422: LD_ADDR_VAR 0 3
26426: PUSH
26427: LD_VAR 0 3
26431: PUSH
26432: LD_INT 1
26434: PLUS
26435: ST_TO_ADDR
// SetSide ( i , j ) ;
26436: LD_VAR 0 2
26440: PPUSH
26441: LD_VAR 0 3
26445: PPUSH
26446: CALL_OW 235
// end ;
26450: GO 26373
26452: POP
26453: POP
// end ;
26454: LD_VAR 0 1
26458: RET
// export function hHackFog ; begin
26459: LD_INT 0
26461: PPUSH
// FogOff ( true ) ;
26462: LD_INT 1
26464: PPUSH
26465: CALL_OW 344
// end ;
26469: LD_VAR 0 1
26473: RET
// export function hHackTeleport ( unit , x , y ) ; begin
26474: LD_INT 0
26476: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
26477: LD_VAR 0 1
26481: PPUSH
26482: LD_VAR 0 2
26486: PPUSH
26487: LD_VAR 0 3
26491: PPUSH
26492: LD_INT 1
26494: PPUSH
26495: LD_INT 1
26497: PPUSH
26498: CALL_OW 483
// CenterOnXY ( x , y ) ;
26502: LD_VAR 0 2
26506: PPUSH
26507: LD_VAR 0 3
26511: PPUSH
26512: CALL_OW 84
// end ; end_of_file
26516: LD_VAR 0 4
26520: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
26521: LD_INT 0
26523: PPUSH
26524: PPUSH
26525: PPUSH
26526: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
26527: LD_VAR 0 1
26531: PPUSH
26532: CALL_OW 264
26536: PUSH
26537: LD_EXP 25
26541: EQUAL
26542: IFFALSE 26614
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
26544: LD_INT 68
26546: PPUSH
26547: LD_VAR 0 1
26551: PPUSH
26552: CALL_OW 255
26556: PPUSH
26557: CALL_OW 321
26561: PUSH
26562: LD_INT 2
26564: EQUAL
26565: IFFALSE 26577
// eff := 70 else
26567: LD_ADDR_VAR 0 4
26571: PUSH
26572: LD_INT 70
26574: ST_TO_ADDR
26575: GO 26585
// eff := 30 ;
26577: LD_ADDR_VAR 0 4
26581: PUSH
26582: LD_INT 30
26584: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
26585: LD_VAR 0 1
26589: PPUSH
26590: CALL_OW 250
26594: PPUSH
26595: LD_VAR 0 1
26599: PPUSH
26600: CALL_OW 251
26604: PPUSH
26605: LD_VAR 0 4
26609: PPUSH
26610: CALL_OW 495
// end ; end ;
26614: LD_VAR 0 2
26618: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
26619: LD_INT 0
26621: PPUSH
// end ;
26622: LD_VAR 0 4
26626: RET
// export function SOS_Command ( cmd ) ; begin
26627: LD_INT 0
26629: PPUSH
// end ;
26630: LD_VAR 0 2
26634: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
26635: LD_INT 0
26637: PPUSH
// end ;
26638: LD_VAR 0 6
26642: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
26643: LD_INT 0
26645: PPUSH
26646: PPUSH
// if not vehicle or not factory then
26647: LD_VAR 0 1
26651: NOT
26652: PUSH
26653: LD_VAR 0 2
26657: NOT
26658: OR
26659: IFFALSE 26663
// exit ;
26661: GO 26894
// if factoryWaypoints >= factory then
26663: LD_EXP 99
26667: PUSH
26668: LD_VAR 0 2
26672: GREATEREQUAL
26673: IFFALSE 26894
// if factoryWaypoints [ factory ] then
26675: LD_EXP 99
26679: PUSH
26680: LD_VAR 0 2
26684: ARRAY
26685: IFFALSE 26894
// begin if GetControl ( vehicle ) = control_manual then
26687: LD_VAR 0 1
26691: PPUSH
26692: CALL_OW 263
26696: PUSH
26697: LD_INT 1
26699: EQUAL
26700: IFFALSE 26781
// begin driver := IsDrivenBy ( vehicle ) ;
26702: LD_ADDR_VAR 0 4
26706: PUSH
26707: LD_VAR 0 1
26711: PPUSH
26712: CALL_OW 311
26716: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26717: LD_VAR 0 4
26721: PPUSH
26722: LD_EXP 99
26726: PUSH
26727: LD_VAR 0 2
26731: ARRAY
26732: PUSH
26733: LD_INT 3
26735: ARRAY
26736: PPUSH
26737: LD_EXP 99
26741: PUSH
26742: LD_VAR 0 2
26746: ARRAY
26747: PUSH
26748: LD_INT 4
26750: ARRAY
26751: PPUSH
26752: CALL_OW 171
// AddComExitVehicle ( driver ) ;
26756: LD_VAR 0 4
26760: PPUSH
26761: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
26765: LD_VAR 0 4
26769: PPUSH
26770: LD_VAR 0 2
26774: PPUSH
26775: CALL_OW 180
// end else
26779: GO 26894
// if GetControl ( vehicle ) = control_remote then
26781: LD_VAR 0 1
26785: PPUSH
26786: CALL_OW 263
26790: PUSH
26791: LD_INT 2
26793: EQUAL
26794: IFFALSE 26855
// begin wait ( 0 0$2 ) ;
26796: LD_INT 70
26798: PPUSH
26799: CALL_OW 67
// if Connect ( vehicle ) then
26803: LD_VAR 0 1
26807: PPUSH
26808: CALL 39118 0 1
26812: IFFALSE 26853
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26814: LD_VAR 0 1
26818: PPUSH
26819: LD_EXP 99
26823: PUSH
26824: LD_VAR 0 2
26828: ARRAY
26829: PUSH
26830: LD_INT 3
26832: ARRAY
26833: PPUSH
26834: LD_EXP 99
26838: PUSH
26839: LD_VAR 0 2
26843: ARRAY
26844: PUSH
26845: LD_INT 4
26847: ARRAY
26848: PPUSH
26849: CALL_OW 171
// end else
26853: GO 26894
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
26855: LD_VAR 0 1
26859: PPUSH
26860: LD_EXP 99
26864: PUSH
26865: LD_VAR 0 2
26869: ARRAY
26870: PUSH
26871: LD_INT 3
26873: ARRAY
26874: PPUSH
26875: LD_EXP 99
26879: PUSH
26880: LD_VAR 0 2
26884: ARRAY
26885: PUSH
26886: LD_INT 4
26888: ARRAY
26889: PPUSH
26890: CALL_OW 171
// end ; end ;
26894: LD_VAR 0 3
26898: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
26899: LD_INT 0
26901: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
26902: LD_VAR 0 1
26906: PUSH
26907: LD_INT 250
26909: EQUAL
26910: PUSH
26911: LD_VAR 0 2
26915: PPUSH
26916: CALL_OW 264
26920: PUSH
26921: LD_EXP 28
26925: EQUAL
26926: AND
26927: IFFALSE 26948
// MinerPlaceMine ( unit , x , y ) ;
26929: LD_VAR 0 2
26933: PPUSH
26934: LD_VAR 0 4
26938: PPUSH
26939: LD_VAR 0 5
26943: PPUSH
26944: CALL 29676 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
26948: LD_VAR 0 1
26952: PUSH
26953: LD_INT 251
26955: EQUAL
26956: PUSH
26957: LD_VAR 0 2
26961: PPUSH
26962: CALL_OW 264
26966: PUSH
26967: LD_EXP 28
26971: EQUAL
26972: AND
26973: IFFALSE 26994
// MinerDetonateMine ( unit , x , y ) ;
26975: LD_VAR 0 2
26979: PPUSH
26980: LD_VAR 0 4
26984: PPUSH
26985: LD_VAR 0 5
26989: PPUSH
26990: CALL 29953 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
26994: LD_VAR 0 1
26998: PUSH
26999: LD_INT 252
27001: EQUAL
27002: PUSH
27003: LD_VAR 0 2
27007: PPUSH
27008: CALL_OW 264
27012: PUSH
27013: LD_EXP 28
27017: EQUAL
27018: AND
27019: IFFALSE 27040
// MinerCreateMinefield ( unit , x , y ) ;
27021: LD_VAR 0 2
27025: PPUSH
27026: LD_VAR 0 4
27030: PPUSH
27031: LD_VAR 0 5
27035: PPUSH
27036: CALL 30370 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
27040: LD_VAR 0 1
27044: PUSH
27045: LD_INT 253
27047: EQUAL
27048: PUSH
27049: LD_VAR 0 2
27053: PPUSH
27054: CALL_OW 257
27058: PUSH
27059: LD_INT 5
27061: EQUAL
27062: AND
27063: IFFALSE 27084
// ComBinocular ( unit , x , y ) ;
27065: LD_VAR 0 2
27069: PPUSH
27070: LD_VAR 0 4
27074: PPUSH
27075: LD_VAR 0 5
27079: PPUSH
27080: CALL 30741 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
27084: LD_VAR 0 1
27088: PUSH
27089: LD_INT 254
27091: EQUAL
27092: PUSH
27093: LD_VAR 0 2
27097: PPUSH
27098: CALL_OW 264
27102: PUSH
27103: LD_EXP 23
27107: EQUAL
27108: AND
27109: PUSH
27110: LD_VAR 0 3
27114: PPUSH
27115: CALL_OW 263
27119: PUSH
27120: LD_INT 3
27122: EQUAL
27123: AND
27124: IFFALSE 27140
// HackDestroyVehicle ( unit , selectedUnit ) ;
27126: LD_VAR 0 2
27130: PPUSH
27131: LD_VAR 0 3
27135: PPUSH
27136: CALL 29036 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27140: LD_VAR 0 1
27144: PUSH
27145: LD_INT 255
27147: EQUAL
27148: PUSH
27149: LD_VAR 0 2
27153: PPUSH
27154: CALL_OW 264
27158: PUSH
27159: LD_INT 14
27161: PUSH
27162: LD_INT 53
27164: PUSH
27165: EMPTY
27166: LIST
27167: LIST
27168: IN
27169: AND
27170: PUSH
27171: LD_VAR 0 4
27175: PPUSH
27176: LD_VAR 0 5
27180: PPUSH
27181: CALL_OW 488
27185: AND
27186: IFFALSE 27210
// CutTreeXYR ( unit , x , y , 12 ) ;
27188: LD_VAR 0 2
27192: PPUSH
27193: LD_VAR 0 4
27197: PPUSH
27198: LD_VAR 0 5
27202: PPUSH
27203: LD_INT 12
27205: PPUSH
27206: CALL 27602 0 4
// if cmd = 256 then
27210: LD_VAR 0 1
27214: PUSH
27215: LD_INT 256
27217: EQUAL
27218: IFFALSE 27239
// SetFactoryWaypoint ( unit , x , y ) ;
27220: LD_VAR 0 2
27224: PPUSH
27225: LD_VAR 0 4
27229: PPUSH
27230: LD_VAR 0 5
27234: PPUSH
27235: CALL 27244 0 3
// end ;
27239: LD_VAR 0 6
27243: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
27244: LD_INT 0
27246: PPUSH
27247: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
27248: LD_VAR 0 1
27252: NOT
27253: PUSH
27254: LD_VAR 0 2
27258: PPUSH
27259: LD_VAR 0 3
27263: PPUSH
27264: CALL_OW 488
27268: NOT
27269: OR
27270: PUSH
27271: LD_VAR 0 1
27275: PPUSH
27276: CALL_OW 266
27280: PUSH
27281: LD_INT 3
27283: NONEQUAL
27284: PUSH
27285: LD_VAR 0 1
27289: PPUSH
27290: CALL_OW 247
27294: PUSH
27295: LD_INT 1
27297: EQUAL
27298: NOT
27299: AND
27300: OR
27301: IFFALSE 27305
// exit ;
27303: GO 27454
// if GetType ( factory ) = unit_human then
27305: LD_VAR 0 1
27309: PPUSH
27310: CALL_OW 247
27314: PUSH
27315: LD_INT 1
27317: EQUAL
27318: IFFALSE 27335
// factory := IsInUnit ( factory ) ;
27320: LD_ADDR_VAR 0 1
27324: PUSH
27325: LD_VAR 0 1
27329: PPUSH
27330: CALL_OW 310
27334: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
27335: LD_VAR 0 1
27339: PPUSH
27340: CALL_OW 266
27344: PUSH
27345: LD_INT 3
27347: NONEQUAL
27348: IFFALSE 27352
// exit ;
27350: GO 27454
// if HexInfo ( x , y ) = factory then
27352: LD_VAR 0 2
27356: PPUSH
27357: LD_VAR 0 3
27361: PPUSH
27362: CALL_OW 428
27366: PUSH
27367: LD_VAR 0 1
27371: EQUAL
27372: IFFALSE 27399
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
27374: LD_ADDR_EXP 99
27378: PUSH
27379: LD_EXP 99
27383: PPUSH
27384: LD_VAR 0 1
27388: PPUSH
27389: LD_INT 0
27391: PPUSH
27392: CALL_OW 1
27396: ST_TO_ADDR
27397: GO 27450
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
27399: LD_ADDR_EXP 99
27403: PUSH
27404: LD_EXP 99
27408: PPUSH
27409: LD_VAR 0 1
27413: PPUSH
27414: LD_VAR 0 1
27418: PPUSH
27419: CALL_OW 255
27423: PUSH
27424: LD_VAR 0 1
27428: PUSH
27429: LD_VAR 0 2
27433: PUSH
27434: LD_VAR 0 3
27438: PUSH
27439: EMPTY
27440: LIST
27441: LIST
27442: LIST
27443: LIST
27444: PPUSH
27445: CALL_OW 1
27449: ST_TO_ADDR
// UpdateFactoryWaypoints ;
27450: CALL 27459 0 0
// end ;
27454: LD_VAR 0 4
27458: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
27459: LD_INT 0
27461: PPUSH
27462: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
27463: LD_STRING resetFactoryWaypoint();
27465: PPUSH
27466: CALL_OW 559
// if factoryWaypoints then
27470: LD_EXP 99
27474: IFFALSE 27597
// begin for i := 1 to factoryWaypoints do
27476: LD_ADDR_VAR 0 2
27480: PUSH
27481: DOUBLE
27482: LD_INT 1
27484: DEC
27485: ST_TO_ADDR
27486: LD_EXP 99
27490: PUSH
27491: FOR_TO
27492: IFFALSE 27595
// if factoryWaypoints [ i ] then
27494: LD_EXP 99
27498: PUSH
27499: LD_VAR 0 2
27503: ARRAY
27504: IFFALSE 27593
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
27506: LD_STRING setFactoryWaypointXY(
27508: PUSH
27509: LD_EXP 99
27513: PUSH
27514: LD_VAR 0 2
27518: ARRAY
27519: PUSH
27520: LD_INT 1
27522: ARRAY
27523: STR
27524: PUSH
27525: LD_STRING ,
27527: STR
27528: PUSH
27529: LD_EXP 99
27533: PUSH
27534: LD_VAR 0 2
27538: ARRAY
27539: PUSH
27540: LD_INT 2
27542: ARRAY
27543: STR
27544: PUSH
27545: LD_STRING ,
27547: STR
27548: PUSH
27549: LD_EXP 99
27553: PUSH
27554: LD_VAR 0 2
27558: ARRAY
27559: PUSH
27560: LD_INT 3
27562: ARRAY
27563: STR
27564: PUSH
27565: LD_STRING ,
27567: STR
27568: PUSH
27569: LD_EXP 99
27573: PUSH
27574: LD_VAR 0 2
27578: ARRAY
27579: PUSH
27580: LD_INT 4
27582: ARRAY
27583: STR
27584: PUSH
27585: LD_STRING )
27587: STR
27588: PPUSH
27589: CALL_OW 559
27593: GO 27491
27595: POP
27596: POP
// end ; end ;
27597: LD_VAR 0 1
27601: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27602: LD_INT 0
27604: PPUSH
27605: PPUSH
27606: PPUSH
27607: PPUSH
27608: PPUSH
27609: PPUSH
27610: PPUSH
27611: PPUSH
27612: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
27613: LD_VAR 0 1
27617: NOT
27618: PUSH
27619: LD_VAR 0 2
27623: PPUSH
27624: LD_VAR 0 3
27628: PPUSH
27629: CALL_OW 488
27633: NOT
27634: OR
27635: PUSH
27636: LD_VAR 0 4
27640: NOT
27641: OR
27642: IFFALSE 27646
// exit ;
27644: GO 27986
// list := [ ] ;
27646: LD_ADDR_VAR 0 13
27650: PUSH
27651: EMPTY
27652: ST_TO_ADDR
// if x - r < 0 then
27653: LD_VAR 0 2
27657: PUSH
27658: LD_VAR 0 4
27662: MINUS
27663: PUSH
27664: LD_INT 0
27666: LESS
27667: IFFALSE 27679
// min_x := 0 else
27669: LD_ADDR_VAR 0 7
27673: PUSH
27674: LD_INT 0
27676: ST_TO_ADDR
27677: GO 27695
// min_x := x - r ;
27679: LD_ADDR_VAR 0 7
27683: PUSH
27684: LD_VAR 0 2
27688: PUSH
27689: LD_VAR 0 4
27693: MINUS
27694: ST_TO_ADDR
// if y - r < 0 then
27695: LD_VAR 0 3
27699: PUSH
27700: LD_VAR 0 4
27704: MINUS
27705: PUSH
27706: LD_INT 0
27708: LESS
27709: IFFALSE 27721
// min_y := 0 else
27711: LD_ADDR_VAR 0 8
27715: PUSH
27716: LD_INT 0
27718: ST_TO_ADDR
27719: GO 27737
// min_y := y - r ;
27721: LD_ADDR_VAR 0 8
27725: PUSH
27726: LD_VAR 0 3
27730: PUSH
27731: LD_VAR 0 4
27735: MINUS
27736: ST_TO_ADDR
// max_x := x + r ;
27737: LD_ADDR_VAR 0 9
27741: PUSH
27742: LD_VAR 0 2
27746: PUSH
27747: LD_VAR 0 4
27751: PLUS
27752: ST_TO_ADDR
// max_y := y + r ;
27753: LD_ADDR_VAR 0 10
27757: PUSH
27758: LD_VAR 0 3
27762: PUSH
27763: LD_VAR 0 4
27767: PLUS
27768: ST_TO_ADDR
// for _x = min_x to max_x do
27769: LD_ADDR_VAR 0 11
27773: PUSH
27774: DOUBLE
27775: LD_VAR 0 7
27779: DEC
27780: ST_TO_ADDR
27781: LD_VAR 0 9
27785: PUSH
27786: FOR_TO
27787: IFFALSE 27904
// for _y = min_y to max_y do
27789: LD_ADDR_VAR 0 12
27793: PUSH
27794: DOUBLE
27795: LD_VAR 0 8
27799: DEC
27800: ST_TO_ADDR
27801: LD_VAR 0 10
27805: PUSH
27806: FOR_TO
27807: IFFALSE 27900
// begin if not ValidHex ( _x , _y ) then
27809: LD_VAR 0 11
27813: PPUSH
27814: LD_VAR 0 12
27818: PPUSH
27819: CALL_OW 488
27823: NOT
27824: IFFALSE 27828
// continue ;
27826: GO 27806
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
27828: LD_VAR 0 11
27832: PPUSH
27833: LD_VAR 0 12
27837: PPUSH
27838: CALL_OW 351
27842: PUSH
27843: LD_VAR 0 11
27847: PPUSH
27848: LD_VAR 0 12
27852: PPUSH
27853: CALL_OW 554
27857: AND
27858: IFFALSE 27898
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
27860: LD_ADDR_VAR 0 13
27864: PUSH
27865: LD_VAR 0 13
27869: PPUSH
27870: LD_VAR 0 13
27874: PUSH
27875: LD_INT 1
27877: PLUS
27878: PPUSH
27879: LD_VAR 0 11
27883: PUSH
27884: LD_VAR 0 12
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: PPUSH
27893: CALL_OW 2
27897: ST_TO_ADDR
// end ;
27898: GO 27806
27900: POP
27901: POP
27902: GO 27786
27904: POP
27905: POP
// if not list then
27906: LD_VAR 0 13
27910: NOT
27911: IFFALSE 27915
// exit ;
27913: GO 27986
// for i in list do
27915: LD_ADDR_VAR 0 6
27919: PUSH
27920: LD_VAR 0 13
27924: PUSH
27925: FOR_IN
27926: IFFALSE 27984
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
27928: LD_VAR 0 1
27932: PPUSH
27933: LD_STRING M
27935: PUSH
27936: LD_VAR 0 6
27940: PUSH
27941: LD_INT 1
27943: ARRAY
27944: PUSH
27945: LD_VAR 0 6
27949: PUSH
27950: LD_INT 2
27952: ARRAY
27953: PUSH
27954: LD_INT 0
27956: PUSH
27957: LD_INT 0
27959: PUSH
27960: LD_INT 0
27962: PUSH
27963: LD_INT 0
27965: PUSH
27966: EMPTY
27967: LIST
27968: LIST
27969: LIST
27970: LIST
27971: LIST
27972: LIST
27973: LIST
27974: PUSH
27975: EMPTY
27976: LIST
27977: PPUSH
27978: CALL_OW 447
27982: GO 27925
27984: POP
27985: POP
// end ;
27986: LD_VAR 0 5
27990: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
27991: LD_EXP 100
27995: NOT
27996: IFFALSE 28046
27998: GO 28000
28000: DISABLE
// begin initHack := true ;
28001: LD_ADDR_EXP 100
28005: PUSH
28006: LD_INT 1
28008: ST_TO_ADDR
// hackTanks := [ ] ;
28009: LD_ADDR_EXP 101
28013: PUSH
28014: EMPTY
28015: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
28016: LD_ADDR_EXP 102
28020: PUSH
28021: EMPTY
28022: ST_TO_ADDR
// hackLimit := 3 ;
28023: LD_ADDR_EXP 103
28027: PUSH
28028: LD_INT 3
28030: ST_TO_ADDR
// hackDist := 12 ;
28031: LD_ADDR_EXP 104
28035: PUSH
28036: LD_INT 12
28038: ST_TO_ADDR
// hackCounter := [ ] ;
28039: LD_ADDR_EXP 105
28043: PUSH
28044: EMPTY
28045: ST_TO_ADDR
// end ;
28046: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
28047: LD_EXP 100
28051: PUSH
28052: LD_INT 34
28054: PUSH
28055: LD_EXP 23
28059: PUSH
28060: EMPTY
28061: LIST
28062: LIST
28063: PPUSH
28064: CALL_OW 69
28068: AND
28069: IFFALSE 28324
28071: GO 28073
28073: DISABLE
28074: LD_INT 0
28076: PPUSH
28077: PPUSH
// begin enable ;
28078: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
28079: LD_ADDR_VAR 0 1
28083: PUSH
28084: LD_INT 34
28086: PUSH
28087: LD_EXP 23
28091: PUSH
28092: EMPTY
28093: LIST
28094: LIST
28095: PPUSH
28096: CALL_OW 69
28100: PUSH
28101: FOR_IN
28102: IFFALSE 28322
// begin if not i in hackTanks then
28104: LD_VAR 0 1
28108: PUSH
28109: LD_EXP 101
28113: IN
28114: NOT
28115: IFFALSE 28198
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
28117: LD_ADDR_EXP 101
28121: PUSH
28122: LD_EXP 101
28126: PPUSH
28127: LD_EXP 101
28131: PUSH
28132: LD_INT 1
28134: PLUS
28135: PPUSH
28136: LD_VAR 0 1
28140: PPUSH
28141: CALL_OW 1
28145: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
28146: LD_ADDR_EXP 102
28150: PUSH
28151: LD_EXP 102
28155: PPUSH
28156: LD_EXP 102
28160: PUSH
28161: LD_INT 1
28163: PLUS
28164: PPUSH
28165: EMPTY
28166: PPUSH
28167: CALL_OW 1
28171: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
28172: LD_ADDR_EXP 105
28176: PUSH
28177: LD_EXP 105
28181: PPUSH
28182: LD_EXP 105
28186: PUSH
28187: LD_INT 1
28189: PLUS
28190: PPUSH
28191: EMPTY
28192: PPUSH
28193: CALL_OW 1
28197: ST_TO_ADDR
// end ; if not IsOk ( i ) then
28198: LD_VAR 0 1
28202: PPUSH
28203: CALL_OW 302
28207: NOT
28208: IFFALSE 28221
// begin HackUnlinkAll ( i ) ;
28210: LD_VAR 0 1
28214: PPUSH
28215: CALL 28327 0 1
// continue ;
28219: GO 28101
// end ; HackCheckCapturedStatus ( i ) ;
28221: LD_VAR 0 1
28225: PPUSH
28226: CALL 28770 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
28230: LD_ADDR_VAR 0 2
28234: PUSH
28235: LD_INT 81
28237: PUSH
28238: LD_VAR 0 1
28242: PPUSH
28243: CALL_OW 255
28247: PUSH
28248: EMPTY
28249: LIST
28250: LIST
28251: PUSH
28252: LD_INT 33
28254: PUSH
28255: LD_INT 3
28257: PUSH
28258: EMPTY
28259: LIST
28260: LIST
28261: PUSH
28262: LD_INT 91
28264: PUSH
28265: LD_VAR 0 1
28269: PUSH
28270: LD_EXP 104
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: LIST
28279: PUSH
28280: LD_INT 50
28282: PUSH
28283: EMPTY
28284: LIST
28285: PUSH
28286: EMPTY
28287: LIST
28288: LIST
28289: LIST
28290: LIST
28291: PPUSH
28292: CALL_OW 69
28296: ST_TO_ADDR
// if not tmp then
28297: LD_VAR 0 2
28301: NOT
28302: IFFALSE 28306
// continue ;
28304: GO 28101
// HackLink ( i , tmp ) ;
28306: LD_VAR 0 1
28310: PPUSH
28311: LD_VAR 0 2
28315: PPUSH
28316: CALL 28463 0 2
// end ;
28320: GO 28101
28322: POP
28323: POP
// end ;
28324: PPOPN 2
28326: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
28327: LD_INT 0
28329: PPUSH
28330: PPUSH
28331: PPUSH
// if not hack in hackTanks then
28332: LD_VAR 0 1
28336: PUSH
28337: LD_EXP 101
28341: IN
28342: NOT
28343: IFFALSE 28347
// exit ;
28345: GO 28458
// index := GetElementIndex ( hackTanks , hack ) ;
28347: LD_ADDR_VAR 0 4
28351: PUSH
28352: LD_EXP 101
28356: PPUSH
28357: LD_VAR 0 1
28361: PPUSH
28362: CALL 35932 0 2
28366: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
28367: LD_EXP 102
28371: PUSH
28372: LD_VAR 0 4
28376: ARRAY
28377: IFFALSE 28458
// begin for i in hackTanksCaptured [ index ] do
28379: LD_ADDR_VAR 0 3
28383: PUSH
28384: LD_EXP 102
28388: PUSH
28389: LD_VAR 0 4
28393: ARRAY
28394: PUSH
28395: FOR_IN
28396: IFFALSE 28422
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
28398: LD_VAR 0 3
28402: PUSH
28403: LD_INT 1
28405: ARRAY
28406: PPUSH
28407: LD_VAR 0 3
28411: PUSH
28412: LD_INT 2
28414: ARRAY
28415: PPUSH
28416: CALL_OW 235
28420: GO 28395
28422: POP
28423: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
28424: LD_ADDR_EXP 102
28428: PUSH
28429: LD_EXP 102
28433: PPUSH
28434: LD_VAR 0 4
28438: PPUSH
28439: EMPTY
28440: PPUSH
28441: CALL_OW 1
28445: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
28446: LD_VAR 0 1
28450: PPUSH
28451: LD_INT 0
28453: PPUSH
28454: CALL_OW 505
// end ; end ;
28458: LD_VAR 0 2
28462: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
28463: LD_INT 0
28465: PPUSH
28466: PPUSH
28467: PPUSH
// if not hack in hackTanks or not vehicles then
28468: LD_VAR 0 1
28472: PUSH
28473: LD_EXP 101
28477: IN
28478: NOT
28479: PUSH
28480: LD_VAR 0 2
28484: NOT
28485: OR
28486: IFFALSE 28490
// exit ;
28488: GO 28765
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
28490: LD_ADDR_VAR 0 2
28494: PUSH
28495: LD_VAR 0 1
28499: PPUSH
28500: LD_VAR 0 2
28504: PPUSH
28505: LD_INT 1
28507: PPUSH
28508: LD_INT 1
28510: PPUSH
28511: CALL 36582 0 4
28515: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
28516: LD_ADDR_VAR 0 5
28520: PUSH
28521: LD_EXP 101
28525: PPUSH
28526: LD_VAR 0 1
28530: PPUSH
28531: CALL 35932 0 2
28535: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
28536: LD_EXP 102
28540: PUSH
28541: LD_VAR 0 5
28545: ARRAY
28546: PUSH
28547: LD_EXP 103
28551: LESS
28552: IFFALSE 28741
// begin for i := 1 to vehicles do
28554: LD_ADDR_VAR 0 4
28558: PUSH
28559: DOUBLE
28560: LD_INT 1
28562: DEC
28563: ST_TO_ADDR
28564: LD_VAR 0 2
28568: PUSH
28569: FOR_TO
28570: IFFALSE 28739
// begin if hackTanksCaptured [ index ] = hackLimit then
28572: LD_EXP 102
28576: PUSH
28577: LD_VAR 0 5
28581: ARRAY
28582: PUSH
28583: LD_EXP 103
28587: EQUAL
28588: IFFALSE 28592
// break ;
28590: GO 28739
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
28592: LD_ADDR_EXP 105
28596: PUSH
28597: LD_EXP 105
28601: PPUSH
28602: LD_VAR 0 5
28606: PPUSH
28607: LD_EXP 105
28611: PUSH
28612: LD_VAR 0 5
28616: ARRAY
28617: PUSH
28618: LD_INT 1
28620: PLUS
28621: PPUSH
28622: CALL_OW 1
28626: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
28627: LD_ADDR_EXP 102
28631: PUSH
28632: LD_EXP 102
28636: PPUSH
28637: LD_VAR 0 5
28641: PUSH
28642: LD_EXP 102
28646: PUSH
28647: LD_VAR 0 5
28651: ARRAY
28652: PUSH
28653: LD_INT 1
28655: PLUS
28656: PUSH
28657: EMPTY
28658: LIST
28659: LIST
28660: PPUSH
28661: LD_VAR 0 2
28665: PUSH
28666: LD_VAR 0 4
28670: ARRAY
28671: PUSH
28672: LD_VAR 0 2
28676: PUSH
28677: LD_VAR 0 4
28681: ARRAY
28682: PPUSH
28683: CALL_OW 255
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: PPUSH
28692: CALL 36147 0 3
28696: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
28697: LD_VAR 0 2
28701: PUSH
28702: LD_VAR 0 4
28706: ARRAY
28707: PPUSH
28708: LD_VAR 0 1
28712: PPUSH
28713: CALL_OW 255
28717: PPUSH
28718: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
28722: LD_VAR 0 2
28726: PUSH
28727: LD_VAR 0 4
28731: ARRAY
28732: PPUSH
28733: CALL_OW 141
// end ;
28737: GO 28569
28739: POP
28740: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
28741: LD_VAR 0 1
28745: PPUSH
28746: LD_EXP 102
28750: PUSH
28751: LD_VAR 0 5
28755: ARRAY
28756: PUSH
28757: LD_INT 0
28759: PLUS
28760: PPUSH
28761: CALL_OW 505
// end ;
28765: LD_VAR 0 3
28769: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
28770: LD_INT 0
28772: PPUSH
28773: PPUSH
28774: PPUSH
28775: PPUSH
// if not hack in hackTanks then
28776: LD_VAR 0 1
28780: PUSH
28781: LD_EXP 101
28785: IN
28786: NOT
28787: IFFALSE 28791
// exit ;
28789: GO 29031
// index := GetElementIndex ( hackTanks , hack ) ;
28791: LD_ADDR_VAR 0 4
28795: PUSH
28796: LD_EXP 101
28800: PPUSH
28801: LD_VAR 0 1
28805: PPUSH
28806: CALL 35932 0 2
28810: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
28811: LD_ADDR_VAR 0 3
28815: PUSH
28816: DOUBLE
28817: LD_EXP 102
28821: PUSH
28822: LD_VAR 0 4
28826: ARRAY
28827: INC
28828: ST_TO_ADDR
28829: LD_INT 1
28831: PUSH
28832: FOR_DOWNTO
28833: IFFALSE 29005
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
28835: LD_ADDR_VAR 0 5
28839: PUSH
28840: LD_EXP 102
28844: PUSH
28845: LD_VAR 0 4
28849: ARRAY
28850: PUSH
28851: LD_VAR 0 3
28855: ARRAY
28856: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
28857: LD_VAR 0 5
28861: PUSH
28862: LD_INT 1
28864: ARRAY
28865: PPUSH
28866: CALL_OW 302
28870: NOT
28871: PUSH
28872: LD_VAR 0 5
28876: PUSH
28877: LD_INT 1
28879: ARRAY
28880: PPUSH
28881: CALL_OW 255
28885: PUSH
28886: LD_VAR 0 1
28890: PPUSH
28891: CALL_OW 255
28895: NONEQUAL
28896: OR
28897: IFFALSE 29003
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
28899: LD_VAR 0 5
28903: PUSH
28904: LD_INT 1
28906: ARRAY
28907: PPUSH
28908: CALL_OW 305
28912: PUSH
28913: LD_VAR 0 5
28917: PUSH
28918: LD_INT 1
28920: ARRAY
28921: PPUSH
28922: CALL_OW 255
28926: PUSH
28927: LD_VAR 0 1
28931: PPUSH
28932: CALL_OW 255
28936: EQUAL
28937: AND
28938: IFFALSE 28962
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
28940: LD_VAR 0 5
28944: PUSH
28945: LD_INT 1
28947: ARRAY
28948: PPUSH
28949: LD_VAR 0 5
28953: PUSH
28954: LD_INT 2
28956: ARRAY
28957: PPUSH
28958: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
28962: LD_ADDR_EXP 102
28966: PUSH
28967: LD_EXP 102
28971: PPUSH
28972: LD_VAR 0 4
28976: PPUSH
28977: LD_EXP 102
28981: PUSH
28982: LD_VAR 0 4
28986: ARRAY
28987: PPUSH
28988: LD_VAR 0 3
28992: PPUSH
28993: CALL_OW 3
28997: PPUSH
28998: CALL_OW 1
29002: ST_TO_ADDR
// end ; end ;
29003: GO 28832
29005: POP
29006: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29007: LD_VAR 0 1
29011: PPUSH
29012: LD_EXP 102
29016: PUSH
29017: LD_VAR 0 4
29021: ARRAY
29022: PUSH
29023: LD_INT 0
29025: PLUS
29026: PPUSH
29027: CALL_OW 505
// end ;
29031: LD_VAR 0 2
29035: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
29036: LD_INT 0
29038: PPUSH
29039: PPUSH
29040: PPUSH
29041: PPUSH
// if not hack in hackTanks then
29042: LD_VAR 0 1
29046: PUSH
29047: LD_EXP 101
29051: IN
29052: NOT
29053: IFFALSE 29057
// exit ;
29055: GO 29142
// index := GetElementIndex ( hackTanks , hack ) ;
29057: LD_ADDR_VAR 0 5
29061: PUSH
29062: LD_EXP 101
29066: PPUSH
29067: LD_VAR 0 1
29071: PPUSH
29072: CALL 35932 0 2
29076: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
29077: LD_ADDR_VAR 0 4
29081: PUSH
29082: DOUBLE
29083: LD_INT 1
29085: DEC
29086: ST_TO_ADDR
29087: LD_EXP 102
29091: PUSH
29092: LD_VAR 0 5
29096: ARRAY
29097: PUSH
29098: FOR_TO
29099: IFFALSE 29140
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
29101: LD_EXP 102
29105: PUSH
29106: LD_VAR 0 5
29110: ARRAY
29111: PUSH
29112: LD_VAR 0 4
29116: ARRAY
29117: PUSH
29118: LD_INT 1
29120: ARRAY
29121: PUSH
29122: LD_VAR 0 2
29126: EQUAL
29127: IFFALSE 29138
// KillUnit ( vehicle ) ;
29129: LD_VAR 0 2
29133: PPUSH
29134: CALL_OW 66
29138: GO 29098
29140: POP
29141: POP
// end ;
29142: LD_VAR 0 3
29146: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
29147: LD_EXP 106
29151: NOT
29152: IFFALSE 29187
29154: GO 29156
29156: DISABLE
// begin initMiner := true ;
29157: LD_ADDR_EXP 106
29161: PUSH
29162: LD_INT 1
29164: ST_TO_ADDR
// minersList := [ ] ;
29165: LD_ADDR_EXP 107
29169: PUSH
29170: EMPTY
29171: ST_TO_ADDR
// minerMinesList := [ ] ;
29172: LD_ADDR_EXP 108
29176: PUSH
29177: EMPTY
29178: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
29179: LD_ADDR_EXP 109
29183: PUSH
29184: LD_INT 5
29186: ST_TO_ADDR
// end ;
29187: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
29188: LD_EXP 106
29192: PUSH
29193: LD_INT 34
29195: PUSH
29196: LD_EXP 28
29200: PUSH
29201: EMPTY
29202: LIST
29203: LIST
29204: PPUSH
29205: CALL_OW 69
29209: AND
29210: IFFALSE 29673
29212: GO 29214
29214: DISABLE
29215: LD_INT 0
29217: PPUSH
29218: PPUSH
29219: PPUSH
29220: PPUSH
// begin enable ;
29221: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
29222: LD_ADDR_VAR 0 1
29226: PUSH
29227: LD_INT 34
29229: PUSH
29230: LD_EXP 28
29234: PUSH
29235: EMPTY
29236: LIST
29237: LIST
29238: PPUSH
29239: CALL_OW 69
29243: PUSH
29244: FOR_IN
29245: IFFALSE 29317
// begin if not i in minersList then
29247: LD_VAR 0 1
29251: PUSH
29252: LD_EXP 107
29256: IN
29257: NOT
29258: IFFALSE 29315
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
29260: LD_ADDR_EXP 107
29264: PUSH
29265: LD_EXP 107
29269: PPUSH
29270: LD_EXP 107
29274: PUSH
29275: LD_INT 1
29277: PLUS
29278: PPUSH
29279: LD_VAR 0 1
29283: PPUSH
29284: CALL_OW 1
29288: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
29289: LD_ADDR_EXP 108
29293: PUSH
29294: LD_EXP 108
29298: PPUSH
29299: LD_EXP 108
29303: PUSH
29304: LD_INT 1
29306: PLUS
29307: PPUSH
29308: EMPTY
29309: PPUSH
29310: CALL_OW 1
29314: ST_TO_ADDR
// end end ;
29315: GO 29244
29317: POP
29318: POP
// for i := minerMinesList downto 1 do
29319: LD_ADDR_VAR 0 1
29323: PUSH
29324: DOUBLE
29325: LD_EXP 108
29329: INC
29330: ST_TO_ADDR
29331: LD_INT 1
29333: PUSH
29334: FOR_DOWNTO
29335: IFFALSE 29671
// begin if IsLive ( minersList [ i ] ) then
29337: LD_EXP 107
29341: PUSH
29342: LD_VAR 0 1
29346: ARRAY
29347: PPUSH
29348: CALL_OW 300
29352: IFFALSE 29380
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
29354: LD_EXP 107
29358: PUSH
29359: LD_VAR 0 1
29363: ARRAY
29364: PPUSH
29365: LD_EXP 108
29369: PUSH
29370: LD_VAR 0 1
29374: ARRAY
29375: PPUSH
29376: CALL_OW 505
// if not minerMinesList [ i ] then
29380: LD_EXP 108
29384: PUSH
29385: LD_VAR 0 1
29389: ARRAY
29390: NOT
29391: IFFALSE 29395
// continue ;
29393: GO 29334
// for j := minerMinesList [ i ] downto 1 do
29395: LD_ADDR_VAR 0 2
29399: PUSH
29400: DOUBLE
29401: LD_EXP 108
29405: PUSH
29406: LD_VAR 0 1
29410: ARRAY
29411: INC
29412: ST_TO_ADDR
29413: LD_INT 1
29415: PUSH
29416: FOR_DOWNTO
29417: IFFALSE 29667
// begin side := GetSide ( minersList [ i ] ) ;
29419: LD_ADDR_VAR 0 3
29423: PUSH
29424: LD_EXP 107
29428: PUSH
29429: LD_VAR 0 1
29433: ARRAY
29434: PPUSH
29435: CALL_OW 255
29439: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
29440: LD_ADDR_VAR 0 4
29444: PUSH
29445: LD_EXP 108
29449: PUSH
29450: LD_VAR 0 1
29454: ARRAY
29455: PUSH
29456: LD_VAR 0 2
29460: ARRAY
29461: PUSH
29462: LD_INT 1
29464: ARRAY
29465: PPUSH
29466: LD_EXP 108
29470: PUSH
29471: LD_VAR 0 1
29475: ARRAY
29476: PUSH
29477: LD_VAR 0 2
29481: ARRAY
29482: PUSH
29483: LD_INT 2
29485: ARRAY
29486: PPUSH
29487: CALL_OW 428
29491: ST_TO_ADDR
// if not tmp then
29492: LD_VAR 0 4
29496: NOT
29497: IFFALSE 29501
// continue ;
29499: GO 29416
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
29501: LD_VAR 0 4
29505: PUSH
29506: LD_INT 81
29508: PUSH
29509: LD_VAR 0 3
29513: PUSH
29514: EMPTY
29515: LIST
29516: LIST
29517: PPUSH
29518: CALL_OW 69
29522: IN
29523: PUSH
29524: LD_EXP 108
29528: PUSH
29529: LD_VAR 0 1
29533: ARRAY
29534: PUSH
29535: LD_VAR 0 2
29539: ARRAY
29540: PUSH
29541: LD_INT 1
29543: ARRAY
29544: PPUSH
29545: LD_EXP 108
29549: PUSH
29550: LD_VAR 0 1
29554: ARRAY
29555: PUSH
29556: LD_VAR 0 2
29560: ARRAY
29561: PUSH
29562: LD_INT 2
29564: ARRAY
29565: PPUSH
29566: CALL_OW 458
29570: AND
29571: IFFALSE 29665
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
29573: LD_EXP 108
29577: PUSH
29578: LD_VAR 0 1
29582: ARRAY
29583: PUSH
29584: LD_VAR 0 2
29588: ARRAY
29589: PUSH
29590: LD_INT 1
29592: ARRAY
29593: PPUSH
29594: LD_EXP 108
29598: PUSH
29599: LD_VAR 0 1
29603: ARRAY
29604: PUSH
29605: LD_VAR 0 2
29609: ARRAY
29610: PUSH
29611: LD_INT 2
29613: ARRAY
29614: PPUSH
29615: LD_VAR 0 3
29619: PPUSH
29620: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
29624: LD_ADDR_EXP 108
29628: PUSH
29629: LD_EXP 108
29633: PPUSH
29634: LD_VAR 0 1
29638: PPUSH
29639: LD_EXP 108
29643: PUSH
29644: LD_VAR 0 1
29648: ARRAY
29649: PPUSH
29650: LD_VAR 0 2
29654: PPUSH
29655: CALL_OW 3
29659: PPUSH
29660: CALL_OW 1
29664: ST_TO_ADDR
// end ; end ;
29665: GO 29416
29667: POP
29668: POP
// end ;
29669: GO 29334
29671: POP
29672: POP
// end ;
29673: PPOPN 4
29675: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
29676: LD_INT 0
29678: PPUSH
29679: PPUSH
// result := false ;
29680: LD_ADDR_VAR 0 4
29684: PUSH
29685: LD_INT 0
29687: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
29688: LD_VAR 0 1
29692: PPUSH
29693: CALL_OW 264
29697: PUSH
29698: LD_EXP 28
29702: EQUAL
29703: NOT
29704: IFFALSE 29708
// exit ;
29706: GO 29948
// index := GetElementIndex ( minersList , unit ) ;
29708: LD_ADDR_VAR 0 5
29712: PUSH
29713: LD_EXP 107
29717: PPUSH
29718: LD_VAR 0 1
29722: PPUSH
29723: CALL 35932 0 2
29727: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
29728: LD_EXP 108
29732: PUSH
29733: LD_VAR 0 5
29737: ARRAY
29738: PUSH
29739: LD_EXP 109
29743: GREATEREQUAL
29744: IFFALSE 29748
// exit ;
29746: GO 29948
// ComMoveXY ( unit , x , y ) ;
29748: LD_VAR 0 1
29752: PPUSH
29753: LD_VAR 0 2
29757: PPUSH
29758: LD_VAR 0 3
29762: PPUSH
29763: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29767: LD_INT 35
29769: PPUSH
29770: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
29774: LD_VAR 0 1
29778: PPUSH
29779: LD_VAR 0 2
29783: PPUSH
29784: LD_VAR 0 3
29788: PPUSH
29789: CALL 66651 0 3
29793: NOT
29794: PUSH
29795: LD_VAR 0 1
29799: PPUSH
29800: CALL_OW 314
29804: AND
29805: IFFALSE 29809
// exit ;
29807: GO 29948
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
29809: LD_VAR 0 2
29813: PPUSH
29814: LD_VAR 0 3
29818: PPUSH
29819: CALL_OW 428
29823: PUSH
29824: LD_VAR 0 1
29828: EQUAL
29829: PUSH
29830: LD_VAR 0 1
29834: PPUSH
29835: CALL_OW 314
29839: NOT
29840: AND
29841: IFFALSE 29767
// PlaySoundXY ( x , y , PlantMine ) ;
29843: LD_VAR 0 2
29847: PPUSH
29848: LD_VAR 0 3
29852: PPUSH
29853: LD_STRING PlantMine
29855: PPUSH
29856: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
29860: LD_VAR 0 2
29864: PPUSH
29865: LD_VAR 0 3
29869: PPUSH
29870: LD_VAR 0 1
29874: PPUSH
29875: CALL_OW 255
29879: PPUSH
29880: LD_INT 0
29882: PPUSH
29883: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
29887: LD_ADDR_EXP 108
29891: PUSH
29892: LD_EXP 108
29896: PPUSH
29897: LD_VAR 0 5
29901: PUSH
29902: LD_EXP 108
29906: PUSH
29907: LD_VAR 0 5
29911: ARRAY
29912: PUSH
29913: LD_INT 1
29915: PLUS
29916: PUSH
29917: EMPTY
29918: LIST
29919: LIST
29920: PPUSH
29921: LD_VAR 0 2
29925: PUSH
29926: LD_VAR 0 3
29930: PUSH
29931: EMPTY
29932: LIST
29933: LIST
29934: PPUSH
29935: CALL 36147 0 3
29939: ST_TO_ADDR
// result := true ;
29940: LD_ADDR_VAR 0 4
29944: PUSH
29945: LD_INT 1
29947: ST_TO_ADDR
// end ;
29948: LD_VAR 0 4
29952: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
29953: LD_INT 0
29955: PPUSH
29956: PPUSH
29957: PPUSH
// if not unit in minersList then
29958: LD_VAR 0 1
29962: PUSH
29963: LD_EXP 107
29967: IN
29968: NOT
29969: IFFALSE 29973
// exit ;
29971: GO 30365
// index := GetElementIndex ( minersList , unit ) ;
29973: LD_ADDR_VAR 0 6
29977: PUSH
29978: LD_EXP 107
29982: PPUSH
29983: LD_VAR 0 1
29987: PPUSH
29988: CALL 35932 0 2
29992: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
29993: LD_ADDR_VAR 0 5
29997: PUSH
29998: DOUBLE
29999: LD_EXP 108
30003: PUSH
30004: LD_VAR 0 6
30008: ARRAY
30009: INC
30010: ST_TO_ADDR
30011: LD_INT 1
30013: PUSH
30014: FOR_DOWNTO
30015: IFFALSE 30176
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
30017: LD_EXP 108
30021: PUSH
30022: LD_VAR 0 6
30026: ARRAY
30027: PUSH
30028: LD_VAR 0 5
30032: ARRAY
30033: PUSH
30034: LD_INT 1
30036: ARRAY
30037: PUSH
30038: LD_VAR 0 2
30042: EQUAL
30043: PUSH
30044: LD_EXP 108
30048: PUSH
30049: LD_VAR 0 6
30053: ARRAY
30054: PUSH
30055: LD_VAR 0 5
30059: ARRAY
30060: PUSH
30061: LD_INT 2
30063: ARRAY
30064: PUSH
30065: LD_VAR 0 3
30069: EQUAL
30070: AND
30071: IFFALSE 30174
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30073: LD_EXP 108
30077: PUSH
30078: LD_VAR 0 6
30082: ARRAY
30083: PUSH
30084: LD_VAR 0 5
30088: ARRAY
30089: PUSH
30090: LD_INT 1
30092: ARRAY
30093: PPUSH
30094: LD_EXP 108
30098: PUSH
30099: LD_VAR 0 6
30103: ARRAY
30104: PUSH
30105: LD_VAR 0 5
30109: ARRAY
30110: PUSH
30111: LD_INT 2
30113: ARRAY
30114: PPUSH
30115: LD_VAR 0 1
30119: PPUSH
30120: CALL_OW 255
30124: PPUSH
30125: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30129: LD_ADDR_EXP 108
30133: PUSH
30134: LD_EXP 108
30138: PPUSH
30139: LD_VAR 0 6
30143: PPUSH
30144: LD_EXP 108
30148: PUSH
30149: LD_VAR 0 6
30153: ARRAY
30154: PPUSH
30155: LD_VAR 0 5
30159: PPUSH
30160: CALL_OW 3
30164: PPUSH
30165: CALL_OW 1
30169: ST_TO_ADDR
// exit ;
30170: POP
30171: POP
30172: GO 30365
// end ; end ;
30174: GO 30014
30176: POP
30177: POP
// for i := minerMinesList [ index ] downto 1 do
30178: LD_ADDR_VAR 0 5
30182: PUSH
30183: DOUBLE
30184: LD_EXP 108
30188: PUSH
30189: LD_VAR 0 6
30193: ARRAY
30194: INC
30195: ST_TO_ADDR
30196: LD_INT 1
30198: PUSH
30199: FOR_DOWNTO
30200: IFFALSE 30363
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
30202: LD_EXP 108
30206: PUSH
30207: LD_VAR 0 6
30211: ARRAY
30212: PUSH
30213: LD_VAR 0 5
30217: ARRAY
30218: PUSH
30219: LD_INT 1
30221: ARRAY
30222: PPUSH
30223: LD_EXP 108
30227: PUSH
30228: LD_VAR 0 6
30232: ARRAY
30233: PUSH
30234: LD_VAR 0 5
30238: ARRAY
30239: PUSH
30240: LD_INT 2
30242: ARRAY
30243: PPUSH
30244: LD_VAR 0 2
30248: PPUSH
30249: LD_VAR 0 3
30253: PPUSH
30254: CALL_OW 298
30258: PUSH
30259: LD_INT 6
30261: LESS
30262: IFFALSE 30361
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30264: LD_EXP 108
30268: PUSH
30269: LD_VAR 0 6
30273: ARRAY
30274: PUSH
30275: LD_VAR 0 5
30279: ARRAY
30280: PUSH
30281: LD_INT 1
30283: ARRAY
30284: PPUSH
30285: LD_EXP 108
30289: PUSH
30290: LD_VAR 0 6
30294: ARRAY
30295: PUSH
30296: LD_VAR 0 5
30300: ARRAY
30301: PUSH
30302: LD_INT 2
30304: ARRAY
30305: PPUSH
30306: LD_VAR 0 1
30310: PPUSH
30311: CALL_OW 255
30315: PPUSH
30316: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30320: LD_ADDR_EXP 108
30324: PUSH
30325: LD_EXP 108
30329: PPUSH
30330: LD_VAR 0 6
30334: PPUSH
30335: LD_EXP 108
30339: PUSH
30340: LD_VAR 0 6
30344: ARRAY
30345: PPUSH
30346: LD_VAR 0 5
30350: PPUSH
30351: CALL_OW 3
30355: PPUSH
30356: CALL_OW 1
30360: ST_TO_ADDR
// end ; end ;
30361: GO 30199
30363: POP
30364: POP
// end ;
30365: LD_VAR 0 4
30369: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
30370: LD_INT 0
30372: PPUSH
30373: PPUSH
30374: PPUSH
30375: PPUSH
30376: PPUSH
30377: PPUSH
30378: PPUSH
30379: PPUSH
30380: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
30381: LD_VAR 0 1
30385: PPUSH
30386: CALL_OW 264
30390: PUSH
30391: LD_EXP 28
30395: EQUAL
30396: NOT
30397: PUSH
30398: LD_VAR 0 1
30402: PUSH
30403: LD_EXP 107
30407: IN
30408: NOT
30409: OR
30410: IFFALSE 30414
// exit ;
30412: GO 30736
// index := GetElementIndex ( minersList , unit ) ;
30414: LD_ADDR_VAR 0 6
30418: PUSH
30419: LD_EXP 107
30423: PPUSH
30424: LD_VAR 0 1
30428: PPUSH
30429: CALL 35932 0 2
30433: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
30434: LD_ADDR_VAR 0 8
30438: PUSH
30439: LD_EXP 109
30443: PUSH
30444: LD_EXP 108
30448: PUSH
30449: LD_VAR 0 6
30453: ARRAY
30454: MINUS
30455: ST_TO_ADDR
// if not minesFreeAmount then
30456: LD_VAR 0 8
30460: NOT
30461: IFFALSE 30465
// exit ;
30463: GO 30736
// tmp := [ ] ;
30465: LD_ADDR_VAR 0 7
30469: PUSH
30470: EMPTY
30471: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
30472: LD_ADDR_VAR 0 5
30476: PUSH
30477: DOUBLE
30478: LD_INT 1
30480: DEC
30481: ST_TO_ADDR
30482: LD_VAR 0 8
30486: PUSH
30487: FOR_TO
30488: IFFALSE 30683
// begin _d := rand ( 0 , 5 ) ;
30490: LD_ADDR_VAR 0 11
30494: PUSH
30495: LD_INT 0
30497: PPUSH
30498: LD_INT 5
30500: PPUSH
30501: CALL_OW 12
30505: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
30506: LD_ADDR_VAR 0 12
30510: PUSH
30511: LD_INT 2
30513: PPUSH
30514: LD_INT 6
30516: PPUSH
30517: CALL_OW 12
30521: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
30522: LD_ADDR_VAR 0 9
30526: PUSH
30527: LD_VAR 0 2
30531: PPUSH
30532: LD_VAR 0 11
30536: PPUSH
30537: LD_VAR 0 12
30541: PPUSH
30542: CALL_OW 272
30546: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
30547: LD_ADDR_VAR 0 10
30551: PUSH
30552: LD_VAR 0 3
30556: PPUSH
30557: LD_VAR 0 11
30561: PPUSH
30562: LD_VAR 0 12
30566: PPUSH
30567: CALL_OW 273
30571: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
30572: LD_VAR 0 9
30576: PPUSH
30577: LD_VAR 0 10
30581: PPUSH
30582: CALL_OW 488
30586: PUSH
30587: LD_VAR 0 9
30591: PUSH
30592: LD_VAR 0 10
30596: PUSH
30597: EMPTY
30598: LIST
30599: LIST
30600: PUSH
30601: LD_VAR 0 7
30605: IN
30606: NOT
30607: AND
30608: PUSH
30609: LD_VAR 0 9
30613: PPUSH
30614: LD_VAR 0 10
30618: PPUSH
30619: CALL_OW 458
30623: NOT
30624: AND
30625: IFFALSE 30667
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
30627: LD_ADDR_VAR 0 7
30631: PUSH
30632: LD_VAR 0 7
30636: PPUSH
30637: LD_VAR 0 7
30641: PUSH
30642: LD_INT 1
30644: PLUS
30645: PPUSH
30646: LD_VAR 0 9
30650: PUSH
30651: LD_VAR 0 10
30655: PUSH
30656: EMPTY
30657: LIST
30658: LIST
30659: PPUSH
30660: CALL_OW 1
30664: ST_TO_ADDR
30665: GO 30681
// i := i - 1 ;
30667: LD_ADDR_VAR 0 5
30671: PUSH
30672: LD_VAR 0 5
30676: PUSH
30677: LD_INT 1
30679: MINUS
30680: ST_TO_ADDR
// end ;
30681: GO 30487
30683: POP
30684: POP
// for i in tmp do
30685: LD_ADDR_VAR 0 5
30689: PUSH
30690: LD_VAR 0 7
30694: PUSH
30695: FOR_IN
30696: IFFALSE 30734
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
30698: LD_VAR 0 1
30702: PPUSH
30703: LD_VAR 0 5
30707: PUSH
30708: LD_INT 1
30710: ARRAY
30711: PPUSH
30712: LD_VAR 0 5
30716: PUSH
30717: LD_INT 2
30719: ARRAY
30720: PPUSH
30721: CALL 29676 0 3
30725: NOT
30726: IFFALSE 30732
// exit ;
30728: POP
30729: POP
30730: GO 30736
30732: GO 30695
30734: POP
30735: POP
// end ;
30736: LD_VAR 0 4
30740: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
30741: LD_INT 0
30743: PPUSH
30744: PPUSH
30745: PPUSH
30746: PPUSH
30747: PPUSH
30748: PPUSH
30749: PPUSH
// if not GetClass ( unit ) = class_sniper then
30750: LD_VAR 0 1
30754: PPUSH
30755: CALL_OW 257
30759: PUSH
30760: LD_INT 5
30762: EQUAL
30763: NOT
30764: IFFALSE 30768
// exit ;
30766: GO 31156
// dist := 8 ;
30768: LD_ADDR_VAR 0 5
30772: PUSH
30773: LD_INT 8
30775: ST_TO_ADDR
// viewRange := 12 ;
30776: LD_ADDR_VAR 0 7
30780: PUSH
30781: LD_INT 12
30783: ST_TO_ADDR
// side := GetSide ( unit ) ;
30784: LD_ADDR_VAR 0 6
30788: PUSH
30789: LD_VAR 0 1
30793: PPUSH
30794: CALL_OW 255
30798: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
30799: LD_INT 61
30801: PPUSH
30802: LD_VAR 0 6
30806: PPUSH
30807: CALL_OW 321
30811: PUSH
30812: LD_INT 2
30814: EQUAL
30815: IFFALSE 30825
// viewRange := 16 ;
30817: LD_ADDR_VAR 0 7
30821: PUSH
30822: LD_INT 16
30824: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
30825: LD_VAR 0 1
30829: PPUSH
30830: LD_VAR 0 2
30834: PPUSH
30835: LD_VAR 0 3
30839: PPUSH
30840: CALL_OW 297
30844: PUSH
30845: LD_VAR 0 5
30849: GREATER
30850: IFFALSE 30929
// begin ComMoveXY ( unit , x , y ) ;
30852: LD_VAR 0 1
30856: PPUSH
30857: LD_VAR 0 2
30861: PPUSH
30862: LD_VAR 0 3
30866: PPUSH
30867: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30871: LD_INT 35
30873: PPUSH
30874: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
30878: LD_VAR 0 1
30882: PPUSH
30883: LD_VAR 0 2
30887: PPUSH
30888: LD_VAR 0 3
30892: PPUSH
30893: CALL 66651 0 3
30897: NOT
30898: IFFALSE 30902
// exit ;
30900: GO 31156
// until GetDistUnitXY ( unit , x , y ) < dist ;
30902: LD_VAR 0 1
30906: PPUSH
30907: LD_VAR 0 2
30911: PPUSH
30912: LD_VAR 0 3
30916: PPUSH
30917: CALL_OW 297
30921: PUSH
30922: LD_VAR 0 5
30926: LESS
30927: IFFALSE 30871
// end ; ComTurnXY ( unit , x , y ) ;
30929: LD_VAR 0 1
30933: PPUSH
30934: LD_VAR 0 2
30938: PPUSH
30939: LD_VAR 0 3
30943: PPUSH
30944: CALL_OW 118
// wait ( 5 ) ;
30948: LD_INT 5
30950: PPUSH
30951: CALL_OW 67
// _d := GetDir ( unit ) ;
30955: LD_ADDR_VAR 0 10
30959: PUSH
30960: LD_VAR 0 1
30964: PPUSH
30965: CALL_OW 254
30969: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
30970: LD_ADDR_VAR 0 8
30974: PUSH
30975: LD_VAR 0 1
30979: PPUSH
30980: CALL_OW 250
30984: PPUSH
30985: LD_VAR 0 10
30989: PPUSH
30990: LD_VAR 0 5
30994: PPUSH
30995: CALL_OW 272
30999: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
31000: LD_ADDR_VAR 0 9
31004: PUSH
31005: LD_VAR 0 1
31009: PPUSH
31010: CALL_OW 251
31014: PPUSH
31015: LD_VAR 0 10
31019: PPUSH
31020: LD_VAR 0 5
31024: PPUSH
31025: CALL_OW 273
31029: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31030: LD_VAR 0 8
31034: PPUSH
31035: LD_VAR 0 9
31039: PPUSH
31040: CALL_OW 488
31044: NOT
31045: IFFALSE 31049
// exit ;
31047: GO 31156
// ComAnimCustom ( unit , 1 ) ;
31049: LD_VAR 0 1
31053: PPUSH
31054: LD_INT 1
31056: PPUSH
31057: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
31061: LD_VAR 0 8
31065: PPUSH
31066: LD_VAR 0 9
31070: PPUSH
31071: LD_VAR 0 6
31075: PPUSH
31076: LD_VAR 0 7
31080: PPUSH
31081: CALL_OW 330
// repeat wait ( 1 ) ;
31085: LD_INT 1
31087: PPUSH
31088: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
31092: LD_VAR 0 1
31096: PPUSH
31097: CALL_OW 316
31101: PUSH
31102: LD_VAR 0 1
31106: PPUSH
31107: CALL_OW 314
31111: OR
31112: PUSH
31113: LD_VAR 0 1
31117: PPUSH
31118: CALL_OW 302
31122: NOT
31123: OR
31124: PUSH
31125: LD_VAR 0 1
31129: PPUSH
31130: CALL_OW 301
31134: OR
31135: IFFALSE 31085
// RemoveSeeing ( _x , _y , side ) ;
31137: LD_VAR 0 8
31141: PPUSH
31142: LD_VAR 0 9
31146: PPUSH
31147: LD_VAR 0 6
31151: PPUSH
31152: CALL_OW 331
// end ; end_of_file
31156: LD_VAR 0 4
31160: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31161: LD_INT 0
31163: PPUSH
31164: PPUSH
// if exist_mode then
31165: LD_VAR 0 2
31169: IFFALSE 31194
// unit := CreateCharacter ( prefix & ident ) else
31171: LD_ADDR_VAR 0 5
31175: PUSH
31176: LD_VAR 0 3
31180: PUSH
31181: LD_VAR 0 1
31185: STR
31186: PPUSH
31187: CALL_OW 34
31191: ST_TO_ADDR
31192: GO 31209
// unit := NewCharacter ( ident ) ;
31194: LD_ADDR_VAR 0 5
31198: PUSH
31199: LD_VAR 0 1
31203: PPUSH
31204: CALL_OW 25
31208: ST_TO_ADDR
// result := unit ;
31209: LD_ADDR_VAR 0 4
31213: PUSH
31214: LD_VAR 0 5
31218: ST_TO_ADDR
// end ;
31219: LD_VAR 0 4
31223: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31224: LD_INT 0
31226: PPUSH
31227: PPUSH
// if not side or not nation then
31228: LD_VAR 0 1
31232: NOT
31233: PUSH
31234: LD_VAR 0 2
31238: NOT
31239: OR
31240: IFFALSE 31244
// exit ;
31242: GO 32012
// case nation of nation_american :
31244: LD_VAR 0 2
31248: PUSH
31249: LD_INT 1
31251: DOUBLE
31252: EQUAL
31253: IFTRUE 31257
31255: GO 31471
31257: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31258: LD_ADDR_VAR 0 4
31262: PUSH
31263: LD_INT 35
31265: PUSH
31266: LD_INT 45
31268: PUSH
31269: LD_INT 46
31271: PUSH
31272: LD_INT 47
31274: PUSH
31275: LD_INT 82
31277: PUSH
31278: LD_INT 83
31280: PUSH
31281: LD_INT 84
31283: PUSH
31284: LD_INT 85
31286: PUSH
31287: LD_INT 86
31289: PUSH
31290: LD_INT 1
31292: PUSH
31293: LD_INT 2
31295: PUSH
31296: LD_INT 6
31298: PUSH
31299: LD_INT 15
31301: PUSH
31302: LD_INT 16
31304: PUSH
31305: LD_INT 7
31307: PUSH
31308: LD_INT 12
31310: PUSH
31311: LD_INT 13
31313: PUSH
31314: LD_INT 10
31316: PUSH
31317: LD_INT 14
31319: PUSH
31320: LD_INT 20
31322: PUSH
31323: LD_INT 21
31325: PUSH
31326: LD_INT 22
31328: PUSH
31329: LD_INT 25
31331: PUSH
31332: LD_INT 32
31334: PUSH
31335: LD_INT 27
31337: PUSH
31338: LD_INT 36
31340: PUSH
31341: LD_INT 69
31343: PUSH
31344: LD_INT 39
31346: PUSH
31347: LD_INT 34
31349: PUSH
31350: LD_INT 40
31352: PUSH
31353: LD_INT 48
31355: PUSH
31356: LD_INT 49
31358: PUSH
31359: LD_INT 50
31361: PUSH
31362: LD_INT 51
31364: PUSH
31365: LD_INT 52
31367: PUSH
31368: LD_INT 53
31370: PUSH
31371: LD_INT 54
31373: PUSH
31374: LD_INT 55
31376: PUSH
31377: LD_INT 56
31379: PUSH
31380: LD_INT 57
31382: PUSH
31383: LD_INT 58
31385: PUSH
31386: LD_INT 59
31388: PUSH
31389: LD_INT 60
31391: PUSH
31392: LD_INT 61
31394: PUSH
31395: LD_INT 62
31397: PUSH
31398: LD_INT 80
31400: PUSH
31401: LD_INT 82
31403: PUSH
31404: LD_INT 83
31406: PUSH
31407: LD_INT 84
31409: PUSH
31410: LD_INT 85
31412: PUSH
31413: LD_INT 86
31415: PUSH
31416: EMPTY
31417: LIST
31418: LIST
31419: LIST
31420: LIST
31421: LIST
31422: LIST
31423: LIST
31424: LIST
31425: LIST
31426: LIST
31427: LIST
31428: LIST
31429: LIST
31430: LIST
31431: LIST
31432: LIST
31433: LIST
31434: LIST
31435: LIST
31436: LIST
31437: LIST
31438: LIST
31439: LIST
31440: LIST
31441: LIST
31442: LIST
31443: LIST
31444: LIST
31445: LIST
31446: LIST
31447: LIST
31448: LIST
31449: LIST
31450: LIST
31451: LIST
31452: LIST
31453: LIST
31454: LIST
31455: LIST
31456: LIST
31457: LIST
31458: LIST
31459: LIST
31460: LIST
31461: LIST
31462: LIST
31463: LIST
31464: LIST
31465: LIST
31466: LIST
31467: LIST
31468: ST_TO_ADDR
31469: GO 31936
31471: LD_INT 2
31473: DOUBLE
31474: EQUAL
31475: IFTRUE 31479
31477: GO 31705
31479: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
31480: LD_ADDR_VAR 0 4
31484: PUSH
31485: LD_INT 35
31487: PUSH
31488: LD_INT 45
31490: PUSH
31491: LD_INT 46
31493: PUSH
31494: LD_INT 47
31496: PUSH
31497: LD_INT 82
31499: PUSH
31500: LD_INT 83
31502: PUSH
31503: LD_INT 84
31505: PUSH
31506: LD_INT 85
31508: PUSH
31509: LD_INT 87
31511: PUSH
31512: LD_INT 70
31514: PUSH
31515: LD_INT 1
31517: PUSH
31518: LD_INT 11
31520: PUSH
31521: LD_INT 3
31523: PUSH
31524: LD_INT 4
31526: PUSH
31527: LD_INT 5
31529: PUSH
31530: LD_INT 6
31532: PUSH
31533: LD_INT 15
31535: PUSH
31536: LD_INT 18
31538: PUSH
31539: LD_INT 7
31541: PUSH
31542: LD_INT 17
31544: PUSH
31545: LD_INT 8
31547: PUSH
31548: LD_INT 20
31550: PUSH
31551: LD_INT 21
31553: PUSH
31554: LD_INT 22
31556: PUSH
31557: LD_INT 72
31559: PUSH
31560: LD_INT 26
31562: PUSH
31563: LD_INT 69
31565: PUSH
31566: LD_INT 39
31568: PUSH
31569: LD_INT 40
31571: PUSH
31572: LD_INT 41
31574: PUSH
31575: LD_INT 42
31577: PUSH
31578: LD_INT 43
31580: PUSH
31581: LD_INT 48
31583: PUSH
31584: LD_INT 49
31586: PUSH
31587: LD_INT 50
31589: PUSH
31590: LD_INT 51
31592: PUSH
31593: LD_INT 52
31595: PUSH
31596: LD_INT 53
31598: PUSH
31599: LD_INT 54
31601: PUSH
31602: LD_INT 55
31604: PUSH
31605: LD_INT 56
31607: PUSH
31608: LD_INT 60
31610: PUSH
31611: LD_INT 61
31613: PUSH
31614: LD_INT 62
31616: PUSH
31617: LD_INT 66
31619: PUSH
31620: LD_INT 67
31622: PUSH
31623: LD_INT 68
31625: PUSH
31626: LD_INT 81
31628: PUSH
31629: LD_INT 82
31631: PUSH
31632: LD_INT 83
31634: PUSH
31635: LD_INT 84
31637: PUSH
31638: LD_INT 85
31640: PUSH
31641: LD_INT 87
31643: PUSH
31644: LD_INT 88
31646: PUSH
31647: EMPTY
31648: LIST
31649: LIST
31650: LIST
31651: LIST
31652: LIST
31653: LIST
31654: LIST
31655: LIST
31656: LIST
31657: LIST
31658: LIST
31659: LIST
31660: LIST
31661: LIST
31662: LIST
31663: LIST
31664: LIST
31665: LIST
31666: LIST
31667: LIST
31668: LIST
31669: LIST
31670: LIST
31671: LIST
31672: LIST
31673: LIST
31674: LIST
31675: LIST
31676: LIST
31677: LIST
31678: LIST
31679: LIST
31680: LIST
31681: LIST
31682: LIST
31683: LIST
31684: LIST
31685: LIST
31686: LIST
31687: LIST
31688: LIST
31689: LIST
31690: LIST
31691: LIST
31692: LIST
31693: LIST
31694: LIST
31695: LIST
31696: LIST
31697: LIST
31698: LIST
31699: LIST
31700: LIST
31701: LIST
31702: ST_TO_ADDR
31703: GO 31936
31705: LD_INT 3
31707: DOUBLE
31708: EQUAL
31709: IFTRUE 31713
31711: GO 31935
31713: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
31714: LD_ADDR_VAR 0 4
31718: PUSH
31719: LD_INT 46
31721: PUSH
31722: LD_INT 47
31724: PUSH
31725: LD_INT 1
31727: PUSH
31728: LD_INT 2
31730: PUSH
31731: LD_INT 82
31733: PUSH
31734: LD_INT 83
31736: PUSH
31737: LD_INT 84
31739: PUSH
31740: LD_INT 85
31742: PUSH
31743: LD_INT 86
31745: PUSH
31746: LD_INT 11
31748: PUSH
31749: LD_INT 9
31751: PUSH
31752: LD_INT 20
31754: PUSH
31755: LD_INT 19
31757: PUSH
31758: LD_INT 21
31760: PUSH
31761: LD_INT 24
31763: PUSH
31764: LD_INT 22
31766: PUSH
31767: LD_INT 25
31769: PUSH
31770: LD_INT 28
31772: PUSH
31773: LD_INT 29
31775: PUSH
31776: LD_INT 30
31778: PUSH
31779: LD_INT 31
31781: PUSH
31782: LD_INT 37
31784: PUSH
31785: LD_INT 38
31787: PUSH
31788: LD_INT 32
31790: PUSH
31791: LD_INT 27
31793: PUSH
31794: LD_INT 33
31796: PUSH
31797: LD_INT 69
31799: PUSH
31800: LD_INT 39
31802: PUSH
31803: LD_INT 34
31805: PUSH
31806: LD_INT 40
31808: PUSH
31809: LD_INT 71
31811: PUSH
31812: LD_INT 23
31814: PUSH
31815: LD_INT 44
31817: PUSH
31818: LD_INT 48
31820: PUSH
31821: LD_INT 49
31823: PUSH
31824: LD_INT 50
31826: PUSH
31827: LD_INT 51
31829: PUSH
31830: LD_INT 52
31832: PUSH
31833: LD_INT 53
31835: PUSH
31836: LD_INT 54
31838: PUSH
31839: LD_INT 55
31841: PUSH
31842: LD_INT 56
31844: PUSH
31845: LD_INT 57
31847: PUSH
31848: LD_INT 58
31850: PUSH
31851: LD_INT 59
31853: PUSH
31854: LD_INT 63
31856: PUSH
31857: LD_INT 64
31859: PUSH
31860: LD_INT 65
31862: PUSH
31863: LD_INT 82
31865: PUSH
31866: LD_INT 83
31868: PUSH
31869: LD_INT 84
31871: PUSH
31872: LD_INT 85
31874: PUSH
31875: LD_INT 86
31877: PUSH
31878: EMPTY
31879: LIST
31880: LIST
31881: LIST
31882: LIST
31883: LIST
31884: LIST
31885: LIST
31886: LIST
31887: LIST
31888: LIST
31889: LIST
31890: LIST
31891: LIST
31892: LIST
31893: LIST
31894: LIST
31895: LIST
31896: LIST
31897: LIST
31898: LIST
31899: LIST
31900: LIST
31901: LIST
31902: LIST
31903: LIST
31904: LIST
31905: LIST
31906: LIST
31907: LIST
31908: LIST
31909: LIST
31910: LIST
31911: LIST
31912: LIST
31913: LIST
31914: LIST
31915: LIST
31916: LIST
31917: LIST
31918: LIST
31919: LIST
31920: LIST
31921: LIST
31922: LIST
31923: LIST
31924: LIST
31925: LIST
31926: LIST
31927: LIST
31928: LIST
31929: LIST
31930: LIST
31931: LIST
31932: ST_TO_ADDR
31933: GO 31936
31935: POP
// if state > - 1 and state < 3 then
31936: LD_VAR 0 3
31940: PUSH
31941: LD_INT 1
31943: NEG
31944: GREATER
31945: PUSH
31946: LD_VAR 0 3
31950: PUSH
31951: LD_INT 3
31953: LESS
31954: AND
31955: IFFALSE 32012
// for i in result do
31957: LD_ADDR_VAR 0 5
31961: PUSH
31962: LD_VAR 0 4
31966: PUSH
31967: FOR_IN
31968: IFFALSE 32010
// if GetTech ( i , side ) <> state then
31970: LD_VAR 0 5
31974: PPUSH
31975: LD_VAR 0 1
31979: PPUSH
31980: CALL_OW 321
31984: PUSH
31985: LD_VAR 0 3
31989: NONEQUAL
31990: IFFALSE 32008
// result := result diff i ;
31992: LD_ADDR_VAR 0 4
31996: PUSH
31997: LD_VAR 0 4
32001: PUSH
32002: LD_VAR 0 5
32006: DIFF
32007: ST_TO_ADDR
32008: GO 31967
32010: POP
32011: POP
// end ;
32012: LD_VAR 0 4
32016: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
32017: LD_INT 0
32019: PPUSH
32020: PPUSH
32021: PPUSH
// result := true ;
32022: LD_ADDR_VAR 0 3
32026: PUSH
32027: LD_INT 1
32029: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
32030: LD_ADDR_VAR 0 5
32034: PUSH
32035: LD_VAR 0 2
32039: PPUSH
32040: CALL_OW 480
32044: ST_TO_ADDR
// if not tmp then
32045: LD_VAR 0 5
32049: NOT
32050: IFFALSE 32054
// exit ;
32052: GO 32103
// for i in tmp do
32054: LD_ADDR_VAR 0 4
32058: PUSH
32059: LD_VAR 0 5
32063: PUSH
32064: FOR_IN
32065: IFFALSE 32101
// if GetTech ( i , side ) <> state_researched then
32067: LD_VAR 0 4
32071: PPUSH
32072: LD_VAR 0 1
32076: PPUSH
32077: CALL_OW 321
32081: PUSH
32082: LD_INT 2
32084: NONEQUAL
32085: IFFALSE 32099
// begin result := false ;
32087: LD_ADDR_VAR 0 3
32091: PUSH
32092: LD_INT 0
32094: ST_TO_ADDR
// exit ;
32095: POP
32096: POP
32097: GO 32103
// end ;
32099: GO 32064
32101: POP
32102: POP
// end ;
32103: LD_VAR 0 3
32107: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32108: LD_INT 0
32110: PPUSH
32111: PPUSH
32112: PPUSH
32113: PPUSH
32114: PPUSH
32115: PPUSH
32116: PPUSH
32117: PPUSH
32118: PPUSH
32119: PPUSH
32120: PPUSH
32121: PPUSH
32122: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32123: LD_VAR 0 1
32127: NOT
32128: PUSH
32129: LD_VAR 0 1
32133: PPUSH
32134: CALL_OW 257
32138: PUSH
32139: LD_INT 9
32141: NONEQUAL
32142: OR
32143: IFFALSE 32147
// exit ;
32145: GO 32720
// side := GetSide ( unit ) ;
32147: LD_ADDR_VAR 0 9
32151: PUSH
32152: LD_VAR 0 1
32156: PPUSH
32157: CALL_OW 255
32161: ST_TO_ADDR
// tech_space := tech_spacanom ;
32162: LD_ADDR_VAR 0 12
32166: PUSH
32167: LD_INT 29
32169: ST_TO_ADDR
// tech_time := tech_taurad ;
32170: LD_ADDR_VAR 0 13
32174: PUSH
32175: LD_INT 28
32177: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32178: LD_ADDR_VAR 0 11
32182: PUSH
32183: LD_VAR 0 1
32187: PPUSH
32188: CALL_OW 310
32192: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32193: LD_VAR 0 11
32197: PPUSH
32198: CALL_OW 247
32202: PUSH
32203: LD_INT 2
32205: EQUAL
32206: IFFALSE 32210
// exit ;
32208: GO 32720
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32210: LD_ADDR_VAR 0 8
32214: PUSH
32215: LD_INT 81
32217: PUSH
32218: LD_VAR 0 9
32222: PUSH
32223: EMPTY
32224: LIST
32225: LIST
32226: PUSH
32227: LD_INT 3
32229: PUSH
32230: LD_INT 21
32232: PUSH
32233: LD_INT 3
32235: PUSH
32236: EMPTY
32237: LIST
32238: LIST
32239: PUSH
32240: EMPTY
32241: LIST
32242: LIST
32243: PUSH
32244: EMPTY
32245: LIST
32246: LIST
32247: PPUSH
32248: CALL_OW 69
32252: ST_TO_ADDR
// if not tmp then
32253: LD_VAR 0 8
32257: NOT
32258: IFFALSE 32262
// exit ;
32260: GO 32720
// if in_unit then
32262: LD_VAR 0 11
32266: IFFALSE 32290
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32268: LD_ADDR_VAR 0 10
32272: PUSH
32273: LD_VAR 0 8
32277: PPUSH
32278: LD_VAR 0 11
32282: PPUSH
32283: CALL_OW 74
32287: ST_TO_ADDR
32288: GO 32310
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32290: LD_ADDR_VAR 0 10
32294: PUSH
32295: LD_VAR 0 8
32299: PPUSH
32300: LD_VAR 0 1
32304: PPUSH
32305: CALL_OW 74
32309: ST_TO_ADDR
// if not enemy then
32310: LD_VAR 0 10
32314: NOT
32315: IFFALSE 32319
// exit ;
32317: GO 32720
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32319: LD_VAR 0 11
32323: PUSH
32324: LD_VAR 0 11
32328: PPUSH
32329: LD_VAR 0 10
32333: PPUSH
32334: CALL_OW 296
32338: PUSH
32339: LD_INT 13
32341: GREATER
32342: AND
32343: PUSH
32344: LD_VAR 0 1
32348: PPUSH
32349: LD_VAR 0 10
32353: PPUSH
32354: CALL_OW 296
32358: PUSH
32359: LD_INT 12
32361: GREATER
32362: OR
32363: IFFALSE 32367
// exit ;
32365: GO 32720
// missile := [ 1 ] ;
32367: LD_ADDR_VAR 0 14
32371: PUSH
32372: LD_INT 1
32374: PUSH
32375: EMPTY
32376: LIST
32377: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32378: LD_VAR 0 9
32382: PPUSH
32383: LD_VAR 0 12
32387: PPUSH
32388: CALL_OW 325
32392: IFFALSE 32421
// missile := Replace ( missile , missile + 1 , 2 ) ;
32394: LD_ADDR_VAR 0 14
32398: PUSH
32399: LD_VAR 0 14
32403: PPUSH
32404: LD_VAR 0 14
32408: PUSH
32409: LD_INT 1
32411: PLUS
32412: PPUSH
32413: LD_INT 2
32415: PPUSH
32416: CALL_OW 1
32420: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
32421: LD_VAR 0 9
32425: PPUSH
32426: LD_VAR 0 13
32430: PPUSH
32431: CALL_OW 325
32435: PUSH
32436: LD_VAR 0 10
32440: PPUSH
32441: CALL_OW 255
32445: PPUSH
32446: LD_VAR 0 13
32450: PPUSH
32451: CALL_OW 325
32455: NOT
32456: AND
32457: IFFALSE 32486
// missile := Replace ( missile , missile + 1 , 3 ) ;
32459: LD_ADDR_VAR 0 14
32463: PUSH
32464: LD_VAR 0 14
32468: PPUSH
32469: LD_VAR 0 14
32473: PUSH
32474: LD_INT 1
32476: PLUS
32477: PPUSH
32478: LD_INT 3
32480: PPUSH
32481: CALL_OW 1
32485: ST_TO_ADDR
// if missile < 2 then
32486: LD_VAR 0 14
32490: PUSH
32491: LD_INT 2
32493: LESS
32494: IFFALSE 32498
// exit ;
32496: GO 32720
// x := GetX ( enemy ) ;
32498: LD_ADDR_VAR 0 4
32502: PUSH
32503: LD_VAR 0 10
32507: PPUSH
32508: CALL_OW 250
32512: ST_TO_ADDR
// y := GetY ( enemy ) ;
32513: LD_ADDR_VAR 0 5
32517: PUSH
32518: LD_VAR 0 10
32522: PPUSH
32523: CALL_OW 251
32527: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
32528: LD_ADDR_VAR 0 6
32532: PUSH
32533: LD_VAR 0 4
32537: PUSH
32538: LD_INT 1
32540: NEG
32541: PPUSH
32542: LD_INT 1
32544: PPUSH
32545: CALL_OW 12
32549: PLUS
32550: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
32551: LD_ADDR_VAR 0 7
32555: PUSH
32556: LD_VAR 0 5
32560: PUSH
32561: LD_INT 1
32563: NEG
32564: PPUSH
32565: LD_INT 1
32567: PPUSH
32568: CALL_OW 12
32572: PLUS
32573: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32574: LD_VAR 0 6
32578: PPUSH
32579: LD_VAR 0 7
32583: PPUSH
32584: CALL_OW 488
32588: NOT
32589: IFFALSE 32611
// begin _x := x ;
32591: LD_ADDR_VAR 0 6
32595: PUSH
32596: LD_VAR 0 4
32600: ST_TO_ADDR
// _y := y ;
32601: LD_ADDR_VAR 0 7
32605: PUSH
32606: LD_VAR 0 5
32610: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
32611: LD_ADDR_VAR 0 3
32615: PUSH
32616: LD_INT 1
32618: PPUSH
32619: LD_VAR 0 14
32623: PPUSH
32624: CALL_OW 12
32628: ST_TO_ADDR
// case i of 1 :
32629: LD_VAR 0 3
32633: PUSH
32634: LD_INT 1
32636: DOUBLE
32637: EQUAL
32638: IFTRUE 32642
32640: GO 32659
32642: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
32643: LD_VAR 0 1
32647: PPUSH
32648: LD_VAR 0 10
32652: PPUSH
32653: CALL_OW 115
32657: GO 32720
32659: LD_INT 2
32661: DOUBLE
32662: EQUAL
32663: IFTRUE 32667
32665: GO 32689
32667: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
32668: LD_VAR 0 1
32672: PPUSH
32673: LD_VAR 0 6
32677: PPUSH
32678: LD_VAR 0 7
32682: PPUSH
32683: CALL_OW 153
32687: GO 32720
32689: LD_INT 3
32691: DOUBLE
32692: EQUAL
32693: IFTRUE 32697
32695: GO 32719
32697: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
32698: LD_VAR 0 1
32702: PPUSH
32703: LD_VAR 0 6
32707: PPUSH
32708: LD_VAR 0 7
32712: PPUSH
32713: CALL_OW 154
32717: GO 32720
32719: POP
// end ;
32720: LD_VAR 0 2
32724: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
32725: LD_INT 0
32727: PPUSH
32728: PPUSH
32729: PPUSH
32730: PPUSH
32731: PPUSH
32732: PPUSH
// if not unit or not building then
32733: LD_VAR 0 1
32737: NOT
32738: PUSH
32739: LD_VAR 0 2
32743: NOT
32744: OR
32745: IFFALSE 32749
// exit ;
32747: GO 32907
// x := GetX ( building ) ;
32749: LD_ADDR_VAR 0 5
32753: PUSH
32754: LD_VAR 0 2
32758: PPUSH
32759: CALL_OW 250
32763: ST_TO_ADDR
// y := GetY ( building ) ;
32764: LD_ADDR_VAR 0 6
32768: PUSH
32769: LD_VAR 0 2
32773: PPUSH
32774: CALL_OW 251
32778: ST_TO_ADDR
// for i = 0 to 5 do
32779: LD_ADDR_VAR 0 4
32783: PUSH
32784: DOUBLE
32785: LD_INT 0
32787: DEC
32788: ST_TO_ADDR
32789: LD_INT 5
32791: PUSH
32792: FOR_TO
32793: IFFALSE 32905
// begin _x := ShiftX ( x , i , 3 ) ;
32795: LD_ADDR_VAR 0 7
32799: PUSH
32800: LD_VAR 0 5
32804: PPUSH
32805: LD_VAR 0 4
32809: PPUSH
32810: LD_INT 3
32812: PPUSH
32813: CALL_OW 272
32817: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
32818: LD_ADDR_VAR 0 8
32822: PUSH
32823: LD_VAR 0 6
32827: PPUSH
32828: LD_VAR 0 4
32832: PPUSH
32833: LD_INT 3
32835: PPUSH
32836: CALL_OW 273
32840: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32841: LD_VAR 0 7
32845: PPUSH
32846: LD_VAR 0 8
32850: PPUSH
32851: CALL_OW 488
32855: NOT
32856: IFFALSE 32860
// continue ;
32858: GO 32792
// if HexInfo ( _x , _y ) = 0 then
32860: LD_VAR 0 7
32864: PPUSH
32865: LD_VAR 0 8
32869: PPUSH
32870: CALL_OW 428
32874: PUSH
32875: LD_INT 0
32877: EQUAL
32878: IFFALSE 32903
// begin ComMoveXY ( unit , _x , _y ) ;
32880: LD_VAR 0 1
32884: PPUSH
32885: LD_VAR 0 7
32889: PPUSH
32890: LD_VAR 0 8
32894: PPUSH
32895: CALL_OW 111
// exit ;
32899: POP
32900: POP
32901: GO 32907
// end ; end ;
32903: GO 32792
32905: POP
32906: POP
// end ;
32907: LD_VAR 0 3
32911: RET
// export function ScanBase ( side , base_area ) ; begin
32912: LD_INT 0
32914: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
32915: LD_ADDR_VAR 0 3
32919: PUSH
32920: LD_VAR 0 2
32924: PPUSH
32925: LD_INT 81
32927: PUSH
32928: LD_VAR 0 1
32932: PUSH
32933: EMPTY
32934: LIST
32935: LIST
32936: PPUSH
32937: CALL_OW 70
32941: ST_TO_ADDR
// end ;
32942: LD_VAR 0 3
32946: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
32947: LD_INT 0
32949: PPUSH
32950: PPUSH
32951: PPUSH
32952: PPUSH
// result := false ;
32953: LD_ADDR_VAR 0 2
32957: PUSH
32958: LD_INT 0
32960: ST_TO_ADDR
// side := GetSide ( unit ) ;
32961: LD_ADDR_VAR 0 3
32965: PUSH
32966: LD_VAR 0 1
32970: PPUSH
32971: CALL_OW 255
32975: ST_TO_ADDR
// nat := GetNation ( unit ) ;
32976: LD_ADDR_VAR 0 4
32980: PUSH
32981: LD_VAR 0 1
32985: PPUSH
32986: CALL_OW 248
32990: ST_TO_ADDR
// case nat of 1 :
32991: LD_VAR 0 4
32995: PUSH
32996: LD_INT 1
32998: DOUBLE
32999: EQUAL
33000: IFTRUE 33004
33002: GO 33015
33004: POP
// tech := tech_lassight ; 2 :
33005: LD_ADDR_VAR 0 5
33009: PUSH
33010: LD_INT 12
33012: ST_TO_ADDR
33013: GO 33054
33015: LD_INT 2
33017: DOUBLE
33018: EQUAL
33019: IFTRUE 33023
33021: GO 33034
33023: POP
// tech := tech_mortar ; 3 :
33024: LD_ADDR_VAR 0 5
33028: PUSH
33029: LD_INT 41
33031: ST_TO_ADDR
33032: GO 33054
33034: LD_INT 3
33036: DOUBLE
33037: EQUAL
33038: IFTRUE 33042
33040: GO 33053
33042: POP
// tech := tech_bazooka ; end ;
33043: LD_ADDR_VAR 0 5
33047: PUSH
33048: LD_INT 44
33050: ST_TO_ADDR
33051: GO 33054
33053: POP
// if Researched ( side , tech ) then
33054: LD_VAR 0 3
33058: PPUSH
33059: LD_VAR 0 5
33063: PPUSH
33064: CALL_OW 325
33068: IFFALSE 33095
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33070: LD_ADDR_VAR 0 2
33074: PUSH
33075: LD_INT 5
33077: PUSH
33078: LD_INT 8
33080: PUSH
33081: LD_INT 9
33083: PUSH
33084: EMPTY
33085: LIST
33086: LIST
33087: LIST
33088: PUSH
33089: LD_VAR 0 4
33093: ARRAY
33094: ST_TO_ADDR
// end ;
33095: LD_VAR 0 2
33099: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33100: LD_INT 0
33102: PPUSH
33103: PPUSH
33104: PPUSH
// if not mines then
33105: LD_VAR 0 2
33109: NOT
33110: IFFALSE 33114
// exit ;
33112: GO 33258
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33114: LD_ADDR_VAR 0 5
33118: PUSH
33119: LD_INT 81
33121: PUSH
33122: LD_VAR 0 1
33126: PUSH
33127: EMPTY
33128: LIST
33129: LIST
33130: PUSH
33131: LD_INT 3
33133: PUSH
33134: LD_INT 21
33136: PUSH
33137: LD_INT 3
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: PUSH
33144: EMPTY
33145: LIST
33146: LIST
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: PPUSH
33152: CALL_OW 69
33156: ST_TO_ADDR
// for i in mines do
33157: LD_ADDR_VAR 0 4
33161: PUSH
33162: LD_VAR 0 2
33166: PUSH
33167: FOR_IN
33168: IFFALSE 33256
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33170: LD_VAR 0 4
33174: PUSH
33175: LD_INT 1
33177: ARRAY
33178: PPUSH
33179: LD_VAR 0 4
33183: PUSH
33184: LD_INT 2
33186: ARRAY
33187: PPUSH
33188: CALL_OW 458
33192: NOT
33193: IFFALSE 33197
// continue ;
33195: GO 33167
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33197: LD_VAR 0 4
33201: PUSH
33202: LD_INT 1
33204: ARRAY
33205: PPUSH
33206: LD_VAR 0 4
33210: PUSH
33211: LD_INT 2
33213: ARRAY
33214: PPUSH
33215: CALL_OW 428
33219: PUSH
33220: LD_VAR 0 5
33224: IN
33225: IFFALSE 33254
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33227: LD_VAR 0 4
33231: PUSH
33232: LD_INT 1
33234: ARRAY
33235: PPUSH
33236: LD_VAR 0 4
33240: PUSH
33241: LD_INT 2
33243: ARRAY
33244: PPUSH
33245: LD_VAR 0 1
33249: PPUSH
33250: CALL_OW 456
// end ;
33254: GO 33167
33256: POP
33257: POP
// end ;
33258: LD_VAR 0 3
33262: RET
// export function Count ( array ) ; var i ; begin
33263: LD_INT 0
33265: PPUSH
33266: PPUSH
// result := 0 ;
33267: LD_ADDR_VAR 0 2
33271: PUSH
33272: LD_INT 0
33274: ST_TO_ADDR
// for i in array do
33275: LD_ADDR_VAR 0 3
33279: PUSH
33280: LD_VAR 0 1
33284: PUSH
33285: FOR_IN
33286: IFFALSE 33310
// if i then
33288: LD_VAR 0 3
33292: IFFALSE 33308
// result := result + 1 ;
33294: LD_ADDR_VAR 0 2
33298: PUSH
33299: LD_VAR 0 2
33303: PUSH
33304: LD_INT 1
33306: PLUS
33307: ST_TO_ADDR
33308: GO 33285
33310: POP
33311: POP
// end ;
33312: LD_VAR 0 2
33316: RET
// export function IsEmpty ( building ) ; begin
33317: LD_INT 0
33319: PPUSH
// if not building then
33320: LD_VAR 0 1
33324: NOT
33325: IFFALSE 33329
// exit ;
33327: GO 33372
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33329: LD_ADDR_VAR 0 2
33333: PUSH
33334: LD_VAR 0 1
33338: PUSH
33339: LD_INT 22
33341: PUSH
33342: LD_VAR 0 1
33346: PPUSH
33347: CALL_OW 255
33351: PUSH
33352: EMPTY
33353: LIST
33354: LIST
33355: PUSH
33356: LD_INT 58
33358: PUSH
33359: EMPTY
33360: LIST
33361: PUSH
33362: EMPTY
33363: LIST
33364: LIST
33365: PPUSH
33366: CALL_OW 69
33370: IN
33371: ST_TO_ADDR
// end ;
33372: LD_VAR 0 2
33376: RET
// export function IsNotFull ( building ) ; begin
33377: LD_INT 0
33379: PPUSH
// if not building then
33380: LD_VAR 0 1
33384: NOT
33385: IFFALSE 33389
// exit ;
33387: GO 33408
// result := UnitsInside ( building ) < 6 ;
33389: LD_ADDR_VAR 0 2
33393: PUSH
33394: LD_VAR 0 1
33398: PPUSH
33399: CALL_OW 313
33403: PUSH
33404: LD_INT 6
33406: LESS
33407: ST_TO_ADDR
// end ;
33408: LD_VAR 0 2
33412: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
33413: LD_INT 0
33415: PPUSH
33416: PPUSH
33417: PPUSH
33418: PPUSH
// tmp := [ ] ;
33419: LD_ADDR_VAR 0 3
33423: PUSH
33424: EMPTY
33425: ST_TO_ADDR
// list := [ ] ;
33426: LD_ADDR_VAR 0 5
33430: PUSH
33431: EMPTY
33432: ST_TO_ADDR
// for i = 16 to 25 do
33433: LD_ADDR_VAR 0 4
33437: PUSH
33438: DOUBLE
33439: LD_INT 16
33441: DEC
33442: ST_TO_ADDR
33443: LD_INT 25
33445: PUSH
33446: FOR_TO
33447: IFFALSE 33520
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
33449: LD_ADDR_VAR 0 3
33453: PUSH
33454: LD_VAR 0 3
33458: PUSH
33459: LD_INT 22
33461: PUSH
33462: LD_VAR 0 1
33466: PPUSH
33467: CALL_OW 255
33471: PUSH
33472: EMPTY
33473: LIST
33474: LIST
33475: PUSH
33476: LD_INT 91
33478: PUSH
33479: LD_VAR 0 1
33483: PUSH
33484: LD_INT 6
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: LIST
33491: PUSH
33492: LD_INT 30
33494: PUSH
33495: LD_VAR 0 4
33499: PUSH
33500: EMPTY
33501: LIST
33502: LIST
33503: PUSH
33504: EMPTY
33505: LIST
33506: LIST
33507: LIST
33508: PUSH
33509: EMPTY
33510: LIST
33511: PPUSH
33512: CALL_OW 69
33516: ADD
33517: ST_TO_ADDR
33518: GO 33446
33520: POP
33521: POP
// for i = 1 to tmp do
33522: LD_ADDR_VAR 0 4
33526: PUSH
33527: DOUBLE
33528: LD_INT 1
33530: DEC
33531: ST_TO_ADDR
33532: LD_VAR 0 3
33536: PUSH
33537: FOR_TO
33538: IFFALSE 33626
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
33540: LD_ADDR_VAR 0 5
33544: PUSH
33545: LD_VAR 0 5
33549: PUSH
33550: LD_VAR 0 3
33554: PUSH
33555: LD_VAR 0 4
33559: ARRAY
33560: PPUSH
33561: CALL_OW 266
33565: PUSH
33566: LD_VAR 0 3
33570: PUSH
33571: LD_VAR 0 4
33575: ARRAY
33576: PPUSH
33577: CALL_OW 250
33581: PUSH
33582: LD_VAR 0 3
33586: PUSH
33587: LD_VAR 0 4
33591: ARRAY
33592: PPUSH
33593: CALL_OW 251
33597: PUSH
33598: LD_VAR 0 3
33602: PUSH
33603: LD_VAR 0 4
33607: ARRAY
33608: PPUSH
33609: CALL_OW 254
33613: PUSH
33614: EMPTY
33615: LIST
33616: LIST
33617: LIST
33618: LIST
33619: PUSH
33620: EMPTY
33621: LIST
33622: ADD
33623: ST_TO_ADDR
33624: GO 33537
33626: POP
33627: POP
// result := list ;
33628: LD_ADDR_VAR 0 2
33632: PUSH
33633: LD_VAR 0 5
33637: ST_TO_ADDR
// end ;
33638: LD_VAR 0 2
33642: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
33643: LD_INT 0
33645: PPUSH
33646: PPUSH
33647: PPUSH
33648: PPUSH
33649: PPUSH
33650: PPUSH
33651: PPUSH
// if not factory then
33652: LD_VAR 0 1
33656: NOT
33657: IFFALSE 33661
// exit ;
33659: GO 34254
// if control = control_apeman then
33661: LD_VAR 0 4
33665: PUSH
33666: LD_INT 5
33668: EQUAL
33669: IFFALSE 33778
// begin tmp := UnitsInside ( factory ) ;
33671: LD_ADDR_VAR 0 8
33675: PUSH
33676: LD_VAR 0 1
33680: PPUSH
33681: CALL_OW 313
33685: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
33686: LD_VAR 0 8
33690: PPUSH
33691: LD_INT 25
33693: PUSH
33694: LD_INT 12
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: PPUSH
33701: CALL_OW 72
33705: NOT
33706: IFFALSE 33716
// control := control_manual ;
33708: LD_ADDR_VAR 0 4
33712: PUSH
33713: LD_INT 1
33715: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
33716: LD_ADDR_VAR 0 8
33720: PUSH
33721: LD_VAR 0 1
33725: PPUSH
33726: CALL 33413 0 1
33730: ST_TO_ADDR
// if tmp then
33731: LD_VAR 0 8
33735: IFFALSE 33778
// begin for i in tmp do
33737: LD_ADDR_VAR 0 7
33741: PUSH
33742: LD_VAR 0 8
33746: PUSH
33747: FOR_IN
33748: IFFALSE 33776
// if i [ 1 ] = b_ext_radio then
33750: LD_VAR 0 7
33754: PUSH
33755: LD_INT 1
33757: ARRAY
33758: PUSH
33759: LD_INT 22
33761: EQUAL
33762: IFFALSE 33774
// begin control := control_remote ;
33764: LD_ADDR_VAR 0 4
33768: PUSH
33769: LD_INT 2
33771: ST_TO_ADDR
// break ;
33772: GO 33776
// end ;
33774: GO 33747
33776: POP
33777: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
33778: LD_VAR 0 1
33782: PPUSH
33783: LD_VAR 0 2
33787: PPUSH
33788: LD_VAR 0 3
33792: PPUSH
33793: LD_VAR 0 4
33797: PPUSH
33798: LD_VAR 0 5
33802: PPUSH
33803: CALL_OW 448
33807: IFFALSE 33842
// begin result := [ chassis , engine , control , weapon ] ;
33809: LD_ADDR_VAR 0 6
33813: PUSH
33814: LD_VAR 0 2
33818: PUSH
33819: LD_VAR 0 3
33823: PUSH
33824: LD_VAR 0 4
33828: PUSH
33829: LD_VAR 0 5
33833: PUSH
33834: EMPTY
33835: LIST
33836: LIST
33837: LIST
33838: LIST
33839: ST_TO_ADDR
// exit ;
33840: GO 34254
// end ; _chassis := AvailableChassisList ( factory ) ;
33842: LD_ADDR_VAR 0 9
33846: PUSH
33847: LD_VAR 0 1
33851: PPUSH
33852: CALL_OW 475
33856: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
33857: LD_ADDR_VAR 0 11
33861: PUSH
33862: LD_VAR 0 1
33866: PPUSH
33867: CALL_OW 476
33871: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
33872: LD_ADDR_VAR 0 12
33876: PUSH
33877: LD_VAR 0 1
33881: PPUSH
33882: CALL_OW 477
33886: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
33887: LD_ADDR_VAR 0 10
33891: PUSH
33892: LD_VAR 0 1
33896: PPUSH
33897: CALL_OW 478
33901: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
33902: LD_VAR 0 9
33906: NOT
33907: PUSH
33908: LD_VAR 0 11
33912: NOT
33913: OR
33914: PUSH
33915: LD_VAR 0 12
33919: NOT
33920: OR
33921: PUSH
33922: LD_VAR 0 10
33926: NOT
33927: OR
33928: IFFALSE 33963
// begin result := [ chassis , engine , control , weapon ] ;
33930: LD_ADDR_VAR 0 6
33934: PUSH
33935: LD_VAR 0 2
33939: PUSH
33940: LD_VAR 0 3
33944: PUSH
33945: LD_VAR 0 4
33949: PUSH
33950: LD_VAR 0 5
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: ST_TO_ADDR
// exit ;
33961: GO 34254
// end ; if not chassis in _chassis then
33963: LD_VAR 0 2
33967: PUSH
33968: LD_VAR 0 9
33972: IN
33973: NOT
33974: IFFALSE 34000
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
33976: LD_ADDR_VAR 0 2
33980: PUSH
33981: LD_VAR 0 9
33985: PUSH
33986: LD_INT 1
33988: PPUSH
33989: LD_VAR 0 9
33993: PPUSH
33994: CALL_OW 12
33998: ARRAY
33999: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34000: LD_VAR 0 2
34004: PPUSH
34005: LD_VAR 0 3
34009: PPUSH
34010: CALL 34259 0 2
34014: NOT
34015: IFFALSE 34074
// repeat engine := _engine [ 1 ] ;
34017: LD_ADDR_VAR 0 3
34021: PUSH
34022: LD_VAR 0 11
34026: PUSH
34027: LD_INT 1
34029: ARRAY
34030: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34031: LD_ADDR_VAR 0 11
34035: PUSH
34036: LD_VAR 0 11
34040: PPUSH
34041: LD_INT 1
34043: PPUSH
34044: CALL_OW 3
34048: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34049: LD_VAR 0 2
34053: PPUSH
34054: LD_VAR 0 3
34058: PPUSH
34059: CALL 34259 0 2
34063: PUSH
34064: LD_VAR 0 11
34068: PUSH
34069: EMPTY
34070: EQUAL
34071: OR
34072: IFFALSE 34017
// if not control in _control then
34074: LD_VAR 0 4
34078: PUSH
34079: LD_VAR 0 12
34083: IN
34084: NOT
34085: IFFALSE 34111
// control := _control [ rand ( 1 , _control ) ] ;
34087: LD_ADDR_VAR 0 4
34091: PUSH
34092: LD_VAR 0 12
34096: PUSH
34097: LD_INT 1
34099: PPUSH
34100: LD_VAR 0 12
34104: PPUSH
34105: CALL_OW 12
34109: ARRAY
34110: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34111: LD_VAR 0 2
34115: PPUSH
34116: LD_VAR 0 5
34120: PPUSH
34121: CALL 34479 0 2
34125: NOT
34126: IFFALSE 34185
// repeat weapon := _weapon [ 1 ] ;
34128: LD_ADDR_VAR 0 5
34132: PUSH
34133: LD_VAR 0 10
34137: PUSH
34138: LD_INT 1
34140: ARRAY
34141: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34142: LD_ADDR_VAR 0 10
34146: PUSH
34147: LD_VAR 0 10
34151: PPUSH
34152: LD_INT 1
34154: PPUSH
34155: CALL_OW 3
34159: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34160: LD_VAR 0 2
34164: PPUSH
34165: LD_VAR 0 5
34169: PPUSH
34170: CALL 34479 0 2
34174: PUSH
34175: LD_VAR 0 10
34179: PUSH
34180: EMPTY
34181: EQUAL
34182: OR
34183: IFFALSE 34128
// result := [ ] ;
34185: LD_ADDR_VAR 0 6
34189: PUSH
34190: EMPTY
34191: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34192: LD_VAR 0 1
34196: PPUSH
34197: LD_VAR 0 2
34201: PPUSH
34202: LD_VAR 0 3
34206: PPUSH
34207: LD_VAR 0 4
34211: PPUSH
34212: LD_VAR 0 5
34216: PPUSH
34217: CALL_OW 448
34221: IFFALSE 34254
// result := [ chassis , engine , control , weapon ] ;
34223: LD_ADDR_VAR 0 6
34227: PUSH
34228: LD_VAR 0 2
34232: PUSH
34233: LD_VAR 0 3
34237: PUSH
34238: LD_VAR 0 4
34242: PUSH
34243: LD_VAR 0 5
34247: PUSH
34248: EMPTY
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: ST_TO_ADDR
// end ;
34254: LD_VAR 0 6
34258: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34259: LD_INT 0
34261: PPUSH
// if not chassis or not engine then
34262: LD_VAR 0 1
34266: NOT
34267: PUSH
34268: LD_VAR 0 2
34272: NOT
34273: OR
34274: IFFALSE 34278
// exit ;
34276: GO 34474
// case engine of engine_solar :
34278: LD_VAR 0 2
34282: PUSH
34283: LD_INT 2
34285: DOUBLE
34286: EQUAL
34287: IFTRUE 34291
34289: GO 34329
34291: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34292: LD_ADDR_VAR 0 3
34296: PUSH
34297: LD_INT 11
34299: PUSH
34300: LD_INT 12
34302: PUSH
34303: LD_INT 13
34305: PUSH
34306: LD_INT 14
34308: PUSH
34309: LD_INT 1
34311: PUSH
34312: LD_INT 2
34314: PUSH
34315: LD_INT 3
34317: PUSH
34318: EMPTY
34319: LIST
34320: LIST
34321: LIST
34322: LIST
34323: LIST
34324: LIST
34325: LIST
34326: ST_TO_ADDR
34327: GO 34458
34329: LD_INT 1
34331: DOUBLE
34332: EQUAL
34333: IFTRUE 34337
34335: GO 34399
34337: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34338: LD_ADDR_VAR 0 3
34342: PUSH
34343: LD_INT 11
34345: PUSH
34346: LD_INT 12
34348: PUSH
34349: LD_INT 13
34351: PUSH
34352: LD_INT 14
34354: PUSH
34355: LD_INT 1
34357: PUSH
34358: LD_INT 2
34360: PUSH
34361: LD_INT 3
34363: PUSH
34364: LD_INT 4
34366: PUSH
34367: LD_INT 5
34369: PUSH
34370: LD_INT 21
34372: PUSH
34373: LD_INT 23
34375: PUSH
34376: LD_INT 22
34378: PUSH
34379: LD_INT 24
34381: PUSH
34382: EMPTY
34383: LIST
34384: LIST
34385: LIST
34386: LIST
34387: LIST
34388: LIST
34389: LIST
34390: LIST
34391: LIST
34392: LIST
34393: LIST
34394: LIST
34395: LIST
34396: ST_TO_ADDR
34397: GO 34458
34399: LD_INT 3
34401: DOUBLE
34402: EQUAL
34403: IFTRUE 34407
34405: GO 34457
34407: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34408: LD_ADDR_VAR 0 3
34412: PUSH
34413: LD_INT 13
34415: PUSH
34416: LD_INT 14
34418: PUSH
34419: LD_INT 2
34421: PUSH
34422: LD_INT 3
34424: PUSH
34425: LD_INT 4
34427: PUSH
34428: LD_INT 5
34430: PUSH
34431: LD_INT 21
34433: PUSH
34434: LD_INT 22
34436: PUSH
34437: LD_INT 23
34439: PUSH
34440: LD_INT 24
34442: PUSH
34443: EMPTY
34444: LIST
34445: LIST
34446: LIST
34447: LIST
34448: LIST
34449: LIST
34450: LIST
34451: LIST
34452: LIST
34453: LIST
34454: ST_TO_ADDR
34455: GO 34458
34457: POP
// result := ( chassis in result ) ;
34458: LD_ADDR_VAR 0 3
34462: PUSH
34463: LD_VAR 0 1
34467: PUSH
34468: LD_VAR 0 3
34472: IN
34473: ST_TO_ADDR
// end ;
34474: LD_VAR 0 3
34478: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
34479: LD_INT 0
34481: PPUSH
// if not chassis or not weapon then
34482: LD_VAR 0 1
34486: NOT
34487: PUSH
34488: LD_VAR 0 2
34492: NOT
34493: OR
34494: IFFALSE 34498
// exit ;
34496: GO 35560
// case weapon of us_machine_gun :
34498: LD_VAR 0 2
34502: PUSH
34503: LD_INT 2
34505: DOUBLE
34506: EQUAL
34507: IFTRUE 34511
34509: GO 34541
34511: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
34512: LD_ADDR_VAR 0 3
34516: PUSH
34517: LD_INT 1
34519: PUSH
34520: LD_INT 2
34522: PUSH
34523: LD_INT 3
34525: PUSH
34526: LD_INT 4
34528: PUSH
34529: LD_INT 5
34531: PUSH
34532: EMPTY
34533: LIST
34534: LIST
34535: LIST
34536: LIST
34537: LIST
34538: ST_TO_ADDR
34539: GO 35544
34541: LD_INT 3
34543: DOUBLE
34544: EQUAL
34545: IFTRUE 34549
34547: GO 34579
34549: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
34550: LD_ADDR_VAR 0 3
34554: PUSH
34555: LD_INT 1
34557: PUSH
34558: LD_INT 2
34560: PUSH
34561: LD_INT 3
34563: PUSH
34564: LD_INT 4
34566: PUSH
34567: LD_INT 5
34569: PUSH
34570: EMPTY
34571: LIST
34572: LIST
34573: LIST
34574: LIST
34575: LIST
34576: ST_TO_ADDR
34577: GO 35544
34579: LD_INT 11
34581: DOUBLE
34582: EQUAL
34583: IFTRUE 34587
34585: GO 34617
34587: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
34588: LD_ADDR_VAR 0 3
34592: PUSH
34593: LD_INT 1
34595: PUSH
34596: LD_INT 2
34598: PUSH
34599: LD_INT 3
34601: PUSH
34602: LD_INT 4
34604: PUSH
34605: LD_INT 5
34607: PUSH
34608: EMPTY
34609: LIST
34610: LIST
34611: LIST
34612: LIST
34613: LIST
34614: ST_TO_ADDR
34615: GO 35544
34617: LD_INT 4
34619: DOUBLE
34620: EQUAL
34621: IFTRUE 34625
34623: GO 34651
34625: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
34626: LD_ADDR_VAR 0 3
34630: PUSH
34631: LD_INT 2
34633: PUSH
34634: LD_INT 3
34636: PUSH
34637: LD_INT 4
34639: PUSH
34640: LD_INT 5
34642: PUSH
34643: EMPTY
34644: LIST
34645: LIST
34646: LIST
34647: LIST
34648: ST_TO_ADDR
34649: GO 35544
34651: LD_INT 5
34653: DOUBLE
34654: EQUAL
34655: IFTRUE 34659
34657: GO 34685
34659: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
34660: LD_ADDR_VAR 0 3
34664: PUSH
34665: LD_INT 2
34667: PUSH
34668: LD_INT 3
34670: PUSH
34671: LD_INT 4
34673: PUSH
34674: LD_INT 5
34676: PUSH
34677: EMPTY
34678: LIST
34679: LIST
34680: LIST
34681: LIST
34682: ST_TO_ADDR
34683: GO 35544
34685: LD_INT 9
34687: DOUBLE
34688: EQUAL
34689: IFTRUE 34693
34691: GO 34719
34693: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
34694: LD_ADDR_VAR 0 3
34698: PUSH
34699: LD_INT 2
34701: PUSH
34702: LD_INT 3
34704: PUSH
34705: LD_INT 4
34707: PUSH
34708: LD_INT 5
34710: PUSH
34711: EMPTY
34712: LIST
34713: LIST
34714: LIST
34715: LIST
34716: ST_TO_ADDR
34717: GO 35544
34719: LD_INT 7
34721: DOUBLE
34722: EQUAL
34723: IFTRUE 34727
34725: GO 34753
34727: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
34728: LD_ADDR_VAR 0 3
34732: PUSH
34733: LD_INT 2
34735: PUSH
34736: LD_INT 3
34738: PUSH
34739: LD_INT 4
34741: PUSH
34742: LD_INT 5
34744: PUSH
34745: EMPTY
34746: LIST
34747: LIST
34748: LIST
34749: LIST
34750: ST_TO_ADDR
34751: GO 35544
34753: LD_INT 12
34755: DOUBLE
34756: EQUAL
34757: IFTRUE 34761
34759: GO 34787
34761: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
34762: LD_ADDR_VAR 0 3
34766: PUSH
34767: LD_INT 2
34769: PUSH
34770: LD_INT 3
34772: PUSH
34773: LD_INT 4
34775: PUSH
34776: LD_INT 5
34778: PUSH
34779: EMPTY
34780: LIST
34781: LIST
34782: LIST
34783: LIST
34784: ST_TO_ADDR
34785: GO 35544
34787: LD_INT 13
34789: DOUBLE
34790: EQUAL
34791: IFTRUE 34795
34793: GO 34821
34795: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
34796: LD_ADDR_VAR 0 3
34800: PUSH
34801: LD_INT 2
34803: PUSH
34804: LD_INT 3
34806: PUSH
34807: LD_INT 4
34809: PUSH
34810: LD_INT 5
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: LIST
34817: LIST
34818: ST_TO_ADDR
34819: GO 35544
34821: LD_INT 14
34823: DOUBLE
34824: EQUAL
34825: IFTRUE 34829
34827: GO 34847
34829: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
34830: LD_ADDR_VAR 0 3
34834: PUSH
34835: LD_INT 4
34837: PUSH
34838: LD_INT 5
34840: PUSH
34841: EMPTY
34842: LIST
34843: LIST
34844: ST_TO_ADDR
34845: GO 35544
34847: LD_INT 6
34849: DOUBLE
34850: EQUAL
34851: IFTRUE 34855
34853: GO 34873
34855: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
34856: LD_ADDR_VAR 0 3
34860: PUSH
34861: LD_INT 4
34863: PUSH
34864: LD_INT 5
34866: PUSH
34867: EMPTY
34868: LIST
34869: LIST
34870: ST_TO_ADDR
34871: GO 35544
34873: LD_INT 10
34875: DOUBLE
34876: EQUAL
34877: IFTRUE 34881
34879: GO 34899
34881: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
34882: LD_ADDR_VAR 0 3
34886: PUSH
34887: LD_INT 4
34889: PUSH
34890: LD_INT 5
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: ST_TO_ADDR
34897: GO 35544
34899: LD_INT 22
34901: DOUBLE
34902: EQUAL
34903: IFTRUE 34907
34905: GO 34933
34907: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
34908: LD_ADDR_VAR 0 3
34912: PUSH
34913: LD_INT 11
34915: PUSH
34916: LD_INT 12
34918: PUSH
34919: LD_INT 13
34921: PUSH
34922: LD_INT 14
34924: PUSH
34925: EMPTY
34926: LIST
34927: LIST
34928: LIST
34929: LIST
34930: ST_TO_ADDR
34931: GO 35544
34933: LD_INT 23
34935: DOUBLE
34936: EQUAL
34937: IFTRUE 34941
34939: GO 34967
34941: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
34942: LD_ADDR_VAR 0 3
34946: PUSH
34947: LD_INT 11
34949: PUSH
34950: LD_INT 12
34952: PUSH
34953: LD_INT 13
34955: PUSH
34956: LD_INT 14
34958: PUSH
34959: EMPTY
34960: LIST
34961: LIST
34962: LIST
34963: LIST
34964: ST_TO_ADDR
34965: GO 35544
34967: LD_INT 24
34969: DOUBLE
34970: EQUAL
34971: IFTRUE 34975
34973: GO 35001
34975: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
34976: LD_ADDR_VAR 0 3
34980: PUSH
34981: LD_INT 11
34983: PUSH
34984: LD_INT 12
34986: PUSH
34987: LD_INT 13
34989: PUSH
34990: LD_INT 14
34992: PUSH
34993: EMPTY
34994: LIST
34995: LIST
34996: LIST
34997: LIST
34998: ST_TO_ADDR
34999: GO 35544
35001: LD_INT 30
35003: DOUBLE
35004: EQUAL
35005: IFTRUE 35009
35007: GO 35035
35009: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35010: LD_ADDR_VAR 0 3
35014: PUSH
35015: LD_INT 11
35017: PUSH
35018: LD_INT 12
35020: PUSH
35021: LD_INT 13
35023: PUSH
35024: LD_INT 14
35026: PUSH
35027: EMPTY
35028: LIST
35029: LIST
35030: LIST
35031: LIST
35032: ST_TO_ADDR
35033: GO 35544
35035: LD_INT 25
35037: DOUBLE
35038: EQUAL
35039: IFTRUE 35043
35041: GO 35061
35043: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35044: LD_ADDR_VAR 0 3
35048: PUSH
35049: LD_INT 13
35051: PUSH
35052: LD_INT 14
35054: PUSH
35055: EMPTY
35056: LIST
35057: LIST
35058: ST_TO_ADDR
35059: GO 35544
35061: LD_INT 27
35063: DOUBLE
35064: EQUAL
35065: IFTRUE 35069
35067: GO 35087
35069: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
35070: LD_ADDR_VAR 0 3
35074: PUSH
35075: LD_INT 13
35077: PUSH
35078: LD_INT 14
35080: PUSH
35081: EMPTY
35082: LIST
35083: LIST
35084: ST_TO_ADDR
35085: GO 35544
35087: LD_EXP 26
35091: DOUBLE
35092: EQUAL
35093: IFTRUE 35097
35095: GO 35123
35097: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35098: LD_ADDR_VAR 0 3
35102: PUSH
35103: LD_INT 11
35105: PUSH
35106: LD_INT 12
35108: PUSH
35109: LD_INT 13
35111: PUSH
35112: LD_INT 14
35114: PUSH
35115: EMPTY
35116: LIST
35117: LIST
35118: LIST
35119: LIST
35120: ST_TO_ADDR
35121: GO 35544
35123: LD_INT 28
35125: DOUBLE
35126: EQUAL
35127: IFTRUE 35131
35129: GO 35149
35131: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35132: LD_ADDR_VAR 0 3
35136: PUSH
35137: LD_INT 13
35139: PUSH
35140: LD_INT 14
35142: PUSH
35143: EMPTY
35144: LIST
35145: LIST
35146: ST_TO_ADDR
35147: GO 35544
35149: LD_INT 29
35151: DOUBLE
35152: EQUAL
35153: IFTRUE 35157
35155: GO 35175
35157: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35158: LD_ADDR_VAR 0 3
35162: PUSH
35163: LD_INT 13
35165: PUSH
35166: LD_INT 14
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: ST_TO_ADDR
35173: GO 35544
35175: LD_INT 31
35177: DOUBLE
35178: EQUAL
35179: IFTRUE 35183
35181: GO 35201
35183: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35184: LD_ADDR_VAR 0 3
35188: PUSH
35189: LD_INT 13
35191: PUSH
35192: LD_INT 14
35194: PUSH
35195: EMPTY
35196: LIST
35197: LIST
35198: ST_TO_ADDR
35199: GO 35544
35201: LD_INT 26
35203: DOUBLE
35204: EQUAL
35205: IFTRUE 35209
35207: GO 35227
35209: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35210: LD_ADDR_VAR 0 3
35214: PUSH
35215: LD_INT 13
35217: PUSH
35218: LD_INT 14
35220: PUSH
35221: EMPTY
35222: LIST
35223: LIST
35224: ST_TO_ADDR
35225: GO 35544
35227: LD_INT 42
35229: DOUBLE
35230: EQUAL
35231: IFTRUE 35235
35233: GO 35261
35235: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35236: LD_ADDR_VAR 0 3
35240: PUSH
35241: LD_INT 21
35243: PUSH
35244: LD_INT 22
35246: PUSH
35247: LD_INT 23
35249: PUSH
35250: LD_INT 24
35252: PUSH
35253: EMPTY
35254: LIST
35255: LIST
35256: LIST
35257: LIST
35258: ST_TO_ADDR
35259: GO 35544
35261: LD_INT 43
35263: DOUBLE
35264: EQUAL
35265: IFTRUE 35269
35267: GO 35295
35269: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35270: LD_ADDR_VAR 0 3
35274: PUSH
35275: LD_INT 21
35277: PUSH
35278: LD_INT 22
35280: PUSH
35281: LD_INT 23
35283: PUSH
35284: LD_INT 24
35286: PUSH
35287: EMPTY
35288: LIST
35289: LIST
35290: LIST
35291: LIST
35292: ST_TO_ADDR
35293: GO 35544
35295: LD_INT 44
35297: DOUBLE
35298: EQUAL
35299: IFTRUE 35303
35301: GO 35329
35303: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35304: LD_ADDR_VAR 0 3
35308: PUSH
35309: LD_INT 21
35311: PUSH
35312: LD_INT 22
35314: PUSH
35315: LD_INT 23
35317: PUSH
35318: LD_INT 24
35320: PUSH
35321: EMPTY
35322: LIST
35323: LIST
35324: LIST
35325: LIST
35326: ST_TO_ADDR
35327: GO 35544
35329: LD_INT 45
35331: DOUBLE
35332: EQUAL
35333: IFTRUE 35337
35335: GO 35363
35337: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35338: LD_ADDR_VAR 0 3
35342: PUSH
35343: LD_INT 21
35345: PUSH
35346: LD_INT 22
35348: PUSH
35349: LD_INT 23
35351: PUSH
35352: LD_INT 24
35354: PUSH
35355: EMPTY
35356: LIST
35357: LIST
35358: LIST
35359: LIST
35360: ST_TO_ADDR
35361: GO 35544
35363: LD_INT 49
35365: DOUBLE
35366: EQUAL
35367: IFTRUE 35371
35369: GO 35397
35371: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35372: LD_ADDR_VAR 0 3
35376: PUSH
35377: LD_INT 21
35379: PUSH
35380: LD_INT 22
35382: PUSH
35383: LD_INT 23
35385: PUSH
35386: LD_INT 24
35388: PUSH
35389: EMPTY
35390: LIST
35391: LIST
35392: LIST
35393: LIST
35394: ST_TO_ADDR
35395: GO 35544
35397: LD_INT 51
35399: DOUBLE
35400: EQUAL
35401: IFTRUE 35405
35403: GO 35431
35405: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35406: LD_ADDR_VAR 0 3
35410: PUSH
35411: LD_INT 21
35413: PUSH
35414: LD_INT 22
35416: PUSH
35417: LD_INT 23
35419: PUSH
35420: LD_INT 24
35422: PUSH
35423: EMPTY
35424: LIST
35425: LIST
35426: LIST
35427: LIST
35428: ST_TO_ADDR
35429: GO 35544
35431: LD_INT 52
35433: DOUBLE
35434: EQUAL
35435: IFTRUE 35439
35437: GO 35465
35439: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
35440: LD_ADDR_VAR 0 3
35444: PUSH
35445: LD_INT 21
35447: PUSH
35448: LD_INT 22
35450: PUSH
35451: LD_INT 23
35453: PUSH
35454: LD_INT 24
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: LIST
35461: LIST
35462: ST_TO_ADDR
35463: GO 35544
35465: LD_INT 53
35467: DOUBLE
35468: EQUAL
35469: IFTRUE 35473
35471: GO 35491
35473: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
35474: LD_ADDR_VAR 0 3
35478: PUSH
35479: LD_INT 23
35481: PUSH
35482: LD_INT 24
35484: PUSH
35485: EMPTY
35486: LIST
35487: LIST
35488: ST_TO_ADDR
35489: GO 35544
35491: LD_INT 46
35493: DOUBLE
35494: EQUAL
35495: IFTRUE 35499
35497: GO 35517
35499: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
35500: LD_ADDR_VAR 0 3
35504: PUSH
35505: LD_INT 23
35507: PUSH
35508: LD_INT 24
35510: PUSH
35511: EMPTY
35512: LIST
35513: LIST
35514: ST_TO_ADDR
35515: GO 35544
35517: LD_INT 47
35519: DOUBLE
35520: EQUAL
35521: IFTRUE 35525
35523: GO 35543
35525: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35526: LD_ADDR_VAR 0 3
35530: PUSH
35531: LD_INT 23
35533: PUSH
35534: LD_INT 24
35536: PUSH
35537: EMPTY
35538: LIST
35539: LIST
35540: ST_TO_ADDR
35541: GO 35544
35543: POP
// result := ( chassis in result ) ;
35544: LD_ADDR_VAR 0 3
35548: PUSH
35549: LD_VAR 0 1
35553: PUSH
35554: LD_VAR 0 3
35558: IN
35559: ST_TO_ADDR
// end ;
35560: LD_VAR 0 3
35564: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
35565: LD_INT 0
35567: PPUSH
35568: PPUSH
35569: PPUSH
35570: PPUSH
35571: PPUSH
35572: PPUSH
35573: PPUSH
// result := array ;
35574: LD_ADDR_VAR 0 5
35578: PUSH
35579: LD_VAR 0 1
35583: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
35584: LD_VAR 0 1
35588: NOT
35589: PUSH
35590: LD_VAR 0 2
35594: NOT
35595: OR
35596: PUSH
35597: LD_VAR 0 3
35601: NOT
35602: OR
35603: PUSH
35604: LD_VAR 0 2
35608: PUSH
35609: LD_VAR 0 1
35613: GREATER
35614: OR
35615: PUSH
35616: LD_VAR 0 3
35620: PUSH
35621: LD_VAR 0 1
35625: GREATER
35626: OR
35627: IFFALSE 35631
// exit ;
35629: GO 35927
// if direction then
35631: LD_VAR 0 4
35635: IFFALSE 35699
// begin d := 1 ;
35637: LD_ADDR_VAR 0 9
35641: PUSH
35642: LD_INT 1
35644: ST_TO_ADDR
// if i_from > i_to then
35645: LD_VAR 0 2
35649: PUSH
35650: LD_VAR 0 3
35654: GREATER
35655: IFFALSE 35681
// length := ( array - i_from ) + i_to else
35657: LD_ADDR_VAR 0 11
35661: PUSH
35662: LD_VAR 0 1
35666: PUSH
35667: LD_VAR 0 2
35671: MINUS
35672: PUSH
35673: LD_VAR 0 3
35677: PLUS
35678: ST_TO_ADDR
35679: GO 35697
// length := i_to - i_from ;
35681: LD_ADDR_VAR 0 11
35685: PUSH
35686: LD_VAR 0 3
35690: PUSH
35691: LD_VAR 0 2
35695: MINUS
35696: ST_TO_ADDR
// end else
35697: GO 35760
// begin d := - 1 ;
35699: LD_ADDR_VAR 0 9
35703: PUSH
35704: LD_INT 1
35706: NEG
35707: ST_TO_ADDR
// if i_from > i_to then
35708: LD_VAR 0 2
35712: PUSH
35713: LD_VAR 0 3
35717: GREATER
35718: IFFALSE 35738
// length := i_from - i_to else
35720: LD_ADDR_VAR 0 11
35724: PUSH
35725: LD_VAR 0 2
35729: PUSH
35730: LD_VAR 0 3
35734: MINUS
35735: ST_TO_ADDR
35736: GO 35760
// length := ( array - i_to ) + i_from ;
35738: LD_ADDR_VAR 0 11
35742: PUSH
35743: LD_VAR 0 1
35747: PUSH
35748: LD_VAR 0 3
35752: MINUS
35753: PUSH
35754: LD_VAR 0 2
35758: PLUS
35759: ST_TO_ADDR
// end ; if not length then
35760: LD_VAR 0 11
35764: NOT
35765: IFFALSE 35769
// exit ;
35767: GO 35927
// tmp := array ;
35769: LD_ADDR_VAR 0 10
35773: PUSH
35774: LD_VAR 0 1
35778: ST_TO_ADDR
// for i = 1 to length do
35779: LD_ADDR_VAR 0 6
35783: PUSH
35784: DOUBLE
35785: LD_INT 1
35787: DEC
35788: ST_TO_ADDR
35789: LD_VAR 0 11
35793: PUSH
35794: FOR_TO
35795: IFFALSE 35915
// begin for j = 1 to array do
35797: LD_ADDR_VAR 0 7
35801: PUSH
35802: DOUBLE
35803: LD_INT 1
35805: DEC
35806: ST_TO_ADDR
35807: LD_VAR 0 1
35811: PUSH
35812: FOR_TO
35813: IFFALSE 35901
// begin k := j + d ;
35815: LD_ADDR_VAR 0 8
35819: PUSH
35820: LD_VAR 0 7
35824: PUSH
35825: LD_VAR 0 9
35829: PLUS
35830: ST_TO_ADDR
// if k > array then
35831: LD_VAR 0 8
35835: PUSH
35836: LD_VAR 0 1
35840: GREATER
35841: IFFALSE 35851
// k := 1 ;
35843: LD_ADDR_VAR 0 8
35847: PUSH
35848: LD_INT 1
35850: ST_TO_ADDR
// if not k then
35851: LD_VAR 0 8
35855: NOT
35856: IFFALSE 35868
// k := array ;
35858: LD_ADDR_VAR 0 8
35862: PUSH
35863: LD_VAR 0 1
35867: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
35868: LD_ADDR_VAR 0 10
35872: PUSH
35873: LD_VAR 0 10
35877: PPUSH
35878: LD_VAR 0 8
35882: PPUSH
35883: LD_VAR 0 1
35887: PUSH
35888: LD_VAR 0 7
35892: ARRAY
35893: PPUSH
35894: CALL_OW 1
35898: ST_TO_ADDR
// end ;
35899: GO 35812
35901: POP
35902: POP
// array := tmp ;
35903: LD_ADDR_VAR 0 1
35907: PUSH
35908: LD_VAR 0 10
35912: ST_TO_ADDR
// end ;
35913: GO 35794
35915: POP
35916: POP
// result := array ;
35917: LD_ADDR_VAR 0 5
35921: PUSH
35922: LD_VAR 0 1
35926: ST_TO_ADDR
// end ;
35927: LD_VAR 0 5
35931: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
35932: LD_INT 0
35934: PPUSH
35935: PPUSH
// result := 0 ;
35936: LD_ADDR_VAR 0 3
35940: PUSH
35941: LD_INT 0
35943: ST_TO_ADDR
// if not array or not value in array then
35944: LD_VAR 0 1
35948: NOT
35949: PUSH
35950: LD_VAR 0 2
35954: PUSH
35955: LD_VAR 0 1
35959: IN
35960: NOT
35961: OR
35962: IFFALSE 35966
// exit ;
35964: GO 36020
// for i = 1 to array do
35966: LD_ADDR_VAR 0 4
35970: PUSH
35971: DOUBLE
35972: LD_INT 1
35974: DEC
35975: ST_TO_ADDR
35976: LD_VAR 0 1
35980: PUSH
35981: FOR_TO
35982: IFFALSE 36018
// if value = array [ i ] then
35984: LD_VAR 0 2
35988: PUSH
35989: LD_VAR 0 1
35993: PUSH
35994: LD_VAR 0 4
35998: ARRAY
35999: EQUAL
36000: IFFALSE 36016
// begin result := i ;
36002: LD_ADDR_VAR 0 3
36006: PUSH
36007: LD_VAR 0 4
36011: ST_TO_ADDR
// exit ;
36012: POP
36013: POP
36014: GO 36020
// end ;
36016: GO 35981
36018: POP
36019: POP
// end ;
36020: LD_VAR 0 3
36024: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36025: LD_INT 0
36027: PPUSH
// vc_chassis := chassis ;
36028: LD_ADDR_OWVAR 37
36032: PUSH
36033: LD_VAR 0 1
36037: ST_TO_ADDR
// vc_engine := engine ;
36038: LD_ADDR_OWVAR 39
36042: PUSH
36043: LD_VAR 0 2
36047: ST_TO_ADDR
// vc_control := control ;
36048: LD_ADDR_OWVAR 38
36052: PUSH
36053: LD_VAR 0 3
36057: ST_TO_ADDR
// vc_weapon := weapon ;
36058: LD_ADDR_OWVAR 40
36062: PUSH
36063: LD_VAR 0 4
36067: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36068: LD_ADDR_OWVAR 41
36072: PUSH
36073: LD_VAR 0 5
36077: ST_TO_ADDR
// end ;
36078: LD_VAR 0 6
36082: RET
// export function WantPlant ( unit ) ; var task ; begin
36083: LD_INT 0
36085: PPUSH
36086: PPUSH
// result := false ;
36087: LD_ADDR_VAR 0 2
36091: PUSH
36092: LD_INT 0
36094: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36095: LD_ADDR_VAR 0 3
36099: PUSH
36100: LD_VAR 0 1
36104: PPUSH
36105: CALL_OW 437
36109: ST_TO_ADDR
// if task then
36110: LD_VAR 0 3
36114: IFFALSE 36142
// if task [ 1 ] [ 1 ] = p then
36116: LD_VAR 0 3
36120: PUSH
36121: LD_INT 1
36123: ARRAY
36124: PUSH
36125: LD_INT 1
36127: ARRAY
36128: PUSH
36129: LD_STRING p
36131: EQUAL
36132: IFFALSE 36142
// result := true ;
36134: LD_ADDR_VAR 0 2
36138: PUSH
36139: LD_INT 1
36141: ST_TO_ADDR
// end ;
36142: LD_VAR 0 2
36146: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36147: LD_INT 0
36149: PPUSH
36150: PPUSH
36151: PPUSH
36152: PPUSH
// if pos < 1 then
36153: LD_VAR 0 2
36157: PUSH
36158: LD_INT 1
36160: LESS
36161: IFFALSE 36165
// exit ;
36163: GO 36468
// if pos = 1 then
36165: LD_VAR 0 2
36169: PUSH
36170: LD_INT 1
36172: EQUAL
36173: IFFALSE 36206
// result := Replace ( arr , pos [ 1 ] , value ) else
36175: LD_ADDR_VAR 0 4
36179: PUSH
36180: LD_VAR 0 1
36184: PPUSH
36185: LD_VAR 0 2
36189: PUSH
36190: LD_INT 1
36192: ARRAY
36193: PPUSH
36194: LD_VAR 0 3
36198: PPUSH
36199: CALL_OW 1
36203: ST_TO_ADDR
36204: GO 36468
// begin tmp := arr ;
36206: LD_ADDR_VAR 0 6
36210: PUSH
36211: LD_VAR 0 1
36215: ST_TO_ADDR
// s_arr := [ tmp ] ;
36216: LD_ADDR_VAR 0 7
36220: PUSH
36221: LD_VAR 0 6
36225: PUSH
36226: EMPTY
36227: LIST
36228: ST_TO_ADDR
// for i = 1 to pos - 1 do
36229: LD_ADDR_VAR 0 5
36233: PUSH
36234: DOUBLE
36235: LD_INT 1
36237: DEC
36238: ST_TO_ADDR
36239: LD_VAR 0 2
36243: PUSH
36244: LD_INT 1
36246: MINUS
36247: PUSH
36248: FOR_TO
36249: IFFALSE 36294
// begin tmp := tmp [ pos [ i ] ] ;
36251: LD_ADDR_VAR 0 6
36255: PUSH
36256: LD_VAR 0 6
36260: PUSH
36261: LD_VAR 0 2
36265: PUSH
36266: LD_VAR 0 5
36270: ARRAY
36271: ARRAY
36272: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36273: LD_ADDR_VAR 0 7
36277: PUSH
36278: LD_VAR 0 7
36282: PUSH
36283: LD_VAR 0 6
36287: PUSH
36288: EMPTY
36289: LIST
36290: ADD
36291: ST_TO_ADDR
// end ;
36292: GO 36248
36294: POP
36295: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36296: LD_ADDR_VAR 0 6
36300: PUSH
36301: LD_VAR 0 6
36305: PPUSH
36306: LD_VAR 0 2
36310: PUSH
36311: LD_VAR 0 2
36315: ARRAY
36316: PPUSH
36317: LD_VAR 0 3
36321: PPUSH
36322: CALL_OW 1
36326: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36327: LD_ADDR_VAR 0 7
36331: PUSH
36332: LD_VAR 0 7
36336: PPUSH
36337: LD_VAR 0 7
36341: PPUSH
36342: LD_VAR 0 6
36346: PPUSH
36347: CALL_OW 1
36351: ST_TO_ADDR
// for i = s_arr downto 2 do
36352: LD_ADDR_VAR 0 5
36356: PUSH
36357: DOUBLE
36358: LD_VAR 0 7
36362: INC
36363: ST_TO_ADDR
36364: LD_INT 2
36366: PUSH
36367: FOR_DOWNTO
36368: IFFALSE 36452
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36370: LD_ADDR_VAR 0 6
36374: PUSH
36375: LD_VAR 0 7
36379: PUSH
36380: LD_VAR 0 5
36384: PUSH
36385: LD_INT 1
36387: MINUS
36388: ARRAY
36389: PPUSH
36390: LD_VAR 0 2
36394: PUSH
36395: LD_VAR 0 5
36399: PUSH
36400: LD_INT 1
36402: MINUS
36403: ARRAY
36404: PPUSH
36405: LD_VAR 0 7
36409: PUSH
36410: LD_VAR 0 5
36414: ARRAY
36415: PPUSH
36416: CALL_OW 1
36420: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36421: LD_ADDR_VAR 0 7
36425: PUSH
36426: LD_VAR 0 7
36430: PPUSH
36431: LD_VAR 0 5
36435: PUSH
36436: LD_INT 1
36438: MINUS
36439: PPUSH
36440: LD_VAR 0 6
36444: PPUSH
36445: CALL_OW 1
36449: ST_TO_ADDR
// end ;
36450: GO 36367
36452: POP
36453: POP
// result := s_arr [ 1 ] ;
36454: LD_ADDR_VAR 0 4
36458: PUSH
36459: LD_VAR 0 7
36463: PUSH
36464: LD_INT 1
36466: ARRAY
36467: ST_TO_ADDR
// end ; end ;
36468: LD_VAR 0 4
36472: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
36473: LD_INT 0
36475: PPUSH
36476: PPUSH
// if not list then
36477: LD_VAR 0 1
36481: NOT
36482: IFFALSE 36486
// exit ;
36484: GO 36577
// i := list [ pos1 ] ;
36486: LD_ADDR_VAR 0 5
36490: PUSH
36491: LD_VAR 0 1
36495: PUSH
36496: LD_VAR 0 2
36500: ARRAY
36501: ST_TO_ADDR
// if not i then
36502: LD_VAR 0 5
36506: NOT
36507: IFFALSE 36511
// exit ;
36509: GO 36577
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
36511: LD_ADDR_VAR 0 1
36515: PUSH
36516: LD_VAR 0 1
36520: PPUSH
36521: LD_VAR 0 2
36525: PPUSH
36526: LD_VAR 0 1
36530: PUSH
36531: LD_VAR 0 3
36535: ARRAY
36536: PPUSH
36537: CALL_OW 1
36541: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
36542: LD_ADDR_VAR 0 1
36546: PUSH
36547: LD_VAR 0 1
36551: PPUSH
36552: LD_VAR 0 3
36556: PPUSH
36557: LD_VAR 0 5
36561: PPUSH
36562: CALL_OW 1
36566: ST_TO_ADDR
// result := list ;
36567: LD_ADDR_VAR 0 4
36571: PUSH
36572: LD_VAR 0 1
36576: ST_TO_ADDR
// end ;
36577: LD_VAR 0 4
36581: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
36582: LD_INT 0
36584: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
36585: LD_ADDR_VAR 0 5
36589: PUSH
36590: LD_VAR 0 1
36594: PPUSH
36595: CALL_OW 250
36599: PPUSH
36600: LD_VAR 0 1
36604: PPUSH
36605: CALL_OW 251
36609: PPUSH
36610: LD_VAR 0 2
36614: PPUSH
36615: LD_VAR 0 3
36619: PPUSH
36620: LD_VAR 0 4
36624: PPUSH
36625: CALL 36635 0 5
36629: ST_TO_ADDR
// end ;
36630: LD_VAR 0 5
36634: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
36635: LD_INT 0
36637: PPUSH
36638: PPUSH
36639: PPUSH
36640: PPUSH
// if not list then
36641: LD_VAR 0 3
36645: NOT
36646: IFFALSE 36650
// exit ;
36648: GO 37038
// result := [ ] ;
36650: LD_ADDR_VAR 0 6
36654: PUSH
36655: EMPTY
36656: ST_TO_ADDR
// for i in list do
36657: LD_ADDR_VAR 0 7
36661: PUSH
36662: LD_VAR 0 3
36666: PUSH
36667: FOR_IN
36668: IFFALSE 36870
// begin tmp := GetDistUnitXY ( i , x , y ) ;
36670: LD_ADDR_VAR 0 9
36674: PUSH
36675: LD_VAR 0 7
36679: PPUSH
36680: LD_VAR 0 1
36684: PPUSH
36685: LD_VAR 0 2
36689: PPUSH
36690: CALL_OW 297
36694: ST_TO_ADDR
// if not result then
36695: LD_VAR 0 6
36699: NOT
36700: IFFALSE 36726
// result := [ [ i , tmp ] ] else
36702: LD_ADDR_VAR 0 6
36706: PUSH
36707: LD_VAR 0 7
36711: PUSH
36712: LD_VAR 0 9
36716: PUSH
36717: EMPTY
36718: LIST
36719: LIST
36720: PUSH
36721: EMPTY
36722: LIST
36723: ST_TO_ADDR
36724: GO 36868
// begin if result [ result ] [ 2 ] < tmp then
36726: LD_VAR 0 6
36730: PUSH
36731: LD_VAR 0 6
36735: ARRAY
36736: PUSH
36737: LD_INT 2
36739: ARRAY
36740: PUSH
36741: LD_VAR 0 9
36745: LESS
36746: IFFALSE 36788
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
36748: LD_ADDR_VAR 0 6
36752: PUSH
36753: LD_VAR 0 6
36757: PPUSH
36758: LD_VAR 0 6
36762: PUSH
36763: LD_INT 1
36765: PLUS
36766: PPUSH
36767: LD_VAR 0 7
36771: PUSH
36772: LD_VAR 0 9
36776: PUSH
36777: EMPTY
36778: LIST
36779: LIST
36780: PPUSH
36781: CALL_OW 2
36785: ST_TO_ADDR
36786: GO 36868
// for j = 1 to result do
36788: LD_ADDR_VAR 0 8
36792: PUSH
36793: DOUBLE
36794: LD_INT 1
36796: DEC
36797: ST_TO_ADDR
36798: LD_VAR 0 6
36802: PUSH
36803: FOR_TO
36804: IFFALSE 36866
// begin if tmp < result [ j ] [ 2 ] then
36806: LD_VAR 0 9
36810: PUSH
36811: LD_VAR 0 6
36815: PUSH
36816: LD_VAR 0 8
36820: ARRAY
36821: PUSH
36822: LD_INT 2
36824: ARRAY
36825: LESS
36826: IFFALSE 36864
// begin result := Insert ( result , j , [ i , tmp ] ) ;
36828: LD_ADDR_VAR 0 6
36832: PUSH
36833: LD_VAR 0 6
36837: PPUSH
36838: LD_VAR 0 8
36842: PPUSH
36843: LD_VAR 0 7
36847: PUSH
36848: LD_VAR 0 9
36852: PUSH
36853: EMPTY
36854: LIST
36855: LIST
36856: PPUSH
36857: CALL_OW 2
36861: ST_TO_ADDR
// break ;
36862: GO 36866
// end ; end ;
36864: GO 36803
36866: POP
36867: POP
// end ; end ;
36868: GO 36667
36870: POP
36871: POP
// if result and not asc then
36872: LD_VAR 0 6
36876: PUSH
36877: LD_VAR 0 4
36881: NOT
36882: AND
36883: IFFALSE 36958
// begin tmp := result ;
36885: LD_ADDR_VAR 0 9
36889: PUSH
36890: LD_VAR 0 6
36894: ST_TO_ADDR
// for i = tmp downto 1 do
36895: LD_ADDR_VAR 0 7
36899: PUSH
36900: DOUBLE
36901: LD_VAR 0 9
36905: INC
36906: ST_TO_ADDR
36907: LD_INT 1
36909: PUSH
36910: FOR_DOWNTO
36911: IFFALSE 36956
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
36913: LD_ADDR_VAR 0 6
36917: PUSH
36918: LD_VAR 0 6
36922: PPUSH
36923: LD_VAR 0 9
36927: PUSH
36928: LD_VAR 0 7
36932: MINUS
36933: PUSH
36934: LD_INT 1
36936: PLUS
36937: PPUSH
36938: LD_VAR 0 9
36942: PUSH
36943: LD_VAR 0 7
36947: ARRAY
36948: PPUSH
36949: CALL_OW 1
36953: ST_TO_ADDR
36954: GO 36910
36956: POP
36957: POP
// end ; tmp := [ ] ;
36958: LD_ADDR_VAR 0 9
36962: PUSH
36963: EMPTY
36964: ST_TO_ADDR
// if mode then
36965: LD_VAR 0 5
36969: IFFALSE 37038
// begin for i = 1 to result do
36971: LD_ADDR_VAR 0 7
36975: PUSH
36976: DOUBLE
36977: LD_INT 1
36979: DEC
36980: ST_TO_ADDR
36981: LD_VAR 0 6
36985: PUSH
36986: FOR_TO
36987: IFFALSE 37026
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
36989: LD_ADDR_VAR 0 9
36993: PUSH
36994: LD_VAR 0 9
36998: PPUSH
36999: LD_VAR 0 7
37003: PPUSH
37004: LD_VAR 0 6
37008: PUSH
37009: LD_VAR 0 7
37013: ARRAY
37014: PUSH
37015: LD_INT 1
37017: ARRAY
37018: PPUSH
37019: CALL_OW 1
37023: ST_TO_ADDR
37024: GO 36986
37026: POP
37027: POP
// result := tmp ;
37028: LD_ADDR_VAR 0 6
37032: PUSH
37033: LD_VAR 0 9
37037: ST_TO_ADDR
// end ; end ;
37038: LD_VAR 0 6
37042: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
37043: LD_INT 0
37045: PPUSH
37046: PPUSH
37047: PPUSH
37048: PPUSH
37049: PPUSH
37050: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
37051: LD_ADDR_VAR 0 5
37055: PUSH
37056: LD_INT 0
37058: PUSH
37059: LD_INT 0
37061: PUSH
37062: LD_INT 0
37064: PUSH
37065: EMPTY
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: LIST
37071: LIST
37072: ST_TO_ADDR
// if not x or not y then
37073: LD_VAR 0 2
37077: NOT
37078: PUSH
37079: LD_VAR 0 3
37083: NOT
37084: OR
37085: IFFALSE 37089
// exit ;
37087: GO 38741
// if not range then
37089: LD_VAR 0 4
37093: NOT
37094: IFFALSE 37104
// range := 10 ;
37096: LD_ADDR_VAR 0 4
37100: PUSH
37101: LD_INT 10
37103: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37104: LD_ADDR_VAR 0 8
37108: PUSH
37109: LD_INT 81
37111: PUSH
37112: LD_VAR 0 1
37116: PUSH
37117: EMPTY
37118: LIST
37119: LIST
37120: PUSH
37121: LD_INT 92
37123: PUSH
37124: LD_VAR 0 2
37128: PUSH
37129: LD_VAR 0 3
37133: PUSH
37134: LD_VAR 0 4
37138: PUSH
37139: EMPTY
37140: LIST
37141: LIST
37142: LIST
37143: LIST
37144: PUSH
37145: LD_INT 3
37147: PUSH
37148: LD_INT 21
37150: PUSH
37151: LD_INT 3
37153: PUSH
37154: EMPTY
37155: LIST
37156: LIST
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: PUSH
37162: EMPTY
37163: LIST
37164: LIST
37165: LIST
37166: PPUSH
37167: CALL_OW 69
37171: ST_TO_ADDR
// if not tmp then
37172: LD_VAR 0 8
37176: NOT
37177: IFFALSE 37181
// exit ;
37179: GO 38741
// for i in tmp do
37181: LD_ADDR_VAR 0 6
37185: PUSH
37186: LD_VAR 0 8
37190: PUSH
37191: FOR_IN
37192: IFFALSE 38716
// begin points := [ 0 , 0 , 0 ] ;
37194: LD_ADDR_VAR 0 9
37198: PUSH
37199: LD_INT 0
37201: PUSH
37202: LD_INT 0
37204: PUSH
37205: LD_INT 0
37207: PUSH
37208: EMPTY
37209: LIST
37210: LIST
37211: LIST
37212: ST_TO_ADDR
// bpoints := 1 ;
37213: LD_ADDR_VAR 0 10
37217: PUSH
37218: LD_INT 1
37220: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37221: LD_VAR 0 6
37225: PPUSH
37226: CALL_OW 247
37230: PUSH
37231: LD_INT 1
37233: DOUBLE
37234: EQUAL
37235: IFTRUE 37239
37237: GO 37817
37239: POP
// begin if GetClass ( i ) = 1 then
37240: LD_VAR 0 6
37244: PPUSH
37245: CALL_OW 257
37249: PUSH
37250: LD_INT 1
37252: EQUAL
37253: IFFALSE 37274
// points := [ 10 , 5 , 3 ] ;
37255: LD_ADDR_VAR 0 9
37259: PUSH
37260: LD_INT 10
37262: PUSH
37263: LD_INT 5
37265: PUSH
37266: LD_INT 3
37268: PUSH
37269: EMPTY
37270: LIST
37271: LIST
37272: LIST
37273: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37274: LD_VAR 0 6
37278: PPUSH
37279: CALL_OW 257
37283: PUSH
37284: LD_INT 2
37286: PUSH
37287: LD_INT 3
37289: PUSH
37290: LD_INT 4
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: LIST
37297: IN
37298: IFFALSE 37319
// points := [ 3 , 2 , 1 ] ;
37300: LD_ADDR_VAR 0 9
37304: PUSH
37305: LD_INT 3
37307: PUSH
37308: LD_INT 2
37310: PUSH
37311: LD_INT 1
37313: PUSH
37314: EMPTY
37315: LIST
37316: LIST
37317: LIST
37318: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37319: LD_VAR 0 6
37323: PPUSH
37324: CALL_OW 257
37328: PUSH
37329: LD_INT 5
37331: EQUAL
37332: IFFALSE 37353
// points := [ 130 , 5 , 2 ] ;
37334: LD_ADDR_VAR 0 9
37338: PUSH
37339: LD_INT 130
37341: PUSH
37342: LD_INT 5
37344: PUSH
37345: LD_INT 2
37347: PUSH
37348: EMPTY
37349: LIST
37350: LIST
37351: LIST
37352: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37353: LD_VAR 0 6
37357: PPUSH
37358: CALL_OW 257
37362: PUSH
37363: LD_INT 8
37365: EQUAL
37366: IFFALSE 37387
// points := [ 35 , 35 , 30 ] ;
37368: LD_ADDR_VAR 0 9
37372: PUSH
37373: LD_INT 35
37375: PUSH
37376: LD_INT 35
37378: PUSH
37379: LD_INT 30
37381: PUSH
37382: EMPTY
37383: LIST
37384: LIST
37385: LIST
37386: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37387: LD_VAR 0 6
37391: PPUSH
37392: CALL_OW 257
37396: PUSH
37397: LD_INT 9
37399: EQUAL
37400: IFFALSE 37421
// points := [ 20 , 55 , 40 ] ;
37402: LD_ADDR_VAR 0 9
37406: PUSH
37407: LD_INT 20
37409: PUSH
37410: LD_INT 55
37412: PUSH
37413: LD_INT 40
37415: PUSH
37416: EMPTY
37417: LIST
37418: LIST
37419: LIST
37420: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37421: LD_VAR 0 6
37425: PPUSH
37426: CALL_OW 257
37430: PUSH
37431: LD_INT 12
37433: PUSH
37434: LD_INT 16
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: IN
37441: IFFALSE 37462
// points := [ 5 , 3 , 2 ] ;
37443: LD_ADDR_VAR 0 9
37447: PUSH
37448: LD_INT 5
37450: PUSH
37451: LD_INT 3
37453: PUSH
37454: LD_INT 2
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: LIST
37461: ST_TO_ADDR
// if GetClass ( i ) = 17 then
37462: LD_VAR 0 6
37466: PPUSH
37467: CALL_OW 257
37471: PUSH
37472: LD_INT 17
37474: EQUAL
37475: IFFALSE 37496
// points := [ 100 , 50 , 75 ] ;
37477: LD_ADDR_VAR 0 9
37481: PUSH
37482: LD_INT 100
37484: PUSH
37485: LD_INT 50
37487: PUSH
37488: LD_INT 75
37490: PUSH
37491: EMPTY
37492: LIST
37493: LIST
37494: LIST
37495: ST_TO_ADDR
// if GetClass ( i ) = 15 then
37496: LD_VAR 0 6
37500: PPUSH
37501: CALL_OW 257
37505: PUSH
37506: LD_INT 15
37508: EQUAL
37509: IFFALSE 37530
// points := [ 10 , 5 , 3 ] ;
37511: LD_ADDR_VAR 0 9
37515: PUSH
37516: LD_INT 10
37518: PUSH
37519: LD_INT 5
37521: PUSH
37522: LD_INT 3
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: LIST
37529: ST_TO_ADDR
// if GetClass ( i ) = 14 then
37530: LD_VAR 0 6
37534: PPUSH
37535: CALL_OW 257
37539: PUSH
37540: LD_INT 14
37542: EQUAL
37543: IFFALSE 37564
// points := [ 10 , 0 , 0 ] ;
37545: LD_ADDR_VAR 0 9
37549: PUSH
37550: LD_INT 10
37552: PUSH
37553: LD_INT 0
37555: PUSH
37556: LD_INT 0
37558: PUSH
37559: EMPTY
37560: LIST
37561: LIST
37562: LIST
37563: ST_TO_ADDR
// if GetClass ( i ) = 11 then
37564: LD_VAR 0 6
37568: PPUSH
37569: CALL_OW 257
37573: PUSH
37574: LD_INT 11
37576: EQUAL
37577: IFFALSE 37598
// points := [ 30 , 10 , 5 ] ;
37579: LD_ADDR_VAR 0 9
37583: PUSH
37584: LD_INT 30
37586: PUSH
37587: LD_INT 10
37589: PUSH
37590: LD_INT 5
37592: PUSH
37593: EMPTY
37594: LIST
37595: LIST
37596: LIST
37597: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
37598: LD_VAR 0 1
37602: PPUSH
37603: LD_INT 5
37605: PPUSH
37606: CALL_OW 321
37610: PUSH
37611: LD_INT 2
37613: EQUAL
37614: IFFALSE 37631
// bpoints := bpoints * 1.8 ;
37616: LD_ADDR_VAR 0 10
37620: PUSH
37621: LD_VAR 0 10
37625: PUSH
37626: LD_REAL  1.80000000000000E+0000
37629: MUL
37630: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
37631: LD_VAR 0 6
37635: PPUSH
37636: CALL_OW 257
37640: PUSH
37641: LD_INT 1
37643: PUSH
37644: LD_INT 2
37646: PUSH
37647: LD_INT 3
37649: PUSH
37650: LD_INT 4
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: LIST
37657: LIST
37658: IN
37659: PUSH
37660: LD_VAR 0 1
37664: PPUSH
37665: LD_INT 51
37667: PPUSH
37668: CALL_OW 321
37672: PUSH
37673: LD_INT 2
37675: EQUAL
37676: AND
37677: IFFALSE 37694
// bpoints := bpoints * 1.2 ;
37679: LD_ADDR_VAR 0 10
37683: PUSH
37684: LD_VAR 0 10
37688: PUSH
37689: LD_REAL  1.20000000000000E+0000
37692: MUL
37693: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
37694: LD_VAR 0 6
37698: PPUSH
37699: CALL_OW 257
37703: PUSH
37704: LD_INT 5
37706: PUSH
37707: LD_INT 7
37709: PUSH
37710: LD_INT 9
37712: PUSH
37713: EMPTY
37714: LIST
37715: LIST
37716: LIST
37717: IN
37718: PUSH
37719: LD_VAR 0 1
37723: PPUSH
37724: LD_INT 52
37726: PPUSH
37727: CALL_OW 321
37731: PUSH
37732: LD_INT 2
37734: EQUAL
37735: AND
37736: IFFALSE 37753
// bpoints := bpoints * 1.5 ;
37738: LD_ADDR_VAR 0 10
37742: PUSH
37743: LD_VAR 0 10
37747: PUSH
37748: LD_REAL  1.50000000000000E+0000
37751: MUL
37752: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
37753: LD_VAR 0 1
37757: PPUSH
37758: LD_INT 66
37760: PPUSH
37761: CALL_OW 321
37765: PUSH
37766: LD_INT 2
37768: EQUAL
37769: IFFALSE 37786
// bpoints := bpoints * 1.1 ;
37771: LD_ADDR_VAR 0 10
37775: PUSH
37776: LD_VAR 0 10
37780: PUSH
37781: LD_REAL  1.10000000000000E+0000
37784: MUL
37785: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
37786: LD_ADDR_VAR 0 10
37790: PUSH
37791: LD_VAR 0 10
37795: PUSH
37796: LD_VAR 0 6
37800: PPUSH
37801: LD_INT 1
37803: PPUSH
37804: CALL_OW 259
37808: PUSH
37809: LD_REAL  1.15000000000000E+0000
37812: MUL
37813: MUL
37814: ST_TO_ADDR
// end ; unit_vehicle :
37815: GO 38645
37817: LD_INT 2
37819: DOUBLE
37820: EQUAL
37821: IFTRUE 37825
37823: GO 38633
37825: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
37826: LD_VAR 0 6
37830: PPUSH
37831: CALL_OW 264
37835: PUSH
37836: LD_INT 2
37838: PUSH
37839: LD_INT 42
37841: PUSH
37842: LD_INT 24
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: LIST
37849: IN
37850: IFFALSE 37871
// points := [ 25 , 5 , 3 ] ;
37852: LD_ADDR_VAR 0 9
37856: PUSH
37857: LD_INT 25
37859: PUSH
37860: LD_INT 5
37862: PUSH
37863: LD_INT 3
37865: PUSH
37866: EMPTY
37867: LIST
37868: LIST
37869: LIST
37870: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
37871: LD_VAR 0 6
37875: PPUSH
37876: CALL_OW 264
37880: PUSH
37881: LD_INT 4
37883: PUSH
37884: LD_INT 43
37886: PUSH
37887: LD_INT 25
37889: PUSH
37890: EMPTY
37891: LIST
37892: LIST
37893: LIST
37894: IN
37895: IFFALSE 37916
// points := [ 40 , 15 , 5 ] ;
37897: LD_ADDR_VAR 0 9
37901: PUSH
37902: LD_INT 40
37904: PUSH
37905: LD_INT 15
37907: PUSH
37908: LD_INT 5
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: LIST
37915: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
37916: LD_VAR 0 6
37920: PPUSH
37921: CALL_OW 264
37925: PUSH
37926: LD_INT 3
37928: PUSH
37929: LD_INT 23
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: IN
37936: IFFALSE 37957
// points := [ 7 , 25 , 8 ] ;
37938: LD_ADDR_VAR 0 9
37942: PUSH
37943: LD_INT 7
37945: PUSH
37946: LD_INT 25
37948: PUSH
37949: LD_INT 8
37951: PUSH
37952: EMPTY
37953: LIST
37954: LIST
37955: LIST
37956: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
37957: LD_VAR 0 6
37961: PPUSH
37962: CALL_OW 264
37966: PUSH
37967: LD_INT 5
37969: PUSH
37970: LD_INT 27
37972: PUSH
37973: LD_INT 44
37975: PUSH
37976: EMPTY
37977: LIST
37978: LIST
37979: LIST
37980: IN
37981: IFFALSE 38002
// points := [ 14 , 50 , 16 ] ;
37983: LD_ADDR_VAR 0 9
37987: PUSH
37988: LD_INT 14
37990: PUSH
37991: LD_INT 50
37993: PUSH
37994: LD_INT 16
37996: PUSH
37997: EMPTY
37998: LIST
37999: LIST
38000: LIST
38001: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
38002: LD_VAR 0 6
38006: PPUSH
38007: CALL_OW 264
38011: PUSH
38012: LD_INT 6
38014: PUSH
38015: LD_INT 46
38017: PUSH
38018: EMPTY
38019: LIST
38020: LIST
38021: IN
38022: IFFALSE 38043
// points := [ 32 , 120 , 70 ] ;
38024: LD_ADDR_VAR 0 9
38028: PUSH
38029: LD_INT 32
38031: PUSH
38032: LD_INT 120
38034: PUSH
38035: LD_INT 70
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: LIST
38042: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
38043: LD_VAR 0 6
38047: PPUSH
38048: CALL_OW 264
38052: PUSH
38053: LD_INT 7
38055: PUSH
38056: LD_INT 28
38058: PUSH
38059: LD_INT 45
38061: PUSH
38062: LD_EXP 26
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: LIST
38071: LIST
38072: IN
38073: IFFALSE 38094
// points := [ 35 , 20 , 45 ] ;
38075: LD_ADDR_VAR 0 9
38079: PUSH
38080: LD_INT 35
38082: PUSH
38083: LD_INT 20
38085: PUSH
38086: LD_INT 45
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: LIST
38093: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
38094: LD_VAR 0 6
38098: PPUSH
38099: CALL_OW 264
38103: PUSH
38104: LD_INT 47
38106: PUSH
38107: EMPTY
38108: LIST
38109: IN
38110: IFFALSE 38131
// points := [ 67 , 45 , 75 ] ;
38112: LD_ADDR_VAR 0 9
38116: PUSH
38117: LD_INT 67
38119: PUSH
38120: LD_INT 45
38122: PUSH
38123: LD_INT 75
38125: PUSH
38126: EMPTY
38127: LIST
38128: LIST
38129: LIST
38130: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
38131: LD_VAR 0 6
38135: PPUSH
38136: CALL_OW 264
38140: PUSH
38141: LD_INT 26
38143: PUSH
38144: EMPTY
38145: LIST
38146: IN
38147: IFFALSE 38168
// points := [ 120 , 30 , 80 ] ;
38149: LD_ADDR_VAR 0 9
38153: PUSH
38154: LD_INT 120
38156: PUSH
38157: LD_INT 30
38159: PUSH
38160: LD_INT 80
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: LIST
38167: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
38168: LD_VAR 0 6
38172: PPUSH
38173: CALL_OW 264
38177: PUSH
38178: LD_INT 22
38180: PUSH
38181: EMPTY
38182: LIST
38183: IN
38184: IFFALSE 38205
// points := [ 40 , 1 , 1 ] ;
38186: LD_ADDR_VAR 0 9
38190: PUSH
38191: LD_INT 40
38193: PUSH
38194: LD_INT 1
38196: PUSH
38197: LD_INT 1
38199: PUSH
38200: EMPTY
38201: LIST
38202: LIST
38203: LIST
38204: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38205: LD_VAR 0 6
38209: PPUSH
38210: CALL_OW 264
38214: PUSH
38215: LD_INT 29
38217: PUSH
38218: EMPTY
38219: LIST
38220: IN
38221: IFFALSE 38242
// points := [ 70 , 200 , 400 ] ;
38223: LD_ADDR_VAR 0 9
38227: PUSH
38228: LD_INT 70
38230: PUSH
38231: LD_INT 200
38233: PUSH
38234: LD_INT 400
38236: PUSH
38237: EMPTY
38238: LIST
38239: LIST
38240: LIST
38241: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38242: LD_VAR 0 6
38246: PPUSH
38247: CALL_OW 264
38251: PUSH
38252: LD_INT 14
38254: PUSH
38255: LD_INT 53
38257: PUSH
38258: EMPTY
38259: LIST
38260: LIST
38261: IN
38262: IFFALSE 38283
// points := [ 40 , 10 , 20 ] ;
38264: LD_ADDR_VAR 0 9
38268: PUSH
38269: LD_INT 40
38271: PUSH
38272: LD_INT 10
38274: PUSH
38275: LD_INT 20
38277: PUSH
38278: EMPTY
38279: LIST
38280: LIST
38281: LIST
38282: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38283: LD_VAR 0 6
38287: PPUSH
38288: CALL_OW 264
38292: PUSH
38293: LD_INT 9
38295: PUSH
38296: EMPTY
38297: LIST
38298: IN
38299: IFFALSE 38320
// points := [ 5 , 70 , 20 ] ;
38301: LD_ADDR_VAR 0 9
38305: PUSH
38306: LD_INT 5
38308: PUSH
38309: LD_INT 70
38311: PUSH
38312: LD_INT 20
38314: PUSH
38315: EMPTY
38316: LIST
38317: LIST
38318: LIST
38319: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38320: LD_VAR 0 6
38324: PPUSH
38325: CALL_OW 264
38329: PUSH
38330: LD_INT 10
38332: PUSH
38333: EMPTY
38334: LIST
38335: IN
38336: IFFALSE 38357
// points := [ 35 , 110 , 70 ] ;
38338: LD_ADDR_VAR 0 9
38342: PUSH
38343: LD_INT 35
38345: PUSH
38346: LD_INT 110
38348: PUSH
38349: LD_INT 70
38351: PUSH
38352: EMPTY
38353: LIST
38354: LIST
38355: LIST
38356: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38357: LD_VAR 0 6
38361: PPUSH
38362: CALL_OW 265
38366: PUSH
38367: LD_INT 25
38369: EQUAL
38370: IFFALSE 38391
// points := [ 80 , 65 , 100 ] ;
38372: LD_ADDR_VAR 0 9
38376: PUSH
38377: LD_INT 80
38379: PUSH
38380: LD_INT 65
38382: PUSH
38383: LD_INT 100
38385: PUSH
38386: EMPTY
38387: LIST
38388: LIST
38389: LIST
38390: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38391: LD_VAR 0 6
38395: PPUSH
38396: CALL_OW 263
38400: PUSH
38401: LD_INT 1
38403: EQUAL
38404: IFFALSE 38439
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38406: LD_ADDR_VAR 0 10
38410: PUSH
38411: LD_VAR 0 10
38415: PUSH
38416: LD_VAR 0 6
38420: PPUSH
38421: CALL_OW 311
38425: PPUSH
38426: LD_INT 3
38428: PPUSH
38429: CALL_OW 259
38433: PUSH
38434: LD_INT 4
38436: MUL
38437: MUL
38438: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
38439: LD_VAR 0 6
38443: PPUSH
38444: CALL_OW 263
38448: PUSH
38449: LD_INT 2
38451: EQUAL
38452: IFFALSE 38503
// begin j := IsControledBy ( i ) ;
38454: LD_ADDR_VAR 0 7
38458: PUSH
38459: LD_VAR 0 6
38463: PPUSH
38464: CALL_OW 312
38468: ST_TO_ADDR
// if j then
38469: LD_VAR 0 7
38473: IFFALSE 38503
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
38475: LD_ADDR_VAR 0 10
38479: PUSH
38480: LD_VAR 0 10
38484: PUSH
38485: LD_VAR 0 7
38489: PPUSH
38490: LD_INT 3
38492: PPUSH
38493: CALL_OW 259
38497: PUSH
38498: LD_INT 3
38500: MUL
38501: MUL
38502: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
38503: LD_VAR 0 6
38507: PPUSH
38508: CALL_OW 264
38512: PUSH
38513: LD_INT 5
38515: PUSH
38516: LD_INT 6
38518: PUSH
38519: LD_INT 46
38521: PUSH
38522: LD_INT 44
38524: PUSH
38525: LD_INT 47
38527: PUSH
38528: LD_INT 45
38530: PUSH
38531: LD_INT 28
38533: PUSH
38534: LD_INT 7
38536: PUSH
38537: LD_INT 27
38539: PUSH
38540: LD_INT 29
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: LIST
38547: LIST
38548: LIST
38549: LIST
38550: LIST
38551: LIST
38552: LIST
38553: LIST
38554: IN
38555: PUSH
38556: LD_VAR 0 1
38560: PPUSH
38561: LD_INT 52
38563: PPUSH
38564: CALL_OW 321
38568: PUSH
38569: LD_INT 2
38571: EQUAL
38572: AND
38573: IFFALSE 38590
// bpoints := bpoints * 1.2 ;
38575: LD_ADDR_VAR 0 10
38579: PUSH
38580: LD_VAR 0 10
38584: PUSH
38585: LD_REAL  1.20000000000000E+0000
38588: MUL
38589: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
38590: LD_VAR 0 6
38594: PPUSH
38595: CALL_OW 264
38599: PUSH
38600: LD_INT 6
38602: PUSH
38603: LD_INT 46
38605: PUSH
38606: LD_INT 47
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: LIST
38613: IN
38614: IFFALSE 38631
// bpoints := bpoints * 1.2 ;
38616: LD_ADDR_VAR 0 10
38620: PUSH
38621: LD_VAR 0 10
38625: PUSH
38626: LD_REAL  1.20000000000000E+0000
38629: MUL
38630: ST_TO_ADDR
// end ; unit_building :
38631: GO 38645
38633: LD_INT 3
38635: DOUBLE
38636: EQUAL
38637: IFTRUE 38641
38639: GO 38644
38641: POP
// ; end ;
38642: GO 38645
38644: POP
// for j = 1 to 3 do
38645: LD_ADDR_VAR 0 7
38649: PUSH
38650: DOUBLE
38651: LD_INT 1
38653: DEC
38654: ST_TO_ADDR
38655: LD_INT 3
38657: PUSH
38658: FOR_TO
38659: IFFALSE 38712
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
38661: LD_ADDR_VAR 0 5
38665: PUSH
38666: LD_VAR 0 5
38670: PPUSH
38671: LD_VAR 0 7
38675: PPUSH
38676: LD_VAR 0 5
38680: PUSH
38681: LD_VAR 0 7
38685: ARRAY
38686: PUSH
38687: LD_VAR 0 9
38691: PUSH
38692: LD_VAR 0 7
38696: ARRAY
38697: PUSH
38698: LD_VAR 0 10
38702: MUL
38703: PLUS
38704: PPUSH
38705: CALL_OW 1
38709: ST_TO_ADDR
38710: GO 38658
38712: POP
38713: POP
// end ;
38714: GO 37191
38716: POP
38717: POP
// result := Replace ( result , 4 , tmp ) ;
38718: LD_ADDR_VAR 0 5
38722: PUSH
38723: LD_VAR 0 5
38727: PPUSH
38728: LD_INT 4
38730: PPUSH
38731: LD_VAR 0 8
38735: PPUSH
38736: CALL_OW 1
38740: ST_TO_ADDR
// end ;
38741: LD_VAR 0 5
38745: RET
// export function DangerAtRange ( unit , range ) ; begin
38746: LD_INT 0
38748: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
38749: LD_ADDR_VAR 0 3
38753: PUSH
38754: LD_VAR 0 1
38758: PPUSH
38759: CALL_OW 255
38763: PPUSH
38764: LD_VAR 0 1
38768: PPUSH
38769: CALL_OW 250
38773: PPUSH
38774: LD_VAR 0 1
38778: PPUSH
38779: CALL_OW 251
38783: PPUSH
38784: LD_VAR 0 2
38788: PPUSH
38789: CALL 37043 0 4
38793: ST_TO_ADDR
// end ;
38794: LD_VAR 0 3
38798: RET
// export function DangerInArea ( side , area ) ; begin
38799: LD_INT 0
38801: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
38802: LD_ADDR_VAR 0 3
38806: PUSH
38807: LD_VAR 0 2
38811: PPUSH
38812: LD_INT 81
38814: PUSH
38815: LD_VAR 0 1
38819: PUSH
38820: EMPTY
38821: LIST
38822: LIST
38823: PPUSH
38824: CALL_OW 70
38828: ST_TO_ADDR
// end ;
38829: LD_VAR 0 3
38833: RET
// export function IsExtension ( b ) ; begin
38834: LD_INT 0
38836: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
38837: LD_ADDR_VAR 0 2
38841: PUSH
38842: LD_VAR 0 1
38846: PUSH
38847: LD_INT 23
38849: PUSH
38850: LD_INT 20
38852: PUSH
38853: LD_INT 22
38855: PUSH
38856: LD_INT 17
38858: PUSH
38859: LD_INT 24
38861: PUSH
38862: LD_INT 21
38864: PUSH
38865: LD_INT 19
38867: PUSH
38868: LD_INT 16
38870: PUSH
38871: LD_INT 25
38873: PUSH
38874: LD_INT 18
38876: PUSH
38877: EMPTY
38878: LIST
38879: LIST
38880: LIST
38881: LIST
38882: LIST
38883: LIST
38884: LIST
38885: LIST
38886: LIST
38887: LIST
38888: IN
38889: ST_TO_ADDR
// end ;
38890: LD_VAR 0 2
38894: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
38895: LD_INT 0
38897: PPUSH
38898: PPUSH
38899: PPUSH
// result := [ ] ;
38900: LD_ADDR_VAR 0 4
38904: PUSH
38905: EMPTY
38906: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
38907: LD_ADDR_VAR 0 5
38911: PUSH
38912: LD_VAR 0 2
38916: PPUSH
38917: LD_INT 21
38919: PUSH
38920: LD_INT 3
38922: PUSH
38923: EMPTY
38924: LIST
38925: LIST
38926: PPUSH
38927: CALL_OW 70
38931: ST_TO_ADDR
// if not tmp then
38932: LD_VAR 0 5
38936: NOT
38937: IFFALSE 38941
// exit ;
38939: GO 39005
// if checkLink then
38941: LD_VAR 0 3
38945: IFFALSE 38995
// begin for i in tmp do
38947: LD_ADDR_VAR 0 6
38951: PUSH
38952: LD_VAR 0 5
38956: PUSH
38957: FOR_IN
38958: IFFALSE 38993
// if GetBase ( i ) <> base then
38960: LD_VAR 0 6
38964: PPUSH
38965: CALL_OW 274
38969: PUSH
38970: LD_VAR 0 1
38974: NONEQUAL
38975: IFFALSE 38991
// ComLinkToBase ( base , i ) ;
38977: LD_VAR 0 1
38981: PPUSH
38982: LD_VAR 0 6
38986: PPUSH
38987: CALL_OW 169
38991: GO 38957
38993: POP
38994: POP
// end ; result := tmp ;
38995: LD_ADDR_VAR 0 4
38999: PUSH
39000: LD_VAR 0 5
39004: ST_TO_ADDR
// end ;
39005: LD_VAR 0 4
39009: RET
// export function ComComplete ( units , b ) ; var i ; begin
39010: LD_INT 0
39012: PPUSH
39013: PPUSH
// if not units then
39014: LD_VAR 0 1
39018: NOT
39019: IFFALSE 39023
// exit ;
39021: GO 39113
// for i in units do
39023: LD_ADDR_VAR 0 4
39027: PUSH
39028: LD_VAR 0 1
39032: PUSH
39033: FOR_IN
39034: IFFALSE 39111
// if BuildingStatus ( b ) = bs_build then
39036: LD_VAR 0 2
39040: PPUSH
39041: CALL_OW 461
39045: PUSH
39046: LD_INT 1
39048: EQUAL
39049: IFFALSE 39109
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
39051: LD_VAR 0 4
39055: PPUSH
39056: LD_STRING h
39058: PUSH
39059: LD_VAR 0 2
39063: PPUSH
39064: CALL_OW 250
39068: PUSH
39069: LD_VAR 0 2
39073: PPUSH
39074: CALL_OW 251
39078: PUSH
39079: LD_VAR 0 2
39083: PUSH
39084: LD_INT 0
39086: PUSH
39087: LD_INT 0
39089: PUSH
39090: LD_INT 0
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: LIST
39097: LIST
39098: LIST
39099: LIST
39100: LIST
39101: PUSH
39102: EMPTY
39103: LIST
39104: PPUSH
39105: CALL_OW 446
39109: GO 39033
39111: POP
39112: POP
// end ;
39113: LD_VAR 0 3
39117: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
39118: LD_INT 0
39120: PPUSH
39121: PPUSH
39122: PPUSH
39123: PPUSH
39124: PPUSH
39125: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
39126: LD_VAR 0 1
39130: NOT
39131: PUSH
39132: LD_VAR 0 1
39136: PPUSH
39137: CALL_OW 263
39141: PUSH
39142: LD_INT 2
39144: NONEQUAL
39145: OR
39146: IFFALSE 39150
// exit ;
39148: GO 39466
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
39150: LD_ADDR_VAR 0 6
39154: PUSH
39155: LD_INT 22
39157: PUSH
39158: LD_VAR 0 1
39162: PPUSH
39163: CALL_OW 255
39167: PUSH
39168: EMPTY
39169: LIST
39170: LIST
39171: PUSH
39172: LD_INT 2
39174: PUSH
39175: LD_INT 30
39177: PUSH
39178: LD_INT 36
39180: PUSH
39181: EMPTY
39182: LIST
39183: LIST
39184: PUSH
39185: LD_INT 34
39187: PUSH
39188: LD_INT 31
39190: PUSH
39191: EMPTY
39192: LIST
39193: LIST
39194: PUSH
39195: EMPTY
39196: LIST
39197: LIST
39198: LIST
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: PPUSH
39204: CALL_OW 69
39208: ST_TO_ADDR
// if not tmp then
39209: LD_VAR 0 6
39213: NOT
39214: IFFALSE 39218
// exit ;
39216: GO 39466
// result := [ ] ;
39218: LD_ADDR_VAR 0 2
39222: PUSH
39223: EMPTY
39224: ST_TO_ADDR
// for i in tmp do
39225: LD_ADDR_VAR 0 3
39229: PUSH
39230: LD_VAR 0 6
39234: PUSH
39235: FOR_IN
39236: IFFALSE 39307
// begin t := UnitsInside ( i ) ;
39238: LD_ADDR_VAR 0 4
39242: PUSH
39243: LD_VAR 0 3
39247: PPUSH
39248: CALL_OW 313
39252: ST_TO_ADDR
// if t then
39253: LD_VAR 0 4
39257: IFFALSE 39305
// for j in t do
39259: LD_ADDR_VAR 0 7
39263: PUSH
39264: LD_VAR 0 4
39268: PUSH
39269: FOR_IN
39270: IFFALSE 39303
// result := Replace ( result , result + 1 , j ) ;
39272: LD_ADDR_VAR 0 2
39276: PUSH
39277: LD_VAR 0 2
39281: PPUSH
39282: LD_VAR 0 2
39286: PUSH
39287: LD_INT 1
39289: PLUS
39290: PPUSH
39291: LD_VAR 0 7
39295: PPUSH
39296: CALL_OW 1
39300: ST_TO_ADDR
39301: GO 39269
39303: POP
39304: POP
// end ;
39305: GO 39235
39307: POP
39308: POP
// if not result then
39309: LD_VAR 0 2
39313: NOT
39314: IFFALSE 39318
// exit ;
39316: GO 39466
// mech := result [ 1 ] ;
39318: LD_ADDR_VAR 0 5
39322: PUSH
39323: LD_VAR 0 2
39327: PUSH
39328: LD_INT 1
39330: ARRAY
39331: ST_TO_ADDR
// if result > 1 then
39332: LD_VAR 0 2
39336: PUSH
39337: LD_INT 1
39339: GREATER
39340: IFFALSE 39452
// begin for i = 2 to result do
39342: LD_ADDR_VAR 0 3
39346: PUSH
39347: DOUBLE
39348: LD_INT 2
39350: DEC
39351: ST_TO_ADDR
39352: LD_VAR 0 2
39356: PUSH
39357: FOR_TO
39358: IFFALSE 39450
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39360: LD_ADDR_VAR 0 4
39364: PUSH
39365: LD_VAR 0 2
39369: PUSH
39370: LD_VAR 0 3
39374: ARRAY
39375: PPUSH
39376: LD_INT 3
39378: PPUSH
39379: CALL_OW 259
39383: PUSH
39384: LD_VAR 0 2
39388: PUSH
39389: LD_VAR 0 3
39393: ARRAY
39394: PPUSH
39395: CALL_OW 432
39399: MINUS
39400: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39401: LD_VAR 0 4
39405: PUSH
39406: LD_VAR 0 5
39410: PPUSH
39411: LD_INT 3
39413: PPUSH
39414: CALL_OW 259
39418: PUSH
39419: LD_VAR 0 5
39423: PPUSH
39424: CALL_OW 432
39428: MINUS
39429: GREATEREQUAL
39430: IFFALSE 39448
// mech := result [ i ] ;
39432: LD_ADDR_VAR 0 5
39436: PUSH
39437: LD_VAR 0 2
39441: PUSH
39442: LD_VAR 0 3
39446: ARRAY
39447: ST_TO_ADDR
// end ;
39448: GO 39357
39450: POP
39451: POP
// end ; ComLinkTo ( vehicle , mech ) ;
39452: LD_VAR 0 1
39456: PPUSH
39457: LD_VAR 0 5
39461: PPUSH
39462: CALL_OW 135
// end ;
39466: LD_VAR 0 2
39470: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
39471: LD_INT 0
39473: PPUSH
39474: PPUSH
39475: PPUSH
39476: PPUSH
39477: PPUSH
39478: PPUSH
39479: PPUSH
39480: PPUSH
39481: PPUSH
39482: PPUSH
39483: PPUSH
39484: PPUSH
39485: PPUSH
// result := [ ] ;
39486: LD_ADDR_VAR 0 7
39490: PUSH
39491: EMPTY
39492: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
39493: LD_VAR 0 1
39497: PPUSH
39498: CALL_OW 266
39502: PUSH
39503: LD_INT 0
39505: PUSH
39506: LD_INT 1
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: IN
39513: NOT
39514: IFFALSE 39518
// exit ;
39516: GO 41152
// if name then
39518: LD_VAR 0 3
39522: IFFALSE 39538
// SetBName ( base_dep , name ) ;
39524: LD_VAR 0 1
39528: PPUSH
39529: LD_VAR 0 3
39533: PPUSH
39534: CALL_OW 500
// base := GetBase ( base_dep ) ;
39538: LD_ADDR_VAR 0 15
39542: PUSH
39543: LD_VAR 0 1
39547: PPUSH
39548: CALL_OW 274
39552: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
39553: LD_ADDR_VAR 0 16
39557: PUSH
39558: LD_VAR 0 1
39562: PPUSH
39563: CALL_OW 255
39567: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
39568: LD_ADDR_VAR 0 17
39572: PUSH
39573: LD_VAR 0 1
39577: PPUSH
39578: CALL_OW 248
39582: ST_TO_ADDR
// if sources then
39583: LD_VAR 0 5
39587: IFFALSE 39634
// for i = 1 to 3 do
39589: LD_ADDR_VAR 0 8
39593: PUSH
39594: DOUBLE
39595: LD_INT 1
39597: DEC
39598: ST_TO_ADDR
39599: LD_INT 3
39601: PUSH
39602: FOR_TO
39603: IFFALSE 39632
// AddResourceType ( base , i , sources [ i ] ) ;
39605: LD_VAR 0 15
39609: PPUSH
39610: LD_VAR 0 8
39614: PPUSH
39615: LD_VAR 0 5
39619: PUSH
39620: LD_VAR 0 8
39624: ARRAY
39625: PPUSH
39626: CALL_OW 276
39630: GO 39602
39632: POP
39633: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
39634: LD_ADDR_VAR 0 18
39638: PUSH
39639: LD_VAR 0 15
39643: PPUSH
39644: LD_VAR 0 2
39648: PPUSH
39649: LD_INT 1
39651: PPUSH
39652: CALL 38895 0 3
39656: ST_TO_ADDR
// InitHc ;
39657: CALL_OW 19
// InitUc ;
39661: CALL_OW 18
// uc_side := side ;
39665: LD_ADDR_OWVAR 20
39669: PUSH
39670: LD_VAR 0 16
39674: ST_TO_ADDR
// uc_nation := nation ;
39675: LD_ADDR_OWVAR 21
39679: PUSH
39680: LD_VAR 0 17
39684: ST_TO_ADDR
// if buildings then
39685: LD_VAR 0 18
39689: IFFALSE 41011
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
39691: LD_ADDR_VAR 0 19
39695: PUSH
39696: LD_VAR 0 18
39700: PPUSH
39701: LD_INT 2
39703: PUSH
39704: LD_INT 30
39706: PUSH
39707: LD_INT 29
39709: PUSH
39710: EMPTY
39711: LIST
39712: LIST
39713: PUSH
39714: LD_INT 30
39716: PUSH
39717: LD_INT 30
39719: PUSH
39720: EMPTY
39721: LIST
39722: LIST
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: LIST
39728: PPUSH
39729: CALL_OW 72
39733: ST_TO_ADDR
// if tmp then
39734: LD_VAR 0 19
39738: IFFALSE 39786
// for i in tmp do
39740: LD_ADDR_VAR 0 8
39744: PUSH
39745: LD_VAR 0 19
39749: PUSH
39750: FOR_IN
39751: IFFALSE 39784
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
39753: LD_VAR 0 8
39757: PPUSH
39758: CALL_OW 250
39762: PPUSH
39763: LD_VAR 0 8
39767: PPUSH
39768: CALL_OW 251
39772: PPUSH
39773: LD_VAR 0 16
39777: PPUSH
39778: CALL_OW 441
39782: GO 39750
39784: POP
39785: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
39786: LD_VAR 0 18
39790: PPUSH
39791: LD_INT 2
39793: PUSH
39794: LD_INT 30
39796: PUSH
39797: LD_INT 32
39799: PUSH
39800: EMPTY
39801: LIST
39802: LIST
39803: PUSH
39804: LD_INT 30
39806: PUSH
39807: LD_INT 33
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: LIST
39818: PPUSH
39819: CALL_OW 72
39823: IFFALSE 39911
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
39825: LD_ADDR_VAR 0 8
39829: PUSH
39830: LD_VAR 0 18
39834: PPUSH
39835: LD_INT 2
39837: PUSH
39838: LD_INT 30
39840: PUSH
39841: LD_INT 32
39843: PUSH
39844: EMPTY
39845: LIST
39846: LIST
39847: PUSH
39848: LD_INT 30
39850: PUSH
39851: LD_INT 33
39853: PUSH
39854: EMPTY
39855: LIST
39856: LIST
39857: PUSH
39858: EMPTY
39859: LIST
39860: LIST
39861: LIST
39862: PPUSH
39863: CALL_OW 72
39867: PUSH
39868: FOR_IN
39869: IFFALSE 39909
// begin if not GetBWeapon ( i ) then
39871: LD_VAR 0 8
39875: PPUSH
39876: CALL_OW 269
39880: NOT
39881: IFFALSE 39907
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
39883: LD_VAR 0 8
39887: PPUSH
39888: LD_VAR 0 8
39892: PPUSH
39893: LD_VAR 0 2
39897: PPUSH
39898: CALL 41157 0 2
39902: PPUSH
39903: CALL_OW 431
// end ;
39907: GO 39868
39909: POP
39910: POP
// end ; for i = 1 to personel do
39911: LD_ADDR_VAR 0 8
39915: PUSH
39916: DOUBLE
39917: LD_INT 1
39919: DEC
39920: ST_TO_ADDR
39921: LD_VAR 0 6
39925: PUSH
39926: FOR_TO
39927: IFFALSE 40991
// begin if i > 4 then
39929: LD_VAR 0 8
39933: PUSH
39934: LD_INT 4
39936: GREATER
39937: IFFALSE 39941
// break ;
39939: GO 40991
// case i of 1 :
39941: LD_VAR 0 8
39945: PUSH
39946: LD_INT 1
39948: DOUBLE
39949: EQUAL
39950: IFTRUE 39954
39952: GO 40034
39954: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
39955: LD_ADDR_VAR 0 12
39959: PUSH
39960: LD_VAR 0 18
39964: PPUSH
39965: LD_INT 22
39967: PUSH
39968: LD_VAR 0 16
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: PUSH
39977: LD_INT 58
39979: PUSH
39980: EMPTY
39981: LIST
39982: PUSH
39983: LD_INT 2
39985: PUSH
39986: LD_INT 30
39988: PUSH
39989: LD_INT 32
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: PUSH
39996: LD_INT 30
39998: PUSH
39999: LD_INT 4
40001: PUSH
40002: EMPTY
40003: LIST
40004: LIST
40005: PUSH
40006: LD_INT 30
40008: PUSH
40009: LD_INT 5
40011: PUSH
40012: EMPTY
40013: LIST
40014: LIST
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: PUSH
40022: EMPTY
40023: LIST
40024: LIST
40025: LIST
40026: PPUSH
40027: CALL_OW 72
40031: ST_TO_ADDR
40032: GO 40256
40034: LD_INT 2
40036: DOUBLE
40037: EQUAL
40038: IFTRUE 40042
40040: GO 40104
40042: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
40043: LD_ADDR_VAR 0 12
40047: PUSH
40048: LD_VAR 0 18
40052: PPUSH
40053: LD_INT 22
40055: PUSH
40056: LD_VAR 0 16
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: PUSH
40065: LD_INT 2
40067: PUSH
40068: LD_INT 30
40070: PUSH
40071: LD_INT 0
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: PUSH
40078: LD_INT 30
40080: PUSH
40081: LD_INT 1
40083: PUSH
40084: EMPTY
40085: LIST
40086: LIST
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: LIST
40092: PUSH
40093: EMPTY
40094: LIST
40095: LIST
40096: PPUSH
40097: CALL_OW 72
40101: ST_TO_ADDR
40102: GO 40256
40104: LD_INT 3
40106: DOUBLE
40107: EQUAL
40108: IFTRUE 40112
40110: GO 40174
40112: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
40113: LD_ADDR_VAR 0 12
40117: PUSH
40118: LD_VAR 0 18
40122: PPUSH
40123: LD_INT 22
40125: PUSH
40126: LD_VAR 0 16
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: PUSH
40135: LD_INT 2
40137: PUSH
40138: LD_INT 30
40140: PUSH
40141: LD_INT 2
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: PUSH
40148: LD_INT 30
40150: PUSH
40151: LD_INT 3
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: LIST
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: PPUSH
40167: CALL_OW 72
40171: ST_TO_ADDR
40172: GO 40256
40174: LD_INT 4
40176: DOUBLE
40177: EQUAL
40178: IFTRUE 40182
40180: GO 40255
40182: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
40183: LD_ADDR_VAR 0 12
40187: PUSH
40188: LD_VAR 0 18
40192: PPUSH
40193: LD_INT 22
40195: PUSH
40196: LD_VAR 0 16
40200: PUSH
40201: EMPTY
40202: LIST
40203: LIST
40204: PUSH
40205: LD_INT 2
40207: PUSH
40208: LD_INT 30
40210: PUSH
40211: LD_INT 6
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PUSH
40218: LD_INT 30
40220: PUSH
40221: LD_INT 7
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: PUSH
40228: LD_INT 30
40230: PUSH
40231: LD_INT 8
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: PUSH
40238: EMPTY
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: PPUSH
40248: CALL_OW 72
40252: ST_TO_ADDR
40253: GO 40256
40255: POP
// if i = 1 then
40256: LD_VAR 0 8
40260: PUSH
40261: LD_INT 1
40263: EQUAL
40264: IFFALSE 40375
// begin tmp := [ ] ;
40266: LD_ADDR_VAR 0 19
40270: PUSH
40271: EMPTY
40272: ST_TO_ADDR
// for j in f do
40273: LD_ADDR_VAR 0 9
40277: PUSH
40278: LD_VAR 0 12
40282: PUSH
40283: FOR_IN
40284: IFFALSE 40357
// if GetBType ( j ) = b_bunker then
40286: LD_VAR 0 9
40290: PPUSH
40291: CALL_OW 266
40295: PUSH
40296: LD_INT 32
40298: EQUAL
40299: IFFALSE 40326
// tmp := Insert ( tmp , 1 , j ) else
40301: LD_ADDR_VAR 0 19
40305: PUSH
40306: LD_VAR 0 19
40310: PPUSH
40311: LD_INT 1
40313: PPUSH
40314: LD_VAR 0 9
40318: PPUSH
40319: CALL_OW 2
40323: ST_TO_ADDR
40324: GO 40355
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40326: LD_ADDR_VAR 0 19
40330: PUSH
40331: LD_VAR 0 19
40335: PPUSH
40336: LD_VAR 0 19
40340: PUSH
40341: LD_INT 1
40343: PLUS
40344: PPUSH
40345: LD_VAR 0 9
40349: PPUSH
40350: CALL_OW 2
40354: ST_TO_ADDR
40355: GO 40283
40357: POP
40358: POP
// if tmp then
40359: LD_VAR 0 19
40363: IFFALSE 40375
// f := tmp ;
40365: LD_ADDR_VAR 0 12
40369: PUSH
40370: LD_VAR 0 19
40374: ST_TO_ADDR
// end ; x := personel [ i ] ;
40375: LD_ADDR_VAR 0 13
40379: PUSH
40380: LD_VAR 0 6
40384: PUSH
40385: LD_VAR 0 8
40389: ARRAY
40390: ST_TO_ADDR
// if x = - 1 then
40391: LD_VAR 0 13
40395: PUSH
40396: LD_INT 1
40398: NEG
40399: EQUAL
40400: IFFALSE 40609
// begin for j in f do
40402: LD_ADDR_VAR 0 9
40406: PUSH
40407: LD_VAR 0 12
40411: PUSH
40412: FOR_IN
40413: IFFALSE 40605
// repeat InitHc ;
40415: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40419: LD_VAR 0 9
40423: PPUSH
40424: CALL_OW 266
40428: PUSH
40429: LD_INT 5
40431: EQUAL
40432: IFFALSE 40502
// begin if UnitsInside ( j ) < 3 then
40434: LD_VAR 0 9
40438: PPUSH
40439: CALL_OW 313
40443: PUSH
40444: LD_INT 3
40446: LESS
40447: IFFALSE 40483
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40449: LD_INT 0
40451: PPUSH
40452: LD_INT 5
40454: PUSH
40455: LD_INT 8
40457: PUSH
40458: LD_INT 9
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: LIST
40465: PUSH
40466: LD_VAR 0 17
40470: ARRAY
40471: PPUSH
40472: LD_VAR 0 4
40476: PPUSH
40477: CALL_OW 380
40481: GO 40500
// PrepareHuman ( false , i , skill ) ;
40483: LD_INT 0
40485: PPUSH
40486: LD_VAR 0 8
40490: PPUSH
40491: LD_VAR 0 4
40495: PPUSH
40496: CALL_OW 380
// end else
40500: GO 40519
// PrepareHuman ( false , i , skill ) ;
40502: LD_INT 0
40504: PPUSH
40505: LD_VAR 0 8
40509: PPUSH
40510: LD_VAR 0 4
40514: PPUSH
40515: CALL_OW 380
// un := CreateHuman ;
40519: LD_ADDR_VAR 0 14
40523: PUSH
40524: CALL_OW 44
40528: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40529: LD_ADDR_VAR 0 7
40533: PUSH
40534: LD_VAR 0 7
40538: PPUSH
40539: LD_INT 1
40541: PPUSH
40542: LD_VAR 0 14
40546: PPUSH
40547: CALL_OW 2
40551: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
40552: LD_VAR 0 14
40556: PPUSH
40557: LD_VAR 0 9
40561: PPUSH
40562: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
40566: LD_VAR 0 9
40570: PPUSH
40571: CALL_OW 313
40575: PUSH
40576: LD_INT 6
40578: EQUAL
40579: PUSH
40580: LD_VAR 0 9
40584: PPUSH
40585: CALL_OW 266
40589: PUSH
40590: LD_INT 32
40592: PUSH
40593: LD_INT 31
40595: PUSH
40596: EMPTY
40597: LIST
40598: LIST
40599: IN
40600: OR
40601: IFFALSE 40415
40603: GO 40412
40605: POP
40606: POP
// end else
40607: GO 40989
// for j = 1 to x do
40609: LD_ADDR_VAR 0 9
40613: PUSH
40614: DOUBLE
40615: LD_INT 1
40617: DEC
40618: ST_TO_ADDR
40619: LD_VAR 0 13
40623: PUSH
40624: FOR_TO
40625: IFFALSE 40987
// begin InitHc ;
40627: CALL_OW 19
// if not f then
40631: LD_VAR 0 12
40635: NOT
40636: IFFALSE 40725
// begin PrepareHuman ( false , i , skill ) ;
40638: LD_INT 0
40640: PPUSH
40641: LD_VAR 0 8
40645: PPUSH
40646: LD_VAR 0 4
40650: PPUSH
40651: CALL_OW 380
// un := CreateHuman ;
40655: LD_ADDR_VAR 0 14
40659: PUSH
40660: CALL_OW 44
40664: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40665: LD_ADDR_VAR 0 7
40669: PUSH
40670: LD_VAR 0 7
40674: PPUSH
40675: LD_INT 1
40677: PPUSH
40678: LD_VAR 0 14
40682: PPUSH
40683: CALL_OW 2
40687: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
40688: LD_VAR 0 14
40692: PPUSH
40693: LD_VAR 0 1
40697: PPUSH
40698: CALL_OW 250
40702: PPUSH
40703: LD_VAR 0 1
40707: PPUSH
40708: CALL_OW 251
40712: PPUSH
40713: LD_INT 10
40715: PPUSH
40716: LD_INT 0
40718: PPUSH
40719: CALL_OW 50
// continue ;
40723: GO 40624
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
40725: LD_VAR 0 12
40729: PUSH
40730: LD_INT 1
40732: ARRAY
40733: PPUSH
40734: CALL_OW 313
40738: PUSH
40739: LD_VAR 0 12
40743: PUSH
40744: LD_INT 1
40746: ARRAY
40747: PPUSH
40748: CALL_OW 266
40752: PUSH
40753: LD_INT 32
40755: PUSH
40756: LD_INT 31
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: IN
40763: AND
40764: PUSH
40765: LD_VAR 0 12
40769: PUSH
40770: LD_INT 1
40772: ARRAY
40773: PPUSH
40774: CALL_OW 313
40778: PUSH
40779: LD_INT 6
40781: EQUAL
40782: OR
40783: IFFALSE 40803
// f := Delete ( f , 1 ) ;
40785: LD_ADDR_VAR 0 12
40789: PUSH
40790: LD_VAR 0 12
40794: PPUSH
40795: LD_INT 1
40797: PPUSH
40798: CALL_OW 3
40802: ST_TO_ADDR
// if not f then
40803: LD_VAR 0 12
40807: NOT
40808: IFFALSE 40826
// begin x := x + 2 ;
40810: LD_ADDR_VAR 0 13
40814: PUSH
40815: LD_VAR 0 13
40819: PUSH
40820: LD_INT 2
40822: PLUS
40823: ST_TO_ADDR
// continue ;
40824: GO 40624
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
40826: LD_VAR 0 12
40830: PUSH
40831: LD_INT 1
40833: ARRAY
40834: PPUSH
40835: CALL_OW 266
40839: PUSH
40840: LD_INT 5
40842: EQUAL
40843: IFFALSE 40917
// begin if UnitsInside ( f [ 1 ] ) < 3 then
40845: LD_VAR 0 12
40849: PUSH
40850: LD_INT 1
40852: ARRAY
40853: PPUSH
40854: CALL_OW 313
40858: PUSH
40859: LD_INT 3
40861: LESS
40862: IFFALSE 40898
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40864: LD_INT 0
40866: PPUSH
40867: LD_INT 5
40869: PUSH
40870: LD_INT 8
40872: PUSH
40873: LD_INT 9
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: LIST
40880: PUSH
40881: LD_VAR 0 17
40885: ARRAY
40886: PPUSH
40887: LD_VAR 0 4
40891: PPUSH
40892: CALL_OW 380
40896: GO 40915
// PrepareHuman ( false , i , skill ) ;
40898: LD_INT 0
40900: PPUSH
40901: LD_VAR 0 8
40905: PPUSH
40906: LD_VAR 0 4
40910: PPUSH
40911: CALL_OW 380
// end else
40915: GO 40934
// PrepareHuman ( false , i , skill ) ;
40917: LD_INT 0
40919: PPUSH
40920: LD_VAR 0 8
40924: PPUSH
40925: LD_VAR 0 4
40929: PPUSH
40930: CALL_OW 380
// un := CreateHuman ;
40934: LD_ADDR_VAR 0 14
40938: PUSH
40939: CALL_OW 44
40943: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
40944: LD_ADDR_VAR 0 7
40948: PUSH
40949: LD_VAR 0 7
40953: PPUSH
40954: LD_INT 1
40956: PPUSH
40957: LD_VAR 0 14
40961: PPUSH
40962: CALL_OW 2
40966: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
40967: LD_VAR 0 14
40971: PPUSH
40972: LD_VAR 0 12
40976: PUSH
40977: LD_INT 1
40979: ARRAY
40980: PPUSH
40981: CALL_OW 52
// end ;
40985: GO 40624
40987: POP
40988: POP
// end ;
40989: GO 39926
40991: POP
40992: POP
// result := result ^ buildings ;
40993: LD_ADDR_VAR 0 7
40997: PUSH
40998: LD_VAR 0 7
41002: PUSH
41003: LD_VAR 0 18
41007: ADD
41008: ST_TO_ADDR
// end else
41009: GO 41152
// begin for i = 1 to personel do
41011: LD_ADDR_VAR 0 8
41015: PUSH
41016: DOUBLE
41017: LD_INT 1
41019: DEC
41020: ST_TO_ADDR
41021: LD_VAR 0 6
41025: PUSH
41026: FOR_TO
41027: IFFALSE 41150
// begin if i > 4 then
41029: LD_VAR 0 8
41033: PUSH
41034: LD_INT 4
41036: GREATER
41037: IFFALSE 41041
// break ;
41039: GO 41150
// x := personel [ i ] ;
41041: LD_ADDR_VAR 0 13
41045: PUSH
41046: LD_VAR 0 6
41050: PUSH
41051: LD_VAR 0 8
41055: ARRAY
41056: ST_TO_ADDR
// if x = - 1 then
41057: LD_VAR 0 13
41061: PUSH
41062: LD_INT 1
41064: NEG
41065: EQUAL
41066: IFFALSE 41070
// continue ;
41068: GO 41026
// PrepareHuman ( false , i , skill ) ;
41070: LD_INT 0
41072: PPUSH
41073: LD_VAR 0 8
41077: PPUSH
41078: LD_VAR 0 4
41082: PPUSH
41083: CALL_OW 380
// un := CreateHuman ;
41087: LD_ADDR_VAR 0 14
41091: PUSH
41092: CALL_OW 44
41096: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41097: LD_VAR 0 14
41101: PPUSH
41102: LD_VAR 0 1
41106: PPUSH
41107: CALL_OW 250
41111: PPUSH
41112: LD_VAR 0 1
41116: PPUSH
41117: CALL_OW 251
41121: PPUSH
41122: LD_INT 10
41124: PPUSH
41125: LD_INT 0
41127: PPUSH
41128: CALL_OW 50
// result := result ^ un ;
41132: LD_ADDR_VAR 0 7
41136: PUSH
41137: LD_VAR 0 7
41141: PUSH
41142: LD_VAR 0 14
41146: ADD
41147: ST_TO_ADDR
// end ;
41148: GO 41026
41150: POP
41151: POP
// end ; end ;
41152: LD_VAR 0 7
41156: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
41157: LD_INT 0
41159: PPUSH
41160: PPUSH
41161: PPUSH
41162: PPUSH
41163: PPUSH
41164: PPUSH
41165: PPUSH
41166: PPUSH
41167: PPUSH
41168: PPUSH
41169: PPUSH
41170: PPUSH
41171: PPUSH
41172: PPUSH
41173: PPUSH
41174: PPUSH
// result := false ;
41175: LD_ADDR_VAR 0 3
41179: PUSH
41180: LD_INT 0
41182: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
41183: LD_VAR 0 1
41187: NOT
41188: PUSH
41189: LD_VAR 0 1
41193: PPUSH
41194: CALL_OW 266
41198: PUSH
41199: LD_INT 32
41201: PUSH
41202: LD_INT 33
41204: PUSH
41205: EMPTY
41206: LIST
41207: LIST
41208: IN
41209: NOT
41210: OR
41211: IFFALSE 41215
// exit ;
41213: GO 42324
// nat := GetNation ( tower ) ;
41215: LD_ADDR_VAR 0 12
41219: PUSH
41220: LD_VAR 0 1
41224: PPUSH
41225: CALL_OW 248
41229: ST_TO_ADDR
// side := GetSide ( tower ) ;
41230: LD_ADDR_VAR 0 16
41234: PUSH
41235: LD_VAR 0 1
41239: PPUSH
41240: CALL_OW 255
41244: ST_TO_ADDR
// x := GetX ( tower ) ;
41245: LD_ADDR_VAR 0 10
41249: PUSH
41250: LD_VAR 0 1
41254: PPUSH
41255: CALL_OW 250
41259: ST_TO_ADDR
// y := GetY ( tower ) ;
41260: LD_ADDR_VAR 0 11
41264: PUSH
41265: LD_VAR 0 1
41269: PPUSH
41270: CALL_OW 251
41274: ST_TO_ADDR
// if not x or not y then
41275: LD_VAR 0 10
41279: NOT
41280: PUSH
41281: LD_VAR 0 11
41285: NOT
41286: OR
41287: IFFALSE 41291
// exit ;
41289: GO 42324
// weapon := 0 ;
41291: LD_ADDR_VAR 0 18
41295: PUSH
41296: LD_INT 0
41298: ST_TO_ADDR
// fac_list := [ ] ;
41299: LD_ADDR_VAR 0 17
41303: PUSH
41304: EMPTY
41305: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
41306: LD_ADDR_VAR 0 6
41310: PUSH
41311: LD_VAR 0 1
41315: PPUSH
41316: CALL_OW 274
41320: PPUSH
41321: LD_VAR 0 2
41325: PPUSH
41326: LD_INT 0
41328: PPUSH
41329: CALL 38895 0 3
41333: PPUSH
41334: LD_INT 30
41336: PUSH
41337: LD_INT 3
41339: PUSH
41340: EMPTY
41341: LIST
41342: LIST
41343: PPUSH
41344: CALL_OW 72
41348: ST_TO_ADDR
// if not factories then
41349: LD_VAR 0 6
41353: NOT
41354: IFFALSE 41358
// exit ;
41356: GO 42324
// for i in factories do
41358: LD_ADDR_VAR 0 8
41362: PUSH
41363: LD_VAR 0 6
41367: PUSH
41368: FOR_IN
41369: IFFALSE 41394
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41371: LD_ADDR_VAR 0 17
41375: PUSH
41376: LD_VAR 0 17
41380: PUSH
41381: LD_VAR 0 8
41385: PPUSH
41386: CALL_OW 478
41390: UNION
41391: ST_TO_ADDR
41392: GO 41368
41394: POP
41395: POP
// if not fac_list then
41396: LD_VAR 0 17
41400: NOT
41401: IFFALSE 41405
// exit ;
41403: GO 42324
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41405: LD_ADDR_VAR 0 5
41409: PUSH
41410: LD_INT 4
41412: PUSH
41413: LD_INT 5
41415: PUSH
41416: LD_INT 9
41418: PUSH
41419: LD_INT 10
41421: PUSH
41422: LD_INT 6
41424: PUSH
41425: LD_INT 7
41427: PUSH
41428: LD_INT 11
41430: PUSH
41431: EMPTY
41432: LIST
41433: LIST
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: PUSH
41440: LD_INT 27
41442: PUSH
41443: LD_INT 28
41445: PUSH
41446: LD_INT 26
41448: PUSH
41449: LD_INT 30
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: PUSH
41458: LD_INT 43
41460: PUSH
41461: LD_INT 44
41463: PUSH
41464: LD_INT 46
41466: PUSH
41467: LD_INT 45
41469: PUSH
41470: LD_INT 47
41472: PUSH
41473: LD_INT 49
41475: PUSH
41476: EMPTY
41477: LIST
41478: LIST
41479: LIST
41480: LIST
41481: LIST
41482: LIST
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: LIST
41488: PUSH
41489: LD_VAR 0 12
41493: ARRAY
41494: ST_TO_ADDR
// list := list isect fac_list ;
41495: LD_ADDR_VAR 0 5
41499: PUSH
41500: LD_VAR 0 5
41504: PUSH
41505: LD_VAR 0 17
41509: ISECT
41510: ST_TO_ADDR
// if not list then
41511: LD_VAR 0 5
41515: NOT
41516: IFFALSE 41520
// exit ;
41518: GO 42324
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
41520: LD_VAR 0 12
41524: PUSH
41525: LD_INT 3
41527: EQUAL
41528: PUSH
41529: LD_INT 49
41531: PUSH
41532: LD_VAR 0 5
41536: IN
41537: AND
41538: PUSH
41539: LD_INT 31
41541: PPUSH
41542: LD_VAR 0 16
41546: PPUSH
41547: CALL_OW 321
41551: PUSH
41552: LD_INT 2
41554: EQUAL
41555: AND
41556: IFFALSE 41616
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
41558: LD_INT 22
41560: PUSH
41561: LD_VAR 0 16
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: LD_INT 35
41572: PUSH
41573: LD_INT 49
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 91
41582: PUSH
41583: LD_VAR 0 1
41587: PUSH
41588: LD_INT 10
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: LIST
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: LIST
41600: PPUSH
41601: CALL_OW 69
41605: NOT
41606: IFFALSE 41616
// weapon := ru_time_lapser ;
41608: LD_ADDR_VAR 0 18
41612: PUSH
41613: LD_INT 49
41615: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
41616: LD_VAR 0 12
41620: PUSH
41621: LD_INT 1
41623: PUSH
41624: LD_INT 2
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: IN
41631: PUSH
41632: LD_INT 11
41634: PUSH
41635: LD_VAR 0 5
41639: IN
41640: PUSH
41641: LD_INT 30
41643: PUSH
41644: LD_VAR 0 5
41648: IN
41649: OR
41650: AND
41651: PUSH
41652: LD_INT 6
41654: PPUSH
41655: LD_VAR 0 16
41659: PPUSH
41660: CALL_OW 321
41664: PUSH
41665: LD_INT 2
41667: EQUAL
41668: AND
41669: IFFALSE 41834
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
41671: LD_INT 22
41673: PUSH
41674: LD_VAR 0 16
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 2
41685: PUSH
41686: LD_INT 35
41688: PUSH
41689: LD_INT 11
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: PUSH
41696: LD_INT 35
41698: PUSH
41699: LD_INT 30
41701: PUSH
41702: EMPTY
41703: LIST
41704: LIST
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: LIST
41710: PUSH
41711: LD_INT 91
41713: PUSH
41714: LD_VAR 0 1
41718: PUSH
41719: LD_INT 18
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: LIST
41726: PUSH
41727: EMPTY
41728: LIST
41729: LIST
41730: LIST
41731: PPUSH
41732: CALL_OW 69
41736: NOT
41737: PUSH
41738: LD_INT 22
41740: PUSH
41741: LD_VAR 0 16
41745: PUSH
41746: EMPTY
41747: LIST
41748: LIST
41749: PUSH
41750: LD_INT 2
41752: PUSH
41753: LD_INT 30
41755: PUSH
41756: LD_INT 32
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: PUSH
41763: LD_INT 30
41765: PUSH
41766: LD_INT 33
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: PUSH
41773: EMPTY
41774: LIST
41775: LIST
41776: LIST
41777: PUSH
41778: LD_INT 91
41780: PUSH
41781: LD_VAR 0 1
41785: PUSH
41786: LD_INT 12
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: LIST
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: LIST
41798: PUSH
41799: EMPTY
41800: LIST
41801: PPUSH
41802: CALL_OW 69
41806: PUSH
41807: LD_INT 2
41809: GREATER
41810: AND
41811: IFFALSE 41834
// weapon := [ us_radar , ar_radar ] [ nat ] ;
41813: LD_ADDR_VAR 0 18
41817: PUSH
41818: LD_INT 11
41820: PUSH
41821: LD_INT 30
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: PUSH
41828: LD_VAR 0 12
41832: ARRAY
41833: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
41834: LD_VAR 0 18
41838: NOT
41839: PUSH
41840: LD_INT 40
41842: PPUSH
41843: LD_VAR 0 16
41847: PPUSH
41848: CALL_OW 321
41852: PUSH
41853: LD_INT 2
41855: EQUAL
41856: AND
41857: PUSH
41858: LD_INT 7
41860: PUSH
41861: LD_VAR 0 5
41865: IN
41866: PUSH
41867: LD_INT 28
41869: PUSH
41870: LD_VAR 0 5
41874: IN
41875: OR
41876: PUSH
41877: LD_INT 45
41879: PUSH
41880: LD_VAR 0 5
41884: IN
41885: OR
41886: AND
41887: IFFALSE 42141
// begin hex := GetHexInfo ( x , y ) ;
41889: LD_ADDR_VAR 0 4
41893: PUSH
41894: LD_VAR 0 10
41898: PPUSH
41899: LD_VAR 0 11
41903: PPUSH
41904: CALL_OW 546
41908: ST_TO_ADDR
// if hex [ 1 ] then
41909: LD_VAR 0 4
41913: PUSH
41914: LD_INT 1
41916: ARRAY
41917: IFFALSE 41921
// exit ;
41919: GO 42324
// height := hex [ 2 ] ;
41921: LD_ADDR_VAR 0 15
41925: PUSH
41926: LD_VAR 0 4
41930: PUSH
41931: LD_INT 2
41933: ARRAY
41934: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
41935: LD_ADDR_VAR 0 14
41939: PUSH
41940: LD_INT 0
41942: PUSH
41943: LD_INT 2
41945: PUSH
41946: LD_INT 3
41948: PUSH
41949: LD_INT 5
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: LIST
41956: LIST
41957: ST_TO_ADDR
// for i in tmp do
41958: LD_ADDR_VAR 0 8
41962: PUSH
41963: LD_VAR 0 14
41967: PUSH
41968: FOR_IN
41969: IFFALSE 42139
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
41971: LD_ADDR_VAR 0 9
41975: PUSH
41976: LD_VAR 0 10
41980: PPUSH
41981: LD_VAR 0 8
41985: PPUSH
41986: LD_INT 5
41988: PPUSH
41989: CALL_OW 272
41993: PUSH
41994: LD_VAR 0 11
41998: PPUSH
41999: LD_VAR 0 8
42003: PPUSH
42004: LD_INT 5
42006: PPUSH
42007: CALL_OW 273
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
42016: LD_VAR 0 9
42020: PUSH
42021: LD_INT 1
42023: ARRAY
42024: PPUSH
42025: LD_VAR 0 9
42029: PUSH
42030: LD_INT 2
42032: ARRAY
42033: PPUSH
42034: CALL_OW 488
42038: IFFALSE 42137
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
42040: LD_ADDR_VAR 0 4
42044: PUSH
42045: LD_VAR 0 9
42049: PUSH
42050: LD_INT 1
42052: ARRAY
42053: PPUSH
42054: LD_VAR 0 9
42058: PUSH
42059: LD_INT 2
42061: ARRAY
42062: PPUSH
42063: CALL_OW 546
42067: ST_TO_ADDR
// if hex [ 1 ] then
42068: LD_VAR 0 4
42072: PUSH
42073: LD_INT 1
42075: ARRAY
42076: IFFALSE 42080
// continue ;
42078: GO 41968
// h := hex [ 2 ] ;
42080: LD_ADDR_VAR 0 13
42084: PUSH
42085: LD_VAR 0 4
42089: PUSH
42090: LD_INT 2
42092: ARRAY
42093: ST_TO_ADDR
// if h + 7 < height then
42094: LD_VAR 0 13
42098: PUSH
42099: LD_INT 7
42101: PLUS
42102: PUSH
42103: LD_VAR 0 15
42107: LESS
42108: IFFALSE 42137
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
42110: LD_ADDR_VAR 0 18
42114: PUSH
42115: LD_INT 7
42117: PUSH
42118: LD_INT 28
42120: PUSH
42121: LD_INT 45
42123: PUSH
42124: EMPTY
42125: LIST
42126: LIST
42127: LIST
42128: PUSH
42129: LD_VAR 0 12
42133: ARRAY
42134: ST_TO_ADDR
// break ;
42135: GO 42139
// end ; end ; end ;
42137: GO 41968
42139: POP
42140: POP
// end ; if not weapon then
42141: LD_VAR 0 18
42145: NOT
42146: IFFALSE 42206
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
42148: LD_ADDR_VAR 0 5
42152: PUSH
42153: LD_VAR 0 5
42157: PUSH
42158: LD_INT 11
42160: PUSH
42161: LD_INT 30
42163: PUSH
42164: LD_INT 49
42166: PUSH
42167: EMPTY
42168: LIST
42169: LIST
42170: LIST
42171: DIFF
42172: ST_TO_ADDR
// if not list then
42173: LD_VAR 0 5
42177: NOT
42178: IFFALSE 42182
// exit ;
42180: GO 42324
// weapon := list [ rand ( 1 , list ) ] ;
42182: LD_ADDR_VAR 0 18
42186: PUSH
42187: LD_VAR 0 5
42191: PUSH
42192: LD_INT 1
42194: PPUSH
42195: LD_VAR 0 5
42199: PPUSH
42200: CALL_OW 12
42204: ARRAY
42205: ST_TO_ADDR
// end ; if weapon then
42206: LD_VAR 0 18
42210: IFFALSE 42324
// begin tmp := CostOfWeapon ( weapon ) ;
42212: LD_ADDR_VAR 0 14
42216: PUSH
42217: LD_VAR 0 18
42221: PPUSH
42222: CALL_OW 451
42226: ST_TO_ADDR
// j := GetBase ( tower ) ;
42227: LD_ADDR_VAR 0 9
42231: PUSH
42232: LD_VAR 0 1
42236: PPUSH
42237: CALL_OW 274
42241: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42242: LD_VAR 0 9
42246: PPUSH
42247: LD_INT 1
42249: PPUSH
42250: CALL_OW 275
42254: PUSH
42255: LD_VAR 0 14
42259: PUSH
42260: LD_INT 1
42262: ARRAY
42263: GREATEREQUAL
42264: PUSH
42265: LD_VAR 0 9
42269: PPUSH
42270: LD_INT 2
42272: PPUSH
42273: CALL_OW 275
42277: PUSH
42278: LD_VAR 0 14
42282: PUSH
42283: LD_INT 2
42285: ARRAY
42286: GREATEREQUAL
42287: AND
42288: PUSH
42289: LD_VAR 0 9
42293: PPUSH
42294: LD_INT 3
42296: PPUSH
42297: CALL_OW 275
42301: PUSH
42302: LD_VAR 0 14
42306: PUSH
42307: LD_INT 3
42309: ARRAY
42310: GREATEREQUAL
42311: AND
42312: IFFALSE 42324
// result := weapon ;
42314: LD_ADDR_VAR 0 3
42318: PUSH
42319: LD_VAR 0 18
42323: ST_TO_ADDR
// end ; end ;
42324: LD_VAR 0 3
42328: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42329: LD_INT 0
42331: PPUSH
42332: PPUSH
// result := true ;
42333: LD_ADDR_VAR 0 3
42337: PUSH
42338: LD_INT 1
42340: ST_TO_ADDR
// if array1 = array2 then
42341: LD_VAR 0 1
42345: PUSH
42346: LD_VAR 0 2
42350: EQUAL
42351: IFFALSE 42411
// begin for i = 1 to array1 do
42353: LD_ADDR_VAR 0 4
42357: PUSH
42358: DOUBLE
42359: LD_INT 1
42361: DEC
42362: ST_TO_ADDR
42363: LD_VAR 0 1
42367: PUSH
42368: FOR_TO
42369: IFFALSE 42407
// if array1 [ i ] <> array2 [ i ] then
42371: LD_VAR 0 1
42375: PUSH
42376: LD_VAR 0 4
42380: ARRAY
42381: PUSH
42382: LD_VAR 0 2
42386: PUSH
42387: LD_VAR 0 4
42391: ARRAY
42392: NONEQUAL
42393: IFFALSE 42405
// begin result := false ;
42395: LD_ADDR_VAR 0 3
42399: PUSH
42400: LD_INT 0
42402: ST_TO_ADDR
// break ;
42403: GO 42407
// end ;
42405: GO 42368
42407: POP
42408: POP
// end else
42409: GO 42419
// result := false ;
42411: LD_ADDR_VAR 0 3
42415: PUSH
42416: LD_INT 0
42418: ST_TO_ADDR
// end ;
42419: LD_VAR 0 3
42423: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
42424: LD_INT 0
42426: PPUSH
42427: PPUSH
// if not array1 or not array2 then
42428: LD_VAR 0 1
42432: NOT
42433: PUSH
42434: LD_VAR 0 2
42438: NOT
42439: OR
42440: IFFALSE 42444
// exit ;
42442: GO 42508
// result := true ;
42444: LD_ADDR_VAR 0 3
42448: PUSH
42449: LD_INT 1
42451: ST_TO_ADDR
// for i = 1 to array1 do
42452: LD_ADDR_VAR 0 4
42456: PUSH
42457: DOUBLE
42458: LD_INT 1
42460: DEC
42461: ST_TO_ADDR
42462: LD_VAR 0 1
42466: PUSH
42467: FOR_TO
42468: IFFALSE 42506
// if array1 [ i ] <> array2 [ i ] then
42470: LD_VAR 0 1
42474: PUSH
42475: LD_VAR 0 4
42479: ARRAY
42480: PUSH
42481: LD_VAR 0 2
42485: PUSH
42486: LD_VAR 0 4
42490: ARRAY
42491: NONEQUAL
42492: IFFALSE 42504
// begin result := false ;
42494: LD_ADDR_VAR 0 3
42498: PUSH
42499: LD_INT 0
42501: ST_TO_ADDR
// break ;
42502: GO 42506
// end ;
42504: GO 42467
42506: POP
42507: POP
// end ;
42508: LD_VAR 0 3
42512: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42513: LD_INT 0
42515: PPUSH
42516: PPUSH
42517: PPUSH
// pom := GetBase ( fac ) ;
42518: LD_ADDR_VAR 0 5
42522: PUSH
42523: LD_VAR 0 1
42527: PPUSH
42528: CALL_OW 274
42532: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
42533: LD_ADDR_VAR 0 4
42537: PUSH
42538: LD_VAR 0 2
42542: PUSH
42543: LD_INT 1
42545: ARRAY
42546: PPUSH
42547: LD_VAR 0 2
42551: PUSH
42552: LD_INT 2
42554: ARRAY
42555: PPUSH
42556: LD_VAR 0 2
42560: PUSH
42561: LD_INT 3
42563: ARRAY
42564: PPUSH
42565: LD_VAR 0 2
42569: PUSH
42570: LD_INT 4
42572: ARRAY
42573: PPUSH
42574: CALL_OW 449
42578: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42579: LD_ADDR_VAR 0 3
42583: PUSH
42584: LD_VAR 0 5
42588: PPUSH
42589: LD_INT 1
42591: PPUSH
42592: CALL_OW 275
42596: PUSH
42597: LD_VAR 0 4
42601: PUSH
42602: LD_INT 1
42604: ARRAY
42605: GREATEREQUAL
42606: PUSH
42607: LD_VAR 0 5
42611: PPUSH
42612: LD_INT 2
42614: PPUSH
42615: CALL_OW 275
42619: PUSH
42620: LD_VAR 0 4
42624: PUSH
42625: LD_INT 2
42627: ARRAY
42628: GREATEREQUAL
42629: AND
42630: PUSH
42631: LD_VAR 0 5
42635: PPUSH
42636: LD_INT 3
42638: PPUSH
42639: CALL_OW 275
42643: PUSH
42644: LD_VAR 0 4
42648: PUSH
42649: LD_INT 3
42651: ARRAY
42652: GREATEREQUAL
42653: AND
42654: ST_TO_ADDR
// end ;
42655: LD_VAR 0 3
42659: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
42660: LD_INT 0
42662: PPUSH
42663: PPUSH
42664: PPUSH
42665: PPUSH
// pom := GetBase ( building ) ;
42666: LD_ADDR_VAR 0 3
42670: PUSH
42671: LD_VAR 0 1
42675: PPUSH
42676: CALL_OW 274
42680: ST_TO_ADDR
// if not pom then
42681: LD_VAR 0 3
42685: NOT
42686: IFFALSE 42690
// exit ;
42688: GO 42860
// btype := GetBType ( building ) ;
42690: LD_ADDR_VAR 0 5
42694: PUSH
42695: LD_VAR 0 1
42699: PPUSH
42700: CALL_OW 266
42704: ST_TO_ADDR
// if btype = b_armoury then
42705: LD_VAR 0 5
42709: PUSH
42710: LD_INT 4
42712: EQUAL
42713: IFFALSE 42723
// btype := b_barracks ;
42715: LD_ADDR_VAR 0 5
42719: PUSH
42720: LD_INT 5
42722: ST_TO_ADDR
// if btype = b_depot then
42723: LD_VAR 0 5
42727: PUSH
42728: LD_INT 0
42730: EQUAL
42731: IFFALSE 42741
// btype := b_warehouse ;
42733: LD_ADDR_VAR 0 5
42737: PUSH
42738: LD_INT 1
42740: ST_TO_ADDR
// if btype = b_workshop then
42741: LD_VAR 0 5
42745: PUSH
42746: LD_INT 2
42748: EQUAL
42749: IFFALSE 42759
// btype := b_factory ;
42751: LD_ADDR_VAR 0 5
42755: PUSH
42756: LD_INT 3
42758: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42759: LD_ADDR_VAR 0 4
42763: PUSH
42764: LD_VAR 0 5
42768: PPUSH
42769: LD_VAR 0 1
42773: PPUSH
42774: CALL_OW 248
42778: PPUSH
42779: CALL_OW 450
42783: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42784: LD_ADDR_VAR 0 2
42788: PUSH
42789: LD_VAR 0 3
42793: PPUSH
42794: LD_INT 1
42796: PPUSH
42797: CALL_OW 275
42801: PUSH
42802: LD_VAR 0 4
42806: PUSH
42807: LD_INT 1
42809: ARRAY
42810: GREATEREQUAL
42811: PUSH
42812: LD_VAR 0 3
42816: PPUSH
42817: LD_INT 2
42819: PPUSH
42820: CALL_OW 275
42824: PUSH
42825: LD_VAR 0 4
42829: PUSH
42830: LD_INT 2
42832: ARRAY
42833: GREATEREQUAL
42834: AND
42835: PUSH
42836: LD_VAR 0 3
42840: PPUSH
42841: LD_INT 3
42843: PPUSH
42844: CALL_OW 275
42848: PUSH
42849: LD_VAR 0 4
42853: PUSH
42854: LD_INT 3
42856: ARRAY
42857: GREATEREQUAL
42858: AND
42859: ST_TO_ADDR
// end ;
42860: LD_VAR 0 2
42864: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
42865: LD_INT 0
42867: PPUSH
42868: PPUSH
42869: PPUSH
// pom := GetBase ( building ) ;
42870: LD_ADDR_VAR 0 4
42874: PUSH
42875: LD_VAR 0 1
42879: PPUSH
42880: CALL_OW 274
42884: ST_TO_ADDR
// if not pom then
42885: LD_VAR 0 4
42889: NOT
42890: IFFALSE 42894
// exit ;
42892: GO 42995
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
42894: LD_ADDR_VAR 0 5
42898: PUSH
42899: LD_VAR 0 2
42903: PPUSH
42904: LD_VAR 0 1
42908: PPUSH
42909: CALL_OW 248
42913: PPUSH
42914: CALL_OW 450
42918: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
42919: LD_ADDR_VAR 0 3
42923: PUSH
42924: LD_VAR 0 4
42928: PPUSH
42929: LD_INT 1
42931: PPUSH
42932: CALL_OW 275
42936: PUSH
42937: LD_VAR 0 5
42941: PUSH
42942: LD_INT 1
42944: ARRAY
42945: GREATEREQUAL
42946: PUSH
42947: LD_VAR 0 4
42951: PPUSH
42952: LD_INT 2
42954: PPUSH
42955: CALL_OW 275
42959: PUSH
42960: LD_VAR 0 5
42964: PUSH
42965: LD_INT 2
42967: ARRAY
42968: GREATEREQUAL
42969: AND
42970: PUSH
42971: LD_VAR 0 4
42975: PPUSH
42976: LD_INT 3
42978: PPUSH
42979: CALL_OW 275
42983: PUSH
42984: LD_VAR 0 5
42988: PUSH
42989: LD_INT 3
42991: ARRAY
42992: GREATEREQUAL
42993: AND
42994: ST_TO_ADDR
// end ;
42995: LD_VAR 0 3
42999: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
43000: LD_INT 0
43002: PPUSH
43003: PPUSH
43004: PPUSH
43005: PPUSH
43006: PPUSH
43007: PPUSH
43008: PPUSH
43009: PPUSH
43010: PPUSH
43011: PPUSH
43012: PPUSH
// result := false ;
43013: LD_ADDR_VAR 0 8
43017: PUSH
43018: LD_INT 0
43020: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
43021: LD_VAR 0 5
43025: NOT
43026: PUSH
43027: LD_VAR 0 1
43031: NOT
43032: OR
43033: PUSH
43034: LD_VAR 0 2
43038: NOT
43039: OR
43040: PUSH
43041: LD_VAR 0 3
43045: NOT
43046: OR
43047: IFFALSE 43051
// exit ;
43049: GO 43865
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
43051: LD_ADDR_VAR 0 14
43055: PUSH
43056: LD_VAR 0 1
43060: PPUSH
43061: LD_VAR 0 2
43065: PPUSH
43066: LD_VAR 0 3
43070: PPUSH
43071: LD_VAR 0 4
43075: PPUSH
43076: LD_VAR 0 5
43080: PUSH
43081: LD_INT 1
43083: ARRAY
43084: PPUSH
43085: CALL_OW 248
43089: PPUSH
43090: LD_INT 0
43092: PPUSH
43093: CALL 45102 0 6
43097: ST_TO_ADDR
// if not hexes then
43098: LD_VAR 0 14
43102: NOT
43103: IFFALSE 43107
// exit ;
43105: GO 43865
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43107: LD_ADDR_VAR 0 17
43111: PUSH
43112: LD_VAR 0 5
43116: PPUSH
43117: LD_INT 22
43119: PUSH
43120: LD_VAR 0 13
43124: PPUSH
43125: CALL_OW 255
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: PUSH
43134: LD_INT 2
43136: PUSH
43137: LD_INT 30
43139: PUSH
43140: LD_INT 0
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: LD_INT 30
43149: PUSH
43150: LD_INT 1
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: PUSH
43157: EMPTY
43158: LIST
43159: LIST
43160: LIST
43161: PUSH
43162: EMPTY
43163: LIST
43164: LIST
43165: PPUSH
43166: CALL_OW 72
43170: ST_TO_ADDR
// for i = 1 to hexes do
43171: LD_ADDR_VAR 0 9
43175: PUSH
43176: DOUBLE
43177: LD_INT 1
43179: DEC
43180: ST_TO_ADDR
43181: LD_VAR 0 14
43185: PUSH
43186: FOR_TO
43187: IFFALSE 43863
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43189: LD_ADDR_VAR 0 13
43193: PUSH
43194: LD_VAR 0 14
43198: PUSH
43199: LD_VAR 0 9
43203: ARRAY
43204: PUSH
43205: LD_INT 1
43207: ARRAY
43208: PPUSH
43209: LD_VAR 0 14
43213: PUSH
43214: LD_VAR 0 9
43218: ARRAY
43219: PUSH
43220: LD_INT 2
43222: ARRAY
43223: PPUSH
43224: CALL_OW 428
43228: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
43229: LD_VAR 0 14
43233: PUSH
43234: LD_VAR 0 9
43238: ARRAY
43239: PUSH
43240: LD_INT 1
43242: ARRAY
43243: PPUSH
43244: LD_VAR 0 14
43248: PUSH
43249: LD_VAR 0 9
43253: ARRAY
43254: PUSH
43255: LD_INT 2
43257: ARRAY
43258: PPUSH
43259: CALL_OW 351
43263: PUSH
43264: LD_VAR 0 14
43268: PUSH
43269: LD_VAR 0 9
43273: ARRAY
43274: PUSH
43275: LD_INT 1
43277: ARRAY
43278: PPUSH
43279: LD_VAR 0 14
43283: PUSH
43284: LD_VAR 0 9
43288: ARRAY
43289: PUSH
43290: LD_INT 2
43292: ARRAY
43293: PPUSH
43294: CALL_OW 488
43298: NOT
43299: OR
43300: PUSH
43301: LD_VAR 0 13
43305: PPUSH
43306: CALL_OW 247
43310: PUSH
43311: LD_INT 3
43313: EQUAL
43314: OR
43315: IFFALSE 43321
// exit ;
43317: POP
43318: POP
43319: GO 43865
// if not tmp then
43321: LD_VAR 0 13
43325: NOT
43326: IFFALSE 43330
// continue ;
43328: GO 43186
// result := true ;
43330: LD_ADDR_VAR 0 8
43334: PUSH
43335: LD_INT 1
43337: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
43338: LD_VAR 0 6
43342: PUSH
43343: LD_VAR 0 13
43347: PPUSH
43348: CALL_OW 247
43352: PUSH
43353: LD_INT 2
43355: EQUAL
43356: AND
43357: PUSH
43358: LD_VAR 0 13
43362: PPUSH
43363: CALL_OW 263
43367: PUSH
43368: LD_INT 1
43370: EQUAL
43371: AND
43372: IFFALSE 43536
// begin if IsDrivenBy ( tmp ) then
43374: LD_VAR 0 13
43378: PPUSH
43379: CALL_OW 311
43383: IFFALSE 43387
// continue ;
43385: GO 43186
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
43387: LD_VAR 0 6
43391: PPUSH
43392: LD_INT 3
43394: PUSH
43395: LD_INT 60
43397: PUSH
43398: EMPTY
43399: LIST
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: PUSH
43405: LD_INT 3
43407: PUSH
43408: LD_INT 55
43410: PUSH
43411: EMPTY
43412: LIST
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: PPUSH
43422: CALL_OW 72
43426: IFFALSE 43534
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
43428: LD_ADDR_VAR 0 18
43432: PUSH
43433: LD_VAR 0 6
43437: PPUSH
43438: LD_INT 3
43440: PUSH
43441: LD_INT 60
43443: PUSH
43444: EMPTY
43445: LIST
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: LD_INT 3
43453: PUSH
43454: LD_INT 55
43456: PUSH
43457: EMPTY
43458: LIST
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PPUSH
43468: CALL_OW 72
43472: PUSH
43473: LD_INT 1
43475: ARRAY
43476: ST_TO_ADDR
// if IsInUnit ( driver ) then
43477: LD_VAR 0 18
43481: PPUSH
43482: CALL_OW 310
43486: IFFALSE 43497
// ComExit ( driver ) ;
43488: LD_VAR 0 18
43492: PPUSH
43493: CALL 68230 0 1
// AddComEnterUnit ( driver , tmp ) ;
43497: LD_VAR 0 18
43501: PPUSH
43502: LD_VAR 0 13
43506: PPUSH
43507: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
43511: LD_VAR 0 18
43515: PPUSH
43516: LD_VAR 0 7
43520: PPUSH
43521: CALL_OW 173
// AddComExitVehicle ( driver ) ;
43525: LD_VAR 0 18
43529: PPUSH
43530: CALL_OW 181
// end ; continue ;
43534: GO 43186
// end ; if not cleaners or not tmp in cleaners then
43536: LD_VAR 0 6
43540: NOT
43541: PUSH
43542: LD_VAR 0 13
43546: PUSH
43547: LD_VAR 0 6
43551: IN
43552: NOT
43553: OR
43554: IFFALSE 43861
// begin if dep then
43556: LD_VAR 0 17
43560: IFFALSE 43696
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43562: LD_ADDR_VAR 0 16
43566: PUSH
43567: LD_VAR 0 17
43571: PUSH
43572: LD_INT 1
43574: ARRAY
43575: PPUSH
43576: CALL_OW 250
43580: PPUSH
43581: LD_VAR 0 17
43585: PUSH
43586: LD_INT 1
43588: ARRAY
43589: PPUSH
43590: CALL_OW 254
43594: PPUSH
43595: LD_INT 5
43597: PPUSH
43598: CALL_OW 272
43602: PUSH
43603: LD_VAR 0 17
43607: PUSH
43608: LD_INT 1
43610: ARRAY
43611: PPUSH
43612: CALL_OW 251
43616: PPUSH
43617: LD_VAR 0 17
43621: PUSH
43622: LD_INT 1
43624: ARRAY
43625: PPUSH
43626: CALL_OW 254
43630: PPUSH
43631: LD_INT 5
43633: PPUSH
43634: CALL_OW 273
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43643: LD_VAR 0 16
43647: PUSH
43648: LD_INT 1
43650: ARRAY
43651: PPUSH
43652: LD_VAR 0 16
43656: PUSH
43657: LD_INT 2
43659: ARRAY
43660: PPUSH
43661: CALL_OW 488
43665: IFFALSE 43696
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43667: LD_VAR 0 13
43671: PPUSH
43672: LD_VAR 0 16
43676: PUSH
43677: LD_INT 1
43679: ARRAY
43680: PPUSH
43681: LD_VAR 0 16
43685: PUSH
43686: LD_INT 2
43688: ARRAY
43689: PPUSH
43690: CALL_OW 111
// continue ;
43694: GO 43186
// end ; end ; r := GetDir ( tmp ) ;
43696: LD_ADDR_VAR 0 15
43700: PUSH
43701: LD_VAR 0 13
43705: PPUSH
43706: CALL_OW 254
43710: ST_TO_ADDR
// if r = 5 then
43711: LD_VAR 0 15
43715: PUSH
43716: LD_INT 5
43718: EQUAL
43719: IFFALSE 43729
// r := 0 ;
43721: LD_ADDR_VAR 0 15
43725: PUSH
43726: LD_INT 0
43728: ST_TO_ADDR
// for j = r to 5 do
43729: LD_ADDR_VAR 0 10
43733: PUSH
43734: DOUBLE
43735: LD_VAR 0 15
43739: DEC
43740: ST_TO_ADDR
43741: LD_INT 5
43743: PUSH
43744: FOR_TO
43745: IFFALSE 43859
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
43747: LD_ADDR_VAR 0 11
43751: PUSH
43752: LD_VAR 0 13
43756: PPUSH
43757: CALL_OW 250
43761: PPUSH
43762: LD_VAR 0 10
43766: PPUSH
43767: LD_INT 2
43769: PPUSH
43770: CALL_OW 272
43774: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
43775: LD_ADDR_VAR 0 12
43779: PUSH
43780: LD_VAR 0 13
43784: PPUSH
43785: CALL_OW 251
43789: PPUSH
43790: LD_VAR 0 10
43794: PPUSH
43795: LD_INT 2
43797: PPUSH
43798: CALL_OW 273
43802: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
43803: LD_VAR 0 11
43807: PPUSH
43808: LD_VAR 0 12
43812: PPUSH
43813: CALL_OW 488
43817: PUSH
43818: LD_VAR 0 11
43822: PPUSH
43823: LD_VAR 0 12
43827: PPUSH
43828: CALL_OW 428
43832: NOT
43833: AND
43834: IFFALSE 43857
// begin ComMoveXY ( tmp , _x , _y ) ;
43836: LD_VAR 0 13
43840: PPUSH
43841: LD_VAR 0 11
43845: PPUSH
43846: LD_VAR 0 12
43850: PPUSH
43851: CALL_OW 111
// break ;
43855: GO 43859
// end ; end ;
43857: GO 43744
43859: POP
43860: POP
// end ; end ;
43861: GO 43186
43863: POP
43864: POP
// end ;
43865: LD_VAR 0 8
43869: RET
// export function BuildingTechInvented ( side , btype ) ; begin
43870: LD_INT 0
43872: PPUSH
// result := true ;
43873: LD_ADDR_VAR 0 3
43877: PUSH
43878: LD_INT 1
43880: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
43881: LD_VAR 0 2
43885: PUSH
43886: LD_INT 24
43888: DOUBLE
43889: EQUAL
43890: IFTRUE 43900
43892: LD_INT 33
43894: DOUBLE
43895: EQUAL
43896: IFTRUE 43900
43898: GO 43925
43900: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
43901: LD_ADDR_VAR 0 3
43905: PUSH
43906: LD_INT 32
43908: PPUSH
43909: LD_VAR 0 1
43913: PPUSH
43914: CALL_OW 321
43918: PUSH
43919: LD_INT 2
43921: EQUAL
43922: ST_TO_ADDR
43923: GO 44245
43925: LD_INT 20
43927: DOUBLE
43928: EQUAL
43929: IFTRUE 43933
43931: GO 43958
43933: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
43934: LD_ADDR_VAR 0 3
43938: PUSH
43939: LD_INT 6
43941: PPUSH
43942: LD_VAR 0 1
43946: PPUSH
43947: CALL_OW 321
43951: PUSH
43952: LD_INT 2
43954: EQUAL
43955: ST_TO_ADDR
43956: GO 44245
43958: LD_INT 22
43960: DOUBLE
43961: EQUAL
43962: IFTRUE 43972
43964: LD_INT 36
43966: DOUBLE
43967: EQUAL
43968: IFTRUE 43972
43970: GO 43997
43972: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
43973: LD_ADDR_VAR 0 3
43977: PUSH
43978: LD_INT 15
43980: PPUSH
43981: LD_VAR 0 1
43985: PPUSH
43986: CALL_OW 321
43990: PUSH
43991: LD_INT 2
43993: EQUAL
43994: ST_TO_ADDR
43995: GO 44245
43997: LD_INT 30
43999: DOUBLE
44000: EQUAL
44001: IFTRUE 44005
44003: GO 44030
44005: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
44006: LD_ADDR_VAR 0 3
44010: PUSH
44011: LD_INT 20
44013: PPUSH
44014: LD_VAR 0 1
44018: PPUSH
44019: CALL_OW 321
44023: PUSH
44024: LD_INT 2
44026: EQUAL
44027: ST_TO_ADDR
44028: GO 44245
44030: LD_INT 28
44032: DOUBLE
44033: EQUAL
44034: IFTRUE 44044
44036: LD_INT 21
44038: DOUBLE
44039: EQUAL
44040: IFTRUE 44044
44042: GO 44069
44044: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
44045: LD_ADDR_VAR 0 3
44049: PUSH
44050: LD_INT 21
44052: PPUSH
44053: LD_VAR 0 1
44057: PPUSH
44058: CALL_OW 321
44062: PUSH
44063: LD_INT 2
44065: EQUAL
44066: ST_TO_ADDR
44067: GO 44245
44069: LD_INT 16
44071: DOUBLE
44072: EQUAL
44073: IFTRUE 44077
44075: GO 44104
44077: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
44078: LD_ADDR_VAR 0 3
44082: PUSH
44083: LD_EXP 34
44087: PPUSH
44088: LD_VAR 0 1
44092: PPUSH
44093: CALL_OW 321
44097: PUSH
44098: LD_INT 2
44100: EQUAL
44101: ST_TO_ADDR
44102: GO 44245
44104: LD_INT 19
44106: DOUBLE
44107: EQUAL
44108: IFTRUE 44118
44110: LD_INT 23
44112: DOUBLE
44113: EQUAL
44114: IFTRUE 44118
44116: GO 44145
44118: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
44119: LD_ADDR_VAR 0 3
44123: PUSH
44124: LD_EXP 33
44128: PPUSH
44129: LD_VAR 0 1
44133: PPUSH
44134: CALL_OW 321
44138: PUSH
44139: LD_INT 2
44141: EQUAL
44142: ST_TO_ADDR
44143: GO 44245
44145: LD_INT 17
44147: DOUBLE
44148: EQUAL
44149: IFTRUE 44153
44151: GO 44178
44153: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
44154: LD_ADDR_VAR 0 3
44158: PUSH
44159: LD_INT 39
44161: PPUSH
44162: LD_VAR 0 1
44166: PPUSH
44167: CALL_OW 321
44171: PUSH
44172: LD_INT 2
44174: EQUAL
44175: ST_TO_ADDR
44176: GO 44245
44178: LD_INT 18
44180: DOUBLE
44181: EQUAL
44182: IFTRUE 44186
44184: GO 44211
44186: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
44187: LD_ADDR_VAR 0 3
44191: PUSH
44192: LD_INT 40
44194: PPUSH
44195: LD_VAR 0 1
44199: PPUSH
44200: CALL_OW 321
44204: PUSH
44205: LD_INT 2
44207: EQUAL
44208: ST_TO_ADDR
44209: GO 44245
44211: LD_INT 27
44213: DOUBLE
44214: EQUAL
44215: IFTRUE 44219
44217: GO 44244
44219: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
44220: LD_ADDR_VAR 0 3
44224: PUSH
44225: LD_INT 35
44227: PPUSH
44228: LD_VAR 0 1
44232: PPUSH
44233: CALL_OW 321
44237: PUSH
44238: LD_INT 2
44240: EQUAL
44241: ST_TO_ADDR
44242: GO 44245
44244: POP
// end ;
44245: LD_VAR 0 3
44249: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
44250: LD_INT 0
44252: PPUSH
44253: PPUSH
44254: PPUSH
44255: PPUSH
44256: PPUSH
44257: PPUSH
44258: PPUSH
44259: PPUSH
44260: PPUSH
44261: PPUSH
44262: PPUSH
// result := false ;
44263: LD_ADDR_VAR 0 6
44267: PUSH
44268: LD_INT 0
44270: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
44271: LD_VAR 0 1
44275: NOT
44276: PUSH
44277: LD_VAR 0 1
44281: PPUSH
44282: CALL_OW 266
44286: PUSH
44287: LD_INT 0
44289: PUSH
44290: LD_INT 1
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: IN
44297: NOT
44298: OR
44299: PUSH
44300: LD_VAR 0 2
44304: NOT
44305: OR
44306: PUSH
44307: LD_VAR 0 5
44311: PUSH
44312: LD_INT 0
44314: PUSH
44315: LD_INT 1
44317: PUSH
44318: LD_INT 2
44320: PUSH
44321: LD_INT 3
44323: PUSH
44324: LD_INT 4
44326: PUSH
44327: LD_INT 5
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: LIST
44337: IN
44338: NOT
44339: OR
44340: PUSH
44341: LD_VAR 0 3
44345: PPUSH
44346: LD_VAR 0 4
44350: PPUSH
44351: CALL_OW 488
44355: NOT
44356: OR
44357: IFFALSE 44361
// exit ;
44359: GO 45097
// side := GetSide ( depot ) ;
44361: LD_ADDR_VAR 0 9
44365: PUSH
44366: LD_VAR 0 1
44370: PPUSH
44371: CALL_OW 255
44375: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
44376: LD_VAR 0 9
44380: PPUSH
44381: LD_VAR 0 2
44385: PPUSH
44386: CALL 43870 0 2
44390: NOT
44391: IFFALSE 44395
// exit ;
44393: GO 45097
// pom := GetBase ( depot ) ;
44395: LD_ADDR_VAR 0 10
44399: PUSH
44400: LD_VAR 0 1
44404: PPUSH
44405: CALL_OW 274
44409: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44410: LD_ADDR_VAR 0 11
44414: PUSH
44415: LD_VAR 0 2
44419: PPUSH
44420: LD_VAR 0 1
44424: PPUSH
44425: CALL_OW 248
44429: PPUSH
44430: CALL_OW 450
44434: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44435: LD_VAR 0 10
44439: PPUSH
44440: LD_INT 1
44442: PPUSH
44443: CALL_OW 275
44447: PUSH
44448: LD_VAR 0 11
44452: PUSH
44453: LD_INT 1
44455: ARRAY
44456: GREATEREQUAL
44457: PUSH
44458: LD_VAR 0 10
44462: PPUSH
44463: LD_INT 2
44465: PPUSH
44466: CALL_OW 275
44470: PUSH
44471: LD_VAR 0 11
44475: PUSH
44476: LD_INT 2
44478: ARRAY
44479: GREATEREQUAL
44480: AND
44481: PUSH
44482: LD_VAR 0 10
44486: PPUSH
44487: LD_INT 3
44489: PPUSH
44490: CALL_OW 275
44494: PUSH
44495: LD_VAR 0 11
44499: PUSH
44500: LD_INT 3
44502: ARRAY
44503: GREATEREQUAL
44504: AND
44505: NOT
44506: IFFALSE 44510
// exit ;
44508: GO 45097
// if GetBType ( depot ) = b_depot then
44510: LD_VAR 0 1
44514: PPUSH
44515: CALL_OW 266
44519: PUSH
44520: LD_INT 0
44522: EQUAL
44523: IFFALSE 44535
// dist := 28 else
44525: LD_ADDR_VAR 0 14
44529: PUSH
44530: LD_INT 28
44532: ST_TO_ADDR
44533: GO 44543
// dist := 36 ;
44535: LD_ADDR_VAR 0 14
44539: PUSH
44540: LD_INT 36
44542: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44543: LD_VAR 0 1
44547: PPUSH
44548: LD_VAR 0 3
44552: PPUSH
44553: LD_VAR 0 4
44557: PPUSH
44558: CALL_OW 297
44562: PUSH
44563: LD_VAR 0 14
44567: GREATER
44568: IFFALSE 44572
// exit ;
44570: GO 45097
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44572: LD_ADDR_VAR 0 12
44576: PUSH
44577: LD_VAR 0 2
44581: PPUSH
44582: LD_VAR 0 3
44586: PPUSH
44587: LD_VAR 0 4
44591: PPUSH
44592: LD_VAR 0 5
44596: PPUSH
44597: LD_VAR 0 1
44601: PPUSH
44602: CALL_OW 248
44606: PPUSH
44607: LD_INT 0
44609: PPUSH
44610: CALL 45102 0 6
44614: ST_TO_ADDR
// if not hexes then
44615: LD_VAR 0 12
44619: NOT
44620: IFFALSE 44624
// exit ;
44622: GO 45097
// hex := GetHexInfo ( x , y ) ;
44624: LD_ADDR_VAR 0 15
44628: PUSH
44629: LD_VAR 0 3
44633: PPUSH
44634: LD_VAR 0 4
44638: PPUSH
44639: CALL_OW 546
44643: ST_TO_ADDR
// if hex [ 1 ] then
44644: LD_VAR 0 15
44648: PUSH
44649: LD_INT 1
44651: ARRAY
44652: IFFALSE 44656
// exit ;
44654: GO 45097
// height := hex [ 2 ] ;
44656: LD_ADDR_VAR 0 13
44660: PUSH
44661: LD_VAR 0 15
44665: PUSH
44666: LD_INT 2
44668: ARRAY
44669: ST_TO_ADDR
// for i = 1 to hexes do
44670: LD_ADDR_VAR 0 7
44674: PUSH
44675: DOUBLE
44676: LD_INT 1
44678: DEC
44679: ST_TO_ADDR
44680: LD_VAR 0 12
44684: PUSH
44685: FOR_TO
44686: IFFALSE 45016
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44688: LD_VAR 0 12
44692: PUSH
44693: LD_VAR 0 7
44697: ARRAY
44698: PUSH
44699: LD_INT 1
44701: ARRAY
44702: PPUSH
44703: LD_VAR 0 12
44707: PUSH
44708: LD_VAR 0 7
44712: ARRAY
44713: PUSH
44714: LD_INT 2
44716: ARRAY
44717: PPUSH
44718: CALL_OW 488
44722: NOT
44723: PUSH
44724: LD_VAR 0 12
44728: PUSH
44729: LD_VAR 0 7
44733: ARRAY
44734: PUSH
44735: LD_INT 1
44737: ARRAY
44738: PPUSH
44739: LD_VAR 0 12
44743: PUSH
44744: LD_VAR 0 7
44748: ARRAY
44749: PUSH
44750: LD_INT 2
44752: ARRAY
44753: PPUSH
44754: CALL_OW 428
44758: PUSH
44759: LD_INT 0
44761: GREATER
44762: OR
44763: PUSH
44764: LD_VAR 0 12
44768: PUSH
44769: LD_VAR 0 7
44773: ARRAY
44774: PUSH
44775: LD_INT 1
44777: ARRAY
44778: PPUSH
44779: LD_VAR 0 12
44783: PUSH
44784: LD_VAR 0 7
44788: ARRAY
44789: PUSH
44790: LD_INT 2
44792: ARRAY
44793: PPUSH
44794: CALL_OW 351
44798: OR
44799: IFFALSE 44805
// exit ;
44801: POP
44802: POP
44803: GO 45097
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44805: LD_ADDR_VAR 0 8
44809: PUSH
44810: LD_VAR 0 12
44814: PUSH
44815: LD_VAR 0 7
44819: ARRAY
44820: PUSH
44821: LD_INT 1
44823: ARRAY
44824: PPUSH
44825: LD_VAR 0 12
44829: PUSH
44830: LD_VAR 0 7
44834: ARRAY
44835: PUSH
44836: LD_INT 2
44838: ARRAY
44839: PPUSH
44840: CALL_OW 546
44844: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44845: LD_VAR 0 8
44849: PUSH
44850: LD_INT 1
44852: ARRAY
44853: PUSH
44854: LD_VAR 0 8
44858: PUSH
44859: LD_INT 2
44861: ARRAY
44862: PUSH
44863: LD_VAR 0 13
44867: PUSH
44868: LD_INT 2
44870: PLUS
44871: GREATER
44872: OR
44873: PUSH
44874: LD_VAR 0 8
44878: PUSH
44879: LD_INT 2
44881: ARRAY
44882: PUSH
44883: LD_VAR 0 13
44887: PUSH
44888: LD_INT 2
44890: MINUS
44891: LESS
44892: OR
44893: PUSH
44894: LD_VAR 0 8
44898: PUSH
44899: LD_INT 3
44901: ARRAY
44902: PUSH
44903: LD_INT 0
44905: PUSH
44906: LD_INT 8
44908: PUSH
44909: LD_INT 9
44911: PUSH
44912: LD_INT 10
44914: PUSH
44915: LD_INT 11
44917: PUSH
44918: LD_INT 12
44920: PUSH
44921: LD_INT 13
44923: PUSH
44924: LD_INT 16
44926: PUSH
44927: LD_INT 17
44929: PUSH
44930: LD_INT 18
44932: PUSH
44933: LD_INT 19
44935: PUSH
44936: LD_INT 20
44938: PUSH
44939: LD_INT 21
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: LIST
44946: LIST
44947: LIST
44948: LIST
44949: LIST
44950: LIST
44951: LIST
44952: LIST
44953: LIST
44954: LIST
44955: LIST
44956: IN
44957: NOT
44958: OR
44959: PUSH
44960: LD_VAR 0 8
44964: PUSH
44965: LD_INT 5
44967: ARRAY
44968: NOT
44969: OR
44970: PUSH
44971: LD_VAR 0 8
44975: PUSH
44976: LD_INT 6
44978: ARRAY
44979: PUSH
44980: LD_INT 1
44982: PUSH
44983: LD_INT 2
44985: PUSH
44986: LD_INT 7
44988: PUSH
44989: LD_INT 9
44991: PUSH
44992: LD_INT 10
44994: PUSH
44995: LD_INT 11
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: LIST
45002: LIST
45003: LIST
45004: LIST
45005: IN
45006: NOT
45007: OR
45008: IFFALSE 45014
// exit ;
45010: POP
45011: POP
45012: GO 45097
// end ;
45014: GO 44685
45016: POP
45017: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
45018: LD_VAR 0 9
45022: PPUSH
45023: LD_VAR 0 3
45027: PPUSH
45028: LD_VAR 0 4
45032: PPUSH
45033: LD_INT 20
45035: PPUSH
45036: CALL 37043 0 4
45040: PUSH
45041: LD_INT 4
45043: ARRAY
45044: IFFALSE 45048
// exit ;
45046: GO 45097
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
45048: LD_VAR 0 2
45052: PUSH
45053: LD_INT 29
45055: PUSH
45056: LD_INT 30
45058: PUSH
45059: EMPTY
45060: LIST
45061: LIST
45062: IN
45063: PUSH
45064: LD_VAR 0 3
45068: PPUSH
45069: LD_VAR 0 4
45073: PPUSH
45074: LD_VAR 0 9
45078: PPUSH
45079: CALL_OW 440
45083: NOT
45084: AND
45085: IFFALSE 45089
// exit ;
45087: GO 45097
// result := true ;
45089: LD_ADDR_VAR 0 6
45093: PUSH
45094: LD_INT 1
45096: ST_TO_ADDR
// end ;
45097: LD_VAR 0 6
45101: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
45102: LD_INT 0
45104: PPUSH
45105: PPUSH
45106: PPUSH
45107: PPUSH
45108: PPUSH
45109: PPUSH
45110: PPUSH
45111: PPUSH
45112: PPUSH
45113: PPUSH
45114: PPUSH
45115: PPUSH
45116: PPUSH
45117: PPUSH
45118: PPUSH
45119: PPUSH
45120: PPUSH
45121: PPUSH
45122: PPUSH
45123: PPUSH
45124: PPUSH
45125: PPUSH
45126: PPUSH
45127: PPUSH
45128: PPUSH
45129: PPUSH
45130: PPUSH
45131: PPUSH
45132: PPUSH
45133: PPUSH
45134: PPUSH
45135: PPUSH
45136: PPUSH
45137: PPUSH
45138: PPUSH
45139: PPUSH
45140: PPUSH
45141: PPUSH
45142: PPUSH
45143: PPUSH
45144: PPUSH
45145: PPUSH
45146: PPUSH
45147: PPUSH
45148: PPUSH
45149: PPUSH
45150: PPUSH
45151: PPUSH
45152: PPUSH
45153: PPUSH
45154: PPUSH
45155: PPUSH
45156: PPUSH
45157: PPUSH
45158: PPUSH
45159: PPUSH
45160: PPUSH
45161: PPUSH
// result = [ ] ;
45162: LD_ADDR_VAR 0 7
45166: PUSH
45167: EMPTY
45168: ST_TO_ADDR
// temp_list = [ ] ;
45169: LD_ADDR_VAR 0 9
45173: PUSH
45174: EMPTY
45175: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
45176: LD_VAR 0 4
45180: PUSH
45181: LD_INT 0
45183: PUSH
45184: LD_INT 1
45186: PUSH
45187: LD_INT 2
45189: PUSH
45190: LD_INT 3
45192: PUSH
45193: LD_INT 4
45195: PUSH
45196: LD_INT 5
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: LIST
45206: IN
45207: NOT
45208: PUSH
45209: LD_VAR 0 1
45213: PUSH
45214: LD_INT 0
45216: PUSH
45217: LD_INT 1
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: IN
45224: PUSH
45225: LD_VAR 0 5
45229: PUSH
45230: LD_INT 1
45232: PUSH
45233: LD_INT 2
45235: PUSH
45236: LD_INT 3
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: LIST
45243: IN
45244: NOT
45245: AND
45246: OR
45247: IFFALSE 45251
// exit ;
45249: GO 63642
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45251: LD_VAR 0 1
45255: PUSH
45256: LD_INT 6
45258: PUSH
45259: LD_INT 7
45261: PUSH
45262: LD_INT 8
45264: PUSH
45265: LD_INT 13
45267: PUSH
45268: LD_INT 12
45270: PUSH
45271: LD_INT 15
45273: PUSH
45274: LD_INT 11
45276: PUSH
45277: LD_INT 14
45279: PUSH
45280: LD_INT 10
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: LIST
45287: LIST
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: IN
45294: IFFALSE 45304
// btype = b_lab ;
45296: LD_ADDR_VAR 0 1
45300: PUSH
45301: LD_INT 6
45303: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45304: LD_VAR 0 6
45308: PUSH
45309: LD_INT 0
45311: PUSH
45312: LD_INT 1
45314: PUSH
45315: LD_INT 2
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: LIST
45322: IN
45323: NOT
45324: PUSH
45325: LD_VAR 0 1
45329: PUSH
45330: LD_INT 0
45332: PUSH
45333: LD_INT 1
45335: PUSH
45336: LD_INT 2
45338: PUSH
45339: LD_INT 3
45341: PUSH
45342: LD_INT 6
45344: PUSH
45345: LD_INT 36
45347: PUSH
45348: LD_INT 4
45350: PUSH
45351: LD_INT 5
45353: PUSH
45354: LD_INT 31
45356: PUSH
45357: LD_INT 32
45359: PUSH
45360: LD_INT 33
45362: PUSH
45363: EMPTY
45364: LIST
45365: LIST
45366: LIST
45367: LIST
45368: LIST
45369: LIST
45370: LIST
45371: LIST
45372: LIST
45373: LIST
45374: LIST
45375: IN
45376: NOT
45377: PUSH
45378: LD_VAR 0 6
45382: PUSH
45383: LD_INT 1
45385: EQUAL
45386: AND
45387: OR
45388: PUSH
45389: LD_VAR 0 1
45393: PUSH
45394: LD_INT 2
45396: PUSH
45397: LD_INT 3
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: IN
45404: NOT
45405: PUSH
45406: LD_VAR 0 6
45410: PUSH
45411: LD_INT 2
45413: EQUAL
45414: AND
45415: OR
45416: IFFALSE 45426
// mode = 0 ;
45418: LD_ADDR_VAR 0 6
45422: PUSH
45423: LD_INT 0
45425: ST_TO_ADDR
// case mode of 0 :
45426: LD_VAR 0 6
45430: PUSH
45431: LD_INT 0
45433: DOUBLE
45434: EQUAL
45435: IFTRUE 45439
45437: GO 56892
45439: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45440: LD_ADDR_VAR 0 11
45444: PUSH
45445: LD_INT 0
45447: PUSH
45448: LD_INT 0
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 0
45457: PUSH
45458: LD_INT 1
45460: NEG
45461: PUSH
45462: EMPTY
45463: LIST
45464: LIST
45465: PUSH
45466: LD_INT 1
45468: PUSH
45469: LD_INT 0
45471: PUSH
45472: EMPTY
45473: LIST
45474: LIST
45475: PUSH
45476: LD_INT 1
45478: PUSH
45479: LD_INT 1
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 0
45488: PUSH
45489: LD_INT 1
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 1
45498: NEG
45499: PUSH
45500: LD_INT 0
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 1
45509: NEG
45510: PUSH
45511: LD_INT 1
45513: NEG
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 1
45521: NEG
45522: PUSH
45523: LD_INT 2
45525: NEG
45526: PUSH
45527: EMPTY
45528: LIST
45529: LIST
45530: PUSH
45531: LD_INT 0
45533: PUSH
45534: LD_INT 2
45536: NEG
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 1
45544: PUSH
45545: LD_INT 1
45547: NEG
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 1
45555: PUSH
45556: LD_INT 2
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 0
45565: PUSH
45566: LD_INT 2
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 1
45575: NEG
45576: PUSH
45577: LD_INT 1
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 1
45586: PUSH
45587: LD_INT 3
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 0
45596: PUSH
45597: LD_INT 3
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 1
45606: NEG
45607: PUSH
45608: LD_INT 2
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: LIST
45630: LIST
45631: LIST
45632: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45633: LD_ADDR_VAR 0 12
45637: PUSH
45638: LD_INT 0
45640: PUSH
45641: LD_INT 0
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 0
45650: PUSH
45651: LD_INT 1
45653: NEG
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: PUSH
45659: LD_INT 1
45661: PUSH
45662: LD_INT 0
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: PUSH
45669: LD_INT 1
45671: PUSH
45672: LD_INT 1
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 0
45681: PUSH
45682: LD_INT 1
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PUSH
45689: LD_INT 1
45691: NEG
45692: PUSH
45693: LD_INT 0
45695: PUSH
45696: EMPTY
45697: LIST
45698: LIST
45699: PUSH
45700: LD_INT 1
45702: NEG
45703: PUSH
45704: LD_INT 1
45706: NEG
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 1
45714: PUSH
45715: LD_INT 1
45717: NEG
45718: PUSH
45719: EMPTY
45720: LIST
45721: LIST
45722: PUSH
45723: LD_INT 2
45725: PUSH
45726: LD_INT 0
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: PUSH
45733: LD_INT 2
45735: PUSH
45736: LD_INT 1
45738: PUSH
45739: EMPTY
45740: LIST
45741: LIST
45742: PUSH
45743: LD_INT 1
45745: NEG
45746: PUSH
45747: LD_INT 1
45749: PUSH
45750: EMPTY
45751: LIST
45752: LIST
45753: PUSH
45754: LD_INT 2
45756: NEG
45757: PUSH
45758: LD_INT 0
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 2
45767: NEG
45768: PUSH
45769: LD_INT 1
45771: NEG
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: LD_INT 2
45779: NEG
45780: PUSH
45781: LD_INT 1
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_INT 3
45790: NEG
45791: PUSH
45792: LD_INT 0
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 3
45801: NEG
45802: PUSH
45803: LD_INT 1
45805: NEG
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: LIST
45821: LIST
45822: LIST
45823: LIST
45824: LIST
45825: LIST
45826: LIST
45827: LIST
45828: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45829: LD_ADDR_VAR 0 13
45833: PUSH
45834: LD_INT 0
45836: PUSH
45837: LD_INT 0
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PUSH
45844: LD_INT 0
45846: PUSH
45847: LD_INT 1
45849: NEG
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: LD_INT 1
45857: PUSH
45858: LD_INT 0
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: LD_INT 1
45867: PUSH
45868: LD_INT 1
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: LD_INT 0
45877: PUSH
45878: LD_INT 1
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 1
45887: NEG
45888: PUSH
45889: LD_INT 0
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 1
45898: NEG
45899: PUSH
45900: LD_INT 1
45902: NEG
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: PUSH
45908: LD_INT 1
45910: NEG
45911: PUSH
45912: LD_INT 2
45914: NEG
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 2
45922: PUSH
45923: LD_INT 1
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 2
45932: PUSH
45933: LD_INT 2
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 1
45942: PUSH
45943: LD_INT 2
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 2
45952: NEG
45953: PUSH
45954: LD_INT 1
45956: NEG
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 2
45964: NEG
45965: PUSH
45966: LD_INT 2
45968: NEG
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: PUSH
45974: LD_INT 2
45976: NEG
45977: PUSH
45978: LD_INT 3
45980: NEG
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: LD_INT 3
45988: NEG
45989: PUSH
45990: LD_INT 2
45992: NEG
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 3
46000: NEG
46001: PUSH
46002: LD_INT 3
46004: NEG
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: LIST
46018: LIST
46019: LIST
46020: LIST
46021: LIST
46022: LIST
46023: LIST
46024: LIST
46025: LIST
46026: LIST
46027: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46028: LD_ADDR_VAR 0 14
46032: PUSH
46033: LD_INT 0
46035: PUSH
46036: LD_INT 0
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: LD_INT 0
46045: PUSH
46046: LD_INT 1
46048: NEG
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 1
46056: PUSH
46057: LD_INT 0
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 1
46066: PUSH
46067: LD_INT 1
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 0
46076: PUSH
46077: LD_INT 1
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 1
46086: NEG
46087: PUSH
46088: LD_INT 0
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 1
46097: NEG
46098: PUSH
46099: LD_INT 1
46101: NEG
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 1
46109: NEG
46110: PUSH
46111: LD_INT 2
46113: NEG
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: LD_INT 0
46121: PUSH
46122: LD_INT 2
46124: NEG
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 1
46132: PUSH
46133: LD_INT 1
46135: NEG
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 1
46143: PUSH
46144: LD_INT 2
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 0
46153: PUSH
46154: LD_INT 2
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: LD_INT 1
46163: NEG
46164: PUSH
46165: LD_INT 1
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 1
46174: NEG
46175: PUSH
46176: LD_INT 3
46178: NEG
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: LD_INT 0
46186: PUSH
46187: LD_INT 3
46189: NEG
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 1
46197: PUSH
46198: LD_INT 2
46200: NEG
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: LIST
46217: LIST
46218: LIST
46219: LIST
46220: LIST
46221: LIST
46222: LIST
46223: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46224: LD_ADDR_VAR 0 15
46228: PUSH
46229: LD_INT 0
46231: PUSH
46232: LD_INT 0
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 0
46241: PUSH
46242: LD_INT 1
46244: NEG
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 1
46252: PUSH
46253: LD_INT 0
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 1
46262: PUSH
46263: LD_INT 1
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 0
46272: PUSH
46273: LD_INT 1
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 1
46282: NEG
46283: PUSH
46284: LD_INT 0
46286: PUSH
46287: EMPTY
46288: LIST
46289: LIST
46290: PUSH
46291: LD_INT 1
46293: NEG
46294: PUSH
46295: LD_INT 1
46297: NEG
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: PUSH
46303: LD_INT 1
46305: PUSH
46306: LD_INT 1
46308: NEG
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: PUSH
46314: LD_INT 2
46316: PUSH
46317: LD_INT 0
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 2
46326: PUSH
46327: LD_INT 1
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PUSH
46334: LD_INT 1
46336: NEG
46337: PUSH
46338: LD_INT 1
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: LD_INT 2
46347: NEG
46348: PUSH
46349: LD_INT 0
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: LD_INT 2
46358: NEG
46359: PUSH
46360: LD_INT 1
46362: NEG
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 2
46370: PUSH
46371: LD_INT 1
46373: NEG
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: LD_INT 3
46381: PUSH
46382: LD_INT 0
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: LD_INT 3
46391: PUSH
46392: LD_INT 1
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: LIST
46403: LIST
46404: LIST
46405: LIST
46406: LIST
46407: LIST
46408: LIST
46409: LIST
46410: LIST
46411: LIST
46412: LIST
46413: LIST
46414: LIST
46415: LIST
46416: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46417: LD_ADDR_VAR 0 16
46421: PUSH
46422: LD_INT 0
46424: PUSH
46425: LD_INT 0
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: LD_INT 0
46434: PUSH
46435: LD_INT 1
46437: NEG
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 1
46445: PUSH
46446: LD_INT 0
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: LD_INT 1
46455: PUSH
46456: LD_INT 1
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 0
46465: PUSH
46466: LD_INT 1
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 1
46475: NEG
46476: PUSH
46477: LD_INT 0
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 1
46486: NEG
46487: PUSH
46488: LD_INT 1
46490: NEG
46491: PUSH
46492: EMPTY
46493: LIST
46494: LIST
46495: PUSH
46496: LD_INT 1
46498: NEG
46499: PUSH
46500: LD_INT 2
46502: NEG
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 2
46510: PUSH
46511: LD_INT 1
46513: PUSH
46514: EMPTY
46515: LIST
46516: LIST
46517: PUSH
46518: LD_INT 2
46520: PUSH
46521: LD_INT 2
46523: PUSH
46524: EMPTY
46525: LIST
46526: LIST
46527: PUSH
46528: LD_INT 1
46530: PUSH
46531: LD_INT 2
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: PUSH
46538: LD_INT 2
46540: NEG
46541: PUSH
46542: LD_INT 1
46544: NEG
46545: PUSH
46546: EMPTY
46547: LIST
46548: LIST
46549: PUSH
46550: LD_INT 2
46552: NEG
46553: PUSH
46554: LD_INT 2
46556: NEG
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: LD_INT 3
46564: PUSH
46565: LD_INT 2
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 3
46574: PUSH
46575: LD_INT 3
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 2
46584: PUSH
46585: LD_INT 3
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: LIST
46596: LIST
46597: LIST
46598: LIST
46599: LIST
46600: LIST
46601: LIST
46602: LIST
46603: LIST
46604: LIST
46605: LIST
46606: LIST
46607: LIST
46608: LIST
46609: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46610: LD_ADDR_VAR 0 17
46614: PUSH
46615: LD_INT 0
46617: PUSH
46618: LD_INT 0
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 0
46627: PUSH
46628: LD_INT 1
46630: NEG
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: LD_INT 1
46638: PUSH
46639: LD_INT 0
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: LD_INT 1
46648: PUSH
46649: LD_INT 1
46651: PUSH
46652: EMPTY
46653: LIST
46654: LIST
46655: PUSH
46656: LD_INT 0
46658: PUSH
46659: LD_INT 1
46661: PUSH
46662: EMPTY
46663: LIST
46664: LIST
46665: PUSH
46666: LD_INT 1
46668: NEG
46669: PUSH
46670: LD_INT 0
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 1
46679: NEG
46680: PUSH
46681: LD_INT 1
46683: NEG
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 1
46691: NEG
46692: PUSH
46693: LD_INT 2
46695: NEG
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: PUSH
46701: LD_INT 0
46703: PUSH
46704: LD_INT 2
46706: NEG
46707: PUSH
46708: EMPTY
46709: LIST
46710: LIST
46711: PUSH
46712: LD_INT 1
46714: PUSH
46715: LD_INT 1
46717: NEG
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: LD_INT 2
46725: PUSH
46726: LD_INT 0
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 2
46735: PUSH
46736: LD_INT 1
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 2
46745: PUSH
46746: LD_INT 2
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PUSH
46753: LD_INT 1
46755: PUSH
46756: LD_INT 2
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 0
46765: PUSH
46766: LD_INT 2
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: PUSH
46773: LD_INT 1
46775: NEG
46776: PUSH
46777: LD_INT 1
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 2
46786: NEG
46787: PUSH
46788: LD_INT 0
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: PUSH
46795: LD_INT 2
46797: NEG
46798: PUSH
46799: LD_INT 1
46801: NEG
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 2
46809: NEG
46810: PUSH
46811: LD_INT 2
46813: NEG
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46840: LD_ADDR_VAR 0 18
46844: PUSH
46845: LD_INT 0
46847: PUSH
46848: LD_INT 0
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 0
46857: PUSH
46858: LD_INT 1
46860: NEG
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 1
46868: PUSH
46869: LD_INT 0
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: PUSH
46876: LD_INT 1
46878: PUSH
46879: LD_INT 1
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: LD_INT 0
46888: PUSH
46889: LD_INT 1
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 1
46898: NEG
46899: PUSH
46900: LD_INT 0
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 1
46909: NEG
46910: PUSH
46911: LD_INT 1
46913: NEG
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: PUSH
46919: LD_INT 1
46921: NEG
46922: PUSH
46923: LD_INT 2
46925: NEG
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 0
46933: PUSH
46934: LD_INT 2
46936: NEG
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 1
46944: PUSH
46945: LD_INT 1
46947: NEG
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 2
46955: PUSH
46956: LD_INT 0
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 2
46965: PUSH
46966: LD_INT 1
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 2
46975: PUSH
46976: LD_INT 2
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 1
46985: PUSH
46986: LD_INT 2
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 0
46995: PUSH
46996: LD_INT 2
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: PUSH
47003: LD_INT 1
47005: NEG
47006: PUSH
47007: LD_INT 1
47009: PUSH
47010: EMPTY
47011: LIST
47012: LIST
47013: PUSH
47014: LD_INT 2
47016: NEG
47017: PUSH
47018: LD_INT 0
47020: PUSH
47021: EMPTY
47022: LIST
47023: LIST
47024: PUSH
47025: LD_INT 2
47027: NEG
47028: PUSH
47029: LD_INT 1
47031: NEG
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 2
47039: NEG
47040: PUSH
47041: LD_INT 2
47043: NEG
47044: PUSH
47045: EMPTY
47046: LIST
47047: LIST
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: LIST
47053: LIST
47054: LIST
47055: LIST
47056: LIST
47057: LIST
47058: LIST
47059: LIST
47060: LIST
47061: LIST
47062: LIST
47063: LIST
47064: LIST
47065: LIST
47066: LIST
47067: LIST
47068: LIST
47069: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47070: LD_ADDR_VAR 0 19
47074: PUSH
47075: LD_INT 0
47077: PUSH
47078: LD_INT 0
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: PUSH
47085: LD_INT 0
47087: PUSH
47088: LD_INT 1
47090: NEG
47091: PUSH
47092: EMPTY
47093: LIST
47094: LIST
47095: PUSH
47096: LD_INT 1
47098: PUSH
47099: LD_INT 0
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 1
47108: PUSH
47109: LD_INT 1
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 0
47118: PUSH
47119: LD_INT 1
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: PUSH
47126: LD_INT 1
47128: NEG
47129: PUSH
47130: LD_INT 0
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 1
47139: NEG
47140: PUSH
47141: LD_INT 1
47143: NEG
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 1
47151: NEG
47152: PUSH
47153: LD_INT 2
47155: NEG
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 0
47163: PUSH
47164: LD_INT 2
47166: NEG
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: LD_INT 1
47174: PUSH
47175: LD_INT 1
47177: NEG
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 2
47185: PUSH
47186: LD_INT 0
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 2
47195: PUSH
47196: LD_INT 1
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 2
47205: PUSH
47206: LD_INT 2
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: LD_INT 1
47215: PUSH
47216: LD_INT 2
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 0
47225: PUSH
47226: LD_INT 2
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_INT 1
47235: NEG
47236: PUSH
47237: LD_INT 1
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 2
47246: NEG
47247: PUSH
47248: LD_INT 0
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 2
47257: NEG
47258: PUSH
47259: LD_INT 1
47261: NEG
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 2
47269: NEG
47270: PUSH
47271: LD_INT 2
47273: NEG
47274: PUSH
47275: EMPTY
47276: LIST
47277: LIST
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: LIST
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: LIST
47296: LIST
47297: LIST
47298: LIST
47299: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47300: LD_ADDR_VAR 0 20
47304: PUSH
47305: LD_INT 0
47307: PUSH
47308: LD_INT 0
47310: PUSH
47311: EMPTY
47312: LIST
47313: LIST
47314: PUSH
47315: LD_INT 0
47317: PUSH
47318: LD_INT 1
47320: NEG
47321: PUSH
47322: EMPTY
47323: LIST
47324: LIST
47325: PUSH
47326: LD_INT 1
47328: PUSH
47329: LD_INT 0
47331: PUSH
47332: EMPTY
47333: LIST
47334: LIST
47335: PUSH
47336: LD_INT 1
47338: PUSH
47339: LD_INT 1
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 0
47348: PUSH
47349: LD_INT 1
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 1
47358: NEG
47359: PUSH
47360: LD_INT 0
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 1
47369: NEG
47370: PUSH
47371: LD_INT 1
47373: NEG
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 1
47381: NEG
47382: PUSH
47383: LD_INT 2
47385: NEG
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 0
47393: PUSH
47394: LD_INT 2
47396: NEG
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 1
47404: PUSH
47405: LD_INT 1
47407: NEG
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: PUSH
47413: LD_INT 2
47415: PUSH
47416: LD_INT 0
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: LD_INT 2
47425: PUSH
47426: LD_INT 1
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 2
47435: PUSH
47436: LD_INT 2
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 1
47445: PUSH
47446: LD_INT 2
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 0
47455: PUSH
47456: LD_INT 2
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 1
47465: NEG
47466: PUSH
47467: LD_INT 1
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 2
47476: NEG
47477: PUSH
47478: LD_INT 0
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 2
47487: NEG
47488: PUSH
47489: LD_INT 1
47491: NEG
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 2
47499: NEG
47500: PUSH
47501: LD_INT 2
47503: NEG
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: LIST
47513: LIST
47514: LIST
47515: LIST
47516: LIST
47517: LIST
47518: LIST
47519: LIST
47520: LIST
47521: LIST
47522: LIST
47523: LIST
47524: LIST
47525: LIST
47526: LIST
47527: LIST
47528: LIST
47529: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47530: LD_ADDR_VAR 0 21
47534: PUSH
47535: LD_INT 0
47537: PUSH
47538: LD_INT 0
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: LD_INT 0
47547: PUSH
47548: LD_INT 1
47550: NEG
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: PUSH
47556: LD_INT 1
47558: PUSH
47559: LD_INT 0
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: PUSH
47566: LD_INT 1
47568: PUSH
47569: LD_INT 1
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 0
47578: PUSH
47579: LD_INT 1
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: PUSH
47586: LD_INT 1
47588: NEG
47589: PUSH
47590: LD_INT 0
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 1
47599: NEG
47600: PUSH
47601: LD_INT 1
47603: NEG
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 1
47611: NEG
47612: PUSH
47613: LD_INT 2
47615: NEG
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: PUSH
47621: LD_INT 0
47623: PUSH
47624: LD_INT 2
47626: NEG
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: LD_INT 1
47634: PUSH
47635: LD_INT 1
47637: NEG
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 2
47645: PUSH
47646: LD_INT 0
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 2
47655: PUSH
47656: LD_INT 1
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 2
47665: PUSH
47666: LD_INT 2
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 1
47675: PUSH
47676: LD_INT 2
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 0
47685: PUSH
47686: LD_INT 2
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 1
47695: NEG
47696: PUSH
47697: LD_INT 1
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 2
47706: NEG
47707: PUSH
47708: LD_INT 0
47710: PUSH
47711: EMPTY
47712: LIST
47713: LIST
47714: PUSH
47715: LD_INT 2
47717: NEG
47718: PUSH
47719: LD_INT 1
47721: NEG
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: LD_INT 2
47729: NEG
47730: PUSH
47731: LD_INT 2
47733: NEG
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: LIST
47743: LIST
47744: LIST
47745: LIST
47746: LIST
47747: LIST
47748: LIST
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47760: LD_ADDR_VAR 0 22
47764: PUSH
47765: LD_INT 0
47767: PUSH
47768: LD_INT 0
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: PUSH
47775: LD_INT 0
47777: PUSH
47778: LD_INT 1
47780: NEG
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 1
47788: PUSH
47789: LD_INT 0
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 1
47798: PUSH
47799: LD_INT 1
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 0
47808: PUSH
47809: LD_INT 1
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 1
47818: NEG
47819: PUSH
47820: LD_INT 0
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 1
47829: NEG
47830: PUSH
47831: LD_INT 1
47833: NEG
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: PUSH
47839: LD_INT 1
47841: NEG
47842: PUSH
47843: LD_INT 2
47845: NEG
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 0
47853: PUSH
47854: LD_INT 2
47856: NEG
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 1
47864: PUSH
47865: LD_INT 1
47867: NEG
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 2
47875: PUSH
47876: LD_INT 0
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 2
47885: PUSH
47886: LD_INT 1
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 2
47895: PUSH
47896: LD_INT 2
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 1
47905: PUSH
47906: LD_INT 2
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 0
47915: PUSH
47916: LD_INT 2
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 1
47925: NEG
47926: PUSH
47927: LD_INT 1
47929: PUSH
47930: EMPTY
47931: LIST
47932: LIST
47933: PUSH
47934: LD_INT 2
47936: NEG
47937: PUSH
47938: LD_INT 0
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PUSH
47945: LD_INT 2
47947: NEG
47948: PUSH
47949: LD_INT 1
47951: NEG
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 2
47959: NEG
47960: PUSH
47961: LD_INT 2
47963: NEG
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47990: LD_ADDR_VAR 0 23
47994: PUSH
47995: LD_INT 0
47997: PUSH
47998: LD_INT 0
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 0
48007: PUSH
48008: LD_INT 1
48010: NEG
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 1
48018: PUSH
48019: LD_INT 0
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 1
48028: PUSH
48029: LD_INT 1
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 0
48038: PUSH
48039: LD_INT 1
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 1
48048: NEG
48049: PUSH
48050: LD_INT 0
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PUSH
48057: LD_INT 1
48059: NEG
48060: PUSH
48061: LD_INT 1
48063: NEG
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_INT 1
48071: NEG
48072: PUSH
48073: LD_INT 2
48075: NEG
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 0
48083: PUSH
48084: LD_INT 2
48086: NEG
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: LD_INT 1
48094: PUSH
48095: LD_INT 1
48097: NEG
48098: PUSH
48099: EMPTY
48100: LIST
48101: LIST
48102: PUSH
48103: LD_INT 2
48105: PUSH
48106: LD_INT 0
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 2
48115: PUSH
48116: LD_INT 1
48118: PUSH
48119: EMPTY
48120: LIST
48121: LIST
48122: PUSH
48123: LD_INT 2
48125: PUSH
48126: LD_INT 2
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 1
48135: PUSH
48136: LD_INT 2
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: LD_INT 0
48145: PUSH
48146: LD_INT 2
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 1
48155: NEG
48156: PUSH
48157: LD_INT 1
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 2
48166: NEG
48167: PUSH
48168: LD_INT 0
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 2
48177: NEG
48178: PUSH
48179: LD_INT 1
48181: NEG
48182: PUSH
48183: EMPTY
48184: LIST
48185: LIST
48186: PUSH
48187: LD_INT 2
48189: NEG
48190: PUSH
48191: LD_INT 2
48193: NEG
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: PUSH
48199: LD_INT 2
48201: NEG
48202: PUSH
48203: LD_INT 3
48205: NEG
48206: PUSH
48207: EMPTY
48208: LIST
48209: LIST
48210: PUSH
48211: LD_INT 1
48213: NEG
48214: PUSH
48215: LD_INT 3
48217: NEG
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: PUSH
48223: LD_INT 1
48225: PUSH
48226: LD_INT 2
48228: NEG
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 2
48236: PUSH
48237: LD_INT 1
48239: NEG
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: LIST
48249: LIST
48250: LIST
48251: LIST
48252: LIST
48253: LIST
48254: LIST
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: LIST
48260: LIST
48261: LIST
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: LIST
48267: LIST
48268: LIST
48269: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48270: LD_ADDR_VAR 0 24
48274: PUSH
48275: LD_INT 0
48277: PUSH
48278: LD_INT 0
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: LD_INT 0
48287: PUSH
48288: LD_INT 1
48290: NEG
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: LD_INT 1
48298: PUSH
48299: LD_INT 0
48301: PUSH
48302: EMPTY
48303: LIST
48304: LIST
48305: PUSH
48306: LD_INT 1
48308: PUSH
48309: LD_INT 1
48311: PUSH
48312: EMPTY
48313: LIST
48314: LIST
48315: PUSH
48316: LD_INT 0
48318: PUSH
48319: LD_INT 1
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: PUSH
48326: LD_INT 1
48328: NEG
48329: PUSH
48330: LD_INT 0
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 1
48339: NEG
48340: PUSH
48341: LD_INT 1
48343: NEG
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: PUSH
48349: LD_INT 1
48351: NEG
48352: PUSH
48353: LD_INT 2
48355: NEG
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 0
48363: PUSH
48364: LD_INT 2
48366: NEG
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: LD_INT 1
48374: PUSH
48375: LD_INT 1
48377: NEG
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 2
48385: PUSH
48386: LD_INT 0
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 2
48395: PUSH
48396: LD_INT 1
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 2
48405: PUSH
48406: LD_INT 2
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 1
48415: PUSH
48416: LD_INT 2
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 0
48425: PUSH
48426: LD_INT 2
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 1
48435: NEG
48436: PUSH
48437: LD_INT 1
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 2
48446: NEG
48447: PUSH
48448: LD_INT 0
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 2
48457: NEG
48458: PUSH
48459: LD_INT 1
48461: NEG
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: LD_INT 2
48469: NEG
48470: PUSH
48471: LD_INT 2
48473: NEG
48474: PUSH
48475: EMPTY
48476: LIST
48477: LIST
48478: PUSH
48479: LD_INT 1
48481: PUSH
48482: LD_INT 2
48484: NEG
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: PUSH
48490: LD_INT 2
48492: PUSH
48493: LD_INT 1
48495: NEG
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: LD_INT 3
48503: PUSH
48504: LD_INT 1
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 3
48513: PUSH
48514: LD_INT 2
48516: PUSH
48517: EMPTY
48518: LIST
48519: LIST
48520: PUSH
48521: EMPTY
48522: LIST
48523: LIST
48524: LIST
48525: LIST
48526: LIST
48527: LIST
48528: LIST
48529: LIST
48530: LIST
48531: LIST
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48546: LD_ADDR_VAR 0 25
48550: PUSH
48551: LD_INT 0
48553: PUSH
48554: LD_INT 0
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: LD_INT 0
48563: PUSH
48564: LD_INT 1
48566: NEG
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 1
48574: PUSH
48575: LD_INT 0
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 1
48584: PUSH
48585: LD_INT 1
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 0
48594: PUSH
48595: LD_INT 1
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: LD_INT 1
48604: NEG
48605: PUSH
48606: LD_INT 0
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 1
48615: NEG
48616: PUSH
48617: LD_INT 1
48619: NEG
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 1
48627: NEG
48628: PUSH
48629: LD_INT 2
48631: NEG
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 0
48639: PUSH
48640: LD_INT 2
48642: NEG
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: PUSH
48648: LD_INT 1
48650: PUSH
48651: LD_INT 1
48653: NEG
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PUSH
48659: LD_INT 2
48661: PUSH
48662: LD_INT 0
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 2
48671: PUSH
48672: LD_INT 1
48674: PUSH
48675: EMPTY
48676: LIST
48677: LIST
48678: PUSH
48679: LD_INT 2
48681: PUSH
48682: LD_INT 2
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 1
48691: PUSH
48692: LD_INT 2
48694: PUSH
48695: EMPTY
48696: LIST
48697: LIST
48698: PUSH
48699: LD_INT 0
48701: PUSH
48702: LD_INT 2
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 1
48711: NEG
48712: PUSH
48713: LD_INT 1
48715: PUSH
48716: EMPTY
48717: LIST
48718: LIST
48719: PUSH
48720: LD_INT 2
48722: NEG
48723: PUSH
48724: LD_INT 0
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 2
48733: NEG
48734: PUSH
48735: LD_INT 1
48737: NEG
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 2
48745: NEG
48746: PUSH
48747: LD_INT 2
48749: NEG
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 3
48757: PUSH
48758: LD_INT 1
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: PUSH
48765: LD_INT 3
48767: PUSH
48768: LD_INT 2
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: LD_INT 2
48777: PUSH
48778: LD_INT 3
48780: PUSH
48781: EMPTY
48782: LIST
48783: LIST
48784: PUSH
48785: LD_INT 1
48787: PUSH
48788: LD_INT 3
48790: PUSH
48791: EMPTY
48792: LIST
48793: LIST
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: LIST
48808: LIST
48809: LIST
48810: LIST
48811: LIST
48812: LIST
48813: LIST
48814: LIST
48815: LIST
48816: LIST
48817: LIST
48818: LIST
48819: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48820: LD_ADDR_VAR 0 26
48824: PUSH
48825: LD_INT 0
48827: PUSH
48828: LD_INT 0
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 0
48837: PUSH
48838: LD_INT 1
48840: NEG
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: LD_INT 1
48848: PUSH
48849: LD_INT 0
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 1
48858: PUSH
48859: LD_INT 1
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: PUSH
48866: LD_INT 0
48868: PUSH
48869: LD_INT 1
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 1
48878: NEG
48879: PUSH
48880: LD_INT 0
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 1
48889: NEG
48890: PUSH
48891: LD_INT 1
48893: NEG
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: LD_INT 1
48901: NEG
48902: PUSH
48903: LD_INT 2
48905: NEG
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: LD_INT 0
48913: PUSH
48914: LD_INT 2
48916: NEG
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: LD_INT 1
48924: PUSH
48925: LD_INT 1
48927: NEG
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: PUSH
48933: LD_INT 2
48935: PUSH
48936: LD_INT 0
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 2
48945: PUSH
48946: LD_INT 1
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 2
48955: PUSH
48956: LD_INT 2
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 1
48965: PUSH
48966: LD_INT 2
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 0
48975: PUSH
48976: LD_INT 2
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 1
48985: NEG
48986: PUSH
48987: LD_INT 1
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: PUSH
48994: LD_INT 2
48996: NEG
48997: PUSH
48998: LD_INT 0
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 2
49007: NEG
49008: PUSH
49009: LD_INT 1
49011: NEG
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 2
49019: NEG
49020: PUSH
49021: LD_INT 2
49023: NEG
49024: PUSH
49025: EMPTY
49026: LIST
49027: LIST
49028: PUSH
49029: LD_INT 2
49031: PUSH
49032: LD_INT 3
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 1
49041: PUSH
49042: LD_INT 3
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: PUSH
49049: LD_INT 1
49051: NEG
49052: PUSH
49053: LD_INT 2
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 2
49062: NEG
49063: PUSH
49064: LD_INT 1
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: LIST
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49096: LD_ADDR_VAR 0 27
49100: PUSH
49101: LD_INT 0
49103: PUSH
49104: LD_INT 0
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 0
49113: PUSH
49114: LD_INT 1
49116: NEG
49117: PUSH
49118: EMPTY
49119: LIST
49120: LIST
49121: PUSH
49122: LD_INT 1
49124: PUSH
49125: LD_INT 0
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 1
49134: PUSH
49135: LD_INT 1
49137: PUSH
49138: EMPTY
49139: LIST
49140: LIST
49141: PUSH
49142: LD_INT 0
49144: PUSH
49145: LD_INT 1
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 1
49154: NEG
49155: PUSH
49156: LD_INT 0
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: PUSH
49163: LD_INT 1
49165: NEG
49166: PUSH
49167: LD_INT 1
49169: NEG
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 1
49177: NEG
49178: PUSH
49179: LD_INT 2
49181: NEG
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 0
49189: PUSH
49190: LD_INT 2
49192: NEG
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 1
49200: PUSH
49201: LD_INT 1
49203: NEG
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 2
49211: PUSH
49212: LD_INT 0
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 2
49221: PUSH
49222: LD_INT 1
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 2
49231: PUSH
49232: LD_INT 2
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 1
49241: PUSH
49242: LD_INT 2
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: LD_INT 0
49251: PUSH
49252: LD_INT 2
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: LD_INT 1
49261: NEG
49262: PUSH
49263: LD_INT 1
49265: PUSH
49266: EMPTY
49267: LIST
49268: LIST
49269: PUSH
49270: LD_INT 2
49272: NEG
49273: PUSH
49274: LD_INT 0
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 2
49283: NEG
49284: PUSH
49285: LD_INT 1
49287: NEG
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 2
49295: NEG
49296: PUSH
49297: LD_INT 2
49299: NEG
49300: PUSH
49301: EMPTY
49302: LIST
49303: LIST
49304: PUSH
49305: LD_INT 1
49307: NEG
49308: PUSH
49309: LD_INT 2
49311: PUSH
49312: EMPTY
49313: LIST
49314: LIST
49315: PUSH
49316: LD_INT 2
49318: NEG
49319: PUSH
49320: LD_INT 1
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 3
49329: NEG
49330: PUSH
49331: LD_INT 1
49333: NEG
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 3
49341: NEG
49342: PUSH
49343: LD_INT 2
49345: NEG
49346: PUSH
49347: EMPTY
49348: LIST
49349: LIST
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: LIST
49355: LIST
49356: LIST
49357: LIST
49358: LIST
49359: LIST
49360: LIST
49361: LIST
49362: LIST
49363: LIST
49364: LIST
49365: LIST
49366: LIST
49367: LIST
49368: LIST
49369: LIST
49370: LIST
49371: LIST
49372: LIST
49373: LIST
49374: LIST
49375: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49376: LD_ADDR_VAR 0 28
49380: PUSH
49381: LD_INT 0
49383: PUSH
49384: LD_INT 0
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 0
49393: PUSH
49394: LD_INT 1
49396: NEG
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 1
49404: PUSH
49405: LD_INT 0
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: PUSH
49412: LD_INT 1
49414: PUSH
49415: LD_INT 1
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 0
49424: PUSH
49425: LD_INT 1
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 1
49434: NEG
49435: PUSH
49436: LD_INT 0
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 1
49445: NEG
49446: PUSH
49447: LD_INT 1
49449: NEG
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: LD_INT 1
49457: NEG
49458: PUSH
49459: LD_INT 2
49461: NEG
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: LD_INT 0
49469: PUSH
49470: LD_INT 2
49472: NEG
49473: PUSH
49474: EMPTY
49475: LIST
49476: LIST
49477: PUSH
49478: LD_INT 1
49480: PUSH
49481: LD_INT 1
49483: NEG
49484: PUSH
49485: EMPTY
49486: LIST
49487: LIST
49488: PUSH
49489: LD_INT 2
49491: PUSH
49492: LD_INT 0
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 2
49501: PUSH
49502: LD_INT 1
49504: PUSH
49505: EMPTY
49506: LIST
49507: LIST
49508: PUSH
49509: LD_INT 2
49511: PUSH
49512: LD_INT 2
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 1
49521: PUSH
49522: LD_INT 2
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 0
49531: PUSH
49532: LD_INT 2
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 1
49541: NEG
49542: PUSH
49543: LD_INT 1
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: LD_INT 2
49552: NEG
49553: PUSH
49554: LD_INT 0
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 2
49563: NEG
49564: PUSH
49565: LD_INT 1
49567: NEG
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: LD_INT 2
49575: NEG
49576: PUSH
49577: LD_INT 2
49579: NEG
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: LD_INT 2
49587: NEG
49588: PUSH
49589: LD_INT 3
49591: NEG
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PUSH
49597: LD_INT 1
49599: NEG
49600: PUSH
49601: LD_INT 3
49603: NEG
49604: PUSH
49605: EMPTY
49606: LIST
49607: LIST
49608: PUSH
49609: LD_INT 3
49611: NEG
49612: PUSH
49613: LD_INT 1
49615: NEG
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: LD_INT 3
49623: NEG
49624: PUSH
49625: LD_INT 2
49627: NEG
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: EMPTY
49634: LIST
49635: LIST
49636: LIST
49637: LIST
49638: LIST
49639: LIST
49640: LIST
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: LIST
49651: LIST
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49658: LD_ADDR_VAR 0 29
49662: PUSH
49663: LD_INT 0
49665: PUSH
49666: LD_INT 0
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 0
49675: PUSH
49676: LD_INT 1
49678: NEG
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 1
49686: PUSH
49687: LD_INT 0
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 1
49696: PUSH
49697: LD_INT 1
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 0
49706: PUSH
49707: LD_INT 1
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PUSH
49714: LD_INT 1
49716: NEG
49717: PUSH
49718: LD_INT 0
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: LD_INT 1
49727: NEG
49728: PUSH
49729: LD_INT 1
49731: NEG
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: PUSH
49737: LD_INT 1
49739: NEG
49740: PUSH
49741: LD_INT 2
49743: NEG
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 0
49751: PUSH
49752: LD_INT 2
49754: NEG
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: PUSH
49760: LD_INT 1
49762: PUSH
49763: LD_INT 1
49765: NEG
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 2
49773: PUSH
49774: LD_INT 0
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 2
49783: PUSH
49784: LD_INT 1
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: LD_INT 1
49793: PUSH
49794: LD_INT 2
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 0
49803: PUSH
49804: LD_INT 2
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 1
49813: NEG
49814: PUSH
49815: LD_INT 1
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 2
49824: NEG
49825: PUSH
49826: LD_INT 1
49828: NEG
49829: PUSH
49830: EMPTY
49831: LIST
49832: LIST
49833: PUSH
49834: LD_INT 2
49836: NEG
49837: PUSH
49838: LD_INT 2
49840: NEG
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 2
49848: NEG
49849: PUSH
49850: LD_INT 3
49852: NEG
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: PUSH
49858: LD_INT 2
49860: PUSH
49861: LD_INT 1
49863: NEG
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 3
49871: PUSH
49872: LD_INT 1
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 1
49881: PUSH
49882: LD_INT 3
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 1
49891: NEG
49892: PUSH
49893: LD_INT 2
49895: PUSH
49896: EMPTY
49897: LIST
49898: LIST
49899: PUSH
49900: LD_INT 3
49902: NEG
49903: PUSH
49904: LD_INT 2
49906: NEG
49907: PUSH
49908: EMPTY
49909: LIST
49910: LIST
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: LIST
49924: LIST
49925: LIST
49926: LIST
49927: LIST
49928: LIST
49929: LIST
49930: LIST
49931: LIST
49932: LIST
49933: LIST
49934: LIST
49935: LIST
49936: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49937: LD_ADDR_VAR 0 30
49941: PUSH
49942: LD_INT 0
49944: PUSH
49945: LD_INT 0
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 0
49954: PUSH
49955: LD_INT 1
49957: NEG
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 1
49965: PUSH
49966: LD_INT 0
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 1
49975: PUSH
49976: LD_INT 1
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: PUSH
49983: LD_INT 0
49985: PUSH
49986: LD_INT 1
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: LD_INT 1
49995: NEG
49996: PUSH
49997: LD_INT 0
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PUSH
50004: LD_INT 1
50006: NEG
50007: PUSH
50008: LD_INT 1
50010: NEG
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 1
50018: NEG
50019: PUSH
50020: LD_INT 2
50022: NEG
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_INT 0
50030: PUSH
50031: LD_INT 2
50033: NEG
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 1
50041: PUSH
50042: LD_INT 1
50044: NEG
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 2
50052: PUSH
50053: LD_INT 0
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 2
50062: PUSH
50063: LD_INT 1
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 2
50072: PUSH
50073: LD_INT 2
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 1
50082: PUSH
50083: LD_INT 2
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 1
50092: NEG
50093: PUSH
50094: LD_INT 1
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 2
50103: NEG
50104: PUSH
50105: LD_INT 0
50107: PUSH
50108: EMPTY
50109: LIST
50110: LIST
50111: PUSH
50112: LD_INT 2
50114: NEG
50115: PUSH
50116: LD_INT 1
50118: NEG
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 1
50126: NEG
50127: PUSH
50128: LD_INT 3
50130: NEG
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 1
50138: PUSH
50139: LD_INT 2
50141: NEG
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 3
50149: PUSH
50150: LD_INT 2
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 2
50159: PUSH
50160: LD_INT 3
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 2
50169: NEG
50170: PUSH
50171: LD_INT 1
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 3
50180: NEG
50181: PUSH
50182: LD_INT 1
50184: NEG
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50215: LD_ADDR_VAR 0 31
50219: PUSH
50220: LD_INT 0
50222: PUSH
50223: LD_INT 0
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 0
50232: PUSH
50233: LD_INT 1
50235: NEG
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 1
50243: PUSH
50244: LD_INT 0
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: LD_INT 1
50253: PUSH
50254: LD_INT 1
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 0
50263: PUSH
50264: LD_INT 1
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 1
50273: NEG
50274: PUSH
50275: LD_INT 0
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 1
50284: NEG
50285: PUSH
50286: LD_INT 1
50288: NEG
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PUSH
50294: LD_INT 1
50296: NEG
50297: PUSH
50298: LD_INT 2
50300: NEG
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 1
50308: PUSH
50309: LD_INT 1
50311: NEG
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 2
50319: PUSH
50320: LD_INT 0
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 2
50329: PUSH
50330: LD_INT 1
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: LD_INT 2
50339: PUSH
50340: LD_INT 2
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: LD_INT 1
50349: PUSH
50350: LD_INT 2
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: LD_INT 0
50359: PUSH
50360: LD_INT 2
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: LD_INT 1
50369: NEG
50370: PUSH
50371: LD_INT 1
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: PUSH
50378: LD_INT 2
50380: NEG
50381: PUSH
50382: LD_INT 1
50384: NEG
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 2
50392: NEG
50393: PUSH
50394: LD_INT 2
50396: NEG
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: PUSH
50402: LD_INT 2
50404: NEG
50405: PUSH
50406: LD_INT 3
50408: NEG
50409: PUSH
50410: EMPTY
50411: LIST
50412: LIST
50413: PUSH
50414: LD_INT 2
50416: PUSH
50417: LD_INT 1
50419: NEG
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: LD_INT 3
50427: PUSH
50428: LD_INT 1
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: LD_INT 1
50437: PUSH
50438: LD_INT 3
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 1
50447: NEG
50448: PUSH
50449: LD_INT 2
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 3
50458: NEG
50459: PUSH
50460: LD_INT 2
50462: NEG
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: LIST
50485: LIST
50486: LIST
50487: LIST
50488: LIST
50489: LIST
50490: LIST
50491: LIST
50492: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50493: LD_ADDR_VAR 0 32
50497: PUSH
50498: LD_INT 0
50500: PUSH
50501: LD_INT 0
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 0
50510: PUSH
50511: LD_INT 1
50513: NEG
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 1
50521: PUSH
50522: LD_INT 0
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: PUSH
50529: LD_INT 1
50531: PUSH
50532: LD_INT 1
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: PUSH
50539: LD_INT 0
50541: PUSH
50542: LD_INT 1
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: LD_INT 1
50551: NEG
50552: PUSH
50553: LD_INT 0
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 1
50562: NEG
50563: PUSH
50564: LD_INT 1
50566: NEG
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 1
50574: NEG
50575: PUSH
50576: LD_INT 2
50578: NEG
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 0
50586: PUSH
50587: LD_INT 2
50589: NEG
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 1
50597: PUSH
50598: LD_INT 1
50600: NEG
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 2
50608: PUSH
50609: LD_INT 1
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 2
50618: PUSH
50619: LD_INT 2
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 1
50628: PUSH
50629: LD_INT 2
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 0
50638: PUSH
50639: LD_INT 2
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: LD_INT 1
50648: NEG
50649: PUSH
50650: LD_INT 1
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 2
50659: NEG
50660: PUSH
50661: LD_INT 0
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: LD_INT 2
50670: NEG
50671: PUSH
50672: LD_INT 1
50674: NEG
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 1
50682: NEG
50683: PUSH
50684: LD_INT 3
50686: NEG
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: PUSH
50692: LD_INT 1
50694: PUSH
50695: LD_INT 2
50697: NEG
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 3
50705: PUSH
50706: LD_INT 2
50708: PUSH
50709: EMPTY
50710: LIST
50711: LIST
50712: PUSH
50713: LD_INT 2
50715: PUSH
50716: LD_INT 3
50718: PUSH
50719: EMPTY
50720: LIST
50721: LIST
50722: PUSH
50723: LD_INT 2
50725: NEG
50726: PUSH
50727: LD_INT 1
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 3
50736: NEG
50737: PUSH
50738: LD_INT 1
50740: NEG
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: LIST
50767: LIST
50768: LIST
50769: LIST
50770: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50771: LD_ADDR_VAR 0 33
50775: PUSH
50776: LD_INT 0
50778: PUSH
50779: LD_INT 0
50781: PUSH
50782: EMPTY
50783: LIST
50784: LIST
50785: PUSH
50786: LD_INT 0
50788: PUSH
50789: LD_INT 1
50791: NEG
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: LD_INT 1
50799: PUSH
50800: LD_INT 0
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 1
50809: PUSH
50810: LD_INT 1
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: LD_INT 0
50819: PUSH
50820: LD_INT 1
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 1
50829: NEG
50830: PUSH
50831: LD_INT 0
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: PUSH
50838: LD_INT 1
50840: NEG
50841: PUSH
50842: LD_INT 1
50844: NEG
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 1
50852: NEG
50853: PUSH
50854: LD_INT 2
50856: NEG
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 1
50864: PUSH
50865: LD_INT 1
50867: NEG
50868: PUSH
50869: EMPTY
50870: LIST
50871: LIST
50872: PUSH
50873: LD_INT 2
50875: PUSH
50876: LD_INT 0
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 2
50885: PUSH
50886: LD_INT 1
50888: PUSH
50889: EMPTY
50890: LIST
50891: LIST
50892: PUSH
50893: LD_INT 1
50895: PUSH
50896: LD_INT 2
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 0
50905: PUSH
50906: LD_INT 2
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: PUSH
50913: LD_INT 1
50915: NEG
50916: PUSH
50917: LD_INT 1
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: PUSH
50924: LD_INT 2
50926: NEG
50927: PUSH
50928: LD_INT 0
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 2
50937: NEG
50938: PUSH
50939: LD_INT 1
50941: NEG
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: LD_INT 2
50949: NEG
50950: PUSH
50951: LD_INT 2
50953: NEG
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: LD_INT 2
50961: NEG
50962: PUSH
50963: LD_INT 3
50965: NEG
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 2
50973: PUSH
50974: LD_INT 1
50976: NEG
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 3
50984: PUSH
50985: LD_INT 1
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 1
50994: PUSH
50995: LD_INT 3
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 1
51004: NEG
51005: PUSH
51006: LD_INT 2
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 3
51015: NEG
51016: PUSH
51017: LD_INT 2
51019: NEG
51020: PUSH
51021: EMPTY
51022: LIST
51023: LIST
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: LIST
51046: LIST
51047: LIST
51048: LIST
51049: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51050: LD_ADDR_VAR 0 34
51054: PUSH
51055: LD_INT 0
51057: PUSH
51058: LD_INT 0
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 0
51067: PUSH
51068: LD_INT 1
51070: NEG
51071: PUSH
51072: EMPTY
51073: LIST
51074: LIST
51075: PUSH
51076: LD_INT 1
51078: PUSH
51079: LD_INT 0
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 1
51088: PUSH
51089: LD_INT 1
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 0
51098: PUSH
51099: LD_INT 1
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 1
51108: NEG
51109: PUSH
51110: LD_INT 0
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 1
51119: NEG
51120: PUSH
51121: LD_INT 1
51123: NEG
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 1
51131: NEG
51132: PUSH
51133: LD_INT 2
51135: NEG
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: LD_INT 0
51143: PUSH
51144: LD_INT 2
51146: NEG
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: LD_INT 1
51154: PUSH
51155: LD_INT 1
51157: NEG
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 2
51165: PUSH
51166: LD_INT 1
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 2
51175: PUSH
51176: LD_INT 2
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 1
51185: PUSH
51186: LD_INT 2
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 1
51195: NEG
51196: PUSH
51197: LD_INT 1
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 2
51206: NEG
51207: PUSH
51208: LD_INT 0
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 2
51217: NEG
51218: PUSH
51219: LD_INT 1
51221: NEG
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 2
51229: NEG
51230: PUSH
51231: LD_INT 2
51233: NEG
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 1
51241: NEG
51242: PUSH
51243: LD_INT 3
51245: NEG
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 1
51253: PUSH
51254: LD_INT 2
51256: NEG
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 3
51264: PUSH
51265: LD_INT 2
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 2
51274: PUSH
51275: LD_INT 3
51277: PUSH
51278: EMPTY
51279: LIST
51280: LIST
51281: PUSH
51282: LD_INT 2
51284: NEG
51285: PUSH
51286: LD_INT 1
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 3
51295: NEG
51296: PUSH
51297: LD_INT 1
51299: NEG
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51330: LD_ADDR_VAR 0 35
51334: PUSH
51335: LD_INT 0
51337: PUSH
51338: LD_INT 0
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 0
51347: PUSH
51348: LD_INT 1
51350: NEG
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 1
51358: PUSH
51359: LD_INT 0
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 1
51368: PUSH
51369: LD_INT 1
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 0
51378: PUSH
51379: LD_INT 1
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 1
51388: NEG
51389: PUSH
51390: LD_INT 0
51392: PUSH
51393: EMPTY
51394: LIST
51395: LIST
51396: PUSH
51397: LD_INT 1
51399: NEG
51400: PUSH
51401: LD_INT 1
51403: NEG
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: LD_INT 2
51411: PUSH
51412: LD_INT 1
51414: PUSH
51415: EMPTY
51416: LIST
51417: LIST
51418: PUSH
51419: LD_INT 2
51421: NEG
51422: PUSH
51423: LD_INT 1
51425: NEG
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51442: LD_ADDR_VAR 0 36
51446: PUSH
51447: LD_INT 0
51449: PUSH
51450: LD_INT 0
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 0
51459: PUSH
51460: LD_INT 1
51462: NEG
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 1
51470: PUSH
51471: LD_INT 0
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: LD_INT 1
51480: PUSH
51481: LD_INT 1
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 0
51490: PUSH
51491: LD_INT 1
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 1
51500: NEG
51501: PUSH
51502: LD_INT 0
51504: PUSH
51505: EMPTY
51506: LIST
51507: LIST
51508: PUSH
51509: LD_INT 1
51511: NEG
51512: PUSH
51513: LD_INT 1
51515: NEG
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 1
51523: NEG
51524: PUSH
51525: LD_INT 2
51527: NEG
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 1
51535: PUSH
51536: LD_INT 2
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: LIST
51547: LIST
51548: LIST
51549: LIST
51550: LIST
51551: LIST
51552: LIST
51553: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51554: LD_ADDR_VAR 0 37
51558: PUSH
51559: LD_INT 0
51561: PUSH
51562: LD_INT 0
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 0
51571: PUSH
51572: LD_INT 1
51574: NEG
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 1
51582: PUSH
51583: LD_INT 0
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 1
51592: PUSH
51593: LD_INT 1
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 0
51602: PUSH
51603: LD_INT 1
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 1
51612: NEG
51613: PUSH
51614: LD_INT 0
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: PUSH
51621: LD_INT 1
51623: NEG
51624: PUSH
51625: LD_INT 1
51627: NEG
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 1
51635: PUSH
51636: LD_INT 1
51638: NEG
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 1
51646: NEG
51647: PUSH
51648: LD_INT 1
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: LIST
51659: LIST
51660: LIST
51661: LIST
51662: LIST
51663: LIST
51664: LIST
51665: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51666: LD_ADDR_VAR 0 38
51670: PUSH
51671: LD_INT 0
51673: PUSH
51674: LD_INT 0
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 0
51683: PUSH
51684: LD_INT 1
51686: NEG
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 1
51694: PUSH
51695: LD_INT 0
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: PUSH
51702: LD_INT 1
51704: PUSH
51705: LD_INT 1
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 0
51714: PUSH
51715: LD_INT 1
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: LD_INT 1
51724: NEG
51725: PUSH
51726: LD_INT 0
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 1
51735: NEG
51736: PUSH
51737: LD_INT 1
51739: NEG
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: LD_INT 2
51747: PUSH
51748: LD_INT 1
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: PUSH
51755: LD_INT 2
51757: NEG
51758: PUSH
51759: LD_INT 1
51761: NEG
51762: PUSH
51763: EMPTY
51764: LIST
51765: LIST
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51778: LD_ADDR_VAR 0 39
51782: PUSH
51783: LD_INT 0
51785: PUSH
51786: LD_INT 0
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 0
51795: PUSH
51796: LD_INT 1
51798: NEG
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 1
51806: PUSH
51807: LD_INT 0
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 1
51816: PUSH
51817: LD_INT 1
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: PUSH
51824: LD_INT 0
51826: PUSH
51827: LD_INT 1
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 1
51836: NEG
51837: PUSH
51838: LD_INT 0
51840: PUSH
51841: EMPTY
51842: LIST
51843: LIST
51844: PUSH
51845: LD_INT 1
51847: NEG
51848: PUSH
51849: LD_INT 1
51851: NEG
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 1
51859: NEG
51860: PUSH
51861: LD_INT 2
51863: NEG
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 1
51871: PUSH
51872: LD_INT 2
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: PUSH
51879: EMPTY
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51890: LD_ADDR_VAR 0 40
51894: PUSH
51895: LD_INT 0
51897: PUSH
51898: LD_INT 0
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 0
51907: PUSH
51908: LD_INT 1
51910: NEG
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 1
51918: PUSH
51919: LD_INT 0
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 1
51928: PUSH
51929: LD_INT 1
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 0
51938: PUSH
51939: LD_INT 1
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 1
51948: NEG
51949: PUSH
51950: LD_INT 0
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 1
51959: NEG
51960: PUSH
51961: LD_INT 1
51963: NEG
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: LD_INT 1
51971: PUSH
51972: LD_INT 1
51974: NEG
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 1
51982: NEG
51983: PUSH
51984: LD_INT 1
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: LIST
52001: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52002: LD_ADDR_VAR 0 41
52006: PUSH
52007: LD_INT 0
52009: PUSH
52010: LD_INT 0
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 0
52019: PUSH
52020: LD_INT 1
52022: NEG
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 1
52030: PUSH
52031: LD_INT 0
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 1
52040: PUSH
52041: LD_INT 1
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: PUSH
52048: LD_INT 0
52050: PUSH
52051: LD_INT 1
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: LD_INT 1
52060: NEG
52061: PUSH
52062: LD_INT 0
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 1
52071: NEG
52072: PUSH
52073: LD_INT 1
52075: NEG
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: LD_INT 1
52083: NEG
52084: PUSH
52085: LD_INT 2
52087: NEG
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: LD_INT 1
52095: PUSH
52096: LD_INT 1
52098: NEG
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 2
52106: PUSH
52107: LD_INT 0
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 2
52116: PUSH
52117: LD_INT 1
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 2
52126: PUSH
52127: LD_INT 2
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 1
52136: PUSH
52137: LD_INT 2
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 1
52146: NEG
52147: PUSH
52148: LD_INT 1
52150: PUSH
52151: EMPTY
52152: LIST
52153: LIST
52154: PUSH
52155: LD_INT 2
52157: NEG
52158: PUSH
52159: LD_INT 0
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 2
52168: NEG
52169: PUSH
52170: LD_INT 1
52172: NEG
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 2
52180: NEG
52181: PUSH
52182: LD_INT 2
52184: NEG
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 2
52192: NEG
52193: PUSH
52194: LD_INT 3
52196: NEG
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: LD_INT 2
52204: PUSH
52205: LD_INT 1
52207: NEG
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: LD_INT 3
52215: PUSH
52216: LD_INT 0
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 3
52225: PUSH
52226: LD_INT 1
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 3
52235: PUSH
52236: LD_INT 2
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 3
52245: PUSH
52246: LD_INT 3
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 2
52255: PUSH
52256: LD_INT 3
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 2
52265: NEG
52266: PUSH
52267: LD_INT 1
52269: PUSH
52270: EMPTY
52271: LIST
52272: LIST
52273: PUSH
52274: LD_INT 3
52276: NEG
52277: PUSH
52278: LD_INT 0
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 3
52287: NEG
52288: PUSH
52289: LD_INT 1
52291: NEG
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: PUSH
52297: LD_INT 3
52299: NEG
52300: PUSH
52301: LD_INT 2
52303: NEG
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: PUSH
52309: LD_INT 3
52311: NEG
52312: PUSH
52313: LD_INT 3
52315: NEG
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52352: LD_ADDR_VAR 0 42
52356: PUSH
52357: LD_INT 0
52359: PUSH
52360: LD_INT 0
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 0
52369: PUSH
52370: LD_INT 1
52372: NEG
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 1
52380: PUSH
52381: LD_INT 0
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 1
52390: PUSH
52391: LD_INT 1
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 0
52400: PUSH
52401: LD_INT 1
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 1
52410: NEG
52411: PUSH
52412: LD_INT 0
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 1
52421: NEG
52422: PUSH
52423: LD_INT 1
52425: NEG
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: LD_INT 1
52433: NEG
52434: PUSH
52435: LD_INT 2
52437: NEG
52438: PUSH
52439: EMPTY
52440: LIST
52441: LIST
52442: PUSH
52443: LD_INT 0
52445: PUSH
52446: LD_INT 2
52448: NEG
52449: PUSH
52450: EMPTY
52451: LIST
52452: LIST
52453: PUSH
52454: LD_INT 1
52456: PUSH
52457: LD_INT 1
52459: NEG
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: LD_INT 2
52467: PUSH
52468: LD_INT 1
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 2
52477: PUSH
52478: LD_INT 2
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 1
52487: PUSH
52488: LD_INT 2
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 0
52497: PUSH
52498: LD_INT 2
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 1
52507: NEG
52508: PUSH
52509: LD_INT 1
52511: PUSH
52512: EMPTY
52513: LIST
52514: LIST
52515: PUSH
52516: LD_INT 2
52518: NEG
52519: PUSH
52520: LD_INT 1
52522: NEG
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: PUSH
52528: LD_INT 2
52530: NEG
52531: PUSH
52532: LD_INT 2
52534: NEG
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 2
52542: NEG
52543: PUSH
52544: LD_INT 3
52546: NEG
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: LD_INT 1
52554: NEG
52555: PUSH
52556: LD_INT 3
52558: NEG
52559: PUSH
52560: EMPTY
52561: LIST
52562: LIST
52563: PUSH
52564: LD_INT 0
52566: PUSH
52567: LD_INT 3
52569: NEG
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 1
52577: PUSH
52578: LD_INT 2
52580: NEG
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: LD_INT 3
52588: PUSH
52589: LD_INT 2
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 3
52598: PUSH
52599: LD_INT 3
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 2
52608: PUSH
52609: LD_INT 3
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 1
52618: PUSH
52619: LD_INT 3
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 0
52628: PUSH
52629: LD_INT 3
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 1
52638: NEG
52639: PUSH
52640: LD_INT 2
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: LD_INT 3
52649: NEG
52650: PUSH
52651: LD_INT 2
52653: NEG
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 3
52661: NEG
52662: PUSH
52663: LD_INT 3
52665: NEG
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: LIST
52675: LIST
52676: LIST
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: LIST
52692: LIST
52693: LIST
52694: LIST
52695: LIST
52696: LIST
52697: LIST
52698: LIST
52699: LIST
52700: LIST
52701: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52702: LD_ADDR_VAR 0 43
52706: PUSH
52707: LD_INT 0
52709: PUSH
52710: LD_INT 0
52712: PUSH
52713: EMPTY
52714: LIST
52715: LIST
52716: PUSH
52717: LD_INT 0
52719: PUSH
52720: LD_INT 1
52722: NEG
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 1
52730: PUSH
52731: LD_INT 0
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 1
52740: PUSH
52741: LD_INT 1
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 0
52750: PUSH
52751: LD_INT 1
52753: PUSH
52754: EMPTY
52755: LIST
52756: LIST
52757: PUSH
52758: LD_INT 1
52760: NEG
52761: PUSH
52762: LD_INT 0
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: LD_INT 1
52771: NEG
52772: PUSH
52773: LD_INT 1
52775: NEG
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: PUSH
52781: LD_INT 1
52783: NEG
52784: PUSH
52785: LD_INT 2
52787: NEG
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 0
52795: PUSH
52796: LD_INT 2
52798: NEG
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 1
52806: PUSH
52807: LD_INT 1
52809: NEG
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 2
52817: PUSH
52818: LD_INT 0
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: PUSH
52825: LD_INT 2
52827: PUSH
52828: LD_INT 1
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: LD_INT 1
52837: PUSH
52838: LD_INT 2
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: PUSH
52845: LD_INT 0
52847: PUSH
52848: LD_INT 2
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 1
52857: NEG
52858: PUSH
52859: LD_INT 1
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: LD_INT 2
52868: NEG
52869: PUSH
52870: LD_INT 0
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: PUSH
52877: LD_INT 2
52879: NEG
52880: PUSH
52881: LD_INT 1
52883: NEG
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: PUSH
52889: LD_INT 1
52891: NEG
52892: PUSH
52893: LD_INT 3
52895: NEG
52896: PUSH
52897: EMPTY
52898: LIST
52899: LIST
52900: PUSH
52901: LD_INT 0
52903: PUSH
52904: LD_INT 3
52906: NEG
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 1
52914: PUSH
52915: LD_INT 2
52917: NEG
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 2
52925: PUSH
52926: LD_INT 1
52928: NEG
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 3
52936: PUSH
52937: LD_INT 0
52939: PUSH
52940: EMPTY
52941: LIST
52942: LIST
52943: PUSH
52944: LD_INT 3
52946: PUSH
52947: LD_INT 1
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: PUSH
52954: LD_INT 1
52956: PUSH
52957: LD_INT 3
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: LD_INT 0
52966: PUSH
52967: LD_INT 3
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 1
52976: NEG
52977: PUSH
52978: LD_INT 2
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 2
52987: NEG
52988: PUSH
52989: LD_INT 1
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 3
52998: NEG
52999: PUSH
53000: LD_INT 0
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 3
53009: NEG
53010: PUSH
53011: LD_INT 1
53013: NEG
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53050: LD_ADDR_VAR 0 44
53054: PUSH
53055: LD_INT 0
53057: PUSH
53058: LD_INT 0
53060: PUSH
53061: EMPTY
53062: LIST
53063: LIST
53064: PUSH
53065: LD_INT 0
53067: PUSH
53068: LD_INT 1
53070: NEG
53071: PUSH
53072: EMPTY
53073: LIST
53074: LIST
53075: PUSH
53076: LD_INT 1
53078: PUSH
53079: LD_INT 0
53081: PUSH
53082: EMPTY
53083: LIST
53084: LIST
53085: PUSH
53086: LD_INT 1
53088: PUSH
53089: LD_INT 1
53091: PUSH
53092: EMPTY
53093: LIST
53094: LIST
53095: PUSH
53096: LD_INT 0
53098: PUSH
53099: LD_INT 1
53101: PUSH
53102: EMPTY
53103: LIST
53104: LIST
53105: PUSH
53106: LD_INT 1
53108: NEG
53109: PUSH
53110: LD_INT 0
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 1
53119: NEG
53120: PUSH
53121: LD_INT 1
53123: NEG
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 1
53131: NEG
53132: PUSH
53133: LD_INT 2
53135: NEG
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: LD_INT 1
53143: PUSH
53144: LD_INT 1
53146: NEG
53147: PUSH
53148: EMPTY
53149: LIST
53150: LIST
53151: PUSH
53152: LD_INT 2
53154: PUSH
53155: LD_INT 0
53157: PUSH
53158: EMPTY
53159: LIST
53160: LIST
53161: PUSH
53162: LD_INT 2
53164: PUSH
53165: LD_INT 1
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 2
53174: PUSH
53175: LD_INT 2
53177: PUSH
53178: EMPTY
53179: LIST
53180: LIST
53181: PUSH
53182: LD_INT 1
53184: PUSH
53185: LD_INT 2
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: PUSH
53192: LD_INT 1
53194: NEG
53195: PUSH
53196: LD_INT 1
53198: PUSH
53199: EMPTY
53200: LIST
53201: LIST
53202: PUSH
53203: LD_INT 2
53205: NEG
53206: PUSH
53207: LD_INT 0
53209: PUSH
53210: EMPTY
53211: LIST
53212: LIST
53213: PUSH
53214: LD_INT 2
53216: NEG
53217: PUSH
53218: LD_INT 1
53220: NEG
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: LD_INT 2
53228: NEG
53229: PUSH
53230: LD_INT 2
53232: NEG
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 2
53240: NEG
53241: PUSH
53242: LD_INT 3
53244: NEG
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 2
53252: PUSH
53253: LD_INT 1
53255: NEG
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 3
53263: PUSH
53264: LD_INT 0
53266: PUSH
53267: EMPTY
53268: LIST
53269: LIST
53270: PUSH
53271: LD_INT 3
53273: PUSH
53274: LD_INT 1
53276: PUSH
53277: EMPTY
53278: LIST
53279: LIST
53280: PUSH
53281: LD_INT 3
53283: PUSH
53284: LD_INT 2
53286: PUSH
53287: EMPTY
53288: LIST
53289: LIST
53290: PUSH
53291: LD_INT 3
53293: PUSH
53294: LD_INT 3
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: PUSH
53301: LD_INT 2
53303: PUSH
53304: LD_INT 3
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 2
53313: NEG
53314: PUSH
53315: LD_INT 1
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: LD_INT 3
53324: NEG
53325: PUSH
53326: LD_INT 0
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 3
53335: NEG
53336: PUSH
53337: LD_INT 1
53339: NEG
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PUSH
53345: LD_INT 3
53347: NEG
53348: PUSH
53349: LD_INT 2
53351: NEG
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 3
53359: NEG
53360: PUSH
53361: LD_INT 3
53363: NEG
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: LIST
53375: LIST
53376: LIST
53377: LIST
53378: LIST
53379: LIST
53380: LIST
53381: LIST
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: LIST
53387: LIST
53388: LIST
53389: LIST
53390: LIST
53391: LIST
53392: LIST
53393: LIST
53394: LIST
53395: LIST
53396: LIST
53397: LIST
53398: LIST
53399: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53400: LD_ADDR_VAR 0 45
53404: PUSH
53405: LD_INT 0
53407: PUSH
53408: LD_INT 0
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 0
53417: PUSH
53418: LD_INT 1
53420: NEG
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 1
53428: PUSH
53429: LD_INT 0
53431: PUSH
53432: EMPTY
53433: LIST
53434: LIST
53435: PUSH
53436: LD_INT 1
53438: PUSH
53439: LD_INT 1
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 0
53448: PUSH
53449: LD_INT 1
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: LD_INT 1
53458: NEG
53459: PUSH
53460: LD_INT 0
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 1
53469: NEG
53470: PUSH
53471: LD_INT 1
53473: NEG
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: LD_INT 1
53481: NEG
53482: PUSH
53483: LD_INT 2
53485: NEG
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 0
53493: PUSH
53494: LD_INT 2
53496: NEG
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 1
53504: PUSH
53505: LD_INT 1
53507: NEG
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: LD_INT 2
53515: PUSH
53516: LD_INT 1
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 2
53525: PUSH
53526: LD_INT 2
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 1
53535: PUSH
53536: LD_INT 2
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 0
53545: PUSH
53546: LD_INT 2
53548: PUSH
53549: EMPTY
53550: LIST
53551: LIST
53552: PUSH
53553: LD_INT 1
53555: NEG
53556: PUSH
53557: LD_INT 1
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: PUSH
53564: LD_INT 2
53566: NEG
53567: PUSH
53568: LD_INT 1
53570: NEG
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 2
53578: NEG
53579: PUSH
53580: LD_INT 2
53582: NEG
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: LD_INT 2
53590: NEG
53591: PUSH
53592: LD_INT 3
53594: NEG
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 1
53602: NEG
53603: PUSH
53604: LD_INT 3
53606: NEG
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 0
53614: PUSH
53615: LD_INT 3
53617: NEG
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: LD_INT 1
53625: PUSH
53626: LD_INT 2
53628: NEG
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 3
53636: PUSH
53637: LD_INT 2
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 3
53646: PUSH
53647: LD_INT 3
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 2
53656: PUSH
53657: LD_INT 3
53659: PUSH
53660: EMPTY
53661: LIST
53662: LIST
53663: PUSH
53664: LD_INT 1
53666: PUSH
53667: LD_INT 3
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 0
53676: PUSH
53677: LD_INT 3
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 1
53686: NEG
53687: PUSH
53688: LD_INT 2
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 3
53697: NEG
53698: PUSH
53699: LD_INT 2
53701: NEG
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: LD_INT 3
53709: NEG
53710: PUSH
53711: LD_INT 3
53713: NEG
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: LIST
53723: LIST
53724: LIST
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53750: LD_ADDR_VAR 0 46
53754: PUSH
53755: LD_INT 0
53757: PUSH
53758: LD_INT 0
53760: PUSH
53761: EMPTY
53762: LIST
53763: LIST
53764: PUSH
53765: LD_INT 0
53767: PUSH
53768: LD_INT 1
53770: NEG
53771: PUSH
53772: EMPTY
53773: LIST
53774: LIST
53775: PUSH
53776: LD_INT 1
53778: PUSH
53779: LD_INT 0
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: LD_INT 1
53788: PUSH
53789: LD_INT 1
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: PUSH
53796: LD_INT 0
53798: PUSH
53799: LD_INT 1
53801: PUSH
53802: EMPTY
53803: LIST
53804: LIST
53805: PUSH
53806: LD_INT 1
53808: NEG
53809: PUSH
53810: LD_INT 0
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: LD_INT 1
53819: NEG
53820: PUSH
53821: LD_INT 1
53823: NEG
53824: PUSH
53825: EMPTY
53826: LIST
53827: LIST
53828: PUSH
53829: LD_INT 1
53831: NEG
53832: PUSH
53833: LD_INT 2
53835: NEG
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: PUSH
53841: LD_INT 0
53843: PUSH
53844: LD_INT 2
53846: NEG
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: LD_INT 1
53854: PUSH
53855: LD_INT 1
53857: NEG
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 2
53865: PUSH
53866: LD_INT 0
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 2
53875: PUSH
53876: LD_INT 1
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 1
53885: PUSH
53886: LD_INT 2
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_INT 0
53895: PUSH
53896: LD_INT 2
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 1
53905: NEG
53906: PUSH
53907: LD_INT 1
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 2
53916: NEG
53917: PUSH
53918: LD_INT 0
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 2
53927: NEG
53928: PUSH
53929: LD_INT 1
53931: NEG
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 1
53939: NEG
53940: PUSH
53941: LD_INT 3
53943: NEG
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 0
53951: PUSH
53952: LD_INT 3
53954: NEG
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 1
53962: PUSH
53963: LD_INT 2
53965: NEG
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 2
53973: PUSH
53974: LD_INT 1
53976: NEG
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 3
53984: PUSH
53985: LD_INT 0
53987: PUSH
53988: EMPTY
53989: LIST
53990: LIST
53991: PUSH
53992: LD_INT 3
53994: PUSH
53995: LD_INT 1
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 1
54004: PUSH
54005: LD_INT 3
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 0
54014: PUSH
54015: LD_INT 3
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 1
54024: NEG
54025: PUSH
54026: LD_INT 2
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 2
54035: NEG
54036: PUSH
54037: LD_INT 1
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 3
54046: NEG
54047: PUSH
54048: LD_INT 0
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: PUSH
54055: LD_INT 3
54057: NEG
54058: PUSH
54059: LD_INT 1
54061: NEG
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: LIST
54075: LIST
54076: LIST
54077: LIST
54078: LIST
54079: LIST
54080: LIST
54081: LIST
54082: LIST
54083: LIST
54084: LIST
54085: LIST
54086: LIST
54087: LIST
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54098: LD_ADDR_VAR 0 47
54102: PUSH
54103: LD_INT 0
54105: PUSH
54106: LD_INT 0
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 0
54115: PUSH
54116: LD_INT 1
54118: NEG
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: LD_INT 1
54126: PUSH
54127: LD_INT 0
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: LD_INT 1
54136: PUSH
54137: LD_INT 1
54139: PUSH
54140: EMPTY
54141: LIST
54142: LIST
54143: PUSH
54144: LD_INT 0
54146: PUSH
54147: LD_INT 1
54149: PUSH
54150: EMPTY
54151: LIST
54152: LIST
54153: PUSH
54154: LD_INT 1
54156: NEG
54157: PUSH
54158: LD_INT 0
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 1
54167: NEG
54168: PUSH
54169: LD_INT 1
54171: NEG
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 1
54179: NEG
54180: PUSH
54181: LD_INT 2
54183: NEG
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 0
54191: PUSH
54192: LD_INT 2
54194: NEG
54195: PUSH
54196: EMPTY
54197: LIST
54198: LIST
54199: PUSH
54200: LD_INT 1
54202: PUSH
54203: LD_INT 1
54205: NEG
54206: PUSH
54207: EMPTY
54208: LIST
54209: LIST
54210: PUSH
54211: LD_INT 2
54213: NEG
54214: PUSH
54215: LD_INT 1
54217: NEG
54218: PUSH
54219: EMPTY
54220: LIST
54221: LIST
54222: PUSH
54223: LD_INT 2
54225: NEG
54226: PUSH
54227: LD_INT 2
54229: NEG
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54249: LD_ADDR_VAR 0 48
54253: PUSH
54254: LD_INT 0
54256: PUSH
54257: LD_INT 0
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 0
54266: PUSH
54267: LD_INT 1
54269: NEG
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 1
54277: PUSH
54278: LD_INT 0
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: LD_INT 1
54287: PUSH
54288: LD_INT 1
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 0
54297: PUSH
54298: LD_INT 1
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 1
54307: NEG
54308: PUSH
54309: LD_INT 0
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 1
54318: NEG
54319: PUSH
54320: LD_INT 1
54322: NEG
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 1
54330: NEG
54331: PUSH
54332: LD_INT 2
54334: NEG
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 0
54342: PUSH
54343: LD_INT 2
54345: NEG
54346: PUSH
54347: EMPTY
54348: LIST
54349: LIST
54350: PUSH
54351: LD_INT 1
54353: PUSH
54354: LD_INT 1
54356: NEG
54357: PUSH
54358: EMPTY
54359: LIST
54360: LIST
54361: PUSH
54362: LD_INT 2
54364: PUSH
54365: LD_INT 0
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_INT 2
54374: PUSH
54375: LD_INT 1
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: EMPTY
54383: LIST
54384: LIST
54385: LIST
54386: LIST
54387: LIST
54388: LIST
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54396: LD_ADDR_VAR 0 49
54400: PUSH
54401: LD_INT 0
54403: PUSH
54404: LD_INT 0
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 0
54413: PUSH
54414: LD_INT 1
54416: NEG
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 1
54424: PUSH
54425: LD_INT 0
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 1
54434: PUSH
54435: LD_INT 1
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 0
54444: PUSH
54445: LD_INT 1
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 1
54454: NEG
54455: PUSH
54456: LD_INT 0
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 1
54465: NEG
54466: PUSH
54467: LD_INT 1
54469: NEG
54470: PUSH
54471: EMPTY
54472: LIST
54473: LIST
54474: PUSH
54475: LD_INT 1
54477: PUSH
54478: LD_INT 1
54480: NEG
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 2
54488: PUSH
54489: LD_INT 0
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: PUSH
54496: LD_INT 2
54498: PUSH
54499: LD_INT 1
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 2
54508: PUSH
54509: LD_INT 2
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 1
54518: PUSH
54519: LD_INT 2
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: LIST
54530: LIST
54531: LIST
54532: LIST
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: LIST
54538: LIST
54539: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54540: LD_ADDR_VAR 0 50
54544: PUSH
54545: LD_INT 0
54547: PUSH
54548: LD_INT 0
54550: PUSH
54551: EMPTY
54552: LIST
54553: LIST
54554: PUSH
54555: LD_INT 0
54557: PUSH
54558: LD_INT 1
54560: NEG
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 1
54568: PUSH
54569: LD_INT 0
54571: PUSH
54572: EMPTY
54573: LIST
54574: LIST
54575: PUSH
54576: LD_INT 1
54578: PUSH
54579: LD_INT 1
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 0
54588: PUSH
54589: LD_INT 1
54591: PUSH
54592: EMPTY
54593: LIST
54594: LIST
54595: PUSH
54596: LD_INT 1
54598: NEG
54599: PUSH
54600: LD_INT 0
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 1
54609: NEG
54610: PUSH
54611: LD_INT 1
54613: NEG
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 2
54621: PUSH
54622: LD_INT 1
54624: PUSH
54625: EMPTY
54626: LIST
54627: LIST
54628: PUSH
54629: LD_INT 2
54631: PUSH
54632: LD_INT 2
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 1
54641: PUSH
54642: LD_INT 2
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 0
54651: PUSH
54652: LD_INT 2
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 1
54661: NEG
54662: PUSH
54663: LD_INT 1
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: EMPTY
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54684: LD_ADDR_VAR 0 51
54688: PUSH
54689: LD_INT 0
54691: PUSH
54692: LD_INT 0
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: PUSH
54699: LD_INT 0
54701: PUSH
54702: LD_INT 1
54704: NEG
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 1
54712: PUSH
54713: LD_INT 0
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 1
54722: PUSH
54723: LD_INT 1
54725: PUSH
54726: EMPTY
54727: LIST
54728: LIST
54729: PUSH
54730: LD_INT 0
54732: PUSH
54733: LD_INT 1
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: PUSH
54740: LD_INT 1
54742: NEG
54743: PUSH
54744: LD_INT 0
54746: PUSH
54747: EMPTY
54748: LIST
54749: LIST
54750: PUSH
54751: LD_INT 1
54753: NEG
54754: PUSH
54755: LD_INT 1
54757: NEG
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 1
54765: PUSH
54766: LD_INT 2
54768: PUSH
54769: EMPTY
54770: LIST
54771: LIST
54772: PUSH
54773: LD_INT 0
54775: PUSH
54776: LD_INT 2
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: PUSH
54783: LD_INT 1
54785: NEG
54786: PUSH
54787: LD_INT 1
54789: PUSH
54790: EMPTY
54791: LIST
54792: LIST
54793: PUSH
54794: LD_INT 2
54796: NEG
54797: PUSH
54798: LD_INT 0
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 2
54807: NEG
54808: PUSH
54809: LD_INT 1
54811: NEG
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: LIST
54824: LIST
54825: LIST
54826: LIST
54827: LIST
54828: LIST
54829: LIST
54830: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54831: LD_ADDR_VAR 0 52
54835: PUSH
54836: LD_INT 0
54838: PUSH
54839: LD_INT 0
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 0
54848: PUSH
54849: LD_INT 1
54851: NEG
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PUSH
54857: LD_INT 1
54859: PUSH
54860: LD_INT 0
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: PUSH
54867: LD_INT 1
54869: PUSH
54870: LD_INT 1
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 0
54879: PUSH
54880: LD_INT 1
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: PUSH
54887: LD_INT 1
54889: NEG
54890: PUSH
54891: LD_INT 0
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: LD_INT 1
54900: NEG
54901: PUSH
54902: LD_INT 1
54904: NEG
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: PUSH
54910: LD_INT 1
54912: NEG
54913: PUSH
54914: LD_INT 2
54916: NEG
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 1
54924: NEG
54925: PUSH
54926: LD_INT 1
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 2
54935: NEG
54936: PUSH
54937: LD_INT 0
54939: PUSH
54940: EMPTY
54941: LIST
54942: LIST
54943: PUSH
54944: LD_INT 2
54946: NEG
54947: PUSH
54948: LD_INT 1
54950: NEG
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: PUSH
54956: LD_INT 2
54958: NEG
54959: PUSH
54960: LD_INT 2
54962: NEG
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: LIST
54980: LIST
54981: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54982: LD_ADDR_VAR 0 53
54986: PUSH
54987: LD_INT 0
54989: PUSH
54990: LD_INT 0
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: LD_INT 0
54999: PUSH
55000: LD_INT 1
55002: NEG
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: LD_INT 1
55010: PUSH
55011: LD_INT 0
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: LD_INT 1
55020: PUSH
55021: LD_INT 1
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: PUSH
55028: LD_INT 0
55030: PUSH
55031: LD_INT 1
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 1
55040: NEG
55041: PUSH
55042: LD_INT 0
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 1
55051: NEG
55052: PUSH
55053: LD_INT 1
55055: NEG
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: LD_INT 1
55063: NEG
55064: PUSH
55065: LD_INT 2
55067: NEG
55068: PUSH
55069: EMPTY
55070: LIST
55071: LIST
55072: PUSH
55073: LD_INT 0
55075: PUSH
55076: LD_INT 2
55078: NEG
55079: PUSH
55080: EMPTY
55081: LIST
55082: LIST
55083: PUSH
55084: LD_INT 1
55086: PUSH
55087: LD_INT 1
55089: NEG
55090: PUSH
55091: EMPTY
55092: LIST
55093: LIST
55094: PUSH
55095: LD_INT 2
55097: PUSH
55098: LD_INT 0
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 2
55107: PUSH
55108: LD_INT 1
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: LD_INT 2
55117: PUSH
55118: LD_INT 2
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_INT 1
55127: PUSH
55128: LD_INT 2
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: LD_INT 0
55137: PUSH
55138: LD_INT 2
55140: PUSH
55141: EMPTY
55142: LIST
55143: LIST
55144: PUSH
55145: LD_INT 1
55147: NEG
55148: PUSH
55149: LD_INT 1
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: LD_INT 2
55158: NEG
55159: PUSH
55160: LD_INT 0
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: LD_INT 2
55169: NEG
55170: PUSH
55171: LD_INT 1
55173: NEG
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: PUSH
55179: LD_INT 2
55181: NEG
55182: PUSH
55183: LD_INT 2
55185: NEG
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: EMPTY
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55212: LD_ADDR_VAR 0 54
55216: PUSH
55217: LD_INT 0
55219: PUSH
55220: LD_INT 0
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: PUSH
55227: LD_INT 0
55229: PUSH
55230: LD_INT 1
55232: NEG
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: LD_INT 1
55240: PUSH
55241: LD_INT 0
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: LD_INT 1
55250: PUSH
55251: LD_INT 1
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 0
55260: PUSH
55261: LD_INT 1
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: PUSH
55268: LD_INT 1
55270: NEG
55271: PUSH
55272: LD_INT 0
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: PUSH
55279: LD_INT 1
55281: NEG
55282: PUSH
55283: LD_INT 1
55285: NEG
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: LD_INT 1
55293: NEG
55294: PUSH
55295: LD_INT 2
55297: NEG
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_INT 0
55305: PUSH
55306: LD_INT 2
55308: NEG
55309: PUSH
55310: EMPTY
55311: LIST
55312: LIST
55313: PUSH
55314: LD_INT 1
55316: PUSH
55317: LD_INT 1
55319: NEG
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 2
55327: PUSH
55328: LD_INT 0
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 2
55337: PUSH
55338: LD_INT 1
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 2
55347: PUSH
55348: LD_INT 2
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 1
55357: PUSH
55358: LD_INT 2
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 0
55367: PUSH
55368: LD_INT 2
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: PUSH
55375: LD_INT 1
55377: NEG
55378: PUSH
55379: LD_INT 1
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 2
55388: NEG
55389: PUSH
55390: LD_INT 0
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 2
55399: NEG
55400: PUSH
55401: LD_INT 1
55403: NEG
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 2
55411: NEG
55412: PUSH
55413: LD_INT 2
55415: NEG
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55442: LD_ADDR_VAR 0 55
55446: PUSH
55447: LD_INT 0
55449: PUSH
55450: LD_INT 0
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 0
55459: PUSH
55460: LD_INT 1
55462: NEG
55463: PUSH
55464: EMPTY
55465: LIST
55466: LIST
55467: PUSH
55468: LD_INT 1
55470: PUSH
55471: LD_INT 0
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 1
55480: PUSH
55481: LD_INT 1
55483: PUSH
55484: EMPTY
55485: LIST
55486: LIST
55487: PUSH
55488: LD_INT 0
55490: PUSH
55491: LD_INT 1
55493: PUSH
55494: EMPTY
55495: LIST
55496: LIST
55497: PUSH
55498: LD_INT 1
55500: NEG
55501: PUSH
55502: LD_INT 0
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: PUSH
55509: LD_INT 1
55511: NEG
55512: PUSH
55513: LD_INT 1
55515: NEG
55516: PUSH
55517: EMPTY
55518: LIST
55519: LIST
55520: PUSH
55521: LD_INT 1
55523: NEG
55524: PUSH
55525: LD_INT 2
55527: NEG
55528: PUSH
55529: EMPTY
55530: LIST
55531: LIST
55532: PUSH
55533: LD_INT 0
55535: PUSH
55536: LD_INT 2
55538: NEG
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: PUSH
55544: LD_INT 1
55546: PUSH
55547: LD_INT 1
55549: NEG
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: LD_INT 2
55557: PUSH
55558: LD_INT 0
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 2
55567: PUSH
55568: LD_INT 1
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 2
55577: PUSH
55578: LD_INT 2
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 1
55587: PUSH
55588: LD_INT 2
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 0
55597: PUSH
55598: LD_INT 2
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: LD_INT 1
55607: NEG
55608: PUSH
55609: LD_INT 1
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 2
55618: NEG
55619: PUSH
55620: LD_INT 0
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 2
55629: NEG
55630: PUSH
55631: LD_INT 1
55633: NEG
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: PUSH
55639: LD_INT 2
55641: NEG
55642: PUSH
55643: LD_INT 2
55645: NEG
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: LIST
55662: LIST
55663: LIST
55664: LIST
55665: LIST
55666: LIST
55667: LIST
55668: LIST
55669: LIST
55670: LIST
55671: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55672: LD_ADDR_VAR 0 56
55676: PUSH
55677: LD_INT 0
55679: PUSH
55680: LD_INT 0
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 0
55689: PUSH
55690: LD_INT 1
55692: NEG
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 1
55700: PUSH
55701: LD_INT 0
55703: PUSH
55704: EMPTY
55705: LIST
55706: LIST
55707: PUSH
55708: LD_INT 1
55710: PUSH
55711: LD_INT 1
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: PUSH
55718: LD_INT 0
55720: PUSH
55721: LD_INT 1
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: LD_INT 1
55730: NEG
55731: PUSH
55732: LD_INT 0
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 1
55741: NEG
55742: PUSH
55743: LD_INT 1
55745: NEG
55746: PUSH
55747: EMPTY
55748: LIST
55749: LIST
55750: PUSH
55751: LD_INT 1
55753: NEG
55754: PUSH
55755: LD_INT 2
55757: NEG
55758: PUSH
55759: EMPTY
55760: LIST
55761: LIST
55762: PUSH
55763: LD_INT 0
55765: PUSH
55766: LD_INT 2
55768: NEG
55769: PUSH
55770: EMPTY
55771: LIST
55772: LIST
55773: PUSH
55774: LD_INT 1
55776: PUSH
55777: LD_INT 1
55779: NEG
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PUSH
55785: LD_INT 2
55787: PUSH
55788: LD_INT 0
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: PUSH
55795: LD_INT 2
55797: PUSH
55798: LD_INT 1
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: LD_INT 2
55807: PUSH
55808: LD_INT 2
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: PUSH
55815: LD_INT 1
55817: PUSH
55818: LD_INT 2
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 0
55827: PUSH
55828: LD_INT 2
55830: PUSH
55831: EMPTY
55832: LIST
55833: LIST
55834: PUSH
55835: LD_INT 1
55837: NEG
55838: PUSH
55839: LD_INT 1
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 2
55848: NEG
55849: PUSH
55850: LD_INT 0
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 2
55859: NEG
55860: PUSH
55861: LD_INT 1
55863: NEG
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 2
55871: NEG
55872: PUSH
55873: LD_INT 2
55875: NEG
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55902: LD_ADDR_VAR 0 57
55906: PUSH
55907: LD_INT 0
55909: PUSH
55910: LD_INT 0
55912: PUSH
55913: EMPTY
55914: LIST
55915: LIST
55916: PUSH
55917: LD_INT 0
55919: PUSH
55920: LD_INT 1
55922: NEG
55923: PUSH
55924: EMPTY
55925: LIST
55926: LIST
55927: PUSH
55928: LD_INT 1
55930: PUSH
55931: LD_INT 0
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: PUSH
55938: LD_INT 1
55940: PUSH
55941: LD_INT 1
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 0
55950: PUSH
55951: LD_INT 1
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 1
55960: NEG
55961: PUSH
55962: LD_INT 0
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 1
55971: NEG
55972: PUSH
55973: LD_INT 1
55975: NEG
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 1
55983: NEG
55984: PUSH
55985: LD_INT 2
55987: NEG
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 0
55995: PUSH
55996: LD_INT 2
55998: NEG
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 1
56006: PUSH
56007: LD_INT 1
56009: NEG
56010: PUSH
56011: EMPTY
56012: LIST
56013: LIST
56014: PUSH
56015: LD_INT 2
56017: PUSH
56018: LD_INT 0
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: PUSH
56025: LD_INT 2
56027: PUSH
56028: LD_INT 1
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 2
56037: PUSH
56038: LD_INT 2
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 1
56047: PUSH
56048: LD_INT 2
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 0
56057: PUSH
56058: LD_INT 2
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: LD_INT 1
56067: NEG
56068: PUSH
56069: LD_INT 1
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: LD_INT 2
56078: NEG
56079: PUSH
56080: LD_INT 0
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PUSH
56087: LD_INT 2
56089: NEG
56090: PUSH
56091: LD_INT 1
56093: NEG
56094: PUSH
56095: EMPTY
56096: LIST
56097: LIST
56098: PUSH
56099: LD_INT 2
56101: NEG
56102: PUSH
56103: LD_INT 2
56105: NEG
56106: PUSH
56107: EMPTY
56108: LIST
56109: LIST
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: LIST
56121: LIST
56122: LIST
56123: LIST
56124: LIST
56125: LIST
56126: LIST
56127: LIST
56128: LIST
56129: LIST
56130: LIST
56131: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56132: LD_ADDR_VAR 0 58
56136: PUSH
56137: LD_INT 0
56139: PUSH
56140: LD_INT 0
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 0
56149: PUSH
56150: LD_INT 1
56152: NEG
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 1
56160: PUSH
56161: LD_INT 0
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 1
56170: PUSH
56171: LD_INT 1
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: LD_INT 0
56180: PUSH
56181: LD_INT 1
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 1
56190: NEG
56191: PUSH
56192: LD_INT 0
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 1
56201: NEG
56202: PUSH
56203: LD_INT 1
56205: NEG
56206: PUSH
56207: EMPTY
56208: LIST
56209: LIST
56210: PUSH
56211: LD_INT 1
56213: NEG
56214: PUSH
56215: LD_INT 2
56217: NEG
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: PUSH
56223: LD_INT 0
56225: PUSH
56226: LD_INT 2
56228: NEG
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 1
56236: PUSH
56237: LD_INT 1
56239: NEG
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: LD_INT 2
56247: PUSH
56248: LD_INT 0
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 2
56257: PUSH
56258: LD_INT 1
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 2
56267: PUSH
56268: LD_INT 2
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 1
56277: PUSH
56278: LD_INT 2
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 0
56287: PUSH
56288: LD_INT 2
56290: PUSH
56291: EMPTY
56292: LIST
56293: LIST
56294: PUSH
56295: LD_INT 1
56297: NEG
56298: PUSH
56299: LD_INT 1
56301: PUSH
56302: EMPTY
56303: LIST
56304: LIST
56305: PUSH
56306: LD_INT 2
56308: NEG
56309: PUSH
56310: LD_INT 0
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 2
56319: NEG
56320: PUSH
56321: LD_INT 1
56323: NEG
56324: PUSH
56325: EMPTY
56326: LIST
56327: LIST
56328: PUSH
56329: LD_INT 2
56331: NEG
56332: PUSH
56333: LD_INT 2
56335: NEG
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: LIST
56345: LIST
56346: LIST
56347: LIST
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56362: LD_ADDR_VAR 0 59
56366: PUSH
56367: LD_INT 0
56369: PUSH
56370: LD_INT 0
56372: PUSH
56373: EMPTY
56374: LIST
56375: LIST
56376: PUSH
56377: LD_INT 0
56379: PUSH
56380: LD_INT 1
56382: NEG
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: LD_INT 1
56390: PUSH
56391: LD_INT 0
56393: PUSH
56394: EMPTY
56395: LIST
56396: LIST
56397: PUSH
56398: LD_INT 1
56400: PUSH
56401: LD_INT 1
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: PUSH
56408: LD_INT 0
56410: PUSH
56411: LD_INT 1
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: PUSH
56418: LD_INT 1
56420: NEG
56421: PUSH
56422: LD_INT 0
56424: PUSH
56425: EMPTY
56426: LIST
56427: LIST
56428: PUSH
56429: LD_INT 1
56431: NEG
56432: PUSH
56433: LD_INT 1
56435: NEG
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56450: LD_ADDR_VAR 0 60
56454: PUSH
56455: LD_INT 0
56457: PUSH
56458: LD_INT 0
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: PUSH
56465: LD_INT 0
56467: PUSH
56468: LD_INT 1
56470: NEG
56471: PUSH
56472: EMPTY
56473: LIST
56474: LIST
56475: PUSH
56476: LD_INT 1
56478: PUSH
56479: LD_INT 0
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: PUSH
56486: LD_INT 1
56488: PUSH
56489: LD_INT 1
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 0
56498: PUSH
56499: LD_INT 1
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: PUSH
56506: LD_INT 1
56508: NEG
56509: PUSH
56510: LD_INT 0
56512: PUSH
56513: EMPTY
56514: LIST
56515: LIST
56516: PUSH
56517: LD_INT 1
56519: NEG
56520: PUSH
56521: LD_INT 1
56523: NEG
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56538: LD_ADDR_VAR 0 61
56542: PUSH
56543: LD_INT 0
56545: PUSH
56546: LD_INT 0
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 0
56555: PUSH
56556: LD_INT 1
56558: NEG
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: PUSH
56564: LD_INT 1
56566: PUSH
56567: LD_INT 0
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: PUSH
56574: LD_INT 1
56576: PUSH
56577: LD_INT 1
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: LD_INT 0
56586: PUSH
56587: LD_INT 1
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 1
56596: NEG
56597: PUSH
56598: LD_INT 0
56600: PUSH
56601: EMPTY
56602: LIST
56603: LIST
56604: PUSH
56605: LD_INT 1
56607: NEG
56608: PUSH
56609: LD_INT 1
56611: NEG
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: LIST
56621: LIST
56622: LIST
56623: LIST
56624: LIST
56625: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56626: LD_ADDR_VAR 0 62
56630: PUSH
56631: LD_INT 0
56633: PUSH
56634: LD_INT 0
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: PUSH
56641: LD_INT 0
56643: PUSH
56644: LD_INT 1
56646: NEG
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 1
56654: PUSH
56655: LD_INT 0
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 1
56664: PUSH
56665: LD_INT 1
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 0
56674: PUSH
56675: LD_INT 1
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 1
56684: NEG
56685: PUSH
56686: LD_INT 0
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_INT 1
56695: NEG
56696: PUSH
56697: LD_INT 1
56699: NEG
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: EMPTY
56706: LIST
56707: LIST
56708: LIST
56709: LIST
56710: LIST
56711: LIST
56712: LIST
56713: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56714: LD_ADDR_VAR 0 63
56718: PUSH
56719: LD_INT 0
56721: PUSH
56722: LD_INT 0
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_INT 0
56731: PUSH
56732: LD_INT 1
56734: NEG
56735: PUSH
56736: EMPTY
56737: LIST
56738: LIST
56739: PUSH
56740: LD_INT 1
56742: PUSH
56743: LD_INT 0
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 1
56752: PUSH
56753: LD_INT 1
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_INT 0
56762: PUSH
56763: LD_INT 1
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: PUSH
56770: LD_INT 1
56772: NEG
56773: PUSH
56774: LD_INT 0
56776: PUSH
56777: EMPTY
56778: LIST
56779: LIST
56780: PUSH
56781: LD_INT 1
56783: NEG
56784: PUSH
56785: LD_INT 1
56787: NEG
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: EMPTY
56794: LIST
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56802: LD_ADDR_VAR 0 64
56806: PUSH
56807: LD_INT 0
56809: PUSH
56810: LD_INT 0
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: PUSH
56817: LD_INT 0
56819: PUSH
56820: LD_INT 1
56822: NEG
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 1
56830: PUSH
56831: LD_INT 0
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 1
56840: PUSH
56841: LD_INT 1
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: LD_INT 0
56850: PUSH
56851: LD_INT 1
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 1
56860: NEG
56861: PUSH
56862: LD_INT 0
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 1
56871: NEG
56872: PUSH
56873: LD_INT 1
56875: NEG
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: LIST
56885: LIST
56886: LIST
56887: LIST
56888: LIST
56889: ST_TO_ADDR
// end ; 1 :
56890: GO 62787
56892: LD_INT 1
56894: DOUBLE
56895: EQUAL
56896: IFTRUE 56900
56898: GO 59523
56900: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56901: LD_ADDR_VAR 0 11
56905: PUSH
56906: LD_INT 1
56908: NEG
56909: PUSH
56910: LD_INT 3
56912: NEG
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: PUSH
56918: LD_INT 0
56920: PUSH
56921: LD_INT 3
56923: NEG
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PUSH
56929: LD_INT 1
56931: PUSH
56932: LD_INT 2
56934: NEG
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: PUSH
56940: EMPTY
56941: LIST
56942: LIST
56943: LIST
56944: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56945: LD_ADDR_VAR 0 12
56949: PUSH
56950: LD_INT 2
56952: PUSH
56953: LD_INT 1
56955: NEG
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 3
56963: PUSH
56964: LD_INT 0
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PUSH
56971: LD_INT 3
56973: PUSH
56974: LD_INT 1
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: EMPTY
56982: LIST
56983: LIST
56984: LIST
56985: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56986: LD_ADDR_VAR 0 13
56990: PUSH
56991: LD_INT 3
56993: PUSH
56994: LD_INT 2
56996: PUSH
56997: EMPTY
56998: LIST
56999: LIST
57000: PUSH
57001: LD_INT 3
57003: PUSH
57004: LD_INT 3
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 2
57013: PUSH
57014: LD_INT 3
57016: PUSH
57017: EMPTY
57018: LIST
57019: LIST
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: LIST
57025: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57026: LD_ADDR_VAR 0 14
57030: PUSH
57031: LD_INT 1
57033: PUSH
57034: LD_INT 3
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 0
57043: PUSH
57044: LD_INT 3
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: PUSH
57051: LD_INT 1
57053: NEG
57054: PUSH
57055: LD_INT 2
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: EMPTY
57063: LIST
57064: LIST
57065: LIST
57066: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57067: LD_ADDR_VAR 0 15
57071: PUSH
57072: LD_INT 2
57074: NEG
57075: PUSH
57076: LD_INT 1
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: PUSH
57083: LD_INT 3
57085: NEG
57086: PUSH
57087: LD_INT 0
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: LD_INT 3
57096: NEG
57097: PUSH
57098: LD_INT 1
57100: NEG
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: LIST
57110: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57111: LD_ADDR_VAR 0 16
57115: PUSH
57116: LD_INT 2
57118: NEG
57119: PUSH
57120: LD_INT 3
57122: NEG
57123: PUSH
57124: EMPTY
57125: LIST
57126: LIST
57127: PUSH
57128: LD_INT 3
57130: NEG
57131: PUSH
57132: LD_INT 2
57134: NEG
57135: PUSH
57136: EMPTY
57137: LIST
57138: LIST
57139: PUSH
57140: LD_INT 3
57142: NEG
57143: PUSH
57144: LD_INT 3
57146: NEG
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: LIST
57156: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57157: LD_ADDR_VAR 0 17
57161: PUSH
57162: LD_INT 1
57164: NEG
57165: PUSH
57166: LD_INT 3
57168: NEG
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 0
57176: PUSH
57177: LD_INT 3
57179: NEG
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: LD_INT 1
57187: PUSH
57188: LD_INT 2
57190: NEG
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: LIST
57200: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57201: LD_ADDR_VAR 0 18
57205: PUSH
57206: LD_INT 2
57208: PUSH
57209: LD_INT 1
57211: NEG
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 3
57219: PUSH
57220: LD_INT 0
57222: PUSH
57223: EMPTY
57224: LIST
57225: LIST
57226: PUSH
57227: LD_INT 3
57229: PUSH
57230: LD_INT 1
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: EMPTY
57238: LIST
57239: LIST
57240: LIST
57241: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57242: LD_ADDR_VAR 0 19
57246: PUSH
57247: LD_INT 3
57249: PUSH
57250: LD_INT 2
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: PUSH
57257: LD_INT 3
57259: PUSH
57260: LD_INT 3
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 2
57269: PUSH
57270: LD_INT 3
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: EMPTY
57278: LIST
57279: LIST
57280: LIST
57281: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57282: LD_ADDR_VAR 0 20
57286: PUSH
57287: LD_INT 1
57289: PUSH
57290: LD_INT 3
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: PUSH
57297: LD_INT 0
57299: PUSH
57300: LD_INT 3
57302: PUSH
57303: EMPTY
57304: LIST
57305: LIST
57306: PUSH
57307: LD_INT 1
57309: NEG
57310: PUSH
57311: LD_INT 2
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: LIST
57322: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57323: LD_ADDR_VAR 0 21
57327: PUSH
57328: LD_INT 2
57330: NEG
57331: PUSH
57332: LD_INT 1
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: LD_INT 3
57341: NEG
57342: PUSH
57343: LD_INT 0
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 3
57352: NEG
57353: PUSH
57354: LD_INT 1
57356: NEG
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: LIST
57366: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57367: LD_ADDR_VAR 0 22
57371: PUSH
57372: LD_INT 2
57374: NEG
57375: PUSH
57376: LD_INT 3
57378: NEG
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: PUSH
57384: LD_INT 3
57386: NEG
57387: PUSH
57388: LD_INT 2
57390: NEG
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: LD_INT 3
57398: NEG
57399: PUSH
57400: LD_INT 3
57402: NEG
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: LIST
57412: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57413: LD_ADDR_VAR 0 23
57417: PUSH
57418: LD_INT 0
57420: PUSH
57421: LD_INT 3
57423: NEG
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_INT 1
57431: NEG
57432: PUSH
57433: LD_INT 4
57435: NEG
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: LD_INT 1
57443: PUSH
57444: LD_INT 3
57446: NEG
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: EMPTY
57453: LIST
57454: LIST
57455: LIST
57456: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57457: LD_ADDR_VAR 0 24
57461: PUSH
57462: LD_INT 3
57464: PUSH
57465: LD_INT 0
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: LD_INT 3
57474: PUSH
57475: LD_INT 1
57477: NEG
57478: PUSH
57479: EMPTY
57480: LIST
57481: LIST
57482: PUSH
57483: LD_INT 4
57485: PUSH
57486: LD_INT 1
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: EMPTY
57494: LIST
57495: LIST
57496: LIST
57497: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57498: LD_ADDR_VAR 0 25
57502: PUSH
57503: LD_INT 3
57505: PUSH
57506: LD_INT 3
57508: PUSH
57509: EMPTY
57510: LIST
57511: LIST
57512: PUSH
57513: LD_INT 4
57515: PUSH
57516: LD_INT 3
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PUSH
57523: LD_INT 3
57525: PUSH
57526: LD_INT 4
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: LIST
57537: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57538: LD_ADDR_VAR 0 26
57542: PUSH
57543: LD_INT 0
57545: PUSH
57546: LD_INT 3
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 1
57555: PUSH
57556: LD_INT 4
57558: PUSH
57559: EMPTY
57560: LIST
57561: LIST
57562: PUSH
57563: LD_INT 1
57565: NEG
57566: PUSH
57567: LD_INT 3
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: EMPTY
57575: LIST
57576: LIST
57577: LIST
57578: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57579: LD_ADDR_VAR 0 27
57583: PUSH
57584: LD_INT 3
57586: NEG
57587: PUSH
57588: LD_INT 0
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 3
57597: NEG
57598: PUSH
57599: LD_INT 1
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 4
57608: NEG
57609: PUSH
57610: LD_INT 1
57612: NEG
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: LIST
57622: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57623: LD_ADDR_VAR 0 28
57627: PUSH
57628: LD_INT 3
57630: NEG
57631: PUSH
57632: LD_INT 3
57634: NEG
57635: PUSH
57636: EMPTY
57637: LIST
57638: LIST
57639: PUSH
57640: LD_INT 3
57642: NEG
57643: PUSH
57644: LD_INT 4
57646: NEG
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: LD_INT 4
57654: NEG
57655: PUSH
57656: LD_INT 3
57658: NEG
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: LIST
57668: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57669: LD_ADDR_VAR 0 29
57673: PUSH
57674: LD_INT 1
57676: NEG
57677: PUSH
57678: LD_INT 3
57680: NEG
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: LD_INT 0
57688: PUSH
57689: LD_INT 3
57691: NEG
57692: PUSH
57693: EMPTY
57694: LIST
57695: LIST
57696: PUSH
57697: LD_INT 1
57699: PUSH
57700: LD_INT 2
57702: NEG
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 1
57710: NEG
57711: PUSH
57712: LD_INT 4
57714: NEG
57715: PUSH
57716: EMPTY
57717: LIST
57718: LIST
57719: PUSH
57720: LD_INT 0
57722: PUSH
57723: LD_INT 4
57725: NEG
57726: PUSH
57727: EMPTY
57728: LIST
57729: LIST
57730: PUSH
57731: LD_INT 1
57733: PUSH
57734: LD_INT 3
57736: NEG
57737: PUSH
57738: EMPTY
57739: LIST
57740: LIST
57741: PUSH
57742: LD_INT 1
57744: NEG
57745: PUSH
57746: LD_INT 5
57748: NEG
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: PUSH
57754: LD_INT 0
57756: PUSH
57757: LD_INT 5
57759: NEG
57760: PUSH
57761: EMPTY
57762: LIST
57763: LIST
57764: PUSH
57765: LD_INT 1
57767: PUSH
57768: LD_INT 4
57770: NEG
57771: PUSH
57772: EMPTY
57773: LIST
57774: LIST
57775: PUSH
57776: LD_INT 1
57778: NEG
57779: PUSH
57780: LD_INT 6
57782: NEG
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: PUSH
57788: LD_INT 0
57790: PUSH
57791: LD_INT 6
57793: NEG
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: PUSH
57799: LD_INT 1
57801: PUSH
57802: LD_INT 5
57804: NEG
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: LIST
57814: LIST
57815: LIST
57816: LIST
57817: LIST
57818: LIST
57819: LIST
57820: LIST
57821: LIST
57822: LIST
57823: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57824: LD_ADDR_VAR 0 30
57828: PUSH
57829: LD_INT 2
57831: PUSH
57832: LD_INT 1
57834: NEG
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: LD_INT 3
57842: PUSH
57843: LD_INT 0
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 3
57852: PUSH
57853: LD_INT 1
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 3
57862: PUSH
57863: LD_INT 1
57865: NEG
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 4
57873: PUSH
57874: LD_INT 0
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 4
57883: PUSH
57884: LD_INT 1
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: LD_INT 4
57893: PUSH
57894: LD_INT 1
57896: NEG
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: PUSH
57902: LD_INT 5
57904: PUSH
57905: LD_INT 0
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: LD_INT 5
57914: PUSH
57915: LD_INT 1
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 5
57924: PUSH
57925: LD_INT 1
57927: NEG
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 6
57935: PUSH
57936: LD_INT 0
57938: PUSH
57939: EMPTY
57940: LIST
57941: LIST
57942: PUSH
57943: LD_INT 6
57945: PUSH
57946: LD_INT 1
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: LIST
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: LIST
57963: LIST
57964: LIST
57965: LIST
57966: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57967: LD_ADDR_VAR 0 31
57971: PUSH
57972: LD_INT 3
57974: PUSH
57975: LD_INT 2
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: PUSH
57982: LD_INT 3
57984: PUSH
57985: LD_INT 3
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: LD_INT 2
57994: PUSH
57995: LD_INT 3
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: PUSH
58002: LD_INT 4
58004: PUSH
58005: LD_INT 3
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 4
58014: PUSH
58015: LD_INT 4
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: LD_INT 3
58024: PUSH
58025: LD_INT 4
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 5
58034: PUSH
58035: LD_INT 4
58037: PUSH
58038: EMPTY
58039: LIST
58040: LIST
58041: PUSH
58042: LD_INT 5
58044: PUSH
58045: LD_INT 5
58047: PUSH
58048: EMPTY
58049: LIST
58050: LIST
58051: PUSH
58052: LD_INT 4
58054: PUSH
58055: LD_INT 5
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: PUSH
58062: LD_INT 6
58064: PUSH
58065: LD_INT 5
58067: PUSH
58068: EMPTY
58069: LIST
58070: LIST
58071: PUSH
58072: LD_INT 6
58074: PUSH
58075: LD_INT 6
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: PUSH
58082: LD_INT 5
58084: PUSH
58085: LD_INT 6
58087: PUSH
58088: EMPTY
58089: LIST
58090: LIST
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: LIST
58096: LIST
58097: LIST
58098: LIST
58099: LIST
58100: LIST
58101: LIST
58102: LIST
58103: LIST
58104: LIST
58105: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
58106: LD_ADDR_VAR 0 32
58110: PUSH
58111: LD_INT 1
58113: PUSH
58114: LD_INT 3
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 0
58123: PUSH
58124: LD_INT 3
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 1
58133: NEG
58134: PUSH
58135: LD_INT 2
58137: PUSH
58138: EMPTY
58139: LIST
58140: LIST
58141: PUSH
58142: LD_INT 1
58144: PUSH
58145: LD_INT 4
58147: PUSH
58148: EMPTY
58149: LIST
58150: LIST
58151: PUSH
58152: LD_INT 0
58154: PUSH
58155: LD_INT 4
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: LD_INT 1
58164: NEG
58165: PUSH
58166: LD_INT 3
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 1
58175: PUSH
58176: LD_INT 5
58178: PUSH
58179: EMPTY
58180: LIST
58181: LIST
58182: PUSH
58183: LD_INT 0
58185: PUSH
58186: LD_INT 5
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: LD_INT 1
58195: NEG
58196: PUSH
58197: LD_INT 4
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: PUSH
58204: LD_INT 1
58206: PUSH
58207: LD_INT 6
58209: PUSH
58210: EMPTY
58211: LIST
58212: LIST
58213: PUSH
58214: LD_INT 0
58216: PUSH
58217: LD_INT 6
58219: PUSH
58220: EMPTY
58221: LIST
58222: LIST
58223: PUSH
58224: LD_INT 1
58226: NEG
58227: PUSH
58228: LD_INT 5
58230: PUSH
58231: EMPTY
58232: LIST
58233: LIST
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: LIST
58239: LIST
58240: LIST
58241: LIST
58242: LIST
58243: LIST
58244: LIST
58245: LIST
58246: LIST
58247: LIST
58248: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58249: LD_ADDR_VAR 0 33
58253: PUSH
58254: LD_INT 2
58256: NEG
58257: PUSH
58258: LD_INT 1
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: PUSH
58265: LD_INT 3
58267: NEG
58268: PUSH
58269: LD_INT 0
58271: PUSH
58272: EMPTY
58273: LIST
58274: LIST
58275: PUSH
58276: LD_INT 3
58278: NEG
58279: PUSH
58280: LD_INT 1
58282: NEG
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: PUSH
58288: LD_INT 3
58290: NEG
58291: PUSH
58292: LD_INT 1
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: LD_INT 4
58301: NEG
58302: PUSH
58303: LD_INT 0
58305: PUSH
58306: EMPTY
58307: LIST
58308: LIST
58309: PUSH
58310: LD_INT 4
58312: NEG
58313: PUSH
58314: LD_INT 1
58316: NEG
58317: PUSH
58318: EMPTY
58319: LIST
58320: LIST
58321: PUSH
58322: LD_INT 4
58324: NEG
58325: PUSH
58326: LD_INT 1
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: PUSH
58333: LD_INT 5
58335: NEG
58336: PUSH
58337: LD_INT 0
58339: PUSH
58340: EMPTY
58341: LIST
58342: LIST
58343: PUSH
58344: LD_INT 5
58346: NEG
58347: PUSH
58348: LD_INT 1
58350: NEG
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: PUSH
58356: LD_INT 5
58358: NEG
58359: PUSH
58360: LD_INT 1
58362: PUSH
58363: EMPTY
58364: LIST
58365: LIST
58366: PUSH
58367: LD_INT 6
58369: NEG
58370: PUSH
58371: LD_INT 0
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: PUSH
58378: LD_INT 6
58380: NEG
58381: PUSH
58382: LD_INT 1
58384: NEG
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: LIST
58394: LIST
58395: LIST
58396: LIST
58397: LIST
58398: LIST
58399: LIST
58400: LIST
58401: LIST
58402: LIST
58403: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58404: LD_ADDR_VAR 0 34
58408: PUSH
58409: LD_INT 2
58411: NEG
58412: PUSH
58413: LD_INT 3
58415: NEG
58416: PUSH
58417: EMPTY
58418: LIST
58419: LIST
58420: PUSH
58421: LD_INT 3
58423: NEG
58424: PUSH
58425: LD_INT 2
58427: NEG
58428: PUSH
58429: EMPTY
58430: LIST
58431: LIST
58432: PUSH
58433: LD_INT 3
58435: NEG
58436: PUSH
58437: LD_INT 3
58439: NEG
58440: PUSH
58441: EMPTY
58442: LIST
58443: LIST
58444: PUSH
58445: LD_INT 3
58447: NEG
58448: PUSH
58449: LD_INT 4
58451: NEG
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: LD_INT 4
58459: NEG
58460: PUSH
58461: LD_INT 3
58463: NEG
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: LD_INT 4
58471: NEG
58472: PUSH
58473: LD_INT 4
58475: NEG
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: LD_INT 4
58483: NEG
58484: PUSH
58485: LD_INT 5
58487: NEG
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: PUSH
58493: LD_INT 5
58495: NEG
58496: PUSH
58497: LD_INT 4
58499: NEG
58500: PUSH
58501: EMPTY
58502: LIST
58503: LIST
58504: PUSH
58505: LD_INT 5
58507: NEG
58508: PUSH
58509: LD_INT 5
58511: NEG
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: LD_INT 5
58519: NEG
58520: PUSH
58521: LD_INT 6
58523: NEG
58524: PUSH
58525: EMPTY
58526: LIST
58527: LIST
58528: PUSH
58529: LD_INT 6
58531: NEG
58532: PUSH
58533: LD_INT 5
58535: NEG
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: PUSH
58541: LD_INT 6
58543: NEG
58544: PUSH
58545: LD_INT 6
58547: NEG
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: EMPTY
58554: LIST
58555: LIST
58556: LIST
58557: LIST
58558: LIST
58559: LIST
58560: LIST
58561: LIST
58562: LIST
58563: LIST
58564: LIST
58565: LIST
58566: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58567: LD_ADDR_VAR 0 41
58571: PUSH
58572: LD_INT 0
58574: PUSH
58575: LD_INT 2
58577: NEG
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: LD_INT 1
58585: NEG
58586: PUSH
58587: LD_INT 3
58589: NEG
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: PUSH
58595: LD_INT 1
58597: PUSH
58598: LD_INT 2
58600: NEG
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: LIST
58610: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58611: LD_ADDR_VAR 0 42
58615: PUSH
58616: LD_INT 2
58618: PUSH
58619: LD_INT 0
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: PUSH
58626: LD_INT 2
58628: PUSH
58629: LD_INT 1
58631: NEG
58632: PUSH
58633: EMPTY
58634: LIST
58635: LIST
58636: PUSH
58637: LD_INT 3
58639: PUSH
58640: LD_INT 1
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: LIST
58651: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58652: LD_ADDR_VAR 0 43
58656: PUSH
58657: LD_INT 2
58659: PUSH
58660: LD_INT 2
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: PUSH
58667: LD_INT 3
58669: PUSH
58670: LD_INT 2
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: LD_INT 2
58679: PUSH
58680: LD_INT 3
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: LIST
58691: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58692: LD_ADDR_VAR 0 44
58696: PUSH
58697: LD_INT 0
58699: PUSH
58700: LD_INT 2
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: LD_INT 1
58709: PUSH
58710: LD_INT 3
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: PUSH
58717: LD_INT 1
58719: NEG
58720: PUSH
58721: LD_INT 2
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: PUSH
58728: EMPTY
58729: LIST
58730: LIST
58731: LIST
58732: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58733: LD_ADDR_VAR 0 45
58737: PUSH
58738: LD_INT 2
58740: NEG
58741: PUSH
58742: LD_INT 0
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 2
58751: NEG
58752: PUSH
58753: LD_INT 1
58755: PUSH
58756: EMPTY
58757: LIST
58758: LIST
58759: PUSH
58760: LD_INT 3
58762: NEG
58763: PUSH
58764: LD_INT 1
58766: NEG
58767: PUSH
58768: EMPTY
58769: LIST
58770: LIST
58771: PUSH
58772: EMPTY
58773: LIST
58774: LIST
58775: LIST
58776: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58777: LD_ADDR_VAR 0 46
58781: PUSH
58782: LD_INT 2
58784: NEG
58785: PUSH
58786: LD_INT 2
58788: NEG
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 2
58796: NEG
58797: PUSH
58798: LD_INT 3
58800: NEG
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: PUSH
58806: LD_INT 3
58808: NEG
58809: PUSH
58810: LD_INT 2
58812: NEG
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: LIST
58822: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58823: LD_ADDR_VAR 0 47
58827: PUSH
58828: LD_INT 2
58830: NEG
58831: PUSH
58832: LD_INT 3
58834: NEG
58835: PUSH
58836: EMPTY
58837: LIST
58838: LIST
58839: PUSH
58840: LD_INT 1
58842: NEG
58843: PUSH
58844: LD_INT 3
58846: NEG
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: EMPTY
58853: LIST
58854: LIST
58855: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58856: LD_ADDR_VAR 0 48
58860: PUSH
58861: LD_INT 1
58863: PUSH
58864: LD_INT 2
58866: NEG
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 2
58874: PUSH
58875: LD_INT 1
58877: NEG
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58887: LD_ADDR_VAR 0 49
58891: PUSH
58892: LD_INT 3
58894: PUSH
58895: LD_INT 1
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 3
58904: PUSH
58905: LD_INT 2
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58916: LD_ADDR_VAR 0 50
58920: PUSH
58921: LD_INT 2
58923: PUSH
58924: LD_INT 3
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: PUSH
58931: LD_INT 1
58933: PUSH
58934: LD_INT 3
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58945: LD_ADDR_VAR 0 51
58949: PUSH
58950: LD_INT 1
58952: NEG
58953: PUSH
58954: LD_INT 2
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PUSH
58961: LD_INT 2
58963: NEG
58964: PUSH
58965: LD_INT 1
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: PUSH
58972: EMPTY
58973: LIST
58974: LIST
58975: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58976: LD_ADDR_VAR 0 52
58980: PUSH
58981: LD_INT 3
58983: NEG
58984: PUSH
58985: LD_INT 1
58987: NEG
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 3
58995: NEG
58996: PUSH
58997: LD_INT 2
58999: NEG
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59009: LD_ADDR_VAR 0 53
59013: PUSH
59014: LD_INT 1
59016: NEG
59017: PUSH
59018: LD_INT 3
59020: NEG
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 0
59028: PUSH
59029: LD_INT 3
59031: NEG
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: LD_INT 1
59039: PUSH
59040: LD_INT 2
59042: NEG
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: LIST
59052: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59053: LD_ADDR_VAR 0 54
59057: PUSH
59058: LD_INT 2
59060: PUSH
59061: LD_INT 1
59063: NEG
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: PUSH
59069: LD_INT 3
59071: PUSH
59072: LD_INT 0
59074: PUSH
59075: EMPTY
59076: LIST
59077: LIST
59078: PUSH
59079: LD_INT 3
59081: PUSH
59082: LD_INT 1
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: LIST
59093: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59094: LD_ADDR_VAR 0 55
59098: PUSH
59099: LD_INT 3
59101: PUSH
59102: LD_INT 2
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: PUSH
59109: LD_INT 3
59111: PUSH
59112: LD_INT 3
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: PUSH
59119: LD_INT 2
59121: PUSH
59122: LD_INT 3
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: LIST
59133: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59134: LD_ADDR_VAR 0 56
59138: PUSH
59139: LD_INT 1
59141: PUSH
59142: LD_INT 3
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: LD_INT 0
59151: PUSH
59152: LD_INT 3
59154: PUSH
59155: EMPTY
59156: LIST
59157: LIST
59158: PUSH
59159: LD_INT 1
59161: NEG
59162: PUSH
59163: LD_INT 2
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: LIST
59174: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59175: LD_ADDR_VAR 0 57
59179: PUSH
59180: LD_INT 2
59182: NEG
59183: PUSH
59184: LD_INT 1
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 3
59193: NEG
59194: PUSH
59195: LD_INT 0
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: LD_INT 3
59204: NEG
59205: PUSH
59206: LD_INT 1
59208: NEG
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: LIST
59218: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59219: LD_ADDR_VAR 0 58
59223: PUSH
59224: LD_INT 2
59226: NEG
59227: PUSH
59228: LD_INT 3
59230: NEG
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: PUSH
59236: LD_INT 3
59238: NEG
59239: PUSH
59240: LD_INT 2
59242: NEG
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: PUSH
59248: LD_INT 3
59250: NEG
59251: PUSH
59252: LD_INT 3
59254: NEG
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: LIST
59264: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59265: LD_ADDR_VAR 0 59
59269: PUSH
59270: LD_INT 1
59272: NEG
59273: PUSH
59274: LD_INT 2
59276: NEG
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 0
59284: PUSH
59285: LD_INT 2
59287: NEG
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: LD_INT 1
59295: PUSH
59296: LD_INT 1
59298: NEG
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: EMPTY
59305: LIST
59306: LIST
59307: LIST
59308: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59309: LD_ADDR_VAR 0 60
59313: PUSH
59314: LD_INT 1
59316: PUSH
59317: LD_INT 1
59319: NEG
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: PUSH
59325: LD_INT 2
59327: PUSH
59328: LD_INT 0
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: PUSH
59335: LD_INT 2
59337: PUSH
59338: LD_INT 1
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: LIST
59349: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59350: LD_ADDR_VAR 0 61
59354: PUSH
59355: LD_INT 2
59357: PUSH
59358: LD_INT 1
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: PUSH
59365: LD_INT 2
59367: PUSH
59368: LD_INT 2
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: PUSH
59375: LD_INT 1
59377: PUSH
59378: LD_INT 2
59380: PUSH
59381: EMPTY
59382: LIST
59383: LIST
59384: PUSH
59385: EMPTY
59386: LIST
59387: LIST
59388: LIST
59389: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59390: LD_ADDR_VAR 0 62
59394: PUSH
59395: LD_INT 1
59397: PUSH
59398: LD_INT 2
59400: PUSH
59401: EMPTY
59402: LIST
59403: LIST
59404: PUSH
59405: LD_INT 0
59407: PUSH
59408: LD_INT 2
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: PUSH
59415: LD_INT 1
59417: NEG
59418: PUSH
59419: LD_INT 1
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: LIST
59430: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59431: LD_ADDR_VAR 0 63
59435: PUSH
59436: LD_INT 1
59438: NEG
59439: PUSH
59440: LD_INT 1
59442: PUSH
59443: EMPTY
59444: LIST
59445: LIST
59446: PUSH
59447: LD_INT 2
59449: NEG
59450: PUSH
59451: LD_INT 0
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: PUSH
59458: LD_INT 2
59460: NEG
59461: PUSH
59462: LD_INT 1
59464: NEG
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: LIST
59474: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59475: LD_ADDR_VAR 0 64
59479: PUSH
59480: LD_INT 1
59482: NEG
59483: PUSH
59484: LD_INT 2
59486: NEG
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 2
59494: NEG
59495: PUSH
59496: LD_INT 1
59498: NEG
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 2
59506: NEG
59507: PUSH
59508: LD_INT 2
59510: NEG
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: LIST
59520: ST_TO_ADDR
// end ; 2 :
59521: GO 62787
59523: LD_INT 2
59525: DOUBLE
59526: EQUAL
59527: IFTRUE 59531
59529: GO 62786
59531: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59532: LD_ADDR_VAR 0 29
59536: PUSH
59537: LD_INT 4
59539: PUSH
59540: LD_INT 0
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: PUSH
59547: LD_INT 4
59549: PUSH
59550: LD_INT 1
59552: NEG
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: PUSH
59558: LD_INT 5
59560: PUSH
59561: LD_INT 0
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: PUSH
59568: LD_INT 5
59570: PUSH
59571: LD_INT 1
59573: PUSH
59574: EMPTY
59575: LIST
59576: LIST
59577: PUSH
59578: LD_INT 4
59580: PUSH
59581: LD_INT 1
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: LD_INT 3
59590: PUSH
59591: LD_INT 0
59593: PUSH
59594: EMPTY
59595: LIST
59596: LIST
59597: PUSH
59598: LD_INT 3
59600: PUSH
59601: LD_INT 1
59603: NEG
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 3
59611: PUSH
59612: LD_INT 2
59614: NEG
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: LD_INT 5
59622: PUSH
59623: LD_INT 2
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: LD_INT 3
59632: PUSH
59633: LD_INT 3
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 3
59642: PUSH
59643: LD_INT 2
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: LD_INT 4
59652: PUSH
59653: LD_INT 3
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 4
59662: PUSH
59663: LD_INT 4
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: LD_INT 3
59672: PUSH
59673: LD_INT 4
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: LD_INT 2
59682: PUSH
59683: LD_INT 3
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 2
59692: PUSH
59693: LD_INT 2
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: PUSH
59700: LD_INT 4
59702: PUSH
59703: LD_INT 2
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: PUSH
59710: LD_INT 2
59712: PUSH
59713: LD_INT 4
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: PUSH
59720: LD_INT 0
59722: PUSH
59723: LD_INT 4
59725: PUSH
59726: EMPTY
59727: LIST
59728: LIST
59729: PUSH
59730: LD_INT 0
59732: PUSH
59733: LD_INT 3
59735: PUSH
59736: EMPTY
59737: LIST
59738: LIST
59739: PUSH
59740: LD_INT 1
59742: PUSH
59743: LD_INT 4
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: PUSH
59750: LD_INT 1
59752: PUSH
59753: LD_INT 5
59755: PUSH
59756: EMPTY
59757: LIST
59758: LIST
59759: PUSH
59760: LD_INT 0
59762: PUSH
59763: LD_INT 5
59765: PUSH
59766: EMPTY
59767: LIST
59768: LIST
59769: PUSH
59770: LD_INT 1
59772: NEG
59773: PUSH
59774: LD_INT 4
59776: PUSH
59777: EMPTY
59778: LIST
59779: LIST
59780: PUSH
59781: LD_INT 1
59783: NEG
59784: PUSH
59785: LD_INT 3
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: LD_INT 2
59794: PUSH
59795: LD_INT 5
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: LD_INT 2
59804: NEG
59805: PUSH
59806: LD_INT 3
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: PUSH
59813: LD_INT 3
59815: NEG
59816: PUSH
59817: LD_INT 0
59819: PUSH
59820: EMPTY
59821: LIST
59822: LIST
59823: PUSH
59824: LD_INT 3
59826: NEG
59827: PUSH
59828: LD_INT 1
59830: NEG
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: PUSH
59836: LD_INT 2
59838: NEG
59839: PUSH
59840: LD_INT 0
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PUSH
59847: LD_INT 2
59849: NEG
59850: PUSH
59851: LD_INT 1
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: PUSH
59858: LD_INT 3
59860: NEG
59861: PUSH
59862: LD_INT 1
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PUSH
59869: LD_INT 4
59871: NEG
59872: PUSH
59873: LD_INT 0
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: LD_INT 4
59882: NEG
59883: PUSH
59884: LD_INT 1
59886: NEG
59887: PUSH
59888: EMPTY
59889: LIST
59890: LIST
59891: PUSH
59892: LD_INT 4
59894: NEG
59895: PUSH
59896: LD_INT 2
59898: NEG
59899: PUSH
59900: EMPTY
59901: LIST
59902: LIST
59903: PUSH
59904: LD_INT 2
59906: NEG
59907: PUSH
59908: LD_INT 2
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 4
59917: NEG
59918: PUSH
59919: LD_INT 4
59921: NEG
59922: PUSH
59923: EMPTY
59924: LIST
59925: LIST
59926: PUSH
59927: LD_INT 4
59929: NEG
59930: PUSH
59931: LD_INT 5
59933: NEG
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PUSH
59939: LD_INT 3
59941: NEG
59942: PUSH
59943: LD_INT 4
59945: NEG
59946: PUSH
59947: EMPTY
59948: LIST
59949: LIST
59950: PUSH
59951: LD_INT 3
59953: NEG
59954: PUSH
59955: LD_INT 3
59957: NEG
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: PUSH
59963: LD_INT 4
59965: NEG
59966: PUSH
59967: LD_INT 3
59969: NEG
59970: PUSH
59971: EMPTY
59972: LIST
59973: LIST
59974: PUSH
59975: LD_INT 5
59977: NEG
59978: PUSH
59979: LD_INT 4
59981: NEG
59982: PUSH
59983: EMPTY
59984: LIST
59985: LIST
59986: PUSH
59987: LD_INT 5
59989: NEG
59990: PUSH
59991: LD_INT 5
59993: NEG
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: PUSH
59999: LD_INT 3
60001: NEG
60002: PUSH
60003: LD_INT 5
60005: NEG
60006: PUSH
60007: EMPTY
60008: LIST
60009: LIST
60010: PUSH
60011: LD_INT 5
60013: NEG
60014: PUSH
60015: LD_INT 3
60017: NEG
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: LIST
60027: LIST
60028: LIST
60029: LIST
60030: LIST
60031: LIST
60032: LIST
60033: LIST
60034: LIST
60035: LIST
60036: LIST
60037: LIST
60038: LIST
60039: LIST
60040: LIST
60041: LIST
60042: LIST
60043: LIST
60044: LIST
60045: LIST
60046: LIST
60047: LIST
60048: LIST
60049: LIST
60050: LIST
60051: LIST
60052: LIST
60053: LIST
60054: LIST
60055: LIST
60056: LIST
60057: LIST
60058: LIST
60059: LIST
60060: LIST
60061: LIST
60062: LIST
60063: LIST
60064: LIST
60065: LIST
60066: LIST
60067: LIST
60068: LIST
60069: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
60070: LD_ADDR_VAR 0 30
60074: PUSH
60075: LD_INT 4
60077: PUSH
60078: LD_INT 4
60080: PUSH
60081: EMPTY
60082: LIST
60083: LIST
60084: PUSH
60085: LD_INT 4
60087: PUSH
60088: LD_INT 3
60090: PUSH
60091: EMPTY
60092: LIST
60093: LIST
60094: PUSH
60095: LD_INT 5
60097: PUSH
60098: LD_INT 4
60100: PUSH
60101: EMPTY
60102: LIST
60103: LIST
60104: PUSH
60105: LD_INT 5
60107: PUSH
60108: LD_INT 5
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: PUSH
60115: LD_INT 4
60117: PUSH
60118: LD_INT 5
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: LD_INT 3
60127: PUSH
60128: LD_INT 4
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: PUSH
60135: LD_INT 3
60137: PUSH
60138: LD_INT 3
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PUSH
60145: LD_INT 5
60147: PUSH
60148: LD_INT 3
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PUSH
60155: LD_INT 3
60157: PUSH
60158: LD_INT 5
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 0
60167: PUSH
60168: LD_INT 3
60170: PUSH
60171: EMPTY
60172: LIST
60173: LIST
60174: PUSH
60175: LD_INT 0
60177: PUSH
60178: LD_INT 2
60180: PUSH
60181: EMPTY
60182: LIST
60183: LIST
60184: PUSH
60185: LD_INT 1
60187: PUSH
60188: LD_INT 3
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 1
60197: PUSH
60198: LD_INT 4
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: LD_INT 0
60207: PUSH
60208: LD_INT 4
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: LD_INT 1
60217: NEG
60218: PUSH
60219: LD_INT 3
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PUSH
60226: LD_INT 1
60228: NEG
60229: PUSH
60230: LD_INT 2
60232: PUSH
60233: EMPTY
60234: LIST
60235: LIST
60236: PUSH
60237: LD_INT 2
60239: PUSH
60240: LD_INT 4
60242: PUSH
60243: EMPTY
60244: LIST
60245: LIST
60246: PUSH
60247: LD_INT 2
60249: NEG
60250: PUSH
60251: LD_INT 2
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: PUSH
60258: LD_INT 4
60260: NEG
60261: PUSH
60262: LD_INT 0
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: PUSH
60269: LD_INT 4
60271: NEG
60272: PUSH
60273: LD_INT 1
60275: NEG
60276: PUSH
60277: EMPTY
60278: LIST
60279: LIST
60280: PUSH
60281: LD_INT 3
60283: NEG
60284: PUSH
60285: LD_INT 0
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: LD_INT 3
60294: NEG
60295: PUSH
60296: LD_INT 1
60298: PUSH
60299: EMPTY
60300: LIST
60301: LIST
60302: PUSH
60303: LD_INT 4
60305: NEG
60306: PUSH
60307: LD_INT 1
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: PUSH
60314: LD_INT 5
60316: NEG
60317: PUSH
60318: LD_INT 0
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: PUSH
60325: LD_INT 5
60327: NEG
60328: PUSH
60329: LD_INT 1
60331: NEG
60332: PUSH
60333: EMPTY
60334: LIST
60335: LIST
60336: PUSH
60337: LD_INT 5
60339: NEG
60340: PUSH
60341: LD_INT 2
60343: NEG
60344: PUSH
60345: EMPTY
60346: LIST
60347: LIST
60348: PUSH
60349: LD_INT 3
60351: NEG
60352: PUSH
60353: LD_INT 2
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: LD_INT 3
60362: NEG
60363: PUSH
60364: LD_INT 3
60366: NEG
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 3
60374: NEG
60375: PUSH
60376: LD_INT 4
60378: NEG
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 2
60386: NEG
60387: PUSH
60388: LD_INT 3
60390: NEG
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: LD_INT 2
60398: NEG
60399: PUSH
60400: LD_INT 2
60402: NEG
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: PUSH
60408: LD_INT 3
60410: NEG
60411: PUSH
60412: LD_INT 2
60414: NEG
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: PUSH
60420: LD_INT 4
60422: NEG
60423: PUSH
60424: LD_INT 3
60426: NEG
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: PUSH
60432: LD_INT 4
60434: NEG
60435: PUSH
60436: LD_INT 4
60438: NEG
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: LD_INT 2
60446: NEG
60447: PUSH
60448: LD_INT 4
60450: NEG
60451: PUSH
60452: EMPTY
60453: LIST
60454: LIST
60455: PUSH
60456: LD_INT 4
60458: NEG
60459: PUSH
60460: LD_INT 2
60462: NEG
60463: PUSH
60464: EMPTY
60465: LIST
60466: LIST
60467: PUSH
60468: LD_INT 0
60470: PUSH
60471: LD_INT 4
60473: NEG
60474: PUSH
60475: EMPTY
60476: LIST
60477: LIST
60478: PUSH
60479: LD_INT 0
60481: PUSH
60482: LD_INT 5
60484: NEG
60485: PUSH
60486: EMPTY
60487: LIST
60488: LIST
60489: PUSH
60490: LD_INT 1
60492: PUSH
60493: LD_INT 4
60495: NEG
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: PUSH
60501: LD_INT 1
60503: PUSH
60504: LD_INT 3
60506: NEG
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: PUSH
60512: LD_INT 0
60514: PUSH
60515: LD_INT 3
60517: NEG
60518: PUSH
60519: EMPTY
60520: LIST
60521: LIST
60522: PUSH
60523: LD_INT 1
60525: NEG
60526: PUSH
60527: LD_INT 4
60529: NEG
60530: PUSH
60531: EMPTY
60532: LIST
60533: LIST
60534: PUSH
60535: LD_INT 1
60537: NEG
60538: PUSH
60539: LD_INT 5
60541: NEG
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: PUSH
60547: LD_INT 2
60549: PUSH
60550: LD_INT 3
60552: NEG
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: PUSH
60558: LD_INT 2
60560: NEG
60561: PUSH
60562: LD_INT 5
60564: NEG
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: LIST
60574: LIST
60575: LIST
60576: LIST
60577: LIST
60578: LIST
60579: LIST
60580: LIST
60581: LIST
60582: LIST
60583: LIST
60584: LIST
60585: LIST
60586: LIST
60587: LIST
60588: LIST
60589: LIST
60590: LIST
60591: LIST
60592: LIST
60593: LIST
60594: LIST
60595: LIST
60596: LIST
60597: LIST
60598: LIST
60599: LIST
60600: LIST
60601: LIST
60602: LIST
60603: LIST
60604: LIST
60605: LIST
60606: LIST
60607: LIST
60608: LIST
60609: LIST
60610: LIST
60611: LIST
60612: LIST
60613: LIST
60614: LIST
60615: LIST
60616: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60617: LD_ADDR_VAR 0 31
60621: PUSH
60622: LD_INT 0
60624: PUSH
60625: LD_INT 4
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: PUSH
60632: LD_INT 0
60634: PUSH
60635: LD_INT 3
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: LD_INT 1
60644: PUSH
60645: LD_INT 4
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: PUSH
60652: LD_INT 1
60654: PUSH
60655: LD_INT 5
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: PUSH
60662: LD_INT 0
60664: PUSH
60665: LD_INT 5
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PUSH
60672: LD_INT 1
60674: NEG
60675: PUSH
60676: LD_INT 4
60678: PUSH
60679: EMPTY
60680: LIST
60681: LIST
60682: PUSH
60683: LD_INT 1
60685: NEG
60686: PUSH
60687: LD_INT 3
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: LD_INT 2
60696: PUSH
60697: LD_INT 5
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: PUSH
60704: LD_INT 2
60706: NEG
60707: PUSH
60708: LD_INT 3
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PUSH
60715: LD_INT 3
60717: NEG
60718: PUSH
60719: LD_INT 0
60721: PUSH
60722: EMPTY
60723: LIST
60724: LIST
60725: PUSH
60726: LD_INT 3
60728: NEG
60729: PUSH
60730: LD_INT 1
60732: NEG
60733: PUSH
60734: EMPTY
60735: LIST
60736: LIST
60737: PUSH
60738: LD_INT 2
60740: NEG
60741: PUSH
60742: LD_INT 0
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: PUSH
60749: LD_INT 2
60751: NEG
60752: PUSH
60753: LD_INT 1
60755: PUSH
60756: EMPTY
60757: LIST
60758: LIST
60759: PUSH
60760: LD_INT 3
60762: NEG
60763: PUSH
60764: LD_INT 1
60766: PUSH
60767: EMPTY
60768: LIST
60769: LIST
60770: PUSH
60771: LD_INT 4
60773: NEG
60774: PUSH
60775: LD_INT 0
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 4
60784: NEG
60785: PUSH
60786: LD_INT 1
60788: NEG
60789: PUSH
60790: EMPTY
60791: LIST
60792: LIST
60793: PUSH
60794: LD_INT 4
60796: NEG
60797: PUSH
60798: LD_INT 2
60800: NEG
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PUSH
60806: LD_INT 2
60808: NEG
60809: PUSH
60810: LD_INT 2
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: LD_INT 4
60819: NEG
60820: PUSH
60821: LD_INT 4
60823: NEG
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: LD_INT 4
60831: NEG
60832: PUSH
60833: LD_INT 5
60835: NEG
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: PUSH
60841: LD_INT 3
60843: NEG
60844: PUSH
60845: LD_INT 4
60847: NEG
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: PUSH
60853: LD_INT 3
60855: NEG
60856: PUSH
60857: LD_INT 3
60859: NEG
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 4
60867: NEG
60868: PUSH
60869: LD_INT 3
60871: NEG
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: PUSH
60877: LD_INT 5
60879: NEG
60880: PUSH
60881: LD_INT 4
60883: NEG
60884: PUSH
60885: EMPTY
60886: LIST
60887: LIST
60888: PUSH
60889: LD_INT 5
60891: NEG
60892: PUSH
60893: LD_INT 5
60895: NEG
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: PUSH
60901: LD_INT 3
60903: NEG
60904: PUSH
60905: LD_INT 5
60907: NEG
60908: PUSH
60909: EMPTY
60910: LIST
60911: LIST
60912: PUSH
60913: LD_INT 5
60915: NEG
60916: PUSH
60917: LD_INT 3
60919: NEG
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: PUSH
60925: LD_INT 0
60927: PUSH
60928: LD_INT 3
60930: NEG
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 0
60938: PUSH
60939: LD_INT 4
60941: NEG
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: PUSH
60947: LD_INT 1
60949: PUSH
60950: LD_INT 3
60952: NEG
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: PUSH
60958: LD_INT 1
60960: PUSH
60961: LD_INT 2
60963: NEG
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: PUSH
60969: LD_INT 0
60971: PUSH
60972: LD_INT 2
60974: NEG
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: PUSH
60980: LD_INT 1
60982: NEG
60983: PUSH
60984: LD_INT 3
60986: NEG
60987: PUSH
60988: EMPTY
60989: LIST
60990: LIST
60991: PUSH
60992: LD_INT 1
60994: NEG
60995: PUSH
60996: LD_INT 4
60998: NEG
60999: PUSH
61000: EMPTY
61001: LIST
61002: LIST
61003: PUSH
61004: LD_INT 2
61006: PUSH
61007: LD_INT 2
61009: NEG
61010: PUSH
61011: EMPTY
61012: LIST
61013: LIST
61014: PUSH
61015: LD_INT 2
61017: NEG
61018: PUSH
61019: LD_INT 4
61021: NEG
61022: PUSH
61023: EMPTY
61024: LIST
61025: LIST
61026: PUSH
61027: LD_INT 4
61029: PUSH
61030: LD_INT 0
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: PUSH
61037: LD_INT 4
61039: PUSH
61040: LD_INT 1
61042: NEG
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: PUSH
61048: LD_INT 5
61050: PUSH
61051: LD_INT 0
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: LD_INT 5
61060: PUSH
61061: LD_INT 1
61063: PUSH
61064: EMPTY
61065: LIST
61066: LIST
61067: PUSH
61068: LD_INT 4
61070: PUSH
61071: LD_INT 1
61073: PUSH
61074: EMPTY
61075: LIST
61076: LIST
61077: PUSH
61078: LD_INT 3
61080: PUSH
61081: LD_INT 0
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: LD_INT 3
61090: PUSH
61091: LD_INT 1
61093: NEG
61094: PUSH
61095: EMPTY
61096: LIST
61097: LIST
61098: PUSH
61099: LD_INT 3
61101: PUSH
61102: LD_INT 2
61104: NEG
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: PUSH
61110: LD_INT 5
61112: PUSH
61113: LD_INT 2
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: PUSH
61120: EMPTY
61121: LIST
61122: LIST
61123: LIST
61124: LIST
61125: LIST
61126: LIST
61127: LIST
61128: LIST
61129: LIST
61130: LIST
61131: LIST
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: LIST
61140: LIST
61141: LIST
61142: LIST
61143: LIST
61144: LIST
61145: LIST
61146: LIST
61147: LIST
61148: LIST
61149: LIST
61150: LIST
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: LIST
61156: LIST
61157: LIST
61158: LIST
61159: LIST
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
61167: LD_ADDR_VAR 0 32
61171: PUSH
61172: LD_INT 4
61174: NEG
61175: PUSH
61176: LD_INT 0
61178: PUSH
61179: EMPTY
61180: LIST
61181: LIST
61182: PUSH
61183: LD_INT 4
61185: NEG
61186: PUSH
61187: LD_INT 1
61189: NEG
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: PUSH
61195: LD_INT 3
61197: NEG
61198: PUSH
61199: LD_INT 0
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: PUSH
61206: LD_INT 3
61208: NEG
61209: PUSH
61210: LD_INT 1
61212: PUSH
61213: EMPTY
61214: LIST
61215: LIST
61216: PUSH
61217: LD_INT 4
61219: NEG
61220: PUSH
61221: LD_INT 1
61223: PUSH
61224: EMPTY
61225: LIST
61226: LIST
61227: PUSH
61228: LD_INT 5
61230: NEG
61231: PUSH
61232: LD_INT 0
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: PUSH
61239: LD_INT 5
61241: NEG
61242: PUSH
61243: LD_INT 1
61245: NEG
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: PUSH
61251: LD_INT 5
61253: NEG
61254: PUSH
61255: LD_INT 2
61257: NEG
61258: PUSH
61259: EMPTY
61260: LIST
61261: LIST
61262: PUSH
61263: LD_INT 3
61265: NEG
61266: PUSH
61267: LD_INT 2
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 3
61276: NEG
61277: PUSH
61278: LD_INT 3
61280: NEG
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: PUSH
61286: LD_INT 3
61288: NEG
61289: PUSH
61290: LD_INT 4
61292: NEG
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: LD_INT 2
61300: NEG
61301: PUSH
61302: LD_INT 3
61304: NEG
61305: PUSH
61306: EMPTY
61307: LIST
61308: LIST
61309: PUSH
61310: LD_INT 2
61312: NEG
61313: PUSH
61314: LD_INT 2
61316: NEG
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: PUSH
61322: LD_INT 3
61324: NEG
61325: PUSH
61326: LD_INT 2
61328: NEG
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: LD_INT 4
61336: NEG
61337: PUSH
61338: LD_INT 3
61340: NEG
61341: PUSH
61342: EMPTY
61343: LIST
61344: LIST
61345: PUSH
61346: LD_INT 4
61348: NEG
61349: PUSH
61350: LD_INT 4
61352: NEG
61353: PUSH
61354: EMPTY
61355: LIST
61356: LIST
61357: PUSH
61358: LD_INT 2
61360: NEG
61361: PUSH
61362: LD_INT 4
61364: NEG
61365: PUSH
61366: EMPTY
61367: LIST
61368: LIST
61369: PUSH
61370: LD_INT 4
61372: NEG
61373: PUSH
61374: LD_INT 2
61376: NEG
61377: PUSH
61378: EMPTY
61379: LIST
61380: LIST
61381: PUSH
61382: LD_INT 0
61384: PUSH
61385: LD_INT 4
61387: NEG
61388: PUSH
61389: EMPTY
61390: LIST
61391: LIST
61392: PUSH
61393: LD_INT 0
61395: PUSH
61396: LD_INT 5
61398: NEG
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: PUSH
61404: LD_INT 1
61406: PUSH
61407: LD_INT 4
61409: NEG
61410: PUSH
61411: EMPTY
61412: LIST
61413: LIST
61414: PUSH
61415: LD_INT 1
61417: PUSH
61418: LD_INT 3
61420: NEG
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: LD_INT 0
61428: PUSH
61429: LD_INT 3
61431: NEG
61432: PUSH
61433: EMPTY
61434: LIST
61435: LIST
61436: PUSH
61437: LD_INT 1
61439: NEG
61440: PUSH
61441: LD_INT 4
61443: NEG
61444: PUSH
61445: EMPTY
61446: LIST
61447: LIST
61448: PUSH
61449: LD_INT 1
61451: NEG
61452: PUSH
61453: LD_INT 5
61455: NEG
61456: PUSH
61457: EMPTY
61458: LIST
61459: LIST
61460: PUSH
61461: LD_INT 2
61463: PUSH
61464: LD_INT 3
61466: NEG
61467: PUSH
61468: EMPTY
61469: LIST
61470: LIST
61471: PUSH
61472: LD_INT 2
61474: NEG
61475: PUSH
61476: LD_INT 5
61478: NEG
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: PUSH
61484: LD_INT 3
61486: PUSH
61487: LD_INT 0
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: LD_INT 3
61496: PUSH
61497: LD_INT 1
61499: NEG
61500: PUSH
61501: EMPTY
61502: LIST
61503: LIST
61504: PUSH
61505: LD_INT 4
61507: PUSH
61508: LD_INT 0
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: PUSH
61515: LD_INT 4
61517: PUSH
61518: LD_INT 1
61520: PUSH
61521: EMPTY
61522: LIST
61523: LIST
61524: PUSH
61525: LD_INT 3
61527: PUSH
61528: LD_INT 1
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: PUSH
61535: LD_INT 2
61537: PUSH
61538: LD_INT 0
61540: PUSH
61541: EMPTY
61542: LIST
61543: LIST
61544: PUSH
61545: LD_INT 2
61547: PUSH
61548: LD_INT 1
61550: NEG
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: PUSH
61556: LD_INT 2
61558: PUSH
61559: LD_INT 2
61561: NEG
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: LD_INT 4
61569: PUSH
61570: LD_INT 2
61572: PUSH
61573: EMPTY
61574: LIST
61575: LIST
61576: PUSH
61577: LD_INT 4
61579: PUSH
61580: LD_INT 4
61582: PUSH
61583: EMPTY
61584: LIST
61585: LIST
61586: PUSH
61587: LD_INT 4
61589: PUSH
61590: LD_INT 3
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: PUSH
61597: LD_INT 5
61599: PUSH
61600: LD_INT 4
61602: PUSH
61603: EMPTY
61604: LIST
61605: LIST
61606: PUSH
61607: LD_INT 5
61609: PUSH
61610: LD_INT 5
61612: PUSH
61613: EMPTY
61614: LIST
61615: LIST
61616: PUSH
61617: LD_INT 4
61619: PUSH
61620: LD_INT 5
61622: PUSH
61623: EMPTY
61624: LIST
61625: LIST
61626: PUSH
61627: LD_INT 3
61629: PUSH
61630: LD_INT 4
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: PUSH
61637: LD_INT 3
61639: PUSH
61640: LD_INT 3
61642: PUSH
61643: EMPTY
61644: LIST
61645: LIST
61646: PUSH
61647: LD_INT 5
61649: PUSH
61650: LD_INT 3
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: PUSH
61657: LD_INT 3
61659: PUSH
61660: LD_INT 5
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: PUSH
61667: EMPTY
61668: LIST
61669: LIST
61670: LIST
61671: LIST
61672: LIST
61673: LIST
61674: LIST
61675: LIST
61676: LIST
61677: LIST
61678: LIST
61679: LIST
61680: LIST
61681: LIST
61682: LIST
61683: LIST
61684: LIST
61685: LIST
61686: LIST
61687: LIST
61688: LIST
61689: LIST
61690: LIST
61691: LIST
61692: LIST
61693: LIST
61694: LIST
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: LIST
61702: LIST
61703: LIST
61704: LIST
61705: LIST
61706: LIST
61707: LIST
61708: LIST
61709: LIST
61710: LIST
61711: LIST
61712: LIST
61713: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61714: LD_ADDR_VAR 0 33
61718: PUSH
61719: LD_INT 4
61721: NEG
61722: PUSH
61723: LD_INT 4
61725: NEG
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PUSH
61731: LD_INT 4
61733: NEG
61734: PUSH
61735: LD_INT 5
61737: NEG
61738: PUSH
61739: EMPTY
61740: LIST
61741: LIST
61742: PUSH
61743: LD_INT 3
61745: NEG
61746: PUSH
61747: LD_INT 4
61749: NEG
61750: PUSH
61751: EMPTY
61752: LIST
61753: LIST
61754: PUSH
61755: LD_INT 3
61757: NEG
61758: PUSH
61759: LD_INT 3
61761: NEG
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: LD_INT 4
61769: NEG
61770: PUSH
61771: LD_INT 3
61773: NEG
61774: PUSH
61775: EMPTY
61776: LIST
61777: LIST
61778: PUSH
61779: LD_INT 5
61781: NEG
61782: PUSH
61783: LD_INT 4
61785: NEG
61786: PUSH
61787: EMPTY
61788: LIST
61789: LIST
61790: PUSH
61791: LD_INT 5
61793: NEG
61794: PUSH
61795: LD_INT 5
61797: NEG
61798: PUSH
61799: EMPTY
61800: LIST
61801: LIST
61802: PUSH
61803: LD_INT 3
61805: NEG
61806: PUSH
61807: LD_INT 5
61809: NEG
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: PUSH
61815: LD_INT 5
61817: NEG
61818: PUSH
61819: LD_INT 3
61821: NEG
61822: PUSH
61823: EMPTY
61824: LIST
61825: LIST
61826: PUSH
61827: LD_INT 0
61829: PUSH
61830: LD_INT 3
61832: NEG
61833: PUSH
61834: EMPTY
61835: LIST
61836: LIST
61837: PUSH
61838: LD_INT 0
61840: PUSH
61841: LD_INT 4
61843: NEG
61844: PUSH
61845: EMPTY
61846: LIST
61847: LIST
61848: PUSH
61849: LD_INT 1
61851: PUSH
61852: LD_INT 3
61854: NEG
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: PUSH
61860: LD_INT 1
61862: PUSH
61863: LD_INT 2
61865: NEG
61866: PUSH
61867: EMPTY
61868: LIST
61869: LIST
61870: PUSH
61871: LD_INT 0
61873: PUSH
61874: LD_INT 2
61876: NEG
61877: PUSH
61878: EMPTY
61879: LIST
61880: LIST
61881: PUSH
61882: LD_INT 1
61884: NEG
61885: PUSH
61886: LD_INT 3
61888: NEG
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: PUSH
61894: LD_INT 1
61896: NEG
61897: PUSH
61898: LD_INT 4
61900: NEG
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: PUSH
61906: LD_INT 2
61908: PUSH
61909: LD_INT 2
61911: NEG
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: PUSH
61917: LD_INT 2
61919: NEG
61920: PUSH
61921: LD_INT 4
61923: NEG
61924: PUSH
61925: EMPTY
61926: LIST
61927: LIST
61928: PUSH
61929: LD_INT 4
61931: PUSH
61932: LD_INT 0
61934: PUSH
61935: EMPTY
61936: LIST
61937: LIST
61938: PUSH
61939: LD_INT 4
61941: PUSH
61942: LD_INT 1
61944: NEG
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: PUSH
61950: LD_INT 5
61952: PUSH
61953: LD_INT 0
61955: PUSH
61956: EMPTY
61957: LIST
61958: LIST
61959: PUSH
61960: LD_INT 5
61962: PUSH
61963: LD_INT 1
61965: PUSH
61966: EMPTY
61967: LIST
61968: LIST
61969: PUSH
61970: LD_INT 4
61972: PUSH
61973: LD_INT 1
61975: PUSH
61976: EMPTY
61977: LIST
61978: LIST
61979: PUSH
61980: LD_INT 3
61982: PUSH
61983: LD_INT 0
61985: PUSH
61986: EMPTY
61987: LIST
61988: LIST
61989: PUSH
61990: LD_INT 3
61992: PUSH
61993: LD_INT 1
61995: NEG
61996: PUSH
61997: EMPTY
61998: LIST
61999: LIST
62000: PUSH
62001: LD_INT 3
62003: PUSH
62004: LD_INT 2
62006: NEG
62007: PUSH
62008: EMPTY
62009: LIST
62010: LIST
62011: PUSH
62012: LD_INT 5
62014: PUSH
62015: LD_INT 2
62017: PUSH
62018: EMPTY
62019: LIST
62020: LIST
62021: PUSH
62022: LD_INT 3
62024: PUSH
62025: LD_INT 3
62027: PUSH
62028: EMPTY
62029: LIST
62030: LIST
62031: PUSH
62032: LD_INT 3
62034: PUSH
62035: LD_INT 2
62037: PUSH
62038: EMPTY
62039: LIST
62040: LIST
62041: PUSH
62042: LD_INT 4
62044: PUSH
62045: LD_INT 3
62047: PUSH
62048: EMPTY
62049: LIST
62050: LIST
62051: PUSH
62052: LD_INT 4
62054: PUSH
62055: LD_INT 4
62057: PUSH
62058: EMPTY
62059: LIST
62060: LIST
62061: PUSH
62062: LD_INT 3
62064: PUSH
62065: LD_INT 4
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: PUSH
62072: LD_INT 2
62074: PUSH
62075: LD_INT 3
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: PUSH
62082: LD_INT 2
62084: PUSH
62085: LD_INT 2
62087: PUSH
62088: EMPTY
62089: LIST
62090: LIST
62091: PUSH
62092: LD_INT 4
62094: PUSH
62095: LD_INT 2
62097: PUSH
62098: EMPTY
62099: LIST
62100: LIST
62101: PUSH
62102: LD_INT 2
62104: PUSH
62105: LD_INT 4
62107: PUSH
62108: EMPTY
62109: LIST
62110: LIST
62111: PUSH
62112: LD_INT 0
62114: PUSH
62115: LD_INT 4
62117: PUSH
62118: EMPTY
62119: LIST
62120: LIST
62121: PUSH
62122: LD_INT 0
62124: PUSH
62125: LD_INT 3
62127: PUSH
62128: EMPTY
62129: LIST
62130: LIST
62131: PUSH
62132: LD_INT 1
62134: PUSH
62135: LD_INT 4
62137: PUSH
62138: EMPTY
62139: LIST
62140: LIST
62141: PUSH
62142: LD_INT 1
62144: PUSH
62145: LD_INT 5
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: PUSH
62152: LD_INT 0
62154: PUSH
62155: LD_INT 5
62157: PUSH
62158: EMPTY
62159: LIST
62160: LIST
62161: PUSH
62162: LD_INT 1
62164: NEG
62165: PUSH
62166: LD_INT 4
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: PUSH
62173: LD_INT 1
62175: NEG
62176: PUSH
62177: LD_INT 3
62179: PUSH
62180: EMPTY
62181: LIST
62182: LIST
62183: PUSH
62184: LD_INT 2
62186: PUSH
62187: LD_INT 5
62189: PUSH
62190: EMPTY
62191: LIST
62192: LIST
62193: PUSH
62194: LD_INT 2
62196: NEG
62197: PUSH
62198: LD_INT 3
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PUSH
62205: EMPTY
62206: LIST
62207: LIST
62208: LIST
62209: LIST
62210: LIST
62211: LIST
62212: LIST
62213: LIST
62214: LIST
62215: LIST
62216: LIST
62217: LIST
62218: LIST
62219: LIST
62220: LIST
62221: LIST
62222: LIST
62223: LIST
62224: LIST
62225: LIST
62226: LIST
62227: LIST
62228: LIST
62229: LIST
62230: LIST
62231: LIST
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: LIST
62241: LIST
62242: LIST
62243: LIST
62244: LIST
62245: LIST
62246: LIST
62247: LIST
62248: LIST
62249: LIST
62250: LIST
62251: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62252: LD_ADDR_VAR 0 34
62256: PUSH
62257: LD_INT 0
62259: PUSH
62260: LD_INT 4
62262: NEG
62263: PUSH
62264: EMPTY
62265: LIST
62266: LIST
62267: PUSH
62268: LD_INT 0
62270: PUSH
62271: LD_INT 5
62273: NEG
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: PUSH
62279: LD_INT 1
62281: PUSH
62282: LD_INT 4
62284: NEG
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: PUSH
62290: LD_INT 1
62292: PUSH
62293: LD_INT 3
62295: NEG
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: PUSH
62301: LD_INT 0
62303: PUSH
62304: LD_INT 3
62306: NEG
62307: PUSH
62308: EMPTY
62309: LIST
62310: LIST
62311: PUSH
62312: LD_INT 1
62314: NEG
62315: PUSH
62316: LD_INT 4
62318: NEG
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: PUSH
62324: LD_INT 1
62326: NEG
62327: PUSH
62328: LD_INT 5
62330: NEG
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: PUSH
62336: LD_INT 2
62338: PUSH
62339: LD_INT 3
62341: NEG
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PUSH
62347: LD_INT 2
62349: NEG
62350: PUSH
62351: LD_INT 5
62353: NEG
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: PUSH
62359: LD_INT 3
62361: PUSH
62362: LD_INT 0
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: PUSH
62369: LD_INT 3
62371: PUSH
62372: LD_INT 1
62374: NEG
62375: PUSH
62376: EMPTY
62377: LIST
62378: LIST
62379: PUSH
62380: LD_INT 4
62382: PUSH
62383: LD_INT 0
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: PUSH
62390: LD_INT 4
62392: PUSH
62393: LD_INT 1
62395: PUSH
62396: EMPTY
62397: LIST
62398: LIST
62399: PUSH
62400: LD_INT 3
62402: PUSH
62403: LD_INT 1
62405: PUSH
62406: EMPTY
62407: LIST
62408: LIST
62409: PUSH
62410: LD_INT 2
62412: PUSH
62413: LD_INT 0
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: LD_INT 2
62422: PUSH
62423: LD_INT 1
62425: NEG
62426: PUSH
62427: EMPTY
62428: LIST
62429: LIST
62430: PUSH
62431: LD_INT 2
62433: PUSH
62434: LD_INT 2
62436: NEG
62437: PUSH
62438: EMPTY
62439: LIST
62440: LIST
62441: PUSH
62442: LD_INT 4
62444: PUSH
62445: LD_INT 2
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: PUSH
62452: LD_INT 4
62454: PUSH
62455: LD_INT 4
62457: PUSH
62458: EMPTY
62459: LIST
62460: LIST
62461: PUSH
62462: LD_INT 4
62464: PUSH
62465: LD_INT 3
62467: PUSH
62468: EMPTY
62469: LIST
62470: LIST
62471: PUSH
62472: LD_INT 5
62474: PUSH
62475: LD_INT 4
62477: PUSH
62478: EMPTY
62479: LIST
62480: LIST
62481: PUSH
62482: LD_INT 5
62484: PUSH
62485: LD_INT 5
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: PUSH
62492: LD_INT 4
62494: PUSH
62495: LD_INT 5
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: PUSH
62502: LD_INT 3
62504: PUSH
62505: LD_INT 4
62507: PUSH
62508: EMPTY
62509: LIST
62510: LIST
62511: PUSH
62512: LD_INT 3
62514: PUSH
62515: LD_INT 3
62517: PUSH
62518: EMPTY
62519: LIST
62520: LIST
62521: PUSH
62522: LD_INT 5
62524: PUSH
62525: LD_INT 3
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: LD_INT 3
62534: PUSH
62535: LD_INT 5
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: PUSH
62542: LD_INT 0
62544: PUSH
62545: LD_INT 3
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: PUSH
62552: LD_INT 0
62554: PUSH
62555: LD_INT 2
62557: PUSH
62558: EMPTY
62559: LIST
62560: LIST
62561: PUSH
62562: LD_INT 1
62564: PUSH
62565: LD_INT 3
62567: PUSH
62568: EMPTY
62569: LIST
62570: LIST
62571: PUSH
62572: LD_INT 1
62574: PUSH
62575: LD_INT 4
62577: PUSH
62578: EMPTY
62579: LIST
62580: LIST
62581: PUSH
62582: LD_INT 0
62584: PUSH
62585: LD_INT 4
62587: PUSH
62588: EMPTY
62589: LIST
62590: LIST
62591: PUSH
62592: LD_INT 1
62594: NEG
62595: PUSH
62596: LD_INT 3
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PUSH
62603: LD_INT 1
62605: NEG
62606: PUSH
62607: LD_INT 2
62609: PUSH
62610: EMPTY
62611: LIST
62612: LIST
62613: PUSH
62614: LD_INT 2
62616: PUSH
62617: LD_INT 4
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: PUSH
62624: LD_INT 2
62626: NEG
62627: PUSH
62628: LD_INT 2
62630: PUSH
62631: EMPTY
62632: LIST
62633: LIST
62634: PUSH
62635: LD_INT 4
62637: NEG
62638: PUSH
62639: LD_INT 0
62641: PUSH
62642: EMPTY
62643: LIST
62644: LIST
62645: PUSH
62646: LD_INT 4
62648: NEG
62649: PUSH
62650: LD_INT 1
62652: NEG
62653: PUSH
62654: EMPTY
62655: LIST
62656: LIST
62657: PUSH
62658: LD_INT 3
62660: NEG
62661: PUSH
62662: LD_INT 0
62664: PUSH
62665: EMPTY
62666: LIST
62667: LIST
62668: PUSH
62669: LD_INT 3
62671: NEG
62672: PUSH
62673: LD_INT 1
62675: PUSH
62676: EMPTY
62677: LIST
62678: LIST
62679: PUSH
62680: LD_INT 4
62682: NEG
62683: PUSH
62684: LD_INT 1
62686: PUSH
62687: EMPTY
62688: LIST
62689: LIST
62690: PUSH
62691: LD_INT 5
62693: NEG
62694: PUSH
62695: LD_INT 0
62697: PUSH
62698: EMPTY
62699: LIST
62700: LIST
62701: PUSH
62702: LD_INT 5
62704: NEG
62705: PUSH
62706: LD_INT 1
62708: NEG
62709: PUSH
62710: EMPTY
62711: LIST
62712: LIST
62713: PUSH
62714: LD_INT 5
62716: NEG
62717: PUSH
62718: LD_INT 2
62720: NEG
62721: PUSH
62722: EMPTY
62723: LIST
62724: LIST
62725: PUSH
62726: LD_INT 3
62728: NEG
62729: PUSH
62730: LD_INT 2
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: PUSH
62737: EMPTY
62738: LIST
62739: LIST
62740: LIST
62741: LIST
62742: LIST
62743: LIST
62744: LIST
62745: LIST
62746: LIST
62747: LIST
62748: LIST
62749: LIST
62750: LIST
62751: LIST
62752: LIST
62753: LIST
62754: LIST
62755: LIST
62756: LIST
62757: LIST
62758: LIST
62759: LIST
62760: LIST
62761: LIST
62762: LIST
62763: LIST
62764: LIST
62765: LIST
62766: LIST
62767: LIST
62768: LIST
62769: LIST
62770: LIST
62771: LIST
62772: LIST
62773: LIST
62774: LIST
62775: LIST
62776: LIST
62777: LIST
62778: LIST
62779: LIST
62780: LIST
62781: LIST
62782: LIST
62783: ST_TO_ADDR
// end ; end ;
62784: GO 62787
62786: POP
// case btype of b_depot , b_warehouse :
62787: LD_VAR 0 1
62791: PUSH
62792: LD_INT 0
62794: DOUBLE
62795: EQUAL
62796: IFTRUE 62806
62798: LD_INT 1
62800: DOUBLE
62801: EQUAL
62802: IFTRUE 62806
62804: GO 63007
62806: POP
// case nation of nation_american :
62807: LD_VAR 0 5
62811: PUSH
62812: LD_INT 1
62814: DOUBLE
62815: EQUAL
62816: IFTRUE 62820
62818: GO 62876
62820: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62821: LD_ADDR_VAR 0 9
62825: PUSH
62826: LD_VAR 0 11
62830: PUSH
62831: LD_VAR 0 12
62835: PUSH
62836: LD_VAR 0 13
62840: PUSH
62841: LD_VAR 0 14
62845: PUSH
62846: LD_VAR 0 15
62850: PUSH
62851: LD_VAR 0 16
62855: PUSH
62856: EMPTY
62857: LIST
62858: LIST
62859: LIST
62860: LIST
62861: LIST
62862: LIST
62863: PUSH
62864: LD_VAR 0 4
62868: PUSH
62869: LD_INT 1
62871: PLUS
62872: ARRAY
62873: ST_TO_ADDR
62874: GO 63005
62876: LD_INT 2
62878: DOUBLE
62879: EQUAL
62880: IFTRUE 62884
62882: GO 62940
62884: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62885: LD_ADDR_VAR 0 9
62889: PUSH
62890: LD_VAR 0 17
62894: PUSH
62895: LD_VAR 0 18
62899: PUSH
62900: LD_VAR 0 19
62904: PUSH
62905: LD_VAR 0 20
62909: PUSH
62910: LD_VAR 0 21
62914: PUSH
62915: LD_VAR 0 22
62919: PUSH
62920: EMPTY
62921: LIST
62922: LIST
62923: LIST
62924: LIST
62925: LIST
62926: LIST
62927: PUSH
62928: LD_VAR 0 4
62932: PUSH
62933: LD_INT 1
62935: PLUS
62936: ARRAY
62937: ST_TO_ADDR
62938: GO 63005
62940: LD_INT 3
62942: DOUBLE
62943: EQUAL
62944: IFTRUE 62948
62946: GO 63004
62948: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62949: LD_ADDR_VAR 0 9
62953: PUSH
62954: LD_VAR 0 23
62958: PUSH
62959: LD_VAR 0 24
62963: PUSH
62964: LD_VAR 0 25
62968: PUSH
62969: LD_VAR 0 26
62973: PUSH
62974: LD_VAR 0 27
62978: PUSH
62979: LD_VAR 0 28
62983: PUSH
62984: EMPTY
62985: LIST
62986: LIST
62987: LIST
62988: LIST
62989: LIST
62990: LIST
62991: PUSH
62992: LD_VAR 0 4
62996: PUSH
62997: LD_INT 1
62999: PLUS
63000: ARRAY
63001: ST_TO_ADDR
63002: GO 63005
63004: POP
63005: GO 63560
63007: LD_INT 2
63009: DOUBLE
63010: EQUAL
63011: IFTRUE 63021
63013: LD_INT 3
63015: DOUBLE
63016: EQUAL
63017: IFTRUE 63021
63019: GO 63077
63021: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
63022: LD_ADDR_VAR 0 9
63026: PUSH
63027: LD_VAR 0 29
63031: PUSH
63032: LD_VAR 0 30
63036: PUSH
63037: LD_VAR 0 31
63041: PUSH
63042: LD_VAR 0 32
63046: PUSH
63047: LD_VAR 0 33
63051: PUSH
63052: LD_VAR 0 34
63056: PUSH
63057: EMPTY
63058: LIST
63059: LIST
63060: LIST
63061: LIST
63062: LIST
63063: LIST
63064: PUSH
63065: LD_VAR 0 4
63069: PUSH
63070: LD_INT 1
63072: PLUS
63073: ARRAY
63074: ST_TO_ADDR
63075: GO 63560
63077: LD_INT 16
63079: DOUBLE
63080: EQUAL
63081: IFTRUE 63139
63083: LD_INT 17
63085: DOUBLE
63086: EQUAL
63087: IFTRUE 63139
63089: LD_INT 18
63091: DOUBLE
63092: EQUAL
63093: IFTRUE 63139
63095: LD_INT 19
63097: DOUBLE
63098: EQUAL
63099: IFTRUE 63139
63101: LD_INT 22
63103: DOUBLE
63104: EQUAL
63105: IFTRUE 63139
63107: LD_INT 20
63109: DOUBLE
63110: EQUAL
63111: IFTRUE 63139
63113: LD_INT 21
63115: DOUBLE
63116: EQUAL
63117: IFTRUE 63139
63119: LD_INT 23
63121: DOUBLE
63122: EQUAL
63123: IFTRUE 63139
63125: LD_INT 24
63127: DOUBLE
63128: EQUAL
63129: IFTRUE 63139
63131: LD_INT 25
63133: DOUBLE
63134: EQUAL
63135: IFTRUE 63139
63137: GO 63195
63139: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
63140: LD_ADDR_VAR 0 9
63144: PUSH
63145: LD_VAR 0 35
63149: PUSH
63150: LD_VAR 0 36
63154: PUSH
63155: LD_VAR 0 37
63159: PUSH
63160: LD_VAR 0 38
63164: PUSH
63165: LD_VAR 0 39
63169: PUSH
63170: LD_VAR 0 40
63174: PUSH
63175: EMPTY
63176: LIST
63177: LIST
63178: LIST
63179: LIST
63180: LIST
63181: LIST
63182: PUSH
63183: LD_VAR 0 4
63187: PUSH
63188: LD_INT 1
63190: PLUS
63191: ARRAY
63192: ST_TO_ADDR
63193: GO 63560
63195: LD_INT 6
63197: DOUBLE
63198: EQUAL
63199: IFTRUE 63251
63201: LD_INT 7
63203: DOUBLE
63204: EQUAL
63205: IFTRUE 63251
63207: LD_INT 8
63209: DOUBLE
63210: EQUAL
63211: IFTRUE 63251
63213: LD_INT 13
63215: DOUBLE
63216: EQUAL
63217: IFTRUE 63251
63219: LD_INT 12
63221: DOUBLE
63222: EQUAL
63223: IFTRUE 63251
63225: LD_INT 15
63227: DOUBLE
63228: EQUAL
63229: IFTRUE 63251
63231: LD_INT 11
63233: DOUBLE
63234: EQUAL
63235: IFTRUE 63251
63237: LD_INT 14
63239: DOUBLE
63240: EQUAL
63241: IFTRUE 63251
63243: LD_INT 10
63245: DOUBLE
63246: EQUAL
63247: IFTRUE 63251
63249: GO 63307
63251: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63252: LD_ADDR_VAR 0 9
63256: PUSH
63257: LD_VAR 0 41
63261: PUSH
63262: LD_VAR 0 42
63266: PUSH
63267: LD_VAR 0 43
63271: PUSH
63272: LD_VAR 0 44
63276: PUSH
63277: LD_VAR 0 45
63281: PUSH
63282: LD_VAR 0 46
63286: PUSH
63287: EMPTY
63288: LIST
63289: LIST
63290: LIST
63291: LIST
63292: LIST
63293: LIST
63294: PUSH
63295: LD_VAR 0 4
63299: PUSH
63300: LD_INT 1
63302: PLUS
63303: ARRAY
63304: ST_TO_ADDR
63305: GO 63560
63307: LD_INT 36
63309: DOUBLE
63310: EQUAL
63311: IFTRUE 63315
63313: GO 63371
63315: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63316: LD_ADDR_VAR 0 9
63320: PUSH
63321: LD_VAR 0 47
63325: PUSH
63326: LD_VAR 0 48
63330: PUSH
63331: LD_VAR 0 49
63335: PUSH
63336: LD_VAR 0 50
63340: PUSH
63341: LD_VAR 0 51
63345: PUSH
63346: LD_VAR 0 52
63350: PUSH
63351: EMPTY
63352: LIST
63353: LIST
63354: LIST
63355: LIST
63356: LIST
63357: LIST
63358: PUSH
63359: LD_VAR 0 4
63363: PUSH
63364: LD_INT 1
63366: PLUS
63367: ARRAY
63368: ST_TO_ADDR
63369: GO 63560
63371: LD_INT 4
63373: DOUBLE
63374: EQUAL
63375: IFTRUE 63397
63377: LD_INT 5
63379: DOUBLE
63380: EQUAL
63381: IFTRUE 63397
63383: LD_INT 34
63385: DOUBLE
63386: EQUAL
63387: IFTRUE 63397
63389: LD_INT 37
63391: DOUBLE
63392: EQUAL
63393: IFTRUE 63397
63395: GO 63453
63397: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63398: LD_ADDR_VAR 0 9
63402: PUSH
63403: LD_VAR 0 53
63407: PUSH
63408: LD_VAR 0 54
63412: PUSH
63413: LD_VAR 0 55
63417: PUSH
63418: LD_VAR 0 56
63422: PUSH
63423: LD_VAR 0 57
63427: PUSH
63428: LD_VAR 0 58
63432: PUSH
63433: EMPTY
63434: LIST
63435: LIST
63436: LIST
63437: LIST
63438: LIST
63439: LIST
63440: PUSH
63441: LD_VAR 0 4
63445: PUSH
63446: LD_INT 1
63448: PLUS
63449: ARRAY
63450: ST_TO_ADDR
63451: GO 63560
63453: LD_INT 31
63455: DOUBLE
63456: EQUAL
63457: IFTRUE 63503
63459: LD_INT 32
63461: DOUBLE
63462: EQUAL
63463: IFTRUE 63503
63465: LD_INT 33
63467: DOUBLE
63468: EQUAL
63469: IFTRUE 63503
63471: LD_INT 27
63473: DOUBLE
63474: EQUAL
63475: IFTRUE 63503
63477: LD_INT 26
63479: DOUBLE
63480: EQUAL
63481: IFTRUE 63503
63483: LD_INT 28
63485: DOUBLE
63486: EQUAL
63487: IFTRUE 63503
63489: LD_INT 29
63491: DOUBLE
63492: EQUAL
63493: IFTRUE 63503
63495: LD_INT 30
63497: DOUBLE
63498: EQUAL
63499: IFTRUE 63503
63501: GO 63559
63503: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63504: LD_ADDR_VAR 0 9
63508: PUSH
63509: LD_VAR 0 59
63513: PUSH
63514: LD_VAR 0 60
63518: PUSH
63519: LD_VAR 0 61
63523: PUSH
63524: LD_VAR 0 62
63528: PUSH
63529: LD_VAR 0 63
63533: PUSH
63534: LD_VAR 0 64
63538: PUSH
63539: EMPTY
63540: LIST
63541: LIST
63542: LIST
63543: LIST
63544: LIST
63545: LIST
63546: PUSH
63547: LD_VAR 0 4
63551: PUSH
63552: LD_INT 1
63554: PLUS
63555: ARRAY
63556: ST_TO_ADDR
63557: GO 63560
63559: POP
// temp_list2 = [ ] ;
63560: LD_ADDR_VAR 0 10
63564: PUSH
63565: EMPTY
63566: ST_TO_ADDR
// for i in temp_list do
63567: LD_ADDR_VAR 0 8
63571: PUSH
63572: LD_VAR 0 9
63576: PUSH
63577: FOR_IN
63578: IFFALSE 63630
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63580: LD_ADDR_VAR 0 10
63584: PUSH
63585: LD_VAR 0 10
63589: PUSH
63590: LD_VAR 0 8
63594: PUSH
63595: LD_INT 1
63597: ARRAY
63598: PUSH
63599: LD_VAR 0 2
63603: PLUS
63604: PUSH
63605: LD_VAR 0 8
63609: PUSH
63610: LD_INT 2
63612: ARRAY
63613: PUSH
63614: LD_VAR 0 3
63618: PLUS
63619: PUSH
63620: EMPTY
63621: LIST
63622: LIST
63623: PUSH
63624: EMPTY
63625: LIST
63626: ADD
63627: ST_TO_ADDR
63628: GO 63577
63630: POP
63631: POP
// result = temp_list2 ;
63632: LD_ADDR_VAR 0 7
63636: PUSH
63637: LD_VAR 0 10
63641: ST_TO_ADDR
// end ;
63642: LD_VAR 0 7
63646: RET
// export function EnemyInRange ( unit , dist ) ; begin
63647: LD_INT 0
63649: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63650: LD_ADDR_VAR 0 3
63654: PUSH
63655: LD_VAR 0 1
63659: PPUSH
63660: CALL_OW 255
63664: PPUSH
63665: LD_VAR 0 1
63669: PPUSH
63670: CALL_OW 250
63674: PPUSH
63675: LD_VAR 0 1
63679: PPUSH
63680: CALL_OW 251
63684: PPUSH
63685: LD_VAR 0 2
63689: PPUSH
63690: CALL 37043 0 4
63694: PUSH
63695: LD_INT 4
63697: ARRAY
63698: ST_TO_ADDR
// end ;
63699: LD_VAR 0 3
63703: RET
// export function PlayerSeeMe ( unit ) ; begin
63704: LD_INT 0
63706: PPUSH
// result := See ( your_side , unit ) ;
63707: LD_ADDR_VAR 0 2
63711: PUSH
63712: LD_OWVAR 2
63716: PPUSH
63717: LD_VAR 0 1
63721: PPUSH
63722: CALL_OW 292
63726: ST_TO_ADDR
// end ;
63727: LD_VAR 0 2
63731: RET
// export function ReverseDir ( unit ) ; begin
63732: LD_INT 0
63734: PPUSH
// if not unit then
63735: LD_VAR 0 1
63739: NOT
63740: IFFALSE 63744
// exit ;
63742: GO 63767
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63744: LD_ADDR_VAR 0 2
63748: PUSH
63749: LD_VAR 0 1
63753: PPUSH
63754: CALL_OW 254
63758: PUSH
63759: LD_INT 3
63761: PLUS
63762: PUSH
63763: LD_INT 6
63765: MOD
63766: ST_TO_ADDR
// end ;
63767: LD_VAR 0 2
63771: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
63772: LD_INT 0
63774: PPUSH
63775: PPUSH
63776: PPUSH
63777: PPUSH
63778: PPUSH
// if not hexes then
63779: LD_VAR 0 2
63783: NOT
63784: IFFALSE 63788
// exit ;
63786: GO 63936
// dist := 9999 ;
63788: LD_ADDR_VAR 0 5
63792: PUSH
63793: LD_INT 9999
63795: ST_TO_ADDR
// for i = 1 to hexes do
63796: LD_ADDR_VAR 0 4
63800: PUSH
63801: DOUBLE
63802: LD_INT 1
63804: DEC
63805: ST_TO_ADDR
63806: LD_VAR 0 2
63810: PUSH
63811: FOR_TO
63812: IFFALSE 63924
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
63814: LD_VAR 0 1
63818: PPUSH
63819: LD_VAR 0 2
63823: PUSH
63824: LD_VAR 0 4
63828: ARRAY
63829: PUSH
63830: LD_INT 1
63832: ARRAY
63833: PPUSH
63834: LD_VAR 0 2
63838: PUSH
63839: LD_VAR 0 4
63843: ARRAY
63844: PUSH
63845: LD_INT 2
63847: ARRAY
63848: PPUSH
63849: CALL_OW 297
63853: PUSH
63854: LD_VAR 0 5
63858: LESS
63859: IFFALSE 63922
// begin hex := hexes [ i ] ;
63861: LD_ADDR_VAR 0 7
63865: PUSH
63866: LD_VAR 0 2
63870: PUSH
63871: LD_VAR 0 4
63875: ARRAY
63876: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63877: LD_ADDR_VAR 0 5
63881: PUSH
63882: LD_VAR 0 1
63886: PPUSH
63887: LD_VAR 0 2
63891: PUSH
63892: LD_VAR 0 4
63896: ARRAY
63897: PUSH
63898: LD_INT 1
63900: ARRAY
63901: PPUSH
63902: LD_VAR 0 2
63906: PUSH
63907: LD_VAR 0 4
63911: ARRAY
63912: PUSH
63913: LD_INT 2
63915: ARRAY
63916: PPUSH
63917: CALL_OW 297
63921: ST_TO_ADDR
// end ; end ;
63922: GO 63811
63924: POP
63925: POP
// result := hex ;
63926: LD_ADDR_VAR 0 3
63930: PUSH
63931: LD_VAR 0 7
63935: ST_TO_ADDR
// end ;
63936: LD_VAR 0 3
63940: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63941: LD_INT 0
63943: PPUSH
63944: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63945: LD_VAR 0 1
63949: NOT
63950: PUSH
63951: LD_VAR 0 1
63955: PUSH
63956: LD_INT 21
63958: PUSH
63959: LD_INT 2
63961: PUSH
63962: EMPTY
63963: LIST
63964: LIST
63965: PUSH
63966: LD_INT 23
63968: PUSH
63969: LD_INT 2
63971: PUSH
63972: EMPTY
63973: LIST
63974: LIST
63975: PUSH
63976: EMPTY
63977: LIST
63978: LIST
63979: PPUSH
63980: CALL_OW 69
63984: IN
63985: NOT
63986: OR
63987: IFFALSE 63991
// exit ;
63989: GO 64038
// for i = 1 to 3 do
63991: LD_ADDR_VAR 0 3
63995: PUSH
63996: DOUBLE
63997: LD_INT 1
63999: DEC
64000: ST_TO_ADDR
64001: LD_INT 3
64003: PUSH
64004: FOR_TO
64005: IFFALSE 64036
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
64007: LD_VAR 0 1
64011: PPUSH
64012: CALL_OW 250
64016: PPUSH
64017: LD_VAR 0 1
64021: PPUSH
64022: CALL_OW 251
64026: PPUSH
64027: LD_INT 1
64029: PPUSH
64030: CALL_OW 453
64034: GO 64004
64036: POP
64037: POP
// end ;
64038: LD_VAR 0 2
64042: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
64043: LD_INT 0
64045: PPUSH
64046: PPUSH
64047: PPUSH
64048: PPUSH
64049: PPUSH
64050: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
64051: LD_VAR 0 1
64055: NOT
64056: PUSH
64057: LD_VAR 0 2
64061: NOT
64062: OR
64063: PUSH
64064: LD_VAR 0 1
64068: PPUSH
64069: CALL_OW 314
64073: OR
64074: IFFALSE 64078
// exit ;
64076: GO 64519
// x := GetX ( enemy_unit ) ;
64078: LD_ADDR_VAR 0 7
64082: PUSH
64083: LD_VAR 0 2
64087: PPUSH
64088: CALL_OW 250
64092: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
64093: LD_ADDR_VAR 0 8
64097: PUSH
64098: LD_VAR 0 2
64102: PPUSH
64103: CALL_OW 251
64107: ST_TO_ADDR
// if not x or not y then
64108: LD_VAR 0 7
64112: NOT
64113: PUSH
64114: LD_VAR 0 8
64118: NOT
64119: OR
64120: IFFALSE 64124
// exit ;
64122: GO 64519
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
64124: LD_ADDR_VAR 0 6
64128: PUSH
64129: LD_VAR 0 7
64133: PPUSH
64134: LD_INT 0
64136: PPUSH
64137: LD_INT 4
64139: PPUSH
64140: CALL_OW 272
64144: PUSH
64145: LD_VAR 0 8
64149: PPUSH
64150: LD_INT 0
64152: PPUSH
64153: LD_INT 4
64155: PPUSH
64156: CALL_OW 273
64160: PUSH
64161: EMPTY
64162: LIST
64163: LIST
64164: PUSH
64165: LD_VAR 0 7
64169: PPUSH
64170: LD_INT 1
64172: PPUSH
64173: LD_INT 4
64175: PPUSH
64176: CALL_OW 272
64180: PUSH
64181: LD_VAR 0 8
64185: PPUSH
64186: LD_INT 1
64188: PPUSH
64189: LD_INT 4
64191: PPUSH
64192: CALL_OW 273
64196: PUSH
64197: EMPTY
64198: LIST
64199: LIST
64200: PUSH
64201: LD_VAR 0 7
64205: PPUSH
64206: LD_INT 2
64208: PPUSH
64209: LD_INT 4
64211: PPUSH
64212: CALL_OW 272
64216: PUSH
64217: LD_VAR 0 8
64221: PPUSH
64222: LD_INT 2
64224: PPUSH
64225: LD_INT 4
64227: PPUSH
64228: CALL_OW 273
64232: PUSH
64233: EMPTY
64234: LIST
64235: LIST
64236: PUSH
64237: LD_VAR 0 7
64241: PPUSH
64242: LD_INT 3
64244: PPUSH
64245: LD_INT 4
64247: PPUSH
64248: CALL_OW 272
64252: PUSH
64253: LD_VAR 0 8
64257: PPUSH
64258: LD_INT 3
64260: PPUSH
64261: LD_INT 4
64263: PPUSH
64264: CALL_OW 273
64268: PUSH
64269: EMPTY
64270: LIST
64271: LIST
64272: PUSH
64273: LD_VAR 0 7
64277: PPUSH
64278: LD_INT 4
64280: PPUSH
64281: LD_INT 4
64283: PPUSH
64284: CALL_OW 272
64288: PUSH
64289: LD_VAR 0 8
64293: PPUSH
64294: LD_INT 4
64296: PPUSH
64297: LD_INT 4
64299: PPUSH
64300: CALL_OW 273
64304: PUSH
64305: EMPTY
64306: LIST
64307: LIST
64308: PUSH
64309: LD_VAR 0 7
64313: PPUSH
64314: LD_INT 5
64316: PPUSH
64317: LD_INT 4
64319: PPUSH
64320: CALL_OW 272
64324: PUSH
64325: LD_VAR 0 8
64329: PPUSH
64330: LD_INT 5
64332: PPUSH
64333: LD_INT 4
64335: PPUSH
64336: CALL_OW 273
64340: PUSH
64341: EMPTY
64342: LIST
64343: LIST
64344: PUSH
64345: EMPTY
64346: LIST
64347: LIST
64348: LIST
64349: LIST
64350: LIST
64351: LIST
64352: ST_TO_ADDR
// for i = tmp downto 1 do
64353: LD_ADDR_VAR 0 4
64357: PUSH
64358: DOUBLE
64359: LD_VAR 0 6
64363: INC
64364: ST_TO_ADDR
64365: LD_INT 1
64367: PUSH
64368: FOR_DOWNTO
64369: IFFALSE 64470
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64371: LD_VAR 0 6
64375: PUSH
64376: LD_VAR 0 4
64380: ARRAY
64381: PUSH
64382: LD_INT 1
64384: ARRAY
64385: PPUSH
64386: LD_VAR 0 6
64390: PUSH
64391: LD_VAR 0 4
64395: ARRAY
64396: PUSH
64397: LD_INT 2
64399: ARRAY
64400: PPUSH
64401: CALL_OW 488
64405: NOT
64406: PUSH
64407: LD_VAR 0 6
64411: PUSH
64412: LD_VAR 0 4
64416: ARRAY
64417: PUSH
64418: LD_INT 1
64420: ARRAY
64421: PPUSH
64422: LD_VAR 0 6
64426: PUSH
64427: LD_VAR 0 4
64431: ARRAY
64432: PUSH
64433: LD_INT 2
64435: ARRAY
64436: PPUSH
64437: CALL_OW 428
64441: PUSH
64442: LD_INT 0
64444: NONEQUAL
64445: OR
64446: IFFALSE 64468
// tmp := Delete ( tmp , i ) ;
64448: LD_ADDR_VAR 0 6
64452: PUSH
64453: LD_VAR 0 6
64457: PPUSH
64458: LD_VAR 0 4
64462: PPUSH
64463: CALL_OW 3
64467: ST_TO_ADDR
64468: GO 64368
64470: POP
64471: POP
// j := GetClosestHex ( unit , tmp ) ;
64472: LD_ADDR_VAR 0 5
64476: PUSH
64477: LD_VAR 0 1
64481: PPUSH
64482: LD_VAR 0 6
64486: PPUSH
64487: CALL 63772 0 2
64491: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64492: LD_VAR 0 1
64496: PPUSH
64497: LD_VAR 0 5
64501: PUSH
64502: LD_INT 1
64504: ARRAY
64505: PPUSH
64506: LD_VAR 0 5
64510: PUSH
64511: LD_INT 2
64513: ARRAY
64514: PPUSH
64515: CALL_OW 111
// end ;
64519: LD_VAR 0 3
64523: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64524: LD_INT 0
64526: PPUSH
64527: PPUSH
64528: PPUSH
// uc_side = 0 ;
64529: LD_ADDR_OWVAR 20
64533: PUSH
64534: LD_INT 0
64536: ST_TO_ADDR
// uc_nation = 0 ;
64537: LD_ADDR_OWVAR 21
64541: PUSH
64542: LD_INT 0
64544: ST_TO_ADDR
// InitHc_All ( ) ;
64545: CALL_OW 584
// InitVc ;
64549: CALL_OW 20
// if mastodonts then
64553: LD_VAR 0 6
64557: IFFALSE 64624
// for i = 1 to mastodonts do
64559: LD_ADDR_VAR 0 11
64563: PUSH
64564: DOUBLE
64565: LD_INT 1
64567: DEC
64568: ST_TO_ADDR
64569: LD_VAR 0 6
64573: PUSH
64574: FOR_TO
64575: IFFALSE 64622
// begin vc_chassis := 31 ;
64577: LD_ADDR_OWVAR 37
64581: PUSH
64582: LD_INT 31
64584: ST_TO_ADDR
// vc_control := control_rider ;
64585: LD_ADDR_OWVAR 38
64589: PUSH
64590: LD_INT 4
64592: ST_TO_ADDR
// animal := CreateVehicle ;
64593: LD_ADDR_VAR 0 12
64597: PUSH
64598: CALL_OW 45
64602: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64603: LD_VAR 0 12
64607: PPUSH
64608: LD_VAR 0 8
64612: PPUSH
64613: LD_INT 0
64615: PPUSH
64616: CALL 66759 0 3
// end ;
64620: GO 64574
64622: POP
64623: POP
// if horses then
64624: LD_VAR 0 5
64628: IFFALSE 64695
// for i = 1 to horses do
64630: LD_ADDR_VAR 0 11
64634: PUSH
64635: DOUBLE
64636: LD_INT 1
64638: DEC
64639: ST_TO_ADDR
64640: LD_VAR 0 5
64644: PUSH
64645: FOR_TO
64646: IFFALSE 64693
// begin hc_class := 21 ;
64648: LD_ADDR_OWVAR 28
64652: PUSH
64653: LD_INT 21
64655: ST_TO_ADDR
// hc_gallery :=  ;
64656: LD_ADDR_OWVAR 33
64660: PUSH
64661: LD_STRING 
64663: ST_TO_ADDR
// animal := CreateHuman ;
64664: LD_ADDR_VAR 0 12
64668: PUSH
64669: CALL_OW 44
64673: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64674: LD_VAR 0 12
64678: PPUSH
64679: LD_VAR 0 8
64683: PPUSH
64684: LD_INT 0
64686: PPUSH
64687: CALL 66759 0 3
// end ;
64691: GO 64645
64693: POP
64694: POP
// if birds then
64695: LD_VAR 0 1
64699: IFFALSE 64766
// for i = 1 to birds do
64701: LD_ADDR_VAR 0 11
64705: PUSH
64706: DOUBLE
64707: LD_INT 1
64709: DEC
64710: ST_TO_ADDR
64711: LD_VAR 0 1
64715: PUSH
64716: FOR_TO
64717: IFFALSE 64764
// begin hc_class = 18 ;
64719: LD_ADDR_OWVAR 28
64723: PUSH
64724: LD_INT 18
64726: ST_TO_ADDR
// hc_gallery =  ;
64727: LD_ADDR_OWVAR 33
64731: PUSH
64732: LD_STRING 
64734: ST_TO_ADDR
// animal := CreateHuman ;
64735: LD_ADDR_VAR 0 12
64739: PUSH
64740: CALL_OW 44
64744: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64745: LD_VAR 0 12
64749: PPUSH
64750: LD_VAR 0 8
64754: PPUSH
64755: LD_INT 0
64757: PPUSH
64758: CALL 66759 0 3
// end ;
64762: GO 64716
64764: POP
64765: POP
// if tigers then
64766: LD_VAR 0 2
64770: IFFALSE 64854
// for i = 1 to tigers do
64772: LD_ADDR_VAR 0 11
64776: PUSH
64777: DOUBLE
64778: LD_INT 1
64780: DEC
64781: ST_TO_ADDR
64782: LD_VAR 0 2
64786: PUSH
64787: FOR_TO
64788: IFFALSE 64852
// begin hc_class = class_tiger ;
64790: LD_ADDR_OWVAR 28
64794: PUSH
64795: LD_INT 14
64797: ST_TO_ADDR
// hc_gallery =  ;
64798: LD_ADDR_OWVAR 33
64802: PUSH
64803: LD_STRING 
64805: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
64806: LD_ADDR_OWVAR 35
64810: PUSH
64811: LD_INT 7
64813: NEG
64814: PPUSH
64815: LD_INT 7
64817: PPUSH
64818: CALL_OW 12
64822: ST_TO_ADDR
// animal := CreateHuman ;
64823: LD_ADDR_VAR 0 12
64827: PUSH
64828: CALL_OW 44
64832: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64833: LD_VAR 0 12
64837: PPUSH
64838: LD_VAR 0 8
64842: PPUSH
64843: LD_INT 0
64845: PPUSH
64846: CALL 66759 0 3
// end ;
64850: GO 64787
64852: POP
64853: POP
// if apemans then
64854: LD_VAR 0 3
64858: IFFALSE 64981
// for i = 1 to apemans do
64860: LD_ADDR_VAR 0 11
64864: PUSH
64865: DOUBLE
64866: LD_INT 1
64868: DEC
64869: ST_TO_ADDR
64870: LD_VAR 0 3
64874: PUSH
64875: FOR_TO
64876: IFFALSE 64979
// begin hc_class = class_apeman ;
64878: LD_ADDR_OWVAR 28
64882: PUSH
64883: LD_INT 12
64885: ST_TO_ADDR
// hc_gallery =  ;
64886: LD_ADDR_OWVAR 33
64890: PUSH
64891: LD_STRING 
64893: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
64894: LD_ADDR_OWVAR 35
64898: PUSH
64899: LD_INT 2
64901: NEG
64902: PPUSH
64903: LD_INT 2
64905: PPUSH
64906: CALL_OW 12
64910: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64911: LD_ADDR_OWVAR 31
64915: PUSH
64916: LD_INT 1
64918: PPUSH
64919: LD_INT 3
64921: PPUSH
64922: CALL_OW 12
64926: PUSH
64927: LD_INT 1
64929: PPUSH
64930: LD_INT 3
64932: PPUSH
64933: CALL_OW 12
64937: PUSH
64938: LD_INT 0
64940: PUSH
64941: LD_INT 0
64943: PUSH
64944: EMPTY
64945: LIST
64946: LIST
64947: LIST
64948: LIST
64949: ST_TO_ADDR
// animal := CreateHuman ;
64950: LD_ADDR_VAR 0 12
64954: PUSH
64955: CALL_OW 44
64959: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64960: LD_VAR 0 12
64964: PPUSH
64965: LD_VAR 0 8
64969: PPUSH
64970: LD_INT 0
64972: PPUSH
64973: CALL 66759 0 3
// end ;
64977: GO 64875
64979: POP
64980: POP
// if enchidnas then
64981: LD_VAR 0 4
64985: IFFALSE 65052
// for i = 1 to enchidnas do
64987: LD_ADDR_VAR 0 11
64991: PUSH
64992: DOUBLE
64993: LD_INT 1
64995: DEC
64996: ST_TO_ADDR
64997: LD_VAR 0 4
65001: PUSH
65002: FOR_TO
65003: IFFALSE 65050
// begin hc_class = 13 ;
65005: LD_ADDR_OWVAR 28
65009: PUSH
65010: LD_INT 13
65012: ST_TO_ADDR
// hc_gallery =  ;
65013: LD_ADDR_OWVAR 33
65017: PUSH
65018: LD_STRING 
65020: ST_TO_ADDR
// animal := CreateHuman ;
65021: LD_ADDR_VAR 0 12
65025: PUSH
65026: CALL_OW 44
65030: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65031: LD_VAR 0 12
65035: PPUSH
65036: LD_VAR 0 8
65040: PPUSH
65041: LD_INT 0
65043: PPUSH
65044: CALL 66759 0 3
// end ;
65048: GO 65002
65050: POP
65051: POP
// if fishes then
65052: LD_VAR 0 7
65056: IFFALSE 65123
// for i = 1 to fishes do
65058: LD_ADDR_VAR 0 11
65062: PUSH
65063: DOUBLE
65064: LD_INT 1
65066: DEC
65067: ST_TO_ADDR
65068: LD_VAR 0 7
65072: PUSH
65073: FOR_TO
65074: IFFALSE 65121
// begin hc_class = 20 ;
65076: LD_ADDR_OWVAR 28
65080: PUSH
65081: LD_INT 20
65083: ST_TO_ADDR
// hc_gallery =  ;
65084: LD_ADDR_OWVAR 33
65088: PUSH
65089: LD_STRING 
65091: ST_TO_ADDR
// animal := CreateHuman ;
65092: LD_ADDR_VAR 0 12
65096: PUSH
65097: CALL_OW 44
65101: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65102: LD_VAR 0 12
65106: PPUSH
65107: LD_VAR 0 9
65111: PPUSH
65112: LD_INT 0
65114: PPUSH
65115: CALL 66759 0 3
// end ;
65119: GO 65073
65121: POP
65122: POP
// end ;
65123: LD_VAR 0 10
65127: RET
// export function WantHeal ( sci , unit ) ; begin
65128: LD_INT 0
65130: PPUSH
// if GetTaskList ( sci ) > 0 then
65131: LD_VAR 0 1
65135: PPUSH
65136: CALL_OW 437
65140: PUSH
65141: LD_INT 0
65143: GREATER
65144: IFFALSE 65214
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65146: LD_VAR 0 1
65150: PPUSH
65151: CALL_OW 437
65155: PUSH
65156: LD_INT 1
65158: ARRAY
65159: PUSH
65160: LD_INT 1
65162: ARRAY
65163: PUSH
65164: LD_STRING l
65166: EQUAL
65167: PUSH
65168: LD_VAR 0 1
65172: PPUSH
65173: CALL_OW 437
65177: PUSH
65178: LD_INT 1
65180: ARRAY
65181: PUSH
65182: LD_INT 4
65184: ARRAY
65185: PUSH
65186: LD_VAR 0 2
65190: EQUAL
65191: AND
65192: IFFALSE 65204
// result := true else
65194: LD_ADDR_VAR 0 3
65198: PUSH
65199: LD_INT 1
65201: ST_TO_ADDR
65202: GO 65212
// result := false ;
65204: LD_ADDR_VAR 0 3
65208: PUSH
65209: LD_INT 0
65211: ST_TO_ADDR
// end else
65212: GO 65222
// result := false ;
65214: LD_ADDR_VAR 0 3
65218: PUSH
65219: LD_INT 0
65221: ST_TO_ADDR
// end ;
65222: LD_VAR 0 3
65226: RET
// export function HealTarget ( sci ) ; begin
65227: LD_INT 0
65229: PPUSH
// if not sci then
65230: LD_VAR 0 1
65234: NOT
65235: IFFALSE 65239
// exit ;
65237: GO 65304
// result := 0 ;
65239: LD_ADDR_VAR 0 2
65243: PUSH
65244: LD_INT 0
65246: ST_TO_ADDR
// if GetTaskList ( sci ) then
65247: LD_VAR 0 1
65251: PPUSH
65252: CALL_OW 437
65256: IFFALSE 65304
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65258: LD_VAR 0 1
65262: PPUSH
65263: CALL_OW 437
65267: PUSH
65268: LD_INT 1
65270: ARRAY
65271: PUSH
65272: LD_INT 1
65274: ARRAY
65275: PUSH
65276: LD_STRING l
65278: EQUAL
65279: IFFALSE 65304
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65281: LD_ADDR_VAR 0 2
65285: PUSH
65286: LD_VAR 0 1
65290: PPUSH
65291: CALL_OW 437
65295: PUSH
65296: LD_INT 1
65298: ARRAY
65299: PUSH
65300: LD_INT 4
65302: ARRAY
65303: ST_TO_ADDR
// end ;
65304: LD_VAR 0 2
65308: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65309: LD_INT 0
65311: PPUSH
65312: PPUSH
65313: PPUSH
65314: PPUSH
// if not base_units then
65315: LD_VAR 0 1
65319: NOT
65320: IFFALSE 65324
// exit ;
65322: GO 65411
// result := false ;
65324: LD_ADDR_VAR 0 2
65328: PUSH
65329: LD_INT 0
65331: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65332: LD_ADDR_VAR 0 5
65336: PUSH
65337: LD_VAR 0 1
65341: PPUSH
65342: LD_INT 21
65344: PUSH
65345: LD_INT 3
65347: PUSH
65348: EMPTY
65349: LIST
65350: LIST
65351: PPUSH
65352: CALL_OW 72
65356: ST_TO_ADDR
// if not tmp then
65357: LD_VAR 0 5
65361: NOT
65362: IFFALSE 65366
// exit ;
65364: GO 65411
// for i in tmp do
65366: LD_ADDR_VAR 0 3
65370: PUSH
65371: LD_VAR 0 5
65375: PUSH
65376: FOR_IN
65377: IFFALSE 65409
// begin result := EnemyInRange ( i , 22 ) ;
65379: LD_ADDR_VAR 0 2
65383: PUSH
65384: LD_VAR 0 3
65388: PPUSH
65389: LD_INT 22
65391: PPUSH
65392: CALL 63647 0 2
65396: ST_TO_ADDR
// if result then
65397: LD_VAR 0 2
65401: IFFALSE 65407
// exit ;
65403: POP
65404: POP
65405: GO 65411
// end ;
65407: GO 65376
65409: POP
65410: POP
// end ;
65411: LD_VAR 0 2
65415: RET
// export function FilterByTag ( units , tag ) ; begin
65416: LD_INT 0
65418: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
65419: LD_ADDR_VAR 0 3
65423: PUSH
65424: LD_VAR 0 1
65428: PPUSH
65429: LD_INT 120
65431: PUSH
65432: LD_VAR 0 2
65436: PUSH
65437: EMPTY
65438: LIST
65439: LIST
65440: PPUSH
65441: CALL_OW 72
65445: ST_TO_ADDR
// end ;
65446: LD_VAR 0 3
65450: RET
// export function IsDriver ( un ) ; begin
65451: LD_INT 0
65453: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65454: LD_ADDR_VAR 0 2
65458: PUSH
65459: LD_VAR 0 1
65463: PUSH
65464: LD_INT 55
65466: PUSH
65467: EMPTY
65468: LIST
65469: PPUSH
65470: CALL_OW 69
65474: IN
65475: ST_TO_ADDR
// end ;
65476: LD_VAR 0 2
65480: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65481: LD_INT 0
65483: PPUSH
65484: PPUSH
// list := [ ] ;
65485: LD_ADDR_VAR 0 5
65489: PUSH
65490: EMPTY
65491: ST_TO_ADDR
// case d of 0 :
65492: LD_VAR 0 3
65496: PUSH
65497: LD_INT 0
65499: DOUBLE
65500: EQUAL
65501: IFTRUE 65505
65503: GO 65638
65505: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65506: LD_ADDR_VAR 0 5
65510: PUSH
65511: LD_VAR 0 1
65515: PUSH
65516: LD_INT 4
65518: MINUS
65519: PUSH
65520: LD_VAR 0 2
65524: PUSH
65525: LD_INT 4
65527: MINUS
65528: PUSH
65529: LD_INT 2
65531: PUSH
65532: EMPTY
65533: LIST
65534: LIST
65535: LIST
65536: PUSH
65537: LD_VAR 0 1
65541: PUSH
65542: LD_INT 3
65544: MINUS
65545: PUSH
65546: LD_VAR 0 2
65550: PUSH
65551: LD_INT 1
65553: PUSH
65554: EMPTY
65555: LIST
65556: LIST
65557: LIST
65558: PUSH
65559: LD_VAR 0 1
65563: PUSH
65564: LD_INT 4
65566: PLUS
65567: PUSH
65568: LD_VAR 0 2
65572: PUSH
65573: LD_INT 4
65575: PUSH
65576: EMPTY
65577: LIST
65578: LIST
65579: LIST
65580: PUSH
65581: LD_VAR 0 1
65585: PUSH
65586: LD_INT 3
65588: PLUS
65589: PUSH
65590: LD_VAR 0 2
65594: PUSH
65595: LD_INT 3
65597: PLUS
65598: PUSH
65599: LD_INT 5
65601: PUSH
65602: EMPTY
65603: LIST
65604: LIST
65605: LIST
65606: PUSH
65607: LD_VAR 0 1
65611: PUSH
65612: LD_VAR 0 2
65616: PUSH
65617: LD_INT 4
65619: PLUS
65620: PUSH
65621: LD_INT 0
65623: PUSH
65624: EMPTY
65625: LIST
65626: LIST
65627: LIST
65628: PUSH
65629: EMPTY
65630: LIST
65631: LIST
65632: LIST
65633: LIST
65634: LIST
65635: ST_TO_ADDR
// end ; 1 :
65636: GO 66336
65638: LD_INT 1
65640: DOUBLE
65641: EQUAL
65642: IFTRUE 65646
65644: GO 65779
65646: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
65647: LD_ADDR_VAR 0 5
65651: PUSH
65652: LD_VAR 0 1
65656: PUSH
65657: LD_VAR 0 2
65661: PUSH
65662: LD_INT 4
65664: MINUS
65665: PUSH
65666: LD_INT 3
65668: PUSH
65669: EMPTY
65670: LIST
65671: LIST
65672: LIST
65673: PUSH
65674: LD_VAR 0 1
65678: PUSH
65679: LD_INT 3
65681: MINUS
65682: PUSH
65683: LD_VAR 0 2
65687: PUSH
65688: LD_INT 3
65690: MINUS
65691: PUSH
65692: LD_INT 2
65694: PUSH
65695: EMPTY
65696: LIST
65697: LIST
65698: LIST
65699: PUSH
65700: LD_VAR 0 1
65704: PUSH
65705: LD_INT 4
65707: MINUS
65708: PUSH
65709: LD_VAR 0 2
65713: PUSH
65714: LD_INT 1
65716: PUSH
65717: EMPTY
65718: LIST
65719: LIST
65720: LIST
65721: PUSH
65722: LD_VAR 0 1
65726: PUSH
65727: LD_VAR 0 2
65731: PUSH
65732: LD_INT 3
65734: PLUS
65735: PUSH
65736: LD_INT 0
65738: PUSH
65739: EMPTY
65740: LIST
65741: LIST
65742: LIST
65743: PUSH
65744: LD_VAR 0 1
65748: PUSH
65749: LD_INT 4
65751: PLUS
65752: PUSH
65753: LD_VAR 0 2
65757: PUSH
65758: LD_INT 4
65760: PLUS
65761: PUSH
65762: LD_INT 5
65764: PUSH
65765: EMPTY
65766: LIST
65767: LIST
65768: LIST
65769: PUSH
65770: EMPTY
65771: LIST
65772: LIST
65773: LIST
65774: LIST
65775: LIST
65776: ST_TO_ADDR
// end ; 2 :
65777: GO 66336
65779: LD_INT 2
65781: DOUBLE
65782: EQUAL
65783: IFTRUE 65787
65785: GO 65916
65787: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
65788: LD_ADDR_VAR 0 5
65792: PUSH
65793: LD_VAR 0 1
65797: PUSH
65798: LD_VAR 0 2
65802: PUSH
65803: LD_INT 3
65805: MINUS
65806: PUSH
65807: LD_INT 3
65809: PUSH
65810: EMPTY
65811: LIST
65812: LIST
65813: LIST
65814: PUSH
65815: LD_VAR 0 1
65819: PUSH
65820: LD_INT 4
65822: PLUS
65823: PUSH
65824: LD_VAR 0 2
65828: PUSH
65829: LD_INT 4
65831: PUSH
65832: EMPTY
65833: LIST
65834: LIST
65835: LIST
65836: PUSH
65837: LD_VAR 0 1
65841: PUSH
65842: LD_VAR 0 2
65846: PUSH
65847: LD_INT 4
65849: PLUS
65850: PUSH
65851: LD_INT 0
65853: PUSH
65854: EMPTY
65855: LIST
65856: LIST
65857: LIST
65858: PUSH
65859: LD_VAR 0 1
65863: PUSH
65864: LD_INT 3
65866: MINUS
65867: PUSH
65868: LD_VAR 0 2
65872: PUSH
65873: LD_INT 1
65875: PUSH
65876: EMPTY
65877: LIST
65878: LIST
65879: LIST
65880: PUSH
65881: LD_VAR 0 1
65885: PUSH
65886: LD_INT 4
65888: MINUS
65889: PUSH
65890: LD_VAR 0 2
65894: PUSH
65895: LD_INT 4
65897: MINUS
65898: PUSH
65899: LD_INT 2
65901: PUSH
65902: EMPTY
65903: LIST
65904: LIST
65905: LIST
65906: PUSH
65907: EMPTY
65908: LIST
65909: LIST
65910: LIST
65911: LIST
65912: LIST
65913: ST_TO_ADDR
// end ; 3 :
65914: GO 66336
65916: LD_INT 3
65918: DOUBLE
65919: EQUAL
65920: IFTRUE 65924
65922: GO 66057
65924: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65925: LD_ADDR_VAR 0 5
65929: PUSH
65930: LD_VAR 0 1
65934: PUSH
65935: LD_INT 3
65937: PLUS
65938: PUSH
65939: LD_VAR 0 2
65943: PUSH
65944: LD_INT 4
65946: PUSH
65947: EMPTY
65948: LIST
65949: LIST
65950: LIST
65951: PUSH
65952: LD_VAR 0 1
65956: PUSH
65957: LD_INT 4
65959: PLUS
65960: PUSH
65961: LD_VAR 0 2
65965: PUSH
65966: LD_INT 4
65968: PLUS
65969: PUSH
65970: LD_INT 5
65972: PUSH
65973: EMPTY
65974: LIST
65975: LIST
65976: LIST
65977: PUSH
65978: LD_VAR 0 1
65982: PUSH
65983: LD_INT 4
65985: MINUS
65986: PUSH
65987: LD_VAR 0 2
65991: PUSH
65992: LD_INT 1
65994: PUSH
65995: EMPTY
65996: LIST
65997: LIST
65998: LIST
65999: PUSH
66000: LD_VAR 0 1
66004: PUSH
66005: LD_VAR 0 2
66009: PUSH
66010: LD_INT 4
66012: MINUS
66013: PUSH
66014: LD_INT 3
66016: PUSH
66017: EMPTY
66018: LIST
66019: LIST
66020: LIST
66021: PUSH
66022: LD_VAR 0 1
66026: PUSH
66027: LD_INT 3
66029: MINUS
66030: PUSH
66031: LD_VAR 0 2
66035: PUSH
66036: LD_INT 3
66038: MINUS
66039: PUSH
66040: LD_INT 2
66042: PUSH
66043: EMPTY
66044: LIST
66045: LIST
66046: LIST
66047: PUSH
66048: EMPTY
66049: LIST
66050: LIST
66051: LIST
66052: LIST
66053: LIST
66054: ST_TO_ADDR
// end ; 4 :
66055: GO 66336
66057: LD_INT 4
66059: DOUBLE
66060: EQUAL
66061: IFTRUE 66065
66063: GO 66198
66065: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66066: LD_ADDR_VAR 0 5
66070: PUSH
66071: LD_VAR 0 1
66075: PUSH
66076: LD_VAR 0 2
66080: PUSH
66081: LD_INT 4
66083: PLUS
66084: PUSH
66085: LD_INT 0
66087: PUSH
66088: EMPTY
66089: LIST
66090: LIST
66091: LIST
66092: PUSH
66093: LD_VAR 0 1
66097: PUSH
66098: LD_INT 3
66100: PLUS
66101: PUSH
66102: LD_VAR 0 2
66106: PUSH
66107: LD_INT 3
66109: PLUS
66110: PUSH
66111: LD_INT 5
66113: PUSH
66114: EMPTY
66115: LIST
66116: LIST
66117: LIST
66118: PUSH
66119: LD_VAR 0 1
66123: PUSH
66124: LD_INT 4
66126: PLUS
66127: PUSH
66128: LD_VAR 0 2
66132: PUSH
66133: LD_INT 4
66135: PUSH
66136: EMPTY
66137: LIST
66138: LIST
66139: LIST
66140: PUSH
66141: LD_VAR 0 1
66145: PUSH
66146: LD_VAR 0 2
66150: PUSH
66151: LD_INT 3
66153: MINUS
66154: PUSH
66155: LD_INT 3
66157: PUSH
66158: EMPTY
66159: LIST
66160: LIST
66161: LIST
66162: PUSH
66163: LD_VAR 0 1
66167: PUSH
66168: LD_INT 4
66170: MINUS
66171: PUSH
66172: LD_VAR 0 2
66176: PUSH
66177: LD_INT 4
66179: MINUS
66180: PUSH
66181: LD_INT 2
66183: PUSH
66184: EMPTY
66185: LIST
66186: LIST
66187: LIST
66188: PUSH
66189: EMPTY
66190: LIST
66191: LIST
66192: LIST
66193: LIST
66194: LIST
66195: ST_TO_ADDR
// end ; 5 :
66196: GO 66336
66198: LD_INT 5
66200: DOUBLE
66201: EQUAL
66202: IFTRUE 66206
66204: GO 66335
66206: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66207: LD_ADDR_VAR 0 5
66211: PUSH
66212: LD_VAR 0 1
66216: PUSH
66217: LD_INT 4
66219: MINUS
66220: PUSH
66221: LD_VAR 0 2
66225: PUSH
66226: LD_INT 1
66228: PUSH
66229: EMPTY
66230: LIST
66231: LIST
66232: LIST
66233: PUSH
66234: LD_VAR 0 1
66238: PUSH
66239: LD_VAR 0 2
66243: PUSH
66244: LD_INT 4
66246: MINUS
66247: PUSH
66248: LD_INT 3
66250: PUSH
66251: EMPTY
66252: LIST
66253: LIST
66254: LIST
66255: PUSH
66256: LD_VAR 0 1
66260: PUSH
66261: LD_INT 4
66263: PLUS
66264: PUSH
66265: LD_VAR 0 2
66269: PUSH
66270: LD_INT 4
66272: PLUS
66273: PUSH
66274: LD_INT 5
66276: PUSH
66277: EMPTY
66278: LIST
66279: LIST
66280: LIST
66281: PUSH
66282: LD_VAR 0 1
66286: PUSH
66287: LD_INT 3
66289: PLUS
66290: PUSH
66291: LD_VAR 0 2
66295: PUSH
66296: LD_INT 4
66298: PUSH
66299: EMPTY
66300: LIST
66301: LIST
66302: LIST
66303: PUSH
66304: LD_VAR 0 1
66308: PUSH
66309: LD_VAR 0 2
66313: PUSH
66314: LD_INT 3
66316: PLUS
66317: PUSH
66318: LD_INT 0
66320: PUSH
66321: EMPTY
66322: LIST
66323: LIST
66324: LIST
66325: PUSH
66326: EMPTY
66327: LIST
66328: LIST
66329: LIST
66330: LIST
66331: LIST
66332: ST_TO_ADDR
// end ; end ;
66333: GO 66336
66335: POP
// result := list ;
66336: LD_ADDR_VAR 0 4
66340: PUSH
66341: LD_VAR 0 5
66345: ST_TO_ADDR
// end ;
66346: LD_VAR 0 4
66350: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66351: LD_INT 0
66353: PPUSH
66354: PPUSH
66355: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66356: LD_VAR 0 1
66360: NOT
66361: PUSH
66362: LD_VAR 0 2
66366: PUSH
66367: LD_INT 1
66369: PUSH
66370: LD_INT 2
66372: PUSH
66373: LD_INT 3
66375: PUSH
66376: LD_INT 4
66378: PUSH
66379: EMPTY
66380: LIST
66381: LIST
66382: LIST
66383: LIST
66384: IN
66385: NOT
66386: OR
66387: IFFALSE 66391
// exit ;
66389: GO 66483
// tmp := [ ] ;
66391: LD_ADDR_VAR 0 5
66395: PUSH
66396: EMPTY
66397: ST_TO_ADDR
// for i in units do
66398: LD_ADDR_VAR 0 4
66402: PUSH
66403: LD_VAR 0 1
66407: PUSH
66408: FOR_IN
66409: IFFALSE 66452
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
66411: LD_ADDR_VAR 0 5
66415: PUSH
66416: LD_VAR 0 5
66420: PPUSH
66421: LD_VAR 0 5
66425: PUSH
66426: LD_INT 1
66428: PLUS
66429: PPUSH
66430: LD_VAR 0 4
66434: PPUSH
66435: LD_VAR 0 2
66439: PPUSH
66440: CALL_OW 259
66444: PPUSH
66445: CALL_OW 2
66449: ST_TO_ADDR
66450: GO 66408
66452: POP
66453: POP
// if not tmp then
66454: LD_VAR 0 5
66458: NOT
66459: IFFALSE 66463
// exit ;
66461: GO 66483
// result := SortListByListDesc ( units , tmp ) ;
66463: LD_ADDR_VAR 0 3
66467: PUSH
66468: LD_VAR 0 1
66472: PPUSH
66473: LD_VAR 0 5
66477: PPUSH
66478: CALL_OW 77
66482: ST_TO_ADDR
// end ;
66483: LD_VAR 0 3
66487: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66488: LD_INT 0
66490: PPUSH
66491: PPUSH
66492: PPUSH
// result := false ;
66493: LD_ADDR_VAR 0 3
66497: PUSH
66498: LD_INT 0
66500: ST_TO_ADDR
// x := GetX ( building ) ;
66501: LD_ADDR_VAR 0 4
66505: PUSH
66506: LD_VAR 0 2
66510: PPUSH
66511: CALL_OW 250
66515: ST_TO_ADDR
// y := GetY ( building ) ;
66516: LD_ADDR_VAR 0 5
66520: PUSH
66521: LD_VAR 0 2
66525: PPUSH
66526: CALL_OW 251
66530: ST_TO_ADDR
// if not building or not x or not y then
66531: LD_VAR 0 2
66535: NOT
66536: PUSH
66537: LD_VAR 0 4
66541: NOT
66542: OR
66543: PUSH
66544: LD_VAR 0 5
66548: NOT
66549: OR
66550: IFFALSE 66554
// exit ;
66552: GO 66646
// if GetTaskList ( unit ) then
66554: LD_VAR 0 1
66558: PPUSH
66559: CALL_OW 437
66563: IFFALSE 66646
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66565: LD_STRING e
66567: PUSH
66568: LD_VAR 0 1
66572: PPUSH
66573: CALL_OW 437
66577: PUSH
66578: LD_INT 1
66580: ARRAY
66581: PUSH
66582: LD_INT 1
66584: ARRAY
66585: EQUAL
66586: PUSH
66587: LD_VAR 0 4
66591: PUSH
66592: LD_VAR 0 1
66596: PPUSH
66597: CALL_OW 437
66601: PUSH
66602: LD_INT 1
66604: ARRAY
66605: PUSH
66606: LD_INT 2
66608: ARRAY
66609: EQUAL
66610: AND
66611: PUSH
66612: LD_VAR 0 5
66616: PUSH
66617: LD_VAR 0 1
66621: PPUSH
66622: CALL_OW 437
66626: PUSH
66627: LD_INT 1
66629: ARRAY
66630: PUSH
66631: LD_INT 3
66633: ARRAY
66634: EQUAL
66635: AND
66636: IFFALSE 66646
// result := true end ;
66638: LD_ADDR_VAR 0 3
66642: PUSH
66643: LD_INT 1
66645: ST_TO_ADDR
// end ;
66646: LD_VAR 0 3
66650: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
66651: LD_INT 0
66653: PPUSH
// result := false ;
66654: LD_ADDR_VAR 0 4
66658: PUSH
66659: LD_INT 0
66661: ST_TO_ADDR
// if GetTaskList ( unit ) then
66662: LD_VAR 0 1
66666: PPUSH
66667: CALL_OW 437
66671: IFFALSE 66754
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66673: LD_STRING M
66675: PUSH
66676: LD_VAR 0 1
66680: PPUSH
66681: CALL_OW 437
66685: PUSH
66686: LD_INT 1
66688: ARRAY
66689: PUSH
66690: LD_INT 1
66692: ARRAY
66693: EQUAL
66694: PUSH
66695: LD_VAR 0 2
66699: PUSH
66700: LD_VAR 0 1
66704: PPUSH
66705: CALL_OW 437
66709: PUSH
66710: LD_INT 1
66712: ARRAY
66713: PUSH
66714: LD_INT 2
66716: ARRAY
66717: EQUAL
66718: AND
66719: PUSH
66720: LD_VAR 0 3
66724: PUSH
66725: LD_VAR 0 1
66729: PPUSH
66730: CALL_OW 437
66734: PUSH
66735: LD_INT 1
66737: ARRAY
66738: PUSH
66739: LD_INT 3
66741: ARRAY
66742: EQUAL
66743: AND
66744: IFFALSE 66754
// result := true ;
66746: LD_ADDR_VAR 0 4
66750: PUSH
66751: LD_INT 1
66753: ST_TO_ADDR
// end ; end ;
66754: LD_VAR 0 4
66758: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
66759: LD_INT 0
66761: PPUSH
66762: PPUSH
66763: PPUSH
66764: PPUSH
// if not unit or not area then
66765: LD_VAR 0 1
66769: NOT
66770: PUSH
66771: LD_VAR 0 2
66775: NOT
66776: OR
66777: IFFALSE 66781
// exit ;
66779: GO 66945
// tmp := AreaToList ( area , i ) ;
66781: LD_ADDR_VAR 0 6
66785: PUSH
66786: LD_VAR 0 2
66790: PPUSH
66791: LD_VAR 0 5
66795: PPUSH
66796: CALL_OW 517
66800: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
66801: LD_ADDR_VAR 0 5
66805: PUSH
66806: DOUBLE
66807: LD_INT 1
66809: DEC
66810: ST_TO_ADDR
66811: LD_VAR 0 6
66815: PUSH
66816: LD_INT 1
66818: ARRAY
66819: PUSH
66820: FOR_TO
66821: IFFALSE 66943
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66823: LD_ADDR_VAR 0 7
66827: PUSH
66828: LD_VAR 0 6
66832: PUSH
66833: LD_INT 1
66835: ARRAY
66836: PUSH
66837: LD_VAR 0 5
66841: ARRAY
66842: PUSH
66843: LD_VAR 0 6
66847: PUSH
66848: LD_INT 2
66850: ARRAY
66851: PUSH
66852: LD_VAR 0 5
66856: ARRAY
66857: PUSH
66858: EMPTY
66859: LIST
66860: LIST
66861: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
66862: LD_VAR 0 7
66866: PUSH
66867: LD_INT 1
66869: ARRAY
66870: PPUSH
66871: LD_VAR 0 7
66875: PUSH
66876: LD_INT 2
66878: ARRAY
66879: PPUSH
66880: CALL_OW 428
66884: PUSH
66885: LD_INT 0
66887: EQUAL
66888: IFFALSE 66941
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66890: LD_VAR 0 1
66894: PPUSH
66895: LD_VAR 0 7
66899: PUSH
66900: LD_INT 1
66902: ARRAY
66903: PPUSH
66904: LD_VAR 0 7
66908: PUSH
66909: LD_INT 2
66911: ARRAY
66912: PPUSH
66913: LD_VAR 0 3
66917: PPUSH
66918: CALL_OW 48
// result := IsPlaced ( unit ) ;
66922: LD_ADDR_VAR 0 4
66926: PUSH
66927: LD_VAR 0 1
66931: PPUSH
66932: CALL_OW 305
66936: ST_TO_ADDR
// exit ;
66937: POP
66938: POP
66939: GO 66945
// end ; end ;
66941: GO 66820
66943: POP
66944: POP
// end ;
66945: LD_VAR 0 4
66949: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66950: LD_INT 0
66952: PPUSH
66953: PPUSH
66954: PPUSH
// if not side or side > 8 then
66955: LD_VAR 0 1
66959: NOT
66960: PUSH
66961: LD_VAR 0 1
66965: PUSH
66966: LD_INT 8
66968: GREATER
66969: OR
66970: IFFALSE 66974
// exit ;
66972: GO 67161
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66974: LD_ADDR_VAR 0 4
66978: PUSH
66979: LD_INT 22
66981: PUSH
66982: LD_VAR 0 1
66986: PUSH
66987: EMPTY
66988: LIST
66989: LIST
66990: PUSH
66991: LD_INT 21
66993: PUSH
66994: LD_INT 3
66996: PUSH
66997: EMPTY
66998: LIST
66999: LIST
67000: PUSH
67001: EMPTY
67002: LIST
67003: LIST
67004: PPUSH
67005: CALL_OW 69
67009: ST_TO_ADDR
// if not tmp then
67010: LD_VAR 0 4
67014: NOT
67015: IFFALSE 67019
// exit ;
67017: GO 67161
// enable_addtolog := true ;
67019: LD_ADDR_OWVAR 81
67023: PUSH
67024: LD_INT 1
67026: ST_TO_ADDR
// AddToLog ( [ ) ;
67027: LD_STRING [
67029: PPUSH
67030: CALL_OW 561
// for i in tmp do
67034: LD_ADDR_VAR 0 3
67038: PUSH
67039: LD_VAR 0 4
67043: PUSH
67044: FOR_IN
67045: IFFALSE 67152
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67047: LD_STRING [
67049: PUSH
67050: LD_VAR 0 3
67054: PPUSH
67055: CALL_OW 266
67059: STR
67060: PUSH
67061: LD_STRING , 
67063: STR
67064: PUSH
67065: LD_VAR 0 3
67069: PPUSH
67070: CALL_OW 250
67074: STR
67075: PUSH
67076: LD_STRING , 
67078: STR
67079: PUSH
67080: LD_VAR 0 3
67084: PPUSH
67085: CALL_OW 251
67089: STR
67090: PUSH
67091: LD_STRING , 
67093: STR
67094: PUSH
67095: LD_VAR 0 3
67099: PPUSH
67100: CALL_OW 254
67104: STR
67105: PUSH
67106: LD_STRING , 
67108: STR
67109: PUSH
67110: LD_VAR 0 3
67114: PPUSH
67115: LD_INT 1
67117: PPUSH
67118: CALL_OW 268
67122: STR
67123: PUSH
67124: LD_STRING , 
67126: STR
67127: PUSH
67128: LD_VAR 0 3
67132: PPUSH
67133: LD_INT 2
67135: PPUSH
67136: CALL_OW 268
67140: STR
67141: PUSH
67142: LD_STRING ],
67144: STR
67145: PPUSH
67146: CALL_OW 561
// end ;
67150: GO 67044
67152: POP
67153: POP
// AddToLog ( ]; ) ;
67154: LD_STRING ];
67156: PPUSH
67157: CALL_OW 561
// end ;
67161: LD_VAR 0 2
67165: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67166: LD_INT 0
67168: PPUSH
67169: PPUSH
67170: PPUSH
67171: PPUSH
67172: PPUSH
// if not area or not rate or not max then
67173: LD_VAR 0 1
67177: NOT
67178: PUSH
67179: LD_VAR 0 2
67183: NOT
67184: OR
67185: PUSH
67186: LD_VAR 0 4
67190: NOT
67191: OR
67192: IFFALSE 67196
// exit ;
67194: GO 67385
// while 1 do
67196: LD_INT 1
67198: IFFALSE 67385
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67200: LD_ADDR_VAR 0 9
67204: PUSH
67205: LD_VAR 0 1
67209: PPUSH
67210: LD_INT 1
67212: PPUSH
67213: CALL_OW 287
67217: PUSH
67218: LD_INT 10
67220: MUL
67221: ST_TO_ADDR
// r := rate / 10 ;
67222: LD_ADDR_VAR 0 7
67226: PUSH
67227: LD_VAR 0 2
67231: PUSH
67232: LD_INT 10
67234: DIVREAL
67235: ST_TO_ADDR
// time := 1 1$00 ;
67236: LD_ADDR_VAR 0 8
67240: PUSH
67241: LD_INT 2100
67243: ST_TO_ADDR
// if amount < min then
67244: LD_VAR 0 9
67248: PUSH
67249: LD_VAR 0 3
67253: LESS
67254: IFFALSE 67272
// r := r * 2 else
67256: LD_ADDR_VAR 0 7
67260: PUSH
67261: LD_VAR 0 7
67265: PUSH
67266: LD_INT 2
67268: MUL
67269: ST_TO_ADDR
67270: GO 67298
// if amount > max then
67272: LD_VAR 0 9
67276: PUSH
67277: LD_VAR 0 4
67281: GREATER
67282: IFFALSE 67298
// r := r / 2 ;
67284: LD_ADDR_VAR 0 7
67288: PUSH
67289: LD_VAR 0 7
67293: PUSH
67294: LD_INT 2
67296: DIVREAL
67297: ST_TO_ADDR
// time := time / r ;
67298: LD_ADDR_VAR 0 8
67302: PUSH
67303: LD_VAR 0 8
67307: PUSH
67308: LD_VAR 0 7
67312: DIVREAL
67313: ST_TO_ADDR
// if time < 0 then
67314: LD_VAR 0 8
67318: PUSH
67319: LD_INT 0
67321: LESS
67322: IFFALSE 67339
// time := time * - 1 ;
67324: LD_ADDR_VAR 0 8
67328: PUSH
67329: LD_VAR 0 8
67333: PUSH
67334: LD_INT 1
67336: NEG
67337: MUL
67338: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
67339: LD_VAR 0 8
67343: PUSH
67344: LD_INT 35
67346: PPUSH
67347: LD_INT 875
67349: PPUSH
67350: CALL_OW 12
67354: PLUS
67355: PPUSH
67356: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67360: LD_INT 1
67362: PPUSH
67363: LD_INT 5
67365: PPUSH
67366: CALL_OW 12
67370: PPUSH
67371: LD_VAR 0 1
67375: PPUSH
67376: LD_INT 1
67378: PPUSH
67379: CALL_OW 55
// end ;
67383: GO 67196
// end ;
67385: LD_VAR 0 5
67389: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67390: LD_INT 0
67392: PPUSH
67393: PPUSH
67394: PPUSH
67395: PPUSH
67396: PPUSH
67397: PPUSH
67398: PPUSH
67399: PPUSH
// if not turrets or not factories then
67400: LD_VAR 0 1
67404: NOT
67405: PUSH
67406: LD_VAR 0 2
67410: NOT
67411: OR
67412: IFFALSE 67416
// exit ;
67414: GO 67723
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67416: LD_ADDR_VAR 0 10
67420: PUSH
67421: LD_INT 5
67423: PUSH
67424: LD_INT 6
67426: PUSH
67427: EMPTY
67428: LIST
67429: LIST
67430: PUSH
67431: LD_INT 2
67433: PUSH
67434: LD_INT 4
67436: PUSH
67437: EMPTY
67438: LIST
67439: LIST
67440: PUSH
67441: LD_INT 3
67443: PUSH
67444: LD_INT 5
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: PUSH
67451: EMPTY
67452: LIST
67453: LIST
67454: LIST
67455: PUSH
67456: LD_INT 24
67458: PUSH
67459: LD_INT 25
67461: PUSH
67462: EMPTY
67463: LIST
67464: LIST
67465: PUSH
67466: LD_INT 23
67468: PUSH
67469: LD_INT 27
67471: PUSH
67472: EMPTY
67473: LIST
67474: LIST
67475: PUSH
67476: EMPTY
67477: LIST
67478: LIST
67479: PUSH
67480: LD_INT 42
67482: PUSH
67483: LD_INT 43
67485: PUSH
67486: EMPTY
67487: LIST
67488: LIST
67489: PUSH
67490: LD_INT 44
67492: PUSH
67493: LD_INT 46
67495: PUSH
67496: EMPTY
67497: LIST
67498: LIST
67499: PUSH
67500: LD_INT 45
67502: PUSH
67503: LD_INT 47
67505: PUSH
67506: EMPTY
67507: LIST
67508: LIST
67509: PUSH
67510: EMPTY
67511: LIST
67512: LIST
67513: LIST
67514: PUSH
67515: EMPTY
67516: LIST
67517: LIST
67518: LIST
67519: ST_TO_ADDR
// result := [ ] ;
67520: LD_ADDR_VAR 0 3
67524: PUSH
67525: EMPTY
67526: ST_TO_ADDR
// for i in turrets do
67527: LD_ADDR_VAR 0 4
67531: PUSH
67532: LD_VAR 0 1
67536: PUSH
67537: FOR_IN
67538: IFFALSE 67721
// begin nat := GetNation ( i ) ;
67540: LD_ADDR_VAR 0 7
67544: PUSH
67545: LD_VAR 0 4
67549: PPUSH
67550: CALL_OW 248
67554: ST_TO_ADDR
// weapon := 0 ;
67555: LD_ADDR_VAR 0 8
67559: PUSH
67560: LD_INT 0
67562: ST_TO_ADDR
// if not nat then
67563: LD_VAR 0 7
67567: NOT
67568: IFFALSE 67572
// continue ;
67570: GO 67537
// for j in list [ nat ] do
67572: LD_ADDR_VAR 0 5
67576: PUSH
67577: LD_VAR 0 10
67581: PUSH
67582: LD_VAR 0 7
67586: ARRAY
67587: PUSH
67588: FOR_IN
67589: IFFALSE 67630
// if GetBWeapon ( i ) = j [ 1 ] then
67591: LD_VAR 0 4
67595: PPUSH
67596: CALL_OW 269
67600: PUSH
67601: LD_VAR 0 5
67605: PUSH
67606: LD_INT 1
67608: ARRAY
67609: EQUAL
67610: IFFALSE 67628
// begin weapon := j [ 2 ] ;
67612: LD_ADDR_VAR 0 8
67616: PUSH
67617: LD_VAR 0 5
67621: PUSH
67622: LD_INT 2
67624: ARRAY
67625: ST_TO_ADDR
// break ;
67626: GO 67630
// end ;
67628: GO 67588
67630: POP
67631: POP
// if not weapon then
67632: LD_VAR 0 8
67636: NOT
67637: IFFALSE 67641
// continue ;
67639: GO 67537
// for k in factories do
67641: LD_ADDR_VAR 0 6
67645: PUSH
67646: LD_VAR 0 2
67650: PUSH
67651: FOR_IN
67652: IFFALSE 67717
// begin weapons := AvailableWeaponList ( k ) ;
67654: LD_ADDR_VAR 0 9
67658: PUSH
67659: LD_VAR 0 6
67663: PPUSH
67664: CALL_OW 478
67668: ST_TO_ADDR
// if not weapons then
67669: LD_VAR 0 9
67673: NOT
67674: IFFALSE 67678
// continue ;
67676: GO 67651
// if weapon in weapons then
67678: LD_VAR 0 8
67682: PUSH
67683: LD_VAR 0 9
67687: IN
67688: IFFALSE 67715
// begin result := [ i , weapon ] ;
67690: LD_ADDR_VAR 0 3
67694: PUSH
67695: LD_VAR 0 4
67699: PUSH
67700: LD_VAR 0 8
67704: PUSH
67705: EMPTY
67706: LIST
67707: LIST
67708: ST_TO_ADDR
// exit ;
67709: POP
67710: POP
67711: POP
67712: POP
67713: GO 67723
// end ; end ;
67715: GO 67651
67717: POP
67718: POP
// end ;
67719: GO 67537
67721: POP
67722: POP
// end ;
67723: LD_VAR 0 3
67727: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
67728: LD_INT 0
67730: PPUSH
// if not side or side > 8 then
67731: LD_VAR 0 3
67735: NOT
67736: PUSH
67737: LD_VAR 0 3
67741: PUSH
67742: LD_INT 8
67744: GREATER
67745: OR
67746: IFFALSE 67750
// exit ;
67748: GO 67809
// if not range then
67750: LD_VAR 0 4
67754: NOT
67755: IFFALSE 67766
// range := - 12 ;
67757: LD_ADDR_VAR 0 4
67761: PUSH
67762: LD_INT 12
67764: NEG
67765: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
67766: LD_VAR 0 1
67770: PPUSH
67771: LD_VAR 0 2
67775: PPUSH
67776: LD_VAR 0 3
67780: PPUSH
67781: LD_VAR 0 4
67785: PPUSH
67786: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
67790: LD_VAR 0 1
67794: PPUSH
67795: LD_VAR 0 2
67799: PPUSH
67800: LD_VAR 0 3
67804: PPUSH
67805: CALL_OW 331
// end ;
67809: LD_VAR 0 5
67813: RET
// export function Video ( mode ) ; begin
67814: LD_INT 0
67816: PPUSH
// ingame_video = mode ;
67817: LD_ADDR_OWVAR 52
67821: PUSH
67822: LD_VAR 0 1
67826: ST_TO_ADDR
// interface_hidden = mode ;
67827: LD_ADDR_OWVAR 54
67831: PUSH
67832: LD_VAR 0 1
67836: ST_TO_ADDR
// end ;
67837: LD_VAR 0 2
67841: RET
// export function Join ( array , element ) ; begin
67842: LD_INT 0
67844: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67845: LD_ADDR_VAR 0 3
67849: PUSH
67850: LD_VAR 0 1
67854: PPUSH
67855: LD_VAR 0 1
67859: PUSH
67860: LD_INT 1
67862: PLUS
67863: PPUSH
67864: LD_VAR 0 2
67868: PPUSH
67869: CALL_OW 1
67873: ST_TO_ADDR
// end ;
67874: LD_VAR 0 3
67878: RET
// export function JoinUnion ( array , element ) ; begin
67879: LD_INT 0
67881: PPUSH
// result := array union element ;
67882: LD_ADDR_VAR 0 3
67886: PUSH
67887: LD_VAR 0 1
67891: PUSH
67892: LD_VAR 0 2
67896: UNION
67897: ST_TO_ADDR
// end ;
67898: LD_VAR 0 3
67902: RET
// export function GetBehemoths ( side ) ; begin
67903: LD_INT 0
67905: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
67906: LD_ADDR_VAR 0 2
67910: PUSH
67911: LD_INT 22
67913: PUSH
67914: LD_VAR 0 1
67918: PUSH
67919: EMPTY
67920: LIST
67921: LIST
67922: PUSH
67923: LD_INT 31
67925: PUSH
67926: LD_INT 25
67928: PUSH
67929: EMPTY
67930: LIST
67931: LIST
67932: PUSH
67933: EMPTY
67934: LIST
67935: LIST
67936: PPUSH
67937: CALL_OW 69
67941: ST_TO_ADDR
// end ;
67942: LD_VAR 0 2
67946: RET
// export function Shuffle ( array ) ; var i , index ; begin
67947: LD_INT 0
67949: PPUSH
67950: PPUSH
67951: PPUSH
// result := [ ] ;
67952: LD_ADDR_VAR 0 2
67956: PUSH
67957: EMPTY
67958: ST_TO_ADDR
// if not array then
67959: LD_VAR 0 1
67963: NOT
67964: IFFALSE 67968
// exit ;
67966: GO 68067
// Randomize ;
67968: CALL_OW 10
// for i = array downto 1 do
67972: LD_ADDR_VAR 0 3
67976: PUSH
67977: DOUBLE
67978: LD_VAR 0 1
67982: INC
67983: ST_TO_ADDR
67984: LD_INT 1
67986: PUSH
67987: FOR_DOWNTO
67988: IFFALSE 68065
// begin index := rand ( 1 , array ) ;
67990: LD_ADDR_VAR 0 4
67994: PUSH
67995: LD_INT 1
67997: PPUSH
67998: LD_VAR 0 1
68002: PPUSH
68003: CALL_OW 12
68007: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68008: LD_ADDR_VAR 0 2
68012: PUSH
68013: LD_VAR 0 2
68017: PPUSH
68018: LD_VAR 0 2
68022: PUSH
68023: LD_INT 1
68025: PLUS
68026: PPUSH
68027: LD_VAR 0 1
68031: PUSH
68032: LD_VAR 0 4
68036: ARRAY
68037: PPUSH
68038: CALL_OW 2
68042: ST_TO_ADDR
// array := Delete ( array , index ) ;
68043: LD_ADDR_VAR 0 1
68047: PUSH
68048: LD_VAR 0 1
68052: PPUSH
68053: LD_VAR 0 4
68057: PPUSH
68058: CALL_OW 3
68062: ST_TO_ADDR
// end ;
68063: GO 67987
68065: POP
68066: POP
// end ;
68067: LD_VAR 0 2
68071: RET
// export function GetBaseMaterials ( base ) ; begin
68072: LD_INT 0
68074: PPUSH
// result := [ 0 , 0 , 0 ] ;
68075: LD_ADDR_VAR 0 2
68079: PUSH
68080: LD_INT 0
68082: PUSH
68083: LD_INT 0
68085: PUSH
68086: LD_INT 0
68088: PUSH
68089: EMPTY
68090: LIST
68091: LIST
68092: LIST
68093: ST_TO_ADDR
// if not base then
68094: LD_VAR 0 1
68098: NOT
68099: IFFALSE 68103
// exit ;
68101: GO 68152
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68103: LD_ADDR_VAR 0 2
68107: PUSH
68108: LD_VAR 0 1
68112: PPUSH
68113: LD_INT 1
68115: PPUSH
68116: CALL_OW 275
68120: PUSH
68121: LD_VAR 0 1
68125: PPUSH
68126: LD_INT 2
68128: PPUSH
68129: CALL_OW 275
68133: PUSH
68134: LD_VAR 0 1
68138: PPUSH
68139: LD_INT 3
68141: PPUSH
68142: CALL_OW 275
68146: PUSH
68147: EMPTY
68148: LIST
68149: LIST
68150: LIST
68151: ST_TO_ADDR
// end ;
68152: LD_VAR 0 2
68156: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68157: LD_INT 0
68159: PPUSH
68160: PPUSH
// result := array ;
68161: LD_ADDR_VAR 0 3
68165: PUSH
68166: LD_VAR 0 1
68170: ST_TO_ADDR
// if size > 0 then
68171: LD_VAR 0 2
68175: PUSH
68176: LD_INT 0
68178: GREATER
68179: IFFALSE 68225
// for i := array downto size do
68181: LD_ADDR_VAR 0 4
68185: PUSH
68186: DOUBLE
68187: LD_VAR 0 1
68191: INC
68192: ST_TO_ADDR
68193: LD_VAR 0 2
68197: PUSH
68198: FOR_DOWNTO
68199: IFFALSE 68223
// result := Delete ( result , result ) ;
68201: LD_ADDR_VAR 0 3
68205: PUSH
68206: LD_VAR 0 3
68210: PPUSH
68211: LD_VAR 0 3
68215: PPUSH
68216: CALL_OW 3
68220: ST_TO_ADDR
68221: GO 68198
68223: POP
68224: POP
// end ;
68225: LD_VAR 0 3
68229: RET
// export function ComExit ( unit ) ; var tmp ; begin
68230: LD_INT 0
68232: PPUSH
68233: PPUSH
// if not IsInUnit ( unit ) then
68234: LD_VAR 0 1
68238: PPUSH
68239: CALL_OW 310
68243: NOT
68244: IFFALSE 68248
// exit ;
68246: GO 68308
// tmp := IsInUnit ( unit ) ;
68248: LD_ADDR_VAR 0 3
68252: PUSH
68253: LD_VAR 0 1
68257: PPUSH
68258: CALL_OW 310
68262: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68263: LD_VAR 0 3
68267: PPUSH
68268: CALL_OW 247
68272: PUSH
68273: LD_INT 2
68275: EQUAL
68276: IFFALSE 68289
// ComExitVehicle ( unit ) else
68278: LD_VAR 0 1
68282: PPUSH
68283: CALL_OW 121
68287: GO 68298
// ComExitBuilding ( unit ) ;
68289: LD_VAR 0 1
68293: PPUSH
68294: CALL_OW 122
// result := tmp ;
68298: LD_ADDR_VAR 0 2
68302: PUSH
68303: LD_VAR 0 3
68307: ST_TO_ADDR
// end ;
68308: LD_VAR 0 2
68312: RET
// export function ComExitAll ( units ) ; var i ; begin
68313: LD_INT 0
68315: PPUSH
68316: PPUSH
// if not units then
68317: LD_VAR 0 1
68321: NOT
68322: IFFALSE 68326
// exit ;
68324: GO 68352
// for i in units do
68326: LD_ADDR_VAR 0 3
68330: PUSH
68331: LD_VAR 0 1
68335: PUSH
68336: FOR_IN
68337: IFFALSE 68350
// ComExit ( i ) ;
68339: LD_VAR 0 3
68343: PPUSH
68344: CALL 68230 0 1
68348: GO 68336
68350: POP
68351: POP
// end ;
68352: LD_VAR 0 2
68356: RET
// export function ResetHc ; begin
68357: LD_INT 0
68359: PPUSH
// InitHc ;
68360: CALL_OW 19
// hc_importance := 0 ;
68364: LD_ADDR_OWVAR 32
68368: PUSH
68369: LD_INT 0
68371: ST_TO_ADDR
// end ;
68372: LD_VAR 0 1
68376: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68377: LD_INT 0
68379: PPUSH
68380: PPUSH
68381: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68382: LD_ADDR_VAR 0 6
68386: PUSH
68387: LD_VAR 0 1
68391: PUSH
68392: LD_VAR 0 3
68396: PLUS
68397: PUSH
68398: LD_INT 2
68400: DIV
68401: ST_TO_ADDR
// if _x < 0 then
68402: LD_VAR 0 6
68406: PUSH
68407: LD_INT 0
68409: LESS
68410: IFFALSE 68427
// _x := _x * - 1 ;
68412: LD_ADDR_VAR 0 6
68416: PUSH
68417: LD_VAR 0 6
68421: PUSH
68422: LD_INT 1
68424: NEG
68425: MUL
68426: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68427: LD_ADDR_VAR 0 7
68431: PUSH
68432: LD_VAR 0 2
68436: PUSH
68437: LD_VAR 0 4
68441: PLUS
68442: PUSH
68443: LD_INT 2
68445: DIV
68446: ST_TO_ADDR
// if _y < 0 then
68447: LD_VAR 0 7
68451: PUSH
68452: LD_INT 0
68454: LESS
68455: IFFALSE 68472
// _y := _y * - 1 ;
68457: LD_ADDR_VAR 0 7
68461: PUSH
68462: LD_VAR 0 7
68466: PUSH
68467: LD_INT 1
68469: NEG
68470: MUL
68471: ST_TO_ADDR
// result := [ _x , _y ] ;
68472: LD_ADDR_VAR 0 5
68476: PUSH
68477: LD_VAR 0 6
68481: PUSH
68482: LD_VAR 0 7
68486: PUSH
68487: EMPTY
68488: LIST
68489: LIST
68490: ST_TO_ADDR
// end ;
68491: LD_VAR 0 5
68495: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68496: LD_INT 0
68498: PPUSH
68499: PPUSH
68500: PPUSH
68501: PPUSH
// task := GetTaskList ( unit ) ;
68502: LD_ADDR_VAR 0 7
68506: PUSH
68507: LD_VAR 0 1
68511: PPUSH
68512: CALL_OW 437
68516: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68517: LD_VAR 0 7
68521: NOT
68522: PUSH
68523: LD_VAR 0 1
68527: PPUSH
68528: LD_VAR 0 2
68532: PPUSH
68533: CALL_OW 308
68537: NOT
68538: AND
68539: IFFALSE 68543
// exit ;
68541: GO 68661
// if IsInArea ( unit , area ) then
68543: LD_VAR 0 1
68547: PPUSH
68548: LD_VAR 0 2
68552: PPUSH
68553: CALL_OW 308
68557: IFFALSE 68575
// begin ComMoveToArea ( unit , goAway ) ;
68559: LD_VAR 0 1
68563: PPUSH
68564: LD_VAR 0 3
68568: PPUSH
68569: CALL_OW 113
// exit ;
68573: GO 68661
// end ; if task [ 1 ] [ 1 ] <> M then
68575: LD_VAR 0 7
68579: PUSH
68580: LD_INT 1
68582: ARRAY
68583: PUSH
68584: LD_INT 1
68586: ARRAY
68587: PUSH
68588: LD_STRING M
68590: NONEQUAL
68591: IFFALSE 68595
// exit ;
68593: GO 68661
// x := task [ 1 ] [ 2 ] ;
68595: LD_ADDR_VAR 0 5
68599: PUSH
68600: LD_VAR 0 7
68604: PUSH
68605: LD_INT 1
68607: ARRAY
68608: PUSH
68609: LD_INT 2
68611: ARRAY
68612: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
68613: LD_ADDR_VAR 0 6
68617: PUSH
68618: LD_VAR 0 7
68622: PUSH
68623: LD_INT 1
68625: ARRAY
68626: PUSH
68627: LD_INT 3
68629: ARRAY
68630: ST_TO_ADDR
// if InArea ( x , y , area ) then
68631: LD_VAR 0 5
68635: PPUSH
68636: LD_VAR 0 6
68640: PPUSH
68641: LD_VAR 0 2
68645: PPUSH
68646: CALL_OW 309
68650: IFFALSE 68661
// ComStop ( unit ) ;
68652: LD_VAR 0 1
68656: PPUSH
68657: CALL_OW 141
// end ;
68661: LD_VAR 0 4
68665: RET
// export function Abs ( value ) ; begin
68666: LD_INT 0
68668: PPUSH
// result := value ;
68669: LD_ADDR_VAR 0 2
68673: PUSH
68674: LD_VAR 0 1
68678: ST_TO_ADDR
// if value < 0 then
68679: LD_VAR 0 1
68683: PUSH
68684: LD_INT 0
68686: LESS
68687: IFFALSE 68704
// result := value * - 1 ;
68689: LD_ADDR_VAR 0 2
68693: PUSH
68694: LD_VAR 0 1
68698: PUSH
68699: LD_INT 1
68701: NEG
68702: MUL
68703: ST_TO_ADDR
// end ;
68704: LD_VAR 0 2
68708: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
68709: LD_INT 0
68711: PPUSH
68712: PPUSH
68713: PPUSH
68714: PPUSH
68715: PPUSH
68716: PPUSH
68717: PPUSH
68718: PPUSH
// if not unit or not building then
68719: LD_VAR 0 1
68723: NOT
68724: PUSH
68725: LD_VAR 0 2
68729: NOT
68730: OR
68731: IFFALSE 68735
// exit ;
68733: GO 68961
// x := GetX ( building ) ;
68735: LD_ADDR_VAR 0 4
68739: PUSH
68740: LD_VAR 0 2
68744: PPUSH
68745: CALL_OW 250
68749: ST_TO_ADDR
// y := GetY ( building ) ;
68750: LD_ADDR_VAR 0 6
68754: PUSH
68755: LD_VAR 0 2
68759: PPUSH
68760: CALL_OW 251
68764: ST_TO_ADDR
// d := GetDir ( building ) ;
68765: LD_ADDR_VAR 0 8
68769: PUSH
68770: LD_VAR 0 2
68774: PPUSH
68775: CALL_OW 254
68779: ST_TO_ADDR
// r := 4 ;
68780: LD_ADDR_VAR 0 9
68784: PUSH
68785: LD_INT 4
68787: ST_TO_ADDR
// for i := 1 to 5 do
68788: LD_ADDR_VAR 0 10
68792: PUSH
68793: DOUBLE
68794: LD_INT 1
68796: DEC
68797: ST_TO_ADDR
68798: LD_INT 5
68800: PUSH
68801: FOR_TO
68802: IFFALSE 68959
// begin _x := ShiftX ( x , d , r + i ) ;
68804: LD_ADDR_VAR 0 5
68808: PUSH
68809: LD_VAR 0 4
68813: PPUSH
68814: LD_VAR 0 8
68818: PPUSH
68819: LD_VAR 0 9
68823: PUSH
68824: LD_VAR 0 10
68828: PLUS
68829: PPUSH
68830: CALL_OW 272
68834: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
68835: LD_ADDR_VAR 0 7
68839: PUSH
68840: LD_VAR 0 6
68844: PPUSH
68845: LD_VAR 0 8
68849: PPUSH
68850: LD_VAR 0 9
68854: PUSH
68855: LD_VAR 0 10
68859: PLUS
68860: PPUSH
68861: CALL_OW 273
68865: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68866: LD_VAR 0 5
68870: PPUSH
68871: LD_VAR 0 7
68875: PPUSH
68876: CALL_OW 488
68880: PUSH
68881: LD_VAR 0 5
68885: PPUSH
68886: LD_VAR 0 7
68890: PPUSH
68891: CALL_OW 428
68895: PPUSH
68896: CALL_OW 247
68900: PUSH
68901: LD_INT 3
68903: PUSH
68904: LD_INT 2
68906: PUSH
68907: EMPTY
68908: LIST
68909: LIST
68910: IN
68911: NOT
68912: AND
68913: IFFALSE 68957
// begin ComMoveXY ( unit , _x , _y ) ;
68915: LD_VAR 0 1
68919: PPUSH
68920: LD_VAR 0 5
68924: PPUSH
68925: LD_VAR 0 7
68929: PPUSH
68930: CALL_OW 111
// result := [ _x , _y ] ;
68934: LD_ADDR_VAR 0 3
68938: PUSH
68939: LD_VAR 0 5
68943: PUSH
68944: LD_VAR 0 7
68948: PUSH
68949: EMPTY
68950: LIST
68951: LIST
68952: ST_TO_ADDR
// exit ;
68953: POP
68954: POP
68955: GO 68961
// end ; end ;
68957: GO 68801
68959: POP
68960: POP
// end ;
68961: LD_VAR 0 3
68965: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
68966: LD_INT 0
68968: PPUSH
68969: PPUSH
68970: PPUSH
// result := 0 ;
68971: LD_ADDR_VAR 0 3
68975: PUSH
68976: LD_INT 0
68978: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
68979: LD_VAR 0 1
68983: PUSH
68984: LD_INT 0
68986: LESS
68987: PUSH
68988: LD_VAR 0 1
68992: PUSH
68993: LD_INT 8
68995: GREATER
68996: OR
68997: PUSH
68998: LD_VAR 0 2
69002: PUSH
69003: LD_INT 0
69005: LESS
69006: OR
69007: PUSH
69008: LD_VAR 0 2
69012: PUSH
69013: LD_INT 8
69015: GREATER
69016: OR
69017: IFFALSE 69021
// exit ;
69019: GO 69096
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69021: LD_ADDR_VAR 0 4
69025: PUSH
69026: LD_INT 22
69028: PUSH
69029: LD_VAR 0 2
69033: PUSH
69034: EMPTY
69035: LIST
69036: LIST
69037: PPUSH
69038: CALL_OW 69
69042: PUSH
69043: FOR_IN
69044: IFFALSE 69094
// begin un := UnitShoot ( i ) ;
69046: LD_ADDR_VAR 0 5
69050: PUSH
69051: LD_VAR 0 4
69055: PPUSH
69056: CALL_OW 504
69060: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69061: LD_VAR 0 5
69065: PPUSH
69066: CALL_OW 255
69070: PUSH
69071: LD_VAR 0 1
69075: EQUAL
69076: IFFALSE 69092
// begin result := un ;
69078: LD_ADDR_VAR 0 3
69082: PUSH
69083: LD_VAR 0 5
69087: ST_TO_ADDR
// exit ;
69088: POP
69089: POP
69090: GO 69096
// end ; end ;
69092: GO 69043
69094: POP
69095: POP
// end ;
69096: LD_VAR 0 3
69100: RET
// export function GetCargoBay ( units ) ; begin
69101: LD_INT 0
69103: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69104: LD_ADDR_VAR 0 2
69108: PUSH
69109: LD_VAR 0 1
69113: PPUSH
69114: LD_INT 2
69116: PUSH
69117: LD_INT 34
69119: PUSH
69120: LD_INT 12
69122: PUSH
69123: EMPTY
69124: LIST
69125: LIST
69126: PUSH
69127: LD_INT 34
69129: PUSH
69130: LD_INT 51
69132: PUSH
69133: EMPTY
69134: LIST
69135: LIST
69136: PUSH
69137: LD_INT 34
69139: PUSH
69140: LD_INT 32
69142: PUSH
69143: EMPTY
69144: LIST
69145: LIST
69146: PUSH
69147: LD_INT 34
69149: PUSH
69150: LD_EXP 22
69154: PUSH
69155: EMPTY
69156: LIST
69157: LIST
69158: PUSH
69159: EMPTY
69160: LIST
69161: LIST
69162: LIST
69163: LIST
69164: LIST
69165: PPUSH
69166: CALL_OW 72
69170: ST_TO_ADDR
// end ;
69171: LD_VAR 0 2
69175: RET
// export function Negate ( value ) ; begin
69176: LD_INT 0
69178: PPUSH
// result := not value ;
69179: LD_ADDR_VAR 0 2
69183: PUSH
69184: LD_VAR 0 1
69188: NOT
69189: ST_TO_ADDR
// end ;
69190: LD_VAR 0 2
69194: RET
// export function Inc ( value ) ; begin
69195: LD_INT 0
69197: PPUSH
// result := value + 1 ;
69198: LD_ADDR_VAR 0 2
69202: PUSH
69203: LD_VAR 0 1
69207: PUSH
69208: LD_INT 1
69210: PLUS
69211: ST_TO_ADDR
// end ;
69212: LD_VAR 0 2
69216: RET
// export function Dec ( value ) ; begin
69217: LD_INT 0
69219: PPUSH
// result := value - 1 ;
69220: LD_ADDR_VAR 0 2
69224: PUSH
69225: LD_VAR 0 1
69229: PUSH
69230: LD_INT 1
69232: MINUS
69233: ST_TO_ADDR
// end ;
69234: LD_VAR 0 2
69238: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
69239: LD_INT 0
69241: PPUSH
69242: PPUSH
69243: PPUSH
69244: PPUSH
69245: PPUSH
69246: PPUSH
69247: PPUSH
69248: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
69249: LD_VAR 0 1
69253: PPUSH
69254: LD_VAR 0 2
69258: PPUSH
69259: CALL_OW 488
69263: NOT
69264: PUSH
69265: LD_VAR 0 3
69269: PPUSH
69270: LD_VAR 0 4
69274: PPUSH
69275: CALL_OW 488
69279: NOT
69280: OR
69281: IFFALSE 69294
// begin result := - 1 ;
69283: LD_ADDR_VAR 0 5
69287: PUSH
69288: LD_INT 1
69290: NEG
69291: ST_TO_ADDR
// exit ;
69292: GO 69529
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
69294: LD_ADDR_VAR 0 12
69298: PUSH
69299: LD_VAR 0 1
69303: PPUSH
69304: LD_VAR 0 2
69308: PPUSH
69309: LD_VAR 0 3
69313: PPUSH
69314: LD_VAR 0 4
69318: PPUSH
69319: CALL 68377 0 4
69323: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
69324: LD_ADDR_VAR 0 11
69328: PUSH
69329: LD_VAR 0 1
69333: PPUSH
69334: LD_VAR 0 2
69338: PPUSH
69339: LD_VAR 0 12
69343: PUSH
69344: LD_INT 1
69346: ARRAY
69347: PPUSH
69348: LD_VAR 0 12
69352: PUSH
69353: LD_INT 2
69355: ARRAY
69356: PPUSH
69357: CALL_OW 298
69361: ST_TO_ADDR
// distance := 9999 ;
69362: LD_ADDR_VAR 0 10
69366: PUSH
69367: LD_INT 9999
69369: ST_TO_ADDR
// for i := 0 to 5 do
69370: LD_ADDR_VAR 0 6
69374: PUSH
69375: DOUBLE
69376: LD_INT 0
69378: DEC
69379: ST_TO_ADDR
69380: LD_INT 5
69382: PUSH
69383: FOR_TO
69384: IFFALSE 69527
// begin _x := ShiftX ( x1 , i , centerDist ) ;
69386: LD_ADDR_VAR 0 7
69390: PUSH
69391: LD_VAR 0 1
69395: PPUSH
69396: LD_VAR 0 6
69400: PPUSH
69401: LD_VAR 0 11
69405: PPUSH
69406: CALL_OW 272
69410: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
69411: LD_ADDR_VAR 0 8
69415: PUSH
69416: LD_VAR 0 2
69420: PPUSH
69421: LD_VAR 0 6
69425: PPUSH
69426: LD_VAR 0 11
69430: PPUSH
69431: CALL_OW 273
69435: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
69436: LD_VAR 0 7
69440: PPUSH
69441: LD_VAR 0 8
69445: PPUSH
69446: CALL_OW 488
69450: NOT
69451: IFFALSE 69455
// continue ;
69453: GO 69383
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
69455: LD_ADDR_VAR 0 9
69459: PUSH
69460: LD_VAR 0 12
69464: PUSH
69465: LD_INT 1
69467: ARRAY
69468: PPUSH
69469: LD_VAR 0 12
69473: PUSH
69474: LD_INT 2
69476: ARRAY
69477: PPUSH
69478: LD_VAR 0 7
69482: PPUSH
69483: LD_VAR 0 8
69487: PPUSH
69488: CALL_OW 298
69492: ST_TO_ADDR
// if tmp < distance then
69493: LD_VAR 0 9
69497: PUSH
69498: LD_VAR 0 10
69502: LESS
69503: IFFALSE 69525
// begin result := i ;
69505: LD_ADDR_VAR 0 5
69509: PUSH
69510: LD_VAR 0 6
69514: ST_TO_ADDR
// distance := tmp ;
69515: LD_ADDR_VAR 0 10
69519: PUSH
69520: LD_VAR 0 9
69524: ST_TO_ADDR
// end ; end ;
69525: GO 69383
69527: POP
69528: POP
// end ;
69529: LD_VAR 0 5
69533: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69534: LD_INT 0
69536: PPUSH
69537: PPUSH
// if not driver or not IsInUnit ( driver ) then
69538: LD_VAR 0 1
69542: NOT
69543: PUSH
69544: LD_VAR 0 1
69548: PPUSH
69549: CALL_OW 310
69553: NOT
69554: OR
69555: IFFALSE 69559
// exit ;
69557: GO 69649
// vehicle := IsInUnit ( driver ) ;
69559: LD_ADDR_VAR 0 3
69563: PUSH
69564: LD_VAR 0 1
69568: PPUSH
69569: CALL_OW 310
69573: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69574: LD_VAR 0 1
69578: PPUSH
69579: LD_STRING \
69581: PUSH
69582: LD_INT 0
69584: PUSH
69585: LD_INT 0
69587: PUSH
69588: LD_INT 0
69590: PUSH
69591: LD_INT 0
69593: PUSH
69594: LD_INT 0
69596: PUSH
69597: LD_INT 0
69599: PUSH
69600: EMPTY
69601: LIST
69602: LIST
69603: LIST
69604: LIST
69605: LIST
69606: LIST
69607: LIST
69608: PUSH
69609: LD_STRING E
69611: PUSH
69612: LD_INT 0
69614: PUSH
69615: LD_INT 0
69617: PUSH
69618: LD_VAR 0 3
69622: PUSH
69623: LD_INT 0
69625: PUSH
69626: LD_INT 0
69628: PUSH
69629: LD_INT 0
69631: PUSH
69632: EMPTY
69633: LIST
69634: LIST
69635: LIST
69636: LIST
69637: LIST
69638: LIST
69639: LIST
69640: PUSH
69641: EMPTY
69642: LIST
69643: LIST
69644: PPUSH
69645: CALL_OW 446
// end ;
69649: LD_VAR 0 2
69653: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
69654: LD_INT 0
69656: PPUSH
69657: PPUSH
// if not driver or not IsInUnit ( driver ) then
69658: LD_VAR 0 1
69662: NOT
69663: PUSH
69664: LD_VAR 0 1
69668: PPUSH
69669: CALL_OW 310
69673: NOT
69674: OR
69675: IFFALSE 69679
// exit ;
69677: GO 69769
// vehicle := IsInUnit ( driver ) ;
69679: LD_ADDR_VAR 0 3
69683: PUSH
69684: LD_VAR 0 1
69688: PPUSH
69689: CALL_OW 310
69693: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
69694: LD_VAR 0 1
69698: PPUSH
69699: LD_STRING \
69701: PUSH
69702: LD_INT 0
69704: PUSH
69705: LD_INT 0
69707: PUSH
69708: LD_INT 0
69710: PUSH
69711: LD_INT 0
69713: PUSH
69714: LD_INT 0
69716: PUSH
69717: LD_INT 0
69719: PUSH
69720: EMPTY
69721: LIST
69722: LIST
69723: LIST
69724: LIST
69725: LIST
69726: LIST
69727: LIST
69728: PUSH
69729: LD_STRING E
69731: PUSH
69732: LD_INT 0
69734: PUSH
69735: LD_INT 0
69737: PUSH
69738: LD_VAR 0 3
69742: PUSH
69743: LD_INT 0
69745: PUSH
69746: LD_INT 0
69748: PUSH
69749: LD_INT 0
69751: PUSH
69752: EMPTY
69753: LIST
69754: LIST
69755: LIST
69756: LIST
69757: LIST
69758: LIST
69759: LIST
69760: PUSH
69761: EMPTY
69762: LIST
69763: LIST
69764: PPUSH
69765: CALL_OW 447
// end ;
69769: LD_VAR 0 2
69773: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
69774: LD_INT 0
69776: PPUSH
69777: PPUSH
69778: PPUSH
// tmp := [ ] ;
69779: LD_ADDR_VAR 0 5
69783: PUSH
69784: EMPTY
69785: ST_TO_ADDR
// for i in units do
69786: LD_ADDR_VAR 0 4
69790: PUSH
69791: LD_VAR 0 1
69795: PUSH
69796: FOR_IN
69797: IFFALSE 69835
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
69799: LD_ADDR_VAR 0 5
69803: PUSH
69804: LD_VAR 0 5
69808: PPUSH
69809: LD_VAR 0 5
69813: PUSH
69814: LD_INT 1
69816: PLUS
69817: PPUSH
69818: LD_VAR 0 4
69822: PPUSH
69823: CALL_OW 256
69827: PPUSH
69828: CALL_OW 2
69832: ST_TO_ADDR
69833: GO 69796
69835: POP
69836: POP
// if not tmp then
69837: LD_VAR 0 5
69841: NOT
69842: IFFALSE 69846
// exit ;
69844: GO 69894
// if asc then
69846: LD_VAR 0 2
69850: IFFALSE 69874
// result := SortListByListAsc ( units , tmp ) else
69852: LD_ADDR_VAR 0 3
69856: PUSH
69857: LD_VAR 0 1
69861: PPUSH
69862: LD_VAR 0 5
69866: PPUSH
69867: CALL_OW 76
69871: ST_TO_ADDR
69872: GO 69894
// result := SortListByListDesc ( units , tmp ) ;
69874: LD_ADDR_VAR 0 3
69878: PUSH
69879: LD_VAR 0 1
69883: PPUSH
69884: LD_VAR 0 5
69888: PPUSH
69889: CALL_OW 77
69893: ST_TO_ADDR
// end ;
69894: LD_VAR 0 3
69898: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
69899: LD_INT 0
69901: PPUSH
69902: PPUSH
// task := GetTaskList ( mech ) ;
69903: LD_ADDR_VAR 0 4
69907: PUSH
69908: LD_VAR 0 1
69912: PPUSH
69913: CALL_OW 437
69917: ST_TO_ADDR
// if not task then
69918: LD_VAR 0 4
69922: NOT
69923: IFFALSE 69927
// exit ;
69925: GO 69969
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
69927: LD_ADDR_VAR 0 3
69931: PUSH
69932: LD_VAR 0 4
69936: PUSH
69937: LD_INT 1
69939: ARRAY
69940: PUSH
69941: LD_INT 1
69943: ARRAY
69944: PUSH
69945: LD_STRING r
69947: EQUAL
69948: PUSH
69949: LD_VAR 0 4
69953: PUSH
69954: LD_INT 1
69956: ARRAY
69957: PUSH
69958: LD_INT 4
69960: ARRAY
69961: PUSH
69962: LD_VAR 0 2
69966: EQUAL
69967: AND
69968: ST_TO_ADDR
// end ;
69969: LD_VAR 0 3
69973: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
69974: LD_INT 0
69976: PPUSH
// SetDir ( unit , d ) ;
69977: LD_VAR 0 1
69981: PPUSH
69982: LD_VAR 0 4
69986: PPUSH
69987: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
69991: LD_VAR 0 1
69995: PPUSH
69996: LD_VAR 0 2
70000: PPUSH
70001: LD_VAR 0 3
70005: PPUSH
70006: LD_VAR 0 5
70010: PPUSH
70011: CALL_OW 48
// end ;
70015: LD_VAR 0 6
70019: RET
// export function ToNaturalNumber ( number ) ; begin
70020: LD_INT 0
70022: PPUSH
// result := number div 1 ;
70023: LD_ADDR_VAR 0 2
70027: PUSH
70028: LD_VAR 0 1
70032: PUSH
70033: LD_INT 1
70035: DIV
70036: ST_TO_ADDR
// if number < 0 then
70037: LD_VAR 0 1
70041: PUSH
70042: LD_INT 0
70044: LESS
70045: IFFALSE 70055
// result := 0 ;
70047: LD_ADDR_VAR 0 2
70051: PUSH
70052: LD_INT 0
70054: ST_TO_ADDR
// end ;
70055: LD_VAR 0 2
70059: RET
// export function SortByClass ( units , class ) ; var un ; begin
70060: LD_INT 0
70062: PPUSH
70063: PPUSH
// if not units or not class then
70064: LD_VAR 0 1
70068: NOT
70069: PUSH
70070: LD_VAR 0 2
70074: NOT
70075: OR
70076: IFFALSE 70080
// exit ;
70078: GO 70175
// result := [ ] ;
70080: LD_ADDR_VAR 0 3
70084: PUSH
70085: EMPTY
70086: ST_TO_ADDR
// for un in units do
70087: LD_ADDR_VAR 0 4
70091: PUSH
70092: LD_VAR 0 1
70096: PUSH
70097: FOR_IN
70098: IFFALSE 70173
// if GetClass ( un ) = class then
70100: LD_VAR 0 4
70104: PPUSH
70105: CALL_OW 257
70109: PUSH
70110: LD_VAR 0 2
70114: EQUAL
70115: IFFALSE 70142
// result := Insert ( result , 1 , un ) else
70117: LD_ADDR_VAR 0 3
70121: PUSH
70122: LD_VAR 0 3
70126: PPUSH
70127: LD_INT 1
70129: PPUSH
70130: LD_VAR 0 4
70134: PPUSH
70135: CALL_OW 2
70139: ST_TO_ADDR
70140: GO 70171
// result := Replace ( result , result + 1 , un ) ;
70142: LD_ADDR_VAR 0 3
70146: PUSH
70147: LD_VAR 0 3
70151: PPUSH
70152: LD_VAR 0 3
70156: PUSH
70157: LD_INT 1
70159: PLUS
70160: PPUSH
70161: LD_VAR 0 4
70165: PPUSH
70166: CALL_OW 1
70170: ST_TO_ADDR
70171: GO 70097
70173: POP
70174: POP
// end ;
70175: LD_VAR 0 3
70179: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
70180: LD_INT 0
70182: PPUSH
70183: PPUSH
70184: PPUSH
70185: PPUSH
70186: PPUSH
70187: PPUSH
70188: PPUSH
// result := [ ] ;
70189: LD_ADDR_VAR 0 4
70193: PUSH
70194: EMPTY
70195: ST_TO_ADDR
// if x - r < 0 then
70196: LD_VAR 0 1
70200: PUSH
70201: LD_VAR 0 3
70205: MINUS
70206: PUSH
70207: LD_INT 0
70209: LESS
70210: IFFALSE 70222
// min_x := 0 else
70212: LD_ADDR_VAR 0 8
70216: PUSH
70217: LD_INT 0
70219: ST_TO_ADDR
70220: GO 70238
// min_x := x - r ;
70222: LD_ADDR_VAR 0 8
70226: PUSH
70227: LD_VAR 0 1
70231: PUSH
70232: LD_VAR 0 3
70236: MINUS
70237: ST_TO_ADDR
// if y - r < 0 then
70238: LD_VAR 0 2
70242: PUSH
70243: LD_VAR 0 3
70247: MINUS
70248: PUSH
70249: LD_INT 0
70251: LESS
70252: IFFALSE 70264
// min_y := 0 else
70254: LD_ADDR_VAR 0 7
70258: PUSH
70259: LD_INT 0
70261: ST_TO_ADDR
70262: GO 70280
// min_y := y - r ;
70264: LD_ADDR_VAR 0 7
70268: PUSH
70269: LD_VAR 0 2
70273: PUSH
70274: LD_VAR 0 3
70278: MINUS
70279: ST_TO_ADDR
// max_x := x + r ;
70280: LD_ADDR_VAR 0 9
70284: PUSH
70285: LD_VAR 0 1
70289: PUSH
70290: LD_VAR 0 3
70294: PLUS
70295: ST_TO_ADDR
// max_y := y + r ;
70296: LD_ADDR_VAR 0 10
70300: PUSH
70301: LD_VAR 0 2
70305: PUSH
70306: LD_VAR 0 3
70310: PLUS
70311: ST_TO_ADDR
// for _x = min_x to max_x do
70312: LD_ADDR_VAR 0 5
70316: PUSH
70317: DOUBLE
70318: LD_VAR 0 8
70322: DEC
70323: ST_TO_ADDR
70324: LD_VAR 0 9
70328: PUSH
70329: FOR_TO
70330: IFFALSE 70431
// for _y = min_y to max_y do
70332: LD_ADDR_VAR 0 6
70336: PUSH
70337: DOUBLE
70338: LD_VAR 0 7
70342: DEC
70343: ST_TO_ADDR
70344: LD_VAR 0 10
70348: PUSH
70349: FOR_TO
70350: IFFALSE 70427
// begin if not ValidHex ( _x , _y ) then
70352: LD_VAR 0 5
70356: PPUSH
70357: LD_VAR 0 6
70361: PPUSH
70362: CALL_OW 488
70366: NOT
70367: IFFALSE 70371
// continue ;
70369: GO 70349
// if GetResourceTypeXY ( _x , _y ) then
70371: LD_VAR 0 5
70375: PPUSH
70376: LD_VAR 0 6
70380: PPUSH
70381: CALL_OW 283
70385: IFFALSE 70425
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
70387: LD_ADDR_VAR 0 4
70391: PUSH
70392: LD_VAR 0 4
70396: PPUSH
70397: LD_VAR 0 4
70401: PUSH
70402: LD_INT 1
70404: PLUS
70405: PPUSH
70406: LD_VAR 0 5
70410: PUSH
70411: LD_VAR 0 6
70415: PUSH
70416: EMPTY
70417: LIST
70418: LIST
70419: PPUSH
70420: CALL_OW 1
70424: ST_TO_ADDR
// end ;
70425: GO 70349
70427: POP
70428: POP
70429: GO 70329
70431: POP
70432: POP
// end ;
70433: LD_VAR 0 4
70437: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
70438: LD_INT 0
70440: PPUSH
70441: PPUSH
70442: PPUSH
70443: PPUSH
70444: PPUSH
70445: PPUSH
70446: PPUSH
70447: PPUSH
// if not units then
70448: LD_VAR 0 1
70452: NOT
70453: IFFALSE 70457
// exit ;
70455: GO 70968
// result := UnitFilter ( units , [ f_ok ] ) ;
70457: LD_ADDR_VAR 0 3
70461: PUSH
70462: LD_VAR 0 1
70466: PPUSH
70467: LD_INT 50
70469: PUSH
70470: EMPTY
70471: LIST
70472: PPUSH
70473: CALL_OW 72
70477: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
70478: LD_ADDR_VAR 0 8
70482: PUSH
70483: LD_VAR 0 1
70487: PUSH
70488: LD_INT 1
70490: ARRAY
70491: PPUSH
70492: CALL_OW 255
70496: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
70497: LD_ADDR_VAR 0 10
70501: PUSH
70502: LD_INT 29
70504: PUSH
70505: LD_EXP 25
70509: PUSH
70510: LD_INT 49
70512: PUSH
70513: EMPTY
70514: LIST
70515: LIST
70516: LIST
70517: ST_TO_ADDR
// if not result then
70518: LD_VAR 0 3
70522: NOT
70523: IFFALSE 70527
// exit ;
70525: GO 70968
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
70527: LD_ADDR_VAR 0 5
70531: PUSH
70532: LD_INT 81
70534: PUSH
70535: LD_VAR 0 8
70539: PUSH
70540: EMPTY
70541: LIST
70542: LIST
70543: PPUSH
70544: CALL_OW 69
70548: ST_TO_ADDR
// for i in result do
70549: LD_ADDR_VAR 0 4
70553: PUSH
70554: LD_VAR 0 3
70558: PUSH
70559: FOR_IN
70560: IFFALSE 70966
// begin tag := GetTag ( i ) + 1 ;
70562: LD_ADDR_VAR 0 9
70566: PUSH
70567: LD_VAR 0 4
70571: PPUSH
70572: CALL_OW 110
70576: PUSH
70577: LD_INT 1
70579: PLUS
70580: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
70581: LD_ADDR_VAR 0 7
70585: PUSH
70586: LD_VAR 0 4
70590: PPUSH
70591: CALL_OW 250
70595: PPUSH
70596: LD_VAR 0 4
70600: PPUSH
70601: CALL_OW 251
70605: PPUSH
70606: LD_INT 6
70608: PPUSH
70609: CALL 70180 0 3
70613: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
70614: LD_VAR 0 7
70618: PUSH
70619: LD_VAR 0 4
70623: PPUSH
70624: CALL_OW 264
70628: PUSH
70629: LD_VAR 0 10
70633: IN
70634: NOT
70635: AND
70636: IFFALSE 70675
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
70638: LD_VAR 0 4
70642: PPUSH
70643: LD_VAR 0 7
70647: PUSH
70648: LD_INT 1
70650: ARRAY
70651: PUSH
70652: LD_INT 1
70654: ARRAY
70655: PPUSH
70656: LD_VAR 0 7
70660: PUSH
70661: LD_INT 1
70663: ARRAY
70664: PUSH
70665: LD_INT 2
70667: ARRAY
70668: PPUSH
70669: CALL_OW 116
70673: GO 70964
// if path > tag then
70675: LD_VAR 0 2
70679: PUSH
70680: LD_VAR 0 9
70684: GREATER
70685: IFFALSE 70893
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
70687: LD_ADDR_VAR 0 6
70691: PUSH
70692: LD_VAR 0 5
70696: PPUSH
70697: LD_INT 91
70699: PUSH
70700: LD_VAR 0 4
70704: PUSH
70705: LD_INT 12
70707: PUSH
70708: EMPTY
70709: LIST
70710: LIST
70711: LIST
70712: PPUSH
70713: CALL_OW 72
70717: ST_TO_ADDR
// if nearEnemy then
70718: LD_VAR 0 6
70722: IFFALSE 70791
// begin if GetWeapon ( i ) = ru_time_lapser then
70724: LD_VAR 0 4
70728: PPUSH
70729: CALL_OW 264
70733: PUSH
70734: LD_INT 49
70736: EQUAL
70737: IFFALSE 70765
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
70739: LD_VAR 0 4
70743: PPUSH
70744: LD_VAR 0 6
70748: PPUSH
70749: LD_VAR 0 4
70753: PPUSH
70754: CALL_OW 74
70758: PPUSH
70759: CALL_OW 112
70763: GO 70789
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
70765: LD_VAR 0 4
70769: PPUSH
70770: LD_VAR 0 6
70774: PPUSH
70775: LD_VAR 0 4
70779: PPUSH
70780: CALL_OW 74
70784: PPUSH
70785: CALL_OW 115
// end else
70789: GO 70891
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
70791: LD_VAR 0 4
70795: PPUSH
70796: LD_VAR 0 2
70800: PUSH
70801: LD_VAR 0 9
70805: ARRAY
70806: PUSH
70807: LD_INT 1
70809: ARRAY
70810: PPUSH
70811: LD_VAR 0 2
70815: PUSH
70816: LD_VAR 0 9
70820: ARRAY
70821: PUSH
70822: LD_INT 2
70824: ARRAY
70825: PPUSH
70826: CALL_OW 297
70830: PUSH
70831: LD_INT 6
70833: GREATER
70834: IFFALSE 70877
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
70836: LD_VAR 0 4
70840: PPUSH
70841: LD_VAR 0 2
70845: PUSH
70846: LD_VAR 0 9
70850: ARRAY
70851: PUSH
70852: LD_INT 1
70854: ARRAY
70855: PPUSH
70856: LD_VAR 0 2
70860: PUSH
70861: LD_VAR 0 9
70865: ARRAY
70866: PUSH
70867: LD_INT 2
70869: ARRAY
70870: PPUSH
70871: CALL_OW 114
70875: GO 70891
// SetTag ( i , tag ) ;
70877: LD_VAR 0 4
70881: PPUSH
70882: LD_VAR 0 9
70886: PPUSH
70887: CALL_OW 109
// end else
70891: GO 70964
// if enemy then
70893: LD_VAR 0 5
70897: IFFALSE 70964
// begin if GetWeapon ( i ) = ru_time_lapser then
70899: LD_VAR 0 4
70903: PPUSH
70904: CALL_OW 264
70908: PUSH
70909: LD_INT 49
70911: EQUAL
70912: IFFALSE 70940
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
70914: LD_VAR 0 4
70918: PPUSH
70919: LD_VAR 0 5
70923: PPUSH
70924: LD_VAR 0 4
70928: PPUSH
70929: CALL_OW 74
70933: PPUSH
70934: CALL_OW 112
70938: GO 70964
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
70940: LD_VAR 0 4
70944: PPUSH
70945: LD_VAR 0 5
70949: PPUSH
70950: LD_VAR 0 4
70954: PPUSH
70955: CALL_OW 74
70959: PPUSH
70960: CALL_OW 115
// end ; end ;
70964: GO 70559
70966: POP
70967: POP
// end ;
70968: LD_VAR 0 3
70972: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
70973: LD_INT 0
70975: PPUSH
70976: PPUSH
70977: PPUSH
// if not unit or IsInUnit ( unit ) then
70978: LD_VAR 0 1
70982: NOT
70983: PUSH
70984: LD_VAR 0 1
70988: PPUSH
70989: CALL_OW 310
70993: OR
70994: IFFALSE 70998
// exit ;
70996: GO 71089
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
70998: LD_ADDR_VAR 0 4
71002: PUSH
71003: LD_VAR 0 1
71007: PPUSH
71008: CALL_OW 250
71012: PPUSH
71013: LD_VAR 0 2
71017: PPUSH
71018: LD_INT 1
71020: PPUSH
71021: CALL_OW 272
71025: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
71026: LD_ADDR_VAR 0 5
71030: PUSH
71031: LD_VAR 0 1
71035: PPUSH
71036: CALL_OW 251
71040: PPUSH
71041: LD_VAR 0 2
71045: PPUSH
71046: LD_INT 1
71048: PPUSH
71049: CALL_OW 273
71053: ST_TO_ADDR
// if ValidHex ( x , y ) then
71054: LD_VAR 0 4
71058: PPUSH
71059: LD_VAR 0 5
71063: PPUSH
71064: CALL_OW 488
71068: IFFALSE 71089
// ComTurnXY ( unit , x , y ) ;
71070: LD_VAR 0 1
71074: PPUSH
71075: LD_VAR 0 4
71079: PPUSH
71080: LD_VAR 0 5
71084: PPUSH
71085: CALL_OW 118
// end ;
71089: LD_VAR 0 3
71093: RET
// export function SeeUnits ( side , units ) ; var i ; begin
71094: LD_INT 0
71096: PPUSH
71097: PPUSH
// result := false ;
71098: LD_ADDR_VAR 0 3
71102: PUSH
71103: LD_INT 0
71105: ST_TO_ADDR
// if not units then
71106: LD_VAR 0 2
71110: NOT
71111: IFFALSE 71115
// exit ;
71113: GO 71160
// for i in units do
71115: LD_ADDR_VAR 0 4
71119: PUSH
71120: LD_VAR 0 2
71124: PUSH
71125: FOR_IN
71126: IFFALSE 71158
// if See ( side , i ) then
71128: LD_VAR 0 1
71132: PPUSH
71133: LD_VAR 0 4
71137: PPUSH
71138: CALL_OW 292
71142: IFFALSE 71156
// begin result := true ;
71144: LD_ADDR_VAR 0 3
71148: PUSH
71149: LD_INT 1
71151: ST_TO_ADDR
// exit ;
71152: POP
71153: POP
71154: GO 71160
// end ;
71156: GO 71125
71158: POP
71159: POP
// end ;
71160: LD_VAR 0 3
71164: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
71165: LD_INT 0
71167: PPUSH
71168: PPUSH
71169: PPUSH
71170: PPUSH
// if not unit or not points then
71171: LD_VAR 0 1
71175: NOT
71176: PUSH
71177: LD_VAR 0 2
71181: NOT
71182: OR
71183: IFFALSE 71187
// exit ;
71185: GO 71277
// dist := 99999 ;
71187: LD_ADDR_VAR 0 5
71191: PUSH
71192: LD_INT 99999
71194: ST_TO_ADDR
// for i in points do
71195: LD_ADDR_VAR 0 4
71199: PUSH
71200: LD_VAR 0 2
71204: PUSH
71205: FOR_IN
71206: IFFALSE 71275
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
71208: LD_ADDR_VAR 0 6
71212: PUSH
71213: LD_VAR 0 1
71217: PPUSH
71218: LD_VAR 0 4
71222: PUSH
71223: LD_INT 1
71225: ARRAY
71226: PPUSH
71227: LD_VAR 0 4
71231: PUSH
71232: LD_INT 2
71234: ARRAY
71235: PPUSH
71236: CALL_OW 297
71240: ST_TO_ADDR
// if tmpDist < dist then
71241: LD_VAR 0 6
71245: PUSH
71246: LD_VAR 0 5
71250: LESS
71251: IFFALSE 71273
// begin result := i ;
71253: LD_ADDR_VAR 0 3
71257: PUSH
71258: LD_VAR 0 4
71262: ST_TO_ADDR
// dist := tmpDist ;
71263: LD_ADDR_VAR 0 5
71267: PUSH
71268: LD_VAR 0 6
71272: ST_TO_ADDR
// end ; end ;
71273: GO 71205
71275: POP
71276: POP
// end ;
71277: LD_VAR 0 3
71281: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
71282: LD_INT 0
71284: PPUSH
// uc_side := side ;
71285: LD_ADDR_OWVAR 20
71289: PUSH
71290: LD_VAR 0 1
71294: ST_TO_ADDR
// uc_nation := 3 ;
71295: LD_ADDR_OWVAR 21
71299: PUSH
71300: LD_INT 3
71302: ST_TO_ADDR
// vc_chassis := 25 ;
71303: LD_ADDR_OWVAR 37
71307: PUSH
71308: LD_INT 25
71310: ST_TO_ADDR
// vc_engine := engine_siberite ;
71311: LD_ADDR_OWVAR 39
71315: PUSH
71316: LD_INT 3
71318: ST_TO_ADDR
// vc_control := control_computer ;
71319: LD_ADDR_OWVAR 38
71323: PUSH
71324: LD_INT 3
71326: ST_TO_ADDR
// vc_weapon := 59 ;
71327: LD_ADDR_OWVAR 40
71331: PUSH
71332: LD_INT 59
71334: ST_TO_ADDR
// result := CreateVehicle ;
71335: LD_ADDR_VAR 0 5
71339: PUSH
71340: CALL_OW 45
71344: ST_TO_ADDR
// SetDir ( result , d ) ;
71345: LD_VAR 0 5
71349: PPUSH
71350: LD_VAR 0 4
71354: PPUSH
71355: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
71359: LD_VAR 0 5
71363: PPUSH
71364: LD_VAR 0 2
71368: PPUSH
71369: LD_VAR 0 3
71373: PPUSH
71374: LD_INT 0
71376: PPUSH
71377: CALL_OW 48
// end ;
71381: LD_VAR 0 5
71385: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
71386: LD_INT 0
71388: PPUSH
71389: PPUSH
71390: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
71391: LD_ADDR_VAR 0 2
71395: PUSH
71396: LD_INT 0
71398: PUSH
71399: LD_INT 0
71401: PUSH
71402: LD_INT 0
71404: PUSH
71405: LD_INT 0
71407: PUSH
71408: EMPTY
71409: LIST
71410: LIST
71411: LIST
71412: LIST
71413: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
71414: LD_VAR 0 1
71418: NOT
71419: PUSH
71420: LD_VAR 0 1
71424: PPUSH
71425: CALL_OW 264
71429: PUSH
71430: LD_INT 12
71432: PUSH
71433: LD_INT 51
71435: PUSH
71436: LD_INT 32
71438: PUSH
71439: LD_EXP 22
71443: PUSH
71444: EMPTY
71445: LIST
71446: LIST
71447: LIST
71448: LIST
71449: IN
71450: NOT
71451: OR
71452: IFFALSE 71456
// exit ;
71454: GO 71554
// for i := 1 to 3 do
71456: LD_ADDR_VAR 0 3
71460: PUSH
71461: DOUBLE
71462: LD_INT 1
71464: DEC
71465: ST_TO_ADDR
71466: LD_INT 3
71468: PUSH
71469: FOR_TO
71470: IFFALSE 71552
// begin tmp := GetCargo ( cargo , i ) ;
71472: LD_ADDR_VAR 0 4
71476: PUSH
71477: LD_VAR 0 1
71481: PPUSH
71482: LD_VAR 0 3
71486: PPUSH
71487: CALL_OW 289
71491: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
71492: LD_ADDR_VAR 0 2
71496: PUSH
71497: LD_VAR 0 2
71501: PPUSH
71502: LD_VAR 0 3
71506: PPUSH
71507: LD_VAR 0 4
71511: PPUSH
71512: CALL_OW 1
71516: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
71517: LD_ADDR_VAR 0 2
71521: PUSH
71522: LD_VAR 0 2
71526: PPUSH
71527: LD_INT 4
71529: PPUSH
71530: LD_VAR 0 2
71534: PUSH
71535: LD_INT 4
71537: ARRAY
71538: PUSH
71539: LD_VAR 0 4
71543: PLUS
71544: PPUSH
71545: CALL_OW 1
71549: ST_TO_ADDR
// end ;
71550: GO 71469
71552: POP
71553: POP
// end ; end_of_file
71554: LD_VAR 0 2
71558: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
71559: LD_VAR 0 1
71563: PUSH
71564: LD_INT 200
71566: DOUBLE
71567: GREATEREQUAL
71568: IFFALSE 71576
71570: LD_INT 299
71572: DOUBLE
71573: LESSEQUAL
71574: IFTRUE 71578
71576: GO 71610
71578: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
71579: LD_VAR 0 1
71583: PPUSH
71584: LD_VAR 0 2
71588: PPUSH
71589: LD_VAR 0 3
71593: PPUSH
71594: LD_VAR 0 4
71598: PPUSH
71599: LD_VAR 0 5
71603: PPUSH
71604: CALL 26899 0 5
71608: GO 71687
71610: LD_INT 300
71612: DOUBLE
71613: GREATEREQUAL
71614: IFFALSE 71622
71616: LD_INT 399
71618: DOUBLE
71619: LESSEQUAL
71620: IFTRUE 71624
71622: GO 71686
71624: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
71625: LD_VAR 0 1
71629: PPUSH
71630: LD_VAR 0 2
71634: PPUSH
71635: LD_VAR 0 3
71639: PPUSH
71640: LD_VAR 0 4
71644: PPUSH
71645: LD_VAR 0 5
71649: PPUSH
71650: LD_VAR 0 6
71654: PPUSH
71655: LD_VAR 0 7
71659: PPUSH
71660: LD_VAR 0 8
71664: PPUSH
71665: LD_VAR 0 9
71669: PPUSH
71670: LD_VAR 0 10
71674: PPUSH
71675: LD_VAR 0 11
71679: PPUSH
71680: CALL 24541 0 11
71684: GO 71687
71686: POP
// end ;
71687: PPOPN 11
71689: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
71690: LD_VAR 0 1
71694: PPUSH
71695: LD_VAR 0 2
71699: PPUSH
71700: LD_VAR 0 3
71704: PPUSH
71705: LD_VAR 0 4
71709: PPUSH
71710: LD_VAR 0 5
71714: PPUSH
71715: CALL 26635 0 5
// end ; end_of_file
71719: PPOPN 5
71721: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
71722: LD_VAR 0 1
71726: PPUSH
71727: LD_VAR 0 2
71731: PPUSH
71732: LD_VAR 0 3
71736: PPUSH
71737: LD_VAR 0 4
71741: PPUSH
71742: LD_VAR 0 5
71746: PPUSH
71747: LD_VAR 0 6
71751: PPUSH
71752: CALL 12234 0 6
// end ;
71756: PPOPN 6
71758: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
71759: CALL 12209 0 0
// end ;
71763: PPOPN 1
71765: END
