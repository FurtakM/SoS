// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// Init ;
   8: CALL 44 0 0
// DebugMode ;
  12: CALL 265 0 0
// AnimateTrees ( true ) ;
  16: LD_INT 1
  18: PPUSH
  19: CALL_OW 573
// CreateNature ;
  23: CALL 1543 0 0
// PrepareRussians ;
  27: CALL 4553 0 0
// PrepareAmericans ;
  31: CALL 3423 0 0
// Action ;
  35: CALL 8457 0 0
// SaveForQuickRestart ;
  39: CALL_OW 22
// end ;
  43: END
// export debug ; export mission_prev_prefix , mission_prefix ; export buildings_counter , time_to_end , can_end , must_end , kill_counter ; function Init ; begin
  44: LD_INT 0
  46: PPUSH
// debug := false ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// mission_prefix := 07c_ ;
  55: LD_ADDR_EXP 3
  59: PUSH
  60: LD_STRING 07c_
  62: ST_TO_ADDR
// mission_prev_prefix := 07_ ;
  63: LD_ADDR_EXP 2
  67: PUSH
  68: LD_STRING 07_
  70: ST_TO_ADDR
// buildings_counter := 0 ;
  71: LD_ADDR_EXP 4
  75: PUSH
  76: LD_INT 0
  78: ST_TO_ADDR
// time_to_end := [ [ 32 32$00 , 29 29$00 , 26 26$00 , 25 25$00 ] [ Difficulty ] , [ 38 38$00 , 35 35$00 , 32 32$00 , 31 31$00 ] [ Difficulty ] , [ 44 44$00 , 41 41$00 , 38 38$00 , 37 37$00 ] [ Difficulty ] ] ;
  79: LD_ADDR_EXP 5
  83: PUSH
  84: LD_INT 67200
  86: PUSH
  87: LD_INT 60900
  89: PUSH
  90: LD_INT 54600
  92: PUSH
  93: LD_INT 52500
  95: PUSH
  96: EMPTY
  97: LIST
  98: LIST
  99: LIST
 100: LIST
 101: PUSH
 102: LD_OWVAR 67
 106: ARRAY
 107: PUSH
 108: LD_INT 79800
 110: PUSH
 111: LD_INT 73500
 113: PUSH
 114: LD_INT 67200
 116: PUSH
 117: LD_INT 65100
 119: PUSH
 120: EMPTY
 121: LIST
 122: LIST
 123: LIST
 124: LIST
 125: PUSH
 126: LD_OWVAR 67
 130: ARRAY
 131: PUSH
 132: LD_INT 92400
 134: PUSH
 135: LD_INT 86100
 137: PUSH
 138: LD_INT 79800
 140: PUSH
 141: LD_INT 77700
 143: PUSH
 144: EMPTY
 145: LIST
 146: LIST
 147: LIST
 148: LIST
 149: PUSH
 150: LD_OWVAR 67
 154: ARRAY
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: LIST
 160: ST_TO_ADDR
// can_end := false ;
 161: LD_ADDR_EXP 6
 165: PUSH
 166: LD_INT 0
 168: ST_TO_ADDR
// must_end := false ;
 169: LD_ADDR_EXP 7
 173: PUSH
 174: LD_INT 0
 176: ST_TO_ADDR
// kill_counter := 0 ;
 177: LD_ADDR_EXP 8
 181: PUSH
 182: LD_INT 0
 184: ST_TO_ADDR
// end ;
 185: LD_VAR 0 1
 189: RET
// every 0 0$01 trigger not debug do
 190: LD_EXP 1
 194: NOT
 195: IFFALSE 264
 197: GO 199
 199: DISABLE
// begin enable ;
 200: ENABLE
// if not must_end then
 201: LD_EXP 7
 205: NOT
 206: IFFALSE 227
// display_strings := [ #Am07-1 , tick ] else
 208: LD_ADDR_OWVAR 47
 212: PUSH
 213: LD_STRING #Am07-1
 215: PUSH
 216: LD_OWVAR 1
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: ST_TO_ADDR
 225: GO 264
// display_strings := [ #Am07-1 , tick , #Am07-2 , time_to_end [ 3 ] - tick ] ;
 227: LD_ADDR_OWVAR 47
 231: PUSH
 232: LD_STRING #Am07-1
 234: PUSH
 235: LD_OWVAR 1
 239: PUSH
 240: LD_STRING #Am07-2
 242: PUSH
 243: LD_EXP 5
 247: PUSH
 248: LD_INT 3
 250: ARRAY
 251: PUSH
 252: LD_OWVAR 1
 256: MINUS
 257: PUSH
 258: EMPTY
 259: LIST
 260: LIST
 261: LIST
 262: LIST
 263: ST_TO_ADDR
// end ;
 264: END
// function DebugMode ; var i ; begin
 265: LD_INT 0
 267: PPUSH
 268: PPUSH
// if not debug then
 269: LD_EXP 1
 273: NOT
 274: IFFALSE 278
// exit ;
 276: GO 285
// FogOff ( 1 ) ;
 278: LD_INT 1
 280: PPUSH
 281: CALL_OW 344
// end ;
 285: LD_VAR 0 1
 289: RET
// every 3 trigger debug do var i , filter ;
 290: LD_EXP 1
 294: IFFALSE 383
 296: GO 298
 298: DISABLE
 299: LD_INT 0
 301: PPUSH
 302: PPUSH
// begin enable ;
 303: ENABLE
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_lives , 500 ] ] ] ) ;
 304: LD_ADDR_VAR 0 2
 308: PUSH
 309: LD_INT 22
 311: PUSH
 312: LD_INT 1
 314: PUSH
 315: EMPTY
 316: LIST
 317: LIST
 318: PUSH
 319: LD_INT 3
 321: PUSH
 322: LD_INT 24
 324: PUSH
 325: LD_INT 500
 327: PUSH
 328: EMPTY
 329: LIST
 330: LIST
 331: PUSH
 332: EMPTY
 333: LIST
 334: LIST
 335: PUSH
 336: EMPTY
 337: LIST
 338: LIST
 339: PPUSH
 340: CALL_OW 69
 344: ST_TO_ADDR
// if not filter then
 345: LD_VAR 0 2
 349: NOT
 350: IFFALSE 354
// exit ;
 352: GO 383
// for i in filter do
 354: LD_ADDR_VAR 0 1
 358: PUSH
 359: LD_VAR 0 2
 363: PUSH
 364: FOR_IN
 365: IFFALSE 381
// SetLives ( i , 1000 ) ;
 367: LD_VAR 0 1
 371: PPUSH
 372: LD_INT 1000
 374: PPUSH
 375: CALL_OW 234
 379: GO 364
 381: POP
 382: POP
// end ;
 383: PPOPN 2
 385: END
// every 0 0$1 trigger kill_counter >= 20 do
 386: LD_EXP 8
 390: PUSH
 391: LD_INT 20
 393: GREATEREQUAL
 394: IFFALSE 406
 396: GO 398
 398: DISABLE
// SetAchievement ( ACH_HITMAN ) ;
 399: LD_STRING ACH_HITMAN
 401: PPUSH
 402: CALL_OW 543
 406: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) >= 3 do
 407: LD_INT 22
 409: PUSH
 410: LD_INT 1
 412: PUSH
 413: EMPTY
 414: LIST
 415: LIST
 416: PUSH
 417: LD_INT 23
 419: PUSH
 420: LD_INT 3
 422: PUSH
 423: EMPTY
 424: LIST
 425: LIST
 426: PUSH
 427: LD_INT 21
 429: PUSH
 430: LD_INT 2
 432: PUSH
 433: EMPTY
 434: LIST
 435: LIST
 436: PUSH
 437: EMPTY
 438: LIST
 439: LIST
 440: LIST
 441: PPUSH
 442: CALL_OW 69
 446: PUSH
 447: LD_INT 3
 449: GREATEREQUAL
 450: IFFALSE 462
 452: GO 454
 454: DISABLE
// SetAchievement ( ACH_TANKACE ) ;
 455: LD_STRING ACH_TANKACE
 457: PPUSH
 458: CALL_OW 543
 462: END
// every 0 0$1 trigger FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) = 0 do
 463: LD_INT 2
 465: PUSH
 466: LD_INT 30
 468: PUSH
 469: LD_INT 0
 471: PUSH
 472: EMPTY
 473: LIST
 474: LIST
 475: PUSH
 476: LD_INT 30
 478: PUSH
 479: LD_INT 1
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: PUSH
 486: EMPTY
 487: LIST
 488: LIST
 489: LIST
 490: PPUSH
 491: CALL_OW 69
 495: PUSH
 496: LD_INT 0
 498: EQUAL
 499: IFFALSE 511
 501: GO 503
 503: DISABLE
// SetAchievement ( ACH_COMMANDO ) ; end_of_file
 504: LD_STRING ACH_COMMANDO
 506: PPUSH
 507: CALL_OW 543
 511: END
// export function PrepareTank ( side , nation , chassis , engine , control , weapon , fuel ) ; begin
 512: LD_INT 0
 514: PPUSH
// uc_side := side ;
 515: LD_ADDR_OWVAR 20
 519: PUSH
 520: LD_VAR 0 1
 524: ST_TO_ADDR
// uc_nation := nation ;
 525: LD_ADDR_OWVAR 21
 529: PUSH
 530: LD_VAR 0 2
 534: ST_TO_ADDR
// vc_chassis := chassis ;
 535: LD_ADDR_OWVAR 37
 539: PUSH
 540: LD_VAR 0 3
 544: ST_TO_ADDR
// vc_engine := engine ;
 545: LD_ADDR_OWVAR 39
 549: PUSH
 550: LD_VAR 0 4
 554: ST_TO_ADDR
// vc_control := control ;
 555: LD_ADDR_OWVAR 38
 559: PUSH
 560: LD_VAR 0 5
 564: ST_TO_ADDR
// vc_weapon := weapon ;
 565: LD_ADDR_OWVAR 40
 569: PUSH
 570: LD_VAR 0 6
 574: ST_TO_ADDR
// vc_fuel_battery := fuel ;
 575: LD_ADDR_OWVAR 41
 579: PUSH
 580: LD_VAR 0 7
 584: ST_TO_ADDR
// result := CreateVehicle ;
 585: LD_ADDR_VAR 0 8
 589: PUSH
 590: CALL_OW 45
 594: ST_TO_ADDR
// end ;
 595: LD_VAR 0 8
 599: RET
// export function GetRandom ( sex ) ; var i , filter ; begin
 600: LD_INT 0
 602: PPUSH
 603: PPUSH
 604: PPUSH
// filter := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] ;
 605: LD_ADDR_VAR 0 4
 609: PUSH
 610: LD_INT 22
 612: PUSH
 613: LD_INT 1
 615: PUSH
 616: EMPTY
 617: LIST
 618: LIST
 619: PUSH
 620: LD_INT 21
 622: PUSH
 623: LD_INT 1
 625: PUSH
 626: EMPTY
 627: LIST
 628: LIST
 629: PUSH
 630: LD_INT 50
 632: PUSH
 633: EMPTY
 634: LIST
 635: PUSH
 636: EMPTY
 637: LIST
 638: LIST
 639: LIST
 640: PPUSH
 641: CALL_OW 69
 645: PUSH
 646: LD_EXP 9
 650: PUSH
 651: LD_EXP 10
 655: PUSH
 656: LD_EXP 11
 660: PUSH
 661: LD_EXP 12
 665: PUSH
 666: LD_EXP 13
 670: PUSH
 671: LD_EXP 14
 675: PUSH
 676: LD_EXP 15
 680: PUSH
 681: LD_EXP 16
 685: PUSH
 686: LD_EXP 18
 690: PUSH
 691: LD_EXP 17
 695: PUSH
 696: EMPTY
 697: LIST
 698: LIST
 699: LIST
 700: LIST
 701: LIST
 702: LIST
 703: LIST
 704: LIST
 705: LIST
 706: LIST
 707: DIFF
 708: ST_TO_ADDR
// if not filter then
 709: LD_VAR 0 4
 713: NOT
 714: IFFALSE 718
// exit ;
 716: GO 745
// result := UnitFilter ( filter , [ f_sex , sex ] ) ;
 718: LD_ADDR_VAR 0 2
 722: PUSH
 723: LD_VAR 0 4
 727: PPUSH
 728: LD_INT 26
 730: PUSH
 731: LD_VAR 0 1
 735: PUSH
 736: EMPTY
 737: LIST
 738: LIST
 739: PPUSH
 740: CALL_OW 72
 744: ST_TO_ADDR
// end ;
 745: LD_VAR 0 2
 749: RET
// export function SayX ( units , ident ) ; var i ; begin
 750: LD_INT 0
 752: PPUSH
 753: PPUSH
// result := false ;
 754: LD_ADDR_VAR 0 3
 758: PUSH
 759: LD_INT 0
 761: ST_TO_ADDR
// if not units then
 762: LD_VAR 0 1
 766: NOT
 767: IFFALSE 771
// exit ;
 769: GO 825
// for i in units do
 771: LD_ADDR_VAR 0 4
 775: PUSH
 776: LD_VAR 0 1
 780: PUSH
 781: FOR_IN
 782: IFFALSE 823
// if IsOk ( i ) then
 784: LD_VAR 0 4
 788: PPUSH
 789: CALL_OW 302
 793: IFFALSE 821
// begin Say ( i , ident ) ;
 795: LD_VAR 0 4
 799: PPUSH
 800: LD_VAR 0 2
 804: PPUSH
 805: CALL_OW 88
// result := i ;
 809: LD_ADDR_VAR 0 3
 813: PUSH
 814: LD_VAR 0 4
 818: ST_TO_ADDR
// break ;
 819: GO 823
// end ;
 821: GO 781
 823: POP
 824: POP
// end ;
 825: LD_VAR 0 3
 829: RET
// export function GoToAnotherTower ( un , b , x , y ) ; var i , filter , barracks , side ; begin
 830: LD_INT 0
 832: PPUSH
 833: PPUSH
 834: PPUSH
 835: PPUSH
 836: PPUSH
// if not un or not IsOk ( un ) then
 837: LD_VAR 0 1
 841: NOT
 842: PUSH
 843: LD_VAR 0 1
 847: PPUSH
 848: CALL_OW 302
 852: NOT
 853: OR
 854: IFFALSE 858
// exit ;
 856: GO 1148
// side := GetSide ( un ) ;
 858: LD_ADDR_VAR 0 9
 862: PUSH
 863: LD_VAR 0 1
 867: PPUSH
 868: CALL_OW 255
 872: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_ok ] , [ f_empty ] ] ) diff b ;
 873: LD_ADDR_VAR 0 7
 877: PUSH
 878: LD_INT 22
 880: PUSH
 881: LD_VAR 0 9
 885: PUSH
 886: EMPTY
 887: LIST
 888: LIST
 889: PUSH
 890: LD_INT 30
 892: PUSH
 893: LD_INT 32
 895: PUSH
 896: EMPTY
 897: LIST
 898: LIST
 899: PUSH
 900: LD_INT 50
 902: PUSH
 903: EMPTY
 904: LIST
 905: PUSH
 906: LD_INT 58
 908: PUSH
 909: EMPTY
 910: LIST
 911: PUSH
 912: EMPTY
 913: LIST
 914: LIST
 915: LIST
 916: LIST
 917: PPUSH
 918: CALL_OW 69
 922: PUSH
 923: LD_VAR 0 2
 927: DIFF
 928: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_barracks ] ] ) ;
 929: LD_ADDR_VAR 0 8
 933: PUSH
 934: LD_INT 22
 936: PUSH
 937: LD_VAR 0 9
 941: PUSH
 942: EMPTY
 943: LIST
 944: LIST
 945: PUSH
 946: LD_INT 30
 948: PUSH
 949: LD_INT 5
 951: PUSH
 952: EMPTY
 953: LIST
 954: LIST
 955: PUSH
 956: EMPTY
 957: LIST
 958: LIST
 959: PPUSH
 960: CALL_OW 69
 964: ST_TO_ADDR
// if not filter then
 965: LD_VAR 0 7
 969: NOT
 970: IFFALSE 1060
// begin ComMoveXY ( un , x , y ) ;
 972: LD_VAR 0 1
 976: PPUSH
 977: LD_VAR 0 3
 981: PPUSH
 982: LD_VAR 0 4
 986: PPUSH
 987: CALL_OW 111
// if barracks then
 991: LD_VAR 0 8
 995: IFFALSE 1058
// for i in barracks do
 997: LD_ADDR_VAR 0 6
1001: PUSH
1002: LD_VAR 0 8
1006: PUSH
1007: FOR_IN
1008: IFFALSE 1056
// begin if UnitsInside ( i ) < 6 and IsOk ( i ) then
1010: LD_VAR 0 6
1014: PPUSH
1015: CALL_OW 313
1019: PUSH
1020: LD_INT 6
1022: LESS
1023: PUSH
1024: LD_VAR 0 6
1028: PPUSH
1029: CALL_OW 302
1033: AND
1034: IFFALSE 1054
// begin AddComEnterUnit ( un , i ) ;
1036: LD_VAR 0 1
1040: PPUSH
1041: LD_VAR 0 6
1045: PPUSH
1046: CALL_OW 180
// exit ;
1050: POP
1051: POP
1052: GO 1148
// end ; end ;
1054: GO 1007
1056: POP
1057: POP
// end else
1058: GO 1148
// begin filter := SortByDistanceUnit ( un , filter , true , true ) ;
1060: LD_ADDR_VAR 0 7
1064: PUSH
1065: LD_VAR 0 1
1069: PPUSH
1070: LD_VAR 0 7
1074: PPUSH
1075: LD_INT 1
1077: PPUSH
1078: LD_INT 1
1080: PPUSH
1081: CALL 35356 0 4
1085: ST_TO_ADDR
// for i in filter do
1086: LD_ADDR_VAR 0 6
1090: PUSH
1091: LD_VAR 0 7
1095: PUSH
1096: FOR_IN
1097: IFFALSE 1146
// if GetTag ( i ) <> 7 then
1099: LD_VAR 0 6
1103: PPUSH
1104: CALL_OW 110
1108: PUSH
1109: LD_INT 7
1111: NONEQUAL
1112: IFFALSE 1144
// begin ComEnterUnit ( un , i ) ;
1114: LD_VAR 0 1
1118: PPUSH
1119: LD_VAR 0 6
1123: PPUSH
1124: CALL_OW 120
// SetTag ( i , 7 ) ;
1128: LD_VAR 0 6
1132: PPUSH
1133: LD_INT 7
1135: PPUSH
1136: CALL_OW 109
// exit ;
1140: POP
1141: POP
1142: GO 1148
// end ;
1144: GO 1096
1146: POP
1147: POP
// end ; end ;
1148: LD_VAR 0 5
1152: RET
// export function BaseNeedEnergy ( base ) ; var i , tmp ; begin
1153: LD_INT 0
1155: PPUSH
1156: PPUSH
1157: PPUSH
// if not base then
1158: LD_VAR 0 1
1162: NOT
1163: IFFALSE 1167
// exit ;
1165: GO 1225
// tmp := GetEnergy ( GetBase ( base ) ) ;
1167: LD_ADDR_VAR 0 4
1171: PUSH
1172: LD_VAR 0 1
1176: PPUSH
1177: CALL_OW 274
1181: PPUSH
1182: CALL_OW 278
1186: ST_TO_ADDR
// if tmp [ 1 ] > tmp [ 4 ] then
1187: LD_VAR 0 4
1191: PUSH
1192: LD_INT 1
1194: ARRAY
1195: PUSH
1196: LD_VAR 0 4
1200: PUSH
1201: LD_INT 4
1203: ARRAY
1204: GREATER
1205: IFFALSE 1217
// result := true else
1207: LD_ADDR_VAR 0 2
1211: PUSH
1212: LD_INT 1
1214: ST_TO_ADDR
1215: GO 1225
// result := false ;
1217: LD_ADDR_VAR 0 2
1221: PUSH
1222: LD_INT 0
1224: ST_TO_ADDR
// end ;
1225: LD_VAR 0 2
1229: RET
// export function FilterPeople ( side ) ; begin
1230: LD_INT 0
1232: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_human ] ] ) ;
1233: LD_ADDR_VAR 0 2
1237: PUSH
1238: LD_INT 22
1240: PUSH
1241: LD_VAR 0 1
1245: PUSH
1246: EMPTY
1247: LIST
1248: LIST
1249: PUSH
1250: LD_INT 21
1252: PUSH
1253: LD_INT 1
1255: PUSH
1256: EMPTY
1257: LIST
1258: LIST
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: PPUSH
1264: CALL_OW 69
1268: ST_TO_ADDR
// end ;
1269: LD_VAR 0 2
1273: RET
// export function FilterDrivers ( side ) ; begin
1274: LD_INT 0
1276: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_outside ] ] ] ) ;
1277: LD_ADDR_VAR 0 2
1281: PUSH
1282: LD_INT 22
1284: PUSH
1285: LD_VAR 0 1
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: PUSH
1294: LD_INT 3
1296: PUSH
1297: LD_INT 56
1299: PUSH
1300: EMPTY
1301: LIST
1302: PUSH
1303: EMPTY
1304: LIST
1305: LIST
1306: PUSH
1307: EMPTY
1308: LIST
1309: LIST
1310: PPUSH
1311: CALL_OW 69
1315: ST_TO_ADDR
// end ;
1316: LD_VAR 0 2
1320: RET
// export function FilterPeopleArea ( side , area ) ; begin
1321: LD_INT 0
1323: PPUSH
// result := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) ;
1324: LD_ADDR_VAR 0 3
1328: PUSH
1329: LD_VAR 0 2
1333: PPUSH
1334: LD_INT 22
1336: PUSH
1337: LD_INT 1
1339: PUSH
1340: EMPTY
1341: LIST
1342: LIST
1343: PUSH
1344: LD_INT 21
1346: PUSH
1347: LD_INT 1
1349: PUSH
1350: EMPTY
1351: LIST
1352: LIST
1353: PUSH
1354: EMPTY
1355: LIST
1356: LIST
1357: PPUSH
1358: CALL_OW 70
1362: ST_TO_ADDR
// end ;
1363: LD_VAR 0 3
1367: RET
// export function FilterDriversArea ( side , area ) ; var i , tmp ; begin
1368: LD_INT 0
1370: PPUSH
1371: PPUSH
1372: PPUSH
// tmp := FilterUnitsInArea ( area , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
1373: LD_ADDR_VAR 0 5
1377: PUSH
1378: LD_VAR 0 2
1382: PPUSH
1383: LD_INT 22
1385: PUSH
1386: LD_INT 1
1388: PUSH
1389: EMPTY
1390: LIST
1391: LIST
1392: PUSH
1393: LD_INT 21
1395: PUSH
1396: LD_INT 2
1398: PUSH
1399: EMPTY
1400: LIST
1401: LIST
1402: PUSH
1403: LD_INT 3
1405: PUSH
1406: LD_INT 58
1408: PUSH
1409: EMPTY
1410: LIST
1411: PUSH
1412: EMPTY
1413: LIST
1414: LIST
1415: PUSH
1416: EMPTY
1417: LIST
1418: LIST
1419: LIST
1420: PPUSH
1421: CALL_OW 70
1425: ST_TO_ADDR
// result := [ ] ;
1426: LD_ADDR_VAR 0 3
1430: PUSH
1431: EMPTY
1432: ST_TO_ADDR
// if not tmp then
1433: LD_VAR 0 5
1437: NOT
1438: IFFALSE 1442
// exit ;
1440: GO 1494
// for i in tmp do
1442: LD_ADDR_VAR 0 4
1446: PUSH
1447: LD_VAR 0 5
1451: PUSH
1452: FOR_IN
1453: IFFALSE 1478
// result := result union IsDrivenBy ( i ) ;
1455: LD_ADDR_VAR 0 3
1459: PUSH
1460: LD_VAR 0 3
1464: PUSH
1465: LD_VAR 0 4
1469: PPUSH
1470: CALL_OW 311
1474: UNION
1475: ST_TO_ADDR
1476: GO 1452
1478: POP
1479: POP
// result := result diff 0 ;
1480: LD_ADDR_VAR 0 3
1484: PUSH
1485: LD_VAR 0 3
1489: PUSH
1490: LD_INT 0
1492: DIFF
1493: ST_TO_ADDR
// end ;
1494: LD_VAR 0 3
1498: RET
// export function FilterBuildings ( side ) ; begin
1499: LD_INT 0
1501: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
1502: LD_ADDR_VAR 0 2
1506: PUSH
1507: LD_INT 22
1509: PUSH
1510: LD_VAR 0 1
1514: PUSH
1515: EMPTY
1516: LIST
1517: LIST
1518: PUSH
1519: LD_INT 21
1521: PUSH
1522: LD_INT 3
1524: PUSH
1525: EMPTY
1526: LIST
1527: LIST
1528: PUSH
1529: EMPTY
1530: LIST
1531: LIST
1532: PPUSH
1533: CALL_OW 69
1537: ST_TO_ADDR
// end ;
1538: LD_VAR 0 2
1542: RET
// export function CreateNature ; var i , animal , nat_area ; begin
1543: LD_INT 0
1545: PPUSH
1546: PPUSH
1547: PPUSH
1548: PPUSH
// uc_side = 0 ;
1549: LD_ADDR_OWVAR 20
1553: PUSH
1554: LD_INT 0
1556: ST_TO_ADDR
// uc_nation = 0 ;
1557: LD_ADDR_OWVAR 21
1561: PUSH
1562: LD_INT 0
1564: ST_TO_ADDR
// nat_area := wildArea ;
1565: LD_ADDR_VAR 0 4
1569: PUSH
1570: LD_INT 3
1572: ST_TO_ADDR
// InitHc ;
1573: CALL_OW 19
// for i = 1 to 4 do
1577: LD_ADDR_VAR 0 2
1581: PUSH
1582: DOUBLE
1583: LD_INT 1
1585: DEC
1586: ST_TO_ADDR
1587: LD_INT 4
1589: PUSH
1590: FOR_TO
1591: IFFALSE 1646
// begin hc_class = 18 ;
1593: LD_ADDR_OWVAR 28
1597: PUSH
1598: LD_INT 18
1600: ST_TO_ADDR
// hc_gallery =  ;
1601: LD_ADDR_OWVAR 33
1605: PUSH
1606: LD_STRING 
1608: ST_TO_ADDR
// hc_face_number = 1 ;
1609: LD_ADDR_OWVAR 34
1613: PUSH
1614: LD_INT 1
1616: ST_TO_ADDR
// animal := CreateHuman ;
1617: LD_ADDR_VAR 0 3
1621: PUSH
1622: CALL_OW 44
1626: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1627: LD_VAR 0 3
1631: PPUSH
1632: LD_VAR 0 4
1636: PPUSH
1637: LD_INT 0
1639: PPUSH
1640: CALL_OW 49
// end ;
1644: GO 1590
1646: POP
1647: POP
// for i = 1 to 6 do
1648: LD_ADDR_VAR 0 2
1652: PUSH
1653: DOUBLE
1654: LD_INT 1
1656: DEC
1657: ST_TO_ADDR
1658: LD_INT 6
1660: PUSH
1661: FOR_TO
1662: IFFALSE 1733
// begin hc_class = class_tiger ;
1664: LD_ADDR_OWVAR 28
1668: PUSH
1669: LD_INT 14
1671: ST_TO_ADDR
// hc_gallery =  ;
1672: LD_ADDR_OWVAR 33
1676: PUSH
1677: LD_STRING 
1679: ST_TO_ADDR
// hc_agressivity = Rand ( 0 , 10 ) ;
1680: LD_ADDR_OWVAR 35
1684: PUSH
1685: LD_INT 0
1687: PPUSH
1688: LD_INT 10
1690: PPUSH
1691: CALL_OW 12
1695: ST_TO_ADDR
// hc_face_number = 3 ;
1696: LD_ADDR_OWVAR 34
1700: PUSH
1701: LD_INT 3
1703: ST_TO_ADDR
// animal := CreateHuman ;
1704: LD_ADDR_VAR 0 3
1708: PUSH
1709: CALL_OW 44
1713: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1714: LD_VAR 0 3
1718: PPUSH
1719: LD_VAR 0 4
1723: PPUSH
1724: LD_INT 0
1726: PPUSH
1727: CALL_OW 49
// end ;
1731: GO 1661
1733: POP
1734: POP
// for i = 1 to 2 do
1735: LD_ADDR_VAR 0 2
1739: PUSH
1740: DOUBLE
1741: LD_INT 1
1743: DEC
1744: ST_TO_ADDR
1745: LD_INT 2
1747: PUSH
1748: FOR_TO
1749: IFFALSE 1812
// begin hc_class = 21 ;
1751: LD_ADDR_OWVAR 28
1755: PUSH
1756: LD_INT 21
1758: ST_TO_ADDR
// hc_gallery =  ;
1759: LD_ADDR_OWVAR 33
1763: PUSH
1764: LD_STRING 
1766: ST_TO_ADDR
// hc_agressivity = 0 ;
1767: LD_ADDR_OWVAR 35
1771: PUSH
1772: LD_INT 0
1774: ST_TO_ADDR
// hc_face_number = 5 ;
1775: LD_ADDR_OWVAR 34
1779: PUSH
1780: LD_INT 5
1782: ST_TO_ADDR
// animal := CreateHuman ;
1783: LD_ADDR_VAR 0 3
1787: PUSH
1788: CALL_OW 44
1792: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1793: LD_VAR 0 3
1797: PPUSH
1798: LD_VAR 0 4
1802: PPUSH
1803: LD_INT 0
1805: PPUSH
1806: CALL_OW 49
// end ;
1810: GO 1748
1812: POP
1813: POP
// for i = 1 to 6 do
1814: LD_ADDR_VAR 0 2
1818: PUSH
1819: DOUBLE
1820: LD_INT 1
1822: DEC
1823: ST_TO_ADDR
1824: LD_INT 6
1826: PUSH
1827: FOR_TO
1828: IFFALSE 1883
// begin hc_class = 13 ;
1830: LD_ADDR_OWVAR 28
1834: PUSH
1835: LD_INT 13
1837: ST_TO_ADDR
// hc_gallery =  ;
1838: LD_ADDR_OWVAR 33
1842: PUSH
1843: LD_STRING 
1845: ST_TO_ADDR
// hc_face_number = 4 ;
1846: LD_ADDR_OWVAR 34
1850: PUSH
1851: LD_INT 4
1853: ST_TO_ADDR
// animal := CreateHuman ;
1854: LD_ADDR_VAR 0 3
1858: PUSH
1859: CALL_OW 44
1863: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
1864: LD_VAR 0 3
1868: PPUSH
1869: LD_VAR 0 4
1873: PPUSH
1874: LD_INT 0
1876: PPUSH
1877: CALL_OW 49
// end ;
1881: GO 1827
1883: POP
1884: POP
// for i = 1 to 2 do
1885: LD_ADDR_VAR 0 2
1889: PUSH
1890: DOUBLE
1891: LD_INT 1
1893: DEC
1894: ST_TO_ADDR
1895: LD_INT 2
1897: PUSH
1898: FOR_TO
1899: IFFALSE 1958
// begin hc_class = 20 ;
1901: LD_ADDR_OWVAR 28
1905: PUSH
1906: LD_INT 20
1908: ST_TO_ADDR
// hc_gallery =  ;
1909: LD_ADDR_OWVAR 33
1913: PUSH
1914: LD_STRING 
1916: ST_TO_ADDR
// hc_face_number = 2 ;
1917: LD_ADDR_OWVAR 34
1921: PUSH
1922: LD_INT 2
1924: ST_TO_ADDR
// animal := CreateHuman ;
1925: LD_ADDR_VAR 0 3
1929: PUSH
1930: CALL_OW 44
1934: ST_TO_ADDR
// PlaceUnitXYR ( animal , 101 , 37 , 3 , false ) ;
1935: LD_VAR 0 3
1939: PPUSH
1940: LD_INT 101
1942: PPUSH
1943: LD_INT 37
1945: PPUSH
1946: LD_INT 3
1948: PPUSH
1949: LD_INT 0
1951: PPUSH
1952: CALL_OW 50
// end ;
1956: GO 1898
1958: POP
1959: POP
// for i = 1 to 1 do
1960: LD_ADDR_VAR 0 2
1964: PUSH
1965: DOUBLE
1966: LD_INT 1
1968: DEC
1969: ST_TO_ADDR
1970: LD_INT 1
1972: PUSH
1973: FOR_TO
1974: IFFALSE 2021
// begin vc_chassis := 31 ;
1976: LD_ADDR_OWVAR 37
1980: PUSH
1981: LD_INT 31
1983: ST_TO_ADDR
// vc_control := control_rider ;
1984: LD_ADDR_OWVAR 38
1988: PUSH
1989: LD_INT 4
1991: ST_TO_ADDR
// animal := CreateVehicle ;
1992: LD_ADDR_VAR 0 3
1996: PUSH
1997: CALL_OW 45
2001: ST_TO_ADDR
// PlaceUnitArea ( animal , nat_area , false ) ;
2002: LD_VAR 0 3
2006: PPUSH
2007: LD_VAR 0 4
2011: PPUSH
2012: LD_INT 0
2014: PPUSH
2015: CALL_OW 49
// end ;
2019: GO 1973
2021: POP
2022: POP
// end ;
2023: LD_VAR 0 1
2027: RET
// export function NearbyTowerHasEnergy ( unit ) ; var i , tmp , energy ; begin
2028: LD_INT 0
2030: PPUSH
2031: PPUSH
2032: PPUSH
2033: PPUSH
// result := [ ] ;
2034: LD_ADDR_VAR 0 2
2038: PUSH
2039: EMPTY
2040: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( unit ) ] , [ f_dist , unit , 15 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ] ) ;
2041: LD_ADDR_VAR 0 4
2045: PUSH
2046: LD_INT 81
2048: PUSH
2049: LD_VAR 0 1
2053: PPUSH
2054: CALL_OW 255
2058: PUSH
2059: EMPTY
2060: LIST
2061: LIST
2062: PUSH
2063: LD_INT 91
2065: PUSH
2066: LD_VAR 0 1
2070: PUSH
2071: LD_INT 15
2073: PUSH
2074: EMPTY
2075: LIST
2076: LIST
2077: LIST
2078: PUSH
2079: LD_INT 2
2081: PUSH
2082: LD_INT 30
2084: PUSH
2085: LD_INT 32
2087: PUSH
2088: EMPTY
2089: LIST
2090: LIST
2091: PUSH
2092: LD_INT 30
2094: PUSH
2095: LD_INT 33
2097: PUSH
2098: EMPTY
2099: LIST
2100: LIST
2101: PUSH
2102: EMPTY
2103: LIST
2104: LIST
2105: LIST
2106: PUSH
2107: EMPTY
2108: LIST
2109: LIST
2110: LIST
2111: PPUSH
2112: CALL_OW 69
2116: ST_TO_ADDR
// if not tmp then
2117: LD_VAR 0 4
2121: NOT
2122: IFFALSE 2126
// exit ;
2124: GO 2195
// for i in tmp do
2126: LD_ADDR_VAR 0 3
2130: PUSH
2131: LD_VAR 0 4
2135: PUSH
2136: FOR_IN
2137: IFFALSE 2193
// begin energy := GetEnergy ( GetBase ( i ) ) ;
2139: LD_ADDR_VAR 0 5
2143: PUSH
2144: LD_VAR 0 3
2148: PPUSH
2149: CALL_OW 274
2153: PPUSH
2154: CALL_OW 278
2158: ST_TO_ADDR
// if energy [ 4 ] > energy [ 1 ] then
2159: LD_VAR 0 5
2163: PUSH
2164: LD_INT 4
2166: ARRAY
2167: PUSH
2168: LD_VAR 0 5
2172: PUSH
2173: LD_INT 1
2175: ARRAY
2176: GREATER
2177: IFFALSE 2191
// begin result := i ;
2179: LD_ADDR_VAR 0 2
2183: PUSH
2184: LD_VAR 0 3
2188: ST_TO_ADDR
// break ;
2189: GO 2193
// end ; end ;
2191: GO 2136
2193: POP
2194: POP
// end ;
2195: LD_VAR 0 2
2199: RET
// export function GetTurretWeaponBase ( tower ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
2200: LD_INT 0
2202: PPUSH
2203: PPUSH
2204: PPUSH
2205: PPUSH
2206: PPUSH
2207: PPUSH
2208: PPUSH
2209: PPUSH
2210: PPUSH
2211: PPUSH
2212: PPUSH
2213: PPUSH
2214: PPUSH
2215: PPUSH
2216: PPUSH
2217: PPUSH
// result := false ;
2218: LD_ADDR_VAR 0 2
2222: PUSH
2223: LD_INT 0
2225: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
2226: LD_VAR 0 1
2230: NOT
2231: PUSH
2232: LD_VAR 0 1
2236: PPUSH
2237: CALL_OW 266
2241: PUSH
2242: LD_INT 32
2244: PUSH
2245: LD_INT 33
2247: PUSH
2248: EMPTY
2249: LIST
2250: LIST
2251: IN
2252: NOT
2253: OR
2254: IFFALSE 2258
// exit ;
2256: GO 3418
// nat := GetNation ( tower ) ;
2258: LD_ADDR_VAR 0 11
2262: PUSH
2263: LD_VAR 0 1
2267: PPUSH
2268: CALL_OW 248
2272: ST_TO_ADDR
// side := GetSide ( tower ) ;
2273: LD_ADDR_VAR 0 15
2277: PUSH
2278: LD_VAR 0 1
2282: PPUSH
2283: CALL_OW 255
2287: ST_TO_ADDR
// x := GetX ( tower ) ;
2288: LD_ADDR_VAR 0 9
2292: PUSH
2293: LD_VAR 0 1
2297: PPUSH
2298: CALL_OW 250
2302: ST_TO_ADDR
// y := GetY ( tower ) ;
2303: LD_ADDR_VAR 0 10
2307: PUSH
2308: LD_VAR 0 1
2312: PPUSH
2313: CALL_OW 251
2317: ST_TO_ADDR
// if not x or not y then
2318: LD_VAR 0 9
2322: NOT
2323: PUSH
2324: LD_VAR 0 10
2328: NOT
2329: OR
2330: IFFALSE 2334
// exit ;
2332: GO 3418
// weapon := 0 ;
2334: LD_ADDR_VAR 0 17
2338: PUSH
2339: LD_INT 0
2341: ST_TO_ADDR
// fac_list := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun ] ;
2342: LD_ADDR_VAR 0 16
2346: PUSH
2347: LD_INT 42
2349: PUSH
2350: LD_INT 43
2352: PUSH
2353: LD_INT 44
2355: PUSH
2356: LD_INT 46
2358: PUSH
2359: EMPTY
2360: LIST
2361: LIST
2362: LIST
2363: LIST
2364: ST_TO_ADDR
// if not fac_list then
2365: LD_VAR 0 16
2369: NOT
2370: IFFALSE 2374
// exit ;
2372: GO 3418
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
2374: LD_ADDR_VAR 0 4
2378: PUSH
2379: LD_INT 4
2381: PUSH
2382: LD_INT 5
2384: PUSH
2385: LD_INT 9
2387: PUSH
2388: LD_INT 10
2390: PUSH
2391: LD_INT 6
2393: PUSH
2394: LD_INT 7
2396: PUSH
2397: LD_INT 11
2399: PUSH
2400: EMPTY
2401: LIST
2402: LIST
2403: LIST
2404: LIST
2405: LIST
2406: LIST
2407: LIST
2408: PUSH
2409: LD_INT 27
2411: PUSH
2412: LD_INT 28
2414: PUSH
2415: LD_INT 26
2417: PUSH
2418: LD_INT 30
2420: PUSH
2421: EMPTY
2422: LIST
2423: LIST
2424: LIST
2425: LIST
2426: PUSH
2427: LD_INT 43
2429: PUSH
2430: LD_INT 44
2432: PUSH
2433: LD_INT 46
2435: PUSH
2436: LD_INT 45
2438: PUSH
2439: LD_INT 47
2441: PUSH
2442: LD_INT 49
2444: PUSH
2445: EMPTY
2446: LIST
2447: LIST
2448: LIST
2449: LIST
2450: LIST
2451: LIST
2452: PUSH
2453: EMPTY
2454: LIST
2455: LIST
2456: LIST
2457: PUSH
2458: LD_VAR 0 11
2462: ARRAY
2463: ST_TO_ADDR
// for i in list do
2464: LD_ADDR_VAR 0 7
2468: PUSH
2469: LD_VAR 0 4
2473: PUSH
2474: FOR_IN
2475: IFFALSE 2508
// if not i in fac_list then
2477: LD_VAR 0 7
2481: PUSH
2482: LD_VAR 0 16
2486: IN
2487: NOT
2488: IFFALSE 2506
// list := list diff i ;
2490: LD_ADDR_VAR 0 4
2494: PUSH
2495: LD_VAR 0 4
2499: PUSH
2500: LD_VAR 0 7
2504: DIFF
2505: ST_TO_ADDR
2506: GO 2474
2508: POP
2509: POP
// if not list then
2510: LD_VAR 0 4
2514: NOT
2515: IFFALSE 2519
// exit ;
2517: GO 3418
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
2519: LD_VAR 0 11
2523: PUSH
2524: LD_INT 3
2526: EQUAL
2527: PUSH
2528: LD_INT 49
2530: PUSH
2531: LD_VAR 0 4
2535: IN
2536: AND
2537: PUSH
2538: LD_INT 31
2540: PPUSH
2541: LD_VAR 0 15
2545: PPUSH
2546: CALL_OW 321
2550: PUSH
2551: LD_INT 2
2553: EQUAL
2554: AND
2555: IFFALSE 2615
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
2557: LD_INT 22
2559: PUSH
2560: LD_VAR 0 15
2564: PUSH
2565: EMPTY
2566: LIST
2567: LIST
2568: PUSH
2569: LD_INT 35
2571: PUSH
2572: LD_INT 49
2574: PUSH
2575: EMPTY
2576: LIST
2577: LIST
2578: PUSH
2579: LD_INT 91
2581: PUSH
2582: LD_VAR 0 1
2586: PUSH
2587: LD_INT 10
2589: PUSH
2590: EMPTY
2591: LIST
2592: LIST
2593: LIST
2594: PUSH
2595: EMPTY
2596: LIST
2597: LIST
2598: LIST
2599: PPUSH
2600: CALL_OW 69
2604: NOT
2605: IFFALSE 2615
// weapon := ru_time_lapser ;
2607: LD_ADDR_VAR 0 17
2611: PUSH
2612: LD_INT 49
2614: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
2615: LD_VAR 0 11
2619: PUSH
2620: LD_INT 1
2622: PUSH
2623: LD_INT 2
2625: PUSH
2626: EMPTY
2627: LIST
2628: LIST
2629: IN
2630: PUSH
2631: LD_INT 11
2633: PUSH
2634: LD_VAR 0 4
2638: IN
2639: PUSH
2640: LD_INT 30
2642: PUSH
2643: LD_VAR 0 4
2647: IN
2648: OR
2649: AND
2650: PUSH
2651: LD_INT 6
2653: PPUSH
2654: LD_VAR 0 15
2658: PPUSH
2659: CALL_OW 321
2663: PUSH
2664: LD_INT 2
2666: EQUAL
2667: AND
2668: IFFALSE 2833
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
2670: LD_INT 22
2672: PUSH
2673: LD_VAR 0 15
2677: PUSH
2678: EMPTY
2679: LIST
2680: LIST
2681: PUSH
2682: LD_INT 2
2684: PUSH
2685: LD_INT 35
2687: PUSH
2688: LD_INT 11
2690: PUSH
2691: EMPTY
2692: LIST
2693: LIST
2694: PUSH
2695: LD_INT 35
2697: PUSH
2698: LD_INT 30
2700: PUSH
2701: EMPTY
2702: LIST
2703: LIST
2704: PUSH
2705: EMPTY
2706: LIST
2707: LIST
2708: LIST
2709: PUSH
2710: LD_INT 91
2712: PUSH
2713: LD_VAR 0 1
2717: PUSH
2718: LD_INT 18
2720: PUSH
2721: EMPTY
2722: LIST
2723: LIST
2724: LIST
2725: PUSH
2726: EMPTY
2727: LIST
2728: LIST
2729: LIST
2730: PPUSH
2731: CALL_OW 69
2735: NOT
2736: PUSH
2737: LD_INT 22
2739: PUSH
2740: LD_VAR 0 15
2744: PUSH
2745: EMPTY
2746: LIST
2747: LIST
2748: PUSH
2749: LD_INT 2
2751: PUSH
2752: LD_INT 30
2754: PUSH
2755: LD_INT 32
2757: PUSH
2758: EMPTY
2759: LIST
2760: LIST
2761: PUSH
2762: LD_INT 30
2764: PUSH
2765: LD_INT 33
2767: PUSH
2768: EMPTY
2769: LIST
2770: LIST
2771: PUSH
2772: EMPTY
2773: LIST
2774: LIST
2775: LIST
2776: PUSH
2777: LD_INT 91
2779: PUSH
2780: LD_VAR 0 1
2784: PUSH
2785: LD_INT 12
2787: PUSH
2788: EMPTY
2789: LIST
2790: LIST
2791: LIST
2792: PUSH
2793: EMPTY
2794: LIST
2795: LIST
2796: LIST
2797: PUSH
2798: EMPTY
2799: LIST
2800: PPUSH
2801: CALL_OW 69
2805: PUSH
2806: LD_INT 2
2808: GREATER
2809: AND
2810: IFFALSE 2833
// weapon := [ us_radar , ar_radar ] [ nat ] ;
2812: LD_ADDR_VAR 0 17
2816: PUSH
2817: LD_INT 11
2819: PUSH
2820: LD_INT 30
2822: PUSH
2823: EMPTY
2824: LIST
2825: LIST
2826: PUSH
2827: LD_VAR 0 11
2831: ARRAY
2832: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
2833: LD_VAR 0 17
2837: NOT
2838: PUSH
2839: LD_INT 40
2841: PPUSH
2842: LD_VAR 0 15
2846: PPUSH
2847: CALL_OW 321
2851: PUSH
2852: LD_INT 2
2854: EQUAL
2855: AND
2856: PUSH
2857: LD_INT 7
2859: PUSH
2860: LD_VAR 0 4
2864: IN
2865: PUSH
2866: LD_INT 28
2868: PUSH
2869: LD_VAR 0 4
2873: IN
2874: OR
2875: PUSH
2876: LD_INT 45
2878: PUSH
2879: LD_VAR 0 4
2883: IN
2884: OR
2885: AND
2886: IFFALSE 3140
// begin hex := GetHexInfo ( x , y ) ;
2888: LD_ADDR_VAR 0 3
2892: PUSH
2893: LD_VAR 0 9
2897: PPUSH
2898: LD_VAR 0 10
2902: PPUSH
2903: CALL_OW 546
2907: ST_TO_ADDR
// if hex [ 1 ] then
2908: LD_VAR 0 3
2912: PUSH
2913: LD_INT 1
2915: ARRAY
2916: IFFALSE 2920
// exit ;
2918: GO 3418
// height := hex [ 2 ] ;
2920: LD_ADDR_VAR 0 14
2924: PUSH
2925: LD_VAR 0 3
2929: PUSH
2930: LD_INT 2
2932: ARRAY
2933: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
2934: LD_ADDR_VAR 0 13
2938: PUSH
2939: LD_INT 0
2941: PUSH
2942: LD_INT 2
2944: PUSH
2945: LD_INT 3
2947: PUSH
2948: LD_INT 5
2950: PUSH
2951: EMPTY
2952: LIST
2953: LIST
2954: LIST
2955: LIST
2956: ST_TO_ADDR
// for i in tmp do
2957: LD_ADDR_VAR 0 7
2961: PUSH
2962: LD_VAR 0 13
2966: PUSH
2967: FOR_IN
2968: IFFALSE 3138
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
2970: LD_ADDR_VAR 0 8
2974: PUSH
2975: LD_VAR 0 9
2979: PPUSH
2980: LD_VAR 0 7
2984: PPUSH
2985: LD_INT 5
2987: PPUSH
2988: CALL_OW 272
2992: PUSH
2993: LD_VAR 0 10
2997: PPUSH
2998: LD_VAR 0 7
3002: PPUSH
3003: LD_INT 5
3005: PPUSH
3006: CALL_OW 273
3010: PUSH
3011: EMPTY
3012: LIST
3013: LIST
3014: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
3015: LD_VAR 0 8
3019: PUSH
3020: LD_INT 1
3022: ARRAY
3023: PPUSH
3024: LD_VAR 0 8
3028: PUSH
3029: LD_INT 2
3031: ARRAY
3032: PPUSH
3033: CALL_OW 488
3037: IFFALSE 3136
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
3039: LD_ADDR_VAR 0 3
3043: PUSH
3044: LD_VAR 0 8
3048: PUSH
3049: LD_INT 1
3051: ARRAY
3052: PPUSH
3053: LD_VAR 0 8
3057: PUSH
3058: LD_INT 2
3060: ARRAY
3061: PPUSH
3062: CALL_OW 546
3066: ST_TO_ADDR
// if hex [ 1 ] then
3067: LD_VAR 0 3
3071: PUSH
3072: LD_INT 1
3074: ARRAY
3075: IFFALSE 3079
// continue ;
3077: GO 2967
// h := hex [ 2 ] ;
3079: LD_ADDR_VAR 0 12
3083: PUSH
3084: LD_VAR 0 3
3088: PUSH
3089: LD_INT 2
3091: ARRAY
3092: ST_TO_ADDR
// if h + 7 < height then
3093: LD_VAR 0 12
3097: PUSH
3098: LD_INT 7
3100: PLUS
3101: PUSH
3102: LD_VAR 0 14
3106: LESS
3107: IFFALSE 3136
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
3109: LD_ADDR_VAR 0 17
3113: PUSH
3114: LD_INT 7
3116: PUSH
3117: LD_INT 28
3119: PUSH
3120: LD_INT 45
3122: PUSH
3123: EMPTY
3124: LIST
3125: LIST
3126: LIST
3127: PUSH
3128: LD_VAR 0 11
3132: ARRAY
3133: ST_TO_ADDR
// break ;
3134: GO 3138
// end ; end ; end ;
3136: GO 2967
3138: POP
3139: POP
// end ; if not weapon then
3140: LD_VAR 0 17
3144: NOT
3145: IFFALSE 3300
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
3147: LD_ADDR_VAR 0 4
3151: PUSH
3152: LD_VAR 0 4
3156: PUSH
3157: LD_INT 11
3159: PUSH
3160: LD_INT 30
3162: PUSH
3163: LD_INT 49
3165: PUSH
3166: EMPTY
3167: LIST
3168: LIST
3169: LIST
3170: DIFF
3171: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , tower , 6 ] , [ f_not , [ f_bweapon , 0 ] ] ] ) ;
3172: LD_ADDR_VAR 0 13
3176: PUSH
3177: LD_INT 22
3179: PUSH
3180: LD_VAR 0 15
3184: PUSH
3185: EMPTY
3186: LIST
3187: LIST
3188: PUSH
3189: LD_INT 91
3191: PUSH
3192: LD_VAR 0 1
3196: PUSH
3197: LD_INT 6
3199: PUSH
3200: EMPTY
3201: LIST
3202: LIST
3203: LIST
3204: PUSH
3205: LD_INT 3
3207: PUSH
3208: LD_INT 35
3210: PUSH
3211: LD_INT 0
3213: PUSH
3214: EMPTY
3215: LIST
3216: LIST
3217: PUSH
3218: EMPTY
3219: LIST
3220: LIST
3221: PUSH
3222: EMPTY
3223: LIST
3224: LIST
3225: LIST
3226: PPUSH
3227: CALL_OW 69
3231: ST_TO_ADDR
// for i in tmp do
3232: LD_ADDR_VAR 0 7
3236: PUSH
3237: LD_VAR 0 13
3241: PUSH
3242: FOR_IN
3243: IFFALSE 3268
// list := list diff GetBWeapon ( i ) ;
3245: LD_ADDR_VAR 0 4
3249: PUSH
3250: LD_VAR 0 4
3254: PUSH
3255: LD_VAR 0 7
3259: PPUSH
3260: CALL_OW 269
3264: DIFF
3265: ST_TO_ADDR
3266: GO 3242
3268: POP
3269: POP
// if list then
3270: LD_VAR 0 4
3274: IFFALSE 3300
// weapon := list [ rand ( 1 , list ) ] ;
3276: LD_ADDR_VAR 0 17
3280: PUSH
3281: LD_VAR 0 4
3285: PUSH
3286: LD_INT 1
3288: PPUSH
3289: LD_VAR 0 4
3293: PPUSH
3294: CALL_OW 12
3298: ARRAY
3299: ST_TO_ADDR
// end ; if weapon then
3300: LD_VAR 0 17
3304: IFFALSE 3418
// begin tmp := CostOfWeapon ( weapon ) ;
3306: LD_ADDR_VAR 0 13
3310: PUSH
3311: LD_VAR 0 17
3315: PPUSH
3316: CALL_OW 451
3320: ST_TO_ADDR
// j := GetBase ( tower ) ;
3321: LD_ADDR_VAR 0 8
3325: PUSH
3326: LD_VAR 0 1
3330: PPUSH
3331: CALL_OW 274
3335: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
3336: LD_VAR 0 8
3340: PPUSH
3341: LD_INT 1
3343: PPUSH
3344: CALL_OW 275
3348: PUSH
3349: LD_VAR 0 13
3353: PUSH
3354: LD_INT 1
3356: ARRAY
3357: GREATEREQUAL
3358: PUSH
3359: LD_VAR 0 8
3363: PPUSH
3364: LD_INT 2
3366: PPUSH
3367: CALL_OW 275
3371: PUSH
3372: LD_VAR 0 13
3376: PUSH
3377: LD_INT 2
3379: ARRAY
3380: GREATEREQUAL
3381: AND
3382: PUSH
3383: LD_VAR 0 8
3387: PPUSH
3388: LD_INT 3
3390: PPUSH
3391: CALL_OW 275
3395: PUSH
3396: LD_VAR 0 13
3400: PUSH
3401: LD_INT 3
3403: ARRAY
3404: GREATEREQUAL
3405: AND
3406: IFFALSE 3418
// result := weapon ;
3408: LD_ADDR_VAR 0 2
3412: PUSH
3413: LD_VAR 0 17
3417: ST_TO_ADDR
// end ; end ; end_of_file
3418: LD_VAR 0 2
3422: RET
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Khatam , Kikuchi , Harisson ; export function PrepareAmericans ; var i , team , others , veh , m ; begin
3423: LD_INT 0
3425: PPUSH
3426: PPUSH
3427: PPUSH
3428: PPUSH
3429: PPUSH
3430: PPUSH
// uc_side := 1 ;
3431: LD_ADDR_OWVAR 20
3435: PUSH
3436: LD_INT 1
3438: ST_TO_ADDR
// uc_nation := 1 ;
3439: LD_ADDR_OWVAR 21
3443: PUSH
3444: LD_INT 1
3446: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , mission_prev_prefix ) ;
3447: LD_ADDR_EXP 9
3451: PUSH
3452: LD_STRING JMM
3454: PPUSH
3455: LD_EXP 1
3459: NOT
3460: PPUSH
3461: LD_EXP 2
3465: PPUSH
3466: CALL 29935 0 3
3470: ST_TO_ADDR
// team := [ JMM ] ;
3471: LD_ADDR_VAR 0 3
3475: PUSH
3476: LD_EXP 9
3480: PUSH
3481: EMPTY
3482: LIST
3483: ST_TO_ADDR
// if LoadVariable ( BrownIn07 , debug ) then
3484: LD_STRING BrownIn07
3486: PPUSH
3487: LD_EXP 1
3491: PPUSH
3492: CALL_OW 30
3496: IFFALSE 3522
// Brown := PrepareUnit ( Brown , ( not debug ) , mission_prev_prefix ) ;
3498: LD_ADDR_EXP 10
3502: PUSH
3503: LD_STRING Brown
3505: PPUSH
3506: LD_EXP 1
3510: NOT
3511: PPUSH
3512: LD_EXP 2
3516: PPUSH
3517: CALL 29935 0 3
3521: ST_TO_ADDR
// if Brown then
3522: LD_EXP 10
3526: IFFALSE 3544
// team := team ^ Brown ;
3528: LD_ADDR_VAR 0 3
3532: PUSH
3533: LD_VAR 0 3
3537: PUSH
3538: LD_EXP 10
3542: ADD
3543: ST_TO_ADDR
// if LoadVariable ( DonaldsonIn07 , debug ) then
3544: LD_STRING DonaldsonIn07
3546: PPUSH
3547: LD_EXP 1
3551: PPUSH
3552: CALL_OW 30
3556: IFFALSE 3582
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , mission_prev_prefix ) ;
3558: LD_ADDR_EXP 11
3562: PUSH
3563: LD_STRING Donaldson
3565: PPUSH
3566: LD_EXP 1
3570: NOT
3571: PPUSH
3572: LD_EXP 2
3576: PPUSH
3577: CALL 29935 0 3
3581: ST_TO_ADDR
// if Donaldson then
3582: LD_EXP 11
3586: IFFALSE 3604
// team := team ^ Donaldson ;
3588: LD_ADDR_VAR 0 3
3592: PUSH
3593: LD_VAR 0 3
3597: PUSH
3598: LD_EXP 11
3602: ADD
3603: ST_TO_ADDR
// if LoadVariable ( BobbyIn07 , debug ) then
3604: LD_STRING BobbyIn07
3606: PPUSH
3607: LD_EXP 1
3611: PPUSH
3612: CALL_OW 30
3616: IFFALSE 3642
// Bobby := PrepareUnit ( Bobby , ( not debug ) , mission_prev_prefix ) ;
3618: LD_ADDR_EXP 12
3622: PUSH
3623: LD_STRING Bobby
3625: PPUSH
3626: LD_EXP 1
3630: NOT
3631: PPUSH
3632: LD_EXP 2
3636: PPUSH
3637: CALL 29935 0 3
3641: ST_TO_ADDR
// if Bobby then
3642: LD_EXP 12
3646: IFFALSE 3664
// team := team ^ Bobby ;
3648: LD_ADDR_VAR 0 3
3652: PUSH
3653: LD_VAR 0 3
3657: PUSH
3658: LD_EXP 12
3662: ADD
3663: ST_TO_ADDR
// if LoadVariable ( CyrusIn07 , debug ) then
3664: LD_STRING CyrusIn07
3666: PPUSH
3667: LD_EXP 1
3671: PPUSH
3672: CALL_OW 30
3676: IFFALSE 3702
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , mission_prev_prefix ) ;
3678: LD_ADDR_EXP 13
3682: PUSH
3683: LD_STRING Cyrus
3685: PPUSH
3686: LD_EXP 1
3690: NOT
3691: PPUSH
3692: LD_EXP 2
3696: PPUSH
3697: CALL 29935 0 3
3701: ST_TO_ADDR
// if Cyrus then
3702: LD_EXP 13
3706: IFFALSE 3724
// team := team ^ Cyrus ;
3708: LD_ADDR_VAR 0 3
3712: PUSH
3713: LD_VAR 0 3
3717: PUSH
3718: LD_EXP 13
3722: ADD
3723: ST_TO_ADDR
// if LoadVariable ( LisaIn07 , debug ) then
3724: LD_STRING LisaIn07
3726: PPUSH
3727: LD_EXP 1
3731: PPUSH
3732: CALL_OW 30
3736: IFFALSE 3762
// Lisa := PrepareUnit ( Lisa , ( not debug ) , mission_prev_prefix ) ;
3738: LD_ADDR_EXP 14
3742: PUSH
3743: LD_STRING Lisa
3745: PPUSH
3746: LD_EXP 1
3750: NOT
3751: PPUSH
3752: LD_EXP 2
3756: PPUSH
3757: CALL 29935 0 3
3761: ST_TO_ADDR
// if Lisa then
3762: LD_EXP 14
3766: IFFALSE 3784
// team := team ^ Lisa ;
3768: LD_ADDR_VAR 0 3
3772: PUSH
3773: LD_VAR 0 3
3777: PUSH
3778: LD_EXP 14
3782: ADD
3783: ST_TO_ADDR
// if LoadVariable ( GladstoneIn07 , debug ) then
3784: LD_STRING GladstoneIn07
3786: PPUSH
3787: LD_EXP 1
3791: PPUSH
3792: CALL_OW 30
3796: IFFALSE 3822
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , mission_prev_prefix ) ;
3798: LD_ADDR_EXP 16
3802: PUSH
3803: LD_STRING Gladstone
3805: PPUSH
3806: LD_EXP 1
3810: NOT
3811: PPUSH
3812: LD_EXP 2
3816: PPUSH
3817: CALL 29935 0 3
3821: ST_TO_ADDR
// if Gladstone then
3822: LD_EXP 16
3826: IFFALSE 3844
// team := team ^ Gladstone ;
3828: LD_ADDR_VAR 0 3
3832: PUSH
3833: LD_VAR 0 3
3837: PUSH
3838: LD_EXP 16
3842: ADD
3843: ST_TO_ADDR
// if LoadVariable ( KhatamIn07 , debug ) then
3844: LD_STRING KhatamIn07
3846: PPUSH
3847: LD_EXP 1
3851: PPUSH
3852: CALL_OW 30
3856: IFFALSE 3882
// Khatam := PrepareUnit ( Khatam , ( not debug ) , mission_prev_prefix ) ;
3858: LD_ADDR_EXP 17
3862: PUSH
3863: LD_STRING Khatam
3865: PPUSH
3866: LD_EXP 1
3870: NOT
3871: PPUSH
3872: LD_EXP 2
3876: PPUSH
3877: CALL 29935 0 3
3881: ST_TO_ADDR
// if Khatam then
3882: LD_EXP 17
3886: IFFALSE 3904
// team := team ^ Khatam ;
3888: LD_ADDR_VAR 0 3
3892: PUSH
3893: LD_VAR 0 3
3897: PUSH
3898: LD_EXP 17
3902: ADD
3903: ST_TO_ADDR
// others := CreateCharacterSet ( 07_others ) ;
3904: LD_ADDR_VAR 0 4
3908: PUSH
3909: LD_STRING 07_others
3911: PPUSH
3912: CALL_OW 31
3916: ST_TO_ADDR
// if others then
3917: LD_VAR 0 4
3921: IFFALSE 3939
// team := team ^ others ;
3923: LD_ADDR_VAR 0 3
3927: PUSH
3928: LD_VAR 0 3
3932: PUSH
3933: LD_VAR 0 4
3937: ADD
3938: ST_TO_ADDR
// if debug then
3939: LD_EXP 1
3943: IFFALSE 4017
// begin InitHc ;
3945: CALL_OW 19
// for i = 1 to 4 do
3949: LD_ADDR_VAR 0 2
3953: PUSH
3954: DOUBLE
3955: LD_INT 1
3957: DEC
3958: ST_TO_ADDR
3959: LD_INT 4
3961: PUSH
3962: FOR_TO
3963: IFFALSE 4015
// begin PrepareHuman ( false , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , 4 ) ;
3965: LD_INT 0
3967: PPUSH
3968: LD_INT 1
3970: PUSH
3971: LD_INT 3
3973: PUSH
3974: EMPTY
3975: LIST
3976: LIST
3977: PUSH
3978: LD_INT 1
3980: PPUSH
3981: LD_INT 2
3983: PPUSH
3984: CALL_OW 12
3988: ARRAY
3989: PPUSH
3990: LD_INT 4
3992: PPUSH
3993: CALL_OW 380
// team := team ^ CreateHuman ;
3997: LD_ADDR_VAR 0 3
4001: PUSH
4002: LD_VAR 0 3
4006: PUSH
4007: CALL_OW 44
4011: ADD
4012: ST_TO_ADDR
// end ;
4013: GO 3962
4015: POP
4016: POP
// end ; m := 0 ;
4017: LD_ADDR_VAR 0 6
4021: PUSH
4022: LD_INT 0
4024: ST_TO_ADDR
// for i in team do
4025: LD_ADDR_VAR 0 2
4029: PUSH
4030: LD_VAR 0 3
4034: PUSH
4035: FOR_IN
4036: IFFALSE 4243
// if GetClass ( i ) = 3 then
4038: LD_VAR 0 2
4042: PPUSH
4043: CALL_OW 257
4047: PUSH
4048: LD_INT 3
4050: EQUAL
4051: IFFALSE 4199
// begin m := m + 1 ;
4053: LD_ADDR_VAR 0 6
4057: PUSH
4058: LD_VAR 0 6
4062: PUSH
4063: LD_INT 1
4065: PLUS
4066: ST_TO_ADDR
// veh := PrepareTank ( 1 , 1 , [ us_medium_wheeled , us_medium_tracked , us_medium_wheeled , us_light_wheeled ] [ m mod 4 + 1 ] , engine_solar , control_manual , [ us_gatling_gun , us_double_gun , us_light_gun , us_radar ] [ m mod 4 + 1 ] , 60 ) ;
4067: LD_ADDR_VAR 0 5
4071: PUSH
4072: LD_INT 1
4074: PPUSH
4075: LD_INT 1
4077: PPUSH
4078: LD_INT 2
4080: PUSH
4081: LD_INT 3
4083: PUSH
4084: LD_INT 2
4086: PUSH
4087: LD_INT 1
4089: PUSH
4090: EMPTY
4091: LIST
4092: LIST
4093: LIST
4094: LIST
4095: PUSH
4096: LD_VAR 0 6
4100: PUSH
4101: LD_INT 4
4103: MOD
4104: PUSH
4105: LD_INT 1
4107: PLUS
4108: ARRAY
4109: PPUSH
4110: LD_INT 2
4112: PPUSH
4113: LD_INT 1
4115: PPUSH
4116: LD_INT 4
4118: PUSH
4119: LD_INT 5
4121: PUSH
4122: LD_INT 3
4124: PUSH
4125: LD_INT 11
4127: PUSH
4128: EMPTY
4129: LIST
4130: LIST
4131: LIST
4132: LIST
4133: PUSH
4134: LD_VAR 0 6
4138: PUSH
4139: LD_INT 4
4141: MOD
4142: PUSH
4143: LD_INT 1
4145: PLUS
4146: ARRAY
4147: PPUSH
4148: LD_INT 60
4150: PPUSH
4151: CALL 512 0 7
4155: ST_TO_ADDR
// SetDir ( veh , 2 ) ;
4156: LD_VAR 0 5
4160: PPUSH
4161: LD_INT 2
4163: PPUSH
4164: CALL_OW 233
// PlaceUnitArea ( veh , startArea , false ) ;
4168: LD_VAR 0 5
4172: PPUSH
4173: LD_INT 1
4175: PPUSH
4176: LD_INT 0
4178: PPUSH
4179: CALL_OW 49
// PlaceHumanInUnit ( i , veh ) ;
4183: LD_VAR 0 2
4187: PPUSH
4188: LD_VAR 0 5
4192: PPUSH
4193: CALL_OW 52
// end else
4197: GO 4241
// begin if GetClass ( i ) = 2 then
4199: LD_VAR 0 2
4203: PPUSH
4204: CALL_OW 257
4208: PUSH
4209: LD_INT 2
4211: EQUAL
4212: IFFALSE 4226
// SetClass ( i , 1 ) ;
4214: LD_VAR 0 2
4218: PPUSH
4219: LD_INT 1
4221: PPUSH
4222: CALL_OW 336
// PlaceUnitArea ( i , startArea , false ) ;
4226: LD_VAR 0 2
4230: PPUSH
4231: LD_INT 1
4233: PPUSH
4234: LD_INT 0
4236: PPUSH
4237: CALL_OW 49
// end ;
4241: GO 4035
4243: POP
4244: POP
// uc_side := 4 ;
4245: LD_ADDR_OWVAR 20
4249: PUSH
4250: LD_INT 4
4252: ST_TO_ADDR
// Harisson := PrepareUnit ( Harisson , false ,  ) ;
4253: LD_ADDR_EXP 19
4257: PUSH
4258: LD_STRING Harisson
4260: PPUSH
4261: LD_INT 0
4263: PPUSH
4264: LD_STRING 
4266: PPUSH
4267: CALL 29935 0 3
4271: ST_TO_ADDR
// PrepareScout ;
4272: CALL 4281 0 0
// end ;
4276: LD_VAR 0 1
4280: RET
// function PrepareScout ; var ape ; begin
4281: LD_INT 0
4283: PPUSH
4284: PPUSH
// uc_side := 4 ;
4285: LD_ADDR_OWVAR 20
4289: PUSH
4290: LD_INT 4
4292: ST_TO_ADDR
// uc_nation := 1 ;
4293: LD_ADDR_OWVAR 21
4297: PUSH
4298: LD_INT 1
4300: ST_TO_ADDR
// if LoadVariable ( FrankIn06 , 0 ) then
4301: LD_STRING FrankIn06
4303: PPUSH
4304: LD_INT 0
4306: PPUSH
4307: CALL_OW 30
4311: IFFALSE 4328
// Frank := CreateCharacter ( 06c_Frank ) else
4313: LD_ADDR_EXP 15
4317: PUSH
4318: LD_STRING 06c_Frank
4320: PPUSH
4321: CALL_OW 34
4325: ST_TO_ADDR
4326: GO 4368
// if LoadVariable ( FrankInDelta , 0 ) then
4328: LD_STRING FrankInDelta
4330: PPUSH
4331: LD_INT 0
4333: PPUSH
4334: CALL_OW 30
4338: IFFALSE 4355
// Frank := CreateCharacter ( 05_Frank ) else
4340: LD_ADDR_EXP 15
4344: PUSH
4345: LD_STRING 05_Frank
4347: PPUSH
4348: CALL_OW 34
4352: ST_TO_ADDR
4353: GO 4368
// Frank := CreateCharacter ( 04_Frank ) ;
4355: LD_ADDR_EXP 15
4359: PUSH
4360: LD_STRING 04_Frank
4362: PPUSH
4363: CALL_OW 34
4367: ST_TO_ADDR
// if Frank then
4368: LD_EXP 15
4372: IFFALSE 4505
// begin PlaceUnitArea ( Frank , scoutArea , false ) ;
4374: LD_EXP 15
4378: PPUSH
4379: LD_INT 2
4381: PPUSH
4382: LD_INT 0
4384: PPUSH
4385: CALL_OW 49
// SetClass ( Frank , 1 ) ;
4389: LD_EXP 15
4393: PPUSH
4394: LD_INT 1
4396: PPUSH
4397: CALL_OW 336
// uc_side := 0 ;
4401: LD_ADDR_OWVAR 20
4405: PUSH
4406: LD_INT 0
4408: ST_TO_ADDR
// uc_nation := 0 ;
4409: LD_ADDR_OWVAR 21
4413: PUSH
4414: LD_INT 0
4416: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 0 ) ;
4417: LD_INT 0
4419: PPUSH
4420: LD_INT 12
4422: PPUSH
4423: LD_INT 0
4425: PPUSH
4426: CALL_OW 380
// ape := CreateHuman ;
4430: LD_ADDR_VAR 0 2
4434: PUSH
4435: CALL_OW 44
4439: ST_TO_ADDR
// PlaceUnitXYR ( ape , GetX ( Frank ) , GetY ( Frank ) , 5 , false ) ;
4440: LD_VAR 0 2
4444: PPUSH
4445: LD_EXP 15
4449: PPUSH
4450: CALL_OW 250
4454: PPUSH
4455: LD_EXP 15
4459: PPUSH
4460: CALL_OW 251
4464: PPUSH
4465: LD_INT 5
4467: PPUSH
4468: LD_INT 0
4470: PPUSH
4471: CALL_OW 50
// ComTurnUnit ( ape , Frank ) ;
4475: LD_VAR 0 2
4479: PPUSH
4480: LD_EXP 15
4484: PPUSH
4485: CALL_OW 119
// ComTurnUnit ( Frank , ape ) ;
4489: LD_EXP 15
4493: PPUSH
4494: LD_VAR 0 2
4498: PPUSH
4499: CALL_OW 119
// exit ;
4503: GO 4548
// end ; Kikuchi := PrepareUnit ( Yamoko , false ,  ) ;
4505: LD_ADDR_EXP 18
4509: PUSH
4510: LD_STRING Yamoko
4512: PPUSH
4513: LD_INT 0
4515: PPUSH
4516: LD_STRING 
4518: PPUSH
4519: CALL 29935 0 3
4523: ST_TO_ADDR
// PlaceUnitArea ( Kikuchi , scoutArea , false ) ;
4524: LD_EXP 18
4528: PPUSH
4529: LD_INT 2
4531: PPUSH
4532: LD_INT 0
4534: PPUSH
4535: CALL_OW 49
// ComHold ( Kikuchi ) ;
4539: LD_EXP 18
4543: PPUSH
4544: CALL_OW 140
// end ; end_of_file
4548: LD_VAR 0 1
4552: RET
// export ru_rebuild_list ; export function PrepareRussians ; var i , j , r , un , skill , filter , tmp , dep_list , lab_list , fac_list , breastworks_list , bunker_list , turret_list , weapons_list , personel_counter ; begin
4553: LD_INT 0
4555: PPUSH
4556: PPUSH
4557: PPUSH
4558: PPUSH
4559: PPUSH
4560: PPUSH
4561: PPUSH
4562: PPUSH
4563: PPUSH
4564: PPUSH
4565: PPUSH
4566: PPUSH
4567: PPUSH
4568: PPUSH
4569: PPUSH
4570: PPUSH
// ru_rebuild_list := [ ] ;
4571: LD_ADDR_EXP 20
4575: PUSH
4576: EMPTY
4577: ST_TO_ADDR
// uc_side := 3 ;
4578: LD_ADDR_OWVAR 20
4582: PUSH
4583: LD_INT 3
4585: ST_TO_ADDR
// uc_nation := 3 ;
4586: LD_ADDR_OWVAR 21
4590: PUSH
4591: LD_INT 3
4593: ST_TO_ADDR
// if Difficulty > 1 then
4594: LD_OWVAR 67
4598: PUSH
4599: LD_INT 1
4601: GREATER
4602: IFFALSE 4738
// begin bc_type := b_breastwork ;
4604: LD_ADDR_OWVAR 42
4608: PUSH
4609: LD_INT 31
4611: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 78 , 74 , 2 ) ;
4612: LD_INT 78
4614: PPUSH
4615: LD_INT 74
4617: PPUSH
4618: LD_INT 2
4620: PPUSH
4621: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 171 , 193 , 4 ) ;
4625: LD_INT 171
4627: PPUSH
4628: LD_INT 193
4630: PPUSH
4631: LD_INT 4
4633: PPUSH
4634: CALL_OW 47
// bc_type := b_turret ;
4638: LD_ADDR_OWVAR 42
4642: PUSH
4643: LD_INT 33
4645: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 129 , 96 , 3 ) ;
4646: LD_INT 129
4648: PPUSH
4649: LD_INT 96
4651: PPUSH
4652: LD_INT 3
4654: PPUSH
4655: CALL_OW 47
// if Difficulty > 2 then
4659: LD_OWVAR 67
4663: PUSH
4664: LD_INT 2
4666: GREATER
4667: IFFALSE 4738
// begin RemoveUnit ( HexInfo ( 83 , 141 ) ) ;
4669: LD_INT 83
4671: PPUSH
4672: LD_INT 141
4674: PPUSH
4675: CALL_OW 428
4679: PPUSH
4680: CALL_OW 64
// RemoveUnit ( HexInfo ( 78 , 133 ) ) ;
4684: LD_INT 78
4686: PPUSH
4687: LD_INT 133
4689: PPUSH
4690: CALL_OW 428
4694: PPUSH
4695: CALL_OW 64
// CreateAndPlaceBuildingXYD ( 83 , 141 , 2 ) ;
4699: LD_INT 83
4701: PPUSH
4702: LD_INT 141
4704: PPUSH
4705: LD_INT 2
4707: PPUSH
4708: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 78 , 133 , 2 ) ;
4712: LD_INT 78
4714: PPUSH
4715: LD_INT 133
4717: PPUSH
4718: LD_INT 2
4720: PPUSH
4721: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 145 , 112 , 3 ) ;
4725: LD_INT 145
4727: PPUSH
4728: LD_INT 112
4730: PPUSH
4731: LD_INT 3
4733: PPUSH
4734: CALL_OW 47
// end ; end ; dep_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
4738: LD_ADDR_VAR 0 9
4742: PUSH
4743: LD_INT 22
4745: PUSH
4746: LD_INT 3
4748: PUSH
4749: EMPTY
4750: LIST
4751: LIST
4752: PUSH
4753: LD_INT 2
4755: PUSH
4756: LD_INT 30
4758: PUSH
4759: LD_INT 0
4761: PUSH
4762: EMPTY
4763: LIST
4764: LIST
4765: PUSH
4766: LD_INT 30
4768: PUSH
4769: LD_INT 1
4771: PUSH
4772: EMPTY
4773: LIST
4774: LIST
4775: PUSH
4776: EMPTY
4777: LIST
4778: LIST
4779: LIST
4780: PUSH
4781: EMPTY
4782: LIST
4783: LIST
4784: PPUSH
4785: CALL_OW 69
4789: ST_TO_ADDR
// lab_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
4790: LD_ADDR_VAR 0 10
4794: PUSH
4795: LD_INT 22
4797: PUSH
4798: LD_INT 3
4800: PUSH
4801: EMPTY
4802: LIST
4803: LIST
4804: PUSH
4805: LD_INT 2
4807: PUSH
4808: LD_INT 30
4810: PUSH
4811: LD_INT 6
4813: PUSH
4814: EMPTY
4815: LIST
4816: LIST
4817: PUSH
4818: LD_INT 30
4820: PUSH
4821: LD_INT 7
4823: PUSH
4824: EMPTY
4825: LIST
4826: LIST
4827: PUSH
4828: LD_INT 30
4830: PUSH
4831: LD_INT 8
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: PUSH
4838: EMPTY
4839: LIST
4840: LIST
4841: LIST
4842: LIST
4843: PUSH
4844: EMPTY
4845: LIST
4846: LIST
4847: PPUSH
4848: CALL_OW 69
4852: ST_TO_ADDR
// fac_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) ;
4853: LD_ADDR_VAR 0 11
4857: PUSH
4858: LD_INT 22
4860: PUSH
4861: LD_INT 3
4863: PUSH
4864: EMPTY
4865: LIST
4866: LIST
4867: PUSH
4868: LD_INT 30
4870: PUSH
4871: LD_INT 3
4873: PUSH
4874: EMPTY
4875: LIST
4876: LIST
4877: PUSH
4878: EMPTY
4879: LIST
4880: LIST
4881: PPUSH
4882: CALL_OW 69
4886: ST_TO_ADDR
// breastworks_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_breastwork ] ] ) ;
4887: LD_ADDR_VAR 0 12
4891: PUSH
4892: LD_INT 22
4894: PUSH
4895: LD_INT 3
4897: PUSH
4898: EMPTY
4899: LIST
4900: LIST
4901: PUSH
4902: LD_INT 30
4904: PUSH
4905: LD_INT 31
4907: PUSH
4908: EMPTY
4909: LIST
4910: LIST
4911: PUSH
4912: EMPTY
4913: LIST
4914: LIST
4915: PPUSH
4916: CALL_OW 69
4920: ST_TO_ADDR
// bunker_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) ;
4921: LD_ADDR_VAR 0 13
4925: PUSH
4926: LD_INT 22
4928: PUSH
4929: LD_INT 3
4931: PUSH
4932: EMPTY
4933: LIST
4934: LIST
4935: PUSH
4936: LD_INT 30
4938: PUSH
4939: LD_INT 32
4941: PUSH
4942: EMPTY
4943: LIST
4944: LIST
4945: PUSH
4946: EMPTY
4947: LIST
4948: LIST
4949: PPUSH
4950: CALL_OW 69
4954: ST_TO_ADDR
// turret_list := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_turret ] ] ) ;
4955: LD_ADDR_VAR 0 14
4959: PUSH
4960: LD_INT 22
4962: PUSH
4963: LD_INT 3
4965: PUSH
4966: EMPTY
4967: LIST
4968: LIST
4969: PUSH
4970: LD_INT 30
4972: PUSH
4973: LD_INT 33
4975: PUSH
4976: EMPTY
4977: LIST
4978: LIST
4979: PUSH
4980: EMPTY
4981: LIST
4982: LIST
4983: PPUSH
4984: CALL_OW 69
4988: ST_TO_ADDR
// weapons_list := [ [ ru_heavy_machine_gun , 5 ] , [ ru_gatling_gun , 50 ] , [ ru_gun , 30 ] , [ ru_heavy_gun , 15 ] ] ;
4989: LD_ADDR_VAR 0 15
4993: PUSH
4994: LD_INT 42
4996: PUSH
4997: LD_INT 5
4999: PUSH
5000: EMPTY
5001: LIST
5002: LIST
5003: PUSH
5004: LD_INT 43
5006: PUSH
5007: LD_INT 50
5009: PUSH
5010: EMPTY
5011: LIST
5012: LIST
5013: PUSH
5014: LD_INT 44
5016: PUSH
5017: LD_INT 30
5019: PUSH
5020: EMPTY
5021: LIST
5022: LIST
5023: PUSH
5024: LD_INT 46
5026: PUSH
5027: LD_INT 15
5029: PUSH
5030: EMPTY
5031: LIST
5032: LIST
5033: PUSH
5034: EMPTY
5035: LIST
5036: LIST
5037: LIST
5038: LIST
5039: ST_TO_ADDR
// personel_counter := [ 0 , 4 , 6 , 3 ] ;
5040: LD_ADDR_VAR 0 16
5044: PUSH
5045: LD_INT 0
5047: PUSH
5048: LD_INT 4
5050: PUSH
5051: LD_INT 6
5053: PUSH
5054: LD_INT 3
5056: PUSH
5057: EMPTY
5058: LIST
5059: LIST
5060: LIST
5061: LIST
5062: ST_TO_ADDR
// skill := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
5063: LD_ADDR_VAR 0 6
5067: PUSH
5068: LD_INT 4
5070: PUSH
5071: LD_INT 5
5073: PUSH
5074: LD_INT 6
5076: PUSH
5077: LD_INT 6
5079: PUSH
5080: EMPTY
5081: LIST
5082: LIST
5083: LIST
5084: LIST
5085: PUSH
5086: LD_OWVAR 67
5090: ARRAY
5091: ST_TO_ADDR
// SetBName ( ru_dep_main , am_tukh ) ;
5092: LD_INT 16
5094: PPUSH
5095: LD_STRING am_tukh
5097: PPUSH
5098: CALL_OW 500
// for i in FilterAllUnits ( [ f_type , unit_building ] ) do
5102: LD_ADDR_VAR 0 2
5106: PUSH
5107: LD_INT 21
5109: PUSH
5110: LD_INT 3
5112: PUSH
5113: EMPTY
5114: LIST
5115: LIST
5116: PPUSH
5117: CALL_OW 69
5121: PUSH
5122: FOR_IN
5123: IFFALSE 5160
// SetBLevel ( i , [ 4 , 5 , 6 , 7 ] [ Difficulty ] ) ;
5125: LD_VAR 0 2
5129: PPUSH
5130: LD_INT 4
5132: PUSH
5133: LD_INT 5
5135: PUSH
5136: LD_INT 6
5138: PUSH
5139: LD_INT 7
5141: PUSH
5142: EMPTY
5143: LIST
5144: LIST
5145: LIST
5146: LIST
5147: PUSH
5148: LD_OWVAR 67
5152: ARRAY
5153: PPUSH
5154: CALL_OW 241
5158: GO 5122
5160: POP
5161: POP
// for i in dep_list do
5162: LD_ADDR_VAR 0 2
5166: PUSH
5167: LD_VAR 0 9
5171: PUSH
5172: FOR_IN
5173: IFFALSE 5217
// begin SetResourceType ( GetBase ( i ) , mat_cans , 1000 ) ;
5175: LD_VAR 0 2
5179: PPUSH
5180: CALL_OW 274
5184: PPUSH
5185: LD_INT 1
5187: PPUSH
5188: LD_INT 1000
5190: PPUSH
5191: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 1000 ) ;
5195: LD_VAR 0 2
5199: PPUSH
5200: CALL_OW 274
5204: PPUSH
5205: LD_INT 2
5207: PPUSH
5208: LD_INT 1000
5210: PPUSH
5211: CALL_OW 277
// end ;
5215: GO 5172
5217: POP
5218: POP
// InitHc ;
5219: CALL_OW 19
// tmp := bunker_list * [ 45 , 60 , 75 , 80 ] [ Difficulty ] div 100 ;
5223: LD_ADDR_VAR 0 8
5227: PUSH
5228: LD_VAR 0 13
5232: PUSH
5233: LD_INT 45
5235: PUSH
5236: LD_INT 60
5238: PUSH
5239: LD_INT 75
5241: PUSH
5242: LD_INT 80
5244: PUSH
5245: EMPTY
5246: LIST
5247: LIST
5248: LIST
5249: LIST
5250: PUSH
5251: LD_OWVAR 67
5255: ARRAY
5256: MUL
5257: PUSH
5258: LD_INT 100
5260: DIV
5261: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , tmp ) ;
5262: LD_ADDR_VAR 0 16
5266: PUSH
5267: LD_VAR 0 16
5271: PPUSH
5272: LD_INT 1
5274: PPUSH
5275: LD_VAR 0 8
5279: PPUSH
5280: CALL_OW 1
5284: ST_TO_ADDR
// tmp := [ ] ;
5285: LD_ADDR_VAR 0 8
5289: PUSH
5290: EMPTY
5291: ST_TO_ADDR
// for i in bunker_list do
5292: LD_ADDR_VAR 0 2
5296: PUSH
5297: LD_VAR 0 13
5301: PUSH
5302: FOR_IN
5303: IFFALSE 5399
// if i mod 10 + 1 < tmp then
5305: LD_VAR 0 2
5309: PUSH
5310: LD_INT 10
5312: MOD
5313: PUSH
5314: LD_INT 1
5316: PLUS
5317: PUSH
5318: LD_VAR 0 8
5322: LESS
5323: IFFALSE 5368
// tmp := Insert ( tmp , i mod rand ( 3 , 5 ) + 1 , i ) else
5325: LD_ADDR_VAR 0 8
5329: PUSH
5330: LD_VAR 0 8
5334: PPUSH
5335: LD_VAR 0 2
5339: PUSH
5340: LD_INT 3
5342: PPUSH
5343: LD_INT 5
5345: PPUSH
5346: CALL_OW 12
5350: MOD
5351: PUSH
5352: LD_INT 1
5354: PLUS
5355: PPUSH
5356: LD_VAR 0 2
5360: PPUSH
5361: CALL_OW 2
5365: ST_TO_ADDR
5366: GO 5397
// tmp := Insert ( tmp , tmp + 1 , i ) ;
5368: LD_ADDR_VAR 0 8
5372: PUSH
5373: LD_VAR 0 8
5377: PPUSH
5378: LD_VAR 0 8
5382: PUSH
5383: LD_INT 1
5385: PLUS
5386: PPUSH
5387: LD_VAR 0 2
5391: PPUSH
5392: CALL_OW 2
5396: ST_TO_ADDR
5397: GO 5302
5399: POP
5400: POP
// bunker_list := tmp ;
5401: LD_ADDR_VAR 0 13
5405: PUSH
5406: LD_VAR 0 8
5410: ST_TO_ADDR
// for i in bunker_list ^ turret_list do
5411: LD_ADDR_VAR 0 2
5415: PUSH
5416: LD_VAR 0 13
5420: PUSH
5421: LD_VAR 0 14
5425: ADD
5426: PUSH
5427: FOR_IN
5428: IFFALSE 5451
// PlaceWeaponTurret ( i , GetTurretWeaponBase ( i ) ) ;
5430: LD_VAR 0 2
5434: PPUSH
5435: LD_VAR 0 2
5439: PPUSH
5440: CALL 2200 0 1
5444: PPUSH
5445: CALL_OW 431
5449: GO 5427
5451: POP
5452: POP
// while ( personel_counter [ 1 ] ) do
5453: LD_VAR 0 16
5457: PUSH
5458: LD_INT 1
5460: ARRAY
5461: IFFALSE 5569
// begin i := rand ( 1 , bunker_list ) ;
5463: LD_ADDR_VAR 0 2
5467: PUSH
5468: LD_INT 1
5470: PPUSH
5471: LD_VAR 0 13
5475: PPUSH
5476: CALL_OW 12
5480: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5481: LD_INT 0
5483: PPUSH
5484: LD_INT 1
5486: PPUSH
5487: LD_VAR 0 6
5491: PPUSH
5492: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , bunker_list [ i ] ) ;
5496: CALL_OW 44
5500: PPUSH
5501: LD_VAR 0 13
5505: PUSH
5506: LD_VAR 0 2
5510: ARRAY
5511: PPUSH
5512: CALL_OW 52
// bunker_list := Delete ( bunker_list , i ) ;
5516: LD_ADDR_VAR 0 13
5520: PUSH
5521: LD_VAR 0 13
5525: PPUSH
5526: LD_VAR 0 2
5530: PPUSH
5531: CALL_OW 3
5535: ST_TO_ADDR
// personel_counter := Replace ( personel_counter , 1 , personel_counter [ 1 ] - 1 ) ;
5536: LD_ADDR_VAR 0 16
5540: PUSH
5541: LD_VAR 0 16
5545: PPUSH
5546: LD_INT 1
5548: PPUSH
5549: LD_VAR 0 16
5553: PUSH
5554: LD_INT 1
5556: ARRAY
5557: PUSH
5558: LD_INT 1
5560: MINUS
5561: PPUSH
5562: CALL_OW 1
5566: ST_TO_ADDR
// end ;
5567: GO 5453
// for i = 1 to personel_counter [ 2 ] do
5569: LD_ADDR_VAR 0 2
5573: PUSH
5574: DOUBLE
5575: LD_INT 1
5577: DEC
5578: ST_TO_ADDR
5579: LD_VAR 0 16
5583: PUSH
5584: LD_INT 2
5586: ARRAY
5587: PUSH
5588: FOR_TO
5589: IFFALSE 5620
// begin PrepareHuman ( false , 2 , skill ) ;
5591: LD_INT 0
5593: PPUSH
5594: LD_INT 2
5596: PPUSH
5597: LD_VAR 0 6
5601: PPUSH
5602: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , ru_dep_main ) ;
5606: CALL_OW 44
5610: PPUSH
5611: LD_INT 16
5613: PPUSH
5614: CALL_OW 52
// end ;
5618: GO 5588
5620: POP
5621: POP
// for i = 1 to personel_counter [ 3 ] do
5622: LD_ADDR_VAR 0 2
5626: PUSH
5627: DOUBLE
5628: LD_INT 1
5630: DEC
5631: ST_TO_ADDR
5632: LD_VAR 0 16
5636: PUSH
5637: LD_INT 3
5639: ARRAY
5640: PUSH
5641: FOR_TO
5642: IFFALSE 5689
// begin PrepareHuman ( false , 3 , skill ) ;
5644: LD_INT 0
5646: PPUSH
5647: LD_INT 3
5649: PPUSH
5650: LD_VAR 0 6
5654: PPUSH
5655: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , fac_list [ i mod 2 + 1 ] ) ;
5659: CALL_OW 44
5663: PPUSH
5664: LD_VAR 0 11
5668: PUSH
5669: LD_VAR 0 2
5673: PUSH
5674: LD_INT 2
5676: MOD
5677: PUSH
5678: LD_INT 1
5680: PLUS
5681: ARRAY
5682: PPUSH
5683: CALL_OW 52
// end ;
5687: GO 5641
5689: POP
5690: POP
// for i = 1 to personel_counter [ 4 ] do
5691: LD_ADDR_VAR 0 2
5695: PUSH
5696: DOUBLE
5697: LD_INT 1
5699: DEC
5700: ST_TO_ADDR
5701: LD_VAR 0 16
5705: PUSH
5706: LD_INT 4
5708: ARRAY
5709: PUSH
5710: FOR_TO
5711: IFFALSE 5748
// begin PrepareHuman ( false , 4 , skill ) ;
5713: LD_INT 0
5715: PPUSH
5716: LD_INT 4
5718: PPUSH
5719: LD_VAR 0 6
5723: PPUSH
5724: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , lab_list [ 1 ] ) ;
5728: CALL_OW 44
5732: PPUSH
5733: LD_VAR 0 10
5737: PUSH
5738: LD_INT 1
5740: ARRAY
5741: PPUSH
5742: CALL_OW 52
// end ;
5746: GO 5710
5748: POP
5749: POP
// for i in breastworks_list do
5750: LD_ADDR_VAR 0 2
5754: PUSH
5755: LD_VAR 0 12
5759: PUSH
5760: FOR_IN
5761: IFFALSE 5873
// begin r := GetDir ( i ) ;
5763: LD_ADDR_VAR 0 4
5767: PUSH
5768: LD_VAR 0 2
5772: PPUSH
5773: CALL_OW 254
5777: ST_TO_ADDR
// if r > 3 then
5778: LD_VAR 0 4
5782: PUSH
5783: LD_INT 3
5785: GREATER
5786: IFFALSE 5804
// r := r - 3 else
5788: LD_ADDR_VAR 0 4
5792: PUSH
5793: LD_VAR 0 4
5797: PUSH
5798: LD_INT 3
5800: MINUS
5801: ST_TO_ADDR
5802: GO 5818
// r := r + 3 ;
5804: LD_ADDR_VAR 0 4
5808: PUSH
5809: LD_VAR 0 4
5813: PUSH
5814: LD_INT 3
5816: PLUS
5817: ST_TO_ADDR
// PrepareHuman ( false , 1 , skill ) ;
5818: LD_INT 0
5820: PPUSH
5821: LD_INT 1
5823: PPUSH
5824: LD_VAR 0 6
5828: PPUSH
5829: CALL_OW 380
// un := CreateHuman ;
5833: LD_ADDR_VAR 0 5
5837: PUSH
5838: CALL_OW 44
5842: ST_TO_ADDR
// SetDir ( un , r ) ;
5843: LD_VAR 0 5
5847: PPUSH
5848: LD_VAR 0 4
5852: PPUSH
5853: CALL_OW 233
// PlaceHumanInUnit ( un , i ) ;
5857: LD_VAR 0 5
5861: PPUSH
5862: LD_VAR 0 2
5866: PPUSH
5867: CALL_OW 52
// end ;
5871: GO 5760
5873: POP
5874: POP
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) ;
5875: LD_ADDR_VAR 0 8
5879: PUSH
5880: LD_INT 22
5882: PUSH
5883: LD_INT 3
5885: PUSH
5886: EMPTY
5887: LIST
5888: LIST
5889: PUSH
5890: LD_INT 25
5892: PUSH
5893: LD_INT 3
5895: PUSH
5896: EMPTY
5897: LIST
5898: LIST
5899: PUSH
5900: EMPTY
5901: LIST
5902: LIST
5903: PPUSH
5904: CALL_OW 69
5908: ST_TO_ADDR
// r := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
5909: LD_ADDR_VAR 0 4
5913: PUSH
5914: LD_INT 4
5916: PUSH
5917: LD_INT 5
5919: PUSH
5920: LD_INT 6
5922: PUSH
5923: LD_INT 6
5925: PUSH
5926: EMPTY
5927: LIST
5928: LIST
5929: LIST
5930: LIST
5931: PUSH
5932: LD_OWVAR 67
5936: ARRAY
5937: ST_TO_ADDR
// for i = 1 to r do
5938: LD_ADDR_VAR 0 2
5942: PUSH
5943: DOUBLE
5944: LD_INT 1
5946: DEC
5947: ST_TO_ADDR
5948: LD_VAR 0 4
5952: PUSH
5953: FOR_TO
5954: IFFALSE 6127
// begin un := PrepareTank ( 3 , 3 , [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked ] [ i mod 3 + 1 ] , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 100 ) ;
5956: LD_ADDR_VAR 0 5
5960: PUSH
5961: LD_INT 3
5963: PPUSH
5964: LD_INT 3
5966: PPUSH
5967: LD_INT 22
5969: PUSH
5970: LD_INT 22
5972: PUSH
5973: LD_INT 24
5975: PUSH
5976: EMPTY
5977: LIST
5978: LIST
5979: LIST
5980: PUSH
5981: LD_VAR 0 2
5985: PUSH
5986: LD_INT 3
5988: MOD
5989: PUSH
5990: LD_INT 1
5992: PLUS
5993: ARRAY
5994: PPUSH
5995: LD_INT 1
5997: PPUSH
5998: LD_INT 1
6000: PPUSH
6001: LD_INT 43
6003: PUSH
6004: LD_INT 44
6006: PUSH
6007: LD_INT 42
6009: PUSH
6010: EMPTY
6011: LIST
6012: LIST
6013: LIST
6014: PUSH
6015: LD_VAR 0 2
6019: PUSH
6020: LD_INT 3
6022: MOD
6023: PUSH
6024: LD_INT 1
6026: PLUS
6027: ARRAY
6028: PPUSH
6029: LD_INT 100
6031: PPUSH
6032: CALL 512 0 7
6036: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
6037: LD_VAR 0 5
6041: PPUSH
6042: LD_INT 0
6044: PPUSH
6045: LD_INT 5
6047: PPUSH
6048: CALL_OW 12
6052: PPUSH
6053: CALL_OW 233
// PlaceUnitArea ( un , parkingArea , false ) ;
6057: LD_VAR 0 5
6061: PPUSH
6062: LD_INT 5
6064: PPUSH
6065: LD_INT 0
6067: PPUSH
6068: CALL_OW 49
// if i > tmp - 2 then
6072: LD_VAR 0 2
6076: PUSH
6077: LD_VAR 0 8
6081: PUSH
6082: LD_INT 2
6084: MINUS
6085: GREATER
6086: IFFALSE 6090
// continue ;
6088: GO 5953
// ComExitBuilding ( tmp [ i ] ) ;
6090: LD_VAR 0 8
6094: PUSH
6095: LD_VAR 0 2
6099: ARRAY
6100: PPUSH
6101: CALL_OW 122
// AddComEnterUnit ( tmp [ i ] , un ) ;
6105: LD_VAR 0 8
6109: PUSH
6110: LD_VAR 0 2
6114: ARRAY
6115: PPUSH
6116: LD_VAR 0 5
6120: PPUSH
6121: CALL_OW 180
// end ;
6125: GO 5953
6127: POP
6128: POP
// end ;
6129: LD_VAR 0 1
6133: RET
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) do var i , filter , tmp , engs , enemy ;
6134: LD_INT 22
6136: PUSH
6137: LD_INT 3
6139: PUSH
6140: EMPTY
6141: LIST
6142: LIST
6143: PUSH
6144: LD_INT 25
6146: PUSH
6147: LD_INT 2
6149: PUSH
6150: EMPTY
6151: LIST
6152: LIST
6153: PUSH
6154: EMPTY
6155: LIST
6156: LIST
6157: PPUSH
6158: CALL_OW 69
6162: IFFALSE 6894
6164: GO 6166
6166: DISABLE
6167: LD_INT 0
6169: PPUSH
6170: PPUSH
6171: PPUSH
6172: PPUSH
6173: PPUSH
// begin enable ;
6174: ENABLE
// filter := FilterUnitsInArea ( baseArea , [ [ f_not , [ f_lives , 1000 ] ] , [ f_type , unit_building ] ] ) ;
6175: LD_ADDR_VAR 0 2
6179: PUSH
6180: LD_INT 6
6182: PPUSH
6183: LD_INT 3
6185: PUSH
6186: LD_INT 24
6188: PUSH
6189: LD_INT 1000
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: PUSH
6200: LD_INT 21
6202: PUSH
6203: LD_INT 3
6205: PUSH
6206: EMPTY
6207: LIST
6208: LIST
6209: PUSH
6210: EMPTY
6211: LIST
6212: LIST
6213: PPUSH
6214: CALL_OW 70
6218: ST_TO_ADDR
// engs := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
6219: LD_ADDR_VAR 0 4
6223: PUSH
6224: LD_INT 22
6226: PUSH
6227: LD_INT 3
6229: PUSH
6230: EMPTY
6231: LIST
6232: LIST
6233: PUSH
6234: LD_INT 25
6236: PUSH
6237: LD_INT 2
6239: PUSH
6240: EMPTY
6241: LIST
6242: LIST
6243: PUSH
6244: EMPTY
6245: LIST
6246: LIST
6247: PPUSH
6248: CALL_OW 69
6252: ST_TO_ADDR
// if not filter and not ru_rebuild_list then
6253: LD_VAR 0 2
6257: NOT
6258: PUSH
6259: LD_EXP 20
6263: NOT
6264: AND
6265: IFFALSE 6335
// begin for i in engs do
6267: LD_ADDR_VAR 0 1
6271: PUSH
6272: LD_VAR 0 4
6276: PUSH
6277: FOR_IN
6278: IFFALSE 6333
// if GetLives ( i ) = 1000 and not HasTask ( i ) and not IsInUnit ( i ) then
6280: LD_VAR 0 1
6284: PPUSH
6285: CALL_OW 256
6289: PUSH
6290: LD_INT 1000
6292: EQUAL
6293: PUSH
6294: LD_VAR 0 1
6298: PPUSH
6299: CALL_OW 314
6303: NOT
6304: AND
6305: PUSH
6306: LD_VAR 0 1
6310: PPUSH
6311: CALL_OW 310
6315: NOT
6316: AND
6317: IFFALSE 6331
// ComEnterUnit ( i , ru_dep_main ) ;
6319: LD_VAR 0 1
6323: PPUSH
6324: LD_INT 16
6326: PPUSH
6327: CALL_OW 120
6331: GO 6277
6333: POP
6334: POP
// end ; if UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) then
6335: LD_VAR 0 4
6339: PPUSH
6340: LD_INT 3
6342: PUSH
6343: LD_INT 24
6345: PUSH
6346: LD_INT 650
6348: PUSH
6349: EMPTY
6350: LIST
6351: LIST
6352: PUSH
6353: EMPTY
6354: LIST
6355: LIST
6356: PPUSH
6357: CALL_OW 72
6361: IFFALSE 6454
// begin tmp := UnitFilter ( engs , [ f_not , [ f_lives , 650 ] ] ) ;
6363: LD_ADDR_VAR 0 3
6367: PUSH
6368: LD_VAR 0 4
6372: PPUSH
6373: LD_INT 3
6375: PUSH
6376: LD_INT 24
6378: PUSH
6379: LD_INT 650
6381: PUSH
6382: EMPTY
6383: LIST
6384: LIST
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: PPUSH
6390: CALL_OW 72
6394: ST_TO_ADDR
// for i in tmp do
6395: LD_ADDR_VAR 0 1
6399: PUSH
6400: LD_VAR 0 3
6404: PUSH
6405: FOR_IN
6406: IFFALSE 6452
// if not IsInArea ( i , mainBaseArea ) then
6408: LD_VAR 0 1
6412: PPUSH
6413: LD_INT 14
6415: PPUSH
6416: CALL_OW 308
6420: NOT
6421: IFFALSE 6450
// begin ComMoveXY ( i , 129 , 125 ) ;
6423: LD_VAR 0 1
6427: PPUSH
6428: LD_INT 129
6430: PPUSH
6431: LD_INT 125
6433: PPUSH
6434: CALL_OW 111
// AddComWait ( i , 0 0$30 ) ;
6438: LD_VAR 0 1
6442: PPUSH
6443: LD_INT 1050
6445: PPUSH
6446: CALL_OW 202
// end ;
6450: GO 6405
6452: POP
6453: POP
// end ; engs := UnitFilter ( engs , [ f_lives , 650 ] ) ;
6454: LD_ADDR_VAR 0 4
6458: PUSH
6459: LD_VAR 0 4
6463: PPUSH
6464: LD_INT 24
6466: PUSH
6467: LD_INT 650
6469: PUSH
6470: EMPTY
6471: LIST
6472: LIST
6473: PPUSH
6474: CALL_OW 72
6478: ST_TO_ADDR
// if not engs then
6479: LD_VAR 0 4
6483: NOT
6484: IFFALSE 6488
// exit ;
6486: GO 6894
// if filter then
6488: LD_VAR 0 2
6492: IFFALSE 6751
// begin for i in engs do
6494: LD_ADDR_VAR 0 1
6498: PUSH
6499: LD_VAR 0 4
6503: PUSH
6504: FOR_IN
6505: IFFALSE 6529
// if IsInUnit ( i ) then
6507: LD_VAR 0 1
6511: PPUSH
6512: CALL_OW 310
6516: IFFALSE 6527
// ComExitBuilding ( i ) ;
6518: LD_VAR 0 1
6522: PPUSH
6523: CALL_OW 122
6527: GO 6504
6529: POP
6530: POP
// wait ( 3 ) ;
6531: LD_INT 3
6533: PPUSH
6534: CALL_OW 67
// if filter >= 2 and engs >= 2 then
6538: LD_VAR 0 2
6542: PUSH
6543: LD_INT 2
6545: GREATEREQUAL
6546: PUSH
6547: LD_VAR 0 4
6551: PUSH
6552: LD_INT 2
6554: GREATEREQUAL
6555: AND
6556: IFFALSE 6704
// begin for i = 1 to engs / 2 do
6558: LD_ADDR_VAR 0 1
6562: PUSH
6563: DOUBLE
6564: LD_INT 1
6566: DEC
6567: ST_TO_ADDR
6568: LD_VAR 0 4
6572: PUSH
6573: LD_INT 2
6575: DIVREAL
6576: PUSH
6577: FOR_TO
6578: IFFALSE 6624
// if not HasTask ( engs [ i ] ) then
6580: LD_VAR 0 4
6584: PUSH
6585: LD_VAR 0 1
6589: ARRAY
6590: PPUSH
6591: CALL_OW 314
6595: NOT
6596: IFFALSE 6622
// ComRepairBuilding ( engs [ i ] , filter [ 1 ] ) ;
6598: LD_VAR 0 4
6602: PUSH
6603: LD_VAR 0 1
6607: ARRAY
6608: PPUSH
6609: LD_VAR 0 2
6613: PUSH
6614: LD_INT 1
6616: ARRAY
6617: PPUSH
6618: CALL_OW 130
6622: GO 6577
6624: POP
6625: POP
// for i = engs / 2 + 1 to engs do
6626: LD_ADDR_VAR 0 1
6630: PUSH
6631: DOUBLE
6632: LD_VAR 0 4
6636: PUSH
6637: LD_INT 2
6639: DIVREAL
6640: PUSH
6641: LD_INT 1
6643: PLUS
6644: DEC
6645: ST_TO_ADDR
6646: LD_VAR 0 4
6650: PUSH
6651: FOR_TO
6652: IFFALSE 6700
// if not HasTask ( engs [ i ] ) then
6654: LD_VAR 0 4
6658: PUSH
6659: LD_VAR 0 1
6663: ARRAY
6664: PPUSH
6665: CALL_OW 314
6669: NOT
6670: IFFALSE 6698
// ComRepairBuilding ( engs [ i ] , filter [ filter ] ) ;
6672: LD_VAR 0 4
6676: PUSH
6677: LD_VAR 0 1
6681: ARRAY
6682: PPUSH
6683: LD_VAR 0 2
6687: PUSH
6688: LD_VAR 0 2
6692: ARRAY
6693: PPUSH
6694: CALL_OW 130
6698: GO 6651
6700: POP
6701: POP
// end else
6702: GO 6751
// for i in engs do
6704: LD_ADDR_VAR 0 1
6708: PUSH
6709: LD_VAR 0 4
6713: PUSH
6714: FOR_IN
6715: IFFALSE 6749
// if not HasTask ( i ) then
6717: LD_VAR 0 1
6721: PPUSH
6722: CALL_OW 314
6726: NOT
6727: IFFALSE 6747
// ComRepairBuilding ( i , filter [ 1 ] ) ;
6729: LD_VAR 0 1
6733: PPUSH
6734: LD_VAR 0 2
6738: PUSH
6739: LD_INT 1
6741: ARRAY
6742: PPUSH
6743: CALL_OW 130
6747: GO 6714
6749: POP
6750: POP
// end ; enemy := FilterAllUnits ( [ f_enemy , 3 ] ) ;
6751: LD_ADDR_VAR 0 5
6755: PUSH
6756: LD_INT 81
6758: PUSH
6759: LD_INT 3
6761: PUSH
6762: EMPTY
6763: LIST
6764: LIST
6765: PPUSH
6766: CALL_OW 69
6770: ST_TO_ADDR
// if ru_rebuild_list and not filter then
6771: LD_EXP 20
6775: PUSH
6776: LD_VAR 0 2
6780: NOT
6781: AND
6782: IFFALSE 6894
// begin ComExitBuilding ( engs ) ;
6784: LD_VAR 0 4
6788: PPUSH
6789: CALL_OW 122
// if GetDistUnitXY ( NearestUnitToXY ( enemy , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] ) > 10 then
6793: LD_VAR 0 5
6797: PPUSH
6798: LD_EXP 20
6802: PUSH
6803: LD_INT 2
6805: ARRAY
6806: PPUSH
6807: LD_EXP 20
6811: PUSH
6812: LD_INT 3
6814: ARRAY
6815: PPUSH
6816: CALL_OW 73
6820: PPUSH
6821: LD_EXP 20
6825: PUSH
6826: LD_INT 2
6828: ARRAY
6829: PPUSH
6830: LD_EXP 20
6834: PUSH
6835: LD_INT 3
6837: ARRAY
6838: PPUSH
6839: CALL_OW 297
6843: PUSH
6844: LD_INT 10
6846: GREATER
6847: IFFALSE 6894
// ComBuild ( engs , ru_rebuild_list [ 1 ] , ru_rebuild_list [ 2 ] , ru_rebuild_list [ 3 ] , ru_rebuild_list [ 4 ] ) ;
6849: LD_VAR 0 4
6853: PPUSH
6854: LD_EXP 20
6858: PUSH
6859: LD_INT 1
6861: ARRAY
6862: PPUSH
6863: LD_EXP 20
6867: PUSH
6868: LD_INT 2
6870: ARRAY
6871: PPUSH
6872: LD_EXP 20
6876: PUSH
6877: LD_INT 3
6879: ARRAY
6880: PPUSH
6881: LD_EXP 20
6885: PUSH
6886: LD_INT 4
6888: ARRAY
6889: PPUSH
6890: CALL_OW 145
// end ; end ;
6894: PPOPN 5
6896: END
// every 0 0$1 trigger GetLives ( ru_dep_main ) < 250 do var i , tmp ;
6897: LD_INT 16
6899: PPUSH
6900: CALL_OW 256
6904: PUSH
6905: LD_INT 250
6907: LESS
6908: IFFALSE 7098
6910: GO 6912
6912: DISABLE
6913: LD_INT 0
6915: PPUSH
6916: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ;
6917: LD_ADDR_VAR 0 2
6921: PUSH
6922: LD_INT 22
6924: PUSH
6925: LD_INT 3
6927: PUSH
6928: EMPTY
6929: LIST
6930: LIST
6931: PUSH
6932: LD_INT 2
6934: PUSH
6935: LD_INT 25
6937: PUSH
6938: LD_INT 1
6940: PUSH
6941: EMPTY
6942: LIST
6943: LIST
6944: PUSH
6945: LD_INT 25
6947: PUSH
6948: LD_INT 3
6950: PUSH
6951: EMPTY
6952: LIST
6953: LIST
6954: PUSH
6955: LD_INT 25
6957: PUSH
6958: LD_INT 4
6960: PUSH
6961: EMPTY
6962: LIST
6963: LIST
6964: PUSH
6965: EMPTY
6966: LIST
6967: LIST
6968: LIST
6969: LIST
6970: PUSH
6971: EMPTY
6972: LIST
6973: LIST
6974: PPUSH
6975: CALL_OW 69
6979: ST_TO_ADDR
// ComExitBuilding ( tmp ) ;
6980: LD_VAR 0 2
6984: PPUSH
6985: CALL_OW 122
// wait ( 3 ) ;
6989: LD_INT 3
6991: PPUSH
6992: CALL_OW 67
// ComMoveXY ( tmp , 156 , 211 ) ;
6996: LD_VAR 0 2
7000: PPUSH
7001: LD_INT 156
7003: PPUSH
7004: LD_INT 211
7006: PPUSH
7007: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7011: LD_INT 35
7013: PPUSH
7014: CALL_OW 67
// for i in tmp do
7018: LD_ADDR_VAR 0 1
7022: PUSH
7023: LD_VAR 0 2
7027: PUSH
7028: FOR_IN
7029: IFFALSE 7089
// if IsInArea ( i , escapeArea ) then
7031: LD_VAR 0 1
7035: PPUSH
7036: LD_INT 15
7038: PPUSH
7039: CALL_OW 308
7043: IFFALSE 7072
// begin RemoveUnit ( i ) ;
7045: LD_VAR 0 1
7049: PPUSH
7050: CALL_OW 64
// tmp := tmp diff i ;
7054: LD_ADDR_VAR 0 2
7058: PUSH
7059: LD_VAR 0 2
7063: PUSH
7064: LD_VAR 0 1
7068: DIFF
7069: ST_TO_ADDR
// end else
7070: GO 7087
// ComMoveXY ( i , 156 , 211 ) ;
7072: LD_VAR 0 1
7076: PPUSH
7077: LD_INT 156
7079: PPUSH
7080: LD_INT 211
7082: PPUSH
7083: CALL_OW 111
7087: GO 7028
7089: POP
7090: POP
// until not tmp ;
7091: LD_VAR 0 2
7095: NOT
7096: IFFALSE 7011
// end ;
7098: PPOPN 2
7100: END
// every 0 0$01 trigger GetLives ( ru_dep_main ) > 250 and FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_outside ] ] ] ) do var i , tmp ;
7101: LD_INT 16
7103: PPUSH
7104: CALL_OW 256
7108: PUSH
7109: LD_INT 250
7111: GREATER
7112: PUSH
7113: LD_INT 22
7115: PUSH
7116: LD_INT 3
7118: PUSH
7119: EMPTY
7120: LIST
7121: LIST
7122: PUSH
7123: LD_INT 25
7125: PUSH
7126: LD_INT 1
7128: PUSH
7129: EMPTY
7130: LIST
7131: LIST
7132: PUSH
7133: LD_INT 56
7135: PUSH
7136: EMPTY
7137: LIST
7138: PUSH
7139: EMPTY
7140: LIST
7141: LIST
7142: LIST
7143: PUSH
7144: EMPTY
7145: LIST
7146: PPUSH
7147: CALL_OW 69
7151: AND
7152: IFFALSE 7264
7154: GO 7156
7156: DISABLE
7157: LD_INT 0
7159: PPUSH
7160: PPUSH
// begin enable ;
7161: ENABLE
// tmp := FilterAllUnits ( [ [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_outside ] , [ f_not , [ f_hastask ] ] ] ] ) ;
7162: LD_ADDR_VAR 0 2
7166: PUSH
7167: LD_INT 22
7169: PUSH
7170: LD_INT 3
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: PUSH
7177: LD_INT 25
7179: PUSH
7180: LD_INT 1
7182: PUSH
7183: EMPTY
7184: LIST
7185: LIST
7186: PUSH
7187: LD_INT 56
7189: PUSH
7190: EMPTY
7191: LIST
7192: PUSH
7193: LD_INT 3
7195: PUSH
7196: LD_INT 60
7198: PUSH
7199: EMPTY
7200: LIST
7201: PUSH
7202: EMPTY
7203: LIST
7204: LIST
7205: PUSH
7206: EMPTY
7207: LIST
7208: LIST
7209: LIST
7210: LIST
7211: PUSH
7212: EMPTY
7213: LIST
7214: PPUSH
7215: CALL_OW 69
7219: ST_TO_ADDR
// if not tmp then
7220: LD_VAR 0 2
7224: NOT
7225: IFFALSE 7229
// exit ;
7227: GO 7264
// for i in tmp do
7229: LD_ADDR_VAR 0 1
7233: PUSH
7234: LD_VAR 0 2
7238: PUSH
7239: FOR_IN
7240: IFFALSE 7262
// GoToAnotherTower ( i , 0 , 143 , 143 ) ;
7242: LD_VAR 0 1
7246: PPUSH
7247: LD_INT 0
7249: PPUSH
7250: LD_INT 143
7252: PPUSH
7253: LD_INT 143
7255: PPUSH
7256: CALL 830 0 4
7260: GO 7239
7262: POP
7263: POP
// end ;
7264: PPOPN 2
7266: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) do var i , tmp , doc ;
7267: LD_INT 22
7269: PUSH
7270: LD_INT 3
7272: PUSH
7273: EMPTY
7274: LIST
7275: LIST
7276: PUSH
7277: LD_INT 25
7279: PUSH
7280: LD_INT 4
7282: PUSH
7283: EMPTY
7284: LIST
7285: LIST
7286: PUSH
7287: EMPTY
7288: LIST
7289: LIST
7290: PPUSH
7291: CALL_OW 69
7295: IFFALSE 7549
7297: GO 7299
7299: DISABLE
7300: LD_INT 0
7302: PPUSH
7303: PPUSH
7304: PPUSH
// begin enable ;
7305: ENABLE
// tmp := FilterUnitsInArea ( mainBaseArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
7306: LD_ADDR_VAR 0 2
7310: PUSH
7311: LD_INT 14
7313: PPUSH
7314: LD_INT 22
7316: PUSH
7317: LD_INT 3
7319: PUSH
7320: EMPTY
7321: LIST
7322: LIST
7323: PUSH
7324: LD_INT 21
7326: PUSH
7327: LD_INT 1
7329: PUSH
7330: EMPTY
7331: LIST
7332: LIST
7333: PUSH
7334: LD_INT 3
7336: PUSH
7337: LD_INT 24
7339: PUSH
7340: LD_INT 1000
7342: PUSH
7343: EMPTY
7344: LIST
7345: LIST
7346: PUSH
7347: EMPTY
7348: LIST
7349: LIST
7350: PUSH
7351: EMPTY
7352: LIST
7353: LIST
7354: LIST
7355: PPUSH
7356: CALL_OW 70
7360: ST_TO_ADDR
// doc := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) ;
7361: LD_ADDR_VAR 0 3
7365: PUSH
7366: LD_INT 22
7368: PUSH
7369: LD_INT 3
7371: PUSH
7372: EMPTY
7373: LIST
7374: LIST
7375: PUSH
7376: LD_INT 25
7378: PUSH
7379: LD_INT 4
7381: PUSH
7382: EMPTY
7383: LIST
7384: LIST
7385: PUSH
7386: EMPTY
7387: LIST
7388: LIST
7389: PPUSH
7390: CALL_OW 69
7394: ST_TO_ADDR
// if not doc then
7395: LD_VAR 0 3
7399: NOT
7400: IFFALSE 7404
// exit ;
7402: GO 7549
// if not tmp then
7404: LD_VAR 0 2
7408: NOT
7409: IFFALSE 7500
// begin if not IsInUnit ( doc [ 1 ] ) then
7411: LD_VAR 0 3
7415: PUSH
7416: LD_INT 1
7418: ARRAY
7419: PPUSH
7420: CALL_OW 310
7424: NOT
7425: IFFALSE 7498
// ComEnterUnit ( doc , FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) [ 1 ] ) ;
7427: LD_VAR 0 3
7431: PPUSH
7432: LD_INT 22
7434: PUSH
7435: LD_INT 3
7437: PUSH
7438: EMPTY
7439: LIST
7440: LIST
7441: PUSH
7442: LD_INT 2
7444: PUSH
7445: LD_INT 30
7447: PUSH
7448: LD_INT 6
7450: PUSH
7451: EMPTY
7452: LIST
7453: LIST
7454: PUSH
7455: LD_INT 30
7457: PUSH
7458: LD_INT 7
7460: PUSH
7461: EMPTY
7462: LIST
7463: LIST
7464: PUSH
7465: LD_INT 30
7467: PUSH
7468: LD_INT 8
7470: PUSH
7471: EMPTY
7472: LIST
7473: LIST
7474: PUSH
7475: EMPTY
7476: LIST
7477: LIST
7478: LIST
7479: LIST
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: PPUSH
7485: CALL_OW 69
7489: PUSH
7490: LD_INT 1
7492: ARRAY
7493: PPUSH
7494: CALL_OW 120
// exit ;
7498: GO 7549
// end ; if IsInUnit ( doc [ 1 ] ) then
7500: LD_VAR 0 3
7504: PUSH
7505: LD_INT 1
7507: ARRAY
7508: PPUSH
7509: CALL_OW 310
7513: IFFALSE 7524
// ComExitBuilding ( doc ) ;
7515: LD_VAR 0 3
7519: PPUSH
7520: CALL_OW 122
// wait ( 3 ) ;
7524: LD_INT 3
7526: PPUSH
7527: CALL_OW 67
// ComHeal ( doc , tmp [ 1 ] ) ;
7531: LD_VAR 0 3
7535: PPUSH
7536: LD_VAR 0 2
7540: PUSH
7541: LD_INT 1
7543: ARRAY
7544: PPUSH
7545: CALL_OW 128
// end ;
7549: PPOPN 3
7551: END
// every 0 0$01 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) do var i , tmp , attacking , areas , area ;
7552: LD_INT 22
7554: PUSH
7555: LD_INT 3
7557: PUSH
7558: EMPTY
7559: LIST
7560: LIST
7561: PUSH
7562: LD_INT 25
7564: PUSH
7565: LD_INT 3
7567: PUSH
7568: EMPTY
7569: LIST
7570: LIST
7571: PUSH
7572: EMPTY
7573: LIST
7574: LIST
7575: PPUSH
7576: CALL_OW 69
7580: PUSH
7581: LD_INT 22
7583: PUSH
7584: LD_INT 3
7586: PUSH
7587: EMPTY
7588: LIST
7589: LIST
7590: PUSH
7591: LD_INT 21
7593: PUSH
7594: LD_INT 2
7596: PUSH
7597: EMPTY
7598: LIST
7599: LIST
7600: PUSH
7601: EMPTY
7602: LIST
7603: LIST
7604: PPUSH
7605: CALL_OW 69
7609: AND
7610: IFFALSE 8024
7612: GO 7614
7614: DISABLE
7615: LD_INT 0
7617: PPUSH
7618: PPUSH
7619: PPUSH
7620: PPUSH
7621: PPUSH
// begin enable ;
7622: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_empty ] ] ] ) ;
7623: LD_ADDR_VAR 0 2
7627: PUSH
7628: LD_INT 22
7630: PUSH
7631: LD_INT 3
7633: PUSH
7634: EMPTY
7635: LIST
7636: LIST
7637: PUSH
7638: LD_INT 21
7640: PUSH
7641: LD_INT 2
7643: PUSH
7644: EMPTY
7645: LIST
7646: LIST
7647: PUSH
7648: LD_INT 3
7650: PUSH
7651: LD_INT 58
7653: PUSH
7654: EMPTY
7655: LIST
7656: PUSH
7657: EMPTY
7658: LIST
7659: LIST
7660: PUSH
7661: EMPTY
7662: LIST
7663: LIST
7664: LIST
7665: PPUSH
7666: CALL_OW 69
7670: ST_TO_ADDR
// areas := [ sectorAlpha , sectorBeta , sectorDelta , mainBaseArea ] ;
7671: LD_ADDR_VAR 0 4
7675: PUSH
7676: LD_INT 10
7678: PUSH
7679: LD_INT 11
7681: PUSH
7682: LD_INT 12
7684: PUSH
7685: LD_INT 14
7687: PUSH
7688: EMPTY
7689: LIST
7690: LIST
7691: LIST
7692: LIST
7693: ST_TO_ADDR
// area := 0 ;
7694: LD_ADDR_VAR 0 5
7698: PUSH
7699: LD_INT 0
7701: ST_TO_ADDR
// attacking := false ;
7702: LD_ADDR_VAR 0 3
7706: PUSH
7707: LD_INT 0
7709: ST_TO_ADDR
// for i in tmp do
7710: LD_ADDR_VAR 0 1
7714: PUSH
7715: LD_VAR 0 2
7719: PUSH
7720: FOR_IN
7721: IFFALSE 7807
// if GetDistUnits ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) < 10 then
7723: LD_VAR 0 1
7727: PPUSH
7728: LD_INT 22
7730: PUSH
7731: LD_INT 1
7733: PUSH
7734: EMPTY
7735: LIST
7736: LIST
7737: PPUSH
7738: CALL_OW 69
7742: PPUSH
7743: LD_VAR 0 1
7747: PPUSH
7748: CALL_OW 74
7752: PPUSH
7753: CALL_OW 296
7757: PUSH
7758: LD_INT 10
7760: LESS
7761: IFFALSE 7805
// begin ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) ;
7763: LD_VAR 0 1
7767: PPUSH
7768: LD_INT 22
7770: PUSH
7771: LD_INT 1
7773: PUSH
7774: EMPTY
7775: LIST
7776: LIST
7777: PPUSH
7778: CALL_OW 69
7782: PPUSH
7783: LD_VAR 0 1
7787: PPUSH
7788: CALL_OW 74
7792: PPUSH
7793: CALL_OW 115
// attacking := true ;
7797: LD_ADDR_VAR 0 3
7801: PUSH
7802: LD_INT 1
7804: ST_TO_ADDR
// end ;
7805: GO 7720
7807: POP
7808: POP
// if attacking then
7809: LD_VAR 0 3
7813: IFFALSE 7817
// exit ;
7815: GO 8024
// for i in areas do
7817: LD_ADDR_VAR 0 1
7821: PUSH
7822: LD_VAR 0 4
7826: PUSH
7827: FOR_IN
7828: IFFALSE 7865
// if FilterUnitsInArea ( i , [ f_side , 1 ] ) then
7830: LD_VAR 0 1
7834: PPUSH
7835: LD_INT 22
7837: PUSH
7838: LD_INT 1
7840: PUSH
7841: EMPTY
7842: LIST
7843: LIST
7844: PPUSH
7845: CALL_OW 70
7849: IFFALSE 7863
// begin area := i ;
7851: LD_ADDR_VAR 0 5
7855: PUSH
7856: LD_VAR 0 1
7860: ST_TO_ADDR
// break ;
7861: GO 7865
// end ;
7863: GO 7827
7865: POP
7866: POP
// if area then
7867: LD_VAR 0 5
7871: IFFALSE 8024
// begin for i in tmp do
7873: LD_ADDR_VAR 0 1
7877: PUSH
7878: LD_VAR 0 2
7882: PUSH
7883: FOR_IN
7884: IFFALSE 8022
// begin if GetFuel ( i ) < 33 then
7886: LD_VAR 0 1
7890: PPUSH
7891: CALL_OW 261
7895: PUSH
7896: LD_INT 33
7898: LESS
7899: IFFALSE 7913
// SetFuel ( i , 33 ) ;
7901: LD_VAR 0 1
7905: PPUSH
7906: LD_INT 33
7908: PPUSH
7909: CALL_OW 240
// if GetDistUnits ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) < 10 then
7913: LD_VAR 0 1
7917: PPUSH
7918: LD_INT 22
7920: PUSH
7921: LD_INT 1
7923: PUSH
7924: EMPTY
7925: LIST
7926: LIST
7927: PPUSH
7928: CALL_OW 69
7932: PPUSH
7933: LD_VAR 0 1
7937: PPUSH
7938: CALL_OW 74
7942: PPUSH
7943: CALL_OW 296
7947: PUSH
7948: LD_INT 10
7950: LESS
7951: IFFALSE 7989
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ) else
7953: LD_VAR 0 1
7957: PPUSH
7958: LD_INT 22
7960: PUSH
7961: LD_INT 1
7963: PUSH
7964: EMPTY
7965: LIST
7966: LIST
7967: PPUSH
7968: CALL_OW 69
7972: PPUSH
7973: LD_VAR 0 1
7977: PPUSH
7978: CALL_OW 74
7982: PPUSH
7983: CALL_OW 115
7987: GO 8020
// if not IsInArea ( i , area ) then
7989: LD_VAR 0 1
7993: PPUSH
7994: LD_VAR 0 5
7998: PPUSH
7999: CALL_OW 308
8003: NOT
8004: IFFALSE 8020
// ComMoveToArea ( i , area ) ;
8006: LD_VAR 0 1
8010: PPUSH
8011: LD_VAR 0 5
8015: PPUSH
8016: CALL_OW 113
// end ;
8020: GO 7883
8022: POP
8023: POP
// end ; end ;
8024: PPOPN 5
8026: END
// every 15 15$00 trigger Difficulty > 1 do var i , j , un , veh , time , count ;
8027: LD_OWVAR 67
8031: PUSH
8032: LD_INT 1
8034: GREATER
8035: IFFALSE 8320
8037: GO 8039
8039: DISABLE
8040: LD_INT 0
8042: PPUSH
8043: PPUSH
8044: PPUSH
8045: PPUSH
8046: PPUSH
8047: PPUSH
// begin uc_side := 3 ;
8048: LD_ADDR_OWVAR 20
8052: PUSH
8053: LD_INT 3
8055: ST_TO_ADDR
// uc_nation := 3 ;
8056: LD_ADDR_OWVAR 21
8060: PUSH
8061: LD_INT 3
8063: ST_TO_ADDR
// time := [ 9 9$00 , 7 7$00 , 6 6$00 , 5 5$30 ] [ Difficulty ] ;
8064: LD_ADDR_VAR 0 5
8068: PUSH
8069: LD_INT 18900
8071: PUSH
8072: LD_INT 14700
8074: PUSH
8075: LD_INT 12600
8077: PUSH
8078: LD_INT 11550
8080: PUSH
8081: EMPTY
8082: LIST
8083: LIST
8084: LIST
8085: LIST
8086: PUSH
8087: LD_OWVAR 67
8091: ARRAY
8092: ST_TO_ADDR
// count := [ 2 , 2 , 3 , 3 ] [ Difficulty ] ;
8093: LD_ADDR_VAR 0 6
8097: PUSH
8098: LD_INT 2
8100: PUSH
8101: LD_INT 2
8103: PUSH
8104: LD_INT 3
8106: PUSH
8107: LD_INT 3
8109: PUSH
8110: EMPTY
8111: LIST
8112: LIST
8113: LIST
8114: LIST
8115: PUSH
8116: LD_OWVAR 67
8120: ARRAY
8121: ST_TO_ADDR
// for i = 1 to count do
8122: LD_ADDR_VAR 0 1
8126: PUSH
8127: DOUBLE
8128: LD_INT 1
8130: DEC
8131: ST_TO_ADDR
8132: LD_VAR 0 6
8136: PUSH
8137: FOR_TO
8138: IFFALSE 8318
// begin wait ( time ) ;
8140: LD_VAR 0 5
8144: PPUSH
8145: CALL_OW 67
// for j = 1 to rand ( 1 , Difficulty ) do
8149: LD_ADDR_VAR 0 2
8153: PUSH
8154: DOUBLE
8155: LD_INT 1
8157: DEC
8158: ST_TO_ADDR
8159: LD_INT 1
8161: PPUSH
8162: LD_OWVAR 67
8166: PPUSH
8167: CALL_OW 12
8171: PUSH
8172: FOR_TO
8173: IFFALSE 8314
// begin veh := PrepareTank ( 3 , 3 , ru_medium_tracked , engine_combustion , control_manual , [ ru_gatling_gun , ru_gun , ru_heavy_machine_gun ] [ i mod 3 + 1 ] , 80 ) ;
8175: LD_ADDR_VAR 0 4
8179: PUSH
8180: LD_INT 3
8182: PPUSH
8183: LD_INT 3
8185: PPUSH
8186: LD_INT 22
8188: PPUSH
8189: LD_INT 1
8191: PPUSH
8192: LD_INT 1
8194: PPUSH
8195: LD_INT 43
8197: PUSH
8198: LD_INT 44
8200: PUSH
8201: LD_INT 42
8203: PUSH
8204: EMPTY
8205: LIST
8206: LIST
8207: LIST
8208: PUSH
8209: LD_VAR 0 1
8213: PUSH
8214: LD_INT 3
8216: MOD
8217: PUSH
8218: LD_INT 1
8220: PLUS
8221: ARRAY
8222: PPUSH
8223: LD_INT 80
8225: PPUSH
8226: CALL 512 0 7
8230: ST_TO_ADDR
// PlaceUnitArea ( veh , southArea , false ) ;
8231: LD_VAR 0 4
8235: PPUSH
8236: LD_INT 13
8238: PPUSH
8239: LD_INT 0
8241: PPUSH
8242: CALL_OW 49
// PrepareHuman ( false , 3 , [ 4 , 5 , 5 ] [ Difficulty ] ) ;
8246: LD_INT 0
8248: PPUSH
8249: LD_INT 3
8251: PPUSH
8252: LD_INT 4
8254: PUSH
8255: LD_INT 5
8257: PUSH
8258: LD_INT 5
8260: PUSH
8261: EMPTY
8262: LIST
8263: LIST
8264: LIST
8265: PUSH
8266: LD_OWVAR 67
8270: ARRAY
8271: PPUSH
8272: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
8276: CALL_OW 44
8280: PPUSH
8281: LD_VAR 0 4
8285: PPUSH
8286: CALL_OW 52
// wait ( 0 0$01 ) ;
8290: LD_INT 35
8292: PPUSH
8293: CALL_OW 67
// ComMoveXY ( veh , 143 , 143 ) ;
8297: LD_VAR 0 4
8301: PPUSH
8302: LD_INT 143
8304: PPUSH
8305: LD_INT 143
8307: PPUSH
8308: CALL_OW 111
// end ;
8312: GO 8172
8314: POP
8315: POP
// end ;
8316: GO 8137
8318: POP
8319: POP
// end ;
8320: PPOPN 6
8322: END
// every 8 8$00 do var i , un , time ;
8323: GO 8325
8325: DISABLE
8326: LD_INT 0
8328: PPUSH
8329: PPUSH
8330: PPUSH
// begin time := [ 3 3$00 , 1 1$00 , 0 0$30 ] ;
8331: LD_ADDR_VAR 0 3
8335: PUSH
8336: LD_INT 6300
8338: PUSH
8339: LD_INT 2100
8341: PUSH
8342: LD_INT 1050
8344: PUSH
8345: EMPTY
8346: LIST
8347: LIST
8348: LIST
8349: ST_TO_ADDR
// wait ( time ) ;
8350: LD_VAR 0 3
8354: PPUSH
8355: CALL_OW 67
// uc_side := 3 ;
8359: LD_ADDR_OWVAR 20
8363: PUSH
8364: LD_INT 3
8366: ST_TO_ADDR
// uc_nation := 3 ;
8367: LD_ADDR_OWVAR 21
8371: PUSH
8372: LD_INT 3
8374: ST_TO_ADDR
// for i = 1 to 2 do
8375: LD_ADDR_VAR 0 1
8379: PUSH
8380: DOUBLE
8381: LD_INT 1
8383: DEC
8384: ST_TO_ADDR
8385: LD_INT 2
8387: PUSH
8388: FOR_TO
8389: IFFALSE 8452
// begin PrepareHuman ( false , 1 , 4 ) ;
8391: LD_INT 0
8393: PPUSH
8394: LD_INT 1
8396: PPUSH
8397: LD_INT 4
8399: PPUSH
8400: CALL_OW 380
// un := CreateHuman ;
8404: LD_ADDR_VAR 0 2
8408: PUSH
8409: CALL_OW 44
8413: ST_TO_ADDR
// PlaceHumanInUnit ( un , ru_dep_main ) ;
8414: LD_VAR 0 2
8418: PPUSH
8419: LD_INT 16
8421: PPUSH
8422: CALL_OW 52
// ComExitBuilding ( un ) ;
8426: LD_VAR 0 2
8430: PPUSH
8431: CALL_OW 122
// AddComAgressiveMove ( un , 41 , 76 ) ;
8435: LD_VAR 0 2
8439: PPUSH
8440: LD_INT 41
8442: PPUSH
8443: LD_INT 76
8445: PPUSH
8446: CALL_OW 174
// end ;
8450: GO 8388
8452: POP
8453: POP
// end ; end_of_file
8454: PPOPN 3
8456: END
// export function Action ; begin
8457: LD_INT 0
8459: PPUSH
// CenterNowOnXY ( 28 , 3 ) ;
8460: LD_INT 28
8462: PPUSH
8463: LD_INT 3
8465: PPUSH
8466: CALL_OW 86
// PlaceSeeing ( 41 , 76 , 1 , 10 ) ;
8470: LD_INT 41
8472: PPUSH
8473: LD_INT 76
8475: PPUSH
8476: LD_INT 1
8478: PPUSH
8479: LD_INT 10
8481: PPUSH
8482: CALL_OW 330
// RemoveSeeing ( 41 , 76 , 1 ) ;
8486: LD_INT 41
8488: PPUSH
8489: LD_INT 76
8491: PPUSH
8492: LD_INT 1
8494: PPUSH
8495: CALL_OW 331
// InGameOn ;
8499: CALL_OW 8
// SayRadio ( Harisson , D2-Har-1 ) ;
8503: LD_EXP 19
8507: PPUSH
8508: LD_STRING D2-Har-1
8510: PPUSH
8511: CALL_OW 94
// InGameOff ;
8515: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
8519: LD_STRING M1
8521: PPUSH
8522: CALL_OW 337
// end ;
8526: LD_VAR 0 1
8530: RET
// every 0 0$1 trigger buildings_counter > 1 do var un ;
8531: LD_EXP 4
8535: PUSH
8536: LD_INT 1
8538: GREATER
8539: IFFALSE 8630
8541: GO 8543
8543: DISABLE
8544: LD_INT 0
8546: PPUSH
// begin un := GetRandom ( sex_male ) [ 1 ] ;
8547: LD_ADDR_VAR 0 1
8551: PUSH
8552: LD_INT 1
8554: PPUSH
8555: CALL 600 0 1
8559: PUSH
8560: LD_INT 1
8562: ARRAY
8563: ST_TO_ADDR
// Say ( un , D2a-Sol1-1 ) ;
8564: LD_VAR 0 1
8568: PPUSH
8569: LD_STRING D2a-Sol1-1
8571: PPUSH
8572: CALL_OW 88
// if not un then
8576: LD_VAR 0 1
8580: NOT
8581: IFFALSE 8612
// begin un := GetRandom ( sex_female ) [ 1 ] ;
8583: LD_ADDR_VAR 0 1
8587: PUSH
8588: LD_INT 2
8590: PPUSH
8591: CALL 600 0 1
8595: PUSH
8596: LD_INT 1
8598: ARRAY
8599: ST_TO_ADDR
// Say ( un , D2a-FSol1-1 ) ;
8600: LD_VAR 0 1
8604: PPUSH
8605: LD_STRING D2a-FSol1-1
8607: PPUSH
8608: CALL_OW 88
// end ; if Khatam then
8612: LD_EXP 17
8616: IFFALSE 8630
// Say ( Khatam , D3b-Khat-3 ) ;
8618: LD_EXP 17
8622: PPUSH
8623: LD_STRING D3b-Khat-3
8625: PPUSH
8626: CALL_OW 88
// end ;
8630: PPOPN 1
8632: END
// every 0 0$1 trigger Frank and not Kikuchi and FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , GetX ( Frank ) , GetY ( Frank ) , 7 ] ] ) and not InBattle ( 1 ) and not InBattle ( 4 ) do var i , ape ;
8633: LD_EXP 15
8637: PUSH
8638: LD_EXP 18
8642: NOT
8643: AND
8644: PUSH
8645: LD_INT 22
8647: PUSH
8648: LD_INT 1
8650: PUSH
8651: EMPTY
8652: LIST
8653: LIST
8654: PUSH
8655: LD_INT 92
8657: PUSH
8658: LD_EXP 15
8662: PPUSH
8663: CALL_OW 250
8667: PUSH
8668: LD_EXP 15
8672: PPUSH
8673: CALL_OW 251
8677: PUSH
8678: LD_INT 7
8680: PUSH
8681: EMPTY
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: PUSH
8687: EMPTY
8688: LIST
8689: LIST
8690: PPUSH
8691: CALL_OW 69
8695: AND
8696: PUSH
8697: LD_INT 1
8699: PPUSH
8700: CALL_OW 463
8704: NOT
8705: AND
8706: PUSH
8707: LD_INT 4
8709: PPUSH
8710: CALL_OW 463
8714: NOT
8715: AND
8716: IFFALSE 9303
8718: GO 8720
8720: DISABLE
8721: LD_INT 0
8723: PPUSH
8724: PPUSH
// begin InGameOn ;
8725: CALL_OW 8
// ape := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
8729: LD_ADDR_VAR 0 2
8733: PUSH
8734: LD_INT 22
8736: PUSH
8737: LD_INT 0
8739: PUSH
8740: EMPTY
8741: LIST
8742: LIST
8743: PUSH
8744: LD_INT 25
8746: PUSH
8747: LD_INT 12
8749: PUSH
8750: EMPTY
8751: LIST
8752: LIST
8753: PUSH
8754: EMPTY
8755: LIST
8756: LIST
8757: PPUSH
8758: CALL_OW 69
8762: ST_TO_ADDR
// ape := NearestUnitToUnit ( ape , Frank ) ;
8763: LD_ADDR_VAR 0 2
8767: PUSH
8768: LD_VAR 0 2
8772: PPUSH
8773: LD_EXP 15
8777: PPUSH
8778: CALL_OW 74
8782: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_dist , Frank , 20 ] ] ) do
8783: LD_ADDR_VAR 0 1
8787: PUSH
8788: LD_INT 22
8790: PUSH
8791: LD_INT 1
8793: PUSH
8794: EMPTY
8795: LIST
8796: LIST
8797: PUSH
8798: LD_INT 21
8800: PUSH
8801: LD_INT 1
8803: PUSH
8804: EMPTY
8805: LIST
8806: LIST
8807: PUSH
8808: LD_INT 91
8810: PUSH
8811: LD_EXP 15
8815: PUSH
8816: LD_INT 20
8818: PUSH
8819: EMPTY
8820: LIST
8821: LIST
8822: LIST
8823: PUSH
8824: EMPTY
8825: LIST
8826: LIST
8827: LIST
8828: PPUSH
8829: CALL_OW 69
8833: PUSH
8834: FOR_IN
8835: IFFALSE 8853
// ComTurnUnit ( i , Frank ) ;
8837: LD_VAR 0 1
8841: PPUSH
8842: LD_EXP 15
8846: PPUSH
8847: CALL_OW 119
8851: GO 8834
8853: POP
8854: POP
// SetSide ( Frank , 1 ) ;
8855: LD_EXP 15
8859: PPUSH
8860: LD_INT 1
8862: PPUSH
8863: CALL_OW 235
// ComMoveUnit ( JMM , Frank ) ;
8867: LD_EXP 9
8871: PPUSH
8872: LD_EXP 15
8876: PPUSH
8877: CALL_OW 112
// AddComTurnUnit ( JMM , Frank ) ;
8881: LD_EXP 9
8885: PPUSH
8886: LD_EXP 15
8890: PPUSH
8891: CALL_OW 179
// CenterOnUnits ( Frank ) ;
8895: LD_EXP 15
8899: PPUSH
8900: CALL_OW 85
// Say ( Frank , D3a-Frank-1 ) ;
8904: LD_EXP 15
8908: PPUSH
8909: LD_STRING D3a-Frank-1
8911: PPUSH
8912: CALL_OW 88
// ComMoveXY ( ape , 42 , 78 ) ;
8916: LD_VAR 0 2
8920: PPUSH
8921: LD_INT 42
8923: PPUSH
8924: LD_INT 78
8926: PPUSH
8927: CALL_OW 111
// AddComTurnUnit ( ape , Frank ) ;
8931: LD_VAR 0 2
8935: PPUSH
8936: LD_EXP 15
8940: PPUSH
8941: CALL_OW 179
// if Lisa then
8945: LD_EXP 14
8949: IFFALSE 8963
// Say ( Lisa , D3a-Lisa-1 ) ;
8951: LD_EXP 14
8955: PPUSH
8956: LD_STRING D3a-Lisa-1
8958: PPUSH
8959: CALL_OW 88
// Say ( JMM , D3a-JMM-1 ) ;
8963: LD_EXP 9
8967: PPUSH
8968: LD_STRING D3a-JMM-1
8970: PPUSH
8971: CALL_OW 88
// if Cyrus then
8975: LD_EXP 13
8979: IFFALSE 8993
// Say ( Cyrus , D3a-Cyrus-1 ) ;
8981: LD_EXP 13
8985: PPUSH
8986: LD_STRING D3a-Cyrus-1
8988: PPUSH
8989: CALL_OW 88
// if GetRandom ( sex_male ) then
8993: LD_INT 1
8995: PPUSH
8996: CALL 600 0 1
9000: IFFALSE 9021
// Say ( GetRandom ( sex_male ) [ 1 ] , D3a-Sol1-1 ) ;
9002: LD_INT 1
9004: PPUSH
9005: CALL 600 0 1
9009: PUSH
9010: LD_INT 1
9012: ARRAY
9013: PPUSH
9014: LD_STRING D3a-Sol1-1
9016: PPUSH
9017: CALL_OW 88
// if GetRandom ( sex_female ) then
9021: LD_INT 2
9023: PPUSH
9024: CALL 600 0 1
9028: IFFALSE 9049
// Say ( GetRandom ( sex_female ) [ 1 ] , D3a-FSol1-1 ) ;
9030: LD_INT 2
9032: PPUSH
9033: CALL 600 0 1
9037: PUSH
9038: LD_INT 1
9040: ARRAY
9041: PPUSH
9042: LD_STRING D3a-FSol1-1
9044: PPUSH
9045: CALL_OW 88
// if Gladstone then
9049: LD_EXP 16
9053: IFFALSE 9067
// Say ( Gladstone , D3a-Glad-1 ) ;
9055: LD_EXP 16
9059: PPUSH
9060: LD_STRING D3a-Glad-1
9062: PPUSH
9063: CALL_OW 88
// ComMoveXY ( ape , 60 , 113 ) ;
9067: LD_VAR 0 2
9071: PPUSH
9072: LD_INT 60
9074: PPUSH
9075: LD_INT 113
9077: PPUSH
9078: CALL_OW 111
// Say ( Frank , D3a-Frank-2 ) ;
9082: LD_EXP 15
9086: PPUSH
9087: LD_STRING D3a-Frank-2
9089: PPUSH
9090: CALL_OW 88
// ComTurnUnit ( Frank , JMM ) ;
9094: LD_EXP 15
9098: PPUSH
9099: LD_EXP 9
9103: PPUSH
9104: CALL_OW 119
// Say ( JMM , D3a-JMM-2 ) ;
9108: LD_EXP 9
9112: PPUSH
9113: LD_STRING D3a-JMM-2
9115: PPUSH
9116: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9120: LD_INT 1
9122: PPUSH
9123: LD_INT 4
9125: PPUSH
9126: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9130: LD_INT 85
9132: PPUSH
9133: LD_INT 134
9135: PPUSH
9136: CALL_OW 84
// Say ( Frank , D3a-Frank-3 ) ;
9140: LD_EXP 15
9144: PPUSH
9145: LD_STRING D3a-Frank-3
9147: PPUSH
9148: CALL_OW 88
// Wait ( 0 0$01 ) ;
9152: LD_INT 35
9154: PPUSH
9155: CALL_OW 67
// CenterOnXY ( 166 , 136 ) ;
9159: LD_INT 166
9161: PPUSH
9162: LD_INT 136
9164: PPUSH
9165: CALL_OW 84
// Say ( JMM , D3a-JMM-3 ) ;
9169: LD_EXP 9
9173: PPUSH
9174: LD_STRING D3a-JMM-3
9176: PPUSH
9177: CALL_OW 88
// Wait ( 0 0$01 ) ;
9181: LD_INT 35
9183: PPUSH
9184: CALL_OW 67
// CenterNowOnUnits ( Frank ) ;
9188: LD_EXP 15
9192: PPUSH
9193: CALL_OW 87
// Say ( Frank , D3a-Frank-4 ) ;
9197: LD_EXP 15
9201: PPUSH
9202: LD_STRING D3a-Frank-4
9204: PPUSH
9205: CALL_OW 88
// if Lisa then
9209: LD_EXP 14
9213: IFFALSE 9227
// Say ( Lisa , D3a-Lisa-4 ) ;
9215: LD_EXP 14
9219: PPUSH
9220: LD_STRING D3a-Lisa-4
9222: PPUSH
9223: CALL_OW 88
// Say ( JMM , D3a-JMM-4 ) ;
9227: LD_EXP 9
9231: PPUSH
9232: LD_STRING D3a-JMM-4
9234: PPUSH
9235: CALL_OW 88
// Say ( Frank , D3a-Frank-5 ) ;
9239: LD_EXP 15
9243: PPUSH
9244: LD_STRING D3a-Frank-5
9246: PPUSH
9247: CALL_OW 88
// Say ( JMM , D3a-JMM-5 ) ;
9251: LD_EXP 9
9255: PPUSH
9256: LD_STRING D3a-JMM-5
9258: PPUSH
9259: CALL_OW 88
// Say ( Frank , D3a-Frank-6 ) ;
9263: LD_EXP 15
9267: PPUSH
9268: LD_STRING D3a-Frank-6
9270: PPUSH
9271: CALL_OW 88
// Say ( JMM , D3a-JMM-6 ) ;
9275: LD_EXP 9
9279: PPUSH
9280: LD_STRING D3a-JMM-6
9282: PPUSH
9283: CALL_OW 88
// Say ( Frank , D3a-Frank-7 ) ;
9287: LD_EXP 15
9291: PPUSH
9292: LD_STRING D3a-Frank-7
9294: PPUSH
9295: CALL_OW 88
// InGameOff ;
9299: CALL_OW 9
// end ;
9303: PPOPN 2
9305: END
// every 0 0$1 trigger Kikuchi and not Frank and FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , GetX ( Kikuchi ) , GetY ( Kikuchi ) , 7 ] ] ) and not InBattle ( 1 ) and not InBattle ( 4 ) do
9306: LD_EXP 18
9310: PUSH
9311: LD_EXP 15
9315: NOT
9316: AND
9317: PUSH
9318: LD_INT 22
9320: PUSH
9321: LD_INT 1
9323: PUSH
9324: EMPTY
9325: LIST
9326: LIST
9327: PUSH
9328: LD_INT 92
9330: PUSH
9331: LD_EXP 18
9335: PPUSH
9336: CALL_OW 250
9340: PUSH
9341: LD_EXP 18
9345: PPUSH
9346: CALL_OW 251
9350: PUSH
9351: LD_INT 7
9353: PUSH
9354: EMPTY
9355: LIST
9356: LIST
9357: LIST
9358: LIST
9359: PUSH
9360: EMPTY
9361: LIST
9362: LIST
9363: PPUSH
9364: CALL_OW 69
9368: AND
9369: PUSH
9370: LD_INT 1
9372: PPUSH
9373: CALL_OW 463
9377: NOT
9378: AND
9379: PUSH
9380: LD_INT 4
9382: PPUSH
9383: CALL_OW 463
9387: NOT
9388: AND
9389: IFFALSE 9569
9391: GO 9393
9393: DISABLE
// begin InGameOn ;
9394: CALL_OW 8
// ComTurnUnit ( JMM , Kikuchi ) ;
9398: LD_EXP 9
9402: PPUSH
9403: LD_EXP 18
9407: PPUSH
9408: CALL_OW 119
// ComTurnUnit ( Kikuchi , JMM ) ;
9412: LD_EXP 18
9416: PPUSH
9417: LD_EXP 9
9421: PPUSH
9422: CALL_OW 119
// CenterOnUnits ( Kikuchi ) ;
9426: LD_EXP 18
9430: PPUSH
9431: CALL_OW 85
// Say ( Kikuchi , D3b-Yam-1 ) ;
9435: LD_EXP 18
9439: PPUSH
9440: LD_STRING D3b-Yam-1
9442: PPUSH
9443: CALL_OW 88
// Say ( JMM , D3b-JMM-1 ) ;
9447: LD_EXP 9
9451: PPUSH
9452: LD_STRING D3b-JMM-1
9454: PPUSH
9455: CALL_OW 88
// RevealFogArea ( 1 , spotArea ) ;
9459: LD_INT 1
9461: PPUSH
9462: LD_INT 4
9464: PPUSH
9465: CALL_OW 332
// CenterOnXY ( 85 , 134 ) ;
9469: LD_INT 85
9471: PPUSH
9472: LD_INT 134
9474: PPUSH
9475: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-2 ) ;
9479: LD_EXP 18
9483: PPUSH
9484: LD_STRING D3b-Yam-2
9486: PPUSH
9487: CALL_OW 88
// Wait ( 0 0$01 ) ;
9491: LD_INT 35
9493: PPUSH
9494: CALL_OW 67
// Say ( JMM , D3b-JMM-2 ) ;
9498: LD_EXP 9
9502: PPUSH
9503: LD_STRING D3b-JMM-2
9505: PPUSH
9506: CALL_OW 88
// CenterOnXY ( 166 , 136 ) ;
9510: LD_INT 166
9512: PPUSH
9513: LD_INT 136
9515: PPUSH
9516: CALL_OW 84
// Say ( Kikuchi , D3b-Yam-3 ) ;
9520: LD_EXP 18
9524: PPUSH
9525: LD_STRING D3b-Yam-3
9527: PPUSH
9528: CALL_OW 88
// CenterNowOnUnits ( JMM ) ;
9532: LD_EXP 9
9536: PPUSH
9537: CALL_OW 87
// Say ( JMM , D3b-JMM-3a ) ;
9541: LD_EXP 9
9545: PPUSH
9546: LD_STRING D3b-JMM-3a
9548: PPUSH
9549: CALL_OW 88
// SetSide ( Kikuchi , 1 ) ;
9553: LD_EXP 18
9557: PPUSH
9558: LD_INT 1
9560: PPUSH
9561: CALL_OW 235
// InGameOff ;
9565: CALL_OW 9
// end ;
9569: END
// every 0 0$1 trigger FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) do var un , x , tw , i ;
9570: LD_INT 7
9572: PPUSH
9573: LD_INT 22
9575: PUSH
9576: LD_INT 1
9578: PUSH
9579: EMPTY
9580: LIST
9581: LIST
9582: PUSH
9583: LD_INT 3
9585: PUSH
9586: LD_INT 24
9588: PUSH
9589: LD_INT 1000
9591: PUSH
9592: EMPTY
9593: LIST
9594: LIST
9595: PUSH
9596: EMPTY
9597: LIST
9598: LIST
9599: PUSH
9600: EMPTY
9601: LIST
9602: LIST
9603: PPUSH
9604: CALL_OW 70
9608: IFFALSE 10064
9610: GO 9612
9612: DISABLE
9613: LD_INT 0
9615: PPUSH
9616: PPUSH
9617: PPUSH
9618: PPUSH
// begin repeat wait ( 0 0$1 ) ;
9619: LD_INT 35
9621: PPUSH
9622: CALL_OW 67
// un := FilterUnitsInArea ( massDamageArea , [ [ f_side , 1 ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
9626: LD_ADDR_VAR 0 1
9630: PUSH
9631: LD_INT 7
9633: PPUSH
9634: LD_INT 22
9636: PUSH
9637: LD_INT 1
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: PUSH
9644: LD_INT 3
9646: PUSH
9647: LD_INT 24
9649: PUSH
9650: LD_INT 1000
9652: PUSH
9653: EMPTY
9654: LIST
9655: LIST
9656: PUSH
9657: EMPTY
9658: LIST
9659: LIST
9660: PUSH
9661: EMPTY
9662: LIST
9663: LIST
9664: PPUSH
9665: CALL_OW 70
9669: ST_TO_ADDR
// if not un then
9670: LD_VAR 0 1
9674: NOT
9675: IFFALSE 9679
// continue ;
9677: GO 9619
// tw := NearbyTowerHasEnergy ( un [ 1 ] ) ;
9679: LD_ADDR_VAR 0 3
9683: PUSH
9684: LD_VAR 0 1
9688: PUSH
9689: LD_INT 1
9691: ARRAY
9692: PPUSH
9693: CALL 2028 0 1
9697: ST_TO_ADDR
// until tw ;
9698: LD_VAR 0 3
9702: IFFALSE 9619
// DialogueOn ;
9704: CALL_OW 6
// CenterNowOnUnits ( tw ) ;
9708: LD_VAR 0 3
9712: PPUSH
9713: CALL_OW 87
// if Lisa then
9717: LD_EXP 14
9721: IFFALSE 9749
// begin Say ( Lisa , D5-Lisa-1 ) ;
9723: LD_EXP 14
9727: PPUSH
9728: LD_STRING D5-Lisa-1
9730: PPUSH
9731: CALL_OW 88
// Say ( JMM , D5-JMM-1a ) ;
9735: LD_EXP 9
9739: PPUSH
9740: LD_STRING D5-JMM-1a
9742: PPUSH
9743: CALL_OW 88
// end else
9747: GO 9761
// Say ( JMM , D5-JMM-1 ) ;
9749: LD_EXP 9
9753: PPUSH
9754: LD_STRING D5-JMM-1
9756: PPUSH
9757: CALL_OW 88
// DialogueOff ;
9761: CALL_OW 7
// while ( true ) do
9765: LD_INT 1
9767: IFFALSE 9823
// begin wait ( 0 0$01 ) ;
9769: LD_INT 35
9771: PPUSH
9772: CALL_OW 67
// x := FilterUnitsExceptArea ( northElectro , [ [ f_btype , b_oil_power ] , [ f_see , 1 ] ] ) ;
9776: LD_ADDR_VAR 0 2
9780: PUSH
9781: LD_INT 8
9783: PPUSH
9784: LD_INT 30
9786: PUSH
9787: LD_INT 26
9789: PUSH
9790: EMPTY
9791: LIST
9792: LIST
9793: PUSH
9794: LD_INT 101
9796: PUSH
9797: LD_INT 1
9799: PUSH
9800: EMPTY
9801: LIST
9802: LIST
9803: PUSH
9804: EMPTY
9805: LIST
9806: LIST
9807: PPUSH
9808: CALL_OW 71
9812: ST_TO_ADDR
// if x then
9813: LD_VAR 0 2
9817: IFFALSE 9821
// break ;
9819: GO 9823
// end ;
9821: GO 9765
// CenterOnUnits ( x [ 1 ] ) ;
9823: LD_VAR 0 2
9827: PUSH
9828: LD_INT 1
9830: ARRAY
9831: PPUSH
9832: CALL_OW 85
// if Frank and GetSide ( Frank ) = 1 then
9836: LD_EXP 15
9840: PUSH
9841: LD_EXP 15
9845: PPUSH
9846: CALL_OW 255
9850: PUSH
9851: LD_INT 1
9853: EQUAL
9854: AND
9855: IFFALSE 9871
// Say ( Frank , D5a-Frank-1 ) else
9857: LD_EXP 15
9861: PPUSH
9862: LD_STRING D5a-Frank-1
9864: PPUSH
9865: CALL_OW 88
9869: GO 9925
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
9871: LD_EXP 18
9875: PUSH
9876: LD_EXP 18
9880: PPUSH
9881: CALL_OW 255
9885: PUSH
9886: LD_INT 1
9888: EQUAL
9889: AND
9890: IFFALSE 9906
// Say ( Kikuchi , D5a-Yam-1 ) else
9892: LD_EXP 18
9896: PPUSH
9897: LD_STRING D5a-Yam-1
9899: PPUSH
9900: CALL_OW 88
9904: GO 9925
// Say ( GetRandom ( sex_male ) [ 1 ] , D5a-Sol1-1 ) ;
9906: LD_INT 1
9908: PPUSH
9909: CALL 600 0 1
9913: PUSH
9914: LD_INT 1
9916: ARRAY
9917: PPUSH
9918: LD_STRING D5a-Sol1-1
9920: PPUSH
9921: CALL_OW 88
// Say ( JMM , D5a-JMM-1 ) ;
9925: LD_EXP 9
9929: PPUSH
9930: LD_STRING D5a-JMM-1
9932: PPUSH
9933: CALL_OW 88
// if Cyrus then
9937: LD_EXP 13
9941: IFFALSE 9955
// Say ( Cyrus , D5a-Cyrus-1 ) ;
9943: LD_EXP 13
9947: PPUSH
9948: LD_STRING D5a-Cyrus-1
9950: PPUSH
9951: CALL_OW 88
// x := false ;
9955: LD_ADDR_VAR 0 2
9959: PUSH
9960: LD_INT 0
9962: ST_TO_ADDR
// while ( true ) do
9963: LD_INT 1
9965: IFFALSE 10052
// begin wait ( 0 0$01 ) ;
9967: LD_INT 35
9969: PPUSH
9970: CALL_OW 67
// for i in FilterAllUnits ( [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) diff ru_dep_west do
9974: LD_ADDR_VAR 0 4
9978: PUSH
9979: LD_INT 2
9981: PUSH
9982: LD_INT 30
9984: PUSH
9985: LD_INT 0
9987: PUSH
9988: EMPTY
9989: LIST
9990: LIST
9991: PUSH
9992: LD_INT 30
9994: PUSH
9995: LD_INT 1
9997: PUSH
9998: EMPTY
9999: LIST
10000: LIST
10001: PUSH
10002: EMPTY
10003: LIST
10004: LIST
10005: LIST
10006: PPUSH
10007: CALL_OW 69
10011: PUSH
10012: LD_INT 1
10014: DIFF
10015: PUSH
10016: FOR_IN
10017: IFFALSE 10040
// if BaseNeedEnergy ( i ) then
10019: LD_VAR 0 4
10023: PPUSH
10024: CALL 1153 0 1
10028: IFFALSE 10038
// x := true ;
10030: LD_ADDR_VAR 0 2
10034: PUSH
10035: LD_INT 1
10037: ST_TO_ADDR
10038: GO 10016
10040: POP
10041: POP
// if x then
10042: LD_VAR 0 2
10046: IFFALSE 10050
// break ;
10048: GO 10052
// end ;
10050: GO 9963
// Say ( JMM , D5b-JMM-1 ) ;
10052: LD_EXP 9
10056: PPUSH
10057: LD_STRING D5b-JMM-1
10059: PPUSH
10060: CALL_OW 88
// end ;
10064: PPOPN 4
10066: END
// every 0 0$1 trigger time_to_end [ 1 ] < tick do
10067: LD_EXP 5
10071: PUSH
10072: LD_INT 1
10074: ARRAY
10075: PUSH
10076: LD_OWVAR 1
10080: LESS
10081: IFFALSE 10281
10083: GO 10085
10085: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10086: LD_INT 16
10088: PPUSH
10089: CALL_OW 301
10093: NOT
10094: IFFALSE 10117
// begin SayRadio ( Harisson , D3b-Har-3 ) ;
10096: LD_EXP 19
10100: PPUSH
10101: LD_STRING D3b-Har-3
10103: PPUSH
10104: CALL_OW 94
// ChangeMissionObjectives ( M2a ) ;
10108: LD_STRING M2a
10110: PPUSH
10111: CALL_OW 337
// end else
10115: GO 10136
// begin SayRadio ( Harisson , D3b-Har-3a ) ;
10117: LD_EXP 19
10121: PPUSH
10122: LD_STRING D3b-Har-3a
10124: PPUSH
10125: CALL_OW 94
// ChangeMissionObjectives ( M2 ) ;
10129: LD_STRING M2
10131: PPUSH
10132: CALL_OW 337
// end ; can_end := true ;
10136: LD_ADDR_EXP 6
10140: PUSH
10141: LD_INT 1
10143: ST_TO_ADDR
// SetAreaMapShow ( endArea , 1 ) ;
10144: LD_INT 9
10146: PPUSH
10147: LD_INT 1
10149: PPUSH
10150: CALL_OW 424
// Wait ( 0 0$02 ) ;
10154: LD_INT 70
10156: PPUSH
10157: CALL_OW 67
// if Lisa then
10161: LD_EXP 14
10165: IFFALSE 10179
// Say ( Lisa , D3b-Lisa ) ;
10167: LD_EXP 14
10171: PPUSH
10172: LD_STRING D3b-Lisa
10174: PPUSH
10175: CALL_OW 88
// if Bobby then
10179: LD_EXP 12
10183: IFFALSE 10197
// Say ( Bobby , D3b-Bobby-3 ) ;
10185: LD_EXP 12
10189: PPUSH
10190: LD_STRING D3b-Bobby-3
10192: PPUSH
10193: CALL_OW 88
// if Cyrus then
10197: LD_EXP 13
10201: IFFALSE 10215
// Say ( Cyrus , D3b-Cyrus-3 ) ;
10203: LD_EXP 13
10207: PPUSH
10208: LD_STRING D3b-Cyrus-3
10210: PPUSH
10211: CALL_OW 88
// if Frank and GetSide ( Frank ) = 1 then
10215: LD_EXP 15
10219: PUSH
10220: LD_EXP 15
10224: PPUSH
10225: CALL_OW 255
10229: PUSH
10230: LD_INT 1
10232: EQUAL
10233: AND
10234: IFFALSE 10248
// Say ( Frank , D3b-Frank-3 ) ;
10236: LD_EXP 15
10240: PPUSH
10241: LD_STRING D3b-Frank-3
10243: PPUSH
10244: CALL_OW 88
// if Kikuchi and GetSide ( Kikuchi ) = 1 then
10248: LD_EXP 18
10252: PUSH
10253: LD_EXP 18
10257: PPUSH
10258: CALL_OW 255
10262: PUSH
10263: LD_INT 1
10265: EQUAL
10266: AND
10267: IFFALSE 10281
// Say ( Kikuchi , D3b-Yam-4 ) ;
10269: LD_EXP 18
10273: PPUSH
10274: LD_STRING D3b-Yam-4
10276: PPUSH
10277: CALL_OW 88
// end ;
10281: END
// every 0 0$1 trigger time_to_end [ 2 ] < tick do
10282: LD_EXP 5
10286: PUSH
10287: LD_INT 2
10289: ARRAY
10290: PUSH
10291: LD_OWVAR 1
10295: LESS
10296: IFFALSE 10328
10298: GO 10300
10300: DISABLE
// begin SayRadio ( Harisson , D4-Har-1 ) ;
10301: LD_EXP 19
10305: PPUSH
10306: LD_STRING D4-Har-1
10308: PPUSH
10309: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
10313: LD_STRING M3
10315: PPUSH
10316: CALL_OW 337
// must_end := true ;
10320: LD_ADDR_EXP 7
10324: PUSH
10325: LD_INT 1
10327: ST_TO_ADDR
// end ;
10328: END
// every 0 0$01 trigger time_to_end [ 3 ] < tick do
10329: LD_EXP 5
10333: PUSH
10334: LD_INT 3
10336: ARRAY
10337: PUSH
10338: LD_OWVAR 1
10342: LESS
10343: IFFALSE 10374
10345: GO 10347
10347: DISABLE
// begin if not IsDead ( ru_dep_main ) then
10348: LD_INT 16
10350: PPUSH
10351: CALL_OW 301
10355: NOT
10356: IFFALSE 10367
// YouLost ( TimeOut1 ) else
10358: LD_STRING TimeOut1
10360: PPUSH
10361: CALL_OW 104
10365: GO 10374
// YouLost ( TimeOut2 ) ;
10367: LD_STRING TimeOut2
10369: PPUSH
10370: CALL_OW 104
// end ;
10374: END
// every 0 0$1 trigger IsInArea ( JMM , endArea ) and can_end do var wait_on , i , tmp , m1 , m2 , m3 ;
10375: LD_EXP 9
10379: PPUSH
10380: LD_INT 9
10382: PPUSH
10383: CALL_OW 308
10387: PUSH
10388: LD_EXP 6
10392: AND
10393: IFFALSE 11493
10395: GO 10397
10397: DISABLE
10398: LD_INT 0
10400: PPUSH
10401: PPUSH
10402: PPUSH
10403: PPUSH
10404: PPUSH
10405: PPUSH
// begin wait_on := false ;
10406: LD_ADDR_VAR 0 1
10410: PUSH
10411: LD_INT 0
10413: ST_TO_ADDR
// if FilterPeople ( 1 ) + 0 > ( FilterPeopleArea ( 1 , endArea ) ^ FilterDriversArea ( 1 , endArea ) ) + 0 then
10414: LD_INT 1
10416: PPUSH
10417: CALL 1230 0 1
10421: PUSH
10422: LD_INT 0
10424: PLUS
10425: PUSH
10426: LD_INT 1
10428: PPUSH
10429: LD_INT 9
10431: PPUSH
10432: CALL 1321 0 2
10436: PUSH
10437: LD_INT 1
10439: PPUSH
10440: LD_INT 9
10442: PPUSH
10443: CALL 1368 0 2
10447: ADD
10448: PUSH
10449: LD_INT 0
10451: PLUS
10452: GREATER
10453: IFFALSE 10502
// case Query ( Q1 ) of 1 :
10455: LD_STRING Q1
10457: PPUSH
10458: CALL_OW 97
10462: PUSH
10463: LD_INT 1
10465: DOUBLE
10466: EQUAL
10467: IFTRUE 10471
10469: GO 10482
10471: POP
// wait_on := true ; 2 :
10472: LD_ADDR_VAR 0 1
10476: PUSH
10477: LD_INT 1
10479: ST_TO_ADDR
10480: GO 10502
10482: LD_INT 2
10484: DOUBLE
10485: EQUAL
10486: IFTRUE 10490
10488: GO 10501
10490: POP
// wait_on := false ; end ;
10491: LD_ADDR_VAR 0 1
10495: PUSH
10496: LD_INT 0
10498: ST_TO_ADDR
10499: GO 10502
10501: POP
// repeat wait ( 0 0$01 ) ;
10502: LD_INT 35
10504: PPUSH
10505: CALL_OW 67
// until ( not wait_on ) or ( FilterPeople ( 1 ) + 0 ) = ( FilterPeopleArea ( 1 , endArea ) ^ FilterDriversArea ( 1 , endArea ) ) + 0 ;
10509: LD_VAR 0 1
10513: NOT
10514: PUSH
10515: LD_INT 1
10517: PPUSH
10518: CALL 1230 0 1
10522: PUSH
10523: LD_INT 0
10525: PLUS
10526: PUSH
10527: LD_INT 1
10529: PPUSH
10530: LD_INT 9
10532: PPUSH
10533: CALL 1321 0 2
10537: PUSH
10538: LD_INT 1
10540: PPUSH
10541: LD_INT 9
10543: PPUSH
10544: CALL 1368 0 2
10548: ADD
10549: PUSH
10550: LD_INT 0
10552: PLUS
10553: EQUAL
10554: OR
10555: IFFALSE 10502
// DialogueOn ;
10557: CALL_OW 6
// CenterNowOnUnits ( JMM ) ;
10561: LD_EXP 9
10565: PPUSH
10566: CALL_OW 87
// Say ( JMM , D6-JMM-1 ) ;
10570: LD_EXP 9
10574: PPUSH
10575: LD_STRING D6-JMM-1
10577: PPUSH
10578: CALL_OW 88
// SayRadio ( Harisson , D6-Har-1 ) ;
10582: LD_EXP 19
10586: PPUSH
10587: LD_STRING D6-Har-1
10589: PPUSH
10590: CALL_OW 94
// Say ( JMM , D6-JMM-2 ) ;
10594: LD_EXP 9
10598: PPUSH
10599: LD_STRING D6-JMM-2
10601: PPUSH
10602: CALL_OW 88
// SayRadio ( Harisson , D6-Har-2 ) ;
10606: LD_EXP 19
10610: PPUSH
10611: LD_STRING D6-Har-2
10613: PPUSH
10614: CALL_OW 94
// Say ( JMM , D6-JMM-3 ) ;
10618: LD_EXP 9
10622: PPUSH
10623: LD_STRING D6-JMM-3
10625: PPUSH
10626: CALL_OW 88
// SayRadio ( Harisson , D6-Har-3 ) ;
10630: LD_EXP 19
10634: PPUSH
10635: LD_STRING D6-Har-3
10637: PPUSH
10638: CALL_OW 94
// Say ( JMM , D6-JMM-4 ) ;
10642: LD_EXP 9
10646: PPUSH
10647: LD_STRING D6-JMM-4
10649: PPUSH
10650: CALL_OW 88
// SayRadio ( Harisson , D6-Har-4 ) ;
10654: LD_EXP 19
10658: PPUSH
10659: LD_STRING D6-Har-4
10661: PPUSH
10662: CALL_OW 94
// Say ( JMM , D6-JMM-5 ) ;
10666: LD_EXP 9
10670: PPUSH
10671: LD_STRING D6-JMM-5
10673: PPUSH
10674: CALL_OW 88
// DialogueOff ;
10678: CALL_OW 7
// m1 := false ;
10682: LD_ADDR_VAR 0 4
10686: PUSH
10687: LD_INT 0
10689: ST_TO_ADDR
// m2 := false ;
10690: LD_ADDR_VAR 0 5
10694: PUSH
10695: LD_INT 0
10697: ST_TO_ADDR
// m3 := false ;
10698: LD_ADDR_VAR 0 6
10702: PUSH
10703: LD_INT 0
10705: ST_TO_ADDR
// tmp := FilterBuildings ( 3 ) ;
10706: LD_ADDR_VAR 0 3
10710: PUSH
10711: LD_INT 3
10713: PPUSH
10714: CALL 1499 0 1
10718: ST_TO_ADDR
// if tmp >= 35 then
10719: LD_VAR 0 3
10723: PUSH
10724: LD_INT 35
10726: GREATEREQUAL
10727: IFFALSE 10764
// begin AddMedal ( Destroy1 , - 1 ) ;
10729: LD_STRING Destroy1
10731: PPUSH
10732: LD_INT 1
10734: NEG
10735: PPUSH
10736: CALL_OW 101
// AddMedal ( Destroy2 , - 1 ) ;
10740: LD_STRING Destroy2
10742: PPUSH
10743: LD_INT 1
10745: NEG
10746: PPUSH
10747: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
10751: LD_STRING Destroy3
10753: PPUSH
10754: LD_INT 1
10756: NEG
10757: PPUSH
10758: CALL_OW 101
// end else
10762: GO 10875
// begin AddMedal ( Destroy1 , 1 ) ;
10764: LD_STRING Destroy1
10766: PPUSH
10767: LD_INT 1
10769: PPUSH
10770: CALL_OW 101
// m1 := true ;
10774: LD_ADDR_VAR 0 4
10778: PUSH
10779: LD_INT 1
10781: ST_TO_ADDR
// if tmp >= 25 then
10782: LD_VAR 0 3
10786: PUSH
10787: LD_INT 25
10789: GREATEREQUAL
10790: IFFALSE 10816
// begin AddMedal ( Destroy2 , - 1 ) ;
10792: LD_STRING Destroy2
10794: PPUSH
10795: LD_INT 1
10797: NEG
10798: PPUSH
10799: CALL_OW 101
// AddMedal ( Destroy3 , - 1 ) ;
10803: LD_STRING Destroy3
10805: PPUSH
10806: LD_INT 1
10808: NEG
10809: PPUSH
10810: CALL_OW 101
// end else
10814: GO 10875
// begin AddMedal ( Destroy2 , 1 ) ;
10816: LD_STRING Destroy2
10818: PPUSH
10819: LD_INT 1
10821: PPUSH
10822: CALL_OW 101
// m2 := true ;
10826: LD_ADDR_VAR 0 5
10830: PUSH
10831: LD_INT 1
10833: ST_TO_ADDR
// if tmp >= 15 then
10834: LD_VAR 0 3
10838: PUSH
10839: LD_INT 15
10841: GREATEREQUAL
10842: IFFALSE 10857
// AddMedal ( Destroy3 , - 1 ) else
10844: LD_STRING Destroy3
10846: PPUSH
10847: LD_INT 1
10849: NEG
10850: PPUSH
10851: CALL_OW 101
10855: GO 10875
// begin AddMedal ( Destroy3 , 1 ) ;
10857: LD_STRING Destroy3
10859: PPUSH
10860: LD_INT 1
10862: PPUSH
10863: CALL_OW 101
// m3 := true ;
10867: LD_ADDR_VAR 0 6
10871: PUSH
10872: LD_INT 1
10874: ST_TO_ADDR
// end ; end ; end ; if tick <= 32 32$00 then
10875: LD_OWVAR 1
10879: PUSH
10880: LD_INT 67200
10882: LESSEQUAL
10883: IFFALSE 10892
// SetAchievement ( ACH_ASPEED_7 ) ;
10885: LD_STRING ACH_ASPEED_7
10887: PPUSH
10888: CALL_OW 543
// if m1 and m2 and m3 and Difficulty >= 3 then
10892: LD_VAR 0 4
10896: PUSH
10897: LD_VAR 0 5
10901: AND
10902: PUSH
10903: LD_VAR 0 6
10907: AND
10908: PUSH
10909: LD_OWVAR 67
10913: PUSH
10914: LD_INT 3
10916: GREATEREQUAL
10917: AND
10918: IFFALSE 10930
// SetAchievementEX ( ACH_AMER , 7 ) ;
10920: LD_STRING ACH_AMER
10922: PPUSH
10923: LD_INT 7
10925: PPUSH
10926: CALL_OW 564
// GiveMedals ( MAIN ) ;
10930: LD_STRING MAIN
10932: PPUSH
10933: CALL_OW 102
// tmp := FilterPeopleArea ( 1 , endArea ) union FilterDriversArea ( 1 , endArea ) ;
10937: LD_ADDR_VAR 0 3
10941: PUSH
10942: LD_INT 1
10944: PPUSH
10945: LD_INT 9
10947: PPUSH
10948: CALL 1321 0 2
10952: PUSH
10953: LD_INT 1
10955: PPUSH
10956: LD_INT 9
10958: PPUSH
10959: CALL 1368 0 2
10963: UNION
10964: ST_TO_ADDR
// RewardPeople ( tmp ) ;
10965: LD_VAR 0 3
10969: PPUSH
10970: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
10974: LD_EXP 9
10978: PPUSH
10979: LD_EXP 3
10983: PUSH
10984: LD_STRING JMM
10986: STR
10987: PPUSH
10988: CALL_OW 38
// if Brown in tmp then
10992: LD_EXP 10
10996: PUSH
10997: LD_VAR 0 3
11001: IN
11002: IFFALSE 11022
// SaveCharacters ( Brown , mission_prefix & Brown ) ;
11004: LD_EXP 10
11008: PPUSH
11009: LD_EXP 3
11013: PUSH
11014: LD_STRING Brown
11016: STR
11017: PPUSH
11018: CALL_OW 38
// if Donaldson in tmp then
11022: LD_EXP 11
11026: PUSH
11027: LD_VAR 0 3
11031: IN
11032: IFFALSE 11052
// SaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
11034: LD_EXP 11
11038: PPUSH
11039: LD_EXP 3
11043: PUSH
11044: LD_STRING Donaldson
11046: STR
11047: PPUSH
11048: CALL_OW 38
// if Bobby in tmp then
11052: LD_EXP 12
11056: PUSH
11057: LD_VAR 0 3
11061: IN
11062: IFFALSE 11082
// SaveCharacters ( Bobby , mission_prefix & Bobby ) ;
11064: LD_EXP 12
11068: PPUSH
11069: LD_EXP 3
11073: PUSH
11074: LD_STRING Bobby
11076: STR
11077: PPUSH
11078: CALL_OW 38
// if Cyrus in tmp then
11082: LD_EXP 13
11086: PUSH
11087: LD_VAR 0 3
11091: IN
11092: IFFALSE 11112
// SaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
11094: LD_EXP 13
11098: PPUSH
11099: LD_EXP 3
11103: PUSH
11104: LD_STRING Cyrus
11106: STR
11107: PPUSH
11108: CALL_OW 38
// if Lisa in tmp then
11112: LD_EXP 14
11116: PUSH
11117: LD_VAR 0 3
11121: IN
11122: IFFALSE 11142
// SaveCharacters ( Lisa , mission_prefix & Lisa ) ;
11124: LD_EXP 14
11128: PPUSH
11129: LD_EXP 3
11133: PUSH
11134: LD_STRING Lisa
11136: STR
11137: PPUSH
11138: CALL_OW 38
// if Frank in tmp then
11142: LD_EXP 15
11146: PUSH
11147: LD_VAR 0 3
11151: IN
11152: IFFALSE 11172
// SaveCharacters ( Frank , mission_prefix & Frank ) ;
11154: LD_EXP 15
11158: PPUSH
11159: LD_EXP 3
11163: PUSH
11164: LD_STRING Frank
11166: STR
11167: PPUSH
11168: CALL_OW 38
// if Gladstone in tmp then
11172: LD_EXP 16
11176: PUSH
11177: LD_VAR 0 3
11181: IN
11182: IFFALSE 11202
// SaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
11184: LD_EXP 16
11188: PPUSH
11189: LD_EXP 3
11193: PUSH
11194: LD_STRING Gladstone
11196: STR
11197: PPUSH
11198: CALL_OW 38
// if Khatam in tmp then
11202: LD_EXP 17
11206: PUSH
11207: LD_VAR 0 3
11211: IN
11212: IFFALSE 11232
// SaveCharacters ( Khatam , mission_prefix & Khatam ) ;
11214: LD_EXP 17
11218: PPUSH
11219: LD_EXP 3
11223: PUSH
11224: LD_STRING Khatam
11226: STR
11227: PPUSH
11228: CALL_OW 38
// if Kikuchi in tmp then
11232: LD_EXP 18
11236: PUSH
11237: LD_VAR 0 3
11241: IN
11242: IFFALSE 11262
// SaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
11244: LD_EXP 18
11248: PPUSH
11249: LD_EXP 3
11253: PUSH
11254: LD_STRING Kikuchi
11256: STR
11257: PPUSH
11258: CALL_OW 38
// SaveCharacters ( tmp diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Khatam ] , mission_prefix & others ) ;
11262: LD_VAR 0 3
11266: PUSH
11267: LD_EXP 9
11271: PUSH
11272: LD_EXP 10
11276: PUSH
11277: LD_EXP 11
11281: PUSH
11282: LD_EXP 12
11286: PUSH
11287: LD_EXP 13
11291: PUSH
11292: LD_EXP 14
11296: PUSH
11297: LD_EXP 15
11301: PUSH
11302: LD_EXP 16
11306: PUSH
11307: LD_EXP 18
11311: PUSH
11312: LD_EXP 17
11316: PUSH
11317: EMPTY
11318: LIST
11319: LIST
11320: LIST
11321: LIST
11322: LIST
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: DIFF
11329: PPUSH
11330: LD_EXP 3
11334: PUSH
11335: LD_STRING others
11337: STR
11338: PPUSH
11339: CALL_OW 38
// SaveVariable ( tick , 07_time ) ;
11343: LD_OWVAR 1
11347: PPUSH
11348: LD_STRING 07_time
11350: PPUSH
11351: CALL_OW 39
// tmp := [ ] ;
11355: LD_ADDR_VAR 0 3
11359: PUSH
11360: EMPTY
11361: ST_TO_ADDR
// for i in FilterUnitsInArea ( endArea , [ [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_vehicle ] ] ] ) do
11362: LD_ADDR_VAR 0 2
11366: PUSH
11367: LD_INT 9
11369: PPUSH
11370: LD_INT 22
11372: PUSH
11373: LD_INT 1
11375: PUSH
11376: EMPTY
11377: LIST
11378: LIST
11379: PUSH
11380: LD_INT 23
11382: PUSH
11383: LD_INT 1
11385: PUSH
11386: EMPTY
11387: LIST
11388: LIST
11389: PUSH
11390: LD_INT 21
11392: PUSH
11393: LD_INT 2
11395: PUSH
11396: EMPTY
11397: LIST
11398: LIST
11399: PUSH
11400: EMPTY
11401: LIST
11402: LIST
11403: LIST
11404: PUSH
11405: EMPTY
11406: LIST
11407: PPUSH
11408: CALL_OW 70
11412: PUSH
11413: FOR_IN
11414: IFFALSE 11475
// tmp := tmp ^ [ GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) ] ;
11416: LD_ADDR_VAR 0 3
11420: PUSH
11421: LD_VAR 0 3
11425: PUSH
11426: LD_VAR 0 2
11430: PPUSH
11431: CALL_OW 265
11435: PUSH
11436: LD_VAR 0 2
11440: PPUSH
11441: CALL_OW 262
11445: PUSH
11446: LD_VAR 0 2
11450: PPUSH
11451: CALL_OW 263
11455: PUSH
11456: LD_VAR 0 2
11460: PPUSH
11461: CALL_OW 264
11465: PUSH
11466: EMPTY
11467: LIST
11468: LIST
11469: LIST
11470: LIST
11471: ADD
11472: ST_TO_ADDR
11473: GO 11413
11475: POP
11476: POP
// SaveVariable ( tmp , 07_vehicles ) ;
11477: LD_VAR 0 3
11481: PPUSH
11482: LD_STRING 07_vehicles
11484: PPUSH
11485: CALL_OW 39
// YouWin ;
11489: CALL_OW 103
// end ; end_of_file
11493: PPOPN 6
11495: END
// on UnitDestroyed ( un ) do begin if un = JMM then
11496: LD_VAR 0 1
11500: PUSH
11501: LD_EXP 9
11505: EQUAL
11506: IFFALSE 11515
// YouLost ( JMM ) ;
11508: LD_STRING JMM
11510: PPUSH
11511: CALL_OW 104
// if GetType ( un ) = unit_building then
11515: LD_VAR 0 1
11519: PPUSH
11520: CALL_OW 247
11524: PUSH
11525: LD_INT 3
11527: EQUAL
11528: IFFALSE 11544
// buildings_counter := buildings_counter + 1 ;
11530: LD_ADDR_EXP 4
11534: PUSH
11535: LD_EXP 4
11539: PUSH
11540: LD_INT 1
11542: PLUS
11543: ST_TO_ADDR
// if un in FilterUnitsInArea ( baseArea , [ f_or , [ f_btype , b_turret ] , [ f_btype , b_bunker ] ] ) then
11544: LD_VAR 0 1
11548: PUSH
11549: LD_INT 6
11551: PPUSH
11552: LD_INT 2
11554: PUSH
11555: LD_INT 30
11557: PUSH
11558: LD_INT 33
11560: PUSH
11561: EMPTY
11562: LIST
11563: LIST
11564: PUSH
11565: LD_INT 30
11567: PUSH
11568: LD_INT 32
11570: PUSH
11571: EMPTY
11572: LIST
11573: LIST
11574: PUSH
11575: EMPTY
11576: LIST
11577: LIST
11578: LIST
11579: PPUSH
11580: CALL_OW 70
11584: IN
11585: IFFALSE 11644
// ru_rebuild_list := ru_rebuild_list ^ [ GetBType ( un ) , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ;
11587: LD_ADDR_EXP 20
11591: PUSH
11592: LD_EXP 20
11596: PUSH
11597: LD_VAR 0 1
11601: PPUSH
11602: CALL_OW 266
11606: PUSH
11607: LD_VAR 0 1
11611: PPUSH
11612: CALL_OW 250
11616: PUSH
11617: LD_VAR 0 1
11621: PPUSH
11622: CALL_OW 251
11626: PUSH
11627: LD_VAR 0 1
11631: PPUSH
11632: CALL_OW 254
11636: PUSH
11637: EMPTY
11638: LIST
11639: LIST
11640: LIST
11641: LIST
11642: ADD
11643: ST_TO_ADDR
// if un = ru_dep_main then
11644: LD_VAR 0 1
11648: PUSH
11649: LD_INT 16
11651: EQUAL
11652: IFFALSE 11661
// ChangeMissionObjectives ( M1a ) ;
11654: LD_STRING M1a
11656: PPUSH
11657: CALL_OW 337
// if GetType ( un ) = unit_human and GetSide ( un ) = 3 then
11661: LD_VAR 0 1
11665: PPUSH
11666: CALL_OW 247
11670: PUSH
11671: LD_INT 1
11673: EQUAL
11674: PUSH
11675: LD_VAR 0 1
11679: PPUSH
11680: CALL_OW 255
11684: PUSH
11685: LD_INT 3
11687: EQUAL
11688: AND
11689: IFFALSE 11705
// kill_counter := kill_counter + 1 ;
11691: LD_ADDR_EXP 8
11695: PUSH
11696: LD_EXP 8
11700: PUSH
11701: LD_INT 1
11703: PLUS
11704: ST_TO_ADDR
// end ;
11705: PPOPN 1
11707: END
// on UnitGoesToRed ( un ) do begin if GetBType ( un ) = b_bunker and GetTag ( un ) = 7 then
11708: LD_VAR 0 1
11712: PPUSH
11713: CALL_OW 266
11717: PUSH
11718: LD_INT 32
11720: EQUAL
11721: PUSH
11722: LD_VAR 0 1
11726: PPUSH
11727: CALL_OW 110
11731: PUSH
11732: LD_INT 7
11734: EQUAL
11735: AND
11736: IFFALSE 11750
// SetTag ( un , 0 ) ;
11738: LD_VAR 0 1
11742: PPUSH
11743: LD_INT 0
11745: PPUSH
11746: CALL_OW 109
// end ;
11750: PPOPN 1
11752: END
// on BuildingStarted ( b , builder ) do var i ;
11753: LD_INT 0
11755: PPUSH
// begin if GetSide ( b ) = 3 then
11756: LD_VAR 0 1
11760: PPUSH
11761: CALL_OW 255
11765: PUSH
11766: LD_INT 3
11768: EQUAL
11769: IFFALSE 11809
// for i = 1 to 4 do
11771: LD_ADDR_VAR 0 3
11775: PUSH
11776: DOUBLE
11777: LD_INT 1
11779: DEC
11780: ST_TO_ADDR
11781: LD_INT 4
11783: PUSH
11784: FOR_TO
11785: IFFALSE 11807
// ru_rebuild_list := Delete ( ru_rebuild_list , 1 ) ;
11787: LD_ADDR_EXP 20
11791: PUSH
11792: LD_EXP 20
11796: PPUSH
11797: LD_INT 1
11799: PPUSH
11800: CALL_OW 3
11804: ST_TO_ADDR
11805: GO 11784
11807: POP
11808: POP
// end ;
11809: PPOPN 3
11811: END
// on BuildingComplete ( b ) do if GetBType ( b ) in [ b_bunker , b_turret ] then
11812: LD_VAR 0 1
11816: PPUSH
11817: CALL_OW 266
11821: PUSH
11822: LD_INT 32
11824: PUSH
11825: LD_INT 33
11827: PUSH
11828: EMPTY
11829: LIST
11830: LIST
11831: IN
11832: IFFALSE 11846
// ComPlaceWeapon ( b , ru_gatling_gun ) ;
11834: LD_VAR 0 1
11838: PPUSH
11839: LD_INT 43
11841: PPUSH
11842: CALL_OW 148
11846: PPOPN 1
11848: END
// on LeaveBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) then
11849: LD_VAR 0 1
11853: PUSH
11854: LD_INT 22
11856: PUSH
11857: LD_INT 3
11859: PUSH
11860: EMPTY
11861: LIST
11862: LIST
11863: PUSH
11864: LD_INT 2
11866: PUSH
11867: LD_INT 30
11869: PUSH
11870: LD_INT 31
11872: PUSH
11873: EMPTY
11874: LIST
11875: LIST
11876: PUSH
11877: LD_INT 30
11879: PUSH
11880: LD_INT 32
11882: PUSH
11883: EMPTY
11884: LIST
11885: LIST
11886: PUSH
11887: EMPTY
11888: LIST
11889: LIST
11890: LIST
11891: PUSH
11892: EMPTY
11893: LIST
11894: LIST
11895: PPUSH
11896: CALL_OW 69
11900: IN
11901: IFFALSE 11923
// GoToAnotherTower ( un , b , 143 , 143 ) ;
11903: LD_VAR 0 2
11907: PPUSH
11908: LD_VAR 0 1
11912: PPUSH
11913: LD_INT 143
11915: PPUSH
11916: LD_INT 143
11918: PPUSH
11919: CALL 830 0 4
// end ;
11923: PPOPN 2
11925: END
// on EnterBuilding ( b , un ) do begin if b in FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_bunker ] ] ) then
11926: LD_VAR 0 1
11930: PUSH
11931: LD_INT 22
11933: PUSH
11934: LD_INT 3
11936: PUSH
11937: EMPTY
11938: LIST
11939: LIST
11940: PUSH
11941: LD_INT 30
11943: PUSH
11944: LD_INT 32
11946: PUSH
11947: EMPTY
11948: LIST
11949: LIST
11950: PUSH
11951: EMPTY
11952: LIST
11953: LIST
11954: PPUSH
11955: CALL_OW 69
11959: IN
11960: IFFALSE 11974
// SetTag ( b , 0 ) ;
11962: LD_VAR 0 1
11966: PPUSH
11967: LD_INT 0
11969: PPUSH
11970: CALL_OW 109
// end ; end_of_file
11974: PPOPN 2
11976: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
11977: LD_INT 0
11979: PPUSH
// ar_miner := 81 ;
11980: LD_ADDR_EXP 28
11984: PUSH
11985: LD_INT 81
11987: ST_TO_ADDR
// ar_crane := 88 ;
11988: LD_ADDR_EXP 27
11992: PUSH
11993: LD_INT 88
11995: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
11996: LD_ADDR_EXP 22
12000: PUSH
12001: LD_INT 89
12003: ST_TO_ADDR
// us_hack := 99 ;
12004: LD_ADDR_EXP 23
12008: PUSH
12009: LD_INT 99
12011: ST_TO_ADDR
// us_artillery := 97 ;
12012: LD_ADDR_EXP 24
12016: PUSH
12017: LD_INT 97
12019: ST_TO_ADDR
// ar_bio_bomb := 91 ;
12020: LD_ADDR_EXP 25
12024: PUSH
12025: LD_INT 91
12027: ST_TO_ADDR
// ar_mortar := 92 ;
12028: LD_ADDR_EXP 26
12032: PUSH
12033: LD_INT 92
12035: ST_TO_ADDR
// ru_radar := 98 ;
12036: LD_ADDR_EXP 21
12040: PUSH
12041: LD_INT 98
12043: ST_TO_ADDR
// tech_Artillery := 80 ;
12044: LD_ADDR_EXP 29
12048: PUSH
12049: LD_INT 80
12051: ST_TO_ADDR
// tech_RadMat := 81 ;
12052: LD_ADDR_EXP 30
12056: PUSH
12057: LD_INT 81
12059: ST_TO_ADDR
// tech_BasicTools := 82 ;
12060: LD_ADDR_EXP 31
12064: PUSH
12065: LD_INT 82
12067: ST_TO_ADDR
// tech_Cargo := 83 ;
12068: LD_ADDR_EXP 32
12072: PUSH
12073: LD_INT 83
12075: ST_TO_ADDR
// tech_Track := 84 ;
12076: LD_ADDR_EXP 33
12080: PUSH
12081: LD_INT 84
12083: ST_TO_ADDR
// tech_Crane := 85 ;
12084: LD_ADDR_EXP 34
12088: PUSH
12089: LD_INT 85
12091: ST_TO_ADDR
// tech_Bulldozer := 86 ;
12092: LD_ADDR_EXP 35
12096: PUSH
12097: LD_INT 86
12099: ST_TO_ADDR
// tech_Hovercraft := 87 ;
12100: LD_ADDR_EXP 36
12104: PUSH
12105: LD_INT 87
12107: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
12108: LD_ADDR_EXP 37
12112: PUSH
12113: LD_INT 88
12115: ST_TO_ADDR
// class_mastodont := 31 ;
12116: LD_ADDR_EXP 38
12120: PUSH
12121: LD_INT 31
12123: ST_TO_ADDR
// class_horse := 21 ;
12124: LD_ADDR_EXP 39
12128: PUSH
12129: LD_INT 21
12131: ST_TO_ADDR
// end ;
12132: LD_VAR 0 1
12136: RET
// every 1 do
12137: GO 12139
12139: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
12140: CALL 11977 0 0
12144: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
12145: LD_INT 0
12147: PPUSH
// if p2 = 100 then
12148: LD_VAR 0 2
12152: PUSH
12153: LD_INT 100
12155: EQUAL
12156: IFFALSE 13159
// begin if not StreamModeActive then
12158: LD_EXP 40
12162: NOT
12163: IFFALSE 12173
// StreamModeActive := true ;
12165: LD_ADDR_EXP 40
12169: PUSH
12170: LD_INT 1
12172: ST_TO_ADDR
// if p3 = 0 then
12173: LD_VAR 0 3
12177: PUSH
12178: LD_INT 0
12180: EQUAL
12181: IFFALSE 12187
// InitStreamMode ;
12183: CALL 13319 0 0
// if p3 = 1 then
12187: LD_VAR 0 3
12191: PUSH
12192: LD_INT 1
12194: EQUAL
12195: IFFALSE 12205
// sRocket := true ;
12197: LD_ADDR_EXP 45
12201: PUSH
12202: LD_INT 1
12204: ST_TO_ADDR
// if p3 = 2 then
12205: LD_VAR 0 3
12209: PUSH
12210: LD_INT 2
12212: EQUAL
12213: IFFALSE 12223
// sSpeed := true ;
12215: LD_ADDR_EXP 44
12219: PUSH
12220: LD_INT 1
12222: ST_TO_ADDR
// if p3 = 3 then
12223: LD_VAR 0 3
12227: PUSH
12228: LD_INT 3
12230: EQUAL
12231: IFFALSE 12241
// sEngine := true ;
12233: LD_ADDR_EXP 46
12237: PUSH
12238: LD_INT 1
12240: ST_TO_ADDR
// if p3 = 4 then
12241: LD_VAR 0 3
12245: PUSH
12246: LD_INT 4
12248: EQUAL
12249: IFFALSE 12259
// sSpec := true ;
12251: LD_ADDR_EXP 43
12255: PUSH
12256: LD_INT 1
12258: ST_TO_ADDR
// if p3 = 5 then
12259: LD_VAR 0 3
12263: PUSH
12264: LD_INT 5
12266: EQUAL
12267: IFFALSE 12277
// sLevel := true ;
12269: LD_ADDR_EXP 47
12273: PUSH
12274: LD_INT 1
12276: ST_TO_ADDR
// if p3 = 6 then
12277: LD_VAR 0 3
12281: PUSH
12282: LD_INT 6
12284: EQUAL
12285: IFFALSE 12295
// sArmoury := true ;
12287: LD_ADDR_EXP 48
12291: PUSH
12292: LD_INT 1
12294: ST_TO_ADDR
// if p3 = 7 then
12295: LD_VAR 0 3
12299: PUSH
12300: LD_INT 7
12302: EQUAL
12303: IFFALSE 12313
// sRadar := true ;
12305: LD_ADDR_EXP 49
12309: PUSH
12310: LD_INT 1
12312: ST_TO_ADDR
// if p3 = 8 then
12313: LD_VAR 0 3
12317: PUSH
12318: LD_INT 8
12320: EQUAL
12321: IFFALSE 12331
// sBunker := true ;
12323: LD_ADDR_EXP 50
12327: PUSH
12328: LD_INT 1
12330: ST_TO_ADDR
// if p3 = 9 then
12331: LD_VAR 0 3
12335: PUSH
12336: LD_INT 9
12338: EQUAL
12339: IFFALSE 12349
// sHack := true ;
12341: LD_ADDR_EXP 51
12345: PUSH
12346: LD_INT 1
12348: ST_TO_ADDR
// if p3 = 10 then
12349: LD_VAR 0 3
12353: PUSH
12354: LD_INT 10
12356: EQUAL
12357: IFFALSE 12367
// sFire := true ;
12359: LD_ADDR_EXP 52
12363: PUSH
12364: LD_INT 1
12366: ST_TO_ADDR
// if p3 = 11 then
12367: LD_VAR 0 3
12371: PUSH
12372: LD_INT 11
12374: EQUAL
12375: IFFALSE 12385
// sRefresh := true ;
12377: LD_ADDR_EXP 53
12381: PUSH
12382: LD_INT 1
12384: ST_TO_ADDR
// if p3 = 12 then
12385: LD_VAR 0 3
12389: PUSH
12390: LD_INT 12
12392: EQUAL
12393: IFFALSE 12403
// sExp := true ;
12395: LD_ADDR_EXP 54
12399: PUSH
12400: LD_INT 1
12402: ST_TO_ADDR
// if p3 = 13 then
12403: LD_VAR 0 3
12407: PUSH
12408: LD_INT 13
12410: EQUAL
12411: IFFALSE 12421
// sDepot := true ;
12413: LD_ADDR_EXP 55
12417: PUSH
12418: LD_INT 1
12420: ST_TO_ADDR
// if p3 = 14 then
12421: LD_VAR 0 3
12425: PUSH
12426: LD_INT 14
12428: EQUAL
12429: IFFALSE 12439
// sFlag := true ;
12431: LD_ADDR_EXP 56
12435: PUSH
12436: LD_INT 1
12438: ST_TO_ADDR
// if p3 = 15 then
12439: LD_VAR 0 3
12443: PUSH
12444: LD_INT 15
12446: EQUAL
12447: IFFALSE 12457
// sKamikadze := true ;
12449: LD_ADDR_EXP 64
12453: PUSH
12454: LD_INT 1
12456: ST_TO_ADDR
// if p3 = 16 then
12457: LD_VAR 0 3
12461: PUSH
12462: LD_INT 16
12464: EQUAL
12465: IFFALSE 12475
// sTroll := true ;
12467: LD_ADDR_EXP 65
12471: PUSH
12472: LD_INT 1
12474: ST_TO_ADDR
// if p3 = 17 then
12475: LD_VAR 0 3
12479: PUSH
12480: LD_INT 17
12482: EQUAL
12483: IFFALSE 12493
// sSlow := true ;
12485: LD_ADDR_EXP 66
12489: PUSH
12490: LD_INT 1
12492: ST_TO_ADDR
// if p3 = 18 then
12493: LD_VAR 0 3
12497: PUSH
12498: LD_INT 18
12500: EQUAL
12501: IFFALSE 12511
// sLack := true ;
12503: LD_ADDR_EXP 67
12507: PUSH
12508: LD_INT 1
12510: ST_TO_ADDR
// if p3 = 19 then
12511: LD_VAR 0 3
12515: PUSH
12516: LD_INT 19
12518: EQUAL
12519: IFFALSE 12529
// sTank := true ;
12521: LD_ADDR_EXP 69
12525: PUSH
12526: LD_INT 1
12528: ST_TO_ADDR
// if p3 = 20 then
12529: LD_VAR 0 3
12533: PUSH
12534: LD_INT 20
12536: EQUAL
12537: IFFALSE 12547
// sRemote := true ;
12539: LD_ADDR_EXP 70
12543: PUSH
12544: LD_INT 1
12546: ST_TO_ADDR
// if p3 = 21 then
12547: LD_VAR 0 3
12551: PUSH
12552: LD_INT 21
12554: EQUAL
12555: IFFALSE 12565
// sPowell := true ;
12557: LD_ADDR_EXP 71
12561: PUSH
12562: LD_INT 1
12564: ST_TO_ADDR
// if p3 = 22 then
12565: LD_VAR 0 3
12569: PUSH
12570: LD_INT 22
12572: EQUAL
12573: IFFALSE 12583
// sTeleport := true ;
12575: LD_ADDR_EXP 74
12579: PUSH
12580: LD_INT 1
12582: ST_TO_ADDR
// if p3 = 23 then
12583: LD_VAR 0 3
12587: PUSH
12588: LD_INT 23
12590: EQUAL
12591: IFFALSE 12601
// sOilTower := true ;
12593: LD_ADDR_EXP 76
12597: PUSH
12598: LD_INT 1
12600: ST_TO_ADDR
// if p3 = 24 then
12601: LD_VAR 0 3
12605: PUSH
12606: LD_INT 24
12608: EQUAL
12609: IFFALSE 12619
// sShovel := true ;
12611: LD_ADDR_EXP 77
12615: PUSH
12616: LD_INT 1
12618: ST_TO_ADDR
// if p3 = 25 then
12619: LD_VAR 0 3
12623: PUSH
12624: LD_INT 25
12626: EQUAL
12627: IFFALSE 12637
// sSheik := true ;
12629: LD_ADDR_EXP 78
12633: PUSH
12634: LD_INT 1
12636: ST_TO_ADDR
// if p3 = 26 then
12637: LD_VAR 0 3
12641: PUSH
12642: LD_INT 26
12644: EQUAL
12645: IFFALSE 12655
// sEarthquake := true ;
12647: LD_ADDR_EXP 80
12651: PUSH
12652: LD_INT 1
12654: ST_TO_ADDR
// if p3 = 27 then
12655: LD_VAR 0 3
12659: PUSH
12660: LD_INT 27
12662: EQUAL
12663: IFFALSE 12673
// sAI := true ;
12665: LD_ADDR_EXP 81
12669: PUSH
12670: LD_INT 1
12672: ST_TO_ADDR
// if p3 = 28 then
12673: LD_VAR 0 3
12677: PUSH
12678: LD_INT 28
12680: EQUAL
12681: IFFALSE 12691
// sCargo := true ;
12683: LD_ADDR_EXP 84
12687: PUSH
12688: LD_INT 1
12690: ST_TO_ADDR
// if p3 = 29 then
12691: LD_VAR 0 3
12695: PUSH
12696: LD_INT 29
12698: EQUAL
12699: IFFALSE 12709
// sDLaser := true ;
12701: LD_ADDR_EXP 85
12705: PUSH
12706: LD_INT 1
12708: ST_TO_ADDR
// if p3 = 30 then
12709: LD_VAR 0 3
12713: PUSH
12714: LD_INT 30
12716: EQUAL
12717: IFFALSE 12727
// sExchange := true ;
12719: LD_ADDR_EXP 86
12723: PUSH
12724: LD_INT 1
12726: ST_TO_ADDR
// if p3 = 31 then
12727: LD_VAR 0 3
12731: PUSH
12732: LD_INT 31
12734: EQUAL
12735: IFFALSE 12745
// sFac := true ;
12737: LD_ADDR_EXP 87
12741: PUSH
12742: LD_INT 1
12744: ST_TO_ADDR
// if p3 = 32 then
12745: LD_VAR 0 3
12749: PUSH
12750: LD_INT 32
12752: EQUAL
12753: IFFALSE 12763
// sPower := true ;
12755: LD_ADDR_EXP 88
12759: PUSH
12760: LD_INT 1
12762: ST_TO_ADDR
// if p3 = 33 then
12763: LD_VAR 0 3
12767: PUSH
12768: LD_INT 33
12770: EQUAL
12771: IFFALSE 12781
// sRandom := true ;
12773: LD_ADDR_EXP 89
12777: PUSH
12778: LD_INT 1
12780: ST_TO_ADDR
// if p3 = 34 then
12781: LD_VAR 0 3
12785: PUSH
12786: LD_INT 34
12788: EQUAL
12789: IFFALSE 12799
// sShield := true ;
12791: LD_ADDR_EXP 90
12795: PUSH
12796: LD_INT 1
12798: ST_TO_ADDR
// if p3 = 35 then
12799: LD_VAR 0 3
12803: PUSH
12804: LD_INT 35
12806: EQUAL
12807: IFFALSE 12817
// sTime := true ;
12809: LD_ADDR_EXP 91
12813: PUSH
12814: LD_INT 1
12816: ST_TO_ADDR
// if p3 = 36 then
12817: LD_VAR 0 3
12821: PUSH
12822: LD_INT 36
12824: EQUAL
12825: IFFALSE 12835
// sTools := true ;
12827: LD_ADDR_EXP 92
12831: PUSH
12832: LD_INT 1
12834: ST_TO_ADDR
// if p3 = 101 then
12835: LD_VAR 0 3
12839: PUSH
12840: LD_INT 101
12842: EQUAL
12843: IFFALSE 12853
// sSold := true ;
12845: LD_ADDR_EXP 57
12849: PUSH
12850: LD_INT 1
12852: ST_TO_ADDR
// if p3 = 102 then
12853: LD_VAR 0 3
12857: PUSH
12858: LD_INT 102
12860: EQUAL
12861: IFFALSE 12871
// sDiff := true ;
12863: LD_ADDR_EXP 58
12867: PUSH
12868: LD_INT 1
12870: ST_TO_ADDR
// if p3 = 103 then
12871: LD_VAR 0 3
12875: PUSH
12876: LD_INT 103
12878: EQUAL
12879: IFFALSE 12889
// sFog := true ;
12881: LD_ADDR_EXP 61
12885: PUSH
12886: LD_INT 1
12888: ST_TO_ADDR
// if p3 = 104 then
12889: LD_VAR 0 3
12893: PUSH
12894: LD_INT 104
12896: EQUAL
12897: IFFALSE 12907
// sReset := true ;
12899: LD_ADDR_EXP 62
12903: PUSH
12904: LD_INT 1
12906: ST_TO_ADDR
// if p3 = 105 then
12907: LD_VAR 0 3
12911: PUSH
12912: LD_INT 105
12914: EQUAL
12915: IFFALSE 12925
// sSun := true ;
12917: LD_ADDR_EXP 63
12921: PUSH
12922: LD_INT 1
12924: ST_TO_ADDR
// if p3 = 106 then
12925: LD_VAR 0 3
12929: PUSH
12930: LD_INT 106
12932: EQUAL
12933: IFFALSE 12943
// sTiger := true ;
12935: LD_ADDR_EXP 59
12939: PUSH
12940: LD_INT 1
12942: ST_TO_ADDR
// if p3 = 107 then
12943: LD_VAR 0 3
12947: PUSH
12948: LD_INT 107
12950: EQUAL
12951: IFFALSE 12961
// sBomb := true ;
12953: LD_ADDR_EXP 60
12957: PUSH
12958: LD_INT 1
12960: ST_TO_ADDR
// if p3 = 108 then
12961: LD_VAR 0 3
12965: PUSH
12966: LD_INT 108
12968: EQUAL
12969: IFFALSE 12979
// sWound := true ;
12971: LD_ADDR_EXP 68
12975: PUSH
12976: LD_INT 1
12978: ST_TO_ADDR
// if p3 = 109 then
12979: LD_VAR 0 3
12983: PUSH
12984: LD_INT 109
12986: EQUAL
12987: IFFALSE 12997
// sBetray := true ;
12989: LD_ADDR_EXP 72
12993: PUSH
12994: LD_INT 1
12996: ST_TO_ADDR
// if p3 = 110 then
12997: LD_VAR 0 3
13001: PUSH
13002: LD_INT 110
13004: EQUAL
13005: IFFALSE 13015
// sContamin := true ;
13007: LD_ADDR_EXP 73
13011: PUSH
13012: LD_INT 1
13014: ST_TO_ADDR
// if p3 = 111 then
13015: LD_VAR 0 3
13019: PUSH
13020: LD_INT 111
13022: EQUAL
13023: IFFALSE 13033
// sOil := true ;
13025: LD_ADDR_EXP 75
13029: PUSH
13030: LD_INT 1
13032: ST_TO_ADDR
// if p3 = 112 then
13033: LD_VAR 0 3
13037: PUSH
13038: LD_INT 112
13040: EQUAL
13041: IFFALSE 13051
// sStu := true ;
13043: LD_ADDR_EXP 79
13047: PUSH
13048: LD_INT 1
13050: ST_TO_ADDR
// if p3 = 113 then
13051: LD_VAR 0 3
13055: PUSH
13056: LD_INT 113
13058: EQUAL
13059: IFFALSE 13069
// sBazooka := true ;
13061: LD_ADDR_EXP 82
13065: PUSH
13066: LD_INT 1
13068: ST_TO_ADDR
// if p3 = 114 then
13069: LD_VAR 0 3
13073: PUSH
13074: LD_INT 114
13076: EQUAL
13077: IFFALSE 13087
// sMortar := true ;
13079: LD_ADDR_EXP 83
13083: PUSH
13084: LD_INT 1
13086: ST_TO_ADDR
// if p3 = 115 then
13087: LD_VAR 0 3
13091: PUSH
13092: LD_INT 115
13094: EQUAL
13095: IFFALSE 13105
// sRanger := true ;
13097: LD_ADDR_EXP 93
13101: PUSH
13102: LD_INT 1
13104: ST_TO_ADDR
// if p3 = 116 then
13105: LD_VAR 0 3
13109: PUSH
13110: LD_INT 116
13112: EQUAL
13113: IFFALSE 13123
// sComputer := true ;
13115: LD_ADDR_EXP 94
13119: PUSH
13120: LD_INT 1
13122: ST_TO_ADDR
// if p3 = 117 then
13123: LD_VAR 0 3
13127: PUSH
13128: LD_INT 117
13130: EQUAL
13131: IFFALSE 13141
// s30 := true ;
13133: LD_ADDR_EXP 95
13137: PUSH
13138: LD_INT 1
13140: ST_TO_ADDR
// if p3 = 118 then
13141: LD_VAR 0 3
13145: PUSH
13146: LD_INT 118
13148: EQUAL
13149: IFFALSE 13159
// s60 := true ;
13151: LD_ADDR_EXP 96
13155: PUSH
13156: LD_INT 1
13158: ST_TO_ADDR
// end ; if p2 = 101 then
13159: LD_VAR 0 2
13163: PUSH
13164: LD_INT 101
13166: EQUAL
13167: IFFALSE 13295
// begin case p3 of 1 :
13169: LD_VAR 0 3
13173: PUSH
13174: LD_INT 1
13176: DOUBLE
13177: EQUAL
13178: IFTRUE 13182
13180: GO 13189
13182: POP
// hHackUnlimitedResources ; 2 :
13183: CALL 24891 0 0
13187: GO 13295
13189: LD_INT 2
13191: DOUBLE
13192: EQUAL
13193: IFTRUE 13197
13195: GO 13204
13197: POP
// hHackSetLevel10 ; 3 :
13198: CALL 25024 0 0
13202: GO 13295
13204: LD_INT 3
13206: DOUBLE
13207: EQUAL
13208: IFTRUE 13212
13210: GO 13219
13212: POP
// hHackSetLevel10YourUnits ; 4 :
13213: CALL 25109 0 0
13217: GO 13295
13219: LD_INT 4
13221: DOUBLE
13222: EQUAL
13223: IFTRUE 13227
13225: GO 13234
13227: POP
// hHackInvincible ; 5 :
13228: CALL 25557 0 0
13232: GO 13295
13234: LD_INT 5
13236: DOUBLE
13237: EQUAL
13238: IFTRUE 13242
13240: GO 13249
13242: POP
// hHackInvisible ; 6 :
13243: CALL 25668 0 0
13247: GO 13295
13249: LD_INT 6
13251: DOUBLE
13252: EQUAL
13253: IFTRUE 13257
13255: GO 13264
13257: POP
// hHackChangeYourSide ; 7 :
13258: CALL 25725 0 0
13262: GO 13295
13264: LD_INT 7
13266: DOUBLE
13267: EQUAL
13268: IFTRUE 13272
13270: GO 13279
13272: POP
// hHackChangeUnitSide ; 8 :
13273: CALL 25767 0 0
13277: GO 13295
13279: LD_INT 8
13281: DOUBLE
13282: EQUAL
13283: IFTRUE 13287
13285: GO 13294
13287: POP
// hHackFog ; end ;
13288: CALL 25868 0 0
13292: GO 13295
13294: POP
// end ; end ;
13295: LD_VAR 0 7
13299: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
13300: GO 13302
13302: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
13303: LD_STRING initStreamRollete();
13305: PPUSH
13306: CALL_OW 559
// InitStreamMode ;
13310: CALL 13319 0 0
// DefineStreamItems ( ) ;
13314: CALL 13783 0 0
// end ;
13318: END
// function InitStreamMode ; begin
13319: LD_INT 0
13321: PPUSH
// streamModeActive := false ;
13322: LD_ADDR_EXP 40
13326: PUSH
13327: LD_INT 0
13329: ST_TO_ADDR
// normalCounter := 36 ;
13330: LD_ADDR_EXP 41
13334: PUSH
13335: LD_INT 36
13337: ST_TO_ADDR
// hardcoreCounter := 16 ;
13338: LD_ADDR_EXP 42
13342: PUSH
13343: LD_INT 16
13345: ST_TO_ADDR
// sRocket := false ;
13346: LD_ADDR_EXP 45
13350: PUSH
13351: LD_INT 0
13353: ST_TO_ADDR
// sSpeed := false ;
13354: LD_ADDR_EXP 44
13358: PUSH
13359: LD_INT 0
13361: ST_TO_ADDR
// sEngine := false ;
13362: LD_ADDR_EXP 46
13366: PUSH
13367: LD_INT 0
13369: ST_TO_ADDR
// sSpec := false ;
13370: LD_ADDR_EXP 43
13374: PUSH
13375: LD_INT 0
13377: ST_TO_ADDR
// sLevel := false ;
13378: LD_ADDR_EXP 47
13382: PUSH
13383: LD_INT 0
13385: ST_TO_ADDR
// sArmoury := false ;
13386: LD_ADDR_EXP 48
13390: PUSH
13391: LD_INT 0
13393: ST_TO_ADDR
// sRadar := false ;
13394: LD_ADDR_EXP 49
13398: PUSH
13399: LD_INT 0
13401: ST_TO_ADDR
// sBunker := false ;
13402: LD_ADDR_EXP 50
13406: PUSH
13407: LD_INT 0
13409: ST_TO_ADDR
// sHack := false ;
13410: LD_ADDR_EXP 51
13414: PUSH
13415: LD_INT 0
13417: ST_TO_ADDR
// sFire := false ;
13418: LD_ADDR_EXP 52
13422: PUSH
13423: LD_INT 0
13425: ST_TO_ADDR
// sRefresh := false ;
13426: LD_ADDR_EXP 53
13430: PUSH
13431: LD_INT 0
13433: ST_TO_ADDR
// sExp := false ;
13434: LD_ADDR_EXP 54
13438: PUSH
13439: LD_INT 0
13441: ST_TO_ADDR
// sDepot := false ;
13442: LD_ADDR_EXP 55
13446: PUSH
13447: LD_INT 0
13449: ST_TO_ADDR
// sFlag := false ;
13450: LD_ADDR_EXP 56
13454: PUSH
13455: LD_INT 0
13457: ST_TO_ADDR
// sKamikadze := false ;
13458: LD_ADDR_EXP 64
13462: PUSH
13463: LD_INT 0
13465: ST_TO_ADDR
// sTroll := false ;
13466: LD_ADDR_EXP 65
13470: PUSH
13471: LD_INT 0
13473: ST_TO_ADDR
// sSlow := false ;
13474: LD_ADDR_EXP 66
13478: PUSH
13479: LD_INT 0
13481: ST_TO_ADDR
// sLack := false ;
13482: LD_ADDR_EXP 67
13486: PUSH
13487: LD_INT 0
13489: ST_TO_ADDR
// sTank := false ;
13490: LD_ADDR_EXP 69
13494: PUSH
13495: LD_INT 0
13497: ST_TO_ADDR
// sRemote := false ;
13498: LD_ADDR_EXP 70
13502: PUSH
13503: LD_INT 0
13505: ST_TO_ADDR
// sPowell := false ;
13506: LD_ADDR_EXP 71
13510: PUSH
13511: LD_INT 0
13513: ST_TO_ADDR
// sTeleport := false ;
13514: LD_ADDR_EXP 74
13518: PUSH
13519: LD_INT 0
13521: ST_TO_ADDR
// sOilTower := false ;
13522: LD_ADDR_EXP 76
13526: PUSH
13527: LD_INT 0
13529: ST_TO_ADDR
// sShovel := false ;
13530: LD_ADDR_EXP 77
13534: PUSH
13535: LD_INT 0
13537: ST_TO_ADDR
// sSheik := false ;
13538: LD_ADDR_EXP 78
13542: PUSH
13543: LD_INT 0
13545: ST_TO_ADDR
// sEarthquake := false ;
13546: LD_ADDR_EXP 80
13550: PUSH
13551: LD_INT 0
13553: ST_TO_ADDR
// sAI := false ;
13554: LD_ADDR_EXP 81
13558: PUSH
13559: LD_INT 0
13561: ST_TO_ADDR
// sCargo := false ;
13562: LD_ADDR_EXP 84
13566: PUSH
13567: LD_INT 0
13569: ST_TO_ADDR
// sDLaser := false ;
13570: LD_ADDR_EXP 85
13574: PUSH
13575: LD_INT 0
13577: ST_TO_ADDR
// sExchange := false ;
13578: LD_ADDR_EXP 86
13582: PUSH
13583: LD_INT 0
13585: ST_TO_ADDR
// sFac := false ;
13586: LD_ADDR_EXP 87
13590: PUSH
13591: LD_INT 0
13593: ST_TO_ADDR
// sPower := false ;
13594: LD_ADDR_EXP 88
13598: PUSH
13599: LD_INT 0
13601: ST_TO_ADDR
// sRandom := false ;
13602: LD_ADDR_EXP 89
13606: PUSH
13607: LD_INT 0
13609: ST_TO_ADDR
// sShield := false ;
13610: LD_ADDR_EXP 90
13614: PUSH
13615: LD_INT 0
13617: ST_TO_ADDR
// sTime := false ;
13618: LD_ADDR_EXP 91
13622: PUSH
13623: LD_INT 0
13625: ST_TO_ADDR
// sTools := false ;
13626: LD_ADDR_EXP 92
13630: PUSH
13631: LD_INT 0
13633: ST_TO_ADDR
// sSold := false ;
13634: LD_ADDR_EXP 57
13638: PUSH
13639: LD_INT 0
13641: ST_TO_ADDR
// sDiff := false ;
13642: LD_ADDR_EXP 58
13646: PUSH
13647: LD_INT 0
13649: ST_TO_ADDR
// sFog := false ;
13650: LD_ADDR_EXP 61
13654: PUSH
13655: LD_INT 0
13657: ST_TO_ADDR
// sReset := false ;
13658: LD_ADDR_EXP 62
13662: PUSH
13663: LD_INT 0
13665: ST_TO_ADDR
// sSun := false ;
13666: LD_ADDR_EXP 63
13670: PUSH
13671: LD_INT 0
13673: ST_TO_ADDR
// sTiger := false ;
13674: LD_ADDR_EXP 59
13678: PUSH
13679: LD_INT 0
13681: ST_TO_ADDR
// sBomb := false ;
13682: LD_ADDR_EXP 60
13686: PUSH
13687: LD_INT 0
13689: ST_TO_ADDR
// sWound := false ;
13690: LD_ADDR_EXP 68
13694: PUSH
13695: LD_INT 0
13697: ST_TO_ADDR
// sBetray := false ;
13698: LD_ADDR_EXP 72
13702: PUSH
13703: LD_INT 0
13705: ST_TO_ADDR
// sContamin := false ;
13706: LD_ADDR_EXP 73
13710: PUSH
13711: LD_INT 0
13713: ST_TO_ADDR
// sOil := false ;
13714: LD_ADDR_EXP 75
13718: PUSH
13719: LD_INT 0
13721: ST_TO_ADDR
// sStu := false ;
13722: LD_ADDR_EXP 79
13726: PUSH
13727: LD_INT 0
13729: ST_TO_ADDR
// sBazooka := false ;
13730: LD_ADDR_EXP 82
13734: PUSH
13735: LD_INT 0
13737: ST_TO_ADDR
// sMortar := false ;
13738: LD_ADDR_EXP 83
13742: PUSH
13743: LD_INT 0
13745: ST_TO_ADDR
// sRanger := false ;
13746: LD_ADDR_EXP 93
13750: PUSH
13751: LD_INT 0
13753: ST_TO_ADDR
// sComputer := false ;
13754: LD_ADDR_EXP 94
13758: PUSH
13759: LD_INT 0
13761: ST_TO_ADDR
// s30 := false ;
13762: LD_ADDR_EXP 95
13766: PUSH
13767: LD_INT 0
13769: ST_TO_ADDR
// s60 := false ;
13770: LD_ADDR_EXP 96
13774: PUSH
13775: LD_INT 0
13777: ST_TO_ADDR
// end ;
13778: LD_VAR 0 1
13782: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
13783: LD_INT 0
13785: PPUSH
13786: PPUSH
13787: PPUSH
13788: PPUSH
13789: PPUSH
// result := [ ] ;
13790: LD_ADDR_VAR 0 1
13794: PUSH
13795: EMPTY
13796: ST_TO_ADDR
// if campaign_id = 1 then
13797: LD_OWVAR 69
13801: PUSH
13802: LD_INT 1
13804: EQUAL
13805: IFFALSE 16971
// begin case mission_number of 1 :
13807: LD_OWVAR 70
13811: PUSH
13812: LD_INT 1
13814: DOUBLE
13815: EQUAL
13816: IFTRUE 13820
13818: GO 13896
13820: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
13821: LD_ADDR_VAR 0 1
13825: PUSH
13826: LD_INT 2
13828: PUSH
13829: LD_INT 4
13831: PUSH
13832: LD_INT 11
13834: PUSH
13835: LD_INT 12
13837: PUSH
13838: LD_INT 15
13840: PUSH
13841: LD_INT 16
13843: PUSH
13844: LD_INT 22
13846: PUSH
13847: LD_INT 23
13849: PUSH
13850: LD_INT 26
13852: PUSH
13853: EMPTY
13854: LIST
13855: LIST
13856: LIST
13857: LIST
13858: LIST
13859: LIST
13860: LIST
13861: LIST
13862: LIST
13863: PUSH
13864: LD_INT 101
13866: PUSH
13867: LD_INT 102
13869: PUSH
13870: LD_INT 106
13872: PUSH
13873: LD_INT 116
13875: PUSH
13876: LD_INT 117
13878: PUSH
13879: LD_INT 118
13881: PUSH
13882: EMPTY
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: LIST
13889: PUSH
13890: EMPTY
13891: LIST
13892: LIST
13893: ST_TO_ADDR
13894: GO 16969
13896: LD_INT 2
13898: DOUBLE
13899: EQUAL
13900: IFTRUE 13904
13902: GO 13988
13904: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
13905: LD_ADDR_VAR 0 1
13909: PUSH
13910: LD_INT 2
13912: PUSH
13913: LD_INT 4
13915: PUSH
13916: LD_INT 11
13918: PUSH
13919: LD_INT 12
13921: PUSH
13922: LD_INT 15
13924: PUSH
13925: LD_INT 16
13927: PUSH
13928: LD_INT 22
13930: PUSH
13931: LD_INT 23
13933: PUSH
13934: LD_INT 26
13936: PUSH
13937: EMPTY
13938: LIST
13939: LIST
13940: LIST
13941: LIST
13942: LIST
13943: LIST
13944: LIST
13945: LIST
13946: LIST
13947: PUSH
13948: LD_INT 101
13950: PUSH
13951: LD_INT 102
13953: PUSH
13954: LD_INT 105
13956: PUSH
13957: LD_INT 106
13959: PUSH
13960: LD_INT 108
13962: PUSH
13963: LD_INT 116
13965: PUSH
13966: LD_INT 117
13968: PUSH
13969: LD_INT 118
13971: PUSH
13972: EMPTY
13973: LIST
13974: LIST
13975: LIST
13976: LIST
13977: LIST
13978: LIST
13979: LIST
13980: LIST
13981: PUSH
13982: EMPTY
13983: LIST
13984: LIST
13985: ST_TO_ADDR
13986: GO 16969
13988: LD_INT 3
13990: DOUBLE
13991: EQUAL
13992: IFTRUE 13996
13994: GO 14084
13996: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
13997: LD_ADDR_VAR 0 1
14001: PUSH
14002: LD_INT 2
14004: PUSH
14005: LD_INT 4
14007: PUSH
14008: LD_INT 5
14010: PUSH
14011: LD_INT 11
14013: PUSH
14014: LD_INT 12
14016: PUSH
14017: LD_INT 15
14019: PUSH
14020: LD_INT 16
14022: PUSH
14023: LD_INT 22
14025: PUSH
14026: LD_INT 26
14028: PUSH
14029: LD_INT 36
14031: PUSH
14032: EMPTY
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: LIST
14042: LIST
14043: PUSH
14044: LD_INT 101
14046: PUSH
14047: LD_INT 102
14049: PUSH
14050: LD_INT 105
14052: PUSH
14053: LD_INT 106
14055: PUSH
14056: LD_INT 108
14058: PUSH
14059: LD_INT 116
14061: PUSH
14062: LD_INT 117
14064: PUSH
14065: LD_INT 118
14067: PUSH
14068: EMPTY
14069: LIST
14070: LIST
14071: LIST
14072: LIST
14073: LIST
14074: LIST
14075: LIST
14076: LIST
14077: PUSH
14078: EMPTY
14079: LIST
14080: LIST
14081: ST_TO_ADDR
14082: GO 16969
14084: LD_INT 4
14086: DOUBLE
14087: EQUAL
14088: IFTRUE 14092
14090: GO 14188
14092: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
14093: LD_ADDR_VAR 0 1
14097: PUSH
14098: LD_INT 2
14100: PUSH
14101: LD_INT 4
14103: PUSH
14104: LD_INT 5
14106: PUSH
14107: LD_INT 8
14109: PUSH
14110: LD_INT 11
14112: PUSH
14113: LD_INT 12
14115: PUSH
14116: LD_INT 15
14118: PUSH
14119: LD_INT 16
14121: PUSH
14122: LD_INT 22
14124: PUSH
14125: LD_INT 23
14127: PUSH
14128: LD_INT 26
14130: PUSH
14131: LD_INT 36
14133: PUSH
14134: EMPTY
14135: LIST
14136: LIST
14137: LIST
14138: LIST
14139: LIST
14140: LIST
14141: LIST
14142: LIST
14143: LIST
14144: LIST
14145: LIST
14146: LIST
14147: PUSH
14148: LD_INT 101
14150: PUSH
14151: LD_INT 102
14153: PUSH
14154: LD_INT 105
14156: PUSH
14157: LD_INT 106
14159: PUSH
14160: LD_INT 108
14162: PUSH
14163: LD_INT 116
14165: PUSH
14166: LD_INT 117
14168: PUSH
14169: LD_INT 118
14171: PUSH
14172: EMPTY
14173: LIST
14174: LIST
14175: LIST
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: LIST
14181: PUSH
14182: EMPTY
14183: LIST
14184: LIST
14185: ST_TO_ADDR
14186: GO 16969
14188: LD_INT 5
14190: DOUBLE
14191: EQUAL
14192: IFTRUE 14196
14194: GO 14308
14196: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
14197: LD_ADDR_VAR 0 1
14201: PUSH
14202: LD_INT 2
14204: PUSH
14205: LD_INT 4
14207: PUSH
14208: LD_INT 5
14210: PUSH
14211: LD_INT 6
14213: PUSH
14214: LD_INT 8
14216: PUSH
14217: LD_INT 11
14219: PUSH
14220: LD_INT 12
14222: PUSH
14223: LD_INT 15
14225: PUSH
14226: LD_INT 16
14228: PUSH
14229: LD_INT 22
14231: PUSH
14232: LD_INT 23
14234: PUSH
14235: LD_INT 25
14237: PUSH
14238: LD_INT 26
14240: PUSH
14241: LD_INT 36
14243: PUSH
14244: EMPTY
14245: LIST
14246: LIST
14247: LIST
14248: LIST
14249: LIST
14250: LIST
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: LIST
14256: LIST
14257: LIST
14258: LIST
14259: PUSH
14260: LD_INT 101
14262: PUSH
14263: LD_INT 102
14265: PUSH
14266: LD_INT 105
14268: PUSH
14269: LD_INT 106
14271: PUSH
14272: LD_INT 108
14274: PUSH
14275: LD_INT 109
14277: PUSH
14278: LD_INT 112
14280: PUSH
14281: LD_INT 116
14283: PUSH
14284: LD_INT 117
14286: PUSH
14287: LD_INT 118
14289: PUSH
14290: EMPTY
14291: LIST
14292: LIST
14293: LIST
14294: LIST
14295: LIST
14296: LIST
14297: LIST
14298: LIST
14299: LIST
14300: LIST
14301: PUSH
14302: EMPTY
14303: LIST
14304: LIST
14305: ST_TO_ADDR
14306: GO 16969
14308: LD_INT 6
14310: DOUBLE
14311: EQUAL
14312: IFTRUE 14316
14314: GO 14448
14316: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
14317: LD_ADDR_VAR 0 1
14321: PUSH
14322: LD_INT 2
14324: PUSH
14325: LD_INT 4
14327: PUSH
14328: LD_INT 5
14330: PUSH
14331: LD_INT 6
14333: PUSH
14334: LD_INT 8
14336: PUSH
14337: LD_INT 11
14339: PUSH
14340: LD_INT 12
14342: PUSH
14343: LD_INT 15
14345: PUSH
14346: LD_INT 16
14348: PUSH
14349: LD_INT 20
14351: PUSH
14352: LD_INT 21
14354: PUSH
14355: LD_INT 22
14357: PUSH
14358: LD_INT 23
14360: PUSH
14361: LD_INT 25
14363: PUSH
14364: LD_INT 26
14366: PUSH
14367: LD_INT 30
14369: PUSH
14370: LD_INT 31
14372: PUSH
14373: LD_INT 32
14375: PUSH
14376: LD_INT 36
14378: PUSH
14379: EMPTY
14380: LIST
14381: LIST
14382: LIST
14383: LIST
14384: LIST
14385: LIST
14386: LIST
14387: LIST
14388: LIST
14389: LIST
14390: LIST
14391: LIST
14392: LIST
14393: LIST
14394: LIST
14395: LIST
14396: LIST
14397: LIST
14398: LIST
14399: PUSH
14400: LD_INT 101
14402: PUSH
14403: LD_INT 102
14405: PUSH
14406: LD_INT 105
14408: PUSH
14409: LD_INT 106
14411: PUSH
14412: LD_INT 108
14414: PUSH
14415: LD_INT 109
14417: PUSH
14418: LD_INT 112
14420: PUSH
14421: LD_INT 116
14423: PUSH
14424: LD_INT 117
14426: PUSH
14427: LD_INT 118
14429: PUSH
14430: EMPTY
14431: LIST
14432: LIST
14433: LIST
14434: LIST
14435: LIST
14436: LIST
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: PUSH
14442: EMPTY
14443: LIST
14444: LIST
14445: ST_TO_ADDR
14446: GO 16969
14448: LD_INT 7
14450: DOUBLE
14451: EQUAL
14452: IFTRUE 14456
14454: GO 14568
14456: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
14457: LD_ADDR_VAR 0 1
14461: PUSH
14462: LD_INT 2
14464: PUSH
14465: LD_INT 4
14467: PUSH
14468: LD_INT 5
14470: PUSH
14471: LD_INT 7
14473: PUSH
14474: LD_INT 11
14476: PUSH
14477: LD_INT 12
14479: PUSH
14480: LD_INT 15
14482: PUSH
14483: LD_INT 16
14485: PUSH
14486: LD_INT 20
14488: PUSH
14489: LD_INT 21
14491: PUSH
14492: LD_INT 22
14494: PUSH
14495: LD_INT 23
14497: PUSH
14498: LD_INT 25
14500: PUSH
14501: LD_INT 26
14503: PUSH
14504: EMPTY
14505: LIST
14506: LIST
14507: LIST
14508: LIST
14509: LIST
14510: LIST
14511: LIST
14512: LIST
14513: LIST
14514: LIST
14515: LIST
14516: LIST
14517: LIST
14518: LIST
14519: PUSH
14520: LD_INT 101
14522: PUSH
14523: LD_INT 102
14525: PUSH
14526: LD_INT 103
14528: PUSH
14529: LD_INT 105
14531: PUSH
14532: LD_INT 106
14534: PUSH
14535: LD_INT 108
14537: PUSH
14538: LD_INT 112
14540: PUSH
14541: LD_INT 116
14543: PUSH
14544: LD_INT 117
14546: PUSH
14547: LD_INT 118
14549: PUSH
14550: EMPTY
14551: LIST
14552: LIST
14553: LIST
14554: LIST
14555: LIST
14556: LIST
14557: LIST
14558: LIST
14559: LIST
14560: LIST
14561: PUSH
14562: EMPTY
14563: LIST
14564: LIST
14565: ST_TO_ADDR
14566: GO 16969
14568: LD_INT 8
14570: DOUBLE
14571: EQUAL
14572: IFTRUE 14576
14574: GO 14716
14576: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
14577: LD_ADDR_VAR 0 1
14581: PUSH
14582: LD_INT 2
14584: PUSH
14585: LD_INT 4
14587: PUSH
14588: LD_INT 5
14590: PUSH
14591: LD_INT 6
14593: PUSH
14594: LD_INT 7
14596: PUSH
14597: LD_INT 8
14599: PUSH
14600: LD_INT 11
14602: PUSH
14603: LD_INT 12
14605: PUSH
14606: LD_INT 15
14608: PUSH
14609: LD_INT 16
14611: PUSH
14612: LD_INT 20
14614: PUSH
14615: LD_INT 21
14617: PUSH
14618: LD_INT 22
14620: PUSH
14621: LD_INT 23
14623: PUSH
14624: LD_INT 25
14626: PUSH
14627: LD_INT 26
14629: PUSH
14630: LD_INT 30
14632: PUSH
14633: LD_INT 31
14635: PUSH
14636: LD_INT 32
14638: PUSH
14639: LD_INT 36
14641: PUSH
14642: EMPTY
14643: LIST
14644: LIST
14645: LIST
14646: LIST
14647: LIST
14648: LIST
14649: LIST
14650: LIST
14651: LIST
14652: LIST
14653: LIST
14654: LIST
14655: LIST
14656: LIST
14657: LIST
14658: LIST
14659: LIST
14660: LIST
14661: LIST
14662: LIST
14663: PUSH
14664: LD_INT 101
14666: PUSH
14667: LD_INT 102
14669: PUSH
14670: LD_INT 103
14672: PUSH
14673: LD_INT 105
14675: PUSH
14676: LD_INT 106
14678: PUSH
14679: LD_INT 108
14681: PUSH
14682: LD_INT 109
14684: PUSH
14685: LD_INT 112
14687: PUSH
14688: LD_INT 116
14690: PUSH
14691: LD_INT 117
14693: PUSH
14694: LD_INT 118
14696: PUSH
14697: EMPTY
14698: LIST
14699: LIST
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: LIST
14709: PUSH
14710: EMPTY
14711: LIST
14712: LIST
14713: ST_TO_ADDR
14714: GO 16969
14716: LD_INT 9
14718: DOUBLE
14719: EQUAL
14720: IFTRUE 14724
14722: GO 14872
14724: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
14725: LD_ADDR_VAR 0 1
14729: PUSH
14730: LD_INT 2
14732: PUSH
14733: LD_INT 4
14735: PUSH
14736: LD_INT 5
14738: PUSH
14739: LD_INT 6
14741: PUSH
14742: LD_INT 7
14744: PUSH
14745: LD_INT 8
14747: PUSH
14748: LD_INT 11
14750: PUSH
14751: LD_INT 12
14753: PUSH
14754: LD_INT 15
14756: PUSH
14757: LD_INT 16
14759: PUSH
14760: LD_INT 20
14762: PUSH
14763: LD_INT 21
14765: PUSH
14766: LD_INT 22
14768: PUSH
14769: LD_INT 23
14771: PUSH
14772: LD_INT 25
14774: PUSH
14775: LD_INT 26
14777: PUSH
14778: LD_INT 28
14780: PUSH
14781: LD_INT 30
14783: PUSH
14784: LD_INT 31
14786: PUSH
14787: LD_INT 32
14789: PUSH
14790: LD_INT 36
14792: PUSH
14793: EMPTY
14794: LIST
14795: LIST
14796: LIST
14797: LIST
14798: LIST
14799: LIST
14800: LIST
14801: LIST
14802: LIST
14803: LIST
14804: LIST
14805: LIST
14806: LIST
14807: LIST
14808: LIST
14809: LIST
14810: LIST
14811: LIST
14812: LIST
14813: LIST
14814: LIST
14815: PUSH
14816: LD_INT 101
14818: PUSH
14819: LD_INT 102
14821: PUSH
14822: LD_INT 103
14824: PUSH
14825: LD_INT 105
14827: PUSH
14828: LD_INT 106
14830: PUSH
14831: LD_INT 108
14833: PUSH
14834: LD_INT 109
14836: PUSH
14837: LD_INT 112
14839: PUSH
14840: LD_INT 114
14842: PUSH
14843: LD_INT 116
14845: PUSH
14846: LD_INT 117
14848: PUSH
14849: LD_INT 118
14851: PUSH
14852: EMPTY
14853: LIST
14854: LIST
14855: LIST
14856: LIST
14857: LIST
14858: LIST
14859: LIST
14860: LIST
14861: LIST
14862: LIST
14863: LIST
14864: LIST
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: ST_TO_ADDR
14870: GO 16969
14872: LD_INT 10
14874: DOUBLE
14875: EQUAL
14876: IFTRUE 14880
14878: GO 15076
14880: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
14881: LD_ADDR_VAR 0 1
14885: PUSH
14886: LD_INT 2
14888: PUSH
14889: LD_INT 4
14891: PUSH
14892: LD_INT 5
14894: PUSH
14895: LD_INT 6
14897: PUSH
14898: LD_INT 7
14900: PUSH
14901: LD_INT 8
14903: PUSH
14904: LD_INT 9
14906: PUSH
14907: LD_INT 10
14909: PUSH
14910: LD_INT 11
14912: PUSH
14913: LD_INT 12
14915: PUSH
14916: LD_INT 13
14918: PUSH
14919: LD_INT 14
14921: PUSH
14922: LD_INT 15
14924: PUSH
14925: LD_INT 16
14927: PUSH
14928: LD_INT 17
14930: PUSH
14931: LD_INT 18
14933: PUSH
14934: LD_INT 19
14936: PUSH
14937: LD_INT 20
14939: PUSH
14940: LD_INT 21
14942: PUSH
14943: LD_INT 22
14945: PUSH
14946: LD_INT 23
14948: PUSH
14949: LD_INT 24
14951: PUSH
14952: LD_INT 25
14954: PUSH
14955: LD_INT 26
14957: PUSH
14958: LD_INT 28
14960: PUSH
14961: LD_INT 30
14963: PUSH
14964: LD_INT 31
14966: PUSH
14967: LD_INT 32
14969: PUSH
14970: LD_INT 36
14972: PUSH
14973: EMPTY
14974: LIST
14975: LIST
14976: LIST
14977: LIST
14978: LIST
14979: LIST
14980: LIST
14981: LIST
14982: LIST
14983: LIST
14984: LIST
14985: LIST
14986: LIST
14987: LIST
14988: LIST
14989: LIST
14990: LIST
14991: LIST
14992: LIST
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: LIST
15000: LIST
15001: LIST
15002: LIST
15003: PUSH
15004: LD_INT 101
15006: PUSH
15007: LD_INT 102
15009: PUSH
15010: LD_INT 103
15012: PUSH
15013: LD_INT 104
15015: PUSH
15016: LD_INT 105
15018: PUSH
15019: LD_INT 106
15021: PUSH
15022: LD_INT 107
15024: PUSH
15025: LD_INT 108
15027: PUSH
15028: LD_INT 109
15030: PUSH
15031: LD_INT 110
15033: PUSH
15034: LD_INT 111
15036: PUSH
15037: LD_INT 112
15039: PUSH
15040: LD_INT 114
15042: PUSH
15043: LD_INT 116
15045: PUSH
15046: LD_INT 117
15048: PUSH
15049: LD_INT 118
15051: PUSH
15052: EMPTY
15053: LIST
15054: LIST
15055: LIST
15056: LIST
15057: LIST
15058: LIST
15059: LIST
15060: LIST
15061: LIST
15062: LIST
15063: LIST
15064: LIST
15065: LIST
15066: LIST
15067: LIST
15068: LIST
15069: PUSH
15070: EMPTY
15071: LIST
15072: LIST
15073: ST_TO_ADDR
15074: GO 16969
15076: LD_INT 11
15078: DOUBLE
15079: EQUAL
15080: IFTRUE 15084
15082: GO 15288
15084: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
15085: LD_ADDR_VAR 0 1
15089: PUSH
15090: LD_INT 2
15092: PUSH
15093: LD_INT 3
15095: PUSH
15096: LD_INT 4
15098: PUSH
15099: LD_INT 5
15101: PUSH
15102: LD_INT 6
15104: PUSH
15105: LD_INT 7
15107: PUSH
15108: LD_INT 8
15110: PUSH
15111: LD_INT 9
15113: PUSH
15114: LD_INT 10
15116: PUSH
15117: LD_INT 11
15119: PUSH
15120: LD_INT 12
15122: PUSH
15123: LD_INT 13
15125: PUSH
15126: LD_INT 14
15128: PUSH
15129: LD_INT 15
15131: PUSH
15132: LD_INT 16
15134: PUSH
15135: LD_INT 17
15137: PUSH
15138: LD_INT 18
15140: PUSH
15141: LD_INT 19
15143: PUSH
15144: LD_INT 20
15146: PUSH
15147: LD_INT 21
15149: PUSH
15150: LD_INT 22
15152: PUSH
15153: LD_INT 23
15155: PUSH
15156: LD_INT 24
15158: PUSH
15159: LD_INT 25
15161: PUSH
15162: LD_INT 26
15164: PUSH
15165: LD_INT 28
15167: PUSH
15168: LD_INT 30
15170: PUSH
15171: LD_INT 31
15173: PUSH
15174: LD_INT 32
15176: PUSH
15177: LD_INT 34
15179: PUSH
15180: LD_INT 36
15182: PUSH
15183: EMPTY
15184: LIST
15185: LIST
15186: LIST
15187: LIST
15188: LIST
15189: LIST
15190: LIST
15191: LIST
15192: LIST
15193: LIST
15194: LIST
15195: LIST
15196: LIST
15197: LIST
15198: LIST
15199: LIST
15200: LIST
15201: LIST
15202: LIST
15203: LIST
15204: LIST
15205: LIST
15206: LIST
15207: LIST
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: LIST
15213: LIST
15214: LIST
15215: PUSH
15216: LD_INT 101
15218: PUSH
15219: LD_INT 102
15221: PUSH
15222: LD_INT 103
15224: PUSH
15225: LD_INT 104
15227: PUSH
15228: LD_INT 105
15230: PUSH
15231: LD_INT 106
15233: PUSH
15234: LD_INT 107
15236: PUSH
15237: LD_INT 108
15239: PUSH
15240: LD_INT 109
15242: PUSH
15243: LD_INT 110
15245: PUSH
15246: LD_INT 111
15248: PUSH
15249: LD_INT 112
15251: PUSH
15252: LD_INT 114
15254: PUSH
15255: LD_INT 116
15257: PUSH
15258: LD_INT 117
15260: PUSH
15261: LD_INT 118
15263: PUSH
15264: EMPTY
15265: LIST
15266: LIST
15267: LIST
15268: LIST
15269: LIST
15270: LIST
15271: LIST
15272: LIST
15273: LIST
15274: LIST
15275: LIST
15276: LIST
15277: LIST
15278: LIST
15279: LIST
15280: LIST
15281: PUSH
15282: EMPTY
15283: LIST
15284: LIST
15285: ST_TO_ADDR
15286: GO 16969
15288: LD_INT 12
15290: DOUBLE
15291: EQUAL
15292: IFTRUE 15296
15294: GO 15516
15296: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
15297: LD_ADDR_VAR 0 1
15301: PUSH
15302: LD_INT 1
15304: PUSH
15305: LD_INT 2
15307: PUSH
15308: LD_INT 3
15310: PUSH
15311: LD_INT 4
15313: PUSH
15314: LD_INT 5
15316: PUSH
15317: LD_INT 6
15319: PUSH
15320: LD_INT 7
15322: PUSH
15323: LD_INT 8
15325: PUSH
15326: LD_INT 9
15328: PUSH
15329: LD_INT 10
15331: PUSH
15332: LD_INT 11
15334: PUSH
15335: LD_INT 12
15337: PUSH
15338: LD_INT 13
15340: PUSH
15341: LD_INT 14
15343: PUSH
15344: LD_INT 15
15346: PUSH
15347: LD_INT 16
15349: PUSH
15350: LD_INT 17
15352: PUSH
15353: LD_INT 18
15355: PUSH
15356: LD_INT 19
15358: PUSH
15359: LD_INT 20
15361: PUSH
15362: LD_INT 21
15364: PUSH
15365: LD_INT 22
15367: PUSH
15368: LD_INT 23
15370: PUSH
15371: LD_INT 24
15373: PUSH
15374: LD_INT 25
15376: PUSH
15377: LD_INT 26
15379: PUSH
15380: LD_INT 27
15382: PUSH
15383: LD_INT 28
15385: PUSH
15386: LD_INT 30
15388: PUSH
15389: LD_INT 31
15391: PUSH
15392: LD_INT 32
15394: PUSH
15395: LD_INT 33
15397: PUSH
15398: LD_INT 34
15400: PUSH
15401: LD_INT 36
15403: PUSH
15404: EMPTY
15405: LIST
15406: LIST
15407: LIST
15408: LIST
15409: LIST
15410: LIST
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: LIST
15417: LIST
15418: LIST
15419: LIST
15420: LIST
15421: LIST
15422: LIST
15423: LIST
15424: LIST
15425: LIST
15426: LIST
15427: LIST
15428: LIST
15429: LIST
15430: LIST
15431: LIST
15432: LIST
15433: LIST
15434: LIST
15435: LIST
15436: LIST
15437: LIST
15438: LIST
15439: PUSH
15440: LD_INT 101
15442: PUSH
15443: LD_INT 102
15445: PUSH
15446: LD_INT 103
15448: PUSH
15449: LD_INT 104
15451: PUSH
15452: LD_INT 105
15454: PUSH
15455: LD_INT 106
15457: PUSH
15458: LD_INT 107
15460: PUSH
15461: LD_INT 108
15463: PUSH
15464: LD_INT 109
15466: PUSH
15467: LD_INT 110
15469: PUSH
15470: LD_INT 111
15472: PUSH
15473: LD_INT 112
15475: PUSH
15476: LD_INT 113
15478: PUSH
15479: LD_INT 114
15481: PUSH
15482: LD_INT 116
15484: PUSH
15485: LD_INT 117
15487: PUSH
15488: LD_INT 118
15490: PUSH
15491: EMPTY
15492: LIST
15493: LIST
15494: LIST
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: LIST
15502: LIST
15503: LIST
15504: LIST
15505: LIST
15506: LIST
15507: LIST
15508: LIST
15509: PUSH
15510: EMPTY
15511: LIST
15512: LIST
15513: ST_TO_ADDR
15514: GO 16969
15516: LD_INT 13
15518: DOUBLE
15519: EQUAL
15520: IFTRUE 15524
15522: GO 15732
15524: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
15525: LD_ADDR_VAR 0 1
15529: PUSH
15530: LD_INT 1
15532: PUSH
15533: LD_INT 2
15535: PUSH
15536: LD_INT 3
15538: PUSH
15539: LD_INT 4
15541: PUSH
15542: LD_INT 5
15544: PUSH
15545: LD_INT 8
15547: PUSH
15548: LD_INT 9
15550: PUSH
15551: LD_INT 10
15553: PUSH
15554: LD_INT 11
15556: PUSH
15557: LD_INT 12
15559: PUSH
15560: LD_INT 14
15562: PUSH
15563: LD_INT 15
15565: PUSH
15566: LD_INT 16
15568: PUSH
15569: LD_INT 17
15571: PUSH
15572: LD_INT 18
15574: PUSH
15575: LD_INT 19
15577: PUSH
15578: LD_INT 20
15580: PUSH
15581: LD_INT 21
15583: PUSH
15584: LD_INT 22
15586: PUSH
15587: LD_INT 23
15589: PUSH
15590: LD_INT 24
15592: PUSH
15593: LD_INT 25
15595: PUSH
15596: LD_INT 26
15598: PUSH
15599: LD_INT 27
15601: PUSH
15602: LD_INT 28
15604: PUSH
15605: LD_INT 30
15607: PUSH
15608: LD_INT 31
15610: PUSH
15611: LD_INT 32
15613: PUSH
15614: LD_INT 33
15616: PUSH
15617: LD_INT 34
15619: PUSH
15620: LD_INT 36
15622: PUSH
15623: EMPTY
15624: LIST
15625: LIST
15626: LIST
15627: LIST
15628: LIST
15629: LIST
15630: LIST
15631: LIST
15632: LIST
15633: LIST
15634: LIST
15635: LIST
15636: LIST
15637: LIST
15638: LIST
15639: LIST
15640: LIST
15641: LIST
15642: LIST
15643: LIST
15644: LIST
15645: LIST
15646: LIST
15647: LIST
15648: LIST
15649: LIST
15650: LIST
15651: LIST
15652: LIST
15653: LIST
15654: LIST
15655: PUSH
15656: LD_INT 101
15658: PUSH
15659: LD_INT 102
15661: PUSH
15662: LD_INT 103
15664: PUSH
15665: LD_INT 104
15667: PUSH
15668: LD_INT 105
15670: PUSH
15671: LD_INT 106
15673: PUSH
15674: LD_INT 107
15676: PUSH
15677: LD_INT 108
15679: PUSH
15680: LD_INT 109
15682: PUSH
15683: LD_INT 110
15685: PUSH
15686: LD_INT 111
15688: PUSH
15689: LD_INT 112
15691: PUSH
15692: LD_INT 113
15694: PUSH
15695: LD_INT 114
15697: PUSH
15698: LD_INT 116
15700: PUSH
15701: LD_INT 117
15703: PUSH
15704: LD_INT 118
15706: PUSH
15707: EMPTY
15708: LIST
15709: LIST
15710: LIST
15711: LIST
15712: LIST
15713: LIST
15714: LIST
15715: LIST
15716: LIST
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: LIST
15724: LIST
15725: PUSH
15726: EMPTY
15727: LIST
15728: LIST
15729: ST_TO_ADDR
15730: GO 16969
15732: LD_INT 14
15734: DOUBLE
15735: EQUAL
15736: IFTRUE 15740
15738: GO 15964
15740: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
15741: LD_ADDR_VAR 0 1
15745: PUSH
15746: LD_INT 1
15748: PUSH
15749: LD_INT 2
15751: PUSH
15752: LD_INT 3
15754: PUSH
15755: LD_INT 4
15757: PUSH
15758: LD_INT 5
15760: PUSH
15761: LD_INT 6
15763: PUSH
15764: LD_INT 7
15766: PUSH
15767: LD_INT 8
15769: PUSH
15770: LD_INT 9
15772: PUSH
15773: LD_INT 10
15775: PUSH
15776: LD_INT 11
15778: PUSH
15779: LD_INT 12
15781: PUSH
15782: LD_INT 13
15784: PUSH
15785: LD_INT 14
15787: PUSH
15788: LD_INT 15
15790: PUSH
15791: LD_INT 16
15793: PUSH
15794: LD_INT 17
15796: PUSH
15797: LD_INT 18
15799: PUSH
15800: LD_INT 19
15802: PUSH
15803: LD_INT 20
15805: PUSH
15806: LD_INT 21
15808: PUSH
15809: LD_INT 22
15811: PUSH
15812: LD_INT 23
15814: PUSH
15815: LD_INT 24
15817: PUSH
15818: LD_INT 25
15820: PUSH
15821: LD_INT 26
15823: PUSH
15824: LD_INT 27
15826: PUSH
15827: LD_INT 28
15829: PUSH
15830: LD_INT 29
15832: PUSH
15833: LD_INT 30
15835: PUSH
15836: LD_INT 31
15838: PUSH
15839: LD_INT 32
15841: PUSH
15842: LD_INT 33
15844: PUSH
15845: LD_INT 34
15847: PUSH
15848: LD_INT 36
15850: PUSH
15851: EMPTY
15852: LIST
15853: LIST
15854: LIST
15855: LIST
15856: LIST
15857: LIST
15858: LIST
15859: LIST
15860: LIST
15861: LIST
15862: LIST
15863: LIST
15864: LIST
15865: LIST
15866: LIST
15867: LIST
15868: LIST
15869: LIST
15870: LIST
15871: LIST
15872: LIST
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: LIST
15878: LIST
15879: LIST
15880: LIST
15881: LIST
15882: LIST
15883: LIST
15884: LIST
15885: LIST
15886: LIST
15887: PUSH
15888: LD_INT 101
15890: PUSH
15891: LD_INT 102
15893: PUSH
15894: LD_INT 103
15896: PUSH
15897: LD_INT 104
15899: PUSH
15900: LD_INT 105
15902: PUSH
15903: LD_INT 106
15905: PUSH
15906: LD_INT 107
15908: PUSH
15909: LD_INT 108
15911: PUSH
15912: LD_INT 109
15914: PUSH
15915: LD_INT 110
15917: PUSH
15918: LD_INT 111
15920: PUSH
15921: LD_INT 112
15923: PUSH
15924: LD_INT 113
15926: PUSH
15927: LD_INT 114
15929: PUSH
15930: LD_INT 116
15932: PUSH
15933: LD_INT 117
15935: PUSH
15936: LD_INT 118
15938: PUSH
15939: EMPTY
15940: LIST
15941: LIST
15942: LIST
15943: LIST
15944: LIST
15945: LIST
15946: LIST
15947: LIST
15948: LIST
15949: LIST
15950: LIST
15951: LIST
15952: LIST
15953: LIST
15954: LIST
15955: LIST
15956: LIST
15957: PUSH
15958: EMPTY
15959: LIST
15960: LIST
15961: ST_TO_ADDR
15962: GO 16969
15964: LD_INT 15
15966: DOUBLE
15967: EQUAL
15968: IFTRUE 15972
15970: GO 16196
15972: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
15973: LD_ADDR_VAR 0 1
15977: PUSH
15978: LD_INT 1
15980: PUSH
15981: LD_INT 2
15983: PUSH
15984: LD_INT 3
15986: PUSH
15987: LD_INT 4
15989: PUSH
15990: LD_INT 5
15992: PUSH
15993: LD_INT 6
15995: PUSH
15996: LD_INT 7
15998: PUSH
15999: LD_INT 8
16001: PUSH
16002: LD_INT 9
16004: PUSH
16005: LD_INT 10
16007: PUSH
16008: LD_INT 11
16010: PUSH
16011: LD_INT 12
16013: PUSH
16014: LD_INT 13
16016: PUSH
16017: LD_INT 14
16019: PUSH
16020: LD_INT 15
16022: PUSH
16023: LD_INT 16
16025: PUSH
16026: LD_INT 17
16028: PUSH
16029: LD_INT 18
16031: PUSH
16032: LD_INT 19
16034: PUSH
16035: LD_INT 20
16037: PUSH
16038: LD_INT 21
16040: PUSH
16041: LD_INT 22
16043: PUSH
16044: LD_INT 23
16046: PUSH
16047: LD_INT 24
16049: PUSH
16050: LD_INT 25
16052: PUSH
16053: LD_INT 26
16055: PUSH
16056: LD_INT 27
16058: PUSH
16059: LD_INT 28
16061: PUSH
16062: LD_INT 29
16064: PUSH
16065: LD_INT 30
16067: PUSH
16068: LD_INT 31
16070: PUSH
16071: LD_INT 32
16073: PUSH
16074: LD_INT 33
16076: PUSH
16077: LD_INT 34
16079: PUSH
16080: LD_INT 36
16082: PUSH
16083: EMPTY
16084: LIST
16085: LIST
16086: LIST
16087: LIST
16088: LIST
16089: LIST
16090: LIST
16091: LIST
16092: LIST
16093: LIST
16094: LIST
16095: LIST
16096: LIST
16097: LIST
16098: LIST
16099: LIST
16100: LIST
16101: LIST
16102: LIST
16103: LIST
16104: LIST
16105: LIST
16106: LIST
16107: LIST
16108: LIST
16109: LIST
16110: LIST
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: PUSH
16120: LD_INT 101
16122: PUSH
16123: LD_INT 102
16125: PUSH
16126: LD_INT 103
16128: PUSH
16129: LD_INT 104
16131: PUSH
16132: LD_INT 105
16134: PUSH
16135: LD_INT 106
16137: PUSH
16138: LD_INT 107
16140: PUSH
16141: LD_INT 108
16143: PUSH
16144: LD_INT 109
16146: PUSH
16147: LD_INT 110
16149: PUSH
16150: LD_INT 111
16152: PUSH
16153: LD_INT 112
16155: PUSH
16156: LD_INT 113
16158: PUSH
16159: LD_INT 114
16161: PUSH
16162: LD_INT 116
16164: PUSH
16165: LD_INT 117
16167: PUSH
16168: LD_INT 118
16170: PUSH
16171: EMPTY
16172: LIST
16173: LIST
16174: LIST
16175: LIST
16176: LIST
16177: LIST
16178: LIST
16179: LIST
16180: LIST
16181: LIST
16182: LIST
16183: LIST
16184: LIST
16185: LIST
16186: LIST
16187: LIST
16188: LIST
16189: PUSH
16190: EMPTY
16191: LIST
16192: LIST
16193: ST_TO_ADDR
16194: GO 16969
16196: LD_INT 16
16198: DOUBLE
16199: EQUAL
16200: IFTRUE 16204
16202: GO 16340
16204: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
16205: LD_ADDR_VAR 0 1
16209: PUSH
16210: LD_INT 2
16212: PUSH
16213: LD_INT 4
16215: PUSH
16216: LD_INT 5
16218: PUSH
16219: LD_INT 7
16221: PUSH
16222: LD_INT 11
16224: PUSH
16225: LD_INT 12
16227: PUSH
16228: LD_INT 15
16230: PUSH
16231: LD_INT 16
16233: PUSH
16234: LD_INT 20
16236: PUSH
16237: LD_INT 21
16239: PUSH
16240: LD_INT 22
16242: PUSH
16243: LD_INT 23
16245: PUSH
16246: LD_INT 25
16248: PUSH
16249: LD_INT 26
16251: PUSH
16252: LD_INT 30
16254: PUSH
16255: LD_INT 31
16257: PUSH
16258: LD_INT 32
16260: PUSH
16261: LD_INT 33
16263: PUSH
16264: LD_INT 34
16266: PUSH
16267: EMPTY
16268: LIST
16269: LIST
16270: LIST
16271: LIST
16272: LIST
16273: LIST
16274: LIST
16275: LIST
16276: LIST
16277: LIST
16278: LIST
16279: LIST
16280: LIST
16281: LIST
16282: LIST
16283: LIST
16284: LIST
16285: LIST
16286: LIST
16287: PUSH
16288: LD_INT 101
16290: PUSH
16291: LD_INT 102
16293: PUSH
16294: LD_INT 103
16296: PUSH
16297: LD_INT 106
16299: PUSH
16300: LD_INT 108
16302: PUSH
16303: LD_INT 112
16305: PUSH
16306: LD_INT 113
16308: PUSH
16309: LD_INT 114
16311: PUSH
16312: LD_INT 116
16314: PUSH
16315: LD_INT 117
16317: PUSH
16318: LD_INT 118
16320: PUSH
16321: EMPTY
16322: LIST
16323: LIST
16324: LIST
16325: LIST
16326: LIST
16327: LIST
16328: LIST
16329: LIST
16330: LIST
16331: LIST
16332: LIST
16333: PUSH
16334: EMPTY
16335: LIST
16336: LIST
16337: ST_TO_ADDR
16338: GO 16969
16340: LD_INT 17
16342: DOUBLE
16343: EQUAL
16344: IFTRUE 16348
16346: GO 16572
16348: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
16349: LD_ADDR_VAR 0 1
16353: PUSH
16354: LD_INT 1
16356: PUSH
16357: LD_INT 2
16359: PUSH
16360: LD_INT 3
16362: PUSH
16363: LD_INT 4
16365: PUSH
16366: LD_INT 5
16368: PUSH
16369: LD_INT 6
16371: PUSH
16372: LD_INT 7
16374: PUSH
16375: LD_INT 8
16377: PUSH
16378: LD_INT 9
16380: PUSH
16381: LD_INT 10
16383: PUSH
16384: LD_INT 11
16386: PUSH
16387: LD_INT 12
16389: PUSH
16390: LD_INT 13
16392: PUSH
16393: LD_INT 14
16395: PUSH
16396: LD_INT 15
16398: PUSH
16399: LD_INT 16
16401: PUSH
16402: LD_INT 17
16404: PUSH
16405: LD_INT 18
16407: PUSH
16408: LD_INT 19
16410: PUSH
16411: LD_INT 20
16413: PUSH
16414: LD_INT 21
16416: PUSH
16417: LD_INT 22
16419: PUSH
16420: LD_INT 23
16422: PUSH
16423: LD_INT 24
16425: PUSH
16426: LD_INT 25
16428: PUSH
16429: LD_INT 26
16431: PUSH
16432: LD_INT 27
16434: PUSH
16435: LD_INT 28
16437: PUSH
16438: LD_INT 29
16440: PUSH
16441: LD_INT 30
16443: PUSH
16444: LD_INT 31
16446: PUSH
16447: LD_INT 32
16449: PUSH
16450: LD_INT 33
16452: PUSH
16453: LD_INT 34
16455: PUSH
16456: LD_INT 36
16458: PUSH
16459: EMPTY
16460: LIST
16461: LIST
16462: LIST
16463: LIST
16464: LIST
16465: LIST
16466: LIST
16467: LIST
16468: LIST
16469: LIST
16470: LIST
16471: LIST
16472: LIST
16473: LIST
16474: LIST
16475: LIST
16476: LIST
16477: LIST
16478: LIST
16479: LIST
16480: LIST
16481: LIST
16482: LIST
16483: LIST
16484: LIST
16485: LIST
16486: LIST
16487: LIST
16488: LIST
16489: LIST
16490: LIST
16491: LIST
16492: LIST
16493: LIST
16494: LIST
16495: PUSH
16496: LD_INT 101
16498: PUSH
16499: LD_INT 102
16501: PUSH
16502: LD_INT 103
16504: PUSH
16505: LD_INT 104
16507: PUSH
16508: LD_INT 105
16510: PUSH
16511: LD_INT 106
16513: PUSH
16514: LD_INT 107
16516: PUSH
16517: LD_INT 108
16519: PUSH
16520: LD_INT 109
16522: PUSH
16523: LD_INT 110
16525: PUSH
16526: LD_INT 111
16528: PUSH
16529: LD_INT 112
16531: PUSH
16532: LD_INT 113
16534: PUSH
16535: LD_INT 114
16537: PUSH
16538: LD_INT 116
16540: PUSH
16541: LD_INT 117
16543: PUSH
16544: LD_INT 118
16546: PUSH
16547: EMPTY
16548: LIST
16549: LIST
16550: LIST
16551: LIST
16552: LIST
16553: LIST
16554: LIST
16555: LIST
16556: LIST
16557: LIST
16558: LIST
16559: LIST
16560: LIST
16561: LIST
16562: LIST
16563: LIST
16564: LIST
16565: PUSH
16566: EMPTY
16567: LIST
16568: LIST
16569: ST_TO_ADDR
16570: GO 16969
16572: LD_INT 18
16574: DOUBLE
16575: EQUAL
16576: IFTRUE 16580
16578: GO 16728
16580: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
16581: LD_ADDR_VAR 0 1
16585: PUSH
16586: LD_INT 2
16588: PUSH
16589: LD_INT 4
16591: PUSH
16592: LD_INT 5
16594: PUSH
16595: LD_INT 7
16597: PUSH
16598: LD_INT 11
16600: PUSH
16601: LD_INT 12
16603: PUSH
16604: LD_INT 15
16606: PUSH
16607: LD_INT 16
16609: PUSH
16610: LD_INT 20
16612: PUSH
16613: LD_INT 21
16615: PUSH
16616: LD_INT 22
16618: PUSH
16619: LD_INT 23
16621: PUSH
16622: LD_INT 25
16624: PUSH
16625: LD_INT 26
16627: PUSH
16628: LD_INT 30
16630: PUSH
16631: LD_INT 31
16633: PUSH
16634: LD_INT 32
16636: PUSH
16637: LD_INT 33
16639: PUSH
16640: LD_INT 34
16642: PUSH
16643: LD_INT 35
16645: PUSH
16646: LD_INT 36
16648: PUSH
16649: EMPTY
16650: LIST
16651: LIST
16652: LIST
16653: LIST
16654: LIST
16655: LIST
16656: LIST
16657: LIST
16658: LIST
16659: LIST
16660: LIST
16661: LIST
16662: LIST
16663: LIST
16664: LIST
16665: LIST
16666: LIST
16667: LIST
16668: LIST
16669: LIST
16670: LIST
16671: PUSH
16672: LD_INT 101
16674: PUSH
16675: LD_INT 102
16677: PUSH
16678: LD_INT 103
16680: PUSH
16681: LD_INT 106
16683: PUSH
16684: LD_INT 108
16686: PUSH
16687: LD_INT 112
16689: PUSH
16690: LD_INT 113
16692: PUSH
16693: LD_INT 114
16695: PUSH
16696: LD_INT 115
16698: PUSH
16699: LD_INT 116
16701: PUSH
16702: LD_INT 117
16704: PUSH
16705: LD_INT 118
16707: PUSH
16708: EMPTY
16709: LIST
16710: LIST
16711: LIST
16712: LIST
16713: LIST
16714: LIST
16715: LIST
16716: LIST
16717: LIST
16718: LIST
16719: LIST
16720: LIST
16721: PUSH
16722: EMPTY
16723: LIST
16724: LIST
16725: ST_TO_ADDR
16726: GO 16969
16728: LD_INT 19
16730: DOUBLE
16731: EQUAL
16732: IFTRUE 16736
16734: GO 16968
16736: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
16737: LD_ADDR_VAR 0 1
16741: PUSH
16742: LD_INT 1
16744: PUSH
16745: LD_INT 2
16747: PUSH
16748: LD_INT 3
16750: PUSH
16751: LD_INT 4
16753: PUSH
16754: LD_INT 5
16756: PUSH
16757: LD_INT 6
16759: PUSH
16760: LD_INT 7
16762: PUSH
16763: LD_INT 8
16765: PUSH
16766: LD_INT 9
16768: PUSH
16769: LD_INT 10
16771: PUSH
16772: LD_INT 11
16774: PUSH
16775: LD_INT 12
16777: PUSH
16778: LD_INT 13
16780: PUSH
16781: LD_INT 14
16783: PUSH
16784: LD_INT 15
16786: PUSH
16787: LD_INT 16
16789: PUSH
16790: LD_INT 17
16792: PUSH
16793: LD_INT 18
16795: PUSH
16796: LD_INT 19
16798: PUSH
16799: LD_INT 20
16801: PUSH
16802: LD_INT 21
16804: PUSH
16805: LD_INT 22
16807: PUSH
16808: LD_INT 23
16810: PUSH
16811: LD_INT 24
16813: PUSH
16814: LD_INT 25
16816: PUSH
16817: LD_INT 26
16819: PUSH
16820: LD_INT 27
16822: PUSH
16823: LD_INT 28
16825: PUSH
16826: LD_INT 29
16828: PUSH
16829: LD_INT 30
16831: PUSH
16832: LD_INT 31
16834: PUSH
16835: LD_INT 32
16837: PUSH
16838: LD_INT 33
16840: PUSH
16841: LD_INT 34
16843: PUSH
16844: LD_INT 35
16846: PUSH
16847: LD_INT 36
16849: PUSH
16850: EMPTY
16851: LIST
16852: LIST
16853: LIST
16854: LIST
16855: LIST
16856: LIST
16857: LIST
16858: LIST
16859: LIST
16860: LIST
16861: LIST
16862: LIST
16863: LIST
16864: LIST
16865: LIST
16866: LIST
16867: LIST
16868: LIST
16869: LIST
16870: LIST
16871: LIST
16872: LIST
16873: LIST
16874: LIST
16875: LIST
16876: LIST
16877: LIST
16878: LIST
16879: LIST
16880: LIST
16881: LIST
16882: LIST
16883: LIST
16884: LIST
16885: LIST
16886: LIST
16887: PUSH
16888: LD_INT 101
16890: PUSH
16891: LD_INT 102
16893: PUSH
16894: LD_INT 103
16896: PUSH
16897: LD_INT 104
16899: PUSH
16900: LD_INT 105
16902: PUSH
16903: LD_INT 106
16905: PUSH
16906: LD_INT 107
16908: PUSH
16909: LD_INT 108
16911: PUSH
16912: LD_INT 109
16914: PUSH
16915: LD_INT 110
16917: PUSH
16918: LD_INT 111
16920: PUSH
16921: LD_INT 112
16923: PUSH
16924: LD_INT 113
16926: PUSH
16927: LD_INT 114
16929: PUSH
16930: LD_INT 115
16932: PUSH
16933: LD_INT 116
16935: PUSH
16936: LD_INT 117
16938: PUSH
16939: LD_INT 118
16941: PUSH
16942: EMPTY
16943: LIST
16944: LIST
16945: LIST
16946: LIST
16947: LIST
16948: LIST
16949: LIST
16950: LIST
16951: LIST
16952: LIST
16953: LIST
16954: LIST
16955: LIST
16956: LIST
16957: LIST
16958: LIST
16959: LIST
16960: LIST
16961: PUSH
16962: EMPTY
16963: LIST
16964: LIST
16965: ST_TO_ADDR
16966: GO 16969
16968: POP
// end else
16969: GO 17200
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
16971: LD_ADDR_VAR 0 1
16975: PUSH
16976: LD_INT 1
16978: PUSH
16979: LD_INT 2
16981: PUSH
16982: LD_INT 3
16984: PUSH
16985: LD_INT 4
16987: PUSH
16988: LD_INT 5
16990: PUSH
16991: LD_INT 6
16993: PUSH
16994: LD_INT 7
16996: PUSH
16997: LD_INT 8
16999: PUSH
17000: LD_INT 9
17002: PUSH
17003: LD_INT 10
17005: PUSH
17006: LD_INT 11
17008: PUSH
17009: LD_INT 12
17011: PUSH
17012: LD_INT 13
17014: PUSH
17015: LD_INT 14
17017: PUSH
17018: LD_INT 15
17020: PUSH
17021: LD_INT 16
17023: PUSH
17024: LD_INT 17
17026: PUSH
17027: LD_INT 18
17029: PUSH
17030: LD_INT 19
17032: PUSH
17033: LD_INT 20
17035: PUSH
17036: LD_INT 21
17038: PUSH
17039: LD_INT 22
17041: PUSH
17042: LD_INT 23
17044: PUSH
17045: LD_INT 24
17047: PUSH
17048: LD_INT 25
17050: PUSH
17051: LD_INT 26
17053: PUSH
17054: LD_INT 27
17056: PUSH
17057: LD_INT 28
17059: PUSH
17060: LD_INT 29
17062: PUSH
17063: LD_INT 30
17065: PUSH
17066: LD_INT 31
17068: PUSH
17069: LD_INT 32
17071: PUSH
17072: LD_INT 33
17074: PUSH
17075: LD_INT 34
17077: PUSH
17078: LD_INT 35
17080: PUSH
17081: LD_INT 36
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: LIST
17088: LIST
17089: LIST
17090: LIST
17091: LIST
17092: LIST
17093: LIST
17094: LIST
17095: LIST
17096: LIST
17097: LIST
17098: LIST
17099: LIST
17100: LIST
17101: LIST
17102: LIST
17103: LIST
17104: LIST
17105: LIST
17106: LIST
17107: LIST
17108: LIST
17109: LIST
17110: LIST
17111: LIST
17112: LIST
17113: LIST
17114: LIST
17115: LIST
17116: LIST
17117: LIST
17118: LIST
17119: LIST
17120: LIST
17121: PUSH
17122: LD_INT 101
17124: PUSH
17125: LD_INT 102
17127: PUSH
17128: LD_INT 103
17130: PUSH
17131: LD_INT 104
17133: PUSH
17134: LD_INT 105
17136: PUSH
17137: LD_INT 106
17139: PUSH
17140: LD_INT 107
17142: PUSH
17143: LD_INT 108
17145: PUSH
17146: LD_INT 109
17148: PUSH
17149: LD_INT 110
17151: PUSH
17152: LD_INT 111
17154: PUSH
17155: LD_INT 112
17157: PUSH
17158: LD_INT 113
17160: PUSH
17161: LD_INT 114
17163: PUSH
17164: LD_INT 115
17166: PUSH
17167: LD_INT 116
17169: PUSH
17170: LD_INT 117
17172: PUSH
17173: LD_INT 118
17175: PUSH
17176: EMPTY
17177: LIST
17178: LIST
17179: LIST
17180: LIST
17181: LIST
17182: LIST
17183: LIST
17184: LIST
17185: LIST
17186: LIST
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: LIST
17193: LIST
17194: LIST
17195: PUSH
17196: EMPTY
17197: LIST
17198: LIST
17199: ST_TO_ADDR
// if result then
17200: LD_VAR 0 1
17204: IFFALSE 17493
// begin normal :=  ;
17206: LD_ADDR_VAR 0 3
17210: PUSH
17211: LD_STRING 
17213: ST_TO_ADDR
// hardcore :=  ;
17214: LD_ADDR_VAR 0 4
17218: PUSH
17219: LD_STRING 
17221: ST_TO_ADDR
// for i = 1 to normalCounter do
17222: LD_ADDR_VAR 0 5
17226: PUSH
17227: DOUBLE
17228: LD_INT 1
17230: DEC
17231: ST_TO_ADDR
17232: LD_EXP 41
17236: PUSH
17237: FOR_TO
17238: IFFALSE 17339
// begin tmp := 0 ;
17240: LD_ADDR_VAR 0 2
17244: PUSH
17245: LD_STRING 0
17247: ST_TO_ADDR
// if result [ 1 ] then
17248: LD_VAR 0 1
17252: PUSH
17253: LD_INT 1
17255: ARRAY
17256: IFFALSE 17321
// if result [ 1 ] [ 1 ] = i then
17258: LD_VAR 0 1
17262: PUSH
17263: LD_INT 1
17265: ARRAY
17266: PUSH
17267: LD_INT 1
17269: ARRAY
17270: PUSH
17271: LD_VAR 0 5
17275: EQUAL
17276: IFFALSE 17321
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
17278: LD_ADDR_VAR 0 1
17282: PUSH
17283: LD_VAR 0 1
17287: PPUSH
17288: LD_INT 1
17290: PPUSH
17291: LD_VAR 0 1
17295: PUSH
17296: LD_INT 1
17298: ARRAY
17299: PPUSH
17300: LD_INT 1
17302: PPUSH
17303: CALL_OW 3
17307: PPUSH
17308: CALL_OW 1
17312: ST_TO_ADDR
// tmp := 1 ;
17313: LD_ADDR_VAR 0 2
17317: PUSH
17318: LD_STRING 1
17320: ST_TO_ADDR
// end ; normal := normal & tmp ;
17321: LD_ADDR_VAR 0 3
17325: PUSH
17326: LD_VAR 0 3
17330: PUSH
17331: LD_VAR 0 2
17335: STR
17336: ST_TO_ADDR
// end ;
17337: GO 17237
17339: POP
17340: POP
// for i = 1 to hardcoreCounter do
17341: LD_ADDR_VAR 0 5
17345: PUSH
17346: DOUBLE
17347: LD_INT 1
17349: DEC
17350: ST_TO_ADDR
17351: LD_EXP 42
17355: PUSH
17356: FOR_TO
17357: IFFALSE 17462
// begin tmp := 0 ;
17359: LD_ADDR_VAR 0 2
17363: PUSH
17364: LD_STRING 0
17366: ST_TO_ADDR
// if result [ 2 ] then
17367: LD_VAR 0 1
17371: PUSH
17372: LD_INT 2
17374: ARRAY
17375: IFFALSE 17444
// if result [ 2 ] [ 1 ] = 100 + i then
17377: LD_VAR 0 1
17381: PUSH
17382: LD_INT 2
17384: ARRAY
17385: PUSH
17386: LD_INT 1
17388: ARRAY
17389: PUSH
17390: LD_INT 100
17392: PUSH
17393: LD_VAR 0 5
17397: PLUS
17398: EQUAL
17399: IFFALSE 17444
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
17401: LD_ADDR_VAR 0 1
17405: PUSH
17406: LD_VAR 0 1
17410: PPUSH
17411: LD_INT 2
17413: PPUSH
17414: LD_VAR 0 1
17418: PUSH
17419: LD_INT 2
17421: ARRAY
17422: PPUSH
17423: LD_INT 1
17425: PPUSH
17426: CALL_OW 3
17430: PPUSH
17431: CALL_OW 1
17435: ST_TO_ADDR
// tmp := 1 ;
17436: LD_ADDR_VAR 0 2
17440: PUSH
17441: LD_STRING 1
17443: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
17444: LD_ADDR_VAR 0 4
17448: PUSH
17449: LD_VAR 0 4
17453: PUSH
17454: LD_VAR 0 2
17458: STR
17459: ST_TO_ADDR
// end ;
17460: GO 17356
17462: POP
17463: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
17464: LD_STRING getStreamItemsFromMission("
17466: PUSH
17467: LD_VAR 0 3
17471: STR
17472: PUSH
17473: LD_STRING ","
17475: STR
17476: PUSH
17477: LD_VAR 0 4
17481: STR
17482: PUSH
17483: LD_STRING ")
17485: STR
17486: PPUSH
17487: CALL_OW 559
// end else
17491: GO 17500
// ToLua ( getStreamItemsFromMission("","") ) ;
17493: LD_STRING getStreamItemsFromMission("","")
17495: PPUSH
17496: CALL_OW 559
// end ;
17500: LD_VAR 0 1
17504: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
17505: LD_EXP 40
17509: PUSH
17510: LD_EXP 45
17514: AND
17515: IFFALSE 17639
17517: GO 17519
17519: DISABLE
17520: LD_INT 0
17522: PPUSH
17523: PPUSH
// begin enable ;
17524: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
17525: LD_ADDR_VAR 0 2
17529: PUSH
17530: LD_INT 22
17532: PUSH
17533: LD_OWVAR 2
17537: PUSH
17538: EMPTY
17539: LIST
17540: LIST
17541: PUSH
17542: LD_INT 2
17544: PUSH
17545: LD_INT 34
17547: PUSH
17548: LD_INT 7
17550: PUSH
17551: EMPTY
17552: LIST
17553: LIST
17554: PUSH
17555: LD_INT 34
17557: PUSH
17558: LD_INT 45
17560: PUSH
17561: EMPTY
17562: LIST
17563: LIST
17564: PUSH
17565: LD_INT 34
17567: PUSH
17568: LD_INT 28
17570: PUSH
17571: EMPTY
17572: LIST
17573: LIST
17574: PUSH
17575: LD_INT 34
17577: PUSH
17578: LD_INT 47
17580: PUSH
17581: EMPTY
17582: LIST
17583: LIST
17584: PUSH
17585: EMPTY
17586: LIST
17587: LIST
17588: LIST
17589: LIST
17590: LIST
17591: PUSH
17592: EMPTY
17593: LIST
17594: LIST
17595: PPUSH
17596: CALL_OW 69
17600: ST_TO_ADDR
// if not tmp then
17601: LD_VAR 0 2
17605: NOT
17606: IFFALSE 17610
// exit ;
17608: GO 17639
// for i in tmp do
17610: LD_ADDR_VAR 0 1
17614: PUSH
17615: LD_VAR 0 2
17619: PUSH
17620: FOR_IN
17621: IFFALSE 17637
// begin SetLives ( i , 0 ) ;
17623: LD_VAR 0 1
17627: PPUSH
17628: LD_INT 0
17630: PPUSH
17631: CALL_OW 234
// end ;
17635: GO 17620
17637: POP
17638: POP
// end ;
17639: PPOPN 2
17641: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
17642: LD_EXP 40
17646: PUSH
17647: LD_EXP 46
17651: AND
17652: IFFALSE 17736
17654: GO 17656
17656: DISABLE
17657: LD_INT 0
17659: PPUSH
17660: PPUSH
// begin enable ;
17661: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
17662: LD_ADDR_VAR 0 2
17666: PUSH
17667: LD_INT 22
17669: PUSH
17670: LD_OWVAR 2
17674: PUSH
17675: EMPTY
17676: LIST
17677: LIST
17678: PUSH
17679: LD_INT 32
17681: PUSH
17682: LD_INT 3
17684: PUSH
17685: EMPTY
17686: LIST
17687: LIST
17688: PUSH
17689: EMPTY
17690: LIST
17691: LIST
17692: PPUSH
17693: CALL_OW 69
17697: ST_TO_ADDR
// if not tmp then
17698: LD_VAR 0 2
17702: NOT
17703: IFFALSE 17707
// exit ;
17705: GO 17736
// for i in tmp do
17707: LD_ADDR_VAR 0 1
17711: PUSH
17712: LD_VAR 0 2
17716: PUSH
17717: FOR_IN
17718: IFFALSE 17734
// begin SetLives ( i , 0 ) ;
17720: LD_VAR 0 1
17724: PPUSH
17725: LD_INT 0
17727: PPUSH
17728: CALL_OW 234
// end ;
17732: GO 17717
17734: POP
17735: POP
// end ;
17736: PPOPN 2
17738: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
17739: LD_EXP 40
17743: PUSH
17744: LD_EXP 43
17748: AND
17749: IFFALSE 17842
17751: GO 17753
17753: DISABLE
17754: LD_INT 0
17756: PPUSH
// begin enable ;
17757: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
17758: LD_ADDR_VAR 0 1
17762: PUSH
17763: LD_INT 22
17765: PUSH
17766: LD_OWVAR 2
17770: PUSH
17771: EMPTY
17772: LIST
17773: LIST
17774: PUSH
17775: LD_INT 2
17777: PUSH
17778: LD_INT 25
17780: PUSH
17781: LD_INT 5
17783: PUSH
17784: EMPTY
17785: LIST
17786: LIST
17787: PUSH
17788: LD_INT 25
17790: PUSH
17791: LD_INT 9
17793: PUSH
17794: EMPTY
17795: LIST
17796: LIST
17797: PUSH
17798: LD_INT 25
17800: PUSH
17801: LD_INT 8
17803: PUSH
17804: EMPTY
17805: LIST
17806: LIST
17807: PUSH
17808: EMPTY
17809: LIST
17810: LIST
17811: LIST
17812: LIST
17813: PUSH
17814: EMPTY
17815: LIST
17816: LIST
17817: PPUSH
17818: CALL_OW 69
17822: PUSH
17823: FOR_IN
17824: IFFALSE 17840
// begin SetClass ( i , 1 ) ;
17826: LD_VAR 0 1
17830: PPUSH
17831: LD_INT 1
17833: PPUSH
17834: CALL_OW 336
// end ;
17838: GO 17823
17840: POP
17841: POP
// end ;
17842: PPOPN 1
17844: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
17845: LD_EXP 40
17849: PUSH
17850: LD_EXP 44
17854: AND
17855: PUSH
17856: LD_OWVAR 65
17860: PUSH
17861: LD_INT 7
17863: LESS
17864: AND
17865: IFFALSE 17879
17867: GO 17869
17869: DISABLE
// begin enable ;
17870: ENABLE
// game_speed := 7 ;
17871: LD_ADDR_OWVAR 65
17875: PUSH
17876: LD_INT 7
17878: ST_TO_ADDR
// end ;
17879: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
17880: LD_EXP 40
17884: PUSH
17885: LD_EXP 47
17889: AND
17890: IFFALSE 18092
17892: GO 17894
17894: DISABLE
17895: LD_INT 0
17897: PPUSH
17898: PPUSH
17899: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
17900: LD_ADDR_VAR 0 3
17904: PUSH
17905: LD_INT 81
17907: PUSH
17908: LD_OWVAR 2
17912: PUSH
17913: EMPTY
17914: LIST
17915: LIST
17916: PUSH
17917: LD_INT 21
17919: PUSH
17920: LD_INT 1
17922: PUSH
17923: EMPTY
17924: LIST
17925: LIST
17926: PUSH
17927: EMPTY
17928: LIST
17929: LIST
17930: PPUSH
17931: CALL_OW 69
17935: ST_TO_ADDR
// if not tmp then
17936: LD_VAR 0 3
17940: NOT
17941: IFFALSE 17945
// exit ;
17943: GO 18092
// if tmp > 5 then
17945: LD_VAR 0 3
17949: PUSH
17950: LD_INT 5
17952: GREATER
17953: IFFALSE 17965
// k := 5 else
17955: LD_ADDR_VAR 0 2
17959: PUSH
17960: LD_INT 5
17962: ST_TO_ADDR
17963: GO 17975
// k := tmp ;
17965: LD_ADDR_VAR 0 2
17969: PUSH
17970: LD_VAR 0 3
17974: ST_TO_ADDR
// for i := 1 to k do
17975: LD_ADDR_VAR 0 1
17979: PUSH
17980: DOUBLE
17981: LD_INT 1
17983: DEC
17984: ST_TO_ADDR
17985: LD_VAR 0 2
17989: PUSH
17990: FOR_TO
17991: IFFALSE 18090
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
17993: LD_VAR 0 3
17997: PUSH
17998: LD_VAR 0 1
18002: ARRAY
18003: PPUSH
18004: LD_VAR 0 1
18008: PUSH
18009: LD_INT 4
18011: MOD
18012: PUSH
18013: LD_INT 1
18015: PLUS
18016: PPUSH
18017: CALL_OW 259
18021: PUSH
18022: LD_INT 10
18024: LESS
18025: IFFALSE 18088
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
18027: LD_VAR 0 3
18031: PUSH
18032: LD_VAR 0 1
18036: ARRAY
18037: PPUSH
18038: LD_VAR 0 1
18042: PUSH
18043: LD_INT 4
18045: MOD
18046: PUSH
18047: LD_INT 1
18049: PLUS
18050: PPUSH
18051: LD_VAR 0 3
18055: PUSH
18056: LD_VAR 0 1
18060: ARRAY
18061: PPUSH
18062: LD_VAR 0 1
18066: PUSH
18067: LD_INT 4
18069: MOD
18070: PUSH
18071: LD_INT 1
18073: PLUS
18074: PPUSH
18075: CALL_OW 259
18079: PUSH
18080: LD_INT 1
18082: PLUS
18083: PPUSH
18084: CALL_OW 237
18088: GO 17990
18090: POP
18091: POP
// end ;
18092: PPOPN 3
18094: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
18095: LD_EXP 40
18099: PUSH
18100: LD_EXP 48
18104: AND
18105: IFFALSE 18125
18107: GO 18109
18109: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
18110: LD_INT 4
18112: PPUSH
18113: LD_OWVAR 2
18117: PPUSH
18118: LD_INT 0
18120: PPUSH
18121: CALL_OW 324
18125: END
// every 0 0$1 trigger StreamModeActive and sShovel do
18126: LD_EXP 40
18130: PUSH
18131: LD_EXP 77
18135: AND
18136: IFFALSE 18156
18138: GO 18140
18140: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
18141: LD_INT 19
18143: PPUSH
18144: LD_OWVAR 2
18148: PPUSH
18149: LD_INT 0
18151: PPUSH
18152: CALL_OW 324
18156: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
18157: LD_EXP 40
18161: PUSH
18162: LD_EXP 49
18166: AND
18167: IFFALSE 18269
18169: GO 18171
18171: DISABLE
18172: LD_INT 0
18174: PPUSH
18175: PPUSH
// begin enable ;
18176: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
18177: LD_ADDR_VAR 0 2
18181: PUSH
18182: LD_INT 22
18184: PUSH
18185: LD_OWVAR 2
18189: PUSH
18190: EMPTY
18191: LIST
18192: LIST
18193: PUSH
18194: LD_INT 2
18196: PUSH
18197: LD_INT 34
18199: PUSH
18200: LD_INT 11
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: PUSH
18207: LD_INT 34
18209: PUSH
18210: LD_INT 30
18212: PUSH
18213: EMPTY
18214: LIST
18215: LIST
18216: PUSH
18217: EMPTY
18218: LIST
18219: LIST
18220: LIST
18221: PUSH
18222: EMPTY
18223: LIST
18224: LIST
18225: PPUSH
18226: CALL_OW 69
18230: ST_TO_ADDR
// if not tmp then
18231: LD_VAR 0 2
18235: NOT
18236: IFFALSE 18240
// exit ;
18238: GO 18269
// for i in tmp do
18240: LD_ADDR_VAR 0 1
18244: PUSH
18245: LD_VAR 0 2
18249: PUSH
18250: FOR_IN
18251: IFFALSE 18267
// begin SetLives ( i , 0 ) ;
18253: LD_VAR 0 1
18257: PPUSH
18258: LD_INT 0
18260: PPUSH
18261: CALL_OW 234
// end ;
18265: GO 18250
18267: POP
18268: POP
// end ;
18269: PPOPN 2
18271: END
// every 0 0$1 trigger StreamModeActive and sBunker do
18272: LD_EXP 40
18276: PUSH
18277: LD_EXP 50
18281: AND
18282: IFFALSE 18302
18284: GO 18286
18286: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
18287: LD_INT 32
18289: PPUSH
18290: LD_OWVAR 2
18294: PPUSH
18295: LD_INT 0
18297: PPUSH
18298: CALL_OW 324
18302: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
18303: LD_EXP 40
18307: PUSH
18308: LD_EXP 51
18312: AND
18313: IFFALSE 18494
18315: GO 18317
18317: DISABLE
18318: LD_INT 0
18320: PPUSH
18321: PPUSH
18322: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
18323: LD_ADDR_VAR 0 2
18327: PUSH
18328: LD_INT 22
18330: PUSH
18331: LD_OWVAR 2
18335: PUSH
18336: EMPTY
18337: LIST
18338: LIST
18339: PUSH
18340: LD_INT 33
18342: PUSH
18343: LD_INT 3
18345: PUSH
18346: EMPTY
18347: LIST
18348: LIST
18349: PUSH
18350: EMPTY
18351: LIST
18352: LIST
18353: PPUSH
18354: CALL_OW 69
18358: ST_TO_ADDR
// if not tmp then
18359: LD_VAR 0 2
18363: NOT
18364: IFFALSE 18368
// exit ;
18366: GO 18494
// side := 0 ;
18368: LD_ADDR_VAR 0 3
18372: PUSH
18373: LD_INT 0
18375: ST_TO_ADDR
// for i := 1 to 8 do
18376: LD_ADDR_VAR 0 1
18380: PUSH
18381: DOUBLE
18382: LD_INT 1
18384: DEC
18385: ST_TO_ADDR
18386: LD_INT 8
18388: PUSH
18389: FOR_TO
18390: IFFALSE 18438
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
18392: LD_OWVAR 2
18396: PUSH
18397: LD_VAR 0 1
18401: NONEQUAL
18402: PUSH
18403: LD_OWVAR 2
18407: PPUSH
18408: LD_VAR 0 1
18412: PPUSH
18413: CALL_OW 81
18417: PUSH
18418: LD_INT 2
18420: EQUAL
18421: AND
18422: IFFALSE 18436
// begin side := i ;
18424: LD_ADDR_VAR 0 3
18428: PUSH
18429: LD_VAR 0 1
18433: ST_TO_ADDR
// break ;
18434: GO 18438
// end ;
18436: GO 18389
18438: POP
18439: POP
// if not side then
18440: LD_VAR 0 3
18444: NOT
18445: IFFALSE 18449
// exit ;
18447: GO 18494
// for i := 1 to tmp do
18449: LD_ADDR_VAR 0 1
18453: PUSH
18454: DOUBLE
18455: LD_INT 1
18457: DEC
18458: ST_TO_ADDR
18459: LD_VAR 0 2
18463: PUSH
18464: FOR_TO
18465: IFFALSE 18492
// if Prob ( 60 ) then
18467: LD_INT 60
18469: PPUSH
18470: CALL_OW 13
18474: IFFALSE 18490
// SetSide ( i , side ) ;
18476: LD_VAR 0 1
18480: PPUSH
18481: LD_VAR 0 3
18485: PPUSH
18486: CALL_OW 235
18490: GO 18464
18492: POP
18493: POP
// end ;
18494: PPOPN 3
18496: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
18497: LD_EXP 40
18501: PUSH
18502: LD_EXP 53
18506: AND
18507: IFFALSE 18626
18509: GO 18511
18511: DISABLE
18512: LD_INT 0
18514: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
18515: LD_ADDR_VAR 0 1
18519: PUSH
18520: LD_INT 22
18522: PUSH
18523: LD_OWVAR 2
18527: PUSH
18528: EMPTY
18529: LIST
18530: LIST
18531: PUSH
18532: LD_INT 21
18534: PUSH
18535: LD_INT 1
18537: PUSH
18538: EMPTY
18539: LIST
18540: LIST
18541: PUSH
18542: LD_INT 3
18544: PUSH
18545: LD_INT 23
18547: PUSH
18548: LD_INT 0
18550: PUSH
18551: EMPTY
18552: LIST
18553: LIST
18554: PUSH
18555: EMPTY
18556: LIST
18557: LIST
18558: PUSH
18559: EMPTY
18560: LIST
18561: LIST
18562: LIST
18563: PPUSH
18564: CALL_OW 69
18568: PUSH
18569: FOR_IN
18570: IFFALSE 18624
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
18572: LD_VAR 0 1
18576: PPUSH
18577: CALL_OW 257
18581: PUSH
18582: LD_INT 1
18584: PUSH
18585: LD_INT 2
18587: PUSH
18588: LD_INT 3
18590: PUSH
18591: LD_INT 4
18593: PUSH
18594: EMPTY
18595: LIST
18596: LIST
18597: LIST
18598: LIST
18599: IN
18600: IFFALSE 18622
// SetClass ( un , rand ( 1 , 4 ) ) ;
18602: LD_VAR 0 1
18606: PPUSH
18607: LD_INT 1
18609: PPUSH
18610: LD_INT 4
18612: PPUSH
18613: CALL_OW 12
18617: PPUSH
18618: CALL_OW 336
18622: GO 18569
18624: POP
18625: POP
// end ;
18626: PPOPN 1
18628: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
18629: LD_EXP 40
18633: PUSH
18634: LD_EXP 52
18638: AND
18639: IFFALSE 18718
18641: GO 18643
18643: DISABLE
18644: LD_INT 0
18646: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18647: LD_ADDR_VAR 0 1
18651: PUSH
18652: LD_INT 22
18654: PUSH
18655: LD_OWVAR 2
18659: PUSH
18660: EMPTY
18661: LIST
18662: LIST
18663: PUSH
18664: LD_INT 21
18666: PUSH
18667: LD_INT 3
18669: PUSH
18670: EMPTY
18671: LIST
18672: LIST
18673: PUSH
18674: EMPTY
18675: LIST
18676: LIST
18677: PPUSH
18678: CALL_OW 69
18682: ST_TO_ADDR
// if not tmp then
18683: LD_VAR 0 1
18687: NOT
18688: IFFALSE 18692
// exit ;
18690: GO 18718
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
18692: LD_VAR 0 1
18696: PUSH
18697: LD_INT 1
18699: PPUSH
18700: LD_VAR 0 1
18704: PPUSH
18705: CALL_OW 12
18709: ARRAY
18710: PPUSH
18711: LD_INT 100
18713: PPUSH
18714: CALL_OW 234
// end ;
18718: PPOPN 1
18720: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
18721: LD_EXP 40
18725: PUSH
18726: LD_EXP 54
18730: AND
18731: IFFALSE 18829
18733: GO 18735
18735: DISABLE
18736: LD_INT 0
18738: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
18739: LD_ADDR_VAR 0 1
18743: PUSH
18744: LD_INT 22
18746: PUSH
18747: LD_OWVAR 2
18751: PUSH
18752: EMPTY
18753: LIST
18754: LIST
18755: PUSH
18756: LD_INT 21
18758: PUSH
18759: LD_INT 1
18761: PUSH
18762: EMPTY
18763: LIST
18764: LIST
18765: PUSH
18766: EMPTY
18767: LIST
18768: LIST
18769: PPUSH
18770: CALL_OW 69
18774: ST_TO_ADDR
// if not tmp then
18775: LD_VAR 0 1
18779: NOT
18780: IFFALSE 18784
// exit ;
18782: GO 18829
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
18784: LD_VAR 0 1
18788: PUSH
18789: LD_INT 1
18791: PPUSH
18792: LD_VAR 0 1
18796: PPUSH
18797: CALL_OW 12
18801: ARRAY
18802: PPUSH
18803: LD_INT 1
18805: PPUSH
18806: LD_INT 4
18808: PPUSH
18809: CALL_OW 12
18813: PPUSH
18814: LD_INT 3000
18816: PPUSH
18817: LD_INT 9000
18819: PPUSH
18820: CALL_OW 12
18824: PPUSH
18825: CALL_OW 492
// end ;
18829: PPOPN 1
18831: END
// every 0 0$1 trigger StreamModeActive and sDepot do
18832: LD_EXP 40
18836: PUSH
18837: LD_EXP 55
18841: AND
18842: IFFALSE 18862
18844: GO 18846
18846: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
18847: LD_INT 1
18849: PPUSH
18850: LD_OWVAR 2
18854: PPUSH
18855: LD_INT 0
18857: PPUSH
18858: CALL_OW 324
18862: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
18863: LD_EXP 40
18867: PUSH
18868: LD_EXP 56
18872: AND
18873: IFFALSE 18956
18875: GO 18877
18877: DISABLE
18878: LD_INT 0
18880: PPUSH
18881: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
18882: LD_ADDR_VAR 0 2
18886: PUSH
18887: LD_INT 22
18889: PUSH
18890: LD_OWVAR 2
18894: PUSH
18895: EMPTY
18896: LIST
18897: LIST
18898: PUSH
18899: LD_INT 21
18901: PUSH
18902: LD_INT 3
18904: PUSH
18905: EMPTY
18906: LIST
18907: LIST
18908: PUSH
18909: EMPTY
18910: LIST
18911: LIST
18912: PPUSH
18913: CALL_OW 69
18917: ST_TO_ADDR
// if not tmp then
18918: LD_VAR 0 2
18922: NOT
18923: IFFALSE 18927
// exit ;
18925: GO 18956
// for i in tmp do
18927: LD_ADDR_VAR 0 1
18931: PUSH
18932: LD_VAR 0 2
18936: PUSH
18937: FOR_IN
18938: IFFALSE 18954
// SetBLevel ( i , 10 ) ;
18940: LD_VAR 0 1
18944: PPUSH
18945: LD_INT 10
18947: PPUSH
18948: CALL_OW 241
18952: GO 18937
18954: POP
18955: POP
// end ;
18956: PPOPN 2
18958: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
18959: LD_EXP 40
18963: PUSH
18964: LD_EXP 57
18968: AND
18969: IFFALSE 19080
18971: GO 18973
18973: DISABLE
18974: LD_INT 0
18976: PPUSH
18977: PPUSH
18978: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18979: LD_ADDR_VAR 0 3
18983: PUSH
18984: LD_INT 22
18986: PUSH
18987: LD_OWVAR 2
18991: PUSH
18992: EMPTY
18993: LIST
18994: LIST
18995: PUSH
18996: LD_INT 25
18998: PUSH
18999: LD_INT 1
19001: PUSH
19002: EMPTY
19003: LIST
19004: LIST
19005: PUSH
19006: EMPTY
19007: LIST
19008: LIST
19009: PPUSH
19010: CALL_OW 69
19014: ST_TO_ADDR
// if not tmp then
19015: LD_VAR 0 3
19019: NOT
19020: IFFALSE 19024
// exit ;
19022: GO 19080
// un := tmp [ rand ( 1 , tmp ) ] ;
19024: LD_ADDR_VAR 0 2
19028: PUSH
19029: LD_VAR 0 3
19033: PUSH
19034: LD_INT 1
19036: PPUSH
19037: LD_VAR 0 3
19041: PPUSH
19042: CALL_OW 12
19046: ARRAY
19047: ST_TO_ADDR
// if Crawls ( un ) then
19048: LD_VAR 0 2
19052: PPUSH
19053: CALL_OW 318
19057: IFFALSE 19068
// ComWalk ( un ) ;
19059: LD_VAR 0 2
19063: PPUSH
19064: CALL_OW 138
// SetClass ( un , class_sniper ) ;
19068: LD_VAR 0 2
19072: PPUSH
19073: LD_INT 5
19075: PPUSH
19076: CALL_OW 336
// end ;
19080: PPOPN 3
19082: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
19083: LD_EXP 40
19087: PUSH
19088: LD_EXP 58
19092: AND
19093: PUSH
19094: LD_OWVAR 67
19098: PUSH
19099: LD_INT 4
19101: LESS
19102: AND
19103: IFFALSE 19122
19105: GO 19107
19107: DISABLE
// begin Difficulty := Difficulty + 1 ;
19108: LD_ADDR_OWVAR 67
19112: PUSH
19113: LD_OWVAR 67
19117: PUSH
19118: LD_INT 1
19120: PLUS
19121: ST_TO_ADDR
// end ;
19122: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
19123: LD_EXP 40
19127: PUSH
19128: LD_EXP 59
19132: AND
19133: IFFALSE 19236
19135: GO 19137
19137: DISABLE
19138: LD_INT 0
19140: PPUSH
// begin for i := 1 to 5 do
19141: LD_ADDR_VAR 0 1
19145: PUSH
19146: DOUBLE
19147: LD_INT 1
19149: DEC
19150: ST_TO_ADDR
19151: LD_INT 5
19153: PUSH
19154: FOR_TO
19155: IFFALSE 19234
// begin uc_nation := nation_nature ;
19157: LD_ADDR_OWVAR 21
19161: PUSH
19162: LD_INT 0
19164: ST_TO_ADDR
// uc_side := 0 ;
19165: LD_ADDR_OWVAR 20
19169: PUSH
19170: LD_INT 0
19172: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19173: LD_ADDR_OWVAR 29
19177: PUSH
19178: LD_INT 12
19180: PUSH
19181: LD_INT 12
19183: PUSH
19184: EMPTY
19185: LIST
19186: LIST
19187: ST_TO_ADDR
// hc_agressivity := 20 ;
19188: LD_ADDR_OWVAR 35
19192: PUSH
19193: LD_INT 20
19195: ST_TO_ADDR
// hc_class := class_tiger ;
19196: LD_ADDR_OWVAR 28
19200: PUSH
19201: LD_INT 14
19203: ST_TO_ADDR
// hc_gallery :=  ;
19204: LD_ADDR_OWVAR 33
19208: PUSH
19209: LD_STRING 
19211: ST_TO_ADDR
// hc_name :=  ;
19212: LD_ADDR_OWVAR 26
19216: PUSH
19217: LD_STRING 
19219: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
19220: CALL_OW 44
19224: PPUSH
19225: LD_INT 0
19227: PPUSH
19228: CALL_OW 51
// end ;
19232: GO 19154
19234: POP
19235: POP
// end ;
19236: PPOPN 1
19238: END
// every 0 0$1 trigger StreamModeActive and sBomb do
19239: LD_EXP 40
19243: PUSH
19244: LD_EXP 60
19248: AND
19249: IFFALSE 19258
19251: GO 19253
19253: DISABLE
// StreamSibBomb ;
19254: CALL 19259 0 0
19258: END
// export function StreamSibBomb ; var i , x , y ; begin
19259: LD_INT 0
19261: PPUSH
19262: PPUSH
19263: PPUSH
19264: PPUSH
// result := false ;
19265: LD_ADDR_VAR 0 1
19269: PUSH
19270: LD_INT 0
19272: ST_TO_ADDR
// for i := 1 to 16 do
19273: LD_ADDR_VAR 0 2
19277: PUSH
19278: DOUBLE
19279: LD_INT 1
19281: DEC
19282: ST_TO_ADDR
19283: LD_INT 16
19285: PUSH
19286: FOR_TO
19287: IFFALSE 19486
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19289: LD_ADDR_VAR 0 3
19293: PUSH
19294: LD_INT 10
19296: PUSH
19297: LD_INT 20
19299: PUSH
19300: LD_INT 30
19302: PUSH
19303: LD_INT 40
19305: PUSH
19306: LD_INT 50
19308: PUSH
19309: LD_INT 60
19311: PUSH
19312: LD_INT 70
19314: PUSH
19315: LD_INT 80
19317: PUSH
19318: LD_INT 90
19320: PUSH
19321: LD_INT 100
19323: PUSH
19324: LD_INT 110
19326: PUSH
19327: LD_INT 120
19329: PUSH
19330: LD_INT 130
19332: PUSH
19333: LD_INT 140
19335: PUSH
19336: LD_INT 150
19338: PUSH
19339: EMPTY
19340: LIST
19341: LIST
19342: LIST
19343: LIST
19344: LIST
19345: LIST
19346: LIST
19347: LIST
19348: LIST
19349: LIST
19350: LIST
19351: LIST
19352: LIST
19353: LIST
19354: LIST
19355: PUSH
19356: LD_INT 1
19358: PPUSH
19359: LD_INT 15
19361: PPUSH
19362: CALL_OW 12
19366: ARRAY
19367: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
19368: LD_ADDR_VAR 0 4
19372: PUSH
19373: LD_INT 10
19375: PUSH
19376: LD_INT 20
19378: PUSH
19379: LD_INT 30
19381: PUSH
19382: LD_INT 40
19384: PUSH
19385: LD_INT 50
19387: PUSH
19388: LD_INT 60
19390: PUSH
19391: LD_INT 70
19393: PUSH
19394: LD_INT 80
19396: PUSH
19397: LD_INT 90
19399: PUSH
19400: LD_INT 100
19402: PUSH
19403: LD_INT 110
19405: PUSH
19406: LD_INT 120
19408: PUSH
19409: LD_INT 130
19411: PUSH
19412: LD_INT 140
19414: PUSH
19415: LD_INT 150
19417: PUSH
19418: EMPTY
19419: LIST
19420: LIST
19421: LIST
19422: LIST
19423: LIST
19424: LIST
19425: LIST
19426: LIST
19427: LIST
19428: LIST
19429: LIST
19430: LIST
19431: LIST
19432: LIST
19433: LIST
19434: PUSH
19435: LD_INT 1
19437: PPUSH
19438: LD_INT 15
19440: PPUSH
19441: CALL_OW 12
19445: ARRAY
19446: ST_TO_ADDR
// if ValidHex ( x , y ) then
19447: LD_VAR 0 3
19451: PPUSH
19452: LD_VAR 0 4
19456: PPUSH
19457: CALL_OW 488
19461: IFFALSE 19484
// begin result := [ x , y ] ;
19463: LD_ADDR_VAR 0 1
19467: PUSH
19468: LD_VAR 0 3
19472: PUSH
19473: LD_VAR 0 4
19477: PUSH
19478: EMPTY
19479: LIST
19480: LIST
19481: ST_TO_ADDR
// break ;
19482: GO 19486
// end ; end ;
19484: GO 19286
19486: POP
19487: POP
// if result then
19488: LD_VAR 0 1
19492: IFFALSE 19552
// begin ToLua ( playSibBomb() ) ;
19494: LD_STRING playSibBomb()
19496: PPUSH
19497: CALL_OW 559
// wait ( 0 0$14 ) ;
19501: LD_INT 490
19503: PPUSH
19504: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
19508: LD_VAR 0 1
19512: PUSH
19513: LD_INT 1
19515: ARRAY
19516: PPUSH
19517: LD_VAR 0 1
19521: PUSH
19522: LD_INT 2
19524: ARRAY
19525: PPUSH
19526: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
19530: LD_VAR 0 1
19534: PUSH
19535: LD_INT 1
19537: ARRAY
19538: PPUSH
19539: LD_VAR 0 1
19543: PUSH
19544: LD_INT 2
19546: ARRAY
19547: PPUSH
19548: CALL_OW 429
// end ; end ;
19552: LD_VAR 0 1
19556: RET
// every 0 0$1 trigger StreamModeActive and sReset do
19557: LD_EXP 40
19561: PUSH
19562: LD_EXP 62
19566: AND
19567: IFFALSE 19579
19569: GO 19571
19571: DISABLE
// YouLost (  ) ;
19572: LD_STRING 
19574: PPUSH
19575: CALL_OW 104
19579: END
// every 0 0$1 trigger StreamModeActive and sFog do
19580: LD_EXP 40
19584: PUSH
19585: LD_EXP 61
19589: AND
19590: IFFALSE 19604
19592: GO 19594
19594: DISABLE
// FogOff ( your_side ) ;
19595: LD_OWVAR 2
19599: PPUSH
19600: CALL_OW 344
19604: END
// every 0 0$1 trigger StreamModeActive and sSun do
19605: LD_EXP 40
19609: PUSH
19610: LD_EXP 63
19614: AND
19615: IFFALSE 19643
19617: GO 19619
19619: DISABLE
// begin solar_recharge_percent := 0 ;
19620: LD_ADDR_OWVAR 79
19624: PUSH
19625: LD_INT 0
19627: ST_TO_ADDR
// wait ( 5 5$00 ) ;
19628: LD_INT 10500
19630: PPUSH
19631: CALL_OW 67
// solar_recharge_percent := 100 ;
19635: LD_ADDR_OWVAR 79
19639: PUSH
19640: LD_INT 100
19642: ST_TO_ADDR
// end ;
19643: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
19644: LD_EXP 40
19648: PUSH
19649: LD_EXP 64
19653: AND
19654: IFFALSE 19893
19656: GO 19658
19658: DISABLE
19659: LD_INT 0
19661: PPUSH
19662: PPUSH
19663: PPUSH
// begin tmp := [ ] ;
19664: LD_ADDR_VAR 0 3
19668: PUSH
19669: EMPTY
19670: ST_TO_ADDR
// for i := 1 to 6 do
19671: LD_ADDR_VAR 0 1
19675: PUSH
19676: DOUBLE
19677: LD_INT 1
19679: DEC
19680: ST_TO_ADDR
19681: LD_INT 6
19683: PUSH
19684: FOR_TO
19685: IFFALSE 19790
// begin uc_nation := nation_nature ;
19687: LD_ADDR_OWVAR 21
19691: PUSH
19692: LD_INT 0
19694: ST_TO_ADDR
// uc_side := 0 ;
19695: LD_ADDR_OWVAR 20
19699: PUSH
19700: LD_INT 0
19702: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
19703: LD_ADDR_OWVAR 29
19707: PUSH
19708: LD_INT 12
19710: PUSH
19711: LD_INT 12
19713: PUSH
19714: EMPTY
19715: LIST
19716: LIST
19717: ST_TO_ADDR
// hc_agressivity := 20 ;
19718: LD_ADDR_OWVAR 35
19722: PUSH
19723: LD_INT 20
19725: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
19726: LD_ADDR_OWVAR 28
19730: PUSH
19731: LD_INT 17
19733: ST_TO_ADDR
// hc_gallery :=  ;
19734: LD_ADDR_OWVAR 33
19738: PUSH
19739: LD_STRING 
19741: ST_TO_ADDR
// hc_name :=  ;
19742: LD_ADDR_OWVAR 26
19746: PUSH
19747: LD_STRING 
19749: ST_TO_ADDR
// un := CreateHuman ;
19750: LD_ADDR_VAR 0 2
19754: PUSH
19755: CALL_OW 44
19759: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
19760: LD_VAR 0 2
19764: PPUSH
19765: LD_INT 1
19767: PPUSH
19768: CALL_OW 51
// tmp := tmp ^ un ;
19772: LD_ADDR_VAR 0 3
19776: PUSH
19777: LD_VAR 0 3
19781: PUSH
19782: LD_VAR 0 2
19786: ADD
19787: ST_TO_ADDR
// end ;
19788: GO 19684
19790: POP
19791: POP
// repeat wait ( 0 0$1 ) ;
19792: LD_INT 35
19794: PPUSH
19795: CALL_OW 67
// for un in tmp do
19799: LD_ADDR_VAR 0 2
19803: PUSH
19804: LD_VAR 0 3
19808: PUSH
19809: FOR_IN
19810: IFFALSE 19884
// begin if IsDead ( un ) then
19812: LD_VAR 0 2
19816: PPUSH
19817: CALL_OW 301
19821: IFFALSE 19841
// begin tmp := tmp diff un ;
19823: LD_ADDR_VAR 0 3
19827: PUSH
19828: LD_VAR 0 3
19832: PUSH
19833: LD_VAR 0 2
19837: DIFF
19838: ST_TO_ADDR
// continue ;
19839: GO 19809
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
19841: LD_VAR 0 2
19845: PPUSH
19846: LD_INT 3
19848: PUSH
19849: LD_INT 22
19851: PUSH
19852: LD_INT 0
19854: PUSH
19855: EMPTY
19856: LIST
19857: LIST
19858: PUSH
19859: EMPTY
19860: LIST
19861: LIST
19862: PPUSH
19863: CALL_OW 69
19867: PPUSH
19868: LD_VAR 0 2
19872: PPUSH
19873: CALL_OW 74
19877: PPUSH
19878: CALL_OW 115
// end ;
19882: GO 19809
19884: POP
19885: POP
// until not tmp ;
19886: LD_VAR 0 3
19890: NOT
19891: IFFALSE 19792
// end ;
19893: PPOPN 3
19895: END
// every 0 0$1 trigger StreamModeActive and sTroll do
19896: LD_EXP 40
19900: PUSH
19901: LD_EXP 65
19905: AND
19906: IFFALSE 19960
19908: GO 19910
19910: DISABLE
// begin ToLua ( displayTroll(); ) ;
19911: LD_STRING displayTroll();
19913: PPUSH
19914: CALL_OW 559
// wait ( 3 3$00 ) ;
19918: LD_INT 6300
19920: PPUSH
19921: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19925: LD_STRING hideTroll();
19927: PPUSH
19928: CALL_OW 559
// wait ( 1 1$00 ) ;
19932: LD_INT 2100
19934: PPUSH
19935: CALL_OW 67
// ToLua ( displayTroll(); ) ;
19939: LD_STRING displayTroll();
19941: PPUSH
19942: CALL_OW 559
// wait ( 1 1$00 ) ;
19946: LD_INT 2100
19948: PPUSH
19949: CALL_OW 67
// ToLua ( hideTroll(); ) ;
19953: LD_STRING hideTroll();
19955: PPUSH
19956: CALL_OW 559
// end ;
19960: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
19961: LD_EXP 40
19965: PUSH
19966: LD_EXP 66
19970: AND
19971: IFFALSE 20034
19973: GO 19975
19975: DISABLE
19976: LD_INT 0
19978: PPUSH
// begin p := 0 ;
19979: LD_ADDR_VAR 0 1
19983: PUSH
19984: LD_INT 0
19986: ST_TO_ADDR
// repeat game_speed := 1 ;
19987: LD_ADDR_OWVAR 65
19991: PUSH
19992: LD_INT 1
19994: ST_TO_ADDR
// wait ( 0 0$1 ) ;
19995: LD_INT 35
19997: PPUSH
19998: CALL_OW 67
// p := p + 1 ;
20002: LD_ADDR_VAR 0 1
20006: PUSH
20007: LD_VAR 0 1
20011: PUSH
20012: LD_INT 1
20014: PLUS
20015: ST_TO_ADDR
// until p >= 60 ;
20016: LD_VAR 0 1
20020: PUSH
20021: LD_INT 60
20023: GREATEREQUAL
20024: IFFALSE 19987
// game_speed := 4 ;
20026: LD_ADDR_OWVAR 65
20030: PUSH
20031: LD_INT 4
20033: ST_TO_ADDR
// end ;
20034: PPOPN 1
20036: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
20037: LD_EXP 40
20041: PUSH
20042: LD_EXP 67
20046: AND
20047: IFFALSE 20193
20049: GO 20051
20051: DISABLE
20052: LD_INT 0
20054: PPUSH
20055: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20056: LD_ADDR_VAR 0 1
20060: PUSH
20061: LD_INT 22
20063: PUSH
20064: LD_OWVAR 2
20068: PUSH
20069: EMPTY
20070: LIST
20071: LIST
20072: PUSH
20073: LD_INT 2
20075: PUSH
20076: LD_INT 30
20078: PUSH
20079: LD_INT 0
20081: PUSH
20082: EMPTY
20083: LIST
20084: LIST
20085: PUSH
20086: LD_INT 30
20088: PUSH
20089: LD_INT 1
20091: PUSH
20092: EMPTY
20093: LIST
20094: LIST
20095: PUSH
20096: EMPTY
20097: LIST
20098: LIST
20099: LIST
20100: PUSH
20101: EMPTY
20102: LIST
20103: LIST
20104: PPUSH
20105: CALL_OW 69
20109: ST_TO_ADDR
// if not depot then
20110: LD_VAR 0 1
20114: NOT
20115: IFFALSE 20119
// exit ;
20117: GO 20193
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
20119: LD_ADDR_VAR 0 2
20123: PUSH
20124: LD_VAR 0 1
20128: PUSH
20129: LD_INT 1
20131: PPUSH
20132: LD_VAR 0 1
20136: PPUSH
20137: CALL_OW 12
20141: ARRAY
20142: PPUSH
20143: CALL_OW 274
20147: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
20148: LD_VAR 0 2
20152: PPUSH
20153: LD_INT 1
20155: PPUSH
20156: LD_INT 0
20158: PPUSH
20159: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
20163: LD_VAR 0 2
20167: PPUSH
20168: LD_INT 2
20170: PPUSH
20171: LD_INT 0
20173: PPUSH
20174: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
20178: LD_VAR 0 2
20182: PPUSH
20183: LD_INT 3
20185: PPUSH
20186: LD_INT 0
20188: PPUSH
20189: CALL_OW 277
// end ;
20193: PPOPN 2
20195: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
20196: LD_EXP 40
20200: PUSH
20201: LD_EXP 68
20205: AND
20206: IFFALSE 20303
20208: GO 20210
20210: DISABLE
20211: LD_INT 0
20213: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
20214: LD_ADDR_VAR 0 1
20218: PUSH
20219: LD_INT 22
20221: PUSH
20222: LD_OWVAR 2
20226: PUSH
20227: EMPTY
20228: LIST
20229: LIST
20230: PUSH
20231: LD_INT 21
20233: PUSH
20234: LD_INT 1
20236: PUSH
20237: EMPTY
20238: LIST
20239: LIST
20240: PUSH
20241: LD_INT 3
20243: PUSH
20244: LD_INT 23
20246: PUSH
20247: LD_INT 0
20249: PUSH
20250: EMPTY
20251: LIST
20252: LIST
20253: PUSH
20254: EMPTY
20255: LIST
20256: LIST
20257: PUSH
20258: EMPTY
20259: LIST
20260: LIST
20261: LIST
20262: PPUSH
20263: CALL_OW 69
20267: ST_TO_ADDR
// if not tmp then
20268: LD_VAR 0 1
20272: NOT
20273: IFFALSE 20277
// exit ;
20275: GO 20303
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
20277: LD_VAR 0 1
20281: PUSH
20282: LD_INT 1
20284: PPUSH
20285: LD_VAR 0 1
20289: PPUSH
20290: CALL_OW 12
20294: ARRAY
20295: PPUSH
20296: LD_INT 200
20298: PPUSH
20299: CALL_OW 234
// end ;
20303: PPOPN 1
20305: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
20306: LD_EXP 40
20310: PUSH
20311: LD_EXP 69
20315: AND
20316: IFFALSE 20395
20318: GO 20320
20320: DISABLE
20321: LD_INT 0
20323: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
20324: LD_ADDR_VAR 0 1
20328: PUSH
20329: LD_INT 22
20331: PUSH
20332: LD_OWVAR 2
20336: PUSH
20337: EMPTY
20338: LIST
20339: LIST
20340: PUSH
20341: LD_INT 21
20343: PUSH
20344: LD_INT 2
20346: PUSH
20347: EMPTY
20348: LIST
20349: LIST
20350: PUSH
20351: EMPTY
20352: LIST
20353: LIST
20354: PPUSH
20355: CALL_OW 69
20359: ST_TO_ADDR
// if not tmp then
20360: LD_VAR 0 1
20364: NOT
20365: IFFALSE 20369
// exit ;
20367: GO 20395
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
20369: LD_VAR 0 1
20373: PUSH
20374: LD_INT 1
20376: PPUSH
20377: LD_VAR 0 1
20381: PPUSH
20382: CALL_OW 12
20386: ARRAY
20387: PPUSH
20388: LD_INT 60
20390: PPUSH
20391: CALL_OW 234
// end ;
20395: PPOPN 1
20397: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
20398: LD_EXP 40
20402: PUSH
20403: LD_EXP 70
20407: AND
20408: IFFALSE 20507
20410: GO 20412
20412: DISABLE
20413: LD_INT 0
20415: PPUSH
20416: PPUSH
// begin enable ;
20417: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
20418: LD_ADDR_VAR 0 1
20422: PUSH
20423: LD_INT 22
20425: PUSH
20426: LD_OWVAR 2
20430: PUSH
20431: EMPTY
20432: LIST
20433: LIST
20434: PUSH
20435: LD_INT 61
20437: PUSH
20438: EMPTY
20439: LIST
20440: PUSH
20441: LD_INT 33
20443: PUSH
20444: LD_INT 2
20446: PUSH
20447: EMPTY
20448: LIST
20449: LIST
20450: PUSH
20451: EMPTY
20452: LIST
20453: LIST
20454: LIST
20455: PPUSH
20456: CALL_OW 69
20460: ST_TO_ADDR
// if not tmp then
20461: LD_VAR 0 1
20465: NOT
20466: IFFALSE 20470
// exit ;
20468: GO 20507
// for i in tmp do
20470: LD_ADDR_VAR 0 2
20474: PUSH
20475: LD_VAR 0 1
20479: PUSH
20480: FOR_IN
20481: IFFALSE 20505
// if IsControledBy ( i ) then
20483: LD_VAR 0 2
20487: PPUSH
20488: CALL_OW 312
20492: IFFALSE 20503
// ComUnlink ( i ) ;
20494: LD_VAR 0 2
20498: PPUSH
20499: CALL_OW 136
20503: GO 20480
20505: POP
20506: POP
// end ;
20507: PPOPN 2
20509: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
20510: LD_EXP 40
20514: PUSH
20515: LD_EXP 71
20519: AND
20520: IFFALSE 20660
20522: GO 20524
20524: DISABLE
20525: LD_INT 0
20527: PPUSH
20528: PPUSH
// begin ToLua ( displayPowell(); ) ;
20529: LD_STRING displayPowell();
20531: PPUSH
20532: CALL_OW 559
// uc_side := 0 ;
20536: LD_ADDR_OWVAR 20
20540: PUSH
20541: LD_INT 0
20543: ST_TO_ADDR
// uc_nation := 2 ;
20544: LD_ADDR_OWVAR 21
20548: PUSH
20549: LD_INT 2
20551: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
20552: LD_ADDR_OWVAR 37
20556: PUSH
20557: LD_INT 14
20559: ST_TO_ADDR
// vc_engine := engine_siberite ;
20560: LD_ADDR_OWVAR 39
20564: PUSH
20565: LD_INT 3
20567: ST_TO_ADDR
// vc_control := control_apeman ;
20568: LD_ADDR_OWVAR 38
20572: PUSH
20573: LD_INT 5
20575: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
20576: LD_ADDR_OWVAR 40
20580: PUSH
20581: LD_INT 29
20583: ST_TO_ADDR
// un := CreateVehicle ;
20584: LD_ADDR_VAR 0 2
20588: PUSH
20589: CALL_OW 45
20593: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20594: LD_VAR 0 2
20598: PPUSH
20599: LD_INT 1
20601: PPUSH
20602: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
20606: LD_INT 35
20608: PPUSH
20609: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
20613: LD_VAR 0 2
20617: PPUSH
20618: LD_INT 22
20620: PUSH
20621: LD_OWVAR 2
20625: PUSH
20626: EMPTY
20627: LIST
20628: LIST
20629: PPUSH
20630: CALL_OW 69
20634: PPUSH
20635: LD_VAR 0 2
20639: PPUSH
20640: CALL_OW 74
20644: PPUSH
20645: CALL_OW 115
// until IsDead ( un ) ;
20649: LD_VAR 0 2
20653: PPUSH
20654: CALL_OW 301
20658: IFFALSE 20606
// end ;
20660: PPOPN 2
20662: END
// every 0 0$1 trigger StreamModeActive and sStu do
20663: LD_EXP 40
20667: PUSH
20668: LD_EXP 79
20672: AND
20673: IFFALSE 20689
20675: GO 20677
20677: DISABLE
// begin ToLua ( displayStucuk(); ) ;
20678: LD_STRING displayStucuk();
20680: PPUSH
20681: CALL_OW 559
// ResetFog ;
20685: CALL_OW 335
// end ;
20689: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
20690: LD_EXP 40
20694: PUSH
20695: LD_EXP 72
20699: AND
20700: IFFALSE 20841
20702: GO 20704
20704: DISABLE
20705: LD_INT 0
20707: PPUSH
20708: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20709: LD_ADDR_VAR 0 2
20713: PUSH
20714: LD_INT 22
20716: PUSH
20717: LD_OWVAR 2
20721: PUSH
20722: EMPTY
20723: LIST
20724: LIST
20725: PUSH
20726: LD_INT 21
20728: PUSH
20729: LD_INT 1
20731: PUSH
20732: EMPTY
20733: LIST
20734: LIST
20735: PUSH
20736: EMPTY
20737: LIST
20738: LIST
20739: PPUSH
20740: CALL_OW 69
20744: ST_TO_ADDR
// if not tmp then
20745: LD_VAR 0 2
20749: NOT
20750: IFFALSE 20754
// exit ;
20752: GO 20841
// un := tmp [ rand ( 1 , tmp ) ] ;
20754: LD_ADDR_VAR 0 1
20758: PUSH
20759: LD_VAR 0 2
20763: PUSH
20764: LD_INT 1
20766: PPUSH
20767: LD_VAR 0 2
20771: PPUSH
20772: CALL_OW 12
20776: ARRAY
20777: ST_TO_ADDR
// SetSide ( un , 0 ) ;
20778: LD_VAR 0 1
20782: PPUSH
20783: LD_INT 0
20785: PPUSH
20786: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
20790: LD_VAR 0 1
20794: PPUSH
20795: LD_OWVAR 3
20799: PUSH
20800: LD_VAR 0 1
20804: DIFF
20805: PPUSH
20806: LD_VAR 0 1
20810: PPUSH
20811: CALL_OW 74
20815: PPUSH
20816: CALL_OW 115
// wait ( 0 0$20 ) ;
20820: LD_INT 700
20822: PPUSH
20823: CALL_OW 67
// SetSide ( un , your_side ) ;
20827: LD_VAR 0 1
20831: PPUSH
20832: LD_OWVAR 2
20836: PPUSH
20837: CALL_OW 235
// end ;
20841: PPOPN 2
20843: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
20844: LD_EXP 40
20848: PUSH
20849: LD_EXP 73
20853: AND
20854: IFFALSE 20960
20856: GO 20858
20858: DISABLE
20859: LD_INT 0
20861: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20862: LD_ADDR_VAR 0 1
20866: PUSH
20867: LD_INT 22
20869: PUSH
20870: LD_OWVAR 2
20874: PUSH
20875: EMPTY
20876: LIST
20877: LIST
20878: PUSH
20879: LD_INT 2
20881: PUSH
20882: LD_INT 30
20884: PUSH
20885: LD_INT 0
20887: PUSH
20888: EMPTY
20889: LIST
20890: LIST
20891: PUSH
20892: LD_INT 30
20894: PUSH
20895: LD_INT 1
20897: PUSH
20898: EMPTY
20899: LIST
20900: LIST
20901: PUSH
20902: EMPTY
20903: LIST
20904: LIST
20905: LIST
20906: PUSH
20907: EMPTY
20908: LIST
20909: LIST
20910: PPUSH
20911: CALL_OW 69
20915: ST_TO_ADDR
// if not depot then
20916: LD_VAR 0 1
20920: NOT
20921: IFFALSE 20925
// exit ;
20923: GO 20960
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
20925: LD_VAR 0 1
20929: PUSH
20930: LD_INT 1
20932: ARRAY
20933: PPUSH
20934: CALL_OW 250
20938: PPUSH
20939: LD_VAR 0 1
20943: PUSH
20944: LD_INT 1
20946: ARRAY
20947: PPUSH
20948: CALL_OW 251
20952: PPUSH
20953: LD_INT 70
20955: PPUSH
20956: CALL_OW 495
// end ;
20960: PPOPN 1
20962: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
20963: LD_EXP 40
20967: PUSH
20968: LD_EXP 74
20972: AND
20973: IFFALSE 21184
20975: GO 20977
20977: DISABLE
20978: LD_INT 0
20980: PPUSH
20981: PPUSH
20982: PPUSH
20983: PPUSH
20984: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20985: LD_ADDR_VAR 0 5
20989: PUSH
20990: LD_INT 22
20992: PUSH
20993: LD_OWVAR 2
20997: PUSH
20998: EMPTY
20999: LIST
21000: LIST
21001: PUSH
21002: LD_INT 21
21004: PUSH
21005: LD_INT 1
21007: PUSH
21008: EMPTY
21009: LIST
21010: LIST
21011: PUSH
21012: EMPTY
21013: LIST
21014: LIST
21015: PPUSH
21016: CALL_OW 69
21020: ST_TO_ADDR
// if not tmp then
21021: LD_VAR 0 5
21025: NOT
21026: IFFALSE 21030
// exit ;
21028: GO 21184
// for i in tmp do
21030: LD_ADDR_VAR 0 1
21034: PUSH
21035: LD_VAR 0 5
21039: PUSH
21040: FOR_IN
21041: IFFALSE 21182
// begin d := rand ( 0 , 5 ) ;
21043: LD_ADDR_VAR 0 4
21047: PUSH
21048: LD_INT 0
21050: PPUSH
21051: LD_INT 5
21053: PPUSH
21054: CALL_OW 12
21058: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
21059: LD_ADDR_VAR 0 2
21063: PUSH
21064: LD_VAR 0 1
21068: PPUSH
21069: CALL_OW 250
21073: PPUSH
21074: LD_VAR 0 4
21078: PPUSH
21079: LD_INT 3
21081: PPUSH
21082: LD_INT 12
21084: PPUSH
21085: CALL_OW 12
21089: PPUSH
21090: CALL_OW 272
21094: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
21095: LD_ADDR_VAR 0 3
21099: PUSH
21100: LD_VAR 0 1
21104: PPUSH
21105: CALL_OW 251
21109: PPUSH
21110: LD_VAR 0 4
21114: PPUSH
21115: LD_INT 3
21117: PPUSH
21118: LD_INT 12
21120: PPUSH
21121: CALL_OW 12
21125: PPUSH
21126: CALL_OW 273
21130: ST_TO_ADDR
// if ValidHex ( x , y ) then
21131: LD_VAR 0 2
21135: PPUSH
21136: LD_VAR 0 3
21140: PPUSH
21141: CALL_OW 488
21145: IFFALSE 21180
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
21147: LD_VAR 0 1
21151: PPUSH
21152: LD_VAR 0 2
21156: PPUSH
21157: LD_VAR 0 3
21161: PPUSH
21162: LD_INT 3
21164: PPUSH
21165: LD_INT 6
21167: PPUSH
21168: CALL_OW 12
21172: PPUSH
21173: LD_INT 1
21175: PPUSH
21176: CALL_OW 483
// end ;
21180: GO 21040
21182: POP
21183: POP
// end ;
21184: PPOPN 5
21186: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
21187: LD_EXP 40
21191: PUSH
21192: LD_EXP 75
21196: AND
21197: IFFALSE 21291
21199: GO 21201
21201: DISABLE
21202: LD_INT 0
21204: PPUSH
21205: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
21206: LD_ADDR_VAR 0 2
21210: PUSH
21211: LD_INT 22
21213: PUSH
21214: LD_OWVAR 2
21218: PUSH
21219: EMPTY
21220: LIST
21221: LIST
21222: PUSH
21223: LD_INT 32
21225: PUSH
21226: LD_INT 1
21228: PUSH
21229: EMPTY
21230: LIST
21231: LIST
21232: PUSH
21233: LD_INT 21
21235: PUSH
21236: LD_INT 2
21238: PUSH
21239: EMPTY
21240: LIST
21241: LIST
21242: PUSH
21243: EMPTY
21244: LIST
21245: LIST
21246: LIST
21247: PPUSH
21248: CALL_OW 69
21252: ST_TO_ADDR
// if not tmp then
21253: LD_VAR 0 2
21257: NOT
21258: IFFALSE 21262
// exit ;
21260: GO 21291
// for i in tmp do
21262: LD_ADDR_VAR 0 1
21266: PUSH
21267: LD_VAR 0 2
21271: PUSH
21272: FOR_IN
21273: IFFALSE 21289
// SetFuel ( i , 0 ) ;
21275: LD_VAR 0 1
21279: PPUSH
21280: LD_INT 0
21282: PPUSH
21283: CALL_OW 240
21287: GO 21272
21289: POP
21290: POP
// end ;
21291: PPOPN 2
21293: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
21294: LD_EXP 40
21298: PUSH
21299: LD_EXP 76
21303: AND
21304: IFFALSE 21370
21306: GO 21308
21308: DISABLE
21309: LD_INT 0
21311: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
21312: LD_ADDR_VAR 0 1
21316: PUSH
21317: LD_INT 22
21319: PUSH
21320: LD_OWVAR 2
21324: PUSH
21325: EMPTY
21326: LIST
21327: LIST
21328: PUSH
21329: LD_INT 30
21331: PUSH
21332: LD_INT 29
21334: PUSH
21335: EMPTY
21336: LIST
21337: LIST
21338: PUSH
21339: EMPTY
21340: LIST
21341: LIST
21342: PPUSH
21343: CALL_OW 69
21347: ST_TO_ADDR
// if not tmp then
21348: LD_VAR 0 1
21352: NOT
21353: IFFALSE 21357
// exit ;
21355: GO 21370
// DestroyUnit ( tmp [ 1 ] ) ;
21357: LD_VAR 0 1
21361: PUSH
21362: LD_INT 1
21364: ARRAY
21365: PPUSH
21366: CALL_OW 65
// end ;
21370: PPOPN 1
21372: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
21373: LD_EXP 40
21377: PUSH
21378: LD_EXP 78
21382: AND
21383: IFFALSE 21512
21385: GO 21387
21387: DISABLE
21388: LD_INT 0
21390: PPUSH
// begin uc_side := 0 ;
21391: LD_ADDR_OWVAR 20
21395: PUSH
21396: LD_INT 0
21398: ST_TO_ADDR
// uc_nation := nation_arabian ;
21399: LD_ADDR_OWVAR 21
21403: PUSH
21404: LD_INT 2
21406: ST_TO_ADDR
// hc_gallery :=  ;
21407: LD_ADDR_OWVAR 33
21411: PUSH
21412: LD_STRING 
21414: ST_TO_ADDR
// hc_name :=  ;
21415: LD_ADDR_OWVAR 26
21419: PUSH
21420: LD_STRING 
21422: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
21423: LD_INT 1
21425: PPUSH
21426: LD_INT 11
21428: PPUSH
21429: LD_INT 10
21431: PPUSH
21432: CALL_OW 380
// un := CreateHuman ;
21436: LD_ADDR_VAR 0 1
21440: PUSH
21441: CALL_OW 44
21445: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
21446: LD_VAR 0 1
21450: PPUSH
21451: LD_INT 1
21453: PPUSH
21454: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
21458: LD_INT 35
21460: PPUSH
21461: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
21465: LD_VAR 0 1
21469: PPUSH
21470: LD_INT 22
21472: PUSH
21473: LD_OWVAR 2
21477: PUSH
21478: EMPTY
21479: LIST
21480: LIST
21481: PPUSH
21482: CALL_OW 69
21486: PPUSH
21487: LD_VAR 0 1
21491: PPUSH
21492: CALL_OW 74
21496: PPUSH
21497: CALL_OW 115
// until IsDead ( un ) ;
21501: LD_VAR 0 1
21505: PPUSH
21506: CALL_OW 301
21510: IFFALSE 21458
// end ;
21512: PPOPN 1
21514: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
21515: LD_EXP 40
21519: PUSH
21520: LD_EXP 80
21524: AND
21525: IFFALSE 21537
21527: GO 21529
21529: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
21530: LD_STRING earthquake(getX(game), 0, 32)
21532: PPUSH
21533: CALL_OW 559
21537: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
21538: LD_EXP 40
21542: PUSH
21543: LD_EXP 81
21547: AND
21548: IFFALSE 21639
21550: GO 21552
21552: DISABLE
21553: LD_INT 0
21555: PPUSH
// begin enable ;
21556: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
21557: LD_ADDR_VAR 0 1
21561: PUSH
21562: LD_INT 22
21564: PUSH
21565: LD_OWVAR 2
21569: PUSH
21570: EMPTY
21571: LIST
21572: LIST
21573: PUSH
21574: LD_INT 21
21576: PUSH
21577: LD_INT 2
21579: PUSH
21580: EMPTY
21581: LIST
21582: LIST
21583: PUSH
21584: LD_INT 33
21586: PUSH
21587: LD_INT 3
21589: PUSH
21590: EMPTY
21591: LIST
21592: LIST
21593: PUSH
21594: EMPTY
21595: LIST
21596: LIST
21597: LIST
21598: PPUSH
21599: CALL_OW 69
21603: ST_TO_ADDR
// if not tmp then
21604: LD_VAR 0 1
21608: NOT
21609: IFFALSE 21613
// exit ;
21611: GO 21639
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
21613: LD_VAR 0 1
21617: PUSH
21618: LD_INT 1
21620: PPUSH
21621: LD_VAR 0 1
21625: PPUSH
21626: CALL_OW 12
21630: ARRAY
21631: PPUSH
21632: LD_INT 1
21634: PPUSH
21635: CALL_OW 234
// end ;
21639: PPOPN 1
21641: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
21642: LD_EXP 40
21646: PUSH
21647: LD_EXP 82
21651: AND
21652: IFFALSE 21793
21654: GO 21656
21656: DISABLE
21657: LD_INT 0
21659: PPUSH
21660: PPUSH
21661: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21662: LD_ADDR_VAR 0 3
21666: PUSH
21667: LD_INT 22
21669: PUSH
21670: LD_OWVAR 2
21674: PUSH
21675: EMPTY
21676: LIST
21677: LIST
21678: PUSH
21679: LD_INT 25
21681: PUSH
21682: LD_INT 1
21684: PUSH
21685: EMPTY
21686: LIST
21687: LIST
21688: PUSH
21689: EMPTY
21690: LIST
21691: LIST
21692: PPUSH
21693: CALL_OW 69
21697: ST_TO_ADDR
// if not tmp then
21698: LD_VAR 0 3
21702: NOT
21703: IFFALSE 21707
// exit ;
21705: GO 21793
// un := tmp [ rand ( 1 , tmp ) ] ;
21707: LD_ADDR_VAR 0 2
21711: PUSH
21712: LD_VAR 0 3
21716: PUSH
21717: LD_INT 1
21719: PPUSH
21720: LD_VAR 0 3
21724: PPUSH
21725: CALL_OW 12
21729: ARRAY
21730: ST_TO_ADDR
// if Crawls ( un ) then
21731: LD_VAR 0 2
21735: PPUSH
21736: CALL_OW 318
21740: IFFALSE 21751
// ComWalk ( un ) ;
21742: LD_VAR 0 2
21746: PPUSH
21747: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
21751: LD_VAR 0 2
21755: PPUSH
21756: LD_INT 9
21758: PPUSH
21759: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
21763: LD_INT 28
21765: PPUSH
21766: LD_OWVAR 2
21770: PPUSH
21771: LD_INT 2
21773: PPUSH
21774: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
21778: LD_INT 29
21780: PPUSH
21781: LD_OWVAR 2
21785: PPUSH
21786: LD_INT 2
21788: PPUSH
21789: CALL_OW 322
// end ;
21793: PPOPN 3
21795: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
21796: LD_EXP 40
21800: PUSH
21801: LD_EXP 83
21805: AND
21806: IFFALSE 21917
21808: GO 21810
21810: DISABLE
21811: LD_INT 0
21813: PPUSH
21814: PPUSH
21815: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21816: LD_ADDR_VAR 0 3
21820: PUSH
21821: LD_INT 22
21823: PUSH
21824: LD_OWVAR 2
21828: PUSH
21829: EMPTY
21830: LIST
21831: LIST
21832: PUSH
21833: LD_INT 25
21835: PUSH
21836: LD_INT 1
21838: PUSH
21839: EMPTY
21840: LIST
21841: LIST
21842: PUSH
21843: EMPTY
21844: LIST
21845: LIST
21846: PPUSH
21847: CALL_OW 69
21851: ST_TO_ADDR
// if not tmp then
21852: LD_VAR 0 3
21856: NOT
21857: IFFALSE 21861
// exit ;
21859: GO 21917
// un := tmp [ rand ( 1 , tmp ) ] ;
21861: LD_ADDR_VAR 0 2
21865: PUSH
21866: LD_VAR 0 3
21870: PUSH
21871: LD_INT 1
21873: PPUSH
21874: LD_VAR 0 3
21878: PPUSH
21879: CALL_OW 12
21883: ARRAY
21884: ST_TO_ADDR
// if Crawls ( un ) then
21885: LD_VAR 0 2
21889: PPUSH
21890: CALL_OW 318
21894: IFFALSE 21905
// ComWalk ( un ) ;
21896: LD_VAR 0 2
21900: PPUSH
21901: CALL_OW 138
// SetClass ( un , class_mortar ) ;
21905: LD_VAR 0 2
21909: PPUSH
21910: LD_INT 8
21912: PPUSH
21913: CALL_OW 336
// end ;
21917: PPOPN 3
21919: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
21920: LD_EXP 40
21924: PUSH
21925: LD_EXP 84
21929: AND
21930: IFFALSE 22074
21932: GO 21934
21934: DISABLE
21935: LD_INT 0
21937: PPUSH
21938: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
21939: LD_ADDR_VAR 0 2
21943: PUSH
21944: LD_INT 22
21946: PUSH
21947: LD_OWVAR 2
21951: PUSH
21952: EMPTY
21953: LIST
21954: LIST
21955: PUSH
21956: LD_INT 21
21958: PUSH
21959: LD_INT 2
21961: PUSH
21962: EMPTY
21963: LIST
21964: LIST
21965: PUSH
21966: LD_INT 2
21968: PUSH
21969: LD_INT 34
21971: PUSH
21972: LD_INT 12
21974: PUSH
21975: EMPTY
21976: LIST
21977: LIST
21978: PUSH
21979: LD_INT 34
21981: PUSH
21982: LD_INT 51
21984: PUSH
21985: EMPTY
21986: LIST
21987: LIST
21988: PUSH
21989: LD_INT 34
21991: PUSH
21992: LD_INT 32
21994: PUSH
21995: EMPTY
21996: LIST
21997: LIST
21998: PUSH
21999: EMPTY
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: PUSH
22005: EMPTY
22006: LIST
22007: LIST
22008: LIST
22009: PPUSH
22010: CALL_OW 69
22014: ST_TO_ADDR
// if not tmp then
22015: LD_VAR 0 2
22019: NOT
22020: IFFALSE 22024
// exit ;
22022: GO 22074
// for i in tmp do
22024: LD_ADDR_VAR 0 1
22028: PUSH
22029: LD_VAR 0 2
22033: PUSH
22034: FOR_IN
22035: IFFALSE 22072
// if GetCargo ( i , mat_artifact ) = 0 then
22037: LD_VAR 0 1
22041: PPUSH
22042: LD_INT 4
22044: PPUSH
22045: CALL_OW 289
22049: PUSH
22050: LD_INT 0
22052: EQUAL
22053: IFFALSE 22070
// SetCargo ( i , mat_siberit , 100 ) ;
22055: LD_VAR 0 1
22059: PPUSH
22060: LD_INT 3
22062: PPUSH
22063: LD_INT 100
22065: PPUSH
22066: CALL_OW 290
22070: GO 22034
22072: POP
22073: POP
// end ;
22074: PPOPN 2
22076: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
22077: LD_EXP 40
22081: PUSH
22082: LD_EXP 85
22086: AND
22087: IFFALSE 22270
22089: GO 22091
22091: DISABLE
22092: LD_INT 0
22094: PPUSH
22095: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
22096: LD_ADDR_VAR 0 2
22100: PUSH
22101: LD_INT 22
22103: PUSH
22104: LD_OWVAR 2
22108: PUSH
22109: EMPTY
22110: LIST
22111: LIST
22112: PPUSH
22113: CALL_OW 69
22117: ST_TO_ADDR
// if not tmp then
22118: LD_VAR 0 2
22122: NOT
22123: IFFALSE 22127
// exit ;
22125: GO 22270
// for i := 1 to 2 do
22127: LD_ADDR_VAR 0 1
22131: PUSH
22132: DOUBLE
22133: LD_INT 1
22135: DEC
22136: ST_TO_ADDR
22137: LD_INT 2
22139: PUSH
22140: FOR_TO
22141: IFFALSE 22268
// begin uc_side := your_side ;
22143: LD_ADDR_OWVAR 20
22147: PUSH
22148: LD_OWVAR 2
22152: ST_TO_ADDR
// uc_nation := nation_american ;
22153: LD_ADDR_OWVAR 21
22157: PUSH
22158: LD_INT 1
22160: ST_TO_ADDR
// vc_chassis := us_morphling ;
22161: LD_ADDR_OWVAR 37
22165: PUSH
22166: LD_INT 5
22168: ST_TO_ADDR
// vc_engine := engine_siberite ;
22169: LD_ADDR_OWVAR 39
22173: PUSH
22174: LD_INT 3
22176: ST_TO_ADDR
// vc_control := control_computer ;
22177: LD_ADDR_OWVAR 38
22181: PUSH
22182: LD_INT 3
22184: ST_TO_ADDR
// vc_weapon := us_double_laser ;
22185: LD_ADDR_OWVAR 40
22189: PUSH
22190: LD_INT 10
22192: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
22193: LD_VAR 0 2
22197: PUSH
22198: LD_INT 1
22200: ARRAY
22201: PPUSH
22202: CALL_OW 310
22206: NOT
22207: IFFALSE 22254
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
22209: CALL_OW 45
22213: PPUSH
22214: LD_VAR 0 2
22218: PUSH
22219: LD_INT 1
22221: ARRAY
22222: PPUSH
22223: CALL_OW 250
22227: PPUSH
22228: LD_VAR 0 2
22232: PUSH
22233: LD_INT 1
22235: ARRAY
22236: PPUSH
22237: CALL_OW 251
22241: PPUSH
22242: LD_INT 12
22244: PPUSH
22245: LD_INT 1
22247: PPUSH
22248: CALL_OW 50
22252: GO 22266
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
22254: CALL_OW 45
22258: PPUSH
22259: LD_INT 1
22261: PPUSH
22262: CALL_OW 51
// end ;
22266: GO 22140
22268: POP
22269: POP
// end ;
22270: PPOPN 2
22272: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
22273: LD_EXP 40
22277: PUSH
22278: LD_EXP 86
22282: AND
22283: IFFALSE 22505
22285: GO 22287
22287: DISABLE
22288: LD_INT 0
22290: PPUSH
22291: PPUSH
22292: PPUSH
22293: PPUSH
22294: PPUSH
22295: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22296: LD_ADDR_VAR 0 6
22300: PUSH
22301: LD_INT 22
22303: PUSH
22304: LD_OWVAR 2
22308: PUSH
22309: EMPTY
22310: LIST
22311: LIST
22312: PUSH
22313: LD_INT 21
22315: PUSH
22316: LD_INT 1
22318: PUSH
22319: EMPTY
22320: LIST
22321: LIST
22322: PUSH
22323: LD_INT 3
22325: PUSH
22326: LD_INT 23
22328: PUSH
22329: LD_INT 0
22331: PUSH
22332: EMPTY
22333: LIST
22334: LIST
22335: PUSH
22336: EMPTY
22337: LIST
22338: LIST
22339: PUSH
22340: EMPTY
22341: LIST
22342: LIST
22343: LIST
22344: PPUSH
22345: CALL_OW 69
22349: ST_TO_ADDR
// if not tmp then
22350: LD_VAR 0 6
22354: NOT
22355: IFFALSE 22359
// exit ;
22357: GO 22505
// s1 := rand ( 1 , 4 ) ;
22359: LD_ADDR_VAR 0 2
22363: PUSH
22364: LD_INT 1
22366: PPUSH
22367: LD_INT 4
22369: PPUSH
22370: CALL_OW 12
22374: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
22375: LD_ADDR_VAR 0 4
22379: PUSH
22380: LD_VAR 0 6
22384: PUSH
22385: LD_INT 1
22387: ARRAY
22388: PPUSH
22389: LD_VAR 0 2
22393: PPUSH
22394: CALL_OW 259
22398: ST_TO_ADDR
// if s1 = 1 then
22399: LD_VAR 0 2
22403: PUSH
22404: LD_INT 1
22406: EQUAL
22407: IFFALSE 22427
// s2 := rand ( 2 , 4 ) else
22409: LD_ADDR_VAR 0 3
22413: PUSH
22414: LD_INT 2
22416: PPUSH
22417: LD_INT 4
22419: PPUSH
22420: CALL_OW 12
22424: ST_TO_ADDR
22425: GO 22435
// s2 := 1 ;
22427: LD_ADDR_VAR 0 3
22431: PUSH
22432: LD_INT 1
22434: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
22435: LD_ADDR_VAR 0 5
22439: PUSH
22440: LD_VAR 0 6
22444: PUSH
22445: LD_INT 1
22447: ARRAY
22448: PPUSH
22449: LD_VAR 0 3
22453: PPUSH
22454: CALL_OW 259
22458: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
22459: LD_VAR 0 6
22463: PUSH
22464: LD_INT 1
22466: ARRAY
22467: PPUSH
22468: LD_VAR 0 2
22472: PPUSH
22473: LD_VAR 0 5
22477: PPUSH
22478: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
22482: LD_VAR 0 6
22486: PUSH
22487: LD_INT 1
22489: ARRAY
22490: PPUSH
22491: LD_VAR 0 3
22495: PPUSH
22496: LD_VAR 0 4
22500: PPUSH
22501: CALL_OW 237
// end ;
22505: PPOPN 6
22507: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
22508: LD_EXP 40
22512: PUSH
22513: LD_EXP 87
22517: AND
22518: IFFALSE 22597
22520: GO 22522
22522: DISABLE
22523: LD_INT 0
22525: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
22526: LD_ADDR_VAR 0 1
22530: PUSH
22531: LD_INT 22
22533: PUSH
22534: LD_OWVAR 2
22538: PUSH
22539: EMPTY
22540: LIST
22541: LIST
22542: PUSH
22543: LD_INT 30
22545: PUSH
22546: LD_INT 3
22548: PUSH
22549: EMPTY
22550: LIST
22551: LIST
22552: PUSH
22553: EMPTY
22554: LIST
22555: LIST
22556: PPUSH
22557: CALL_OW 69
22561: ST_TO_ADDR
// if not tmp then
22562: LD_VAR 0 1
22566: NOT
22567: IFFALSE 22571
// exit ;
22569: GO 22597
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
22571: LD_VAR 0 1
22575: PUSH
22576: LD_INT 1
22578: PPUSH
22579: LD_VAR 0 1
22583: PPUSH
22584: CALL_OW 12
22588: ARRAY
22589: PPUSH
22590: LD_INT 1
22592: PPUSH
22593: CALL_OW 234
// end ;
22597: PPOPN 1
22599: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
22600: LD_EXP 40
22604: PUSH
22605: LD_EXP 88
22609: AND
22610: IFFALSE 22722
22612: GO 22614
22614: DISABLE
22615: LD_INT 0
22617: PPUSH
22618: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
22619: LD_ADDR_VAR 0 2
22623: PUSH
22624: LD_INT 22
22626: PUSH
22627: LD_OWVAR 2
22631: PUSH
22632: EMPTY
22633: LIST
22634: LIST
22635: PUSH
22636: LD_INT 2
22638: PUSH
22639: LD_INT 30
22641: PUSH
22642: LD_INT 27
22644: PUSH
22645: EMPTY
22646: LIST
22647: LIST
22648: PUSH
22649: LD_INT 30
22651: PUSH
22652: LD_INT 26
22654: PUSH
22655: EMPTY
22656: LIST
22657: LIST
22658: PUSH
22659: LD_INT 30
22661: PUSH
22662: LD_INT 28
22664: PUSH
22665: EMPTY
22666: LIST
22667: LIST
22668: PUSH
22669: EMPTY
22670: LIST
22671: LIST
22672: LIST
22673: LIST
22674: PUSH
22675: EMPTY
22676: LIST
22677: LIST
22678: PPUSH
22679: CALL_OW 69
22683: ST_TO_ADDR
// if not tmp then
22684: LD_VAR 0 2
22688: NOT
22689: IFFALSE 22693
// exit ;
22691: GO 22722
// for i in tmp do
22693: LD_ADDR_VAR 0 1
22697: PUSH
22698: LD_VAR 0 2
22702: PUSH
22703: FOR_IN
22704: IFFALSE 22720
// SetLives ( i , 1 ) ;
22706: LD_VAR 0 1
22710: PPUSH
22711: LD_INT 1
22713: PPUSH
22714: CALL_OW 234
22718: GO 22703
22720: POP
22721: POP
// end ;
22722: PPOPN 2
22724: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
22725: LD_EXP 40
22729: PUSH
22730: LD_EXP 89
22734: AND
22735: IFFALSE 23022
22737: GO 22739
22739: DISABLE
22740: LD_INT 0
22742: PPUSH
22743: PPUSH
22744: PPUSH
// begin i := rand ( 1 , 7 ) ;
22745: LD_ADDR_VAR 0 1
22749: PUSH
22750: LD_INT 1
22752: PPUSH
22753: LD_INT 7
22755: PPUSH
22756: CALL_OW 12
22760: ST_TO_ADDR
// case i of 1 :
22761: LD_VAR 0 1
22765: PUSH
22766: LD_INT 1
22768: DOUBLE
22769: EQUAL
22770: IFTRUE 22774
22772: GO 22784
22774: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
22775: LD_STRING earthquake(getX(game), 0, 32)
22777: PPUSH
22778: CALL_OW 559
22782: GO 23022
22784: LD_INT 2
22786: DOUBLE
22787: EQUAL
22788: IFTRUE 22792
22790: GO 22806
22792: POP
// begin ToLua ( displayStucuk(); ) ;
22793: LD_STRING displayStucuk();
22795: PPUSH
22796: CALL_OW 559
// ResetFog ;
22800: CALL_OW 335
// end ; 3 :
22804: GO 23022
22806: LD_INT 3
22808: DOUBLE
22809: EQUAL
22810: IFTRUE 22814
22812: GO 22918
22814: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22815: LD_ADDR_VAR 0 2
22819: PUSH
22820: LD_INT 22
22822: PUSH
22823: LD_OWVAR 2
22827: PUSH
22828: EMPTY
22829: LIST
22830: LIST
22831: PUSH
22832: LD_INT 25
22834: PUSH
22835: LD_INT 1
22837: PUSH
22838: EMPTY
22839: LIST
22840: LIST
22841: PUSH
22842: EMPTY
22843: LIST
22844: LIST
22845: PPUSH
22846: CALL_OW 69
22850: ST_TO_ADDR
// if not tmp then
22851: LD_VAR 0 2
22855: NOT
22856: IFFALSE 22860
// exit ;
22858: GO 23022
// un := tmp [ rand ( 1 , tmp ) ] ;
22860: LD_ADDR_VAR 0 3
22864: PUSH
22865: LD_VAR 0 2
22869: PUSH
22870: LD_INT 1
22872: PPUSH
22873: LD_VAR 0 2
22877: PPUSH
22878: CALL_OW 12
22882: ARRAY
22883: ST_TO_ADDR
// if Crawls ( un ) then
22884: LD_VAR 0 3
22888: PPUSH
22889: CALL_OW 318
22893: IFFALSE 22904
// ComWalk ( un ) ;
22895: LD_VAR 0 3
22899: PPUSH
22900: CALL_OW 138
// SetClass ( un , class_mortar ) ;
22904: LD_VAR 0 3
22908: PPUSH
22909: LD_INT 8
22911: PPUSH
22912: CALL_OW 336
// end ; 4 :
22916: GO 23022
22918: LD_INT 4
22920: DOUBLE
22921: EQUAL
22922: IFTRUE 22926
22924: GO 23000
22926: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
22927: LD_ADDR_VAR 0 2
22931: PUSH
22932: LD_INT 22
22934: PUSH
22935: LD_OWVAR 2
22939: PUSH
22940: EMPTY
22941: LIST
22942: LIST
22943: PUSH
22944: LD_INT 30
22946: PUSH
22947: LD_INT 29
22949: PUSH
22950: EMPTY
22951: LIST
22952: LIST
22953: PUSH
22954: EMPTY
22955: LIST
22956: LIST
22957: PPUSH
22958: CALL_OW 69
22962: ST_TO_ADDR
// if not tmp then
22963: LD_VAR 0 2
22967: NOT
22968: IFFALSE 22972
// exit ;
22970: GO 23022
// CenterNowOnUnits ( tmp [ 1 ] ) ;
22972: LD_VAR 0 2
22976: PUSH
22977: LD_INT 1
22979: ARRAY
22980: PPUSH
22981: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
22985: LD_VAR 0 2
22989: PUSH
22990: LD_INT 1
22992: ARRAY
22993: PPUSH
22994: CALL_OW 65
// end ; 5 .. 7 :
22998: GO 23022
23000: LD_INT 5
23002: DOUBLE
23003: GREATEREQUAL
23004: IFFALSE 23012
23006: LD_INT 7
23008: DOUBLE
23009: LESSEQUAL
23010: IFTRUE 23014
23012: GO 23021
23014: POP
// StreamSibBomb ; end ;
23015: CALL 19259 0 0
23019: GO 23022
23021: POP
// end ;
23022: PPOPN 3
23024: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
23025: LD_EXP 40
23029: PUSH
23030: LD_EXP 90
23034: AND
23035: IFFALSE 23191
23037: GO 23039
23039: DISABLE
23040: LD_INT 0
23042: PPUSH
23043: PPUSH
23044: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
23045: LD_ADDR_VAR 0 2
23049: PUSH
23050: LD_INT 81
23052: PUSH
23053: LD_OWVAR 2
23057: PUSH
23058: EMPTY
23059: LIST
23060: LIST
23061: PUSH
23062: LD_INT 2
23064: PUSH
23065: LD_INT 21
23067: PUSH
23068: LD_INT 1
23070: PUSH
23071: EMPTY
23072: LIST
23073: LIST
23074: PUSH
23075: LD_INT 21
23077: PUSH
23078: LD_INT 2
23080: PUSH
23081: EMPTY
23082: LIST
23083: LIST
23084: PUSH
23085: EMPTY
23086: LIST
23087: LIST
23088: LIST
23089: PUSH
23090: EMPTY
23091: LIST
23092: LIST
23093: PPUSH
23094: CALL_OW 69
23098: ST_TO_ADDR
// if not tmp then
23099: LD_VAR 0 2
23103: NOT
23104: IFFALSE 23108
// exit ;
23106: GO 23191
// p := 0 ;
23108: LD_ADDR_VAR 0 3
23112: PUSH
23113: LD_INT 0
23115: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23116: LD_INT 35
23118: PPUSH
23119: CALL_OW 67
// p := p + 1 ;
23123: LD_ADDR_VAR 0 3
23127: PUSH
23128: LD_VAR 0 3
23132: PUSH
23133: LD_INT 1
23135: PLUS
23136: ST_TO_ADDR
// for i in tmp do
23137: LD_ADDR_VAR 0 1
23141: PUSH
23142: LD_VAR 0 2
23146: PUSH
23147: FOR_IN
23148: IFFALSE 23179
// if GetLives ( i ) < 1000 then
23150: LD_VAR 0 1
23154: PPUSH
23155: CALL_OW 256
23159: PUSH
23160: LD_INT 1000
23162: LESS
23163: IFFALSE 23177
// SetLives ( i , 1000 ) ;
23165: LD_VAR 0 1
23169: PPUSH
23170: LD_INT 1000
23172: PPUSH
23173: CALL_OW 234
23177: GO 23147
23179: POP
23180: POP
// until p > 20 ;
23181: LD_VAR 0 3
23185: PUSH
23186: LD_INT 20
23188: GREATER
23189: IFFALSE 23116
// end ;
23191: PPOPN 3
23193: END
// every 0 0$1 trigger StreamModeActive and sTime do
23194: LD_EXP 40
23198: PUSH
23199: LD_EXP 91
23203: AND
23204: IFFALSE 23239
23206: GO 23208
23208: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
23209: LD_INT 28
23211: PPUSH
23212: LD_OWVAR 2
23216: PPUSH
23217: LD_INT 2
23219: PPUSH
23220: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
23224: LD_INT 30
23226: PPUSH
23227: LD_OWVAR 2
23231: PPUSH
23232: LD_INT 2
23234: PPUSH
23235: CALL_OW 322
// end ;
23239: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
23240: LD_EXP 40
23244: PUSH
23245: LD_EXP 92
23249: AND
23250: IFFALSE 23371
23252: GO 23254
23254: DISABLE
23255: LD_INT 0
23257: PPUSH
23258: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23259: LD_ADDR_VAR 0 2
23263: PUSH
23264: LD_INT 22
23266: PUSH
23267: LD_OWVAR 2
23271: PUSH
23272: EMPTY
23273: LIST
23274: LIST
23275: PUSH
23276: LD_INT 21
23278: PUSH
23279: LD_INT 1
23281: PUSH
23282: EMPTY
23283: LIST
23284: LIST
23285: PUSH
23286: LD_INT 3
23288: PUSH
23289: LD_INT 23
23291: PUSH
23292: LD_INT 0
23294: PUSH
23295: EMPTY
23296: LIST
23297: LIST
23298: PUSH
23299: EMPTY
23300: LIST
23301: LIST
23302: PUSH
23303: EMPTY
23304: LIST
23305: LIST
23306: LIST
23307: PPUSH
23308: CALL_OW 69
23312: ST_TO_ADDR
// if not tmp then
23313: LD_VAR 0 2
23317: NOT
23318: IFFALSE 23322
// exit ;
23320: GO 23371
// for i in tmp do
23322: LD_ADDR_VAR 0 1
23326: PUSH
23327: LD_VAR 0 2
23331: PUSH
23332: FOR_IN
23333: IFFALSE 23369
// begin if Crawls ( i ) then
23335: LD_VAR 0 1
23339: PPUSH
23340: CALL_OW 318
23344: IFFALSE 23355
// ComWalk ( i ) ;
23346: LD_VAR 0 1
23350: PPUSH
23351: CALL_OW 138
// SetClass ( i , 2 ) ;
23355: LD_VAR 0 1
23359: PPUSH
23360: LD_INT 2
23362: PPUSH
23363: CALL_OW 336
// end ;
23367: GO 23332
23369: POP
23370: POP
// end ;
23371: PPOPN 2
23373: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
23374: LD_EXP 40
23378: PUSH
23379: LD_EXP 93
23383: AND
23384: IFFALSE 23672
23386: GO 23388
23388: DISABLE
23389: LD_INT 0
23391: PPUSH
23392: PPUSH
23393: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
23394: LD_OWVAR 2
23398: PPUSH
23399: LD_INT 9
23401: PPUSH
23402: LD_INT 1
23404: PPUSH
23405: LD_INT 1
23407: PPUSH
23408: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
23412: LD_INT 9
23414: PPUSH
23415: LD_OWVAR 2
23419: PPUSH
23420: CALL_OW 343
// uc_side := 9 ;
23424: LD_ADDR_OWVAR 20
23428: PUSH
23429: LD_INT 9
23431: ST_TO_ADDR
// uc_nation := 2 ;
23432: LD_ADDR_OWVAR 21
23436: PUSH
23437: LD_INT 2
23439: ST_TO_ADDR
// hc_name := Dark Warrior ;
23440: LD_ADDR_OWVAR 26
23444: PUSH
23445: LD_STRING Dark Warrior
23447: ST_TO_ADDR
// hc_gallery :=  ;
23448: LD_ADDR_OWVAR 33
23452: PUSH
23453: LD_STRING 
23455: ST_TO_ADDR
// hc_noskilllimit := true ;
23456: LD_ADDR_OWVAR 76
23460: PUSH
23461: LD_INT 1
23463: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
23464: LD_ADDR_OWVAR 31
23468: PUSH
23469: LD_INT 30
23471: PUSH
23472: LD_INT 30
23474: PUSH
23475: LD_INT 30
23477: PUSH
23478: LD_INT 30
23480: PUSH
23481: EMPTY
23482: LIST
23483: LIST
23484: LIST
23485: LIST
23486: ST_TO_ADDR
// un := CreateHuman ;
23487: LD_ADDR_VAR 0 3
23491: PUSH
23492: CALL_OW 44
23496: ST_TO_ADDR
// hc_noskilllimit := false ;
23497: LD_ADDR_OWVAR 76
23501: PUSH
23502: LD_INT 0
23504: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23505: LD_VAR 0 3
23509: PPUSH
23510: LD_INT 1
23512: PPUSH
23513: CALL_OW 51
// ToLua ( playRanger() ) ;
23517: LD_STRING playRanger()
23519: PPUSH
23520: CALL_OW 559
// p := 0 ;
23524: LD_ADDR_VAR 0 2
23528: PUSH
23529: LD_INT 0
23531: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23532: LD_INT 35
23534: PPUSH
23535: CALL_OW 67
// p := p + 1 ;
23539: LD_ADDR_VAR 0 2
23543: PUSH
23544: LD_VAR 0 2
23548: PUSH
23549: LD_INT 1
23551: PLUS
23552: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
23553: LD_VAR 0 3
23557: PPUSH
23558: CALL_OW 256
23562: PUSH
23563: LD_INT 1000
23565: LESS
23566: IFFALSE 23580
// SetLives ( un , 1000 ) ;
23568: LD_VAR 0 3
23572: PPUSH
23573: LD_INT 1000
23575: PPUSH
23576: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
23580: LD_VAR 0 3
23584: PPUSH
23585: LD_INT 81
23587: PUSH
23588: LD_OWVAR 2
23592: PUSH
23593: EMPTY
23594: LIST
23595: LIST
23596: PUSH
23597: LD_INT 91
23599: PUSH
23600: LD_VAR 0 3
23604: PUSH
23605: LD_INT 30
23607: PUSH
23608: EMPTY
23609: LIST
23610: LIST
23611: LIST
23612: PUSH
23613: EMPTY
23614: LIST
23615: LIST
23616: PPUSH
23617: CALL_OW 69
23621: PPUSH
23622: LD_VAR 0 3
23626: PPUSH
23627: CALL_OW 74
23631: PPUSH
23632: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
23636: LD_VAR 0 2
23640: PUSH
23641: LD_INT 80
23643: GREATER
23644: PUSH
23645: LD_VAR 0 3
23649: PPUSH
23650: CALL_OW 301
23654: OR
23655: IFFALSE 23532
// if un then
23657: LD_VAR 0 3
23661: IFFALSE 23672
// RemoveUnit ( un ) ;
23663: LD_VAR 0 3
23667: PPUSH
23668: CALL_OW 64
// end ;
23672: PPOPN 3
23674: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
23675: LD_EXP 94
23679: IFFALSE 23795
23681: GO 23683
23683: DISABLE
23684: LD_INT 0
23686: PPUSH
23687: PPUSH
23688: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
23689: LD_ADDR_VAR 0 2
23693: PUSH
23694: LD_INT 81
23696: PUSH
23697: LD_OWVAR 2
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: PUSH
23706: LD_INT 21
23708: PUSH
23709: LD_INT 1
23711: PUSH
23712: EMPTY
23713: LIST
23714: LIST
23715: PUSH
23716: EMPTY
23717: LIST
23718: LIST
23719: PPUSH
23720: CALL_OW 69
23724: ST_TO_ADDR
// ToLua ( playComputer() ) ;
23725: LD_STRING playComputer()
23727: PPUSH
23728: CALL_OW 559
// if not tmp then
23732: LD_VAR 0 2
23736: NOT
23737: IFFALSE 23741
// exit ;
23739: GO 23795
// for i in tmp do
23741: LD_ADDR_VAR 0 1
23745: PUSH
23746: LD_VAR 0 2
23750: PUSH
23751: FOR_IN
23752: IFFALSE 23793
// for j := 1 to 4 do
23754: LD_ADDR_VAR 0 3
23758: PUSH
23759: DOUBLE
23760: LD_INT 1
23762: DEC
23763: ST_TO_ADDR
23764: LD_INT 4
23766: PUSH
23767: FOR_TO
23768: IFFALSE 23789
// SetSkill ( i , j , 10 ) ;
23770: LD_VAR 0 1
23774: PPUSH
23775: LD_VAR 0 3
23779: PPUSH
23780: LD_INT 10
23782: PPUSH
23783: CALL_OW 237
23787: GO 23767
23789: POP
23790: POP
23791: GO 23751
23793: POP
23794: POP
// end ;
23795: PPOPN 3
23797: END
// every 0 0$1 trigger s30 do var i , tmp ;
23798: LD_EXP 95
23802: IFFALSE 23871
23804: GO 23806
23806: DISABLE
23807: LD_INT 0
23809: PPUSH
23810: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23811: LD_ADDR_VAR 0 2
23815: PUSH
23816: LD_INT 22
23818: PUSH
23819: LD_OWVAR 2
23823: PUSH
23824: EMPTY
23825: LIST
23826: LIST
23827: PPUSH
23828: CALL_OW 69
23832: ST_TO_ADDR
// if not tmp then
23833: LD_VAR 0 2
23837: NOT
23838: IFFALSE 23842
// exit ;
23840: GO 23871
// for i in tmp do
23842: LD_ADDR_VAR 0 1
23846: PUSH
23847: LD_VAR 0 2
23851: PUSH
23852: FOR_IN
23853: IFFALSE 23869
// SetLives ( i , 300 ) ;
23855: LD_VAR 0 1
23859: PPUSH
23860: LD_INT 300
23862: PPUSH
23863: CALL_OW 234
23867: GO 23852
23869: POP
23870: POP
// end ;
23871: PPOPN 2
23873: END
// every 0 0$1 trigger s60 do var i , tmp ;
23874: LD_EXP 96
23878: IFFALSE 23947
23880: GO 23882
23882: DISABLE
23883: LD_INT 0
23885: PPUSH
23886: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23887: LD_ADDR_VAR 0 2
23891: PUSH
23892: LD_INT 22
23894: PUSH
23895: LD_OWVAR 2
23899: PUSH
23900: EMPTY
23901: LIST
23902: LIST
23903: PPUSH
23904: CALL_OW 69
23908: ST_TO_ADDR
// if not tmp then
23909: LD_VAR 0 2
23913: NOT
23914: IFFALSE 23918
// exit ;
23916: GO 23947
// for i in tmp do
23918: LD_ADDR_VAR 0 1
23922: PUSH
23923: LD_VAR 0 2
23927: PUSH
23928: FOR_IN
23929: IFFALSE 23945
// SetLives ( i , 600 ) ;
23931: LD_VAR 0 1
23935: PPUSH
23936: LD_INT 600
23938: PPUSH
23939: CALL_OW 234
23943: GO 23928
23945: POP
23946: POP
// end ;
23947: PPOPN 2
23949: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
23950: LD_INT 0
23952: PPUSH
// case cmd of 301 :
23953: LD_VAR 0 1
23957: PUSH
23958: LD_INT 301
23960: DOUBLE
23961: EQUAL
23962: IFTRUE 23966
23964: GO 23998
23966: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
23967: LD_VAR 0 6
23971: PPUSH
23972: LD_VAR 0 7
23976: PPUSH
23977: LD_VAR 0 8
23981: PPUSH
23982: LD_VAR 0 4
23986: PPUSH
23987: LD_VAR 0 5
23991: PPUSH
23992: CALL 25199 0 5
23996: GO 24119
23998: LD_INT 302
24000: DOUBLE
24001: EQUAL
24002: IFTRUE 24006
24004: GO 24043
24006: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
24007: LD_VAR 0 6
24011: PPUSH
24012: LD_VAR 0 7
24016: PPUSH
24017: LD_VAR 0 8
24021: PPUSH
24022: LD_VAR 0 9
24026: PPUSH
24027: LD_VAR 0 4
24031: PPUSH
24032: LD_VAR 0 5
24036: PPUSH
24037: CALL 25290 0 6
24041: GO 24119
24043: LD_INT 303
24045: DOUBLE
24046: EQUAL
24047: IFTRUE 24051
24049: GO 24088
24051: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
24052: LD_VAR 0 6
24056: PPUSH
24057: LD_VAR 0 7
24061: PPUSH
24062: LD_VAR 0 8
24066: PPUSH
24067: LD_VAR 0 9
24071: PPUSH
24072: LD_VAR 0 4
24076: PPUSH
24077: LD_VAR 0 5
24081: PPUSH
24082: CALL 24124 0 6
24086: GO 24119
24088: LD_INT 304
24090: DOUBLE
24091: EQUAL
24092: IFTRUE 24096
24094: GO 24118
24096: POP
// hHackTeleport ( unit , x , y ) ; end ;
24097: LD_VAR 0 2
24101: PPUSH
24102: LD_VAR 0 4
24106: PPUSH
24107: LD_VAR 0 5
24111: PPUSH
24112: CALL 25883 0 3
24116: GO 24119
24118: POP
// end ;
24119: LD_VAR 0 12
24123: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
24124: LD_INT 0
24126: PPUSH
24127: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
24128: LD_VAR 0 1
24132: PUSH
24133: LD_INT 1
24135: LESS
24136: PUSH
24137: LD_VAR 0 1
24141: PUSH
24142: LD_INT 3
24144: GREATER
24145: OR
24146: PUSH
24147: LD_VAR 0 5
24151: PPUSH
24152: LD_VAR 0 6
24156: PPUSH
24157: CALL_OW 428
24161: OR
24162: IFFALSE 24166
// exit ;
24164: GO 24886
// uc_side := your_side ;
24166: LD_ADDR_OWVAR 20
24170: PUSH
24171: LD_OWVAR 2
24175: ST_TO_ADDR
// uc_nation := nation ;
24176: LD_ADDR_OWVAR 21
24180: PUSH
24181: LD_VAR 0 1
24185: ST_TO_ADDR
// bc_level = 1 ;
24186: LD_ADDR_OWVAR 43
24190: PUSH
24191: LD_INT 1
24193: ST_TO_ADDR
// case btype of 1 :
24194: LD_VAR 0 2
24198: PUSH
24199: LD_INT 1
24201: DOUBLE
24202: EQUAL
24203: IFTRUE 24207
24205: GO 24218
24207: POP
// bc_type := b_depot ; 2 :
24208: LD_ADDR_OWVAR 42
24212: PUSH
24213: LD_INT 0
24215: ST_TO_ADDR
24216: GO 24830
24218: LD_INT 2
24220: DOUBLE
24221: EQUAL
24222: IFTRUE 24226
24224: GO 24237
24226: POP
// bc_type := b_warehouse ; 3 :
24227: LD_ADDR_OWVAR 42
24231: PUSH
24232: LD_INT 1
24234: ST_TO_ADDR
24235: GO 24830
24237: LD_INT 3
24239: DOUBLE
24240: EQUAL
24241: IFTRUE 24245
24243: GO 24256
24245: POP
// bc_type := b_lab ; 4 .. 9 :
24246: LD_ADDR_OWVAR 42
24250: PUSH
24251: LD_INT 6
24253: ST_TO_ADDR
24254: GO 24830
24256: LD_INT 4
24258: DOUBLE
24259: GREATEREQUAL
24260: IFFALSE 24268
24262: LD_INT 9
24264: DOUBLE
24265: LESSEQUAL
24266: IFTRUE 24270
24268: GO 24322
24270: POP
// begin bc_type := b_lab_half ;
24271: LD_ADDR_OWVAR 42
24275: PUSH
24276: LD_INT 7
24278: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
24279: LD_ADDR_OWVAR 44
24283: PUSH
24284: LD_INT 10
24286: PUSH
24287: LD_INT 11
24289: PUSH
24290: LD_INT 12
24292: PUSH
24293: LD_INT 15
24295: PUSH
24296: LD_INT 14
24298: PUSH
24299: LD_INT 13
24301: PUSH
24302: EMPTY
24303: LIST
24304: LIST
24305: LIST
24306: LIST
24307: LIST
24308: LIST
24309: PUSH
24310: LD_VAR 0 2
24314: PUSH
24315: LD_INT 3
24317: MINUS
24318: ARRAY
24319: ST_TO_ADDR
// end ; 10 .. 13 :
24320: GO 24830
24322: LD_INT 10
24324: DOUBLE
24325: GREATEREQUAL
24326: IFFALSE 24334
24328: LD_INT 13
24330: DOUBLE
24331: LESSEQUAL
24332: IFTRUE 24336
24334: GO 24413
24336: POP
// begin bc_type := b_lab_full ;
24337: LD_ADDR_OWVAR 42
24341: PUSH
24342: LD_INT 8
24344: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
24345: LD_ADDR_OWVAR 44
24349: PUSH
24350: LD_INT 10
24352: PUSH
24353: LD_INT 12
24355: PUSH
24356: LD_INT 14
24358: PUSH
24359: LD_INT 13
24361: PUSH
24362: EMPTY
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: PUSH
24368: LD_VAR 0 2
24372: PUSH
24373: LD_INT 9
24375: MINUS
24376: ARRAY
24377: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
24378: LD_ADDR_OWVAR 45
24382: PUSH
24383: LD_INT 11
24385: PUSH
24386: LD_INT 15
24388: PUSH
24389: LD_INT 12
24391: PUSH
24392: LD_INT 15
24394: PUSH
24395: EMPTY
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: PUSH
24401: LD_VAR 0 2
24405: PUSH
24406: LD_INT 9
24408: MINUS
24409: ARRAY
24410: ST_TO_ADDR
// end ; 14 :
24411: GO 24830
24413: LD_INT 14
24415: DOUBLE
24416: EQUAL
24417: IFTRUE 24421
24419: GO 24432
24421: POP
// bc_type := b_workshop ; 15 :
24422: LD_ADDR_OWVAR 42
24426: PUSH
24427: LD_INT 2
24429: ST_TO_ADDR
24430: GO 24830
24432: LD_INT 15
24434: DOUBLE
24435: EQUAL
24436: IFTRUE 24440
24438: GO 24451
24440: POP
// bc_type := b_factory ; 16 :
24441: LD_ADDR_OWVAR 42
24445: PUSH
24446: LD_INT 3
24448: ST_TO_ADDR
24449: GO 24830
24451: LD_INT 16
24453: DOUBLE
24454: EQUAL
24455: IFTRUE 24459
24457: GO 24470
24459: POP
// bc_type := b_ext_gun ; 17 :
24460: LD_ADDR_OWVAR 42
24464: PUSH
24465: LD_INT 17
24467: ST_TO_ADDR
24468: GO 24830
24470: LD_INT 17
24472: DOUBLE
24473: EQUAL
24474: IFTRUE 24478
24476: GO 24506
24478: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
24479: LD_ADDR_OWVAR 42
24483: PUSH
24484: LD_INT 19
24486: PUSH
24487: LD_INT 23
24489: PUSH
24490: LD_INT 19
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: LIST
24497: PUSH
24498: LD_VAR 0 1
24502: ARRAY
24503: ST_TO_ADDR
24504: GO 24830
24506: LD_INT 18
24508: DOUBLE
24509: EQUAL
24510: IFTRUE 24514
24512: GO 24525
24514: POP
// bc_type := b_ext_radar ; 19 :
24515: LD_ADDR_OWVAR 42
24519: PUSH
24520: LD_INT 20
24522: ST_TO_ADDR
24523: GO 24830
24525: LD_INT 19
24527: DOUBLE
24528: EQUAL
24529: IFTRUE 24533
24531: GO 24544
24533: POP
// bc_type := b_ext_radio ; 20 :
24534: LD_ADDR_OWVAR 42
24538: PUSH
24539: LD_INT 22
24541: ST_TO_ADDR
24542: GO 24830
24544: LD_INT 20
24546: DOUBLE
24547: EQUAL
24548: IFTRUE 24552
24550: GO 24563
24552: POP
// bc_type := b_ext_siberium ; 21 :
24553: LD_ADDR_OWVAR 42
24557: PUSH
24558: LD_INT 21
24560: ST_TO_ADDR
24561: GO 24830
24563: LD_INT 21
24565: DOUBLE
24566: EQUAL
24567: IFTRUE 24571
24569: GO 24582
24571: POP
// bc_type := b_ext_computer ; 22 :
24572: LD_ADDR_OWVAR 42
24576: PUSH
24577: LD_INT 24
24579: ST_TO_ADDR
24580: GO 24830
24582: LD_INT 22
24584: DOUBLE
24585: EQUAL
24586: IFTRUE 24590
24588: GO 24601
24590: POP
// bc_type := b_ext_track ; 23 :
24591: LD_ADDR_OWVAR 42
24595: PUSH
24596: LD_INT 16
24598: ST_TO_ADDR
24599: GO 24830
24601: LD_INT 23
24603: DOUBLE
24604: EQUAL
24605: IFTRUE 24609
24607: GO 24620
24609: POP
// bc_type := b_ext_laser ; 24 :
24610: LD_ADDR_OWVAR 42
24614: PUSH
24615: LD_INT 25
24617: ST_TO_ADDR
24618: GO 24830
24620: LD_INT 24
24622: DOUBLE
24623: EQUAL
24624: IFTRUE 24628
24626: GO 24639
24628: POP
// bc_type := b_control_tower ; 25 :
24629: LD_ADDR_OWVAR 42
24633: PUSH
24634: LD_INT 36
24636: ST_TO_ADDR
24637: GO 24830
24639: LD_INT 25
24641: DOUBLE
24642: EQUAL
24643: IFTRUE 24647
24645: GO 24658
24647: POP
// bc_type := b_breastwork ; 26 :
24648: LD_ADDR_OWVAR 42
24652: PUSH
24653: LD_INT 31
24655: ST_TO_ADDR
24656: GO 24830
24658: LD_INT 26
24660: DOUBLE
24661: EQUAL
24662: IFTRUE 24666
24664: GO 24677
24666: POP
// bc_type := b_bunker ; 27 :
24667: LD_ADDR_OWVAR 42
24671: PUSH
24672: LD_INT 32
24674: ST_TO_ADDR
24675: GO 24830
24677: LD_INT 27
24679: DOUBLE
24680: EQUAL
24681: IFTRUE 24685
24683: GO 24696
24685: POP
// bc_type := b_turret ; 28 :
24686: LD_ADDR_OWVAR 42
24690: PUSH
24691: LD_INT 33
24693: ST_TO_ADDR
24694: GO 24830
24696: LD_INT 28
24698: DOUBLE
24699: EQUAL
24700: IFTRUE 24704
24702: GO 24715
24704: POP
// bc_type := b_armoury ; 29 :
24705: LD_ADDR_OWVAR 42
24709: PUSH
24710: LD_INT 4
24712: ST_TO_ADDR
24713: GO 24830
24715: LD_INT 29
24717: DOUBLE
24718: EQUAL
24719: IFTRUE 24723
24721: GO 24734
24723: POP
// bc_type := b_barracks ; 30 :
24724: LD_ADDR_OWVAR 42
24728: PUSH
24729: LD_INT 5
24731: ST_TO_ADDR
24732: GO 24830
24734: LD_INT 30
24736: DOUBLE
24737: EQUAL
24738: IFTRUE 24742
24740: GO 24753
24742: POP
// bc_type := b_solar_power ; 31 :
24743: LD_ADDR_OWVAR 42
24747: PUSH
24748: LD_INT 27
24750: ST_TO_ADDR
24751: GO 24830
24753: LD_INT 31
24755: DOUBLE
24756: EQUAL
24757: IFTRUE 24761
24759: GO 24772
24761: POP
// bc_type := b_oil_power ; 32 :
24762: LD_ADDR_OWVAR 42
24766: PUSH
24767: LD_INT 26
24769: ST_TO_ADDR
24770: GO 24830
24772: LD_INT 32
24774: DOUBLE
24775: EQUAL
24776: IFTRUE 24780
24778: GO 24791
24780: POP
// bc_type := b_siberite_power ; 33 :
24781: LD_ADDR_OWVAR 42
24785: PUSH
24786: LD_INT 28
24788: ST_TO_ADDR
24789: GO 24830
24791: LD_INT 33
24793: DOUBLE
24794: EQUAL
24795: IFTRUE 24799
24797: GO 24810
24799: POP
// bc_type := b_oil_mine ; 34 :
24800: LD_ADDR_OWVAR 42
24804: PUSH
24805: LD_INT 29
24807: ST_TO_ADDR
24808: GO 24830
24810: LD_INT 34
24812: DOUBLE
24813: EQUAL
24814: IFTRUE 24818
24816: GO 24829
24818: POP
// bc_type := b_siberite_mine ; end ;
24819: LD_ADDR_OWVAR 42
24823: PUSH
24824: LD_INT 30
24826: ST_TO_ADDR
24827: GO 24830
24829: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
24830: LD_ADDR_VAR 0 8
24834: PUSH
24835: LD_VAR 0 5
24839: PPUSH
24840: LD_VAR 0 6
24844: PPUSH
24845: LD_VAR 0 3
24849: PPUSH
24850: CALL_OW 47
24854: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
24855: LD_OWVAR 42
24859: PUSH
24860: LD_INT 32
24862: PUSH
24863: LD_INT 33
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: IN
24870: IFFALSE 24886
// PlaceWeaponTurret ( b , weapon ) ;
24872: LD_VAR 0 8
24876: PPUSH
24877: LD_VAR 0 4
24881: PPUSH
24882: CALL_OW 431
// end ;
24886: LD_VAR 0 7
24890: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
24891: LD_INT 0
24893: PPUSH
24894: PPUSH
24895: PPUSH
24896: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24897: LD_ADDR_VAR 0 4
24901: PUSH
24902: LD_INT 22
24904: PUSH
24905: LD_OWVAR 2
24909: PUSH
24910: EMPTY
24911: LIST
24912: LIST
24913: PUSH
24914: LD_INT 2
24916: PUSH
24917: LD_INT 30
24919: PUSH
24920: LD_INT 0
24922: PUSH
24923: EMPTY
24924: LIST
24925: LIST
24926: PUSH
24927: LD_INT 30
24929: PUSH
24930: LD_INT 1
24932: PUSH
24933: EMPTY
24934: LIST
24935: LIST
24936: PUSH
24937: EMPTY
24938: LIST
24939: LIST
24940: LIST
24941: PUSH
24942: EMPTY
24943: LIST
24944: LIST
24945: PPUSH
24946: CALL_OW 69
24950: ST_TO_ADDR
// if not tmp then
24951: LD_VAR 0 4
24955: NOT
24956: IFFALSE 24960
// exit ;
24958: GO 25019
// for i in tmp do
24960: LD_ADDR_VAR 0 2
24964: PUSH
24965: LD_VAR 0 4
24969: PUSH
24970: FOR_IN
24971: IFFALSE 25017
// for j = 1 to 3 do
24973: LD_ADDR_VAR 0 3
24977: PUSH
24978: DOUBLE
24979: LD_INT 1
24981: DEC
24982: ST_TO_ADDR
24983: LD_INT 3
24985: PUSH
24986: FOR_TO
24987: IFFALSE 25013
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
24989: LD_VAR 0 2
24993: PPUSH
24994: CALL_OW 274
24998: PPUSH
24999: LD_VAR 0 3
25003: PPUSH
25004: LD_INT 99999
25006: PPUSH
25007: CALL_OW 277
25011: GO 24986
25013: POP
25014: POP
25015: GO 24970
25017: POP
25018: POP
// end ;
25019: LD_VAR 0 1
25023: RET
// export function hHackSetLevel10 ; var i , j ; begin
25024: LD_INT 0
25026: PPUSH
25027: PPUSH
25028: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25029: LD_ADDR_VAR 0 2
25033: PUSH
25034: LD_INT 21
25036: PUSH
25037: LD_INT 1
25039: PUSH
25040: EMPTY
25041: LIST
25042: LIST
25043: PPUSH
25044: CALL_OW 69
25048: PUSH
25049: FOR_IN
25050: IFFALSE 25102
// if IsSelected ( i ) then
25052: LD_VAR 0 2
25056: PPUSH
25057: CALL_OW 306
25061: IFFALSE 25100
// begin for j := 1 to 4 do
25063: LD_ADDR_VAR 0 3
25067: PUSH
25068: DOUBLE
25069: LD_INT 1
25071: DEC
25072: ST_TO_ADDR
25073: LD_INT 4
25075: PUSH
25076: FOR_TO
25077: IFFALSE 25098
// SetSkill ( i , j , 10 ) ;
25079: LD_VAR 0 2
25083: PPUSH
25084: LD_VAR 0 3
25088: PPUSH
25089: LD_INT 10
25091: PPUSH
25092: CALL_OW 237
25096: GO 25076
25098: POP
25099: POP
// end ;
25100: GO 25049
25102: POP
25103: POP
// end ;
25104: LD_VAR 0 1
25108: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
25109: LD_INT 0
25111: PPUSH
25112: PPUSH
25113: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
25114: LD_ADDR_VAR 0 2
25118: PUSH
25119: LD_INT 22
25121: PUSH
25122: LD_OWVAR 2
25126: PUSH
25127: EMPTY
25128: LIST
25129: LIST
25130: PUSH
25131: LD_INT 21
25133: PUSH
25134: LD_INT 1
25136: PUSH
25137: EMPTY
25138: LIST
25139: LIST
25140: PUSH
25141: EMPTY
25142: LIST
25143: LIST
25144: PPUSH
25145: CALL_OW 69
25149: PUSH
25150: FOR_IN
25151: IFFALSE 25192
// begin for j := 1 to 4 do
25153: LD_ADDR_VAR 0 3
25157: PUSH
25158: DOUBLE
25159: LD_INT 1
25161: DEC
25162: ST_TO_ADDR
25163: LD_INT 4
25165: PUSH
25166: FOR_TO
25167: IFFALSE 25188
// SetSkill ( i , j , 10 ) ;
25169: LD_VAR 0 2
25173: PPUSH
25174: LD_VAR 0 3
25178: PPUSH
25179: LD_INT 10
25181: PPUSH
25182: CALL_OW 237
25186: GO 25166
25188: POP
25189: POP
// end ;
25190: GO 25150
25192: POP
25193: POP
// end ;
25194: LD_VAR 0 1
25198: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
25199: LD_INT 0
25201: PPUSH
// uc_side := your_side ;
25202: LD_ADDR_OWVAR 20
25206: PUSH
25207: LD_OWVAR 2
25211: ST_TO_ADDR
// uc_nation := nation ;
25212: LD_ADDR_OWVAR 21
25216: PUSH
25217: LD_VAR 0 1
25221: ST_TO_ADDR
// InitHc ;
25222: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
25226: LD_INT 0
25228: PPUSH
25229: LD_VAR 0 2
25233: PPUSH
25234: LD_VAR 0 3
25238: PPUSH
25239: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
25243: LD_VAR 0 4
25247: PPUSH
25248: LD_VAR 0 5
25252: PPUSH
25253: CALL_OW 428
25257: PUSH
25258: LD_INT 0
25260: EQUAL
25261: IFFALSE 25285
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
25263: CALL_OW 44
25267: PPUSH
25268: LD_VAR 0 4
25272: PPUSH
25273: LD_VAR 0 5
25277: PPUSH
25278: LD_INT 1
25280: PPUSH
25281: CALL_OW 48
// end ;
25285: LD_VAR 0 6
25289: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
25290: LD_INT 0
25292: PPUSH
25293: PPUSH
// uc_side := your_side ;
25294: LD_ADDR_OWVAR 20
25298: PUSH
25299: LD_OWVAR 2
25303: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
25304: LD_VAR 0 1
25308: PUSH
25309: LD_INT 1
25311: PUSH
25312: LD_INT 2
25314: PUSH
25315: LD_INT 3
25317: PUSH
25318: LD_INT 4
25320: PUSH
25321: LD_INT 5
25323: PUSH
25324: EMPTY
25325: LIST
25326: LIST
25327: LIST
25328: LIST
25329: LIST
25330: IN
25331: IFFALSE 25343
// uc_nation := nation_american else
25333: LD_ADDR_OWVAR 21
25337: PUSH
25338: LD_INT 1
25340: ST_TO_ADDR
25341: GO 25386
// if chassis in [ 11 , 12 , 13 , 14 ] then
25343: LD_VAR 0 1
25347: PUSH
25348: LD_INT 11
25350: PUSH
25351: LD_INT 12
25353: PUSH
25354: LD_INT 13
25356: PUSH
25357: LD_INT 14
25359: PUSH
25360: EMPTY
25361: LIST
25362: LIST
25363: LIST
25364: LIST
25365: IN
25366: IFFALSE 25378
// uc_nation := nation_arabian else
25368: LD_ADDR_OWVAR 21
25372: PUSH
25373: LD_INT 2
25375: ST_TO_ADDR
25376: GO 25386
// uc_nation := nation_russian ;
25378: LD_ADDR_OWVAR 21
25382: PUSH
25383: LD_INT 3
25385: ST_TO_ADDR
// vc_chassis := chassis ;
25386: LD_ADDR_OWVAR 37
25390: PUSH
25391: LD_VAR 0 1
25395: ST_TO_ADDR
// vc_engine := engine ;
25396: LD_ADDR_OWVAR 39
25400: PUSH
25401: LD_VAR 0 2
25405: ST_TO_ADDR
// vc_control := control ;
25406: LD_ADDR_OWVAR 38
25410: PUSH
25411: LD_VAR 0 3
25415: ST_TO_ADDR
// vc_weapon := weapon ;
25416: LD_ADDR_OWVAR 40
25420: PUSH
25421: LD_VAR 0 4
25425: ST_TO_ADDR
// un := CreateVehicle ;
25426: LD_ADDR_VAR 0 8
25430: PUSH
25431: CALL_OW 45
25435: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
25436: LD_VAR 0 8
25440: PPUSH
25441: LD_INT 0
25443: PPUSH
25444: LD_INT 5
25446: PPUSH
25447: CALL_OW 12
25451: PPUSH
25452: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
25456: LD_VAR 0 8
25460: PPUSH
25461: LD_VAR 0 5
25465: PPUSH
25466: LD_VAR 0 6
25470: PPUSH
25471: LD_INT 1
25473: PPUSH
25474: CALL_OW 48
// end ;
25478: LD_VAR 0 7
25482: RET
// export hInvincible ; every 1 do
25483: GO 25485
25485: DISABLE
// hInvincible := [ ] ;
25486: LD_ADDR_EXP 97
25490: PUSH
25491: EMPTY
25492: ST_TO_ADDR
25493: END
// every 10 do var i ;
25494: GO 25496
25496: DISABLE
25497: LD_INT 0
25499: PPUSH
// begin enable ;
25500: ENABLE
// if not hInvincible then
25501: LD_EXP 97
25505: NOT
25506: IFFALSE 25510
// exit ;
25508: GO 25554
// for i in hInvincible do
25510: LD_ADDR_VAR 0 1
25514: PUSH
25515: LD_EXP 97
25519: PUSH
25520: FOR_IN
25521: IFFALSE 25552
// if GetLives ( i ) < 1000 then
25523: LD_VAR 0 1
25527: PPUSH
25528: CALL_OW 256
25532: PUSH
25533: LD_INT 1000
25535: LESS
25536: IFFALSE 25550
// SetLives ( i , 1000 ) ;
25538: LD_VAR 0 1
25542: PPUSH
25543: LD_INT 1000
25545: PPUSH
25546: CALL_OW 234
25550: GO 25520
25552: POP
25553: POP
// end ;
25554: PPOPN 1
25556: END
// export function hHackInvincible ; var i ; begin
25557: LD_INT 0
25559: PPUSH
25560: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
25561: LD_ADDR_VAR 0 2
25565: PUSH
25566: LD_INT 2
25568: PUSH
25569: LD_INT 21
25571: PUSH
25572: LD_INT 1
25574: PUSH
25575: EMPTY
25576: LIST
25577: LIST
25578: PUSH
25579: LD_INT 21
25581: PUSH
25582: LD_INT 2
25584: PUSH
25585: EMPTY
25586: LIST
25587: LIST
25588: PUSH
25589: EMPTY
25590: LIST
25591: LIST
25592: LIST
25593: PPUSH
25594: CALL_OW 69
25598: PUSH
25599: FOR_IN
25600: IFFALSE 25661
// if IsSelected ( i ) then
25602: LD_VAR 0 2
25606: PPUSH
25607: CALL_OW 306
25611: IFFALSE 25659
// begin if i in hInvincible then
25613: LD_VAR 0 2
25617: PUSH
25618: LD_EXP 97
25622: IN
25623: IFFALSE 25643
// hInvincible := hInvincible diff i else
25625: LD_ADDR_EXP 97
25629: PUSH
25630: LD_EXP 97
25634: PUSH
25635: LD_VAR 0 2
25639: DIFF
25640: ST_TO_ADDR
25641: GO 25659
// hInvincible := hInvincible union i ;
25643: LD_ADDR_EXP 97
25647: PUSH
25648: LD_EXP 97
25652: PUSH
25653: LD_VAR 0 2
25657: UNION
25658: ST_TO_ADDR
// end ;
25659: GO 25599
25661: POP
25662: POP
// end ;
25663: LD_VAR 0 1
25667: RET
// export function hHackInvisible ; var i , j ; begin
25668: LD_INT 0
25670: PPUSH
25671: PPUSH
25672: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25673: LD_ADDR_VAR 0 2
25677: PUSH
25678: LD_INT 21
25680: PUSH
25681: LD_INT 1
25683: PUSH
25684: EMPTY
25685: LIST
25686: LIST
25687: PPUSH
25688: CALL_OW 69
25692: PUSH
25693: FOR_IN
25694: IFFALSE 25718
// if IsSelected ( i ) then
25696: LD_VAR 0 2
25700: PPUSH
25701: CALL_OW 306
25705: IFFALSE 25716
// ComForceInvisible ( i ) ;
25707: LD_VAR 0 2
25711: PPUSH
25712: CALL_OW 496
25716: GO 25693
25718: POP
25719: POP
// end ;
25720: LD_VAR 0 1
25724: RET
// export function hHackChangeYourSide ; begin
25725: LD_INT 0
25727: PPUSH
// if your_side = 8 then
25728: LD_OWVAR 2
25732: PUSH
25733: LD_INT 8
25735: EQUAL
25736: IFFALSE 25748
// your_side := 0 else
25738: LD_ADDR_OWVAR 2
25742: PUSH
25743: LD_INT 0
25745: ST_TO_ADDR
25746: GO 25762
// your_side := your_side + 1 ;
25748: LD_ADDR_OWVAR 2
25752: PUSH
25753: LD_OWVAR 2
25757: PUSH
25758: LD_INT 1
25760: PLUS
25761: ST_TO_ADDR
// end ;
25762: LD_VAR 0 1
25766: RET
// export function hHackChangeUnitSide ; var i , j ; begin
25767: LD_INT 0
25769: PPUSH
25770: PPUSH
25771: PPUSH
// for i in all_units do
25772: LD_ADDR_VAR 0 2
25776: PUSH
25777: LD_OWVAR 3
25781: PUSH
25782: FOR_IN
25783: IFFALSE 25861
// if IsSelected ( i ) then
25785: LD_VAR 0 2
25789: PPUSH
25790: CALL_OW 306
25794: IFFALSE 25859
// begin j := GetSide ( i ) ;
25796: LD_ADDR_VAR 0 3
25800: PUSH
25801: LD_VAR 0 2
25805: PPUSH
25806: CALL_OW 255
25810: ST_TO_ADDR
// if j = 8 then
25811: LD_VAR 0 3
25815: PUSH
25816: LD_INT 8
25818: EQUAL
25819: IFFALSE 25831
// j := 0 else
25821: LD_ADDR_VAR 0 3
25825: PUSH
25826: LD_INT 0
25828: ST_TO_ADDR
25829: GO 25845
// j := j + 1 ;
25831: LD_ADDR_VAR 0 3
25835: PUSH
25836: LD_VAR 0 3
25840: PUSH
25841: LD_INT 1
25843: PLUS
25844: ST_TO_ADDR
// SetSide ( i , j ) ;
25845: LD_VAR 0 2
25849: PPUSH
25850: LD_VAR 0 3
25854: PPUSH
25855: CALL_OW 235
// end ;
25859: GO 25782
25861: POP
25862: POP
// end ;
25863: LD_VAR 0 1
25867: RET
// export function hHackFog ; begin
25868: LD_INT 0
25870: PPUSH
// FogOff ( true ) ;
25871: LD_INT 1
25873: PPUSH
25874: CALL_OW 344
// end ;
25878: LD_VAR 0 1
25882: RET
// export function hHackTeleport ( unit , x , y ) ; begin
25883: LD_INT 0
25885: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
25886: LD_VAR 0 1
25890: PPUSH
25891: LD_VAR 0 2
25895: PPUSH
25896: LD_VAR 0 3
25900: PPUSH
25901: LD_INT 1
25903: PPUSH
25904: LD_INT 1
25906: PPUSH
25907: CALL_OW 483
// CenterOnXY ( x , y ) ;
25911: LD_VAR 0 2
25915: PPUSH
25916: LD_VAR 0 3
25920: PPUSH
25921: CALL_OW 84
// end ; end_of_file
25925: LD_VAR 0 4
25929: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
25930: LD_INT 0
25932: PPUSH
25933: PPUSH
25934: PPUSH
25935: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
25936: LD_VAR 0 1
25940: PPUSH
25941: CALL_OW 264
25945: PUSH
25946: LD_EXP 25
25950: EQUAL
25951: IFFALSE 26023
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
25953: LD_INT 68
25955: PPUSH
25956: LD_VAR 0 1
25960: PPUSH
25961: CALL_OW 255
25965: PPUSH
25966: CALL_OW 321
25970: PUSH
25971: LD_INT 2
25973: EQUAL
25974: IFFALSE 25986
// eff := 70 else
25976: LD_ADDR_VAR 0 4
25980: PUSH
25981: LD_INT 70
25983: ST_TO_ADDR
25984: GO 25994
// eff := 30 ;
25986: LD_ADDR_VAR 0 4
25990: PUSH
25991: LD_INT 30
25993: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
25994: LD_VAR 0 1
25998: PPUSH
25999: CALL_OW 250
26003: PPUSH
26004: LD_VAR 0 1
26008: PPUSH
26009: CALL_OW 251
26013: PPUSH
26014: LD_VAR 0 4
26018: PPUSH
26019: CALL_OW 495
// end ; end ;
26023: LD_VAR 0 2
26027: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
26028: LD_INT 0
26030: PPUSH
// end ;
26031: LD_VAR 0 4
26035: RET
// export function SOS_Command ( cmd ) ; begin
26036: LD_INT 0
26038: PPUSH
// end ;
26039: LD_VAR 0 2
26043: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
26044: LD_INT 0
26046: PPUSH
// end ;
26047: LD_VAR 0 6
26051: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
26052: LD_INT 0
26054: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
26055: LD_VAR 0 1
26059: PUSH
26060: LD_INT 250
26062: EQUAL
26063: PUSH
26064: LD_VAR 0 2
26068: PPUSH
26069: CALL_OW 264
26073: PUSH
26074: LD_EXP 28
26078: EQUAL
26079: AND
26080: IFFALSE 26101
// MinerPlaceMine ( unit , x , y ) ;
26082: LD_VAR 0 2
26086: PPUSH
26087: LD_VAR 0 4
26091: PPUSH
26092: LD_VAR 0 5
26096: PPUSH
26097: CALL 28450 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
26101: LD_VAR 0 1
26105: PUSH
26106: LD_INT 251
26108: EQUAL
26109: PUSH
26110: LD_VAR 0 2
26114: PPUSH
26115: CALL_OW 264
26119: PUSH
26120: LD_EXP 28
26124: EQUAL
26125: AND
26126: IFFALSE 26147
// MinerDetonateMine ( unit , x , y ) ;
26128: LD_VAR 0 2
26132: PPUSH
26133: LD_VAR 0 4
26137: PPUSH
26138: LD_VAR 0 5
26142: PPUSH
26143: CALL 28727 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
26147: LD_VAR 0 1
26151: PUSH
26152: LD_INT 252
26154: EQUAL
26155: PUSH
26156: LD_VAR 0 2
26160: PPUSH
26161: CALL_OW 264
26165: PUSH
26166: LD_EXP 28
26170: EQUAL
26171: AND
26172: IFFALSE 26193
// MinerCreateMinefield ( unit , x , y ) ;
26174: LD_VAR 0 2
26178: PPUSH
26179: LD_VAR 0 4
26183: PPUSH
26184: LD_VAR 0 5
26188: PPUSH
26189: CALL 29144 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
26193: LD_VAR 0 1
26197: PUSH
26198: LD_INT 253
26200: EQUAL
26201: PUSH
26202: LD_VAR 0 2
26206: PPUSH
26207: CALL_OW 257
26211: PUSH
26212: LD_INT 5
26214: EQUAL
26215: AND
26216: IFFALSE 26237
// ComBinocular ( unit , x , y ) ;
26218: LD_VAR 0 2
26222: PPUSH
26223: LD_VAR 0 4
26227: PPUSH
26228: LD_VAR 0 5
26232: PPUSH
26233: CALL 29515 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
26237: LD_VAR 0 1
26241: PUSH
26242: LD_INT 254
26244: EQUAL
26245: PUSH
26246: LD_VAR 0 2
26250: PPUSH
26251: CALL_OW 264
26255: PUSH
26256: LD_EXP 23
26260: EQUAL
26261: AND
26262: PUSH
26263: LD_VAR 0 3
26267: PPUSH
26268: CALL_OW 263
26272: PUSH
26273: LD_INT 3
26275: EQUAL
26276: AND
26277: IFFALSE 26293
// HackDestroyVehicle ( unit , selectedUnit ) ;
26279: LD_VAR 0 2
26283: PPUSH
26284: LD_VAR 0 3
26288: PPUSH
26289: CALL 27810 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
26293: LD_VAR 0 1
26297: PUSH
26298: LD_INT 255
26300: EQUAL
26301: PUSH
26302: LD_VAR 0 2
26306: PPUSH
26307: CALL_OW 264
26311: PUSH
26312: LD_INT 14
26314: PUSH
26315: LD_INT 53
26317: PUSH
26318: EMPTY
26319: LIST
26320: LIST
26321: IN
26322: AND
26323: PUSH
26324: LD_VAR 0 4
26328: PPUSH
26329: LD_VAR 0 5
26333: PPUSH
26334: CALL_OW 488
26338: AND
26339: IFFALSE 26363
// CutTreeXYR ( unit , x , y , 12 ) ;
26341: LD_VAR 0 2
26345: PPUSH
26346: LD_VAR 0 4
26350: PPUSH
26351: LD_VAR 0 5
26355: PPUSH
26356: LD_INT 12
26358: PPUSH
26359: CALL 26376 0 4
// end ;
26363: LD_VAR 0 6
26367: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
26368: LD_INT 0
26370: PPUSH
// end ;
26371: LD_VAR 0 4
26375: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
26376: LD_INT 0
26378: PPUSH
26379: PPUSH
26380: PPUSH
26381: PPUSH
26382: PPUSH
26383: PPUSH
26384: PPUSH
26385: PPUSH
26386: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
26387: LD_VAR 0 1
26391: NOT
26392: PUSH
26393: LD_VAR 0 2
26397: PPUSH
26398: LD_VAR 0 3
26402: PPUSH
26403: CALL_OW 488
26407: NOT
26408: OR
26409: PUSH
26410: LD_VAR 0 4
26414: NOT
26415: OR
26416: IFFALSE 26420
// exit ;
26418: GO 26760
// list := [ ] ;
26420: LD_ADDR_VAR 0 13
26424: PUSH
26425: EMPTY
26426: ST_TO_ADDR
// if x - r < 0 then
26427: LD_VAR 0 2
26431: PUSH
26432: LD_VAR 0 4
26436: MINUS
26437: PUSH
26438: LD_INT 0
26440: LESS
26441: IFFALSE 26453
// min_x := 0 else
26443: LD_ADDR_VAR 0 7
26447: PUSH
26448: LD_INT 0
26450: ST_TO_ADDR
26451: GO 26469
// min_x := x - r ;
26453: LD_ADDR_VAR 0 7
26457: PUSH
26458: LD_VAR 0 2
26462: PUSH
26463: LD_VAR 0 4
26467: MINUS
26468: ST_TO_ADDR
// if y - r < 0 then
26469: LD_VAR 0 3
26473: PUSH
26474: LD_VAR 0 4
26478: MINUS
26479: PUSH
26480: LD_INT 0
26482: LESS
26483: IFFALSE 26495
// min_y := 0 else
26485: LD_ADDR_VAR 0 8
26489: PUSH
26490: LD_INT 0
26492: ST_TO_ADDR
26493: GO 26511
// min_y := y - r ;
26495: LD_ADDR_VAR 0 8
26499: PUSH
26500: LD_VAR 0 3
26504: PUSH
26505: LD_VAR 0 4
26509: MINUS
26510: ST_TO_ADDR
// max_x := x + r ;
26511: LD_ADDR_VAR 0 9
26515: PUSH
26516: LD_VAR 0 2
26520: PUSH
26521: LD_VAR 0 4
26525: PLUS
26526: ST_TO_ADDR
// max_y := y + r ;
26527: LD_ADDR_VAR 0 10
26531: PUSH
26532: LD_VAR 0 3
26536: PUSH
26537: LD_VAR 0 4
26541: PLUS
26542: ST_TO_ADDR
// for _x = min_x to max_x do
26543: LD_ADDR_VAR 0 11
26547: PUSH
26548: DOUBLE
26549: LD_VAR 0 7
26553: DEC
26554: ST_TO_ADDR
26555: LD_VAR 0 9
26559: PUSH
26560: FOR_TO
26561: IFFALSE 26678
// for _y = min_y to max_y do
26563: LD_ADDR_VAR 0 12
26567: PUSH
26568: DOUBLE
26569: LD_VAR 0 8
26573: DEC
26574: ST_TO_ADDR
26575: LD_VAR 0 10
26579: PUSH
26580: FOR_TO
26581: IFFALSE 26674
// begin if not ValidHex ( _x , _y ) then
26583: LD_VAR 0 11
26587: PPUSH
26588: LD_VAR 0 12
26592: PPUSH
26593: CALL_OW 488
26597: NOT
26598: IFFALSE 26602
// continue ;
26600: GO 26580
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
26602: LD_VAR 0 11
26606: PPUSH
26607: LD_VAR 0 12
26611: PPUSH
26612: CALL_OW 351
26616: PUSH
26617: LD_VAR 0 11
26621: PPUSH
26622: LD_VAR 0 12
26626: PPUSH
26627: CALL_OW 554
26631: AND
26632: IFFALSE 26672
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
26634: LD_ADDR_VAR 0 13
26638: PUSH
26639: LD_VAR 0 13
26643: PPUSH
26644: LD_VAR 0 13
26648: PUSH
26649: LD_INT 1
26651: PLUS
26652: PPUSH
26653: LD_VAR 0 11
26657: PUSH
26658: LD_VAR 0 12
26662: PUSH
26663: EMPTY
26664: LIST
26665: LIST
26666: PPUSH
26667: CALL_OW 2
26671: ST_TO_ADDR
// end ;
26672: GO 26580
26674: POP
26675: POP
26676: GO 26560
26678: POP
26679: POP
// if not list then
26680: LD_VAR 0 13
26684: NOT
26685: IFFALSE 26689
// exit ;
26687: GO 26760
// for i in list do
26689: LD_ADDR_VAR 0 6
26693: PUSH
26694: LD_VAR 0 13
26698: PUSH
26699: FOR_IN
26700: IFFALSE 26758
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
26702: LD_VAR 0 1
26706: PPUSH
26707: LD_STRING M
26709: PUSH
26710: LD_VAR 0 6
26714: PUSH
26715: LD_INT 1
26717: ARRAY
26718: PUSH
26719: LD_VAR 0 6
26723: PUSH
26724: LD_INT 2
26726: ARRAY
26727: PUSH
26728: LD_INT 0
26730: PUSH
26731: LD_INT 0
26733: PUSH
26734: LD_INT 0
26736: PUSH
26737: LD_INT 0
26739: PUSH
26740: EMPTY
26741: LIST
26742: LIST
26743: LIST
26744: LIST
26745: LIST
26746: LIST
26747: LIST
26748: PUSH
26749: EMPTY
26750: LIST
26751: PPUSH
26752: CALL_OW 447
26756: GO 26699
26758: POP
26759: POP
// end ;
26760: LD_VAR 0 5
26764: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
26765: LD_EXP 100
26769: NOT
26770: IFFALSE 26820
26772: GO 26774
26774: DISABLE
// begin initHack := true ;
26775: LD_ADDR_EXP 100
26779: PUSH
26780: LD_INT 1
26782: ST_TO_ADDR
// hackTanks := [ ] ;
26783: LD_ADDR_EXP 101
26787: PUSH
26788: EMPTY
26789: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
26790: LD_ADDR_EXP 102
26794: PUSH
26795: EMPTY
26796: ST_TO_ADDR
// hackLimit := 3 ;
26797: LD_ADDR_EXP 103
26801: PUSH
26802: LD_INT 3
26804: ST_TO_ADDR
// hackDist := 12 ;
26805: LD_ADDR_EXP 104
26809: PUSH
26810: LD_INT 12
26812: ST_TO_ADDR
// hackCounter := [ ] ;
26813: LD_ADDR_EXP 105
26817: PUSH
26818: EMPTY
26819: ST_TO_ADDR
// end ;
26820: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
26821: LD_EXP 100
26825: PUSH
26826: LD_INT 34
26828: PUSH
26829: LD_EXP 23
26833: PUSH
26834: EMPTY
26835: LIST
26836: LIST
26837: PPUSH
26838: CALL_OW 69
26842: AND
26843: IFFALSE 27098
26845: GO 26847
26847: DISABLE
26848: LD_INT 0
26850: PPUSH
26851: PPUSH
// begin enable ;
26852: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
26853: LD_ADDR_VAR 0 1
26857: PUSH
26858: LD_INT 34
26860: PUSH
26861: LD_EXP 23
26865: PUSH
26866: EMPTY
26867: LIST
26868: LIST
26869: PPUSH
26870: CALL_OW 69
26874: PUSH
26875: FOR_IN
26876: IFFALSE 27096
// begin if not i in hackTanks then
26878: LD_VAR 0 1
26882: PUSH
26883: LD_EXP 101
26887: IN
26888: NOT
26889: IFFALSE 26972
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
26891: LD_ADDR_EXP 101
26895: PUSH
26896: LD_EXP 101
26900: PPUSH
26901: LD_EXP 101
26905: PUSH
26906: LD_INT 1
26908: PLUS
26909: PPUSH
26910: LD_VAR 0 1
26914: PPUSH
26915: CALL_OW 1
26919: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
26920: LD_ADDR_EXP 102
26924: PUSH
26925: LD_EXP 102
26929: PPUSH
26930: LD_EXP 102
26934: PUSH
26935: LD_INT 1
26937: PLUS
26938: PPUSH
26939: EMPTY
26940: PPUSH
26941: CALL_OW 1
26945: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
26946: LD_ADDR_EXP 105
26950: PUSH
26951: LD_EXP 105
26955: PPUSH
26956: LD_EXP 105
26960: PUSH
26961: LD_INT 1
26963: PLUS
26964: PPUSH
26965: EMPTY
26966: PPUSH
26967: CALL_OW 1
26971: ST_TO_ADDR
// end ; if not IsOk ( i ) then
26972: LD_VAR 0 1
26976: PPUSH
26977: CALL_OW 302
26981: NOT
26982: IFFALSE 26995
// begin HackUnlinkAll ( i ) ;
26984: LD_VAR 0 1
26988: PPUSH
26989: CALL 27101 0 1
// continue ;
26993: GO 26875
// end ; HackCheckCapturedStatus ( i ) ;
26995: LD_VAR 0 1
26999: PPUSH
27000: CALL 27544 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
27004: LD_ADDR_VAR 0 2
27008: PUSH
27009: LD_INT 81
27011: PUSH
27012: LD_VAR 0 1
27016: PPUSH
27017: CALL_OW 255
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: PUSH
27026: LD_INT 33
27028: PUSH
27029: LD_INT 3
27031: PUSH
27032: EMPTY
27033: LIST
27034: LIST
27035: PUSH
27036: LD_INT 91
27038: PUSH
27039: LD_VAR 0 1
27043: PUSH
27044: LD_EXP 104
27048: PUSH
27049: EMPTY
27050: LIST
27051: LIST
27052: LIST
27053: PUSH
27054: LD_INT 50
27056: PUSH
27057: EMPTY
27058: LIST
27059: PUSH
27060: EMPTY
27061: LIST
27062: LIST
27063: LIST
27064: LIST
27065: PPUSH
27066: CALL_OW 69
27070: ST_TO_ADDR
// if not tmp then
27071: LD_VAR 0 2
27075: NOT
27076: IFFALSE 27080
// continue ;
27078: GO 26875
// HackLink ( i , tmp ) ;
27080: LD_VAR 0 1
27084: PPUSH
27085: LD_VAR 0 2
27089: PPUSH
27090: CALL 27237 0 2
// end ;
27094: GO 26875
27096: POP
27097: POP
// end ;
27098: PPOPN 2
27100: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
27101: LD_INT 0
27103: PPUSH
27104: PPUSH
27105: PPUSH
// if not hack in hackTanks then
27106: LD_VAR 0 1
27110: PUSH
27111: LD_EXP 101
27115: IN
27116: NOT
27117: IFFALSE 27121
// exit ;
27119: GO 27232
// index := GetElementIndex ( hackTanks , hack ) ;
27121: LD_ADDR_VAR 0 4
27125: PUSH
27126: LD_EXP 101
27130: PPUSH
27131: LD_VAR 0 1
27135: PPUSH
27136: CALL 34706 0 2
27140: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
27141: LD_EXP 102
27145: PUSH
27146: LD_VAR 0 4
27150: ARRAY
27151: IFFALSE 27232
// begin for i in hackTanksCaptured [ index ] do
27153: LD_ADDR_VAR 0 3
27157: PUSH
27158: LD_EXP 102
27162: PUSH
27163: LD_VAR 0 4
27167: ARRAY
27168: PUSH
27169: FOR_IN
27170: IFFALSE 27196
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
27172: LD_VAR 0 3
27176: PUSH
27177: LD_INT 1
27179: ARRAY
27180: PPUSH
27181: LD_VAR 0 3
27185: PUSH
27186: LD_INT 2
27188: ARRAY
27189: PPUSH
27190: CALL_OW 235
27194: GO 27169
27196: POP
27197: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
27198: LD_ADDR_EXP 102
27202: PUSH
27203: LD_EXP 102
27207: PPUSH
27208: LD_VAR 0 4
27212: PPUSH
27213: EMPTY
27214: PPUSH
27215: CALL_OW 1
27219: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
27220: LD_VAR 0 1
27224: PPUSH
27225: LD_INT 0
27227: PPUSH
27228: CALL_OW 505
// end ; end ;
27232: LD_VAR 0 2
27236: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
27237: LD_INT 0
27239: PPUSH
27240: PPUSH
27241: PPUSH
// if not hack in hackTanks or not vehicles then
27242: LD_VAR 0 1
27246: PUSH
27247: LD_EXP 101
27251: IN
27252: NOT
27253: PUSH
27254: LD_VAR 0 2
27258: NOT
27259: OR
27260: IFFALSE 27264
// exit ;
27262: GO 27539
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
27264: LD_ADDR_VAR 0 2
27268: PUSH
27269: LD_VAR 0 1
27273: PPUSH
27274: LD_VAR 0 2
27278: PPUSH
27279: LD_INT 1
27281: PPUSH
27282: LD_INT 1
27284: PPUSH
27285: CALL 35356 0 4
27289: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
27290: LD_ADDR_VAR 0 5
27294: PUSH
27295: LD_EXP 101
27299: PPUSH
27300: LD_VAR 0 1
27304: PPUSH
27305: CALL 34706 0 2
27309: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
27310: LD_EXP 102
27314: PUSH
27315: LD_VAR 0 5
27319: ARRAY
27320: PUSH
27321: LD_EXP 103
27325: LESS
27326: IFFALSE 27515
// begin for i := 1 to vehicles do
27328: LD_ADDR_VAR 0 4
27332: PUSH
27333: DOUBLE
27334: LD_INT 1
27336: DEC
27337: ST_TO_ADDR
27338: LD_VAR 0 2
27342: PUSH
27343: FOR_TO
27344: IFFALSE 27513
// begin if hackTanksCaptured [ index ] = hackLimit then
27346: LD_EXP 102
27350: PUSH
27351: LD_VAR 0 5
27355: ARRAY
27356: PUSH
27357: LD_EXP 103
27361: EQUAL
27362: IFFALSE 27366
// break ;
27364: GO 27513
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
27366: LD_ADDR_EXP 105
27370: PUSH
27371: LD_EXP 105
27375: PPUSH
27376: LD_VAR 0 5
27380: PPUSH
27381: LD_EXP 105
27385: PUSH
27386: LD_VAR 0 5
27390: ARRAY
27391: PUSH
27392: LD_INT 1
27394: PLUS
27395: PPUSH
27396: CALL_OW 1
27400: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
27401: LD_ADDR_EXP 102
27405: PUSH
27406: LD_EXP 102
27410: PPUSH
27411: LD_VAR 0 5
27415: PUSH
27416: LD_EXP 102
27420: PUSH
27421: LD_VAR 0 5
27425: ARRAY
27426: PUSH
27427: LD_INT 1
27429: PLUS
27430: PUSH
27431: EMPTY
27432: LIST
27433: LIST
27434: PPUSH
27435: LD_VAR 0 2
27439: PUSH
27440: LD_VAR 0 4
27444: ARRAY
27445: PUSH
27446: LD_VAR 0 2
27450: PUSH
27451: LD_VAR 0 4
27455: ARRAY
27456: PPUSH
27457: CALL_OW 255
27461: PUSH
27462: EMPTY
27463: LIST
27464: LIST
27465: PPUSH
27466: CALL 34921 0 3
27470: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
27471: LD_VAR 0 2
27475: PUSH
27476: LD_VAR 0 4
27480: ARRAY
27481: PPUSH
27482: LD_VAR 0 1
27486: PPUSH
27487: CALL_OW 255
27491: PPUSH
27492: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
27496: LD_VAR 0 2
27500: PUSH
27501: LD_VAR 0 4
27505: ARRAY
27506: PPUSH
27507: CALL_OW 141
// end ;
27511: GO 27343
27513: POP
27514: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27515: LD_VAR 0 1
27519: PPUSH
27520: LD_EXP 102
27524: PUSH
27525: LD_VAR 0 5
27529: ARRAY
27530: PUSH
27531: LD_INT 0
27533: PLUS
27534: PPUSH
27535: CALL_OW 505
// end ;
27539: LD_VAR 0 3
27543: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
27544: LD_INT 0
27546: PPUSH
27547: PPUSH
27548: PPUSH
27549: PPUSH
// if not hack in hackTanks then
27550: LD_VAR 0 1
27554: PUSH
27555: LD_EXP 101
27559: IN
27560: NOT
27561: IFFALSE 27565
// exit ;
27563: GO 27805
// index := GetElementIndex ( hackTanks , hack ) ;
27565: LD_ADDR_VAR 0 4
27569: PUSH
27570: LD_EXP 101
27574: PPUSH
27575: LD_VAR 0 1
27579: PPUSH
27580: CALL 34706 0 2
27584: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
27585: LD_ADDR_VAR 0 3
27589: PUSH
27590: DOUBLE
27591: LD_EXP 102
27595: PUSH
27596: LD_VAR 0 4
27600: ARRAY
27601: INC
27602: ST_TO_ADDR
27603: LD_INT 1
27605: PUSH
27606: FOR_DOWNTO
27607: IFFALSE 27779
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
27609: LD_ADDR_VAR 0 5
27613: PUSH
27614: LD_EXP 102
27618: PUSH
27619: LD_VAR 0 4
27623: ARRAY
27624: PUSH
27625: LD_VAR 0 3
27629: ARRAY
27630: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
27631: LD_VAR 0 5
27635: PUSH
27636: LD_INT 1
27638: ARRAY
27639: PPUSH
27640: CALL_OW 302
27644: NOT
27645: PUSH
27646: LD_VAR 0 5
27650: PUSH
27651: LD_INT 1
27653: ARRAY
27654: PPUSH
27655: CALL_OW 255
27659: PUSH
27660: LD_VAR 0 1
27664: PPUSH
27665: CALL_OW 255
27669: NONEQUAL
27670: OR
27671: IFFALSE 27777
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
27673: LD_VAR 0 5
27677: PUSH
27678: LD_INT 1
27680: ARRAY
27681: PPUSH
27682: CALL_OW 305
27686: PUSH
27687: LD_VAR 0 5
27691: PUSH
27692: LD_INT 1
27694: ARRAY
27695: PPUSH
27696: CALL_OW 255
27700: PUSH
27701: LD_VAR 0 1
27705: PPUSH
27706: CALL_OW 255
27710: EQUAL
27711: AND
27712: IFFALSE 27736
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
27714: LD_VAR 0 5
27718: PUSH
27719: LD_INT 1
27721: ARRAY
27722: PPUSH
27723: LD_VAR 0 5
27727: PUSH
27728: LD_INT 2
27730: ARRAY
27731: PPUSH
27732: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
27736: LD_ADDR_EXP 102
27740: PUSH
27741: LD_EXP 102
27745: PPUSH
27746: LD_VAR 0 4
27750: PPUSH
27751: LD_EXP 102
27755: PUSH
27756: LD_VAR 0 4
27760: ARRAY
27761: PPUSH
27762: LD_VAR 0 3
27766: PPUSH
27767: CALL_OW 3
27771: PPUSH
27772: CALL_OW 1
27776: ST_TO_ADDR
// end ; end ;
27777: GO 27606
27779: POP
27780: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
27781: LD_VAR 0 1
27785: PPUSH
27786: LD_EXP 102
27790: PUSH
27791: LD_VAR 0 4
27795: ARRAY
27796: PUSH
27797: LD_INT 0
27799: PLUS
27800: PPUSH
27801: CALL_OW 505
// end ;
27805: LD_VAR 0 2
27809: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
27810: LD_INT 0
27812: PPUSH
27813: PPUSH
27814: PPUSH
27815: PPUSH
// if not hack in hackTanks then
27816: LD_VAR 0 1
27820: PUSH
27821: LD_EXP 101
27825: IN
27826: NOT
27827: IFFALSE 27831
// exit ;
27829: GO 27916
// index := GetElementIndex ( hackTanks , hack ) ;
27831: LD_ADDR_VAR 0 5
27835: PUSH
27836: LD_EXP 101
27840: PPUSH
27841: LD_VAR 0 1
27845: PPUSH
27846: CALL 34706 0 2
27850: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
27851: LD_ADDR_VAR 0 4
27855: PUSH
27856: DOUBLE
27857: LD_INT 1
27859: DEC
27860: ST_TO_ADDR
27861: LD_EXP 102
27865: PUSH
27866: LD_VAR 0 5
27870: ARRAY
27871: PUSH
27872: FOR_TO
27873: IFFALSE 27914
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
27875: LD_EXP 102
27879: PUSH
27880: LD_VAR 0 5
27884: ARRAY
27885: PUSH
27886: LD_VAR 0 4
27890: ARRAY
27891: PUSH
27892: LD_INT 1
27894: ARRAY
27895: PUSH
27896: LD_VAR 0 2
27900: EQUAL
27901: IFFALSE 27912
// KillUnit ( vehicle ) ;
27903: LD_VAR 0 2
27907: PPUSH
27908: CALL_OW 66
27912: GO 27872
27914: POP
27915: POP
// end ;
27916: LD_VAR 0 3
27920: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
27921: LD_EXP 106
27925: NOT
27926: IFFALSE 27961
27928: GO 27930
27930: DISABLE
// begin initMiner := true ;
27931: LD_ADDR_EXP 106
27935: PUSH
27936: LD_INT 1
27938: ST_TO_ADDR
// minersList := [ ] ;
27939: LD_ADDR_EXP 107
27943: PUSH
27944: EMPTY
27945: ST_TO_ADDR
// minerMinesList := [ ] ;
27946: LD_ADDR_EXP 108
27950: PUSH
27951: EMPTY
27952: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
27953: LD_ADDR_EXP 109
27957: PUSH
27958: LD_INT 5
27960: ST_TO_ADDR
// end ;
27961: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
27962: LD_EXP 106
27966: PUSH
27967: LD_INT 34
27969: PUSH
27970: LD_EXP 28
27974: PUSH
27975: EMPTY
27976: LIST
27977: LIST
27978: PPUSH
27979: CALL_OW 69
27983: AND
27984: IFFALSE 28447
27986: GO 27988
27988: DISABLE
27989: LD_INT 0
27991: PPUSH
27992: PPUSH
27993: PPUSH
27994: PPUSH
// begin enable ;
27995: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
27996: LD_ADDR_VAR 0 1
28000: PUSH
28001: LD_INT 34
28003: PUSH
28004: LD_EXP 28
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: PPUSH
28013: CALL_OW 69
28017: PUSH
28018: FOR_IN
28019: IFFALSE 28091
// begin if not i in minersList then
28021: LD_VAR 0 1
28025: PUSH
28026: LD_EXP 107
28030: IN
28031: NOT
28032: IFFALSE 28089
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
28034: LD_ADDR_EXP 107
28038: PUSH
28039: LD_EXP 107
28043: PPUSH
28044: LD_EXP 107
28048: PUSH
28049: LD_INT 1
28051: PLUS
28052: PPUSH
28053: LD_VAR 0 1
28057: PPUSH
28058: CALL_OW 1
28062: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
28063: LD_ADDR_EXP 108
28067: PUSH
28068: LD_EXP 108
28072: PPUSH
28073: LD_EXP 108
28077: PUSH
28078: LD_INT 1
28080: PLUS
28081: PPUSH
28082: EMPTY
28083: PPUSH
28084: CALL_OW 1
28088: ST_TO_ADDR
// end end ;
28089: GO 28018
28091: POP
28092: POP
// for i := minerMinesList downto 1 do
28093: LD_ADDR_VAR 0 1
28097: PUSH
28098: DOUBLE
28099: LD_EXP 108
28103: INC
28104: ST_TO_ADDR
28105: LD_INT 1
28107: PUSH
28108: FOR_DOWNTO
28109: IFFALSE 28445
// begin if IsLive ( minersList [ i ] ) then
28111: LD_EXP 107
28115: PUSH
28116: LD_VAR 0 1
28120: ARRAY
28121: PPUSH
28122: CALL_OW 300
28126: IFFALSE 28154
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
28128: LD_EXP 107
28132: PUSH
28133: LD_VAR 0 1
28137: ARRAY
28138: PPUSH
28139: LD_EXP 108
28143: PUSH
28144: LD_VAR 0 1
28148: ARRAY
28149: PPUSH
28150: CALL_OW 505
// if not minerMinesList [ i ] then
28154: LD_EXP 108
28158: PUSH
28159: LD_VAR 0 1
28163: ARRAY
28164: NOT
28165: IFFALSE 28169
// continue ;
28167: GO 28108
// for j := minerMinesList [ i ] downto 1 do
28169: LD_ADDR_VAR 0 2
28173: PUSH
28174: DOUBLE
28175: LD_EXP 108
28179: PUSH
28180: LD_VAR 0 1
28184: ARRAY
28185: INC
28186: ST_TO_ADDR
28187: LD_INT 1
28189: PUSH
28190: FOR_DOWNTO
28191: IFFALSE 28441
// begin side := GetSide ( minersList [ i ] ) ;
28193: LD_ADDR_VAR 0 3
28197: PUSH
28198: LD_EXP 107
28202: PUSH
28203: LD_VAR 0 1
28207: ARRAY
28208: PPUSH
28209: CALL_OW 255
28213: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
28214: LD_ADDR_VAR 0 4
28218: PUSH
28219: LD_EXP 108
28223: PUSH
28224: LD_VAR 0 1
28228: ARRAY
28229: PUSH
28230: LD_VAR 0 2
28234: ARRAY
28235: PUSH
28236: LD_INT 1
28238: ARRAY
28239: PPUSH
28240: LD_EXP 108
28244: PUSH
28245: LD_VAR 0 1
28249: ARRAY
28250: PUSH
28251: LD_VAR 0 2
28255: ARRAY
28256: PUSH
28257: LD_INT 2
28259: ARRAY
28260: PPUSH
28261: CALL_OW 428
28265: ST_TO_ADDR
// if not tmp then
28266: LD_VAR 0 4
28270: NOT
28271: IFFALSE 28275
// continue ;
28273: GO 28190
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
28275: LD_VAR 0 4
28279: PUSH
28280: LD_INT 81
28282: PUSH
28283: LD_VAR 0 3
28287: PUSH
28288: EMPTY
28289: LIST
28290: LIST
28291: PPUSH
28292: CALL_OW 69
28296: IN
28297: PUSH
28298: LD_EXP 108
28302: PUSH
28303: LD_VAR 0 1
28307: ARRAY
28308: PUSH
28309: LD_VAR 0 2
28313: ARRAY
28314: PUSH
28315: LD_INT 1
28317: ARRAY
28318: PPUSH
28319: LD_EXP 108
28323: PUSH
28324: LD_VAR 0 1
28328: ARRAY
28329: PUSH
28330: LD_VAR 0 2
28334: ARRAY
28335: PUSH
28336: LD_INT 2
28338: ARRAY
28339: PPUSH
28340: CALL_OW 458
28344: AND
28345: IFFALSE 28439
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
28347: LD_EXP 108
28351: PUSH
28352: LD_VAR 0 1
28356: ARRAY
28357: PUSH
28358: LD_VAR 0 2
28362: ARRAY
28363: PUSH
28364: LD_INT 1
28366: ARRAY
28367: PPUSH
28368: LD_EXP 108
28372: PUSH
28373: LD_VAR 0 1
28377: ARRAY
28378: PUSH
28379: LD_VAR 0 2
28383: ARRAY
28384: PUSH
28385: LD_INT 2
28387: ARRAY
28388: PPUSH
28389: LD_VAR 0 3
28393: PPUSH
28394: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
28398: LD_ADDR_EXP 108
28402: PUSH
28403: LD_EXP 108
28407: PPUSH
28408: LD_VAR 0 1
28412: PPUSH
28413: LD_EXP 108
28417: PUSH
28418: LD_VAR 0 1
28422: ARRAY
28423: PPUSH
28424: LD_VAR 0 2
28428: PPUSH
28429: CALL_OW 3
28433: PPUSH
28434: CALL_OW 1
28438: ST_TO_ADDR
// end ; end ;
28439: GO 28190
28441: POP
28442: POP
// end ;
28443: GO 28108
28445: POP
28446: POP
// end ;
28447: PPOPN 4
28449: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
28450: LD_INT 0
28452: PPUSH
28453: PPUSH
// result := false ;
28454: LD_ADDR_VAR 0 4
28458: PUSH
28459: LD_INT 0
28461: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
28462: LD_VAR 0 1
28466: PPUSH
28467: CALL_OW 264
28471: PUSH
28472: LD_EXP 28
28476: EQUAL
28477: NOT
28478: IFFALSE 28482
// exit ;
28480: GO 28722
// index := GetElementIndex ( minersList , unit ) ;
28482: LD_ADDR_VAR 0 5
28486: PUSH
28487: LD_EXP 107
28491: PPUSH
28492: LD_VAR 0 1
28496: PPUSH
28497: CALL 34706 0 2
28501: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
28502: LD_EXP 108
28506: PUSH
28507: LD_VAR 0 5
28511: ARRAY
28512: PUSH
28513: LD_EXP 109
28517: GREATEREQUAL
28518: IFFALSE 28522
// exit ;
28520: GO 28722
// ComMoveXY ( unit , x , y ) ;
28522: LD_VAR 0 1
28526: PPUSH
28527: LD_VAR 0 2
28531: PPUSH
28532: LD_VAR 0 3
28536: PPUSH
28537: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
28541: LD_INT 35
28543: PPUSH
28544: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
28548: LD_VAR 0 1
28552: PPUSH
28553: LD_VAR 0 2
28557: PPUSH
28558: LD_VAR 0 3
28562: PPUSH
28563: CALL 65478 0 3
28567: NOT
28568: PUSH
28569: LD_VAR 0 1
28573: PPUSH
28574: CALL_OW 314
28578: AND
28579: IFFALSE 28583
// exit ;
28581: GO 28722
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
28583: LD_VAR 0 2
28587: PPUSH
28588: LD_VAR 0 3
28592: PPUSH
28593: CALL_OW 428
28597: PUSH
28598: LD_VAR 0 1
28602: EQUAL
28603: PUSH
28604: LD_VAR 0 1
28608: PPUSH
28609: CALL_OW 314
28613: NOT
28614: AND
28615: IFFALSE 28541
// PlaySoundXY ( x , y , PlantMine ) ;
28617: LD_VAR 0 2
28621: PPUSH
28622: LD_VAR 0 3
28626: PPUSH
28627: LD_STRING PlantMine
28629: PPUSH
28630: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
28634: LD_VAR 0 2
28638: PPUSH
28639: LD_VAR 0 3
28643: PPUSH
28644: LD_VAR 0 1
28648: PPUSH
28649: CALL_OW 255
28653: PPUSH
28654: LD_INT 0
28656: PPUSH
28657: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
28661: LD_ADDR_EXP 108
28665: PUSH
28666: LD_EXP 108
28670: PPUSH
28671: LD_VAR 0 5
28675: PUSH
28676: LD_EXP 108
28680: PUSH
28681: LD_VAR 0 5
28685: ARRAY
28686: PUSH
28687: LD_INT 1
28689: PLUS
28690: PUSH
28691: EMPTY
28692: LIST
28693: LIST
28694: PPUSH
28695: LD_VAR 0 2
28699: PUSH
28700: LD_VAR 0 3
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: PPUSH
28709: CALL 34921 0 3
28713: ST_TO_ADDR
// result := true ;
28714: LD_ADDR_VAR 0 4
28718: PUSH
28719: LD_INT 1
28721: ST_TO_ADDR
// end ;
28722: LD_VAR 0 4
28726: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
28727: LD_INT 0
28729: PPUSH
28730: PPUSH
28731: PPUSH
// if not unit in minersList then
28732: LD_VAR 0 1
28736: PUSH
28737: LD_EXP 107
28741: IN
28742: NOT
28743: IFFALSE 28747
// exit ;
28745: GO 29139
// index := GetElementIndex ( minersList , unit ) ;
28747: LD_ADDR_VAR 0 6
28751: PUSH
28752: LD_EXP 107
28756: PPUSH
28757: LD_VAR 0 1
28761: PPUSH
28762: CALL 34706 0 2
28766: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
28767: LD_ADDR_VAR 0 5
28771: PUSH
28772: DOUBLE
28773: LD_EXP 108
28777: PUSH
28778: LD_VAR 0 6
28782: ARRAY
28783: INC
28784: ST_TO_ADDR
28785: LD_INT 1
28787: PUSH
28788: FOR_DOWNTO
28789: IFFALSE 28950
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
28791: LD_EXP 108
28795: PUSH
28796: LD_VAR 0 6
28800: ARRAY
28801: PUSH
28802: LD_VAR 0 5
28806: ARRAY
28807: PUSH
28808: LD_INT 1
28810: ARRAY
28811: PUSH
28812: LD_VAR 0 2
28816: EQUAL
28817: PUSH
28818: LD_EXP 108
28822: PUSH
28823: LD_VAR 0 6
28827: ARRAY
28828: PUSH
28829: LD_VAR 0 5
28833: ARRAY
28834: PUSH
28835: LD_INT 2
28837: ARRAY
28838: PUSH
28839: LD_VAR 0 3
28843: EQUAL
28844: AND
28845: IFFALSE 28948
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
28847: LD_EXP 108
28851: PUSH
28852: LD_VAR 0 6
28856: ARRAY
28857: PUSH
28858: LD_VAR 0 5
28862: ARRAY
28863: PUSH
28864: LD_INT 1
28866: ARRAY
28867: PPUSH
28868: LD_EXP 108
28872: PUSH
28873: LD_VAR 0 6
28877: ARRAY
28878: PUSH
28879: LD_VAR 0 5
28883: ARRAY
28884: PUSH
28885: LD_INT 2
28887: ARRAY
28888: PPUSH
28889: LD_VAR 0 1
28893: PPUSH
28894: CALL_OW 255
28898: PPUSH
28899: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
28903: LD_ADDR_EXP 108
28907: PUSH
28908: LD_EXP 108
28912: PPUSH
28913: LD_VAR 0 6
28917: PPUSH
28918: LD_EXP 108
28922: PUSH
28923: LD_VAR 0 6
28927: ARRAY
28928: PPUSH
28929: LD_VAR 0 5
28933: PPUSH
28934: CALL_OW 3
28938: PPUSH
28939: CALL_OW 1
28943: ST_TO_ADDR
// exit ;
28944: POP
28945: POP
28946: GO 29139
// end ; end ;
28948: GO 28788
28950: POP
28951: POP
// for i := minerMinesList [ index ] downto 1 do
28952: LD_ADDR_VAR 0 5
28956: PUSH
28957: DOUBLE
28958: LD_EXP 108
28962: PUSH
28963: LD_VAR 0 6
28967: ARRAY
28968: INC
28969: ST_TO_ADDR
28970: LD_INT 1
28972: PUSH
28973: FOR_DOWNTO
28974: IFFALSE 29137
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
28976: LD_EXP 108
28980: PUSH
28981: LD_VAR 0 6
28985: ARRAY
28986: PUSH
28987: LD_VAR 0 5
28991: ARRAY
28992: PUSH
28993: LD_INT 1
28995: ARRAY
28996: PPUSH
28997: LD_EXP 108
29001: PUSH
29002: LD_VAR 0 6
29006: ARRAY
29007: PUSH
29008: LD_VAR 0 5
29012: ARRAY
29013: PUSH
29014: LD_INT 2
29016: ARRAY
29017: PPUSH
29018: LD_VAR 0 2
29022: PPUSH
29023: LD_VAR 0 3
29027: PPUSH
29028: CALL_OW 298
29032: PUSH
29033: LD_INT 6
29035: LESS
29036: IFFALSE 29135
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
29038: LD_EXP 108
29042: PUSH
29043: LD_VAR 0 6
29047: ARRAY
29048: PUSH
29049: LD_VAR 0 5
29053: ARRAY
29054: PUSH
29055: LD_INT 1
29057: ARRAY
29058: PPUSH
29059: LD_EXP 108
29063: PUSH
29064: LD_VAR 0 6
29068: ARRAY
29069: PUSH
29070: LD_VAR 0 5
29074: ARRAY
29075: PUSH
29076: LD_INT 2
29078: ARRAY
29079: PPUSH
29080: LD_VAR 0 1
29084: PPUSH
29085: CALL_OW 255
29089: PPUSH
29090: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
29094: LD_ADDR_EXP 108
29098: PUSH
29099: LD_EXP 108
29103: PPUSH
29104: LD_VAR 0 6
29108: PPUSH
29109: LD_EXP 108
29113: PUSH
29114: LD_VAR 0 6
29118: ARRAY
29119: PPUSH
29120: LD_VAR 0 5
29124: PPUSH
29125: CALL_OW 3
29129: PPUSH
29130: CALL_OW 1
29134: ST_TO_ADDR
// end ; end ;
29135: GO 28973
29137: POP
29138: POP
// end ;
29139: LD_VAR 0 4
29143: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
29144: LD_INT 0
29146: PPUSH
29147: PPUSH
29148: PPUSH
29149: PPUSH
29150: PPUSH
29151: PPUSH
29152: PPUSH
29153: PPUSH
29154: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
29155: LD_VAR 0 1
29159: PPUSH
29160: CALL_OW 264
29164: PUSH
29165: LD_EXP 28
29169: EQUAL
29170: NOT
29171: PUSH
29172: LD_VAR 0 1
29176: PUSH
29177: LD_EXP 107
29181: IN
29182: NOT
29183: OR
29184: IFFALSE 29188
// exit ;
29186: GO 29510
// index := GetElementIndex ( minersList , unit ) ;
29188: LD_ADDR_VAR 0 6
29192: PUSH
29193: LD_EXP 107
29197: PPUSH
29198: LD_VAR 0 1
29202: PPUSH
29203: CALL 34706 0 2
29207: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
29208: LD_ADDR_VAR 0 8
29212: PUSH
29213: LD_EXP 109
29217: PUSH
29218: LD_EXP 108
29222: PUSH
29223: LD_VAR 0 6
29227: ARRAY
29228: MINUS
29229: ST_TO_ADDR
// if not minesFreeAmount then
29230: LD_VAR 0 8
29234: NOT
29235: IFFALSE 29239
// exit ;
29237: GO 29510
// tmp := [ ] ;
29239: LD_ADDR_VAR 0 7
29243: PUSH
29244: EMPTY
29245: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
29246: LD_ADDR_VAR 0 5
29250: PUSH
29251: DOUBLE
29252: LD_INT 1
29254: DEC
29255: ST_TO_ADDR
29256: LD_VAR 0 8
29260: PUSH
29261: FOR_TO
29262: IFFALSE 29457
// begin _d := rand ( 0 , 5 ) ;
29264: LD_ADDR_VAR 0 11
29268: PUSH
29269: LD_INT 0
29271: PPUSH
29272: LD_INT 5
29274: PPUSH
29275: CALL_OW 12
29279: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
29280: LD_ADDR_VAR 0 12
29284: PUSH
29285: LD_INT 2
29287: PPUSH
29288: LD_INT 6
29290: PPUSH
29291: CALL_OW 12
29295: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
29296: LD_ADDR_VAR 0 9
29300: PUSH
29301: LD_VAR 0 2
29305: PPUSH
29306: LD_VAR 0 11
29310: PPUSH
29311: LD_VAR 0 12
29315: PPUSH
29316: CALL_OW 272
29320: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
29321: LD_ADDR_VAR 0 10
29325: PUSH
29326: LD_VAR 0 3
29330: PPUSH
29331: LD_VAR 0 11
29335: PPUSH
29336: LD_VAR 0 12
29340: PPUSH
29341: CALL_OW 273
29345: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
29346: LD_VAR 0 9
29350: PPUSH
29351: LD_VAR 0 10
29355: PPUSH
29356: CALL_OW 488
29360: PUSH
29361: LD_VAR 0 9
29365: PUSH
29366: LD_VAR 0 10
29370: PUSH
29371: EMPTY
29372: LIST
29373: LIST
29374: PUSH
29375: LD_VAR 0 7
29379: IN
29380: NOT
29381: AND
29382: PUSH
29383: LD_VAR 0 9
29387: PPUSH
29388: LD_VAR 0 10
29392: PPUSH
29393: CALL_OW 458
29397: NOT
29398: AND
29399: IFFALSE 29441
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
29401: LD_ADDR_VAR 0 7
29405: PUSH
29406: LD_VAR 0 7
29410: PPUSH
29411: LD_VAR 0 7
29415: PUSH
29416: LD_INT 1
29418: PLUS
29419: PPUSH
29420: LD_VAR 0 9
29424: PUSH
29425: LD_VAR 0 10
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: PPUSH
29434: CALL_OW 1
29438: ST_TO_ADDR
29439: GO 29455
// i := i - 1 ;
29441: LD_ADDR_VAR 0 5
29445: PUSH
29446: LD_VAR 0 5
29450: PUSH
29451: LD_INT 1
29453: MINUS
29454: ST_TO_ADDR
// end ;
29455: GO 29261
29457: POP
29458: POP
// for i in tmp do
29459: LD_ADDR_VAR 0 5
29463: PUSH
29464: LD_VAR 0 7
29468: PUSH
29469: FOR_IN
29470: IFFALSE 29508
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
29472: LD_VAR 0 1
29476: PPUSH
29477: LD_VAR 0 5
29481: PUSH
29482: LD_INT 1
29484: ARRAY
29485: PPUSH
29486: LD_VAR 0 5
29490: PUSH
29491: LD_INT 2
29493: ARRAY
29494: PPUSH
29495: CALL 28450 0 3
29499: NOT
29500: IFFALSE 29506
// exit ;
29502: POP
29503: POP
29504: GO 29510
29506: GO 29469
29508: POP
29509: POP
// end ;
29510: LD_VAR 0 4
29514: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
29515: LD_INT 0
29517: PPUSH
29518: PPUSH
29519: PPUSH
29520: PPUSH
29521: PPUSH
29522: PPUSH
29523: PPUSH
// if not GetClass ( unit ) = class_sniper then
29524: LD_VAR 0 1
29528: PPUSH
29529: CALL_OW 257
29533: PUSH
29534: LD_INT 5
29536: EQUAL
29537: NOT
29538: IFFALSE 29542
// exit ;
29540: GO 29930
// dist := 8 ;
29542: LD_ADDR_VAR 0 5
29546: PUSH
29547: LD_INT 8
29549: ST_TO_ADDR
// viewRange := 12 ;
29550: LD_ADDR_VAR 0 7
29554: PUSH
29555: LD_INT 12
29557: ST_TO_ADDR
// side := GetSide ( unit ) ;
29558: LD_ADDR_VAR 0 6
29562: PUSH
29563: LD_VAR 0 1
29567: PPUSH
29568: CALL_OW 255
29572: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
29573: LD_INT 61
29575: PPUSH
29576: LD_VAR 0 6
29580: PPUSH
29581: CALL_OW 321
29585: PUSH
29586: LD_INT 2
29588: EQUAL
29589: IFFALSE 29599
// viewRange := 16 ;
29591: LD_ADDR_VAR 0 7
29595: PUSH
29596: LD_INT 16
29598: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
29599: LD_VAR 0 1
29603: PPUSH
29604: LD_VAR 0 2
29608: PPUSH
29609: LD_VAR 0 3
29613: PPUSH
29614: CALL_OW 297
29618: PUSH
29619: LD_VAR 0 5
29623: GREATER
29624: IFFALSE 29703
// begin ComMoveXY ( unit , x , y ) ;
29626: LD_VAR 0 1
29630: PPUSH
29631: LD_VAR 0 2
29635: PPUSH
29636: LD_VAR 0 3
29640: PPUSH
29641: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
29645: LD_INT 35
29647: PPUSH
29648: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
29652: LD_VAR 0 1
29656: PPUSH
29657: LD_VAR 0 2
29661: PPUSH
29662: LD_VAR 0 3
29666: PPUSH
29667: CALL 65478 0 3
29671: NOT
29672: IFFALSE 29676
// exit ;
29674: GO 29930
// until GetDistUnitXY ( unit , x , y ) < dist ;
29676: LD_VAR 0 1
29680: PPUSH
29681: LD_VAR 0 2
29685: PPUSH
29686: LD_VAR 0 3
29690: PPUSH
29691: CALL_OW 297
29695: PUSH
29696: LD_VAR 0 5
29700: LESS
29701: IFFALSE 29645
// end ; ComTurnXY ( unit , x , y ) ;
29703: LD_VAR 0 1
29707: PPUSH
29708: LD_VAR 0 2
29712: PPUSH
29713: LD_VAR 0 3
29717: PPUSH
29718: CALL_OW 118
// wait ( 5 ) ;
29722: LD_INT 5
29724: PPUSH
29725: CALL_OW 67
// _d := GetDir ( unit ) ;
29729: LD_ADDR_VAR 0 10
29733: PUSH
29734: LD_VAR 0 1
29738: PPUSH
29739: CALL_OW 254
29743: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
29744: LD_ADDR_VAR 0 8
29748: PUSH
29749: LD_VAR 0 1
29753: PPUSH
29754: CALL_OW 250
29758: PPUSH
29759: LD_VAR 0 10
29763: PPUSH
29764: LD_VAR 0 5
29768: PPUSH
29769: CALL_OW 272
29773: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
29774: LD_ADDR_VAR 0 9
29778: PUSH
29779: LD_VAR 0 1
29783: PPUSH
29784: CALL_OW 251
29788: PPUSH
29789: LD_VAR 0 10
29793: PPUSH
29794: LD_VAR 0 5
29798: PPUSH
29799: CALL_OW 273
29803: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
29804: LD_VAR 0 8
29808: PPUSH
29809: LD_VAR 0 9
29813: PPUSH
29814: CALL_OW 488
29818: NOT
29819: IFFALSE 29823
// exit ;
29821: GO 29930
// ComAnimCustom ( unit , 1 ) ;
29823: LD_VAR 0 1
29827: PPUSH
29828: LD_INT 1
29830: PPUSH
29831: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
29835: LD_VAR 0 8
29839: PPUSH
29840: LD_VAR 0 9
29844: PPUSH
29845: LD_VAR 0 6
29849: PPUSH
29850: LD_VAR 0 7
29854: PPUSH
29855: CALL_OW 330
// repeat wait ( 1 ) ;
29859: LD_INT 1
29861: PPUSH
29862: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
29866: LD_VAR 0 1
29870: PPUSH
29871: CALL_OW 316
29875: PUSH
29876: LD_VAR 0 1
29880: PPUSH
29881: CALL_OW 314
29885: OR
29886: PUSH
29887: LD_VAR 0 1
29891: PPUSH
29892: CALL_OW 302
29896: NOT
29897: OR
29898: PUSH
29899: LD_VAR 0 1
29903: PPUSH
29904: CALL_OW 301
29908: OR
29909: IFFALSE 29859
// RemoveSeeing ( _x , _y , side ) ;
29911: LD_VAR 0 8
29915: PPUSH
29916: LD_VAR 0 9
29920: PPUSH
29921: LD_VAR 0 6
29925: PPUSH
29926: CALL_OW 331
// end ; end_of_file
29930: LD_VAR 0 4
29934: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
29935: LD_INT 0
29937: PPUSH
29938: PPUSH
// if exist_mode then
29939: LD_VAR 0 2
29943: IFFALSE 29968
// unit := CreateCharacter ( prefix & ident ) else
29945: LD_ADDR_VAR 0 5
29949: PUSH
29950: LD_VAR 0 3
29954: PUSH
29955: LD_VAR 0 1
29959: STR
29960: PPUSH
29961: CALL_OW 34
29965: ST_TO_ADDR
29966: GO 29983
// unit := NewCharacter ( ident ) ;
29968: LD_ADDR_VAR 0 5
29972: PUSH
29973: LD_VAR 0 1
29977: PPUSH
29978: CALL_OW 25
29982: ST_TO_ADDR
// result := unit ;
29983: LD_ADDR_VAR 0 4
29987: PUSH
29988: LD_VAR 0 5
29992: ST_TO_ADDR
// end ;
29993: LD_VAR 0 4
29997: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
29998: LD_INT 0
30000: PPUSH
30001: PPUSH
// if not side or not nation then
30002: LD_VAR 0 1
30006: NOT
30007: PUSH
30008: LD_VAR 0 2
30012: NOT
30013: OR
30014: IFFALSE 30018
// exit ;
30016: GO 30786
// case nation of nation_american :
30018: LD_VAR 0 2
30022: PUSH
30023: LD_INT 1
30025: DOUBLE
30026: EQUAL
30027: IFTRUE 30031
30029: GO 30245
30031: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
30032: LD_ADDR_VAR 0 4
30036: PUSH
30037: LD_INT 35
30039: PUSH
30040: LD_INT 45
30042: PUSH
30043: LD_INT 46
30045: PUSH
30046: LD_INT 47
30048: PUSH
30049: LD_INT 82
30051: PUSH
30052: LD_INT 83
30054: PUSH
30055: LD_INT 84
30057: PUSH
30058: LD_INT 85
30060: PUSH
30061: LD_INT 86
30063: PUSH
30064: LD_INT 1
30066: PUSH
30067: LD_INT 2
30069: PUSH
30070: LD_INT 6
30072: PUSH
30073: LD_INT 15
30075: PUSH
30076: LD_INT 16
30078: PUSH
30079: LD_INT 7
30081: PUSH
30082: LD_INT 12
30084: PUSH
30085: LD_INT 13
30087: PUSH
30088: LD_INT 10
30090: PUSH
30091: LD_INT 14
30093: PUSH
30094: LD_INT 20
30096: PUSH
30097: LD_INT 21
30099: PUSH
30100: LD_INT 22
30102: PUSH
30103: LD_INT 25
30105: PUSH
30106: LD_INT 32
30108: PUSH
30109: LD_INT 27
30111: PUSH
30112: LD_INT 36
30114: PUSH
30115: LD_INT 69
30117: PUSH
30118: LD_INT 39
30120: PUSH
30121: LD_INT 34
30123: PUSH
30124: LD_INT 40
30126: PUSH
30127: LD_INT 48
30129: PUSH
30130: LD_INT 49
30132: PUSH
30133: LD_INT 50
30135: PUSH
30136: LD_INT 51
30138: PUSH
30139: LD_INT 52
30141: PUSH
30142: LD_INT 53
30144: PUSH
30145: LD_INT 54
30147: PUSH
30148: LD_INT 55
30150: PUSH
30151: LD_INT 56
30153: PUSH
30154: LD_INT 57
30156: PUSH
30157: LD_INT 58
30159: PUSH
30160: LD_INT 59
30162: PUSH
30163: LD_INT 60
30165: PUSH
30166: LD_INT 61
30168: PUSH
30169: LD_INT 62
30171: PUSH
30172: LD_INT 80
30174: PUSH
30175: LD_INT 82
30177: PUSH
30178: LD_INT 83
30180: PUSH
30181: LD_INT 84
30183: PUSH
30184: LD_INT 85
30186: PUSH
30187: LD_INT 86
30189: PUSH
30190: EMPTY
30191: LIST
30192: LIST
30193: LIST
30194: LIST
30195: LIST
30196: LIST
30197: LIST
30198: LIST
30199: LIST
30200: LIST
30201: LIST
30202: LIST
30203: LIST
30204: LIST
30205: LIST
30206: LIST
30207: LIST
30208: LIST
30209: LIST
30210: LIST
30211: LIST
30212: LIST
30213: LIST
30214: LIST
30215: LIST
30216: LIST
30217: LIST
30218: LIST
30219: LIST
30220: LIST
30221: LIST
30222: LIST
30223: LIST
30224: LIST
30225: LIST
30226: LIST
30227: LIST
30228: LIST
30229: LIST
30230: LIST
30231: LIST
30232: LIST
30233: LIST
30234: LIST
30235: LIST
30236: LIST
30237: LIST
30238: LIST
30239: LIST
30240: LIST
30241: LIST
30242: ST_TO_ADDR
30243: GO 30710
30245: LD_INT 2
30247: DOUBLE
30248: EQUAL
30249: IFTRUE 30253
30251: GO 30479
30253: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
30254: LD_ADDR_VAR 0 4
30258: PUSH
30259: LD_INT 35
30261: PUSH
30262: LD_INT 45
30264: PUSH
30265: LD_INT 46
30267: PUSH
30268: LD_INT 47
30270: PUSH
30271: LD_INT 82
30273: PUSH
30274: LD_INT 83
30276: PUSH
30277: LD_INT 84
30279: PUSH
30280: LD_INT 85
30282: PUSH
30283: LD_INT 87
30285: PUSH
30286: LD_INT 70
30288: PUSH
30289: LD_INT 1
30291: PUSH
30292: LD_INT 11
30294: PUSH
30295: LD_INT 3
30297: PUSH
30298: LD_INT 4
30300: PUSH
30301: LD_INT 5
30303: PUSH
30304: LD_INT 6
30306: PUSH
30307: LD_INT 15
30309: PUSH
30310: LD_INT 18
30312: PUSH
30313: LD_INT 7
30315: PUSH
30316: LD_INT 17
30318: PUSH
30319: LD_INT 8
30321: PUSH
30322: LD_INT 20
30324: PUSH
30325: LD_INT 21
30327: PUSH
30328: LD_INT 22
30330: PUSH
30331: LD_INT 72
30333: PUSH
30334: LD_INT 26
30336: PUSH
30337: LD_INT 69
30339: PUSH
30340: LD_INT 39
30342: PUSH
30343: LD_INT 40
30345: PUSH
30346: LD_INT 41
30348: PUSH
30349: LD_INT 42
30351: PUSH
30352: LD_INT 43
30354: PUSH
30355: LD_INT 48
30357: PUSH
30358: LD_INT 49
30360: PUSH
30361: LD_INT 50
30363: PUSH
30364: LD_INT 51
30366: PUSH
30367: LD_INT 52
30369: PUSH
30370: LD_INT 53
30372: PUSH
30373: LD_INT 54
30375: PUSH
30376: LD_INT 55
30378: PUSH
30379: LD_INT 56
30381: PUSH
30382: LD_INT 60
30384: PUSH
30385: LD_INT 61
30387: PUSH
30388: LD_INT 62
30390: PUSH
30391: LD_INT 66
30393: PUSH
30394: LD_INT 67
30396: PUSH
30397: LD_INT 68
30399: PUSH
30400: LD_INT 81
30402: PUSH
30403: LD_INT 82
30405: PUSH
30406: LD_INT 83
30408: PUSH
30409: LD_INT 84
30411: PUSH
30412: LD_INT 85
30414: PUSH
30415: LD_INT 87
30417: PUSH
30418: LD_INT 88
30420: PUSH
30421: EMPTY
30422: LIST
30423: LIST
30424: LIST
30425: LIST
30426: LIST
30427: LIST
30428: LIST
30429: LIST
30430: LIST
30431: LIST
30432: LIST
30433: LIST
30434: LIST
30435: LIST
30436: LIST
30437: LIST
30438: LIST
30439: LIST
30440: LIST
30441: LIST
30442: LIST
30443: LIST
30444: LIST
30445: LIST
30446: LIST
30447: LIST
30448: LIST
30449: LIST
30450: LIST
30451: LIST
30452: LIST
30453: LIST
30454: LIST
30455: LIST
30456: LIST
30457: LIST
30458: LIST
30459: LIST
30460: LIST
30461: LIST
30462: LIST
30463: LIST
30464: LIST
30465: LIST
30466: LIST
30467: LIST
30468: LIST
30469: LIST
30470: LIST
30471: LIST
30472: LIST
30473: LIST
30474: LIST
30475: LIST
30476: ST_TO_ADDR
30477: GO 30710
30479: LD_INT 3
30481: DOUBLE
30482: EQUAL
30483: IFTRUE 30487
30485: GO 30709
30487: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
30488: LD_ADDR_VAR 0 4
30492: PUSH
30493: LD_INT 46
30495: PUSH
30496: LD_INT 47
30498: PUSH
30499: LD_INT 1
30501: PUSH
30502: LD_INT 2
30504: PUSH
30505: LD_INT 82
30507: PUSH
30508: LD_INT 83
30510: PUSH
30511: LD_INT 84
30513: PUSH
30514: LD_INT 85
30516: PUSH
30517: LD_INT 86
30519: PUSH
30520: LD_INT 11
30522: PUSH
30523: LD_INT 9
30525: PUSH
30526: LD_INT 20
30528: PUSH
30529: LD_INT 19
30531: PUSH
30532: LD_INT 21
30534: PUSH
30535: LD_INT 24
30537: PUSH
30538: LD_INT 22
30540: PUSH
30541: LD_INT 25
30543: PUSH
30544: LD_INT 28
30546: PUSH
30547: LD_INT 29
30549: PUSH
30550: LD_INT 30
30552: PUSH
30553: LD_INT 31
30555: PUSH
30556: LD_INT 37
30558: PUSH
30559: LD_INT 38
30561: PUSH
30562: LD_INT 32
30564: PUSH
30565: LD_INT 27
30567: PUSH
30568: LD_INT 33
30570: PUSH
30571: LD_INT 69
30573: PUSH
30574: LD_INT 39
30576: PUSH
30577: LD_INT 34
30579: PUSH
30580: LD_INT 40
30582: PUSH
30583: LD_INT 71
30585: PUSH
30586: LD_INT 23
30588: PUSH
30589: LD_INT 44
30591: PUSH
30592: LD_INT 48
30594: PUSH
30595: LD_INT 49
30597: PUSH
30598: LD_INT 50
30600: PUSH
30601: LD_INT 51
30603: PUSH
30604: LD_INT 52
30606: PUSH
30607: LD_INT 53
30609: PUSH
30610: LD_INT 54
30612: PUSH
30613: LD_INT 55
30615: PUSH
30616: LD_INT 56
30618: PUSH
30619: LD_INT 57
30621: PUSH
30622: LD_INT 58
30624: PUSH
30625: LD_INT 59
30627: PUSH
30628: LD_INT 63
30630: PUSH
30631: LD_INT 64
30633: PUSH
30634: LD_INT 65
30636: PUSH
30637: LD_INT 82
30639: PUSH
30640: LD_INT 83
30642: PUSH
30643: LD_INT 84
30645: PUSH
30646: LD_INT 85
30648: PUSH
30649: LD_INT 86
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: LIST
30656: LIST
30657: LIST
30658: LIST
30659: LIST
30660: LIST
30661: LIST
30662: LIST
30663: LIST
30664: LIST
30665: LIST
30666: LIST
30667: LIST
30668: LIST
30669: LIST
30670: LIST
30671: LIST
30672: LIST
30673: LIST
30674: LIST
30675: LIST
30676: LIST
30677: LIST
30678: LIST
30679: LIST
30680: LIST
30681: LIST
30682: LIST
30683: LIST
30684: LIST
30685: LIST
30686: LIST
30687: LIST
30688: LIST
30689: LIST
30690: LIST
30691: LIST
30692: LIST
30693: LIST
30694: LIST
30695: LIST
30696: LIST
30697: LIST
30698: LIST
30699: LIST
30700: LIST
30701: LIST
30702: LIST
30703: LIST
30704: LIST
30705: LIST
30706: ST_TO_ADDR
30707: GO 30710
30709: POP
// if state > - 1 and state < 3 then
30710: LD_VAR 0 3
30714: PUSH
30715: LD_INT 1
30717: NEG
30718: GREATER
30719: PUSH
30720: LD_VAR 0 3
30724: PUSH
30725: LD_INT 3
30727: LESS
30728: AND
30729: IFFALSE 30786
// for i in result do
30731: LD_ADDR_VAR 0 5
30735: PUSH
30736: LD_VAR 0 4
30740: PUSH
30741: FOR_IN
30742: IFFALSE 30784
// if GetTech ( i , side ) <> state then
30744: LD_VAR 0 5
30748: PPUSH
30749: LD_VAR 0 1
30753: PPUSH
30754: CALL_OW 321
30758: PUSH
30759: LD_VAR 0 3
30763: NONEQUAL
30764: IFFALSE 30782
// result := result diff i ;
30766: LD_ADDR_VAR 0 4
30770: PUSH
30771: LD_VAR 0 4
30775: PUSH
30776: LD_VAR 0 5
30780: DIFF
30781: ST_TO_ADDR
30782: GO 30741
30784: POP
30785: POP
// end ;
30786: LD_VAR 0 4
30790: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
30791: LD_INT 0
30793: PPUSH
30794: PPUSH
30795: PPUSH
// result := true ;
30796: LD_ADDR_VAR 0 3
30800: PUSH
30801: LD_INT 1
30803: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
30804: LD_ADDR_VAR 0 5
30808: PUSH
30809: LD_VAR 0 2
30813: PPUSH
30814: CALL_OW 480
30818: ST_TO_ADDR
// if not tmp then
30819: LD_VAR 0 5
30823: NOT
30824: IFFALSE 30828
// exit ;
30826: GO 30877
// for i in tmp do
30828: LD_ADDR_VAR 0 4
30832: PUSH
30833: LD_VAR 0 5
30837: PUSH
30838: FOR_IN
30839: IFFALSE 30875
// if GetTech ( i , side ) <> state_researched then
30841: LD_VAR 0 4
30845: PPUSH
30846: LD_VAR 0 1
30850: PPUSH
30851: CALL_OW 321
30855: PUSH
30856: LD_INT 2
30858: NONEQUAL
30859: IFFALSE 30873
// begin result := false ;
30861: LD_ADDR_VAR 0 3
30865: PUSH
30866: LD_INT 0
30868: ST_TO_ADDR
// exit ;
30869: POP
30870: POP
30871: GO 30877
// end ;
30873: GO 30838
30875: POP
30876: POP
// end ;
30877: LD_VAR 0 3
30881: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
30882: LD_INT 0
30884: PPUSH
30885: PPUSH
30886: PPUSH
30887: PPUSH
30888: PPUSH
30889: PPUSH
30890: PPUSH
30891: PPUSH
30892: PPUSH
30893: PPUSH
30894: PPUSH
30895: PPUSH
30896: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
30897: LD_VAR 0 1
30901: NOT
30902: PUSH
30903: LD_VAR 0 1
30907: PPUSH
30908: CALL_OW 257
30912: PUSH
30913: LD_INT 9
30915: NONEQUAL
30916: OR
30917: IFFALSE 30921
// exit ;
30919: GO 31494
// side := GetSide ( unit ) ;
30921: LD_ADDR_VAR 0 9
30925: PUSH
30926: LD_VAR 0 1
30930: PPUSH
30931: CALL_OW 255
30935: ST_TO_ADDR
// tech_space := tech_spacanom ;
30936: LD_ADDR_VAR 0 12
30940: PUSH
30941: LD_INT 29
30943: ST_TO_ADDR
// tech_time := tech_taurad ;
30944: LD_ADDR_VAR 0 13
30948: PUSH
30949: LD_INT 28
30951: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
30952: LD_ADDR_VAR 0 11
30956: PUSH
30957: LD_VAR 0 1
30961: PPUSH
30962: CALL_OW 310
30966: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
30967: LD_VAR 0 11
30971: PPUSH
30972: CALL_OW 247
30976: PUSH
30977: LD_INT 2
30979: EQUAL
30980: IFFALSE 30984
// exit ;
30982: GO 31494
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30984: LD_ADDR_VAR 0 8
30988: PUSH
30989: LD_INT 81
30991: PUSH
30992: LD_VAR 0 9
30996: PUSH
30997: EMPTY
30998: LIST
30999: LIST
31000: PUSH
31001: LD_INT 3
31003: PUSH
31004: LD_INT 21
31006: PUSH
31007: LD_INT 3
31009: PUSH
31010: EMPTY
31011: LIST
31012: LIST
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: PPUSH
31022: CALL_OW 69
31026: ST_TO_ADDR
// if not tmp then
31027: LD_VAR 0 8
31031: NOT
31032: IFFALSE 31036
// exit ;
31034: GO 31494
// if in_unit then
31036: LD_VAR 0 11
31040: IFFALSE 31064
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
31042: LD_ADDR_VAR 0 10
31046: PUSH
31047: LD_VAR 0 8
31051: PPUSH
31052: LD_VAR 0 11
31056: PPUSH
31057: CALL_OW 74
31061: ST_TO_ADDR
31062: GO 31084
// enemy := NearestUnitToUnit ( tmp , unit ) ;
31064: LD_ADDR_VAR 0 10
31068: PUSH
31069: LD_VAR 0 8
31073: PPUSH
31074: LD_VAR 0 1
31078: PPUSH
31079: CALL_OW 74
31083: ST_TO_ADDR
// if not enemy then
31084: LD_VAR 0 10
31088: NOT
31089: IFFALSE 31093
// exit ;
31091: GO 31494
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
31093: LD_VAR 0 11
31097: PUSH
31098: LD_VAR 0 11
31102: PPUSH
31103: LD_VAR 0 10
31107: PPUSH
31108: CALL_OW 296
31112: PUSH
31113: LD_INT 13
31115: GREATER
31116: AND
31117: PUSH
31118: LD_VAR 0 1
31122: PPUSH
31123: LD_VAR 0 10
31127: PPUSH
31128: CALL_OW 296
31132: PUSH
31133: LD_INT 12
31135: GREATER
31136: OR
31137: IFFALSE 31141
// exit ;
31139: GO 31494
// missile := [ 1 ] ;
31141: LD_ADDR_VAR 0 14
31145: PUSH
31146: LD_INT 1
31148: PUSH
31149: EMPTY
31150: LIST
31151: ST_TO_ADDR
// if Researched ( side , tech_space ) then
31152: LD_VAR 0 9
31156: PPUSH
31157: LD_VAR 0 12
31161: PPUSH
31162: CALL_OW 325
31166: IFFALSE 31195
// missile := Insert ( missile , missile + 1 , 2 ) ;
31168: LD_ADDR_VAR 0 14
31172: PUSH
31173: LD_VAR 0 14
31177: PPUSH
31178: LD_VAR 0 14
31182: PUSH
31183: LD_INT 1
31185: PLUS
31186: PPUSH
31187: LD_INT 2
31189: PPUSH
31190: CALL_OW 2
31194: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
31195: LD_VAR 0 9
31199: PPUSH
31200: LD_VAR 0 13
31204: PPUSH
31205: CALL_OW 325
31209: PUSH
31210: LD_VAR 0 10
31214: PPUSH
31215: CALL_OW 255
31219: PPUSH
31220: LD_VAR 0 13
31224: PPUSH
31225: CALL_OW 325
31229: NOT
31230: AND
31231: IFFALSE 31260
// missile := Insert ( missile , missile + 1 , 3 ) ;
31233: LD_ADDR_VAR 0 14
31237: PUSH
31238: LD_VAR 0 14
31242: PPUSH
31243: LD_VAR 0 14
31247: PUSH
31248: LD_INT 1
31250: PLUS
31251: PPUSH
31252: LD_INT 3
31254: PPUSH
31255: CALL_OW 2
31259: ST_TO_ADDR
// if missile < 2 then
31260: LD_VAR 0 14
31264: PUSH
31265: LD_INT 2
31267: LESS
31268: IFFALSE 31272
// exit ;
31270: GO 31494
// x := GetX ( enemy ) ;
31272: LD_ADDR_VAR 0 4
31276: PUSH
31277: LD_VAR 0 10
31281: PPUSH
31282: CALL_OW 250
31286: ST_TO_ADDR
// y := GetY ( enemy ) ;
31287: LD_ADDR_VAR 0 5
31291: PUSH
31292: LD_VAR 0 10
31296: PPUSH
31297: CALL_OW 251
31301: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
31302: LD_ADDR_VAR 0 6
31306: PUSH
31307: LD_VAR 0 4
31311: PUSH
31312: LD_INT 1
31314: NEG
31315: PPUSH
31316: LD_INT 1
31318: PPUSH
31319: CALL_OW 12
31323: PLUS
31324: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
31325: LD_ADDR_VAR 0 7
31329: PUSH
31330: LD_VAR 0 5
31334: PUSH
31335: LD_INT 1
31337: NEG
31338: PPUSH
31339: LD_INT 1
31341: PPUSH
31342: CALL_OW 12
31346: PLUS
31347: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31348: LD_VAR 0 6
31352: PPUSH
31353: LD_VAR 0 7
31357: PPUSH
31358: CALL_OW 488
31362: NOT
31363: IFFALSE 31385
// begin _x := x ;
31365: LD_ADDR_VAR 0 6
31369: PUSH
31370: LD_VAR 0 4
31374: ST_TO_ADDR
// _y := y ;
31375: LD_ADDR_VAR 0 7
31379: PUSH
31380: LD_VAR 0 5
31384: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
31385: LD_ADDR_VAR 0 3
31389: PUSH
31390: LD_INT 1
31392: PPUSH
31393: LD_VAR 0 14
31397: PPUSH
31398: CALL_OW 12
31402: ST_TO_ADDR
// case i of 1 :
31403: LD_VAR 0 3
31407: PUSH
31408: LD_INT 1
31410: DOUBLE
31411: EQUAL
31412: IFTRUE 31416
31414: GO 31433
31416: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
31417: LD_VAR 0 1
31421: PPUSH
31422: LD_VAR 0 10
31426: PPUSH
31427: CALL_OW 115
31431: GO 31494
31433: LD_INT 2
31435: DOUBLE
31436: EQUAL
31437: IFTRUE 31441
31439: GO 31463
31441: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
31442: LD_VAR 0 1
31446: PPUSH
31447: LD_VAR 0 6
31451: PPUSH
31452: LD_VAR 0 7
31456: PPUSH
31457: CALL_OW 153
31461: GO 31494
31463: LD_INT 3
31465: DOUBLE
31466: EQUAL
31467: IFTRUE 31471
31469: GO 31493
31471: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
31472: LD_VAR 0 1
31476: PPUSH
31477: LD_VAR 0 6
31481: PPUSH
31482: LD_VAR 0 7
31486: PPUSH
31487: CALL_OW 154
31491: GO 31494
31493: POP
// end ;
31494: LD_VAR 0 2
31498: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
31499: LD_INT 0
31501: PPUSH
31502: PPUSH
31503: PPUSH
31504: PPUSH
31505: PPUSH
31506: PPUSH
// if not unit or not building then
31507: LD_VAR 0 1
31511: NOT
31512: PUSH
31513: LD_VAR 0 2
31517: NOT
31518: OR
31519: IFFALSE 31523
// exit ;
31521: GO 31681
// x := GetX ( building ) ;
31523: LD_ADDR_VAR 0 5
31527: PUSH
31528: LD_VAR 0 2
31532: PPUSH
31533: CALL_OW 250
31537: ST_TO_ADDR
// y := GetY ( building ) ;
31538: LD_ADDR_VAR 0 6
31542: PUSH
31543: LD_VAR 0 2
31547: PPUSH
31548: CALL_OW 251
31552: ST_TO_ADDR
// for i = 0 to 5 do
31553: LD_ADDR_VAR 0 4
31557: PUSH
31558: DOUBLE
31559: LD_INT 0
31561: DEC
31562: ST_TO_ADDR
31563: LD_INT 5
31565: PUSH
31566: FOR_TO
31567: IFFALSE 31679
// begin _x := ShiftX ( x , i , 3 ) ;
31569: LD_ADDR_VAR 0 7
31573: PUSH
31574: LD_VAR 0 5
31578: PPUSH
31579: LD_VAR 0 4
31583: PPUSH
31584: LD_INT 3
31586: PPUSH
31587: CALL_OW 272
31591: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
31592: LD_ADDR_VAR 0 8
31596: PUSH
31597: LD_VAR 0 6
31601: PPUSH
31602: LD_VAR 0 4
31606: PPUSH
31607: LD_INT 3
31609: PPUSH
31610: CALL_OW 273
31614: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31615: LD_VAR 0 7
31619: PPUSH
31620: LD_VAR 0 8
31624: PPUSH
31625: CALL_OW 488
31629: NOT
31630: IFFALSE 31634
// continue ;
31632: GO 31566
// if HexInfo ( _x , _y ) = 0 then
31634: LD_VAR 0 7
31638: PPUSH
31639: LD_VAR 0 8
31643: PPUSH
31644: CALL_OW 428
31648: PUSH
31649: LD_INT 0
31651: EQUAL
31652: IFFALSE 31677
// begin ComMoveXY ( unit , _x , _y ) ;
31654: LD_VAR 0 1
31658: PPUSH
31659: LD_VAR 0 7
31663: PPUSH
31664: LD_VAR 0 8
31668: PPUSH
31669: CALL_OW 111
// exit ;
31673: POP
31674: POP
31675: GO 31681
// end ; end ;
31677: GO 31566
31679: POP
31680: POP
// end ;
31681: LD_VAR 0 3
31685: RET
// export function ScanBase ( side , base_area ) ; begin
31686: LD_INT 0
31688: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
31689: LD_ADDR_VAR 0 3
31693: PUSH
31694: LD_VAR 0 2
31698: PPUSH
31699: LD_INT 81
31701: PUSH
31702: LD_VAR 0 1
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: PPUSH
31711: CALL_OW 70
31715: ST_TO_ADDR
// end ;
31716: LD_VAR 0 3
31720: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
31721: LD_INT 0
31723: PPUSH
31724: PPUSH
31725: PPUSH
31726: PPUSH
// result := false ;
31727: LD_ADDR_VAR 0 2
31731: PUSH
31732: LD_INT 0
31734: ST_TO_ADDR
// side := GetSide ( unit ) ;
31735: LD_ADDR_VAR 0 3
31739: PUSH
31740: LD_VAR 0 1
31744: PPUSH
31745: CALL_OW 255
31749: ST_TO_ADDR
// nat := GetNation ( unit ) ;
31750: LD_ADDR_VAR 0 4
31754: PUSH
31755: LD_VAR 0 1
31759: PPUSH
31760: CALL_OW 248
31764: ST_TO_ADDR
// case nat of 1 :
31765: LD_VAR 0 4
31769: PUSH
31770: LD_INT 1
31772: DOUBLE
31773: EQUAL
31774: IFTRUE 31778
31776: GO 31789
31778: POP
// tech := tech_lassight ; 2 :
31779: LD_ADDR_VAR 0 5
31783: PUSH
31784: LD_INT 12
31786: ST_TO_ADDR
31787: GO 31828
31789: LD_INT 2
31791: DOUBLE
31792: EQUAL
31793: IFTRUE 31797
31795: GO 31808
31797: POP
// tech := tech_mortar ; 3 :
31798: LD_ADDR_VAR 0 5
31802: PUSH
31803: LD_INT 41
31805: ST_TO_ADDR
31806: GO 31828
31808: LD_INT 3
31810: DOUBLE
31811: EQUAL
31812: IFTRUE 31816
31814: GO 31827
31816: POP
// tech := tech_bazooka ; end ;
31817: LD_ADDR_VAR 0 5
31821: PUSH
31822: LD_INT 44
31824: ST_TO_ADDR
31825: GO 31828
31827: POP
// if Researched ( side , tech ) then
31828: LD_VAR 0 3
31832: PPUSH
31833: LD_VAR 0 5
31837: PPUSH
31838: CALL_OW 325
31842: IFFALSE 31869
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
31844: LD_ADDR_VAR 0 2
31848: PUSH
31849: LD_INT 5
31851: PUSH
31852: LD_INT 8
31854: PUSH
31855: LD_INT 9
31857: PUSH
31858: EMPTY
31859: LIST
31860: LIST
31861: LIST
31862: PUSH
31863: LD_VAR 0 4
31867: ARRAY
31868: ST_TO_ADDR
// end ;
31869: LD_VAR 0 2
31873: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
31874: LD_INT 0
31876: PPUSH
31877: PPUSH
31878: PPUSH
// if not mines then
31879: LD_VAR 0 2
31883: NOT
31884: IFFALSE 31888
// exit ;
31886: GO 32032
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
31888: LD_ADDR_VAR 0 5
31892: PUSH
31893: LD_INT 81
31895: PUSH
31896: LD_VAR 0 1
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: PUSH
31905: LD_INT 3
31907: PUSH
31908: LD_INT 21
31910: PUSH
31911: LD_INT 3
31913: PUSH
31914: EMPTY
31915: LIST
31916: LIST
31917: PUSH
31918: EMPTY
31919: LIST
31920: LIST
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: PPUSH
31926: CALL_OW 69
31930: ST_TO_ADDR
// for i in mines do
31931: LD_ADDR_VAR 0 4
31935: PUSH
31936: LD_VAR 0 2
31940: PUSH
31941: FOR_IN
31942: IFFALSE 32030
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
31944: LD_VAR 0 4
31948: PUSH
31949: LD_INT 1
31951: ARRAY
31952: PPUSH
31953: LD_VAR 0 4
31957: PUSH
31958: LD_INT 2
31960: ARRAY
31961: PPUSH
31962: CALL_OW 458
31966: NOT
31967: IFFALSE 31971
// continue ;
31969: GO 31941
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
31971: LD_VAR 0 4
31975: PUSH
31976: LD_INT 1
31978: ARRAY
31979: PPUSH
31980: LD_VAR 0 4
31984: PUSH
31985: LD_INT 2
31987: ARRAY
31988: PPUSH
31989: CALL_OW 428
31993: PUSH
31994: LD_VAR 0 5
31998: IN
31999: IFFALSE 32028
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
32001: LD_VAR 0 4
32005: PUSH
32006: LD_INT 1
32008: ARRAY
32009: PPUSH
32010: LD_VAR 0 4
32014: PUSH
32015: LD_INT 2
32017: ARRAY
32018: PPUSH
32019: LD_VAR 0 1
32023: PPUSH
32024: CALL_OW 456
// end ;
32028: GO 31941
32030: POP
32031: POP
// end ;
32032: LD_VAR 0 3
32036: RET
// export function Count ( array ) ; var i ; begin
32037: LD_INT 0
32039: PPUSH
32040: PPUSH
// result := 0 ;
32041: LD_ADDR_VAR 0 2
32045: PUSH
32046: LD_INT 0
32048: ST_TO_ADDR
// for i in array do
32049: LD_ADDR_VAR 0 3
32053: PUSH
32054: LD_VAR 0 1
32058: PUSH
32059: FOR_IN
32060: IFFALSE 32084
// if i then
32062: LD_VAR 0 3
32066: IFFALSE 32082
// result := result + 1 ;
32068: LD_ADDR_VAR 0 2
32072: PUSH
32073: LD_VAR 0 2
32077: PUSH
32078: LD_INT 1
32080: PLUS
32081: ST_TO_ADDR
32082: GO 32059
32084: POP
32085: POP
// end ;
32086: LD_VAR 0 2
32090: RET
// export function IsEmpty ( building ) ; begin
32091: LD_INT 0
32093: PPUSH
// if not building then
32094: LD_VAR 0 1
32098: NOT
32099: IFFALSE 32103
// exit ;
32101: GO 32146
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
32103: LD_ADDR_VAR 0 2
32107: PUSH
32108: LD_VAR 0 1
32112: PUSH
32113: LD_INT 22
32115: PUSH
32116: LD_VAR 0 1
32120: PPUSH
32121: CALL_OW 255
32125: PUSH
32126: EMPTY
32127: LIST
32128: LIST
32129: PUSH
32130: LD_INT 58
32132: PUSH
32133: EMPTY
32134: LIST
32135: PUSH
32136: EMPTY
32137: LIST
32138: LIST
32139: PPUSH
32140: CALL_OW 69
32144: IN
32145: ST_TO_ADDR
// end ;
32146: LD_VAR 0 2
32150: RET
// export function IsNotFull ( building ) ; begin
32151: LD_INT 0
32153: PPUSH
// if not building then
32154: LD_VAR 0 1
32158: NOT
32159: IFFALSE 32163
// exit ;
32161: GO 32182
// result := UnitsInside ( building ) < 6 ;
32163: LD_ADDR_VAR 0 2
32167: PUSH
32168: LD_VAR 0 1
32172: PPUSH
32173: CALL_OW 313
32177: PUSH
32178: LD_INT 6
32180: LESS
32181: ST_TO_ADDR
// end ;
32182: LD_VAR 0 2
32186: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
32187: LD_INT 0
32189: PPUSH
32190: PPUSH
32191: PPUSH
32192: PPUSH
// tmp := [ ] ;
32193: LD_ADDR_VAR 0 3
32197: PUSH
32198: EMPTY
32199: ST_TO_ADDR
// list := [ ] ;
32200: LD_ADDR_VAR 0 5
32204: PUSH
32205: EMPTY
32206: ST_TO_ADDR
// for i = 16 to 25 do
32207: LD_ADDR_VAR 0 4
32211: PUSH
32212: DOUBLE
32213: LD_INT 16
32215: DEC
32216: ST_TO_ADDR
32217: LD_INT 25
32219: PUSH
32220: FOR_TO
32221: IFFALSE 32294
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
32223: LD_ADDR_VAR 0 3
32227: PUSH
32228: LD_VAR 0 3
32232: PUSH
32233: LD_INT 22
32235: PUSH
32236: LD_VAR 0 1
32240: PPUSH
32241: CALL_OW 255
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: PUSH
32250: LD_INT 91
32252: PUSH
32253: LD_VAR 0 1
32257: PUSH
32258: LD_INT 6
32260: PUSH
32261: EMPTY
32262: LIST
32263: LIST
32264: LIST
32265: PUSH
32266: LD_INT 30
32268: PUSH
32269: LD_VAR 0 4
32273: PUSH
32274: EMPTY
32275: LIST
32276: LIST
32277: PUSH
32278: EMPTY
32279: LIST
32280: LIST
32281: LIST
32282: PUSH
32283: EMPTY
32284: LIST
32285: PPUSH
32286: CALL_OW 69
32290: ADD
32291: ST_TO_ADDR
32292: GO 32220
32294: POP
32295: POP
// for i = 1 to tmp do
32296: LD_ADDR_VAR 0 4
32300: PUSH
32301: DOUBLE
32302: LD_INT 1
32304: DEC
32305: ST_TO_ADDR
32306: LD_VAR 0 3
32310: PUSH
32311: FOR_TO
32312: IFFALSE 32400
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
32314: LD_ADDR_VAR 0 5
32318: PUSH
32319: LD_VAR 0 5
32323: PUSH
32324: LD_VAR 0 3
32328: PUSH
32329: LD_VAR 0 4
32333: ARRAY
32334: PPUSH
32335: CALL_OW 266
32339: PUSH
32340: LD_VAR 0 3
32344: PUSH
32345: LD_VAR 0 4
32349: ARRAY
32350: PPUSH
32351: CALL_OW 250
32355: PUSH
32356: LD_VAR 0 3
32360: PUSH
32361: LD_VAR 0 4
32365: ARRAY
32366: PPUSH
32367: CALL_OW 251
32371: PUSH
32372: LD_VAR 0 3
32376: PUSH
32377: LD_VAR 0 4
32381: ARRAY
32382: PPUSH
32383: CALL_OW 254
32387: PUSH
32388: EMPTY
32389: LIST
32390: LIST
32391: LIST
32392: LIST
32393: PUSH
32394: EMPTY
32395: LIST
32396: ADD
32397: ST_TO_ADDR
32398: GO 32311
32400: POP
32401: POP
// result := list ;
32402: LD_ADDR_VAR 0 2
32406: PUSH
32407: LD_VAR 0 5
32411: ST_TO_ADDR
// end ;
32412: LD_VAR 0 2
32416: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
32417: LD_INT 0
32419: PPUSH
32420: PPUSH
32421: PPUSH
32422: PPUSH
32423: PPUSH
32424: PPUSH
32425: PPUSH
// if not factory then
32426: LD_VAR 0 1
32430: NOT
32431: IFFALSE 32435
// exit ;
32433: GO 33028
// if control = control_apeman then
32435: LD_VAR 0 4
32439: PUSH
32440: LD_INT 5
32442: EQUAL
32443: IFFALSE 32552
// begin tmp := UnitsInside ( factory ) ;
32445: LD_ADDR_VAR 0 8
32449: PUSH
32450: LD_VAR 0 1
32454: PPUSH
32455: CALL_OW 313
32459: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
32460: LD_VAR 0 8
32464: PPUSH
32465: LD_INT 25
32467: PUSH
32468: LD_INT 12
32470: PUSH
32471: EMPTY
32472: LIST
32473: LIST
32474: PPUSH
32475: CALL_OW 72
32479: NOT
32480: IFFALSE 32490
// control := control_manual ;
32482: LD_ADDR_VAR 0 4
32486: PUSH
32487: LD_INT 1
32489: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
32490: LD_ADDR_VAR 0 8
32494: PUSH
32495: LD_VAR 0 1
32499: PPUSH
32500: CALL 32187 0 1
32504: ST_TO_ADDR
// if tmp then
32505: LD_VAR 0 8
32509: IFFALSE 32552
// begin for i in tmp do
32511: LD_ADDR_VAR 0 7
32515: PUSH
32516: LD_VAR 0 8
32520: PUSH
32521: FOR_IN
32522: IFFALSE 32550
// if i [ 1 ] = b_ext_radio then
32524: LD_VAR 0 7
32528: PUSH
32529: LD_INT 1
32531: ARRAY
32532: PUSH
32533: LD_INT 22
32535: EQUAL
32536: IFFALSE 32548
// begin control := control_remote ;
32538: LD_ADDR_VAR 0 4
32542: PUSH
32543: LD_INT 2
32545: ST_TO_ADDR
// break ;
32546: GO 32550
// end ;
32548: GO 32521
32550: POP
32551: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32552: LD_VAR 0 1
32556: PPUSH
32557: LD_VAR 0 2
32561: PPUSH
32562: LD_VAR 0 3
32566: PPUSH
32567: LD_VAR 0 4
32571: PPUSH
32572: LD_VAR 0 5
32576: PPUSH
32577: CALL_OW 448
32581: IFFALSE 32616
// begin result := [ chassis , engine , control , weapon ] ;
32583: LD_ADDR_VAR 0 6
32587: PUSH
32588: LD_VAR 0 2
32592: PUSH
32593: LD_VAR 0 3
32597: PUSH
32598: LD_VAR 0 4
32602: PUSH
32603: LD_VAR 0 5
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: ST_TO_ADDR
// exit ;
32614: GO 33028
// end ; _chassis := AvailableChassisList ( factory ) ;
32616: LD_ADDR_VAR 0 9
32620: PUSH
32621: LD_VAR 0 1
32625: PPUSH
32626: CALL_OW 475
32630: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
32631: LD_ADDR_VAR 0 11
32635: PUSH
32636: LD_VAR 0 1
32640: PPUSH
32641: CALL_OW 476
32645: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
32646: LD_ADDR_VAR 0 12
32650: PUSH
32651: LD_VAR 0 1
32655: PPUSH
32656: CALL_OW 477
32660: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
32661: LD_ADDR_VAR 0 10
32665: PUSH
32666: LD_VAR 0 1
32670: PPUSH
32671: CALL_OW 478
32675: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
32676: LD_VAR 0 9
32680: NOT
32681: PUSH
32682: LD_VAR 0 11
32686: NOT
32687: OR
32688: PUSH
32689: LD_VAR 0 12
32693: NOT
32694: OR
32695: PUSH
32696: LD_VAR 0 10
32700: NOT
32701: OR
32702: IFFALSE 32737
// begin result := [ chassis , engine , control , weapon ] ;
32704: LD_ADDR_VAR 0 6
32708: PUSH
32709: LD_VAR 0 2
32713: PUSH
32714: LD_VAR 0 3
32718: PUSH
32719: LD_VAR 0 4
32723: PUSH
32724: LD_VAR 0 5
32728: PUSH
32729: EMPTY
32730: LIST
32731: LIST
32732: LIST
32733: LIST
32734: ST_TO_ADDR
// exit ;
32735: GO 33028
// end ; if not chassis in _chassis then
32737: LD_VAR 0 2
32741: PUSH
32742: LD_VAR 0 9
32746: IN
32747: NOT
32748: IFFALSE 32774
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
32750: LD_ADDR_VAR 0 2
32754: PUSH
32755: LD_VAR 0 9
32759: PUSH
32760: LD_INT 1
32762: PPUSH
32763: LD_VAR 0 9
32767: PPUSH
32768: CALL_OW 12
32772: ARRAY
32773: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
32774: LD_VAR 0 2
32778: PPUSH
32779: LD_VAR 0 3
32783: PPUSH
32784: CALL 33033 0 2
32788: NOT
32789: IFFALSE 32848
// repeat engine := _engine [ 1 ] ;
32791: LD_ADDR_VAR 0 3
32795: PUSH
32796: LD_VAR 0 11
32800: PUSH
32801: LD_INT 1
32803: ARRAY
32804: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
32805: LD_ADDR_VAR 0 11
32809: PUSH
32810: LD_VAR 0 11
32814: PPUSH
32815: LD_INT 1
32817: PPUSH
32818: CALL_OW 3
32822: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
32823: LD_VAR 0 2
32827: PPUSH
32828: LD_VAR 0 3
32832: PPUSH
32833: CALL 33033 0 2
32837: PUSH
32838: LD_VAR 0 11
32842: PUSH
32843: EMPTY
32844: EQUAL
32845: OR
32846: IFFALSE 32791
// if not control in _control then
32848: LD_VAR 0 4
32852: PUSH
32853: LD_VAR 0 12
32857: IN
32858: NOT
32859: IFFALSE 32885
// control := _control [ rand ( 1 , _control ) ] ;
32861: LD_ADDR_VAR 0 4
32865: PUSH
32866: LD_VAR 0 12
32870: PUSH
32871: LD_INT 1
32873: PPUSH
32874: LD_VAR 0 12
32878: PPUSH
32879: CALL_OW 12
32883: ARRAY
32884: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
32885: LD_VAR 0 2
32889: PPUSH
32890: LD_VAR 0 5
32894: PPUSH
32895: CALL 33253 0 2
32899: NOT
32900: IFFALSE 32959
// repeat weapon := _weapon [ 1 ] ;
32902: LD_ADDR_VAR 0 5
32906: PUSH
32907: LD_VAR 0 10
32911: PUSH
32912: LD_INT 1
32914: ARRAY
32915: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
32916: LD_ADDR_VAR 0 10
32920: PUSH
32921: LD_VAR 0 10
32925: PPUSH
32926: LD_INT 1
32928: PPUSH
32929: CALL_OW 3
32933: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
32934: LD_VAR 0 2
32938: PPUSH
32939: LD_VAR 0 5
32943: PPUSH
32944: CALL 33253 0 2
32948: PUSH
32949: LD_VAR 0 10
32953: PUSH
32954: EMPTY
32955: EQUAL
32956: OR
32957: IFFALSE 32902
// result := [ ] ;
32959: LD_ADDR_VAR 0 6
32963: PUSH
32964: EMPTY
32965: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
32966: LD_VAR 0 1
32970: PPUSH
32971: LD_VAR 0 2
32975: PPUSH
32976: LD_VAR 0 3
32980: PPUSH
32981: LD_VAR 0 4
32985: PPUSH
32986: LD_VAR 0 5
32990: PPUSH
32991: CALL_OW 448
32995: IFFALSE 33028
// result := [ chassis , engine , control , weapon ] ;
32997: LD_ADDR_VAR 0 6
33001: PUSH
33002: LD_VAR 0 2
33006: PUSH
33007: LD_VAR 0 3
33011: PUSH
33012: LD_VAR 0 4
33016: PUSH
33017: LD_VAR 0 5
33021: PUSH
33022: EMPTY
33023: LIST
33024: LIST
33025: LIST
33026: LIST
33027: ST_TO_ADDR
// end ;
33028: LD_VAR 0 6
33032: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
33033: LD_INT 0
33035: PPUSH
// if not chassis or not engine then
33036: LD_VAR 0 1
33040: NOT
33041: PUSH
33042: LD_VAR 0 2
33046: NOT
33047: OR
33048: IFFALSE 33052
// exit ;
33050: GO 33248
// case engine of engine_solar :
33052: LD_VAR 0 2
33056: PUSH
33057: LD_INT 2
33059: DOUBLE
33060: EQUAL
33061: IFTRUE 33065
33063: GO 33103
33065: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
33066: LD_ADDR_VAR 0 3
33070: PUSH
33071: LD_INT 11
33073: PUSH
33074: LD_INT 12
33076: PUSH
33077: LD_INT 13
33079: PUSH
33080: LD_INT 14
33082: PUSH
33083: LD_INT 1
33085: PUSH
33086: LD_INT 2
33088: PUSH
33089: LD_INT 3
33091: PUSH
33092: EMPTY
33093: LIST
33094: LIST
33095: LIST
33096: LIST
33097: LIST
33098: LIST
33099: LIST
33100: ST_TO_ADDR
33101: GO 33232
33103: LD_INT 1
33105: DOUBLE
33106: EQUAL
33107: IFTRUE 33111
33109: GO 33173
33111: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
33112: LD_ADDR_VAR 0 3
33116: PUSH
33117: LD_INT 11
33119: PUSH
33120: LD_INT 12
33122: PUSH
33123: LD_INT 13
33125: PUSH
33126: LD_INT 14
33128: PUSH
33129: LD_INT 1
33131: PUSH
33132: LD_INT 2
33134: PUSH
33135: LD_INT 3
33137: PUSH
33138: LD_INT 4
33140: PUSH
33141: LD_INT 5
33143: PUSH
33144: LD_INT 21
33146: PUSH
33147: LD_INT 23
33149: PUSH
33150: LD_INT 22
33152: PUSH
33153: LD_INT 24
33155: PUSH
33156: EMPTY
33157: LIST
33158: LIST
33159: LIST
33160: LIST
33161: LIST
33162: LIST
33163: LIST
33164: LIST
33165: LIST
33166: LIST
33167: LIST
33168: LIST
33169: LIST
33170: ST_TO_ADDR
33171: GO 33232
33173: LD_INT 3
33175: DOUBLE
33176: EQUAL
33177: IFTRUE 33181
33179: GO 33231
33181: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
33182: LD_ADDR_VAR 0 3
33186: PUSH
33187: LD_INT 13
33189: PUSH
33190: LD_INT 14
33192: PUSH
33193: LD_INT 2
33195: PUSH
33196: LD_INT 3
33198: PUSH
33199: LD_INT 4
33201: PUSH
33202: LD_INT 5
33204: PUSH
33205: LD_INT 21
33207: PUSH
33208: LD_INT 22
33210: PUSH
33211: LD_INT 23
33213: PUSH
33214: LD_INT 24
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: LIST
33221: LIST
33222: LIST
33223: LIST
33224: LIST
33225: LIST
33226: LIST
33227: LIST
33228: ST_TO_ADDR
33229: GO 33232
33231: POP
// result := ( chassis in result ) ;
33232: LD_ADDR_VAR 0 3
33236: PUSH
33237: LD_VAR 0 1
33241: PUSH
33242: LD_VAR 0 3
33246: IN
33247: ST_TO_ADDR
// end ;
33248: LD_VAR 0 3
33252: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
33253: LD_INT 0
33255: PPUSH
// if not chassis or not weapon then
33256: LD_VAR 0 1
33260: NOT
33261: PUSH
33262: LD_VAR 0 2
33266: NOT
33267: OR
33268: IFFALSE 33272
// exit ;
33270: GO 34334
// case weapon of us_machine_gun :
33272: LD_VAR 0 2
33276: PUSH
33277: LD_INT 2
33279: DOUBLE
33280: EQUAL
33281: IFTRUE 33285
33283: GO 33315
33285: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
33286: LD_ADDR_VAR 0 3
33290: PUSH
33291: LD_INT 1
33293: PUSH
33294: LD_INT 2
33296: PUSH
33297: LD_INT 3
33299: PUSH
33300: LD_INT 4
33302: PUSH
33303: LD_INT 5
33305: PUSH
33306: EMPTY
33307: LIST
33308: LIST
33309: LIST
33310: LIST
33311: LIST
33312: ST_TO_ADDR
33313: GO 34318
33315: LD_INT 3
33317: DOUBLE
33318: EQUAL
33319: IFTRUE 33323
33321: GO 33353
33323: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
33324: LD_ADDR_VAR 0 3
33328: PUSH
33329: LD_INT 1
33331: PUSH
33332: LD_INT 2
33334: PUSH
33335: LD_INT 3
33337: PUSH
33338: LD_INT 4
33340: PUSH
33341: LD_INT 5
33343: PUSH
33344: EMPTY
33345: LIST
33346: LIST
33347: LIST
33348: LIST
33349: LIST
33350: ST_TO_ADDR
33351: GO 34318
33353: LD_INT 11
33355: DOUBLE
33356: EQUAL
33357: IFTRUE 33361
33359: GO 33391
33361: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
33362: LD_ADDR_VAR 0 3
33366: PUSH
33367: LD_INT 1
33369: PUSH
33370: LD_INT 2
33372: PUSH
33373: LD_INT 3
33375: PUSH
33376: LD_INT 4
33378: PUSH
33379: LD_INT 5
33381: PUSH
33382: EMPTY
33383: LIST
33384: LIST
33385: LIST
33386: LIST
33387: LIST
33388: ST_TO_ADDR
33389: GO 34318
33391: LD_INT 4
33393: DOUBLE
33394: EQUAL
33395: IFTRUE 33399
33397: GO 33425
33399: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
33400: LD_ADDR_VAR 0 3
33404: PUSH
33405: LD_INT 2
33407: PUSH
33408: LD_INT 3
33410: PUSH
33411: LD_INT 4
33413: PUSH
33414: LD_INT 5
33416: PUSH
33417: EMPTY
33418: LIST
33419: LIST
33420: LIST
33421: LIST
33422: ST_TO_ADDR
33423: GO 34318
33425: LD_INT 5
33427: DOUBLE
33428: EQUAL
33429: IFTRUE 33433
33431: GO 33459
33433: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
33434: LD_ADDR_VAR 0 3
33438: PUSH
33439: LD_INT 2
33441: PUSH
33442: LD_INT 3
33444: PUSH
33445: LD_INT 4
33447: PUSH
33448: LD_INT 5
33450: PUSH
33451: EMPTY
33452: LIST
33453: LIST
33454: LIST
33455: LIST
33456: ST_TO_ADDR
33457: GO 34318
33459: LD_INT 9
33461: DOUBLE
33462: EQUAL
33463: IFTRUE 33467
33465: GO 33493
33467: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
33468: LD_ADDR_VAR 0 3
33472: PUSH
33473: LD_INT 2
33475: PUSH
33476: LD_INT 3
33478: PUSH
33479: LD_INT 4
33481: PUSH
33482: LD_INT 5
33484: PUSH
33485: EMPTY
33486: LIST
33487: LIST
33488: LIST
33489: LIST
33490: ST_TO_ADDR
33491: GO 34318
33493: LD_INT 7
33495: DOUBLE
33496: EQUAL
33497: IFTRUE 33501
33499: GO 33527
33501: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
33502: LD_ADDR_VAR 0 3
33506: PUSH
33507: LD_INT 2
33509: PUSH
33510: LD_INT 3
33512: PUSH
33513: LD_INT 4
33515: PUSH
33516: LD_INT 5
33518: PUSH
33519: EMPTY
33520: LIST
33521: LIST
33522: LIST
33523: LIST
33524: ST_TO_ADDR
33525: GO 34318
33527: LD_INT 12
33529: DOUBLE
33530: EQUAL
33531: IFTRUE 33535
33533: GO 33561
33535: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
33536: LD_ADDR_VAR 0 3
33540: PUSH
33541: LD_INT 2
33543: PUSH
33544: LD_INT 3
33546: PUSH
33547: LD_INT 4
33549: PUSH
33550: LD_INT 5
33552: PUSH
33553: EMPTY
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: ST_TO_ADDR
33559: GO 34318
33561: LD_INT 13
33563: DOUBLE
33564: EQUAL
33565: IFTRUE 33569
33567: GO 33595
33569: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
33570: LD_ADDR_VAR 0 3
33574: PUSH
33575: LD_INT 2
33577: PUSH
33578: LD_INT 3
33580: PUSH
33581: LD_INT 4
33583: PUSH
33584: LD_INT 5
33586: PUSH
33587: EMPTY
33588: LIST
33589: LIST
33590: LIST
33591: LIST
33592: ST_TO_ADDR
33593: GO 34318
33595: LD_INT 14
33597: DOUBLE
33598: EQUAL
33599: IFTRUE 33603
33601: GO 33621
33603: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
33604: LD_ADDR_VAR 0 3
33608: PUSH
33609: LD_INT 4
33611: PUSH
33612: LD_INT 5
33614: PUSH
33615: EMPTY
33616: LIST
33617: LIST
33618: ST_TO_ADDR
33619: GO 34318
33621: LD_INT 6
33623: DOUBLE
33624: EQUAL
33625: IFTRUE 33629
33627: GO 33647
33629: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
33630: LD_ADDR_VAR 0 3
33634: PUSH
33635: LD_INT 4
33637: PUSH
33638: LD_INT 5
33640: PUSH
33641: EMPTY
33642: LIST
33643: LIST
33644: ST_TO_ADDR
33645: GO 34318
33647: LD_INT 10
33649: DOUBLE
33650: EQUAL
33651: IFTRUE 33655
33653: GO 33673
33655: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
33656: LD_ADDR_VAR 0 3
33660: PUSH
33661: LD_INT 4
33663: PUSH
33664: LD_INT 5
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: ST_TO_ADDR
33671: GO 34318
33673: LD_INT 22
33675: DOUBLE
33676: EQUAL
33677: IFTRUE 33681
33679: GO 33707
33681: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
33682: LD_ADDR_VAR 0 3
33686: PUSH
33687: LD_INT 11
33689: PUSH
33690: LD_INT 12
33692: PUSH
33693: LD_INT 13
33695: PUSH
33696: LD_INT 14
33698: PUSH
33699: EMPTY
33700: LIST
33701: LIST
33702: LIST
33703: LIST
33704: ST_TO_ADDR
33705: GO 34318
33707: LD_INT 23
33709: DOUBLE
33710: EQUAL
33711: IFTRUE 33715
33713: GO 33741
33715: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
33716: LD_ADDR_VAR 0 3
33720: PUSH
33721: LD_INT 11
33723: PUSH
33724: LD_INT 12
33726: PUSH
33727: LD_INT 13
33729: PUSH
33730: LD_INT 14
33732: PUSH
33733: EMPTY
33734: LIST
33735: LIST
33736: LIST
33737: LIST
33738: ST_TO_ADDR
33739: GO 34318
33741: LD_INT 24
33743: DOUBLE
33744: EQUAL
33745: IFTRUE 33749
33747: GO 33775
33749: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
33750: LD_ADDR_VAR 0 3
33754: PUSH
33755: LD_INT 11
33757: PUSH
33758: LD_INT 12
33760: PUSH
33761: LD_INT 13
33763: PUSH
33764: LD_INT 14
33766: PUSH
33767: EMPTY
33768: LIST
33769: LIST
33770: LIST
33771: LIST
33772: ST_TO_ADDR
33773: GO 34318
33775: LD_INT 30
33777: DOUBLE
33778: EQUAL
33779: IFTRUE 33783
33781: GO 33809
33783: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
33784: LD_ADDR_VAR 0 3
33788: PUSH
33789: LD_INT 11
33791: PUSH
33792: LD_INT 12
33794: PUSH
33795: LD_INT 13
33797: PUSH
33798: LD_INT 14
33800: PUSH
33801: EMPTY
33802: LIST
33803: LIST
33804: LIST
33805: LIST
33806: ST_TO_ADDR
33807: GO 34318
33809: LD_INT 25
33811: DOUBLE
33812: EQUAL
33813: IFTRUE 33817
33815: GO 33835
33817: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
33818: LD_ADDR_VAR 0 3
33822: PUSH
33823: LD_INT 13
33825: PUSH
33826: LD_INT 14
33828: PUSH
33829: EMPTY
33830: LIST
33831: LIST
33832: ST_TO_ADDR
33833: GO 34318
33835: LD_INT 27
33837: DOUBLE
33838: EQUAL
33839: IFTRUE 33843
33841: GO 33861
33843: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
33844: LD_ADDR_VAR 0 3
33848: PUSH
33849: LD_INT 13
33851: PUSH
33852: LD_INT 14
33854: PUSH
33855: EMPTY
33856: LIST
33857: LIST
33858: ST_TO_ADDR
33859: GO 34318
33861: LD_EXP 26
33865: DOUBLE
33866: EQUAL
33867: IFTRUE 33871
33869: GO 33897
33871: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
33872: LD_ADDR_VAR 0 3
33876: PUSH
33877: LD_INT 11
33879: PUSH
33880: LD_INT 12
33882: PUSH
33883: LD_INT 13
33885: PUSH
33886: LD_INT 14
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: LIST
33893: LIST
33894: ST_TO_ADDR
33895: GO 34318
33897: LD_INT 28
33899: DOUBLE
33900: EQUAL
33901: IFTRUE 33905
33903: GO 33923
33905: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
33906: LD_ADDR_VAR 0 3
33910: PUSH
33911: LD_INT 13
33913: PUSH
33914: LD_INT 14
33916: PUSH
33917: EMPTY
33918: LIST
33919: LIST
33920: ST_TO_ADDR
33921: GO 34318
33923: LD_INT 29
33925: DOUBLE
33926: EQUAL
33927: IFTRUE 33931
33929: GO 33949
33931: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
33932: LD_ADDR_VAR 0 3
33936: PUSH
33937: LD_INT 13
33939: PUSH
33940: LD_INT 14
33942: PUSH
33943: EMPTY
33944: LIST
33945: LIST
33946: ST_TO_ADDR
33947: GO 34318
33949: LD_INT 31
33951: DOUBLE
33952: EQUAL
33953: IFTRUE 33957
33955: GO 33975
33957: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
33958: LD_ADDR_VAR 0 3
33962: PUSH
33963: LD_INT 13
33965: PUSH
33966: LD_INT 14
33968: PUSH
33969: EMPTY
33970: LIST
33971: LIST
33972: ST_TO_ADDR
33973: GO 34318
33975: LD_INT 26
33977: DOUBLE
33978: EQUAL
33979: IFTRUE 33983
33981: GO 34001
33983: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
33984: LD_ADDR_VAR 0 3
33988: PUSH
33989: LD_INT 13
33991: PUSH
33992: LD_INT 14
33994: PUSH
33995: EMPTY
33996: LIST
33997: LIST
33998: ST_TO_ADDR
33999: GO 34318
34001: LD_INT 42
34003: DOUBLE
34004: EQUAL
34005: IFTRUE 34009
34007: GO 34035
34009: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
34010: LD_ADDR_VAR 0 3
34014: PUSH
34015: LD_INT 21
34017: PUSH
34018: LD_INT 22
34020: PUSH
34021: LD_INT 23
34023: PUSH
34024: LD_INT 24
34026: PUSH
34027: EMPTY
34028: LIST
34029: LIST
34030: LIST
34031: LIST
34032: ST_TO_ADDR
34033: GO 34318
34035: LD_INT 43
34037: DOUBLE
34038: EQUAL
34039: IFTRUE 34043
34041: GO 34069
34043: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
34044: LD_ADDR_VAR 0 3
34048: PUSH
34049: LD_INT 21
34051: PUSH
34052: LD_INT 22
34054: PUSH
34055: LD_INT 23
34057: PUSH
34058: LD_INT 24
34060: PUSH
34061: EMPTY
34062: LIST
34063: LIST
34064: LIST
34065: LIST
34066: ST_TO_ADDR
34067: GO 34318
34069: LD_INT 44
34071: DOUBLE
34072: EQUAL
34073: IFTRUE 34077
34075: GO 34103
34077: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
34078: LD_ADDR_VAR 0 3
34082: PUSH
34083: LD_INT 21
34085: PUSH
34086: LD_INT 22
34088: PUSH
34089: LD_INT 23
34091: PUSH
34092: LD_INT 24
34094: PUSH
34095: EMPTY
34096: LIST
34097: LIST
34098: LIST
34099: LIST
34100: ST_TO_ADDR
34101: GO 34318
34103: LD_INT 45
34105: DOUBLE
34106: EQUAL
34107: IFTRUE 34111
34109: GO 34137
34111: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
34112: LD_ADDR_VAR 0 3
34116: PUSH
34117: LD_INT 21
34119: PUSH
34120: LD_INT 22
34122: PUSH
34123: LD_INT 23
34125: PUSH
34126: LD_INT 24
34128: PUSH
34129: EMPTY
34130: LIST
34131: LIST
34132: LIST
34133: LIST
34134: ST_TO_ADDR
34135: GO 34318
34137: LD_INT 49
34139: DOUBLE
34140: EQUAL
34141: IFTRUE 34145
34143: GO 34171
34145: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
34146: LD_ADDR_VAR 0 3
34150: PUSH
34151: LD_INT 21
34153: PUSH
34154: LD_INT 22
34156: PUSH
34157: LD_INT 23
34159: PUSH
34160: LD_INT 24
34162: PUSH
34163: EMPTY
34164: LIST
34165: LIST
34166: LIST
34167: LIST
34168: ST_TO_ADDR
34169: GO 34318
34171: LD_INT 51
34173: DOUBLE
34174: EQUAL
34175: IFTRUE 34179
34177: GO 34205
34179: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
34180: LD_ADDR_VAR 0 3
34184: PUSH
34185: LD_INT 21
34187: PUSH
34188: LD_INT 22
34190: PUSH
34191: LD_INT 23
34193: PUSH
34194: LD_INT 24
34196: PUSH
34197: EMPTY
34198: LIST
34199: LIST
34200: LIST
34201: LIST
34202: ST_TO_ADDR
34203: GO 34318
34205: LD_INT 52
34207: DOUBLE
34208: EQUAL
34209: IFTRUE 34213
34211: GO 34239
34213: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
34214: LD_ADDR_VAR 0 3
34218: PUSH
34219: LD_INT 21
34221: PUSH
34222: LD_INT 22
34224: PUSH
34225: LD_INT 23
34227: PUSH
34228: LD_INT 24
34230: PUSH
34231: EMPTY
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: ST_TO_ADDR
34237: GO 34318
34239: LD_INT 53
34241: DOUBLE
34242: EQUAL
34243: IFTRUE 34247
34245: GO 34265
34247: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
34248: LD_ADDR_VAR 0 3
34252: PUSH
34253: LD_INT 23
34255: PUSH
34256: LD_INT 24
34258: PUSH
34259: EMPTY
34260: LIST
34261: LIST
34262: ST_TO_ADDR
34263: GO 34318
34265: LD_INT 46
34267: DOUBLE
34268: EQUAL
34269: IFTRUE 34273
34271: GO 34291
34273: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
34274: LD_ADDR_VAR 0 3
34278: PUSH
34279: LD_INT 23
34281: PUSH
34282: LD_INT 24
34284: PUSH
34285: EMPTY
34286: LIST
34287: LIST
34288: ST_TO_ADDR
34289: GO 34318
34291: LD_INT 47
34293: DOUBLE
34294: EQUAL
34295: IFTRUE 34299
34297: GO 34317
34299: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
34300: LD_ADDR_VAR 0 3
34304: PUSH
34305: LD_INT 23
34307: PUSH
34308: LD_INT 24
34310: PUSH
34311: EMPTY
34312: LIST
34313: LIST
34314: ST_TO_ADDR
34315: GO 34318
34317: POP
// result := ( chassis in result ) ;
34318: LD_ADDR_VAR 0 3
34322: PUSH
34323: LD_VAR 0 1
34327: PUSH
34328: LD_VAR 0 3
34332: IN
34333: ST_TO_ADDR
// end ;
34334: LD_VAR 0 3
34338: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
34339: LD_INT 0
34341: PPUSH
34342: PPUSH
34343: PPUSH
34344: PPUSH
34345: PPUSH
34346: PPUSH
34347: PPUSH
// result := array ;
34348: LD_ADDR_VAR 0 5
34352: PUSH
34353: LD_VAR 0 1
34357: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
34358: LD_VAR 0 1
34362: NOT
34363: PUSH
34364: LD_VAR 0 2
34368: NOT
34369: OR
34370: PUSH
34371: LD_VAR 0 3
34375: NOT
34376: OR
34377: PUSH
34378: LD_VAR 0 2
34382: PUSH
34383: LD_VAR 0 1
34387: GREATER
34388: OR
34389: PUSH
34390: LD_VAR 0 3
34394: PUSH
34395: LD_VAR 0 1
34399: GREATER
34400: OR
34401: IFFALSE 34405
// exit ;
34403: GO 34701
// if direction then
34405: LD_VAR 0 4
34409: IFFALSE 34473
// begin d := 1 ;
34411: LD_ADDR_VAR 0 9
34415: PUSH
34416: LD_INT 1
34418: ST_TO_ADDR
// if i_from > i_to then
34419: LD_VAR 0 2
34423: PUSH
34424: LD_VAR 0 3
34428: GREATER
34429: IFFALSE 34455
// length := ( array - i_from ) + i_to else
34431: LD_ADDR_VAR 0 11
34435: PUSH
34436: LD_VAR 0 1
34440: PUSH
34441: LD_VAR 0 2
34445: MINUS
34446: PUSH
34447: LD_VAR 0 3
34451: PLUS
34452: ST_TO_ADDR
34453: GO 34471
// length := i_to - i_from ;
34455: LD_ADDR_VAR 0 11
34459: PUSH
34460: LD_VAR 0 3
34464: PUSH
34465: LD_VAR 0 2
34469: MINUS
34470: ST_TO_ADDR
// end else
34471: GO 34534
// begin d := - 1 ;
34473: LD_ADDR_VAR 0 9
34477: PUSH
34478: LD_INT 1
34480: NEG
34481: ST_TO_ADDR
// if i_from > i_to then
34482: LD_VAR 0 2
34486: PUSH
34487: LD_VAR 0 3
34491: GREATER
34492: IFFALSE 34512
// length := i_from - i_to else
34494: LD_ADDR_VAR 0 11
34498: PUSH
34499: LD_VAR 0 2
34503: PUSH
34504: LD_VAR 0 3
34508: MINUS
34509: ST_TO_ADDR
34510: GO 34534
// length := ( array - i_to ) + i_from ;
34512: LD_ADDR_VAR 0 11
34516: PUSH
34517: LD_VAR 0 1
34521: PUSH
34522: LD_VAR 0 3
34526: MINUS
34527: PUSH
34528: LD_VAR 0 2
34532: PLUS
34533: ST_TO_ADDR
// end ; if not length then
34534: LD_VAR 0 11
34538: NOT
34539: IFFALSE 34543
// exit ;
34541: GO 34701
// tmp := array ;
34543: LD_ADDR_VAR 0 10
34547: PUSH
34548: LD_VAR 0 1
34552: ST_TO_ADDR
// for i = 1 to length do
34553: LD_ADDR_VAR 0 6
34557: PUSH
34558: DOUBLE
34559: LD_INT 1
34561: DEC
34562: ST_TO_ADDR
34563: LD_VAR 0 11
34567: PUSH
34568: FOR_TO
34569: IFFALSE 34689
// begin for j = 1 to array do
34571: LD_ADDR_VAR 0 7
34575: PUSH
34576: DOUBLE
34577: LD_INT 1
34579: DEC
34580: ST_TO_ADDR
34581: LD_VAR 0 1
34585: PUSH
34586: FOR_TO
34587: IFFALSE 34675
// begin k := j + d ;
34589: LD_ADDR_VAR 0 8
34593: PUSH
34594: LD_VAR 0 7
34598: PUSH
34599: LD_VAR 0 9
34603: PLUS
34604: ST_TO_ADDR
// if k > array then
34605: LD_VAR 0 8
34609: PUSH
34610: LD_VAR 0 1
34614: GREATER
34615: IFFALSE 34625
// k := 1 ;
34617: LD_ADDR_VAR 0 8
34621: PUSH
34622: LD_INT 1
34624: ST_TO_ADDR
// if not k then
34625: LD_VAR 0 8
34629: NOT
34630: IFFALSE 34642
// k := array ;
34632: LD_ADDR_VAR 0 8
34636: PUSH
34637: LD_VAR 0 1
34641: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
34642: LD_ADDR_VAR 0 10
34646: PUSH
34647: LD_VAR 0 10
34651: PPUSH
34652: LD_VAR 0 8
34656: PPUSH
34657: LD_VAR 0 1
34661: PUSH
34662: LD_VAR 0 7
34666: ARRAY
34667: PPUSH
34668: CALL_OW 1
34672: ST_TO_ADDR
// end ;
34673: GO 34586
34675: POP
34676: POP
// array := tmp ;
34677: LD_ADDR_VAR 0 1
34681: PUSH
34682: LD_VAR 0 10
34686: ST_TO_ADDR
// end ;
34687: GO 34568
34689: POP
34690: POP
// result := array ;
34691: LD_ADDR_VAR 0 5
34695: PUSH
34696: LD_VAR 0 1
34700: ST_TO_ADDR
// end ;
34701: LD_VAR 0 5
34705: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
34706: LD_INT 0
34708: PPUSH
34709: PPUSH
// result := 0 ;
34710: LD_ADDR_VAR 0 3
34714: PUSH
34715: LD_INT 0
34717: ST_TO_ADDR
// if not array or not value in array then
34718: LD_VAR 0 1
34722: NOT
34723: PUSH
34724: LD_VAR 0 2
34728: PUSH
34729: LD_VAR 0 1
34733: IN
34734: NOT
34735: OR
34736: IFFALSE 34740
// exit ;
34738: GO 34794
// for i = 1 to array do
34740: LD_ADDR_VAR 0 4
34744: PUSH
34745: DOUBLE
34746: LD_INT 1
34748: DEC
34749: ST_TO_ADDR
34750: LD_VAR 0 1
34754: PUSH
34755: FOR_TO
34756: IFFALSE 34792
// if value = array [ i ] then
34758: LD_VAR 0 2
34762: PUSH
34763: LD_VAR 0 1
34767: PUSH
34768: LD_VAR 0 4
34772: ARRAY
34773: EQUAL
34774: IFFALSE 34790
// begin result := i ;
34776: LD_ADDR_VAR 0 3
34780: PUSH
34781: LD_VAR 0 4
34785: ST_TO_ADDR
// exit ;
34786: POP
34787: POP
34788: GO 34794
// end ;
34790: GO 34755
34792: POP
34793: POP
// end ;
34794: LD_VAR 0 3
34798: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
34799: LD_INT 0
34801: PPUSH
// vc_chassis := chassis ;
34802: LD_ADDR_OWVAR 37
34806: PUSH
34807: LD_VAR 0 1
34811: ST_TO_ADDR
// vc_engine := engine ;
34812: LD_ADDR_OWVAR 39
34816: PUSH
34817: LD_VAR 0 2
34821: ST_TO_ADDR
// vc_control := control ;
34822: LD_ADDR_OWVAR 38
34826: PUSH
34827: LD_VAR 0 3
34831: ST_TO_ADDR
// vc_weapon := weapon ;
34832: LD_ADDR_OWVAR 40
34836: PUSH
34837: LD_VAR 0 4
34841: ST_TO_ADDR
// vc_fuel_battery := fuel ;
34842: LD_ADDR_OWVAR 41
34846: PUSH
34847: LD_VAR 0 5
34851: ST_TO_ADDR
// end ;
34852: LD_VAR 0 6
34856: RET
// export function WantPlant ( unit ) ; var task ; begin
34857: LD_INT 0
34859: PPUSH
34860: PPUSH
// result := false ;
34861: LD_ADDR_VAR 0 2
34865: PUSH
34866: LD_INT 0
34868: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
34869: LD_ADDR_VAR 0 3
34873: PUSH
34874: LD_VAR 0 1
34878: PPUSH
34879: CALL_OW 437
34883: ST_TO_ADDR
// if task then
34884: LD_VAR 0 3
34888: IFFALSE 34916
// if task [ 1 ] [ 1 ] = p then
34890: LD_VAR 0 3
34894: PUSH
34895: LD_INT 1
34897: ARRAY
34898: PUSH
34899: LD_INT 1
34901: ARRAY
34902: PUSH
34903: LD_STRING p
34905: EQUAL
34906: IFFALSE 34916
// result := true ;
34908: LD_ADDR_VAR 0 2
34912: PUSH
34913: LD_INT 1
34915: ST_TO_ADDR
// end ;
34916: LD_VAR 0 2
34920: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
34921: LD_INT 0
34923: PPUSH
34924: PPUSH
34925: PPUSH
34926: PPUSH
// if pos < 1 then
34927: LD_VAR 0 2
34931: PUSH
34932: LD_INT 1
34934: LESS
34935: IFFALSE 34939
// exit ;
34937: GO 35242
// if pos = 1 then
34939: LD_VAR 0 2
34943: PUSH
34944: LD_INT 1
34946: EQUAL
34947: IFFALSE 34980
// result := Replace ( arr , pos [ 1 ] , value ) else
34949: LD_ADDR_VAR 0 4
34953: PUSH
34954: LD_VAR 0 1
34958: PPUSH
34959: LD_VAR 0 2
34963: PUSH
34964: LD_INT 1
34966: ARRAY
34967: PPUSH
34968: LD_VAR 0 3
34972: PPUSH
34973: CALL_OW 1
34977: ST_TO_ADDR
34978: GO 35242
// begin tmp := arr ;
34980: LD_ADDR_VAR 0 6
34984: PUSH
34985: LD_VAR 0 1
34989: ST_TO_ADDR
// s_arr := [ tmp ] ;
34990: LD_ADDR_VAR 0 7
34994: PUSH
34995: LD_VAR 0 6
34999: PUSH
35000: EMPTY
35001: LIST
35002: ST_TO_ADDR
// for i = 1 to pos - 1 do
35003: LD_ADDR_VAR 0 5
35007: PUSH
35008: DOUBLE
35009: LD_INT 1
35011: DEC
35012: ST_TO_ADDR
35013: LD_VAR 0 2
35017: PUSH
35018: LD_INT 1
35020: MINUS
35021: PUSH
35022: FOR_TO
35023: IFFALSE 35068
// begin tmp := tmp [ pos [ i ] ] ;
35025: LD_ADDR_VAR 0 6
35029: PUSH
35030: LD_VAR 0 6
35034: PUSH
35035: LD_VAR 0 2
35039: PUSH
35040: LD_VAR 0 5
35044: ARRAY
35045: ARRAY
35046: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
35047: LD_ADDR_VAR 0 7
35051: PUSH
35052: LD_VAR 0 7
35056: PUSH
35057: LD_VAR 0 6
35061: PUSH
35062: EMPTY
35063: LIST
35064: ADD
35065: ST_TO_ADDR
// end ;
35066: GO 35022
35068: POP
35069: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
35070: LD_ADDR_VAR 0 6
35074: PUSH
35075: LD_VAR 0 6
35079: PPUSH
35080: LD_VAR 0 2
35084: PUSH
35085: LD_VAR 0 2
35089: ARRAY
35090: PPUSH
35091: LD_VAR 0 3
35095: PPUSH
35096: CALL_OW 1
35100: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
35101: LD_ADDR_VAR 0 7
35105: PUSH
35106: LD_VAR 0 7
35110: PPUSH
35111: LD_VAR 0 7
35115: PPUSH
35116: LD_VAR 0 6
35120: PPUSH
35121: CALL_OW 1
35125: ST_TO_ADDR
// for i = s_arr downto 2 do
35126: LD_ADDR_VAR 0 5
35130: PUSH
35131: DOUBLE
35132: LD_VAR 0 7
35136: INC
35137: ST_TO_ADDR
35138: LD_INT 2
35140: PUSH
35141: FOR_DOWNTO
35142: IFFALSE 35226
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
35144: LD_ADDR_VAR 0 6
35148: PUSH
35149: LD_VAR 0 7
35153: PUSH
35154: LD_VAR 0 5
35158: PUSH
35159: LD_INT 1
35161: MINUS
35162: ARRAY
35163: PPUSH
35164: LD_VAR 0 2
35168: PUSH
35169: LD_VAR 0 5
35173: PUSH
35174: LD_INT 1
35176: MINUS
35177: ARRAY
35178: PPUSH
35179: LD_VAR 0 7
35183: PUSH
35184: LD_VAR 0 5
35188: ARRAY
35189: PPUSH
35190: CALL_OW 1
35194: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
35195: LD_ADDR_VAR 0 7
35199: PUSH
35200: LD_VAR 0 7
35204: PPUSH
35205: LD_VAR 0 5
35209: PUSH
35210: LD_INT 1
35212: MINUS
35213: PPUSH
35214: LD_VAR 0 6
35218: PPUSH
35219: CALL_OW 1
35223: ST_TO_ADDR
// end ;
35224: GO 35141
35226: POP
35227: POP
// result := s_arr [ 1 ] ;
35228: LD_ADDR_VAR 0 4
35232: PUSH
35233: LD_VAR 0 7
35237: PUSH
35238: LD_INT 1
35240: ARRAY
35241: ST_TO_ADDR
// end ; end ;
35242: LD_VAR 0 4
35246: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
35247: LD_INT 0
35249: PPUSH
35250: PPUSH
// if not list then
35251: LD_VAR 0 1
35255: NOT
35256: IFFALSE 35260
// exit ;
35258: GO 35351
// i := list [ pos1 ] ;
35260: LD_ADDR_VAR 0 5
35264: PUSH
35265: LD_VAR 0 1
35269: PUSH
35270: LD_VAR 0 2
35274: ARRAY
35275: ST_TO_ADDR
// if not i then
35276: LD_VAR 0 5
35280: NOT
35281: IFFALSE 35285
// exit ;
35283: GO 35351
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
35285: LD_ADDR_VAR 0 1
35289: PUSH
35290: LD_VAR 0 1
35294: PPUSH
35295: LD_VAR 0 2
35299: PPUSH
35300: LD_VAR 0 1
35304: PUSH
35305: LD_VAR 0 3
35309: ARRAY
35310: PPUSH
35311: CALL_OW 1
35315: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
35316: LD_ADDR_VAR 0 1
35320: PUSH
35321: LD_VAR 0 1
35325: PPUSH
35326: LD_VAR 0 3
35330: PPUSH
35331: LD_VAR 0 5
35335: PPUSH
35336: CALL_OW 1
35340: ST_TO_ADDR
// result := list ;
35341: LD_ADDR_VAR 0 4
35345: PUSH
35346: LD_VAR 0 1
35350: ST_TO_ADDR
// end ;
35351: LD_VAR 0 4
35355: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
35356: LD_INT 0
35358: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
35359: LD_ADDR_VAR 0 5
35363: PUSH
35364: LD_VAR 0 1
35368: PPUSH
35369: CALL_OW 250
35373: PPUSH
35374: LD_VAR 0 1
35378: PPUSH
35379: CALL_OW 251
35383: PPUSH
35384: LD_VAR 0 2
35388: PPUSH
35389: LD_VAR 0 3
35393: PPUSH
35394: LD_VAR 0 4
35398: PPUSH
35399: CALL 35409 0 5
35403: ST_TO_ADDR
// end ;
35404: LD_VAR 0 5
35408: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
35409: LD_INT 0
35411: PPUSH
35412: PPUSH
35413: PPUSH
35414: PPUSH
// if not list then
35415: LD_VAR 0 3
35419: NOT
35420: IFFALSE 35424
// exit ;
35422: GO 35812
// result := [ ] ;
35424: LD_ADDR_VAR 0 6
35428: PUSH
35429: EMPTY
35430: ST_TO_ADDR
// for i in list do
35431: LD_ADDR_VAR 0 7
35435: PUSH
35436: LD_VAR 0 3
35440: PUSH
35441: FOR_IN
35442: IFFALSE 35644
// begin tmp := GetDistUnitXY ( i , x , y ) ;
35444: LD_ADDR_VAR 0 9
35448: PUSH
35449: LD_VAR 0 7
35453: PPUSH
35454: LD_VAR 0 1
35458: PPUSH
35459: LD_VAR 0 2
35463: PPUSH
35464: CALL_OW 297
35468: ST_TO_ADDR
// if not result then
35469: LD_VAR 0 6
35473: NOT
35474: IFFALSE 35500
// result := [ [ i , tmp ] ] else
35476: LD_ADDR_VAR 0 6
35480: PUSH
35481: LD_VAR 0 7
35485: PUSH
35486: LD_VAR 0 9
35490: PUSH
35491: EMPTY
35492: LIST
35493: LIST
35494: PUSH
35495: EMPTY
35496: LIST
35497: ST_TO_ADDR
35498: GO 35642
// begin if result [ result ] [ 2 ] < tmp then
35500: LD_VAR 0 6
35504: PUSH
35505: LD_VAR 0 6
35509: ARRAY
35510: PUSH
35511: LD_INT 2
35513: ARRAY
35514: PUSH
35515: LD_VAR 0 9
35519: LESS
35520: IFFALSE 35562
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
35522: LD_ADDR_VAR 0 6
35526: PUSH
35527: LD_VAR 0 6
35531: PPUSH
35532: LD_VAR 0 6
35536: PUSH
35537: LD_INT 1
35539: PLUS
35540: PPUSH
35541: LD_VAR 0 7
35545: PUSH
35546: LD_VAR 0 9
35550: PUSH
35551: EMPTY
35552: LIST
35553: LIST
35554: PPUSH
35555: CALL_OW 2
35559: ST_TO_ADDR
35560: GO 35642
// for j = 1 to result do
35562: LD_ADDR_VAR 0 8
35566: PUSH
35567: DOUBLE
35568: LD_INT 1
35570: DEC
35571: ST_TO_ADDR
35572: LD_VAR 0 6
35576: PUSH
35577: FOR_TO
35578: IFFALSE 35640
// begin if tmp < result [ j ] [ 2 ] then
35580: LD_VAR 0 9
35584: PUSH
35585: LD_VAR 0 6
35589: PUSH
35590: LD_VAR 0 8
35594: ARRAY
35595: PUSH
35596: LD_INT 2
35598: ARRAY
35599: LESS
35600: IFFALSE 35638
// begin result := Insert ( result , j , [ i , tmp ] ) ;
35602: LD_ADDR_VAR 0 6
35606: PUSH
35607: LD_VAR 0 6
35611: PPUSH
35612: LD_VAR 0 8
35616: PPUSH
35617: LD_VAR 0 7
35621: PUSH
35622: LD_VAR 0 9
35626: PUSH
35627: EMPTY
35628: LIST
35629: LIST
35630: PPUSH
35631: CALL_OW 2
35635: ST_TO_ADDR
// break ;
35636: GO 35640
// end ; end ;
35638: GO 35577
35640: POP
35641: POP
// end ; end ;
35642: GO 35441
35644: POP
35645: POP
// if result and not asc then
35646: LD_VAR 0 6
35650: PUSH
35651: LD_VAR 0 4
35655: NOT
35656: AND
35657: IFFALSE 35732
// begin tmp := result ;
35659: LD_ADDR_VAR 0 9
35663: PUSH
35664: LD_VAR 0 6
35668: ST_TO_ADDR
// for i = tmp downto 1 do
35669: LD_ADDR_VAR 0 7
35673: PUSH
35674: DOUBLE
35675: LD_VAR 0 9
35679: INC
35680: ST_TO_ADDR
35681: LD_INT 1
35683: PUSH
35684: FOR_DOWNTO
35685: IFFALSE 35730
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
35687: LD_ADDR_VAR 0 6
35691: PUSH
35692: LD_VAR 0 6
35696: PPUSH
35697: LD_VAR 0 9
35701: PUSH
35702: LD_VAR 0 7
35706: MINUS
35707: PUSH
35708: LD_INT 1
35710: PLUS
35711: PPUSH
35712: LD_VAR 0 9
35716: PUSH
35717: LD_VAR 0 7
35721: ARRAY
35722: PPUSH
35723: CALL_OW 1
35727: ST_TO_ADDR
35728: GO 35684
35730: POP
35731: POP
// end ; tmp := [ ] ;
35732: LD_ADDR_VAR 0 9
35736: PUSH
35737: EMPTY
35738: ST_TO_ADDR
// if mode then
35739: LD_VAR 0 5
35743: IFFALSE 35812
// begin for i = 1 to result do
35745: LD_ADDR_VAR 0 7
35749: PUSH
35750: DOUBLE
35751: LD_INT 1
35753: DEC
35754: ST_TO_ADDR
35755: LD_VAR 0 6
35759: PUSH
35760: FOR_TO
35761: IFFALSE 35800
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
35763: LD_ADDR_VAR 0 9
35767: PUSH
35768: LD_VAR 0 9
35772: PPUSH
35773: LD_VAR 0 7
35777: PPUSH
35778: LD_VAR 0 6
35782: PUSH
35783: LD_VAR 0 7
35787: ARRAY
35788: PUSH
35789: LD_INT 1
35791: ARRAY
35792: PPUSH
35793: CALL_OW 1
35797: ST_TO_ADDR
35798: GO 35760
35800: POP
35801: POP
// result := tmp ;
35802: LD_ADDR_VAR 0 6
35806: PUSH
35807: LD_VAR 0 9
35811: ST_TO_ADDR
// end ; end ;
35812: LD_VAR 0 6
35816: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
35817: LD_INT 0
35819: PPUSH
35820: PPUSH
35821: PPUSH
35822: PPUSH
35823: PPUSH
35824: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
35825: LD_ADDR_VAR 0 5
35829: PUSH
35830: LD_INT 0
35832: PUSH
35833: LD_INT 0
35835: PUSH
35836: LD_INT 0
35838: PUSH
35839: EMPTY
35840: PUSH
35841: EMPTY
35842: LIST
35843: LIST
35844: LIST
35845: LIST
35846: ST_TO_ADDR
// if not x or not y then
35847: LD_VAR 0 2
35851: NOT
35852: PUSH
35853: LD_VAR 0 3
35857: NOT
35858: OR
35859: IFFALSE 35863
// exit ;
35861: GO 37515
// if not range then
35863: LD_VAR 0 4
35867: NOT
35868: IFFALSE 35878
// range := 10 ;
35870: LD_ADDR_VAR 0 4
35874: PUSH
35875: LD_INT 10
35877: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35878: LD_ADDR_VAR 0 8
35882: PUSH
35883: LD_INT 81
35885: PUSH
35886: LD_VAR 0 1
35890: PUSH
35891: EMPTY
35892: LIST
35893: LIST
35894: PUSH
35895: LD_INT 92
35897: PUSH
35898: LD_VAR 0 2
35902: PUSH
35903: LD_VAR 0 3
35907: PUSH
35908: LD_VAR 0 4
35912: PUSH
35913: EMPTY
35914: LIST
35915: LIST
35916: LIST
35917: LIST
35918: PUSH
35919: LD_INT 3
35921: PUSH
35922: LD_INT 21
35924: PUSH
35925: LD_INT 3
35927: PUSH
35928: EMPTY
35929: LIST
35930: LIST
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: LIST
35940: PPUSH
35941: CALL_OW 69
35945: ST_TO_ADDR
// if not tmp then
35946: LD_VAR 0 8
35950: NOT
35951: IFFALSE 35955
// exit ;
35953: GO 37515
// for i in tmp do
35955: LD_ADDR_VAR 0 6
35959: PUSH
35960: LD_VAR 0 8
35964: PUSH
35965: FOR_IN
35966: IFFALSE 37490
// begin points := [ 0 , 0 , 0 ] ;
35968: LD_ADDR_VAR 0 9
35972: PUSH
35973: LD_INT 0
35975: PUSH
35976: LD_INT 0
35978: PUSH
35979: LD_INT 0
35981: PUSH
35982: EMPTY
35983: LIST
35984: LIST
35985: LIST
35986: ST_TO_ADDR
// bpoints := 1 ;
35987: LD_ADDR_VAR 0 10
35991: PUSH
35992: LD_INT 1
35994: ST_TO_ADDR
// case GetType ( i ) of unit_human :
35995: LD_VAR 0 6
35999: PPUSH
36000: CALL_OW 247
36004: PUSH
36005: LD_INT 1
36007: DOUBLE
36008: EQUAL
36009: IFTRUE 36013
36011: GO 36591
36013: POP
// begin if GetClass ( i ) = 1 then
36014: LD_VAR 0 6
36018: PPUSH
36019: CALL_OW 257
36023: PUSH
36024: LD_INT 1
36026: EQUAL
36027: IFFALSE 36048
// points := [ 10 , 5 , 3 ] ;
36029: LD_ADDR_VAR 0 9
36033: PUSH
36034: LD_INT 10
36036: PUSH
36037: LD_INT 5
36039: PUSH
36040: LD_INT 3
36042: PUSH
36043: EMPTY
36044: LIST
36045: LIST
36046: LIST
36047: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
36048: LD_VAR 0 6
36052: PPUSH
36053: CALL_OW 257
36057: PUSH
36058: LD_INT 2
36060: PUSH
36061: LD_INT 3
36063: PUSH
36064: LD_INT 4
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: LIST
36071: IN
36072: IFFALSE 36093
// points := [ 3 , 2 , 1 ] ;
36074: LD_ADDR_VAR 0 9
36078: PUSH
36079: LD_INT 3
36081: PUSH
36082: LD_INT 2
36084: PUSH
36085: LD_INT 1
36087: PUSH
36088: EMPTY
36089: LIST
36090: LIST
36091: LIST
36092: ST_TO_ADDR
// if GetClass ( i ) = 5 then
36093: LD_VAR 0 6
36097: PPUSH
36098: CALL_OW 257
36102: PUSH
36103: LD_INT 5
36105: EQUAL
36106: IFFALSE 36127
// points := [ 130 , 5 , 2 ] ;
36108: LD_ADDR_VAR 0 9
36112: PUSH
36113: LD_INT 130
36115: PUSH
36116: LD_INT 5
36118: PUSH
36119: LD_INT 2
36121: PUSH
36122: EMPTY
36123: LIST
36124: LIST
36125: LIST
36126: ST_TO_ADDR
// if GetClass ( i ) = 8 then
36127: LD_VAR 0 6
36131: PPUSH
36132: CALL_OW 257
36136: PUSH
36137: LD_INT 8
36139: EQUAL
36140: IFFALSE 36161
// points := [ 35 , 35 , 30 ] ;
36142: LD_ADDR_VAR 0 9
36146: PUSH
36147: LD_INT 35
36149: PUSH
36150: LD_INT 35
36152: PUSH
36153: LD_INT 30
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: LIST
36160: ST_TO_ADDR
// if GetClass ( i ) = 9 then
36161: LD_VAR 0 6
36165: PPUSH
36166: CALL_OW 257
36170: PUSH
36171: LD_INT 9
36173: EQUAL
36174: IFFALSE 36195
// points := [ 20 , 55 , 40 ] ;
36176: LD_ADDR_VAR 0 9
36180: PUSH
36181: LD_INT 20
36183: PUSH
36184: LD_INT 55
36186: PUSH
36187: LD_INT 40
36189: PUSH
36190: EMPTY
36191: LIST
36192: LIST
36193: LIST
36194: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
36195: LD_VAR 0 6
36199: PPUSH
36200: CALL_OW 257
36204: PUSH
36205: LD_INT 12
36207: PUSH
36208: LD_INT 16
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: IN
36215: IFFALSE 36236
// points := [ 5 , 3 , 2 ] ;
36217: LD_ADDR_VAR 0 9
36221: PUSH
36222: LD_INT 5
36224: PUSH
36225: LD_INT 3
36227: PUSH
36228: LD_INT 2
36230: PUSH
36231: EMPTY
36232: LIST
36233: LIST
36234: LIST
36235: ST_TO_ADDR
// if GetClass ( i ) = 17 then
36236: LD_VAR 0 6
36240: PPUSH
36241: CALL_OW 257
36245: PUSH
36246: LD_INT 17
36248: EQUAL
36249: IFFALSE 36270
// points := [ 100 , 50 , 75 ] ;
36251: LD_ADDR_VAR 0 9
36255: PUSH
36256: LD_INT 100
36258: PUSH
36259: LD_INT 50
36261: PUSH
36262: LD_INT 75
36264: PUSH
36265: EMPTY
36266: LIST
36267: LIST
36268: LIST
36269: ST_TO_ADDR
// if GetClass ( i ) = 15 then
36270: LD_VAR 0 6
36274: PPUSH
36275: CALL_OW 257
36279: PUSH
36280: LD_INT 15
36282: EQUAL
36283: IFFALSE 36304
// points := [ 10 , 5 , 3 ] ;
36285: LD_ADDR_VAR 0 9
36289: PUSH
36290: LD_INT 10
36292: PUSH
36293: LD_INT 5
36295: PUSH
36296: LD_INT 3
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: LIST
36303: ST_TO_ADDR
// if GetClass ( i ) = 14 then
36304: LD_VAR 0 6
36308: PPUSH
36309: CALL_OW 257
36313: PUSH
36314: LD_INT 14
36316: EQUAL
36317: IFFALSE 36338
// points := [ 10 , 0 , 0 ] ;
36319: LD_ADDR_VAR 0 9
36323: PUSH
36324: LD_INT 10
36326: PUSH
36327: LD_INT 0
36329: PUSH
36330: LD_INT 0
36332: PUSH
36333: EMPTY
36334: LIST
36335: LIST
36336: LIST
36337: ST_TO_ADDR
// if GetClass ( i ) = 11 then
36338: LD_VAR 0 6
36342: PPUSH
36343: CALL_OW 257
36347: PUSH
36348: LD_INT 11
36350: EQUAL
36351: IFFALSE 36372
// points := [ 30 , 10 , 5 ] ;
36353: LD_ADDR_VAR 0 9
36357: PUSH
36358: LD_INT 30
36360: PUSH
36361: LD_INT 10
36363: PUSH
36364: LD_INT 5
36366: PUSH
36367: EMPTY
36368: LIST
36369: LIST
36370: LIST
36371: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
36372: LD_VAR 0 1
36376: PPUSH
36377: LD_INT 5
36379: PPUSH
36380: CALL_OW 321
36384: PUSH
36385: LD_INT 2
36387: EQUAL
36388: IFFALSE 36405
// bpoints := bpoints * 1.8 ;
36390: LD_ADDR_VAR 0 10
36394: PUSH
36395: LD_VAR 0 10
36399: PUSH
36400: LD_REAL  1.80000000000000E+0000
36403: MUL
36404: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
36405: LD_VAR 0 6
36409: PPUSH
36410: CALL_OW 257
36414: PUSH
36415: LD_INT 1
36417: PUSH
36418: LD_INT 2
36420: PUSH
36421: LD_INT 3
36423: PUSH
36424: LD_INT 4
36426: PUSH
36427: EMPTY
36428: LIST
36429: LIST
36430: LIST
36431: LIST
36432: IN
36433: PUSH
36434: LD_VAR 0 1
36438: PPUSH
36439: LD_INT 51
36441: PPUSH
36442: CALL_OW 321
36446: PUSH
36447: LD_INT 2
36449: EQUAL
36450: AND
36451: IFFALSE 36468
// bpoints := bpoints * 1.2 ;
36453: LD_ADDR_VAR 0 10
36457: PUSH
36458: LD_VAR 0 10
36462: PUSH
36463: LD_REAL  1.20000000000000E+0000
36466: MUL
36467: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
36468: LD_VAR 0 6
36472: PPUSH
36473: CALL_OW 257
36477: PUSH
36478: LD_INT 5
36480: PUSH
36481: LD_INT 7
36483: PUSH
36484: LD_INT 9
36486: PUSH
36487: EMPTY
36488: LIST
36489: LIST
36490: LIST
36491: IN
36492: PUSH
36493: LD_VAR 0 1
36497: PPUSH
36498: LD_INT 52
36500: PPUSH
36501: CALL_OW 321
36505: PUSH
36506: LD_INT 2
36508: EQUAL
36509: AND
36510: IFFALSE 36527
// bpoints := bpoints * 1.5 ;
36512: LD_ADDR_VAR 0 10
36516: PUSH
36517: LD_VAR 0 10
36521: PUSH
36522: LD_REAL  1.50000000000000E+0000
36525: MUL
36526: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
36527: LD_VAR 0 1
36531: PPUSH
36532: LD_INT 66
36534: PPUSH
36535: CALL_OW 321
36539: PUSH
36540: LD_INT 2
36542: EQUAL
36543: IFFALSE 36560
// bpoints := bpoints * 1.1 ;
36545: LD_ADDR_VAR 0 10
36549: PUSH
36550: LD_VAR 0 10
36554: PUSH
36555: LD_REAL  1.10000000000000E+0000
36558: MUL
36559: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
36560: LD_ADDR_VAR 0 10
36564: PUSH
36565: LD_VAR 0 10
36569: PUSH
36570: LD_VAR 0 6
36574: PPUSH
36575: LD_INT 1
36577: PPUSH
36578: CALL_OW 259
36582: PUSH
36583: LD_REAL  1.15000000000000E+0000
36586: MUL
36587: MUL
36588: ST_TO_ADDR
// end ; unit_vehicle :
36589: GO 37419
36591: LD_INT 2
36593: DOUBLE
36594: EQUAL
36595: IFTRUE 36599
36597: GO 37407
36599: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
36600: LD_VAR 0 6
36604: PPUSH
36605: CALL_OW 264
36609: PUSH
36610: LD_INT 2
36612: PUSH
36613: LD_INT 42
36615: PUSH
36616: LD_INT 24
36618: PUSH
36619: EMPTY
36620: LIST
36621: LIST
36622: LIST
36623: IN
36624: IFFALSE 36645
// points := [ 25 , 5 , 3 ] ;
36626: LD_ADDR_VAR 0 9
36630: PUSH
36631: LD_INT 25
36633: PUSH
36634: LD_INT 5
36636: PUSH
36637: LD_INT 3
36639: PUSH
36640: EMPTY
36641: LIST
36642: LIST
36643: LIST
36644: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
36645: LD_VAR 0 6
36649: PPUSH
36650: CALL_OW 264
36654: PUSH
36655: LD_INT 4
36657: PUSH
36658: LD_INT 43
36660: PUSH
36661: LD_INT 25
36663: PUSH
36664: EMPTY
36665: LIST
36666: LIST
36667: LIST
36668: IN
36669: IFFALSE 36690
// points := [ 40 , 15 , 5 ] ;
36671: LD_ADDR_VAR 0 9
36675: PUSH
36676: LD_INT 40
36678: PUSH
36679: LD_INT 15
36681: PUSH
36682: LD_INT 5
36684: PUSH
36685: EMPTY
36686: LIST
36687: LIST
36688: LIST
36689: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
36690: LD_VAR 0 6
36694: PPUSH
36695: CALL_OW 264
36699: PUSH
36700: LD_INT 3
36702: PUSH
36703: LD_INT 23
36705: PUSH
36706: EMPTY
36707: LIST
36708: LIST
36709: IN
36710: IFFALSE 36731
// points := [ 7 , 25 , 8 ] ;
36712: LD_ADDR_VAR 0 9
36716: PUSH
36717: LD_INT 7
36719: PUSH
36720: LD_INT 25
36722: PUSH
36723: LD_INT 8
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: LIST
36730: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
36731: LD_VAR 0 6
36735: PPUSH
36736: CALL_OW 264
36740: PUSH
36741: LD_INT 5
36743: PUSH
36744: LD_INT 27
36746: PUSH
36747: LD_INT 44
36749: PUSH
36750: EMPTY
36751: LIST
36752: LIST
36753: LIST
36754: IN
36755: IFFALSE 36776
// points := [ 14 , 50 , 16 ] ;
36757: LD_ADDR_VAR 0 9
36761: PUSH
36762: LD_INT 14
36764: PUSH
36765: LD_INT 50
36767: PUSH
36768: LD_INT 16
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: LIST
36775: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
36776: LD_VAR 0 6
36780: PPUSH
36781: CALL_OW 264
36785: PUSH
36786: LD_INT 6
36788: PUSH
36789: LD_INT 46
36791: PUSH
36792: EMPTY
36793: LIST
36794: LIST
36795: IN
36796: IFFALSE 36817
// points := [ 32 , 120 , 70 ] ;
36798: LD_ADDR_VAR 0 9
36802: PUSH
36803: LD_INT 32
36805: PUSH
36806: LD_INT 120
36808: PUSH
36809: LD_INT 70
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: LIST
36816: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
36817: LD_VAR 0 6
36821: PPUSH
36822: CALL_OW 264
36826: PUSH
36827: LD_INT 7
36829: PUSH
36830: LD_INT 28
36832: PUSH
36833: LD_INT 45
36835: PUSH
36836: LD_EXP 26
36840: PUSH
36841: EMPTY
36842: LIST
36843: LIST
36844: LIST
36845: LIST
36846: IN
36847: IFFALSE 36868
// points := [ 35 , 20 , 45 ] ;
36849: LD_ADDR_VAR 0 9
36853: PUSH
36854: LD_INT 35
36856: PUSH
36857: LD_INT 20
36859: PUSH
36860: LD_INT 45
36862: PUSH
36863: EMPTY
36864: LIST
36865: LIST
36866: LIST
36867: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
36868: LD_VAR 0 6
36872: PPUSH
36873: CALL_OW 264
36877: PUSH
36878: LD_INT 47
36880: PUSH
36881: EMPTY
36882: LIST
36883: IN
36884: IFFALSE 36905
// points := [ 67 , 45 , 75 ] ;
36886: LD_ADDR_VAR 0 9
36890: PUSH
36891: LD_INT 67
36893: PUSH
36894: LD_INT 45
36896: PUSH
36897: LD_INT 75
36899: PUSH
36900: EMPTY
36901: LIST
36902: LIST
36903: LIST
36904: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
36905: LD_VAR 0 6
36909: PPUSH
36910: CALL_OW 264
36914: PUSH
36915: LD_INT 26
36917: PUSH
36918: EMPTY
36919: LIST
36920: IN
36921: IFFALSE 36942
// points := [ 120 , 30 , 80 ] ;
36923: LD_ADDR_VAR 0 9
36927: PUSH
36928: LD_INT 120
36930: PUSH
36931: LD_INT 30
36933: PUSH
36934: LD_INT 80
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: LIST
36941: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
36942: LD_VAR 0 6
36946: PPUSH
36947: CALL_OW 264
36951: PUSH
36952: LD_INT 22
36954: PUSH
36955: EMPTY
36956: LIST
36957: IN
36958: IFFALSE 36979
// points := [ 40 , 1 , 1 ] ;
36960: LD_ADDR_VAR 0 9
36964: PUSH
36965: LD_INT 40
36967: PUSH
36968: LD_INT 1
36970: PUSH
36971: LD_INT 1
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: LIST
36978: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
36979: LD_VAR 0 6
36983: PPUSH
36984: CALL_OW 264
36988: PUSH
36989: LD_INT 29
36991: PUSH
36992: EMPTY
36993: LIST
36994: IN
36995: IFFALSE 37016
// points := [ 70 , 200 , 400 ] ;
36997: LD_ADDR_VAR 0 9
37001: PUSH
37002: LD_INT 70
37004: PUSH
37005: LD_INT 200
37007: PUSH
37008: LD_INT 400
37010: PUSH
37011: EMPTY
37012: LIST
37013: LIST
37014: LIST
37015: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
37016: LD_VAR 0 6
37020: PPUSH
37021: CALL_OW 264
37025: PUSH
37026: LD_INT 14
37028: PUSH
37029: LD_INT 53
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: IN
37036: IFFALSE 37057
// points := [ 40 , 10 , 20 ] ;
37038: LD_ADDR_VAR 0 9
37042: PUSH
37043: LD_INT 40
37045: PUSH
37046: LD_INT 10
37048: PUSH
37049: LD_INT 20
37051: PUSH
37052: EMPTY
37053: LIST
37054: LIST
37055: LIST
37056: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
37057: LD_VAR 0 6
37061: PPUSH
37062: CALL_OW 264
37066: PUSH
37067: LD_INT 9
37069: PUSH
37070: EMPTY
37071: LIST
37072: IN
37073: IFFALSE 37094
// points := [ 5 , 70 , 20 ] ;
37075: LD_ADDR_VAR 0 9
37079: PUSH
37080: LD_INT 5
37082: PUSH
37083: LD_INT 70
37085: PUSH
37086: LD_INT 20
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: LIST
37093: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
37094: LD_VAR 0 6
37098: PPUSH
37099: CALL_OW 264
37103: PUSH
37104: LD_INT 10
37106: PUSH
37107: EMPTY
37108: LIST
37109: IN
37110: IFFALSE 37131
// points := [ 35 , 110 , 70 ] ;
37112: LD_ADDR_VAR 0 9
37116: PUSH
37117: LD_INT 35
37119: PUSH
37120: LD_INT 110
37122: PUSH
37123: LD_INT 70
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: LIST
37130: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
37131: LD_VAR 0 6
37135: PPUSH
37136: CALL_OW 265
37140: PUSH
37141: LD_INT 25
37143: EQUAL
37144: IFFALSE 37165
// points := [ 80 , 65 , 100 ] ;
37146: LD_ADDR_VAR 0 9
37150: PUSH
37151: LD_INT 80
37153: PUSH
37154: LD_INT 65
37156: PUSH
37157: LD_INT 100
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: LIST
37164: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
37165: LD_VAR 0 6
37169: PPUSH
37170: CALL_OW 263
37174: PUSH
37175: LD_INT 1
37177: EQUAL
37178: IFFALSE 37213
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
37180: LD_ADDR_VAR 0 10
37184: PUSH
37185: LD_VAR 0 10
37189: PUSH
37190: LD_VAR 0 6
37194: PPUSH
37195: CALL_OW 311
37199: PPUSH
37200: LD_INT 3
37202: PPUSH
37203: CALL_OW 259
37207: PUSH
37208: LD_INT 4
37210: MUL
37211: MUL
37212: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
37213: LD_VAR 0 6
37217: PPUSH
37218: CALL_OW 263
37222: PUSH
37223: LD_INT 2
37225: EQUAL
37226: IFFALSE 37277
// begin j := IsControledBy ( i ) ;
37228: LD_ADDR_VAR 0 7
37232: PUSH
37233: LD_VAR 0 6
37237: PPUSH
37238: CALL_OW 312
37242: ST_TO_ADDR
// if j then
37243: LD_VAR 0 7
37247: IFFALSE 37277
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
37249: LD_ADDR_VAR 0 10
37253: PUSH
37254: LD_VAR 0 10
37258: PUSH
37259: LD_VAR 0 7
37263: PPUSH
37264: LD_INT 3
37266: PPUSH
37267: CALL_OW 259
37271: PUSH
37272: LD_INT 3
37274: MUL
37275: MUL
37276: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
37277: LD_VAR 0 6
37281: PPUSH
37282: CALL_OW 264
37286: PUSH
37287: LD_INT 5
37289: PUSH
37290: LD_INT 6
37292: PUSH
37293: LD_INT 46
37295: PUSH
37296: LD_INT 44
37298: PUSH
37299: LD_INT 47
37301: PUSH
37302: LD_INT 45
37304: PUSH
37305: LD_INT 28
37307: PUSH
37308: LD_INT 7
37310: PUSH
37311: LD_INT 27
37313: PUSH
37314: LD_INT 29
37316: PUSH
37317: EMPTY
37318: LIST
37319: LIST
37320: LIST
37321: LIST
37322: LIST
37323: LIST
37324: LIST
37325: LIST
37326: LIST
37327: LIST
37328: IN
37329: PUSH
37330: LD_VAR 0 1
37334: PPUSH
37335: LD_INT 52
37337: PPUSH
37338: CALL_OW 321
37342: PUSH
37343: LD_INT 2
37345: EQUAL
37346: AND
37347: IFFALSE 37364
// bpoints := bpoints * 1.2 ;
37349: LD_ADDR_VAR 0 10
37353: PUSH
37354: LD_VAR 0 10
37358: PUSH
37359: LD_REAL  1.20000000000000E+0000
37362: MUL
37363: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
37364: LD_VAR 0 6
37368: PPUSH
37369: CALL_OW 264
37373: PUSH
37374: LD_INT 6
37376: PUSH
37377: LD_INT 46
37379: PUSH
37380: LD_INT 47
37382: PUSH
37383: EMPTY
37384: LIST
37385: LIST
37386: LIST
37387: IN
37388: IFFALSE 37405
// bpoints := bpoints * 1.2 ;
37390: LD_ADDR_VAR 0 10
37394: PUSH
37395: LD_VAR 0 10
37399: PUSH
37400: LD_REAL  1.20000000000000E+0000
37403: MUL
37404: ST_TO_ADDR
// end ; unit_building :
37405: GO 37419
37407: LD_INT 3
37409: DOUBLE
37410: EQUAL
37411: IFTRUE 37415
37413: GO 37418
37415: POP
// ; end ;
37416: GO 37419
37418: POP
// for j = 1 to 3 do
37419: LD_ADDR_VAR 0 7
37423: PUSH
37424: DOUBLE
37425: LD_INT 1
37427: DEC
37428: ST_TO_ADDR
37429: LD_INT 3
37431: PUSH
37432: FOR_TO
37433: IFFALSE 37486
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
37435: LD_ADDR_VAR 0 5
37439: PUSH
37440: LD_VAR 0 5
37444: PPUSH
37445: LD_VAR 0 7
37449: PPUSH
37450: LD_VAR 0 5
37454: PUSH
37455: LD_VAR 0 7
37459: ARRAY
37460: PUSH
37461: LD_VAR 0 9
37465: PUSH
37466: LD_VAR 0 7
37470: ARRAY
37471: PUSH
37472: LD_VAR 0 10
37476: MUL
37477: PLUS
37478: PPUSH
37479: CALL_OW 1
37483: ST_TO_ADDR
37484: GO 37432
37486: POP
37487: POP
// end ;
37488: GO 35965
37490: POP
37491: POP
// result := Replace ( result , 4 , tmp ) ;
37492: LD_ADDR_VAR 0 5
37496: PUSH
37497: LD_VAR 0 5
37501: PPUSH
37502: LD_INT 4
37504: PPUSH
37505: LD_VAR 0 8
37509: PPUSH
37510: CALL_OW 1
37514: ST_TO_ADDR
// end ;
37515: LD_VAR 0 5
37519: RET
// export function DangerAtRange ( unit , range ) ; begin
37520: LD_INT 0
37522: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
37523: LD_ADDR_VAR 0 3
37527: PUSH
37528: LD_VAR 0 1
37532: PPUSH
37533: CALL_OW 255
37537: PPUSH
37538: LD_VAR 0 1
37542: PPUSH
37543: CALL_OW 250
37547: PPUSH
37548: LD_VAR 0 1
37552: PPUSH
37553: CALL_OW 251
37557: PPUSH
37558: LD_VAR 0 2
37562: PPUSH
37563: CALL 35817 0 4
37567: ST_TO_ADDR
// end ;
37568: LD_VAR 0 3
37572: RET
// export function DangerInArea ( side , area ) ; begin
37573: LD_INT 0
37575: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
37576: LD_ADDR_VAR 0 3
37580: PUSH
37581: LD_VAR 0 2
37585: PPUSH
37586: LD_INT 81
37588: PUSH
37589: LD_VAR 0 1
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: PPUSH
37598: CALL_OW 70
37602: ST_TO_ADDR
// end ;
37603: LD_VAR 0 3
37607: RET
// export function IsExtension ( b ) ; begin
37608: LD_INT 0
37610: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
37611: LD_ADDR_VAR 0 2
37615: PUSH
37616: LD_VAR 0 1
37620: PUSH
37621: LD_INT 23
37623: PUSH
37624: LD_INT 20
37626: PUSH
37627: LD_INT 22
37629: PUSH
37630: LD_INT 17
37632: PUSH
37633: LD_INT 24
37635: PUSH
37636: LD_INT 21
37638: PUSH
37639: LD_INT 19
37641: PUSH
37642: LD_INT 16
37644: PUSH
37645: LD_INT 25
37647: PUSH
37648: LD_INT 18
37650: PUSH
37651: EMPTY
37652: LIST
37653: LIST
37654: LIST
37655: LIST
37656: LIST
37657: LIST
37658: LIST
37659: LIST
37660: LIST
37661: LIST
37662: IN
37663: ST_TO_ADDR
// end ;
37664: LD_VAR 0 2
37668: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
37669: LD_INT 0
37671: PPUSH
37672: PPUSH
37673: PPUSH
// result := [ ] ;
37674: LD_ADDR_VAR 0 4
37678: PUSH
37679: EMPTY
37680: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
37681: LD_ADDR_VAR 0 5
37685: PUSH
37686: LD_VAR 0 2
37690: PPUSH
37691: LD_INT 21
37693: PUSH
37694: LD_INT 3
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: PPUSH
37701: CALL_OW 70
37705: ST_TO_ADDR
// if not tmp then
37706: LD_VAR 0 5
37710: NOT
37711: IFFALSE 37715
// exit ;
37713: GO 37779
// if checkLink then
37715: LD_VAR 0 3
37719: IFFALSE 37769
// begin for i in tmp do
37721: LD_ADDR_VAR 0 6
37725: PUSH
37726: LD_VAR 0 5
37730: PUSH
37731: FOR_IN
37732: IFFALSE 37767
// if GetBase ( i ) <> base then
37734: LD_VAR 0 6
37738: PPUSH
37739: CALL_OW 274
37743: PUSH
37744: LD_VAR 0 1
37748: NONEQUAL
37749: IFFALSE 37765
// ComLinkToBase ( base , i ) ;
37751: LD_VAR 0 1
37755: PPUSH
37756: LD_VAR 0 6
37760: PPUSH
37761: CALL_OW 169
37765: GO 37731
37767: POP
37768: POP
// end ; result := tmp ;
37769: LD_ADDR_VAR 0 4
37773: PUSH
37774: LD_VAR 0 5
37778: ST_TO_ADDR
// end ;
37779: LD_VAR 0 4
37783: RET
// export function ComComplete ( units , b ) ; var i ; begin
37784: LD_INT 0
37786: PPUSH
37787: PPUSH
// if not units then
37788: LD_VAR 0 1
37792: NOT
37793: IFFALSE 37797
// exit ;
37795: GO 37887
// for i in units do
37797: LD_ADDR_VAR 0 4
37801: PUSH
37802: LD_VAR 0 1
37806: PUSH
37807: FOR_IN
37808: IFFALSE 37885
// if BuildingStatus ( b ) = bs_build then
37810: LD_VAR 0 2
37814: PPUSH
37815: CALL_OW 461
37819: PUSH
37820: LD_INT 1
37822: EQUAL
37823: IFFALSE 37883
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
37825: LD_VAR 0 4
37829: PPUSH
37830: LD_STRING h
37832: PUSH
37833: LD_VAR 0 2
37837: PPUSH
37838: CALL_OW 250
37842: PUSH
37843: LD_VAR 0 2
37847: PPUSH
37848: CALL_OW 251
37852: PUSH
37853: LD_VAR 0 2
37857: PUSH
37858: LD_INT 0
37860: PUSH
37861: LD_INT 0
37863: PUSH
37864: LD_INT 0
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: LIST
37871: LIST
37872: LIST
37873: LIST
37874: LIST
37875: PUSH
37876: EMPTY
37877: LIST
37878: PPUSH
37879: CALL_OW 446
37883: GO 37807
37885: POP
37886: POP
// end ;
37887: LD_VAR 0 3
37891: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
37892: LD_INT 0
37894: PPUSH
37895: PPUSH
37896: PPUSH
37897: PPUSH
37898: PPUSH
37899: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
37900: LD_VAR 0 1
37904: NOT
37905: PUSH
37906: LD_VAR 0 1
37910: PPUSH
37911: CALL_OW 263
37915: PUSH
37916: LD_INT 2
37918: NONEQUAL
37919: OR
37920: IFFALSE 37924
// exit ;
37922: GO 38240
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
37924: LD_ADDR_VAR 0 6
37928: PUSH
37929: LD_INT 22
37931: PUSH
37932: LD_VAR 0 1
37936: PPUSH
37937: CALL_OW 255
37941: PUSH
37942: EMPTY
37943: LIST
37944: LIST
37945: PUSH
37946: LD_INT 2
37948: PUSH
37949: LD_INT 30
37951: PUSH
37952: LD_INT 36
37954: PUSH
37955: EMPTY
37956: LIST
37957: LIST
37958: PUSH
37959: LD_INT 34
37961: PUSH
37962: LD_INT 31
37964: PUSH
37965: EMPTY
37966: LIST
37967: LIST
37968: PUSH
37969: EMPTY
37970: LIST
37971: LIST
37972: LIST
37973: PUSH
37974: EMPTY
37975: LIST
37976: LIST
37977: PPUSH
37978: CALL_OW 69
37982: ST_TO_ADDR
// if not tmp then
37983: LD_VAR 0 6
37987: NOT
37988: IFFALSE 37992
// exit ;
37990: GO 38240
// result := [ ] ;
37992: LD_ADDR_VAR 0 2
37996: PUSH
37997: EMPTY
37998: ST_TO_ADDR
// for i in tmp do
37999: LD_ADDR_VAR 0 3
38003: PUSH
38004: LD_VAR 0 6
38008: PUSH
38009: FOR_IN
38010: IFFALSE 38081
// begin t := UnitsInside ( i ) ;
38012: LD_ADDR_VAR 0 4
38016: PUSH
38017: LD_VAR 0 3
38021: PPUSH
38022: CALL_OW 313
38026: ST_TO_ADDR
// if t then
38027: LD_VAR 0 4
38031: IFFALSE 38079
// for j in t do
38033: LD_ADDR_VAR 0 7
38037: PUSH
38038: LD_VAR 0 4
38042: PUSH
38043: FOR_IN
38044: IFFALSE 38077
// result := Replace ( result , result + 1 , j ) ;
38046: LD_ADDR_VAR 0 2
38050: PUSH
38051: LD_VAR 0 2
38055: PPUSH
38056: LD_VAR 0 2
38060: PUSH
38061: LD_INT 1
38063: PLUS
38064: PPUSH
38065: LD_VAR 0 7
38069: PPUSH
38070: CALL_OW 1
38074: ST_TO_ADDR
38075: GO 38043
38077: POP
38078: POP
// end ;
38079: GO 38009
38081: POP
38082: POP
// if not result then
38083: LD_VAR 0 2
38087: NOT
38088: IFFALSE 38092
// exit ;
38090: GO 38240
// mech := result [ 1 ] ;
38092: LD_ADDR_VAR 0 5
38096: PUSH
38097: LD_VAR 0 2
38101: PUSH
38102: LD_INT 1
38104: ARRAY
38105: ST_TO_ADDR
// if result > 1 then
38106: LD_VAR 0 2
38110: PUSH
38111: LD_INT 1
38113: GREATER
38114: IFFALSE 38226
// begin for i = 2 to result do
38116: LD_ADDR_VAR 0 3
38120: PUSH
38121: DOUBLE
38122: LD_INT 2
38124: DEC
38125: ST_TO_ADDR
38126: LD_VAR 0 2
38130: PUSH
38131: FOR_TO
38132: IFFALSE 38224
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
38134: LD_ADDR_VAR 0 4
38138: PUSH
38139: LD_VAR 0 2
38143: PUSH
38144: LD_VAR 0 3
38148: ARRAY
38149: PPUSH
38150: LD_INT 3
38152: PPUSH
38153: CALL_OW 259
38157: PUSH
38158: LD_VAR 0 2
38162: PUSH
38163: LD_VAR 0 3
38167: ARRAY
38168: PPUSH
38169: CALL_OW 432
38173: MINUS
38174: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
38175: LD_VAR 0 4
38179: PUSH
38180: LD_VAR 0 5
38184: PPUSH
38185: LD_INT 3
38187: PPUSH
38188: CALL_OW 259
38192: PUSH
38193: LD_VAR 0 5
38197: PPUSH
38198: CALL_OW 432
38202: MINUS
38203: GREATEREQUAL
38204: IFFALSE 38222
// mech := result [ i ] ;
38206: LD_ADDR_VAR 0 5
38210: PUSH
38211: LD_VAR 0 2
38215: PUSH
38216: LD_VAR 0 3
38220: ARRAY
38221: ST_TO_ADDR
// end ;
38222: GO 38131
38224: POP
38225: POP
// end ; ComLinkTo ( vehicle , mech ) ;
38226: LD_VAR 0 1
38230: PPUSH
38231: LD_VAR 0 5
38235: PPUSH
38236: CALL_OW 135
// end ;
38240: LD_VAR 0 2
38244: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
38245: LD_INT 0
38247: PPUSH
38248: PPUSH
38249: PPUSH
38250: PPUSH
38251: PPUSH
38252: PPUSH
38253: PPUSH
38254: PPUSH
38255: PPUSH
38256: PPUSH
38257: PPUSH
38258: PPUSH
38259: PPUSH
// result := [ ] ;
38260: LD_ADDR_VAR 0 7
38264: PUSH
38265: EMPTY
38266: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
38267: LD_VAR 0 1
38271: PPUSH
38272: CALL_OW 266
38276: PUSH
38277: LD_INT 0
38279: PUSH
38280: LD_INT 1
38282: PUSH
38283: EMPTY
38284: LIST
38285: LIST
38286: IN
38287: NOT
38288: IFFALSE 38292
// exit ;
38290: GO 39926
// if name then
38292: LD_VAR 0 3
38296: IFFALSE 38312
// SetBName ( base_dep , name ) ;
38298: LD_VAR 0 1
38302: PPUSH
38303: LD_VAR 0 3
38307: PPUSH
38308: CALL_OW 500
// base := GetBase ( base_dep ) ;
38312: LD_ADDR_VAR 0 15
38316: PUSH
38317: LD_VAR 0 1
38321: PPUSH
38322: CALL_OW 274
38326: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
38327: LD_ADDR_VAR 0 16
38331: PUSH
38332: LD_VAR 0 1
38336: PPUSH
38337: CALL_OW 255
38341: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
38342: LD_ADDR_VAR 0 17
38346: PUSH
38347: LD_VAR 0 1
38351: PPUSH
38352: CALL_OW 248
38356: ST_TO_ADDR
// if sources then
38357: LD_VAR 0 5
38361: IFFALSE 38408
// for i = 1 to 3 do
38363: LD_ADDR_VAR 0 8
38367: PUSH
38368: DOUBLE
38369: LD_INT 1
38371: DEC
38372: ST_TO_ADDR
38373: LD_INT 3
38375: PUSH
38376: FOR_TO
38377: IFFALSE 38406
// AddResourceType ( base , i , sources [ i ] ) ;
38379: LD_VAR 0 15
38383: PPUSH
38384: LD_VAR 0 8
38388: PPUSH
38389: LD_VAR 0 5
38393: PUSH
38394: LD_VAR 0 8
38398: ARRAY
38399: PPUSH
38400: CALL_OW 276
38404: GO 38376
38406: POP
38407: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
38408: LD_ADDR_VAR 0 18
38412: PUSH
38413: LD_VAR 0 15
38417: PPUSH
38418: LD_VAR 0 2
38422: PPUSH
38423: LD_INT 1
38425: PPUSH
38426: CALL 37669 0 3
38430: ST_TO_ADDR
// InitHc ;
38431: CALL_OW 19
// InitUc ;
38435: CALL_OW 18
// uc_side := side ;
38439: LD_ADDR_OWVAR 20
38443: PUSH
38444: LD_VAR 0 16
38448: ST_TO_ADDR
// uc_nation := nation ;
38449: LD_ADDR_OWVAR 21
38453: PUSH
38454: LD_VAR 0 17
38458: ST_TO_ADDR
// if buildings then
38459: LD_VAR 0 18
38463: IFFALSE 39785
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
38465: LD_ADDR_VAR 0 19
38469: PUSH
38470: LD_VAR 0 18
38474: PPUSH
38475: LD_INT 2
38477: PUSH
38478: LD_INT 30
38480: PUSH
38481: LD_INT 29
38483: PUSH
38484: EMPTY
38485: LIST
38486: LIST
38487: PUSH
38488: LD_INT 30
38490: PUSH
38491: LD_INT 30
38493: PUSH
38494: EMPTY
38495: LIST
38496: LIST
38497: PUSH
38498: EMPTY
38499: LIST
38500: LIST
38501: LIST
38502: PPUSH
38503: CALL_OW 72
38507: ST_TO_ADDR
// if tmp then
38508: LD_VAR 0 19
38512: IFFALSE 38560
// for i in tmp do
38514: LD_ADDR_VAR 0 8
38518: PUSH
38519: LD_VAR 0 19
38523: PUSH
38524: FOR_IN
38525: IFFALSE 38558
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
38527: LD_VAR 0 8
38531: PPUSH
38532: CALL_OW 250
38536: PPUSH
38537: LD_VAR 0 8
38541: PPUSH
38542: CALL_OW 251
38546: PPUSH
38547: LD_VAR 0 16
38551: PPUSH
38552: CALL_OW 441
38556: GO 38524
38558: POP
38559: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
38560: LD_VAR 0 18
38564: PPUSH
38565: LD_INT 2
38567: PUSH
38568: LD_INT 30
38570: PUSH
38571: LD_INT 32
38573: PUSH
38574: EMPTY
38575: LIST
38576: LIST
38577: PUSH
38578: LD_INT 30
38580: PUSH
38581: LD_INT 33
38583: PUSH
38584: EMPTY
38585: LIST
38586: LIST
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: LIST
38592: PPUSH
38593: CALL_OW 72
38597: IFFALSE 38685
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
38599: LD_ADDR_VAR 0 8
38603: PUSH
38604: LD_VAR 0 18
38608: PPUSH
38609: LD_INT 2
38611: PUSH
38612: LD_INT 30
38614: PUSH
38615: LD_INT 32
38617: PUSH
38618: EMPTY
38619: LIST
38620: LIST
38621: PUSH
38622: LD_INT 30
38624: PUSH
38625: LD_INT 33
38627: PUSH
38628: EMPTY
38629: LIST
38630: LIST
38631: PUSH
38632: EMPTY
38633: LIST
38634: LIST
38635: LIST
38636: PPUSH
38637: CALL_OW 72
38641: PUSH
38642: FOR_IN
38643: IFFALSE 38683
// begin if not GetBWeapon ( i ) then
38645: LD_VAR 0 8
38649: PPUSH
38650: CALL_OW 269
38654: NOT
38655: IFFALSE 38681
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
38657: LD_VAR 0 8
38661: PPUSH
38662: LD_VAR 0 8
38666: PPUSH
38667: LD_VAR 0 2
38671: PPUSH
38672: CALL 39931 0 2
38676: PPUSH
38677: CALL_OW 431
// end ;
38681: GO 38642
38683: POP
38684: POP
// end ; for i = 1 to personel do
38685: LD_ADDR_VAR 0 8
38689: PUSH
38690: DOUBLE
38691: LD_INT 1
38693: DEC
38694: ST_TO_ADDR
38695: LD_VAR 0 6
38699: PUSH
38700: FOR_TO
38701: IFFALSE 39765
// begin if i > 4 then
38703: LD_VAR 0 8
38707: PUSH
38708: LD_INT 4
38710: GREATER
38711: IFFALSE 38715
// break ;
38713: GO 39765
// case i of 1 :
38715: LD_VAR 0 8
38719: PUSH
38720: LD_INT 1
38722: DOUBLE
38723: EQUAL
38724: IFTRUE 38728
38726: GO 38808
38728: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
38729: LD_ADDR_VAR 0 12
38733: PUSH
38734: LD_VAR 0 18
38738: PPUSH
38739: LD_INT 22
38741: PUSH
38742: LD_VAR 0 16
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: PUSH
38751: LD_INT 58
38753: PUSH
38754: EMPTY
38755: LIST
38756: PUSH
38757: LD_INT 2
38759: PUSH
38760: LD_INT 30
38762: PUSH
38763: LD_INT 32
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: PUSH
38770: LD_INT 30
38772: PUSH
38773: LD_INT 4
38775: PUSH
38776: EMPTY
38777: LIST
38778: LIST
38779: PUSH
38780: LD_INT 30
38782: PUSH
38783: LD_INT 5
38785: PUSH
38786: EMPTY
38787: LIST
38788: LIST
38789: PUSH
38790: EMPTY
38791: LIST
38792: LIST
38793: LIST
38794: LIST
38795: PUSH
38796: EMPTY
38797: LIST
38798: LIST
38799: LIST
38800: PPUSH
38801: CALL_OW 72
38805: ST_TO_ADDR
38806: GO 39030
38808: LD_INT 2
38810: DOUBLE
38811: EQUAL
38812: IFTRUE 38816
38814: GO 38878
38816: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
38817: LD_ADDR_VAR 0 12
38821: PUSH
38822: LD_VAR 0 18
38826: PPUSH
38827: LD_INT 22
38829: PUSH
38830: LD_VAR 0 16
38834: PUSH
38835: EMPTY
38836: LIST
38837: LIST
38838: PUSH
38839: LD_INT 2
38841: PUSH
38842: LD_INT 30
38844: PUSH
38845: LD_INT 0
38847: PUSH
38848: EMPTY
38849: LIST
38850: LIST
38851: PUSH
38852: LD_INT 30
38854: PUSH
38855: LD_INT 1
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: LIST
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: PPUSH
38871: CALL_OW 72
38875: ST_TO_ADDR
38876: GO 39030
38878: LD_INT 3
38880: DOUBLE
38881: EQUAL
38882: IFTRUE 38886
38884: GO 38948
38886: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
38887: LD_ADDR_VAR 0 12
38891: PUSH
38892: LD_VAR 0 18
38896: PPUSH
38897: LD_INT 22
38899: PUSH
38900: LD_VAR 0 16
38904: PUSH
38905: EMPTY
38906: LIST
38907: LIST
38908: PUSH
38909: LD_INT 2
38911: PUSH
38912: LD_INT 30
38914: PUSH
38915: LD_INT 2
38917: PUSH
38918: EMPTY
38919: LIST
38920: LIST
38921: PUSH
38922: LD_INT 30
38924: PUSH
38925: LD_INT 3
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: LIST
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: PPUSH
38941: CALL_OW 72
38945: ST_TO_ADDR
38946: GO 39030
38948: LD_INT 4
38950: DOUBLE
38951: EQUAL
38952: IFTRUE 38956
38954: GO 39029
38956: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
38957: LD_ADDR_VAR 0 12
38961: PUSH
38962: LD_VAR 0 18
38966: PPUSH
38967: LD_INT 22
38969: PUSH
38970: LD_VAR 0 16
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: PUSH
38979: LD_INT 2
38981: PUSH
38982: LD_INT 30
38984: PUSH
38985: LD_INT 6
38987: PUSH
38988: EMPTY
38989: LIST
38990: LIST
38991: PUSH
38992: LD_INT 30
38994: PUSH
38995: LD_INT 7
38997: PUSH
38998: EMPTY
38999: LIST
39000: LIST
39001: PUSH
39002: LD_INT 30
39004: PUSH
39005: LD_INT 8
39007: PUSH
39008: EMPTY
39009: LIST
39010: LIST
39011: PUSH
39012: EMPTY
39013: LIST
39014: LIST
39015: LIST
39016: LIST
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: PPUSH
39022: CALL_OW 72
39026: ST_TO_ADDR
39027: GO 39030
39029: POP
// if i = 1 then
39030: LD_VAR 0 8
39034: PUSH
39035: LD_INT 1
39037: EQUAL
39038: IFFALSE 39149
// begin tmp := [ ] ;
39040: LD_ADDR_VAR 0 19
39044: PUSH
39045: EMPTY
39046: ST_TO_ADDR
// for j in f do
39047: LD_ADDR_VAR 0 9
39051: PUSH
39052: LD_VAR 0 12
39056: PUSH
39057: FOR_IN
39058: IFFALSE 39131
// if GetBType ( j ) = b_bunker then
39060: LD_VAR 0 9
39064: PPUSH
39065: CALL_OW 266
39069: PUSH
39070: LD_INT 32
39072: EQUAL
39073: IFFALSE 39100
// tmp := Insert ( tmp , 1 , j ) else
39075: LD_ADDR_VAR 0 19
39079: PUSH
39080: LD_VAR 0 19
39084: PPUSH
39085: LD_INT 1
39087: PPUSH
39088: LD_VAR 0 9
39092: PPUSH
39093: CALL_OW 2
39097: ST_TO_ADDR
39098: GO 39129
// tmp := Insert ( tmp , tmp + 1 , j ) ;
39100: LD_ADDR_VAR 0 19
39104: PUSH
39105: LD_VAR 0 19
39109: PPUSH
39110: LD_VAR 0 19
39114: PUSH
39115: LD_INT 1
39117: PLUS
39118: PPUSH
39119: LD_VAR 0 9
39123: PPUSH
39124: CALL_OW 2
39128: ST_TO_ADDR
39129: GO 39057
39131: POP
39132: POP
// if tmp then
39133: LD_VAR 0 19
39137: IFFALSE 39149
// f := tmp ;
39139: LD_ADDR_VAR 0 12
39143: PUSH
39144: LD_VAR 0 19
39148: ST_TO_ADDR
// end ; x := personel [ i ] ;
39149: LD_ADDR_VAR 0 13
39153: PUSH
39154: LD_VAR 0 6
39158: PUSH
39159: LD_VAR 0 8
39163: ARRAY
39164: ST_TO_ADDR
// if x = - 1 then
39165: LD_VAR 0 13
39169: PUSH
39170: LD_INT 1
39172: NEG
39173: EQUAL
39174: IFFALSE 39383
// begin for j in f do
39176: LD_ADDR_VAR 0 9
39180: PUSH
39181: LD_VAR 0 12
39185: PUSH
39186: FOR_IN
39187: IFFALSE 39379
// repeat InitHc ;
39189: CALL_OW 19
// if GetBType ( j ) = b_barracks then
39193: LD_VAR 0 9
39197: PPUSH
39198: CALL_OW 266
39202: PUSH
39203: LD_INT 5
39205: EQUAL
39206: IFFALSE 39276
// begin if UnitsInside ( j ) < 3 then
39208: LD_VAR 0 9
39212: PPUSH
39213: CALL_OW 313
39217: PUSH
39218: LD_INT 3
39220: LESS
39221: IFFALSE 39257
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39223: LD_INT 0
39225: PPUSH
39226: LD_INT 5
39228: PUSH
39229: LD_INT 8
39231: PUSH
39232: LD_INT 9
39234: PUSH
39235: EMPTY
39236: LIST
39237: LIST
39238: LIST
39239: PUSH
39240: LD_VAR 0 17
39244: ARRAY
39245: PPUSH
39246: LD_VAR 0 4
39250: PPUSH
39251: CALL_OW 380
39255: GO 39274
// PrepareHuman ( false , i , skill ) ;
39257: LD_INT 0
39259: PPUSH
39260: LD_VAR 0 8
39264: PPUSH
39265: LD_VAR 0 4
39269: PPUSH
39270: CALL_OW 380
// end else
39274: GO 39293
// PrepareHuman ( false , i , skill ) ;
39276: LD_INT 0
39278: PPUSH
39279: LD_VAR 0 8
39283: PPUSH
39284: LD_VAR 0 4
39288: PPUSH
39289: CALL_OW 380
// un := CreateHuman ;
39293: LD_ADDR_VAR 0 14
39297: PUSH
39298: CALL_OW 44
39302: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39303: LD_ADDR_VAR 0 7
39307: PUSH
39308: LD_VAR 0 7
39312: PPUSH
39313: LD_INT 1
39315: PPUSH
39316: LD_VAR 0 14
39320: PPUSH
39321: CALL_OW 2
39325: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
39326: LD_VAR 0 14
39330: PPUSH
39331: LD_VAR 0 9
39335: PPUSH
39336: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
39340: LD_VAR 0 9
39344: PPUSH
39345: CALL_OW 313
39349: PUSH
39350: LD_INT 6
39352: EQUAL
39353: PUSH
39354: LD_VAR 0 9
39358: PPUSH
39359: CALL_OW 266
39363: PUSH
39364: LD_INT 32
39366: PUSH
39367: LD_INT 31
39369: PUSH
39370: EMPTY
39371: LIST
39372: LIST
39373: IN
39374: OR
39375: IFFALSE 39189
39377: GO 39186
39379: POP
39380: POP
// end else
39381: GO 39763
// for j = 1 to x do
39383: LD_ADDR_VAR 0 9
39387: PUSH
39388: DOUBLE
39389: LD_INT 1
39391: DEC
39392: ST_TO_ADDR
39393: LD_VAR 0 13
39397: PUSH
39398: FOR_TO
39399: IFFALSE 39761
// begin InitHc ;
39401: CALL_OW 19
// if not f then
39405: LD_VAR 0 12
39409: NOT
39410: IFFALSE 39499
// begin PrepareHuman ( false , i , skill ) ;
39412: LD_INT 0
39414: PPUSH
39415: LD_VAR 0 8
39419: PPUSH
39420: LD_VAR 0 4
39424: PPUSH
39425: CALL_OW 380
// un := CreateHuman ;
39429: LD_ADDR_VAR 0 14
39433: PUSH
39434: CALL_OW 44
39438: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39439: LD_ADDR_VAR 0 7
39443: PUSH
39444: LD_VAR 0 7
39448: PPUSH
39449: LD_INT 1
39451: PPUSH
39452: LD_VAR 0 14
39456: PPUSH
39457: CALL_OW 2
39461: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39462: LD_VAR 0 14
39466: PPUSH
39467: LD_VAR 0 1
39471: PPUSH
39472: CALL_OW 250
39476: PPUSH
39477: LD_VAR 0 1
39481: PPUSH
39482: CALL_OW 251
39486: PPUSH
39487: LD_INT 10
39489: PPUSH
39490: LD_INT 0
39492: PPUSH
39493: CALL_OW 50
// continue ;
39497: GO 39398
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
39499: LD_VAR 0 12
39503: PUSH
39504: LD_INT 1
39506: ARRAY
39507: PPUSH
39508: CALL_OW 313
39512: PUSH
39513: LD_VAR 0 12
39517: PUSH
39518: LD_INT 1
39520: ARRAY
39521: PPUSH
39522: CALL_OW 266
39526: PUSH
39527: LD_INT 32
39529: PUSH
39530: LD_INT 31
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: IN
39537: AND
39538: PUSH
39539: LD_VAR 0 12
39543: PUSH
39544: LD_INT 1
39546: ARRAY
39547: PPUSH
39548: CALL_OW 313
39552: PUSH
39553: LD_INT 6
39555: EQUAL
39556: OR
39557: IFFALSE 39577
// f := Delete ( f , 1 ) ;
39559: LD_ADDR_VAR 0 12
39563: PUSH
39564: LD_VAR 0 12
39568: PPUSH
39569: LD_INT 1
39571: PPUSH
39572: CALL_OW 3
39576: ST_TO_ADDR
// if not f then
39577: LD_VAR 0 12
39581: NOT
39582: IFFALSE 39600
// begin x := x + 2 ;
39584: LD_ADDR_VAR 0 13
39588: PUSH
39589: LD_VAR 0 13
39593: PUSH
39594: LD_INT 2
39596: PLUS
39597: ST_TO_ADDR
// continue ;
39598: GO 39398
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
39600: LD_VAR 0 12
39604: PUSH
39605: LD_INT 1
39607: ARRAY
39608: PPUSH
39609: CALL_OW 266
39613: PUSH
39614: LD_INT 5
39616: EQUAL
39617: IFFALSE 39691
// begin if UnitsInside ( f [ 1 ] ) < 3 then
39619: LD_VAR 0 12
39623: PUSH
39624: LD_INT 1
39626: ARRAY
39627: PPUSH
39628: CALL_OW 313
39632: PUSH
39633: LD_INT 3
39635: LESS
39636: IFFALSE 39672
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
39638: LD_INT 0
39640: PPUSH
39641: LD_INT 5
39643: PUSH
39644: LD_INT 8
39646: PUSH
39647: LD_INT 9
39649: PUSH
39650: EMPTY
39651: LIST
39652: LIST
39653: LIST
39654: PUSH
39655: LD_VAR 0 17
39659: ARRAY
39660: PPUSH
39661: LD_VAR 0 4
39665: PPUSH
39666: CALL_OW 380
39670: GO 39689
// PrepareHuman ( false , i , skill ) ;
39672: LD_INT 0
39674: PPUSH
39675: LD_VAR 0 8
39679: PPUSH
39680: LD_VAR 0 4
39684: PPUSH
39685: CALL_OW 380
// end else
39689: GO 39708
// PrepareHuman ( false , i , skill ) ;
39691: LD_INT 0
39693: PPUSH
39694: LD_VAR 0 8
39698: PPUSH
39699: LD_VAR 0 4
39703: PPUSH
39704: CALL_OW 380
// un := CreateHuman ;
39708: LD_ADDR_VAR 0 14
39712: PUSH
39713: CALL_OW 44
39717: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
39718: LD_ADDR_VAR 0 7
39722: PUSH
39723: LD_VAR 0 7
39727: PPUSH
39728: LD_INT 1
39730: PPUSH
39731: LD_VAR 0 14
39735: PPUSH
39736: CALL_OW 2
39740: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
39741: LD_VAR 0 14
39745: PPUSH
39746: LD_VAR 0 12
39750: PUSH
39751: LD_INT 1
39753: ARRAY
39754: PPUSH
39755: CALL_OW 52
// end ;
39759: GO 39398
39761: POP
39762: POP
// end ;
39763: GO 38700
39765: POP
39766: POP
// result := result ^ buildings ;
39767: LD_ADDR_VAR 0 7
39771: PUSH
39772: LD_VAR 0 7
39776: PUSH
39777: LD_VAR 0 18
39781: ADD
39782: ST_TO_ADDR
// end else
39783: GO 39926
// begin for i = 1 to personel do
39785: LD_ADDR_VAR 0 8
39789: PUSH
39790: DOUBLE
39791: LD_INT 1
39793: DEC
39794: ST_TO_ADDR
39795: LD_VAR 0 6
39799: PUSH
39800: FOR_TO
39801: IFFALSE 39924
// begin if i > 4 then
39803: LD_VAR 0 8
39807: PUSH
39808: LD_INT 4
39810: GREATER
39811: IFFALSE 39815
// break ;
39813: GO 39924
// x := personel [ i ] ;
39815: LD_ADDR_VAR 0 13
39819: PUSH
39820: LD_VAR 0 6
39824: PUSH
39825: LD_VAR 0 8
39829: ARRAY
39830: ST_TO_ADDR
// if x = - 1 then
39831: LD_VAR 0 13
39835: PUSH
39836: LD_INT 1
39838: NEG
39839: EQUAL
39840: IFFALSE 39844
// continue ;
39842: GO 39800
// PrepareHuman ( false , i , skill ) ;
39844: LD_INT 0
39846: PPUSH
39847: LD_VAR 0 8
39851: PPUSH
39852: LD_VAR 0 4
39856: PPUSH
39857: CALL_OW 380
// un := CreateHuman ;
39861: LD_ADDR_VAR 0 14
39865: PUSH
39866: CALL_OW 44
39870: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
39871: LD_VAR 0 14
39875: PPUSH
39876: LD_VAR 0 1
39880: PPUSH
39881: CALL_OW 250
39885: PPUSH
39886: LD_VAR 0 1
39890: PPUSH
39891: CALL_OW 251
39895: PPUSH
39896: LD_INT 10
39898: PPUSH
39899: LD_INT 0
39901: PPUSH
39902: CALL_OW 50
// result := result ^ un ;
39906: LD_ADDR_VAR 0 7
39910: PUSH
39911: LD_VAR 0 7
39915: PUSH
39916: LD_VAR 0 14
39920: ADD
39921: ST_TO_ADDR
// end ;
39922: GO 39800
39924: POP
39925: POP
// end ; end ;
39926: LD_VAR 0 7
39930: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
39931: LD_INT 0
39933: PPUSH
39934: PPUSH
39935: PPUSH
39936: PPUSH
39937: PPUSH
39938: PPUSH
39939: PPUSH
39940: PPUSH
39941: PPUSH
39942: PPUSH
39943: PPUSH
39944: PPUSH
39945: PPUSH
39946: PPUSH
39947: PPUSH
39948: PPUSH
// result := false ;
39949: LD_ADDR_VAR 0 3
39953: PUSH
39954: LD_INT 0
39956: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
39957: LD_VAR 0 1
39961: NOT
39962: PUSH
39963: LD_VAR 0 1
39967: PPUSH
39968: CALL_OW 266
39972: PUSH
39973: LD_INT 32
39975: PUSH
39976: LD_INT 33
39978: PUSH
39979: EMPTY
39980: LIST
39981: LIST
39982: IN
39983: NOT
39984: OR
39985: IFFALSE 39989
// exit ;
39987: GO 41098
// nat := GetNation ( tower ) ;
39989: LD_ADDR_VAR 0 12
39993: PUSH
39994: LD_VAR 0 1
39998: PPUSH
39999: CALL_OW 248
40003: ST_TO_ADDR
// side := GetSide ( tower ) ;
40004: LD_ADDR_VAR 0 16
40008: PUSH
40009: LD_VAR 0 1
40013: PPUSH
40014: CALL_OW 255
40018: ST_TO_ADDR
// x := GetX ( tower ) ;
40019: LD_ADDR_VAR 0 10
40023: PUSH
40024: LD_VAR 0 1
40028: PPUSH
40029: CALL_OW 250
40033: ST_TO_ADDR
// y := GetY ( tower ) ;
40034: LD_ADDR_VAR 0 11
40038: PUSH
40039: LD_VAR 0 1
40043: PPUSH
40044: CALL_OW 251
40048: ST_TO_ADDR
// if not x or not y then
40049: LD_VAR 0 10
40053: NOT
40054: PUSH
40055: LD_VAR 0 11
40059: NOT
40060: OR
40061: IFFALSE 40065
// exit ;
40063: GO 41098
// weapon := 0 ;
40065: LD_ADDR_VAR 0 18
40069: PUSH
40070: LD_INT 0
40072: ST_TO_ADDR
// fac_list := [ ] ;
40073: LD_ADDR_VAR 0 17
40077: PUSH
40078: EMPTY
40079: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
40080: LD_ADDR_VAR 0 6
40084: PUSH
40085: LD_VAR 0 1
40089: PPUSH
40090: CALL_OW 274
40094: PPUSH
40095: LD_VAR 0 2
40099: PPUSH
40100: LD_INT 0
40102: PPUSH
40103: CALL 37669 0 3
40107: PPUSH
40108: LD_INT 30
40110: PUSH
40111: LD_INT 3
40113: PUSH
40114: EMPTY
40115: LIST
40116: LIST
40117: PPUSH
40118: CALL_OW 72
40122: ST_TO_ADDR
// if not factories then
40123: LD_VAR 0 6
40127: NOT
40128: IFFALSE 40132
// exit ;
40130: GO 41098
// for i in factories do
40132: LD_ADDR_VAR 0 8
40136: PUSH
40137: LD_VAR 0 6
40141: PUSH
40142: FOR_IN
40143: IFFALSE 40168
// fac_list := fac_list union AvailableWeaponList ( i ) ;
40145: LD_ADDR_VAR 0 17
40149: PUSH
40150: LD_VAR 0 17
40154: PUSH
40155: LD_VAR 0 8
40159: PPUSH
40160: CALL_OW 478
40164: UNION
40165: ST_TO_ADDR
40166: GO 40142
40168: POP
40169: POP
// if not fac_list then
40170: LD_VAR 0 17
40174: NOT
40175: IFFALSE 40179
// exit ;
40177: GO 41098
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
40179: LD_ADDR_VAR 0 5
40183: PUSH
40184: LD_INT 4
40186: PUSH
40187: LD_INT 5
40189: PUSH
40190: LD_INT 9
40192: PUSH
40193: LD_INT 10
40195: PUSH
40196: LD_INT 6
40198: PUSH
40199: LD_INT 7
40201: PUSH
40202: LD_INT 11
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: LIST
40209: LIST
40210: LIST
40211: LIST
40212: LIST
40213: PUSH
40214: LD_INT 27
40216: PUSH
40217: LD_INT 28
40219: PUSH
40220: LD_INT 26
40222: PUSH
40223: LD_INT 30
40225: PUSH
40226: EMPTY
40227: LIST
40228: LIST
40229: LIST
40230: LIST
40231: PUSH
40232: LD_INT 43
40234: PUSH
40235: LD_INT 44
40237: PUSH
40238: LD_INT 46
40240: PUSH
40241: LD_INT 45
40243: PUSH
40244: LD_INT 47
40246: PUSH
40247: LD_INT 49
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: LIST
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: LIST
40262: PUSH
40263: LD_VAR 0 12
40267: ARRAY
40268: ST_TO_ADDR
// list := list isect fac_list ;
40269: LD_ADDR_VAR 0 5
40273: PUSH
40274: LD_VAR 0 5
40278: PUSH
40279: LD_VAR 0 17
40283: ISECT
40284: ST_TO_ADDR
// if not list then
40285: LD_VAR 0 5
40289: NOT
40290: IFFALSE 40294
// exit ;
40292: GO 41098
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
40294: LD_VAR 0 12
40298: PUSH
40299: LD_INT 3
40301: EQUAL
40302: PUSH
40303: LD_INT 49
40305: PUSH
40306: LD_VAR 0 5
40310: IN
40311: AND
40312: PUSH
40313: LD_INT 31
40315: PPUSH
40316: LD_VAR 0 16
40320: PPUSH
40321: CALL_OW 321
40325: PUSH
40326: LD_INT 2
40328: EQUAL
40329: AND
40330: IFFALSE 40390
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
40332: LD_INT 22
40334: PUSH
40335: LD_VAR 0 16
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: PUSH
40344: LD_INT 35
40346: PUSH
40347: LD_INT 49
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: PUSH
40354: LD_INT 91
40356: PUSH
40357: LD_VAR 0 1
40361: PUSH
40362: LD_INT 10
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: LIST
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: LIST
40374: PPUSH
40375: CALL_OW 69
40379: NOT
40380: IFFALSE 40390
// weapon := ru_time_lapser ;
40382: LD_ADDR_VAR 0 18
40386: PUSH
40387: LD_INT 49
40389: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
40390: LD_VAR 0 12
40394: PUSH
40395: LD_INT 1
40397: PUSH
40398: LD_INT 2
40400: PUSH
40401: EMPTY
40402: LIST
40403: LIST
40404: IN
40405: PUSH
40406: LD_INT 11
40408: PUSH
40409: LD_VAR 0 5
40413: IN
40414: PUSH
40415: LD_INT 30
40417: PUSH
40418: LD_VAR 0 5
40422: IN
40423: OR
40424: AND
40425: PUSH
40426: LD_INT 6
40428: PPUSH
40429: LD_VAR 0 16
40433: PPUSH
40434: CALL_OW 321
40438: PUSH
40439: LD_INT 2
40441: EQUAL
40442: AND
40443: IFFALSE 40608
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
40445: LD_INT 22
40447: PUSH
40448: LD_VAR 0 16
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: PUSH
40457: LD_INT 2
40459: PUSH
40460: LD_INT 35
40462: PUSH
40463: LD_INT 11
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: PUSH
40470: LD_INT 35
40472: PUSH
40473: LD_INT 30
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: LIST
40484: PUSH
40485: LD_INT 91
40487: PUSH
40488: LD_VAR 0 1
40492: PUSH
40493: LD_INT 18
40495: PUSH
40496: EMPTY
40497: LIST
40498: LIST
40499: LIST
40500: PUSH
40501: EMPTY
40502: LIST
40503: LIST
40504: LIST
40505: PPUSH
40506: CALL_OW 69
40510: NOT
40511: PUSH
40512: LD_INT 22
40514: PUSH
40515: LD_VAR 0 16
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: PUSH
40524: LD_INT 2
40526: PUSH
40527: LD_INT 30
40529: PUSH
40530: LD_INT 32
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PUSH
40537: LD_INT 30
40539: PUSH
40540: LD_INT 33
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: PUSH
40547: EMPTY
40548: LIST
40549: LIST
40550: LIST
40551: PUSH
40552: LD_INT 91
40554: PUSH
40555: LD_VAR 0 1
40559: PUSH
40560: LD_INT 12
40562: PUSH
40563: EMPTY
40564: LIST
40565: LIST
40566: LIST
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: LIST
40572: PUSH
40573: EMPTY
40574: LIST
40575: PPUSH
40576: CALL_OW 69
40580: PUSH
40581: LD_INT 2
40583: GREATER
40584: AND
40585: IFFALSE 40608
// weapon := [ us_radar , ar_radar ] [ nat ] ;
40587: LD_ADDR_VAR 0 18
40591: PUSH
40592: LD_INT 11
40594: PUSH
40595: LD_INT 30
40597: PUSH
40598: EMPTY
40599: LIST
40600: LIST
40601: PUSH
40602: LD_VAR 0 12
40606: ARRAY
40607: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
40608: LD_VAR 0 18
40612: NOT
40613: PUSH
40614: LD_INT 40
40616: PPUSH
40617: LD_VAR 0 16
40621: PPUSH
40622: CALL_OW 321
40626: PUSH
40627: LD_INT 2
40629: EQUAL
40630: AND
40631: PUSH
40632: LD_INT 7
40634: PUSH
40635: LD_VAR 0 5
40639: IN
40640: PUSH
40641: LD_INT 28
40643: PUSH
40644: LD_VAR 0 5
40648: IN
40649: OR
40650: PUSH
40651: LD_INT 45
40653: PUSH
40654: LD_VAR 0 5
40658: IN
40659: OR
40660: AND
40661: IFFALSE 40915
// begin hex := GetHexInfo ( x , y ) ;
40663: LD_ADDR_VAR 0 4
40667: PUSH
40668: LD_VAR 0 10
40672: PPUSH
40673: LD_VAR 0 11
40677: PPUSH
40678: CALL_OW 546
40682: ST_TO_ADDR
// if hex [ 1 ] then
40683: LD_VAR 0 4
40687: PUSH
40688: LD_INT 1
40690: ARRAY
40691: IFFALSE 40695
// exit ;
40693: GO 41098
// height := hex [ 2 ] ;
40695: LD_ADDR_VAR 0 15
40699: PUSH
40700: LD_VAR 0 4
40704: PUSH
40705: LD_INT 2
40707: ARRAY
40708: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
40709: LD_ADDR_VAR 0 14
40713: PUSH
40714: LD_INT 0
40716: PUSH
40717: LD_INT 2
40719: PUSH
40720: LD_INT 3
40722: PUSH
40723: LD_INT 5
40725: PUSH
40726: EMPTY
40727: LIST
40728: LIST
40729: LIST
40730: LIST
40731: ST_TO_ADDR
// for i in tmp do
40732: LD_ADDR_VAR 0 8
40736: PUSH
40737: LD_VAR 0 14
40741: PUSH
40742: FOR_IN
40743: IFFALSE 40913
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
40745: LD_ADDR_VAR 0 9
40749: PUSH
40750: LD_VAR 0 10
40754: PPUSH
40755: LD_VAR 0 8
40759: PPUSH
40760: LD_INT 5
40762: PPUSH
40763: CALL_OW 272
40767: PUSH
40768: LD_VAR 0 11
40772: PPUSH
40773: LD_VAR 0 8
40777: PPUSH
40778: LD_INT 5
40780: PPUSH
40781: CALL_OW 273
40785: PUSH
40786: EMPTY
40787: LIST
40788: LIST
40789: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
40790: LD_VAR 0 9
40794: PUSH
40795: LD_INT 1
40797: ARRAY
40798: PPUSH
40799: LD_VAR 0 9
40803: PUSH
40804: LD_INT 2
40806: ARRAY
40807: PPUSH
40808: CALL_OW 488
40812: IFFALSE 40911
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
40814: LD_ADDR_VAR 0 4
40818: PUSH
40819: LD_VAR 0 9
40823: PUSH
40824: LD_INT 1
40826: ARRAY
40827: PPUSH
40828: LD_VAR 0 9
40832: PUSH
40833: LD_INT 2
40835: ARRAY
40836: PPUSH
40837: CALL_OW 546
40841: ST_TO_ADDR
// if hex [ 1 ] then
40842: LD_VAR 0 4
40846: PUSH
40847: LD_INT 1
40849: ARRAY
40850: IFFALSE 40854
// continue ;
40852: GO 40742
// h := hex [ 2 ] ;
40854: LD_ADDR_VAR 0 13
40858: PUSH
40859: LD_VAR 0 4
40863: PUSH
40864: LD_INT 2
40866: ARRAY
40867: ST_TO_ADDR
// if h + 7 < height then
40868: LD_VAR 0 13
40872: PUSH
40873: LD_INT 7
40875: PLUS
40876: PUSH
40877: LD_VAR 0 15
40881: LESS
40882: IFFALSE 40911
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
40884: LD_ADDR_VAR 0 18
40888: PUSH
40889: LD_INT 7
40891: PUSH
40892: LD_INT 28
40894: PUSH
40895: LD_INT 45
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: LIST
40902: PUSH
40903: LD_VAR 0 12
40907: ARRAY
40908: ST_TO_ADDR
// break ;
40909: GO 40913
// end ; end ; end ;
40911: GO 40742
40913: POP
40914: POP
// end ; if not weapon then
40915: LD_VAR 0 18
40919: NOT
40920: IFFALSE 40980
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
40922: LD_ADDR_VAR 0 5
40926: PUSH
40927: LD_VAR 0 5
40931: PUSH
40932: LD_INT 11
40934: PUSH
40935: LD_INT 30
40937: PUSH
40938: LD_INT 49
40940: PUSH
40941: EMPTY
40942: LIST
40943: LIST
40944: LIST
40945: DIFF
40946: ST_TO_ADDR
// if not list then
40947: LD_VAR 0 5
40951: NOT
40952: IFFALSE 40956
// exit ;
40954: GO 41098
// weapon := list [ rand ( 1 , list ) ] ;
40956: LD_ADDR_VAR 0 18
40960: PUSH
40961: LD_VAR 0 5
40965: PUSH
40966: LD_INT 1
40968: PPUSH
40969: LD_VAR 0 5
40973: PPUSH
40974: CALL_OW 12
40978: ARRAY
40979: ST_TO_ADDR
// end ; if weapon then
40980: LD_VAR 0 18
40984: IFFALSE 41098
// begin tmp := CostOfWeapon ( weapon ) ;
40986: LD_ADDR_VAR 0 14
40990: PUSH
40991: LD_VAR 0 18
40995: PPUSH
40996: CALL_OW 451
41000: ST_TO_ADDR
// j := GetBase ( tower ) ;
41001: LD_ADDR_VAR 0 9
41005: PUSH
41006: LD_VAR 0 1
41010: PPUSH
41011: CALL_OW 274
41015: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
41016: LD_VAR 0 9
41020: PPUSH
41021: LD_INT 1
41023: PPUSH
41024: CALL_OW 275
41028: PUSH
41029: LD_VAR 0 14
41033: PUSH
41034: LD_INT 1
41036: ARRAY
41037: GREATEREQUAL
41038: PUSH
41039: LD_VAR 0 9
41043: PPUSH
41044: LD_INT 2
41046: PPUSH
41047: CALL_OW 275
41051: PUSH
41052: LD_VAR 0 14
41056: PUSH
41057: LD_INT 2
41059: ARRAY
41060: GREATEREQUAL
41061: AND
41062: PUSH
41063: LD_VAR 0 9
41067: PPUSH
41068: LD_INT 3
41070: PPUSH
41071: CALL_OW 275
41075: PUSH
41076: LD_VAR 0 14
41080: PUSH
41081: LD_INT 3
41083: ARRAY
41084: GREATEREQUAL
41085: AND
41086: IFFALSE 41098
// result := weapon ;
41088: LD_ADDR_VAR 0 3
41092: PUSH
41093: LD_VAR 0 18
41097: ST_TO_ADDR
// end ; end ;
41098: LD_VAR 0 3
41102: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
41103: LD_INT 0
41105: PPUSH
41106: PPUSH
// result := true ;
41107: LD_ADDR_VAR 0 3
41111: PUSH
41112: LD_INT 1
41114: ST_TO_ADDR
// if array1 = array2 then
41115: LD_VAR 0 1
41119: PUSH
41120: LD_VAR 0 2
41124: EQUAL
41125: IFFALSE 41185
// begin for i = 1 to array1 do
41127: LD_ADDR_VAR 0 4
41131: PUSH
41132: DOUBLE
41133: LD_INT 1
41135: DEC
41136: ST_TO_ADDR
41137: LD_VAR 0 1
41141: PUSH
41142: FOR_TO
41143: IFFALSE 41181
// if array1 [ i ] <> array2 [ i ] then
41145: LD_VAR 0 1
41149: PUSH
41150: LD_VAR 0 4
41154: ARRAY
41155: PUSH
41156: LD_VAR 0 2
41160: PUSH
41161: LD_VAR 0 4
41165: ARRAY
41166: NONEQUAL
41167: IFFALSE 41179
// begin result := false ;
41169: LD_ADDR_VAR 0 3
41173: PUSH
41174: LD_INT 0
41176: ST_TO_ADDR
// break ;
41177: GO 41181
// end ;
41179: GO 41142
41181: POP
41182: POP
// end else
41183: GO 41193
// result := false ;
41185: LD_ADDR_VAR 0 3
41189: PUSH
41190: LD_INT 0
41192: ST_TO_ADDR
// end ;
41193: LD_VAR 0 3
41197: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
41198: LD_INT 0
41200: PPUSH
41201: PPUSH
// if not array1 or not array2 then
41202: LD_VAR 0 1
41206: NOT
41207: PUSH
41208: LD_VAR 0 2
41212: NOT
41213: OR
41214: IFFALSE 41218
// exit ;
41216: GO 41282
// result := true ;
41218: LD_ADDR_VAR 0 3
41222: PUSH
41223: LD_INT 1
41225: ST_TO_ADDR
// for i = 1 to array1 do
41226: LD_ADDR_VAR 0 4
41230: PUSH
41231: DOUBLE
41232: LD_INT 1
41234: DEC
41235: ST_TO_ADDR
41236: LD_VAR 0 1
41240: PUSH
41241: FOR_TO
41242: IFFALSE 41280
// if array1 [ i ] <> array2 [ i ] then
41244: LD_VAR 0 1
41248: PUSH
41249: LD_VAR 0 4
41253: ARRAY
41254: PUSH
41255: LD_VAR 0 2
41259: PUSH
41260: LD_VAR 0 4
41264: ARRAY
41265: NONEQUAL
41266: IFFALSE 41278
// begin result := false ;
41268: LD_ADDR_VAR 0 3
41272: PUSH
41273: LD_INT 0
41275: ST_TO_ADDR
// break ;
41276: GO 41280
// end ;
41278: GO 41241
41280: POP
41281: POP
// end ;
41282: LD_VAR 0 3
41286: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
41287: LD_INT 0
41289: PPUSH
41290: PPUSH
41291: PPUSH
// pom := GetBase ( fac ) ;
41292: LD_ADDR_VAR 0 5
41296: PUSH
41297: LD_VAR 0 1
41301: PPUSH
41302: CALL_OW 274
41306: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
41307: LD_ADDR_VAR 0 4
41311: PUSH
41312: LD_VAR 0 2
41316: PUSH
41317: LD_INT 1
41319: ARRAY
41320: PPUSH
41321: LD_VAR 0 2
41325: PUSH
41326: LD_INT 2
41328: ARRAY
41329: PPUSH
41330: LD_VAR 0 2
41334: PUSH
41335: LD_INT 3
41337: ARRAY
41338: PPUSH
41339: LD_VAR 0 2
41343: PUSH
41344: LD_INT 4
41346: ARRAY
41347: PPUSH
41348: CALL_OW 449
41352: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41353: LD_ADDR_VAR 0 3
41357: PUSH
41358: LD_VAR 0 5
41362: PPUSH
41363: LD_INT 1
41365: PPUSH
41366: CALL_OW 275
41370: PUSH
41371: LD_VAR 0 4
41375: PUSH
41376: LD_INT 1
41378: ARRAY
41379: GREATEREQUAL
41380: PUSH
41381: LD_VAR 0 5
41385: PPUSH
41386: LD_INT 2
41388: PPUSH
41389: CALL_OW 275
41393: PUSH
41394: LD_VAR 0 4
41398: PUSH
41399: LD_INT 2
41401: ARRAY
41402: GREATEREQUAL
41403: AND
41404: PUSH
41405: LD_VAR 0 5
41409: PPUSH
41410: LD_INT 3
41412: PPUSH
41413: CALL_OW 275
41417: PUSH
41418: LD_VAR 0 4
41422: PUSH
41423: LD_INT 3
41425: ARRAY
41426: GREATEREQUAL
41427: AND
41428: ST_TO_ADDR
// end ;
41429: LD_VAR 0 3
41433: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
41434: LD_INT 0
41436: PPUSH
41437: PPUSH
41438: PPUSH
41439: PPUSH
// pom := GetBase ( building ) ;
41440: LD_ADDR_VAR 0 3
41444: PUSH
41445: LD_VAR 0 1
41449: PPUSH
41450: CALL_OW 274
41454: ST_TO_ADDR
// if not pom then
41455: LD_VAR 0 3
41459: NOT
41460: IFFALSE 41464
// exit ;
41462: GO 41634
// btype := GetBType ( building ) ;
41464: LD_ADDR_VAR 0 5
41468: PUSH
41469: LD_VAR 0 1
41473: PPUSH
41474: CALL_OW 266
41478: ST_TO_ADDR
// if btype = b_armoury then
41479: LD_VAR 0 5
41483: PUSH
41484: LD_INT 4
41486: EQUAL
41487: IFFALSE 41497
// btype := b_barracks ;
41489: LD_ADDR_VAR 0 5
41493: PUSH
41494: LD_INT 5
41496: ST_TO_ADDR
// if btype = b_depot then
41497: LD_VAR 0 5
41501: PUSH
41502: LD_INT 0
41504: EQUAL
41505: IFFALSE 41515
// btype := b_warehouse ;
41507: LD_ADDR_VAR 0 5
41511: PUSH
41512: LD_INT 1
41514: ST_TO_ADDR
// if btype = b_workshop then
41515: LD_VAR 0 5
41519: PUSH
41520: LD_INT 2
41522: EQUAL
41523: IFFALSE 41533
// btype := b_factory ;
41525: LD_ADDR_VAR 0 5
41529: PUSH
41530: LD_INT 3
41532: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41533: LD_ADDR_VAR 0 4
41537: PUSH
41538: LD_VAR 0 5
41542: PPUSH
41543: LD_VAR 0 1
41547: PPUSH
41548: CALL_OW 248
41552: PPUSH
41553: CALL_OW 450
41557: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41558: LD_ADDR_VAR 0 2
41562: PUSH
41563: LD_VAR 0 3
41567: PPUSH
41568: LD_INT 1
41570: PPUSH
41571: CALL_OW 275
41575: PUSH
41576: LD_VAR 0 4
41580: PUSH
41581: LD_INT 1
41583: ARRAY
41584: GREATEREQUAL
41585: PUSH
41586: LD_VAR 0 3
41590: PPUSH
41591: LD_INT 2
41593: PPUSH
41594: CALL_OW 275
41598: PUSH
41599: LD_VAR 0 4
41603: PUSH
41604: LD_INT 2
41606: ARRAY
41607: GREATEREQUAL
41608: AND
41609: PUSH
41610: LD_VAR 0 3
41614: PPUSH
41615: LD_INT 3
41617: PPUSH
41618: CALL_OW 275
41622: PUSH
41623: LD_VAR 0 4
41627: PUSH
41628: LD_INT 3
41630: ARRAY
41631: GREATEREQUAL
41632: AND
41633: ST_TO_ADDR
// end ;
41634: LD_VAR 0 2
41638: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
41639: LD_INT 0
41641: PPUSH
41642: PPUSH
41643: PPUSH
// pom := GetBase ( building ) ;
41644: LD_ADDR_VAR 0 4
41648: PUSH
41649: LD_VAR 0 1
41653: PPUSH
41654: CALL_OW 274
41658: ST_TO_ADDR
// if not pom then
41659: LD_VAR 0 4
41663: NOT
41664: IFFALSE 41668
// exit ;
41666: GO 41769
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
41668: LD_ADDR_VAR 0 5
41672: PUSH
41673: LD_VAR 0 2
41677: PPUSH
41678: LD_VAR 0 1
41682: PPUSH
41683: CALL_OW 248
41687: PPUSH
41688: CALL_OW 450
41692: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
41693: LD_ADDR_VAR 0 3
41697: PUSH
41698: LD_VAR 0 4
41702: PPUSH
41703: LD_INT 1
41705: PPUSH
41706: CALL_OW 275
41710: PUSH
41711: LD_VAR 0 5
41715: PUSH
41716: LD_INT 1
41718: ARRAY
41719: GREATEREQUAL
41720: PUSH
41721: LD_VAR 0 4
41725: PPUSH
41726: LD_INT 2
41728: PPUSH
41729: CALL_OW 275
41733: PUSH
41734: LD_VAR 0 5
41738: PUSH
41739: LD_INT 2
41741: ARRAY
41742: GREATEREQUAL
41743: AND
41744: PUSH
41745: LD_VAR 0 4
41749: PPUSH
41750: LD_INT 3
41752: PPUSH
41753: CALL_OW 275
41757: PUSH
41758: LD_VAR 0 5
41762: PUSH
41763: LD_INT 3
41765: ARRAY
41766: GREATEREQUAL
41767: AND
41768: ST_TO_ADDR
// end ;
41769: LD_VAR 0 3
41773: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
41774: LD_INT 0
41776: PPUSH
41777: PPUSH
41778: PPUSH
41779: PPUSH
41780: PPUSH
41781: PPUSH
41782: PPUSH
41783: PPUSH
41784: PPUSH
41785: PPUSH
41786: PPUSH
// result := false ;
41787: LD_ADDR_VAR 0 8
41791: PUSH
41792: LD_INT 0
41794: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
41795: LD_VAR 0 5
41799: NOT
41800: PUSH
41801: LD_VAR 0 1
41805: NOT
41806: OR
41807: PUSH
41808: LD_VAR 0 2
41812: NOT
41813: OR
41814: PUSH
41815: LD_VAR 0 3
41819: NOT
41820: OR
41821: IFFALSE 41825
// exit ;
41823: GO 42639
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
41825: LD_ADDR_VAR 0 14
41829: PUSH
41830: LD_VAR 0 1
41834: PPUSH
41835: LD_VAR 0 2
41839: PPUSH
41840: LD_VAR 0 3
41844: PPUSH
41845: LD_VAR 0 4
41849: PPUSH
41850: LD_VAR 0 5
41854: PUSH
41855: LD_INT 1
41857: ARRAY
41858: PPUSH
41859: CALL_OW 248
41863: PPUSH
41864: LD_INT 0
41866: PPUSH
41867: CALL 43876 0 6
41871: ST_TO_ADDR
// if not hexes then
41872: LD_VAR 0 14
41876: NOT
41877: IFFALSE 41881
// exit ;
41879: GO 42639
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41881: LD_ADDR_VAR 0 17
41885: PUSH
41886: LD_VAR 0 5
41890: PPUSH
41891: LD_INT 22
41893: PUSH
41894: LD_VAR 0 13
41898: PPUSH
41899: CALL_OW 255
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 2
41910: PUSH
41911: LD_INT 30
41913: PUSH
41914: LD_INT 0
41916: PUSH
41917: EMPTY
41918: LIST
41919: LIST
41920: PUSH
41921: LD_INT 30
41923: PUSH
41924: LD_INT 1
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: LIST
41935: PUSH
41936: EMPTY
41937: LIST
41938: LIST
41939: PPUSH
41940: CALL_OW 72
41944: ST_TO_ADDR
// for i = 1 to hexes do
41945: LD_ADDR_VAR 0 9
41949: PUSH
41950: DOUBLE
41951: LD_INT 1
41953: DEC
41954: ST_TO_ADDR
41955: LD_VAR 0 14
41959: PUSH
41960: FOR_TO
41961: IFFALSE 42637
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
41963: LD_ADDR_VAR 0 13
41967: PUSH
41968: LD_VAR 0 14
41972: PUSH
41973: LD_VAR 0 9
41977: ARRAY
41978: PUSH
41979: LD_INT 1
41981: ARRAY
41982: PPUSH
41983: LD_VAR 0 14
41987: PUSH
41988: LD_VAR 0 9
41992: ARRAY
41993: PUSH
41994: LD_INT 2
41996: ARRAY
41997: PPUSH
41998: CALL_OW 428
42002: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
42003: LD_VAR 0 14
42007: PUSH
42008: LD_VAR 0 9
42012: ARRAY
42013: PUSH
42014: LD_INT 1
42016: ARRAY
42017: PPUSH
42018: LD_VAR 0 14
42022: PUSH
42023: LD_VAR 0 9
42027: ARRAY
42028: PUSH
42029: LD_INT 2
42031: ARRAY
42032: PPUSH
42033: CALL_OW 351
42037: PUSH
42038: LD_VAR 0 14
42042: PUSH
42043: LD_VAR 0 9
42047: ARRAY
42048: PUSH
42049: LD_INT 1
42051: ARRAY
42052: PPUSH
42053: LD_VAR 0 14
42057: PUSH
42058: LD_VAR 0 9
42062: ARRAY
42063: PUSH
42064: LD_INT 2
42066: ARRAY
42067: PPUSH
42068: CALL_OW 488
42072: NOT
42073: OR
42074: PUSH
42075: LD_VAR 0 13
42079: PPUSH
42080: CALL_OW 247
42084: PUSH
42085: LD_INT 3
42087: EQUAL
42088: OR
42089: IFFALSE 42095
// exit ;
42091: POP
42092: POP
42093: GO 42639
// if not tmp then
42095: LD_VAR 0 13
42099: NOT
42100: IFFALSE 42104
// continue ;
42102: GO 41960
// result := true ;
42104: LD_ADDR_VAR 0 8
42108: PUSH
42109: LD_INT 1
42111: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
42112: LD_VAR 0 6
42116: PUSH
42117: LD_VAR 0 13
42121: PPUSH
42122: CALL_OW 247
42126: PUSH
42127: LD_INT 2
42129: EQUAL
42130: AND
42131: PUSH
42132: LD_VAR 0 13
42136: PPUSH
42137: CALL_OW 263
42141: PUSH
42142: LD_INT 1
42144: EQUAL
42145: AND
42146: IFFALSE 42310
// begin if IsDrivenBy ( tmp ) then
42148: LD_VAR 0 13
42152: PPUSH
42153: CALL_OW 311
42157: IFFALSE 42161
// continue ;
42159: GO 41960
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
42161: LD_VAR 0 6
42165: PPUSH
42166: LD_INT 3
42168: PUSH
42169: LD_INT 60
42171: PUSH
42172: EMPTY
42173: LIST
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: PUSH
42179: LD_INT 3
42181: PUSH
42182: LD_INT 55
42184: PUSH
42185: EMPTY
42186: LIST
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: EMPTY
42193: LIST
42194: LIST
42195: PPUSH
42196: CALL_OW 72
42200: IFFALSE 42308
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
42202: LD_ADDR_VAR 0 18
42206: PUSH
42207: LD_VAR 0 6
42211: PPUSH
42212: LD_INT 3
42214: PUSH
42215: LD_INT 60
42217: PUSH
42218: EMPTY
42219: LIST
42220: PUSH
42221: EMPTY
42222: LIST
42223: LIST
42224: PUSH
42225: LD_INT 3
42227: PUSH
42228: LD_INT 55
42230: PUSH
42231: EMPTY
42232: LIST
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: PPUSH
42242: CALL_OW 72
42246: PUSH
42247: LD_INT 1
42249: ARRAY
42250: ST_TO_ADDR
// if IsInUnit ( driver ) then
42251: LD_VAR 0 18
42255: PPUSH
42256: CALL_OW 310
42260: IFFALSE 42271
// ComExit ( driver ) ;
42262: LD_VAR 0 18
42266: PPUSH
42267: CALL 67060 0 1
// AddComEnterUnit ( driver , tmp ) ;
42271: LD_VAR 0 18
42275: PPUSH
42276: LD_VAR 0 13
42280: PPUSH
42281: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
42285: LD_VAR 0 18
42289: PPUSH
42290: LD_VAR 0 7
42294: PPUSH
42295: CALL_OW 173
// AddComExitVehicle ( driver ) ;
42299: LD_VAR 0 18
42303: PPUSH
42304: CALL_OW 181
// end ; continue ;
42308: GO 41960
// end ; if not cleaners or not tmp in cleaners then
42310: LD_VAR 0 6
42314: NOT
42315: PUSH
42316: LD_VAR 0 13
42320: PUSH
42321: LD_VAR 0 6
42325: IN
42326: NOT
42327: OR
42328: IFFALSE 42635
// begin if dep then
42330: LD_VAR 0 17
42334: IFFALSE 42470
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
42336: LD_ADDR_VAR 0 16
42340: PUSH
42341: LD_VAR 0 17
42345: PUSH
42346: LD_INT 1
42348: ARRAY
42349: PPUSH
42350: CALL_OW 250
42354: PPUSH
42355: LD_VAR 0 17
42359: PUSH
42360: LD_INT 1
42362: ARRAY
42363: PPUSH
42364: CALL_OW 254
42368: PPUSH
42369: LD_INT 5
42371: PPUSH
42372: CALL_OW 272
42376: PUSH
42377: LD_VAR 0 17
42381: PUSH
42382: LD_INT 1
42384: ARRAY
42385: PPUSH
42386: CALL_OW 251
42390: PPUSH
42391: LD_VAR 0 17
42395: PUSH
42396: LD_INT 1
42398: ARRAY
42399: PPUSH
42400: CALL_OW 254
42404: PPUSH
42405: LD_INT 5
42407: PPUSH
42408: CALL_OW 273
42412: PUSH
42413: EMPTY
42414: LIST
42415: LIST
42416: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
42417: LD_VAR 0 16
42421: PUSH
42422: LD_INT 1
42424: ARRAY
42425: PPUSH
42426: LD_VAR 0 16
42430: PUSH
42431: LD_INT 2
42433: ARRAY
42434: PPUSH
42435: CALL_OW 488
42439: IFFALSE 42470
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
42441: LD_VAR 0 13
42445: PPUSH
42446: LD_VAR 0 16
42450: PUSH
42451: LD_INT 1
42453: ARRAY
42454: PPUSH
42455: LD_VAR 0 16
42459: PUSH
42460: LD_INT 2
42462: ARRAY
42463: PPUSH
42464: CALL_OW 111
// continue ;
42468: GO 41960
// end ; end ; r := GetDir ( tmp ) ;
42470: LD_ADDR_VAR 0 15
42474: PUSH
42475: LD_VAR 0 13
42479: PPUSH
42480: CALL_OW 254
42484: ST_TO_ADDR
// if r = 5 then
42485: LD_VAR 0 15
42489: PUSH
42490: LD_INT 5
42492: EQUAL
42493: IFFALSE 42503
// r := 0 ;
42495: LD_ADDR_VAR 0 15
42499: PUSH
42500: LD_INT 0
42502: ST_TO_ADDR
// for j = r to 5 do
42503: LD_ADDR_VAR 0 10
42507: PUSH
42508: DOUBLE
42509: LD_VAR 0 15
42513: DEC
42514: ST_TO_ADDR
42515: LD_INT 5
42517: PUSH
42518: FOR_TO
42519: IFFALSE 42633
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
42521: LD_ADDR_VAR 0 11
42525: PUSH
42526: LD_VAR 0 13
42530: PPUSH
42531: CALL_OW 250
42535: PPUSH
42536: LD_VAR 0 10
42540: PPUSH
42541: LD_INT 2
42543: PPUSH
42544: CALL_OW 272
42548: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
42549: LD_ADDR_VAR 0 12
42553: PUSH
42554: LD_VAR 0 13
42558: PPUSH
42559: CALL_OW 251
42563: PPUSH
42564: LD_VAR 0 10
42568: PPUSH
42569: LD_INT 2
42571: PPUSH
42572: CALL_OW 273
42576: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
42577: LD_VAR 0 11
42581: PPUSH
42582: LD_VAR 0 12
42586: PPUSH
42587: CALL_OW 488
42591: PUSH
42592: LD_VAR 0 11
42596: PPUSH
42597: LD_VAR 0 12
42601: PPUSH
42602: CALL_OW 428
42606: NOT
42607: AND
42608: IFFALSE 42631
// begin ComMoveXY ( tmp , _x , _y ) ;
42610: LD_VAR 0 13
42614: PPUSH
42615: LD_VAR 0 11
42619: PPUSH
42620: LD_VAR 0 12
42624: PPUSH
42625: CALL_OW 111
// break ;
42629: GO 42633
// end ; end ;
42631: GO 42518
42633: POP
42634: POP
// end ; end ;
42635: GO 41960
42637: POP
42638: POP
// end ;
42639: LD_VAR 0 8
42643: RET
// export function BuildingTechInvented ( side , btype ) ; begin
42644: LD_INT 0
42646: PPUSH
// result := true ;
42647: LD_ADDR_VAR 0 3
42651: PUSH
42652: LD_INT 1
42654: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
42655: LD_VAR 0 2
42659: PUSH
42660: LD_INT 24
42662: DOUBLE
42663: EQUAL
42664: IFTRUE 42674
42666: LD_INT 33
42668: DOUBLE
42669: EQUAL
42670: IFTRUE 42674
42672: GO 42699
42674: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
42675: LD_ADDR_VAR 0 3
42679: PUSH
42680: LD_INT 32
42682: PPUSH
42683: LD_VAR 0 1
42687: PPUSH
42688: CALL_OW 321
42692: PUSH
42693: LD_INT 2
42695: EQUAL
42696: ST_TO_ADDR
42697: GO 43019
42699: LD_INT 20
42701: DOUBLE
42702: EQUAL
42703: IFTRUE 42707
42705: GO 42732
42707: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
42708: LD_ADDR_VAR 0 3
42712: PUSH
42713: LD_INT 6
42715: PPUSH
42716: LD_VAR 0 1
42720: PPUSH
42721: CALL_OW 321
42725: PUSH
42726: LD_INT 2
42728: EQUAL
42729: ST_TO_ADDR
42730: GO 43019
42732: LD_INT 22
42734: DOUBLE
42735: EQUAL
42736: IFTRUE 42746
42738: LD_INT 36
42740: DOUBLE
42741: EQUAL
42742: IFTRUE 42746
42744: GO 42771
42746: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
42747: LD_ADDR_VAR 0 3
42751: PUSH
42752: LD_INT 15
42754: PPUSH
42755: LD_VAR 0 1
42759: PPUSH
42760: CALL_OW 321
42764: PUSH
42765: LD_INT 2
42767: EQUAL
42768: ST_TO_ADDR
42769: GO 43019
42771: LD_INT 30
42773: DOUBLE
42774: EQUAL
42775: IFTRUE 42779
42777: GO 42804
42779: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
42780: LD_ADDR_VAR 0 3
42784: PUSH
42785: LD_INT 20
42787: PPUSH
42788: LD_VAR 0 1
42792: PPUSH
42793: CALL_OW 321
42797: PUSH
42798: LD_INT 2
42800: EQUAL
42801: ST_TO_ADDR
42802: GO 43019
42804: LD_INT 28
42806: DOUBLE
42807: EQUAL
42808: IFTRUE 42818
42810: LD_INT 21
42812: DOUBLE
42813: EQUAL
42814: IFTRUE 42818
42816: GO 42843
42818: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
42819: LD_ADDR_VAR 0 3
42823: PUSH
42824: LD_INT 21
42826: PPUSH
42827: LD_VAR 0 1
42831: PPUSH
42832: CALL_OW 321
42836: PUSH
42837: LD_INT 2
42839: EQUAL
42840: ST_TO_ADDR
42841: GO 43019
42843: LD_INT 16
42845: DOUBLE
42846: EQUAL
42847: IFTRUE 42851
42849: GO 42878
42851: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
42852: LD_ADDR_VAR 0 3
42856: PUSH
42857: LD_EXP 33
42861: PPUSH
42862: LD_VAR 0 1
42866: PPUSH
42867: CALL_OW 321
42871: PUSH
42872: LD_INT 2
42874: EQUAL
42875: ST_TO_ADDR
42876: GO 43019
42878: LD_INT 19
42880: DOUBLE
42881: EQUAL
42882: IFTRUE 42892
42884: LD_INT 23
42886: DOUBLE
42887: EQUAL
42888: IFTRUE 42892
42890: GO 42919
42892: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
42893: LD_ADDR_VAR 0 3
42897: PUSH
42898: LD_EXP 32
42902: PPUSH
42903: LD_VAR 0 1
42907: PPUSH
42908: CALL_OW 321
42912: PUSH
42913: LD_INT 2
42915: EQUAL
42916: ST_TO_ADDR
42917: GO 43019
42919: LD_INT 17
42921: DOUBLE
42922: EQUAL
42923: IFTRUE 42927
42925: GO 42952
42927: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
42928: LD_ADDR_VAR 0 3
42932: PUSH
42933: LD_INT 39
42935: PPUSH
42936: LD_VAR 0 1
42940: PPUSH
42941: CALL_OW 321
42945: PUSH
42946: LD_INT 2
42948: EQUAL
42949: ST_TO_ADDR
42950: GO 43019
42952: LD_INT 18
42954: DOUBLE
42955: EQUAL
42956: IFTRUE 42960
42958: GO 42985
42960: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
42961: LD_ADDR_VAR 0 3
42965: PUSH
42966: LD_INT 40
42968: PPUSH
42969: LD_VAR 0 1
42973: PPUSH
42974: CALL_OW 321
42978: PUSH
42979: LD_INT 2
42981: EQUAL
42982: ST_TO_ADDR
42983: GO 43019
42985: LD_INT 27
42987: DOUBLE
42988: EQUAL
42989: IFTRUE 42993
42991: GO 43018
42993: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
42994: LD_ADDR_VAR 0 3
42998: PUSH
42999: LD_INT 35
43001: PPUSH
43002: LD_VAR 0 1
43006: PPUSH
43007: CALL_OW 321
43011: PUSH
43012: LD_INT 2
43014: EQUAL
43015: ST_TO_ADDR
43016: GO 43019
43018: POP
// end ;
43019: LD_VAR 0 3
43023: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
43024: LD_INT 0
43026: PPUSH
43027: PPUSH
43028: PPUSH
43029: PPUSH
43030: PPUSH
43031: PPUSH
43032: PPUSH
43033: PPUSH
43034: PPUSH
43035: PPUSH
43036: PPUSH
// result := false ;
43037: LD_ADDR_VAR 0 6
43041: PUSH
43042: LD_INT 0
43044: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
43045: LD_VAR 0 1
43049: NOT
43050: PUSH
43051: LD_VAR 0 1
43055: PPUSH
43056: CALL_OW 266
43060: PUSH
43061: LD_INT 0
43063: PUSH
43064: LD_INT 1
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: IN
43071: NOT
43072: OR
43073: PUSH
43074: LD_VAR 0 2
43078: NOT
43079: OR
43080: PUSH
43081: LD_VAR 0 5
43085: PUSH
43086: LD_INT 0
43088: PUSH
43089: LD_INT 1
43091: PUSH
43092: LD_INT 2
43094: PUSH
43095: LD_INT 3
43097: PUSH
43098: LD_INT 4
43100: PUSH
43101: LD_INT 5
43103: PUSH
43104: EMPTY
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: IN
43112: NOT
43113: OR
43114: PUSH
43115: LD_VAR 0 3
43119: PPUSH
43120: LD_VAR 0 4
43124: PPUSH
43125: CALL_OW 488
43129: NOT
43130: OR
43131: IFFALSE 43135
// exit ;
43133: GO 43871
// side := GetSide ( depot ) ;
43135: LD_ADDR_VAR 0 9
43139: PUSH
43140: LD_VAR 0 1
43144: PPUSH
43145: CALL_OW 255
43149: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
43150: LD_VAR 0 9
43154: PPUSH
43155: LD_VAR 0 2
43159: PPUSH
43160: CALL 42644 0 2
43164: NOT
43165: IFFALSE 43169
// exit ;
43167: GO 43871
// pom := GetBase ( depot ) ;
43169: LD_ADDR_VAR 0 10
43173: PUSH
43174: LD_VAR 0 1
43178: PPUSH
43179: CALL_OW 274
43183: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
43184: LD_ADDR_VAR 0 11
43188: PUSH
43189: LD_VAR 0 2
43193: PPUSH
43194: LD_VAR 0 1
43198: PPUSH
43199: CALL_OW 248
43203: PPUSH
43204: CALL_OW 450
43208: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
43209: LD_VAR 0 10
43213: PPUSH
43214: LD_INT 1
43216: PPUSH
43217: CALL_OW 275
43221: PUSH
43222: LD_VAR 0 11
43226: PUSH
43227: LD_INT 1
43229: ARRAY
43230: GREATEREQUAL
43231: PUSH
43232: LD_VAR 0 10
43236: PPUSH
43237: LD_INT 2
43239: PPUSH
43240: CALL_OW 275
43244: PUSH
43245: LD_VAR 0 11
43249: PUSH
43250: LD_INT 2
43252: ARRAY
43253: GREATEREQUAL
43254: AND
43255: PUSH
43256: LD_VAR 0 10
43260: PPUSH
43261: LD_INT 3
43263: PPUSH
43264: CALL_OW 275
43268: PUSH
43269: LD_VAR 0 11
43273: PUSH
43274: LD_INT 3
43276: ARRAY
43277: GREATEREQUAL
43278: AND
43279: NOT
43280: IFFALSE 43284
// exit ;
43282: GO 43871
// if GetBType ( depot ) = b_depot then
43284: LD_VAR 0 1
43288: PPUSH
43289: CALL_OW 266
43293: PUSH
43294: LD_INT 0
43296: EQUAL
43297: IFFALSE 43309
// dist := 28 else
43299: LD_ADDR_VAR 0 14
43303: PUSH
43304: LD_INT 28
43306: ST_TO_ADDR
43307: GO 43317
// dist := 36 ;
43309: LD_ADDR_VAR 0 14
43313: PUSH
43314: LD_INT 36
43316: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
43317: LD_VAR 0 1
43321: PPUSH
43322: LD_VAR 0 3
43326: PPUSH
43327: LD_VAR 0 4
43331: PPUSH
43332: CALL_OW 297
43336: PUSH
43337: LD_VAR 0 14
43341: GREATER
43342: IFFALSE 43346
// exit ;
43344: GO 43871
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
43346: LD_ADDR_VAR 0 12
43350: PUSH
43351: LD_VAR 0 2
43355: PPUSH
43356: LD_VAR 0 3
43360: PPUSH
43361: LD_VAR 0 4
43365: PPUSH
43366: LD_VAR 0 5
43370: PPUSH
43371: LD_VAR 0 1
43375: PPUSH
43376: CALL_OW 248
43380: PPUSH
43381: LD_INT 0
43383: PPUSH
43384: CALL 43876 0 6
43388: ST_TO_ADDR
// if not hexes then
43389: LD_VAR 0 12
43393: NOT
43394: IFFALSE 43398
// exit ;
43396: GO 43871
// hex := GetHexInfo ( x , y ) ;
43398: LD_ADDR_VAR 0 15
43402: PUSH
43403: LD_VAR 0 3
43407: PPUSH
43408: LD_VAR 0 4
43412: PPUSH
43413: CALL_OW 546
43417: ST_TO_ADDR
// if hex [ 1 ] then
43418: LD_VAR 0 15
43422: PUSH
43423: LD_INT 1
43425: ARRAY
43426: IFFALSE 43430
// exit ;
43428: GO 43871
// height := hex [ 2 ] ;
43430: LD_ADDR_VAR 0 13
43434: PUSH
43435: LD_VAR 0 15
43439: PUSH
43440: LD_INT 2
43442: ARRAY
43443: ST_TO_ADDR
// for i = 1 to hexes do
43444: LD_ADDR_VAR 0 7
43448: PUSH
43449: DOUBLE
43450: LD_INT 1
43452: DEC
43453: ST_TO_ADDR
43454: LD_VAR 0 12
43458: PUSH
43459: FOR_TO
43460: IFFALSE 43790
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
43462: LD_VAR 0 12
43466: PUSH
43467: LD_VAR 0 7
43471: ARRAY
43472: PUSH
43473: LD_INT 1
43475: ARRAY
43476: PPUSH
43477: LD_VAR 0 12
43481: PUSH
43482: LD_VAR 0 7
43486: ARRAY
43487: PUSH
43488: LD_INT 2
43490: ARRAY
43491: PPUSH
43492: CALL_OW 488
43496: NOT
43497: PUSH
43498: LD_VAR 0 12
43502: PUSH
43503: LD_VAR 0 7
43507: ARRAY
43508: PUSH
43509: LD_INT 1
43511: ARRAY
43512: PPUSH
43513: LD_VAR 0 12
43517: PUSH
43518: LD_VAR 0 7
43522: ARRAY
43523: PUSH
43524: LD_INT 2
43526: ARRAY
43527: PPUSH
43528: CALL_OW 428
43532: PUSH
43533: LD_INT 0
43535: GREATER
43536: OR
43537: PUSH
43538: LD_VAR 0 12
43542: PUSH
43543: LD_VAR 0 7
43547: ARRAY
43548: PUSH
43549: LD_INT 1
43551: ARRAY
43552: PPUSH
43553: LD_VAR 0 12
43557: PUSH
43558: LD_VAR 0 7
43562: ARRAY
43563: PUSH
43564: LD_INT 2
43566: ARRAY
43567: PPUSH
43568: CALL_OW 351
43572: OR
43573: IFFALSE 43579
// exit ;
43575: POP
43576: POP
43577: GO 43871
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43579: LD_ADDR_VAR 0 8
43583: PUSH
43584: LD_VAR 0 12
43588: PUSH
43589: LD_VAR 0 7
43593: ARRAY
43594: PUSH
43595: LD_INT 1
43597: ARRAY
43598: PPUSH
43599: LD_VAR 0 12
43603: PUSH
43604: LD_VAR 0 7
43608: ARRAY
43609: PUSH
43610: LD_INT 2
43612: ARRAY
43613: PPUSH
43614: CALL_OW 546
43618: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
43619: LD_VAR 0 8
43623: PUSH
43624: LD_INT 1
43626: ARRAY
43627: PUSH
43628: LD_VAR 0 8
43632: PUSH
43633: LD_INT 2
43635: ARRAY
43636: PUSH
43637: LD_VAR 0 13
43641: PUSH
43642: LD_INT 2
43644: PLUS
43645: GREATER
43646: OR
43647: PUSH
43648: LD_VAR 0 8
43652: PUSH
43653: LD_INT 2
43655: ARRAY
43656: PUSH
43657: LD_VAR 0 13
43661: PUSH
43662: LD_INT 2
43664: MINUS
43665: LESS
43666: OR
43667: PUSH
43668: LD_VAR 0 8
43672: PUSH
43673: LD_INT 3
43675: ARRAY
43676: PUSH
43677: LD_INT 0
43679: PUSH
43680: LD_INT 8
43682: PUSH
43683: LD_INT 9
43685: PUSH
43686: LD_INT 10
43688: PUSH
43689: LD_INT 11
43691: PUSH
43692: LD_INT 12
43694: PUSH
43695: LD_INT 13
43697: PUSH
43698: LD_INT 16
43700: PUSH
43701: LD_INT 17
43703: PUSH
43704: LD_INT 18
43706: PUSH
43707: LD_INT 19
43709: PUSH
43710: LD_INT 20
43712: PUSH
43713: LD_INT 21
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: LIST
43720: LIST
43721: LIST
43722: LIST
43723: LIST
43724: LIST
43725: LIST
43726: LIST
43727: LIST
43728: LIST
43729: LIST
43730: IN
43731: NOT
43732: OR
43733: PUSH
43734: LD_VAR 0 8
43738: PUSH
43739: LD_INT 5
43741: ARRAY
43742: NOT
43743: OR
43744: PUSH
43745: LD_VAR 0 8
43749: PUSH
43750: LD_INT 6
43752: ARRAY
43753: PUSH
43754: LD_INT 1
43756: PUSH
43757: LD_INT 2
43759: PUSH
43760: LD_INT 7
43762: PUSH
43763: LD_INT 9
43765: PUSH
43766: LD_INT 10
43768: PUSH
43769: LD_INT 11
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: LIST
43776: LIST
43777: LIST
43778: LIST
43779: IN
43780: NOT
43781: OR
43782: IFFALSE 43788
// exit ;
43784: POP
43785: POP
43786: GO 43871
// end ;
43788: GO 43459
43790: POP
43791: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
43792: LD_VAR 0 9
43796: PPUSH
43797: LD_VAR 0 3
43801: PPUSH
43802: LD_VAR 0 4
43806: PPUSH
43807: LD_INT 20
43809: PPUSH
43810: CALL 35817 0 4
43814: PUSH
43815: LD_INT 4
43817: ARRAY
43818: IFFALSE 43822
// exit ;
43820: GO 43871
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
43822: LD_VAR 0 2
43826: PUSH
43827: LD_INT 29
43829: PUSH
43830: LD_INT 30
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: IN
43837: PUSH
43838: LD_VAR 0 3
43842: PPUSH
43843: LD_VAR 0 4
43847: PPUSH
43848: LD_VAR 0 9
43852: PPUSH
43853: CALL_OW 440
43857: NOT
43858: AND
43859: IFFALSE 43863
// exit ;
43861: GO 43871
// result := true ;
43863: LD_ADDR_VAR 0 6
43867: PUSH
43868: LD_INT 1
43870: ST_TO_ADDR
// end ;
43871: LD_VAR 0 6
43875: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
43876: LD_INT 0
43878: PPUSH
43879: PPUSH
43880: PPUSH
43881: PPUSH
43882: PPUSH
43883: PPUSH
43884: PPUSH
43885: PPUSH
43886: PPUSH
43887: PPUSH
43888: PPUSH
43889: PPUSH
43890: PPUSH
43891: PPUSH
43892: PPUSH
43893: PPUSH
43894: PPUSH
43895: PPUSH
43896: PPUSH
43897: PPUSH
43898: PPUSH
43899: PPUSH
43900: PPUSH
43901: PPUSH
43902: PPUSH
43903: PPUSH
43904: PPUSH
43905: PPUSH
43906: PPUSH
43907: PPUSH
43908: PPUSH
43909: PPUSH
43910: PPUSH
43911: PPUSH
43912: PPUSH
43913: PPUSH
43914: PPUSH
43915: PPUSH
43916: PPUSH
43917: PPUSH
43918: PPUSH
43919: PPUSH
43920: PPUSH
43921: PPUSH
43922: PPUSH
43923: PPUSH
43924: PPUSH
43925: PPUSH
43926: PPUSH
43927: PPUSH
43928: PPUSH
43929: PPUSH
43930: PPUSH
43931: PPUSH
43932: PPUSH
43933: PPUSH
43934: PPUSH
43935: PPUSH
// result = [ ] ;
43936: LD_ADDR_VAR 0 7
43940: PUSH
43941: EMPTY
43942: ST_TO_ADDR
// temp_list = [ ] ;
43943: LD_ADDR_VAR 0 9
43947: PUSH
43948: EMPTY
43949: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
43950: LD_VAR 0 4
43954: PUSH
43955: LD_INT 0
43957: PUSH
43958: LD_INT 1
43960: PUSH
43961: LD_INT 2
43963: PUSH
43964: LD_INT 3
43966: PUSH
43967: LD_INT 4
43969: PUSH
43970: LD_INT 5
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: LIST
43977: LIST
43978: LIST
43979: LIST
43980: IN
43981: NOT
43982: PUSH
43983: LD_VAR 0 1
43987: PUSH
43988: LD_INT 0
43990: PUSH
43991: LD_INT 1
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: IN
43998: PUSH
43999: LD_VAR 0 5
44003: PUSH
44004: LD_INT 1
44006: PUSH
44007: LD_INT 2
44009: PUSH
44010: LD_INT 3
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: LIST
44017: IN
44018: NOT
44019: AND
44020: OR
44021: IFFALSE 44025
// exit ;
44023: GO 62416
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
44025: LD_VAR 0 1
44029: PUSH
44030: LD_INT 6
44032: PUSH
44033: LD_INT 7
44035: PUSH
44036: LD_INT 8
44038: PUSH
44039: LD_INT 13
44041: PUSH
44042: LD_INT 12
44044: PUSH
44045: LD_INT 15
44047: PUSH
44048: LD_INT 11
44050: PUSH
44051: LD_INT 14
44053: PUSH
44054: LD_INT 10
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: LIST
44061: LIST
44062: LIST
44063: LIST
44064: LIST
44065: LIST
44066: LIST
44067: IN
44068: IFFALSE 44078
// btype = b_lab ;
44070: LD_ADDR_VAR 0 1
44074: PUSH
44075: LD_INT 6
44077: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
44078: LD_VAR 0 6
44082: PUSH
44083: LD_INT 0
44085: PUSH
44086: LD_INT 1
44088: PUSH
44089: LD_INT 2
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: LIST
44096: IN
44097: NOT
44098: PUSH
44099: LD_VAR 0 1
44103: PUSH
44104: LD_INT 0
44106: PUSH
44107: LD_INT 1
44109: PUSH
44110: LD_INT 2
44112: PUSH
44113: LD_INT 3
44115: PUSH
44116: LD_INT 6
44118: PUSH
44119: LD_INT 36
44121: PUSH
44122: LD_INT 4
44124: PUSH
44125: LD_INT 5
44127: PUSH
44128: LD_INT 31
44130: PUSH
44131: LD_INT 32
44133: PUSH
44134: LD_INT 33
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: LIST
44141: LIST
44142: LIST
44143: LIST
44144: LIST
44145: LIST
44146: LIST
44147: LIST
44148: LIST
44149: IN
44150: NOT
44151: PUSH
44152: LD_VAR 0 6
44156: PUSH
44157: LD_INT 1
44159: EQUAL
44160: AND
44161: OR
44162: PUSH
44163: LD_VAR 0 1
44167: PUSH
44168: LD_INT 2
44170: PUSH
44171: LD_INT 3
44173: PUSH
44174: EMPTY
44175: LIST
44176: LIST
44177: IN
44178: NOT
44179: PUSH
44180: LD_VAR 0 6
44184: PUSH
44185: LD_INT 2
44187: EQUAL
44188: AND
44189: OR
44190: IFFALSE 44200
// mode = 0 ;
44192: LD_ADDR_VAR 0 6
44196: PUSH
44197: LD_INT 0
44199: ST_TO_ADDR
// case mode of 0 :
44200: LD_VAR 0 6
44204: PUSH
44205: LD_INT 0
44207: DOUBLE
44208: EQUAL
44209: IFTRUE 44213
44211: GO 55666
44213: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
44214: LD_ADDR_VAR 0 11
44218: PUSH
44219: LD_INT 0
44221: PUSH
44222: LD_INT 0
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: PUSH
44229: LD_INT 0
44231: PUSH
44232: LD_INT 1
44234: NEG
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PUSH
44240: LD_INT 1
44242: PUSH
44243: LD_INT 0
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PUSH
44250: LD_INT 1
44252: PUSH
44253: LD_INT 1
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_INT 0
44262: PUSH
44263: LD_INT 1
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: PUSH
44270: LD_INT 1
44272: NEG
44273: PUSH
44274: LD_INT 0
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: LD_INT 1
44283: NEG
44284: PUSH
44285: LD_INT 1
44287: NEG
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: PUSH
44293: LD_INT 1
44295: NEG
44296: PUSH
44297: LD_INT 2
44299: NEG
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: PUSH
44305: LD_INT 0
44307: PUSH
44308: LD_INT 2
44310: NEG
44311: PUSH
44312: EMPTY
44313: LIST
44314: LIST
44315: PUSH
44316: LD_INT 1
44318: PUSH
44319: LD_INT 1
44321: NEG
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 1
44329: PUSH
44330: LD_INT 2
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PUSH
44337: LD_INT 0
44339: PUSH
44340: LD_INT 2
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: PUSH
44347: LD_INT 1
44349: NEG
44350: PUSH
44351: LD_INT 1
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: LD_INT 1
44360: PUSH
44361: LD_INT 3
44363: PUSH
44364: EMPTY
44365: LIST
44366: LIST
44367: PUSH
44368: LD_INT 0
44370: PUSH
44371: LD_INT 3
44373: PUSH
44374: EMPTY
44375: LIST
44376: LIST
44377: PUSH
44378: LD_INT 1
44380: NEG
44381: PUSH
44382: LD_INT 2
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: LIST
44400: LIST
44401: LIST
44402: LIST
44403: LIST
44404: LIST
44405: LIST
44406: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44407: LD_ADDR_VAR 0 12
44411: PUSH
44412: LD_INT 0
44414: PUSH
44415: LD_INT 0
44417: PUSH
44418: EMPTY
44419: LIST
44420: LIST
44421: PUSH
44422: LD_INT 0
44424: PUSH
44425: LD_INT 1
44427: NEG
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: LD_INT 1
44435: PUSH
44436: LD_INT 0
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 1
44445: PUSH
44446: LD_INT 1
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 0
44455: PUSH
44456: LD_INT 1
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 1
44465: NEG
44466: PUSH
44467: LD_INT 0
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: LD_INT 1
44476: NEG
44477: PUSH
44478: LD_INT 1
44480: NEG
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 1
44488: PUSH
44489: LD_INT 1
44491: NEG
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: LD_INT 2
44499: PUSH
44500: LD_INT 0
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: LD_INT 2
44509: PUSH
44510: LD_INT 1
44512: PUSH
44513: EMPTY
44514: LIST
44515: LIST
44516: PUSH
44517: LD_INT 1
44519: NEG
44520: PUSH
44521: LD_INT 1
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: PUSH
44528: LD_INT 2
44530: NEG
44531: PUSH
44532: LD_INT 0
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 2
44541: NEG
44542: PUSH
44543: LD_INT 1
44545: NEG
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PUSH
44551: LD_INT 2
44553: NEG
44554: PUSH
44555: LD_INT 1
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: PUSH
44562: LD_INT 3
44564: NEG
44565: PUSH
44566: LD_INT 0
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: PUSH
44573: LD_INT 3
44575: NEG
44576: PUSH
44577: LD_INT 1
44579: NEG
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: PUSH
44585: EMPTY
44586: LIST
44587: LIST
44588: LIST
44589: LIST
44590: LIST
44591: LIST
44592: LIST
44593: LIST
44594: LIST
44595: LIST
44596: LIST
44597: LIST
44598: LIST
44599: LIST
44600: LIST
44601: LIST
44602: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44603: LD_ADDR_VAR 0 13
44607: PUSH
44608: LD_INT 0
44610: PUSH
44611: LD_INT 0
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: PUSH
44618: LD_INT 0
44620: PUSH
44621: LD_INT 1
44623: NEG
44624: PUSH
44625: EMPTY
44626: LIST
44627: LIST
44628: PUSH
44629: LD_INT 1
44631: PUSH
44632: LD_INT 0
44634: PUSH
44635: EMPTY
44636: LIST
44637: LIST
44638: PUSH
44639: LD_INT 1
44641: PUSH
44642: LD_INT 1
44644: PUSH
44645: EMPTY
44646: LIST
44647: LIST
44648: PUSH
44649: LD_INT 0
44651: PUSH
44652: LD_INT 1
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 1
44661: NEG
44662: PUSH
44663: LD_INT 0
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: PUSH
44670: LD_INT 1
44672: NEG
44673: PUSH
44674: LD_INT 1
44676: NEG
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PUSH
44682: LD_INT 1
44684: NEG
44685: PUSH
44686: LD_INT 2
44688: NEG
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: LD_INT 2
44696: PUSH
44697: LD_INT 1
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 2
44706: PUSH
44707: LD_INT 2
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 1
44716: PUSH
44717: LD_INT 2
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: LD_INT 2
44726: NEG
44727: PUSH
44728: LD_INT 1
44730: NEG
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: PUSH
44736: LD_INT 2
44738: NEG
44739: PUSH
44740: LD_INT 2
44742: NEG
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: LD_INT 2
44750: NEG
44751: PUSH
44752: LD_INT 3
44754: NEG
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: LD_INT 3
44762: NEG
44763: PUSH
44764: LD_INT 2
44766: NEG
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PUSH
44772: LD_INT 3
44774: NEG
44775: PUSH
44776: LD_INT 3
44778: NEG
44779: PUSH
44780: EMPTY
44781: LIST
44782: LIST
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: LIST
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
44802: LD_ADDR_VAR 0 14
44806: PUSH
44807: LD_INT 0
44809: PUSH
44810: LD_INT 0
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: LD_INT 0
44819: PUSH
44820: LD_INT 1
44822: NEG
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 1
44830: PUSH
44831: LD_INT 0
44833: PUSH
44834: EMPTY
44835: LIST
44836: LIST
44837: PUSH
44838: LD_INT 1
44840: PUSH
44841: LD_INT 1
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: LD_INT 0
44850: PUSH
44851: LD_INT 1
44853: PUSH
44854: EMPTY
44855: LIST
44856: LIST
44857: PUSH
44858: LD_INT 1
44860: NEG
44861: PUSH
44862: LD_INT 0
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: LD_INT 1
44871: NEG
44872: PUSH
44873: LD_INT 1
44875: NEG
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: LD_INT 1
44883: NEG
44884: PUSH
44885: LD_INT 2
44887: NEG
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 0
44895: PUSH
44896: LD_INT 2
44898: NEG
44899: PUSH
44900: EMPTY
44901: LIST
44902: LIST
44903: PUSH
44904: LD_INT 1
44906: PUSH
44907: LD_INT 1
44909: NEG
44910: PUSH
44911: EMPTY
44912: LIST
44913: LIST
44914: PUSH
44915: LD_INT 1
44917: PUSH
44918: LD_INT 2
44920: PUSH
44921: EMPTY
44922: LIST
44923: LIST
44924: PUSH
44925: LD_INT 0
44927: PUSH
44928: LD_INT 2
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: PUSH
44935: LD_INT 1
44937: NEG
44938: PUSH
44939: LD_INT 1
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: PUSH
44946: LD_INT 1
44948: NEG
44949: PUSH
44950: LD_INT 3
44952: NEG
44953: PUSH
44954: EMPTY
44955: LIST
44956: LIST
44957: PUSH
44958: LD_INT 0
44960: PUSH
44961: LD_INT 3
44963: NEG
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: LD_INT 1
44971: PUSH
44972: LD_INT 2
44974: NEG
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: LIST
44984: LIST
44985: LIST
44986: LIST
44987: LIST
44988: LIST
44989: LIST
44990: LIST
44991: LIST
44992: LIST
44993: LIST
44994: LIST
44995: LIST
44996: LIST
44997: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
44998: LD_ADDR_VAR 0 15
45002: PUSH
45003: LD_INT 0
45005: PUSH
45006: LD_INT 0
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 0
45015: PUSH
45016: LD_INT 1
45018: NEG
45019: PUSH
45020: EMPTY
45021: LIST
45022: LIST
45023: PUSH
45024: LD_INT 1
45026: PUSH
45027: LD_INT 0
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: LD_INT 1
45036: PUSH
45037: LD_INT 1
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: LD_INT 0
45046: PUSH
45047: LD_INT 1
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: PUSH
45054: LD_INT 1
45056: NEG
45057: PUSH
45058: LD_INT 0
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PUSH
45065: LD_INT 1
45067: NEG
45068: PUSH
45069: LD_INT 1
45071: NEG
45072: PUSH
45073: EMPTY
45074: LIST
45075: LIST
45076: PUSH
45077: LD_INT 1
45079: PUSH
45080: LD_INT 1
45082: NEG
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 2
45090: PUSH
45091: LD_INT 0
45093: PUSH
45094: EMPTY
45095: LIST
45096: LIST
45097: PUSH
45098: LD_INT 2
45100: PUSH
45101: LD_INT 1
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PUSH
45108: LD_INT 1
45110: NEG
45111: PUSH
45112: LD_INT 1
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 2
45121: NEG
45122: PUSH
45123: LD_INT 0
45125: PUSH
45126: EMPTY
45127: LIST
45128: LIST
45129: PUSH
45130: LD_INT 2
45132: NEG
45133: PUSH
45134: LD_INT 1
45136: NEG
45137: PUSH
45138: EMPTY
45139: LIST
45140: LIST
45141: PUSH
45142: LD_INT 2
45144: PUSH
45145: LD_INT 1
45147: NEG
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: PUSH
45153: LD_INT 3
45155: PUSH
45156: LD_INT 0
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: PUSH
45163: LD_INT 3
45165: PUSH
45166: LD_INT 1
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PUSH
45173: EMPTY
45174: LIST
45175: LIST
45176: LIST
45177: LIST
45178: LIST
45179: LIST
45180: LIST
45181: LIST
45182: LIST
45183: LIST
45184: LIST
45185: LIST
45186: LIST
45187: LIST
45188: LIST
45189: LIST
45190: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45191: LD_ADDR_VAR 0 16
45195: PUSH
45196: LD_INT 0
45198: PUSH
45199: LD_INT 0
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: LD_INT 0
45208: PUSH
45209: LD_INT 1
45211: NEG
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: PUSH
45217: LD_INT 1
45219: PUSH
45220: LD_INT 0
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 1
45229: PUSH
45230: LD_INT 1
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 0
45239: PUSH
45240: LD_INT 1
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 1
45249: NEG
45250: PUSH
45251: LD_INT 0
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: PUSH
45258: LD_INT 1
45260: NEG
45261: PUSH
45262: LD_INT 1
45264: NEG
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: LD_INT 1
45272: NEG
45273: PUSH
45274: LD_INT 2
45276: NEG
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_INT 2
45284: PUSH
45285: LD_INT 1
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: LD_INT 2
45294: PUSH
45295: LD_INT 2
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 1
45304: PUSH
45305: LD_INT 2
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 2
45314: NEG
45315: PUSH
45316: LD_INT 1
45318: NEG
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 2
45326: NEG
45327: PUSH
45328: LD_INT 2
45330: NEG
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: LD_INT 3
45338: PUSH
45339: LD_INT 2
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: PUSH
45346: LD_INT 3
45348: PUSH
45349: LD_INT 3
45351: PUSH
45352: EMPTY
45353: LIST
45354: LIST
45355: PUSH
45356: LD_INT 2
45358: PUSH
45359: LD_INT 3
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: LIST
45370: LIST
45371: LIST
45372: LIST
45373: LIST
45374: LIST
45375: LIST
45376: LIST
45377: LIST
45378: LIST
45379: LIST
45380: LIST
45381: LIST
45382: LIST
45383: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45384: LD_ADDR_VAR 0 17
45388: PUSH
45389: LD_INT 0
45391: PUSH
45392: LD_INT 0
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 0
45401: PUSH
45402: LD_INT 1
45404: NEG
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 1
45412: PUSH
45413: LD_INT 0
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 1
45422: PUSH
45423: LD_INT 1
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 0
45432: PUSH
45433: LD_INT 1
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 1
45442: NEG
45443: PUSH
45444: LD_INT 0
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 1
45453: NEG
45454: PUSH
45455: LD_INT 1
45457: NEG
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: LD_INT 1
45465: NEG
45466: PUSH
45467: LD_INT 2
45469: NEG
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: LD_INT 0
45477: PUSH
45478: LD_INT 2
45480: NEG
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 1
45488: PUSH
45489: LD_INT 1
45491: NEG
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 2
45499: PUSH
45500: LD_INT 0
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 2
45509: PUSH
45510: LD_INT 1
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 2
45519: PUSH
45520: LD_INT 2
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: LD_INT 1
45529: PUSH
45530: LD_INT 2
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: PUSH
45537: LD_INT 0
45539: PUSH
45540: LD_INT 2
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PUSH
45547: LD_INT 1
45549: NEG
45550: PUSH
45551: LD_INT 1
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: PUSH
45558: LD_INT 2
45560: NEG
45561: PUSH
45562: LD_INT 0
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 2
45571: NEG
45572: PUSH
45573: LD_INT 1
45575: NEG
45576: PUSH
45577: EMPTY
45578: LIST
45579: LIST
45580: PUSH
45581: LD_INT 2
45583: NEG
45584: PUSH
45585: LD_INT 2
45587: NEG
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45614: LD_ADDR_VAR 0 18
45618: PUSH
45619: LD_INT 0
45621: PUSH
45622: LD_INT 0
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 0
45631: PUSH
45632: LD_INT 1
45634: NEG
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 1
45642: PUSH
45643: LD_INT 0
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 1
45652: PUSH
45653: LD_INT 1
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: LD_INT 0
45662: PUSH
45663: LD_INT 1
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 1
45672: NEG
45673: PUSH
45674: LD_INT 0
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 1
45683: NEG
45684: PUSH
45685: LD_INT 1
45687: NEG
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 1
45695: NEG
45696: PUSH
45697: LD_INT 2
45699: NEG
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: LD_INT 0
45707: PUSH
45708: LD_INT 2
45710: NEG
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 1
45718: PUSH
45719: LD_INT 1
45721: NEG
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 2
45729: PUSH
45730: LD_INT 0
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PUSH
45737: LD_INT 2
45739: PUSH
45740: LD_INT 1
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 2
45749: PUSH
45750: LD_INT 2
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 1
45759: PUSH
45760: LD_INT 2
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 0
45769: PUSH
45770: LD_INT 2
45772: PUSH
45773: EMPTY
45774: LIST
45775: LIST
45776: PUSH
45777: LD_INT 1
45779: NEG
45780: PUSH
45781: LD_INT 1
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_INT 2
45790: NEG
45791: PUSH
45792: LD_INT 0
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 2
45801: NEG
45802: PUSH
45803: LD_INT 1
45805: NEG
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: PUSH
45811: LD_INT 2
45813: NEG
45814: PUSH
45815: LD_INT 2
45817: NEG
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: LIST
45827: LIST
45828: LIST
45829: LIST
45830: LIST
45831: LIST
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: LIST
45837: LIST
45838: LIST
45839: LIST
45840: LIST
45841: LIST
45842: LIST
45843: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45844: LD_ADDR_VAR 0 19
45848: PUSH
45849: LD_INT 0
45851: PUSH
45852: LD_INT 0
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: LD_INT 0
45861: PUSH
45862: LD_INT 1
45864: NEG
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 1
45872: PUSH
45873: LD_INT 0
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 1
45882: PUSH
45883: LD_INT 1
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 0
45892: PUSH
45893: LD_INT 1
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 1
45902: NEG
45903: PUSH
45904: LD_INT 0
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 1
45913: NEG
45914: PUSH
45915: LD_INT 1
45917: NEG
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 1
45925: NEG
45926: PUSH
45927: LD_INT 2
45929: NEG
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 0
45937: PUSH
45938: LD_INT 2
45940: NEG
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 1
45948: PUSH
45949: LD_INT 1
45951: NEG
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 2
45959: PUSH
45960: LD_INT 0
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 2
45969: PUSH
45970: LD_INT 1
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 2
45979: PUSH
45980: LD_INT 2
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 1
45989: PUSH
45990: LD_INT 2
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: LD_INT 0
45999: PUSH
46000: LD_INT 2
46002: PUSH
46003: EMPTY
46004: LIST
46005: LIST
46006: PUSH
46007: LD_INT 1
46009: NEG
46010: PUSH
46011: LD_INT 1
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 2
46020: NEG
46021: PUSH
46022: LD_INT 0
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 2
46031: NEG
46032: PUSH
46033: LD_INT 1
46035: NEG
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 2
46043: NEG
46044: PUSH
46045: LD_INT 2
46047: NEG
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: PUSH
46053: EMPTY
46054: LIST
46055: LIST
46056: LIST
46057: LIST
46058: LIST
46059: LIST
46060: LIST
46061: LIST
46062: LIST
46063: LIST
46064: LIST
46065: LIST
46066: LIST
46067: LIST
46068: LIST
46069: LIST
46070: LIST
46071: LIST
46072: LIST
46073: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46074: LD_ADDR_VAR 0 20
46078: PUSH
46079: LD_INT 0
46081: PUSH
46082: LD_INT 0
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 0
46091: PUSH
46092: LD_INT 1
46094: NEG
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: LD_INT 1
46102: PUSH
46103: LD_INT 0
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: PUSH
46110: LD_INT 1
46112: PUSH
46113: LD_INT 1
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 0
46122: PUSH
46123: LD_INT 1
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 1
46132: NEG
46133: PUSH
46134: LD_INT 0
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 1
46143: NEG
46144: PUSH
46145: LD_INT 1
46147: NEG
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 1
46155: NEG
46156: PUSH
46157: LD_INT 2
46159: NEG
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: PUSH
46165: LD_INT 0
46167: PUSH
46168: LD_INT 2
46170: NEG
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 1
46178: PUSH
46179: LD_INT 1
46181: NEG
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 2
46189: PUSH
46190: LD_INT 0
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 2
46199: PUSH
46200: LD_INT 1
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 2
46209: PUSH
46210: LD_INT 2
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 1
46219: PUSH
46220: LD_INT 2
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: PUSH
46227: LD_INT 0
46229: PUSH
46230: LD_INT 2
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 1
46239: NEG
46240: PUSH
46241: LD_INT 1
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 2
46250: NEG
46251: PUSH
46252: LD_INT 0
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 2
46261: NEG
46262: PUSH
46263: LD_INT 1
46265: NEG
46266: PUSH
46267: EMPTY
46268: LIST
46269: LIST
46270: PUSH
46271: LD_INT 2
46273: NEG
46274: PUSH
46275: LD_INT 2
46277: NEG
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: LIST
46292: LIST
46293: LIST
46294: LIST
46295: LIST
46296: LIST
46297: LIST
46298: LIST
46299: LIST
46300: LIST
46301: LIST
46302: LIST
46303: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46304: LD_ADDR_VAR 0 21
46308: PUSH
46309: LD_INT 0
46311: PUSH
46312: LD_INT 0
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 0
46321: PUSH
46322: LD_INT 1
46324: NEG
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 1
46332: PUSH
46333: LD_INT 0
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 1
46342: PUSH
46343: LD_INT 1
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 0
46352: PUSH
46353: LD_INT 1
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 1
46362: NEG
46363: PUSH
46364: LD_INT 0
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 1
46373: NEG
46374: PUSH
46375: LD_INT 1
46377: NEG
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 1
46385: NEG
46386: PUSH
46387: LD_INT 2
46389: NEG
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 0
46397: PUSH
46398: LD_INT 2
46400: NEG
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 1
46408: PUSH
46409: LD_INT 1
46411: NEG
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: PUSH
46417: LD_INT 2
46419: PUSH
46420: LD_INT 0
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: LD_INT 2
46429: PUSH
46430: LD_INT 1
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 2
46439: PUSH
46440: LD_INT 2
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 1
46449: PUSH
46450: LD_INT 2
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 0
46459: PUSH
46460: LD_INT 2
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 1
46469: NEG
46470: PUSH
46471: LD_INT 1
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 2
46480: NEG
46481: PUSH
46482: LD_INT 0
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 2
46491: NEG
46492: PUSH
46493: LD_INT 1
46495: NEG
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 2
46503: NEG
46504: PUSH
46505: LD_INT 2
46507: NEG
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46534: LD_ADDR_VAR 0 22
46538: PUSH
46539: LD_INT 0
46541: PUSH
46542: LD_INT 0
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: PUSH
46549: LD_INT 0
46551: PUSH
46552: LD_INT 1
46554: NEG
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 1
46562: PUSH
46563: LD_INT 0
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 1
46572: PUSH
46573: LD_INT 1
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: PUSH
46580: LD_INT 0
46582: PUSH
46583: LD_INT 1
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: LD_INT 1
46592: NEG
46593: PUSH
46594: LD_INT 0
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 1
46603: NEG
46604: PUSH
46605: LD_INT 1
46607: NEG
46608: PUSH
46609: EMPTY
46610: LIST
46611: LIST
46612: PUSH
46613: LD_INT 1
46615: NEG
46616: PUSH
46617: LD_INT 2
46619: NEG
46620: PUSH
46621: EMPTY
46622: LIST
46623: LIST
46624: PUSH
46625: LD_INT 0
46627: PUSH
46628: LD_INT 2
46630: NEG
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: LD_INT 1
46638: PUSH
46639: LD_INT 1
46641: NEG
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: PUSH
46647: LD_INT 2
46649: PUSH
46650: LD_INT 0
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 2
46659: PUSH
46660: LD_INT 1
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 2
46669: PUSH
46670: LD_INT 2
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 1
46679: PUSH
46680: LD_INT 2
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 0
46689: PUSH
46690: LD_INT 2
46692: PUSH
46693: EMPTY
46694: LIST
46695: LIST
46696: PUSH
46697: LD_INT 1
46699: NEG
46700: PUSH
46701: LD_INT 1
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: LD_INT 2
46710: NEG
46711: PUSH
46712: LD_INT 0
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: LD_INT 2
46721: NEG
46722: PUSH
46723: LD_INT 1
46725: NEG
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: LD_INT 2
46733: NEG
46734: PUSH
46735: LD_INT 2
46737: NEG
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: LIST
46747: LIST
46748: LIST
46749: LIST
46750: LIST
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: LIST
46759: LIST
46760: LIST
46761: LIST
46762: LIST
46763: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
46764: LD_ADDR_VAR 0 23
46768: PUSH
46769: LD_INT 0
46771: PUSH
46772: LD_INT 0
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 0
46781: PUSH
46782: LD_INT 1
46784: NEG
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 1
46792: PUSH
46793: LD_INT 0
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 1
46802: PUSH
46803: LD_INT 1
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 0
46812: PUSH
46813: LD_INT 1
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 1
46822: NEG
46823: PUSH
46824: LD_INT 0
46826: PUSH
46827: EMPTY
46828: LIST
46829: LIST
46830: PUSH
46831: LD_INT 1
46833: NEG
46834: PUSH
46835: LD_INT 1
46837: NEG
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 1
46845: NEG
46846: PUSH
46847: LD_INT 2
46849: NEG
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 0
46857: PUSH
46858: LD_INT 2
46860: NEG
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 1
46868: PUSH
46869: LD_INT 1
46871: NEG
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 2
46879: PUSH
46880: LD_INT 0
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: PUSH
46887: LD_INT 2
46889: PUSH
46890: LD_INT 1
46892: PUSH
46893: EMPTY
46894: LIST
46895: LIST
46896: PUSH
46897: LD_INT 2
46899: PUSH
46900: LD_INT 2
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 1
46909: PUSH
46910: LD_INT 2
46912: PUSH
46913: EMPTY
46914: LIST
46915: LIST
46916: PUSH
46917: LD_INT 0
46919: PUSH
46920: LD_INT 2
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 1
46929: NEG
46930: PUSH
46931: LD_INT 1
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 2
46940: NEG
46941: PUSH
46942: LD_INT 0
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 2
46951: NEG
46952: PUSH
46953: LD_INT 1
46955: NEG
46956: PUSH
46957: EMPTY
46958: LIST
46959: LIST
46960: PUSH
46961: LD_INT 2
46963: NEG
46964: PUSH
46965: LD_INT 2
46967: NEG
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 2
46975: NEG
46976: PUSH
46977: LD_INT 3
46979: NEG
46980: PUSH
46981: EMPTY
46982: LIST
46983: LIST
46984: PUSH
46985: LD_INT 1
46987: NEG
46988: PUSH
46989: LD_INT 3
46991: NEG
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 1
46999: PUSH
47000: LD_INT 2
47002: NEG
47003: PUSH
47004: EMPTY
47005: LIST
47006: LIST
47007: PUSH
47008: LD_INT 2
47010: PUSH
47011: LD_INT 1
47013: NEG
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: LIST
47042: LIST
47043: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
47044: LD_ADDR_VAR 0 24
47048: PUSH
47049: LD_INT 0
47051: PUSH
47052: LD_INT 0
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 0
47061: PUSH
47062: LD_INT 1
47064: NEG
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 1
47072: PUSH
47073: LD_INT 0
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 1
47082: PUSH
47083: LD_INT 1
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 0
47092: PUSH
47093: LD_INT 1
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 1
47102: NEG
47103: PUSH
47104: LD_INT 0
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: PUSH
47111: LD_INT 1
47113: NEG
47114: PUSH
47115: LD_INT 1
47117: NEG
47118: PUSH
47119: EMPTY
47120: LIST
47121: LIST
47122: PUSH
47123: LD_INT 1
47125: NEG
47126: PUSH
47127: LD_INT 2
47129: NEG
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 0
47137: PUSH
47138: LD_INT 2
47140: NEG
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 1
47148: PUSH
47149: LD_INT 1
47151: NEG
47152: PUSH
47153: EMPTY
47154: LIST
47155: LIST
47156: PUSH
47157: LD_INT 2
47159: PUSH
47160: LD_INT 0
47162: PUSH
47163: EMPTY
47164: LIST
47165: LIST
47166: PUSH
47167: LD_INT 2
47169: PUSH
47170: LD_INT 1
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: LD_INT 2
47179: PUSH
47180: LD_INT 2
47182: PUSH
47183: EMPTY
47184: LIST
47185: LIST
47186: PUSH
47187: LD_INT 1
47189: PUSH
47190: LD_INT 2
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 0
47199: PUSH
47200: LD_INT 2
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 1
47209: NEG
47210: PUSH
47211: LD_INT 1
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 2
47220: NEG
47221: PUSH
47222: LD_INT 0
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 2
47231: NEG
47232: PUSH
47233: LD_INT 1
47235: NEG
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 2
47243: NEG
47244: PUSH
47245: LD_INT 2
47247: NEG
47248: PUSH
47249: EMPTY
47250: LIST
47251: LIST
47252: PUSH
47253: LD_INT 1
47255: PUSH
47256: LD_INT 2
47258: NEG
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: LD_INT 2
47266: PUSH
47267: LD_INT 1
47269: NEG
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 3
47277: PUSH
47278: LD_INT 1
47280: PUSH
47281: EMPTY
47282: LIST
47283: LIST
47284: PUSH
47285: LD_INT 3
47287: PUSH
47288: LD_INT 2
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: LIST
47316: LIST
47317: LIST
47318: LIST
47319: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
47320: LD_ADDR_VAR 0 25
47324: PUSH
47325: LD_INT 0
47327: PUSH
47328: LD_INT 0
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: PUSH
47335: LD_INT 0
47337: PUSH
47338: LD_INT 1
47340: NEG
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 1
47348: PUSH
47349: LD_INT 0
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 1
47358: PUSH
47359: LD_INT 1
47361: PUSH
47362: EMPTY
47363: LIST
47364: LIST
47365: PUSH
47366: LD_INT 0
47368: PUSH
47369: LD_INT 1
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: LD_INT 1
47378: NEG
47379: PUSH
47380: LD_INT 0
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 1
47389: NEG
47390: PUSH
47391: LD_INT 1
47393: NEG
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 1
47401: NEG
47402: PUSH
47403: LD_INT 2
47405: NEG
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 0
47413: PUSH
47414: LD_INT 2
47416: NEG
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 1
47424: PUSH
47425: LD_INT 1
47427: NEG
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 2
47435: PUSH
47436: LD_INT 0
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 2
47445: PUSH
47446: LD_INT 1
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 2
47455: PUSH
47456: LD_INT 2
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 1
47465: PUSH
47466: LD_INT 2
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: LD_INT 0
47475: PUSH
47476: LD_INT 2
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: LD_INT 1
47485: NEG
47486: PUSH
47487: LD_INT 1
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: LD_INT 2
47496: NEG
47497: PUSH
47498: LD_INT 0
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: LD_INT 2
47507: NEG
47508: PUSH
47509: LD_INT 1
47511: NEG
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: LD_INT 2
47519: NEG
47520: PUSH
47521: LD_INT 2
47523: NEG
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 3
47531: PUSH
47532: LD_INT 1
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 3
47541: PUSH
47542: LD_INT 2
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 2
47551: PUSH
47552: LD_INT 3
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: PUSH
47559: LD_INT 1
47561: PUSH
47562: LD_INT 3
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: LIST
47573: LIST
47574: LIST
47575: LIST
47576: LIST
47577: LIST
47578: LIST
47579: LIST
47580: LIST
47581: LIST
47582: LIST
47583: LIST
47584: LIST
47585: LIST
47586: LIST
47587: LIST
47588: LIST
47589: LIST
47590: LIST
47591: LIST
47592: LIST
47593: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47594: LD_ADDR_VAR 0 26
47598: PUSH
47599: LD_INT 0
47601: PUSH
47602: LD_INT 0
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 0
47611: PUSH
47612: LD_INT 1
47614: NEG
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 1
47622: PUSH
47623: LD_INT 0
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 1
47632: PUSH
47633: LD_INT 1
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 0
47642: PUSH
47643: LD_INT 1
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 1
47652: NEG
47653: PUSH
47654: LD_INT 0
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 1
47663: NEG
47664: PUSH
47665: LD_INT 1
47667: NEG
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 1
47675: NEG
47676: PUSH
47677: LD_INT 2
47679: NEG
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: PUSH
47685: LD_INT 0
47687: PUSH
47688: LD_INT 2
47690: NEG
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 1
47698: PUSH
47699: LD_INT 1
47701: NEG
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 2
47709: PUSH
47710: LD_INT 0
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 2
47719: PUSH
47720: LD_INT 1
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: LD_INT 2
47729: PUSH
47730: LD_INT 2
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 1
47739: PUSH
47740: LD_INT 2
47742: PUSH
47743: EMPTY
47744: LIST
47745: LIST
47746: PUSH
47747: LD_INT 0
47749: PUSH
47750: LD_INT 2
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: PUSH
47757: LD_INT 1
47759: NEG
47760: PUSH
47761: LD_INT 1
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 2
47770: NEG
47771: PUSH
47772: LD_INT 0
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: LD_INT 2
47781: NEG
47782: PUSH
47783: LD_INT 1
47785: NEG
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 2
47793: NEG
47794: PUSH
47795: LD_INT 2
47797: NEG
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: LD_INT 2
47805: PUSH
47806: LD_INT 3
47808: PUSH
47809: EMPTY
47810: LIST
47811: LIST
47812: PUSH
47813: LD_INT 1
47815: PUSH
47816: LD_INT 3
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 1
47825: NEG
47826: PUSH
47827: LD_INT 2
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 2
47836: NEG
47837: PUSH
47838: LD_INT 1
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: LIST
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: LIST
47864: LIST
47865: LIST
47866: LIST
47867: LIST
47868: LIST
47869: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47870: LD_ADDR_VAR 0 27
47874: PUSH
47875: LD_INT 0
47877: PUSH
47878: LD_INT 0
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 0
47887: PUSH
47888: LD_INT 1
47890: NEG
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: LD_INT 1
47898: PUSH
47899: LD_INT 0
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: LD_INT 1
47908: PUSH
47909: LD_INT 1
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: LD_INT 0
47918: PUSH
47919: LD_INT 1
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 1
47928: NEG
47929: PUSH
47930: LD_INT 0
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: LD_INT 1
47939: NEG
47940: PUSH
47941: LD_INT 1
47943: NEG
47944: PUSH
47945: EMPTY
47946: LIST
47947: LIST
47948: PUSH
47949: LD_INT 1
47951: NEG
47952: PUSH
47953: LD_INT 2
47955: NEG
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 0
47963: PUSH
47964: LD_INT 2
47966: NEG
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: LD_INT 1
47974: PUSH
47975: LD_INT 1
47977: NEG
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: PUSH
47983: LD_INT 2
47985: PUSH
47986: LD_INT 0
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: LD_INT 2
47995: PUSH
47996: LD_INT 1
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: LD_INT 2
48005: PUSH
48006: LD_INT 2
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 1
48015: PUSH
48016: LD_INT 2
48018: PUSH
48019: EMPTY
48020: LIST
48021: LIST
48022: PUSH
48023: LD_INT 0
48025: PUSH
48026: LD_INT 2
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 1
48035: NEG
48036: PUSH
48037: LD_INT 1
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: PUSH
48044: LD_INT 2
48046: NEG
48047: PUSH
48048: LD_INT 0
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 2
48057: NEG
48058: PUSH
48059: LD_INT 1
48061: NEG
48062: PUSH
48063: EMPTY
48064: LIST
48065: LIST
48066: PUSH
48067: LD_INT 2
48069: NEG
48070: PUSH
48071: LD_INT 2
48073: NEG
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 1
48081: NEG
48082: PUSH
48083: LD_INT 2
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 2
48092: NEG
48093: PUSH
48094: LD_INT 1
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 3
48103: NEG
48104: PUSH
48105: LD_INT 1
48107: NEG
48108: PUSH
48109: EMPTY
48110: LIST
48111: LIST
48112: PUSH
48113: LD_INT 3
48115: NEG
48116: PUSH
48117: LD_INT 2
48119: NEG
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: LIST
48146: LIST
48147: LIST
48148: LIST
48149: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48150: LD_ADDR_VAR 0 28
48154: PUSH
48155: LD_INT 0
48157: PUSH
48158: LD_INT 0
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 0
48167: PUSH
48168: LD_INT 1
48170: NEG
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: PUSH
48176: LD_INT 1
48178: PUSH
48179: LD_INT 0
48181: PUSH
48182: EMPTY
48183: LIST
48184: LIST
48185: PUSH
48186: LD_INT 1
48188: PUSH
48189: LD_INT 1
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 0
48198: PUSH
48199: LD_INT 1
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 1
48208: NEG
48209: PUSH
48210: LD_INT 0
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 1
48219: NEG
48220: PUSH
48221: LD_INT 1
48223: NEG
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 1
48231: NEG
48232: PUSH
48233: LD_INT 2
48235: NEG
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: PUSH
48241: LD_INT 0
48243: PUSH
48244: LD_INT 2
48246: NEG
48247: PUSH
48248: EMPTY
48249: LIST
48250: LIST
48251: PUSH
48252: LD_INT 1
48254: PUSH
48255: LD_INT 1
48257: NEG
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PUSH
48263: LD_INT 2
48265: PUSH
48266: LD_INT 0
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 2
48275: PUSH
48276: LD_INT 1
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 2
48285: PUSH
48286: LD_INT 2
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: LD_INT 1
48295: PUSH
48296: LD_INT 2
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 0
48305: PUSH
48306: LD_INT 2
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 1
48315: NEG
48316: PUSH
48317: LD_INT 1
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: LD_INT 2
48326: NEG
48327: PUSH
48328: LD_INT 0
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 2
48337: NEG
48338: PUSH
48339: LD_INT 1
48341: NEG
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 2
48349: NEG
48350: PUSH
48351: LD_INT 2
48353: NEG
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 2
48361: NEG
48362: PUSH
48363: LD_INT 3
48365: NEG
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 1
48373: NEG
48374: PUSH
48375: LD_INT 3
48377: NEG
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 3
48385: NEG
48386: PUSH
48387: LD_INT 1
48389: NEG
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 3
48397: NEG
48398: PUSH
48399: LD_INT 2
48401: NEG
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: LIST
48420: LIST
48421: LIST
48422: LIST
48423: LIST
48424: LIST
48425: LIST
48426: LIST
48427: LIST
48428: LIST
48429: LIST
48430: LIST
48431: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48432: LD_ADDR_VAR 0 29
48436: PUSH
48437: LD_INT 0
48439: PUSH
48440: LD_INT 0
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 0
48449: PUSH
48450: LD_INT 1
48452: NEG
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: PUSH
48458: LD_INT 1
48460: PUSH
48461: LD_INT 0
48463: PUSH
48464: EMPTY
48465: LIST
48466: LIST
48467: PUSH
48468: LD_INT 1
48470: PUSH
48471: LD_INT 1
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 0
48480: PUSH
48481: LD_INT 1
48483: PUSH
48484: EMPTY
48485: LIST
48486: LIST
48487: PUSH
48488: LD_INT 1
48490: NEG
48491: PUSH
48492: LD_INT 0
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 1
48501: NEG
48502: PUSH
48503: LD_INT 1
48505: NEG
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 1
48513: NEG
48514: PUSH
48515: LD_INT 2
48517: NEG
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 0
48525: PUSH
48526: LD_INT 2
48528: NEG
48529: PUSH
48530: EMPTY
48531: LIST
48532: LIST
48533: PUSH
48534: LD_INT 1
48536: PUSH
48537: LD_INT 1
48539: NEG
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 2
48547: PUSH
48548: LD_INT 0
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: LD_INT 2
48557: PUSH
48558: LD_INT 1
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: PUSH
48565: LD_INT 1
48567: PUSH
48568: LD_INT 2
48570: PUSH
48571: EMPTY
48572: LIST
48573: LIST
48574: PUSH
48575: LD_INT 0
48577: PUSH
48578: LD_INT 2
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: LD_INT 1
48587: NEG
48588: PUSH
48589: LD_INT 1
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: PUSH
48596: LD_INT 2
48598: NEG
48599: PUSH
48600: LD_INT 1
48602: NEG
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: LD_INT 2
48610: NEG
48611: PUSH
48612: LD_INT 2
48614: NEG
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: LD_INT 2
48622: NEG
48623: PUSH
48624: LD_INT 3
48626: NEG
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: PUSH
48632: LD_INT 2
48634: PUSH
48635: LD_INT 1
48637: NEG
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: PUSH
48643: LD_INT 3
48645: PUSH
48646: LD_INT 1
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: PUSH
48653: LD_INT 1
48655: PUSH
48656: LD_INT 3
48658: PUSH
48659: EMPTY
48660: LIST
48661: LIST
48662: PUSH
48663: LD_INT 1
48665: NEG
48666: PUSH
48667: LD_INT 2
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: LD_INT 3
48676: NEG
48677: PUSH
48678: LD_INT 2
48680: NEG
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: LIST
48690: LIST
48691: LIST
48692: LIST
48693: LIST
48694: LIST
48695: LIST
48696: LIST
48697: LIST
48698: LIST
48699: LIST
48700: LIST
48701: LIST
48702: LIST
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: LIST
48708: LIST
48709: LIST
48710: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48711: LD_ADDR_VAR 0 30
48715: PUSH
48716: LD_INT 0
48718: PUSH
48719: LD_INT 0
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PUSH
48726: LD_INT 0
48728: PUSH
48729: LD_INT 1
48731: NEG
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 1
48739: PUSH
48740: LD_INT 0
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 1
48749: PUSH
48750: LD_INT 1
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: LD_INT 0
48759: PUSH
48760: LD_INT 1
48762: PUSH
48763: EMPTY
48764: LIST
48765: LIST
48766: PUSH
48767: LD_INT 1
48769: NEG
48770: PUSH
48771: LD_INT 0
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: PUSH
48778: LD_INT 1
48780: NEG
48781: PUSH
48782: LD_INT 1
48784: NEG
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: PUSH
48790: LD_INT 1
48792: NEG
48793: PUSH
48794: LD_INT 2
48796: NEG
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 0
48804: PUSH
48805: LD_INT 2
48807: NEG
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: PUSH
48813: LD_INT 1
48815: PUSH
48816: LD_INT 1
48818: NEG
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: PUSH
48824: LD_INT 2
48826: PUSH
48827: LD_INT 0
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 2
48836: PUSH
48837: LD_INT 1
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 2
48846: PUSH
48847: LD_INT 2
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: LD_INT 1
48856: PUSH
48857: LD_INT 2
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 1
48866: NEG
48867: PUSH
48868: LD_INT 1
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 2
48877: NEG
48878: PUSH
48879: LD_INT 0
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 2
48888: NEG
48889: PUSH
48890: LD_INT 1
48892: NEG
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 1
48900: NEG
48901: PUSH
48902: LD_INT 3
48904: NEG
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 1
48912: PUSH
48913: LD_INT 2
48915: NEG
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: LD_INT 3
48923: PUSH
48924: LD_INT 2
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 2
48933: PUSH
48934: LD_INT 3
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 2
48943: NEG
48944: PUSH
48945: LD_INT 1
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 3
48954: NEG
48955: PUSH
48956: LD_INT 1
48958: NEG
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: LIST
48968: LIST
48969: LIST
48970: LIST
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: LIST
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: LIST
48984: LIST
48985: LIST
48986: LIST
48987: LIST
48988: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
48989: LD_ADDR_VAR 0 31
48993: PUSH
48994: LD_INT 0
48996: PUSH
48997: LD_INT 0
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: LD_INT 0
49006: PUSH
49007: LD_INT 1
49009: NEG
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 1
49017: PUSH
49018: LD_INT 0
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 1
49027: PUSH
49028: LD_INT 1
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: PUSH
49035: LD_INT 0
49037: PUSH
49038: LD_INT 1
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: PUSH
49045: LD_INT 1
49047: NEG
49048: PUSH
49049: LD_INT 0
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 1
49058: NEG
49059: PUSH
49060: LD_INT 1
49062: NEG
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 1
49070: NEG
49071: PUSH
49072: LD_INT 2
49074: NEG
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: PUSH
49080: LD_INT 1
49082: PUSH
49083: LD_INT 1
49085: NEG
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 2
49093: PUSH
49094: LD_INT 0
49096: PUSH
49097: EMPTY
49098: LIST
49099: LIST
49100: PUSH
49101: LD_INT 2
49103: PUSH
49104: LD_INT 1
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 2
49113: PUSH
49114: LD_INT 2
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: PUSH
49121: LD_INT 1
49123: PUSH
49124: LD_INT 2
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 0
49133: PUSH
49134: LD_INT 2
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: LD_INT 1
49143: NEG
49144: PUSH
49145: LD_INT 1
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 2
49154: NEG
49155: PUSH
49156: LD_INT 1
49158: NEG
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 2
49166: NEG
49167: PUSH
49168: LD_INT 2
49170: NEG
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 2
49178: NEG
49179: PUSH
49180: LD_INT 3
49182: NEG
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 2
49190: PUSH
49191: LD_INT 1
49193: NEG
49194: PUSH
49195: EMPTY
49196: LIST
49197: LIST
49198: PUSH
49199: LD_INT 3
49201: PUSH
49202: LD_INT 1
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 1
49211: PUSH
49212: LD_INT 3
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 1
49221: NEG
49222: PUSH
49223: LD_INT 2
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 3
49232: NEG
49233: PUSH
49234: LD_INT 2
49236: NEG
49237: PUSH
49238: EMPTY
49239: LIST
49240: LIST
49241: PUSH
49242: EMPTY
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: LIST
49251: LIST
49252: LIST
49253: LIST
49254: LIST
49255: LIST
49256: LIST
49257: LIST
49258: LIST
49259: LIST
49260: LIST
49261: LIST
49262: LIST
49263: LIST
49264: LIST
49265: LIST
49266: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49267: LD_ADDR_VAR 0 32
49271: PUSH
49272: LD_INT 0
49274: PUSH
49275: LD_INT 0
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: LD_INT 0
49284: PUSH
49285: LD_INT 1
49287: NEG
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 1
49295: PUSH
49296: LD_INT 0
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 1
49305: PUSH
49306: LD_INT 1
49308: PUSH
49309: EMPTY
49310: LIST
49311: LIST
49312: PUSH
49313: LD_INT 0
49315: PUSH
49316: LD_INT 1
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: LD_INT 1
49325: NEG
49326: PUSH
49327: LD_INT 0
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: LD_INT 1
49336: NEG
49337: PUSH
49338: LD_INT 1
49340: NEG
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 1
49348: NEG
49349: PUSH
49350: LD_INT 2
49352: NEG
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: LD_INT 0
49360: PUSH
49361: LD_INT 2
49363: NEG
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 1
49371: PUSH
49372: LD_INT 1
49374: NEG
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 2
49382: PUSH
49383: LD_INT 1
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 2
49392: PUSH
49393: LD_INT 2
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 1
49402: PUSH
49403: LD_INT 2
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 0
49412: PUSH
49413: LD_INT 2
49415: PUSH
49416: EMPTY
49417: LIST
49418: LIST
49419: PUSH
49420: LD_INT 1
49422: NEG
49423: PUSH
49424: LD_INT 1
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: PUSH
49431: LD_INT 2
49433: NEG
49434: PUSH
49435: LD_INT 0
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 2
49444: NEG
49445: PUSH
49446: LD_INT 1
49448: NEG
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 1
49456: NEG
49457: PUSH
49458: LD_INT 3
49460: NEG
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: PUSH
49466: LD_INT 1
49468: PUSH
49469: LD_INT 2
49471: NEG
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 3
49479: PUSH
49480: LD_INT 2
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 2
49489: PUSH
49490: LD_INT 3
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 2
49499: NEG
49500: PUSH
49501: LD_INT 1
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 3
49510: NEG
49511: PUSH
49512: LD_INT 1
49514: NEG
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: LIST
49524: LIST
49525: LIST
49526: LIST
49527: LIST
49528: LIST
49529: LIST
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49545: LD_ADDR_VAR 0 33
49549: PUSH
49550: LD_INT 0
49552: PUSH
49553: LD_INT 0
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 0
49562: PUSH
49563: LD_INT 1
49565: NEG
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 1
49573: PUSH
49574: LD_INT 0
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 1
49583: PUSH
49584: LD_INT 1
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 0
49593: PUSH
49594: LD_INT 1
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: PUSH
49601: LD_INT 1
49603: NEG
49604: PUSH
49605: LD_INT 0
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: LD_INT 1
49614: NEG
49615: PUSH
49616: LD_INT 1
49618: NEG
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 1
49626: NEG
49627: PUSH
49628: LD_INT 2
49630: NEG
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 1
49638: PUSH
49639: LD_INT 1
49641: NEG
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 2
49649: PUSH
49650: LD_INT 0
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: LD_INT 2
49659: PUSH
49660: LD_INT 1
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: LD_INT 1
49669: PUSH
49670: LD_INT 2
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 0
49679: PUSH
49680: LD_INT 2
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 1
49689: NEG
49690: PUSH
49691: LD_INT 1
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 2
49700: NEG
49701: PUSH
49702: LD_INT 0
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: LD_INT 2
49711: NEG
49712: PUSH
49713: LD_INT 1
49715: NEG
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 2
49723: NEG
49724: PUSH
49725: LD_INT 2
49727: NEG
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 2
49735: NEG
49736: PUSH
49737: LD_INT 3
49739: NEG
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 2
49747: PUSH
49748: LD_INT 1
49750: NEG
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 3
49758: PUSH
49759: LD_INT 1
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 1
49768: PUSH
49769: LD_INT 3
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 1
49778: NEG
49779: PUSH
49780: LD_INT 2
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: LD_INT 3
49789: NEG
49790: PUSH
49791: LD_INT 2
49793: NEG
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: LIST
49807: LIST
49808: LIST
49809: LIST
49810: LIST
49811: LIST
49812: LIST
49813: LIST
49814: LIST
49815: LIST
49816: LIST
49817: LIST
49818: LIST
49819: LIST
49820: LIST
49821: LIST
49822: LIST
49823: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49824: LD_ADDR_VAR 0 34
49828: PUSH
49829: LD_INT 0
49831: PUSH
49832: LD_INT 0
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 0
49841: PUSH
49842: LD_INT 1
49844: NEG
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 1
49852: PUSH
49853: LD_INT 0
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 1
49862: PUSH
49863: LD_INT 1
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 0
49872: PUSH
49873: LD_INT 1
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 1
49882: NEG
49883: PUSH
49884: LD_INT 0
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 1
49893: NEG
49894: PUSH
49895: LD_INT 1
49897: NEG
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 1
49905: NEG
49906: PUSH
49907: LD_INT 2
49909: NEG
49910: PUSH
49911: EMPTY
49912: LIST
49913: LIST
49914: PUSH
49915: LD_INT 0
49917: PUSH
49918: LD_INT 2
49920: NEG
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 1
49928: PUSH
49929: LD_INT 1
49931: NEG
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 2
49939: PUSH
49940: LD_INT 1
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 2
49949: PUSH
49950: LD_INT 2
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PUSH
49957: LD_INT 1
49959: PUSH
49960: LD_INT 2
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: LD_INT 1
49969: NEG
49970: PUSH
49971: LD_INT 1
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: LD_INT 2
49980: NEG
49981: PUSH
49982: LD_INT 0
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 2
49991: NEG
49992: PUSH
49993: LD_INT 1
49995: NEG
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 2
50003: NEG
50004: PUSH
50005: LD_INT 2
50007: NEG
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 1
50015: NEG
50016: PUSH
50017: LD_INT 3
50019: NEG
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: LD_INT 1
50027: PUSH
50028: LD_INT 2
50030: NEG
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: LD_INT 3
50038: PUSH
50039: LD_INT 2
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 2
50048: PUSH
50049: LD_INT 3
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: LD_INT 2
50058: NEG
50059: PUSH
50060: LD_INT 1
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 3
50069: NEG
50070: PUSH
50071: LD_INT 1
50073: NEG
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: LIST
50091: LIST
50092: LIST
50093: LIST
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: LIST
50099: LIST
50100: LIST
50101: LIST
50102: LIST
50103: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50104: LD_ADDR_VAR 0 35
50108: PUSH
50109: LD_INT 0
50111: PUSH
50112: LD_INT 0
50114: PUSH
50115: EMPTY
50116: LIST
50117: LIST
50118: PUSH
50119: LD_INT 0
50121: PUSH
50122: LD_INT 1
50124: NEG
50125: PUSH
50126: EMPTY
50127: LIST
50128: LIST
50129: PUSH
50130: LD_INT 1
50132: PUSH
50133: LD_INT 0
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 1
50142: PUSH
50143: LD_INT 1
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 0
50152: PUSH
50153: LD_INT 1
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 1
50162: NEG
50163: PUSH
50164: LD_INT 0
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 1
50173: NEG
50174: PUSH
50175: LD_INT 1
50177: NEG
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 2
50185: PUSH
50186: LD_INT 1
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 2
50195: NEG
50196: PUSH
50197: LD_INT 1
50199: NEG
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50216: LD_ADDR_VAR 0 36
50220: PUSH
50221: LD_INT 0
50223: PUSH
50224: LD_INT 0
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 0
50233: PUSH
50234: LD_INT 1
50236: NEG
50237: PUSH
50238: EMPTY
50239: LIST
50240: LIST
50241: PUSH
50242: LD_INT 1
50244: PUSH
50245: LD_INT 0
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PUSH
50252: LD_INT 1
50254: PUSH
50255: LD_INT 1
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PUSH
50262: LD_INT 0
50264: PUSH
50265: LD_INT 1
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 1
50274: NEG
50275: PUSH
50276: LD_INT 0
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 1
50285: NEG
50286: PUSH
50287: LD_INT 1
50289: NEG
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 1
50297: NEG
50298: PUSH
50299: LD_INT 2
50301: NEG
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 1
50309: PUSH
50310: LD_INT 2
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: EMPTY
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50328: LD_ADDR_VAR 0 37
50332: PUSH
50333: LD_INT 0
50335: PUSH
50336: LD_INT 0
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 0
50345: PUSH
50346: LD_INT 1
50348: NEG
50349: PUSH
50350: EMPTY
50351: LIST
50352: LIST
50353: PUSH
50354: LD_INT 1
50356: PUSH
50357: LD_INT 0
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 1
50366: PUSH
50367: LD_INT 1
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 0
50376: PUSH
50377: LD_INT 1
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 1
50386: NEG
50387: PUSH
50388: LD_INT 0
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: LD_INT 1
50397: NEG
50398: PUSH
50399: LD_INT 1
50401: NEG
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 1
50409: PUSH
50410: LD_INT 1
50412: NEG
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 1
50420: NEG
50421: PUSH
50422: LD_INT 1
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
50440: LD_ADDR_VAR 0 38
50444: PUSH
50445: LD_INT 0
50447: PUSH
50448: LD_INT 0
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 0
50457: PUSH
50458: LD_INT 1
50460: NEG
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 1
50468: PUSH
50469: LD_INT 0
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: LD_INT 1
50478: PUSH
50479: LD_INT 1
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 0
50488: PUSH
50489: LD_INT 1
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: LD_INT 1
50498: NEG
50499: PUSH
50500: LD_INT 0
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 1
50509: NEG
50510: PUSH
50511: LD_INT 1
50513: NEG
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 2
50521: PUSH
50522: LD_INT 1
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: PUSH
50529: LD_INT 2
50531: NEG
50532: PUSH
50533: LD_INT 1
50535: NEG
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: EMPTY
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
50552: LD_ADDR_VAR 0 39
50556: PUSH
50557: LD_INT 0
50559: PUSH
50560: LD_INT 0
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 0
50569: PUSH
50570: LD_INT 1
50572: NEG
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 1
50580: PUSH
50581: LD_INT 0
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: LD_INT 1
50590: PUSH
50591: LD_INT 1
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 0
50600: PUSH
50601: LD_INT 1
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 1
50610: NEG
50611: PUSH
50612: LD_INT 0
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 1
50621: NEG
50622: PUSH
50623: LD_INT 1
50625: NEG
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: LD_INT 1
50633: NEG
50634: PUSH
50635: LD_INT 2
50637: NEG
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 1
50645: PUSH
50646: LD_INT 2
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
50664: LD_ADDR_VAR 0 40
50668: PUSH
50669: LD_INT 0
50671: PUSH
50672: LD_INT 0
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 0
50681: PUSH
50682: LD_INT 1
50684: NEG
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 1
50692: PUSH
50693: LD_INT 0
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 1
50702: PUSH
50703: LD_INT 1
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 0
50712: PUSH
50713: LD_INT 1
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 1
50722: NEG
50723: PUSH
50724: LD_INT 0
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 1
50733: NEG
50734: PUSH
50735: LD_INT 1
50737: NEG
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 1
50745: PUSH
50746: LD_INT 1
50748: NEG
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 1
50756: NEG
50757: PUSH
50758: LD_INT 1
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: LIST
50769: LIST
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: LIST
50775: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50776: LD_ADDR_VAR 0 41
50780: PUSH
50781: LD_INT 0
50783: PUSH
50784: LD_INT 0
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 0
50793: PUSH
50794: LD_INT 1
50796: NEG
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: LD_INT 1
50804: PUSH
50805: LD_INT 0
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: LD_INT 1
50814: PUSH
50815: LD_INT 1
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 0
50824: PUSH
50825: LD_INT 1
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 1
50834: NEG
50835: PUSH
50836: LD_INT 0
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 1
50845: NEG
50846: PUSH
50847: LD_INT 1
50849: NEG
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 1
50857: NEG
50858: PUSH
50859: LD_INT 2
50861: NEG
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 1
50869: PUSH
50870: LD_INT 1
50872: NEG
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 2
50880: PUSH
50881: LD_INT 0
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 2
50890: PUSH
50891: LD_INT 1
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: LD_INT 2
50900: PUSH
50901: LD_INT 2
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 1
50910: PUSH
50911: LD_INT 2
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: LD_INT 1
50920: NEG
50921: PUSH
50922: LD_INT 1
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 2
50931: NEG
50932: PUSH
50933: LD_INT 0
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 2
50942: NEG
50943: PUSH
50944: LD_INT 1
50946: NEG
50947: PUSH
50948: EMPTY
50949: LIST
50950: LIST
50951: PUSH
50952: LD_INT 2
50954: NEG
50955: PUSH
50956: LD_INT 2
50958: NEG
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 2
50966: NEG
50967: PUSH
50968: LD_INT 3
50970: NEG
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: PUSH
50976: LD_INT 2
50978: PUSH
50979: LD_INT 1
50981: NEG
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 3
50989: PUSH
50990: LD_INT 0
50992: PUSH
50993: EMPTY
50994: LIST
50995: LIST
50996: PUSH
50997: LD_INT 3
50999: PUSH
51000: LD_INT 1
51002: PUSH
51003: EMPTY
51004: LIST
51005: LIST
51006: PUSH
51007: LD_INT 3
51009: PUSH
51010: LD_INT 2
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: LD_INT 3
51019: PUSH
51020: LD_INT 3
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 2
51029: PUSH
51030: LD_INT 3
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 2
51039: NEG
51040: PUSH
51041: LD_INT 1
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 3
51050: NEG
51051: PUSH
51052: LD_INT 0
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: LD_INT 3
51061: NEG
51062: PUSH
51063: LD_INT 1
51065: NEG
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 3
51073: NEG
51074: PUSH
51075: LD_INT 2
51077: NEG
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 3
51085: NEG
51086: PUSH
51087: LD_INT 3
51089: NEG
51090: PUSH
51091: EMPTY
51092: LIST
51093: LIST
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: LIST
51104: LIST
51105: LIST
51106: LIST
51107: LIST
51108: LIST
51109: LIST
51110: LIST
51111: LIST
51112: LIST
51113: LIST
51114: LIST
51115: LIST
51116: LIST
51117: LIST
51118: LIST
51119: LIST
51120: LIST
51121: LIST
51122: LIST
51123: LIST
51124: LIST
51125: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51126: LD_ADDR_VAR 0 42
51130: PUSH
51131: LD_INT 0
51133: PUSH
51134: LD_INT 0
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: LD_INT 0
51143: PUSH
51144: LD_INT 1
51146: NEG
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: LD_INT 1
51154: PUSH
51155: LD_INT 0
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 1
51164: PUSH
51165: LD_INT 1
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 0
51174: PUSH
51175: LD_INT 1
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 1
51184: NEG
51185: PUSH
51186: LD_INT 0
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: LD_INT 1
51195: NEG
51196: PUSH
51197: LD_INT 1
51199: NEG
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 1
51207: NEG
51208: PUSH
51209: LD_INT 2
51211: NEG
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: LD_INT 0
51219: PUSH
51220: LD_INT 2
51222: NEG
51223: PUSH
51224: EMPTY
51225: LIST
51226: LIST
51227: PUSH
51228: LD_INT 1
51230: PUSH
51231: LD_INT 1
51233: NEG
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 2
51241: PUSH
51242: LD_INT 1
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 2
51251: PUSH
51252: LD_INT 2
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 1
51261: PUSH
51262: LD_INT 2
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 0
51271: PUSH
51272: LD_INT 2
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 1
51281: NEG
51282: PUSH
51283: LD_INT 1
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 2
51292: NEG
51293: PUSH
51294: LD_INT 1
51296: NEG
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: PUSH
51302: LD_INT 2
51304: NEG
51305: PUSH
51306: LD_INT 2
51308: NEG
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 2
51316: NEG
51317: PUSH
51318: LD_INT 3
51320: NEG
51321: PUSH
51322: EMPTY
51323: LIST
51324: LIST
51325: PUSH
51326: LD_INT 1
51328: NEG
51329: PUSH
51330: LD_INT 3
51332: NEG
51333: PUSH
51334: EMPTY
51335: LIST
51336: LIST
51337: PUSH
51338: LD_INT 0
51340: PUSH
51341: LD_INT 3
51343: NEG
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 1
51351: PUSH
51352: LD_INT 2
51354: NEG
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 3
51362: PUSH
51363: LD_INT 2
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 3
51372: PUSH
51373: LD_INT 3
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 2
51382: PUSH
51383: LD_INT 3
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 1
51392: PUSH
51393: LD_INT 3
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 0
51402: PUSH
51403: LD_INT 3
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 1
51412: NEG
51413: PUSH
51414: LD_INT 2
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 3
51423: NEG
51424: PUSH
51425: LD_INT 2
51427: NEG
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 3
51435: NEG
51436: PUSH
51437: LD_INT 3
51439: NEG
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: EMPTY
51446: LIST
51447: LIST
51448: LIST
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51476: LD_ADDR_VAR 0 43
51480: PUSH
51481: LD_INT 0
51483: PUSH
51484: LD_INT 0
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 0
51493: PUSH
51494: LD_INT 1
51496: NEG
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: PUSH
51502: LD_INT 1
51504: PUSH
51505: LD_INT 0
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: PUSH
51512: LD_INT 1
51514: PUSH
51515: LD_INT 1
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: LD_INT 0
51524: PUSH
51525: LD_INT 1
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 1
51534: NEG
51535: PUSH
51536: LD_INT 0
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 1
51545: NEG
51546: PUSH
51547: LD_INT 1
51549: NEG
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 1
51557: NEG
51558: PUSH
51559: LD_INT 2
51561: NEG
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 0
51569: PUSH
51570: LD_INT 2
51572: NEG
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 1
51580: PUSH
51581: LD_INT 1
51583: NEG
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 2
51591: PUSH
51592: LD_INT 0
51594: PUSH
51595: EMPTY
51596: LIST
51597: LIST
51598: PUSH
51599: LD_INT 2
51601: PUSH
51602: LD_INT 1
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: LD_INT 1
51611: PUSH
51612: LD_INT 2
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: LD_INT 0
51621: PUSH
51622: LD_INT 2
51624: PUSH
51625: EMPTY
51626: LIST
51627: LIST
51628: PUSH
51629: LD_INT 1
51631: NEG
51632: PUSH
51633: LD_INT 1
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 2
51642: NEG
51643: PUSH
51644: LD_INT 0
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 2
51653: NEG
51654: PUSH
51655: LD_INT 1
51657: NEG
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 1
51665: NEG
51666: PUSH
51667: LD_INT 3
51669: NEG
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 0
51677: PUSH
51678: LD_INT 3
51680: NEG
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 1
51688: PUSH
51689: LD_INT 2
51691: NEG
51692: PUSH
51693: EMPTY
51694: LIST
51695: LIST
51696: PUSH
51697: LD_INT 2
51699: PUSH
51700: LD_INT 1
51702: NEG
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 3
51710: PUSH
51711: LD_INT 0
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 3
51720: PUSH
51721: LD_INT 1
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 1
51730: PUSH
51731: LD_INT 3
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 0
51740: PUSH
51741: LD_INT 3
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 1
51750: NEG
51751: PUSH
51752: LD_INT 2
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 2
51761: NEG
51762: PUSH
51763: LD_INT 1
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 3
51772: NEG
51773: PUSH
51774: LD_INT 0
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 3
51783: NEG
51784: PUSH
51785: LD_INT 1
51787: NEG
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: LIST
51812: LIST
51813: LIST
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: LIST
51820: LIST
51821: LIST
51822: LIST
51823: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51824: LD_ADDR_VAR 0 44
51828: PUSH
51829: LD_INT 0
51831: PUSH
51832: LD_INT 0
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: PUSH
51839: LD_INT 0
51841: PUSH
51842: LD_INT 1
51844: NEG
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 1
51852: PUSH
51853: LD_INT 0
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 1
51862: PUSH
51863: LD_INT 1
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 0
51872: PUSH
51873: LD_INT 1
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 1
51882: NEG
51883: PUSH
51884: LD_INT 0
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 1
51893: NEG
51894: PUSH
51895: LD_INT 1
51897: NEG
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 1
51905: NEG
51906: PUSH
51907: LD_INT 2
51909: NEG
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 1
51917: PUSH
51918: LD_INT 1
51920: NEG
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 2
51928: PUSH
51929: LD_INT 0
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 2
51938: PUSH
51939: LD_INT 1
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 2
51948: PUSH
51949: LD_INT 2
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 1
51958: PUSH
51959: LD_INT 2
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: LD_INT 1
51968: NEG
51969: PUSH
51970: LD_INT 1
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 2
51979: NEG
51980: PUSH
51981: LD_INT 0
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 2
51990: NEG
51991: PUSH
51992: LD_INT 1
51994: NEG
51995: PUSH
51996: EMPTY
51997: LIST
51998: LIST
51999: PUSH
52000: LD_INT 2
52002: NEG
52003: PUSH
52004: LD_INT 2
52006: NEG
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 2
52014: NEG
52015: PUSH
52016: LD_INT 3
52018: NEG
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: PUSH
52024: LD_INT 2
52026: PUSH
52027: LD_INT 1
52029: NEG
52030: PUSH
52031: EMPTY
52032: LIST
52033: LIST
52034: PUSH
52035: LD_INT 3
52037: PUSH
52038: LD_INT 0
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 3
52047: PUSH
52048: LD_INT 1
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 3
52057: PUSH
52058: LD_INT 2
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 3
52067: PUSH
52068: LD_INT 3
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 2
52077: PUSH
52078: LD_INT 3
52080: PUSH
52081: EMPTY
52082: LIST
52083: LIST
52084: PUSH
52085: LD_INT 2
52087: NEG
52088: PUSH
52089: LD_INT 1
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 3
52098: NEG
52099: PUSH
52100: LD_INT 0
52102: PUSH
52103: EMPTY
52104: LIST
52105: LIST
52106: PUSH
52107: LD_INT 3
52109: NEG
52110: PUSH
52111: LD_INT 1
52113: NEG
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 3
52121: NEG
52122: PUSH
52123: LD_INT 2
52125: NEG
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 3
52133: NEG
52134: PUSH
52135: LD_INT 3
52137: NEG
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: LIST
52147: LIST
52148: LIST
52149: LIST
52150: LIST
52151: LIST
52152: LIST
52153: LIST
52154: LIST
52155: LIST
52156: LIST
52157: LIST
52158: LIST
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: LIST
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52174: LD_ADDR_VAR 0 45
52178: PUSH
52179: LD_INT 0
52181: PUSH
52182: LD_INT 0
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 0
52191: PUSH
52192: LD_INT 1
52194: NEG
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 1
52202: PUSH
52203: LD_INT 0
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 1
52212: PUSH
52213: LD_INT 1
52215: PUSH
52216: EMPTY
52217: LIST
52218: LIST
52219: PUSH
52220: LD_INT 0
52222: PUSH
52223: LD_INT 1
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 1
52232: NEG
52233: PUSH
52234: LD_INT 0
52236: PUSH
52237: EMPTY
52238: LIST
52239: LIST
52240: PUSH
52241: LD_INT 1
52243: NEG
52244: PUSH
52245: LD_INT 1
52247: NEG
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 1
52255: NEG
52256: PUSH
52257: LD_INT 2
52259: NEG
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 0
52267: PUSH
52268: LD_INT 2
52270: NEG
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: LD_INT 1
52278: PUSH
52279: LD_INT 1
52281: NEG
52282: PUSH
52283: EMPTY
52284: LIST
52285: LIST
52286: PUSH
52287: LD_INT 2
52289: PUSH
52290: LD_INT 1
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: PUSH
52297: LD_INT 2
52299: PUSH
52300: LD_INT 2
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 1
52309: PUSH
52310: LD_INT 2
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: LD_INT 0
52319: PUSH
52320: LD_INT 2
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: PUSH
52327: LD_INT 1
52329: NEG
52330: PUSH
52331: LD_INT 1
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: PUSH
52338: LD_INT 2
52340: NEG
52341: PUSH
52342: LD_INT 1
52344: NEG
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 2
52352: NEG
52353: PUSH
52354: LD_INT 2
52356: NEG
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 2
52364: NEG
52365: PUSH
52366: LD_INT 3
52368: NEG
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 1
52376: NEG
52377: PUSH
52378: LD_INT 3
52380: NEG
52381: PUSH
52382: EMPTY
52383: LIST
52384: LIST
52385: PUSH
52386: LD_INT 0
52388: PUSH
52389: LD_INT 3
52391: NEG
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 1
52399: PUSH
52400: LD_INT 2
52402: NEG
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 3
52410: PUSH
52411: LD_INT 2
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 3
52420: PUSH
52421: LD_INT 3
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 2
52430: PUSH
52431: LD_INT 3
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 1
52440: PUSH
52441: LD_INT 3
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 0
52450: PUSH
52451: LD_INT 3
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 1
52460: NEG
52461: PUSH
52462: LD_INT 2
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: LD_INT 3
52471: NEG
52472: PUSH
52473: LD_INT 2
52475: NEG
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 3
52483: NEG
52484: PUSH
52485: LD_INT 3
52487: NEG
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: LIST
52497: LIST
52498: LIST
52499: LIST
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52524: LD_ADDR_VAR 0 46
52528: PUSH
52529: LD_INT 0
52531: PUSH
52532: LD_INT 0
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: PUSH
52539: LD_INT 0
52541: PUSH
52542: LD_INT 1
52544: NEG
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 1
52552: PUSH
52553: LD_INT 0
52555: PUSH
52556: EMPTY
52557: LIST
52558: LIST
52559: PUSH
52560: LD_INT 1
52562: PUSH
52563: LD_INT 1
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: LD_INT 0
52572: PUSH
52573: LD_INT 1
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: LD_INT 1
52582: NEG
52583: PUSH
52584: LD_INT 0
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: LD_INT 1
52593: NEG
52594: PUSH
52595: LD_INT 1
52597: NEG
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 1
52605: NEG
52606: PUSH
52607: LD_INT 2
52609: NEG
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: LD_INT 0
52617: PUSH
52618: LD_INT 2
52620: NEG
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 1
52628: PUSH
52629: LD_INT 1
52631: NEG
52632: PUSH
52633: EMPTY
52634: LIST
52635: LIST
52636: PUSH
52637: LD_INT 2
52639: PUSH
52640: LD_INT 0
52642: PUSH
52643: EMPTY
52644: LIST
52645: LIST
52646: PUSH
52647: LD_INT 2
52649: PUSH
52650: LD_INT 1
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 1
52659: PUSH
52660: LD_INT 2
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: LD_INT 0
52669: PUSH
52670: LD_INT 2
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: LD_INT 1
52679: NEG
52680: PUSH
52681: LD_INT 1
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 2
52690: NEG
52691: PUSH
52692: LD_INT 0
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 2
52701: NEG
52702: PUSH
52703: LD_INT 1
52705: NEG
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 1
52713: NEG
52714: PUSH
52715: LD_INT 3
52717: NEG
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 0
52725: PUSH
52726: LD_INT 3
52728: NEG
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 1
52736: PUSH
52737: LD_INT 2
52739: NEG
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 2
52747: PUSH
52748: LD_INT 1
52750: NEG
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: PUSH
52756: LD_INT 3
52758: PUSH
52759: LD_INT 0
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: PUSH
52766: LD_INT 3
52768: PUSH
52769: LD_INT 1
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 1
52778: PUSH
52779: LD_INT 3
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: LD_INT 0
52788: PUSH
52789: LD_INT 3
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 1
52798: NEG
52799: PUSH
52800: LD_INT 2
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 2
52809: NEG
52810: PUSH
52811: LD_INT 1
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: LD_INT 3
52820: NEG
52821: PUSH
52822: LD_INT 0
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 3
52831: NEG
52832: PUSH
52833: LD_INT 1
52835: NEG
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: LIST
52871: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52872: LD_ADDR_VAR 0 47
52876: PUSH
52877: LD_INT 0
52879: PUSH
52880: LD_INT 0
52882: PUSH
52883: EMPTY
52884: LIST
52885: LIST
52886: PUSH
52887: LD_INT 0
52889: PUSH
52890: LD_INT 1
52892: NEG
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: PUSH
52898: LD_INT 1
52900: PUSH
52901: LD_INT 0
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 1
52910: PUSH
52911: LD_INT 1
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 0
52920: PUSH
52921: LD_INT 1
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 1
52930: NEG
52931: PUSH
52932: LD_INT 0
52934: PUSH
52935: EMPTY
52936: LIST
52937: LIST
52938: PUSH
52939: LD_INT 1
52941: NEG
52942: PUSH
52943: LD_INT 1
52945: NEG
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: LD_INT 1
52953: NEG
52954: PUSH
52955: LD_INT 2
52957: NEG
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 0
52965: PUSH
52966: LD_INT 2
52968: NEG
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 1
52976: PUSH
52977: LD_INT 1
52979: NEG
52980: PUSH
52981: EMPTY
52982: LIST
52983: LIST
52984: PUSH
52985: LD_INT 2
52987: NEG
52988: PUSH
52989: LD_INT 1
52991: NEG
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: LD_INT 2
52999: NEG
53000: PUSH
53001: LD_INT 2
53003: NEG
53004: PUSH
53005: EMPTY
53006: LIST
53007: LIST
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: LIST
53013: LIST
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
53023: LD_ADDR_VAR 0 48
53027: PUSH
53028: LD_INT 0
53030: PUSH
53031: LD_INT 0
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 0
53040: PUSH
53041: LD_INT 1
53043: NEG
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 1
53051: PUSH
53052: LD_INT 0
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 1
53061: PUSH
53062: LD_INT 1
53064: PUSH
53065: EMPTY
53066: LIST
53067: LIST
53068: PUSH
53069: LD_INT 0
53071: PUSH
53072: LD_INT 1
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 1
53081: NEG
53082: PUSH
53083: LD_INT 0
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 1
53092: NEG
53093: PUSH
53094: LD_INT 1
53096: NEG
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 1
53104: NEG
53105: PUSH
53106: LD_INT 2
53108: NEG
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 0
53116: PUSH
53117: LD_INT 2
53119: NEG
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 1
53127: PUSH
53128: LD_INT 1
53130: NEG
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PUSH
53136: LD_INT 2
53138: PUSH
53139: LD_INT 0
53141: PUSH
53142: EMPTY
53143: LIST
53144: LIST
53145: PUSH
53146: LD_INT 2
53148: PUSH
53149: LD_INT 1
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
53170: LD_ADDR_VAR 0 49
53174: PUSH
53175: LD_INT 0
53177: PUSH
53178: LD_INT 0
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 0
53187: PUSH
53188: LD_INT 1
53190: NEG
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: PUSH
53196: LD_INT 1
53198: PUSH
53199: LD_INT 0
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PUSH
53206: LD_INT 1
53208: PUSH
53209: LD_INT 1
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: PUSH
53216: LD_INT 0
53218: PUSH
53219: LD_INT 1
53221: PUSH
53222: EMPTY
53223: LIST
53224: LIST
53225: PUSH
53226: LD_INT 1
53228: NEG
53229: PUSH
53230: LD_INT 0
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 1
53239: NEG
53240: PUSH
53241: LD_INT 1
53243: NEG
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 1
53251: PUSH
53252: LD_INT 1
53254: NEG
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 2
53262: PUSH
53263: LD_INT 0
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 2
53272: PUSH
53273: LD_INT 1
53275: PUSH
53276: EMPTY
53277: LIST
53278: LIST
53279: PUSH
53280: LD_INT 2
53282: PUSH
53283: LD_INT 2
53285: PUSH
53286: EMPTY
53287: LIST
53288: LIST
53289: PUSH
53290: LD_INT 1
53292: PUSH
53293: LD_INT 2
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: LIST
53304: LIST
53305: LIST
53306: LIST
53307: LIST
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
53314: LD_ADDR_VAR 0 50
53318: PUSH
53319: LD_INT 0
53321: PUSH
53322: LD_INT 0
53324: PUSH
53325: EMPTY
53326: LIST
53327: LIST
53328: PUSH
53329: LD_INT 0
53331: PUSH
53332: LD_INT 1
53334: NEG
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: PUSH
53340: LD_INT 1
53342: PUSH
53343: LD_INT 0
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 1
53352: PUSH
53353: LD_INT 1
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 0
53362: PUSH
53363: LD_INT 1
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 1
53372: NEG
53373: PUSH
53374: LD_INT 0
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: LD_INT 1
53383: NEG
53384: PUSH
53385: LD_INT 1
53387: NEG
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 2
53395: PUSH
53396: LD_INT 1
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 2
53405: PUSH
53406: LD_INT 2
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 1
53415: PUSH
53416: LD_INT 2
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 0
53425: PUSH
53426: LD_INT 2
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: LD_INT 1
53435: NEG
53436: PUSH
53437: LD_INT 1
53439: PUSH
53440: EMPTY
53441: LIST
53442: LIST
53443: PUSH
53444: EMPTY
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
53458: LD_ADDR_VAR 0 51
53462: PUSH
53463: LD_INT 0
53465: PUSH
53466: LD_INT 0
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 0
53475: PUSH
53476: LD_INT 1
53478: NEG
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: PUSH
53484: LD_INT 1
53486: PUSH
53487: LD_INT 0
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 1
53496: PUSH
53497: LD_INT 1
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 0
53506: PUSH
53507: LD_INT 1
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 1
53516: NEG
53517: PUSH
53518: LD_INT 0
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 1
53527: NEG
53528: PUSH
53529: LD_INT 1
53531: NEG
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 1
53539: PUSH
53540: LD_INT 2
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 0
53549: PUSH
53550: LD_INT 2
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 1
53559: NEG
53560: PUSH
53561: LD_INT 1
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 2
53570: NEG
53571: PUSH
53572: LD_INT 0
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 2
53581: NEG
53582: PUSH
53583: LD_INT 1
53585: NEG
53586: PUSH
53587: EMPTY
53588: LIST
53589: LIST
53590: PUSH
53591: EMPTY
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53605: LD_ADDR_VAR 0 52
53609: PUSH
53610: LD_INT 0
53612: PUSH
53613: LD_INT 0
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 0
53622: PUSH
53623: LD_INT 1
53625: NEG
53626: PUSH
53627: EMPTY
53628: LIST
53629: LIST
53630: PUSH
53631: LD_INT 1
53633: PUSH
53634: LD_INT 0
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: LD_INT 1
53643: PUSH
53644: LD_INT 1
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 0
53653: PUSH
53654: LD_INT 1
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: PUSH
53661: LD_INT 1
53663: NEG
53664: PUSH
53665: LD_INT 0
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PUSH
53672: LD_INT 1
53674: NEG
53675: PUSH
53676: LD_INT 1
53678: NEG
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 1
53686: NEG
53687: PUSH
53688: LD_INT 2
53690: NEG
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 1
53698: NEG
53699: PUSH
53700: LD_INT 1
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: LD_INT 2
53709: NEG
53710: PUSH
53711: LD_INT 0
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 2
53720: NEG
53721: PUSH
53722: LD_INT 1
53724: NEG
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 2
53732: NEG
53733: PUSH
53734: LD_INT 2
53736: NEG
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: LIST
53754: LIST
53755: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53756: LD_ADDR_VAR 0 53
53760: PUSH
53761: LD_INT 0
53763: PUSH
53764: LD_INT 0
53766: PUSH
53767: EMPTY
53768: LIST
53769: LIST
53770: PUSH
53771: LD_INT 0
53773: PUSH
53774: LD_INT 1
53776: NEG
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 1
53784: PUSH
53785: LD_INT 0
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 1
53794: PUSH
53795: LD_INT 1
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 0
53804: PUSH
53805: LD_INT 1
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 1
53814: NEG
53815: PUSH
53816: LD_INT 0
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 1
53825: NEG
53826: PUSH
53827: LD_INT 1
53829: NEG
53830: PUSH
53831: EMPTY
53832: LIST
53833: LIST
53834: PUSH
53835: LD_INT 1
53837: NEG
53838: PUSH
53839: LD_INT 2
53841: NEG
53842: PUSH
53843: EMPTY
53844: LIST
53845: LIST
53846: PUSH
53847: LD_INT 0
53849: PUSH
53850: LD_INT 2
53852: NEG
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: PUSH
53858: LD_INT 1
53860: PUSH
53861: LD_INT 1
53863: NEG
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 2
53871: PUSH
53872: LD_INT 0
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 2
53881: PUSH
53882: LD_INT 1
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 2
53891: PUSH
53892: LD_INT 2
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: LD_INT 1
53901: PUSH
53902: LD_INT 2
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 0
53911: PUSH
53912: LD_INT 2
53914: PUSH
53915: EMPTY
53916: LIST
53917: LIST
53918: PUSH
53919: LD_INT 1
53921: NEG
53922: PUSH
53923: LD_INT 1
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 2
53932: NEG
53933: PUSH
53934: LD_INT 0
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 2
53943: NEG
53944: PUSH
53945: LD_INT 1
53947: NEG
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 2
53955: NEG
53956: PUSH
53957: LD_INT 2
53959: NEG
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: LIST
53976: LIST
53977: LIST
53978: LIST
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: LIST
53984: LIST
53985: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53986: LD_ADDR_VAR 0 54
53990: PUSH
53991: LD_INT 0
53993: PUSH
53994: LD_INT 0
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 0
54003: PUSH
54004: LD_INT 1
54006: NEG
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: PUSH
54012: LD_INT 1
54014: PUSH
54015: LD_INT 0
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 1
54024: PUSH
54025: LD_INT 1
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 0
54034: PUSH
54035: LD_INT 1
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 1
54044: NEG
54045: PUSH
54046: LD_INT 0
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 1
54055: NEG
54056: PUSH
54057: LD_INT 1
54059: NEG
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: LD_INT 1
54067: NEG
54068: PUSH
54069: LD_INT 2
54071: NEG
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 0
54079: PUSH
54080: LD_INT 2
54082: NEG
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: LD_INT 1
54090: PUSH
54091: LD_INT 1
54093: NEG
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 2
54101: PUSH
54102: LD_INT 0
54104: PUSH
54105: EMPTY
54106: LIST
54107: LIST
54108: PUSH
54109: LD_INT 2
54111: PUSH
54112: LD_INT 1
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 2
54121: PUSH
54122: LD_INT 2
54124: PUSH
54125: EMPTY
54126: LIST
54127: LIST
54128: PUSH
54129: LD_INT 1
54131: PUSH
54132: LD_INT 2
54134: PUSH
54135: EMPTY
54136: LIST
54137: LIST
54138: PUSH
54139: LD_INT 0
54141: PUSH
54142: LD_INT 2
54144: PUSH
54145: EMPTY
54146: LIST
54147: LIST
54148: PUSH
54149: LD_INT 1
54151: NEG
54152: PUSH
54153: LD_INT 1
54155: PUSH
54156: EMPTY
54157: LIST
54158: LIST
54159: PUSH
54160: LD_INT 2
54162: NEG
54163: PUSH
54164: LD_INT 0
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 2
54173: NEG
54174: PUSH
54175: LD_INT 1
54177: NEG
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 2
54185: NEG
54186: PUSH
54187: LD_INT 2
54189: NEG
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: LIST
54199: LIST
54200: LIST
54201: LIST
54202: LIST
54203: LIST
54204: LIST
54205: LIST
54206: LIST
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: LIST
54214: LIST
54215: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54216: LD_ADDR_VAR 0 55
54220: PUSH
54221: LD_INT 0
54223: PUSH
54224: LD_INT 0
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 0
54233: PUSH
54234: LD_INT 1
54236: NEG
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 1
54244: PUSH
54245: LD_INT 0
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PUSH
54252: LD_INT 1
54254: PUSH
54255: LD_INT 1
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: LD_INT 0
54264: PUSH
54265: LD_INT 1
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 1
54274: NEG
54275: PUSH
54276: LD_INT 0
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: LD_INT 1
54285: NEG
54286: PUSH
54287: LD_INT 1
54289: NEG
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 1
54297: NEG
54298: PUSH
54299: LD_INT 2
54301: NEG
54302: PUSH
54303: EMPTY
54304: LIST
54305: LIST
54306: PUSH
54307: LD_INT 0
54309: PUSH
54310: LD_INT 2
54312: NEG
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: PUSH
54318: LD_INT 1
54320: PUSH
54321: LD_INT 1
54323: NEG
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: PUSH
54329: LD_INT 2
54331: PUSH
54332: LD_INT 0
54334: PUSH
54335: EMPTY
54336: LIST
54337: LIST
54338: PUSH
54339: LD_INT 2
54341: PUSH
54342: LD_INT 1
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 2
54351: PUSH
54352: LD_INT 2
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: LD_INT 1
54361: PUSH
54362: LD_INT 2
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_INT 0
54371: PUSH
54372: LD_INT 2
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 1
54381: NEG
54382: PUSH
54383: LD_INT 1
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PUSH
54390: LD_INT 2
54392: NEG
54393: PUSH
54394: LD_INT 0
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 2
54403: NEG
54404: PUSH
54405: LD_INT 1
54407: NEG
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: LD_INT 2
54415: NEG
54416: PUSH
54417: LD_INT 2
54419: NEG
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54446: LD_ADDR_VAR 0 56
54450: PUSH
54451: LD_INT 0
54453: PUSH
54454: LD_INT 0
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: PUSH
54461: LD_INT 0
54463: PUSH
54464: LD_INT 1
54466: NEG
54467: PUSH
54468: EMPTY
54469: LIST
54470: LIST
54471: PUSH
54472: LD_INT 1
54474: PUSH
54475: LD_INT 0
54477: PUSH
54478: EMPTY
54479: LIST
54480: LIST
54481: PUSH
54482: LD_INT 1
54484: PUSH
54485: LD_INT 1
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_INT 0
54494: PUSH
54495: LD_INT 1
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_INT 1
54504: NEG
54505: PUSH
54506: LD_INT 0
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 1
54515: NEG
54516: PUSH
54517: LD_INT 1
54519: NEG
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 1
54527: NEG
54528: PUSH
54529: LD_INT 2
54531: NEG
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: LD_INT 0
54539: PUSH
54540: LD_INT 2
54542: NEG
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: LD_INT 1
54550: PUSH
54551: LD_INT 1
54553: NEG
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 2
54561: PUSH
54562: LD_INT 0
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 2
54571: PUSH
54572: LD_INT 1
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 2
54581: PUSH
54582: LD_INT 2
54584: PUSH
54585: EMPTY
54586: LIST
54587: LIST
54588: PUSH
54589: LD_INT 1
54591: PUSH
54592: LD_INT 2
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: LD_INT 0
54601: PUSH
54602: LD_INT 2
54604: PUSH
54605: EMPTY
54606: LIST
54607: LIST
54608: PUSH
54609: LD_INT 1
54611: NEG
54612: PUSH
54613: LD_INT 1
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 2
54622: NEG
54623: PUSH
54624: LD_INT 0
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: PUSH
54631: LD_INT 2
54633: NEG
54634: PUSH
54635: LD_INT 1
54637: NEG
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 2
54645: NEG
54646: PUSH
54647: LD_INT 2
54649: NEG
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54676: LD_ADDR_VAR 0 57
54680: PUSH
54681: LD_INT 0
54683: PUSH
54684: LD_INT 0
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 0
54693: PUSH
54694: LD_INT 1
54696: NEG
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 1
54704: PUSH
54705: LD_INT 0
54707: PUSH
54708: EMPTY
54709: LIST
54710: LIST
54711: PUSH
54712: LD_INT 1
54714: PUSH
54715: LD_INT 1
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 0
54724: PUSH
54725: LD_INT 1
54727: PUSH
54728: EMPTY
54729: LIST
54730: LIST
54731: PUSH
54732: LD_INT 1
54734: NEG
54735: PUSH
54736: LD_INT 0
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 1
54745: NEG
54746: PUSH
54747: LD_INT 1
54749: NEG
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 1
54757: NEG
54758: PUSH
54759: LD_INT 2
54761: NEG
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 0
54769: PUSH
54770: LD_INT 2
54772: NEG
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 1
54780: PUSH
54781: LD_INT 1
54783: NEG
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 2
54791: PUSH
54792: LD_INT 0
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: PUSH
54799: LD_INT 2
54801: PUSH
54802: LD_INT 1
54804: PUSH
54805: EMPTY
54806: LIST
54807: LIST
54808: PUSH
54809: LD_INT 2
54811: PUSH
54812: LD_INT 2
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 1
54821: PUSH
54822: LD_INT 2
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 0
54831: PUSH
54832: LD_INT 2
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 1
54841: NEG
54842: PUSH
54843: LD_INT 1
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 2
54852: NEG
54853: PUSH
54854: LD_INT 0
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 2
54863: NEG
54864: PUSH
54865: LD_INT 1
54867: NEG
54868: PUSH
54869: EMPTY
54870: LIST
54871: LIST
54872: PUSH
54873: LD_INT 2
54875: NEG
54876: PUSH
54877: LD_INT 2
54879: NEG
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54906: LD_ADDR_VAR 0 58
54910: PUSH
54911: LD_INT 0
54913: PUSH
54914: LD_INT 0
54916: PUSH
54917: EMPTY
54918: LIST
54919: LIST
54920: PUSH
54921: LD_INT 0
54923: PUSH
54924: LD_INT 1
54926: NEG
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: LD_INT 1
54934: PUSH
54935: LD_INT 0
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 1
54944: PUSH
54945: LD_INT 1
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 0
54954: PUSH
54955: LD_INT 1
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 1
54964: NEG
54965: PUSH
54966: LD_INT 0
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 1
54975: NEG
54976: PUSH
54977: LD_INT 1
54979: NEG
54980: PUSH
54981: EMPTY
54982: LIST
54983: LIST
54984: PUSH
54985: LD_INT 1
54987: NEG
54988: PUSH
54989: LD_INT 2
54991: NEG
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: PUSH
54997: LD_INT 0
54999: PUSH
55000: LD_INT 2
55002: NEG
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: LD_INT 1
55010: PUSH
55011: LD_INT 1
55013: NEG
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 2
55021: PUSH
55022: LD_INT 0
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 2
55031: PUSH
55032: LD_INT 1
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: LD_INT 2
55041: PUSH
55042: LD_INT 2
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 1
55051: PUSH
55052: LD_INT 2
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: PUSH
55059: LD_INT 0
55061: PUSH
55062: LD_INT 2
55064: PUSH
55065: EMPTY
55066: LIST
55067: LIST
55068: PUSH
55069: LD_INT 1
55071: NEG
55072: PUSH
55073: LD_INT 1
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 2
55082: NEG
55083: PUSH
55084: LD_INT 0
55086: PUSH
55087: EMPTY
55088: LIST
55089: LIST
55090: PUSH
55091: LD_INT 2
55093: NEG
55094: PUSH
55095: LD_INT 1
55097: NEG
55098: PUSH
55099: EMPTY
55100: LIST
55101: LIST
55102: PUSH
55103: LD_INT 2
55105: NEG
55106: PUSH
55107: LD_INT 2
55109: NEG
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: LIST
55119: LIST
55120: LIST
55121: LIST
55122: LIST
55123: LIST
55124: LIST
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55136: LD_ADDR_VAR 0 59
55140: PUSH
55141: LD_INT 0
55143: PUSH
55144: LD_INT 0
55146: PUSH
55147: EMPTY
55148: LIST
55149: LIST
55150: PUSH
55151: LD_INT 0
55153: PUSH
55154: LD_INT 1
55156: NEG
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 1
55164: PUSH
55165: LD_INT 0
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 1
55174: PUSH
55175: LD_INT 1
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 0
55184: PUSH
55185: LD_INT 1
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 1
55194: NEG
55195: PUSH
55196: LD_INT 0
55198: PUSH
55199: EMPTY
55200: LIST
55201: LIST
55202: PUSH
55203: LD_INT 1
55205: NEG
55206: PUSH
55207: LD_INT 1
55209: NEG
55210: PUSH
55211: EMPTY
55212: LIST
55213: LIST
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55224: LD_ADDR_VAR 0 60
55228: PUSH
55229: LD_INT 0
55231: PUSH
55232: LD_INT 0
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 0
55241: PUSH
55242: LD_INT 1
55244: NEG
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 1
55252: PUSH
55253: LD_INT 0
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 1
55262: PUSH
55263: LD_INT 1
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 0
55272: PUSH
55273: LD_INT 1
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 1
55282: NEG
55283: PUSH
55284: LD_INT 0
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: LD_INT 1
55293: NEG
55294: PUSH
55295: LD_INT 1
55297: NEG
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: LIST
55307: LIST
55308: LIST
55309: LIST
55310: LIST
55311: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55312: LD_ADDR_VAR 0 61
55316: PUSH
55317: LD_INT 0
55319: PUSH
55320: LD_INT 0
55322: PUSH
55323: EMPTY
55324: LIST
55325: LIST
55326: PUSH
55327: LD_INT 0
55329: PUSH
55330: LD_INT 1
55332: NEG
55333: PUSH
55334: EMPTY
55335: LIST
55336: LIST
55337: PUSH
55338: LD_INT 1
55340: PUSH
55341: LD_INT 0
55343: PUSH
55344: EMPTY
55345: LIST
55346: LIST
55347: PUSH
55348: LD_INT 1
55350: PUSH
55351: LD_INT 1
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: PUSH
55358: LD_INT 0
55360: PUSH
55361: LD_INT 1
55363: PUSH
55364: EMPTY
55365: LIST
55366: LIST
55367: PUSH
55368: LD_INT 1
55370: NEG
55371: PUSH
55372: LD_INT 0
55374: PUSH
55375: EMPTY
55376: LIST
55377: LIST
55378: PUSH
55379: LD_INT 1
55381: NEG
55382: PUSH
55383: LD_INT 1
55385: NEG
55386: PUSH
55387: EMPTY
55388: LIST
55389: LIST
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55400: LD_ADDR_VAR 0 62
55404: PUSH
55405: LD_INT 0
55407: PUSH
55408: LD_INT 0
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: LD_INT 0
55417: PUSH
55418: LD_INT 1
55420: NEG
55421: PUSH
55422: EMPTY
55423: LIST
55424: LIST
55425: PUSH
55426: LD_INT 1
55428: PUSH
55429: LD_INT 0
55431: PUSH
55432: EMPTY
55433: LIST
55434: LIST
55435: PUSH
55436: LD_INT 1
55438: PUSH
55439: LD_INT 1
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 0
55448: PUSH
55449: LD_INT 1
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PUSH
55456: LD_INT 1
55458: NEG
55459: PUSH
55460: LD_INT 0
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 1
55469: NEG
55470: PUSH
55471: LD_INT 1
55473: NEG
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55488: LD_ADDR_VAR 0 63
55492: PUSH
55493: LD_INT 0
55495: PUSH
55496: LD_INT 0
55498: PUSH
55499: EMPTY
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 0
55505: PUSH
55506: LD_INT 1
55508: NEG
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: LD_INT 1
55516: PUSH
55517: LD_INT 0
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 1
55526: PUSH
55527: LD_INT 1
55529: PUSH
55530: EMPTY
55531: LIST
55532: LIST
55533: PUSH
55534: LD_INT 0
55536: PUSH
55537: LD_INT 1
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: PUSH
55544: LD_INT 1
55546: NEG
55547: PUSH
55548: LD_INT 0
55550: PUSH
55551: EMPTY
55552: LIST
55553: LIST
55554: PUSH
55555: LD_INT 1
55557: NEG
55558: PUSH
55559: LD_INT 1
55561: NEG
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: EMPTY
55568: LIST
55569: LIST
55570: LIST
55571: LIST
55572: LIST
55573: LIST
55574: LIST
55575: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
55576: LD_ADDR_VAR 0 64
55580: PUSH
55581: LD_INT 0
55583: PUSH
55584: LD_INT 0
55586: PUSH
55587: EMPTY
55588: LIST
55589: LIST
55590: PUSH
55591: LD_INT 0
55593: PUSH
55594: LD_INT 1
55596: NEG
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 1
55604: PUSH
55605: LD_INT 0
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 1
55614: PUSH
55615: LD_INT 1
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 0
55624: PUSH
55625: LD_INT 1
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 1
55634: NEG
55635: PUSH
55636: LD_INT 0
55638: PUSH
55639: EMPTY
55640: LIST
55641: LIST
55642: PUSH
55643: LD_INT 1
55645: NEG
55646: PUSH
55647: LD_INT 1
55649: NEG
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: LIST
55662: LIST
55663: ST_TO_ADDR
// end ; 1 :
55664: GO 61561
55666: LD_INT 1
55668: DOUBLE
55669: EQUAL
55670: IFTRUE 55674
55672: GO 58297
55674: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55675: LD_ADDR_VAR 0 11
55679: PUSH
55680: LD_INT 1
55682: NEG
55683: PUSH
55684: LD_INT 3
55686: NEG
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: LD_INT 0
55694: PUSH
55695: LD_INT 3
55697: NEG
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: LD_INT 1
55705: PUSH
55706: LD_INT 2
55708: NEG
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: EMPTY
55715: LIST
55716: LIST
55717: LIST
55718: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55719: LD_ADDR_VAR 0 12
55723: PUSH
55724: LD_INT 2
55726: PUSH
55727: LD_INT 1
55729: NEG
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 3
55737: PUSH
55738: LD_INT 0
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 3
55747: PUSH
55748: LD_INT 1
55750: PUSH
55751: EMPTY
55752: LIST
55753: LIST
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: LIST
55759: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55760: LD_ADDR_VAR 0 13
55764: PUSH
55765: LD_INT 3
55767: PUSH
55768: LD_INT 2
55770: PUSH
55771: EMPTY
55772: LIST
55773: LIST
55774: PUSH
55775: LD_INT 3
55777: PUSH
55778: LD_INT 3
55780: PUSH
55781: EMPTY
55782: LIST
55783: LIST
55784: PUSH
55785: LD_INT 2
55787: PUSH
55788: LD_INT 3
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: LIST
55799: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55800: LD_ADDR_VAR 0 14
55804: PUSH
55805: LD_INT 1
55807: PUSH
55808: LD_INT 3
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: PUSH
55815: LD_INT 0
55817: PUSH
55818: LD_INT 3
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 1
55827: NEG
55828: PUSH
55829: LD_INT 2
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: LIST
55840: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55841: LD_ADDR_VAR 0 15
55845: PUSH
55846: LD_INT 2
55848: NEG
55849: PUSH
55850: LD_INT 1
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 3
55859: NEG
55860: PUSH
55861: LD_INT 0
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 3
55870: NEG
55871: PUSH
55872: LD_INT 1
55874: NEG
55875: PUSH
55876: EMPTY
55877: LIST
55878: LIST
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: LIST
55884: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55885: LD_ADDR_VAR 0 16
55889: PUSH
55890: LD_INT 2
55892: NEG
55893: PUSH
55894: LD_INT 3
55896: NEG
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 3
55904: NEG
55905: PUSH
55906: LD_INT 2
55908: NEG
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 3
55916: NEG
55917: PUSH
55918: LD_INT 3
55920: NEG
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: LIST
55930: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55931: LD_ADDR_VAR 0 17
55935: PUSH
55936: LD_INT 1
55938: NEG
55939: PUSH
55940: LD_INT 3
55942: NEG
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: LD_INT 0
55950: PUSH
55951: LD_INT 3
55953: NEG
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: PUSH
55959: LD_INT 1
55961: PUSH
55962: LD_INT 2
55964: NEG
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: LIST
55974: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55975: LD_ADDR_VAR 0 18
55979: PUSH
55980: LD_INT 2
55982: PUSH
55983: LD_INT 1
55985: NEG
55986: PUSH
55987: EMPTY
55988: LIST
55989: LIST
55990: PUSH
55991: LD_INT 3
55993: PUSH
55994: LD_INT 0
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: PUSH
56001: LD_INT 3
56003: PUSH
56004: LD_INT 1
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: EMPTY
56012: LIST
56013: LIST
56014: LIST
56015: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56016: LD_ADDR_VAR 0 19
56020: PUSH
56021: LD_INT 3
56023: PUSH
56024: LD_INT 2
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 3
56033: PUSH
56034: LD_INT 3
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 2
56043: PUSH
56044: LD_INT 3
56046: PUSH
56047: EMPTY
56048: LIST
56049: LIST
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: LIST
56055: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56056: LD_ADDR_VAR 0 20
56060: PUSH
56061: LD_INT 1
56063: PUSH
56064: LD_INT 3
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 0
56073: PUSH
56074: LD_INT 3
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 1
56083: NEG
56084: PUSH
56085: LD_INT 2
56087: PUSH
56088: EMPTY
56089: LIST
56090: LIST
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: LIST
56096: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56097: LD_ADDR_VAR 0 21
56101: PUSH
56102: LD_INT 2
56104: NEG
56105: PUSH
56106: LD_INT 1
56108: PUSH
56109: EMPTY
56110: LIST
56111: LIST
56112: PUSH
56113: LD_INT 3
56115: NEG
56116: PUSH
56117: LD_INT 0
56119: PUSH
56120: EMPTY
56121: LIST
56122: LIST
56123: PUSH
56124: LD_INT 3
56126: NEG
56127: PUSH
56128: LD_INT 1
56130: NEG
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: LIST
56140: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56141: LD_ADDR_VAR 0 22
56145: PUSH
56146: LD_INT 2
56148: NEG
56149: PUSH
56150: LD_INT 3
56152: NEG
56153: PUSH
56154: EMPTY
56155: LIST
56156: LIST
56157: PUSH
56158: LD_INT 3
56160: NEG
56161: PUSH
56162: LD_INT 2
56164: NEG
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 3
56172: NEG
56173: PUSH
56174: LD_INT 3
56176: NEG
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: EMPTY
56183: LIST
56184: LIST
56185: LIST
56186: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
56187: LD_ADDR_VAR 0 23
56191: PUSH
56192: LD_INT 0
56194: PUSH
56195: LD_INT 3
56197: NEG
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: LD_INT 1
56205: NEG
56206: PUSH
56207: LD_INT 4
56209: NEG
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 1
56217: PUSH
56218: LD_INT 3
56220: NEG
56221: PUSH
56222: EMPTY
56223: LIST
56224: LIST
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: LIST
56230: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
56231: LD_ADDR_VAR 0 24
56235: PUSH
56236: LD_INT 3
56238: PUSH
56239: LD_INT 0
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: PUSH
56246: LD_INT 3
56248: PUSH
56249: LD_INT 1
56251: NEG
56252: PUSH
56253: EMPTY
56254: LIST
56255: LIST
56256: PUSH
56257: LD_INT 4
56259: PUSH
56260: LD_INT 1
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: LIST
56271: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
56272: LD_ADDR_VAR 0 25
56276: PUSH
56277: LD_INT 3
56279: PUSH
56280: LD_INT 3
56282: PUSH
56283: EMPTY
56284: LIST
56285: LIST
56286: PUSH
56287: LD_INT 4
56289: PUSH
56290: LD_INT 3
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 3
56299: PUSH
56300: LD_INT 4
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: LIST
56311: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
56312: LD_ADDR_VAR 0 26
56316: PUSH
56317: LD_INT 0
56319: PUSH
56320: LD_INT 3
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: LD_INT 1
56329: PUSH
56330: LD_INT 4
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 1
56339: NEG
56340: PUSH
56341: LD_INT 3
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: EMPTY
56349: LIST
56350: LIST
56351: LIST
56352: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
56353: LD_ADDR_VAR 0 27
56357: PUSH
56358: LD_INT 3
56360: NEG
56361: PUSH
56362: LD_INT 0
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 3
56371: NEG
56372: PUSH
56373: LD_INT 1
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 4
56382: NEG
56383: PUSH
56384: LD_INT 1
56386: NEG
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: LIST
56396: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
56397: LD_ADDR_VAR 0 28
56401: PUSH
56402: LD_INT 3
56404: NEG
56405: PUSH
56406: LD_INT 3
56408: NEG
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 3
56416: NEG
56417: PUSH
56418: LD_INT 4
56420: NEG
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 4
56428: NEG
56429: PUSH
56430: LD_INT 3
56432: NEG
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: LIST
56442: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
56443: LD_ADDR_VAR 0 29
56447: PUSH
56448: LD_INT 1
56450: NEG
56451: PUSH
56452: LD_INT 3
56454: NEG
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 0
56462: PUSH
56463: LD_INT 3
56465: NEG
56466: PUSH
56467: EMPTY
56468: LIST
56469: LIST
56470: PUSH
56471: LD_INT 1
56473: PUSH
56474: LD_INT 2
56476: NEG
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PUSH
56482: LD_INT 1
56484: NEG
56485: PUSH
56486: LD_INT 4
56488: NEG
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: LD_INT 0
56496: PUSH
56497: LD_INT 4
56499: NEG
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: PUSH
56505: LD_INT 1
56507: PUSH
56508: LD_INT 3
56510: NEG
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_INT 1
56518: NEG
56519: PUSH
56520: LD_INT 5
56522: NEG
56523: PUSH
56524: EMPTY
56525: LIST
56526: LIST
56527: PUSH
56528: LD_INT 0
56530: PUSH
56531: LD_INT 5
56533: NEG
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: LD_INT 1
56541: PUSH
56542: LD_INT 4
56544: NEG
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: LD_INT 1
56552: NEG
56553: PUSH
56554: LD_INT 6
56556: NEG
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: PUSH
56562: LD_INT 0
56564: PUSH
56565: LD_INT 6
56567: NEG
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PUSH
56573: LD_INT 1
56575: PUSH
56576: LD_INT 5
56578: NEG
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: LIST
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: LIST
56593: LIST
56594: LIST
56595: LIST
56596: LIST
56597: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
56598: LD_ADDR_VAR 0 30
56602: PUSH
56603: LD_INT 2
56605: PUSH
56606: LD_INT 1
56608: NEG
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: PUSH
56614: LD_INT 3
56616: PUSH
56617: LD_INT 0
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: LD_INT 3
56626: PUSH
56627: LD_INT 1
56629: PUSH
56630: EMPTY
56631: LIST
56632: LIST
56633: PUSH
56634: LD_INT 3
56636: PUSH
56637: LD_INT 1
56639: NEG
56640: PUSH
56641: EMPTY
56642: LIST
56643: LIST
56644: PUSH
56645: LD_INT 4
56647: PUSH
56648: LD_INT 0
56650: PUSH
56651: EMPTY
56652: LIST
56653: LIST
56654: PUSH
56655: LD_INT 4
56657: PUSH
56658: LD_INT 1
56660: PUSH
56661: EMPTY
56662: LIST
56663: LIST
56664: PUSH
56665: LD_INT 4
56667: PUSH
56668: LD_INT 1
56670: NEG
56671: PUSH
56672: EMPTY
56673: LIST
56674: LIST
56675: PUSH
56676: LD_INT 5
56678: PUSH
56679: LD_INT 0
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: PUSH
56686: LD_INT 5
56688: PUSH
56689: LD_INT 1
56691: PUSH
56692: EMPTY
56693: LIST
56694: LIST
56695: PUSH
56696: LD_INT 5
56698: PUSH
56699: LD_INT 1
56701: NEG
56702: PUSH
56703: EMPTY
56704: LIST
56705: LIST
56706: PUSH
56707: LD_INT 6
56709: PUSH
56710: LD_INT 0
56712: PUSH
56713: EMPTY
56714: LIST
56715: LIST
56716: PUSH
56717: LD_INT 6
56719: PUSH
56720: LD_INT 1
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
56741: LD_ADDR_VAR 0 31
56745: PUSH
56746: LD_INT 3
56748: PUSH
56749: LD_INT 2
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: PUSH
56756: LD_INT 3
56758: PUSH
56759: LD_INT 3
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: LD_INT 2
56768: PUSH
56769: LD_INT 3
56771: PUSH
56772: EMPTY
56773: LIST
56774: LIST
56775: PUSH
56776: LD_INT 4
56778: PUSH
56779: LD_INT 3
56781: PUSH
56782: EMPTY
56783: LIST
56784: LIST
56785: PUSH
56786: LD_INT 4
56788: PUSH
56789: LD_INT 4
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: LD_INT 3
56798: PUSH
56799: LD_INT 4
56801: PUSH
56802: EMPTY
56803: LIST
56804: LIST
56805: PUSH
56806: LD_INT 5
56808: PUSH
56809: LD_INT 4
56811: PUSH
56812: EMPTY
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 5
56818: PUSH
56819: LD_INT 5
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 4
56828: PUSH
56829: LD_INT 5
56831: PUSH
56832: EMPTY
56833: LIST
56834: LIST
56835: PUSH
56836: LD_INT 6
56838: PUSH
56839: LD_INT 5
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 6
56848: PUSH
56849: LD_INT 6
56851: PUSH
56852: EMPTY
56853: LIST
56854: LIST
56855: PUSH
56856: LD_INT 5
56858: PUSH
56859: LD_INT 6
56861: PUSH
56862: EMPTY
56863: LIST
56864: LIST
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: LIST
56873: LIST
56874: LIST
56875: LIST
56876: LIST
56877: LIST
56878: LIST
56879: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
56880: LD_ADDR_VAR 0 32
56884: PUSH
56885: LD_INT 1
56887: PUSH
56888: LD_INT 3
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 0
56897: PUSH
56898: LD_INT 3
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 1
56907: NEG
56908: PUSH
56909: LD_INT 2
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 1
56918: PUSH
56919: LD_INT 4
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 0
56928: PUSH
56929: LD_INT 4
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 1
56938: NEG
56939: PUSH
56940: LD_INT 3
56942: PUSH
56943: EMPTY
56944: LIST
56945: LIST
56946: PUSH
56947: LD_INT 1
56949: PUSH
56950: LD_INT 5
56952: PUSH
56953: EMPTY
56954: LIST
56955: LIST
56956: PUSH
56957: LD_INT 0
56959: PUSH
56960: LD_INT 5
56962: PUSH
56963: EMPTY
56964: LIST
56965: LIST
56966: PUSH
56967: LD_INT 1
56969: NEG
56970: PUSH
56971: LD_INT 4
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 1
56980: PUSH
56981: LD_INT 6
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 0
56990: PUSH
56991: LD_INT 6
56993: PUSH
56994: EMPTY
56995: LIST
56996: LIST
56997: PUSH
56998: LD_INT 1
57000: NEG
57001: PUSH
57002: LD_INT 5
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: PUSH
57009: EMPTY
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: LIST
57018: LIST
57019: LIST
57020: LIST
57021: LIST
57022: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
57023: LD_ADDR_VAR 0 33
57027: PUSH
57028: LD_INT 2
57030: NEG
57031: PUSH
57032: LD_INT 1
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: PUSH
57039: LD_INT 3
57041: NEG
57042: PUSH
57043: LD_INT 0
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: PUSH
57050: LD_INT 3
57052: NEG
57053: PUSH
57054: LD_INT 1
57056: NEG
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: PUSH
57062: LD_INT 3
57064: NEG
57065: PUSH
57066: LD_INT 1
57068: PUSH
57069: EMPTY
57070: LIST
57071: LIST
57072: PUSH
57073: LD_INT 4
57075: NEG
57076: PUSH
57077: LD_INT 0
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: PUSH
57084: LD_INT 4
57086: NEG
57087: PUSH
57088: LD_INT 1
57090: NEG
57091: PUSH
57092: EMPTY
57093: LIST
57094: LIST
57095: PUSH
57096: LD_INT 4
57098: NEG
57099: PUSH
57100: LD_INT 1
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: PUSH
57107: LD_INT 5
57109: NEG
57110: PUSH
57111: LD_INT 0
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: PUSH
57118: LD_INT 5
57120: NEG
57121: PUSH
57122: LD_INT 1
57124: NEG
57125: PUSH
57126: EMPTY
57127: LIST
57128: LIST
57129: PUSH
57130: LD_INT 5
57132: NEG
57133: PUSH
57134: LD_INT 1
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: LD_INT 6
57143: NEG
57144: PUSH
57145: LD_INT 0
57147: PUSH
57148: EMPTY
57149: LIST
57150: LIST
57151: PUSH
57152: LD_INT 6
57154: NEG
57155: PUSH
57156: LD_INT 1
57158: NEG
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: LIST
57168: LIST
57169: LIST
57170: LIST
57171: LIST
57172: LIST
57173: LIST
57174: LIST
57175: LIST
57176: LIST
57177: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
57178: LD_ADDR_VAR 0 34
57182: PUSH
57183: LD_INT 2
57185: NEG
57186: PUSH
57187: LD_INT 3
57189: NEG
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 3
57197: NEG
57198: PUSH
57199: LD_INT 2
57201: NEG
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 3
57209: NEG
57210: PUSH
57211: LD_INT 3
57213: NEG
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: PUSH
57219: LD_INT 3
57221: NEG
57222: PUSH
57223: LD_INT 4
57225: NEG
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: PUSH
57231: LD_INT 4
57233: NEG
57234: PUSH
57235: LD_INT 3
57237: NEG
57238: PUSH
57239: EMPTY
57240: LIST
57241: LIST
57242: PUSH
57243: LD_INT 4
57245: NEG
57246: PUSH
57247: LD_INT 4
57249: NEG
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 4
57257: NEG
57258: PUSH
57259: LD_INT 5
57261: NEG
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 5
57269: NEG
57270: PUSH
57271: LD_INT 4
57273: NEG
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: LD_INT 5
57281: NEG
57282: PUSH
57283: LD_INT 5
57285: NEG
57286: PUSH
57287: EMPTY
57288: LIST
57289: LIST
57290: PUSH
57291: LD_INT 5
57293: NEG
57294: PUSH
57295: LD_INT 6
57297: NEG
57298: PUSH
57299: EMPTY
57300: LIST
57301: LIST
57302: PUSH
57303: LD_INT 6
57305: NEG
57306: PUSH
57307: LD_INT 5
57309: NEG
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: LD_INT 6
57317: NEG
57318: PUSH
57319: LD_INT 6
57321: NEG
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
57341: LD_ADDR_VAR 0 41
57345: PUSH
57346: LD_INT 0
57348: PUSH
57349: LD_INT 2
57351: NEG
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_INT 1
57359: NEG
57360: PUSH
57361: LD_INT 3
57363: NEG
57364: PUSH
57365: EMPTY
57366: LIST
57367: LIST
57368: PUSH
57369: LD_INT 1
57371: PUSH
57372: LD_INT 2
57374: NEG
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: EMPTY
57381: LIST
57382: LIST
57383: LIST
57384: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
57385: LD_ADDR_VAR 0 42
57389: PUSH
57390: LD_INT 2
57392: PUSH
57393: LD_INT 0
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 2
57402: PUSH
57403: LD_INT 1
57405: NEG
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 3
57413: PUSH
57414: LD_INT 1
57416: PUSH
57417: EMPTY
57418: LIST
57419: LIST
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: LIST
57425: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
57426: LD_ADDR_VAR 0 43
57430: PUSH
57431: LD_INT 2
57433: PUSH
57434: LD_INT 2
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: LD_INT 3
57443: PUSH
57444: LD_INT 2
57446: PUSH
57447: EMPTY
57448: LIST
57449: LIST
57450: PUSH
57451: LD_INT 2
57453: PUSH
57454: LD_INT 3
57456: PUSH
57457: EMPTY
57458: LIST
57459: LIST
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: LIST
57465: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
57466: LD_ADDR_VAR 0 44
57470: PUSH
57471: LD_INT 0
57473: PUSH
57474: LD_INT 2
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: PUSH
57481: LD_INT 1
57483: PUSH
57484: LD_INT 3
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: LD_INT 1
57493: NEG
57494: PUSH
57495: LD_INT 2
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: PUSH
57502: EMPTY
57503: LIST
57504: LIST
57505: LIST
57506: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
57507: LD_ADDR_VAR 0 45
57511: PUSH
57512: LD_INT 2
57514: NEG
57515: PUSH
57516: LD_INT 0
57518: PUSH
57519: EMPTY
57520: LIST
57521: LIST
57522: PUSH
57523: LD_INT 2
57525: NEG
57526: PUSH
57527: LD_INT 1
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: LD_INT 3
57536: NEG
57537: PUSH
57538: LD_INT 1
57540: NEG
57541: PUSH
57542: EMPTY
57543: LIST
57544: LIST
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: LIST
57550: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
57551: LD_ADDR_VAR 0 46
57555: PUSH
57556: LD_INT 2
57558: NEG
57559: PUSH
57560: LD_INT 2
57562: NEG
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: PUSH
57568: LD_INT 2
57570: NEG
57571: PUSH
57572: LD_INT 3
57574: NEG
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: LD_INT 3
57582: NEG
57583: PUSH
57584: LD_INT 2
57586: NEG
57587: PUSH
57588: EMPTY
57589: LIST
57590: LIST
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: LIST
57596: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
57597: LD_ADDR_VAR 0 47
57601: PUSH
57602: LD_INT 2
57604: NEG
57605: PUSH
57606: LD_INT 3
57608: NEG
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 1
57616: NEG
57617: PUSH
57618: LD_INT 3
57620: NEG
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: EMPTY
57627: LIST
57628: LIST
57629: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
57630: LD_ADDR_VAR 0 48
57634: PUSH
57635: LD_INT 1
57637: PUSH
57638: LD_INT 2
57640: NEG
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: LD_INT 2
57648: PUSH
57649: LD_INT 1
57651: NEG
57652: PUSH
57653: EMPTY
57654: LIST
57655: LIST
57656: PUSH
57657: EMPTY
57658: LIST
57659: LIST
57660: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
57661: LD_ADDR_VAR 0 49
57665: PUSH
57666: LD_INT 3
57668: PUSH
57669: LD_INT 1
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 3
57678: PUSH
57679: LD_INT 2
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
57690: LD_ADDR_VAR 0 50
57694: PUSH
57695: LD_INT 2
57697: PUSH
57698: LD_INT 3
57700: PUSH
57701: EMPTY
57702: LIST
57703: LIST
57704: PUSH
57705: LD_INT 1
57707: PUSH
57708: LD_INT 3
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
57719: LD_ADDR_VAR 0 51
57723: PUSH
57724: LD_INT 1
57726: NEG
57727: PUSH
57728: LD_INT 2
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PUSH
57735: LD_INT 2
57737: NEG
57738: PUSH
57739: LD_INT 1
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: EMPTY
57747: LIST
57748: LIST
57749: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
57750: LD_ADDR_VAR 0 52
57754: PUSH
57755: LD_INT 3
57757: NEG
57758: PUSH
57759: LD_INT 1
57761: NEG
57762: PUSH
57763: EMPTY
57764: LIST
57765: LIST
57766: PUSH
57767: LD_INT 3
57769: NEG
57770: PUSH
57771: LD_INT 2
57773: NEG
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57783: LD_ADDR_VAR 0 53
57787: PUSH
57788: LD_INT 1
57790: NEG
57791: PUSH
57792: LD_INT 3
57794: NEG
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: LD_INT 0
57802: PUSH
57803: LD_INT 3
57805: NEG
57806: PUSH
57807: EMPTY
57808: LIST
57809: LIST
57810: PUSH
57811: LD_INT 1
57813: PUSH
57814: LD_INT 2
57816: NEG
57817: PUSH
57818: EMPTY
57819: LIST
57820: LIST
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: LIST
57826: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57827: LD_ADDR_VAR 0 54
57831: PUSH
57832: LD_INT 2
57834: PUSH
57835: LD_INT 1
57837: NEG
57838: PUSH
57839: EMPTY
57840: LIST
57841: LIST
57842: PUSH
57843: LD_INT 3
57845: PUSH
57846: LD_INT 0
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: PUSH
57853: LD_INT 3
57855: PUSH
57856: LD_INT 1
57858: PUSH
57859: EMPTY
57860: LIST
57861: LIST
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: LIST
57867: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57868: LD_ADDR_VAR 0 55
57872: PUSH
57873: LD_INT 3
57875: PUSH
57876: LD_INT 2
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: PUSH
57883: LD_INT 3
57885: PUSH
57886: LD_INT 3
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PUSH
57893: LD_INT 2
57895: PUSH
57896: LD_INT 3
57898: PUSH
57899: EMPTY
57900: LIST
57901: LIST
57902: PUSH
57903: EMPTY
57904: LIST
57905: LIST
57906: LIST
57907: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57908: LD_ADDR_VAR 0 56
57912: PUSH
57913: LD_INT 1
57915: PUSH
57916: LD_INT 3
57918: PUSH
57919: EMPTY
57920: LIST
57921: LIST
57922: PUSH
57923: LD_INT 0
57925: PUSH
57926: LD_INT 3
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PUSH
57933: LD_INT 1
57935: NEG
57936: PUSH
57937: LD_INT 2
57939: PUSH
57940: EMPTY
57941: LIST
57942: LIST
57943: PUSH
57944: EMPTY
57945: LIST
57946: LIST
57947: LIST
57948: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57949: LD_ADDR_VAR 0 57
57953: PUSH
57954: LD_INT 2
57956: NEG
57957: PUSH
57958: LD_INT 1
57960: PUSH
57961: EMPTY
57962: LIST
57963: LIST
57964: PUSH
57965: LD_INT 3
57967: NEG
57968: PUSH
57969: LD_INT 0
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: PUSH
57976: LD_INT 3
57978: NEG
57979: PUSH
57980: LD_INT 1
57982: NEG
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: LIST
57992: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57993: LD_ADDR_VAR 0 58
57997: PUSH
57998: LD_INT 2
58000: NEG
58001: PUSH
58002: LD_INT 3
58004: NEG
58005: PUSH
58006: EMPTY
58007: LIST
58008: LIST
58009: PUSH
58010: LD_INT 3
58012: NEG
58013: PUSH
58014: LD_INT 2
58016: NEG
58017: PUSH
58018: EMPTY
58019: LIST
58020: LIST
58021: PUSH
58022: LD_INT 3
58024: NEG
58025: PUSH
58026: LD_INT 3
58028: NEG
58029: PUSH
58030: EMPTY
58031: LIST
58032: LIST
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: LIST
58038: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
58039: LD_ADDR_VAR 0 59
58043: PUSH
58044: LD_INT 1
58046: NEG
58047: PUSH
58048: LD_INT 2
58050: NEG
58051: PUSH
58052: EMPTY
58053: LIST
58054: LIST
58055: PUSH
58056: LD_INT 0
58058: PUSH
58059: LD_INT 2
58061: NEG
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: PUSH
58067: LD_INT 1
58069: PUSH
58070: LD_INT 1
58072: NEG
58073: PUSH
58074: EMPTY
58075: LIST
58076: LIST
58077: PUSH
58078: EMPTY
58079: LIST
58080: LIST
58081: LIST
58082: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58083: LD_ADDR_VAR 0 60
58087: PUSH
58088: LD_INT 1
58090: PUSH
58091: LD_INT 1
58093: NEG
58094: PUSH
58095: EMPTY
58096: LIST
58097: LIST
58098: PUSH
58099: LD_INT 2
58101: PUSH
58102: LD_INT 0
58104: PUSH
58105: EMPTY
58106: LIST
58107: LIST
58108: PUSH
58109: LD_INT 2
58111: PUSH
58112: LD_INT 1
58114: PUSH
58115: EMPTY
58116: LIST
58117: LIST
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: LIST
58123: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58124: LD_ADDR_VAR 0 61
58128: PUSH
58129: LD_INT 2
58131: PUSH
58132: LD_INT 1
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 2
58141: PUSH
58142: LD_INT 2
58144: PUSH
58145: EMPTY
58146: LIST
58147: LIST
58148: PUSH
58149: LD_INT 1
58151: PUSH
58152: LD_INT 2
58154: PUSH
58155: EMPTY
58156: LIST
58157: LIST
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: LIST
58163: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58164: LD_ADDR_VAR 0 62
58168: PUSH
58169: LD_INT 1
58171: PUSH
58172: LD_INT 2
58174: PUSH
58175: EMPTY
58176: LIST
58177: LIST
58178: PUSH
58179: LD_INT 0
58181: PUSH
58182: LD_INT 2
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 1
58191: NEG
58192: PUSH
58193: LD_INT 1
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: EMPTY
58201: LIST
58202: LIST
58203: LIST
58204: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58205: LD_ADDR_VAR 0 63
58209: PUSH
58210: LD_INT 1
58212: NEG
58213: PUSH
58214: LD_INT 1
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: LD_INT 2
58223: NEG
58224: PUSH
58225: LD_INT 0
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 2
58234: NEG
58235: PUSH
58236: LD_INT 1
58238: NEG
58239: PUSH
58240: EMPTY
58241: LIST
58242: LIST
58243: PUSH
58244: EMPTY
58245: LIST
58246: LIST
58247: LIST
58248: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58249: LD_ADDR_VAR 0 64
58253: PUSH
58254: LD_INT 1
58256: NEG
58257: PUSH
58258: LD_INT 2
58260: NEG
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: PUSH
58266: LD_INT 2
58268: NEG
58269: PUSH
58270: LD_INT 1
58272: NEG
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: PUSH
58278: LD_INT 2
58280: NEG
58281: PUSH
58282: LD_INT 2
58284: NEG
58285: PUSH
58286: EMPTY
58287: LIST
58288: LIST
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: LIST
58294: ST_TO_ADDR
// end ; 2 :
58295: GO 61561
58297: LD_INT 2
58299: DOUBLE
58300: EQUAL
58301: IFTRUE 58305
58303: GO 61560
58305: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
58306: LD_ADDR_VAR 0 29
58310: PUSH
58311: LD_INT 4
58313: PUSH
58314: LD_INT 0
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: PUSH
58321: LD_INT 4
58323: PUSH
58324: LD_INT 1
58326: NEG
58327: PUSH
58328: EMPTY
58329: LIST
58330: LIST
58331: PUSH
58332: LD_INT 5
58334: PUSH
58335: LD_INT 0
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 5
58344: PUSH
58345: LD_INT 1
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: PUSH
58352: LD_INT 4
58354: PUSH
58355: LD_INT 1
58357: PUSH
58358: EMPTY
58359: LIST
58360: LIST
58361: PUSH
58362: LD_INT 3
58364: PUSH
58365: LD_INT 0
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 3
58374: PUSH
58375: LD_INT 1
58377: NEG
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: PUSH
58383: LD_INT 3
58385: PUSH
58386: LD_INT 2
58388: NEG
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 5
58396: PUSH
58397: LD_INT 2
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: LD_INT 3
58406: PUSH
58407: LD_INT 3
58409: PUSH
58410: EMPTY
58411: LIST
58412: LIST
58413: PUSH
58414: LD_INT 3
58416: PUSH
58417: LD_INT 2
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: PUSH
58424: LD_INT 4
58426: PUSH
58427: LD_INT 3
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 4
58436: PUSH
58437: LD_INT 4
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_INT 3
58446: PUSH
58447: LD_INT 4
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: LD_INT 2
58456: PUSH
58457: LD_INT 3
58459: PUSH
58460: EMPTY
58461: LIST
58462: LIST
58463: PUSH
58464: LD_INT 2
58466: PUSH
58467: LD_INT 2
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: PUSH
58474: LD_INT 4
58476: PUSH
58477: LD_INT 2
58479: PUSH
58480: EMPTY
58481: LIST
58482: LIST
58483: PUSH
58484: LD_INT 2
58486: PUSH
58487: LD_INT 4
58489: PUSH
58490: EMPTY
58491: LIST
58492: LIST
58493: PUSH
58494: LD_INT 0
58496: PUSH
58497: LD_INT 4
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: PUSH
58504: LD_INT 0
58506: PUSH
58507: LD_INT 3
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: LD_INT 1
58516: PUSH
58517: LD_INT 4
58519: PUSH
58520: EMPTY
58521: LIST
58522: LIST
58523: PUSH
58524: LD_INT 1
58526: PUSH
58527: LD_INT 5
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: LD_INT 0
58536: PUSH
58537: LD_INT 5
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: LD_INT 1
58546: NEG
58547: PUSH
58548: LD_INT 4
58550: PUSH
58551: EMPTY
58552: LIST
58553: LIST
58554: PUSH
58555: LD_INT 1
58557: NEG
58558: PUSH
58559: LD_INT 3
58561: PUSH
58562: EMPTY
58563: LIST
58564: LIST
58565: PUSH
58566: LD_INT 2
58568: PUSH
58569: LD_INT 5
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 2
58578: NEG
58579: PUSH
58580: LD_INT 3
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: PUSH
58587: LD_INT 3
58589: NEG
58590: PUSH
58591: LD_INT 0
58593: PUSH
58594: EMPTY
58595: LIST
58596: LIST
58597: PUSH
58598: LD_INT 3
58600: NEG
58601: PUSH
58602: LD_INT 1
58604: NEG
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: PUSH
58610: LD_INT 2
58612: NEG
58613: PUSH
58614: LD_INT 0
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: LD_INT 2
58623: NEG
58624: PUSH
58625: LD_INT 1
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: LD_INT 3
58634: NEG
58635: PUSH
58636: LD_INT 1
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: PUSH
58643: LD_INT 4
58645: NEG
58646: PUSH
58647: LD_INT 0
58649: PUSH
58650: EMPTY
58651: LIST
58652: LIST
58653: PUSH
58654: LD_INT 4
58656: NEG
58657: PUSH
58658: LD_INT 1
58660: NEG
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: PUSH
58666: LD_INT 4
58668: NEG
58669: PUSH
58670: LD_INT 2
58672: NEG
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: PUSH
58678: LD_INT 2
58680: NEG
58681: PUSH
58682: LD_INT 2
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: PUSH
58689: LD_INT 4
58691: NEG
58692: PUSH
58693: LD_INT 4
58695: NEG
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: PUSH
58701: LD_INT 4
58703: NEG
58704: PUSH
58705: LD_INT 5
58707: NEG
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: LD_INT 3
58715: NEG
58716: PUSH
58717: LD_INT 4
58719: NEG
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: LD_INT 3
58727: NEG
58728: PUSH
58729: LD_INT 3
58731: NEG
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: PUSH
58737: LD_INT 4
58739: NEG
58740: PUSH
58741: LD_INT 3
58743: NEG
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: PUSH
58749: LD_INT 5
58751: NEG
58752: PUSH
58753: LD_INT 4
58755: NEG
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 5
58763: NEG
58764: PUSH
58765: LD_INT 5
58767: NEG
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_INT 3
58775: NEG
58776: PUSH
58777: LD_INT 5
58779: NEG
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: PUSH
58785: LD_INT 5
58787: NEG
58788: PUSH
58789: LD_INT 3
58791: NEG
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: PUSH
58797: EMPTY
58798: LIST
58799: LIST
58800: LIST
58801: LIST
58802: LIST
58803: LIST
58804: LIST
58805: LIST
58806: LIST
58807: LIST
58808: LIST
58809: LIST
58810: LIST
58811: LIST
58812: LIST
58813: LIST
58814: LIST
58815: LIST
58816: LIST
58817: LIST
58818: LIST
58819: LIST
58820: LIST
58821: LIST
58822: LIST
58823: LIST
58824: LIST
58825: LIST
58826: LIST
58827: LIST
58828: LIST
58829: LIST
58830: LIST
58831: LIST
58832: LIST
58833: LIST
58834: LIST
58835: LIST
58836: LIST
58837: LIST
58838: LIST
58839: LIST
58840: LIST
58841: LIST
58842: LIST
58843: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
58844: LD_ADDR_VAR 0 30
58848: PUSH
58849: LD_INT 4
58851: PUSH
58852: LD_INT 4
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: LD_INT 4
58861: PUSH
58862: LD_INT 3
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: LD_INT 5
58871: PUSH
58872: LD_INT 4
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 5
58881: PUSH
58882: LD_INT 5
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 4
58891: PUSH
58892: LD_INT 5
58894: PUSH
58895: EMPTY
58896: LIST
58897: LIST
58898: PUSH
58899: LD_INT 3
58901: PUSH
58902: LD_INT 4
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: PUSH
58909: LD_INT 3
58911: PUSH
58912: LD_INT 3
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: PUSH
58919: LD_INT 5
58921: PUSH
58922: LD_INT 3
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: PUSH
58929: LD_INT 3
58931: PUSH
58932: LD_INT 5
58934: PUSH
58935: EMPTY
58936: LIST
58937: LIST
58938: PUSH
58939: LD_INT 0
58941: PUSH
58942: LD_INT 3
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 0
58951: PUSH
58952: LD_INT 2
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 1
58961: PUSH
58962: LD_INT 3
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 1
58971: PUSH
58972: LD_INT 4
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: LD_INT 0
58981: PUSH
58982: LD_INT 4
58984: PUSH
58985: EMPTY
58986: LIST
58987: LIST
58988: PUSH
58989: LD_INT 1
58991: NEG
58992: PUSH
58993: LD_INT 3
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: LD_INT 1
59002: NEG
59003: PUSH
59004: LD_INT 2
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: PUSH
59011: LD_INT 2
59013: PUSH
59014: LD_INT 4
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: PUSH
59021: LD_INT 2
59023: NEG
59024: PUSH
59025: LD_INT 2
59027: PUSH
59028: EMPTY
59029: LIST
59030: LIST
59031: PUSH
59032: LD_INT 4
59034: NEG
59035: PUSH
59036: LD_INT 0
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: LD_INT 4
59045: NEG
59046: PUSH
59047: LD_INT 1
59049: NEG
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: PUSH
59055: LD_INT 3
59057: NEG
59058: PUSH
59059: LD_INT 0
59061: PUSH
59062: EMPTY
59063: LIST
59064: LIST
59065: PUSH
59066: LD_INT 3
59068: NEG
59069: PUSH
59070: LD_INT 1
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: LD_INT 4
59079: NEG
59080: PUSH
59081: LD_INT 1
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PUSH
59088: LD_INT 5
59090: NEG
59091: PUSH
59092: LD_INT 0
59094: PUSH
59095: EMPTY
59096: LIST
59097: LIST
59098: PUSH
59099: LD_INT 5
59101: NEG
59102: PUSH
59103: LD_INT 1
59105: NEG
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PUSH
59111: LD_INT 5
59113: NEG
59114: PUSH
59115: LD_INT 2
59117: NEG
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 3
59125: NEG
59126: PUSH
59127: LD_INT 2
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 3
59136: NEG
59137: PUSH
59138: LD_INT 3
59140: NEG
59141: PUSH
59142: EMPTY
59143: LIST
59144: LIST
59145: PUSH
59146: LD_INT 3
59148: NEG
59149: PUSH
59150: LD_INT 4
59152: NEG
59153: PUSH
59154: EMPTY
59155: LIST
59156: LIST
59157: PUSH
59158: LD_INT 2
59160: NEG
59161: PUSH
59162: LD_INT 3
59164: NEG
59165: PUSH
59166: EMPTY
59167: LIST
59168: LIST
59169: PUSH
59170: LD_INT 2
59172: NEG
59173: PUSH
59174: LD_INT 2
59176: NEG
59177: PUSH
59178: EMPTY
59179: LIST
59180: LIST
59181: PUSH
59182: LD_INT 3
59184: NEG
59185: PUSH
59186: LD_INT 2
59188: NEG
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: PUSH
59194: LD_INT 4
59196: NEG
59197: PUSH
59198: LD_INT 3
59200: NEG
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: PUSH
59206: LD_INT 4
59208: NEG
59209: PUSH
59210: LD_INT 4
59212: NEG
59213: PUSH
59214: EMPTY
59215: LIST
59216: LIST
59217: PUSH
59218: LD_INT 2
59220: NEG
59221: PUSH
59222: LD_INT 4
59224: NEG
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 4
59232: NEG
59233: PUSH
59234: LD_INT 2
59236: NEG
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: PUSH
59242: LD_INT 0
59244: PUSH
59245: LD_INT 4
59247: NEG
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: PUSH
59253: LD_INT 0
59255: PUSH
59256: LD_INT 5
59258: NEG
59259: PUSH
59260: EMPTY
59261: LIST
59262: LIST
59263: PUSH
59264: LD_INT 1
59266: PUSH
59267: LD_INT 4
59269: NEG
59270: PUSH
59271: EMPTY
59272: LIST
59273: LIST
59274: PUSH
59275: LD_INT 1
59277: PUSH
59278: LD_INT 3
59280: NEG
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: LD_INT 0
59288: PUSH
59289: LD_INT 3
59291: NEG
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: PUSH
59297: LD_INT 1
59299: NEG
59300: PUSH
59301: LD_INT 4
59303: NEG
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: LD_INT 1
59311: NEG
59312: PUSH
59313: LD_INT 5
59315: NEG
59316: PUSH
59317: EMPTY
59318: LIST
59319: LIST
59320: PUSH
59321: LD_INT 2
59323: PUSH
59324: LD_INT 3
59326: NEG
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 2
59334: NEG
59335: PUSH
59336: LD_INT 5
59338: NEG
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: PUSH
59344: EMPTY
59345: LIST
59346: LIST
59347: LIST
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: LIST
59353: LIST
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: LIST
59359: LIST
59360: LIST
59361: LIST
59362: LIST
59363: LIST
59364: LIST
59365: LIST
59366: LIST
59367: LIST
59368: LIST
59369: LIST
59370: LIST
59371: LIST
59372: LIST
59373: LIST
59374: LIST
59375: LIST
59376: LIST
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
59391: LD_ADDR_VAR 0 31
59395: PUSH
59396: LD_INT 0
59398: PUSH
59399: LD_INT 4
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: PUSH
59406: LD_INT 0
59408: PUSH
59409: LD_INT 3
59411: PUSH
59412: EMPTY
59413: LIST
59414: LIST
59415: PUSH
59416: LD_INT 1
59418: PUSH
59419: LD_INT 4
59421: PUSH
59422: EMPTY
59423: LIST
59424: LIST
59425: PUSH
59426: LD_INT 1
59428: PUSH
59429: LD_INT 5
59431: PUSH
59432: EMPTY
59433: LIST
59434: LIST
59435: PUSH
59436: LD_INT 0
59438: PUSH
59439: LD_INT 5
59441: PUSH
59442: EMPTY
59443: LIST
59444: LIST
59445: PUSH
59446: LD_INT 1
59448: NEG
59449: PUSH
59450: LD_INT 4
59452: PUSH
59453: EMPTY
59454: LIST
59455: LIST
59456: PUSH
59457: LD_INT 1
59459: NEG
59460: PUSH
59461: LD_INT 3
59463: PUSH
59464: EMPTY
59465: LIST
59466: LIST
59467: PUSH
59468: LD_INT 2
59470: PUSH
59471: LD_INT 5
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: PUSH
59478: LD_INT 2
59480: NEG
59481: PUSH
59482: LD_INT 3
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: PUSH
59489: LD_INT 3
59491: NEG
59492: PUSH
59493: LD_INT 0
59495: PUSH
59496: EMPTY
59497: LIST
59498: LIST
59499: PUSH
59500: LD_INT 3
59502: NEG
59503: PUSH
59504: LD_INT 1
59506: NEG
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: PUSH
59512: LD_INT 2
59514: NEG
59515: PUSH
59516: LD_INT 0
59518: PUSH
59519: EMPTY
59520: LIST
59521: LIST
59522: PUSH
59523: LD_INT 2
59525: NEG
59526: PUSH
59527: LD_INT 1
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: PUSH
59534: LD_INT 3
59536: NEG
59537: PUSH
59538: LD_INT 1
59540: PUSH
59541: EMPTY
59542: LIST
59543: LIST
59544: PUSH
59545: LD_INT 4
59547: NEG
59548: PUSH
59549: LD_INT 0
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: LD_INT 4
59558: NEG
59559: PUSH
59560: LD_INT 1
59562: NEG
59563: PUSH
59564: EMPTY
59565: LIST
59566: LIST
59567: PUSH
59568: LD_INT 4
59570: NEG
59571: PUSH
59572: LD_INT 2
59574: NEG
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: PUSH
59580: LD_INT 2
59582: NEG
59583: PUSH
59584: LD_INT 2
59586: PUSH
59587: EMPTY
59588: LIST
59589: LIST
59590: PUSH
59591: LD_INT 4
59593: NEG
59594: PUSH
59595: LD_INT 4
59597: NEG
59598: PUSH
59599: EMPTY
59600: LIST
59601: LIST
59602: PUSH
59603: LD_INT 4
59605: NEG
59606: PUSH
59607: LD_INT 5
59609: NEG
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: PUSH
59615: LD_INT 3
59617: NEG
59618: PUSH
59619: LD_INT 4
59621: NEG
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: LD_INT 3
59629: NEG
59630: PUSH
59631: LD_INT 3
59633: NEG
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: PUSH
59639: LD_INT 4
59641: NEG
59642: PUSH
59643: LD_INT 3
59645: NEG
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: PUSH
59651: LD_INT 5
59653: NEG
59654: PUSH
59655: LD_INT 4
59657: NEG
59658: PUSH
59659: EMPTY
59660: LIST
59661: LIST
59662: PUSH
59663: LD_INT 5
59665: NEG
59666: PUSH
59667: LD_INT 5
59669: NEG
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: LD_INT 3
59677: NEG
59678: PUSH
59679: LD_INT 5
59681: NEG
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: PUSH
59687: LD_INT 5
59689: NEG
59690: PUSH
59691: LD_INT 3
59693: NEG
59694: PUSH
59695: EMPTY
59696: LIST
59697: LIST
59698: PUSH
59699: LD_INT 0
59701: PUSH
59702: LD_INT 3
59704: NEG
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: PUSH
59710: LD_INT 0
59712: PUSH
59713: LD_INT 4
59715: NEG
59716: PUSH
59717: EMPTY
59718: LIST
59719: LIST
59720: PUSH
59721: LD_INT 1
59723: PUSH
59724: LD_INT 3
59726: NEG
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: LD_INT 1
59734: PUSH
59735: LD_INT 2
59737: NEG
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: PUSH
59743: LD_INT 0
59745: PUSH
59746: LD_INT 2
59748: NEG
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: PUSH
59754: LD_INT 1
59756: NEG
59757: PUSH
59758: LD_INT 3
59760: NEG
59761: PUSH
59762: EMPTY
59763: LIST
59764: LIST
59765: PUSH
59766: LD_INT 1
59768: NEG
59769: PUSH
59770: LD_INT 4
59772: NEG
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: PUSH
59778: LD_INT 2
59780: PUSH
59781: LD_INT 2
59783: NEG
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: PUSH
59789: LD_INT 2
59791: NEG
59792: PUSH
59793: LD_INT 4
59795: NEG
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: PUSH
59801: LD_INT 4
59803: PUSH
59804: LD_INT 0
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: PUSH
59811: LD_INT 4
59813: PUSH
59814: LD_INT 1
59816: NEG
59817: PUSH
59818: EMPTY
59819: LIST
59820: LIST
59821: PUSH
59822: LD_INT 5
59824: PUSH
59825: LD_INT 0
59827: PUSH
59828: EMPTY
59829: LIST
59830: LIST
59831: PUSH
59832: LD_INT 5
59834: PUSH
59835: LD_INT 1
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: PUSH
59842: LD_INT 4
59844: PUSH
59845: LD_INT 1
59847: PUSH
59848: EMPTY
59849: LIST
59850: LIST
59851: PUSH
59852: LD_INT 3
59854: PUSH
59855: LD_INT 0
59857: PUSH
59858: EMPTY
59859: LIST
59860: LIST
59861: PUSH
59862: LD_INT 3
59864: PUSH
59865: LD_INT 1
59867: NEG
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: PUSH
59873: LD_INT 3
59875: PUSH
59876: LD_INT 2
59878: NEG
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PUSH
59884: LD_INT 5
59886: PUSH
59887: LD_INT 2
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: LIST
59898: LIST
59899: LIST
59900: LIST
59901: LIST
59902: LIST
59903: LIST
59904: LIST
59905: LIST
59906: LIST
59907: LIST
59908: LIST
59909: LIST
59910: LIST
59911: LIST
59912: LIST
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: LIST
59922: LIST
59923: LIST
59924: LIST
59925: LIST
59926: LIST
59927: LIST
59928: LIST
59929: LIST
59930: LIST
59931: LIST
59932: LIST
59933: LIST
59934: LIST
59935: LIST
59936: LIST
59937: LIST
59938: LIST
59939: LIST
59940: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
59941: LD_ADDR_VAR 0 32
59945: PUSH
59946: LD_INT 4
59948: NEG
59949: PUSH
59950: LD_INT 0
59952: PUSH
59953: EMPTY
59954: LIST
59955: LIST
59956: PUSH
59957: LD_INT 4
59959: NEG
59960: PUSH
59961: LD_INT 1
59963: NEG
59964: PUSH
59965: EMPTY
59966: LIST
59967: LIST
59968: PUSH
59969: LD_INT 3
59971: NEG
59972: PUSH
59973: LD_INT 0
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: PUSH
59980: LD_INT 3
59982: NEG
59983: PUSH
59984: LD_INT 1
59986: PUSH
59987: EMPTY
59988: LIST
59989: LIST
59990: PUSH
59991: LD_INT 4
59993: NEG
59994: PUSH
59995: LD_INT 1
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: LD_INT 5
60004: NEG
60005: PUSH
60006: LD_INT 0
60008: PUSH
60009: EMPTY
60010: LIST
60011: LIST
60012: PUSH
60013: LD_INT 5
60015: NEG
60016: PUSH
60017: LD_INT 1
60019: NEG
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 5
60027: NEG
60028: PUSH
60029: LD_INT 2
60031: NEG
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: PUSH
60037: LD_INT 3
60039: NEG
60040: PUSH
60041: LD_INT 2
60043: PUSH
60044: EMPTY
60045: LIST
60046: LIST
60047: PUSH
60048: LD_INT 3
60050: NEG
60051: PUSH
60052: LD_INT 3
60054: NEG
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: PUSH
60060: LD_INT 3
60062: NEG
60063: PUSH
60064: LD_INT 4
60066: NEG
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: LD_INT 2
60074: NEG
60075: PUSH
60076: LD_INT 3
60078: NEG
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: LD_INT 2
60086: NEG
60087: PUSH
60088: LD_INT 2
60090: NEG
60091: PUSH
60092: EMPTY
60093: LIST
60094: LIST
60095: PUSH
60096: LD_INT 3
60098: NEG
60099: PUSH
60100: LD_INT 2
60102: NEG
60103: PUSH
60104: EMPTY
60105: LIST
60106: LIST
60107: PUSH
60108: LD_INT 4
60110: NEG
60111: PUSH
60112: LD_INT 3
60114: NEG
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 4
60122: NEG
60123: PUSH
60124: LD_INT 4
60126: NEG
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 2
60134: NEG
60135: PUSH
60136: LD_INT 4
60138: NEG
60139: PUSH
60140: EMPTY
60141: LIST
60142: LIST
60143: PUSH
60144: LD_INT 4
60146: NEG
60147: PUSH
60148: LD_INT 2
60150: NEG
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: LD_INT 0
60158: PUSH
60159: LD_INT 4
60161: NEG
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: PUSH
60167: LD_INT 0
60169: PUSH
60170: LD_INT 5
60172: NEG
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: LD_INT 1
60180: PUSH
60181: LD_INT 4
60183: NEG
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: LD_INT 1
60191: PUSH
60192: LD_INT 3
60194: NEG
60195: PUSH
60196: EMPTY
60197: LIST
60198: LIST
60199: PUSH
60200: LD_INT 0
60202: PUSH
60203: LD_INT 3
60205: NEG
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: LD_INT 1
60213: NEG
60214: PUSH
60215: LD_INT 4
60217: NEG
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: LD_INT 1
60225: NEG
60226: PUSH
60227: LD_INT 5
60229: NEG
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: PUSH
60235: LD_INT 2
60237: PUSH
60238: LD_INT 3
60240: NEG
60241: PUSH
60242: EMPTY
60243: LIST
60244: LIST
60245: PUSH
60246: LD_INT 2
60248: NEG
60249: PUSH
60250: LD_INT 5
60252: NEG
60253: PUSH
60254: EMPTY
60255: LIST
60256: LIST
60257: PUSH
60258: LD_INT 3
60260: PUSH
60261: LD_INT 0
60263: PUSH
60264: EMPTY
60265: LIST
60266: LIST
60267: PUSH
60268: LD_INT 3
60270: PUSH
60271: LD_INT 1
60273: NEG
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: PUSH
60279: LD_INT 4
60281: PUSH
60282: LD_INT 0
60284: PUSH
60285: EMPTY
60286: LIST
60287: LIST
60288: PUSH
60289: LD_INT 4
60291: PUSH
60292: LD_INT 1
60294: PUSH
60295: EMPTY
60296: LIST
60297: LIST
60298: PUSH
60299: LD_INT 3
60301: PUSH
60302: LD_INT 1
60304: PUSH
60305: EMPTY
60306: LIST
60307: LIST
60308: PUSH
60309: LD_INT 2
60311: PUSH
60312: LD_INT 0
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: PUSH
60319: LD_INT 2
60321: PUSH
60322: LD_INT 1
60324: NEG
60325: PUSH
60326: EMPTY
60327: LIST
60328: LIST
60329: PUSH
60330: LD_INT 2
60332: PUSH
60333: LD_INT 2
60335: NEG
60336: PUSH
60337: EMPTY
60338: LIST
60339: LIST
60340: PUSH
60341: LD_INT 4
60343: PUSH
60344: LD_INT 2
60346: PUSH
60347: EMPTY
60348: LIST
60349: LIST
60350: PUSH
60351: LD_INT 4
60353: PUSH
60354: LD_INT 4
60356: PUSH
60357: EMPTY
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 4
60363: PUSH
60364: LD_INT 3
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: PUSH
60371: LD_INT 5
60373: PUSH
60374: LD_INT 4
60376: PUSH
60377: EMPTY
60378: LIST
60379: LIST
60380: PUSH
60381: LD_INT 5
60383: PUSH
60384: LD_INT 5
60386: PUSH
60387: EMPTY
60388: LIST
60389: LIST
60390: PUSH
60391: LD_INT 4
60393: PUSH
60394: LD_INT 5
60396: PUSH
60397: EMPTY
60398: LIST
60399: LIST
60400: PUSH
60401: LD_INT 3
60403: PUSH
60404: LD_INT 4
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: PUSH
60411: LD_INT 3
60413: PUSH
60414: LD_INT 3
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: PUSH
60421: LD_INT 5
60423: PUSH
60424: LD_INT 3
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: PUSH
60431: LD_INT 3
60433: PUSH
60434: LD_INT 5
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: LIST
60445: LIST
60446: LIST
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: LIST
60453: LIST
60454: LIST
60455: LIST
60456: LIST
60457: LIST
60458: LIST
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: LIST
60472: LIST
60473: LIST
60474: LIST
60475: LIST
60476: LIST
60477: LIST
60478: LIST
60479: LIST
60480: LIST
60481: LIST
60482: LIST
60483: LIST
60484: LIST
60485: LIST
60486: LIST
60487: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
60488: LD_ADDR_VAR 0 33
60492: PUSH
60493: LD_INT 4
60495: NEG
60496: PUSH
60497: LD_INT 4
60499: NEG
60500: PUSH
60501: EMPTY
60502: LIST
60503: LIST
60504: PUSH
60505: LD_INT 4
60507: NEG
60508: PUSH
60509: LD_INT 5
60511: NEG
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: PUSH
60517: LD_INT 3
60519: NEG
60520: PUSH
60521: LD_INT 4
60523: NEG
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 3
60531: NEG
60532: PUSH
60533: LD_INT 3
60535: NEG
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: LD_INT 4
60543: NEG
60544: PUSH
60545: LD_INT 3
60547: NEG
60548: PUSH
60549: EMPTY
60550: LIST
60551: LIST
60552: PUSH
60553: LD_INT 5
60555: NEG
60556: PUSH
60557: LD_INT 4
60559: NEG
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: LD_INT 5
60567: NEG
60568: PUSH
60569: LD_INT 5
60571: NEG
60572: PUSH
60573: EMPTY
60574: LIST
60575: LIST
60576: PUSH
60577: LD_INT 3
60579: NEG
60580: PUSH
60581: LD_INT 5
60583: NEG
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: PUSH
60589: LD_INT 5
60591: NEG
60592: PUSH
60593: LD_INT 3
60595: NEG
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: LD_INT 0
60603: PUSH
60604: LD_INT 3
60606: NEG
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: LD_INT 0
60614: PUSH
60615: LD_INT 4
60617: NEG
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: LD_INT 1
60625: PUSH
60626: LD_INT 3
60628: NEG
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: LD_INT 1
60636: PUSH
60637: LD_INT 2
60639: NEG
60640: PUSH
60641: EMPTY
60642: LIST
60643: LIST
60644: PUSH
60645: LD_INT 0
60647: PUSH
60648: LD_INT 2
60650: NEG
60651: PUSH
60652: EMPTY
60653: LIST
60654: LIST
60655: PUSH
60656: LD_INT 1
60658: NEG
60659: PUSH
60660: LD_INT 3
60662: NEG
60663: PUSH
60664: EMPTY
60665: LIST
60666: LIST
60667: PUSH
60668: LD_INT 1
60670: NEG
60671: PUSH
60672: LD_INT 4
60674: NEG
60675: PUSH
60676: EMPTY
60677: LIST
60678: LIST
60679: PUSH
60680: LD_INT 2
60682: PUSH
60683: LD_INT 2
60685: NEG
60686: PUSH
60687: EMPTY
60688: LIST
60689: LIST
60690: PUSH
60691: LD_INT 2
60693: NEG
60694: PUSH
60695: LD_INT 4
60697: NEG
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: PUSH
60703: LD_INT 4
60705: PUSH
60706: LD_INT 0
60708: PUSH
60709: EMPTY
60710: LIST
60711: LIST
60712: PUSH
60713: LD_INT 4
60715: PUSH
60716: LD_INT 1
60718: NEG
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: PUSH
60724: LD_INT 5
60726: PUSH
60727: LD_INT 0
60729: PUSH
60730: EMPTY
60731: LIST
60732: LIST
60733: PUSH
60734: LD_INT 5
60736: PUSH
60737: LD_INT 1
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: PUSH
60744: LD_INT 4
60746: PUSH
60747: LD_INT 1
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: PUSH
60754: LD_INT 3
60756: PUSH
60757: LD_INT 0
60759: PUSH
60760: EMPTY
60761: LIST
60762: LIST
60763: PUSH
60764: LD_INT 3
60766: PUSH
60767: LD_INT 1
60769: NEG
60770: PUSH
60771: EMPTY
60772: LIST
60773: LIST
60774: PUSH
60775: LD_INT 3
60777: PUSH
60778: LD_INT 2
60780: NEG
60781: PUSH
60782: EMPTY
60783: LIST
60784: LIST
60785: PUSH
60786: LD_INT 5
60788: PUSH
60789: LD_INT 2
60791: PUSH
60792: EMPTY
60793: LIST
60794: LIST
60795: PUSH
60796: LD_INT 3
60798: PUSH
60799: LD_INT 3
60801: PUSH
60802: EMPTY
60803: LIST
60804: LIST
60805: PUSH
60806: LD_INT 3
60808: PUSH
60809: LD_INT 2
60811: PUSH
60812: EMPTY
60813: LIST
60814: LIST
60815: PUSH
60816: LD_INT 4
60818: PUSH
60819: LD_INT 3
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 4
60828: PUSH
60829: LD_INT 4
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 3
60838: PUSH
60839: LD_INT 4
60841: PUSH
60842: EMPTY
60843: LIST
60844: LIST
60845: PUSH
60846: LD_INT 2
60848: PUSH
60849: LD_INT 3
60851: PUSH
60852: EMPTY
60853: LIST
60854: LIST
60855: PUSH
60856: LD_INT 2
60858: PUSH
60859: LD_INT 2
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: PUSH
60866: LD_INT 4
60868: PUSH
60869: LD_INT 2
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: PUSH
60876: LD_INT 2
60878: PUSH
60879: LD_INT 4
60881: PUSH
60882: EMPTY
60883: LIST
60884: LIST
60885: PUSH
60886: LD_INT 0
60888: PUSH
60889: LD_INT 4
60891: PUSH
60892: EMPTY
60893: LIST
60894: LIST
60895: PUSH
60896: LD_INT 0
60898: PUSH
60899: LD_INT 3
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PUSH
60906: LD_INT 1
60908: PUSH
60909: LD_INT 4
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: PUSH
60916: LD_INT 1
60918: PUSH
60919: LD_INT 5
60921: PUSH
60922: EMPTY
60923: LIST
60924: LIST
60925: PUSH
60926: LD_INT 0
60928: PUSH
60929: LD_INT 5
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: PUSH
60936: LD_INT 1
60938: NEG
60939: PUSH
60940: LD_INT 4
60942: PUSH
60943: EMPTY
60944: LIST
60945: LIST
60946: PUSH
60947: LD_INT 1
60949: NEG
60950: PUSH
60951: LD_INT 3
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: PUSH
60958: LD_INT 2
60960: PUSH
60961: LD_INT 5
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: PUSH
60968: LD_INT 2
60970: NEG
60971: PUSH
60972: LD_INT 3
60974: PUSH
60975: EMPTY
60976: LIST
60977: LIST
60978: PUSH
60979: EMPTY
60980: LIST
60981: LIST
60982: LIST
60983: LIST
60984: LIST
60985: LIST
60986: LIST
60987: LIST
60988: LIST
60989: LIST
60990: LIST
60991: LIST
60992: LIST
60993: LIST
60994: LIST
60995: LIST
60996: LIST
60997: LIST
60998: LIST
60999: LIST
61000: LIST
61001: LIST
61002: LIST
61003: LIST
61004: LIST
61005: LIST
61006: LIST
61007: LIST
61008: LIST
61009: LIST
61010: LIST
61011: LIST
61012: LIST
61013: LIST
61014: LIST
61015: LIST
61016: LIST
61017: LIST
61018: LIST
61019: LIST
61020: LIST
61021: LIST
61022: LIST
61023: LIST
61024: LIST
61025: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
61026: LD_ADDR_VAR 0 34
61030: PUSH
61031: LD_INT 0
61033: PUSH
61034: LD_INT 4
61036: NEG
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: PUSH
61042: LD_INT 0
61044: PUSH
61045: LD_INT 5
61047: NEG
61048: PUSH
61049: EMPTY
61050: LIST
61051: LIST
61052: PUSH
61053: LD_INT 1
61055: PUSH
61056: LD_INT 4
61058: NEG
61059: PUSH
61060: EMPTY
61061: LIST
61062: LIST
61063: PUSH
61064: LD_INT 1
61066: PUSH
61067: LD_INT 3
61069: NEG
61070: PUSH
61071: EMPTY
61072: LIST
61073: LIST
61074: PUSH
61075: LD_INT 0
61077: PUSH
61078: LD_INT 3
61080: NEG
61081: PUSH
61082: EMPTY
61083: LIST
61084: LIST
61085: PUSH
61086: LD_INT 1
61088: NEG
61089: PUSH
61090: LD_INT 4
61092: NEG
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: PUSH
61098: LD_INT 1
61100: NEG
61101: PUSH
61102: LD_INT 5
61104: NEG
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: PUSH
61110: LD_INT 2
61112: PUSH
61113: LD_INT 3
61115: NEG
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: LD_INT 2
61123: NEG
61124: PUSH
61125: LD_INT 5
61127: NEG
61128: PUSH
61129: EMPTY
61130: LIST
61131: LIST
61132: PUSH
61133: LD_INT 3
61135: PUSH
61136: LD_INT 0
61138: PUSH
61139: EMPTY
61140: LIST
61141: LIST
61142: PUSH
61143: LD_INT 3
61145: PUSH
61146: LD_INT 1
61148: NEG
61149: PUSH
61150: EMPTY
61151: LIST
61152: LIST
61153: PUSH
61154: LD_INT 4
61156: PUSH
61157: LD_INT 0
61159: PUSH
61160: EMPTY
61161: LIST
61162: LIST
61163: PUSH
61164: LD_INT 4
61166: PUSH
61167: LD_INT 1
61169: PUSH
61170: EMPTY
61171: LIST
61172: LIST
61173: PUSH
61174: LD_INT 3
61176: PUSH
61177: LD_INT 1
61179: PUSH
61180: EMPTY
61181: LIST
61182: LIST
61183: PUSH
61184: LD_INT 2
61186: PUSH
61187: LD_INT 0
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: PUSH
61194: LD_INT 2
61196: PUSH
61197: LD_INT 1
61199: NEG
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: PUSH
61205: LD_INT 2
61207: PUSH
61208: LD_INT 2
61210: NEG
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: PUSH
61216: LD_INT 4
61218: PUSH
61219: LD_INT 2
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: PUSH
61226: LD_INT 4
61228: PUSH
61229: LD_INT 4
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PUSH
61236: LD_INT 4
61238: PUSH
61239: LD_INT 3
61241: PUSH
61242: EMPTY
61243: LIST
61244: LIST
61245: PUSH
61246: LD_INT 5
61248: PUSH
61249: LD_INT 4
61251: PUSH
61252: EMPTY
61253: LIST
61254: LIST
61255: PUSH
61256: LD_INT 5
61258: PUSH
61259: LD_INT 5
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: PUSH
61266: LD_INT 4
61268: PUSH
61269: LD_INT 5
61271: PUSH
61272: EMPTY
61273: LIST
61274: LIST
61275: PUSH
61276: LD_INT 3
61278: PUSH
61279: LD_INT 4
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: PUSH
61286: LD_INT 3
61288: PUSH
61289: LD_INT 3
61291: PUSH
61292: EMPTY
61293: LIST
61294: LIST
61295: PUSH
61296: LD_INT 5
61298: PUSH
61299: LD_INT 3
61301: PUSH
61302: EMPTY
61303: LIST
61304: LIST
61305: PUSH
61306: LD_INT 3
61308: PUSH
61309: LD_INT 5
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: PUSH
61316: LD_INT 0
61318: PUSH
61319: LD_INT 3
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: PUSH
61326: LD_INT 0
61328: PUSH
61329: LD_INT 2
61331: PUSH
61332: EMPTY
61333: LIST
61334: LIST
61335: PUSH
61336: LD_INT 1
61338: PUSH
61339: LD_INT 3
61341: PUSH
61342: EMPTY
61343: LIST
61344: LIST
61345: PUSH
61346: LD_INT 1
61348: PUSH
61349: LD_INT 4
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PUSH
61356: LD_INT 0
61358: PUSH
61359: LD_INT 4
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: PUSH
61366: LD_INT 1
61368: NEG
61369: PUSH
61370: LD_INT 3
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: PUSH
61377: LD_INT 1
61379: NEG
61380: PUSH
61381: LD_INT 2
61383: PUSH
61384: EMPTY
61385: LIST
61386: LIST
61387: PUSH
61388: LD_INT 2
61390: PUSH
61391: LD_INT 4
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: LD_INT 2
61400: NEG
61401: PUSH
61402: LD_INT 2
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: PUSH
61409: LD_INT 4
61411: NEG
61412: PUSH
61413: LD_INT 0
61415: PUSH
61416: EMPTY
61417: LIST
61418: LIST
61419: PUSH
61420: LD_INT 4
61422: NEG
61423: PUSH
61424: LD_INT 1
61426: NEG
61427: PUSH
61428: EMPTY
61429: LIST
61430: LIST
61431: PUSH
61432: LD_INT 3
61434: NEG
61435: PUSH
61436: LD_INT 0
61438: PUSH
61439: EMPTY
61440: LIST
61441: LIST
61442: PUSH
61443: LD_INT 3
61445: NEG
61446: PUSH
61447: LD_INT 1
61449: PUSH
61450: EMPTY
61451: LIST
61452: LIST
61453: PUSH
61454: LD_INT 4
61456: NEG
61457: PUSH
61458: LD_INT 1
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: PUSH
61465: LD_INT 5
61467: NEG
61468: PUSH
61469: LD_INT 0
61471: PUSH
61472: EMPTY
61473: LIST
61474: LIST
61475: PUSH
61476: LD_INT 5
61478: NEG
61479: PUSH
61480: LD_INT 1
61482: NEG
61483: PUSH
61484: EMPTY
61485: LIST
61486: LIST
61487: PUSH
61488: LD_INT 5
61490: NEG
61491: PUSH
61492: LD_INT 2
61494: NEG
61495: PUSH
61496: EMPTY
61497: LIST
61498: LIST
61499: PUSH
61500: LD_INT 3
61502: NEG
61503: PUSH
61504: LD_INT 2
61506: PUSH
61507: EMPTY
61508: LIST
61509: LIST
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: LIST
61515: LIST
61516: LIST
61517: LIST
61518: LIST
61519: LIST
61520: LIST
61521: LIST
61522: LIST
61523: LIST
61524: LIST
61525: LIST
61526: LIST
61527: LIST
61528: LIST
61529: LIST
61530: LIST
61531: LIST
61532: LIST
61533: LIST
61534: LIST
61535: LIST
61536: LIST
61537: LIST
61538: LIST
61539: LIST
61540: LIST
61541: LIST
61542: LIST
61543: LIST
61544: LIST
61545: LIST
61546: LIST
61547: LIST
61548: LIST
61549: LIST
61550: LIST
61551: LIST
61552: LIST
61553: LIST
61554: LIST
61555: LIST
61556: LIST
61557: ST_TO_ADDR
// end ; end ;
61558: GO 61561
61560: POP
// case btype of b_depot , b_warehouse :
61561: LD_VAR 0 1
61565: PUSH
61566: LD_INT 0
61568: DOUBLE
61569: EQUAL
61570: IFTRUE 61580
61572: LD_INT 1
61574: DOUBLE
61575: EQUAL
61576: IFTRUE 61580
61578: GO 61781
61580: POP
// case nation of nation_american :
61581: LD_VAR 0 5
61585: PUSH
61586: LD_INT 1
61588: DOUBLE
61589: EQUAL
61590: IFTRUE 61594
61592: GO 61650
61594: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
61595: LD_ADDR_VAR 0 9
61599: PUSH
61600: LD_VAR 0 11
61604: PUSH
61605: LD_VAR 0 12
61609: PUSH
61610: LD_VAR 0 13
61614: PUSH
61615: LD_VAR 0 14
61619: PUSH
61620: LD_VAR 0 15
61624: PUSH
61625: LD_VAR 0 16
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: LIST
61634: LIST
61635: LIST
61636: LIST
61637: PUSH
61638: LD_VAR 0 4
61642: PUSH
61643: LD_INT 1
61645: PLUS
61646: ARRAY
61647: ST_TO_ADDR
61648: GO 61779
61650: LD_INT 2
61652: DOUBLE
61653: EQUAL
61654: IFTRUE 61658
61656: GO 61714
61658: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
61659: LD_ADDR_VAR 0 9
61663: PUSH
61664: LD_VAR 0 17
61668: PUSH
61669: LD_VAR 0 18
61673: PUSH
61674: LD_VAR 0 19
61678: PUSH
61679: LD_VAR 0 20
61683: PUSH
61684: LD_VAR 0 21
61688: PUSH
61689: LD_VAR 0 22
61693: PUSH
61694: EMPTY
61695: LIST
61696: LIST
61697: LIST
61698: LIST
61699: LIST
61700: LIST
61701: PUSH
61702: LD_VAR 0 4
61706: PUSH
61707: LD_INT 1
61709: PLUS
61710: ARRAY
61711: ST_TO_ADDR
61712: GO 61779
61714: LD_INT 3
61716: DOUBLE
61717: EQUAL
61718: IFTRUE 61722
61720: GO 61778
61722: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
61723: LD_ADDR_VAR 0 9
61727: PUSH
61728: LD_VAR 0 23
61732: PUSH
61733: LD_VAR 0 24
61737: PUSH
61738: LD_VAR 0 25
61742: PUSH
61743: LD_VAR 0 26
61747: PUSH
61748: LD_VAR 0 27
61752: PUSH
61753: LD_VAR 0 28
61757: PUSH
61758: EMPTY
61759: LIST
61760: LIST
61761: LIST
61762: LIST
61763: LIST
61764: LIST
61765: PUSH
61766: LD_VAR 0 4
61770: PUSH
61771: LD_INT 1
61773: PLUS
61774: ARRAY
61775: ST_TO_ADDR
61776: GO 61779
61778: POP
61779: GO 62334
61781: LD_INT 2
61783: DOUBLE
61784: EQUAL
61785: IFTRUE 61795
61787: LD_INT 3
61789: DOUBLE
61790: EQUAL
61791: IFTRUE 61795
61793: GO 61851
61795: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
61796: LD_ADDR_VAR 0 9
61800: PUSH
61801: LD_VAR 0 29
61805: PUSH
61806: LD_VAR 0 30
61810: PUSH
61811: LD_VAR 0 31
61815: PUSH
61816: LD_VAR 0 32
61820: PUSH
61821: LD_VAR 0 33
61825: PUSH
61826: LD_VAR 0 34
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: LIST
61835: LIST
61836: LIST
61837: LIST
61838: PUSH
61839: LD_VAR 0 4
61843: PUSH
61844: LD_INT 1
61846: PLUS
61847: ARRAY
61848: ST_TO_ADDR
61849: GO 62334
61851: LD_INT 16
61853: DOUBLE
61854: EQUAL
61855: IFTRUE 61913
61857: LD_INT 17
61859: DOUBLE
61860: EQUAL
61861: IFTRUE 61913
61863: LD_INT 18
61865: DOUBLE
61866: EQUAL
61867: IFTRUE 61913
61869: LD_INT 19
61871: DOUBLE
61872: EQUAL
61873: IFTRUE 61913
61875: LD_INT 22
61877: DOUBLE
61878: EQUAL
61879: IFTRUE 61913
61881: LD_INT 20
61883: DOUBLE
61884: EQUAL
61885: IFTRUE 61913
61887: LD_INT 21
61889: DOUBLE
61890: EQUAL
61891: IFTRUE 61913
61893: LD_INT 23
61895: DOUBLE
61896: EQUAL
61897: IFTRUE 61913
61899: LD_INT 24
61901: DOUBLE
61902: EQUAL
61903: IFTRUE 61913
61905: LD_INT 25
61907: DOUBLE
61908: EQUAL
61909: IFTRUE 61913
61911: GO 61969
61913: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
61914: LD_ADDR_VAR 0 9
61918: PUSH
61919: LD_VAR 0 35
61923: PUSH
61924: LD_VAR 0 36
61928: PUSH
61929: LD_VAR 0 37
61933: PUSH
61934: LD_VAR 0 38
61938: PUSH
61939: LD_VAR 0 39
61943: PUSH
61944: LD_VAR 0 40
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: LIST
61953: LIST
61954: LIST
61955: LIST
61956: PUSH
61957: LD_VAR 0 4
61961: PUSH
61962: LD_INT 1
61964: PLUS
61965: ARRAY
61966: ST_TO_ADDR
61967: GO 62334
61969: LD_INT 6
61971: DOUBLE
61972: EQUAL
61973: IFTRUE 62025
61975: LD_INT 7
61977: DOUBLE
61978: EQUAL
61979: IFTRUE 62025
61981: LD_INT 8
61983: DOUBLE
61984: EQUAL
61985: IFTRUE 62025
61987: LD_INT 13
61989: DOUBLE
61990: EQUAL
61991: IFTRUE 62025
61993: LD_INT 12
61995: DOUBLE
61996: EQUAL
61997: IFTRUE 62025
61999: LD_INT 15
62001: DOUBLE
62002: EQUAL
62003: IFTRUE 62025
62005: LD_INT 11
62007: DOUBLE
62008: EQUAL
62009: IFTRUE 62025
62011: LD_INT 14
62013: DOUBLE
62014: EQUAL
62015: IFTRUE 62025
62017: LD_INT 10
62019: DOUBLE
62020: EQUAL
62021: IFTRUE 62025
62023: GO 62081
62025: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
62026: LD_ADDR_VAR 0 9
62030: PUSH
62031: LD_VAR 0 41
62035: PUSH
62036: LD_VAR 0 42
62040: PUSH
62041: LD_VAR 0 43
62045: PUSH
62046: LD_VAR 0 44
62050: PUSH
62051: LD_VAR 0 45
62055: PUSH
62056: LD_VAR 0 46
62060: PUSH
62061: EMPTY
62062: LIST
62063: LIST
62064: LIST
62065: LIST
62066: LIST
62067: LIST
62068: PUSH
62069: LD_VAR 0 4
62073: PUSH
62074: LD_INT 1
62076: PLUS
62077: ARRAY
62078: ST_TO_ADDR
62079: GO 62334
62081: LD_INT 36
62083: DOUBLE
62084: EQUAL
62085: IFTRUE 62089
62087: GO 62145
62089: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
62090: LD_ADDR_VAR 0 9
62094: PUSH
62095: LD_VAR 0 47
62099: PUSH
62100: LD_VAR 0 48
62104: PUSH
62105: LD_VAR 0 49
62109: PUSH
62110: LD_VAR 0 50
62114: PUSH
62115: LD_VAR 0 51
62119: PUSH
62120: LD_VAR 0 52
62124: PUSH
62125: EMPTY
62126: LIST
62127: LIST
62128: LIST
62129: LIST
62130: LIST
62131: LIST
62132: PUSH
62133: LD_VAR 0 4
62137: PUSH
62138: LD_INT 1
62140: PLUS
62141: ARRAY
62142: ST_TO_ADDR
62143: GO 62334
62145: LD_INT 4
62147: DOUBLE
62148: EQUAL
62149: IFTRUE 62171
62151: LD_INT 5
62153: DOUBLE
62154: EQUAL
62155: IFTRUE 62171
62157: LD_INT 34
62159: DOUBLE
62160: EQUAL
62161: IFTRUE 62171
62163: LD_INT 37
62165: DOUBLE
62166: EQUAL
62167: IFTRUE 62171
62169: GO 62227
62171: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
62172: LD_ADDR_VAR 0 9
62176: PUSH
62177: LD_VAR 0 53
62181: PUSH
62182: LD_VAR 0 54
62186: PUSH
62187: LD_VAR 0 55
62191: PUSH
62192: LD_VAR 0 56
62196: PUSH
62197: LD_VAR 0 57
62201: PUSH
62202: LD_VAR 0 58
62206: PUSH
62207: EMPTY
62208: LIST
62209: LIST
62210: LIST
62211: LIST
62212: LIST
62213: LIST
62214: PUSH
62215: LD_VAR 0 4
62219: PUSH
62220: LD_INT 1
62222: PLUS
62223: ARRAY
62224: ST_TO_ADDR
62225: GO 62334
62227: LD_INT 31
62229: DOUBLE
62230: EQUAL
62231: IFTRUE 62277
62233: LD_INT 32
62235: DOUBLE
62236: EQUAL
62237: IFTRUE 62277
62239: LD_INT 33
62241: DOUBLE
62242: EQUAL
62243: IFTRUE 62277
62245: LD_INT 27
62247: DOUBLE
62248: EQUAL
62249: IFTRUE 62277
62251: LD_INT 26
62253: DOUBLE
62254: EQUAL
62255: IFTRUE 62277
62257: LD_INT 28
62259: DOUBLE
62260: EQUAL
62261: IFTRUE 62277
62263: LD_INT 29
62265: DOUBLE
62266: EQUAL
62267: IFTRUE 62277
62269: LD_INT 30
62271: DOUBLE
62272: EQUAL
62273: IFTRUE 62277
62275: GO 62333
62277: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
62278: LD_ADDR_VAR 0 9
62282: PUSH
62283: LD_VAR 0 59
62287: PUSH
62288: LD_VAR 0 60
62292: PUSH
62293: LD_VAR 0 61
62297: PUSH
62298: LD_VAR 0 62
62302: PUSH
62303: LD_VAR 0 63
62307: PUSH
62308: LD_VAR 0 64
62312: PUSH
62313: EMPTY
62314: LIST
62315: LIST
62316: LIST
62317: LIST
62318: LIST
62319: LIST
62320: PUSH
62321: LD_VAR 0 4
62325: PUSH
62326: LD_INT 1
62328: PLUS
62329: ARRAY
62330: ST_TO_ADDR
62331: GO 62334
62333: POP
// temp_list2 = [ ] ;
62334: LD_ADDR_VAR 0 10
62338: PUSH
62339: EMPTY
62340: ST_TO_ADDR
// for i in temp_list do
62341: LD_ADDR_VAR 0 8
62345: PUSH
62346: LD_VAR 0 9
62350: PUSH
62351: FOR_IN
62352: IFFALSE 62404
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
62354: LD_ADDR_VAR 0 10
62358: PUSH
62359: LD_VAR 0 10
62363: PUSH
62364: LD_VAR 0 8
62368: PUSH
62369: LD_INT 1
62371: ARRAY
62372: PUSH
62373: LD_VAR 0 2
62377: PLUS
62378: PUSH
62379: LD_VAR 0 8
62383: PUSH
62384: LD_INT 2
62386: ARRAY
62387: PUSH
62388: LD_VAR 0 3
62392: PLUS
62393: PUSH
62394: EMPTY
62395: LIST
62396: LIST
62397: PUSH
62398: EMPTY
62399: LIST
62400: ADD
62401: ST_TO_ADDR
62402: GO 62351
62404: POP
62405: POP
// result = temp_list2 ;
62406: LD_ADDR_VAR 0 7
62410: PUSH
62411: LD_VAR 0 10
62415: ST_TO_ADDR
// end ;
62416: LD_VAR 0 7
62420: RET
// export function EnemyInRange ( unit , dist ) ; begin
62421: LD_INT 0
62423: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
62424: LD_ADDR_VAR 0 3
62428: PUSH
62429: LD_VAR 0 1
62433: PPUSH
62434: CALL_OW 255
62438: PPUSH
62439: LD_VAR 0 1
62443: PPUSH
62444: CALL_OW 250
62448: PPUSH
62449: LD_VAR 0 1
62453: PPUSH
62454: CALL_OW 251
62458: PPUSH
62459: LD_VAR 0 2
62463: PPUSH
62464: CALL 35817 0 4
62468: PUSH
62469: LD_INT 4
62471: ARRAY
62472: ST_TO_ADDR
// end ;
62473: LD_VAR 0 3
62477: RET
// export function PlayerSeeMe ( unit ) ; begin
62478: LD_INT 0
62480: PPUSH
// result := See ( your_side , unit ) ;
62481: LD_ADDR_VAR 0 2
62485: PUSH
62486: LD_OWVAR 2
62490: PPUSH
62491: LD_VAR 0 1
62495: PPUSH
62496: CALL_OW 292
62500: ST_TO_ADDR
// end ;
62501: LD_VAR 0 2
62505: RET
// export function ReverseDir ( unit ) ; begin
62506: LD_INT 0
62508: PPUSH
// if not unit then
62509: LD_VAR 0 1
62513: NOT
62514: IFFALSE 62518
// exit ;
62516: GO 62541
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
62518: LD_ADDR_VAR 0 2
62522: PUSH
62523: LD_VAR 0 1
62527: PPUSH
62528: CALL_OW 254
62532: PUSH
62533: LD_INT 3
62535: PLUS
62536: PUSH
62537: LD_INT 6
62539: MOD
62540: ST_TO_ADDR
// end ;
62541: LD_VAR 0 2
62545: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
62546: LD_INT 0
62548: PPUSH
62549: PPUSH
62550: PPUSH
62551: PPUSH
62552: PPUSH
// if not hexes then
62553: LD_VAR 0 2
62557: NOT
62558: IFFALSE 62562
// exit ;
62560: GO 62710
// dist := 9999 ;
62562: LD_ADDR_VAR 0 5
62566: PUSH
62567: LD_INT 9999
62569: ST_TO_ADDR
// for i = 1 to hexes do
62570: LD_ADDR_VAR 0 4
62574: PUSH
62575: DOUBLE
62576: LD_INT 1
62578: DEC
62579: ST_TO_ADDR
62580: LD_VAR 0 2
62584: PUSH
62585: FOR_TO
62586: IFFALSE 62698
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
62588: LD_VAR 0 1
62592: PPUSH
62593: LD_VAR 0 2
62597: PUSH
62598: LD_VAR 0 4
62602: ARRAY
62603: PUSH
62604: LD_INT 1
62606: ARRAY
62607: PPUSH
62608: LD_VAR 0 2
62612: PUSH
62613: LD_VAR 0 4
62617: ARRAY
62618: PUSH
62619: LD_INT 2
62621: ARRAY
62622: PPUSH
62623: CALL_OW 297
62627: PUSH
62628: LD_VAR 0 5
62632: LESS
62633: IFFALSE 62696
// begin hex := hexes [ i ] ;
62635: LD_ADDR_VAR 0 7
62639: PUSH
62640: LD_VAR 0 2
62644: PUSH
62645: LD_VAR 0 4
62649: ARRAY
62650: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62651: LD_ADDR_VAR 0 5
62655: PUSH
62656: LD_VAR 0 1
62660: PPUSH
62661: LD_VAR 0 2
62665: PUSH
62666: LD_VAR 0 4
62670: ARRAY
62671: PUSH
62672: LD_INT 1
62674: ARRAY
62675: PPUSH
62676: LD_VAR 0 2
62680: PUSH
62681: LD_VAR 0 4
62685: ARRAY
62686: PUSH
62687: LD_INT 2
62689: ARRAY
62690: PPUSH
62691: CALL_OW 297
62695: ST_TO_ADDR
// end ; end ;
62696: GO 62585
62698: POP
62699: POP
// result := hex ;
62700: LD_ADDR_VAR 0 3
62704: PUSH
62705: LD_VAR 0 7
62709: ST_TO_ADDR
// end ;
62710: LD_VAR 0 3
62714: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
62715: LD_INT 0
62717: PPUSH
62718: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
62719: LD_VAR 0 1
62723: NOT
62724: PUSH
62725: LD_VAR 0 1
62729: PUSH
62730: LD_INT 21
62732: PUSH
62733: LD_INT 2
62735: PUSH
62736: EMPTY
62737: LIST
62738: LIST
62739: PUSH
62740: LD_INT 23
62742: PUSH
62743: LD_INT 2
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: EMPTY
62751: LIST
62752: LIST
62753: PPUSH
62754: CALL_OW 69
62758: IN
62759: NOT
62760: OR
62761: IFFALSE 62765
// exit ;
62763: GO 62812
// for i = 1 to 3 do
62765: LD_ADDR_VAR 0 3
62769: PUSH
62770: DOUBLE
62771: LD_INT 1
62773: DEC
62774: ST_TO_ADDR
62775: LD_INT 3
62777: PUSH
62778: FOR_TO
62779: IFFALSE 62810
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
62781: LD_VAR 0 1
62785: PPUSH
62786: CALL_OW 250
62790: PPUSH
62791: LD_VAR 0 1
62795: PPUSH
62796: CALL_OW 251
62800: PPUSH
62801: LD_INT 1
62803: PPUSH
62804: CALL_OW 453
62808: GO 62778
62810: POP
62811: POP
// end ;
62812: LD_VAR 0 2
62816: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
62817: LD_INT 0
62819: PPUSH
62820: PPUSH
62821: PPUSH
62822: PPUSH
62823: PPUSH
62824: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
62825: LD_VAR 0 1
62829: NOT
62830: PUSH
62831: LD_VAR 0 2
62835: NOT
62836: OR
62837: PUSH
62838: LD_VAR 0 1
62842: PPUSH
62843: CALL_OW 314
62847: OR
62848: IFFALSE 62852
// exit ;
62850: GO 63293
// x := GetX ( enemy_unit ) ;
62852: LD_ADDR_VAR 0 7
62856: PUSH
62857: LD_VAR 0 2
62861: PPUSH
62862: CALL_OW 250
62866: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
62867: LD_ADDR_VAR 0 8
62871: PUSH
62872: LD_VAR 0 2
62876: PPUSH
62877: CALL_OW 251
62881: ST_TO_ADDR
// if not x or not y then
62882: LD_VAR 0 7
62886: NOT
62887: PUSH
62888: LD_VAR 0 8
62892: NOT
62893: OR
62894: IFFALSE 62898
// exit ;
62896: GO 63293
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
62898: LD_ADDR_VAR 0 6
62902: PUSH
62903: LD_VAR 0 7
62907: PPUSH
62908: LD_INT 0
62910: PPUSH
62911: LD_INT 4
62913: PPUSH
62914: CALL_OW 272
62918: PUSH
62919: LD_VAR 0 8
62923: PPUSH
62924: LD_INT 0
62926: PPUSH
62927: LD_INT 4
62929: PPUSH
62930: CALL_OW 273
62934: PUSH
62935: EMPTY
62936: LIST
62937: LIST
62938: PUSH
62939: LD_VAR 0 7
62943: PPUSH
62944: LD_INT 1
62946: PPUSH
62947: LD_INT 4
62949: PPUSH
62950: CALL_OW 272
62954: PUSH
62955: LD_VAR 0 8
62959: PPUSH
62960: LD_INT 1
62962: PPUSH
62963: LD_INT 4
62965: PPUSH
62966: CALL_OW 273
62970: PUSH
62971: EMPTY
62972: LIST
62973: LIST
62974: PUSH
62975: LD_VAR 0 7
62979: PPUSH
62980: LD_INT 2
62982: PPUSH
62983: LD_INT 4
62985: PPUSH
62986: CALL_OW 272
62990: PUSH
62991: LD_VAR 0 8
62995: PPUSH
62996: LD_INT 2
62998: PPUSH
62999: LD_INT 4
63001: PPUSH
63002: CALL_OW 273
63006: PUSH
63007: EMPTY
63008: LIST
63009: LIST
63010: PUSH
63011: LD_VAR 0 7
63015: PPUSH
63016: LD_INT 3
63018: PPUSH
63019: LD_INT 4
63021: PPUSH
63022: CALL_OW 272
63026: PUSH
63027: LD_VAR 0 8
63031: PPUSH
63032: LD_INT 3
63034: PPUSH
63035: LD_INT 4
63037: PPUSH
63038: CALL_OW 273
63042: PUSH
63043: EMPTY
63044: LIST
63045: LIST
63046: PUSH
63047: LD_VAR 0 7
63051: PPUSH
63052: LD_INT 4
63054: PPUSH
63055: LD_INT 4
63057: PPUSH
63058: CALL_OW 272
63062: PUSH
63063: LD_VAR 0 8
63067: PPUSH
63068: LD_INT 4
63070: PPUSH
63071: LD_INT 4
63073: PPUSH
63074: CALL_OW 273
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: PUSH
63083: LD_VAR 0 7
63087: PPUSH
63088: LD_INT 5
63090: PPUSH
63091: LD_INT 4
63093: PPUSH
63094: CALL_OW 272
63098: PUSH
63099: LD_VAR 0 8
63103: PPUSH
63104: LD_INT 5
63106: PPUSH
63107: LD_INT 4
63109: PPUSH
63110: CALL_OW 273
63114: PUSH
63115: EMPTY
63116: LIST
63117: LIST
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: LIST
63123: LIST
63124: LIST
63125: LIST
63126: ST_TO_ADDR
// for i = tmp downto 1 do
63127: LD_ADDR_VAR 0 4
63131: PUSH
63132: DOUBLE
63133: LD_VAR 0 6
63137: INC
63138: ST_TO_ADDR
63139: LD_INT 1
63141: PUSH
63142: FOR_DOWNTO
63143: IFFALSE 63244
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
63145: LD_VAR 0 6
63149: PUSH
63150: LD_VAR 0 4
63154: ARRAY
63155: PUSH
63156: LD_INT 1
63158: ARRAY
63159: PPUSH
63160: LD_VAR 0 6
63164: PUSH
63165: LD_VAR 0 4
63169: ARRAY
63170: PUSH
63171: LD_INT 2
63173: ARRAY
63174: PPUSH
63175: CALL_OW 488
63179: NOT
63180: PUSH
63181: LD_VAR 0 6
63185: PUSH
63186: LD_VAR 0 4
63190: ARRAY
63191: PUSH
63192: LD_INT 1
63194: ARRAY
63195: PPUSH
63196: LD_VAR 0 6
63200: PUSH
63201: LD_VAR 0 4
63205: ARRAY
63206: PUSH
63207: LD_INT 2
63209: ARRAY
63210: PPUSH
63211: CALL_OW 428
63215: PUSH
63216: LD_INT 0
63218: NONEQUAL
63219: OR
63220: IFFALSE 63242
// tmp := Delete ( tmp , i ) ;
63222: LD_ADDR_VAR 0 6
63226: PUSH
63227: LD_VAR 0 6
63231: PPUSH
63232: LD_VAR 0 4
63236: PPUSH
63237: CALL_OW 3
63241: ST_TO_ADDR
63242: GO 63142
63244: POP
63245: POP
// j := GetClosestHex ( unit , tmp ) ;
63246: LD_ADDR_VAR 0 5
63250: PUSH
63251: LD_VAR 0 1
63255: PPUSH
63256: LD_VAR 0 6
63260: PPUSH
63261: CALL 62546 0 2
63265: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
63266: LD_VAR 0 1
63270: PPUSH
63271: LD_VAR 0 5
63275: PUSH
63276: LD_INT 1
63278: ARRAY
63279: PPUSH
63280: LD_VAR 0 5
63284: PUSH
63285: LD_INT 2
63287: ARRAY
63288: PPUSH
63289: CALL_OW 111
// end ;
63293: LD_VAR 0 3
63297: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
63298: LD_INT 0
63300: PPUSH
63301: PPUSH
63302: PPUSH
// uc_side = 0 ;
63303: LD_ADDR_OWVAR 20
63307: PUSH
63308: LD_INT 0
63310: ST_TO_ADDR
// uc_nation = 0 ;
63311: LD_ADDR_OWVAR 21
63315: PUSH
63316: LD_INT 0
63318: ST_TO_ADDR
// InitHc_All ( ) ;
63319: CALL_OW 584
// InitVc ;
63323: CALL_OW 20
// if mastodonts then
63327: LD_VAR 0 6
63331: IFFALSE 63398
// for i = 1 to mastodonts do
63333: LD_ADDR_VAR 0 11
63337: PUSH
63338: DOUBLE
63339: LD_INT 1
63341: DEC
63342: ST_TO_ADDR
63343: LD_VAR 0 6
63347: PUSH
63348: FOR_TO
63349: IFFALSE 63396
// begin vc_chassis := 31 ;
63351: LD_ADDR_OWVAR 37
63355: PUSH
63356: LD_INT 31
63358: ST_TO_ADDR
// vc_control := control_rider ;
63359: LD_ADDR_OWVAR 38
63363: PUSH
63364: LD_INT 4
63366: ST_TO_ADDR
// animal := CreateVehicle ;
63367: LD_ADDR_VAR 0 12
63371: PUSH
63372: CALL_OW 45
63376: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63377: LD_VAR 0 12
63381: PPUSH
63382: LD_VAR 0 8
63386: PPUSH
63387: LD_INT 0
63389: PPUSH
63390: CALL 65586 0 3
// end ;
63394: GO 63348
63396: POP
63397: POP
// if horses then
63398: LD_VAR 0 5
63402: IFFALSE 63469
// for i = 1 to horses do
63404: LD_ADDR_VAR 0 11
63408: PUSH
63409: DOUBLE
63410: LD_INT 1
63412: DEC
63413: ST_TO_ADDR
63414: LD_VAR 0 5
63418: PUSH
63419: FOR_TO
63420: IFFALSE 63467
// begin hc_class := 21 ;
63422: LD_ADDR_OWVAR 28
63426: PUSH
63427: LD_INT 21
63429: ST_TO_ADDR
// hc_gallery :=  ;
63430: LD_ADDR_OWVAR 33
63434: PUSH
63435: LD_STRING 
63437: ST_TO_ADDR
// animal := CreateHuman ;
63438: LD_ADDR_VAR 0 12
63442: PUSH
63443: CALL_OW 44
63447: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63448: LD_VAR 0 12
63452: PPUSH
63453: LD_VAR 0 8
63457: PPUSH
63458: LD_INT 0
63460: PPUSH
63461: CALL 65586 0 3
// end ;
63465: GO 63419
63467: POP
63468: POP
// if birds then
63469: LD_VAR 0 1
63473: IFFALSE 63540
// for i = 1 to birds do
63475: LD_ADDR_VAR 0 11
63479: PUSH
63480: DOUBLE
63481: LD_INT 1
63483: DEC
63484: ST_TO_ADDR
63485: LD_VAR 0 1
63489: PUSH
63490: FOR_TO
63491: IFFALSE 63538
// begin hc_class = 18 ;
63493: LD_ADDR_OWVAR 28
63497: PUSH
63498: LD_INT 18
63500: ST_TO_ADDR
// hc_gallery =  ;
63501: LD_ADDR_OWVAR 33
63505: PUSH
63506: LD_STRING 
63508: ST_TO_ADDR
// animal := CreateHuman ;
63509: LD_ADDR_VAR 0 12
63513: PUSH
63514: CALL_OW 44
63518: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63519: LD_VAR 0 12
63523: PPUSH
63524: LD_VAR 0 8
63528: PPUSH
63529: LD_INT 0
63531: PPUSH
63532: CALL 65586 0 3
// end ;
63536: GO 63490
63538: POP
63539: POP
// if tigers then
63540: LD_VAR 0 2
63544: IFFALSE 63628
// for i = 1 to tigers do
63546: LD_ADDR_VAR 0 11
63550: PUSH
63551: DOUBLE
63552: LD_INT 1
63554: DEC
63555: ST_TO_ADDR
63556: LD_VAR 0 2
63560: PUSH
63561: FOR_TO
63562: IFFALSE 63626
// begin hc_class = class_tiger ;
63564: LD_ADDR_OWVAR 28
63568: PUSH
63569: LD_INT 14
63571: ST_TO_ADDR
// hc_gallery =  ;
63572: LD_ADDR_OWVAR 33
63576: PUSH
63577: LD_STRING 
63579: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
63580: LD_ADDR_OWVAR 35
63584: PUSH
63585: LD_INT 7
63587: NEG
63588: PPUSH
63589: LD_INT 7
63591: PPUSH
63592: CALL_OW 12
63596: ST_TO_ADDR
// animal := CreateHuman ;
63597: LD_ADDR_VAR 0 12
63601: PUSH
63602: CALL_OW 44
63606: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63607: LD_VAR 0 12
63611: PPUSH
63612: LD_VAR 0 8
63616: PPUSH
63617: LD_INT 0
63619: PPUSH
63620: CALL 65586 0 3
// end ;
63624: GO 63561
63626: POP
63627: POP
// if apemans then
63628: LD_VAR 0 3
63632: IFFALSE 63755
// for i = 1 to apemans do
63634: LD_ADDR_VAR 0 11
63638: PUSH
63639: DOUBLE
63640: LD_INT 1
63642: DEC
63643: ST_TO_ADDR
63644: LD_VAR 0 3
63648: PUSH
63649: FOR_TO
63650: IFFALSE 63753
// begin hc_class = class_apeman ;
63652: LD_ADDR_OWVAR 28
63656: PUSH
63657: LD_INT 12
63659: ST_TO_ADDR
// hc_gallery =  ;
63660: LD_ADDR_OWVAR 33
63664: PUSH
63665: LD_STRING 
63667: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
63668: LD_ADDR_OWVAR 35
63672: PUSH
63673: LD_INT 2
63675: NEG
63676: PPUSH
63677: LD_INT 2
63679: PPUSH
63680: CALL_OW 12
63684: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
63685: LD_ADDR_OWVAR 31
63689: PUSH
63690: LD_INT 1
63692: PPUSH
63693: LD_INT 3
63695: PPUSH
63696: CALL_OW 12
63700: PUSH
63701: LD_INT 1
63703: PPUSH
63704: LD_INT 3
63706: PPUSH
63707: CALL_OW 12
63711: PUSH
63712: LD_INT 0
63714: PUSH
63715: LD_INT 0
63717: PUSH
63718: EMPTY
63719: LIST
63720: LIST
63721: LIST
63722: LIST
63723: ST_TO_ADDR
// animal := CreateHuman ;
63724: LD_ADDR_VAR 0 12
63728: PUSH
63729: CALL_OW 44
63733: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63734: LD_VAR 0 12
63738: PPUSH
63739: LD_VAR 0 8
63743: PPUSH
63744: LD_INT 0
63746: PPUSH
63747: CALL 65586 0 3
// end ;
63751: GO 63649
63753: POP
63754: POP
// if enchidnas then
63755: LD_VAR 0 4
63759: IFFALSE 63826
// for i = 1 to enchidnas do
63761: LD_ADDR_VAR 0 11
63765: PUSH
63766: DOUBLE
63767: LD_INT 1
63769: DEC
63770: ST_TO_ADDR
63771: LD_VAR 0 4
63775: PUSH
63776: FOR_TO
63777: IFFALSE 63824
// begin hc_class = 13 ;
63779: LD_ADDR_OWVAR 28
63783: PUSH
63784: LD_INT 13
63786: ST_TO_ADDR
// hc_gallery =  ;
63787: LD_ADDR_OWVAR 33
63791: PUSH
63792: LD_STRING 
63794: ST_TO_ADDR
// animal := CreateHuman ;
63795: LD_ADDR_VAR 0 12
63799: PUSH
63800: CALL_OW 44
63804: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
63805: LD_VAR 0 12
63809: PPUSH
63810: LD_VAR 0 8
63814: PPUSH
63815: LD_INT 0
63817: PPUSH
63818: CALL 65586 0 3
// end ;
63822: GO 63776
63824: POP
63825: POP
// if fishes then
63826: LD_VAR 0 7
63830: IFFALSE 63897
// for i = 1 to fishes do
63832: LD_ADDR_VAR 0 11
63836: PUSH
63837: DOUBLE
63838: LD_INT 1
63840: DEC
63841: ST_TO_ADDR
63842: LD_VAR 0 7
63846: PUSH
63847: FOR_TO
63848: IFFALSE 63895
// begin hc_class = 20 ;
63850: LD_ADDR_OWVAR 28
63854: PUSH
63855: LD_INT 20
63857: ST_TO_ADDR
// hc_gallery =  ;
63858: LD_ADDR_OWVAR 33
63862: PUSH
63863: LD_STRING 
63865: ST_TO_ADDR
// animal := CreateHuman ;
63866: LD_ADDR_VAR 0 12
63870: PUSH
63871: CALL_OW 44
63875: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
63876: LD_VAR 0 12
63880: PPUSH
63881: LD_VAR 0 9
63885: PPUSH
63886: LD_INT 0
63888: PPUSH
63889: CALL 65586 0 3
// end ;
63893: GO 63847
63895: POP
63896: POP
// end ;
63897: LD_VAR 0 10
63901: RET
// export function WantHeal ( sci , unit ) ; begin
63902: LD_INT 0
63904: PPUSH
// if GetTaskList ( sci ) > 0 then
63905: LD_VAR 0 1
63909: PPUSH
63910: CALL_OW 437
63914: PUSH
63915: LD_INT 0
63917: GREATER
63918: IFFALSE 63988
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
63920: LD_VAR 0 1
63924: PPUSH
63925: CALL_OW 437
63929: PUSH
63930: LD_INT 1
63932: ARRAY
63933: PUSH
63934: LD_INT 1
63936: ARRAY
63937: PUSH
63938: LD_STRING l
63940: EQUAL
63941: PUSH
63942: LD_VAR 0 1
63946: PPUSH
63947: CALL_OW 437
63951: PUSH
63952: LD_INT 1
63954: ARRAY
63955: PUSH
63956: LD_INT 4
63958: ARRAY
63959: PUSH
63960: LD_VAR 0 2
63964: EQUAL
63965: AND
63966: IFFALSE 63978
// result := true else
63968: LD_ADDR_VAR 0 3
63972: PUSH
63973: LD_INT 1
63975: ST_TO_ADDR
63976: GO 63986
// result := false ;
63978: LD_ADDR_VAR 0 3
63982: PUSH
63983: LD_INT 0
63985: ST_TO_ADDR
// end else
63986: GO 63996
// result := false ;
63988: LD_ADDR_VAR 0 3
63992: PUSH
63993: LD_INT 0
63995: ST_TO_ADDR
// end ;
63996: LD_VAR 0 3
64000: RET
// export function HealTarget ( sci ) ; begin
64001: LD_INT 0
64003: PPUSH
// if not sci then
64004: LD_VAR 0 1
64008: NOT
64009: IFFALSE 64013
// exit ;
64011: GO 64078
// result := 0 ;
64013: LD_ADDR_VAR 0 2
64017: PUSH
64018: LD_INT 0
64020: ST_TO_ADDR
// if GetTaskList ( sci ) then
64021: LD_VAR 0 1
64025: PPUSH
64026: CALL_OW 437
64030: IFFALSE 64078
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
64032: LD_VAR 0 1
64036: PPUSH
64037: CALL_OW 437
64041: PUSH
64042: LD_INT 1
64044: ARRAY
64045: PUSH
64046: LD_INT 1
64048: ARRAY
64049: PUSH
64050: LD_STRING l
64052: EQUAL
64053: IFFALSE 64078
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
64055: LD_ADDR_VAR 0 2
64059: PUSH
64060: LD_VAR 0 1
64064: PPUSH
64065: CALL_OW 437
64069: PUSH
64070: LD_INT 1
64072: ARRAY
64073: PUSH
64074: LD_INT 4
64076: ARRAY
64077: ST_TO_ADDR
// end ;
64078: LD_VAR 0 2
64082: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
64083: LD_INT 0
64085: PPUSH
64086: PPUSH
64087: PPUSH
64088: PPUSH
// if not base_units then
64089: LD_VAR 0 1
64093: NOT
64094: IFFALSE 64098
// exit ;
64096: GO 64185
// result := false ;
64098: LD_ADDR_VAR 0 2
64102: PUSH
64103: LD_INT 0
64105: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
64106: LD_ADDR_VAR 0 5
64110: PUSH
64111: LD_VAR 0 1
64115: PPUSH
64116: LD_INT 21
64118: PUSH
64119: LD_INT 3
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: PPUSH
64126: CALL_OW 72
64130: ST_TO_ADDR
// if not tmp then
64131: LD_VAR 0 5
64135: NOT
64136: IFFALSE 64140
// exit ;
64138: GO 64185
// for i in tmp do
64140: LD_ADDR_VAR 0 3
64144: PUSH
64145: LD_VAR 0 5
64149: PUSH
64150: FOR_IN
64151: IFFALSE 64183
// begin result := EnemyInRange ( i , 22 ) ;
64153: LD_ADDR_VAR 0 2
64157: PUSH
64158: LD_VAR 0 3
64162: PPUSH
64163: LD_INT 22
64165: PPUSH
64166: CALL 62421 0 2
64170: ST_TO_ADDR
// if result then
64171: LD_VAR 0 2
64175: IFFALSE 64181
// exit ;
64177: POP
64178: POP
64179: GO 64185
// end ;
64181: GO 64150
64183: POP
64184: POP
// end ;
64185: LD_VAR 0 2
64189: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
64190: LD_INT 0
64192: PPUSH
64193: PPUSH
// if not units then
64194: LD_VAR 0 1
64198: NOT
64199: IFFALSE 64203
// exit ;
64201: GO 64273
// result := [ ] ;
64203: LD_ADDR_VAR 0 3
64207: PUSH
64208: EMPTY
64209: ST_TO_ADDR
// for i in units do
64210: LD_ADDR_VAR 0 4
64214: PUSH
64215: LD_VAR 0 1
64219: PUSH
64220: FOR_IN
64221: IFFALSE 64271
// if GetTag ( i ) = tag then
64223: LD_VAR 0 4
64227: PPUSH
64228: CALL_OW 110
64232: PUSH
64233: LD_VAR 0 2
64237: EQUAL
64238: IFFALSE 64269
// result := Replace ( result , result + 1 , i ) ;
64240: LD_ADDR_VAR 0 3
64244: PUSH
64245: LD_VAR 0 3
64249: PPUSH
64250: LD_VAR 0 3
64254: PUSH
64255: LD_INT 1
64257: PLUS
64258: PPUSH
64259: LD_VAR 0 4
64263: PPUSH
64264: CALL_OW 1
64268: ST_TO_ADDR
64269: GO 64220
64271: POP
64272: POP
// end ;
64273: LD_VAR 0 3
64277: RET
// export function IsDriver ( un ) ; begin
64278: LD_INT 0
64280: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
64281: LD_ADDR_VAR 0 2
64285: PUSH
64286: LD_VAR 0 1
64290: PUSH
64291: LD_INT 55
64293: PUSH
64294: EMPTY
64295: LIST
64296: PPUSH
64297: CALL_OW 69
64301: IN
64302: ST_TO_ADDR
// end ;
64303: LD_VAR 0 2
64307: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
64308: LD_INT 0
64310: PPUSH
64311: PPUSH
// list := [ ] ;
64312: LD_ADDR_VAR 0 5
64316: PUSH
64317: EMPTY
64318: ST_TO_ADDR
// case d of 0 :
64319: LD_VAR 0 3
64323: PUSH
64324: LD_INT 0
64326: DOUBLE
64327: EQUAL
64328: IFTRUE 64332
64330: GO 64465
64332: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
64333: LD_ADDR_VAR 0 5
64337: PUSH
64338: LD_VAR 0 1
64342: PUSH
64343: LD_INT 4
64345: MINUS
64346: PUSH
64347: LD_VAR 0 2
64351: PUSH
64352: LD_INT 4
64354: MINUS
64355: PUSH
64356: LD_INT 2
64358: PUSH
64359: EMPTY
64360: LIST
64361: LIST
64362: LIST
64363: PUSH
64364: LD_VAR 0 1
64368: PUSH
64369: LD_INT 3
64371: MINUS
64372: PUSH
64373: LD_VAR 0 2
64377: PUSH
64378: LD_INT 1
64380: PUSH
64381: EMPTY
64382: LIST
64383: LIST
64384: LIST
64385: PUSH
64386: LD_VAR 0 1
64390: PUSH
64391: LD_INT 4
64393: PLUS
64394: PUSH
64395: LD_VAR 0 2
64399: PUSH
64400: LD_INT 4
64402: PUSH
64403: EMPTY
64404: LIST
64405: LIST
64406: LIST
64407: PUSH
64408: LD_VAR 0 1
64412: PUSH
64413: LD_INT 3
64415: PLUS
64416: PUSH
64417: LD_VAR 0 2
64421: PUSH
64422: LD_INT 3
64424: PLUS
64425: PUSH
64426: LD_INT 5
64428: PUSH
64429: EMPTY
64430: LIST
64431: LIST
64432: LIST
64433: PUSH
64434: LD_VAR 0 1
64438: PUSH
64439: LD_VAR 0 2
64443: PUSH
64444: LD_INT 4
64446: PLUS
64447: PUSH
64448: LD_INT 0
64450: PUSH
64451: EMPTY
64452: LIST
64453: LIST
64454: LIST
64455: PUSH
64456: EMPTY
64457: LIST
64458: LIST
64459: LIST
64460: LIST
64461: LIST
64462: ST_TO_ADDR
// end ; 1 :
64463: GO 65163
64465: LD_INT 1
64467: DOUBLE
64468: EQUAL
64469: IFTRUE 64473
64471: GO 64606
64473: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
64474: LD_ADDR_VAR 0 5
64478: PUSH
64479: LD_VAR 0 1
64483: PUSH
64484: LD_VAR 0 2
64488: PUSH
64489: LD_INT 4
64491: MINUS
64492: PUSH
64493: LD_INT 3
64495: PUSH
64496: EMPTY
64497: LIST
64498: LIST
64499: LIST
64500: PUSH
64501: LD_VAR 0 1
64505: PUSH
64506: LD_INT 3
64508: MINUS
64509: PUSH
64510: LD_VAR 0 2
64514: PUSH
64515: LD_INT 3
64517: MINUS
64518: PUSH
64519: LD_INT 2
64521: PUSH
64522: EMPTY
64523: LIST
64524: LIST
64525: LIST
64526: PUSH
64527: LD_VAR 0 1
64531: PUSH
64532: LD_INT 4
64534: MINUS
64535: PUSH
64536: LD_VAR 0 2
64540: PUSH
64541: LD_INT 1
64543: PUSH
64544: EMPTY
64545: LIST
64546: LIST
64547: LIST
64548: PUSH
64549: LD_VAR 0 1
64553: PUSH
64554: LD_VAR 0 2
64558: PUSH
64559: LD_INT 3
64561: PLUS
64562: PUSH
64563: LD_INT 0
64565: PUSH
64566: EMPTY
64567: LIST
64568: LIST
64569: LIST
64570: PUSH
64571: LD_VAR 0 1
64575: PUSH
64576: LD_INT 4
64578: PLUS
64579: PUSH
64580: LD_VAR 0 2
64584: PUSH
64585: LD_INT 4
64587: PLUS
64588: PUSH
64589: LD_INT 5
64591: PUSH
64592: EMPTY
64593: LIST
64594: LIST
64595: LIST
64596: PUSH
64597: EMPTY
64598: LIST
64599: LIST
64600: LIST
64601: LIST
64602: LIST
64603: ST_TO_ADDR
// end ; 2 :
64604: GO 65163
64606: LD_INT 2
64608: DOUBLE
64609: EQUAL
64610: IFTRUE 64614
64612: GO 64743
64614: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
64615: LD_ADDR_VAR 0 5
64619: PUSH
64620: LD_VAR 0 1
64624: PUSH
64625: LD_VAR 0 2
64629: PUSH
64630: LD_INT 3
64632: MINUS
64633: PUSH
64634: LD_INT 3
64636: PUSH
64637: EMPTY
64638: LIST
64639: LIST
64640: LIST
64641: PUSH
64642: LD_VAR 0 1
64646: PUSH
64647: LD_INT 4
64649: PLUS
64650: PUSH
64651: LD_VAR 0 2
64655: PUSH
64656: LD_INT 4
64658: PUSH
64659: EMPTY
64660: LIST
64661: LIST
64662: LIST
64663: PUSH
64664: LD_VAR 0 1
64668: PUSH
64669: LD_VAR 0 2
64673: PUSH
64674: LD_INT 4
64676: PLUS
64677: PUSH
64678: LD_INT 0
64680: PUSH
64681: EMPTY
64682: LIST
64683: LIST
64684: LIST
64685: PUSH
64686: LD_VAR 0 1
64690: PUSH
64691: LD_INT 3
64693: MINUS
64694: PUSH
64695: LD_VAR 0 2
64699: PUSH
64700: LD_INT 1
64702: PUSH
64703: EMPTY
64704: LIST
64705: LIST
64706: LIST
64707: PUSH
64708: LD_VAR 0 1
64712: PUSH
64713: LD_INT 4
64715: MINUS
64716: PUSH
64717: LD_VAR 0 2
64721: PUSH
64722: LD_INT 4
64724: MINUS
64725: PUSH
64726: LD_INT 2
64728: PUSH
64729: EMPTY
64730: LIST
64731: LIST
64732: LIST
64733: PUSH
64734: EMPTY
64735: LIST
64736: LIST
64737: LIST
64738: LIST
64739: LIST
64740: ST_TO_ADDR
// end ; 3 :
64741: GO 65163
64743: LD_INT 3
64745: DOUBLE
64746: EQUAL
64747: IFTRUE 64751
64749: GO 64884
64751: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
64752: LD_ADDR_VAR 0 5
64756: PUSH
64757: LD_VAR 0 1
64761: PUSH
64762: LD_INT 3
64764: PLUS
64765: PUSH
64766: LD_VAR 0 2
64770: PUSH
64771: LD_INT 4
64773: PUSH
64774: EMPTY
64775: LIST
64776: LIST
64777: LIST
64778: PUSH
64779: LD_VAR 0 1
64783: PUSH
64784: LD_INT 4
64786: PLUS
64787: PUSH
64788: LD_VAR 0 2
64792: PUSH
64793: LD_INT 4
64795: PLUS
64796: PUSH
64797: LD_INT 5
64799: PUSH
64800: EMPTY
64801: LIST
64802: LIST
64803: LIST
64804: PUSH
64805: LD_VAR 0 1
64809: PUSH
64810: LD_INT 4
64812: MINUS
64813: PUSH
64814: LD_VAR 0 2
64818: PUSH
64819: LD_INT 1
64821: PUSH
64822: EMPTY
64823: LIST
64824: LIST
64825: LIST
64826: PUSH
64827: LD_VAR 0 1
64831: PUSH
64832: LD_VAR 0 2
64836: PUSH
64837: LD_INT 4
64839: MINUS
64840: PUSH
64841: LD_INT 3
64843: PUSH
64844: EMPTY
64845: LIST
64846: LIST
64847: LIST
64848: PUSH
64849: LD_VAR 0 1
64853: PUSH
64854: LD_INT 3
64856: MINUS
64857: PUSH
64858: LD_VAR 0 2
64862: PUSH
64863: LD_INT 3
64865: MINUS
64866: PUSH
64867: LD_INT 2
64869: PUSH
64870: EMPTY
64871: LIST
64872: LIST
64873: LIST
64874: PUSH
64875: EMPTY
64876: LIST
64877: LIST
64878: LIST
64879: LIST
64880: LIST
64881: ST_TO_ADDR
// end ; 4 :
64882: GO 65163
64884: LD_INT 4
64886: DOUBLE
64887: EQUAL
64888: IFTRUE 64892
64890: GO 65025
64892: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
64893: LD_ADDR_VAR 0 5
64897: PUSH
64898: LD_VAR 0 1
64902: PUSH
64903: LD_VAR 0 2
64907: PUSH
64908: LD_INT 4
64910: PLUS
64911: PUSH
64912: LD_INT 0
64914: PUSH
64915: EMPTY
64916: LIST
64917: LIST
64918: LIST
64919: PUSH
64920: LD_VAR 0 1
64924: PUSH
64925: LD_INT 3
64927: PLUS
64928: PUSH
64929: LD_VAR 0 2
64933: PUSH
64934: LD_INT 3
64936: PLUS
64937: PUSH
64938: LD_INT 5
64940: PUSH
64941: EMPTY
64942: LIST
64943: LIST
64944: LIST
64945: PUSH
64946: LD_VAR 0 1
64950: PUSH
64951: LD_INT 4
64953: PLUS
64954: PUSH
64955: LD_VAR 0 2
64959: PUSH
64960: LD_INT 4
64962: PUSH
64963: EMPTY
64964: LIST
64965: LIST
64966: LIST
64967: PUSH
64968: LD_VAR 0 1
64972: PUSH
64973: LD_VAR 0 2
64977: PUSH
64978: LD_INT 3
64980: MINUS
64981: PUSH
64982: LD_INT 3
64984: PUSH
64985: EMPTY
64986: LIST
64987: LIST
64988: LIST
64989: PUSH
64990: LD_VAR 0 1
64994: PUSH
64995: LD_INT 4
64997: MINUS
64998: PUSH
64999: LD_VAR 0 2
65003: PUSH
65004: LD_INT 4
65006: MINUS
65007: PUSH
65008: LD_INT 2
65010: PUSH
65011: EMPTY
65012: LIST
65013: LIST
65014: LIST
65015: PUSH
65016: EMPTY
65017: LIST
65018: LIST
65019: LIST
65020: LIST
65021: LIST
65022: ST_TO_ADDR
// end ; 5 :
65023: GO 65163
65025: LD_INT 5
65027: DOUBLE
65028: EQUAL
65029: IFTRUE 65033
65031: GO 65162
65033: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
65034: LD_ADDR_VAR 0 5
65038: PUSH
65039: LD_VAR 0 1
65043: PUSH
65044: LD_INT 4
65046: MINUS
65047: PUSH
65048: LD_VAR 0 2
65052: PUSH
65053: LD_INT 1
65055: PUSH
65056: EMPTY
65057: LIST
65058: LIST
65059: LIST
65060: PUSH
65061: LD_VAR 0 1
65065: PUSH
65066: LD_VAR 0 2
65070: PUSH
65071: LD_INT 4
65073: MINUS
65074: PUSH
65075: LD_INT 3
65077: PUSH
65078: EMPTY
65079: LIST
65080: LIST
65081: LIST
65082: PUSH
65083: LD_VAR 0 1
65087: PUSH
65088: LD_INT 4
65090: PLUS
65091: PUSH
65092: LD_VAR 0 2
65096: PUSH
65097: LD_INT 4
65099: PLUS
65100: PUSH
65101: LD_INT 5
65103: PUSH
65104: EMPTY
65105: LIST
65106: LIST
65107: LIST
65108: PUSH
65109: LD_VAR 0 1
65113: PUSH
65114: LD_INT 3
65116: PLUS
65117: PUSH
65118: LD_VAR 0 2
65122: PUSH
65123: LD_INT 4
65125: PUSH
65126: EMPTY
65127: LIST
65128: LIST
65129: LIST
65130: PUSH
65131: LD_VAR 0 1
65135: PUSH
65136: LD_VAR 0 2
65140: PUSH
65141: LD_INT 3
65143: PLUS
65144: PUSH
65145: LD_INT 0
65147: PUSH
65148: EMPTY
65149: LIST
65150: LIST
65151: LIST
65152: PUSH
65153: EMPTY
65154: LIST
65155: LIST
65156: LIST
65157: LIST
65158: LIST
65159: ST_TO_ADDR
// end ; end ;
65160: GO 65163
65162: POP
// result := list ;
65163: LD_ADDR_VAR 0 4
65167: PUSH
65168: LD_VAR 0 5
65172: ST_TO_ADDR
// end ;
65173: LD_VAR 0 4
65177: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
65178: LD_INT 0
65180: PPUSH
65181: PPUSH
65182: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
65183: LD_VAR 0 1
65187: NOT
65188: PUSH
65189: LD_VAR 0 2
65193: PUSH
65194: LD_INT 1
65196: PUSH
65197: LD_INT 2
65199: PUSH
65200: LD_INT 3
65202: PUSH
65203: LD_INT 4
65205: PUSH
65206: EMPTY
65207: LIST
65208: LIST
65209: LIST
65210: LIST
65211: IN
65212: NOT
65213: OR
65214: IFFALSE 65218
// exit ;
65216: GO 65310
// tmp := [ ] ;
65218: LD_ADDR_VAR 0 5
65222: PUSH
65223: EMPTY
65224: ST_TO_ADDR
// for i in units do
65225: LD_ADDR_VAR 0 4
65229: PUSH
65230: LD_VAR 0 1
65234: PUSH
65235: FOR_IN
65236: IFFALSE 65279
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
65238: LD_ADDR_VAR 0 5
65242: PUSH
65243: LD_VAR 0 5
65247: PPUSH
65248: LD_VAR 0 5
65252: PUSH
65253: LD_INT 1
65255: PLUS
65256: PPUSH
65257: LD_VAR 0 4
65261: PPUSH
65262: LD_VAR 0 2
65266: PPUSH
65267: CALL_OW 259
65271: PPUSH
65272: CALL_OW 2
65276: ST_TO_ADDR
65277: GO 65235
65279: POP
65280: POP
// if not tmp then
65281: LD_VAR 0 5
65285: NOT
65286: IFFALSE 65290
// exit ;
65288: GO 65310
// result := SortListByListDesc ( units , tmp ) ;
65290: LD_ADDR_VAR 0 3
65294: PUSH
65295: LD_VAR 0 1
65299: PPUSH
65300: LD_VAR 0 5
65304: PPUSH
65305: CALL_OW 77
65309: ST_TO_ADDR
// end ;
65310: LD_VAR 0 3
65314: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
65315: LD_INT 0
65317: PPUSH
65318: PPUSH
65319: PPUSH
// result := false ;
65320: LD_ADDR_VAR 0 3
65324: PUSH
65325: LD_INT 0
65327: ST_TO_ADDR
// x := GetX ( building ) ;
65328: LD_ADDR_VAR 0 4
65332: PUSH
65333: LD_VAR 0 2
65337: PPUSH
65338: CALL_OW 250
65342: ST_TO_ADDR
// y := GetY ( building ) ;
65343: LD_ADDR_VAR 0 5
65347: PUSH
65348: LD_VAR 0 2
65352: PPUSH
65353: CALL_OW 251
65357: ST_TO_ADDR
// if not building or not x or not y then
65358: LD_VAR 0 2
65362: NOT
65363: PUSH
65364: LD_VAR 0 4
65368: NOT
65369: OR
65370: PUSH
65371: LD_VAR 0 5
65375: NOT
65376: OR
65377: IFFALSE 65381
// exit ;
65379: GO 65473
// if GetTaskList ( unit ) then
65381: LD_VAR 0 1
65385: PPUSH
65386: CALL_OW 437
65390: IFFALSE 65473
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65392: LD_STRING e
65394: PUSH
65395: LD_VAR 0 1
65399: PPUSH
65400: CALL_OW 437
65404: PUSH
65405: LD_INT 1
65407: ARRAY
65408: PUSH
65409: LD_INT 1
65411: ARRAY
65412: EQUAL
65413: PUSH
65414: LD_VAR 0 4
65418: PUSH
65419: LD_VAR 0 1
65423: PPUSH
65424: CALL_OW 437
65428: PUSH
65429: LD_INT 1
65431: ARRAY
65432: PUSH
65433: LD_INT 2
65435: ARRAY
65436: EQUAL
65437: AND
65438: PUSH
65439: LD_VAR 0 5
65443: PUSH
65444: LD_VAR 0 1
65448: PPUSH
65449: CALL_OW 437
65453: PUSH
65454: LD_INT 1
65456: ARRAY
65457: PUSH
65458: LD_INT 3
65460: ARRAY
65461: EQUAL
65462: AND
65463: IFFALSE 65473
// result := true end ;
65465: LD_ADDR_VAR 0 3
65469: PUSH
65470: LD_INT 1
65472: ST_TO_ADDR
// end ;
65473: LD_VAR 0 3
65477: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
65478: LD_INT 0
65480: PPUSH
// result := false ;
65481: LD_ADDR_VAR 0 4
65485: PUSH
65486: LD_INT 0
65488: ST_TO_ADDR
// if GetTaskList ( unit ) then
65489: LD_VAR 0 1
65493: PPUSH
65494: CALL_OW 437
65498: IFFALSE 65581
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
65500: LD_STRING M
65502: PUSH
65503: LD_VAR 0 1
65507: PPUSH
65508: CALL_OW 437
65512: PUSH
65513: LD_INT 1
65515: ARRAY
65516: PUSH
65517: LD_INT 1
65519: ARRAY
65520: EQUAL
65521: PUSH
65522: LD_VAR 0 2
65526: PUSH
65527: LD_VAR 0 1
65531: PPUSH
65532: CALL_OW 437
65536: PUSH
65537: LD_INT 1
65539: ARRAY
65540: PUSH
65541: LD_INT 2
65543: ARRAY
65544: EQUAL
65545: AND
65546: PUSH
65547: LD_VAR 0 3
65551: PUSH
65552: LD_VAR 0 1
65556: PPUSH
65557: CALL_OW 437
65561: PUSH
65562: LD_INT 1
65564: ARRAY
65565: PUSH
65566: LD_INT 3
65568: ARRAY
65569: EQUAL
65570: AND
65571: IFFALSE 65581
// result := true ;
65573: LD_ADDR_VAR 0 4
65577: PUSH
65578: LD_INT 1
65580: ST_TO_ADDR
// end ; end ;
65581: LD_VAR 0 4
65585: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
65586: LD_INT 0
65588: PPUSH
65589: PPUSH
65590: PPUSH
65591: PPUSH
// if not unit or not area then
65592: LD_VAR 0 1
65596: NOT
65597: PUSH
65598: LD_VAR 0 2
65602: NOT
65603: OR
65604: IFFALSE 65608
// exit ;
65606: GO 65772
// tmp := AreaToList ( area , i ) ;
65608: LD_ADDR_VAR 0 6
65612: PUSH
65613: LD_VAR 0 2
65617: PPUSH
65618: LD_VAR 0 5
65622: PPUSH
65623: CALL_OW 517
65627: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
65628: LD_ADDR_VAR 0 5
65632: PUSH
65633: DOUBLE
65634: LD_INT 1
65636: DEC
65637: ST_TO_ADDR
65638: LD_VAR 0 6
65642: PUSH
65643: LD_INT 1
65645: ARRAY
65646: PUSH
65647: FOR_TO
65648: IFFALSE 65770
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
65650: LD_ADDR_VAR 0 7
65654: PUSH
65655: LD_VAR 0 6
65659: PUSH
65660: LD_INT 1
65662: ARRAY
65663: PUSH
65664: LD_VAR 0 5
65668: ARRAY
65669: PUSH
65670: LD_VAR 0 6
65674: PUSH
65675: LD_INT 2
65677: ARRAY
65678: PUSH
65679: LD_VAR 0 5
65683: ARRAY
65684: PUSH
65685: EMPTY
65686: LIST
65687: LIST
65688: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
65689: LD_VAR 0 7
65693: PUSH
65694: LD_INT 1
65696: ARRAY
65697: PPUSH
65698: LD_VAR 0 7
65702: PUSH
65703: LD_INT 2
65705: ARRAY
65706: PPUSH
65707: CALL_OW 428
65711: PUSH
65712: LD_INT 0
65714: EQUAL
65715: IFFALSE 65768
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
65717: LD_VAR 0 1
65721: PPUSH
65722: LD_VAR 0 7
65726: PUSH
65727: LD_INT 1
65729: ARRAY
65730: PPUSH
65731: LD_VAR 0 7
65735: PUSH
65736: LD_INT 2
65738: ARRAY
65739: PPUSH
65740: LD_VAR 0 3
65744: PPUSH
65745: CALL_OW 48
// result := IsPlaced ( unit ) ;
65749: LD_ADDR_VAR 0 4
65753: PUSH
65754: LD_VAR 0 1
65758: PPUSH
65759: CALL_OW 305
65763: ST_TO_ADDR
// exit ;
65764: POP
65765: POP
65766: GO 65772
// end ; end ;
65768: GO 65647
65770: POP
65771: POP
// end ;
65772: LD_VAR 0 4
65776: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
65777: LD_INT 0
65779: PPUSH
65780: PPUSH
65781: PPUSH
// if not side or side > 8 then
65782: LD_VAR 0 1
65786: NOT
65787: PUSH
65788: LD_VAR 0 1
65792: PUSH
65793: LD_INT 8
65795: GREATER
65796: OR
65797: IFFALSE 65801
// exit ;
65799: GO 65988
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
65801: LD_ADDR_VAR 0 4
65805: PUSH
65806: LD_INT 22
65808: PUSH
65809: LD_VAR 0 1
65813: PUSH
65814: EMPTY
65815: LIST
65816: LIST
65817: PUSH
65818: LD_INT 21
65820: PUSH
65821: LD_INT 3
65823: PUSH
65824: EMPTY
65825: LIST
65826: LIST
65827: PUSH
65828: EMPTY
65829: LIST
65830: LIST
65831: PPUSH
65832: CALL_OW 69
65836: ST_TO_ADDR
// if not tmp then
65837: LD_VAR 0 4
65841: NOT
65842: IFFALSE 65846
// exit ;
65844: GO 65988
// enable_addtolog := true ;
65846: LD_ADDR_OWVAR 81
65850: PUSH
65851: LD_INT 1
65853: ST_TO_ADDR
// AddToLog ( [ ) ;
65854: LD_STRING [
65856: PPUSH
65857: CALL_OW 561
// for i in tmp do
65861: LD_ADDR_VAR 0 3
65865: PUSH
65866: LD_VAR 0 4
65870: PUSH
65871: FOR_IN
65872: IFFALSE 65979
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
65874: LD_STRING [
65876: PUSH
65877: LD_VAR 0 3
65881: PPUSH
65882: CALL_OW 266
65886: STR
65887: PUSH
65888: LD_STRING , 
65890: STR
65891: PUSH
65892: LD_VAR 0 3
65896: PPUSH
65897: CALL_OW 250
65901: STR
65902: PUSH
65903: LD_STRING , 
65905: STR
65906: PUSH
65907: LD_VAR 0 3
65911: PPUSH
65912: CALL_OW 251
65916: STR
65917: PUSH
65918: LD_STRING , 
65920: STR
65921: PUSH
65922: LD_VAR 0 3
65926: PPUSH
65927: CALL_OW 254
65931: STR
65932: PUSH
65933: LD_STRING , 
65935: STR
65936: PUSH
65937: LD_VAR 0 3
65941: PPUSH
65942: LD_INT 1
65944: PPUSH
65945: CALL_OW 268
65949: STR
65950: PUSH
65951: LD_STRING , 
65953: STR
65954: PUSH
65955: LD_VAR 0 3
65959: PPUSH
65960: LD_INT 2
65962: PPUSH
65963: CALL_OW 268
65967: STR
65968: PUSH
65969: LD_STRING ],
65971: STR
65972: PPUSH
65973: CALL_OW 561
// end ;
65977: GO 65871
65979: POP
65980: POP
// AddToLog ( ]; ) ;
65981: LD_STRING ];
65983: PPUSH
65984: CALL_OW 561
// end ;
65988: LD_VAR 0 2
65992: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
65993: LD_INT 0
65995: PPUSH
65996: PPUSH
65997: PPUSH
65998: PPUSH
65999: PPUSH
// if not area or not rate or not max then
66000: LD_VAR 0 1
66004: NOT
66005: PUSH
66006: LD_VAR 0 2
66010: NOT
66011: OR
66012: PUSH
66013: LD_VAR 0 4
66017: NOT
66018: OR
66019: IFFALSE 66023
// exit ;
66021: GO 66215
// while 1 do
66023: LD_INT 1
66025: IFFALSE 66215
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
66027: LD_ADDR_VAR 0 9
66031: PUSH
66032: LD_VAR 0 1
66036: PPUSH
66037: LD_INT 1
66039: PPUSH
66040: CALL_OW 287
66044: PUSH
66045: LD_INT 10
66047: MUL
66048: ST_TO_ADDR
// r := rate / 10 ;
66049: LD_ADDR_VAR 0 7
66053: PUSH
66054: LD_VAR 0 2
66058: PUSH
66059: LD_INT 10
66061: DIVREAL
66062: ST_TO_ADDR
// time := 1 1$00 ;
66063: LD_ADDR_VAR 0 8
66067: PUSH
66068: LD_INT 2100
66070: ST_TO_ADDR
// if amount < min then
66071: LD_VAR 0 9
66075: PUSH
66076: LD_VAR 0 3
66080: LESS
66081: IFFALSE 66099
// r := r * 2 else
66083: LD_ADDR_VAR 0 7
66087: PUSH
66088: LD_VAR 0 7
66092: PUSH
66093: LD_INT 2
66095: MUL
66096: ST_TO_ADDR
66097: GO 66125
// if amount > max then
66099: LD_VAR 0 9
66103: PUSH
66104: LD_VAR 0 4
66108: GREATER
66109: IFFALSE 66125
// r := r / 2 ;
66111: LD_ADDR_VAR 0 7
66115: PUSH
66116: LD_VAR 0 7
66120: PUSH
66121: LD_INT 2
66123: DIVREAL
66124: ST_TO_ADDR
// time := time / r ;
66125: LD_ADDR_VAR 0 8
66129: PUSH
66130: LD_VAR 0 8
66134: PUSH
66135: LD_VAR 0 7
66139: DIVREAL
66140: ST_TO_ADDR
// if time < 0 then
66141: LD_VAR 0 8
66145: PUSH
66146: LD_INT 0
66148: LESS
66149: IFFALSE 66166
// time := time * - 1 ;
66151: LD_ADDR_VAR 0 8
66155: PUSH
66156: LD_VAR 0 8
66160: PUSH
66161: LD_INT 1
66163: NEG
66164: MUL
66165: ST_TO_ADDR
// wait ( time ) ;
66166: LD_VAR 0 8
66170: PPUSH
66171: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
66175: LD_INT 35
66177: PPUSH
66178: LD_INT 875
66180: PPUSH
66181: CALL_OW 12
66185: PPUSH
66186: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
66190: LD_INT 1
66192: PPUSH
66193: LD_INT 5
66195: PPUSH
66196: CALL_OW 12
66200: PPUSH
66201: LD_VAR 0 1
66205: PPUSH
66206: LD_INT 1
66208: PPUSH
66209: CALL_OW 55
// end ;
66213: GO 66023
// end ;
66215: LD_VAR 0 5
66219: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
66220: LD_INT 0
66222: PPUSH
66223: PPUSH
66224: PPUSH
66225: PPUSH
66226: PPUSH
66227: PPUSH
66228: PPUSH
66229: PPUSH
// if not turrets or not factories then
66230: LD_VAR 0 1
66234: NOT
66235: PUSH
66236: LD_VAR 0 2
66240: NOT
66241: OR
66242: IFFALSE 66246
// exit ;
66244: GO 66553
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
66246: LD_ADDR_VAR 0 10
66250: PUSH
66251: LD_INT 5
66253: PUSH
66254: LD_INT 6
66256: PUSH
66257: EMPTY
66258: LIST
66259: LIST
66260: PUSH
66261: LD_INT 2
66263: PUSH
66264: LD_INT 4
66266: PUSH
66267: EMPTY
66268: LIST
66269: LIST
66270: PUSH
66271: LD_INT 3
66273: PUSH
66274: LD_INT 5
66276: PUSH
66277: EMPTY
66278: LIST
66279: LIST
66280: PUSH
66281: EMPTY
66282: LIST
66283: LIST
66284: LIST
66285: PUSH
66286: LD_INT 24
66288: PUSH
66289: LD_INT 25
66291: PUSH
66292: EMPTY
66293: LIST
66294: LIST
66295: PUSH
66296: LD_INT 23
66298: PUSH
66299: LD_INT 27
66301: PUSH
66302: EMPTY
66303: LIST
66304: LIST
66305: PUSH
66306: EMPTY
66307: LIST
66308: LIST
66309: PUSH
66310: LD_INT 42
66312: PUSH
66313: LD_INT 43
66315: PUSH
66316: EMPTY
66317: LIST
66318: LIST
66319: PUSH
66320: LD_INT 44
66322: PUSH
66323: LD_INT 46
66325: PUSH
66326: EMPTY
66327: LIST
66328: LIST
66329: PUSH
66330: LD_INT 45
66332: PUSH
66333: LD_INT 47
66335: PUSH
66336: EMPTY
66337: LIST
66338: LIST
66339: PUSH
66340: EMPTY
66341: LIST
66342: LIST
66343: LIST
66344: PUSH
66345: EMPTY
66346: LIST
66347: LIST
66348: LIST
66349: ST_TO_ADDR
// result := [ ] ;
66350: LD_ADDR_VAR 0 3
66354: PUSH
66355: EMPTY
66356: ST_TO_ADDR
// for i in turrets do
66357: LD_ADDR_VAR 0 4
66361: PUSH
66362: LD_VAR 0 1
66366: PUSH
66367: FOR_IN
66368: IFFALSE 66551
// begin nat := GetNation ( i ) ;
66370: LD_ADDR_VAR 0 7
66374: PUSH
66375: LD_VAR 0 4
66379: PPUSH
66380: CALL_OW 248
66384: ST_TO_ADDR
// weapon := 0 ;
66385: LD_ADDR_VAR 0 8
66389: PUSH
66390: LD_INT 0
66392: ST_TO_ADDR
// if not nat then
66393: LD_VAR 0 7
66397: NOT
66398: IFFALSE 66402
// continue ;
66400: GO 66367
// for j in list [ nat ] do
66402: LD_ADDR_VAR 0 5
66406: PUSH
66407: LD_VAR 0 10
66411: PUSH
66412: LD_VAR 0 7
66416: ARRAY
66417: PUSH
66418: FOR_IN
66419: IFFALSE 66460
// if GetBWeapon ( i ) = j [ 1 ] then
66421: LD_VAR 0 4
66425: PPUSH
66426: CALL_OW 269
66430: PUSH
66431: LD_VAR 0 5
66435: PUSH
66436: LD_INT 1
66438: ARRAY
66439: EQUAL
66440: IFFALSE 66458
// begin weapon := j [ 2 ] ;
66442: LD_ADDR_VAR 0 8
66446: PUSH
66447: LD_VAR 0 5
66451: PUSH
66452: LD_INT 2
66454: ARRAY
66455: ST_TO_ADDR
// break ;
66456: GO 66460
// end ;
66458: GO 66418
66460: POP
66461: POP
// if not weapon then
66462: LD_VAR 0 8
66466: NOT
66467: IFFALSE 66471
// continue ;
66469: GO 66367
// for k in factories do
66471: LD_ADDR_VAR 0 6
66475: PUSH
66476: LD_VAR 0 2
66480: PUSH
66481: FOR_IN
66482: IFFALSE 66547
// begin weapons := AvailableWeaponList ( k ) ;
66484: LD_ADDR_VAR 0 9
66488: PUSH
66489: LD_VAR 0 6
66493: PPUSH
66494: CALL_OW 478
66498: ST_TO_ADDR
// if not weapons then
66499: LD_VAR 0 9
66503: NOT
66504: IFFALSE 66508
// continue ;
66506: GO 66481
// if weapon in weapons then
66508: LD_VAR 0 8
66512: PUSH
66513: LD_VAR 0 9
66517: IN
66518: IFFALSE 66545
// begin result := [ i , weapon ] ;
66520: LD_ADDR_VAR 0 3
66524: PUSH
66525: LD_VAR 0 4
66529: PUSH
66530: LD_VAR 0 8
66534: PUSH
66535: EMPTY
66536: LIST
66537: LIST
66538: ST_TO_ADDR
// exit ;
66539: POP
66540: POP
66541: POP
66542: POP
66543: GO 66553
// end ; end ;
66545: GO 66481
66547: POP
66548: POP
// end ;
66549: GO 66367
66551: POP
66552: POP
// end ;
66553: LD_VAR 0 3
66557: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
66558: LD_INT 0
66560: PPUSH
// if not side or side > 8 then
66561: LD_VAR 0 3
66565: NOT
66566: PUSH
66567: LD_VAR 0 3
66571: PUSH
66572: LD_INT 8
66574: GREATER
66575: OR
66576: IFFALSE 66580
// exit ;
66578: GO 66639
// if not range then
66580: LD_VAR 0 4
66584: NOT
66585: IFFALSE 66596
// range := - 12 ;
66587: LD_ADDR_VAR 0 4
66591: PUSH
66592: LD_INT 12
66594: NEG
66595: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
66596: LD_VAR 0 1
66600: PPUSH
66601: LD_VAR 0 2
66605: PPUSH
66606: LD_VAR 0 3
66610: PPUSH
66611: LD_VAR 0 4
66615: PPUSH
66616: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
66620: LD_VAR 0 1
66624: PPUSH
66625: LD_VAR 0 2
66629: PPUSH
66630: LD_VAR 0 3
66634: PPUSH
66635: CALL_OW 331
// end ;
66639: LD_VAR 0 5
66643: RET
// export function Video ( mode ) ; begin
66644: LD_INT 0
66646: PPUSH
// ingame_video = mode ;
66647: LD_ADDR_OWVAR 52
66651: PUSH
66652: LD_VAR 0 1
66656: ST_TO_ADDR
// interface_hidden = mode ;
66657: LD_ADDR_OWVAR 54
66661: PUSH
66662: LD_VAR 0 1
66666: ST_TO_ADDR
// end ;
66667: LD_VAR 0 2
66671: RET
// export function Join ( array , element ) ; begin
66672: LD_INT 0
66674: PPUSH
// result := Replace ( array , array + 1 , element ) ;
66675: LD_ADDR_VAR 0 3
66679: PUSH
66680: LD_VAR 0 1
66684: PPUSH
66685: LD_VAR 0 1
66689: PUSH
66690: LD_INT 1
66692: PLUS
66693: PPUSH
66694: LD_VAR 0 2
66698: PPUSH
66699: CALL_OW 1
66703: ST_TO_ADDR
// end ;
66704: LD_VAR 0 3
66708: RET
// export function JoinUnion ( array , element ) ; begin
66709: LD_INT 0
66711: PPUSH
// result := array union element ;
66712: LD_ADDR_VAR 0 3
66716: PUSH
66717: LD_VAR 0 1
66721: PUSH
66722: LD_VAR 0 2
66726: UNION
66727: ST_TO_ADDR
// end ;
66728: LD_VAR 0 3
66732: RET
// export function GetBehemoths ( side ) ; begin
66733: LD_INT 0
66735: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
66736: LD_ADDR_VAR 0 2
66740: PUSH
66741: LD_INT 22
66743: PUSH
66744: LD_VAR 0 1
66748: PUSH
66749: EMPTY
66750: LIST
66751: LIST
66752: PUSH
66753: LD_INT 31
66755: PUSH
66756: LD_INT 25
66758: PUSH
66759: EMPTY
66760: LIST
66761: LIST
66762: PUSH
66763: EMPTY
66764: LIST
66765: LIST
66766: PPUSH
66767: CALL_OW 69
66771: ST_TO_ADDR
// end ;
66772: LD_VAR 0 2
66776: RET
// export function Shuffle ( array ) ; var i , index ; begin
66777: LD_INT 0
66779: PPUSH
66780: PPUSH
66781: PPUSH
// result := [ ] ;
66782: LD_ADDR_VAR 0 2
66786: PUSH
66787: EMPTY
66788: ST_TO_ADDR
// if not array then
66789: LD_VAR 0 1
66793: NOT
66794: IFFALSE 66798
// exit ;
66796: GO 66897
// Randomize ;
66798: CALL_OW 10
// for i = array downto 1 do
66802: LD_ADDR_VAR 0 3
66806: PUSH
66807: DOUBLE
66808: LD_VAR 0 1
66812: INC
66813: ST_TO_ADDR
66814: LD_INT 1
66816: PUSH
66817: FOR_DOWNTO
66818: IFFALSE 66895
// begin index := rand ( 1 , array ) ;
66820: LD_ADDR_VAR 0 4
66824: PUSH
66825: LD_INT 1
66827: PPUSH
66828: LD_VAR 0 1
66832: PPUSH
66833: CALL_OW 12
66837: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
66838: LD_ADDR_VAR 0 2
66842: PUSH
66843: LD_VAR 0 2
66847: PPUSH
66848: LD_VAR 0 2
66852: PUSH
66853: LD_INT 1
66855: PLUS
66856: PPUSH
66857: LD_VAR 0 1
66861: PUSH
66862: LD_VAR 0 4
66866: ARRAY
66867: PPUSH
66868: CALL_OW 2
66872: ST_TO_ADDR
// array := Delete ( array , index ) ;
66873: LD_ADDR_VAR 0 1
66877: PUSH
66878: LD_VAR 0 1
66882: PPUSH
66883: LD_VAR 0 4
66887: PPUSH
66888: CALL_OW 3
66892: ST_TO_ADDR
// end ;
66893: GO 66817
66895: POP
66896: POP
// end ;
66897: LD_VAR 0 2
66901: RET
// export function GetBaseMaterials ( base ) ; begin
66902: LD_INT 0
66904: PPUSH
// result := [ 0 , 0 , 0 ] ;
66905: LD_ADDR_VAR 0 2
66909: PUSH
66910: LD_INT 0
66912: PUSH
66913: LD_INT 0
66915: PUSH
66916: LD_INT 0
66918: PUSH
66919: EMPTY
66920: LIST
66921: LIST
66922: LIST
66923: ST_TO_ADDR
// if not base then
66924: LD_VAR 0 1
66928: NOT
66929: IFFALSE 66933
// exit ;
66931: GO 66982
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
66933: LD_ADDR_VAR 0 2
66937: PUSH
66938: LD_VAR 0 1
66942: PPUSH
66943: LD_INT 1
66945: PPUSH
66946: CALL_OW 275
66950: PUSH
66951: LD_VAR 0 1
66955: PPUSH
66956: LD_INT 2
66958: PPUSH
66959: CALL_OW 275
66963: PUSH
66964: LD_VAR 0 1
66968: PPUSH
66969: LD_INT 3
66971: PPUSH
66972: CALL_OW 275
66976: PUSH
66977: EMPTY
66978: LIST
66979: LIST
66980: LIST
66981: ST_TO_ADDR
// end ;
66982: LD_VAR 0 2
66986: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
66987: LD_INT 0
66989: PPUSH
66990: PPUSH
// result := array ;
66991: LD_ADDR_VAR 0 3
66995: PUSH
66996: LD_VAR 0 1
67000: ST_TO_ADDR
// if size > 0 then
67001: LD_VAR 0 2
67005: PUSH
67006: LD_INT 0
67008: GREATER
67009: IFFALSE 67055
// for i := array downto size do
67011: LD_ADDR_VAR 0 4
67015: PUSH
67016: DOUBLE
67017: LD_VAR 0 1
67021: INC
67022: ST_TO_ADDR
67023: LD_VAR 0 2
67027: PUSH
67028: FOR_DOWNTO
67029: IFFALSE 67053
// result := Delete ( result , result ) ;
67031: LD_ADDR_VAR 0 3
67035: PUSH
67036: LD_VAR 0 3
67040: PPUSH
67041: LD_VAR 0 3
67045: PPUSH
67046: CALL_OW 3
67050: ST_TO_ADDR
67051: GO 67028
67053: POP
67054: POP
// end ;
67055: LD_VAR 0 3
67059: RET
// export function ComExit ( unit ) ; var tmp ; begin
67060: LD_INT 0
67062: PPUSH
67063: PPUSH
// if not IsInUnit ( unit ) then
67064: LD_VAR 0 1
67068: PPUSH
67069: CALL_OW 310
67073: NOT
67074: IFFALSE 67078
// exit ;
67076: GO 67138
// tmp := IsInUnit ( unit ) ;
67078: LD_ADDR_VAR 0 3
67082: PUSH
67083: LD_VAR 0 1
67087: PPUSH
67088: CALL_OW 310
67092: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
67093: LD_VAR 0 3
67097: PPUSH
67098: CALL_OW 247
67102: PUSH
67103: LD_INT 2
67105: EQUAL
67106: IFFALSE 67119
// ComExitVehicle ( unit ) else
67108: LD_VAR 0 1
67112: PPUSH
67113: CALL_OW 121
67117: GO 67128
// ComExitBuilding ( unit ) ;
67119: LD_VAR 0 1
67123: PPUSH
67124: CALL_OW 122
// result := tmp ;
67128: LD_ADDR_VAR 0 2
67132: PUSH
67133: LD_VAR 0 3
67137: ST_TO_ADDR
// end ;
67138: LD_VAR 0 2
67142: RET
// export function ComExitAll ( units ) ; var i ; begin
67143: LD_INT 0
67145: PPUSH
67146: PPUSH
// if not units then
67147: LD_VAR 0 1
67151: NOT
67152: IFFALSE 67156
// exit ;
67154: GO 67182
// for i in units do
67156: LD_ADDR_VAR 0 3
67160: PUSH
67161: LD_VAR 0 1
67165: PUSH
67166: FOR_IN
67167: IFFALSE 67180
// ComExit ( i ) ;
67169: LD_VAR 0 3
67173: PPUSH
67174: CALL 67060 0 1
67178: GO 67166
67180: POP
67181: POP
// end ;
67182: LD_VAR 0 2
67186: RET
// export function ResetHc ; begin
67187: LD_INT 0
67189: PPUSH
// InitHc ;
67190: CALL_OW 19
// hc_importance := 0 ;
67194: LD_ADDR_OWVAR 32
67198: PUSH
67199: LD_INT 0
67201: ST_TO_ADDR
// end ;
67202: LD_VAR 0 1
67206: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
67207: LD_INT 0
67209: PPUSH
67210: PPUSH
67211: PPUSH
// _x := ( x1 + x2 ) div 2 ;
67212: LD_ADDR_VAR 0 6
67216: PUSH
67217: LD_VAR 0 1
67221: PUSH
67222: LD_VAR 0 3
67226: PLUS
67227: PUSH
67228: LD_INT 2
67230: DIV
67231: ST_TO_ADDR
// if _x < 0 then
67232: LD_VAR 0 6
67236: PUSH
67237: LD_INT 0
67239: LESS
67240: IFFALSE 67257
// _x := _x * - 1 ;
67242: LD_ADDR_VAR 0 6
67246: PUSH
67247: LD_VAR 0 6
67251: PUSH
67252: LD_INT 1
67254: NEG
67255: MUL
67256: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
67257: LD_ADDR_VAR 0 7
67261: PUSH
67262: LD_VAR 0 2
67266: PUSH
67267: LD_VAR 0 4
67271: PLUS
67272: PUSH
67273: LD_INT 2
67275: DIV
67276: ST_TO_ADDR
// if _y < 0 then
67277: LD_VAR 0 7
67281: PUSH
67282: LD_INT 0
67284: LESS
67285: IFFALSE 67302
// _y := _y * - 1 ;
67287: LD_ADDR_VAR 0 7
67291: PUSH
67292: LD_VAR 0 7
67296: PUSH
67297: LD_INT 1
67299: NEG
67300: MUL
67301: ST_TO_ADDR
// result := [ _x , _y ] ;
67302: LD_ADDR_VAR 0 5
67306: PUSH
67307: LD_VAR 0 6
67311: PUSH
67312: LD_VAR 0 7
67316: PUSH
67317: EMPTY
67318: LIST
67319: LIST
67320: ST_TO_ADDR
// end ;
67321: LD_VAR 0 5
67325: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
67326: LD_INT 0
67328: PPUSH
67329: PPUSH
67330: PPUSH
67331: PPUSH
// task := GetTaskList ( unit ) ;
67332: LD_ADDR_VAR 0 7
67336: PUSH
67337: LD_VAR 0 1
67341: PPUSH
67342: CALL_OW 437
67346: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
67347: LD_VAR 0 7
67351: NOT
67352: PUSH
67353: LD_VAR 0 1
67357: PPUSH
67358: LD_VAR 0 2
67362: PPUSH
67363: CALL_OW 308
67367: NOT
67368: AND
67369: IFFALSE 67373
// exit ;
67371: GO 67491
// if IsInArea ( unit , area ) then
67373: LD_VAR 0 1
67377: PPUSH
67378: LD_VAR 0 2
67382: PPUSH
67383: CALL_OW 308
67387: IFFALSE 67405
// begin ComMoveToArea ( unit , goAway ) ;
67389: LD_VAR 0 1
67393: PPUSH
67394: LD_VAR 0 3
67398: PPUSH
67399: CALL_OW 113
// exit ;
67403: GO 67491
// end ; if task [ 1 ] [ 1 ] <> M then
67405: LD_VAR 0 7
67409: PUSH
67410: LD_INT 1
67412: ARRAY
67413: PUSH
67414: LD_INT 1
67416: ARRAY
67417: PUSH
67418: LD_STRING M
67420: NONEQUAL
67421: IFFALSE 67425
// exit ;
67423: GO 67491
// x := task [ 1 ] [ 2 ] ;
67425: LD_ADDR_VAR 0 5
67429: PUSH
67430: LD_VAR 0 7
67434: PUSH
67435: LD_INT 1
67437: ARRAY
67438: PUSH
67439: LD_INT 2
67441: ARRAY
67442: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
67443: LD_ADDR_VAR 0 6
67447: PUSH
67448: LD_VAR 0 7
67452: PUSH
67453: LD_INT 1
67455: ARRAY
67456: PUSH
67457: LD_INT 3
67459: ARRAY
67460: ST_TO_ADDR
// if InArea ( x , y , area ) then
67461: LD_VAR 0 5
67465: PPUSH
67466: LD_VAR 0 6
67470: PPUSH
67471: LD_VAR 0 2
67475: PPUSH
67476: CALL_OW 309
67480: IFFALSE 67491
// ComStop ( unit ) ;
67482: LD_VAR 0 1
67486: PPUSH
67487: CALL_OW 141
// end ;
67491: LD_VAR 0 4
67495: RET
// export function Abs ( value ) ; begin
67496: LD_INT 0
67498: PPUSH
// result := value ;
67499: LD_ADDR_VAR 0 2
67503: PUSH
67504: LD_VAR 0 1
67508: ST_TO_ADDR
// if value < 0 then
67509: LD_VAR 0 1
67513: PUSH
67514: LD_INT 0
67516: LESS
67517: IFFALSE 67534
// result := value * - 1 ;
67519: LD_ADDR_VAR 0 2
67523: PUSH
67524: LD_VAR 0 1
67528: PUSH
67529: LD_INT 1
67531: NEG
67532: MUL
67533: ST_TO_ADDR
// end ;
67534: LD_VAR 0 2
67538: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
67539: LD_INT 0
67541: PPUSH
67542: PPUSH
67543: PPUSH
67544: PPUSH
67545: PPUSH
67546: PPUSH
67547: PPUSH
67548: PPUSH
// if not unit or not building then
67549: LD_VAR 0 1
67553: NOT
67554: PUSH
67555: LD_VAR 0 2
67559: NOT
67560: OR
67561: IFFALSE 67565
// exit ;
67563: GO 67791
// x := GetX ( building ) ;
67565: LD_ADDR_VAR 0 4
67569: PUSH
67570: LD_VAR 0 2
67574: PPUSH
67575: CALL_OW 250
67579: ST_TO_ADDR
// y := GetY ( building ) ;
67580: LD_ADDR_VAR 0 6
67584: PUSH
67585: LD_VAR 0 2
67589: PPUSH
67590: CALL_OW 251
67594: ST_TO_ADDR
// d := GetDir ( building ) ;
67595: LD_ADDR_VAR 0 8
67599: PUSH
67600: LD_VAR 0 2
67604: PPUSH
67605: CALL_OW 254
67609: ST_TO_ADDR
// r := 4 ;
67610: LD_ADDR_VAR 0 9
67614: PUSH
67615: LD_INT 4
67617: ST_TO_ADDR
// for i := 1 to 5 do
67618: LD_ADDR_VAR 0 10
67622: PUSH
67623: DOUBLE
67624: LD_INT 1
67626: DEC
67627: ST_TO_ADDR
67628: LD_INT 5
67630: PUSH
67631: FOR_TO
67632: IFFALSE 67789
// begin _x := ShiftX ( x , d , r + i ) ;
67634: LD_ADDR_VAR 0 5
67638: PUSH
67639: LD_VAR 0 4
67643: PPUSH
67644: LD_VAR 0 8
67648: PPUSH
67649: LD_VAR 0 9
67653: PUSH
67654: LD_VAR 0 10
67658: PLUS
67659: PPUSH
67660: CALL_OW 272
67664: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
67665: LD_ADDR_VAR 0 7
67669: PUSH
67670: LD_VAR 0 6
67674: PPUSH
67675: LD_VAR 0 8
67679: PPUSH
67680: LD_VAR 0 9
67684: PUSH
67685: LD_VAR 0 10
67689: PLUS
67690: PPUSH
67691: CALL_OW 273
67695: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
67696: LD_VAR 0 5
67700: PPUSH
67701: LD_VAR 0 7
67705: PPUSH
67706: CALL_OW 488
67710: PUSH
67711: LD_VAR 0 5
67715: PPUSH
67716: LD_VAR 0 7
67720: PPUSH
67721: CALL_OW 428
67725: PPUSH
67726: CALL_OW 247
67730: PUSH
67731: LD_INT 3
67733: PUSH
67734: LD_INT 2
67736: PUSH
67737: EMPTY
67738: LIST
67739: LIST
67740: IN
67741: NOT
67742: AND
67743: IFFALSE 67787
// begin ComMoveXY ( unit , _x , _y ) ;
67745: LD_VAR 0 1
67749: PPUSH
67750: LD_VAR 0 5
67754: PPUSH
67755: LD_VAR 0 7
67759: PPUSH
67760: CALL_OW 111
// result := [ _x , _y ] ;
67764: LD_ADDR_VAR 0 3
67768: PUSH
67769: LD_VAR 0 5
67773: PUSH
67774: LD_VAR 0 7
67778: PUSH
67779: EMPTY
67780: LIST
67781: LIST
67782: ST_TO_ADDR
// exit ;
67783: POP
67784: POP
67785: GO 67791
// end ; end ;
67787: GO 67631
67789: POP
67790: POP
// end ;
67791: LD_VAR 0 3
67795: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
67796: LD_INT 0
67798: PPUSH
67799: PPUSH
67800: PPUSH
// result := 0 ;
67801: LD_ADDR_VAR 0 3
67805: PUSH
67806: LD_INT 0
67808: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
67809: LD_VAR 0 1
67813: PUSH
67814: LD_INT 0
67816: LESS
67817: PUSH
67818: LD_VAR 0 1
67822: PUSH
67823: LD_INT 8
67825: GREATER
67826: OR
67827: PUSH
67828: LD_VAR 0 2
67832: PUSH
67833: LD_INT 0
67835: LESS
67836: OR
67837: PUSH
67838: LD_VAR 0 2
67842: PUSH
67843: LD_INT 8
67845: GREATER
67846: OR
67847: IFFALSE 67851
// exit ;
67849: GO 67926
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
67851: LD_ADDR_VAR 0 4
67855: PUSH
67856: LD_INT 22
67858: PUSH
67859: LD_VAR 0 2
67863: PUSH
67864: EMPTY
67865: LIST
67866: LIST
67867: PPUSH
67868: CALL_OW 69
67872: PUSH
67873: FOR_IN
67874: IFFALSE 67924
// begin un := UnitShoot ( i ) ;
67876: LD_ADDR_VAR 0 5
67880: PUSH
67881: LD_VAR 0 4
67885: PPUSH
67886: CALL_OW 504
67890: ST_TO_ADDR
// if GetSide ( un ) = side1 then
67891: LD_VAR 0 5
67895: PPUSH
67896: CALL_OW 255
67900: PUSH
67901: LD_VAR 0 1
67905: EQUAL
67906: IFFALSE 67922
// begin result := un ;
67908: LD_ADDR_VAR 0 3
67912: PUSH
67913: LD_VAR 0 5
67917: ST_TO_ADDR
// exit ;
67918: POP
67919: POP
67920: GO 67926
// end ; end ;
67922: GO 67873
67924: POP
67925: POP
// end ;
67926: LD_VAR 0 3
67930: RET
// export function GetCargoBay ( units ) ; begin
67931: LD_INT 0
67933: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
67934: LD_ADDR_VAR 0 2
67938: PUSH
67939: LD_VAR 0 1
67943: PPUSH
67944: LD_INT 2
67946: PUSH
67947: LD_INT 34
67949: PUSH
67950: LD_INT 12
67952: PUSH
67953: EMPTY
67954: LIST
67955: LIST
67956: PUSH
67957: LD_INT 34
67959: PUSH
67960: LD_INT 51
67962: PUSH
67963: EMPTY
67964: LIST
67965: LIST
67966: PUSH
67967: LD_INT 34
67969: PUSH
67970: LD_INT 32
67972: PUSH
67973: EMPTY
67974: LIST
67975: LIST
67976: PUSH
67977: LD_INT 34
67979: PUSH
67980: LD_EXP 22
67984: PUSH
67985: EMPTY
67986: LIST
67987: LIST
67988: PUSH
67989: EMPTY
67990: LIST
67991: LIST
67992: LIST
67993: LIST
67994: LIST
67995: PPUSH
67996: CALL_OW 72
68000: ST_TO_ADDR
// end ;
68001: LD_VAR 0 2
68005: RET
// export function Negate ( value ) ; begin
68006: LD_INT 0
68008: PPUSH
// result := not value ;
68009: LD_ADDR_VAR 0 2
68013: PUSH
68014: LD_VAR 0 1
68018: NOT
68019: ST_TO_ADDR
// end ;
68020: LD_VAR 0 2
68024: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
68025: LD_INT 0
68027: PPUSH
// if x1 = x2 then
68028: LD_VAR 0 1
68032: PUSH
68033: LD_VAR 0 3
68037: EQUAL
68038: IFFALSE 68072
// begin if y1 > y2 then
68040: LD_VAR 0 2
68044: PUSH
68045: LD_VAR 0 4
68049: GREATER
68050: IFFALSE 68062
// result := 0 else
68052: LD_ADDR_VAR 0 5
68056: PUSH
68057: LD_INT 0
68059: ST_TO_ADDR
68060: GO 68070
// result := 3 ;
68062: LD_ADDR_VAR 0 5
68066: PUSH
68067: LD_INT 3
68069: ST_TO_ADDR
// exit ;
68070: GO 68158
// end ; if y1 = y2 then
68072: LD_VAR 0 2
68076: PUSH
68077: LD_VAR 0 4
68081: EQUAL
68082: IFFALSE 68116
// begin if x1 > x2 then
68084: LD_VAR 0 1
68088: PUSH
68089: LD_VAR 0 3
68093: GREATER
68094: IFFALSE 68106
// result := 1 else
68096: LD_ADDR_VAR 0 5
68100: PUSH
68101: LD_INT 1
68103: ST_TO_ADDR
68104: GO 68114
// result := 4 ;
68106: LD_ADDR_VAR 0 5
68110: PUSH
68111: LD_INT 4
68113: ST_TO_ADDR
// exit ;
68114: GO 68158
// end ; if x1 > x2 and y1 > y2 then
68116: LD_VAR 0 1
68120: PUSH
68121: LD_VAR 0 3
68125: GREATER
68126: PUSH
68127: LD_VAR 0 2
68131: PUSH
68132: LD_VAR 0 4
68136: GREATER
68137: AND
68138: IFFALSE 68150
// result := 2 else
68140: LD_ADDR_VAR 0 5
68144: PUSH
68145: LD_INT 2
68147: ST_TO_ADDR
68148: GO 68158
// result := 5 ;
68150: LD_ADDR_VAR 0 5
68154: PUSH
68155: LD_INT 5
68157: ST_TO_ADDR
// end ;
68158: LD_VAR 0 5
68162: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68163: LD_INT 0
68165: PPUSH
68166: PPUSH
// if not driver or not IsInUnit ( driver ) then
68167: LD_VAR 0 1
68171: NOT
68172: PUSH
68173: LD_VAR 0 1
68177: PPUSH
68178: CALL_OW 310
68182: NOT
68183: OR
68184: IFFALSE 68188
// exit ;
68186: GO 68278
// vehicle := IsInUnit ( driver ) ;
68188: LD_ADDR_VAR 0 3
68192: PUSH
68193: LD_VAR 0 1
68197: PPUSH
68198: CALL_OW 310
68202: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68203: LD_VAR 0 1
68207: PPUSH
68208: LD_STRING \
68210: PUSH
68211: LD_INT 0
68213: PUSH
68214: LD_INT 0
68216: PUSH
68217: LD_INT 0
68219: PUSH
68220: LD_INT 0
68222: PUSH
68223: LD_INT 0
68225: PUSH
68226: LD_INT 0
68228: PUSH
68229: EMPTY
68230: LIST
68231: LIST
68232: LIST
68233: LIST
68234: LIST
68235: LIST
68236: LIST
68237: PUSH
68238: LD_STRING E
68240: PUSH
68241: LD_INT 0
68243: PUSH
68244: LD_INT 0
68246: PUSH
68247: LD_VAR 0 3
68251: PUSH
68252: LD_INT 0
68254: PUSH
68255: LD_INT 0
68257: PUSH
68258: LD_INT 0
68260: PUSH
68261: EMPTY
68262: LIST
68263: LIST
68264: LIST
68265: LIST
68266: LIST
68267: LIST
68268: LIST
68269: PUSH
68270: EMPTY
68271: LIST
68272: LIST
68273: PPUSH
68274: CALL_OW 446
// end ;
68278: LD_VAR 0 2
68282: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
68283: LD_INT 0
68285: PPUSH
68286: PPUSH
// if not driver or not IsInUnit ( driver ) then
68287: LD_VAR 0 1
68291: NOT
68292: PUSH
68293: LD_VAR 0 1
68297: PPUSH
68298: CALL_OW 310
68302: NOT
68303: OR
68304: IFFALSE 68308
// exit ;
68306: GO 68398
// vehicle := IsInUnit ( driver ) ;
68308: LD_ADDR_VAR 0 3
68312: PUSH
68313: LD_VAR 0 1
68317: PPUSH
68318: CALL_OW 310
68322: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
68323: LD_VAR 0 1
68327: PPUSH
68328: LD_STRING \
68330: PUSH
68331: LD_INT 0
68333: PUSH
68334: LD_INT 0
68336: PUSH
68337: LD_INT 0
68339: PUSH
68340: LD_INT 0
68342: PUSH
68343: LD_INT 0
68345: PUSH
68346: LD_INT 0
68348: PUSH
68349: EMPTY
68350: LIST
68351: LIST
68352: LIST
68353: LIST
68354: LIST
68355: LIST
68356: LIST
68357: PUSH
68358: LD_STRING E
68360: PUSH
68361: LD_INT 0
68363: PUSH
68364: LD_INT 0
68366: PUSH
68367: LD_VAR 0 3
68371: PUSH
68372: LD_INT 0
68374: PUSH
68375: LD_INT 0
68377: PUSH
68378: LD_INT 0
68380: PUSH
68381: EMPTY
68382: LIST
68383: LIST
68384: LIST
68385: LIST
68386: LIST
68387: LIST
68388: LIST
68389: PUSH
68390: EMPTY
68391: LIST
68392: LIST
68393: PPUSH
68394: CALL_OW 447
// end ;
68398: LD_VAR 0 2
68402: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
68403: LD_INT 0
68405: PPUSH
68406: PPUSH
68407: PPUSH
// tmp := [ ] ;
68408: LD_ADDR_VAR 0 5
68412: PUSH
68413: EMPTY
68414: ST_TO_ADDR
// for i in units do
68415: LD_ADDR_VAR 0 4
68419: PUSH
68420: LD_VAR 0 1
68424: PUSH
68425: FOR_IN
68426: IFFALSE 68464
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
68428: LD_ADDR_VAR 0 5
68432: PUSH
68433: LD_VAR 0 5
68437: PPUSH
68438: LD_VAR 0 5
68442: PUSH
68443: LD_INT 1
68445: PLUS
68446: PPUSH
68447: LD_VAR 0 4
68451: PPUSH
68452: CALL_OW 256
68456: PPUSH
68457: CALL_OW 2
68461: ST_TO_ADDR
68462: GO 68425
68464: POP
68465: POP
// if not tmp then
68466: LD_VAR 0 5
68470: NOT
68471: IFFALSE 68475
// exit ;
68473: GO 68523
// if asc then
68475: LD_VAR 0 2
68479: IFFALSE 68503
// result := SortListByListAsc ( units , tmp ) else
68481: LD_ADDR_VAR 0 3
68485: PUSH
68486: LD_VAR 0 1
68490: PPUSH
68491: LD_VAR 0 5
68495: PPUSH
68496: CALL_OW 76
68500: ST_TO_ADDR
68501: GO 68523
// result := SortListByListDesc ( units , tmp ) ;
68503: LD_ADDR_VAR 0 3
68507: PUSH
68508: LD_VAR 0 1
68512: PPUSH
68513: LD_VAR 0 5
68517: PPUSH
68518: CALL_OW 77
68522: ST_TO_ADDR
// end ;
68523: LD_VAR 0 3
68527: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
68528: LD_INT 0
68530: PPUSH
68531: PPUSH
// task := GetTaskList ( mech ) ;
68532: LD_ADDR_VAR 0 4
68536: PUSH
68537: LD_VAR 0 1
68541: PPUSH
68542: CALL_OW 437
68546: ST_TO_ADDR
// if not task then
68547: LD_VAR 0 4
68551: NOT
68552: IFFALSE 68556
// exit ;
68554: GO 68598
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
68556: LD_ADDR_VAR 0 3
68560: PUSH
68561: LD_VAR 0 4
68565: PUSH
68566: LD_INT 1
68568: ARRAY
68569: PUSH
68570: LD_INT 1
68572: ARRAY
68573: PUSH
68574: LD_STRING r
68576: EQUAL
68577: PUSH
68578: LD_VAR 0 4
68582: PUSH
68583: LD_INT 1
68585: ARRAY
68586: PUSH
68587: LD_INT 4
68589: ARRAY
68590: PUSH
68591: LD_VAR 0 2
68595: EQUAL
68596: AND
68597: ST_TO_ADDR
// end ;
68598: LD_VAR 0 3
68602: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
68603: LD_INT 0
68605: PPUSH
// SetDir ( unit , d ) ;
68606: LD_VAR 0 1
68610: PPUSH
68611: LD_VAR 0 4
68615: PPUSH
68616: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
68620: LD_VAR 0 1
68624: PPUSH
68625: LD_VAR 0 2
68629: PPUSH
68630: LD_VAR 0 3
68634: PPUSH
68635: LD_VAR 0 5
68639: PPUSH
68640: CALL_OW 48
// end ;
68644: LD_VAR 0 6
68648: RET
// export function ToNaturalNumber ( number ) ; begin
68649: LD_INT 0
68651: PPUSH
// result := number div 1 ;
68652: LD_ADDR_VAR 0 2
68656: PUSH
68657: LD_VAR 0 1
68661: PUSH
68662: LD_INT 1
68664: DIV
68665: ST_TO_ADDR
// if number < 0 then
68666: LD_VAR 0 1
68670: PUSH
68671: LD_INT 0
68673: LESS
68674: IFFALSE 68684
// result := 0 ;
68676: LD_ADDR_VAR 0 2
68680: PUSH
68681: LD_INT 0
68683: ST_TO_ADDR
// end ;
68684: LD_VAR 0 2
68688: RET
// export function SortByClass ( units , class ) ; var un ; begin
68689: LD_INT 0
68691: PPUSH
68692: PPUSH
// if not units or not class then
68693: LD_VAR 0 1
68697: NOT
68698: PUSH
68699: LD_VAR 0 2
68703: NOT
68704: OR
68705: IFFALSE 68709
// exit ;
68707: GO 68804
// result := [ ] ;
68709: LD_ADDR_VAR 0 3
68713: PUSH
68714: EMPTY
68715: ST_TO_ADDR
// for un in units do
68716: LD_ADDR_VAR 0 4
68720: PUSH
68721: LD_VAR 0 1
68725: PUSH
68726: FOR_IN
68727: IFFALSE 68802
// if GetClass ( un ) = class then
68729: LD_VAR 0 4
68733: PPUSH
68734: CALL_OW 257
68738: PUSH
68739: LD_VAR 0 2
68743: EQUAL
68744: IFFALSE 68771
// result := Insert ( result , 1 , un ) else
68746: LD_ADDR_VAR 0 3
68750: PUSH
68751: LD_VAR 0 3
68755: PPUSH
68756: LD_INT 1
68758: PPUSH
68759: LD_VAR 0 4
68763: PPUSH
68764: CALL_OW 2
68768: ST_TO_ADDR
68769: GO 68800
// result := Replace ( result , result + 1 , un ) ;
68771: LD_ADDR_VAR 0 3
68775: PUSH
68776: LD_VAR 0 3
68780: PPUSH
68781: LD_VAR 0 3
68785: PUSH
68786: LD_INT 1
68788: PLUS
68789: PPUSH
68790: LD_VAR 0 4
68794: PPUSH
68795: CALL_OW 1
68799: ST_TO_ADDR
68800: GO 68726
68802: POP
68803: POP
// end ;
68804: LD_VAR 0 3
68808: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
68809: LD_INT 0
68811: PPUSH
68812: PPUSH
68813: PPUSH
68814: PPUSH
68815: PPUSH
68816: PPUSH
68817: PPUSH
// result := [ ] ;
68818: LD_ADDR_VAR 0 4
68822: PUSH
68823: EMPTY
68824: ST_TO_ADDR
// if x - r < 0 then
68825: LD_VAR 0 1
68829: PUSH
68830: LD_VAR 0 3
68834: MINUS
68835: PUSH
68836: LD_INT 0
68838: LESS
68839: IFFALSE 68851
// min_x := 0 else
68841: LD_ADDR_VAR 0 8
68845: PUSH
68846: LD_INT 0
68848: ST_TO_ADDR
68849: GO 68867
// min_x := x - r ;
68851: LD_ADDR_VAR 0 8
68855: PUSH
68856: LD_VAR 0 1
68860: PUSH
68861: LD_VAR 0 3
68865: MINUS
68866: ST_TO_ADDR
// if y - r < 0 then
68867: LD_VAR 0 2
68871: PUSH
68872: LD_VAR 0 3
68876: MINUS
68877: PUSH
68878: LD_INT 0
68880: LESS
68881: IFFALSE 68893
// min_y := 0 else
68883: LD_ADDR_VAR 0 7
68887: PUSH
68888: LD_INT 0
68890: ST_TO_ADDR
68891: GO 68909
// min_y := y - r ;
68893: LD_ADDR_VAR 0 7
68897: PUSH
68898: LD_VAR 0 2
68902: PUSH
68903: LD_VAR 0 3
68907: MINUS
68908: ST_TO_ADDR
// max_x := x + r ;
68909: LD_ADDR_VAR 0 9
68913: PUSH
68914: LD_VAR 0 1
68918: PUSH
68919: LD_VAR 0 3
68923: PLUS
68924: ST_TO_ADDR
// max_y := y + r ;
68925: LD_ADDR_VAR 0 10
68929: PUSH
68930: LD_VAR 0 2
68934: PUSH
68935: LD_VAR 0 3
68939: PLUS
68940: ST_TO_ADDR
// for _x = min_x to max_x do
68941: LD_ADDR_VAR 0 5
68945: PUSH
68946: DOUBLE
68947: LD_VAR 0 8
68951: DEC
68952: ST_TO_ADDR
68953: LD_VAR 0 9
68957: PUSH
68958: FOR_TO
68959: IFFALSE 69060
// for _y = min_y to max_y do
68961: LD_ADDR_VAR 0 6
68965: PUSH
68966: DOUBLE
68967: LD_VAR 0 7
68971: DEC
68972: ST_TO_ADDR
68973: LD_VAR 0 10
68977: PUSH
68978: FOR_TO
68979: IFFALSE 69056
// begin if not ValidHex ( _x , _y ) then
68981: LD_VAR 0 5
68985: PPUSH
68986: LD_VAR 0 6
68990: PPUSH
68991: CALL_OW 488
68995: NOT
68996: IFFALSE 69000
// continue ;
68998: GO 68978
// if GetResourceTypeXY ( _x , _y ) then
69000: LD_VAR 0 5
69004: PPUSH
69005: LD_VAR 0 6
69009: PPUSH
69010: CALL_OW 283
69014: IFFALSE 69054
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
69016: LD_ADDR_VAR 0 4
69020: PUSH
69021: LD_VAR 0 4
69025: PPUSH
69026: LD_VAR 0 4
69030: PUSH
69031: LD_INT 1
69033: PLUS
69034: PPUSH
69035: LD_VAR 0 5
69039: PUSH
69040: LD_VAR 0 6
69044: PUSH
69045: EMPTY
69046: LIST
69047: LIST
69048: PPUSH
69049: CALL_OW 1
69053: ST_TO_ADDR
// end ;
69054: GO 68978
69056: POP
69057: POP
69058: GO 68958
69060: POP
69061: POP
// end ;
69062: LD_VAR 0 4
69066: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
69067: LD_INT 0
69069: PPUSH
69070: PPUSH
69071: PPUSH
69072: PPUSH
69073: PPUSH
69074: PPUSH
// if not units then
69075: LD_VAR 0 1
69079: NOT
69080: IFFALSE 69084
// exit ;
69082: GO 69485
// result := UnitFilter ( units , [ f_ok ] ) ;
69084: LD_ADDR_VAR 0 3
69088: PUSH
69089: LD_VAR 0 1
69093: PPUSH
69094: LD_INT 50
69096: PUSH
69097: EMPTY
69098: LIST
69099: PPUSH
69100: CALL_OW 72
69104: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
69105: LD_ADDR_VAR 0 7
69109: PUSH
69110: LD_VAR 0 1
69114: PUSH
69115: LD_INT 1
69117: ARRAY
69118: PPUSH
69119: CALL_OW 255
69123: ST_TO_ADDR
// if not result then
69124: LD_VAR 0 3
69128: NOT
69129: IFFALSE 69133
// exit ;
69131: GO 69485
// for i in result do
69133: LD_ADDR_VAR 0 4
69137: PUSH
69138: LD_VAR 0 3
69142: PUSH
69143: FOR_IN
69144: IFFALSE 69483
// begin tag := GetTag ( i ) + 1 ;
69146: LD_ADDR_VAR 0 8
69150: PUSH
69151: LD_VAR 0 4
69155: PPUSH
69156: CALL_OW 110
69160: PUSH
69161: LD_INT 1
69163: PLUS
69164: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
69165: LD_ADDR_VAR 0 6
69169: PUSH
69170: LD_VAR 0 4
69174: PPUSH
69175: CALL_OW 250
69179: PPUSH
69180: LD_VAR 0 4
69184: PPUSH
69185: CALL_OW 251
69189: PPUSH
69190: LD_INT 6
69192: PPUSH
69193: CALL 68809 0 3
69197: ST_TO_ADDR
// if cr then
69198: LD_VAR 0 6
69202: IFFALSE 69241
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
69204: LD_VAR 0 4
69208: PPUSH
69209: LD_VAR 0 6
69213: PUSH
69214: LD_INT 1
69216: ARRAY
69217: PUSH
69218: LD_INT 1
69220: ARRAY
69221: PPUSH
69222: LD_VAR 0 6
69226: PUSH
69227: LD_INT 1
69229: ARRAY
69230: PUSH
69231: LD_INT 2
69233: ARRAY
69234: PPUSH
69235: CALL_OW 116
69239: GO 69481
// if path > tag then
69241: LD_VAR 0 2
69245: PUSH
69246: LD_VAR 0 8
69250: GREATER
69251: IFFALSE 69429
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
69253: LD_ADDR_VAR 0 5
69257: PUSH
69258: LD_INT 81
69260: PUSH
69261: LD_VAR 0 7
69265: PUSH
69266: EMPTY
69267: LIST
69268: LIST
69269: PUSH
69270: LD_INT 91
69272: PUSH
69273: LD_VAR 0 4
69277: PUSH
69278: LD_INT 12
69280: PUSH
69281: EMPTY
69282: LIST
69283: LIST
69284: LIST
69285: PUSH
69286: EMPTY
69287: LIST
69288: LIST
69289: PPUSH
69290: CALL_OW 69
69294: ST_TO_ADDR
// if enemy then
69295: LD_VAR 0 5
69299: IFFALSE 69327
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
69301: LD_VAR 0 4
69305: PPUSH
69306: LD_VAR 0 5
69310: PPUSH
69311: LD_VAR 0 4
69315: PPUSH
69316: CALL_OW 74
69320: PPUSH
69321: CALL_OW 115
69325: GO 69427
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
69327: LD_VAR 0 4
69331: PPUSH
69332: LD_VAR 0 2
69336: PUSH
69337: LD_VAR 0 8
69341: ARRAY
69342: PUSH
69343: LD_INT 1
69345: ARRAY
69346: PPUSH
69347: LD_VAR 0 2
69351: PUSH
69352: LD_VAR 0 8
69356: ARRAY
69357: PUSH
69358: LD_INT 2
69360: ARRAY
69361: PPUSH
69362: CALL_OW 297
69366: PUSH
69367: LD_INT 6
69369: GREATER
69370: IFFALSE 69413
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
69372: LD_VAR 0 4
69376: PPUSH
69377: LD_VAR 0 2
69381: PUSH
69382: LD_VAR 0 8
69386: ARRAY
69387: PUSH
69388: LD_INT 1
69390: ARRAY
69391: PPUSH
69392: LD_VAR 0 2
69396: PUSH
69397: LD_VAR 0 8
69401: ARRAY
69402: PUSH
69403: LD_INT 2
69405: ARRAY
69406: PPUSH
69407: CALL_OW 114
69411: GO 69427
// SetTag ( i , tag ) ;
69413: LD_VAR 0 4
69417: PPUSH
69418: LD_VAR 0 8
69422: PPUSH
69423: CALL_OW 109
// end else
69427: GO 69481
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
69429: LD_ADDR_VAR 0 5
69433: PUSH
69434: LD_INT 81
69436: PUSH
69437: LD_VAR 0 7
69441: PUSH
69442: EMPTY
69443: LIST
69444: LIST
69445: PPUSH
69446: CALL_OW 69
69450: ST_TO_ADDR
// if enemy then
69451: LD_VAR 0 5
69455: IFFALSE 69481
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
69457: LD_VAR 0 4
69461: PPUSH
69462: LD_VAR 0 5
69466: PPUSH
69467: LD_VAR 0 4
69471: PPUSH
69472: CALL_OW 74
69476: PPUSH
69477: CALL_OW 115
// end ; end ;
69481: GO 69143
69483: POP
69484: POP
// end ; end_of_file
69485: LD_VAR 0 3
69489: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
69490: LD_VAR 0 1
69494: PUSH
69495: LD_INT 200
69497: DOUBLE
69498: GREATEREQUAL
69499: IFFALSE 69507
69501: LD_INT 299
69503: DOUBLE
69504: LESSEQUAL
69505: IFTRUE 69509
69507: GO 69541
69509: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
69510: LD_VAR 0 1
69514: PPUSH
69515: LD_VAR 0 2
69519: PPUSH
69520: LD_VAR 0 3
69524: PPUSH
69525: LD_VAR 0 4
69529: PPUSH
69530: LD_VAR 0 5
69534: PPUSH
69535: CALL 26052 0 5
69539: GO 69618
69541: LD_INT 300
69543: DOUBLE
69544: GREATEREQUAL
69545: IFFALSE 69553
69547: LD_INT 399
69549: DOUBLE
69550: LESSEQUAL
69551: IFTRUE 69555
69553: GO 69617
69555: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
69556: LD_VAR 0 1
69560: PPUSH
69561: LD_VAR 0 2
69565: PPUSH
69566: LD_VAR 0 3
69570: PPUSH
69571: LD_VAR 0 4
69575: PPUSH
69576: LD_VAR 0 5
69580: PPUSH
69581: LD_VAR 0 6
69585: PPUSH
69586: LD_VAR 0 7
69590: PPUSH
69591: LD_VAR 0 8
69595: PPUSH
69596: LD_VAR 0 9
69600: PPUSH
69601: LD_VAR 0 10
69605: PPUSH
69606: LD_VAR 0 11
69610: PPUSH
69611: CALL 23950 0 11
69615: GO 69618
69617: POP
// end ;
69618: PPOPN 11
69620: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
69621: LD_VAR 0 1
69625: PPUSH
69626: LD_VAR 0 2
69630: PPUSH
69631: LD_VAR 0 3
69635: PPUSH
69636: LD_VAR 0 4
69640: PPUSH
69641: LD_VAR 0 5
69645: PPUSH
69646: CALL 26044 0 5
// end ; end_of_file
69650: PPOPN 5
69652: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
69653: LD_VAR 0 1
69657: PPUSH
69658: LD_VAR 0 2
69662: PPUSH
69663: LD_VAR 0 3
69667: PPUSH
69668: LD_VAR 0 4
69672: PPUSH
69673: LD_VAR 0 5
69677: PPUSH
69678: LD_VAR 0 6
69682: PPUSH
69683: CALL 12145 0 6
// end ;
69687: PPOPN 6
69689: END
